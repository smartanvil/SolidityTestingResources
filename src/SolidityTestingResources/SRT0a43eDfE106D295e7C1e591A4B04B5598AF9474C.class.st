Class {
	#name : #SRT0a43eDfE106D295e7C1e591A4B04B5598AF9474C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a43eDfE106D295e7C1e591A4B04B5598AF9474C >> base64 [
	^ ''.
	

]
