Class {
	#name : #SRT9922bff8380e9062eDa0ad2f5712d96A88c3D0b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9922bff8380e9062eDa0ad2f5712d96A88c3D0b3 >> base64 [
	^ ''.
	

]
