Class {
	#name : #SRT22f2f936b288fd305f5570c667bdfb5e314e6b1a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22f2f936b288fd305f5570c667bdfb5e314e6b1a >> base64 [
	^ ''.
	

]
