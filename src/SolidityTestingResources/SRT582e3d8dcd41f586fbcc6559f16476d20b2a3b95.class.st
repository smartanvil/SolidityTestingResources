Class {
	#name : #SRT582e3d8dcd41f586fbcc6559f16476d20b2a3b95,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT582e3d8dcd41f586fbcc6559f16476d20b2a3b95 >> base64 [
	^ ''.
	

]
