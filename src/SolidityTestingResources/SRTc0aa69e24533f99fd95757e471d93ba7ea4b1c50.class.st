Class {
	#name : #SRTc0aa69e24533f99fd95757e471d93ba7ea4b1c50,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0aa69e24533f99fd95757e471d93ba7ea4b1c50 >> base64 [
	^ ''.
	

]
