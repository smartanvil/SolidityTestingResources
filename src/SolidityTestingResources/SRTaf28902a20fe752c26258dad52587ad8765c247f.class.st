Class {
	#name : #SRTaf28902a20fe752c26258dad52587ad8765c247f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf28902a20fe752c26258dad52587ad8765c247f >> base64 [
	^ ''.
	

]
