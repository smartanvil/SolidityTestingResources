Class {
	#name : #SRT16ff57d02d9b1442f87c4b69eab5779fc8a71516,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT16ff57d02d9b1442f87c4b69eab5779fc8a71516 >> base64 [
	^ ''.
	

]
