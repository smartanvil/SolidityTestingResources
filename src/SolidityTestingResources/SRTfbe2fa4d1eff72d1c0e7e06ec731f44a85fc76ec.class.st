Class {
	#name : #SRTfbe2fa4d1eff72d1c0e7e06ec731f44a85fc76ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfbe2fa4d1eff72d1c0e7e06ec731f44a85fc76ec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qIFNlbmQgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IF92YWx1ZSk7ICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZU9mW190b10pOyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICB1aW50IHB1YmxpYyBpZDsgLyogVG8gZW5zdXJlIGRpc3RpbmN0IGNvbnRyYWN0cyBmb3IgZGlmZmVyZW50IHRva2VucyBvd25lZCBieSB0aGUgc2FtZSBvd25lciAqLwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBib29sIHB1YmxpYyBzZWFsZWQgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiBUb2tlbih1aW50IF9pZCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBpZCA9IF9pZDsKICAgIH0KCiAgICAvKiBBbGxvd3MgdGhlIG93bmVyIHRvIG1pbnQgbW9yZSB0b2tlbnMgKi8KICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHRoZSBvd25lciBpcyBhbGxvd2VkIHRvIG1pbnQKICAgICAgICByZXF1aXJlKCFzZWFsZWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbiBvbmx5IG1pbnQgd2hpbGUgdW5zZWFsZWQKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VPZltfdG9dKTsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlYWwoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBzZWFsZWQgPSB0cnVlOwogICAgfQp9Cgpjb250cmFjdCBXaXRoZHJhdyB7CiAgICBUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgZnVuY3Rpb24gV2l0aGRyYXcoVG9rZW4gX3Rva2VuKSB7CiAgICAgICAgdG9rZW4gPSBfdG9rZW47CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7fQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgewogICAgICAgIHJlcXVpcmUodG9rZW4uc2VhbGVkKCkpOwogICAgICAgIHJlcXVpcmUodG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpID4gMCk7CiAgICAgICAgdWludCB0b2tlbl9hbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcik7CiAgICAgICAgdWludCB3ZWlfYW1vdW50ID0gdGhpcy5iYWxhbmNlICogdG9rZW5fYW1vdW50IC8gdG9rZW4udG90YWxTdXBwbHkoKTsKICAgICAgICBpZiAoIXRva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCB0b2tlbl9hbW91bnQpIHx8ICFtc2cuc2VuZGVyLnNlbmQod2VpX2Ftb3VudCkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQp9Cgpjb250cmFjdCBUb2tlbkdhbWUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICB1aW50IHB1YmxpYyBjYXBfaW5fd2VpOwogICAgdWludCBjb25zdGFudCBpbml0aWFsX2R1cmF0aW9uID0gMSBob3VyczsKICAgIHVpbnQgY29uc3RhbnQgdGltZV9leHRlbnNpb25fZnJvbV9kb3VibGluZyA9IDEgaG91cnM7CiAgICB1aW50IGNvbnN0YW50IHRpbWVfb2ZfaGFsZl9kZWNheSA9IDEgaG91cnM7CiAgICBUb2tlbiBwdWJsaWMgZXhjZXNzX3Rva2VuOyAvKiBUb2tlbiBjb250cmFjdCB1c2VkIHRvIHJlY2VpdmUgZXhjZXNzIGFmdGVyIHRoZSBzYWxlICovCiAgICBXaXRoZHJhdyBwdWJsaWMgZXhjZXNzX3dpdGhkcmF3OyAgLyogV2l0aGRyYXcgY29udHJhY3QgZGlzdHJpYnV0aW5nIHRoZSBleGNlc3MgKi8KICAgIFRva2VuIHB1YmxpYyBnYW1lX3Rva2VuOyAgIC8qIFRva2VuIGNvbnRyYWN0IHVzZWQgdG8gcmVjZWl2ZSBwcml6ZXMgKi8KICAgIHVpbnQgcHVibGljIGVuZF90aW1lOyAgICAgIC8qIEN1cnJlbnQgZW5kIHRpbWUgKi8KICAgIHVpbnQgbGFzdF90aW1lID0gMDsgICAgICAgIC8qIFRpbWVzdGFtcCBvZiB0aGUgbGF0ZXN0IGNvbnRyaWJ1dGlvbiAqLwogICAgdWludDI1NiBlbWEgPSAwOyAgICAgICAgICAgLyogQ3VycmVudCB2YWx1ZSBvZiB0aGUgRU1BICovCiAgICB1aW50IHB1YmxpYyB0b3RhbF93ZWlfZ2l2ZW4gPSAwOyAgLyogVG90YWwgYW1vdW50IG9mIHdlaSBnaXZlbiB2aWEgZmFsbGJhY2sgZnVuY3Rpb24gKi8KCiAgICBmdW5jdGlvbiBUb2tlbkdhbWUodWludCBfY2FwX2luX3dlaSkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBjYXBfaW5fd2VpID0gX2NhcF9pbl93ZWk7CiAgICAgICAgZXhjZXNzX3Rva2VuID0gbmV3IFRva2VuKDEpOwogICAgICAgIGV4Y2Vzc193aXRoZHJhdyA9IG5ldyBXaXRoZHJhdyhleGNlc3NfdG9rZW4pOwogICAgICAgIGdhbWVfdG9rZW4gPSBuZXcgVG9rZW4oMik7CiAgICAgICAgZW5kX3RpbWUgPSBub3cgKyBpbml0aWFsX2R1cmF0aW9uOwogICAgfQoKICAgIGZ1bmN0aW9uIHBsYXkoKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG5vdyA8PSBlbmRfdGltZSk7ICAgLy8gQ2hlY2sgdGhhdCB0aGUgc2FsZSBoYXMgbm90IGVuZGVkCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsgICAgIC8vIENoZWNrIHRoYXQgc29tZXRoaW5nIGhhcyBiZWVuIHNlbnQKICAgICAgICB0b3RhbF93ZWlfZ2l2ZW4gKz0gbXNnLnZhbHVlOwogICAgICAgIGVtYSA9IG1zZy52YWx1ZSArIGVtYSAqIHRpbWVfb2ZfaGFsZl9kZWNheSAvICh0aW1lX29mX2hhbGZfZGVjYXkgKyAobm93IC0gbGFzdF90aW1lKSApOwogICAgICAgIGxhc3RfdGltZSA9IG5vdzsKICAgICAgICB1aW50IGV4dGVuZGVkX3RpbWUgPSBub3cgKyBlbWEgKiB0aW1lX2V4dGVuc2lvbl9mcm9tX2RvdWJsaW5nIC8gdG90YWxfd2VpX2dpdmVuOwogICAgICAgIGlmIChleHRlbmRlZF90aW1lID4gZW5kX3RpbWUpIHsKICAgICAgICAgICAgZW5kX3RpbWUgPSBleHRlbmRlZF90aW1lOwogICAgICAgIH0KICAgICAgICBpZiAoIWV4Y2Vzc190b2tlbi5taW50KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSkgfHwgIWdhbWVfdG9rZW4ubWludChtc2cuc2VuZGVyLCBtc2cudmFsdWUpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBmaW5hbGlzZSgpIHsKICAgICAgICByZXF1aXJlKG5vdyA+IGVuZF90aW1lKTsKICAgICAgICBleGNlc3NfdG9rZW4uc2VhbCgpOwogICAgICAgIGdhbWVfdG9rZW4uc2VhbCgpOwogICAgICAgIHVpbnQgdG9fb3duZXIgPSAwOwogICAgICAgIGlmICh0aGlzLmJhbGFuY2UgPiBjYXBfaW5fd2VpKSB7CiAgICAgICAgICAgIHRvX293bmVyID0gY2FwX2luX3dlaTsKICAgICAgICAgICAgaWYgKCFleGNlc3Nfd2l0aGRyYXcuc2VuZCh0aGlzLmJhbGFuY2UgLSBjYXBfaW5fd2VpKSkgewogICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b19vd25lciA9IHRoaXMuYmFsYW5jZTsKICAgICAgICB9CiAgICAgICAgaWYgKHRvX293bmVyID4gMCkgewogICAgICAgICAgICBpZiAoIW93bmVyLnNlbmQodG9fb3duZXIpKSB7CiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgWmVyb0NhcCBpcyBUb2tlbkdhbWUgewogICAgV2l0aGRyYXcgcHVibGljIGdhbWVfd2l0aGRyYXc7CgogICAgZnVuY3Rpb24gWmVyb0NhcCgpIFRva2VuR2FtZSgwKSB7CiAgICAgICAgZ2FtZV93aXRoZHJhdyA9IG5ldyBXaXRoZHJhdyhnYW1lX3Rva2VuKTsKICAgIH0KfQ=='.
	

]
