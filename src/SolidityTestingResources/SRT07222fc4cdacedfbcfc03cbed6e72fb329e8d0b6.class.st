Class {
	#name : #SRT07222fc4cdacedfbcfc03cbed6e72fb329e8d0b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07222fc4cdacedfbcfc03cbed6e72fb329e8d0b6 >> base64 [
	^ ''.
	

]
