Class {
	#name : #SRT08d069ae12b1fe5f651ab56adae0f6c99cb7a15f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08d069ae12b1fe5f651ab56adae0f6c99cb7a15f >> base64 [
	^ ''.
	

]
