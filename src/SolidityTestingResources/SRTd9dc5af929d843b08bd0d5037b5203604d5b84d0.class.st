Class {
	#name : #SRTd9dc5af929d843b08bd0d5037b5203604d5b84d0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd9dc5af929d843b08bd0d5037b5203604d5b84d0 >> base64 [
	^ ''.
	

]
