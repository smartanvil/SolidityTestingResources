Class {
	#name : #SRT95609c7c7cbc0f3ed3f7005379f5ae5f872408e2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT95609c7c7cbc0f3ed3f7005379f5ae5f872408e2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovLwovLyA9PT09IERJU0NMQUlNRVIgPT09PQovLwovLyBFVEhFUkVVTSBJUyBTVElMTCBBTiBFWFBFUkVNRU5UQUwgVEVDSE5PTE9HWS4KLy8gQUxUSE9VR0ggVEhJUyBTTUFSVCBDT05UUkFDVCBXQVMgQ1JFQVRFRCBXSVRIIEdSRUFUIENBUkUgQU5EIElOIFRIRSBIT1BFIE9GIEJFSU5HIFVTRUZVTCwgTk8gR1VBUkFOVEVFUyBPRiBGTEFXTEVTUyBPUEVSQVRJT04gQ0FOIEJFIEdJVkVOLgovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLgovLyBZT1UgQVJFIFNUUk9OR0xZIEVOQ09VUkFHRUQgVE8gU1RVRFkgVEhJUyBTTUFSVCBDT05UUkFDVCBDQVJFRlVMTFkgSU4gT1JERVIgVE8gVU5ERVJTVEFORCBQT1NTSUJMRSBFREdFIENBU0VTIEFORCBSSVNLUy4KLy8gRE9OJ1QgVVNFIFRISVMgU01BUlQgQ09OVFJBQ1QgSUYgWU9VIEhBVkUgU1VCU1RBTlRJQUwgRE9VQlRTIE9SIElGIFlPVSBET04nVCBLTk9XIFdIQVQgWU9VIEFSRSBET0lORy4KLy8KLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQovLyBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsCi8vIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAovLyBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgovLyA9PT09Ci8vCi8vCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0KLy8gQSBjYXJlZnVsIHJlYWRlciB3aWxsIGZpbmQgc29tZSBhZGRpdGlvbmFsIGNoZWNrcyBhbmQgZXhjZXNzaXZlIGNvZGUsIGNvbnN1bWluZyBzb21lIGV4dHJhIGdhcy4gVGhpcyBpcyBpbnRlbnRpb25hbC4KLy8gRXZlbiB0aG91Z2ggdGhlIGNvbnRyYWN0IHNob3VsZCB3b3JrIHdpdGhvdXQgdGhlc2UgcGFydHMsIHRoZXkgbWFrZSB0aGUgY29kZSBtb3JlIHNlY3VyZSBpbiBwcm9kdWN0aW9uIGFuZCBmb3IgZnV0dXJlIHJlZmFjdG9yaW5nLgovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50LgovLyBEaXNjdXNzaW9uIGlzIHdlbGNvbWUhCi8vID09PT0KLy8KCi8vLyBAYXV0aG9yIGV0aGVybmlhbgovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI4M2UxZjZlNGYwYzNlNmY3ZWJlNmYxZWRlYWUyZWRhZGUwZWNlZSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KLy8vIEB0aXRsZSBCbnNQcmVzYWxlIENvbnRyYWN0Cgpjb250cmFjdCBCbnNQcmVzYWxlIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFZFUlNJT04gPSAiMC4yLjAtYm5zIjsKCiAgICAvKiA9PT09PT0gY29uZmlndXJhdGlvbiBTVEFSVCA9PT09PT0gKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSRVNBTEVfU1RBUlQgID0gNDQ3MDAwMDsgLyogYXBwcm94LiBXRUQgTk9WIDAxIDIwMTcgMTI6NTU6NDcgR01UKzAxMDAgKENFVCkgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSRVNBTEVfRU5EICAgID0gNTAzMzMzMzsgLyogYXBwcm94LiBXRUQgSkFOIDMxIDIwMTggMTk6Mzk6MzkgR01UKzAxMDAgKENFVCkgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFdJVEhEUkFXQUxfRU5EID0gNTExMTExMTsgLyogYXBwcm94LiBUVUUgRkVCIDEzIDIwMTggMTA6MDg6MzkgR01UKzAxMDAgKENFVCkgKi8KCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBPV05FUiA9IDB4NTRlZjhGZmM2RWNkQTk1ZDI4NjcyMmMwMzU4YWQ3OTEyM2MzYzhCMDsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIID0gMDsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRV9FVEggPSAzMTI1OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0FDQ0VQVEVEX0FNT1VOVF9GSU5ORVkgPSAxOwoKICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8KCiAgICBzdHJpbmdbNV0gcHJpdmF0ZSBzdGF0ZU5hbWVzID0gWyJCRUZPUkVfU1RBUlQiLCAgIlBSRVNBTEVfUlVOTklORyIsICJXSVRIRFJBV0FMX1JVTk5JTkciLCAiUkVGVU5EX1JVTk5JTkciLCAiQ0xPU0VEIiBdOwogICAgZW51bSBTdGF0ZSB7IEJFRk9SRV9TVEFSVCwgIFBSRVNBTEVfUlVOTklORywgV0lUSERSQVdBTF9SVU5OSU5HLCBSRUZVTkRfUlVOTklORywgQ0xPU0VEIH0KCiAgICB1aW50IHB1YmxpYyB0b3RhbF9yZWNlaXZlZF9hbW91bnQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbF9yZWZ1bmRlZDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwoKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUgPSBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIICogMSBldGhlcjsKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUgPSBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIICogMSBldGhlcjsKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNSU5fQUNDRVBURURfQU1PVU5UID0gTUlOX0FDQ0VQVEVEX0FNT1VOVF9GSU5ORVkgKiAxIGZpbm5leTsKICAgIGJvb2wgcHVibGljIGlzQWJvcnRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgaXNTdG9wcGVkID0gZmFsc2U7CgoKICAgIC8vY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEJuc1ByZXNhbGUgKCkgcHVibGljIHZhbGlkU2V0dXBPbmx5KCkgeyB9CgogICAgLy8KICAgIC8vID09PT09PT0gaW50ZXJmYWNlIG1ldGhvZHMgPT09PT09PQogICAgLy8KCiAgICAvL2FjY2VwdCBwYXltZW50cyBoZXJlCiAgICBmdW5jdGlvbiAoKQogICAgcGF5YWJsZQogICAgbm9SZWVudHJhbmN5CiAgICBwdWJsaWMKICAgIHsKICAgICAgICBTdGF0ZSBzdGF0ZSA9IGN1cnJlbnRTdGF0ZSgpOwogICAgICAgIGlmIChzdGF0ZSA9PSBTdGF0ZS5QUkVTQUxFX1JVTk5JTkcpIHsKICAgICAgICAgICAgcmVjZWl2ZUZ1bmRzKCk7CiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS5SRUZVTkRfUlVOTklORykgewogICAgICAgICAgICAvLyBhbnkgZW50cmluZyBjYWxsIGluIFJlZnVuZCBQaGFzZSB3aWxsIGNhdXNlIGZ1bGwgcmVmdW5kCiAgICAgICAgICAgIHNlbmRSZWZ1bmQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVmdW5kKCkgZXh0ZXJuYWwKICAgIGluU3RhdGUoU3RhdGUuUkVGVU5EX1JVTk5JTkcpCiAgICBub1JlZW50cmFuY3kKICAgIHsKICAgICAgICBzZW5kUmVmdW5kKCk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RnVuZHMoKSBleHRlcm5hbAogICAgb25seU93bmVyCiAgICBub1JlZW50cmFuY3kKICAgIHsKICAgICAgICAvLyB0cmFuc2ZlciBmdW5kcyB0byBvd25lciBpZiBhbnkKICAgICAgICBPV05FUi50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKCiAgICBmdW5jdGlvbiBhYm9ydCgpIGV4dGVybmFsCiAgICBpblN0YXRlQmVmb3JlKFN0YXRlLlJFRlVORF9SVU5OSU5HKQogICAgb25seU93bmVyCiAgICB7CiAgICAgICAgaXNBYm9ydGVkID0gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gc3RvcCgpIGV4dGVybmFsCiAgICBpblN0YXRlKFN0YXRlLlBSRVNBTEVfUlVOTklORykKICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGlzU3RvcHBlZCA9IHRydWU7CiAgICB9CgoKICAgIC8vZGlzcGxheXMgY3VycmVudCBjb250cmFjdCBzdGF0ZSBpbiBodW1hbiByZWFkYWJsZSBmb3JtCiAgICBmdW5jdGlvbiBzdGF0ZSgpIGV4dGVybmFsIGNvbnN0YW50CiAgICByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXRlTmFtZXNbIHVpbnQoY3VycmVudFN0YXRlKCkpIF07CiAgICB9CgoKICAgIC8vCiAgICAvLyA9PT09PT09IGltcGxlbWVudGF0aW9uIG1ldGhvZHMgPT09PT09PQogICAgLy8KCiAgICBmdW5jdGlvbiBzZW5kUmVmdW5kKCkgcHJpdmF0ZSB0b2tlbkhvbGRlcnNPbmx5IHsKICAgICAgICAvLyBsb2FkIGJhbGFuY2UgdG8gcmVmdW5kIHBsdXMgYW1vdW50IGN1cnJlbnRseSBzZW50CiAgICAgICAgdWludCBhbW91bnRfdG9fcmVmdW5kID0gbWluKGJhbGFuY2VzW21zZy5zZW5kZXJdLCB0aGlzLmJhbGFuY2UgLSBtc2cudmFsdWUpIDsKCiAgICAgICAgLy8gY2hhbmdlIGJhbGFuY2UKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBhbW91bnRfdG9fcmVmdW5kOwogICAgICAgIHRvdGFsX3JlZnVuZGVkICs9IGFtb3VudF90b19yZWZ1bmQ7CgogICAgICAgIC8vIHNlbmQgcmVmdW5kIGJhY2sgdG8gc2VuZGVyCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnRfdG9fcmVmdW5kICsgbXNnLnZhbHVlKTsKICAgIH0KCgogICAgZnVuY3Rpb24gcmVjZWl2ZUZ1bmRzKCkgcHJpdmF0ZSBub3RUb29TbWFsbEFtb3VudE9ubHkgewogICAgICAvLyBubyBvdmVyZmxvdyBpcyBwb3NzaWJsZSBoZXJlOiBub2JvZHkgaGF2ZSBzb28gbXVjaCBtb25leSB0byBzcGVuZC4KICAgICAgaWYgKHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArIG1zZy52YWx1ZSA+IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSkgewogICAgICAgICAgLy8gYWNjZXB0IGFtb3VudCBvbmx5IGFuZCByZXR1cm4gY2hhbmdlCiAgICAgICAgICB2YXIgY2hhbmdlX3RvX3JldHVybiA9IHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArIG1zZy52YWx1ZSAtIE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRTsKICAgICAgICAgIHZhciBhY2NlcHRhYmxlX3JlbWFpbmRlciA9IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSAtIHRvdGFsX3JlY2VpdmVkX2Ftb3VudDsKICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IGFjY2VwdGFibGVfcmVtYWluZGVyOwogICAgICAgICAgdG90YWxfcmVjZWl2ZWRfYW1vdW50ICs9IGFjY2VwdGFibGVfcmVtYWluZGVyOwoKICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2hhbmdlX3RvX3JldHVybik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBhY2NlcHQgZnVsbCBhbW91bnQKICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsKICAgICAgICAgIHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArPSBtc2cudmFsdWU7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gY3VycmVudFN0YXRlKCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgewogICAgICAgIGlmIChpc0Fib3J0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZSA+IDAKICAgICAgICAgICAgICAgICAgID8gU3RhdGUuUkVGVU5EX1JVTk5JTkcKICAgICAgICAgICAgICAgICAgIDogU3RhdGUuQ0xPU0VEOwogICAgICAgIH0gZWxzZSBpZiAoYmxvY2subnVtYmVyIDwgUFJFU0FMRV9TVEFSVCkgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuQkVGT1JFX1NUQVJUOwogICAgICAgIH0gZWxzZSBpZiAoYmxvY2subnVtYmVyIDw9IFBSRVNBTEVfRU5EICYmIHRvdGFsX3JlY2VpdmVkX2Ftb3VudCA8IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSAmJiAhaXNTdG9wcGVkKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5QUkVTQUxFX1JVTk5JTkc7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJhbGFuY2UgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuQ0xPU0VEOwogICAgICAgIH0gZWxzZSBpZiAoYmxvY2subnVtYmVyIDw9IFdJVEhEUkFXQUxfRU5EICYmIHRvdGFsX3JlY2VpdmVkX2Ftb3VudCA+PSBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLldJVEhEUkFXQUxfUlVOTklORzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuUkVGVU5EX1JVTk5JTkc7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG1pbih1aW50IGEsIHVpbnQgYikgcHVyZSBwcml2YXRlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCgogICAgLy8KICAgIC8vID09PT09PT09PT09PSBtb2RpZmllcnMgPT09PT09PT09PT09CiAgICAvLwoKICAgIC8vZmFpbHMgaWYgc3RhdGUgZG9lc24ndCBtYXRjaAogICAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIGFzc2VydChzdGF0ZSA9PSBjdXJyZW50U3RhdGUoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvL2ZhaWxzIGlmIHRoZSBjdXJyZW50IHN0YXRlIGlzIG5vdCBiZWZvcmUgdGhhbiB0aGUgZ2l2ZW4gb25lLgogICAgbW9kaWZpZXIgaW5TdGF0ZUJlZm9yZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIGFzc2VydChjdXJyZW50U3RhdGUoKSA8IHN0YXRlKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvL2ZhaWxzIGlmIHNvbWV0aGluZyBpbiBzZXR1cCBpcyBsb29raW5nIHdlaXJkCiAgICBtb2RpZmllciB2YWxpZFNldHVwT25seSgpIHsKICAgICAgICBpZiAoIE9XTkVSID09IDB4MAogICAgICAgICAgICB8fCBQUkVTQUxFX1NUQVJUID09IDAKICAgICAgICAgICAgfHwgUFJFU0FMRV9FTkQgPT0gMAogICAgICAgICAgICB8fCBXSVRIRFJBV0FMX0VORCA9PTAKICAgICAgICAgICAgfHwgUFJFU0FMRV9TVEFSVCA8PSBibG9jay5udW1iZXIKICAgICAgICAgICAgfHwgUFJFU0FMRV9TVEFSVCA+PSBQUkVTQUxFX0VORAogICAgICAgICAgICB8fCBQUkVTQUxFX0VORCAgID49IFdJVEhEUkFXQUxfRU5ECiAgICAgICAgICAgIHx8IE1JTl9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSA+IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSApCiAgICAgICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvL2FjY2VwdHMgY2FsbHMgZnJvbSBvd25lciBvbmx5CiAgICBtb2RpZmllciBvbmx5T3duZXIoKXsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBPV05FUik7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy9hY2NlcHRzIGNhbGxzIGZyb20gdG9rZW4gaG9sZGVycyBvbmx5CiAgICBtb2RpZmllciB0b2tlbkhvbGRlcnNPbmx5KCl7CiAgICAgICAgYXNzZXJ0KGJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy8gZG9uYHQgYWNjZXB0IHRyYW5zYWN0aW9ucyB3aXRoIHZhbHVlIGxlc3MgdGhhbiBhbGxvd2VkIG1pbmltdW0KICAgIG1vZGlmaWVyIG5vdFRvb1NtYWxsQW1vdW50T25seSgpewogICAgICAgIGFzc2VydChtc2cudmFsdWUgPj0gTUlOX0FDQ0VQVEVEX0FNT1VOVCk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy9wcmV2ZW50cyByZWVudHJhbmN5IGF0dGFjcwogICAgYm9vbCBwcml2YXRlIGxvY2tlZCA9IGZhbHNlOwogICAgbW9kaWZpZXIgbm9SZWVudHJhbmN5KCkgewogICAgICAgIGFzc2VydCghbG9ja2VkKTsKICAgICAgICBsb2NrZWQgPSB0cnVlOwogICAgICAgIF87CiAgICAgICAgbG9ja2VkID0gZmFsc2U7CiAgICB9Cn0vL2NvbnRyYWN0'.
	

]
