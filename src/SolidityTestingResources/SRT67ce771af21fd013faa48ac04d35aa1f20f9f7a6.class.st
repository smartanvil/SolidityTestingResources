Class {
	#name : #SRT67ce771af21fd013faa48ac04d35aa1f20f9f7a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT67ce771af21fd013faa48ac04d35aa1f20f9f7a6 >> base64 [
	^ ''.
	

]
