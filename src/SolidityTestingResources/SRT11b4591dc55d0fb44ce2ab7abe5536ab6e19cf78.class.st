Class {
	#name : #SRT11b4591dc55d0fb44ce2ab7abe5536ab6e19cf78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT11b4591dc55d0fb44ce2ab7abe5536ab6e19cf78 >> base64 [
	^ ''.
	

]
