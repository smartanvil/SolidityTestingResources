Class {
	#name : #SRTf97ee81b6fa1f9de273e8cd37abc361cf4a4d74e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf97ee81b6fa1f9de273e8cd37abc361cf4a4d74e >> base64 [
	^ ''.
	

]
