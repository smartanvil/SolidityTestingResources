Class {
	#name : #SRT4f8144764A115B868CB14d71576ccf961f943452,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f8144764A115B868CB14d71576ccf961f943452 >> base64 [
	^ ''.
	

]
