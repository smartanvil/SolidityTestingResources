Class {
	#name : #SRTe2dcd10f43cd9229f253e5147a793e6f64283f2b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe2dcd10f43cd9229f253e5147a793e6f64283f2b >> base64 [
	^ ''.
	

]
