Class {
	#name : #SRTc49501f07c9a587adac93e09ecae5f701098ec2a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc49501f07c9a587adac93e09ecae5f701098ec2a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCi8vIFdvbGYgQ3J5cHRvIHByZXNhbGUgcG9vbGluZyBsaWJyYXJ5Ci8vIHdyaXR0ZW4gYnkgQGlhbWRlZmluaXRlbHlhaHVtYW4KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSByZXR1cm4gMDsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgLyBiOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmludGVyZmFjZSBFUkMyMCB7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKaW50ZXJmYWNlIFdoaXRlTGlzdCB7CiAgIGZ1bmN0aW9uIGNoZWNrTWVtYmVyTGV2ZWwgKGFkZHJlc3MgYWRkcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KTsKfQoKbGlicmFyeSBQcmVzYWxlTGliIHsKCQogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogIAogIFdoaXRlTGlzdCBjb25zdGFudCB3aGl0ZWxpc3RDb250cmFjdCA9IFdoaXRlTGlzdCgweDhEOTVCMDM4Y0E4MEE5ODY0MjVGQTI0MEMzQzE3RmIyQjZlOWJjNjMpOwogIHVpbnQgY29uc3RhbnQgY29udHJpYnV0aW9uTWluID0gMTAwMDAwMDAwMDAwMDAwMDAwOwogIHVpbnQgY29uc3RhbnQgbWF4R2FzUHJpY2UgPSA1MDAwMDAwMDAwMDsKICAKICBzdHJ1Y3QgQ29udHJpYnV0b3IgewogICAgdWludDE2IGNsYWltZWRUb2tlbnNJbmRleDsKICAgIHVpbnQgYmFsYW5jZTsKICB9CiAgCiAgc3RydWN0IERhdGEgewogICAgYWRkcmVzcyBvd25lcjsKICAgIGFkZHJlc3MgcmVjZWl2ZXI7CiAgICBhZGRyZXNzW10gd2l0aGRyYXdUb2tlbjsKICAgIGJvb2wgcG9vbFN1Ym1pdHRlZDsKICAgIGJvb2wgbG9ja2VkOwogICAgdWludCBhZGRyZXNzU2V0VGltZTsKICAgIHVpbnQgZmVlOwogICAgdWludCBjb250cmFjdENhcDsKICAgIHVpbnQgZmluYWxCYWxhbmNlOwogICAgdWludFtdIHdpdGhkcmF3QW1vdW50OwogICAgdWludFtdIGNhcEFtb3VudHM7CiAgICB1aW50MzJbXSBjYXBUaW1lczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgdG9rZW5CYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgaW5kaXZpZHVhbENhcHM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENvbnRyaWJ1dG9yKSBjb250cmlidXRvck1hcDsKICB9CiAgCiAgZXZlbnQgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZCAoYWRkcmVzcyBjb250cmlidXRvciwgdWludCB0b3RhbEJhbGFuY2UpOwogIGV2ZW50IFJlY2VpdmVyQWRkcmVzc1NldCAoIGFkZHJlc3MgYWRkcik7CiAgZXZlbnQgUG9vbFN1Ym1pdHRlZCAoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwogIGV2ZW50IFdpdGhkcmF3YWxBdmFpbGFibGUgKGFkZHJlc3MgdG9rZW4pOwogIGV2ZW50IFdpdGhkcmF3YWxDbGFpbWVkIChhZGRyZXNzIHJlY2VpdmVyLCBhZGRyZXNzIHRva2VuLCB1aW50IGFtb3VudCk7CiAgCiAgbW9kaWZpZXIgb25seU93bmVyIChEYXRhIHN0b3JhZ2Ugc2VsZikgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBzZWxmLm93bmVyKTsKICAgIF87CiAgfQogIAogIG1vZGlmaWVyIG5vUmVlbnRyYW5jeShEYXRhIHN0b3JhZ2Ugc2VsZikgewogICAgcmVxdWlyZSghc2VsZi5sb2NrZWQpOwogICAgc2VsZi5sb2NrZWQgPSB0cnVlOwogICAgXzsKICAgIHNlbGYubG9ja2VkID0gZmFsc2U7CiAgfQogIAogIGZ1bmN0aW9uIF90b1BjdCAodWludCBudW1lcmF0b3IsIHVpbnQgZGVub21pbmF0b3IgKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBudW1lcmF0b3IubXVsKDEwICoqIDIwKS5kaXYoZGVub21pbmF0b3IpOwogIH0KICAKICBmdW5jdGlvbiBfYXBwbHlQY3QgKHVpbnQgbnVtZXJhdG9yLCB1aW50IHBjdCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gbnVtZXJhdG9yLm11bChwY3QpLmRpdigxMCAqKiAyMCk7CiAgfQogIAogIGZ1bmN0aW9uIG5ld1Bvb2wgKERhdGEgc3RvcmFnZSBzZWxmLCB1aW50IF9mZWUsIGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50IF9jb250cmFjdENhcCwgdWludCBfaW5kaXZpZHVhbENhcCkgcHVibGljIHsKICAgIHJlcXVpcmUgKF9mZWUgPCAxMDAwKTsKICAgIHNlbGYub3duZXIgPSBtc2cuc2VuZGVyOwogICAgc2VsZi5yZWNlaXZlciA9IF9yZWNlaXZlcjsKICAgIHNlbGYuY29udHJhY3RDYXAgPSBfY29udHJhY3RDYXA7CiAgICBzZWxmLmNhcFRpbWVzLnB1c2goMCk7CiAgICBzZWxmLmNhcEFtb3VudHMucHVzaChfaW5kaXZpZHVhbENhcCk7CiAgICBzZWxmLmZlZSA9IF90b1BjdChfZmVlLDEwMDApOwogIH0KCQogIGZ1bmN0aW9uIGRlcG9zaXQgKERhdGEgc3RvcmFnZSBzZWxmKSBwdWJsaWMgewoJICBhc3NlcnQgKCFzZWxmLnBvb2xTdWJtaXR0ZWQpOwogICAgcmVxdWlyZSAodHguZ2FzcHJpY2UgPD0gbWF4R2FzUHJpY2UpOwogICAgQ29udHJpYnV0b3Igc3RvcmFnZSBjID0gc2VsZi5jb250cmlidXRvck1hcFttc2cuc2VuZGVyXTsKICAgIHVpbnQgY2FwID0gX2dldENhcChzZWxmLCBtc2cuc2VuZGVyKTsKICAgIHJlcXVpcmUgKGNhcCA+PSBjLmJhbGFuY2UuYWRkKG1zZy52YWx1ZSkpOwogICAgaWYgKHNlbGYuY29udHJhY3RDYXAgPCBhZGRyZXNzKHRoaXMpLmJhbGFuY2UpIHsKICAgICAgcmVxdWlyZSAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlLnN1Yihtc2cudmFsdWUpIDwgc2VsZi5jb250cmFjdENhcCk7CiAgICAgIHVpbnQgZXhjZXNzID0gYWRkcmVzcyh0aGlzKS5iYWxhbmNlLnN1YihzZWxmLmNvbnRyYWN0Q2FwKTsKICAgICAgYy5iYWxhbmNlID0gYy5iYWxhbmNlLmFkZChtc2cudmFsdWUuc3ViKGV4Y2VzcykpOwogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV4Y2Vzcyk7CiAgICB9IGVsc2UgewogICAgICBjLmJhbGFuY2UgPSBjLmJhbGFuY2UuYWRkKG1zZy52YWx1ZSk7CiAgICB9CiAgICByZXF1aXJlIChjLmJhbGFuY2UgPj0gY29udHJpYnV0aW9uTWluKTsKICAgIGVtaXQgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZChtc2cuc2VuZGVyLCBjLmJhbGFuY2UpOwogIH0KICAKICBmdW5jdGlvbiByZWNlaXZlUmVmdW5kIChEYXRhIHN0b3JhZ2Ugc2VsZikgcHVibGljIHsKICAgIGFzc2VydCAoc2VsZi5wb29sU3VibWl0dGVkKTsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gc2VsZi5yZWNlaXZlciB8fCBtc2cuc2VuZGVyID09IHNlbGYub3duZXIpOwogICAgcmVxdWlyZSAobXNnLnZhbHVlID49IDEgZXRoZXIpOwogICAgc2VsZi53aXRoZHJhd1Rva2VuLnB1c2goMHgwMCk7CiAgICBzZWxmLndpdGhkcmF3QW1vdW50LnB1c2gobXNnLnZhbHVlKTsKICAgIGVtaXQgV2l0aGRyYXdhbEF2YWlsYWJsZSgweDAwKTsKICB9CiAgCiAgZnVuY3Rpb24gd2l0aGRyYXcgKERhdGEgc3RvcmFnZSBzZWxmKSBwdWJsaWMgewogICAgYXNzZXJ0IChtc2cudmFsdWUgPT0gMCk7CiAgICBDb250cmlidXRvciBzdG9yYWdlIGMgPSBzZWxmLmNvbnRyaWJ1dG9yTWFwW21zZy5zZW5kZXJdOwogICAgcmVxdWlyZSAoYy5iYWxhbmNlID4gMCk7CiAgICBpZiAoIXNlbGYucG9vbFN1Ym1pdHRlZCkgewogICAgICB1aW50IGJhbGFuY2UgPSBjLmJhbGFuY2U7CiAgICAgIGMuYmFsYW5jZSA9IDA7CiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYmFsYW5jZSk7CiAgICAgIGVtaXQgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZChtc2cuc2VuZGVyLCAwKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgcmVxdWlyZSAoYy5jbGFpbWVkVG9rZW5zSW5kZXggPCBzZWxmLndpdGhkcmF3VG9rZW4ubGVuZ3RoKTsKICAgIHVpbnQgcGN0ID0gX3RvUGN0KGMuYmFsYW5jZSxzZWxmLmZpbmFsQmFsYW5jZSk7CiAgICB1aW50IGFtb3VudDsKICAgIGFkZHJlc3MgdG9rZW47CiAgICBmb3IgKHVpbnQxNiBpID0gYy5jbGFpbWVkVG9rZW5zSW5kZXg7IGkgPCBzZWxmLndpdGhkcmF3VG9rZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgYW1vdW50ID0gX2FwcGx5UGN0KHNlbGYud2l0aGRyYXdBbW91bnRbaV0scGN0KTsKICAgICAgdG9rZW4gPSBzZWxmLndpdGhkcmF3VG9rZW5baV07CiAgICAgIGMuY2xhaW1lZFRva2Vuc0luZGV4Kys7CiAgICAgIGlmIChhbW91bnQgPiAwKSB7ICAKICAgICAgICBpZiAodG9rZW4gPT0gMHgwMCkgewogICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXF1aXJlIChFUkMyMCh0b2tlbikudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50KSk7CiAgICAgICAgICBzZWxmLnRva2VuQmFsYW5jZXNbdG9rZW5dID0gc2VsZi50b2tlbkJhbGFuY2VzW3Rva2VuXS5zdWIoYW1vdW50KTsgIAogICAgICAgIH0KICAgICAgICBlbWl0IFdpdGhkcmF3YWxDbGFpbWVkKG1zZy5zZW5kZXIsIHRva2VuLCBhbW91bnQpOwogICAgICB9CiAgICB9CiAgfQogIAogIGZ1bmN0aW9uIHNldEluZGl2aWR1YWxDYXBzIChEYXRhIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzc1tdIGFkZHIsIHVpbnRbXSBjYXApIHB1YmxpYyBvbmx5T3duZXIoc2VsZikgewogICAgcmVxdWlyZSAoYWRkci5sZW5ndGggPT0gY2FwLmxlbmd0aCk7CiAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgYWRkci5sZW5ndGg7IGkrKykgewogICAgICBzZWxmLmluZGl2aWR1YWxDYXBzW2FkZHJbaV1dID0gY2FwW2ldOwogICAgfSAgCiAgfQogIAogIGZ1bmN0aW9uIHNldENhcHMgKERhdGEgc3RvcmFnZSBzZWxmLCB1aW50MzJbXSB0aW1lcywgdWludFtdIGNhcHMpIHB1YmxpYyBvbmx5T3duZXIoc2VsZikgewogICAgcmVxdWlyZSAoY2Fwcy5sZW5ndGggPiAwKTsKICAgIHJlcXVpcmUgKGNhcHMubGVuZ3RoID09IHRpbWVzLmxlbmd0aCk7CiAgICBzZWxmLmNhcFRpbWVzID0gWzBdOwogICAgc2VsZi5jYXBBbW91bnRzID0gW3NlbGYuY2FwQW1vdW50c1swXV07CiAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgY2Fwcy5sZW5ndGg7IGkrKykgewogICAgICByZXF1aXJlICh0aW1lc1tpXSA+IHNlbGYuY2FwVGltZXNbc2VsZi5jYXBUaW1lcy5sZW5ndGguc3ViKDEpXSk7CiAgICAgIHNlbGYuY2FwVGltZXMucHVzaCh0aW1lc1tpXSk7CiAgICAgIHNlbGYuY2FwQW1vdW50cy5wdXNoKGNhcHNbaV0pOwogICAgfQogIH0KICAKICBmdW5jdGlvbiBzZXRDb250cmFjdENhcCAoRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgYW1vdW50KSBwdWJsaWMgb25seU93bmVyKHNlbGYpIHsKICAgIHJlcXVpcmUgKGFtb3VudCA+PSBhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgc2VsZi5jb250cmFjdENhcCA9IGFtb3VudDsKICB9CiAgCiAgZnVuY3Rpb24gX2dldENhcCAoRGF0YSBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgYWRkcikgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICBpZiAoc2VsZi5pbmRpdmlkdWFsQ2Fwc1thZGRyXSA+IDApIHJldHVybiBzZWxmLmluZGl2aWR1YWxDYXBzW2FkZHJdOwogICAgaWYgKHdoaXRlbGlzdENvbnRyYWN0LmNoZWNrTWVtYmVyTGV2ZWwobXNnLnNlbmRlcikgPT0gMCkgcmV0dXJuIDA7CiAgICByZXR1cm4gZ2V0Q2FwQXRUaW1lKHNlbGYsbm93KTsKICB9CiAgCiAgZnVuY3Rpb24gZ2V0Q2FwQXRUaW1lIChEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICBpZiAodGltZSA9PSAwKSB0aW1lID0gbm93OwogICAgZm9yICh1aW50IGkgPSAxOyBpIDwgc2VsZi5jYXBUaW1lcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoc2VsZi5jYXBUaW1lc1tpXSA+IHRpbWUpIHJldHVybiBzZWxmLmNhcEFtb3VudHNbaS0xXTsKICAgIH0KICAgIHJldHVybiBzZWxmLmNhcEFtb3VudHNbc2VsZi5jYXBBbW91bnRzLmxlbmd0aC0xXTsKICB9CiAgCiAgZnVuY3Rpb24gZ2V0UG9vbEluZm8gKERhdGEgc3RvcmFnZSBzZWxmKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50IGJhbGFuY2UsIHVpbnQgcmVtYWluaW5nLCB1aW50IGNhcCkgewogICAgaWYgKCFzZWxmLnBvb2xTdWJtaXR0ZWQpIHJldHVybiAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlLCBzZWxmLmNvbnRyYWN0Q2FwLnN1YihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpLCBzZWxmLmNvbnRyYWN0Q2FwKTsKICAgIHJldHVybiAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlLCAwLCBzZWxmLmNvbnRyYWN0Q2FwKTsKICB9CiAgCiAgZnVuY3Rpb24gZ2V0Q29udHJpYnV0b3JJbmZvIChEYXRhIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBhZGRyKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50IGJhbGFuY2UsIHVpbnQgcmVtYWluaW5nLCB1aW50IGNhcCkgewogICAgY2FwID0gX2dldENhcChzZWxmLCBhZGRyKTsKICAgIENvbnRyaWJ1dG9yIHN0b3JhZ2UgYyA9IHNlbGYuY29udHJpYnV0b3JNYXBbYWRkcl07CiAgICBpZiAoc2VsZi5wb29sU3VibWl0dGVkIHx8IGNhcCA8PSBjLmJhbGFuY2UpIHJldHVybiAoYy5iYWxhbmNlLCAwLCBjYXApOwogICAgaWYgKGNhcC5zdWIoYy5iYWxhbmNlKSA+IHNlbGYuY29udHJhY3RDYXAuc3ViKGFkZHJlc3ModGhpcykuYmFsYW5jZSkpIHJldHVybiAoYy5iYWxhbmNlLCBzZWxmLmNvbnRyYWN0Q2FwLnN1YihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpLCBjYXApOwogICAgcmV0dXJuIChjLmJhbGFuY2UsIGNhcC5zdWIoYy5iYWxhbmNlKSwgY2FwKTsKICB9CiAgCiAgZnVuY3Rpb24gY2hlY2tXaXRoZHJhd2FsQXZhaWxhYmxlIChEYXRhIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBhZGRyKSB2aWV3IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc2VsZi5jb250cmlidXRvck1hcFthZGRyXS5jbGFpbWVkVG9rZW5zSW5kZXggPCBzZWxmLndpdGhkcmF3VG9rZW4ubGVuZ3RoOwogIH0KICAKICBmdW5jdGlvbiBzZXRSZWNlaXZlckFkZHJlc3MgKERhdGEgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIF9yZWNlaXZlcikgcHVibGljIG9ubHlPd25lcihzZWxmKSB7CiAgICByZXF1aXJlICghc2VsZi5wb29sU3VibWl0dGVkKTsKICAgIHNlbGYucmVjZWl2ZXIgPSBfcmVjZWl2ZXI7CiAgICBzZWxmLmFkZHJlc3NTZXRUaW1lID0gbm93OwogICAgZW1pdCBSZWNlaXZlckFkZHJlc3NTZXQoX3JlY2VpdmVyKTsKICB9CiAgCiAgZnVuY3Rpb24gc3VibWl0UG9vbCAoRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgYW1vdW50SW5XZWkpIHB1YmxpYyBvbmx5T3duZXIoc2VsZikgbm9SZWVudHJhbmN5KHNlbGYpIHsKICAgIHJlcXVpcmUgKCFzZWxmLnBvb2xTdWJtaXR0ZWQpOwogICAgcmVxdWlyZSAobm93ID4gc2VsZi5hZGRyZXNzU2V0VGltZS5hZGQoODY0MDApKTsKICAgIGlmIChhbW91bnRJbldlaSA9PSAwKSBhbW91bnRJbldlaSA9IGFkZHJlc3ModGhpcykuYmFsYW5jZTsKICAgIHNlbGYuZmluYWxCYWxhbmNlID0gYWRkcmVzcyh0aGlzKS5iYWxhbmNlOwogICAgc2VsZi5wb29sU3VibWl0dGVkID0gdHJ1ZTsKICAgIHJlcXVpcmUgKHNlbGYucmVjZWl2ZXIuY2FsbC52YWx1ZShhbW91bnRJbldlaSkuZ2FzKGdhc2xlZnQoKS5zdWIoNTAwMCkpKCkpOwogICAgaWYgKGFkZHJlc3ModGhpcykuYmFsYW5jZSA+IDApIHsKICAgICAgc2VsZi53aXRoZHJhd1Rva2VuLnB1c2goMHgwMCk7CiAgICAgIHNlbGYud2l0aGRyYXdBbW91bnQucHVzaChhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgICBlbWl0IFdpdGhkcmF3YWxBdmFpbGFibGUoMHgwMCk7CiAgICB9CiAgICBlbWl0IFBvb2xTdWJtaXR0ZWQoc2VsZi5yZWNlaXZlciwgYW1vdW50SW5XZWkpOwogIH0KICAKICBmdW5jdGlvbiBlbmFibGVXaXRoZHJhd2FscyAoRGF0YSBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgdG9rZW5BZGRyZXNzLCBhZGRyZXNzIGZlZUFkZHJlc3MpIHB1YmxpYyBvbmx5T3duZXIoc2VsZikgbm9SZWVudHJhbmN5KHNlbGYpIHsKICAgIHJlcXVpcmUgKHNlbGYucG9vbFN1Ym1pdHRlZCk7CiAgICBpZiAoZmVlQWRkcmVzcyA9PSAweDAwKSBmZWVBZGRyZXNzID0gc2VsZi5vd25lcjsKICAgIEVSQzIwIHRva2VuID0gRVJDMjAodG9rZW5BZGRyZXNzKTsKICAgIHVpbnQgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpLnN1YihzZWxmLnRva2VuQmFsYW5jZXNbdG9rZW5BZGRyZXNzXSk7CiAgICByZXF1aXJlIChhbW91bnQgPiAwKTsKICAgIGlmIChzZWxmLmZlZSA+IDApIHsKICAgICAgcmVxdWlyZSAodG9rZW4udHJhbnNmZXIoZmVlQWRkcmVzcywgX2FwcGx5UGN0KGFtb3VudCxzZWxmLmZlZSkpKTsKICAgICAgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpLnN1YihzZWxmLnRva2VuQmFsYW5jZXNbdG9rZW5BZGRyZXNzXSk7CiAgICB9CiAgICBzZWxmLnRva2VuQmFsYW5jZXNbdG9rZW5BZGRyZXNzXSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHNlbGYud2l0aGRyYXdUb2tlbi5wdXNoKHRva2VuQWRkcmVzcyk7CiAgICBzZWxmLndpdGhkcmF3QW1vdW50LnB1c2goYW1vdW50KTsKICAgIGVtaXQgV2l0aGRyYXdhbEF2YWlsYWJsZSh0b2tlbkFkZHJlc3MpOwogIH0KCn0='.
	

]
