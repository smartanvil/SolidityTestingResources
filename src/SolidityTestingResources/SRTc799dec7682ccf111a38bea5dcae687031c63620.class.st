Class {
	#name : #SRTc799dec7682ccf111a38bea5dcae687031c63620,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc799dec7682ccf111a38bea5dcae687031c63620 >> base64 [
	^ ''.
	

]
