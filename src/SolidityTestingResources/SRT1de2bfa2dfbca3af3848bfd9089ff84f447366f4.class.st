Class {
	#name : #SRT1de2bfa2dfbca3af3848bfd9089ff84f447366f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1de2bfa2dfbca3af3848bfd9089ff84f447366f4 >> base64 [
	^ ''.
	

]
