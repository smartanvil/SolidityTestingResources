Class {
	#name : #SRT441398b701809c617004a93eba2c9c701d439375,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT441398b701809c617004a93eba2c9c701d439375 >> base64 [
	^ ''.
	

]
