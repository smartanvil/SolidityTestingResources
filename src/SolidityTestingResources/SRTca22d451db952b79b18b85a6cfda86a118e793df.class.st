Class {
	#name : #SRTca22d451db952b79b18b85a6cfda86a118e793df,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca22d451db952b79b18b85a6cfda86a118e793df >> base64 [
	^ ''.
	

]
