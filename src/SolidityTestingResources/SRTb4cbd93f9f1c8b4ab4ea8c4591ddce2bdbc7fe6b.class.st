Class {
	#name : #SRTb4cbd93f9f1c8b4ab4ea8c4591ddce2bdbc7fe6b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb4cbd93f9f1c8b4ab4ea8c4591ddce2bdbc7fe6b >> base64 [
	^ ''.
	

]
