Class {
	#name : #SRTe9e9fe9b6a3f02c89960d0a256f2cda77d76f80d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe9e9fe9b6a3f02c89960d0a256f2cda77d76f80d >> base64 [
	^ ''.
	

]
