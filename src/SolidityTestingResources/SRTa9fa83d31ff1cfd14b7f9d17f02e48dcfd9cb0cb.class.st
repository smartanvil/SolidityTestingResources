Class {
	#name : #SRTa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuOTsKCi8qClByb3RlY3QgVGhlIENhc3RsZSAhCgpUaGUgY2FzdGxlIGlzIHVuZGVyIGF0dGFjayBhbmQgbmVlZHMgdGhlIGhlbHAgb2YgaXRzIGNpdGl6ZW5zIHRvIHN1cHBvcnQgdGhlIGNvc3Qgb2Ygd2FyLgoKSWYgeW91IGFyZSBhIGxveWFsIGNpdGl6ZW4gYW5kIGhlbHAgdG8gZmluYW5jZSB0aGUgZGVmZW5zZSBvZiB0aGUgY2FzdGxlLCB0aGUgS2luZyB3aWxsIHBheSB5b3UgYmFjayAyIHRpbWVzIHdoYXQgeW91IGludmVzdGVkIHdoZW4gaXRzIGZ1bmQgd2lsbCBhbGxvdyBoaW0gdG8uCgpJZiBubyBvbmUgY29udHJpYnV0ZXMgdG8gdGhlIHJlcGFyYXRpb24gZm9yIDYgaG91cnMsIHRoZSBjYXN0bGUgd2lsbCBmYWxsIHVuZGVyIHRoZSBhdHRhY2sgYW5kIHRoZSBsYXN0IDMgY2l0aXplbnMgd2hvIGZpbmFuY2VkIHRoZSBkZWZlbnNlIHdpbGwgZ2V0IHRoZSBLaW5n4oCZcyBQaWdneSBiYW5rIChyZXNwZWN0aXZlbHkgNTUlLCAzMCUgYW5kIDE1JSkuCgpJZiB5b3UgYXJlIHRoZSBmaXJzdCBvbmUgdG8gaW52ZXN0IGFmdGVyIHRoZSBjYXN0bGUgaGFzIGZhbGxlbiwgeW91IHdpbGwgYmUgdGhlIG5ldyBLaW5nJ3MgSmVzdGVyIGFuZCB0YWtlIDMlIG9mIGFsbCB0aGUgdHJhbnNhY3Rpb25zIHVudGlsIHRoZSBjYXN0bGUgZmFsbHMgYWdhaW4uCgpUaGVyZSBhcmUgYWx3YXlzIHNvbWUgcGVvcGxlIHRvIGJyaWJlLCBzbyBhIHNtYWxsIGZlZSBvZiAzJSBpcyB0YWtlbiB0byBlbnN1cmUgdGhlIHN5c3RlbSBrZWVwcyB3b3JraW5nLgoKTk8gU1VSUkVOREVSIEVESVRJT04gLSBubyBzZWxmLWRlc3RydWN0IC0gdGhpcyBnYW1lIHdpbGwgcnVuIGZvcmV2ZXIhCiovCgpjb250cmFjdCBQcm90ZWN0VGhlQ2FzdGxlIHsKICAgIC8vIEtpbmcncyBKZXN0ZXIKICAgIGFkZHJlc3MgcHVibGljIGplc3RlcjsKICAgIC8vIFJlY29yZCB0aGUgbGFzdCBSZXBhcmF0aW9uIHRpbWUKICAgIHVpbnQgcHVibGljIGxhc3RSZXBhcmF0aW9uOwogICAgLy8gUGlnZ3kgQmFuayBBbW91bnQKICAgIHVpbnQgcHVibGljIHBpZ2d5QmFuazsKCiAgICAvLyBDb2xsZWN0ZWQgRmVlIEFtb3VudAogICAgdWludCBwdWJsaWMgY29sbGVjdGVkRmVlOwoKICAgIC8vIFRyYWNrIHRoZSBjaXRpemVucyB3aG8gaGVscGVkIHRvIHJlcGFpciB0aGUgY2FzdGxlCiAgICBhZGRyZXNzW10gcHVibGljIGNpdGl6ZW5zQWRkcmVzc2VzOwogICAgdWludFtdIHB1YmxpYyBjaXRpemVuc0Ftb3VudHM7CiAgICB1aW50MzIgcHVibGljIHRvdGFsQ2l0aXplbnM7CiAgICB1aW50MzIgcHVibGljIGxhc3RDaXRpemVuUGFpZDsKICAgIC8vIEJyaWJlZCBDaXRpemVuIHdobyBtYWRlIHRoZSBzeXN0ZW0gd29ya3MKICAgIGFkZHJlc3MgcHVibGljIGJyaWJlZENpdGl6ZW47CiAgICAvLyBSZWNvcmQgaG93IG1hbnkgdGltZXMgdGhlIGNhc3RsZSBoYXMgZmFsbGVuCiAgICB1aW50MzIgcHVibGljIHJvdW5kOwogICAgLy8gQW1vdW50IGFscmVhZHkgcGFpZCBiYWNrIGluIHRoaXMgcm91bmQKICAgIHVpbnQgcHVibGljIGFtb3VudEFscmVhZHlQYWlkQmFjazsKICAgIC8vIEFtb3VudCBpbnZlc3RlZCBpbiB0aGlzIHJvdW5kCiAgICB1aW50IHB1YmxpYyBhbW91bnRJbnZlc3RlZDsKCiAgICB1aW50IGNvbnN0YW50IFNJWF9IT1VSUyA9IDYwICogNjAgKiA2OwoKICAgIGZ1bmN0aW9uIFByb3RlY3RUaGVDYXN0bGUoKSB7CiAgICAgICAgLy8gRGVmaW5lIHRoZSBmaXJzdCBjYXN0bGUKICAgICAgICBicmliZWRDaXRpemVuID0gbXNnLnNlbmRlcjsKICAgICAgICBqZXN0ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGxhc3RSZXBhcmF0aW9uID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGFtb3VudEFscmVhZHlQYWlkQmFjayA9IDA7CiAgICAgICAgYW1vdW50SW52ZXN0ZWQgPSAwOwogICAgICAgIHRvdGFsQ2l0aXplbnMgPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlcGFpclRoZUNhc3RsZSgpIHBheWFibGUgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG1pbmltdW0gYW1vdW50IGlmIHJlYWNoZWQKICAgICAgICBpZiAoYW1vdW50IDwgMTAgZmlubmV5KSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIElmIHRoZSBhbW91bnQgcmVjZWl2ZWQgaXMgbW9yZSB0aGFuIDEwMCBFVEggcmV0dXJuIHRoZSBkaWZmZXJlbmNlCiAgICAgICAgaWYgKGFtb3VudCA+IDEwMCBldGhlcikgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gMTAwIGV0aGVyKTsKICAgICAgICAgICAgYW1vdW50ID0gMTAwIGV0aGVyOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIENhc3RsZSBoYXMgZmVsbAogICAgICAgIGlmIChsYXN0UmVwYXJhdGlvbiArIFNJWF9IT1VSUyA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICAvLyBTZW5kIHRoZSBQaWdneSBCYW5rIHRvIHRoZSBsYXN0IDMgY2l0aXplbnMKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gb25lIHdobyBjb250cmlidXRlZCB0aGlzIGxhc3QgNiBob3Vycywgbm8gYWN0aW9uIG5lZWRlZAogICAgICAgICAgICBpZiAodG90YWxDaXRpemVucyA9PSAxKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBDaXRpemVuIHdobyBjb250cmlidXRlZCwgaGUgZ2V0cyB0aGUgZnVsbCBQaWdnIEJhbmsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID09IDIpIHsKICAgICAgICAgICAgICAgIC8vIElmIG9ubHkgMiBjaXRpemVucyBjb250cmlidXRlZAogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMV0uc2VuZChwaWdneUJhbmsgKiA2NSAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAyXS5zZW5kKHBpZ2d5QmFuayAqIDM1IC8gMTAwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID49IDMpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSAzIG9yIG1vcmUgY2l0aXplbnMgd2hvIGNvbnRyaWJ1dGVkCiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAxXS5zZW5kKHBpZ2d5QmFuayAqIDU1IC8gMTAwKTsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDJdLnNlbmQocGlnZ3lCYW5rICogMzAgLyAxMDApOwogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gM10uc2VuZChwaWdneUJhbmsgKiAxNSAvIDEwMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgbmV3IFBpZ2d5IEJhbmsKICAgICAgICAgICAgcGlnZ3lCYW5rID0gMDsKCiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgbmV3IENhc3RsZQogICAgICAgICAgICBqZXN0ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICBsYXN0UmVwYXJhdGlvbiA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgY2l0aXplbnNBbW91bnRzLnB1c2goYW1vdW50ICogMik7CiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsKICAgICAgICAgICAgYW1vdW50SW52ZXN0ZWQgKz0gYW1vdW50OwoKICAgICAgICAgICAgLy8gQWxsIGdvZXMgdG8gdGhlIFBpZ2d5IEJhbmsKICAgICAgICAgICAgcGlnZ3lCYW5rICs9IGFtb3VudDsKCiAgICAgICAgICAgIC8vIFRoZSBKZXN0ZXIgdGFrZSAzJQogICAgICAgICAgICBqZXN0ZXIuc2VuZChhbW91bnQgKiAzIC8gMTAwKTsKCiAgICAgICAgICAgIC8vIFRoZSBicmliZWQgQ2l0aXplbiB0YWtlcyAzJQogICAgICAgICAgICBjb2xsZWN0ZWRGZWUgKz0gYW1vdW50ICogMyAvIDEwMDsKCiAgICAgICAgICAgIHJvdW5kICs9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gVGhlIENhc3RsZSBpcyBzdGlsbCB1cAogICAgICAgICAgICBsYXN0UmVwYXJhdGlvbiA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgY2l0aXplbnNBbW91bnRzLnB1c2goYW1vdW50ICogMik7CiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsKICAgICAgICAgICAgYW1vdW50SW52ZXN0ZWQgKz0gYW1vdW50OwoKICAgICAgICAgICAgLy8gNSUgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgICAgICBwaWdneUJhbmsgKz0gKGFtb3VudCAqIDUgLyAxMDApOwoKICAgICAgICAgICAgLy8gVGhlIEplc3RlciB0YWtlcyAzJQogICAgICAgICAgICBqZXN0ZXIuc2VuZChhbW91bnQgKiAzIC8gMTAwKTsKCiAgICAgICAgICAgIC8vIFRoZSBicmliZWQgQ2l0aXplbiB0YWtlcyAzJQogICAgICAgICAgICBjb2xsZWN0ZWRGZWUgKz0gYW1vdW50ICogMyAvIDEwMDsKCiAgICAgICAgICAgIHdoaWxlIChjaXRpemVuc0Ftb3VudHNbbGFzdENpdGl6ZW5QYWlkXSA8IChhZGRyZXNzKHRoaXMpLmJhbGFuY2UgLSBwaWdneUJhbmsgLSBjb2xsZWN0ZWRGZWUpICYmIGxhc3RDaXRpemVuUGFpZCA8PSB0b3RhbENpdGl6ZW5zKSB7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tsYXN0Q2l0aXplblBhaWRdLnNlbmQoY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF0pOwogICAgICAgICAgICAgICAgYW1vdW50QWxyZWFkeVBhaWRCYWNrICs9IGNpdGl6ZW5zQW1vdW50c1tsYXN0Q2l0aXplblBhaWRdOwogICAgICAgICAgICAgICAgbGFzdENpdGl6ZW5QYWlkICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgcmVwYWlyVGhlQ2FzdGxlKCk7CiAgICB9CgogICAgLy8gV2hlbiB0aGUgYnJpYmVkIENpdGl6ZW4gZGVjaWRlcyB0byBnaXZlIGhpcyBzZWF0IHRvIHNvbWVvbmUgZWxzZQogICAgZnVuY3Rpb24gbmV3QnJpYmVkQ2l0aXplbihhZGRyZXNzIG5ld0JyaWJlZENpdGl6ZW4pIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBicmliZWRDaXRpemVuKSB7CiAgICAgICAgICAgIGJyaWJlZENpdGl6ZW4gPSBuZXdCcmliZWRDaXRpemVuOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBXaGVuIHRoZSBicmliZWQgQ2l0aXplbiBkZWNpZGVzIHRvIGNvbGxlY3QgaGlzIGZlZXMKICAgIGZ1bmN0aW9uIGNvbGxlY3RGZWUoKSBwYXlhYmxlIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBicmliZWRDaXRpemVuKSB7CiAgICAgICAgICAgIGJyaWJlZENpdGl6ZW4uc2VuZChjb2xsZWN0ZWRGZWUpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBXaGVuIHRoZSBqZXN0ZXIgY2FuJ3QgaGFuZGxlIGl0IGFueW1vcmUsIGhlIGNhbiBnaXZlIGhpcyBwb3NpdGlvbiB0byBzb21lb25lIGVsc2UKICAgIGZ1bmN0aW9uIG5ld0plc3RlcihhZGRyZXNzIG5ld0plc3RlcikgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGplc3RlcikgewogICAgICAgICAgICBqZXN0ZXIgPSBuZXdKZXN0ZXI7CiAgICAgICAgfQogICAgfSAgICAgICAKfQ=='.
	

]
