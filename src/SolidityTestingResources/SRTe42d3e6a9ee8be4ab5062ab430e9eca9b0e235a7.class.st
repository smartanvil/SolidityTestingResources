Class {
	#name : #SRTe42d3e6a9ee8be4ab5062ab430e9eca9b0e235a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe42d3e6a9ee8be4ab5062ab430e9eca9b0e235a7 >> base64 [
	^ ''.
	

]
