Class {
	#name : #SRTbf5ec0ad2f5ea26530c70dd534d6c82a91e56da6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf5ec0ad2f5ea26530c70dd534d6c82a91e56da6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICovCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgLyoqCiAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0VSQzIwL0VSQzIwQmFzaWMuc29sCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMC9FUkMyMC5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMC9TYWZlRVJDMjAuc29sCgovKioKICogQHRpdGxlIFNhZmVFUkMyMAogKiBAZGV2IFdyYXBwZXJzIGFyb3VuZCBFUkMyMCBvcGVyYXRpb25zIHRoYXQgdGhyb3cgb24gZmFpbHVyZS4KICogVG8gdXNlIHRoaXMgbGlicmFyeSB5b3UgY2FuIGFkZCBhIGB1c2luZyBTYWZlRVJDMjAgZm9yIEVSQzIwO2Agc3RhdGVtZW50IHRvIHlvdXIgY29udHJhY3QsCiAqIHdoaWNoIGFsbG93cyB5b3UgdG8gY2FsbCB0aGUgc2FmZSBvcGVyYXRpb25zIGFzIGB0b2tlbi5zYWZlVHJhbnNmZXIoLi4uKWAsIGV0Yy4KICovCmxpYnJhcnkgU2FmZUVSQzIwIHsKICBmdW5jdGlvbiBzYWZlVHJhbnNmZXIoRVJDMjBCYXNpYyB0b2tlbiwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyKHRvLCB2YWx1ZSkpOwogIH0KCiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyRnJvbShFUkMyMCB0b2tlbiwgYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4udHJhbnNmZXJGcm9tKGZyb20sIHRvLCB2YWx1ZSkpOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFwcHJvdmUoRVJDMjAgdG9rZW4sIGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLmFwcHJvdmUoc3BlbmRlciwgdmFsdWUpKTsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9UaW1lbG9jay5zb2wKCi8qKgogKiBAdGl0bGUgVG9rZW5UaW1lbG9jawogKiBAZGV2IEEgdG9rZW4gaG9sZGVyIGNvbnRyYWN0IHRoYXQgY2FuIHJlbGVhc2UgaXRzIHRva2VuIGJhbGFuY2UgZ3JhZHVhbGx5IGxpa2UgYQogKiB0eXBpY2FsIHZlc3Rpbmcgc2NoZW1lIHdpdGggYSBjbGlmZiwgZ3JhZHVhbCByZWxlYXNlIHBlcmlvZCwgYW5kIGltcGxpZWQgcmVzaWR1ZS4KICoKICogV2l0aGRyYXdzIGJ5IGFuIGFkZHJlc3MgY2FuIGJlIHBhdXNlZCBieSB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBUaW1lbG9jayBpcyBPd25hYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICB1c2luZyBTYWZlRVJDMjAgZm9yIEVSQzIwQmFzaWM7CgogIC8qCiAgICogQGRldiBFUkMyMCB0b2tlbiB0aGF0IGlzIGJlaW5nIHRpbWVsb2NrZWQKICAgKi8KICBFUkMyMEJhc2ljIHB1YmxpYyB0b2tlbjsKCiAgLyoqCiAgICogQGRldiB0aW1lc3RhbXAgYXQgd2hpY2ggdGhlIHRpbWVsb2NrIHNjaGVkdWxlIGJlZ2lucwogICAqLwogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKCiAgLyoqCiAgICogQGRldiBudW1iZXIgb2Ygc2Vjb25kcyBmcm9tIHN0YXJ0VGltZSB0byBjbGlmZgogICAqLwogIHVpbnQyNTYgcHVibGljIGNsaWZmRHVyYXRpb247CgogIC8qKgogICAqIEBkZXYgYSBwZXJjZW50YWdlIHRoYXQgYmVjb21lcyBhdmFpbGFibGUgYXQgdGhlIGNsaWZmLCBleHByZXNzZWQgYXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxMDAKICAgKi8KICB1aW50MjU2IHB1YmxpYyBjbGlmZlJlbGVhc2VQZXJjZW50YWdlOwoKICAvKioKICAgKiBAZGV2IG51bWJlciBvZiBzZWNvbmRzIGZyb20gY2xpZmYgdG8gcmVzaWR1ZSwgb3ZlciB0aGlzIHBlcmlvZCB0b2tlbnMgYmVjb21lIGF2aWFsYWJsZSBncmFkdWFsbHkKICAgKi8KICB1aW50MjU2IHB1YmxpYyBzbG9wZUR1cmF0aW9uOwoKICAvKioKICAgKiBAZGV2IGEgcGVyY2VudGFnZSB0aGF0IGJlY29tZXMgYXZpbGFibGUgb3ZlciB0aGUgZ3JhZHVhbCByZWxlYXNlIHBlcmlvZCBleHByZXNzZWQgYXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxMDAKICAgKi8KICB1aW50MjU2IHB1YmxpYyBzbG9wZVJlbGVhc2VQZXJjZW50YWdlOwoKICAvKioKICAgKiBAZGV2IGJvb2xlYW4gaW5kaWNhdGluZyBpZiBvd25lciBoYXMgZmluaXNoZWQgYWxsb2NhdGlvbi4KICAgKi8KICBib29sIHB1YmxpYyBhbGxvY2F0aW9uRmluaXNoZWQ7CgogIC8qKgogICAqIEBkZXYgdmFyaWFibGUgdG8ga2VlcCB0cmFjayBvZiBjbGlmZiB0aW1lLgogICAqLwogIHVpbnQyNTYgcHVibGljIGNsaWZmVGltZTsKCiAgLyoqCiAgICogQGRldiB2YXJpYWJsZSB0byBrZWVwIHRyYWNrIG9mIHdoZW4gdGhlIHRpbWVsb2NrIGVuZHMuCiAgICovCiAgdWludDI1NiBwdWJsaWMgdGltZWxvY2tFbmRUaW1lOwoKICAvKioKICAgKiBAZGV2IG1hcHBpbmcgdG8ga2VlcCB0cmFjayBvZiB3aGF0IGFtb3VudCBvZiB0b2tlbnMgaGF2ZSBiZWVuIGFsbG9jYXRlZCB0byB3aGF0IGFkZHJlc3MuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYWxsb2NhdGVkVG9rZW5zOwoKICAvKioKICAgKiBAZGV2IG1hcHBpbmcgdG8ga2VlcCB0cmFjayBvZiB3aGF0IGFtb3VudCBvZiB0b2tlbnMgaGF2ZSBiZWVuIHdpdGhkcmF3biBieSB3aGF0IGFkZHJlc3MuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgd2l0aGRyYXduVG9rZW5zOwoKICAvKioKICAgKiBAZGV2IG1hcHBpbmcgdG8ga2VlcCB0cmFjayBvZiBpZiB3aXRoZHJhd2xzIGFyZSBwYXVzZWQgZm9yIGEgZ2l2ZW4gYWRkcmVzcy4KICAgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyB3aXRoZHJhd2FsUGF1c2VkOwoKICAvKioKICAgKiBAZGV2IGNvbnN0cnVjdG9yCiAgICogQHBhcmFtIF90b2tlbiBhZGRyZXNzIG9mIEVSQzIwIHRva2VuIHRoYXQgaXMgYmVpbmcgdGltZWxvY2tlZC4KICAgKiBAcGFyYW0gX3N0YXJ0VGltZSB0aW1lc3RhbXAgaW5kaWNhdGluZyB3aGVuIHRoZSB1bmxvY2tpbmcgb2YgdG9rZW5zIHN0YXJ0LgogICAqIEBwYXJhbSBfY2xpZmZEdXJhdGlvbiBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgYW55IHRva2VucyBhcmUgdW5sb2NrZWQuCiAgICogQHBhcmFtIF9jbGlmZlJlbGVhc2VQZXJjZW50IHBlcmNlbnRhZ2Ugb2YgdG9rZW5zIHRoYXQgYmVjb21lIGF2YWlsYWJsZSBhdCB0aGUgY2xpZmYgdGltZS4KICAgKiBAcGFyYW0gX3Nsb3BlRHVyYXRpb24gbnVtYmVyIG9mIHNlY29uZHMgZm9yIGdyYWR1YWwgcmVsZWFzZSBvZiBUb2tlbnMuCiAgICogQHBhcmFtIF9zbG9wZVJlbGVhc2VQZXJjZW50YWdlIHBlcmNlbnRhZ2Ugb2YgdG9rZW5zIHRoYXQgYXJlIHJlbGVhc2VkIGdyYWR1YWxseS4KICAgKi8KICBmdW5jdGlvbiBUaW1lbG9jayhFUkMyMEJhc2ljIF90b2tlbiwgdWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9jbGlmZkR1cmF0aW9uLCB1aW50MjU2IF9jbGlmZlJlbGVhc2VQZXJjZW50LCB1aW50MjU2IF9zbG9wZUR1cmF0aW9uLCB1aW50MjU2IF9zbG9wZVJlbGVhc2VQZXJjZW50YWdlKSBwdWJsaWMgewoKICAgIC8vIHNhbml0eSBjaGVja3MKICAgIHJlcXVpcmUoX2NsaWZmUmVsZWFzZVBlcmNlbnQuYWRkKF9zbG9wZVJlbGVhc2VQZXJjZW50YWdlKSA8PSAxMDApOwogICAgcmVxdWlyZShfc3RhcnRUaW1lID4gbm93KTsKICAgIHJlcXVpcmUoX3Rva2VuICE9IGFkZHJlc3MoMCkpOwoKICAgIC8vIGRlZmF1bHRzCiAgICBhbGxvY2F0aW9uRmluaXNoZWQgPSBmYWxzZTsKCiAgICAvLyBzdG9yaW5nIGNvbnN0cnVjdG9yIHBhcmFtcwogICAgdG9rZW4gPSBfdG9rZW47CiAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgY2xpZmZEdXJhdGlvbiA9IF9jbGlmZkR1cmF0aW9uOwogICAgY2xpZmZSZWxlYXNlUGVyY2VudGFnZSA9IF9jbGlmZlJlbGVhc2VQZXJjZW50OwogICAgc2xvcGVEdXJhdGlvbiA9IF9zbG9wZUR1cmF0aW9uOwogICAgc2xvcGVSZWxlYXNlUGVyY2VudGFnZSA9IF9zbG9wZVJlbGVhc2VQZXJjZW50YWdlOwoKICAgIC8vIGRlcml2ZWQgdmFyaWFibGVzCiAgICBjbGlmZlRpbWUgPSBzdGFydFRpbWUuYWRkKGNsaWZmRHVyYXRpb24pOwogICAgdGltZWxvY2tFbmRUaW1lID0gY2xpZmZUaW1lLmFkZChzbG9wZUR1cmF0aW9uKTsKICB9CgogIC8qKgogICAqIEBkZXYgaGVscGVyIG1ldGhvZCB0aGF0IGFsbG93cyBvd25lciB0byBhbGxvY2F0ZSB0b2tlbnMgdG8gYW4gYWRkcmVzcy4KICAgKiBAcGFyYW0gX2FkZHJlc3MgYmVuZWZpY2lhcnkgcmVjZWl2aW5nIHRoZSB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgbnVtYmVyIG9mIHRva2VucyBiZWluZyByZWNlaXZlZCBieSBiZW5lZmljaWFyeS4KICAgKiBAcmV0dXJuIGJvb2xlYW4gaW5kaWNhdGluZyBmdW5jdGlvbiBzdWNjZXNzLgogICAqLwogIGZ1bmN0aW9uIGFsbG9jYXRlVG9rZW5zKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGV4dGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoIWFsbG9jYXRpb25GaW5pc2hlZCk7CgogICAgYWxsb2NhdGVkVG9rZW5zW19hZGRyZXNzXSA9IF9hbW91bnQ7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgaGVscGVyIG1ldGhvZCB0aGF0IGFsbG93cyBvd25lciB0byBtYXJrIGFsbG9jYXRpb24gYXMgZG9uZS4KICAgKiBAcmV0dXJuIGJvb2xlYW4gaW5kaWNhdGluZyBmdW5jdGlvbiBzdWNjZXNzLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaEFsbG9jYXRpb24oKSBvbmx5T3duZXIgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb2NhdGlvbkZpbmlzaGVkID0gdHJ1ZTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgaGVscGVyIG1ldGhvZCB0aGF0IGFsbG93cyBvd25lciB0byBwYXVzZSB3aXRoZHJhd2xzIGZvciBhbnkgYWRkcmVzcy4KICAgKiBAcmV0dXJuIGJvb2xlYW4gaW5kaWNhdGluZyBmdW5jdGlvbiBzdWNjZXNzLgogICAqLwogIGZ1bmN0aW9uIHBhdXNlV2l0aGRyYXdhbChhZGRyZXNzIF9hZGRyZXNzKSBvbmx5T3duZXIgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgd2l0aGRyYXdhbFBhdXNlZFtfYWRkcmVzc10gPSB0cnVlOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IGhlbHBlciBtZXRob2QgdGhhdCBhbGxvd3Mgb3duZXIgdG8gdW5wYXVzZSB3aXRoZHJhd2xzIGZvciBhbnkgYWRkcmVzcy4KICAgKiBAcmV0dXJuIGJvb2xlYW4gaW5kaWNhdGluZyBmdW5jdGlvbiBzdWNjZXNzLgogICAqLwogIGZ1bmN0aW9uIHVucGF1c2VXaXRoZHJhd2FsKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlPd25lciBleHRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICB3aXRoZHJhd2FsUGF1c2VkW19hZGRyZXNzXSA9IGZhbHNlOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IGhlbHBlciBtZXRob2QgdGhhdCBhbGxvd3MgYW55b25lIHRvIGNoZWNrIGFtb3VudCB0aGF0IGlzIGF2YWlsYWJsZSBmb3Igd2l0aGRyYXdsIGJ5IGEgZ2l2ZW4gYWRkcmVzcy4KICAgKiBAcGFyYW0gX2FkZHJlc3MgZm9yIHdoaWNoIHRoZSB1c2VyIG5lZWRzIHRvIGNoZWNrIGF2YWlsYWJsZSBhbW91bnQgZm9yIHdpdGhkcmF3bC4KICAgKiBAcmV0dXJuIHVpbnQyNTYgbnVtYmVyIGluZGljYXRpbmcgdGhlIG51bWJlciBvZiB0b2tlbnMgYXZhaWxhYmxlIGZvciB3aXRoZHJhd2wuCiAgICovCiAgZnVuY3Rpb24gYXZhaWxhYmxlRm9yV2l0aGRyYXdhbChhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAobm93IDwgY2xpZmZUaW1lKSB7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChub3cgPCB0aW1lbG9ja0VuZFRpbWUpIHsKICAgICAgdWludDI1NiBjbGlmZlRva2VucyA9IChjbGlmZlJlbGVhc2VQZXJjZW50YWdlLm11bChhbGxvY2F0ZWRUb2tlbnNbX2FkZHJlc3NdKSkuZGl2KDEwMCk7CiAgICAgIHVpbnQyNTYgc2xvcGVUb2tlbnMgPSAoYWxsb2NhdGVkVG9rZW5zW19hZGRyZXNzXS5tdWwoc2xvcGVSZWxlYXNlUGVyY2VudGFnZSkpLmRpdigxMDApOwogICAgICB1aW50MjU2IHRpbWVBdFNsb3BlID0gbm93LnN1YihjbGlmZlRpbWUpOwogICAgICB1aW50MjU2IHNsb3BlVG9rZW5zQnlOb3cgPSAoc2xvcGVUb2tlbnMubXVsKHRpbWVBdFNsb3BlKSkuZGl2KHNsb3BlRHVyYXRpb24pOwoKICAgICAgcmV0dXJuIChjbGlmZlRva2Vucy5hZGQoc2xvcGVUb2tlbnNCeU5vdykpLnN1Yih3aXRoZHJhd25Ub2tlbnNbX2FkZHJlc3NdKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBhbGxvY2F0ZWRUb2tlbnNbX2FkZHJlc3NdLnN1Yih3aXRoZHJhd25Ub2tlbnNbX2FkZHJlc3NdKTsKICAgIH0KICB9CgogIC8qKgogICAqIEBkZXYgaGVscGVyIG1ldGhvZCB0aGF0IGFsbG93cyBhIGJlbmVmaWNpYXJ5IHRvIHdpdGhkcmF3IHRva2VucyB0aGF0IGhhdmUgdmVzdGVkIGZvciB0aGVpciBhZGRyZXNzLgogICAqIEByZXR1cm4gYm9vbGVhbiBpbmRpY2F0aW5nIGZ1bmN0aW9uIHN1Y2Nlc3MuCiAgICovCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBleHRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKCF3aXRoZHJhd2FsUGF1c2VkW21zZy5zZW5kZXJdKTsKCiAgICB1aW50MjU2IGF2YWlsYWJsZVRva2VucyA9IGF2YWlsYWJsZUZvcldpdGhkcmF3YWwobXNnLnNlbmRlcik7CiAgICByZXF1aXJlIChhdmFpbGFibGVUb2tlbnMgPiAwKTsKICAgIHdpdGhkcmF3blRva2Vuc1ttc2cuc2VuZGVyXSA9IHdpdGhkcmF3blRva2Vuc1ttc2cuc2VuZGVyXS5hZGQoYXZhaWxhYmxlVG9rZW5zKTsKICAgIHRva2VuLnNhZmVUcmFuc2Zlcihtc2cuc2VuZGVyLCBhdmFpbGFibGVUb2tlbnMpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQ=='.
	

]
