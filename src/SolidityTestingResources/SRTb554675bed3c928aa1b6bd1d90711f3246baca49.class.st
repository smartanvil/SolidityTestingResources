Class {
	#name : #SRTb554675bed3c928aa1b6bd1d90711f3246baca49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb554675bed3c928aa1b6bd1d90711f3246baca49 >> base64 [
	^ ''.
	

]
