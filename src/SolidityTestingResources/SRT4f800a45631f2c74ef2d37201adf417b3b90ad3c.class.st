Class {
	#name : #SRT4f800a45631f2c74ef2d37201adf417b3b90ad3c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f800a45631f2c74ef2d37201adf417b3b90ad3c >> base64 [
	^ ''.
	

]
