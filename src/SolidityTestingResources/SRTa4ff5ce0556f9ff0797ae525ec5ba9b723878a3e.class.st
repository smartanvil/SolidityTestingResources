Class {
	#name : #SRTa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e >> base64 [
	^ ''.
	

]
