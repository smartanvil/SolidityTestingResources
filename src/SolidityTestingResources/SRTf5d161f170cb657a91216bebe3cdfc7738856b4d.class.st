Class {
	#name : #SRTf5d161f170cb657a91216bebe3cdfc7738856b4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5d161f170cb657a91216bebe3cdfc7738856b4d >> base64 [
	^ ''.
	

]
