Class {
	#name : #SRT9b041285587b701b703cbb40256558f0f3b94ed3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9b041285587b701b703cbb40256558f0f3b94ed3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsgCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqIAogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpY3sKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuIAogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUob3duZXI9PW1zZy5zZW5kZXIpOwogICAgXzsKIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLiAKICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICB9CiAKfQogIApjb250cmFjdCBFUkMyMCB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCn0KCmNvbnRyYWN0IENCSVRUb2tlbiBpcyBPd25hYmxlLCBFUkMyMCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLy8gVG9rZW4gcHJvcGVydGllcwogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkNBTUJJVFVTIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkNCSVQiOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50MjU2IHB1YmxpYyBfdG90YWxTdXBwbHkgPSAyNTAwMDAwMDBlMTg7CiAgICB1aW50MjU2IHB1YmxpYyBfaWNvU3VwcGx5ID0gMTU2MjUwMDAwZTE4OyAgICAgICAvLzYyLjUlCiAgICB1aW50MjU2IHB1YmxpYyBfcHJlU2FsZVN1cHBseSA9IDQzNzUwMDAwZTE4OyAgICAvLzE3LjUlCiAgICB1aW50MjU2IHB1YmxpYyBfcGhhc2UxU3VwcGx5ID0gNTAwMDAwMDBlMTg7ICAgICAvLzIwJQogICAgdWludDI1NiBwdWJsaWMgX3BoYXNlMlN1cHBseSA9IDUwMDAwMDAwZTE4OyAgICAgLy8yMCUKICAgIHVpbnQyNTYgcHVibGljIF9maW5hbFN1cHBseSA9IDEyNTAwMDAwZTE4OyAgICAgIC8vNSUKICAgIHVpbnQyNTYgcHVibGljIF90ZWFtU3VwcGx5ID0gNDM3NTAwMDBlMTg7ICAgICAgIC8vMTcuNSUKICAgIHVpbnQyNTYgcHVibGljIF9jb21tdW5pdHlTdXBwbHkgPSAxMjUwMDAwMGUxODsgIC8vNSUKICAgIHVpbnQyNTYgcHVibGljIF9ib3VudHlTdXBwbHkgPSAxMjUwMDAwMGUxODsgICAgIC8vNSUKICAgIHVpbnQyNTYgcHVibGljIF9lY29zeXNTdXBwbHkgPSAyNTAwMDAwMGUxODsgICAgIC8vMTAlCgogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIAogICAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsgCgogICAgLy8gV2FsbGV0IEFkZHJlc3Mgb2YgVG9rZW4KICAgIGFkZHJlc3MgcHVibGljIG11bHRpc2lnOwoKICAgIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgICB1aW50MjU2IHB1YmxpYyBwcmljZTsKCiAgICB1aW50MjU2IHB1YmxpYyBtaW5Db250cmliQW1vdW50ID0gMSBldGhlcjsKCiAgICB1aW50MjU2IHB1YmxpYyBtYXhDYXAgPSA4MTAwMCBldGhlcjsKICAgIHVpbnQyNTYgcHVibGljIG1pbkNhcCA9IDQ1MCBldGhlcjsKICAgIAogICAgLy9udW1iZXIgb2YgdG90YWwgdG9rZW5zIHNvbGQgCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbE51bWJlclRva2VuU29sZD0wOwoKICAgIGJvb2wgcHVibGljIHRyYWRhYmxlID0gZmFsc2U7CgogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgICBtb2RpZmllciBjYW5UcmFkYWJsZSgpIHsKICAgICAgICByZXF1aXJlKHRyYWRhYmxlIHx8IChub3cgPiBzdGFydFRpbWUgKyAxODAgZGF5cykpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gQ29uc3RydWN0b3IKICAgIC8vIEBub3RpY2UgQ0JJVFRva2VuIENvbnRyYWN0CiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBDQklUVG9rZW4oKSBwdWJsaWN7CiAgICAgICAgbXVsdGlzaWcgPSAweEFmQzI1MkY1OTdiZDU5MjI3NkM2ODQ2Y0Q0NGQxRjgyZDg3ZTYzYTI7CgogICAgICAgIGJhbGFuY2VzW211bHRpc2lnXSA9IF90b3RhbFN1cHBseTsKCiAgICAgICAgc3RhcnRUaW1lID0gMTUyNTE1MDgwMDsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8gUGF5YWJsZSBtZXRob2QKICAgIC8vIEBub3RpY2UgQW55b25lIGNhbiBidXkgdGhlIHRva2VucyBvbiB0b2tlbnNhbGUgYnkgcGF5aW5nIGV0aGVyCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICAKICAgICAgICB0b2tlbnNhbGUobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8gQG5vdGljZSB0b2tlbnNhbGUKICAgIC8vIEBwYXJhbSByZWNpcGllbnQgVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRva2Vuc2FsZShhZGRyZXNzIHJlY2lwaWVudCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUocmVjaXBpZW50ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gbWluQ29udHJpYkFtb3VudCk7CiAgICAgICAgcHJpY2UgPSBnZXRQcmljZSgpOwogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQyNTYgdG9rZW5Ub1NlbmQgPSB3ZWlBbW91bnQubXVsKHByaWNlKTsKICAgICAgICAKICAgICAgICByZXF1aXJlKHRva2VuVG9TZW5kID4gMCk7CiAgICAgICAgcmVxdWlyZShfaWNvU3VwcGx5ID49IHRva2VuVG9TZW5kKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1ttdWx0aXNpZ10gPSBiYWxhbmNlc1ttdWx0aXNpZ10uc3ViKHRva2VuVG9TZW5kKTsKICAgICAgICBiYWxhbmNlc1tyZWNpcGllbnRdID0gYmFsYW5jZXNbcmVjaXBpZW50XS5hZGQodG9rZW5Ub1NlbmQpOwogICAgICAgIAogICAgICAgIHRvdGFsTnVtYmVyVG9rZW5Tb2xkPXRvdGFsTnVtYmVyVG9rZW5Tb2xkLmFkZCh0b2tlblRvU2VuZCk7CiAgICAgICAgX2ljb1N1cHBseSA9IF9pY29TdXBwbHkuc3ViKHRva2VuVG9TZW5kKTsKCgkgICAgbXVsdGlzaWcudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIHJlY2lwaWVudCwgd2VpQW1vdW50LCB0b2tlblRvU2VuZCk7CiAgICB9CiAgICAKICAgIC8vIFRva2VuIGRpc3RyaWJ1dGlvbiB0byBUZWFtCiAgICBmdW5jdGlvbiBzZW5kSUNPU3VwcGx5VG9rZW4oYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIHRvICE9IDB4MCAmJiB2YWx1ZSA+IDAgJiYgX2ljb1N1cHBseSA+PSB2YWx1ZQogICAgICAgICk7CgogICAgICAgIGJhbGFuY2VzW211bHRpc2lnXSA9IGJhbGFuY2VzW211bHRpc2lnXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIF9pY29TdXBwbHkgPSBfaWNvU3VwcGx5LnN1Yih2YWx1ZSk7CiAgICAgICAgdG90YWxOdW1iZXJUb2tlblNvbGQ9dG90YWxOdW1iZXJUb2tlblNvbGQuYWRkKHZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihtdWx0aXNpZywgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvLyBUb2tlbiBkaXN0cmlidXRpb24gdG8gVGVhbQogICAgZnVuY3Rpb24gc2VuZFRlYW1TdXBwbHlUb2tlbihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgdG8gIT0gMHgwICYmIHZhbHVlID4gMCAmJiBfdGVhbVN1cHBseSA+PSB2YWx1ZQogICAgICAgICk7CgogICAgICAgIGJhbGFuY2VzW211bHRpc2lnXSA9IGJhbGFuY2VzW211bHRpc2lnXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIHRvdGFsTnVtYmVyVG9rZW5Tb2xkPXRvdGFsTnVtYmVyVG9rZW5Tb2xkLmFkZCh2YWx1ZSk7CiAgICAgICAgX3RlYW1TdXBwbHkgPSBfdGVhbVN1cHBseS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG11bHRpc2lnLCB0bywgdmFsdWUpOwogICAgfQogICAgCiAgICAvLyBUb2tlbiBkaXN0cmlidXRpb24gdG8gQ29tbXVuaXR5CiAgICBmdW5jdGlvbiBzZW5kQ29tbXVuaXR5U3VwcGx5VG9rZW4oYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIHRvICE9IDB4MCAmJiB2YWx1ZSA+IDAgJiYgX2NvbW11bml0eVN1cHBseSA+PSB2YWx1ZQogICAgICAgICk7CgogICAgICAgIGJhbGFuY2VzW211bHRpc2lnXSA9IGJhbGFuY2VzW211bHRpc2lnXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIHRvdGFsTnVtYmVyVG9rZW5Tb2xkPXRvdGFsTnVtYmVyVG9rZW5Tb2xkLmFkZCh2YWx1ZSk7CiAgICAgICAgX2NvbW11bml0eVN1cHBseSA9IF9jb21tdW5pdHlTdXBwbHkuc3ViKHZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihtdWx0aXNpZywgdG8sIHZhbHVlKTsKICAgIH0KICAgIAogICAgLy8gVG9rZW4gZGlzdHJpYnV0aW9uIHRvIEJvdW50eQogICAgZnVuY3Rpb24gc2VuZEJvdW50eVN1cHBseVRva2VuKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICB0byAhPSAweDAgJiYgdmFsdWUgPiAwICYmIF9ib3VudHlTdXBwbHkgPj0gdmFsdWUKICAgICAgICApOwoKICAgICAgICBiYWxhbmNlc1ttdWx0aXNpZ10gPSBiYWxhbmNlc1ttdWx0aXNpZ10uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICB0b3RhbE51bWJlclRva2VuU29sZD10b3RhbE51bWJlclRva2VuU29sZC5hZGQodmFsdWUpOwogICAgICAgIF9ib3VudHlTdXBwbHkgPSBfYm91bnR5U3VwcGx5LnN1Yih2YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXVsdGlzaWcsIHRvLCB2YWx1ZSk7CiAgICB9CiAgICAKICAgIC8vIFRva2VuIGRpc3RyaWJ1dGlvbiB0byBFY29zeXN0ZW0KICAgIGZ1bmN0aW9uIHNlbmRFY29zeXNTdXBwbHlUb2tlbihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgdG8gIT0gMHgwICYmIHZhbHVlID4gMCAmJiBfZWNvc3lzU3VwcGx5ID49IHZhbHVlCiAgICAgICAgKTsKCiAgICAgICAgYmFsYW5jZXNbbXVsdGlzaWddID0gYmFsYW5jZXNbbXVsdGlzaWddLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZCh2YWx1ZSk7CiAgICAgICAgdG90YWxOdW1iZXJUb2tlblNvbGQ9dG90YWxOdW1iZXJUb2tlblNvbGQuYWRkKHZhbHVlKTsKICAgICAgICBfZWNvc3lzU3VwcGx5ID0gX2Vjb3N5c1N1cHBseS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG11bHRpc2lnLCB0bywgdmFsdWUpOwogICAgfQogICAgCiAgICAvLyBTdGFydCBvciBwYXVzZSB0cmFkYWJsZSB0byBUcmFuc2ZlciB0b2tlbgogICAgZnVuY3Rpb24gc3RhcnRUcmFkYWJsZShib29sIF90cmFkYWJsZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgdHJhZGFibGUgPSBfdHJhZGFibGU7CiAgICB9CgogICAgLy8gQHJldHVybiB0b3RhbCB0b2tlbnMgc3VwcGxpZWQKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3RvdGFsU3VwcGx5OwogICAgfQogICAgCiAgICAvLyBAcmV0dXJuIHRvdGFsIHRva2VucyBzdXBwbGllZAogICAgZnVuY3Rpb24gdG90YWxOdW1iZXJUb2tlblNvbGQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsTnVtYmVyVG9rZW5Tb2xkOwogICAgfQoKICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CiAgICAvLyBAcGFyYW0gd2hvIFRoZSBhZGRyZXNzIG9mIHRoZSBwYXJ0aWN1bGFyIGFjY291bnQKICAgIC8vIEByZXR1cm4gdGhlIGJhbGFuYWNlIHRoZSBwYXJ0aWN1bGFyIGFjY291bnQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbd2hvXTsKICAgIH0KCiAgICAvLyBAbm90aWNlIHNlbmQgYHZhbHVlYCB0b2tlbiB0byBgdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLyBAcGFyYW0gdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIFRyYW5zZmVyCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgY2FuVHJhZGFibGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB2YWx1ZSAmJiB2YWx1ZSA+IDAKICAgICAgICApOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIEBub3RpY2Ugc2VuZCBgdmFsdWVgIHRva2VuIHRvIGB0b2AgZnJvbSBgZnJvbWAKICAgIC8vIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBjYW5UcmFkYWJsZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgYmFsYW5jZXNbZnJvbV0gPj0gdmFsdWUgJiYgdmFsdWUgPiAwCiAgICAgICAgKTsKICAgICAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZCh2YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihmcm9tLCB0bywgdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIEFsbG93IHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgdmFsdWUgYW1vdW50LgogICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCB2YWx1ZS4KICAgIC8vIEBwYXJhbSBzcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vIEBwYXJhbSB2YWx1ZSBUaGUgYW1vdW50IHRvIGJlIGFwcHJvdmVkCiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBBcHByb3ZhbAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLyBDaGVjayB0aGUgYWxsb3dlZCB2YWx1ZSBmb3IgdGhlIHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNwZW5kZXIKICAgIC8vIEByZXR1cm4gdGhlIGFtb3VudCB3aGljaCBzcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtzcGVuZGVyXTsKICAgIH0KICAgIAogICAgICAgIC8vIEdldCBjdXJyZW50IHByaWNlIG9mIGEgVG9rZW4KICAgIC8vIEByZXR1cm4gdGhlIHByaWNlIG9yIHRva2VuIHZhbHVlIGZvciBhIGV0aGVyCiAgICBmdW5jdGlvbiBnZXRQcmljZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmVzdWx0KSB7CiAgICAgICAgaWYgKCAobm93IDwgc3RhcnRUaW1lICsgMzAgZGF5cykgJiYgKHRvdGFsTnVtYmVyVG9rZW5Tb2xkIDwgX3ByZVNhbGVTdXBwbHkpKSB7CiAgICAgICAgICAgIHJldHVybiA3NTAwOwogICAgICAgIH0gZWxzZSBpZiAoIChub3cgPCBzdGFydFRpbWUgKyA2MCBkYXlzKSAmJiAodG90YWxOdW1iZXJUb2tlblNvbGQgPCBfcHJlU2FsZVN1cHBseSArIF9waGFzZTFTdXBwbHkpICkgewogICAgICAgICAgICByZXR1cm4gNTAwMDsKICAgICAgICB9IGVsc2UgaWYgKCAobm93IDwgc3RhcnRUaW1lICsgOTAgZGF5cykgJiYgKHRvdGFsTnVtYmVyVG9rZW5Tb2xkIDwgX3ByZVNhbGVTdXBwbHkgKyBfcGhhc2UxU3VwcGx5ICsgX3BoYXNlMlN1cHBseSkgKSB7CiAgICAgICAgICAgIHJldHVybiAzMTI1OwogICAgICAgIH0gZWxzZSBpZiAoIChub3cgPCBzdGFydFRpbWUgKyA5OSBkYXlzKSAmJiAodG90YWxOdW1iZXJUb2tlblNvbGQgPCBfcHJlU2FsZVN1cHBseSArIF9waGFzZTFTdXBwbHkgKyBfcGhhc2UyU3VwcGx5ICsgX2ZpbmFsU3VwcGx5KSApIHsKICAgICAgICAgICAgcmV0dXJuIDE1MDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRUb2tlbkRldGFpbCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZywgc3RyaW5nLCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIChuYW1lLCBzeW1ib2wsIF90b3RhbFN1cHBseSwgdG90YWxOdW1iZXJUb2tlblNvbGQsIF9pY29TdXBwbHksIF90ZWFtU3VwcGx5LCBfY29tbXVuaXR5U3VwcGx5LCBfYm91bnR5U3VwcGx5LCBfZWNvc3lzU3VwcGx5KTsKICAgIH0KCn0='.
	

]
