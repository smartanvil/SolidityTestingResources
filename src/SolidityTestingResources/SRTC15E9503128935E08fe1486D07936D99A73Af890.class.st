Class {
	#name : #SRTC15E9503128935E08fe1486D07936D99A73Af890,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC15E9503128935E08fe1486D07936D99A73Af890 >> base64 [
	^ ''.
	

]
