Class {
	#name : #SRTC0c74e811cC703eFe57892cd789D888DEda6d8A0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC0c74e811cC703eFe57892cd789D888DEda6d8A0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCgovLyBNZXRydW1Db2luIEx0ZC4gQ3J5cHRvU2hhcmVzCgovLyAnaW50ZXJmYWNlJzoKLy8gIHRoaXMgaXMgZXhwZWN0ZWQgZnJvbSBhbm90aGVyIGNvbnRyYWN0LAovLyAgaWYgaXQgd2FudHMgdG8gc3BlbmQgdG9rZW5zIChzaGFyZXMpIG9mIGJlaGFsZiBvZiB0aGUgdG9rZW4gb3duZXIKLy8gIGluIG91ciBjb250cmFjdApjb250cmFjdCB0b2tlblJlY2lwaWVudCB7CiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgLy8gc2hhcmVob2RlcgogICAgdWludDI1NiBfdmFsdWUsIC8vIG51bWJlciBvZiBzaGFyZXMKICAgIGFkZHJlc3MgX3NoYXJlLCAvLyAtIHdpbGwgYmUgdGhpcyBjb250cmFjdAogICAgYnl0ZXMgX2V4dHJhRGF0YSk7IC8vCn0KCgpjb250cmFjdCBNZXRydW1jb2luU2hhcmVzIHsKCiAgICAvKiBTdGFuZGFyZCBwdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwoKICAgIC8vIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnRVJDMjAgVG9rZW4nOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTWV0cnVtY29pbiBTaGFyZXMiOwoKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIk1ldHJ1bWNvaW4gU2hhcmVzIjsKCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOwoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gNTAwMDA7CgogICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLSBDb3Jwb3JhdGUgU3RvY2sgTGVkZ2VyIC0tLS0tLS0tLS0gKi8KICAgIC8vIFNoYXJlcywgc2hhcmVob2xkZXJzLCBiYWxhbmNlcyBlY3QuCgogICAgLy8gbGlzdCBvZiBhbGwgc2hhcmVob2xkZXJzIChyZXByZXNlbnRlZCBieSBFdGhlcmV1bSBhY2NvdW50cykKICAgIC8vIGluIHRoaXMgQ29ycG9yYXRpb24ncyBoaXN0b3J5LCAjIGlzIElECiAgICBhZGRyZXNzW10gcHVibGljIHNoYXJlaG9sZGVyOwogICAgLy8gdGhpcyBoZWxwcyB0byBmaW5kIGFkZHJlc3MgYnkgSUQgd2l0aG91dCBsb29wCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBzaGFyZWhvbGRlcklEOwogICAgLy8gbGlzdCBvZiBhZHJlc3NlcywgdGhhdCB3aG8gY3VycmVudGx5IG93biBhdCBsZWFzdCBvbmUgc2hhcmUKICAgIGFkZHJlc3NbXSBwdWJsaWMgYWN0aXZlU2hhcmVob2xkZXJzQXJyYXk7CiAgICAvLyBiYWxhbmNlczoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIC8vIHNoYXJlcyB0aGF0IGhhdmUgdG8gYmUgbWFuYWdlZCBieSBleHRlcm5hbCBjb250cmFjdAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8qIC0tLS0tLS0gVXRpbGl0aWVzOiAgKi8KICAgIC8vIHVuaXZlcnNhbCBldmVudHMKICAgIGV2ZW50IFJlc3VsdChhZGRyZXNzIHRyYW5zYWN0aW9uSW5pdGlhdGVkQnksIHN0cmluZyBtZXNzYWdlKTsKCiAgICBldmVudCBNZXNzYWdlKHN0cmluZyBtZXNzYWdlKTsKCiAgICAvKiAgLS0tLS0tLS0tLS0tLS0tIENvbnN0cnVjdG9yIC0tLS0tLS0tLSAqLwogICAgLy8gSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBNZXRydW1jb2luU2hhcmVzKCkgey8vIC0gdHJ1ZmZsZSBjb21waWxlcyBvbmx5IG5vIGFyZ3MgQ29uc3RydWN0b3IKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsKICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsCiAgICAgICAgLy8gLS0gc3RhcnQgY29ycG9yYXRlIHN0b2NrIGxlZGdlcgogICAgICAgIC8vIChwdXNoIC0gcmV0dXJucyB0aGUgbmV3IGxlbmd0aCk7CiAgICAgICAgc2hhcmVob2xkZXJJRFt0aGlzXSA9IHNoYXJlaG9sZGVyLnB1c2godGhpcykgLSAxOwogICAgICAgIC8vICMgMAogICAgICAgIHNoYXJlaG9sZGVySURbbXNnLnNlbmRlcl0gPSBzaGFyZWhvbGRlci5wdXNoKG1zZy5zZW5kZXIpIC0gMTsKICAgICAgICAvLyAjMQogICAgICAgIGFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5LnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgLy8gYWRkIHRvIGFjdGl2ZSBzaGFyZWhvbGRlcnMKICAgIH0KCiAgICAvKiAtLS0tLS0tLS0tLS0tLS0gU2hhcmVzIG1hbmFnZW1lbnQgLS0tLS0tICovCgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgZnVuY3Rpb24gcmVmcmVzaEFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5KCkgcmV0dXJucyAoYWRkcmVzc1tdKSB7CiAgICAgICAgZGVsZXRlIGFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5OwogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHNoYXJlaG9sZGVyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChiYWxhbmNlT2Zbc2hhcmVob2xkZXJbaV1dID4gMCkgewogICAgICAgICAgICAgICAgYWN0aXZlU2hhcmVob2xkZXJzQXJyYXkucHVzaChzaGFyZWhvbGRlcltpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5OwogICAgfQoKICAgIC8vIGNvbnN0YW50CiAgICBmdW5jdGlvbiBnZXRBY3RpdmVTaGFyZWhvbGRlcnNBcnJheSgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3NbXSl7CiAgICAgICAgcmV0dXJuIGFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5TGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludCl7CiAgICAgICAgcmV0dXJuIGFjdGl2ZVNoYXJlaG9sZGVyc0FycmF5Lmxlbmd0aDsKICAgIH0KCiAgICAvLyBjb25zdGFudAogICAgZnVuY3Rpb24gZ2V0U2hhcmVob2xkZXJBcnJheSgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3NbXSl7CiAgICAgICAgcmV0dXJuIHNoYXJlaG9sZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFNoYXJlaG9sZGVyQXJyYXlMZW5ndGgoKSBjb25zdGFudCByZXR1cm5zICh1aW50KXsKICAgICAgICByZXR1cm4gc2hhcmVob2xkZXIubGVuZ3RoOwogICAgfQoKICAgIC8qIC0tLS0gVHJhbnNmZXIgc2hhcmVzIHRvIGFub3RoZXIgYWRyZXNzIC0tLS0qLwogICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gY2hlY2sgYXJndW1lbnRzOgogICAgICAgIGlmIChfdmFsdWUgPCAxKSB0aHJvdzsKICAgICAgICBpZiAodGhpcyA9PSBfdG8pIHRocm93OwogICAgICAgIC8vIGRvIG5vdCBzZW5kIHNoYXJlcyB0byBjb250cmFjdCBpdHNlbGY7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCgogICAgICAgIC8vIG1ha2UgdHJhbnNhY3Rpb24KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAoKICAgICAgICAvLyBpZiBuZXcgYWRkcmVzcywgYWRkIGl0IHRvIHNoYXJlaG9sZGVycyBoaXN0b3J5IChzdG9jayBsZWRnZXIpOgogICAgICAgIGlmIChzaGFyZWhvbGRlcklEW190b10gPT0gMCkgey8vIC0tLS0tLS0tLS0tIGNoZWNrIGlmIHdvcmtzCiAgICAgICAgICAgIHNoYXJlaG9sZGVySURbX3RvXSA9IHNoYXJlaG9sZGVyLnB1c2goX3RvKSAtIDE7CiAgICAgICAgfQogICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0gLy8gZW5kIG9mIHRyYW5zZmVyKCkKCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgc2hhcmVzIGluIHlvdXIgYmVoYWxmCiAgICAoc2hhcmVob2xkZXIgY2FsbHMgdGhpcykgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIC8vIGFub3RoZXIgY29udHJhY3QncyBhZHJlc3MKICAgIHVpbnQyNTYgX3ZhbHVlLCAvLyBudW1iZXIgb2Ygc2hhcmVzCiAgICBieXRlcyBfZXh0cmFEYXRhKSAvLyBkYXRhIGZvciBhbm90aGVyIGNvbnRyYWN0CiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBtc2cuc2VuZGVyIC0gYWNjb3VudCBvd25lciB3aG8gZ2l2ZXMgYWxsb3dhbmNlCiAgICAgICAgLy8gX3NwZW5kZXIgICAtIGFkZHJlc3Mgb2YgYW5vdGhlciBjb250cmFjdAogICAgICAgIC8vIGl0IHdyaXRlcyBpbiAiYWxsb3dhbmNlIiB0aGF0IHRoaXMgb3duZXIgYWxsb3dzIGFub3RoZXIKICAgICAgICAvLyBjb250cmFjdCAoX3NwZW5kZXIpIHRvIHNwZW5kIHRoaSBhbW9udCAoX3ZhbHVlKSBvZiBzaGFyZXMKICAgICAgICAvLyBpbiBoaXMgYmVoYWxmCiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICAvLyAnc3BlbmRlcicgaXMgYW5vdGhlciBjb250cmFjdCB0aGF0IGltcGxlbWVudHMgY29kZQogICAgICAgIC8vICBwcmVzY3JpYmVkIGluICdzaGFyZVJlY2lwaWVudCcgYWJvdmUKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIC8vIHRoaXMgY29udHJhY3QgY2FsbHMgJ3JlY2VpdmVBcHByb3ZhbCcgZnVuY3Rpb24KICAgICAgICAvLyBvZiBhbm90aGVyIGNvbnRyYWN0IHRvIHNlbmQgaW5mb3JtYXRpb24gYWJvdXQKICAgICAgICAvLyBhbGxvd2FuY2UKICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCAvLyBzaGFyZXMgb3duZXIKICAgICAgICBfdmFsdWUsIC8vIG51bWJlciBvZiBzaGFyZXMKICAgICAgICB0aGlzLCAvLyB0aGlzIGNvbnRyYWN0J3MgYWRyZXNzCiAgICAgICAgX2V4dHJhRGF0YSk7CiAgICAgICAgLy8gZGF0YSBmcm9tIHNoYXJlcyBvd25lcgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBmcm9tIGFub3RoZXIgY29udHJhY3QsIGFmdGVyIGl0CiAgICBoYXZlIGFsbG93YW5jZSB0byB0cmFuc2ZlciBzaGFyZXMgaW4gYmVoYWxmIG9mIHNoYXJlaG9sZGVyICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sCiAgICBhZGRyZXNzIF90bywKICAgIHVpbnQyNTYgX3ZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIENoZWNrIGFyZ3VtZW50czoKICAgICAgICAvLyBzaG91bGQgb25lIHNoYXJlIG9yIG1vcmUKICAgICAgICBpZiAoX3ZhbHVlIDwgMSkgdGhyb3c7CiAgICAgICAgLy8gZG8gbm90IHNlbmQgc2hhcmVzIHRvIHRoaXMgY29udHJhY3QgaXRzZWxmOwogICAgICAgIGlmICh0aGlzID09IF90bykgdGhyb3c7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OwoKICAgICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7CgogICAgICAgIC8vIGlmIHRyYW5zZmVyIHRvIG5ldyBhZGRyZXNzIC0tIGFkZCBoaW0gdG8gbGVkZ2VyCiAgICAgICAgaWYgKHNoYXJlaG9sZGVySURbX3RvXSA9PSAwKSB7CiAgICAgICAgICAgIHNoYXJlaG9sZGVySURbX3RvXSA9IHNoYXJlaG9sZGVyLnB1c2goX3RvKSAtIDE7CiAgICAgICAgICAgIC8vIHB1c2ggZnVuY3Rpb24gcmV0dXJucyB0aGUgbmV3IGxlbmd0aAogICAgICAgIH0KCiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CgogICAgICAgIC8vIENoYW5nZSBhbGxvd2FuY2VzIGNvcnJlc3BvbmRpbmdseQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogIC0tLS0tLS0tLSBWb3RpbmcgIC0tLS0tLS0tLS0tLS0tICAqLwogICAgLy8gd2Ugb25seSBjb3VudCAneWVzJyB2b3Rlcywgbm90IHZvdGluZyAneWVzJwogICAgLy8gY29uc2lkZXJlZCBhcyB2b3RpbmcgJ25vJyAoYXMgc3RhdGVkIGluIEJ5bGF3cykKCiAgICAvLyBlYWNoIHByb3Bvc2FsIHNob3VsZCBjb250YWluIGl0J3MgdGV4dAogICAgLy8gaW5kZXggb2YgdGV4dCBpbiB0aGlzIGFycmF5IGlzIGEgcHJvcG9zYWwgSUQKICAgIHN0cmluZ1tdIHB1YmxpYyBwcm9wb3NhbFRleHQ7CiAgICAvLyBwcm9wb3NhbElEID0+IChzaGFyZWhvbGRlciA9PiAiaWYgYWxyZWFkeSB2b3RlZCBmb3IgdGhpcyBwcm9wb3NhbCIpCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkpIHZvdGVkOwogICAgLy8gcHJvcG9zYWxJRCA9PiBhZGRyZXNzZXMgdm90ZWQgJ3llcycKICAgIC8vIGV4YWN0IG51bWJlciBvZiB2b3RlcyBhY2NvcmRpbmcgdG8gc2hhcmVzIHdpbGwgYmUgY291bnRlZAogICAgLy8gYWZ0ZXIgZGVhZGxpbmUKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzc1tdKSBwdWJsaWMgdm90ZXM7CiAgICAvLyBwcm9wb3NhbElEID0+IGRlYWRsaW5lCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHB1YmxpYyBkZWFkbGluZTsKICAgIC8vIHByb3Bvc2FsSUQgPT4gZmluYWwgJ3llcycgdm90ZXMKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHVibGljIHJlc3VsdHM7CiAgICAvLyBwcm9wb3NhbHMgb2YgZXZlcnkgc2hhcmVob2xkZXIKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NltdKSBwdWJsaWMgcHJvcG9zYWxzQnlTaGFyZWhvbGRlcjsKCiAgICBmdW5jdGlvbiBnZXRQcm9wb3NhbFRleHRBcnJheUxlbmd0aCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpewogICAgICAgIHJldHVybiBwcm9wb3NhbFRleHQubGVuZ3RoOwogICAgfQoKICAgIGV2ZW50IFByb3Bvc2FsQWRkZWQodWludDI1NiBwcm9wb3NhbElELAogICAgYWRkcmVzcyBpbml0aWF0b3IsCiAgICBzdHJpbmcgZGVzY3JpcHRpb24sCiAgICB1aW50MjU2IGRlYWRsaW5lKTsKCiAgICBldmVudCBWb3RpbmdGaW5pc2hlZCh1aW50MjU2IHByb3Bvc2FsSUQsIHVpbnQyNTYgdm90ZXMpOwoKICAgIGZ1bmN0aW9uIG1ha2VOZXdQcm9wb3NhbChzdHJpbmcgX3Byb3Bvc2FsRGVzY3JpcHRpb24sCiAgICB1aW50MjU2IF9kZWJhdGluZ1BlcmlvZEluTWludXRlcykKICAgIHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIC8vIG9ubHkgc2hhcmVob2xkZXIgd2l0aCBvbmUgb3IgbW9yZSBzaGFyZXMgY2FuIG1ha2UgYSBwcm9wb3NhbAogICAgICAgIC8vICEhISEgY2FuIGJlIG1vcmUgdGhlbiBvbmUgc2hhcmUgcmVxdWlyZWQKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgMSkgdGhyb3c7CgogICAgICAgIGlmIChfZGViYXRpbmdQZXJpb2RJbk1pbnV0ZXMgPCAxKSB0aHJvdzsKCiAgICAgICAgdWludDI1NiBpZCA9IHByb3Bvc2FsVGV4dC5wdXNoKF9wcm9wb3NhbERlc2NyaXB0aW9uKSAtIDE7CiAgICAgICAgZGVhZGxpbmVbaWRdID0gbm93ICsgX2RlYmF0aW5nUGVyaW9kSW5NaW51dGVzICogMSBtaW51dGVzOwoKICAgICAgICAvLyBhZGQgdG8gcHJvcG9zYWxzIG9mIHRoaXMgc2hhcmVob2xkZXI6CiAgICAgICAgcHJvcG9zYWxzQnlTaGFyZWhvbGRlclttc2cuc2VuZGVyXS5wdXNoKGlkKTsKCiAgICAgICAgLy8gaW5pdGlhdG9yIGFsd2F5cyB2b3RlcyAneWVzJwogICAgICAgIHZvdGVzW2lkXS5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgIHZvdGVkW2lkXVttc2cuc2VuZGVyXSA9IHRydWU7CgogICAgICAgIFByb3Bvc2FsQWRkZWQoaWQsIG1zZy5zZW5kZXIsIF9wcm9wb3NhbERlc2NyaXB0aW9uLCBkZWFkbGluZVtpZF0pOwoKICAgICAgICByZXR1cm4gaWQ7CiAgICAgICAgLy8gcmV0dXJucyBwcm9wb3NhbCBpZAogICAgfQoKICAgIGZ1bmN0aW9uIGdldE15UHJvcG9zYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NltdKXsKICAgICAgICByZXR1cm4gcHJvcG9zYWxzQnlTaGFyZWhvbGRlclttc2cuc2VuZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiB2b3RlRm9yUHJvcG9zYWwodWludDI1NiBfcHJvcG9zYWxJRCkgcmV0dXJucyAoc3RyaW5nKSB7CgogICAgICAgIC8vIGlmIG5vIHNoYXJlcyBjdXJyZW50bHkgb3duZWQgLSBubyByaWdodCB0byB2b3RlCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IDEpIHJldHVybiAibm8gc2hhcmVzLCB2b3RlIG5vdCBhY2NlcHRlZCI7CgogICAgICAgIC8vIGlmIGFscmVhZHkgdm90ZWQgLSB0aHJvdywgZWxzZSB2b3RpbmcgY2FuIGJlIHNwYW1tZWQKICAgICAgICBpZiAodm90ZWRbX3Byb3Bvc2FsSURdW21zZy5zZW5kZXJdKSB7CiAgICAgICAgICAgIHJldHVybiAiYWxyZWFkeSB2b3RlZCwgdm90ZSBub3QgYWNjZXB0ZWQiOwogICAgICAgIH0KCiAgICAgICAgLy8gbm8gdm90ZXMgYWZ0ZXIgZGVhZGxpbmUKICAgICAgICBpZiAobm93ID4gZGVhZGxpbmVbX3Byb3Bvc2FsSURdKSB7CiAgICAgICAgICAgIHJldHVybiAidm90ZSBub3QgYWNjZXB0ZWQgYWZ0ZXIgZGVhZGxpbmUiOwogICAgICAgIH0KCiAgICAgICAgLy8gYWRkIHRvIGxpc3Qgb2Ygdm90ZWQgJ3llcycKICAgICAgICB2b3Rlc1tfcHJvcG9zYWxJRF0ucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICB2b3RlZFtfcHJvcG9zYWxJRF1bbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgIHJldHVybiAidm90ZSBhY2NlcHRlZCI7CiAgICB9CgogICAgLy8gdG8gY291bnQgdm90ZXMgdGhpcyB0cmFuc2FjdGlvbiBzaG91bGQgYmUgc3RhcnRlZCBtYW51YWxseQogICAgLy8gZnJvbSBfYW55XyBFdGhlcmV1bSBhZGRyZXNzIGFmdGVyIGRlYWRsaW5lCiAgICBmdW5jdGlvbiBjb3VudFZvdGVzKHVpbnQyNTYgX3Byb3Bvc2FsSUQpIHJldHVybnMgKHVpbnQyNTYpewoKICAgICAgICAvLyBpZiBub3QgYWZ0ZXIgZGVhZGxpbmUgLSB0aHJvdwogICAgICAgIGlmIChub3cgPCBkZWFkbGluZVtfcHJvcG9zYWxJRF0pIHRocm93OwoKICAgICAgICAvLyBpZiBhbHJlYWR5IGNvdW50ZWQgcmV0dXJuIHJlc3VsdDsKICAgICAgICBpZiAocmVzdWx0c1tfcHJvcG9zYWxJRF0gPiAwKSByZXR1cm4gcmVzdWx0c1tfcHJvcG9zYWxJRF07CgogICAgICAgIC8vIGVsc2Ugc2hvdWxkIGNvdW50IHJlc3VsdHMgYW5kIHN0b3JlIGluIHB1YmxpYyB2YXJpYWJsZQogICAgICAgIHVpbnQyNTYgcmVzdWx0ID0gMDsKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCB2b3Rlc1tfcHJvcG9zYWxJRF0ubGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgIGFkZHJlc3Mgdm90ZXIgPSB2b3Rlc1tfcHJvcG9zYWxJRF1baV07CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGJhbGFuY2VPZlt2b3Rlcl07CiAgICAgICAgfQogICAgICAgIC8vIC0tLS0tPj4+ICEhISBpbXBvcnRhbnQKICAgICAgICAvLyBzdG9yZSByZXN1bHQKICAgICAgICByZXN1bHRzW19wcm9wb3NhbElEXSA9IHJlc3VsdDsKCiAgICAgICAgLy8gTG9nIGFuZCBub3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdm90aW5nIGZpbmlzaGVkCiAgICAgICAgLy8gd2l0aCAncmVzdWx0JyAtIG51bWJlciBvZiAneWVzJyB2b3RlcwogICAgICAgIFZvdGluZ0ZpbmlzaGVkKF9wcm9wb3NhbElELCByZXN1bHQpOwoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKfQ=='.
	

]
