Class {
	#name : #SRT97282A7a15f9bEaDC854E8793AAe43B089F14b4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT97282A7a15f9bEaDC854E8793AAe43B089F14b4e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCi8qKgogKiBAdGl0bGUgQ29udHJhY3QgZm9yIG9iamVjdCB0aGF0IGhhdmUgYW4gb3duZXIKICovCmNvbnRyYWN0IE93bmVkIHsKICAgIC8qKgogICAgICogQ29udHJhY3Qgb3duZXIgYWRkcmVzcwogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvKioKICAgICAqIEBkZXYgRGVsZWdhdGUgY29udHJhY3QgdG8gYW5vdGhlciBwZXJzb24KICAgICAqIEBwYXJhbSBfb3duZXIgTmV3IG93bmVyIGFkZHJlc3MgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIKICAgIHsgb3duZXIgPSBfb3duZXI7IH0KCiAgICAvKioKICAgICAqIEBkZXYgT3duZXIgY2hlY2sgbW9kaWZpZXIKICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyIHsgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OyBfOyB9Cn0KCi8qKgogKiBAdGl0bGUgQ29tbW9uIHBhdHRlcm4gZm9yIGRlc3Ryb3lhYmxlIGNvbnRyYWN0cyAKICovCmNvbnRyYWN0IERlc3Ryb3lhYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIGhhbW1lcjsKCiAgICAvKioKICAgICAqIEBkZXYgSGFtbWVyIHNldHRlcgogICAgICogQHBhcmFtIF9oYW1tZXIgTmV3IGhhbW1lciBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEhhbW1lcihhZGRyZXNzIF9oYW1tZXIpIG9ubHlIYW1tZXIKICAgIHsgaGFtbWVyID0gX2hhbW1lcjsgfQoKICAgIC8qKgogICAgICogQGRldiBEZXN0cm95IGNvbnRyYWN0IGFuZCBzY3J1YiBhIGRhdGEKICAgICAqIEBub3RpY2UgT25seSBoYW1tZXIgY2FuIGNhbGwgaXQgCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSBvbmx5SGFtbWVyCiAgICB7IHN1aWNpZGUobXNnLnNlbmRlcik7IH0KCiAgICAvKioKICAgICAqIEBkZXYgSGFtbWVyIGNoZWNrIG1vZGlmaWVyCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlIYW1tZXIgeyBpZiAobXNnLnNlbmRlciAhPSBoYW1tZXIpIHRocm93OyBfOyB9Cn0KCi8qKgogKiBAdGl0bGUgR2VuZXJpYyBvd25lZCBkZXN0cm95YWJsZSBjb250cmFjdAogKi8KY29udHJhY3QgT2JqZWN0IGlzIE93bmVkLCBEZXN0cm95YWJsZSB7CiAgICBmdW5jdGlvbiBPYmplY3QoKSB7CiAgICAgICAgb3duZXIgID0gbXNnLnNlbmRlcjsKICAgICAgICBoYW1tZXIgPSBtc2cuc2VuZGVyOwogICAgfQp9CgovLyBTdGFuZGFyZCB0b2tlbiBpbnRlcmZhY2UgKEVSQyAyMCkKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCmNvbnRyYWN0IEVSQzIwIAp7Ci8vIEZ1bmN0aW9uczoKICAgIC8vLyBAcmV0dXJuIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgovLyBFdmVudHM6CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgovKioKICogQHRpdGxlIEFzc2V0IHJlY2lwaWVudCBpbnRlcmZhY2UKICovCmNvbnRyYWN0IFJlY2lwaWVudCB7CiAgICAvKioKICAgICAqIEBkZXYgT24gcmVjZWl2ZWQgZXRoZXJzCiAgICAgKiBAcGFyYW0gc2VuZGVyIEV0aGVyIHNlbmRlcgogICAgICogQHBhcmFtIGFtb3VudCBFdGhlciB2YWx1ZQogICAgICovCiAgICBldmVudCBSZWNlaXZlZEV0aGVyKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgaW5kZXhlZCBhbW91bnQpOwoKICAgIC8qKgogICAgICogQGRldiBPbiByZWNlaXZlZCBjdXN0b20gRVJDMjAgdG9rZW5zCiAgICAgKiBAcGFyYW0gZnJvbSBUb2tlbiBzZW5kZXIKICAgICAqIEBwYXJhbSB2YWx1ZSBUb2tlbiB2YWx1ZQogICAgICogQHBhcmFtIHRva2VuIFRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBleHRyYURhdGEgQ3VzdG9tIGFkZGl0aW9uYWwgZGF0YQogICAgICovCiAgICBldmVudCBSZWNlaXZlZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgZnJvbSwKICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgaW5kZXhlZCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB0b2tlbiwKICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGV4dHJhRGF0YSk7CgogICAgLyoqCiAgICAgKiBAZGV2IFJlY2VpdmUgYXBwcm92ZWQgRVJDMjAgdG9rZW5zCiAgICAgKiBAcGFyYW0gX2Zyb20gU3BlbmRlciBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRyYW5zYWN0aW9uIHZhbHVlCiAgICAgKiBAcGFyYW0gX3Rva2VuIEVSQzIwIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfZXh0cmFEYXRhIEN1c3RvbSBhZGRpdGlvbmFsIGRhdGEKICAgICAqLwogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVSQzIwIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgewogICAgICAgIGlmICghX3Rva2VuLnRyYW5zZmVyRnJvbShfZnJvbSwgdGhpcywgX3ZhbHVlKSkgdGhyb3c7CiAgICAgICAgUmVjZWl2ZWRUb2tlbnMoX2Zyb20sIF92YWx1ZSwgX3Rva2VuLCBfZXh0cmFEYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2F0Y2ggc2VuZGVkIHRvIGNvbnRyYWN0IGV0aGVycwogICAgICovCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlCiAgICB7IFJlY2VpdmVkRXRoZXIobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsgfQp9CgovKioKICogQHRpdGxlIEltcHJvdmVkIGNvbmdyZXNzIGNvbnRyYWN0IGJ5IEV0aGVyZXVtIEZvdW5kYXRpb24KICogQGRldiBodHRwczovL3d3dy5ldGhlcmV1bS5vcmcvZGFvI3RoZS1ibG9ja2NoYWluLWNvbmdyZXNzIAogKi8KY29udHJhY3QgQ29uZ3Jlc3MgaXMgT2JqZWN0LCBSZWNpcGllbnQgewogICAgLyoqCiAgICAgKiBAZGV2IE1pbmltYWwgcXVvcnVtIHZhbHVlCiAgICAgKi8KICAgIHVpbnQyNTYgcHVibGljIG1pbmltdW1RdW9ydW07CgogICAgLyoqCiAgICAgKiBAZGV2IER1cmF0aW9uIG9mIGRlYmF0ZXMKICAgICAqLwogICAgdWludDI1NiBwdWJsaWMgZGViYXRpbmdQZXJpb2RJbk1pbnV0ZXM7CgogICAgLyoqCiAgICAgKiBAZGV2IE1ham9yaXR5IG1hcmdpbiBpcyB1c2VkIGluIHZvdGluZyBwcm9jZWR1cmUgCiAgICAgKi8KICAgIGludDI1NiBwdWJsaWMgbWFqb3JpdHlNYXJnaW47CgogICAgLyoqCiAgICAgKiBAZGV2IEFyY2hpdmUgb2YgYWxsIG1lbWJlciBwcm9wb3NhbHMgCiAgICAgKi8KICAgIFByb3Bvc2FsW10gcHVibGljIHByb3Bvc2FsczsKCiAgICAvKioKICAgICAqIEBkZXYgQ291bnQgb2YgcHJvcG9zYWxzIGluIGFyY2hpdmUgCiAgICAgKi8KICAgIGZ1bmN0aW9uIG51bVByb3Bvc2FscygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpCiAgICB7IHJldHVybiBwcm9wb3NhbHMubGVuZ3RoOyB9CgogICAgLyoqCiAgICAgKiBAZGV2IENvbmdyZXNzIG1lbWJlcnMgbGlzdAogICAgICovCiAgICBNZW1iZXJbXSBwdWJsaWMgbWVtYmVyczsKCiAgICAvKioKICAgICAqIEBkZXYgR2V0IG1lbWJlciBpZGVudGlmaWVyIGJ5IGFjY291bnQgYWRkcmVzcwogICAgICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIG1lbWJlcklkOwoKICAgIC8qKgogICAgICogQGRldiBPbiBwcm9wb3NhbCBhZGRlZCAKICAgICAqIEBwYXJhbSBwcm9wb3NhbCBQcm9wb3NhbCBpZGVudGlmaWVyCiAgICAgKiBAcGFyYW0gcmVjaXBpZW50IEV0aGVyIHJlY2lwaWVudAogICAgICogQHBhcmFtIGFtb3VudCBBbW91bnQgb2Ygd2VpIHRvIHRyYW5zZmVyCiAgICAgKi8KICAgIGV2ZW50IFByb3Bvc2FsQWRkZWQodWludDI1NiBpbmRleGVkIHByb3Bvc2FsLAogICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcmVjaXBpZW50LAogICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IGluZGV4ZWQgYW1vdW50LAogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZGVzY3JpcHRpb24pOwoKICAgIC8qKgogICAgICogQGRldiBPbiB2b3RlIGJ5IG1lbWJlciBhY2NlcHRlZAogICAgICogQHBhcmFtIHByb3Bvc2FsIFByb3Bvc2FsIGlkZW50aWZpZXIKICAgICAqIEBwYXJhbSBwb3NpdGlvbiBJcyBwcm9wb3NhbCBhY2NlcHRlZCBieSBtZW1lYmVyCiAgICAgKiBAcGFyYW0gdm90ZXIgQ29uZ3Jlc3MgbWVtZWJlciBhY2NvdW50IGFkZHJlc3MKICAgICAqIEBwYXJhbSBqdXN0aWZpY2F0aW9uIE1lbWJlciBjb21tZW50CiAgICAgKi8KICAgIGV2ZW50IFZvdGVkKHVpbnQyNTYgaW5kZXhlZCBwcm9wb3NhbCwKICAgICAgICAgICAgICAgIGJvb2wgICAgaW5kZXhlZCBwb3NpdGlvbiwKICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB2b3RlciwKICAgICAgICAgICAgICAgIHN0cmluZyBqdXN0aWZpY2F0aW9uKTsKCiAgICAvKioKICAgICAqIEBkZXYgT24gUHJvcG9zYWwgY2xvc2VkCiAgICAgKiBAcGFyYW0gcHJvcG9zYWwgUHJvcG9zYWwgaWRlbnRpZmllcgogICAgICogQHBhcmFtIHF1b3J1bSBOdW1iZXIgb2Ygdm90ZXMgCiAgICAgKiBAcGFyYW0gYWN0aXZlIElzIHByb3Bvc2FsIHBhc3NlZAogICAgICovCiAgICBldmVudCBQcm9wb3NhbFRhbGxpZWQodWludDI1NiBpbmRleGVkIHByb3Bvc2FsLAogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgaW5kZXhlZCBxdW9ydW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbCAgICBpbmRleGVkIGFjdGl2ZSk7CgogICAgLyoqCiAgICAgKiBAZGV2IE9uIGNoYW5nZWQgbWVtYmVyc2hpcAogICAgICogQHBhcmFtIG1lbWJlciBBY2NvdW50IGFkZHJlc3MgCiAgICAgKiBAcGFyYW0gaXNNZW1iZXIgSXMgYWNjb3VudCBtZW1iZXIgbm93CiAgICAgKi8KICAgIGV2ZW50IE1lbWJlcnNoaXBDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBtZW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sICAgIGluZGV4ZWQgaXNNZW1iZXIpOwoKICAgIC8qKgogICAgICogQGRldiBPbiB2b3RpbmcgcnVsZXMgY2hhbmdlZAogICAgICogQHBhcmFtIG1pbmltdW1RdW9ydW0gTmV3IG1pbmltYWwgY291bnQgb2Ygdm90ZXMKICAgICAqIEBwYXJhbSBkZWJhdGluZ1BlcmlvZEluTWludXRlcyBOZXcgZGViYXRpbmcgZHVyYXRpb24KICAgICAqIEBwYXJhbSBtYWpvcml0eU1hcmdpbiBOZXcgbWFqb3JpdHkgbWFyZ2luIHZhbHVlCiAgICAgKi8KICAgIGV2ZW50IENoYW5nZU9mUnVsZXModWludDI1NiBpbmRleGVkIG1pbmltdW1RdW9ydW0sCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgaW5kZXhlZCBkZWJhdGluZ1BlcmlvZEluTWludXRlcywKICAgICAgICAgICAgICAgICAgICAgICAgaW50MjU2ICBpbmRleGVkIG1ham9yaXR5TWFyZ2luKTsKCiAgICBzdHJ1Y3QgUHJvcG9zYWwgewogICAgICAgIGFkZHJlc3MgcmVjaXBpZW50OwogICAgICAgIHVpbnQyNTYgYW1vdW50OwogICAgICAgIHN0cmluZyAgZGVzY3JpcHRpb247CiAgICAgICAgdWludDI1NiB2b3RpbmdEZWFkbGluZTsKICAgICAgICBib29sICAgIGV4ZWN1dGVkOwogICAgICAgIGJvb2wgICAgcHJvcG9zYWxQYXNzZWQ7CiAgICAgICAgdWludDI1NiBudW1iZXJPZlZvdGVzOwogICAgICAgIGludDI1NiAgY3VycmVudFJlc3VsdDsKICAgICAgICBieXRlczMyIHByb3Bvc2FsSGFzaDsKICAgICAgICBWb3RlW10gIHZvdGVzOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSB2b3RlZDsKICAgIH0KCiAgICBzdHJ1Y3QgTWVtYmVyIHsKICAgICAgICBhZGRyZXNzIG1lbWJlcjsKICAgICAgICBzdHJpbmcgIG5hbWU7CiAgICAgICAgdWludDI1NiBtZW1iZXJTaW5jZTsKICAgIH0KCiAgICBzdHJ1Y3QgVm90ZSB7CiAgICAgICAgYm9vbCAgICBpblN1cHBvcnQ7CiAgICAgICAgYWRkcmVzcyB2b3RlcjsKICAgICAgICBzdHJpbmcgIGp1c3RpZmljYXRpb247CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IE1vZGlmaWVyIHRoYXQgYWxsb3dzIG9ubHkgc2hhcmVob2xkZXJzIHRvIHZvdGUgYW5kIGNyZWF0ZSBuZXcgcHJvcG9zYWxzCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlNZW1iZXJzIHsKICAgICAgICBpZiAobWVtYmVySWRbbXNnLnNlbmRlcl0gPT0gMCkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRmlyc3QgdGltZSBzZXR1cAogICAgICovCiAgICBmdW5jdGlvbiBDb25ncmVzcygKICAgICAgICB1aW50MjU2IG1pbmltdW1RdW9ydW1Gb3JQcm9wb3NhbHMsCiAgICAgICAgdWludDI1NiBtaW51dGVzRm9yRGViYXRlLAogICAgICAgIGludDI1NiAgbWFyZ2luT2ZWb3Rlc0Zvck1ham9yaXR5LAogICAgICAgIGFkZHJlc3MgY29uZ3Jlc3NMZWFkZXIKICAgICkgewogICAgICAgIGNoYW5nZVZvdGluZ1J1bGVzKG1pbmltdW1RdW9ydW1Gb3JQcm9wb3NhbHMsIG1pbnV0ZXNGb3JEZWJhdGUsIG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eSk7CiAgICAgICAgLy8gSXTigJlzIG5lY2Vzc2FyeSB0byBhZGQgYW4gZW1wdHkgZmlyc3QgbWVtYmVyCiAgICAgICAgYWRkTWVtYmVyKDAsICcnKTsgLy8gYW5kIGxldCdzIGFkZCB0aGUgZm91bmRlciwgdG8gc2F2ZSBhIHN0ZXAgbGF0ZXIKICAgICAgICBpZiAoY29uZ3Jlc3NMZWFkZXIgIT0gMCkKICAgICAgICAgICAgYWRkTWVtYmVyKGNvbmdyZXNzTGVhZGVyLCAnVGhlIEZvdW5kZXInKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQXBwZW5kIG5ldyBjb25ncmVzcyBtZW1iZXIgCiAgICAgKiBAcGFyYW0gdGFyZ2V0TWVtYmVyIE1lbWJlciBhY2NvdW50IGFkZHJlc3MKICAgICAqIEBwYXJhbSBtZW1iZXJOYW1lIE1lbWJlciBmdWxsIG5hbWUKICAgICAqLwogICAgZnVuY3Rpb24gYWRkTWVtYmVyKGFkZHJlc3MgdGFyZ2V0TWVtYmVyLCBzdHJpbmcgbWVtYmVyTmFtZSkgb25seU93bmVyIHsKICAgICAgICBpZiAobWVtYmVySWRbdGFyZ2V0TWVtYmVyXSAhPSAwKSB0aHJvdzsKCiAgICAgICAgbWVtYmVySWRbdGFyZ2V0TWVtYmVyXSA9IG1lbWJlcnMubGVuZ3RoOwogICAgICAgIG1lbWJlcnMucHVzaChNZW1iZXIoe21lbWJlcjogICAgICB0YXJnZXRNZW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyU2luY2U6IG5vdywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAgICAgICAgbWVtYmVyTmFtZX0pKTsKCiAgICAgICAgTWVtYmVyc2hpcENoYW5nZWQodGFyZ2V0TWVtYmVyLCB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmVtb3ZlIGNvbmdyZXNzIG1lbWJlcgogICAgICogQHBhcmFtIHRhcmdldE1lbWJlciBNZW1iZXIgYWNjb3VudCBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZU1lbWJlcihhZGRyZXNzIHRhcmdldE1lbWJlcikgb25seU93bmVyIHsKICAgICAgICBpZiAobWVtYmVySWRbdGFyZ2V0TWVtYmVyXSA9PSAwKSB0aHJvdzsKCiAgICAgICAgdWludDI1NiB0YXJnZXRJZCA9IG1lbWJlcklkW3RhcmdldE1lbWJlcl07CiAgICAgICAgdWludDI1NiBsYXN0SWQgICA9IG1lbWJlcnMubGVuZ3RoIC0gMTsKCiAgICAgICAgLy8gTW92ZSBsYXN0IG1lbWJlciB0byByZW1vdmVkIHBvc2l0aW9uCiAgICAgICAgTWVtYmVyIG1lbW9yeSBtb3ZlZCAgICA9IG1lbWJlcnNbbGFzdElkXTsKICAgICAgICBtZW1iZXJzW3RhcmdldElkXSAgICAgID0gbW92ZWQ7IAogICAgICAgIG1lbWJlcklkW21vdmVkLm1lbWJlcl0gPSB0YXJnZXRJZDsKCiAgICAgICAgLy8gQ2xlYW4gdXAKICAgICAgICBtZW1iZXJJZFt0YXJnZXRNZW1iZXJdID0gMDsKICAgICAgICBkZWxldGUgbWVtYmVyc1tsYXN0SWRdOwogICAgICAgIC0tbWVtYmVycy5sZW5ndGg7CgogICAgICAgIE1lbWJlcnNoaXBDaGFuZ2VkKHRhcmdldE1lbWJlciwgZmFsc2UpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDaGFuZ2UgcnVsZXMgb2Ygdm90aW5nCiAgICAgKiBAcGFyYW0gbWluaW11bVF1b3J1bUZvclByb3Bvc2FscyBNaW5pbWFsIGNvdW50IG9mIHZvdGVzCiAgICAgKiBAcGFyYW0gbWludXRlc0ZvckRlYmF0ZSBEZWJhdGUgZGVhZGxpbmUgaW4gbWludXRlcwogICAgICogQHBhcmFtIG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eSBNYWpvcml0eSBtYXJnaW4gdmFsdWUKICAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlVm90aW5nUnVsZXMoCiAgICAgICAgdWludDI1NiBtaW5pbXVtUXVvcnVtRm9yUHJvcG9zYWxzLAogICAgICAgIHVpbnQyNTYgbWludXRlc0ZvckRlYmF0ZSwKICAgICAgICBpbnQyNTYgIG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eQogICAgKQogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIG1pbmltdW1RdW9ydW0gICAgICAgICAgID0gbWluaW11bVF1b3J1bUZvclByb3Bvc2FsczsKICAgICAgICBkZWJhdGluZ1BlcmlvZEluTWludXRlcyA9IG1pbnV0ZXNGb3JEZWJhdGU7CiAgICAgICAgbWFqb3JpdHlNYXJnaW4gICAgICAgICAgPSBtYXJnaW5PZlZvdGVzRm9yTWFqb3JpdHk7CgogICAgICAgIENoYW5nZU9mUnVsZXMobWluaW11bVF1b3J1bSwgZGViYXRpbmdQZXJpb2RJbk1pbnV0ZXMsIG1ham9yaXR5TWFyZ2luKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ3JlYXRlIGEgbmV3IHByb3Bvc2FsCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgQmVuZWZpY2lhcnkgYWNjb3VudCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gYW1vdW50IFRyYW5zYWN0aW9uIHZhbHVlIGluIFdlaSAKICAgICAqIEBwYXJhbSBqb2JEZXNjcmlwdGlvbiBKb2IgZGVzY3JpcHRpb24gc3RyaW5nCiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25CeXRlY29kZSBCeXRlY29kZSBvZiB0cmFuc2FjdGlvbgogICAgICovCiAgICBmdW5jdGlvbiBuZXdQcm9wb3NhbCgKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQyNTYgYW1vdW50LAogICAgICAgIHN0cmluZyAgam9iRGVzY3JpcHRpb24sCiAgICAgICAgYnl0ZXMgICB0cmFuc2FjdGlvbkJ5dGVjb2RlCiAgICApCiAgICAgICAgb25seU1lbWJlcnMKICAgICAgICByZXR1cm5zICh1aW50MjU2IGlkKQogICAgewogICAgICAgIGlkICAgICAgICAgICAgICAgPSBwcm9wb3NhbHMubGVuZ3RoKys7CiAgICAgICAgUHJvcG9zYWwgcCAgICAgICA9IHByb3Bvc2Fsc1tpZF07CiAgICAgICAgcC5yZWNpcGllbnQgICAgICA9IGJlbmVmaWNpYXJ5OwogICAgICAgIHAuYW1vdW50ICAgICAgICAgPSBhbW91bnQ7CiAgICAgICAgcC5kZXNjcmlwdGlvbiAgICA9IGpvYkRlc2NyaXB0aW9uOwogICAgICAgIHAucHJvcG9zYWxIYXNoICAgPSBzaGEzKGJlbmVmaWNpYXJ5LCBhbW91bnQsIHRyYW5zYWN0aW9uQnl0ZWNvZGUpOwogICAgICAgIHAudm90aW5nRGVhZGxpbmUgPSBub3cgKyBkZWJhdGluZ1BlcmlvZEluTWludXRlcyAqIDEgbWludXRlczsKICAgICAgICBwLmV4ZWN1dGVkICAgICAgID0gZmFsc2U7CiAgICAgICAgcC5wcm9wb3NhbFBhc3NlZCA9IGZhbHNlOwogICAgICAgIHAubnVtYmVyT2ZWb3RlcyAgPSAwOwogICAgICAgIFByb3Bvc2FsQWRkZWQoaWQsIGJlbmVmaWNpYXJ5LCBhbW91bnQsIGpvYkRlc2NyaXB0aW9uKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2hlY2sgaWYgYSBwcm9wb3NhbCBjb2RlIG1hdGNoZXMKICAgICAqIEBwYXJhbSBpZCBQcm9wb3NhbCBpZGVudGlmaWVyCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgQmVuZWZpY2lhcnkgYWNjb3VudCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gYW1vdW50IFRyYW5zYWN0aW9uIHZhbHVlIGluIFdlaSAKICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbkJ5dGVjb2RlIEJ5dGVjb2RlIG9mIHRyYW5zYWN0aW9uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrUHJvcG9zYWxDb2RlKAogICAgICAgIHVpbnQyNTYgaWQsCiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeSwKICAgICAgICB1aW50MjU2IGFtb3VudCwKICAgICAgICBieXRlcyAgIHRyYW5zYWN0aW9uQnl0ZWNvZGUKICAgICkKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wgY29kZUNoZWNrc091dCkKICAgIHsKICAgICAgICByZXR1cm4gcHJvcG9zYWxzW2lkXS5wcm9wb3NhbEhhc2gKICAgICAgICAgICAgPT0gc2hhMyhiZW5lZmljaWFyeSwgYW1vdW50LCB0cmFuc2FjdGlvbkJ5dGVjb2RlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUHJvcG9zYWwgdm90aW5nCiAgICAgKiBAcGFyYW0gaWQgUHJvcG9zYWwgaWRlbnRpZmllcgogICAgICogQHBhcmFtIHN1cHBvcnRzUHJvcG9zYWwgSXMgcHJvcG9zYWwgc3VwcG9ydGVkCiAgICAgKiBAcGFyYW0ganVzdGlmaWNhdGlvblRleHQgTWVtYmVyIGNvbW1lbnQKICAgICAqLwogICAgZnVuY3Rpb24gdm90ZSgKICAgICAgICB1aW50MjU2IGlkLAogICAgICAgIGJvb2wgICAgc3VwcG9ydHNQcm9wb3NhbCwKICAgICAgICBzdHJpbmcgIGp1c3RpZmljYXRpb25UZXh0CiAgICApCiAgICAgICAgb25seU1lbWJlcnMKICAgICAgICByZXR1cm5zICh1aW50MjU2IHZvdGUpCiAgICB7CiAgICAgICAgUHJvcG9zYWwgcCA9IHByb3Bvc2Fsc1tpZF07ICAgICAgICAgICAgIC8vIEdldCB0aGUgcHJvcG9zYWwKICAgICAgICBpZiAocC52b3RlZFttc2cuc2VuZGVyXSA9PSB0cnVlKSB0aHJvdzsgLy8gSWYgaGFzIGFscmVhZHkgdm90ZWQsIGNhbmNlbAogICAgICAgIHAudm90ZWRbbXNnLnNlbmRlcl0gPSB0cnVlOyAgICAgICAgICAgICAvLyBTZXQgdGhpcyB2b3RlciBhcyBoYXZpbmcgdm90ZWQKICAgICAgICBwLm51bWJlck9mVm90ZXMrKzsgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jcmVhc2UgdGhlIG51bWJlciBvZiB2b3RlcwogICAgICAgIGlmIChzdXBwb3J0c1Byb3Bvc2FsKSB7ICAgICAgICAgICAgICAgICAvLyBJZiB0aGV5IHN1cHBvcnQgdGhlIHByb3Bvc2FsCiAgICAgICAgICAgIHAuY3VycmVudFJlc3VsdCsrOyAgICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIHNjb3JlCiAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXkgZG9uJ3QKICAgICAgICAgICAgcC5jdXJyZW50UmVzdWx0LS07ICAgICAgICAgICAgICAgICAgLy8gRGVjcmVhc2UgdGhlIHNjb3JlCiAgICAgICAgfQogICAgICAgIC8vIENyZWF0ZSBhIGxvZyBvZiB0aGlzIGV2ZW50CiAgICAgICAgVm90ZWQoaWQsICBzdXBwb3J0c1Byb3Bvc2FsLCBtc2cuc2VuZGVyLCBqdXN0aWZpY2F0aW9uVGV4dCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFRyeSB0byBleGVjdXRlIHByb3Bvc2FsCiAgICAgKiBAcGFyYW0gaWQgUHJvcG9zYWwgaWRlbnRpZmllcgogICAgICogQHBhcmFtIHRyYW5zYWN0aW9uQnl0ZWNvZGUgVHJhbnNhY3Rpb24gZGF0YQogICAgICovCiAgICBmdW5jdGlvbiBleGVjdXRlUHJvcG9zYWwoCiAgICAgICAgdWludDI1NiBpZCwKICAgICAgICBieXRlcyAgIHRyYW5zYWN0aW9uQnl0ZWNvZGUKICAgICkKICAgICAgICBvbmx5TWVtYmVycwogICAgewogICAgICAgIFByb3Bvc2FsIHAgPSBwcm9wb3NhbHNbaWRdOwogICAgICAgIC8qIENoZWNrIGlmIHRoZSBwcm9wb3NhbCBjYW4gYmUgZXhlY3V0ZWQ6CiAgICAgICAgICAgLSBIYXMgdGhlIHZvdGluZyBkZWFkbGluZSBhcnJpdmVkPwogICAgICAgICAgIC0gSGFzIGl0IGJlZW4gYWxyZWFkeSBleGVjdXRlZCBvciBpcyBpdCBiZWluZyBleGVjdXRlZD8KICAgICAgICAgICAtIERvZXMgdGhlIHRyYW5zYWN0aW9uIGNvZGUgbWF0Y2ggdGhlIHByb3Bvc2FsPwogICAgICAgICAgIC0gSGFzIGEgbWluaW11bSBxdW9ydW0/CiAgICAgICAgKi8KCiAgICAgICAgaWYgKG5vdyA8IHAudm90aW5nRGVhZGxpbmUKICAgICAgICAgICAgfHwgcC5leGVjdXRlZAogICAgICAgICAgICB8fCBwLnByb3Bvc2FsSGFzaCAhPSBzaGEzKHAucmVjaXBpZW50LCBwLmFtb3VudCwgdHJhbnNhY3Rpb25CeXRlY29kZSkKICAgICAgICAgICAgfHwgcC5udW1iZXJPZlZvdGVzIDwgbWluaW11bVF1b3J1bSkKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8qIGV4ZWN1dGUgcmVzdWx0ICovCiAgICAgICAgLyogSWYgZGlmZmVyZW5jZSBiZXR3ZWVuIHN1cHBvcnQgYW5kIG9wcG9zaXRpb24gaXMgbGFyZ2VyIHRoYW4gbWFyZ2luICovCiAgICAgICAgaWYgKHAuY3VycmVudFJlc3VsdCA+IG1ham9yaXR5TWFyZ2luKSB7CiAgICAgICAgICAgIC8vIEF2b2lkIHJlY3Vyc2l2ZSBjYWxsaW5nCgogICAgICAgICAgICBwLmV4ZWN1dGVkID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKCFwLnJlY2lwaWVudC5jYWxsLnZhbHVlKHAuYW1vdW50KSh0cmFuc2FjdGlvbkJ5dGVjb2RlKSkKICAgICAgICAgICAgICAgIHRocm93OwoKICAgICAgICAgICAgcC5wcm9wb3NhbFBhc3NlZCA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcC5wcm9wb3NhbFBhc3NlZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICAvLyBGaXJlIEV2ZW50cwogICAgICAgIFByb3Bvc2FsVGFsbGllZChpZCwgcC5udW1iZXJPZlZvdGVzLCBwLnByb3Bvc2FsUGFzc2VkKTsKICAgIH0KfQ=='.
	

]
