Class {
	#name : #SRT99474b0a565dd095555636d85803cdca7276b931,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99474b0a565dd095555636d85803cdca7276b931 >> base64 [
	^ ''.
	

]
