Class {
	#name : #SRT5ba708a7d74e3f87b719c234231548d3de0cabad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ba708a7d74e3f87b719c234231548d3de0cabad >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgQ2xhaW1hYmxlCiAqIEBkZXYgRXh0ZW5zaW9uIGZvciB0aGUgT3duYWJsZSBjb250cmFjdCwgd2hlcmUgdGhlIG93bmVyc2hpcCBuZWVkcyB0byBiZSBjbGFpbWVkLgogKiBUaGlzIGFsbG93cyB0aGUgbmV3IG93bmVyIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIuCiAqLwpjb250cmFjdCBDbGFpbWFibGUgaXMgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgcGVuZGluZ093bmVyOwoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgcGVuZGluZ093bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlQZW5kaW5nT3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byBzZXQgdGhlIHBlbmRpbmdPd25lciBhZGRyZXNzLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICBwZW5kaW5nT3duZXIgPSBuZXdPd25lcjsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBwZW5kaW5nT3duZXIgYWRkcmVzcyB0byBmaW5hbGl6ZSB0aGUgdHJhbnNmZXIuCiAgICovCiAgZnVuY3Rpb24gY2xhaW1Pd25lcnNoaXAoKSBvbmx5UGVuZGluZ093bmVyIHB1YmxpYyB7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgcGVuZGluZ093bmVyKTsKICAgIG93bmVyID0gcGVuZGluZ093bmVyOwogICAgcGVuZGluZ093bmVyID0gYWRkcmVzcygwKTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyKEVSQzIwQmFzaWMgdG9rZW4sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlckZyb20oRVJDMjAgdG9rZW4sIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBDb250cmFjdHMgdGhhdCBzaG91bGQgYmUgYWJsZSB0byByZWNvdmVyIHRva2VucwogKiBAYXV0aG9yIFN5bFRpCiAqIEBkZXYgVGhpcyBhbGxvdyBhIGNvbnRyYWN0IHRvIHJlY292ZXIgYW55IEVSQzIwIHRva2VuIHJlY2VpdmVkIGluIGEgY29udHJhY3QgYnkgdHJhbnNmZXJyaW5nIHRoZSBiYWxhbmNlIHRvIHRoZSBjb250cmFjdCBvd25lci4KICogVGhpcyB3aWxsIHByZXZlbnQgYW55IGFjY2lkZW50YWwgbG9zcyBvZiB0b2tlbnMuCiAqLwpjb250cmFjdCBDYW5SZWNsYWltVG9rZW4gaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwoKICAvKioKICAgKiBAZGV2IFJlY2xhaW0gYWxsIEVSQzIwQmFzaWMgY29tcGF0aWJsZSB0b2tlbnMKICAgKiBAcGFyYW0gdG9rZW4gRVJDMjBCYXNpYyBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QKICAgKi8KICBmdW5jdGlvbiByZWNsYWltVG9rZW4oRVJDMjBCYXNpYyB0b2tlbikgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnNhZmVUcmFuc2Zlcihvd25lciwgYmFsYW5jZSk7CiAgfQoKfQoKCi8vLyBAZGV2IEltcGxlbWVudHMgYWNjZXNzIGNvbnRyb2wgdG8gdGhlIENocm9ub3MgY29udHJhY3QuCmNvbnRyYWN0IENocm9ub3NBY2Nlc3NDb250cm9sIGlzIENsYWltYWJsZSwgUGF1c2FibGUsIENhblJlY2xhaW1Ub2tlbiB7CiAgICBhZGRyZXNzIHB1YmxpYyBjZm9BZGRyZXNzOwogICAgCiAgICBmdW5jdGlvbiBDaHJvbm9zQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgLy8gVGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0IGlzIHRoZSBpbml0aWFsIENGTy4KICAgICAgICBjZm9BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRk8tb25seSBmdW5jdGlvbmFsaXR5LgogICAgbW9kaWZpZXIgb25seUNGTygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2ZvQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDRk8uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IGNvbnRyYWN0IG93bmVyLgogICAgLy8vIEBwYXJhbSBfbmV3Q0ZPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0ZPLgogICAgZnVuY3Rpb24gc2V0Q0ZPKGFkZHJlc3MgX25ld0NGTykgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9uZXdDRk8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNmb0FkZHJlc3MgPSBfbmV3Q0ZPOwogICAgfQp9CgoKLy8vIEBkZXYgRGVmaW5lcyBiYXNlIGRhdGEgc3RydWN0dXJlcyBmb3IgQ2hyb25vcy4KY29udHJhY3QgQ2hyb25vc0Jhc2UgaXMgQ2hyb25vc0FjY2Vzc0NvbnRyb2wgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAKICAgIC8vLyBAbm90aWNlIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIGEgZ2FtZSBpcyBsaXZlLgogICAgYm9vbCBwdWJsaWMgZ2FtZVN0YXJ0ZWQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBwbGF5ZXIgd2hvIHN0YXJ0ZWQgdGhlIGdhbWUuCiAgICBhZGRyZXNzIHB1YmxpYyBnYW1lU3RhcnRlcjsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGxhc3QgcGxheWVyIHRvIGhhdmUgZW50ZXJlZC4KICAgIGFkZHJlc3MgcHVibGljIGxhc3RQbGF5ZXI7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSB0aW1lc3RhbXAgdGhlIGxhc3Qgd2FnZXIgdGltZXMgb3V0LgogICAgdWludDI1NiBwdWJsaWMgbGFzdFdhZ2VyVGltZW91dFRpbWVzdGFtcDsKCiAgICAvLy8gQG5vdGljZSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIHRoZSBnYW1lIGVuZHMuCiAgICB1aW50MjU2IHB1YmxpYyB0aW1lb3V0OwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIHRoZSBnYW1lIGVuZHMgLS0gc2V0dGluZwogICAgLy8vIGZvciB0aGUgbmV4dCBnYW1lLgogICAgdWludDI1NiBwdWJsaWMgbmV4dFRpbWVvdXQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBmaW5hbCBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgdGhlIGdhbWUgZW5kcy4KICAgIHVpbnQyNTYgcHVibGljIGZpbmFsVGltZW91dDsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGZpbmFsIG51bWJlciBvZiBzZWNvbmRzIGJlZm9yZSB0aGUgZ2FtZSBlbmRzIC0tCiAgICAvLy8gc2V0dGluZyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIG5leHRGaW5hbFRpbWVvdXQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBudW1iZXIgb2Ygd2FnZXJzIHJlcXVpcmVkIHRvIG1vdmUgdG8gdGhlCiAgICAvLy8gZmluYWwgdGltZW91dC4KICAgIHVpbnQyNTYgcHVibGljIG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBudW1iZXIgb2Ygd2FnZXJzIHJlcXVpcmVkIHRvIG1vdmUgdG8gdGhlCiAgICAvLy8gZmluYWwgdGltZW91dCAtLSBzZXR0aW5nIGZvciB0aGUgbmV4dCBnYW1lLgogICAgdWludDI1NiBwdWJsaWMgbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBnYW1lLgogICAgdWludDI1NiBwdWJsaWMgZ2FtZUluZGV4ID0gMDsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGluZGV4IG9mIHRoZSB0aGUgY3VycmVudCB3YWdlciBpbiB0aGUgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIHdhZ2VySW5kZXggPSAwOwogICAgCiAgICAvLy8gQG5vdGljZSBDYWxjdWxhdGUgdGhlIGN1cnJlbnQgZ2FtZSdzIHRpbWVvdXQuCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVUaW1lb3V0KCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgaWYgKHdhZ2VySW5kZXggPj0gbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCB8fCBudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGZpbmFsVGltZW91dDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoZmluYWxUaW1lb3V0IDw9IHRpbWVvdXQpIHsKICAgICAgICAgICAgICAgIC8vIFRoZSB0aW1lb3V0IGRlY3JlYXNlcyBvdmVyIHRpbWUuCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgdW5kZXJmbG93LCBhcyB0aW1lb3V0IGlzIGd1YXJhbnRlZWQgdG8gYmUKICAgICAgICAgICAgICAgIC8vIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBmaW5hbFRpbWVvdXQuCiAgICAgICAgICAgICAgICB1aW50MjU2IGRpZmZlcmVuY2UgPSB0aW1lb3V0IC0gZmluYWxUaW1lb3V0OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRlY3JlYXNlIGluIHRpbWVvdXQsIGJhc2VkIG9uIHRoZSBudW1iZXIgb2Ygd2FnZXJzIHBlcmZvcm1lZC4KICAgICAgICAgICAgICAgIHVpbnQyNTYgZGVjcmVhc2UgPSBkaWZmZXJlbmNlLm11bCh3YWdlckluZGV4KS5kaXYobnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFRoaXMgc3VidHJhY3Rpb24gY2Fubm90IHVuZGVyZmxvdywgYXMgZGVjcmVhc2UgaXMgZ3VhcmFudGVlZCB0byBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGltZW91dC4gICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiAodGltZW91dCAtIGRlY3JlYXNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFRoZSB0aW1lb3V0IGluY3JlYXNlcyBvdmVyIHRpbWUuCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgdW5kZXJmbG93LCBhcyB0aW1lb3V0IGlzIGd1YXJhbnRlZWQgdG8gYmUKICAgICAgICAgICAgICAgIC8vIHNtYWxsZXIgdGhhbiBmaW5hbFRpbWVvdXQuCiAgICAgICAgICAgICAgICBkaWZmZXJlbmNlID0gZmluYWxUaW1lb3V0IC0gdGltZW91dDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBpbmNyZWFzZSBpbiB0aW1lb3V0LCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHdhZ2VycyBwZXJmb3JtZWQuCiAgICAgICAgICAgICAgICB1aW50MjU2IGluY3JlYXNlID0gZGlmZmVyZW5jZS5tdWwod2FnZXJJbmRleCkuZGl2KG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBUaGlzIGFkZGl0aW9uIGNhbm5vdCBvdmVyZmxvdywgYXMgdGltZW91dCArIGluY3JlYXNlIGlzIGd1YXJhbnRlZWQgdG8gYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGZpbmFsVGltZW91dC4KICAgICAgICAgICAgICAgIHJldHVybiAodGltZW91dCArIGluY3JlYXNlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgUHVsbFBheW1lbnQKICogQGRldiBCYXNlIGNvbnRyYWN0IHN1cHBvcnRpbmcgYXN5bmMgc2VuZCBmb3IgcHVsbCBwYXltZW50cy4gSW5oZXJpdCBmcm9tIHRoaXMKICogY29udHJhY3QgYW5kIHVzZSBhc3luY1NlbmQgaW5zdGVhZCBvZiBzZW5kLgogKi8KY29udHJhY3QgUHVsbFBheW1lbnQgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHBheW1lbnRzOwogIHVpbnQyNTYgcHVibGljIHRvdGFsUGF5bWVudHM7CgogIC8qKgogICogQGRldiB3aXRoZHJhdyBhY2N1bXVsYXRlZCBiYWxhbmNlLCBjYWxsZWQgYnkgcGF5ZWUuCiAgKi8KICBmdW5jdGlvbiB3aXRoZHJhd1BheW1lbnRzKCkgcHVibGljIHsKICAgIGFkZHJlc3MgcGF5ZWUgPSBtc2cuc2VuZGVyOwogICAgdWludDI1NiBwYXltZW50ID0gcGF5bWVudHNbcGF5ZWVdOwoKICAgIHJlcXVpcmUocGF5bWVudCAhPSAwKTsKICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IHBheW1lbnQpOwoKICAgIHRvdGFsUGF5bWVudHMgPSB0b3RhbFBheW1lbnRzLnN1YihwYXltZW50KTsKICAgIHBheW1lbnRzW3BheWVlXSA9IDA7CgogICAgYXNzZXJ0KHBheWVlLnNlbmQocGF5bWVudCkpOwogIH0KCiAgLyoqCiAgKiBAZGV2IENhbGxlZCBieSB0aGUgcGF5ZXIgdG8gc3RvcmUgdGhlIHNlbnQgYW1vdW50IGFzIGNyZWRpdCB0byBiZSBwdWxsZWQuCiAgKiBAcGFyYW0gZGVzdCBUaGUgZGVzdGluYXRpb24gYWRkcmVzcyBvZiB0aGUgZnVuZHMuCiAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgdG8gdHJhbnNmZXIuCiAgKi8KICBmdW5jdGlvbiBhc3luY1NlbmQoYWRkcmVzcyBkZXN0LCB1aW50MjU2IGFtb3VudCkgaW50ZXJuYWwgewogICAgcGF5bWVudHNbZGVzdF0gPSBwYXltZW50c1tkZXN0XS5hZGQoYW1vdW50KTsKICAgIHRvdGFsUGF5bWVudHMgPSB0b3RhbFBheW1lbnRzLmFkZChhbW91bnQpOwogIH0KfQoKCi8vLyBAZGV2IERlZmluZXMgYmFzZSBmaW5hbmNlIGZ1bmN0aW9uYWxpdHkgZm9yIENocm9ub3MuCmNvbnRyYWN0IENocm9ub3NGaW5hbmNlIGlzIENocm9ub3NCYXNlLCBQdWxsUGF5bWVudCB7CiAgICAvLy8gQG5vdGljZSBUaGUgZGV2ZWxvcGVyIGZlZSBpbiAxLzEwMDB0aCBvZiBhIHBlcmNlbnRhZ2UuCiAgICB1aW50MjU2IHB1YmxpYyBmZWVQZXJjZW50YWdlID0gMjUwMDsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGdhbWUgc3RhcnRlciBmZWUuCiAgICB1aW50MjU2IHB1YmxpYyBnYW1lU3RhcnRlckRpdmlkZW5kUGVyY2VudGFnZSA9IDI1MDA7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSB3YWdlciBwcmljZS4KICAgIHVpbnQyNTYgcHVibGljIHByaWNlOwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgd2FnZXIgcHJpY2UgLS0gc2V0dGluZyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIG5leHRQcmljZTsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGN1cnJlbnQgcHJpemUgcG9vbCAoaW4gd2VpKS4KICAgIHVpbnQyNTYgcHVibGljIHByaXplUG9vbDsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIGN1cnJlbnQgN3RoIHdhZ2VyIHBvb2wgKGluIHdlaSkuCiAgICB1aW50MjU2IHB1YmxpYyB3YWdlclBvb2w7CiAgICAKICAgIC8vLyBAbm90aWNlIFNldHMgYSBuZXcgZmVlIHBlcmNlbnRhZ2UuCiAgICAvLy8gQHBhcmFtIF9mZWVQZXJjZW50YWdlIFRoZSBuZXcgZmVlIHBlcmNlbnRhZ2UuCiAgICBmdW5jdGlvbiBzZXRGZWVQZXJjZW50YWdlKHVpbnQyNTYgX2ZlZVBlcmNlbnRhZ2UpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIC8vIEZlZSBwZXJjZW50YWdlIG11c3QgYmUgNCUgYXQgdGhlIG1vc3QuCiAgICAgICAgcmVxdWlyZShfZmVlUGVyY2VudGFnZSA8PSA0MDAwKTsKICAgICAgICAKICAgICAgICBmZWVQZXJjZW50YWdlID0gX2ZlZVBlcmNlbnRhZ2U7CiAgICB9CiAgICAKICAgIC8vLyBAbm90aWNlIFNldHMgYSBuZXcgZ2FtZSBzdGFydGVyIGRpdmlkZW5kIHBlcmNlbnRhZ2UuCiAgICAvLy8gQHBhcmFtIF9nYW1lU3RhcnRlckRpdmlkZW5kUGVyY2VudGFnZSBUaGUgbmV3IGdhbWUgc3RhcnRlciBkaXZpZGVuZCBwZXJjZW50YWdlLgogICAgZnVuY3Rpb24gc2V0R2FtZVN0YXJ0ZXJEaXZpZGVuZFBlcmNlbnRhZ2UodWludDI1NiBfZ2FtZVN0YXJ0ZXJEaXZpZGVuZFBlcmNlbnRhZ2UpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIC8vIEdhbWUgc3RhcnRlciBkaXZpZGVuZCBwZXJjZW50YWdlIG11c3QgYmUgMC41JSBhdCBsZWFzdCBhbmQgNSUgYXQgdGhlIG1vc3QuCiAgICAgICAgcmVxdWlyZSg1MDAgPD0gX2dhbWVTdGFydGVyRGl2aWRlbmRQZXJjZW50YWdlICYmIF9nYW1lU3RhcnRlckRpdmlkZW5kUGVyY2VudGFnZSA8PSA1MDAwKTsKICAgICAgICAKICAgICAgICBnYW1lU3RhcnRlckRpdmlkZW5kUGVyY2VudGFnZSA9IF9nYW1lU3RhcnRlckRpdmlkZW5kUGVyY2VudGFnZTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgU2VuZCBmdW5kcyB0byBhIGJlbmVmaWNpYXJ5LiBJZiBzZW5kaW5nIGZhaWxzLCBhc3NpZ24KICAgIC8vLyBmdW5kcyB0byB0aGUgYmVuZWZpY2lhcnkncyBiYWxhbmNlIGZvciBtYW51YWwgd2l0aGRyYXdhbC4KICAgIC8vLyBAcGFyYW0gYmVuZWZpY2lhcnkgVGhlIGJlbmVmaWNpYXJ5J3MgYWRkcmVzcyB0byBzZW5kIGZ1bmRzIHRvCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIHNlbmQuCiAgICBmdW5jdGlvbiBfc2VuZEZ1bmRzKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKCFiZW5lZmljaWFyeS5zZW5kKGFtb3VudCkpIHsKICAgICAgICAgICAgLy8gRmFpbGVkIHRvIHNlbmQgZnVuZHMuIFRoaXMgY2FuIGhhcHBlbiBkdWUgdG8gYSBmYWlsdXJlIGluCiAgICAgICAgICAgIC8vIGZhbGxiYWNrIGNvZGUgb2YgdGhlIGJlbmVmaWNpYXJ5LCBvciBiZWNhdXNlIG9mIGNhbGxzdGFjawogICAgICAgICAgICAvLyBkZXB0aC4KICAgICAgICAgICAgLy8gU2VuZCBmdW5kcyBhc3luY2hyb25vdXNseSBmb3IgbWFudWFsIHdpdGhkcmF3YWwgYnkgdGhlCiAgICAgICAgICAgIC8vIGJlbmVmaWNpYXJ5LgogICAgICAgICAgICBhc3luY1NlbmQoYmVuZWZpY2lhcnksIGFtb3VudCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBXaXRoZHJhdyAodW5vd2VkKSBjb250cmFjdCBiYWxhbmNlLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGcmVlQmFsYW5jZSgpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZnJlZSAodW5vd2VkKSBiYWxhbmNlLgogICAgICAgIHVpbnQyNTYgZnJlZUJhbGFuY2UgPSB0aGlzLmJhbGFuY2Uuc3ViKHRvdGFsUGF5bWVudHMpLnN1Yihwcml6ZVBvb2wpLnN1Yih3YWdlclBvb2wpOwogICAgICAgIAogICAgICAgIGNmb0FkZHJlc3MudHJhbnNmZXIoZnJlZUJhbGFuY2UpOwogICAgfQp9CgoKLy8vIEBkZXYgRGVmaW5lcyBjb3JlIENocm9ub3MgZnVuY3Rpb25hbGl0eS4KY29udHJhY3QgQ2hyb25vc0NvcmUgaXMgQ2hyb25vc0ZpbmFuY2UgewogICAgCiAgICBmdW5jdGlvbiBDaHJvbm9zQ29yZSh1aW50MjU2IF9wcmljZSwgdWludDI1NiBfdGltZW91dCwgdWludDI1NiBfZmluYWxUaW1lb3V0LCB1aW50MjU2IF9udW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0KSBwdWJsaWMgewogICAgICAgIG5leHRQcmljZSA9IF9wcmljZTsKICAgICAgICBuZXh0VGltZW91dCA9IF90aW1lb3V0OwogICAgICAgIG5leHRGaW5hbFRpbWVvdXQgPSBfZmluYWxUaW1lb3V0OwogICAgICAgIG5leHROdW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0ID0gX251bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAgICAgTmV4dEdhbWUobmV4dFByaWNlLCBuZXh0VGltZW91dCwgbmV4dEZpbmFsVGltZW91dCwgbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgfQogICAgCiAgICBldmVudCBOZXh0R2FtZSh1aW50MjU2IHByaWNlLCB1aW50MjU2IHRpbWVvdXQsIHVpbnQyNTYgZmluYWxUaW1lb3V0LCB1aW50MjU2IG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgZXZlbnQgU3RhcnQodWludDI1NiBpbmRleGVkIGdhbWVJbmRleCwgYWRkcmVzcyBpbmRleGVkIHN0YXJ0ZXIsIHVpbnQyNTYgdGltZXN0YW1wLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IHRpbWVvdXQsIHVpbnQyNTYgZmluYWxUaW1lb3V0LCB1aW50MjU2IG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgZXZlbnQgRW5kKHVpbnQyNTYgaW5kZXhlZCBnYW1lSW5kZXgsIHVpbnQyNTYgd2FnZXJJbmRleCwgYWRkcmVzcyBpbmRleGVkIHdpbm5lciwgdWludDI1NiB0aW1lc3RhbXAsIHVpbnQyNTYgcHJpemUpOwogICAgZXZlbnQgUGxheSh1aW50MjU2IGluZGV4ZWQgZ2FtZUluZGV4LCB1aW50MjU2IGluZGV4ZWQgd2FnZXJJbmRleCwgYWRkcmVzcyBpbmRleGVkIHBsYXllciwgdWludDI1NiB0aW1lc3RhbXAsIHVpbnQyNTYgdGltZW91dFRpbWVzdGFtcCwgdWludDI1NiBuZXdQcml6ZVBvb2wpOwogICAgZXZlbnQgU3BpY2VVcFByaXplUG9vbCh1aW50MjU2IGluZGV4ZWQgZ2FtZUluZGV4LCBhZGRyZXNzIGluZGV4ZWQgc3BpY2VyLCB1aW50MjU2IHNwaWNlQWRkZWQsIHN0cmluZyBtZXNzYWdlLCB1aW50MjU2IG5ld1ByaXplUG9vbCk7CiAgICAKICAgIC8vLyBAbm90aWNlIFBhcnRpY2lwYXRlIGluIHRoZSBnYW1lLgogICAgLy8vIEBwYXJhbSBfZ2FtZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgZ2FtZSB0byBwbGF5IG9uLgogICAgLy8vIEBwYXJhbSBzdGFydE5ld0dhbWVJZklkbGUgU3RhcnQgYSBuZXcgZ2FtZSBpZiB0aGUgY3VycmVudCBnYW1lIGlzIGlkbGUuCiAgICBmdW5jdGlvbiBwbGF5KHVpbnQyNTYgX2dhbWVJbmRleCwgYm9vbCBzdGFydE5ld0dhbWVJZklkbGUpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgZ2FtZSBzaG91bGQgZW5kLiBQcm9jZXNzIHBheW1lbnQuCiAgICAgICAgX3Byb2Nlc3NHYW1lRW5kKCk7CiAgICAgICAgCiAgICAgICAgaWYgKCFnYW1lU3RhcnRlZCkgewogICAgICAgICAgICAvLyBJZiB0aGUgZ2FtZSBpcyBub3Qgc3RhcnRlZCwgdGhlIGNvbnRyYWN0IG11c3Qgbm90IGJlIHBhdXNlZC4KICAgICAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIElmIHRoZSBnYW1lIGlzIG5vdCBzdGFydGVkLCB0aGUgcGxheWVyIG11c3QgYmUgd2lsbGluZyB0byBzdGFydAogICAgICAgICAgICAvLyBhIG5ldyBnYW1lLgogICAgICAgICAgICByZXF1aXJlKHN0YXJ0TmV3R2FtZUlmSWRsZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTZXQgdGhlIHByaWNlIGFuZCB0aW1lb3V0LgogICAgICAgICAgICBwcmljZSA9IG5leHRQcmljZTsKICAgICAgICAgICAgdGltZW91dCA9IG5leHRUaW1lb3V0OwogICAgICAgICAgICBmaW5hbFRpbWVvdXQgPSBuZXh0RmluYWxUaW1lb3V0OwogICAgICAgICAgICBudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0ID0gbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTdGFydCB0aGUgZ2FtZS4KICAgICAgICAgICAgZ2FtZVN0YXJ0ZWQgPSB0cnVlOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gU2V0IHRoZSBnYW1lIHN0YXJ0ZXIuCiAgICAgICAgICAgIGdhbWVTdGFydGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEVtaXQgc3RhcnQgZXZlbnQuCiAgICAgICAgICAgIFN0YXJ0KGdhbWVJbmRleCwgbXNnLnNlbmRlciwgYmxvY2sudGltZXN0YW1wLCBwcmljZSwgdGltZW91dCwgZmluYWxUaW1lb3V0LCBudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gQ2hlY2sgdGhlIGdhbWUgaW5kZXguCiAgICAgICAgaWYgKHN0YXJ0TmV3R2FtZUlmSWRsZSkgewogICAgICAgICAgICAvLyBUaGUgZ2l2ZW4gZ2FtZSBpbmRleCBtdXN0IGJlIHRoZSBjdXJyZW50IGdhbWUgaW5kZXgsIG9yIHRoZSBwcmV2aW91cwogICAgICAgICAgICAvLyBnYW1lIGluZGV4LgogICAgICAgICAgICByZXF1aXJlKF9nYW1lSW5kZXggPT0gZ2FtZUluZGV4IHx8IF9nYW1lSW5kZXguYWRkKDEpID09IGdhbWVJbmRleCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gT25seSBwbGF5IG9uIHRoZSBnYW1lIGluZGljYXRlZCBieSB0aGUgcGxheWVyLgogICAgICAgICAgICByZXF1aXJlKF9nYW1lSW5kZXggPT0gZ2FtZUluZGV4KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gRW5vdWdoIEV0aGVyIG11c3QgYmUgc3VwcGxpZWQuCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gcHJpY2UpOwogICAgICAgIAogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZmVlcyBhbmQgZGl2aWRlbmRzLgogICAgICAgIHVpbnQyNTYgZmVlID0gcHJpY2UubXVsKGZlZVBlcmNlbnRhZ2UpLmRpdigxMDAwMDApOwogICAgICAgIHVpbnQyNTYgZGl2aWRlbmQgPSBwcmljZS5tdWwoZ2FtZVN0YXJ0ZXJEaXZpZGVuZFBlcmNlbnRhZ2UpLmRpdigxMDAwMDApOwogICAgICAgIHVpbnQyNTYgd2FnZXJQb29sUGFydDsKICAgICAgICAKICAgICAgICBpZiAod2FnZXJJbmRleCAlIDcgPT0gNikgewogICAgICAgICAgICAvLyBHaXZlIHRoZSB3YWdlciBwcml6ZSBldmVyeSA3dGggd2FnZXIuCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgN3RoIHdhZ2VyIHByaXplLgogICAgICAgICAgICB1aW50MjU2IHdhZ2VyUHJpemUgPSBwcmljZS5tdWwoMik7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG1pc3Npbmcgd2FnZXIgcG9vbCBwYXJ0IChlcXVhbCB0byBwcmljZS5tdWwoMikuZGl2KDcpIHBsdXMgYSBmZXcgd2VpKS4KICAgICAgICAgICAgd2FnZXJQb29sUGFydCA9IHdhZ2VyUHJpemUuc3ViKHdhZ2VyUG9vbCk7CiAgICAgICAgCiAgICAgICAgICAgIC8vIEdpdmUgdGhlIHdhZ2VyIHByaXplIHRvIHRoZSBzZW5kZXIuCiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIod2FnZXJQcml6ZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBSZXNldCB0aGUgd2FnZXIgcG9vbC4KICAgICAgICAgICAgd2FnZXJQb29sID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBPbiBldmVyeSBub24tN3RoIHdhZ2VyLCBpbmNyZWFzZSB0aGUgd2FnZXIgcG9vbC4KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgd2FnZXIgcG9vbCBwYXJ0LgogICAgICAgICAgICB3YWdlclBvb2xQYXJ0ID0gcHJpY2UubXVsKDIpLmRpdig3KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFkZCBmdW5kcyB0byB0aGUgd2FnZXIgcG9vbC4KICAgICAgICAgICAgd2FnZXJQb29sID0gd2FnZXJQb29sLmFkZCh3YWdlclBvb2xQYXJ0KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSB0aW1lb3V0LgogICAgICAgIHVpbnQyNTYgY3VycmVudFRpbWVvdXQgPSBjYWxjdWxhdGVUaW1lb3V0KCk7CiAgICAgICAgCiAgICAgICAgLy8gU2V0IHRoZSBsYXN0IHBsYXllciwgdGltZXN0YW1wLCB0aW1lb3V0IHRpbWVzdGFtcCwgYW5kIGluY3JlYXNlIHByaXplLgogICAgICAgIGxhc3RQbGF5ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGxhc3RXYWdlclRpbWVvdXRUaW1lc3RhbXAgPSBibG9jay50aW1lc3RhbXAgKyBjdXJyZW50VGltZW91dDsKICAgICAgICBwcml6ZVBvb2wgPSBwcml6ZVBvb2wuYWRkKHByaWNlLnN1YihmZWUpLnN1YihkaXZpZGVuZCkuc3ViKHdhZ2VyUG9vbFBhcnQpKTsKICAgICAgICAKICAgICAgICAvLyBFbWl0IGV2ZW50LgogICAgICAgIFBsYXkoZ2FtZUluZGV4LCB3YWdlckluZGV4LCBtc2cuc2VuZGVyLCBibG9jay50aW1lc3RhbXAsIGxhc3RXYWdlclRpbWVvdXRUaW1lc3RhbXAsIHByaXplUG9vbCk7CiAgICAgICAgCiAgICAgICAgLy8gU2VuZCB0aGUgZ2FtZSBzdGFydGVyIGRpdmlkZW5kLgogICAgICAgIF9zZW5kRnVuZHMoZ2FtZVN0YXJ0ZXIsIGRpdmlkZW5kKTsKICAgICAgICAKICAgICAgICAvLyBJbmNyZW1lbnQgdGhlIHdhZ2VyIGluZGV4LiBUaGlzIHdvbid0IG92ZXJmbG93IGJlZm9yZSB0aGUgaGVhdCBkZWF0aCBvZiB0aGUgdW5pdmVyc2UuCiAgICAgICAgd2FnZXJJbmRleCsrOwogICAgICAgIAogICAgICAgIC8vIFJlZnVuZCBhbnkgZXhjZXNzIEV0aGVyIHNlbnQuCiAgICAgICAgLy8gVGhpcyBzdWJ0cmFjdGlvbiBuZXZlciB1bmRlcmZsb3dzLCBhcyBtc2cudmFsdWUgaXMgZ3VhcmFudGVlZAogICAgICAgIC8vIHRvIGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBwcmljZS4KICAgICAgICB1aW50MjU2IGV4Y2VzcyA9IG1zZy52YWx1ZSAtIHByaWNlOwogICAgICAgIAogICAgICAgIGlmIChleGNlc3MgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXhjZXNzKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vLyBAbm90aWNlIFNwaWNlIHVwIHRoZSBwcml6ZSBwb29sLgogICAgLy8vIEBwYXJhbSBfZ2FtZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgZ2FtZSB0byBhZGQgc3BpY2UgdG8uCiAgICAvLy8gQHBhcmFtIG1lc3NhZ2UgQW4gb3B0aW9uYWwgbWVzc2FnZSB0byBiZSBzZW50IGFsb25nIHdpdGggdGhlIHNwaWNlLgogICAgZnVuY3Rpb24gc3BpY2VVcCh1aW50MjU2IF9nYW1lSW5kZXgsIHN0cmluZyBtZXNzYWdlKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGdhbWUgc2hvdWxkIGVuZC4gUHJvY2VzcyBwYXltZW50LgogICAgICAgIF9wcm9jZXNzR2FtZUVuZCgpOwogICAgICAgIAogICAgICAgIC8vIENoZWNrIHRoZSBnYW1lIGluZGV4LgogICAgICAgIHJlcXVpcmUoX2dhbWVJbmRleCA9PSBnYW1lSW5kZXgpOwogICAgCiAgICAgICAgLy8gR2FtZSBtdXN0IGJlIGxpdmUgb3IgdW5wYXVzZWQuCiAgICAgICAgcmVxdWlyZShnYW1lU3RhcnRlZCB8fCAhcGF1c2VkKTsKICAgICAgICAKICAgICAgICAvLyBGdW5kcyBtdXN0IGJlIHNlbnQuCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICAKICAgICAgICAvLyBBZGQgZnVuZHMgdG8gdGhlIHByaXplIHBvb2wuCiAgICAgICAgcHJpemVQb29sID0gcHJpemVQb29sLmFkZChtc2cudmFsdWUpOwogICAgICAgIAogICAgICAgIC8vIEVtaXQgZXZlbnQuCiAgICAgICAgU3BpY2VVcFByaXplUG9vbChnYW1lSW5kZXgsIG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgbWVzc2FnZSwgcHJpemVQb29sKTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgU2V0IHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgbmV4dCBnYW1lLgogICAgLy8vIEBwYXJhbSBfcHJpY2UgVGhlIHByaWNlIG9mIHdhZ2VycyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIC8vLyBAcGFyYW0gX3RpbWVvdXQgVGhlIHRpbWVvdXQgaW4gc2Vjb25kcyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIC8vLyBAcGFyYW0gX2ZpbmFsVGltZW91dCBUaGUgZmluYWwgdGltZW91dCBpbiBzZWNvbmRzIGZvcgogICAgLy8vIHRoZSBuZXh0IGdhbWUuCiAgICAvLy8gQHBhcmFtIF9udW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0IFRoZSBudW1iZXIgb2Ygd2FnZXJzCiAgICAvLy8gcmVxdWlyZWQgdG8gbW92ZSB0byB0aGUgZmluYWwgdGltZW91dCBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIGZ1bmN0aW9uIHNldE5leHRHYW1lKHVpbnQyNTYgX3ByaWNlLCB1aW50MjU2IF90aW1lb3V0LCB1aW50MjU2IF9maW5hbFRpbWVvdXQsIHVpbnQyNTYgX251bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIG5leHRQcmljZSA9IF9wcmljZTsKICAgICAgICBuZXh0VGltZW91dCA9IF90aW1lb3V0OwogICAgICAgIG5leHRGaW5hbFRpbWVvdXQgPSBfZmluYWxUaW1lb3V0OwogICAgICAgIG5leHROdW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0ID0gX251bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAgICAgTmV4dEdhbWUobmV4dFByaWNlLCBuZXh0VGltZW91dCwgbmV4dEZpbmFsVGltZW91dCwgbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgfSAKICAgIAogICAgLy8vIEBub3RpY2UgRW5kIHRoZSBnYW1lLiBQYXkgcHJpemUuCiAgICBmdW5jdGlvbiBlbmRHYW1lKCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX3Byb2Nlc3NHYW1lRW5kKCkpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBFbmQgdGhlIGdhbWUuIFBheSBwcml6ZS4KICAgIGZ1bmN0aW9uIF9wcm9jZXNzR2FtZUVuZCgpIGludGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmICghZ2FtZVN0YXJ0ZWQpIHsKICAgICAgICAgICAgLy8gTm8gZ2FtZSBpcyBzdGFydGVkLgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgCiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8PSBsYXN0V2FnZXJUaW1lb3V0VGltZXN0YW1wKSB7CiAgICAgICAgICAgIC8vIFRoZSBnYW1lIGhhcyBub3QgeWV0IGZpbmlzaGVkLgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcHJpemUuIEFueSBsZWZ0b3ZlciBmdW5kcyBmb3IgdGhlCiAgICAgICAgLy8gN3RoIHdhZ2VyIHByaXplIGlzIGFkZGVkIHRvIHRoZSBwcml6ZSBwb29sLgogICAgICAgIHVpbnQyNTYgcHJpemUgPSBwcml6ZVBvb2wuYWRkKHdhZ2VyUG9vbCk7CiAgICAgICAgCiAgICAgICAgLy8gVGhlIGdhbWUgaGFzIGZpbmlzaGVkLiBQYXkgdGhlIHByaXplIHRvIHRoZSBsYXN0IHBsYXllci4KICAgICAgICBfc2VuZEZ1bmRzKGxhc3RQbGF5ZXIsIHByaXplKTsKICAgICAgICAKICAgICAgICAvLyBFbWl0IGV2ZW50LgogICAgICAgIEVuZChnYW1lSW5kZXgsIHdhZ2VySW5kZXgsIGxhc3RQbGF5ZXIsIGxhc3RXYWdlclRpbWVvdXRUaW1lc3RhbXAsIHByaXplKTsKICAgICAgICAKICAgICAgICAvLyBSZXNldCB0aGUgZ2FtZS4KICAgICAgICBnYW1lU3RhcnRlZCA9IGZhbHNlOwogICAgICAgIGdhbWVTdGFydGVyID0gMHgwOwogICAgICAgIGxhc3RQbGF5ZXIgPSAweDA7CiAgICAgICAgbGFzdFdhZ2VyVGltZW91dFRpbWVzdGFtcCA9IDA7CiAgICAgICAgd2FnZXJJbmRleCA9IDA7CiAgICAgICAgcHJpemVQb29sID0gMDsKICAgICAgICB3YWdlclBvb2wgPSAwOwogICAgICAgIAogICAgICAgIC8vIEluY3JlbWVudCB0aGUgZ2FtZSBpbmRleC4gVGhpcyB3b24ndCBvdmVyZmxvdyBiZWZvcmUgdGhlIGhlYXQgZGVhdGggb2YgdGhlIHVuaXZlcnNlLgogICAgICAgIGdhbWVJbmRleCsrOwogICAgICAgIAogICAgICAgIC8vIEluZGljYXRlIGVuZGluZyB0aGUgZ2FtZSB3YXMgc3VjY2Vzc2Z1bC4KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
