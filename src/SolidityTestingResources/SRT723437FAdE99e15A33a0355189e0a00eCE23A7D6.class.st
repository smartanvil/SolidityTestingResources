Class {
	#name : #SRT723437FAdE99e15A33a0355189e0a00eCE23A7D6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT723437FAdE99e15A33a0355189e0a00eCE23A7D6 >> base64 [
	^ ''.
	

]
