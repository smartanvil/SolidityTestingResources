Class {
	#name : #SRT82a79ed5ab6f96047995579fab331a415727fccb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82a79ed5ab6f96047995579fab331a415727fccb >> base64 [
	^ ''.
	

]
