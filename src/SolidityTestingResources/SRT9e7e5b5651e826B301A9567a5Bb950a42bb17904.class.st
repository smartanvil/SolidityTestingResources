Class {
	#name : #SRT9e7e5b5651e826B301A9567a5Bb950a42bb17904,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e7e5b5651e826B301A9567a5Bb950a42bb17904 >> base64 [
	^ ''.
	

]
