Class {
	#name : #SRT14f37b574242d366558db61f3335289a5035c506,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT14f37b574242d366558db61f3335289a5035c506 >> base64 [
	^ ''.
	

]
