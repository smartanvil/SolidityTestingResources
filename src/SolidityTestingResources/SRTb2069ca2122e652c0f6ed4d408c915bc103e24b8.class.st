Class {
	#name : #SRTb2069ca2122e652c0f6ed4d408c915bc103e24b8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb2069ca2122e652c0f6ed4d408c915bc103e24b8 >> base64 [
	^ ''.
	

]
