Class {
	#name : #SRT402b92b00552409ed1ad83a74ff037ce1a3d7276,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT402b92b00552409ed1ad83a74ff037ce1a3d7276 >> base64 [
	^ ''.
	

]
