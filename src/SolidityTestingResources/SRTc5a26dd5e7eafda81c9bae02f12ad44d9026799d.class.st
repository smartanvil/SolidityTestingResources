Class {
	#name : #SRTc5a26dd5e7eafda81c9bae02f12ad44d9026799d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc5a26dd5e7eafda81c9bae02f12ad44d9026799d >> base64 [
	^ ''.
	

]
