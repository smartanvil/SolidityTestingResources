Class {
	#name : #SRT17f2892418d1765691c7e43c682db83b60b3ddd2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17f2892418d1765691c7e43c682db83b60b3ddd2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLyBpbXBvcnQgIi4vRVJDMjIzQmFzaWNUb2tlbi5zb2wiOwoKLy8gaW1wb3J0ICIuL1NhZmVNYXRoLnNvbCI7Ci8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9Ci8vIGVuZCBpbXBvcnQKCi8vIGltcG9ydCAiLi9FUkMyMjNCYXNpYy5zb2wiOwpjb250cmFjdCBFUkMyMjNCYXNpYyB7CiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlLCBieXRlcyBpbmRleGVkIGRhdGEpOwp9Ci8vIGVuZCBpbXBvcnQKCi8vIGltcG9ydCAiLi9FUkMyMjNSZWNlaXZpbmdDb250cmFjdC5zb2wiOwogLyoKICogQ29udHJhY3QgdGhhdCBpcyB3b3JraW5nIHdpdGggRVJDMjIzIHRva2VucwogKi8KY29udHJhY3QgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgewogIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKTsKfQovLyBlbmQgaW1wb3J0IAoKCmNvbnRyYWN0IEVSQzIyM0Jhc2ljVG9rZW4gaXMgRVJDMjIzQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogIC8vIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB1c2VyIG9yIGFub3RoZXIgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMgLgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHsKICAgIC8vIFN0YW5kYXJkIGZ1bmN0aW9uIHRyYW5zZmVyIHNpbWlsYXIgdG8gRVJDMjAgdHJhbnNmZXIgd2l0aCBubyBfZGF0YSAuCiAgICAvLyBBZGRlZCBkdWUgdG8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucyAuCiAgICB1aW50IGNvZGVMZW5ndGg7CgogICAgYXNzZW1ibHkgewogICAgICAvLyBSZXRyaWV2ZSB0aGUgc2l6ZSBvZiB0aGUgY29kZSBvbiB0YXJnZXQgYWRkcmVzcywgdGhpcyBuZWVkcyBhc3NlbWJseSAuCiAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUodG8pCiAgICB9CgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZCh2YWx1ZSk7CiAgICBpZiAoY29kZUxlbmd0aCA+IDApIHsKICAgICAgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgcmVjZWl2ZXIgPSBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCh0byk7CiAgICAgIHJlY2VpdmVyLnRva2VuRmFsbGJhY2sobXNnLnNlbmRlciwgdmFsdWUsIGRhdGEpOwogICAgfQogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhKTsKICB9CgogIC8vIFN0YW5kYXJkIGZ1bmN0aW9uIHRyYW5zZmVyIHNpbWlsYXIgdG8gRVJDMjAgdHJhbnNmZXIgd2l0aCBubyBfZGF0YSAuCiAgLy8gQWRkZWQgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMgLgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHsKICAgIHVpbnQgY29kZUxlbmd0aDsKCiAgICBhc3NlbWJseSB7CiAgICAgIC8vIFJldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5IC4KICAgICAgY29kZUxlbmd0aCA6PSBleHRjb2Rlc2l6ZSh0bykKICAgIH0KCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7CiAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgIGlmIChjb2RlTGVuZ3RoID4gMCkgewogICAgICBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCByZWNlaXZlciA9IEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0KHRvKTsKICAgICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgICByZWNlaXZlci50b2tlbkZhbGxiYWNrKG1zZy5zZW5kZXIsIHZhbHVlLCBlbXB0eSk7CiAgICB9CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUsIGVtcHR5KTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cn0KLy8gZW5kIGltcG9ydAoKY29udHJhY3QgUHJlVGdlRXhwZXJ0eSBpcyBFUkMyMjNCYXNpY1Rva2VuIHsKCiAgLy8gdG9rZW4gY29uc3RhbnRzCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlByZS1UR0UgRXhwZXJ0eSBUb2tlbiI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiUEVYWSI7CiAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogIC8vIHByZS10Z2UgdmFyaWFibGVzCiAgdWludDggcHVibGljIGJhc2ljUmF0ZSA9IDEwMDsKICB1aW50OCBwdWJsaWMgcHJlVGdlQm9udXMgPSA0NTsKICBhZGRyZXNzIHB1YmxpYyBwcmVUZ2VNYW5hZ2VyOwogIGFkZHJlc3MgcHVibGljIG11bHRpc2lnV2FsbGV0OwogIGJvb2wgcHVibGljIGlzQ2xvc2VkID0gZmFsc2U7CgogIC8vIGtlZXAgdHJhY2sgb2YgYnVybmVkIHRva2VucyBoZXJlCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBidXJuZWRUb2tlbnM7CiAgCiAgLy8gcHJlSUNPIGNvbnN0cnVjdG9yCiAgZnVuY3Rpb24gUHJlVGdlRXhwZXJ0eSgpIHsKICAgIG11bHRpc2lnV2FsbGV0ID0gMHg2ZmIyNTc3NzAwMGMwNjliZjRjMjUzYjlmNWY4ODZhNTE0NGEwMDIxOwogICAgcHJlVGdlTWFuYWdlciA9IDB4MDA5QTU1QTNjMTY5NTNBMzU5NDg0YWZEMjk5ZWJkQzQ0NDIwMEVkQjsKICB9CgogIC8vIGNvbnRyaWJ1dGUgZnVuY3Rpb24KICBmdW5jdGlvbigpIHBheWFibGUgewogICAgLy8gdGhyb3cgaWYgcHJlLXRnZSBpcyBjbG9zZWQKICAgIGlmIChpc0Nsb3NlZCkgdGhyb3c7CgogICAgdWludCBldGhlcnMgPSBtc2cudmFsdWU7CgogICAgLy8gY2FsY3VsYXRlIHRva2VucyBhbW91bnQgYW5kIHByZS10Z2UgYm9udXMKICAgIHVpbnQgdG9rZW5zID0gZXRoZXJzICogYmFzaWNSYXRlOwogICAgdWludCBib251cyA9IGV0aGVycyAqIHByZVRnZUJvbnVzOwoKICAgIC8vIGdlbmVyYXRlIG5ldyB0b2tlbnMKICAgIHVpbnQgc3VtID0gdG9rZW5zICsgYm9udXM7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBzdW07CiAgICB0b3RhbFN1cHBseSArPSBzdW07CgogICAgLy8gc2VuZCBldGhlcnMgdG8gc2VjdXJlIHdhbGxldAogICAgbXVsdGlzaWdXYWxsZXQudHJhbnNmZXIoZXRoZXJzKTsKICB9CgogIC8vIGFsbG93IHRvIGJ1cm4gcHJlLXRnZSB0b2tlbnMgaW4gb3JkZXIgdG8gdGVsZXBvcnQgdGhlbSB0byBuZXcgY29udHJhY3QKICBmdW5jdGlvbiBidXJuVG9rZW5zKHVpbnQgYW1vdW50KSB7CiAgICBpZiAoYW1vdW50ID4gYmFsYW5jZXNbbXNnLnNlbmRlcl0pIHRocm93OwoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGFtb3VudCk7CiAgICBidXJuZWRUb2tlbnNbbXNnLnNlbmRlcl0gPSBidXJuZWRUb2tlbnNbbXNnLnNlbmRlcl0uYWRkKGFtb3VudCk7CiAgfQoKICAvLyBhbGxvdyBjb250cmFjdCBtYW5hZ2VyIHRvIGRlY3JlYXNlIGJvbnVzIG92ZXIgdGltZQogIGZ1bmN0aW9uIGNoYW5nZUJvbnVzKHVpbnQ4IF9wcmVUZ2VCb251cykgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gcHJlVGdlTWFuYWdlcikgdGhyb3c7CgogICAgLy8gd2UgY2FuIG9ubHkgZGVjcmVhc2UgYm9udXMKICAgIGlmIChfcHJlVGdlQm9udXMgPiBwcmVUZ2VCb251cykgdGhyb3c7CgogICAgcHJlVGdlQm9udXMgPSBfcHJlVGdlQm9udXM7CiAgfQoKICAvLyBhbGxvdyBjb250cmFjdCBtYW5hZ2VyIHRvIGNsb3NlIHByZS10Z2UKICBmdW5jdGlvbiBjbG9zZSgpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IHByZVRnZU1hbmFnZXIpIHRocm93OwoKICAgIGlzQ2xvc2VkID0gdHJ1ZTsKICB9Cgp9'.
	

]
