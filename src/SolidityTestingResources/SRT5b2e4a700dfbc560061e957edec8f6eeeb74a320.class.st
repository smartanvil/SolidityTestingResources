Class {
	#name : #SRT5b2e4a700dfbc560061e957edec8f6eeeb74a320,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5b2e4a700dfbc560061e957edec8f6eeeb74a320 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKgogKiBBYnN0cmFjdCBUb2tlbiBTbWFydCBDb250cmFjdC4gIENvcHlyaWdodCAmIzE2OTsgMjAxNyBieSBBQkRLIENvbnN1bHRpbmcuCiAqIEF1dGhvcjogTWlraGFpbCBWbGFkaW1pcm92IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImY3OWE5ZTljOWY5NjllOWJkOTgxOWI5NjkzOWU5YTllODU5ODgxYjc5MDlhOTY5ZTliZDk5NDk4OWEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgogKi8KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKgogKiBFUkMtMjAgU3RhbmRhcmQgVG9rZW4gU21hcnQgQ29udHJhY3QgSW50ZXJmYWNlLgogKiBDb3B5cmlnaHQgJiMxNjk7IDIwMTbigJMyMDE3IGJ5IEFCREsgQ29uc3VsdGluZy4KICogQXV0aG9yOiBNaWtoYWlsIFZsYWRpbWlyb3YgPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZDRiOWJkYmZiY2I1YmRiOGZhYTJiOGI1YjBiZGI5YmRhNmJiYTI5NGIzYjliNWJkYjhmYWI3YmJiOSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+CiAqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xNjsKCi8qKgogKiBFUkMtMjAgc3RhbmRhcmQgdG9rZW4gaW50ZXJmYWNlLCBhcyBkZWZpbmVkCiAqIDxhIGhyZWY9Imh0dHA6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwIj5oZXJlPC9hPi4KICovCmNvbnRyYWN0IFRva2VuIHsKICAvKioKICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbi4KICAgKgogICAqIEByZXR1cm4gdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbgogICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKCiAgLyoqCiAgICogR2V0IG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGJlbG9uZ2luZyB0byBnaXZlbiBvd25lci4KICAgKgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZQogICAqICAgICAgICBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4KICAgKiAgICAgICAgcmVjaXBpZW50CiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLyoqCiAgICogQWxsb3cgZ2l2ZW4gc3BlbmRlciB0byB0cmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBhbGxvdyB0aGUgb3duZXIgb2YgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20KICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYWxsb3cgdG8gdHJhbnNmZXIKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW4gdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWxseSBhcHByb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIC8qKgogICAqIFRlbGwgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbQogICAqIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIHRvIGJlIHRyYW5zZmVycmVkCiAgICogICAgICAgIGJ5IHRoZSBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBnaXZlbiBzcGVuZGVyIGlzIGN1cnJlbnRseSBhbGxvd2VkIHRvIHRyYW5zZmVyCiAgICogICAgICAgICBmcm9tIGdpdmVuIG93bmVyCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlIChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIGZyb20gb25lIG93bmVyIHRvIGFub3RoZXIuCiAgICoKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBvZiB0aGUgb3duZXIsIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3Mgb2YgdGhlIG93bmVyLCB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCB0bwogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0cmFuc2ZlcnJlZAogICAqLwogIGV2ZW50IFRyYW5zZmVyIChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgLyoqCiAgICogTG9nZ2VkIHdoZW4gb3duZXIgYXBwcm92ZWQgaGlzIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZCBieSBzb21lIHNwZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX293bmVyIG93bmVyIHdobyBhcHByb3ZlZCBoaXMgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICogQHBhcmFtIF9zcGVuZGVyIHNwZW5kZXIgd2hvIHdlcmUgYWxsb3dlZCB0byB0cmFuc2ZlciB0aGUgdG9rZW5zIGJlbG9uZ2luZwogICAqICAgICAgICB0byB0aGUgb3duZXIKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgYmVsb25naW5nIHRvIHRoZSBvd25lciwgYXBwcm92ZWQgdG8gYmUKICAgKiAgICAgICAgdHJhbnNmZXJyZWQgYnkgdGhlIHNwZW5kZXIKICAgKi8KICBldmVudCBBcHByb3ZhbCAoCiAgICBhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLyoKICogU2FmZSBNYXRoIFNtYXJ0IENvbnRyYWN0LiAgQ29weXJpZ2h0ICYjMTY5OyAyMDE24oCTMjAxNyBieSBBQkRLIENvbnN1bHRpbmcuCiAqIEF1dGhvcjogTWlraGFpbCBWbGFkaW1pcm92IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImU0ODk4ZDhmOGM4NThkODhjYTkyODg4NTgwOGQ4OThkOTY4YjkyYTQ4Mzg5ODU4ZDg4Y2E4NzhiODkiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgogKi8KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogUHJvdmlkZXMgbWV0aG9kcyB0byBzYWZlbHkgYWRkLCBzdWJ0cmFjdCBhbmQgbXVsdGlwbHkgdWludDI1NiBudW1iZXJzLgogKi8KY29udHJhY3QgU2FmZU1hdGggewogIHVpbnQyNTYgY29uc3RhbnQgcHJpdmF0ZSBNQVhfVUlOVDI1NiA9CiAgICAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7CgogIC8qKgogICAqIEFkZCB0d28gdWludDI1NiB2YWx1ZXMsIHRocm93IGluIGNhc2Ugb2Ygb3ZlcmZsb3cuCiAgICoKICAgKiBAcGFyYW0geCBmaXJzdCB2YWx1ZSB0byBhZGQKICAgKiBAcGFyYW0geSBzZWNvbmQgdmFsdWUgdG8gYWRkCiAgICogQHJldHVybiB4ICsgeQogICAqLwogIGZ1bmN0aW9uIHNhZmVBZGQgKHVpbnQyNTYgeCwgdWludDI1NiB5KQogIGNvbnN0YW50IGludGVybmFsCiAgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICBhc3NlcnQgKHggPD0gTUFYX1VJTlQyNTYgLSB5KTsKICAgIHJldHVybiB4ICsgeTsKICB9CgogIC8qKgogICAqIFN1YnRyYWN0IG9uZSB1aW50MjU2IHZhbHVlIGZyb20gYW5vdGhlciwgdGhyb3cgaW4gY2FzZSBvZiB1bmRlcmZsb3cuCiAgICoKICAgKiBAcGFyYW0geCB2YWx1ZSB0byBzdWJ0cmFjdCBmcm9tCiAgICogQHBhcmFtIHkgdmFsdWUgdG8gc3VidHJhY3QKICAgKiBAcmV0dXJuIHggLSB5CiAgICovCiAgZnVuY3Rpb24gc2FmZVN1YiAodWludDI1NiB4LCB1aW50MjU2IHkpCiAgY29uc3RhbnQgaW50ZXJuYWwKICByZXR1cm5zICh1aW50MjU2IHopIHsKICAgIGFzc2VydCAoeCA+PSB5KTsKICAgIHJldHVybiB4IC0geTsKICB9CgogIC8qKgogICAqIE11bHRpcGx5IHR3byB1aW50MjU2IHZhbHVlcywgdGhyb3cgaW4gY2FzZSBvZiBvdmVyZmxvdy4KICAgKgogICAqIEBwYXJhbSB4IGZpcnN0IHZhbHVlIHRvIG11bHRpcGx5CiAgICogQHBhcmFtIHkgc2Vjb25kIHZhbHVlIHRvIG11bHRpcGx5CiAgICogQHJldHVybiB4ICogeQogICAqLwogIGZ1bmN0aW9uIHNhZmVNdWwgKHVpbnQyNTYgeCwgdWludDI1NiB5KQogIGNvbnN0YW50IGludGVybmFsCiAgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICBpZiAoeSA9PSAwKSByZXR1cm4gMDsgLy8gUHJldmVudCBkaXZpc2lvbiBieSB6ZXJvIGF0IHRoZSBuZXh0IGxpbmUKICAgIGFzc2VydCAoeCA8PSBNQVhfVUlOVDI1NiAvIHkpOwogICAgcmV0dXJuIHggKiB5OwogIH0KfQoKCi8qKgogKiBBYnN0cmFjdCBUb2tlbiBTbWFydCBDb250cmFjdCB0aGF0IGNvdWxkIGJlIHVzZWQgYXMgYSBiYXNlIGNvbnRyYWN0IGZvcgogKiBFUkMtMjAgdG9rZW4gY29udHJhY3RzLgogKi8KY29udHJhY3QgQWJzdHJhY3RUb2tlbiBpcyBUb2tlbiwgU2FmZU1hdGggewogIC8qKgogICAqIENyZWF0ZSBuZXcgQWJzdHJhY3QgVG9rZW4gY29udHJhY3QuCiAgICovCiAgZnVuY3Rpb24gQWJzdHJhY3RUb2tlbiAoKSB7CiAgICAvLyBEbyBub3RoaW5nCiAgfQoKICAvKioKICAgKiBHZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlCiAgICogICAgICAgIG93bmVyIG9mCiAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YgKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBhY2NvdW50cyBbX293bmVyXTsKICB9CgogIC8qKgogICAqIFRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBtZXNzYWdlIHNlbmRlciB0byBnaXZlbiByZWNpcGllbnQuCiAgICoKICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIHRvIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlciB0byB0aGUgb3duZXIgb2YgZ2l2ZW4gYWRkcmVzcwogICAqIEByZXR1cm4gdHJ1ZSBpZiB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyIChhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGFjY291bnRzIFttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOwogICAgaWYgKF92YWx1ZSA+IDAgJiYgbXNnLnNlbmRlciAhPSBfdG8pIHsKICAgICAgYWNjb3VudHMgW21zZy5zZW5kZXJdID0gc2FmZVN1YiAoYWNjb3VudHMgW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICBhY2NvdW50cyBbX3RvXSA9IHNhZmVBZGQgKGFjY291bnRzIFtfdG9dLCBfdmFsdWUpOwogICAgfQogICAgVHJhbnNmZXIgKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4KICAgKiAgICAgICAgcmVjaXBpZW50CiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYWxsb3dhbmNlcyBbX2Zyb21dW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7CiAgICBpZiAoYWNjb3VudHMgW19mcm9tXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOwoKICAgIGFsbG93YW5jZXMgW19mcm9tXVttc2cuc2VuZGVyXSA9CiAgICAgIHNhZmVTdWIgKGFsbG93YW5jZXMgW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKCiAgICBpZiAoX3ZhbHVlID4gMCAmJiBfZnJvbSAhPSBfdG8pIHsKICAgICAgYWNjb3VudHMgW19mcm9tXSA9IHNhZmVTdWIgKGFjY291bnRzIFtfZnJvbV0sIF92YWx1ZSk7CiAgICAgIGFjY291bnRzIFtfdG9dID0gc2FmZUFkZCAoYWNjb3VudHMgW190b10sIF92YWx1ZSk7CiAgICB9CiAgICBUcmFuc2ZlciAoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQWxsb3cgZ2l2ZW4gc3BlbmRlciB0byB0cmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBhbGxvdyB0aGUgb3duZXIgb2YgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20KICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYWxsb3cgdG8gdHJhbnNmZXIKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW4gdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWxseSBhcHByb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dhbmNlcyBbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwgKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogVGVsbCBob3cgbWFueSB0b2tlbnMgZ2l2ZW4gc3BlbmRlciBpcyBjdXJyZW50bHkgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tCiAgICogZ2l2ZW4gb3duZXIuCiAgICoKICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gZ2V0IG51bWJlciBvZiB0b2tlbnMgYWxsb3dlZCB0byBiZSB0cmFuc2ZlcnJlZAogICAqICAgICAgICBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgYnkgdGhlIG93bmVyIG9mCiAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIKICAgKiAgICAgICAgIGZyb20gZ2l2ZW4gb3duZXIKICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UgKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudAogIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dhbmNlcyBbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBNYXBwaW5nIGZyb20gYWRkcmVzc2VzIG9mIHRva2VuIGhvbGRlcnMgdG8gdGhlIG51bWJlcnMgb2YgdG9rZW5zIGJlbG9uZ2luZwogICAqIHRvIHRoZXNlIHRva2VuIGhvbGRlcnMuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBhY2NvdW50czsKCiAgLyoqCiAgICogTWFwcGluZyBmcm9tIGFkZHJlc3NlcyBvZiB0b2tlbiBob2xkZXJzIHRvIHRoZSBtYXBwaW5nIG9mIGFkZHJlc3NlcyBvZgogICAqIHNwZW5kZXJzIHRvIHRoZSBhbGxvd2FuY2VzIHNldCBieSB0aGVzZSB0b2tlbiBob2xkZXJzIHRvIHRoZXNlIHNwZW5kZXJzLgogICAqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHJpdmF0ZSBhbGxvd2FuY2VzOwp9CgoKLyoqCiAqIElOUyB0b2tlbiBzbWFydCBjb250cmFjdC4KICovCmNvbnRyYWN0IElOU1Rva2VuIGlzIEFic3RyYWN0VG9rZW4gewogIC8qKgogICAqIE1heGltdW0gYWxsb3dlZCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uLgogICAqLwogIHVpbnQyNTYgY29uc3RhbnQgTUFYX1RPS0VOX0NPVU5UID0KICAgIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgLyoqCiAgICogQWRkcmVzcyBvZiB0aGUgb3duZXIgb2YgdGhpcyBzbWFydCBjb250cmFjdC4KICAgKi8KICBhZGRyZXNzIHByaXZhdGUgb3duZXI7CgogIC8qKgogICAqIEN1cnJlbnQgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbi4KICAgKi8KICB1aW50MjU2IHRva2VuQ291bnQgPSAwOwoKICAvKioKICAgKiBUcnVlIGlmIHRva2VucyB0cmFuc2ZlcnMgYXJlIGN1cnJlbnRseSBmcm96ZW4sIGZhbHNlIG90aGVyd2lzZS4KICAgKi8KICBib29sIGZyb3plbiA9IGZhbHNlOwogIAogIC8qKgogICAqIENvdW50ZXIgb2YgdG90YWwgZnVuZHMgY29sbGVjdGVkLCBpbiB3ZWkKICAqLwogIHVpbnQgcHVibGljIHRvdGFsQ29sbGVjdGVkID0gMDsKCiAgLyoqCiAgICogQ3JlYXRlIG5ldyBJTlMgdG9rZW4gc21hcnQgY29udHJhY3QgYW5kIG1ha2UgbXNnLnNlbmRlciB0aGUKICAgKiBvd25lciBvZiB0aGlzIHNtYXJ0IGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIElOU1Rva2VuICgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEdldCB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uLgogICAqCiAgICogQHJldHVybiB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uCiAgICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkgKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHsKICAgIHJldHVybiB0b2tlbkNvdW50OwogIH0KCiAgLyoqCiAgICogR2V0IG5hbWUgb2YgdGhpcyB0b2tlbi4KICAgKgogICAqIEByZXR1cm4gbmFtZSBvZiB0aGlzIHRva2VuCiAgICovCiAgZnVuY3Rpb24gbmFtZSAoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgcmVzdWx0KSB7CiAgICByZXR1cm4gIklOUyBUb2tlbiI7CiAgfQoKICAvKioKICAgKiBHZXQgc3ltYm9sIG9mIHRoaXMgdG9rZW4uCiAgICoKICAgKiBAcmV0dXJuIHN5bWJvbCBvZiB0aGlzIHRva2VuCiAgICovCiAgZnVuY3Rpb24gc3ltYm9sICgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyByZXN1bHQpIHsKICAgIHJldHVybiAiSU5TIjsKICB9CgogIC8qKgogICAqIEdldCBudW1iZXIgb2YgZGVjaW1hbHMgZm9yIHRoaXMgdG9rZW4uCiAgICoKICAgKiBAcmV0dXJuIG51bWJlciBvZiBkZWNpbWFscyBmb3IgdGhpcyB0b2tlbgogICAqLwogIGZ1bmN0aW9uIGRlY2ltYWxzICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4IHJlc3VsdCkgewogICAgcmV0dXJuIDEwOwogIH0KCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoZnJvemVuKSByZXR1cm4gZmFsc2U7CiAgICBlbHNlIHJldHVybiBBYnN0cmFjdFRva2VuLnRyYW5zZmVyIChfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbgogICAqICAgICAgICByZWNpcGllbnQKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20gKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGZyb3plbikgcmV0dXJuIGZhbHNlOwogICAgZWxzZSByZXR1cm4gQWJzdHJhY3RUb2tlbi50cmFuc2ZlckZyb20gKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBDaGFuZ2UgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tIG1lc3NhZ2UKICAgKiBzcGVuZGVyLiAgSW4gb3JkZXIgdG8gcHJldmVudCBkb3VibGUgc3BlbmRpbmcgb2YgYWxsb3dhbmNlLCB0aGlzIG1ldGhvZAogICAqIHJlY2VpdmVzIGFzc3VtZWQgY3VycmVudCBhbGxvd2FuY2UgdmFsdWUgYXMgYW4gYXJndW1lbnQuICBJZiBhY3R1YWwKICAgKiBhbGxvd2FuY2UgZGlmZmVycyBmcm9tIGFuIGFzc3VtZWQgb25lLCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgZmFsc2UuCiAgICoKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBhbGxvdyB0aGUgb3duZXIgb2YgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20KICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgKiBAcGFyYW0gX2N1cnJlbnRWYWx1ZSBhc3N1bWVkIG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGFsbG93ZWQgdG8gYmUKICAgKiAgICAgICAgdHJhbnNmZXJyZWQKICAgKiBAcGFyYW0gX25ld1ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYWxsb3cgdG8gdHJhbnNmZXIKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW4gdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWxseSBhcHByb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfY3VycmVudFZhbHVlLCB1aW50MjU2IF9uZXdWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGFsbG93YW5jZSAobXNnLnNlbmRlciwgX3NwZW5kZXIpID09IF9jdXJyZW50VmFsdWUpCiAgICAgIHJldHVybiBhcHByb3ZlIChfc3BlbmRlciwgX25ld1ZhbHVlKTsKICAgIGVsc2UgcmV0dXJuIGZhbHNlOwogIH0KCiAgLyoqCiAgICogQ3JlYXRlIF92YWx1ZSBuZXcgdG9rZW5zIGFuZCBnaXZlIG5ldyBjcmVhdGVkIHRva2VucyB0byBtc2cuc2VuZGVyLgogICAqIE1heSBvbmx5IGJlIGNhbGxlZCBieSBzbWFydCBjb250cmFjdCBvd25lci4KICAgKgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byBjcmVhdGUKICAgKiBAcGFyYW0gX2NvbGxlY3RlZCB0b3RhbCBhbW91bnRzIG9mIGZ1bmQgY29sbGVjdGVkIGZvciB0aGlzIGlzc3VhbmNlLCBpbiB3ZWkKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgY3JlYXRlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIGNyZWF0ZVRva2VucyAodWludDI1NiBfdmFsdWUsIHVpbnQgX2NvbGxlY3RlZCkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgaWYgKF92YWx1ZSA+IDApIHsKICAgICAgaWYgKF92YWx1ZSA+IHNhZmVTdWIgKE1BWF9UT0tFTl9DT1VOVCwgdG9rZW5Db3VudCkpIHJldHVybiBmYWxzZTsKICAgICAgYWNjb3VudHMgW21zZy5zZW5kZXJdID0gc2FmZUFkZCAoYWNjb3VudHMgW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICB0b2tlbkNvdW50ID0gc2FmZUFkZCAodG9rZW5Db3VudCwgX3ZhbHVlKTsKICAgICAgdG90YWxDb2xsZWN0ZWQgPSBzYWZlQWRkKHRvdGFsQ29sbGVjdGVkLCBfY29sbGVjdGVkKTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIFNldCBuZXcgb3duZXIgZm9yIHRoZSBzbWFydCBjb250cmFjdC4KICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgc21hcnQgY29udHJhY3Qgb3duZXIuCiAgICoKICAgKiBAcGFyYW0gX25ld093bmVyIGFkZHJlc3Mgb2YgbmV3IG93bmVyIG9mIHRoZSBzbWFydCBjb250cmFjdAogICAqLwogIGZ1bmN0aW9uIHNldE93bmVyIChhZGRyZXNzIF9uZXdPd25lcikgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgb3duZXIgPSBfbmV3T3duZXI7CiAgfQoKICAvKioKICAgKiBGcmVlemUgdG9rZW4gdHJhbnNmZXJzLgogICAqIE1heSBvbmx5IGJlIGNhbGxlZCBieSBzbWFydCBjb250cmFjdCBvd25lci4KICAgKi8KICBmdW5jdGlvbiBmcmVlemVUcmFuc2ZlcnMgKCkgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgaWYgKCFmcm96ZW4pIHsKICAgICAgZnJvemVuID0gdHJ1ZTsKICAgICAgRnJlZXplICgpOwogICAgfQogIH0KCiAgLyoqCiAgICogVW5mcmVlemUgdG9rZW4gdHJhbnNmZXJzLgogICAqIE1heSBvbmx5IGJlIGNhbGxlZCBieSBzbWFydCBjb250cmFjdCBvd25lci4KICAgKi8KICBmdW5jdGlvbiB1bmZyZWV6ZVRyYW5zZmVycyAoKSB7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyKTsKCiAgICBpZiAoZnJvemVuKSB7CiAgICAgIGZyb3plbiA9IGZhbHNlOwogICAgICBVbmZyZWV6ZSAoKTsKICAgIH0KICB9CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VuIHRyYW5zZmVycyB3ZXJlIGZyb3plbi4KICAgKi8KICBldmVudCBGcmVlemUgKCk7CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VuIHRyYW5zZmVycyB3ZXJlIHVuZnJvemVuLgogICAqLwogIGV2ZW50IFVuZnJlZXplICgpOwp9'.
	

]
