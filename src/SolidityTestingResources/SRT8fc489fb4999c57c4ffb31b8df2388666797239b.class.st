Class {
	#name : #SRT8fc489fb4999c57c4ffb31b8df2388666797239b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fc489fb4999c57c4ffb31b8df2388666797239b >> base64 [
	^ ''.
	

]
