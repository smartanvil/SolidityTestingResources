Class {
	#name : #SRTf5ab0e74a8ab55f736a1954c4716e9669ea59a18,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5ab0e74a8ab55f736a1954c4716e9669ea59a18 >> base64 [
	^ ''.
	

]
