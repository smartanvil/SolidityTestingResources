Class {
	#name : #SRT7ef8873220958ea400d505a9c92d6ae24f34d55e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7ef8873220958ea400d505a9c92d6ae24f34d55e >> base64 [
	^ ''.
	

]
