Class {
	#name : #SRT0f33bb20a282a7649c7b3aff644f084a9348e933,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f33bb20a282a7649c7b3aff644f084a9348e933 >> base64 [
	^ ''.
	

]
