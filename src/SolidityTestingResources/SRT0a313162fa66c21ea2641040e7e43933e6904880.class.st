Class {
	#name : #SRT0a313162fa66c21ea2641040e7e43933e6904880,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a313162fa66c21ea2641040e7e43933e6904880 >> base64 [
	^ ''.
	

]
