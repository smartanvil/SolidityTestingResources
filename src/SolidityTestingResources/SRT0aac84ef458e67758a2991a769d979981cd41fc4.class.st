Class {
	#name : #SRT0aac84ef458e67758a2991a769d979981cd41fc4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0aac84ef458e67758a2991a769d979981cd41fc4 >> base64 [
	^ ''.
	

]
