Class {
	#name : #SRT3400696045f706f3309927cb8fdf63f07b616c6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3400696045f706f3309927cb8fdf63f07b616c6f >> base64 [
	^ ''.
	

]
