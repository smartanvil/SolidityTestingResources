Class {
	#name : #SRT7fce2856899a6806eeef70807985fc7554c66340,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7fce2856899a6806eeef70807985fc7554c66340 >> base64 [
	^ ''.
	

]
