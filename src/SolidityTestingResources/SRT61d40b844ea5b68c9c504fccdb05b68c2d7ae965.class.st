Class {
	#name : #SRT61d40b844ea5b68c9c504fccdb05b68c2d7ae965,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61d40b844ea5b68c9c504fccdb05b68c2d7ae965 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovLyBUdXJuIHRoZSB1c2FnZSBvZiBjYWxsY29kZQpjb250cmFjdCBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKY29udHJhY3QgQ3JlYXRvckVuYWJsZWQgewogICAgYWRkcmVzcyBwdWJsaWMgY3JlYXRvciA9IDB4MDsKCiAgICBtb2RpZmllciBvbmx5Q3JlYXRvcigpIHsgcmVxdWlyZShtc2cuc2VuZGVyPT1jcmVhdG9yKTsgXzsgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZUNyZWF0b3IoYWRkcmVzcyBfdG8pIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgY3JlYXRvciA9IF90bzsKICAgIH0KfQoKLy8gRVJDMjAgc3RhbmRhcmQKY29udHJhY3QgU3RkVG9rZW4gaXMgU2FmZU1hdGggewoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7CgoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcmV0dXJucyhib29sKSB7CiAgICAgIHJlcXVpcmUoMHgwIT1fdG8pOwoKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sX3ZhbHVlKTsKCiAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sKSB7CiAgICAgIHJlcXVpcmUoMHgwIT1fdG8pOwoKICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSxfdmFsdWUpOwogICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSxfdmFsdWUpOwogICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0sX3ZhbHVlKTsKCiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBfc2l6ZSkgewogICAgICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSBfc2l6ZSArIDQpOwogICAgICBfOwogICAgfQp9Cgpjb250cmFjdCBJR29sZEZlZSB7CiAgICBmdW5jdGlvbiBjYWxjdWxhdGVGZWUoYWRkcmVzcyBfc2VuZGVyLCBib29sIF9pc01pZ3JhdGlvblN0YXJ0ZWQsIGJvb2wgX2lzTWlncmF0aW9uRmluaXNoZWQsIHVpbnQgX21udHBCYWxhbmNlLCB1aW50IF92YWx1ZSkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCk7Cn0KCmNvbnRyYWN0IEdvbGRGZWUgaXMgQ3JlYXRvckVuYWJsZWQgewoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBleGNlcHRBZGRyZXNzZXM7CgogICAgZnVuY3Rpb24gR29sZEZlZSgpIHsKICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNaW4odWludCBvdXQpcmV0dXJucyAodWludCkgewogICAgICAgIC8vIDAuMDAyIEdPTEQgaXMgbWluIGZlZQogICAgICAgIHVpbnQgbWluRmVlID0gKDIgKiAxIGV0aGVyKSAvIDEwMDA7CiAgICAgICAgaWYgKG91dCA8IG1pbkZlZSkgewogICAgICAgICAgICAgcmV0dXJuIG1pbkZlZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNYXgodWludCBvdXQpcmV0dXJucyAodWludCkgewogICAgICAgIC8vIDAuMDIgR09MRCBpcyBtYXggZmVlCiAgICAgICAgdWludCBtYXhGZWUgPSAoMiAqIDEgZXRoZXIpIC8gMTAwOwogICAgICAgIGlmIChvdXQgPj0gbWF4RmVlKSB7CiAgICAgICAgICAgICByZXR1cm4gbWF4RmVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUZlZShhZGRyZXNzIF9zZW5kZXIsIGJvb2wgX2lzTWlncmF0aW9uU3RhcnRlZCwgYm9vbCBfaXNNaWdyYXRpb25GaW5pc2hlZCwgdWludCBfbW50cEJhbGFuY2UsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KQogICAgewogICAgICAgLy9pZiB0aGlzIGlzIGFuIGV4Y2FwdGlvbmFsIGFkZHJlc3MKICAgICAgIGlmIChleGNlcHRBZGRyZXNzZXNbX3NlbmRlcl0pIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICB9CgogICAgICAgIC8vIFdoZW4gbWlncmF0aW9uIHByb2Nlc3MgaXMgZmluaXNoZWQgKDEgeWVhciBmcm9tIEdvbGRtaW50IGJsb2NrY2hhaW4gbGF1bmNoKSwgdGhlbiB0cmFuc2FjdGlvbiBmZWUgaXMgMSUgR09MRC4KICAgICAgICBpZiAoX2lzTWlncmF0aW9uRmluaXNoZWQpIHsKICAgICAgICAgICAgIHJldHVybiAoX3ZhbHVlIC8gMTAwKTsKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZSBzZW5kZXIgaG9sZHMgMCBNTlRQLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBmZWUgaXMgMSUgR09MRC4KCiAgICAgICAgLy8gSWYgdGhlIHNlbmRlciBob2xkcyBhdCBsZWFzdCAxMCBNTlRQLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBmZWUgaXMgMC4zMzMzMzMlIEdPTEQsCiAgICAgICAgLy8gYnV0IG5vdCBsZXNzIHRoYW4gMC4wMDIgTU5UUAoKICAgICAgICAvLyBJZiB0aGUgc2VuZGVyIGhvbGRzIGF0IGxlYXN0IDEwMDAgTU5UUCwgdGhlbiB0aGUgdHJhbnNhY3Rpb24gZmVlIGlzIDAuMDMzMzMzJSBHT0xELAogICAgICAgIC8vIGJ1dCBub3QgbGVzcyB0aGFuIDAuMDAyIE1OVFAKCiAgICAgICAgLy8gSWYgdGhlIHNlbmRlciBob2xkcyBhdCBsZWFzdCAxMDAwMCBNTlRQLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBmZWUgaXMgMC4wMzMzMzMzJSBHT0xELAogICAgICAgIC8vIGJ1dCBub3QgbW9yZSB0aGFuIDAuMDIgTU5UUAogICAgICAgIGlmIChfbW50cEJhbGFuY2UgPj0gKDEwMDAwICogMSBldGhlcikpIHsKICAgICAgICAgICAgIHJldHVybiBnZXRNYXgoKF92YWx1ZSAvIDEwMCkgLyAzMCk7CiAgICAgICAgfQogICAgICAgIGlmIChfbW50cEJhbGFuY2UgPj0gKDEwMDAgKiAxIGV0aGVyKSkgewogICAgICAgICAgICAgcmV0dXJuIGdldE1pbigoX3ZhbHVlIC8gMTAwKSAvIDMwKTsKICAgICAgICB9CiAgICAgICAgaWYgKF9tbnRwQmFsYW5jZSA+PSAoMTAgKiAxIGV0aGVyKSkgewogICAgICAgICAgICAgcmV0dXJuIGdldE1pbigoX3ZhbHVlIC8gMTAwKSAvIDMpOwogICAgICAgIH0KCiAgICAgICAgLy8gMSUKICAgICAgICByZXR1cm4gZ2V0TWluKF92YWx1ZSAvIDEwMCk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkRXhjZXB0QWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIGV4Y2VwdEFkZHJlc3Nlc1tfYWRkcmVzc10gPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZUV4Y2VwdEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlDcmVhdG9yIHsKICAgICAgICBleGNlcHRBZGRyZXNzZXNbX2FkZHJlc3NdID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gaXNBZGRyZXNzRXhjZXB0KGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gZXhjZXB0QWRkcmVzc2VzW19hZGRyZXNzXTsKICAgIH0KfQoKY29udHJhY3QgR29sZCBpcyBTdGRUb2tlbiwgQ3JlYXRvckVuYWJsZWQgewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJHb2xkTWludCBHT0xEIGNyeXB0b2Fzc2V0IjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkdPTEQiOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgLy8gdGhpcyBpcyB1c2VkIHRvIHNlbmQgZmVlcyAodGhhdCBpcyB0aGVuIGRpc3RyaWJ1dGVkIGFzIHJld2FyZHMpCiAgICBhZGRyZXNzIHB1YmxpYyBtaWdyYXRpb25BZGRyZXNzID0gMHgwOwogICAgYWRkcmVzcyBwdWJsaWMgc3RvcmFnZUNvbnRyb2xsZXJBZGRyZXNzID0gMHgwOwoKICAgIGFkZHJlc3MgcHVibGljIGdvbGRtaW50VGVhbUFkZHJlc3MgPSAweDA7CiAgICBJTU5UUCBwdWJsaWMgbW50cFRva2VuOwogICAgSUdvbGRGZWUgcHVibGljIGdvbGRGZWU7CgoKICAgIGJvb2wgcHVibGljIHRyYW5zZmVyc0xvY2tlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgY29udHJhY3RMb2NrZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIG1pZ3JhdGlvblN0YXJ0ZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIG1pZ3JhdGlvbkZpbmlzaGVkID0gZmFsc2U7CgogICAgdWludCBwdWJsaWMgdG90YWxJc3N1ZWQgPSAwOwogICAgdWludCBwdWJsaWMgdG90YWxCdXJudCA9IDA7CgogICAgLy8gTW9kaWZpZXJzOgogICAgbW9kaWZpZXIgb25seU1pZ3JhdGlvbigpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pZ3JhdGlvbkFkZHJlc3MpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5TWlncmF0aW9uT3JTdG9yYWdlQ29udHJvbGxlcigpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pZ3JhdGlvbkFkZHJlc3MgfHwgbXNnLnNlbmRlciA9PSBzdG9yYWdlQ29udHJvbGxlckFkZHJlc3MpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5Q3JlYXRvck9yU3RvcmFnZUNvbnRyb2xsZXIoKSB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcmVhdG9yIHx8IG1zZy5zZW5kZXIgPT0gc3RvcmFnZUNvbnRyb2xsZXJBZGRyZXNzKTsgXzsgfQogICAgbW9kaWZpZXIgb25seUlmVW5sb2NrZWQoKSB7IHJlcXVpcmUoIXRyYW5zZmVyc0xvY2tlZCk7IF87IH0KCiAgICAvLyBGdW5jdGlvbnM6CiAgICBmdW5jdGlvbiBHb2xkKGFkZHJlc3MgX21udHBDb250cmFjdEFkZHJlc3MsIGFkZHJlc3MgX2dvbGRtaW50VGVhbUFkZHJlc3MsIGFkZHJlc3MgX2dvbGRGZWVBZGRyZXNzKSBwdWJsaWMgewogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwoKICAgICAgICBtbnRwVG9rZW4gPSBJTU5UUChfbW50cENvbnRyYWN0QWRkcmVzcyk7CiAgICAgICAgZ29sZG1pbnRUZWFtQWRkcmVzcyA9IF9nb2xkbWludFRlYW1BZGRyZXNzOwogICAgICAgIGdvbGRGZWUgPSBJR29sZEZlZShfZ29sZEZlZUFkZHJlc3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENyZWF0b3IoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlDcmVhdG9yIHsKICAgICAgIGNyZWF0b3IgPSBfYWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2NrQ29udHJhY3QoYm9vbCBfY29udHJhY3RMb2NrZWQpIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICBjb250cmFjdExvY2tlZCA9IF9jb250cmFjdExvY2tlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRTdG9yYWdlQ29udHJvbGxlckNvbnRyYWN0QWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIHN0b3JhZ2VDb250cm9sbGVyQWRkcmVzcyA9IF9hZGRyZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1pZ3JhdGlvbkNvbnRyYWN0QWRkcmVzcyhhZGRyZXNzIF9taWdyYXRpb25BZGRyZXNzKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIG1pZ3JhdGlvbkFkZHJlc3MgPSBfbWlncmF0aW9uQWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRHb2xkbWludFRlYW1BZGRyZXNzKGFkZHJlc3MgX3RlYW1BZGRyZXNzKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIGdvbGRtaW50VGVhbUFkZHJlc3MgPSBfdGVhbUFkZHJlc3M7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0R29sZEZlZUFkZHJlc3MoYWRkcmVzcyBfZ29sZEZlZUFkZHJlc3MpIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgZ29sZEZlZSA9IElHb2xkRmVlKF9nb2xkRmVlQWRkcmVzcyk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfd2hvLCB1aW50IF90b2tlbnMpIHB1YmxpYyBvbmx5Q3JlYXRvck9yU3RvcmFnZUNvbnRyb2xsZXIgewogICAgICAgIHJlcXVpcmUoIWNvbnRyYWN0TG9ja2VkKTsKCiAgICAgICAgYmFsYW5jZXNbX3dob10gPSBzYWZlQWRkKGJhbGFuY2VzW193aG9dLF90b2tlbnMpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSxfdG9rZW5zKTsKICAgICAgICB0b3RhbElzc3VlZCA9IHNhZmVBZGQodG90YWxJc3N1ZWQsX3Rva2Vucyk7CgogICAgICAgIFRyYW5zZmVyKDB4MCwgX3dobywgX3Rva2Vucyk7CiAgICB9CgogICAgZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF93aG8sIHVpbnQgX3Rva2VucykgcHVibGljIG9ubHlNaWdyYXRpb25PclN0b3JhZ2VDb250cm9sbGVyIHsKICAgICAgICByZXF1aXJlKCFjb250cmFjdExvY2tlZCk7CiAgICAgICAgYmFsYW5jZXNbX3dob10gPSBzYWZlU3ViKGJhbGFuY2VzW193aG9dLF90b2tlbnMpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSxfdG9rZW5zKTsKICAgICAgICB0b3RhbEJ1cm50ID0gc2FmZUFkZCh0b3RhbEJ1cm50LF90b2tlbnMpOwogICAgfQoKICAgIC8vIHRoZXJlIGlzIG5vIHdheSB0byByZXZlcnQgdGhhdAogICAgZnVuY3Rpb24gc3RhcnRNaWdyYXRpb24oKSBwdWJsaWMgb25seU1pZ3JhdGlvbiB7CiAgICAgICAgcmVxdWlyZShmYWxzZSA9PSBtaWdyYXRpb25TdGFydGVkKTsKICAgICAgICBtaWdyYXRpb25TdGFydGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyB0aGVyZSBpcyBubyB3YXkgdG8gcmV2ZXJ0IHRoYXQKICAgIGZ1bmN0aW9uIGZpbmlzaE1pZ3JhdGlvbigpIHB1YmxpYyBvbmx5TWlncmF0aW9uIHsKICAgICAgICByZXF1aXJlKHRydWUgPT0gbWlncmF0aW9uU3RhcnRlZCk7CgogICAgICAgIG1pZ3JhdGlvbkZpbmlzaGVkID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2NrVHJhbnNmZXIoYm9vbCBfbG9jaykgcHVibGljIG9ubHlNaWdyYXRpb24gewogICAgICAgIHRyYW5zZmVyc0xvY2tlZCA9IF9sb2NrOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG9ubHlJZlVubG9ja2VkIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHJldHVybnMoYm9vbCkgewoKICAgICAgICB1aW50IHlvdXJDdXJyZW50TW50cEJhbGFuY2UgPSBtbnRwVG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwoKICAgICAgICAvLyB5b3UgY2FuIHRyYW5zZmVyIGlmIGZlZSBpcyBaRVJPCiAgICAgICAgdWludCBmZWUgPSBnb2xkRmVlLmNhbGN1bGF0ZUZlZShtc2cuc2VuZGVyLCBtaWdyYXRpb25TdGFydGVkLCBtaWdyYXRpb25GaW5pc2hlZCwgeW91ckN1cnJlbnRNbnRwQmFsYW5jZSwgX3ZhbHVlKTsKICAgICAgICB1aW50IHNlbmRUaGlzID0gX3ZhbHVlOwogICAgICAgIGlmICgwICE9IGZlZSkgewogICAgICAgICAgICAgc2VuZFRoaXMgPSBzYWZlU3ViKF92YWx1ZSxmZWUpOwoKICAgICAgICAgICAgIC8vIDEuVHJhbnNmZXIgZmVlCiAgICAgICAgICAgICAvLyBBIC0+IHJld2FyZHMgYWNjb3VudAogICAgICAgICAgICAgLy8KICAgICAgICAgICAgIC8vIEVhY2ggR09MRCB0b2tlbiB0cmFuc2ZlciBzaG91bGQgc2VuZCB0cmFuc2FjdGlvbiBmZWUgdG8KICAgICAgICAgICAgIC8vIEdvbGRtaW50TWlncmF0aW9uIGNvbnRyYWN0IGlmIE1pZ3JhdGlvbiBwcm9jZXNzIGlzIG5vdCBzdGFydGVkLgogICAgICAgICAgICAgLy8gR29sZG1pbnQgdGVhbSBpZiBNaWdyYXRpb24gcHJvY2VzcyBpcyBzdGFydGVkLgogICAgICAgICAgICAgaWYgKG1pZ3JhdGlvblN0YXJ0ZWQpIHsKICAgICAgICAgICAgICAgICAgc3VwZXIudHJhbnNmZXIoZ29sZG1pbnRUZWFtQWRkcmVzcywgZmVlKTsKICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHN1cGVyLnRyYW5zZmVyKG1pZ3JhdGlvbkFkZHJlc3MsIGZlZSk7CiAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyAyLlRyYW5zZmVyCiAgICAgICAgLy8gQSAtPiBCCiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgc2VuZFRoaXMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5SWZVbmxvY2tlZCByZXR1cm5zKGJvb2wpIHsKCiAgICAgICAgdWludCB5b3VyQ3VycmVudE1udHBCYWxhbmNlID0gbW50cFRva2VuLmJhbGFuY2VPZihfZnJvbSk7CgogICAgICAgIHVpbnQgZmVlID0gZ29sZEZlZS5jYWxjdWxhdGVGZWUobXNnLnNlbmRlciwgbWlncmF0aW9uU3RhcnRlZCwgbWlncmF0aW9uRmluaXNoZWQsIHlvdXJDdXJyZW50TW50cEJhbGFuY2UsIF92YWx1ZSk7CiAgICAgICAgaWYgKDAgIT0gZmVlKSB7CiAgICAgICAgICAgICAvLyAxLlRyYW5zZmVyIGZlZQogICAgICAgICAgICAgLy8gQSAtPiByZXdhcmRzIGFjY291bnQKICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAvLyBFYWNoIEdPTEQgdG9rZW4gdHJhbnNmZXIgc2hvdWxkIHNlbmQgdHJhbnNhY3Rpb24gZmVlIHRvCiAgICAgICAgICAgICAvLyBHb2xkbWludE1pZ3JhdGlvbiBjb250cmFjdCBpZiBNaWdyYXRpb24gcHJvY2VzcyBpcyBub3Qgc3RhcnRlZC4KICAgICAgICAgICAgIC8vIEdvbGRtaW50IHRlYW0gaWYgTWlncmF0aW9uIHByb2Nlc3MgaXMgc3RhcnRlZC4KICAgICAgICAgICAgIGlmIChtaWdyYXRpb25TdGFydGVkKSB7CiAgICAgICAgICAgICAgICAgIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgZ29sZG1pbnRUZWFtQWRkcmVzcywgZmVlKTsKICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgbWlncmF0aW9uQWRkcmVzcywgZmVlKTsKICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIDIuVHJhbnNmZXIKICAgICAgICAvLyBBIC0+IEIKICAgICAgICB1aW50IHNlbmRUaGlzID0gc2FmZVN1YihfdmFsdWUsZmVlKTsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIHNlbmRUaGlzKTsKICAgIH0KCiAgICAvLyBVc2VkIHRvIHNlbmQgcmV3YXJkcykKICAgIGZ1bmN0aW9uIHRyYW5zZmVyUmV3YXJkV2l0aG91dEZlZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyBvbmx5TWlncmF0aW9uIG9ubHlQYXlsb2FkU2l6ZSgyKjMyKSB7CiAgICAgICAgcmVxdWlyZSgweDAhPV90byk7CgogICAgICAgIGJhbGFuY2VzW21pZ3JhdGlvbkFkZHJlc3NdID0gc2FmZVN1YihiYWxhbmNlc1ttaWdyYXRpb25BZGRyZXNzXSxfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sX3ZhbHVlKTsKCiAgICAgICAgVHJhbnNmZXIobWlncmF0aW9uQWRkcmVzcywgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8vIFRoaXMgaXMgYW4gZW1lcmdlbmN5IGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBDcmVhdG9yIG9ubHkKICAgIGZ1bmN0aW9uIHJlc2N1ZUFsbFJld2FyZHMoYWRkcmVzcyBfdG8pIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgcmVxdWlyZSgweDAhPV90byk7CgogICAgICAgIHVpbnQgdG90YWxSZXdhcmQgPSBiYWxhbmNlc1ttaWdyYXRpb25BZGRyZXNzXTsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSx0b3RhbFJld2FyZCk7CiAgICAgICAgYmFsYW5jZXNbbWlncmF0aW9uQWRkcmVzc10gPSAwOwoKICAgICAgICBUcmFuc2ZlcihtaWdyYXRpb25BZGRyZXNzLCBfdG8sIHRvdGFsUmV3YXJkKTsKICAgIH0KCgogICAgZnVuY3Rpb24gZ2V0VG90YWxJc3N1ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB0b3RhbElzc3VlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb3RhbEJ1cm50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gdG90YWxCdXJudDsKICAgIH0KfQoKY29udHJhY3QgSU1OVFAgaXMgU3RkVG9rZW4gewogICAgLy8gQWRkaXRpb25hbCBtZXRob2RzIHRoYXQgTU5UUCBjb250cmFjdCBwcm92aWRlcwogICAgZnVuY3Rpb24gbG9ja1RyYW5zZmVyKGJvb2wgX2xvY2spOwogICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfd2hvLCB1aW50IF90b2tlbnMpOwogICAgZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF93aG8sIHVpbnQgX3Rva2Vucyk7Cn0KCmNvbnRyYWN0IEdvbGRtaW50TWlncmF0aW9uIGlzIENyZWF0b3JFbmFibGVkIHsKICAgIC8vIEZpZWxkczoKICAgIElNTlRQIHB1YmxpYyBtbnRwVG9rZW47CiAgICBHb2xkIHB1YmxpYyBnb2xkVG9rZW47CgogICAgZW51bSBTdGF0ZSB7CiAgICAgICAgSW5pdCwKICAgICAgICBNaWdyYXRpb25TdGFydGVkLAogICAgICAgIE1pZ3JhdGlvblBhdXNlZCwKICAgICAgICBNaWdyYXRpb25GaW5pc2hlZAogICAgfQoKICAgIFN0YXRlIHB1YmxpYyBzdGF0ZSA9IFN0YXRlLkluaXQ7CgogICAgLy8gdGhpcyBpcyB0b3RhbCBjb2xsZWN0ZWQgR09MRCByZXdhcmRzIChsYXVuY2ggdG8gbWlncmF0aW9uIHN0YXJ0KQogICAgdWludCBwdWJsaWMgbW50cFRvTWlncmF0ZVRvdGFsID0gMDsKICAgIHVpbnQgcHVibGljIG1pZ3JhdGlvblJld2FyZFRvdGFsID0gMDsKICAgIHVpbnQ2NCBwdWJsaWMgbWlncmF0aW9uU3RhcnRlZFRpbWUgPSAwOwogICAgdWludDY0IHB1YmxpYyBtaWdyYXRpb25GaW5pc2hlZFRpbWUgPSAwOwoKICAgIHN0cnVjdCBNaWdyYXRpb24gewogICAgICAgIGFkZHJlc3MgZXRoQWRkcmVzczsKICAgICAgICBzdHJpbmcgZ21BZGRyZXNzOwogICAgICAgIHVpbnQgdG9rZW5zQ291bnQ7CiAgICAgICAgYm9vbCBtaWdyYXRlZDsKICAgICAgICB1aW50NjQgZGF0ZTsKICAgICAgICBzdHJpbmcgY29tbWVudDsKICAgIH0KCiAgICBtYXBwaW5nICh1aW50PT5NaWdyYXRpb24pIHB1YmxpYyBtbnRwTWlncmF0aW9uczsKICAgIG1hcHBpbmcgKGFkZHJlc3M9PnVpbnQpIHB1YmxpYyBtbnRwTWlncmF0aW9uSW5kZXhlczsKICAgIHVpbnQgcHVibGljIG1udHBNaWdyYXRpb25zQ291bnQgPSAwOwoKICAgIG1hcHBpbmcgKHVpbnQ9Pk1pZ3JhdGlvbikgcHVibGljIGdvbGRNaWdyYXRpb25zOwogICAgbWFwcGluZyAoYWRkcmVzcz0+dWludCkgcHVibGljIGdvbGRNaWdyYXRpb25JbmRleGVzOwogICAgdWludCBwdWJsaWMgZ29sZE1pZ3JhdGlvbnNDb3VudCA9IDA7CgogICAgZXZlbnQgTW50cE1pZ3JhdGVXYW50ZWQoYWRkcmVzcyBfZXRoQWRkcmVzcywgc3RyaW5nIF9nbUFkZHJlc3MsIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IE1udHBNaWdyYXRlZChhZGRyZXNzIF9ldGhBZGRyZXNzLCBzdHJpbmcgX2dtQWRkcmVzcywgdWludDI1NiBfdmFsdWUpOwoKICAgIGV2ZW50IEdvbGRNaWdyYXRlV2FudGVkKGFkZHJlc3MgX2V0aEFkZHJlc3MsIHN0cmluZyBfZ21BZGRyZXNzLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBHb2xkTWlncmF0ZWQoYWRkcmVzcyBfZXRoQWRkcmVzcywgc3RyaW5nIF9nbUFkZHJlc3MsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvLyBBY2Nlc3MgbWV0aG9kcwogICAgZnVuY3Rpb24gZ2V0TW50cE1pZ3JhdGlvbih1aW50IGluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzLHN0cmluZyx1aW50LGJvb2wsdWludDY0LHN0cmluZyl7CiAgICAgICAgTWlncmF0aW9uIG1lbW9yeSBtaWcgPSBtbnRwTWlncmF0aW9uc1tpbmRleF07CiAgICAgICAgcmV0dXJuIChtaWcuZXRoQWRkcmVzcywgbWlnLmdtQWRkcmVzcywgbWlnLnRva2Vuc0NvdW50LCBtaWcubWlncmF0ZWQsIG1pZy5kYXRlLCBtaWcuY29tbWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R29sZE1pZ3JhdGlvbih1aW50IGluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzLHN0cmluZyx1aW50LGJvb2wsdWludDY0LHN0cmluZyl7CiAgICAgICAgTWlncmF0aW9uIG1lbW9yeSBtaWcgPSBnb2xkTWlncmF0aW9uc1tpbmRleF07CiAgICAgICAgcmV0dXJuIChtaWcuZXRoQWRkcmVzcywgbWlnLmdtQWRkcmVzcywgbWlnLnRva2Vuc0NvdW50LCBtaWcubWlncmF0ZWQsIG1pZy5kYXRlLCBtaWcuY29tbWVudCk7CiAgICB9CgogICAgLy8gRnVuY3Rpb25zOgogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEdvbGRtaW50TWlncmF0aW9uKGFkZHJlc3MgX21udHBDb250cmFjdEFkZHJlc3MsIGFkZHJlc3MgX2dvbGRDb250cmFjdEFkZHJlc3MpIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CgogICAgICAgIHJlcXVpcmUoX21udHBDb250cmFjdEFkZHJlc3MgIT0gMCk7CiAgICAgICAgcmVxdWlyZShfZ29sZENvbnRyYWN0QWRkcmVzcyAhPSAwKTsKCiAgICAgICAgbW50cE1pZ3JhdGlvbkluZGV4ZXNbYWRkcmVzcygweDApXSA9IDA7CiAgICAgICAgZ29sZE1pZ3JhdGlvbkluZGV4ZXNbYWRkcmVzcygweDApXSA9IDA7CgogICAgICAgIG1udHBUb2tlbiA9IElNTlRQKF9tbnRwQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICBnb2xkVG9rZW4gPSBHb2xkKF9nb2xkQ29udHJhY3RBZGRyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2NrTW50cFRyYW5zZmVycyhib29sIF9sb2NrKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIG1udHBUb2tlbi5sb2NrVHJhbnNmZXIoX2xvY2spOwogICAgfQoKICAgIGZ1bmN0aW9uIGxvY2tHb2xkVHJhbnNmZXJzKGJvb2wgX2xvY2spIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgZ29sZFRva2VuLmxvY2tUcmFuc2ZlcihfbG9jayk7CiAgICB9CgogICAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gbWlncmF0aW9uIHRvIEdvbGRtaW50J3MgYmxvY2tjaGFpbgogICAgLy8gcHJvY2VzcyBpcyBzdGFydGVkLi4uCiAgICBmdW5jdGlvbiBzdGFydE1pZ3JhdGlvbigpIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgcmVxdWlyZSgoU3RhdGUuSW5pdCA9PSBzdGF0ZSkgfHwgKFN0YXRlLk1pZ3JhdGlvblBhdXNlZCA9PSBzdGF0ZSkpOwoKICAgICAgICBpZiAoU3RhdGUuSW5pdCA9PSBzdGF0ZSkgewogICAgICAgICAgICAgLy8gMSAtIGNoYW5nZSBmZWVzCiAgICAgICAgICAgICBnb2xkVG9rZW4uc3RhcnRNaWdyYXRpb24oKTsKCiAgICAgICAgICAgICAvLyAyIC0gc3RvcmUgdGhlIGN1cnJlbnQgdmFsdWVzCiAgICAgICAgICAgICBtaWdyYXRpb25SZXdhcmRUb3RhbCA9IGdvbGRUb2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgICAgICBtaWdyYXRpb25TdGFydGVkVGltZSA9IHVpbnQ2NChub3cpOwogICAgICAgICAgICAgbW50cFRvTWlncmF0ZVRvdGFsID0gbW50cFRva2VuLnRvdGFsU3VwcGx5KCk7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZSA9IFN0YXRlLk1pZ3JhdGlvblN0YXJ0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gcGF1c2VNaWdyYXRpb24oKSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIHJlcXVpcmUoKHN0YXRlID09IFN0YXRlLk1pZ3JhdGlvblN0YXJ0ZWQpIHx8IChzdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpb25GaW5pc2hlZCkpOwoKICAgICAgICBzdGF0ZSA9IFN0YXRlLk1pZ3JhdGlvblBhdXNlZDsKICAgIH0KCiAgICAvLyB0aGF0IGRvZXNuJ3QgbWVhbiB0aGF0IHlvdSBjYW50IG1pZ3JhdGUgZnJvbSBFdGhlcmV1bSAtPiBHb2xkbWludCBibG9ja2NoYWluCiAgICAvLyB0aGF0IG1lYW5zIHRoYXQgeW91IHdpbGwgZ2V0IG5vIHJld2FyZAogICAgZnVuY3Rpb24gZmluaXNoTWlncmF0aW9uKCkgcHVibGljIG9ubHlDcmVhdG9yIHsKICAgICAgICByZXF1aXJlKChTdGF0ZS5NaWdyYXRpb25TdGFydGVkID09IHN0YXRlKSB8fCAoU3RhdGUuTWlncmF0aW9uUGF1c2VkID09IHN0YXRlKSk7CgogICAgICAgIGlmIChTdGF0ZS5NaWdyYXRpb25TdGFydGVkID09IHN0YXRlKSB7CiAgICAgICAgICAgICBnb2xkVG9rZW4uZmluaXNoTWlncmF0aW9uKCk7CiAgICAgICAgICAgICBtaWdyYXRpb25GaW5pc2hlZFRpbWUgPSB1aW50NjQobm93KTsKICAgICAgICB9CgogICAgICAgIHN0YXRlID0gU3RhdGUuTWlncmF0aW9uRmluaXNoZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gZGVzdHJveU1lKCkgcHVibGljIG9ubHlDcmVhdG9yIHsKICAgICAgICBzZWxmZGVzdHJ1Y3QobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8gTU5UUAogICAgLy8gQ2FsbCB0aGlzIHRvIG1pZ3JhdGUgeW91ciBNTlRQIHRva2VucyB0byBHb2xkbWludCBNTlQKICAgIC8vICh0aGlzIGlzIG9uZS13YXkgb25seSkKICAgIC8vIF9nbUFkZHJlc3MgaXMgc29tZXRoaW5nIGxpa2UgdGhhdCAtICJCVFM3eVJYQ2tCakt4aG81N1JDYnFZRTNuRWlwcldYWEVTdzNIeHM1Q0tSbmZ0OHg3bWRHaSIKICAgIC8vCiAgICAvLyAhISEgV0FSTklORzogd2lsbCBub3QgYWxsb3cgYW55b25lIHRvIG1pZ3JhdGUgdG9rZW5zIHBhcnRseQogICAgLy8gISEhIERJU0NMQUlNRVI6IGNoZWNrIGdvbGRtaW50IGJsb2NrY2hhaW4gYWRkcmVzcyBmb3JtYXQuIFlvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIGNoYW5nZSB0aGF0IQogICAgZnVuY3Rpb24gbWlncmF0ZU1udHAoc3RyaW5nIF9nbUFkZHJlc3MpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSgoc3RhdGU9PVN0YXRlLk1pZ3JhdGlvblN0YXJ0ZWQpIHx8IChzdGF0ZT09U3RhdGUuTWlncmF0aW9uRmluaXNoZWQpKTsKCiAgICAgICAgLy8gMSAtIGNhbGN1bGF0ZSBjdXJyZW50IHJld2FyZAogICAgICAgIHVpbnQgbXlCYWxhbmNlID0gbW50cFRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlKDAhPW15QmFsYW5jZSk7CgogICAgICAgIHVpbnQgbXlSZXdhcmRNYXggPSBjYWxjdWxhdGVNeVJld2FyZE1heChtc2cuc2VuZGVyKTsKICAgICAgICB1aW50IG15UmV3YXJkID0gY2FsY3VsYXRlTXlSZXdhcmQobXlSZXdhcmRNYXgpOwoKICAgICAgICAvLyAyIC0gcGF5IHRoZSByZXdhcmQgdG8gb3VyIHVzZXIKICAgICAgICBnb2xkVG9rZW4udHJhbnNmZXJSZXdhcmRXaXRob3V0RmVlKG1zZy5zZW5kZXIsIG15UmV3YXJkKTsKCiAgICAgICAgLy8gMyAtIGJ1cm4gdG9rZW5zCiAgICAgICAgLy8gV0FSTklORzogYnVybiB3aWxsIHJlZHVjZSB0b3RhbFN1cHBseQogICAgICAgIC8vCiAgICAgICAgLy8gV0FSTklORzogY3JlYXRvciBtdXN0IGNhbGwKICAgICAgICAvLyBzZXRJY29Db250cmFjdEFkZHJlc3MobWlncmF0aW9uQ29udHJhY3RBZGRyZXNzKQogICAgICAgIC8vIG9mIHRoZSBtbnRwVG9rZW4KICAgICAgICBtbnRwVG9rZW4uYnVyblRva2Vucyhtc2cuc2VuZGVyLG15QmFsYW5jZSk7CgogICAgICAgIC8vIHNhdmUgdHVwbGUKICAgICAgICBNaWdyYXRpb24gbWVtb3J5IG1pZzsKICAgICAgICBtaWcuZXRoQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgbWlnLmdtQWRkcmVzcyA9IF9nbUFkZHJlc3M7CiAgICAgICAgbWlnLnRva2Vuc0NvdW50ID0gbXlCYWxhbmNlOwogICAgICAgIG1pZy5taWdyYXRlZCA9IGZhbHNlOwogICAgICAgIG1pZy5kYXRlID0gdWludDY0KG5vdyk7CiAgICAgICAgbWlnLmNvbW1lbnQgPSAnJzsKCiAgICAgICAgbW50cE1pZ3JhdGlvbnNbbW50cE1pZ3JhdGlvbnNDb3VudCArIDFdID0gbWlnOwogICAgICAgIG1udHBNaWdyYXRpb25JbmRleGVzW21zZy5zZW5kZXJdID0gbW50cE1pZ3JhdGlvbnNDb3VudCArIDE7CiAgICAgICAgbW50cE1pZ3JhdGlvbnNDb3VudCsrOwoKICAgICAgICAvLyBzZW5kIGFuIGV2ZW50CiAgICAgICAgTW50cE1pZ3JhdGVXYW50ZWQobXNnLnNlbmRlciwgX2dtQWRkcmVzcywgbXlCYWxhbmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc01udHBNaWdyYXRlZChhZGRyZXNzIF93aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsKICAgICAgICB1aW50IGluZGV4ID0gbW50cE1pZ3JhdGlvbkluZGV4ZXNbX3dob107CgogICAgICAgIE1pZ3JhdGlvbiBtZW1vcnkgbWlnID0gbW50cE1pZ3JhdGlvbnNbaW5kZXhdOwogICAgICAgIHJldHVybiBtaWcubWlncmF0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TW50cE1pZ3JhdGVkKGFkZHJlc3MgX3dobywgYm9vbCBfaXNNaWdyYXRlZCwgc3RyaW5nIF9jb21tZW50KSBwdWJsaWMgb25seUNyZWF0b3IgewogICAgICAgIHVpbnQgaW5kZXggPSBtbnRwTWlncmF0aW9uSW5kZXhlc1tfd2hvXTsKICAgICAgICByZXF1aXJlKGluZGV4ID4gMCk7CgogICAgICAgIG1udHBNaWdyYXRpb25zW2luZGV4XS5taWdyYXRlZCA9IF9pc01pZ3JhdGVkOwogICAgICAgIG1udHBNaWdyYXRpb25zW2luZGV4XS5jb21tZW50ID0gX2NvbW1lbnQ7CgogICAgICAgIC8vIHNlbmQgYW4gZXZlbnQKICAgICAgICBpZiAoX2lzTWlncmF0ZWQpIHsKICAgICAgICAgICAgIE1udHBNaWdyYXRlZCggIG1udHBNaWdyYXRpb25zW2luZGV4XS5ldGhBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW50cE1pZ3JhdGlvbnNbaW5kZXhdLmdtQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1udHBNaWdyYXRpb25zW2luZGV4XS50b2tlbnNDb3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEdPTEQKICAgIGZ1bmN0aW9uIG1pZ3JhdGVHb2xkKHN0cmluZyBfZ21BZGRyZXNzKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoKHN0YXRlPT1TdGF0ZS5NaWdyYXRpb25TdGFydGVkKSB8fCAoc3RhdGU9PVN0YXRlLk1pZ3JhdGlvbkZpbmlzaGVkKSk7CgogICAgICAgIC8vIDEgLSBnZXQgYmFsYW5jZQogICAgICAgIHVpbnQgbXlCYWxhbmNlID0gZ29sZFRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlKDAhPW15QmFsYW5jZSk7CgogICAgICAgIC8vIDIgLSBidXJuIHRva2VucwogICAgICAgIC8vIFdBUk5JTkc6IGJ1cm4gd2lsbCByZWR1Y2UgdG90YWxTdXBwbHkKICAgICAgICAvLwogICAgICAgIGdvbGRUb2tlbi5idXJuVG9rZW5zKG1zZy5zZW5kZXIsbXlCYWxhbmNlKTsKCiAgICAgICAgLy8gc2F2ZSB0dXBsZQogICAgICAgIE1pZ3JhdGlvbiBtZW1vcnkgbWlnOwogICAgICAgIG1pZy5ldGhBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICBtaWcuZ21BZGRyZXNzID0gX2dtQWRkcmVzczsKICAgICAgICBtaWcudG9rZW5zQ291bnQgPSBteUJhbGFuY2U7CiAgICAgICAgbWlnLm1pZ3JhdGVkID0gZmFsc2U7CiAgICAgICAgbWlnLmRhdGUgPSB1aW50NjQobm93KTsKICAgICAgICBtaWcuY29tbWVudCA9ICcnOwoKICAgICAgICBnb2xkTWlncmF0aW9uc1tnb2xkTWlncmF0aW9uc0NvdW50ICsgMV0gPSBtaWc7CiAgICAgICAgZ29sZE1pZ3JhdGlvbkluZGV4ZXNbbXNnLnNlbmRlcl0gPSBnb2xkTWlncmF0aW9uc0NvdW50ICsgMTsKICAgICAgICBnb2xkTWlncmF0aW9uc0NvdW50Kys7CgogICAgICAgIC8vIHNlbmQgYW4gZXZlbnQKICAgICAgICBHb2xkTWlncmF0ZVdhbnRlZChtc2cuc2VuZGVyLCBfZ21BZGRyZXNzLCBteUJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzR29sZE1pZ3JhdGVkKGFkZHJlc3MgX3dobykgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQgaW5kZXggPSBnb2xkTWlncmF0aW9uSW5kZXhlc1tfd2hvXTsKCiAgICAgICAgTWlncmF0aW9uIG1lbW9yeSBtaWcgPSBnb2xkTWlncmF0aW9uc1tpbmRleF07CiAgICAgICAgcmV0dXJuIG1pZy5taWdyYXRlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRHb2xkTWlncmF0ZWQoYWRkcmVzcyBfd2hvLCBib29sIF9pc01pZ3JhdGVkLCBzdHJpbmcgX2NvbW1lbnQpIHB1YmxpYyBvbmx5Q3JlYXRvciB7CiAgICAgICAgdWludCBpbmRleCA9IGdvbGRNaWdyYXRpb25JbmRleGVzW193aG9dOwogICAgICAgIHJlcXVpcmUoaW5kZXggPiAwKTsKCiAgICAgICAgZ29sZE1pZ3JhdGlvbnNbaW5kZXhdLm1pZ3JhdGVkID0gX2lzTWlncmF0ZWQ7CiAgICAgICAgZ29sZE1pZ3JhdGlvbnNbaW5kZXhdLmNvbW1lbnQgPSBfY29tbWVudDsKCiAgICAgICAgLy8gc2VuZCBhbiBldmVudAogICAgICAgIGlmIChfaXNNaWdyYXRlZCkgewogICAgICAgICAgICAgR29sZE1pZ3JhdGVkKCAgZ29sZE1pZ3JhdGlvbnNbaW5kZXhdLmV0aEFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb2xkTWlncmF0aW9uc1tpbmRleF0uZ21BZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29sZE1pZ3JhdGlvbnNbaW5kZXhdLnRva2Vuc0NvdW50KTsKICAgICAgICB9CiAgICB9CgogICAgLy8gRWFjaCBNTlRQIHRva2VuIGhvbGRlciBnZXRzIGEgR09MRCByZXdhcmQgYXMgYSBwZXJjZW50IG9mIGFsbCByZXdhcmRzCiAgICAvLyBwcm9wb3J0aW9uYWwgdG8gaGlzIE1OVFAgdG9rZW4gc3Rha2UKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU15UmV3YXJkTWF4KGFkZHJlc3MgX29mKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KXsKICAgICAgICBpZiAoMCA9PSBtbnRwVG9NaWdyYXRlVG90YWwpIHsKICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KCiAgICAgICAgdWludCBteUN1cnJlbnRNbnRwQmFsYW5jZSA9IG1udHBUb2tlbi5iYWxhbmNlT2YoX29mKTsKICAgICAgICBpZiAoMCA9PSBteUN1cnJlbnRNbnRwQmFsYW5jZSkgewogICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKG1pZ3JhdGlvblJld2FyZFRvdGFsICogbXlDdXJyZW50TW50cEJhbGFuY2UpIC8gbW50cFRvTWlncmF0ZVRvdGFsOwogICAgfQoKICAgIC8vZW1lcmdlbmN5IGZ1bmN0aW9uLiB1c2VkIGluIGNhc2Ugb2YgYSBtaXN0YWtlIHRvIHRyYW5zZmVyIGFsbCB0aGUgcmV3YXJkIHRvIGEgbmV3IG1pZ3JhaXRvbiBzbWFydCBjb250cmFjdC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyUmV3YXJkKGFkZHJlc3MgX25ld0NvbnRyYWN0QWRkcmVzcykgcHVibGljIG9ubHlDcmVhdG9yIHsKICAgICAgZ29sZFRva2VuLnRyYW5zZmVyUmV3YXJkV2l0aG91dEZlZShfbmV3Q29udHJhY3RBZGRyZXNzLCBnb2xkVG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KCiAgICAvLyBNaWdyYXRpb24gcmV3YXJkcyBkZWNyZWFzZWQgbGluZWFybHkuCiAgICAvLwogICAgLy8gVGhlIGZvcm11bGEgaXM6IHJld2FyZFBlcmNlbnRzID0gbWF4KDEwMCAtIDEwMCAqIGRheSAvIDM2NSwgMCkKICAgIC8vCiAgICAvLyBPbiAxc3QgZGF5IG9mIG1pZ3JhdGlvbiwgeW91IHdpbGwgZ2V0OiAxMDAgLSAxMDAgKiAwLzM2NSA9IDEwMCUgb2YgeW91ciByZXdhcmRzCiAgICAvLyBPbiAybmQgZGF5IG9mIG1pZ3JhdGlvbiwgeW91IHdpbGwgZ2V0OiAxMDAgLSAxMDAgKiAxLzM2NSA9IDk5LjcyNjElIG9mIHlvdXIgcmV3YXJkcwogICAgLy8gT24gMzY1dGggZGF5IG9mIG1pZ3JhdGlvbiwgeW91IHdpbGwgZ2V0OiAxMDAgLSAxMDAgKiAzNjQvMzY1ID0gMC4yNzQlCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVNeVJld2FyZERlY3JlYXNlZCh1aW50IF9kYXksIHVpbnQgX215UmV3YXJkTWF4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KXsKICAgICAgICBpZiAoX2RheSA+PSAzNjUpIHsKICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KCiAgICAgICAgdWludCB4ID0gKCgxMDAgKiAxMDAwMDAwMDAwICogX2RheSkgLyAzNjUpOwogICAgICAgIHJldHVybiAoX215UmV3YXJkTWF4ICogKCgxMDAgKiAxMDAwMDAwMDAwKSAtIHgpKSAvICgxMDAgKiAxMDAwMDAwMDAwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVNeVJld2FyZCh1aW50IF9teVJld2FyZE1heCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCl7CiAgICAgICAgLy8gZGF5IHN0YXJ0cyBmcm9tIDAKICAgICAgICB1aW50IGRheSA9ICh1aW50NjQobm93KSAtIG1pZ3JhdGlvblN0YXJ0ZWRUaW1lKSAvIHVpbnQ2NCgxIGRheXMpOwogICAgICAgIHJldHVybiBjYWxjdWxhdGVNeVJld2FyZERlY3JlYXNlZChkYXksIF9teVJld2FyZE1heCk7CiAgICB9CgogICAgLy8gZG8gbm90IGFsbG93IHRvIHNlbmQgbW9uZXkgdG8gdGhpcyBjb250cmFjdC4uLgogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KfQ=='.
	

]
