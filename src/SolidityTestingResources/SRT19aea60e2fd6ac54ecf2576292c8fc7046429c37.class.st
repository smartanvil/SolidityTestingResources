Class {
	#name : #SRT19aea60e2fd6ac54ecf2576292c8fc7046429c37,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19aea60e2fd6ac54ecf2576292c8fc7046429c37 >> base64 [
	^ ''.
	

]
