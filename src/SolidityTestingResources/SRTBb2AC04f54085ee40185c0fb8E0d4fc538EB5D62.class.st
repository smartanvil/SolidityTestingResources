Class {
	#name : #SRTBb2AC04f54085ee40185c0fb8E0d4fc538EB5D62,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTBb2AC04f54085ee40185c0fb8E0d4fc538EB5D62 >> base64 [
	^ ''.
	

]
