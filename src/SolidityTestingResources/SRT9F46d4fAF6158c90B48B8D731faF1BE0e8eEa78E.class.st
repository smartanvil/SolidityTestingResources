Class {
	#name : #SRT9F46d4fAF6158c90B48B8D731faF1BE0e8eEa78E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9F46d4fAF6158c90B48B8D731faF1BE0e8eEa78E >> base64 [
	^ ''.
	

]
