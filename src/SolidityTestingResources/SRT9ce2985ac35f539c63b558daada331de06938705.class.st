Class {
	#name : #SRT9ce2985ac35f539c63b558daada331de06938705,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9ce2985ac35f539c63b558daada331de06938705 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBvd25lZCB7CgogICAgICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgICAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICB9CgogICAgICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikKICAgICAgICAgICAgICAgIF87CiAgICAgICAgfQoKCn0KCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsKICAgICAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsKfQoKY29udHJhY3QgSUVSQzIwVG9rZW4gewoKICAgICAgICAvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsKCiAgICAgICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgICAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAgICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgICAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfYWRkcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAgICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgICAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgICAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAgICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgICAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogICAgICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBFbmVyZ3lQcmVtaWVyIGlzIElFUkMyMFRva2VuLCBvd25lZHsKCiAgICAgICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgICAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gIkVuZXJneSBQcmVtaWVyIHYxLjAiOwogICAgICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJFbmVyZ3kgUHJlbWllciI7CiAgICAgICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiRVBDIjsKICAgICAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOwogICAgICAgIHVpbnQyNTYgcHVibGljIGluaXRpYWxTdXBwbHkgPSAyMDAgKiAxMCAqKiA5OwogICAgICAgIHVpbnQyNTYgcHVibGljIHRva2VuRnJvemVuVW50aWxCbG9jazsKICAgICAgIAoKICAgICAgICAvKiBQcml2YXRlIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgICAgICB1aW50MjU2IHN1cHBseSA9IGluaXRpYWxTdXBwbHk7CiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgICAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93YW5jZXM7CiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSByZXN0cmljdGVkQWRkcmVzc2VzOwoKICAgICAgICBldmVudCBUb2tlbkZyb3plbih1aW50MjU2IF9mcm96ZW5VbnRpbEJsb2NrLCBzdHJpbmcgX3JlYXNvbik7CgogICAgICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IGFuZCAgc2V0cyByZXN0cmljdGVkIGFkZHJlc3NlcyAqLwogICAgICAgIGZ1bmN0aW9uIEVuZXJneVByZW1pZXIoKSB7CiAgICAgICAgICAgICAgICByZXN0cmljdGVkQWRkcmVzc2VzWzB4MF0gPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXJzIGNhbm5vdCBzZW5kIHRva2VucyB0byAweDAgYWRkcmVzcwogICAgICAgICAgICAgICAgcmVzdHJpY3RlZEFkZHJlc3Nlc1thZGRyZXNzKHRoaXMpXSA9IHRydWU7ICAgICAgLy8gVXNlcnMgY2Fubm90IHNlbnQgdG9rZW5zIHRvIHRoaXMgY29udHJhY3RzIGFkZHJlc3MKICAgICAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsKICAgICAgICB9CgogICAgICAgIC8qIEdldCB0b3RhbCBzdXBwbHkgb2YgaXNzdWVkIGNvaW5zICovCiAgICAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcGx5OwogICAgICAgIH0KCiAgICAgICAgLyogR2V0IGJhbGFuY2Ugb2Ygc3BlY2lmaWMgYWRkcmVzcyAqLwogICAgICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgICAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcihuZXdPd25lciwgYmFsYW5jZXNbbXNnLnNlbmRlcl0pKTsKICAgICAgICAgICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgfQoKICAgICAgICAvKiBTZW5kIGNvaW5zICovCiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIHJlcXVpcmUgKGJsb2NrLm51bWJlciA+PSB0b2tlbkZyb3plblVudGlsQmxvY2spIDsgICAgICAgLy8gVGhyb3cgaXMgdG9rZW4gaXMgZnJvemVuIGluIGNhc2Ugb2YgZW1lcmdlbmN5CiAgICAgICAgICAgICAgICByZXF1aXJlICghcmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKSA7ICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gcmVzdHJpY3RlZCBhZGRyZXNzZXMKICAgICAgICAgICAgICAgIHJlcXVpcmUgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICAgICAgICAgIHJlcXVpcmUgKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSkgOyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovCiAgICAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlIChibG9jay5udW1iZXIgPiB0b2tlbkZyb3plblVudGlsQmxvY2spOyAvLyBUaHJvdyBpcyB0b2tlbiBpcyBmcm96ZW4gaW4gY2FzZSBvZiBlbWVyZ2VuY3kKICAgICAgICAgICAgICAgIGFsbG93YW5jZXNbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOyAgICAgICAgICAvLyBTZXQgYWxsb3dhbmNlCiAgICAgICAgICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsgICAgICAgICAgICAgLy8gUmFpc2UgQXBwcm92YWwgZXZlbnQKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb21tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgICAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOyAgICAgICAgICAgICAgLy8gQ2FzdCBzcGVuZGVyIHRvIHRva2VuUmVjaXBpZW50IGNvbnRyYWN0CiAgICAgICAgICAgICAgICBhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFwcHJvdmFsIHRvIGNvbnRyYWN0IGZvciBfdmFsdWUKICAgICAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7ICAvLyBSYWlzZSBtZXRob2Qgb24gX3NwZW5kZXIgY29udHJhY3QKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlIChibG9jay5udW1iZXIgPiB0b2tlbkZyb3plblVudGlsQmxvY2spOyAvLyBUaHJvdyBpcyB0b2tlbiBpcyBmcm96ZW4gaW4gY2FzZSBvZiBlbWVyZ2VuY3kKICAgICAgICAgICAgICAgIHJlcXVpcmUgKCFyZXN0cmljdGVkQWRkcmVzc2VzW190b10pOyAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIHJlc3RyaWN0ZWQgYWRkcmVzc2VzCiAgICAgICAgICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICAgICAgICAgIHJlcXVpcmUgKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgICAgICAgICByZXF1aXJlIChfdmFsdWUgPD0gYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0pOyAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgICAgICAgICAgYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgIC8vIERlZHVjdCBhbGxvd2FuY2UgZm9yIHRoaXMgYWRkcmVzcwogICAgICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICAgICAgICAgIHN1cHBseS09X3ZhbHVlOwogICAgICAgICAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0ZWQgYmFsYW5jZSBpcyBlbm91Z2gKICAgICAgICAgICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSB0YXJnZXRlZCBiYWxhbmNlCiAgICAgICAgICAgICAgICBhbGxvd2FuY2VzW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcidzIGFsbG93YW5jZQogICAgICAgICAgICAgICAgc3VwcGx5IC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWxTdXBwbHkKICAgICAgICAgICAgICAgIEJ1cm4oX2Zyb20sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8qIEdldCB0aGUgYW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgdG8gc3BlbmQgKi8KICAgICAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dhbmNlc1tfb3duZXJdW19zcGVuZGVyXTsKICAgICAgICB9CgoKCiAgICAgICAgLyogU3RvcHMgYWxsIHRva2VuIHRyYW5zZmVycyBpbiBjYXNlIG9mIGVtZXJnZW5jeSAqLwogICAgICAgIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zZmVyc1VudGlsKHVpbnQyNTYgX2Zyb3plblVudGlsQmxvY2ssIHN0cmluZyBfcmVhc29uKSBvbmx5T3duZXIgewogICAgICAgICAgICAgICAgdG9rZW5Gcm96ZW5VbnRpbEJsb2NrID0gX2Zyb3plblVudGlsQmxvY2s7CiAgICAgICAgICAgICAgICBUb2tlbkZyb3plbihfZnJvemVuVW50aWxCbG9jaywgX3JlYXNvbik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1bmZyZWV6ZVRyYW5zZmVyc1VudGlsKHN0cmluZyBfcmVhc29uKSBvbmx5T3duZXIgewogICAgICAgICAgICAgICAgdG9rZW5Gcm96ZW5VbnRpbEJsb2NrID0gMDsKICAgICAgICAgICAgICAgIFRva2VuRnJvemVuKDAsIF9yZWFzb24pOwogICAgICAgIH0KCiAgICAgICAgLyogT3duZXIgY2FuIGFkZCBuZXcgcmVzdHJpY3RlZCBhZGRyZXNzIG9yIHJlbW92ZXMgb25lICovCiAgICAgICAgZnVuY3Rpb24gZWRpdFJlc3RyaWN0ZWRBZGRyZXNzKGFkZHJlc3MgX25ld1Jlc3RyaWN0ZWRBZGRyZXNzKSBvbmx5T3duZXIgewogICAgICAgICAgICAgICAgcmVzdHJpY3RlZEFkZHJlc3Nlc1tfbmV3UmVzdHJpY3RlZEFkZHJlc3NdID0gIXJlc3RyaWN0ZWRBZGRyZXNzZXNbX25ld1Jlc3RyaWN0ZWRBZGRyZXNzXTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGlzUmVzdHJpY3RlZEFkZHJlc3MoYWRkcmVzcyBfcXVlcnlBZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sIGFuc3dlcil7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdHJpY3RlZEFkZHJlc3Nlc1tfcXVlcnlBZGRyZXNzXTsKICAgICAgICB9Cn0='.
	

]
