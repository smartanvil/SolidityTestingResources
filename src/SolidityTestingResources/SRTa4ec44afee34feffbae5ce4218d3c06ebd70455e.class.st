Class {
	#name : #SRTa4ec44afee34feffbae5ce4218d3c06ebd70455e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4ec44afee34feffbae5ce4218d3c06ebd70455e >> base64 [
	^ ''.
	

]
