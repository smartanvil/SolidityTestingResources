Class {
	#name : #SRT08a84018c36ef8f7daaabbd167eb41b225041453,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08a84018c36ef8f7daaabbd167eb41b225041453 >> base64 [
	^ ''.
	

]
