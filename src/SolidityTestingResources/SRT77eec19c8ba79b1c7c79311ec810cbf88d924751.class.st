Class {
	#name : #SRT77eec19c8ba79b1c7c79311ec810cbf88d924751,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT77eec19c8ba79b1c7c79311ec810cbf88d924751 >> base64 [
	^ ''.
	

]
