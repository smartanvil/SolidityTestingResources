Class {
	#name : #SRT73b29c2a2dd1c18fe95cc43f67e5d202651794fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73b29c2a2dd1c18fe95cc43f67e5d202651794fe >> base64 [
	^ ''.
	

]
