Class {
	#name : #SRT5d26239257e6433889f00bb46294c552b4d75ec9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d26239257e6433889f00bb46294c552b4d75ec9 >> base64 [
	^ ''.
	

]
