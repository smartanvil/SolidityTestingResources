Class {
	#name : #SRT4b8007bc4e1efd3ef9b553d68a1f5b111730c49c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4b8007bc4e1efd3ef9b553d68a1f5b111730c49c >> base64 [
	^ ''.
	

]
