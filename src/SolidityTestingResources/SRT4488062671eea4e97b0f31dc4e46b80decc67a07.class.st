Class {
	#name : #SRT4488062671eea4e97b0f31dc4e46b80decc67a07,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4488062671eea4e97b0f31dc4e46b80decc67a07 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBUb2tlbiB7CgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KTsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIGZ1bmN0aW9uIGFwcHJvdmUgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICBmdW5jdGlvbiBhbGxvd2FuY2UgKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogIGV2ZW50IFRyYW5zZmVyIChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgZXZlbnQgQXBwcm92YWwgKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTYWZlTWF0aCB7CiAgdWludDI1NiBjb25zdGFudCBwcml2YXRlIE1BWF9VSU5UMjU2ID0KICAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7CgogIGZ1bmN0aW9uIHNhZmVBZGQgKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgIGFzc2VydCAoeCA8PSBNQVhfVUlOVDI1NiAtIHkpOwogICAgcmV0dXJuIHggKyB5OwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1YiAodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgYXNzZXJ0ICh4ID49IHkpOwogICAgcmV0dXJuIHggLSB5OwogIH0KCiAgZnVuY3Rpb24gc2FmZU11bCAodWludDI1NiB4LCB1aW50MjU2IHkpICBjb25zdGFudCBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICBpZiAoeSA9PSAwKSByZXR1cm4gMDsgLy8gUHJldmVudCBkaXZpc2lvbiBieSB6ZXJvIGF0IHRoZSBuZXh0IGxpbmUKICAgIGFzc2VydCAoeCA8PSBNQVhfVUlOVDI1NiAvIHkpOwogICAgcmV0dXJuIHggKiB5OwogIH0KICAKICAKICAgZnVuY3Rpb24gc2FmZURpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KICAKfQoKCmNvbnRyYWN0IEFic3RyYWN0VG9rZW4gaXMgVG9rZW4sIFNhZmVNYXRoIHsKCiAgZnVuY3Rpb24gQWJzdHJhY3RUb2tlbiAoKSB7CiAgICAvLyBEbyBub3RoaW5nCiAgfQogCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYWNjb3VudHMgW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlciAoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChhY2NvdW50cyBbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHJldHVybiBmYWxzZTsKICAgIGlmIChfdmFsdWUgPiAwICYmIG1zZy5zZW5kZXIgIT0gX3RvKSB7CiAgICAgIGFjY291bnRzIFttc2cuc2VuZGVyXSA9IHNhZmVTdWIgKGFjY291bnRzIFttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgYWNjb3VudHMgW190b10gPSBzYWZlQWRkIChhY2NvdW50cyBbX3RvXSwgX3ZhbHVlKTsKICAgIH0KICAgIFRyYW5zZmVyIChtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSAoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYWxsb3dhbmNlcyBbX2Zyb21dW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7CiAgICBpZiAoYWNjb3VudHMgW19mcm9tXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOwoKICAgIGFsbG93YW5jZXMgW19mcm9tXVttc2cuc2VuZGVyXSA9CiAgICAgIHNhZmVTdWIgKGFsbG93YW5jZXMgW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKCiAgICBpZiAoX3ZhbHVlID4gMCAmJiBfZnJvbSAhPSBfdG8pIHsKICAgICAgYWNjb3VudHMgW19mcm9tXSA9IHNhZmVTdWIgKGFjY291bnRzIFtfZnJvbV0sIF92YWx1ZSk7CiAgICAgIGFjY291bnRzIFtfdG9dID0gc2FmZUFkZCAoYWNjb3VudHMgW190b10sIF92YWx1ZSk7CiAgICB9CiAgICBUcmFuc2ZlciAoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAKICBmdW5jdGlvbiBhcHByb3ZlIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2FuY2VzIFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbCAobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIAogIGZ1bmN0aW9uIGFsbG93YW5jZSAoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50CiAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2FuY2VzIFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIE1hcHBpbmcgZnJvbSBhZGRyZXNzZXMgb2YgdG9rZW4gaG9sZGVycyB0byB0aGUgbnVtYmVycyBvZiB0b2tlbnMgYmVsb25naW5nCiAgICogdG8gdGhlc2UgdG9rZW4gaG9sZGVycy4KICAgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGFjY291bnRzOwoKICAvKioKICAgKiBNYXBwaW5nIGZyb20gYWRkcmVzc2VzIG9mIHRva2VuIGhvbGRlcnMgdG8gdGhlIG1hcHBpbmcgb2YgYWRkcmVzc2VzIG9mCiAgICogc3BlbmRlcnMgdG8gdGhlIGFsbG93YW5jZXMgc2V0IGJ5IHRoZXNlIHRva2VuIGhvbGRlcnMgdG8gdGhlc2Ugc3BlbmRlcnMuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwcml2YXRlIGFsbG93YW5jZXM7Cn0KCgpjb250cmFjdCBMaWNlcmlvVG9rZW4gaXMgQWJzdHJhY3RUb2tlbiB7CiAgICAKICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgICAKICAgICB1aW50MjU2IHRva2VuQ291bnQgPSAwOwogICAgIAogICAgIGJvb2wgZnJvemVuID0gZmFsc2U7CiAgICAgCiAgICAgdWludDI1NiBjb25zdGFudCBNQVhfVE9LRU5fQ09VTlQgPSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7CiAgICAgCgl1aW50IHB1YmxpYyBjb25zdGFudCBfZGVjaW1hbHMgPSAoMTAqKjE4KTsKICAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKCSAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwoJICAgIF87Cgl9CiAgICAgCiAgICAgZnVuY3Rpb24gTGljZXJpb1Rva2VuKCkgewogICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgIGNyZWF0ZVRva2VucygxMDAgKiAoMTAqKjI0KSk7CiAgICAgfQogICAgIAogICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KSB7CiAgICAgICAgcmV0dXJuIHRva2VuQ291bnQ7CiAgICAgfQogICAgIAogICAgZnVuY3Rpb24gbmFtZSAoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgcmVzdWx0KSB7CgkJcmV0dXJuICJMaWNlcmlvVG9rZW4iOwoJfQoJCglmdW5jdGlvbiBzeW1ib2wgKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIHJlc3VsdCkgewoJCXJldHVybiAiTENSIjsKCX0KCQoJZnVuY3Rpb24gZGVjaW1hbHMgKCkgY29uc3RhbnQgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gMTg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyIChhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGZyb3plbikgcmV0dXJuIGZhbHNlOwogICAgZWxzZSByZXR1cm4gQWJzdHJhY3RUb2tlbi50cmFuc2ZlciAoX3RvLCBfdmFsdWUpOwogIH0KCiAgCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChmcm96ZW4pIHJldHVybiBmYWxzZTsKICAgIGVsc2UgcmV0dXJuIEFic3RyYWN0VG9rZW4udHJhbnNmZXJGcm9tIChfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfY3VycmVudFZhbHVlLCB1aW50MjU2IF9uZXdWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGFsbG93YW5jZSAobXNnLnNlbmRlciwgX3NwZW5kZXIpID09IF9jdXJyZW50VmFsdWUpCiAgICAgIHJldHVybiBhcHByb3ZlIChfc3BlbmRlciwgX25ld1ZhbHVlKTsKICAgIGVsc2UgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gYnVyblRva2VucyAodWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKF92YWx1ZSA+IGFjY291bnRzIFttc2cuc2VuZGVyXSkgcmV0dXJuIGZhbHNlOwogICAgZWxzZSBpZiAoX3ZhbHVlID4gMCkgewogICAgICBhY2NvdW50cyBbbXNnLnNlbmRlcl0gPSBzYWZlU3ViIChhY2NvdW50cyBbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgIHRva2VuQ291bnQgPSBzYWZlU3ViICh0b2tlbkNvdW50LCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTsKICB9CgoKICBmdW5jdGlvbiBjcmVhdGVUb2tlbnMgKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoKICAgIGlmIChfdmFsdWUgPiAwKSB7CiAgICAgIGlmIChfdmFsdWUgPiBzYWZlU3ViIChNQVhfVE9LRU5fQ09VTlQsIHRva2VuQ291bnQpKSByZXR1cm4gZmFsc2U7CiAgICAgIGFjY291bnRzIFttc2cuc2VuZGVyXSA9IHNhZmVBZGQgKGFjY291bnRzIFttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgdG9rZW5Db3VudCA9IHNhZmVBZGQgKHRva2VuQ291bnQsIF92YWx1ZSk7CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfQoKCiAgZnVuY3Rpb24gc2V0T3duZXIgKGFkZHJlc3MgX25ld093bmVyKSB7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyKTsKCiAgICBvd25lciA9IF9uZXdPd25lcjsKICB9CgogIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zZmVycyAoKSB7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyKTsKCiAgICBpZiAoIWZyb3plbikgewogICAgICBmcm96ZW4gPSB0cnVlOwogICAgICBGcmVlemUgKCk7CiAgICB9CiAgfQoKCiAgZnVuY3Rpb24gdW5mcmVlemVUcmFuc2ZlcnMgKCkgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgaWYgKGZyb3plbikgewogICAgICBmcm96ZW4gPSBmYWxzZTsKICAgICAgVW5mcmVlemUgKCk7CiAgICB9CiAgfQoKICBldmVudCBGcmVlemUgKCk7CgogIGV2ZW50IFVuZnJlZXplICgpOwoKfQoKCmNvbnRyYWN0IFRva2VuU2FsZSBpcyBMaWNlcmlvVG9rZW4gIHsKIAogICAgZW51bSBTdGF0ZSB7IFBSSVZBVEVfU0FMRSwgUFJFX0lDTywgSUNPX0ZJUlNULCBJQ09fU0VDT05ELCBTVE9QUEVELCBDTE9TRUQgfQogICAgCiAgICAvLyAwICwgMSAsIDIgLCAzICwgNCAsIDUKICAgIAogICAgU3RhdGUgcHVibGljIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLlNUT1BQRUQ7CgogICAgdWludCBwdWJsaWMgdG9rZW5QcmljZSA9IDI1MDAwMDAwMDAwMDAwMDsgLy8gd2VpICwgMC4wMDAyNSBldGggLCAwLjEyIHVzZAogICAgdWludCBwdWJsaWMgX21pbkFtb3VudCA9IDAuMDEgZXRoZXI7CgkKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwoJCgl1aW50MjU2IHByaXZhdGUgQm91bnR5Rm91bmQgPSAxMCAqICgxMCoqMjQpOwoJdWludDI1NiBwcml2YXRlIFNhbGVGb3VuZCA9IDcwICogKDEwKioyNCk7Cgl1aW50MjU2IHByaXZhdGUgUGFydG5lcnNGb3VuZCA9IDUgKiAoMTAqKjI0KTsKCXVpbnQyNTYgcHJpdmF0ZSBUZWFtRm91bmQgPSAxNSAqICgxMCoqMjQpOwoJCgl1aW50MjU2IHB1YmxpYyB0b3RhbFNvbGQgPSAwOwoJCgkKCXVpbnQyNTYgcHJpdmF0ZSBfaGFyZGNhcCA9IDE0MDAwIGV0aGVyOwoJdWludDI1NiBwcml2YXRlIF9zb2Z0Y2FwID0gMjUwMCBldGhlcjsKCQoJYm9vbCBwcml2YXRlIF9hbGxvd2VkVHJhbnNmZXJzID0gdHJ1ZTsKCQoJCiAgICBhZGRyZXNzW10gcHVibGljIFBhcnRuZXJzOwogICAgYWRkcmVzc1tdIHB1YmxpYyBIb2xkZXJzOwoJCgltb2RpZmllciBtaW5BbW91bnQoKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gX21pbkFtb3VudCk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgc2FsZUlzT24oKSB7CiAgICAgICAgcmVxdWlyZShjdXJyZW50U3RhdGUgIT0gU3RhdGUuU1RPUFBFRCAmJiBjdXJyZW50U3RhdGUgIT0gU3RhdGUuQ0xPU0VEICYmIHRvdGFsU29sZCA8IFNhbGVGb3VuZCk7CiAgICAgICAgXzsKICAgIH0KICAgIAoJZnVuY3Rpb24gVG9rZW5TYWxlKCkgewoJICAgIG93bmVyID0gbXNnLnNlbmRlcjsKCSAgICBiZW5lZmljaWFyeSA9IG1zZy5zZW5kZXI7Cgl9CgkKCWZ1bmN0aW9uIHNldFN0YXRlKFN0YXRlIF9uZXdTdGF0ZSkgcHVibGljIG9ubHlPd25lciB7CgkgICAgcmVxdWlyZShjdXJyZW50U3RhdGUgIT0gU3RhdGUuQ0xPU0VEKTsKCSAgICBjdXJyZW50U3RhdGUgPSBfbmV3U3RhdGU7Cgl9CgkKCWZ1bmN0aW9uIHNldE1pbkFtb3VudCh1aW50IF9uZXcpIHB1YmxpYyBvbmx5T3duZXIgewoJICAgIAoJICAgIF9taW5BbW91bnQgPSBfbmV3OwoJICAgIAoJfQoJCglmdW5jdGlvbiBhbGxvd1RyYW5zZmVycygpIHB1YmxpYyBvbmx5T3duZXIgewoJCV9hbGxvd2VkVHJhbnNmZXJzID0gdHJ1ZTsJCQoJfQoJCglmdW5jdGlvbiBzdG9wVHJhbnNmZXJzKCkgcHVibGljIG9ubHlPd25lciB7CgkJX2FsbG93ZWRUcmFuc2ZlcnMgPSBmYWxzZTsKCX0KCQoJZnVuY3Rpb24gc3RvcFNhbGUoKSBwdWJsaWMgb25seU93bmVyIHsKCSAgICBjdXJyZW50U3RhdGUgPSBTdGF0ZS5DTE9TRUQ7CgkgICAgcGF5b3V0UGFydG5lcnMoKTsKCSAgICBwYXlvdXRCb251c2VzVG9Ib2xkZXJzKCk7Cgl9CgkKICAgIGZ1bmN0aW9uIHNldEJlbmVmaWNpYXJ5QWRkcmVzcyhhZGRyZXNzIF9uZXcpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIAogICAgICAgIGJlbmVmaWNpYXJ5ID0gX25ldzsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VG9rZW5QcmljZSh1aW50IF9wcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgCiAgICAgICAgdG9rZW5QcmljZSA9IF9wcmljZTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkUGFydG5lcihhZGRyZXNzIF9uZXdQYXJ0bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICAKICAgICAgICBQYXJ0bmVycy5wdXNoKF9uZXdQYXJ0bmVyKTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcGF5b3V0UGFydG5lcnMoKSBwcml2YXRlIHJldHVybnMgKGJvb2wpIHsKCiAgICAgICAgaWYoUGFydG5lcnMubGVuZ3RoID09IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgdWludCB0b2tlbnNUb1BhcnRuZXJzID0gc2FmZURpdihQYXJ0bmVyc0ZvdW5kLCBQYXJ0bmVycy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIGZvcih1aW50IGkgPSAwIDsgaSA8PSBQYXJ0bmVycy5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBhZGRyID0gUGFydG5lcnNbaV07CiAgICAgICAgICAgIGFjY291bnRzW2FkZHJdID0gc2FmZUFkZChhY2NvdW50c1thZGRyXSwgdG9rZW5zVG9QYXJ0bmVycyk7CgkgICAgICAgIGFjY291bnRzW293bmVyXSA9IHNhZmVTdWIoYWNjb3VudHNbb3duZXJdLCB0b2tlbnNUb1BhcnRuZXJzKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgCiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gcGF5b3V0Qm9udXNlc1RvSG9sZGVycygpIHByaXZhdGUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIAogICAgICAgIGlmKEhvbGRlcnMubGVuZ3RoID09IDApIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICB1aW50IHRva2Vuc1RvSG9sZGVycyA9IHNhZmVEaXYoQm91bnR5Rm91bmQsIEhvbGRlcnMubGVuZ3RoKTsKICAgICAgICAKICAgICAgICBmb3IodWludCBpID0gMCA7IGkgPD0gSG9sZGVycy5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBhZGRyID0gSG9sZGVyc1tpXTsKICAgICAgICAgICAgYWNjb3VudHNbYWRkcl0gPSBzYWZlQWRkKGFjY291bnRzW2FkZHJdLCB0b2tlbnNUb0hvbGRlcnMpOwoJICAgICAgICBhY2NvdW50c1tvd25lcl0gPSBzYWZlU3ViKGFjY291bnRzW293bmVyXSwgdG9rZW5zVG9Ib2xkZXJzKTsgCiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCgkKCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbU93bmVyKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CgkgICAgCgkgICAgdWludCB0b2tlbnMgPSBnZXRfdG9rZW5zX2NvdW50KF9hbW91bnQgKiAxIGV0aGVyKTsKCSAgICAKCSAgICB0b2tlbnMgPSBzYWZlQWRkKHRva2VucywgZ2V0X2JvdW50eV9jb3VudCh0b2tlbnMpKTsKCSAgICAKCSAgICBhY2NvdW50c1tfYWRkcmVzc10gPSBzYWZlQWRkKGFjY291bnRzW19hZGRyZXNzXSwgdG9rZW5zKTsKCSAgICBhY2NvdW50c1tvd25lcl0gPSBzYWZlU3ViKGFjY291bnRzW293bmVyXSwgdG9rZW5zKTsKCSAgICAKCSAgICB0b3RhbFNvbGQgPSBzYWZlQWRkKHRvdGFsU29sZCwgX2Ftb3VudCk7CgkgICAgCgkgICAgSG9sZGVycy5wdXNoKF9hZGRyZXNzKTsKCSAgICAKCSAgICByZXR1cm4gdHJ1ZTsKCgl9CgkKCgkKCWZ1bmN0aW9uIHRyYW5zZmVyUGF5YWJsZShhZGRyZXNzIF9hZGRyZXNzLCB1aW50IF9hbW91bnQpIHByaXZhdGUgcmV0dXJucyAoYm9vbCkgewoJICAgIAoJICAgIGlmKFNhbGVGb3VuZCA8IF9hbW91bnQpIHJldHVybiBmYWxzZTsKCSAgICAKCSAgICBhY2NvdW50c1tfYWRkcmVzc10gPSBzYWZlQWRkKGFjY291bnRzW19hZGRyZXNzXSwgX2Ftb3VudCk7CgkgICAgYWNjb3VudHNbb3duZXJdID0gc2FmZVN1YihhY2NvdW50c1tvd25lcl0sIF9hbW91bnQpOwoJICAgIAoJICAgIHRvdGFsU29sZCA9IHNhZmVBZGQodG90YWxTb2xkLCBfYW1vdW50KTsKCSAgICAKCSAgICBIb2xkZXJzLnB1c2goX2FkZHJlc3MpOwoJICAgIAoJICAgIHJldHVybiB0cnVlOwoJICAgIAoJfQoJCgkKCWZ1bmN0aW9uIGJ1eUxDUlRva2VucygpIHB1YmxpYyBzYWxlSXNPbigpIG1pbkFtb3VudCgpIHBheWFibGUgewoJICAKCSAgICAKCSAgICB1aW50IHRva2VucyA9IGdldF90b2tlbnNfY291bnQobXNnLnZhbHVlKTsKCQlyZXF1aXJlKHRyYW5zZmVyUGF5YWJsZShtc2cuc2VuZGVyICwgdG9rZW5zKSk7CgkJaWYoX2FsbG93ZWRUcmFuc2ZlcnMpIHsKCQkJYmVuZWZpY2lhcnkudHJhbnNmZXIobXNnLnZhbHVlKTsKCSAgICB9CgkgICAgCgl9CgkKCQoJZnVuY3Rpb24gZ2V0X3Rva2Vuc19jb3VudCh1aW50IF9hbW91bnQpIHByaXZhdGUgcmV0dXJucyAodWludCkgewoJICAgIAoJICAgICB1aW50IGN1cnJlbnRQcmljZSA9IHRva2VuUHJpY2U7CgkgICAgIHVpbnQgdG9rZW5zID0gc2FmZURpdiggc2FmZU11bChfYW1vdW50LCBfZGVjaW1hbHMpLCBjdXJyZW50UHJpY2UgKSA7CiAgICAJIHJldHVybiB0b2tlbnM7CgkgICAgCgl9CgkKCQoJZnVuY3Rpb24gZ2V0X2JvdW50eV9jb3VudCh1aW50IF90b2tlbnMpIHByaXZhdGUgcmV0dXJucyAodWludCkgewoJCgkgICAgdWludCBib251c2VzID0gMDsKCQoJICAgIGlmKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5QUklWQVRFX1NBTEUpIHsKCSAgICAgICAgYm9udXNlcyA9IF90b2tlbnMgOwoJICAgIH0KCSAgICAKCSAgICBpZihjdXJyZW50U3RhdGUgPT0gU3RhdGUuUFJFX0lDTykgewoJICAgICAgICBib251c2VzID0gc2FmZURpdihfdG9rZW5zICwgMik7CgkgICAgfQoJICAgIAoJICAgIGlmKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5JQ09fRklSU1QpIHsKCSAgICAgICAgIGJvbnVzZXMgPSBzYWZlRGl2KF90b2tlbnMgLCA0KTsKCSAgICB9CgkgICAgCgkgICAgaWYoY3VycmVudFN0YXRlID09IFN0YXRlLklDT19TRUNPTkQpIHsKCSAgICAgICAgIGJvbnVzZXMgPSBzYWZlRGl2KF90b2tlbnMgLCA1KTsKCSAgICB9CgkgICAgCgkgICAgaWYoQm91bnR5Rm91bmQgPCBib251c2VzKSB7CgkgICAgICAgIGJvbnVzZXMgPSBCb3VudHlGb3VuZDsKCSAgICB9CgkgICAgCgkgICAgaWYoYm9udXNlcyA+IDApIHsKCSAgICAgICAgc2FmZVN1YihCb3VudHlGb3VuZCwgYm9udXNlcyk7CgkgICAgfQoKCSAgICByZXR1cm4gYm9udXNlczsKCQoJfQoJCglmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICBidXlMQ1JUb2tlbnMoKTsKICAgIH0KCQogICAgCn0='.
	

]
