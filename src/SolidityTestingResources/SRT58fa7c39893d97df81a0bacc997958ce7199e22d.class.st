Class {
	#name : #SRT58fa7c39893d97df81a0bacc997958ce7199e22d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT58fa7c39893d97df81a0bacc997958ce7199e22d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgRUlQMjBJbnRlcmZhY2UgewogICAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKICAgIGlzIHJlcGxhY2VkIHdpdGg6CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIFRoaXMgYXV0b21hdGljYWxseSBjcmVhdGVzIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgdG90YWxTdXBwbHkuCiAgICBUaGlzIGlzIG1vdmVkIHRvIHRoZSBiYXNlIGNvbnRyYWN0IHNpbmNlIHB1YmxpYyBnZXR0ZXIgZnVuY3Rpb25zIGFyZSBub3QKICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgZnVuY3Rpb24gYnkgdGhlIGNvbXBpbGVyLgogICAgKi8KICAgIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIC8vIHNvbGhpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2ltcGxlLWV2ZW50LWZ1bmMtbmFtZSAgCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsgCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgRUlQMjAgaXMgRUlQMjBJbnRlcmZhY2UgewoKICAgIHVpbnQyNTYgY29uc3RhbnQgcHJpdmF0ZSBNQVhfVUlOVDI1NiA9IDIqKjI1NiAtIDE7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWQ7CiAgICAvKgogICAgTk9URToKICAgIFRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFyZSBPUFRJT05BTCB2YW5pdGllcy4gT25lIGRvZXMgbm90IGhhdmUgdG8gaW5jbHVkZSB0aGVtLgogICAgVGhleSBhbGxvdyBvbmUgdG8gY3VzdG9taXNlIHRoZSB0b2tlbiBjb250cmFjdCAmIGluIG5vIHdheSBpbmZsdWVuY2VzIHRoZSBjb3JlIGZ1bmN0aW9uYWxpdHkuCiAgICBTb21lIHdhbGxldHMvaW50ZXJmYWNlcyBtaWdodCBub3QgZXZlbiBib3RoZXIgdG8gbG9vayBhdCB0aGlzIGluZm9ybWF0aW9uLgogICAgKi8KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsgICAgICAgICAgICAgICAgICAgLy9mYW5jeSBuYW1lOiBlZyBTaW1vbiBCdWNrcwogICAgdWludDggcHVibGljIGRlY2ltYWxzOyAgICAgICAgICAgICAgICAvL0hvdyBtYW55IGRlY2ltYWxzIHRvIHNob3cuCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgICAgIC8vQW4gaWRlbnRpZmllcjogZWcgU0JYCgogICAgZnVuY3Rpb24gRUlQMjAoCiAgICAgICAgdWludDI1NiBfaW5pdGlhbEFtb3VudCwKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wKICAgICkgcHVibGljIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9pbml0aWFsQW1vdW50OyAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgdG90YWxTdXBwbHkgPSBfaW5pdGlhbEFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9IF90b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGVtaXQgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1aW50MjU2IGFsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2FuY2UgPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIGlmIChhbGxvd2FuY2UgPCBNQVhfVUlOVDI1NikgewogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgfQogICAgICAgIGVtaXQgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBlbWl0IEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0gICAKfQoKY29udHJhY3QgRUlQMjBGYWN0b3J5IHsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYWRkcmVzc1tdKSBwdWJsaWMgY3JlYXRlZDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNFSVAyMDsgLy92ZXJpZnkgd2l0aG91dCBoYXZpbmcgdG8gZG8gYSBieXRlY29kZSBjaGVjay4KICAgIGJ5dGVzIHB1YmxpYyBFSVAyMEJ5dGVDb2RlOyAvLyBzb2xoaW50LWRpc2FibGUtbGluZSB2YXItbmFtZS1taXhlZGNhc2UgIAoKICAgIGZ1bmN0aW9uIEVJUDIwRmFjdG9yeSgpIHB1YmxpYyB7CiAgICAgICAgLy91cG9uIGNyZWF0aW9uIG9mIHRoZSBmYWN0b3J5LCBkZXBsb3kgYSBFSVAyMCAocGFyYW1ldGVycyBhcmUgbWVhbmluZ2xlc3MpIGFuZCBzdG9yZSB0aGUgYnl0ZWNvZGUgcHJvdmFibHkuCiAgICAgICAgYWRkcmVzcyB2ZXJpZmllZFRva2VuID0gY3JlYXRlRUlQMjAoMTAwMDAsICJWZXJpZnkgVG9rZW4iLCAzLCAiVlRYIik7CiAgICAgICAgRUlQMjBCeXRlQ29kZSA9IGNvZGVBdCh2ZXJpZmllZFRva2VuKTsKICAgIH0KCiAgICAvL3ZlcmlmaWVzIGlmIGEgY29udHJhY3QgdGhhdCBoYXMgYmVlbiBkZXBsb3llZCBpcyBhIEh1bWFuIFN0YW5kYXJkIFRva2VuLgogICAgLy9OT1RFOiBUaGlzIGlzIGEgdmVyeSBleHBlbnNpdmUgZnVuY3Rpb24sIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIGluIGFuIGV0aF9jYWxsLiB+ODAwayBnYXMKICAgIGZ1bmN0aW9uIHZlcmlmeUVJUDIwKGFkZHJlc3MgX3Rva2VuQ29udHJhY3QpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBieXRlcyBtZW1vcnkgZmV0Y2hlZFRva2VuQnl0ZUNvZGUgPSBjb2RlQXQoX3Rva2VuQ29udHJhY3QpOwoKICAgICAgICBpZiAoZmV0Y2hlZFRva2VuQnl0ZUNvZGUubGVuZ3RoICE9IEVJUDIwQnl0ZUNvZGUubGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9jbGVhciBtaXNtYXRjaAogICAgICAgIH0KCiAgICAgIC8vc3RhcnRpbmcgaXRlcmF0aW5nIHRocm91Z2ggaXQgaWYgbGVuZ3RocyBtYXRjaAogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGZldGNoZWRUb2tlbkJ5dGVDb2RlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChmZXRjaGVkVG9rZW5CeXRlQ29kZVtpXSAhPSBFSVAyMEJ5dGVDb2RlW2ldKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNyZWF0ZUVJUDIwKHVpbnQyNTYgX2luaXRpYWxBbW91bnQsIHN0cmluZyBfbmFtZSwgdWludDggX2RlY2ltYWxzLCBzdHJpbmcgX3N5bWJvbCkgCiAgICAgICAgcHVibGljIAogICAgcmV0dXJucyAoYWRkcmVzcykgewoKICAgICAgICBFSVAyMCBuZXdUb2tlbiA9IChuZXcgRUlQMjAoX2luaXRpYWxBbW91bnQsIF9uYW1lLCBfZGVjaW1hbHMsIF9zeW1ib2wpKTsKICAgICAgICBjcmVhdGVkW21zZy5zZW5kZXJdLnB1c2goYWRkcmVzcyhuZXdUb2tlbikpOwogICAgICAgIGlzRUlQMjBbYWRkcmVzcyhuZXdUb2tlbildID0gdHJ1ZTsKICAgICAgICAvL3RoZSBmYWN0b3J5IHdpbGwgb3duIHRoZSBjcmVhdGVkIHRva2Vucy4gWW91IG11c3QgdHJhbnNmZXIgdGhlbS4KICAgICAgICBuZXdUb2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBfaW5pdGlhbEFtb3VudCk7IAogICAgICAgIHJldHVybiBhZGRyZXNzKG5ld1Rva2VuKTsKICAgIH0KCiAgICAvL2ZvciBub3csIGtlZXBpbmcgdGhpcyBpbnRlcm5hbC4gSWRlYWxseSB0aGVyZSBzaG91bGQgYWxzbyBiZSBhIGxpdmUgdmVyc2lvbiBvZiB0aGlzIHRoYXQgCiAgICAvLyBhbnkgY29udHJhY3QgY2FuIHVzZSwgbGliLXN0eWxlLgogICAgLy9yZXRyaWV2ZXMgdGhlIGJ5dGVjb2RlIGF0IGEgc3BlY2lmaWMgYWRkcmVzcy4KICAgIGZ1bmN0aW9uIGNvZGVBdChhZGRyZXNzIF9hZGRyKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJ5dGVzIG91dHB1dENvZGUpIHsKICAgICAgICBhc3NlbWJseSB7IC8vIHNvbGhpbnQtZGlzYWJsZS1saW5lIG5vLWlubGluZS1hc3NlbWJseSAgIAogICAgICAgICAgICAvLyByZXRyaWV2ZSB0aGUgc2l6ZSBvZiB0aGUgY29kZSwgdGhpcyBuZWVkcyBhc3NlbWJseQogICAgICAgICAgICBsZXQgc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYWRkcikKICAgICAgICAgICAgLy8gYWxsb2NhdGUgb3V0cHV0IGJ5dGUgYXJyYXkgLSB0aGlzIGNvdWxkIGFsc28gYmUgZG9uZSB3aXRob3V0IGFzc2VtYmx5CiAgICAgICAgICAgIC8vIGJ5IHVzaW5nIG91dHB1dENvZGUgPSBuZXcgYnl0ZXMoc2l6ZSkKICAgICAgICAgICAgb3V0cHV0Q29kZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICAvLyBuZXcgIm1lbW9yeSBlbmQiIGluY2x1ZGluZyBwYWRkaW5nCiAgICAgICAgICAgIG1zdG9yZSgweDQwLCBhZGQob3V0cHV0Q29kZSwgYW5kKGFkZChhZGQoc2l6ZSwgMHgyMCksIDB4MWYpLCBub3QoMHgxZikpKSkKICAgICAgICAgICAgLy8gc3RvcmUgbGVuZ3RoIGluIG1lbW9yeQogICAgICAgICAgICBtc3RvcmUob3V0cHV0Q29kZSwgc2l6ZSkKICAgICAgICAgICAgLy8gYWN0dWFsbHkgcmV0cmlldmUgdGhlIGNvZGUsIHRoaXMgbmVlZHMgYXNzZW1ibHkKICAgICAgICAgICAgZXh0Y29kZWNvcHkoX2FkZHIsIGFkZChvdXRwdXRDb2RlLCAweDIwKSwgMCwgc2l6ZSkKICAgICAgICB9CiAgICB9Cn0='.
	

]
