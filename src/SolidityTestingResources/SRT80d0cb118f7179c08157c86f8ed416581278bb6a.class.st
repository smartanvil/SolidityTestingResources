Class {
	#name : #SRT80d0cb118f7179c08157c86f8ed416581278bb6a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80d0cb118f7179c08157c86f8ed416581278bb6a >> base64 [
	^ ''.
	

]
