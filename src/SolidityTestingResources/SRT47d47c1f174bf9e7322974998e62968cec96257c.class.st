Class {
	#name : #SRT47d47c1f174bf9e7322974998e62968cec96257c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47d47c1f174bf9e7322974998e62968cec96257c >> base64 [
	^ ''.
	

]
