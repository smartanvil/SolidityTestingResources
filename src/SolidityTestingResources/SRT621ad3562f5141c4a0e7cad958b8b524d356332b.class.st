Class {
	#name : #SRT621ad3562f5141c4a0e7cad958b8b524d356332b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT621ad3562f5141c4a0e7cad958b8b524d356332b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBEZWVkIFN0YW5kYXJkCi8vLyBAYXV0aG9yIFdpbGxpYW0gRW50cmlrZW4gKGh0dHBzOi8vcGhvci5uZXQpLCBldCBhbC4KLy8vIEBkZXYgU3BlY2lmaWNhdGlvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9wdWxsLzg0MSAoRFJBRlQpCmludGVyZmFjZSBFUkM3MjEgewoKICAgIC8vIENPTVBMSUFOQ0UgV0lUSCBFUkMtMTY1IChEUkFGVCkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBFUkMtMTY1IChkcmFmdCkgaW50ZXJmYWNlIHNpZ25hdHVyZSBmb3IgaXRzZWxmCiAgICAvLyBieXRlczQgaW50ZXJuYWwgY29uc3RhbnQgSU5URVJGQUNFX1NJR05BVFVSRV9FUkMxNjUgPSAvLyAweDAxZmZjOWE3CiAgICAvLyAgICAgYnl0ZXM0KGtlY2NhazI1Nignc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0KScpKTsKCiAgICAvLy8gQGRldiBFUkMtMTY1IChkcmFmdCkgaW50ZXJmYWNlIHNpZ25hdHVyZSBmb3IgRVJDNzIxCiAgICAvLyBieXRlczQgaW50ZXJuYWwgY29uc3RhbnQgSU5URVJGQUNFX1NJR05BVFVSRV9FUkM3MjEgPSAvLyAweGRhNjcxYjliCiAgICAvLyAgICAgYnl0ZXM0KGtlY2NhazI1Nignb3duZXJPZih1aW50MjU2KScpKSBeCiAgICAvLyAgICAgYnl0ZXM0KGtlY2NhazI1NignY291bnRPZkRlZWRzKCknKSkgXgogICAgLy8gICAgIGJ5dGVzNChrZWNjYWsyNTYoJ2NvdW50T2ZEZWVkc0J5T3duZXIoYWRkcmVzcyknKSkgXgogICAgLy8gICAgIGJ5dGVzNChrZWNjYWsyNTYoJ2RlZWRPZk93bmVyQnlJbmRleChhZGRyZXNzLHVpbnQyNTYpJykpIF4KICAgIC8vICAgICBieXRlczQoa2VjY2FrMjU2KCdhcHByb3ZlKGFkZHJlc3MsdWludDI1NiknKSkgXgogICAgLy8gICAgIGJ5dGVzNChrZWNjYWsyNTYoJ3Rha2VPd25lcnNoaXAodWludDI1NiknKSk7CgogICAgLy8vIEBub3RpY2UgUXVlcnkgYSBjb250cmFjdCB0byBzZWUgaWYgaXQgc3VwcG9ydHMgYSBjZXJ0YWluIGludGVyZmFjZQogICAgLy8vIEBkZXYgUmV0dXJucyBgdHJ1ZWAgdGhlIGludGVyZmFjZSBpcyBzdXBwb3J0ZWQgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLAogICAgLy8vICByZXR1cm5zIGB0cnVlYCBmb3IgSU5URVJGQUNFX1NJR05BVFVSRV9FUkMxNjUgYW5kCiAgICAvLy8gIElOVEVSRkFDRV9TSUdOQVRVUkVfRVJDNzIxLCBzZWUgRVJDLTE2NSBmb3Igb3RoZXIgaW50ZXJmYWNlIHNpZ25hdHVyZXMuCiAgICBmdW5jdGlvbiBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgX2ludGVyZmFjZUlEKSBleHRlcm5hbCBwdXJlIHJldHVybnMgKGJvb2wpOwoKICAgIC8vIFBVQkxJQyBRVUVSWSBGVU5DVElPTlMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBGaW5kIHRoZSBvd25lciBvZiBhIGRlZWQKICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBmb3IgYSBkZWVkIHdlIGFyZSBpbnNwZWN0aW5nCiAgICAvLy8gQGRldiBEZWVkcyBhc3NpZ25lZCB0byB6ZXJvIGFkZHJlc3MgYXJlIGNvbnNpZGVyZWQgZGVzdHJveWVkLCBhbmQKICAgIC8vLyAgcXVlcmllcyBhYm91dCB0aGVtIGRvIHRocm93LgogICAgLy8vIEByZXR1cm4gVGhlIG5vbi16ZXJvIGFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIGRlZWQgYF9kZWVkSWRgLCBvciBgdGhyb3dgCiAgICAvLy8gIGlmIGRlZWQgYF9kZWVkSWRgIGlzIG5vdCB0cmFja2VkIGJ5IHRoaXMgY29udHJhY3QKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfZGVlZElkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKTsKCiAgICAvLy8gQG5vdGljZSBDb3VudCBkZWVkcyB0cmFja2VkIGJ5IHRoaXMgY29udHJhY3QKICAgIC8vLyBAcmV0dXJuIEEgY291bnQgb2YgdGhlIGRlZWRzIHRyYWNrZWQgYnkgdGhpcyBjb250cmFjdCwgd2hlcmUgZWFjaCBvbmUgb2YKICAgIC8vLyAgdGhlbSBoYXMgYW4gYXNzaWduZWQgYW5kIHF1ZXJ5YWJsZSBvd25lcgogICAgZnVuY3Rpb24gY291bnRPZkRlZWRzKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfY291bnQpOwoKICAgIC8vLyBAbm90aWNlIENvdW50IGFsbCBkZWVkcyBhc3NpZ25lZCB0byBhbiBvd25lcgogICAgLy8vIEBkZXYgVGhyb3dzIGlmIGBfb3duZXJgIGlzIHRoZSB6ZXJvIGFkZHJlc3MsIHJlcHJlc2VudGluZyBkZXN0cm95ZWQgZGVlZHMuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBbiBhZGRyZXNzIHdoZXJlIHdlIGFyZSBpbnRlcmVzdGVkIGluIGRlZWRzIG93bmVkIGJ5IHRoZW0KICAgIC8vLyBAcmV0dXJuIFRoZSBudW1iZXIgb2YgZGVlZHMgb3duZWQgYnkgYF9vd25lcmAsIHBvc3NpYmx5IHplcm8KICAgIGZ1bmN0aW9uIGNvdW50T2ZEZWVkc0J5T3duZXIoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2NvdW50KTsKCiAgICAvLy8gQG5vdGljZSBFbnVtZXJhdGUgZGVlZHMgYXNzaWduZWQgdG8gYW4gb3duZXIKICAgIC8vLyBAZGV2IFRocm93cyBpZiBgX2luZGV4YCA+PSBgY291bnRPZkRlZWRzQnlPd25lcihfb3duZXIpYCBvciBpZgogICAgLy8vICBgX293bmVyYCBpcyB0aGUgemVybyBhZGRyZXNzLCByZXByZXNlbnRpbmcgZGVzdHJveWVkIGRlZWRzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQW4gYWRkcmVzcyB3aGVyZSB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBkZWVkcyBvd25lZCBieSB0aGVtCiAgICAvLy8gQHBhcmFtIF9pbmRleCBBIGNvdW50ZXIgYmV0d2VlbiB6ZXJvIGFuZCBgY291bnRPZkRlZWRzQnlPd25lcihfb3duZXIpYCwKICAgIC8vLyAgaW5jbHVzaXZlCiAgICAvLy8gQHJldHVybiBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGBfaW5kZXhgdGggZGVlZCBhc3NpZ25lZCB0byBgX293bmVyYCwKICAgIC8vLyAgIChzb3J0IG9yZGVyIG5vdCBzcGVjaWZpZWQpCiAgICBmdW5jdGlvbiBkZWVkT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2RlZWRJZCk7CgogICAgLy8gVFJBTlNGRVIgTUVDSEFOSVNNIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IFRoaXMgZXZlbnQgZW1pdHMgd2hlbiBvd25lcnNoaXAgb2YgYW55IGRlZWQgY2hhbmdlcyBieSBhbnkKICAgIC8vLyAgbWVjaGFuaXNtLiBUaGlzIGV2ZW50IGVtaXRzIHdoZW4gZGVlZHMgYXJlIGNyZWF0ZWQgKGBmcm9tYCA9PSAwKSBhbmQKICAgIC8vLyAgZGVzdHJveWVkIChgdG9gID09IDApLiBFeGNlcHRpb246IGR1cmluZyBjb250cmFjdCBjcmVhdGlvbiwgYW55CiAgICAvLy8gIHRyYW5zZmVycyBtYXkgb2NjdXIgd2l0aG91dCBlbWl0dGluZyBgVHJhbnNmZXJgLgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBpbmRleGVkIGRlZWRJZCk7CgogICAgLy8vIEBkZXYgVGhpcyBldmVudCBlbWl0cyBvbiBhbnkgc3VjY2Vzc2Z1bCBjYWxsIHRvCiAgICAvLy8gIGBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2RlZWRJZClgLiBFeGNlcHRpb246IGRvZXMgbm90IGVtaXQKICAgIC8vLyAgaWYgYW4gb3duZXIgcmV2b2tlcyBhcHByb3ZhbCAoYF90b2AgPT0gMHgwKSBvbiBhIGRlZWQgd2l0aCBubyBleGlzdGluZwogICAgLy8vICBhcHByb3ZhbC4KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IGluZGV4ZWQgZGVlZElkKTsKCiAgICAvLy8gQG5vdGljZSBBcHByb3ZlIGEgbmV3IG93bmVyIHRvIHRha2UgeW91ciBkZWVkLCBvciByZXZva2UgYXBwcm92YWwgYnkKICAgIC8vLyAgc2V0dGluZyB0aGUgemVybyBhZGRyZXNzLiBZb3UgbWF5IGBhcHByb3ZlYCBhbnkgbnVtYmVyIG9mIHRpbWVzIHdoaWxlCiAgICAvLy8gIHRoZSBkZWVkIGlzIGFzc2lnbmVkIHRvIHlvdSwgb25seSB0aGUgbW9zdCByZWNlbnQgYXBwcm92YWwgbWF0dGVycy4KICAgIC8vLyBAZGV2IFRocm93cyBpZiBgbXNnLnNlbmRlcmAgZG9lcyBub3Qgb3duIGRlZWQgYF9kZWVkSWRgIG9yIGlmIGBfdG9gID09CiAgICAvLy8gIGBtc2cuc2VuZGVyYC4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgZGVlZCB5b3UgYXJlIGdyYW50aW5nIG93bmVyc2hpcCBvZgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfZGVlZElkKSBleHRlcm5hbDsKCiAgICAvLy8gQG5vdGljZSBCZWNvbWUgb3duZXIgb2YgYSBkZWVkIGZvciB3aGljaCB5b3UgYXJlIGN1cnJlbnRseSBhcHByb3ZlZAogICAgLy8vIEBkZXYgVGhyb3dzIGlmIGBtc2cuc2VuZGVyYCBpcyBub3QgYXBwcm92ZWQgdG8gYmVjb21lIHRoZSBvd25lciBvZgogICAgLy8vICBgZGVlZElkYCBvciBpZiBgbXNnLnNlbmRlcmAgY3VycmVudGx5IG93bnMgYF9kZWVkSWRgLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBkZWVkIHRoYXQgaXMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfZGVlZElkKSBleHRlcm5hbDsKICAgIAogICAgLy8gU1BFQyBFWFRFTlNJT05TIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgCiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlciBhIGRlZWQgdG8gYSBuZXcgb3duZXIuCiAgICAvLy8gQGRldiBUaHJvd3MgaWYgYG1zZy5zZW5kZXJgIGRvZXMgbm90IG93biBkZWVkIGBfZGVlZElkYCBvciBpZgogICAgLy8vICBgX3RvYCA9PSAweDAuCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBkZWVkIHlvdSBhcmUgdHJhbnNmZXJyaW5nLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2RlZWRJZCkgZXh0ZXJuYWw7Cn0KCgovLy8gQHRpdGxlIFRoZSBpbnRlcm5hbCBjbG9jayBhdWN0aW9uIGZ1bmN0aW9uYWxpdHkuCi8vLyBJbnNwaXJlZCBieSBDcnlwdG9LaXR0aWVzJyBjbG9jayBhdWN0aW9uCmNvbnRyYWN0IENsb2NrQXVjdGlvbkJhc2UgewoKICAgIC8vIEFkZHJlc3Mgb2YgdGhlIEVSQzcyMSBjb250cmFjdCB0aGlzIGF1Y3Rpb24gaXMgbGlua2VkIHRvLgogICAgRVJDNzIxIHB1YmxpYyBkZWVkQ29udHJhY3Q7CgogICAgLy8gRmVlIHBlciBzdWNjZXNzZnVsIGF1Y3Rpb24gaW4gMS8xMDAwdGggb2YgYSBwZXJjZW50YWdlLgogICAgdWludDI1NiBwdWJsaWMgZmVlOwogICAgCiAgICAvLyBUb3RhbCBhbW91bnQgb2YgZXRoZXIgeWV0IHRvIGJlIHBhaWQgdG8gYXVjdGlvbiBiZW5lZmljaWFyaWVzLgogICAgdWludDI1NiBwdWJsaWMgb3V0c3RhbmRpbmdFdGhlciA9IDAgZXRoZXI7CiAgICAKICAgIC8vIEFtb3VudCBvZiBldGhlciB5ZXQgdG8gYmUgcGFpZCBwZXIgYmVuZWZpY2lhcnkuCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBhZGRyZXNzVG9FdGhlck93ZWQ7CiAgICAKICAgIC8vLyBAZGV2IFJlcHJlc2VudHMgYSBkZWVkIGF1Y3Rpb24uCiAgICAvLy8gQ2FyZSBoYXMgYmVlbiB0YWtlbiB0byBlbnN1cmUgdGhlIGF1Y3Rpb24gZml0cyBpbgogICAgLy8vIHR3byAyNTYtYml0IHdvcmRzLgogICAgc3RydWN0IEF1Y3Rpb24gewogICAgICAgIGFkZHJlc3Mgc2VsbGVyOwogICAgICAgIHVpbnQxMjggc3RhcnRQcmljZTsKICAgICAgICB1aW50MTI4IGVuZFByaWNlOwogICAgICAgIHVpbnQ2NCBkdXJhdGlvbjsKICAgICAgICB1aW50NjQgc3RhcnRlZEF0OwogICAgfQoKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gQXVjdGlvbikgaWRlbnRpZmllclRvQXVjdGlvbjsKICAgIAogICAgLy8gRXZlbnRzCiAgICBldmVudCBBdWN0aW9uQ3JlYXRlZChhZGRyZXNzIGluZGV4ZWQgc2VsbGVyLCB1aW50MjU2IGluZGV4ZWQgZGVlZElkLCB1aW50MjU2IHN0YXJ0UHJpY2UsIHVpbnQyNTYgZW5kUHJpY2UsIHVpbnQyNTYgZHVyYXRpb24pOwogICAgZXZlbnQgQXVjdGlvblN1Y2Nlc3NmdWwoYWRkcmVzcyBpbmRleGVkIGJ1eWVyLCB1aW50MjU2IGluZGV4ZWQgZGVlZElkLCB1aW50MjU2IHRvdGFsUHJpY2UpOwogICAgZXZlbnQgQXVjdGlvbkNhbmNlbGxlZCh1aW50MjU2IGluZGV4ZWQgZGVlZElkKTsKICAgIAogICAgLy8vIEBkZXYgTW9kaWZpZXIgdG8gY2hlY2sgd2hldGhlciB0aGUgdmFsdWUgY2FuIGJlIHN0b3JlZCBpbiBhIDY0IGJpdCB1aW50LgogICAgbW9kaWZpZXIgZml0c0luNjRCaXRzKHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgcmVxdWlyZSAoX3ZhbHVlID09IHVpbnQyNTYodWludDY0KF92YWx1ZSkpKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvLy8gQGRldiBNb2RpZmllciB0byBjaGVjayB3aGV0aGVyIHRoZSB2YWx1ZSBjYW4gYmUgc3RvcmVkIGluIGEgMTI4IGJpdCB1aW50LgogICAgbW9kaWZpZXIgZml0c0luMTI4Qml0cyh1aW50MjU2IF92YWx1ZSkgewogICAgICAgIHJlcXVpcmUgKF92YWx1ZSA9PSB1aW50MjU2KHVpbnQxMjgoX3ZhbHVlKSkpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIENsb2NrQXVjdGlvbkJhc2UoYWRkcmVzcyBfZGVlZENvbnRyYWN0QWRkcmVzcywgdWludDI1NiBfZmVlKSBwdWJsaWMgewogICAgICAgIGRlZWRDb250cmFjdCA9IEVSQzcyMShfZGVlZENvbnRyYWN0QWRkcmVzcyk7CiAgICAgICAgCiAgICAgICAgLy8gQ29udHJhY3QgbXVzdCBpbmRpY2F0ZSBzdXBwb3J0IGZvciBFUkM3MjEgdGhyb3VnaCBpdHMgaW50ZXJmYWNlIHNpZ25hdHVyZS4KICAgICAgICByZXF1aXJlKGRlZWRDb250cmFjdC5zdXBwb3J0c0ludGVyZmFjZSgweGRhNjcxYjliKSk7CiAgICAgICAgCiAgICAgICAgLy8gRmVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAlLgogICAgICAgIHJlcXVpcmUoMCA8PSBfZmVlICYmIF9mZWUgPD0gMTAwMDAwKTsKICAgICAgICBmZWUgPSBfZmVlOwogICAgfQogICAgCiAgICAvLy8gQGRldiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gYXVjdGlvbiBpcyBhY3RpdmUuCiAgICAvLy8gQHBhcmFtIGF1Y3Rpb24gVGhlIGF1Y3Rpb24gdG8gY2hlY2sgZm9yIGFjdGl2aXR5LgogICAgZnVuY3Rpb24gX2FjdGl2ZUF1Y3Rpb24oQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24pIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBhdWN0aW9uLnN0YXJ0ZWRBdCA+IDA7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFB1dCB0aGUgZGVlZCBpbnRvIGVzY3JvdywgdGhlcmVieSB0YWtpbmcgb3duZXJzaGlwIG9mIGl0LgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBkZWVkIHRvIHBsYWNlIGludG8gZXNjcm93LgogICAgZnVuY3Rpb24gX2VzY3Jvdyh1aW50MjU2IF9kZWVkSWQpIGludGVybmFsIHsKICAgICAgICAvLyBUaHJvd3MgaWYgdGhlIHRyYW5zZmVyIGZhaWxzCiAgICAgICAgZGVlZENvbnRyYWN0LnRha2VPd25lcnNoaXAoX2RlZWRJZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IENyZWF0ZSB0aGUgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCB0byBjcmVhdGUgdGhlIGF1Y3Rpb24gZm9yLgogICAgLy8vIEBwYXJhbSBhdWN0aW9uIFRoZSBhdWN0aW9uIHRvIGNyZWF0ZS4KICAgIGZ1bmN0aW9uIF9jcmVhdGVBdWN0aW9uKHVpbnQyNTYgX2RlZWRJZCwgQXVjdGlvbiBhdWN0aW9uKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gQWRkIHRoZSBhdWN0aW9uIHRvIHRoZSBhdWN0aW9uIG1hcHBpbmcuCiAgICAgICAgaWRlbnRpZmllclRvQXVjdGlvbltfZGVlZElkXSA9IGF1Y3Rpb247CiAgICAgICAgCiAgICAgICAgLy8gVHJpZ2dlciBhdWN0aW9uIGNyZWF0ZWQgZXZlbnQuCiAgICAgICAgQXVjdGlvbkNyZWF0ZWQoYXVjdGlvbi5zZWxsZXIsIF9kZWVkSWQsIGF1Y3Rpb24uc3RhcnRQcmljZSwgYXVjdGlvbi5lbmRQcmljZSwgYXVjdGlvbi5kdXJhdGlvbik7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEJpZCBvbiBhbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfYnV5ZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGJ1eWVyLgogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIHZhbHVlIHNlbnQgYnkgdGhlIHNlbmRlciAoaW4gZXRoZXIpLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBkZWVkIHRvIGJpZCBvbi4KICAgIGZ1bmN0aW9uIF9iaWQoYWRkcmVzcyBfYnV5ZXIsIHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IF9kZWVkSWQpIGludGVybmFsIHsKICAgICAgICBBdWN0aW9uIHN0b3JhZ2UgYXVjdGlvbiA9IGlkZW50aWZpZXJUb0F1Y3Rpb25bX2RlZWRJZF07CiAgICAgICAgCiAgICAgICAgLy8gVGhlIGF1Y3Rpb24gbXVzdCBiZSBhY3RpdmUuCiAgICAgICAgcmVxdWlyZShfYWN0aXZlQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhdWN0aW9uJ3MgY3VycmVudCBwcmljZS4KICAgICAgICB1aW50MjU2IHByaWNlID0gX2N1cnJlbnRQcmljZShhdWN0aW9uKTsKICAgICAgICAKICAgICAgICAvLyBNYWtlIHN1cmUgZW5vdWdoIGZ1bmRzIHdlcmUgc2VudC4KICAgICAgICByZXF1aXJlKF92YWx1ZSA+PSBwcmljZSk7CiAgICAgICAgCiAgICAgICAgYWRkcmVzcyBzZWxsZXIgPSBhdWN0aW9uLnNlbGxlcjsKICAgIAogICAgICAgIGlmIChwcmljZSA+IDApIHsKICAgICAgICAgICAgdWludDI1NiB0b3RhbEZlZSA9IF9jYWxjdWxhdGVGZWUocHJpY2UpOwogICAgICAgICAgICB1aW50MjU2IHByb2NlZWRzID0gcHJpY2UgLSB0b3RhbEZlZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFzc2lnbiB0aGUgcHJvY2VlZHMgdG8gdGhlIHNlbGxlci4KICAgICAgICAgICAgLy8gV2UgZG8gbm90IHNlbmQgdGhlIHByb2NlZWRzIGRpcmVjdGx5LCBhcyB0byBwcmV2ZW50CiAgICAgICAgICAgIC8vIG1hbGljaW91cyBzZWxsZXJzIGZyb20gZGVueWluZyBhdWN0aW9ucyAoYW5kIGJ1cm5pbmcKICAgICAgICAgICAgLy8gdGhlIGJ1eWVyJ3MgZ2FzKS4KICAgICAgICAgICAgX2Fzc2lnblByb2NlZWRzKHNlbGxlciwgcHJvY2VlZHMpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBBdWN0aW9uU3VjY2Vzc2Z1bChfYnV5ZXIsIF9kZWVkSWQsIHByaWNlKTsKICAgICAgICAKICAgICAgICAvLyBUaGUgYmlkIHdhcyB3b24hCiAgICAgICAgX3dpbkJpZChzZWxsZXIsIF9idXllciwgX2RlZWRJZCwgcHJpY2UpOwogICAgICAgIAogICAgICAgIC8vIFJlbW92ZSB0aGUgYXVjdGlvbiAod2UgZG8gdGhpcyBhdCB0aGUgZW5kLCBhcwogICAgICAgIC8vIHdpbkJpZCBtaWdodCByZXF1aXJlIHNvbWUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgICAgIC8vIHRoYXQgd2lsbCBiZSByZW1vdmVkIHdoZW4gX3JlbW92ZUF1Y3Rpb24gaXMKICAgICAgICAvLyBjYWxsZWQuIEFzIHdlIGRvIG5vdCB0cmFuc2ZlciBmdW5kcyBoZXJlLCB3ZSBkbwogICAgICAgIC8vIG5vdCBoYXZlIHRvIHdvcnJ5IGFib3V0IHJlLWVudHJ5IGF0dGFja3MuCiAgICAgICAgX3JlbW92ZUF1Y3Rpb24oX2RlZWRJZCk7CiAgICB9CgogICAgLy8vIEBkZXYgUGVyZm9ybSB0aGUgYmlkIHdpbiBsb2dpYyAoaW4gdGhpcyBjYXNlOiB0cmFuc2ZlciB0aGUgZGVlZCkuCiAgICAvLy8gQHBhcmFtIF9zZWxsZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbGxlci4KICAgIC8vLyBAcGFyYW0gX3dpbm5lciBUaGUgYWRkcmVzcyBvZiB0aGUgd2lubmVyLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBkZWVkLgogICAgLy8vIEBwYXJhbSBfcHJpY2UgVGhlIHByaWNlIHRoZSBhdWN0aW9uIHdhcyBib3VnaHQgYXQuCiAgICBmdW5jdGlvbiBfd2luQmlkKGFkZHJlc3MgX3NlbGxlciwgYWRkcmVzcyBfd2lubmVyLCB1aW50MjU2IF9kZWVkSWQsIHVpbnQyNTYgX3ByaWNlKSBpbnRlcm5hbCB7CiAgICAgICAgX3RyYW5zZmVyKF93aW5uZXIsIF9kZWVkSWQpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBDYW5jZWwgYW4gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCBmb3Igd2hpY2ggdGhlIGF1Y3Rpb24gc2hvdWxkIGJlIGNhbmNlbGxlZC4KICAgIC8vLyBAcGFyYW0gYXVjdGlvbiBUaGUgYXVjdGlvbiB0byBjYW5jZWwuCiAgICBmdW5jdGlvbiBfY2FuY2VsQXVjdGlvbih1aW50MjU2IF9kZWVkSWQsIEF1Y3Rpb24gYXVjdGlvbikgaW50ZXJuYWwgewogICAgICAgIC8vIFJlbW92ZSB0aGUgYXVjdGlvbgogICAgICAgIF9yZW1vdmVBdWN0aW9uKF9kZWVkSWQpOwogICAgICAgIAogICAgICAgIC8vIFRyYW5zZmVyIHRoZSBkZWVkIGJhY2sgdG8gdGhlIHNlbGxlcgogICAgICAgIF90cmFuc2ZlcihhdWN0aW9uLnNlbGxlciwgX2RlZWRJZCk7CiAgICAgICAgCiAgICAgICAgLy8gVHJpZ2dlciBhdWN0aW9uIGNhbmNlbGxlZCBldmVudC4KICAgICAgICBBdWN0aW9uQ2FuY2VsbGVkKF9kZWVkSWQpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBSZW1vdmUgYW4gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCBmb3Igd2hpY2ggdGhlIGF1Y3Rpb24gc2hvdWxkIGJlIHJlbW92ZWQuCiAgICBmdW5jdGlvbiBfcmVtb3ZlQXVjdGlvbih1aW50MjU2IF9kZWVkSWQpIGludGVybmFsIHsKICAgICAgICBkZWxldGUgaWRlbnRpZmllclRvQXVjdGlvbltfZGVlZElkXTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgVHJhbnNmZXIgYSBkZWVkIG93bmVkIGJ5IHRoaXMgY29udHJhY3QgdG8gYW5vdGhlciBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdGhlIGRlZWQgdG8uCiAgICAvLy8gQHBhcmFtIF9kZWVkSWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIGRlZWQuCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2RlZWRJZCkgaW50ZXJuYWwgewogICAgICAgIC8vIFRocm93cyBpZiB0aGUgdHJhbnNmZXIgZmFpbHMKICAgICAgICBkZWVkQ29udHJhY3QudHJhbnNmZXIoX3RvLCBfZGVlZElkKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQXNzaWduIHByb2NlZWRzIHRvIGFuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byBhc3NpZ24gcHJvY2VlZHMgdG8uCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgcHJvY2VlZHMgdG8gYXNzaWduLgogICAgZnVuY3Rpb24gX2Fzc2lnblByb2NlZWRzKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIG91dHN0YW5kaW5nRXRoZXIgKz0gX3ZhbHVlOwogICAgICAgIGFkZHJlc3NUb0V0aGVyT3dlZFtfdG9dICs9IF92YWx1ZTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQ2FsY3VsYXRlIHRoZSBjdXJyZW50IHByaWNlIG9mIGFuIGF1Y3Rpb24uCiAgICBmdW5jdGlvbiBfY3VycmVudFByaWNlKEF1Y3Rpb24gc3RvcmFnZSBfYXVjdGlvbikgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gX2F1Y3Rpb24uc3RhcnRlZEF0KTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHNlY29uZHNQYXNzZWQgPSBub3cgLSBfYXVjdGlvbi5zdGFydGVkQXQ7CiAgICAgICAgCiAgICAgICAgaWYgKHNlY29uZHNQYXNzZWQgPj0gX2F1Y3Rpb24uZHVyYXRpb24pIHsKICAgICAgICAgICAgcmV0dXJuIF9hdWN0aW9uLmVuZFByaWNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIGlmIHRoZSBlbmQgcHJpY2UgaXMgaGlnaGVyIHRoYW4gdGhlIHN0YXJ0IHByaWNlIQogICAgICAgICAgICBpbnQyNTYgdG90YWxQcmljZUNoYW5nZSA9IGludDI1NihfYXVjdGlvbi5lbmRQcmljZSkgLSBpbnQyNTYoX2F1Y3Rpb24uc3RhcnRQcmljZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGN1cnJlbnQgcHJpY2UgYmFzZWQgb24gdGhlIHRvdGFsIGNoYW5nZSBvdmVyIHRoZSBlbnRpcmUKICAgICAgICAgICAgLy8gYXVjdGlvbiBkdXJhdGlvbiwgYW5kIHRoZSBhbW91bnQgb2YgdGltZSBwYXNzZWQgc2luY2UgdGhlIHN0YXJ0IG9mIHRoZQogICAgICAgICAgICAvLyBhdWN0aW9uLgogICAgICAgICAgICBpbnQyNTYgY3VycmVudFByaWNlQ2hhbmdlID0gdG90YWxQcmljZUNoYW5nZSAqIGludDI1NihzZWNvbmRzUGFzc2VkKSAvIGludDI1NihfYXVjdGlvbi5kdXJhdGlvbik7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGZpbmFsIHByaWNlLiBOb3RlIHRoaXMgb25jZSBhZ2FpbgogICAgICAgICAgICAvLyBpcyByZXByZXNlbnRhYmxlIGJ5IGEgdWludDI1NiwgYXMgdGhlIHByaWNlIGNhbgogICAgICAgICAgICAvLyBuZXZlciBiZSBuZWdhdGl2ZS4KICAgICAgICAgICAgaW50MjU2IHByaWNlID0gaW50MjU2KF9hdWN0aW9uLnN0YXJ0UHJpY2UpICsgY3VycmVudFByaWNlQ2hhbmdlOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gVGhpcyBuZXZlciB0aHJvd3MuCiAgICAgICAgICAgIGFzc2VydChwcmljZSA+PSAwKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KHByaWNlKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IENhbGN1bGF0ZSB0aGUgZmVlIGZvciBhIGdpdmVuIHByaWNlLgogICAgLy8vIEBwYXJhbSBfcHJpY2UgVGhlIHByaWNlIHRvIGNhbGN1bGF0ZSB0aGUgZmVlIGZvci4KICAgIGZ1bmN0aW9uIF9jYWxjdWxhdGVGZWUodWludDI1NiBfcHJpY2UpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIF9wcmljZSBpcyBndWFyYW50ZWVkIHRvIGZpdCBpbiBhIHVpbnQxMjggZHVlIHRvIHRoZSBjcmVhdGVBdWN0aW9uIGVudHJ5CiAgICAgICAgLy8gbW9kaWZpZXJzLCBzbyB0aGlzIGNhbm5vdCBvdmVyZmxvdy4KICAgICAgICByZXR1cm4gX3ByaWNlICogZmVlIC8gMTAwMDAwOwogICAgfQp9CgoKY29udHJhY3QgQ2xvY2tBdWN0aW9uIGlzIENsb2NrQXVjdGlvbkJhc2UsIFBhdXNhYmxlIHsKICAgIGZ1bmN0aW9uIENsb2NrQXVjdGlvbihhZGRyZXNzIF9kZWVkQ29udHJhY3RBZGRyZXNzLCB1aW50MjU2IF9mZWUpIAogICAgICAgIENsb2NrQXVjdGlvbkJhc2UoX2RlZWRDb250cmFjdEFkZHJlc3MsIF9mZWUpCiAgICAgICAgcHVibGljCiAgICB7fQogICAgCiAgICAvLy8gQG5vdGljZSBVcGRhdGUgdGhlIGF1Y3Rpb24gZmVlLgogICAgLy8vIEBwYXJhbSBfZmVlIFRoZSBuZXcgZmVlLgogICAgZnVuY3Rpb24gc2V0RmVlKHVpbnQyNTYgX2ZlZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKDAgPD0gX2ZlZSAmJiBfZmVlIDw9IDEwMDAwMCk7CiAgICAKICAgICAgICBmZWUgPSBfZmVlOwogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBHZXQgdGhlIGF1Y3Rpb24gZm9yIHRoZSBnaXZlbiBkZWVkLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBkZWVkIHRvIGdldCB0aGUgYXVjdGlvbiBmb3IuCiAgICAvLy8gQGRldiBUaHJvd3MgaWYgdGhlcmUgaXMgbm8gYXVjdGlvbiBmb3IgdGhlIGdpdmVuIGRlZWQuCiAgICBmdW5jdGlvbiBnZXRBdWN0aW9uKHVpbnQyNTYgX2RlZWRJZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICgKICAgICAgICAgICAgYWRkcmVzcyBzZWxsZXIsCiAgICAgICAgICAgIHVpbnQyNTYgc3RhcnRQcmljZSwKICAgICAgICAgICAgdWludDI1NiBlbmRQcmljZSwKICAgICAgICAgICAgdWludDI1NiBkdXJhdGlvbiwKICAgICAgICAgICAgdWludDI1NiBzdGFydGVkQXQKICAgICAgICApCiAgICB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSBpZGVudGlmaWVyVG9BdWN0aW9uW19kZWVkSWRdOwogICAgICAgIAogICAgICAgIC8vIFRoZSBhdWN0aW9uIG11c3QgYmUgYWN0aXZlCiAgICAgICAgcmVxdWlyZShfYWN0aXZlQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgYXVjdGlvbi5zZWxsZXIsCiAgICAgICAgICAgIGF1Y3Rpb24uc3RhcnRQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5lbmRQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5kdXJhdGlvbiwKICAgICAgICAgICAgYXVjdGlvbi5zdGFydGVkQXQKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENyZWF0ZSBhbiBhdWN0aW9uIGZvciBhIGdpdmVuIGRlZWQuCiAgICAvLy8gTXVzdCBwcmV2aW91c2x5IGhhdmUgYmVlbiBnaXZlbiBhcHByb3ZhbCB0byB0YWtlIG93bmVyc2hpcCBvZiB0aGUgZGVlZC4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCB0byBjcmVhdGUgYW4gYXVjdGlvbiBmb3IuCiAgICAvLy8gQHBhcmFtIF9zdGFydFByaWNlIFRoZSBzdGFydGluZyBwcmljZSBvZiB0aGUgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2VuZFByaWNlIFRoZSBlbmRpbmcgcHJpY2Ugb2YgdGhlIGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF9kdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gc2Vjb25kcyBvZiB0aGUgZHluYW1pYyBwcmljaW5nIHBhcnQgb2YgdGhlIGF1Y3Rpb24uCiAgICBmdW5jdGlvbiBjcmVhdGVBdWN0aW9uKHVpbnQyNTYgX2RlZWRJZCwgdWludDI1NiBfc3RhcnRQcmljZSwgdWludDI1NiBfZW5kUHJpY2UsIHVpbnQyNTYgX2R1cmF0aW9uKQogICAgICAgIHB1YmxpYwogICAgICAgIGZpdHNJbjEyOEJpdHMoX3N0YXJ0UHJpY2UpCiAgICAgICAgZml0c0luMTI4Qml0cyhfZW5kUHJpY2UpCiAgICAgICAgZml0c0luNjRCaXRzKF9kdXJhdGlvbikKICAgICAgICB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgLy8gR2V0IHRoZSBvd25lciBvZiB0aGUgZGVlZCB0byBiZSBhdWN0aW9uZWQKICAgICAgICBhZGRyZXNzIGRlZWRPd25lciA9IGRlZWRDb250cmFjdC5vd25lck9mKF9kZWVkSWQpOwogICAgCiAgICAgICAgLy8gQ2FsbGVyIG11c3QgZWl0aGVyIGJlIHRoZSBkZWVkIGNvbnRyYWN0IG9yIHRoZSBvd25lciBvZiB0aGUgZGVlZAogICAgICAgIC8vIHRvIHByZXZlbnQgYWJ1c2UuCiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBhZGRyZXNzKGRlZWRDb250cmFjdCkgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBkZWVkT3duZXIKICAgICAgICApOwogICAgCiAgICAgICAgLy8gVGhlIGR1cmF0aW9uIG9mIHRoZSBhdWN0aW9uIG11c3QgYmUgYXQgbGVhc3QgNjAgc2Vjb25kcy4KICAgICAgICByZXF1aXJlKF9kdXJhdGlvbiA+PSA2MCk7CiAgICAKICAgICAgICAvLyBUaHJvd3MgaWYgcGxhY2luZyB0aGUgZGVlZCBpbiBlc2Nyb3cgZmFpbHMgKHRoZSBjb250cmFjdCByZXF1aXJlcwogICAgICAgIC8vIHRyYW5zZmVyIGFwcHJvdmFsIHByaW9yIHRvIGNyZWF0aW5nIHRoZSBhdWN0aW9uKS4KICAgICAgICBfZXNjcm93KF9kZWVkSWQpOwogICAgICAgIAogICAgICAgIC8vIEF1Y3Rpb24gc3RydWN0CiAgICAgICAgQXVjdGlvbiBtZW1vcnkgYXVjdGlvbiA9IEF1Y3Rpb24oCiAgICAgICAgICAgIGRlZWRPd25lciwKICAgICAgICAgICAgdWludDEyOChfc3RhcnRQcmljZSksCiAgICAgICAgICAgIHVpbnQxMjgoX2VuZFByaWNlKSwKICAgICAgICAgICAgdWludDY0KF9kdXJhdGlvbiksCiAgICAgICAgICAgIHVpbnQ2NChub3cpCiAgICAgICAgKTsKICAgICAgICAKICAgICAgICBfY3JlYXRlQXVjdGlvbihfZGVlZElkLCBhdWN0aW9uKTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgQ2FuY2VsIGFuIGF1Y3Rpb24KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCB0byBjYW5jZWwgdGhlIGF1Y3Rpb24gZm9yLgogICAgZnVuY3Rpb24gY2FuY2VsQXVjdGlvbih1aW50MjU2IF9kZWVkSWQpIGV4dGVybmFsIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gaWRlbnRpZmllclRvQXVjdGlvbltfZGVlZElkXTsKICAgICAgICAKICAgICAgICAvLyBUaGUgYXVjdGlvbiBtdXN0IGJlIGFjdGl2ZS4KICAgICAgICByZXF1aXJlKF9hY3RpdmVBdWN0aW9uKGF1Y3Rpb24pKTsKICAgICAgICAKICAgICAgICAvLyBUaGUgYXVjdGlvbiBjYW4gb25seSBiZSBjYW5jZWxsZWQgYnkgdGhlIHNlbGxlcgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhdWN0aW9uLnNlbGxlcik7CiAgICAgICAgCiAgICAgICAgX2NhbmNlbEF1Y3Rpb24oX2RlZWRJZCwgYXVjdGlvbik7CiAgICB9CiAgICAKICAgIC8vLyBAbm90aWNlIEJpZCBvbiBhbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfZGVlZElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBkZWVkIHRvIGJpZCBvbi4KICAgIGZ1bmN0aW9uIGJpZCh1aW50MjU2IF9kZWVkSWQpIGV4dGVybmFsIHBheWFibGUgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgLy8gVGhyb3dzIGlmIHRoZSBiaWQgZG9lcyBub3Qgc3VjY2VlZC4KICAgICAgICBfYmlkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgX2RlZWRJZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFJldHVybnMgdGhlIGN1cnJlbnQgcHJpY2Ugb2YgYW4gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2RlZWRJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZGVlZCB0byBnZXQgdGhlIGN1cnJlbmN5IHByaWNlIGZvci4KICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQcmljZSh1aW50MjU2IF9kZWVkSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gaWRlbnRpZmllclRvQXVjdGlvbltfZGVlZElkXTsKICAgICAgICAKICAgICAgICAvLyBUaGUgYXVjdGlvbiBtdXN0IGJlIGFjdGl2ZS4KICAgICAgICByZXF1aXJlKF9hY3RpdmVBdWN0aW9uKGF1Y3Rpb24pKTsKICAgICAgICAKICAgICAgICByZXR1cm4gX2N1cnJlbnRQcmljZShhdWN0aW9uKTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgV2l0aGRyYXcgZXRoZXIgb3dlZCB0byBhIGJlbmVmaWNpYXJ5LgogICAgLy8vIEBwYXJhbSBiZW5lZmljaWFyeSBUaGUgYWRkcmVzcyB0byB3aXRoZHJhdyB0aGUgYXVjdGlvbiBiYWxhbmNlIGZvci4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3QXVjdGlvbkJhbGFuY2UoYWRkcmVzcyBiZW5lZmljaWFyeSkgZXh0ZXJuYWwgewogICAgICAgIC8vIFRoZSBzZW5kZXIgbXVzdCBlaXRoZXIgYmUgdGhlIGJlbmVmaWNpYXJ5IG9yIHRoZSBjb3JlIGRlZWQgY29udHJhY3QuCiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBiZW5lZmljaWFyeSB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGFkZHJlc3MoZGVlZENvbnRyYWN0KQogICAgICAgICk7CiAgICAgICAgCiAgICAgICAgdWludDI1NiBldGhlck93ZWQgPSBhZGRyZXNzVG9FdGhlck93ZWRbYmVuZWZpY2lhcnldOwogICAgICAgIAogICAgICAgIC8vIEVuc3VyZSBldGhlciBpcyBvd2VkIHRvIHRoZSBiZW5lZmljaWFyeS4KICAgICAgICByZXF1aXJlKGV0aGVyT3dlZCA+IDApOwogICAgICAgICAKICAgICAgICAvLyBTZXQgZXRoZXIgb3dlZCB0byAwICAgCiAgICAgICAgZGVsZXRlIGFkZHJlc3NUb0V0aGVyT3dlZFtiZW5lZmljaWFyeV07CiAgICAgICAgCiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0b3RhbCBvdXRzdGFuZGluZyBiYWxhbmNlLiBldGhlck93ZWQgaXMgZ3VhcmFudGVlZAogICAgICAgIC8vIHRvIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBvdXRzdGFuZGluZ0V0aGVyLCBzbyB0aGlzIGNhbm5vdAogICAgICAgIC8vIHVuZGVyZmxvdy4KICAgICAgICBvdXRzdGFuZGluZ0V0aGVyIC09IGV0aGVyT3dlZDsKICAgICAgICAKICAgICAgICAvLyBUcmFuc2ZlciBldGhlciBvd2VkIHRvIHRoZSBiZW5lZmljaWFyeSAobm90IHN1c2NlcHRpYmxlIHRvIHJlLWVudHJ5CiAgICAgICAgLy8gYXR0YWNrLCBhcyB0aGUgZXRoZXIgb3dlZCBpcyBzZXQgdG8gMCBiZWZvcmUgdGhlIHRyYW5zZmVyIHRha2VzIHBsYWNlKS4KICAgICAgICBiZW5lZmljaWFyeS50cmFuc2ZlcihldGhlck93ZWQpOwogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBXaXRoZHJhdyAodW5vd2VkKSBjb250cmFjdCBiYWxhbmNlLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGcmVlQmFsYW5jZSgpIGV4dGVybmFsIHsKICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGZyZWUgKHVub3dlZCkgYmFsYW5jZS4gVGhpcyBuZXZlciB1bmRlcmZsb3dzLCBhcwogICAgICAgIC8vIG91dHN0YW5kaW5nRXRoZXIgaXMgZ3VhcmFudGVlZCB0byBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlCiAgICAgICAgLy8gY29udHJhY3QgYmFsYW5jZS4KICAgICAgICB1aW50MjU2IGZyZWVCYWxhbmNlID0gdGhpcy5iYWxhbmNlIC0gb3V0c3RhbmRpbmdFdGhlcjsKICAgICAgICAKICAgICAgICBhZGRyZXNzIGRlZWRDb250cmFjdEFkZHJlc3MgPSBhZGRyZXNzKGRlZWRDb250cmFjdCk7CgogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gb3duZXIgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBkZWVkQ29udHJhY3RBZGRyZXNzCiAgICAgICAgKTsKICAgICAgICAKICAgICAgICBkZWVkQ29udHJhY3RBZGRyZXNzLnRyYW5zZmVyKGZyZWVCYWxhbmNlKTsKICAgIH0KfQoKCmNvbnRyYWN0IFNhbGVBdWN0aW9uIGlzIENsb2NrQXVjdGlvbiB7CiAgICBmdW5jdGlvbiBTYWxlQXVjdGlvbihhZGRyZXNzIF9kZWVkQ29udHJhY3RBZGRyZXNzLCB1aW50MjU2IF9mZWUpIENsb2NrQXVjdGlvbihfZGVlZENvbnRyYWN0QWRkcmVzcywgX2ZlZSkgcHVibGljIHt9CiAgICAKICAgIC8vLyBAZGV2IEFsbG93cyBvdGhlciBjb250cmFjdHMgdG8gY2hlY2sgd2hldGhlciB0aGlzIGlzIHRoZSBleHBlY3RlZCBjb250cmFjdC4KICAgIGJvb2wgcHVibGljIGlzU2FsZUF1Y3Rpb24gPSB0cnVlOwp9'.
	

]
