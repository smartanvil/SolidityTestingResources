Class {
	#name : #SRTd23075849abd2a8bbbb2dc8870978bbf7ac13fbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd23075849abd2a8bbbb2dc8870978bbf7ac13fbd >> base64 [
	^ ''.
	

]
