Class {
	#name : #SRTe0e3Fa169fC59DbB5ee29A3c19920BFdAB29480f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe0e3Fa169fC59DbB5ee29A3c19920BFdAB29480f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLwovLyA9PT09IERJU0NMQUlNRVIgPT09PQovLwovLyBFVEhFUkVVTSBJUyBTVElMTCBBTiBFWFBFUkVNRU5UQUwgVEVDSE5PTE9HWS4KLy8gQUxUSE9VR0ggVEhJUyBTTUFSVCBDT05UUkFDVCBXQVMgQ1JFQVRFRCBXSVRIIEdSRUFUIENBUkUgQU5EIElOIFRIRSBIT1BFIE9GIEJFSU5HIFVTRUZVTCwgTk8gR1VBUkFOVEVFUyBPRiBGTEFXTEVTUyBPUEVSQVRJT04gQ0FOIEJFIEdJVkVOLgovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLgovLyBZT1UgQVJFIFNUUk9OR0xZIEVOQ09VUkFHRUQgVE8gU1RVRFkgVEhJUyBTTUFSVCBDT05UUkFDVCBDQVJFRlVMTFkgSU4gT1JERVIgVE8gVU5ERVJTVEFORCBQT1NTSUJMRSBFREdFIENBU0VTIEFORCBSSVNLUy4KLy8gRE9OJ1QgVVNFIFRISVMgU01BUlQgQ09OVFJBQ1QgSUYgWU9VIEhBVkUgU1VCU1RBTlRJQUwgRE9VQlRTIE9SIElGIFlPVSBET04nVCBLTk9XIFdIQVQgWU9VIEFSRSBET0lORy4KLy8KLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQovLyBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsCi8vIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAovLyBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgovLyA9PT09Ci8vCi8vCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0KLy8gQSBjYXJlZnVsIHJlYWRlciB3aWxsIGZpbmQgc29tZSBhZGRpdGlvbmFsIGNoZWNrcyBhbmQgZXhjZXNzaXZlIGNvZGUsIGNvbnN1bWluZyBzb21lIGV4dHJhIGdhcy4gVGhpcyBpcyBpbnRlbnRpb25hbC4KLy8gRXZlbiB0aG91Z2ggdGhlIGNvbnRyYWN0IHNob3VsZCB3b3JrIHdpdGhvdXQgdGhlc2UgcGFydHMsIHRoZXkgbWFrZSB0aGUgY29kZSBtb3JlIHNlY3VyZSBpbiBwcm9kdWN0aW9uIGFuZCBmb3IgZnV0dXJlIHJlZmFjdG9yaW5nLgovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50LgovLyBEaXNjdXNzaW9uIGlzIHdlbGNvbWUhCi8vID09PT0KLy8KCi8vLyBAYXV0aG9yIGV0aGVybmlhbgovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjM3NTU0MjUwNDQ3NzUyNDM1ZjUyNDU1OTVlNTY1OTE5NTQ1ODVhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPgovLy8gQHRpdGxlIFByZXNhbGVyIFZvdGluZyBDb250cmFjdAoKY29udHJhY3QgVG9rZW5TdG9yYWdlIHsKICAgIGZ1bmN0aW9uIGJhbGFuY2VzKGFkZHJlc3MgYWNjb3VudCkgcHVibGljIHJldHVybnModWludCBiYWxhbmNlKTsKfQoKY29udHJhY3QgUHJlc2FsZXJWb3RpbmcgewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgVkVSU0lPTiA9ICIwLjAuNyI7CgogICAgLyogPT09PT09IGNvbmZpZ3VyYXRpb24gU1RBUlQgPT09PT09ICovCgogICAgdWludCBwdWJsaWMgVk9USU5HX1NUQVJUX0JMT0NLTlIgID0gMDsKICAgIHVpbnQgcHVibGljIFZPVElOR19FTkRfVElNRSAgICAgICA9IDA7CgogICAgLyogPT09PT09IGNvbmZpZ3VyYXRpb24gRU5EID09PT09PSAqLwoKICAgIFRva2VuU3RvcmFnZSBQUkVTQUxFX0NPTlRSQUNUID0gVG9rZW5TdG9yYWdlKDB4NEZkOTk3RWQ3YzEwRGJEMDRlOTVkMzczMGNkNzdENzk1MTMwNzZGMik7CgogICAgc3RyaW5nWzNdIHByaXZhdGUgc3RhdGVOYW1lcyA9IFsiQkVGT1JFX1NUQVJUIiwgICJWT1RJTkdfUlVOTklORyIsICJDTE9TRUQiIF07CiAgICBlbnVtIFN0YXRlIHsgQkVGT1JFX1NUQVJULCAgVk9USU5HX1JVTk5JTkcsIENMT1NFRCB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgcmF3Vm90ZXM7CgogICAgdWludCBwcml2YXRlIGNvbnN0YW50IE1BWF9BTU9VTlRfRVFVXzBfUEVSQ0VOVCAgID0gMTAgZmlubmV5OwogICAgdWludCBwcml2YXRlIGNvbnN0YW50IE1JTl9BTU9VTlRfRVFVXzEwMF9QRVJDRU5UID0gMSBldGhlciA7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT1RBTF9CT05VU19TVVBQTFlfRVRIID0gMTIwMDA7CgoKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3NbXSBwdWJsaWMgdm90ZXJzOwogICAgdWludDE2IHB1YmxpYyBzdGFrZVZvdGVkX0V0aDsKICAgIHVpbnQxNiBwdWJsaWMgc3Rha2VSZW1haW5pbmdUb1ZvdGVfRXRoOwogICAgdWludDE2IHB1YmxpYyBzdGFrZVdhaXZlZF9FdGg7CiAgICB1aW50MTYgcHVibGljIHN0YWtlQ29uZmlybWVkX0V0aDsKCiAgICAvL2NvbnN0cnVjdG9ycwogICAgZnVuY3Rpb24gUHJlc2FsZXJWb3RpbmcgKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvL2FjY2VwdCAoYW5kIHNlbmQgYmFjaykgdm90aW5nIHBheW1lbnRzIGhlcmUKICAgIGZ1bmN0aW9uICgpCiAgICBvbmx5U3RhdGUoU3RhdGUuVk9USU5HX1JVTk5JTkcpCiAgICBwYXlhYmxlIHsKICAgICAgICB1aW50IGJvbnVzVm90ZWQ7CiAgICAgICAgdWludCBib251cyA9IFBSRVNBTEVfQ09OVFJBQ1QuYmFsYW5jZXMobXNnLnNlbmRlcik7CiAgICAgICAgYXNzZXJ0IChib251cyA+IDApOyAvLyBvbmx5IHByZXNhbGVyIGFsbG93ZWQgaW4uCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDEgZXRoZXIgfHwgIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsKICAgICAgICBpZiAocmF3Vm90ZXNbbXNnLnNlbmRlcl0gPT0gMCkgewogICAgICAgICAgICB2b3RlcnMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgc3Rha2VWb3RlZF9FdGggKz0gdWludDE2KGJvbnVzIC8gMSBldGhlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9jbGVhciBzdGF0aXN0aWsgcmVsYXRlZCB0byBvbGQgdm90aW5nIHN0YXRlIGZvciB0aGlzIHNlbmRlcgogICAgICAgICAgICBib251c1ZvdGVkICAgICAgICAgICA9IHZvdGVkUGVyQ2VudChtc2cuc2VuZGVyKSAqIGJvbnVzIC8gMTAwOwogICAgICAgICAgICBzdGFrZVdhaXZlZF9FdGggICAgIC09IHVpbnQxNigoYm9udXMgLSBib251c1ZvdGVkKSAvIDEgZXRoZXIpOwogICAgICAgICAgICBzdGFrZUNvbmZpcm1lZF9FdGggIC09IHVpbnQxNihib251c1ZvdGVkIC8gMSBldGhlcik7CiAgICAgICAgfQogICAgICAgIC8vc3BlY2lhbCB0cmVhdG1lbnQgZm9yIDAtZXRoZXIgcGF5bWVudAogICAgICAgIHJhd1ZvdGVzW21zZy5zZW5kZXJdID0gbXNnLnZhbHVlID4gMCA/IG1zZy52YWx1ZSA6IDEgd2VpOwoKICAgICAgICBib251c1ZvdGVkICAgICAgICAgICA9IHZvdGVkUGVyQ2VudChtc2cuc2VuZGVyKSAqIGJvbnVzIC8gMTAwOwogICAgICAgIHN0YWtlV2FpdmVkX0V0aCAgICAgKz0gdWludDE2KChib251cyAtIGJvbnVzVm90ZWQpIC8gMSBldGhlcik7CiAgICAgICAgc3Rha2VDb25maXJtZWRfRXRoICArPSB1aW50MTYoYm9udXNWb3RlZCAvIDEgZXRoZXIpOwoKICAgICAgICBzdGFrZVJlbWFpbmluZ1RvVm90ZV9FdGggLT0gdWludDE2KFRPVEFMX0JPTlVTX1NVUFBMWV9FVEggLSBzdGFrZUNvbmZpcm1lZF9FdGgpOwoKICAgIH0KCiAgICBmdW5jdGlvbiB2b3RlcnNMZW4oKSBleHRlcm5hbCByZXR1cm5zICh1aW50KSB7IHJldHVybiB2b3RlcnMubGVuZ3RoOyB9CgogICAgLy8vIEBub3RpY2Ugc3RhcnQgdm90aW5nIGF0IGBzdGFydEJsb2NrTnJgIGZvciBgZHVyYXRpb25IcnNgLgogICAgLy8vIFJlc3RyaWN0ZWQgZm9yIG93bmVyIG9ubHkuCiAgICAvLy8gQHBhcmFtIHN0YXJ0QmxvY2tOciBibG9jayBudW1iZXIgdG8gc3RhcnQgdm90aW5nOyBzdGFydHMgaW1tZWRpYXRseSBpZiBsZXNzIHRoYW4gY3VycmVudCBibG9jayBudW1iZXIuCiAgICAvLy8gQHBhcmFtIGR1cmF0aW9uSHJzIHZvdGluZyBkdXJhdGlvbiAoZnJvbSBub3chKTsgYXQgbGVhc3QgMSBob3VyLgogICAgZnVuY3Rpb24gc3RhcnRWb3RpbmcodWludCBzdGFydEJsb2NrTnIsIHVpbnQgZHVyYXRpb25IcnMpIG9ubHlPd25lciB7CiAgICAgICAgVk9USU5HX1NUQVJUX0JMT0NLTlIgPSBtYXgoYmxvY2subnVtYmVyLCBzdGFydEJsb2NrTnIpOwogICAgICAgIFZPVElOR19FTkRfVElNRSA9IG5vdyArIG1heChkdXJhdGlvbkhycywxKSAqIDEgaG91cnM7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsgb3duZXIgPSBuZXdPd25lcjsgfQoKICAgIC8vLyBAbm90aWNlIHJldHVybnMgY3VycmVudCB2b3RpbmcgcmVzdWx0IGZvciBnaXZlbiBhZGRyZXNzIGluIHBlcmNlbnQuCiAgICAvLy8gQHBhcmFtIHZvdGVyIGJhbGFuY2UgaG9sZGVyIGFkZHJlc3MuCiAgICBmdW5jdGlvbiB2b3RlZFBlckNlbnQoYWRkcmVzcyB2b3RlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB2YXIgcmF3Vm90ZSA9IHJhd1ZvdGVzW3ZvdGVyXTsKICAgICAgICBpZiAocmF3Vm90ZSA8IE1BWF9BTU9VTlRfRVFVXzBfUEVSQ0VOVCkgcmV0dXJuIDA7CiAgICAgICAgZWxzZSBpZiAocmF3Vm90ZSA+PSBNSU5fQU1PVU5UX0VRVV8xMDBfUEVSQ0VOVCkgcmV0dXJuIDEwMDsKICAgICAgICBlbHNlIHJldHVybiByYXdWb3RlICogMTAwIC8gMSBldGhlcjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSByZXR1cm4gdm90aW5nIHJlbWFpbmluZyB0aW1lIChob3VycywgbWludXRlcykuCiAgICBmdW5jdGlvbiB2b3RpbmdFbmRzSW5ISE1NKCkgY29uc3RhbnQgcmV0dXJucyAodWludDgsIHVpbnQ4KSB7CiAgICAgICAgdmFyIHRzZWMgPSBWT1RJTkdfRU5EX1RJTUUgLSBub3c7CiAgICAgICAgcmV0dXJuIFZPVElOR19FTkRfVElNRT09MCA/ICgwLDApIDogKHVpbnQ4KHRzZWMgLyAxIGhvdXJzKSwgdWludDgodHNlYyAlIDEgaG91cnMgLyAxIG1pbnV0ZXMpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjdXJyZW50U3RhdGUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgewogICAgICAgIGlmIChWT1RJTkdfU1RBUlRfQkxPQ0tOUiA9PSAwIHx8IGJsb2NrLm51bWJlciA8IFZPVElOR19TVEFSVF9CTE9DS05SKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5CRUZPUkVfU1RBUlQ7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gVk9USU5HX0VORF9USU1FKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5WT1RJTkdfUlVOTklORzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuQ0xPU0VEOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSByZXR1cm5zIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHZvdGluZy4KICAgIGZ1bmN0aW9uIHN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0YXRlTmFtZXNbdWludChjdXJyZW50U3RhdGUoKSldOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCBtYXhWYWx1ZSkgeyByZXR1cm4gYT5iID8gYSA6IGI7IH0KCiAgICBtb2RpZmllciBvbmx5U3RhdGUoU3RhdGUgc3RhdGUpIHsKICAgICAgICBpZiAoY3VycmVudFN0YXRlKCkhPXN0YXRlKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciE9b3duZXIpIHRocm93OwogICAgICAgIF87CiAgICB9Cgp9Ly9jb250cmFjdA=='.
	

]
