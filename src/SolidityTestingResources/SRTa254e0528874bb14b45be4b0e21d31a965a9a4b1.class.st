Class {
	#name : #SRTa254e0528874bb14b45be4b0e21d31a965a9a4b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa254e0528874bb14b45be4b0e21d31a965a9a4b1 >> base64 [
	^ ''.
	

]
