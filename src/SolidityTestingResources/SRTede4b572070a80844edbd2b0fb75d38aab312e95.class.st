Class {
	#name : #SRTede4b572070a80844edbd2b0fb75d38aab312e95,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTede4b572070a80844edbd2b0fb75d38aab312e95 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgppbnRlcmZhY2UgdG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKY29udHJhY3QgQ3Jvd2RzYWxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTID0gMHg0RjFGYTZGNTUzQUY0Njk2ZjAwRkNhZDZmNDk1RDNGMWVCMUJFMmZlOyAgIC8vIFNTT1QgSGVhbHRoIEZ1bmRzIGFkZHJlc3MKICAgIGFkZHJlc3MgcHVibGljIFNFSFJfV0FMTEVUX0FERFJFU1MgPSAweGNBMDI3YkYyMTc5MzI1QjlEMzE2ODljZGJGYmYyNDJhRjM0Yzc5REU7ICAgICAgICAvLyBTRUhSIE1haW4gdG9rZW4gd2FsbGV0CiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQgPSB0b2tlbigweEU4Yzg4MTQyMkNBNGMyYWI5YTliQzlkNThlNzUxNzhlMGUyOGVFZDUpOyAgICAgICAgICAgLy8gU0VIUiBjb250cmFjdCBhZGRyZXNzCiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbCA9IDEwMDAwMDAwMCAqIDEgZXRoZXI7ICAvLyAxMDAsMDAwLDAwMCBTRUhScyBzb2Z0Y2FwIAogICAgdWludCBwdWJsaWMgaGFyZENhcCA9IDUwMDAwMDAwMCAqIDEgZXRoZXI7ICAgICAgLy8gNTAwLDAwMCwwMDAgU0VIUnMgaGFyZGNhcAogICAgdWludCBwdWJsaWMgYW1vdW50UmFpc2VkID0gMDsKICAgIHVpbnQgcHVibGljIHNlaHJSYWlzZWQgPSAwOwogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lOwogICAgdWludCBwdWJsaWMgZGVhZGxpbmU7CiAgICB1aW50IHB1YmxpYyBwcmljZSA9IDgwIHN6YWJvOyAgICAgICAgICAgICAgICAgICAvLyAwLjAwMDA4IEVUSC9TRUhSICA7IDEgc3phYm8gPSAxMF4tNiBFdGhlcgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICAKICAgIGJvb2wgcHVibGljIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBjaGVja0RvbmUgPSBmYWxzZTsKCiAgICBldmVudCBHb2FsUmVhY2hlZChhZGRyZXNzIHJlY2lwaWVudCwgdWludCB0b3RhbEFtb3VudFJhaXNlZCk7CiAgICBldmVudCBGdW5kVHJhbnNmZXIoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50LCBib29sIGlzQ29udHJpYnV0aW9uKTsKCiAgICAvKioKICAgICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgICAgKgogICAgICogU2V0dXAgdGhlIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIENyb3dkc2FsZSgpIHB1YmxpYwogICAgewogICAgICAgIHN0YXJ0VGltZSA9IG5vdzsKICAgICAgICBkZWFkbGluZSA9IG5vdyArIDYyIGRheXM7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgCiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lKCkgeyBpZiAobm93ID49IGRlYWRsaW5lKSBfOyB9CiAgICBtb2RpZmllciBiZWZvcmVEZWFkbGluZSgpIHsgaWYgKG5vdyA8IGRlYWRsaW5lKSBfOyB9CiAgICBtb2RpZmllciBpc0Nyb3dkc2FsZSgpIHsgaWYgKCFjcm93ZHNhbGVDbG9zZWQpIF87IH0KICAgIG1vZGlmaWVyIGlzQ2hlY2tEb25lKCkgeyBpZiAoY2hlY2tEb25lKSBfOyB9CgogICAgLyoqCiAgICAgKiBGYWxsYmFjayBmdW5jdGlvbgogICAgICoKICAgICAqIFRoZSBmdW5jdGlvbiB3aXRob3V0IG5hbWUgaXMgdGhlIGRlZmF1bHQgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55b25lIHNlbmRzIGZ1bmRzIHRvIGEgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBpc0Nyb3dkc2FsZSBiZWZvcmVEZWFkbGluZSBwdWJsaWMgewogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIAogICAgICAgIGlmKGFtb3VudCA9PSAwICkgcmV2ZXJ0KCk7ICAgLy8gTmVlZCB0byBzZW5kIHNvbWUgZXRoZXIgYXQgbGVhc3QKICAgICAgICBlbHNlIGlmKCBhbW91bnQgPCAyNTAgZmlubmV5KSB7CiAgICAgICAgICAgIGlmIChzZWhyUmFpc2VkIDwgZnVuZGluZ0dvYWwpIHsKICAgICAgICAgICAgICAgIGlmKG5vdyA8IHN0YXJ0VGltZSArIDMxIGRheXMpIHJldmVydCgpOyAgICAvLyBOZWVkIHRvIGludmVzdCBhdCBsZWFzdCAwLjI1IEV0aGVyIGR1cmluZyB0aGUgcHJlLXNhbGUgaWYgdGhlIGZ1bmRpbmcgZ29hbCBoYXNuJ3QgYmVlbiByZWFjaGVkIHlldAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHVpbnQgdG9rZW5BbW91bnQgPSAoYW1vdW50IC8gcHJpY2UpICogMSBldGhlcjsgLy8gV2UgY29tcHV0ZSB0aGUgbnVtYmVyIG9mIHRva2VucyB0byBpc3N1ZQogICAgICAgIAogICAgICAgIGlmKHNlaHJSYWlzZWQgPCBmdW5kaW5nR29hbCkgeyAgLy8gQm9udXMgYXZhaWxhYmxlIGZvciBhbnkgdG9rZW5zIGJvdWdodCBiZWZvcmUgc29mdGNhcCBpcyByZWFjaGVkCiAgICAgICAgICAgIAogICAgICAgICAgICBpZihub3cgPCBzdGFydFRpbWUgKyAxMCBkYXlzKSB7CiAgICAgICAgICAgICAgICB0b2tlbkFtb3VudCA9ICgxMyAqIHRva2VuQW1vdW50KSAvIDEwOyAvLyAzMCUgYm9udXMgZHVyaW5nIHRoZSBmaXJzdCAxMC1kYXkgcGVyaW9kCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2UgaWYobm93IDwgc3RhcnRUaW1lICsgMjAgZGF5cykgewogICAgICAgICAgICAgICAgdG9rZW5BbW91bnQgPSAoMTIgKiB0b2tlbkFtb3VudCkgLyAxMDsgICAgIC8vIDIwJSBib251cyBkdXJpbmcgdGhlIHNlY29uZCAxMC1kYXkgcGVyaW9kCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2UgaWYobm93IDwgc3RhcnRUaW1lICsgMzEgZGF5cykgewogICAgICAgICAgICAgICAgdG9rZW5BbW91bnQgPSAoMTEgKiB0b2tlbkFtb3VudCkgLyAxMDsgICAgIC8vIDEwJSBib251cyBkdXJpbmcgdGhlIHRoaXJkIDEwLWRheSBwZXJpb2QKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgICAgIGFtb3VudFJhaXNlZCArPSBhbW91bnQ7CiAgICAgICAgc2VoclJhaXNlZCArPSB0b2tlbkFtb3VudDsKICAgICAgICAKICAgICAgICB0b2tlblJld2FyZC50cmFuc2ZlckZyb20oU0VIUl9XQUxMRVRfQUREUkVTUywgbXNnLnNlbmRlciwgdG9rZW5BbW91bnQpOyAvLyB3aWxsIGF1dG9tYXRpY2FsbHkgdGhyb3cgaXMgdGhlcmUgYXJlIG5vdCBlbm91Z2ggZnVuZHMgcmVtYWluaW5nIGluIHRoZSBjb250cmFjdAogICAgICAgIGVtaXQgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CiAgICB9CgoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgZ29hbCB3YXMgcmVhY2hlZAogICAgICoKICAgICAqIENoZWNrcyBpZiB0aGUgZ29hbCBvciB0aW1lIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQgYW5kIGVuZHMgdGhlIGNhbXBhaWduCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrR29hbFJlYWNoZWQoKSBhZnRlckRlYWRsaW5lIHB1YmxpYyB7CiAgICAgICAgaWYgKHNlaHJSYWlzZWQgPj0gZnVuZGluZ0dvYWwpewogICAgICAgICAgICBmdW5kaW5nR29hbFJlYWNoZWQgPSB0cnVlOwogICAgICAgICAgICBlbWl0IEdvYWxSZWFjaGVkKFNTT1RIRUFMVEhfRlVORFNfQUREUkVTUywgYW1vdW50UmFpc2VkKTsKICAgICAgICB9CiAgICAgICAgY3Jvd2RzYWxlQ2xvc2VkID0gdHJ1ZTsKICAgICAgICBjaGVja0RvbmUgPSB0cnVlOwogICAgfQoKCiAgICAvKioKICAgICAqIFdpdGhkcmF3IHRoZSBmdW5kcwogICAgICoKICAgICAqIENoZWNrcyB0byBzZWUgaWYgZ29hbCBvciB0aW1lIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQsIGFuZCBpZiBzbywgYW5kIHRoZSBmdW5kaW5nIGdvYWwgd2FzIHJlYWNoZWQsCiAgICAgKiBzZW5kcyB0aGUgZW50aXJlIGFtb3VudCB0byB0aGUgYmVuZWZpY2lhcnkuIElmIGdvYWwgd2FzIG5vdCByZWFjaGVkLCBlYWNoIGNvbnRyaWJ1dG9yIGNhbiB3aXRoZHJhdwogICAgICogdGhlIGFtb3VudCB0aGV5IGNvbnRyaWJ1dGVkLgogICAgICovCiAgICBmdW5jdGlvbiBzYWZlV2l0aGRyYXdhbCgpIGFmdGVyRGVhZGxpbmUgaXNDaGVja0RvbmUgcHVibGljewogICAgICAgIGlmICghZnVuZGluZ0dvYWxSZWFjaGVkKSB7CiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdOwogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChhbW91bnQpKSB7CiAgICAgICAgICAgICAgICAgICAgZW1pdCBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGFtb3VudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGZ1bmRpbmdHb2FsUmVhY2hlZCAmJiBTU09USEVBTFRIX0ZVTkRTX0FERFJFU1MgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICBpZiAoU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTLnNlbmQoYW1vdW50UmFpc2VkKSkgewogICAgICAgICAgICAgICAgZW1pdCBGdW5kVHJhbnNmZXIoU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTLCBhbW91bnRSYWlzZWQsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vSWYgd2UgZmFpbCB0byBzZW5kIHRoZSBmdW5kcyB0byBiZW5lZmljaWFyeSwgdW5sb2NrIGZ1bmRlcnMgYmFsYW5jZQogICAgICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGhhcmRDYXBSZWFjaGVkKCkgcHVibGljIHsKICAgICAgICBpZihzZWhyUmFpc2VkID09IGhhcmRDYXApIHsKICAgICAgICAgICAgZGVhZGxpbmUgPSBub3c7CiAgICAgICAgfQogICAgICAgIGVsc2UgcmV2ZXJ0KCk7CiAgICB9Cn0='.
	

]
