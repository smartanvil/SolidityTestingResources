Class {
	#name : #SRTbaca9c2faf03898fc5197ee90efb6e13df7f1d55,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbaca9c2faf03898fc5197ee90efb6e13df7f1d55 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgewogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcygpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsKfQoKbGlicmFyeSBNYXRoIHsKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQp9Cgpjb250cmFjdCBPcmFjbGl6ZUkgewogICAgYWRkcmVzcyBwdWJsaWMgY2JBZGRyZXNzOwogICAgZnVuY3Rpb24gcXVlcnkodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcHVibGljICBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Mih1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcxLCBzdHJpbmcgX2FyZzIpIHB1YmxpYyAgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTJfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMiwgdWludCBfZ2FzbGltaXQpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tih1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgYnl0ZXMgX2FyZ04pIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tl93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOLCB1aW50IF9nYXNsaW1pdCkgcHVibGljIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlKSBwdWJsaWMgcmV0dXJucyAodWludCBfZHNwcmljZSk7CiAgICBmdW5jdGlvbiBnZXRQcmljZShzdHJpbmcgX2RhdGFzb3VyY2UsIHVpbnQgZ2FzbGltaXQpIHB1YmxpYyByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiByYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIHB1YmxpYyByZXR1cm5zKGJ5dGVzMzIpOwp9Cgpjb250cmFjdCBQcmljZWFibGUgewogICAgbW9kaWZpZXIgY29zdHNFeGFjdGx5KHVpbnQgcHJpY2UpIHsKICAgICAgICBpZiAobXNnLnZhbHVlID09IHByaWNlKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfQogICAgfQoKICAgIG1vZGlmaWVyIGNvc3RzKHVpbnQgcHJpY2UpIHsKICAgICAgICBpZiAobXNnLnZhbHVlID49IHByaWNlKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfQogICAgfQp9Cgpjb250cmFjdCBGdWxsRVJDMjAgewogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogIAogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7Cn0KCmxpYnJhcnkgT3JhY2xpemVMaWIgewogICAKICAgIHN0cnVjdCBPcmFjbGl6ZURhdGEgewogICAgICAgIE9yYWNsaXplQWRkclJlc29sdmVySSBvcmFjbGl6ZUFkZHJlc3NSZXNvbHZlcjsKICAgICAgICBPcmFjbGl6ZUkgb3JhY2xpemU7CiAgICAgICAgbWFwcGluZyhieXRlczMyPT5ieXRlczMyKSBvcmFjbGl6ZVJhbmRvbURTQXJnczsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzI9PmJvb2wpIG9yYWNsaXplUmFuZG9tRHNTZXNzaW9uS2V5SGFzaFZlcmlmaWVkOwogICAgICAgIHN0cmluZyBvcmFjbGl6ZU5ldHdvcmtOYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGluaXRpYWxpemVPcmFjbGl6ZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmKSBpbnRlcm5hbCB7CiAgICAgICBzZWxmLm9yYWNsaXplQWRkcmVzc1Jlc29sdmVyID0gb3JhY2xpemVfc2V0TmV0d29yayhzZWxmKTsKICAgICAgIGlmIChzZWxmLm9yYWNsaXplQWRkcmVzc1Jlc29sdmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICBzZWxmLm9yYWNsaXplID0gT3JhY2xpemVJKHNlbGYub3JhY2xpemVBZGRyZXNzUmVzb2x2ZXIuZ2V0QWRkcmVzcygpKTsKICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXROZXR3b3JrKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYpIHB1YmxpYyByZXR1cm5zKE9yYWNsaXplQWRkclJlc29sdmVySSkgewogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApIHsgLy9tYWlubmV0CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHNlbGYsICJldGhfbWFpbm5ldCIpOwogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpPjApIHsgLy9yb3BzdGVuIHRlc3RuZXQKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoc2VsZiwgImV0aF9yb3BzdGVuMyIpOwogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpPjApIHsgLy9rb3ZhbiB0ZXN0bmV0CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHNlbGYsICJldGhfa292YW4iKTsKICAgICAgICAgICAgcmV0dXJuIE9yYWNsaXplQWRkclJlc29sdmVySSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKSB7IC8vcmlua2VieSB0ZXN0bmV0CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHNlbGYsICJldGhfcmlua2VieSIpOwogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MTQ2NTAwY2ZkMzVCMjJFNEEzOTJGZTBhRGMwNkRlMWExMzY4RWQ0OCk7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpPjApIHsgLy9ldGhlcmV1bS1icmlkZ2UKICAgICAgICAgICAgcmV0dXJuIE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgyMGUxMkExRjg1OUIzRmVhRTVGYjJBMEEzMkMxOEY1YTY1NTU1YkJGKT4wKSB7IC8vZXRoZXIuY2FtcCBpZGUKICAgICAgICAgICAgcmV0dXJuIE9yYWNsaXplQWRkclJlc29sdmVySSgweDIwZTEyQTFGODU5QjNGZWFFNUZiMkEwQTMyQzE4RjVhNjU1NTViQkYpOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg1MWVmYUY0YzhCM0M5QWZCRDVhQjlGNGJiQzgyNzg0QWI2ZWY4ZkFBKT4wKSB7IC8vYnJvd3Nlci1zb2xpZGl0eQogICAgICAgICAgICByZXR1cm4gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHN0cmluZyBfbmV0d29ya19uYW1lKSBpbnRlcm5hbCB7CiAgICAgICAgc2VsZi5vcmFjbGl6ZU5ldHdvcmtOYW1lID0gX25ldHdvcmtfbmFtZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemVOZXR3b3JrTmFtZTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSkgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgdWludCBnYXNsaW1pdCkgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIHB1YmxpYyByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHNlbGYsIDAsIGRhdGFzb3VyY2UsIGFyZyk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnKSBwdWJsaWMgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHVpbnQgcHJpY2UgPSBzZWxmLm9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnF1ZXJ5LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZyk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcsIHVpbnQgZ2FzbGltaXQpIHB1YmxpYyByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHNlbGYsIDAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoc2VsZiwgMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIHB1YmxpYyByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgdWludCBwcmljZSA9IHNlbGYub3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIHB1YmxpYyByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHNlbGYsIDAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgcHVibGljIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShzZWxmLCAwLCBkYXRhc291cmNlLCBhcmdOKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04pIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoc2VsZiwgMCwgZGF0YXNvdXJjZSwgYXJnTiwgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IHNlbGYub3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgewogICAgICAgICAgICByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICB9CiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gc2VsZi5vcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeShPcmFjbGl6ZURhdGEgc3RvcmFnZSBzZWxmLCB1aW50IF9kZWxheSwgdWludCBfbmJ5dGVzLCB1aW50IF9jdXN0b21HYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMikgewogICAgICAgIGFzc2VydCgoX25ieXRlcyA+IDApICYmIChfbmJ5dGVzIDw9IDMyKSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsKICAgICAgICBuYnl0ZXNbMF0gPSBieXRlKF9uYnl0ZXMpOwogICAgICAgIGJ5dGVzIG1lbW9yeSB1bm9uY2UgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uS2V5SGFzaF9ieXRlczMyID0gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goc2VsZik7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBtc3RvcmUodW5vbmNlLCAweDIwKQogICAgICAgICAgICBtc3RvcmUoYWRkKHVub25jZSwgMHgyMCksIHhvcihibG9ja2hhc2goc3ViKG51bWJlciwgMSkpLCB4b3IoY29pbmJhc2UsIHRpbWVzdGFtcCkpKQogICAgICAgICAgICBtc3RvcmUoc2Vzc2lvbktleUhhc2gsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2Vzc2lvbktleUhhc2gsIDB4MjApLCBzZXNzaW9uS2V5SGFzaF9ieXRlczMyKQogICAgICAgIH0KICAgICAgICBieXRlc1tdIG1lbW9yeSBhcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgYXJnc1swXSA9IHVub25jZTsKICAgICAgICBhcmdzWzFdID0gbmJ5dGVzOwogICAgICAgIGFyZ3NbMl0gPSBzZXNzaW9uS2V5SGFzaDsgCiAgICAgICAgYnl0ZXMzMiBxdWVyeUlkID0gb3JhY2xpemVfcXVlcnkoc2VsZiwgX2RlbGF5LCAicmFuZG9tIiwgYXJncywgX2N1c3RvbUdhc0xpbWl0KTsKICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KHNlbGYsIHF1ZXJ5SWQsIGtlY2NhazI1NihieXRlczgoX2RlbGF5KSwgYXJnc1sxXSwgc2hhMjU2KGFyZ3NbMF0pLCBhcmdzWzJdKSk7CiAgICAgICAgcmV0dXJuIHF1ZXJ5SWQ7CiAgICB9CgogICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIGJ5dGVzIHByb29mLCBieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzIHJlc3VsdCwgc3RyaW5nIGNvbnRleHRfbmFtZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgYm9vbCBjaGVja29rOwogICAgICAgIAogICAgICAgIC8vIFN0ZXAgMjogdGhlIHVuaXF1ZSBrZXloYXNoIGhhcyB0byBtYXRjaCB3aXRoIHRoZSBzaGEyNTYgb2YgKGNvbnRleHQgbmFtZSArIHF1ZXJ5SWQpCiAgICAgICAgdWludCBsZWRnZXJQcm9vZkxlbmd0aCA9IDMrNjUrKHVpbnQocHJvb2ZbMys2NSsxXSkrMikrMzI7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGtleWhhc2ggPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyLCBrZXloYXNoLCAwKTsKICAgICAgICBjaGVja29rID0gKGtlY2NhazI1NihrZXloYXNoKSA9PSBrZWNjYWsyNTYoc2hhMjU2KGNvbnRleHRfbmFtZSwgcXVlcnlJZCkpKTsKICAgICAgICBpZiAoY2hlY2tvayA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWcxID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbbGVkZ2VyUHJvb2ZMZW5ndGgrKDMyKzgrMSszMikrMV0pKzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgrKDMyKzgrMSszMiksIHNpZzEubGVuZ3RoLCBzaWcxLCAwKTsKICAgICAgICAKICAgICAgICAvLyBTdGVwIDM6IHdlIGFzc3VtZSBzaWcxIGlzIHZhbGlkIChpdCB3aWxsIGJlIHZlcmlmaWVkIGR1cmluZyBzdGVwIDUpIGFuZCB3ZSB2ZXJpZnkgaWYgJ3Jlc3VsdCcgaXMgdGhlIHByZWZpeCBvZiBzaGEyNTYoc2lnMSkKICAgICAgICBjaGVja29rID0gbWF0Y2hCeXRlczMyUHJlZml4KHNoYTI1NihzaWcxKSwgcmVzdWx0KTsKICAgICAgICBpZiAoY2hlY2tvayA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFN0ZXAgNDogY29tbWl0bWVudCBtYXRjaCB2ZXJpZmljYXRpb24sIGtlY2NhazI1NihkZWxheSwgbmJ5dGVzLCB1bm9uY2UsIHNlc3Npb25LZXlIYXNoKSA9PSBjb21taXRtZW50IGluIHN0b3JhZ2UuCiAgICAgICAgLy8gVGhpcyBpcyB0byB2ZXJpZnkgdGhhdCB0aGUgY29tcHV0ZWQgYXJncyBtYXRjaCB3aXRoIHRoZSBvbmVzIHNwZWNpZmllZCBpbiB0aGUgcXVlcnkuCiAgICAgICAgYnl0ZXMgbWVtb3J5IGNvbW1pdG1lbnRTbGljZTEgPSBuZXcgYnl0ZXMoOCsxKzMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoKzMyLCA4KzErMzIsIGNvbW1pdG1lbnRTbGljZTEsIDApOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uUHVia2V5ID0gbmV3IGJ5dGVzKDY0KTsKICAgICAgICB1aW50IHNpZzJvZmZzZXQgPSBsZWRnZXJQcm9vZkxlbmd0aCszMisoOCsxKzMyKStzaWcxLmxlbmd0aCs2NTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjQsIDY0LCBzZXNzaW9uUHVia2V5LCAwKTsKICAgICAgICAKICAgICAgICBieXRlczMyIHNlc3Npb25QdWJrZXlIYXNoID0gc2hhMjU2KHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChzZWxmLm9yYWNsaXplUmFuZG9tRFNBcmdzW3F1ZXJ5SWRdID09IGtlY2NhazI1Nihjb21taXRtZW50U2xpY2UxLCBzZXNzaW9uUHVia2V5SGFzaCkpIHsKICAgICAgICAgICAgZGVsZXRlIHNlbGYub3JhY2xpemVSYW5kb21EU0FyZ3NbcXVlcnlJZF07IC8vdW5vbmNlLCBuYnl0ZXMgYW5kIHNlc3Npb25LZXlIYXNoIG1hdGNoCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gU3RlcCA1OiB2YWxpZGl0eSB2ZXJpZmljYXRpb24gZm9yIHNpZzEgKGtleWhhc2ggYW5kIGFyZ3Mgc2lnbmVkIHdpdGggdGhlIHNlc3Npb25LZXkpCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRvc2lnbjEgPSBuZXcgYnl0ZXMoMzIrOCsxKzMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoLCAzMis4KzErMzIsIHRvc2lnbjEsIDApOwogICAgICAgIGNoZWNrb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjEpLCBzaWcxLCBzZXNzaW9uUHVia2V5KTsKICAgICAgICBpZiAoY2hlY2tvayA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyB2ZXJpZnkgaWYgc2Vzc2lvblB1YmtleUhhc2ggd2FzIHZlcmlmaWVkIGFscmVhZHksIGlmIG5vdC4uIGxldCdzIGRvIGl0IQogICAgICAgIGlmIChzZWxmLm9yYWNsaXplUmFuZG9tRHNTZXNzaW9uS2V5SGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9PSBmYWxzZSkgewogICAgICAgICAgICBzZWxmLm9yYWNsaXplUmFuZG9tRHNTZXNzaW9uS2V5SGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkocHJvb2YsIHNpZzJvZmZzZXQpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZVJhbmRvbURzU2Vzc2lvbktleUhhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF07CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShieXRlcyBwcm9vZiwgdWludCBzaWcyb2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzaWdvazsKICAgICAgICAKICAgICAgICAvLyBTdGVwIDY6IHZlcmlmeSB0aGUgYXR0ZXN0YXRpb24gc2lnbmF0dXJlLCBBUFBLRVkxIG11c3Qgc2lnbiB0aGUgc2Vzc2lvbktleSBmcm9tIHRoZSBjb3JyZWN0IGxlZGdlciBhcHAgKENPREVIQVNIKQogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWcyID0gbmV3IGJ5dGVzKHVpbnQocHJvb2Zbc2lnMm9mZnNldCsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LCBzaWcyLmxlbmd0aCwgc2lnMiwgMCk7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFwcGtleTFfcHVia2V5ID0gbmV3IGJ5dGVzKDY0KTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMrMSwgNjQsIGFwcGtleTFfcHVia2V5LCAwKTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMiA9IG5ldyBieXRlcygxKzY1KzMyKTsKICAgICAgICB0b3NpZ24yWzBdID0gMTsgLy9yb2xlCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY1LCA2NSwgdG9zaWduMiwgMSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IENPREVIQVNIID0gaGV4ImZkOTRmYTcxYmMwYmExMGQzOWQ0NjRkMGQ4ZjQ2NWVmZWVmMGEyNzY0ZTM4ODdmY2M5ZGY0MWRlZDIwZjUwNWMiOwogICAgICAgIGNvcHlCeXRlcyhDT0RFSEFTSCwgMCwgMzIsIHRvc2lnbjIsIDErNjUpOwogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24yKSwgc2lnMiwgYXBwa2V5MV9wdWJrZXkpOwogICAgICAgIAogICAgICAgIGlmIChzaWdvayA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFN0ZXAgNzogdmVyaWZ5IHRoZSBBUFBLRVkxIHByb3ZlbmFuY2UgKG11c3QgYmUgc2lnbmVkIGJ5IExlZGdlcikKICAgICAgICBieXRlcyBtZW1vcnkgTEVER0VSS0VZID0gaGV4IjdmYjk1NjQ2OWM1YzliODk4NDBkNTViNDM1MzdlNjZhOThkZDQ4MTFlYTBhMjcyMjQyNzJjMmU1NjIyOTExZTg1MzdhMmY4ZTg2YTQ2YmFlYzgyODY0ZTk4ZGQwMWU5Y2NjMmY4YmM1ZGZjOWNiZTVhOTFhMjkwNDk4ZGQ5NmU0IjsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMyA9IG5ldyBieXRlcygxKzY1KTsKICAgICAgICB0b3NpZ24zWzBdID0gMHhGRTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMsIDY1LCB0b3NpZ24zLCAxKTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgc2lnMyA9IG5ldyBieXRlcyh1aW50KHByb29mWzMrNjUrMV0pKzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMys2NSwgc2lnMy5sZW5ndGgsIHNpZzMsIDApOwogICAgICAgIAogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24zKSwgc2lnMywgTEVER0VSS0VZKTsKICAgICAgICAKICAgICAgICByZXR1cm4gc2lnb2s7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3JldHVybkNvZGUoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgaW50ZXJuYWwgcmV0dXJucyAodWludDgpIHsKICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQogICAgICAgIGlmICgoX3Byb29mWzBdICE9ICJMIil8fChfcHJvb2ZbMV0gIT0gIlAiKXx8KF9wcm9vZlsyXSAhPSAxKSkgewogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oc2VsZiwgX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKHNlbGYpKTsKICAgICAgICBpZiAocHJvb2ZWZXJpZmllZCA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiBxdWVyeUlkLCBieXRlczMyIGNvbW1pdG1lbnQpIGludGVybmFsIHsKICAgICAgICBzZWxmLm9yYWNsaXplUmFuZG9tRFNBcmdzW3F1ZXJ5SWRdID0gY29tbWl0bWVudDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWF0Y2hCeXRlczMyUHJlZml4KGJ5dGVzMzIgY29udGVudCwgYnl0ZXMgcHJlZml4KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIG1hdGNoXyA9IHRydWU7CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxwcmVmaXgubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGNvbnRlbnRbaV0gIT0gcHJlZml4W2ldKSB7CiAgICAgICAgICAgICAgICBtYXRjaF8gPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbWF0Y2hfOwogICAgfQoKICAgIGZ1bmN0aW9uIHZlcmlmeVNpZyhieXRlczMyIHRvc2lnbmgsIGJ5dGVzIGRlcnNpZywgYnl0ZXMgcHVia2V5KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzaWdvazsKICAgICAgICBhZGRyZXNzIHNpZ25lcjsKICAgICAgICAKICAgICAgICBieXRlczMyIHNpZ3I7CiAgICAgICAgYnl0ZXMzMiBzaWdzOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdyXyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgdWludCBvZmZzZXQgPSA0Kyh1aW50KGRlcnNpZ1szXSkgLSAweDIwKTsKICAgICAgICBzaWdyXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCwgMzIsIHNpZ3JfLCAwKTsKICAgICAgICBieXRlcyBtZW1vcnkgc2lnc18gPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIG9mZnNldCArPSAzMiArIDI7CiAgICAgICAgc2lnc18gPSBjb3B5Qnl0ZXMoZGVyc2lnLCBvZmZzZXQrKHVpbnQoZGVyc2lnW29mZnNldC0xXSkgLSAweDIwKSwgMzIsIHNpZ3NfLCAwKTsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaWdyIDo9IG1sb2FkKGFkZChzaWdyXywgMzIpKQogICAgICAgICAgICBzaWdzIDo9IG1sb2FkKGFkZChzaWdzXywgMzIpKQogICAgICAgIH0KICAgICAgICAKICAgICAgICAKICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjcsIHNpZ3IsIHNpZ3MpOwogICAgICAgIGlmIChhZGRyZXNzKGtlY2NhazI1NihwdWJrZXkpKSA9PSBzaWduZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI4LCBzaWdyLCBzaWdzKTsKICAgICAgICAgICAgcmV0dXJuIChhZGRyZXNzKGtlY2NhazI1NihwdWJrZXkpKSA9PSBzaWduZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgLy8gRHVwbGljYXRlIFNvbGlkaXR5J3MgZWNyZWNvdmVyLCBidXQgY2F0Y2hpbmcgdGhlIENBTEwgcmV0dXJuIHZhbHVlCiAgICBmdW5jdGlvbiBzYWZlcl9lY3JlY292ZXIoYnl0ZXMzMiBoYXNoLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgewogICAgICAgIC8vIFdlIGRvIG91ciBvd24gbWVtb3J5IG1hbmFnZW1lbnQgaGVyZS4gU29saWRpdHkgdXNlcyBtZW1vcnkgb2Zmc2V0CiAgICAgICAgLy8gMHg0MCB0byBzdG9yZSB0aGUgY3VycmVudCBlbmQgb2YgbWVtb3J5LiBXZSB3cml0ZSBwYXN0IGl0IChhcwogICAgICAgIC8vIHdyaXRlcyBhcmUgbWVtb3J5IGV4dGVuc2lvbnMpLCBidXQgZG9uJ3QgdXBkYXRlIHRoZSBvZmZzZXQgc28KICAgICAgICAvLyBTb2xpZGl0eSB3aWxsIHJldXNlIGl0LiBUaGUgbWVtb3J5IHVzZWQgaGVyZSBpcyBvbmx5IG5lZWRlZCBmb3IKICAgICAgICAvLyB0aGlzIGNvbnRleHQuCgogICAgICAgIC8vIEZJWE1FOiBpbmxpbmUgYXNzZW1ibHkgY2FuJ3QgYWNjZXNzIHJldHVybiB2YWx1ZXMKICAgICAgICBib29sIHJldDsKICAgICAgICBhZGRyZXNzIGFkZHI7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IHNpemUgOj0gbWxvYWQoMHg0MCkKICAgICAgICAgICAgbXN0b3JlKHNpemUsIGhhc2gpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgMzIpLCB2KQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDY0KSwgcikKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCA5NiksIHMpCgogICAgICAgICAgICAvLyBOT1RFOiB3ZSBjYW4gcmV1c2UgdGhlIHJlcXVlc3QgbWVtb3J5IGJlY2F1c2Ugd2UgZGVhbCB3aXRoCiAgICAgICAgICAgIC8vICAgICAgIHRoZSByZXR1cm4gY29kZQogICAgICAgICAgICByZXQgOj0gY2FsbCgzMDAwLCAxLCAwLCBzaXplLCAxMjgsIHNpemUsIDMyKQogICAgICAgICAgICBhZGRyIDo9IG1sb2FkKHNpemUpCiAgICAgICAgfQogIAogICAgICAgIHJldHVybiAocmV0LCBhZGRyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfY2JBZGRyZXNzKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUuY2JBZGRyZXNzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0UHJvb2YoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgYnl0ZSBwcm9vZlApIHB1YmxpYyB7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUuc2V0UHJvb2ZUeXBlKHByb29mUCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UoT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZiwgdWludCBnYXNQcmljZSkgcHVibGljIHsKICAgICAgICByZXR1cm4gc2VsZi5vcmFjbGl6ZS5zZXRDdXN0b21HYXNQcmljZShnYXNQcmljZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q29uZmlnKE9yYWNsaXplRGF0YSBzdG9yYWdlIHNlbGYsIGJ5dGVzMzIgY29uZmlnKSBwdWJsaWMgewogICAgICAgIHJldHVybiBzZWxmLm9yYWNsaXplLnNldENvbmZpZyhjb25maWcpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENvZGVTaXplKGFkZHJlc3MgX2FkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQgX3NpemUpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIF9zaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goT3JhY2xpemVEYXRhIHN0b3JhZ2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgcmV0dXJuIHNlbGYub3JhY2xpemUucmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJhMmNib3Ioc3RyaW5nW10gYXJyKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAvLyBnZXQgY29ycmVjdCBjYm9yIG91dHB1dCBsZW5ndGgKICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgfQogICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgIG91dHB1dGxlbiArPSBieXRlKGNib3JsZW4pLmxlbmd0aDsKICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoY2JvcmxlbilbY3RyXTsKICAgICAgICAgICAgY3RyKys7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICBmb3IgKHVpbnQgeCA9IDA7IHggPCBlbGVtQXJyYXlbaV0ubGVuZ3RoOyB4KyspIHsKICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgIHVpbnQgZWxlbWNib3JsZW4gPSBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geCA+PSAyNCA/IDIzIDogZWxlbUFycmF5W2ldLmxlbmd0aCAtIHg7CiAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ5dGUoZWxlbWNib3JsZW4pLmxlbmd0aCA+IGN0ciAtIGxjdHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgIGN0cisrOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhMmNib3IoYnl0ZXNbXSBhcnIpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoCiAgICAgICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7CiAgICAgICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGNib3JsZW4pW2N0cl07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgZm9yICh1aW50IHggPSAwOyB4IDwgZWxlbUFycmF5W2ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGVsZW1jYm9ybGVuID0gZWxlbUFycmF5W2ldLmxlbmd0aCAtIHggPj0gMjQgPyAyMyA6IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4OwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChieXRlKGVsZW1jYm9ybGVuKS5sZW5ndGggPiBjdHIgLSBsY3RyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KCiAgICBmdW5jdGlvbiBjb3B5Qnl0ZXMoYnl0ZXMgZnJvbSwgdWludCBmcm9tT2Zmc2V0LCB1aW50IGxlbmd0aCwgYnl0ZXMgdG8sIHVpbnQgdG9PZmZzZXQpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGxlbmd0aCArIHRvT2Zmc2V0OwoKICAgICAgICBhc3NlcnQgKHRvLmxlbmd0aCA+PSBtaW5MZW5ndGgpOwoKICAgICAgICAvLyBOT1RFOiB0aGUgb2Zmc2V0IDMyIGlzIGFkZGVkIHRvIHNraXAgdGhlIGBzaXplYCBmaWVsZCBvZiBib3RoIGJ5dGVzIHZhcmlhYmxlcwogICAgICAgIHVpbnQgaSA9IDMyICsgZnJvbU9mZnNldDsKICAgICAgICB1aW50IGogPSAzMiArIHRvT2Zmc2V0OwoKICAgICAgICB3aGlsZSAoaSA8ICgzMiArIGZyb21PZmZzZXQgKyBsZW5ndGgpKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCB0bXAgOj0gbWxvYWQoYWRkKGZyb20sIGkpKQogICAgICAgICAgICAgICAgbXN0b3JlKGFkZCh0bywgaiksIHRtcCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDMyOwogICAgICAgICAgICBqICs9IDMyOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCmNvbnRyYWN0IFJld2FyZEFwcHJvdmVyIGlzIE93bmFibGUgewoKICAgIEZ1bGxFUkMyMCBwdWJsaWMgdG9rZW47CiAgICBSZXdhcmREaXN0cmlidXRhYmxlIGludGVybmFsIHJld2FyZERpc3RyaWJ1dG9yOwoKICAgIC8vLyBAZGV2IHRyYW5zZmVycyBwZXJtaXNzaW9ucyB0byB0aGUgZGlzdHJpYnV0b3IgdG8gZGlzdHJpYnV0ZSB0b2tlbnMKICAgIC8vLyBvbiBpdHMgYmVoYWxmLgogICAgZnVuY3Rpb24gYXBwcm92ZVRva2VuVHJhbnNmZXJzKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChyZXdhcmREaXN0cmlidXRvciA9PSBhZGRyZXNzKDApIHx8IHRva2VuID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdWludCBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHRva2VuLmFwcHJvdmUocmV3YXJkRGlzdHJpYnV0b3IsIGJhbGFuY2UpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBVcGRhdGVzIHRoZSByZXdhcmQgZGlzdHJpYnV0b3IKICAgIGZ1bmN0aW9uIHVwZGF0ZVJld2FyZERpc3RyaWJ1dG9yKGFkZHJlc3MgbmV3UmV3YXJkRGlzdHJpYnV0b3IpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJld2FyZERpc3RyaWJ1dG9yID0gUmV3YXJkRGlzdHJpYnV0YWJsZShuZXdSZXdhcmREaXN0cmlidXRvcik7CiAgICB9Cn0KCmNvbnRyYWN0IENhc2NhZGluZyBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHN0cnVjdCBDYXNjYWRlIHsKICAgICAgICBhZGRyZXNzIGNhc2NhZGU7CiAgICAgICAgdWludDE2IHBlcmNlbnRhZ2U7CiAgICB9CgogICAgdWludCBwdWJsaWMgdG90YWxDYXNjYWRpbmdQZXJjZW50YWdlOwogICAgQ2FzY2FkZVtdIHB1YmxpYyBjYXNjYWRlczsgICAgCgogICAgLy8vIEBkZXYgQWRkcyBhbiBhZGRyZXNzIGFuZCBhc3NvY2lhdGVkIHBlcmNlbnRhZ2UgZm9yIHRyYW5zZmVyLgogICAgLy8vIEBwYXJhbSBuZXdBZGRyZXNzIFRoZSBuZXcgYWRkcmVzcwogICAgZnVuY3Rpb24gYWRkQ2FzY2FkZShhZGRyZXNzIG5ld0FkZHJlc3MsIHVpbnQgbmV3UGVyY2VudGFnZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgY2FzY2FkZXMucHVzaChDYXNjYWRlKG5ld0FkZHJlc3MsIHVpbnQxNihuZXdQZXJjZW50YWdlKSkpOwogICAgICAgIHRvdGFsQ2FzY2FkaW5nUGVyY2VudGFnZSArPSBuZXdQZXJjZW50YWdlOwogICAgfQoKICAgIC8vLyBAZGV2IERlbGV0ZXMgYW4gYWRkcmVzcyBhbmQgYXNzb2NpYXRlZCBwZXJjZW50YWdlIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgIC8vLyBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBjYXNjYWRlIHRvIGJlIGRlbGV0ZWQuCiAgICBmdW5jdGlvbiBkZWxldGVDYXNjYWRlKHVpbnQgaW5kZXgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoaW5kZXggPCBjYXNjYWRlcy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIHRvdGFsQ2FzY2FkaW5nUGVyY2VudGFnZSAtPSBjYXNjYWRlc1tpbmRleF0ucGVyY2VudGFnZTsKCiAgICAgICAgY2FzY2FkZXNbaW5kZXhdID0gY2FzY2FkZXNbY2FzY2FkZXMubGVuZ3RoIC0gMV07CiAgICAgICAgZGVsZXRlIGNhc2NhZGVzW2Nhc2NhZGVzLmxlbmd0aCAtIDFdOwogICAgICAgIGNhc2NhZGVzLmxlbmd0aC0tOwogICAgfQoKICAgIC8vLyBAZGV2IFRyYW5zZmVycyB0aGUgY2FzY2FkZSB2YWx1ZXMgdG8gdGhlIGFzc2lnbmVkIGFkZHJlc3NlcwogICAgLy8vIEBwYXJhbSB0b3RhbEphY2twb3QgdGhlIHRvdGFsIGphY2twb3QgYW1vdW50CiAgICBmdW5jdGlvbiB0cmFuc2ZlckNhc2NhZGVzKHVpbnQgdG90YWxKYWNrcG90KSBpbnRlcm5hbCB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgY2FzY2FkZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdWludCBjYXNjYWRlVG90YWwgPSBnZXRDYXNjYWRlVG90YWwoY2FzY2FkZXNbaV0ucGVyY2VudGFnZSwgdG90YWxKYWNrcG90KTsKCiAgICAgICAgICAgIC8vIFNob3VsZCBiZSBzYWZlIGZyb20gcmUtZW50cnkgZ2l2ZW4gZ2FzIGxpbWl0IG9mIDIzMDAuCiAgICAgICAgICAgIGNhc2NhZGVzW2ldLmNhc2NhZGUudHJhbnNmZXIoY2FzY2FkZVRvdGFsKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgR2V0cyB0aGUgY2FzY2FkZSB0b3RhbCBmb3IgdGhlIGdpdmVuIHBlcmNlbnRhZ2UKICAgIC8vLyBAcGFyYW0gcGVyY2VudGFnZSB0aGUgcGVyY2VudGFnZSBvZiB0aGUgdG90YWwgcG90IGFzIGEgdWludAogICAgLy8vIEBwYXJhbSB0b3RhbEphY2twb3QgdGhlIHRvdGFsIGphY2twb3QgYW1vdW50CiAgICAvLy8gQHJldHVybiB0aGUgdG90YWwgYW1vdW50IHRoZSBwZXJjZW50YWdlIHJlcHJlc2VudHMKICAgIGZ1bmN0aW9uIGdldENhc2NhZGVUb3RhbCh1aW50IHBlcmNlbnRhZ2UsIHVpbnQgdG90YWxKYWNrcG90KSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiB0b3RhbEphY2twb3QubXVsKHBlcmNlbnRhZ2UpLmRpdigxMDApOyAgICAgICAgCiAgICB9CiAgIAogICAgLy8vIEEgdXRpbGl0eSBtZXRob2QgdG8gY2FsY3VsYXRlIHRoZSB0b3RhbCBhZnRlciBjYXNjYWRlcyBoYXZlIGJlZW4gYXBwbGllZC4KICAgIC8vLyBAcGFyYW0gdG90YWxKYWNrcG90IHRoZSB0b3RhbCBqYWNrcG90IGFtb3VudAogICAgLy8vIEByZXR1cm4gdGhlIHRvdGFsIGFtb3VudCBhZnRlciB0aGUgY2FzY2FkZXMgaGF2ZSBiZWVuIGFwcGxpZWQKICAgIGZ1bmN0aW9uIGdldFRvdGFsQWZ0ZXJDYXNjYWRlcyh1aW50IHRvdGFsSmFja3BvdCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgY2FzY2FkZVRvdGFsID0gZ2V0Q2FzY2FkZVRvdGFsKHRvdGFsQ2FzY2FkaW5nUGVyY2VudGFnZSwgdG90YWxKYWNrcG90KTsKICAgICAgICByZXR1cm4gdG90YWxKYWNrcG90LnN1YihjYXNjYWRlVG90YWwpOwogICAgfQp9Cgpjb250cmFjdCBTYWZlV2lubmVyIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBwZW5kaW5nUGF5bWVudHM7CiAgICBhZGRyZXNzW10gcHVibGljIHBlbmRpbmdXaW5uZXJzOwogICAgdWludCBwdWJsaWMgdG90YWxQZW5kaW5nUGF5bWVudHM7CgogICAgZXZlbnQgV2lubmVyV2l0aGRyZXcoYWRkcmVzcyBpbmRleGVkIHdpbm5lciwgdWludCBhbW91bnQsIHVpbnQgYmxvY2spOwoKICAgIC8vLyBAZGV2IHJlY29yZHMgdGhlIHdpbm5lciBzbyB0aGF0IGEgdHJhbnNmZXIgb3Igd2l0aGRyYXcgY2FuIG9jY3VyIGF0IAogICAgLy8vIGEgbGF0ZXIgZGF0ZS4KICAgIGZ1bmN0aW9uIGFkZFBlbmRpbmdXaW5uZXIoYWRkcmVzcyB3aW5uZXIsIHVpbnQgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgcGVuZGluZ1BheW1lbnRzW3dpbm5lcl0gPSBwZW5kaW5nUGF5bWVudHNbd2lubmVyXS5hZGQoYW1vdW50KTsKICAgICAgICB0b3RhbFBlbmRpbmdQYXltZW50cyA9IHRvdGFsUGVuZGluZ1BheW1lbnRzLmFkZChhbW91bnQpOwogICAgICAgIHBlbmRpbmdXaW5uZXJzLnB1c2god2lubmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBhbGxvd3MgYSB3aW5uZXIgdG8gd2l0aGRyYXcgdGhlaXIgcmlnaHRmdWwgamFja3BvdC4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3V2lubmluZ3MoKSBwdWJsaWMgewogICAgICAgIGFkZHJlc3Mgd2lubmVyID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50IHBheW1lbnQgPSBwZW5kaW5nUGF5bWVudHNbd2lubmVyXTsKCiAgICAgICAgcmVxdWlyZShwYXltZW50ID4gMCk7CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gcGF5bWVudCk7CgogICAgICAgIHRyYW5zZmVyUGVuZGluZyh3aW5uZXIsIHBheW1lbnQpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHJpZXMgYWxsIHBlbmRpbmcgd2lubmVycwogICAgZnVuY3Rpb24gcmV0cnlXaW5uZXJzKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgcGVuZGluZ1dpbm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcmV0cnlXaW5uZXIoaSk7CiAgICAgICAgfQoKICAgICAgICBwZW5kaW5nV2lubmVycy5sZW5ndGggPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHJldHJ5V2lubmVyKHVpbnQgaW5kZXgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGFkZHJlc3Mgd2lubmVyID0gcGVuZGluZ1dpbm5lcnNbaW5kZXhdOwogICAgICAgIHVpbnQgcGF5bWVudCA9IHBlbmRpbmdQYXltZW50c1t3aW5uZXJdOwogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IHBheW1lbnQpOwogICAgICAgIGlmIChwYXltZW50ICE9IDApIHsKICAgICAgICAgICAgdHJhbnNmZXJQZW5kaW5nKHdpbm5lciwgcGF5bWVudCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyUGVuZGluZyhhZGRyZXNzIHdpbm5lciwgdWludDI1NiBwYXltZW50KSBpbnRlcm5hbCB7CiAgICAgICAgdG90YWxQZW5kaW5nUGF5bWVudHMgPSB0b3RhbFBlbmRpbmdQYXltZW50cy5zdWIocGF5bWVudCk7CiAgICAgICAgcGVuZGluZ1BheW1lbnRzW3dpbm5lcl0gPSAwOwogICAgICAgIHdpbm5lci50cmFuc2ZlcihwYXltZW50KTsgICAgICAgIAogICAgICAgIFdpbm5lcldpdGhkcmV3KHdpbm5lciwgcGF5bWVudCwgYmxvY2subnVtYmVyKTsKICAgIH0KfQoKY29udHJhY3QgUmFmZmxlIGlzIE93bmFibGUsIFByaWNlYWJsZSwgU2FmZVdpbm5lciwgQ2FzY2FkaW5nIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICB1c2luZyBPcmFjbGl6ZUxpYiBmb3IgT3JhY2xpemVMaWIuT3JhY2xpemVEYXRhOwoKICBlbnVtIFJhZmZsZVN0YXRlIHsgQWN0aXZlLCBJbkFjdGl2ZSwgUGVuZGluZ0luQWN0aXZlIH0KICBlbnVtIFJhbmRvbVNvdXJjZSB7IFJhbmRvbURTLCBRcm5nIH0KCiAgc3RydWN0IEphY2twb3QgewogICAgdWludCBhYnNvbHV0ZVRvdGFsOwogICAgdWludCBmZWVUb3RhbDsKICAgIHVpbnQgY2FzY2FkZVRvdGFsOwogICAgdWludCB3aW5uZXJUb3RhbDsKICB9CgogIHN0cnVjdCBUaWNrZXRIb2xkZXIgewogICAgYWRkcmVzcyBwdXJjaGFzZXI7CiAgICB1aW50MTYgY291bnQ7CiAgICB1aW50ODAgcnVubmluZ1RvdGFsOwogIH0KICAKICAvLyBwdWJsaWMKICBSYWZmbGVTdGF0ZSBwdWJsaWMgcmFmZmxlU3RhdGU7CiAgUmFuZG9tU291cmNlIHB1YmxpYyByYW5kb21Tb3VyY2U7CiAgdWludCBwdWJsaWMgdGlja2V0UHJpY2U7CiAgdWludCBwdWJsaWMgZ2FtZUlkOwogIHVpbnQgcHVibGljIGZlZTsKICAKCiAgLy8gaW50ZXJuYWwKICBUaWNrZXRIb2xkZXJbXSBpbnRlcm5hbCB0aWNrZXRIb2xkZXJzOwogIHVpbnQgaW50ZXJuYWwgcmFuZG9tQnl0ZXM7CiAgdWludCBpbnRlcm5hbCByYW5kb21RdWVyaWVkOwogIHVpbnQgaW50ZXJuYWwgY2FsbGJhY2tHYXM7CiAgUmV3YXJkRGlzdHJpYnV0YWJsZSBpbnRlcm5hbCByZXdhcmREaXN0cmlidXRvcjsKCiAgLy8gb3JhY2xpemUKICBPcmFjbGl6ZUxpYi5PcmFjbGl6ZURhdGEgb3JhY2xpemVEYXRhOwoKICAvLyBldmVudHMKICBldmVudCBUaWNrZXRQdXJjaGFzZWQoYWRkcmVzcyBpbmRleGVkIHRpY2tldFB1cmNoYXNlciwgdWludCBpbmRleGVkIGlkLCB1aW50IG51bVRpY2tldHMsIHVpbnQgdG90YWxDb3N0LCB1aW50IGJsb2NrKTsKICBldmVudCBXaW5uZXJTZWxlY3RlZChhZGRyZXNzIGluZGV4ZWQgd2lubmVyLCB1aW50IGluZGV4ZWQgaWQsIHVpbnQgd2lubmluZ3MsIHVpbnQgYmxvY2spOwogIGV2ZW50IFJhbmRvbVByb29mRmFpbGVkKGJ5dGVzMzIgcXVlcnlJZCwgdWludCBpbmRleGVkIGlkLCB1aW50IGJsb2NrKTsKCiAgZnVuY3Rpb24gUmFmZmxlKHVpbnQgX3RpY2tldFByaWNlLCBhZGRyZXNzIF9yZXdhcmREaXN0cmlidXRvcikgcHVibGljIHsKICAgIHRpY2tldFByaWNlID0gX3RpY2tldFByaWNlOwogICAgcmFmZmxlU3RhdGUgPSBSYWZmbGVTdGF0ZS5BY3RpdmU7CiAgICBjYWxsYmFja0dhcyA9IDIwMDAwMDsKICAgIHJhbmRvbUJ5dGVzID0gODsKICAgIGZlZSA9IDUgZmlubmV5OwogICAgcmV3YXJkRGlzdHJpYnV0b3IgPSBSZXdhcmREaXN0cmlidXRhYmxlKF9yZXdhcmREaXN0cmlidXRvcik7CiAgICBvcmFjbGl6ZURhdGEuaW5pdGlhbGl6ZU9yYWNsaXplKCk7CiAgICByYW5kb21Tb3VyY2UgPSBSYW5kb21Tb3VyY2UuUXJuZzsKICAgIHJlc2V0UmFmZmxlKCk7CiAgfQoKICAvLy8gQGRldiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdhbWUgaXMgYWN0aXZlLgogIGZ1bmN0aW9uIGlzQWN0aXZlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiByYWZmbGVTdGF0ZSA9PSBSYWZmbGVTdGF0ZS5BY3RpdmUgfHwgcmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuUGVuZGluZ0luQWN0aXZlOwogIH0KICAKICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiB0byBwdXJjaGFzZSBhIHNpbmdsZSB0aWNrZXQuCiAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogIH0KICAgCiAgLy8vIEBkZXYgR2V0cyB0aGUgcHJvamVjdGVkIGphY2twb3QuCiAgLy8vIEByZXR1cm4gVGhlIHByb2plY3RlZCBqYWNrcG90IGFtb3VudC4KICBmdW5jdGlvbiBnZXRQcm9qZWN0ZWRKYWNrcG90KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgamFja3BvdCA9IGdldEFic29sdXRlUHJvamVjdGVkSmFja3BvdCgpOwogICAgSmFja3BvdCBtZW1vcnkgdG90YWxzID0gZ2V0SmFja3BvdFRvdGFscyhqYWNrcG90KTsKICAgIHJldHVybiB0b3RhbHMud2lubmVyVG90YWw7CiAgfQoKICAvLy8gQGRldiBHZXRzIHRoZSBhY3R1YWwgamFja3BvdAogIC8vLyBAcmV0dXJuIFRoZSBhY3R1YWwgamFja3BvdCBhbW91bnQuCiAgZnVuY3Rpb24gZ2V0SmFja3BvdCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGphY2twb3QgPSBnZXRBYnNvbHV0ZUphY2twb3QoKTsKICAgIEphY2twb3QgbWVtb3J5IHRvdGFscyA9IGdldEphY2twb3RUb3RhbHMoamFja3BvdCk7CiAgICByZXR1cm4gdG90YWxzLndpbm5lclRvdGFsOwogIH0KCiAgLy8vIEBkZXYgR2V0cyB0aGUgdGlja2V0IGhvbGRlciBjb3VudAogIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCB0aWNrZXQgaG9sZGVyIGNvdW50CiAgZnVuY3Rpb24gZ2V0VGlja2V0SG9sZGVyQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIGdldFRvdGFsVGlja2V0cygpOwogIH0KCiAgLy8vIEBkZXYgVXBkYXRlcyB0aGUgdGlja2V0IHByaWNlLgogIGZ1bmN0aW9uIHVwZGF0ZVRpY2tldFByaWNlKHVpbnQgdXBkYXRlZFByaWNlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuSW5BY3RpdmUpOwogICAgcmVxdWlyZSh1cGRhdGVkUHJpY2UgPiAwKTsKICAgIHRpY2tldFByaWNlID0gdXBkYXRlZFByaWNlOwogIH0KCiAgLy8vIEBkZXYgVXBkYXRlcyB0aGUgdGlja2V0IHByaWNlLgogIGZ1bmN0aW9uIHVwZGF0ZUZlZSh1aW50IHVwZGF0ZWRGZWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSh1cGRhdGVkRmVlID4gMCk7CiAgICBmZWUgPSB1cGRhdGVkRmVlOwogIH0KCiAgLy8vIEBkZXYgRGVhY3RpdmF0ZXMgdGhlIHJhZmZsZSBhZnRlciB0aGUgbmV4dCBnYW1lLgogIGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmFmZmxlU3RhdGUgPT0gUmFmZmxlU3RhdGUuQWN0aXZlKTsKICAgIHJhZmZsZVN0YXRlID0gdGlja2V0SG9sZGVycy5sZW5ndGggPT0gMCA/IFJhZmZsZVN0YXRlLkluQWN0aXZlIDogUmFmZmxlU3RhdGUuUGVuZGluZ0luQWN0aXZlOwogIH0KCiAgLy8vIEBkZXYgQWN0aXZhdGVzIHRoZSByYWZmbGUsIGlmIGluYWN0aXZhdGVkLgogIGZ1bmN0aW9uIGFjdGl2YXRlKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHJhZmZsZVN0YXRlID09IFJhZmZsZVN0YXRlLkluQWN0aXZlKTsKICAgIHJhZmZsZVN0YXRlID0gUmFmZmxlU3RhdGUuQWN0aXZlOwogIH0KCiAgLy8vIFRoZSBvcmFjbGl6ZSBjYWxsYmFjayBmdW5jdGlvbi4KICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgcXVlcnlJZCwgc3RyaW5nIHJlc3VsdCwgYnl0ZXMgcHJvb2YpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xpemVEYXRhLm9yYWNsaXplX2NiQWRkcmVzcygpKTsKICAgIAogICAgLy8gV2Ugb25seSBleHBlY3QgdGhpcyBmb3IgdGhpcyBjYWxsYmFjawogICAgaWYgKG9yYWNsaXplRGF0YS5vcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fcmV0dXJuQ29kZShxdWVyeUlkLCByZXN1bHQsIHByb29mKSAhPSAwKSB7CiAgICAgIFJhbmRvbVByb29mRmFpbGVkKHF1ZXJ5SWQsIGdhbWVJZCwgbm93KTsKICAgICAgcmFuZG9tUXVlcmllZCA9IDA7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBfX2NhbGxiYWNrKHF1ZXJ5SWQsIHJlc3VsdCk7CiAgfQoKICAvLy8gVGhlIG9yYWNsaXplIGNhbGxiYWNrIGZ1bmN0aW9uLgogIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBxdWVyeUlkLCBzdHJpbmcgcmVzdWx0KSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG9yYWNsaXplRGF0YS5vcmFjbGl6ZV9jYkFkZHJlc3MoKSk7CiAgICAKICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIGNhc2Ugd2hlcmUgb3JhY2xpemUgaXMgdHJpZ2dlcmVkLCBvciBjYWxscyBiYWNrIG11bHRpcGxlIHRpbWVzLgogICAgaWYgKCFzaG91bGRDaG9vc2VXaW5uZXIoKSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdWludCBtYXhSYW5nZSA9IDIqKig4KnJhbmRvbUJ5dGVzKTsgCiAgICB1aW50IHJhbmRvbU51bWJlciA9IHVpbnQoa2VjY2FrMjU2KHJlc3VsdCkpICUgbWF4UmFuZ2U7IAogICAgd2lubmVyU2VsZWN0ZWQocmFuZG9tTnVtYmVyKTsKICB9CgogIC8vLyBAZGV2IEFuIGFkbWluaXN0cmF0aXZlIGZ1bmN0aW9uIHRvIGFsbG93IGluIGNhc2UgdGhlIHByb29mIGZhaWxzIG9yIAogIC8vLyBhIHJhbmRvbSB3aW5uZXIgbmVlZHMgdG8gYmUgY2hvc2VuIGFnYWluLgogIGZ1bmN0aW9uIGZvcmNlQ2hvb3NlUmFuZG9tV2lubmVyKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHJhZmZsZVN0YXRlICE9IFJhZmZsZVN0YXRlLkluQWN0aXZlKTsKICAgIGV4ZWN1dGVSYW5kb21RdWVyeSgpOwogIH0KCiAgLy8vIEBkZXYgRm9yY2VzIGEgcmVmdW5kIGZvciBhbGwgcGFydGljaXBhbnRzIGFuZCBkZWFjdGl2YXRlcyB0aGUgY29udHJhY3QKICAvLy8gVGhpcyBvZmZlcnMgYSBmdWxsIHJlZnVuZCwgc28gaXQgd2lsbCBiZSB1cCB0byB0aGUgb3duZXIgdG8gZW5zdXJlIGEgZnVsbCBiYWxhbmNlLgogIGZ1bmN0aW9uIGZvcmNlUmVmdW5kKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByYWZmbGVTdGF0ZSA9IFJhZmZsZVN0YXRlLlBlbmRpbmdJbkFjdGl2ZTsKCiAgICB1aW50IHRvdGFsID0gZ2V0VG90YWxUaWNrZXRzKCkgKiB0aWNrZXRQcmljZTsKICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID4gdG90YWwpOwoKICAgIGZvciAodWludCBpID0gMDsgaSA8IHRpY2tldEhvbGRlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgVGlja2V0SG9sZGVyIHN0b3JhZ2UgaG9sZGVyID0gdGlja2V0SG9sZGVyc1tpXTsKICAgICAgaG9sZGVyLnB1cmNoYXNlci50cmFuc2Zlcih1aW50MjU2KGhvbGRlci5jb3VudCkubXVsKHRpY2tldFByaWNlKSk7CiAgICB9CgogICAgcmVzZXRSYWZmbGUoKTsKICB9CgogIC8vLyBAZGV2IERlc3Ryb3lzIHRoZSBjdXJyZW50IGNvbnRyYWN0IGFuZCBtb3ZlcyBhbGwgRVRIIGJhY2sgdG8gIAogIGZ1bmN0aW9uIHVwZGF0ZVJld2FyZERpc3RyaWJ1dG9yKGFkZHJlc3MgbmV3UmV3YXJkRGlzdHJpYnV0b3IpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmV3YXJkRGlzdHJpYnV0b3IgPSBSZXdhcmREaXN0cmlidXRhYmxlKG5ld1Jld2FyZERpc3RyaWJ1dG9yKTsKICB9CgogIC8vLyBAZGV2IERlc3Ryb3lzIHRoZSBjdXJyZW50IGNvbnRyYWN0IGFuZCBtb3ZlcyBhbGwgRVRIIGJhY2sgdG8KICAvLy8gb3duZXIuIE9ubHkgY2FuIG9jY3VyIGFmdGVyIHN0YXRlIGhhcyBiZWVuIHNldCB0byBpbmFjdGl2ZS4KICBmdW5jdGlvbiBkZXN0cm95KCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHJhZmZsZVN0YXRlID09IFJhZmZsZVN0YXRlLkluQWN0aXZlKTsKICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgfQoKICAvLy8gR2V0cyB0aGUgcHJvamVjdGVkIGphY2twb3QgcHJpb3IgdG8gYW55IGZlZXMKICAvLy8gQHJldHVybiBUaGUgcHJvamVjdGVkIGphY2twb3QgcHJpb3IgdG8gYW55IGZlZXMKICBmdW5jdGlvbiBnZXRBYnNvbHV0ZVByb2plY3RlZEphY2twb3QoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgLy8vIEdldHMgdGhlIGFjdHVhbCBqYWNrcG90IHByaW9yIHRvIGFueSBmZWVzCiAgLy8vIEByZXR1cm4gVGhlIGFjdHVhbCBqYWNrcG90IGFtb3VudCBwcmlvciB0byBhbnkgZmVlcy4KICBmdW5jdGlvbiBnZXRBYnNvbHV0ZUphY2twb3QoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICAKICAvLy8gQW4gYWJzdHJhY3QgZnVuY3Rpb24gd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGEgaXQgaXMgYXBwcm9wcmlhdGUgdG8gY2hvb3NlIGEgd2lubmVyLgogIC8vLyBAcmV0dXJuIFRydWUgaWYgaXQgaXMgYXBwcm9wcmlhdGUgdG8gY2hvb3NlIHRoZSB3aW5uZXIsIGZhbHNlIG90aGVyd2lzZS4KICBmdW5jdGlvbiBzaG91bGRDaG9vc2VXaW5uZXIoKSBpbnRlcm5hbCByZXR1cm5zIChib29sKTsKCiAgZnVuY3Rpb24gZXhlY3V0ZVJhbmRvbVF1ZXJ5KCkgaW50ZXJuYWwgewogICAgaWYgKHJhbmRvbVNvdXJjZSA9PSBSYW5kb21Tb3VyY2UuUmFuZG9tRFMpIHsKICAgICAgb3JhY2xpemVEYXRhLm9yYWNsaXplX25ld1JhbmRvbURTUXVlcnkoMCwgcmFuZG9tQnl0ZXMsIGNhbGxiYWNrR2FzKTsKICAgIH0KICAgIGVsc2UgewogICAgICBvcmFjbGl6ZURhdGEub3JhY2xpemVfcXVlcnkoIlVSTCIsImpzb24oaHR0cHM6Ly9xcm5nLmFudS5lZHUuYXUvQVBJL2pzb25JLnBocD9sZW5ndGg9MSZ0eXBlPWhleDE2JnNpemU9MzIpLmRhdGFbMF0iLCBjYWxsYmFja0dhcyk7CiAgICB9CiAgfQoKICAvLy8gQ2hvb3NlcyB0aGUgd2lubmVyIGF0IHJhbmRvbS4KICBmdW5jdGlvbiBjaG9vc2VXaW5uZXIoKSBpbnRlcm5hbCB7CiAgICAvLyBXZSBidWlsZCBpbiBhIGJ1ZmZlciBvZiAyMCBibG9ja3MuICBBcHByb3ggMSBibG9jayBwZXIgMTUgc2VjcyB+IDUgbWlucwogICAgLy8gdGhlIGxhc3QgdGltZSByYW5kb20gd2FzIHF1ZXJpZWQsIHdlJ2xsIGV4ZWN1dGUgYWdhaW4uCiAgICBpZiAocmFuZG9tUXVlcmllZCA8IChibG9jay5udW1iZXIuc3ViKDIwKSkpIHsKICAgICAgZXhlY3V0ZVJhbmRvbVF1ZXJ5KCk7CiAgICAgIHJhbmRvbVF1ZXJpZWQgPSBibG9jay5udW1iZXI7CiAgICB9CiAgfQoKICAvLy8gSW50ZXJuYWwgZnVuY3Rpb24gZm9yIHdoZW4gYSB3aW5uZXIgaXMgY2hvc2VuLgogIGZ1bmN0aW9uIHdpbm5lclNlbGVjdGVkKHVpbnQgcmFuZG9tTnVtYmVyKSBpbnRlcm5hbCB7CiAgICBUaWNrZXRIb2xkZXIgbWVtb3J5IHdpbm5lciA9IGdldFdpbm5pbmdUaWNrZXRIb2xkZXIocmFuZG9tTnVtYmVyKTsKICAgIHVpbnQgamFja3BvdCA9IGdldEFic29sdXRlSmFja3BvdCgpOwogICAgSmFja3BvdCBtZW1vcnkgamFja3BvdFRvdGFscyA9IGdldEphY2twb3RUb3RhbHMoamFja3BvdCk7CgogICAgV2lubmVyU2VsZWN0ZWQod2lubmVyLnB1cmNoYXNlciwgZ2FtZUlkLCBqYWNrcG90VG90YWxzLndpbm5lclRvdGFsLCBub3cpOyAgICAKICAgIHRyYW5zZmVySmFja3BvdCh3aW5uZXIucHVyY2hhc2VyLCBqYWNrcG90VG90YWxzLndpbm5lclRvdGFsKTsKICAgIHRyYW5zZmVyQ2FzY2FkZXMoamFja3BvdFRvdGFscy5hYnNvbHV0ZVRvdGFsKTsKICAgIHJlc2V0UmFmZmxlKCk7CiAgfQoKICBmdW5jdGlvbiBnZXRXaW5uaW5nVGlja2V0SG9sZGVyKHVpbnQgcmFuZG9tTnVtYmVyKSBpbnRlcm5hbCB2aWV3IHJldHVybnMoVGlja2V0SG9sZGVyKSB7CiAgICBhc3NlcnQodGlja2V0SG9sZGVycy5sZW5ndGggPiAwKTsKICAgIHVpbnQgdG90YWxUaWNrZXRzID0gZ2V0VG90YWxUaWNrZXRzKCk7CiAgICB1aW50IHdpbm5lciA9IChyYW5kb21OdW1iZXIgJSB0b3RhbFRpY2tldHMpICsgMTsKCiAgICB1aW50IG1pbiA9IDA7CiAgICB1aW50IG1heCA9IHRpY2tldEhvbGRlcnMubGVuZ3RoLTE7CiAgICB3aGlsZSAobWF4ID4gbWluKSB7CiAgICAgICAgdWludCBtaWQgPSAobWF4ICsgbWluICsgMSkgLyAyOwogICAgICAgIGlmICh0aWNrZXRIb2xkZXJzW21pZF0ucnVubmluZ1RvdGFsID49IHdpbm5lciAmJgogICAgICAgICAodGlja2V0SG9sZGVyc1ttaWRdLnJ1bm5pbmdUb3RhbC10aWNrZXRIb2xkZXJzW21pZF0uY291bnQpIDwgd2lubmVyKSB7CiAgICAgICAgICAgcmV0dXJuIHRpY2tldEhvbGRlcnNbbWlkXTsKICAgICAgICB9CgogICAgICAgIGlmICh0aWNrZXRIb2xkZXJzW21pZF0ucnVubmluZ1RvdGFsIDw9IHdpbm5lcikgewogICAgICAgICAgICBtaW4gPSBtaWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbWF4ID0gbWlkLTE7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aWNrZXRIb2xkZXJzW21pbl07CiAgfQoKICAvLy8gVHJhbnNmZXJzIHRoZSBqYWNrcG90IHRvIHRoZSB3aW5uZXIgdHJpZ2dlcmluZyB0aGUgZXZlbnQKICBmdW5jdGlvbiB0cmFuc2ZlckphY2twb3QoYWRkcmVzcyB3aW5uZXIsIHVpbnQgamFja3BvdCkgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAvLyBXZSBleHBsaWNpdGx5IGRvIG5vdCB1c2UgdHJhbnNmZXIgaGVyZSBiZWNhdXNlIGlmIHRoZSAKICAgIC8vIHRoZSBjYWxsIGZhaWxzLCB0aGUgb3JhY2xpemUgY29udHJhY3Qgd2lsbCBub3QgcmV0cnkuCiAgICBib29sIHNlbmRTdWNjZXNzZnVsID0gd2lubmVyLnNlbmQoamFja3BvdCk7CiAgICBpZiAoIXNlbmRTdWNjZXNzZnVsKSB7CiAgICAgIGFkZFBlbmRpbmdXaW5uZXIod2lubmVyLCBqYWNrcG90KTsKICAgIH0KCiAgICByZXR1cm4gamFja3BvdDsKICB9CgogIC8vLyBSZXNldHMgdGhlIHJhZmZsZSBnYW1lIHN0YXRlLgogIGZ1bmN0aW9uIHJlc2V0UmFmZmxlKCkgaW50ZXJuYWwgewogICAgaWYgKHJhZmZsZVN0YXRlID09IFJhZmZsZVN0YXRlLlBlbmRpbmdJbkFjdGl2ZSkgewogICAgICByYWZmbGVTdGF0ZSA9IFJhZmZsZVN0YXRlLkluQWN0aXZlOwogICAgfQogICAgdGlja2V0SG9sZGVycy5sZW5ndGggPSAwOwogICAgZ2FtZUlkID0gYmxvY2subnVtYmVyOwogICAgcmFuZG9tUXVlcmllZCA9IDA7CiAgfQoKICAvLy8gR2V0cyB0aGUgamFja3BvdCBhZnRlciBmZWVzCiAgZnVuY3Rpb24gZ2V0SmFja3BvdFRvdGFscyh1aW50IGphY2twb3QpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMoSmFja3BvdCkgewogICAgaWYgKGphY2twb3QgPCBmZWUpIHsKICAgICAgcmV0dXJuIEphY2twb3QoMCwgMCwgMCwgMCk7CiAgICB9CgogICAgdWludCBjYXNjYWRlVG90YWwgPSBnZXRDYXNjYWRlVG90YWwodG90YWxDYXNjYWRpbmdQZXJjZW50YWdlLCBqYWNrcG90KTsKICAgIHJldHVybiBKYWNrcG90KGphY2twb3QsIGZlZSwgY2FzY2FkZVRvdGFsLCBqYWNrcG90LnN1YihmZWUpLnN1YihjYXNjYWRlVG90YWwpKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZVJhbmRvbVNvdXJjZSh1aW50IG5ld1JhbmRvbVNvdXJjZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBpZiAobmV3UmFuZG9tU291cmNlID09IDEpIHsKICAgICAgcmFuZG9tU291cmNlID0gUmFuZG9tU291cmNlLlJhbmRvbURTOwogICAgfSBlbHNlIHsKICAgICAgcmFuZG9tU291cmNlID0gUmFuZG9tU291cmNlLlFybmc7CiAgICB9CgogICAgc2V0UHJvb2YoKTsKICB9CgoKICBmdW5jdGlvbiBzZXRQcm9vZigpIGludGVybmFsIHsKICAgICAgaWYgKHJhbmRvbVNvdXJjZSA9PSBSYW5kb21Tb3VyY2UuUmFuZG9tRFMpIHsKICAgICAgICAvLyBwcm9vZlR5cGVfTGVkZ2VyID0gMHgzMDsKICAgICAgICBvcmFjbGl6ZURhdGEub3JhY2xpemVfc2V0UHJvb2YoMHgzMCk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgb3JhY2xpemVEYXRhLm9yYWNsaXplX3NldFByb29mKDB4MDApOwogICAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRUb3RhbFRpY2tldHMoKSBpbnRlcm5hbCB2aWV3IHJldHVybnModWludCkgewogICAgcmV0dXJuIHRpY2tldEhvbGRlcnMubGVuZ3RoID09IDAgPyAwIDogdGlja2V0SG9sZGVyc1t0aWNrZXRIb2xkZXJzLmxlbmd0aC0xXS5ydW5uaW5nVG90YWw7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVPcmFjbGl6ZUdhcyh1aW50IG5ld0NhbGxiYWNrR2FzLCB1aW50IGN1c3RvbUdhc1ByaWNlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGNhbGxiYWNrR2FzID0gbmV3Q2FsbGJhY2tHYXM7CiAgICB1cGRhdGVDdXN0b21HYXNQcmljZShjdXN0b21HYXNQcmljZSk7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVDdXN0b21HYXNQcmljZSh1aW50IGN1c3RvbUdhc1ByaWNlKSBpbnRlcm5hbCB7CiAgICBvcmFjbGl6ZURhdGEub3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UoY3VzdG9tR2FzUHJpY2UpOwogIH0KfQoKY29udHJhY3QgRGF0ZUJhc2VkUmFmZmxlIGlzIE93bmFibGUsIFJhZmZsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHVpbnQgcHVibGljIG5leHREcmF3VGltZTsKICB1aW50IHB1YmxpYyBkcmF3UGVyaW9kOwogIHVpbnQgcHVibGljIG1pbkphY2twb3Q7CgogIC8vLyBAZGV2IENvbnN0cnVjdG9yIGZvciBjb252ZW50aW9uYWwgcmFmZmxlCiAgLy8vIEBwYXJhbSBfdGlja2V0UHJpY2UgVGhlIHRpY2tldCBwcmljZS4KICAvLy8gQHBhcmFtIF9kcmF3UGVyaW9kIFRoZSBudW1iZXIgb2YgdGlja2V0cyBmb3IgYSBkcmF3IHRvIHRha2UgcGxhY2UuCiAgZnVuY3Rpb24gRGF0ZUJhc2VkUmFmZmxlKHVpbnQgX3RpY2tldFByaWNlLCB1aW50IF9kcmF3UGVyaW9kKSBSYWZmbGUoX3RpY2tldFByaWNlLCBhZGRyZXNzKDApKSBwdWJsaWMgewogICAgZHJhd1BlcmlvZCA9IF9kcmF3UGVyaW9kOwogICAgbmV4dERyYXdUaW1lID0gbm93LmFkZChfZHJhd1BlcmlvZCk7CiAgICBtaW5KYWNrcG90ID0gMjAgZmlubmV5OwogIH0KCiAgLy8vIEBkZXYgR2V0cyB0aGUgcHJvamVjdGVkIGphY2twb3QuCiAgZnVuY3Rpb24gZ2V0QWJzb2x1dGVQcm9qZWN0ZWRKYWNrcG90KCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIHRoaXMuYmFsYW5jZSAtIHRvdGFsUGVuZGluZ1BheW1lbnRzOyAKICB9CgogIC8vLyBAZGV2IEdldHMgdGhlIGFjdHVhbCBqYWNrcG90CiAgZnVuY3Rpb24gZ2V0QWJzb2x1dGVKYWNrcG90KCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIHRoaXMuYmFsYW5jZSAtIHRvdGFsUGVuZGluZ1BheW1lbnRzOwogIH0KICAKICAvLy8gQW4gYWJzdHJhY3QgZnVuY3Rpb24gd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGEgaXQgaXMgYXBwcm9wcmlhdGUgdG8gY2hvb3NlIGEgd2lubmVyLgogIC8vLyBAcmV0dXJuIFRydWUgaWYgaXQgaXMgYXBwcm9wcmlhdGUgdG8gY2hvb3NlIHRoZSB3aW5uZXIsIGZhbHNlIG90aGVyd2lzZS4KICBmdW5jdGlvbiBzaG91bGRDaG9vc2VXaW5uZXIoKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICB1aW50IGphY2twb3QgPSBnZXRBYnNvbHV0ZUphY2twb3QoKTsKICAgIEphY2twb3QgbWVtb3J5IGphY2twb3RUb3RhbHMgPSBnZXRKYWNrcG90VG90YWxzKGphY2twb3QpOwogICAgcmV0dXJuIG5vdyA+IG5leHREcmF3VGltZSAmJiBqYWNrcG90VG90YWxzLndpbm5lclRvdGFsID4gbWluSmFja3BvdDsKICB9CgogIGZ1bmN0aW9uIHJlc2V0UmFmZmxlKCkgaW50ZXJuYWwgewogICAgbmV4dERyYXdUaW1lID0gbm93LmFkZChkcmF3UGVyaW9kKTsKICAgIFJhZmZsZS5yZXNldFJhZmZsZSgpOwogIH0KCiAgZnVuY3Rpb24gdXBkYXRlRHJhd1BlcmlvZCh1aW50IG5ld0RyYXdQZXJpb2QpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZHJhd1BlcmlvZCA9IG5ld0RyYXdQZXJpb2Q7CiAgfQp9Cgpjb250cmFjdCBQcm9ncmVzc2l2ZVJhZmZsZSBpcyBPd25hYmxlLCBSZXdhcmRBcHByb3ZlciwgRGF0ZUJhc2VkUmFmZmxlIHsKICAKICB1aW50IHB1YmxpYyB0b2tlblRpY2tldFByaWNlOyAvLyBwcmljZSBmb3IgYSB0aWNrZXQgd2l0aCB3aG9sZSB0b2tlbnMKICBGdWxsRVJDMjAgcHVibGljIHRva2VuOwoKICAvLy8gQGRldiBDb25zdHJ1Y3RvciBmb3IgY29udmVudGlvbmFsIHJhZmZsZQogIGZ1bmN0aW9uIFByb2dyZXNzaXZlUmFmZmxlKHVpbnQgX3Rva2VuVGlja2V0UHJpY2UsIHVpbnQgX3RpbWVQZXJpb2QsIGFkZHJlc3MgdG9rZW5BZGRyZXNzKSBEYXRlQmFzZWRSYWZmbGUoMCwgX3RpbWVQZXJpb2QpIHB1YmxpYyB7CiAgICB0b2tlblRpY2tldFByaWNlID0gX3Rva2VuVGlja2V0UHJpY2U7CiAgICB0b2tlbiA9IEZ1bGxFUkMyMCh0b2tlbkFkZHJlc3MpOwogIH0KCiAgLy8vIEBkZXYgUHVyY2hhc2VzIHRpY2tldHMgdG8gdGhlIHJhZmZsZS4KICAvLy8gQHBhcmFtIG51bVRpY2tldHMgTnVtYmVyIG9mIHRpY2tldHMgdG8gcHVyY2hhc2UuCiAgZnVuY3Rpb24gcHVyY2hhc2VUaWNrZXQodWludCBudW1UaWNrZXRzLCBhZGRyZXNzIHJlZmVycmVyKSBwdWJsaWMgcGF5YWJsZSBjb3N0c0V4YWN0bHkoMCkgewogICAgcmVxdWlyZShyYWZmbGVTdGF0ZSAhPSBSYWZmbGVTdGF0ZS5JbkFjdGl2ZSk7CiAgICByZXF1aXJlKG51bVRpY2tldHMgPCA2NTUzNik7CiAgICAvLyB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICBhc3NlcnQodG9rZW4udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIHRoaXMsIG51bVRpY2tldHMubXVsKHRva2VuVGlja2V0UHJpY2UpLm11bCgxMCoqdWludDI1Nih0b2tlbi5kZWNpbWFscygpKSkpKTsKICAgIAogICAgLy8gQWRkIHRoZSBhZGRyZXNzIHRvIHRoZSB0aWNrZXRIb2xkZXJzLgogICAgdWludCB0b3RhbFRpY2tldHMgPSBnZXRUb3RhbFRpY2tldHMoKTsKICAgIHRpY2tldEhvbGRlcnMucHVzaChUaWNrZXRIb2xkZXIobXNnLnNlbmRlciwgdWludDE2KG51bVRpY2tldHMpLCB1aW50ODAodG90YWxUaWNrZXRzLmFkZChudW1UaWNrZXRzKSkpKTsKCiAgICBUaWNrZXRQdXJjaGFzZWQobXNnLnNlbmRlciwgZ2FtZUlkLCBudW1UaWNrZXRzLCB0aWNrZXRQcmljZS5tdWwobnVtVGlja2V0cyksIG5vdyk7CgogICAgaWYgKHNob3VsZENob29zZVdpbm5lcigpKSB7CiAgICAgIGNob29zZVdpbm5lcigpOwogICAgfQogIH0KCiAgLy8vIEludGVybmFsIGZ1bmN0aW9uIGZvciB3aGVuIGEgd2lubmVyIGlzIGNob3Nlbi4KICBmdW5jdGlvbiB3aW5uZXJTZWxlY3RlZCh1aW50IHJhbmRvbU51bWJlcikgaW50ZXJuYWwgewogICAgdWludCBqYWNrcG90ID0gZ2V0QWJzb2x1dGVKYWNrcG90KCk7CiAgICBKYWNrcG90IG1lbW9yeSBqYWNrcG90VG90YWxzID0gZ2V0SmFja3BvdFRvdGFscyhqYWNrcG90KTsKCiAgICBUaWNrZXRIb2xkZXIgbWVtb3J5IHdpbm5lciA9IGdldFdpbm5pbmdUaWNrZXRIb2xkZXIocmFuZG9tTnVtYmVyKTsKICAgIFdpbm5lclNlbGVjdGVkKHdpbm5lci5wdXJjaGFzZXIsIGdhbWVJZCwgamFja3BvdFRvdGFscy53aW5uZXJUb3RhbCwgbm93KTsgICAgCiAgICB0cmFuc2ZlckphY2twb3Qod2lubmVyLnB1cmNoYXNlciwgamFja3BvdFRvdGFscy53aW5uZXJUb3RhbCk7CiAgICB0cmFuc2ZlckNhc2NhZGVzKGphY2twb3RUb3RhbHMuYWJzb2x1dGVUb3RhbCk7CgogICAgYXBwcm92ZVRva2VuVHJhbnNmZXJzKCk7IC8vIFB1dCB0aGUgdG9rZW5zIGJhY2sgaW50byB0aGUgcG9vbC4KICAgIHJlc2V0UmFmZmxlKCk7CiAgfQoKICAvLy8gQGRldiBVcGRhdGVzIHRoZSB0b2tlbiB0aWNrZXQgcHJpY2UKICBmdW5jdGlvbiB1cGRhdGVUb2tlblRpY2tldFByaWNlKHVpbnQgbmV3VG9rZW5UaWNrZXRQcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlblRpY2tldFByaWNlID0gbmV3VG9rZW5UaWNrZXRQcmljZTsKICB9CgogIC8vLyBAZGV2IFVwZGF0ZXMgdGhlIHRva2VuIGFkZHJlc3Mgb2YgdGhlIHBheW1lbnQgdHlwZS4KICBmdW5jdGlvbiB1cGRhdGVUb2tlbihhZGRyZXNzIG5ld1Rva2VuKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRva2VuID0gRnVsbEVSQzIwKG5ld1Rva2VuKTsKICB9CgogICAvLy8gQGRldiBEZXN0cm95cyB0aGUgY3VycmVudCBjb250cmFjdCBhbmQgbW92ZXMgYWxsIEVUSCBiYWNrIHRvCiAgLy8vIG93bmVyLiBPbmx5IGNhbiBvY2N1ciBhZnRlciBzdGF0ZSBoYXMgYmVlbiBzZXQgdG8gaW5hY3RpdmUuCiAgZnVuY3Rpb24gZGVzdHJveSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShyYWZmbGVTdGF0ZSA9PSBSYWZmbGVTdGF0ZS5JbkFjdGl2ZSk7CiAgICBpZiAodG9rZW4gIT0gYWRkcmVzcygwKSkgewogICAgICBhc3NlcnQodG9rZW4udHJhbnNmZXIob3duZXIsIHRva2VuLmJhbGFuY2VPZih0aGlzKSkpOwogICAgfQogICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICB9CgogIC8vLyBAZGV2IEZvcmNlcyBhIHJlZnVuZCBmb3IgYWxsIHBhcnRpY2lwYW50cyBhbmQgZGVhY3RpdmF0ZXMgdGhlIGNvbnRyYWN0CiAgLy8vIFRoaXMgb2ZmZXJzIGEgZnVsbCByZWZ1bmQsIHNvIGl0IHdpbGwgYmUgdXAgdG8gdGhlIG93bmVyIHRvIGVuc3VyZSBhIGZ1bGwgYmFsYW5jZS4KICBmdW5jdGlvbiBmb3JjZVJlZnVuZCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmFmZmxlU3RhdGUgPSBSYWZmbGVTdGF0ZS5QZW5kaW5nSW5BY3RpdmU7CgogICAgdWludCB0b3RhbCA9IGdldFRvdGFsVGlja2V0cygpICogdGlja2V0UHJpY2U7CiAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+IHRvdGFsKTsKCiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0aWNrZXRIb2xkZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIFRpY2tldEhvbGRlciBzdG9yYWdlIGhvbGRlciA9IHRpY2tldEhvbGRlcnNbaV07CiAgICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlcigKICAgICAgICAgIGhvbGRlci5wdXJjaGFzZXIsIAogICAgICAgICAgdWludDI1Nihob2xkZXIuY291bnQpLm11bCh0b2tlblRpY2tldFByaWNlKS5tdWwoMTAqKnVpbnQyNTYodG9rZW4uZGVjaW1hbHMoKSkpKSk7CiAgICB9CgogICAgcmVzZXRSYWZmbGUoKTsKICB9Cn0KCmNvbnRyYWN0IFJld2FyZERpc3RyaWJ1dGFibGUgewogICAgZXZlbnQgVG9rZW5zUmV3YXJkZWQoYWRkcmVzcyBpbmRleGVkIHBsYXllciwgYWRkcmVzcyByZXdhcmRUb2tlbiwgdWludCByZXdhcmRzLCBhZGRyZXNzIHJlcXVlc3RlciwgdWludCBnYW1lSWQsIHVpbnQgYmxvY2spOwogICAgZXZlbnQgUmVmZXJyYWxSZXdhcmRlZChhZGRyZXNzIGluZGV4ZWQgcmVmZXJyZXIsIGFkZHJlc3MgaW5kZXhlZCBwbGF5ZXIsIGFkZHJlc3MgcmV3YXJkVG9rZW4sIHVpbnQgcmV3YXJkcywgdWludCBnYW1lSWQsIHVpbnQgYmxvY2spOwogICAgZXZlbnQgUmVmZXJyYWxSZWdpc3RlcmVkKGFkZHJlc3MgaW5kZXhlZCBwbGF5ZXIsIGFkZHJlc3MgaW5kZXhlZCByZWZlcnJlcik7CgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlcyBhbmQgdHJhbnNmZXJzIHRoZSByZXdhcmRzIHRvIHRoZSBwbGF5ZXIuCiAgICBmdW5jdGlvbiB0cmFuc2ZlclJld2FyZHMoYWRkcmVzcyBwbGF5ZXIsIHVpbnQgZW50cnlBbW91bnQsIHVpbnQgZ2FtZUlkKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucywgYWNyb3NzIGFsbCBhcHByb3ZhbHMuCiAgICBmdW5jdGlvbiBnZXRUb3RhbFRva2VucyhhZGRyZXNzIHRva2VuQWRkcmVzcykgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCk7CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIHN1cHBvcnRlZCByZXdhcmQgdG9rZW4gY29udHJhY3RzLgogICAgZnVuY3Rpb24gZ2V0UmV3YXJkVG9rZW5Db3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpOwoKICAgIC8vLyBAZGV2IEdldHMgdGhlIHRvdGFsIG51bWJlciBvZiBhcHByb3ZlcnMuCiAgICBmdW5jdGlvbiBnZXRUb3RhbEFwcHJvdmVycygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpOwoKICAgIC8vLyBAZGV2IEdldHMgdGhlIHJld2FyZCByYXRlIGluY2x1c2l2ZSBvZiByZWZlcnJhbCBib251cy4KICAgIGZ1bmN0aW9uIGdldFJld2FyZFJhdGUoYWRkcmVzcyBwbGF5ZXIsIGFkZHJlc3MgdG9rZW5BZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KTsKCiAgICAvLy8gQGRldiBBZGRzIGEgcmVxdWVzdGVyIHRvIHRoZSB3aGl0ZWxpc3QuCiAgICAvLy8gQHBhcmFtIHJlcXVlc3RlciBUaGUgYWRkcmVzcyBvZiBhIGNvbnRyYWN0IHdoaWNoIHdpbGwgcmVxdWVzdCByZXdhcmQgdHJhbnNmZXJzCiAgICBmdW5jdGlvbiBhZGRSZXF1ZXN0ZXIoYWRkcmVzcyByZXF1ZXN0ZXIpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBSZW1vdmVzIGEgcmVxdWVzdGVyIGZyb20gdGhlIHdoaXRlbGlzdC4KICAgIC8vLyBAcGFyYW0gcmVxdWVzdGVyIFRoZSBhZGRyZXNzIG9mIGEgY29udHJhY3Qgd2hpY2ggd2lsbCByZXF1ZXN0IHJld2FyZCB0cmFuc2ZlcnMKICAgIGZ1bmN0aW9uIHJlbW92ZVJlcXVlc3RlcihhZGRyZXNzIHJlcXVlc3RlcikgcHVibGljOwoKICAgIC8vLyBAZGV2IEFkZHMgYSBhcHByb3ZlciBhZGRyZXNzLiAgQXBwcm92YWwgaGFwcGVucyB3aXRoIHRoZSB0b2tlbiBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gYXBwcm92ZXIgVGhlIGFwcHJvdmVyIGFkZHJlc3MgdG8gYWRkIHRvIHRoZSBwb29sLgogICAgZnVuY3Rpb24gYWRkQXBwcm92ZXIoYWRkcmVzcyBhcHByb3ZlcikgcHVibGljOwoKICAgIC8vLyBAZGV2IFJlbW92ZXMgYW4gYXBwcm92ZXIgYWRkcmVzcy4gCiAgICAvLy8gQHBhcmFtIGFwcHJvdmVyIFRoZSBhcHByb3ZlciBhZGRyZXNzIHRvIHJlbW92ZSBmcm9tIHRoZSBwb29sLgogICAgZnVuY3Rpb24gcmVtb3ZlQXBwcm92ZXIoYWRkcmVzcyBhcHByb3ZlcikgcHVibGljOwoKICAgIC8vLyBAZGV2IFVwZGF0ZXMgdGhlIHJld2FyZCByYXRlCiAgICBmdW5jdGlvbiB1cGRhdGVSZXdhcmRSYXRlKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCB1aW50IG5ld1Jld2FyZFJhdGUpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBVcGRhdGVzIHRoZSB0b2tlbiBhZGRyZXNzIG9mIHRoZSBwYXltZW50IHR5cGUuCiAgICBmdW5jdGlvbiBhZGRSZXdhcmRUb2tlbihhZGRyZXNzIHRva2VuQWRkcmVzcywgdWludCBuZXdSZXdhcmRSYXRlKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgVXBkYXRlcyB0aGUgdG9rZW4gYWRkcmVzcyBvZiB0aGUgcGF5bWVudCB0eXBlLgogICAgZnVuY3Rpb24gcmVtb3ZlUmV3YXJkVG9rZW4oYWRkcmVzcyB0b2tlbkFkZHJlc3MpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBVcGRhdGVzIHRoZSByZWZlcnJhbCBib251cyByYXRlCiAgICBmdW5jdGlvbiB1cGRhdGVSZWZlcnJhbEJvbnVzUmF0ZSh1aW50IG5ld1JlZmVycmFsQm9udXNSYXRlKSBwdWJsaWM7CgogICAgLy8vIEBkZXYgUmVnaXN0ZXJzIHRoZSBwbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gcmVmZXJyYWwgY29kZQogICAgLy8vIEBwYXJhbSBwbGF5ZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHBsYXllcgogICAgLy8vIEBwYXJhbSByZWZlcnJlciBUaGUgYWRkcmVzcyBvZiB0aGUgcmVmZXJyZXIKICAgIGZ1bmN0aW9uIHJlZ2lzdGVyUmVmZXJyYWwoYWRkcmVzcyBwbGF5ZXIsIGFkZHJlc3MgcmVmZXJyZXIpIHB1YmxpYzsKCiAgICAvLy8gQGRldiBUcmFuc2ZlcnMgYW55IHRva2VucyB0byB0aGUgb3duZXIKICAgIGZ1bmN0aW9uIGRlc3Ryb3lSZXdhcmRzKCkgcHVibGljOwp9'.
	

]
