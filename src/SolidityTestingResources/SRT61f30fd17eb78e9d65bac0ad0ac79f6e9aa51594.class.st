Class {
	#name : #SRT61f30fd17eb78e9d65bac0ad0ac79f6e9aa51594,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61f30fd17eb78e9d65bac0ad0ac79f6e9aa51594 >> base64 [
	^ ''.
	

]
