Class {
	#name : #SRT5a4cdcb676d40d939d013bb50909e835b8e3cabe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a4cdcb676d40d939d013bb50909e835b8e3cabe >> base64 [
	^ ''.
	

]
