Class {
	#name : #SRT65f3f1a2e66323a17d7f177db86bb326071e87f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT65f3f1a2e66323a17d7f177db86bb326071e87f9 >> base64 [
	^ ''.
	

]
