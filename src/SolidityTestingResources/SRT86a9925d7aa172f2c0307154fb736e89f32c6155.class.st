Class {
	#name : #SRT86a9925d7aa172f2c0307154fb736e89f32c6155,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86a9925d7aa172f2c0307154fb736e89f32c6155 >> base64 [
	^ ''.
	

]
