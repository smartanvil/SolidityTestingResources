Class {
	#name : #SRT19d7a9ad3b49252fd2ef640d0e43dfd651168499,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19d7a9ad3b49252fd2ef640d0e43dfd651168499 >> base64 [
	^ ''.
	

]
