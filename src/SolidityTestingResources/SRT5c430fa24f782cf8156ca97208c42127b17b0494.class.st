Class {
	#name : #SRT5c430fa24f782cf8156ca97208c42127b17b0494,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5c430fa24f782cf8156ca97208c42127b17b0494 >> base64 [
	^ ''.
	

]
