Class {
	#name : #SRT460a40f16a00e3c6be9c55ef6696e7b036db2703,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT460a40f16a00e3c6be9c55ef6696e7b036db2703 >> base64 [
	^ ''.
	

]
