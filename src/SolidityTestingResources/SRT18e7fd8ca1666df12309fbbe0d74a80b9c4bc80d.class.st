Class {
	#name : #SRT18e7fd8ca1666df12309fbbe0d74a80b9c4bc80d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT18e7fd8ca1666df12309fbbe0d74a80b9c4bc80d >> base64 [
	^ ''.
	

]
