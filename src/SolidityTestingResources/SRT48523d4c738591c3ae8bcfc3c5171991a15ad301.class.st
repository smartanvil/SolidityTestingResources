Class {
	#name : #SRT48523d4c738591c3ae8bcfc3c5171991a15ad301,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48523d4c738591c3ae8bcfc3c5171991a15ad301 >> base64 [
	^ ''.
	

]
