Class {
	#name : #SRT763bbbfad61a1bef272c155aad828e3f8309710e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT763bbbfad61a1bef272c155aad828e3f8309710e >> base64 [
	^ ''.
	

]
