Class {
	#name : #SRTaf7ef25C997A5121459122308a84A032D4A16868,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf7ef25C997A5121459122308a84A032D4A16868 >> base64 [
	^ ''.
	

]
