Class {
	#name : #SRT820b5d21d1b1125b1aad51951f6e032a07caec65,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT820b5d21d1b1125b1aad51951f6e032a07caec65 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKgoKTW9uZXRoYSBCdXllcgo9PT09PT09PT09PT09PT09PT09PT09PT0KCkJ1eXMgTW9uZXRoYSB0b2tlbnMgZnJvbSB0aGUgY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLgpBdXRob3I6IC91L0NpbnRpeAoKKi8KCi8vIEVSQzIwIEludGVyZmFjZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCmNvbnRyYWN0IEVSQzIwIHsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwp9Cgpjb250cmFjdCBNb25ldGhhQnV5ZXIgewogIC8vIFN0b3JlIHRoZSBhbW91bnQgb2YgRVRIIGRlcG9zaXRlZCBieSBlYWNoIGFjY291bnQuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgLy8gQm91bnR5IGZvciBleGVjdXRpbmcgYnV5LgogIHVpbnQyNTYgcHVibGljIGJ1eV9ib3VudHk7CiAgLy8gQm91bnR5IGZvciBleGVjdXRpbmcgd2l0aGRyYXdhbHMuCiAgdWludDI1NiBwdWJsaWMgd2l0aGRyYXdfYm91bnR5OwogIC8vIFRyYWNrIHdoZXRoZXIgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2VucyB5ZXQuCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsKICAvLyBSZWNvcmQgRVRIIHZhbHVlIG9mIHRva2VucyBjdXJyZW50bHkgaGVsZCBieSBjb250cmFjdC4KICB1aW50MjU2IHB1YmxpYyBjb250cmFjdF9ldGhfdmFsdWU7CiAgLy8gRW1lcmdlbmN5IGtpbGwgc3dpdGNoIGluIGNhc2UgYSBjcml0aWNhbCBidWcgaXMgZm91bmQuCiAgYm9vbCBwdWJsaWMga2lsbF9zd2l0Y2g7CiAgCiAgLy8gU0hBMyBoYXNoIG9mIGtpbGwgc3dpdGNoIHBhc3N3b3JkLgogIGJ5dGVzMzIgcGFzc3dvcmRfaGFzaCA9IDB4ODIyM2NiYTRkOGI1NGRjMWUwM2M0MWMwNTk2NjdmNmFkYjFhNjQyYTBhMDdiZWY1YTlkMTFjMThjNGYxNDYxMjsKICAvLyBFYXJsaWVzdCB0aW1lIGNvbnRyYWN0IGlzIGFsbG93ZWQgdG8gYnV5IGludG8gdGhlIGNyb3dkc2FsZS4KICB1aW50MjU2IHB1YmxpYyBlYXJsaWVzdF9idXlfdGltZSA9IDE1MDQxODgwMDA7CiAgLy8gTWF4aW11bSBhbW91bnQgb2YgdXNlciBFVEggY29udHJhY3Qgd2lsbCBhY2NlcHQuICBSZWR1Y2VzIHJpc2sgb2YgaGFyZCBjYXAgcmVsYXRlZCBmYWlsdXJlLgogIHVpbnQyNTYgcHVibGljIGV0aF9jYXAgPSAzMDAwMCBldGhlcjsKICAvLyBUaGUgZGV2ZWxvcGVyIGFkZHJlc3MuCiAgYWRkcmVzcyBwdWJsaWMgZGV2ZWxvcGVyID0gMHgwMDBGYjgzNjk2NzdiMzA2NWRFNTgyMWE4NkJjOTU1MWQ1ZTVFQWI5OwogIC8vIFRoZSBjcm93ZHNhbGUgYWRkcmVzcy4gIFNldHRhYmxlIGJ5IHRoZSBkZXZlbG9wZXIuCiAgYWRkcmVzcyBwdWJsaWMgc2FsZTsKICAvLyBUaGUgdG9rZW4gYWRkcmVzcy4gIFNldHRhYmxlIGJ5IHRoZSBkZXZlbG9wZXIuCiAgRVJDMjAgcHVibGljIHRva2VuOwogIAogIC8vIEFsbG93cyB0aGUgZGV2ZWxvcGVyIHRvIHNldCB0aGUgY3Jvd2RzYWxlIGFuZCB0b2tlbiBhZGRyZXNzZXMuCiAgZnVuY3Rpb24gc2V0X2FkZHJlc3NlcyhhZGRyZXNzIF9zYWxlLCBhZGRyZXNzIF90b2tlbikgewogICAgLy8gT25seSBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIHNldCB0aGUgc2FsZSBhbmQgdG9rZW4gYWRkcmVzc2VzLgogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGRldmVsb3Blcik7CiAgICAvLyBPbmx5IGFsbG93IHNldHRpbmcgdGhlIGFkZHJlc3NlcyBvbmNlLgogICAgcmVxdWlyZShzYWxlID09IDB4MCk7CiAgICAvLyBTZXQgdGhlIGNyb3dkc2FsZSBhbmQgdG9rZW4gYWRkcmVzc2VzLgogICAgc2FsZSA9IF9zYWxlOwogICAgdG9rZW4gPSBFUkMyMChfdG9rZW4pOwogIH0KICAKICAvLyBBbGxvd3MgdGhlIGRldmVsb3BlciBvciBhbnlvbmUgd2l0aCB0aGUgcGFzc3dvcmQgdG8gc2h1dCBkb3duIGV2ZXJ5dGhpbmcgZXhjZXB0IHdpdGhkcmF3YWxzIGluIGVtZXJnZW5jaWVzLgogIGZ1bmN0aW9uIGFjdGl2YXRlX2tpbGxfc3dpdGNoKHN0cmluZyBwYXNzd29yZCkgewogICAgLy8gT25seSBhY3RpdmF0ZSB0aGUga2lsbCBzd2l0Y2ggaWYgdGhlIHNlbmRlciBpcyB0aGUgZGV2ZWxvcGVyIG9yIHRoZSBwYXNzd29yZCBpcyBjb3JyZWN0LgogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGRldmVsb3BlciB8fCBzaGEzKHBhc3N3b3JkKSA9PSBwYXNzd29yZF9oYXNoKTsKICAgIC8vIFN0b3JlIHRoZSBjbGFpbWVkIGJvdW50eSBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZS4KICAgIHVpbnQyNTYgY2xhaW1lZF9ib3VudHkgPSBidXlfYm91bnR5OwogICAgLy8gVXBkYXRlIGJvdW50eSBwcmlvciB0byBzZW5kaW5nIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuCiAgICBidXlfYm91bnR5ID0gMDsKICAgIC8vIElycmV2ZXJzaWJseSBhY3RpdmF0ZSB0aGUga2lsbCBzd2l0Y2guCiAgICBraWxsX3N3aXRjaCA9IHRydWU7CiAgICAvLyBTZW5kIHRoZSBjYWxsZXIgdGhlaXIgYm91bnR5IGZvciBhY3RpdmF0aW5nIHRoZSBraWxsIHN3aXRjaC4KICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2xhaW1lZF9ib3VudHkpOwogIH0KICAKICAvLyBXaXRoZHJhd3MgYWxsIEVUSCBkZXBvc2l0ZWQgb3IgdG9rZW5zIHB1cmNoYXNlZCBieSB0aGUgZ2l2ZW4gdXNlciBhbmQgcmV3YXJkcyB0aGUgY2FsbGVyLgogIGZ1bmN0aW9uIHdpdGhkcmF3KGFkZHJlc3MgdXNlcil7CiAgICAvLyBPbmx5IGFsbG93IHdpdGhkcmF3YWxzIGFmdGVyIHRoZSBjb250cmFjdCBoYXMgaGFkIGEgY2hhbmNlIHRvIGJ1eSBpbi4KICAgIHJlcXVpcmUoYm91Z2h0X3Rva2VucyB8fCBub3cgPiBlYXJsaWVzdF9idXlfdGltZSArIDEgaG91cnMpOwogICAgLy8gU2hvcnQgY2lyY3VpdCB0byBzYXZlIGdhcyBpZiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgYSBiYWxhbmNlLgogICAgaWYgKGJhbGFuY2VzW3VzZXJdID09IDApIHJldHVybjsKICAgIC8vIElmIHRoZSBjb250cmFjdCBmYWlsZWQgdG8gYnV5IGludG8gdGhlIHNhbGUsIHdpdGhkcmF3IHRoZSB1c2VyJ3MgRVRILgogICAgaWYgKCFib3VnaHRfdG9rZW5zKSB7CiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byB3aXRoZHJhd2FsIGluIGEgdGVtcG9yYXJ5IHZhcmlhYmxlLgogICAgICB1aW50MjU2IGV0aF90b193aXRoZHJhdyA9IGJhbGFuY2VzW3VzZXJdOwogICAgICAvLyBVcGRhdGUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHNlbmRpbmcgRVRIIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuCiAgICAgIGJhbGFuY2VzW3VzZXJdID0gMDsKICAgICAgLy8gUmV0dXJuIHRoZSB1c2VyJ3MgZnVuZHMuICBUaHJvd3Mgb24gZmFpbHVyZSB0byBwcmV2ZW50IGxvc3Mgb2YgZnVuZHMuCiAgICAgIHVzZXIudHJhbnNmZXIoZXRoX3RvX3dpdGhkcmF3KTsKICAgIH0KICAgIC8vIFdpdGhkcmF3IHRoZSB1c2VyJ3MgdG9rZW5zIGlmIHRoZSBjb250cmFjdCBoYXMgcHVyY2hhc2VkIHRoZW0uCiAgICBlbHNlIHsKICAgICAgLy8gUmV0cmlldmUgY3VycmVudCB0b2tlbiBiYWxhbmNlIG9mIGNvbnRyYWN0LgogICAgICB1aW50MjU2IGNvbnRyYWN0X3Rva2VuX2JhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgIC8vIERpc2FsbG93IHRva2VuIHdpdGhkcmF3YWxzIGlmIHRoZXJlIGFyZSBubyB0b2tlbnMgdG8gd2l0aGRyYXcuCiAgICAgIHJlcXVpcmUoY29udHJhY3RfdG9rZW5fYmFsYW5jZSAhPSAwKTsKICAgICAgLy8gU3RvcmUgdGhlIHVzZXIncyB0b2tlbiBiYWxhbmNlIGluIGEgdGVtcG9yYXJ5IHZhcmlhYmxlLgogICAgICB1aW50MjU2IHRva2Vuc190b193aXRoZHJhdyA9IChiYWxhbmNlc1t1c2VyXSAqIGNvbnRyYWN0X3Rva2VuX2JhbGFuY2UpIC8gY29udHJhY3RfZXRoX3ZhbHVlOwogICAgICAvLyBVcGRhdGUgdGhlIHZhbHVlIG9mIHRva2VucyBjdXJyZW50bHkgaGVsZCBieSB0aGUgY29udHJhY3QuCiAgICAgIGNvbnRyYWN0X2V0aF92YWx1ZSAtPSBiYWxhbmNlc1t1c2VyXTsKICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuCiAgICAgIGJhbGFuY2VzW3VzZXJdID0gMDsKICAgICAgLy8gMSUgZmVlIGlmIGNvbnRyYWN0IHN1Y2Nlc3NmdWxseSBib3VnaHQgdG9rZW5zLgogICAgICB1aW50MjU2IGZlZSA9IHRva2Vuc190b193aXRoZHJhdyAvIDEwMDsKICAgICAgLy8gU2VuZCB0aGUgZmVlIHRvIHRoZSBkZXZlbG9wZXIuCiAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIoZGV2ZWxvcGVyLCBmZWUpKTsKICAgICAgLy8gU2VuZCB0aGUgZnVuZHMuICBUaHJvd3Mgb24gZmFpbHVyZSB0byBwcmV2ZW50IGxvc3Mgb2YgZnVuZHMuCiAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIodXNlciwgdG9rZW5zX3RvX3dpdGhkcmF3IC0gZmVlKSk7CiAgICB9CiAgICAvLyBFYWNoIHdpdGhkcmF3IGNhbGwgZWFybnMgMSUgb2YgdGhlIGN1cnJlbnQgd2l0aGRyYXcgYm91bnR5LgogICAgdWludDI1NiBjbGFpbWVkX2JvdW50eSA9IHdpdGhkcmF3X2JvdW50eSAvIDEwMDsKICAgIC8vIFVwZGF0ZSB0aGUgd2l0aGRyYXcgYm91bnR5IHByaW9yIHRvIHNlbmRpbmcgdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4KICAgIHdpdGhkcmF3X2JvdW50eSAtPSBjbGFpbWVkX2JvdW50eTsKICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIHdpdGhkcmF3aW5nIG9uIHRoZSB1c2VyJ3MgYmVoYWxmLgogICAgbXNnLnNlbmRlci50cmFuc2ZlcihjbGFpbWVkX2JvdW50eSk7CiAgfQogIAogIC8vIEFsbG93cyBkZXZlbG9wZXIgdG8gYWRkIEVUSCB0byB0aGUgYnV5IGV4ZWN1dGlvbiBib3VudHkuCiAgZnVuY3Rpb24gYWRkX3RvX2J1eV9ib3VudHkoKSBwYXlhYmxlIHsKICAgIC8vIE9ubHkgYWxsb3cgdGhlIGRldmVsb3BlciB0byBjb250cmlidXRlIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4KICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBkZXZlbG9wZXIpOwogICAgLy8gVXBkYXRlIGJvdW50eSB0byBpbmNsdWRlIHJlY2VpdmVkIGFtb3VudC4KICAgIGJ1eV9ib3VudHkgKz0gbXNnLnZhbHVlOwogIH0KICAKICAvLyBBbGxvd3MgZGV2ZWxvcGVyIHRvIGFkZCBFVEggdG8gdGhlIHdpdGhkcmF3IGV4ZWN1dGlvbiBib3VudHkuCiAgZnVuY3Rpb24gYWRkX3RvX3dpdGhkcmF3X2JvdW50eSgpIHBheWFibGUgewogICAgLy8gT25seSBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIGNvbnRyaWJ1dGUgdG8gdGhlIGJ1eSBleGVjdXRpb24gYm91bnR5LgogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGRldmVsb3Blcik7CiAgICAvLyBVcGRhdGUgYm91bnR5IHRvIGluY2x1ZGUgcmVjZWl2ZWQgYW1vdW50LgogICAgd2l0aGRyYXdfYm91bnR5ICs9IG1zZy52YWx1ZTsKICB9CiAgCiAgLy8gQnV5cyB0b2tlbnMgaW4gdGhlIGNyb3dkc2FsZSBhbmQgcmV3YXJkcyB0aGUgY2FsbGVyLCBjYWxsYWJsZSBieSBhbnlvbmUuCiAgZnVuY3Rpb24gY2xhaW1fYm91bnR5KCl7CiAgICAvLyBTaG9ydCBjaXJjdWl0IHRvIHNhdmUgZ2FzIGlmIHRoZSBjb250cmFjdCBoYXMgYWxyZWFkeSBib3VnaHQgdG9rZW5zLgogICAgaWYgKGJvdWdodF90b2tlbnMpIHJldHVybjsKICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGVhcmxpZXN0IGJ1eSB0aW1lIGhhc24ndCBiZWVuIHJlYWNoZWQuCiAgICBpZiAobm93IDwgZWFybGllc3RfYnV5X3RpbWUpIHJldHVybjsKICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLgogICAgaWYgKGtpbGxfc3dpdGNoKSByZXR1cm47CiAgICAvLyBEaXNhbGxvdyBidXlpbmcgaW4gaWYgdGhlIGRldmVsb3BlciBoYXNuJ3Qgc2V0IHRoZSBzYWxlIGFkZHJlc3MgeWV0LgogICAgcmVxdWlyZShzYWxlICE9IDB4MCk7CiAgICAvLyBSZWNvcmQgdGhhdCB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zLgogICAgYm91Z2h0X3Rva2VucyA9IHRydWU7CiAgICAvLyBTdG9yZSB0aGUgY2xhaW1lZCBib3VudHkgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUuCiAgICB1aW50MjU2IGNsYWltZWRfYm91bnR5ID0gYnV5X2JvdW50eTsKICAgIC8vIFVwZGF0ZSBib3VudHkgcHJpb3IgdG8gc2VuZGluZyB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLgogICAgYnV5X2JvdW50eSA9IDA7CiAgICAvLyBSZWNvcmQgdGhlIGFtb3VudCBvZiBFVEggc2VudCBhcyB0aGUgY29udHJhY3QncyBjdXJyZW50IHZhbHVlLgogICAgY29udHJhY3RfZXRoX3ZhbHVlID0gdGhpcy5iYWxhbmNlIC0gKGNsYWltZWRfYm91bnR5ICsgd2l0aGRyYXdfYm91bnR5KTsKICAgIC8vIFRyYW5zZmVyIGFsbCB0aGUgZnVuZHMgKGxlc3MgdGhlIGJvdW50aWVzKSB0byB0aGUgY3Jvd2RzYWxlIGFkZHJlc3MKICAgIC8vIHRvIGJ1eSB0b2tlbnMuICBUaHJvd3MgaWYgdGhlIGNyb3dkc2FsZSBoYXNuJ3Qgc3RhcnRlZCB5ZXQgb3IgaGFzCiAgICAvLyBhbHJlYWR5IGNvbXBsZXRlZCwgcHJldmVudGluZyBsb3NzIG9mIGZ1bmRzLgogICAgcmVxdWlyZShzYWxlLmNhbGwudmFsdWUoY29udHJhY3RfZXRoX3ZhbHVlKSgpKTsKICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4KICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2xhaW1lZF9ib3VudHkpOwogIH0KICAKICAvLyBEZWZhdWx0IGZ1bmN0aW9uLiAgQ2FsbGVkIHdoZW4gYSB1c2VyIHNlbmRzIEVUSCB0byB0aGUgY29udHJhY3QuCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAvLyBEaXNhbGxvdyBkZXBvc2l0cyBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuCiAgICByZXF1aXJlKCFraWxsX3N3aXRjaCk7CiAgICAvLyBPbmx5IGFsbG93IGRlcG9zaXRzIGlmIHRoZSBjb250cmFjdCBoYXNuJ3QgYWxyZWFkeSBwdXJjaGFzZWQgdGhlIHRva2Vucy4KICAgIHJlcXVpcmUoIWJvdWdodF90b2tlbnMpOwogICAgLy8gT25seSBhbGxvdyBkZXBvc2l0cyB0aGF0IHdvbid0IGV4Y2VlZCB0aGUgY29udHJhY3QncyBFVEggY2FwLgogICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPCBldGhfY2FwKTsKICAgIC8vIFVwZGF0ZSByZWNvcmRzIG9mIGRlcG9zaXRlZCBFVEggdG8gaW5jbHVkZSB0aGUgcmVjZWl2ZWQgYW1vdW50LgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogIH0KfQ=='.
	

]
