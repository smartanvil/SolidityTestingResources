Class {
	#name : #SRT808067e2f6e266319f71b2e21bdf99b59ead05c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT808067e2f6e266319f71b2e21bdf99b59ead05c6 >> base64 [
	^ ''.
	

]
