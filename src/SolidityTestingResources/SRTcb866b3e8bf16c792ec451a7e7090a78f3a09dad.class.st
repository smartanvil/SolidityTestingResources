Class {
	#name : #SRTcb866b3e8bf16c792ec451a7e7090a78f3a09dad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb866b3e8bf16c792ec451a7e7090a78f3a09dad >> base64 [
	^ ''.
	

]
