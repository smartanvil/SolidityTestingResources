Class {
	#name : #SRTc2a97d7bba80bd06855d6622ac965428c6cfa9dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2a97d7bba80bd06855d6622ac965428c6cfa9dd >> base64 [
	^ ''.
	

]
