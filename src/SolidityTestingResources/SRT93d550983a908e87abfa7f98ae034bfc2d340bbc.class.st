Class {
	#name : #SRT93d550983a908e87abfa7f98ae034bfc2d340bbc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT93d550983a908e87abfa7f98ae034bfc2d340bbc >> base64 [
	^ ''.
	

]
