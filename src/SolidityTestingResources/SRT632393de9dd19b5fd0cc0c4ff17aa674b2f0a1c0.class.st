Class {
	#name : #SRT632393de9dd19b5fd0cc0c4ff17aa674b2f0a1c0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT632393de9dd19b5fd0cc0c4ff17aa674b2f0a1c0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwQmFzaWMgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgQnVybmFibGUgVG9rZW4KICogQGRldiBUb2tlbiB0aGF0IGNhbiBiZSBpcnJldmVyc2libHkgYnVybmVkIChkZXN0cm95ZWQpLgogKi8KY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgYnVybmVkLgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIG5vIG5lZWQgdG8gcmVxdWlyZSB2YWx1ZSA8PSB0b3RhbFN1cHBseSwgc2luY2UgdGhhdCB3b3VsZCBpbXBseSB0aGUKICAgICAgICAvLyBzZW5kZXIncyBiYWxhbmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWxTdXBwbHksIHdoaWNoICpzaG91bGQqIGJlIGFuIGFzc2VydGlvbiBmYWlsdXJlCgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tidXJuZXJdID0gYmFsYW5jZXNbYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBCdXJuYWJsZVRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KCn0KCmNvbnRyYWN0IFBhdXNhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgUGF1c2FibGUgewoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICB9Cgp9CgovKgogKiBAdGl0bGUgR0VTVG9rZW4KICovCmNvbnRyYWN0IEdFU1Rva2VuIGlzIE1pbnRhYmxlVG9rZW4sIFBhdXNhYmxlVG9rZW4gewogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJHYWxheHkgZVNvbHV0aW9ucyI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiR0VTIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKfQoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBNb2RpZmllZCBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqLwoKY29udHJhY3QgR0VTVG9rZW5Dcm93ZFNhbGUgaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHN0cnVjdCBUaW1lQm9udXMgewogICAgdWludDI1NiBib251c1BlcmlvZEVuZFRpbWU7CiAgICB1aW50IHBlcmNlbnQ7CiAgICB1aW50MjU2IHdlaUNhcDsKICB9CgogIC8qIHRydWUgZm9yIGZpbmFsaXNlZCBjcm93ZHNhbGUgKi8KICBib29sIHB1YmxpYyBpc0ZpbmFsaXNlZDsKCiAgLyogVGhlIHRva2VuIG9iamVjdCAqLwogIE1pbnRhYmxlVG9rZW4gcHVibGljIHRva2VuOwoKICAvKiBTdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKSAqLwogIHVpbnQyNTYgcHVibGljIG1haW5TYWxlU3RhcnRUaW1lOwogIHVpbnQyNTYgcHVibGljIG1haW5TYWxlRW5kVGltZTsKCiAgLyogQWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgdHJhbnNmZXJyZWYgYWZ0ZXIgY29sbGVjdGlvbiAqLwogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLyogQWRkcmVzcyB3aGVyZSBmaW5hbCAxMCUgb2YgZnVuZHMgd2lsbCBiZSBjb2xsZWN0ZWQgKi8KICBhZGRyZXNzIHB1YmxpYyB0b2tlbldhbGxldDsKCiAgLyogSG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciBldGhlciAqLwogIHVpbnQyNTYgcHVibGljIHJhdGUgPSAxMDA7CgogIC8qIEFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpICovCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICAvKiBNaW5pbXVtIGFtb3VudCBvZiBXZWkgYWxsb3dlZCBwZXIgdHJhbnNhY3Rpb24gPSAwLjEgRXRoZXJzICovCiAgdWludDI1NiBwdWJsaWMgc2FsZU1pbmltdW1XZWkgPSAxMDAwMDAwMDAwMDAwMDAwMDA7IAoKICBUaW1lQm9udXNbXSBwdWJsaWMgdGltZUJvbnVzZXM7CgogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogZXZlbnQgZm9yIGZpbmFsaXppbmcgdGhlIGNyb3dkc2FsZQogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgRmluYWxpc2VkQ3Jvd2RzYWxlKHVpbnQyNTYgdG90YWxTdXBwbHksIHVpbnQyNTYgbWludGVyQmVuZWZpdCk7CgogIGZ1bmN0aW9uIEdFU1Rva2VuQ3Jvd2RTYWxlKHVpbnQyNTYgX21haW5TYWxlU3RhcnRUaW1lLCBhZGRyZXNzIF93YWxsZXQsIGFkZHJlc3MgX3Rva2VuV2FsbGV0KSBwdWJsaWMgewoKICAgIC8qIENhbid0IHN0YXJ0IG1haW4gc2FsZSBpbiB0aGUgcGFzdCAqLwogICAgcmVxdWlyZShfbWFpblNhbGVTdGFydFRpbWUgPj0gbm93KTsKCiAgICAvKiBDb25maXJtaW5nIHdhbGxldCBhZGRyZXNzZXMgYXMgdmFsaWQgKi8KICAgIHJlcXVpcmUoX3dhbGxldCAhPSAweDApOwogICAgcmVxdWlyZShfdG9rZW5XYWxsZXQgIT0gMHgwKTsKCiAgICAvKiBUaGUgQ3Jvd2RzYWxlIGJvbnVzIHBhdHRlcm4KICAgICAqIDEgZGF5ID0gODY0MDAgPSA2MCAqIDYwICogMjQgKFNlY29uZHMgKiBNaW51dGVzICogSG91cnMpCiAgICAgKiAxIGRheSAqIE51bWJlciBvZiBkYXlzIHRvIGNsb3NlIGF0LCBCb251cyBQZXJjZW50YWdlLCBNYXggV2VpIGZvciB3aGljaCBib251cyBpcyBnaXZlbiAgCiAgICAgKi8KICAgIHRpbWVCb251c2VzLnB1c2goVGltZUJvbnVzKDg2NDAwICogIDcsICAzMCwgICAgMjAwMDAwMDAwMDAwMDAwMDAwMDAwMCkpOyAvLyAwIC0gNyBEYXlzLCAzMCAlLCAyMDAwIEVUSAogICAgdGltZUJvbnVzZXMucHVzaChUaW1lQm9udXMoODY0MDAgKiAgMTQsIDIwLCAgICA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwKSk7IC8vIDggLTE0IERheXMsIDIwICUsIDIwMDBFVEggKyAzMDAwIEVUSCA9IDUwMDAgRVRICiAgICB0aW1lQm9udXNlcy5wdXNoKFRpbWVCb251cyg4NjQwMCAqICAyMSwgMTAsICAgMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKTsgLy8gMTUtMjEgRGF5cywgMTAgJSwgNTAwMCBFVEggKyA1MDAwIEVUSCA9IDEwMDAwIEVUSAogICAgdGltZUJvbnVzZXMucHVzaChUaW1lQm9udXMoODY0MDAgKiAgNjAsICAwLCAgIDI1MDAwMDAwMDAwMDAwMDAwMDAwMDAwKSk7IC8vIDIyLTYwIERheXMsIDAgICUsIDEwMDAwIEVUSCArIDE1MDAwIEVUSCA9IDI1MDAwIEVUSAoKICAgIHRva2VuID0gY3JlYXRlVG9rZW5Db250cmFjdCgpOwogICAgbWFpblNhbGVTdGFydFRpbWUgPSBfbWFpblNhbGVTdGFydFRpbWU7CiAgICBtYWluU2FsZUVuZFRpbWUgPSBtYWluU2FsZVN0YXJ0VGltZSArIDYwIGRheXM7CiAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgdG9rZW5XYWxsZXQgPSBfdG9rZW5XYWxsZXQ7CiAgICBpc0ZpbmFsaXNlZCA9IGZhbHNlOwogIH0KCiAgLyogQ3JlYXRlcyB0aGUgdG9rZW4gdG8gYmUgc29sZCAqLwogIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoKSBpbnRlcm5hbCByZXR1cm5zIChNaW50YWJsZVRva2VuKSB7CiAgICByZXR1cm4gbmV3IEdFU1Rva2VuKCk7CiAgfQoKICAvKiBGYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zICovCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAvKiBMb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24gKi8KICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZSghaXNGaW5hbGlzZWQpOwogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZShtc2cudmFsdWUgIT0gMCk7CiAgICByZXF1aXJlKG5vdyA8PSBtYWluU2FsZUVuZFRpbWUgJiYgbm93ID49IG1haW5TYWxlU3RhcnRUaW1lKTsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHNhbGVNaW5pbXVtV2VpKTsKCiAgICAvKiBBZGQgYm9udXMgdG8gdG9rZW5zIGRlcGVuZHMgb24gdGhlIHBlcmlvZCAqLwogICAgdWludDI1NiBib251c2VkVG9rZW5zID0gYXBwbHlCb251cyhtc2cudmFsdWUpOwoKICAgIC8qIFVwZGF0ZSBzdGF0ZSBvbiB0aGUgYmxvY2tjaGFpbiAqLwogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgYm9udXNlZFRva2Vucyk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCBtc2cudmFsdWUsIGJvbnVzZWRUb2tlbnMpOwoKICB9CgogIC8qIEZpbmlzaCBDcm93ZHNhbGUsCiAgICogVGFrZSB0b3RhbFN1cHBseSBhcyA4OSUgYW5kIG1pbnQgMTElIG1vcmUgdG8gc3BlY2lmaWVkIG93bmVyJ3Mgd2FsbGV0CiAgICogdGhlbiBzdG9wIG1pbnRpbmcgZm9yZXZlci4KICAgKi8KCiAgZnVuY3Rpb24gZmluYWxpc2VDcm93ZHNhbGUoKSBleHRlcm5hbCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZSghaXNGaW5hbGlzZWQpOwogICAgdWludDI1NiB0b3RhbFN1cHBseSA9IHRva2VuLnRvdGFsU3VwcGx5KCk7CiAgICB1aW50MjU2IG1pbnRlckJlbmVmaXQgPSB0b3RhbFN1cHBseS5tdWwoMTApLmRpdig4OSk7CiAgICB0b2tlbi5taW50KHRva2VuV2FsbGV0LCBtaW50ZXJCZW5lZml0KTsKICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgIGZvcndhcmRGdW5kcygpOwogICAgRmluYWxpc2VkQ3Jvd2RzYWxlKHRvdGFsU3VwcGx5LCBtaW50ZXJCZW5lZml0KTsKICAgIGlzRmluYWxpc2VkID0gdHJ1ZTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyogU2V0IG5ldyBkYXRlcyBmb3IgbWFpbi1zYWxlIChlbWVyZ2VuY3kgY2FzZSkgKi8KICBmdW5jdGlvbiBzZXRNYWluU2FsZURhdGVzKHVpbnQyNTYgX21haW5TYWxlU3RhcnRUaW1lKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoIWlzRmluYWxpc2VkKTsKICAgIG1haW5TYWxlU3RhcnRUaW1lID0gX21haW5TYWxlU3RhcnRUaW1lOwogICAgbWFpblNhbGVFbmRUaW1lID0gbWFpblNhbGVTdGFydFRpbWUgKyA2MCBkYXlzOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKiBQYXVzZSB0aGUgdG9rZW4gY29udHJhY3QgKi8KICBmdW5jdGlvbiBwYXVzZVRva2VuKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIWlzRmluYWxpc2VkKTsKICAgIEdFU1Rva2VuKHRva2VuKS5wYXVzZSgpOwogIH0KCiAgLyogVW5wYXVzZSB0aGUgdG9rZW4gY29udHJhY3QgKi8KICBmdW5jdGlvbiB1bnBhdXNlVG9rZW4oKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgR0VTVG9rZW4odG9rZW4pLnVucGF1c2UoKTsKICB9CgogIC8qIFRyYW5zZmVyIHRva2VuJ3MgY29udHJhY3Qgb3duZXJzaGlwIHRvIGEgbmV3IG93bmVyICovCiAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlbk93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgR0VTVG9rZW4odG9rZW4pLnRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyKTsKICB9CgogIC8qIEByZXR1cm4gdHJ1ZSBpZiBtYWluIHNhbGUgZXZlbnQgaGFzIGVuZGVkICovCiAgZnVuY3Rpb24gbWFpblNhbGVIYXNFbmRlZCgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBtYWluU2FsZUVuZFRpbWU7CiAgfQoKICAvKiBTZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0ICovCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICAvKiBGdW5jdGlvbiB0byBjYWxjdWxhdGUgYm9udXMgdG9rZW5zIGJhc2VkIG9uIGN1cnJlbnQgdGltZShub3cpIGFuZCBtYXhpbXVtIGNhcCBwZXIgdGllciAqLwogIGZ1bmN0aW9uIGFwcGx5Qm9udXModWludDI1NiB3ZWlBbW91bnQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYm9udXNlZFRva2VucykgewogICAgLyogQm9udXMgdG9rZW5zIHRvIGJlIGFkZGVkICovCiAgICB1aW50MjU2IHRva2Vuc1RvQWRkID0gMDsKCiAgICAvKiBDYWxjdWx0aW5nIHRoZSBhbW9udCBvZiB0b2tlbnMgdG8gYmUgYWxsb2NhdGVkIGJhc2VkIG9uIHJhdGUgYW5kIHRoZSBtb25leSB0cmFuc2ZlcnJlZCovCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CiAgICB1aW50MjU2IGRpZmZJblNlY29uZHMgPSBub3cuc3ViKG1haW5TYWxlU3RhcnRUaW1lKTsKCiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0aW1lQm9udXNlcy5sZW5ndGg7IGkrKykgewogICAgICAvKiBJZiBjYXBbaV0gaXMgcmVhY2hlZCB0aGVuIHNraXAgKi8KICAgICAgaWYod2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpIDw9IHRpbWVCb251c2VzW2ldLndlaUNhcCl7CiAgICAgICAgZm9yKHVpbnQgaiA9IGk7IGogPCB0aW1lQm9udXNlcy5sZW5ndGg7IGorKyl7CiAgICAgICAgICAvKiBDaGVjayB3aGljaCB3ZWVrIHBlcmlvZCB0aW1lIGl0IGxpZXMgYW5kIHVzZSB0aGF0IHBlcmNlbnQgKi8KICAgICAgICAgIGlmIChkaWZmSW5TZWNvbmRzIDw9IHRpbWVCb251c2VzW2pdLmJvbnVzUGVyaW9kRW5kVGltZSkgewogICAgICAgICAgICB0b2tlbnNUb0FkZCA9IHRva2Vucy5tdWwodGltZUJvbnVzZXNbal0ucGVyY2VudCkuZGl2KDEwMCk7CiAgICAgICAgICAgIHJldHVybiB0b2tlbnMuYWRkKHRva2Vuc1RvQWRkKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIAogIH0KCiAgLyogIAogICogRnVuY3Rpb24gdG8gZXh0cmFjdCBmdW5kcyBhcyByZXF1aXJlZCBiZWZvcmUgZmluYWxpemluZwogICovCiAgZnVuY3Rpb24gZmV0Y2hGdW5kcygpIG9ubHlPd25lciBwdWJsaWMgewogICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKfQ=='.
	

]
