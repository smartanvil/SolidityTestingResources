Class {
	#name : #SRT52903256dd18D85c2Dc4a6C999907c9793eA61E3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT52903256dd18D85c2Dc4a6C999907c9793eA61E3 >> base64 [
	^ ''.
	

]
