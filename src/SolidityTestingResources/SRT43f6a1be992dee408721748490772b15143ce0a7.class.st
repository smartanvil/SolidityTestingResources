Class {
	#name : #SRT43f6a1be992dee408721748490772b15143ce0a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT43f6a1be992dee408721748490772b15143ce0a7 >> base64 [
	^ ''.
	

]
