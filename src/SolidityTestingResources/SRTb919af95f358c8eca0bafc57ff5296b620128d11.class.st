Class {
	#name : #SRTb919af95f358c8eca0bafc57ff5296b620128d11,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb919af95f358c8eca0bafc57ff5296b620128d11 >> base64 [
	^ ''.
	

]
