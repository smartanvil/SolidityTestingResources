Class {
	#name : #SRTcba6f10d1147b2c5a3d8d8cbd93c373b31c6c2c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcba6f10d1147b2c5a3d8d8cbd93c373b31c6c2c8 >> base64 [
	^ ''.
	

]
