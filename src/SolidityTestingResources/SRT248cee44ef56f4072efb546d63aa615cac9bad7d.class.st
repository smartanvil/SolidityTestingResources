Class {
	#name : #SRT248cee44ef56f4072efb546d63aa615cac9bad7d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT248cee44ef56f4072efb546d63aa615cac9bad7d >> base64 [
	^ ''.
	

]
