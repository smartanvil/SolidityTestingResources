Class {
	#name : #SRTd8f760ac90208423ecf9a5f320037cb224de8909,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd8f760ac90208423ecf9a5f320037cb224de8909 >> base64 [
	^ ''.
	

]
