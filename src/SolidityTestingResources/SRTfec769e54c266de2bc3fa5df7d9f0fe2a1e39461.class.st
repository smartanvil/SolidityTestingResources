Class {
	#name : #SRTfec769e54c266de2bc3fa5df7d9f0fe2a1e39461,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfec769e54c266de2bc3fa5df7d9f0fe2a1e39461 >> base64 [
	^ ''.
	

]
