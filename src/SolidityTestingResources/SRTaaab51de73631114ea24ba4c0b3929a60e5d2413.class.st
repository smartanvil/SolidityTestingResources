Class {
	#name : #SRTaaab51de73631114ea24ba4c0b3929a60e5d2413,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaaab51de73631114ea24ba4c0b3929a60e5d2413 >> base64 [
	^ ''.
	

]
