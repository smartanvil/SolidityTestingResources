Class {
	#name : #SRT780623f5ec165b48394189fe1263466d5c16fdff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT780623f5ec165b48394189fe1263466d5c16fdff >> base64 [
	^ ''.
	

]
