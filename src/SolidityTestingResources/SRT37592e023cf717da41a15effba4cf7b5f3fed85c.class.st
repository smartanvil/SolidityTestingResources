Class {
	#name : #SRT37592e023cf717da41a15effba4cf7b5f3fed85c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT37592e023cf717da41a15effba4cf7b5f3fed85c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBSZWVudHJhbmN5R3VhcmQgewoKICAvKioKICAgKiBAZGV2IFdlIHVzZSBhIHNpbmdsZSBsb2NrIGZvciB0aGUgd2hvbGUgY29udHJhY3QuCiAgICovCiAgYm9vbCBwcml2YXRlIHJlbnRyYW5jeV9sb2NrID0gZmFsc2U7CgogIC8qKgogICAqIEBkZXYgUHJldmVudHMgYSBjb250cmFjdCBmcm9tIGNhbGxpbmcgaXRzZWxmLCBkaXJlY3RseSBvciBpbmRpcmVjdGx5LgogICAqIEBub3RpY2UgSWYgeW91IG1hcmsgYSBmdW5jdGlvbiBgbm9uUmVlbnRyYW50YCwgeW91IHNob3VsZCBhbHNvCiAgICogbWFyayBpdCBgZXh0ZXJuYWxgLiBDYWxsaW5nIG9uZSBub25SZWVudHJhbnQgZnVuY3Rpb24gZnJvbQogICAqIGFub3RoZXIgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgeW91IGNhbiBpbXBsZW1lbnQgYQogICAqIGBwcml2YXRlYCBmdW5jdGlvbiBkb2luZyB0aGUgYWN0dWFsIHdvcmssIGFuZCBhIGBleHRlcm5hbGAKICAgKiB3cmFwcGVyIG1hcmtlZCBhcyBgbm9uUmVlbnRyYW50YC4KICAgKi8KICBtb2RpZmllciBub25SZWVudHJhbnQoKSB7CiAgICByZXF1aXJlKCFyZW50cmFuY3lfbG9jayk7CiAgICByZW50cmFuY3lfbG9jayA9IHRydWU7CiAgICBfOwogICAgcmVudHJhbmN5X2xvY2sgPSBmYWxzZTsKICB9Cgp9Cgpjb250cmFjdCBBcmd1bWVudHNDaGVja2VyIHsKCiAgICAvLy8gQGRldiBjaGVjayB3aGljaCBwcmV2ZW50cyBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgcGF5bG9hZFNpemVJcyh1aW50IHNpemUpIHsKICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0IC8qIGZ1bmN0aW9uIHNlbGVjdG9yICovKTsKICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgY2hlY2sgdGhhdCBhZGRyZXNzIGlzIHZhbGlkCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBhZGRyKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgTGlnaHRGdW5kc1JlZ2lzdHJ5IGlzIEFyZ3VtZW50c0NoZWNrZXIsIE93bmFibGUsIFJlZW50cmFuY3lHdWFyZCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBlbnVtIFN0YXRlIHsKICAgICAgICAvLyBnYXRoZXJpbmcgZnVuZHMKICAgICAgICBHQVRIRVJJTkcsCiAgICAgICAgLy8gcmV0dXJuaW5nIGZ1bmRzIHRvIGludmVzdG9ycwogICAgICAgIFJFRlVORElORywKICAgICAgICAvLyBmdW5kcyBzZW50IHRvIG93bmVycwogICAgICAgIFNVQ0NFRURFRAogICAgfQoKICAgIGV2ZW50IFN0YXRlQ2hhbmdlZChTdGF0ZSBfc3RhdGUpOwogICAgZXZlbnQgSW52ZXN0ZWQoYWRkcmVzcyBpbmRleGVkIGludmVzdG9yLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBFdGhlclNlbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IFJlZnVuZFNlbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKCgogICAgbW9kaWZpZXIgcmVxdWlyZXNTdGF0ZShTdGF0ZSBfc3RhdGUpIHsKICAgICAgICByZXF1aXJlKG1fc3RhdGUgPT0gX3N0YXRlKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBQVUJMSUMgaW50ZXJmYWNlCgogICAgZnVuY3Rpb24gTGlnaHRGdW5kc1JlZ2lzdHJ5KGFkZHJlc3Mgb3duZXI4MCwgYWRkcmVzcyBvd25lcjIwKQogICAgICAgIHB1YmxpYwogICAgICAgIHZhbGlkQWRkcmVzcyhvd25lcjgwKQogICAgICAgIHZhbGlkQWRkcmVzcyhvd25lcjIwKQogICAgewogICAgICAgIG1fb3duZXI4MCA9IG93bmVyODA7CiAgICAgICAgbV9vd25lcjIwID0gb3duZXIyMDsKICAgIH0KCiAgICAvLy8gQGRldiBwZXJmb3JtcyBvbmx5IGFsbG93ZWQgc3RhdGUgdHJhbnNpdGlvbnMKICAgIGZ1bmN0aW9uIGNoYW5nZVN0YXRlKFN0YXRlIF9uZXdTdGF0ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGFzc2VydChtX3N0YXRlICE9IF9uZXdTdGF0ZSk7CgogICAgICAgIGlmIChTdGF0ZS5HQVRIRVJJTkcgPT0gbV9zdGF0ZSkgeyAgIGFzc2VydChTdGF0ZS5SRUZVTkRJTkcgPT0gX25ld1N0YXRlIHx8IFN0YXRlLlNVQ0NFRURFRCA9PSBfbmV3U3RhdGUpOyB9CiAgICAgICAgZWxzZSBhc3NlcnQoZmFsc2UpOwoKICAgICAgICBtX3N0YXRlID0gX25ld1N0YXRlOwogICAgICAgIFN0YXRlQ2hhbmdlZChtX3N0YXRlKTsKCiAgICAgICAgaWYgKFN0YXRlLlNVQ0NFRURFRCA9PSBfbmV3U3RhdGUpIHsKICAgICAgICAgICAgdWludCBfODBwZXJjZW50ID0gdGhpcy5iYWxhbmNlLm11bCg4MCkuZGl2KDEwMCk7CiAgICAgICAgICAgIG1fb3duZXI4MC50cmFuc2ZlcihfODBwZXJjZW50KTsKICAgICAgICAgICAgRXRoZXJTZW50KG1fb3duZXI4MCwgXzgwcGVyY2VudCk7CgogICAgICAgICAgICB1aW50IF8yMHBlcmNlbnQgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgICAgIG1fb3duZXIyMC50cmFuc2ZlcihfMjBwZXJjZW50KTsKICAgICAgICAgICAgRXRoZXJTZW50KG1fb3duZXIyMCwgXzIwcGVyY2VudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IHJlY29yZHMgYW4gaW52ZXN0bWVudAogICAgZnVuY3Rpb24gaW52ZXN0ZWQoYWRkcmVzcyBfaW52ZXN0b3IpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBwYXlhYmxlCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmVxdWlyZXNTdGF0ZShTdGF0ZS5HQVRIRVJJTkcpCiAgICB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgcmVxdWlyZSgwICE9IGFtb3VudCk7CgogICAgICAgIC8vIHJlZ2lzdGVyIGludmVzdG9yCiAgICAgICAgaWYgKDAgPT0gbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdKQogICAgICAgICAgICBtX2ludmVzdG9ycy5wdXNoKF9pbnZlc3Rvcik7CgogICAgICAgIC8vIHJlZ2lzdGVyIHBheW1lbnQKICAgICAgICB0b3RhbEludmVzdGVkID0gdG90YWxJbnZlc3RlZC5hZGQoYW1vdW50KTsKICAgICAgICBtX3dlaUJhbGFuY2VzW19pbnZlc3Rvcl0gPSBtX3dlaUJhbGFuY2VzW19pbnZlc3Rvcl0uYWRkKGFtb3VudCk7CgogICAgICAgIEludmVzdGVkKF9pbnZlc3RvciwgYW1vdW50KTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSB3aXRoZHJhdyBhY2N1bXVsYXRlZCBiYWxhbmNlLCBjYWxsZWQgYnkgcGF5ZWUgaW4gY2FzZSBjcm93ZHNhbGUgaGFzIGZhaWxlZAogICAgZnVuY3Rpb24gd2l0aGRyYXdQYXltZW50cyhhZGRyZXNzIHBheWVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9uUmVlbnRyYW50CiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmVxdWlyZXNTdGF0ZShTdGF0ZS5SRUZVTkRJTkcpCiAgICB7CiAgICAgICAgdWludDI1NiBwYXltZW50ID0gbV93ZWlCYWxhbmNlc1twYXllZV07CgogICAgICAgIHJlcXVpcmUocGF5bWVudCAhPSAwKTsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBwYXltZW50KTsKCiAgICAgICAgdG90YWxJbnZlc3RlZCA9IHRvdGFsSW52ZXN0ZWQuc3ViKHBheW1lbnQpOwogICAgICAgIG1fd2VpQmFsYW5jZXNbcGF5ZWVdID0gMDsKCiAgICAgICAgcGF5ZWUudHJhbnNmZXIocGF5bWVudCk7CiAgICAgICAgUmVmdW5kU2VudChwYXllZSwgcGF5bWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0SW52ZXN0b3JzQ291bnQoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQpIHsgcmV0dXJuIG1faW52ZXN0b3JzLmxlbmd0aDsgfQoKCiAgICAvLyBGSUVMRFMKCiAgICAvLy8gQG5vdGljZSB0b3RhbCBhbW91bnQgb2YgaW52ZXN0bWVudHMgaW4gd2VpCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEludmVzdGVkOwoKICAgIC8vLyBAbm90aWNlIHN0YXRlIG9mIHRoZSByZWdpc3RyeQogICAgU3RhdGUgcHVibGljIG1fc3RhdGUgPSBTdGF0ZS5HQVRIRVJJTkc7CgogICAgLy8vIEBkZXYgYmFsYW5jZXMgb2YgaW52ZXN0b3JzIGluIHdlaQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBtX3dlaUJhbGFuY2VzOwoKICAgIC8vLyBAZGV2IGxpc3Qgb2YgdW5pcXVlIGludmVzdG9ycwogICAgYWRkcmVzc1tdIHB1YmxpYyBtX2ludmVzdG9yczsKCiAgICBhZGRyZXNzIHB1YmxpYyBtX293bmVyODA7CiAgICBhZGRyZXNzIHB1YmxpYyBtX293bmVyMjA7Cn0='.
	

]
