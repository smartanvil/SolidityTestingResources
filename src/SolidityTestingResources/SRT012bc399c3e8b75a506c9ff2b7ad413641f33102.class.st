Class {
	#name : #SRT012bc399c3e8b75a506c9ff2b7ad413641f33102,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT012bc399c3e8b75a506c9ff2b7ad413641f33102 >> base64 [
	^ ''.
	

]
