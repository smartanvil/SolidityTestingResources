Class {
	#name : #SRTb589ef3af084cc5ec905d23112520ec168478582,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb589ef3af084cc5ec905d23112520ec168478582 >> base64 [
	^ ''.
	

]
