Class {
	#name : #SRTd4e222e4ac214103917bdb5c0124b4a1ce907874,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd4e222e4ac214103917bdb5c0124b4a1ce907874 >> base64 [
	^ ''.
	

]
