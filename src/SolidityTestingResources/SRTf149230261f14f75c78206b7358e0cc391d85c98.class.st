Class {
	#name : #SRTf149230261f14f75c78206b7358e0cc391d85c98,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf149230261f14f75c78206b7358e0cc391d85c98 >> base64 [
	^ ''.
	

]
