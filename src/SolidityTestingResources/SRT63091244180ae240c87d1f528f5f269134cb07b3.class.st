Class {
	#name : #SRT63091244180ae240c87d1f528f5f269134cb07b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63091244180ae240c87d1f528f5f269134cb07b3 >> base64 [
	^ ''.
	

]
