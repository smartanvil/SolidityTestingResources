Class {
	#name : #SRT86585a9f5eb6c781c9b5d185804bdd35fd27d223,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86585a9f5eb6c781c9b5d185804bdd35fd27d223 >> base64 [
	^ ''.
	

]
