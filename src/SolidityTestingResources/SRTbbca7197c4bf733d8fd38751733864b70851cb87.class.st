Class {
	#name : #SRTbbca7197c4bf733d8fd38751733864b70851cb87,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbbca7197c4bf733d8fd38751733864b70851cb87 >> base64 [
	^ ''.
	

]
