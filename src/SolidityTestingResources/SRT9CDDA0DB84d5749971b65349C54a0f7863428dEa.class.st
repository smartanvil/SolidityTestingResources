Class {
	#name : #SRT9CDDA0DB84d5749971b65349C54a0f7863428dEa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9CDDA0DB84d5749971b65349C54a0f7863428dEa >> base64 [
	^ ''.
	

]
