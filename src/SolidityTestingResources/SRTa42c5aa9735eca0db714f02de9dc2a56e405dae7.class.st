Class {
	#name : #SRTa42c5aa9735eca0db714f02de9dc2a56e405dae7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa42c5aa9735eca0db714f02de9dc2a56e405dae7 >> base64 [
	^ ''.
	

]
