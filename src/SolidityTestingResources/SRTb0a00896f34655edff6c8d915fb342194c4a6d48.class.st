Class {
	#name : #SRTb0a00896f34655edff6c8d915fb342194c4a6d48,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb0a00896f34655edff6c8d915fb342194c4a6d48 >> base64 [
	^ ''.
	

]
