Class {
	#name : #SRT4355fc160f74328f9b383df2ec589bb3dfd82ba0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4355fc160f74328f9b383df2ec589bb3dfd82ba0 >> base64 [
	^ ''.
	

]
