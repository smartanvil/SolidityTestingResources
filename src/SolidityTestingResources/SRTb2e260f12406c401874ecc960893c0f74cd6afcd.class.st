Class {
	#name : #SRTb2e260f12406c401874ecc960893c0f74cd6afcd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb2e260f12406c401874ecc960893c0f74cd6afcd >> base64 [
	^ ''.
	

]
