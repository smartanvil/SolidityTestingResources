Class {
	#name : #SRTb9e469d029abe8c1d546c549e4ab712d5556b45e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb9e469d029abe8c1d546c549e4ab712d5556b45e >> base64 [
	^ ''.
	

]
