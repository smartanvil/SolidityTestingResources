Class {
	#name : #SRTcc71f4fc42d8479c86edb4607a37b598c9b4df30,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc71f4fc42d8479c86edb4607a37b598c9b4df30 >> base64 [
	^ ''.
	

]
