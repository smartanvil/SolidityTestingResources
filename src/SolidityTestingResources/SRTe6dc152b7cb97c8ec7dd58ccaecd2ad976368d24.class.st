Class {
	#name : #SRTe6dc152b7cb97c8ec7dd58ccaecd2ad976368d24,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe6dc152b7cb97c8ec7dd58ccaecd2ad976368d24 >> base64 [
	^ ''.
	

]
