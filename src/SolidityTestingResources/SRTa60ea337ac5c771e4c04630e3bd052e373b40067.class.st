Class {
	#name : #SRTa60ea337ac5c771e4c04630e3bd052e373b40067,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa60ea337ac5c771e4c04630e3bd052e373b40067 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8hIEZ1bmRyYWlzZXIgY29udHJhY3QuIEp1c3QgcmVjb3JkcyB3aG8gc2VudCB3aGF0LgovLyEgQnkgUGFyaXR5IFRlY2hub2xvZ2llcywgMjAxNy4KLy8hIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5jZSAyLgovLyEgTW9kaWZpZWQgYnkgdGhlIE11c2VyZXVtLgoKCgoKCi8vLyBXaWxsIGFjY2VwdCBFdGhlciAiY29udHJpYnV0aW9ucyIgYW5kIHJlY29yZHMgZWFjaCBib3RoIGFzIGEgbG9nIGFuZCBpbiBhCi8vLyBxdWVyeWFibGUgcmVjb3Jkcy4KY29udHJhY3QgRnVuZHJhaXNlciB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICAvLyBIb3cgbXVjaCBpcyBlbm91Z2g/CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkdXN0ID0gMTAwIGZpbm5leTsKCiAgICAvLyBTcGVjaWFsIGFkZHJlc3NlczoKICAgIC8vICBhZG1pbmlzdHJhdG9yIGNhbiBoYWx0L3VuaGFsdC9raWxsL2FkanVzdFJhdGU7CiAgICAvLyAgdHJlYXN1cnkgcmVjZWl2ZXMgYWxsIHRoZSBmdW5kcwogICAgYWRkcmVzcyBwdWJsaWMgYWRtaW47CiAgICBhZGRyZXNzIHB1YmxpYyB0cmVhc3VyeTsKCiAgICAvLyBCZWdpbiBhbmQgZW5kIGJsb2NrIGZvciB0aGUgZnVuZHJhaXNpbmcgcGVyaW9kCiAgICAvL3VpbnQgcHVibGljIGJlZ2luQmxvY2s7CiAgICAvL3VpbnQgcHVibGljIGVuZEJsb2NrOwoKICAgIC8vIE51bWJlciBvZiB3ZWkgcGVyIGJ0YwogICAgdWludCBwdWJsaWMgd2VpUGVyQnRjOwoKICAgIC8vIERlZmF1bHQgbnVtYmVyIG9mIGV0bSBwZXIgYnRjCiAgICB1aW50IHB1YmxpYyBFdG1QZXJCdGM7CgogICAgLy8gQXJlIGNvbnRyaWJ1dGlvbnMgYWJub3JtYWxseSBoYWx0ZWQ/CiAgICBib29sIHB1YmxpYyBpc0hhbHRlZCA9IGZhbHNlOwoKICAgIC8vIFRoZSBgcmVjb3Jkc2AgbWFwcGluZyBtYXBzIG11c2VyZXVtIGFkZHJlc3NlcyB0byB0aGUgYW1vdW50IG9mIEVUTS4KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHJlY29yZHM7CgogICAgLy8gVGhlIHRvdGFsIGFtb3VudCBvZiBldGhlciByYWlzZWQKICAgIHVpbnQgcHVibGljIHRvdGFsV2VpID0gMDsKICAgIC8vIFRoZSB0b3RhbCBhbW91bnQgb2YgRVRNIHN1Z2dlc3RlZCBmb3IgYWxsb2NhdGlvbgogICAgdWludCBwdWJsaWMgdG90YWxFVE0gPSAwOwogICAgLy8gVGhlIG51bWJlciBvZiBkb25hdGlvbgogICAgdWludCBwdWJsaWMgbnVtRG9uYXRpb25zID0gMDsKCiAgICAvLy8gQ29uc3RydWN0b3IuIGBfYWRtaW5gIGhhcyB0aGUgYWJpbGl0eSB0byBwYXVzZSB0aGUKICAgIC8vLyBjb250cmlidXRpb24gcGVyaW9kIGFuZCwgZXZlbnR1YWxseSwga2lsbCB0aGlzIGNvbnRyYWN0LiBgX3RyZWFzdXJ5YAogICAgLy8vIHJlY2VpdmVzIGFsbCBmdW5kcy4gYF9iZWdpbkJsb2NrYCBhbmQgYF9lbmRCbG9ja2AgZGVmaW5lIHRoZSBiZWdpbiBhbmQKICAgIC8vLyBlbmQgb2YgdGhlIHBlcmlvZC4gYF93ZWlQZXJCdGNgIGlzIHRoZSByYXRpbyBvZiBFVE0gdG8gZXRoZXIuCiAgICBmdW5jdGlvbiBGdW5kcmFpc2VyKAogICAgICAgIGFkZHJlc3MgX2FkbWluLAogICAgICAgIGFkZHJlc3MgX3RyZWFzdXJ5LAogICAgICAgIC8vdWludCBfYmVnaW5CbG9jaywKICAgICAgICAvL3VpbnQgX2VuZEJsb2NrLAogICAgICAgIHVpbnQgX3dlaVBlckJ0YywKICAgICAgICB1aW50IF9FdG1QZXJCdGMKICAgICkgewogICAgICAgIHJlcXVpcmUoX3dlaVBlckJ0YyA+IDApOwogICAgICAgIHJlcXVpcmUoX0V0bVBlckJ0YyA+IDApOwoKICAgICAgICBhZG1pbiA9IF9hZG1pbjsKICAgICAgICB0cmVhc3VyeSA9IF90cmVhc3VyeTsKICAgICAgICAvL2JlZ2luQmxvY2sgPSBfYmVnaW5CbG9jazsKICAgICAgICAvL2VuZEJsb2NrID0gX2VuZEJsb2NrOwoKICAgICAgICB3ZWlQZXJCdGMgPSBfd2VpUGVyQnRjOwogICAgICAgIEV0bVBlckJ0YyA9IF9FdG1QZXJCdGM7CiAgICB9CgogICAgLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IGFkbWluLgogICAgbW9kaWZpZXIgb25seV9hZG1pbiB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZG1pbik7IF87IH0KICAgIC8vIENhbiBvbmx5IGJlIGNhbGxlZCBieSBwcmlvciB0byB0aGUgcGVyaW9kLgogICAgLy9tb2RpZmllciBvbmx5X2JlZm9yZV9wZXJpb2QgeyByZXF1aXJlKGJsb2NrLm51bWJlciA8IGJlZ2luQmxvY2spOyBfOyB9CiAgICAvLyBDYW4gb25seSBiZSBjYWxsZWQgZHVyaW5nIHRoZSBwZXJpb2Qgd2hlbiBub3QgaGFsdGVkLgogICAgbW9kaWZpZXIgb25seV9kdXJpbmdfcGVyaW9kIHsgcmVxdWlyZSgvKmJsb2NrLm51bWJlciA+PSBiZWdpbkJsb2NrIHx8IGJsb2NrLm51bWJlciA8IGVuZEJsb2NrICYmICovIWlzSGFsdGVkKTsgXzsgfQogICAgLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGR1cmluZyB0aGUgcGVyaW9kIHdoZW4gaGFsdGVkLgogICAgbW9kaWZpZXIgb25seV9kdXJpbmdfaGFsdGVkX3BlcmlvZCB7IHJlcXVpcmUoLypibG9jay5udW1iZXIgPj0gYmVnaW5CbG9jayB8fCBibG9jay5udW1iZXIgPCBlbmRCbG9jayAmJiAqL2lzSGFsdGVkKTsgXzsgfQogICAgLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGFmdGVyIHRoZSBwZXJpb2QuCiAgICAvL21vZGlmaWVyIG9ubHlfYWZ0ZXJfcGVyaW9kIHsgcmVxdWlyZShibG9jay5udW1iZXIgPj0gZW5kQmxvY2spOyBfOyB9CiAgICAvLyBUaGUgdmFsdWUgb2YgdGhlIG1lc3NhZ2UgbXVzdCBiZSBzdWZmaWNpZW50bHkgbGFyZ2UgdG8gbm90IGJlIGNvbnNpZGVyZWQgZHVzdC4KICAgIG1vZGlmaWVyIGlzX25vdF9kdXN0IHsgcmVxdWlyZShtc2cudmFsdWUgPj0gZHVzdCk7IF87IH0KCiAgICAvLy8gU29tZSBjb250cmlidXRpb24gYGFtb3VudGAgcmVjZWl2ZWQgZnJvbSBgcmVjaXBpZW50YCBhdCByYXRlIG9mIGBjdXJyZW50UmF0ZWAgd2l0aCBlbWVyZ2VuY3kgcmV0dXJuIG9mIGByZXR1cm5BZGRyYC4KICAgIGV2ZW50IFJlY2VpdmVkKGFkZHJlc3MgaW5kZXhlZCByZWNpcGllbnQsIGFkZHJlc3MgcmV0dXJuQWRkciwgdWludCB3ZWlBbW91bnQsIHVpbnQgY3VycmVudFJhdGUpOwogICAgLy8vIFBlcmlvZCBoYWx0ZWQgYWJub3JtYWxseS4KICAgIGV2ZW50IEhhbHRlZCgpOwogICAgLy8vIFBlcmlvZCByZXN0YXJ0ZWQgYWZ0ZXIgYWJub3JtYWwgaGFsdC4KICAgIGV2ZW50IFVuaGFsdGVkKCk7CiAgICBldmVudCBSYXRlQ2hhbmdlZCh1aW50IG5ld1JhdGUpOwoKICAgIC8vIElzIHRoZSBmdW5kcmFpc2VyIGFjdGl2ZT8KICAgIGZ1bmN0aW9uIGlzQWN0aXZlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgYWN0aXZlKSB7CiAgICAgICAgcmV0dXJuICgvKmJsb2NrLm51bWJlciA+PSBiZWdpbkJsb2NrICYmIGJsb2NrLm51bWJlciA8IGVuZEJsb2NrICYmICovICFpc0hhbHRlZCk7CiAgICB9CgogICAgLy8vIFJlY2VpdmUgYSBjb250cmlidXRpb24gZm9yIGEgZG9ub3IgbXVzZXJldW0gYWRkcmVzcy4KICAgIGZ1bmN0aW9uIGRvbmF0ZShhZGRyZXNzIF9kb25vciwgYWRkcmVzcyBfcmV0dXJuQWRkcmVzcywgYnl0ZXM0IGNoZWNrc3VtKSBwdWJsaWMgcGF5YWJsZSBvbmx5X2R1cmluZ19wZXJpb2QgaXNfbm90X2R1c3QgewogICAgICAgIC8vIGNoZWNrc3VtIGlzIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBzaGEzIG9mIHRoZSB4b3Igb2YgdGhlIGJ5dGVzMzIgdmVyc2lvbnMgb2YgdGhlIG11c2VyZXVtIGFkZHJlc3MgYW5kIHRoZSByZXR1cm4gYWRkcmVzcwogICAgICAgIHJlcXVpcmUoIGJ5dGVzNChzaGEzKCBieXRlczMyKF9kb25vcileYnl0ZXMzMihfcmV0dXJuQWRkcmVzcykgKSkgPT0gY2hlY2tzdW0gKTsKCiAgICAgICAgLy8gZm9yd2FyZCB0aGUgZnVuZHMgdG8gdGhlIHRyZWFzdXJlCiAgICAgICAgcmVxdWlyZSggdHJlYXN1cnkuc2VuZChtc2cudmFsdWUpICk7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIEVUTSBhdCB0aGUgY3VycmVudCByYXRlCiAgICAgICAgdWludCB3ZWlQZXJFVE0gPSB3ZWlQZXJCdGMuZGl2KEV0bVBlckJ0Yyk7CiAgICAgICAgdWludCBFVE0gPSBtc2cudmFsdWUuZGl2KHdlaVBlckVUTSk7CgogICAgICAgIC8vIHVwZGF0ZSB0aGUgZG9ub3IgZGV0YWlscwogICAgICAgIHJlY29yZHNbX2Rvbm9yXSA9IHJlY29yZHNbX2Rvbm9yXS5hZGQoRVRNKTsKCiAgICAgICAgLy8gdXBkYXRlIHRoZSB0b3RhbHMKICAgICAgICB0b3RhbFdlaSA9IHRvdGFsV2VpLmFkZChtc2cudmFsdWUpOwogICAgICAgIHRvdGFsRVRNID0gdG90YWxFVE0uYWRkKEVUTSk7CiAgICAgICAgbnVtRG9uYXRpb25zID0gbnVtRG9uYXRpb25zLmFkZCgxKTsKCiAgICAgICAgUmVjZWl2ZWQoX2Rvbm9yLCBfcmV0dXJuQWRkcmVzcywgbXNnLnZhbHVlLCB3ZWlQZXJFVE0pOwogICAgfQoKICAgIC8vLyBBZGp1c3QgdGhlIHdlaVBlckJ0YyByYXRlCiAgICBmdW5jdGlvbiBhZGp1c3RSYXRlKHVpbnQgbmV3UmF0ZSkgcHVibGljIG9ubHlfYWRtaW4gewogICAgICAgIHdlaVBlckJ0YyA9IG5ld1JhdGU7CiAgICAgICAgUmF0ZUNoYW5nZWQobmV3UmF0ZSk7CiAgICB9CgogICAgLy8vIEhhbHQgdGhlIGNvbnRyaWJ1dGlvbiBwZXJpb2QuIEFueSBhdHRlbXB0IGF0IGNvbnRyaWJ1dGluZyB3aWxsIGZhaWwuCiAgICBmdW5jdGlvbiBoYWx0KCkgcHVibGljIG9ubHlfYWRtaW4gb25seV9kdXJpbmdfcGVyaW9kIHsKICAgICAgICBpc0hhbHRlZCA9IHRydWU7CiAgICAgICAgSGFsdGVkKCk7CiAgICB9CgogICAgLy8vIFVuaGFsdCB0aGUgY29udHJpYnV0aW9uIHBlcmlvZC4KICAgIGZ1bmN0aW9uIHVuaGFsdCgpIHB1YmxpYyBvbmx5X2FkbWluIG9ubHlfZHVyaW5nX2hhbHRlZF9wZXJpb2QgewogICAgICAgIGlzSGFsdGVkID0gZmFsc2U7CiAgICAgICAgVW5oYWx0ZWQoKTsKICAgIH0KCiAgICAvLy8gS2lsbCB0aGlzIGNvbnRyYWN0LgogICAgZnVuY3Rpb24ga2lsbCgpIHB1YmxpYyBvbmx5X2FkbWluIC8qb25seV9hZnRlcl9wZXJpb2QqLyB7CiAgICAgICAgc3VpY2lkZSh0cmVhc3VyeSk7CiAgICB9Cn0='.
	

]
