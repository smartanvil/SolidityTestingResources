Class {
	#name : #SRTc01c1eb26edbda9ef749ccd0aab78f916e310600,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc01c1eb26edbda9ef749ccd0aab78f916e310600 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgoKRU5TIFRyYWRlIEZhY3RvcnkKPT09PT09PT09PT09PT09PT09PT09PT09CgpMaXN0ZWQgbmFtZXMgYW5kIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGF0IGVuc25hbWVzLmNvbQpBdXRob3I6IC91L0NpbnRpeAoqLwoKLy8gSW50ZXJmYWNlcyBmb3IgdGhlIHZhcmlvdXMgRU5TIGNvbnRyYWN0cwpjb250cmFjdCBBYnN0cmFjdEVOUyB7CiAgZnVuY3Rpb24gc2V0UmVzb2x2ZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIHJlc29sdmVyKTsKfQpjb250cmFjdCBSZXNvbHZlciB7CiAgZnVuY3Rpb24gc2V0QWRkcihieXRlczMyIG5vZGUsIGFkZHJlc3MgYWRkcik7Cn0KY29udHJhY3QgRGVlZCB7CiAgYWRkcmVzcyBwdWJsaWMgcHJldmlvdXNPd25lcjsKfQpjb250cmFjdCBSZWdpc3RyYXIgewogIGZ1bmN0aW9uIHRyYW5zZmVyKGJ5dGVzMzIgX2hhc2gsIGFkZHJlc3MgbmV3T3duZXIpOwogIGZ1bmN0aW9uIGVudHJpZXMoYnl0ZXMzMiBfaGFzaCkgY29uc3RhbnQgcmV0dXJucyAodWludCwgRGVlZCwgdWludCwgdWludCwgdWludCk7Cn0KCi8vIFRoZSBjaGlsZCBjb250cmFjdCwgdXNlZCB0byBtYWtlIGJ1eWluZyBhcyBzaW1wbGUgYXMgc2VuZGluZyBFVEguCmNvbnRyYWN0IFNlbGxFTlMgewogIFNlbGxFTlNGYWN0b3J5IGZhY3Rvcnk7CiAgCiAgZnVuY3Rpb24gU2VsbEVOUygpewogICAgLy8gU3RvcmUgdGhlIGFkZHJlc3Mgb2YgdGhlIGZhY3RvcnkgKDB4MzRhYmNjMWZkZWRiNDljOTUzNDQ1YzExYTcxZTQyOGQ3MTliYThkOSkKICAgIGZhY3RvcnkgPSBTZWxsRU5TRmFjdG9yeShtc2cuc2VuZGVyKTsKICB9CiAgCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAvLyBEZWxlZ2F0ZSB0aGUgd29yayBiYWNrIHRvIHRoZSBmYWN0b3J5IHRvIHNhdmUgc3BhY2Ugb24gdGhlIGJsb2NrY2hhaW4uCiAgICAvLyBUaGlzIHNhdmVzIG9uIGdhcyB3aGVuIGNyZWF0aW5nIHNlbGwgY29udHJhY3RzLgogICAgLy8gQ291bGQgYmUgcmVwbGFjZWQgd2l0aCBhIGRlbGVnYXRlY2FsbCB0byBhIGxpYnJhcnksIGJ1dCB0aGF0CiAgICAvLyB3b3VsZCByZXF1aXJlIGEgc2Vjb25kIGNvbnRyYWN0IGRlcGxveW1lbnQgYW5kIGFkZGVkIGNvbXBsZXhpdHkuCiAgICBmYWN0b3J5LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICBmYWN0b3J5LnNlbGxfbGFiZWwobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICB9Cn0KCi8vIFRoZSBmYWN0b3J5IHdoaWNoIHByb2R1Y2VzIHRoZSBzZWxsZXIgY2hpbGQgY29udHJhY3RzLgpjb250cmFjdCBTZWxsRU5TRmFjdG9yeSB7CiAgLy8gU3RvcmUgdGhlIHJlbGV2YW50IGluZm9ybWF0aW9uIGZvciBlYWNoIGNoaWxkIGNvbnRyYWN0LgogIHN0cnVjdCBTZWxsRU5TSW5mbyB7CiAgICBzdHJpbmcgbGFiZWw7CiAgICB1aW50IHByaWNlOwogICAgYWRkcmVzcyBvd25lcjsKICB9CiAgbWFwcGluZyAoYWRkcmVzcyA9PiBTZWxsRU5TSW5mbykgcHVibGljIGdldF9pbmZvOwogIAogIC8vIFRoZSBkZXZlbG9wZXIgYWRkcmVzcywgdXNlZCBmb3Igc2VsbGVyIGZlZXMuCiAgYWRkcmVzcyBkZXZlbG9wZXIgPSAweDRlNkExYzU3Q2RCZmQ5N2U4ZWZlODMxZjhmNDQxOGIxRjJBMDllNmU7CiAgLy8gVGhlIEV0aGVyZXVtIE5hbWUgU2VydmljZSBwcmltYXJ5IGNvbnRyYWN0LgogIEFic3RyYWN0RU5TIGVucyA9IEFic3RyYWN0RU5TKDB4MzE0MTU5MjY1ZEQ4ZGJiMzEwNjQyZjk4ZjUwQzA2NjE3M0MxMjU5Yik7CiAgLy8gVGhlIEV0aGVyZXVtIE5hbWUgU2VydmljZSBSZWdpc3RyYXIgY29udHJhY3QuCiAgUmVnaXN0cmFyIHJlZ2lzdHJhciA9IFJlZ2lzdHJhcigweDYwOTBBNmU0Nzg0OTYyOWI3MjQ1RGZhMUNhMjFEOTRjZDE1ODc4RWYpOwogIC8vIFRoZSBFdGhlcmV1bSBOYW1lIFNlcnZpY2UgUHVibGljIFJlc29sdmVyIGNvbnRyYWN0LgogIFJlc29sdmVyIHJlc29sdmVyID0gUmVzb2x2ZXIoMHgxZGEwMjI3MTBkRjUwMDIzMzkyNzRBYURFZThENTgyMThlOUQ2QUI1KTsKICAvLyBUaGUgaGFzaCBvZiAiLmV0aCIgdW5kZXIgd2hpY2ggYWxsIHRvcCBsZXZlbCBuYW1lcyBhcmUgcmVnaXN0ZXJlZC4KICBieXRlczMyIHJvb3Rfbm9kZSA9IDB4OTNjZGViNzA4Yjc1NDVkYzY2OGViOTI4MDE3NjE2OWQxYzMzY2ZkOGVkNmYwNDY5MGEwYmNjODhhOTNmYzRhZTsKICAKICAvLyBFdmVudHMgdXNlZCB0byBoZWxwIHRyYWNrIHNhbGVzLgogIGV2ZW50IFNlbGxFTlNDcmVhdGVkKFNlbGxFTlMgc2VsbF9lbnMpOwogIGV2ZW50IExhYmVsU29sZChTZWxsRU5TIHNlbGxfZW5zKTsKICAKICAvLyBDYWxsZWQgYnkgbmFtZSBzZWxsZXJzIHRvIG1ha2UgYSBuZXcgc2VsbGVyIGNoaWxkIGNvbnRyYWN0LgogIGZ1bmN0aW9uIGNyZWF0ZVNlbGxFTlMoc3RyaW5nIGxhYmVsLCB1aW50IHByaWNlKSB7CiAgICBTZWxsRU5TIHNlbGxfZW5zID0gbmV3IFNlbGxFTlMoKTsKICAgIC8vIFN0b3JlIHRoZSBzZWxsZXIncyBhZGRyZXNzIHNvIHRoZXkgY2FuIGdldCBwYWlkIHdoZW4gdGhlIG5hbWUgc2VsbHMuCiAgICBnZXRfaW5mb1tzZWxsX2Vuc10gPSBTZWxsRU5TSW5mbyhsYWJlbCwgcHJpY2UsIG1zZy5zZW5kZXIpOwogICAgU2VsbEVOU0NyZWF0ZWQoc2VsbF9lbnMpOwogIH0KICAKICAvLyBDYWxsZWQgb25seSBieSBzZWxsZXIgY2hpbGQgY29udHJhY3RzIHdoZW4gYSBuYW1lIGlzIHB1cmNoYXNlZC4KICBmdW5jdGlvbiBzZWxsX2xhYmVsKGFkZHJlc3MgYnV5ZXIsIHVpbnQgYW1vdW50X3BhaWQpewogICAgU2VsbEVOUyBzZWxsX2VucyA9IFNlbGxFTlMobXNnLnNlbmRlcik7CiAgICAvLyBWZXJpZnkgdGhlIHNlbmRlciBpcyBhIGNoaWxkIGNvbnRyYWN0LgogICAgaWYgKGdldF9pbmZvW3NlbGxfZW5zXS5vd25lciA9PSAweDApIHRocm93OwogICAgCiAgICBzdHJpbmcgbGFiZWwgPSBnZXRfaW5mb1tzZWxsX2Vuc10ubGFiZWw7CiAgICB1aW50IHByaWNlID0gZ2V0X2luZm9bc2VsbF9lbnNdLnByaWNlOwogICAgYWRkcmVzcyBvd25lciA9IGdldF9pbmZvW3NlbGxfZW5zXS5vd25lcjsKICAgIAogICAgLy8gQ2FsY3VsYXRlIHRoZSBoYXNoIG9mIHRoZSBuYW1lIGJlaW5nIGJvdWdodC4KICAgIGJ5dGVzMzIgbGFiZWxfaGFzaCA9IHNoYTMobGFiZWwpOwogICAgLy8gUmV0cmlldmUgdGhlIG5hbWUncyBkZWVkLgogICAgRGVlZCBkZWVkOwogICAgKCxkZWVkLCwsKSA9IHJlZ2lzdHJhci5lbnRyaWVzKGxhYmVsX2hhc2gpOwogICAgLy8gVmVyaWZ5IHRoZSBkZWVkJ3MgcHJldmlvdXMgb3duZXIgbWF0Y2hlcyB0aGUgc2VsbGVyLgogICAgaWYgKGRlZWQucHJldmlvdXNPd25lcigpICE9IG93bmVyKSB0aHJvdzsKICAgIC8vIENhbGN1bGF0ZSB0aGUgaGFzaCBvZiB0aGUgZnVsbCBuYW1lIChpLmUuIHJ1bW91cnMuZXRoKS4KICAgIGJ5dGVzMzIgbm9kZSA9IHNoYTMocm9vdF9ub2RlLCBsYWJlbF9oYXNoKTsKICAgIC8vIFNldCB0aGUgbmFtZSdzIHJlc29sdmVyIHRvIHRoZSBwdWJsaWMgcmVzb2x2ZXIuCiAgICBlbnMuc2V0UmVzb2x2ZXIobm9kZSwgcmVzb2x2ZXIpOwogICAgLy8gQ29uZmlndXJlIHRoZSByZXNvbHZlciB0byBkaXJlY3QgcGF5bWVudHMgc2VudCB0byB0aGUgbmFtZSB0byB0aGUgYnV5ZXIuCiAgICByZXNvbHZlci5zZXRBZGRyKG5vZGUsIGJ1eWVyKTsKICAgIC8vIFRyYW5zZmVyIHRoZSBuYW1lJ3MgZGVlZCB0byB0aGUgYnV5ZXIuCiAgICByZWdpc3RyYXIudHJhbnNmZXIobGFiZWxfaGFzaCwgYnV5ZXIpOwoKICAgIC8vIERldiBmZWUgb2YgNSUKICAgIHVpbnQgZmVlID0gcHJpY2UgLyAyMDsKICAgIC8vIFRoZSBzZWxsZXIgcGF5cyBub3RoaW5nIHRvIHVubGlzdCBhbmQgZ2V0IHRoZWlyIG5hbWUgYmFjay4KICAgIGlmIChidXllciA9PSBvd25lcikgewogICAgICBwcmljZSA9IDA7CiAgICAgIGZlZSA9IDA7CiAgICB9CiAgICAvLyA1JSB0byB0aGUgZGV2CiAgICBkZXZlbG9wZXIudHJhbnNmZXIoZmVlKTsKICAgIC8vIDk1JSB0byB0aGUgc2VsbGVyCiAgICBvd25lci50cmFuc2ZlcihwcmljZSAtIGZlZSk7CiAgICAvLyBBbnkgZXh0cmEgcGFzdCB0aGUgc2FsZSBwcmljZSBpcyByZXR1cm5lZCB0byB0aGUgYnV5ZXIuCiAgICBpZiAoYW1vdW50X3BhaWQgPiBwcmljZSkgewogICAgICBidXllci50cmFuc2ZlcihhbW91bnRfcGFpZCAtIHByaWNlKTsKICAgIH0KICAgIExhYmVsU29sZChzZWxsX2Vucyk7CiAgfQogIAogIC8vIFRoZSBmYWN0b3J5IG11c3QgYmUgcGF5YWJsZSB0byByZWNlaXZlIGZ1bmRzIGZyb20gaXRzIGNoaWxkIGNvbnRyYWN0cy4KICBmdW5jdGlvbiAoKSBwYXlhYmxlIHt9Cn0='.
	

]
