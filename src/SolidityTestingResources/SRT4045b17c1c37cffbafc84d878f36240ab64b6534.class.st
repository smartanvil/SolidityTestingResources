Class {
	#name : #SRT4045b17c1c37cffbafc84d878f36240ab64b6534,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4045b17c1c37cffbafc84d878f36240ab64b6534 >> base64 [
	^ ''.
	

]
