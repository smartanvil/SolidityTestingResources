Class {
	#name : #SRTe8433116974b18a50636f030f6635e3870220d5c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8433116974b18a50636f030f6635e3870220d5c >> base64 [
	^ ''.
	

]
