Class {
	#name : #SRT5027880b5A4C5BBB88D229a334Aa8F31e6e67197,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5027880b5A4C5BBB88D229a334Aa8F31e6e67197 >> base64 [
	^ ''.
	

]
