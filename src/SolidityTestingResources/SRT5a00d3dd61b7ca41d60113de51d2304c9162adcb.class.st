Class {
	#name : #SRT5a00d3dd61b7ca41d60113de51d2304c9162adcb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a00d3dd61b7ca41d60113de51d2304c9162adcb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9Cgpjb250cmFjdCBBYnN0cmFjdFN0YXJiYXNlVG9rZW4gewogICAgZnVuY3Rpb24gaXNGdW5kcmFpc2VyKGFkZHJlc3MgZnVuZHJhaXNlckFkZHJlc3MpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGNvbXBhbnkoKSBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRvQ3Jvd2RzYWxlUHVyY2hhc2VyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFsbG9jYXRlVG9NYXJrZXRpbmdTdXBwb3J0ZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlIHsKICAgIGZ1bmN0aW9uIHN0YXJ0RGF0ZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHt9CiAgICBmdW5jdGlvbiBlbmRlZEF0KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGlzRW5kZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIG51bU9mUHVyY2hhc2VkVG9rZW5zT25Dc0J5KGFkZHJlc3MgcHVyY2hhc2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5KGFkZHJlc3MgcHVyY2hhc2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKY29udHJhY3QgU3RhcmJhc2VFYXJseVB1cmNoYXNlIHsKICAgIC8qCiAgICAgKiAgQ29uc3RhbnRzCiAgICAgKi8KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgUFVSQ0hBU0VfQU1PVU5UX1VOSVQgPSAnQ05ZJzsgICAgLy8gQ2hpbmVzZSBZdWFuCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFBVUkNIQVNFX0FNT1VOVF9SQVRFX1JFRkVSRU5DRSA9ICdodHRwOi8vd3d3LnhlLmNvbS9jdXJyZW5jeXRhYmxlcy8nOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgUFVSQ0hBU0VfQU1PVU5UX0NBUCA9IDkwMDAwMDA7CgogICAgLyoKICAgICAqICBUeXBlcwogICAgICovCiAgICBzdHJ1Y3QgRWFybHlQdXJjaGFzZSB7CiAgICAgICAgYWRkcmVzcyBwdXJjaGFzZXI7CiAgICAgICAgdWludCBhbW91bnQ7ICAgICAgICAvLyBDTlkgYmFzZWQgYW1vdW50CiAgICAgICAgdWludCBwdXJjaGFzZWRBdDsgICAvLyB0aW1lc3RhbXAKICAgIH0KCiAgICAvKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlIHB1YmxpYyBzdGFyYmFzZUNyb3dkc2FsZTsKCiAgICAvKgogICAgICogIFN0b3JhZ2UKICAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBFYXJseVB1cmNoYXNlW10gcHVibGljIGVhcmx5UHVyY2hhc2VzOwogICAgdWludCBwdWJsaWMgZWFybHlQdXJjaGFzZUNsb3NlZEF0OwoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG5vRXRoZXIoKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlCZWZvcmVDcm93ZHNhbGUoKSB7CiAgICAgICAgaWYgKGFkZHJlc3Moc3RhcmJhc2VDcm93ZHNhbGUpICE9IDAgJiYKICAgICAgICAgICAgc3RhcmJhc2VDcm93ZHNhbGUuc3RhcnREYXRlKCkgPiAwKQogICAgICAgIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUVhcmx5UHVyY2hhc2VUZXJtKCkgewogICAgICAgIGlmIChlYXJseVB1cmNoYXNlQ2xvc2VkQXQgPiAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIC8qCiAgICAgKiAgQ29udHJhY3QgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8vLyBAZGV2IFJldHVybnMgZWFybHkgcHVyY2hhc2VkIGFtb3VudCBieSBwdXJjaGFzZXIncyBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIHB1cmNoYXNlciBQdXJjaGFzZXIgYWRkcmVzcwogICAgZnVuY3Rpb24gcHVyY2hhc2VkQW1vdW50QnkoYWRkcmVzcyBwdXJjaGFzZXIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG5vRXRoZXIKICAgICAgICByZXR1cm5zICh1aW50IGFtb3VudCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaTsgaSA8IGVhcmx5UHVyY2hhc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlYXJseVB1cmNoYXNlc1tpXS5wdXJjaGFzZXIgPT0gcHVyY2hhc2VyKSB7CiAgICAgICAgICAgICAgICBhbW91bnQgKz0gZWFybHlQdXJjaGFzZXNbaV0uYW1vdW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdG90YWwgYW1vdW50IG9mIHJhaXNlZCBmdW5kcyBieSBFYXJseSBQdXJjaGFzZXJzCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKHVpbnQgdG90YWxBbW91bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk7IGkgPCBlYXJseVB1cmNoYXNlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0b3RhbEFtb3VudCArPSBlYXJseVB1cmNoYXNlc1tpXS5hbW91bnQ7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIGVhcmx5IHB1cmNoYXNlcwogICAgZnVuY3Rpb24gbnVtYmVyT2ZFYXJseVB1cmNoYXNlcygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG5vRXRoZXIKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBlYXJseVB1cmNoYXNlcy5sZW5ndGg7CiAgICB9CgogICAgLy8vIEBkZXYgQXBwZW5kIGFuIGVhcmx5IHB1cmNoYXNlIGxvZwogICAgLy8vIEBwYXJhbSBwdXJjaGFzZXIgUHVyY2hhc2VyIGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gYW1vdW50IFB1cmNoYXNlIGFtb3VudAogICAgLy8vIEBwYXJhbSBwdXJjaGFzZWRBdCBUaW1lc3RhbXAgb2YgcHVyY2hhc2VkIGRhdGUKICAgIGZ1bmN0aW9uIGFwcGVuZEVhcmx5UHVyY2hhc2UoYWRkcmVzcyBwdXJjaGFzZXIsIHVpbnQgYW1vdW50LCB1aW50IHB1cmNoYXNlZEF0KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9FdGhlcgogICAgICAgIG9ubHlPd25lcgogICAgICAgIG9ubHlCZWZvcmVDcm93ZHNhbGUKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZVRlcm0KICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChhbW91bnQgPT0gMCB8fAogICAgICAgICAgICB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKSArIGFtb3VudCA+IFBVUkNIQVNFX0FNT1VOVF9DQVApCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAocHVyY2hhc2VkQXQgPT0gMCB8fCBwdXJjaGFzZWRBdCA+IG5vdykgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIGVhcmx5UHVyY2hhc2VzLnB1c2goRWFybHlQdXJjaGFzZShwdXJjaGFzZXIsIGFtb3VudCwgcHVyY2hhc2VkQXQpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBDbG9zZSBlYXJseSBwdXJjaGFzZSB0ZXJtCiAgICBmdW5jdGlvbiBjbG9zZUVhcmx5UHVyY2hhc2UoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9FdGhlcgogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgZWFybHlQdXJjaGFzZUNsb3NlZEF0ID0gbm93OwogICAgfQoKICAgIC8vLyBAZGV2IFNldHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3QncyBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIHN0YXJiYXNlQ3Jvd2RzYWxlQWRkcmVzcyBUb2tlbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXR1cChhZGRyZXNzIHN0YXJiYXNlQ3Jvd2RzYWxlQWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSA9PSAwKSB7CiAgICAgICAgICAgIHN0YXJiYXNlQ3Jvd2RzYWxlID0gQWJzdHJhY3RTdGFyYmFzZUNyb3dkc2FsZShzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgICBmdW5jdGlvbiBTdGFyYmFzZUVhcmx5UHVyY2hhc2UoKSBub0V0aGVyIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24gYWx3YXlzIGZhaWxzCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhyb3c7CiAgICB9Cn0KCgpjb250cmFjdCBTdGFyYmFzZUVhcmx5UHVyY2hhc2VBbWVuZG1lbnQgewogICAgLyoKICAgICAqICBFdmVudHMKICAgICAqLwogICAgZXZlbnQgRWFybHlQdXJjaGFzZUludmFsaWRhdGVkKHVpbnQgZXBJZHgpOwogICAgZXZlbnQgRWFybHlQdXJjaGFzZUFtZW5kZWQodWludCBlcElkeCk7CgogICAgLyoKICAgICAqICBFeHRlcm5hbCBjb250cmFjdHMKICAgICAqLwogICAgQWJzdHJhY3RTdGFyYmFzZUNyb3dkc2FsZSBwdWJsaWMgc3RhcmJhc2VDcm93ZHNhbGU7CiAgICBTdGFyYmFzZUVhcmx5UHVyY2hhc2UgcHVibGljIHN0YXJiYXNlRWFybHlQdXJjaGFzZTsKCiAgICAvKgogICAgICogIFN0b3JhZ2UKICAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICB1aW50W10gcHVibGljIGludmFsaWRFYXJseVB1cmNoYXNlSW5kZXhlczsKICAgIHVpbnRbXSBwdWJsaWMgYW1lbmRlZEVhcmx5UHVyY2hhc2VJbmRleGVzOwogICAgbWFwcGluZyAodWludCA9PiBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZSkgcHVibGljIGFtZW5kZWRFYXJseVB1cmNoYXNlczsKCiAgICAvKgogICAgICogIE1vZGlmaWVycwogICAgICovCiAgICBtb2RpZmllciBub0V0aGVyKCkgewogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QmVmb3JlQ3Jvd2RzYWxlKCkgewogICAgICAgIGlmIChhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSAhPSAwICYmCiAgICAgICAgICAgIHN0YXJiYXNlQ3Jvd2RzYWxlLnN0YXJ0RGF0ZSgpID4gMCkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlFYXJseVB1cmNoYXNlc0xvYWRlZCgpIHsKICAgICAgICBpZiAoYWRkcmVzcyhzdGFyYmFzZUVhcmx5UHVyY2hhc2UpID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLyoKICAgICAqICBDb250cmFjdCBmdW5jdGlvbnMgYXJlIGNvbXBhdGlibGUgd2l0aCBvcmlnaW5hbCBvbmVzCiAgICAgKi8KICAgIC8vLyBAZGV2IFJldHVybnMgYW4gZWFybHkgcHVyY2hhc2UgcmVjb3JkCiAgICAvLy8gQHBhcmFtIGVhcmx5UHVyY2hhc2VJbmRleCBJbmRleCBudW1iZXIgb2YgYW4gZWFybHkgcHVyY2hhc2UKICAgIGZ1bmN0aW9uIGVhcmx5UHVyY2hhc2VzKHVpbnQgZWFybHlQdXJjaGFzZUluZGV4KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICByZXR1cm5zIChhZGRyZXNzIHB1cmNoYXNlciwgdWludCBhbW91bnQsIHVpbnQgcHVyY2hhc2VkQXQpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXJiYXNlRWFybHlQdXJjaGFzZS5lYXJseVB1cmNoYXNlcyhlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgZWFybHkgcHVyY2hhc2VkIGFtb3VudCBieSBwdXJjaGFzZXIncyBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIHB1cmNoYXNlciBQdXJjaGFzZXIgYWRkcmVzcwogICAgZnVuY3Rpb24gcHVyY2hhc2VkQW1vdW50QnkoYWRkcmVzcyBwdXJjaGFzZXIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG5vRXRoZXIKICAgICAgICByZXR1cm5zICh1aW50IGFtb3VudCkKICAgIHsKICAgICAgICBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZVtdIG1lbW9yeSBub3JtYWxpemVkRVAgPQogICAgICAgICAgICBub3JtYWxpemVkRWFybHlQdXJjaGFzZXMoKTsKICAgICAgICBmb3IgKHVpbnQgaTsgaSA8IG5vcm1hbGl6ZWRFUC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAobm9ybWFsaXplZEVQW2ldLnB1cmNoYXNlciA9PSBwdXJjaGFzZXIpIHsKICAgICAgICAgICAgICAgIGFtb3VudCArPSBub3JtYWxpemVkRVBbaV0uYW1vdW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdG90YWwgYW1vdW50IG9mIHJhaXNlZCBmdW5kcyBieSBFYXJseSBQdXJjaGFzZXJzCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKHVpbnQgdG90YWxBbW91bnQpCiAgICB7CiAgICAgICAgU3RhcmJhc2VFYXJseVB1cmNoYXNlLkVhcmx5UHVyY2hhc2VbXSBtZW1vcnkgbm9ybWFsaXplZEVQID0KICAgICAgICAgICAgbm9ybWFsaXplZEVhcmx5UHVyY2hhc2VzKCk7CiAgICAgICAgZm9yICh1aW50IGk7IGkgPCBub3JtYWxpemVkRVAubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdG90YWxBbW91bnQgKz0gbm9ybWFsaXplZEVQW2ldLmFtb3VudDsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgZWFybHkgcHVyY2hhc2VzCiAgICBmdW5jdGlvbiBudW1iZXJPZkVhcmx5UHVyY2hhc2VzKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRFYXJseVB1cmNoYXNlcygpLmxlbmd0aDsKICAgIH0KCiAgICAvLy8gQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIGNvbnRyYWN0J3MgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MgVG9rZW4gYWRkcmVzcwogICAgZnVuY3Rpb24gc2V0dXAoYWRkcmVzcyBzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBub0V0aGVyCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAoYWRkcmVzcyhzdGFyYmFzZUNyb3dkc2FsZSkgPT0gMCkgewogICAgICAgICAgICBzdGFyYmFzZUNyb3dkc2FsZSA9IEFic3RyYWN0U3RhcmJhc2VDcm93ZHNhbGUoc3RhcmJhc2VDcm93ZHNhbGVBZGRyZXNzKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKgogICAgICogIENvbnRyYWN0IGZ1bmN0aW9ucwogICAgICovCiAgICBmdW5jdGlvbiBpbnZhbGlkYXRlRWFybHlQdXJjaGFzZSh1aW50IGVhcmx5UHVyY2hhc2VJbmRleCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICBvbmx5QmVmb3JlQ3Jvd2RzYWxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAobnVtYmVyT2ZSYXdFYXJseVB1cmNoYXNlcygpIDw9IGVhcmx5UHVyY2hhc2VJbmRleCkgewogICAgICAgICAgICB0aHJvdzsgIC8vIEFycmF5IEluZGV4IE91dCBvZiBCb3VuZHMgRXhjZXB0aW9uCiAgICAgICAgfQoKICAgICAgICBmb3IgKHVpbnQgaTsgaSA8IGludmFsaWRFYXJseVB1cmNoYXNlSW5kZXhlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoaW52YWxpZEVhcmx5UHVyY2hhc2VJbmRleGVzW2ldID09IGVhcmx5UHVyY2hhc2VJbmRleCkgewogICAgICAgICAgICAgICAgdGhyb3c7ICAvLyBkaXNhbGxvdyBkdXBsaWNhdGVkIGludmFsaWRhdGlvbgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpbnZhbGlkRWFybHlQdXJjaGFzZUluZGV4ZXMucHVzaChlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIEVhcmx5UHVyY2hhc2VJbnZhbGlkYXRlZChlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzSW52YWxpZEVhcmx5UHVyY2hhc2UodWludCBlYXJseVB1cmNoYXNlSW5kZXgpCiAgICAgICAgY29uc3RhbnQKICAgICAgICBub0V0aGVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAobnVtYmVyT2ZSYXdFYXJseVB1cmNoYXNlcygpIDw9IGVhcmx5UHVyY2hhc2VJbmRleCkgewogICAgICAgICAgICB0aHJvdzsgIC8vIEFycmF5IEluZGV4IE91dCBvZiBCb3VuZHMgRXhjZXB0aW9uCiAgICAgICAgfQoKICAgICAgICBmb3IgKHVpbnQgaTsgaSA8IGludmFsaWRFYXJseVB1cmNoYXNlSW5kZXhlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoaW52YWxpZEVhcmx5UHVyY2hhc2VJbmRleGVzW2ldID09IGVhcmx5UHVyY2hhc2VJbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFtZW5kRWFybHlQdXJjaGFzZSh1aW50IGVhcmx5UHVyY2hhc2VJbmRleCwgYWRkcmVzcyBwdXJjaGFzZXIsIHVpbnQgYW1vdW50LCB1aW50IHB1cmNoYXNlZEF0KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9FdGhlcgogICAgICAgIG9ubHlPd25lcgogICAgICAgIG9ubHlFYXJseVB1cmNoYXNlc0xvYWRlZAogICAgICAgIG9ubHlCZWZvcmVDcm93ZHNhbGUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChwdXJjaGFzZWRBdCA9PSAwIHx8IHB1cmNoYXNlZEF0ID4gbm93KSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgaWYgKG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKSA8PSBlYXJseVB1cmNoYXNlSW5kZXgpIHsKICAgICAgICAgICAgdGhyb3c7ICAvLyBBcnJheSBJbmRleCBPdXQgb2YgQm91bmRzIEV4Y2VwdGlvbgogICAgICAgIH0KCiAgICAgICAgaWYgKGlzSW52YWxpZEVhcmx5UHVyY2hhc2UoZWFybHlQdXJjaGFzZUluZGV4KSkgewogICAgICAgICAgICB0aHJvdzsgIC8vIEludmFsaWQgZWFybHkgcHVyY2hhc2UgY2Fubm90IGJlIGFtZW5kZWQKICAgICAgICB9CgogICAgICAgIGlmICghaXNBbWVuZGVkRWFybHlQdXJjaGFzZShlYXJseVB1cmNoYXNlSW5kZXgpKSB7CiAgICAgICAgICAgIGFtZW5kZWRFYXJseVB1cmNoYXNlSW5kZXhlcy5wdXNoKGVhcmx5UHVyY2hhc2VJbmRleCk7CiAgICAgICAgfQoKICAgICAgICBhbWVuZGVkRWFybHlQdXJjaGFzZXNbZWFybHlQdXJjaGFzZUluZGV4XSA9CiAgICAgICAgICAgIFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlKHB1cmNoYXNlciwgYW1vdW50LCBwdXJjaGFzZWRBdCk7CiAgICAgICAgRWFybHlQdXJjaGFzZUFtZW5kZWQoZWFybHlQdXJjaGFzZUluZGV4KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0FtZW5kZWRFYXJseVB1cmNoYXNlKHVpbnQgZWFybHlQdXJjaGFzZUluZGV4KQogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYgKG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKSA8PSBlYXJseVB1cmNoYXNlSW5kZXgpIHsKICAgICAgICAgICAgdGhyb3c7ICAvLyBBcnJheSBJbmRleCBPdXQgb2YgQm91bmRzIEV4Y2VwdGlvbgogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGk7IGkgPCBhbWVuZGVkRWFybHlQdXJjaGFzZUluZGV4ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFtZW5kZWRFYXJseVB1cmNoYXNlSW5kZXhlc1tpXSA9PSBlYXJseVB1cmNoYXNlSW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2FkU3RhcmJhc2VFYXJseVB1cmNoYXNlcyhhZGRyZXNzIHN0YXJiYXNlRWFybHlQdXJjaGFzZUFkZHJlc3MpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBub0V0aGVyCiAgICAgICAgb25seU93bmVyCiAgICAgICAgb25seUJlZm9yZUNyb3dkc2FsZQogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYgKHN0YXJiYXNlRWFybHlQdXJjaGFzZUFkZHJlc3MgPT0gMCB8fAogICAgICAgICAgICBhZGRyZXNzKHN0YXJiYXNlRWFybHlQdXJjaGFzZSkgIT0gMCkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgc3RhcmJhc2VFYXJseVB1cmNoYXNlID0gU3RhcmJhc2VFYXJseVB1cmNoYXNlKHN0YXJiYXNlRWFybHlQdXJjaGFzZUFkZHJlc3MpOwogICAgICAgIGlmIChzdGFyYmFzZUVhcmx5UHVyY2hhc2UuZWFybHlQdXJjaGFzZUNsb3NlZEF0KCkgPT0gMCkgewogICAgICAgICAgICB0aHJvdzsgICAvLyB0aGUgZWFybHkgcHVyY2hhc2UgbXVzdCBiZSBjbG9zZWQKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIFN0YXJiYXNlRWFybHlQdXJjaGFzZUFtZW5kbWVudCgpIG5vRXRoZXIgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiBhbHdheXMgZmFpbHMKICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdzsKICAgIH0KCiAgICAvKioKICAgICAqIEludGVybmFsIGZ1bmN0aW9ucwogICAgICovCiAgICBmdW5jdGlvbiBub3JtYWxpemVkRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZVtdIG5vcm1hbGl6ZWRFUCkKICAgIHsKICAgICAgICB1aW50IHJhd0VQQ291bnQgPSBudW1iZXJPZlJhd0Vhcmx5UHVyY2hhc2VzKCk7CiAgICAgICAgbm9ybWFsaXplZEVQID0gbmV3IFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlW10oCiAgICAgICAgICAgIHJhd0VQQ291bnQgLSBpbnZhbGlkRWFybHlQdXJjaGFzZUluZGV4ZXMubGVuZ3RoKTsKCiAgICAgICAgdWludCBub3JtYWxpemVkSWR4OwogICAgICAgIGZvciAodWludCBpOyBpIDwgcmF3RVBDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpc0ludmFsaWRFYXJseVB1cmNoYXNlKGkpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsgICAvLyBpbnZhbGlkIGVhcmx5IHB1cmNoYXNlIHNob3VsZCBiZSBpZ25vcmVkCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlIG1lbW9yeSBlcDsKICAgICAgICAgICAgaWYgKGlzQW1lbmRlZEVhcmx5UHVyY2hhc2UoaSkpIHsKICAgICAgICAgICAgICAgIGVwID0gYW1lbmRlZEVhcmx5UHVyY2hhc2VzW2ldOyAgLy8gYW1lbmRlZCBlYXJseSBwdXJjaGFzZSBzaG91bGQgdGFrZSBhIHByaW9yaXR5CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlcCA9IGdldEVhcmx5UHVyY2hhc2UoaSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vcm1hbGl6ZWRFUFtub3JtYWxpemVkSWR4XSA9IGVwOwogICAgICAgICAgICBub3JtYWxpemVkSWR4Kys7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEVhcmx5UHVyY2hhc2UodWludCBlYXJseVB1cmNoYXNlSW5kZXgpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG9ubHlFYXJseVB1cmNoYXNlc0xvYWRlZAogICAgICAgIHJldHVybnMgKFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlKQogICAgewogICAgICAgIHZhciAocHVyY2hhc2VyLCBhbW91bnQsIHB1cmNoYXNlZEF0KSA9CiAgICAgICAgICAgIHN0YXJiYXNlRWFybHlQdXJjaGFzZS5lYXJseVB1cmNoYXNlcyhlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIHJldHVybiBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZShwdXJjaGFzZXIsIGFtb3VudCwgcHVyY2hhc2VkQXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBzdGFyYmFzZUVhcmx5UHVyY2hhc2UubnVtYmVyT2ZFYXJseVB1cmNoYXNlcygpOwogICAgfQp9CgovKioKICogQHRpdGxlIENyb3dkc2FsZSBjb250cmFjdCAtIFN0YXJiYXNlIGNyb3dkc2FsZSB0byBjcmVhdGUgU1RBUi4KICogQGF1dGhvciBTdGFyYmFzZSBQVEUuIExURC4gLSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjIzNGE0ZDQ1NGM2MzUwNTc0MjUxNDE0MjUwNDYwZDQwNGMiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgogKi8KY29udHJhY3QgU3RhcmJhc2VDcm93ZHNhbGUgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIC8qCiAgICAgKiAgRXZlbnRzCiAgICAgKi8KICAgIGV2ZW50IENyb3dkc2FsZUVuZGVkKHVpbnQyNTYgZW5kZWRBdCk7CiAgICBldmVudCBTdGFyYmFzZVB1cmNoYXNlZFdpdGhFdGgoYWRkcmVzcyBwdXJjaGFzZXIsIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IHJhd0Ftb3VudCwgdWludDI1NiBjbnlFdGhSYXRlKTsKICAgIGV2ZW50IENueUV0aFJhdGVVcGRhdGVkKHVpbnQyNTYgY255RXRoUmF0ZSk7CiAgICBldmVudCBDbnlCdGNSYXRlVXBkYXRlZCh1aW50MjU2IGNueUJ0Y1JhdGUpOwogICAgZXZlbnQgUXVhbGlmaWVkUGFydG5lckFkZHJlc3MoYWRkcmVzcyBxdWFsaWZpZWRQYXJ0bmVyKTsKCiAgICAvKioKICAgICAqICBFeHRlcm5hbCBjb250cmFjdHMKICAgICAqLwogICAgQWJzdHJhY3RTdGFyYmFzZVRva2VuIHB1YmxpYyBzdGFyYmFzZVRva2VuOwogICAgU3RhcmJhc2VFYXJseVB1cmNoYXNlQW1lbmRtZW50IHB1YmxpYyBzdGFyYmFzZUVwQW1lbmRtZW50OwoKICAgIC8qKgogICAgICogIENvbnN0YW50cwogICAgICovCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBjcm93ZHNhbGVUb2tlbkFtb3VudCA9IDEyNTAwMDAwMGUxODsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGVhcmx5UHVyY2hhc2VUb2tlbkFtb3VudCA9IDUwMDAwMDAwZTE4OwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgTUlOX0lOVkVTVE1FTlQgPSAxOyAvLyBtaW4gaXMgMSBXZWkKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIE1BWF9DQVAgPSA2NzAwMDAwMDsgLy8gaW4gQ05ZLiBhcHByb3hpbWF0ZWx5IDEwTSBVU0QuIChpbmNsdWRlcyByYWlzZWQgYW1vdW50IGZyb20gYm90aCBFUCBhbmQgQ1MpCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFBVUkNIQVNFX0FNT1VOVF9VTklUID0gJ0NOWSc7ICAvLyBDaGluZXNlIFl1YW4KCiAgICAvKioKICAgICAqIFR5cGVzCiAgICAgKi8KICAgIHN0cnVjdCBDcm93ZHNhbGVQdXJjaGFzZSB7CiAgICAgICAgYWRkcmVzcyBwdXJjaGFzZXI7CiAgICAgICAgdWludDI1NiBhbW91bnQ7ICAgICAgICAvLyBDTlkgYmFzZWQgYW1vdW50IHdpdGggYm9udXMKICAgICAgICB1aW50MjU2IHJhd0Ftb3VudDsgICAgIC8vIENOWSBiYXNlZCBhbW91bnQgbm8gYm9udXMKICAgICAgICB1aW50MjU2IHB1cmNoYXNlZEF0OyAgIC8vIHRpbWVzdGFtcAogICAgfQoKICAgIHN0cnVjdCBRdWFsaWZpZWRQYXJ0bmVycyB7CiAgICAgICAgdWludDI1NiBhbW91bnRDYXA7CiAgICAgICAgdWludDI1NiBhbW91bnRSYWlzZWQ7CiAgICAgICAgYm9vbCAgICBib25hRmlkZTsKICAgICAgICB1aW50MjU2IGNvbW1pc3Npb25GZWVQZXJjZW50YWdlOyAvLyBleGFtcGxlIDUgd2lsbCBjYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2UgYXMgNSUKICAgIH0KCiAgICAvKgogICAgICogIEVudW1zCiAgICAgKi8KICAgIGVudW0gQm9udXNNaWxlc3RvbmVzIHsKICAgICAgICBGaXJzdCwKICAgICAgICBTZWNvbmQsCiAgICAgICAgVGhpcmQsCiAgICAgICAgRm91cnRoLAogICAgICAgIEZpZnRoCiAgICB9CgogICAgLy8gSW5pdGlhbGl6ZSBib251c01pbGVzdG9uZXMKICAgIEJvbnVzTWlsZXN0b25lcyBwdWJsaWMgYm9udXNNaWxlc3RvbmVzID0gQm9udXNNaWxlc3RvbmVzLkZpcnN0OwoKICAgIC8qKgogICAgICogIFN0b3JhZ2UKICAgICAqLwogICAgdWludCBwdWJsaWMgbnVtT2ZEZWxpdmVyZWRDcm93ZHNhbGVQdXJjaGFzZXM7ICAvLyBpbmRleCB0byBrZWVwIHRoZSBudW1iZXIgb2YgY3Jvd2RzYWxlIHB1cmNoYXNlcyBoYXZlIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQgYnkgYHdpdGhkcmF3UHVyY2hhc2VkVG9rZW5zYAogICAgdWludCBwdWJsaWMgbnVtT2ZEZWxpdmVyZWRFYXJseVB1cmNoYXNlczsgIC8vIGluZGV4IHRvIGtlZXAgdGhlIG51bWJlciBvZiBlYXJseSBwdXJjaGFzZXMgaGF2ZSBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIGJ5IGB3aXRoZHJhd1B1cmNoYXNlZFRva2Vuc2AKICAgIHVpbnQyNTYgcHVibGljIG51bU9mTG9hZGVkRWFybHlQdXJjaGFzZXM7IC8vIGluZGV4IHRvIGtlZXAgdGhlIG51bWJlciBvZiBlYXJseSBwdXJjaGFzZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBsb2FkZWQgYnkgYGxvYWRFYXJseVB1cmNoYXNlc2AKCiAgICAvLyBlYXJseSBwdXJjaGFzZQogICAgYWRkcmVzc1tdIHB1YmxpYyBlYXJseVB1cmNoYXNlcnM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBlYXJseVB1cmNoYXNlZEFtb3VudEJ5OyAvLyBlYXJseSBwdXJjaGFzZWQgYW1vdW50IGluIENOWSBwZXIgcHVyY2hhc2VycycgYWRkcmVzcwogICAgYm9vbCBwdWJsaWMgZWFybHlQdXJjaGFzZXNMb2FkZWQgPSBmYWxzZTsgIC8vIHJldHVybnMgd2hldGhlciBhbGwgZWFybHkgcHVyY2hhc2VzIGFyZSBsb2FkZWQgaW50byB0aGlzIGNvbnRyYWN0CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNJbkNueTsKCiAgICAvLyBjcm93ZHNhbGUKICAgIHVpbnQyNTYgcHVibGljIG1heENyb3dkc2FsZUNhcDsgICAgIC8vID0gNjdNIENOWSAtICh0b3RhbCByYWlzZWQgYW1vdW50IGZyb20gRVApCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEFtb3VudE9mUHVyY2hhc2VzSW5Dbnk7IC8vIHRvdGFsUHJlU2FsZSArIHRvdGFsQ3Jvd2RzYWxlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IFF1YWxpZmllZFBhcnRuZXJzKSBwdWJsaWMgcXVhbGlmaWVkUGFydG5lcnM7CiAgICB1aW50MjU2IHB1YmxpYyBwdXJjaGFzZVN0YXJ0QmxvY2s7ICAvLyBjcm93ZHNhbGUgcHVyY2hhc2VzIGNhbiBiZSBhY2NlcHRlZCBmcm9tIHRoaXMgYmxvY2sgbnVtYmVyCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydERhdGU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRlZEF0OwogICAgQ3Jvd2RzYWxlUHVyY2hhc2VbXSBwdWJsaWMgY3Jvd2RzYWxlUHVyY2hhc2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgY3Jvd2RzYWxlUHVyY2hhc2VBbW91bnRCeTsgLy8gY3Jvd2RzYWxlIHB1cmNoYXNlIGFtb3VudCBpbiBDTlkgcGVyIHB1cmNoYXNlcnMnIGFkZHJlc3MKICAgIHVpbnQyNTYgcHVibGljIGNueUJ0Y1JhdGU7IC8vIHRoaXMgcmF0ZSB3b24ndCBiZSB1c2VkIGZyb20gYSBzbWFydCBjb250cmFjdCBmdW5jdGlvbiBidXQgZXh0ZXJuYWwgc3lzdGVtCiAgICB1aW50MjU2IHB1YmxpYyBjbnlFdGhSYXRlOwoKICAgIC8vIGJvbnVzIG1pbGVzdG9uZXMKICAgIHVpbnQyNTYgcHVibGljIGZpcnN0Qm9udXNFbmRzOwogICAgdWludDI1NiBwdWJsaWMgc2Vjb25kQm9udXNFbmRzOwogICAgdWludDI1NiBwdWJsaWMgdGhpcmRCb251c0VuZHM7CiAgICB1aW50MjU2IHB1YmxpYyBmb3VydGhCb251c0VuZHM7CgogICAgLy8gYWZ0ZXIgdGhlIGNyb3dkc2FsZQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgbnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkNzQnk7ICAgIC8vIHRoZSBudW1iZXIgb2YgdG9rZW5zIHB1cmNoYXNlZCBvbiB0aGUgY3Jvd2RzYWxlIGJ5IGEgcHVyY2hhc2VyCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBudW1PZlB1cmNoYXNlZFRva2Vuc09uRXBCeTsgICAgLy8gdGhlIG51bWJlciBvZiB0b2tlbnMgZWFybHkgcHVyY2hhc2VkIGJ5IGEgcHVyY2hhc2VyCgogICAgLyoqCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG1pbkludmVzdG1lbnQoKSB7CiAgICAgICAgLy8gVXNlciBoYXMgdG8gc2VuZCBhdCBsZWFzdCB0aGUgZXRoZXIgdmFsdWUgb2Ygb25lIHRva2VuLgogICAgICAgIGFzc2VydChtc2cudmFsdWUgPj0gTUlOX0lOVkVTVE1FTlQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgd2hlbkVuZGVkKCkgewogICAgICAgIGFzc2VydChpc0VuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzQmFsYW5jZSgpIHsKICAgICAgICBhc3NlcnQodGhpcy5iYWxhbmNlID4gMCk7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIHJhdGVJc1NldCh1aW50MjU2IF9yYXRlKSB7CiAgICAgICAgYXNzZXJ0KF9yYXRlICE9IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgd2hlbk5vdEVuZGVkKCkgewogICAgICAgIGFzc2VydCghaXNFbmRlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRva2Vuc05vdERlbGl2ZXJlZCgpIHsKICAgICAgICBhc3NlcnQobnVtT2ZEZWxpdmVyZWRDcm93ZHNhbGVQdXJjaGFzZXMgPT0gMCk7CiAgICAgICAgYXNzZXJ0KG51bU9mRGVsaXZlcmVkRWFybHlQdXJjaGFzZXMgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5RnVuZHJhaXNlcigpIHsKICAgICAgICBhc3NlcnQoYWRkcmVzcyhzdGFyYmFzZVRva2VuKSAhPSAwKTsKICAgICAgICBhc3NlcnQoc3RhcmJhc2VUb2tlbi5pc0Z1bmRyYWlzZXIobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVF1YWxpZmllZFBhcnRuZXIoKSB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmJvbmFGaWRlKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQ29udHJhY3QgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8qKgogICAgICogQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBzZXRzIG93bmVyIGFkZHJlc3MgYW5kCiAgICAgKiAgICAgIGFkZHJlc3Mgb2YgU3RhcmJhc2VFYXJseVB1cmNoYXNlQW1lbmRtZW50IGNvbnRyYWN0LgogICAgICogQHBhcmFtIHN0YXJiYXNlRXBBZGRyIFRoZSBhZGRyZXNzIHRoYXQgaG9sZHMgdGhlIGVhcmx5IHB1cmNoYXNlcnMgU3RhciB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gU3RhcmJhc2VDcm93ZHNhbGUoYWRkcmVzcyBzdGFyYmFzZUVwQWRkcikgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VFcEFkZHIgIT0gMCk7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHN0YXJiYXNlRXBBbWVuZG1lbnQgPSBTdGFyYmFzZUVhcmx5UHVyY2hhc2VBbWVuZG1lbnQoc3RhcmJhc2VFcEFkZHIpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGYWxsYmFjayBhY2NlcHRzIHBheW1lbnQgZm9yIFN0YXIgdG9rZW5zIHdpdGggRXRoCiAgICAgKi8KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgcmVkaXJlY3RUb1B1cmNoYXNlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBFeHRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIGNvbnRyYWN0cycgYWRkcmVzc2VzIGFuZCBzZXQgdGhlIG1heCBjcm93ZHNhbGUgY2FwCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VUb2tlbkFkZHJlc3MgVG9rZW4gYWRkcmVzcy4KICAgICAqIEBwYXJhbSBfcHVyY2hhc2VTdGFydEJsb2NrIEJsb2NrIG51bWJlciB0byBzdGFydCBjcm93ZHNhbGUKICAgICAqLwogICAgZnVuY3Rpb24gc2V0dXAoYWRkcmVzcyBzdGFyYmFzZVRva2VuQWRkcmVzcywgdWludDI1NiBfcHVyY2hhc2VTdGFydEJsb2NrKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKHN0YXJiYXNlVG9rZW5BZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoYWRkcmVzcyhzdGFyYmFzZVRva2VuKSA9PSAwKTsKICAgICAgICBzdGFyYmFzZVRva2VuID0gQWJzdHJhY3RTdGFyYmFzZVRva2VuKHN0YXJiYXNlVG9rZW5BZGRyZXNzKTsKICAgICAgICBwdXJjaGFzZVN0YXJ0QmxvY2sgPSBfcHVyY2hhc2VTdGFydEJsb2NrOwoKICAgICAgICB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNJbkNueSA9IHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlcygpOwoKICAgICAgICAvLyBzZXQgdGhlIG1heCBjYXAgb2YgdGhpcyBjcm93ZHNhbGUKICAgICAgICBtYXhDcm93ZHNhbGVDYXAgPSBNQVhfQ0FQLnN1Yih0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNJbkNueSk7CgogICAgICAgIGFzc2VydChtYXhDcm93ZHNhbGVDYXAgPiAwKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVycyByYWlzZWQgZnVuZHMgdG8gY29tcGFueSdzIHdhbGxldCBhZGRyZXNzIGF0IGFueSBnaXZlbiB0aW1lLgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0ZvckNvbXBhbnkoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUZ1bmRyYWlzZXIKICAgICAgICBoYXNCYWxhbmNlCiAgICB7CiAgICAgICAgYWRkcmVzcyBjb21wYW55ID0gc3RhcmJhc2VUb2tlbi5jb21wYW55KCk7CiAgICAgICAgcmVxdWlyZShjb21wYW55ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGNvbXBhbnkudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVXBkYXRlIHRoZSBDTlkvRVRIIHJhdGUgdG8gcmVjb3JkIHB1cmNoYXNlcyBpbiBDTlkKICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlQ255RXRoUmF0ZSh1aW50MjU2IHJhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5RnVuZHJhaXNlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgY255RXRoUmF0ZSA9IHJhdGU7CiAgICAgICAgQ255RXRoUmF0ZVVwZGF0ZWQoY255RXRoUmF0ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFVwZGF0ZSB0aGUgQ05ZL0JUQyByYXRlIHRvIHJlY29yZCBwdXJjaGFzZXMgaW4gQ05ZCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZUNueUJ0Y1JhdGUodWludDI1NiByYXRlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUZ1bmRyYWlzZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGNueUJ0Y1JhdGUgPSByYXRlOwogICAgICAgIENueUJ0Y1JhdGVVcGRhdGVkKGNueUJ0Y1JhdGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvdyBmb3IgdGhlIHBvc3NpYmlsaXR5IGZvciBjb250cmFjdCBvd25lciB0byBzdGFydCBjcm93ZHNhbGUKICAgICAqLwogICAgZnVuY3Rpb24gb3duZXJTdGFydHNDcm93ZHNhbGUodWludDI1NiB0aW1lc3RhbXApCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQoc3RhcnREYXRlID09IDAgJiYgYmxvY2subnVtYmVyID49IHB1cmNoYXNlU3RhcnRCbG9jayk7ICAgLy8gb3ZlcndyaXRpbmcgc3RhcnREYXRlIGlzIG5vdCBwZXJtaXR0ZWQgYW5kIGl0IHNob3VsZCBiZSBhZnRlciB0aGUgY3Jvd2RzYWxlIHN0YXJ0IGJsb2NrCiAgICAgICAgc3RhcnRDcm93ZHNhbGUodGltZXN0YW1wKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRW5kcyBjcm93ZHNhbGUKICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGltZXN0YW1wIGF0IHRoZSBjcm93ZHNhbGUgZW5kZWQKICAgICAqLwogICAgZnVuY3Rpb24gZW5kQ3Jvd2RzYWxlKHVpbnQyNTYgdGltZXN0YW1wKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgYXNzZXJ0KHRpbWVzdGFtcCA+IDAgJiYgdGltZXN0YW1wIDw9IG5vdyk7CiAgICAgICAgYXNzZXJ0KGJsb2NrLm51bWJlciA+IHB1cmNoYXNlU3RhcnRCbG9jayAmJiBlbmRlZEF0ID09IDApOyAgIC8vIGNhbm5vdCBlbmQgYmVmb3JlIGl0IHN0YXJ0cyBhbmQgb3ZlcndyaXRpbmcgdGltZSBpcyBub3QgcGVybWl0dGVkCiAgICAgICAgZW5kZWRBdCA9IHRpbWVzdGFtcDsKICAgICAgICB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNJbkNueSA9IHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlcygpOwogICAgICAgIHRvdGFsQW1vdW50T2ZQdXJjaGFzZXNJbkNueSA9IHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKTsKICAgICAgICBDcm93ZHNhbGVFbmRlZChlbmRlZEF0KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRGVsaXZlciB0b2tlbnMgdG8gcHVyY2hhc2VycyBhY2NvcmRpbmcgdG8gdGhlaXIgcHVyY2hhc2UgYW1vdW50IGluIENOWQogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1B1cmNoYXNlZFRva2VucygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB3aGVuRW5kZWQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGFzc2VydChlYXJseVB1cmNoYXNlc0xvYWRlZCk7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VUb2tlbikgIT0gMCk7CgogICAgICAgIC8qCiAgICAgICAgICog4oCcVmFsdWXigJ0gcmVmZXJzIHRvIHRoZSBjb250cmlidXRpb24gb2YgdGhlIFVzZXI6CiAgICAgICAgICogIHtjcm93ZHNhbGVfcHVyY2hhc2VyX3Rva2VuX2Ftb3VudH0gPQogICAgICAgICAqICB7Y3Jvd2RzYWxlX3Rva2VuX2Ftb3VudH0gKiB7Y3Jvd2RzYWxlUHVyY2hhc2VfdmFsdWV9IC8ge2Vhcmx5cHVyY2hhc2VfdmFsdWV9ICsge2Nyb3dkc2FsZV92YWx1ZX0uCiAgICAgICAgICoKICAgICAgICAgKiBFeGFtcGxlOiBJZiBhIFVzZXIgY29udHJpYnV0ZXMgZHVyaW5nIHRoZSBDb250cmlidXRpb24gUGVyaW9kIDEwMCBDTlkgKGluY2x1ZGluZyBhcHBsaWNhYmxlCiAgICAgICAgICogQm9udXMsIGlmIGFueSkgYW5kIHRoZSB0b3RhbCBhbW91bnQgZWFybHkgcHVyY2hhc2VzIGFtb3VudHMgdG8gNuKAmTAwMOKAmTAwMCBDTlkKICAgICAgICAgKiBhbmQgdG90YWwgYW1vdW50IHJhaXNlZCBkdXJpbmcgdGhlIENvbnRyaWJ1dGlvbiBQZXJpb2QgaXMgMzDigJkwMDDigJkwMDAsIHRoZW4gaGUgd2lsbCBnZXQKICAgICAgICAgKiAzNDcuMjIgU1RBUiA9IDEyNeKAmTAwMOKAmTAwMCBTVEFSICogMTAwIENOWSAvIDMw4oCZMDAw4oCZMDAwIENOWSArIDbigJkwMDDigJkwMDAgQ05ZLgogICAgICAgICovCgogICAgICAgIGlmIChjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGNyb3dkc2FsZVB1cmNoYXNlVmFsdWUgPSBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdOwogICAgICAgICAgICBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdID0gMDsKCiAgICAgICAgICAgIHVpbnQyNTYgdG9rZW5Db3VudCA9CiAgICAgICAgICAgICAgICBTYWZlTWF0aC5tdWwoY3Jvd2RzYWxlVG9rZW5BbW91bnQsIGNyb3dkc2FsZVB1cmNoYXNlVmFsdWUpIC8KICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50T2ZQdXJjaGFzZXNJbkNueTsKCiAgICAgICAgICAgIG51bU9mUHVyY2hhc2VkVG9rZW5zT25Dc0J5W21zZy5zZW5kZXJdID0KICAgICAgICAgICAgICAgIFNhZmVNYXRoLmFkZChudW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeVttc2cuc2VuZGVyXSwgdG9rZW5Db3VudCk7CiAgICAgICAgICAgIGFzc2VydChzdGFyYmFzZVRva2VuLmFsbG9jYXRlVG9Dcm93ZHNhbGVQdXJjaGFzZXIobXNnLnNlbmRlciwgdG9rZW5Db3VudCkpOwogICAgICAgICAgICBudW1PZkRlbGl2ZXJlZENyb3dkc2FsZVB1cmNoYXNlcysrOwogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICAgKiDigJxWYWx1ZeKAnSByZWZlcnMgdG8gdGhlIGNvbnRyaWJ1dGlvbiBvZiB0aGUgVXNlcjoKICAgICAgICAgKiB7ZWFybHlwdXJjaGFzZXJfdG9rZW5fYW1vdW50fSA9CiAgICAgICAgICoge2Vhcmx5cHVyY2hhc2VyX3Rva2VuX2Ftb3VudH0gKiAoe2Vhcmx5cHVyY2hhc2VfdmFsdWV9IC8ge3RvdGFsX2Vhcmx5cHVyY2hhc2VfdmFsdWV9KQogICAgICAgICAqICArIHtjcm93ZHNhbGVfdG9rZW5fYW1vdW50fSAqICh7ZWFybHlwdXJjaGFzZV92YWx1ZX0gLyB7ZWFybHlwdXJjaGFzZV92YWx1ZX0gKyB7Y3Jvd2RzYWxlX3ZhbHVlfSkuCiAgICAgICAgICoKICAgICAgICAgKiBFeGFtcGxlOiBJZiBhbiBFYXJseSBQdXJjaGFzZXIgY29udHJpYnV0ZXMgMTAwIENOWSAoaW5jbHVkaW5nIEJvbnVzIG9mIDIwJSkgYW5kIHRoZQogICAgICAgICAqIHRvdGFsIGFtb3VudCBvZiBlYXJseSBwdXJjaGFzZXMgYW1vdW50cyB0byA24oCZMDAw4oCZMDAwIENOWSBhbmQgdGhlIHRvdGFsIGFtb3VudCByYWlzZWQKICAgICAgICAgKiBkdXJpbmcgdGhlIENvbnRyaWJ1dGlvbiBQZXJpb2QgaXMgMzDigJkwMDDigJkwMDAgQ05ZLCB0aGVuIGhlIHdpbGwgZ2V0IDExODAuNTUgU1RBUiA9CiAgICAgICAgICogNTDigJkwMDDigJkwMDAgU1RBUiAqIDEwMCBDTlkgLyA24oCZMDAw4oCZMDAwIENOWSArIDEyNeKAmTAwMOKAmTAwMCBTVEFSICogMTAwIENOWSAvCiAgICAgICAgICogMzDigJkwMDDigJkwMDAgQ05ZICsgNuKAmTAwMOKAmTAwMCBDTlkKICAgICAgICAgKi8KCiAgICAgICAgaWYgKGVhcmx5UHVyY2hhc2VkQW1vdW50QnlbbXNnLnNlbmRlcl0gPiAwKSB7ICAvLyBza2lwIGlmIGlzIG5vdCBhbiBlYXJseSBwdXJjaGFzZXIKICAgICAgICAgICAgdWludDI1NiBlYXJseVB1cmNoYXNlclB1cmNoYXNlVmFsdWUgPSBlYXJseVB1cmNoYXNlZEFtb3VudEJ5W21zZy5zZW5kZXJdOwogICAgICAgICAgICBlYXJseVB1cmNoYXNlZEFtb3VudEJ5W21zZy5zZW5kZXJdID0gMDsKCiAgICAgICAgICAgIHVpbnQyNTYgZXBUb2tlbkNhbGN1bGF0aW9uRnJvbUVQVG9rZW5BbW91bnQgPSBTYWZlTWF0aC5tdWwoZWFybHlQdXJjaGFzZVRva2VuQW1vdW50LCBlYXJseVB1cmNoYXNlclB1cmNoYXNlVmFsdWUpIC8gdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzSW5Dbnk7CgogICAgICAgICAgICB1aW50MjU2IGVwVG9rZW5DYWxjdWxhdGlvbkZyb21Dcm93ZHNhbGVUb2tlbkFtb3VudCA9IFNhZmVNYXRoLm11bChjcm93ZHNhbGVUb2tlbkFtb3VudCwgZWFybHlQdXJjaGFzZXJQdXJjaGFzZVZhbHVlKSAvIHRvdGFsQW1vdW50T2ZQdXJjaGFzZXNJbkNueTsKCiAgICAgICAgICAgIHVpbnQyNTYgZXBUb2tlbkNvdW50ID0gU2FmZU1hdGguYWRkKGVwVG9rZW5DYWxjdWxhdGlvbkZyb21FUFRva2VuQW1vdW50LCBlcFRva2VuQ2FsY3VsYXRpb25Gcm9tQ3Jvd2RzYWxlVG9rZW5BbW91bnQpOwoKICAgICAgICAgICAgbnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkVwQnlbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5hZGQobnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkVwQnlbbXNnLnNlbmRlcl0sIGVwVG9rZW5Db3VudCk7CiAgICAgICAgICAgIGFzc2VydChzdGFyYmFzZVRva2VuLmFsbG9jYXRlVG9Dcm93ZHNhbGVQdXJjaGFzZXIobXNnLnNlbmRlciwgZXBUb2tlbkNvdW50KSk7CiAgICAgICAgICAgIG51bU9mRGVsaXZlcmVkRWFybHlQdXJjaGFzZXMrKzsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBMb2FkIGVhcmx5IHB1cmNoYXNlcyBmcm9tIHRoZSBjb250cmFjdCBrZWVwcyB0cmFjayBvZiB0aGVtCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvYWRFYXJseVB1cmNoYXNlcygpIGV4dGVybmFsIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKGVhcmx5UHVyY2hhc2VzTG9hZGVkKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAgLy8gYWxsIEVQcyBoYXZlIGFscmVhZHkgYmVlbiBsb2FkZWQKICAgICAgICB9CgogICAgICAgIHVpbnQyNTYgbnVtT2ZPcmlnRXAgPSBzdGFyYmFzZUVwQW1lbmRtZW50CiAgICAgICAgICAgIC5zdGFyYmFzZUVhcmx5UHVyY2hhc2UoKQogICAgICAgICAgICAubnVtYmVyT2ZFYXJseVB1cmNoYXNlcygpOwoKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IG51bU9mTG9hZGVkRWFybHlQdXJjaGFzZXM7IGkgPCBudW1PZk9yaWdFcCAmJiBtc2cuZ2FzID4gMjAwMDAwOyBpKyspIHsKICAgICAgICAgICAgaWYgKHN0YXJiYXNlRXBBbWVuZG1lbnQuaXNJbnZhbGlkRWFybHlQdXJjaGFzZShpKSkgewogICAgICAgICAgICAgICAgbnVtT2ZMb2FkZWRFYXJseVB1cmNoYXNlcyA9IFNhZmVNYXRoLmFkZChudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzLCAxKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciAocHVyY2hhc2VyLCBhbW91bnQsKSA9CiAgICAgICAgICAgICAgICBzdGFyYmFzZUVwQW1lbmRtZW50LmlzQW1lbmRlZEVhcmx5UHVyY2hhc2UoaSkKICAgICAgICAgICAgICAgID8gc3RhcmJhc2VFcEFtZW5kbWVudC5hbWVuZGVkRWFybHlQdXJjaGFzZXMoaSkKICAgICAgICAgICAgICAgIDogc3RhcmJhc2VFcEFtZW5kbWVudC5lYXJseVB1cmNoYXNlcyhpKTsKICAgICAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChlYXJseVB1cmNoYXNlZEFtb3VudEJ5W3B1cmNoYXNlcl0gPT0gMCkgewogICAgICAgICAgICAgICAgICAgIGVhcmx5UHVyY2hhc2Vycy5wdXNoKHB1cmNoYXNlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBlYWNoIGVhcmx5IHB1cmNoYXNlciByZWNlaXZlcyAyMCUgYm9udXMKICAgICAgICAgICAgICAgIHVpbnQyNTYgYm9udXMgPSBTYWZlTWF0aC5tdWwoYW1vdW50LCAyMCkgLyAxMDA7CiAgICAgICAgICAgICAgICB1aW50MjU2IGFtb3VudFdpdGhCb251cyA9IFNhZmVNYXRoLmFkZChhbW91bnQsIGJvbnVzKTsKCiAgICAgICAgICAgICAgICBlYXJseVB1cmNoYXNlZEFtb3VudEJ5W3B1cmNoYXNlcl0gPSBTYWZlTWF0aC5hZGQoZWFybHlQdXJjaGFzZWRBbW91bnRCeVtwdXJjaGFzZXJdLCBhbW91bnRXaXRoQm9udXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzID0gU2FmZU1hdGguYWRkKG51bU9mTG9hZGVkRWFybHlQdXJjaGFzZXMsIDEpOwogICAgICAgIH0KCiAgICAgICAgYXNzZXJ0KG51bU9mTG9hZGVkRWFybHlQdXJjaGFzZXMgPD0gbnVtT2ZPcmlnRXApOwogICAgICAgIGlmIChudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzID09IG51bU9mT3JpZ0VwKSB7CiAgICAgICAgICAgIGVhcmx5UHVyY2hhc2VzTG9hZGVkID0gdHJ1ZTsgICAgLy8gZW5hYmxlIHRoZSBmbGFnCiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICAqIEBkZXYgU2V0IHF1YWxpZmllZCBjcm93ZHNhbGUgcGFydG5lciBpLmUuIEJpdGNvaW4gU3Vpc3NlIGFkZHJlc3MKICAgICAgKiBAcGFyYW0gX3F1YWxpZmllZFBhcnRuZXIgQWRkcmVzcyBvZiB0aGUgcXVhbGlmaWVkIHBhcnRuZXIgdGhhdCBjYW4gcHVyY2hhc2UgZHVyaW5nIGNyb3dkc2FsZQogICAgICAqIEBwYXJhbSBfYW1vdW50Q2FwIEV0aGVyIHZhbHVlIHdoaWNoIHBhcnRuZXIgaXMgYWJsZSB0byBjb250cmlidXRlCiAgICAgICogQHBhcmFtIF9jb21taXNzaW9uRmVlUGVyY2VudGFnZSBJbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyB0aGUgZmVlIHRvIHBheSBxdWFsaWZpZWQgcGFydG5lciA1IGlzIDUlCiAgICAgICovCiAgICBmdW5jdGlvbiBzZXRRdWFsaWZpZWRQYXJ0bmVyKGFkZHJlc3MgX3F1YWxpZmllZFBhcnRuZXIsIHVpbnQyNTYgX2Ftb3VudENhcCwgdWludDI1NiBfY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQoIXF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmJvbmFGaWRlID0gdHJ1ZTsKICAgICAgICBxdWFsaWZpZWRQYXJ0bmVyc1tfcXVhbGlmaWVkUGFydG5lcl0uYW1vdW50Q2FwID0gX2Ftb3VudENhcDsKICAgICAgICBxdWFsaWZpZWRQYXJ0bmVyc1tfcXVhbGlmaWVkUGFydG5lcl0uY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UgPSBfY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2U7CiAgICAgICAgUXVhbGlmaWVkUGFydG5lckFkZHJlc3MoX3F1YWxpZmllZFBhcnRuZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZW1vdmUgYWRkcmVzcyBmcm9tIHF1YWxpZmllZCBwYXJ0bmVycyBsaXN0LgogICAgICogQHBhcmFtIF9xdWFsaWZpZWRQYXJ0bmVyIEFkZHJlc3MgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LgogICAgICovCiAgICBmdW5jdGlvbiB1bmxpc3RRdWFsaWZpZWRQYXJ0bmVyKGFkZHJlc3MgX3F1YWxpZmllZFBhcnRuZXIpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmJvbmFGaWRlID0gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFVwZGF0ZSB3aGl0ZWxpc3RlZCBhZGRyZXNzIGFtb3VudCBhbGxvd2VkIHRvIHJhaXNlIGR1cmluZyB0aGUgcHJlc2FsZS4KICAgICAqIEBwYXJhbSBfcXVhbGlmaWVkUGFydG5lciBRdWFsaWZpZWQgUGFydG5lciBhZGRyZXNzIHRvIGJlIHVwZGF0ZWQuCiAgICAgKiBAcGFyYW0gX2Ftb3VudENhcCBBbW91bnQgdGhhdCB0aGUgYWRkcmVzcyBpcyBhYmxlIHRvIHJhaXNlIGR1cmluZyB0aGUgcHJlc2FsZS4KICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlUXVhbGlmaWVkUGFydG5lckNhcEFtb3VudChhZGRyZXNzIF9xdWFsaWZpZWRQYXJ0bmVyLCB1aW50MjU2IF9hbW91bnRDYXApIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmFtb3VudENhcCA9IF9hbW91bnRDYXA7CiAgICB9CgogICAgLyoqCiAgICAgKiBQdWJsaWMgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBib29sZWFuIGZvciB3aGV0aGVyIGNyb3dkc2FsZSBoYXMgZW5kZWQKICAgICAqLwogICAgZnVuY3Rpb24gaXNFbmRlZCgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChlbmRlZEF0ID4gMCAmJiBlbmRlZEF0IDw9IG5vdyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHB1cmNoYXNlcyB0byBkYXRlLgogICAgICovCiAgICBmdW5jdGlvbiBudW1PZlB1cmNoYXNlcygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGNyb3dkc2FsZVB1cmNoYXNlcy5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENhbGN1bGF0ZXMgdG90YWwgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQgaW5jbHVkZXMgYm9udXMgdG9rZW5zLgogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYW1vdW50KSB7CiAgICAgICAgZm9yICh1aW50MjU2IGk7IGkgPCBjcm93ZHNhbGVQdXJjaGFzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYW1vdW50ID0gU2FmZU1hdGguYWRkKGFtb3VudCwgY3Jvd2RzYWxlUHVyY2hhc2VzW2ldLmFtb3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDYWxjdWxhdGVzIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkIHdpdGhvdXQgYm9udXMgY29udmVyc2lvbi4KICAgICAqLwogICAgZnVuY3Rpb24gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGFtb3VudCkgewogICAgICAgIGZvciAodWludDI1NiBpOyBpIDwgY3Jvd2RzYWxlUHVyY2hhc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFtb3VudCA9IFNhZmVNYXRoLmFkZChhbW91bnQsIGNyb3dkc2FsZVB1cmNoYXNlc1tpXS5yYXdBbW91bnQpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0b3RhbCByYWlzZWQgYW1vdW50IGluIENOWSAoaW5jbHVkZXMgRVApIGFuZCBib251c2VzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBTYWZlTWF0aC5hZGQodG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzKCksIHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXMoKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgdG90YWwgYW1vdW50IG9mIGVhcmx5IHB1cmNoYXNlcyBpbiBDTlkKICAgICAqLwogICAgZnVuY3Rpb24gdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzKCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDI1NikgewogICAgICAgcmV0dXJuIHN0YXJiYXNlRXBBbWVuZG1lbnQudG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyBxdWFsaWZpZWQgY3Jvd2RzYWxlIHBhcnRuZXIgdG8gcHVyY2hhc2UgU3RhciBUb2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VBc1F1YWxpZmllZFBhcnRuZXIoKQogICAgICAgIHBheWFibGUKICAgICAgICBwdWJsaWMKICAgICAgICByYXRlSXNTZXQoY255RXRoUmF0ZSkKICAgICAgICBvbmx5UXVhbGlmaWVkUGFydG5lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICBxdWFsaWZpZWRQYXJ0bmVyc1ttc2cuc2VuZGVyXS5hbW91bnRSYWlzZWQgPSBTYWZlTWF0aC5hZGQobXNnLnZhbHVlLCBxdWFsaWZpZWRQYXJ0bmVyc1ttc2cuc2VuZGVyXS5hbW91bnRSYWlzZWQpOwoKICAgICAgICBhc3NlcnQocXVhbGlmaWVkUGFydG5lcnNbbXNnLnNlbmRlcl0uYW1vdW50UmFpc2VkIDw9IHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmFtb3VudENhcCk7CgogICAgICAgIHVpbnQyNTYgcmF3QW1vdW50ID0gU2FmZU1hdGgubXVsKG1zZy52YWx1ZSwgY255RXRoUmF0ZSkgLyAxZTE4OwogICAgICAgIHJlY29yZFB1cmNoYXNlKG1zZy5zZW5kZXIsIHJhd0Ftb3VudCwgbm93KTsKCiAgICAgICAgaWYgKHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmNvbW1pc3Npb25GZWVQZXJjZW50YWdlID4gMCkgewogICAgICAgICAgICBzZW5kUXVhbGlmaWVkUGFydG5lckNvbW1pc3Npb25GZWUobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdXNlciB0byBwdXJjaGFzZSBTVEFSIHRva2VucyB3aXRoIEV0aGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIHB1cmNoYXNlV2l0aEV0aCgpCiAgICAgICAgcGF5YWJsZQogICAgICAgIHB1YmxpYwogICAgICAgIG1pbkludmVzdG1lbnQKICAgICAgICB3aGVuTm90RW5kZWQKICAgICAgICByYXRlSXNTZXQoY255RXRoUmF0ZSkKICAgICAgICBvbmx5UXVhbGlmaWVkUGFydG5lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZShwdXJjaGFzZVN0YXJ0QmxvY2sgPiAwICYmIGJsb2NrLm51bWJlciA+PSBwdXJjaGFzZVN0YXJ0QmxvY2spOwoKICAgICAgICBpZiAoc3RhcnREYXRlID09IDApIHsKICAgICAgICAgICAgc3RhcnRDcm93ZHNhbGUoYmxvY2sudGltZXN0YW1wKTsKICAgICAgICB9CgogICAgICAgIHVpbnQyNTYgcmF3QW1vdW50ID0gU2FmZU1hdGgubXVsKG1zZy52YWx1ZSwgY255RXRoUmF0ZSkgLyAxZTE4OwogICAgICAgIHJlY29yZFB1cmNoYXNlKG1zZy5zZW5kZXIsIHJhd0Ftb3VudCwgbm93KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBJbml0aWFsaXplcyBTdGFyYmFzZSBjcm93ZHNhbGUKICAgICAqLwogICAgZnVuY3Rpb24gc3RhcnRDcm93ZHNhbGUodWludDI1NiB0aW1lc3RhbXApIGludGVybmFsIHsKICAgICAgICBzdGFydERhdGUgPSB0aW1lc3RhbXA7CiAgICAgICAgdWludDI1NiBwcmVzYWxlQW1vdW50ID0gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cygpOwogICAgICAgIGlmIChtYXhDcm93ZHNhbGVDYXAgPiBwcmVzYWxlQW1vdW50KSB7CiAgICAgICAgICAgIHVpbnQyNTYgbWFpblNhbGVDYXAgPSBtYXhDcm93ZHNhbGVDYXAuc3ViKHByZXNhbGVBbW91bnQpOwogICAgICAgICAgICB1aW50MjU2IHR3ZW50eVBlcmNlbnRPZkNyb3dkc2FsZVB1cmNoYXNlID0gbWFpblNhbGVDYXAubXVsKDIwKS5kaXYoMTAwKTsKCiAgICAgICAgICAgIC8vIHNldCB0b2tlbiBib251cyBtaWxlc3RvbmVzIGluIGNueSB0b3RhbCBjcm93ZHNhbGUgcHVyY2hhc2UKICAgICAgICAgICAgZmlyc3RCb251c0VuZHMgPSAgdHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2U7CiAgICAgICAgICAgIHNlY29uZEJvbnVzRW5kcyA9IGZpcnN0Qm9udXNFbmRzLmFkZCh0d2VudHlQZXJjZW50T2ZDcm93ZHNhbGVQdXJjaGFzZSk7CiAgICAgICAgICAgIHRoaXJkQm9udXNFbmRzID0gIHNlY29uZEJvbnVzRW5kcy5hZGQodHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2UpOwogICAgICAgICAgICBmb3VydGhCb251c0VuZHMgPSB0aGlyZEJvbnVzRW5kcy5hZGQodHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2UpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWJzdHJhY3QgcmVjb3JkIG9mIGEgcHVyY2hhc2UgdG8gVG9rZW5zCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIEFkZHJlc3Mgb2YgdGhlIGJ1eWVyCiAgICAgKiBAcGFyYW0gcmF3QW1vdW50IEFtb3VudCBpbiBDTlkgYXMgcGVyIHRoZSBDTlkvRVRIIHJhdGUgdXNlZAogICAgICogQHBhcmFtIHRpbWVzdGFtcCBUaW1lc3RhbXAgYXQgdGhlIHB1cmNoYXNlIG1hZGUKICAgICAqLwogICAgZnVuY3Rpb24gcmVjb3JkUHVyY2hhc2UoCiAgICAgICAgYWRkcmVzcyBwdXJjaGFzZXIsCiAgICAgICAgdWludDI1NiByYXdBbW91bnQsCiAgICAgICAgdWludDI1NiB0aW1lc3RhbXAKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnModWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgYW1vdW50ID0gcmF3QW1vdW50OyAvLyBhbW91bnQgdG8gY2hlY2sgcmVhY2ggb2YgbWF4IGNhcC4gaXQgZG9lcyBub3QgY2FyZSBmb3IgYm9udXMgdG9rZW5zIGhlcmUKCiAgICAgICAgLy8gcHJlc2FsZSB0cmFuc2ZlcnMgd2hpY2ggb2NjdXJzIGJlZm9yZSB0aGUgY3Jvd2RzYWxlIGlnbm9yZXMgdGhlIGNyb3dkc2FsZSBoYXJkIGNhcAogICAgICAgIGlmIChibG9jay5udW1iZXIgPj0gcHVyY2hhc2VTdGFydEJsb2NrKSB7CiAgICAgICAgICAgIHJlcXVpcmUodG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cygpIDwgbWF4Q3Jvd2RzYWxlQ2FwKTsgICAvLyBjaGVjayBpZiB0aGUgYW1vdW50IGhhcyBhbHJlYWR5IHJlYWNoZWQgdGhlIGNhcAoKICAgICAgICAgICAgdWludDI1NiBjcm93ZHNhbGVUb3RhbEFtb3VudEFmdGVyUHVyY2hhc2UgPQogICAgICAgICAgICAgICAgU2FmZU1hdGguYWRkKHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXNXaXRob3V0Qm9udXMoKSwgYW1vdW50KTsKCiAgICAgICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgcHVyY2hhc2UgZ29lcyBvdmVyIHRoZSBjYXAgYW5kIHNlbmQgdGhlIGRpZmZlcmVuY2UgYmFjayB0byB0aGUgcHVyY2hhc2VyLgogICAgICAgICAgICBpZiAoY3Jvd2RzYWxlVG90YWxBbW91bnRBZnRlclB1cmNoYXNlID4gbWF4Q3Jvd2RzYWxlQ2FwKSB7CiAgICAgICAgICAgICAgdWludDI1NiBkaWZmZXJlbmNlID0gU2FmZU1hdGguc3ViKGNyb3dkc2FsZVRvdGFsQW1vdW50QWZ0ZXJQdXJjaGFzZSwgbWF4Q3Jvd2RzYWxlQ2FwKTsKICAgICAgICAgICAgICB1aW50MjU2IGV0aFZhbHVlVG9SZXR1cm4gPSBTYWZlTWF0aC5tdWwoZGlmZmVyZW5jZSwgMWUxOCkgLyBjbnlFdGhSYXRlOwogICAgICAgICAgICAgIHB1cmNoYXNlci50cmFuc2ZlcihldGhWYWx1ZVRvUmV0dXJuKTsKICAgICAgICAgICAgICBhbW91bnQgPSBTYWZlTWF0aC5zdWIoYW1vdW50LCBkaWZmZXJlbmNlKTsKICAgICAgICAgICAgICByYXdBbW91bnQgPSBhbW91bnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgICAgICBhbW91bnQgPSBnZXRCb251c0Ftb3VudENhbGN1bGF0aW9uKGFtb3VudCk7IC8vIGF0IHRoaXMgcG9pbnQgYW1vdW50IGJvbnVzIGlzIGNhbGN1bGF0ZWQKCiAgICAgICAgQ3Jvd2RzYWxlUHVyY2hhc2UgbWVtb3J5IHB1cmNoYXNlID0gQ3Jvd2RzYWxlUHVyY2hhc2UocHVyY2hhc2VyLCBhbW91bnQsIHJhd0Ftb3VudCwgdGltZXN0YW1wKTsKICAgICAgICBjcm93ZHNhbGVQdXJjaGFzZXMucHVzaChwdXJjaGFzZSk7CiAgICAgICAgU3RhcmJhc2VQdXJjaGFzZWRXaXRoRXRoKG1zZy5zZW5kZXIsIGFtb3VudCwgcmF3QW1vdW50LCBjbnlFdGhSYXRlKTsKICAgICAgICBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W3B1cmNoYXNlcl0gPSBTYWZlTWF0aC5hZGQoY3Jvd2RzYWxlUHVyY2hhc2VBbW91bnRCeVtwdXJjaGFzZXJdLCBhbW91bnQpOwogICAgICAgIHJldHVybiBhbW91bnQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENhbGN1bGF0ZXMgYW1vdW50IHdpdGggYm9udXMgZm9yIGJvbnVzIG1pbGVzdG9uZXMKICAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlQm9udXMKICAgICAgICAoCiAgICAgICAgICAgIEJvbnVzTWlsZXN0b25lcyBuZXh0TWlsZXN0b25lLAogICAgICAgICAgICB1aW50MjU2IGFtb3VudCwKICAgICAgICAgICAgdWludDI1NiBib251c1JhbmdlLAogICAgICAgICAgICB1aW50MjU2IGJvbnVzVGllciwKICAgICAgICAgICAgdWludDI1NiByZXN1bHRzCiAgICAgICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAodWludDI1NiByZXN1bHQsIHVpbnQyNTYgbmV3QW1vdW50KQogICAgewogICAgICAgIHVpbnQyNTYgYm9udXNDYWxjOwoKICAgICAgICBpZiAoYW1vdW50IDw9IGJvbnVzUmFuZ2UpIHsKICAgICAgICAgICAgYm9udXNDYWxjID0gYW1vdW50Lm11bChib251c1RpZXIpLmRpdigxMDApOwoKICAgICAgICAgICAgaWYgKGFtb3VudC5hZGQodG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cygpKSA+PSBib251c1JhbmdlKQogICAgICAgICAgICAgICAgYm9udXNNaWxlc3RvbmVzID0gbmV4dE1pbGVzdG9uZTsKCiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMuYWRkKGFtb3VudCkuYWRkKGJvbnVzQ2FsYyk7CiAgICAgICAgICAgIG5ld0Ftb3VudCA9IDA7CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJvbnVzQ2FsYyA9IGJvbnVzUmFuZ2UubXVsKGJvbnVzVGllcikuZGl2KDEwMCk7CiAgICAgICAgICAgIGJvbnVzTWlsZXN0b25lcyA9IG5leHRNaWxlc3RvbmU7CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMuYWRkKGJvbnVzUmFuZ2UpLmFkZChib251c0NhbGMpOwogICAgICAgICAgICBuZXdBbW91bnQgPSBhbW91bnQuc3ViKGJvbnVzUmFuZ2UpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRmV0Y2hzIEJvbnVzIHRpZXIgcGVyY2VudGFnZSBwZXIgYm9udXMgbWlsZXN0b25lcwogICAgICovCiAgICBmdW5jdGlvbiBnZXRCb251c0Ftb3VudENhbGN1bGF0aW9uKHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGJsb2NrLm51bWJlciA8IHB1cmNoYXNlU3RhcnRCbG9jaykgewogICAgICAgICAgICB1aW50MjU2IGJvbnVzRnJvbUFtb3VudCA9IGFtb3VudC5tdWwoMzApLmRpdigxMDApOyAvLyBwcmVzYWxlIGhhcyAzMCUgYm9udXMKICAgICAgICAgICAgcmV0dXJuIGFtb3VudC5hZGQoYm9udXNGcm9tQW1vdW50KTsKICAgICAgICB9CgogICAgICAgIC8vIHJhbmdlIG9mIGVhY2ggYm9udXMgbWlsZXN0b25lcwogICAgICAgIHVpbnQyNTYgZmlyc3RCb251c1JhbmdlID0gZmlyc3RCb251c0VuZHM7CiAgICAgICAgdWludDI1NiBzZWNvbmRCb251c1JhbmdlID0gc2Vjb25kQm9udXNFbmRzLnN1YihmaXJzdEJvbnVzRW5kcyk7CiAgICAgICAgdWludDI1NiB0aGlyZEJvbnVzUmFuZ2UgPSB0aGlyZEJvbnVzRW5kcy5zdWIoc2Vjb25kQm9udXNFbmRzKTsKICAgICAgICB1aW50MjU2IGZvdXJ0aEJvbnVzUmFuZ2UgPSBmb3VydGhCb251c0VuZHMuc3ViKHRoaXJkQm9udXNFbmRzKTsKICAgICAgICB1aW50MjU2IHJlc3VsdDsKCiAgICAgICAgaWYgKGJvbnVzTWlsZXN0b25lcyA9PSBCb251c01pbGVzdG9uZXMuRmlyc3QpCiAgICAgICAgICAgIChyZXN1bHQsIGFtb3VudCkgPSBjYWxjdWxhdGVCb251cyhCb251c01pbGVzdG9uZXMuU2Vjb25kLCBhbW91bnQsIGZpcnN0Qm9udXNSYW5nZSwgMjAsIHJlc3VsdCk7CgogICAgICAgIGlmIChib251c01pbGVzdG9uZXMgPT0gQm9udXNNaWxlc3RvbmVzLlNlY29uZCkKICAgICAgICAgICAgKHJlc3VsdCwgYW1vdW50KSA9IGNhbGN1bGF0ZUJvbnVzKEJvbnVzTWlsZXN0b25lcy5UaGlyZCwgYW1vdW50LCBzZWNvbmRCb251c1JhbmdlLCAxNSwgcmVzdWx0KTsKCiAgICAgICAgaWYgKGJvbnVzTWlsZXN0b25lcyA9PSBCb251c01pbGVzdG9uZXMuVGhpcmQpCiAgICAgICAgICAgIChyZXN1bHQsIGFtb3VudCkgPSBjYWxjdWxhdGVCb251cyhCb251c01pbGVzdG9uZXMuRm91cnRoLCBhbW91bnQsIHRoaXJkQm9udXNSYW5nZSwgMTAsIHJlc3VsdCk7CgogICAgICAgIGlmIChib251c01pbGVzdG9uZXMgPT0gQm9udXNNaWxlc3RvbmVzLkZvdXJ0aCkKICAgICAgICAgICAgKHJlc3VsdCwgYW1vdW50KSA9IGNhbGN1bGF0ZUJvbnVzKEJvbnVzTWlsZXN0b25lcy5GaWZ0aCwgYW1vdW50LCBmb3VydGhCb251c1JhbmdlLCA1LCByZXN1bHQpOwoKICAgICAgICByZXR1cm4gcmVzdWx0LmFkZChhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGZXRjaHMgQm9udXMgdGllciBwZXJjZW50YWdlIHBlciBib251cyBtaWxlc3RvbmVzCiAgICAgKiBAZGV2IHF1YWxpZmllZFBhcnRuZXIgQWRkcmVzcyBvZiBwYXJ0bmVycyB0aGF0IHBhcnRpY2lwYXRlZCBpbiBwcmUgc2FsZQogICAgICogQGRldiBhbW91bnRTZW50IFZhbHVlIHNlbnQgYnkgcXVhbGlmaWVkIHBhcnRuZXIKICAgICAqLwogICAgZnVuY3Rpb24gc2VuZFF1YWxpZmllZFBhcnRuZXJDb21taXNzaW9uRmVlKGFkZHJlc3MgcXVhbGlmaWVkUGFydG5lciwgdWludDI1NiBhbW91bnRTZW50KSBpbnRlcm5hbCB7CiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIGNvbW1pc3Npb24gZmVlIHRvIHNlbmQgdG8gcXVhbGlmaWVkIHBhcnRuZXIKICAgICAgICB1aW50MjU2IGNvbW1pc3Npb25GZWVQZXJjZW50YWdlQ2FsY3VsYXRpb25BbW91bnQgPSBTYWZlTWF0aC5tdWwoYW1vdW50U2VudCwgcXVhbGlmaWVkUGFydG5lcnNbcXVhbGlmaWVkUGFydG5lcl0uY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UpIC8gMTAwOwoKICAgICAgICAvLyBzZW5kIGNvbW1pc3Npb24gZmVlIGFtb3VudAogICAgICAgIHF1YWxpZmllZFBhcnRuZXIudHJhbnNmZXIoY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2VDYWxjdWxhdGlvbkFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IHJlZGlyZWN0VG9QdXJjaGFzZSBSZWRpcmVjdCB0byBhZGVxdWF0ZSBwdXJjaGFzZSBmdW5jdGlvbiB3aXRoaW4gdGhlIHNtYXJ0IGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZGlyZWN0VG9QdXJjaGFzZSgpIGludGVybmFsIHsKICAgICAgICBpZiAoYmxvY2subnVtYmVyIDwgcHVyY2hhc2VTdGFydEJsb2NrKSB7CiAgICAgICAgICAgIHB1cmNoYXNlQXNRdWFsaWZpZWRQYXJ0bmVyKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHVyY2hhc2VXaXRoRXRoKCk7CiAgICAgICAgfQogICAgfQp9'.
	

]
