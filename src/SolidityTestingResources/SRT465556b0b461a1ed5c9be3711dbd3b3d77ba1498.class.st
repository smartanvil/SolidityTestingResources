Class {
	#name : #SRT465556b0b461a1ed5c9be3711dbd3b3d77ba1498,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT465556b0b461a1ed5c9be3711dbd3b3d77ba1498 >> base64 [
	^ ''.
	

]
