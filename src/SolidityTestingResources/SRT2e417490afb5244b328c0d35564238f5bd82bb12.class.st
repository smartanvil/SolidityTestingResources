Class {
	#name : #SRT2e417490afb5244b328c0d35564238f5bd82bb12,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e417490afb5244b328c0d35564238f5bd82bb12 >> base64 [
	^ ''.
	

]
