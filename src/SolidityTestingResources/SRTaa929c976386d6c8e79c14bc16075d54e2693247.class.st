Class {
	#name : #SRTaa929c976386d6c8e79c14bc16075d54e2693247,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa929c976386d6c8e79c14bc16075d54e2693247 >> base64 [
	^ ''.
	

]
