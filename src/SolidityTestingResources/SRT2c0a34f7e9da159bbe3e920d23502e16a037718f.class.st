Class {
	#name : #SRT2c0a34f7e9da159bbe3e920d23502e16a037718f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c0a34f7e9da159bbe3e920d23502e16a037718f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBBcmd1bWVudHNDaGVja2VyIHsKCiAgICAvLy8gQGRldiBjaGVjayB3aGljaCBwcmV2ZW50cyBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgcGF5bG9hZFNpemVJcyh1aW50IHNpemUpIHsKICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0IC8qIGZ1bmN0aW9uIHNlbGVjdG9yICovKTsKICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgY2hlY2sgdGhhdCBhZGRyZXNzIGlzIHZhbGlkCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBhZGRyKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKY29udHJhY3QgUmVlbnRyYW5jeUd1YXJkIHsKCiAgLyoqCiAgICogQGRldiBXZSB1c2UgYSBzaW5nbGUgbG9jayBmb3IgdGhlIHdob2xlIGNvbnRyYWN0LgogICAqLwogIGJvb2wgcHJpdmF0ZSByZW50cmFuY3lfbG9jayA9IGZhbHNlOwoKICAvKioKICAgKiBAZGV2IFByZXZlbnRzIGEgY29udHJhY3QgZnJvbSBjYWxsaW5nIGl0c2VsZiwgZGlyZWN0bHkgb3IgaW5kaXJlY3RseS4KICAgKiBAbm90aWNlIElmIHlvdSBtYXJrIGEgZnVuY3Rpb24gYG5vblJlZW50cmFudGAsIHlvdSBzaG91bGQgYWxzbwogICAqIG1hcmsgaXQgYGV4dGVybmFsYC4gQ2FsbGluZyBvbmUgbm9uUmVlbnRyYW50IGZ1bmN0aW9uIGZyb20KICAgKiBhbm90aGVyIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIHlvdSBjYW4gaW1wbGVtZW50IGEKICAgKiBgcHJpdmF0ZWAgZnVuY3Rpb24gZG9pbmcgdGhlIGFjdHVhbCB3b3JrLCBhbmQgYSBgZXh0ZXJuYWxgCiAgICogd3JhcHBlciBtYXJrZWQgYXMgYG5vblJlZW50cmFudGAuCiAgICovCiAgbW9kaWZpZXIgbm9uUmVlbnRyYW50KCkgewogICAgcmVxdWlyZSghcmVudHJhbmN5X2xvY2spOwogICAgcmVudHJhbmN5X2xvY2sgPSB0cnVlOwogICAgXzsKICAgIHJlbnRyYW5jeV9sb2NrID0gZmFsc2U7CiAgfQoKfQoKY29udHJhY3QgQ3Jvd2RzYWxlQmFzZSBpcyBBcmd1bWVudHNDaGVja2VyLCBSZWVudHJhbmN5R3VhcmQgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CgogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlQmFzZShhZGRyZXNzIG93bmVyODAsIGFkZHJlc3Mgb3duZXIyMCwgc3RyaW5nIHRva2VuX25hbWUsIHN0cmluZyB0b2tlbl9zeW1ib2wpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgbV9mdW5kcyA9IG5ldyBMaWdodEZ1bmRzUmVnaXN0cnkob3duZXI4MCwgb3duZXIyMCk7CiAgICAgICAgbV90b2tlbiA9IG5ldyBUb2tlbkJhc2UodG9rZW5fbmFtZSwgdG9rZW5fc3ltYm9sKTsKCiAgICAgICAgYXNzZXJ0KCEgaGFzSGFyZENhcCgpIHx8IGdldE1heGltdW1GdW5kcygpID49IGdldE1pbmltdW1GdW5kcygpKTsKICAgIH0KCgogICAgLy8gUFVCTElDIGludGVyZmFjZQoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGFzIGEgc2hvcnRjdXQKICAgIGZ1bmN0aW9uKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICB7CiAgICAgICAgcmVxdWlyZSgwID09IG1zZy5kYXRhLmxlbmd0aCk7CiAgICAgICAgYnV5KCk7ICAvLyBvbmx5IGludGVybmFsIGNhbGwgaGVyZSEKICAgIH0KCiAgICAvLy8gQG5vdGljZSBjcm93ZHNhbGUgcGFydGljaXBhdGlvbgogICAgZnVuY3Rpb24gYnV5KCkKICAgICAgICBwdWJsaWMgIC8vIGRvbnQgbWFyayBhcyBleHRlcm5hbCEKICAgICAgICBwYXlhYmxlCiAgICB7CiAgICAgICAgYnV5SW50ZXJuYWwobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgcmVmdW5kCiAgICBmdW5jdGlvbiB3aXRoZHJhd1BheW1lbnRzKCkKICAgICAgICBleHRlcm5hbAogICAgewogICAgICAgIG1fZnVuZHMud2l0aGRyYXdQYXltZW50cyhtc2cuc2VuZGVyKTsKICAgIH0KCgogICAgLy8gSU5URVJOQUwKCiAgICAvLy8gQGRldiBwYXltZW50IHByb2Nlc3NpbmcKICAgIGZ1bmN0aW9uIGJ1eUludGVybmFsKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgcGF5bWVudCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIG5vblJlZW50cmFudAogICAgewogICAgICAgIHJlcXVpcmUocGF5bWVudCA+PSBnZXRNaW5JbnZlc3RtZW50KCkpOwogICAgICAgIGlmIChnZXRDdXJyZW50VGltZSgpID49IGdldEVuZFRpbWUoKSkKICAgICAgICAgICAgZmluaXNoKCk7CgogICAgICAgIGlmIChtX2ZpbmlzaGVkKSB7CiAgICAgICAgICAgIC8vIHNhdmluZyBwcm92aWRlZCBnYXMKICAgICAgICAgICAgaW52ZXN0b3IudHJhbnNmZXIocGF5bWVudCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHVpbnQgc3RhcnRpbmdXZWlDb2xsZWN0ZWQgPSBnZXRXZWlDb2xsZWN0ZWQoKTsKICAgICAgICB1aW50IHN0YXJ0aW5nSW52YXJpYW50ID0gdGhpcy5iYWxhbmNlLmFkZChzdGFydGluZ1dlaUNvbGxlY3RlZCk7CgogICAgICAgIHVpbnQgY2hhbmdlOwogICAgICAgIGlmIChoYXNIYXJkQ2FwKCkpIHsKICAgICAgICAgICAgLy8gcmV0dXJuIG9yIHVwZGF0ZSBwYXltZW50IGlmIG5lZWRlZAogICAgICAgICAgICB1aW50IHBheW1lbnRBbGxvd2VkID0gZ2V0TWF4aW11bUZ1bmRzKCkuc3ViKGdldFdlaUNvbGxlY3RlZCgpKTsKICAgICAgICAgICAgYXNzZXJ0KDAgIT0gcGF5bWVudEFsbG93ZWQpOwoKICAgICAgICAgICAgaWYgKHBheW1lbnRBbGxvd2VkIDwgcGF5bWVudCkgewogICAgICAgICAgICAgICAgY2hhbmdlID0gcGF5bWVudC5zdWIocGF5bWVudEFsbG93ZWQpOwogICAgICAgICAgICAgICAgcGF5bWVudCA9IHBheW1lbnRBbGxvd2VkOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBpc3N1ZSB0b2tlbnMKICAgICAgICByZXF1aXJlKG1fdG9rZW4ubWludChpbnZlc3RvciwgY2FsY3VsYXRlVG9rZW5zKHBheW1lbnQpKSk7CgogICAgICAgIC8vIHJlY29yZCBwYXltZW50CiAgICAgICAgbV9mdW5kcy5pbnZlc3RlZC52YWx1ZShwYXltZW50KShpbnZlc3Rvcik7CgogICAgICAgIGFzc2VydCgoIWhhc0hhcmRDYXAoKSB8fCBnZXRXZWlDb2xsZWN0ZWQoKSA8PSBnZXRNYXhpbXVtRnVuZHMoKSkgJiYgZ2V0V2VpQ29sbGVjdGVkKCkgPiBzdGFydGluZ1dlaUNvbGxlY3RlZCk7CiAgICAgICAgRnVuZFRyYW5zZmVyKGludmVzdG9yLCBwYXltZW50LCB0cnVlKTsKCiAgICAgICAgaWYgKGhhc0hhcmRDYXAoKSAmJiBnZXRXZWlDb2xsZWN0ZWQoKSA9PSBnZXRNYXhpbXVtRnVuZHMoKSkKICAgICAgICAgICAgZmluaXNoKCk7CgogICAgICAgIGlmIChjaGFuZ2UgPiAwKQogICAgICAgICAgICBpbnZlc3Rvci50cmFuc2ZlcihjaGFuZ2UpOwoKICAgICAgICBhc3NlcnQoc3RhcnRpbmdJbnZhcmlhbnQgPT0gdGhpcy5iYWxhbmNlLmFkZChnZXRXZWlDb2xsZWN0ZWQoKSkuYWRkKGNoYW5nZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaCgpIGludGVybmFsIHsKICAgICAgICBpZiAobV9maW5pc2hlZCkKICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICBpZiAoZ2V0V2VpQ29sbGVjdGVkKCkgPj0gZ2V0TWluaW11bUZ1bmRzKCkpIHsKICAgICAgICAgICAgLy8gU3VjY2VzcwogICAgICAgICAgICBtX2Z1bmRzLmNoYW5nZVN0YXRlKExpZ2h0RnVuZHNSZWdpc3RyeS5TdGF0ZS5TVUNDRUVERUQpOwogICAgICAgICAgICBtX3Rva2VuLklDT1N1Y2Nlc3MoKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIC8vIEZhaWx1cmUKICAgICAgICAgICAgbV9mdW5kcy5jaGFuZ2VTdGF0ZShMaWdodEZ1bmRzUmVnaXN0cnkuU3RhdGUuUkVGVU5ESU5HKTsKICAgICAgICB9CgogICAgICAgIG1fZmluaXNoZWQgPSB0cnVlOwogICAgfQoKCiAgICAvLy8gQG5vdGljZSB3aGV0aGVyIHRvIGFwcGx5IGhhcmQgY2FwIGNoZWNrIGxvZ2ljIHZpYSBnZXRNYXhpbXVtRnVuZHMoKSBtZXRob2QKICAgIGZ1bmN0aW9uIGhhc0hhcmRDYXAoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGdldE1heGltdW1GdW5kcygpICE9IDA7CiAgICB9CgogICAgLy8vIEBkZXYgdG8gYmUgb3ZlcnJpZGRlbiBpbiB0ZXN0cwogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG5vdzsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBtYXhpbXVtIGludmVzdG1lbnRzIHRvIGJlIGFjY2VwdGVkIGR1cmluZyB0aGUgc2FsZSAoaW4gd2VpKQogICAgZnVuY3Rpb24gZ2V0TWF4aW11bUZ1bmRzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBldXJvQ2VudHMyd2VpKGdldE1heGltdW1GdW5kc0luRXVyb0NlbnRzKCkpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIG1pbmltdW0gYW1vdW50IG9mIGZ1bmRpbmcgdG8gY29uc2lkZXIgdGhlIHNhbGUgYXMgc3VjY2Vzc2Z1bCAoaW4gd2VpKQogICAgZnVuY3Rpb24gZ2V0TWluaW11bUZ1bmRzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBldXJvQ2VudHMyd2VpKGdldE1pbmltdW1GdW5kc0luRXVyb0NlbnRzKCkpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGVuZCB0aW1lIG9mIHRoZSBzYWxlCiAgICBmdW5jdGlvbiBnZXRFbmRUaW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiAxNTIxMzMxMjAwOwogICAgfQoKICAgIC8vLyBAbm90aWNlIG1pbmltYWwgYW1vdW50IG9mIG9uZSBpbnZlc3RtZW50IChpbiB3ZWkpCiAgICBmdW5jdGlvbiBnZXRNaW5JbnZlc3RtZW50KCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiAxMCBmaW5uZXk7CiAgICB9CgogICAgLy8vIEBkZXYgc21hbGxlc3QgZGl2aXNpYmxlIHRva2VuIHVuaXRzICh0b2tlbiB3ZWkpIGluIG9uZSB0b2tlbgogICAgZnVuY3Rpb24gdG9rZW5XZWlJblRva2VuKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB1aW50KDEwKSAqKiB1aW50KG1fdG9rZW4uZGVjaW1hbHMoKSk7CiAgICB9CgogICAgLy8vIEBkZXYgY2FsY3VsYXRlcyB0b2tlbiBhbW91bnQgZm9yIGdpdmVuIGludmVzdG1lbnQKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2Vucyh1aW50IHBheW1lbnQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gd2VpMmV1cm9DZW50cyhwYXltZW50KS5tdWwodG9rZW5XZWlJblRva2VuKCkpLmRpdih0b2tlblByaWNlSW5FdXJvQ2VudHMoKSk7CiAgICB9CgoKICAgIC8vIGNvbnZlcnNpb25zCgogICAgZnVuY3Rpb24gd2VpMmV1cm9DZW50cyh1aW50IHdlaV8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gd2VpXy5tdWwoZXVyb0NlbnRzSW5PbmVFdGhlcigpKS5kaXYoMSBldGhlcik7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGV1cm9DZW50czJ3ZWkodWludCBldXJvQ2VudHMpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZXVyb0NlbnRzLm11bCgxIGV0aGVyKS5kaXYoZXVyb0NlbnRzSW5PbmVFdGhlcigpKTsKICAgIH0KCgogICAgLy8gc3RhdAoKICAgIC8vLyBAbm90aWNlIGFtb3VudCBvZiBldXJvIGNvbGxlY3RlZAogICAgZnVuY3Rpb24gZ2V0RXVyb0NvbGxlY3RlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHdlaTJldXJvQ2VudHMoZ2V0V2VpQ29sbGVjdGVkKCkpLmRpdigxMDApOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGFtb3VudCBvZiB3ZWkgY29sbGVjdGVkCiAgICBmdW5jdGlvbiBnZXRXZWlDb2xsZWN0ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBtX2Z1bmRzLnRvdGFsSW52ZXN0ZWQoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBhbW91bnQgb2Ygd2VpLXRva2VucyBtaW50ZWQKICAgIGZ1bmN0aW9uIGdldFRva2VuTWludGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbV90b2tlbi50b3RhbFN1cHBseSgpOwogICAgfQoKCiAgICAvLyBTRVRUSU5HUwoKICAgIC8vLyBAbm90aWNlIG1heGltdW0gaW52ZXN0bWVudHMgdG8gYmUgYWNjZXB0ZWQgZHVyaW5nIHRoZSBzYWxlIChpbiBldXJvLWNlbnRzKQogICAgZnVuY3Rpb24gZ2V0TWF4aW11bUZ1bmRzSW5FdXJvQ2VudHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgLy8vIEBub3RpY2UgbWluaW11bSBhbW91bnQgb2YgZnVuZGluZyB0byBjb25zaWRlciB0aGUgc2FsZSBhcyBzdWNjZXNzZnVsIChpbiBldXJvLWNlbnRzKQogICAgZnVuY3Rpb24gZ2V0TWluaW11bUZ1bmRzSW5FdXJvQ2VudHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgLy8vIEBub3RpY2UgZXVyby1jZW50cyBwZXIgMSBldGhlcgogICAgZnVuY3Rpb24gZXVyb0NlbnRzSW5PbmVFdGhlcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQG5vdGljZSBwcmljZSBvZiBvbmUgdG9rZW4gKDFlMTggd2VpLXRva2VucykgaW4gZXVybyBjZW50cwogICAgZnVuY3Rpb24gdG9rZW5QcmljZUluRXVyb0NlbnRzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKCiAgICAvLyBGSUVMRFMKCiAgICAvLy8gQGRldiBjb250cmFjdCByZXNwb25zaWJsZSBmb3IgZnVuZHMgYWNjb3VudGluZwogICAgTGlnaHRGdW5kc1JlZ2lzdHJ5IHB1YmxpYyBtX2Z1bmRzOwoKICAgIC8vLyBAZGV2IGNvbnRyYWN0IHJlc3BvbnNpYmxlIGZvciB0b2tlbiBhY2NvdW50aW5nCiAgICBUb2tlbkJhc2UgcHVibGljIG1fdG9rZW47CgogICAgYm9vbCBtX2ZpbmlzaGVkID0gZmFsc2U7Cn0KCmNvbnRyYWN0IExpZ2h0RnVuZHNSZWdpc3RyeSBpcyBBcmd1bWVudHNDaGVja2VyLCBPd25hYmxlLCBSZWVudHJhbmN5R3VhcmQgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZW51bSBTdGF0ZSB7CiAgICAgICAgLy8gZ2F0aGVyaW5nIGZ1bmRzCiAgICAgICAgR0FUSEVSSU5HLAogICAgICAgIC8vIHJldHVybmluZyBmdW5kcyB0byBpbnZlc3RvcnMKICAgICAgICBSRUZVTkRJTkcsCiAgICAgICAgLy8gZnVuZHMgc2VudCB0byBvd25lcnMKICAgICAgICBTVUNDRUVERUQKICAgIH0KCiAgICBldmVudCBTdGF0ZUNoYW5nZWQoU3RhdGUgX3N0YXRlKTsKICAgIGV2ZW50IEludmVzdGVkKGFkZHJlc3MgaW5kZXhlZCBpbnZlc3RvciwgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgRXRoZXJTZW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBSZWZ1bmRTZW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CgoKICAgIG1vZGlmaWVyIHJlcXVpcmVzU3RhdGUoU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgcmVxdWlyZShtX3N0YXRlID09IF9zdGF0ZSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy8gUFVCTElDIGludGVyZmFjZQoKICAgIGZ1bmN0aW9uIExpZ2h0RnVuZHNSZWdpc3RyeShhZGRyZXNzIG93bmVyODAsIGFkZHJlc3Mgb3duZXIyMCkKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZEFkZHJlc3Mob3duZXI4MCkKICAgICAgICB2YWxpZEFkZHJlc3Mob3duZXIyMCkKICAgIHsKICAgICAgICBtX293bmVyODAgPSBvd25lcjgwOwogICAgICAgIG1fb3duZXIyMCA9IG93bmVyMjA7CiAgICB9CgogICAgLy8vIEBkZXYgcGVyZm9ybXMgb25seSBhbGxvd2VkIHN0YXRlIHRyYW5zaXRpb25zCiAgICBmdW5jdGlvbiBjaGFuZ2VTdGF0ZShTdGF0ZSBfbmV3U3RhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQobV9zdGF0ZSAhPSBfbmV3U3RhdGUpOwoKICAgICAgICBpZiAoU3RhdGUuR0FUSEVSSU5HID09IG1fc3RhdGUpIHsgICBhc3NlcnQoU3RhdGUuUkVGVU5ESU5HID09IF9uZXdTdGF0ZSB8fCBTdGF0ZS5TVUNDRUVERUQgPT0gX25ld1N0YXRlKTsgfQogICAgICAgIGVsc2UgYXNzZXJ0KGZhbHNlKTsKCiAgICAgICAgbV9zdGF0ZSA9IF9uZXdTdGF0ZTsKICAgICAgICBTdGF0ZUNoYW5nZWQobV9zdGF0ZSk7CgogICAgICAgIGlmIChTdGF0ZS5TVUNDRUVERUQgPT0gX25ld1N0YXRlKSB7CiAgICAgICAgICAgIHVpbnQgXzgwcGVyY2VudCA9IHRoaXMuYmFsYW5jZS5tdWwoODApLmRpdigxMDApOwogICAgICAgICAgICBtX293bmVyODAudHJhbnNmZXIoXzgwcGVyY2VudCk7CiAgICAgICAgICAgIEV0aGVyU2VudChtX293bmVyODAsIF84MHBlcmNlbnQpOwoKICAgICAgICAgICAgdWludCBfMjBwZXJjZW50ID0gdGhpcy5iYWxhbmNlOwogICAgICAgICAgICBtX293bmVyMjAudHJhbnNmZXIoXzIwcGVyY2VudCk7CiAgICAgICAgICAgIEV0aGVyU2VudChtX293bmVyMjAsIF8yMHBlcmNlbnQpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiByZWNvcmRzIGFuIGludmVzdG1lbnQKICAgIGZ1bmN0aW9uIGludmVzdGVkKGFkZHJlc3MgX2ludmVzdG9yKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcGF5YWJsZQogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJlcXVpcmVzU3RhdGUoU3RhdGUuR0FUSEVSSU5HKQogICAgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHJlcXVpcmUoMCAhPSBhbW91bnQpOwoKICAgICAgICAvLyByZWdpc3RlciBpbnZlc3RvcgogICAgICAgIGlmICgwID09IG1fd2VpQmFsYW5jZXNbX2ludmVzdG9yXSkKICAgICAgICAgICAgbV9pbnZlc3RvcnMucHVzaChfaW52ZXN0b3IpOwoKICAgICAgICAvLyByZWdpc3RlciBwYXltZW50CiAgICAgICAgdG90YWxJbnZlc3RlZCA9IHRvdGFsSW52ZXN0ZWQuYWRkKGFtb3VudCk7CiAgICAgICAgbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdID0gbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdLmFkZChhbW91bnQpOwoKICAgICAgICBJbnZlc3RlZChfaW52ZXN0b3IsIGFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2Ugd2l0aGRyYXcgYWNjdW11bGF0ZWQgYmFsYW5jZSwgY2FsbGVkIGJ5IHBheWVlIGluIGNhc2UgY3Jvd2RzYWxlIGhhcyBmYWlsZWQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3UGF5bWVudHMoYWRkcmVzcyBwYXllZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vblJlZW50cmFudAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJlcXVpcmVzU3RhdGUoU3RhdGUuUkVGVU5ESU5HKQogICAgewogICAgICAgIHVpbnQyNTYgcGF5bWVudCA9IG1fd2VpQmFsYW5jZXNbcGF5ZWVdOwoKICAgICAgICByZXF1aXJlKHBheW1lbnQgIT0gMCk7CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gcGF5bWVudCk7CgogICAgICAgIHRvdGFsSW52ZXN0ZWQgPSB0b3RhbEludmVzdGVkLnN1YihwYXltZW50KTsKICAgICAgICBtX3dlaUJhbGFuY2VzW3BheWVlXSA9IDA7CgogICAgICAgIHBheWVlLnRyYW5zZmVyKHBheW1lbnQpOwogICAgICAgIFJlZnVuZFNlbnQocGF5ZWUsIHBheW1lbnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEludmVzdG9yc0NvdW50KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7IHJldHVybiBtX2ludmVzdG9ycy5sZW5ndGg7IH0KCgogICAgLy8gRklFTERTCgogICAgLy8vIEBub3RpY2UgdG90YWwgYW1vdW50IG9mIGludmVzdG1lbnRzIGluIHdlaQogICAgdWludDI1NiBwdWJsaWMgdG90YWxJbnZlc3RlZDsKCiAgICAvLy8gQG5vdGljZSBzdGF0ZSBvZiB0aGUgcmVnaXN0cnkKICAgIFN0YXRlIHB1YmxpYyBtX3N0YXRlID0gU3RhdGUuR0FUSEVSSU5HOwoKICAgIC8vLyBAZGV2IGJhbGFuY2VzIG9mIGludmVzdG9ycyBpbiB3ZWkKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgbV93ZWlCYWxhbmNlczsKCiAgICAvLy8gQGRldiBsaXN0IG9mIHVuaXF1ZSBpbnZlc3RvcnMKICAgIGFkZHJlc3NbXSBwdWJsaWMgbV9pbnZlc3RvcnM7CgogICAgYWRkcmVzcyBwdWJsaWMgbV9vd25lcjgwOwogICAgYWRkcmVzcyBwdWJsaWMgbV9vd25lcjIwOwp9Cgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCmNvbnRyYWN0IENpcmN1bGF0aW5nVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgZXZlbnQgQ2lyY3VsYXRpb25FbmFibGVkKCk7CgogICAgbW9kaWZpZXIgcmVxdWlyZXNDaXJjdWxhdGlvbiB7CiAgICAgICAgcmVxdWlyZShtX2lzQ2lyY3VsYXRpbmcpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vIFBVQkxJQyBpbnRlcmZhY2UKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJlcXVpcmVzQ2lyY3VsYXRpb24gcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmVxdWlyZXNDaXJjdWxhdGlvbiByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJlcXVpcmVzQ2lyY3VsYXRpb24gcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwogICAgfQoKCiAgICAvLyBJTlRFUk5BTCBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBlbmFibGVDaXJjdWxhdGlvbigpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAobV9pc0NpcmN1bGF0aW5nKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIG1faXNDaXJjdWxhdGluZyA9IHRydWU7CiAgICAgICAgQ2lyY3VsYXRpb25FbmFibGVkKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8vIEZJRUxEUwoKICAgIC8vLyBAbm90aWNlIGFyZSB0aGUgY2lyY3VsYXRpb24gc3RhcnRlZD8KICAgIGJvb2wgcHVibGljIG1faXNDaXJjdWxhdGluZzsKfQoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCmNvbnRyYWN0IFRva2VuQmFzZSBpcyBNaW50YWJsZVRva2VuLCBDaXJjdWxhdGluZ1Rva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IGFtb3VudCk7CgoKICAgIHN0cmluZyBtX25hbWU7CiAgICBzdHJpbmcgbV9zeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCgogICAgZnVuY3Rpb24gVG9rZW5CYXNlKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShieXRlcyhfbmFtZSkubGVuZ3RoID4gMCAmJiBieXRlcyhfbmFtZSkubGVuZ3RoIDw9IDMyKTsKICAgICAgICByZXF1aXJlKGJ5dGVzKF9zeW1ib2wpLmxlbmd0aCA+IDAgJiYgYnl0ZXMoX3N5bWJvbCkubGVuZ3RoIDw9IDMyKTsKCiAgICAgICAgbV9uYW1lID0gX25hbWU7CiAgICAgICAgbV9zeW1ib2wgPSBfc3ltYm9sOwogICAgfQoKCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX2Ftb3VudCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFkZHJlc3MgX2Zyb20gPSBtc2cuc2VuZGVyOwogICAgICAgIHJlcXVpcmUoX2Ftb3VudD4wKTsKICAgICAgICByZXF1aXJlKF9hbW91bnQ8PWJhbGFuY2VzW19mcm9tXSk7CgogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgQnVybihfZnJvbSwgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIGFkZHJlc3MoMCksIF9hbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBtX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIG1fc3ltYm9sOwogICAgfQoKCiAgICBmdW5jdGlvbiBJQ09TdWNjZXNzKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGFzc2VydChmaW5pc2hNaW50aW5nKCkpOwogICAgICAgIGFzc2VydChlbmFibGVDaXJjdWxhdGlvbigpKTsKICAgIH0KfQoKCmNvbnRyYWN0IEVFU1RTYWxlNiBpcyBDcm93ZHNhbGVCYXNlIHsKCiAgICBmdW5jdGlvbiBFRVNUU2FsZTYoKSBwdWJsaWMKICAgICAgICBDcm93ZHNhbGVCYXNlKAogICAgICAgICAgICAvKm93bmVyODAqLyBhZGRyZXNzKDB4YWRlMjFiZGEyMWJlMjM3ZjhiMTNhNDk0YTQ2YjEyMmM1ZjFmMjZmYiksCiAgICAgICAgICAgIC8qb3duZXIyMCovIGFkZHJlc3MoMHhhNjgwOWE3ZTA1MGNhOWVhOWU0ZDJjY2VkYzg4ZjA3ZDZhZGEwOWFhKSwKICAgICAgICAgICAgIkVsZWN0cm9uaWMgZXhjaGFuZ2Ugc2lnbi10b2tlbiA2IiwgIkVFU1Q2IikKICAgIHsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgbWF4aW11bSBpbnZlc3RtZW50cyB0byBiZSBhY2NlcHRlZCBkdXJpbmcgdGhlIHNhbGUgKGluIGV1cm8tY2VudHMpCiAgICBmdW5jdGlvbiBnZXRNYXhpbXVtRnVuZHNJbkV1cm9DZW50cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDYwMDAwMDAwMDA7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbWluaW11bSBhbW91bnQgb2YgZnVuZGluZyB0byBjb25zaWRlciB0aGUgc2FsZSBhcyBzdWNjZXNzZnVsIChpbiBldXJvLWNlbnRzKQogICAgZnVuY3Rpb24gZ2V0TWluaW11bUZ1bmRzSW5FdXJvQ2VudHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiA2MDAwMDAwMDAwOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGV1cm8tY2VudHMgcGVyIDEgZXRoZXIKICAgIGZ1bmN0aW9uIGV1cm9DZW50c0luT25lRXRoZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiA1ODAwMDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBwcmljZSBvZiBvbmUgdG9rZW4gKDFlMTggd2VpLXRva2VucykgaW4gZXVybyBjZW50cwogICAgZnVuY3Rpb24gdG9rZW5QcmljZUluRXVyb0NlbnRzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gMTAwMDsKICAgIH0KfQ=='.
	

]
