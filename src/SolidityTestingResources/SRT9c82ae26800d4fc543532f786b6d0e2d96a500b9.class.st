Class {
	#name : #SRT9c82ae26800d4fc543532f786b6d0e2d96a500b9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9c82ae26800d4fc543532f786b6d0e2d96a500b9 >> base64 [
	^ ''.
	

]
