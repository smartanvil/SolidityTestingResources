Class {
	#name : #SRT95e5b2b5ab49766267c645f61755f9285aaeeb66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT95e5b2b5ab49766267c645f61755f9285aaeeb66 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwVG9rZW4gewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgR3JvdXBCdXkgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZW51bSBQaGFzZSB7IEluaXQsIENvbnRyaWJ1dGUsIFdhaXQsIENsYWltLCBMb2NrIH0KICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBNQVhfVE9UQUwgPSA1MDAgZXRoZXI7CiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgTUFYX0VBQ0ggPSAyIGV0aGVyOwoKICAgIGFkZHJlc3MgcHJpdmF0ZSB0b2tlbkFkZHI7CiAgICBhZGRyZXNzIHByaXZhdGUgb3duZXI7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBhbW91bnRzOwogICAgdWludDI1NiBwcml2YXRlIHRvdGFsRXRoOwogICAgdWludDI1NiBwcml2YXRlIHRvdGFsVG9rZW47CiAgICBQaGFzZSBwcml2YXRlIGN1cnJlbnRQaGFzZTsKCiAgICBmdW5jdGlvbiBHcm91cEJ1eSgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkluaXQ7CiAgICB9CgogICAgbW9kaWZpZXIgaXNPd25lcigpIHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBhZG1pbiBmdW5jdGlvbgogICAgZnVuY3Rpb24gYmVnaW5Db250cmliKCkgaXNPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoY3VycmVudFBoYXNlID09IFBoYXNlLkluaXQgfHwgY3VycmVudFBoYXNlID09IFBoYXNlLldhaXQpOwogICAgICAgIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkNvbnRyaWJ1dGU7CiAgICB9CgogICAgZnVuY3Rpb24gZW5kQ29udHJpYigpIGlzT3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5Db250cmlidXRlKTsKICAgICAgICBjdXJyZW50UGhhc2UgPSBQaGFzZS5XYWl0OwogICAgICAgIG93bmVyLnRyYW5zZmVyKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7IC8vIGNvbGxlY3QgZXRoIHRvIGJ1eSB0b2tlbgogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93Q2xhaW0oYWRkcmVzcyBfYWRkcikgaXNPd25lciBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJlcXVpcmUoY3VycmVudFBoYXNlID09IFBoYXNlLldhaXQpOwogICAgICAgIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkNsYWltOwogICAgICAgIHRva2VuQWRkciA9IF9hZGRyOwogICAgICAgIAogICAgICAgIEVSQzIwVG9rZW4gdG9rID0gRVJDMjBUb2tlbih0b2tlbkFkZHIpOwogICAgICAgIHRvdGFsVG9rZW4gPSB0b2suYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHJlcXVpcmUodG90YWxUb2tlbiA+IDApOwogICAgICAgIHJldHVybiB0b3RhbFRva2VuOwogICAgfQoKICAgIC8vIHJlc2N1ZSBmdW5jdGlvbgogICAgZnVuY3Rpb24gbG9jaygpIGlzT3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5DbGFpbSk7CiAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuTG9jazsKICAgIH0KCiAgICBmdW5jdGlvbiB1bmxvY2soKSBpc093bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShjdXJyZW50UGhhc2UgPT0gUGhhc2UuTG9jayk7CiAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuQ2xhaW07CiAgICB9CgogICAgZnVuY3Rpb24gY29sbGVjdEV0aCgpIGlzT3duZXIgcHVibGljIHsKICAgICAgICBvd25lci50cmFuc2ZlcihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFRvdGFsVG9rZW4odWludCBfdG90YWwpIGlzT3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKF90b3RhbCA+IDApOwogICAgICAgIHRvdGFsVG9rZW4gPSBfdG90YWw7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VG9rZW5BZGRyKGFkZHJlc3MgX2FkZHIpIGlzT3duZXIgcHVibGljIHsKICAgICAgICB0b2tlbkFkZHIgPSBfYWRkcjsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKGFkZHJlc3MgX2VyYzIwLCB1aW50IF9hbW91bnQpIGlzT3duZXIgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJldHVybiBFUkMyMFRva2VuKF9lcmMyMCkudHJhbnNmZXIob3duZXIsIF9hbW91bnQpOwogICAgfSAKCiAgICAvLyB1c2VyIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmZvKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBwaGFzZSwgdWludCB1c2VyRXRoLCB1aW50IHVzZXJUb2tlbiwgdWludCBhbGxFdGgsIHVpbnQgYWxsVG9rZW4pIHsKICAgICAgICBwaGFzZSA9IHVpbnQoY3VycmVudFBoYXNlKTsKICAgICAgICB1c2VyRXRoID0gYW1vdW50c1ttc2cuc2VuZGVyXTsKICAgICAgICB1c2VyVG9rZW4gPSB0b3RhbEV0aCA+IDAgPyB0b3RhbFRva2VuLm11bCh1c2VyRXRoKS5kaXYodG90YWxFdGgpIDogMDsKICAgICAgICBhbGxFdGggPSB0b3RhbEV0aDsKICAgICAgICBhbGxUb2tlbiA9IHRvdGFsVG9rZW47CiAgICB9CgogICAgZnVuY3Rpb24gY29udHJpYnV0ZSgpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQgX3ZhbHVlKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICByZXF1aXJlKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5Db250cmlidXRlKTsKICAgICAgICB1aW50IGN1ciA9IGFtb3VudHNbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShjdXIgPCBNQVhfRUFDSCAmJiB0b3RhbEV0aCA8IE1BWF9UT1RBTCk7CgogICAgICAgIF92YWx1ZSA9IG1zZy52YWx1ZSA+IE1BWF9FQUNILnN1YihjdXIpID8gTUFYX0VBQ0guc3ViKGN1cikgOiBtc2cudmFsdWU7CiAgICAgICAgX3ZhbHVlID0gX3ZhbHVlID4gTUFYX1RPVEFMLnN1Yih0b3RhbEV0aCkgPyBNQVhfVE9UQUwuc3ViKHRvdGFsRXRoKSA6IF92YWx1ZTsKICAgICAgICBhbW91bnRzW21zZy5zZW5kZXJdID0gY3VyLmFkZChfdmFsdWUpOwogICAgICAgIHRvdGFsRXRoID0gdG90YWxFdGguYWRkKF92YWx1ZSk7CgogICAgICAgIC8vIHJldHVybiByZWR1bmRhbnQgZXRoIHRvIHVzZXIKICAgICAgICBpZiAobXNnLnZhbHVlLnN1YihfdmFsdWUpID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZS5zdWIoX3ZhbHVlKSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNsYWltKCkgcHVibGljIHJldHVybnMgKHVpbnQgYW1vdW50VG9rZW4pIHsKICAgICAgICByZXF1aXJlKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5DbGFpbSk7CiAgICAgICAgdWludCBjb250cmlidXRlZCA9IGFtb3VudHNbbXNnLnNlbmRlcl07CiAgICAgICAgYW1vdW50VG9rZW4gPSB0b3RhbEV0aCA+IDAgPyB0b3RhbFRva2VuLm11bChjb250cmlidXRlZCkuZGl2KHRvdGFsRXRoKSA6IDA7CgogICAgICAgIHJlcXVpcmUoYW1vdW50VG9rZW4gPiAwKTsKICAgICAgICByZXF1aXJlKEVSQzIwVG9rZW4odG9rZW5BZGRyKS50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnRUb2tlbikpOwogICAgICAgIGFtb3VudHNbbXNnLnNlbmRlcl0gPSAwOwogICAgfQp9'.
	

]
