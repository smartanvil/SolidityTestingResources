Class {
	#name : #SRT6F1408e206d23d446E1580830f11f79C2E58D92B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6F1408e206d23d446E1580830f11f79C2E58D92B >> base64 [
	^ ''.
	

]
