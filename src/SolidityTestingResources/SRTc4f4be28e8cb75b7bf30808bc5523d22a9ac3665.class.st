Class {
	#name : #SRTc4f4be28e8cb75b7bf30808bc5523d22a9ac3665,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4f4be28e8cb75b7bf30808bc5523d22a9ac3665 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CmNvbnRyYWN0IEVUSFJveWFsZSB7CiAgICBhZGRyZXNzIGRldkFjY291bnQgPSAweDUwMzM0RDIwMmY2MUY4MDM4NEMwNjVCRTY1MzdERDNkNjA5RkY5QWI7IC8vRGV2IGFkZHJlc3MgdG8gc2VuZCBkZXYgZmVlICgwLjc1JSkgdG8uCiAgICB1aW50IG1hc3RlckJhbGFuY2U7IC8vdWludCB2YXIgZm9yIHRvdGFsIHJlYWwgYmFsYW5jZSBvZiBjb250cmFjdAogICAgdWludCBtYXN0ZXJBcHBhcmVudEJhbGFuY2U7IC8vdmFyIGZvciB0b3RhbCBhcHBhcmVudCBiYWxhbmNlIG9mIGNvbnRyYWN0IChyZWFsIGJhbGFuY2UgKyBhbGwgZmFrZSBpbnRlcmVzdCBjb2xsZWN0ZWQpCiAgICAKICAgIC8vQXJyYXkgbG9nIG9mIGN1cnJlbnQgcGFydGljaXBhbnRzCiAgICBhZGRyZXNzW10gcHVibGljIHBhcnRpY2lwYW50czsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcGFydGljaXBhbnRzQXJyYXlMb2NhdGlvbjsKICAgIHVpbnQgcGFydGljaXBhbnRzQ291bnQ7CiAgICAKICAgIC8vQm9vbGVhbiB0byBjaGVjayBpZiBkZXBvc2l0cyBhcmUgZW5hYmxlZAogICAgYm9vbCBpc0Rpc2FibGVkOwoJYm9vbCBoYXNTdGFydGVkOwoJCiAgICAvL1RyYWNrIGRlcG9zaXQgdGltZXMKICAgIHVpbnQgYmxvY2tIZWlnaHRTdGFydDsKICAgIGJvb2wgaXNTdGFydDsKICAgIGV2ZW50IERlcG9zaXQodWludCBfdmFsdSk7CgkKICAgIC8vTWFwcGluZ3MgdG8gbGluayBhY2NvdW50IHZhbHVlcyBhbmQgZGF0ZXMgb2YgbGFzdCBpbnRlcmVzdCBjbGFpbSB3aXRoIGFuIEV0aGVyZXVtIGFkZHJlc3MKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYWNjb3VudEJhbGFuY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHJlYWxBY2NvdW50QmFsYW5jZTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgZGVwb3NpdEJsb2NraGVpZ2h0OwogICAgCiAgICAvL0NoZWNrIGluZGl2aWR1YWwgYWNjb3VudCBiYWxhbmNlIGFuZCByZXR1cm4gYmFsYW5jZSBhc3NvY2lhdGVkIHdpdGggdGhhdCBhZGRyZXNzCiAgICBmdW5jdGlvbiBjaGVja0FjY0JhbGFuY2UoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYWRkcmVzcyBfb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHJldHVybiAoYWNjb3VudEJhbGFuY2VbX293bmVyXSk7CiAgICB9CiAgICAKICAgIC8vQ2hlY2sgYWN0dWFsIGJhbGFuY2Ugb2YgYWxsIHdhbGxldHMKICAgIGZ1bmN0aW9uIGNoZWNrR2xvYmFsQmFsYW5jZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbWFzdGVyQmFsYW5jZTsKICAgIH0KICAgIAoJLy9DaGVjayBnYW1lIHN0YXR1cwoJZnVuY3Rpb24gY2hlY2tHYW1lU3RhdHVzKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoaXNTdGFydCk7CiAgICB9CiAgICBmdW5jdGlvbiBjaGVja0Rpc2FibGVkU3RhdHVzKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoaXNEaXNhYmxlZCk7CiAgICB9CgkKICAgIC8vQ2hlY2sgaW50ZXJlc3QgZHVlCiAgICBmdW5jdGlvbiBjaGVja0ludGVyZXN0KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIGFkZHJlc3MgX293bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50IF9pbnRlcmVzdDsKICAgICAgICBpZiAoaXNTdGFydCkgewogICAgICAgICAgICBpZiAoYmxvY2tIZWlnaHRTdGFydCA+IGRlcG9zaXRCbG9ja2hlaWdodFtfb3duZXJdKSB7CgkJICAgICAgICBfaW50ZXJlc3QgPSAoKGFjY291bnRCYWxhbmNlW19vd25lcl0gKiAoYmxvY2subnVtYmVyIC0gYmxvY2tIZWlnaHRTdGFydCkgLyAyMDAwKSk7CgkJICAgIH0gZWxzZSB7CgkJICAgICAgICBfaW50ZXJlc3QgPSAoKGFjY291bnRCYWxhbmNlW19vd25lcl0gKiAoYmxvY2subnVtYmVyIC0gZGVwb3NpdEJsb2NraGVpZ2h0W19vd25lcl0pIC8gMjAwMCkpOwoJCSAgICB9CgkJcmV0dXJuIF9pbnRlcmVzdDsKICAgICAgICB9ZWxzZSB7CgkJCXJldHVybiAwOwogICAgICAgIH0KICAgIH0KCQogICAgLy9DaGVjayBpbnRlcmVzdCBkdWUgKyBiYWxhbmNlCiAgICBmdW5jdGlvbiBjaGVja1dpdGhkcmF3YWxBbW91bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYWRkcmVzcyBfb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHVpbnQgX2ludGVyZXN0OwoJCWlmIChpc1N0YXJ0KSB7CgkJICAgIGlmIChibG9ja0hlaWdodFN0YXJ0ID4gZGVwb3NpdEJsb2NraGVpZ2h0W19vd25lcl0pIHsKCQkgICAgICAgIF9pbnRlcmVzdCA9ICgoYWNjb3VudEJhbGFuY2VbX293bmVyXSAqIChibG9jay5udW1iZXIgLSBibG9ja0hlaWdodFN0YXJ0KSAvIDIwMDApKTsKCQkgICAgfSBlbHNlIHsKCQkgICAgICAgIF9pbnRlcmVzdCA9ICgoYWNjb3VudEJhbGFuY2VbX293bmVyXSAqIChibG9jay5udW1iZXIgLSBkZXBvc2l0QmxvY2toZWlnaHRbX293bmVyXSkgLyAyMDAwKSk7CgkJICAgIH0KCSAgICByZXR1cm4gKGFjY291bnRCYWxhbmNlW19vd25lcl0gKyBfaW50ZXJlc3QpOwoJCX0gZWxzZSB7CgkJCXJldHVybiBhY2NvdW50QmFsYW5jZVtfb3duZXJdOwoJCX0KICAgIH0KICAgIC8vY2hlY2sgbnVtYmVyIG9mIHBhcnRpY2lwYW50cwogICAgZnVuY3Rpb24gbnVtYmVyUGFydGljaXBhbnRzKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBwYXJ0aWNpcGFudHNDb3VudDsKICAgIH0KICAgIAogICAgLy9UYWtlIGRlcG9zaXQgb2YgZnVuZHMKICAgIGZ1bmN0aW9uIGRlcG9zaXQoKSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgYWRkcmVzcyBfb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHVpbnQgX2FtdCA9IG1zZy52YWx1ZTsgICAgICAgICAKICAgICAgICByZXF1aXJlICghaXNEaXNhYmxlZCAmJiBfYW10ID49IDEwMDAwMDAwMDAwMDAwMDAwICYmIGlzTm90Q29udHJhY3QoX293bmVyKSk7CiAgICAgICAgaWYgKGFjY291bnRCYWxhbmNlW19vd25lcl0gPT0gMCkgeyAvL0lmIGFjY291bnQgaXMgYSBuZXcgcGxheWVyLCBhZGQgdGhlbSB0byBtYXBwaW5ncyBhbmQgYXJyYXlzCiAgICAgICAgICAgIHBhcnRpY2lwYW50cy5wdXNoKF9vd25lcik7CiAgICAgICAgICAgIHBhcnRpY2lwYW50c0FycmF5TG9jYXRpb25bX293bmVyXSA9IHBhcnRpY2lwYW50cy5sZW5ndGggLSAxOwogICAgICAgICAgICBkZXBvc2l0QmxvY2toZWlnaHRbX293bmVyXSA9IGJsb2NrLm51bWJlcjsKICAgICAgICAgICAgcGFydGljaXBhbnRzQ291bnQrKzsKCQkJaWYgKHBhcnRpY2lwYW50c0NvdW50ID4gNCkgeyAvL0lmIGdhbWUgaGFzIDUgb3IgbW9yZSBwbGF5ZXJzLCBpbnRlcmVzdCBjYW4gc3RhcnQuCgkJCQlpc1N0YXJ0ID0gdHJ1ZTsKCQkJCWJsb2NrSGVpZ2h0U3RhcnQgPSBibG9jay5udW1iZXI7CgkJCQloYXNTdGFydGVkID0gdHJ1ZTsKCQkJfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaXNTdGFydCA9IGZhbHNlOwogICAgICAgICAgICBibG9ja0hlaWdodFN0YXJ0ID0gMDsKICAgICAgICB9CgkJRGVwb3NpdChfYW10KTsKICAgICAgICAvL2FkZCBkZXBvc2l0IHRvIGFtb3VudHMKICAgICAgICBhY2NvdW50QmFsYW5jZVtfb3duZXJdICs9IF9hbXQ7CiAgICAgICAgcmVhbEFjY291bnRCYWxhbmNlW19vd25lcl0gKz0gX2FtdDsKICAgICAgICBtYXN0ZXJCYWxhbmNlICs9IF9hbXQ7CiAgICAgICAgbWFzdGVyQXBwYXJlbnRCYWxhbmNlICs9IF9hbXQ7CiAgICB9CiAgICAKICAgIC8vUmV0cmlldmUgaW50ZXJlc3QgZWFybmVkIHNpbmNlIGxhc3QgaW50ZXJlc3QgY29sbGVjdGlvbgogICAgZnVuY3Rpb24gY29sbGVjdEludGVyZXN0KGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSAoaXNTdGFydCk7CiAgICAgICAgdWludCBibG9ja0hlaWdodDsgCiAgICAgICAgLy9SZXF1aXJlIDUgb3IgbW9yZSBwbGF5ZXJzIGZvciBpbnRlcmVzdCB0byBiZSBjb2xsZWN0ZWQgdG8gbWFrZSB0cm9sbGluZyBkaWZmaWN1bHQKICAgICAgICBpZiAoZGVwb3NpdEJsb2NraGVpZ2h0W19vd25lcl0gPCBibG9ja0hlaWdodFN0YXJ0KSB7CiAgICAgICAgICAgIGJsb2NrSGVpZ2h0ID0gYmxvY2tIZWlnaHRTdGFydDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGJsb2NrSGVpZ2h0ID0gZGVwb3NpdEJsb2NraGVpZ2h0W19vd25lcl07CiAgICAgICAgfQogICAgICAgIC8vQWRkIDAuMDUlIGludGVyZXN0IGZvciBldmVyeSBibG9jayAoYXBwcm94IDE0LjIgc2VjIGh0dHBzOi8vZXRoZXJzY2FuLmlvL2NoYXJ0L2Jsb2NrdGltZSkgc2luY2UgbGFzdCBpbnRlcmVzdCBjb2xsZWN0aW9uL2RlcG9zaXQKICAgICAgICB1aW50IF90ZW1wSW50ZXJlc3QgPSBhY2NvdW50QmFsYW5jZVtfb3duZXJdICogKGJsb2NrLm51bWJlciAtIGJsb2NrSGVpZ2h0KSAvIDIwMDA7CiAgICAgICAgYWNjb3VudEJhbGFuY2VbX293bmVyXSArPSBfdGVtcEludGVyZXN0OwogICAgICAgIG1hc3RlckFwcGFyZW50QmFsYW5jZSArPSBfdGVtcEludGVyZXN0OwoJCS8vU2V0IHRpbWUgc2luY2UgaW50ZXJlc3QgbGFzdCBjb2xsZWN0ZWQKCQlkZXBvc2l0QmxvY2toZWlnaHRbX293bmVyXSA9IGJsb2NrLm51bWJlcjsKCX0KCiAgICAvL0FsbG93IHdpdGhkcmF3YWwgb2YgZnVuZHMgYW5kIGlmIGZ1bmRzIGxlZnQgaW4gY29udHJhY3QgYXJlIGxlc3MgdGhhbiB3aXRoZHJhd2FsIHJlcXVlc3RlZCBhbmQgZ3JlYXRlciBvciA9IHRvIGFjY291bnQgYmFsYW5jZSwgY29udHJhY3QgYmFsYW5jZSB3aWxsIGJlIGNsZWFyZWQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgX2Ftb3VudCkgcHVibGljICB7CiAgICAgICAgYWRkcmVzcyBfb3duZXIgPSBtc2cuc2VuZGVyOyAKCQl1aW50IF9hbXQgPSBfYW1vdW50OwogICAgICAgIHVpbnQgX2RldkZlZTsKICAgICAgICByZXF1aXJlIChhY2NvdW50QmFsYW5jZVtfb3duZXJdID4gMCAmJiBfYW10ID4gMCAmJiBpc05vdENvbnRyYWN0KF9vd25lcikpOwogICAgICAgIGlmIChpc1N0YXJ0KSB7IC8vQ29sbGVjdCBpbnRlcmVzdCBkdWUgaWYgZ2FtZSBoYXMgc3RhcnRlZAogICAgICAgIGNvbGxlY3RJbnRlcmVzdChtc2cuc2VuZGVyKTsKICAgICAgICB9CgkJcmVxdWlyZSAoX2FtdCA8PSBhY2NvdW50QmFsYW5jZVtfb3duZXJdKTsKICAgICAgICBpZiAoYWNjb3VudEJhbGFuY2VbX293bmVyXSA9PSBfYW1vdW50IHx8IGFjY291bnRCYWxhbmNlW19vd25lcl0gLSBfYW1vdW50IDwgMTAwMDAwMDAwMDAwMDAwMDApIHsgLy9DaGVjayBpZiBzZW5kZXIgaXMgd2l0aGRyYXdpbmcgdGhlaXIgZW50aXJlIGJhbGFuY2Ugb3Igd2lsbCBsZWF2ZSBsZXNzIHRoYW4gMC4wMUVUSAoJCQlfYW10ID0gYWNjb3VudEJhbGFuY2VbX293bmVyXTsKCQkJaWYgKF9hbXQgPiBtYXN0ZXJCYWxhbmNlKSB7IC8vSWYgY29udHJhY3QgYmFsYW5jZSBpcyBsb3dlciB0aGFuIGFjY291bnQgYmFsYW5jZSwgd2l0aGRyYXcgYWNjb3VudCBiYWxhbmNlLgoJCQkJX2FtdCA9IG1hc3RlckJhbGFuY2U7CgkJCX0JCiAgICAgICAgICAgIF9kZXZGZWUgPSBfYW10IC8gMTMzOyAvL1Rha2UgMC43NSUgZGV2IGZlZQogICAgICAgICAgICBfYW10IC09IF9kZXZGZWU7CiAgICAgICAgICAgIG1hc3RlckFwcGFyZW50QmFsYW5jZSAtPSBfZGV2RmVlOwogICAgICAgICAgICBtYXN0ZXJCYWxhbmNlIC09IF9kZXZGZWU7CiAgICAgICAgICAgIGFjY291bnRCYWxhbmNlW19vd25lcl0gLT0gX2RldkZlZTsKICAgICAgICAgICAgbWFzdGVyQmFsYW5jZSAtPSBfYW10OwogICAgICAgICAgICBtYXN0ZXJBcHBhcmVudEJhbGFuY2UgLT0gX2FtdDsKICAgICAgICAgICAgLy9EZWxldGUgc2VuZGVyIGFkZHJlc3MgZnJvbSBtYXBwaW5ncyBhbmQgYXJyYXlzIGlmIHRoZXkgYXJlIHdpdGhkcmF3aW5nIHRoZWlyIGVudGlyZSBiYWxhbmNlCiAgICAgICAgICAgIGRlbGV0ZSBhY2NvdW50QmFsYW5jZVtfb3duZXJdOwogICAgICAgICAgICBkZWxldGUgZGVwb3NpdEJsb2NraGVpZ2h0W19vd25lcl07CiAgICAgICAgICAgIGRlbGV0ZSBwYXJ0aWNpcGFudHNbcGFydGljaXBhbnRzQXJyYXlMb2NhdGlvbltfb3duZXJdXTsKCQkJZGVsZXRlIHBhcnRpY2lwYW50c0FycmF5TG9jYXRpb25bX293bmVyXTsKICAgICAgICAgICAgZGVsZXRlIHJlYWxBY2NvdW50QmFsYW5jZVtfb3duZXJdOwogICAgICAgICAgICBwYXJ0aWNpcGFudHNDb3VudC0tOwogICAgICAgICAgICBpZiAocGFydGljaXBhbnRzQ291bnQgPCA1KSB7IC8vSWYgdGhlcmUgYXJlIGxlc3MgdGhhbiA1IHBlb3BsZSwgc3RvcCB0aGUgZ2FtZS4KICAgICAgICAgICAgICAgIGlzU3RhcnQgPSBmYWxzZTsKCQkJCWlmIChwYXJ0aWNpcGFudHNDb3VudCA8IDMgJiYgaGFzU3RhcnRlZCkgeyAvL0lmIHRoZXJlIGFyZSBsZXNzIHRoYW4gMyBwbGF5ZXJzIGFuZCB0aGUgZ2FtZSB3YXMgc3RhcnRlZCBlYXJsaWVyLCBkaXNhYmxlIGRlcG9zaXRzIHVudGlsIHRoZXJlIGFyZSBubyBwbGF5ZXJzIGxlZnQKCQkJCQlpc0Rpc2FibGVkID0gdHJ1ZTsKCQkJCX0KCQkJCWlmIChwYXJ0aWNpcGFudHNDb3VudCA9PSAwKSB7IC8vRW5hYmxlIGRlcG9zaXRzIGlmIHRoZXJlIGFyZSBubyBwbGF5ZXJzIGN1cnJlbnRseSBkZXBvc2l0ZWQKCQkJCQlpc0Rpc2FibGVkID0gZmFsc2U7CgkJCQkJaGFzU3RhcnRlZCA9IGZhbHNlOwoJCQkJfQkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChhY2NvdW50QmFsYW5jZVtfb3duZXJdID4gX2Ftb3VudCl7IC8vQ2hlY2sgdGhhdCBhY2NvdW50IGhhcyBlbm91Z2ggYmFsYW5jZSB0byB3aXRoZHJhdwoJCQlpZiAoX2FtdCA+IG1hc3RlckJhbGFuY2UpIHsKCQkJCV9hbXQgPSBtYXN0ZXJCYWxhbmNlOwoJCQl9CQogICAgICAgICAgICBfZGV2RmVlID0gX2FtdCAvIDEzMzsgLy9UYWtlIDAuNzUlIG9mIHdpdGhkcmF3YWwgZm9yIGRldiBmZWUgYW5kIHN1YnRyYWN0IHdpdGhkcmF3YWwgYW1vdW50IGZyb20gYWxsIGJhbGFuY2VzCiAgICAgICAgICAgIF9hbXQgLT0gX2RldkZlZTsKICAgICAgICAgICAgbWFzdGVyQXBwYXJlbnRCYWxhbmNlIC09IF9kZXZGZWU7CiAgICAgICAgICAgIG1hc3RlckJhbGFuY2UgLT0gX2RldkZlZTsKICAgICAgICAgICAgYWNjb3VudEJhbGFuY2VbX293bmVyXSAtPSBfZGV2RmVlOwogICAgICAgICAgICBhY2NvdW50QmFsYW5jZVtfb3duZXJdIC09IF9hbXQ7CiAgICAgICAgICAgIHJlYWxBY2NvdW50QmFsYW5jZVtfb3duZXJdIC09IF9hbXQ7CiAgICAgICAgICAgIG1hc3RlckJhbGFuY2UgLT0gX2FtdDsKICAgICAgICAgICAgbWFzdGVyQXBwYXJlbnRCYWxhbmNlIC09IF9hbXQ7CiAgICAgICAgfQoJCURlcG9zaXQoX2FtdCk7CiAgICAgICAgZGV2QWNjb3VudC50cmFuc2ZlcihfZGV2RmVlKTsKICAgICAgICBfb3duZXIudHJhbnNmZXIoX2FtdCk7CiAgICB9CgkKCS8vQ2hlY2sgaWYgc2VuZGVyIGFkZHJlc3MgaXMgYSBjb250cmFjdCBmb3Igc2VjdXJpdHkgcHVycG9zZXMuCglmdW5jdGlvbiBpc05vdENvbnRyYWN0KGFkZHJlc3MgYWRkcikgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CgkJdWludCBzaXplOwoJCWFzc2VtYmx5IHsgc2l6ZSA6PSBleHRjb2Rlc2l6ZShhZGRyKSB9CgkJcmV0dXJuICghKHNpemUgPiAwKSk7Cgl9Cn0='.
	

]
