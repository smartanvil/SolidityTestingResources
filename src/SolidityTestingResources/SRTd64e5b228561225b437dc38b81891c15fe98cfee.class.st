Class {
	#name : #SRTd64e5b228561225b437dc38b81891c15fe98cfee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd64e5b228561225b437dc38b81891c15fe98cfee >> base64 [
	^ ''.
	

]
