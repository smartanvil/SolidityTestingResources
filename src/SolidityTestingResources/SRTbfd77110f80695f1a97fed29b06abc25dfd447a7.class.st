Class {
	#name : #SRTbfd77110f80695f1a97fed29b06abc25dfd447a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbfd77110f80695f1a97fed29b06abc25dfd447a7 >> base64 [
	^ ''.
	

]
