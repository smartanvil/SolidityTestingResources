Class {
	#name : #SRT9284c4b9da2c97d63bdb930aaa8eb751299fc8d4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9284c4b9da2c97d63bdb930aaa8eb751299fc8d4 >> base64 [
	^ ''.
	

]
