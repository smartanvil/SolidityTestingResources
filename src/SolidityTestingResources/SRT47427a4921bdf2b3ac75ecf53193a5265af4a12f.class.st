Class {
	#name : #SRT47427a4921bdf2b3ac75ecf53193a5265af4a12f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47427a4921bdf2b3ac75ecf53193a5265af4a12f >> base64 [
	^ ''.
	

]
