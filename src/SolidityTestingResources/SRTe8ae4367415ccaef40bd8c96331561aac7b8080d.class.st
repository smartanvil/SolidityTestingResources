Class {
	#name : #SRTe8ae4367415ccaef40bd8c96331561aac7b8080d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8ae4367415ccaef40bd8c96331561aac7b8080d >> base64 [
	^ ''.
	

]
