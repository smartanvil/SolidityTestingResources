Class {
	#name : #SRT88eded244d147c6a96b2565a3831020462fed555,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88eded244d147c6a96b2565a3831020462fed555 >> base64 [
	^ ''.
	

]
