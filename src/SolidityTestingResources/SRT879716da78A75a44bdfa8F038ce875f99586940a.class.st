Class {
	#name : #SRT879716da78A75a44bdfa8F038ce875f99586940a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT879716da78A75a44bdfa8F038ce875f99586940a >> base64 [
	^ ''.
	

]
