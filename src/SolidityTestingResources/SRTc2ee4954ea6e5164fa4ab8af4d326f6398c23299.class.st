Class {
	#name : #SRTc2ee4954ea6e5164fa4ab8af4d326f6398c23299,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2ee4954ea6e5164fa4ab8af4d326f6398c23299 >> base64 [
	^ ''.
	

]
