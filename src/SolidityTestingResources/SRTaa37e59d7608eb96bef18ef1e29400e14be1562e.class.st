Class {
	#name : #SRTaa37e59d7608eb96bef18ef1e29400e14be1562e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa37e59d7608eb96bef18ef1e29400e14be1562e >> base64 [
	^ ''.
	

]
