Class {
	#name : #SRTf8da85cc83fe074d69f5e15ad70e439b725450a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8da85cc83fe074d69f5e15ad70e439b725450a2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTI7Ci8qIE1hdHJlWGEgSUNPIGNvbnRyYWN0cy4gdmVyc2lvbiAyMDE3LTA5LTExICovCgovLz09PT09PSAgT3BlblplcHBlbGluIGxpYnJhcmF5ID09PT09CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgU2FmZUVSQzIwCiAqIEBkZXYgV3JhcHBlcnMgYXJvdW5kIEVSQzIwIG9wZXJhdGlvbnMgdGhhdCB0aHJvdyBvbiBmYWlsdXJlLgogKiBUbyB1c2UgdGhpcyBsaWJyYXJ5IHlvdSBjYW4gYWRkIGEgYHVzaW5nIFNhZmVFUkMyMCBmb3IgRVJDMjA7YCBzdGF0ZW1lbnQgdG8geW91ciBjb250cmFjdCwKICogd2hpY2ggYWxsb3dzIHlvdSB0byBjYWxsIHRoZSBzYWZlIG9wZXJhdGlvbnMgYXMgYHRva2VuLnNhZmVUcmFuc2ZlciguLi4pYCwgZXRjLgogKi8KbGlicmFyeSBTYWZlRVJDMjAgewogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlcihFUkMyMEJhc2ljIHRva2VuLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4udHJhbnNmZXIodG8sIHZhbHVlKSk7CiAgfQoKICBmdW5jdGlvbiBzYWZlVHJhbnNmZXJGcm9tKEVSQzIwIHRva2VuLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKSk7CiAgfQoKICBmdW5jdGlvbiBzYWZlQXBwcm92ZShFUkMyMCB0b2tlbiwgYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4uYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8qKiAKICogQHRpdGxlIENvbnRyYWN0cyB0aGF0IHNob3VsZCBub3Qgb3duIENvbnRyYWN0cwogKiBAYXV0aG9yIFJlbWNvIEJsb2VtZW4gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNTYyNDMzM2IzNTM5MTY2NCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj7PgC5jb20+CiAqIEBkZXYgU2hvdWxkIGNvbnRyYWN0cyAoYW55dGhpbmcgT3duYWJsZSkgZW5kIHVwIGJlaW5nIG93bmVkIGJ5IHRoaXMgY29udHJhY3QsIGl0IGFsbG93cyB0aGUgb3duZXIKICogb2YgdGhpcyBjb250cmFjdCB0byByZWNsYWltIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3RzLgogKi8KY29udHJhY3QgSGFzTm9Db250cmFjdHMgaXMgT3duYWJsZSB7CgogIC8qKgogICAqIEBkZXYgUmVjbGFpbSBvd25lcnNoaXAgb2YgT3duYWJsZSBjb250cmFjdHMKICAgKiBAcGFyYW0gY29udHJhY3RBZGRyIFRoZSBhZGRyZXNzIG9mIHRoZSBPd25hYmxlIHRvIGJlIHJlY2xhaW1lZC4KICAgKi8KICBmdW5jdGlvbiByZWNsYWltQ29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHIpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICBPd25hYmxlIGNvbnRyYWN0SW5zdCA9IE93bmFibGUoY29udHJhY3RBZGRyKTsKICAgIGNvbnRyYWN0SW5zdC50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgfQp9CgovKioKICogQHRpdGxlIENvbnRyYWN0cyB0aGF0IHNob3VsZCBiZSBhYmxlIHRvIHJlY292ZXIgdG9rZW5zCiAqIEBhdXRob3IgU3lsVGkKICogQGRldiBUaGlzIGFsbG93IGEgY29udHJhY3QgdG8gcmVjb3ZlciBhbnkgRVJDMjAgdG9rZW4gcmVjZWl2ZWQgaW4gYSBjb250cmFjdCBieSB0cmFuc2ZlcmluZyB0aGUgYmFsYW5jZSB0byB0aGUgY29udHJhY3Qgb3duZXIuCiAqIFRoaXMgd2lsbCBwcmV2ZW50IGFueSBhY2NpZGVudGFsIGxvc3Mgb2YgdG9rZW5zLgogKi8KY29udHJhY3QgQ2FuUmVjbGFpbVRva2VuIGlzIE93bmFibGUgewogIHVzaW5nIFNhZmVFUkMyMCBmb3IgRVJDMjBCYXNpYzsKCiAgLyoqCiAgICogQGRldiBSZWNsYWltIGFsbCBFUkMyMEJhc2ljIGNvbXBhdGlibGUgdG9rZW5zCiAgICogQHBhcmFtIHRva2VuIEVSQzIwQmFzaWMgVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgICovCiAgZnVuY3Rpb24gcmVjbGFpbVRva2VuKEVSQzIwQmFzaWMgdG9rZW4pIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICB1aW50MjU2IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB0b2tlbi5zYWZlVHJhbnNmZXIob3duZXIsIGJhbGFuY2UpOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgQ29udHJhY3RzIHRoYXQgc2hvdWxkIG5vdCBvd24gVG9rZW5zCiAqIEBhdXRob3IgUmVtY28gQmxvZW1lbiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJmODhhOWQ5NTliOTdiOGNhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPs+ALmNvbT4KICogQGRldiBUaGlzIGJsb2NrcyBpbmNvbWluZyBFUkMyMyB0b2tlbnMgdG8gcHJldmVudCBhY2NpZGVudGFsIGxvc3Mgb2YgdG9rZW5zLgogKiBTaG91bGQgdG9rZW5zIChhbnkgRVJDMjBCYXNpYyBjb21wYXRpYmxlKSBlbmQgdXAgaW4gdGhlIGNvbnRyYWN0LCBpdCBhbGxvd3MgdGhlCiAqIG93bmVyIHRvIHJlY2xhaW0gdGhlIHRva2Vucy4KICovCmNvbnRyYWN0IEhhc05vVG9rZW5zIGlzIENhblJlY2xhaW1Ub2tlbiB7CgogLyoqCiAgKiBAZGV2IFJlamVjdCBhbGwgRVJDMjMgY29tcGF0aWJsZSB0b2tlbnMKICAqIHBhcmFtIGZyb21fIGFkZHJlc3MgVGhlIGFkZHJlc3MgdGhhdCBpcyB0cmFuc2ZlcnJpbmcgdGhlIHRva2VucwogICogcGFyYW0gdmFsdWVfIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0aGUgc3BlY2lmaWVkIHRva2VuCiAgKiBwYXJhbSBkYXRhXyBCeXRlcyBUaGUgZGF0YSBwYXNzZWQgZnJvbSB0aGUgY2FsbGVyLgogICovCiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIC8qZnJvbV8qLywgdWludDI1NiAvKnZhbHVlXyovLCBieXRlcyAvKmRhdGFfKi8pIGV4dGVybmFsIHsKICAgIHJldmVydCgpOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CiAgCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwgCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgVHJhbnNmZXIoMHgwLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovLz09PT09PSAgTWF0cmVYYSA9PT09PQoKY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IEJ1cm5SZXdhcmRJbmNyZWFzZWQoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgKiBAZGV2IFNlbmRpbmcgZXRoZXIgdG8gY29udHJhY3QgaW5jcmVhc2VzIGJ1cm5pbmcgcmV3YXJkIAogICAgKi8KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgaWYobXNnLnZhbHVlID4gMCl7CiAgICAgICAgICAgIEJ1cm5SZXdhcmRJbmNyZWFzZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsgICAgCiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDYWxjdWxhdGVzIGhvdyBtdWNoIGV0aGVyIG9uZSB3aWxsIHJlY2VpdmUgaW4gcmV3YXJkIGZvciBidXJuaW5nIHRva2VucwogICAgICogQHBhcmFtIF9hbW91bnQgb2YgdG9rZW5zIHRvIGJlIGJ1cm5lZAogICAgICovCiAgICBmdW5jdGlvbiBidXJuUmV3YXJkKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1Nil7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZS5tdWwoX2Ftb3VudCkuZGl2KHRvdGFsU3VwcGx5KTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBCdXJucyB0b2tlbnMgYW5kIHNlbmQgcmV3YXJkCiAgICAqIFRoaXMgaXMgaW50ZXJuYWwgZnVuY3Rpb24gYmVjYXVzZSBpdCBET0VTIE5PVCBjaGVjayAKICAgICogaWYgX2Zyb20gaGFzIGFsbG93YW5jZSB0byBidXJuIHRva2Vucy4KICAgICogSXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB0cmFuc2ZlcigpIGFuZCB0cmFuc2ZlckZyb20oKSB3aGljaCBkbyB0aGlzIGNoZWNrLgogICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gYnVybiB0b2tlbnMgZnJvbQogICAgKiBAcGFyYW0gX2Ftb3VudCBvZiB0b2tlbnMgdG8gYmUgYnVybmVkCiAgICAqLwogICAgZnVuY3Rpb24gYnVybihhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIGludGVybmFsIHJldHVybnMoYm9vbCl7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudCk7CiAgICAgICAgCiAgICAgICAgdWludDI1NiByZXdhcmQgPSBidXJuUmV3YXJkKF9hbW91bnQpOwogICAgICAgIGFzc2VydCh0aGlzLmJhbGFuY2UgLSByZXdhcmQgPiAwKTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfYW1vdW50KTsKICAgICAgICAvL2Fzc2VydCh0b3RhbFN1cHBseSA+PSAwKTsgLy9DaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2UgdG90YWxTdXBwbHkuc3ViKHZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgICAgIAogICAgICAgIF9mcm9tLnRyYW5zZmVyKHJld2FyZCk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIDB4MCwgX2Ftb3VudCk7CiAgICAgICAgQnVybihfZnJvbSwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgVHJhbnNmZXJzIG9yIGJ1cm5zIHRva2VucwogICAgKiBCdXJucyB0b2tlbnMgdHJhbnNmZXJyZWQgdG8gdGhpcyBjb250cmFjdCBpdHNlbGYgb3IgdG8gemVybyBhZGRyZXNzCiAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8gb3IgdG9rZW4gY29udHJhY3QgYWRkcmVzcyB0byBidXJuLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYoIChfdG8gPT0gYWRkcmVzcyh0aGlzKSkgfHwgKF90byA9PSAwKSApewogICAgICAgICAgICByZXR1cm4gYnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIH1lbHNlewogICAgICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyIAogICAgKiBvciBidXJucyB0aGVtIGlmIF90byBpcyB0aGlzIGNvbnRyYWN0IG9yIHplcm8gYWRkcmVzcwogICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmKCAoX3RvID09IGFkZHJlc3ModGhpcykpIHx8IChfdG8gPT0gMCkgKXsKICAgICAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKICAgICAgICAgICAgLy9yZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7IC8vQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gYnVybihfZnJvbSwgX3ZhbHVlKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIH0KICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgTWF0cmVYYSBUb2tlbgogKi8KY29udHJhY3QgTWF0cmVYYVRva2VuIGlzIEJ1cm5hYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW4sIEhhc05vQ29udHJhY3RzLCBIYXNOb1Rva2VucyB7IC8vTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTWF0cmVYYSI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJNVFJYIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgYWRkcmVzcyBwdWJsaWMgZm91bmRlcjsKICAgIHVpbnQyNTYgcHVibGljIGFsbG93VHJhbnNmZXJUaW1lc3RhbXAgPSAwOwoKICAgIC8qKgogICAgKiBXZSBkaXNzYWJsZSB0b2tlbiB0cmFuc2ZlciBkdXJpbmcgSUNPIGFuZCBzb21lIHRpbWUgYWZ0ZXIgSUNPLgogICAgKiBCdXQgd2UgYWxsb3cgZm91bmRlciB0byB0cmFuc2ZlciBoaXMgdG9rZW5zIHRvIHBheSBib3VudGllcywgZXRjLgogICAgKi8KICAgIG1vZGlmaWVyIGNhblRyYW5zZmVyKCkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gZm91bmRlcikgewogICAgICAgICAgICByZXF1aXJlKG1pbnRpbmdGaW5pc2hlZCk7CiAgICAgICAgICAgIHJlcXVpcmUobm93ID4gYWxsb3dUcmFuc2ZlclRpbWVzdGFtcCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CiAgICAvKioKICAgICogQGRldiBzZXQgRm91bmRlciBhZGRyZXNzCiAgICAqIE9ubHkgb3duZXIgYWxsb3dlZCB0byBkbyB0aGlzCiAgICAqLwogICAgZnVuY3Rpb24gc2V0Rm91bmRlcihhZGRyZXNzIF9mb3VuZGVyKSBvbmx5T3duZXIgewogICAgICAgIGZvdW5kZXIgPSBfZm91bmRlcjsKICAgIH0gICAgCiAgICAKICAgIC8qKgogICAgKiBAZGV2IHNldCB0aGUgdGltZXN0YW1wIHdoZW4gdHJhc2ZlcnMgd2lsbCBiZSBhbGxvd2VkCiAgICAqIE9ubHkgb3duZXIgYWxsb3dlZCB0byBkbyB0aGlzCiAgICAqIFRoaXMgaXMgYWxsb3dlZCBvbmx5IG9uY2UgdG8gcHJldmVudCBvd25lciB0byBwYXVzZSB0cmFuc2ZlcnMgYXQgd2lsbAogICAgKi8KICAgIGZ1bmN0aW9uIHNldEFsbG93VHJhbnNmZXJUaW1lc3RhbXAodWludDI1NiBfYWxsb3dUcmFuc2ZlclRpbWVzdGFtcCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGFsbG93VHJhbnNmZXJUaW1lc3RhbXAgPT0gMCk7CiAgICAgICAgYWxsb3dUcmFuc2ZlclRpbWVzdGFtcCA9IF9hbGxvd1RyYW5zZmVyVGltZXN0YW1wOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGNhblRyYW5zZmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBCdXJuYWJsZVRva2VuLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBjYW5UcmFuc2ZlciByZXR1cm5zIChib29sKSB7CiAgICAgICAgQnVybmFibGVUb2tlbi50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgTWF0cmVYYSBDcm93ZHNhbGUKICovCmNvbnRyYWN0IE1hdHJlWGFDcm93ZHNhbGUgaXMgT3duYWJsZSwgSGFzTm9Db250cmFjdHMsIEhhc05vVG9rZW5zIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vdXNlIGh0dHBzOi8vd3d3Lm15ZXRoZXJ3YWxsZXQuY29tL2hlbHBlcnMuaHRtbCBmb3Igc2ltcGxlIGNvdmVyc2lvbiB0by9mcm9tIHdlaQogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgTUFYX0dBU19QUklDRSAgPSA1MDAwMDAwMDAwMCB3ZWk7ICAgIC8vTWF4aW11bSBnYXMgcHJpY2UgZm9yIGNvbnRyaWJ1dGlvbiB0cmFuc2FjdGlvbnMKICAgIHVpbnQyNTYgcHVibGljIGdvYWw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0Ftb3VudCBvZiBldGhlciAoaW4gd2VpKSB0byByZWNlaXZlIGZvciBjcm93ZHNhbGUgdG8gYmUgc3VjY2Vzc2Z1bAoKICAgIE1hdHJlWGFUb2tlbiBwdWJsaWMgbXRyeDsKCiAgICB1aW50MjU2IHB1YmxpYyBhdmFpbGFibGVTdXBwbHk7ICAgICAvL3Rva2VucyBsZWZ0IHRvIHNhbGUKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZXN0YW1wOyAgICAgIC8vc3RhcnQgY3Jvd2RzYWxlIHRpbWVzdGFtcAogICAgdWludDI1NiBwdWJsaWMgZW5kVGltZXN0YW1wOyAgICAgICAgLy9hZnRlciB0aGlzIHRpbWVzdGFtcCBubyBjb250cmlidXRpb25zIHdpbGwgYmUgYWNjZXB0ZWQgYW5kIGlmIG1pbmltdW0gY2FwIG5vdCByZWFjaGVkIHJlZnVuZHMgbWF5IGJlIGNsYWltZWQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsQ29sbGVjdGVkOyAgICAgIC8vdG90YWwgYW1vdW50IG9mIGNvbGxlY3RlZCBmdW5kcyAoaW4gZXRoZXJldW0gd2VpKQogICAgdWludDI1NltdIHB1YmxpYyBwZXJpb2RzOyAgICAgICAgICAgLy9wZXJpb2RzIG9mIGNyb3dkc2FsZSB3aXRoIGRpZmZlcmVudCBwcmljZXMKICAgIHVpbnQyNTZbXSBwdWJsaWMgcHJpY2VzOyAgICAgICAgICAgIC8vcHJpY2VzIG9mIGVhY2ggY3Jvd2RzYWxlIHBlcmlvZHMKICAgIGJvb2wgcHVibGljIGZpbmFsaXplZDsgICAgICAgICAgICAgIC8vY3Jvd2RzYWxlIGlzIGZpbmFsaXplZAogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgY29udHJpYnV0aW9uczsgLy9hbW91bnQgb2YgZXRoZXIgKGluIHdlaSlyZWNlaXZlZCBmcm9tIGEgY29udHJpYnV0b3IKCiAgICAvKioKICAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICAqLyAKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIC8qKgogICAgICogQGRldiBBc3NlcnRzIGNyb3dkc2FsZSBnb2FsIGlzIHJlYWNoZWQKICAgICAqLwogICAgbW9kaWZpZXIgZ29hbFJlYWNoZWQoKXsKICAgICAgICByZXF1aXJlKHRvdGFsQ29sbGVjdGVkID49IGdvYWwpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFzc2VydHMgY3Jvd2RzYWxlIGlzIGZpbmlzaGVkLCBidXQgZ29hbCBub3QgcmVhY2hlZCAKICAgICAqLwogICAgbW9kaWZpZXIgY3Jvd2RzYWxlRmFpbGVkKCl7CiAgICAgICAgcmVxdWlyZSh0b3RhbENvbGxlY3RlZCA8IGdvYWwpOwogICAgICAgIHJlcXVpcmUobm93ID4gZW5kVGltZXN0YW1wKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogVGhyb3dzIGlmIGNyb3dkc2FsZSBpcyBub3QgcnVubmluZzogbm90IHN0YXJ0ZWQsIGVuZGVkIG9yIG1heCBjYXAgcmVhY2hlZAogICAgICovCiAgICBtb2RpZmllciBjcm93ZHNhbGVJc1J1bm5pbmcoKXsKICAgICAgICAvLyByZXF1aXJlKG5vdyA+IHN0YXJ0VGltZXN0YW1wKTsKICAgICAgICAvLyByZXF1aXJlKG5vdyA8PSBlbmRUaW1lc3RhbXApOwogICAgICAgIC8vIHJlcXVpcmUoYXZhaWxhYmxlU3VwcGx5ID4gMCk7CiAgICAgICAgLy8gcmVxdWlyZSghZmluYWxpemVkKTsKICAgICAgICByZXF1aXJlKGNyb3dkc2FsZVJ1bm5pbmcoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICogdmVyaWZpZXMgdGhhdCB0aGUgZ2FzIHByaWNlIGlzIGxvd2VyIHRoYW4gNTAgZ3dlaQogICAgKi8KICAgIG1vZGlmaWVyIHZhbGlkR2FzUHJpY2UoKSB7CiAgICAgICAgYXNzZXJ0KHR4Lmdhc3ByaWNlIDw9IE1BWF9HQVNfUFJJQ0UpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IE1hdHJlWGEgQ3Jvd2RzYWxlIENvbnRyYWN0CiAgICAgKiBAcGFyYW0gX3N0YXJ0VGltZXN0YW1wIFN0YXJ0IGNyb3dkc2FsZSB0aW1lc3RhbXAKICAgICAqIEBwYXJhbSBfcGVyaW9kcyBBcnJheSBvZiB0aW1lc3RhbXBzIHdoZW4gYSBjb3JyZXNwb25kaW5nIHByaWNlIGlzIG5vIGxvbmdlciB2YWxpZC4gTGFzdCB0aW1lc3RhbXAgaXMgdGhlIGxhc3QgZGF0ZSBvZiBJQ08KICAgICAqIEBwYXJhbSBfcHJpY2VzIEFycmF5IG9mIHByaWNlcyAoaG93IG1hbnkgdG9rZW4gdW5pdHMgb25lIHdpbGwgcmVjZWl2ZSBwZXIgd2VpKSBjb3Jyc3BvbmRpbmcgdG8gdGhyZXNob2xkcy4KICAgICAqIEBwYXJhbSBfZ29hbCBBbW91bnQgb2YgZXRoZXIgKGluIHdlaSkgdG8gcmVjZWl2ZSBmb3IgY3Jvd2RzYWxlIHRvIGJlIHN1Y2Nlc3NmdWwKICAgICAqIEBwYXJhbSBfb3duZXJUb2tlbnMgQW1vdW50IG9mIE1UUlggdG9rZW5zIChpbiB3ZWkpIG1pbnRlZCB0byBvd25lcgogICAgICogQHBhcmFtIF9hdmFpbGFibGVTdXBwbHkgQW1vdW50IG9mIE1UUlggdG9rZW5zIChpbiB3ZWkpIHRvIGRpc3RyaWJ1dGUgZHVyaW5nIElDTwogICAgICogQHBhcmFtIF9hbGxvd1RyYW5zZmVyVGltZXN0YW1wIHRpbWVzdGFtcCBhZnRlciB3aWNoIHRyYW5zZmVyIG9mIHRva2VucyBzaG91bGQgYmUgYWxsb3dlZAogICAgICovCiAgICBmdW5jdGlvbiBNYXRyZVhhQ3Jvd2RzYWxlKAogICAgICAgIHVpbnQyNTYgX3N0YXJ0VGltZXN0YW1wLCAKICAgICAgICB1aW50MjU2W10gX3BlcmlvZHMsCiAgICAgICAgdWludDI1NltdIF9wcmljZXMsIAogICAgICAgIHVpbnQyNTYgX2dvYWwsCiAgICAgICAgdWludDI1NiBfb3duZXJUb2tlbnMsCiAgICAgICAgdWludDI1NiBfYXZhaWxhYmxlU3VwcGx5LAogICAgICAgIHVpbnQyNTYgX2FsbG93VHJhbnNmZXJUaW1lc3RhbXAKICAgICkgewoKICAgICAgICByZXF1aXJlKF9wZXJpb2RzLmxlbmd0aCA+IDApOyAgICAgICAgICAgICAgICAgICAvL1RoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCBvbmUgcGVyaW9kCiAgICAgICAgcmVxdWlyZShfc3RhcnRUaW1lc3RhbXAgPCBfcGVyaW9kc1swXSk7ICAgICAgICAgLy9TdGFydCBzaG91bGQgYmUgYmVmb3JlIGZpcnN0IHBlcmlvZCBlbmQKICAgICAgICByZXF1aXJlKF9wcmljZXMubGVuZ3RoID09IF9wZXJpb2RzLmxlbmd0aCk7ICAgICAvL0VhY2ggcGVyaW9kIHNob3VsZCBoYXZlIGNvcnJlc3BvbmRpbmcgcHJpY2UKCiAgICAgICAgc3RhcnRUaW1lc3RhbXAgPSBfc3RhcnRUaW1lc3RhbXA7CiAgICAgICAgZW5kVGltZXN0YW1wID0gX3BlcmlvZHNbX3BlcmlvZHMubGVuZ3RoIC0gMV07CiAgICAgICAgcGVyaW9kcyA9IF9wZXJpb2RzOwogICAgICAgIHByaWNlcyA9IF9wcmljZXM7CgogICAgICAgIGdvYWwgPSBfZ29hbDsKICAgICAgICBhdmFpbGFibGVTdXBwbHkgPSBfYXZhaWxhYmxlU3VwcGx5OwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcmVhY2hhYmxlQ2FwID0gYXZhaWxhYmxlU3VwcGx5Lm11bChfcHJpY2VzWzBdKTsgICAvL2ZpbmQgaG93IG11Y2ggZXRoZXIgY2FuIGJlIGNvbGxlY3RlZCBpbiBmaXJzdCBwZXJpb2QKICAgICAgICByZXF1aXJlKHJlYWNoYWJsZUNhcCA+IGdvYWwpOyAgICAgICAgICAgLy9DaGVjayBpZiBpdCBpcyBwb3NzaWJsZSB0byByZWFjaCBtaW5pbXVtQ2FwIChub3QgYWNjdXJhdGUgY2hlY2ssIGJ1dCBpdCdzIG9rKSAKCiAgICAgICAgbXRyeCA9IG5ldyBNYXRyZVhhVG9rZW4oKTsKICAgICAgICBtdHJ4LnNldEFsbG93VHJhbnNmZXJUaW1lc3RhbXAoX2FsbG93VHJhbnNmZXJUaW1lc3RhbXApOwogICAgICAgIG10cnguc2V0Rm91bmRlcihvd25lcik7CiAgICAgICAgbXRyeC5taW50KG93bmVyLCBfb3duZXJUb2tlbnMpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IENhbGN1bGF0ZXMgY3VycmVudCBwcmljZSByYXRlIChob3cgbWFueSBNVFJYIHlvdSBnZXQgZm9yIDEgRVRIKQogICAgKiBAcmV0dXJuIGNhbGN1bGF0ZWQgcHJpY2Ugb3IgemVybyBpZiBjcm9kc2FsZSBub3Qgc3RhcnRlZCBvciBmaW5pc2hlZAogICAgKi8KICAgIGZ1bmN0aW9uIGN1cnJlbnRQcmljZSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICBpZiggKG5vdyA8IHN0YXJ0VGltZXN0YW1wKSB8fCBmaW5hbGl6ZWQpIHJldHVybiAwOwogICAgICAgIGZvcih1aW50IGk9MDsgaSA8IHBlcmlvZHMubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZihub3cgPCBwZXJpb2RzW2ldKXsKICAgICAgICAgICAgICAgIHJldHVybiBwcmljZXNbaV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICAvKioKICAgICogQGRldiBTaG93cyBpZiBjcm93ZHNhbGUgaXMgcnVubmluZwogICAgKi8gCiAgICBmdW5jdGlvbiBjcm93ZHNhbGVSdW5uaW5nKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMoYm9vbCl7CiAgICAgICAgcmV0dXJuICAobm93ID4gc3RhcnRUaW1lc3RhbXApICYmICAobm93IDw9IGVuZFRpbWVzdGFtcCkgJiYgKGF2YWlsYWJsZVN1cHBseSA+IDApICYmICFmaW5hbGl6ZWQ7CiAgICB9CiAgICAvKioKICAgICogQGRldiBCdXkgTWF0cmVYYSB0b2tlbnMKICAgICovCiAgICBmdW5jdGlvbigpIHBheWFibGUgdmFsaWRHYXNQcmljZSBjcm93ZHNhbGVJc1J1bm5pbmcgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgdWludDI1NiBwcmljZSA9IGN1cnJlbnRQcmljZSgpOwogICAgICAgIGFzc2VydChwcmljZSA+IDApOwogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gcHJpY2UubXVsKG1zZy52YWx1ZSk7CiAgICAgICAgYXNzZXJ0KHRva2VucyA+IDApOwogICAgICAgIHJlcXVpcmUoYXZhaWxhYmxlU3VwcGx5IC0gdG9rZW5zID49IDApOwoKICAgICAgICBjb250cmlidXRpb25zW21zZy5zZW5kZXJdID0gY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXS5hZGQobXNnLnZhbHVlKTsKICAgICAgICB0b3RhbENvbGxlY3RlZCA9IHRvdGFsQ29sbGVjdGVkLmFkZChtc2cudmFsdWUpOwogICAgICAgIGF2YWlsYWJsZVN1cHBseSA9IGF2YWlsYWJsZVN1cHBseS5zdWIodG9rZW5zKTsKICAgICAgICBtdHJ4Lm1pbnQobXNnLnNlbmRlciwgdG9rZW5zKTsKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgdG9rZW5zKTsKICAgIH0gCgogICAgLyoqCiAgICAqIEBkZXYgU2VuZHMgYWxsIGNvbnRyaWJ1dGVkIGV0aGVyIGJhY2sgaWYgbWluaW11bSBjYXAgaXMgbm90IHJlYWNoZWQgYnkgdGhlIGVuZCBvZiBjcm93ZHNhbGUKICAgICovCiAgICBmdW5jdGlvbiBjbGFpbVJlZnVuZCgpIHB1YmxpYyBjcm93ZHNhbGVGYWlsZWQgewogICAgICAgIHJlcXVpcmUoY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXSA+IDApOwoKICAgICAgICB1aW50MjU2IHJlZnVuZCA9IGNvbnRyaWJ1dGlvbnNbbXNnLnNlbmRlcl07CiAgICAgICAgY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZWZ1bmQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFNlbmRzIGNvbGxlY3RlZCBmdW5kcyB0byBvd25lcgogICAgKiBNYXkgYmUgZXhlY3V0ZWQgb25seSBpZiBnb2FsIHJlYWNoZWQgYW5kIG5vIHJlZnVuZHMgYXJlIHBvc3NpYmxlCiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kcyh1aW50MjU2IGFtb3VudCkgcHVibGljIG9ubHlPd25lciBnb2FsUmVhY2hlZCB7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEZpbmFsaXplcyBJQ08gd2hlbiBvbmUgb2YgY29uZGl0aW9ucyBtZXQ6CiAgICAqIC0gZW5kIHRpbWUgcmVhY2hlZCBPUgogICAgKiAtIG5vIG1vcmUgdG9rZW5zIGF2YWlsYWJsZSAoY2FwIHJlYWNoZWQpIE9SCiAgICAqIC0gbWVzc2FnZSBzZW50IGJ5IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gZmluYWxpemVDcm93ZGZ1bmRpbmcoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUgKCAobm93ID4gZW5kVGltZXN0YW1wKSB8fCAoYXZhaWxhYmxlU3VwcGx5ID09IDApIHx8IChtc2cuc2VuZGVyID09IG93bmVyKSApOwogICAgICAgIGZpbmFsaXplZCA9IG10cnguZmluaXNoTWludGluZygpOwogICAgICAgIG10cngudHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgfSAKCn0='.
	

]
