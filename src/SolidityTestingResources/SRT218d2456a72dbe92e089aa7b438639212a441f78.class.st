Class {
	#name : #SRT218d2456a72dbe92e089aa7b438639212a441f78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT218d2456a72dbe92e089aa7b438639212a441f78 >> base64 [
	^ ''.
	

]
