Class {
	#name : #SRTcc13fc627effd6e35d2d2706ea3c4d7396c610ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc13fc627effd6e35d2d2706ea3c4d7396c610ea >> base64 [
	^ ''.
	

]
