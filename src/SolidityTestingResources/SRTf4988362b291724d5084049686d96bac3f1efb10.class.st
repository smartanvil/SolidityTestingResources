Class {
	#name : #SRTf4988362b291724d5084049686d96bac3f1efb10,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4988362b291724d5084049686d96bac3f1efb10 >> base64 [
	^ 'LyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzdXBwbHkpIHt9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkge30KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykge30KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKCmNvbnRyYWN0IFdyYXBwZXJMb2NrIGlzIEJhc2ljVG9rZW4gewoKICBhZGRyZXNzIFpFUk9FWF9QUk9YWSA9IDB4OGRhMGQ4MGY1MDA3ZWYxZTQzMWRkMjEyNzE3OGQyMjRlMzJjMmVmNDsKICBhZGRyZXNzIEVUSEZJTkVYOwoKICBzdHJpbmcgcHVibGljIG5hbWU7CiAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgdWludCBwdWJsaWMgZGVjaW1hbHM7CiAgYWRkcmVzcyBwdWJsaWMgb3JpZ2luYWxUb2tlbjsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgZGVwb3NpdExvY2s7CgogIGZ1bmN0aW9uIFdyYXBwZXJMb2NrKGFkZHJlc3MgX29yaWdpbmFsVG9rZW4sIHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2RlY2ltYWxzKSB7CiAgICBvcmlnaW5hbFRva2VuID0gX29yaWdpbmFsVG9rZW47CiAgICBuYW1lID0gX25hbWU7CiAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7CiAgICBFVEhGSU5FWCA9IDB4NUEyMTQzQjg5NEM5RThkOERGZTJBMGU4QjgwZDdEQjI2ODlmQzM4MjsKICB9CgogIGZ1bmN0aW9uIGRlcG9zaXQodWludCBfdmFsdWUsIHVpbnQgX2ZvclRpbWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSAoX2ZvclRpbWUgPj0gMSk7CiAgICByZXF1aXJlIChub3cgKyBfZm9yVGltZSAqIDEgaG91cnMgPj0gZGVwb3NpdExvY2tbbXNnLnNlbmRlcl0pOwogICAgc3VjY2VzcyA9IEVSQzIwSW50ZXJmYWNlKG9yaWdpbmFsVG9rZW4pLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBfdmFsdWUpOwogICAgaWYoc3VjY2VzcykgewogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChfdmFsdWUpOwogICAgICBkZXBvc2l0TG9ja1ttc2cuc2VuZGVyXSA9IG5vdyArIF9mb3JUaW1lICogMSBob3VyczsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzLCB1aW50IF92YWx1ZSwgdWludCBzaWduYXR1cmVWYWxpZFVudGlsQmxvY2spIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZShiYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gX3ZhbHVlKTsKICAgIGlmIChub3cgPiBkZXBvc2l0TG9ja1ttc2cuc2VuZGVyXSl7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgIHN1Y2Nlc3MgPSBFUkMyMEludGVyZmFjZShvcmlnaW5hbFRva2VuKS50cmFuc2Zlcihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQogICAgZWxzZSB7CiAgICAgIHJlcXVpcmUoYmxvY2subnVtYmVyIDwgc2lnbmF0dXJlVmFsaWRVbnRpbEJsb2NrKTsKICAgICAgcmVxdWlyZShpc1ZhbGlkU2lnbmF0dXJlKEVUSEZJTkVYLCBrZWNjYWsyNTYobXNnLnNlbmRlciwgX3ZhbHVlLCBzaWduYXR1cmVWYWxpZFVudGlsQmxvY2spLCB2LCByLCBzKSk7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgIHN1Y2Nlc3MgPSBFUkMyMEludGVyZmFjZShvcmlnaW5hbFRva2VuKS50cmFuc2Zlcihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgewogICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gWkVST0VYX1BST1hZKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHJldHVybnMgKHVpbnQpIHsKICAgIGlmKHNwZW5kZXIgPT0gWkVST0VYX1BST1hZKSB7CiAgICAgIHJldHVybiAyKioyNTYgLSAxOwogICAgfQogIH0KCiAgZnVuY3Rpb24gaXNWYWxpZFNpZ25hdHVyZSgKICAgICAgICBhZGRyZXNzIHNpZ25lciwKICAgICAgICBieXRlczMyIGhhc2gsCiAgICAgICAgdWludDggdiwKICAgICAgICBieXRlczMyIHIsCiAgICAgICAgYnl0ZXMzMiBzKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gc2lnbmVyID09IGVjcmVjb3ZlcigKICAgICAgICAgICAga2VjY2FrMjU2KCJceDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XG4zMiIsIGhhc2gpLAogICAgICAgICAgICB2LAogICAgICAgICAgICByLAogICAgICAgICAgICBzCiAgICAgICAgKTsKICAgIH0KCn0='.
	

]
