Class {
	#name : #SRT65dBc8988557CE4260e84a467990a075115be771,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT65dBc8988557CE4260e84a467990a075115be771 >> base64 [
	^ ''.
	

]
