Class {
	#name : #SRT33803EdF44A71B9579f54cd429B53B06c0EeAb83,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33803EdF44A71B9579f54cd429B53B06c0EeAb83 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKKiBHb2xkR2F0ZSBUb2tlbiBDb250cmFjdAoqIENvcHlyaWdodCAmIzE2OTsgMjAxNyBieSBHb2xkR2F0ZSBodHRwczovL2dvbGRnYXRlLmlvCiovCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOyAgICAgIAogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovKioKICogQHRpdGxlIE93bmFibGUKICovCmNvbnRyYWN0IEdHT3duYWJsZSBpcyBPd25hYmxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7CgogIC8qKgogICAqIEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhbiBvdGhlck93bmVyLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3Mgb3RoZXJPd25lcikgb25seU93bmVyIHsKICAgIHJlcXVpcmUob3RoZXJPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgIG5ld093bmVyID0gb3RoZXJPd25lcjsKICB9CgogIC8qKgogICAqIEZpbmlzaCBvd25lcnNoaXAgdHJhbnNmZXIuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZU93bmVyc2hpcCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBuZXdPd25lcik7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICAgIG5ld093bmVyID0gYWRkcmVzcygwKTsKICB9Cn0KCgovKioKICogQHRpdGxlIE1vZGVyYXRlZAogKiBNb2RlcmF0b3IgY2FuIG1ha2UgdHJhbnNmZXJzIGZyb20gYW5kIHRvIGFueSBhY2NvdW50IChpbmNsdWRpbmcgZnJvemVuKS4KICovCmNvbnRyYWN0IEdHTW9kZXJhdGVkIGlzIEdHT3duYWJsZSB7CgogIGFkZHJlc3MgcHVibGljIG1vZGVyYXRvcjsKICBhZGRyZXNzIHB1YmxpYyBuZXdNb2RlcmF0b3I7CgogIC8qKgogICAqIFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgbW9kZXJhdG9yLgogICAqLwogIG1vZGlmaWVyIG9ubHlNb2RlcmF0b3IoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbW9kZXJhdG9yKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyIG9yIG1vZGVyYXRvci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXJPck1vZGVyYXRvcigpIHsKICAgIHJlcXVpcmUoKG1zZy5zZW5kZXIgPT0gbW9kZXJhdG9yKSB8fCAobXNnLnNlbmRlciA9PSBvd25lcikpOwogICAgXzsKICB9CgogIC8qKgogICAqIE1vZGVyYXRvciBzYW1lIGFzIG93bmVyCiAgICovCiAgZnVuY3Rpb24gR0dNb2RlcmF0ZWQoKXsKICAgIG1vZGVyYXRvciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBBbGxvd3MgdGhlIGN1cnJlbnQgbW9kZXJhdG9yIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGFuIG90aGVyTW9kZXJhdG9yLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyTW9kZXJhdG9yc2hpcChhZGRyZXNzIG90aGVyTW9kZXJhdG9yKSBvbmx5TW9kZXJhdG9yIHsKICAgIG5ld01vZGVyYXRvciA9IG90aGVyTW9kZXJhdG9yOwogIH0KCiAgLyoqCiAgICogQ29tcGxldGUgbW9kZXJhdG9yc2hpcCB0cmFuc2Zlci4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlTW9kZXJhdG9yc2hpcCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBuZXdNb2RlcmF0b3IpOwogICAgbW9kZXJhdG9yID0gbmV3TW9kZXJhdG9yOwogICAgbmV3TW9kZXJhdG9yID0gYWRkcmVzcygwKTsKICB9CgogIC8qKgogICAqIFJlbW92ZXMgbW9kZXJhdG9yIGZyb20gdGhlIGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIHJlbW92ZU1vZGVyYXRvcnNoaXAoKSBvbmx5T3duZXIgewogICAgICBtb2RlcmF0b3IgPSBhZGRyZXNzKDApOwogIH0KCiAgZnVuY3Rpb24gaGFzTW9kZXJhdG9yKCkgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgIHJldHVybiAobW9kZXJhdG9yICE9IGFkZHJlc3MoMCkpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKi8KY29udHJhY3QgR0dQYXVzYWJsZSBpcyBQYXVzYWJsZSwgR0dNb2RlcmF0ZWQgewogIC8qKgogICAqIGNhbGxlZCBieSB0aGUgb3duZXIgb3IgbW9kZXJhdG9yIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXJPck1vZGVyYXRvciB3aGVuTm90UGF1c2VkIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogY2FsbGVkIGJ5IHRoZSBvd25lciBvciBtb2RlcmF0b3IgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyT3JNb2RlcmF0b3Igd2hlblBhdXNlZCB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICogSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgLyoqCiAgICogdHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgLy8gdG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIGZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQogIAogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIFBhdXNhYmxlIHRva2VuIHdpdGggbW9kZXJhdG9yIHJvbGUgYW5kIGZyZWV6ZSBhZGRyZXNzIGltcGxlbWVudGF0aW9uCiAqKi8KY29udHJhY3QgTW9kVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgR0dQYXVzYWJsZSB7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBmcm96ZW47CgogIC8qKgogICAqIGNoZWNrIGlmIGdpdmVuIGFkZHJlc3MgaXMgZnJvemVuLiBGcmVlemUgd29ya3Mgb25seSBpZiBtb2RlcmF0b3Igcm9sZSBpcyBhY3RpdmUKICAgKi8KICBmdW5jdGlvbiBpc0Zyb3plbihhZGRyZXNzIF9hZGRyKSBjb25zdGFudCByZXR1cm5zIChib29sKXsKICAgICAgcmV0dXJuIGZyb3plbltfYWRkcl0gJiYgaGFzTW9kZXJhdG9yKCk7CiAgfQoKICAvKioKICAgKiBGcmVlemVzIGFkZHJlc3MgKG5vIHRyYW5zZmVyIGNhbiBiZSBtYWRlIGZyb20gb3IgdG8gdGhpcyBhZGRyZXNzKS4KICAgKi8KICBmdW5jdGlvbiBmcmVlemUoYWRkcmVzcyBfYWRkcikgb25seU1vZGVyYXRvciB7CiAgICAgIGZyb3plbltfYWRkcl0gPSB0cnVlOwogIH0KCiAgLyoqCiAgICogVW5mcmVlemVzIGZyb3plbiBhZGRyZXNzLgogICAqLwogIGZ1bmN0aW9uIHVuZnJlZXplKGFkZHJlc3MgX2FkZHIpIG9ubHlNb2RlcmF0b3IgewogICAgICBmcm96ZW5bX2FkZHJdID0gZmFsc2U7CiAgfQoKICAvKioKICAgKiBEZWNsaW5lcyB0cmFuc2ZlcnMgZnJvbS90byBmcm96ZW4gYWRkcmVzc2VzLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKCFpc0Zyb3plbihtc2cuc2VuZGVyKSk7CiAgICByZXF1aXJlKCFpc0Zyb3plbihfdG8pKTsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBEZWNsaW5lcyB0cmFuc2ZlcnMgZnJvbS90by9ieSBmcm96ZW4gYWRkcmVzc2VzLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZSghaXNGcm96ZW4obXNnLnNlbmRlcikpOwogICAgcmVxdWlyZSghaXNGcm96ZW4oX2Zyb20pKTsKICAgIHJlcXVpcmUoIWlzRnJvemVuKF90bykpOwogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQWxsb3dzIG1vZGVyYXRvciB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLgogICAqLwogIGZ1bmN0aW9uIG1vZGVyYXRvclRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlNb2RlcmF0b3IgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9Cgpjb250cmFjdCBHb2xkR2F0ZSBpcyBNb2RUb2tlbiB7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCB2ZXJzaW9uID0gIjEuMC4wIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiR29sZEdhdGUiOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkJHRyI7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICBmdW5jdGlvbiBHb2xkR2F0ZSh1aW50MjU2IF9pbml0aWFsU3VwcGx5KSB7ICAgCiAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbFN1cHBseTsKICB9Cn0='.
	

]
