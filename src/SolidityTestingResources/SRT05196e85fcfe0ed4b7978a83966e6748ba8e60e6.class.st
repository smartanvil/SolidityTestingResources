Class {
	#name : #SRT05196e85fcfe0ed4b7978a83966e6748ba8e60e6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT05196e85fcfe0ed4b7978a83966e6748ba8e60e6 >> base64 [
	^ ''.
	

]
