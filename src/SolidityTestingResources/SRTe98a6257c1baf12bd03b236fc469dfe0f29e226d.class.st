Class {
	#name : #SRTe98a6257c1baf12bd03b236fc469dfe0f29e226d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe98a6257c1baf12bd03b236fc469dfe0f29e226d >> base64 [
	^ ''.
	

]
