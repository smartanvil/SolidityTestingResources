Class {
	#name : #SRT1a55ae1553e5f41966fd8a204422e379713d1d24,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1a55ae1553e5f41966fd8a204422e379713d1d24 >> base64 [
	^ ''.
	

]
