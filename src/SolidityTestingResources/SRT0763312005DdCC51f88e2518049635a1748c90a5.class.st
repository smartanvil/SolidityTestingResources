Class {
	#name : #SRT0763312005DdCC51f88e2518049635a1748c90a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0763312005DdCC51f88e2518049635a1748c90a5 >> base64 [
	^ ''.
	

]
