Class {
	#name : #SRTc0506ceb264b057182a4c3ab8a0b910a545479f0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0506ceb264b057182a4c3ab8a0b910a545479f0 >> base64 [
	^ ''.
	

]
