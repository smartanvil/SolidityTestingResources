Class {
	#name : #SRT1b05e6557768650c0df0c9377c32c621ac1ccf17,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1b05e6557768650c0df0c9377c32c621ac1ccf17 >> base64 [
	^ ''.
	

]
