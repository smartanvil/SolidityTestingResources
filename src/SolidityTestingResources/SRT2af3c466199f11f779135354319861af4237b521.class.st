Class {
	#name : #SRT2af3c466199f11f779135354319861af4237b521,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2af3c466199f11f779135354319861af4237b521 >> base64 [
	^ ''.
	

]
