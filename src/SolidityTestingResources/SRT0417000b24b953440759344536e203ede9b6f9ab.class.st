Class {
	#name : #SRT0417000b24b953440759344536e203ede9b6f9ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0417000b24b953440759344536e203ede9b6f9ab >> base64 [
	^ ''.
	

]
