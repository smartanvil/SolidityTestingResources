Class {
	#name : #SRTde9c81e767f7df2f613f046f64ed7bce75166b5f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTde9c81e767f7df2f613f046f64ed7bce75166b5f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiBjb250cmFjdHMvS25vd3NDb25zdGFudHMuc29sCgovLyBUaGVzZSBhcmUgdGhlIHNwZWNpZmljYXRpb25zIG9mIHRoZSBjb250cmFjdCwgdW5saWtlbHkgdG8gY2hhbmdlCmNvbnRyYWN0IEtub3dzQ29uc3RhbnRzIHsKICAgIC8vIFRoZSBmaXhlZCBVU0QgcHJpY2UgcGVyIEJOVFkKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEZJWEVEX1BSRVNBTEVfVVNEX0VUSEVSX1BSSUNFID0gMzU1OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlDUk9fRE9MTEFSU19QRVJfQk5UWV9NQUlOU0FMRSA9IDE2NTAwOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlDUk9fRE9MTEFSU19QRVJfQk5UWV9QUkVTQUxFID0gMTMyMDA7CgogICAgLy8gQ29udHJpYnV0aW9uIGNvbnN0YW50cwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgSEFSRF9DQVBfVVNEID0gMTUwMDAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBVU0QgdGhlIG1heGltdW0gdG90YWwgY29sbGVjdGVkIGFtb3VudAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYSU1VTV9DT05UUklCVVRJT05fV0hJVEVMSVNUX1BFUklPRF9VU0QgPSAxNTAwOyAvLyBpbiBVU0QgdGhlIG1heGltdW0gY29udHJpYnV0aW9uIGFtb3VudCBkdXJpbmcgdGhlIHdoaXRlbGlzdCBwZXJpb2QKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWElNVU1fQ09OVFJJQlVUSU9OX0xJTUlURURfUEVSSU9EX1VTRCA9IDEwMDAwOyAgLy8gaW4gVVNEIHRoZSBtYXhpbXVtIGNvbnRyaWJ1dGlvbiBhbW91bnQgYWZ0ZXIgdGhlIHdoaXRlbGlzdCBwZXJpb2QgZW5kcwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX0dBU19QUklDRSA9IDcwICogKDEwICoqIDkpOyAgICAgICAgICAgICAgICAgICAvLyBNYXggZ2FzIHByaWNlIG9mIDcwIGd3ZWkKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9HQVMgPSA1MDAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF4IGdhcyB0aGF0IGNhbiBiZSBzZW50IHdpdGggdHgKCiAgICAvLyBUaW1lIGNvbnN0YW50cwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgU0FMRV9TVEFSVF9EQVRFID0gMTUxMzM0NjQwMDsgICAgICAgICAgICAgICAgICAgIC8vIGluIHVuaXggdGltZXN0YW1wIERlYyAxNXRoIEAgMTU6MDAgQ0VUCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBXSElURUxJU1RfRU5EX0RBVEUgPSBTQUxFX1NUQVJUX0RBVEUgKyAyNCBob3VyczsgLy8gRW5kIHdoaXRlbGlzdCAyNCBob3VycyBhZnRlciBzYWxlIHN0YXJ0IGRhdGUvdGltZQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTElNSVRTX0VORF9EQVRFID0gU0FMRV9TVEFSVF9EQVRFICsgNDggaG91cnM7ICAgIC8vIEVuZCBhbGwgbGltaXRzIDQ4IGhvdXJzIGFmdGVyIHRoZSBzYWxlIHN0YXJ0IGRhdGUKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFNBTEVfRU5EX0RBVEUgPSBTQUxFX1NUQVJUX0RBVEUgKyA0IHdlZWtzOyAgICAgICAvLyBlbmQgc2FsZSBpbiBmb3VyIHdlZWtzCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBVTkZSRUVaRV9EQVRFID0gU0FMRV9TVEFSVF9EQVRFICsgNzYgd2Vla3M7ICAgICAgLy8gQm91bnR5MHggUmVzZXJ2ZSBsb2NrZWQgZm9yIDE4IG1vbnRocwoKICAgIGZ1bmN0aW9uIEtub3dzQ29uc3RhbnRzKCkgcHVibGljIHt9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL293bmVyc2hpcC9Pd25hYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0VSQzIwQmFzaWMuc29sCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjAuc29sCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vU2FmZUVSQzIwLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyKEVSQzIwQmFzaWMgdG9rZW4sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlckZyb20oRVJDMjAgdG9rZW4sIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vVG9rZW5WZXN0aW5nLnNvbAoKLyoqCiAqIEB0aXRsZSBUb2tlblZlc3RpbmcKICogQGRldiBBIHRva2VuIGhvbGRlciBjb250cmFjdCB0aGF0IGNhbiByZWxlYXNlIGl0cyB0b2tlbiBiYWxhbmNlIGdyYWR1YWxseSBsaWtlIGEKICogdHlwaWNhbCB2ZXN0aW5nIHNjaGVtZSwgd2l0aCBhIGNsaWZmIGFuZCB2ZXN0aW5nIHBlcmlvZC4gT3B0aW9uYWxseSByZXZvY2FibGUgYnkgdGhlCiAqIG93bmVyLgogKi8KY29udHJhY3QgVG9rZW5WZXN0aW5nIGlzIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIHVzaW5nIFNhZmVFUkMyMCBmb3IgRVJDMjBCYXNpYzsKCiAgZXZlbnQgUmVsZWFzZWQodWludDI1NiBhbW91bnQpOwogIGV2ZW50IFJldm9rZWQoKTsKCiAgLy8gYmVuZWZpY2lhcnkgb2YgdG9rZW5zIGFmdGVyIHRoZXkgYXJlIHJlbGVhc2VkCiAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CgogIHVpbnQyNTYgcHVibGljIGNsaWZmOwogIHVpbnQyNTYgcHVibGljIHN0YXJ0OwogIHVpbnQyNTYgcHVibGljIGR1cmF0aW9uOwoKICBib29sIHB1YmxpYyByZXZvY2FibGU7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHJlbGVhc2VkOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHJldm9rZWQ7CgogIC8qKgogICAqIEBkZXYgQ3JlYXRlcyBhIHZlc3RpbmcgY29udHJhY3QgdGhhdCB2ZXN0cyBpdHMgYmFsYW5jZSBvZiBhbnkgRVJDMjAgdG9rZW4gdG8gdGhlCiAgICogX2JlbmVmaWNpYXJ5LCBncmFkdWFsbHkgaW4gYSBsaW5lYXIgZmFzaGlvbiB1bnRpbCBfc3RhcnQgKyBfZHVyYXRpb24uIEJ5IHRoZW4gYWxsCiAgICogb2YgdGhlIGJhbGFuY2Ugd2lsbCBoYXZlIHZlc3RlZC4KICAgKiBAcGFyYW0gX2JlbmVmaWNpYXJ5IGFkZHJlc3Mgb2YgdGhlIGJlbmVmaWNpYXJ5IHRvIHdob20gdmVzdGVkIHRva2VucyBhcmUgdHJhbnNmZXJyZWQKICAgKiBAcGFyYW0gX2NsaWZmIGR1cmF0aW9uIGluIHNlY29uZHMgb2YgdGhlIGNsaWZmIGluIHdoaWNoIHRva2VucyB3aWxsIGJlZ2luIHRvIHZlc3QKICAgKiBAcGFyYW0gX2R1cmF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHMgb2YgdGhlIHBlcmlvZCBpbiB3aGljaCB0aGUgdG9rZW5zIHdpbGwgdmVzdAogICAqIEBwYXJhbSBfcmV2b2NhYmxlIHdoZXRoZXIgdGhlIHZlc3RpbmcgaXMgcmV2b2NhYmxlIG9yIG5vdAogICAqLwogIGZ1bmN0aW9uIFRva2VuVmVzdGluZyhhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfc3RhcnQsIHVpbnQyNTYgX2NsaWZmLCB1aW50MjU2IF9kdXJhdGlvbiwgYm9vbCBfcmV2b2NhYmxlKSBwdWJsaWMgewogICAgcmVxdWlyZShfYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9jbGlmZiA8PSBfZHVyYXRpb24pOwoKICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgcmV2b2NhYmxlID0gX3Jldm9jYWJsZTsKICAgIGR1cmF0aW9uID0gX2R1cmF0aW9uOwogICAgY2xpZmYgPSBfc3RhcnQuYWRkKF9jbGlmZik7CiAgICBzdGFydCA9IF9zdGFydDsKICB9CgogIC8qKgogICAqIEBub3RpY2UgVHJhbnNmZXJzIHZlc3RlZCB0b2tlbnMgdG8gYmVuZWZpY2lhcnkuCiAgICogQHBhcmFtIHRva2VuIEVSQzIwIHRva2VuIHdoaWNoIGlzIGJlaW5nIHZlc3RlZAogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2UoRVJDMjBCYXNpYyB0b2tlbikgcHVibGljIHsKICAgIHVpbnQyNTYgdW5yZWxlYXNlZCA9IHJlbGVhc2FibGVBbW91bnQodG9rZW4pOwoKICAgIHJlcXVpcmUodW5yZWxlYXNlZCA+IDApOwoKICAgIHJlbGVhc2VkW3Rva2VuXSA9IHJlbGVhc2VkW3Rva2VuXS5hZGQodW5yZWxlYXNlZCk7CgogICAgdG9rZW4uc2FmZVRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB1bnJlbGVhc2VkKTsKCiAgICBSZWxlYXNlZCh1bnJlbGVhc2VkKTsKICB9CgogIC8qKgogICAqIEBub3RpY2UgQWxsb3dzIHRoZSBvd25lciB0byByZXZva2UgdGhlIHZlc3RpbmcuIFRva2VucyBhbHJlYWR5IHZlc3RlZAogICAqIHJlbWFpbiBpbiB0aGUgY29udHJhY3QsIHRoZSByZXN0IGFyZSByZXR1cm5lZCB0byB0aGUgb3duZXIuCiAgICogQHBhcmFtIHRva2VuIEVSQzIwIHRva2VuIHdoaWNoIGlzIGJlaW5nIHZlc3RlZAogICAqLwogIGZ1bmN0aW9uIHJldm9rZShFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocmV2b2NhYmxlKTsKICAgIHJlcXVpcmUoIXJldm9rZWRbdG9rZW5dKTsKCiAgICB1aW50MjU2IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CgogICAgdWludDI1NiB1bnJlbGVhc2VkID0gcmVsZWFzYWJsZUFtb3VudCh0b2tlbik7CiAgICB1aW50MjU2IHJlZnVuZCA9IGJhbGFuY2Uuc3ViKHVucmVsZWFzZWQpOwoKICAgIHJldm9rZWRbdG9rZW5dID0gdHJ1ZTsKCiAgICB0b2tlbi5zYWZlVHJhbnNmZXIob3duZXIsIHJlZnVuZCk7CgogICAgUmV2b2tlZCgpOwogIH0KCiAgLyoqCiAgICogQGRldiBDYWxjdWxhdGVzIHRoZSBhbW91bnQgdGhhdCBoYXMgYWxyZWFkeSB2ZXN0ZWQgYnV0IGhhc24ndCBiZWVuIHJlbGVhc2VkIHlldC4KICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgdG9rZW4gd2hpY2ggaXMgYmVpbmcgdmVzdGVkCiAgICovCiAgZnVuY3Rpb24gcmVsZWFzYWJsZUFtb3VudChFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdmVzdGVkQW1vdW50KHRva2VuKS5zdWIocmVsZWFzZWRbdG9rZW5dKTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlcyB0aGUgYW1vdW50IHRoYXQgaGFzIGFscmVhZHkgdmVzdGVkLgogICAqIEBwYXJhbSB0b2tlbiBFUkMyMCB0b2tlbiB3aGljaCBpcyBiZWluZyB2ZXN0ZWQKICAgKi8KICBmdW5jdGlvbiB2ZXN0ZWRBbW91bnQoRVJDMjBCYXNpYyB0b2tlbikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjdXJyZW50QmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHVpbnQyNTYgdG90YWxCYWxhbmNlID0gY3VycmVudEJhbGFuY2UuYWRkKHJlbGVhc2VkW3Rva2VuXSk7CgogICAgaWYgKG5vdyA8IGNsaWZmKSB7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChub3cgPj0gc3RhcnQuYWRkKGR1cmF0aW9uKSB8fCByZXZva2VkW3Rva2VuXSkgewogICAgICByZXR1cm4gdG90YWxCYWxhbmNlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRvdGFsQmFsYW5jZS5tdWwobm93LnN1YihzdGFydCkpLmRpdihkdXJhdGlvbik7CiAgICB9CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQm91bnR5MHhUb2tlblZlc3Rpbmcuc29sCgpjb250cmFjdCBCb3VudHkweFRva2VuVmVzdGluZyBpcyBLbm93c0NvbnN0YW50cywgVG9rZW5WZXN0aW5nIHsKICAgIGZ1bmN0aW9uIEJvdW50eTB4VG9rZW5WZXN0aW5nKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50IGR1cmF0aW9uV2Vla3MpCiAgICAgICAgVG9rZW5WZXN0aW5nKF9iZW5lZmljaWFyeSwgV0hJVEVMSVNUX0VORF9EQVRFLCAwLCBkdXJhdGlvbldlZWtzICogMSB3ZWVrcywgZmFsc2UpCiAgICAgICAgcHVibGljCiAgICB7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9BZGRyZXNzV2hpdGVsaXN0LnNvbAoKLy8gQSBzaW1wbGUgY29udHJhY3QgdGhhdCBzdG9yZXMgYSB3aGl0ZWxpc3Qgb2YgYWRkcmVzc2VzLCB3aGljaCB0aGUgb3duZXIgbWF5IHVwZGF0ZQpjb250cmFjdCBBZGRyZXNzV2hpdGVsaXN0IGlzIE93bmFibGUgewogICAgLy8gdGhlIGFkZHJlc3NlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiB0aGUgd2hpdGVsaXN0CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyB3aGl0ZWxpc3RlZDsKCiAgICBmdW5jdGlvbiBBZGRyZXNzV2hpdGVsaXN0KCkgcHVibGljIHsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1doaXRlbGlzdGVkKGFkZHJlc3MgYWRkcikgdmlldyBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB3aGl0ZWxpc3RlZFthZGRyXTsKICAgIH0KCiAgICBldmVudCBMb2dXaGl0ZWxpc3RBZGQoYWRkcmVzcyBpbmRleGVkIGFkZHIpOwoKICAgIC8vIGFkZCB0aGVzZSBhZGRyZXNzZXMgdG8gdGhlIHdoaXRlbGlzdAogICAgZnVuY3Rpb24gYWRkVG9XaGl0ZWxpc3QoYWRkcmVzc1tdIGFkZHJlc3NlcykgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICghd2hpdGVsaXN0ZWRbYWRkcmVzc2VzW2ldXSkgewogICAgICAgICAgICAgICAgd2hpdGVsaXN0ZWRbYWRkcmVzc2VzW2ldXSA9IHRydWU7CiAgICAgICAgICAgICAgICBMb2dXaGl0ZWxpc3RBZGQoYWRkcmVzc2VzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZXZlbnQgTG9nV2hpdGVsaXN0UmVtb3ZlKGFkZHJlc3MgaW5kZXhlZCBhZGRyKTsKCiAgICAvLyByZW1vdmUgdGhlc2UgYWRkcmVzc2VzIGZyb20gdGhlIHdoaXRlbGlzdAogICAgZnVuY3Rpb24gcmVtb3ZlRnJvbVdoaXRlbGlzdChhZGRyZXNzW10gYWRkcmVzc2VzKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHdoaXRlbGlzdGVkW2FkZHJlc3Nlc1tpXV0pIHsKICAgICAgICAgICAgICAgIHdoaXRlbGlzdGVkW2FkZHJlc3Nlc1tpXV0gPSBmYWxzZTsKICAgICAgICAgICAgICAgIExvZ1doaXRlbGlzdFJlbW92ZShhZGRyZXNzZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0tub3dzVGltZS5zb2wKCmNvbnRyYWN0IEtub3dzVGltZSB7CiAgICBmdW5jdGlvbiBLbm93c1RpbWUoKSBwdWJsaWMgewogICAgfQoKICAgIGZ1bmN0aW9uIGN1cnJlbnRUaW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBub3c7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9CbnR5RXhjaGFuZ2VSYXRlQ2FsY3VsYXRvci5zb2wKCi8vIFRoaXMgY29udHJhY3QgZG9lcyB0aGUgbWF0aCB0byBmaWd1cmUgb3V0IHRoZSBCTlRZIHBhaWQgcGVyIFdFSSwgYmFzZWQgb24gdGhlIFVTRCBldGhlciBwcmljZQpjb250cmFjdCBCbnR5RXhjaGFuZ2VSYXRlQ2FsY3VsYXRvciBpcyBLbm93c1RpbWUsIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgV0VJX1BFUl9FVEggPSAxMCAqKiAxODsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNSUNST0RPTExBUlNfUEVSX0RPTExBUiA9IDEwICoqIDY7CgogICAgdWludCBwdWJsaWMgYm50eU1pY3JvZG9sbGFyUHJpY2U7CgogICAgdWludCBwdWJsaWMgVVNERXRoZXJQcmljZTsKCiAgICB1aW50IHB1YmxpYyBmaXhVU0RQcmljZVRpbWU7CgogICAgLy8gYSBtaWNyb2RvbGxhciBpcyBvbmUgbWlsbGlvbnRoIG9mIGEgZG9sbGFyLCBvciBvbmUgdGVuLXRob3VzYW5kdGggb2YgYSBjZW50CiAgICBmdW5jdGlvbiBCbnR5RXhjaGFuZ2VSYXRlQ2FsY3VsYXRvcih1aW50IF9ibnR5TWljcm9kb2xsYXJQcmljZSwgdWludCBfVVNERXRoZXJQcmljZSwgdWludCBfZml4VVNEUHJpY2VUaW1lKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoX2JudHlNaWNyb2RvbGxhclByaWNlID4gMCk7CiAgICAgICAgcmVxdWlyZShfVVNERXRoZXJQcmljZSA+IDApOwoKICAgICAgICBibnR5TWljcm9kb2xsYXJQcmljZSA9IF9ibnR5TWljcm9kb2xsYXJQcmljZTsKICAgICAgICBmaXhVU0RQcmljZVRpbWUgPSBfZml4VVNEUHJpY2VUaW1lOwogICAgICAgIFVTREV0aGVyUHJpY2UgPSBfVVNERXRoZXJQcmljZTsKICAgIH0KCiAgICAvLyB0aGUgb3duZXIgY2FuIGNoYW5nZSB0aGUgdXNkIGV0aGVyIHByaWNlCiAgICBmdW5jdGlvbiBzZXRVU0RFdGhlclByaWNlKHVpbnQgX1VTREV0aGVyUHJpY2UpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoY3VycmVudFRpbWUoKSA8IGZpeFVTRFByaWNlVGltZSk7CiAgICAgICAgcmVxdWlyZShfVVNERXRoZXJQcmljZSA+IDApOwoKICAgICAgICBVU0RFdGhlclByaWNlID0gX1VTREV0aGVyUHJpY2U7CiAgICB9CgogICAgLy8gcmV0dXJucyB0aGUgbnVtYmVyIG9mIHdlaSBzb21lIGFtb3VudCBvZiB1c2QKICAgIGZ1bmN0aW9uIHVzZFRvV2VpKHVpbnQgdXNkKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIFdFSV9QRVJfRVRILm11bCh1c2QpLmRpdihVU0RFdGhlclByaWNlKTsKICAgIH0KCiAgICAvLyByZXR1cm5zIHRoZSBudW1iZXIgb2YgYm50eSBwZXIgc29tZSBhbW91bnQgaW4gd2VpCiAgICBmdW5jdGlvbiB3ZWlUb0JudHkodWludCBhbXRXZWkpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gVVNERXRoZXJQcmljZS5tdWwoTUlDUk9ET0xMQVJTX1BFUl9ET0xMQVIpLm11bChhbXRXZWkpLmRpdihibnR5TWljcm9kb2xsYXJQcmljZSk7CiAgICB9Cn0KCi8vIEZpbGU6IG1pbmltZXRva2VuL2NvbnRyYWN0cy9Db250cm9sbGVkLnNvbAoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgICAvLy8gQG5vdGljZSBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJvbGxlciBpcyB0aGUgb25seSBhZGRyZXNzIHRoYXQgY2FuIGNhbGwKICAgIC8vLyAgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyb2xsZXIpOyBfOyB9CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgcHVibGljIHsgY29udHJvbGxlciA9IG1zZy5zZW5kZXI7fQoKICAgIC8vLyBAbm90aWNlIENoYW5nZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIF9uZXdDb250cm9sbGVyIFRoZSBuZXcgY29udHJvbGxlciBvZiB0aGUgY29udHJhY3QKICAgIGZ1bmN0aW9uIGNoYW5nZUNvbnRyb2xsZXIoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBjb250cm9sbGVyID0gX25ld0NvbnRyb2xsZXI7CiAgICB9Cn0KCi8vIEZpbGU6IG1pbmltZXRva2VuL2NvbnRyYWN0cy9Ub2tlbkNvbnRyb2xsZXIuc29sCgovLy8gQGRldiBUaGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCBtdXN0IGltcGxlbWVudCB0aGVzZSBmdW5jdGlvbnMKY29udHJhY3QgVG9rZW5Db250cm9sbGVyIHsKICAgIC8vLyBAbm90aWNlIENhbGxlZCB3aGVuIGBfb3duZXJgIHNlbmRzIGV0aGVyIHRvIHRoZSBNaW5pTWUgVG9rZW4gY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgc2VudCB0aGUgZXRoZXIgdG8gY3JlYXRlIHRva2VucwogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXRoZXIgaXMgYWNjZXB0ZWQsIGZhbHNlIGlmIGl0IHRocm93cwogICAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgX293bmVyKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zKGJvb2wpOwoKICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGEgdG9rZW4gdHJhbnNmZXIgYWxsb3dpbmcgdGhlCiAgICAvLy8gIGNvbnRyb2xsZXIgdG8gcmVhY3QgaWYgZGVzaXJlZAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgb3JpZ2luIG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGRlc3RpbmF0aW9uIG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBGYWxzZSBpZiB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBhdXRob3JpemUgdGhlIHRyYW5zZmVyCiAgICBmdW5jdGlvbiBvblRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zKGJvb2wpOwoKICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGFuIGFwcHJvdmFsIGFsbG93aW5nIHRoZQogICAgLy8vICBjb250cm9sbGVyIHRvIHJlYWN0IGlmIGRlc2lyZWQKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgY2FsbHMgYGFwcHJvdmUoKWAKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIHNwZW5kZXIgaW4gdGhlIGBhcHByb3ZlKClgIGNhbGwKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgICAvLy8gQHJldHVybiBGYWxzZSBpZiB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBhdXRob3JpemUgdGhlIGFwcHJvdmFsCiAgICBmdW5jdGlvbiBvbkFwcHJvdmUoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2Ftb3VudCkgcHVibGljCiAgICAgICAgcmV0dXJucyhib29sKTsKfQoKLy8gRmlsZTogbWluaW1ldG9rZW4vY29udHJhY3RzL01pbmlNZVRva2VuLnNvbAoKLyoKICAgIENvcHlyaWdodCAyMDE2LCBKb3JkaSBCYXlsaW5hCgogICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgogICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiAgICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KICovCgovLy8gQHRpdGxlIE1pbmlNZVRva2VuIENvbnRyYWN0Ci8vLyBAYXV0aG9yIEpvcmRpIEJheWxpbmEKLy8vIEBkZXYgVGhpcyB0b2tlbiBjb250cmFjdCdzIGdvYWwgaXMgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gY2xvbmUgdGhpcwovLy8gIHRva2VuIHVzaW5nIHRoZSB0b2tlbiBkaXN0cmlidXRpb24gYXQgYSBnaXZlbiBibG9jaywgdGhpcyB3aWxsIGFsbG93IERBTydzCi8vLyAgYW5kIERBcHBzIHRvIHVwZ3JhZGUgdGhlaXIgZmVhdHVyZXMgaW4gYSBkZWNlbnRyYWxpemVkIG1hbm5lciB3aXRob3V0Ci8vLyAgYWZmZWN0aW5nIHRoZSBvcmlnaW5hbCB0b2tlbgovLy8gQGRldiBJdCBpcyBFUkMyMCBjb21wbGlhbnQsIGJ1dCBzdGlsbCBuZWVkcyB0byB1bmRlciBnbyBmdXJ0aGVyIHRlc3RpbmcuCgoKCgpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIGZyb20sIHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9kYXRhKSBwdWJsaWM7Cn0KCi8vLyBAZGV2IFRoZSBhY3R1YWwgdG9rZW4gY29udHJhY3QsIHRoZSBkZWZhdWx0IGNvbnRyb2xsZXIgaXMgdGhlIG1zZy5zZW5kZXIKLy8vICB0aGF0IGRlcGxveXMgdGhlIGNvbnRyYWN0LCBzbyB1c3VhbGx5IHRoaXMgdG9rZW4gd2lsbCBiZSBkZXBsb3llZCBieSBhCi8vLyAgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCwgd2hpY2ggR2l2ZXRoIHdpbGwgY2FsbCBhICJDYW1wYWlnbiIKY29udHJhY3QgTWluaU1lVG9rZW4gaXMgQ29udHJvbGxlZCB7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAvL1RoZSBUb2tlbidzIG5hbWU6IGUuZy4gRGlnaXhEQU8gVG9rZW5zCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgIC8vTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBzbWFsbGVzdCB1bml0CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgIC8vQW4gaWRlbnRpZmllcjogZS5nLiBSRVAKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICdNTVRfMC4yJzsgLy9BbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUKCgogICAgLy8vIEBkZXYgYENoZWNrcG9pbnRgIGlzIHRoZSBzdHJ1Y3R1cmUgdGhhdCBhdHRhY2hlcyBhIGJsb2NrIG51bWJlciB0byBhCiAgICAvLy8gIGdpdmVuIHZhbHVlLCB0aGUgYmxvY2sgbnVtYmVyIGF0dGFjaGVkIGlzIHRoZSBvbmUgdGhhdCBsYXN0IGNoYW5nZWQgdGhlCiAgICAvLy8gIHZhbHVlCiAgICBzdHJ1Y3QgIENoZWNrcG9pbnQgewoKICAgICAgICAvLyBgZnJvbUJsb2NrYCBpcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIHZhbHVlIHdhcyBnZW5lcmF0ZWQgZnJvbQogICAgICAgIHVpbnQxMjggZnJvbUJsb2NrOwoKICAgICAgICAvLyBgdmFsdWVgIGlzIHRoZSBhbW91bnQgb2YgdG9rZW5zIGF0IGEgc3BlY2lmaWMgYmxvY2sgbnVtYmVyCiAgICAgICAgdWludDEyOCB2YWx1ZTsKICAgIH0KCiAgICAvLyBgcGFyZW50VG9rZW5gIGlzIHRoZSBUb2tlbiBhZGRyZXNzIHRoYXQgd2FzIGNsb25lZCB0byBwcm9kdWNlIHRoaXMgdG9rZW47CiAgICAvLyAgaXQgd2lsbCBiZSAweDAgZm9yIGEgdG9rZW4gdGhhdCB3YXMgbm90IGNsb25lZAogICAgTWluaU1lVG9rZW4gcHVibGljIHBhcmVudFRva2VuOwoKICAgIC8vIGBwYXJlbnRTbmFwU2hvdEJsb2NrYCBpcyB0aGUgYmxvY2sgbnVtYmVyIGZyb20gdGhlIFBhcmVudCBUb2tlbiB0aGF0IHdhcwogICAgLy8gIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgQ2xvbmUgVG9rZW4KICAgIHVpbnQgcHVibGljIHBhcmVudFNuYXBTaG90QmxvY2s7CgogICAgLy8gYGNyZWF0aW9uQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgQ2xvbmUgVG9rZW4gd2FzIGNyZWF0ZWQKICAgIHVpbnQgcHVibGljIGNyZWF0aW9uQmxvY2s7CgogICAgLy8gYGJhbGFuY2VzYCBpcyB0aGUgbWFwIHRoYXQgdHJhY2tzIHRoZSBiYWxhbmNlIG9mIGVhY2ggYWRkcmVzcywgaW4gdGhpcwogICAgLy8gIGNvbnRyYWN0IHdoZW4gdGhlIGJhbGFuY2UgY2hhbmdlcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIGNoYW5nZQogICAgLy8gIG9jY3VycmVkIGlzIGFsc28gaW5jbHVkZWQgaW4gdGhlIG1hcAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBDaGVja3BvaW50W10pIGJhbGFuY2VzOwoKICAgIC8vIGBhbGxvd2VkYCB0cmFja3MgYW55IGV4dHJhIHRyYW5zZmVyIHJpZ2h0cyBhcyBpbiBhbGwgRVJDMjAgdG9rZW5zCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLy8gVHJhY2tzIHRoZSBoaXN0b3J5IG9mIHRoZSBgdG90YWxTdXBwbHlgIG9mIHRoZSB0b2tlbgogICAgQ2hlY2twb2ludFtdIHRvdGFsU3VwcGx5SGlzdG9yeTsKCiAgICAvLyBGbGFnIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgdG9rZW4gaXMgdHJhbnNmZXJhYmxlIG9yIG5vdC4KICAgIGJvb2wgcHVibGljIHRyYW5zZmVyc0VuYWJsZWQ7CgogICAgLy8gVGhlIGZhY3RvcnkgdXNlZCB0byBjcmVhdGUgbmV3IGNsb25lIHRva2VucwogICAgTWluaU1lVG9rZW5GYWN0b3J5IHB1YmxpYyB0b2tlbkZhY3Rvcnk7CgovLy8vLy8vLy8vLy8vLy8vCi8vIENvbnN0cnVjdG9yCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBNaW5pTWVUb2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5GYWN0b3J5IFRoZSBhZGRyZXNzIG9mIHRoZSBNaW5pTWVUb2tlbkZhY3RvcnkgY29udHJhY3QgdGhhdAogICAgLy8vICB3aWxsIGNyZWF0ZSB0aGUgQ2xvbmUgdG9rZW4gY29udHJhY3RzLCB0aGUgdG9rZW4gZmFjdG9yeSBuZWVkcyB0byBiZQogICAgLy8vICBkZXBsb3llZCBmaXJzdAogICAgLy8vIEBwYXJhbSBfcGFyZW50VG9rZW4gQWRkcmVzcyBvZiB0aGUgcGFyZW50IHRva2VuLCBzZXQgdG8gMHgwIGlmIGl0IGlzIGEKICAgIC8vLyAgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF9wYXJlbnRTbmFwU2hvdEJsb2NrIEJsb2NrIG9mIHRoZSBwYXJlbnQgdG9rZW4gdGhhdCB3aWxsCiAgICAvLy8gIGRldGVybWluZSB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIGNsb25lIHRva2VuLCBzZXQgdG8gMCBpZiBpdAogICAgLy8vICBpcyBhIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5OYW1lIE5hbWUgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblN5bWJvbCBUb2tlbiBTeW1ib2wgZm9yIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgSWYgdHJ1ZSwgdG9rZW5zIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2ZlcnJlZAogICAgZnVuY3Rpb24gTWluaU1lVG9rZW4oCiAgICAgICAgYWRkcmVzcyBfdG9rZW5GYWN0b3J5LAogICAgICAgIGFkZHJlc3MgX3BhcmVudFRva2VuLAogICAgICAgIHVpbnQgX3BhcmVudFNuYXBTaG90QmxvY2ssCiAgICAgICAgc3RyaW5nIF90b2tlbk5hbWUsCiAgICAgICAgdWludDggX2RlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgX3Rva2VuU3ltYm9sLAogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQKICAgICkgcHVibGljIHsKICAgICAgICB0b2tlbkZhY3RvcnkgPSBNaW5pTWVUb2tlbkZhY3RvcnkoX3Rva2VuRmFjdG9yeSk7CiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lCiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkZWNpbWFscwogICAgICAgIHN5bWJvbCA9IF90b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sCiAgICAgICAgcGFyZW50VG9rZW4gPSBNaW5pTWVUb2tlbihfcGFyZW50VG9rZW4pOwogICAgICAgIHBhcmVudFNuYXBTaG90QmxvY2sgPSBfcGFyZW50U25hcFNob3RCbG9jazsKICAgICAgICB0cmFuc2ZlcnNFbmFibGVkID0gX3RyYW5zZmVyc0VuYWJsZWQ7CiAgICAgICAgY3JlYXRpb25CbG9jayA9IGJsb2NrLm51bWJlcjsKICAgIH0KCgovLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEVSQzIwIE1ldGhvZHMKLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF9hbW91bnRgIHRva2VucyB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwogICAgICAgIHJldHVybiBkb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX2Ftb3VudGAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudAogICAgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIFRoZSBjb250cm9sbGVyIG9mIHRoaXMgY29udHJhY3QgY2FuIG1vdmUgdG9rZW5zIGFyb3VuZCBhdCB3aWxsLAoKICAgICAgICAvLyAgY29udHJvbGxlciBvZiB0aGlzIGNvbnRyYWN0LCB3aGljaCBpbiBtb3N0IHNpdHVhdGlvbnMgc2hvdWxkIGJlCiAgICAgICAgLy8gIGFub3RoZXIgb3BlbiBzb3VyY2Ugc21hcnQgY29udHJhY3Qgb3IgMHgwCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlcikgewogICAgICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwoKICAgICAgICAgICAgLy8gVGhlIHN0YW5kYXJkIEVSQyAyMCB0cmFuc2ZlckZyb20gZnVuY3Rpb25hbGl0eQogICAgICAgICAgICBpZiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPCBfYW1vdW50KSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkb1RyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgaXMgdGhlIGFjdHVhbCB0cmFuc2ZlciBmdW5jdGlvbiBpbiB0aGUgdG9rZW4gY29udHJhY3QsIGl0IGNhbgogICAgLy8vICBvbmx5IGJlIGNhbGxlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhpcyBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBkb1RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQKICAgICkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CgogICAgICAgICAgIGlmIChfYW1vdW50ID09IDApIHsKICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgfQoKICAgICAgICAgICByZXF1aXJlKHBhcmVudFNuYXBTaG90QmxvY2sgPCBibG9jay5udW1iZXIpOwoKICAgICAgICAgICAvLyBEbyBub3QgYWxsb3cgdHJhbnNmZXIgdG8gMHgwIG9yIHRoZSB0b2tlbiBjb250cmFjdCBpdHNlbGYKICAgICAgICAgICByZXF1aXJlKChfdG8gIT0gMCkgJiYgKF90byAhPSBhZGRyZXNzKHRoaXMpKSk7CgogICAgICAgICAgIC8vIElmIHRoZSBhbW91bnQgYmVpbmcgdHJhbnNmZXJlZCBpcyBtb3JlIHRoYW4gdGhlIGJhbGFuY2Ugb2YgdGhlCiAgICAgICAgICAgLy8gIGFjY291bnQgdGhlIHRyYW5zZmVyIHJldHVybnMgZmFsc2UKICAgICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlRnJvbSA9IGJhbGFuY2VPZkF0KF9mcm9tLCBibG9jay5udW1iZXIpOwogICAgICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgewogICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgfQoKICAgICAgICAgICAvLyBBbGVydHMgdGhlIHRva2VuIGNvbnRyb2xsZXIgb2YgdGhlIHRyYW5zZmVyCiAgICAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsKICAgICAgICAgICAgICAgcmVxdWlyZShUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikub25UcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KSk7CiAgICAgICAgICAgfQoKICAgICAgICAgICAvLyBGaXJzdCB1cGRhdGUgdGhlIGJhbGFuY2UgYXJyYXkgd2l0aCB0aGUgbmV3IHZhbHVlIGZvciB0aGUgYWRkcmVzcwogICAgICAgICAgIC8vICBzZW5kaW5nIHRoZSB0b2tlbnMKICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19mcm9tXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBUaGVuIHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgICAgLy8gIHJlY2VpdmluZyB0aGUgdG9rZW5zCiAgICAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mQXQoX3RvLCBibG9jay5udW1iZXIpOwogICAgICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50ID49IHByZXZpb3VzQmFsYW5jZVRvKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfdG9dLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCB0aGUgY3VycmVudCBibG9jawogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VPZkF0KF9vd25lciwgYmxvY2subnVtYmVyKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYuIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBFUkMyMCBhcHByb3ZlIGZ1bmN0aW9uCiAgICAvLy8gIHRvIGJlIGEgbGl0dGxlIGJpdCBzYWZlcgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSBhcHByb3ZlIGZ1bmN0aW9uIGNhbGwKICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgewogICAgICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vbkFwcHJvdmUobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpKTsKICAgICAgICB9CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIHJlYWQgdGhlIGBhbGxvd2VkW11gIG1hcAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIG9mIF9vd25lciB0aGF0IF9zcGVuZGVyIGlzIGFsbG93ZWQKICAgIC8vLyAgdG8gc3BlbmQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcgogICAgKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZiwgYW5kIHRoZW4gYSBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgaW4gdGhlIGNvbnRyYWN0IHRoYXQgaXMKICAgIC8vLyAgYmVpbmcgYXBwcm92ZWQsIGBfc3BlbmRlcmAuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIHVzZSB0aGVpciB0b2tlbnMgdG8KICAgIC8vLyAgaW50ZXJhY3Qgd2l0aCBjb250cmFjdHMgaW4gb25lIGZ1bmN0aW9uIGNhbGwgaW5zdGVhZCBvZiB0d28KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZnVuY3Rpb24gY2FsbCB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50LCBieXRlcyBfZXh0cmFEYXRhCiAgICApIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGFwcHJvdmUoX3NwZW5kZXIsIF9hbW91bnQpKTsKCiAgICAgICAgQXBwcm92ZUFuZENhbGxGYWxsQmFjayhfc3BlbmRlcikucmVjZWl2ZUFwcHJvdmFsKAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBfYW1vdW50LAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICBfZXh0cmFEYXRhCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucwogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHlBdChibG9jay5udW1iZXIpOwogICAgfQoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gUXVlcnkgYmFsYW5jZSBhbmQgdG90YWxTdXBwbHkgaW4gSGlzdG9yeQovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHBhcmFtIF9ibG9ja051bWJlciBUaGUgYmxvY2sgbnVtYmVyIHdoZW4gdGhlIGJhbGFuY2UgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3MgX293bmVyLCB1aW50IF9ibG9ja051bWJlcikgcHVibGljIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludCkgewoKICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSBiYWxhbmNlIG9mIHRoZSB0b2tlbiBpcwogICAgICAgIC8vICByZXF1ZXN0ZWQgYmVmb3JlIGEgY2hlY2sgcG9pbnQgd2FzIGV2ZXIgY3JlYXRlZCBmb3IgdGhpcyB0b2tlbiwgaXQKICAgICAgICAvLyAgcmVxdWlyZXMgdGhhdCB0aGUgYHBhcmVudFRva2VuLmJhbGFuY2VPZkF0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGF0IHRva2VuIGFzIHRoaXMgY29udGFpbnMgaW5pdGlhbCBiYWxhbmNlIG9mCiAgICAgICAgLy8gIHRoaXMgdG9rZW4KICAgICAgICBpZiAoKGJhbGFuY2VzW19vd25lcl0ubGVuZ3RoID09IDApCiAgICAgICAgICAgIHx8IChiYWxhbmNlc1tfb3duZXJdWzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICAgaWYgKGFkZHJlc3MocGFyZW50VG9rZW4pICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi5iYWxhbmNlT2ZBdChfb3duZXIsIG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEhhcyBubyBwYXJlbnQKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CgogICAgICAgIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGV4cGVjdGVkIGJhbGFuY2UgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQoYmFsYW5jZXNbX293bmVyXSwgX2Jsb2NrTnVtYmVyKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgVG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgLgogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSB0b3RhbFN1cHBseSBpcyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUaGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBgX2Jsb2NrTnVtYmVyYAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHlBdCh1aW50IF9ibG9ja051bWJlcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCkgewoKICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSB0b3RhbFN1cHBseSBvZiB0aGUgdG9rZW4gaXMKICAgICAgICAvLyAgcmVxdWVzdGVkIGJlZm9yZSBhIGNoZWNrIHBvaW50IHdhcyBldmVyIGNyZWF0ZWQgZm9yIHRoaXMgdG9rZW4sIGl0CiAgICAgICAgLy8gIHJlcXVpcmVzIHRoYXQgdGhlIGBwYXJlbnRUb2tlbi50b3RhbFN1cHBseUF0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGlzIHRva2VuIGFzIHRoYXQgY29udGFpbnMgdG90YWxTdXBwbHkgb2YgdGhpcwogICAgICAgIC8vICB0b2tlbiBhdCB0aGlzIGJsb2NrIG51bWJlci4KICAgICAgICBpZiAoKHRvdGFsU3VwcGx5SGlzdG9yeS5sZW5ndGggPT0gMCkKICAgICAgICAgICAgfHwgKHRvdGFsU3VwcGx5SGlzdG9yeVswXS5mcm9tQmxvY2sgPiBfYmxvY2tOdW1iZXIpKSB7CiAgICAgICAgICAgIGlmIChhZGRyZXNzKHBhcmVudFRva2VuKSAhPSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50VG9rZW4udG90YWxTdXBwbHlBdChtaW4oX2Jsb2NrTnVtYmVyLCBwYXJlbnRTbmFwU2hvdEJsb2NrKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBleHBlY3RlZCB0b3RhbFN1cHBseSBkdXJpbmcgbm9ybWFsIHNpdHVhdGlvbnMKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWVBdCh0b3RhbFN1cHBseUhpc3RvcnksIF9ibG9ja051bWJlcik7CiAgICAgICAgfQogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBDbG9uZSBUb2tlbiBNZXRob2QKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIENyZWF0ZXMgYSBuZXcgY2xvbmUgdG9rZW4gd2l0aCB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gYmVpbmcKICAgIC8vLyAgdGhpcyB0b2tlbiBhdCBgX3NuYXBzaG90QmxvY2tgCiAgICAvLy8gQHBhcmFtIF9jbG9uZVRva2VuTmFtZSBOYW1lIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfY2xvbmVEZWNpbWFsVW5pdHMgTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBzbWFsbGVzdCB1bml0CiAgICAvLy8gQHBhcmFtIF9jbG9uZVRva2VuU3ltYm9sIFN5bWJvbCBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3NuYXBzaG90QmxvY2sgQmxvY2sgd2hlbiB0aGUgZGlzdHJpYnV0aW9uIG9mIHRoZSBwYXJlbnQgdG9rZW4gaXMKICAgIC8vLyAgY29waWVkIHRvIHNldCB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIG5ldyBjbG9uZSB0b2tlbjsKICAgIC8vLyAgaWYgdGhlIGJsb2NrIGlzIHplcm8gdGhhbiB0aGUgYWN0dWFsIGJsb2NrLCB0aGUgY3VycmVudCBibG9jayBpcyB1c2VkCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIFRydWUgaWYgdHJhbnNmZXJzIGFyZSBhbGxvd2VkIGluIHRoZSBjbG9uZQogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBNaW5pTWVUb2tlbiBDb250cmFjdAogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICBzdHJpbmcgX2Nsb25lVG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9jbG9uZURlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgX2Nsb25lVG9rZW5TeW1ib2wsCiAgICAgICAgdWludCBfc25hcHNob3RCbG9jaywKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgKSBwdWJsaWMgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgaWYgKF9zbmFwc2hvdEJsb2NrID09IDApIF9zbmFwc2hvdEJsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgIE1pbmlNZVRva2VuIGNsb25lVG9rZW4gPSB0b2tlbkZhY3RvcnkuY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgICAgIF9jbG9uZVRva2VuTmFtZSwKICAgICAgICAgICAgX2Nsb25lRGVjaW1hbFVuaXRzLAogICAgICAgICAgICBfY2xvbmVUb2tlblN5bWJvbCwKICAgICAgICAgICAgX3RyYW5zZmVyc0VuYWJsZWQKICAgICAgICAgICAgKTsKCiAgICAgICAgY2xvbmVUb2tlbi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOwoKICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0b2tlbiBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICBOZXdDbG9uZVRva2VuKGFkZHJlc3MoY2xvbmVUb2tlbiksIF9zbmFwc2hvdEJsb2NrKTsKICAgICAgICByZXR1cm4gYWRkcmVzcyhjbG9uZVRva2VuKTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gR2VuZXJhdGUgYW5kIGRlc3Ryb3kgdG9rZW5zCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBHZW5lcmF0ZXMgYF9hbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRoZSBuZXcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyBnZW5lcmF0ZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgZ2VuZXJhdGVkIGNvcnJlY3RseQogICAgZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbnMoYWRkcmVzcyBfb3duZXIsIHVpbnQgX2Ftb3VudAogICAgKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgY3VyVG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseSgpOwogICAgICAgIHJlcXVpcmUoY3VyVG90YWxTdXBwbHkgKyBfYW1vdW50ID49IGN1clRvdGFsU3VwcGx5KTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgdWludCBwcmV2aW91c0JhbGFuY2VUbyA9IGJhbGFuY2VPZihfb3duZXIpOwogICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50ID49IHByZXZpb3VzQmFsYW5jZVRvKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5ICsgX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKDAsIF9vd25lciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8vLyBAbm90aWNlIEJ1cm5zIGBfYW1vdW50YCB0b2tlbnMgZnJvbSBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGxvc2UgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgdG8gYnVybgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdG9rZW5zIGFyZSBidXJuZWQgY29ycmVjdGx5CiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQKICAgICkgb25seUNvbnRyb2xsZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IGN1clRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkoKTsKICAgICAgICByZXF1aXJlKGN1clRvdGFsU3VwcGx5ID49IF9hbW91bnQpOwogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlRnJvbSA9IGJhbGFuY2VPZihfb3duZXIpOwogICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlRnJvbSA+PSBfYW1vdW50KTsKICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KHRvdGFsU3VwcGx5SGlzdG9yeSwgY3VyVG90YWxTdXBwbHkgLSBfYW1vdW50KTsKICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19vd25lcl0sIHByZXZpb3VzQmFsYW5jZUZyb20gLSBfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihfb3duZXIsIDAsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBFbmFibGUgdG9rZW5zIHRyYW5zZmVycwovLy8vLy8vLy8vLy8vLy8vCgoKICAgIC8vLyBAbm90aWNlIEVuYWJsZXMgdG9rZW4gaG9sZGVycyB0byB0cmFuc2ZlciB0aGVpciB0b2tlbnMgZnJlZWx5IGlmIHRydWUKICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgVHJ1ZSBpZiB0cmFuc2ZlcnMgYXJlIGFsbG93ZWQgaW4gdGhlIGNsb25lCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2ZlcnMoYm9vbCBfdHJhbnNmZXJzRW5hYmxlZCkgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgICAgICB0cmFuc2ZlcnNFbmFibGVkID0gX3RyYW5zZmVyc0VuYWJsZWQ7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEludGVybmFsIGhlbHBlciBmdW5jdGlvbnMgdG8gcXVlcnkgYW5kIHNldCBhIHZhbHVlIGluIGEgc25hcHNob3QgYXJyYXkKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IGBnZXRWYWx1ZUF0YCByZXRyaWV2ZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgYXQgYSBnaXZlbiBibG9jayBudW1iZXIKICAgIC8vLyBAcGFyYW0gY2hlY2twb2ludHMgVGhlIGhpc3Rvcnkgb2YgdmFsdWVzIGJlaW5nIHF1ZXJpZWQKICAgIC8vLyBAcGFyYW0gX2Jsb2NrIFRoZSBibG9jayBudW1iZXIgdG8gcmV0cmlldmUgdGhlIHZhbHVlIGF0CiAgICAvLy8gQHJldHVybiBUaGUgbnVtYmVyIG9mIHRva2VucyBiZWluZyBxdWVyaWVkCiAgICBmdW5jdGlvbiBnZXRWYWx1ZUF0KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF9ibG9jawogICAgKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDsKCiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIHRoZSBhY3R1YWwgdmFsdWUKICAgICAgICBpZiAoX2Jsb2NrID49IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aC0xXS5mcm9tQmxvY2spCiAgICAgICAgICAgIHJldHVybiBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV0udmFsdWU7CiAgICAgICAgaWYgKF9ibG9jayA8IGNoZWNrcG9pbnRzWzBdLmZyb21CbG9jaykgcmV0dXJuIDA7CgogICAgICAgIC8vIEJpbmFyeSBzZWFyY2ggb2YgdGhlIHZhbHVlIGluIHRoZSBhcnJheQogICAgICAgIHVpbnQgbWluID0gMDsKICAgICAgICB1aW50IG1heCA9IGNoZWNrcG9pbnRzLmxlbmd0aC0xOwogICAgICAgIHdoaWxlIChtYXggPiBtaW4pIHsKICAgICAgICAgICAgdWludCBtaWQgPSAobWF4ICsgbWluICsgMSkvIDI7CiAgICAgICAgICAgIGlmIChjaGVja3BvaW50c1ttaWRdLmZyb21CbG9jazw9X2Jsb2NrKSB7CiAgICAgICAgICAgICAgICBtaW4gPSBtaWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtYXggPSBtaWQtMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbbWluXS52YWx1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBgdXBkYXRlVmFsdWVBdE5vd2AgdXNlZCB0byB1cGRhdGUgdGhlIGBiYWxhbmNlc2AgbWFwIGFuZCB0aGUKICAgIC8vLyAgYHRvdGFsU3VwcGx5SGlzdG9yeWAKICAgIC8vLyBAcGFyYW0gY2hlY2twb2ludHMgVGhlIGhpc3Rvcnkgb2YgZGF0YSBiZWluZyB1cGRhdGVkCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgbmV3IG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlQXROb3coQ2hlY2twb2ludFtdIHN0b3JhZ2UgY2hlY2twb2ludHMsIHVpbnQgX3ZhbHVlCiAgICApIGludGVybmFsICB7CiAgICAgICAgaWYgKChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkKICAgICAgICB8fCAoY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoIC0xXS5mcm9tQmxvY2sgPCBibG9jay5udW1iZXIpKSB7CiAgICAgICAgICAgICAgIENoZWNrcG9pbnQgc3RvcmFnZSBuZXdDaGVja1BvaW50ID0gY2hlY2twb2ludHNbIGNoZWNrcG9pbnRzLmxlbmd0aCsrIF07CiAgICAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQuZnJvbUJsb2NrID0gIHVpbnQxMjgoYmxvY2subnVtYmVyKTsKICAgICAgICAgICAgICAgbmV3Q2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsKICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2Ugb2xkQ2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aC0xXTsKICAgICAgICAgICAgICAgb2xkQ2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsKICAgICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGFkZHJlc3MgaXMgYSBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfYWRkciBUaGUgYWRkcmVzcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIGBfYWRkcmAgaXMgYSBjb250cmFjdAogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgICAgICB1aW50IHNpemU7CiAgICAgICAgaWYgKF9hZGRyID09IDApIHJldHVybiBmYWxzZTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHNpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICAgICAgfQogICAgICAgIHJldHVybiBzaXplPjA7CiAgICB9CgogICAgLy8vIEBkZXYgSGVscGVyIGZ1bmN0aW9uIHRvIHJldHVybiBhIG1pbiBiZXR3ZW4gdGhlIHR3byB1aW50cwogICAgZnVuY3Rpb24gbWluKHVpbnQgYSwgdWludCBiKSBwdXJlIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUaGUgZmFsbGJhY2sgZnVuY3Rpb246IElmIHRoZSBjb250cmFjdCdzIGNvbnRyb2xsZXIgaGFzIG5vdCBiZWVuCiAgICAvLy8gIHNldCB0byAwLCB0aGVuIHRoZSBgcHJveHlQYXltZW50YCBtZXRob2QgaXMgY2FsbGVkIHdoaWNoIHJlbGF5cyB0aGUKICAgIC8vLyAgZXRoZXIgYW5kIGNyZWF0ZXMgdG9rZW5zIGFzIGRlc2NyaWJlZCBpbiB0aGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdAogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoaXNDb250cmFjdChjb250cm9sbGVyKSk7CiAgICAgICAgcmVxdWlyZShUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikucHJveHlQYXltZW50LnZhbHVlKG1zZy52YWx1ZSkobXNnLnNlbmRlcikpOwogICAgfQoKLy8vLy8vLy8vLwovLyBTYWZldHkgTWV0aG9kcwovLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgYnkgdGhlIGNvbnRyb2xsZXIgdG8gZXh0cmFjdCBtaXN0YWtlbmx5CiAgICAvLy8gIHNlbnQgdG9rZW5zIHRvIHRoaXMgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF90b2tlbiBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyCiAgICAvLy8gIHNldCB0byAwIGluIGNhc2UgeW91IHdhbnQgdG8gZXh0cmFjdCBldGhlci4KICAgIGZ1bmN0aW9uIGNsYWltVG9rZW5zKGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgICAgIGlmIChfdG9rZW4gPT0gMHgwKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgTWluaU1lVG9rZW4gdG9rZW4gPSBNaW5pTWVUb2tlbihfdG9rZW4pOwogICAgICAgIHVpbnQgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICB0b2tlbi50cmFuc2Zlcihjb250cm9sbGVyLCBiYWxhbmNlKTsKICAgICAgICBDbGFpbWVkVG9rZW5zKF90b2tlbiwgY29udHJvbGxlciwgYmFsYW5jZSk7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEV2ZW50cwovLy8vLy8vLy8vLy8vLy8vCiAgICBldmVudCBDbGFpbWVkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfY29udHJvbGxlciwgdWludCBfYW1vdW50KTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsKICAgIGV2ZW50IE5ld0Nsb25lVG9rZW4oYWRkcmVzcyBpbmRleGVkIF9jbG9uZVRva2VuLCB1aW50IF9zbmFwc2hvdEJsb2NrKTsKICAgIGV2ZW50IEFwcHJvdmFsKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLAogICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICAgICk7Cgp9CgoKLy8vLy8vLy8vLy8vLy8vLwovLyBNaW5pTWVUb2tlbkZhY3RvcnkKLy8vLy8vLy8vLy8vLy8vLwoKLy8vIEBkZXYgVGhpcyBjb250cmFjdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGNsb25lIGNvbnRyYWN0cyBmcm9tIGEgY29udHJhY3QuCi8vLyAgSW4gc29saWRpdHkgdGhpcyBpcyB0aGUgd2F5IHRvIGNyZWF0ZSBhIGNvbnRyYWN0IGZyb20gYSBjb250cmFjdCBvZiB0aGUKLy8vICBzYW1lIGNsYXNzCmNvbnRyYWN0IE1pbmlNZVRva2VuRmFjdG9yeSB7CgogICAgLy8vIEBub3RpY2UgVXBkYXRlIHRoZSBEQXBwIGJ5IGNyZWF0aW5nIGEgbmV3IHRva2VuIHdpdGggbmV3IGZ1bmN0aW9uYWxpdGllcwogICAgLy8vICB0aGUgbXNnLnNlbmRlciBiZWNvbWVzIHRoZSBjb250cm9sbGVyIG9mIHRoaXMgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGJlaW5nIGNsb25lZAogICAgLy8vIEBwYXJhbSBfc25hcHNob3RCbG9jayBCbG9jayBvZiB0aGUgcGFyZW50IHRva2VuIHRoYXQgd2lsbAogICAgLy8vICBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5OYW1lIE5hbWUgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblN5bWJvbCBUb2tlbiBTeW1ib2wgZm9yIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgSWYgdHJ1ZSwgdG9rZW5zIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyB0b2tlbiBjb250cmFjdAogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwKICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICApIHB1YmxpYyByZXR1cm5zIChNaW5pTWVUb2tlbikgewogICAgICAgIE1pbmlNZVRva2VuIG5ld1Rva2VuID0gbmV3IE1pbmlNZVRva2VuKAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICBfcGFyZW50VG9rZW4sCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLAogICAgICAgICAgICBfdG9rZW5OYW1lLAogICAgICAgICAgICBfZGVjaW1hbFVuaXRzLAogICAgICAgICAgICBfdG9rZW5TeW1ib2wsCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgICAgICk7CgogICAgICAgIG5ld1Rva2VuLmNoYW5nZUNvbnRyb2xsZXIobXNnLnNlbmRlcik7CiAgICAgICAgcmV0dXJuIG5ld1Rva2VuOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQm91bnR5MHhUb2tlbi5zb2wKCmNvbnRyYWN0IEJvdW50eTB4VG9rZW4gaXMgTWluaU1lVG9rZW4gewogICAgZnVuY3Rpb24gQm91bnR5MHhUb2tlbihhZGRyZXNzIF90b2tlbkZhY3RvcnkpCiAgICAgICAgTWluaU1lVG9rZW4oCiAgICAgICAgICAgIF90b2tlbkZhY3RvcnksCiAgICAgICAgICAgIDB4MCwgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBwYXJlbnQgdG9rZW4KICAgICAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHNuYXBzaG90IGJsb2NrIG51bWJlciBmcm9tIHBhcmVudAogICAgICAgICAgICAiQm91bnR5MHggVG9rZW4iLCAgICAgICAgICAgLy8gVG9rZW4gbmFtZQogICAgICAgICAgICAxOCAgICwgICAgICAgICAgICAgICAgICAgICAgLy8gRGVjaW1hbHMKICAgICAgICAgICAgIkJOVFkiLCAgICAgICAgICAgICAgICAgICAgIC8vIFN5bWJvbAogICAgICAgICAgICBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSB0cmFuc2ZlcnMKICAgICAgICApCiAgICAgICAgcHVibGljCiAgICB7CiAgICB9CgogICAgLy8gZ2VuZXJhdGUgdG9rZW5zIGZvciBtYW55IGFkZHJlc3NlcyB3aXRoIGEgc2luZ2xlIHRyYW5zYWN0aW9uCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVRva2Vuc0FsbChhZGRyZXNzW10gX293bmVycywgdWludFtdIF9hbW91bnRzKSBvbmx5Q29udHJvbGxlciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX293bmVycy5sZW5ndGggPT0gX2Ftb3VudHMubGVuZ3RoKTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX293bmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKGdlbmVyYXRlVG9rZW5zKF9vd25lcnNbaV0sIF9hbW91bnRzW2ldKSk7CiAgICAgICAgfQogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvaW50ZXJmYWNlcy9Cb3VudHkweFByZXNhbGVJLnNvbAoKLyoqCiAqIFRoaXMgaW50ZXJmYWNlIGRlc2NyaWJlcyB0aGUgb25seSBmdW5jdGlvbiB3ZSB3aWxsIGJlIGNhbGxpbmcgZnJvbSB0aGUgQm91bnR5MHhQcmVzYWxlSSBjb250cmFjdAogKi8KaW50ZXJmYWNlIEJvdW50eTB4UHJlc2FsZUkgewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgYWRkcikgcHVibGljIHJldHVybnMgKHVpbnQgYmFsYW5jZSk7Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9tYXRoL01hdGguc29sCgovKioKICogQHRpdGxlIE1hdGgKICogQGRldiBBc3NvcnRlZCBtYXRoIG9wZXJhdGlvbnMKICovCgpsaWJyYXJ5IE1hdGggewogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Cb3VudHkweFByZXNhbGVEaXN0cmlidXRvci5zb2wKCi8qClRoaXMgY29udHJhY3QgbWFuYWdlcyBjb21wZW5zYXRpb24gb2YgdGhlIHByZXNhbGUgaW52ZXN0b3JzLCBiYXNlZCBvbiB0aGUgY29udHJpYnV0aW9uIGJhbGFuY2VzIHJlY29yZGVkIGluIHRoZSBwcmVzYWxlCmNvbnRyYWN0LgoqLwpjb250cmFjdCBCb3VudHkweFByZXNhbGVEaXN0cmlidXRvciBpcyBLbm93c0NvbnN0YW50cywgQm50eUV4Y2hhbmdlUmF0ZUNhbGN1bGF0b3IgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgQm91bnR5MHhQcmVzYWxlSSBwdWJsaWMgZGVwbG95ZWRQcmVzYWxlQ29udHJhY3Q7CiAgICBCb3VudHkweFRva2VuIHB1YmxpYyBib3VudHkweFRva2VuOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgdG9rZW5zUGFpZDsKCiAgICBmdW5jdGlvbiBCb3VudHkweFByZXNhbGVEaXN0cmlidXRvcihCb3VudHkweFRva2VuIF9ib3VudHkweFRva2VuLCBCb3VudHkweFByZXNhbGVJIF9kZXBsb3llZFByZXNhbGVDb250cmFjdCkKICAgICAgICBCbnR5RXhjaGFuZ2VSYXRlQ2FsY3VsYXRvcihNSUNST19ET0xMQVJTX1BFUl9CTlRZX1BSRVNBTEUsIEZJWEVEX1BSRVNBTEVfVVNEX0VUSEVSX1BSSUNFLCAwKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGJvdW50eTB4VG9rZW4gPSBfYm91bnR5MHhUb2tlbjsKICAgICAgICBkZXBsb3llZFByZXNhbGVDb250cmFjdCA9IF9kZXBsb3llZFByZXNhbGVDb250cmFjdDsKICAgIH0KCiAgICBldmVudCBPblByZVNhbGVCdXllckNvbXBlbnNhdGVkKGFkZHJlc3MgaW5kZXhlZCBjb250cmlidXRvciwgdWludCBudW1Ub2tlbnMpOwoKICAgIC8qKgogICAgICogQ29tcGVuc2F0ZSB0aGUgcHJlc2FsZSBpbnZlc3RvcnMgYXQgdGhlIGFkZHJlc3NlcyBwcm92aWRlciBiYXNlZCBvbiB0aGVpciBjb250cmlidXRpb25zIGR1cmluZyB0aGUgcHJlc2FsZQogICAgICovCiAgICBmdW5jdGlvbiBjb21wZW5zYXRlUHJlU2FsZUludmVzdG9ycyhhZGRyZXNzW10gcHJlU2FsZUludmVzdG9ycykgcHVibGljIHsKICAgICAgICAvLyBpdGVyYXRlIHRocm91Z2ggZWFjaCBpbnZlc3RvcgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHByZVNhbGVJbnZlc3RvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBpbnZlc3RvckFkZHJlc3MgPSBwcmVTYWxlSW52ZXN0b3JzW2ldOwoKICAgICAgICAgICAgLy8gdGhlIGRlcGxveWVkIHByZXNhbGUgY29udHJhY3QgdHJhY2tlZCB0aGUgYmFsYW5jZSBvZiBlYWNoIGNvbnRyaWJ1dG9yCiAgICAgICAgICAgIHVpbnQgd2VpQ29udHJpYnV0ZWQgPSBkZXBsb3llZFByZXNhbGVDb250cmFjdC5iYWxhbmNlT2YoaW52ZXN0b3JBZGRyZXNzKTsKCiAgICAgICAgICAgIC8vIHRoZXkgY29udHJpYnV0ZWQgYW5kIGhhdmVuJ3QgYmVlbiBwYWlkCiAgICAgICAgICAgIGlmICh3ZWlDb250cmlidXRlZCA+IDAgJiYgdG9rZW5zUGFpZFtpbnZlc3RvckFkZHJlc3NdID09IDApIHsKICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgdGhlIGFtb3VudCBvZiB3ZWkgdGhleSBjb250cmlidXRlZCB0byB0aGUgYm50eQogICAgICAgICAgICAgICAgdWludCBibnR5Q29tcGVuc2F0aW9uID0gTWF0aC5taW4yNTYod2VpVG9CbnR5KHdlaUNvbnRyaWJ1dGVkKSwgYm91bnR5MHhUb2tlbi5iYWxhbmNlT2YodGhpcykpOwoKICAgICAgICAgICAgICAgIC8vIG1hcmsgdGhlbSBwYWlkIGZpcnN0CiAgICAgICAgICAgICAgICB0b2tlbnNQYWlkW2ludmVzdG9yQWRkcmVzc10gPSBibnR5Q29tcGVuc2F0aW9uOwoKICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRva2VucyB0byBwcmVzYWxlIGNvbnRyaWJ1dG9yIGFkZHJlc3MKICAgICAgICAgICAgICAgIHJlcXVpcmUoYm91bnR5MHhUb2tlbi50cmFuc2ZlcihpbnZlc3RvckFkZHJlc3MsIGJudHlDb21wZW5zYXRpb24pKTsKCiAgICAgICAgICAgICAgICAvLyBsb2cgdGhlIGV2ZW50CiAgICAgICAgICAgICAgICBPblByZVNhbGVCdXllckNvbXBlbnNhdGVkKGludmVzdG9yQWRkcmVzcywgYm50eUNvbXBlbnNhdGlvbik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Cb3VudHkweFJlc2VydmVIb2xkZXIuc29sCgovKioKICogQHRpdGxlIEJvdW50eTB4UmVzZXJ2ZUhvbGRlcgogKiBAZGV2IEJvdW50eTB4UmVzZXJ2ZUhvbGRlciBpcyBhIHRva2VuIGhvbGRlciBjb250cmFjdCB0aGF0IHdpbGwgYWxsb3cgYQogKiBiZW5lZmljaWFyeSB0byBleHRyYWN0IHRoZSB0b2tlbnMgYWZ0ZXIgYSBnaXZlbiByZWxlYXNlIHRpbWUKICovCmNvbnRyYWN0IEJvdW50eTB4UmVzZXJ2ZUhvbGRlciBpcyBLbm93c0NvbnN0YW50cywgS25vd3NUaW1lIHsKICAgIC8vIEJvdW50eTB4VG9rZW4gYWRkcmVzcwogICAgQm91bnR5MHhUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgLy8gYmVuZWZpY2lhcnkgb2YgdG9rZW5zIGFmdGVyIHRoZXkgYXJlIHJlbGVhc2VkCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgICBmdW5jdGlvbiBCb3VudHkweFJlc2VydmVIb2xkZXIoQm91bnR5MHhUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3Rva2VuICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX2JlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKICAgIH0KCiAgICAvKioKICAgICAqIEBub3RpY2UgVHJhbnNmZXJzIHRva2VucyBoZWxkIGJ5IHRpbWVsb2NrIHRvIGJlbmVmaWNpYXJ5LgogICAgICovCiAgICBmdW5jdGlvbiByZWxlYXNlKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKGN1cnJlbnRUaW1lKCkgPj0gVU5GUkVFWkVfREFURSk7CgogICAgICAgIHVpbnQgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CgogICAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIGFtb3VudCkpOwogICAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbGlmZWN5Y2xlL1BhdXNhYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQm91bnR5MHhDcm93ZHNhbGUuc29sCgpjb250cmFjdCBCb3VudHkweENyb3dkc2FsZSBpcyBLbm93c1RpbWUsIEtub3dzQ29uc3RhbnRzLCBPd25hYmxlLCBCbnR5RXhjaGFuZ2VSYXRlQ2FsY3VsYXRvciwgQWRkcmVzc1doaXRlbGlzdCwgUGF1c2FibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgLy8gQ3Jvd2RzYWxlIGNvbnRyYWN0cwogICAgQm91bnR5MHhUb2tlbiBwdWJsaWMgYm91bnR5MHhUb2tlbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXdhcmQgdG9rZW5zIHRvIGNvbXBlbnNhdGUgaW4KCiAgICAvLyBDb250cmlidXRpb24gYW1vdW50cwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgY29udHJpYnV0aW9uQW1vdW50czsgICAgICAgICAgICAvLyBUaGUgYW1vdW50IHRoYXQgZWFjaCBhZGRyZXNzIGhhcyBjb250cmlidXRlZAogICAgdWludCBwdWJsaWMgdG90YWxDb250cmlidXRpb25zOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBjb250cmlidXRpb25zIGdpdmVuCgogICAgLy8gRXZlbnRzCiAgICBldmVudCBPbkNvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgY29udHJpYnV0b3IsIGJvb2wgaW5kZXhlZCBkdXJpbmdXaGl0ZWxpc3RQZXJpb2QsIHVpbnQgaW5kZXhlZCBjb250cmlidXRlZFdlaSwgdWludCBibnR5QXdhcmRlZCwgdWludCByZWZ1bmRlZFdlaSk7CiAgICBldmVudCBPbldpdGhkcmF3KGFkZHJlc3MgdG8sIHVpbnQgYW1vdW50KTsKCiAgICBmdW5jdGlvbiBCb3VudHkweENyb3dkc2FsZShCb3VudHkweFRva2VuIF9ib3VudHkweFRva2VuLCB1aW50IF9VU0RFdGhlclByaWNlKQogICAgICAgIEJudHlFeGNoYW5nZVJhdGVDYWxjdWxhdG9yKE1JQ1JPX0RPTExBUlNfUEVSX0JOVFlfTUFJTlNBTEUsIF9VU0RFdGhlclByaWNlLCBTQUxFX1NUQVJUX0RBVEUpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgYm91bnR5MHhUb2tlbiA9IF9ib3VudHkweFRva2VuOwogICAgfQoKICAgIC8vIHRoZSBjcm93ZHNhbGUgb3duZXIgbWF5IHdpdGhkcmF3IGFueSBhbW91bnQgb2YgZXRoZXIgZnJvbSB0aGlzIGNvbnRyYWN0IGF0IGFueSB0aW1lCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIE9uV2l0aGRyYXcobXNnLnNlbmRlciwgYW1vdW50KTsKICAgIH0KCiAgICAvLyBBbGwgY29udHJpYnV0aW9ucyBjb21lIHRocm91Z2ggdGhlIGZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHB1YmxpYyB3aGVuTm90UGF1c2VkIHsKICAgICAgICB1aW50IHRpbWUgPSBjdXJyZW50VGltZSgpOwoKICAgICAgICAvLyByZXF1aXJlIHRoZSBzYWxlIGhhcyBzdGFydGVkCiAgICAgICAgcmVxdWlyZSh0aW1lID49IFNBTEVfU1RBUlRfREFURSk7CgogICAgICAgIC8vIHJlcXVpcmUgdGhhdCB0aGUgc2FsZSBoYXMgbm90IGVuZGVkCiAgICAgICAgcmVxdWlyZSh0aW1lIDwgU0FMRV9FTkRfREFURSk7CgogICAgICAgIC8vIG1heGltdW0gY29udHJpYnV0aW9uIGZyb20gdGhpcyB0cmFuc2FjdGlvbiBpcyB0cmFja2VkIGluIHRoaXMgdmFyaWFibGUKICAgICAgICB1aW50IG1heGltdW1Db250cmlidXRpb24gPSB1c2RUb1dlaShIQVJEX0NBUF9VU0QpLnN1Yih0b3RhbENvbnRyaWJ1dGlvbnMpOwoKICAgICAgICAvLyBzdG9yZSB3aGV0aGVyIHRoZSBjb250cmlidXRpb24gaXMgbWFkZSBkdXJpbmcgdGhlIHdoaXRlbGlzdCBwZXJpb2QKICAgICAgICBib29sIGlzRHVyaW5nV2hpdGVsaXN0UGVyaW9kID0gdGltZSA8IFdISVRFTElTVF9FTkRfREFURTsKCiAgICAgICAgLy8gdGhlc2UgbGltaXRzIGFyZSBvbmx5IGNoZWNrZWQgZHVyaW5nIHRoZSBsaW1pdGVkIHBlcmlvZAogICAgICAgIGlmICh0aW1lIDwgTElNSVRTX0VORF9EQVRFKSB7CiAgICAgICAgICAgIC8vIHJlcXVpcmUgdGhhdCB0aGV5IGhhdmUgbm90IG92ZXJwYWlkIHRoZWlyIGdhcyBwcmljZQogICAgICAgICAgICByZXF1aXJlKHR4Lmdhc3ByaWNlIDw9IE1BWF9HQVNfUFJJQ0UpOwoKICAgICAgICAgICAgLy8gcmVxdWlyZSB0aGF0IHRoZXkgaGF2ZW4ndCBzZW50IHRvbyBtdWNoIGdhcwogICAgICAgICAgICByZXF1aXJlKG1zZy5nYXMgPD0gTUFYX0dBUyk7CgogICAgICAgICAgICAvLyBpZiB3ZSBhcmUgaW4gdGhlIFdISVRFTElTVCBwZXJpb2QsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBzZW5kZXIgY29udHJpYnV0ZWQgdG8gdGhlIHByZXNhbGUKICAgICAgICAgICAgaWYgKGlzRHVyaW5nV2hpdGVsaXN0UGVyaW9kKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKGlzV2hpdGVsaXN0ZWQobXNnLnNlbmRlcikpOwoKICAgICAgICAgICAgICAgIC8vIHRoZSBtYXhpbXVtIGNvbnRyaWJ1dGlvbiBpcyBzZXQgZm9yIHRoZSB3aGl0ZWxpc3QgcGVyaW9kCiAgICAgICAgICAgICAgICBtYXhpbXVtQ29udHJpYnV0aW9uID0gTWF0aC5taW4yNTYoCiAgICAgICAgICAgICAgICAgICAgbWF4aW11bUNvbnRyaWJ1dGlvbiwKICAgICAgICAgICAgICAgICAgICB1c2RUb1dlaShNQVhJTVVNX0NPTlRSSUJVVElPTl9XSElURUxJU1RfUEVSSU9EX1VTRCkuc3ViKGNvbnRyaWJ1dGlvbkFtb3VudHNbbXNnLnNlbmRlcl0pCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gdGhlIG1heGltdW0gY29udHJpYnV0aW9uIGlzIHNldCBmb3IgdGhlIGxpbWl0ZWQgcGVyaW9kCiAgICAgICAgICAgICAgICBtYXhpbXVtQ29udHJpYnV0aW9uID0gTWF0aC5taW4yNTYoCiAgICAgICAgICAgICAgICAgICAgbWF4aW11bUNvbnRyaWJ1dGlvbiwKICAgICAgICAgICAgICAgICAgICB1c2RUb1dlaShNQVhJTVVNX0NPTlRSSUJVVElPTl9MSU1JVEVEX1BFUklPRF9VU0QpLnN1Yihjb250cmlidXRpb25BbW91bnRzW21zZy5zZW5kZXJdKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gY2FsY3VsYXRlIGhvdyBtdWNoIGNvbnRyaWJ1dGlvbiBpcyBhY2NlcHRlZCBhbmQgaG93IG11Y2ggaXMgcmVmdW5kZWQKICAgICAgICB1aW50IGNvbnRyaWJ1dGlvbiA9IE1hdGgubWluMjU2KG1zZy52YWx1ZSwgbWF4aW11bUNvbnRyaWJ1dGlvbik7CiAgICAgICAgdWludCByZWZ1bmRXZWkgPSBtc2cudmFsdWUuc3ViKGNvbnRyaWJ1dGlvbik7CgogICAgICAgIC8vIHJlcXVpcmUgdGhhdCB0aGV5IGFyZSBhbGxvd2VkIHRvIGNvbnRyaWJ1dGUgbW9yZQogICAgICAgIHJlcXVpcmUoY29udHJpYnV0aW9uID4gMCk7CgogICAgICAgIC8vIGFjY291bnQgY29udHJpYnV0aW9uIHRvd2FyZHMgdG90YWwKICAgICAgICB0b3RhbENvbnRyaWJ1dGlvbnMgPSB0b3RhbENvbnRyaWJ1dGlvbnMuYWRkKGNvbnRyaWJ1dGlvbik7CgogICAgICAgIC8vIGFjY291bnQgY29udHJpYnV0aW9uIHRvd2FyZHMgYWRkcmVzcyB0b3RhbAogICAgICAgIGNvbnRyaWJ1dGlvbkFtb3VudHNbbXNnLnNlbmRlcl0gPSBjb250cmlidXRpb25BbW91bnRzW21zZy5zZW5kZXJdLmFkZChjb250cmlidXRpb24pOwoKICAgICAgICAvLyBhbmQgc2VuZCB0aGVtIHNvbWUgYm50eQogICAgICAgIHVpbnQgYW1vdW50Qm50eVJld2FyZGVkID0gTWF0aC5taW4yNTYod2VpVG9CbnR5KGNvbnRyaWJ1dGlvbiksIGJvdW50eTB4VG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgICAgICByZXF1aXJlKGJvdW50eTB4VG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50Qm50eVJld2FyZGVkKSk7CgogICAgICAgIGlmIChyZWZ1bmRXZWkgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIocmVmdW5kV2VpKTsKICAgICAgICB9CgogICAgICAgIC8vIGxvZyB0aGUgY29udHJpYnV0aW9uCiAgICAgICAgT25Db250cmlidXRpb24obXNnLnNlbmRlciwgaXNEdXJpbmdXaGl0ZWxpc3RQZXJpb2QsIGNvbnRyaWJ1dGlvbiwgYW1vdW50Qm50eVJld2FyZGVkLCByZWZ1bmRXZWkpOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQ3Jvd2RzYWxlVG9rZW5Db250cm9sbGVyLnNvbAoKY29udHJhY3QgQ3Jvd2RzYWxlVG9rZW5Db250cm9sbGVyIGlzIE93bmFibGUsIEFkZHJlc3NXaGl0ZWxpc3QsIFRva2VuQ29udHJvbGxlciB7CiAgICBib29sIHB1YmxpYyB3aGl0ZWxpc3RPZmY7CiAgICBCb3VudHkweFRva2VuIHB1YmxpYyB0b2tlbjsKCiAgICBmdW5jdGlvbiBDcm93ZHNhbGVUb2tlbkNvbnRyb2xsZXIoQm91bnR5MHhUb2tlbiBfdG9rZW4pIHB1YmxpYyB7CiAgICAgICAgdG9rZW4gPSBfdG9rZW47CiAgICB9CgogICAgLy8gc2V0IHRoZSB3aGl0ZWxpc3RPZmYgdmFyaWFibGUKICAgIGZ1bmN0aW9uIHNldFdoaXRlbGlzdE9mZihib29sIF93aGl0ZWxpc3RPZmYpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHdoaXRlbGlzdE9mZiA9IF93aGl0ZWxpc3RPZmY7CiAgICB9CgogICAgLy8gdGhlIG93bmVyIG9mIHRoZSBjb250cm9sbGVyIGNhbiBjaGFuZ2UgdGhlIGNvbnRyb2xsZXIgdG8gYSBuZXcgY29udHJhY3QKICAgIGZ1bmN0aW9uIGNoYW5nZUNvbnRyb2xsZXIoYWRkcmVzcyBuZXdDb250cm9sbGVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICB0b2tlbi5jaGFuZ2VDb250cm9sbGVyKG5ld0NvbnRyb2xsZXIpOwogICAgfQoKICAgIC8vIGNoYW5nZSB3aGV0aGVyIHRyYW5zZmVycyBhcmUgZW5hYmxlZAogICAgZnVuY3Rpb24gZW5hYmxlVHJhbnNmZXJzKGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHRva2VuLmVuYWJsZVRyYW5zZmVycyhfdHJhbnNmZXJzRW5hYmxlZCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQ2FsbGVkIHdoZW4gYF9vd25lcmAgc2VuZHMgZXRoZXIgdG8gdGhlIE1pbmlNZSBUb2tlbiBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCBzZW50IHRoZSBldGhlciB0byBjcmVhdGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBldGhlciBpcyBhY2NlcHRlZCwgZmFsc2UgaWYgaXQgdGhyb3dzCiAgICBmdW5jdGlvbiBwcm94eVBheW1lbnQoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBvcmlnaW4gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgdHJhbnNmZXIKICAgIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gd2hpdGVsaXN0T2ZmIHx8IGlzV2hpdGVsaXN0ZWQoX2Zyb20pOwogICAgfQoKICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGFuIGFwcHJvdmFsIGFsbG93aW5nIHRoZQogICAgLy8vICBjb250cm9sbGVyIHRvIHJlYWN0IGlmIGRlc2lyZWQKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgY2FsbHMgYGFwcHJvdmUoKWAKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIHNwZW5kZXIgaW4gdGhlIGBhcHByb3ZlKClgIGNhbGwKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgICAvLy8gQHJldHVybiBGYWxzZSBpZiB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBhdXRob3JpemUgdGhlIGFwcHJvdmFsCiAgICBmdW5jdGlvbiBvbkFwcHJvdmUoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gd2hpdGVsaXN0T2ZmIHx8IGlzV2hpdGVsaXN0ZWQoX293bmVyKTsKICAgIH0KfQ=='.
	

]
