Class {
	#name : #SRT2aec18c5500f21359ce1bea5dc1777344df4c0dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2aec18c5500f21359ce1bea5dc1777344df4c0dc >> base64 [
	^ ''.
	

]
