Class {
	#name : #SRT33555a3130fc40082a566005714eeec369e62fc8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33555a3130fc40082a566005714eeec369e62fc8 >> base64 [
	^ ''.
	

]
