Class {
	#name : #SRTd421bb79fddfd4333a03e00d8a4b5f4eba07f1f8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd421bb79fddfd4333a03e00d8a4b5f4eba07f1f8 >> base64 [
	^ ''.
	

]
