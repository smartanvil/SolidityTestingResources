Class {
	#name : #SRTe945bfb9cee4103b0026565eaa179d3bebb53c4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe945bfb9cee4103b0026565eaa179d3bebb53c4d >> base64 [
	^ ''.
	

]
