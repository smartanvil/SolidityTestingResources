Class {
	#name : #SRTc67247454e720328714c4e17bec7640572657bee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc67247454e720328714c4e17bec7640572657bee >> base64 [
	^ ''.
	

]
