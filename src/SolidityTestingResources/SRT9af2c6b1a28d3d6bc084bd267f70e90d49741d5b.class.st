Class {
	#name : #SRT9af2c6b1a28d3d6bc084bd267f70e90d49741d5b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9af2c6b1a28d3d6bc084bd267f70e90d49741d5b >> base64 [
	^ ''.
	

]
