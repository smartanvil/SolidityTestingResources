Class {
	#name : #SRTd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd >> base64 [
	^ ''.
	

]
