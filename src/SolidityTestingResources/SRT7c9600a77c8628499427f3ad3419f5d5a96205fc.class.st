Class {
	#name : #SRT7c9600a77c8628499427f3ad3419f5d5a96205fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c9600a77c8628499427f3ad3419f5d5a96205fc >> base64 [
	^ ''.
	

]
