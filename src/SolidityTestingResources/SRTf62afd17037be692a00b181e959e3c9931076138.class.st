Class {
	#name : #SRTf62afd17037be692a00b181e959e3c9931076138,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf62afd17037be692a00b181e959e3c9931076138 >> base64 [
	^ ''.
	

]
