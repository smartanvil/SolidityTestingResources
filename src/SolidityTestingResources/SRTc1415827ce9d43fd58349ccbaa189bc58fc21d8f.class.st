Class {
	#name : #SRTc1415827ce9d43fd58349ccbaa189bc58fc21d8f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc1415827ce9d43fd58349ccbaa189bc58fc21d8f >> base64 [
	^ ''.
	

]
