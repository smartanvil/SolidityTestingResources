Class {
	#name : #SRTb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB >> base64 [
	^ ''.
	

]
