Class {
	#name : #SRT19397c7fde68a3b33503d491cac89011a5d9a61f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19397c7fde68a3b33503d491cac89011a5d9a61f >> base64 [
	^ ''.
	

]
