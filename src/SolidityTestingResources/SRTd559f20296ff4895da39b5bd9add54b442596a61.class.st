Class {
	#name : #SRTd559f20296ff4895da39b5bd9add54b442596a61,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd559f20296ff4895da39b5bd9add54b442596a61 >> base64 [
	^ ''.
	

]
