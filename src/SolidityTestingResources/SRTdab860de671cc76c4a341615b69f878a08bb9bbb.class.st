Class {
	#name : #SRTdab860de671cc76c4a341615b69f878a08bb9bbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdab860de671cc76c4a341615b69f878a08bb9bbb >> base64 [
	^ ''.
	

]
