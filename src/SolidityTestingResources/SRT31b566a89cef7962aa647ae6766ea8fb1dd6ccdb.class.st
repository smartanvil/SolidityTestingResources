Class {
	#name : #SRT31b566a89cef7962aa647ae6766ea8fb1dd6ccdb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31b566a89cef7962aa647ae6766ea8fb1dd6ccdb >> base64 [
	^ ''.
	

]
