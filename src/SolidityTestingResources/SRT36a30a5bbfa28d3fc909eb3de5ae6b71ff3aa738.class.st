Class {
	#name : #SRT36a30a5bbfa28d3fc909eb3de5ae6b71ff3aa738,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36a30a5bbfa28d3fc909eb3de5ae6b71ff3aa738 >> base64 [
	^ ''.
	

]
