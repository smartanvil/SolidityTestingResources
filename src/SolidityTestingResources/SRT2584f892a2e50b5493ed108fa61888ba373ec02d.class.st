Class {
	#name : #SRT2584f892a2e50b5493ed108fa61888ba373ec02d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2584f892a2e50b5493ed108fa61888ba373ec02d >> base64 [
	^ ''.
	

]
