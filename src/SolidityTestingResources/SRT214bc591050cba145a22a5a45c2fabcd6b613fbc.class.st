Class {
	#name : #SRT214bc591050cba145a22a5a45c2fabcd6b613fbc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT214bc591050cba145a22a5a45c2fabcd6b613fbc >> base64 [
	^ ''.
	

]
