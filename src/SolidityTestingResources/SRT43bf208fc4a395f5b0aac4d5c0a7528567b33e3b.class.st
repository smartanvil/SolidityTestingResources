Class {
	#name : #SRT43bf208fc4a395f5b0aac4d5c0a7528567b33e3b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT43bf208fc4a395f5b0aac4d5c0a7528567b33e3b >> base64 [
	^ ''.
	

]
