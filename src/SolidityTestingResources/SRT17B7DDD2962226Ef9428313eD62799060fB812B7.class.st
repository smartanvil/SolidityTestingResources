Class {
	#name : #SRT17B7DDD2962226Ef9428313eD62799060fB812B7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17B7DDD2962226Ef9428313eD62799060fB812B7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKiogR2l0aHViIHJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9Db2luRmFicmlrL2ljby90cmVlL2hhZ2dsaW4tcHJlaWNvICovCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbCAKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4gCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKiAKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLiAKICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uIAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuCiAqIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4gRGlmZmVycyBmcm9tIFBhdXNhYmxlIGJ5IGNhdXNpbmcgYSB0aHJvdyB3aGVuIGluIGhhbHQgbW9kZS4KICoKICovCmNvbnRyYWN0IEhhbHRhYmxlIGlzIE93bmFibGUgewogIGJvb2wgcHVibGljIGhhbHRlZDsKCiAgZXZlbnQgSGFsdGVkKGJvb2wgaGFsdGVkKTsKCiAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoIWhhbHRlZCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoaGFsdGVkKTsKICAgIF87CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogIGZ1bmN0aW9uIGhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgaGFsdGVkID0gdHJ1ZTsKICAgIEhhbHRlZCh0cnVlKTsKICB9CgogIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGhhbHRlZCA9IGZhbHNlOwogICAgSGFsdGVkKGZhbHNlKTsKICB9Cgp9CgovKioKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludCBhLCB1aW50IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQp9CgovKioKICogRmluYWxpemUgYWdlbnQgZGVmaW5lcyB3aGF0IGhhcHBlbnMgYXQgdGhlIGVuZCBvZiBhIHN1Y2Nlc2Z1bCBjcm93ZHNhbGUuCiAqCiAqIC0gQWxsb2NhdGUgdG9rZW5zIGZvciBmb3VuZGVycywgYm91bnRpZXMgYW5kIGNvbW11bml0eQogKiAtIE1ha2UgdG9rZW5zIHRyYW5zZmVyYWJsZQogKiAtIGV0Yy4KICovCmNvbnRyYWN0IEZpbmFsaXplQWdlbnQgewoKICBmdW5jdGlvbiBpc0ZpbmFsaXplQWdlbnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBjYW4gcnVuIGZpbmFsaXplQ3Jvd2RzYWxlKCkgcHJvcGVybHkuCiAgICoKICAgKiBUaGlzIGlzIGEgc2FmZXR5IGNoZWNrIGZ1bmN0aW9uIHRoYXQgZG9lc24ndCBhbGxvdyBjcm93ZHNhbGUgdG8gYmVnaW4KICAgKiB1bmxlc3MgdGhlIGZpbmFsaXplciBoYXMgYmVlbiBzZXQgdXAgcHJvcGVybHkuCiAgICovCiAgZnVuY3Rpb24gaXNTYW5lKENyb3dkc2FsZVRva2VuIHRva2VuKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7CgogIC8qKiBDYWxsZWQgb25jZSBieSBjcm93ZHNhbGUgZmluYWxpemUoKSBpZiB0aGUgc2FsZSB3YXMgYSBzdWNjZXNzLiAqLwogIGZ1bmN0aW9uIGZpbmFsaXplQ3Jvd2RzYWxlKENyb3dkc2FsZVRva2VuIHRva2VuKSBwdWJsaWM7Cgp9CgovKioKICogQWJzdHJhY3QgYmFzZSBjb250cmFjdCBmb3IgdG9rZW4gc2FsZXMuCiAqCiAqIEhhbmRsZXMKICogLSBzdGFydCBhbmQgZW5kIGRhdGVzCiAqIC0gYWNjZXB0aW5nIGludmVzdG1lbnRzCiAqIC0gbWluaW11bSBmdW5kaW5nIGdvYWwgYW5kIHJlZnVuZAogKiAtIHZhcmlvdXMgc3RhdGlzdGljcyBkdXJpbmcgdGhlIGNyb3dkZnVuZAogKiAtIGRpZmZlcmVudCBpbnZlc3RtZW50IHBvbGljaWVzIChyZXF1aXJlIHNlcnZlciBzaWRlIGN1c3RvbWVyIGlkLCBhbGxvdyBvbmx5IHdoaXRlbGlzdGVkIGFkZHJlc3NlcykKICoKICovCmNvbnRyYWN0IEdlbmVyaWNDcm93ZHNhbGUgaXMgSGFsdGFibGUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgLyogVGhlIHRva2VuIHdlIGFyZSBzZWxsaW5nICovCiAgQ3Jvd2RzYWxlVG9rZW4gcHVibGljIHRva2VuOwoKICAvKiBQb3N0LXN1Y2Nlc3MgY2FsbGJhY2sgKi8KICBGaW5hbGl6ZUFnZW50IHB1YmxpYyBmaW5hbGl6ZUFnZW50OwoKICAvKiBldGhlciB3aWxsIGJlIHRyYW5zZmVycmVkIHRvIHRoaXMgYWRkcmVzcyAqLwogIGFkZHJlc3MgcHVibGljIG11bHRpc2lnV2FsbGV0OwoKICAvKiBpZiB0aGUgZnVuZGluZyBnb2FsIGlzIG5vdCByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzICovCiAgdWludCBwdWJsaWMgbWluaW11bUZ1bmRpbmdHb2FsOwoKICAvKiB0aGUgc3RhcnRpbmcgYmxvY2sgbnVtYmVyIG9mIHRoZSBjcm93ZHNhbGUgKi8KICB1aW50IHB1YmxpYyBzdGFydHNBdDsKCiAgLyogdGhlIGVuZGluZyBibG9jayBudW1iZXIgb2YgdGhlIGNyb3dkc2FsZSAqLwogIHVpbnQgcHVibGljIGVuZHNBdDsKCiAgLyogdGhlIG51bWJlciBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkIHRocm91Z2ggdGhpcyBjb250cmFjdCovCiAgdWludCBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogIC8qIEhvdyBtYW55IHdlaSBvZiBmdW5kaW5nIHdlIGhhdmUgcmFpc2VkICovCiAgdWludCBwdWJsaWMgd2VpUmFpc2VkID0gMDsKCiAgLyogSG93IG1hbnkgZGlzdGluY3QgYWRkcmVzc2VzIGhhdmUgaW52ZXN0ZWQgKi8KICB1aW50IHB1YmxpYyBpbnZlc3RvckNvdW50ID0gMDsKCiAgLyogSG93IG1hbnkgd2VpIHdlIGhhdmUgcmV0dXJuZWQgYmFjayB0byB0aGUgY29udHJhY3QgYWZ0ZXIgYSBmYWlsZWQgY3Jvd2RmdW5kLiAqLwogIHVpbnQgcHVibGljIGxvYWRlZFJlZnVuZCA9IDA7CgogIC8qIEhvdyBtYW55IHdlaSB3ZSBoYXZlIGdpdmVuIGJhY2sgdG8gaW52ZXN0b3JzLiovCiAgdWludCBwdWJsaWMgd2VpUmVmdW5kZWQgPSAwOwoKICAvKiBIYXMgdGhpcyBjcm93ZHNhbGUgYmVlbiBmaW5hbGl6ZWQgKi8KICBib29sIHB1YmxpYyBmaW5hbGl6ZWQgPSBmYWxzZTsKCiAgLyogRG8gd2UgbmVlZCB0byBoYXZlIGEgdW5pcXVlIGNvbnRyaWJ1dG9yIGlkIGZvciBlYWNoIGN1c3RvbWVyICovCiAgYm9vbCBwdWJsaWMgcmVxdWlyZUN1c3RvbWVySWQgPSBmYWxzZTsKCiAgLyoqIEhvdyBtYW55IEVUSCBlYWNoIGFkZHJlc3MgaGFzIGludmVzdGVkIGluIHRoaXMgY3Jvd2RzYWxlICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgaW52ZXN0ZWRBbW91bnRPZjsKCiAgLyoqIEhvdyBtYW55IHRva2VucyB0aGlzIGNyb3dkc2FsZSBoYXMgY3JlZGl0ZWQgZm9yIGVhY2ggaW52ZXN0b3IgYWRkcmVzcyAqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRva2VuQW1vdW50T2Y7CgogIC8qKiBBZGRyZXNzZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBpbnZlc3QgZXZlbiBiZWZvcmUgSUNPIG9mZmljYWwgb3BlbnMuIEZvciB0ZXN0aW5nLCBmb3IgSUNPIHBhcnRuZXJzLCBldGMuICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdDsKCiAgLyoqIFRoaXMgaXMgZm9yIG1hbnVhbCB0ZXN0aW5nIG9mIHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBvd25lcidzIHdhbGxldC4gWW91IGNhbiBzZXQgaXQgdG8gYW55IHZhbHVlIGFuZCBpbnNwZWN0IHRoaXMgaW4gYSBibG9ja2NoYWluIGV4cGxvcmVyIHRvIHNlZSB0aGF0IGNyb3dkc2FsZSBpbnRlcmFjdGlvbiB3b3Jrcy4gKi8KICB1aW50OCBwdWJsaWMgb3duZXJUZXN0VmFsdWU7CgogIC8qKiBTdGF0ZSBtYWNoaW5lCiAgICoKICAgKiAtIFByZWZ1bmRpbmc6IFdlIGhhdmUgbm90IHJlYWNoZWQgdGhlIHN0YXJ0aW5nIGJsb2NrIHlldAogICAqIC0gRnVuZGluZzogQWN0aXZlIGNyb3dkc2FsZQogICAqIC0gU3VjY2VzczogTWluaW11bSBmdW5kaW5nIGdvYWwgcmVhY2hlZAogICAqIC0gRmFpbHVyZTogTWluaW11bSBmdW5kaW5nIGdvYWwgbm90IHJlYWNoZWQgYmVmb3JlIHRoZSBlbmRpbmcgYmxvY2sKICAgKiAtIEZpbmFsaXplZDogVGhlIGZpbmFsaXplIGZ1bmN0aW9uIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWQKICAgKiAtIFJlZnVuZGluZzogUmVmdW5kcyBhcmUgbG9hZGVkIG9uIHRoZSBjb250cmFjdCB0byBiZSByZWNsYWltZWQgYnkgaW52ZXN0b3JzLgogICAqLwogIGVudW0gU3RhdGV7VW5rbm93biwgUHJlRnVuZGluZywgRnVuZGluZywgU3VjY2VzcywgRmFpbHVyZSwgRmluYWxpemVkLCBSZWZ1bmRpbmd9CgoKICAvLyBBIG5ldyBpbnZlc3RtZW50IHdhcyBtYWRlCiAgZXZlbnQgSW52ZXN0ZWQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQsIHVpbnQxMjggY3VzdG9tZXJJZCk7CgogIC8vIFJlZnVuZCB3YXMgcHJvY2Vzc2VkIGZvciBhIGNvbnRyaWJ1dG9yCiAgZXZlbnQgUmVmdW5kKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgd2VpQW1vdW50KTsKCiAgLy8gVGhlIHJ1bGVzIGFib3V0IHdoYXQga2luZCBvZiBpbnZlc3RtZW50cyB3ZSBhY2NlcHQgd2VyZSBjaGFuZ2VkCiAgZXZlbnQgSW52ZXN0bWVudFBvbGljeUNoYW5nZWQoYm9vbCByZXF1aXJlQ0lkKTsKCiAgLy8gQWRkcmVzcyBlYXJseSBwYXJ0aWNpcGF0aW9uIHdoaXRlbGlzdCBzdGF0dXMgY2hhbmdlZAogIGV2ZW50IFdoaXRlbGlzdGVkKGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0dXMpOwoKICAvLyBDcm93ZHNhbGUncyBmaW5hbGl6ZSBmdW5jdGlvbiBoYXMgYmVlbiBjYWxsZWQKICBldmVudCBGaW5hbGl6ZWQoKTsKCgogIGZ1bmN0aW9uIEdlbmVyaWNDcm93ZHNhbGUoYWRkcmVzcyB0ZWFtX211bHRpc2lnLCB1aW50IHN0YXJ0LCB1aW50IGVuZCwgdWludCBtaW5fZ29hbCkgaW50ZXJuYWwgewogICAgc2V0TXVsdGlzaWcodGVhbV9tdWx0aXNpZyk7CgogICAgLy8gRG9uJ3QgbWVzcyB0aGUgZGF0ZXMKICAgIHJlcXVpcmUoc3RhcnQgIT0gMCAmJiBlbmQgIT0gMCk7CiAgICByZXF1aXJlKGJsb2NrLm51bWJlciA8IHN0YXJ0ICYmIHN0YXJ0IDwgZW5kKTsKICAgIHN0YXJ0c0F0ID0gc3RhcnQ7CiAgICBlbmRzQXQgPSBlbmQ7CgogICAgLy8gTWluaW11bSBmdW5kaW5nIGdvYWwgY2FuIGJlIHplcm8KICAgIG1pbmltdW1GdW5kaW5nR29hbCA9IG1pbl9nb2FsOwogIH0KCiAgLyoqCiAgICogRG9uJ3QgZXhwZWN0IHRvIGp1c3Qgc2VuZCBpbiBtb25leSBhbmQgZ2V0IHRva2Vucy4KICAgKi8KICBmdW5jdGlvbigpIHBheWFibGUgewogICAgcmVxdWlyZShmYWxzZSk7CiAgfQoKICAvKioKICAgKiBNYWtlIGFuIGludmVzdG1lbnQuCiAgICoKICAgKiBDcm93ZHNhbGUgbXVzdCBiZSBydW5uaW5nIGZvciBvbmUgdG8gaW52ZXN0LgogICAqIFdlIG11c3QgaGF2ZSBub3QgcHJlc3NlZCB0aGUgZW1lcmdlbmN5IGJyYWtlLgogICAqCiAgICogQHBhcmFtIHJlY2VpdmVyIFRoZSBFdGhlcmV1bSBhZGRyZXNzIHdobyByZWNlaXZlcyB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGN1c3RvbWVySWQgKG9wdGlvbmFsKSBVVUlEIHY0IHRvIHRyYWNrIHRoZSBzdWNjZXNzZnVsIHBheW1lbnRzIG9uIHRoZSBzZXJ2ZXIgc2lkZQogICAqCiAgICovCiAgZnVuY3Rpb24gaW52ZXN0SW50ZXJuYWwoYWRkcmVzcyByZWNlaXZlciwgdWludDEyOCBjdXN0b21lcklkKSBzdG9wSW5FbWVyZ2VuY3kgbm90RmluaXNoZWQgcHJpdmF0ZSB7CiAgICAvLyBEZXRlcm1pbmUgaWYgaXQncyBhIGdvb2QgdGltZSB0byBhY2NlcHQgaW52ZXN0bWVudCBmcm9tIHRoaXMgcGFydGljaXBhbnQKICAgIGlmIChnZXRTdGF0ZSgpID09IFN0YXRlLlByZUZ1bmRpbmcpIHsKICAgICAgLy8gQXJlIHdlIHdoaXRlbGlzdGVkIGZvciBlYXJseSBkZXBvc2l0CiAgICAgIHJlcXVpcmUoZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdFtyZWNlaXZlcl0pOwogICAgfQoKICAgIHVpbnQgd2VpQWxsb3dlZEFtb3VudCA9IHdlaUFsbG93ZWRUb1JlY2VpdmUobXNnLnZhbHVlLCByZWNlaXZlcik7CiAgICB1aW50IHRva2VuQW1vdW50ID0gY2FsY3VsYXRlUHJpY2Uod2VpQWxsb3dlZEFtb3VudCwgbXNnLnNlbmRlcik7CiAgICAKICAgIC8vIER1c3QgdHJhbnNhY3Rpb24gaWYgbm8gdG9rZW5zIGNhbiBiZSBnaXZlbgogICAgcmVxdWlyZSh0b2tlbkFtb3VudCAhPSAwKTsKCiAgICBpZiAoaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0gPT0gMCkgewogICAgICAvLyBBIG5ldyBpbnZlc3RvcgogICAgICBpbnZlc3RvckNvdW50Kys7CiAgICB9CiAgICB1cGRhdGVJbnZlc3RvckZ1bmRzKHRva2VuQW1vdW50LCB3ZWlBbGxvd2VkQW1vdW50LCByZWNlaXZlciwgY3VzdG9tZXJJZCk7CgogICAgLy8gUG9ja2V0IHRoZSBtb25leQogICAgbXVsdGlzaWdXYWxsZXQudHJhbnNmZXIod2VpQWxsb3dlZEFtb3VudCk7CgogICAgLy8gUmV0dXJuIGV4Y2VzcyBvZiBtb25leQogICAgdWludCB3ZWlUb1JldHVybiA9IG1zZy52YWx1ZS5zdWIod2VpQWxsb3dlZEFtb3VudCk7CiAgICBpZiAod2VpVG9SZXR1cm4gPiAwKSB7CiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIod2VpVG9SZXR1cm4pOwogICAgfQogIH0KCiAgLyoqIAogICAqICBDYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIGludmVzdG1lbnQgdGhhdCB3ZSBjYW4gYWNjZXB0IGZyb20gdGhpcyBhZGRyZXNzLgogICAqLwogIGZ1bmN0aW9uIHdlaUFsbG93ZWRUb1JlY2VpdmUodWludCB3ZWlBbW91bnQsIGFkZHJlc3MgY3VzdG9tZXIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgd2VpQWxsb3dlZCk7CgogIC8qKiAKICAgKiAgQ2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgcmVjZWl2ZWQgYW1vdW50LgogICAqICBXaGVuIHRoZXJlJ3MgYW4gZXhjZWRlbnQgZHVlIHRvIHJvdW5kaW5nIGVycm9yLCBpdCBzaG91bGQgYmUgcmV0dXJuZWQgdG8gYWxsb3cgcmVmdW5kaW5nLgogICAqLwogIGZ1bmN0aW9uIGNhbGN1bGF0ZVByaWNlKHVpbnQgd2VpQW1vdW50LCBhZGRyZXNzIGN1c3RvbWVyKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50IHRva2VuQW1vdW50KTsKCiAgLyoqCiAgICogUHJlYWxsb2NhdGUgdG9rZW5zIGZvciB0aGUgZWFybHkgaW52ZXN0b3JzLgogICAqCiAgICogUHJlYWxsb2NhdGVkIHRva2VucyBoYXZlIGJlZW4gc29sZCBiZWZvcmUgdGhlIGFjdHVhbCBjcm93ZHNhbGUgb3BlbnMuCiAgICogVGhpcyBmdW5jdGlvbiBtaW50cyB0aGUgdG9rZW5zIGFuZCBtb3ZlcyB0aGUgY3Jvd2RzYWxlIG5lZWRsZS4KICAgKgogICAqIE5vIG1vbmV5IGlzIGV4Y2hhbmdlZCwgYXMgdGhlIGNyb3dkc2FsZSB0ZWFtIGFscmVhZHkgaGF2ZSByZWNlaXZlZCB0aGUgcGF5bWVudC4KICAgKgogICAqIEBwYXJhbSBmdWxsVG9rZW5zIHRva2VucyBhcyBmdWxsIHRva2VucyAtIGRlY2ltYWwgcGxhY2VzIGFkZGVkIGludGVybmFsbHkKICAgKiBAcGFyYW0gd2VpUHJpY2UgUHJpY2Ugb2YgYSBzaW5nbGUgZnVsbCB0b2tlbiBpbiB3ZWkKICAgKgogICAqLwogIGZ1bmN0aW9uIHByZWFsbG9jYXRlKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgZnVsbFRva2VucywgdWludCB3ZWlQcmljZSkgcHVibGljIG9ubHlPd25lciBub3RGaW5pc2hlZCB7CiAgICByZXF1aXJlKHJlY2VpdmVyICE9IGFkZHJlc3MoMCkpOwogICAgdWludCB0b2tlbkFtb3VudCA9IGZ1bGxUb2tlbnMubXVsKDEwKip1aW50KHRva2VuLmRlY2ltYWxzKCkpKTsKICAgIHJlcXVpcmUodG9rZW5BbW91bnQgIT0gMCk7CiAgICB1aW50IHdlaUFtb3VudCA9IHdlaVByaWNlLm11bCh0b2tlbkFtb3VudCk7IC8vIFRoaXMgY2FuIGFsc28gYmUgMCwgaW4gd2hpY2ggY2FzZSB3ZSBnaXZlIG91dCB0b2tlbnMgZm9yIGZyZWUKICAgIHVwZGF0ZUludmVzdG9yRnVuZHModG9rZW5BbW91bnQsIHdlaUFtb3VudCwgcmVjZWl2ZXIgLCAwKTsKICB9CgogIC8qKgogICAqIFByaXZhdGUgZnVuY3Rpb24gdG8gdXBkYXRlIGFjY291bnRpbmcgaW4gdGhlIGNyb3dkc2FsZS4KICAgKi8KICBmdW5jdGlvbiB1cGRhdGVJbnZlc3RvckZ1bmRzKHVpbnQgdG9rZW5BbW91bnQsIHVpbnQgd2VpQW1vdW50LCBhZGRyZXNzIHJlY2VpdmVyLCB1aW50MTI4IGN1c3RvbWVySWQpIHByaXZhdGUgewogICAgLy8gVXBkYXRlIGludmVzdG9yCiAgICBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9IGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdLmFkZCh3ZWlBbW91bnQpOwogICAgdG9rZW5BbW91bnRPZltyZWNlaXZlcl0gPSB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXS5hZGQodG9rZW5BbW91bnQpOwoKICAgIC8vIFVwZGF0ZSB0b3RhbHMKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbkFtb3VudCk7CgogICAgYXNzaWduVG9rZW5zKHJlY2VpdmVyLCB0b2tlbkFtb3VudCk7CiAgICAvLyBUZWxsIHVzIHRoYXQgdGhlIGludmVzdG1lbnQgd2FzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkKICAgIEludmVzdGVkKHJlY2VpdmVyLCB3ZWlBbW91bnQsIHRva2VuQW1vdW50LCBjdXN0b21lcklkKTsKICB9CgoKCiAgLyoqCiAgICogSW52ZXN0aW5nIGZ1bmN0aW9uIHRoYXQgcmVjb2duaXplcyB0aGUgcGF5ZXIuCiAgICogCiAgICogQHBhcmFtIGN1c3RvbWVySWQgVVVJRHY0IHRoYXQgaWRlbnRpZmllcyB0aGlzIGNvbnRyaWJ1dG9yCiAgICovCiAgZnVuY3Rpb24gYnV5V2l0aEN1c3RvbWVySWQodWludDEyOCBjdXN0b21lcklkKSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKGN1c3RvbWVySWQgIT0gMCk7ICAvLyBVVUlEdjQgc2FuaXR5IGNoZWNrCiAgICBpbnZlc3RJbnRlcm5hbChtc2cuc2VuZGVyLCBjdXN0b21lcklkKTsKICB9CgogIC8qKgogICAqIFRoZSBiYXNpYyBlbnRyeSBwb2ludCB0byBwYXJ0aWNpcGF0ZSBpbiB0aGUgY3Jvd2RzYWxlIHByb2Nlc3MuCiAgICoKICAgKiBQYXkgZm9yIGZ1bmRpbmcsIGdldCBpbnZlc3RlZCB0b2tlbnMgYmFjayBpbiB0aGUgc2VuZGVyIGFkZHJlc3MuCiAgICovCiAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZSghcmVxdWlyZUN1c3RvbWVySWQpOyAvLyBDcm93ZHNhbGUgbmVlZHMgdG8gdHJhY2sgcGFydGljaXBhbnRzIGZvciB0aGFuayB5b3UgZW1haWwKICAgIGludmVzdEludGVybmFsKG1zZy5zZW5kZXIsIDApOwogIH0KCiAgLyoqCiAgICogRmluYWxpemUgYSBzdWNjY2VzZnVsIGNyb3dkc2FsZS4KICAgKgogICAqIFRoZSBvd25lciBjYW4gdHJpZ2dlciBhIGNhbGwgdGhlIGNvbnRyYWN0IHRoYXQgcHJvdmlkZXMgcG9zdC1jcm93ZHNhbGUgYWN0aW9ucywgbGlrZSByZWxlYXNpbmcgdGhlIHRva2Vucy4KICAgKiBOb3RlIHRoYXQgYnkgZGVmYXVsdCB0b2tlbnMgYXJlIG5vdCBpbiBhIHJlbGVhc2VkIHN0YXRlLgogICAqLwogIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIGluU3RhdGUoU3RhdGUuU3VjY2Vzcykgb25seU93bmVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICBpZiAoYWRkcmVzcyhmaW5hbGl6ZUFnZW50KSAhPSAwKQogICAgICBmaW5hbGl6ZUFnZW50LmZpbmFsaXplQ3Jvd2RzYWxlKHRva2VuKTsKICAgIGZpbmFsaXplZCA9IHRydWU7CiAgICBGaW5hbGl6ZWQoKTsKICB9CgogIC8qKgogICAqIFNldCBwb2xpY3kgZG8gd2UgbmVlZCB0byBoYXZlIHNlcnZlci1zaWRlIGN1c3RvbWVyIGlkcyBmb3IgdGhlIGludmVzdG1lbnRzLgogICAqCiAgICovCiAgZnVuY3Rpb24gc2V0UmVxdWlyZUN1c3RvbWVySWQoYm9vbCB2YWx1ZSkgcHVibGljIG9ubHlPd25lciBzdG9wSW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZUN1c3RvbWVySWQgPSB2YWx1ZTsKICAgIEludmVzdG1lbnRQb2xpY3lDaGFuZ2VkKHJlcXVpcmVDdXN0b21lcklkKTsKICB9CgogIC8qKgogICAqIEFsbG93IGFkZHJlc3NlcyB0byBkbyBlYXJseSBwYXJ0aWNpcGF0aW9uLgogICAqLwogIGZ1bmN0aW9uIHNldEVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3QoYWRkcmVzcyBhZGRyLCBib29sIHN0YXR1cykgcHVibGljIG9ubHlPd25lciBub3RGaW5pc2hlZCBzdG9wSW5FbWVyZ2VuY3kgewogICAgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdFthZGRyXSA9IHN0YXR1czsKICAgIFdoaXRlbGlzdGVkKGFkZHIsIHN0YXR1cyk7CiAgfQoKICAvKioKICAgKiBBbGxvdyB0byAocmUpc2V0IGZpbmFsaXplIGFnZW50LgogICAqLwogIGZ1bmN0aW9uIHNldEZpbmFsaXplQWdlbnQoRmluYWxpemVBZ2VudCBhZGRyKSBpbnRlcm5hbCB7CiAgICAvLyBEaXNhbGxvdyBzZXR0aW5nIGEgYmFkIGFnZW50CiAgICByZXF1aXJlKGFkZHJlc3MoYWRkcikgPT0gMCB8fCBhZGRyLmlzRmluYWxpemVBZ2VudCgpKTsKICAgIGZpbmFsaXplQWdlbnQgPSBhZGRyOwogICAgcmVxdWlyZShpc0ZpbmFsaXplclNhbmUoKSk7CiAgfQoKICAvKioKICAgKiBJbnRlcm5hbCBzZXR0ZXIgZm9yIHRoZSBtdWx0aXNpZyB3YWxsZXQKICAgKi8KICBmdW5jdGlvbiBzZXRNdWx0aXNpZyhhZGRyZXNzIGFkZHIpIGludGVybmFsIHsKICAgIHJlcXVpcmUoYWRkciAhPSAwKTsKICAgIG11bHRpc2lnV2FsbGV0ID0gYWRkcjsKICB9CgogIC8qKgogICAqIEFsbG93IGxvYWQgcmVmdW5kcyBiYWNrIG9uIHRoZSBjb250cmFjdCBmb3IgdGhlIHJlZnVuZGluZy4KICAgKgogICAqIFRoZSB0ZWFtIGNhbiB0cmFuc2ZlciB0aGUgZnVuZHMgYmFjayBvbiB0aGUgc21hcnQgY29udHJhY3QgaW4gdGhlIGNhc2UgdGhhdCB0aGUgbWluaW11bSBnb2FsIHdhcyBub3QgcmVhY2hlZC4KICAgKi8KICBmdW5jdGlvbiBsb2FkUmVmdW5kKCkgcHVibGljIHBheWFibGUgaW5TdGF0ZShTdGF0ZS5GYWlsdXJlKSBzdG9wSW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gd2VpUmFpc2VkKTsKICAgIHJlcXVpcmUod2VpUmVmdW5kZWQgPT0gMCk7CiAgICB1aW50IGV4Y2VkZW50ID0gbXNnLnZhbHVlLnN1Yih3ZWlSYWlzZWQpOwogICAgbG9hZGVkUmVmdW5kID0gbG9hZGVkUmVmdW5kLmFkZChtc2cudmFsdWUuc3ViKGV4Y2VkZW50KSk7CiAgICBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdLmFkZChleGNlZGVudCk7CiAgfQoKICAvKioKICAgKiBJbnZlc3RvcnMgY2FuIGNsYWltIHJlZnVuZC4KICAgKi8KICBmdW5jdGlvbiByZWZ1bmQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5SZWZ1bmRpbmcpIHN0b3BJbkVtZXJnZW5jeSB7CiAgICB1aW50IHdlaVZhbHVlID0gaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXTsKICAgIHJlcXVpcmUod2VpVmFsdWUgIT0gMCk7CiAgICBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdID0gMDsKICAgIHdlaVJlZnVuZGVkID0gd2VpUmVmdW5kZWQuYWRkKHdlaVZhbHVlKTsKICAgIFJlZnVuZChtc2cuc2VuZGVyLCB3ZWlWYWx1ZSk7CiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHdlaVZhbHVlKTsKICB9CgogIC8qKgogICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgY3Jvd2RzYWxlIGhhcyByYWlzZWQgZW5vdWdoIG1vbmV5IHRvIGJlIGEgc3VjY2VzcwogICAqLwogIGZ1bmN0aW9uIGlzTWluaW11bUdvYWxSZWFjaGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgcmVhY2hlZCkgewogICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBtaW5pbXVtRnVuZGluZ0dvYWw7CiAgfQoKICBmdW5jdGlvbiBpc0Nyb3dkc2FsZUZ1bGwoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sIGZ1bGwpOwoKICAvKioKICAgKiBDaGVjayBpZiB0aGUgY29udHJhY3QgcmVsYXRpb25zaGlwIGxvb2tzIGdvb2QuCiAgICovCiAgZnVuY3Rpb24gaXNGaW5hbGl6ZXJTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgc2FuZSkgewogICAgcmV0dXJuIGFkZHJlc3MoZmluYWxpemVBZ2VudCkgPT0gMCB8fCBmaW5hbGl6ZUFnZW50LmlzU2FuZSh0b2tlbik7CiAgfQoKICAvKioKICAgKiBDcm93ZGZ1bmQgc3RhdGUgbWFjaGluZSBtYW5hZ2VtZW50LgogICAqCiAgICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHRpbWVkIHRyYW5zaXRpb24gYnVpbHRpbi4KICAgKiBTbyB0aGVyZSBpcyBubyBjaGFuY2Ugb2YgdGhlIHZhcmlhYmxlIGJlaW5nIHN0YWxlLgogICAqLwogIGZ1bmN0aW9uIGdldFN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKFN0YXRlKSB7CiAgICBpZiAoZmluYWxpemVkKSByZXR1cm4gU3RhdGUuRmluYWxpemVkOwogICAgZWxzZSBpZiAoYmxvY2subnVtYmVyIDwgc3RhcnRzQXQpIHJldHVybiBTdGF0ZS5QcmVGdW5kaW5nOwogICAgZWxzZSBpZiAoYmxvY2subnVtYmVyIDw9IGVuZHNBdCAmJiAhaXNDcm93ZHNhbGVGdWxsKCkpIHJldHVybiBTdGF0ZS5GdW5kaW5nOwogICAgZWxzZSBpZiAoaXNNaW5pbXVtR29hbFJlYWNoZWQoKSkgcmV0dXJuIFN0YXRlLlN1Y2Nlc3M7CiAgICBlbHNlIGlmICghaXNNaW5pbXVtR29hbFJlYWNoZWQoKSAmJiB3ZWlSYWlzZWQgPiAwICYmIGxvYWRlZFJlZnVuZCA+PSB3ZWlSYWlzZWQpIHJldHVybiBTdGF0ZS5SZWZ1bmRpbmc7CiAgICBlbHNlIHJldHVybiBTdGF0ZS5GYWlsdXJlOwogIH0KCiAgLyoqIFRoaXMgaXMgZm9yIG1hbnVhbCB0ZXN0aW5nIG9mIG11bHRpc2lnIHdhbGxldCBpbnRlcmFjdGlvbiAqLwogIGZ1bmN0aW9uIHNldE93bmVyVGVzdFZhbHVlKHVpbnQ4IHZhbCkgcHVibGljIG9ubHlPd25lciBzdG9wSW5FbWVyZ2VuY3kgewogICAgb3duZXJUZXN0VmFsdWUgPSB2YWw7CiAgfQoKICAvKiogSW50ZXJmYWNlIGZvciB0aGUgY29uY3JldGUgaW5zdGFuY2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgdG9rZW4gY29udHJhY3QgaW4gYSBjdXN0b21pemFibGUgd2F5ICovCiAgZnVuY3Rpb24gYXNzaWduVG9rZW5zKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgdG9rZW5BbW91bnQpIGludGVybmFsOwoKICAvKiogSW50ZXJmYWNlIG1hcmtlci4gKi8KICBmdW5jdGlvbiBpc0Nyb3dkc2FsZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vCiAgLy8gTW9kaWZpZXJzCiAgLy8KCiAgLyoqIE1vZGlmaWVyIGFsbG93aW5nIGV4ZWN1dGlvbiBvbmx5IGlmIHRoZSBjcm93ZHNhbGUgaXMgY3VycmVudGx5IHJ1bm5pbmcuICAqLwogIG1vZGlmaWVyIGluU3RhdGUoU3RhdGUgc3RhdGUpIHsKICAgIHJlcXVpcmUoZ2V0U3RhdGUoKSA9PSBzdGF0ZSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbm90RmluaXNoZWQoKSB7CiAgICBTdGF0ZSBjdXJyZW50X3N0YXRlID0gZ2V0U3RhdGUoKTsKICAgIHJlcXVpcmUoY3VycmVudF9zdGF0ZSA9PSBTdGF0ZS5QcmVGdW5kaW5nIHx8IGN1cnJlbnRfc3RhdGUgPT0gU3RhdGUuRnVuZGluZyk7CiAgICBfOwogIH0KCn0KCgpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgR2VuZXJpY0Nyb3dkc2FsZSB7CgogIC8vIFRoZSBmdW5kaW5nIGNhbm5vdCBleGNlZWQgdGhpcyBjYXA7IGl0IG1heSBiZSBzZXQgbGF0ZXIgb24gZHVyaW5nIHRoZSBjcm93ZHNhbGUKICB1aW50IHB1YmxpYyB3ZWlGdW5kaW5nQ2FwID0gMDsKCiAgLy8gQSBuZXcgZnVuZGluZyBjYXAgaGFzIGJlZW4gc2V0CiAgZXZlbnQgRnVuZGluZ0NhcFNldCh1aW50IG5ld0Z1bmRpbmdDYXApOwoKCiAgLyoqCiAgICogQWxsb3cgdGhlIG93bmVyIHRvIHNldCBhIGZ1bmRpbmcgY2FwIG9uIHRoZSBjcm93ZHNhbGUuCiAgICogVGhlIG5ldyBjYXAgc2hvdWxkIGJlIGhpZ2hlciB0aGFuIHRoZSBtaW5pbXVtIGZ1bmRpbmcgZ29hbC4KICAgKiAKICAgKiBAcGFyYW0gbmV3Q2FwIG1pbmltdW0gdGFyZ2V0IGNhcCB0aGF0IG1heSBiZSByZWxheGVkIGlmIGl0IHdhcyBhbHJlYWR5IGJyb2tlbi4KICAgKi8KCgogIGZ1bmN0aW9uIHNldEZ1bmRpbmdDYXAodWludCBuZXdDYXApIGludGVybmFsIG9ubHlPd25lciBub3RGaW5pc2hlZCB7CiAgICB3ZWlGdW5kaW5nQ2FwID0gbmV3Q2FwOwogICAgcmVxdWlyZSh3ZWlGdW5kaW5nQ2FwID49IG1pbmltdW1GdW5kaW5nR29hbCk7CiAgICBGdW5kaW5nQ2FwU2V0KHdlaUZ1bmRpbmdDYXApOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIG9rKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgb2spOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgovKioKICogQSB0b2tlbiB0aGF0IGRlZmluZXMgZnJhY3Rpb25hbCB1bml0cyBhcyBkZWNpbWFscy4KICovCmNvbnRyYWN0IEZyYWN0aW9uYWxFUkMyMCBpcyBFUkMyMCB7CgogIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKCn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogIC8qKgogICAqIE9ic29sZXRlLiBSZW1vdmVkIHRoaXMgY2hlY2sgYmFzZWQgb246CiAgICogaHR0cHM6Ly9ibG9nLmNvaW5mYWJyaWsuY29tL3NtYXJ0LWNvbnRyYWN0LXNob3J0LWFkZHJlc3MtYXR0YWNrLW1pdGlnYXRpb24tZmFpbHVyZS8KICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAqCiAgICogbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAqICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgKiAgICBfOwogICAqIH0KICAgKi8KCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KICAKfQoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgQmFzaWNUb2tlbiwgRVJDMjAgewoKICAvKiBUb2tlbiBzdXBwbHkgZ290IGluY3JlYXNlZCBhbmQgYSBuZXcgb3duZXIgcmVjZWl2ZWQgdGhlc2UgdG9rZW5zICovCiAgZXZlbnQgTWludGVkKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KTsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwoKICAvKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24gKi8KICBmdW5jdGlvbiBpc1Rva2VuKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgd2VBcmUpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludCB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwogICAgLy8gU2FmZU1hdGggdXNlcyBhc3NlcnQgaW5zdGVhZCBvZiByZXF1aXJlIHRob3VnaCwgYmV3YXJlIHdoZW4gdXNpbmcgYW4gYW5hbHlzaXMgdG9vbAoKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3NlcycKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSAoX3ZhbHVlID09IDAgfHwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCk7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGFuIGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludCBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQXRvbWljIGluY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZwogICAqCiAgICogV29ya3MgYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICoKICAgKi8KICBmdW5jdGlvbiBhZGRBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLmFkZChfYWRkZWRWYWx1ZSk7CiAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQXRvbWljIGRlY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZy4KICAgKgogICAqIFdvcmtzIGFyb3VuZCBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqLwogIGZ1bmN0aW9uIHN1YkFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICB1aW50IG9sZFZhbCA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwoKICAgICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWwpIHsKICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgICAgfQogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCn0KCi8qKgogKiBEZWZpbmUgaW50ZXJmYWNlIGZvciByZWxlYXNpbmcgdGhlIHRva2VuIHRyYW5zZmVyIGFmdGVyIGEgc3VjY2Vzc2Z1bCBjcm93ZHNhbGUuCiAqLwpjb250cmFjdCBSZWxlYXNhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CgogIC8qIFRoZSBmaW5hbGl6ZXIgY29udHJhY3QgdGhhdCBhbGxvd3MgbGlmdGluZyB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4gKi8KICBhZGRyZXNzIHB1YmxpYyByZWxlYXNlQWdlbnQ7CgogIC8qKiBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4qLwogIGJvb2wgcHVibGljIHJlbGVhc2VkID0gZmFsc2U7CgogIC8qKiBNYXAgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gdHJhbnNmZXIgdG9rZW5zIHJlZ2FyZGxlc3Mgb2YgdGhlIGxvY2sgZG93biBwZXJpb2QuIFRoZXNlIGFyZSBjcm93ZHNhbGUgY29udHJhY3RzIGFuZCBwb3NzaWJsZSB0aGUgdGVhbSBtdWx0aXNpZyBpdHNlbGYuICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgdHJhbnNmZXJBZ2VudHM7CgogIC8qKgogICAqIFNldCB0aGUgY29udHJhY3QgdGhhdCBjYW4gY2FsbCByZWxlYXNlIGFuZCBtYWtlIHRoZSB0b2tlbiB0cmFuc2ZlcmFibGUuCiAgICoKICAgKiBTaW5jZSB0aGUgb3duZXIgb2YgdGhpcyBjb250cmFjdCBpcyAob3Igc2hvdWxkIGJlKSB0aGUgY3Jvd2RzYWxlLAogICAqIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCBieSBhIGNvcnJlc3BvbmRpbmcgZXhwb3NlZCBBUEkgaW4gdGhlIGNyb3dkc2FsZSBjb250cmFjdCBpbiBjYXNlIG9mIGlucHV0IGVycm9yLgogICAqLwogIGZ1bmN0aW9uIHNldFJlbGVhc2VBZ2VudChhZGRyZXNzIGFkZHIpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKICAgIC8vIFdlIGRvbid0IGRvIGludGVyZmFjZSBjaGVjayBoZXJlIGFzIHdlIG1pZ2h0IHdhbnQgdG8gaGF2ZSBhIG5vcm1hbCB3YWxsZXQgYWRkcmVzcyB0byBhY3QgYXMgYSByZWxlYXNlIGFnZW50LgogICAgcmVsZWFzZUFnZW50ID0gYWRkcjsKICB9CgogIC8qKgogICAqIE93bmVyIGNhbiBhbGxvdyBhIHBhcnRpY3VsYXIgYWRkcmVzcyAoZS5nLiBhIGNyb3dkc2FsZSBjb250cmFjdCkgdG8gdHJhbnNmZXIgdG9rZW5zIGRlc3BpdGUgdGhlIGxvY2sgdXAgcGVyaW9kLgogICAqLwogIGZ1bmN0aW9uIHNldFRyYW5zZmVyQWdlbnQoYWRkcmVzcyBhZGRyLCBib29sIHN0YXRlKSBvbmx5T3duZXIgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CiAgICB0cmFuc2ZlckFnZW50c1thZGRyXSA9IHN0YXRlOwogIH0KCiAgLyoqCiAgICogT25lIHdheSBmdW5jdGlvbiB0byByZWxlYXNlIHRoZSB0b2tlbnMgaW50byB0aGUgd2lsZC4KICAgKgogICAqIENhbiBiZSBjYWxsZWQgb25seSBmcm9tIHRoZSByZWxlYXNlIGFnZW50IHRoYXQgc2hvdWxkIHR5cGljYWxseSBiZSB0aGUgZmluYWxpemUgYWdlbnQgSUNPIGNvbnRyYWN0LgogICAqIEluIHRoZSBzY29wZSBvZiB0aGUgY3Jvd2RzYWxlLCBpdCBpcyBvbmx5IGNhbGxlZCBpZiB0aGUgY3Jvd2RzYWxlIGhhcyBiZWVuIGEgc3VjY2VzcyAoZmlyc3QgbWlsZXN0b25lIHJlYWNoZWQpLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VUb2tlblRyYW5zZmVyKCkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgewogICAgcmVsZWFzZWQgPSB0cnVlOwogIH0KCiAgLyoqCiAgICogTGltaXQgdG9rZW4gdHJhbnNmZXIgdW50aWwgdGhlIGNyb3dkc2FsZSBpcyBvdmVyLgogICAqLwogIG1vZGlmaWVyIGNhblRyYW5zZmVyKGFkZHJlc3MgX3NlbmRlcikgewogICAgcmVxdWlyZShyZWxlYXNlZCB8fCB0cmFuc2ZlckFnZW50c1tfc2VuZGVyXSk7CiAgICBfOwogIH0KCiAgLyoqIFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYmVmb3JlIG9yIGFmdGVyIHRoZSB0b2tlbnMgaGF2ZSBiZWVuIHJlbGVhc2VkICovCiAgbW9kaWZpZXIgaW5SZWxlYXNlU3RhdGUoYm9vbCByZWxlYXNlU3RhdGUpIHsKICAgIHJlcXVpcmUocmVsZWFzZVN0YXRlID09IHJlbGVhc2VkKTsKICAgIF87CiAgfQoKICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSBhIHdoaXRlbGlzdGVkIHJlbGVhc2UgYWdlbnQuICovCiAgbW9kaWZpZXIgb25seVJlbGVhc2VBZ2VudCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSByZWxlYXNlQWdlbnQpOwogICAgXzsKICB9CgogIC8qKiBXZSByZXN0cmljdCB0cmFuc2ZlciBieSBvdmVycmlkaW5nIGl0ICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgY2FuVHJhbnNmZXIobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAvLyBDYWxsIFN0YW5kYXJkVG9rZW4udHJhbnNmZXIoKQogICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqIFdlIHJlc3RyaWN0IHRyYW5zZmVyRnJvbSBieSBvdmVycmlkaW5nIGl0ICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIGNhblRyYW5zZmVyKF9mcm9tKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIC8vIENhbGwgU3RhbmRhcmRUb2tlbi50cmFuc2ZlckZvcm0oKQogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCn0KCi8qKgogKiBBIHRva2VuIHRoYXQgY2FuIGluY3JlYXNlIGl0cyBzdXBwbHkgYnkgYW5vdGhlciBjb250cmFjdC4KICoKICogVGhpcyBhbGxvd3MgdW5jYXBwZWQgY3Jvd2RzYWxlIGJ5IGR5bmFtaWNhbGx5IGluY3JlYXNpbmcgdGhlIHN1cHBseSB3aGVuIG1vbmV5IHBvdXJzIGluLgogKiBPbmx5IG1pbnQgYWdlbnRzLCBjb250cmFjdHMgd2hpdGVsaXN0ZWQgYnkgb3duZXIsIGNhbiBtaW50IG5ldyB0b2tlbnMuCiAqCiAqLwpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogIC8qKiBMaXN0IG9mIGFnZW50cyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNyZWF0ZSBuZXcgdG9rZW5zICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgbWludEFnZW50czsKCiAgZXZlbnQgTWludGluZ0FnZW50Q2hhbmdlZChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUpOwoKCiAgZnVuY3Rpb24gTWludGFibGVUb2tlbih1aW50IF9pbml0aWFsU3VwcGx5LCBhZGRyZXNzIF9tdWx0aXNpZywgYm9vbCBfbWludGFibGUpIGludGVybmFsIHsKICAgIHJlcXVpcmUoX211bHRpc2lnICE9IGFkZHJlc3MoMCkpOwogICAgLy8gQ2Fubm90IGNyZWF0ZSBhIHRva2VuIHdpdGhvdXQgc3VwcGx5IGFuZCBubyBtaW50aW5nCiAgICByZXF1aXJlKF9taW50YWJsZSB8fCBfaW5pdGlhbFN1cHBseSAhPSAwKTsKICAgIC8vIENyZWF0ZSBpbml0aWFsbHkgYWxsIGJhbGFuY2Ugb24gdGhlIHRlYW0gbXVsdGlzaWcKICAgIGlmIChfaW5pdGlhbFN1cHBseSA+IDApCiAgICAgICAgbWludEludGVybmFsKF9tdWx0aXNpZywgX2luaXRpYWxTdXBwbHkpOwogICAgLy8gTm8gbW9yZSBuZXcgc3VwcGx5IGFsbG93ZWQgYWZ0ZXIgdGhlIHRva2VuIGNyZWF0aW9uCiAgICBtaW50aW5nRmluaXNoZWQgPSAhX21pbnRhYmxlOwogIH0KCiAgLyoqCiAgICogQ3JlYXRlIG5ldyB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gYW4gYWRkcmVzcy4KICAgKgogICAqIE9ubHkgY2FsbGFibGUgYnkgYSBjcm93ZHNhbGUgY29udHJhY3QgKG1pbnQgYWdlbnQpLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpIG9ubHlNaW50QWdlbnQgcHVibGljIHsKICAgIG1pbnRJbnRlcm5hbChyZWNlaXZlciwgYW1vdW50KTsKICB9CgogIGZ1bmN0aW9uIG1pbnRJbnRlcm5hbChhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgY2FuTWludCBwcml2YXRlIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKGFtb3VudCk7CiAgICBiYWxhbmNlc1tyZWNlaXZlcl0gPSBiYWxhbmNlc1tyZWNlaXZlcl0uYWRkKGFtb3VudCk7CgogICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIG1pbnQgdHJhbnNhY3Rpb24gYXBwZWFyIGluIEV0aGVyU2Nhbi5pbwogICAgLy8gV2UgY2FuIHJlbW92ZSB0aGlzIGFmdGVyIHRoZXJlIGlzIGEgc3RhbmRhcmRpemVkIG1pbnRpbmcgZXZlbnQKICAgIFRyYW5zZmVyKDAsIHJlY2VpdmVyLCBhbW91bnQpOwoKICAgIE1pbnRlZChyZWNlaXZlciwgYW1vdW50KTsKICB9CgogIC8qKgogICAqIE93bmVyIGNhbiBhbGxvdyBhIGNyb3dkc2FsZSBjb250cmFjdCB0byBtaW50IG5ldyB0b2tlbnMuCiAgICovCiAgZnVuY3Rpb24gc2V0TWludEFnZW50KGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0ZSkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHsKICAgIG1pbnRBZ2VudHNbYWRkcl0gPSBzdGF0ZTsKICAgIE1pbnRpbmdBZ2VudENoYW5nZWQoYWRkciwgc3RhdGUpOwogIH0KCiAgbW9kaWZpZXIgb25seU1pbnRBZ2VudCgpIHsKICAgIC8vIE9ubHkgbWludCBhZ2VudHMgYXJlIGFsbG93ZWQgdG8gbWludCBuZXcgdG9rZW5zCiAgICByZXF1aXJlKG1pbnRBZ2VudHNbbXNnLnNlbmRlcl0pOwogICAgXzsKICB9CgogIC8qKiBNYWtlIHN1cmUgd2UgYXJlIG5vdCBkb25lIHlldC4gKi8KICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQp9CgovKioKICogVXBncmFkZSBhZ2VudCB0cmFuc2ZlcnMgdG9rZW5zIHRvIGEgbmV3IGNvbnRyYWN0LgogKiBVcGdyYWRlIGFnZW50IGl0c2VsZiBjYW4gYmUgdGhlIHRva2VuIGNvbnRyYWN0LCBvciBqdXN0IGEgbWlkZGxlIG1hbiBjb250cmFjdCBkb2luZyB0aGUgaGVhdnkgbGlmdGluZy4KICoKICogVGhlIFVwZ3JhZGUgYWdlbnQgaXMgdGhlIGludGVyZmFjZSB1c2VkIHRvIGltcGxlbWVudCBhIHRva2VuCiAqIG1pZ3JhdGlvbiBpbiB0aGUgY2FzZSBvZiBhbiBlbWVyZ2VuY3kuCiAqIFRoZSBmdW5jdGlvbiB1cGdyYWRlRnJvbSBoYXMgdG8gaW1wbGVtZW50IHRoZSBwYXJ0IG9mIHRoZSBjcmVhdGlvbgogKiBvZiBuZXcgdG9rZW5zIG9uIGJlaGFsZiBvZiB0aGUgdXNlciBkb2luZyB0aGUgdXBncmFkZS4KICoKICogVGhlIG5ldyB0b2tlbiBjYW4gaW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlIGRpcmVjdGx5LCBvciB1c2UuCiAqLwpjb250cmFjdCBVcGdyYWRlQWdlbnQgewoKICAvKiogVGhpcyB2YWx1ZSBzaG91bGQgYmUgdGhlIHNhbWUgYXMgdGhlIG9yaWdpbmFsIHRva2VuJ3MgdG90YWwgc3VwcGx5ICovCiAgdWludCBwdWJsaWMgb3JpZ2luYWxTdXBwbHk7CgogIC8qKiBJbnRlcmZhY2UgdG8gZW5zdXJlIHRoZSBjb250cmFjdCBpcyBjb3JyZWN0bHkgY29uZmlndXJlZCAqLwogIGZ1bmN0aW9uIGlzVXBncmFkZUFnZW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgVXBncmFkZSBhbiBhY2NvdW50CgogIFdoZW4gdGhlIHRva2VuIGNvbnRyYWN0IGlzIGluIHRoZSB1cGdyYWRlIHN0YXR1cyB0aGUgZWFjaCB1c2VyIHdpbGwKICBoYXZlIHRvIGNhbGwgYHVwZ3JhZGUodmFsdWUpYCBmdW5jdGlvbiBmcm9tIFVwZ3JhZGVhYmxlVG9rZW4uCgogIFRoZSB1cGdyYWRlIGZ1bmN0aW9uIGFkanVzdCB0aGUgYmFsYW5jZSBvZiB0aGUgdXNlciBhbmQgdGhlIHN1cHBseQogIG9mIHRoZSBwcmV2aW91cyB0b2tlbiBhbmQgdGhlbiBjYWxsIGB1cGdyYWRlRnJvbSh2YWx1ZSlgLgoKICBUaGUgVXBncmFkZUFnZW50IGlzIHRoZSByZXNwb25zaWJsZSB0byBjcmVhdGUgdGhlIHRva2VucyBmb3IgdGhlIHVzZXIKICBpbiB0aGUgbmV3IGNvbnRyYWN0LgoKICAqIEBwYXJhbSBfZnJvbSBBY2NvdW50IHRvIHVwZ3JhZGUuCiAgKiBAcGFyYW0gX3ZhbHVlIFRva2VucyB0byB1cGdyYWRlLgoKICAqLwogIGZ1bmN0aW9uIHVwZ3JhZGVGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlKSBwdWJsaWM7Cgp9CgovKioKICogQSB0b2tlbiB1cGdyYWRlIG1lY2hhbmlzbSB3aGVyZSB1c2VycyBjYW4gb3B0LWluIGFtb3VudCBvZiB0b2tlbnMgdG8gdGhlIG5leHQgc21hcnQgY29udHJhY3QgcmV2aXNpb24uCiAqCiAqLwpjb250cmFjdCBVcGdyYWRlYWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewoKICAvKiogQ29udHJhY3QgLyBwZXJzb24gd2hvIGNhbiBzZXQgdGhlIHVwZ3JhZGUgcGF0aC4gVGhpcyBjYW4gYmUgdGhlIHNhbWUgYXMgdGVhbSBtdWx0aXNpZyB3YWxsZXQsIGFzIHdoYXQgaXQgaXMgd2l0aCBpdHMgZGVmYXVsdCB2YWx1ZS4gKi8KICBhZGRyZXNzIHB1YmxpYyB1cGdyYWRlTWFzdGVyOwoKICAvKiogVGhlIG5leHQgY29udHJhY3Qgd2hlcmUgdGhlIHRva2VucyB3aWxsIGJlIG1pZ3JhdGVkLiAqLwogIFVwZ3JhZGVBZ2VudCBwdWJsaWMgdXBncmFkZUFnZW50OwoKICAvKiogSG93IG1hbnkgdG9rZW5zIHdlIGhhdmUgdXBncmFkZWQgYnkgbm93LiAqLwogIHVpbnQgcHVibGljIHRvdGFsVXBncmFkZWQ7CgogIC8qKgogICAqIFVwZ3JhZGUgc3RhdGVzLgogICAqCiAgICogLSBOb3RBbGxvd2VkOiBUaGUgY2hpbGQgY29udHJhY3QgaGFzIG5vdCByZWFjaGVkIGEgY29uZGl0aW9uIHdoZXJlIHRoZSB1cGdyYWRlIGNhbiBiZ3VuCiAgICogLSBXYWl0aW5nRm9yQWdlbnQ6IFRva2VuIGFsbG93cyB1cGdyYWRlLCBidXQgd2UgZG9uJ3QgaGF2ZSBhIG5ldyBhZ2VudCB5ZXQKICAgKiAtIFJlYWR5VG9VcGdyYWRlOiBUaGUgYWdlbnQgaXMgc2V0LCBidXQgbm90IGEgc2luZ2xlIHRva2VuIGhhcyBiZWVuIHVwZ3JhZGVkIHlldAogICAqIC0gVXBncmFkaW5nOiBVcGdyYWRlIGFnZW50IGlzIHNldCBhbmQgdGhlIGJhbGFuY2UgaG9sZGVycyBjYW4gdXBncmFkZSB0aGVpciB0b2tlbnMKICAgKgogICAqLwogIGVudW0gVXBncmFkZVN0YXRlIHtVbmtub3duLCBOb3RBbGxvd2VkLCBXYWl0aW5nRm9yQWdlbnQsIFJlYWR5VG9VcGdyYWRlLCBVcGdyYWRpbmd9CgogIC8qKgogICAqIFNvbWVib2R5IGhhcyB1cGdyYWRlZCBzb21lIG9mIGhpcyB0b2tlbnMuCiAgICovCiAgZXZlbnQgVXBncmFkZShhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKCiAgLyoqCiAgICogTmV3IHVwZ3JhZGUgYWdlbnQgYXZhaWxhYmxlLgogICAqLwogIGV2ZW50IFVwZ3JhZGVBZ2VudFNldChhZGRyZXNzIGFnZW50KTsKCiAgLyoqCiAgICogRG8gbm90IGFsbG93IGNvbnN0cnVjdGlvbiB3aXRob3V0IHVwZ3JhZGUgbWFzdGVyIHNldC4KICAgKi8KICBmdW5jdGlvbiBVcGdyYWRlYWJsZVRva2VuKGFkZHJlc3MgX3VwZ3JhZGVNYXN0ZXIpIHsKICAgIHNldFVwZ3JhZGVNYXN0ZXIoX3VwZ3JhZGVNYXN0ZXIpOwogIH0KCiAgLyoqCiAgICogQWxsb3cgdGhlIHRva2VuIGhvbGRlciB0byB1cGdyYWRlIHNvbWUgb2YgdGhlaXIgdG9rZW5zIHRvIGEgbmV3IGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIHVwZ3JhZGUodWludCB2YWx1ZSkgcHVibGljIHsKICAgIFVwZ3JhZGVTdGF0ZSBzdGF0ZSA9IGdldFVwZ3JhZGVTdGF0ZSgpOwogICAgLy8gRW5zdXJlIGl0J3Mgbm90IGNhbGxlZCBpbiBhIGJhZCBzdGF0ZQogICAgcmVxdWlyZShzdGF0ZSA9PSBVcGdyYWRlU3RhdGUuUmVhZHlUb1VwZ3JhZGUgfHwgc3RhdGUgPT0gVXBncmFkZVN0YXRlLlVwZ3JhZGluZyk7CgogICAgLy8gVmFsaWRhdGUgaW5wdXQgdmFsdWUuCiAgICByZXF1aXJlKHZhbHVlICE9IDApOwoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKCiAgICAvLyBUYWtlIHRva2VucyBvdXQgZnJvbSBjaXJjdWxhdGlvbgogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIodmFsdWUpOwogICAgdG90YWxVcGdyYWRlZCA9IHRvdGFsVXBncmFkZWQuYWRkKHZhbHVlKTsKCiAgICAvLyBVcGdyYWRlIGFnZW50IHJlaXNzdWVzIHRoZSB0b2tlbnMKICAgIHVwZ3JhZGVBZ2VudC51cGdyYWRlRnJvbShtc2cuc2VuZGVyLCB2YWx1ZSk7CiAgICBVcGdyYWRlKG1zZy5zZW5kZXIsIHVwZ3JhZGVBZ2VudCwgdmFsdWUpOwogIH0KCiAgLyoqCiAgICogU2V0IGFuIHVwZ3JhZGUgYWdlbnQgdGhhdCBoYW5kbGVzIHRoZSB1cGdyYWRlIHByb2Nlc3MKICAgKi8KICBmdW5jdGlvbiBzZXRVcGdyYWRlQWdlbnQoYWRkcmVzcyBhZ2VudCkgZXh0ZXJuYWwgewogICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgdG9rZW4gaXMgaW4gYSBzdGF0ZSB0aGF0IHdlIGNvdWxkIHRoaW5rIG9mIHVwZ3JhZGluZwogICAgcmVxdWlyZShjYW5VcGdyYWRlKCkpOwoKICAgIHJlcXVpcmUoYWdlbnQgIT0gMHgwKTsKICAgIC8vIE9ubHkgYSBtYXN0ZXIgY2FuIGRlc2lnbmF0ZSB0aGUgbmV4dCBhZ2VudAogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHVwZ3JhZGVNYXN0ZXIpOwogICAgLy8gVXBncmFkZSBoYXMgYWxyZWFkeSBiZWd1biBmb3IgYW4gYWdlbnQKICAgIHJlcXVpcmUoZ2V0VXBncmFkZVN0YXRlKCkgIT0gVXBncmFkZVN0YXRlLlVwZ3JhZGluZyk7CgogICAgdXBncmFkZUFnZW50ID0gVXBncmFkZUFnZW50KGFnZW50KTsKCiAgICAvLyBCYWQgaW50ZXJmYWNlCiAgICByZXF1aXJlKHVwZ3JhZGVBZ2VudC5pc1VwZ3JhZGVBZ2VudCgpKTsKICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRva2VuIHN1cHBsaWVzIG1hdGNoIGluIHNvdXJjZSBhbmQgdGFyZ2V0CiAgICByZXF1aXJlKHVwZ3JhZGVBZ2VudC5vcmlnaW5hbFN1cHBseSgpID09IHRvdGFsU3VwcGx5KTsKCiAgICBVcGdyYWRlQWdlbnRTZXQodXBncmFkZUFnZW50KTsKICB9CgogIC8qKgogICAqIEdldCB0aGUgc3RhdGUgb2YgdGhlIHRva2VuIHVwZ3JhZGUuCiAgICovCiAgZnVuY3Rpb24gZ2V0VXBncmFkZVN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoVXBncmFkZVN0YXRlKSB7CiAgICBpZiAoIWNhblVwZ3JhZGUoKSkgcmV0dXJuIFVwZ3JhZGVTdGF0ZS5Ob3RBbGxvd2VkOwogICAgZWxzZSBpZiAoYWRkcmVzcyh1cGdyYWRlQWdlbnQpID09IDB4MDApIHJldHVybiBVcGdyYWRlU3RhdGUuV2FpdGluZ0ZvckFnZW50OwogICAgZWxzZSBpZiAodG90YWxVcGdyYWRlZCA9PSAwKSByZXR1cm4gVXBncmFkZVN0YXRlLlJlYWR5VG9VcGdyYWRlOwogICAgZWxzZSByZXR1cm4gVXBncmFkZVN0YXRlLlVwZ3JhZGluZzsKICB9CgogIC8qKgogICAqIENoYW5nZSB0aGUgdXBncmFkZSBtYXN0ZXIuCiAgICoKICAgKiBUaGlzIGFsbG93cyB1cyB0byBzZXQgYSBuZXcgb3duZXIgZm9yIHRoZSB1cGdyYWRlIG1lY2hhbmlzbS4KICAgKi8KICBmdW5jdGlvbiBjaGFuZ2VVcGdyYWRlTWFzdGVyKGFkZHJlc3MgbmV3X21hc3RlcikgcHVibGljIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB1cGdyYWRlTWFzdGVyKTsKICAgIHNldFVwZ3JhZGVNYXN0ZXIobmV3X21hc3Rlcik7CiAgfQoKICAvKioKICAgKiBJbnRlcm5hbCB1cGdyYWRlIG1hc3RlciBzZXR0ZXIuCiAgICovCiAgZnVuY3Rpb24gc2V0VXBncmFkZU1hc3RlcihhZGRyZXNzIG5ld19tYXN0ZXIpIHByaXZhdGUgewogICAgcmVxdWlyZShuZXdfbWFzdGVyICE9IDB4MCk7CiAgICB1cGdyYWRlTWFzdGVyID0gbmV3X21hc3RlcjsKICB9CgogIC8qKgogICAqIENoaWxkIGNvbnRyYWN0IGNhbiBlbmFibGUgdG8gcHJvdmlkZSB0aGUgY29uZGl0aW9uIHdoZW4gdGhlIHVwZ3JhZGUgY2FuIGJlZ2luLgogICAqLwogIGZ1bmN0aW9uIGNhblVwZ3JhZGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCi8qKgogKiBBIGNyb3dkc2FsZSB0b2tlbi4KICoKICogQW4gRVJDLTIwIHRva2VuIGRlc2lnbmVkIHNwZWNpZmljYWxseSBmb3IgY3Jvd2RzYWxlcyB3aXRoIGludmVzdG9yIHByb3RlY3Rpb24gYW5kIGZ1cnRoZXIgZGV2ZWxvcG1lbnQgcGF0aC4KICoKICogLSBUaGUgdG9rZW4gdHJhbnNmZXIoKSBpcyBkaXNhYmxlZCB1bnRpbCB0aGUgY3Jvd2RzYWxlIGlzIG92ZXIKICogLSBUaGUgdG9rZW4gY29udHJhY3QgZ2l2ZXMgYW4gb3B0LWluIHVwZ3JhZGUgcGF0aCB0byBhIG5ldyBjb250cmFjdAogKiAtIFRoZSBzYW1lIHRva2VuIGNhbiBiZSBwYXJ0IG9mIHNldmVyYWwgY3Jvd2RzYWxlcyB0aHJvdWdoIHRoZSBhcHByb3ZlKCkgbWVjaGFuaXNtCiAqIC0gVGhlIHRva2VuIGNhbiBiZSBjYXBwZWQgKHN1cHBseSBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yKSBvciB1bmNhcHBlZCAoY3Jvd2RzYWxlIGNvbnRyYWN0IGNhbiBtaW50IG5ldyB0b2tlbnMpCiAqCiAqLwpjb250cmFjdCBDcm93ZHNhbGVUb2tlbiBpcyBSZWxlYXNhYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW4sIFVwZ3JhZGVhYmxlVG9rZW4sIEZyYWN0aW9uYWxFUkMyMCB7CgogIGV2ZW50IFVwZGF0ZWRUb2tlbkluZm9ybWF0aW9uKHN0cmluZyBuZXdOYW1lLCBzdHJpbmcgbmV3U3ltYm9sKTsKCiAgc3RyaW5nIHB1YmxpYyBuYW1lOwoKICBzdHJpbmcgcHVibGljIHN5bWJvbDsKCiAgLyoqCiAgICogQ29uc3RydWN0IHRoZSB0b2tlbi4KICAgKgogICAqIFRoaXMgdG9rZW4gbXVzdCBiZSBjcmVhdGVkIHRocm91Z2ggYSB0ZWFtIG11bHRpc2lnIHdhbGxldCwgc28gdGhhdCBpdCBpcyBvd25lZCBieSB0aGF0IHdhbGxldC4KICAgKgogICAqIEBwYXJhbSBfbmFtZSBUb2tlbiBuYW1lCiAgICogQHBhcmFtIF9zeW1ib2wgVG9rZW4gc3ltYm9sIC0gdHlwaWNhbGx5IGl0J3MgYWxsIGNhcHMKICAgKiBAcGFyYW0gX2luaXRpYWxTdXBwbHkgSG93IG1hbnkgdG9rZW5zIHdlIHN0YXJ0IHdpdGgKICAgKiBAcGFyYW0gX2RlY2ltYWxzIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcwogICAqIEBwYXJhbSBfbWludGFibGUgQXJlIG5ldyB0b2tlbnMgY3JlYXRlZCBvdmVyIHRoZSBjcm93ZHNhbGUgb3IgZG8gd2UgZGlzdHJpYnV0ZSBvbmx5IHRoZSBpbml0aWFsIHN1cHBseT8gTm90ZSB0aGF0IHdoZW4gdGhlIHRva2VuIGJlY29tZXMgdHJhbnNmZXJhYmxlIHRoZSBtaW50aW5nIGFsd2F5cyBlbmRzLgogICAqLwogIGZ1bmN0aW9uIENyb3dkc2FsZVRva2VuKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2luaXRpYWxTdXBwbHksIHVpbnQ4IF9kZWNpbWFscywgYWRkcmVzcyBfbXVsdGlzaWcsIGJvb2wgX21pbnRhYmxlKQogICAgVXBncmFkZWFibGVUb2tlbihfbXVsdGlzaWcpIE1pbnRhYmxlVG9rZW4oX2luaXRpYWxTdXBwbHksIF9tdWx0aXNpZywgX21pbnRhYmxlKSB7CiAgICBuYW1lID0gX25hbWU7CiAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7CiAgfQoKICAvKioKICAgKiBXaGVuIHRva2VuIGlzIHJlbGVhc2VkIHRvIGJlIHRyYW5zZmVyYWJsZSwgcHJvaGliaXQgbmV3IHRva2VuIGNyZWF0aW9uLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VUb2tlblRyYW5zZmVyKCkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIHN1cGVyLnJlbGVhc2VUb2tlblRyYW5zZmVyKCk7CiAgfQoKICAvKioKICAgKiBBbGxvdyB1cGdyYWRlIGFnZW50IGZ1bmN0aW9uYWxpdHkgdG8ga2ljayBpbiBvbmx5IGlmIHRoZSBjcm93ZHNhbGUgd2FzIGEgc3VjY2Vzcy4KICAgKi8KICBmdW5jdGlvbiBjYW5VcGdyYWRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgcmV0dXJuIHJlbGVhc2VkICYmIHN1cGVyLmNhblVwZ3JhZGUoKTsKICB9CgogIC8qKgogICAqIE93bmVyIGNhbiB1cGRhdGUgdG9rZW4gaW5mb3JtYXRpb24gaGVyZQogICAqLwogIGZ1bmN0aW9uIHNldFRva2VuSW5mb3JtYXRpb24oc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCkgb25seU93bmVyIHsKICAgIG5hbWUgPSBfbmFtZTsKICAgIHN5bWJvbCA9IF9zeW1ib2w7CgogICAgVXBkYXRlZFRva2VuSW5mb3JtYXRpb24obmFtZSwgc3ltYm9sKTsKICB9Cgp9CgovLyBUaGlzIGNvbnRyYWN0IGhhcyB0aGUgc29sZSBvYmplY3RpdmUgb2YgcHJvdmlkaW5nIGEgc2FuZSBjb25jcmV0ZSBpbnN0YW5jZSBvZiB0aGUgQ3Jvd2RzYWxlIGNvbnRyYWN0Lgpjb250cmFjdCBDcm93ZHNhbGUgaXMgQ2FwcGVkQ3Jvd2RzYWxlIHsKICB1aW50IHByaXZhdGUgY29uc3RhbnQgbWluaW11bV9mdW5kaW5nID0gMCAqICgxMCAqKiAxOCk7IC8vIGluIHdlaQoKICB1aW50IHByaXZhdGUgY29uc3RhbnQgdG9rZW5faW5pdGlhbF9zdXBwbHkgPSAwOwogIHVpbnQ4IHByaXZhdGUgY29uc3RhbnQgdG9rZW5fZGVjaW1hbHMgPSAxNjsKICBib29sIHByaXZhdGUgY29uc3RhbnQgdG9rZW5fbWludGFibGUgPSB0cnVlOwogIHN0cmluZyBwcml2YXRlIGNvbnN0YW50IHRva2VuX25hbWUgPSAiUmliYml0cyI7CiAgc3RyaW5nIHByaXZhdGUgY29uc3RhbnQgdG9rZW5fc3ltYm9sID0gIlJOVCI7CgogIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBmdW5kaW5nQ2FwID0gdWludCgxMDAwMDAwMDAgKiAoMTAgKiogMTgpKSAvIDI3MDA7CgoKICB1aW50IHByaXZhdGUgY29uc3RhbnQgZGVjaW1hbFRva2Vuc1BlcldlaTJFdGggPSAyNTsKICB1aW50IHByaXZhdGUgY29uc3RhbnQgZGVjaW1hbFRva2Vuc1BlcldlaTIwRXRoID0gMjY7CiAgdWludCBwcml2YXRlIGNvbnN0YW50IGRlY2ltYWxUb2tlbnNQZXJXZWk1MEV0aCA9IDI3OwoKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBkaXNjb3VudGVkSW52ZXN0b3JzOwoKCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKGFkZHJlc3MgdGVhbV9tdWx0aXNpZywgdWludCBzdGFydCwgdWludCBlbmQpIEdlbmVyaWNDcm93ZHNhbGUodGVhbV9tdWx0aXNpZywgc3RhcnQsIGVuZCwgbWluaW11bV9mdW5kaW5nKSBwdWJsaWMgewogICAgLy8gVGVzdGluZyB2YWx1ZXMKICAgIHRva2VuID0gbmV3IENyb3dkc2FsZVRva2VuKHRva2VuX25hbWUsIHRva2VuX3N5bWJvbCwgdG9rZW5faW5pdGlhbF9zdXBwbHksIHRva2VuX2RlY2ltYWxzLCB0ZWFtX211bHRpc2lnLCB0b2tlbl9taW50YWJsZSk7CiAgICB0b2tlbi5zZXRNaW50QWdlbnQoYWRkcmVzcyh0aGlzKSwgdHJ1ZSk7CiAgICBzZXRGdW5kaW5nQ2FwKGZ1bmRpbmdDYXApOwogIH0KCiAgLy8gV2UgYXNzaWduIHRva2VucyB0aHJvdWdoIHRoZSBtaW50aW5nIG1lY2hhbmlzbS4KICBmdW5jdGlvbiBhc3NpZ25Ub2tlbnMoYWRkcmVzcyByZWNlaXZlciwgdWludCB0b2tlbkFtb3VudCkgaW50ZXJuYWwgewogICAgdG9rZW4ubWludChyZWNlaXZlciwgdG9rZW5BbW91bnQpOwogIH0KCiAgLy8gVGhlc2UgdHdvIHNldHRlcnMgYXJlIHByZXNlbnQgb25seSB0byBjb3JyZWN0IGJsb2NrIG51bWJlcnMgaWYgdGhleSBhcmUgb2ZmIGZyb20gdGhlaXIgdGFyZ2V0IGRhdGUgYnkgbW9yZSB0aGFuLCBzYXksIGEgZGF5CiAgZnVuY3Rpb24gc2V0U3RhcnRpbmdCbG9jayh1aW50IHN0YXJ0aW5nQmxvY2spIHB1YmxpYyBvbmx5T3duZXIgaW5TdGF0ZShTdGF0ZS5QcmVGdW5kaW5nKSB7CiAgICByZXF1aXJlKHN0YXJ0aW5nQmxvY2sgPiBibG9jay5udW1iZXIgJiYgc3RhcnRpbmdCbG9jayA8IGVuZHNBdCk7CiAgICBzdGFydHNBdCA9IHN0YXJ0aW5nQmxvY2s7CiAgfQoKICBmdW5jdGlvbiBzZXRFbmRpbmdCbG9jayh1aW50IGVuZGluZ0Jsb2NrKSBwdWJsaWMgb25seU93bmVyIG5vdEZpbmlzaGVkIHsKICAgIHJlcXVpcmUoZW5kaW5nQmxvY2sgPiBibG9jay5udW1iZXIgJiYgZW5kaW5nQmxvY2sgPiBzdGFydHNBdCk7CiAgICBlbmRzQXQgPSBlbmRpbmdCbG9jazsKICB9CgogIG1vZGlmaWVyIG5vdExlc3NUaGFuMkV0aCgpIHsKICAgIHJlcXVpcmUoaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXS5hZGQobXNnLnZhbHVlKSA+PSAyICogKDEwKioxOCkpOwogICAgXzsKICB9CgogIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgY29ycmVzcG9uZHMgdG8gZWFjaCBwcmljZSBwb2ludC4KICBmdW5jdGlvbiBjYWxjdWxhdGVQcmljZSh1aW50IHdlaUFtb3VudCwgYWRkcmVzcyBjdXN0b21lcikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgdWludCBpbnZlc3RlZEFtb3VudCA9IGludmVzdGVkQW1vdW50T2ZbY3VzdG9tZXJdLmFkZCh3ZWlBbW91bnQpOwogICAgdWludCBkZWNpbWFsVG9rZW5zUGVyV2VpOwogICAgaWYgKGludmVzdGVkQW1vdW50IDw9IDIwICogKDEwKioxOCkgJiYgIWRpc2NvdW50ZWRJbnZlc3RvcnNbY3VzdG9tZXJdKSB7CiAgICAgIGRlY2ltYWxUb2tlbnNQZXJXZWkgPSBkZWNpbWFsVG9rZW5zUGVyV2VpMkV0aDsKICAgIH0gZWxzZSBpZiAoaW52ZXN0ZWRBbW91bnQgPD0gNTAgKiAoMTAqKjE4KSkgewogICAgICBkZWNpbWFsVG9rZW5zUGVyV2VpID0gZGVjaW1hbFRva2Vuc1BlcldlaTIwRXRoOwogICAgfSBlbHNlIHsKICAgICAgZGVjaW1hbFRva2Vuc1BlcldlaSA9IGRlY2ltYWxUb2tlbnNQZXJXZWk1MEV0aDsKICAgIH0KICAgIHVpbnQgZGVjaW1hbFRva2VucyA9IHdlaUFtb3VudC5tdWwoZGVjaW1hbFRva2Vuc1BlcldlaSk7CiAgICByZXR1cm4gZGVjaW1hbFRva2VuczsKICB9CgogIC8vIFdlIHJlc3RyaWN0IGludmVzdG1lbnRzIHRvIHRob3NlIHdpdGggYSBtaW5pbXVtIG9mIDIgRVRICiAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHBheWFibGUgbm90TGVzc1RoYW4yRXRoIHsKICAgIHN1cGVyLmJ1eSgpOwogIH0KCiAgLy8gT3ZlcnJpZGUgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uIHRvIGFsbG93IHNpbXBsZSB0cmFuc2ZlcnMKICBmdW5jdGlvbigpIHBheWFibGUgewogICAgYnV5KCk7CiAgfQoKICAvLyBUaGUgb3duZXIgaXMgc3VwcG9zZWQgdG8gd2hpdGVsaXN0IGludmVzdG9ycyBmb3IgdGhlIGRpc2NvdW50ZWQgcHJpY2UgYXQgbG93ZXIgcHJpY2UgcG9pbnRzCiAgZnVuY3Rpb24gc2V0RGlzY291bnRlZEludmVzdG9yKGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0dXMpIHB1YmxpYyBvbmx5T3duZXIgbm90RmluaXNoZWQgc3RvcEluRW1lcmdlbmN5IHsKICAgIGRpc2NvdW50ZWRJbnZlc3RvcnNbYWRkcl0gPSBzdGF0dXM7CiAgfQoKICAvLyBXZSBzZXQgYW4gdXBwZXIgYm91bmQgZm9yIHRoZSBzb2xkIHRva2VucyBieSBsaW1pdGluZyBldGhlciByYWlzZWQKICBmdW5jdGlvbiB3ZWlBbGxvd2VkVG9SZWNlaXZlKHVpbnQgdGVudGF0aXZlQW1vdW50LCBhZGRyZXNzKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAvLyBUaGVuLCB3ZSBjaGVjayB0aGUgZnVuZGluZyBjYXAKICAgIGlmICh3ZWlGdW5kaW5nQ2FwID09IDApIHJldHVybiB0ZW50YXRpdmVBbW91bnQ7CiAgICB1aW50IHRvdGFsID0gdGVudGF0aXZlQW1vdW50LmFkZCh3ZWlSYWlzZWQpOwogICAgaWYgKHRvdGFsIDwgd2VpRnVuZGluZ0NhcCkgcmV0dXJuIHRlbnRhdGl2ZUFtb3VudDsKICAgIGVsc2UgcmV0dXJuIHdlaUZ1bmRpbmdDYXAuc3ViKHdlaVJhaXNlZCk7CiAgfQoKICBmdW5jdGlvbiBpc0Nyb3dkc2FsZUZ1bGwoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gd2VpRnVuZGluZ0NhcCA+IDAgJiYgd2VpUmFpc2VkID49IHdlaUZ1bmRpbmdDYXA7CiAgfQp9'.
	

]
