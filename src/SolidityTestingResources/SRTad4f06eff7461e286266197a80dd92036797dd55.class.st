Class {
	#name : #SRTad4f06eff7461e286266197a80dd92036797dd55,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad4f06eff7461e286266197a80dd92036797dd55 >> base64 [
	^ ''.
	

]
