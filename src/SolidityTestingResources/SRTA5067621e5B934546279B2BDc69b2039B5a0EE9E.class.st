Class {
	#name : #SRTA5067621e5B934546279B2BDc69b2039B5a0EE9E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA5067621e5B934546279B2BDc69b2039B5a0EE9E >> base64 [
	^ ''.
	

]
