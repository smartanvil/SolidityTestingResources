Class {
	#name : #SRTdbdb79ad0a2243c947cc413798e8b90caba0b9df,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdbdb79ad0a2243c947cc413798e8b90caba0b9df >> base64 [
	^ ''.
	

]
