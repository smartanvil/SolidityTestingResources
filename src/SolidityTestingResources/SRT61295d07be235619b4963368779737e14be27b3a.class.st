Class {
	#name : #SRT61295d07be235619b4963368779737e14be27b3a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61295d07be235619b4963368779737e14be27b3a >> base64 [
	^ ''.
	

]
