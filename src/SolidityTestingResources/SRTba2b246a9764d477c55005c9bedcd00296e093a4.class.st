Class {
	#name : #SRTba2b246a9764d477c55005c9bedcd00296e093a4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTba2b246a9764d477c55005c9bedcd00296e093a4 >> base64 [
	^ ''.
	

]
