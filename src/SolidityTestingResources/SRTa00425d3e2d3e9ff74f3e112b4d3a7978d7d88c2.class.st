Class {
	#name : #SRTa00425d3e2d3e9ff74f3e112b4d3a7978d7d88c2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa00425d3e2d3e9ff74f3e112b4d3a7978d7d88c2 >> base64 [
	^ ''.
	

]
