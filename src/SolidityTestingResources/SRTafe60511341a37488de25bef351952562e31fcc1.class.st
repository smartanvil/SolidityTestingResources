Class {
	#name : #SRTafe60511341a37488de25bef351952562e31fcc1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTafe60511341a37488de25bef351952562e31fcc1 >> base64 [
	^ ''.
	

]
