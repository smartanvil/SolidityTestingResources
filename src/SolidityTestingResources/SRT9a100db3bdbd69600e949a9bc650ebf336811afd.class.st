Class {
	#name : #SRT9a100db3bdbd69600e949a9bc650ebf336811afd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a100db3bdbd69600e949a9bc650ebf336811afd >> base64 [
	^ ''.
	

]
