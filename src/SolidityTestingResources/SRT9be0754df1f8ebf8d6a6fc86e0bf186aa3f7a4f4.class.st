Class {
	#name : #SRT9be0754df1f8ebf8d6a6fc86e0bf186aa3f7a4f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9be0754df1f8ebf8d6a6fc86e0bf186aa3f7a4f4 >> base64 [
	^ ''.
	

]
