Class {
	#name : #SRT43ee79e379e7b78d871100ed696e803e7893b644,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT43ee79e379e7b78d871100ed696e803e7893b644 >> base64 [
	^ ''.
	

]
