Class {
	#name : #SRTb705ac4a38d3e6bb427e1b652e0ab8db38c1afd1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb705ac4a38d3e6bb427e1b652e0ab8db38c1afd1 >> base64 [
	^ ''.
	

]
