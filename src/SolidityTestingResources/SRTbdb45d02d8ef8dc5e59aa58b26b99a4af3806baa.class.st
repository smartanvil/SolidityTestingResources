Class {
	#name : #SRTbdb45d02d8ef8dc5e59aa58b26b99a4af3806baa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbdb45d02d8ef8dc5e59aa58b26b99a4af3806baa >> base64 [
	^ ''.
	

]
