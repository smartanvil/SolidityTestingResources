Class {
	#name : #SRTe60bfffc17ec0a32c45b30d4ccf8b8ce742c3405,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe60bfffc17ec0a32c45b30d4ccf8b8ce742c3405 >> base64 [
	^ ''.
	

]
