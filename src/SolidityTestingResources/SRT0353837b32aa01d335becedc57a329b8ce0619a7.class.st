Class {
	#name : #SRT0353837b32aa01d335becedc57a329b8ce0619a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0353837b32aa01d335becedc57a329b8ce0619a7 >> base64 [
	^ ''.
	

]
