Class {
	#name : #SRT204c3e5296ab443707e5404a509aa5194e63b12a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT204c3e5296ab443707e5404a509aa5194e63b12a >> base64 [
	^ ''.
	

]
