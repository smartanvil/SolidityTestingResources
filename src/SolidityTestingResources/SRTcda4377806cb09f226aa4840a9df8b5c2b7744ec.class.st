Class {
	#name : #SRTcda4377806cb09f226aa4840a9df8b5c2b7744ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcda4377806cb09f226aa4840a9df8b5c2b7744ec >> base64 [
	^ ''.
	

]
