Class {
	#name : #SRTe29c5b523590165795bbd7d52369c2895b18841f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe29c5b523590165795bbd7d52369c2895b18841f >> base64 [
	^ ''.
	

]
