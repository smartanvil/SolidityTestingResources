Class {
	#name : #SRT171d750d42d661b62c277a6b486adb82348c3eca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT171d750d42d661b62c277a6b486adb82348c3eca >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIHJlcXVpcmUoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJlcXVpcmUoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICByZXF1aXJlKGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CgogICAgLyoqCiAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgICBmdW5jdGlvbiBzYWZlVHJhbnNmZXIoRVJDMjBCYXNpYyB0b2tlbiwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlVHJhbnNmZXJGcm9tKEVSQzIwIHRva2VuLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgICAgICBhc3NlcnQodG9rZW4udHJhbnNmZXJGcm9tKGZyb20sIHRvLCB2YWx1ZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgICAgICBhc3NlcnQodG9rZW4uYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkpOwogICAgfQp9CgovKioKICogQHRpdGxlIFRva2VuVGltZWxvY2sKICogQGRldiBUb2tlblRpbWVsb2NrIGlzIGEgdG9rZW4gaG9sZGVyIGNvbnRyYWN0IHRoYXQgd2lsbCBhbGxvdyBhCiAqIGJlbmVmaWNpYXJ5IHRvIGV4dHJhY3QgdGhlIHRva2VucyBhZnRlciBhIGdpdmVuIHJlbGVhc2UgdGltZQogKi8KY29udHJhY3QgVG9rZW5UaW1lbG9jayB7CiAgICB1c2luZyBTYWZlRVJDMjAgZm9yIEVSQzIwQmFzaWM7CgogICAgLy8gRVJDMjAgYmFzaWMgdG9rZW4gY29udHJhY3QgYmVpbmcgaGVsZAogICAgRVJDMjBCYXNpYyBwdWJsaWMgdG9rZW47CgogICAgLy8gYmVuZWZpY2lhcnkgb2YgdG9rZW5zIGFmdGVyIHRoZXkgYXJlIHJlbGVhc2VkCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgICAvLyB0aW1lc3RhbXAgd2hlbiB0b2tlbiByZWxlYXNlIGlzIGVuYWJsZWQKICAgIHVpbnQ2NCBwdWJsaWMgcmVsZWFzZVRpbWU7CgogICAgZnVuY3Rpb24gVG9rZW5UaW1lbG9jayhFUkMyMEJhc2ljIF90b2tlbiwgYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQ2NCBfcmVsZWFzZVRpbWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfcmVsZWFzZVRpbWUgPiB1aW50NjQoYmxvY2sudGltZXN0YW1wKSk7CiAgICAgICAgdG9rZW4gPSBfdG9rZW47CiAgICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CiAgICAgICAgcmVsZWFzZVRpbWUgPSBfcmVsZWFzZVRpbWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAbm90aWNlIFRyYW5zZmVycyB0b2tlbnMgaGVsZCBieSB0aW1lbG9jayB0byBiZW5lZmljaWFyeS4KICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZSgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSh1aW50NjQoYmxvY2sudGltZXN0YW1wKSA+PSByZWxlYXNlVGltZSk7CgogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CgogICAgICAgIHRva2VuLnNhZmVUcmFuc2ZlcihiZW5lZmljaWFyeSwgYW1vdW50KTsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAgICoKICAgICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvKioKICAgICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICAgKi8KICAgIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICAgICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICAgICAgfQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgQnVybmFibGUgVG9rZW4KICogQGRldiBUb2tlbiB0aGF0IGNhbiBiZSBpcnJldmVyc2libHkgYnVybmVkIChkZXN0cm95ZWQpLgogKi8KY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgYnVybmVkLgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIG5vIG5lZWQgdG8gcmVxdWlyZSB2YWx1ZSA8PSB0b3RhbFN1cHBseSwgc2luY2UgdGhhdCB3b3VsZCBpbXBseSB0aGUKICAgICAgICAvLyBzZW5kZXIncyBiYWxhbmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWxTdXBwbHksIHdoaWNoICpzaG91bGQqIGJlIGFuIGFzc2VydGlvbiBmYWlsdXJlCgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tidXJuZXJdID0gYmFsYW5jZXNbYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQp9Cgpjb250cmFjdCBFY29tVG9rZW4gaXMgQnVybmFibGVUb2tlbiwgT3duZWQgewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIk9tbml0dWRlIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkVDT00iOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgLy8vIE1heGltdW0gdG9rZW5zIHRvIGJlIGFsbG9jYXRlZCAoMTAwIG1pbGxpb24pCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBIQVJEX0NBUCA9IDEwMDAwMDAwMCAqIDEwKip1aW50MjU2KGRlY2ltYWxzKTsKCiAgICAvLy8gTWF4aW11bSB0b2tlbnMgdG8gYmUgYWxsb2NhdGVkIG9uIHRoZSBzYWxlICg1NSBtaWxsaW9uKQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9LRU5TX1NBTEVfSEFSRF9DQVAgPSA1NTAwMDAwMCAqIDEwKip1aW50MjU2KGRlY2ltYWxzKTsKCiAgICAvLy8gVGhlIG93bmVyIG9mIHRoaXMgYWRkcmVzcyB3aWxsCiAgICBhZGRyZXNzIHB1YmxpYyBvbW5pVGVhbUFkZHJlc3M7CgogICAgLy8vIFRoZSBvd25lciBvZiB0aGlzIGFkZHJlc3Mgd2lsbAogICAgYWRkcmVzcyBwdWJsaWMgZm91bmRhdGlvbkFkZHJlc3M7CgogICAgLy8vIGNvbnRyYWN0IHRvIGJlIGNhbGxlZCB0byByZWxlYXNlIHRoZSBPbW5pIHRlYW0gdG9rZW5zIGZvciBZZWFyIDEKICAgIGFkZHJlc3MgcHVibGljIHllYXIxTG9ja0FkZHJlc3M7CgogICAgLy8vIGNvbnRyYWN0IHRvIGJlIGNhbGxlZCB0byByZWxlYXNlIHRoZSBPbW5pIHRlYW0gdG9rZW5zIGZvciBZZWFyIDIKICAgIGFkZHJlc3MgcHVibGljIHllYXIyTG9ja0FkZHJlc3M7CgogICAgLy8vIGNvbnRyYWN0IHRvIGJlIGNhbGxlZCB0byByZWxlYXNlIHRoZSBPbW5pIHRlYW0gdG9rZW5zIGZvciBZZWFyIDMKICAgIGFkZHJlc3MgcHVibGljIHllYXIzTG9ja0FkZHJlc3M7CgogICAgLy8vIGNvbnRyYWN0IHRvIGJlIGNhbGxlZCB0byByZWxlYXNlIHRoZSBPbW5pIHRlYW0gdG9rZW5zIGZvciBZZWFyIDQKICAgIGFkZHJlc3MgcHVibGljIHllYXI0TG9ja0FkZHJlc3M7CgogICAgLy8vIGNvbnRyYWN0IHRvIGJlIGNhbGxlZCB0byByZWxlYXNlIHRoZSBPbW5pIHRlYW0gdG9rZW5zIGZvciBZZWFyIDUKICAgIGFkZHJlc3MgcHVibGljIHllYXI1TG9ja0FkZHJlc3M7CgogICAgLy8vIFllYXIgMSBsb2NrIGRhdGUgKDAxLjAxLjIwMTkpCiAgICB1aW50NjQgcHJpdmF0ZSBjb25zdGFudCBkYXRlMDFKYW4yMDE5ID0gMTU0NjMwMDgwMDsKCiAgICAvLy8gWWVhciAyIGxvY2sgZGF0ZSAoMDEuMDEuMjAyMCkKICAgIHVpbnQ2NCBwcml2YXRlIGNvbnN0YW50IGRhdGUwMUphbjIwMjAgPSAxNTc3ODM2ODAwOwoKICAgIC8vLyBZZWFyIDMgbG9jayBkYXRlICgwMS4wMS4yMDIxKQogICAgdWludDY0IHByaXZhdGUgY29uc3RhbnQgZGF0ZTAxSmFuMjAyMSA9IDE2MDk0NTkyMDA7CgogICAgLy8vIFllYXIgNCBsb2NrIGRhdGUgKDAxLjAxLjIwMjIpCiAgICB1aW50NjQgcHJpdmF0ZSBjb25zdGFudCBkYXRlMDFKYW4yMDIyID0gMTY0MDk5NTIwMDsKCiAgICAvLy8gWWVhciA1IGxvY2sgZGF0ZSAoMDEuMDEuMjAyMykKICAgIHVpbnQ2NCBwcml2YXRlIGNvbnN0YW50IGRhdGUwMUphbjIwMjMgPSAxNjcyNTMxMjAwOwoKICAgIC8vLyBubyB0b2tlbnMgY2FuIGJlIGV2ZXIgaXNzdWVkIHdoZW4gdGhpcyBpcyBzZXQgdG8gInRydWUiCiAgICBib29sIHB1YmxpYyB0b2tlblNhbGVDbG9zZWQgPSBmYWxzZTsKCiAgICAvLy8gT25seSBhbGxvd2VkIHRvIGV4ZWN1dGUgd2hpbGUgdG9rZW5zIGNhbiBiZSBzb2xkCiAgICBtb2RpZmllciBpblByb2dyZXNzIHsKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5IDwgVE9LRU5TX1NBTEVfSEFSRF9DQVAgJiYgIXRva2VuU2FsZUNsb3NlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gT25seSBhbGxvd2VkIHRvIGV4ZWN1dGUgd2hpbGUgdGhlIHNhbGUgaXMgbm90IHlldCBjbG9zZWQKICAgIG1vZGlmaWVyIGJlZm9yZUVuZCB7CiAgICAgICAgcmVxdWlyZSghdG9rZW5TYWxlQ2xvc2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIEVjb21Ub2tlbihhZGRyZXNzIF9vbW5pVGVhbUFkZHJlc3MsIGFkZHJlc3MgX2ZvdW5kYXRpb25BZGRyZXNzKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX29tbmlUZWFtQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9mb3VuZGF0aW9uQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgb21uaVRlYW1BZGRyZXNzID0gX29tbmlUZWFtQWRkcmVzczsKICAgICAgICBmb3VuZGF0aW9uQWRkcmVzcyA9IF9mb3VuZGF0aW9uQWRkcmVzczsKICAgICAgICB0b3RhbFN1cHBseSA9IFRPS0VOU19TQUxFX0hBUkRfQ0FQOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IFRPS0VOU19TQUxFX0hBUkRfQ0FQOwogICAgfQoKICAgIC8vLyBAZGV2IENsb3NlIHRoZSBzYWxlOyBpc3N1ZSBmb3VuZGF0aW9uIGFuZCB0ZWFtIHRva2VucwogICAgZnVuY3Rpb24gY2xvc2UoKSBwdWJsaWMgb25seU93bmVyIGJlZm9yZUVuZCB7CiAgICAgICAgLy8vIGJ1cm4gZXZlcnl0aGluZyB1bnNvbGQKICAgICAgICB1aW50MjU2IHNhbGVUb2tlbnNUb0J1cm4gPSBiYWxhbmNlc1tvd25lcl07CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gMDsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihzYWxlVG9rZW5zVG9CdXJuKTsKICAgICAgICBCdXJuKG93bmVyLCBzYWxlVG9rZW5zVG9CdXJuKTsKCiAgICAgICAgLy8vIEZvdW5kYXRpb24gdG9rZW5zIC0gMzNNCiAgICAgICAgdWludDI1NiBmb3VuZGF0aW9uVG9rZW5zID0gMzMwMDAwMDAgKiAxMCoqdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoZm91bmRhdGlvblRva2Vucyk7CiAgICAgICAgYmFsYW5jZXNbZm91bmRhdGlvbkFkZHJlc3NdID0gZm91bmRhdGlvblRva2VuczsKCiAgICAgICAgLy8vIExvY2sgdGVhbSB0b2tlbnMgLSAxMk0KICAgICAgICB1aW50MjU2IHRlYW1Ub2tlbnMgPSAxMjAwMDAwMCAqIDEwKip1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZCh0ZWFtVG9rZW5zKTsKCiAgICAgICAgLy8vIFlFQVIgMSAtIDIuNE0KICAgICAgICB1aW50MjU2IHRlYW1Ub2tlbnNZMSA9IDI0MDAwMDAgKiAxMCoqdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgLy8vIHRlYW0gdG9rZW5zIGFyZSBsb2NrZWQgdW50aWwgdGhpcyBkYXRlICgwMS4wMS4yMDE5KQogICAgICAgIFRva2VuVGltZWxvY2sgeWVhcjFMb2NrID0gbmV3IFRva2VuVGltZWxvY2sodGhpcywgb21uaVRlYW1BZGRyZXNzLCBkYXRlMDFKYW4yMDE5KTsKICAgICAgICB5ZWFyMUxvY2tBZGRyZXNzID0gYWRkcmVzcyh5ZWFyMUxvY2spOwogICAgICAgIGJhbGFuY2VzW3llYXIxTG9ja0FkZHJlc3NdID0gdGVhbVRva2Vuc1kxOwoKICAgICAgICAvLy8gWUVBUiAyIC0gMi40TQogICAgICAgIHVpbnQyNTYgdGVhbVRva2Vuc1kyID0gMjQwMDAwMCAqIDEwKip1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICAvLy8gdGVhbSB0b2tlbnMgYXJlIGxvY2tlZCB1bnRpbCB0aGlzIGRhdGUgKDAxLjAxLjIwMjApCiAgICAgICAgVG9rZW5UaW1lbG9jayB5ZWFyMkxvY2sgPSBuZXcgVG9rZW5UaW1lbG9jayh0aGlzLCBvbW5pVGVhbUFkZHJlc3MsIGRhdGUwMUphbjIwMjApOwogICAgICAgIHllYXIyTG9ja0FkZHJlc3MgPSBhZGRyZXNzKHllYXIyTG9jayk7CiAgICAgICAgYmFsYW5jZXNbeWVhcjJMb2NrQWRkcmVzc10gPSB0ZWFtVG9rZW5zWTI7CgogICAgICAgIC8vLyBZRUFSIDMgLSAyLjRNCiAgICAgICAgdWludDI1NiB0ZWFtVG9rZW5zWTMgPSAyNDAwMDAwICogMTAqKnVpbnQyNTYoZGVjaW1hbHMpOwogICAgICAgIC8vLyB0ZWFtIHRva2VucyBhcmUgbG9ja2VkIHVudGlsIHRoaXMgZGF0ZSAoMDEuMDEuMjAyMSkKICAgICAgICBUb2tlblRpbWVsb2NrIHllYXIzTG9jayA9IG5ldyBUb2tlblRpbWVsb2NrKHRoaXMsIG9tbmlUZWFtQWRkcmVzcywgZGF0ZTAxSmFuMjAyMSk7CiAgICAgICAgeWVhcjNMb2NrQWRkcmVzcyA9IGFkZHJlc3MoeWVhcjNMb2NrKTsKICAgICAgICBiYWxhbmNlc1t5ZWFyM0xvY2tBZGRyZXNzXSA9IHRlYW1Ub2tlbnNZMzsKCiAgICAgICAgLy8vIFlFQVIgNCAtIDIuNE0KICAgICAgICB1aW50MjU2IHRlYW1Ub2tlbnNZNCA9IDI0MDAwMDAgKiAxMCoqdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgLy8vIHRlYW0gdG9rZW5zIGFyZSBsb2NrZWQgdW50aWwgdGhpcyBkYXRlICgwMS4wMS4yMDIyKQogICAgICAgIFRva2VuVGltZWxvY2sgeWVhcjRMb2NrID0gbmV3IFRva2VuVGltZWxvY2sodGhpcywgb21uaVRlYW1BZGRyZXNzLCBkYXRlMDFKYW4yMDIyKTsKICAgICAgICB5ZWFyNExvY2tBZGRyZXNzID0gYWRkcmVzcyh5ZWFyNExvY2spOwogICAgICAgIGJhbGFuY2VzW3llYXI0TG9ja0FkZHJlc3NdID0gdGVhbVRva2Vuc1k0OwoKICAgICAgICAvLy8gWUVBUiA1IC0gMi40TQogICAgICAgIHVpbnQyNTYgdGVhbVRva2Vuc1k1ID0gMjQwMDAwMCAqIDEwKip1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICAvLy8gdGVhbSB0b2tlbnMgYXJlIGxvY2tlZCB1bnRpbCB0aGlzIGRhdGUgKDAxLjAxLjIwMjMpCiAgICAgICAgVG9rZW5UaW1lbG9jayB5ZWFyNUxvY2sgPSBuZXcgVG9rZW5UaW1lbG9jayh0aGlzLCBvbW5pVGVhbUFkZHJlc3MsIGRhdGUwMUphbjIwMjMpOwogICAgICAgIHllYXI1TG9ja0FkZHJlc3MgPSBhZGRyZXNzKHllYXI1TG9jayk7CiAgICAgICAgYmFsYW5jZXNbeWVhcjVMb2NrQWRkcmVzc10gPSB0ZWFtVG9rZW5zWTU7CgogICAgICAgIHRva2VuU2FsZUNsb3NlZCA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhZGluZyBsaW1pdGVkIC0gcmVxdWlyZXMgdGhlIHNhbGUgdG8gaGF2ZSBjbG9zZWQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYobXNnLnNlbmRlciAhPSBvd25lciAmJiAhdG9rZW5TYWxlQ2xvc2VkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8vLyBAZGV2IFRyYWRpbmcgbGltaXRlZCAtIHJlcXVpcmVzIHRoZSBzYWxlIHRvIGhhdmUgY2xvc2VkCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYobXNnLnNlbmRlciAhPSBvd25lciAmJiAhdG9rZW5TYWxlQ2xvc2VkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KfQ=='.
	

]
