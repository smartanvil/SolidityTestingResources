Class {
	#name : #SRT9473bc8bb575ffc15cb2179cd9398bdf5730bf55,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9473bc8bb575ffc15cb2179cd9398bdf5730bf55 >> base64 [
	^ ''.
	

]
