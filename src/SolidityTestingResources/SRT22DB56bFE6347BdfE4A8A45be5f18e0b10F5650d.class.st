Class {
	#name : #SRT22DB56bFE6347BdfE4A8A45be5f18e0b10F5650d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22DB56bFE6347BdfE4A8A45be5f18e0b10F5650d >> base64 [
	^ ''.
	

]
