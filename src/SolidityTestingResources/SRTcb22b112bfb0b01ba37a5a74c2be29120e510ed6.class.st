Class {
	#name : #SRTcb22b112bfb0b01ba37a5a74c2be29120e510ed6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb22b112bfb0b01ba37a5a74c2be29120e510ed6 >> base64 [
	^ ''.
	

]
