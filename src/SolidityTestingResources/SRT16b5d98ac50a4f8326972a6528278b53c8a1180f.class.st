Class {
	#name : #SRT16b5d98ac50a4f8326972a6528278b53c8a1180f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT16b5d98ac50a4f8326972a6528278b53c8a1180f >> base64 [
	^ ''.
	

]
