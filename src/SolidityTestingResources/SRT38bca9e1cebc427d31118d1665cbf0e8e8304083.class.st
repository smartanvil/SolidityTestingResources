Class {
	#name : #SRT38bca9e1cebc427d31118d1665cbf0e8e8304083,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38bca9e1cebc427d31118d1665cbf0e8e8304083 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiApIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgKSB7CiAgICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2ICkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2ICkgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgRVJDMjAgewoKICAgIC8qIFRoaXMgaXMgYSBzbGlnaHQgY2hhbmdlIHRvIHRoZSBFUkMyMCBiYXNlIHN0YW5kYXJkLgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBpcyByZXBsYWNlZCB3aXRoOgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgVGhpcyBpcyBtb3ZlZCB0byB0aGUgYmFzZSBjb250cmFjdCBzaW5jZSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9ucyBhcmUgbm90CiAgICBjdXJyZW50bHkgcmVjb2duaXNlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWF0Y2hpbmcgYWJzdHJhY3QKICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAgICovCiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBTYWZlTWF0aCB7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8vLyBAZGV2IFRyYW5zZmVycyBzZW5kZXIncyB0b2tlbnMgdG8gYSBnaXZlbiBhZGRyZXNzLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIHRva2VuIHJlY2VpdmVyLgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYWxsb3dlZCB0aGlyZCBwYXJ0eSB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAvLy8gQHBhcmFtIF9mcm9tIEFkZHJlc3MgZnJvbSB3aGVyZSB0b2tlbnMgYXJlIHdpdGhkcmF3bi4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gd2hlcmUgdG9rZW5zIGFyZSBzZW50LgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vLyBAZGV2IFNldHMgYXBwcm92ZWQgYW1vdW50IG9mIHRva2VucyBmb3Igc3BlbmRlci4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIGFsbG93ZWQgYWNjb3VudC4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiBhcHByb3ZlZCB0b2tlbnMuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgYWxsb3dlZCB0b2tlbnMgZm9yIGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIHNwZW5kZXIuCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0KCmNvbnRyYWN0IE11bHRpT3duYWJsZSB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBvd25lck1hcDsKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJzOwoKICAgIGV2ZW50IE93bmVyQWRkZWQoYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZlZChhZGRyZXNzIGluZGV4ZWQgb2xkT3duZXIpOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZiAoIWlzT3duZXIobXNnLnNlbmRlcikpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gTXVsdGlPd25hYmxlKCkgewogICAgICAgIC8vIEFkZCBkZWZhdWx0IG93bmVyCiAgICAgICAgYWRkcmVzcyBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgb3duZXJNYXBbb3duZXJdID0gdHJ1ZTsKICAgICAgICBvd25lcnMucHVzaChvd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPd25lcihhZGRyZXNzIG93bmVyKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG93bmVyTWFwW293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRPd25lcihhZGRyZXNzIG93bmVyKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmICghaXNPd25lcihvd25lcikgJiYgb3duZXIgIT0gMCkgewogICAgICAgICAgICBvd25lck1hcFtvd25lcl0gPSB0cnVlOwogICAgICAgICAgICBvd25lcnMucHVzaChvd25lcik7CgogICAgICAgICAgICBPd25lckFkZGVkKG93bmVyKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVPd25lcihhZGRyZXNzIG93bmVyKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChpc093bmVyKG93bmVyKSkgewogICAgICAgICAgICBvd25lck1hcFtvd25lcl0gPSBmYWxzZTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb3duZXJzLmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKG93bmVyc1tpXSA9PSBvd25lcikgewogICAgICAgICAgICAgICAgICAgIG93bmVyc1tpXSA9IG93bmVyc1tvd25lcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3duZXJzLmxlbmd0aCAtPSAxOwoKICAgICAgICAgICAgT3duZXJSZW1vdmVkKG93bmVyKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KfQoKY29udHJhY3QgVG9rZW5TcGVuZGVyIHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IEJzVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgTXVsdGlPd25hYmxlIHsKCiAgICBib29sIHB1YmxpYyBsb2NrZWQ7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ3YwLjEnOwoKICAgIGFkZHJlc3MgcHVibGljIGNyZWF0b3I7CiAgICBhZGRyZXNzIHB1YmxpYyBzZWxsZXI7CiAgICB1aW50MjU2IHB1YmxpYyB0b2tlbnNTb2xkOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTYWxlczsKCiAgICBldmVudCBTZWxsKGFkZHJlc3MgaW5kZXhlZCBzZWxsZXIsIGFkZHJlc3MgaW5kZXhlZCBidXllciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBTZWxsZXJDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBvbGRTZWxsZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdTZWxsZXIpOwoKICAgIG1vZGlmaWVyIG9ubHlVbmxvY2tlZCgpIHsKICAgICAgICBpZiAoIWlzT3duZXIobXNnLnNlbmRlcikgJiYgbG9ja2VkKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIEJzVG9rZW4oc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDI1NiBfdG90YWxTdXBwbHksIGFkZHJlc3MgX3NlbGxlcikgTXVsdGlPd25hYmxlKCkgewogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIHNlbGxlciA9IF9zZWxsZXI7CgogICAgICAgIG5hbWUgPSBfbmFtZTsKICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5OwoKICAgICAgICBiYWxhbmNlc1tzZWxsZXJdID0gdG90YWxTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlU2VsbGVyKGFkZHJlc3MgbmV3U2VsbGVyKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChuZXdTZWxsZXIgPT0gMHgwIHx8IHNlbGxlciA9PSBuZXdTZWxsZXIpIHRocm93OwoKICAgICAgICBhZGRyZXNzIG9sZFNlbGxlciA9IHNlbGxlcjsKCiAgICAgICAgdWludDI1NiB1bnNvbGRUb2tlbnMgPSBiYWxhbmNlc1tvbGRTZWxsZXJdOwogICAgICAgIGJhbGFuY2VzW29sZFNlbGxlcl0gPSAwOwogICAgICAgIGJhbGFuY2VzW25ld1NlbGxlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW25ld1NlbGxlcl0sIHVuc29sZFRva2Vucyk7CgogICAgICAgIHNlbGxlciA9IG5ld1NlbGxlcjsKICAgICAgICBTZWxsZXJDaGFuZ2VkKG9sZFNlbGxlciwgbmV3U2VsbGVyKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxsKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbc2VsbGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tzZWxsZXJdID0gc2FmZVN1YihiYWxhbmNlc1tzZWxsZXJdLCBfdmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgICAgICB0b2tlbnNTb2xkID0gc2FmZUFkZCh0b2tlbnNTb2xkLCBfdmFsdWUpOwogICAgICAgICAgICB0b3RhbFNhbGVzID0gc2FmZUFkZCh0b3RhbFNhbGVzLCAxKTsKICAgICAgICAgICAgU2VsbChzZWxsZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlVbmxvY2tlZCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5VW5sb2NrZWQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2NrKCkgb25seU93bmVyIHsKICAgICAgICBsb2NrZWQgPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciB7CiAgICAgICAgbG9ja2VkID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSkgOwogICAgICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIF92YWx1ZSk7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBUb2tlblNwZW5kZXIgc3BlbmRlciA9IFRva2VuU3BlbmRlcihfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICB9CiAgICB9Cn0KCmNvbnRyYWN0IEJzVG9rZW5fU05PViBpcyBCc1Rva2VuIHsKCiAgICBmdW5jdGlvbiBCc1Rva2VuX1NOT1YoKQogICAgICAgIEJzVG9rZW4oCiAgICAgICAgICAgICdTbm92aW8nLAogICAgICAgICAgICAnU05PVicsCiAgICAgICAgICAgIDI1MDAwMDAwMDAgKiAxZTE4LAogICAgICAgICAgICAweDA2OTdlYzBlNEY5MEU3RDdjOTJFN2VERDFjMDM5ZjQ0MmQ3RjFkMUQKICAgICAgICApIHsgfQp9'.
	

]
