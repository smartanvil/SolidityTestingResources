Class {
	#name : #SRTf4c3a48f27666ef8bedab8d73c0117e1aeaf1ba0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4c3a48f27666ef8bedab8d73c0117e1aeaf1ba0 >> base64 [
	^ ''.
	

]
