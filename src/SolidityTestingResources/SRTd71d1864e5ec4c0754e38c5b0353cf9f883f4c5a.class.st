Class {
	#name : #SRTd71d1864e5ec4c0754e38c5b0353cf9f883f4c5a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd71d1864e5ec4c0754e38c5b0353cf9f883f4c5a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovLyBub3RlOiBicmVha3MgaWYgbWVtYmVycy5sZW5ndGggZXhjZWVkcyAyXjI1Ni0xIChzbywgbm90IHJlYWxseSBhIHByb2JsZW0pCmxpYnJhcnkgU2V0cyB7CiAgICAvLyBhZGRyZXNzIHNldAogICAgc3RydWN0IGFkZHJlc3NTZXQgewogICAgICAgIGFkZHJlc3NbXSBtZW1iZXJzOwogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgbWVtYmVyRXhpc3RzOwogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgbWVtYmVySW5kZXg7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0KGFkZHJlc3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIG90aGVyKSB7CiAgICAgICAgaWYgKCFzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdID0gdHJ1ZTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRleFtvdGhlcl0gPSBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZShhZGRyZXNzU2V0IHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBvdGhlcikgewogICAgICAgIGlmIChzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pICB7CiAgICAgICAgICAgIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSA9IGZhbHNlOwogICAgICAgICAgICB1aW50IGluZGV4ID0gc2VsZi5tZW1iZXJJbmRleFtvdGhlcl07CiAgICAgICAgICAgIC8vIGNoYW5nZSBpbmRleCBvZiBsYXN0IHZhbHVlIHRvIGluZGV4IG9mIG90aGVyIAogICAgICAgICAgICBzZWxmLm1lbWJlckluZGV4W3NlbGYubWVtYmVyc1tzZWxmLm1lbWJlcnMubGVuZ3RoIC0gMV1dID0gaW5kZXg7CiAgICAgICAgICAgIC8vIGNvcHkgbGFzdCB2YWx1ZSBvdmVyIG90aGVyIGFuZCBkZWNyZW1lbnQgbGVuZ3RoCiAgICAgICAgICAgIHNlbGYubWVtYmVyc1tpbmRleF0gPSBzZWxmLm1lbWJlcnNbc2VsZi5tZW1iZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMubGVuZ3RoLS07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGFkZHJlc3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIG90aGVyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBsZW5ndGgoYWRkcmVzc1NldCBzdG9yYWdlIHNlbGYpIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgIH0KCgogICAgLy8gdWludCBzZXQKICAgIHN0cnVjdCB1aW50U2V0IHsKICAgICAgICB1aW50W10gbWVtYmVyczsKICAgICAgICBtYXBwaW5nICh1aW50ID0+IGJvb2wpIG1lbWJlckV4aXN0czsKICAgICAgICBtYXBwaW5nICh1aW50ID0+IHVpbnQpIG1lbWJlckluZGV4OwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydCh1aW50U2V0IHN0b3JhZ2Ugc2VsZiwgdWludCBvdGhlcikgewogICAgICAgIGlmICghc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdKSB7CiAgICAgICAgICAgIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSA9IHRydWU7CiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kZXhbb3RoZXJdID0gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLnB1c2gob3RoZXIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmUodWludFNldCBzdG9yYWdlIHNlbGYsIHVpbnQgb3RoZXIpIHsKICAgICAgICBpZiAoc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdKSAgewogICAgICAgICAgICBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0gPSBmYWxzZTsKICAgICAgICAgICAgdWludCBpbmRleCA9IHNlbGYubWVtYmVySW5kZXhbb3RoZXJdOwogICAgICAgICAgICAvLyBjaGFuZ2UgaW5kZXggb2YgbGFzdCB2YWx1ZSB0byBpbmRleCBvZiBvdGhlciAKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRleFtzZWxmLm1lbWJlcnNbc2VsZi5tZW1iZXJzLmxlbmd0aCAtIDFdXSA9IGluZGV4OwogICAgICAgICAgICAvLyBjb3B5IGxhc3QgdmFsdWUgb3ZlciBvdGhlciBhbmQgZGVjcmVtZW50IGxlbmd0aAogICAgICAgICAgICBzZWxmLm1lbWJlcnNbaW5kZXhdID0gc2VsZi5tZW1iZXJzW3NlbGYubWVtYmVycy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmxlbmd0aC0tOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb250YWlucyh1aW50U2V0IHN0b3JhZ2Ugc2VsZiwgdWludCBvdGhlcikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl07CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKHVpbnRTZXQgc3RvcmFnZSBzZWxmKSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICB9CgoKICAgIC8vIHVpbnQ4IHNldAogICAgc3RydWN0IHVpbnQ4U2V0IHsKICAgICAgICB1aW50OFtdIG1lbWJlcnM7CiAgICAgICAgbWFwcGluZyAodWludDggPT4gYm9vbCkgbWVtYmVyRXhpc3RzOwogICAgICAgIG1hcHBpbmcgKHVpbnQ4ID0+IHVpbnQpIG1lbWJlckluZGV4OwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydCh1aW50OFNldCBzdG9yYWdlIHNlbGYsIHVpbnQ4IG90aGVyKSB7CiAgICAgICAgaWYgKCFzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdID0gdHJ1ZTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRleFtvdGhlcl0gPSBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZSh1aW50OFNldCBzdG9yYWdlIHNlbGYsIHVpbnQ4IG90aGVyKSB7CiAgICAgICAgaWYgKHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSkgIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdID0gZmFsc2U7CiAgICAgICAgICAgIHVpbnQgaW5kZXggPSBzZWxmLm1lbWJlckluZGV4W290aGVyXTsKICAgICAgICAgICAgLy8gY2hhbmdlIGluZGV4IG9mIGxhc3QgdmFsdWUgdG8gaW5kZXggb2Ygb3RoZXIgCiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kZXhbc2VsZi5tZW1iZXJzW3NlbGYubWVtYmVycy5sZW5ndGggLSAxXV0gPSBpbmRleDsKICAgICAgICAgICAgLy8gY29weSBsYXN0IHZhbHVlIG92ZXIgb3RoZXIgYW5kIGRlY3JlbWVudCBsZW5ndGgKICAgICAgICAgICAgc2VsZi5tZW1iZXJzW2luZGV4XSA9IHNlbGYubWVtYmVyc1tzZWxmLm1lbWJlcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5sZW5ndGgtLTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29udGFpbnModWludDhTZXQgc3RvcmFnZSBzZWxmLCB1aW50OCBvdGhlcikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl07CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKHVpbnQ4U2V0IHN0b3JhZ2Ugc2VsZikgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgfQoKCiAgICAvLyBpbnQgc2V0CiAgICBzdHJ1Y3QgaW50U2V0IHsKICAgICAgICBpbnRbXSBtZW1iZXJzOwogICAgICAgIG1hcHBpbmcgKGludCA9PiBib29sKSBtZW1iZXJFeGlzdHM7CiAgICAgICAgbWFwcGluZyAoaW50ID0+IHVpbnQpIG1lbWJlckluZGV4OwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydChpbnRTZXQgc3RvcmFnZSBzZWxmLCBpbnQgb3RoZXIpIHsKICAgICAgICBpZiAoIXNlbGYubWVtYmVyRXhpc3RzW290aGVyXSkgewogICAgICAgICAgICBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0gPSB0cnVlOwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGV4W290aGVyXSA9IHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5wdXNoKG90aGVyKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKGludFNldCBzdG9yYWdlIHNlbGYsIGludCBvdGhlcikgewogICAgICAgIGlmIChzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pICB7CiAgICAgICAgICAgIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSA9IGZhbHNlOwogICAgICAgICAgICB1aW50IGluZGV4ID0gc2VsZi5tZW1iZXJJbmRleFtvdGhlcl07CiAgICAgICAgICAgIC8vIGNoYW5nZSBpbmRleCBvZiBsYXN0IHZhbHVlIHRvIGluZGV4IG9mIG90aGVyIAogICAgICAgICAgICBzZWxmLm1lbWJlckluZGV4W3NlbGYubWVtYmVyc1tzZWxmLm1lbWJlcnMubGVuZ3RoIC0gMV1dID0gaW5kZXg7CiAgICAgICAgICAgIC8vIGNvcHkgbGFzdCB2YWx1ZSBvdmVyIG90aGVyIGFuZCBkZWNyZW1lbnQgbGVuZ3RoCiAgICAgICAgICAgIHNlbGYubWVtYmVyc1tpbmRleF0gPSBzZWxmLm1lbWJlcnNbc2VsZi5tZW1iZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMubGVuZ3RoLS07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGludFNldCBzdG9yYWdlIHNlbGYsIGludCBvdGhlcikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl07CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKGludFNldCBzdG9yYWdlIHNlbGYpIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgIH0KCgogICAgLy8gaW50OCBzZXQKICAgIHN0cnVjdCBpbnQ4U2V0IHsKICAgICAgICBpbnQ4W10gbWVtYmVyczsKICAgICAgICBtYXBwaW5nIChpbnQ4ID0+IGJvb2wpIG1lbWJlckV4aXN0czsKICAgICAgICBtYXBwaW5nIChpbnQ4ID0+IHVpbnQpIG1lbWJlckluZGV4OwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydChpbnQ4U2V0IHN0b3JhZ2Ugc2VsZiwgaW50OCBvdGhlcikgewogICAgICAgIGlmICghc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdKSB7CiAgICAgICAgICAgIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSA9IHRydWU7CiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kZXhbb3RoZXJdID0gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLnB1c2gob3RoZXIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmUoaW50OFNldCBzdG9yYWdlIHNlbGYsIGludDggb3RoZXIpIHsKICAgICAgICBpZiAoc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdKSAgewogICAgICAgICAgICBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0gPSBmYWxzZTsKICAgICAgICAgICAgdWludCBpbmRleCA9IHNlbGYubWVtYmVySW5kZXhbb3RoZXJdOwogICAgICAgICAgICAvLyBjaGFuZ2UgaW5kZXggb2YgbGFzdCB2YWx1ZSB0byBpbmRleCBvZiBvdGhlciAKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRleFtzZWxmLm1lbWJlcnNbc2VsZi5tZW1iZXJzLmxlbmd0aCAtIDFdXSA9IGluZGV4OwogICAgICAgICAgICAvLyBjb3B5IGxhc3QgdmFsdWUgb3ZlciBvdGhlciBhbmQgZGVjcmVtZW50IGxlbmd0aAogICAgICAgICAgICBzZWxmLm1lbWJlcnNbaW5kZXhdID0gc2VsZi5tZW1iZXJzW3NlbGYubWVtYmVycy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmxlbmd0aC0tOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb250YWlucyhpbnQ4U2V0IHN0b3JhZ2Ugc2VsZiwgaW50OCBvdGhlcikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl07CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKGludDhTZXQgc3RvcmFnZSBzZWxmKSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICB9CgoKICAgIC8vIGJ5dGUgc2V0CiAgICBzdHJ1Y3QgYnl0ZVNldCB7CiAgICAgICAgYnl0ZVtdIG1lbWJlcnM7CiAgICAgICAgbWFwcGluZyAoYnl0ZSA9PiBib29sKSBtZW1iZXJFeGlzdHM7CiAgICAgICAgbWFwcGluZyAoYnl0ZSA9PiB1aW50KSBtZW1iZXJJbmRleDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnQoYnl0ZVNldCBzdG9yYWdlIHNlbGYsIGJ5dGUgb3RoZXIpIHsKICAgICAgICBpZiAoIXNlbGYubWVtYmVyRXhpc3RzW290aGVyXSkgewogICAgICAgICAgICBzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0gPSB0cnVlOwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGV4W290aGVyXSA9IHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5wdXNoKG90aGVyKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKGJ5dGVTZXQgc3RvcmFnZSBzZWxmLCBieXRlIG90aGVyKSB7CiAgICAgICAgaWYgKHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSkgIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdID0gZmFsc2U7CiAgICAgICAgICAgIHVpbnQgaW5kZXggPSBzZWxmLm1lbWJlckluZGV4W290aGVyXTsKICAgICAgICAgICAgLy8gY2hhbmdlIGluZGV4IG9mIGxhc3QgdmFsdWUgdG8gaW5kZXggb2Ygb3RoZXIgCiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kZXhbc2VsZi5tZW1iZXJzW3NlbGYubWVtYmVycy5sZW5ndGggLSAxXV0gPSBpbmRleDsKICAgICAgICAgICAgLy8gY29weSBsYXN0IHZhbHVlIG92ZXIgb3RoZXIgYW5kIGRlY3JlbWVudCBsZW5ndGgKICAgICAgICAgICAgc2VsZi5tZW1iZXJzW2luZGV4XSA9IHNlbGYubWVtYmVyc1tzZWxmLm1lbWJlcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5sZW5ndGgtLTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29udGFpbnMoYnl0ZVNldCBzdG9yYWdlIHNlbGYsIGJ5dGUgb3RoZXIpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGxlbmd0aChieXRlU2V0IHN0b3JhZ2Ugc2VsZikgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgfQoKCiAgICAvLyBieXRlczMyIHNldAogICAgc3RydWN0IGJ5dGVzMzJTZXQgewogICAgICAgIGJ5dGVzMzJbXSBtZW1iZXJzOwogICAgICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gYm9vbCkgbWVtYmVyRXhpc3RzOwogICAgICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludCkgbWVtYmVySW5kZXg7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0KGJ5dGVzMzJTZXQgc3RvcmFnZSBzZWxmLCBieXRlczMyIG90aGVyKSB7CiAgICAgICAgaWYgKCFzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJFeGlzdHNbb3RoZXJdID0gdHJ1ZTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRleFtvdGhlcl0gPSBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZShieXRlczMyU2V0IHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiBvdGhlcikgewogICAgICAgIGlmIChzZWxmLm1lbWJlckV4aXN0c1tvdGhlcl0pICB7CiAgICAgICAgICAgIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXSA9IGZhbHNlOwogICAgICAgICAgICB1aW50IGluZGV4ID0gc2VsZi5tZW1iZXJJbmRleFtvdGhlcl07CiAgICAgICAgICAgIC8vIGNoYW5nZSBpbmRleCBvZiBsYXN0IHZhbHVlIHRvIGluZGV4IG9mIG90aGVyIAogICAgICAgICAgICBzZWxmLm1lbWJlckluZGV4W3NlbGYubWVtYmVyc1tzZWxmLm1lbWJlcnMubGVuZ3RoIC0gMV1dID0gaW5kZXg7CiAgICAgICAgICAgIC8vIGNvcHkgbGFzdCB2YWx1ZSBvdmVyIG90aGVyIGFuZCBkZWNyZW1lbnQgbGVuZ3RoCiAgICAgICAgICAgIHNlbGYubWVtYmVyc1tpbmRleF0gPSBzZWxmLm1lbWJlcnNbc2VsZi5tZW1iZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMubGVuZ3RoLS07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGJ5dGVzMzJTZXQgc3RvcmFnZSBzZWxmLCBieXRlczMyIG90aGVyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVyRXhpc3RzW290aGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBsZW5ndGgoYnl0ZXMzMlNldCBzdG9yYWdlIHNlbGYpIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgIH0KfQ=='.
	

]
