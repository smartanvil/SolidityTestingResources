Class {
	#name : #SRT734740c4fe8d8d5f05e16a7397f5f3ed81d44ba8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT734740c4fe8d8d5f05e16a7397f5f3ed81d44ba8 >> base64 [
	^ ''.
	

]
