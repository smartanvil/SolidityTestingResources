Class {
	#name : #SRT9486120332526054fb2ac591d54513ff72b618d4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9486120332526054fb2ac591d54513ff72b618d4 >> base64 [
	^ ''.
	

]
