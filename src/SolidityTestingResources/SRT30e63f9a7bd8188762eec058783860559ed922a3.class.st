Class {
	#name : #SRT30e63f9a7bd8188762eec058783860559ed922a3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT30e63f9a7bd8188762eec058783860559ed922a3 >> base64 [
	^ ''.
	

]
