Class {
	#name : #SRTcf70f36f8fd04713b33900bab530fd2f63ed9ae0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcf70f36f8fd04713b33900bab530fd2f63ed9ae0 >> base64 [
	^ ''.
	

]
