Class {
	#name : #SRT560da6e7f219e37a094342b3a56ea27bfa6798be,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT560da6e7f219e37a094342b3a56ea27bfa6798be >> base64 [
	^ ''.
	

]
