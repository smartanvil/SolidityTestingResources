Class {
	#name : #SRTef7c7254c290df3d167182356255cdfd8d3b400b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTef7c7254c290df3d167182356255cdfd8d3b400b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKgogXyAgICBfICAgICAgXyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gICAgICAgIAp8IHwgIHwgfCAgICB8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8ICAgICAgIAp8IHwgIHwgfCBfX198IHwgX19fIF9fXyAgXyBfXyBfX18gICBfX18gICAgfCB8XyBfX18gIAp8IHwvXHwgfC8gXyB8IHwvIF9fLyBfIFx8ICdfIGAgXyBcIC8gXyBcICAgfCBfXy8gXyBcIApcICAvXCAgfCAgX198IHwgKF98IChfKSB8IHwgfCB8IHwgfCAgX18vICAgfCB8fCAoXykgfAogXC8gIFwvIFxfX198X3xcX19fXF9fXy98X3wgfF98IHxffFxfX198ICAgIFxfX1xfX18vICAgICAgICAgICAgCgoKJCRcICAgICQkXCAkJFwgICAkJFwgICAgICAgICAgICAgICAkJFwgICAgICAgICAgICAgICAgICAgICAkJFwgICAgICAgCiQkIHwgICAkJCB8XF9ffCAgJCQgfCAgICAgICAgICAgICAgJCQgfCAgICAgICAgICAgICAgICAgICAgJCQgfCAgICAgIAokJCB8ICAgJCQgfCQkXCAkJCQkJCRcICAgICQkJCQkJFwgICQkIHwkJFwgICAkJFwgICQkJCQkJCRcICQkIHwgICQkXCAKXCQkXCAgJCQgIHwkJCB8XF8kJCAgX3wgICBcX19fXyQkXCAkJCB8JCQgfCAgJCQgfCQkICBfX19fX3wkJCB8ICQkICB8CiBcJCRcJCQgIC8gJCQgfCAgJCQgfCAgICAgJCQkJCQkJCB8JCQgfCQkIHwgICQkIHwkJCAvICAgICAgJCQkJCQkICAvIAogIFwkJCQgIC8gICQkIHwgICQkIHwkJFwgJCQgIF9fJCQgfCQkIHwkJCB8ICAkJCB8JCQgfCAgICAgICQkICBfJCQ8ICAKICAgXCQgIC8gICAkJCB8ICBcJCQkJCAgfFwkJCQkJCQkIHwkJCB8XCQkJCQkJCAgfFwkJCQkJCQkXCAkJCB8IFwkJFwgCiAgICBcXy8gICAgXF9ffCAgIFxfX19fLyAgXF9fX19fX198XF9ffCBcX19fX19fLyAgXF9fX19fX198XF9ffCAgXF9ffAoqLwoKY29udHJhY3QgVml0YWx1Y2sgewogICAgCiAgICAvLyBBZG1pbgogICAgYWRkcmVzcyBjZW9BZGRyZXNzID0gMHg0NmQ5MTEyNTMzZWY2NzcwNTljNDMwRTUxNTc3NWUzNTg4ODhlMzhiOwogICAgYWRkcmVzcyBjZm9BZGRyZXNzID0gMHgyM2E0OUE5OTMwZjViNTYyYzZCMTA5NkMzZTZiNUJFYzEzM0U4QjJFOwogICAgc3RyaW5nIE1hZ2ljS2V5OwogICAgdWludDI1NiBtaW5CZXRWYWx1ZSA9IDUwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludDI1NiBjdXJyZW50SmFja3BvdDsKICAgIAogICAgbW9kaWZpZXIgb25seUNlbygpIHsKICAgICAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8vCiAgICAvLyBFdmVudHMKICAgIC8vCiAgICAKICAgIGV2ZW50IE5ld1BsYXkoYWRkcmVzcyBwbGF5ZXIsIHVpbnQgbnVtYmVyLCBib29sIHdvbik7CgogICAgLy8KICAgIC8vIEdBTUUKICAgIC8vCgogICAgc3RydWN0IEJldCB7CiAgICAgICAgdWludCBudW1iZXI7ICAgICAgICAgICAgLy8gVGhlIG51bWJlciBnaXZlbiB0byB0aGUgdXNlcgogICAgICAgIGJvb2wgaXNXaW5uZXI7ICAgICAgICAgIC8vIEhhcyB0aGlzIGJldCB3b24gdGhlIGphY2twb3QKICAgICAgICBhZGRyZXNzIHBsYXllcjsgICAgICAgICAvLyBXZSBzYXZlIHRoZSBhZGRyZXNzIG9mIHRoZSBwbGF5ZXIKICAgICAgICB1aW50MzIgdGltZXN0YW1wOyAgICAgICAvLyBXZSBzYXZlIHRoZSB0aW1lc3RhbXAgb2YgdGhpcyBiZXQKICAgICAgICB1aW50MjU2IEphY2twb3RXb247ICAgICAvLyBUaGUgYW1vdW50IHdvbiBpZiB0aGUgdXNlciB3b24gdGhlIGphY2twb3QKICAgIH0KICAgIEJldFtdIGJldHM7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgb3duZXJCZXRzQ291bnQ7ICAgIC8vIEhvdyBtYW55IGJldHMgaGF2ZSB0aGlzIGFkZHJlc3MgbWFkZQoKICAgIC8vIFN0YXRzCiAgICB1aW50IHRvdGFsVGlja2V0czsgICAgICAgICAgLy8gVGhlIHRvdGFsIGFtb3VudCBvZiBiZXRzCiAgICB1aW50MjU2IGFtb3VudFdvbjsgICAgICAgICAgLy8gVGhlIHRvdGFsIGFtb3VudCBvZiBFVEggd29uIGJ5IHVzZXJzCiAgICB1aW50MjU2IGFtb3VudFBsYXllZDsgICAgICAgLy8gVGhlIHRvdGFsIGFtb3VudCBvZiBFVEggcGxheWVkIGJ5IHVzZXJzCgogICAgLy8gVGhlIGNvdW50ZG93biB0aW1lIHdpbGwgYmUgdXNlZCB0byByZXNldCB0aGUgd2lubmluZyBudW1iZXIgYWZ0ZXIgNDggaG91cnMgaWYgdGhlcmUgYXJlbid0IGFueSBuZXcgd2lubmluZyBudW1iZXIKICAgIHVpbnQgY29vbGRvd25UaW1lID0gMSBkYXlzOwoKICAgIC8vIFRvIHRyYWNrIHRoZSBjdXJyZW50IHdpbm5lcgogICAgYWRkcmVzcyBjdXJyZW50V2lubmluZ0FkZHJlc3M7CiAgICB1aW50IGN1cnJlbnRXaW5uaW5nTnVtYmVyOwogICAgdWludCBjdXJyZW50UmVzZXRUaW1lcjsKCiAgICAvLyBSYW5kb20gbnVtYmVycyB0aGF0IGNhbiBiZSBtb2RpZmllZCBieSB0aGUgQ0VPIHRvIG1ha2UgdGhlIGdhbWUgY29tcGxldGVseSByYW5kb20KICAgIHVpbnQgcmFuZG9tTnVtYmVyID0gMTc4OwogICAgdWludCByYW5kb21OdW1iZXIyOwogICAgCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsgCiAgICAgICAgUGxheSgpOwogICAgfQogICAgCiAgICAvKgogICAgVGhpcyBpcyB0aGUgbWFpbiBmdW5jdGlvbiBvZiB0aGUgZ2FtZS4gCiAgICBJdCBpcyBjYWxsZWQgd2hlbiBhIHBsYXllciBzZW5kcyBFVEggdG8gdGhlIGNvbnRyYWN0IG9yIHBsYXkgdXNpbmcgTWV0YW1hc2suCiAgICBJdCBjYWxjdWxhdGVzIHRoZSBhbW91bnQgb2YgdGlja2V0cyBib3VnaHQgYnkgdGhlIHBsYXllciAoYWNjb3JkaW5nIHRvIHRoZSBhbW91bnQgcmVjZWl2ZWQgYnkgdGhlIGNvbnRyYWN0KSBhbmQgZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBmb3IgZWFjaCB0aWNrZXQuCiAgICBXZSBrZWVwIHRoZSBiZXN0IG51bWJlciBvZiBhbGwuIC0+IDEgdGlja2V0ID0gMC4wMSBFVEggCiAgICAqLwogICAgZnVuY3Rpb24gUGxheSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICAvLyBXZSBkb24ndCBydW4gdGhlIGZ1bmN0aW9uIGlmIHRoZSBwbGF5ZXIgcGFpZCBsZXNzIHRoYW4gMC4wMSBFVEgKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBtaW5CZXRWYWx1ZSk7CiAgICAgICAgCiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGlja2V0IGV2ZXIKICAgICAgICBpZih0b3RhbFRpY2tldHMgPT0gMCkgewogICAgICAgICAgICAvLyBXZSBzYXZlIHRoZSBjdXJyZW50IEphY2twb3QgdmFsdWUKICAgICAgICAgICAgdG90YWxUaWNrZXRzKys7CiAgICAgICAgICAgIGN1cnJlbnRKYWNrcG90ID0gY3VycmVudEphY2twb3QgKyBtc2cudmFsdWU7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHVpbnQgX3RoaXNKYWNrcG90ID0gY3VycmVudEphY2twb3Q7CiAgICAgICAgLy8gaGVyZSB3ZSBjb3VudCB0aGUgbnVtYmVyIG9mIHRpY2tldHMgcHVyY2hhc2VkIGJ5IHRoZSB1c2VyIChlYWNoIHRpY2tldCBjb3N0cyAwLjAxRVRIKQogICAgICAgIHVpbnQgX2ZpbmFsUmFuZG9tTnVtYmVyID0gMDsKICAgICAgICAKICAgICAgICAvLyBXZSBzYXZlIHRoZSBjdXJyZW50IEphY2twb3QgdmFsdWUKICAgICAgICBjdXJyZW50SmFja3BvdCA9IGN1cnJlbnRKYWNrcG90ICsgbXNnLnZhbHVlOwogICAgICAgIAogICAgICAgIC8vIFdlIGdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBmb3IgZWFjaCB0aWNrZXQgcHVyY2hhc2VkIGJ5IHRoZSBwbGF5ZXIKICAgICAgICAvLyBFeGFtcGxlOiAxIHRpY2tldCBjb3N0cyAwLjAxIEVUSCwgaWYgYSB1c2VyIHBhaWQgMSBFVEgsIHdlIHdpbGwgcnVuIHRoaXMgZnVuY3Rpb24gMTAwIHRpbWVzIGFuZCBzYXZlIHRoZSBiaWdnZXN0IG51bWJlciBvZiBhbGwgYXMgaXRzIHJlc3VsdAogICAgICAgIF9maW5hbFJhbmRvbU51bWJlciA9ICh1aW50KG5vdykgLSAxICogcmFuZG9tTnVtYmVyICogcmFuZG9tTnVtYmVyMiArIHVpbnQobm93KSklMTAwMCArIDE7CiAgICAgICAgcmFuZG9tTnVtYmVyID0gX2ZpbmFsUmFuZG9tTnVtYmVyOwoKICAgICAgICAvLyBXZSBrZWVwIHRyYWNrIG9mIHRoZSBhbW91bnQgcGxheWVkIGJ5IHRoZSB1c2VycwogICAgICAgIGFtb3VudFBsYXllZCA9IGFtb3VudFBsYXllZCArIG1zZy52YWx1ZTsKICAgICAgICB0b3RhbFRpY2tldHMrKzsKICAgICAgICBvd25lckJldHNDb3VudFttc2cuc2VuZGVyXSsrOwoKICAgICAgICAvLyBXZSBjYWxjdWxhdGUgYW5kIHRyYW5zZmVyIHRvIHRoZSBvd25lciBhIGNvbW1pc3Npb24gb2YgMTAlCiAgICAgICAgdWludDI1NiBNc2dWYWx1ZTEwUGVyY2VudCA9IG1zZy52YWx1ZSAvIDEwOwogICAgICAgIGNmb0FkZHJlc3MudHJhbnNmZXIoTXNnVmFsdWUxMFBlcmNlbnQpOwogICAgICAgIAogICAgICAgIAogICAgICAgIC8vIFdlIHNhdmUgdGhlIGN1cnJlbnQgSmFja3BvdCB2YWx1ZQogICAgICAgIGN1cnJlbnRKYWNrcG90ID0gY3VycmVudEphY2twb3QgLSBNc2dWYWx1ZTEwUGVyY2VudDsKCiAgICAgICAgLy8gTm93IHRoYXQgd2UgaGF2ZSB0aGUgYmlnZ2VzdCBudW1iZXIgb2YgdGhlIHBsYXllciB3ZSBjaGVjayBpZiB0aGlzIGlzIGJldHRlciB0aGFuIHRoZSBwcmV2aW91cyB3aW5uaW5nIG51bWJlcgogICAgICAgIGlmKF9maW5hbFJhbmRvbU51bWJlciA+IGN1cnJlbnRXaW5uaW5nTnVtYmVyKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyB3ZSB1cGRhdGUgdGhlIGNvb2xkb3duIHRpbWUgKHdoZW4gdGhlIGNvb2xkb3duIHRpbWUgaXMgZXhwaXJlZCwgdGhlIG93bmVyIHdpbGwgYmUgYWJsZSB0byByZXNldCB0aGUgZ2FtZSkKICAgICAgICAgICAgY3VycmVudFJlc2V0VGltZXIgPSBub3cgKyBjb29sZG93blRpbWU7CgogICAgICAgICAgICAvLyBUaGUgcGxheWVyIGlzIGEgd2lubmVyIGFuZCB3aW5zIHRoZSBqYWNrcG90IChoZS9zaGUgd2lucyA5MCUgb2YgdGhlIGJhbGFuY2UsIHdlIGtlZXAgc29tZSBmdW5kcyBmb3IgdGhlIG5leHQgZ2FtZSkKICAgICAgICAgICAgdWludDI1NiBKYWNrcG90V29uID0gX3RoaXNKYWNrcG90OwogICAgICAgICAgICAKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihKYWNrcG90V29uKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFdlIHNhdmUgdGhlIGN1cnJlbnQgSmFja3BvdCB2YWx1ZQogICAgICAgICAgICBjdXJyZW50SmFja3BvdCA9IGN1cnJlbnRKYWNrcG90IC0gSmFja3BvdFdvbjsKICAgICAgICAKICAgICAgICAgICAgLy8gV2Uga2VlcCB0cmFjayBvZiB0aGUgYW1vdW50IHdvbiBieSB0aGUgdXNlcnMKICAgICAgICAgICAgYW1vdW50V29uID0gYW1vdW50V29uICsgSmFja3BvdFdvbjsKICAgICAgICAgICAgY3VycmVudFdpbm5pbmdOdW1iZXIgPSBfZmluYWxSYW5kb21OdW1iZXI7CiAgICAgICAgICAgIGN1cnJlbnRXaW5uaW5nQWRkcmVzcyA9IG1zZy5zZW5kZXI7CgogICAgICAgICAgICAvLyBXZSBzYXZlIHRoaXMgYmV0IGluIHRoZSBibG9ja2NoYWluCiAgICAgICAgICAgIGJldHMucHVzaChCZXQoX2ZpbmFsUmFuZG9tTnVtYmVyLCB0cnVlLCBtc2cuc2VuZGVyLCB1aW50MzIobm93KSwgSmFja3BvdFdvbikpOwogICAgICAgICAgICBOZXdQbGF5KG1zZy5zZW5kZXIsIF9maW5hbFJhbmRvbU51bWJlciwgdHJ1ZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBJZiB0aGUgdXNlcidzIG51bWJlciBpcyBlcXVhbCB0byAxMDAgd2UgcmVzZXQgdGhlIG1heCBudW1iZXIKICAgICAgICAgICAgaWYoX2ZpbmFsUmFuZG9tTnVtYmVyID49IDkwMCkgewogICAgICAgICAgICAgICAgLy8gV2UgcmVzZXQgdGhlIHdpbm5pbmcgYWRkcmVzcyBhbmQgc2V0IHRoZSBjdXJyZW50IHdpbm5pbmcgbnVtYmVyIHRvIDEgKHRoZSBuZXh0IHBsYXllciB3aWxsIGhhdmUgOTklIG9mIGNoYW5jZXMgdG8gd2luKQogICAgICAgICAgICAgICAgY3VycmVudFdpbm5pbmdBZGRyZXNzID0gYWRkcmVzcyh0aGlzKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRXaW5uaW5nTnVtYmVyID0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFRoZSBwbGF5ZXIgaXMgYSBsb3Nlciwgd2UgdHJhbnNmZXIgMTAlIG9mIHRoZSBiZXQgdG8gdGhlIGN1cnJlbnQgd2lubmVyIGFuZCBzYXZlIHRoZSByZXN0IGluIHRoZSBqYWNrcG90CiAgICAgICAgICAgIGN1cnJlbnRXaW5uaW5nQWRkcmVzcy50cmFuc2ZlcihNc2dWYWx1ZTEwUGVyY2VudCk7CiAgICAgICAgCiAgICAgICAgICAgIC8vIFdlIHNhdmUgdGhlIGN1cnJlbnQgSmFja3BvdCB2YWx1ZQogICAgICAgICAgICBjdXJyZW50SmFja3BvdCA9IGN1cnJlbnRKYWNrcG90IC0gTXNnVmFsdWUxMFBlcmNlbnQ7CiAgICAgICAgCiAgICAgICAgICAgIC8vIFdlIHNhdmUgdGhpcyBiZXQgaW4gdGhlIGJsb2NrY2hhaW4KICAgICAgICAgICAgYmV0cy5wdXNoKEJldChfZmluYWxSYW5kb21OdW1iZXIsIGZhbHNlLCBtc2cuc2VuZGVyLCB1aW50MzIobm93KSwgMCkpOwogICAgICAgICAgICBOZXdQbGF5KG1zZy5zZW5kZXIsIF9maW5hbFJhbmRvbU51bWJlciwgZmFsc2UpOwogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lciAoMjQgaG91cnMgYWZ0ZXIgdGhlIGxhc3QgZ2FtZSkgaWYgdGhlIGdhbWUgbmVlZHMgdG8gYmUgcmVzZXQKICAgIEV4YW1wbGU6IHRoZSBsYXN0IG51bWJlciBpcyA5OSBidXQgdGhlIGphY2twb3QgaXMgdG9vIHNtYWxsIGZvciBwbGF5ZXJzIHRvIHdhbnQgdG8gcGxheS4KICAgIFdoZW4gdGhlIG93bmVyIHJlc2V0IHRoZSBnYW1lIGl0OgogICAgICAgIDEuIFRyYW5zZmVycyBhdXRvbWF0aWNhbGx5IHRoZSByZW1haW5pbmcgamFja3BvdCAobWludXMgMTAlIHRoYXQgbmVlZHMgdG8gYmUga2VwdCBpbiB0aGUgY29udHJhY3QgZm9yIHRoZSBuZXcgamFja3BvdCkgdG8gdGhlIGxhc3Qgd2lubmVyIAogICAgICAgIDIuIEl0IHJlc2V0cyB0aGUgbWF4IG51bWJlciB0byA1IHdoaWNoIHdpbGwgbW90aXZhdGUgbmV3IHVzZXJzIHRvIHBsYXkgYWdhaW4KICAgIAogICAgSXQgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciAyNGggYWZ0ZXIgdGhlIGxhc3Qgd2lubmluZyBnYW1lLgogICAgKi8KICAgIGZ1bmN0aW9uIG1hbnVhbGx5UmVzZXRHYW1lKCkgcHVibGljIG9ubHlDZW8gewogICAgICAgIC8vIFdlIHZlcmlmaXkgdGhhdCAyNGggaGF2ZSBwYXNzZWQgc2luY2UgdGhlIGJlZ2lubmluZyBvZiB0aGUgZ2FtZQogICAgICAgIHJlcXVpcmUoY3VycmVudFJlc2V0VGltZXIgPCBub3cpOwoKICAgICAgICAvLyBUaGUgY3VycmVudCB3aW5uaW5nIGFkZHJlc3Mgd2lucyB0aGUgamFja3BvdCAoaGUvc2hlIHdpbnMgOTAlIG9mIHRoZSBiYWxhbmNlLCB3ZSBrZWVwIDEwJSB0byBmdW5kIHRoZSBuZXh0IHR1cm4pCiAgICAgICAgdWludDI1NiBKYWNrcG90V29uID0gY3VycmVudEphY2twb3QgLSBtaW5CZXRWYWx1ZTsKICAgICAgICBjdXJyZW50V2lubmluZ0FkZHJlc3MudHJhbnNmZXIoSmFja3BvdFdvbik7CiAgICAgICAgCiAgICAgICAgLy8gV2Ugc2F2ZSB0aGUgY3VycmVudCBKYWNrcG90IHZhbHVlCiAgICAgICAgY3VycmVudEphY2twb3QgPSBjdXJyZW50SmFja3BvdCAtIEphY2twb3RXb247CgogICAgICAgIC8vIFdlIGtlZXAgdHJhY2sgb2YgdGhlIGFtb3VudCB3b24gYnkgdGhlIHVzZXJzCiAgICAgICAgYW1vdW50V29uID0gYW1vdW50V29uICsgSmFja3BvdFdvbjsKCiAgICAgICAgLy8gV2UgcmVzZXQgdGhlIHdpbm5pbmcgYWRkcmVzcyBhbmQgc2V0IHRoZSBjdXJyZW50IHdpbm5pbmcgbnVtYmVyIHRvIDEgKHRoZSBuZXh0IHBsYXllciB3aWxsIGhhdmUgOTklIG9mIGNoYW5jZXMgdG8gd2luKQogICAgICAgIGN1cnJlbnRXaW5uaW5nQWRkcmVzcyA9IGFkZHJlc3ModGhpcyk7CiAgICAgICAgY3VycmVudFdpbm5pbmdOdW1iZXIgPSAxOwogICAgfQoKICAgIC8qCiAgICBUaG9zZSBmdW5jdGlvbnMgYXJlIHVzZWZ1bCB0byByZXR1cm4gc29tZSBpbXBvcnRhbnQgZGF0YSBhYm91dCB0aGUgZ2FtZS4KICAgICovCiAgICBmdW5jdGlvbiBHZXRDdXJyZW50TnVtYmVycygpIHB1YmxpYyB2aWV3IHJldHVybnModWludCwgdWludDI1NiwgdWludCkgewogICAgICAgIHVpbnQgX2N1cnJlbnRKYWNrcG90ID0gY3VycmVudEphY2twb3Q7CiAgICAgICAgcmV0dXJuKGN1cnJlbnRXaW5uaW5nTnVtYmVyLCBfY3VycmVudEphY2twb3QsIGJldHMubGVuZ3RoKTsKICAgIH0KICAgIGZ1bmN0aW9uIEdldFdpbm5pbmdBZGRyZXNzKCkgcHVibGljIHZpZXcgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuKGN1cnJlbnRXaW5uaW5nQWRkcmVzcyk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEdldFN0YXRzKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50LCB1aW50MjU2LCB1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuKHRvdGFsVGlja2V0cywgYW1vdW50UGxheWVkLCBhbW91bnRXb24pOwogICAgfQoKICAgIC8vIFRoaXMgd2lsbCByZXR1cm5zIHRoZSBkYXRhIG9mIGEgYmV0CiAgICBmdW5jdGlvbiBHZXRCZXQodWludCBfYmV0SWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoCiAgICAgICAgdWludCBudW1iZXIsICAgICAgICAgICAgLy8gVGhlIG51bWJlciBnaXZlbiB0byB0aGUgdXNlcgogICAgICAgIGJvb2wgaXNXaW5uZXIsICAgICAgICAgIC8vIEhhcyB0aGlzIGJldCB3b24gdGhlIGphY2twb3QKICAgICAgICBhZGRyZXNzIHBsYXllciwgICAgICAgICAvLyBXZSBzYXZlIHRoZSBhZGRyZXNzIG9mIHRoZSBwbGF5ZXIKICAgICAgICB1aW50MzIgdGltZXN0YW1wLCAgICAgICAvLyBXZSBzYXZlIHRoZSB0aW1lc3RhbXAgb2YgdGhpcyBiZXQKICAgICAgICB1aW50MjU2IEphY2twb3RXb24gICAgIC8vIFRoZSBhbW91bnQgd29uIGlmIHRoZSB1c2VyIHdvbiB0aGUgamFja3BvdAogICAgKSB7CiAgICAgICAgQmV0IHN0b3JhZ2UgX2JldCA9IGJldHNbX2JldElkXTsKCiAgICAgICAgbnVtYmVyID0gX2JldC5udW1iZXI7CiAgICAgICAgaXNXaW5uZXIgPSBfYmV0LmlzV2lubmVyOwogICAgICAgIHBsYXllciA9IF9iZXQucGxheWVyOwogICAgICAgIHRpbWVzdGFtcCA9IF9iZXQudGltZXN0YW1wOwogICAgICAgIEphY2twb3RXb24gPSBfYmV0LkphY2twb3RXb247CiAgICB9CgogICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBvbmx5IHRoZSBiZXRzIGlkIG9mIGEgY2VydGFpbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBHZXRVc2VyQmV0cyhhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnRbXSkgewogICAgICAgIHVpbnRbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnRbXShvd25lckJldHNDb3VudFtfb3duZXJdKTsKICAgICAgICB1aW50IGNvdW50ZXIgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGJldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChiZXRzW2ldLnBsYXllciA9PSBfb3duZXIpIHsKICAgICAgICAgICAgcmVzdWx0W2NvdW50ZXJdID0gaTsKICAgICAgICAgICAgY291bnRlcisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBvbmx5IHRoZSBiZXRzIGlkIG9mIGEgY2VydGFpbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBHZXRMYXN0QmV0VXNlcihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnRbXSkgewogICAgICAgIHVpbnRbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnRbXShvd25lckJldHNDb3VudFtfb3duZXJdKTsKICAgICAgICB1aW50IGNvdW50ZXIgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGJldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChiZXRzW2ldLnBsYXllciA9PSBfb3duZXIpIHsKICAgICAgICAgICAgcmVzdWx0W2NvdW50ZXJdID0gaTsKICAgICAgICAgICAgY291bnRlcisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgLyoKICAgIFRob3NlIGZ1bmN0aW9ucyBhcmUgdXNlZnVsIHRvIG1vZGlmeSBzb21lIHZhbHVlcyBpbiB0aGUgZ2FtZQogICAgKi8KICAgIGZ1bmN0aW9uIG1vZGlmeVJhbmRvbU51bWJlcjIodWludCBfbmV3UmROdW0pIHB1YmxpYyBvbmx5Q2VvIHsKICAgICAgICByYW5kb21OdW1iZXIyID0gX25ld1JkTnVtOwogICAgfQogICAgZnVuY3Rpb24gbW9kaWZ5Q2VvKGFkZHJlc3MgX25ld0NlbykgcHVibGljIG9ubHlDZW8gewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgICAgICBjZW9BZGRyZXNzID0gX25ld0NlbzsKICAgIH0KICAgIGZ1bmN0aW9uIG1vZGlmeUNmbyhhZGRyZXNzIF9uZXdDZm8pIHB1YmxpYyBvbmx5Q2VvIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyk7CiAgICAgICAgY2ZvQWRkcmVzcyA9IF9uZXdDZm87CiAgICB9Cn0='.
	

]
