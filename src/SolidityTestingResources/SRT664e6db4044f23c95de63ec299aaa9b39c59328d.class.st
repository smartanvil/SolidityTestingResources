Class {
	#name : #SRT664e6db4044f23c95de63ec299aaa9b39c59328d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT664e6db4044f23c95de63ec299aaa9b39c59328d >> base64 [
	^ ''.
	

]
