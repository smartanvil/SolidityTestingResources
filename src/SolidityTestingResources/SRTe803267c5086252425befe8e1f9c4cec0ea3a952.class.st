Class {
	#name : #SRTe803267c5086252425befe8e1f9c4cec0ea3a952,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe803267c5086252425befe8e1f9c4cec0ea3a952 >> base64 [
	^ ''.
	

]
