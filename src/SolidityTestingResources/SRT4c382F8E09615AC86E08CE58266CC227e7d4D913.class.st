Class {
	#name : #SRT4c382F8E09615AC86E08CE58266CC227e7d4D913,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c382F8E09615AC86E08CE58266CC227e7d4D913 >> base64 [
	^ ''.
	

]
