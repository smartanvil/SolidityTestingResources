Class {
	#name : #SRT5052787b0B9cEC67442E2FF43D2176693377Bc5A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5052787b0B9cEC67442E2FF43D2176693377Bc5A >> base64 [
	^ ''.
	

]
