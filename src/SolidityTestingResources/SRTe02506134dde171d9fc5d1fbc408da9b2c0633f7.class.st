Class {
	#name : #SRTe02506134dde171d9fc5d1fbc408da9b2c0633f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe02506134dde171d9fc5d1fbc408da9b2c0633f7 >> base64 [
	^ ''.
	

]
