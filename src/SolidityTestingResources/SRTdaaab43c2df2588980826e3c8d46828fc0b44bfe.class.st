Class {
	#name : #SRTdaaab43c2df2588980826e3c8d46828fc0b44bfe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdaaab43c2df2588980826e3c8d46828fc0b44bfe >> base64 [
	^ ''.
	

]
