Class {
	#name : #SRT0df600c873da796c3ef6d6a0472772eb954d6986,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0df600c873da796c3ef6d6a0472772eb954d6986 >> base64 [
	^ ''.
	

]
