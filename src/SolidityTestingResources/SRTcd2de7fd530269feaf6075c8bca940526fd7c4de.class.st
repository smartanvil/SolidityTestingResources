Class {
	#name : #SRTcd2de7fd530269feaf6075c8bca940526fd7c4de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcd2de7fd530269feaf6075c8bca940526fd7c4de >> base64 [
	^ ''.
	

]
