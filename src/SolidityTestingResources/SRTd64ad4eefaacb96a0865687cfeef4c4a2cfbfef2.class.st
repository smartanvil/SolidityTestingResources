Class {
	#name : #SRTd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2 >> base64 [
	^ ''.
	

]
