Class {
	#name : #SRT1c65557b72804569bcd25ce53575a9c712e2eff5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c65557b72804569bcd25ce53575a9c712e2eff5 >> base64 [
	^ 'Ly8gUGxheTJMaXZlUHJvbW8gdG9rZW4gc21hcnQgY29udHJhY3QuCi8vIERldmVsb3BlZCBieSBQaGVub20uVGVhbSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjMzNWE1ZDU1NWM3MzQzNWI1NjVkNWM1ZTFkNDc1NjUyNWUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBQbGF5MkxpdmVQcm9tbyB7CiAgICAvL093bmVyIGFkZHJlc3MKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgLy9QdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lICA9ICJMZXZlbCBVcCBDb2luIERpYW1vbmQgfCBwbGF5MmxpdmUuaW8iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiTFVDRCI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsgCiAgICB1aW50MjU2IHByb21vVmFsdWUgPSA3NzcgKiAxZTE4OwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICAvLyBFdmVudHMgTG9nCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBhbW91bnQpOyAKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwogICAgLy8gTW9kaWZpZXJzCiAgICAvLyBBbGxvd3MgZXhlY3V0aW9uIGJ5IHRoZSBjb250cmFjdCBvd25lciBvbmx5CiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0gIAoKICAgLyoqCiAgICAqICAgQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBzZXRzIG93bmVyIGFkZHJlc3MKICAgICovCiAgICBmdW5jdGlvbiBQbGF5MkxpdmVQcm9tbygpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLyoqCiAgICAqICAgQGRldiBBbGxvd3Mgb3duZXIgdG8gY2hhbmdlIHByb21vIHZhbHVlCiAgICAqICAgQHBhcmFtIF9uZXdWYWx1ZSAgICAgIG5ldyAgIAogICAgKi8KICAgIGZ1bmN0aW9uIHNldFByb21vKHVpbnQyNTYgX25ld1ZhbHVlKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHByb21vVmFsdWUgPSBfbmV3VmFsdWU7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEdldCBiYWxhbmNlIG9mIGludmVzdG9yCiAgICAqICAgQHBhcmFtIF9pbnZlc3RvciAgICAgaW52ZXN0b3IncyBhZGRyZXNzCiAgICAqICAgQHJldHVybiAgICAgICAgICAgICAgYmFsYW5jZSBvZiBpbnZlc3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9pbnZlc3RvcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfaW52ZXN0b3JdOwogICAgfQoKCiAgIC8qKgogICAgKiAgIEBkZXYgTWludCB0b2tlbnMKICAgICogICBAcGFyYW0gX2ludmVzdG9yICAgICBiZW5lZmljaWFyeSBhZGRyZXNzIHRoZSB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgdG8KICAgICovCiAgICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgX2ludmVzdG9yKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGJhbGFuY2VzW19pbnZlc3Rvcl0gKz0gIHByb21vVmFsdWU7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gcHJvbW9WYWx1ZTsKICAgICAgICBUcmFuc2ZlcigweDAsIF9pbnZlc3RvciwgcHJvbW9WYWx1ZSk7CiAgICAgICAgCiAgICB9CgoKICAgLyoqCiAgICAqICAgQGRldiBTZW5kIGNvaW5zCiAgICAqICAgdGhyb3dzIG9uIGFueSBlcnJvciByYXRoZXIgdGhlbiByZXR1cm4gYSBmYWxzZSBmbGFnIHRvIG1pbmltaXplCiAgICAqICAgdXNlciBlcnJvcnMKICAgICogICBAcGFyYW0gX3RvICAgICAgICAgICB0YXJnZXQgYWRkcmVzcwogICAgKiAgIEBwYXJhbSBfYW1vdW50ICAgICAgIHRyYW5zZmVyIGFtb3VudAogICAgKgogICAgKiAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgYmFsYW5jZXNbX3RvXSAtPSBfYW1vdW50OwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEFuIGFjY291bnQvY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucwogICAgKiAgIHRocm93cyBvbiBhbnkgZXJyb3IgcmF0aGVyIHRoZW4gcmV0dXJuIGEgZmFsc2UgZmxhZyB0byBtaW5pbWl6ZSB1c2VyIGVycm9ycwogICAgKgogICAgKiAgIEBwYXJhbSBfZnJvbSAgICAgICAgIHNvdXJjZSBhZGRyZXNzCiAgICAqICAgQHBhcmFtIF90byAgICAgICAgICAgdGFyZ2V0IGFkZHJlc3MKICAgICogICBAcGFyYW0gX2Ftb3VudCAgICAgICB0cmFuc2ZlciBhbW91bnQKICAgICoKICAgICogICBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICBiYWxhbmNlc1tfdG9dIC09IF9hbW91bnQ7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQoKCiAgIC8qKgogICAgKiAgIEBkZXYgQWxsb3dzIGFub3RoZXIgYWNjb3VudC9jb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBvbiBpdHMgYmVoYWxmCiAgICAqICAgdGhyb3dzIG9uIGFueSBlcnJvciByYXRoZXIgdGhlbiByZXR1cm4gYSBmYWxzZSBmbGFnIHRvIG1pbmltaXplIHVzZXIgZXJyb3JzCiAgICAqCiAgICAqICAgYWxzbywgdG8gbWluaW1pemUgdGhlIHJpc2sgb2YgdGhlIGFwcHJvdmUvdHJhbnNmZXJGcm9tIGF0dGFjayB2ZWN0b3IKICAgICogICBhcHByb3ZlIGhhcyB0byBiZSBjYWxsZWQgdHdpY2UgaW4gMiBzZXBhcmF0ZSB0cmFuc2FjdGlvbnMgLSBvbmNlIHRvCiAgICAqICAgY2hhbmdlIHRoZSBhbGxvd2FuY2UgdG8gMCBhbmQgc2Vjb25kbHkgdG8gY2hhbmdlIGl0IHRvIHRoZSBuZXcgYWxsb3dhbmNlCiAgICAqICAgdmFsdWUKICAgICoKICAgICogICBAcGFyYW0gX3NwZW5kZXIgICAgICBhcHByb3ZlZCBhZGRyZXNzCiAgICAqICAgQHBhcmFtIF9hbW91bnQgICAgICAgYWxsb3dhbmNlIGFtb3VudAogICAgKgogICAgKiAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwKICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKChfYW1vdW50ID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICoKICAgICogICBAcGFyYW0gX293bmVyICAgICAgICB0aGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcwogICAgKiAgIEBwYXJhbSBfc3BlbmRlciAgICAgIHRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzCiAgICAqCiAgICAqICAgQHJldHVybiAgICAgICAgICAgICAgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIKICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KfQ=='.
	

]
