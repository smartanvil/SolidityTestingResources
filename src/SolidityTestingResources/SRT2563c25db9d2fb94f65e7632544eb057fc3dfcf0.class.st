Class {
	#name : #SRT2563c25db9d2fb94f65e7632544eb057fc3dfcf0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2563c25db9d2fb94f65e7632544eb057fc3dfcf0 >> base64 [
	^ ''.
	

]
