Class {
	#name : #SRTa4f546b43c6338e20f544b2827d8ee099b389f02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4f546b43c6338e20f544b2827d8ee099b389f02 >> base64 [
	^ ''.
	

]
