Class {
	#name : #SRT7996d791995B9f9C15EB4C3e899B09a344c54Bdb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7996d791995B9f9C15EB4C3e899B09a344c54Bdb >> base64 [
	^ 'Y29udHJhY3QgR2FtZU9mVGhyb25lcyB7CiAgICBhZGRyZXNzIHB1YmxpYyB0cnVlR29kczsKICAgIC8vIEtpbmcncyBKZXN0ZXIKICAgIGFkZHJlc3MgcHVibGljIGplc3RlcjsKICAgIC8vIFJlY29yZCB0aGUgbGFzdCBjb2xsZWN0aW9uIHRpbWUKICAgIHVpbnQgcHVibGljIGxhc3RDb2xsZWN0aW9uOwogICAgLy8gUmVjb3JkIGtpbmcgbGlmZQogICAgdWludCBwdWJsaWMgb25UaHJvbmU7CiAgICB1aW50IHB1YmxpYyBraW5nQ29zdDsKICAgIC8vIFBpZ2d5IEJhbmsgQW1vdW50CiAgICB1aW50IHB1YmxpYyBwaWdneUJhbms7CiAgICAvLyBDb2xsZWN0ZWQgRmVlIEFtb3VudAogICAgdWludCBwdWJsaWMgZ29kQmFuazsKICAgIHVpbnQgcHVibGljIGplc3RlckJhbms7CiAgICB1aW50IHB1YmxpYyBraW5nQmFuazsKCiAgICAvLyBUcmFjayB0aGUgY2l0aXplbnMgd2hvIGhlbHBlZCB0byBhcm0gcmFjZQogICAgYWRkcmVzc1tdIHB1YmxpYyBjaXRpemVuc0FkZHJlc3NlczsKICAgIHVpbnRbXSBwdWJsaWMgY2l0aXplbnNBbW91bnRzOwogICAgdWludDMyIHB1YmxpYyB0b3RhbENpdGl6ZW5zOwogICAgdWludDMyIHB1YmxpYyBsYXN0Q2l0aXplblBhaWQ7CiAgICAvLyBUaGUgbWFkIGtpbmcgZXN0YWJsaXNoZXMgdGhlIGdvdmVybm1lbnQKICAgIGFkZHJlc3MgcHVibGljIG1hZEtpbmc7CiAgICAvLyBSZWNvcmQgaG93IG1hbnkgdGltZXMgdGhlIGNhc3RsZSBoYWQgZmVsbAogICAgdWludDMyIHB1YmxpYyByb3VuZDsKICAgIC8vIEFtb3VudCBhbHJlYWR5IHBhaWQgYmFjayBpbiB0aGlzIHJvdW5kCiAgICB1aW50IHB1YmxpYyBhbW91bnRBbHJlYWR5UGFpZEJhY2s7CiAgICAvLyBBbW91bnQgaW52ZXN0ZWQgaW4gdGhpcyByb3VuZAogICAgdWludCBwdWJsaWMgYW1vdW50SW52ZXN0ZWQ7CgogICAgdWludCBjb25zdGFudCBUV0VOVFlfRk9VUl9IT1VSUyA9IDYwICogNjAgKiAyNDsKICAgIHVpbnQgY29uc3RhbnQgUEVBQ0VfUEVSSU9EID0gNjAgKiA2MCAqIDI0MDsKCiAgICBmdW5jdGlvbiBHYW1lT2ZUaHJvbmVzKCkgewogICAgICAgIC8vIERlZmluZSB0aGUgZmlyc3QgY2FzdGxlCiAgICAgICAgdHJ1ZUdvZHMgPSBtc2cuc2VuZGVyOwogICAgICAgIG1hZEtpbmcgPSBtc2cuc2VuZGVyOwogICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgbGFzdENvbGxlY3Rpb24gPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgb25UaHJvbmUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAga2luZ0Nvc3QgPSAxIGV0aGVyOwogICAgICAgIGFtb3VudEFscmVhZHlQYWlkQmFjayA9IDA7CiAgICAgICAgYW1vdW50SW52ZXN0ZWQgPSAwOwogICAgICAgIHRvdGFsQ2l0aXplbnMgPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlcGFpclRoZUNhc3RsZSgpIHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBtaW5pbXVtIGFtb3VudCBpZiByZWFjaGVkCiAgICAgICAgaWYgKGFtb3VudCA8IDEwIGZpbm5leSkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAvLyBJZiB0aGUgYW1vdW50IHJlY2VpdmVkIGlzIG1vcmUgdGhhbiAxMDAgRVRIIHJldHVybiB0aGUgZGlmZmVyZW5jZQogICAgICAgIGlmIChhbW91bnQgPiAxMDAgZXRoZXIpIHsKICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSAtIDEwMCBldGhlcik7CiAgICAgICAgICAgIGFtb3VudCA9IDEwMCBldGhlcjsKICAgICAgICB9CgogICAgICAgIC8vIENoZWNrIGlmIHRoZSBDYXN0bGUgaGFzIGZlbGwKICAgICAgICBpZiAobGFzdENvbGxlY3Rpb24gKyBUV0VOVFlfRk9VUl9IT1VSUyA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICAvLyBTZW5kIHRoZSBQaWdneSBCYW5rIHRvIHRoZSBsYXN0IDMgY2l0aXplbnMKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gb25lIHdobyBjb250cmlidXRlZCB0aGlzIGxhc3QgMjQgaG91cnMsIG5vIGFjdGlvbiBuZWVkZWQKICAgICAgICAgICAgaWYgKHRvdGFsQ2l0aXplbnMgPT0gMSkgewogICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgQ2l0aXplbiB3aG8gY29udHJpYnV0ZWQsIGhlIGdldHMgdGhlIGZ1bGwgUGlnZyBCYW5rCiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAxXS5zZW5kKHBpZ2d5QmFuayAqIDk1IC8gMTAwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID09IDIpIHsKICAgICAgICAgICAgICAgIC8vIElmIG9ubHkgMiBjaXRpemVucyBjb250cmlidXRlZAogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMV0uc2VuZChwaWdneUJhbmsgKiA2MCAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAyXS5zZW5kKHBpZ2d5QmFuayAqIDM1IC8gMTAwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID49IDMpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIDMgb3IgbW9yZSBjaXRpemVucyB3aG8gY29udHJpYnV0ZWQKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rICogNTAgLyAxMDApOwogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMl0uc2VuZChwaWdneUJhbmsgKiAzMCAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAzXS5zZW5kKHBpZ2d5QmFuayAqIDE1IC8gMTAwKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ29kQmFuayArPSBwaWdneUJhbmsgKiA1IC8gMTAwOwogICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBQaWdneSBCYW5rCiAgICAgICAgICAgIHBpZ2d5QmFuayA9IDA7CgogICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBDYXN0bGUKICAgICAgICAgICAgamVzdGVyID0gbXNnLnNlbmRlcjsKCiAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICAgIGNpdGl6ZW5zQW1vdW50cy5wdXNoKGFtb3VudCAqIDExMCAvIDEwMCk7CiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsKICAgICAgICAgICAgaW52ZXN0SW5UaGVTeXN0ZW0oYW1vdW50KTsKICAgICAgICAgICAgZ29kQXV0b21hdGljQ29sbGVjdEZlZSgpOwogICAgICAgICAgICAvLyBBbGwgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgICAgICBwaWdneUJhbmsgKz0gYW1vdW50OwoKICAgICAgICAgICAgcm91bmQgKz0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlcy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgICBjaXRpemVuc0Ftb3VudHMucHVzaChhbW91bnQgKiAxMTAgLyAxMDApOwogICAgICAgICAgICB0b3RhbENpdGl6ZW5zICs9IDE7CiAgICAgICAgICAgIGludmVzdEluVGhlU3lzdGVtKGFtb3VudCk7CgogICAgICAgICAgICAvLyA1JSBnb2VzIHRvIHRoZSBQaWdneSBCYW5rCiAgICAgICAgICAgIHBpZ2d5QmFuayArPSAoYW1vdW50ICogNSAvIDEwMCk7CgogICAgICAgICAgICB3aGlsZSAoY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF0gPCAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlIC0gcGlnZ3lCYW5rIC0gZ29kQmFuayAtIGtpbmdCYW5rIC0gamVzdGVyQmFuaykgJiYgbGFzdENpdGl6ZW5QYWlkIDw9IHRvdGFsQ2l0aXplbnMpIHsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2xhc3RDaXRpemVuUGFpZF0uc2VuZChjaXRpemVuc0Ftb3VudHNbbGFzdENpdGl6ZW5QYWlkXSk7CiAgICAgICAgICAgICAgICBhbW91bnRBbHJlYWR5UGFpZEJhY2sgKz0gY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF07CiAgICAgICAgICAgICAgICBsYXN0Q2l0aXplblBhaWQgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbgogICAgZnVuY3Rpb24oKSB7CiAgICAgICAgcmVwYWlyVGhlQ2FzdGxlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gaW52ZXN0SW5UaGVTeXN0ZW0odWludCBhbW91bnQpIGludGVybmFsIHsKICAgICAgICAvLyBUaGUgQ2FzdGxlIGlzIHN0aWxsIHVwCiAgICAgICAgbGFzdENvbGxlY3Rpb24gPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgYW1vdW50SW52ZXN0ZWQgKz0gYW1vdW50OwogICAgICAgIC8vIFRoZSBKZXRzdGVyIHRha2VzIDUlCiAgICAgICAgamVzdGVyQmFuayArPSBhbW91bnQgKiA1IC8gMTAwOwogICAgICAgIC8vIFRoZSBtYWQga2luZyB0YWtlcyA1JQogICAgICAgIGtpbmdCYW5rICs9IGFtb3VudCAqIDUgLyAxMDA7CiAgICAgICAgLy8gNSUgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgIHBpZ2d5QmFuayArPSAoYW1vdW50ICogNSAvIDEwMCk7CgogICAgICAgIGtpbmdBdXRvbWF0aWNDb2xsZWN0RmVlKCk7CiAgICAgICAgamVzdGVyQXV0b21hdGljQ29sbGVjdEZlZSgpOwogICAgfQoKICAgIC8vIFdoZW4gdGhlIG1hZCBraW5nIGRlY2lkZXMgdG8gZ2l2ZSBoaXMgc2VhdCB0byBzb21lb25lIGVsc2UKICAgIC8vIHRoZSBraW5nIGNvc3Qgd2lsbCBiZSByZXNldCB0byAyIGV0aGVyCiAgICBmdW5jdGlvbiBuZXdLaW5nKGFkZHJlc3MgbmV3S2luZykgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG1hZEtpbmcpIHsKICAgICAgICAgICAgbWFkS2luZyA9IG5ld0tpbmc7CiAgICAgICAgICAgIGtpbmdDb3N0ID0gMSBldGhlcjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYnJpYmVyeSgpIHsKICAgICAgICB1aW50IGFtb3VudCA9IDEwMCBmaW5uZXk7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+PSBhbW91bnQpIHsKICAgICAgICAgICAgLy8gcmV0dXJuIGplc3RlcgogICAgICAgICAgICBqZXN0ZXIuc2VuZChqZXN0ZXJCYW5rKTsKICAgICAgICAgICAgamVzdGVyQmFuayA9IDA7CgogICAgICAgICAgICBqZXN0ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gYW1vdW50KTsKICAgICAgICAgICAgaW52ZXN0SW5UaGVTeXN0ZW0oYW1vdW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICB9CgogICAgLy8gQW55b25lIGNhbiB1c3VycGF0aW9uIHRoZSBraW5nc2hpcAogICAgZnVuY3Rpb24gdXN1cnBhdGlvbigpIHsKICAgICAgICAvLyBBZGQgbW9yZSBtb25leSBmb3Iga2luZyB1c3VycGF0aW9uIGNvc3QKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBtYWRLaW5nKSB7CiAgICAgICAgICAgIGludmVzdEluVGhlU3lzdGVtKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIGtpbmdDb3N0ICs9IG1zZy52YWx1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAob25UaHJvbmUgKyBQRUFDRV9QRVJJT0QgPD0gYmxvY2sudGltZXN0YW1wICYmIG1zZy52YWx1ZSA+PSBraW5nQ29zdCAqIDExMCAvIDEwMCkgewogICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBmZWVzIHRvIGJlZm9yZSBraW5nCiAgICAgICAgICAgICAgICBtYWRLaW5nLnNlbmQoa2luZ0JhbmspOwogICAgICAgICAgICAgICAgLy8gb2ZmZXIgc2FjcmlmaWNlcyB0byB0aGUgR29kcwogICAgICAgICAgICAgICAgZ29kQmFuayArPSBtc2cudmFsdWUgKiA1IC8gMTAwOwogICAgICAgICAgICAgICAgaW52ZXN0SW5UaGVTeXN0ZW0obXNnLnZhbHVlKTsKICAgICAgICAgICAgICAgIC8vIG5ldyBraW5nCiAgICAgICAgICAgICAgICBraW5nQ29zdCA9IG1zZy52YWx1ZTsKICAgICAgICAgICAgICAgIG1hZEtpbmcgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICAgICAgb25UaHJvbmUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBXaGVuIHRoZSBraW5nIGRlY2lkZXMgdG8gY29sbGVjdCBoaXMgZmVlcwogICAgZnVuY3Rpb24gY29sbGVjdEZlZSgpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSB0cnVlR29kcykgewogICAgICAgICAgICB0cnVlR29kcy5zZW5kKGdvZEJhbmspOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnb2RBdXRvbWF0aWNDb2xsZWN0RmVlKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChnb2RCYW5rID49IDEgZXRoZXIpIHsKICAgICAgICAgIHRydWVHb2RzLnNlbmQoZ29kQmFuayk7CiAgICAgICAgICBnb2RCYW5rID0gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24ga2luZ0F1dG9tYXRpY0NvbGxlY3RGZWUoKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKGtpbmdCYW5rID49IDEwMCBmaW5uZXkpIHsKICAgICAgICAgIG1hZEtpbmcuc2VuZChraW5nQmFuayk7CiAgICAgICAgICBraW5nQmFuayA9IDA7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGplc3RlckF1dG9tYXRpY0NvbGxlY3RGZWUoKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKGplc3RlckJhbmsgPj0gMTAwIGZpbm5leSkgewogICAgICAgICAgamVzdGVyLnNlbmQoamVzdGVyQmFuayk7CiAgICAgICAgICBqZXN0ZXJCYW5rID0gMDsKICAgICAgICB9CiAgICB9Cn0='.
	

]
