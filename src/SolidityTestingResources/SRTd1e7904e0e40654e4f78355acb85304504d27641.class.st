Class {
	#name : #SRTd1e7904e0e40654e4f78355acb85304504d27641,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd1e7904e0e40654e4f78355acb85304504d27641 >> base64 [
	^ ''.
	

]
