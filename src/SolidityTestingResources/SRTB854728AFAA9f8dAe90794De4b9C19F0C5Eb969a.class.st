Class {
	#name : #SRTB854728AFAA9f8dAe90794De4b9C19F0C5Eb969a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB854728AFAA9f8dAe90794De4b9C19F0C5Eb969a >> base64 [
	^ ''.
	

]
