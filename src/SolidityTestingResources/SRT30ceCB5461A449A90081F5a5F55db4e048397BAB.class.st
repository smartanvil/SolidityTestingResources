Class {
	#name : #SRT30ceCB5461A449A90081F5a5F55db4e048397BAB,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT30ceCB5461A449A90081F5a5F55db4e048397BAB >> base64 [
	^ ''.
	

]
