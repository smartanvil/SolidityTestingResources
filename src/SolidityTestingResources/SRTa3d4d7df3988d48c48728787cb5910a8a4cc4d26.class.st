Class {
	#name : #SRTa3d4d7df3988d48c48728787cb5910a8a4cc4d26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa3d4d7df3988d48c48728787cb5910a8a4cc4d26 >> base64 [
	^ ''.
	

]
