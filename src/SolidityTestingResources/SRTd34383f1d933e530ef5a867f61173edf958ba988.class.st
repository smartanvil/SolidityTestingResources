Class {
	#name : #SRTd34383f1d933e530ef5a867f61173edf958ba988,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd34383f1d933e530ef5a867f61173edf958ba988 >> base64 [
	^ ''.
	

]
