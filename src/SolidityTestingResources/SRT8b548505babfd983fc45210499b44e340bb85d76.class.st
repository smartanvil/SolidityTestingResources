Class {
	#name : #SRT8b548505babfd983fc45210499b44e340bb85d76,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b548505babfd983fc45210499b44e340bb85d76 >> base64 [
	^ ''.
	

]
