Class {
	#name : #SRTDB63D40C033D35E79CdbB21430f0FE10E9D97303,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTDB63D40C033D35E79CdbB21430f0FE10E9D97303 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogKiBPd25hYmxlCiAqCiAqIEJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lci4KICogUHJvdmlkZXMgb25seU93bmVyIG1vZGlmaWVyLCB3aGljaCBwcmV2ZW50cyBmdW5jdGlvbiBmcm9tIHJ1bm5pbmcgaWYgaXQgaXMgY2FsbGVkIGJ5IGFueW9uZSBvdGhlciB0aGFuIHRoZSBvd25lci4KICovCgpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgVG9rZW4gewoKICAgIC8vLyBAcmV0dXJuIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzdXBwbHkpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7fQoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX2FkZHJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2Ygd2VpIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHt9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKfQoKY29udHJhY3QgU2FmZU1hdGggewogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQp9Cgpjb250cmFjdCBWZXN0aW5nV2FsbGV0IGlzIE93bmFibGUsIFNhZmVNYXRoIHsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gVmVzdGluZ1NjaGVkdWxlKSBwdWJsaWMgc2NoZWR1bGVzOyAgICAgICAgLy8gdmVzdGluZyBzY2hlZHVsZXMgZm9yIGdpdmVuIGFkZHJlc3NlcwogICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3MpIHB1YmxpYyBhZGRyZXNzQ2hhbmdlUmVxdWVzdHM7ICAgIC8vIHJlcXVlc3RlZCBhZGRyZXNzIGNoYW5nZXMKCiAgICBUb2tlbiB2ZXN0aW5nVG9rZW47CgogICAgZXZlbnQgVmVzdGluZ1NjaGVkdWxlUmVnaXN0ZXJlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcmVnaXN0ZXJlZEFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBkZXBvc2l0b3IsCiAgICAgICAgdWludCBzdGFydFRpbWVJblNlYywKICAgICAgICB1aW50IGNsaWZmVGltZUluU2VjLAogICAgICAgIHVpbnQgZW5kVGltZUluU2VjLAogICAgICAgIHVpbnQgdG90YWxBbW91bnQKICAgICk7CiAgICBldmVudCBWZXN0aW5nU2NoZWR1bGVDb25maXJtZWQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHJlZ2lzdGVyZWRBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgZGVwb3NpdG9yLAogICAgICAgIHVpbnQgc3RhcnRUaW1lSW5TZWMsCiAgICAgICAgdWludCBjbGlmZlRpbWVJblNlYywKICAgICAgICB1aW50IGVuZFRpbWVJblNlYywKICAgICAgICB1aW50IHRvdGFsQW1vdW50CiAgICApOwogICAgZXZlbnQgV2l0aGRyYXdhbChhZGRyZXNzIGluZGV4ZWQgcmVnaXN0ZXJlZEFkZHJlc3MsIHVpbnQgYW1vdW50V2l0aGRyYXduKTsKICAgIGV2ZW50IFZlc3RpbmdFbmRlZEJ5T3duZXIoYWRkcmVzcyBpbmRleGVkIHJlZ2lzdGVyZWRBZGRyZXNzLCB1aW50IGFtb3VudFdpdGhkcmF3biwgdWludCBhbW91bnRSZWZ1bmRlZCk7CiAgICBldmVudCBBZGRyZXNzQ2hhbmdlUmVxdWVzdGVkKGFkZHJlc3MgaW5kZXhlZCBvbGRSZWdpc3RlcmVkQWRkcmVzcywgYWRkcmVzcyBpbmRleGVkIG5ld1JlZ2lzdGVyZWRBZGRyZXNzKTsKICAgIGV2ZW50IEFkZHJlc3NDaGFuZ2VDb25maXJtZWQoYWRkcmVzcyBpbmRleGVkIG9sZFJlZ2lzdGVyZWRBZGRyZXNzLCBhZGRyZXNzIGluZGV4ZWQgbmV3UmVnaXN0ZXJlZEFkZHJlc3MpOwoKICAgIHN0cnVjdCBWZXN0aW5nU2NoZWR1bGUgewogICAgICAgIHVpbnQgc3RhcnRUaW1lSW5TZWM7CiAgICAgICAgdWludCBjbGlmZlRpbWVJblNlYzsKICAgICAgICB1aW50IGVuZFRpbWVJblNlYzsKICAgICAgICB1aW50IHRvdGFsQW1vdW50OwogICAgICAgIHVpbnQgdG90YWxBbW91bnRXaXRoZHJhd247CiAgICAgICAgYWRkcmVzcyBkZXBvc2l0b3I7CiAgICAgICAgYm9vbCBpc0NvbmZpcm1lZDsKICAgIH0KCiAgICBtb2RpZmllciBhZGRyZXNzUmVnaXN0ZXJlZChhZGRyZXNzIHRhcmdldCkgewogICAgICAgIFZlc3RpbmdTY2hlZHVsZSBzdG9yYWdlIHZlc3RpbmdTY2hlZHVsZSA9IHNjaGVkdWxlc1t0YXJnZXRdOwogICAgICAgIHJlcXVpcmUodmVzdGluZ1NjaGVkdWxlLmRlcG9zaXRvciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGFkZHJlc3NOb3RSZWdpc3RlcmVkKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICAgICAgVmVzdGluZ1NjaGVkdWxlIHN0b3JhZ2UgdmVzdGluZ1NjaGVkdWxlID0gc2NoZWR1bGVzW3RhcmdldF07CiAgICAgICAgcmVxdWlyZSh2ZXN0aW5nU2NoZWR1bGUuZGVwb3NpdG9yID09IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmVzdGluZ1NjaGVkdWxlQ29uZmlybWVkKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICAgICAgVmVzdGluZ1NjaGVkdWxlIHN0b3JhZ2UgdmVzdGluZ1NjaGVkdWxlID0gc2NoZWR1bGVzW3RhcmdldF07CiAgICAgICAgcmVxdWlyZSh2ZXN0aW5nU2NoZWR1bGUuaXNDb25maXJtZWQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmVzdGluZ1NjaGVkdWxlTm90Q29uZmlybWVkKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICAgICAgVmVzdGluZ1NjaGVkdWxlIHN0b3JhZ2UgdmVzdGluZ1NjaGVkdWxlID0gc2NoZWR1bGVzW3RhcmdldF07CiAgICAgICAgcmVxdWlyZSghdmVzdGluZ1NjaGVkdWxlLmlzQ29uZmlybWVkKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHBlbmRpbmdBZGRyZXNzQ2hhbmdlUmVxdWVzdChhZGRyZXNzIHRhcmdldCkgewogICAgICAgIHJlcXVpcmUoYWRkcmVzc0NoYW5nZVJlcXVlc3RzW3RhcmdldF0gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBwYXN0Q2xpZmZUaW1lKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICAgICAgVmVzdGluZ1NjaGVkdWxlIHN0b3JhZ2UgdmVzdGluZ1NjaGVkdWxlID0gc2NoZWR1bGVzW3RhcmdldF07CiAgICAgICAgcmVxdWlyZShibG9jay50aW1lc3RhbXAgPiB2ZXN0aW5nU2NoZWR1bGUuY2xpZmZUaW1lSW5TZWMpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRWZXN0aW5nU2NoZWR1bGVUaW1lcyh1aW50IHN0YXJ0VGltZUluU2VjLCB1aW50IGNsaWZmVGltZUluU2VjLCB1aW50IGVuZFRpbWVJblNlYykgewogICAgICAgIHJlcXVpcmUoY2xpZmZUaW1lSW5TZWMgPj0gc3RhcnRUaW1lSW5TZWMpOwogICAgICAgIHJlcXVpcmUoZW5kVGltZUluU2VjID49IGNsaWZmVGltZUluU2VjKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGFkZHJlc3NOb3ROdWxsKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICAgICAgcmVxdWlyZSh0YXJnZXQgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgdmVzdGluZyB0b2tlbiB0byB0aGUgd2FsbGV0LgogICAgLy8vIEBwYXJhbSBfdmVzdGluZ1Rva2VuIFRva2VuIHRoYXQgd2lsbCBiZSB2ZXN0ZWQuCiAgICBmdW5jdGlvbiBWZXN0aW5nV2FsbGV0KGFkZHJlc3MgX3Zlc3RpbmdUb2tlbikgewogICAgICAgIHZlc3RpbmdUb2tlbiA9IFRva2VuKF92ZXN0aW5nVG9rZW4pOwogICAgfQoKICAgIC8vLyBAZGV2IFJlZ2lzdGVycyBhIHZlc3Rpbmcgc2NoZWR1bGUgdG8gYW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX2FkZHJlc3NUb1JlZ2lzdGVyIFRoZSBhZGRyZXNzIHRoYXQgaXMgYWxsb3dlZCB0byB3aXRoZHJhdyB2ZXN0ZWQgdG9rZW5zIGZvciB0aGlzIHNjaGVkdWxlLgogICAgLy8vIEBwYXJhbSBfZGVwb3NpdG9yIEFkZHJlc3MgdGhhdCB3aWxsIGJlIGRlcG9zaXRpbmcgdmVzdGluZyB0b2tlbi4KICAgIC8vLyBAcGFyYW0gX3N0YXJ0VGltZUluU2VjIFRoZSB0aW1lIGluIHNlY29uZHMgdGhhdCB2ZXN0aW5nIGJlZ2FuLgogICAgLy8vIEBwYXJhbSBfY2xpZmZUaW1lSW5TZWMgVGhlIHRpbWUgaW4gc2Vjb25kcyB0aGF0IHRva2VucyBiZWNvbWUgd2l0aGRyYXdhYmxlLgogICAgLy8vIEBwYXJhbSBfZW5kVGltZUluU2VjIFRoZSB0aW1lIGluIHNlY29uZHMgdGhhdCB2ZXN0aW5nIGVuZHMuCiAgICAvLy8gQHBhcmFtIF90b3RhbEFtb3VudCBUaGUgdG90YWwgYW1vdW50IG9mIHRva2VucyB0aGF0IHRoZSByZWdpc3RlcmVkIGFkZHJlc3MgY2FuIHdpdGhkcmF3IGJ5IHRoZSBlbmQgb2YgdGhlIHZlc3RpbmcgcGVyaW9kLgogICAgZnVuY3Rpb24gcmVnaXN0ZXJWZXN0aW5nU2NoZWR1bGUoCiAgICAgICAgYWRkcmVzcyBfYWRkcmVzc1RvUmVnaXN0ZXIsCiAgICAgICAgYWRkcmVzcyBfZGVwb3NpdG9yLAogICAgICAgIHVpbnQgX3N0YXJ0VGltZUluU2VjLAogICAgICAgIHVpbnQgX2NsaWZmVGltZUluU2VjLAogICAgICAgIHVpbnQgX2VuZFRpbWVJblNlYywKICAgICAgICB1aW50IF90b3RhbEFtb3VudAogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgICAgIGFkZHJlc3NOb3ROdWxsKF9kZXBvc2l0b3IpCiAgICAgICAgdmVzdGluZ1NjaGVkdWxlTm90Q29uZmlybWVkKF9hZGRyZXNzVG9SZWdpc3RlcikKICAgICAgICB2YWxpZFZlc3RpbmdTY2hlZHVsZVRpbWVzKF9zdGFydFRpbWVJblNlYywgX2NsaWZmVGltZUluU2VjLCBfZW5kVGltZUluU2VjKQogICAgewogICAgICAgIHNjaGVkdWxlc1tfYWRkcmVzc1RvUmVnaXN0ZXJdID0gVmVzdGluZ1NjaGVkdWxlKHsKICAgICAgICAgICAgc3RhcnRUaW1lSW5TZWM6IF9zdGFydFRpbWVJblNlYywKICAgICAgICAgICAgY2xpZmZUaW1lSW5TZWM6IF9jbGlmZlRpbWVJblNlYywKICAgICAgICAgICAgZW5kVGltZUluU2VjOiBfZW5kVGltZUluU2VjLAogICAgICAgICAgICB0b3RhbEFtb3VudDogX3RvdGFsQW1vdW50LAogICAgICAgICAgICB0b3RhbEFtb3VudFdpdGhkcmF3bjogMCwKICAgICAgICAgICAgZGVwb3NpdG9yOiBfZGVwb3NpdG9yLAogICAgICAgICAgICBpc0NvbmZpcm1lZDogZmFsc2UKICAgICAgICB9KTsKCiAgICAgICAgVmVzdGluZ1NjaGVkdWxlUmVnaXN0ZXJlZCgKICAgICAgICAgICAgX2FkZHJlc3NUb1JlZ2lzdGVyLAogICAgICAgICAgICBfZGVwb3NpdG9yLAogICAgICAgICAgICBfc3RhcnRUaW1lSW5TZWMsCiAgICAgICAgICAgIF9jbGlmZlRpbWVJblNlYywKICAgICAgICAgICAgX2VuZFRpbWVJblNlYywKICAgICAgICAgICAgX3RvdGFsQW1vdW50CiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gQGRldiBDb25maXJtcyBhIHZlc3Rpbmcgc2NoZWR1bGUgYW5kIGRlcG9zaXRzIG5lY2Vzc2FyeSB0b2tlbnMuIFRocm93cyBpZiBkZXBvc2l0IGZhaWxzIG9yIHNjaGVkdWxlcyBkbyBub3QgbWF0Y2guCiAgICAvLy8gQHBhcmFtIF9zdGFydFRpbWVJblNlYyBUaGUgdGltZSBpbiBzZWNvbmRzIHRoYXQgdmVzdGluZyBiZWdhbi4KICAgIC8vLyBAcGFyYW0gX2NsaWZmVGltZUluU2VjIFRoZSB0aW1lIGluIHNlY29uZHMgdGhhdCB0b2tlbnMgYmVjb21lIHdpdGhkcmF3YWJsZS4KICAgIC8vLyBAcGFyYW0gX2VuZFRpbWVJblNlYyBUaGUgdGltZSBpbiBzZWNvbmRzIHRoYXQgdmVzdGluZyBlbmRzLgogICAgLy8vIEBwYXJhbSBfdG90YWxBbW91bnQgVGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgdGhhdCB0aGUgcmVnaXN0ZXJlZCBhZGRyZXNzIGNhbiB3aXRoZHJhdyBieSB0aGUgZW5kIG9mIHRoZSB2ZXN0aW5nIHBlcmlvZC4KICAgIGZ1bmN0aW9uIGNvbmZpcm1WZXN0aW5nU2NoZWR1bGUoCiAgICAgICAgdWludCBfc3RhcnRUaW1lSW5TZWMsCiAgICAgICAgdWludCBfY2xpZmZUaW1lSW5TZWMsCiAgICAgICAgdWludCBfZW5kVGltZUluU2VjLAogICAgICAgIHVpbnQgX3RvdGFsQW1vdW50CiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgYWRkcmVzc1JlZ2lzdGVyZWQobXNnLnNlbmRlcikKICAgICAgICB2ZXN0aW5nU2NoZWR1bGVOb3RDb25maXJtZWQobXNnLnNlbmRlcikKICAgIHsKICAgICAgICBWZXN0aW5nU2NoZWR1bGUgc3RvcmFnZSB2ZXN0aW5nU2NoZWR1bGUgPSBzY2hlZHVsZXNbbXNnLnNlbmRlcl07CgogICAgICAgIHJlcXVpcmUodmVzdGluZ1NjaGVkdWxlLnN0YXJ0VGltZUluU2VjID09IF9zdGFydFRpbWVJblNlYyk7CiAgICAgICAgcmVxdWlyZSh2ZXN0aW5nU2NoZWR1bGUuY2xpZmZUaW1lSW5TZWMgPT0gX2NsaWZmVGltZUluU2VjKTsKICAgICAgICByZXF1aXJlKHZlc3RpbmdTY2hlZHVsZS5lbmRUaW1lSW5TZWMgPT0gX2VuZFRpbWVJblNlYyk7CiAgICAgICAgcmVxdWlyZSh2ZXN0aW5nU2NoZWR1bGUudG90YWxBbW91bnQgPT0gX3RvdGFsQW1vdW50KTsKCiAgICAgICAgdmVzdGluZ1NjaGVkdWxlLmlzQ29uZmlybWVkID0gdHJ1ZTsKICAgICAgICByZXF1aXJlKHZlc3RpbmdUb2tlbi50cmFuc2ZlckZyb20odmVzdGluZ1NjaGVkdWxlLmRlcG9zaXRvciwgYWRkcmVzcyh0aGlzKSwgX3RvdGFsQW1vdW50KSk7CgogICAgICAgIFZlc3RpbmdTY2hlZHVsZUNvbmZpcm1lZCgKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgdmVzdGluZ1NjaGVkdWxlLmRlcG9zaXRvciwKICAgICAgICAgICAgX3N0YXJ0VGltZUluU2VjLAogICAgICAgICAgICBfY2xpZmZUaW1lSW5TZWMsCiAgICAgICAgICAgIF9lbmRUaW1lSW5TZWMsCiAgICAgICAgICAgIF90b3RhbEFtb3VudAogICAgICAgICk7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGEgcmVnaXN0ZXJlZCBhZGRyZXNzIHRvIHdpdGhkcmF3IHRva2VucyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHZlc3RlZC4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkKICAgICAgICBwdWJsaWMKICAgICAgICB2ZXN0aW5nU2NoZWR1bGVDb25maXJtZWQobXNnLnNlbmRlcikKICAgICAgICBwYXN0Q2xpZmZUaW1lKG1zZy5zZW5kZXIpCiAgICB7CiAgICAgICAgVmVzdGluZ1NjaGVkdWxlIHN0b3JhZ2UgdmVzdGluZ1NjaGVkdWxlID0gc2NoZWR1bGVzW21zZy5zZW5kZXJdOwoKICAgICAgICB1aW50IHRvdGFsQW1vdW50VmVzdGVkID0gZ2V0VG90YWxBbW91bnRWZXN0ZWQodmVzdGluZ1NjaGVkdWxlKTsKICAgICAgICB1aW50IGFtb3VudFdpdGhkcmF3YWJsZSA9IHNhZmVTdWIodG90YWxBbW91bnRWZXN0ZWQsIHZlc3RpbmdTY2hlZHVsZS50b3RhbEFtb3VudFdpdGhkcmF3bik7CiAgICAgICAgdmVzdGluZ1NjaGVkdWxlLnRvdGFsQW1vdW50V2l0aGRyYXduID0gdG90YWxBbW91bnRWZXN0ZWQ7CgogICAgICAgIGlmIChhbW91bnRXaXRoZHJhd2FibGUgPiAwKSB7CiAgICAgICAgICAgIHJlcXVpcmUodmVzdGluZ1Rva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudFdpdGhkcmF3YWJsZSkpOwogICAgICAgICAgICBXaXRoZHJhd2FsKG1zZy5zZW5kZXIsIGFtb3VudFdpdGhkcmF3YWJsZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBjb250cmFjdCBvd25lciB0byB0ZXJtaW5hdGUgYSB2ZXN0aW5nIHNjaGVkdWxlLCB0cmFuc2ZlcmluZyByZW1haW5pbmcgdmVzdGVkIHRva2VucyB0byB0aGUgcmVnaXN0ZXJlZCBhZGRyZXNzIGFuZCByZWZ1bmRpbmcgb3duZXIgd2l0aCByZW1haW5pbmcgdG9rZW5zLgogICAgLy8vIEBwYXJhbSBfYWRkcmVzc1RvRW5kIEFkZHJlc3MgdGhhdCBpcyBjdXJyZW50bHkgcmVnaXN0ZXJlZCB0byB0aGUgdmVzdGluZyBzY2hlZHVsZSB0aGF0IHdpbGwgYmUgY2xvc2VkLgogICAgLy8vIEBwYXJhbSBfYWRkcmVzc1RvUmVmdW5kIEFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdW52ZXN0ZWQgdG9rZW5zLgogICAgZnVuY3Rpb24gZW5kVmVzdGluZyhhZGRyZXNzIF9hZGRyZXNzVG9FbmQsIGFkZHJlc3MgX2FkZHJlc3NUb1JlZnVuZCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgICAgICB2ZXN0aW5nU2NoZWR1bGVDb25maXJtZWQoX2FkZHJlc3NUb0VuZCkKICAgICAgICBhZGRyZXNzTm90TnVsbChfYWRkcmVzc1RvUmVmdW5kKQogICAgewogICAgICAgIFZlc3RpbmdTY2hlZHVsZSBzdG9yYWdlIHZlc3RpbmdTY2hlZHVsZSA9IHNjaGVkdWxlc1tfYWRkcmVzc1RvRW5kXTsKCiAgICAgICAgdWludCBhbW91bnRXaXRoZHJhd2FibGUgPSAwOwogICAgICAgIHVpbnQgYW1vdW50UmVmdW5kYWJsZSA9IDA7CgogICAgICAgIGlmIChibG9jay50aW1lc3RhbXAgPCB2ZXN0aW5nU2NoZWR1bGUuY2xpZmZUaW1lSW5TZWMpIHsKICAgICAgICAgICAgYW1vdW50UmVmdW5kYWJsZSA9IHZlc3RpbmdTY2hlZHVsZS50b3RhbEFtb3VudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50IHRvdGFsQW1vdW50VmVzdGVkID0gZ2V0VG90YWxBbW91bnRWZXN0ZWQodmVzdGluZ1NjaGVkdWxlKTsKICAgICAgICAgICAgYW1vdW50V2l0aGRyYXdhYmxlID0gc2FmZVN1Yih0b3RhbEFtb3VudFZlc3RlZCwgdmVzdGluZ1NjaGVkdWxlLnRvdGFsQW1vdW50V2l0aGRyYXduKTsKICAgICAgICAgICAgYW1vdW50UmVmdW5kYWJsZSA9IHNhZmVTdWIodmVzdGluZ1NjaGVkdWxlLnRvdGFsQW1vdW50LCB0b3RhbEFtb3VudFZlc3RlZCk7CiAgICAgICAgfQoKICAgICAgICBkZWxldGUgc2NoZWR1bGVzW19hZGRyZXNzVG9FbmRdOwogICAgICAgIHJlcXVpcmUoYW1vdW50V2l0aGRyYXdhYmxlID09IDAgfHwgdmVzdGluZ1Rva2VuLnRyYW5zZmVyKF9hZGRyZXNzVG9FbmQsIGFtb3VudFdpdGhkcmF3YWJsZSkpOwogICAgICAgIHJlcXVpcmUoYW1vdW50UmVmdW5kYWJsZSA9PSAwIHx8IHZlc3RpbmdUb2tlbi50cmFuc2ZlcihfYWRkcmVzc1RvUmVmdW5kLCBhbW91bnRSZWZ1bmRhYmxlKSk7CgogICAgICAgIFZlc3RpbmdFbmRlZEJ5T3duZXIoX2FkZHJlc3NUb0VuZCwgYW1vdW50V2l0aGRyYXdhYmxlLCBhbW91bnRSZWZ1bmRhYmxlKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYSByZWdpc3RlcmVkIGFkZHJlc3MgdG8gcmVxdWVzdCBhbiBhZGRyZXNzIGNoYW5nZS4KICAgIC8vLyBAcGFyYW0gX25ld1JlZ2lzdGVyZWRBZGRyZXNzIERlc2lyZWQgYWRkcmVzcyB0byB1cGRhdGUgdG8uCiAgICBmdW5jdGlvbiByZXF1ZXN0QWRkcmVzc0NoYW5nZShhZGRyZXNzIF9uZXdSZWdpc3RlcmVkQWRkcmVzcykKICAgICAgICBwdWJsaWMKICAgICAgICB2ZXN0aW5nU2NoZWR1bGVDb25maXJtZWQobXNnLnNlbmRlcikKICAgICAgICBhZGRyZXNzTm90UmVnaXN0ZXJlZChfbmV3UmVnaXN0ZXJlZEFkZHJlc3MpCiAgICAgICAgYWRkcmVzc05vdE51bGwoX25ld1JlZ2lzdGVyZWRBZGRyZXNzKQogICAgewogICAgICAgIGFkZHJlc3NDaGFuZ2VSZXF1ZXN0c1ttc2cuc2VuZGVyXSA9IF9uZXdSZWdpc3RlcmVkQWRkcmVzczsKICAgICAgICBBZGRyZXNzQ2hhbmdlUmVxdWVzdGVkKG1zZy5zZW5kZXIsIF9uZXdSZWdpc3RlcmVkQWRkcmVzcyk7CiAgICB9CgogICAgLy8vIEBkZXYgQ29uZmlybSBhbiBhZGRyZXNzIGNoYW5nZSBhbmQgbWlncmF0ZSB2ZXN0aW5nIHNjaGVkdWxlIHRvIG5ldyBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb2xkUmVnaXN0ZXJlZEFkZHJlc3MgQ3VycmVudCByZWdpc3RlcmVkIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9uZXdSZWdpc3RlcmVkQWRkcmVzcyBBZGRyZXNzIHRvIG1pZ3JhdGUgdmVzdGluZyBzY2hlZHVsZSB0by4KICAgIGZ1bmN0aW9uIGNvbmZpcm1BZGRyZXNzQ2hhbmdlKGFkZHJlc3MgX29sZFJlZ2lzdGVyZWRBZGRyZXNzLCBhZGRyZXNzIF9uZXdSZWdpc3RlcmVkQWRkcmVzcykKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgICAgICBwZW5kaW5nQWRkcmVzc0NoYW5nZVJlcXVlc3QoX29sZFJlZ2lzdGVyZWRBZGRyZXNzKQogICAgICAgIGFkZHJlc3NOb3RSZWdpc3RlcmVkKF9uZXdSZWdpc3RlcmVkQWRkcmVzcykKICAgIHsKICAgICAgICBhZGRyZXNzIG5ld1JlZ2lzdGVyZWRBZGRyZXNzID0gYWRkcmVzc0NoYW5nZVJlcXVlc3RzW19vbGRSZWdpc3RlcmVkQWRkcmVzc107CiAgICAgICAgcmVxdWlyZShuZXdSZWdpc3RlcmVkQWRkcmVzcyA9PSBfbmV3UmVnaXN0ZXJlZEFkZHJlc3MpOyAgICAvLyBwcmV2ZW50cyByYWNlIGNvbmRpdGlvbgoKICAgICAgICBWZXN0aW5nU2NoZWR1bGUgbWVtb3J5IHZlc3RpbmdTY2hlZHVsZSA9IHNjaGVkdWxlc1tfb2xkUmVnaXN0ZXJlZEFkZHJlc3NdOwogICAgICAgIHNjaGVkdWxlc1tuZXdSZWdpc3RlcmVkQWRkcmVzc10gPSB2ZXN0aW5nU2NoZWR1bGU7CgogICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbX29sZFJlZ2lzdGVyZWRBZGRyZXNzXTsKICAgICAgICBkZWxldGUgYWRkcmVzc0NoYW5nZVJlcXVlc3RzW19vbGRSZWdpc3RlcmVkQWRkcmVzc107CgogICAgICAgIEFkZHJlc3NDaGFuZ2VDb25maXJtZWQoX29sZFJlZ2lzdGVyZWRBZGRyZXNzLCBfbmV3UmVnaXN0ZXJlZEFkZHJlc3MpOwogICAgfQoKICAgIC8vLyBAZGV2IENhbGN1bGF0ZXMgdGhlIHRvdGFsIHRva2VucyB0aGF0IGhhdmUgYmVlbiB2ZXN0ZWQgZm9yIGEgdmVzdGluZyBzY2hlZHVsZSwgYXNzdW1pbmcgdGhlIHNjaGVkdWxlIGlzIHBhc3QgdGhlIGNsaWZmLgogICAgLy8vIEBwYXJhbSB2ZXN0aW5nU2NoZWR1bGUgVmVzdGluZyBzY2hlZHVsZSB1c2VkIHRvIGNhbGN1bGF0ZSB2ZXN0ZWQgdG9rZW5zLgogICAgLy8vIEByZXR1cm4gVG90YWwgdG9rZW5zIHZlc3RlZCBmb3IgYSB2ZXN0aW5nIHNjaGVkdWxlLgogICAgZnVuY3Rpb24gZ2V0VG90YWxBbW91bnRWZXN0ZWQoVmVzdGluZ1NjaGVkdWxlIHZlc3RpbmdTY2hlZHVsZSkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA+PSB2ZXN0aW5nU2NoZWR1bGUuZW5kVGltZUluU2VjKSByZXR1cm4gdmVzdGluZ1NjaGVkdWxlLnRvdGFsQW1vdW50OwoKICAgICAgICB1aW50IHRpbWVTaW5jZVN0YXJ0SW5TZWMgPSBzYWZlU3ViKGJsb2NrLnRpbWVzdGFtcCwgdmVzdGluZ1NjaGVkdWxlLnN0YXJ0VGltZUluU2VjKTsKICAgICAgICB1aW50IHRvdGFsVmVzdGluZ1RpbWVJblNlYyA9IHNhZmVTdWIodmVzdGluZ1NjaGVkdWxlLmVuZFRpbWVJblNlYywgdmVzdGluZ1NjaGVkdWxlLnN0YXJ0VGltZUluU2VjKTsKICAgICAgICB1aW50IHRvdGFsQW1vdW50VmVzdGVkID0gc2FmZURpdigKICAgICAgICAgICAgc2FmZU11bCh0aW1lU2luY2VTdGFydEluU2VjLCB2ZXN0aW5nU2NoZWR1bGUudG90YWxBbW91bnQpLAogICAgICAgICAgICB0b3RhbFZlc3RpbmdUaW1lSW5TZWMKICAgICAgICApOwoKICAgICAgICByZXR1cm4gdG90YWxBbW91bnRWZXN0ZWQ7CiAgICB9Cn0='.
	

]
