Class {
	#name : #SRT53ebb10ca7f91e6c90d7ce9249cea70e75948b16,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53ebb10ca7f91e6c90d7ce9249cea70e75948b16 >> base64 [
	^ ''.
	

]
