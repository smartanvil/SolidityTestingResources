Class {
	#name : #SRT27c60fa0fc81fddd5be37c62cfaf88c0af7143ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT27c60fa0fc81fddd5be37c62cfaf88c0af7143ff >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8vICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gUE9XVG9rZW4gU3RvcmFnZS4KLy8gQ29udHJhY3QgaW4gYWRkcmVzcyBQb3dlckxpbmVVcFN0b3JhZ2UuZXRoCi8vIFN0b3JhZ2UgZm9yIDMwLDAwMCwwMDAgaW4tcGxhdGZvcm0gTU9ZVG9rZW5zLiAKLy8gVG9rZW5zIG9ubHkgYXZhaWxhYmxlIHRocm91Z2ggbWluaW5nLCBzdGFja2luZyBhbmQgdG91cm5hbWVudHMgaW4tcGxhdGZvcm0gdGhyb3VnaCBzbWFydCBjb250cmFjdHMuCi8vIFByb3llY3QgbXVzdCBoYXZlIGVub3VnaCBmdW5kcyBwcm92aWRlZCBieSBQb3dlckxpbmVVcCBhbmQgcGFydG5lcnMgdG8gcmVhbGVhc2UgdG9rZW5zLiAKLy8gVGhpcyBDb250cmFjdCBzdG9yZXMgdGhlIHRva2VuIGFuZCBrZWVwcyByZWNvcmQgb2Ygb3duIGZ1bmRpbmcgYnkgUG93ZXJMaW5lVXAgYW5kIHBhcnRuZXJzLiAKLy8gRm9yIE9wZW4gRGlzdHJpYnV0aW9uIHJlZmVyIHRvIGNvbnRyYWN0IGF0IHBvd2Nyb3dkc2FsZS5ldGggKHdpbGwgYmUgbGF1bmNoZWQgb25seSBpZiBvd24gZnVuZGluZyAoUHJlU2FsZSkgb2YgcHJveWVjdCBzdWNjZWVkcy4pCi8vIEFsbCBvcGVyYXRpb25zIGNhbiBiZSBtb25pdG9yZWQgYXQgZXRoZXJzY2FuLmlvCgovLyAqKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCBzYWZlTWF0aCB7CiAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIHNhZmVBc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHNhZmVBc3NlcnQoYiA+IDApOwogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICBzYWZlQXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVTdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgc2FmZUFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHNhZmVBc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgcHVyZSB7CiAgICBpZiAoIWFzc2VydGlvbikgcmV2ZXJ0KCk7CiAgfQp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIG93bmVkLCBzYWZlTWF0aCB7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBNb3lUb2tlblN0b3JhZ2UgaXMgb3duZWQsIHNhZmVNYXRoIHsKICAvLyBvd25lci9hZG1pbiAmIHRva2VuIHJld2FyZAogIGFkZHJlc3MgICAgICAgIHB1YmxpYyBhZG1pbiA9IG93bmVyOyAgIC8vYWRtaW4gYWRkcmVzcwogIFN0YW5kYXJkVG9rZW4gIHB1YmxpYyB0b2tlbkNvbnRyYWN0OyAgICAgLy8gYWRkcmVzcyBvZiBNb2liZVRWIE1PWSBFUkMyMCBTdGFuZGFyZCBUb2tlbi4KCiAgLy8gbG9vcCBjb250cm9sIGFuZCBsaW1pdGVycyBmb3IgZnVuZGluZyBwcm95ZWN0IGFuZCBtaW5lYWJsZSB0b2tlbnMgdGhyb3VnaCBwcmVzYWxlLgoKICBzdHJpbmcgIHB1YmxpYyBDdXJyZW50U3RhdHVzID0gIiI7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IHByZVNhbGUgc3RhdHVzCiAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0YXJ0QmxvY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlU2FsZSBzdGFydCBibG9jayMKICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nRW5kQmxvY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVTYWxlIGVuZCBibG9jayMKICB1aW50MjU2IHB1YmxpYyBzdWNjZXNzQXRCbG9jazsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcHJpdmF0ZSBmdW5kaW5nIHN1Y2NlZWQgYXQgdGhpcyBibG9jay4gQWxsIGluLXBsYXRmb3JtIHRva2VucyBiYWNrZWQuCiAgdWludDI1NiBwdWJsaWMgYW1vdW50UmFpc2VkSW5Vc2Q7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbW91bnQgcmFpc2VkIGluIFVTRCBmb3IgdG9rZW5zIGJhY2tpbmcuIAogIHVpbnQyNTYgcHVibGljIHRva2Vuc1BlckV0aEF0UmVndWxhclByaWNlOyAKICBib29sIHB1YmxpYyBzdWNjZXNzZnVsUHJlU2FsZTsgCiAgICAgICAgIAogIAoKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsgCiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgQnV5KGFkZHJlc3MgaW5kZXhlZCBfc2VuZGVyLCB1aW50MjU2IF9ldGgsIHVpbnQyNTYgX01PWSk7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzQXJyYXk7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGZ1bmRWYWx1ZTsKCiAgLy8gZGVmYXVsdCBmdW5jdGlvbiwgbWFwIGFkbWluCiAgZnVuY3Rpb24gTW95VG9rZW5TdG9yYWdlKCkgcHVibGljIG9ubHlPd25lciB7CiAgICBhZG1pbiA9IG1zZy5zZW5kZXI7CiAgICBDdXJyZW50U3RhdHVzID0gIkluLVBsYXRmb3JtIFBPVyBUb2tlbnMgU3RvcmFnZSBSZWxlYXNlZCI7CiAgfQoKICAKICAvLyBzZXR1cCB0aGUgUHJlU2FsZSBwYXJhbWV0ZXJzCiAgZnVuY3Rpb24gc2V0dXBTdG9yYWdlKHVpbnQyNTYgX2Z1bmRpbmdTdGFydEJsb2NrLCB1aW50MjU2IF9mdW5kaW5nRW5kQmxvY2spIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYnl0ZXMzMiByZXNwb25zZSkgewogICAgICAKICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYWRtaW4pCiAgICAgIHsKICAgICAgICAgIHRva2VuQ29udHJhY3QgPSBTdGFuZGFyZFRva2VuKDB4MmVhMUVBOTQxOUExMjY2NzNEMWJCRmRmRTgyNTI0ZWE5RTZGODQ4Qik7ICAvL01PWXRva2VuIFNtYXJ0IENvbnRyYWN0LgogICAgICAgICAgdG9rZW5zUGVyRXRoQXRSZWd1bGFyUHJpY2UgPSAxMDAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9SZWd1bGFyIFByaWNlIDEgRVRIID0gMTAwMCBNT1kgaW4tcGxhdGZvcm0uVmFsdWUgdG8gY2FsY3VsYXRlIHByb3llY3QgZnVuZGluZy4KICAgICAgICAgIGFtb3VudFJhaXNlZEluVXNkID0gMDsKCiAgICAgICAgICBmdW5kaW5nU3RhcnRCbG9jayA9IF9mdW5kaW5nU3RhcnRCbG9jazsKICAgICAgICAgIGZ1bmRpbmdFbmRCbG9jayA9IF9mdW5kaW5nRW5kQmxvY2s7CiAgICAgICAgICAgICAgICAKICAgICAgICAgIEN1cnJlbnRTdGF0dXMgPSAiRnVuZGluZCBvZiBQcm95ZWN0IGluIFByb2Nlc3MiOwogICAgICAgICAgLy9Qb3dlckxpbmVVcCBpcyBmdW5kaW5nIHRoZSBwcm95ZWN0IHRvIGJlIGFibGUgdG8gbGF1bmNoIHRoZSB0b2tlbnMuIAogICAgICAgICAgCiAgICAgICAgICByZXR1cm4gIlN0b3JhZ2UgaXMgc2V0dXAuIjsKCiAgICAgIH0gZWxzZSBpZiAobXNnLnNlbmRlciAhPSBhZG1pbikgewogICAgICAgICAgcmV0dXJuICJOb3QgQXV0aG9yaXplZCI7CiAgICAgIH0gZWxzZSAgewogICAgICAgICAgcmV0dXJuICJTZXR1cCBjYW5ub3QgYmUgY2hhbmdlZC4iOwogICAgICB9CiAgICB9CgogIC8vIHNldHVwIHN1Y2Nlc3MgcGFyYW1ldGVycyBpZiBwcm95ZWN0IGZ1bmRpbmcgc3VjY2VlZC4gCiAgZnVuY3Rpb24gRnVuZGluZ0NvbXBsZXRlZCh1aW50MjU2IF9hbW91bnRSYWlzZWRJblVzZCwgdWludDI1NiBfc3VjY2Vzc0F0QmxvY2spIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYnl0ZXMzMiByZXNwb25zZSkgewogICAgICBpZiAobXNnLnNlbmRlciA9PSBhZG1pbikKICAgICAgewogICAgICAgICAgLy8gRnVuZGluZyBpcyB0aGUgY2FwaXRhbCBpbnZlc3RlZCBieSBQb3dlckxpbmVVcCBhbmQgcGFydG5lcnMgdG8gYmFjayB0aGUgd2hvbGUgcHJveWVjdCBhbmQgdGhlIHRva2VucyByZWxlYXNlZC4KICAgICAgICAgIGFtb3VudFJhaXNlZEluVXNkID0gX2Ftb3VudFJhaXNlZEluVXNkOyAvL2Ftb3VudCByYWlzZWQgaW5jbHVkZXMgZGV2ZWxvcG1lbnQsIGh1bWFuIHJlc291cmNlcywgaW5mcmFlc3RydWN0dXJlLCBkZXNpZ24gYW5kIG1hcmtldGluZyBhY2hpZXZlZCBieSB0aGUgcHJveWVjdCBmb3VuZGVycyBhbmQgcGFydG5lcnMuCiAgICAgICAgICBzdWNjZXNzQXRCbG9jayA9IF9zdWNjZXNzQXRCbG9jazsgICAgICAgLy9CbG9jayB3aGVuIGdvYWwgcmVhY2hlZC4KICAgICAgICAgIHN1Y2Nlc3NmdWxQcmVTYWxlID0gdHJ1ZTsgICAgICAgCiAgICAgICAgICBDdXJyZW50U3RhdHVzID0gIkZ1bmRpbmcgU3VjY2Vzc2Z1bCwgaW4tcGxhdGZvcm0gdG9rZW5zIHJlYWR5IHRvIHVzZS4iOwoKICAgICAgICAgIAogICAgICAgICAgcmV0dXJuICJBbGwgaW4tcGxhdGZvcm0gdG9rZW5zIGJhY2tlZC4iOwogICAgICB9IGVsc2UgaWYgKG1zZy5zZW5kZXIgIT0gYWRtaW4pIHsKICAgICAgICAgIHJldHVybiAiTm90IEF1dGhvcml6ZWQiOwogICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuICJTZXR1cCBjYW5ub3QgYmUgY2hhbmdlZC4iOwogICAgICB9CiAgICB9CgogICAgLy8gZGVmYXVsdCBwYXlhYmxlIGZ1bmN0aW9uIHdoZW4gc2VuZGluZyBldGhlciB0byB0aGlzIGNvbnRyYWN0CiAgICAvLyBvbmx5IG93bmVyIChQb3dlckxpbmVVcCkgY2FuIHNlbmQgZXRoZXIgdG8gdGhpcyBhZGRyZXNzLgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4pOwogICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBtc2cudmFsdWUpOyAKICAgIH0KfQ=='.
	

]
