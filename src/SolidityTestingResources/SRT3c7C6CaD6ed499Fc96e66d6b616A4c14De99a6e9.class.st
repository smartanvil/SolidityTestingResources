Class {
	#name : #SRT3c7C6CaD6ed499Fc96e66d6b616A4c14De99a6e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c7C6CaD6ed499Fc96e66d6b616A4c14De99a6e9 >> base64 [
	^ ''.
	

]
