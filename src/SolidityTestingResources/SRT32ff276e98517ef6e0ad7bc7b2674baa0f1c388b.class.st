Class {
	#name : #SRT32ff276e98517ef6e0ad7bc7b2674baa0f1c388b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT32ff276e98517ef6e0ad7bc7b2674baa0f1c388b >> base64 [
	^ ''.
	

]
