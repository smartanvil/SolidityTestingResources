Class {
	#name : #SRTad4c4ff144e42c73b6333b75af3cee5af901c10e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad4c4ff144e42c73b6333b75af3cee5af901c10e >> base64 [
	^ ''.
	

]
