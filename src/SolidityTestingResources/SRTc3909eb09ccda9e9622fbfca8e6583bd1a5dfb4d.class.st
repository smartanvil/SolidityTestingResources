Class {
	#name : #SRTc3909eb09ccda9e9622fbfca8e6583bd1a5dfb4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc3909eb09ccda9e9622fbfca8e6583bd1a5dfb4d >> base64 [
	^ ''.
	

]
