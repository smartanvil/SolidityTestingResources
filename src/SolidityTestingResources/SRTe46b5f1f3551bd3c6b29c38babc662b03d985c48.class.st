Class {
	#name : #SRTe46b5f1f3551bd3c6b29c38babc662b03d985c48,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe46b5f1f3551bd3c6b29c38babc662b03d985c48 >> base64 [
	^ ''.
	

]
