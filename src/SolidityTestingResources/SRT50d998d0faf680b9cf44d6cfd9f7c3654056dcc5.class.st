Class {
	#name : #SRT50d998d0faf680b9cf44d6cfd9f7c3654056dcc5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50d998d0faf680b9cf44d6cfd9f7c3654056dcc5 >> base64 [
	^ ''.
	

]
