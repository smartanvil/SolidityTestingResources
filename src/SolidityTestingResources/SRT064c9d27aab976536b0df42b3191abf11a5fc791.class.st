Class {
	#name : #SRT064c9d27aab976536b0df42b3191abf11a5fc791,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT064c9d27aab976536b0df42b3191abf11a5fc791 >> base64 [
	^ ''.
	

]
