Class {
	#name : #SRT9294290053c4114c5641cf2f273c3102d049d2dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9294290053c4114c5641cf2f273c3102d049d2dd >> base64 [
	^ ''.
	

]
