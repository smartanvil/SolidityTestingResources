Class {
	#name : #SRT1c4f85e7bbddf3ee92e2999c63a7b85d64d57663,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c4f85e7bbddf3ee92e2999c63a7b85d64d57663 >> base64 [
	^ ''.
	

]
