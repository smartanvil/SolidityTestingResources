Class {
	#name : #SRT584bf48227509f93ae7c7f2ac2e3e4364d58050b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT584bf48227509f93ae7c7f2ac2e3e4364d58050b >> base64 [
	^ ''.
	

]
