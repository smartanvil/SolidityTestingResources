Class {
	#name : #SRT60ba8afcbc08255813e97433d2d98312b2d09c97,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT60ba8afcbc08255813e97433d2d98312b2d09c97 >> base64 [
	^ ''.
	

]
