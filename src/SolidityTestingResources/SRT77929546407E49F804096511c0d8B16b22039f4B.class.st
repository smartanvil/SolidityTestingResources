Class {
	#name : #SRT77929546407E49F804096511c0d8B16b22039f4B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT77929546407E49F804096511c0d8B16b22039f4B >> base64 [
	^ ''.
	

]
