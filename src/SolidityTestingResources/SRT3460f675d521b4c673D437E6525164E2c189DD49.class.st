Class {
	#name : #SRT3460f675d521b4c673D437E6525164E2c189DD49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3460f675d521b4c673D437E6525164E2c189DD49 >> base64 [
	^ ''.
	

]
