Class {
	#name : #SRTdafae9d2ecfa1f8bba620680f296c3404770e6fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdafae9d2ecfa1f8bba620680f296c3404770e6fe >> base64 [
	^ ''.
	

]
