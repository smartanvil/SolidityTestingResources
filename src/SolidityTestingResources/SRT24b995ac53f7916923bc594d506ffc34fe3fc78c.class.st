Class {
	#name : #SRT24b995ac53f7916923bc594d506ffc34fe3fc78c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT24b995ac53f7916923bc594d506ffc34fe3fc78c >> base64 [
	^ ''.
	

]
