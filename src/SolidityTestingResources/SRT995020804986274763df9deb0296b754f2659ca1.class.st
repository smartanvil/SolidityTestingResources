Class {
	#name : #SRT995020804986274763df9deb0296b754f2659ca1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT995020804986274763df9deb0296b754f2659ca1 >> base64 [
	^ ''.
	

]
