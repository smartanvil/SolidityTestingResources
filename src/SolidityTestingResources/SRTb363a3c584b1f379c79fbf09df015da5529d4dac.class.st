Class {
	#name : #SRTb363a3c584b1f379c79fbf09df015da5529d4dac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb363a3c584b1f379c79fbf09df015da5529d4dac >> base64 [
	^ ''.
	

]
