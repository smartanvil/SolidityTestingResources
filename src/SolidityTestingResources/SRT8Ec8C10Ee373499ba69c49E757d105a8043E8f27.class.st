Class {
	#name : #SRT8Ec8C10Ee373499ba69c49E757d105a8043E8f27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8Ec8C10Ee373499ba69c49E757d105a8043E8f27 >> base64 [
	^ ''.
	

]
