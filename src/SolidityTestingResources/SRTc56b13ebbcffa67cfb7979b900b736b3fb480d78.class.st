Class {
	#name : #SRTc56b13ebbcffa67cfb7979b900b736b3fb480d78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc56b13ebbcffa67cfb7979b900b736b3fb480d78 >> base64 [
	^ ''.
	

]
