Class {
	#name : #SRTbd18a4335aef9c1bff9ca2f7166ae8b9c5420a7b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd18a4335aef9c1bff9ca2f7166ae8b9c5420a7b >> base64 [
	^ ''.
	

]
