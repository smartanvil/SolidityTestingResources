Class {
	#name : #SRT923641c6b80d8fc913ff883a5c523f47081bad92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT923641c6b80d8fc913ff883a5c523f47081bad92 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CmNvbnRyYWN0IENvbmZpZ0ludGVyZmFjZSB7CiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGFkbWluczsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYWRkcmVzcykgYWRkcmVzc01hcDsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYm9vbCkgYm9vbE1hcDsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYnl0ZXMzMikgYnl0ZXNNYXA7CiAgICAgICAgbWFwcGluZyhieXRlczMyID0+IHVpbnQyNTYpIHVpbnRNYXA7CgogICAgICAgIC8vLyBAbm90aWNlIHNldENvbmZpZ0FkZHJlc3Mgc2V0cyBjb25maWd1cmF0aW9uIGBfa2V5YCB0byBgX3ZhbGAKICAgICAgICAvLy8gQHBhcmFtIF9rZXkgVGhlIGtleSBuYW1lIG9mIHRoZSBjb25maWd1cmF0aW9uLgogICAgICAgIC8vLyBAcGFyYW0gX3ZhbCBUaGUgdmFsdWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24uCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29uZmlndXJhdGlvbiBzZXR0aW5nIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC4KICAgICAgICBmdW5jdGlvbiBzZXRDb25maWdBZGRyZXNzKGJ5dGVzMzIgX2tleSwgYWRkcmVzcyBfdmFsKSByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7CgogICAgICAgIC8vLyBAbm90aWNlIHNldENvbmZpZ0Jvb2wgc2V0cyBjb25maWd1cmF0aW9uIGBfa2V5YCB0byBgX3ZhbGAKICAgICAgICAvLy8gQHBhcmFtIF9rZXkgVGhlIGtleSBuYW1lIG9mIHRoZSBjb25maWd1cmF0aW9uLgogICAgICAgIC8vLyBAcGFyYW0gX3ZhbCBUaGUgdmFsdWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24uCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29uZmlndXJhdGlvbiBzZXR0aW5nIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC4KICAgICAgICBmdW5jdGlvbiBzZXRDb25maWdCb29sKGJ5dGVzMzIgX2tleSwgYm9vbCBfdmFsKSByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7CgogICAgICAgIC8vLyBAbm90aWNlIHNldENvbmZpZ0J5dGVzIHNldHMgY29uZmlndXJhdGlvbiBgX2tleWAgdG8gYF92YWxgCiAgICAgICAgLy8vIEBwYXJhbSBfa2V5IFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHBhcmFtIF92YWwgVGhlIHZhbHVlIG9mIHRoZSBjb25maWd1cmF0aW9uLgogICAgICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZyB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuCiAgICAgICAgZnVuY3Rpb24gc2V0Q29uZmlnQnl0ZXMoYnl0ZXMzMiBfa2V5LCBieXRlczMyIF92YWwpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2Ugc2V0Q29uZmlnVWludCBgX2tleWAgdG8gYF92YWxgCiAgICAgICAgLy8vIEBwYXJhbSBfa2V5IFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHBhcmFtIF92YWwgVGhlIHZhbHVlIG9mIHRoZSBjb25maWd1cmF0aW9uLgogICAgICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZyB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuCiAgICAgICAgZnVuY3Rpb24gc2V0Q29uZmlnVWludChieXRlczMyIF9rZXksIHVpbnQyNTYgX3ZhbCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQG5vdGljZSBnZXRDb25maWdBZGRyZXNzIGdldHMgY29uZmlndXJhdGlvbiBgX2tleWAncyB2YWx1ZQogICAgICAgIC8vLyBAcGFyYW0gX2tleSBUaGUga2V5IG5hbWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24uCiAgICAgICAgLy8vIEByZXR1cm4gVGhlIGNvbmZpZ3VyYXRpb24gdmFsdWUKICAgICAgICBmdW5jdGlvbiBnZXRDb25maWdBZGRyZXNzKGJ5dGVzMzIgX2tleSkgcmV0dXJucyhhZGRyZXNzIHZhbCk7CgogICAgICAgIC8vLyBAbm90aWNlIGdldENvbmZpZ0Jvb2wgZ2V0cyBjb25maWd1cmF0aW9uIGBfa2V5YCdzIHZhbHVlCiAgICAgICAgLy8vIEBwYXJhbSBfa2V5IFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHJldHVybiBUaGUgY29uZmlndXJhdGlvbiB2YWx1ZQogICAgICAgIGZ1bmN0aW9uIGdldENvbmZpZ0Jvb2woYnl0ZXMzMiBfa2V5KSByZXR1cm5zKGJvb2wgdmFsKTsKCiAgICAgICAgLy8vIEBub3RpY2UgZ2V0Q29uZmlnQnl0ZXMgZ2V0cyBjb25maWd1cmF0aW9uIGBfa2V5YCdzIHZhbHVlCiAgICAgICAgLy8vIEBwYXJhbSBfa2V5IFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHJldHVybiBUaGUgY29uZmlndXJhdGlvbiB2YWx1ZQogICAgICAgIGZ1bmN0aW9uIGdldENvbmZpZ0J5dGVzKGJ5dGVzMzIgX2tleSkgcmV0dXJucyhieXRlczMyIHZhbCk7CgogICAgICAgIC8vLyBAbm90aWNlIGdldENvbmZpZ1VpbnQgZ2V0cyBjb25maWd1cmF0aW9uIGBfa2V5YCdzIHZhbHVlCiAgICAgICAgLy8vIEBwYXJhbSBfa2V5IFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHJldHVybiBUaGUgY29uZmlndXJhdGlvbiB2YWx1ZQogICAgICAgIGZ1bmN0aW9uIGdldENvbmZpZ1VpbnQoYnl0ZXMzMiBfa2V5KSByZXR1cm5zKHVpbnQyNTYgdmFsKTsKCiAgICAgICAgLy8vIEBub3RpY2UgYWRkQWRtaW4gc2V0cyBgX2FkbWluYCBhcyBjb25maWd1cmF0aW9uIGFkbWluCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29uZmlndXJhdGlvbiBzZXR0aW5nIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC4KICAgICAgICBmdW5jdGlvbiBhZGRBZG1pbihhZGRyZXNzIF9hZG1pbikgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQG5vdGljZSByZW1vdmVBZG1pbiByZW1vdmVzICBgX2FkbWluYCdzIHJpZ2h0cwogICAgICAgIC8vLyBAcGFyYW0gX2FkbWluIFRoZSBrZXkgbmFtZSBvZiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBjb25maWd1cmF0aW9uIHNldHRpbmcgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90LgogICAgICAgIGZ1bmN0aW9uIHJlbW92ZUFkbWluKGFkZHJlc3MgX2FkbWluKSByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7Cgp9Cgpjb250cmFjdCBUb2tlbkludGVyZmFjZSB7CgogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBzZWxsZXI7CgogICAgICAgIGFkZHJlc3MgY29uZmlnOwogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgYWRkcmVzcyBkYW87CiAgICAgICAgYWRkcmVzcyBwdWJsaWMgYmFkZ2VMZWRnZXI7CiAgICAgICAgYm9vbCBsb2NrZWQ7CgogICAgICAgIC8vLyBAcmV0dXJuIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgICAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAgICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAgICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgICAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMgb24gaXRzIGJlaGFsZgogICAgICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAgICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAgICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAgICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgICAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBvZiBfb3duZXIgdGhhdCBfc3BlbmRlciBpcyBhbGxvd2VkIHRvIHNwZW5kCiAgICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICAgICAgLy8vIEBub3RpY2UgbWludCBgX2Ftb3VudGAgb2YgdG9rZW5zIHRvIGBfb3duZXJgCiAgICAgICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgcmVjZWl2aW5nIHRoZSB0b2tlbnMKICAgICAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludAogICAgICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgb3Igbm90IG1pbnRpbmcgd2FzIHN1Y2Nlc3NmdWwKICAgICAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2UgbWludEJhZGdlIE1pbnQgYF9hbW91bnRgIGJhZGdlcyB0byBgX293bmVyYAogICAgICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHJlY2VpdmluZyB0aGUgdG9rZW5zCiAgICAgICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQKICAgICAgICAvLy8gQHJldHVybiBXaGV0aGVyIG9yIG5vdCBtaW50aW5nIHdhcyBzdWNjZXNzZnVsCiAgICAgICAgZnVuY3Rpb24gbWludEJhZGdlKGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJEYW8oYWRkcmVzcyBfZGFvKSByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7CgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyU2VsbGVyKGFkZHJlc3MgX3Rva2Vuc2FsZXMpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IGluZGV4ZWQgX3ZhbHVlKTsKICAgICAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBfcmVjaXBpZW50LCB1aW50MjU2IGluZGV4ZWQgX2Ftb3VudCk7CiAgICAgICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IGluZGV4ZWQgX3ZhbHVlKTsKfQoKY29udHJhY3QgVG9rZW5TYWxlc0ludGVyZmFjZSB7CgogICAgICAgIHN0cnVjdCBTYWxlUHJveHkgewogICAgICAgICAgICAgICAgYWRkcmVzcyBwYXlvdXQ7CiAgICAgICAgICAgICAgICBib29sIGlzUHJveHk7CiAgICAgICAgfQoKICAgICAgICBzdHJ1Y3QgU2FsZVN0YXR1cyB7CiAgICAgICAgICAgICAgICBib29sIGZvdW5kZXJDbGFpbTsKICAgICAgICAgICAgICAgIHVpbnQyNTYgcmVsZWFzZWRUb2tlbnM7CiAgICAgICAgICAgICAgICB1aW50MjU2IHJlbGVhc2VkQmFkZ2VzOwogICAgICAgICAgICAgICAgdWludDI1NiBjbGFpbWVyczsKICAgICAgICB9CgogICAgICAgIHN0cnVjdCBJbmZvIHsKICAgICAgICAgICAgICAgIHVpbnQyNTYgdG90YWxXZWk7CiAgICAgICAgICAgICAgICB1aW50MjU2IHRvdGFsQ2VudHM7CiAgICAgICAgICAgICAgICB1aW50MjU2IHJlYWxDZW50czsKICAgICAgICAgICAgICAgIHVpbnQyNTYgYW1vdW50OwogICAgICAgIH0KCiAgICAgICAgc3RydWN0IFNhbGVDb25maWcgewogICAgICAgICAgICAgICAgdWludDI1NiBzdGFydERhdGU7CiAgICAgICAgICAgICAgICB1aW50MjU2IHBlcmlvZFR3bzsKICAgICAgICAgICAgICAgIHVpbnQyNTYgcGVyaW9kVGhyZWU7CiAgICAgICAgICAgICAgICB1aW50MjU2IGVuZERhdGU7CiAgICAgICAgICAgICAgICB1aW50MjU2IGdvYWw7CiAgICAgICAgICAgICAgICB1aW50MjU2IGNhcDsKICAgICAgICAgICAgICAgIHVpbnQyNTYgYmFkZ2VDb3N0OwogICAgICAgICAgICAgICAgdWludDI1NiBmb3VuZGVyQW1vdW50OwogICAgICAgICAgICAgICAgYWRkcmVzcyBmb3VuZGVyV2FsbGV0OwogICAgICAgIH0KCiAgICAgICAgc3RydWN0IEJ1eWVyIHsKICAgICAgICAgICAgICAgIHVpbnQyNTYgY2VudHNUb3RhbDsKICAgICAgICAgICAgICAgIHVpbnQyNTYgd2VpVG90YWw7CiAgICAgICAgICAgICAgICBib29sIGNsYWltZWQ7CiAgICAgICAgfQoKICAgICAgICBJbmZvIHNhbGVJbmZvOwogICAgICAgIFNhbGVDb25maWcgc2FsZUNvbmZpZzsKICAgICAgICBTYWxlU3RhdHVzIHNhbGVTdGF0dXM7CgogICAgICAgIGFkZHJlc3MgY29uZmlnOwogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgYm9vbCBsb2NrZWQ7CgogICAgICAgIHVpbnQyNTYgcHVibGljIGV0aFRvQ2VudHM7CgogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBCdXllcikgYnV5ZXJzOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBTYWxlUHJveHkpIHByb3hpZXM7CgogICAgICAgIC8vLyBAbm90aWNlIENhbGN1bGF0ZXMgdGhlIHBhcnRzIHBlciBiaWxsaW9uIDHigYQxLDAwMCwwMDAsMDAwIG9mIGBfYWAgdG8gYF9iYAogICAgICAgIC8vLyBAcGFyYW0gX2EgVGhlIGFudGVjZWRlbnQKICAgICAgICAvLy8gQHBhcmFtIF9jIFRoZSBjb25zZXF1ZW50CiAgICAgICAgLy8vIEByZXR1cm4gUGFydCBwZXIgYmlsbGlvbiB2YWx1ZQogICAgICAgIGZ1bmN0aW9uIHBwYih1aW50MjU2IF9hLCB1aW50MjU2IF9jKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGIpOwoKCiAgICAgICAgLy8vIEBub3RpY2UgQ2FsY3VsYXRlcyB0aGUgc2hhcmUgZnJvbSBgX3RvdGFsYCBiYXNlZCBvbiBgX2NvbnRyaWJgCiAgICAgICAgLy8vIEBwYXJhbSBfY29udHJpYiBUaGUgY29udHJpYnV0ZWQgYW1vdW50IGluIFVTRAogICAgICAgIC8vLyBAcGFyYW0gX3RvdGFsIFRoZSB0b3RhbCBhbW91bnQgcmFpc2VkIGluIFVTRAogICAgICAgIC8vLyBAcmV0dXJuIFRvdGFsIG51bWJlciBvZiBzaGFyZXMKICAgICAgICBmdW5jdGlvbiBjYWxjU2hhcmUodWludDI1NiBfY29udHJpYiwgdWludDI1NiBfdG90YWwpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgc2hhcmUpOwoKICAgICAgICAvLy8gQG5vdGljZSBDYWxjdWxhdGVzIHRoZSBjdXJyZW50IFVTRCBjZW50cyB2YWx1ZSBvZiBgX3dlaWAKICAgICAgICAvLy8gQHBhcmFtIF93ZWkgdGhlIGFtb3VudCBvZiB3ZWkKICAgICAgICAvLy8gQHJldHVybiBUaGUgVVNEIGNlbnRzIHZhbHVlCiAgICAgICAgZnVuY3Rpb24gd2VpVG9DZW50cyh1aW50MjU2IF93ZWkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgY2VudHN2YWx1ZSk7CgogICAgICAgIGZ1bmN0aW9uIHByb3h5UHVyY2hhc2UoYWRkcmVzcyBfdXNlcikgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQG5vdGljZSBTZW5kIG1zZy52YWx1ZSBwdXJjaGFzZSBmb3IgX3VzZXIuCiAgICAgICAgLy8vIEBwYXJhbSBfdXNlciBUaGUgYWNjb3VudCB0byBiZSBjcmVkaXRlZAogICAgICAgIC8vLyBAcmV0dXJuIFN1Y2Nlc3MgaWYgcHVyY2hhc2Ugd2FzIGFjY2VwdGVkCiAgICAgICAgZnVuY3Rpb24gcHVyY2hhc2UoYWRkcmVzcyBfdXNlciwgdWludDI1NiBfYW1vdW50KSBwcml2YXRlIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2UgR2V0IGNyb3dkc2FsZSBpbmZvcm1hdGlvbiBmb3IgYF91c2VyYAogICAgICAgIC8vLyBAcGFyYW0gX3VzZXIgVGhlIGFjY291bnQgdG8gYmUgcXVlcmllZAogICAgICAgIC8vLyBAcmV0dXJuIGBjZW50c3RvdGFsYCB0aGUgdG90YWwgYW1vdW50IG9mIFVTRCBjZW50cyBjb250cmlidXRlZAogICAgICAgIC8vLyBAcmV0dXJuIGB3ZWl0b3RhbGAgdGhlIHRvdGFsIGFtb3VudCBpbiB3ZWkgY29udHJpYnV0ZWQKICAgICAgICAvLy8gQHJldHVybiBgc2hhcmVgIHRoZSBjdXJyZW50IHRva2VuIHNoYXJlcyBlYXJuZWQKICAgICAgICAvLy8gQHJldHVybiBgYmFkZ2VzYCB0aGUgbnVtYmVyIG9mIHByb3Bvc2VyIGJhZGdlcyBlYXJuZWQKICAgICAgICAvLy8gQHJldHVybiBgY2xhaW1lZGAgaXMgdHJ1ZSBpZiB0aGUgdG9rZW5zIGFuZCBiYWRnZXMgaGF2ZSBiZWVuIGNsYWltZWQKICAgICAgICBmdW5jdGlvbiB1c2VySW5mbyhhZGRyZXNzIF91c2VyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGNlbnRzdG90YWwsIHVpbnQyNTYgd2VpdG90YWwsIHVpbnQyNTYgc2hhcmUsIHVpbnQgYmFkZ2VzLCBib29sIGNsYWltZWQpOwoKICAgICAgICAvLy8gQG5vdGljZSBHZXQgdGhlIGNyb3dkc2FsZSBpbmZvcm1hdGlvbiBmcm9tIG1zZy5zZW5kZXIgKHNlZSB1c2VySW5mbykKICAgICAgICBmdW5jdGlvbiBteUluZm8oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGNlbnRzdG90YWwsIHVpbnQyNTYgd2VpdG90YWwsIHVpbnQyNTYgc2hhcmUsIHVpbnQgYmFkZ2VzLCBib29sIGNsYWltZWQpOwoKICAgICAgICAvLy8gQG5vdGljZSBnZXQgdGhlIHRvdGFsIGFtb3VudCBvZiB3ZWkgcmFpc2VkIGZvciB0aGUgY3Jvd2RzYWxlCiAgICAgICAgLy8vIEByZXR1cm4gVGhlIGFtb3VudCBvZiB3ZWkgcmFpc2VkCiAgICAgICAgZnVuY3Rpb24gdG90YWxXZWkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KTsKCiAgICAgICAgLy8vIEBub3RpY2UgZ2V0IHRoZSB0b3RhbCBVU0QgdmFsdWUgaW4gY2VudHMgcmFpc2VkIGZvciB0aGUgY3Jvd2RzYWxlCiAgICAgICAgLy8vIEByZXR1cm4gdGhlIGFtb3VudCBVU0QgY2VudHMKICAgICAgICBmdW5jdGlvbiB0b3RhbENlbnRzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCk7CgogICAgICAgIC8vLyBAbm90aWNlIGdldCB0aGUgY3VycmVudCBjcm93ZHNhbGUgaW5mb3JtYXRpb24KICAgICAgICAvLy8gQHJldHVybiBgc3RhcnRzYWxlYCBUaGUgdW5peCB0aW1lc3RhbXAgZm9yIHRoZSBzdGFydCBvZiB0aGUgY3Jvd2RzYWxlIGFuZCB0aGUgZmlyc3QgcGVyaW9kIG1vZGlmaWVyCiAgICAgICAgLy8vIEByZXR1cm4gYHR3b2AgVGhlIHVuaXggdGltZXN0YW1wIGZvciB0aGUgc3RhcnQgb2YgdGhlIHNlY29uZCBwZXJpb2QgbW9kaWZpZXIKICAgICAgICAvLy8gQHJldHVybiBgdGhyZWVgIFRoZSB1bml4IHRpbWVzdGFtcCBmb3IgdGhlIHN0YXJ0IG9mIHRoZSB0aGlyZCBwZXJpb2QgbW9kaWZpZXIKICAgICAgICAvLy8gQHJldHVybiBgZW5kc2FsZWAgVGhlIHVuaXggdGltZXN0YW1wIG9mIHRoZSBlbmQgb2YgY3Jvd2RzYWxlCiAgICAgICAgLy8vIEByZXR1cm4gYHRvdGFsd2VpYCBUaGUgdG90YWwgYW1vdW50IG9mIHdlaSByYWlzZWQKICAgICAgICAvLy8gQHJldHVybiBgdG90YWxjZW50c2AgVGhlIHRvdGFsIG51bWJlciBvZiBVU0QgY2VudHMgcmFpc2VkCiAgICAgICAgLy8vIEByZXR1cm4gYGFtb3VudGAgVGhlIGFtb3VudCBvZiBER0QgdG9rZW5zIGF2YWlsYWJsZSBmb3IgdGhlIGNyb3dkc2FsZQogICAgICAgIC8vLyBAcmV0dXJuIGBnb2FsYCBUaGUgVVNEIHZhbHVlIGdvYWwgZm9yIHRoZSBjcm93ZHNhbGUKICAgICAgICAvLy8gQHJldHVybiBgZmFtb3VudGAgRm91bmRlcnMgZW5kb3dtZW50CiAgICAgICAgLy8vIEByZXR1cm4gYGZhZGRyZXNzYCBGb3VuZGVyIHdhbGxldCBhZGRyZXNzCiAgICAgICAgLypmdW5jdGlvbiBnZXRTYWxlSW5mbygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN0YXJ0c2FsZSwgdWludDI1NiB0d28sIHVpbnQyNTYgdGhyZWUsIHVpbnQyNTYgZW5kc2FsZSwgdWludDI1NiB0b3RhbHdlaSwgdWludDI1NiB0b3RhbGNlbnRzLCB1aW50MjU2IGFtb3VudCwgdWludDI1NiBnb2FsLCB1aW50MjU2IGZhbW91bnQsIGFkZHJlc3MgZmFkZHJlc3MpOyovCgogICAgICAgIGZ1bmN0aW9uIGNsYWltRm9yKGFkZHJlc3MgX3VzZXIpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgLy8vIEBub3RpY2UgQWxsb3dzIG1zZy5zZW5kZXIgdG8gY2xhaW0gdGhlIERHRCB0b2tlbnMgYW5kIGJhZGdlcyBpZiB0aGUgZ29hbCBpcyByZWFjaGVkIG9yIHJlZnVuZHMgdGhlIEVUSCBjb250cmlidXRlZCBpZiBnb2FsIGlzIG5vdCByZWFjaGVkIGF0IHRoZSBlbmQgb2YgdGhlIGNyb3dkc2FsZQogICAgICAgIGZ1bmN0aW9uIGNsYWltKCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICBmdW5jdGlvbiBjbGFpbUZvdW5kZXJzKCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvLy8gQG5vdGljZSBTZWUgaWYgdGhlIGNyb3dkc2FsZSBnb2FsIGhhcyBiZWVuIHJlYWNoZWQKICAgICAgICBmdW5jdGlvbiBnb2FsUmVhY2hlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wgcmVhY2hlZCk7CgogICAgICAgIC8vLyBAbm90aWNlIEdldCB0aGUgY3VycmVudCBzYWxlIHBlcmlvZAogICAgICAgIC8vLyBAcmV0dXJuIGBzYWxlcGVyaW9kYCAwID0gT3V0c2lkZSBvZiB0aGUgY3Jvd2RzYWxlIHBlcmlvZCwgMSA9IEZpcnN0IHJld2FyZCBwZXJpb2QsIDIgPSBTZWNvbmQgcmV3YXJkIHBlcmlvZCwgMyA9IEZpbmFsIGNyb3dkc2FsZSBwZXJpb2QuCiAgICAgICAgZnVuY3Rpb24gZ2V0UGVyaW9kKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBzYWxlcGVyaW9kKTsKCiAgICAgICAgLy8vIEBub3RpY2UgR2V0IHRoZSBkYXRlIGZvciB0aGUgc3RhcnQgb2YgdGhlIGNyb3dkc2FsZQogICAgICAgIC8vLyBAcmV0dXJuIGBkYXRlYCBUaGUgdW5peCB0aW1lc3RhbXAgZm9yIHRoZSBzdGFydAogICAgICAgIGZ1bmN0aW9uIHN0YXJ0RGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQgZGF0ZSk7CgogICAgICAgIC8vLyBAbm90aWNlIEdldCB0aGUgZGF0ZSBmb3IgdGhlIHNlY29uZCByZXdhcmQgcGVyaW9kIG9mIHRoZSBjcm93ZHNhbGUKICAgICAgICAvLy8gQHJldHVybiBgZGF0ZWAgVGhlIHVuaXggdGltZXN0YW1wIGZvciB0aGUgc2Vjb25kIHBlcmlvZAogICAgICAgIGZ1bmN0aW9uIHBlcmlvZFR3bygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQgZGF0ZSk7CgogICAgICAgIC8vLyBAbm90aWNlIEdldCB0aGUgZGF0ZSBmb3IgdGhlIGZpbmFsIHBlcmlvZCBvZiB0aGUgY3Jvd2RzYWxlCiAgICAgICAgLy8vIEByZXR1cm4gYGRhdGVgIFRoZSB1bml4IHRpbWVzdGFtcCBmb3IgdGhlIGZpbmFsIHBlcmlvZAogICAgICAgIGZ1bmN0aW9uIHBlcmlvZFRocmVlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBkYXRlKTsKCiAgICAgICAgLy8vIEBub3RpY2UgR2V0IHRoZSBkYXRlIGZvciB0aGUgZW5kIG9mIHRoZSBjcm93ZHNhbGUKICAgICAgICAvLy8gQHJldHVybiBgZGF0ZWAgVGhlIHVuaXggdGltZXN0YW1wIGZvciB0aGUgZW5kIG9mIHRoZSBjcm93ZHNhbGUKICAgICAgICBmdW5jdGlvbiBlbmREYXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBkYXRlKTsKCiAgICAgICAgLy8vIEBub3RpY2UgQ2hlY2sgaWYgY3Jvd2RzYWxlIGhhcyBlbmRlZAogICAgICAgIC8vLyBAcmV0dXJuIGBlbmRlZGAgSWYgdGhlIGNyb3dkc2FsZSBoYXMgZW5kZWQKCiAgICAgICAgZnVuY3Rpb24gaXNFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wgZW5kZWQpOwoKICAgICAgICAvLy8gQG5vdGljZSBTZW5kIHJhaXNlZCBmdW5kcyBmcm9tIHRoZSBjcm93ZHNhbGUgdG8gdGhlIERBTwogICAgICAgIC8vLyBAcmV0dXJuIGBzdWNjZXNzYCBpZiB0aGUgc2VuZCBzdWNjZWVkZWQKICAgICAgICBmdW5jdGlvbiBzZW5kRnVuZHMoKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgICAgICAvL2Z1bmN0aW9uIHJlZ1Byb3h5KGFkZHJlc3MgX3BheW1lbnQsIGFkZHJlc3MgX3BheW91dCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgICAgICBmdW5jdGlvbiByZWdQcm94eShhZGRyZXNzIF9wYXlvdXQpIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgZnVuY3Rpb24gZ2V0UHJveHkoYWRkcmVzcyBfcGF5b3V0KSBwdWJsaWMgcmV0dXJucyhhZGRyZXNzIHByb3h5KTsKCiAgICAgICAgZnVuY3Rpb24gZ2V0UGF5b3V0KGFkZHJlc3MgX3Byb3h5KSBwdWJsaWMgcmV0dXJucyhhZGRyZXNzIHBheW91dCwgYm9vbCBpc3Byb3h5KTsKCiAgICAgICAgZnVuY3Rpb24gdW5sb2NrKCkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAgICAgZnVuY3Rpb24gZ2V0U2FsZVN0YXR1cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wgZmNsYWltLCB1aW50MjU2IHJlbHRva2VucywgdWludDI1NiByZWxiYWRnZXMsIHVpbnQyNTYgY2xhaW1lcnMpOwoKICAgICAgICBmdW5jdGlvbiBnZXRTYWxlSW5mbygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgd2VpYW1vdW50LCB1aW50MjU2IGNlbnRzLCB1aW50MjU2IHJlYWxjZW50cywgdWludDI1NiBhbW91bnQpOwoKICAgICAgICBmdW5jdGlvbiBnZXRTYWxlQ29uZmlnKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NiBzdGFydCwgdWludDI1NiB0d28sIHVpbnQyNTYgdGhyZWUsIHVpbnQyNTYgZW5kLCB1aW50MjU2IGdvYWwsIHVpbnQyNTYgY2FwLCB1aW50MjU2IGJhZGdlY29zdCwgdWludDI1NiBmYW1vdW50LCBhZGRyZXNzIGZ3YWxsZXQpOwoKICAgICAgICBldmVudCBQdXJjaGFzZSh1aW50MjU2IGluZGV4ZWQgX2V4Y2hhbmdlLCB1aW50MjU2IGluZGV4ZWQgX3JhdGUsIHVpbnQyNTYgaW5kZXhlZCBfY2VudHMpOwogICAgICAgIGV2ZW50IENsYWltKGFkZHJlc3MgaW5kZXhlZCBfdXNlciwgdWludDI1NiBpbmRleGVkIF9hbW91bnQsIHVpbnQyNTYgaW5kZXhlZCBfYmFkZ2VzKTsKCn0KCmNvbnRyYWN0IEJhZGdlIHsKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICAgICAgYm9vbCBwdWJsaWMgbG9ja2VkOwogICAgICAgIHN0cmluZyBwdWJsaWMgbmFtZTsgICAgICAgICAgICAgICAgICAgLy9mYW5jeSBuYW1lOiBlZyBTaW1vbiBCdWNrcwogICAgICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsgICAgICAgICAgICAgICAgLy9Ib3cgbWFueSBkZWNpbWFscyB0byBzaG93LiBpZS4gVGhlcmUgY291bGQgMTAwMCBiYXNlIHVuaXRzIHdpdGggMyBkZWNpbWFscy4gTWVhbmluZyAwLjk4MCBTQlggPSA5ODAgYmFzZSB1bml0cy4gSXQncyBsaWtlIGNvbXBhcmluZyAxIHdlaSB0byAxIGV0aGVyLgogICAgICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlgKICAgICAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnSDAuMSc7ICAgICAgIC8vaHVtYW4gMC4xIHN0YW5kYXJkLiBKdXN0IGFuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZS4KCiAgICAgICAgLy8vIEByZXR1cm4gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgICAgICBtb2RpZmllciBpZk93bmVyKCkgewogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBfOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCgogICAgICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgICAgIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIF9yZWNpcGllbnQsIHVpbnQyNTYgaW5kZXhlZCBfYW1vdW50KTsKICAgICAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAgICAgZnVuY3Rpb24gQmFkZ2UoCiAgICAgICAgICAgICAgICB1aW50MjU2IF9pbml0aWFsQW1vdW50LAogICAgICAgICAgICAgICAgc3RyaW5nIF90b2tlbk5hbWUsCiAgICAgICAgICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgICAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbAogICAgICAgICkgewogICAgICAgICAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbEFtb3VudDsgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgICAgICAgICAgdG90YWxTdXBwbHkgPSBfaW5pdGlhbEFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgICAgICAgICBuYW1lID0gX3Rva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgICAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICAgICAgICAgIHN5bWJvbCA9IF90b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzYWZlVG9BZGQodWludCBhLCB1aW50IGIpIHJldHVybnMoYm9vbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIChhICsgYiA+PSBhKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFkZFNhZmVseSh1aW50IGEsIHVpbnQgYikgcmV0dXJucyh1aW50IHJlc3VsdCkgewogICAgICAgICAgICAgICAgaWYgKCFzYWZlVG9BZGQoYSwgYikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhICsgYjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNhZmVUb1N1YnRyYWN0KHVpbnQgYSwgdWludCBiKSByZXR1cm5zKGJvb2wpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoYiA8PSBhKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHN1YnRyYWN0U2FmZWx5KHVpbnQgYSwgdWludCBiKSByZXR1cm5zKHVpbnQpIHsKICAgICAgICAgICAgICAgIGlmICghc2FmZVRvU3VidHJhY3QoYSwgYikpIHRocm93OwogICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWJ0cmFjdFNhZmVseShiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZFNhZmVseShfdmFsdWUsIGJhbGFuY2VzW190b10pOwogICAgICAgICAgICAgICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZFNhZmVseShiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzdWJ0cmFjdFNhZmVseShiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc3VidHJhY3RTYWZlbHkoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgICAgICAgICByZW1haW5pbmcgPSBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlbWFpbmluZzsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2Ftb3VudCkgaWZPd25lciByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgdG90YWxTdXBwbHkgPSBhZGRTYWZlbHkodG90YWxTdXBwbHksIF9hbW91bnQpOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbX293bmVyXSA9IGFkZFNhZmVseShiYWxhbmNlc1tfb3duZXJdLCBfYW1vdW50KTsKICAgICAgICAgICAgICAgIE1pbnQoX293bmVyLCBfYW1vdW50KTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBfb3duZXIpIGlmT3duZXIgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIG93bmVyID0gX293bmVyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKfQoKY29udHJhY3QgVG9rZW4gewoKICAgICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgICAgICBhZGRyZXNzIHB1YmxpYyBjb25maWc7CiAgICAgICAgYm9vbCBwdWJsaWMgbG9ja2VkOwogICAgICAgIGFkZHJlc3MgcHVibGljIGRhbzsKICAgICAgICBhZGRyZXNzIHB1YmxpYyBiYWRnZUxlZGdlcjsKICAgICAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHNlbGxlcjsKCiAgICAgICAgLy8vIEByZXR1cm4gdG90YWwgYW1vdW50IG9mIHRva2VucwoKICAgICAgICBtb2RpZmllciBpZlNhbGVzKCkgewogICAgICAgICAgICAgICAgaWYgKCFzZWxsZXJbbXNnLnNlbmRlcl0pIHRocm93OwogICAgICAgICAgICAgICAgXzsKICAgICAgICB9CgogICAgICAgIG1vZGlmaWVyIGlmT3duZXIoKSB7CiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgICAgICAgICBfOwogICAgICAgIH0KCiAgICAgICAgbW9kaWZpZXIgaWZEYW8oKSB7CiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBkYW8pIHRocm93OwogICAgICAgICAgICAgICAgXzsKICAgICAgICB9CgogICAgICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgICAgIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIF9yZWNpcGllbnQsIHVpbnQyNTYgX2Ftb3VudCk7CiAgICAgICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgICAgIGZ1bmN0aW9uIFRva2VuKGFkZHJlc3MgX2NvbmZpZykgewogICAgICAgICAgICAgICAgY29uZmlnID0gX2NvbmZpZzsKICAgICAgICAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgICAgIGFkZHJlc3MgX2luaXRzZWxsZXIgPSBDb25maWdJbnRlcmZhY2UoX2NvbmZpZykuZ2V0Q29uZmlnQWRkcmVzcygic2FsZTE6YWRkcmVzcyIpOwogICAgICAgICAgICAgICAgc2VsbGVyW19pbml0c2VsbGVyXSA9IHRydWU7CiAgICAgICAgICAgICAgICBsb2NrZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNhZmVUb0FkZCh1aW50IGEsIHVpbnQgYikgcmV0dXJucyhib29sKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKGEgKyBiID49IGEpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRkU2FmZWx5KHVpbnQgYSwgdWludCBiKSByZXR1cm5zKHVpbnQgcmVzdWx0KSB7CiAgICAgICAgICAgICAgICBpZiAoIXNhZmVUb0FkZChhLCBiKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGEgKyBiOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2FmZVRvU3VidHJhY3QodWludCBhLCB1aW50IGIpIHJldHVybnMoYm9vbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIChiIDw9IGEpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc3VidHJhY3RTYWZlbHkodWludCBhLCB1aW50IGIpIHJldHVybnModWludCkgewogICAgICAgICAgICAgICAgaWYgKCFzYWZlVG9TdWJ0cmFjdChhLCBiKSkgdGhyb3c7CiAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHN1YnRyYWN0U2FmZWx5KGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gYWRkU2FmZWx5KGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzczsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gYWRkU2FmZWx5KGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHN1YnRyYWN0U2FmZWx5KGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzdWJ0cmFjdFNhZmVseShhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICAgICAgICAgICAgICByZXR1cm4gcmVtYWluaW5nOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfYW1vdW50KSBpZlNhbGVzIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICB0b3RhbFN1cHBseSA9IGFkZFNhZmVseShfYW1vdW50LCB0b3RhbFN1cHBseSk7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tfb3duZXJdID0gYWRkU2FmZWx5KGJhbGFuY2VzW19vd25lcl0sIF9hbW91bnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBtaW50QmFkZ2UoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2Ftb3VudCkgaWZTYWxlcyByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgaWYgKCFCYWRnZShiYWRnZUxlZGdlcikubWludChfb3duZXIsIF9hbW91bnQpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRGFvKGFkZHJlc3MgX2RhbykgaWZPd25lciByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgaWYgKGxvY2tlZCA9PSB0cnVlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICBkYW8gPSBfZGFvOwogICAgICAgICAgICAgICAgbG9ja2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0RGFvKGFkZHJlc3MgX25ld2RhbykgaWZEYW8gcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIGRhbyA9IF9uZXdkYW87CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGlzU2VsbGVyKGFkZHJlc3MgX3F1ZXJ5KSByZXR1cm5zKGJvb2wgaXNzZWxsZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBzZWxsZXJbX3F1ZXJ5XTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyU2VsbGVyKGFkZHJlc3MgX3Rva2Vuc2FsZXMpIGlmRGFvIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBzZWxsZXJbX3Rva2Vuc2FsZXNdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3RlclNlbGxlcihhZGRyZXNzIF90b2tlbnNhbGVzKSBpZkRhbyByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgICAgICAgICAgc2VsbGVyW190b2tlbnNhbGVzXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRPd25lcihhZGRyZXNzIF9uZXdvd25lcikgaWZEYW8gcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIGlmIChCYWRnZShiYWRnZUxlZGdlcikuc2V0T3duZXIoX25ld293bmVyKSkgewogICAgICAgICAgICAgICAgICAgICAgICBvd25lciA9IF9uZXdvd25lcjsKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzczsKICAgICAgICB9Cgp9'.
	

]
