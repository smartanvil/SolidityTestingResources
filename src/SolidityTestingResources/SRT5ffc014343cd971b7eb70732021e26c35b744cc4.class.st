Class {
	#name : #SRT5ffc014343cd971b7eb70732021e26c35b744cc4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ffc014343cd971b7eb70732021e26c35b744cc4 >> base64 [
	^ ''.
	

]
