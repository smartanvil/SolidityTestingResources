Class {
	#name : #SRT76a0238bd8Db4CA6e17E9691E32A6626E202bFc0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76a0238bd8Db4CA6e17E9691E32A6626E202bFc0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovLyBjb3B5cmlnaHQgPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImM4YWJhN2E2YmNhOWFiYmM4OGFhYjFiY2FkYmNhMGFkYmFlNmFiYTdhNSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4KCmNvbnRyYWN0IEJhc2ljQWNjZXNzQ29udHJvbCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3NbXSBwdWJsaWMgbW9kZXJhdG9yczsKCiAgICBmdW5jdGlvbiBCYXNpY0FjY2Vzc0NvbnRyb2woKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5TW9kZXJhdG9ycygpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICBib29sIGZvdW5kID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodWludCBpbmRleCA9IDA7IGluZGV4IDwgbW9kZXJhdG9ycy5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgIGlmIChtb2RlcmF0b3JzW2luZGV4XSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcXVpcmUoZm91bmQpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENoYW5nZU93bmVyKGFkZHJlc3MgX25ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBpZiAoX25ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIEtpbGwoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIEFkZE1vZGVyYXRvcihhZGRyZXNzIF9uZXdNb2RlcmF0b3IpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChfbmV3TW9kZXJhdG9yICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgZm9yICh1aW50IGluZGV4ID0gMDsgaW5kZXggPCBtb2RlcmF0b3JzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgaWYgKG1vZGVyYXRvcnNbaW5kZXhdID09IF9uZXdNb2RlcmF0b3IpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbW9kZXJhdG9ycy5wdXNoKF9uZXdNb2RlcmF0b3IpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gUmVtb3ZlTW9kZXJhdG9yKGFkZHJlc3MgX29sZE1vZGVyYXRvcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdWludCBmb3VuZEluZGV4ID0gMDsKICAgICAgICBmb3IgKDsgZm91bmRJbmRleCA8IG1vZGVyYXRvcnMubGVuZ3RoOyBmb3VuZEluZGV4KyspIHsKICAgICAgICAgICAgaWYgKG1vZGVyYXRvcnNbZm91bmRJbmRleF0gPT0gX29sZE1vZGVyYXRvcikgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGZvdW5kSW5kZXggPCBtb2RlcmF0b3JzLmxlbmd0aCkgewogICAgICAgICAgICBtb2RlcmF0b3JzW2ZvdW5kSW5kZXhdID0gbW9kZXJhdG9yc1ttb2RlcmF0b3JzLmxlbmd0aC0xXTsKICAgICAgICAgICAgZGVsZXRlIG1vZGVyYXRvcnNbbW9kZXJhdG9ycy5sZW5ndGgtMV07CiAgICAgICAgICAgIG1vZGVyYXRvcnMubGVuZ3RoLS07CiAgICAgICAgfQogICAgfQp9Cgpjb250cmFjdCBCeXRldGhlck9WIGlzIEJhc2ljQWNjZXNzQ29udHJvbHsKICAgIGVudW0gUmVzdWx0Q29kZSB7IAogICAgICAgIFNVQ0NFU1MsCiAgICAgICAgRVJST1JfRVhJU1QsCiAgICAgICAgRVJST1JfTk9UX0VYSVNULAogICAgICAgIEVSUk9SX1BBUkFNCiAgICB9CgogICAgc3RydWN0IE93bmVyU2hpcCB7CiAgICAgICAgYWRkcmVzcyBteUV0aGVyOwogICAgICAgIHVpbnQgdmVyaWZ5Q29kZTsKICAgICAgICBzdHJpbmcgcmVmZXJDb2RlOwogICAgICAgIHVpbnQgY3JlYXRlVGltZTsKICAgIH0KICAgIAogICAgdWludCBwdWJsaWMgdG90YWwgPSAwOwogICAgYm9vbCBwdWJsaWMgbWFpbnRhaW5pbmcgPSBmYWxzZTsKICAgIAogICAgLy8gYml0Y29pbl9hZGRyZXNzIC0+IE93bmVyU2hpcCBsaXN0CiAgICBtYXBwaW5nKHN0cmluZyA9PiBPd25lclNoaXBbXSkgaXRlbXM7CiAgICAKICAgIG1vZGlmaWVyIGlzQWN0aXZlIHsKICAgICAgICByZXF1aXJlKG1haW50YWluaW5nICE9IHRydWUpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQnl0ZXRoZXJPVigpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgcHVibGljIHt9CgogICAgLy8gZXZlbnQKICAgIGV2ZW50IExvZ0NyZWF0ZShieXRlczMyIGluZGV4ZWQgYnRjQWRkcmVzcywgdWludCB2ZXJpZnlDb2RlLCBSZXN1bHRDb2RlIHJlc3VsdCk7CiAgICAKICAgIC8vIG1vZGVyYXRvcnMgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIFRvZ2dsZU1haW50ZW5hbmNlKCkgb25seU1vZGVyYXRvcnMgcHVibGljIHsKICAgICAgICBtYWludGFpbmluZyA9ICFtYWludGFpbmluZzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gVW5jbG9ja1ZlcmlmaWNhdGlvbihzdHJpbmcgX2J0Y0FkZHJlc3MsIHVpbnQgX3ZlcmlmeUNvZGUpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyByZXR1cm5zKFJlc3VsdENvZGUpIHsKICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgdmVyaWZ5IGNvZGUgbGlzdAogICAgICAgIHZhciBhcnJheSA9IGl0ZW1zW19idGNBZGRyZXNzXTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGk8YXJyYXkubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiAoYXJyYXlbaV0udmVyaWZ5Q29kZSA9PSBfdmVyaWZ5Q29kZSkgewogICAgICAgICAgICAgICAgaWYgKGkgIT0gYXJyYXkubGVuZ3RoLTEpIHsKICAgICAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGFycmF5W2FycmF5Lmxlbmd0aC0xXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlbGV0ZSBhcnJheVthcnJheS5sZW5ndGgtMV07CiAgICAgICAgICAgICAgICBhcnJheS5sZW5ndGgtLTsKICAgICAgICAgICAgICAgIHRvdGFsLS07CiAgICAgICAgICAgICAgICByZXR1cm4gUmVzdWx0Q29kZS5TVUNDRVNTOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBSZXN1bHRDb2RlLkVSUk9SX05PVF9FWElTVDsKICAgIH0KICAgIAogICAgLy8gcHVibGljIGZ1bmN0aW9uCiAgICBmdW5jdGlvbiBHZXRPd25lcnNoaXAoc3RyaW5nIF9idGNBZGRyZXNzLCB1aW50IF92ZXJpZnlDb2RlKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyhhZGRyZXNzLCBzdHJpbmcpIHsKICAgICAgICB2YXIgYXJyYXkgPSBpdGVtc1tfYnRjQWRkcmVzc107CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxhcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoYXJyYXlbaV0udmVyaWZ5Q29kZSA9PSBfdmVyaWZ5Q29kZSkgewogICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTsKICAgICAgICAgICAgICAgIHJldHVybiAoaXRlbS5teUV0aGVyLCBpdGVtLnJlZmVyQ29kZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICgwLCAiIik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEdldE93bmVyc2hpcEJ5QWRkcmVzcyhzdHJpbmcgX2J0Y0FkZHJlc3MsIGFkZHJlc3MgX2V0aGVyQWRkcmVzcykgY29uc3RhbnQgcHVibGljIHJldHVybnModWludCwgc3RyaW5nKSB7CiAgICAgICAgdmFyIGFycmF5ID0gaXRlbXNbX2J0Y0FkZHJlc3NdOwogICAgICAgIGZvciAodWludCBpPTA7IGk8YXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFycmF5W2ldLm15RXRoZXIgPT0gX2V0aGVyQWRkcmVzcykgewogICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTsKICAgICAgICAgICAgICAgIHJldHVybiAoaXRlbS52ZXJpZnlDb2RlLCBpdGVtLnJlZmVyQ29kZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICgwLCAiIik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEFkZE93bmVyc2hpcChzdHJpbmcgX2J0Y0FkZHJlc3MsIHVpbnQgX3ZlcmlmeUNvZGUsIHN0cmluZyBfcmVmZXJDb2RlKSBpc0FjdGl2ZSBwdWJsaWMgcmV0dXJucyhSZXN1bHRDb2RlKSB7CiAgICAgICAgaWYgKGJ5dGVzKF9idGNBZGRyZXNzKS5sZW5ndGggPT0gMCB8fCBfdmVyaWZ5Q29kZSA9PSAwKSB7CiAgICAgICAgICAgIExvZ0NyZWF0ZSgwLCBfdmVyaWZ5Q29kZSwgUmVzdWx0Q29kZS5FUlJPUl9QQVJBTSk7CiAgICAgICAgICAgIHJldHVybiBSZXN1bHRDb2RlLkVSUk9SX1BBUkFNOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBieXRlczMyIGJ0Y0FkZHJlc3NIYXNoID0ga2VjY2FrMjU2KF9idGNBZGRyZXNzKTsKICAgICAgICB2YXIgYXJyYXkgPSBpdGVtc1tfYnRjQWRkcmVzc107CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxhcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoYXJyYXlbaV0udmVyaWZ5Q29kZSA9PSBfdmVyaWZ5Q29kZSkgewogICAgICAgICAgICAgICAgTG9nQ3JlYXRlKGJ0Y0FkZHJlc3NIYXNoLCBfdmVyaWZ5Q29kZSwgUmVzdWx0Q29kZS5FUlJPUl9FWElTVCk7CiAgICAgICAgICAgICAgICByZXR1cm4gUmVzdWx0Q29kZS5FUlJPUl9FWElTVDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBPd25lclNoaXAgbWVtb3J5IGl0ZW07CiAgICAgICAgaXRlbS5teUV0aGVyID0gbXNnLnNlbmRlcjsKICAgICAgICBpdGVtLnZlcmlmeUNvZGUgPSBfdmVyaWZ5Q29kZTsKICAgICAgICBpdGVtLnJlZmVyQ29kZSA9IF9yZWZlckNvZGU7CiAgICAgICAgaXRlbS5jcmVhdGVUaW1lID0gbm93OwoKICAgICAgICB0b3RhbCsrOwogICAgICAgIGFycmF5LnB1c2goaXRlbSk7CiAgICAgICAgTG9nQ3JlYXRlKGJ0Y0FkZHJlc3NIYXNoLCBfdmVyaWZ5Q29kZSwgUmVzdWx0Q29kZS5TVUNDRVNTKTsKICAgICAgICByZXR1cm4gUmVzdWx0Q29kZS5TVUNDRVNTOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBHZXRWZXJpZnlDb2RlcyhzdHJpbmcgX2J0Y0FkZHJlc3MpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnRbXSkgewogICAgICAgIHZhciBhcnJheSA9IGl0ZW1zW19idGNBZGRyZXNzXTsKICAgICAgICB1aW50W10gbWVtb3J5IHZlcmlmeUNvZGVzID0gbmV3IHVpbnRbXShhcnJheS5sZW5ndGgpOwogICAgICAgIGZvciAodWludCBpPTA7IGk8YXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmVyaWZ5Q29kZXNbaV0gPSBhcnJheVtpXS52ZXJpZnlDb2RlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmVyaWZ5Q29kZXM7CiAgICB9Cn0='.
	

]
