Class {
	#name : #SRT92d3e963aa94d909869940a8d15fa16ccbc6655e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92d3e963aa94d909869940a8d15fa16ccbc6655e >> base64 [
	^ ''.
	

]
