Class {
	#name : #SRT522e7ff686caf7ee5a4063b577ccc7f07054294b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT522e7ff686caf7ee5a4063b577ccc7f07054294b >> base64 [
	^ ''.
	

]
