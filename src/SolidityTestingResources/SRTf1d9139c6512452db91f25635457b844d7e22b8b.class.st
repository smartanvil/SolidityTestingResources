Class {
	#name : #SRTf1d9139c6512452db91f25635457b844d7e22b8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf1d9139c6512452db91f25635457b844d7e22b8b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCmNvbnRyYWN0IEVSQzIwIHsKCiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnModWludCB0b3RhbFN1cHBseSk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMoYm9vbCBvayk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBDYXJib25UT0tFTiBpcyBFUkMyMAp7CiAgICB1c2luZyBTYWZlTWF0aAogICAgZm9yIHVpbnQyNTY7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGFkZHJlc3MgY2VudHJhbF9hY2NvdW50OwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VzOwogICAgIC8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50ICovCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIC8vIHRyYW5zZmVyIGZlZXMgZXZlbnQKICAgIGV2ZW50IFRyYW5zZmVyRmVlcyhhZGRyZXNzIGZyb20sIHVpbnQyNTYgdmFsdWUpOwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5Y2VudHJhbEFjY291bnQgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW50cmFsX2FjY291bnQpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ2FyYm9uVE9LRU4oKQogICAgewogICAgICAgIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwICoxMCoqNDsgLy8gMTAwIG1pbGxpb24sIFVwZGF0ZSB0b3RhbCBzdXBwbHkgaW5jbHVkZXMgNCAwJ3MgbW9yZSB0byBnbyBmb3IgdGhlIGRlY2ltYWxzCiAgICAgICAgbmFtZSA9ICJDQVJCT04gVE9LRU4gQ0xBU1NJQyI7IC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9ICJDVEMiOyAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gNDsgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQogICAgCiAgICAgIC8vIEZ1bmN0aW9uIGFsbG93cyBmb3IgZXh0ZXJuYWwgYWNjZXNzIHRvIHRva2VuSG9sZXIncyBCYWxhbmNlCiAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHRva2VuSG9sZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIAogICB7CiAgICAgICByZXR1cm4gYmFsYW5jZXNbdG9rZW5Ib2xkZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICByZXR1cm4gdG90YWxTdXBwbHk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldF9jZW50cmFsQWNjb3VudChhZGRyZXNzIGNlbnRyYWxfQWNjY291bnQpIG9ubHlPd25lcgogICAgewogICAgICAgIGNlbnRyYWxfYWNjb3VudCA9IGNlbnRyYWxfQWNjY291bnQ7CiAgICB9CgogIAogICAgLyogU2VuZCBjb2lucyBkdXJpbmcgdHJhbnNhY3Rpb25zKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIG9rKSAKICAgIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7IC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZihtc2cuc2VuZGVyID09IG93bmVyKQogICAgICAgIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB1aW50MjU2IHRyYW5zX2ZlZXMgPSBTYWZlTWF0aC5kaXYoX3ZhbHVlLDEwMDApOyAvLyBpbXBsZW1lbnRpbmcgdHJhbnNhY3Rpb24gZmVlcyAuMDAxJSBhbmQgYWRkaW5nIHRvIG93bmVyIGJhbGFuY2UKICAgICAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAoX3ZhbHVlICsgdHJhbnNfZmVlcykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gKF92YWx1ZSArIHRyYW5zX2ZlZXMpOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJdICs9IHRyYW5zX2ZlZXM7IAogICAgICAgICAgICBUcmFuc2ZlckZlZXMobXNnLnNlbmRlcix0cmFuc19mZWVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgIC8qIFNlbmQgY29pbnMgZHVyaW5nIElDTyovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckNvaW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIG9rKSAKICAgIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7IC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdWludDI1NiB0cmFuc19mZWVzID0gU2FmZU1hdGguZGl2KF92YWx1ZSwxMDAwKTsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7IC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPCAoX3ZhbHVlICsgdHJhbnNfZmVlcykpIHJldmVydCgpOyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VzW190b10pIHJldmVydCgpOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgaWYgKChfdmFsdWUgKyB0cmFuc19mZWVzKSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHJldmVydCgpOyAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICAKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IChfdmFsdWUgKyB0cmFuc19mZWVzKTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7IC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYmFsYW5jZXNbb3duZXJdICs9IHRyYW5zX2ZlZXM7CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gemVyb0ZlZXNUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHljZW50cmFsQWNjb3VudCByZXR1cm5zKGJvb2wgc3VjY2VzcykgCiAgICB7CiAgICAgICAgdWludDI1NiB0cmFuc19mZWVzID0gU2FmZU1hdGguZGl2KF92YWx1ZSwxMDAwKTsgLy8gaW1wbGVtZW50aW5nIHRyYW5zYWN0aW9uIGZlZXMgLjAwMSUgYW5kIGFkZGluZyB0byBvd25lciBiYWxhbmNlCiAgICAgICAgaWYoYmFsYW5jZXNbX2Zyb21dID4gKF92YWx1ZSArIHRyYW5zX2ZlZXMpICYmIF92YWx1ZSA+IDApCiAgICAgICAgewogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSAoX3ZhbHVlICsgdHJhbnNfZmVlcyk7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGJhbGFuY2VzW293bmVyXSArPSB0cmFuc19mZWVzOyAKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyYnkoYWRkcmVzcyBfZnJvbSxhZGRyZXNzIF90byx1aW50MjU2IF9hbW91bnQpIG9ubHljZW50cmFsQWNjb3VudCByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudCAmJgogICAgICAgICAgICBfYW1vdW50ID4gMCAmJgogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgCgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgYmFsYW5jZXNbbmV3T3duZXJdICs9IGJhbGFuY2VzW293bmVyXTsKICAgICAgYmFsYW5jZXNbb3duZXJdID0gMDsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKCiAgICB9CiAgICAKICAgICAvLyBGYWlsc2FmZSBkcmFpbgoKICAgIGZ1bmN0aW9uIGRyYWluKCkgb25seU93bmVyIHsKICAgICAgICBvd25lci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQogICAgCn0='.
	

]
