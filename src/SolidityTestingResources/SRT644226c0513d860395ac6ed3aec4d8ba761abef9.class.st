Class {
	#name : #SRT644226c0513d860395ac6ed3aec4d8ba761abef9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT644226c0513d860395ac6ed3aec4d8ba761abef9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgoKaW50ZXJmYWNlIFN2RW5zIHsKICAgIC8vIExvZ2dlZCB3aGVuIHRoZSBvd25lciBvZiBhIG5vZGUgYXNzaWducyBhIG5ldyBvd25lciB0byBhIHN1Ym5vZGUuCiAgICBldmVudCBOZXdPd25lcihieXRlczMyIGluZGV4ZWQgbm9kZSwgYnl0ZXMzMiBpbmRleGVkIGxhYmVsLCBhZGRyZXNzIG93bmVyKTsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgb3duZXIgb2YgYSBub2RlIHRyYW5zZmVycyBvd25lcnNoaXAgdG8gYSBuZXcgYWNjb3VudC4KICAgIGV2ZW50IFRyYW5zZmVyKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBhZGRyZXNzIG93bmVyKTsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgcmVzb2x2ZXIgZm9yIGEgbm9kZSBjaGFuZ2VzLgogICAgZXZlbnQgTmV3UmVzb2x2ZXIoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGFkZHJlc3MgcmVzb2x2ZXIpOwoKICAgIC8vIExvZ2dlZCB3aGVuIHRoZSBUVEwgb2YgYSBub2RlIGNoYW5nZXMKICAgIGV2ZW50IE5ld1RUTChieXRlczMyIGluZGV4ZWQgbm9kZSwgdWludDY0IHR0bCk7CgoKICAgIGZ1bmN0aW9uIHNldFN1Ym5vZGVPd25lcihieXRlczMyIG5vZGUsIGJ5dGVzMzIgbGFiZWwsIGFkZHJlc3Mgb3duZXIpIGV4dGVybmFsIHJldHVybnMgKGJ5dGVzMzIpOwogICAgZnVuY3Rpb24gc2V0UmVzb2x2ZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIHJlc29sdmVyKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHNldE93bmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyBvd25lcikgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBzZXRUVEwoYnl0ZXMzMiBub2RlLCB1aW50NjQgdHRsKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIG93bmVyKGJ5dGVzMzIgbm9kZSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIHJlc29sdmVyKGJ5dGVzMzIgbm9kZSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIHR0bChieXRlczMyIG5vZGUpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDY0KTsKfQoKCmludGVyZmFjZSBFTlMgewogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIG93bmVyIG9mIGEgbm9kZSBhc3NpZ25zIGEgbmV3IG93bmVyIHRvIGEgc3Vibm9kZS4KICAgIGV2ZW50IE5ld093bmVyKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBieXRlczMyIGluZGV4ZWQgbGFiZWwsIGFkZHJlc3Mgb3duZXIpOwoKICAgIC8vIExvZ2dlZCB3aGVuIHRoZSBvd25lciBvZiBhIG5vZGUgdHJhbnNmZXJzIG93bmVyc2hpcCB0byBhIG5ldyBhY2NvdW50LgogICAgZXZlbnQgVHJhbnNmZXIoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGFkZHJlc3Mgb3duZXIpOwoKICAgIC8vIExvZ2dlZCB3aGVuIHRoZSByZXNvbHZlciBmb3IgYSBub2RlIGNoYW5nZXMuCiAgICBldmVudCBOZXdSZXNvbHZlcihieXRlczMyIGluZGV4ZWQgbm9kZSwgYWRkcmVzcyByZXNvbHZlcik7CgogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIFRUTCBvZiBhIG5vZGUgY2hhbmdlcwogICAgZXZlbnQgTmV3VFRMKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCB1aW50NjQgdHRsKTsKCgogICAgZnVuY3Rpb24gc2V0U3Vibm9kZU93bmVyKGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiBsYWJlbCwgYWRkcmVzcyBvd25lcikgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBzZXRSZXNvbHZlcihieXRlczMyIG5vZGUsIGFkZHJlc3MgcmVzb2x2ZXIpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gc2V0T3duZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIG93bmVyKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHNldFRUTChieXRlczMyIG5vZGUsIHVpbnQ2NCB0dGwpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gb3duZXIoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MpOwogICAgZnVuY3Rpb24gcmVzb2x2ZXIoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MpOwogICAgZnVuY3Rpb24gdHRsKGJ5dGVzMzIgbm9kZSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50NjQpOwp9CgoKY29udHJhY3QgU3ZFbnNSZWdpc3RyeSBpcyBTdkVucyB7CiAgICBzdHJ1Y3QgUmVjb3JkIHsKICAgICAgICBhZGRyZXNzIG93bmVyOwogICAgICAgIGFkZHJlc3MgcmVzb2x2ZXI7CiAgICAgICAgdWludDY0IHR0bDsKICAgIH0KCiAgICBtYXBwaW5nIChieXRlczMyID0+IFJlY29yZCkgcmVjb3JkczsKCiAgICAvLyBQZXJtaXRzIG1vZGlmaWNhdGlvbnMgb25seSBieSB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBub2RlLgogICAgbW9kaWZpZXIgb25seV9vd25lcihieXRlczMyIG5vZGUpIHsKICAgICAgICByZXF1aXJlKHJlY29yZHNbbm9kZV0ub3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ29uc3RydWN0cyBhIG5ldyBFTlMgcmVnaXN0cmFyLgogICAgICovCiAgICBmdW5jdGlvbiBTdkVuc1JlZ2lzdHJ5KCkgcHVibGljIHsKICAgICAgICByZWNvcmRzWzB4MF0ub3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIGEgbm9kZSB0byBhIG5ldyBhZGRyZXNzLiBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIGN1cnJlbnQgb3duZXIgb2YgdGhlIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byB0cmFuc2ZlciBvd25lcnNoaXAgb2YuCiAgICAgKiBAcGFyYW0gb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBvd25lci4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0T3duZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIG93bmVyKSBleHRlcm5hbCBvbmx5X293bmVyKG5vZGUpIHsKICAgICAgICBlbWl0IFRyYW5zZmVyKG5vZGUsIG93bmVyKTsKICAgICAgICByZWNvcmRzW25vZGVdLm93bmVyID0gb3duZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVycyBvd25lcnNoaXAgb2YgYSBzdWJub2RlIGtlY2NhazI1Nihub2RlLCBsYWJlbCkgdG8gYSBuZXcgYWRkcmVzcy4gTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGUgcGFyZW50IG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgcGFyZW50IG5vZGUuCiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGhhc2ggb2YgdGhlIGxhYmVsIHNwZWNpZnlpbmcgdGhlIHN1Ym5vZGUuCiAgICAgKiBAcGFyYW0gb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBvd25lci4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0U3Vibm9kZU93bmVyKGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiBsYWJlbCwgYWRkcmVzcyBvd25lcikgZXh0ZXJuYWwgb25seV9vd25lcihub2RlKSByZXR1cm5zIChieXRlczMyKSB7CiAgICAgICAgYnl0ZXMzMiBzdWJub2RlID0ga2VjY2FrMjU2KG5vZGUsIGxhYmVsKTsKICAgICAgICBlbWl0IE5ld093bmVyKG5vZGUsIGxhYmVsLCBvd25lcik7CiAgICAgICAgcmVjb3Jkc1tzdWJub2RlXS5vd25lciA9IG93bmVyOwogICAgICAgIHJldHVybiBzdWJub2RlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTZXRzIHRoZSByZXNvbHZlciBhZGRyZXNzIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byB1cGRhdGUuCiAgICAgKiBAcGFyYW0gcmVzb2x2ZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHJlc29sdmVyLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRSZXNvbHZlcihieXRlczMyIG5vZGUsIGFkZHJlc3MgcmVzb2x2ZXIpIGV4dGVybmFsIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIGVtaXQgTmV3UmVzb2x2ZXIobm9kZSwgcmVzb2x2ZXIpOwogICAgICAgIHJlY29yZHNbbm9kZV0ucmVzb2x2ZXIgPSByZXNvbHZlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0cyB0aGUgVFRMIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byB1cGRhdGUuCiAgICAgKiBAcGFyYW0gdHRsIFRoZSBUVEwgaW4gc2Vjb25kcy4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0VFRMKGJ5dGVzMzIgbm9kZSwgdWludDY0IHR0bCkgZXh0ZXJuYWwgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgZW1pdCBOZXdUVEwobm9kZSwgdHRsKTsKICAgICAgICByZWNvcmRzW25vZGVdLnR0bCA9IHR0bDsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlIHNwZWNpZmllZCBub2RlLgogICAgICogQHBhcmFtIG5vZGUgVGhlIHNwZWNpZmllZCBub2RlLgogICAgICogQHJldHVybiBhZGRyZXNzIG9mIHRoZSBvd25lci4KICAgICAqLwogICAgZnVuY3Rpb24gb3duZXIoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1tub2RlXS5vd25lcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgcmVzb2x2ZXIgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBzcGVjaWZpZWQgbm9kZS4KICAgICAqIEByZXR1cm4gYWRkcmVzcyBvZiB0aGUgcmVzb2x2ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlc29sdmVyKGJ5dGVzMzIgbm9kZSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNbbm9kZV0ucmVzb2x2ZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIFRUTCBvZiBhIG5vZGUsIGFuZCBhbnkgcmVjb3JkcyBhc3NvY2lhdGVkIHdpdGggaXQuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgc3BlY2lmaWVkIG5vZGUuCiAgICAgKiBAcmV0dXJuIHR0bCBvZiB0aGUgbm9kZS4KICAgICAqLwogICAgZnVuY3Rpb24gdHRsKGJ5dGVzMzIgbm9kZSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1tub2RlXS50dGw7CiAgICB9Cgp9Cgpjb250cmFjdCBQdWJsaWNSZXNvbHZlciB7CgogICAgYnl0ZXM0IGNvbnN0YW50IElOVEVSRkFDRV9NRVRBX0lEID0gMHgwMWZmYzlhNzsKICAgIGJ5dGVzNCBjb25zdGFudCBBRERSX0lOVEVSRkFDRV9JRCA9IDB4M2IzYjU3ZGU7CiAgICBieXRlczQgY29uc3RhbnQgQ09OVEVOVF9JTlRFUkZBQ0VfSUQgPSAweGQ4Mzg5ZGM1OwogICAgYnl0ZXM0IGNvbnN0YW50IE5BTUVfSU5URVJGQUNFX0lEID0gMHg2OTFmMzQzMTsKICAgIGJ5dGVzNCBjb25zdGFudCBBQklfSU5URVJGQUNFX0lEID0gMHgyMjAzYWI1NjsKICAgIGJ5dGVzNCBjb25zdGFudCBQVUJLRVlfSU5URVJGQUNFX0lEID0gMHhjODY5MDIzMzsKICAgIGJ5dGVzNCBjb25zdGFudCBURVhUX0lOVEVSRkFDRV9JRCA9IDB4NTlkMWQ0M2M7CgogICAgZXZlbnQgQWRkckNoYW5nZWQoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGFkZHJlc3MgYSk7CiAgICBldmVudCBDb250ZW50Q2hhbmdlZChieXRlczMyIGluZGV4ZWQgbm9kZSwgYnl0ZXMzMiBoYXNoKTsKICAgIGV2ZW50IE5hbWVDaGFuZ2VkKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBzdHJpbmcgbmFtZSk7CiAgICBldmVudCBBQklDaGFuZ2VkKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCB1aW50MjU2IGluZGV4ZWQgY29udGVudFR5cGUpOwogICAgZXZlbnQgUHVia2V5Q2hhbmdlZChieXRlczMyIGluZGV4ZWQgbm9kZSwgYnl0ZXMzMiB4LCBieXRlczMyIHkpOwogICAgZXZlbnQgVGV4dENoYW5nZWQoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIHN0cmluZyBpbmRleGVkS2V5LCBzdHJpbmcga2V5KTsKCiAgICBzdHJ1Y3QgUHVibGljS2V5IHsKICAgICAgICBieXRlczMyIHg7CiAgICAgICAgYnl0ZXMzMiB5OwogICAgfQoKICAgIHN0cnVjdCBSZWNvcmQgewogICAgICAgIGFkZHJlc3MgYWRkcjsKICAgICAgICBieXRlczMyIGNvbnRlbnQ7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgUHVibGljS2V5IHB1YmtleTsKICAgICAgICBtYXBwaW5nKHN0cmluZz0+c3RyaW5nKSB0ZXh0OwogICAgICAgIG1hcHBpbmcodWludDI1Nj0+Ynl0ZXMpIGFiaXM7CiAgICB9CgogICAgRU5TIGVuczsKCiAgICBtYXBwaW5nIChieXRlczMyID0+IFJlY29yZCkgcmVjb3JkczsKCiAgICBtb2RpZmllciBvbmx5X293bmVyKGJ5dGVzMzIgbm9kZSkgewogICAgICAgIHJlcXVpcmUoZW5zLm93bmVyKG5vZGUpID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDb25zdHJ1Y3Rvci4KICAgICAqIEBwYXJhbSBlbnNBZGRyIFRoZSBFTlMgcmVnaXN0cmFyIGNvbnRyYWN0LgogICAgICovCiAgICBmdW5jdGlvbiBQdWJsaWNSZXNvbHZlcihFTlMgZW5zQWRkcikgcHVibGljIHsKICAgICAgICBlbnMgPSBlbnNBZGRyOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoYXQgbm9kZSBpbiB0aGUgRU5TIHJlZ2lzdHJ5LgogICAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gdXBkYXRlLgogICAgICogQHBhcmFtIGFkZHIgVGhlIGFkZHJlc3MgdG8gc2V0LgogICAgICovCiAgICBmdW5jdGlvbiBzZXRBZGRyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyBhZGRyKSBwdWJsaWMgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgcmVjb3Jkc1tub2RlXS5hZGRyID0gYWRkcjsKICAgICAgICBlbWl0IEFkZHJDaGFuZ2VkKG5vZGUsIGFkZHIpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgY29udGVudCBoYXNoIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIE1heSBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIgb2YgdGhhdCBub2RlIGluIHRoZSBFTlMgcmVnaXN0cnkuCiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNvdXJjZSB0eXBlIGlzIG5vdCBzdGFuZGFyZGl6ZWQsIGFuZCB3aWxsIGxpa2VseSBjaGFuZ2UKICAgICAqIGluIGZ1dHVyZSB0byBhIHJlc291cmNlIHR5cGUgYmFzZWQgb24gbXVsdGloYXNoLgogICAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gdXBkYXRlLgogICAgICogQHBhcmFtIGhhc2ggVGhlIGNvbnRlbnQgaGFzaCB0byBzZXQKICAgICAqLwogICAgZnVuY3Rpb24gc2V0Q29udGVudChieXRlczMyIG5vZGUsIGJ5dGVzMzIgaGFzaCkgcHVibGljIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIHJlY29yZHNbbm9kZV0uY29udGVudCA9IGhhc2g7CiAgICAgICAgZW1pdCBDb250ZW50Q2hhbmdlZChub2RlLCBoYXNoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgdGhlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLCBmb3IgcmV2ZXJzZSByZWNvcmRzLgogICAgICogTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGF0IG5vZGUgaW4gdGhlIEVOUyByZWdpc3RyeS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRvIHNldC4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0TmFtZShieXRlczMyIG5vZGUsIHN0cmluZyBuYW1lKSBwdWJsaWMgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgcmVjb3Jkc1tub2RlXS5uYW1lID0gbmFtZTsKICAgICAgICBlbWl0IE5hbWVDaGFuZ2VkKG5vZGUsIG5hbWUpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgQUJJIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIE5vZGVzIG1heSBoYXZlIG9uZSBBQkkgb2YgZWFjaCBjb250ZW50IHR5cGUuIFRvIHJlbW92ZSBhbiBBQkksIHNldCBpdCB0bwogICAgICogdGhlIGVtcHR5IHN0cmluZy4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBjb250ZW50VHlwZSBUaGUgY29udGVudCB0eXBlIG9mIHRoZSBBQkkKICAgICAqIEBwYXJhbSBkYXRhIFRoZSBBQkkgZGF0YS4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QUJJKGJ5dGVzMzIgbm9kZSwgdWludDI1NiBjb250ZW50VHlwZSwgYnl0ZXMgZGF0YSkgcHVibGljIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIC8vIENvbnRlbnQgdHlwZXMgbXVzdCBiZSBwb3dlcnMgb2YgMgogICAgICAgIHJlcXVpcmUoKChjb250ZW50VHlwZSAtIDEpICYgY29udGVudFR5cGUpID09IDApOwoKICAgICAgICByZWNvcmRzW25vZGVdLmFiaXNbY29udGVudFR5cGVdID0gZGF0YTsKICAgICAgICBlbWl0IEFCSUNoYW5nZWQobm9kZSwgY29udGVudFR5cGUpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgU0VDUDI1NmsxIHB1YmxpYyBrZXkgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5CiAgICAgKiBAcGFyYW0geCB0aGUgWCBjb29yZGluYXRlIG9mIHRoZSBjdXJ2ZSBwb2ludCBmb3IgdGhlIHB1YmxpYyBrZXkuCiAgICAgKiBAcGFyYW0geSB0aGUgWSBjb29yZGluYXRlIG9mIHRoZSBjdXJ2ZSBwb2ludCBmb3IgdGhlIHB1YmxpYyBrZXkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFB1YmtleShieXRlczMyIG5vZGUsIGJ5dGVzMzIgeCwgYnl0ZXMzMiB5KSBwdWJsaWMgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgcmVjb3Jkc1tub2RlXS5wdWJrZXkgPSBQdWJsaWNLZXkoeCwgeSk7CiAgICAgICAgZW1pdCBQdWJrZXlDaGFuZ2VkKG5vZGUsIHgsIHkpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0cyB0aGUgdGV4dCBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZSBhbmQga2V5LgogICAgICogTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGF0IG5vZGUgaW4gdGhlIEVOUyByZWdpc3RyeS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBrZXkgVGhlIGtleSB0byBzZXQuCiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHRleHQgZGF0YSB2YWx1ZSB0byBzZXQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFRleHQoYnl0ZXMzMiBub2RlLCBzdHJpbmcga2V5LCBzdHJpbmcgdmFsdWUpIHB1YmxpYyBvbmx5X293bmVyKG5vZGUpIHsKICAgICAgICByZWNvcmRzW25vZGVdLnRleHRba2V5XSA9IHZhbHVlOwogICAgICAgIGVtaXQgVGV4dENoYW5nZWQobm9kZSwga2V5LCBrZXkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgdGV4dCBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZSBhbmQga2V5LgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5LgogICAgICogQHBhcmFtIGtleSBUaGUgdGV4dCBkYXRhIGtleSB0byBxdWVyeS4KICAgICAqIEByZXR1cm4gVGhlIGFzc29jaWF0ZWQgdGV4dCBkYXRhLgogICAgICovCiAgICBmdW5jdGlvbiB0ZXh0KGJ5dGVzMzIgbm9kZSwgc3RyaW5nIGtleSkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNbbm9kZV0udGV4dFtrZXldOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgU0VDUDI1NmsxIHB1YmxpYyBrZXkgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLgogICAgICogRGVmaW5lZCBpbiBFSVAgNjE5LgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5CiAgICAgKiBAcmV0dXJuIHgsIHkgdGhlIFggYW5kIFkgY29vcmRpbmF0ZXMgb2YgdGhlIGN1cnZlIHBvaW50IGZvciB0aGUgcHVibGljIGtleS4KICAgICAqLwogICAgZnVuY3Rpb24gcHVia2V5KGJ5dGVzMzIgbm9kZSkgcHVibGljIHZpZXcgcmV0dXJucyAoYnl0ZXMzMiB4LCBieXRlczMyIHkpIHsKICAgICAgICByZXR1cm4gKHJlY29yZHNbbm9kZV0ucHVia2V5LngsIHJlY29yZHNbbm9kZV0ucHVia2V5LnkpOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgQUJJIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIERlZmluZWQgaW4gRUlQMjA1LgogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5CiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVzIEEgYml0d2lzZSBPUiBvZiB0aGUgQUJJIGZvcm1hdHMgYWNjZXB0ZWQgYnkgdGhlIGNhbGxlci4KICAgICAqIEByZXR1cm4gY29udGVudFR5cGUgVGhlIGNvbnRlbnQgdHlwZSBvZiB0aGUgcmV0dXJuIHZhbHVlCiAgICAgKiBAcmV0dXJuIGRhdGEgVGhlIEFCSSBkYXRhCiAgICAgKi8KICAgIGZ1bmN0aW9uIEFCSShieXRlczMyIG5vZGUsIHVpbnQyNTYgY29udGVudFR5cGVzKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGNvbnRlbnRUeXBlLCBieXRlcyBkYXRhKSB7CiAgICAgICAgUmVjb3JkIHN0b3JhZ2UgcmVjb3JkID0gcmVjb3Jkc1tub2RlXTsKICAgICAgICBmb3IgKGNvbnRlbnRUeXBlID0gMTsgY29udGVudFR5cGUgPD0gY29udGVudFR5cGVzOyBjb250ZW50VHlwZSA8PD0gMSkgewogICAgICAgICAgICBpZiAoKGNvbnRlbnRUeXBlICYgY29udGVudFR5cGVzKSAhPSAwICYmIHJlY29yZC5hYmlzW2NvbnRlbnRUeXBlXS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBkYXRhID0gcmVjb3JkLmFiaXNbY29udGVudFR5cGVdOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnRlbnRUeXBlID0gMDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLCBmb3IgcmV2ZXJzZSByZWNvcmRzLgogICAgICogRGVmaW5lZCBpbiBFSVAxODEuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuCiAgICAgKiBAcmV0dXJuIFRoZSBhc3NvY2lhdGVkIG5hbWUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5hbWUoYnl0ZXMzMiBub2RlKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1tub2RlXS5uYW1lOwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgY29udGVudCBoYXNoIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4KICAgICAqIE5vdGUgdGhhdCB0aGlzIHJlc291cmNlIHR5cGUgaXMgbm90IHN0YW5kYXJkaXplZCwgYW5kIHdpbGwgbGlrZWx5IGNoYW5nZQogICAgICogaW4gZnV0dXJlIHRvIGEgcmVzb3VyY2UgdHlwZSBiYXNlZCBvbiBtdWx0aWhhc2guCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuCiAgICAgKiBAcmV0dXJuIFRoZSBhc3NvY2lhdGVkIGNvbnRlbnQgaGFzaC4KICAgICAqLwogICAgZnVuY3Rpb24gY29udGVudChieXRlczMyIG5vZGUpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1tub2RlXS5jb250ZW50OwogICAgfQoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuCiAgICAgKiBAcmV0dXJuIFRoZSBhc3NvY2lhdGVkIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZHIoYnl0ZXMzMiBub2RlKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNbbm9kZV0uYWRkcjsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVzb2x2ZXIgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgaGFzaC4KICAgICAqIEBwYXJhbSBpbnRlcmZhY2VJRCBUaGUgSUQgb2YgdGhlIGludGVyZmFjZSB0byBjaGVjayBmb3IuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGNvbnRyYWN0IGltcGxlbWVudHMgdGhlIHJlcXVlc3RlZCBpbnRlcmZhY2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHN1cHBvcnRzSW50ZXJmYWNlKGJ5dGVzNCBpbnRlcmZhY2VJRCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBpbnRlcmZhY2VJRCA9PSBBRERSX0lOVEVSRkFDRV9JRCB8fAogICAgICAgIGludGVyZmFjZUlEID09IENPTlRFTlRfSU5URVJGQUNFX0lEIHx8CiAgICAgICAgaW50ZXJmYWNlSUQgPT0gTkFNRV9JTlRFUkZBQ0VfSUQgfHwKICAgICAgICBpbnRlcmZhY2VJRCA9PSBBQklfSU5URVJGQUNFX0lEIHx8CiAgICAgICAgaW50ZXJmYWNlSUQgPT0gUFVCS0VZX0lOVEVSRkFDRV9JRCB8fAogICAgICAgIGludGVyZmFjZUlEID09IFRFWFRfSU5URVJGQUNFX0lEIHx8CiAgICAgICAgaW50ZXJmYWNlSUQgPT0gSU5URVJGQUNFX01FVEFfSUQ7CiAgICB9Cn0KCmNvbnRyYWN0IFN2RW5zUmVnaXN0cmFyIHsKICAgIFN2RW5zIHB1YmxpYyBlbnM7CiAgICBieXRlczMyIHB1YmxpYyByb290Tm9kZTsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gYm9vbCkga25vd25Ob2RlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgYWRtaW5zOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIG1vZGlmaWVyIHJlcShib29sIGMpIHsKICAgICAgICByZXF1aXJlKGMpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogQ29uc3RydWN0b3IuCiAgICAgKiBAcGFyYW0gZW5zQWRkciBUaGUgYWRkcmVzcyBvZiB0aGUgRU5TIHJlZ2lzdHJ5LgogICAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdGhhdCB0aGlzIHJlZ2lzdHJhciBhZG1pbmlzdGVycy4KICAgICAqLwogICAgZnVuY3Rpb24gU3ZFbnNSZWdpc3RyYXIoU3ZFbnMgZW5zQWRkciwgYnl0ZXMzMiBub2RlKSBwdWJsaWMgewogICAgICAgIGVucyA9IGVuc0FkZHI7CiAgICAgICAgcm9vdE5vZGUgPSBub2RlOwogICAgICAgIGFkbWluc1ttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZEFkbWluKGFkZHJlc3MgbmV3QWRtaW4pIHJlcShhZG1pbnNbbXNnLnNlbmRlcl0pIGV4dGVybmFsIHsKICAgICAgICBhZG1pbnNbbmV3QWRtaW5dID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1BZG1pbihhZGRyZXNzIG9sZEFkbWluKSByZXEoYWRtaW5zW21zZy5zZW5kZXJdKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShvbGRBZG1pbiAhPSBtc2cuc2VuZGVyICYmIG9sZEFkbWluICE9IG93bmVyKTsKICAgICAgICBhZG1pbnNbb2xkQWRtaW5dID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2hPd25lcihhZGRyZXNzIG5ld093bmVyLCBib29sIHJlbVByZXZPd25lckFzQWRtaW4pIHJlcShtc2cuc2VuZGVyID09IG93bmVyKSBleHRlcm5hbCB7CiAgICAgICAgaWYgKHJlbVByZXZPd25lckFzQWRtaW4pIHsKICAgICAgICAgICAgYWRtaW5zW293bmVyXSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIGFkbWluc1tuZXdPd25lcl0gPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgYSBuYW1lIHRoYXQncyBub3QgY3VycmVudGx5IHJlZ2lzdGVyZWQKICAgICAqIEBwYXJhbSBzdWJub2RlIFRoZSBoYXNoIG9mIHRoZSBsYWJlbCB0byByZWdpc3Rlci4KICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBvd25lci4KICAgICAqLwogICAgZnVuY3Rpb24gcmVnaXN0ZXIoYnl0ZXMzMiBzdWJub2RlLCBhZGRyZXNzIF9vd25lcikgcmVxKGFkbWluc1ttc2cuc2VuZGVyXSkgZXh0ZXJuYWwgewogICAgICAgIF9zZXRTdWJub2RlT3duZXIoc3Vibm9kZSwgX293bmVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIGEgbmFtZSB0aGF0J3Mgbm90IGN1cnJlbnRseSByZWdpc3RlcmVkCiAgICAgKiBAcGFyYW0gc3Vibm9kZVN0ciBUaGUgbGFiZWwgdG8gcmVnaXN0ZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgb3duZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTmFtZShzdHJpbmcgc3Vibm9kZVN0ciwgYWRkcmVzcyBfb3duZXIpIHJlcShhZG1pbnNbbXNnLnNlbmRlcl0pIGV4dGVybmFsIHsKICAgICAgICAvLyBsYWJlbGhhc2gKICAgICAgICBieXRlczMyIHN1Ym5vZGUgPSBrZWNjYWsyNTYoc3Vibm9kZVN0cik7CiAgICAgICAgX3NldFN1Ym5vZGVPd25lcihzdWJub2RlLCBfb3duZXIpOwogICAgfQoKICAgIC8qKgogICAgICogSU5URVJOQUwgLSBSZWdpc3RlciBhIG5hbWUgdGhhdCdzIG5vdCBjdXJyZW50bHkgcmVnaXN0ZXJlZAogICAgICogQHBhcmFtIHN1Ym5vZGUgVGhlIGhhc2ggb2YgdGhlIGxhYmVsIHRvIHJlZ2lzdGVyLgogICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgogICAgICovCiAgICBmdW5jdGlvbiBfc2V0U3Vibm9kZU93bmVyKGJ5dGVzMzIgc3Vibm9kZSwgYWRkcmVzcyBfb3duZXIpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKCFrbm93bk5vZGVzW3N1Ym5vZGVdKTsKICAgICAgICBrbm93bk5vZGVzW3N1Ym5vZGVdID0gdHJ1ZTsKICAgICAgICBlbnMuc2V0U3Vibm9kZU93bmVyKHJvb3ROb2RlLCBzdWJub2RlLCBfb3duZXIpOwogICAgfQp9Cgpjb250cmFjdCBTdkVuc0V2ZXJ5dGhpbmdQeCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGFkbWluczsKICAgIGFkZHJlc3NbXSBwdWJsaWMgYWRtaW5Mb2c7CgogICAgU3ZFbnNSZWdpc3RyYXIgcHVibGljIHJlZ2lzdHJhcjsKICAgIFN2RW5zUmVnaXN0cnkgcHVibGljIHJlZ2lzdHJ5OwogICAgUHVibGljUmVzb2x2ZXIgcHVibGljIHJlc29sdmVyOwogICAgYnl0ZXMzMiBwdWJsaWMgcm9vdE5vZGU7CgogICAgbW9kaWZpZXIgb25seV9hZG1pbigpIHsKICAgICAgICByZXF1aXJlKGFkbWluc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgZnVuY3Rpb24gU3ZFbnNFdmVyeXRoaW5nUHgoU3ZFbnNSZWdpc3RyYXIgX3JlZ2lzdHJhciwgU3ZFbnNSZWdpc3RyeSBfcmVnaXN0cnksIFB1YmxpY1Jlc29sdmVyIF9yZXNvbHZlciwgYnl0ZXMzMiBfcm9vdE5vZGUpIHB1YmxpYyB7CiAgICAgICAgcmVnaXN0cmFyID0gX3JlZ2lzdHJhcjsKICAgICAgICByZWdpc3RyeSA9IF9yZWdpc3RyeTsKICAgICAgICByZXNvbHZlciA9IF9yZXNvbHZlcjsKICAgICAgICByb290Tm9kZSA9IF9yb290Tm9kZTsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgX2FkZEFkbWluKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9hZGRBZG1pbihhZGRyZXNzIGEpIGludGVybmFsIHsKICAgICAgICBhZG1pbnNbYV0gPSB0cnVlOwogICAgICAgIGFkbWluTG9nLnB1c2goYSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQWRtaW4oYWRkcmVzcyBhKSBvbmx5X2FkbWluKCkgZXh0ZXJuYWwgewogICAgICAgIF9hZGRBZG1pbihhKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1BZG1pbihhZGRyZXNzIGEpIG9ubHlfYWRtaW4oKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShhICE9IG93bmVyICYmIGEgIT0gbXNnLnNlbmRlcik7CiAgICAgICAgYWRtaW5zW2FdID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gcmVnTmFtZShzdHJpbmcgbmFtZSwgYWRkcmVzcyByZXNvbHZlVG8pIG9ubHlfYWRtaW4oKSBleHRlcm5hbCByZXR1cm5zIChieXRlczMyIG5vZGUpIHsKICAgICAgICBieXRlczMyIGxhYmVsaGFzaCA9IGtlY2NhazI1NihuYW1lKTsKICAgICAgICByZWdpc3RyYXIucmVnaXN0ZXIobGFiZWxoYXNoLCB0aGlzKTsKICAgICAgICBub2RlID0ga2VjY2FrMjU2KHJvb3ROb2RlLCBsYWJlbGhhc2gpOwogICAgICAgIHJlZ2lzdHJ5LnNldFJlc29sdmVyKG5vZGUsIHJlc29sdmVyKTsKICAgICAgICByZXNvbHZlci5zZXRBZGRyKG5vZGUsIHJlc29sdmVUbyk7CiAgICAgICAgcmVnaXN0cnkuc2V0T3duZXIobm9kZSwgbXNnLnNlbmRlcik7CiAgICB9Cn0='.
	

]
