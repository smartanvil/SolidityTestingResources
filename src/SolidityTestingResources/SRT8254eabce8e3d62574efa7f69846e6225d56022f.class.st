Class {
	#name : #SRT8254eabce8e3d62574efa7f69846e6225d56022f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8254eabce8e3d62574efa7f69846e6225d56022f >> base64 [
	^ 'Y29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICB0aHJvdzsKICAgIH0KICAgIF87CiAgfQoKfQoKLy8vVGhpcyBpcyB0aGUgYmxvY2tjaGFpbiBzaWRlIG9mIHRoZSBub3RpZmllci4gSGVyZSBzbyB0aGF0IHBheW1lbnQsIHJlZ2lzdGVyaW5nLGV0YyBpcyBwYWlubGVzcyBhc3luYyBhbmQKLy8vIG1vc3QgaW1wb3J0YW50bHkgKnRydXN0bGVzcyogc2luY2UgeW91IGNhbiBleGl0IGF0IGFueSB0aW1lIHRha2luZyB5b3VyIGZ1bmRzIGhhdmluZyBsb3N0IG5vdGhpbmcKCi8vL0BhdXRob3IgPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjQ2MmQyZjI4MjEyNTI5MjUyOTJiMjcyODIxMjkwNjIxMmIyNzJmMmE2ODI1MjkyYiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4KLy8vQHRpdGxlIFByaWNlIG5vdGlmaWVyCmNvbnRyYWN0IFRyYWNrZXIgaXMgT3duYWJsZXsKICAgIC8vIFRoaXMgcmVwcmVzZW50cyBhIGNsaWVudCBpbiB0aGUgc2ltcGxlc3QgZm9ybQogICAgLy8gT25seSB0cmFja3MgYSBzaW5nbGUgY3VycmVuY3kgcGFpciwgaGFyZGNvZGVkCiAgICBzdHJ1Y3QgU2ltcGxlQ2xpZW50ewogICAgICAgIHVpbnQ4IHJhdGlvOy8vIHJhdGlvIHRyaWdnZXIKICAgICAgICB1aW50IGRvc2g7Ly8gQ2xpZW50cyBkb3NoCiAgICAgICAgc3RyaW5nIEhhc2g7Ly8gcGhvbmUgbnVtYmVyIGFzIGEgdXRmLTggc3RyaW5nLCBvciBhIGhhc2ggb2Ygb25lIGZyb20gd2Vic2VydmljZQogICAgICAgIHVpbnQgdGltZTsvLyBsYXN0IHRpbWUgY2xpZW50IHdhcyBkZWJpdGVkLiBTdGFydHMgYXMgY3JlYXRpb24gdGltZQogICAgfQogICAgCiAgICAvLyBUaGlzIGlzIHRoZSBtYXBwaW5nIGJldHdlZW4gZXRoIGFkZHIgYW5kIGNsaWVudCBzdHJ1Y3RzCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gU2ltcGxlQ2xpZW50KSBwdWJsaWMgQ2xpZW50czsKICAgIC8vIFRoaXMgaXMgdXNlZCB0byBzdG9yZSB0aGUgY3VycmVudCB0b3RhbCBvYmxpZ2F0aW9ucyB0byBjbGllbnRzCiAgICB1aW50IHB1YmxpYyBvYmxpZ2F0aW9uczsKICAgIAogICAgLy8gRXZlbnRzIGZvciBjbGllbnRzIHJlZ2lzdGVyaW5nIGFuZCBsZWF2aW5nCiAgICAvLyBUaGlzIG1lYW5zIHJlY29nbml6aW5nIHRoZSBzZXQgb2YgY3VycmVudCBjbGllbnRzLCBmb3Igc2VuZGluZyBhbmQgZGViaXRpbmcgY2FuIGJlIGRvbmUgb2ZmLWNoYWluCiAgICBldmVudCBDbGllbnRSZWdpc3RlcmVkKGFkZHJlc3MgQ2xpZW50KTsKICAgIGV2ZW50IENsaWVudEV4aXRlZChhZGRyZXNzIENsaWVudCk7CiAgICAKICAgIC8vIENvbnN0YW50cyB1c2VkIGZvciBjb25maWd1cmF0aW9uCiAgICB1aW50IGNvbnN0YW50IFBlcmlvZCA9IDEgZGF5czsgLy8gYW1vdW50IG9mIHRpbWUgYmV0d2VlbiBkZWJpdHMgRVJST1Igc2V0IHRoZXNlIHZhbHVlcyBmb3IgcmVsZWFzZQogICAgdWludCBjb25zdGFudCBGZWUgPSAwLjQgZmlubmV5OyAvLyBhbW91bnQgZGViaXRlZCBwZXIgcGVyaW9kCiAgICB1aW50OCBjb25zdGFudCBNaW5pbnVtUGVyY2VudCA9IDM7IC8vIHRoaXMgaXMgdGhlIG1pbmltdW0gcmF0aW8gYWxsb3dlZC4gVE9ETyBzZXQgdG8gNSBmb3Igc21zIGNvbnRyYWN0CgogICAgCiAgICAvLyBUaGlzIGZ1bmN0aW9uIHJlZ2lzdGVycyBhIG5ldyBjbGllbnQsIGFuZCBjYW4gYmUgdXNlZCB0byBhZGQgZnVuZHMgb3IgY2hhbmdlIHJhdGlvCiAgICBmdW5jdGlvbiBSZWdpc3Rlcih1aW50OCByYXRpbywgc3RyaW5nIEhhc2gpIHBheWFibGUgZXh0ZXJuYWwgewogICAgICAgIHZhciBOZXdDbGllbnQgPSBTaW1wbGVDbGllbnQocmF0aW8+PU1pbmludW1QZXJjZW50P3JhdGlvOk1pbmludW1QZXJjZW50LCBtc2cudmFsdWUsIEhhc2gsIG5vdyk7IC8vIGNyZWF0ZSBuZXcgY2xpZW50CiAgICAgICAgLy8gbm90ZSB0aGF0IHJhdGlvIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHNtYWxsZXIgdGhhbiBNaW5pbnVtUGVyY2VudCUKICAgICAgICAvLyBJbiBjYXNlIHNvbWVvbmUgcmVnaXN0ZXJzIG92ZXIgdGhlbXNlbHZlcywga2VlcCB0aGVpciBtb25leSBhcm91bmQKICAgICAgICBOZXdDbGllbnQuZG9zaCArPSBDbGllbnRzW21zZy5zZW5kZXJdLmRvc2g7IC8vIGtlZXAgdGhlaXIgb2xkIGFjY291bnQgcnVubmluZwogICAgICAgIENsaWVudHNbbXNnLnNlbmRlcl0gPSBOZXdDbGllbnQ7IC8vIHJlZ2lzdGVyIHRoZW0KICAgICAgICAvLyBub3RpZnkgdGhlIGxpc3RuZXJzCiAgICAgICAgQ2xpZW50UmVnaXN0ZXJlZChtc2cuc2VuZGVyKTsKICAgICAgICAvLyBhbmQgaW5jcmVtZW50IGN1cnJlbnQgdG90YWwgb2JsaWdhdGlvbnMKICAgICAgICBvYmxpZ2F0aW9ucyArPSBtc2cudmFsdWU7CiAgICAgICAgCiAgICB9CiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3RvcCB1c2luZyB0aGUgc2VydmljZQogICAgZnVuY3Rpb24gRXhpdCgpIGV4dGVybmFsIHsKICAgICAgICB1aW50IHRvc2VuZCA9IENsaWVudHNbbXNnLnNlbmRlcl0uZG9zaDsKICAgICAgICAvLyBBbmQgcmVtb3ZlIHRoZSBtb25leSB0aGV5IHdpdGhkcmV3IGZyb20gb3VyIG9ibGlnYXRpb25zCiAgICAgICAgb2JsaWdhdGlvbnMgLT0gdG9zZW5kOwogICAgICAgIC8vIGlmIHRoZSBzZW5kaW5nIGZhaWxzLCBhbGwgb2YgdGhpcyB1bndpbmRzLgogICAgICAgIENsaWVudHNbbXNnLnNlbmRlcl0uZG9zaD0gMDsgLy8gd2Ugc2V0IGl0IGhlcmUgdG8gaXRzIHNhZmUgdG8gc2VuZCBtb25leQogICAgICAgIC8vIE5vdGlmeSBsaXN0bmVycyBjbGllbnQgaGFzIGxlZnQKICAgICAgICBDbGllbnRFeGl0ZWQobXNnLnNlbmRlcik7CiAgICAgICAgLy8gc2VuZCB0byB0aGUgY2FsbGVyIHRoZSBtb25leSB0aGVpciBzdHJ1Y3R1cmUgc2F5cyB0aGV5IGhhdmUKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRvc2VuZCk7CiAgICAgICAgCiAgICB9CiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY2hhbmdlIHRoZSBwaG9uZSBudW1iZXIgaW4gdGhlIHNlcnZpY2UKICAgIGZ1bmN0aW9uIENoYW5nZU51bWJlcihzdHJpbmcgTmV3SGFzaCkgZXh0ZXJuYWwgeyAvLyBUaGUgd2F5IHRoaXMgbW9kaWZpZXMgc3RhdGUgaXMgaW52aXNpYmxlIHRvIHRoZSBjb250cmFjdCxzbyBubyBwcm9ibGVtbwogICAgICAgIENsaWVudHNbbXNnLnNlbmRlcl0uSGFzaCA9IE5ld0hhc2g7CiAgICAgICAgQ2xpZW50RXhpdGVkKG1zZy5zZW5kZXIpOwogICAgICAgIENsaWVudFJlZ2lzdGVyZWQobXNnLnNlbmRlcik7IC8vIFRoaXMgY2hlYXAgc2VxdWVuY2Ugb2YgZXZlbnRzIGNoYW5nZXMgdGhlIG51bWJlciwgYW5kIG5vdGlmaWVzIHRoZSBiYWNrZW5kIHNlcnZpY2UKICAgIH0KICAgIC8vIFVzZWQgdG8gY2hhcmdlIGEgY2xpZW50CiAgICBmdW5jdGlvbiBEZWJpdENsaWVudChhZGRyZXNzIGNsaWVudCkgZXh0ZXJuYWx7Ly8gc2luY2Ugb3duZXIgaXMgcHJvdmFibGUgYW4gRU9DLCBjYW50IGFidXNlIHJlZW50cmFuY3kKICAgICAgICB1aW50IFRvdGFsRmVlOwogICAgICAgIHVpbnQgdGltZWRpZiA9IG5vdy1DbGllbnRzW2NsaWVudF0udGltZTsgLy8gaG93IGxvbmcgc2luY2UgbGFzdCBjYWxsIG9uIHRoaXMgY2xpZW50CiAgICAgICAgdWludCBwZXJpb2RtdWx0aSA9IHRpbWVkaWYvUGVyaW9kOyAvLyBIb3cgbWFueSBwZXJpb2RzIHBhc3NlZAogICAgICAgIGlmKHBlcmlvZG11bHRpPjApeyAvLyB0aW1lZGlmIGlzID49IFBlcmlvZAogICAgICAgICAgVG90YWxGZWUgPSBGZWUqcGVyaW9kbXVsdGk7IC8vIDEgcGVyaW9kIGZlZSBwZXIgbXVsdGlwbGUgb2YgcGVyaW9kCiAgICAgICAgfWVsc2V7Ly8gaXQgd2FzIHNtYWxsZXIgdGhhbiBwZXJpb2QuIFdhc3RlZCBnYXMKICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZihDbGllbnRzW2NsaWVudF0uZG9zaCA8IFRvdGFsRmVlKXsgLy8gbm90IGVub3VnaAogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIENsaWVudHNbY2xpZW50XS5kb3NoIC09IFRvdGFsRmVlOwogICAgICAgIG9ibGlnYXRpb25zIC09IFRvdGFsRmVlOwogICAgICAgIENsaWVudHNbY2xpZW50XS50aW1lICs9IFBlcmlvZCpwZXJpb2RtdWx0aTsgLy8gY2xpZW50IGdvdCBjaGFyZ2VkIGZvciBwZXJpb2RtdWx0aSBwZXJpb2RzLCBzbyBhZGQgdGhhdCB0byB0aGVpciB0aW1lIHBhaWQKICAgIH0KICAgIC8vIHVzZWQgdG8gY2hhcmdlIGZvciBhIHNpbmdsZSB0aW1lIHBlcmlvZCwgaW4gY2FzZSBjbGllbnQgZG9lc250IGhhdmUgZW5vdWdoIGRvc2ggdG8gcGF5IGFsbCBmZWVzIAogICAgZnVuY3Rpb24gRGViaXRDbGllbnRPbmNlKGFkZHJlc3MgY2xpZW50KSBleHRlcm5hbHsvLyBzaW5jZSBvd25lciBpcyBwcm92YWJsZSBhbiBFT0MsIGNhbnQgYWJ1c2UgcmVlbnRyYW5jeQogICAgICAgIHVpbnQgdGltZWRpZiA9IG5vdy1DbGllbnRzW2NsaWVudF0udGltZTsgLy8gaG93IGxvbmcgc2luY2UgbGFzdCBjYWxsIG9uIHRoaXMgY2xpZW50CiAgICAgICAgaWYodGltZWRpZjxQZXJpb2QpeyAvLyB0b28gc29vbiwgd2FzdGVkLgogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmKENsaWVudHNbY2xpZW50XS5kb3NoIDwgRmVlKXsgLy8gbm90IGVub3VnaAogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIENsaWVudHNbY2xpZW50XS5kb3NoIC09IEZlZTsKICAgICAgICBvYmxpZ2F0aW9ucyAtPSBGZWU7CiAgICAgICAgQ2xpZW50c1tjbGllbnRdLnRpbWUgKz0gUGVyaW9kOyAvLyBjbGllbnQgZ290IGNoYXJnZWQgZm9yIDEgcGVyaW9kLCBzbyBhZGQgdGhhdCB0byB0aGVpciB0aW1lIHBhaWQKICAgIH0KICAgIAogICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHdpdGhkcmF3IGV0aGVyCiAgICBmdW5jdGlvbiBXaXRoZHJhdyh1aW50IGFtb3VudCkgb25seU93bmVyIGV4dGVybmFseyAvLyBzaW5jZSBvd25lciBpcyBwcm92YWJsZSBhbiBFT0MsIGNhbnQgYWJ1c2UgcmVlbnRyYW5jeQogICAgICAgIGlmKHRoaXMuYmFsYW5jZSA8PSBvYmxpZ2F0aW9ucyl7IC8vIHRoaXMgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgZnJvbSBwcm9kdWN0aW9uIGNvZGUuIEJ1dCB0aGVvcmV0aWNhbGx5IGl0IGNhbiBuZXZlciBoYXBwZW4KICAgICAgICAgICAgdGhyb3c7IC8vIFNvbWVob3csIHdlIGNhbnQgZXZlbiBjb3ZlciBvdXIgb2JsaWdhdGlvbnMuIFRoaXMgbWVhbnMgc29tZXRoaW5nIHZlcnkgd3JvbmcgaGFzIGhhcHBlbmVkCiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7Ly8gVGhpcyBzaG91bGQgYmUgaW1wb3NzaWJsZSwgYnV0IGl0IG1lYW5zIEkgY2FuIG1hbnVhbGx5IHJlaW1idXJzZSBpZiBTSFRGCiAgICAgICAgfQogICAgICAgIGlmKCh0aGlzLmJhbGFuY2UgLSBvYmxpZ2F0aW9ucykgPD0gYW1vdW50ICl7Ly8gYXZhaWxhYmxlIGJhbGFuY2UgZG9lc250IGNvdmVyIHdpdGhkcmF3YWwKICAgICAgICAgICAgdGhyb3c7IC8vIG5vdCBhbGxvd2VkCiAgICAgICAgfQogICAgICAgIG93bmVyLnRyYW5zZmVyKGFtb3VudCk7Ly8gQWxsIGNoZWNrcyBwYXNzZWQsIHRha2UgdGhlIG1vbmV5CiAgICB9Cn0='.
	

]
