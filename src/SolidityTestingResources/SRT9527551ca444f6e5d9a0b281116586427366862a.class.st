Class {
	#name : #SRT9527551ca444f6e5d9a0b281116586427366862a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9527551ca444f6e5d9a0b281116586427366862a >> base64 [
	^ ''.
	

]
