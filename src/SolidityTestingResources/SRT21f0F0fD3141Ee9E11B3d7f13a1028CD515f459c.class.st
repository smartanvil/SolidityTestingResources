Class {
	#name : #SRT21f0F0fD3141Ee9E11B3d7f13a1028CD515f459c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT21f0F0fD3141Ee9E11B3d7f13a1028CD515f459c >> base64 [
	^ ''.
	

]
