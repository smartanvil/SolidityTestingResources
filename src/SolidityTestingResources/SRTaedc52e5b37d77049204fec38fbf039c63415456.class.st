Class {
	#name : #SRTaedc52e5b37d77049204fec38fbf039c63415456,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaedc52e5b37d77049204fec38fbf039c63415456 >> base64 [
	^ ''.
	

]
