Class {
	#name : #SRT1839864616602Fee4d5cc7A6448Dd257636c9A9A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1839864616602Fee4d5cc7A6448Dd257636c9A9A >> base64 [
	^ ''.
	

]
