Class {
	#name : #SRTfc8433a4cc060d030e16521c83311a7b177dae15,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc8433a4cc060d030e16521c83311a7b177dae15 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQp9CgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWM7IH0KCmNvbnRyYWN0IFRva2VuRVJDMjAgewogICAgLy8gUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICAvLyAxOCBkZWNpbWFscyBpcyB0aGUgc3Ryb25nbHkgc3VnZ2VzdGVkIGRlZmF1bHQsIGF2b2lkIGNoYW5naW5nIGl0CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvLyBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQ29uc3RyY3RvciBmdW5jdGlvbgogICAgICoKICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBUb2tlbkVSQzIwKCkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IDEwMDAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOyAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseSB3aXRoIHRoZSBkZWNpbWFsIGFtb3VudAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIG5hbWUgPSAiV2FyYUNvaW4iOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gIldBQyI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgLyoqCiAgICAgKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gU2F2ZSB0aGlzIGZvciBhbiBhc3NlcnRpb24gaW4gdGhlIGZ1dHVyZQogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXTsKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20geW91ciBhY2NvdW50CiAgICAgKgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucyBmcm9tIG90aGVyIGFkZHJlc3MKICAgICAqCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBpbiBiZWhhbGYgb2YgYF9mcm9tYAogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgbm90aWZ5CiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICogQHBhcmFtIF9leHRyYURhdGEgc29tZSBleHRyYSBpbmZvcm1hdGlvbiB0byBzZW5kIHRvIHRoZSBhcHByb3ZlZCBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgIFdhcmFDb2luIGlzIG93bmVkLCBUb2tlbkVSQzIwIHsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyB3YXJhY29pbl9wZXJfZXRoZXI7CiAgICAKICAgIGFkZHJlc3Mgd2FyYWNvaW5fY29ycDsKICAgIHVpbnQyNTYgcHJlc2FsZV9kZWFkbGluZV9jb3VudDsKICAgIHVpbnQyNTYgY3Jvd2RzYWxlX2RlYWRsaW5lX2NvdW50OwogICAgCiAgICAvKiBTYXZlIHByb2R1Y3QncyBnZW51aW5lIGluZm9ybWF0aW9uICovCiAgICBzdHJ1Y3QgUHJvZHVjdF9nZW51aW5lCiAgICB7CiAgICAgICAgYWRkcmVzcyBtX21hZGVfZnJvbV93aG87ICAvLyB3aG8gbWFkZSB0aGlzIHByb2R1Y3QgCiAgICAgICAgCiAgICAgICAgc3RyaW5nIG1fUHJvZHVjdF9HVUlEOyAgICAvLyBwcm9kdWN0J3MgdW5pcXVlIGNvZGUKICAgICAgICBzdHJpbmcgbV9Qcm9kdWN0X0Rlc2NyaXB0aW9uOyAvLyBwcm9kdWN0J3MgZGVzY3JpcHRpb24KICAgICAgICBhZGRyZXNzIG1fd2hvX2hhdmU7ICAgICAgIC8vIHdobyBoYXZlIHRoaXMgcHJvZHVjdCBub3cKICAgICAgICBhZGRyZXNzIG1fc2VuZF90b193aG87ICAgIC8vIHdoZW4gcHJvZHVjdCBtb3ZlIHRvIGFnZW5jeSAtIGlmIGl0IGlzIGRpZmZlcmVudCB3aXRoIHNlbGxlciwgaXQgbWVhbnMgdGhhdCBzZWxsZXIgaGF2ZSBubyBnZW51aW5lICAKICAgICAgICBzdHJpbmcgbV9oYXNoOyAgLy8gbmVlZCB0byBjaGVjayBoYXNoIG9mIGRlc2NyaXB0aW9uCiAgICAgICAgCiAgICAgICAgdWludDI1NiBtX21vdmVkX2NvdW50OyAgLy8gaG93IG1hbnkgdGltZXMgbW92ZWQgdGhpcyBwcm9kdWN0CiAgICB9CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAodWludDI1NiA9PiBQcm9kdWN0X2dlbnVpbmUpKSBwdWJsaWMgTXlQcm9kdWN0czsKICAgIAogICAgCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFdhcmFDb2luKCkgVG9rZW5FUkMyMCgpICBwdWJsaWMgCiAgICB7CiAgICAgICAgcHJlc2FsZV9kZWFkbGluZV9jb3VudCA9IDI1MDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7ICAvLyBhZnRlciBzYWxlIHRoaXMgY291bnRzIHdpbGwgY2xvc2UgcHJlc2FsZSAKICAgICAgICBjcm93ZHNhbGVfZGVhZGxpbmVfY291bnQgPSA1MDAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOyAgICAvLyBhZnRlciBzYWxlIHRoaXMgY291bnRzIHdpbGwgY2xvc2UgY3Jvd2RzYWxlCiAgICAgICAgd2FyYWNvaW5fY29ycCA9IG1zZy5zZW5kZXI7CiAgICAgICAgd2FyYWNvaW5fcGVyX2V0aGVyID0gMTAwMDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgV2FyYWNvaW4gc2FsZSBwcmljZQogICAgICoKICAgICAqIEBwYXJhbSBjb2luY291bnQgT25lIGNvdW50cyBwZXIgb25lIGV0aGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFdhcmFjb2luUGVyRXRoZXIodWludDI1NiBjb2luY291bnQpIG9ubHlPd25lciBwdWJsaWMgCiAgICB7CiAgICAgICAgd2FyYWNvaW5fcGVyX2V0aGVyID0gY29pbmNvdW50OwogICAgfQoKICAgIC8qIFNldCBXYXJhY29pbiBzYWxlIHByaWNlICovCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIAogICAgewogICAgICAgIGlmICggbXNnLnNlbmRlciAhPSBvd25lciApICAvLyBJZiBvd25lciBzZW5kIEV0aGVyLCBpdCB3aWxsIHVzZSBmb3IgZEFwcCBvcGVyYXRpb24KICAgICAgICB7CiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gMDsKICAgICAgICAgICAgdWludCBub3dwcmljZSA9IDA7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoIHByZXNhbGVfZGVhZGxpbmVfY291bnQgPiAwICApCiAgICAgICAgICAgICAgICBub3dwcmljZSA9IDEwMDAwOyAgIC8vIHByZXNhbGUgcHJpY2UKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYgKCBjcm93ZHNhbGVfZGVhZGxpbmVfY291bnQgPiAwKQogICAgICAgICAgICAgICAgICAgIG5vd3ByaWNlID0gNTAwMDsgICAgLy8gY3Jvd2RzYWxlIHByaWNlCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgbm93cHJpY2UgPSAxMDAwOyAgICAvLyBub3JtYWxzYWxlIHByaWNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGFtb3VudCA9IG1zZy52YWx1ZSAqIG5vd3ByaWNlOyAKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICggcHJlc2FsZV9kZWFkbGluZV9jb3VudCAhPSAwICkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKCBwcmVzYWxlX2RlYWRsaW5lX2NvdW50ID4gYW1vdW50ICkKICAgICAgICAgICAgICAgICAgICBwcmVzYWxlX2RlYWRsaW5lX2NvdW50IC09IGFtb3VudDsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBwcmVzYWxlX2RlYWRsaW5lX2NvdW50ID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiAoIGNyb3dkc2FsZV9kZWFkbGluZV9jb3VudCAhPSAwICkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGNyb3dkc2FsZV9kZWFkbGluZV9jb3VudCA+IGFtb3VudCApCiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3dkc2FsZV9kZWFkbGluZV9jb3VudCAtPSBhbW91bnQ7CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBjcm93ZHNhbGVfZGVhZGxpbmVfY291bnQgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5ICs9IGFtb3VudDsKICAgIAogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OyAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UKICAgICAgICAgICAgcmVxdWlyZSh3YXJhY29pbl9jb3JwLnNlbmQobXNnLnZhbHVlKSk7CiAgICAgICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFtb3VudCk7ICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSBhbiBldmVudCByZWZsZWN0aW5nIHRoZSBjaGFuZ2UKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBTZWxsZXIgd2lsbCBzZW5kIFdhcmFDb2luIHRvIGJ1eWVyCiAgICAgKgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiBiYWNrZXJzIHdobyBoYXZlIFdhcmFDb2luCiAgICAgKiBAcGFyYW0gY29pbl9hbW91bnQgSG93IG1hbnkgV2FyYUNvaW4gd2lsbCBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdhcmFDb2luVHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgY29pbl9hbW91bnQpIHB1YmxpYwogICAgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gY29pbl9hbW91bnQgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gYW1vdW50KTsgICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyB0aGUgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgdGhlIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIGFtb3VudCk7ICAgICAgICAgICAgICAgLy8gZXhlY3V0ZXMgYW4gZXZlbnQgcmVmbGVjdGluZyBvbiB0aGUgY2hhbmdlCiAgICB9CgogICAgLyoqCiAgICAgKiBPd25lciB3aWxsIGJ1eSBiYWNrIFdhcmFDb2luIGZyb20gYmFja2VycwogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiBiYWNrZXJzIHdobyBoYXZlIFdhcmFDb2luCiAgICAgKiBAcGFyYW0gY29pbl9hbW91bnQgSG93IG1hbnkgV2FyYUNvaW4gd2lsbCBidXkgYmFjayBmcm9tIGhpbQogICAgICovCiAgICBmdW5jdGlvbiBidXlGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgY29pbl9hbW91bnQpIG9ubHlPd25lciBwdWJsaWMgCiAgICB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBjb2luX2Ftb3VudCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwogICAgICAgIHVpbnQgbmVlZF90b19wYXkgPSBhbW91bnQgLyB3YXJhY29pbl9wZXJfZXRoZXI7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gbmVlZF90b19wYXkpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBhbW91bnQpOyAgICAgICAgIC8vIGNoZWNrcyBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyB0aGUgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIF9mcm9tLnRyYW5zZmVyKG5lZWRfdG9fcGF5KTsgICAgICAgICAgICAgICAgLy8gc2VuZHMgZXRoZXIgdG8gdGhlIHNlbGxlcjogaXQncyBpbXBvcnRhbnQgdG8gZG8gdGhpcyBsYXN0IHRvIHByZXZlbnQgcmVjdXJzaW9uIGF0dGFja3MKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgdGhpcywgYW1vdW50KTsgICAgICAgICAgICAgICAvLyBleGVjdXRlcyBhbiBldmVudCByZWZsZWN0aW5nIG9uIHRoZSBjaGFuZ2UKICAgIH0gICAgCiAgICAKICAgIC8qKgogICAgICogSGVyZSBpcyBXYXJhQ29pbidzIEdlbnVpbmUgZEFwcCBmdW5jdGlvbnMKICAgICovCiAgICAKICAgIC8qIFdoZW4gY3JlYXRvciBtYWRlIHByb2R1Y3QsIG11c3QgbmVlZCB0byB1c2UgdGhpcyBmdWN0aW9uIGZvciByZWdpc3RlciBoaXMgcHJvZHVjdCBmaXJzdCAqLwogICAgZnVuY3Rpb24gcmVnaXN0ZXJOZXdQcm9kdWN0KHVpbnQyNTYgcHJvZHVjdF9pZHgsc3RyaW5nIG5ld19ndWlkLHN0cmluZyBwcm9kdWN0X2Rlc2NyaXB0aW9ucyxzdHJpbmcgaGFzaCkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gMSAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOyAgICAgICAgCiAgICAgICAgCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0+PWFtb3VudCk7ICAgLy8gTmVlZCB0byB1c2Ugb25lIFdhcmFDb2luIGZvciBtYWtlIHByb2R1Y3QgY29kZQogICAgICAgIAogICAgICAgIFByb2R1Y3RfZ2VudWluZSBzdG9yYWdlIG1pbmUgPSBNeVByb2R1Y3RzW21zZy5zZW5kZXJdW3Byb2R1Y3RfaWR4XTsKICAgICAgICAKICAgICAgICByZXF1aXJlKG1pbmUubV9tYWRlX2Zyb21fd2hvIT1tc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICBtaW5lLm1fbWFkZV9mcm9tX3dobyA9IG1zZy5zZW5kZXI7CiAgICAgICAgbWluZS5tX3dob19oYXZlID0gbXNnLnNlbmRlcjsKICAgICAgICBtaW5lLm1fUHJvZHVjdF9HVUlEID0gbmV3X2d1aWQ7CiAgICAgICAgbWluZS5tX1Byb2R1Y3RfRGVzY3JpcHRpb24gPSBwcm9kdWN0X2Rlc2NyaXB0aW9uczsKICAgICAgICBtaW5lLm1faGFzaCA9IGhhc2g7CgogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBhbW91bnQ7CiAgICAgICAgcmV0dXJuIHRydWU7ICAgICAgICAKICAgIH0KICAgIAogICAgLyogSWYgcHJvZHVjdCdzIG93bmVyIHdhbnQgdG8gbW92ZSwgaGUgbmVlZCB0byB1c2UgdGhpcyBmdWN0aW9uIGZvciBzZXR0aW5nIHJlY2VpdmVyIDogbXVzdCB1c2UgYnkgc2VuZGVyICovICAKICAgIGZ1bmN0aW9uIHNldE1vdmVQcm9kdWN0VG9XaG9tKGFkZHJlc3Mgd2hvX21hZGVfdGhpcyx1aW50MjU2IHByb2R1Y3RfaWR4LGFkZHJlc3MgbW92ZXRvKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIFByb2R1Y3RfZ2VudWluZSBzdG9yYWdlIG1pbmUgPSBNeVByb2R1Y3RzW3dob19tYWRlX3RoaXNdW3Byb2R1Y3RfaWR4XTsKICAgICAgICAKICAgICAgICByZXF1aXJlKG1pbmUubV93aG9faGF2ZT09bXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgbWluZS5tX3NlbmRfdG9fd2hvID0gbW92ZXRvOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyogUHJvZHVjdCdzIGJ1eWVyIG5lZWQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHNhdmUgaGlzIGdlbnVpbmUgKi8KICAgIGZ1bmN0aW9uIG1vdmVQcm9kdWN0KGFkZHJlc3Mgd2hvX21hZGVfdGhpcyxhZGRyZXNzIHdob19oYXZlX3RoaXMsdWludDI1NiBwcm9kdWN0X2lkeCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IDEgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsgICAgICAgIAoKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlttc2cuc2VuZGVyXT49YW1vdW50KTsgICAvLyBOZWVkIHRvIHVzZSBvbmUgV2FyYUNvaW4gZm9yIG1vdmUgcHJvZHVjdAogICAgICAgIAogICAgICAgIFByb2R1Y3RfZ2VudWluZSBzdG9yYWdlIG1pbmUgPSBNeVByb2R1Y3RzW3dob19tYWRlX3RoaXNdW3Byb2R1Y3RfaWR4XTsKICAgICAgICAKICAgICAgICByZXF1aXJlKG1pbmUubV93aG9faGF2ZT09d2hvX2hhdmVfdGhpcyk7ICAgIC8vIGlmIHNlbmRlciBoYXZlIG5vIHByb2R1Y3QsIGJyZWFrCiAgICAgICAgcmVxdWlyZShtaW5lLm1fc2VuZF90b193aG89PW1zZy5zZW5kZXIpOyAgICAvLyBpZiByZWNlaXZlciBpcyBub3QgbWUsIGJyZWFrCgogICAgICAgIG1pbmUubV93aG9faGF2ZSA9IG1zZy5zZW5kZXI7CiAgICAgICAgbWluZS5tX21vdmVkX2NvdW50ICs9IDE7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IGFtb3VudDsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBDaGVjayBHZW51aW5lIG9mIG93bmVyICovCiAgICBmdW5jdGlvbiBjaGVja1Byb2R1Y3RHZW51aW5lKGFkZHJlc3Mgd2hvX21hZGVfdGhpcyxhZGRyZXNzIHdob19oYXZlX3RoaXMsdWludDI1NiBwcm9kdWN0X2lkeCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBQcm9kdWN0X2dlbnVpbmUgc3RvcmFnZSBtaW5lID0gTXlQcm9kdWN0c1t3aG9fbWFkZV90aGlzXVtwcm9kdWN0X2lkeF07CiAgICAgICAgcmVxdWlyZShtaW5lLm1fd2hvX2hhdmU9PXdob19oYXZlX3RoaXMpOyAgICAvLyBpZiBjaGVja2VyIGhhdmUgbm8gcHJvZHVjdCwgYnJlYWsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAp9'.
	

]
