Class {
	#name : #SRTb12c6f3dc4a63ed5c070e68d9641390bb3895ab6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb12c6f3dc4a63ed5c070e68d9641390bb3895ab6 >> base64 [
	^ ''.
	

]
