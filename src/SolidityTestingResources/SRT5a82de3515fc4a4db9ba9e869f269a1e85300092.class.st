Class {
	#name : #SRT5a82de3515fc4a4db9ba9e869f269a1e85300092,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a82de3515fc4a4db9ba9e869f269a1e85300092 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgU2FmZU1hdGggewovL2ludGVybmFscwoKZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CnVpbnQgYyA9IGEgKiBiOwphc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwpyZXR1cm4gYzsKfQoKZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CmFzc2VydChiIDw9IGEpOwpyZXR1cm4gYSAtIGI7Cn0KCmZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnModWludCkgewp1aW50IGMgPSBhICsgYjsKYXNzZXJ0KGMgPj0gYSAmJiBjID49IGIpOwpyZXR1cm4gYzsKfQp9CgoKCgpjb250cmFjdCBvd25lZCB7CmFkZHJlc3MgcHVibGljIG93bmVyOwoKZnVuY3Rpb24gb3duZWQoKSBwdWJsaWMgewpvd25lciA9IG1zZy5zZW5kZXI7Cn0KCm1vZGlmaWVyIG9ubHlPd25lciB7CnJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7Cl87Cn0KCmZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewpvd25lciA9IG5ld093bmVyOwp9Cn0KCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsgfQoKY29udHJhY3QgVG9rZW5FUkMyMCBpcyBTYWZlTWF0aCB7Ci8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCnN0cmluZyBwdWJsaWMgbmFtZTsKc3RyaW5nIHB1YmxpYyBzeW1ib2w7CnVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7Ci8vCnVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKCi8vIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcwptYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7Cm1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCi8vIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwpldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCi8vIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50CmV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKLyoqCiogQ29uc3RyY3RvciBmdW5jdGlvbgoqCiogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0CiovCmZ1bmN0aW9uIFRva2VuRVJDMjAoCnVpbnQyNTYgaW5pdGlhbFN1cHBseSwKc3RyaW5nIHRva2VuTmFtZSwKc3RyaW5nIHRva2VuU3ltYm9sCikgcHVibGljIHsKdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5ICogMTAgKiogdWludDI1NihkZWNpbWFscyk7ICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5IHdpdGggdGhlIGRlY2ltYWwgYW1vdW50CmJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwpuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCnN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3Nlcwp9CgovKioKKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QKKi8KZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewovLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKcmVxdWlyZShfdG8gIT0gMHgwKTsKLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCnJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwovLyBDaGVjayBmb3Igb3ZlcmZsb3dzCnJlcXVpcmUoc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSwgX3ZhbHVlKSA+IGJhbGFuY2VPZltfdG9dKTsKLy8gU2F2ZSB0aGlzIGZvciBhbiBhc3NlcnRpb24gaW4gdGhlIGZ1dHVyZQp1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBzYWZlQWRkKGJhbGFuY2VPZltfZnJvbV0sIGJhbGFuY2VPZltfdG9dKTsKLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCmJhbGFuY2VPZltfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VPZltfZnJvbV0sIF92YWx1ZSk7Ci8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CmJhbGFuY2VPZltfdG9dID0gc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSwgX3ZhbHVlKTsKVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKLy8gQXNzZXJ0cyBhcmUgdXNlZCB0byB1c2Ugc3RhdGljIGFuYWx5c2lzIHRvIGZpbmQgYnVncyBpbiB5b3VyIGNvZGUuIFRoZXkgc2hvdWxkIG5ldmVyIGZhaWwKYXNzZXJ0KHNhZmVBZGQoYmFsYW5jZU9mW19mcm9tXSwgYmFsYW5jZU9mW190b10pID09IHByZXZpb3VzQmFsYW5jZXMpOwp9CgovKioKKiBUcmFuc2ZlciB0b2tlbnMKKgoqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20geW91ciBhY2NvdW50CioKKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAoqLwpmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7Cl90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7Cn0KCi8qKgoqIFRyYW5zZmVyIHRva2VucyBmcm9tIG90aGVyIGFkZHJlc3MKKgoqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCioKKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgoqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAoqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiovCmZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CnJldHVybiB0cnVlOwp9CgovKioKKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzCioKKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmCioKKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAoqIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKKi8KZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCnJldHVybnMgKGJvb2wgc3VjY2VzcykgewphbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwpyZXR1cm4gdHJ1ZTsKfQoKLyoqCiogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgbm90aWZ5CioKKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmLCBhbmQgdGhlbiBwaW5nIHRoZSBjb250cmFjdCBhYm91dCBpdAoqCiogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKKiBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiogQHBhcmFtIF9leHRyYURhdGEgc29tZSBleHRyYSBpbmZvcm1hdGlvbiB0byBzZW5kIHRvIHRoZSBhcHByb3ZlZCBjb250cmFjdAoqLwpmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKcHVibGljCnJldHVybnMgKGJvb2wgc3VjY2Vzcykgewp0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwppZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewpzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwpyZXR1cm4gdHJ1ZTsKfQp9CgoKCi8qKgoqIERlc3Ryb3kgdG9rZW5zCioKKiBSZW1vdmUgYF92YWx1ZWAgdG9rZW5zIGZyb20gdGhlIHN5c3RlbSBpcnJldmVyc2libHkKKgoqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCBvZiBtb25leSB0byBidXJuCiovCmZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlT2ZbbXNnLnNlbmRlcl0sIF92YWx1ZSk7ICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCnRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSxfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CkJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKcmV0dXJuIHRydWU7Cn0KCgoKLyoqCiogRGVzdHJveSB0b2tlbnMgZnJvbSBvdGhlciBjY291bnQKKgoqIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseSBvbiBiZWhhbGYgb2YgYF9mcm9tYC4KKgoqIEBwYXJhbSBfZnJvbSB0aGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IG9mIG1vbmV5IHRvIGJ1cm4KKi8KZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSB0YXJnZXRlZCBiYWxhbmNlIGlzIGVub3VnaApyZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCmJhbGFuY2VPZltfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VPZltfZnJvbV0sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHRhcmdldGVkIGJhbGFuY2UKYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSA9c2FmZVN1YihhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdLF92YWx1ZSk7ICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcidzIGFsbG93YW5jZQp0b3RhbFN1cHBseSA9c2FmZVN1Yih0b3RhbFN1cHBseSxfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbFN1cHBseQpCdXJuKF9mcm9tLCBfdmFsdWUpOwpyZXR1cm4gdHJ1ZTsKfQp9CgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiAgICAgICBBRFZBTkNFRCBUT0tFTiBTVEFSVFMgSEVSRSAgICAgICAqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKY29udHJhY3QgQlRDeCBpcyBvd25lZCwgVG9rZW5FUkMyMCAgewoKYWRkcmVzcyBwdWJsaWMgaWNvOwoKbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsKCi8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwpldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwoKLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCmZ1bmN0aW9uIEJUQ3goICkgVG9rZW5FUkMyMCgyMTAwMDAwMCwgIkJUQ3giLCAiQlRDeCIpIHB1YmxpYyB7fQoKLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCmZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKcmVxdWlyZSAoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZApyZXF1aXJlIChiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaApyZXF1aXJlIChzYWZlQWRkKGJhbGFuY2VPZltfdG9dLCBfdmFsdWUpID4gYmFsYW5jZU9mW190b10pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCnJlcXVpcmUoIWZyb3plbkFjY291bnRbX2Zyb21dKTsgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBzZW5kZXIgaXMgZnJvemVuCnJlcXVpcmUoIWZyb3plbkFjY291bnRbX3RvXSk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiByZWNpcGllbnQgaXMgZnJvemVuCmJhbGFuY2VPZltfZnJvbV0gPXNhZmVTdWIoYmFsYW5jZU9mW19mcm9tXSxfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKYmFsYW5jZU9mW190b10gPXNhZmVBZGQoYmFsYW5jZU9mW190b10sX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudApUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwp9CgovLy8gQG5vdGljZSBDcmVhdGUgYG1pbnRlZEFtb3VudGAgdG9rZW5zIGFuZCBzZW5kIGl0IHRvIGB0YXJnZXRgCi8vLyBAcGFyYW0gdGFyZ2V0IEFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgdG9rZW5zCi8vLyBAcGFyYW0gbWludGVkQW1vdW50IHRoZSBhbW91bnQgb2YgdG9rZW5zIGl0IHdpbGwgcmVjZWl2ZQpmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXIgcHVibGljIHsKYmFsYW5jZU9mW3RhcmdldF0gPXNhZmVBZGQoYmFsYW5jZU9mW3RhcmdldF0sbWludGVkQW1vdW50KTsKdG90YWxTdXBwbHkgPXNhZmVBZGQodG90YWxTdXBwbHksbWludGVkQW1vdW50KTsKVHJhbnNmZXIoMCwgdGhpcywgbWludGVkQW1vdW50KTsKVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwp9CgovLy8gQG5vdGljZSBgZnJlZXplPyBQcmV2ZW50IHwgQWxsb3dgIGB0YXJnZXRgIGZyb20gc2VuZGluZyAmIHJlY2VpdmluZyB0b2tlbnMKLy8vIEBwYXJhbSB0YXJnZXQgQWRkcmVzcyB0byBiZSBmcm96ZW4KLy8vIEBwYXJhbSBmcmVlemUgZWl0aGVyIHRvIGZyZWV6ZSBpdCBvciBub3QKZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIG9ubHlPd25lciBwdWJsaWMgewpmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CkZyb3plbkZ1bmRzKHRhcmdldCwgZnJlZXplKTsKfQoKCgp9'.
	

]
