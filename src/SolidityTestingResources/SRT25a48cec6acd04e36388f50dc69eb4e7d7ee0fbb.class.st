Class {
	#name : #SRT25a48cec6acd04e36388f50dc69eb4e7d7ee0fbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT25a48cec6acd04e36388f50dc69eb4e7d7ee0fbb >> base64 [
	^ ''.
	

]
