Class {
	#name : #SRT8dfe3cfb26a586495b3b8a2f586dc8ac1441e2c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8dfe3cfb26a586495b3b8a2f586dc8ac1441e2c6 >> base64 [
	^ ''.
	

]
