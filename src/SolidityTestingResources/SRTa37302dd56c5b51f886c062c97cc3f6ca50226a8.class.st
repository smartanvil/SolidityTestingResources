Class {
	#name : #SRTa37302dd56c5b51f886c062c97cc3f6ca50226a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa37302dd56c5b51f886c062c97cc3f6ca50226a8 >> base64 [
	^ ''.
	

]
