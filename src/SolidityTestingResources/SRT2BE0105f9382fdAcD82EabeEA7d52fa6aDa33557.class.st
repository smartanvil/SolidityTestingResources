Class {
	#name : #SRT2BE0105f9382fdAcD82EabeEA7d52fa6aDa33557,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2BE0105f9382fdAcD82EabeEA7d52fa6aDa33557 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogIENvcHlyaWdodCAyMDE3LCBBbnRvbiBFZ29yb3YgKE1vdGhlcnNoaXAgRm91bmRhdGlvbikKICBDb3B5cmlnaHQgMjAxNywgS2xhdXMgSG90dCAoQmxvY2tjaGFpbkxhYnMubnopCiAgQ29weXJpZ2h0IDIwMTcsIEpvcmdlIEl6cXVpZXJkbyAoQXJhZ29uIEZvdW5kYXRpb24pCiAgQ29weXJpZ2h0IDIwMTcsIEpvcmRpIEJheWxpbmEgKEdpdmV0aCkKCiAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KKi8KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludCBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KfQoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgLy8vIEBub3RpY2UgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyb2xsZXIgaXMgdGhlIG9ubHkgYWRkcmVzcyB0aGF0IGNhbiBjYWxsCiAgLy8vICBhIGZ1bmN0aW9uIHdpdGggdGhpcyBtb2RpZmllcgogIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlcikgdGhyb3c7IF87IH0KCiAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgZnVuY3Rpb24gQ29udHJvbGxlZCgpIHsgY29udHJvbGxlciA9IG1zZy5zZW5kZXI7fQoKICAvLy8gQG5vdGljZSBDaGFuZ2VzIHRoZSBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdAogIC8vLyBAcGFyYW0gX25ld0NvbnRyb2xsZXIgVGhlIG5ldyBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdAogIGZ1bmN0aW9uIGNoYW5nZUNvbnRyb2xsZXIoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgb25seUNvbnRyb2xsZXIgewogICAgY29udHJvbGxlciA9IF9uZXdDb250cm9sbGVyOwogIH0KfQoKY29udHJhY3QgUmVmdW5kYWJsZSB7CiAgZnVuY3Rpb24gcmVmdW5kKGFkZHJlc3MgdGgsIHVpbnQgYW1vdW50KSByZXR1cm5zIChib29sKTsKfQoKLy8vIEBkZXYgVGhlIHRva2VuIGNvbnRyb2xsZXIgY29udHJhY3QgbXVzdCBpbXBsZW1lbnQgdGhlc2UgZnVuY3Rpb25zCmNvbnRyYWN0IFRva2VuQ29udHJvbGxlciB7CiAgLy8vIEBub3RpY2UgQ2FsbGVkIHdoZW4gYF9vd25lcmAgc2VuZHMgZXRoZXIgdG8gdGhlIE1pbmlNZSBUb2tlbiBjb250cmFjdAogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgc2VudCB0aGUgZXRoZXIgdG8gY3JlYXRlIHRva2VucwogIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGV0aGVyIGlzIGFjY2VwdGVkLCBmYWxzZSBpZiBpdCB0aHJvd3MKICBmdW5jdGlvbiBwcm94eVBheW1lbnQoYWRkcmVzcyBfb3duZXIpIHBheWFibGUgcmV0dXJucyhib29sKTsKCiAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUKICAvLy8gIGNvbnRyb2xsZXIgdG8gcmVhY3QgaWYgZGVzaXJlZAogIC8vLyBAcGFyYW0gX2Zyb20gVGhlIG9yaWdpbiBvZiB0aGUgdHJhbnNmZXIKICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zZmVyCiAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSB0cmFuc2ZlcgogIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcmV0dXJucyhib29sKTsKCiAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYW4gYXBwcm92YWwgYWxsb3dpbmcgdGhlCiAgLy8vICBjb250cm9sbGVyIHRvIHJlYWN0IGlmIGRlc2lyZWQKICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IGNhbGxzIGBhcHByb3ZlKClgCiAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgc3BlbmRlciBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBhcHByb3ZhbAogIGZ1bmN0aW9uIG9uQXBwcm92ZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYW1vdW50KQogICAgcmV0dXJucyhib29sKTsKfQoKY29udHJhY3QgRVJDMjBUb2tlbiB7CiAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAqLwogIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IEJ1cm5hYmxlIGlzIENvbnRyb2xsZWQgewogIC8vLyBAbm90aWNlIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cm9sbGVyIGlzIHRoZSBvbmx5IGFkZHJlc3MgdGhhdCBjYW4gY2FsbAogIC8vLyAgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbW9kaWZpZXIsIGFsc28gdGhlIGJ1cm5lciBjYW4gY2FsbCBidXQgYWxzbyB0aGUKICAvLy8gdGFyZ2V0IG9mIHRoZSBmdW5jdGlvbiBtdXN0IGJlIHRoZSBidXJuZXIKICBtb2RpZmllciBvbmx5Q29udHJvbGxlck9yQnVybmVyKGFkZHJlc3MgdGFyZ2V0KSB7CiAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBjb250cm9sbGVyIHx8IChtc2cuc2VuZGVyID09IGJ1cm5lciAmJiBtc2cuc2VuZGVyID09IHRhcmdldCkpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlCdXJuZXIgewogICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gYnVybmVyKTsKICAgIF87CiAgfQogIGFkZHJlc3MgcHVibGljIGJ1cm5lcjsKCiAgZnVuY3Rpb24gQnVybmFibGUoKSB7IGJ1cm5lciA9IG1zZy5zZW5kZXI7fQoKICAvLy8gQG5vdGljZSBDaGFuZ2VzIHRoZSBidXJuZXIgb2YgdGhlIGNvbnRyYWN0CiAgLy8vIEBwYXJhbSBfbmV3QnVybmVyIFRoZSBuZXcgYnVybmVyIG9mIHRoZSBjb250cmFjdAogIGZ1bmN0aW9uIGNoYW5nZUJ1cm5lcihhZGRyZXNzIF9uZXdCdXJuZXIpIG9ubHlCdXJuZXIgewogICAgYnVybmVyID0gX25ld0J1cm5lcjsKICB9Cn0KCmNvbnRyYWN0IE1pbmlNZVRva2VuSSBpcyBFUkMyMFRva2VuLCBCdXJuYWJsZSB7CgogICAgICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgICAgICAgICAgIC8vVGhlIFRva2VuJ3MgbmFtZTogZS5nLiBEaWdpeERBTyBUb2tlbnMKICAgICAgdWludDggcHVibGljIGRlY2ltYWxzOyAgICAgICAgICAgICAvL051bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgIC8vQW4gaWRlbnRpZmllcjogZS5nLiBSRVAKICAgICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ01NVF8wLjEnOyAvL0FuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZQoKLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBFUkMyMCBNZXRob2RzCi8vLy8vLy8vLy8vLy8vLy8vLy8KCgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc2VuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYsIGFuZCB0aGVuIGEgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzCiAgICAvLy8gIGJlaW5nIGFwcHJvdmVkLCBgX3NwZW5kZXJgLiBUaGlzIGFsbG93cyB1c2VycyB0byB1c2UgdGhlaXIgdG9rZW5zIHRvCiAgICAvLy8gIGludGVyYWN0IHdpdGggY29udHJhY3RzIGluIG9uZSBmdW5jdGlvbiBjYWxsIGluc3RlYWQgb2YgdHdvCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGZ1bmN0aW9uIGNhbGwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKAogICAgICAgIGFkZHJlc3MgX3NwZW5kZXIsCiAgICAgICAgdWludDI1NiBfYW1vdW50LAogICAgICAgIGJ5dGVzIF9leHRyYURhdGEKICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCi8vLy8vLy8vLy8vLy8vLy8KLy8gUXVlcnkgYmFsYW5jZSBhbmQgdG90YWxTdXBwbHkgaW4gSGlzdG9yeQovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHBhcmFtIF9ibG9ja051bWJlciBUaGUgYmxvY2sgbnVtYmVyIHdoZW4gdGhlIGJhbGFuY2UgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KAogICAgICAgIGFkZHJlc3MgX293bmVyLAogICAgICAgIHVpbnQgX2Jsb2NrTnVtYmVyCiAgICApIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICAgIC8vLyBAbm90aWNlIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYC4KICAgIC8vLyBAcGFyYW0gX2Jsb2NrTnVtYmVyIFRoZSBibG9jayBudW1iZXIgd2hlbiB0aGUgdG90YWxTdXBwbHkgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5QXQodWludCBfYmxvY2tOdW1iZXIpIGNvbnN0YW50IHJldHVybnModWludCk7CgovLy8vLy8vLy8vLy8vLy8vCi8vIENsb25lIFRva2VuIE1ldGhvZAovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ3JlYXRlcyBhIG5ldyBjbG9uZSB0b2tlbiB3aXRoIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBiZWluZwogICAgLy8vICB0aGlzIHRva2VuIGF0IGBfc25hcHNob3RCbG9ja2AKICAgIC8vLyBAcGFyYW0gX2Nsb25lVG9rZW5OYW1lIE5hbWUgb2YgdGhlIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9jbG9uZURlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIHNtYWxsZXN0IHVuaXQKICAgIC8vLyBAcGFyYW0gX2Nsb25lVG9rZW5TeW1ib2wgU3ltYm9sIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfc25hcHNob3RCbG9jayBCbG9jayB3aGVuIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHBhcmVudCB0b2tlbiBpcwogICAgLy8vICBjb3BpZWQgdG8gc2V0IHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbmV3IGNsb25lIHRva2VuOwogICAgLy8vICBpZiB0aGUgYmxvY2sgaXMgemVybyB0aGFuIHRoZSBhY3R1YWwgYmxvY2ssIHRoZSBjdXJyZW50IGJsb2NrIGlzIHVzZWQKICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgVHJ1ZSBpZiB0cmFuc2ZlcnMgYXJlIGFsbG93ZWQgaW4gdGhlIGNsb25lCiAgICAvLy8gQHJldHVybiBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IE1pbmlNZVRva2VuIENvbnRyYWN0CiAgICBmdW5jdGlvbiBjcmVhdGVDbG9uZVRva2VuKAogICAgICAgIHN0cmluZyBfY2xvbmVUb2tlbk5hbWUsCiAgICAgICAgdWludDggX2Nsb25lRGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfY2xvbmVUb2tlblN5bWJvbCwKICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLAogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQKICAgICkgcmV0dXJucyhhZGRyZXNzKTsKCi8vLy8vLy8vLy8vLy8vLy8KLy8gR2VuZXJhdGUgYW5kIGRlc3Ryb3kgdG9rZW5zCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBHZW5lcmF0ZXMgYF9hbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRoZSBuZXcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyBnZW5lcmF0ZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgZ2VuZXJhdGVkIGNvcnJlY3RseQogICAgZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbnMoYWRkcmVzcyBfb3duZXIsIHVpbnQgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCk7CgoKICAgIC8vLyBAbm90aWNlIEJ1cm5zIGBfYW1vdW50YCB0b2tlbnMgZnJvbSBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGxvc2UgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgdG8gYnVybgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdG9rZW5zIGFyZSBidXJuZWQgY29ycmVjdGx5CiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQpIHJldHVybnMgKGJvb2wpOwoKLy8vLy8vLy8vLy8vLy8vLwovLyBFbmFibGUgdG9rZW5zIHRyYW5zZmVycwovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgRW5hYmxlcyB0b2tlbiBob2xkZXJzIHRvIHRyYW5zZmVyIHRoZWlyIHRva2VucyBmcmVlbHkgaWYgdHJ1ZQogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUKICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVycyhib29sIF90cmFuc2ZlcnNFbmFibGVkKTsKCi8vLy8vLy8vLy8KLy8gU2FmZXR5IE1ldGhvZHMKLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIGJ5IHRoZSBjb250cm9sbGVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogICAgLy8vICBzZW50IHRva2VucyB0byB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgeW91IHdhbnQgdG8gcmVjb3ZlcgogICAgLy8vICBzZXQgdG8gMCBpbiBjYXNlIHlvdSB3YW50IHRvIGV4dHJhY3QgZXRoZXIuCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIF90b2tlbik7CgovLy8vLy8vLy8vLy8vLy8vCi8vIEV2ZW50cwovLy8vLy8vLy8vLy8vLy8vCgogICAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCBhZGRyZXNzIGluZGV4ZWQgX2NvbnRyb2xsZXIsIHVpbnQgX2Ftb3VudCk7CiAgICBldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7Cn0KCmNvbnRyYWN0IEZpbmFsaXphYmxlIHsKICB1aW50MjU2IHB1YmxpYyBmaW5hbGl6ZWRCbG9jazsKICBib29sIHB1YmxpYyBnb2FsTWV0OwoKICBmdW5jdGlvbiBmaW5hbGl6ZSgpOwp9Cgpjb250cmFjdCBDb250cmlidXRpb24gaXMgQ29udHJvbGxlZCwgVG9rZW5Db250cm9sbGVyLCBGaW5hbGl6YWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Q2FwOyAvLyBUb3RhbCBNU1Agc3VwcGx5IHRvIGJlIGdlbmVyYXRlZAogIHVpbnQyNTYgcHVibGljIGV4Y2hhbmdlUmF0ZTsgLy8gRVRILU1TUCBleGNoYW5nZSByYXRlCiAgdWludDI1NiBwdWJsaWMgdG90YWxTb2xkOyAvLyBIb3cgbXVjaCB0b2tlbnMgc29sZAogIHVpbnQyNTYgcHVibGljIHRvdGFsU2FsZVN1cHBseUNhcDsgLy8gVG9rZW4gc2FsZSBjYXAKCiAgTWluaU1lVG9rZW5JIHB1YmxpYyBzaXQ7CiAgTWluaU1lVG9rZW5JIHB1YmxpYyBtc3A7CgogIHVpbnQyNTYgcHVibGljIHN0YXJ0QmxvY2s7CiAgdWludDI1NiBwdWJsaWMgZW5kQmxvY2s7CgogIGFkZHJlc3MgcHVibGljIGRlc3RFdGhEZXZzOwogIGFkZHJlc3MgcHVibGljIGRlc3RUb2tlbnNTaXQ7CiAgYWRkcmVzcyBwdWJsaWMgZGVzdFRva2Vuc1RlYW07CiAgYWRkcmVzcyBwdWJsaWMgZGVzdFRva2Vuc1JlZmVyYWxzOwoKICBhZGRyZXNzIHB1YmxpYyBtc3BDb250cm9sbGVyOwoKICB1aW50MjU2IHB1YmxpYyBpbml0aWFsaXplZEJsb2NrOwogIHVpbnQyNTYgcHVibGljIGZpbmFsaXplZFRpbWU7CgogIHVpbnQyNTYgcHVibGljIG1pbmltdW1faW52ZXN0bWVudDsKICB1aW50MjU2IHB1YmxpYyBtaW5pbXVtX2dvYWw7CgogIGJvb2wgcHVibGljIHBhdXNlZDsKCiAgbW9kaWZpZXIgaW5pdGlhbGl6ZWQoKSB7CiAgICBhc3NlcnQoYWRkcmVzcyhtc3ApICE9IDB4MCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgY29udHJpYnV0aW9uT3BlbigpIHsKICAgIGFzc2VydChnZXRCbG9ja051bWJlcigpID49IHN0YXJ0QmxvY2sgJiYKICAgICAgICAgICAgZ2V0QmxvY2tOdW1iZXIoKSA8PSBlbmRCbG9jayAmJgogICAgICAgICAgICBmaW5hbGl6ZWRCbG9jayA9PSAwICYmCiAgICAgICAgICAgIGFkZHJlc3MobXNwKSAhPSAweDApOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gQ29udHJpYnV0aW9uKCkgewogICAgLy8gQm9vbGVhbnMgYXJlIGZhbHNlIGJ5IGRlZmF1bHQgY29uc2lkZXIgcmVtb3ZpbmcgdGhpcwogICAgcGF1c2VkID0gZmFsc2U7CiAgfQoKICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSBjb250cm9sbGVyIGJlZm9yZSB0aGUgY29udHJpYnV0aW9uCiAgLy8vICBwZXJpb2Qgc3RhcnRzIFRoaXMgaW5pdGlhbGl6ZXMgbW9zdCBvZiB0aGUgcGFyYW1ldGVycwogIC8vLyBAcGFyYW0gX21zcCBBZGRyZXNzIG9mIHRoZSBNU1AgdG9rZW4gY29udHJhY3QKICAvLy8gQHBhcmFtIF9tc3BDb250cm9sbGVyIFRva2VuIGNvbnRyb2xsZXIgZm9yIHRoZSBNU1AgdGhhdCB3aWxsIGJlIHRyYW5zZmVycmVkIGFmdGVyCiAgLy8vICB0aGUgY29udHJpYnV0aW9uIGZpbmFsaXplcy4KICAvLy8gQHBhcmFtIF90b3RhbFN1cHBseUNhcCBNYXhpbXVtIGFtb3VudCBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUgZHVyaW5nIHRoZSBjb250cmlidXRpb24KICAvLy8gQHBhcmFtIF9leGNoYW5nZVJhdGUgRVRIIHRvIE1TUCByYXRlIGZvciB0aGUgdG9rZW4gc2FsZQogIC8vLyBAcGFyYW0gX3N0YXJ0QmxvY2sgQmxvY2sgd2hlbiB0aGUgY29udHJpYnV0aW9uIHBlcmlvZCBzdGFydHMKICAvLy8gQHBhcmFtIF9lbmRCbG9jayBUaGUgbGFzdCBibG9jayB0aGF0IHRoZSBjb250cmlidXRpb24gcGVyaW9kIGlzIGFjdGl2ZQogIC8vLyBAcGFyYW0gX2Rlc3RFdGhEZXZzIERlc3RpbmF0aW9uIGFkZHJlc3Mgd2hlcmUgdGhlIGNvbnRyaWJ1dGlvbiBldGhlciBpcyBzZW50CiAgLy8vIEBwYXJhbSBfZGVzdFRva2Vuc1NpdCBBZGRyZXNzIG9mIHRoZSBleGNoYW5nZXIgU0lULU1TUCB3aGVyZSB0aGUgTVNQIGFyZSBzZW50CiAgLy8vICB0byBiZSBkaXN0cmlidXRlZCB0byB0aGUgU0lUIGhvbGRlcnMuCiAgLy8vIEBwYXJhbSBfZGVzdFRva2Vuc1RlYW0gQWRkcmVzcyB3aGVyZSB0aGUgdG9rZW5zIGZvciB0aGUgdGVhbSBhcmUgc2VudAogIC8vLyBAcGFyYW0gX2Rlc3RUb2tlbnNSZWZlcmFscyBBZGRyZXNzIHdoZXJlIHRoZSB0b2tlbnMgZm9yIHRoZSByZWZlcmFsIHN5c3RlbSBhcmUgc2VudAogIC8vLyBAcGFyYW0gX3NpdCBBZGRyZXNzIG9mIHRoZSBTSVQgdG9rZW4gY29udHJhY3QKICBmdW5jdGlvbiBpbml0aWFsaXplKAogICAgICBhZGRyZXNzIF9tc3AsCiAgICAgIGFkZHJlc3MgX21zcENvbnRyb2xsZXIsCgogICAgICB1aW50MjU2IF90b3RhbFN1cHBseUNhcCwKICAgICAgdWludDI1NiBfZXhjaGFuZ2VSYXRlLAogICAgICB1aW50MjU2IF9taW5pbXVtX2dvYWwsCgogICAgICB1aW50MjU2IF9zdGFydEJsb2NrLAogICAgICB1aW50MjU2IF9lbmRCbG9jaywKCiAgICAgIGFkZHJlc3MgX2Rlc3RFdGhEZXZzLAogICAgICBhZGRyZXNzIF9kZXN0VG9rZW5zU2l0LAogICAgICBhZGRyZXNzIF9kZXN0VG9rZW5zVGVhbSwKICAgICAgYWRkcmVzcyBfZGVzdFRva2Vuc1JlZmVyYWxzLAoKICAgICAgYWRkcmVzcyBfc2l0CiAgKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgLy8gSW5pdGlhbGl6ZSBvbmx5IG9uY2UKICAgIGFzc2VydChhZGRyZXNzKG1zcCkgPT0gMHgwKTsKCiAgICBtc3AgPSBNaW5pTWVUb2tlbkkoX21zcCk7CiAgICBhc3NlcnQobXNwLnRvdGFsU3VwcGx5KCkgPT0gMCk7CiAgICBhc3NlcnQobXNwLmNvbnRyb2xsZXIoKSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgIGFzc2VydChtc3AuZGVjaW1hbHMoKSA9PSAxOCk7ICAvLyBTYW1lIGFtb3VudCBvZiBkZWNpbWFscyBhcyBFVEgKCiAgICByZXF1aXJlKF9tc3BDb250cm9sbGVyICE9IDB4MCk7CiAgICBtc3BDb250cm9sbGVyID0gX21zcENvbnRyb2xsZXI7CgogICAgcmVxdWlyZShfZXhjaGFuZ2VSYXRlID4gMCk7CiAgICBleGNoYW5nZVJhdGUgPSBfZXhjaGFuZ2VSYXRlOwoKICAgIGFzc2VydChfc3RhcnRCbG9jayA+PSBnZXRCbG9ja051bWJlcigpKTsKICAgIHJlcXVpcmUoX3N0YXJ0QmxvY2sgPCBfZW5kQmxvY2spOwogICAgc3RhcnRCbG9jayA9IF9zdGFydEJsb2NrOwogICAgZW5kQmxvY2sgPSBfZW5kQmxvY2s7CgogICAgcmVxdWlyZShfZGVzdEV0aERldnMgIT0gMHgwKTsKICAgIGRlc3RFdGhEZXZzID0gX2Rlc3RFdGhEZXZzOwoKICAgIHJlcXVpcmUoX2Rlc3RUb2tlbnNTaXQgIT0gMHgwKTsKICAgIGRlc3RUb2tlbnNTaXQgPSBfZGVzdFRva2Vuc1NpdDsKCiAgICByZXF1aXJlKF9kZXN0VG9rZW5zVGVhbSAhPSAweDApOwogICAgZGVzdFRva2Vuc1RlYW0gPSBfZGVzdFRva2Vuc1RlYW07CgogICAgcmVxdWlyZShfZGVzdFRva2Vuc1JlZmVyYWxzICE9IDB4MCk7CiAgICBkZXN0VG9rZW5zUmVmZXJhbHMgPSBfZGVzdFRva2Vuc1JlZmVyYWxzOwoKICAgIHJlcXVpcmUoX3NpdCAhPSAweDApOwogICAgc2l0ID0gTWluaU1lVG9rZW5JKF9zaXQpOwoKICAgIGluaXRpYWxpemVkQmxvY2sgPSBnZXRCbG9ja051bWJlcigpOwogICAgLy8gU0lUIGFtb3VudCBzaG91bGQgYmUgbm8gbW9yZSB0aGFuIDIwJSBvZiBNU1AgdG90YWwgc3VwcGx5IGNhcAogICAgYXNzZXJ0KHNpdC50b3RhbFN1cHBseUF0KGluaXRpYWxpemVkQmxvY2spICogNSA8PSBfdG90YWxTdXBwbHlDYXApOwogICAgdG90YWxTdXBwbHlDYXAgPSBfdG90YWxTdXBwbHlDYXA7CgogICAgLy8gV2UgYXJlIGdvaW5nIHRvIHNhbGUgNzAlIG9mIHRvdGFsIHN1cHBseSBjYXAKICAgIHRvdGFsU2FsZVN1cHBseUNhcCA9IHBlcmNlbnQoNzApLm11bChfdG90YWxTdXBwbHlDYXApLmRpdihwZXJjZW50KDEwMCkpOwoKICAgIG1pbmltdW1fZ29hbCA9IF9taW5pbXVtX2dvYWw7CiAgfQoKICBmdW5jdGlvbiBzZXRNaW5pbXVtSW52ZXN0bWVudCgKICAgICAgdWludCBfbWluaW11bV9pbnZlc3RtZW50CiAgKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgbWluaW11bV9pbnZlc3RtZW50ID0gX21pbmltdW1faW52ZXN0bWVudDsKICB9CgogIGZ1bmN0aW9uIHNldEV4Y2hhbmdlUmF0ZSgKICAgICAgdWludCBfZXhjaGFuZ2VSYXRlCiAgKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgYXNzZXJ0KGdldEJsb2NrTnVtYmVyKCkgPCBzdGFydEJsb2NrKTsKICAgIGV4Y2hhbmdlUmF0ZSA9IF9leGNoYW5nZVJhdGU7CiAgfQoKICAvLy8gQG5vdGljZSBJZiBhbnlib2R5IHNlbmRzIEV0aGVyIGRpcmVjdGx5IHRvIHRoaXMgY29udHJhY3QsIGNvbnNpZGVyIGhlIGlzCiAgLy8vICBnZXR0aW5nIE1TUHMuCiAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgbm90UGF1c2VkIHsKICAgIHByb3h5UGF5bWVudChtc2cuc2VuZGVyKTsKICB9CgoKICAvLy8vLy8vLy8vCiAgLy8gVG9rZW5Db250cm9sbGVyIGZ1bmN0aW9ucwogIC8vLy8vLy8vLy8KCiAgLy8vIEBub3RpY2UgVGhpcyBtZXRob2Qgd2lsbCBnZW5lcmFsbHkgYmUgY2FsbGVkIGJ5IHRoZSBNU1AgdG9rZW4gY29udHJhY3QgdG8KICAvLy8gIGFjcXVpcmUgTVNQcy4gT3IgZGlyZWN0bHkgZnJvbSB0aGlyZCBwYXJ0aWVzIHRoYXQgd2FudCB0byBhY3F1aXJlIE1TUHMgaW4KICAvLy8gIGJlaGFsZiBvZiBhIHRva2VuIGhvbGRlci4KICAvLy8gQHBhcmFtIF90aCBNU1AgaG9sZGVyIHdoZXJlIHRoZSBNU1BzIHdpbGwgYmUgbWludGVkLgogIGZ1bmN0aW9uIHByb3h5UGF5bWVudChhZGRyZXNzIF90aCkgcHVibGljIHBheWFibGUgbm90UGF1c2VkIGluaXRpYWxpemVkIGNvbnRyaWJ1dGlvbk9wZW4gcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdGggIT0gMHgwKTsKICAgIGRvQnV5KF90aCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcywgYWRkcmVzcywgdWludDI1NikgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIG9uQXBwcm92ZShhZGRyZXNzLCBhZGRyZXNzLCB1aW50MjU2KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gZG9CdXkoYWRkcmVzcyBfdGgpIGludGVybmFsIHsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IG1pbmltdW1faW52ZXN0bWVudCk7CgogICAgLy8gQW50aXNwYW0gbWVjaGFuaXNtCiAgICBhZGRyZXNzIGNhbGxlcjsKICAgIGlmIChtc2cuc2VuZGVyID09IGFkZHJlc3MobXNwKSkgewogICAgICBjYWxsZXIgPSBfdGg7CiAgICB9IGVsc2UgewogICAgICBjYWxsZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIERvIG5vdCBhbGxvdyBjb250cmFjdHMgdG8gZ2FtZSB0aGUgc3lzdGVtCiAgICBhc3NlcnQoIWlzQ29udHJhY3QoY2FsbGVyKSk7CgogICAgdWludDI1NiB0b0Z1bmQgPSBtc2cudmFsdWU7CiAgICB1aW50MjU2IGxlZnRGb3JTYWxlID0gdG9rZW5zRm9yU2FsZSgpOwogICAgaWYgKHRvRnVuZCA+IDApIHsKICAgICAgaWYgKGxlZnRGb3JTYWxlID4gMCkgewogICAgICAgIHVpbnQyNTYgdG9rZW5zR2VuZXJhdGVkID0gdG9GdW5kLm11bChleGNoYW5nZVJhdGUpOwoKICAgICAgICAvLyBDaGVjayB0b3RhbCBzdXBwbHkgY2FwIHJlYWNoZWQsIHNlbGwgdGhlIGFsbCByZW1haW5pbmcgdG9rZW5zCiAgICAgICAgaWYgKHRva2Vuc0dlbmVyYXRlZCA+IGxlZnRGb3JTYWxlKSB7CiAgICAgICAgICB0b2tlbnNHZW5lcmF0ZWQgPSBsZWZ0Rm9yU2FsZTsKICAgICAgICAgIHRvRnVuZCA9IGxlZnRGb3JTYWxlLmRpdihleGNoYW5nZVJhdGUpOwogICAgICAgIH0KCiAgICAgICAgYXNzZXJ0KG1zcC5nZW5lcmF0ZVRva2VucyhfdGgsIHRva2Vuc0dlbmVyYXRlZCkpOwogICAgICAgIHRvdGFsU29sZCA9IHRvdGFsU29sZC5hZGQodG9rZW5zR2VuZXJhdGVkKTsKICAgICAgICBpZiAodG90YWxTb2xkID49IG1pbmltdW1fZ29hbCkgewogICAgICAgICAgZ29hbE1ldCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGRlc3RFdGhEZXZzLnRyYW5zZmVyKHRvRnVuZCk7CiAgICAgICAgTmV3U2FsZShfdGgsIHRvRnVuZCwgdG9rZW5zR2VuZXJhdGVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b0Z1bmQgPSAwOwogICAgICB9CiAgICB9CgogICAgdWludDI1NiB0b1JldHVybiA9IG1zZy52YWx1ZS5zdWIodG9GdW5kKTsKICAgIGlmICh0b1JldHVybiA+IDApIHsKICAgICAgLy8gSWYgdGhlIGNhbGwgY29tZXMgZnJvbSB0aGUgVG9rZW4gY29udHJvbGxlciwKICAgICAgLy8gdGhlbiB3ZSByZXR1cm4gaXQgdG8gdGhlIHRva2VuIEhvbGRlci4KICAgICAgLy8gT3RoZXJ3aXNlIHdlIHJldHVybiB0byB0aGUgc2VuZGVyLgogICAgICBpZiAobXNnLnNlbmRlciA9PSBhZGRyZXNzKG1zcCkpIHsKICAgICAgICBfdGgudHJhbnNmZXIodG9SZXR1cm4pOwogICAgICB9IGVsc2UgewogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIodG9SZXR1cm4pOwogICAgICB9CiAgICB9CiAgfQoKICAvLy8gQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYW4gYWRkcmVzcyBpcyBhIGNvbnRyYWN0CiAgLy8vIEBwYXJhbSBfYWRkciBUaGUgYWRkcmVzcyBiZWluZyBxdWVyaWVkCiAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBgX2FkZHJgIGlzIGEgY29udHJhY3QKICBmdW5jdGlvbiBpc0NvbnRyYWN0KGFkZHJlc3MgX2FkZHIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgIGlmIChfYWRkciA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICB1aW50MjU2IHNpemU7CiAgICBhc3NlbWJseSB7CiAgICAgIHNpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICB9CiAgICByZXR1cm4gKHNpemUgPiAwKTsKICB9CgogIGZ1bmN0aW9uIHJlZnVuZCgpIHB1YmxpYyB7CiAgICByZXF1aXJlKGZpbmFsaXplZEJsb2NrICE9IDApOwogICAgcmVxdWlyZSghZ29hbE1ldCk7CgogICAgdWludDI1NiBhbW91bnRUb2tlbnMgPSBtc3AuYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwogICAgcmVxdWlyZShhbW91bnRUb2tlbnMgPiAwKTsKICAgIHVpbnQyNTYgYW1vdW50RXRoZXIgPSBhbW91bnRUb2tlbnMuZGl2KGV4Y2hhbmdlUmF0ZSk7CiAgICBhZGRyZXNzIHRoID0gbXNnLnNlbmRlcjsKCiAgICBSZWZ1bmRhYmxlKG1zcENvbnRyb2xsZXIpLnJlZnVuZCh0aCwgYW1vdW50VG9rZW5zKTsKICAgIFJlZnVuZGFibGUoZGVzdEV0aERldnMpLnJlZnVuZCh0aCwgYW1vdW50RXRoZXIpOwoKICAgIFJlZnVuZCh0aCwgYW1vdW50VG9rZW5zLCBhbW91bnRFdGhlcik7CiAgfQoKICBldmVudCBSZWZ1bmQoYWRkcmVzcyBfdG9rZW5faG9sZGVyLCB1aW50MjU2IF9hbW91bnRfdG9rZW5zLCB1aW50MjU2IF9hbW91bnRfZXRoZXIpOwoKICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCB3aWxsIGNhbiBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyb2xsZXIgYmVmb3JlIHRoZSBjb250cmlidXRpb24gcGVyaW9kCiAgLy8vICBlbmQgb3IgYnkgYW55Ym9keSBhZnRlciB0aGUgYGVuZEJsb2NrYC4gVGhpcyBtZXRob2QgZmluYWxpemVzIHRoZSBjb250cmlidXRpb24gcGVyaW9kCiAgLy8vICBieSBjcmVhdGluZyB0aGUgcmVtYWluaW5nIHRva2VucyBhbmQgdHJhbnNmZXJyaW5nIHRoZSBjb250cm9sbGVyIHRvIHRoZSBjb25maWd1cmVkCiAgLy8vICBjb250cm9sbGVyLgogIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIGluaXRpYWxpemVkIHsKICAgIGFzc2VydChnZXRCbG9ja051bWJlcigpID49IHN0YXJ0QmxvY2spOwogICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gY29udHJvbGxlciB8fCBnZXRCbG9ja051bWJlcigpID4gZW5kQmxvY2sgfHwgdG9rZW5zRm9yU2FsZSgpID09IDApOwogICAgcmVxdWlyZShmaW5hbGl6ZWRCbG9jayA9PSAwKTsKCiAgICBmaW5hbGl6ZWRCbG9jayA9IGdldEJsb2NrTnVtYmVyKCk7CiAgICBmaW5hbGl6ZWRUaW1lID0gbm93OwoKICAgIGlmIChnb2FsTWV0KSB7CiAgICAgIC8vIEdlbmVyYXRlIDUlIGZvciB0aGUgdGVhbQogICAgICBhc3NlcnQobXNwLmdlbmVyYXRlVG9rZW5zKAogICAgICAgIGRlc3RUb2tlbnNUZWFtLAogICAgICAgIHBlcmNlbnQoNSkubXVsKHRvdGFsU3VwcGx5Q2FwKS5kaXYocGVyY2VudCgxMDApKSkpOwoKICAgICAgLy8gR2VuZXJhdGUgNSUgZm9yIHRoZSByZWZlcmFsIGJvbnVzZXMKICAgICAgYXNzZXJ0KG1zcC5nZW5lcmF0ZVRva2VucygKICAgICAgICBkZXN0VG9rZW5zUmVmZXJhbHMsCiAgICAgICAgcGVyY2VudCg1KS5tdWwodG90YWxTdXBwbHlDYXApLmRpdihwZXJjZW50KDEwMCkpKSk7CgogICAgICAvLyBHZW5lcmF0ZSB0b2tlbnMgZm9yIFNJVCBleGNoYW5nZXIKICAgICAgYXNzZXJ0KG1zcC5nZW5lcmF0ZVRva2VucygKICAgICAgICBkZXN0VG9rZW5zU2l0LAogICAgICAgIHNpdC50b3RhbFN1cHBseUF0KGluaXRpYWxpemVkQmxvY2spKSk7CiAgICB9CgogICAgbXNwLmNoYW5nZUNvbnRyb2xsZXIobXNwQ29udHJvbGxlcik7CiAgICBGaW5hbGl6ZWQoKTsKICB9CgogIGZ1bmN0aW9uIHBlcmNlbnQodWludDI1NiBwKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gcC5tdWwoMTAqKjE2KTsKICB9CgoKICAvLy8vLy8vLy8vCiAgLy8gQ29uc3RhbnQgZnVuY3Rpb25zCiAgLy8vLy8vLy8vLwoKICAvLy8gQHJldHVybiBUb3RhbCB0b2tlbnMgaXNzdWVkIGluIHdlaXMuCiAgZnVuY3Rpb24gdG9rZW5zSXNzdWVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBtc3AudG90YWxTdXBwbHkoKTsKICB9CgogIC8vLyBAcmV0dXJuIFRvdGFsIHRva2VucyBhdmFpbGFsZSBmb3IgdGhlIHNhbGUgaW4gd2Vpcy4KICBmdW5jdGlvbiB0b2tlbnNGb3JTYWxlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgcmV0dXJuIHRvdGFsU2FsZVN1cHBseUNhcCA+IHRvdGFsU29sZCA/IHRvdGFsU2FsZVN1cHBseUNhcCAtIHRvdGFsU29sZCA6IDA7CiAgfQoKCiAgLy8vLy8vLy8vLwogIC8vIFRlc3Rpbmcgc3BlY2lmaWMgbWV0aG9kcwogIC8vLy8vLy8vLy8KCiAgLy8vIEBub3RpY2UgVGhpcyBmdW5jdGlvbiBpcyBvdmVycmlkZGVuIGJ5IHRoZSB0ZXN0IE1vY2tzLgogIGZ1bmN0aW9uIGdldEJsb2NrTnVtYmVyKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJsb2NrLm51bWJlcjsKICB9CgoKICAvLy8vLy8vLy8vCiAgLy8gU2FmZXR5IE1ldGhvZHMKICAvLy8vLy8vLy8vCgogIC8vLyBAbm90aWNlIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIGJ5IHRoZSBjb250cm9sbGVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogIC8vLyAgc2VudCB0b2tlbnMgdG8gdGhpcyBjb250cmFjdC4KICAvLy8gQHBhcmFtIF90b2tlbiBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyCiAgLy8vICBzZXQgdG8gMCBpbiBjYXNlIHlvdSB3YW50IHRvIGV4dHJhY3QgZXRoZXIuCiAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoYWRkcmVzcyBfdG9rZW4pIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICBpZiAobXNwLmNvbnRyb2xsZXIoKSA9PSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgIG1zcC5jbGFpbVRva2VucyhfdG9rZW4pOwogICAgfQogICAgaWYgKF90b2tlbiA9PSAweDApIHsKICAgICAgY29udHJvbGxlci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICByZXR1cm47CiAgICB9CgogICAgRVJDMjBUb2tlbiB0b2tlbiA9IEVSQzIwVG9rZW4oX3Rva2VuKTsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnRyYW5zZmVyKGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogICAgQ2xhaW1lZFRva2VucyhfdG9rZW4sIGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogIH0KCgogIC8vLyBAbm90aWNlIFBhdXNlcyB0aGUgY29udHJpYnV0aW9uIGlmIHRoZXJlIGlzIGFueSBpc3N1ZQogIGZ1bmN0aW9uIHBhdXNlQ29udHJpYnV0aW9uKCkgb25seUNvbnRyb2xsZXIgewogICAgcGF1c2VkID0gdHJ1ZTsKICB9CgogIC8vLyBAbm90aWNlIFJlc3VtZXMgdGhlIGNvbnRyaWJ1dGlvbgogIGZ1bmN0aW9uIHJlc3VtZUNvbnRyaWJ1dGlvbigpIG9ubHlDb250cm9sbGVyIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogIH0KCiAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCBhZGRyZXNzIGluZGV4ZWQgX2NvbnRyb2xsZXIsIHVpbnQyNTYgX2Ftb3VudCk7CiAgZXZlbnQgTmV3U2FsZShhZGRyZXNzIGluZGV4ZWQgX3RoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX3Rva2Vucyk7CiAgZXZlbnQgRmluYWxpemVkKCk7Cn0KCi8vLyBAdGl0bGUgU0lURXhjaGFuZ2VyIENvbnRyYWN0Ci8vLyBAYXV0aG9yIEFudG9uIEVnb3JvdgovLy8gQGRldiBUaGlzIGNvbnRyYWN0IHdpbGwgYmUgdXNlZCB0byBkaXN0cmlidXRlIE1TUCBiZXR3ZWVuIFNJVCBob2xkZXJzLgovLy8gIFNJVCB0b2tlbiBpcyBub3QgdHJhbnNmZXJhYmxlLCBhbmQgd2UganVzdCBrZWVwIGFuIGFjY291bnRpbmcgYmV0d2VlbiBhbGwgdG9rZW5zCi8vLyAgZGVwb3NpdGVkIGFuZCB0aGUgdG9rZW5zIGNvbGxlY3RlZC4KLy8vICBUaGUgY29udHJvbGxlclNoaXAgb2YgU0lUIHNob3VsZCBiZSB0cmFuc2ZlcnJlZCB0byB0aGlzIGNvbnRyYWN0IGJlZm9yZSB0aGUKLy8vICBjb250cmlidXRpb24gcGVyaW9kIHN0YXJ0cy4KCmNvbnRyYWN0IFNJVEV4Y2hhbmdlciBpcyBDb250cm9sbGVkLCBUb2tlbkNvbnRyb2xsZXIgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBjb2xsZWN0ZWQ7CiAgdWludDI1NiBwdWJsaWMgdG90YWxDb2xsZWN0ZWQ7CiAgTWluaU1lVG9rZW5JIHB1YmxpYyBzaXQ7CiAgTWluaU1lVG9rZW5JIHB1YmxpYyBtc3A7CiAgQ29udHJpYnV0aW9uIHB1YmxpYyBjb250cmlidXRpb247CgogIGZ1bmN0aW9uIFNJVEV4Y2hhbmdlcihhZGRyZXNzIF9zaXQsIGFkZHJlc3MgX21zcCwgYWRkcmVzcyBfY29udHJpYnV0aW9uKSB7CiAgICBzaXQgPSBNaW5pTWVUb2tlbkkoX3NpdCk7CiAgICBtc3AgPSBNaW5pTWVUb2tlbkkoX21zcCk7CiAgICBjb250cmlidXRpb24gPSBDb250cmlidXRpb24oX2NvbnRyaWJ1dGlvbik7CiAgfQoKICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSBTSVQgaG9sZGVycyB0byBjb2xsZWN0IHRoZWlyCiAgLy8vICBjb3JyZXNwb25kaW5nIE1TUHMKICBmdW5jdGlvbiBjb2xsZWN0KCkgcHVibGljIHsKICAgIC8vIFNJVCBzaG9sZGVyIGNvdWxkIGNvbGxlY3QgTVNQIHJpZ2h0IGFmdGVyIGNvbnRyaWJ1dGlvbiBzdGFydGVkCiAgICBhc3NlcnQoZ2V0QmxvY2tOdW1iZXIoKSA+IGNvbnRyaWJ1dGlvbi5zdGFydEJsb2NrKCkpOwoKICAgIC8vIEdldCBjdXJyZW50IE1TUCBiYWxsYW5jZQogICAgdWludDI1NiBiYWxhbmNlID0gc2l0LmJhbGFuY2VPZkF0KG1zZy5zZW5kZXIsIGNvbnRyaWJ1dGlvbi5pbml0aWFsaXplZEJsb2NrKCkpOwoKICAgIC8vIEFuZCB0aGVuIHN1YnRyYWN0IHRoZSBhbW91bnQgYWxyZWFkeSBjb2xsZWN0ZWQKICAgIHVpbnQyNTYgYW1vdW50ID0gYmFsYW5jZS5zdWIoY29sbGVjdGVkW21zZy5zZW5kZXJdKTsKCiAgICByZXF1aXJlKGFtb3VudCA+IDApOyAgLy8gTm90aWZ5IHRoZSB1c2VyIHRoYXQgdGhlcmUgYXJlIG5vIHRva2VucyB0byBleGNoYW5nZQoKICAgIHRvdGFsQ29sbGVjdGVkID0gdG90YWxDb2xsZWN0ZWQuYWRkKGFtb3VudCk7CiAgICBjb2xsZWN0ZWRbbXNnLnNlbmRlcl0gPSBjb2xsZWN0ZWRbbXNnLnNlbmRlcl0uYWRkKGFtb3VudCk7CgogICAgYXNzZXJ0KG1zcC50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQpKTsKCiAgICBUb2tlbnNDb2xsZWN0ZWQobXNnLnNlbmRlciwgYW1vdW50KTsKICB9CgogIGZ1bmN0aW9uIHByb3h5UGF5bWVudChhZGRyZXNzKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChib29sKSB7CiAgICB0aHJvdzsKICB9CgogIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcywgYWRkcmVzcywgdWludDI1NikgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIG9uQXBwcm92ZShhZGRyZXNzLCBhZGRyZXNzLCB1aW50MjU2KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLy8vLy8vLy8vLwogIC8vIFRlc3Rpbmcgc3BlY2lmaWMgbWV0aG9kcwogIC8vLy8vLy8vLy8KCiAgLy8vIEBub3RpY2UgVGhpcyBmdW5jdGlvbiBpcyBvdmVycmlkZGVuIGJ5IHRoZSB0ZXN0IE1vY2tzLgogIGZ1bmN0aW9uIGdldEJsb2NrTnVtYmVyKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJsb2NrLm51bWJlcjsKICB9CgogIC8vLy8vLy8vLy8KICAvLyBTYWZldHkgTWV0aG9kCiAgLy8vLy8vLy8vLwoKICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBieSB0aGUgY29udHJvbGxlciB0byBleHRyYWN0IG1pc3Rha2VubHkKICAvLy8gIHNlbnQgdG9rZW5zIHRvIHRoaXMgY29udHJhY3QuCiAgLy8vIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgeW91IHdhbnQgdG8gcmVjb3ZlcgogIC8vLyAgc2V0IHRvIDAgaW4gY2FzZSB5b3Ugd2FudCB0byBleHRyYWN0IGV0aGVyLgogIGZ1bmN0aW9uIGNsYWltVG9rZW5zKGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgYXNzZXJ0KF90b2tlbiAhPSBhZGRyZXNzKG1zcCkpOwogICAgaWYgKF90b2tlbiA9PSAweDApIHsKICAgICAgY29udHJvbGxlci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICByZXR1cm47CiAgICB9CgogICAgRVJDMjBUb2tlbiB0b2tlbiA9IEVSQzIwVG9rZW4oX3Rva2VuKTsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnRyYW5zZmVyKGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogICAgQ2xhaW1lZFRva2VucyhfdG9rZW4sIGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogIH0KCiAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCBhZGRyZXNzIGluZGV4ZWQgX2NvbnRyb2xsZXIsIHVpbnQyNTYgX2Ftb3VudCk7CiAgZXZlbnQgVG9rZW5zQ29sbGVjdGVkKGFkZHJlc3MgaW5kZXhlZCBfaG9sZGVyLCB1aW50MjU2IF9hbW91bnQpOwoKfQ=='.
	

]
