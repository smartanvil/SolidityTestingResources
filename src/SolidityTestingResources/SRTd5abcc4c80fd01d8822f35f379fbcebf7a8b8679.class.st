Class {
	#name : #SRTd5abcc4c80fd01d8822f35f379fbcebf7a8b8679,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd5abcc4c80fd01d8822f35f379fbcebf7a8b8679 >> base64 [
	^ ''.
	

]
