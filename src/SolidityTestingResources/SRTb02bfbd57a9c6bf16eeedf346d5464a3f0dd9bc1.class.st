Class {
	#name : #SRTb02bfbd57a9c6bf16eeedf346d5464a3f0dd9bc1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb02bfbd57a9c6bf16eeedf346d5464a3f0dd9bc1 >> base64 [
	^ ''.
	

]
