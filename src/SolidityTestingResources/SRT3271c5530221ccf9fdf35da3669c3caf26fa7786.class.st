Class {
	#name : #SRT3271c5530221ccf9fdf35da3669c3caf26fa7786,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3271c5530221ccf9fdf35da3669c3caf26fa7786 >> base64 [
	^ ''.
	

]
