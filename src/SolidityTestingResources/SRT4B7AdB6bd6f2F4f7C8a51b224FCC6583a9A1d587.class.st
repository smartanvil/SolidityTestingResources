Class {
	#name : #SRT4B7AdB6bd6f2F4f7C8a51b224FCC6583a9A1d587,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4B7AdB6bd6f2F4f7C8a51b224FCC6583a9A1d587 >> base64 [
	^ ''.
	

]
