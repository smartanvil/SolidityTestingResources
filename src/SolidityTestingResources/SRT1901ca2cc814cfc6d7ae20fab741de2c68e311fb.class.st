Class {
	#name : #SRT1901ca2cc814cfc6d7ae20fab741de2c68e311fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1901ca2cc814cfc6d7ae20fab741de2c68e311fb >> base64 [
	^ ''.
	

]
