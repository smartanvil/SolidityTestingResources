Class {
	#name : #SRT3f4dd010fbbc9a9b6d95f1f53837d7e9f3befac8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f4dd010fbbc9a9b6d95f1f53837d7e9f3befac8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuOTsKCi8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9Cgp9CgovKioKCSAqIEB0aXRsZSBFUkMyMEJhc2ljCgkgKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKCSAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoJICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewoJICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCSAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCSAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CgkgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50MjU2IHNpemUpIHsKICAgICByZXF1aXJlKCEobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpKTsKICAgICBfOwogIH0KCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSB7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1hbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcnQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgQmFzaWNUb2tlbiwgRVJDMjAgewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWFobGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSghKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSApOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYW4gYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9Cgpjb250cmFjdCBQaXhpdSBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICB1aW50IHB1YmxpYyBkZWNpbWFscyA9IDY7CiAgICBib29sIHB1YmxpYyBpc1BheWFibGUgPSB0cnVlOwogICAgYm9vbCBwdWJsaWMgaXNXaXRoZHJhd2FibGUgPSB0cnVlOwogICAgYm9vbCBwdWJsaWMgaXNSZXF1aXJlRGF0YSA9IGZhbHNlOwoJCiAgICBzdHJ1Y3QgZXhjaGFuZ2VSYXRlIHsKICAgICAgICAKICAgICAgICB1aW50IHRpbWUxOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgdWludCB0aW1lMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgdWludCB2YWx1ZTsKICAgICAgICAKICAgIH0KICAgIAogICAgc3RydWN0IE1lbWJlciB7CiAgICAgICAgIAogICAgICAgIGJvb2wgaXNFeGlzdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBib29sIGlzRGl2aWRlbmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgYm9vbCBpc1dpdGhkcmF3OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICB1aW50MjU2IGRpdmlkZW5kOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgdWludDI1NiB3aXRoZHJhdzsKICAgICAgICAKICAgIH0KICAgIAogICAgZXhjaGFuZ2VSYXRlW10gcHVibGljIGV4Y2hhbmdlUmF0ZUFycmF5OyAgCgoJbWFwcGluZyAoYWRkcmVzcyA9PiBNZW1iZXIpIHB1YmxpYyBtZW1iZXJzOyAKICAgIGFkZHJlc3NbXSBwdWJsaWMgYWRtaW5BcnJheTsgICAKICAgIGFkZHJlc3NbXSBwdWJsaWMgbWVtYmVyQXJyYXk7CiAgICAKCSAKICAgIGFkZHJlc3MgcHVibGljIGRlcG9zaXRfYWRkcmVzczsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuRXhjaGFuZ2VSYXRlSW5XZWkgPSAzMDAqMTAqKjY7CgkKCS8qCiAgICAq6Jmb5pOs5biz6JmfICAg5YWxMjDnorwKICAgICoxLTQg5Zu65a6aIDB4RkZGRkZGRkYgCiAgICAqNS04IOe5s+iyu+acn+mZkAogICAgKjktMTEg5rWB5rC06JmfIOWVhuWutuS7o+eivCAweDAwMDAwMC0weEZGRkZGRgogICAgKjEyLTE2IOWVhuWutuiHquiogiA056K8PTjkvY0gMC1GCiAgICAqMTctMTgg6YeR6aGNCiAgICAqMTkgOjB4MjAgKzRiaXTlgJnoo5zpm7YKICAgICog55W2IEJZVEUxOSA9IDAwICAxMi0xOCDngrrllYblrrboh6roqIIKICAgICoyMCDmqqLmn6XnorwgCiAgICAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgc2hvcFN0b3JlSWQ7IAogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgc2hvcFN0b3JlQWRkcmVzczsgCiAgICB1aW50MjU2IHB1YmxpYyBzaG9wU3RvcmVQcmljZSA9IDEqMTAqKjY7CiAgICB1aW50MjU2IHB1YmxpYyBzaG9wU3RvcmVOZXh0SWQgPSAwOwogICAgYWRkcmVzcyBwdWJsaWMgc2hvcFN0b3JlUmVnaXN0ZXI7CgoJLy/kuI3mrbjpm7YKCQoJdWludDI1NiBwdWJsaWMgdG90YWxfdG9rZW53ZWkgPSAwOyAKCXVpbnQyNTYgcHVibGljIG1pbl9wYXlfd2VpID0gMDsKCS8vIGFkbWluX3dpdGhkcmF3X2FsbCDmrbjpm7YKCXVpbnQyNTYgcHVibGljIHRvdGFsX2RldmlkZW5kID0gMDsgLy9tZW1iZXIKCXVpbnQyNTYgcHVibGljIHRvdGFsX3dpdGhkcmF3ID0gMDsgLy9tZW1iZXIKICAgIHVpbnQyNTYgcHVibGljIGRlcG9zaXRfYW1vdW50ID0gMDsgIC8vZGVwb3NpdAogICAgdWludDI1NiBwdWJsaWMgd2l0aGRyYXdfYW1vdW50ID0gMDsgLy9kZXBvc2l0CiAgICB1aW50MjU2IHB1YmxpYyBkaXZpZGVuZF9hbW91bnQgPSAwOyAvL2FkbWluICAgCiAgICAKICAgIGV2ZW50IFBheWRhdGEoYWRkcmVzcyBpbmRleGVkIHBheWVyLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhLCB1aW50MjU2IHRoaXNUb2tlbldlaSk7CiAgICAKICAgIGZ1bmN0aW9uIFBpeGl1KCkgewogICAgICAgIHRvdGFsU3VwcGx5ID0gMjEwMDAwMDAwMDAwMDA7IAogICAgICAgIGFkbWluQXJyYXkucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICBhZG1pbl9zZXRfZGVwb3NpdChtc2cuc2VuZGVyKTsKICAgICAgICBhZG1pbl9zZXRfc2hvcFN0b3JlUmVnaXN0ZXIobXNnLnNlbmRlcik7CiAgICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRfb3JkZXJBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MsdWludCBfZXhwaXJlX2RheSx1aW50IF91c2VyZGF0YSx1aW50IF9hbW91bnQgLHVpbnQgX3plcm8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHVpbnQyNTYgc3RvcmVpZCA9IHNob3BTdG9yZUlkW19hZGRyZXNzXTsKICAgICAgICB1aW50MTYwIHJlc3VsdCA9IHVpbnQxNTIoMHhmZmZmZmZmZjw8MTIwKSArIHVpbnQxMjAoKF9leHBpcmVfZGF5ICogODY0MDAgKyBub3cpPDw4OCkgKyB1aW50ODgoc3RvcmVpZDw8NjQpOyAKICAgICAgICAKICAgICAgICAgICAgX3VzZXJkYXRhID0gX3VzZXJkYXRhPDwxNjsKICAgICAgICAgICAgX3VzZXJkYXRhICs9IF9hbW91bnQ7CiAgICAgICAgCiAgICAgICAgcmVzdWx0ICs9IHVpbnQ2NChfdXNlcmRhdGE8PDgpOwogICAgICAgIHJlc3VsdCArPSB1aW50OCgweDIwK196ZXJvKTsKICAgICAgICB1aW50OCBjcmMgPSB1aW50OChzaGEyNTYodWludDE1MihyZXN1bHQpICkpOwogICAgICAgIHJldHVybiAocmVzdWx0IDw8IDgpICsgY3JjOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBpc0xlYWRpbmc0RkYoYWRkcmVzcyBfc2VuZGVyICkgcHJpdmF0ZSAgcmV0dXJucyhib29sKXsKICAgICAgICB1aW50MzIgZmY0PSB1aW50MzIodWludDI1Nihfc2VuZGVyKSA+PiAxMjgpOwogICAgICAgIHJldHVybiAoZmY0ID09IDB4ZmZmZmZmZmYpOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlEZXBvc2l0KCkgewogICAgICAgIAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBkZXBvc2l0X2FkZHJlc3MpOwogICAgICAgIF87CiAgICAgICAgCiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlBZG1pbigpIHsKICAgICAgICAKICAgICAgICBib29sIG9rID0gYWRtaW5fY2hlY2sobXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShvayk7CiAgICAgICAgXzsKICAgICAgICAKICAgIH0KICAgIAogICAgbW9kaWZpZXIgYWRtaW5FeGlzdHMoYWRkcmVzcyBhZG1pbikgewoKICAgICAgICBib29sIG9rID0gZmFsc2U7CiAgICAgICAgaWYoYWRtaW4gIT0gbXNnLnNlbmRlcil7CiAgICAgICAgICAgIAogICAgICAgICAgICBvayA9IGFkbWluX2NoZWNrKGFkbWluKTsKICAgICAgICAKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShvayk7CiAgICAgICAgXzsgCiAgICAgICAgCiAgICB9CiAgICAKICAgIG1vZGlmaWVyIGFkbWluRG9lc05vdEV4aXN0KGFkZHJlc3MgYWRtaW4pIHsKCiAgICAgICAgYm9vbCBvayA9IGFkbWluX2NoZWNrKGFkbWluKTsKICAgICAgICByZXF1aXJlKCFvayk7CiAgICAgICAgXzsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRtaW5fY2hlY2soYWRkcmVzcyBhZG1pbikgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zKGJvb2wpewogICAgICAgIAogICAgICAgIGJvb2wgb2sgPSBmYWxzZTsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhZG1pbkFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChhZG1pbiA9PSBhZG1pbkFycmF5W2ldKSB7CiAgICAgICAgICAgICAgICBvayA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gb2s7CiAgICAgICAgCiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG1lbWJlckV4aXN0cyhhZGRyZXNzIG1lbWJlcikgewoKICAgICAgICBib29sIG9rID0gZmFsc2U7CiAgICAgICAgaWYgKG1lbWJlcnNbbWVtYmVyXS5pc0V4aXN0cyA9PSB0cnVlKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBvayA9IHRydWU7CiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICByZXF1aXJlKG9rKTsKICAgICAgICBfOwogICAgICAgIAogICAgfQogICAgCiAgICBtb2RpZmllciBpc01lbWJlcigpIHsKCiAgICAgICAgYm9vbCBvayA9IGZhbHNlOwogICAgICAgIGlmIChtZW1iZXJzW21zZy5zZW5kZXJdLmlzRXhpc3RzID09IHRydWUpIHsgICAgICAgICAgICAKICAgICAgICAgICAgb2sgPSB0cnVlOyAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICByZXF1aXJlKG9rKTsKICAgICAgICBfOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9kZXBvc2l0KHVpbnQgeEV0aCkgb25seUFkbWluewogICAgICAgIAogICAgICAgIHVpbnQyNTYgeHdlaSA9IHhFdGggKiAxMCoqMTg7CiAgICAgICAgZGVwb3NpdF9hbW91bnQgKz0geHdlaTsKICAgICAgICAKICAgIH0KICAgIAogICAgLyoqCSoJ566h55CG5ZOh55m85pS+6IKh5oGvCSoJ5q+P5YCL5pyD5ZOh6IKh5oGv5L6dIAkqCSovCiAgICBmdW5jdGlvbiBhZG1pbl9kaXZpZGVuZCh1aW50IHhFdGgpIG9ubHlBZG1pbnsKICAgICAgICAKCQl1aW50MjU2IHh3ZWkgPSB4RXRoICogMTAqKjE4OwoJCXJlcXVpcmUoeHdlaSA8PSAoZGVwb3NpdF9hbW91bnQtZGl2aWRlbmRfYW1vdW50KSApOyAKCgkJZGl2aWRlbmRfYW1vdW50ICs9IHh3ZWk7CiAgICAgICAgdWludDI1NiBsZW4gPSBtZW1iZXJBcnJheS5sZW5ndGg7CQogICAgICAgIHVpbnQgaSA9IDA7CiAgICAgICAgYWRkcmVzcyBfbWVtYmVyOwogICAgICAgIAoJCXVpbnQgdG90YWxfYmFsYW5jZV9kaXZpZGVuZWQ9MDsKICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKyspeyAgICAgICAgICAgIAogICAgICAgICAgICBfbWVtYmVyID0gbWVtYmVyQXJyYXlbaV07CgkJCWlmKG1lbWJlcnNbX21lbWJlcl0uaXNEaXZpZGVuZCl7CgkJCQl0b3RhbF9iYWxhbmNlX2RpdmlkZW5lZCA9IGJhbGFuY2VzW19tZW1iZXJdOyAKCQkJfSAgICAgICAgICAgIAogICAgICAgIH0KCQl1aW50MjU2IHBlclRva2VuV2VpID0geHdlaSAvICh0b3RhbF9iYWxhbmNlX2RpdmlkZW5lZCAvIDEwICoqIDYpOwogICAgICAgICAgICAKICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKyspeyAgICAgICAgICAgIAogICAgICAgICAgICBfbWVtYmVyID0gbWVtYmVyQXJyYXlbaV07CgkJCWlmKG1lbWJlcnNbX21lbWJlcl0uaXNEaXZpZGVuZCl7CgkJCQl1aW50MjU2IHRoaXNXZWkgPSAoYmFsYW5jZXNbX21lbWJlcl0gLyAxMCAqKiA2KSAqIHBlclRva2VuV2VpOwoJCQkJbWVtYmVyc1tfbWVtYmVyXS5kaXZpZGVuZCArPSB0aGlzV2VpOyAKCQkJCXRvdGFsX2RldmlkZW5kICs9IHRoaXNXZWk7CgkJCX0gICAgICAgICAgICAKICAgICAgICB9CiAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRtaW5fc2V0X2V4Y2hhbmdlX3JhdGUodWludFtdIGV4Y2hhbmdlUmF0ZXMpIG9ubHlBZG1pbnsKICAgICAgICAgCiAgICAgICAgdWludCBsZW4gPSBleGNoYW5nZVJhdGVzLmxlbmd0aDsKICAgICAgICBleGNoYW5nZVJhdGVBcnJheS5sZW5ndGggPSAwOwogICAgICAgIAogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpewogICAgICAgICAgICAKICAgICAgICAgICAgdWludCB0aW1lMSA9IGV4Y2hhbmdlUmF0ZXNbaV07CiAgICAgICAgICAgIHVpbnQgdGltZTIgPSBleGNoYW5nZVJhdGVzW2kgKyAxXTsKICAgICAgICAgICAgdWludCB2YWx1ZSA9IGV4Y2hhbmdlUmF0ZXNbaSArIDJdKjEwMDA7CiAgICAgICAgICAgIGV4Y2hhbmdlUmF0ZUFycmF5LnB1c2goZXhjaGFuZ2VSYXRlKHRpbWUxLCB0aW1lMiwgdmFsdWUpKTsgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIAogICAgfQogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gYWRtaW5fc2V0X3Nob3BTdG9yZVJlZ2lzdGVyKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlBZG1pbnsKICAgICAgICAKICAgICAgICBzaG9wU3RvcmVSZWdpc3RlciA9IF9hZGRyZXNzOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9zZXRfZXhjaGFuZ2VfcmF0ZSh1aW50MjU2IGV4Y2hhbmdlUmF0ZXMpIG9ubHlBZG1pbnsKICAgICAgICAKICAgICAgICB0b2tlbkV4Y2hhbmdlUmF0ZUluV2VpID0gZXhjaGFuZ2VSYXRlczsKICAgICAgICAKICAgIH0KCglmdW5jdGlvbiBnZXRfZXhjaGFuZ2Vfd2VpKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KXsKCgkJdWludCBsZW4gPSBleGNoYW5nZVJhdGVBcnJheS5sZW5ndGg7ICAKCQl1aW50IG5vd1RpbWUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMyl7CiAgICAgICAgICAgIAoJCQlleGNoYW5nZVJhdGUgbWVtb3J5IHJhdGUgPSBleGNoYW5nZVJhdGVBcnJheVtpXTsKICAgICAgICAgICAgdWludCB0aW1lMSA9IHJhdGUudGltZTE7CiAgICAgICAgICAgIHVpbnQgdGltZTIgPSByYXRlLnRpbWUyOwogICAgICAgICAgICB1aW50IHZhbHVlID0gcmF0ZS52YWx1ZTsKCQkJaWYgKG5vd1RpbWU+PSB0aW1lMSAmJiBub3dUaW1lPD10aW1lMikgewoJCQkJdG9rZW5FeGNoYW5nZVJhdGVJbldlaSA9IHZhbHVlOwoJCQkJcmV0dXJuIHZhbHVlOwoJCQl9CiAgICAgICAgICAgIAogICAgICAgIH0KCQlyZXR1cm4gdG9rZW5FeGNoYW5nZVJhdGVJbldlaTsKCX0KCQoJZnVuY3Rpb24gYWRtaW5fc2V0X21pbl9wYXkodWludDI1NiBfbWluX3BheSkgb25seUFkbWluewoJICAgIAoJICAgIHJlcXVpcmUoX21pbl9wYXkgPj0gMCk7CgkgICAgbWluX3BheV93ZWkgPSBfbWluX3BheSAqIDEwICoqIDE4OwoJICAgIAoJfQogICAgCiAgICBmdW5jdGlvbiBnZXRfYWRtaW5fbGlzdCgpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzc1tdIF9hZG1pbkFycmF5KXsKICAgICAgICAKICAgICAgICBfYWRtaW5BcnJheSA9IGFkbWluQXJyYXk7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX2FkZChhZGRyZXNzIGFkbWluKSBvbmx5QWRtaW4gYWRtaW5Eb2VzTm90RXhpc3QoYWRtaW4pewogICAgICAgIAogICAgICAgIGFkbWluQXJyYXkucHVzaChhZG1pbik7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX2RlbChhZGRyZXNzIGFkbWluKSBvbmx5QWRtaW4gYWRtaW5FeGlzdHMoYWRtaW4pewogICAgICAgIAogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFkbWluQXJyYXkubGVuZ3RoIC0gMTsgaSsrKQogICAgICAgICAgICBpZiAoYWRtaW5BcnJheVtpXSA9PSBhZG1pbikgewogICAgICAgICAgICAgICAgYWRtaW5BcnJheVtpXSA9IGFkbWluQXJyYXlbYWRtaW5BcnJheS5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIGFkbWluQXJyYXkubGVuZ3RoIC09IDE7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX3NldF9kZXBvc2l0KGFkZHJlc3MgYWRkcikgb25seUFkbWluewogICAgICAgIAogICAgICAgIGRlcG9zaXRfYWRkcmVzcyA9IGFkZHI7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX3NldF9zaG9wU3RvcmVQcmljZSh1aW50MjU2IF9zaG9wU3RvcmVQcmljZSkgb25seUFkbWluewogICAgICAgIAogICAgICAgIHNob3BTdG9yZVByaWNlID0gX3Nob3BTdG9yZVByaWNlOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9zZXRfaXNSZXF1aXJlRGF0YShib29sIF9yZXF1aXJlRGF0YSkgb25seUFkbWluewogICAgCiAgICAgICAgaXNSZXF1aXJlRGF0YSA9IF9yZXF1aXJlRGF0YTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRtaW5fYWN0aXZlX3BheWFibGUoKSBvbmx5QWRtaW57CiAgICAKICAgICAgICBpc1BheWFibGUgPSB0cnVlOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9pbmFjdGl2ZV9wYXlhYmxlKCkgb25seUFkbWluewogICAgICAgIAogICAgICAgIGlzUGF5YWJsZSA9IGZhbHNlOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9hY3RpdmVfd2l0aGRyYXdhYmxlKCkgb25seUFkbWluewogICAgICAgIAogICAgICAgIGlzV2l0aGRyYXdhYmxlID0gdHJ1ZTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRtaW5faW5hY3RpdmVfd2l0aGRyYXdhYmxlKCkgb25seUFkbWluewogICAgICAgIAogICAgICAgIGlzV2l0aGRyYXdhYmxlID0gZmFsc2U7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX2FjdGl2ZV9kaXZpZGVuZChhZGRyZXNzIF9tZW1iZXIpIG9ubHlBZG1pbiBtZW1iZXJFeGlzdHMoX21lbWJlcil7CiAgICAgICAgCiAgICAgICAgbWVtYmVyc1tfbWVtYmVyXS5pc0RpdmlkZW5kID0gdHJ1ZTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRtaW5faW5hY3RpdmVfZGl2aWRlbmQoYWRkcmVzcyBfbWVtYmVyKSBvbmx5QWRtaW4gbWVtYmVyRXhpc3RzKF9tZW1iZXIpewogICAgICAgIAogICAgICAgIG1lbWJlcnNbX21lbWJlcl0uaXNEaXZpZGVuZCA9IGZhbHNlOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl9hY3RpdmVfd2l0aGRyYXcoYWRkcmVzcyBfbWVtYmVyKSBvbmx5QWRtaW4gbWVtYmVyRXhpc3RzKF9tZW1iZXIpewogICAgICAgIAogICAgICAgIG1lbWJlcnNbX21lbWJlcl0uaXNXaXRoZHJhdyA9IHRydWU7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkbWluX2luYWN0aXZlX3dpdGhkcmF3KGFkZHJlc3MgX21lbWJlcikgb25seUFkbWluIG1lbWJlckV4aXN0cyhfbWVtYmVyKXsKICAgICAgICAKICAgICAgICBtZW1iZXJzW19tZW1iZXJdLmlzV2l0aGRyYXcgPSBmYWxzZTsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0X3RvdGFsX2luZm8oKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgX2RlcG9zaXRfYW1vdW50LCB1aW50MjU2IF90b3RhbF9kZXZpZGVuZCwgdWludDI1NiBfdG90YWxfcmVtYWluLCB1aW50MjU2IF90b3RhbF93aXRoZHJhdyl7CgogICAgICAgIF90b3RhbF9yZW1haW4gPSB0b3RhbF9kZXZpZGVuZCAtIHRvdGFsX3dpdGhkcmF3OwogICAgICAgIF9kZXBvc2l0X2Ftb3VudCA9IGRlcG9zaXRfYW1vdW50OwogICAgICAgIF90b3RhbF9kZXZpZGVuZCA9IHRvdGFsX2RldmlkZW5kOwogICAgICAgIF90b3RhbF93aXRoZHJhdyA9IHRvdGFsX3dpdGhkcmF3OwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRfaW5mbyhhZGRyZXNzIF9tZW1iZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX2JhbGFuY2UsIHVpbnQyNTYgX2RldmlkZW5kLCB1aW50MjU2IF9yZW1haW4sIHVpbnQyNTYgX3dpdGhkcmF3KXsKICAgICAgICAKICAgICAgICBfZGV2aWRlbmQgPSBtZW1iZXJzW19tZW1iZXJdLmRpdmlkZW5kOwogICAgICAgIF93aXRoZHJhdyA9IG1lbWJlcnNbX21lbWJlcl0ud2l0aGRyYXc7CiAgICAgICAgX3JlbWFpbiA9IF9kZXZpZGVuZCAtIF93aXRoZHJhdzsKICAgICAgICBfYmFsYW5jZSA9IGJhbGFuY2VzW19tZW1iZXJdOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIGlzTWVtYmVyIHsKICAgICAgICAKICAgICAgICB1aW50MjU2IF9yZW1haW4gPSBtZW1iZXJzW21zZy5zZW5kZXJdLmRpdmlkZW5kIC0gbWVtYmVyc1ttc2cuc2VuZGVyXS53aXRoZHJhdzsKICAgICAgICByZXF1aXJlKF9yZW1haW4gPiAwKTsKICAgICAgICByZXF1aXJlKGlzV2l0aGRyYXdhYmxlKTsKICAgICAgICByZXF1aXJlKG1lbWJlcnNbbXNnLnNlbmRlcl0uaXNXaXRoZHJhdyk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihfcmVtYWluKTsKICAgICAgICBtZW1iZXJzW21zZy5zZW5kZXJdLndpdGhkcmF3ICs9IF9yZW1haW47IAogICAgICAgIHRvdGFsX3dpdGhkcmF3ICs9IF9yZW1haW47ICAgICAgICAgIAoKICAgIH0KCiAgICBmdW5jdGlvbiBhZG1pbl93aXRoZHJhdyh1aW50IHhFdGgpIG9ubHlEZXBvc2l0ewoKICAgICAgICB1aW50MjU2IF93aXRoZHJhdyA9IHhFdGggKiAxMCoqMTg7CgkJcmVxdWlyZSggbXNnLnNlbmRlciA9PSBkZXBvc2l0X2FkZHJlc3MgKTsKCgkJcmVxdWlyZSh0aGlzLmJhbGFuY2UgPiBfd2l0aGRyYXcpOwoJCW1zZy5zZW5kZXIudHJhbnNmZXIoX3dpdGhkcmF3KTsKCiAgICAgICAgd2l0aGRyYXdfYW1vdW50ICs9IF93aXRoZHJhdzsgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl93aXRoZHJhd19hbGwoYWRkcmVzcyBfZGVwb3NpdCkgb25seUFkbWluIHsKICAgICAgICAKCQlyZXF1aXJlKCBfZGVwb3NpdCA9PSBkZXBvc2l0X2FkZHJlc3MgKTsgCgoJCV9kZXBvc2l0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CgoJCXRvdGFsX2RldmlkZW5kID0gMDsgLy9tZW1iZXIKCQl0b3RhbF93aXRoZHJhdyA9IDA7IC8vbWVtYmVyCgkJZGVwb3NpdF9hbW91bnQgPSAwOyAgLy9kZXBvc2l0CgkJd2l0aGRyYXdfYW1vdW50ID0gMDsgLy9kZXBvc2l0CgkJZGl2aWRlbmRfYW1vdW50ID0gMDsgLy9hZG1pbiAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZG1pbl90cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlBZG1pbiBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSAgICAgewogICAgICAgIAogICAgICAgIHJlcXVpcmUoX3RvICE9IGRlcG9zaXRfYWRkcmVzcyk7CiAgICAgICAgcmVxdWlyZSh0b3RhbF90b2tlbndlaSA8PSB0b3RhbFN1cHBseSAtIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgdG90YWxfdG9rZW53ZWkgKz0gX3ZhbHVlOwogICAgCiAgICAgICAgaWYgKG1lbWJlcnNbX3RvXS5pc0V4aXN0cyAhPSB0cnVlKSB7ICAKICAgICAgICAgICAgbWVtYmVyc1tfdG9dLmlzRXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgbWVtYmVyc1tfdG9dLmlzRGl2aWRlbmQgPSB0cnVlOwogICAgICAgICAgICBtZW1iZXJzW190b10uaXNXaXRoZHJhdyA9IHRydWU7IAogICAgICAgICAgICBtZW1iZXJBcnJheS5wdXNoKF90byk7ICAKICAgICAgICB9CiAgICAgICAgCiAgICB9CiAKCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgICAgIHsKCQlyZXF1aXJlKF90byAhPSBtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlKGlzUGF5YWJsZSk7CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKCQkKCQlpZihfdG8gPT0gZGVwb3NpdF9hZGRyZXNzKXsKCQkgICAgcmVxdWlyZShfdmFsdWUgPT0gc2hvcFN0b3JlUHJpY2UpOwoJCSAgICBzaG9wU3RvcmVOZXh0SWQrKzsKCQkgICAgc2hvcFN0b3JlSWRbbXNnLnNlbmRlcl0gPSBzaG9wU3RvcmVOZXh0SWQ7CgkJICAgIHNob3BTdG9yZUFkZHJlc3Nbc2hvcFN0b3JlTmV4dElkXSA9IG1zZy5zZW5kZXI7CgkJCgkJfSBlbHNlIGlmKGlzTGVhZGluZzRGRihfdG8pKXsKCQkgICAgdWludDI1NiB0bzI1NiA9IHVpbnQyNTYoX3RvKTsKICAgICAgICAgICAgdWludDMyIGV4cGlyZSA9IHVpbnQzMih0bzI1Nj4+OTYpOwogICAgICAgICAgICB1aW50MzIgc3RvcmVpZCA9IHVpbnQyNCh0bzI1Nj4+NzIpOwogICAgICAgICAgICB1aW50OCBjcmM4ID0gdWludDgodG8yNTYpOwogICAgICAgICAgICByZXF1aXJlKHVpbnQzMihub3cpPGV4cGlyZSB8fCBleHBpcmU9PTApOwogICAgICAgICAgICAKICAgICAgICAgICAgdWludDggY3JjMjAgPSB1aW50OChzaGEyNTYodWludDE1Mih0bzI1Nj4+OCkpKTsKICAgICAgICAgICAgcmVxdWlyZShjcmMyMD09Y3JjOCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBfdG8gPSBzaG9wU3RvcmVBZGRyZXNzW3VpbnQoc3RvcmVpZCldOwogICAgICAgICAgICByZXF1aXJlKHVpbnQoX3RvKT4wKTsKCiAgICAgICAgICAgIHVpbnQ1NiB1c2VyZGF0YSA9IHVpbnQ1Nih0bzI1Nj4+OTYpOwogICAgCQkKICAgIAkJYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAJCWlmIChtZW1iZXJzW190b10uaXNFeGlzdHMgIT0gdHJ1ZSkgewkJCiAgICAJCQltZW1iZXJzW190b10uaXNFeGlzdHMgPSB0cnVlOwogICAgCQkJbWVtYmVyc1tfdG9dLmlzRGl2aWRlbmQgPSB0cnVlOwogICAgCQkJbWVtYmVyc1tfdG9dLmlzV2l0aGRyYXcgPSB0cnVlOyAKICAgIAkJCW1lbWJlckFycmF5LnB1c2goX3RvKTsJCQogICAgCQl9ICAKCQkKCQl9IGVsc2UgeyAKICAgIAkJYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAJCWlmIChtZW1iZXJzW190b10uaXNFeGlzdHMgIT0gdHJ1ZSkgewkJCiAgICAJCQltZW1iZXJzW190b10uaXNFeGlzdHMgPSB0cnVlOwogICAgCQkJbWVtYmVyc1tfdG9dLmlzRGl2aWRlbmQgPSB0cnVlOwogICAgCQkJbWVtYmVyc1tfdG9dLmlzV2l0aGRyYXcgPSB0cnVlOyAKICAgIAkJCW1lbWJlckFycmF5LnB1c2goX3RvKTsJCQogICAgCQl9ICAKCiAgICAgICAgfQoKCQlUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7Cgl9CgkKCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpICAgICB7CgkJcmVxdWlyZShfdG8gIT0gZGVwb3NpdF9hZGRyZXNzKTsKCQlyZXF1aXJlKF9mcm9tICE9IGRlcG9zaXRfYWRkcmVzcyk7CiAgICAgICAgcmVxdWlyZShpc1BheWFibGUpOwoJCXZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07IAoJCXJlcXVpcmUoX2FsbG93YW5jZSA+PSBfdmFsdWUpOwoKCQliYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKCQliYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CgkJYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwoJCQoJCWlmIChtZW1iZXJzW190b10uaXNFeGlzdHMgIT0gdHJ1ZSkgewkJCgkJCW1lbWJlcnNbX3RvXS5pc0V4aXN0cyA9IHRydWU7CgkJCW1lbWJlcnNbX3RvXS5pc0RpdmlkZW5kID0gdHJ1ZTsKCQkJbWVtYmVyc1tfdG9dLmlzV2l0aGRyYXcgPSB0cnVlOyAKCQkJbWVtYmVyQXJyYXkucHVzaChfdG8pOwkJCgkJfSAgCgoJCVRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7Cgl9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgCiAgICAgICAgcGF5KCk7CiAgICAgICAgCiAgICB9CiAgCiAgICBmdW5jdGlvbiBwYXkoKSBwdWJsaWMgcGF5YWJsZSAgcmV0dXJucyAoYm9vbCkgewogICAgICAgIAogICAgICAgIHJlcXVpcmUoIWlzTGVhZGluZzRGRihtc2cuc2VuZGVyKSk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiBtaW5fcGF5X3dlaSk7CiAgICAgICAgcmVxdWlyZShpc1BheWFibGUpOwogICAgICAgIAogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gZGVwb3NpdF9hZGRyZXNzKXsKICAgICAgICAgICAgIGRlcG9zaXRfYW1vdW50ICs9IG1zZy52YWx1ZTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKGlzUmVxdWlyZURhdGEpewogICAgICAgICAgICAgICAgcmVxdWlyZSh1aW50MzIobXNnLmRhdGFbMF0pID09IHVpbnQzMigweEZGRkZGRkZGKSk7ICAgCiAgICAgICAgICAgIH0KICAgICAgICAKICAgIAkJdWludDI1NiBleGNoYW5nZVdlaSA9IGdldF9leGNoYW5nZV93ZWkoKTsKICAgIAkJdWludDI1NiB0aGlzVG9rZW5XZWkgPSBleGNoYW5nZVdlaSAqIG1zZy52YWx1ZSAvIDEwKioxOCA7CiAgICAJCQogICAgCQlyZXF1aXJlKHRvdGFsX3Rva2Vud2VpIDw9IHRvdGFsU3VwcGx5IC0gdGhpc1Rva2VuV2VpKTsKICAgICAgICAKICAgICAgICAgICAgaWYgKG1lbWJlcnNbbXNnLnNlbmRlcl0uaXNFeGlzdHMgIT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBtZW1iZXJzW21zZy5zZW5kZXJdLmlzRXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIG1lbWJlcnNbbXNnLnNlbmRlcl0uaXNEaXZpZGVuZCA9IHRydWU7CiAgICAgICAgICAgICAgICBtZW1iZXJzW21zZy5zZW5kZXJdLmlzV2l0aGRyYXcgPSB0cnVlOyAKICAgICAgICAgICAgICAgIG1lbWJlckFycmF5LnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSAgCiAgICAJCWJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRoaXNUb2tlbldlaTsKICAgIAkJdG90YWxfdG9rZW53ZWkgKz0gdGhpc1Rva2VuV2VpOwogICAgCQkKICAgIAkJUGF5ZGF0YShtc2cuc2VuZGVyLCBtc2cudmFsdWUsIG1zZy5kYXRhLCB0aGlzVG9rZW5XZWkpOwogICAgCQlUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCB0aGlzVG9rZW5XZWkpOwoJCQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIAogICAgfQogICAgICAgICAgICAKICAgIGZ1bmN0aW9uIGdldF90aGlzX2JhbGFuY2UoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpewogICAgICAKICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlOwogICAgICAKICAgIH0KICAgIAp9'.
	

]
