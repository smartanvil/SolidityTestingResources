Class {
	#name : #SRT441c5c62c2257c9e8c91e53dd5731aac586c0532,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT441c5c62c2257c9e8c91e53dd5731aac586c0532 >> base64 [
	^ ''.
	

]
