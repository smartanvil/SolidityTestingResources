Class {
	#name : #SRT8fdebcf5c93dc128de40fefee00f581fd80a1e92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fdebcf5c93dc128de40fefee00f581fd80a1e92 >> base64 [
	^ ''.
	

]
