Class {
	#name : #SRTdfbd6a960a55bcfcf59d5925351e05a51498bcef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfbd6a960a55bcfcf59d5925351e05a51498bcef >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IHNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiID4gMCk7CiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgcmV0dXJuIGM7CiAgfQogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KfQoKY29udHJhY3QgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50IHN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdmFsdWUpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCBfYWxsb3dhbmNlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCmNvbnRyYWN0IFJvY2tDb2luIGlzIEVSQzIwewogICAgICAgIHVpbnQgaW5pdGlhbFN1cHBseSA9IDE2NTAwMDAwOwogICAgICAgIHN0cmluZyBuYW1lID0gIlJvY2tDb2luIjsKICAgICAgICBzdHJpbmcgc3ltYm9sID0gIlJPQ0siOwogICAgICAgIHVpbnQgVVNERXhjaGFuZ2VSYXRlID0gMzAwOwogICAgICAgIGJvb2wgcHJlU2FsZSA9IHRydWU7CiAgICAgICAgYm9vbCBidXJuZWQgPSBmYWxzZTsKICAgICAgICB1aW50IHNhbGVUaW1lU3RhcnQ7CgogICAgICAgIGFkZHJlc3Mgb3duZXJBZGRyZXNzOwoKICAgICAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAgICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludCBhbW91bnQpOwoKICAgICAgICBtb2RpZmllciBvbmx5T3duZXJ7CiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyQWRkcmVzcykgewogICAgICAgICAgICAgICAgICBfOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbFN1cHBseTsKICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldEN1cnJlbnRNb2RpZmllcigpIHJldHVybnMgKHVpbnQgX21vZGlmaWVyKSB7CiAgICAgICAgaWYgKHByZVNhbGUpIHJldHVybiA1OwoKICAgICAgICBpZiAoYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA+IDExNTAwMDAwKSByZXR1cm4gODsKICAgICAgICBpZiAoYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA+IDY1MDAwMDApIHJldHVybiAxMDsKICAgICAgICBpZiAoYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA+IDE1MDAwMDApIHJldHVybiAxMjsKCiAgICAgICAgcmV0dXJuIDA7Cn0KCiAgZnVuY3Rpb24gc2V0VVNERXhjaGFuZ2VSYXRlKHVpbnQgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgICAgICBVU0RFeGNoYW5nZVJhdGUgPSBfdmFsdWU7CiAgICAgICAgfQoKICBmdW5jdGlvbiBzdG9wUHJlU2FsZSgpIG9ubHlPd25lciB7CiAgICAgICAgICAgIGlmIChwcmVTYWxlKSB7CiAgICAgICAgICAgICAgIHNhbGVUaW1lU3RhcnQgPSBub3c7CiAgICAgICAgICAgIH0JCiAgICAgICAgICAgIHByZVNhbGUgPSBmYWxzZTsKICAgICAgICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgICBmdW5jdGlvbiBidXJuVW5zb2xkKCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgIGlmICghcHJlU2FsZSAmJiBzYWxlVGltZVN0YXJ0ICsgNSB3ZWVrcyA8IG5vdyAmJiAhYnVybmVkKSB7CiAgICAgICAgICAgICAgICB1aW50IHNvbGQgPSBpbml0aWFsU3VwcGx5IC0gYmFsYW5jZXNbb3duZXJBZGRyZXNzXTsKICAgICAgICAgICAgICAgIHVpbnQgdG9Ib2xkID0gc2FmZU1hdGguZGl2KHNvbGQsIDEwKTsKICAgICAgICAgICAgICAgIHVpbnQgYnVybmluZ0Ftb3VudCA9IGJhbGFuY2VzW293bmVyQWRkcmVzc10gLSB0b0hvbGQ7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tvd25lckFkZHJlc3NdID0gdG9Ib2xkOwogICAgICAgICAgICAgICAgaW5pdGlhbFN1cHBseSAtPSBidXJuaW5nQW1vdW50OwogICAgICAgICAgICAgICAgICAgIEJ1cm4ob3duZXJBZGRyZXNzLCBidXJuaW5nQW1vdW50KTsKICAgICAgICAgICAgICAgICAgICBidXJuZWQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gYnVybmVkOwogICAgICAgICAgICB9CiAgICB9CgogICAgICAgIGZ1bmN0aW9uIFJvY2tDb2luKCkgewogICAgICAgIG93bmVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIHVpbnQgZGV2RmVlID0gNzAwMDsKICAgICAgICBiYWxhbmNlc1tvd25lckFkZHJlc3NdID0gaW5pdGlhbFN1cHBseSAtIGRldkZlZTsKICAgICAgICAgICAgYWRkcmVzcyBkZXZBZGRyID0gMHhCMDQxNjg3NGQ0MjUzRTEyQzk1QzVGQUM4RjA2OUY5QkZmMThEMWJmOwogICAgICAgICAgICBiYWxhbmNlc1tkZXZBZGRyXSA9IGRldkZlZTsKICAgICAgICAgICAgVHJhbnNmZXIob3duZXJBZGRyZXNzLCBkZXZBZGRyLCBkZXZGZWUpOwogICAgfQoKICAgICAgICBmdW5jdGlvbiAoKSBwYXlhYmxlewogICAgICAgICAgICB1aW50IGFtb3VudEluVVNEb2xsYXJzID0gc2FmZU1hdGguZGl2KHNhZmVNYXRoLm11bChtc2cudmFsdWUsIFVTREV4Y2hhbmdlUmF0ZSksMTAqKjE4KTsKICAgICAgICAgICAgdWludCBjdXJyZW50UHJpY2VNb2RpZmllciA9IGdldEN1cnJlbnRNb2RpZmllcigpOwoKICAgICAgICAgICAgaWYgKGN1cnJlbnRQcmljZU1vZGlmaWVyPjApIHsKICAgICAgICAgICAgICAgIHVpbnQgdmFsdWVUb1Bhc3MgPSBzYWZlTWF0aC5kaXYoc2FmZU1hdGgubXVsKGFtb3VudEluVVNEb2xsYXJzLCAxMCksY3VycmVudFByaWNlTW9kaWZpZXIpOwogICAgICAgICAgICAgICAgaWYgKHByZVNhbGUgJiYgYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA8IDE0NTAwMDAwKSB7c3RvcFByZVNhbGUoKTt9CiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA+PSB2YWx1ZVRvUGFzcykgewogICAgICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlTWF0aC5hZGQoYmFsYW5jZXNbbXNnLnNlbmRlcl0sdmFsdWVUb1Bhc3MpOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJBZGRyZXNzXSA9IHNhZmVNYXRoLnN1YihiYWxhbmNlc1tvd25lckFkZHJlc3NdLHZhbHVlVG9QYXNzKTsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKG93bmVyQWRkcmVzcywgbXNnLnNlbmRlciwgdmFsdWVUb1Bhc3MpOwogICAgICAgICAgICB9IAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgYW1vdW50KSBvbmx5T3duZXJ7CiAgICAgICAgb3duZXJBZGRyZXNzLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgfQkKfQ=='.
	

]
