Class {
	#name : #SRT07Ec6c3159c2336Ba36Ab41f73411f8fEe430470,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07Ec6c3159c2336Ba36Ab41f73411f8fEe430470 >> base64 [
	^ ''.
	

]
