Class {
	#name : #SRTbea80c6235486cb352f488f4be14141fe4d788d2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbea80c6235486cb352f488f4be14141fe4d788d2 >> base64 [
	^ ''.
	

]
