Class {
	#name : #SRTF6FE061efa2a8e15936696BaF5E8CBa8C3F3485B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF6FE061efa2a8e15936696BaF5E8CBa8C3F3485B >> base64 [
	^ ''.
	

]
