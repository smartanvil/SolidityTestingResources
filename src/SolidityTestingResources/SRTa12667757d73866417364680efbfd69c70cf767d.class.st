Class {
	#name : #SRTa12667757d73866417364680efbfd69c70cf767d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa12667757d73866417364680efbfd69c70cf767d >> base64 [
	^ ''.
	

]
