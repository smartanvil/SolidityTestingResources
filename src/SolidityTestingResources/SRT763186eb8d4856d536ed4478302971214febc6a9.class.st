Class {
	#name : #SRT763186eb8d4856d536ed4478302971214febc6a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT763186eb8d4856d536ed4478302971214febc6a9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IEJFVFJfVE9LRU4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkJldHRlciBCZXR0aW5nIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkJFVFIiOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50MjU2IHB1YmxpYyBoYXJkQ2FwID0gNjUwMDAwMDAwICogKDEwICoqIGRlY2ltYWxzKTsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGFkZHJlc3MgcHVibGljIGVzY3JvdzsgLy8gcmVmZXJlbmNlIHRvIGVzY3JvdyBjb250cmFjdCBmb3IgdHJhbnNhY3Rpb24gYW5kIGF1dGhvcml6YXRpb24KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOyAvLyByZWZlcmVuY2UgdG8gdGhlIGNvbnRyYWN0IGNyZWF0b3IKICAgIGFkZHJlc3MgcHVibGljIHRnZUlzc3VlciA9IDB4YmE4MUFDQ0M3MDc0QjVEOUFCREFhMjVjMzBEYmFEOTZCRjQ0RDY2MDsKCiAgICBib29sIHB1YmxpYyB0Z2VBY3RpdmU7CiAgICB1aW50MjU2IHB1YmxpYyB0Z2VEdXJhdGlvbiA9IDMwIGRheXM7CiAgICB1aW50MjU2IHB1YmxpYyB0Z2VTdGFydFRpbWU7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsgLy8gdGhpcmQgcGFydHkgYXV0aG9yaXNhdGlvbnMgZm9yIHRva2VuIHRyYW5zZmVyaW5nCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBlc2Nyb3dBbGxvd2VkOyAvLyBwZXIgYWRkcmVzcyBzd2l0Y2ggYXV0aG9yaXppbmcgdGhlIGVzY3JvdyB0byBlc2Nyb3cgdXNlciB0b2tlbnMKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIGZ1bmN0aW9uIEJFVFJfVE9LRU4oKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5VGdlSXNzdWVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdGdlSXNzdWVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlFc2Nyb3cgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBlc2Nyb3cpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdGdlUnVubmluZyB7CiAgICAgICAgcmVxdWlyZSh0Z2VBY3RpdmUgJiYgYmxvY2sudGltZXN0YW1wIDwgdGdlU3RhcnRUaW1lICsgdGdlRHVyYXRpb24pOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIF90byAhPSBhZGRyZXNzKDApICYmCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJgogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXQogICAgICAgICk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgIF9mcm9tICE9IGFkZHJlc3MoMCkgJiYKICAgICAgICAgIF90byAhPSBhZGRyZXNzKDApICYmCiAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmCiAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYKICAgICAgICAgIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dCiAgICAgICAgKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfc3BlbmRlciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd0VzY3Jvdyhib29sIF9jaG9pY2UpIGV4dGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICBlc2Nyb3dBbGxvd2VkW21zZy5zZW5kZXJdID0gX2Nob2ljZTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZXNjcm93RnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgb25seUVzY3JvdyByZXR1cm5zKGJvb2wpIHsKICAgICAgcmVxdWlyZSAoCiAgICAgICAgX2Zyb20gIT0gYWRkcmVzcygwKSAmJgogICAgICAgIGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYKICAgICAgICBlc2Nyb3dBbGxvd2VkW19mcm9tXSAmJgogICAgICAgIF92YWx1ZSA+IDAKICAgICAgKTsKICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICBiYWxhbmNlc1tlc2Nyb3ddID0gYmFsYW5jZXNbZXNjcm93XS5hZGQoX3ZhbHVlKTsKICAgICAgVHJhbnNmZXIoX2Zyb20sIGVzY3JvdywgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZXNjcm93UmV0dXJuKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfZmVlKSBleHRlcm5hbCBvbmx5RXNjcm93IHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIF90byAhPSBhZGRyZXNzKDApICYmCiAgICAgICAgICAgIF92YWx1ZSA+IDAKICAgICAgICApOwogICAgICAgIGlmKF9mZWUgPiAwKSB7CiAgICAgICAgICAgIHJlcXVpcmUoX2ZlZSA8IHRvdGFsU3VwcGx5ICYmIF9mZWUgPCBiYWxhbmNlc1tlc2Nyb3ddKTsKICAgICAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX2ZlZSk7CiAgICAgICAgICAgIGJhbGFuY2VzW2VzY3Jvd10gPSBiYWxhbmNlc1tlc2Nyb3ddLnN1YihfZmVlKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcihfdG8sIF92YWx1ZSkpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdXNlciwgdWludDI1NiBfdG9rZW5zQW1vdW50KSBwdWJsaWMgb25seVRnZUlzc3VlciB0Z2VSdW5uaW5nIHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQyNTYgbmV3U3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF90b2tlbnNBbW91bnQpOwogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIF91c2VyICE9IGFkZHJlc3MoMCkgJiYKICAgICAgICAgICAgX3Rva2Vuc0Ftb3VudCA+IDAgJiYKICAgICAgICAgICAgIG5ld1N1cHBseSA8IGhhcmRDYXAKICAgICAgICApOwogICAgICAgIGJhbGFuY2VzW191c2VyXSA9IGJhbGFuY2VzW191c2VyXS5hZGQoX3Rva2Vuc0Ftb3VudCk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBuZXdTdXBwbHk7CiAgICAgICAgVHJhbnNmZXIoMHgwLCBfdXNlciwgX3Rva2Vuc0Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXJ2ZVRva2Vuc0dyb3VwKGFkZHJlc3NbXSBfdXNlcnMsIHVpbnQyNTZbXSBfdG9rZW5zQW1vdW50cykgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF91c2Vycy5sZW5ndGggPT0gX3Rva2Vuc0Ftb3VudHMubGVuZ3RoKTsKICAgICAgICB1aW50MjU2IG5ld1N1cHBseTsKICAgICAgICBmb3IodWludDggaSA9IDA7IGkgPCBfdXNlcnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICBuZXdTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX3Rva2Vuc0Ftb3VudHNbaV0ubXVsKDEwICoqIGRlY2ltYWxzKSk7CiAgICAgICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgICAgICBfdXNlcnNbaV0gIT0gYWRkcmVzcygwKSAmJgogICAgICAgICAgICAgICAgX3Rva2Vuc0Ftb3VudHNbaV0gPiAwICYmCiAgICAgICAgICAgICAgICBuZXdTdXBwbHkgPCBoYXJkQ2FwCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJhbGFuY2VzW191c2Vyc1tpXV0gPSBiYWxhbmNlc1tfdXNlcnNbaV1dLmFkZChfdG9rZW5zQW1vdW50c1tpXS5tdWwoMTAgKiogZGVjaW1hbHMpKTsKICAgICAgICAgICAgdG90YWxTdXBwbHkgPSBuZXdTdXBwbHk7CiAgICAgICAgICAgIFRyYW5zZmVyKDB4MCwgX3VzZXJzW2ldLCBfdG9rZW5zQW1vdW50c1tpXSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlc2VydmVUb2tlbnMoYWRkcmVzcyBfdXNlciwgdWludDI1NiBfdG9rZW5zQW1vdW50KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHVpbnQyNTYgbmV3U3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF90b2tlbnNBbW91bnQubXVsKDEwICoqIGRlY2ltYWxzKSk7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgX3VzZXIgIT0gYWRkcmVzcygwKSAmJgogICAgICAgICAgICBfdG9rZW5zQW1vdW50ID4gMCAmJgogICAgICAgICAgICBuZXdTdXBwbHkgPCBoYXJkQ2FwCiAgICAgICAgKTsKICAgICAgICBiYWxhbmNlc1tfdXNlcl0gPSBiYWxhbmNlc1tfdXNlcl0uYWRkKF90b2tlbnNBbW91bnQubXVsKDEwICoqIGRlY2ltYWxzKSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBuZXdTdXBwbHk7CiAgICAgICAgVHJhbnNmZXIoMHgwLCBfdXNlciwgX3Rva2Vuc0Ftb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RhcnRUZ2UoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHRnZUFjdGl2ZSA9IHRydWU7CiAgICAgICAgaWYodGdlU3RhcnRUaW1lID09IDApIHRnZVN0YXJ0VGltZSA9IGJsb2NrLnRpbWVzdGFtcDsKICAgIH0KCiAgICBmdW5jdGlvbiBzdG9wVGdlKGJvb2wgX3Jlc3RhcnQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgIHRnZUFjdGl2ZSA9IGZhbHNlOwogICAgICBpZihfcmVzdGFydCkgdGdlU3RhcnRUaW1lID0gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBleHRlbmRUZ2UodWludDI1NiBfdGltZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgdGdlRHVyYXRpb24gPSB0Z2VEdXJhdGlvbi5hZGQoX3RpbWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEVzY3JvdyhhZGRyZXNzIF9lc2Nyb3cpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRUZ2VJc3N1ZXIoYWRkcmVzcyBfdGdlSXNzdWVyKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHRnZUlzc3VlciA9IF90Z2VJc3N1ZXI7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9'.
	

]
