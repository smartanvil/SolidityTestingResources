Class {
	#name : #SRT668d6003399D2D3Bad858553EAF4B9477fF0962D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT668d6003399D2D3Bad858553EAF4B9477fF0962D >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBVdGlscyB7CgogICAgRVJDMjAgY29uc3RhbnQgaW50ZXJuYWwgRVRIX1RPS0VOX0FERFJFU1MgPSBFUkMyMCgweDAwZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZSk7CiAgICB1aW50ICBjb25zdGFudCBpbnRlcm5hbCBQUkVDSVNJT04gPSAoMTAqKjE4KTsKICAgIHVpbnQgIGNvbnN0YW50IGludGVybmFsIE1BWF9RVFkgICA9ICgxMCoqMjgpOyAvLyAxMEIgdG9rZW5zCiAgICB1aW50ICBjb25zdGFudCBpbnRlcm5hbCBNQVhfUkFURSAgPSAoUFJFQ0lTSU9OICogMTAqKjYpOyAvLyB1cCB0byAxTSB0b2tlbnMgcGVyIEVUSAogICAgdWludCAgY29uc3RhbnQgaW50ZXJuYWwgTUFYX0RFQ0lNQUxTID0gMTg7CiAgICB1aW50ICBjb25zdGFudCBpbnRlcm5hbCBFVEhfREVDSU1BTFMgPSAxODsKICAgIG1hcHBpbmcoYWRkcmVzcz0+dWludCkgaW50ZXJuYWwgZGVjaW1hbHM7CgogICAgZnVuY3Rpb24gc2V0RGVjaW1hbHMoRVJDMjAgdG9rZW4pIGludGVybmFsIHsKICAgICAgICBpZiAodG9rZW4gPT0gRVRIX1RPS0VOX0FERFJFU1MpIGRlY2ltYWxzW3Rva2VuXSA9IEVUSF9ERUNJTUFMUzsKICAgICAgICBlbHNlIGRlY2ltYWxzW3Rva2VuXSA9IHRva2VuLmRlY2ltYWxzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RGVjaW1hbHMoRVJDMjAgdG9rZW4pIGludGVybmFsIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgaWYgKHRva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKSByZXR1cm4gRVRIX0RFQ0lNQUxTOyAvLyBzYXZlIHN0b3JhZ2UgYWNjZXNzCiAgICAgICAgdWludCB0b2tlbkRlY2ltYWxzID0gZGVjaW1hbHNbdG9rZW5dOwogICAgICAgIC8vIHRlY2huaWNhbGx5LCB0aGVyZSBtaWdodCBiZSB0b2tlbiB3aXRoIGRlY2ltYWxzIDAKICAgICAgICAvLyBtb3Jlb3ZlciwgdmVyeSBwb3NzaWJsZSB0aGF0IG9sZCB0b2tlbnMgaGF2ZSBkZWNpbWFscyAwCiAgICAgICAgLy8gdGhlc2UgdG9rZW5zIHdpbGwganVzdCBoYXZlIGhpZ2hlciBnYXMgZmVlcy4KICAgICAgICBpZih0b2tlbkRlY2ltYWxzID09IDApIHJldHVybiB0b2tlbi5kZWNpbWFscygpOwoKICAgICAgICByZXR1cm4gdG9rZW5EZWNpbWFsczsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjRHN0UXR5KHVpbnQgc3JjUXR5LCB1aW50IHNyY0RlY2ltYWxzLCB1aW50IGRzdERlY2ltYWxzLCB1aW50IHJhdGUpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmVxdWlyZShzcmNRdHkgPD0gTUFYX1FUWSk7CiAgICAgICAgcmVxdWlyZShyYXRlIDw9IE1BWF9SQVRFKTsKCiAgICAgICAgaWYgKGRzdERlY2ltYWxzID49IHNyY0RlY2ltYWxzKSB7CiAgICAgICAgICAgIHJlcXVpcmUoKGRzdERlY2ltYWxzIC0gc3JjRGVjaW1hbHMpIDw9IE1BWF9ERUNJTUFMUyk7CiAgICAgICAgICAgIHJldHVybiAoc3JjUXR5ICogcmF0ZSAqICgxMCoqKGRzdERlY2ltYWxzIC0gc3JjRGVjaW1hbHMpKSkgLyBQUkVDSVNJT047CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVxdWlyZSgoc3JjRGVjaW1hbHMgLSBkc3REZWNpbWFscykgPD0gTUFYX0RFQ0lNQUxTKTsKICAgICAgICAgICAgcmV0dXJuIChzcmNRdHkgKiByYXRlKSAvIChQUkVDSVNJT04gKiAoMTAqKihzcmNEZWNpbWFscyAtIGRzdERlY2ltYWxzKSkpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjU3JjUXR5KHVpbnQgZHN0UXR5LCB1aW50IHNyY0RlY2ltYWxzLCB1aW50IGRzdERlY2ltYWxzLCB1aW50IHJhdGUpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmVxdWlyZShkc3RRdHkgPD0gTUFYX1FUWSk7CiAgICAgICAgcmVxdWlyZShyYXRlIDw9IE1BWF9SQVRFKTsKCiAgICAgICAgLy9zb3VyY2UgcXVhbnRpdHkgaXMgcm91bmRlZCB1cC4gdG8gYXZvaWQgZGVzdCBxdWFudGl0eSBiZWluZyB0b28gbG93LgogICAgICAgIHVpbnQgbnVtZXJhdG9yOwogICAgICAgIHVpbnQgZGVub21pbmF0b3I7CiAgICAgICAgaWYgKHNyY0RlY2ltYWxzID49IGRzdERlY2ltYWxzKSB7CiAgICAgICAgICAgIHJlcXVpcmUoKHNyY0RlY2ltYWxzIC0gZHN0RGVjaW1hbHMpIDw9IE1BWF9ERUNJTUFMUyk7CiAgICAgICAgICAgIG51bWVyYXRvciA9IChQUkVDSVNJT04gKiBkc3RRdHkgKiAoMTAqKihzcmNEZWNpbWFscyAtIGRzdERlY2ltYWxzKSkpOwogICAgICAgICAgICBkZW5vbWluYXRvciA9IHJhdGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVxdWlyZSgoZHN0RGVjaW1hbHMgLSBzcmNEZWNpbWFscykgPD0gTUFYX0RFQ0lNQUxTKTsKICAgICAgICAgICAgbnVtZXJhdG9yID0gKFBSRUNJU0lPTiAqIGRzdFF0eSk7CiAgICAgICAgICAgIGRlbm9taW5hdG9yID0gKHJhdGUgKiAoMTAqKihkc3REZWNpbWFscyAtIHNyY0RlY2ltYWxzKSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKG51bWVyYXRvciArIGRlbm9taW5hdG9yIC0gMSkgLyBkZW5vbWluYXRvcjsgLy9hdm9pZCByb3VuZGluZyBkb3duIGVycm9ycwogICAgfQp9Cgpjb250cmFjdCBQZXJtaXNzaW9uR3JvdXBzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKICAgIGFkZHJlc3MgcHVibGljIHBlbmRpbmdBZG1pbjsKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgaW50ZXJuYWwgb3BlcmF0b3JzOwogICAgbWFwcGluZyhhZGRyZXNzPT5ib29sKSBpbnRlcm5hbCBhbGVydGVyczsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBvcGVyYXRvcnNHcm91cDsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBhbGVydGVyc0dyb3VwOwogICAgdWludCBjb25zdGFudCBpbnRlcm5hbCBNQVhfR1JPVVBfU0laRSA9IDUwOwoKICAgIGZ1bmN0aW9uIFBlcm1pc3Npb25Hcm91cHMoKSBwdWJsaWMgewogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRvcigpIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWxlcnRlcigpIHsKICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE9wZXJhdG9ycyAoKSBleHRlcm5hbCB2aWV3IHJldHVybnMoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIG9wZXJhdG9yc0dyb3VwOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFsZXJ0ZXJzICgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gYWxlcnRlcnNHcm91cDsKICAgIH0KCiAgICBldmVudCBUcmFuc2ZlckFkbWluUGVuZGluZyhhZGRyZXNzIHBlbmRpbmdBZG1pbik7CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzLgogICAgICogQHBhcmFtIG5ld0FkbWluIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG5ld0FkbWluICE9IGFkZHJlc3MoMCkpOwogICAgICAgIFRyYW5zZmVyQWRtaW5QZW5kaW5nKHBlbmRpbmdBZG1pbik7CiAgICAgICAgcGVuZGluZ0FkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIGFkbWluIGluIG9uZSB0eC4gVXNlZnVsIGluaXRpYWwgZGVwbG95bWVudC4KICAgICAqIEBwYXJhbSBuZXdBZG1pbiBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyQWRtaW5RdWlja2x5KGFkZHJlc3MgbmV3QWRtaW4pIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUobmV3QWRtaW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgVHJhbnNmZXJBZG1pblBlbmRpbmcobmV3QWRtaW4pOwogICAgICAgIEFkbWluQ2xhaW1lZChuZXdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgZXZlbnQgQWRtaW5DbGFpbWVkKCBhZGRyZXNzIG5ld0FkbWluLCBhZGRyZXNzIHByZXZpb3VzQWRtaW4pOwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzIHRvIGZpbmFsaXplIHRoZSBjaGFuZ2UgYWRtaW4gcHJvY2Vzcy4KICAgICAqLwogICAgZnVuY3Rpb24gY2xhaW1BZG1pbigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShwZW5kaW5nQWRtaW4gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgQWRtaW5DbGFpbWVkKHBlbmRpbmdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gcGVuZGluZ0FkbWluOwogICAgICAgIHBlbmRpbmdBZG1pbiA9IGFkZHJlc3MoMCk7CiAgICB9CgogICAgZXZlbnQgQWxlcnRlckFkZGVkIChhZGRyZXNzIG5ld0FsZXJ0ZXIsIGJvb2wgaXNBZGQpOwoKICAgIGZ1bmN0aW9uIGFkZEFsZXJ0ZXIoYWRkcmVzcyBuZXdBbGVydGVyKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFhbGVydGVyc1tuZXdBbGVydGVyXSk7IC8vIHByZXZlbnQgZHVwbGljYXRlcy4KICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzR3JvdXAubGVuZ3RoIDwgTUFYX0dST1VQX1NJWkUpOwoKICAgICAgICBBbGVydGVyQWRkZWQobmV3QWxlcnRlciwgdHJ1ZSk7CiAgICAgICAgYWxlcnRlcnNbbmV3QWxlcnRlcl0gPSB0cnVlOwogICAgICAgIGFsZXJ0ZXJzR3JvdXAucHVzaChuZXdBbGVydGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVBbGVydGVyIChhZGRyZXNzIGFsZXJ0ZXIpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoYWxlcnRlcnNbYWxlcnRlcl0pOwogICAgICAgIGFsZXJ0ZXJzW2FsZXJ0ZXJdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsZXJ0ZXJzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGFsZXJ0ZXJzR3JvdXBbaV0gPT0gYWxlcnRlcikgewogICAgICAgICAgICAgICAgYWxlcnRlcnNHcm91cFtpXSA9IGFsZXJ0ZXJzR3JvdXBbYWxlcnRlcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGFsZXJ0ZXJzR3JvdXAubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBBbGVydGVyQWRkZWQoYWxlcnRlciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZXZlbnQgT3BlcmF0b3JBZGRlZChhZGRyZXNzIG5ld09wZXJhdG9yLCBib29sIGlzQWRkKTsKCiAgICBmdW5jdGlvbiBhZGRPcGVyYXRvcihhZGRyZXNzIG5ld09wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFvcGVyYXRvcnNbbmV3T3BlcmF0b3JdKTsgLy8gcHJldmVudCBkdXBsaWNhdGVzLgogICAgICAgIHJlcXVpcmUob3BlcmF0b3JzR3JvdXAubGVuZ3RoIDwgTUFYX0dST1VQX1NJWkUpOwoKICAgICAgICBPcGVyYXRvckFkZGVkKG5ld09wZXJhdG9yLCB0cnVlKTsKICAgICAgICBvcGVyYXRvcnNbbmV3T3BlcmF0b3JdID0gdHJ1ZTsKICAgICAgICBvcGVyYXRvcnNHcm91cC5wdXNoKG5ld09wZXJhdG9yKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVPcGVyYXRvciAoYWRkcmVzcyBvcGVyYXRvcikgcHVibGljIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZShvcGVyYXRvcnNbb3BlcmF0b3JdKTsKICAgICAgICBvcGVyYXRvcnNbb3BlcmF0b3JdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG9wZXJhdG9yc0dyb3VwLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChvcGVyYXRvcnNHcm91cFtpXSA9PSBvcGVyYXRvcikgewogICAgICAgICAgICAgICAgb3BlcmF0b3JzR3JvdXBbaV0gPSBvcGVyYXRvcnNHcm91cFtvcGVyYXRvcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIG9wZXJhdG9yc0dyb3VwLmxlbmd0aCAtPSAxOwogICAgICAgICAgICAgICAgT3BlcmF0b3JBZGRlZChvcGVyYXRvciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCmludGVyZmFjZSBDb252ZXJzaW9uUmF0ZXNJbnRlcmZhY2UgewoKICAgIGZ1bmN0aW9uIHJlY29yZEltYmFsYW5jZSgKICAgICAgICBFUkMyMCB0b2tlbiwKICAgICAgICBpbnQgYnV5QW1vdW50LAogICAgICAgIHVpbnQgcmF0ZVVwZGF0ZUJsb2NrLAogICAgICAgIHVpbnQgY3VycmVudEJsb2NrCiAgICApCiAgICAgICAgcHVibGljOwoKICAgIGZ1bmN0aW9uIGdldFJhdGUoRVJDMjAgdG9rZW4sIHVpbnQgY3VycmVudEJsb2NrTnVtYmVyLCBib29sIGJ1eSwgdWludCBxdHkpIHB1YmxpYyB2aWV3IHJldHVybnModWludCk7Cn0KCmludGVyZmFjZSBFUkMyMCB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7CiAgICBmdW5jdGlvbiBkZWNpbWFscygpIHB1YmxpYyB2aWV3IHJldHVybnModWludCBkaWdpdHMpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCmludGVyZmFjZSBLeWJlclJlc2VydmVJbnRlcmZhY2UgewoKICAgIGZ1bmN0aW9uIHRyYWRlKAogICAgICAgIEVSQzIwIHNyY1Rva2VuLAogICAgICAgIHVpbnQgc3JjQW1vdW50LAogICAgICAgIEVSQzIwIGRlc3RUb2tlbiwKICAgICAgICBhZGRyZXNzIGRlc3RBZGRyZXNzLAogICAgICAgIHVpbnQgY29udmVyc2lvblJhdGUsCiAgICAgICAgYm9vbCB2YWxpZGF0ZQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICByZXR1cm5zKGJvb2wpOwoKICAgIGZ1bmN0aW9uIGdldENvbnZlcnNpb25SYXRlKEVSQzIwIHNyYywgRVJDMjAgZGVzdCwgdWludCBzcmNRdHksIHVpbnQgYmxvY2tOdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludCk7Cn0KCmludGVyZmFjZSBTYW5pdHlSYXRlc0ludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBnZXRTYW5pdHlSYXRlKEVSQzIwIHNyYywgRVJDMjAgZGVzdCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KTsKfQoKY29udHJhY3QgV2l0aGRyYXdhYmxlIGlzIFBlcm1pc3Npb25Hcm91cHMgewoKICAgIGV2ZW50IFRva2VuV2l0aGRyYXcoRVJDMjAgdG9rZW4sIHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbyk7CgogICAgLyoqCiAgICAgKiBAZGV2IFdpdGhkcmF3IGFsbCBFUkMyMCBjb21wYXRpYmxlIHRva2VucwogICAgICogQHBhcmFtIHRva2VuIEVSQzIwIFRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCwgYWRkcmVzcyBzZW5kVG8pIGV4dGVybmFsIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZSh0b2tlbi50cmFuc2ZlcihzZW5kVG8sIGFtb3VudCkpOwogICAgICAgIFRva2VuV2l0aGRyYXcodG9rZW4sIGFtb3VudCwgc2VuZFRvKTsKICAgIH0KCiAgICBldmVudCBFdGhlcldpdGhkcmF3KHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbyk7CgogICAgLyoqCiAgICAgKiBAZGV2IFdpdGhkcmF3IEV0aGVycwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbykgZXh0ZXJuYWwgb25seUFkbWluIHsKICAgICAgICBzZW5kVG8udHJhbnNmZXIoYW1vdW50KTsKICAgICAgICBFdGhlcldpdGhkcmF3KGFtb3VudCwgc2VuZFRvKTsKICAgIH0KfQoKY29udHJhY3QgS3liZXJSZXNlcnZlIGlzIEt5YmVyUmVzZXJ2ZUludGVyZmFjZSwgV2l0aGRyYXdhYmxlLCBVdGlscyB7CgogICAgYWRkcmVzcyBwdWJsaWMga3liZXJOZXR3b3JrOwogICAgYm9vbCBwdWJsaWMgdHJhZGVFbmFibGVkOwogICAgQ29udmVyc2lvblJhdGVzSW50ZXJmYWNlIHB1YmxpYyBjb252ZXJzaW9uUmF0ZXNDb250cmFjdDsKICAgIFNhbml0eVJhdGVzSW50ZXJmYWNlIHB1YmxpYyBzYW5pdHlSYXRlc0NvbnRyYWN0OwogICAgbWFwcGluZyhieXRlczMyPT5ib29sKSBwdWJsaWMgYXBwcm92ZWRXaXRoZHJhd0FkZHJlc3NlczsgLy8gc2hhMyh0b2tlbixhZGRyZXNzKT0+Ym9vbAoKICAgIGZ1bmN0aW9uIEt5YmVyUmVzZXJ2ZShhZGRyZXNzIF9reWJlck5ldHdvcmssIENvbnZlcnNpb25SYXRlc0ludGVyZmFjZSBfcmF0ZXNDb250cmFjdCwgYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfYWRtaW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfcmF0ZXNDb250cmFjdCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9reWJlck5ldHdvcmsgIT0gYWRkcmVzcygwKSk7CiAgICAgICAga3liZXJOZXR3b3JrID0gX2t5YmVyTmV0d29yazsKICAgICAgICBjb252ZXJzaW9uUmF0ZXNDb250cmFjdCA9IF9yYXRlc0NvbnRyYWN0OwogICAgICAgIGFkbWluID0gX2FkbWluOwogICAgICAgIHRyYWRlRW5hYmxlZCA9IHRydWU7CiAgICB9CgogICAgZXZlbnQgRGVwb3NpdFRva2VuKEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCk7CgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgRGVwb3NpdFRva2VuKEVUSF9UT0tFTl9BRERSRVNTLCBtc2cudmFsdWUpOwogICAgfQoKICAgIGV2ZW50IFRyYWRlRXhlY3V0ZSgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgb3JpZ2luLAogICAgICAgIGFkZHJlc3Mgc3JjLAogICAgICAgIHVpbnQgc3JjQW1vdW50LAogICAgICAgIGFkZHJlc3MgZGVzdFRva2VuLAogICAgICAgIHVpbnQgZGVzdEFtb3VudCwKICAgICAgICBhZGRyZXNzIGRlc3RBZGRyZXNzCiAgICApOwoKICAgIGZ1bmN0aW9uIHRyYWRlKAogICAgICAgIEVSQzIwIHNyY1Rva2VuLAogICAgICAgIHVpbnQgc3JjQW1vdW50LAogICAgICAgIEVSQzIwIGRlc3RUb2tlbiwKICAgICAgICBhZGRyZXNzIGRlc3RBZGRyZXNzLAogICAgICAgIHVpbnQgY29udmVyc2lvblJhdGUsCiAgICAgICAgYm9vbCB2YWxpZGF0ZQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICByZXR1cm5zKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZSh0cmFkZUVuYWJsZWQpOwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBreWJlck5ldHdvcmspOwoKICAgICAgICByZXF1aXJlKGRvVHJhZGUoc3JjVG9rZW4sIHNyY0Ftb3VudCwgZGVzdFRva2VuLCBkZXN0QWRkcmVzcywgY29udmVyc2lvblJhdGUsIHZhbGlkYXRlKSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGV2ZW50IFRyYWRlRW5hYmxlZChib29sIGVuYWJsZSk7CgogICAgZnVuY3Rpb24gZW5hYmxlVHJhZGUoKSBwdWJsaWMgb25seUFkbWluIHJldHVybnMoYm9vbCkgewogICAgICAgIHRyYWRlRW5hYmxlZCA9IHRydWU7CiAgICAgICAgVHJhZGVFbmFibGVkKHRydWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXNhYmxlVHJhZGUoKSBwdWJsaWMgb25seUFsZXJ0ZXIgcmV0dXJucyhib29sKSB7CiAgICAgICAgdHJhZGVFbmFibGVkID0gZmFsc2U7CiAgICAgICAgVHJhZGVFbmFibGVkKGZhbHNlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZXZlbnQgV2l0aGRyYXdBZGRyZXNzQXBwcm92ZWQoRVJDMjAgdG9rZW4sIGFkZHJlc3MgYWRkciwgYm9vbCBhcHByb3ZlKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlV2l0aGRyYXdBZGRyZXNzKEVSQzIwIHRva2VuLCBhZGRyZXNzIGFkZHIsIGJvb2wgYXBwcm92ZSkgcHVibGljIG9ubHlBZG1pbiB7CiAgICAgICAgYXBwcm92ZWRXaXRoZHJhd0FkZHJlc3Nlc1trZWNjYWsyNTYodG9rZW4sIGFkZHIpXSA9IGFwcHJvdmU7CiAgICAgICAgV2l0aGRyYXdBZGRyZXNzQXBwcm92ZWQodG9rZW4sIGFkZHIsIGFwcHJvdmUpOwoKICAgICAgICBzZXREZWNpbWFscyh0b2tlbik7CiAgICB9CgogICAgZXZlbnQgV2l0aGRyYXdGdW5kcyhFUkMyMCB0b2tlbiwgdWludCBhbW91bnQsIGFkZHJlc3MgZGVzdGluYXRpb24pOwoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCwgYWRkcmVzcyBkZXN0aW5hdGlvbikgcHVibGljIG9ubHlPcGVyYXRvciByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXF1aXJlKGFwcHJvdmVkV2l0aGRyYXdBZGRyZXNzZXNba2VjY2FrMjU2KHRva2VuLCBkZXN0aW5hdGlvbildKTsKCiAgICAgICAgaWYgKHRva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKSB7CiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVxdWlyZSh0b2tlbi50cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50KSk7CiAgICAgICAgfQoKICAgICAgICBXaXRoZHJhd0Z1bmRzKHRva2VuLCBhbW91bnQsIGRlc3RpbmF0aW9uKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZXZlbnQgU2V0Q29udHJhY3RBZGRyZXNzZXMoYWRkcmVzcyBuZXR3b3JrLCBhZGRyZXNzIHJhdGUsIGFkZHJlc3Mgc2FuaXR5KTsKCiAgICBmdW5jdGlvbiBzZXRDb250cmFjdHMoYWRkcmVzcyBfa3liZXJOZXR3b3JrLCBDb252ZXJzaW9uUmF0ZXNJbnRlcmZhY2UgX2NvbnZlcnNpb25SYXRlcywgU2FuaXR5UmF0ZXNJbnRlcmZhY2UgX3Nhbml0eVJhdGVzKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlBZG1pbgogICAgewogICAgICAgIHJlcXVpcmUoX2t5YmVyTmV0d29yayAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9jb252ZXJzaW9uUmF0ZXMgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGt5YmVyTmV0d29yayA9IF9reWJlck5ldHdvcms7CiAgICAgICAgY29udmVyc2lvblJhdGVzQ29udHJhY3QgPSBfY29udmVyc2lvblJhdGVzOwogICAgICAgIHNhbml0eVJhdGVzQ29udHJhY3QgPSBfc2FuaXR5UmF0ZXM7CgogICAgICAgIFNldENvbnRyYWN0QWRkcmVzc2VzKGt5YmVyTmV0d29yaywgY29udmVyc2lvblJhdGVzQ29udHJhY3QsIHNhbml0eVJhdGVzQ29udHJhY3QpOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vLyBzdGF0dXMgZnVuY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIGZ1bmN0aW9uIGdldEJhbGFuY2UoRVJDMjAgdG9rZW4pIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIGlmICh0b2tlbiA9PSBFVEhfVE9LRU5fQUREUkVTUykKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RGVzdFF0eShFUkMyMCBzcmMsIEVSQzIwIGRlc3QsIHVpbnQgc3JjUXR5LCB1aW50IHJhdGUpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIHVpbnQgZHN0RGVjaW1hbHMgPSBnZXREZWNpbWFscyhkZXN0KTsKICAgICAgICB1aW50IHNyY0RlY2ltYWxzID0gZ2V0RGVjaW1hbHMoc3JjKTsKCiAgICAgICAgcmV0dXJuIGNhbGNEc3RRdHkoc3JjUXR5LCBzcmNEZWNpbWFscywgZHN0RGVjaW1hbHMsIHJhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFNyY1F0eShFUkMyMCBzcmMsIEVSQzIwIGRlc3QsIHVpbnQgZHN0UXR5LCB1aW50IHJhdGUpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIHVpbnQgZHN0RGVjaW1hbHMgPSBnZXREZWNpbWFscyhkZXN0KTsKICAgICAgICB1aW50IHNyY0RlY2ltYWxzID0gZ2V0RGVjaW1hbHMoc3JjKTsKCiAgICAgICAgcmV0dXJuIGNhbGNTcmNRdHkoZHN0UXR5LCBzcmNEZWNpbWFscywgZHN0RGVjaW1hbHMsIHJhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENvbnZlcnNpb25SYXRlKEVSQzIwIHNyYywgRVJDMjAgZGVzdCwgdWludCBzcmNRdHksIHVpbnQgYmxvY2tOdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIEVSQzIwIHRva2VuOwogICAgICAgIGJvb2wgIGJ1eTsKCiAgICAgICAgaWYgKCF0cmFkZUVuYWJsZWQpIHJldHVybiAwOwoKICAgICAgICBpZiAoRVRIX1RPS0VOX0FERFJFU1MgPT0gc3JjKSB7CiAgICAgICAgICAgIGJ1eSA9IHRydWU7CiAgICAgICAgICAgIHRva2VuID0gZGVzdDsKICAgICAgICB9IGVsc2UgaWYgKEVUSF9UT0tFTl9BRERSRVNTID09IGRlc3QpIHsKICAgICAgICAgICAgYnV5ID0gZmFsc2U7CiAgICAgICAgICAgIHRva2VuID0gc3JjOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyBwYWlyIGlzIG5vdCBsaXN0ZWQKICAgICAgICB9CgogICAgICAgIHVpbnQgcmF0ZSA9IGNvbnZlcnNpb25SYXRlc0NvbnRyYWN0LmdldFJhdGUodG9rZW4sIGJsb2NrTnVtYmVyLCBidXksIHNyY1F0eSk7CiAgICAgICAgdWludCBkZXN0UXR5ID0gZ2V0RGVzdFF0eShzcmMsIGRlc3QsIHNyY1F0eSwgcmF0ZSk7CgogICAgICAgIGlmIChnZXRCYWxhbmNlKGRlc3QpIDwgZGVzdFF0eSkgcmV0dXJuIDA7CgogICAgICAgIGlmIChzYW5pdHlSYXRlc0NvbnRyYWN0ICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgdWludCBzYW5pdHlSYXRlID0gc2FuaXR5UmF0ZXNDb250cmFjdC5nZXRTYW5pdHlSYXRlKHNyYywgZGVzdCk7CiAgICAgICAgICAgIGlmIChyYXRlID4gc2FuaXR5UmF0ZSkgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmF0ZTsKICAgIH0KCiAgICAvLy8gQGRldiBkbyBhIHRyYWRlCiAgICAvLy8gQHBhcmFtIHNyY1Rva2VuIFNyYyB0b2tlbgogICAgLy8vIEBwYXJhbSBzcmNBbW91bnQgQW1vdW50IG9mIHNyYyB0b2tlbgogICAgLy8vIEBwYXJhbSBkZXN0VG9rZW4gRGVzdGluYXRpb24gdG9rZW4KICAgIC8vLyBAcGFyYW0gZGVzdEFkZHJlc3MgRGVzdGluYXRpb24gYWRkcmVzcyB0byBzZW5kIHRva2VucyB0bwogICAgLy8vIEBwYXJhbSB2YWxpZGF0ZSBJZiB0cnVlLCBhZGRpdGlvbmFsIHZhbGlkYXRpb25zIGFyZSBhcHBsaWNhYmxlCiAgICAvLy8gQHJldHVybiB0cnVlIGlmZiB0cmFkZSBpcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBkb1RyYWRlKAogICAgICAgIEVSQzIwIHNyY1Rva2VuLAogICAgICAgIHVpbnQgc3JjQW1vdW50LAogICAgICAgIEVSQzIwIGRlc3RUb2tlbiwKICAgICAgICBhZGRyZXNzIGRlc3RBZGRyZXNzLAogICAgICAgIHVpbnQgY29udmVyc2lvblJhdGUsCiAgICAgICAgYm9vbCB2YWxpZGF0ZQogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyhib29sKQogICAgewogICAgICAgIC8vIGNhbiBza2lwIHZhbGlkYXRpb24gaWYgZG9uZSBhdCBreWJlciBuZXR3b3JrIGxldmVsCiAgICAgICAgaWYgKHZhbGlkYXRlKSB7CiAgICAgICAgICAgIHJlcXVpcmUoY29udmVyc2lvblJhdGUgPiAwKTsKICAgICAgICAgICAgaWYgKHNyY1Rva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKQogICAgICAgICAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gc3JjQW1vdW50KTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMCk7CiAgICAgICAgfQoKICAgICAgICB1aW50IGRlc3RBbW91bnQgPSBnZXREZXN0UXR5KHNyY1Rva2VuLCBkZXN0VG9rZW4sIHNyY0Ftb3VudCwgY29udmVyc2lvblJhdGUpOwogICAgICAgIC8vIHNhbml0eSBjaGVjawogICAgICAgIHJlcXVpcmUoZGVzdEFtb3VudCA+IDApOwoKICAgICAgICAvLyBhZGQgdG8gaW1iYWxhbmNlCiAgICAgICAgRVJDMjAgdG9rZW47CiAgICAgICAgaW50IGJ1eTsKICAgICAgICBpZiAoc3JjVG9rZW4gPT0gRVRIX1RPS0VOX0FERFJFU1MpIHsKICAgICAgICAgICAgYnV5ID0gaW50KGRlc3RBbW91bnQpOwogICAgICAgICAgICB0b2tlbiA9IGRlc3RUb2tlbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidXkgPSAtMSAqIGludChzcmNBbW91bnQpOwogICAgICAgICAgICB0b2tlbiA9IHNyY1Rva2VuOwogICAgICAgIH0KCiAgICAgICAgY29udmVyc2lvblJhdGVzQ29udHJhY3QucmVjb3JkSW1iYWxhbmNlKAogICAgICAgICAgICB0b2tlbiwKICAgICAgICAgICAgYnV5LAogICAgICAgICAgICAwLAogICAgICAgICAgICBibG9jay5udW1iZXIKICAgICAgICApOwoKICAgICAgICAvLyBjb2xsZWN0IHNyYyB0b2tlbnMKICAgICAgICBpZiAoc3JjVG9rZW4gIT0gRVRIX1RPS0VOX0FERFJFU1MpIHsKICAgICAgICAgICAgcmVxdWlyZShzcmNUb2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgc3JjQW1vdW50KSk7CiAgICAgICAgfQoKICAgICAgICAvLyBzZW5kIGRlc3QgdG9rZW5zCiAgICAgICAgaWYgKGRlc3RUb2tlbiA9PSBFVEhfVE9LRU5fQUREUkVTUykgewogICAgICAgICAgICBkZXN0QWRkcmVzcy50cmFuc2ZlcihkZXN0QW1vdW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXF1aXJlKGRlc3RUb2tlbi50cmFuc2ZlcihkZXN0QWRkcmVzcywgZGVzdEFtb3VudCkpOwogICAgICAgIH0KCiAgICAgICAgVHJhZGVFeGVjdXRlKG1zZy5zZW5kZXIsIHNyY1Rva2VuLCBzcmNBbW91bnQsIGRlc3RUb2tlbiwgZGVzdEFtb3VudCwgZGVzdEFkZHJlc3MpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
