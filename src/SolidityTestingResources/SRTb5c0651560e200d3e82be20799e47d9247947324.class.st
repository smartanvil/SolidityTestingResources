Class {
	#name : #SRTb5c0651560e200d3e82be20799e47d9247947324,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb5c0651560e200d3e82be20799e47d9247947324 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBwdXJlIGludGVybmFsICByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgcHVyZSBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgcHVyZSBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIHB1cmUgaW50ZXJuYWwgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IERpc2J1cnNlbWVudCB7CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgcmVjZWl2ZXI7CiAgICB1aW50IHB1YmxpYyBkaXNidXJzZW1lbnRQZXJpb2Q7CiAgICB1aW50IHB1YmxpYyBzdGFydERhdGU7CiAgICB1aW50IHB1YmxpYyB3aXRoZHJhd25Ub2tlbnM7CiAgICBUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgLyoKICAgICAqICBNb2RpZmllcnMKICAgICAqLwogICAgbW9kaWZpZXIgaXNPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikKICAgICAgICAgICAgLy8gT25seSBvd25lciBpcyBhbGxvd2VkIHRvIHByb2NlZWQKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc1JlY2VpdmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IHJlY2VpdmVyKQogICAgICAgICAgICAvLyBPbmx5IHJlY2VpdmVyIGlzIGFsbG93ZWQgdG8gcHJvY2VlZAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzU2V0VXAoKSB7CiAgICAgICAgaWYgKGFkZHJlc3ModG9rZW4pID09IDApCiAgICAgICAgICAgIC8vIENvbnRyYWN0IGlzIG5vdCBzZXQgdXAKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKgogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IgZnVuY3Rpb24gc2V0cyBjb250cmFjdCBvd25lcgogICAgLy8vIEBwYXJhbSBfcmVjZWl2ZXIgUmVjZWl2ZXIgb2YgdmVzdGVkIHRva2VucwogICAgLy8vIEBwYXJhbSBfZGlzYnVyc2VtZW50UGVyaW9kIFZlc3RpbmcgcGVyaW9kIGluIHNlY29uZHMKICAgIC8vLyBAcGFyYW0gX3N0YXJ0RGF0ZSBTdGFydCBkYXRlIG9mIGRpc2J1cnNlbWVudCBwZXJpb2QgKGNsaWZmKQogICAgZnVuY3Rpb24gRGlzYnVyc2VtZW50KGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50IF9kaXNidXJzZW1lbnRQZXJpb2QsIHVpbnQgX3N0YXJ0RGF0ZSkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBpZiAoX3JlY2VpdmVyID09IDAgfHwgX2Rpc2J1cnNlbWVudFBlcmlvZCA9PSAwKQogICAgICAgICAgICAvLyBBcmd1bWVudHMgYXJlIG51bGwKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHJlY2VpdmVyID0gX3JlY2VpdmVyOwogICAgICAgIGRpc2J1cnNlbWVudFBlcmlvZCA9IF9kaXNidXJzZW1lbnRQZXJpb2Q7CiAgICAgICAgc3RhcnREYXRlID0gX3N0YXJ0RGF0ZTsKICAgICAgICBpZiAoc3RhcnREYXRlID09IDApCiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5vdzsKICAgIH0KCiAgICAvLy8gQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIGNvbnRyYWN0cycgYWRkcmVzc2VzCiAgICAvLy8gQHBhcmFtIF90b2tlbiBUb2tlbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXR1cChUb2tlbiBfdG9rZW4pCiAgICAgICAgcHVibGljCiAgICAgICAgaXNPd25lcgogICAgewogICAgICAgIGlmIChhZGRyZXNzKHRva2VuKSAhPSAwIHx8IGFkZHJlc3MoX3Rva2VuKSA9PSAwKQogICAgICAgICAgICAvLyBTZXR1cCB3YXMgZXhlY3V0ZWQgYWxyZWFkeSBvciBhZGRyZXNzIGlzIG51bGwKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgdG9rZW4gPSBfdG9rZW47CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBpc1JlY2VpdmVyCiAgICAgICAgaXNTZXRVcAogICAgewogICAgICAgIHVpbnQgbWF4VG9rZW5zID0gY2FsY01heFdpdGhkcmF3KCk7CiAgICAgICAgaWYgKF92YWx1ZSA+IG1heFRva2VucykKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgd2l0aGRyYXduVG9rZW5zICs9IF92YWx1ZTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdmVzdGVkIHRva2VucwogICAgLy8vIEByZXR1cm4gTnVtYmVyIG9mIHZlc3RlZCB0b2tlbnMgdG8gd2l0aGRyYXcKICAgIGZ1bmN0aW9uIGNhbGNNYXhXaXRoZHJhdygpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHVpbnQgbWF4VG9rZW5zID0gKHRva2VuLmJhbGFuY2VPZih0aGlzKSArIHdpdGhkcmF3blRva2VucykgKiAobm93IC0gc3RhcnREYXRlKSAvIGRpc2J1cnNlbWVudFBlcmlvZDsKICAgICAgICBpZiAod2l0aGRyYXduVG9rZW5zID49IG1heFRva2VucyB8fCBzdGFydERhdGUgPiBub3cpCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIGlmIChtYXhUb2tlbnMgLSB3aXRoZHJhd25Ub2tlbnMgPiB0b2tlbi50b3RhbFN1cHBseSgpKQogICAgICAgICAgICByZXR1cm4gdG9rZW4udG90YWxTdXBwbHkoKTsKICAgICAgICByZXR1cm4gbWF4VG9rZW5zIC0gd2l0aGRyYXduVG9rZW5zOwogICAgfQp9Cgpjb250cmFjdCBUb2tlbiB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAqLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgYWRkcmVzcyBwdWJsaWMgc2FsZTsKICAgIGJvb2wgcHVibGljIHRyYW5zZmVyc0FsbG93ZWQ7CiAgICAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcHVibGljCiAgICAgICAgdmFsaWRUcmFuc2ZlcgogICAgICAgCXJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICB7CiAgICAgICAgLy9EZWZhdWx0IGFzc3VtZXMgdG90YWxTdXBwbHkgY2FuJ3QgYmUgb3ZlciBtYXggKDJeMjU2IC0gMSkuCiAgICAgICAgLy9JZiB5b3VyIHRva2VuIGxlYXZlcyBvdXQgdG90YWxTdXBwbHkgYW5kIGNhbiBpc3N1ZSBtb3JlIHRva2VucyBhcyB0aW1lIGdvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICAvL3JlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKTsKICAgIAlyZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgICAgIHZhbGlkVHJhbnNmZXIKICAgICAgCXJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgICAgewogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4KICAgICAgICAvL3JlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pOwoJICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIG1vZGlmaWVyIHZhbGlkVHJhbnNmZXIoKQogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBzYWxlIHx8IHRyYW5zZmVyc0FsbG93ZWQpOwogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IEh1bWFuU3RhbmRhcmRUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwoKICAgIC8qCiAgICBOT1RFOgogICAgVGhlIGZvbGxvd2luZyB2YXJpYWJsZXMgYXJlIE9QVElPTkFMIHZhbml0aWVzLiBPbmUgZG9lcyBub3QgaGF2ZSB0byBpbmNsdWRlIHRoZW0uCiAgICBUaGV5IGFsbG93IG9uZSB0byBjdXN0b21pc2UgdGhlIHRva2VuIGNvbnRyYWN0ICYgaW4gbm8gd2F5IGluZmx1ZW5jZXMgdGhlIGNvcmUgZnVuY3Rpb25hbGl0eS4KICAgIFNvbWUgd2FsbGV0cy9pbnRlcmZhY2VzIG1pZ2h0IG5vdCBldmVuIGJvdGhlciB0byBsb29rIGF0IHRoaXMgaW5mb3JtYXRpb24uCiAgICAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAgICAvL2ZhbmN5IG5hbWU6IGVnIFNpbW9uIEJ1Y2tzCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgICAgIC8vSG93IG1hbnkgZGVjaW1hbHMgdG8gc2hvdy4gaWUuIFRoZXJlIGNvdWxkIDEwMDAgYmFzZSB1bml0cyB3aXRoIDMgZGVjaW1hbHMuIE1lYW5pbmcgMC45ODAgU0JYID0gOTgwIGJhc2UgdW5pdHMuIEl0J3MgbGlrZSBjb21wYXJpbmcgMSB3ZWkgdG8gMSBldGhlci4KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlgKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICdIMC4xJzsgICAgICAgLy9odW1hbiAwLjEgc3RhbmRhcmQuIEp1c3QgYW4gYXJiaXRyYXJ5IHZlcnNpb25pbmcgc2NoZW1lLgoKICAgIGZ1bmN0aW9uIEh1bWFuU3RhbmRhcmRUb2tlbigKICAgICAgICB1aW50MjU2IF9pbml0aWFsQW1vdW50LAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBhZGRyZXNzIF9zYWxlKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gX2luaXRpYWxBbW91bnQ7ICAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsQW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgICBuYW1lID0gX3Rva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gX3Rva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHNhbGUgPSBfc2FsZTsKICAgICAgICB0cmFuc2ZlcnNBbGxvd2VkID0gZmFsc2U7CiAgICB9CgogICAgLyogQXBwcm92ZXMgYW5kIHRoZW4gY2FsbHMgdGhlIHJlY2VpdmluZyBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgLy9jYWxsIHRoZSByZWNlaXZlQXBwcm92YWwgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0IHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0IGhhdmUgdG8gaW5jbHVkZSBhIGNvbnRyYWN0IGluIGhlcmUganVzdCBmb3IgdGhpcy4KICAgICAgICAvL3JlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW5Db250cmFjdCwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICAvL2l0IGlzIGFzc3VtZWQgdGhhdCB3aGVuIGRvZXMgdGhpcyB0aGF0IHRoZSBjYWxsICpzaG91bGQqIHN1Y2NlZWQsIG90aGVyd2lzZSBvbmUgd291bGQgdXNlIHZhbmlsbGEgYXBwcm92ZSBpbnN0ZWFkLgogICAgICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChieXRlczQoYnl0ZXMzMihrZWNjYWsyNTYoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSkpLCBtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZXZlcnNlUHVyY2hhc2UoYWRkcmVzcyBfdG9rZW5Ib2xkZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVNhbGUKICAgIHsKICAgICAgICByZXF1aXJlKCF0cmFuc2ZlcnNBbGxvd2VkKTsKICAgICAgICB1aW50IHZhbHVlID0gYmFsYW5jZXNbX3Rva2VuSG9sZGVyXTsKICAgICAgICBiYWxhbmNlc1tfdG9rZW5Ib2xkZXJdIC09IHZhbHVlOwogICAgICAgIGJhbGFuY2VzW3NhbGVdICs9IHZhbHVlOwogICAgICAgIFRyYW5zZmVyKF90b2tlbkhvbGRlciwgc2FsZSwgdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZVRyYW5zZmVyTG9jaygpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVNhbGUKICAgIHsKICAgICAgICB0cmFuc2ZlcnNBbGxvd2VkID0gdHJ1ZTsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5U2FsZSgpCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNhbGUpOwogICAgICAgIF87CiAgICB9Cn0KCgoKCmNvbnRyYWN0IFNhbGUgewoKICAgIC8vIEVWRU5UUwoKICAgIGV2ZW50IFRyYW5zZmVycmVkVGltZWxvY2tlZFRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5LCBhZGRyZXNzIGRpc2J1cnNlbWVudCx1aW50IGJlbmVmaWNpYXJ5VG9rZW5zKTsKICAgIGV2ZW50IFB1cmNoYXNlZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBMb2NrZWRVbnNvbGRUb2tlbnModWludCBudW1Ub2tlbnNMb2NrZWQsIGFkZHJlc3MgZGlzYnVyc2VyKTsKCiAgICAvLyBTVE9SQUdFCgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9UQUxfU1VQUExZID0gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9QUklWQVRFID0gNzUwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludDggcHVibGljIGNvbnN0YW50IERFQ0lNQUxTID0gOTsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgTkFNRSA9ICJMZXZlcmoiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiTEVWIjsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICAgIEh1bWFuU3RhbmRhcmRUb2tlbiBwdWJsaWMgdG9rZW47CiAgICB1aW50IHB1YmxpYyBmcmVlemVCbG9jazsKICAgIHVpbnQgcHVibGljIHN0YXJ0QmxvY2s7CiAgICB1aW50IHB1YmxpYyBlbmRCbG9jazsKICAgIHVpbnQgcHVibGljIHByZXNhbGVfcHJpY2VfaW5fd2VpID0gMjE2Njg1OyAvL3dlaSBwZXIgMTAqKi05IG9mIExFViEKICAgIHVpbnQgcHVibGljIHByaWNlX2luX3dlaSA9IDMzMzMzMzsgLy93ZWkgcGVyIDEwKiotOSBvZiBhIExFViEKCiAgICAvL2FkZHJlc3NbXSBwdWJsaWMgZmlsdGVyczsKCiAgICB1aW50IHB1YmxpYyBwcml2YXRlQWxsb2NhdGVkID0gMDsKICAgIGJvb2wgcHVibGljIHNldHVwQ29tcGxldGVGbGFnID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBlbWVyZ2VuY3lGbGFnID0gZmFsc2U7CgogICAgYWRkcmVzc1tdIHB1YmxpYyBkaXNidXJzZW1lbnRzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyB3aGl0ZWxpc3RSZWdpc3RyYW50czsKCiAgICAvLyBQVUJMSUMgRlVOQ1RJT05TCgogICAgZnVuY3Rpb24gU2FsZSgKICAgICAgICBhZGRyZXNzIF9vd25lciwKICAgICAgICB1aW50IF9mcmVlemVCbG9jaywKICAgICAgICB1aW50IF9zdGFydEJsb2NrLAogICAgICAgIHVpbnQgX2VuZEJsb2NrKQogICAgICAgIHB1YmxpYyAKICAgICAgICBjaGVja0Jsb2NrTnVtYmVySW5wdXRzKF9mcmVlemVCbG9jaywgX3N0YXJ0QmxvY2ssIF9lbmRCbG9jaykKICAgIHsKICAgICAgICBvd25lciA9IF9vd25lcjsKICAgICAgICB0b2tlbiA9IG5ldyBIdW1hblN0YW5kYXJkVG9rZW4oVE9UQUxfU1VQUExZLCBOQU1FLCBERUNJTUFMUywgU1lNQk9MLCBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBmcmVlemVCbG9jayA9IF9mcmVlemVCbG9jazsKICAgICAgICBzdGFydEJsb2NrID0gX3N0YXJ0QmxvY2s7CiAgICAgICAgZW5kQmxvY2sgPSBfZW5kQmxvY2s7CiAgICAgICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyKHRoaXMsIHRva2VuLnRvdGFsU3VwcGx5KCkpKTsKICAgICAgICBhc3NlcnQodG9rZW4uYmFsYW5jZU9mKHRoaXMpID09IHRva2VuLnRvdGFsU3VwcGx5KCkpOwogICAgICAgIGFzc2VydCh0b2tlbi5iYWxhbmNlT2YodGhpcykgPT0gVE9UQUxfU1VQUExZKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwdXJjaGFzZVRva2VucygpCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgICAgIHNldHVwQ29tcGxldGUKICAgICAgICBub3RJbkVtZXJnZW5jeQogICAgICAgIHNhbGVJblByb2dyZXNzCiAgICB7CiAgICAgICAgcmVxdWlyZSh3aGl0ZWxpc3RSZWdpc3RyYW50c1ttc2cuc2VuZGVyXSA+IDAgKTsKICAgICAgICB1aW50IHRlbXBXaGl0ZWxpc3RBbW91bnQgPSB3aGl0ZWxpc3RSZWdpc3RyYW50c1ttc2cuc2VuZGVyXTsKCiAgICAgICAgLyogQ2FsY3VsYXRlIHdoZXRoZXIgYW55IG9mIHRoZSBtc2cudmFsdWUgbmVlZHMgdG8gYmUgcmV0dXJuZWQgdG8KICAgICAgICAgICB0aGUgc2VuZGVyLiBUaGUgcHVyY2hhc2VBbW91bnQgaXMgdGhlIGFjdHVhbCBudW1iZXIgb2YgdG9rZW5zIHdoaWNoCiAgICAgICAgICAgd2lsbCBiZSBwdXJjaGFzZWQuICovCiAgICAgICAgdWludCBwdXJjaGFzZUFtb3VudCA9IG1zZy52YWx1ZSAvIHByaWNlX2luX3dlaTsgCiAgICAgICAgdWludCBleGNlc3NBbW91bnQgPSBtc2cudmFsdWUgJSBwcmljZV9pbl93ZWk7CgogICAgICAgIGlmKHB1cmNoYXNlQW1vdW50ID4gd2hpdGVsaXN0UmVnaXN0cmFudHNbbXNnLnNlbmRlcl0pewogICAgICAgICAgICB1aW50IGV4dHJhID0gcHVyY2hhc2VBbW91bnQgLSB3aGl0ZWxpc3RSZWdpc3RyYW50c1ttc2cuc2VuZGVyXTsKICAgICAgICAgICAgcHVyY2hhc2VBbW91bnQgPSB3aGl0ZWxpc3RSZWdpc3RyYW50c1ttc2cuc2VuZGVyXTsKICAgICAgICAgICAgZXhjZXNzQW1vdW50ICs9IGV4dHJhKnByaWNlX2luX3dlaTsKICAgICAgICB9CgogICAgICAgIHdoaXRlbGlzdFJlZ2lzdHJhbnRzW21zZy5zZW5kZXJdIC09IHB1cmNoYXNlQW1vdW50OwogICAgICAgIGFzc2VydCh3aGl0ZWxpc3RSZWdpc3RyYW50c1ttc2cuc2VuZGVyXSA8IHRlbXBXaGl0ZWxpc3RBbW91bnQpOwoKICAgICAgICAvLyBDYW5ub3QgcHVyY2hhc2UgbW9yZSB0b2tlbnMgdGhhbiB0aGlzIGNvbnRyYWN0IGhhcyBhdmFpbGFibGUgdG8gc2VsbAogICAgICAgIHJlcXVpcmUocHVyY2hhc2VBbW91bnQgPD0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKCiAgICAgICAgLy8gUmV0dXJuIGFueSBleGNlc3MgbXNnLnZhbHVlCiAgICAgICAgaWYgKGV4Y2Vzc0Ftb3VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihleGNlc3NBbW91bnQpOwogICAgICAgIH0KCiAgICAgICAgLy8gRm9yd2FyZCByZWNlaXZlZCBldGhlciBtaW51cyBhbnkgZXhjZXNzQW1vdW50IHRvIHRoZSB3YWxsZXQKICAgICAgICB3YWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKCiAgICAgICAgLy8gVHJhbnNmZXIgdGhlIHN1bSBvZiB0b2tlbnMgdG9rZW5QdXJjaGFzZSB0byB0aGUgbXNnLnNlbmRlcgogICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBwdXJjaGFzZUFtb3VudCkpOwogICAgICAgIFB1cmNoYXNlZFRva2Vucyhtc2cuc2VuZGVyLCBwdXJjaGFzZUFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gbG9ja1Vuc29sZFRva2VucyhhZGRyZXNzIF91bnNvbGRUb2tlbnNXYWxsZXQpCiAgICAgICAgcHVibGljCiAgICAgICAgc2FsZUVuZGVkCiAgICAgICAgc2V0dXBDb21wbGV0ZQogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIERpc2J1cnNlbWVudCBkaXNidXJzZW1lbnQgPSBuZXcgRGlzYnVyc2VtZW50KAogICAgICAgICAgICBfdW5zb2xkVG9rZW5zV2FsbGV0LAogICAgICAgICAgICAxKjM2NSoyNCo2MCo2MCwKICAgICAgICAgICAgYmxvY2sudGltZXN0YW1wCiAgICAgICAgKTsKCiAgICAgICAgZGlzYnVyc2VtZW50LnNldHVwKHRva2VuKTsKICAgICAgICB1aW50IGFtb3VudFRvTG9jayA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICBkaXNidXJzZW1lbnRzLnB1c2goZGlzYnVyc2VtZW50KTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihkaXNidXJzZW1lbnQsIGFtb3VudFRvTG9jayk7CiAgICAgICAgTG9ja2VkVW5zb2xkVG9rZW5zKGFtb3VudFRvTG9jaywgZGlzYnVyc2VtZW50KTsKICAgIH0KCiAgICAvLyBPV05FUi1PTkxZIEZVTkNUSU9OUwoKICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGVUaW1lbG9ja2VkVG9rZW5zKAogICAgICAgIGFkZHJlc3NbXSBfYmVuZWZpY2lhcmllcywKICAgICAgICB1aW50W10gX2JlbmVmaWNpYXJpZXNUb2tlbnMsCiAgICAgICAgdWludFtdIF90aW1lbG9ja1N0YXJ0cywKICAgICAgICB1aW50W10gX3BlcmlvZHMKICAgICkgCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2FsZU5vdEVuZGVkCiAgICB7IAogICAgICAgIGFzc2VydCghc2V0dXBDb21wbGV0ZUZsYWcpOwogICAgICAgIGFzc2VydChfYmVuZWZpY2lhcmllc1Rva2Vucy5sZW5ndGggPCAxMSk7CiAgICAgICAgYXNzZXJ0KF9iZW5lZmljaWFyaWVzLmxlbmd0aCA9PSBfYmVuZWZpY2lhcmllc1Rva2Vucy5sZW5ndGgpOwogICAgICAgIGFzc2VydChfYmVuZWZpY2lhcmllc1Rva2Vucy5sZW5ndGggPT0gX3RpbWVsb2NrU3RhcnRzLmxlbmd0aCk7CiAgICAgICAgYXNzZXJ0KF90aW1lbG9ja1N0YXJ0cy5sZW5ndGggPT0gX3BlcmlvZHMubGVuZ3RoKTsKCiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBfYmVuZWZpY2lhcmllcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKHByaXZhdGVBbGxvY2F0ZWQgKyBfYmVuZWZpY2lhcmllc1Rva2Vuc1tpXSA8PSBNQVhfUFJJVkFURSk7CiAgICAgICAgICAgIHByaXZhdGVBbGxvY2F0ZWQgKz0gX2JlbmVmaWNpYXJpZXNUb2tlbnNbaV07CiAgICAgICAgICAgIGFkZHJlc3MgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcmllc1tpXTsKICAgICAgICAgICAgdWludCBiZW5lZmljaWFyeVRva2VucyA9IF9iZW5lZmljaWFyaWVzVG9rZW5zW2ldOwoKICAgICAgICAgICAgRGlzYnVyc2VtZW50IGRpc2J1cnNlbWVudCA9IG5ldyBEaXNidXJzZW1lbnQoCiAgICAgICAgICAgICAgICBiZW5lZmljaWFyeSwKICAgICAgICAgICAgICAgIF9wZXJpb2RzW2ldLAogICAgICAgICAgICAgICAgX3RpbWVsb2NrU3RhcnRzW2ldCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBkaXNidXJzZW1lbnQuc2V0dXAodG9rZW4pOwogICAgICAgICAgICB0b2tlbi50cmFuc2ZlcihkaXNidXJzZW1lbnQsIGJlbmVmaWNpYXJ5VG9rZW5zKTsKICAgICAgICAgICAgZGlzYnVyc2VtZW50cy5wdXNoKGRpc2J1cnNlbWVudCk7CiAgICAgICAgICAgIFRyYW5zZmVycmVkVGltZWxvY2tlZFRva2VucyhiZW5lZmljaWFyeSwgZGlzYnVyc2VtZW50LCBiZW5lZmljaWFyeVRva2Vucyk7CiAgICAgICAgfQoKICAgICAgICBhc3NlcnQodG9rZW4uYmFsYW5jZU9mKHRoaXMpID49IChUT1RBTF9TVVBQTFkgLSBNQVhfUFJJVkFURSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGVQcmVzYWxlVG9rZW5zKGFkZHJlc3NbXSBfYnV5ZXJzLCB1aW50W10gX2Ftb3VudHMpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2FsZU5vdEVuZGVkCiAgICB7CiAgICAgICAgYXNzZXJ0KCFzZXR1cENvbXBsZXRlRmxhZyk7CiAgICAgICAgcmVxdWlyZShfYnV5ZXJzLmxlbmd0aCA8IDExKTsKICAgICAgICByZXF1aXJlKF9idXllcnMubGVuZ3RoID09IF9hbW91bnRzLmxlbmd0aCk7CgogICAgICAgIGZvcih1aW50IGk9MDsgaSA8IF9idXllcnMubGVuZ3RoOyBpKyspewogICAgICAgICAgICByZXF1aXJlKHByaXZhdGVBbGxvY2F0ZWQgKyBfYW1vdW50c1tpXSA8PSBNQVhfUFJJVkFURSk7CiAgICAgICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlcihfYnV5ZXJzW2ldLCBfYW1vdW50c1tpXSkpOwogICAgICAgICAgICBwcml2YXRlQWxsb2NhdGVkICs9IF9hbW91bnRzW2ldOwogICAgICAgICAgICBQdXJjaGFzZWRUb2tlbnMoX2J1eWVyc1tpXSwgX2Ftb3VudHNbaV0pOwogICAgICAgIH0KCiAgICAgICAgYXNzZXJ0KHRva2VuLmJhbGFuY2VPZih0aGlzKSA+PSAoVE9UQUxfU1VQUExZIC0gTUFYX1BSSVZBVEUpKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVUcmFuc2ZlckxvY2soKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHRva2VuLnJlbW92ZVRyYW5zZmVyTG9jaygpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJldmVyc2VQdXJjaGFzZShhZGRyZXNzIF90b2tlbkhvbGRlcikKICAgICAgICBwYXlhYmxlCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgdWludCByZWZ1bmQgPSB0b2tlbi5iYWxhbmNlT2YoX3Rva2VuSG9sZGVyKSpwcmljZV9pbl93ZWk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gcmVmdW5kKTsKICAgICAgICB1aW50IGV4Y2Vzc0Ftb3VudCA9IG1zZy52YWx1ZSAtIHJlZnVuZDsKCiAgICAgICAgaWYgKGV4Y2Vzc0Ftb3VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihleGNlc3NBbW91bnQpOwogICAgICAgIH0KCiAgICAgICAgX3Rva2VuSG9sZGVyLnRyYW5zZmVyKHJlZnVuZCk7CiAgICAgICAgdG9rZW4ucmV2ZXJzZVB1cmNoYXNlKF90b2tlbkhvbGRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U2V0dXBDb21wbGV0ZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZSh3YWxsZXQhPTApOwogICAgICAgIHJlcXVpcmUocHJpdmF0ZUFsbG9jYXRlZCE9MCk7ICAKICAgICAgICBzZXR1cENvbXBsZXRlRmxhZyA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY29uZmlndXJlV2FsbGV0KGFkZHJlc3MgX3dhbGxldCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX25ld093bmVyKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IDApOwogICAgICAgIG93bmVyID0gX25ld093bmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVByaWNlKHVpbnQgX25ld1ByaWNlKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgICAgIG5vdEZyb3plbgogICAgICAgIHZhbGlkUHJpY2UoX25ld1ByaWNlKQogICAgewogICAgICAgIHByaWNlX2luX3dlaSA9IF9uZXdQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VTdGFydEJsb2NrKHVpbnQgX25ld0Jsb2NrKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgICAgIG5vdEZyb3plbgogICAgewogICAgICAgIHJlcXVpcmUoYmxvY2subnVtYmVyIDw9IF9uZXdCbG9jayAmJiBfbmV3QmxvY2sgPCBzdGFydEJsb2NrKTsKICAgICAgICBmcmVlemVCbG9jayA9IF9uZXdCbG9jayAtIChzdGFydEJsb2NrIC0gZnJlZXplQmxvY2spOwogICAgICAgIHN0YXJ0QmxvY2sgPSBfbmV3QmxvY2s7CiAgICB9CgogICAgZnVuY3Rpb24gZW1lcmdlbmN5VG9nZ2xlKCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBlbWVyZ2VuY3lGbGFnID0gIWVtZXJnZW5jeUZsYWc7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZFdoaXRlbGlzdChhZGRyZXNzW10gX3B1cmNoYXNlciwgdWludFtdIF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgc2FsZU5vdEVuZGVkCiAgICB7CiAgICAgICAgYXNzZXJ0KF9wdXJjaGFzZXIubGVuZ3RoIDwgMTEgKTsKICAgICAgICBhc3NlcnQoX3B1cmNoYXNlci5sZW5ndGggPT0gX2Ftb3VudC5sZW5ndGgpOwogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgX3B1cmNoYXNlci5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB3aGl0ZWxpc3RSZWdpc3RyYW50c1tfcHVyY2hhc2VyW2ldXSA9IF9hbW91bnRbaV07CiAgICAgICAgfQogICAgfQoKICAgIC8vIE1PRElGSUVSUwoKICAgIG1vZGlmaWVyIHNhbGVFbmRlZCB7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gZW5kQmxvY2spOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgc2FsZU5vdEVuZGVkIHsKICAgICAgICByZXF1aXJlKGJsb2NrLm51bWJlciA8IGVuZEJsb2NrKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdEZyb3plbiB7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPCBmcmVlemVCbG9jayk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBzYWxlSW5Qcm9ncmVzcyB7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gc3RhcnRCbG9jayAmJiBibG9jay5udW1iZXIgPCBlbmRCbG9jayk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBzZXR1cENvbXBsZXRlIHsKICAgICAgICBhc3NlcnQoc2V0dXBDb21wbGV0ZUZsYWcpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90SW5FbWVyZ2VuY3kgewogICAgICAgIGFzc2VydChlbWVyZ2VuY3lGbGFnID09IGZhbHNlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNoZWNrQmxvY2tOdW1iZXJJbnB1dHModWludCBfZnJlZXplLCB1aW50IF9zdGFydCwgdWludCBfZW5kKSB7CiAgICAgICAgcmVxdWlyZShfZnJlZXplID49IGJsb2NrLm51bWJlcgogICAgICAgICYmIF9zdGFydCA+PSBfZnJlZXplCiAgICAgICAgJiYgX2VuZCA+PSBfc3RhcnQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRQcmljZSh1aW50IF9wcmljZSl7CiAgICAgICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgICAgICBfOwogICAgfQoKfQ=='.
	

]
