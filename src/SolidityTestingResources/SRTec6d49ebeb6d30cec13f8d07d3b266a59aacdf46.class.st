Class {
	#name : #SRTec6d49ebeb6d30cec13f8d07d3b266a59aacdf46,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec6d49ebeb6d30cec13f8d07d3b266a59aacdf46 >> base64 [
	^ 'Ly8KLy8gY29tcGlsZXI6IHNvbGNqcwovLyAgdmVyc2lvbjogMC40LjE5K2NvbW1pdC5jNGNiYmIwNS5FbXNjcmlwdGVuLmNsYW5nCi8vCnByYWdtYSBzb2xpZGl0eSBeMC40LjE5OwoKY29udHJhY3Qgb3duZWQgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7IG93bmVyID0gbXNnLnNlbmRlcjsgfQoKICBtb2RpZmllciBvbmx5T3duZXIgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgcmV2ZXJ0KCk7IH0KICAgIF87CiAgfQoKICBmdW5jdGlvbiBjaGFuZ2VPd25lciggYWRkcmVzcyBuZXdvd25lciApIHB1YmxpYyBvbmx5T3duZXIgewogICAgb3duZXIgPSBuZXdvd25lcjsKICB9Cn0KCi8vIHNlZSBodHRwczovL3d3dy5ldGhlcmV1bS5vcmcvdG9rZW4KaW50ZXJmYWNlIHRva2VuUmVjaXBpZW50IHsKICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoIGFkZHJlc3MgZnJvbSwgdWludDI1NiB2YWx1ZSwgYnl0ZXMgZGF0YSApIHB1YmxpYzsKfQoKLy8gRVJDMjIzCmludGVyZmFjZSBDb250cmFjdFJlY2VpdmVyIHsKICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKCBhZGRyZXNzIGZyb20sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwdWJsaWM7Cn0KCi8vIEVSQzIyMy1jb21wbGlhbnQgdG9rZW4gd2l0aCBFUkMyMCBiYWNrLWNvbXBhdGliaWxpdHkKLy8KLy8gSW1wbGVtZW50czoKLy8gLSBodHRwczovL3RoZWV0aGVyZXVtLndpa2kvdy9pbmRleC5waHAvRVJDMjBfVG9rZW5fU3RhbmRhcmQKLy8gLSBodHRwczovL3d3dy5ldGhlcmV1bS5vcmcvdG9rZW4gKHVuY29udHJvbGxlZCwgbm9uLXN0YW5kYXJkKQovLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXhhcmFuL0VSQzIzLXRva2Vucy9ibG9iL1JlY29tbWVuZGVkL0VSQzIyM19Ub2tlbi5zb2wKCmNvbnRyYWN0IEhhc2hCdXggaXMgb3duZWQKewogIHN0cmluZyAgcHVibGljIG5hbWU7ICAgICAgICAvLyBFUkMyMAogIHN0cmluZyAgcHVibGljIHN5bWJvbDsgICAgICAvLyBFUkMyMAogIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzOyAgICAvLyBFUkMyMAogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OyAvLyBFUkMyMAoKICBtYXBwaW5nKCBhZGRyZXNzID0+IHVpbnQyNTYgKSBiYWxhbmNlc187CiAgbWFwcGluZyggYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgKSBhbGxvd2FuY2VzXzsKCiAgLy8gRVJDMjAKICBldmVudCBBcHByb3ZhbCggYWRkcmVzcyBpbmRleGVkIG93bmVyLAogICAgICAgICAgICAgICAgICBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwKICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSApOwoKICAvLyBFUkMyMjMsIEVSQzIwIHBsdXMgbGFzdCBwYXJhbWV0ZXIKICBldmVudCBUcmFuc2ZlciggYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB0bywKICAgICAgICAgICAgICAgICAgdWludDI1NiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgYnl0ZXMgICBpbmRleGVkIGRhdGEgKTsKCiAgLy8gRXRoZXJldW0gVG9rZW4KICBldmVudCBCdXJuKCBhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSApOwoKICBmdW5jdGlvbiBIYXNoQnV4KCkgcHVibGljCiAgewogICAgYmFsYW5jZXNfW21zZy5zZW5kZXJdID0gdWludDI1Nig4MDAwMDAwMCk7CiAgICB0b3RhbFN1cHBseSA9IHVpbnQyNTYoODAwMDAwMDApOwogICAgbmFtZSA9ICJIYXNoQnV4IjsKICAgIGRlY2ltYWxzID0gdWludDgoMCk7CiAgICBzeW1ib2wgPSAiSEFTSCI7CiAgfQoKICAvLyBIYXNoQnV4LXNwZWNpZmljCiAgZnVuY3Rpb24gbWluZSggdWludDI1NiBuZXdUb2tlbnMgKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGlmIChuZXdUb2tlbnMgKyB0b3RhbFN1cHBseSA+IDRlOSkKICAgICAgcmV2ZXJ0KCk7CgogICAgdG90YWxTdXBwbHkgKz0gbmV3VG9rZW5zOwogICAgYmFsYW5jZXNfW293bmVyXSArPSBuZXdUb2tlbnM7CiAgICBieXRlcyBtZW1vcnkgZW1wdHk7CiAgICBUcmFuc2ZlciggYWRkcmVzcyh0aGlzKSwgb3duZXIsIG5ld1Rva2VucywgZW1wdHkgKTsKICB9CgogIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgeyByZXZlcnQoKTsgfSAvLyBkb2VzIG5vdCBhY2NlcHQgbW9uZXkKCiAgLy8gRVJDMjAKICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgb3duZXIgKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIGJhbGFuY2VzX1tvd25lcl07CiAgfQoKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGFwcHJvdmUoIGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBhbGxvd2FuY2VzX1ttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgQXBwcm92YWwoIG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGFsbG93YW5jZSggYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyICkgcHVibGljIGNvbnN0YW50CiAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpCiAgewogICAgcmV0dXJuIGFsbG93YW5jZXNfW293bmVyXVtzcGVuZGVyXTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljCiAgewogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OyAvLyBudWxsCiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZW1wdHkgKTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgcmVxdWlyZSggdmFsdWUgPD0gYWxsb3dhbmNlc19bZnJvbV1bbXNnLnNlbmRlcl0gKTsKCiAgICBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsKICAgIF90cmFuc2ZlciggZnJvbSwgdG8sIHZhbHVlLCBlbXB0eSApOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRXRoZXJldW0gVG9rZW4KICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbCggYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlLCBieXRlcyBjb250ZXh0ICkKICBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIGlmICggYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkgKQogICAgewogICAgICB0b2tlblJlY2lwaWVudCByZWNpcCA9IHRva2VuUmVjaXBpZW50KCBzcGVuZGVyICk7CiAgICAgIHJlY2lwLnJlY2VpdmVBcHByb3ZhbCggbXNnLnNlbmRlciwgdmFsdWUsIGNvbnRleHQgKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSAgICAgICAgCgogIC8vIEV0aGVyZXVtIFRva2VuCiAgZnVuY3Rpb24gYnVybiggdWludDI1NiB2YWx1ZSApIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgcmVxdWlyZSggYmFsYW5jZXNfW21zZy5zZW5kZXJdID49IHZhbHVlICk7CiAgICBiYWxhbmNlc19bbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICB0b3RhbFN1cHBseSAtPSB2YWx1ZTsKCiAgICBCdXJuKCBtc2cuc2VuZGVyLCB2YWx1ZSApOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGJ1cm5Gcm9tKCBhZGRyZXNzIGZyb20sIHVpbnQyNTYgdmFsdWUgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIHJlcXVpcmUoIGJhbGFuY2VzX1tmcm9tXSA+PSB2YWx1ZSApOwogICAgcmVxdWlyZSggdmFsdWUgPD0gYWxsb3dhbmNlc19bZnJvbV1bbXNnLnNlbmRlcl0gKTsKCiAgICBiYWxhbmNlc19bZnJvbV0gLT0gdmFsdWU7CiAgICBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIHRvdGFsU3VwcGx5IC09IHZhbHVlOwoKICAgIEJ1cm4oIGZyb20sIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIF90cmFuc2ZlciggYWRkcmVzcyBmcm9tLAogICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyB0bywKICAgICAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICBieXRlcyBkYXRhICkgaW50ZXJuYWwKICB7CiAgICByZXF1aXJlKCB0byAhPSAweDAgKTsKICAgIHJlcXVpcmUoIGJhbGFuY2VzX1tmcm9tXSA+PSB2YWx1ZSApOwogICAgcmVxdWlyZSggYmFsYW5jZXNfW3RvXSArIHZhbHVlID4gYmFsYW5jZXNfW3RvXSApOyAvLyBjYXRjaCBvdmVyZmxvdwoKICAgIGJhbGFuY2VzX1tmcm9tXSAtPSB2YWx1ZTsKICAgIGJhbGFuY2VzX1t0b10gKz0gdmFsdWU7CgogICAgVHJhbnNmZXIoIGZyb20sIHRvLCB2YWx1ZSwgZGF0YSApOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIGFuZCBpbnZva2Ugc3BlY2lmaWVkIGNhbGxiYWNrCiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sCiAgICAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBjdXN0b21fZmFsbGJhY2sgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgaWYgKCBpc0NvbnRyYWN0KHRvKSApCiAgICB7CiAgICAgIENvbnRyYWN0UmVjZWl2ZXIgcnggPSBDb250cmFjdFJlY2VpdmVyKCB0byApOwogICAgICByZXF1aXJlKCByeC5jYWxsLnZhbHVlKDApCiAgICAgICAgICAgICAgIChieXRlczQoa2VjY2FrMjU2KGN1c3RvbV9mYWxsYmFjaykpLCBtc2cuc2VuZGVyLCB2YWx1ZSwgZGF0YSkgKTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBUcmFuc2ZlciB0byBhIGNvbnRyYWN0IG9yIGV4dGVybmFsbHktb3duZWQgYWNjb3VudAogIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhICkgcHVibGljCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIGlmIChpc0NvbnRyYWN0KHRvKSkgewogICAgICByZXR1cm4gdHJhbnNmZXJUb0NvbnRyYWN0KCB0bywgdmFsdWUsIGRhdGEgKTsKICAgIH0KCiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZGF0YSApOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFUkMyMjMgVHJhbnNmZXIgdG8gY29udHJhY3QgYW5kIGludm9rZSB0b2tlbkZhbGxiYWNrKCkgbWV0aG9kCiAgZnVuY3Rpb24gdHJhbnNmZXJUb0NvbnRyYWN0KCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhICkgcHJpdmF0ZQogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZGF0YSApOwoKICAgIENvbnRyYWN0UmVjZWl2ZXIgcnggPSBDb250cmFjdFJlY2VpdmVyKHRvKTsKICAgIHJ4LnRva2VuRmFsbGJhY2soIG1zZy5zZW5kZXIsIHZhbHVlLCBkYXRhICk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFUkMyMjMgZmV0Y2ggY29udHJhY3Qgc2l6ZSAobXVzdCBiZSBub256ZXJvIHRvIGJlIGEgY29udHJhY3QpCiAgZnVuY3Rpb24gaXNDb250cmFjdCggYWRkcmVzcyBfYWRkciApIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkKICB7CiAgICB1aW50IGxlbmd0aDsKICAgIGFzc2VtYmx5IHsgbGVuZ3RoIDo9IGV4dGNvZGVzaXplKF9hZGRyKSB9CiAgICByZXR1cm4gKGxlbmd0aCA+IDApOwogIH0KfQ=='.
	

]
