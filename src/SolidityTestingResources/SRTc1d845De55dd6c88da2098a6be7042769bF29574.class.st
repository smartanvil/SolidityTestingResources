Class {
	#name : #SRTc1d845De55dd6c88da2098a6be7042769bF29574,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc1d845De55dd6c88da2098a6be7042769bF29574 >> base64 [
	^ ''.
	

]
