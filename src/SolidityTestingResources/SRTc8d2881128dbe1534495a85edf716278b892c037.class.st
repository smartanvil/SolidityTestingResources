Class {
	#name : #SRTc8d2881128dbe1534495a85edf716278b892c037,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc8d2881128dbe1534495a85edf716278b892c037 >> base64 [
	^ ''.
	

]
