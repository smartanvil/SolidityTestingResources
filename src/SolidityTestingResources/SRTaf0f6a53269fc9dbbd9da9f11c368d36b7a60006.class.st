Class {
	#name : #SRTaf0f6a53269fc9dbbd9da9f11c368d36b7a60006,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf0f6a53269fc9dbbd9da9f11c368d36b7a60006 >> base64 [
	^ ''.
	

]
