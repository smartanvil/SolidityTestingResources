Class {
	#name : #SRT96e9ace417632353da8133f8471769c796641c30,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96e9ace417632353da8133f8471769c796641c30 >> base64 [
	^ ''.
	

]
