Class {
	#name : #SRTf78470c139b07b21e59f9b7ee6149f58777806af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf78470c139b07b21e59f9b7ee6149f58777806af >> base64 [
	^ ''.
	

]
