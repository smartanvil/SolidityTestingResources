Class {
	#name : #SRT5ca7099611020d9234c7191c7b066779128e715c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ca7099611020d9234c7191c7b066779128e715c >> base64 [
	^ ''.
	

]
