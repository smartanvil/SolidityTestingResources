Class {
	#name : #SRT994D983Dd6a0dD89e9B62D2C1D7bE2a95C3EEd9E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT994D983Dd6a0dD89e9B62D2C1D7bE2a95C3EEd9E >> base64 [
	^ ''.
	

]
