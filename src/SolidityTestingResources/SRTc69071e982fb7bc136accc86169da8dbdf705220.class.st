Class {
	#name : #SRTc69071e982fb7bc136accc86169da8dbdf705220,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc69071e982fb7bc136accc86169da8dbdf705220 >> base64 [
	^ ''.
	

]
