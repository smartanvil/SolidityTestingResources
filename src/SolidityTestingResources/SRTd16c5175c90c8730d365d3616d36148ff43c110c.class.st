Class {
	#name : #SRTd16c5175c90c8730d365d3616d36148ff43c110c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd16c5175c90c8730d365d3616d36148ff43c110c >> base64 [
	^ ''.
	

]
