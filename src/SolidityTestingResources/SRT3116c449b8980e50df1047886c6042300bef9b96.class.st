Class {
	#name : #SRT3116c449b8980e50df1047886c6042300bef9b96,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3116c449b8980e50df1047886c6042300bef9b96 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLy8gQHRpdGxlIEludGVyZmFjZSBmb3IgY29udHJhY3RzIGNvbmZvcm1pbmcgdG8gRVJDLTcyMTogTm9uLUZ1bmdpYmxlIFRva2VucwovLy8gQGF1dGhvciBEaWV0ZXIgU2hpcmxleSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjkyZjZmN2U2ZjdkMmYzZWFmYmZkZmZlOGY3ZmNiY2YxZmQiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PiAoaHR0cHM6Ly9naXRodWIuY29tL2RldGUpCgpjb250cmFjdCBFUkM3MjEgewogIC8vIFJlcXVpcmVkIG1ldGhvZHMKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgYWRkcik7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogIC8vRXZlbnRzCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF90b2tlbklkKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX2FwcHJvdmVkLCB1aW50MjU2IF90b2tlbklkKTsKfQoKY29udHJhY3QgQ3J5cHRvQ29sb3JzIGlzIEVSQzcyMSB7CgogIC8qKiogRVZFTlRTICoqKi8KCiAgLy8vIEBkZXYgVGhlIFJlbGVhc2VkIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgbmV3IGNvbG9yIGlzIHJlbGVhc2VkLgogIGV2ZW50IFJlbGVhc2VkKHVpbnQyNTYgdG9rZW5JZCwgc3RyaW5nIG5hbWUsIGFkZHJlc3Mgb3duZXIpOwoKICAvLy8gQGRldiBUaGUgQ29sb3JTb2xkIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgY29sb3IgaXMgc29sZC4KICBldmVudCBDb2xvclNvbGQodWludDI1NiB0b2tlbklkLCB1aW50MjU2IG9sZFByaWNlLCB1aW50MjU2IG5ld1ByaWNlLCBhZGRyZXNzIHByZXZPd25lciwgYWRkcmVzcyB3aW5uZXIsIHN0cmluZyBuYW1lKTsKCiAgLy8vIEBkZXYgVHJhbnNmZXIgZXZlbnQgYXMgZGVmaW5lZCBpbiBjdXJyZW50IGRyYWZ0IG9mIEVSQzcyMS4KICAvLy8gb3duZXJzaGlwIGlzIGFzc2lnbmVkLCBpbmNsdWRpbmcgaW5pdGlhbCBjb2xvciBsaXN0aW5ncy4KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CgogIC8qKiogQ09OU1RBTlRTICoqKi8KICAvLy8gQG5vdGljZSBOYW1lIGFuZCBzeW1ib2wgb2YgdGhlIG5vbiBmdW5naWJsZSB0b2tlbiwgYXMgZGVmaW5lZCBpbiBFUkM3MjEuCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBOQU1FID0gIkNyeXB0b0NvbG9ycyI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiQ09MT1IiOwoKICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgUFJPTU9fQ1JFQVRJT05fTElNSVQgPSAxMDAwMDAwOwogIHVpbnQyNTYgcHJpdmF0ZSBzdGFydGluZ1ByaWNlID0gMC4wMDEgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIGZpcnN0U3RlcExpbWl0ID0gIDAuMDUgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIHNlY29uZFN0ZXBMaW1pdCA9IDAuNSBldGhlcjsKCgogIC8qKiogU1RPUkFHRSAqKiovCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gY29sb3IgSURzIHRvIHRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGVtLiBBbGwgY29sb3JzIGhhdmUKICAvLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyBjb2xvckluZGV4VG9Pd25lcjsKCiAgLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBvd25lciBhZGRyZXNzIHRvIGNvdW50IG9mIHRva2VucyB0aGF0IGFkZHJlc3Mgb3ducy4KICAvLyAgVXNlZCBpbnRlcm5hbGx5IGluc2lkZSBiYWxhbmNlT2YoKSB0byByZXNvbHZlIG93bmVyc2hpcCBjb3VudC4KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZXJzaGlwVG9rZW5Db3VudDsKCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gY29sb3JJRHMgdG8gYW4gYWRkcmVzcyB0aGF0IGhhcyBiZWVuIGFwcHJvdmVkIHRvIGNhbGwKICAvLy8gIHRyYW5zZmVyRnJvbSgpLiBFYWNoIGNvbG9yIGNhbiBvbmx5IGhhdmUgb25lIGFwcHJvdmVkIGFkZHJlc3MgZm9yIHRyYW5zZmVyCiAgLy8vICBhdCBhbnkgdGltZS4gQSB6ZXJvIHZhbHVlIG1lYW5zIG5vIGFwcHJvdmFsIGlzIG91dHN0YW5kaW5nLgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGNvbG9ySW5kZXhUb0FwcHJvdmVkOwoKICAvLyBAZGV2IEEgbWFwcGluZyBmcm9tIGNvbG9ySURzIHRvIHRoZSBwcmljZSBvZiB0aGUgdG9rZW4uCiAgbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSBwcml2YXRlIGNvbG9ySW5kZXhUb1ByaWNlOwoKICAvLyBUaGUgYWRkcmVzcyBvZiB0aGUgQ0VPCiAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKCiAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIHRvdGFsIHByb21vIGNvbG9ycyByZWxlYXNlZAogIHVpbnQyNTYgcHVibGljIHByb21vQ3JlYXRlZENvdW50OwoKICAvKioqIERBVEFUWVBFUyAqKiovCiAgc3RydWN0IENvbG9yewogICAgdWludDggUjsKICAgIHVpbnQ4IEc7CiAgICB1aW50OCBCOwogICAgc3RyaW5nIG5hbWU7CiAgfQoKICAvLyBTdG9yYWdlIGFycmF5IG9mIGFsbCBjb2xvcnMuIEluZGV4ZWQgYnkgY29sb3JJZC4KICBDb2xvcltdIHByaXZhdGUgY29sb3JzOwoKCiAgLyoqKiBBQ0NFU1MgTU9ESUZJRVJTICoqKi8KICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIENFTy1vbmx5IGZ1bmN0aW9uYWxpdHkKICBtb2RpZmllciBvbmx5Q0VPKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MpOwogICAgXzsKICB9CgogIC8qKiogQ09OU1RSVUNUT1IgKioqLwogIGZ1bmN0aW9uIENyeXB0b0NvbG9ycygpIHB1YmxpYyB7CiAgICBjZW9BZGRyZXNzID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKiogUFVCTElDIEZVTkNUSU9OUyAqKiovCgogIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENFTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ0VPLgogIC8vLyBAcGFyYW0gX25ld0NFTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENFTwogIGZ1bmN0aW9uIHNldENFTyhhZGRyZXNzIF9uZXdDRU8pIHB1YmxpYyBvbmx5Q0VPIHsKICAgIHJlcXVpcmUoX25ld0NFTyAhPSBhZGRyZXNzKDApKTsKCiAgICBjZW9BZGRyZXNzID0gX25ld0NFTzsKICB9CgogIC8vLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgdG9rZW4gdmlhIHRha2VPd25lcnNoaXAoKSBhbmQgdHJhbnNmZXJGcm9tKCkuCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gYmUgZ3JhbnRlZCB0cmFuc2ZlciBhcHByb3ZhbC4gUGFzcyBhZGRyZXNzKDApIHRvIGNsZWFyIGFsbCBhcHByb3ZhbHMuCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIGNvbG9yIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB7CiAgICAvLyBDYWxsZXIgbXVzdCBvd24gdG9rZW4uCiAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgY29sb3JJbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdID0gX3RvOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvLy8gRm9yIHF1ZXJ5aW5nIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQKICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmb3IgYmFsYW5jZSBxdWVyeQogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBvd25lcnNoaXBUb2tlbkNvdW50W19vd25lcl07CiAgfQoKICAvLy8gQGRldiBDcmVhdGVzIGEgbmV3IGNvbG9yIHdpdGggdGhlIGdpdmVuIG5hbWUsIHdpdGggZ2l2ZW4gX3ByaWNlIGFuZCBhc3NpZ25lcyBpdCB0byBhbiBhZGRyZXNzLgogIGZ1bmN0aW9uIGNyZWF0ZVByb21vQ29sb3IodWludDI1NiBfUiwgdWludDI1NiBfRywgdWludDI1NiBfQiwgc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UpIHB1YmxpYyBvbmx5Q0VPIHsKICAgIHJlcXVpcmUocHJvbW9DcmVhdGVkQ291bnQgPCBQUk9NT19DUkVBVElPTl9MSU1JVCk7CgogICAgYWRkcmVzcyBjb2xvck93bmVyID0gX293bmVyOwogICAgaWYgKGNvbG9yT3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICBjb2xvck93bmVyID0gY2VvQWRkcmVzczsKICAgIH0KCiAgICBpZiAoX3ByaWNlIDw9IDApIHsKICAgICAgX3ByaWNlID0gc3RhcnRpbmdQcmljZTsKICAgIH0KCiAgICBwcm9tb0NyZWF0ZWRDb3VudCsrOwogICAgX2NyZWF0ZUNvbG9yKF9SLCBfRywgX0IsIF9uYW1lLCBjb2xvck93bmVyLCBfcHJpY2UpOwogIH0KCiAgLy8vIEBkZXYgQ3JlYXRlcyBhIG5ldyBjb2xvciB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjb250cmFjdC4KICBmdW5jdGlvbiBjcmVhdGVDb250cmFjdENvbG9yKHVpbnQyNTYgX1IsIHVpbnQyNTYgX0csIHVpbnQyNTYgX0IsIHN0cmluZyBfbmFtZSkgcHVibGljIG9ubHlDRU8gewogICAgX2NyZWF0ZUNvbG9yKF9SLCBfRywgX0IsIF9uYW1lLCBhZGRyZXNzKHRoaXMpLCBzdGFydGluZ1ByaWNlKTsKICB9CgogIC8vLyBAbm90aWNlIFJldHVybnMgYWxsIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGNvbG9yLgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElkIG9mIHRoZSBjb2xvciBvZiBpbnRlcmVzdC4KICBmdW5jdGlvbiBnZXRDb2xvcih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IFIsIHVpbnQyNTYgRywgdWludDI1NiBCLCBzdHJpbmcgY29sb3JOYW1lLCB1aW50MjU2IHNlbGxpbmdQcmljZSwgYWRkcmVzcyBvd25lcikgewogICAgQ29sb3Igc3RvcmFnZSBjb2wgPSBjb2xvcnNbX3Rva2VuSWRdOwoKICAgIFIgPSBjb2wuUjsKICAgIEcgPSBjb2wuRzsKICAgIEIgPSBjb2wuQjsKICAgIGNvbG9yTmFtZSA9IGNvbC5uYW1lOwogICAgc2VsbGluZ1ByaWNlID0gY29sb3JJbmRleFRvUHJpY2VbX3Rva2VuSWRdOwogICAgb3duZXIgPSBjb2xvckluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgfQoKICAvLy8gRm9yIHF1ZXJ5aW5nIG93bmVyIG9mIHRva2VuCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgY29sb3JJZCBmb3Igb3duZXIgaW5xdWlyeQogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKSB7CiAgICBvd25lciA9IGNvbG9ySW5kZXhUb093bmVyW190b2tlbklkXTsKICAgIHJlcXVpcmUob3duZXIgIT0gYWRkcmVzcygwKSk7CiAgfQoKICBmdW5jdGlvbiBwYXlvdXQoYWRkcmVzcyBfdG8pIHB1YmxpYyBvbmx5Q0VPIHsKICAgIF9wYXlvdXQoX3RvKTsKICB9CgogIC8vIEFsbG93cyBzb21lb25lIHRvIHNlbmQgZXRoZXIgYW5kIG9idGFpbiB0aGUgdG9rZW4KICBmdW5jdGlvbiBwdXJjaGFzZSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcGF5YWJsZSB7CiAgICBhZGRyZXNzIG9sZE93bmVyID0gY29sb3JJbmRleFRvT3duZXJbX3Rva2VuSWRdOwogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CgogICAgdWludDI1NiBzZWxsaW5nUHJpY2UgPSBjb2xvckluZGV4VG9QcmljZVtfdG9rZW5JZF07CgogICAgLy8gTWFraW5nIHN1cmUgdG9rZW4gb3duZXIgaXMgbm90IHNlbmRpbmcgdG8gc2VsZgogICAgcmVxdWlyZShvbGRPd25lciAhPSBuZXdPd25lcik7CgogICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAvLyBNYWtpbmcgc3VyZSBzZW50IGFtb3VudCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbGxpbmdQcmljZQogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gc2VsbGluZ1ByaWNlKTsKCiAgICB1aW50MjU2IHBheW1lbnQgPSB1aW50MjU2KFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCA5MyksIDEwMCkpOwogICAgdWludDI1NiBwdXJjaGFzZUV4Y2VzcyA9IFNhZmVNYXRoLnN1Yihtc2cudmFsdWUsIHNlbGxpbmdQcmljZSk7CgogICAgLy8gVXBkYXRlIHByaWNlcwogICAgaWYgKHNlbGxpbmdQcmljZSA8IGZpcnN0U3RlcExpbWl0KSB7CiAgICAgIC8vIGZpcnN0IHN0YWdlCiAgICAgIGNvbG9ySW5kZXhUb1ByaWNlW190b2tlbklkXSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCAyMDApLCA5Myk7CiAgICB9IGVsc2UgaWYgKHNlbGxpbmdQcmljZSA8IHNlY29uZFN0ZXBMaW1pdCkgewogICAgICAvLyBzZWNvbmQgc3RhZ2UKICAgICAgY29sb3JJbmRleFRvUHJpY2VbX3Rva2VuSWRdID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIDE1MCksIDkzKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIHRoaXJkIHN0YWdlCiAgICAgIGNvbG9ySW5kZXhUb1ByaWNlW190b2tlbklkXSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCAxMTUpLCA5Myk7CiAgICB9CgogICAgX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwoKICAgIC8vIFBheSBwcmV2aW91cyB0b2tlbk93bmVyIGlmIG93bmVyIGlzIG5vdCBjb250cmFjdAogICAgaWYgKG9sZE93bmVyICE9IGFkZHJlc3ModGhpcykpIHsKICAgICAgb2xkT3duZXIudHJhbnNmZXIocGF5bWVudCk7CiAgICB9CgogICAgQ29sb3JTb2xkKF90b2tlbklkLCBzZWxsaW5nUHJpY2UsIGNvbG9ySW5kZXhUb1ByaWNlW190b2tlbklkXSwgb2xkT3duZXIsIG5ld093bmVyLCBjb2xvcnNbX3Rva2VuSWRdLm5hbWUpOwoKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIocHVyY2hhc2VFeGNlc3MpOwogIH0KCiAgZnVuY3Rpb24gcHJpY2VPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHByaWNlKSB7CiAgICByZXR1cm4gY29sb3JJbmRleFRvUHJpY2VbX3Rva2VuSWRdOwogIH0KCgogIC8vLyBAbm90aWNlIEFsbG93IHByZS1hcHByb3ZlZCB1c2VyIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgY29sb3IKICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgY29sb3IgdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICBhZGRyZXNzIG9sZE93bmVyID0gY29sb3JJbmRleFRvT3duZXJbX3Rva2VuSWRdOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKG5ld093bmVyKSk7CgogICAgLy8gTWFraW5nIHN1cmUgdHJhbnNmZXIgaXMgYXBwcm92ZWQKICAgIHJlcXVpcmUoX2FwcHJvdmVkKG5ld093bmVyLCBfdG9rZW5JZCkpOwoKICAgIF90cmFuc2ZlcihvbGRPd25lciwgbmV3T3duZXIsIF90b2tlbklkKTsKICB9CgogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBvd25lciB3aG9zZSBjb2xvciB0b2tlbnMgd2UgYXJlIGludGVyZXN0ZWQgaW4uCiAgLy8vIEBkZXYgVGhpcyBtZXRob2QgTVVTVCBORVZFUiBiZSBjYWxsZWQgYnkgc21hcnQgY29udHJhY3QgY29kZS4gRmlyc3QsIGl0J3MgZmFpcmx5CiAgLy8vICBleHBlbnNpdmUgKGl0IHdhbGtzIHRoZSBlbnRpcmUgY29sb3JzIGFycmF5IGxvb2tpbmcgZm9yIGNvbG9ycyBiZWxvbmdpbmcgdG8gb3duZXIpLAogIC8vLyAgYnV0IGl0IGFsc28gcmV0dXJucyBhIGR5bmFtaWMgYXJyYXksIHdoaWNoIGlzIG9ubHkgc3VwcG9ydGVkIGZvciB3ZWIzIGNhbGxzLCBhbmQKICAvLy8gIG5vdCBjb250cmFjdC10by1jb250cmFjdCBjYWxscy4KICBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTZbXSBvd25lclRva2VucykgewogICAgdWludDI1NiB0b2tlbkNvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICBpZiAodG9rZW5Db3VudCA9PSAwKSB7CiAgICAgICAgLy8gUmV0dXJuIGFuIGVtcHR5IGFycmF5CiAgICAgIHJldHVybiBuZXcgdWludDI1NltdKDApOwogICAgfSBlbHNlIHsKICAgICAgdWludDI1NltdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludDI1NltdKHRva2VuQ291bnQpOwogICAgICB1aW50MjU2IHRvdGFsY29sb3JzID0gdG90YWxTdXBwbHkoKTsKICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICB1aW50MjU2IGNvbG9ySWQ7CiAgICAgIGZvciAoY29sb3JJZCA9IDA7IGNvbG9ySWQgPD0gdG90YWxjb2xvcnM7IGNvbG9ySWQrKykgewogICAgICAgIGlmIChjb2xvckluZGV4VG9Pd25lcltjb2xvcklkXSA9PSBfb3duZXIpIHsKICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleF0gPSBjb2xvcklkOwogICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9CgogIC8vLyBGb3IgcXVlcnlpbmcgdG90YWxTdXBwbHkgb2YgdG9rZW4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCkgewogICAgcmV0dXJuIGNvbG9ycy5sZW5ndGg7CiAgfQoKICAvLy8gT3duZXIgaW5pdGF0ZXMgdGhlIHRyYW5zZmVyIG9mIHRoZSB0b2tlbiB0byBhbm90aGVyIGFjY291bnQKICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIHRvLgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBjb2xvciB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKF90bykpOwoKICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8vLyBUaGlyZC1wYXJ0eSBpbml0aWF0ZXMgdHJhbnNmZXIgb2YgdG9rZW4gZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIGZyb20uCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZCB0by4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgY29sb3IgdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogICAgcmVxdWlyZShfb3ducyhfZnJvbSwgX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUoX2FwcHJvdmVkKF90bywgX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKF90bykpOwoKICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioqIFBSSVZBVEUgRlVOQ1RJT05TICoqKi8KICAvLy8gU2FmZXR5IGNoZWNrIG9uIF90byBhZGRyZXNzIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogIGZ1bmN0aW9uIF9hZGRyZXNzTm90TnVsbChhZGRyZXNzIF90bykgcHJpdmF0ZSBwdXJlIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBfdG8gIT0gYWRkcmVzcygwKTsKICB9CgogIC8vLyBGb3IgY2hlY2tpbmcgYXBwcm92YWwgb2YgdHJhbnNmZXIgZm9yIGFkZHJlc3MgX3RvCiAgZnVuY3Rpb24gX2FwcHJvdmVkKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGNvbG9ySW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9PSBfdG87CiAgfQoKICAvLy8gRm9yIGNyZWF0aW5nIGNvbG9yCiAgZnVuY3Rpb24gX2NyZWF0ZUNvbG9yKHVpbnQyNTYgX1IsIHVpbnQyNTYgX0csIHVpbnQyNTYgX0IsIHN0cmluZyBfbmFtZSwgYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3ByaWNlKSBwcml2YXRlIHsKICAgIHJlcXVpcmUoX1IgPT0gdWludDI1Nih1aW50OChfUikpKTsKICAgIHJlcXVpcmUoX0cgPT0gdWludDI1Nih1aW50OChfRykpKTsKICAgIHJlcXVpcmUoX0IgPT0gdWludDI1Nih1aW50OChfQikpKTsKCiAgICBDb2xvciBtZW1vcnkgX2NvbG9yID0gQ29sb3IoewogICAgICAgIFI6IHVpbnQ4KF9SKSwKICAgICAgICBHOiB1aW50OChfRyksCiAgICAgICAgQjogdWludDgoX0IpLAogICAgICAgIG5hbWU6IF9uYW1lCiAgICB9KTsKCiAgICB1aW50MjU2IG5ld0NvbG9ySWQgPSBjb2xvcnMucHVzaChfY29sb3IpIC0gMTsKCiAgICByZXF1aXJlKG5ld0NvbG9ySWQgPT0gdWludDI1Nih1aW50MzIobmV3Q29sb3JJZCkpKTsKCiAgICBSZWxlYXNlZChuZXdDb2xvcklkLCBfbmFtZSwgX293bmVyKTsKCiAgICBjb2xvckluZGV4VG9QcmljZVtuZXdDb2xvcklkXSA9IF9wcmljZTsKCiAgICAvLyBUaGlzIHdpbGwgYXNzaWduIG93bmVyc2hpcCwgYW5kIGFsc28gZW1pdCB0aGUgVHJhbnNmZXIgZXZlbnQgYXMKICAgIC8vIHBlciBFUkM3MjEgZHJhZnQKICAgIF90cmFuc2ZlcihhZGRyZXNzKDApLCBfb3duZXIsIG5ld0NvbG9ySWQpOwogIH0KCiAgLy8vIENoZWNrIGZvciBjb2xvciBvd25lcnNoaXAKICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIGNsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGNsYWltYW50ID09IGNvbG9ySW5kZXhUb093bmVyW190b2tlbklkXTsKICB9CgogIC8vLyBGb3IgcGF5aW5nIG91dCBiYWxhbmNlIG9uIGNvbnRyYWN0CiAgZnVuY3Rpb24gX3BheW91dChhZGRyZXNzIF90bykgcHJpdmF0ZSB7CiAgICBpZiAoX3RvID09IGFkZHJlc3MoMCkpIHsKICAgICAgY2VvQWRkcmVzcy50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfSBlbHNlIHsKICAgICAgX3RvLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgfQoKICAvLy8gQGRldiBBc3NpZ25zIG93bmVyc2hpcCBvZiBhIHNwZWNpZmljIENvbG9yIHRvIGFuIGFkZHJlc3MuCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHsKICAgIC8vIFNpbmNlIHRoZSBudW1iZXIgb2YgY29sb3JzIGlzIGNhcHBlZCB0byAyXjMyIHdlIGNhbid0IG92ZXJmbG93IHRoaXMKICAgIG93bmVyc2hpcFRva2VuQ291bnRbX3RvXSsrOwogICAgLy90cmFuc2ZlciBvd25lcnNoaXAKICAgIGNvbG9ySW5kZXhUb093bmVyW190b2tlbklkXSA9IF90bzsKCiAgICAvLyBXaGVuIGNyZWF0aW5nIG5ldyBjb2xvcnMgX2Zyb20gaXMgMHgwLCBidXQgd2UgY2FuJ3QgYWNjb3VudCB0aGF0IGFkZHJlc3MuCiAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lcnNoaXBUb2tlbkNvdW50W19mcm9tXS0tOwogICAgICAvLyBjbGVhciBhbnkgcHJldmlvdXNseSBhcHByb3ZlZCBvd25lcnNoaXAgZXhjaGFuZ2UKICAgICAgZGVsZXRlIGNvbG9ySW5kZXhUb0FwcHJvdmVkW190b2tlbklkXTsKICAgIH0KCiAgICAvLyBFbWl0IHRoZSB0cmFuc2ZlciBldmVudC4KICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICB9Cn0KCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICovCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KfQ=='.
	

]
