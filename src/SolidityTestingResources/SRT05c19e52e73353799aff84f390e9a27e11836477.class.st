Class {
	#name : #SRT05c19e52e73353799aff84f390e9a27e11836477,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT05c19e52e73353799aff84f390e9a27e11836477 >> base64 [
	^ ''.
	

]
