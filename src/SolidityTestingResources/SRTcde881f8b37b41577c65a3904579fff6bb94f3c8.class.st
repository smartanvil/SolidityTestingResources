Class {
	#name : #SRTcde881f8b37b41577c65a3904579fff6bb94f3c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcde881f8b37b41577c65a3904579fff6bb94f3c8 >> base64 [
	^ ''.
	

]
