Class {
	#name : #SRTda922e473796bc372d4a2cb95395ed17af8b309b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTda922e473796bc372d4a2cb95395ed17af8b309b >> base64 [
	^ ''.
	

]
