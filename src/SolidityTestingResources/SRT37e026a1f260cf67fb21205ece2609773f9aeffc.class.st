Class {
	#name : #SRT37e026a1f260cf67fb21205ece2609773f9aeffc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT37e026a1f260cf67fb21205ece2609773f9aeffc >> base64 [
	^ ''.
	

]
