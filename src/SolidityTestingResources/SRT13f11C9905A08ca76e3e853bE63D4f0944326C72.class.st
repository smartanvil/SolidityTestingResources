Class {
	#name : #SRT13f11C9905A08ca76e3e853bE63D4f0944326C72,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13f11C9905A08ca76e3e853bE63D4f0944326C72 >> base64 [
	^ ''.
	

]
