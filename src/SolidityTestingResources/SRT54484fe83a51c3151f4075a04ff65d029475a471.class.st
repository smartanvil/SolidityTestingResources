Class {
	#name : #SRT54484fe83a51c3151f4075a04ff65d029475a471,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT54484fe83a51c3151f4075a04ff65d029475a471 >> base64 [
	^ ''.
	

]
