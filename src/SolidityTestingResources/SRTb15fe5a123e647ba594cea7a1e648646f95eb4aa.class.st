Class {
	#name : #SRTb15fe5a123e647ba594cea7a1e648646f95eb4aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb15fe5a123e647ba594cea7a1e648646f95eb4aa >> base64 [
	^ 'LyoKICBDb3B5cmlnaHQgMjAxNyBTaGFyZGVyIEZvdW5kYXRpb24uCgogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCgogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKi8KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KfQoKLyoqCiogQHRpdGxlIFNoYXJkZXIgUHJvdG9jb2wgVG9rZW4uCiogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyB0b2tlbiBzYWxlLCBwbGVhc2UgdmlzaXQgaHR0cHM6Ly9zaGFyZGVyLm9yZwoqIEBhdXRob3IgQmVuIC0gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iOWRlNWU0ZGRlZWY1ZmNlZmY5ZjhlZmIzZjJlZmZhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4uCiogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiovCmNvbnRyYWN0IFNoYXJkZXJUb2tlbiB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgTkFNRSA9ICJTaGFyZGVyIFN0b3JhZ2UiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiU1MiOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgREVDSU1BTFMgPSAxODsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgIHB1YmxpYyBhbGxvd2VkOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7CgogICAgLy8vIFRoaXMgaXMgd2hlcmUgd2UgaG9sZCBldGhlciBkdXJpbmcgdGhpcyBjcm93ZHNhbGUuIFdlIHdpbGwgbm90IHRyYW5zZmVyIGFueSBldGhlcgogICAgLy8vIG91dCBvZiB0aGlzIGFkZHJlc3MgYmVmb3JlIHdlIGludm9jYXRlIHRoZSBgY2xvc2VDcm93ZHNhbGVgIGZ1bmN0aW9uIHRvIGZpbmFsaXplIHRoZSBjcm93ZHNhbGUuCiAgICAvLy8gVGhpcyBwcm9taXNlIGlzIG5vdCBndWFucmFudGVlZCBieSBzbWFydCBjb250cmFjdCBieSBjYW4gYmUgdmVyaWZpZWQgd2l0aCBwdWJsaWMKICAgIC8vLyBFdGhlcmV1bSB0cmFuc2FjdGlvbnMgZGF0YSBhdmFpbGFibGUgb24gc2V2ZXJhbCBibG9ja2NoYWluIGJyb3dzZXJzLgogICAgLy8vIFRoaXMgaXMgdGhlIG9ubHkgYWRkcmVzcyBmcm9tIHdoaWNoIGBzdGFydENyb3dkc2FsZWAgYW5kIGBjbG9zZUNyb3dkc2FsZWAgY2FuIGJlIGludm9jYXRlZC4KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vLyBBZG1pbiBhY2NvdW50IHVzZWQgdG8gbWFuYWdlIGFmdGVyIGNyb3dkc2FsZQogICAgYWRkcmVzcyBwdWJsaWMgYWRtaW47CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgYWNjb3VudExvY2t1cDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGFjY291bnRMb2NrdXBUaW1lOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudHM7CgogICAgLy8vICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgLy8vICAgfCAgICAgICAgICAgICAgICAgICAgICAgIFNTIFRva2VuIElzc3VlIFBsYW4gLSBGaXJzdCBSb3VuZCAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgLy8vICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgLy8vICAgfCAgVG90YWwgU2FsZSAgfCAgIEFpcmRyb3AgICAgfCAgQ29tbXVuaXR5IFJlc2VydmUgIHwgIFRlYW0gUmVzZXJ2ZSB8IFN5c3RlbSBSZXdhcmQgfAogICAgLy8vICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgLy8vICAgfCAgICAgNTAlICAgICAgfCAgICAgMTAlICAgICAgfCAgICAgICAgIDEwJSAgICAgICAgIHwgIERvbid0IElzc3VlZCB8IERvbid0IElzc3VlZCAgfAogICAgLy8vICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgLy8vICAgfCAyNTAsMDAwLDAwMCAgfCAgNTAsMDAwLDAwMCAgfCAgICAgNTAsMDAwLDAwMCAgICAgIHwgICAgICBOb25lICAgICB8ICAgICAgTm9uZSAgICAgfAogICAgLy8vICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwogICAgdWludDI1NiBpbnRlcm5hbCBjb25zdGFudCBGSVJTVF9ST1VORF9JU1NVRURfU1MgPSAzNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8vIE1heGltdW0gYW1vdW50IG9mIGZ1bmQgdG8gYmUgcmFpc2VkLCB0aGUgc2FsZSBlbmRzIG9uIHJlYWNoaW5nIHRoaXMgYW1vdW50LgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSEFSRF9DQVAgPSAxNTAwIGV0aGVyOwoKICAgIC8vLyBJdCB3aWxsIGJlIHJlZnVuZWQgaWYgY3Jvd2RzYWxlIGNhbid0IGFjaGVpdmUgdGhlIHNvZnQgY2FwLCBhbGwgZXRoZXJzIHdpbGwgYmUgcmVmdW5lZC4KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFNPRlRfQ0FQID0gMTAwMCBldGhlcjsKCiAgICAvLy8gMSBldGhlciBleGNoYW5nZSByYXRlCiAgICAvLy8gYmFzZSB0aGUgNy1kYXkgYXZlcmFnZSBjbG9zZSBwcmljZSAoRmViLjE1IHRocm91Z2ggRmViLjIxLCAyMDE4KSBvbiBDb2luTWFya2V0Q2FwLmNvbSBhdCBGZWIuMjEuCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBCQVNFX1JBVEUgPSAyMDcxOTsKCiAgICAvLy8gMSBldGhlciA9PSAxMDAwIGZpbm5leQogICAgLy8vIE1pbiBjb250cmlidXRpb246IDAuMSBldGhlcgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQ09OVFJJQlVUSU9OX01JTiA9IDEwMCBmaW5uZXk7CgogICAgLy8vIE1heCBjb250cmlidXRpb246IDUgZXRoZXIKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IENPTlRSSUJVVElPTl9NQVggPSA1MDAwIGZpbm5leTsKCiAgICAvLy8gU29sZCBTUyB0b2tlbnMgaW4gY3Jvd2RzYWxlCiAgICB1aW50MjU2IHB1YmxpYyBzb2xkU1MgPSAwOwoKICAgIHVpbnQ4WzJdIGludGVybmFsIGJvbnVzUGVyY2VudGFnZXMgPSBbCiAgICAwLAogICAgMAogICAgXTsKCiAgICB1aW50MjU2IGludGVybmFsIGNvbnN0YW50IE1BWF9QUk9NT1RJT05fU1MgPSAwOwogICAgdWludCBpbnRlcm5hbCBjb25zdGFudCBOVU1fT0ZfUEhBU0UgPSAyOwogICAgdWludCBpbnRlcm5hbCBjb25zdGFudCBCTE9DS1NfUEVSX1BIQVNFID0gODY0MDA7CgogICAgLy8vIENyb3dkc2FsZSBzdGFydCBibG9jayBudW1iZXIuCiAgICB1aW50IHB1YmxpYyBzYWxlU3RhcnRBdEJsb2NrID0gMDsKCiAgICAvLy8gQ3Jvd2RzYWxlIGVuZGVkIGJsb2NrIG51bWJlci4KICAgIHVpbnQgcHVibGljIHNhbGVFbmRBdEJsb2NrID0gMDsKCiAgICAvLy8gVW5zb2xkIHNzIHRva2VuIHdoZXRoZXIgaXNzc3VlZC4KICAgIGJvb2wgaW50ZXJuYWwgdW5zb2xkVG9rZW5Jc3N1ZWQgPSBmYWxzZTsKCiAgICAvLy8gR29hbCB3aGV0aGVyIGFjaGlldmVkCiAgICBib29sIGludGVybmFsIGlzR29hbEFjaGlldmVkID0gZmFsc2U7CgogICAgLy8vIFJlY2VpdmVkIGV0aGVyCiAgICB1aW50MjU2IGludGVybmFsIHRvdGFsRXRoUmVjZWl2ZWQgPSAwOwoKICAgIC8vLyBJc3N1ZSBldmVudCBpbmRleCBzdGFydGluZyBmcm9tIDAuCiAgICB1aW50MjU2IGludGVybmFsIGlzc3VlSW5kZXggPSAwOwoKICAgIC8qCiAgICAgKiBFVkVOVFMKICAgICAqLwogICAgLy8vIEVtaXR0ZWQgb25seSBvbmNlIGFmdGVyIHRva2VuIHNhbGUgc3RhcnRzLgogICAgZXZlbnQgU2FsZVN0YXJ0ZWQoKTsKCiAgICAvLy8gRW1pdHRlZCBvbmx5IG9uY2UgYWZ0ZXIgdG9rZW4gc2FsZSBlbmRlZCAoYWxsIHRva2VuIGlzc3VlZCkuCiAgICBldmVudCBTYWxlRW5kZWQoKTsKCiAgICAvLy8gRW1pdHRlZCB3aGVuIGEgZnVuY3Rpb24gaXMgaW52b2NhdGVkIGJ5IHVuYXV0aG9yaXplZCBhZGRyZXNzZXMuCiAgICBldmVudCBJbnZhbGlkQ2FsbGVyKGFkZHJlc3MgY2FsbGVyKTsKCiAgICAvLy8gRW1pdHRlZCB3aGVuIGEgZnVuY3Rpb24gaXMgaW52b2NhdGVkIHdpdGhvdXQgdGhlIHNwZWNpZmllZCBwcmVjb25kaXRpb25zLgogICAgLy8vIFRoaXMgZXZlbnQgd2lsbCBub3QgY29tZSBhbG9uZSB3aXRoIGFuIGV4Y2VwdGlvbi4KICAgIGV2ZW50IEludmFsaWRTdGF0ZShieXRlcyBtc2cpOwoKICAgIC8vLyBFbWl0dGVkIGZvciBlYWNoIHN1Y3Vlc3NmdWwgdG9rZW4gcHVyY2hhc2UuCiAgICBldmVudCBJc3N1ZSh1aW50IGlzc3VlSW5kZXgsIGFkZHJlc3MgYWRkciwgdWludCBldGhBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQpOwoKICAgIC8vLyBFbWl0dGVkIGlmIHRoZSB0b2tlbiBzYWxlIHN1Y2NlZWRlZC4KICAgIGV2ZW50IFNhbGVTdWNjZWVkZWQoKTsKCiAgICAvLy8gRW1pdHRlZCBpZiB0aGUgdG9rZW4gc2FsZSBmYWlsZWQuCiAgICAvLy8gV2hlbiB0b2tlbiBzYWxlIGZhaWxlZCwgYWxsIEV0aGVyIHdpbGwgYmUgcmV0dXJuIHRvIHRoZSBvcmlnaW5hbCBwdXJjaGFzaW5nCiAgICAvLy8gYWRkcmVzcyB3aXRoIGEgbWlub3IgZGVkdWN0aW9uIG9mIHRyYW5zYWN0aW9uIGZlZe+8iGdhcykKICAgIGV2ZW50IFNhbGVGYWlsZWQoKTsKCiAgICAvLyBUaGlzIG5vdGlmaWVzIGNsaWVudHMgYWJvdXQgdGhlIGFtb3VudCB0byB0cmFuc2ZlcgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgLy8gVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgdG8gYXBwcm92ZQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7CgogICAgLy8gVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgYnVybnQKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIGlzTm90RnJvemVuIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pOwogICAgICAgIC8vIFNhdmUgdGhpcyBmb3IgYW4gYXNzZXJ0aW9uIGluIHRoZSBmdXR1cmUKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlc1tfZnJvbV0gKyBiYWxhbmNlc1tfdG9dOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VzW19mcm9tXSArIGJhbGFuY2VzW190b10gPT0gcHJldmlvdXNCYWxhbmNlcyk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF90cmFuc2ZlclRva2Vuc1dpdGhEZWNpbWFsIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3RyYW5zZmVyVG9rZW5zV2l0aERlY2ltYWwpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3RyYW5zZmVyVG9rZW5zV2l0aERlY2ltYWwpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgICogQHBhcmFtIF90cmFuc2ZlclRva2Vuc1dpdGhEZWNpbWFsIHVpbnQgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF90cmFuc2ZlclRva2Vuc1dpdGhEZWNpbWFsKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdHJhbnNmZXJUb2tlbnNXaXRoRGVjaW1hbCA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdHJhbnNmZXJUb2tlbnNXaXRoRGVjaW1hbDsKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3RyYW5zZmVyVG9rZW5zV2l0aERlY2ltYWwpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICogQHJldHVybiBBbiB1aW50IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX2FwcHJvdmVUb2tlbnNXaXRoRGVjaW1hbGAgdG9rZW5zIGluIHlvdXIgYmVoYWxmCiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgICAqIEBwYXJhbSBfYXBwcm92ZVRva2Vuc1dpdGhEZWNpbWFsIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYXBwcm92ZVRva2Vuc1dpdGhEZWNpbWFsKSBwdWJsaWMgaXNOb3RGcm96ZW4gcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYXBwcm92ZVRva2Vuc1dpdGhEZWNpbWFsOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYXBwcm92ZVRva2Vuc1dpdGhEZWNpbWFsKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhbiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgICogQHJldHVybiBBIHVpbnQgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLyoqCiAgICAgICAqIERlc3Ryb3kgdG9rZW5zCiAgICAgICAqIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseQogICAgICAgKgogICAgICAgKiBAcGFyYW0gX2J1cm5lZFRva2Vuc1dpdGhEZWNpbWFsIHRoZSBhbW91bnQgb2YgcmVzZXJ2ZSB0b2tlbnMuICEhSU1QT1JUQU5UIGlzIDE4IERFQ0lNQUxTCiAgICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF9idXJuZWRUb2tlbnNXaXRoRGVjaW1hbCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2J1cm5lZFRva2Vuc1dpdGhEZWNpbWFsKTsgICAvLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2J1cm5lZFRva2Vuc1dpdGhEZWNpbWFsOyAgICAgICAgICAgIC8vLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICB0b3RhbFN1cHBseSAtPSBfYnVybmVkVG9rZW5zV2l0aERlY2ltYWw7ICAgICAgICAgICAgICAgICAgICAgIC8vLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfYnVybmVkVG9rZW5zV2l0aERlY2ltYWwpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogRGVzdHJveSB0b2tlbnMgZnJvbSBvdGhlciBhY2NvdW50CiAgICAgKiBSZW1vdmUgYF92YWx1ZWAgdG9rZW5zIGZyb20gdGhlIHN5c3RlbSBpcnJldmVyc2libHkgb24gYmVoYWxmIG9mIGBfZnJvbWAuCiAgICAgKgogICAgICogQHBhcmFtIF9mcm9tIHRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfYnVybmVkVG9rZW5zV2l0aERlY2ltYWwgdGhlIGFtb3VudCBvZiByZXNlcnZlIHRva2Vucy4gISFJTVBPUlRBTlQgaXMgMTggREVDSU1BTFMKICAgICAqLwogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfYnVybmVkVG9rZW5zV2l0aERlY2ltYWwpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfYnVybmVkVG9rZW5zV2l0aERlY2ltYWwpOyAgICAgICAgICAgICAgICAvLy8gQ2hlY2sgaWYgdGhlIHRhcmdldGVkIGJhbGFuY2UgaXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShfYnVybmVkVG9rZW5zV2l0aERlY2ltYWwgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAvLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9idXJuZWRUb2tlbnNXaXRoRGVjaW1hbDsgICAgICAgICAgICAgICAgICAgICAgICAvLy8gU3VidHJhY3QgZnJvbSB0aGUgdGFyZ2V0ZWQgYmFsYW5jZQogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9idXJuZWRUb2tlbnNXaXRoRGVjaW1hbDsgICAgICAgICAgICAgLy8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcidzIGFsbG93YW5jZQogICAgICAgIHRvdGFsU3VwcGx5IC09IF9idXJuZWRUb2tlbnNXaXRoRGVjaW1hbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFVwZGF0ZSB0b3RhbFN1cHBseQogICAgICAgIEJ1cm4oX2Zyb20sIF9idXJuZWRUb2tlbnNXaXRoRGVjaW1hbCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoKICAgICAqIE1PRElGSUVSUwogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGJlZm9yZVN0YXJ0IHsKICAgICAgICByZXF1aXJlKCFzYWxlU3RhcnRlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGluUHJvZ3Jlc3MgewogICAgICAgIHJlcXVpcmUoc2FsZVN0YXJ0ZWQoKSAmJiAhc2FsZUVuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgYWZ0ZXJFbmQgewogICAgICAgIHJlcXVpcmUoc2FsZUVuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNOb3RGcm96ZW4gewogICAgICAgIHJlcXVpcmUoIGZyb3plbkFjY291bnRzW21zZy5zZW5kZXJdICE9IHRydWUgJiYgbm93ID4gYWNjb3VudExvY2t1cFRpbWVbbXNnLnNlbmRlcl0gKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQ09OU1RSVUNUT1IKICAgICAqCiAgICAgKiBAZGV2IEluaXRpYWxpemUgdGhlIFNoYXJkZXIgVG9rZW4KICAgICAqLwogICAgZnVuY3Rpb24gU2hhcmRlclRva2VuKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYWRtaW4gPSBtc2cuc2VuZGVyOwogICAgICAgIHRvdGFsU3VwcGx5ID0gRklSU1RfUk9VTkRfSVNTVUVEX1NTOwogICAgfQoKICAgIC8qCiAgICAgKiBQVUJMSUMgRlVOQ1RJT05TCiAgICAgKi8KCiAgICAvLy9AZGV2IFNldCBhZG1pbiBhY2NvdW50LgogICAgZnVuY3Rpb24gc2V0QWRtaW4oYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICBhZG1pbj1fYWRkcmVzczsKICAgIH0KCiAgICAvLy9AZGV2IFNldCBmcm96ZW4gc3RhdHVzIG9mIGFjY291bnQuCiAgICBmdW5jdGlvbiBzZXRBY2NvdW50RnJvemVuU3RhdHVzKGFkZHJlc3MgX2FkZHJlc3MsIGJvb2wgX2Zyb3plblN0YXR1cykgcHVibGljIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZSh1bnNvbGRUb2tlbklzc3VlZCk7CiAgICAgICAgZnJvemVuQWNjb3VudHNbX2FkZHJlc3NdID0gX2Zyb3plblN0YXR1czsKICAgIH0KCiAgICAvLy8gQGRldiBMb2NrdXAgYWNjb3VudCB0aWxsIHRoZSBkYXRlLiBDYW4ndCBsb2NrdXAgYWdhaW4gd2hlbiB0aGlzIGFjY291bnQgbG9ja2VkIGFscmVhZHkuCiAgICAvLy8gMSB5ZWFyID0gMzE1MzYwMDAgc2Vjb25kcwogICAgLy8vIDAuNSB5ZWFyID0gMTU3NjgwMDAgc2Vjb25kcwogICAgZnVuY3Rpb24gbG9ja3VwQWNjb3VudChhZGRyZXNzIF9hZGRyZXNzLCB1aW50IF9sb2NrdXBTZWNvbmRzKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKChhY2NvdW50TG9ja3VwW19hZGRyZXNzXSAmJiBub3cgPiBhY2NvdW50TG9ja3VwVGltZVtfYWRkcmVzc10pIHx8ICFhY2NvdW50TG9ja3VwW19hZGRyZXNzXSk7CgogICAgICAgIC8vIGZyb3plbiB0aW1lID0gbm93ICsgX2xvY2t1cFNlY29uZHMKICAgICAgICBhY2NvdW50TG9ja3VwVGltZVtfYWRkcmVzc10gPSBub3cgKyBfbG9ja3VwU2Vjb25kczsKICAgICAgICBhY2NvdW50TG9ja3VwW19hZGRyZXNzXSA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgU3RhcnQgdGhlIGNyb3dkc2FsZS4KICAgIGZ1bmN0aW9uIHN0YXJ0Q3Jvd2RzYWxlKHVpbnQgX3NhbGVTdGFydEF0QmxvY2spIHB1YmxpYyBvbmx5T3duZXIgYmVmb3JlU3RhcnQgewogICAgICAgIHJlcXVpcmUoX3NhbGVTdGFydEF0QmxvY2sgPiBibG9jay5udW1iZXIpOwogICAgICAgIHNhbGVTdGFydEF0QmxvY2sgPSBfc2FsZVN0YXJ0QXRCbG9jazsKICAgICAgICBTYWxlU3RhcnRlZCgpOwogICAgfQoKICAgIC8vLyBAZGV2IENsb3NlIHRoZSBjcm93ZHNhbGUgYW5kIGlzc3VlIHVuc29sZCB0b2tlbnMgdG8gYG93bmVyYCBhZGRyZXNzLgogICAgZnVuY3Rpb24gY2xvc2VDcm93ZHNhbGUoKSBwdWJsaWMgb25seU93bmVyIGFmdGVyRW5kIHsKICAgICAgICByZXF1aXJlKCF1bnNvbGRUb2tlbklzc3VlZCk7CgogICAgICAgIGlmICh0b3RhbEV0aFJlY2VpdmVkID49IFNPRlRfQ0FQKSB7CiAgICAgICAgICAgIHNhbGVFbmRBdEJsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgICAgICBpc3N1ZVVuc29sZFRva2VuKCk7CiAgICAgICAgICAgIFNhbGVTdWNjZWVkZWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBTYWxlRmFpbGVkKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IGdvYWwgYWNoaWV2ZWQgYWhlYWQgb2YgdGltZQogICAgZnVuY3Rpb24gZ29hbEFjaGlldmVkKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSghaXNHb2FsQWNoaWV2ZWQgJiYgc29mdENhcFJlYWNoZWQoKSk7CiAgICAgICAgaXNHb2FsQWNoaWV2ZWQgPSB0cnVlOwogICAgICAgIGNsb3NlQ3Jvd2RzYWxlKCk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgY3VycmVudCBwcmljZS4KICAgIGZ1bmN0aW9uIHByaWNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG9rZW5zKSB7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVUb2tlbkFtb3VudCgxIGV0aGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBUaGlzIGRlZmF1bHQgZnVuY3Rpb24gYWxsb3dzIHRva2VuIHRvIGJlIHB1cmNoYXNlZCBieSBkaXJlY3RseQogICAgLy8vIHNlbmRpbmcgZXRoZXIgdG8gdGhpcyBzbWFydCBjb250cmFjdC4KICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpc3N1ZVRva2VuKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IElzc3VlIHRva2VuIGJhc2VkIG9uIGV0aGVyIHJlY2VpdmVkLgogICAgLy8vIEBwYXJhbSByZWNpcGllbnQgQWRkcmVzcyB0aGF0IG5ld2x5IGlzc3VlZCB0b2tlbiB3aWxsIGJlIHNlbnQgdG8uCiAgICBmdW5jdGlvbiBpc3N1ZVRva2VuKGFkZHJlc3MgcmVjaXBpZW50KSBwdWJsaWMgcGF5YWJsZSBpblByb2dyZXNzIHsKICAgICAgICAvLyBQZXJzb25hbCBjYXAgY2hlY2sKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW3JlY2lwaWVudF0uZGl2KEJBU0VfUkFURSkuYWRkKG1zZy52YWx1ZSkgPD0gQ09OVFJJQlVUSU9OX01BWCk7CiAgICAgICAgLy8gQ29udHJpYnV0aW9uIGNhcCBjaGVjawogICAgICAgIHJlcXVpcmUoQ09OVFJJQlVUSU9OX01JTiA8PSBtc2cudmFsdWUgJiYgbXNnLnZhbHVlIDw9IENPTlRSSUJVVElPTl9NQVgpOwoKICAgICAgICB1aW50IHRva2VucyA9IGNvbXB1dGVUb2tlbkFtb3VudChtc2cudmFsdWUpOwoKICAgICAgICB0b3RhbEV0aFJlY2VpdmVkID0gdG90YWxFdGhSZWNlaXZlZC5hZGQobXNnLnZhbHVlKTsKICAgICAgICBzb2xkU1MgPSBzb2xkU1MuYWRkKHRva2Vucyk7CgogICAgICAgIGJhbGFuY2VzW3JlY2lwaWVudF0gPSBiYWxhbmNlc1tyZWNpcGllbnRdLmFkZCh0b2tlbnMpOwogICAgICAgIElzc3VlKGlzc3VlSW5kZXgrKyxyZWNpcGllbnQsbXNnLnZhbHVlLHRva2Vucyk7CgogICAgICAgIHJlcXVpcmUob3duZXIuc2VuZChtc2cudmFsdWUpKTsKICAgIH0KCiAgICAvLy8gQGRldiBJc3N1ZSB0b2tlbiBmb3IgcmVzZXJ2ZS4KICAgIC8vLyBAcGFyYW0gcmVjaXBpZW50IEFkZHJlc3MgdGhhdCBuZXdseSBpc3N1ZWQgcmVzZXJ2ZSB0b2tlbiB3aWxsIGJlIHNlbnQgdG8uCiAgICAvLy8gQHBhcmFtIF9pc3N1ZVRva2Vuc1dpdGhEZWNpbWFsIHRoZSBhbW91bnQgb2YgcmVzZXJ2ZSB0b2tlbnMuICEhSU1QT1JUQU5UIGlzIDE4IERFQ0lNQUxTCiAgICBmdW5jdGlvbiBpc3N1ZVJlc2VydmVUb2tlbihhZGRyZXNzIHJlY2lwaWVudCwgdWludDI1NiBfaXNzdWVUb2tlbnNXaXRoRGVjaW1hbCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IGJhbGFuY2VzW3JlY2lwaWVudF0uYWRkKF9pc3N1ZVRva2Vuc1dpdGhEZWNpbWFsKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfaXNzdWVUb2tlbnNXaXRoRGVjaW1hbCk7CiAgICAgICAgSXNzdWUoaXNzdWVJbmRleCsrLHJlY2lwaWVudCwwLF9pc3N1ZVRva2Vuc1dpdGhEZWNpbWFsKTsKICAgIH0KCiAgICAvKgogICAgICogSU5URVJOQUwgRlVOQ1RJT05TCiAgICAgKi8KICAgIC8vLyBAZGV2IENvbXB1dGUgdGhlIGFtb3VudCBvZiBTUyB0b2tlbiB0aGF0IGNhbiBiZSBwdXJjaGFzZWQuCiAgICAvLy8gQHBhcmFtIGV0aEFtb3VudCBBbW91bnQgb2YgRXRoZXIgdG8gcHVyY2hhc2UgU1MuCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgU1MgdG9rZW4gdG8gcHVyY2hhc2UKICAgIGZ1bmN0aW9uIGNvbXB1dGVUb2tlbkFtb3VudCh1aW50IGV0aEFtb3VudCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCB0b2tlbnMpIHsKICAgICAgICB1aW50IHBoYXNlID0gKGJsb2NrLm51bWJlciAtIHNhbGVTdGFydEF0QmxvY2spLmRpdihCTE9DS1NfUEVSX1BIQVNFKTsKCiAgICAgICAgLy8gQSBzYWZlIGNoZWNrCiAgICAgICAgaWYgKHBoYXNlID49IGJvbnVzUGVyY2VudGFnZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIHBoYXNlID0gYm9udXNQZXJjZW50YWdlcy5sZW5ndGggLSAxOwogICAgICAgIH0KCiAgICAgICAgdWludCB0b2tlbkJhc2UgPSBldGhBbW91bnQubXVsKEJBU0VfUkFURSk7CgogICAgICAgIC8vQ2hlY2sgcHJvbW90aW9uIHN1cHBseSBhbmQgcGhhc2UgYm9udXMKICAgICAgICB1aW50IHRva2VuQm9udXMgPSAwOwogICAgICAgIGlmKHRvdGFsRXRoUmVjZWl2ZWQgKiBCQVNFX1JBVEUgPCBNQVhfUFJPTU9USU9OX1NTKSB7CiAgICAgICAgICAgIHRva2VuQm9udXMgPSB0b2tlbkJhc2UubXVsKGJvbnVzUGVyY2VudGFnZXNbcGhhc2VdKS5kaXYoMTAwKTsKICAgICAgICB9CgogICAgICAgIHRva2VucyA9IHRva2VuQmFzZS5hZGQodG9rZW5Cb251cyk7CiAgICB9CgogICAgLy8vIEBkZXYgSXNzdWUgdW5zb2xkIHRva2VuIHRvIGBvd25lcmAgYWRkcmVzcy4KICAgIGZ1bmN0aW9uIGlzc3VlVW5zb2xkVG9rZW4oKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHVuc29sZFRva2VuSXNzdWVkKSB7CiAgICAgICAgICAgIEludmFsaWRTdGF0ZSgiVW5zb2xkIHRva2VuIGhhcyBiZWVuIGlzc3VlZCBhbHJlYWR5Iik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gQWRkIGFub3RoZXIgc2FmZSBndWFyZAogICAgICAgICAgICByZXF1aXJlKHNvbGRTUyA+IDApOwoKICAgICAgICAgICAgdWludDI1NiB1bnNvbGRTUyA9IHRvdGFsU3VwcGx5LnN1Yihzb2xkU1MpOwogICAgICAgICAgICAvLyBJc3N1ZSAndW5zb2xkVG9rZW4nIHRvIHRoZSBhZG1pbiBhY2NvdW50LgogICAgICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uYWRkKHVuc29sZFNTKTsKICAgICAgICAgICAgSXNzdWUoaXNzdWVJbmRleCsrLG93bmVyLDAsdW5zb2xkU1MpOwoKICAgICAgICAgICAgdW5zb2xkVG9rZW5Jc3N1ZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHNhbGUgaGFzIHN0YXJ0ZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgIGZ1bmN0aW9uIHNhbGVTdGFydGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKHNhbGVTdGFydEF0QmxvY2sgPiAwICYmIGJsb2NrLm51bWJlciA+PSBzYWxlU3RhcnRBdEJsb2NrKTsKICAgIH0KCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHNhbGUgaGFzIGVuZGVkLCBmYWxzZSBvdGhlcndpc2UuCiAgICAvLy8gU2FsZSBlbmRlZCBpbjogYSkgZW5kIHRpbWUgb2YgY3Jvd2RzYWxlIHJlYWNoZWQsIGIpIGhhcmQgY2FwIHJlYWNoZWQsIGMpIGdvYWwgYWNoaWV2ZWQgYWhlYWQgb2YgdGltZQogICAgZnVuY3Rpb24gc2FsZUVuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc2FsZVN0YXJ0QXRCbG9jayA+IDAgJiYgKHNhbGVEdWUoKSB8fCBoYXJkQ2FwUmVhY2hlZCgpIHx8IGlzR29hbEFjaGlldmVkKTsKICAgIH0KCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHNhbGUgaXMgZHVlIHdoZW4gdGhlIGxhc3QgcGhhc2UgaXMgZmluaXNoZWQuCiAgICBmdW5jdGlvbiBzYWxlRHVlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBibG9jay5udW1iZXIgPj0gc2FsZVN0YXJ0QXRCbG9jayArIEJMT0NLU19QRVJfUEhBU0UgKiBOVU1fT0ZfUEhBU0U7CiAgICB9CgogICAgLy8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgaGFyZCBjYXAgaXMgcmVhY2hlZC4KICAgIGZ1bmN0aW9uIGhhcmRDYXBSZWFjaGVkKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b3RhbEV0aFJlY2VpdmVkID49IEhBUkRfQ0FQOwogICAgfQoKICAgIC8vLyBAcmV0dXJuIHRydWUgaWYgdGhlIHNvZnQgY2FwIGlzIHJlYWNoZWQuCiAgICBmdW5jdGlvbiBzb2Z0Q2FwUmVhY2hlZCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gdG90YWxFdGhSZWNlaXZlZCA+PSBTT0ZUX0NBUDsKICAgIH0KfQ=='.
	

]
