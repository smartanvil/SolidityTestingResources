Class {
	#name : #SRTc6e095f5fB53339D8F4C7f576ccD37bE05E5B67E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc6e095f5fB53339D8F4C7f576ccD37bE05E5B67E >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CiAKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMCB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSlwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKXB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQogCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KIAogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CiAKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgCn0KIAovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMCB7CiAgICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIAogICAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KIAogICAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuIAogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKXB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KIAp9CiAKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBCYXNpY1Rva2VuIHsKIAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogCiAgICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSlwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKIAogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KIAogICAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpcHVibGljIHJldHVybnMgKGJvb2wpIHsKIAogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KIAogICAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcilwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIAp9CiAKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKIAogICAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKXB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogCiAgICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogCiAgICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKXB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7ICAgICAgCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KIAp9CiAKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgTWludEZpbmlzaGVkKCk7CiAKICAgIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwogCiAgICBtb2RpZmllciBjYW5NaW50KCkgewogICAgICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICAgICAgXzsKICAgIH0KIAogICAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2lldmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KXB1YmxpYyBvbmx5T3duZXIgY2FuTWludCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2ZlcigwLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogCiAgICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogICAgZnVuY3Rpb24gZmluaXNoTWludGluZygpcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8qZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHNrb2xrbykgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHNrb2xrby5tdWwoMTAwMDAwMDAwMDAwMDAwMDAwMCkpOwogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bc3BlbmRlcl0gPSBza29sa287CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgc3BlbmRlciwgc2tvbGtvKTsKICAgICAgICBDcm93ZHNhbGUoc3BlbmRlcikucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIHNrb2xrbywgYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgKi8KCn0KIApjb250cmFjdCBNdWx0aUxldmVsVG9rZW4gaXMgTWludGFibGVUb2tlbiB7CiAgICAKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNdWx0aS1sZXZlbCB0b2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJNTFQiOwogICAgdWludDMyIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgCn0KIApjb250cmFjdCBDcm93ZHNhbGUgaXMgT3duYWJsZXsKICAgIAogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICAKICAgIGFkZHJlc3MgbXVsdGlzaWc7CiAgICB1aW50IG11bHRpc2lnUGVyY2VudDsKICAgIGFkZHJlc3MgYm91bnR5OwogICAgdWludCBib3VudHlQZXJjZW50OwogCiAgICBNdWx0aUxldmVsVG9rZW4gcHVibGljIHRva2VuID0gbmV3IE11bHRpTGV2ZWxUb2tlbigpOwogICAgdWludCByYXRlOwogICAgdWludCB0b2tlbnM7CiAgICB1aW50IHZhbHVlOwogICAgCiAgICB1aW50IHRpZXI7CiAgICB1aW50IGk7CiAgICB1aW50IGE9MTsKICAgIHVpbnQgYj0xOwogICAgdWludCBjPTE7CiAgICB1aW50IGQ9MTsKICAgIHVpbnQgZT0xOwogICAgdWludCBwYXJlbnQ7CiAgICB1aW50MjU2IHBhcmVudE1vbmV5OwogICAgYWRkcmVzcyB3aG9tOwogICAgbWFwcGluZyAodWludCA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkpdHJlZTsKICAgIG1hcHBpbmcgKHVpbnQgPT4gbWFwcGluZyh1aW50ID0+IGFkZHJlc3MpKSBvcmRlcjsKIAogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKClwdWJsaWMgewogICAgICAgIG11bHRpc2lnID0gMHhCNTJFMjk2Yjc2ZTdEYTgzQURFMDVDMTQ1OEFFRDUxRDM5MTE2MDNmOwogICAgICAgIG11bHRpc2lnUGVyY2VudCA9IDU7CiAgICAgICAgYm91bnR5ID0gMHgxRjJEMzc2N0Q3MEZBNTk1NTBmMEJDNjA4NjA3YzMwQUFiOWZEYTA2OwogICAgICAgIGJvdW50eVBlcmNlbnQgPSA1OwogICAgICAgIHJhdGUgPSAxMDAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgCiAgICB9CiAKICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMoYm9vbCkgIHsKICAgICAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGUoKSBwdWJsaWN7CiAgICAgICAgCiAgICAgICAgZm9yIChpPTE7aTw9MTA7aSsrKXsKICAgICAgICAgICAgd2hpbGUgKHBhcmVudCA+MSl7CiAgICAgICAgICAgICAgICBpZiAocGFyZW50JTM9PTApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50PXBhcmVudC5kaXYoMyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9tID0gb3JkZXJbdGllcl1bcGFyZW50XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLm1pbnQod2hvbSxwYXJlbnRNb25leSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwYXJlbnQtMSklMz09MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ9KHBhcmVudC0xKS8zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbSA9IG9yZGVyW3RpZXJdW3BhcmVudF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5taW50KHdob20scGFyZW50TW9uZXkpOyAKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudD0ocGFyZW50KzEpLzM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9tID0gb3JkZXJbdGllcl1bcGFyZW50XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLm1pbnQod2hvbSxwYXJlbnRNb25leSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgIH0gICAgCiAgICAKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VucygpcHVibGljICBwYXlhYmxlIHsKICAgICAgICAKICAgICAgICB1aW50IF9tdWx0aXNpZyA9IG1zZy52YWx1ZS5tdWwobXVsdGlzaWdQZXJjZW50KS5kaXYoMTAwKTsKICAgICAgICB1aW50IF9ib3VudHkgPSBtc2cudmFsdWUubXVsKGJvdW50eVBlcmNlbnQpLmRpdigxMDApOwogICAgICAgIHRva2VucyA9IHJhdGUubXVsKG1zZy52YWx1ZSkuZGl2KDEgZXRoZXIpOwogICAgICAgIHRva2VucyA9IHRva2Vucy5tdWwoNTUpLmRpdigxMDApOwogICAgICAgIHBhcmVudE1vbmV5ID0gbXNnLnZhbHVlLm11bCgzNSkuZGl2KDEwKTsKICAgICAgICAKICAgICAgICBpZiAobXNnLnZhbHVlID49IDUwMDAwMDAwMDAwMDAwMDAwICYmIG1zZy52YWx1ZSA8IDEwMDAwMDAwMDAwMDAwMDAwMCl7CiAgICAgICAgICAgIHRpZXI9MTsKICAgICAgICAgICAgdHJlZVt0aWVyXVttc2cuc2VuZGVyXT1hOwogICAgICAgICAgICBvcmRlclt0aWVyXVthXT1tc2cuc2VuZGVyOwogICAgICAgICAgICBwYXJlbnQgPSBhOwogICAgICAgICAgICBhKz0xOwogICAgICAgICAgICBkaXN0cmlidXRlKCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKG1zZy52YWx1ZSA+PSAxMDAwMDAwMDAwMDAwMDAwMDAgJiYgbXNnLnZhbHVlIDwgMjAwMDAwMDAwMDAwMDAwMDAwKXsKICAgICAgICAgICAgdGllcj0yOwogICAgICAgICAgICB0cmVlW3RpZXJdW21zZy5zZW5kZXJdPWI7CiAgICAgICAgICAgIG9yZGVyW3RpZXJdW2JdPW1zZy5zZW5kZXI7CiAgICAgICAgICAgIHBhcmVudCA9IGI7CiAgICAgICAgICAgIGIrPTE7CiAgICAgICAgICAgIGRpc3RyaWJ1dGUoKTsKICAgICAgICB9ICAgIAogICAgICAgIGVsc2UgaWYgKG1zZy52YWx1ZSA+PSAyMDAwMDAwMDAwMDAwMDAwMDAgJiYgbXNnLnZhbHVlIDwgNTAwMDAwMDAwMDAwMDAwMDAwKXsKICAgICAgICAgICAgdGllcj0zOwogICAgICAgICAgICB0cmVlW3RpZXJdW21zZy5zZW5kZXJdPWM7CiAgICAgICAgICAgIG9yZGVyW3RpZXJdW2NdPW1zZy5zZW5kZXI7CiAgICAgICAgICAgIHBhcmVudCA9IGM7CiAgICAgICAgICAgIGMrPTE7CiAgICAgICAgICAgIGRpc3RyaWJ1dGUoKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZihtc2cudmFsdWUgPj0gNTAwMDAwMDAwMDAwMDAwMDAwICYmIG1zZy52YWx1ZSA8IDEwMDAwMDAwMDAwMDAwMDAwMDApewogICAgICAgICAgICB0aWVyPTQ7CiAgICAgICAgICAgIHRyZWVbdGllcl1bbXNnLnNlbmRlcl09ZDsKICAgICAgICAgICAgb3JkZXJbdGllcl1bZF09bXNnLnNlbmRlcjsKICAgICAgICAgICAgcGFyZW50ID0gZDsKICAgICAgICAgICAgZCs9MTsKICAgICAgICAgICAgZGlzdHJpYnV0ZSgpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKG1zZy52YWx1ZSA+PSAxMDAwMDAwMDAwMDAwMDAwMDAwKXsKICAgICAgICAgICAgdGllcj01OwogICAgICAgICAgICB0cmVlW3RpZXJdW21zZy5zZW5kZXJdPWU7CiAgICAgICAgICAgIG9yZGVyW3RpZXJdW2VdPW1zZy5zZW5kZXI7CiAgICAgICAgICAgIHBhcmVudCA9IGU7CiAgICAgICAgICAgIGUrPTE7CiAgICAgICAgICAgIGRpc3RyaWJ1dGUoKTsKICAgICAgICB9CiAgICAgICAgdG9rZW4ubWludChtc2cuc2VuZGVyLCB0b2tlbnMpOwogICAgICAgIG11bHRpc2lnLnRyYW5zZmVyKF9tdWx0aXNpZyk7CiAgICAgICAgYm91bnR5LnRyYW5zZmVyKF9ib3VudHkpOwogICAgfQogICAgCiAgICAvKmFkZHJlc3MgX3Rva2VuQWRkcmVzczsKICAgIGZ1bmN0aW9uIEdldFRva2VuQWRkcmVzcyAoYWRkcmVzcyBHZXQpIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgICAgX3Rva2VuQWRkcmVzcz1HZXQ7CiAgICB9Ki8KICAgIAogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgZnJvbSwgdWludCBza29sa28gLyosIGFkZHJlc3MgdG9rZW5BZGRyZXNzKi8pIHB1YmxpYyBwYXlhYmxlIG9ubHlPd25lcnsKICAgICAvLyAgIHJlcXVpcmUgKHRva2VuQWRkcmVzcyA9PSBfdG9rZW5BZGRyZXNzKTsKICAgICAgICBmcm9tLnRyYW5zZmVyKHNrb2xrby5tdWwoMTAwMDAwMDAwMDAwMCkpOwogICAgfQogICAgCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGNyZWF0ZVRva2VucygpOwogICAgfQp9'.
	

]
