Class {
	#name : #SRT28e5fa624745b7c67cf1e8eb6291029ae07e012d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT28e5fa624745b7c67cf1e8eb6291029ae07e012d >> base64 [
	^ ''.
	

]
