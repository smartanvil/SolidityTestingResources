Class {
	#name : #SRT82871e14Abf646925166a7D3A88E99c225A158B3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82871e14Abf646925166a7D3A88E99c225A158B3 >> base64 [
	^ ''.
	

]
