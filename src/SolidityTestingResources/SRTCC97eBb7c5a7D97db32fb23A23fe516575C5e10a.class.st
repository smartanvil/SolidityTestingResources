Class {
	#name : #SRTCC97eBb7c5a7D97db32fb23A23fe516575C5e10a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTCC97eBb7c5a7D97db32fb23A23fe516575C5e10a >> base64 [
	^ 'LyoKVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE5ldXJvREFPIENvbnRyYWN0LgoKVGhlIE5ldXJvREFPIENvbnRyYWN0IGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgptb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgbGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkCmJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgpUaGUgTmV1cm9EQU8gQ29udHJhY3QgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlCkdOVSBsZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIGxlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCmFsb25nIHdpdGggdGhlIE5ldXJvREFPIENvbnRyYWN0LiBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgpAYXV0aG9yIElseWEgU3ZpcmluIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImQ2YmZmOGE1YTBiZmE0YmZiODk2YjhiOWE0YjJiN2EwYmZiOGIyZjhhNGEzIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KCklGIFlPVSBBUkUgRU5KT1lFRCBJVCBET05BVEUgVE8gMHgzQWQzOEQxMDYwZDFjMzUwYUYyOTY4NUIyYjhFYzNlREU1Mjc0NTJCICEgOikKKi8KCgpwcmFnbWEgc29saWRpdHkgXjAuNC4wOwoKY29udHJhY3Qgb3duZWQgewoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSBwYXlhYmxlIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShvd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9vd25lciAhPSAwKTsKICAgICAgICBuZXdPd25lciA9IF9vd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29uZmlybU93bmVyKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgZGVsZXRlIG5ld093bmVyOwogICAgfQp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7Cn0KCmNvbnRyYWN0IE1hbnVhbE1pZ3JhdGlvbiBpcyBvd25lZCwgRVJDMjAgewoKICAgIHVpbnQgICAgcHVibGljIGZyZWV6ZWRNb21lbnQ7CiAgICBhZGRyZXNzIHB1YmxpYyBvcmlnaW5hbDsKCiAgICBtb2RpZmllciBlbmFibGVkIHsKICAgICAgICByZXF1aXJlKG9yaWdpbmFsID09IDApOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIHN0cnVjdCBTcGVjaWFsVG9rZW5Ib2xkZXIgewogICAgICAgIHVpbnQgbGltaXQ7CiAgICAgICAgYm9vbCBpc1RlYW07CiAgICB9CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IFNwZWNpYWxUb2tlbkhvbGRlcikgcHVibGljIHNwZWNpYWxzOwoKICAgIHN0cnVjdCBUb2tlbkhvbGRlciB7CiAgICAgICAgdWludCBiYWxhbmNlOwogICAgICAgIHVpbnQgYmFsYW5jZUJlZm9yZVVwZGF0ZTsKICAgICAgICB1aW50IGJhbGFuY2VVcGRhdGVUaW1lOwogICAgfQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBUb2tlbkhvbGRlcikgcHVibGljIGhvbGRlcnM7CgogICAgZnVuY3Rpb24gTWFudWFsTWlncmF0aW9uKGFkZHJlc3MgX29yaWdpbmFsKSBwYXlhYmxlIG93bmVkKCkgewogICAgICAgIG9yaWdpbmFsID0gX29yaWdpbmFsOwogICAgICAgIHRvdGFsU3VwcGx5ID0gRVJDMjAob3JpZ2luYWwpLnRvdGFsU3VwcGx5KCk7CiAgICAgICAgaG9sZGVyc1t0aGlzXS5iYWxhbmNlID0gRVJDMjAob3JpZ2luYWwpLmJhbGFuY2VPZihvcmlnaW5hbCk7CiAgICAgICAgaG9sZGVyc1tvcmlnaW5hbF0uYmFsYW5jZSA9IHRvdGFsU3VwcGx5IC0gaG9sZGVyc1t0aGlzXS5iYWxhbmNlOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIG9yaWdpbmFsLCBob2xkZXJzW29yaWdpbmFsXS5iYWxhbmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaWdyYXRlTWFudWFsKGFkZHJlc3MgX3dobywgYm9vbCBfaXNUZWFtKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUob3JpZ2luYWwgIT0gMCk7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW193aG9dLmJhbGFuY2UgPT0gMCk7CiAgICAgICAgdWludCBiYWxhbmNlID0gRVJDMjAob3JpZ2luYWwpLmJhbGFuY2VPZihfd2hvKTsKICAgICAgICBob2xkZXJzW193aG9dLmJhbGFuY2UgPSBiYWxhbmNlOwogICAgICAgIHNwZWNpYWxzW193aG9dID0gU3BlY2lhbFRva2VuSG9sZGVyKHtsaW1pdDogYmFsYW5jZSwgaXNUZWFtOl9pc1RlYW19KTsKICAgICAgICBob2xkZXJzW29yaWdpbmFsXS5iYWxhbmNlIC09IGJhbGFuY2U7CiAgICAgICAgVHJhbnNmZXIob3JpZ2luYWwsIF93aG8sIGJhbGFuY2UpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZWFsTWFudWFsTWlncmF0aW9uKGJvb2wgZm9yY2UpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShmb3JjZSB8fCBob2xkZXJzW29yaWdpbmFsXS5iYWxhbmNlID09IDApOwogICAgICAgIGRlbGV0ZSBvcmlnaW5hbDsKICAgIH0KCiAgICBmdW5jdGlvbiBiZWZvcmVCYWxhbmNlQ2hhbmdlcyhhZGRyZXNzIF93aG8pIGludGVybmFsIHsKICAgICAgICBpZiAoaG9sZGVyc1tfd2hvXS5iYWxhbmNlVXBkYXRlVGltZSA8PSBmcmVlemVkTW9tZW50KSB7CiAgICAgICAgICAgIGhvbGRlcnNbX3dob10uYmFsYW5jZVVwZGF0ZVRpbWUgPSBub3c7CiAgICAgICAgICAgIGhvbGRlcnNbX3dob10uYmFsYW5jZUJlZm9yZVVwZGF0ZSA9IGhvbGRlcnNbX3dob10uYmFsYW5jZTsKICAgICAgICB9CiAgICB9Cn0KCmNvbnRyYWN0IENyb3dkc2FsZSBpcyBNYW51YWxNaWdyYXRpb24gewogICAgCiAgICBmdW5jdGlvbiBDcm93ZHNhbGUoYWRkcmVzcyBfb3JpZ2luYWwpIHBheWFibGUgTWFudWFsTWlncmF0aW9uKF9vcmlnaW5hbCkge30KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIGVuYWJsZWQgewogICAgICAgIHJlcXVpcmUoaG9sZGVyc1t0aGlzXS5iYWxhbmNlID4gMCk7CiAgICAgICAgdWludDI1NiB0b2tlbnMgPSA1MDAwICogbXNnLnZhbHVlIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgICAgICBpZiAodG9rZW5zID4gaG9sZGVyc1t0aGlzXS5iYWxhbmNlKSB7CiAgICAgICAgICAgIHRva2VucyA9IGhvbGRlcnNbdGhpc10uYmFsYW5jZTsKICAgICAgICAgICAgdWludCB2YWx1ZVdlaSA9IHRva2VucyAqIDEwMDAwMDAwMDAwMDAwMDAwMDAgLyA1MDAwOwogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSAtIHZhbHVlV2VpKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShob2xkZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgKyB0b2tlbnMgPiBob2xkZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UpOyAvLyBvdmVyZmxvdwogICAgICAgIHJlcXVpcmUodG9rZW5zID4gMCk7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXMobXNnLnNlbmRlcik7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXModGhpcyk7CiAgICAgICAgaG9sZGVyc1ttc2cuc2VuZGVyXS5iYWxhbmNlICs9IHRva2VuczsKICAgICAgICBzcGVjaWFsc1ttc2cuc2VuZGVyXS5saW1pdCArPSB0b2tlbnM7CiAgICAgICAgaG9sZGVyc1t0aGlzXS5iYWxhbmNlIC09IHRva2VuczsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCB0b2tlbnMpOwogICAgfQp9Cgpjb250cmFjdCBUb2tlbiBpcyBDcm93ZHNhbGUgewoKICAgIHN0cmluZyAgcHVibGljIHN0YW5kYXJkICAgID0gJ1Rva2VuIDAuMSc7CiAgICBzdHJpbmcgIHB1YmxpYyBuYW1lICAgICAgICA9ICdOZXVyb0RBTyc7CiAgICBzdHJpbmcgIHB1YmxpYyBzeW1ib2wgICAgICA9ICJOREFPIjsKICAgIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzICAgID0gMDsKCiAgICB1aW50ICAgIHB1YmxpYyBzdGFydFRpbWU7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dlZDsKCiAgICBldmVudCBCdXJuZWQoYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBUb2tlbihhZGRyZXNzIF9vcmlnaW5hbCwgdWludCBfc3RhcnRUaW1lKQogICAgICAgIHBheWFibGUgQ3Jvd2RzYWxlKF9vcmlnaW5hbCkgewogICAgICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7ICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGF2YWlsYWJsZVRva2VucyhhZGRyZXNzIF93aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IF9hdmFpbCkgewogICAgICAgIF9hdmFpbCA9IGhvbGRlcnNbX3dob10uYmFsYW5jZTsKICAgICAgICB1aW50IGxpbWl0ID0gc3BlY2lhbHNbX3dob10ubGltaXQ7CiAgICAgICAgaWYgKGxpbWl0ICE9IDApIHsKICAgICAgICAgICAgdWludCBibG9ja2VkOwogICAgICAgICAgICB1aW50IHBlcmlvZHMgPSBmaXJzdFllYXJQZXJpb2RzKCk7CiAgICAgICAgICAgIGlmIChzcGVjaWFsc1tfd2hvXS5pc1RlYW0pIHsKICAgICAgICAgICAgICAgIGlmIChwZXJpb2RzICE9IDApIHsKICAgICAgICAgICAgICAgICAgICBibG9ja2VkID0gbGltaXQgKiAoNTAwIC0gcGVyaW9kcykgLyA1MDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBlcmlvZHMgPSAobm93IC0gc3RhcnRUaW1lKSAvIDEgeWVhcnM7CiAgICAgICAgICAgICAgICAgICAgKytwZXJpb2RzOwogICAgICAgICAgICAgICAgICAgIGlmIChwZXJpb2RzIDwgNSkgewogICAgICAgICAgICAgICAgICAgICAgICBibG9ja2VkID0gbGltaXQgKiAoMTAwIC0gcGVyaW9kcyAqIDIwKSAvIDEwMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAocGVyaW9kcyAhPSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYmxvY2tlZCA9IGxpbWl0ICogKDEwMCAtIHBlcmlvZHMpIC8gMTAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIF9hdmFpbCAtPSBibG9ja2VkOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gZmlyc3RZZWFyUGVyaW9kcygpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgX3BlcmlvZHMpIHsKICAgICAgICBfcGVyaW9kcyA9IDA7CiAgICAgICAgaWYgKG5vdyA8IHN0YXJ0VGltZSArIDEgeWVhcnMpIHsKICAgICAgICAgICAgdWludDhbMTJdIG1lbW9yeSBsb2dpYyA9IFsxLCAyLCAzLCA0LCA0LCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07CiAgICAgICAgICAgIF9wZXJpb2RzID0gbG9naWNbKG5vdyAtIHN0YXJ0VGltZSkgLyAyOCBkYXlzXTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX3dobykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gaG9sZGVyc1tfd2hvXS5iYWxhbmNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIGVuYWJsZWQgewogICAgICAgIHJlcXVpcmUoYXZhaWxhYmxlVG9rZW5zKG1zZy5zZW5kZXIpID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW190b10uYmFsYW5jZSArIF92YWx1ZSA+PSBob2xkZXJzW190b10uYmFsYW5jZSk7IC8vIG92ZXJmbG93CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXMobXNnLnNlbmRlcik7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXMoX3RvKTsKICAgICAgICBob2xkZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgLT0gX3ZhbHVlOwogICAgICAgIGhvbGRlcnNbX3RvXS5iYWxhbmNlICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBlbmFibGVkIHsKICAgICAgICByZXF1aXJlKGF2YWlsYWJsZVRva2VucyhfZnJvbSkgPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGhvbGRlcnNbX3RvXS5iYWxhbmNlICsgX3ZhbHVlID49IGhvbGRlcnNbX3RvXS5iYWxhbmNlKTsgLy8gb3ZlcmZsb3cKICAgICAgICByZXF1aXJlKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXMoX2Zyb20pOwogICAgICAgIGJlZm9yZUJhbGFuY2VDaGFuZ2VzKF90byk7CiAgICAgICAgaG9sZGVyc1tfZnJvbV0uYmFsYW5jZSAtPSBfdmFsdWU7CiAgICAgICAgaG9sZGVyc1tfdG9dLmJhbGFuY2UgKz0gX3ZhbHVlOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgZW5hYmxlZCB7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgPj0gX3ZhbHVlKTsKICAgICAgICBiZWZvcmVCYWxhbmNlQ2hhbmdlcyhtc2cuc2VuZGVyKTsKICAgICAgICBob2xkZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgLT0gX3ZhbHVlOwogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsKICAgICAgICBCdXJuZWQobXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgIH0KfQoKY29udHJhY3QgTWlncmF0aW9uQWdlbnQgewogICAgZnVuY3Rpb24gbWlncmF0ZUZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBUb2tlbk1pZ3JhdGlvbiBpcyBUb2tlbiB7CiAgICAKICAgIGFkZHJlc3MgcHVibGljIG1pZ3JhdGlvbkFnZW50OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxNaWdyYXRlZDsKCiAgICBldmVudCBNaWdyYXRlKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIFRva2VuTWlncmF0aW9uKGFkZHJlc3MgX29yaWdpbmFsLCB1aW50IF9zdGFydFRpbWUpCiAgICAgICAgcGF5YWJsZSBUb2tlbihfb3JpZ2luYWwsIF9zdGFydFRpbWUpIHt9CgogICAgLy8gTWlncmF0ZSBfdmFsdWUgb2YgdG9rZW5zIHRvIHRoZSBuZXcgdG9rZW4gY29udHJhY3QKICAgIGZ1bmN0aW9uIG1pZ3JhdGUoKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShtaWdyYXRpb25BZ2VudCAhPSAwKTsKICAgICAgICB1aW50IHZhbHVlID0gaG9sZGVyc1ttc2cuc2VuZGVyXS5iYWxhbmNlOwogICAgICAgIHJlcXVpcmUodmFsdWUgIT0gMCk7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXMobXNnLnNlbmRlcik7CiAgICAgICAgYmVmb3JlQmFsYW5jZUNoYW5nZXModGhpcyk7CiAgICAgICAgaG9sZGVyc1ttc2cuc2VuZGVyXS5iYWxhbmNlIC09IHZhbHVlOwogICAgICAgIGhvbGRlcnNbdGhpc10uYmFsYW5jZSArPSB2YWx1ZTsKICAgICAgICB0b3RhbE1pZ3JhdGVkICs9IHZhbHVlOwogICAgICAgIE1pZ3JhdGlvbkFnZW50KG1pZ3JhdGlvbkFnZW50KS5taWdyYXRlRnJvbShtc2cuc2VuZGVyLCB2YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgdmFsdWUpOwogICAgICAgIE1pZ3JhdGUobXNnLnNlbmRlciwgbWlncmF0aW9uQWdlbnQsIHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNaWdyYXRpb25BZ2VudChhZGRyZXNzIF9hZ2VudCkgZXh0ZXJuYWwgb25seU93bmVyIGVuYWJsZWQgewogICAgICAgIHJlcXVpcmUobWlncmF0aW9uQWdlbnQgPT0gMCk7CiAgICAgICAgbWlncmF0aW9uQWdlbnQgPSBfYWdlbnQ7CiAgICB9Cn0KCmNvbnRyYWN0IE5ldXJvREFPIGlzIFRva2VuTWlncmF0aW9uIHsKCiAgICBmdW5jdGlvbiBOZXVyb0RBTyhhZGRyZXNzIF9vcmlnaW5hbCwgdWludCBfc3RhcnRUaW1lKQogICAgICAgIHBheWFibGUgVG9rZW5NaWdyYXRpb24oX29yaWdpbmFsLCBfc3RhcnRUaW1lKSB7fQogICAgCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGZyZWV6ZVRoZU1vbWVudCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGZyZWV6ZWRNb21lbnQgPSBub3c7CiAgICB9CgogICAgLyoqIEdldCBiYWxhbmNlIG9mIF93aG8gZm9yIGZyZWV6ZWQgbW9tZW50CiAgICAgKiAgZnJlZXplVGhlTW9tZW50KCkKICAgICAqLwogICAgZnVuY3Rpb24gZnJlZXplZEJhbGFuY2VPZihhZGRyZXNzIF93aG8pIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQpIHsKICAgICAgICBpZiAoaG9sZGVyc1tfd2hvXS5iYWxhbmNlVXBkYXRlVGltZSA8PSBmcmVlemVkTW9tZW50KSB7CiAgICAgICAgICAgIHJldHVybiBob2xkZXJzW193aG9dLmJhbGFuY2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGhvbGRlcnNbX3dob10uYmFsYW5jZUJlZm9yZVVwZGF0ZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGtpbGxNZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUodG90YWxTdXBwbHkgPT0gMCk7CiAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgIH0KfQoKY29udHJhY3QgQWRhcHRlciBpcyBvd25lZCB7CiAgICAKICAgIGFkZHJlc3MgcHVibGljIG5ldXJvREFPOwogICAgYWRkcmVzcyBwdWJsaWMgZXJjMjBjb250cmFjdDsKICAgIGFkZHJlc3MgcHVibGljIG1hc3RlckhvbGRlcjsKICAgIAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgYWxyZWFkeVVzZWQ7CiAgICAKICAgIGZ1bmN0aW9uIEFkYXB0ZXIoYWRkcmVzcyBfbmV1cm9EQU8sIGFkZHJlc3MgX2VyYzIwY29udHJhY3QsIGFkZHJlc3MgX21hc3RlckhvbGRlcikKICAgICAgICBwYXlhYmxlIG93bmVkKCkgewogICAgICAgIG5ldXJvREFPID0gX25ldXJvREFPOwogICAgICAgIGVyYzIwY29udHJhY3QgPSBfZXJjMjBjb250cmFjdDsKICAgICAgICBtYXN0ZXJIb2xkZXIgPSBfbWFzdGVySG9sZGVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBraWxsTWUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQogCiAgICAvKioKICAgICAqIE1vdmUgdG9rZW5zIGludCBlcmMyMGNvbnRyYWN0IHRvIE5EQU8gdG9rZW5zIGhvbGRlcgogICAgICogCiAgICAgKiAjIEZyZWV6ZSBiYWxhbmNlcyBpbiBOZXVyb0RBTyBzbWFydGNvbnRyYWN0IGJ5IGNhbGxpbmcgZnJlZXplVGhlTW9tZW50KCkgZnVuY3Rpb24uCiAgICAgKiAjIEFsbG93IHRyYW5zZmVyRnJvbSBtYXN0ZXJIb2xkZXIgaW4gRVJDMjAgc21hcnRjb250cmFjdCBieSBjYWxsaW5nIGFwcHJvdmUoKSBmdW5jdGlvbgogICAgICogICBmcm9tIG1hc3RlckhvbGRlciBhZGRyZXNzLCBnaXZlcyB0aGlzIGNvbnRyYWN0IGFkZHJlc3MgYXMgc3BlbmRlciBwYXJhbWV0ZXIuCiAgICAgKiAjIEVSQzIwIHNtYXJ0Y29udHJhY3QgbXVzdCBoYXZlIGVub3VndGggdG9rZW5zIG9uIG1hc3RlckhvbGRlciBiYWxhbmNlLgogICAgICovCiAgICBmdW5jdGlvbiBnaXZlTWVUb2tlbnMoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoIWFscmVhZHlVc2VkW21zZy5zZW5kZXJdKTsKICAgICAgICB1aW50IGJhbGFuY2UgPSBOZXVyb0RBTyhuZXVyb0RBTykuZnJlZXplZEJhbGFuY2VPZihtc2cuc2VuZGVyKTsKICAgICAgICBFUkMyMChlcmMyMGNvbnRyYWN0KS50cmFuc2ZlckZyb20obWFzdGVySG9sZGVyLCBtc2cuc2VuZGVyLCBiYWxhbmNlKTsKICAgICAgICBhbHJlYWR5VXNlZFttc2cuc2VuZGVyXSA9IHRydWU7CiAgICB9Cn0='.
	

]
