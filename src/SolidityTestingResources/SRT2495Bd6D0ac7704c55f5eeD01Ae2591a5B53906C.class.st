Class {
	#name : #SRT2495Bd6D0ac7704c55f5eeD01Ae2591a5B53906C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2495Bd6D0ac7704c55f5eeD01Ae2591a5B53906C >> base64 [
	^ ''.
	

]
