Class {
	#name : #SRT7f30b108768dae75bfe036c94b207dc53f12ca6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f30b108768dae75bfe036c94b207dc53f12ca6f >> base64 [
	^ ''.
	

]
