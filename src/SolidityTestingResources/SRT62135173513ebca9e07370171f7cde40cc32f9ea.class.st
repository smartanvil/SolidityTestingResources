Class {
	#name : #SRT62135173513ebca9e07370171f7cde40cc32f9ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT62135173513ebca9e07370171f7cde40cc32f9ea >> base64 [
	^ ''.
	

]
