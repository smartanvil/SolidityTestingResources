Class {
	#name : #SRTbd8d47598b811d8388d41c538570a7a83ee8e330,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd8d47598b811d8388d41c538570a7a83ee8e330 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cgp9Cgpjb250cmFjdCBDbGlja2FibGVUVlRva2VuIHsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgQ2xpY2thYmxlVFYgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogICAgQ2xpY2thYmxlVFZUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAgIC8vICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSBibG9jay50aW1lc3RhbXA7IC8vIGZvciB0ZXN0LiBUaW1lIG9mIGRlcGxveSBzbWFydC1jb250cmFjdAogICAgLy8gICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lID0gMTUyMjU0MDgwMDsgLy8gZm9yIHByb2R1Y3Rpb24uIFRpbWVzdGFtcCAwMSBBcHIgMjAxOCAwMDowMDowMCBVVEMKICAgIHVpbnQyNTYgcHVibGljIHByZXNhbGVTdGFydCA9IDE1MTY0OTI4MDA7IC8vIFN1bmRheSwgMjEtSmFuLTE4IDAwOjAwOjAwIFVUQwogICAgdWludDI1NiBwdWJsaWMgcHJlc2FsZUVuZCA9IDE1MTk4NjIzOTk7IC8vIFdlZG5lc2RheSwgMjgtRmViLTE4IDIzOjU5OjU5IFVUQwogICAgdWludDI1NiBwdWJsaWMgc2FsZVN0YXJ0ID0gMTUxOTg2MjQwMDsgLy8gVGh1cnNkYXksIDAxLU1hci0xOCAwMDowMDowMCBVVEMKICAgIHVpbnQyNTYgcHVibGljIHNhbGVFbmQgPSAxNTI3ODExMTk5OyAvLyBUaHVyc2RheSwgMzEtTWF5LTE4IDIzOjU5OjU5IFVUQwoKICAgIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAgIC8vIElDTyBUb2tlbiBQcmljZSDigJMgMSBDS1RWID0gLjAwMSBFVEgKICAgIHVpbnQyNTYgcHVibGljIHJhdGUgPSAxMDAwOwoKICAgIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogICAgZnVuY3Rpb24gQ2xpY2thYmxlVFYoKSBwdWJsaWMgewogICAgICAgIHdhbGxldCA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VG9rZW4oQ2xpY2thYmxlVFZUb2tlbiBfdG9rZW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHRva2VuID0gX3Rva2VuOwogICAgfQoKICAgIC8vIEJ5IGRlZmF1bHQgd2FsbGV0ID09IG93bmVyCiAgICBmdW5jdGlvbiBzZXRXYWxsZXQoYWRkcmVzcyBfd2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgfQoKICAgIGZ1bmN0aW9uIHRva2VuV2VpVG9TYWxlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpewogICAgICAgIGFzc2VydCh0b2tlbldlaVRvU2FsZSgpID49IF92YWx1ZSk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICovCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChyYXRlKTsKICAgICAgICAvLyAyNSUgZGlzY291bnQgb2YgdG9rZW4gcHJpY2UgZm9yIHRoZSBmaXJzdCBzaXggd2Vla3MgZHVyaW5nIHByZS1zYWxlCiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IHByZXNhbGVFbmQpIHRva2VucyA9IHRva2Vucy5tdWwoMTAwKS5kaXYoNzUpOwoKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgICAgIHRva2VuLnRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CgogICAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogICAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICAgIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHByZXNhbGVQZXJpb2QgPSBub3cgPj0gcHJlc2FsZVN0YXJ0ICYmIG5vdyA8PSBwcmVzYWxlRW5kOwogICAgICAgIGJvb2wgc2FsZVBlcmlvZCA9IG5vdyA+PSBzYWxlU3RhcnQgJiYgbm93IDw9IHNhbGVFbmQ7CiAgICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgICAgICByZXR1cm4gKHByZXNhbGVQZXJpb2QgfHwgc2FsZVBlcmlvZCkgJiYgbm9uWmVyb1B1cmNoYXNlOwogICAgfQp9'.
	

]
