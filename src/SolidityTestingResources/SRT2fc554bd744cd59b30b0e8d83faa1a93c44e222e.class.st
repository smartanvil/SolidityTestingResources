Class {
	#name : #SRT2fc554bd744cd59b30b0e8d83faa1a93c44e222e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2fc554bd744cd59b30b0e8d83faa1a93c44e222e >> base64 [
	^ ''.
	

]
