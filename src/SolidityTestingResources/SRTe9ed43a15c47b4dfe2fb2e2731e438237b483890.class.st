Class {
	#name : #SRTe9ed43a15c47b4dfe2fb2e2731e438237b483890,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe9ed43a15c47b4dfe2fb2e2731e438237b483890 >> base64 [
	^ ''.
	

]
