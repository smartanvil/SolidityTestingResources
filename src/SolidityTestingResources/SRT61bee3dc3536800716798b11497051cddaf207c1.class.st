Class {
	#name : #SRT61bee3dc3536800716798b11497051cddaf207c1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61bee3dc3536800716798b11497051cddaf207c1 >> base64 [
	^ ''.
	

]
