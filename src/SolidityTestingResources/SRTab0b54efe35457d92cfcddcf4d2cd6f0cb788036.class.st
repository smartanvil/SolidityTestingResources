Class {
	#name : #SRTab0b54efe35457d92cfcddcf4d2cd6f0cb788036,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTab0b54efe35457d92cfcddcf4d2cd6f0cb788036 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBFdGhlcmVhbEZvdW5kYXRpb25Pd25lZCB7CglhZGRyZXNzIHByaXZhdGUgT3duZXI7CiAgICAKCWZ1bmN0aW9uIElzT3duZXIoYWRkcmVzcyBhZGRyKSB2aWV3IHB1YmxpYyByZXR1cm5zKGJvb2wpCgl7CgkgICAgcmV0dXJuIE93bmVyID09IGFkZHI7Cgl9CgkKCWZ1bmN0aW9uIFRyYW5zZmVyT3duZXIoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lcgoJewoJICAgIE93bmVyID0gbmV3T3duZXI7Cgl9CgkKCWZ1bmN0aW9uIEV0aGVyZWFsRm91bmRhdGlvbk93bmVkKCkgcHVibGljCgl7CgkgICAgT3duZXIgPSBtc2cuc2VuZGVyOwoJfQoJCglmdW5jdGlvbiBUZXJtaW5hdGUoKSBwdWJsaWMgb25seU93bmVyCgl7CgkgICAgc2VsZmRlc3RydWN0KE93bmVyKTsKCX0KCQoJbW9kaWZpZXIgb25seU93bmVyKCl7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IE93bmVyKTsKICAgICAgICBfOwogICAgfQp9CmNvbnRyYWN0IEV0aGVyZWFsVG9rZW4gaXMgRXRoZXJlYWxGb3VuZGF0aW9uT3duZWQvKiwgTWluZWFibGVUb2tlbiovewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBDT05UUkFDVF9OQU1FID0gIkV0aGVyZWFsVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBDT05UUkFDVF9WRVJTSU9OID0gIkEiOwogICAgCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiVGVzdCBUb2tlbiYjMTc0OyI7Ly9pdENvaW4mIzE3NDsgTGltaXRlZAogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVE1QIjsvL0lUTEQKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMDsgIC8vIDE4IGlzIHRoZSBtb3N0IGNvbW1vbiBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMKICAgIGJvb2wgcHJpdmF0ZSB0cmFkZWFibGU7CiAgICB1aW50MjU2IHByaXZhdGUgY3VycmVudFN1cHBseTsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcz0+IHVpbnQyNTYpKSBwcml2YXRlIGFsbG93ZWQ7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHJpdmF0ZSBsb2NrZWRBY2NvdW50czsgIAoJCiAgICAKICAgIGZ1bmN0aW9uIEV0aGVyZWFsVG9rZW4oCgkJdWludDI1NiBpbml0aWFsVG90YWxTdXBwbHksIAoJCWFkZHJlc3NbXSBhZGRyZXNzZXMsIAoJCXVpbnQyNTZbXSBpbml0aWFsQmFsYW5jZXMsIAoJCWJvb2wgaW5pdGlhbEJhbGFuY2VzTG9ja2VkCgkJKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3Nlcy5sZW5ndGggPT0gaW5pdGlhbEJhbGFuY2VzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgY3VycmVudFN1cHBseSA9IGluaXRpYWxUb3RhbFN1cHBseSAqICgxMCoqZGVjaW1hbHMpOwogICAgICAgIHVpbnQyNTYgdG90YWxDcmVhdGVkOwogICAgICAgIGZvcih1aW50OCBpID0wOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgaWYoaW5pdGlhbEJhbGFuY2VzTG9ja2VkKXsKICAgICAgICAgICAgICAgIGxvY2tlZEFjY291bnRzW2FkZHJlc3Nlc1tpXV0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJhbGFuY2VzW2FkZHJlc3Nlc1tpXV0gPSBpbml0aWFsQmFsYW5jZXNbaV0qICgxMCoqZGVjaW1hbHMpOwogICAgICAgICAgICB0b3RhbENyZWF0ZWQgKz0gaW5pdGlhbEJhbGFuY2VzW2ldKiAoMTAqKmRlY2ltYWxzKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYoY3VycmVudFN1cHBseSA8IHRvdGFsQ3JlYXRlZCkKICAgICAgICB7CiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBjdXJyZW50U3VwcGx5IC0gdG90YWxDcmVhdGVkOwogICAgICAgIH0KICAgIH0KICAgIAoJCiAgICBldmVudCBTb2xkVG9rZW4oYWRkcmVzcyBfYnV5ZXIsIHVpbnQyNTYgX3ZhbHVlLCBzdHJpbmcgbm90ZSk7CiAgICBmdW5jdGlvbiBCdXlUb2tlbihhZGRyZXNzIF9idXllciwgdWludDI1NiBfdmFsdWUsIHN0cmluZyBub3RlKSBwdWJsaWMgb25seU93bmVyCiAgICB7CiAgICAgICAgU29sZFRva2VuKCBfYnV5ZXIsICBfdmFsdWUsICBub3RlKTsKICAgICAgICBiYWxhbmNlc1t0aGlzXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2J1eWVyXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIodGhpcywgX2J1eWVyLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBMb2NrQWNjb3VudChhZGRyZXNzIHRvTG9jaykgcHVibGljIG9ubHlPd25lcgogICAgewogICAgICAgIGxvY2tlZEFjY291bnRzW3RvTG9ja10gPSB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gVW5sb2NrQWNjb3VudChhZGRyZXNzIHRvVW5sb2NrKSBwdWJsaWMgb25seU93bmVyCiAgICB7CiAgICAgICAgZGVsZXRlIGxvY2tlZEFjY291bnRzW3RvVW5sb2NrXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gU2V0VHJhZGVhYmxlKGJvb2wgdCkgcHVibGljIG9ubHlPd25lcgogICAgewogICAgICAgIHRyYWRlYWJsZSA9IHQ7CiAgICB9CiAgICBmdW5jdGlvbiBJc1RyYWRlYWJsZSgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gdHJhZGVhYmxlOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdXBwbHk7CiAgICB9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50IGJhbGFuY2UpCiAgICB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyBub3RMb2NrZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0cmFkZWFibGUpOwogICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDAgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgIFRyYW5zZmVyKCBtc2cuc2VuZGVyLCBfdG8sICBfdmFsdWUpOwogICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpcHVibGljIG5vdExvY2tlZCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKCFsb2NrZWRBY2NvdW50c1tfZnJvbV0gJiYgIWxvY2tlZEFjY291bnRzW190b10pOwoJCXJlcXVpcmUodHJhZGVhYmxlKTsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZQogICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUKICAgICAgICAgICAgJiYgX3ZhbHVlID4gMAogICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIFRyYW5zZmVyKCBfZnJvbSwgX3RvLCAgX3ZhbHVlKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCByZW1haW5pbmcpewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKICAgCiAgIG1vZGlmaWVyIG5vdExvY2tlZCgpewogICAgICAgcmVxdWlyZSAoIWxvY2tlZEFjY291bnRzW21zZy5zZW5kZXJdKTsKICAgICAgIF87CiAgIH0KfSAKY29udHJhY3QgRXRoZXJlYWxUaXBKYXIgIGlzIEV0aGVyZWFsRm91bmRhdGlvbk93bmVkewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBDT05UUkFDVF9OQU1FID0gIkV0aGVyZWFsVGlwSmFyIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgQ09OVFJBQ1RfVkVSU0lPTiA9ICJCIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgUVVPVEUgPSAiJ1RoZSB1bml2ZXJzZSBuZXZlciBkaWQgbWFrZSBzZW5zZTsgSSBzdXNwZWN0IGl0IHdhcyBidWlsdCBvbiBnb3Zlcm5tZW50IGNvbnRyYWN0LicgLVJvYmVydCBBLiBIZWlubGVpbiI7CiAgICAKICAgIAogICAgZXZlbnQgUmVjaWV2ZWRUaXAoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoJZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMgewoJCVJlY2lldmVkVGlwKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CQkKCX0KCQoJZXZlbnQgVHJhbnNmZXJlZEV0aChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoJZnVuY3Rpb24gVHJhbnNmZXJFdGgoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlPd25lcnsKCSAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSB2YWx1ZSk7CgkgICAgCiAgICAgICAgaWYodmFsdWUgPiAwKQoJCXsKCQkJdG8udHJhbnNmZXIodmFsdWUpOwoJCQlUcmFuc2ZlcmVkRXRoKHRvLCB2YWx1ZSk7CgkJfSAgIAoJfQogICAgCiAgICBldmVudCBUcmFuc2ZlcmVkRVJDMjAoYWRkcmVzcyB0b2tlbkNvbnRyYWN0LCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoJZnVuY3Rpb24gVHJhbnNmZXJFUkMyMChhZGRyZXNzIHRva2VuQ29udHJhY3QsIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBvbmx5T3duZXJ7CgkgICAgCgkgICAgRXRoZXJlYWxUb2tlbiB0b2tlbiA9IEV0aGVyZWFsVG9rZW4odG9rZW5Db250cmFjdCk7CgkgICAgCiAgICAgICAgaWYodmFsdWUgPiAwKQoJCXsKCQkJdG9rZW4udHJhbnNmZXIodG8sIHZhbHVlKTsKCQkJVHJhbnNmZXJlZEVSQzIwKHRva2VuQ29udHJhY3QsdG8sIHZhbHVlKTsKCQl9ICAgCgl9Cn0='.
	

]
