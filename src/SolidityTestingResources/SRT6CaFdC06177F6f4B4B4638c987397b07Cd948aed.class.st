Class {
	#name : #SRT6CaFdC06177F6f4B4B4638c987397b07Cd948aed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6CaFdC06177F6f4B4B4638c987397b07Cd948aed >> base64 [
	^ 'Y29udHJhY3QgSmFja1BvdCB7CiAgICBhZGRyZXNzIHB1YmxpYyBob3N0OwoJdWludCBtaW5BbW91bnQ7CiAgICB1aW50W10gcHVibGljIGNvbnRyaWJ1dGlvbnM7CiAgICBhZGRyZXNzW10gcHVibGljIGNvbnRyaWJ1dG9yczsKCXVpbnQgcHVibGljIG51bVBsYXllcnM7Cgl1aW50IHB1YmxpYyBuZXh0RHJhdzsKCWJ5dGVzMzIgcHVibGljIHNlZWRIYXNoOwoJYnl0ZXMzMiByYW5kb207CQoKICAgIHN0cnVjdCBXaW4gewogICAgICAgIGFkZHJlc3Mgd2lubmVyOwogICAgICAgIHVpbnQgdGltZXN0YW1wOwogICAgICAgIHVpbnQgY29udHJpYnV0aW9uOwoJCXVpbnQgYW1vdW50V29uOwogICAgfQoKICAgIFdpbltdIHB1YmxpYyByZWNlbnRXaW5zOwogICAgdWludCByZWNlbnRXaW5zQ291bnQgPSAxMDsKCQoJZnVuY3Rpb24gaW5zZXJ0X2NvbnRyaWJ1dGlvbihhZGRyZXNzIGFkZHIsIHVpbnQgdmFsdWUpIGludGVybmFsIHsKCQkvLyBjaGVjayBpZiBhcnJheSBuZWVkcyBleHRlbmRpbmcKCQlpZihudW1QbGF5ZXJzID09IGNvbnRyaWJ1dGlvbnMubGVuZ3RoKSB7CgkJCS8vIGV4dGVuZCB0aGUgYXJyYXlzCgkJCWNvbnRyaWJ1dGlvbnMubGVuZ3RoICs9IDE7CgkJCWNvbnRyaWJ1dG9ycy5sZW5ndGggKz0gMTsKCQl9CgkJY29udHJpYnV0aW9uc1tudW1QbGF5ZXJzXSA9IHZhbHVlOwoJCWNvbnRyaWJ1dG9yc1tudW1QbGF5ZXJzKytdID0gYWRkcjsKCX0KCQoJZnVuY3Rpb24gZ2V0Q29udHJpYnV0aW9ucyhhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGk7CiAgICAgICAgZm9yIChpPTA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHsKCQkJaWYgKGNvbnRyaWJ1dG9yc1tpXSA9PSBhZGRyKSB7IC8vIGlmIGluIHRoZSBsaXN0IGFscmVhZHkKCQkJCWJyZWFrOwoJCQl9CgkJfQoJCQoJCWlmKGkgPT0gbnVtUGxheWVycykgeyAvLyBEaWQgbm90IGZpbmQgc2VuZGVyIGFscmVhZHkgaW4gdGhlIGxpc3QKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSBlbHNlIHsKCQkJcmV0dXJuIGNvbnRyaWJ1dGlvbnNbaV07CgkJfQogICAgfQoJCglmdW5jdGlvbiBKYWNrUG90KCkgewogICAgICAgIGhvc3QgPSBtc2cuc2VuZGVyOwoJCXNlZWRIYXNoID0gc2hhMygnYWFhYScpOwoJCW1pbkFtb3VudCA9IDEwICogMSBmaW5uZXk7CiAgICAgICAgcmVjZW50V2luc0NvdW50ID0gMTA7CgkJbmV4dERyYXcgPSAxMjM0OwogICAgfQoKICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGFkZFRvQ29udHJpYnV0aW9uKCk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkVG9Db250cmlidXRpb24oKSB7CiAgICAgICAgYWRkVmFsdWVUb0NvbnRyaWJ1dGlvbihtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZFZhbHVlVG9Db250cmlidXRpb24odWludCB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIC8vIEZpcnN0LCBtYWtlIHN1cmUgdGhpcyBpcyBhIHZhbGlkIHRyYW5zYWN0aW9uLgogICAgICAgIGlmKHZhbHVlIDwgbWluQW1vdW50KSB0aHJvdzsKCSAgICB1aW50IGk7CiAgICAgICAgZm9yIChpPTA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHsKCQkJaWYgKGNvbnRyaWJ1dG9yc1tpXSA9PSBtc2cuc2VuZGVyKSB7IC8vIEFscmVhZHkgY29udHJpYnV0ZWQ/CgkJCQlicmVhazsKCQkJfQoJCX0KCQkKCQlpZihpID09IG51bVBsYXllcnMpIHsgLy8gRGlkIG5vdCBmaW5kIHNlbmRlciBhbHJlYWR5IGluIHRoZSBsaXN0CgkJCWluc2VydF9jb250cmlidXRpb24obXNnLnNlbmRlciwgdmFsdWUpOwogICAgICAgIH0gZWxzZSB7CgkJCWNvbnRyaWJ1dGlvbnNbaV0rPSB2YWx1ZTsgLy8gVXBkYXRlIGFtb3VudAoJCX0KCQkKCQlyYW5kb20gPSBzaGEzKHJhbmRvbSwgYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpKTsJCQogICAgfQoJCgkvL2RyYXdQb3QgdHJpZ2dlcmVkIGZyb20gSG9zdCBhZnRlciB0aW1lIGhhcyBwYXNzZWQgb3IgcG90IGlzIG1hdHVyZWQuCglmdW5jdGlvbiBkcmF3UG90KHN0cmluZyBzZWVkLCBzdHJpbmcgbmV3U2VlZCkgewoJCWlmKG1zZy5zZW5kZXIgIT0gaG9zdCkgdGhyb3c7CgkJaWYgKHNoYTMoc2VlZCkgPT0gc2VlZEhhc2gpIHsKCQkJCgkJCS8vIEluaXRpYWxpemUgc2VlZEhhc2ggZm9yIG5leHQgZHJhdwoJCQlzZWVkSGFzaCA9IHNoYTMobmV3U2VlZCk7CgkJCS8vIENob29zZSBhIHdpbm5lciB1c2luZyB0aGUgc2VlZCBhcyByYW5kb20KCQkJdWludCB3aW5uZXJfaW5kZXggPSBzZWxlY3RXaW5uZXIoc2VlZCk7CgoJCQkvLyBTZW5kIHRoZSBkZXZlbG9wZXIgYSAxJSBmZWUKCQkJaG9zdC5zZW5kKHRoaXMuYmFsYW5jZSAvIDEwMCk7CgkJCQoJCQl1aW50IGFtb3VudFdvbiA9IHRoaXMuYmFsYW5jZTsgCgkJCQoJCQkvLyBTZW5kIHRoZSB3aW5uZXIgdGhlIHJlbWFpbmluZyBiYWxhbmNlIG9uIHRoZSBjb250cmFjdC4KCQkJY29udHJpYnV0b3JzW3dpbm5lcl9pbmRleF0uc2VuZCh0aGlzLmJhbGFuY2UpOwoJCQkKCQkJLy8gTWFrZSBhIG5vdGUgdGhhdCBzb21lb25lIHdvbiwgdGhlbiBzdGFydCBhbGwgb3ZlciEKCQkJcmVjb3JkV2luKHdpbm5lcl9pbmRleCwgYW1vdW50V29uKTsKCgkJCXJlc2V0KCk7CgkJCW5leHREcmF3ID0gbm93ICsgNyBkYXlzOwkKCgkJfQoJfQoKCWZ1bmN0aW9uIHNldERyYXdEYXRlKHVpbnQgX25ld0RyYXcpIHsKCQlpZihtc2cuc2VuZGVyICE9IGhvc3QpIHRocm93OwoJCW5leHREcmF3ID0gX25ld0RyYXc7Cgl9CgkKCQogICAgZnVuY3Rpb24gc2VsZWN0V2lubmVyKHN0cmluZyBzZWVkKSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHdpbm5lcl9pbmRleCkgewoKICAgICAgICB1aW50IHNlbWlyYW5kb20gPSB1aW50KHNoYTMocmFuZG9tLCBzZWVkKSkgJSB0aGlzLmJhbGFuY2U7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBudW1QbGF5ZXJzOyArK2kpIHsKICAgICAgICAgICAgaWYoc2VtaXJhbmRvbSA8IGNvbnRyaWJ1dGlvbnNbaV0pIHJldHVybiBpOwogICAgICAgICAgICBzZW1pcmFuZG9tIC09IGNvbnRyaWJ1dGlvbnNbaV07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlY29yZFdpbih1aW50IHdpbm5lcl9pbmRleCwgdWludCBhbW91bnQpIGludGVybmFsIHsKICAgICAgICBpZihyZWNlbnRXaW5zLmxlbmd0aCA8IHJlY2VudFdpbnNDb3VudCkgewogICAgICAgICAgICByZWNlbnRXaW5zLmxlbmd0aCsrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEFscmVhZHkgYXQgY2FwYWNpdHkgZm9yIHRoZSBudW1iZXIgb2Ygd2lubmVycyB0byByZW1lbWJlci4KICAgICAgICAgICAgLy8gRm9yZ2V0IHRoZSBvbGRlc3Qgb25lIGJ5IHNoaWZ0aW5nIGVhY2ggZW50cnkgJ2xlZnQnCiAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgcmVjZW50V2luc0NvdW50IC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgICByZWNlbnRXaW5zW2ldID0gcmVjZW50V2luc1tpICsgMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJlY2VudFdpbnNbcmVjZW50V2lucy5sZW5ndGggLSAxXSA9IFdpbihjb250cmlidXRvcnNbd2lubmVyX2luZGV4XSwgYmxvY2sudGltZXN0YW1wLCBjb250cmlidXRpb25zW3dpbm5lcl9pbmRleF0sIGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXQoKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gQ2xlYXIgdGhlIGxpc3RzIHdpdGggbWluIGdhcyBhZnRlciB0aGUgZHJhdy4KCQludW1QbGF5ZXJzID0gMDsKICAgIH0KCgogICAgLyogVGhpcyBzaG91bGQgb25seSBiZSBuZWVkZWQgaWYgYSBidWcgaXMgZGlzY292ZXJlZAogICAgaW4gdGhlIGNvZGUgYW5kIHRoZSBjb250cmFjdCBtdXN0IGJlIGRlc3Ryb3llZC4gKi8KICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgaWYobXNnLnNlbmRlciAhPSBob3N0KSB0aHJvdzsKCiAgICAgICAgLy8gUmVmdW5kIGV2ZXJ5b25lJ3MgY29udHJpYnV0aW9ucy4KICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IG51bVBsYXllcnM7ICsraSkgewogICAgICAgICAgICBjb250cmlidXRvcnNbaV0uc2VuZChjb250cmlidXRpb25zW2ldKTsKICAgICAgICB9CgoJCXJlc2V0KCk7CiAgICAgICAgc2VsZmRlc3RydWN0KGhvc3QpOwogICAgfQp9'.
	

]
