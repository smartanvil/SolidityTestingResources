Class {
	#name : #SRT870f9DF5C15927cE20D02246829c6f2A34B3F3fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT870f9DF5C15927cE20D02246829c6f2A34B3F3fb >> base64 [
	^ ''.
	

]
