Class {
	#name : #SRT52e30201f31283dc5f7928b4198896083f604416,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT52e30201f31283dc5f7928b4198896083f604416 >> base64 [
	^ ''.
	

]
