Class {
	#name : #SRTea3be67a30325e665a86ea4149c781b20a81e07f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea3be67a30325e665a86ea4149c781b20a81e07f >> base64 [
	^ ''.
	

]
