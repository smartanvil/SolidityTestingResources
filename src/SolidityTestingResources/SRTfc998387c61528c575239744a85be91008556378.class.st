Class {
	#name : #SRTfc998387c61528c575239744a85be91008556378,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc998387c61528c575239744a85be91008556378 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8qKgoqIEBub3RpY2UgVGVtcGxlMyBUT0tFTiBDT05UUkFDVAoqIFRva2VuIGZvciB0aGUgY29uc3RydWN0aW9uIGZvciBmdXR1cmUgVGhpcmQgVGVtcGxlIGluIEplcnVzYWxlbQoqIEBkZXYgRVJDLTIwIFRva2VuIFN0YW5kYXIgQ29tcGxpYW50CiogQGF1dGhvciBGYXJlcyBBLiBBa2VsIEMuIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZjQ5MmRhOTU5YTgwOWI5YTlkOWJkYTk1OWY5MTk4YjQ5Mzk5OTU5ZDk4ZGE5NzliOTkiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+CiovCgovKioKICogQHRpdGxlIFNhZmVNYXRoIGJ5IE9wZW5aZXBwZWxpbgogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICByZXR1cm4gYzsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjBUb2tlbkludGVyZmFjZQogKiBAZGV2IFRva2VuIGNvbnRyYWN0IGludGVyZmFjZSBmb3IgZXh0ZXJuYWwgdXNlCiAqLwpjb250cmFjdCBFUkMyMFRva2VuSW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgfQoKCi8qKgoqIEB0aXRsZSBFUkMyMFRva2VuCiogQG5vdGljZSBUb2tlbiBkZWZpbml0aW9uIGNvbnRyYWN0CiovCmNvbnRyYWN0IEVSQzIwVG9rZW4gaXMgRVJDMjBUb2tlbkludGVyZmFjZSB7IC8vU3RhbmRhciBkZWZpbml0aW9uIG9mIGFuIEVSQzIwVG9rZW4KICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OyAvL1NhZmVNYXRoIGlzIHVzZWQgZm9yIHVpbnQyNTYgb3BlcmF0aW9ucwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsgLy9BIG1hcHBpbmcgb2YgYWxsIGJhbGFuY2VzIHBlciBhZGRyZXNzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7IC8vQSBtYXBwaW5nIG9mIGFsbCBhbGxvd2FuY2VzCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIAogICAgLyoqCiAgICAqIEBub3RpY2UgR2V0IHRoZSBiYWxhbmNlIG9mIGFuIF9vd25lciBhZGRyZXNzLgogICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIGJlIHF1ZXJ5LgogICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSB0cmFuc2ZlciBfdmFsdWUgdG9rZW5zIHRvIGFkZHJlc3MgX3RvCiAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAgICogQHJldHVybiBzdWNjZXNzIHdpdGggYm9vbGVhbiB2YWx1ZSB0cnVlIGlmIGRvbmUKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsgLy9JZiB5b3UgZG9udCB3YW50IHRoYXQgcGVvcGxlIGRlc3Ryb3kgdG9rZW4KICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgVHJhbnNmZXIgX3ZhbHVlIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8gdXNpbmcgYWxsb3dhbmNlIG1zZy5zZW5kZXIgYWxsb3dhbmNlIG9uIF9mcm9tCiAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB3aGVyZSB0b2tlbnMgY29tZXMuCiAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAgICogQHJldHVybiBzdWNjZXNzIHdpdGggYm9vbGVhbiB2YWx1ZSB0cnVlIGlmIGRvbmUKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7IC8vSWYgeW91IGRvbnQgd2FudCB0aGF0IHBlb3BsZSBkZXN0cm95IHRva2VuCiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBBc3NpZ24gYWxsb3dhbmNlIF92YWx1ZSB0byBfc3BlbmRlciBhZGRyZXNzIHRvIHVzZSB0aGUgbXNnLnNlbmRlciBiYWxhbmNlCiAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB0byBiZSBhbGxvd2VkIHRvIHNwZW5kLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgYWxsb3dlZC4KICAgICogQHJldHVybiBzdWNjZXNzIHdpdGggYm9vbGVhbiB2YWx1ZSB0cnVlCiAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBHZXQgdGhlIGFsbG93YW5jZSBvZiBhbiBzcGVjaWZpZWQgYWRkcmVzcyB0byB1c2UgYW5vdGhlciBhZGRyZXNzIGJhbGFuY2UuCiAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIHRoZSB0b2tlbnMuCiAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWxsb3dlZCBzcGVuZGVyLgogICAgKiBAcmV0dXJuIHJlbWFpbmluZyB3aXRoIHRoZSBhbGxvd2FuY2UgdmFsdWUKICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgTG9nIEV2ZW50cwogICAgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cgp9CgovKioKKiBAdGl0bGUgQXNzZXRUTTMKKiBAbm90aWNlIFRlbXBsZTMgdG9rZW4gY3JlYXRpb24uCiogQGRldiBUTTMgaXMgYW4gRVJDMjAgVG9rZW4KKi8KY29udHJhY3QgQXNzZXRUTTMgaXMgRVJDMjBUb2tlbiB7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnVGVtcGxlMyc7CiAgICB1aW50MjU2IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnVE0zJzsKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICcxJzsKICAgIAogICAgLyoqCiAgICAqIEBub3RpY2UgVE0zIHRva2VuIGNvbnRydWN0b3IuCiAgICAqLwogICAgZnVuY3Rpb24gQXNzZXRUTTModWludDI1NiBfaW5pdGlhbFN1cHBseSkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OyAvL1Rva2VucyBpbml0aWFsIHN1cHBseTsKICAgICAgICBiYWxhbmNlc1sweEZBQjYzNjhiMEY3YmU2MGM1NzNhNjU2MmQ4MjQ2OUI1RUQ5ZTdlRTZdID0gdG90YWxTdXBwbHkuZGl2KDEwMDApOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHkuc3ViKGJhbGFuY2VzWzB4RkFCNjM2OGIwRjdiZTYwYzU3M2E2NTYyZDgyNDY5QjVFRDllN2VFNl0pOwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIHRvdGFsU3VwcGx5KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgMHhGQUI2MzY4YjBGN2JlNjBjNTczYTY1NjJkODI0NjlCNUVEOWU3ZUU2LCBiYWxhbmNlc1sweEZBQjYzNjhiMEY3YmU2MGM1NzNhNjU2MmQ4MjQ2OUI1RUQ5ZTdlRTZdKTsgICAgICAgIAogICAgfQogICAgCiAgICAvKioKICAgICogQG5vdGljZSB0aGlzIGNvbnRyYWN0IHdpbGwgcmV2ZXJ0IG9uIGRpcmVjdCBub24tZnVuY3Rpb24gY2FsbHMKICAgICogQGRldiBGdW5jdGlvbiB0byBoYW5kbGUgY2FsbGJhY2sgY2FsbHMKICAgICovCiAgICBmdW5jdGlvbigpIHB1YmxpYyB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cgp9'.
	

]
