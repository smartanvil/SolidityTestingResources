Class {
	#name : #SRT5d65d971895edc438f465c17db6992698a52318d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d65d971895edc438f465c17db6992698a52318d >> base64 [
	^ ''.
	

]
