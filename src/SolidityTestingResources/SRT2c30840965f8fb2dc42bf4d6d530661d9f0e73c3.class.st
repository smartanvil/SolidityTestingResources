Class {
	#name : #SRT2c30840965f8fb2dc42bf4d6d530661d9f0e73c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c30840965f8fb2dc42bf4d6d530661d9f0e73c3 >> base64 [
	^ ''.
	

]
