Class {
	#name : #SRTdba3c9f9a427d2bdb7e260353dce57a94cd8ddd8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdba3c9f9a427d2bdb7e260353dce57a94cd8ddd8 >> base64 [
	^ ''.
	

]
