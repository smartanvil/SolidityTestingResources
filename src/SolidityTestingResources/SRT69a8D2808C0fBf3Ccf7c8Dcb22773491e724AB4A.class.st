Class {
	#name : #SRT69a8D2808C0fBf3Ccf7c8Dcb22773491e724AB4A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69a8D2808C0fBf3Ccf7c8Dcb22773491e724AB4A >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBNdWx0aU93bmVyIHsKICAgIC8qIENvbnN0cnVjdG9yICovCiAgICBldmVudCBPd25lckFkZGVkKGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJSZW1vdmVkKGFkZHJlc3Mgb2xkT3duZXIpOwoJZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2VkKHVpbnQyNTYgbmV3UmVxdWlyZW1lbnQpOwoJCiAgICB1aW50MjU2IHB1YmxpYyBvd25lclJlcXVpcmVkOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNPd25lcjsKCW1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIFJlcXVpcmVEaXNwb3NlOwoJYWRkcmVzc1tdIG93bmVyczsKCQoJZnVuY3Rpb24gTXVsdGlPd25lcihhZGRyZXNzW10gX293bmVycywgdWludDI1NiBfcmVxdWlyZWQpIHB1YmxpYyB7CiAgICAgICAgb3duZXJSZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgICAgICBpc093bmVyW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBvd25lcnMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBfb3duZXJzLmxlbmd0aDsgKytpKXsKCQkJcmVxdWlyZSghaXNPd25lcltfb3duZXJzW2ldXSk7CgkJCWlzT3duZXJbX293bmVyc1tpXV0gPSB0cnVlOwoJCQlvd25lcnMucHVzaChfb3duZXJzW2ldKTsKICAgICAgICB9CiAgICB9CiAgICAKCW1vZGlmaWVyIG9ubHlPd25lciB7CgkgICAgcmVxdWlyZShpc093bmVyW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQogICAgCgltb2RpZmllciBvd25lckRvZXNOb3RFeGlzdChhZGRyZXNzIG93bmVyKSB7CgkJcmVxdWlyZSghaXNPd25lcltvd25lcl0pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb3duZXJFeGlzdHMoYWRkcmVzcyBvd25lcikgewoJCXJlcXVpcmUoaXNPd25lcltvd25lcl0pOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3Mgb3duZXIpIG9ubHlPd25lciBvd25lckRvZXNOb3RFeGlzdChvd25lcikgZXh0ZXJuYWx7CiAgICAgICAgaXNPd25lcltvd25lcl0gPSB0cnVlOwogICAgICAgIG93bmVycy5wdXNoKG93bmVyKTsKICAgICAgICBPd25lckFkZGVkKG93bmVyKTsKICAgIH0KICAgIAoJZnVuY3Rpb24gbnVtYmVyT3duZXJzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgTnVtYmVyT3duZXJzKXsKCSAgICBOdW1iZXJPd25lcnMgPSBvd25lcnMubGVuZ3RoOwoJfQoJCiAgICBmdW5jdGlvbiByZW1vdmVPd25lcihhZGRyZXNzIG93bmVyKSBvbmx5T3duZXIgb3duZXJFeGlzdHMob3duZXIpIGV4dGVybmFsewoJCXJlcXVpcmUob3duZXJzLmxlbmd0aCA+IDIpOwogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CgkJUmVxdWlyZURpc3Bvc2Vbb3duZXJdID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50MjU2IGk9MDsgaTxvd25lcnMubGVuZ3RoIC0gMTsgaSsrKXsKICAgICAgICAgICAgaWYgKG93bmVyc1tpXSA9PSBvd25lcikgewoJCQkJb3duZXJzW2ldID0gb3duZXJzW293bmVycy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgkJfQoJCW93bmVycy5sZW5ndGggLT0gMTsKICAgICAgICBPd25lclJlbW92ZWQob3duZXIpOwogICAgfQogICAgCglmdW5jdGlvbiBjaGFuZ2VSZXF1aXJlbWVudCh1aW50IF9uZXdSZXF1aXJlZCkgb25seU93bmVyIGV4dGVybmFsIHsKCQlyZXF1aXJlKF9uZXdSZXF1aXJlZCA+PSBvd25lcnMubGVuZ3RoKTsKICAgICAgICBvd25lclJlcXVpcmVkID0gX25ld1JlcXVpcmVkOwogICAgICAgIFJlcXVpcmVtZW50Q2hhbmdlZChfbmV3UmVxdWlyZWQpOwogICAgfQoJCglmdW5jdGlvbiBDb25maXJtRGlzcG9zZSgpIG9ubHlPd25lcigpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpewoJCXVpbnQgY291bnQgPSAwOwoJCWZvciAodWludCBpPTA7IGk8b3duZXJzLmxlbmd0aCAtIDE7IGkrKykKICAgICAgICAgICAgaWYgKFJlcXVpcmVEaXNwb3NlW293bmVyc1tpXV0pCiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgICAgICAgICBpZiAoY291bnQgPT0gb3duZXJSZXF1aXJlZCkKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJfQoJCglmdW5jdGlvbiBraWxsKCkgb25seU93bmVyKCl7CgkJUmVxdWlyZURpc3Bvc2VbbXNnLnNlbmRlcl0gPSB0cnVlOwoJCWlmKENvbmZpcm1EaXNwb3NlKCkpewoJCQlzZWxmZGVzdHJ1Y3QobXNnLnNlbmRlcik7CgkJfQogICAgfQp9Cgpjb250cmFjdCBWVlRva2VuIGlzIE11bHRpT3duZXJ7CglldmVudCBTdWJtaXRUcmFuc2FjdGlvbihieXRlczMyIHRyYW5zYWN0aW9uSGFzaCk7CglldmVudCBDb25maXJtYXRpb24oYWRkcmVzcyBzZW5kZXIsIGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoKTsKCWV2ZW50IEV4ZWN1dGlvbihieXRlczMyIHRyYW5zYWN0aW9uSGFzaCk7CglldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CglldmVudCBWb2lkQWNjb3VudChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCQoJc3RyaW5nIHB1YmxpYyBuYW1lID0gIlZWIENvaW4iOwoJc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiVlZDIjsKCXVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7Cgl1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDMwMDAwMDAwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKCXVpbnQyNTYgcHVibGljIEV0aFBlclRva2VuID0gMzAwOwoJCgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKCW1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsKCW1hcHBpbmcgKGJ5dGVzMzIgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSkgcHVibGljIENvbmZpcm1hdGlvbnM7CgltYXBwaW5nIChieXRlczMyID0+IFRyYW5zYWN0aW9uKSBwdWJsaWMgVHJhbnNhY3Rpb25zOwoJCglzdHJ1Y3QgVHJhbnNhY3Rpb24gewoJCWFkZHJlc3MgZGVzdGluYXRpb247CgkJdWludCB2YWx1ZTsKCQlieXRlcyBkYXRhOwoJCWJvb2wgZXhlY3V0ZWQ7CiAgICB9CgkKCW1vZGlmaWVyIG5vdE51bGwoYWRkcmVzcyBkZXN0aW5hdGlvbikgewoJCXJlcXVpcmUgKGRlc3RpbmF0aW9uICE9IDB4MCk7CiAgICAgICAgXzsKICAgIH0KCQoJbW9kaWZpZXIgY29uZmlybWVkKGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoKSB7CgkJcmVxdWlyZSAoQ29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbkhhc2hdW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdENvbmZpcm1lZChieXRlczMyIHRyYW5zYWN0aW9uSGFzaCkgewoJCXJlcXVpcmUgKCFDb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSGFzaF1bbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgkKCW1vZGlmaWVyIG5vdEV4ZWN1dGVkKGJ5dGVzMzIgVHJhbnNIYXNoKSB7CgkJcmVxdWlyZSAoIVRyYW5zYWN0aW9uc1tUcmFuc0hhc2hdLmV4ZWN1dGVkKTsKICAgICAgICBfOwogICAgfQogICAgCglmdW5jdGlvbiBWVlRva2VuKGFkZHJlc3NbXSBfb3duZXJzLCB1aW50MjU2IF9yZXF1aXJlZCkgTXVsdGlPd25lcihfb3duZXJzLCBfcmVxdWlyZWQpIHB1YmxpYyB7CgkJYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAKICAgIH0KCQoJLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSAoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUgKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZU9mW190b10pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOyAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHNlbmRlciBpcyBmcm96ZW4KCQl1aW50MjU2IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgkJYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KCQoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewoJCV90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7Cgl9CgkKCWZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1ZhbHVlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBFdGhQZXJUb2tlbiA9IG5ld1ZhbHVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOwogICAgICAgIEZyb3plbkZ1bmRzKHRhcmdldCwgZnJlZXplKTsKICAgIH0KCQoJZnVuY3Rpb24oKSBwYXlhYmxlIHsKCQlyZXZlcnQoKTsKICAgIH0KCQoJZnVuY3Rpb24gcmVtYWluQmFsYW5jZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VPZlt0aGlzXTsKICAgIH0KCQoJLypUcmFuc2ZlciBFdGggKi8KCWZ1bmN0aW9uIGV4ZWN1dGUoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgbm90TnVsbChfdG8pIG9ubHlPd25lciBleHRlcm5hbCByZXR1cm5zIChieXRlczMyIF9yKSB7CgkJX3IgPSBhZGRUcmFuc2FjdGlvbihfdG8sIF92YWx1ZSwgX2RhdGEpOwoJCWNvbmZpcm1UcmFuc2FjdGlvbihfcik7CiAgICB9CgkKCWZ1bmN0aW9uIGFkZFRyYW5zYWN0aW9uKGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHByaXZhdGUgbm90TnVsbChkZXN0aW5hdGlvbikgcmV0dXJucyAoYnl0ZXMzMiBUcmFuc0hhc2gpewogICAgICAgIFRyYW5zSGFzaCA9IHNoYTMoZGVzdGluYXRpb24sIHZhbHVlLCBkYXRhKTsKICAgICAgICBpZiAoVHJhbnNhY3Rpb25zW1RyYW5zSGFzaF0uZGVzdGluYXRpb24gPT0gMCkgewogICAgICAgICAgICBUcmFuc2FjdGlvbnNbVHJhbnNIYXNoXSA9IFRyYW5zYWN0aW9uKHsKICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbiwKICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBleGVjdXRlZDogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIFN1Ym1pdFRyYW5zYWN0aW9uKFRyYW5zSGFzaCk7CiAgICAgICAgfQogICAgfQoJCglmdW5jdGlvbiBhZGRDb25maXJtYXRpb24oYnl0ZXMzMiBUcmFuc0hhc2gpIHByaXZhdGUgb25seU93bmVyIG5vdENvbmZpcm1lZChUcmFuc0hhc2gpewogICAgICAgIENvbmZpcm1hdGlvbnNbVHJhbnNIYXNoXVttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgICAgQ29uZmlybWF0aW9uKG1zZy5zZW5kZXIsIFRyYW5zSGFzaCk7CiAgICB9CgkKCWZ1bmN0aW9uIGlzQ29uZmlybWVkKGJ5dGVzMzIgVHJhbnNIYXNoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmIChDb25maXJtYXRpb25zW1RyYW5zSGFzaF1bb3duZXJzW2ldXSkKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIGlmIChjb3VudCA9PSBvd25lclJlcXVpcmVkKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgkKCWZ1bmN0aW9uIGNvbmZpcm1hdGlvbkNvdW50KGJ5dGVzMzIgVHJhbnNIYXNoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50IGNvdW50KXsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPG93bmVycy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgaWYgKENvbmZpcm1hdGlvbnNbVHJhbnNIYXNoXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29uZmlybVRyYW5zYWN0aW9uKGJ5dGVzMzIgVHJhbnNIYXNoKSBwdWJsaWMgb25seU93bmVyKCl7CiAgICAgICAgYWRkQ29uZmlybWF0aW9uKFRyYW5zSGFzaCk7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKFRyYW5zSGFzaCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGV4ZWN1dGVUcmFuc2FjdGlvbihieXRlczMyIFRyYW5zSGFzaCkgcHVibGljIG5vdEV4ZWN1dGVkKFRyYW5zSGFzaCl7CiAgICAgICAgaWYgKGlzQ29uZmlybWVkKFRyYW5zSGFzaCkpIHsKCQkJVHJhbnNhY3Rpb25zW1RyYW5zSGFzaF0uZXhlY3V0ZWQgPSB0cnVlOwogICAgICAgICAgICByZXF1aXJlKFRyYW5zYWN0aW9uc1tUcmFuc0hhc2hdLmRlc3RpbmF0aW9uLmNhbGwudmFsdWUoVHJhbnNhY3Rpb25zW1RyYW5zSGFzaF0udmFsdWUpKFRyYW5zYWN0aW9uc1tUcmFuc0hhc2hdLmRhdGEpKTsKICAgICAgICAgICAgRXhlY3V0aW9uKFRyYW5zSGFzaCk7CiAgICAgICAgfQogICAgfQoJCglmdW5jdGlvbiBBY2NvdW50Vm9pZChhZGRyZXNzIF9mcm9tKSBvbmx5T3duZXIgcHVibGljewoJCXJlcXVpcmUgKGJhbGFuY2VPZltfZnJvbV0gPiAwKTsgCgkJdWludDI1NiBDdXJyZW50QmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dOwoJCXVpbnQyNTYgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBDdXJyZW50QmFsYW5jZXM7ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBDdXJyZW50QmFsYW5jZXM7CgkJVm9pZEFjY291bnQoX2Zyb20sIG1zZy5zZW5kZXIsIEN1cnJlbnRCYWxhbmNlcyk7CgkJYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPT0gcHJldmlvdXNCYWxhbmNlcyk7CQoJfQp9'.
	

]
