Class {
	#name : #SRT4ae7e2524c821bbd2fe4a55aa263ac74e756fbb7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ae7e2524c821bbd2fe4a55aa263ac74e756fbb7 >> base64 [
	^ ''.
	

]
