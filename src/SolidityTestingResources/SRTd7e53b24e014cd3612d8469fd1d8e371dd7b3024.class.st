Class {
	#name : #SRTd7e53b24e014cd3612d8469fd1d8e371dd7b3024,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7e53b24e014cd3612d8469fd1d8e371dd7b3024 >> base64 [
	^ ''.
	

]
