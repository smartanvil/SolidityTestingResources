Class {
	#name : #SRT54186df214506ff5613196170d1bd576895193ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT54186df214506ff5613196170d1bd576895193ab >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IElFUkMyMCB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCn0KCmNvbnRyYWN0IEJUQ1BUb2tlbiBpcyBJRVJDMjAgewoKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRva2VuIHByb3BlcnRpZXMKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJCaXRjb2luUGVzbyI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJCVENQIjsKICAgIHVpbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludCBwdWJsaWMgX3RvdGFsU3VwcGx5ID0gMjEwMDAwMDBlMTg7CiAgICB1aW50IHB1YmxpYyBfbGVmdFN1cHBseSA9IDIxMDAwMDAwZTE4OwoKICAgIC8vIEJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwoKICAgIC8vIE93bmVyIG9mIFRva2VuCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogICAgdWludCBwdWJsaWMgUFJJQ0UgPSAxMDAwOwoKICAgIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCgogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvLyBtb2RpZmllciB0byBhbGxvdyBvbmx5IG93bmVyIGhhcyBmdWxsIGNvbnRyb2wgb24gdGhlIGZ1bmN0aW9uCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8gQG5vdGljZSBCVENQVG9rZW4gQ29udHJhY3QKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MKICAgIGZ1bmN0aW9uIEJUQ1BUb2tlbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBzdGFydFRpbWUgPSBub3c7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7IAogICAgfQoKICAgIC8vIFBheWFibGUgbWV0aG9kCiAgICAvLyBAbm90aWNlIEFueW9uZSBjYW4gYnV5IHRoZSB0b2tlbnMgb24gdG9rZW5zYWxlIGJ5IHBheWluZyBldGhlcgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHRva2Vuc2FsZShtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIHRva2Vuc2FsZQogICAgLy8gQHBhcmFtIHJlY2lwaWVudCBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBUcmFuc2ZlcgogICAgZnVuY3Rpb24gdG9rZW5zYWxlKGFkZHJlc3MgcmVjaXBpZW50KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShyZWNpcGllbnQgIT0gMHgwKTsKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgdWludCB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKGdldFByaWNlKCkpOwoKICAgICAgICByZXF1aXJlKF9sZWZ0U3VwcGx5ID49IHRva2Vucyk7CgogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IGJhbGFuY2VzW293bmVyXS5zdWIodG9rZW5zKTsKICAgICAgICBiYWxhbmNlc1tyZWNpcGllbnRdID0gYmFsYW5jZXNbcmVjaXBpZW50XS5hZGQodG9rZW5zKTsKCiAgICAgICAgX2xlZnRTdXBwbHkgPSBfbGVmdFN1cHBseS5zdWIodG9rZW5zKTsKCiAgICAgICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCByZWNpcGllbnQsIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRvdGFsIHRva2VucyBzdXBwbGllZAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICB9CgogICAgLy8gV2hhdCBpcyB0aGUgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudD8KICAgIC8vIEBwYXJhbSB3aG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHBhcnRpY3VsYXIgYWNjb3VudAogICAgLy8gQHJldHVybiB0aGUgYmFsYW5hY2UgdGhlIHBhcnRpY3VsYXIgYWNjb3VudAogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlc1t3aG9dOwogICAgfQoKICAgIC8vIFRva2VuIGRpc3RyaWJ1dGlvbiB0byBmb3VuZGVyLCBkZXZlbG9tZW50IHRlYW0sIHBhcnRuZXJzLCBjaGFyaXR5LCBhbmQgYm91bnR5CiAgICBmdW5jdGlvbiBzZW5kQlRDUFRva2VuKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICB0byAhPSAweDAgJiYgdmFsdWUgPiAwICYmIF9sZWZ0U3VwcGx5ID49IHZhbHVlCiAgICAgICAgKTsKCiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZCh2YWx1ZSk7CiAgICAgICAgX2xlZnRTdXBwbHkgPSBfbGVmdFN1cHBseS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG93bmVyLCB0bywgdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbmRCVENQVG9rZW5Ub011bHRpQWRkcihhZGRyZXNzW10gbGlzdEFkZHJlc3NlcywgdWludDI1NltdIGFtb3VudCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGxpc3RBZGRyZXNzZXMubGVuZ3RoID09IGFtb3VudC5sZW5ndGgpOyAKICAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbGlzdEFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcmVxdWlyZShsaXN0QWRkcmVzc2VzW2ldICE9IDB4MCk7IAogICAgICAgICAgICAgICAgYmFsYW5jZXNbbGlzdEFkZHJlc3Nlc1tpXV0gPSBiYWxhbmNlc1tsaXN0QWRkcmVzc2VzW2ldXS5hZGQoYW1vdW50W2ldKTsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW293bmVyXSA9IGJhbGFuY2VzW293bmVyXS5zdWIoYW1vdW50W2ldKTsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKG93bmVyLCBsaXN0QWRkcmVzc2VzW2ldLCBhbW91bnRbaV0pOwogICAgICAgICAgICAgICAgX2xlZnRTdXBwbHkgPSBfbGVmdFN1cHBseS5zdWIoYW1vdW50W2ldKTsKICAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3Ryb3lCVENQVG9rZW4oYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgICAgICB0byAhPSAweDAgJiYgdmFsdWUgPiAwICYmIF90b3RhbFN1cHBseSA+PSB2YWx1ZQogICAgICAgICAgICApOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5zdWIodmFsdWUpOwogICAgfQoKICAgIC8vIEBub3RpY2Ugc2VuZCBgdmFsdWVgIHRva2VuIHRvIGB0b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLy8gQG5vdGljZSBzZW5kIGB2YWx1ZWAgdG9rZW4gdG8gYHRvYCBmcm9tIGBmcm9tYAogICAgLy8gQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8gQHBhcmFtIHRvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vIEBwYXJhbSB2YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBUcmFuc2ZlcgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA+PSB2YWx1ZSAmJiBiYWxhbmNlc1tmcm9tXSA+PSB2YWx1ZSAmJiB2YWx1ZSA+IDAKICAgICAgICApOwogICAgICAgIGJhbGFuY2VzW2Zyb21dID0gYmFsYW5jZXNbZnJvbV0uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLy8gQWxsb3cgc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSB2YWx1ZSBhbW91bnQuCiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIHZhbHVlLgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgdG8gYmUgYXBwcm92ZWQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIEFwcHJvdmFsCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgdmFsdWUgPiAwCiAgICAgICAgKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwogICAgfQoKICAgIC8vIENoZWNrIHRoZSBhbGxvd2VkIHZhbHVlIGZvciB0aGUgc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIG93bmVyCiAgICAvLyBAcGFyYW0gb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIG93bmVyCiAgICAvLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgc3BlbmRlcgogICAgLy8gQHJldHVybiB0aGUgYW1vdW50IHdoaWNoIHNwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIG93bmVyCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW3NwZW5kZXJdOwogICAgfQoKICAgIC8vIEdldCBjdXJyZW50IHByaWNlIG9mIGEgVG9rZW4KICAgIC8vIEByZXR1cm4gdGhlIHByaWNlIG9yIHRva2VuIHZhbHVlIGZvciBhIGV0aGVyCiAgICBmdW5jdGlvbiBnZXRQcmljZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHJlc3VsdCkgewogICAgICAgIHJldHVybiBQUklDRTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb2tlbkRldGFpbCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcsIHN0cmluZywgdWludDI1NikgewoJcmV0dXJuIChuYW1lLCBzeW1ib2wsIF90b3RhbFN1cHBseSk7CiAgICB9Cn0='.
	

]
