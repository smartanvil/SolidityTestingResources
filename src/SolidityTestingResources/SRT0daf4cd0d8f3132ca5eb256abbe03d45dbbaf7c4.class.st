Class {
	#name : #SRT0daf4cd0d8f3132ca5eb256abbe03d45dbbaf7c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0daf4cd0d8f3132ca5eb256abbe03d45dbbaf7c4 >> base64 [
	^ ''.
	

]
