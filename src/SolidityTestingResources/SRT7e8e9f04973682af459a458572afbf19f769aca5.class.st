Class {
	#name : #SRT7e8e9f04973682af459a458572afbf19f769aca5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e8e9f04973682af459a458572afbf19f769aca5 >> base64 [
	^ ''.
	

]
