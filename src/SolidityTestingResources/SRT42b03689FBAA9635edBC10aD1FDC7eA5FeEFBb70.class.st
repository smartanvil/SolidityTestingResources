Class {
	#name : #SRT42b03689FBAA9635edBC10aD1FDC7eA5FeEFBb70,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42b03689FBAA9635edBC10aD1FDC7eA5FeEFBb70 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoKLy8vIEB0aXRsZSAgQml0RGVncmVlIHRva2VuIHByZXNhbGUgLSBodHRwczovL3d3dy5iaXRkZWdyZWUub3JnIChCREcpIC0gY3Jvd2RmdW5kaW5nIGNvZGUKLy8vIFdoaXRlcGFwZXI6Ci8vLyAgaHR0cHM6Ly93d3cuYml0ZGVncmVlLm9yZy93aGl0ZS1wYXBlci5wZGYKCmNvbnRyYWN0IEJpdERlZ3JlZVRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJCaXREZWdyZWUiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQkRHIjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbnNQZXJFdGggPSAxOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgaG93TWFueUV0aGVySW5XZWlUb0JlY29tZU93bmVyID0gMTAwMCBldGhlcjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGhvd01hbnlFdGhlckluV2VpVG9LaWxsQ29udHJhY3QgPSA1MDAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBob3dNYW55RXRoZXJJbldlaVRvQ2hhbmdlU3ltYm9sTmFtZSA9IDQwMCBldGhlcjsKICAgIAogICAgYm9vbCBwdWJsaWMgZnVuZGluZyA9IHRydWU7CgogICAgLy8gVGhlIGN1cnJlbnQgdG90YWwgdG9rZW4gc3VwcGx5LgogICAgdWludDI1NiB0b3RhbFRva2VucyA9IDEwMDA7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IE1pZ3JhdGUoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBmdW5jdGlvbiBCaXREZWdyZWVUb2tlbigpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXT0xMDAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZU5hbWVTeW1ib2woc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCkgcGF5YWJsZSBleHRlcm5hbAogICAgewogICAgICAgIGlmIChtc2cuc2VuZGVyPT1vd25lciB8fCBtc2cudmFsdWUgPj1ob3dNYW55RXRoZXJJbldlaVRvQ2hhbmdlU3ltYm9sTmFtZSkKICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSBfbmFtZTsKICAgICAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICB9CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIgKGFkZHJlc3MgX25ld293bmVyKSBwYXlhYmxlIGV4dGVybmFsCiAgICB7CiAgICAgICAgaWYgKG1zZy52YWx1ZT49aG93TWFueUV0aGVySW5XZWlUb0JlY29tZU93bmVyKQogICAgICAgIHsKICAgICAgICAgICAgb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgb3duZXI9X25ld293bmVyOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBraWxsQ29udHJhY3QgKCkgcGF5YWJsZSBleHRlcm5hbAogICAgewogICAgICAgIGlmIChtc2cuc2VuZGVyPT1vd25lciB8fCBtc2cudmFsdWUgPj1ob3dNYW55RXRoZXJJbldlaVRvS2lsbENvbnRyYWN0KQogICAgICAgIHsKICAgICAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgICAgICB9CiAgICB9CiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlciBgX3ZhbHVlYCB0b2tlbnMgZnJvbSBzZW5kZXIncyBhY2NvdW50CiAgICAvLy8gYG1zZy5zZW5kZXJgIHRvIHByb3ZpZGVkIGFjY291bnQgYWRkcmVzcyBgX3RvYC4KICAgIC8vLyBAbm90aWNlIFRoaXMgZnVuY3Rpb24gaXMgZGlzYWJsZWQgZHVyaW5nIHRoZSBmdW5kaW5nLgogICAgLy8vIEBkZXYgUmVxdWlyZWQgc3RhdGU6IE9wZXJhdGlvbmFsCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW5zIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgLy8gQWJvcnQgaWYgbm90IGluIE9wZXJhdGlvbmFsIHN0YXRlLgogICAgICAgIAogICAgICAgIHZhciBzZW5kZXJCYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKHNlbmRlckJhbGFuY2UgPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgc2VuZGVyQmFsYW5jZSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2VuZGVyQmFsYW5jZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWludFRvKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBBYm9ydCBpZiBub3QgaW4gT3BlcmF0aW9uYWwgc3RhdGUuCiAgICAgICAgCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsVG9rZW5zOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCiAgICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICApIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICAgCiAgICAgICAgIHJldHVybiB0cnVlOwogICAgIH0KLy8gQ3Jvd2RmdW5kaW5nOgoKICAgIC8vLyBAbm90aWNlIENyZWF0ZSB0b2tlbnMgd2hlbiBmdW5kaW5nIGlzIGFjdGl2ZS4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIHN0YXRlOiBGdW5kaW5nIEFjdGl2ZQogICAgLy8vIEBkZXYgU3RhdGUgdHJhbnNpdGlvbjogLT4gRnVuZGluZyBTdWNjZXNzIChvbmx5IGlmIGNhcCByZWFjaGVkKQogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBleHRlcm5hbCB7CiAgICAgICAgLy8gQWJvcnQgaWYgbm90IGluIEZ1bmRpbmcgQWN0aXZlIHN0YXRlLgogICAgICAgIC8vIFRoZSBjaGVja3MgYXJlIHNwbGl0IChpbnN0ZWFkIG9mIHVzaW5nIG9yIG9wZXJhdG9yKSBiZWNhdXNlIGl0IGlzCiAgICAgICAgLy8gY2hlYXBlciB0aGlzIHdheS4KICAgICAgICBpZiAoIWZ1bmRpbmcpIHJldmVydCgpOwogICAgICAgIAogICAgICAgIC8vIERvIG5vdCBhbGxvdyBjcmVhdGluZyAwIG9yIG1vcmUgdGhhbiB0aGUgY2FwIHRva2Vucy4KICAgICAgICBpZiAobXNnLnZhbHVlID09IDApIHJldmVydCgpOwogICAgICAgIAogICAgICAgIHZhciBudW1Ub2tlbnMgPSBtc2cudmFsdWUgKiAoMTAwMC4wL3RvdGFsVG9rZW5zKTsKICAgICAgICB0b3RhbFRva2VucyArPSBudW1Ub2tlbnM7CgogICAgICAgIC8vIEFzc2lnbiBuZXcgdG9rZW5zIHRvIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBudW1Ub2tlbnM7CgogICAgICAgIC8vIExvZyB0b2tlbiBjcmVhdGlvbiBldmVudAogICAgICAgIFRyYW5zZmVyKDAsIG1zZy5zZW5kZXIsIG51bVRva2Vucyk7CiAgICB9Cn0='.
	

]
