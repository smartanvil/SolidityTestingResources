Class {
	#name : #SRT40395044ac3c0c57051906da938b54bd6557f212,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT40395044ac3c0c57051906da938b54bd6557f212 >> base64 [
	^ ''.
	

]
