Class {
	#name : #SRT268b7976e94e84a48bf8b2b57ba34b59ed836a74,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT268b7976e94e84a48bf8b2b57ba34b59ed836a74 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBFUkMgVG9rZW4gU3RhbmRhcmQgIzIwIEludGVyZmFjZQogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCmNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7CgogIC8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgX3RvCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eS4KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgd2hpY2ggX3NwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lcgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAvLyBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLgogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBBSUNvaW4gLSBTbWFydCBDb250cmFjdCB3aXRoIHRva2VuIGFuZCBiYWxsb3QgaGFuZGxpbmcKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCmNvbnRyYWN0IEFJQ29pbiBpcyBFUkMyMEludGVyZmFjZSB7CgogIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAqIENPSU4gZGF0YSAvIGZ1bmN0aW9ucwogICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgLyogVG9rZW4gY29uc3RhbnRzICovCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ0FJQ29pbic7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAnWEFJJzsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc21hbGxlc3RVbml0ID0gJ0hvZnN0YWR0ZXInOwoKICAvKiBUb2tlbiBpbnRlcm5hbCBkYXRhICovCiAgYWRkcmVzcyBtX2FkbWluaXN0cmF0b3I7CiAgdWludDI1NiBtX3RvdGFsU3VwcGx5OwoKICAvKiBDdXJyZW50IGJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQgKi8KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qIEFjY291bnQgaG9sZGVyIGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50ICovCiAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIC8qIE9uZS10aW1lIGNyZWF0ZSBmdW5jdGlvbjogaW5pdGlhbGl6ZSB0aGUgc3VwcGx5IGFuZCBzZXQgdGhlIGFkbWluIGFkZHJlc3MgKi8KICBmdW5jdGlvbiBBSUNvaW4gKHVpbnQyNTYgX2luaXRpYWxTdXBwbHkpIHsKICAgIG1fYWRtaW5pc3RyYXRvciA9IG1zZy5zZW5kZXI7CiAgICBtX3RvdGFsU3VwcGx5ID0gX2luaXRpYWxTdXBwbHk7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9pbml0aWFsU3VwcGx5OwogIH0KCiAgLyogR2V0IHRoZSBhZG1pbiBhZGRyZXNzICovCiAgZnVuY3Rpb24gYWRtaW5pc3RyYXRvcigpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgYWRtaW5BZGRyZXNzKSB7CiAgICByZXR1cm4gbV9hZG1pbmlzdHJhdG9yOwogIH0KCiAgLyogR2V0IHRoZSB0b3RhbCBjb2luIHN1cHBseSAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgcmV0dXJuIG1fdG90YWxTdXBwbHk7CiAgfQoKICAvKiBHZXQgdGhlIGJhbGFuY2Ugb2YgYSBzcGVjaWZpYyBhY2NvdW50IGJ5IGl0cyBhZGRyZXNzICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgLyogVHJhbnNmZXIgYW4gYW1vdW50IGZyb20gdGhlIG93bmVyJ3MgYWNjb3VudCB0byBhbiBpbmRpY2F0ZWQgYWNjb3VudCAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF9hbW91bnQKICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXQogICAgICAgICYmICghIGFjY291bnRIYXNDdXJyZW50Vm90ZShtc2cuc2VuZGVyKSkpIHsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIC8qIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICogVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgKiB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQogICAqIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IHRoZSBjb21tYW5kIHNob3VsZCBmYWlsIHVubGVzcyB0aGUgX2Zyb20gYWNjb3VudCBoYXMKICAgKiBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQogICAqIHRoZXNlIHN0YW5kYXJkaXplZCBBUElzIGZvciBhcHByb3ZhbDoKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10KICAgICAgICAmJiAoISBhY2NvdW50SGFzQ3VycmVudFZvdGUoX2Zyb20pKSkgewogICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsKICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICAvKiBQcmUtYXV0aG9yaXplIGFuIGFkZHJlc3MgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAqIERvaW5nIHNvICh1c2luZyB0cmFuc2ZlckZyb20pIHJlZHVjZXMgdGhlIHJlbWFpbmluZyBhdXRob3JpemVkIGFtb3VudCwKICAgKiBhcyB3ZWxsIGFzIHRoZSBhY3R1YWwgYWNjb3VudCBiYWxhbmNlKQogICAqIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIGF1dGhvcml6ZWQgYW1vdW50LgogICAqIFRoZXJlZm9yZSwgdG8gY2FuY2VsIGFuIGF1dGhvcml6YXRpb24sIHNpbXBseSB3cml0ZSBhIHplcm8gYW1vdW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyogR2V0IHRoZSBjdXJyZW50bHkgYXV0aG9yaXplZCB0aGF0IGNhbiBiZSB3aXRoZHJhd24gYnkgYWNjb3VudCBfc3BlbmRlciBmcm9tIGFjY291bnQgX293bmVyICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgKiBCQUxMT1QgZGF0YSAvIGZ1bmN0aW9ucwogICAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgLyogRGV2IE5vdGU6IGNyZWF0aW5nIGEgc3RydWN0IHRoYXQgY29udGFpbmVkIGEgc3RyaW5nLCB1aW50IHZhbHVlcyBhbmQKICAgKiBhbiBhcnJheSBvZiBvcHRpb24gc3RydWN0cywgZXRjLCB3b3VsZCBjb25zaXN0ZW50bHkgZmFpbC4KICAgKiBTbyB0aGUgYmFsbG90IGRldGFpbHMgYXJlIGhlbGQgaW4gc2VwYXJhdGUgbWFwcGluZ3Mgd2l0aCBhIGNvbW1vbiBpbnRlZ2VyCiAgICoga2V5IGZvciBlYWNoIGJhbGxvdC4gVGhlIElEcyBhcmUgMS1pbmRleGVkLCBzZXF1ZW50aWFsIGFuZCBjb250aWd1b3VzLgogICAqLwoKICAvKiBCYXNpYyBiYWxsb3QgZGV0YWlsczogdGltZSBmcmFtZSBhbmQgbnVtYmVyIG9mIG9wdGlvbnMgKi8KICBzdHJ1Y3QgQmFsbG90RGV0YWlscyB7CiAgICB1aW50MjU2IHN0YXJ0OwogICAgdWludDI1NiBlbmQ7CiAgICB1aW50MzIgbnVtT3B0aW9uczsgLy8gMS1pbmRleGVkIGZvciByZWFkYWJpbGl0eQogICAgYm9vbCBzZWFsZWQ7CiAgfQoKICB1aW50MzIgcHVibGljIG51bUJhbGxvdHMgPSAwOyAvLyAxLWluZGV4ZWQgZm9yIHJlYWRhYmlsaXR5CiAgbWFwcGluZyAodWludDMyID0+IHN0cmluZykgcHVibGljIGJhbGxvdE5hbWVzOwogIG1hcHBpbmcgKHVpbnQzMiA9PiBCYWxsb3REZXRhaWxzKSBwdWJsaWMgYmFsbG90RGV0YWlsczsKICBtYXBwaW5nICh1aW50MzIgPT4gbWFwcGluZyAodWludDMyID0+IHN0cmluZykgKSBwdWJsaWMgYmFsbG90T3B0aW9uczsKCiAgLyogQ3JlYXRlIGEgbmV3IGJhbGxvdCBhbmQgc2V0IHRoZSBiYXNpYyBkZXRhaWxzIChwcm9wb3NhbCBkZXNjcmlwdGlvbiwgZGF0ZXMpCiAgICogVGhlIGJhbGxvdCBzdGlsbCBuZWVkIHRvIGhhdmUgb3B0aW9ucyBhZGRlZCBhbmQgdGhlbiB0byBiZSBzZWFsZWQKICAgKi8KICBmdW5jdGlvbiBhZG1pbkFkZEJhbGxvdChzdHJpbmcgX3Byb3Bvc2FsLCB1aW50MjU2IF9zdGFydCwgdWludDI1NiBfZW5kKSB7CgogICAgLyogQWRtaW4gZnVuY3Rpb25zIG11c3QgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBjcmVhdG9yLiAqLwogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1fYWRtaW5pc3RyYXRvcik7CgogICAgLyogQ3JlYXRlIGFuZCBzdG9yZSB0aGUgbmV3IGJhbGxvdCBvYmplY3RzICovCiAgICBudW1CYWxsb3RzKys7CiAgICB1aW50MzIgYmFsbG90SWQgPSBudW1CYWxsb3RzOwogICAgYmFsbG90TmFtZXNbYmFsbG90SWRdID0gX3Byb3Bvc2FsOwogICAgYmFsbG90RGV0YWlsc1tiYWxsb3RJZF0gPSBCYWxsb3REZXRhaWxzKF9zdGFydCwgX2VuZCwgMCwgZmFsc2UpOwogIH0KCiAgLyogQ3JlYXRlIGEgbmV3IGJhbGxvdCBhbmQgc2V0IHRoZSBiYXNpYyBkZXRhaWxzIChwcm9wb3NhbCBkZXNjcmlwdGlvbiwgZGF0ZXMpCiAgICogVGhlIGJhbGxvdCBzdGlsbCBuZWVkIHRvIGhhdmUgb3B0aW9ucyBhZGRlZCBhbmQgdGhlbiB0byBiZSBzZWFsZWQKICAgKi8KICBmdW5jdGlvbiBhZG1pbkFtZW5kQmFsbG90KHVpbnQzMiBfYmFsbG90SWQsIHN0cmluZyBfcHJvcG9zYWwsIHVpbnQyNTYgX3N0YXJ0LCB1aW50MjU2IF9lbmQpIHsKCiAgICAvKiBBZG1pbiBmdW5jdGlvbnMgbXVzdCBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IGNyZWF0b3IuICovCiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbV9hZG1pbmlzdHJhdG9yKTsKCiAgICAvKiB2ZXJpZnkgdGhhdCB0aGUgYmFsbG90IGV4aXN0cyAqLwogICAgcmVxdWlyZShfYmFsbG90SWQgPiAwICYmIF9iYWxsb3RJZCA8PSBudW1CYWxsb3RzKTsKCiAgICAvKiB1cGRhdGUgdGhlIGJhbGxvdCBvYmplY3QgKi8KICAgIGJhbGxvdE5hbWVzW19iYWxsb3RJZF0gPSBfcHJvcG9zYWw7CiAgICBiYWxsb3REZXRhaWxzW19iYWxsb3RJZF0uc3RhcnQgPSBfc3RhcnQ7CiAgICBiYWxsb3REZXRhaWxzW19iYWxsb3RJZF0uZW5kID0gX2VuZDsKICB9CgogIC8qIEFkZCBhbiBvcHRpb24gdG8gYW4gZXhpc3RpbmcgQmFsbG90CiAgICovCiAgZnVuY3Rpb24gYWRtaW5BZGRCYWxsb3RPcHRpb24odWludDMyIF9iYWxsb3RJZCwgc3RyaW5nIF9vcHRpb24pIHsKCiAgICAvKiBBZG1pbiBmdW5jdGlvbnMgbXVzdCBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IGNyZWF0b3IuICovCiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbV9hZG1pbmlzdHJhdG9yKTsKCiAgICAvKiB2ZXJpZnkgdGhhdCB0aGUgYmFsbG90IGV4aXN0cyAqLwogICAgcmVxdWlyZShfYmFsbG90SWQgPiAwICYmIF9iYWxsb3RJZCA8PSBudW1CYWxsb3RzKTsKCiAgICAvKiBjYW5ub3QgY2hhbmdlIGEgYmFsbG90IG9uY2UgaXQgaXMgc2VhbGVkICovCiAgICBpZihpc0JhbGxvdFNlYWxlZChfYmFsbG90SWQpKSB7CiAgICAgIHJldmVydCgpOwogICAgfQoKICAgIC8qIHN0b3JlIHRoZSBuZXcgYmFsbG90IG9wdGlvbiAqLwogICAgYmFsbG90RGV0YWlsc1tfYmFsbG90SWRdLm51bU9wdGlvbnMgKz0gMTsKICAgIHVpbnQzMiBvcHRpb25JZCA9IGJhbGxvdERldGFpbHNbX2JhbGxvdElkXS5udW1PcHRpb25zOwogICAgYmFsbG90T3B0aW9uc1tfYmFsbG90SWRdW29wdGlvbklkXSA9IF9vcHRpb247CiAgfQoKICAvKiBBbWVuZCBhbmQgb3B0aW9uIGluIGFuIGV4aXN0aW5nIEJhbGxvdAogICAqLwogIGZ1bmN0aW9uIGFkbWluRWRpdEJhbGxvdE9wdGlvbih1aW50MzIgX2JhbGxvdElkLCB1aW50MzIgX29wdGlvbklkLCBzdHJpbmcgX29wdGlvbikgewoKICAgIC8qIEFkbWluIGZ1bmN0aW9ucyBtdXN0IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3QgY3JlYXRvci4gKi8KICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtX2FkbWluaXN0cmF0b3IpOwoKICAgIC8qIHZlcmlmeSB0aGF0IHRoZSBiYWxsb3QgZXhpc3RzICovCiAgICByZXF1aXJlKF9iYWxsb3RJZCA+IDAgJiYgX2JhbGxvdElkIDw9IG51bUJhbGxvdHMpOwoKICAgIC8qIGNhbm5vdCBjaGFuZ2UgYSBiYWxsb3Qgb25jZSBpdCBpcyBzZWFsZWQgKi8KICAgIGlmKGlzQmFsbG90U2VhbGVkKF9iYWxsb3RJZCkpIHsKICAgICAgcmV2ZXJ0KCk7CiAgICB9CgogICAgLyogdmFsaWRhdGUgdGhlIGJhbGxvdCBvcHRpb24gKi8KICAgIHJlcXVpcmUoX29wdGlvbklkID4gMCAmJiBfb3B0aW9uSWQgPD0gYmFsbG90RGV0YWlsc1tfYmFsbG90SWRdLm51bU9wdGlvbnMpOwoKICAgIC8qIHVwZGF0ZSB0aGUgYmFsbG90IG9wdGlvbiAqLwogICAgYmFsbG90T3B0aW9uc1tfYmFsbG90SWRdW19vcHRpb25JZF0gPSBfb3B0aW9uOwogIH0KCiAgLyogU2VhbCBhIGJhbGxvdCAtIGFmdGVyIHRoaXMgdGhlIGJhbGxvdCBpcyBvZmZpY2lhbCBhbmQgbm8gY2hhbmdlcyBjYW4gYmUgbWFkZS4KICAgKi8KICBmdW5jdGlvbiBhZG1pblNlYWxCYWxsb3QodWludDMyIF9iYWxsb3RJZCkgewoKICAgIC8qIEFkbWluIGZ1bmN0aW9ucyBtdXN0IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3QgY3JlYXRvci4gKi8KICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtX2FkbWluaXN0cmF0b3IpOwoKICAgIC8qIHZlcmlmeSB0aGF0IHRoZSBiYWxsb3QgZXhpc3RzICovCiAgICByZXF1aXJlKF9iYWxsb3RJZCA+IDAgJiYgX2JhbGxvdElkIDw9IG51bUJhbGxvdHMpOwoKICAgIC8qIGNhbm5vdCBjaGFuZ2UgYSBiYWxsb3Qgb25jZSBpdCBpcyBzZWFsZWQgKi8KICAgIGlmKGlzQmFsbG90U2VhbGVkKF9iYWxsb3RJZCkpIHsKICAgICAgcmV2ZXJ0KCk7CiAgICB9CgogICAgLyogc2V0IHRoZSBiYWxsb3Qgc2VhbCBmbGFnICovCiAgICBiYWxsb3REZXRhaWxzW19iYWxsb3RJZF0uc2VhbGVkID0gdHJ1ZTsKICB9CgogIC8qIEZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhIGJhbGxvdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MsIGJhc2VkIG9uIGl0cwogICAqIHN0YXJ0IGFuZCBlbmQgZGF0ZXMsIGFuZCB0aGF0IGl0IGhhcyBiZWVuIHNlYWxlZC4KICAgKi8KICBmdW5jdGlvbiBpc0JhbGxvdEluUHJvZ3Jlc3ModWludDMyIF9iYWxsb3RJZCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gKGlzQmFsbG90U2VhbGVkKF9iYWxsb3RJZCkKICAgICAgICAgICAgJiYgYmFsbG90RGV0YWlsc1tfYmFsbG90SWRdLnN0YXJ0IDw9IG5vdwogICAgICAgICAgICAmJiBiYWxsb3REZXRhaWxzW19iYWxsb3RJZF0uZW5kID49IG5vdyk7CiAgfQoKICAvKiBGdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYSBiYWxsb3QgaGFzIGVuZGVkLCBiYXNlZCBvbiBpdHMgZW5kIGRhdGUgKi8KICBmdW5jdGlvbiBoYXNCYWxsb3RFbmRlZCh1aW50MzIgX2JhbGxvdElkKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiAoYmFsbG90RGV0YWlsc1tfYmFsbG90SWRdLmVuZCA8IG5vdyk7CiAgfQoKICAvKiBGdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYSBiYWxsb3QgaGFzIGJlZW4gc2VhbGVkLCB3aGljaCBtZWFucyBpdCBoYXMgYmVlbgogICAqIGF1dGhvcml6ZWQgYnkgdGhlIGFkbWluaXN0cmF0b3IgYW5kIGNhbiBubyBsb25nZXIgYmUgY2hhbmdlZC4KICAgKi8KICBmdW5jdGlvbiBpc0JhbGxvdFNlYWxlZCh1aW50MzIgX2JhbGxvdElkKSBwcml2YXRlIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBiYWxsb3REZXRhaWxzW19iYWxsb3RJZF0uc2VhbGVkOwogIH0KCiAgLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICogVk9USU5HIGRhdGEgLyBmdW5jdGlvbnMKICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogIG1hcHBpbmcgKHVpbnQzMiA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpICkgcHVibGljIGJhbGxvdFZvdGVyczsKICBtYXBwaW5nICh1aW50MzIgPT4gbWFwcGluZyAodWludDMyID0+IHVpbnQyNTYpICkgcHVibGljIGJhbGxvdFZvdGVDb3VudDsKCiAgLyogZnVuY3Rpb24gdG8gYWxsb3cgYSBjb2luIGhvbGRlciBhZGQgdG8gdGhlIHZvdGUgY291bnQgb2YgYW4gb3B0aW9uIGluIGFuCiAgICogYWN0aXZlIGJhbGxvdC4gVGhlIHZvdGVzIGFkZGVkIGVxdWFscyB0aGUgYmFsYW5jZSBvZiB0aGUgYWNjb3VudC4gT25jZSB0aGlzIGlzIGNhbGxlZCBzdWNjZXNzZnVsbHkKICAgKiB0aGUgY29pbnMgY2Fubm90IGJlIHRyYW5zZmVycmVkIG91dCBvZiB0aGUgYWNjb3VudCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBiYWxsb3QuCiAgICoKICAgKiBOQjogVGhlIHRpbWluZyBvZiB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgdm90aW5nIHBlcmlvZCBpcyBkZXRlcm1pbmVkIGJ5CiAgICogdGhlIHRpbWVzdGFtcCBvZiB0aGUgYmxvY2sgaW4gd2hpY2ggdGhlIHRyYW5zYWN0aW9uIGlzIGluY2x1ZGVkLiBBcyBnaXZlbiBieQogICAqIHRoZSBjdXJyZW50IEV0aGVyZXVtIHN0YW5kYXJkIHRoaXMgaXMgKk5PVCogZ3VhcmFudGVlZCB0byBiZSBhY2N1cmF0ZSB0byBhbnkKICAgKiBnaXZlbiBleHRlcm5hbCB0aW1lIHNvdXJjZS4gVGhlcmVmb3JlLCB2b3RlcyBzaG91bGQgYmUgcGxhY2VkIHdlbGwgaW4gYWR2YW5jZQogICAqIG9mIHRoZSBVVEMgZW5kIHRpbWUgb2YgdGhlIEJhbGxvdC4KICAgKi8KICBmdW5jdGlvbiB2b3RlKHVpbnQzMiBfYmFsbG90SWQsIHVpbnQzMiBfc2VsZWN0ZWRPcHRpb25JZCkgewoKICAgIC8qIHZlcmlmeSB0aGF0IHRoZSBiYWxsb3QgZXhpc3RzICovCiAgICByZXF1aXJlKF9iYWxsb3RJZCA+IDAgJiYgX2JhbGxvdElkIDw9IG51bUJhbGxvdHMpOwoKICAgIC8qIEJhbGxvdCBtdXN0IGJlIGluIHByb2dyZXNzIGluIG9yZGVyIHRvIHZvdGUgKi8KICAgIHJlcXVpcmUoaXNCYWxsb3RJblByb2dyZXNzKF9iYWxsb3RJZCkpOwoKICAgIC8qIENhbGN1bGF0ZSB0aGUgYmFsYW5jZSB3aGljaCB3aGljaCB0aGUgY29pbiBob2xkZXIgaGFzIG5vdCB5ZXQgdm90ZWQsIHdoaWNoIGlzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4KICAgICAqIHRoZSBjdXJyZW50IGJhbGFuY2UgZm9yIHRoZSBzZW5kZXJzIGFkZHJlc3MgYW5kIHRoZSBhbW91bnQgdGhleSBhbHJlYWR5IHZvdGVkIGluIHRoaXMgYmFsbG90LgogICAgICogSWYgdGhlIGRpZmZlcmVuY2UgaXMgemVybywgdGhpcyBhdHRlbXB0IHRvIHZvdGUgd2lsbCBmYWlsLgogICAgICovCiAgICB1aW50MjU2IHZvdGFibGVCYWxhbmNlID0gYmFsYW5jZU9mKG1zZy5zZW5kZXIpIC0gYmFsbG90Vm90ZXJzW19iYWxsb3RJZF1bbXNnLnNlbmRlcl07CiAgICByZXF1aXJlKHZvdGFibGVCYWxhbmNlID4gMCk7CgogICAgLyogdmFsaWRhdGUgdGhlIGJhbGxvdCBvcHRpb24gKi8KICAgIHJlcXVpcmUoX3NlbGVjdGVkT3B0aW9uSWQgPiAwICYmIF9zZWxlY3RlZE9wdGlvbklkIDw9IGJhbGxvdERldGFpbHNbX2JhbGxvdElkXS5udW1PcHRpb25zKTsKCiAgICAvKiB1cGRhdGUgdGhlIHZvdGUgY291bnQgYW5kIHJlY29yZCB0aGUgdm90ZXIgKi8KICAgIGJhbGxvdFZvdGVDb3VudFtfYmFsbG90SWRdW19zZWxlY3RlZE9wdGlvbklkXSArPSB2b3RhYmxlQmFsYW5jZTsKICAgIGJhbGxvdFZvdGVyc1tfYmFsbG90SWRdW21zZy5zZW5kZXJdICs9IHZvdGFibGVCYWxhbmNlOwogIH0KCiAgLyogZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGFkZHJlc3MgaGFzIGFscmVhZHkgdm90ZWQgaW4gYSBnaXZlbiBiYWxsb3QgKi8KICBmdW5jdGlvbiBoYXNBZGRyZXNzVm90ZWRJbkJhbGxvdCh1aW50MzIgX2JhbGxvdElkLCBhZGRyZXNzIF92b3RlcikgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBoYXNWb3RlZCkgewogICAgcmV0dXJuIGJhbGxvdFZvdGVyc1tfYmFsbG90SWRdW192b3Rlcl0gPiAwOwogIH0KCiAgLyogZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGFjY291bnQgaGFzIHZvdGVkIGluIGFueSBjdXJyZW50IGJhbGxvdCAqLwogIGZ1bmN0aW9uIGFjY291bnRIYXNDdXJyZW50Vm90ZShhZGRyZXNzIF92b3RlcikgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgZm9yKHVpbnQzMiBpZCA9IDE7IGlkIDw9IG51bUJhbGxvdHM7IGlkKyspIHsKICAgICAgaWYgKGlzQmFsbG90SW5Qcm9ncmVzcyhpZCkgJiYgaGFzQWRkcmVzc1ZvdGVkSW5CYWxsb3QoaWQsIF92b3RlcikpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KfQ=='.
	

]
