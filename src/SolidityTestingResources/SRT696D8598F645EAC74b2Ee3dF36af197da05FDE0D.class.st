Class {
	#name : #SRT696D8598F645EAC74b2Ee3dF36af197da05FDE0D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT696D8598F645EAC74b2Ee3dF36af197da05FDE0D >> base64 [
	^ ''.
	

]
