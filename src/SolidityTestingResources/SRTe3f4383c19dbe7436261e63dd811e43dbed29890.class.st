Class {
	#name : #SRTe3f4383c19dbe7436261e63dd811e43dbed29890,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe3f4383c19dbe7436261e63dd811e43dbed29890 >> base64 [
	^ ''.
	

]
