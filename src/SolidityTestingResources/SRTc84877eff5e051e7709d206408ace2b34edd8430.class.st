Class {
	#name : #SRTc84877eff5e051e7709d206408ace2b34edd8430,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc84877eff5e051e7709d206408ace2b34edd8430 >> base64 [
	^ ''.
	

]
