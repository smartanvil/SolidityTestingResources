Class {
	#name : #SRT5ecf22fd1c54f4c01df5da427929c14a1090815f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ecf22fd1c54f4c01df5da427929c14a1090815f >> base64 [
	^ ''.
	

]
