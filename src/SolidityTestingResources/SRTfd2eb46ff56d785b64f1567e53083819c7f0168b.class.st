Class {
	#name : #SRTfd2eb46ff56d785b64f1567e53083819c7f0168b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfd2eb46ff56d785b64f1567e53083819c7f0168b >> base64 [
	^ 'LyoKICogRVJDMjAgaW50ZXJmYWNlCiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCgoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiID4gMCk7CiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KfQoKCgovKioKICogU3RhbmRhcmQgRVJDMjAgdG9rZW4gd2l0aCBTaG9ydCBIYW5kIEF0dGFjayBhbmQgYXBwcm92ZSgpIHJhY2UgY29uZGl0aW9uIG1pdGlnYXRpb24uCiAqCiAqIEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDoKICogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBTYWZlTWF0aCB7CgogIC8qIFRva2VuIHN1cHBseSBnb3QgaW5jcmVhc2VkIGFuZCBhIG5ldyBvd25lciByZWNlaXZlZCB0aGVzZSB0b2tlbnMgKi8KICBldmVudCBNaW50ZWQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwoKICAvKiBBY3R1YWwgYmFsYW5jZXMgb2YgdG9rZW4gaG9sZGVycyAqLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKCiAgLyogYXBwcm92ZSgpIGFsbG93YW5jZXMgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIC8qIEludGVyZmFjZSBkZWNsYXJhdGlvbiAqLwogIGZ1bmN0aW9uIGlzVG9rZW4oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCB3ZUFyZSkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIGlmICgoX3ZhbHVlICE9IDApICYmIChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSAhPSAwKSkgdGhyb3c7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKCgovKgogKiBPd25hYmxlCiAqCiAqIEJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lci4KICogUHJvdmlkZXMgb25seU93bmVyIG1vZGlmaWVyLCB3aGljaCBwcmV2ZW50cyBmdW5jdGlvbiBmcm9tIHJ1bm5pbmcgaWYgaXQgaXMgY2FsbGVkIGJ5IGFueW9uZSBvdGhlciB0aGFuIHRoZSBvd25lci4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCi8qKgogKiBIb2xkIHRva2VucyBmb3IgYSBncm91cCBpbnZlc3RvciBvZiBpbnZlc3RvcnMgdW50aWwgdGhlIHVubG9jayBkYXRlLgogKgogKiBBZnRlciB0aGUgdW5sb2NrIGRhdGUgdGhlIGludmVzdG9yIGNhbiBjbGFpbSB0aGVpciB0b2tlbnMuCiAqCiAqIFN0ZXBzCiAqCiAqIC0gUHJlcGFyZSBhIHNwcmVhZHNoZWV0IGZvciB0b2tlbiBhbGxvY2F0aW9uCiAqIC0gRGVwbG95IHRoaXMgY29udHJhY3QsIHdpdGggdGhlIHN1bSB0byB0b2tlbnMgdG8gYmUgZGlzdHJpYnV0ZWQsIGZyb20gdGhlIG93bmVyIGFjY291bnQKICogLSBDYWxsIHNldEludmVzdG9yIGZvciBhbGwgaW52ZXN0b3JzIGZyb20gdGhlIG93bmVyIGFjY291bnQgdXNpbmcgYSBsb2NhbCBzY3JpcHQgYW5kIENTViBpbnB1dAogKiAtIE1vdmUgdG9rZW5zVG9CZUFsbG9jYXRlZCBpbiB0aGlzIGNvbnRyYWN0IHVzaW5nIFN0YW5kYXJkVG9rZW4udHJhbnNmZXIoKQogKiAtIENhbGwgbG9jayBmcm9tIHRoZSBvd25lciBhY2NvdW50CiAqIC0gV2FpdCB1bnRpbCB0aGUgZnJlZXplIHBlcmlvZCBpcyBvdmVyCiAqIC0gQWZ0ZXIgdGhlIGZyZWV6ZSB0aW1lIGlzIG92ZXIgaW52ZXN0b3JzIGNhbiBjYWxsIGNsYWltKCkgZnJvbSB0aGVpciBhZGRyZXNzIHRvIGdldCB0aGVpciB0b2tlbnMKICoKICovCmNvbnRyYWN0IFRva2VuVmF1bHQgaXMgT3duYWJsZSB7CgogIC8qKiBIb3cgbWFueSBpbnZlc3RvcnMgd2UgaGF2ZSBub3cgKi8KICB1aW50IHB1YmxpYyBpbnZlc3RvckNvdW50OwoKICAvKiogSG93IG1hbnkgdG9rZW5zIGludmVzdG9ycyBoYXZlIGNsYWltZWQgc28gZmFyICovCiAgdWludCBwdWJsaWMgdG90YWxDbGFpbWVkOwoKICAvKiogSG93IG1hbnkgdG9rZW5zIG91ciBpbnRlcm5hbCBib29rIGtlZXBpbmcgdGVsbHMgdXMgdG8gaGF2ZSBhdCB0aGUgdGltZSBvZiBsb2NrKCkgd2hlbiBhbGwgaW52ZXN0b3IgZGF0YSBoYXMgYmVlbiBsb2FkZWQgKi8KICB1aW50IHB1YmxpYyB0b2tlbnNBbGxvY2F0ZWRUb3RhbDsKCiAgLyoqIEhvdyBtdWNoIHdlIGhhdmUgYWxsb2NhdGVkIHRvIHRoZSBpbnZlc3RvcnMgaW52ZXN0ZWQgKi8KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwoKICAvKiogSG93IG1hbnkgdG9rZW5zIGludmVzdG9ycyBoYXZlIGNsYWltZWQgKi8KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGNsYWltZWQ7CgogIC8qKiBXaGVuIG91ciBjbGFpbSBmcmVlemUgaXMgb3ZlciAoVU5JWCB0aW1lc3RhbXApICovCiAgdWludCBwdWJsaWMgZnJlZXplRW5kc0F0OwoKICAvKiogV2hlbiB0aGlzIHZhdWx0IHdhcyBsb2NrZWQgKFVOSVggdGltZXN0YW1wKSAqLwogIHVpbnQgcHVibGljIGxvY2tlZEF0OwoKICAvKiogV2UgY2FuIGFsc28gZGVmaW5lIG91ciBvd24gdG9rZW4sIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIElDTyBvbmUgKioqLwogIFN0YW5kYXJkVG9rZW4gcHVibGljIHRva2VuOwoKICAvKiogV2hhdCBpcyBvdXIgY3VycmVudCBzdGF0ZS4KICAgKgogICAqIExvYWRpbmc6IEludmVzdG9yIGRhdGEgaXMgYmVpbmcgbG9hZGVkIGFuZCBjb250cmFjdCBub3QgeWV0IGxvY2tlZAogICAqIEhvbGRpbmc6IEhvbGRpbmcgdG9rZW5zIGZvciBpbnZlc3RvcnMKICAgKiBEaXN0cmlidXRpbmc6IEZyZWV6ZSB0aW1lIGlzIG92ZXIsIGludmVzdG9ycyBjYW4gY2xhaW0gdGhlaXIgdG9rZW5zCiAgICovCiAgZW51bSBTdGF0ZXtVbmtub3duLCBMb2FkaW5nLCBIb2xkaW5nLCBEaXN0cmlidXRpbmd9CgogIC8qKiBXZSBhbGxvY2F0ZWQgdG9rZW5zIGZvciBpbnZlc3RvciAqLwogIGV2ZW50IEFsbG9jYXRlZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHZhbHVlKTsKCiAgLyoqIFdlIGRpc3RyaWJ1dGVkIHRva2VucyB0byBhbiBpbnZlc3RvciAqLwogIGV2ZW50IERpc3RyaWJ1dGVkKGFkZHJlc3MgaW52ZXN0b3JzLCB1aW50IGNvdW50KTsKCiAgZXZlbnQgTG9ja2VkKCk7CgogIC8qKgogICAqIENyZWF0ZSBwcmVzYWxlIGNvbnRyYWN0IHdoZXJlIGxvY2sgdXAgcGVyaW9kIGlzIGdpdmVuIGRheXMKICAgKgogICAqIEBwYXJhbSBfZnJlZXplRW5kc0F0IFVOSVggdGltZXN0YW1wIHdoZW4gdGhlIHZhdWx0IHVubG9ja3MKICAgKiBAcGFyYW0gX3Rva2VuIFRva2VuIGNvbnRyYWN0IGFkZHJlc3Mgd2UgYXJlIGRpc3RyaWJ1dGluZwogICAqCiAgICovCiAgZnVuY3Rpb24gVG9rZW5WYXVsdCh1aW50IF9mcmVlemVFbmRzQXQsIFN0YW5kYXJkVG9rZW4gX3Rva2VuKSB7CgogICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgIC8vIEludmFsaWQgb3dlbnIKICAgIGlmKG93bmVyID09IDApIHsKICAgICAgdGhyb3c7CiAgICB9CgogICAgdG9rZW4gPSBfdG9rZW47CgogICAgLy8gQ2hlY2sgdGhlIGFkZHJlc3MgbG9va3MgbGlrZSBhIHRva2VuIGNvbnRyYWN0CiAgICBpZighdG9rZW4uaXNUb2tlbigpKSB7CiAgICAgIHRocm93OwogICAgfQoKICAgIC8vIEdpdmUgYXJndW1lbnQKICAgIGlmKF9mcmVlemVFbmRzQXQgPT0gMCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBmcmVlemVFbmRzQXQgPSBfZnJlZXplRW5kc0F0OwogIH0KCiAgLy8vIEBkZXYgQWRkIGEgcHJlc2FsZSBwYXJ0aWNpcGF0aW5nIGFsbG9jYXRpb24KICBmdW5jdGlvbiBzZXRJbnZlc3RvcihhZGRyZXNzIGludmVzdG9yLCB1aW50IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CgogICAgaWYobG9ja2VkQXQgPiAwKSB7CiAgICAgIC8vIENhbm5vdCBhZGQgbmV3IGludmVzdG9ycyBhZnRlciB0aGUgdmF1bHQgaXMgbG9ja2VkCiAgICAgIHRocm93OwogICAgfQoKICAgIGlmKGFtb3VudCA9PSAwKSB0aHJvdzsgLy8gTm8gZW1wdHkgYnV5cwoKICAgIC8vIERvbid0IGFsbG93IHJlc2V0CiAgICBpZihiYWxhbmNlc1tpbnZlc3Rvcl0gPiAwKSB7CiAgICAgIHRocm93OwogICAgfQoKICAgIGJhbGFuY2VzW2ludmVzdG9yXSA9IGFtb3VudDsKCiAgICBpbnZlc3RvckNvdW50Kys7CgogICAgdG9rZW5zQWxsb2NhdGVkVG90YWwgKz0gYW1vdW50OwoKICAgIEFsbG9jYXRlZChpbnZlc3RvciwgYW1vdW50KTsKICB9CgogIC8vLyBAZGV2IExvY2sgdGhlIHZhdWx0CiAgLy8vIEBwYXJhbSB0b2tlbnNUb0JlQWxsb2NhdGVkIFN1bSBmcm9tIHRoZSBzcHJlYWRzaGVldCBob3cgbXVjaCB0b2tlbnMgd2Ugc2hvdWxkIGdldCBvbiB0aGUgY29udHJhY3QuIElmIHRoZSBzdW0gZG9lcyBub3QgbWF0Y2ggYXQgdGhlIHRpbWUgb2YgdGhlIGxvY2sgdGhlIHZhdWx0IGlzIGZhdWx0eSBhbmQgbXVzdCBiZSByZWNyZWF0ZWQuCiAgLy8vICAgICAgLSBBbGwgYmFsYW5jZXMgaGF2ZSBiZWVuIGxvYWRlZCBpbiBjb3JyZWN0bHkKICAvLy8gICAgICAtIFRva2VucyBhcmUgdHJhbnNmZXJyZWQgb24gdGhpcyB2YXVsdCBjb3JyZWN0bHkKICAvLy8gICAgICAtIENoZWNrcyBhcmUgaW4gcGxhY2UgdG8gcHJldmVudCBjcmVhdGluZyBhIHZhdWx0IHRoYXQgaXMgbG9ja2VkIHdpdGggaW5jb3JyZWN0IHRva2VuIGJhbGFuY2VzLgogIGZ1bmN0aW9uIGxvY2sodWludCB0b2tlbnNUb0JlQWxsb2NhdGVkKSBvbmx5T3duZXIgewoKICAgIGlmKGxvY2tlZEF0ID4gMCkgewogICAgICB0aHJvdzsgLy8gQWxyZWFkeSBsb2NrZWQKICAgIH0KCiAgICAvLyBTcHJlYWRzaGVldCBzdW0gZG9lcyBub3QgbWF0Y2ggdG8gd2hhdCB3ZSBoYXZlIGxvYWRlZCB0byB0aGUgaW52ZXN0b3IgZGF0YQogICAgaWYodG9rZW5zQWxsb2NhdGVkVG90YWwgIT0gdG9rZW5zVG9CZUFsbG9jYXRlZCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICAvLyBEbyBub3QgbG9jayB0aGUgdmF1bHQgaWYgdGhlIGdpdmVuIHRva2VucyBhcmUgbm90IG9uIHRoaXMgY29udHJhY3QKICAgIGlmKHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAhPSB0b2tlbnNBbGxvY2F0ZWRUb3RhbCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBsb2NrZWRBdCA9IG5vdzsKCiAgICBMb2NrZWQoKTsKICB9CgogIC8vLyBAZGV2IEluIHRoZSBjYXNlIGxvY2tpbmcgZmFpbGVkLCB0aGVuIGFsbG93IHRoZSBvd25lciB0byByZWNsYWltIHRoZSB0b2tlbnMgb24gdGhlIGNvbnRyYWN0LgogIGZ1bmN0aW9uIHJlY292ZXJGYWlsZWRMb2NrKCkgb25seU93bmVyIHsKICAgIGlmKGxvY2tlZEF0ID4gMCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICAvLyBUcmFuc2ZlciBhbGwgdG9rZW5zIG9uIHRoaXMgY29udHJhY3QgYmFjayB0byB0aGUgb3duZXIKICAgIHRva2VuLnRyYW5zZmVyKG93bmVyLCB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpOwogIH0KCiAgLy8vIEBkZXYgR2V0IHRoZSBjdXJyZW50IGJhbGFuY2Ugb2YgdG9rZW5zIGluIHRoZSB2YXVsdAogIC8vLyBAcmV0dXJuIHVpbnQgSG93IG1hbnkgdG9rZW5zIHRoZXJlIGFyZSBjdXJyZW50bHkgaW4gdmF1bHQKICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgaG93TWFueVRva2Vuc0N1cnJlbnRseUluVmF1bHQpIHsKICAgIHJldHVybiB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgfQoKICAvLy8gQGRldiBDbGFpbSBOIGJvdWdodCB0b2tlbnMgdG8gdGhlIGludmVzdG9yIGFzIHRoZSBtc2cgc2VuZGVyCiAgZnVuY3Rpb24gY2xhaW0oKSB7CgogICAgYWRkcmVzcyBpbnZlc3RvciA9IG1zZy5zZW5kZXI7CgogICAgaWYobG9ja2VkQXQgPT0gMCkgewogICAgICB0aHJvdzsgLy8gV2Ugd2VyZSBuZXZlciBsb2NrZWQKICAgIH0KCiAgICBpZihub3cgPCBmcmVlemVFbmRzQXQpIHsKICAgICAgdGhyb3c7IC8vIFRyeWluZyB0byBjbGFpbSBlYXJseQogICAgfQoKICAgIGlmKGJhbGFuY2VzW2ludmVzdG9yXSA9PSAwKSB7CiAgICAgIC8vIE5vdCBvdXIgaW52ZXN0b3IKICAgICAgdGhyb3c7CiAgICB9CgogICAgaWYoY2xhaW1lZFtpbnZlc3Rvcl0gPiAwKSB7CiAgICAgIHRocm93OyAvLyBBbHJlYWR5IGNsYWltZWQKICAgIH0KCiAgICB1aW50IGFtb3VudCA9IGJhbGFuY2VzW2ludmVzdG9yXTsKCiAgICBjbGFpbWVkW2ludmVzdG9yXSA9IGFtb3VudDsKCiAgICB0b3RhbENsYWltZWQgKz0gYW1vdW50OwoKICAgIHRva2VuLnRyYW5zZmVyKGludmVzdG9yLCBhbW91bnQpOwoKICAgIERpc3RyaWJ1dGVkKGludmVzdG9yLCBhbW91bnQpOwogIH0KCiAgLy8vIEBkZXYgUmVzb2x2ZSB0aGUgY29udHJhY3QgdW1hbWJpZ2lvdXMgc3RhdGUKICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKFN0YXRlKSB7CiAgICBpZihsb2NrZWRBdCA9PSAwKSB7CiAgICAgIHJldHVybiBTdGF0ZS5Mb2FkaW5nOwogICAgfSBlbHNlIGlmKG5vdyA+IGZyZWV6ZUVuZHNBdCkgewogICAgICByZXR1cm4gU3RhdGUuRGlzdHJpYnV0aW5nOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIFN0YXRlLkhvbGRpbmc7CiAgICB9CiAgfQoKfQ=='.
	

]
