Class {
	#name : #SRT5cCedD68d2626976176B0cfCcF585Dae3923ceFc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5cCedD68d2626976176B0cfCcF585Dae3923ceFc >> base64 [
	^ ''.
	

]
