Class {
	#name : #SRT3f44b083973d5cDdAE571d61921d8e8f0248df43,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f44b083973d5cDdAE571d61921d8e8f0248df43 >> base64 [
	^ ''.
	

]
