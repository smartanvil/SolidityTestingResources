Class {
	#name : #SRTdd5dc6054aa77f21f6f4cee520320f1ef200991f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd5dc6054aa77f21f6f4cee520320f1ef200991f >> base64 [
	^ ''.
	

]
