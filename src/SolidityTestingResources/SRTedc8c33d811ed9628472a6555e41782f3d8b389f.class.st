Class {
	#name : #SRTedc8c33d811ed9628472a6555e41782f3d8b389f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTedc8c33d811ed9628472a6555e41782f3d8b389f >> base64 [
	^ ''.
	

]
