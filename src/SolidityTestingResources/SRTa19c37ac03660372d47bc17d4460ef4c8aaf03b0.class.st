Class {
	#name : #SRTa19c37ac03660372d47bc17d4460ef4c8aaf03b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa19c37ac03660372d47bc17d4460ef4c8aaf03b0 >> base64 [
	^ ''.
	

]
