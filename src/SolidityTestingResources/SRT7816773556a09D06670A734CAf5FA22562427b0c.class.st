Class {
	#name : #SRT7816773556a09D06670A734CAf5FA22562427b0c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7816773556a09D06670A734CAf5FA22562427b0c >> base64 [
	^ ''.
	

]
