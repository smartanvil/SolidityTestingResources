Class {
	#name : #SRTf8e6bacd9298df8b0aba67ef2ef8348fabc5ae8a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8e6bacd9298df8b0aba67ef2ef8348fabc5ae8a >> base64 [
	^ ''.
	

]
