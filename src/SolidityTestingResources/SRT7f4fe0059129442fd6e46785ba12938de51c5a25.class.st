Class {
	#name : #SRT7f4fe0059129442fd6e46785ba12938de51c5a25,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f4fe0059129442fd6e46785ba12938de51c5a25 >> base64 [
	^ ''.
	

]
