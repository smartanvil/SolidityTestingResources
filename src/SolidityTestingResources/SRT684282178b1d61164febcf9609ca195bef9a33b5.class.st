Class {
	#name : #SRT684282178b1d61164febcf9609ca195bef9a33b5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT684282178b1d61164febcf9609ca195bef9a33b5 >> base64 [
	^ ''.
	

]
