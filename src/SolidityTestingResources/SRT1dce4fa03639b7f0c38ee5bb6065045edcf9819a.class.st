Class {
	#name : #SRT1dce4fa03639b7f0c38ee5bb6065045edcf9819a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1dce4fa03639b7f0c38ee5bb6065045edcf9819a >> base64 [
	^ ''.
	

]
