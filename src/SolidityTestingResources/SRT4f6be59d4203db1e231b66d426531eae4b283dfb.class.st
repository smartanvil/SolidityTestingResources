Class {
	#name : #SRT4f6be59d4203db1e231b66d426531eae4b283dfb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f6be59d4203db1e231b66d426531eae4b283dfb >> base64 [
	^ 'Ly8gUGxheTJsaXZlSUNPIHRva2Vuc2FsZSBzbWFydCBjb250cmFjdC4KLy8gRGV2ZWxvcGVkIGJ5IFBoZW5vbS5UZWFtIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMjc0ZTQ5NDE0ODY3NTc0ZjQyNDk0ODRhMDk1MzQyNDY0YSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+CnByYWdtYSBzb2xpZGl0eSBeMC40LjE1OwoKLyoqCiAqICAgQHRpdGxlIFNhZmVNYXRoCiAqICAgQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiAgIEB0aXRsZSBFUkMyMAogKiAgIEBkZXYgU3RhbmRhcnQgRVJDMjAgdG9rZW4gaW50ZXJmYWNlCiAqLwoKY29udHJhY3QgRVJDMjAgewogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKCn0gCgovKioKICogICBAdGl0bGUgUGxheTJsaXZlSUNPIGNvbnRyYWN0ICAtIHRha2VzIGZ1bmRzIGZyb20gdXNlcnMgYW5kIGlzc3VlcyB0b2tlbnMKICovCmNvbnRyYWN0IFBsYXkybGl2ZUlDTyB7CiAgICAvLyBMVUMgLSBMZXZlbCBVcCBDb2luIHRva2VuIGNvbnRyYWN0CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIEx1Y1Rva2VuIHB1YmxpYyBMVUMgPSBuZXcgTHVjVG9rZW4odGhpcyk7CiAgICBQcmVzYWxlIHB1YmxpYyBwcmVTYWxlVG9rZW47CgogICAgLy8gVG9rZW4gcHJpY2UgcGFyYW1ldGVycwogICAgLy8gVGhlc2UgcGFyYW1ldGVzIGNhbiBiZSBjaGFuZ2VkIG9ubHkgYnkgbWFuYWdlciBvZiBjb250cmFjdAogICAgdWludCBwdWJsaWMgdG9rZW5zUGVyRG9sbGFyID0gMjA7CiAgICB1aW50IHB1YmxpYyByYXRlRXRoID0gNDQ2OyAvLyBSYXRlIFVTRCBwZXIgRVRICiAgICB1aW50IHB1YmxpYyB0b2tlblByaWNlID0gdG9rZW5zUGVyRG9sbGFyICogcmF0ZUV0aDsgLy8gRFRSQyBwZXIgRVRICiAgICAvL0Nyb3dkc2FsZSBwYXJhbWV0ZXJzCiAgICB1aW50IGNvbnN0YW50IHB1YmxpY0ljb1BhcnQgPSA2MjU7IC8vIDYyLDUlIG9mIFRvdGFsU3VwcGx5IGZvciBCb3VudHlGdW5kCiAgICB1aW50IGNvbnN0YW50IG9wZXJhdGlvbnNQYXJ0ID0gMTExOwogICAgdWludCBjb25zdGFudCBmb3VuZGVyc1BhcnQgPSAxMDQ7CiAgICB1aW50IGNvbnN0YW50IHBhcnRuZXJzUGFydCA9IDc4OyAvLyA3LDglIG9mIFRvdGFsU3VwcGx5IGZvciBwYXJuZXJzRnVuZAogICAgdWludCBjb25zdGFudCBhZHZpc29yc1BhcnQgPSA3MjsKICAgIHVpbnQgY29uc3RhbnQgYm91bnR5UGFydCA9IDEwOyAvLyAxJSBvZiBUb3RhbFN1cHBseSBmb3IgQm91bnR5RnVuZAogICAgdWludCBjb25zdGFudCBoYXJkQ2FwID0gMzAwMDAwMDAgKiB0b2tlbnNQZXJEb2xsYXIgKiAxZTE4OyAvLyAKICAgIHVpbnQgcHVibGljIHNvbGRBbW91bnQgPSAwOwogICAgLy8gT3V0cHV0IGV0aGVyZXVtIGFkZHJlc3NlcwogICAgYWRkcmVzcyBwdWJsaWMgQ29tcGFueTsKICAgIGFkZHJlc3MgcHVibGljIE9wZXJhdGlvbnNGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgRm91bmRlcnNGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgUGFydG5lcnNGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgQWR2aXNvcnNGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgQm91bnR5RnVuZDsKICAgIGFkZHJlc3MgcHVibGljIE1hbmFnZXI7IC8vIE1hbmFnZXIgY29udHJvbHMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIENvbnRyb2xsZXJfQWRkcmVzczE7IC8vIEZpcnN0IGFkZHJlc3MgdGhhdCBpcyB1c2VkIHRvIGJ1eSB0b2tlbnMgZm9yIG90aGVyIGNyeXB0b3MKICAgIGFkZHJlc3MgcHVibGljIENvbnRyb2xsZXJfQWRkcmVzczI7IC8vIFNlY29uZCBhZGRyZXNzIHRoYXQgaXMgdXNlZCB0byBidXkgdG9rZW5zIGZvciBvdGhlciBjcnlwdG9zCiAgICBhZGRyZXNzIHB1YmxpYyBDb250cm9sbGVyX0FkZHJlc3MzOyAvLyBUaGlyZCBhZGRyZXNzIHRoYXQgaXMgdXNlZCB0byBidXkgdG9rZW5zIGZvciBvdGhlciBjcnlwdG9zCiAgICBhZGRyZXNzIHB1YmxpYyBPcmFjbGU7IC8vIE9yYWNsZSBhZGRyZXNzCgogICAgLy8gUG9zc2libGUgSUNPIHN0YXR1c2VzCiAgICBlbnVtIFN0YXR1c0lDTyB7CiAgICAgICAgQ3JlYXRlZCwKICAgICAgICBQcmVJY29TdGFydGVkLAogICAgICAgIFByZUljb1BhdXNlZCwKICAgICAgICBQcmVJY29GaW5pc2hlZCwKICAgICAgICBJY29TdGFydGVkLAogICAgICAgIEljb1BhdXNlZCwKICAgICAgICBJY29GaW5pc2hlZAogICAgfQogICAgU3RhdHVzSUNPIHN0YXR1c0lDTyA9IFN0YXR1c0lDTy5DcmVhdGVkOwogICAgCiAgICAvLyBNYXBwaW5ncwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBzd2FwZWQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHN0cmluZykgcHVibGljIGtleXM7CiAgICAKICAgIC8vIEV2ZW50cyBMb2cKICAgIGV2ZW50IExvZ1N0YXJ0UHJlSUNPKCk7CiAgICBldmVudCBMb2dQYXVzZVByZUlDTygpOwogICAgZXZlbnQgTG9nRmluaXNoUHJlSUNPKCk7CiAgICBldmVudCBMb2dTdGFydElDTygpOwogICAgZXZlbnQgTG9nUGF1c2VJQ08oKTsKICAgIGV2ZW50IExvZ0ZpbmlzaElDTygpOwogICAgZXZlbnQgTG9nQnV5Rm9ySW52ZXN0b3IoYWRkcmVzcyBpbnZlc3RvciwgdWludCBsdWNWYWx1ZSwgc3RyaW5nIHR4SGFzaCk7CiAgICBldmVudCBMb2dTd2FwVG9rZW5zKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgdG9rZW5zQW1vdW50KTsKICAgIGV2ZW50IExvZ1JlZ2lzdGVyKGFkZHJlc3MgaW52ZXN0b3IsIHN0cmluZyBrZXkpOwoKICAgIC8vIE1vZGlmaWVycwogICAgLy8gQWxsb3dzIGV4ZWN1dGlvbiBieSB0aGUgbWFuYWdlciBvbmx5CiAgICBtb2RpZmllciBtYW5hZ2VyT25seSB7IAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBNYW5hZ2VyKTsKICAgICAgICBfOyAKICAgICB9CiAgICAvLyBBbGxvd3MgZXhlY3V0aW9uIGJ5IHRoZSBvcmFjbGUgb25seQogICAgbW9kaWZpZXIgb3JhY2xlT25seSB7IAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBPcmFjbGUpOwogICAgICAgIF87IAogICAgIH0KICAgIC8vIEFsbG93cyBleGVjdXRpb24gYnkgdGhlIG9uZSBvZiBjb250cm9sbGVycyBvbmx5CiAgICBtb2RpZmllciBjb250cm9sbGVyc09ubHkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIChtc2cuc2VuZGVyID09IENvbnRyb2xsZXJfQWRkcmVzczEpfHwKICAgICAgICAgICAgKG1zZy5zZW5kZXIgPT0gQ29udHJvbGxlcl9BZGRyZXNzMil8fAogICAgICAgICAgICAobXNnLnNlbmRlciA9PSBDb250cm9sbGVyX0FkZHJlc3MzKQogICAgICAgICk7CiAgICAgICAgXzsKICAgIH0KCgogICAvKioKICAgICogICBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgICAqLwogICAgZnVuY3Rpb24gUGxheTJsaXZlSUNPKAogICAgICAgIGFkZHJlc3MgX3ByZVNhbGVUb2tlbiwKICAgICAgICBhZGRyZXNzIF9Db21wYW55LAogICAgICAgIGFkZHJlc3MgX09wZXJhdGlvbnNGdW5kLAogICAgICAgIGFkZHJlc3MgX0ZvdW5kZXJzRnVuZCwKICAgICAgICBhZGRyZXNzIF9QYXJ0bmVyc0Z1bmQsCiAgICAgICAgYWRkcmVzcyBfQWR2aXNvcnNGdW5kLAogICAgICAgIGFkZHJlc3MgX0JvdW50eUZ1bmQsCiAgICAgICAgYWRkcmVzcyBfTWFuYWdlciwKICAgICAgICBhZGRyZXNzIF9Db250cm9sbGVyX0FkZHJlc3MxLAogICAgICAgIGFkZHJlc3MgX0NvbnRyb2xsZXJfQWRkcmVzczIsCiAgICAgICAgYWRkcmVzcyBfQ29udHJvbGxlcl9BZGRyZXNzMywKICAgICAgICBhZGRyZXNzIF9PcmFjbGUKICAgICAgICApIHB1YmxpYyB7CiAgICAgICAgcHJlU2FsZVRva2VuID0gUHJlc2FsZShfcHJlU2FsZVRva2VuKTsKICAgICAgICBDb21wYW55ID0gX0NvbXBhbnk7CiAgICAgICAgT3BlcmF0aW9uc0Z1bmQgPSBfT3BlcmF0aW9uc0Z1bmQ7CiAgICAgICAgRm91bmRlcnNGdW5kID0gX0ZvdW5kZXJzRnVuZDsKICAgICAgICBQYXJ0bmVyc0Z1bmQgPSBfUGFydG5lcnNGdW5kOwogICAgICAgIEFkdmlzb3JzRnVuZCA9IF9BZHZpc29yc0Z1bmQ7CiAgICAgICAgQm91bnR5RnVuZCA9IF9Cb3VudHlGdW5kOwogICAgICAgIE1hbmFnZXIgPSBfTWFuYWdlcjsKICAgICAgICBDb250cm9sbGVyX0FkZHJlc3MxID0gX0NvbnRyb2xsZXJfQWRkcmVzczE7CiAgICAgICAgQ29udHJvbGxlcl9BZGRyZXNzMiA9IF9Db250cm9sbGVyX0FkZHJlc3MyOwogICAgICAgIENvbnRyb2xsZXJfQWRkcmVzczMgPSBfQ29udHJvbGxlcl9BZGRyZXNzMzsKICAgICAgICBPcmFjbGUgPSBfT3JhY2xlOwogICAgfQoKICAgLyoqCiAgICAqICAgQGRldiBGdW5jdGlvbiB0byBzZXQgcmF0ZSBvZiBFVEggYW5kIHVwZGF0ZSB0b2tlbiBwcmljZQogICAgKiAgIEBwYXJhbSBfcmF0ZUV0aCAgICAgICBjdXJyZW50IEVUSCByYXRlCiAgICAqLwogICAgZnVuY3Rpb24gc2V0UmF0ZSh1aW50IF9yYXRlRXRoKSBleHRlcm5hbCBvcmFjbGVPbmx5IHsKICAgICAgICByYXRlRXRoID0gX3JhdGVFdGg7CiAgICAgICAgdG9rZW5QcmljZSA9IHRva2Vuc1BlckRvbGxhci5tdWwocmF0ZUV0aCk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIHN0YXJ0IFByZUlDTwogICAgKiAgIFNldHMgSUNPIHN0YXR1cyB0byBQcmVJY29TdGFydGVkCiAgICAqLwogICAgZnVuY3Rpb24gc3RhcnRQcmVJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICAgcmVxdWlyZShzdGF0dXNJQ08gPT0gU3RhdHVzSUNPLkNyZWF0ZWQgfHwgc3RhdHVzSUNPID09IFN0YXR1c0lDTy5QcmVJY29QYXVzZWQpOwogICAgICAgIHN0YXR1c0lDTyA9IFN0YXR1c0lDTy5QcmVJY29TdGFydGVkOwogICAgICAgIExvZ1N0YXJ0UHJlSUNPKCk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIHBhdXNlIFByZUlDTwogICAgKiAgIFNldHMgSUNPIHN0YXR1cyB0byBQcmVJY29QYXVzZWQKICAgICovCiAgICBmdW5jdGlvbiBwYXVzZVByZUljbygpIGV4dGVybmFsIG1hbmFnZXJPbmx5IHsKICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPID09IFN0YXR1c0lDTy5QcmVJY29TdGFydGVkKTsKICAgICAgIHN0YXR1c0lDTyA9IFN0YXR1c0lDTy5QcmVJY29QYXVzZWQ7CiAgICAgICBMb2dQYXVzZVByZUlDTygpOwogICAgfQoKICAgLyoqCiAgICAqICAgQGRldiBGdW5jdGlvbiB0byBmaW5pc2ggUHJlSUNPCiAgICAqICAgU2V0cyBJQ08gc3RhdHVzIHRvIFByZUljb0ZpbmlzaGVkCiAgICAqLwogICAgZnVuY3Rpb24gZmluaXNoUHJlSWNvKCkgZXh0ZXJuYWwgbWFuYWdlck9ubHkgewogICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPID09IFN0YXR1c0lDTy5QcmVJY29TdGFydGVkIHx8IHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uUHJlSWNvUGF1c2VkKTsKICAgICAgICBzdGF0dXNJQ08gPSBTdGF0dXNJQ08uUHJlSWNvRmluaXNoZWQ7CiAgICAgICAgTG9nRmluaXNoUHJlSUNPKCk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIHN0YXJ0IElDTwogICAgKiAgIFNldHMgSUNPIHN0YXR1cyB0byBJY29TdGFydGVkCiAgICAqLwogICAgZnVuY3Rpb24gc3RhcnRJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICAgcmVxdWlyZShzdGF0dXNJQ08gPT0gU3RhdHVzSUNPLlByZUljb0ZpbmlzaGVkIHx8IHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uSWNvUGF1c2VkKTsKICAgICAgICBzdGF0dXNJQ08gPSBTdGF0dXNJQ08uSWNvU3RhcnRlZDsKICAgICAgICBMb2dTdGFydElDTygpOwogICAgfQoKICAgLyoqCiAgICAqICAgQGRldiBGdW5jdGlvbiB0byBwYXVzZSBJQ08KICAgICogICBTZXRzIElDTyBzdGF0dXMgdG8gSWNvUGF1c2VkCiAgICAqLwogICAgZnVuY3Rpb24gcGF1c2VJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICByZXF1aXJlKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uSWNvU3RhcnRlZCk7CiAgICAgICBzdGF0dXNJQ08gPSBTdGF0dXNJQ08uSWNvUGF1c2VkOwogICAgICAgTG9nUGF1c2VJQ08oKTsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgRnVuY3Rpb24gdG8gZmluaXNoIElDTwogICAgKiAgIFNldHMgSUNPIHN0YXR1cyB0byBJY29GaW5pc2hlZCBhbmQgIGVtaXRzIHRva2VucyBmb3IgZnVuZHMKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICAgcmVxdWlyZShzdGF0dXNJQ08gPT0gU3RhdHVzSUNPLkljb1N0YXJ0ZWQgfHwgc3RhdHVzSUNPID09IFN0YXR1c0lDTy5JY29QYXVzZWQpOwogICAgICAgIHVpbnQgYWxyZWFkeU1pbnRlZCA9IExVQy50b3RhbFN1cHBseSgpOwogICAgICAgIHVpbnQgdG90YWxBbW91bnQgPSBhbHJlYWR5TWludGVkLm11bCgxMDAwKS5kaXYocHVibGljSWNvUGFydCk7CiAgICAgICAgTFVDLm1pbnRUb2tlbnMoT3BlcmF0aW9uc0Z1bmQsIG9wZXJhdGlvbnNQYXJ0Lm11bCh0b3RhbEFtb3VudCkuZGl2KDEwMDApKTsKICAgICAgICBMVUMubWludFRva2VucyhGb3VuZGVyc0Z1bmQsIGZvdW5kZXJzUGFydC5tdWwodG90YWxBbW91bnQpLmRpdigxMDAwKSk7CiAgICAgICAgTFVDLm1pbnRUb2tlbnMoUGFydG5lcnNGdW5kLCBwYXJ0bmVyc1BhcnQubXVsKHRvdGFsQW1vdW50KS5kaXYoMTAwMCkpOwogICAgICAgIExVQy5taW50VG9rZW5zKEFkdmlzb3JzRnVuZCwgYWR2aXNvcnNQYXJ0Lm11bCh0b3RhbEFtb3VudCkuZGl2KDEwMDApKTsKICAgICAgICBMVUMubWludFRva2VucyhCb3VudHlGdW5kLCBib3VudHlQYXJ0Lm11bCh0b3RhbEFtb3VudCkuZGl2KDEwMDApKTsKICAgICAgICBzdGF0dXNJQ08gPSBTdGF0dXNJQ08uSWNvRmluaXNoZWQ7CiAgICAgICAgTG9nRmluaXNoSUNPKCk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IFVuZnJlZXplIHRva2VucyhlbmFibGUgdG9rZW4gdHJhbnNmZXJzKQogICAgKi8KICAgIGZ1bmN0aW9uIHVuZnJlZXplKCkgZXh0ZXJuYWwgbWFuYWdlck9ubHkgewogICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPID09IFN0YXR1c0lDTy5JY29GaW5pc2hlZCk7CiAgICAgICAgTFVDLmRlZnJvc3QoKTsKICAgIH0KICAgIAogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIHN3YXAgdG9rZW5zIGZyb20gcHJlLXNhbGUKICAgICogICBAcGFyYW0gX2ludmVzdG9yICAgICBwcmUtc2FsZSB0b2tlbnMgaG9sZGVyIGFkZHJlc3MKICAgICovCiAgICBmdW5jdGlvbiBzd2FwVG9rZW5zKGFkZHJlc3MgX2ludmVzdG9yKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPICE9IFN0YXR1c0lDTy5JY29GaW5pc2hlZCk7CiAgICAgICAgIHJlcXVpcmUoIXN3YXBlZFtfaW52ZXN0b3JdKTsKICAgICAgICAgc3dhcGVkW19pbnZlc3Rvcl0gPSB0cnVlOwogICAgICAgICB1aW50IHRva2Vuc1RvU3dhcCA9IHByZVNhbGVUb2tlbi5iYWxhbmNlT2YoX2ludmVzdG9yKTsKICAgICAgICAgTFVDLm1pbnRUb2tlbnMoX2ludmVzdG9yLCB0b2tlbnNUb1N3YXApOwogICAgICAgICBzb2xkQW1vdW50ID0gc29sZEFtb3VudC5hZGQodG9rZW5zVG9Td2FwKTsKICAgICAgICAgTG9nU3dhcFRva2VucyhfaW52ZXN0b3IsIHRva2Vuc1RvU3dhcCk7CiAgICB9CiAgIC8qKgogICAgKiAgIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24gY2FsbHMgYnV5KGFkZHJlc3MgX2ludmVzdG9yLCB1aW50IF9EVFJDVmFsdWUpIGZ1bmN0aW9uIHRvIGlzc3VlIHRva2VucwogICAgKiAgICAgICAgd2hlbiBpbnZlc3RvciBzZW5kcyBFVEggdG8gYWRkcmVzcyBvZiBJQ08gY29udHJhY3QgYW5kIHRoZW4gc3RvcmVzIGludmVzdG1lbnQgYW1vdW50IAogICAgKi8KICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgaWYgKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uUHJlSWNvU3RhcnRlZCkgewogICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAxMDAgZmlubmV5KTsKICAgICAgICB9CiAgICAgICAgYnV5KG1zZy5zZW5kZXIsIG1zZy52YWx1ZS5tdWwodG9rZW5QcmljZSkpOyAKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgRnVuY3Rpb24gdG8gaXNzdWVzIHRva2VucyBmb3IgaW52ZXN0b3JzIHdobyBtYWRlIHB1cmNoYXNlcyBpbiBvdGhlciBjcnlwdG9jdXJyZW5jaWVzCiAgICAqICAgQHBhcmFtIF9pbnZlc3RvciAgICAgYWRkcmVzcyB0aGUgdG9rZW5zIHdpbGwgYmUgaXNzdWVkIHRvCiAgICAqICAgQHBhcmFtIF90eEhhc2ggICAgICAgdHJhbnNhY3Rpb24gaGFzaCBvZiBpbnZlc3RvcidzIHBheW1lbnQKICAgICogICBAcGFyYW0gX2x1Y1ZhbHVlICAgICBudW1iZXIgb2YgTFVDIHRva2VucwogICAgKi8KCiAgICBmdW5jdGlvbiBidXlGb3JJbnZlc3RvcigKICAgICAgICBhZGRyZXNzIF9pbnZlc3RvciwgCiAgICAgICAgdWludCBfbHVjVmFsdWUsIAogICAgICAgIHN0cmluZyBfdHhIYXNoCiAgICApIAogICAgICAgIGV4dGVybmFsIAogICAgICAgIGNvbnRyb2xsZXJzT25seSB7CiAgICAgICAgYnV5KF9pbnZlc3RvciwgX2x1Y1ZhbHVlKTsKICAgICAgICBMb2dCdXlGb3JJbnZlc3RvcihfaW52ZXN0b3IsIF9sdWNWYWx1ZSwgX3R4SGFzaCk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIGlzc3VlIHRva2VucyBmb3IgaW52ZXN0b3JzIHdobyBwYWlkIGluIGV0aGVyCiAgICAqICAgQHBhcmFtIF9pbnZlc3RvciAgICAgYWRkcmVzcyB3aGljaCB0aGUgdG9rZW5zIHdpbGwgYmUgaXNzdWVkIHRva2VucwogICAgKiAgIEBwYXJhbSBfbHVjVmFsdWUgICAgIG51bWJlciBvZiBMVUMgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gYnV5KGFkZHJlc3MgX2ludmVzdG9yLCB1aW50IF9sdWNWYWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPID09IFN0YXR1c0lDTy5QcmVJY29TdGFydGVkIHx8IHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uSWNvU3RhcnRlZCk7CiAgICAgICAgdWludCBib251cyA9IGdldEJvbnVzKF9sdWNWYWx1ZSk7CiAgICAgICAgdWludCB0b3RhbCA9IF9sdWNWYWx1ZS5hZGQoYm9udXMpOwogICAgICAgIHJlcXVpcmUoc29sZEFtb3VudCArIF9sdWNWYWx1ZSA8PSBoYXJkQ2FwKTsKICAgICAgICBMVUMubWludFRva2VucyhfaW52ZXN0b3IsIHRvdGFsKTsKICAgICAgICBzb2xkQW1vdW50ID0gc29sZEFtb3VudC5hZGQoX2x1Y1ZhbHVlKTsKICAgIH0KCgoKICAgLyoqCiAgICAqICAgQGRldiBGdW5jdGlvbiB0byBjYWxjdWxhdGVzIGJvbnVzZXMgCiAgICAqICAgQHBhcmFtIF92YWx1ZSAgICAgICAgYW1vdW50IG9mIHRva2VucwogICAgKiAgIEByZXR1cm4gICAgICAgICAgICAgIGJvbnVzIHZhbHVlCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0Qm9udXModWludCBfdmFsdWUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBib251cyA9IDA7CiAgICAgICAgaWYgKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uUHJlSWNvU3RhcnRlZCkgewogICAgICAgICAgICBpZiAobm93IDwgMTUxNzM1NjgwMCkgewogICAgICAgICAgICAgICAgYm9udXMgPSBfdmFsdWUubXVsKDMwKS5kaXYoMTAwKTsKICAgICAgICAgICAgICAgIHJldHVybiBib251czsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJvbnVzID0gX3ZhbHVlLm11bCgyNSkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0dXNJQ08gPT0gU3RhdHVzSUNPLkljb1N0YXJ0ZWQpIHsKICAgICAgICAgICAgaWYgKG5vdyA8IDE1MTg2NTI4MDApIHsKICAgICAgICAgICAgICAgIGJvbnVzID0gX3ZhbHVlLm11bCgxMCkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE4OTEyMDAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoOSkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE5MTcxMjAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoOCkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE5MzQ0MDAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoNykuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE5NTE2ODAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoNikuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE5Njg5NjAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoNSkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTE5ODYyNDAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoNCkuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTIwMDM1MjAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoMykuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChub3cgPCAxNTIwMjA4MDAwKSB7CiAgICAgICAgICAgICAgICBib251cyA9IF92YWx1ZS5tdWwoMikuZGl2KDEwMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9udXM7ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYm9udXMgPSBfdmFsdWUubXVsKDEpLmRpdigxMDApOwogICAgICAgICAgICAgICAgcmV0dXJuIGJvbnVzOyAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gYm9udXM7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEFsbG93cyBpbnZldHNvdCB0byByZWdpc3RlciB0aGllciBMZXZlbCBVcCBDaGFpbiBhZGRyZXNzCiAgICAqLwogICAgZnVuY3Rpb24gcmVnaXN0ZXIoc3RyaW5nIF9rZXkpIHB1YmxpYyB7CiAgICAgICAga2V5c1ttc2cuc2VuZGVyXSA9IF9rZXk7CiAgICAgICAgTG9nUmVnaXN0ZXIobXNnLnNlbmRlciwgX2tleSk7CiAgICB9CgogICAvKioKICAgICogICBAZGV2IEFsbG93cyBDb21wYW55IHdpdGhkcmF3IGludmVzdG1lbnRzCiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcigpIGV4dGVybmFsIG1hbmFnZXJPbmx5IHsKICAgICAgICBDb21wYW55LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9Cgp9CgovKioKICogICBAdGl0bGUgTHVjVG9rZW4KICogICBAZGV2IEx1YyB0b2tlbiBjb250cmFjdAogKi8KY29udHJhY3QgTHVjVG9rZW4gaXMgRVJDMjAgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTGV2ZWwgVXAgQ29pbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJMVUMiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICAvLyBJY28gY29udHJhY3QgYWRkcmVzcwogICAgYWRkcmVzcyBwdWJsaWMgaWNvOwogICAgCiAgICAvLyBUb2tlbnMgdHJhbnNmZXIgYWJpbGl0eSBzdGF0dXMKICAgIGJvb2wgcHVibGljIHRva2Vuc0FyZUZyb3plbiA9IHRydWU7CgogICAgLy8gQWxsb3dzIGV4ZWN1dGlvbiBieSB0aGUgb3duZXIgb25seQogICAgbW9kaWZpZXIgaWNvT25seSB7IAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBpY28pOyAKICAgICAgICBfOyAKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IgZnVuY3Rpb24gc2V0cyBJY28gYWRkcmVzcwogICAgKiAgIEBwYXJhbSBfaWNvICAgICAgICAgIGljbyBhZGRyZXNzCiAgICAqLwogICAgZnVuY3Rpb24gTHVjVG9rZW4oYWRkcmVzcyBfaWNvKSBwdWJsaWMgewogICAgICAgaWNvID0gX2ljbzsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgICogICBAcGFyYW0gX2hvbGRlciAgICAgICBiZW5lZmljaWFyeSBhZGRyZXNzIHRoZSB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgdG8KICAgICogICBAcGFyYW0gX3ZhbHVlICAgICAgICBudW1iZXIgb2YgdG9rZW5zIHRvIGlzc3VlCiAgICAqLwogICAgZnVuY3Rpb24gbWludFRva2VucyhhZGRyZXNzIF9ob2xkZXIsIHVpbnQgX3ZhbHVlKSBleHRlcm5hbCBpY29Pbmx5IHsKICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICBiYWxhbmNlc1tfaG9sZGVyXSA9IGJhbGFuY2VzW19ob2xkZXJdLmFkZChfdmFsdWUpOwogICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX3ZhbHVlKTsKICAgICAgIFRyYW5zZmVyKDB4MCwgX2hvbGRlciwgX3ZhbHVlKTsKICAgIH0KCgogICAvKioKICAgICogICBAZGV2IEZ1bmN0aW9uIHRvIGVuYWJsZSB0b2tlbiB0cmFuc2ZlcnMKICAgICovCiAgICBmdW5jdGlvbiBkZWZyb3N0KCkgZXh0ZXJuYWwgaWNvT25seSB7CiAgICAgICB0b2tlbnNBcmVGcm96ZW4gPSBmYWxzZTsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgR2V0IGJhbGFuY2Ugb2YgdG9rZW5zIGhvbGRlcgogICAgKiAgIEBwYXJhbSBfaG9sZGVyICAgICAgICBob2xkZXIncyBhZGRyZXNzCiAgICAqICAgQHJldHVybiAgICAgICAgICAgICAgIGJhbGFuY2Ugb2YgaW52ZXN0b3IKICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfaG9sZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgIHJldHVybiBiYWxhbmNlc1tfaG9sZGVyXTsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgU2VuZCBjb2lucwogICAgKiAgIHRocm93cyBvbiBhbnkgZXJyb3IgcmF0aGVyIHRoZW4gcmV0dXJuIGEgZmFsc2UgZmxhZyB0byBtaW5pbWl6ZQogICAgKiAgIHVzZXIgZXJyb3JzCiAgICAqICAgQHBhcmFtIF90byAgICAgICAgICAgdGFyZ2V0IGFkZHJlc3MKICAgICogICBAcGFyYW0gX2Ftb3VudCAgICAgICB0cmFuc2ZlciBhbW91bnQKICAgICoKICAgICogICBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKCF0b2tlbnNBcmVGcm96ZW4pOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgLyoqCiAgICAqICAgQGRldiBBbiBhY2NvdW50L2NvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMKICAgICogICB0aHJvd3Mgb24gYW55IGVycm9yIHJhdGhlciB0aGVuIHJldHVybiBhIGZhbHNlIGZsYWcgdG8gbWluaW1pemUgdXNlciBlcnJvcnMKICAgICoKICAgICogICBAcGFyYW0gX2Zyb20gICAgICAgICBzb3VyY2UgYWRkcmVzcwogICAgKiAgIEBwYXJhbSBfdG8gICAgICAgICAgIHRhcmdldCBhZGRyZXNzCiAgICAqICAgQHBhcmFtIF9hbW91bnQgICAgICAgdHJhbnNmZXIgYW1vdW50CiAgICAqCiAgICAqICAgQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoIXRva2Vuc0FyZUZyb3plbik7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQoKCiAgIC8qKgogICAgKiAgIEBkZXYgQWxsb3dzIGFub3RoZXIgYWNjb3VudC9jb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBvbiBpdHMgYmVoYWxmCiAgICAqICAgdGhyb3dzIG9uIGFueSBlcnJvciByYXRoZXIgdGhlbiByZXR1cm4gYSBmYWxzZSBmbGFnIHRvIG1pbmltaXplIHVzZXIgZXJyb3JzCiAgICAqCiAgICAqICAgYWxzbywgdG8gbWluaW1pemUgdGhlIHJpc2sgb2YgdGhlIGFwcHJvdmUvdHJhbnNmZXJGcm9tIGF0dGFjayB2ZWN0b3IKICAgICogICBhcHByb3ZlIGhhcyB0byBiZSBjYWxsZWQgdHdpY2UgaW4gMiBzZXBhcmF0ZSB0cmFuc2FjdGlvbnMgLSBvbmNlIHRvCiAgICAqICAgY2hhbmdlIHRoZSBhbGxvd2FuY2UgdG8gMCBhbmQgc2Vjb25kbHkgdG8gY2hhbmdlIGl0IHRvIHRoZSBuZXcgYWxsb3dhbmNlCiAgICAqICAgdmFsdWUKICAgICoKICAgICogICBAcGFyYW0gX3NwZW5kZXIgICAgICBhcHByb3ZlZCBhZGRyZXNzCiAgICAqICAgQHBhcmFtIF9hbW91bnQgICAgICAgYWxsb3dhbmNlIGFtb3VudAogICAgKgogICAgKiAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwKICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKChfYW1vdW50ID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgIC8qKgogICAgKiAgIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICoKICAgICogICBAcGFyYW0gX293bmVyICAgICAgICB0aGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcwogICAgKiAgIEBwYXJhbSBfc3BlbmRlciAgICAgIHRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzCiAgICAqCiAgICAqICAgQHJldHVybiAgICAgICAgICAgICAgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIKICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KfQoKCgoKCmNvbnRyYWN0IHRva2VuTFVDRyB7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgICAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgICAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICAgICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKCiAgICAgICAgZnVuY3Rpb24gdG9rZW5MVUNHIChzdHJpbmcgX25hbWUsIHN0cmluZyBfc3ltYm9sLCB1aW50OCBfZGVjaW1hbHMpewogICAgICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxzOwoKICAgICAgICB9CiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgICAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7Cgp9Cgpjb250cmFjdCBQcmVzYWxlIGlzIHRva2VuTFVDRyB7CgogICAgICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogICAgICAgIHN0cmluZyBuYW1lID0gJ0xldmVsIFVwIENvaW4gR29sZCc7CiAgICAgICAgc3RyaW5nIHN5bWJvbCA9ICdMVUNHJzsKICAgICAgICB1aW50OCBkZWNpbWFscyA9IDE4OwogICAgICAgIGFkZHJlc3MgbWFuYWdlcjsKICAgICAgICBhZGRyZXNzIHB1YmxpYyBpY287CgogICAgICAgIGZ1bmN0aW9uIFByZXNhbGUgKGFkZHJlc3MgX21hbmFnZXIpIHRva2VuTFVDRyAobmFtZSwgc3ltYm9sLCBkZWNpbWFscyl7CiAgICAgICAgICAgICBtYW5hZ2VyID0gX21hbmFnZXI7CgogICAgICAgIH0KCiAgICAgICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KTsKICAgICAgICBldmVudCBCdXJuKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgYW1vdW50KTsKCiAgICAgICAgbW9kaWZpZXIgb25seU1hbmFnZXJ7CiAgICAgICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWFuYWdlcik7CiAgICAgICAgICAgIF87CiAgICAgICAgfQoKICAgICAgICBtb2RpZmllciBvbmx5SWNvewogICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGljbyk7CiAgICAgICAgICAgIF87CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyBfaW52ZXN0b3IsIHVpbnQyNTYgX21pbnRlZEFtb3VudCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICAgICAgIGJhbGFuY2VPZltfaW52ZXN0b3JdID0gYmFsYW5jZU9mW19pbnZlc3Rvcl0uYWRkKF9taW50ZWRBbW91bnQpOwogICAgICAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX21pbnRlZEFtb3VudCk7CiAgICAgICAgICAgICBUcmFuc2Zlcih0aGlzLCBfaW52ZXN0b3IsIF9taW50ZWRBbW91bnQpOwoKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBvbmx5SWNvewogICAgICAgICAgICAgdWludCAgdG9rZW5zID0gYmFsYW5jZU9mW19vd25lcl07CiAgICAgICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfb3duZXJdICE9IDApOwogICAgICAgICAgICAgYmFsYW5jZU9mW19vd25lcl0gPSAwOwogICAgICAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIodG9rZW5zKTsKICAgICAgICAgICAgIEJ1cm4oX293bmVyLCB0b2tlbnMpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0SWNvKGFkZHJlc3MgX2ljbykgb25seU1hbmFnZXJ7CiAgICAgICAgICAgIGljbyA9IF9pY287CiAgICAgICAgfQp9'.
	

]
