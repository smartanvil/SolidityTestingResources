Class {
	#name : #SRT5dff4aaf908d4c800bb61027a0aa1452d446a6d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5dff4aaf908d4c800bb61027a0aa1452d446a6d9 >> base64 [
	^ ''.
	

]
