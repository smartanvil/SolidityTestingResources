Class {
	#name : #SRT48946d2452E72103703ad5317c9fa7b3a3D9b5a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48946d2452E72103703ad5317c9fa7b3a3D9b5a8 >> base64 [
	^ ''.
	

]
