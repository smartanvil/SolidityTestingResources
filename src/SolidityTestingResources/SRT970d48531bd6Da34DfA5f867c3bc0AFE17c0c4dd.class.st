Class {
	#name : #SRT970d48531bd6Da34DfA5f867c3bc0AFE17c0c4dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT970d48531bd6Da34DfA5f867c3bc0AFE17c0c4dd >> base64 [
	^ ''.
	

]
