Class {
	#name : #SRTc9a09e194e71c60e0d658961cdafced647d2e770,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9a09e194e71c60e0d658961cdafced647d2e770 >> base64 [
	^ 'LyogVGhpcyBzb3VyY2UgY29kZSBpcyBwYXJ0IG9mIENBQ0lCIERvY0NoYWluIHJlZ2lzdGVyZWQgdHJhZGVtYXJrCiogIEl0IGlzIHByb3ZpZGVkIGJlY2F1c2VkIHB1Ymxpc2hlZCBpbiB0aGUgcHVibGljIGJsb2NrY2hhaW4gb2YgRXRoZXJldW0uCiogIFJldXNpbmcgdGhpcyBjb2RlIGlzIGZvcmJpZGRlbiB3aXRob3V0IGFwcHJvYmF0aW9uIG9mIENBQ0lCIGZpcnN0ICg8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImViODI4ZjhlOGFhYjg4OGFjNjg4ODI4OWM1ODg4NDg2Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPikKKiAgUHJvdmlkaW5nIHRoaXMgY29kZSBpbiBwdWJsaWMgcmVwb3NpdG9yeSBpcyBtZWFudCB0byBwcm92aWRlIGNsYXJpdHkgdG8gdGhlIG1lY2hhbmlzbSBieSB3aGljaCB0aGUgRG9jQ2hhaW4gcHJvZHVjdCB3b3JrcwoqCiogIFRoaXMgY29udHJhY3QgcmVwcmVzZW50cyBhIHJlcG9zaXRvcnkgb2YgZG9jdW1lbnQgaGFzaGVzIGxpbmtlZCB0byB0aGVpciBzaWduYXRvcmllcyBJRXRoSWRlbnRpdHkgYW5kIGlzIHRoZSBoZWFydCBvZiB0aGUgRG9jQ2hhaW4gcHJvZHVjdAoqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCi8qKgogKiBUaGUgSUV0aElkZW50aXR5IGludGVyZmFjZSBkZWZpbmVzIGZ1bmRhbWVudGFsIGZ1bmN0aW9ubmFsaXRpZXMKICogdGhhdCBldmVyeSBFdGhlcmV1bSBpZGVudGl0eSBpbiB0aGlzIGZyYW1ld29yayBtdXN0IGltcGxlbWVudCB0byBiZSAKICogdXNhYmxlIHdpdGggRG9jQ2hhaW4gcHJpbmNpcGxlcy4KICogCiAqIFRoZSBwdXJwb3NlIG9mIGltcGxlbWVudGluZyBJRXRoSWRlbnRpdHkgaW50ZXJmYWNlIGlzIHRvIHByb3ZlIGl0cyBvd24gaWRlbnRpdHkKICogYW5kIGxldCBvdGhlcnMgY2hlY2tpbmcgd2hldGhlciBhbnkgcHJvb2YgaGFzIGJlZW4gbWFkZSBieSBpdHMgaWRlbnRpdHkuCiAqLwppbnRlcmZhY2UgSUV0aElkZW50aXR5IHsKICAgIAogICAgLyoqCiAgICAgKiBBZGQgcHJvb2YgaWYgaXQgZG9lcyBub3QgZXhpc3QgeWV0CiAgICAgKiAgLSBhZGRyZXNzOiB0aGUgc21hcnQgY29udHJhY3QgYWRkcmVzcyB3aGVyZSB0aGUgaWRlbnRpdHkgcHJvb2YgaGFzIGJlZW4gc3RvcmVkIChzZWUgZVNpZ25hdHVyZSBjb250cmFjdCkKICAgICAqICAtIGJ5dGVzMzI6IHRoZSBhdHRyaWJ1dGUgaWQgb3IgcHJvb2YgaWQgZm9yIHdoaWNoIHRoZSBpZGVudGl0eSBvd25lciBoYXMgbWFkZSBhIHByb29mCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZFByb29mKGFkZHJlc3MsIGJ5dGVzMzIpIHB1YmxpYyByZXR1cm5zKGJvb2wpOwogICAgCiAgICAvKioKICAgICAqIFJlbW92ZSBwcm9vZiBvZiBhIHNvdXJjZSBpZiBleGlzdGVkCiAgICAgKiAgLSBhZGRyZXNzOiB0aGUgc21hcnQgY29udHJhY3QgYWRkcmVzcyB3aGVyZSB0aGUgaWRlbnRpdHkgcHJvb2YgaGFzIGJlZW4gc3RvcmVkIChzZWUgZVNpZ25hdHVyZSBjb250cmFjdCkKICAgICAqICAtIGJ5dGVzMzI6IHRoZSBhdHRyaWJ1dGUgaWQgb3IgcHJvb2YgaWQgdG8gYmUgcmVtb3ZlZAogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmVQcm9vZihhZGRyZXNzLCBieXRlczMyKSBwdWJsaWMgcmV0dXJucyhib29sKTsKCiAgICAvKioKICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGFkZHJlc3MgaXMgdGhlIGNvbnRyb2xsaW5nIHdhbGxldCAob3duZXIpIG9mIHRoZSBpZGVudGl0eQogICAgICovCiAgICBmdW5jdGlvbiBjaGVja093bmVyKGFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpOwogICAgCiAgICAvKioKICAgICAqIEdldCB0aGUgaWRlbnRpdHkgb3duZXIgbmFtZQogICAgICovCiAgICBmdW5jdGlvbiBnZXRJZGVudGl0eU5hbWUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhieXRlczMyKTsKICAgIAp9CgoKY29udHJhY3QgZVNpZ25hdHVyZSB7CiAgICAKICAgIC8qKgogICAgICogVGhlIGRvY3VtZW50IHN0cnVjdHVyZSBpcyBjb21wb3NlZCBvZjoKICAgICAqIC0gQSBoYXNoIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQKICAgICAqIC0gQWRkcmVzcyBvZiB0aGUgaXNzdWVyIElFdGhJZGVudGl0eSB3aG8gaW5pdGFsbHkgY3JlYXRlcyB0aGUgZG9jdW1lbnQKICAgICAqIC0gQSBtYXBwaW5nIGxpc3Qgb2YgYWxsIHNpZ25pbmcgSUV0aElkZW50aXR5IHRoYXQgYXBwcm92ZSB0aGUgZG9jdW1lbnQKICAgICAqLwogICAgc3RydWN0IERvY1N0cnVjdCB7CiAgICAgICAgYnl0ZXMzMiBoYXNoOwogICAgICAgIElFdGhJZGVudGl0eSBpc3N1ZXJJZGVudGl0eTsKCiAgICAgICAgdWludCBuYlNpZ25hdG9yaWVzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY291bnRlciBvZiBzaWduYXRvcmllcwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBzaWduYXRvcnlBZGRyZXNzZXM7ICAgIC8vIG1hcHBpbmcgdG8ga25vdyBpZiBhbiBhZGRyZXNzIGlzIGEgc2lnbmF0b3J5CiAgICAgICAgbWFwcGluZyh1aW50ID0+IElFdGhJZGVudGl0eSkgc2lnbmF0b3JpZXM7ICAgICAgLy8gbWFwcGluZyB0byBnZXQgYSBzaWduYXRvcnkgYnkgcG9zaXRpb24KICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBlU2lnbmF0dXJlIGNvbnRyYWN0IGNvbnRhaW5zIHR3byBkYXRhIHBvaW50czoKICAgICAqIC0gQSBtYXBwaW5nIGxpc3Qgb2YgZG9jdW1lbnRzIGV4aXN0aW5nIGluIGVTaWduYXR1cmUgY29udHJhY3QKICAgICAqIC0gQSBjb3VudGVyIHRvIGtlZXAgdHJhY2sgdGhlIG51bWJlciBvZiBleGlzdGluZyBkb2N1bWVudHMgaW4gdGhlIGxpc3QKICAgICAqLwogICAgdWludCBwdWJsaWMgY291bnQ7CiAgICBtYXBwaW5nKGJ5dGVzMjAgPT4gRG9jU3RydWN0KSBkb2NzOwogICAgCiAgICAvKioKICAgICAqIFRoaXMgZXZlbnQgaXMgdXNlZCBmb3Igbm90aWZ5aW5nIG5ldyBkb2N1bWVudCBjcmVhdGVkCiAgICAgKiAtIGtleTogZG9jdW1lbnQgaWQgZ2VuZXJhdGVkIGJ5IGVTaWduYXR1cmUgY29udHJhY3QKICAgICAqLwogICAgZXZlbnQgRG9jQ3JlYXRlZChieXRlczIwIGtleSk7CiAgICAKICAgIC8qKgogICAgICogVGhpcyBldmVudCBpcyB1c2VkIGZvciBub3RpZnlpbmcgYSBuZXcgYXBwcm92YWwgb2YgYSBkb2N1bWVudAogICAgICogLSBrZXk6IGRvY3VtZW50IGlkIGdlbmVyYXRlZCBieSBlU2lnbmF0dXJlIGNvbnRyYWN0CiAgICAgKiAtIGlkZW50aXR5OiBhZGRyZXNzIG9mIHNpZ25pbmcgSUV0aElkZW50aXR5CiAgICAgKi8KICAgIGV2ZW50IERvY1NpZ25lZChieXRlczIwIGtleSwgSUV0aElkZW50aXR5IGlkZW50aXR5KTsKICAgIAogICAgLyoqCiAgICAgKiBDcmVhdGUgbmV3IGRvY3VtZW50IHRoYXQgaXMgcmVwcmVzZW50ZWQgYnkgaXRzIGhhc2gKICAgICAqIFJldHVybiB0aGUgaWQgb2YgY3JlYXRlZCBkb2N1bWVudAogICAgICogLSBoYXNoOiBoYXNoIHN0cmluZyBvZiB0aGUgZG9jdW1lbnQgY29udGVudAogICAgICogLSBpc3N1ZXJJZDogYWRkcmVzcyBvZiBFdGhJZGVudGl5IG9mIGlzc3VlcgogICAgICovCiAgICBmdW5jdGlvbiBuZXdEb2MoYnl0ZXMzMiBoYXNoLCBJRXRoSWRlbnRpdHkgaXNzdWVySWQpIHB1YmxpYyByZXR1cm5zIChieXRlczIwIGRvY0tleSkgewogICAgICAgIAogICAgICAgIC8qIFdhcm5pbmc6IFBvdGVudGlhbCBWaW9sYXRpb24gb2YgQ2hlY2tzLUVmZmVjdHMtSW50ZXJhY3Rpb24gcGF0dGVybiAKICAgICAgICAgICAgSWYgdGhlIGlzc3VlcklkIGlzIDB4MDAgb3IgYSBmYWtlIGFkZHJlc3MgaXQgd2lsbCBmYWlsCiAgICAgICAgICAgIElmIHRoZSBjYWxsZXIgcGFzc2VzIGl0cyBvd24gaW1wbGVtZW50YXRpb24gb2YgSUV0aElkZW50aXR5IHRvIGF0dGVtcHQgcmUtZW50cmFudCBjb2RlIAogICAgICAgICAgICAgICAgaXQgd2lsbCBjYWxsIGl0c2VsZiByZWN1cnNpdmVseSBmaXJzdCBjb25zdW1pbmcgYWxsIGl0cyBnYXMgYW5kIG5vdCBhbHRlcmluZyB0aGUgc21hcnQgY29udHJhY3QKICAgICAgICAgICAgSWYgdGhlIGNhbGxlciBwYXNzZXMgYW4gaWRlbnRpdHkgaW1wbGVtZW50YXRpb24gdGhhdCByZXR1cm5zIHRydWUgYWx3YXlzIGFuZCBjYWxscyBuZXdEb2MgYWdhaW4KICAgICAgICAgICAgICAgIHR3byAob3IgbW9yZSkgZG9jdW1lbnRzIHdpbGwgYmUgY3JlYXRlZCB3aXRoIGRpZmZlcmVudCBkb2NLZXkgbm90IGFsdGVyaW5nIHRoZSBtZWNoYW5pc20KICAgICAgICAqLwogICAgICAgIC8vIENoZWNrIGlmIHZhbGlkIGlkZW50aXR5IHZpYSBpbnRlci1jb250cmFjdCBjYWxsLCBsaW1pdCBnYXMgdXNlZCBmb3IgdGhpcyBjYWxsCiAgICAgICAgcmVxdWlyZShpc3N1ZXJJZC5jaGVja093bmVyLmdhcyg4MDApKG1zZy5zZW5kZXIpKTsgCiAgICAgICAgCiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGRvY3VtZW50IElkIGFuZCBzYXZlIHRvIG1hcHBpbmcKICAgICAgICBjb3VudCsrOwogICAgICAgIGRvY0tleSA9IHJpcGVtZDE2MChpc3N1ZXJJZCwgY291bnQpOwogICAgICAgIAogICAgICAgIC8vIEFkZGl0aW9uYWwgY2hlY2sgdGhhdCBkb2NLZXkgbm90IGV4aXN0cyB0byBhdm9pZCBvdmVycmlkaW5nCiAgICAgICAgYXNzZXJ0KGNoZWNrRXhpc3RzKGRvY0tleSkgPT0gZmFsc2UpOwogICAgICAgIAogICAgICAgIGRvY3NbZG9jS2V5XS5pc3N1ZXJJZGVudGl0eSA9IGlzc3VlcklkOwogICAgICAgIGRvY3NbZG9jS2V5XS5oYXNoID0gaGFzaDsKICAgICAgICAvLyBkb2NzW2RvY0tleV0ubmJTaWduYXRvcmllcyBpcyBieSBjb25zdHJ1Y3Rpb24gaW5pdGlhbGl6ZWQgdG8gemVyby4KICAgICAgICAKICAgICAgICBEb2NDcmVhdGVkKGRvY0tleSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQ3JlYXRlIGFuZCBzaWduIGEgbmV3IGRvY3VtZW50IHRoYXQgaXMgcmVwcmVzZW50ZWQgYnkgaXRzIGhhc2gKICAgICAqIFJldHVybiB0aGUgaWQgb2YgY3JlYXRlZCBzaWduZWQgZG9jdW1lbnQKICAgICAqIC0gaGFzaDogdW5pcXVlIGhhc2ggc3RyaW5nIG9mIHRoZSBkb2N1bWVudCBjb250ZW50CiAgICAgKiAtIGV0aElkZW50aXR5OiBhZGRyZXNzIG9mIEV0aElkZW50aXkgb2Ygc2lnbmVyIHRoYXQgYWxsb3cgdG8gdmVyaWZ5IHRoZSBzaWduZXIncyBhdXRoZW50aWNpdHkKICAgICAqLwogICAgZnVuY3Rpb24gbmV3U2lnbmVkRG9jKGJ5dGVzMzIgaGFzaCwgSUV0aElkZW50aXR5IGV0aElkZW50aXR5KSBwdWJsaWMgcmV0dXJucyAoYnl0ZXMyMCBkb2NLZXkpIHsKICAgICAgICAvLyBDcmVhdGUgJiBzaWduIGEgbmV3IGRvY3VtZW50CiAgICAgICAgZG9jS2V5ID0gbmV3RG9jKGhhc2gsIGV0aElkZW50aXR5KTsKICAgICAgICAKICAgICAgICAvLyBWZXJpZnkgZG9jdW1lbnQgJiBjaGVjayBpZiBpdCBpcyBhbHJlYWR5IHNpZ25lZCBieSB0aGUgY3VycmVudCBldGhJZGVudGl0eQogICAgICAgIHJlcXVpcmUoZG9jc1tkb2NLZXldLnNpZ25hdG9yeUFkZHJlc3Nlc1tldGhJZGVudGl0eV0gPT0gZmFsc2UpOyAvLyBQcmV2ZW50IHJlLXNpZ25pbmcgZG9jdW1lbnQgYnkgdGhlIHNhbWUgc2lnbmVyCiAgICAgICAgCiAgICAgICAgZG9jc1tkb2NLZXldLnNpZ25hdG9yeUFkZHJlc3Nlc1tldGhJZGVudGl0eV0gPSB0cnVlOwogICAgICAgIGRvY3NbZG9jS2V5XS5zaWduYXRvcmllc1tkb2NzW2RvY0tleV0ubmJTaWduYXRvcmllc10gPSBldGhJZGVudGl0eTsKICAgICAgICBkb2NzW2RvY0tleV0ubmJTaWduYXRvcmllcysrOwogICAgICAgIAogICAgICAgIERvY1NpZ25lZChkb2NLZXksIGV0aElkZW50aXR5KTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBTaWduIGFuIGV4aXN0aW5nIGRvY3VtZW50IHdpdGggYSB2YWxpZCBJRXRoSWRlbnRpdHkgb2Ygc2lnbmVyCiAgICAgKiAtIGtleTogdW5pcXVlIGlkIG9mIHRoZSBjcmVhdGVkIGRvY3VtZW50CiAgICAgKiAtIGV0aElkZW50aXR5OiBhZGRyZXNzIG9mIEV0aElkZW50aXkgb2Ygc2lnbmVyIHRoYXQgYWxsb3cgdG8gdmVyaWZ5IHRoZSBzaWduZXIncyBhdXRoZW50aWNpdHkKICAgICAqLwogICAgZnVuY3Rpb24gc2lnbkRvYyhieXRlczIwIGRvY0tleSwgSUV0aElkZW50aXR5IGV0aElkZW50aXR5KSBwdWJsaWMgewogICAgICAgIAogICAgICAgIC8qIFdhcm5pbmc6IFBvdGVudGlhbCBWaW9sYXRpb24gb2YgQ2hlY2tzLUVmZmVjdHMtSW50ZXJhY3Rpb24gcGF0dGVybiAKICAgICAgICAgICAgSWYgdGhlIGlzc3VlcklkIGlzIDB4MDAgb3IgYSBmYWtlIGFkZHJlc3MgaXQgd2lsbCBmYWlsCiAgICAgICAgICAgIElmIHRoZSBjYWxsZXIgcGFzc2VzIGl0cyBvd24gaW1wbGVtZW50YXRpb24gb2YgSUV0aElkZW50aXR5IHRvIGF0dGVtcHQgcmUtZW50cmFudCBjb2RlIAogICAgICAgICAgICAgICAgaXQgd2lsbCBjYWxsIGl0c2VsZiByZWN1cnNpdmVseSBmaXJzdCBjb25zdW1pbmcgYWxsIGl0cyBnYXMgYW5kIG5vdCBhbHRlcmluZyB0aGUgc21hcnQgY29udHJhY3QKICAgICAgICAgICAgSWYgdGhlIGNhbGxlciBwYXNzZXMgYW4gaWRlbnRpdHkgaW1wbGVtZW50YXRpb24gdGhhdCByZXR1cm5zIHRydWUgYWx3YXlzIGFuZCBjYWxscyBzaWduRG9jIGFnYWluCiAgICAgICAgICAgICAgICB0aGUgc2Vjb25kIGNoZWNrIHdpbGwgcHJldmVudCBjb3JydXB0aW5nIHRoZSBsb2dpYwogICAgICAgICovCiAgICAgICAgLy8gQ2hlY2sgaWYgdmFsaWQgaWRlbnRpdHkgdmlhIGludGVyLWNvbnRyYWN0IGNhbGwsIGxpbWl0IGdhcyB1c2VkIGZvciB0aGlzIGNhbGwKICAgICAgICByZXF1aXJlKGV0aElkZW50aXR5LmNoZWNrT3duZXIuZ2FzKDgwMCkobXNnLnNlbmRlcikpOyAKCiAgICAgICAgLy8gVmVyaWZ5IGRvY3VtZW50ICYgY2hlY2sgaWYgaXQgaXMgYWxyZWFkeSBzaWduZWQgYnkgdGhlIGN1cnJlbnQgZXRoSWRlbnRpdHkKICAgICAgICByZXF1aXJlKGRvY3NbZG9jS2V5XS5zaWduYXRvcnlBZGRyZXNzZXNbZXRoSWRlbnRpdHldID09IGZhbHNlKTsgLy8gUHJldmVudCByZS1zaWduaW5nIGRvY3VtZW50IGJ5IHRoZSBzYW1lIHNpZ25lcgogICAgICAgIAogICAgICAgIGRvY3NbZG9jS2V5XS5zaWduYXRvcnlBZGRyZXNzZXNbZXRoSWRlbnRpdHldID0gdHJ1ZTsKICAgICAgICBkb2NzW2RvY0tleV0uc2lnbmF0b3JpZXNbZG9jc1tkb2NLZXldLm5iU2lnbmF0b3JpZXNdID0gZXRoSWRlbnRpdHk7CiAgICAgICAgZG9jc1tkb2NLZXldLm5iU2lnbmF0b3JpZXMrKzsKICAgICAgICAKICAgICAgICBEb2NTaWduZWQoZG9jS2V5LCBldGhJZGVudGl0eSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogR2V0IHRoZSBkb2N1bWVudCBpbmZvcm1hdGlvbiBieSBpdHMgaWQga2V5LiAKICAgICAqIFJldHVybiBhIHR1cGxlIGNvbnRhaW5pbmcgdGhlIGRvY3VtZW50J3MgaGFzaCwgaXRzIGlzc3VlcnMgYW5kIG51bWJlciBvZiBzaWduYXRvcmllcwogICAgICogLSBrZXk6IGEgdW5pcXVlIGlkIG9mIHRoZSBjcmVhdGVkIGRvY3VtZW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldERvYyhieXRlczIwIGRvY0tleSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgaGFzaCwgSUV0aElkZW50aXR5IGlzc3VlciwgdWludCBuYlNpZ25hdG9yaWVzKSB7CiAgICAgICAgCiAgICAgICAgLy8gQ2hlY2sgaWYgZG9jdW1lbnQgZXhpc3RzIGJ5IGl0cyBrZXkKICAgICAgICBpZiAoY2hlY2tFeGlzdHMoZG9jS2V5KSkgCiAgICAgICAgICAgIHJldHVybiAoZG9jc1tkb2NLZXldLmhhc2gsIGRvY3NbZG9jS2V5XS5pc3N1ZXJJZGVudGl0eSwgZG9jc1tkb2NLZXldLm5iU2lnbmF0b3JpZXMpOwogICAgICAgIGVsc2UgIC8vIHJldHVybnMgYSB0dXBwbGUgc2F5aW5nIHRoZSBrZXkgaXMgbm90IHZhbGlkCiAgICAgICAgICAgIHJldHVybiAoIk5vIGEgdmFsaWQga2V5IiwgSUV0aElkZW50aXR5KDB4MCksIDApOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEdldCB0aGUgc3BlY2lmaWMgc2lnbmF0b3J5IG9mIGEgZ2l2ZW4gZG9jdW1lbnQgYnkgaXRzIGlkIGtleQogICAgICogUmV0dXJuIGEgdHVwbGUgY29udGFpbmluZyB0aGUgRXRoSWRlbnRpdHkgYWRkcmVzcyBhbmQgbmFtZSBvZiBzaWduYXRvcnkKICAgICAqIC0ga2V5OiBhIHVuaXF1ZSBrZXkgcmVwcmVzZW50aW5nIHRoZSBjcmVhdGVkIGRvY3VtZW50CiAgICAgKiAtIGluZGV4OiBpbmRleCBvZiB0aGUgc2lnbmF0b3J5IHRvIGdldCBpdHMgaW5mb3JtYXRpb24KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0U2lnbmF0b3J5KGJ5dGVzMjAgZG9jS2V5LCB1aW50IGluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoSUV0aElkZW50aXR5IGlkZW50aXR5LCBzdHJpbmcgaWRlbnRpdHlOYW1lKSB7CgogICAgICAgIC8vIENoZWNrIGlmIGRvY3VtZW50IGV4aXN0cyBieSBpdHMga2V5CiAgICAgICAgaWYgKGNoZWNrRXhpc3RzKGRvY0tleSkpIHsKICAgICAgICAKICAgICAgICAgICAgLy8gQ2hlY2sgaW5kZXggaXMgbm90IG91dGJvdW5kCiAgICAgICAgICAgIHJlcXVpcmUoaW5kZXggPCBkb2NzW2RvY0tleV0ubmJTaWduYXRvcmllcyk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZGVudGl0eSA9IGRvY3NbZG9jS2V5XS5zaWduYXRvcmllc1tpbmRleF07CiAgICAgICAgICAgIC8vIEdldCB0aGUgc2lnbmF0b3J5IGluZm9ybWF0aW9uIGZyb20gaXRzIGlkZW50aXR5IGNvbnRyYWN0CiAgICAgICAgICAgIGlkZW50aXR5TmFtZSA9IGJ5dGVzMzJUb1N0cmluZyhpZGVudGl0eS5nZXRJZGVudGl0eU5hbWUoKSk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAoaWRlbnRpdHksIGlkZW50aXR5TmFtZSk7IAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAoSUV0aElkZW50aXR5KDB4MCksICIiKTsKICAgICAgICB9ICAgIAogICAgfQogICAgCiAgICAvKioKICAgICAqIENoZWNrIGlmIGEgZG9jdW1lbnQgZXhpc3RzIGJ5IGl0cyBrZXkKICAgICAqIFJldHVybiB0cnVlL2ZhbHNlIGluZGljYXRpbmcgdGhlIGRvY3VtZW50IGV4aXN0YW5jZQogICAgICogLSBrZXk6IGEgdW5pcXVlIGtleSByZXByZXNlbnRpbmcgdGhlIGNyZWF0ZWQgZG9jdW1lbnQKICAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tFeGlzdHMoYnl0ZXMyMCBkb2NLZXkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsKICAgICAgICAvLyBEb2N1bWVudCBleGlzdHMgb25seSBpZiBpdHMgaXNzdWVyIGlzIHZhbGlkCiAgICAgICAgcmV0dXJuIGRvY3NbZG9jS2V5XS5pc3N1ZXJJZGVudGl0eSAhPSBhZGRyZXNzKDB4MCk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQ29udmVydCBieXRlczMyIHRvIHN0cmluZy4gU2V0IG1vZGlmaWVyIHB1cmUgd2hpY2ggbWVhbnMgY2Fubm90CiAgICAgKiBhY2Nlc3MgdGhlIGNvbnRyYWN0IHN0b3JhZ2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ5dGVzMzJUb1N0cmluZyAoYnl0ZXMzMiBkYXRhKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgICAgIGJ5dGVzIG1lbW9yeSBieXRlc1N0cmluZyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgZm9yICh1aW50IGo9MDsgajwzMjsgaisrKXsKICAgICAgICAgICAgaWYgKGRhdGFbal0gIT0gMCkgewogICAgICAgICAgICAgICAgYnl0ZXNTdHJpbmdbal0gPSBkYXRhW2pdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJpbmcoYnl0ZXNTdHJpbmcpOwogICAgfQp9'.
	

]
