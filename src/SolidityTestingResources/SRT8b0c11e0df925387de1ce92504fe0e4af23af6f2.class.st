Class {
	#name : #SRT8b0c11e0df925387de1ce92504fe0e4af23af6f2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b0c11e0df925387de1ce92504fe0e4af23af6f2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgT3duZWQgY29udHJhY3QgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElPd25lZCB7CiAgICAvLyB0aGlzIGZ1bmN0aW9uIGlzbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIG93bmVyKSB7IG93bmVyOyB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYzsKfQoKLyoKICAgIFByb3ZpZGVzIHN1cHBvcnQgYW5kIHV0aWxpdGllcyBmb3IgY29udHJhY3Qgb3duZXJzaGlwCiovCmNvbnRyYWN0IE93bmVkIGlzIElPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgcHVibGljIG5ld093bmVyOwoKICAgIGV2ZW50IE93bmVyVXBkYXRlKGFkZHJlc3MgX3ByZXZPd25lciwgYWRkcmVzcyBfbmV3T3duZXIpOwoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBPd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8gYWxsb3dzIGV4ZWN1dGlvbiBieSB0aGUgb3duZXIgb25seQogICAgbW9kaWZpZXIgb3duZXJPbmx5IHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGFsbG93cyB0cmFuc2ZlcnJpbmcgdGhlIGNvbnRyYWN0IG93bmVyc2hpcAogICAgICAgIHRoZSBuZXcgb3duZXIgc3RpbGwgbmVlZHMgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKCiAgICAgICAgQHBhcmFtIF9uZXdPd25lciAgICBuZXcgY29udHJhY3Qgb3duZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgcmVxdWlyZShfbmV3T3duZXIgIT0gb3duZXIpOwogICAgICAgIG5ld093bmVyID0gX25ld093bmVyOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYW4gb3duZXJzaGlwIHRyYW5zZmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOwogICAgICAgIE93bmVyVXBkYXRlKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICBuZXdPd25lciA9IDB4MDsKICAgIH0KfQoKLyoKICAgIFV0aWxpdGllcyAmIENvbW1vbiBNb2RpZmllcnMKKi8KY29udHJhY3QgVXRpbHMgewogICAgLyoqCiAgICAgICAgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBVdGlscygpIHsKICAgIH0KCiAgICAvLyB2ZXJpZmllcyB0aGF0IGFuIGFtb3VudCBpcyBncmVhdGVyIHRoYW4gemVybwogICAgbW9kaWZpZXIgZ3JlYXRlclRoYW5aZXJvKHVpbnQyNTYgX2Ftb3VudCkgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gMHgwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgaXMgZGlmZmVyZW50IHRoYW4gdGhpcyBjb250cmFjdCBhZGRyZXNzCiAgICBtb2RpZmllciBub3RUaGlzKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gT3ZlcmZsb3cgcHJvdGVjdGVkIG1hdGggZnVuY3Rpb25zCgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MKCiAgICAgICAgQHBhcmFtIF94ICAgdmFsdWUgMQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDIKCiAgICAgICAgQHJldHVybiBzdW0KICAgICovCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCArIF95OwogICAgICAgIGFzc2VydCh6ID49IF94KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgX3ggbWludXMgX3ksIGFzc2VydHMgaWYgdGhlIHN1YnRyYWN0aW9uIHJlc3VsdHMgaW4gYSBuZWdhdGl2ZSBudW1iZXIKCiAgICAgICAgQHBhcmFtIF94ICAgbWludWVuZAogICAgICAgIEBwYXJhbSBfeSAgIHN1YnRyYWhlbmQKCiAgICAgICAgQHJldHVybiBkaWZmZXJlbmNlCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KF94ID49IF95KTsKICAgICAgICByZXR1cm4gX3ggLSBfeTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICBmYWN0b3IgMQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyCgogICAgICAgIEByZXR1cm4gcHJvZHVjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICogX3k7CiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KfQoKLyoKICAgIEJhbmNvciBGb3JtdWxhIGludGVyZmFjZQoqLwpjb250cmFjdCBJQmFuY29yRm9ybXVsYSB7CiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQdXJjaGFzZVJldHVybih1aW50MjU2IF9zdXBwbHksIHVpbnQyNTYgX3Jlc2VydmVCYWxhbmNlLCB1aW50MzIgX3Jlc2VydmVSYXRpbywgdWludDI1NiBfZGVwb3NpdEFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gY2FsY3VsYXRlU2FsZVJldHVybih1aW50MjU2IF9zdXBwbHksIHVpbnQyNTYgX3Jlc2VydmVCYWxhbmNlLCB1aW50MzIgX3Jlc2VydmVSYXRpbywgdWludDI1NiBfc2VsbEFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgovKioKICAgIEBkZXYgdGhlIEJhbmNvckZvcm11bGFQcm94eSBpcyBhbiBvd25lZCBjb250cmFjdCB0aGF0IHNlcnZlcyBhcyBhIHNpbmdsZSBwb2ludCBvZiBhY2Nlc3MKICAgIHRvIHRoZSBCYW5jb3JGb3JtdWxhIGNvbnRyYWN0IGZyb20gYWxsIEJhbmNvckNoYW5nZXIgY29udHJhY3QgaW5zdGFuY2VzLgogICAgaXQgYWxsb3dzIHVwZ3JhZGluZyB0aGUgQmFuY29yRm9ybXVsYSBjb250cmFjdCB3aXRob3V0IHRoZSBuZWVkIHRvIHVwZGF0ZSBlYWNoIGFuZCBldmVyeQogICAgQmFuY29yQ2hhbmdlciBjb250cmFjdCBpbnN0YW5jZSBpbmRpdmlkdWFsbHkuCiovCmNvbnRyYWN0IEJhbmNvckZvcm11bGFQcm94eSBpcyBJQmFuY29yRm9ybXVsYSwgT3duZWQsIFV0aWxzIHsKICAgIElCYW5jb3JGb3JtdWxhIHB1YmxpYyBmb3JtdWxhOyAgLy8gYmFuY29yIGNhbGN1bGF0aW9uIGZvcm11bGEgY29udHJhY3QKCiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCgogICAgICAgIEBwYXJhbSBfZm9ybXVsYSBhZGRyZXNzIG9mIGEgYmFuY29yIGZvcm11bGEgY29udHJhY3QKICAgICovCiAgICBmdW5jdGlvbiBCYW5jb3JGb3JtdWxhUHJveHkoSUJhbmNvckZvcm11bGEgX2Zvcm11bGEpCiAgICAgICAgdmFsaWRBZGRyZXNzKF9mb3JtdWxhKQogICAgewogICAgICAgIGZvcm11bGEgPSBfZm9ybXVsYTsKICAgIH0KCiAgICAvKgogICAgICAgIEBkZXYgYWxsb3dzIHRoZSBvd25lciB0byB1cGRhdGUgdGhlIGZvcm11bGEgY29udHJhY3QgYWRkcmVzcwoKICAgICAgICBAcGFyYW0gX2Zvcm11bGEgICAgYWRkcmVzcyBvZiBhIGJhbmNvciBmb3JtdWxhIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2V0Rm9ybXVsYShJQmFuY29yRm9ybXVsYSBfZm9ybXVsYSkKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICB2YWxpZEFkZHJlc3MoX2Zvcm11bGEpCiAgICAgICAgbm90VGhpcyhfZm9ybXVsYSkKICAgIHsKICAgICAgICBmb3JtdWxhID0gX2Zvcm11bGE7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBwcm94eSBmb3IgdGhlIGJhbmNvciBmb3JtdWxhIHB1cmNoYXNlIHJldHVybiBjYWxjdWxhdGlvbgoKICAgICAgICBAcGFyYW0gX3N1cHBseSAgICAgICAgICAgICB0b2tlbiB0b3RhbCBzdXBwbHkKICAgICAgICBAcGFyYW0gX3Jlc2VydmVCYWxhbmNlICAgICB0b3RhbCByZXNlcnZlCiAgICAgICAgQHBhcmFtIF9yZXNlcnZlUmF0aW8gICAgICAgY29uc3RhbnQgcmVzZXJ2ZSByYXRpbywgMS0xMDAwMDAwCiAgICAgICAgQHBhcmFtIF9kZXBvc2l0QW1vdW50ICAgICAgZGVwb3NpdCBhbW91bnQsIGluIHJlc2VydmUgdG9rZW4KCiAgICAgICAgQHJldHVybiBwdXJjaGFzZSByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlUHVyY2hhc2VSZXR1cm4odWludDI1NiBfc3VwcGx5LCB1aW50MjU2IF9yZXNlcnZlQmFsYW5jZSwgdWludDMyIF9yZXNlcnZlUmF0aW8sIHVpbnQyNTYgX2RlcG9zaXRBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGZvcm11bGEuY2FsY3VsYXRlUHVyY2hhc2VSZXR1cm4oX3N1cHBseSwgX3Jlc2VydmVCYWxhbmNlLCBfcmVzZXJ2ZVJhdGlvLCBfZGVwb3NpdEFtb3VudCk7CiAgICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcHJveHkgZm9yIHRoZSBiYW5jb3IgZm9ybXVsYSBzYWxlIHJldHVybiBjYWxjdWxhdGlvbgoKICAgICAgICBAcGFyYW0gX3N1cHBseSAgICAgICAgICAgICB0b2tlbiB0b3RhbCBzdXBwbHkKICAgICAgICBAcGFyYW0gX3Jlc2VydmVCYWxhbmNlICAgICB0b3RhbCByZXNlcnZlCiAgICAgICAgQHBhcmFtIF9yZXNlcnZlUmF0aW8gICAgICAgY29uc3RhbnQgcmVzZXJ2ZSByYXRpbywgMS0xMDAwMDAwCiAgICAgICAgQHBhcmFtIF9zZWxsQW1vdW50ICAgICAgICAgc2VsbCBhbW91bnQsIGluIHRoZSB0b2tlbiBpdHNlbGYKCiAgICAgICAgQHJldHVybiBzYWxlIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVTYWxlUmV0dXJuKHVpbnQyNTYgX3N1cHBseSwgdWludDI1NiBfcmVzZXJ2ZUJhbGFuY2UsIHVpbnQzMiBfcmVzZXJ2ZVJhdGlvLCB1aW50MjU2IF9zZWxsQW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBmb3JtdWxhLmNhbGN1bGF0ZVNhbGVSZXR1cm4oX3N1cHBseSwgX3Jlc2VydmVCYWxhbmNlLCBfcmVzZXJ2ZVJhdGlvLCBfc2VsbEFtb3VudCk7CiAgICB9Cn0='.
	

]
