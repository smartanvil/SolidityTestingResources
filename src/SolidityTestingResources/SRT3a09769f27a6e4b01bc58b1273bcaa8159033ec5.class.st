Class {
	#name : #SRT3a09769f27a6e4b01bc58b1273bcaa8159033ec5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3a09769f27a6e4b01bc58b1273bcaa8159033ec5 >> base64 [
	^ ''.
	

]
