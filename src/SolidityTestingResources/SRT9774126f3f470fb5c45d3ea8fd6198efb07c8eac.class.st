Class {
	#name : #SRT9774126f3f470fb5c45d3ea8fd6198efb07c8eac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9774126f3f470fb5c45d3ea8fd6198efb07c8eac >> base64 [
	^ ''.
	

]
