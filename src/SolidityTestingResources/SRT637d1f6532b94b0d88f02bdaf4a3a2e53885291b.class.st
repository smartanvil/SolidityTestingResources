Class {
	#name : #SRT637d1f6532b94b0d88f02bdaf4a3a2e53885291b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT637d1f6532b94b0d88f02bdaf4a3a2e53885291b >> base64 [
	^ ''.
	

]
