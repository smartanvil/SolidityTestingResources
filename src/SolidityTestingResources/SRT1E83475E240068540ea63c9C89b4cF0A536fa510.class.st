Class {
	#name : #SRT1E83475E240068540ea63c9C89b4cF0A536fa510,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1E83475E240068540ea63c9C89b4cF0A536fa510 >> base64 [
	^ ''.
	

]
