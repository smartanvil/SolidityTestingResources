Class {
	#name : #SRT400a125eb01b59e01612382014ad64ad83dc25a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT400a125eb01b59e01612382014ad64ad83dc25a5 >> base64 [
	^ ''.
	

]
