Class {
	#name : #SRTc0829421c1d260bd3cb3e0f06cfe2d52db2ce315,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0829421c1d260bd3cb3e0f06cfe2d52db2ce315 >> base64 [
	^ ''.
	

]
