Class {
	#name : #SRT300707fd457f707db56cba0995755da78775c84f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT300707fd457f707db56cba0995755da78775c84f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLyBAdGl0bGUgSUNPIFNpbXBsZSBDb250cmFjdAovLyBAYXV0aG9yIEhhcnNoIFBhdGVsCgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgLy8gQG5vdGljZSBTYWZlTWF0aCBtdWx0aXBseSBmdW5jdGlvbgogICAgLy8gQHBhcmFtIGEgVmFyaWFibGUgMQogICAgLy8gQHBhcmFtIGIgVmFyaWFibGUgMgogICAgLy8gQHJlc3VsdCB7ICIiIDogInJlc3VsdCBvZiBzYWZlIG11bHRpcGx5In0KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8vIEBub3RpY2UgU2FmZU1hdGggZGl2aWRlIGZ1bmN0aW9uCiAgICAvLyBAcGFyYW0gYSBWYXJpYWJsZSAxCiAgICAvLyBAcGFyYW0gYiBWYXJpYWJsZSAyCiAgICAvLyBAcmVzdWx0IHsgIiIgOiAicmVzdWx0IG9mIHNhZmUgbXVsdGlwbHkifQogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiID4gMCk7CiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLy8gQG5vdGljZSBTYWZlTWF0aCBzdWJzdHJhY3QgZnVuY3Rpb24KICAgIC8vIEBwYXJhbSBhIFZhcmlhYmxlIDEKICAgIC8vIEBwYXJhbSBiIFZhcmlhYmxlIDIKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgICByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIC8vIEBub3RpY2UgU2FmZU1hdGggYWRkaXRpb24gZnVuY3Rpb24KICAgIC8vIEBwYXJhbSBhIFZhcmlhYmxlIDEKICAgIC8vIEBwYXJhbSBiIFZhcmlhYmxlIDIKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvLyBAbm90aWNlIFNhZmVNYXRoIFBvd2VyIGZ1bmN0aW9uCiAgICAvLyBAcGFyYW0gYSBWYXJpYWJsZSAxCiAgICAvLyBAcGFyYW0gYiBWYXJpYWJsZSAyCiAgICBmdW5jdGlvbiBwb3coIHVpbnQyNTYgYSAsIHVpbnQ4IGIgKSBpbnRlcm5hbCByZXR1cm5zICggdWludDI1NiApewogICAgICAgIHVpbnQyNTYgYzsKICAgICAgICBjID0gYSAqKiBiOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBvd25lZCB7CgogICAgYm9vbCBwdWJsaWMgT3duZXJEZWZpbmVkID0gZmFsc2U7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGV2ZW50IE93bmVyRXZlbnRzKGFkZHJlc3MgX2FkZHIsIHVpbnQ4IGFjdGlvbik7CgogICAgLy8gQG5vdGljZSBJbml0aWFsaXplcyBPd25lciBDb250cmFjdCBhbmQgc2V0IHRoZSBmaXJzdCBPd25lcgogICAgZnVuY3Rpb24gb3duZWQoKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgcmVxdWlyZShPd25lckRlZmluZWQgPT0gZmFsc2UpOwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBPd25lckRlZmluZWQgPSB0cnVlOwogICAgICAgIE93bmVyRXZlbnRzKG1zZy5zZW5kZXIsMSk7CiAgICB9CgogICAgLy8gQG5vdGljZSBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiBvd25lcgogICAgLy8gQHBhcmFtIG5ld093bmVyIEFkZHJlc3Mgb2YgdGhlIG5ldyBvd25lcgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoIGFkZHJlc3MgbmV3T3duZXIgKQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgT3duZXJFdmVudHMobXNnLnNlbmRlciwyKTsKICAgIH0KfQoKY29udHJhY3QgRVJDMjBUb2tlbiBpcyBvd25lZCwgU2FmZU1hdGh7CgogICAgLy8gVG9rZW4gRGVmaW5pdGlvbnMKICAgIGJvb2wgcHVibGljIHRva2VuU3RhdGU7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiRHJvcERlY2siOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiREREIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gODsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMzgwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludDI1NiBwdWJsaWMgYmxvY2t0aW1lOwogICAgYWRkcmVzcyBwdWJsaWMgaWNvOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIC8vIEBub3RpY2UgSW5pdGlhbGl6ZSB0aGUgVG9rZW4gQ29udHJhY3QKICAgIC8vIEBwYXJhbSBfbmFtZSBOYW1lIG9mIFRva2VuCiAgICAvLyBAcGFyYW0gX2NvZGUgU2hvcnQgQ29kZSBvZiB0aGUgVG9rZW4KICAgIC8vIEBwYXJhbSBfZGVjaW1hbHMgQW1vdW50IG9mIERlY2ltYWxzIGZvciB0aGUgVG9rZW4KICAgIC8vIEBwYXJhbSBfbmV0U3VwcGx5IFRvdGFsU3VwcGx5IG9mIFRva2VucwogICAgZnVuY3Rpb24gaW5pdCggdWludDI1NiBfYmxvY2t0aW1lLGFkZHJlc3MgX2ljbykKICAgICAgICBleHRlcm5hbAogICAgcmV0dXJucyAoIGJvb2wgKXsKICAgICAgICByZXF1aXJlKHRva2VuU3RhdGUgPT0gZmFsc2UpOwogICAgICAgIG93bmVkOwogICAgICAgIHRva2VuU3RhdGUgPSB0cnVlOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgICAgICAgYmxvY2t0aW1lID0gX2Jsb2NrdGltZTsKICAgICAgICBpY28gPSBfaWNvOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIEBub3RpY2UgVHJhbnNmZXJzIHRoZSB0b2tlbgogICAgLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIHJlY2l2ZXIKICAgIC8vIEBwYXJhbSBfdmFsdWUgVmFsdWUgdG8gYmUgdHJhbnNmZXJlZAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgcmV0dXJucyAoIGJvb2wgKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXRlID09IHRydWUpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICByZXF1aXJlKGJsb2NrLm51bWJlciA+PSBibG9ja3RpbWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZChiYWxhbmNlc1tfdG9dLF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgLy8gQG5vdGljZSBUcmFuc2ZlcnMgdGhlIHRva2VuIG9uIGJlaGFsZiBvZgogICAgLy8gQHBhcmFtIF9mcm9tIEFkZHJlc3Mgb2Ygc2VuZGVyCiAgICAvLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgcmVjaXZlcgogICAgLy8gQHBhcmFtIF92YWx1ZSBWYWx1ZSB0byBiZSB0cmFuc2ZlcmVkCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzdWIoYmFsYW5jZXNbX2Zyb21dLF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZChiYWxhbmNlc1tfdG9dLF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzdWIoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0sX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgIH0KCiAgICAvLyBAbm90aWNlIFRyYW5zZmVycyB0aGUgdG9rZW4gZnJvbSBvd25lciBkdXJpbmcgdGhlIElDTwogICAgLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIHJlY2l2ZXIKICAgIC8vIEBwYXJhbSBfdmFsdWUgVmFsdWUgdG8gYmUgdHJhbnNmZXJlZAogICAgZnVuY3Rpb24gdHJhbnNmZXJJQ08oYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgcmV0dXJucyAoIGJvb2wgKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXRlID09IHRydWUpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW293bmVyXSk7CiAgICAgICAgcmVxdWlyZShpY28gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gc3ViKGJhbGFuY2VzW293bmVyXSxfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBhZGQoYmFsYW5jZXNbX3RvXSxfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLyBAbm90aWNlIENoZWNrcyBiYWxhbmNlIG9mIEFkZHJlc3MKICAgIC8vIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiBob2xkZXIKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXRlID09IHRydWUpOwogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8vIEBub3RpY2UgQXBwcm92ZXMgYWxsb3dhbmNlIGZvciB0b2tlbiBob2xkZXIKICAgIC8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIGhvbGRlcgogICAgLy8gQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgVG9rZW4gVHJhbnNmZXIgdG8gYXBwcm92ZQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXRlID09IHRydWUpOwogICAgICAgIHJlcXVpcmUoX3NwZW5kZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG11bChfdmFsdWUsIDEwMDAwMDAwMCk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8gQG5vdGljZSBGZXRjaGVkIEFsbG93YW5jZSBmb3Igb3duZXIKICAgIC8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIGhvbGRlcgogICAgLy8gQHBhcmFtIF9vd25lciBBbW91bnQgb2YgdG9rZW4gb3duZXIKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJlcXVpcmUodG9rZW5TdGF0ZSA9PSB0cnVlKTsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KfQpjb250cmFjdCB0b2tlbkNvbnRyYWN0IGlzIEVSQzIwVG9rZW57Cgp9Cgpjb250cmFjdCBERERpY28gaXMgU2FmZU1hdGggewoKICAgIHRva2VuQ29udHJhY3QgdG9rZW47CgogICAgYm9vbCBwdWJsaWMgc3RhdGU7CgogICAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5BZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwogICAgdWludDI1NiBwdWJsaWMgaGFyZENhcDsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuU2FsZTsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuTGVmdDsKICAgIHVpbnQyNTYgcHVibGljIGFwcGxpY2FibGVSYXRlOwogICAgdWludDI1NiB3ZWlBbW91bnQ7CiAgICB1aW50MjU2IHRvazsKCiAgICB1aW50MjU2IHB1YmxpYyBibG9jazAgPSA0NjQ0NjUwOwogICAgdWludDI1NiBwdWJsaWMgYmxvY2sxID0gNDY0NDg5MDsKICAgIHVpbnQyNTYgcHVibGljIGJsb2NrMiA9IDQ2NTA2NTA7CiAgICB1aW50MjU2IHB1YmxpYyBibG9jazMgPSA0NjkwOTcwOwogICAgdWludDI1NiBwdWJsaWMgYmxvY2s0ID0gNDczMTI5MDsKICAgIHVpbnQyNTYgcHVibGljIGJsb2NrNSA9IDQ3NzE2MTA7CiAgICB1aW50MjU2IHB1YmxpYyBibG9jazYgPSA0ODExOTMwOwoKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgogICAgLy8gQG5vdGljZSBJbml0aWFsaXplcyBhIElDTyBDb250cmFjdAogICAgLy8gQHBhcmFtIF9oYXJkQ2FwIFNwZWNpZmllcyBoYXJkIGNhcCBmb3IgSUNPIGluIHdlaQogICAgLy8gQHBhcmFtIF93YWxsZXQgQWRkcmVzcyBvZiB0aGUgbXVsdGlTaWcgd2FsbGV0CiAgICAvLyBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgdGhlIFRva2VuIENvbnRyYWN0CiAgICBmdW5jdGlvbiBERERpY28oIGFkZHJlc3MgX3dhbGxldCwgYWRkcmVzcyBfdG9rZW4gLCB1aW50MjU2IF9oYXJkQ2FwLCB1aW50MjU2IF90b2tlblNhbGUgKSB7CiAgICAgICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHN0YXRlID0gdHJ1ZTsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgICAgICB0b2tlbkFkZHJlc3MgPSBfdG9rZW47CiAgICAgICAgdG9rZW4gPSB0b2tlbkNvbnRyYWN0KHRva2VuQWRkcmVzcyk7CiAgICAgICAgaGFyZENhcCA9IG11bChfaGFyZENhcCxwb3coMTAsMTYpKTsKICAgICAgICB0b2tlblNhbGUgPSBtdWwoX3Rva2VuU2FsZSxwb3coMTAsOCkpOwogICAgICAgIHRva2VuTGVmdCA9IHRva2VuU2FsZTsKICAgIH0KCiAgICAvLyBAbm90aWNlIEZhbGxiYWNrIGZ1bmN0aW9uIHRvIGludmVzdCBpbiBJQ08KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGJ1eVRva2VucygpOwogICAgfQoKICAgIC8vIEBub3RpY2UgQnV5IFRva2VuIEZ1bmN0aW9uIHRvIHB1cmNoYXNlIHRva2VucyBpbiBJQ08KICAgIGZ1bmN0aW9uIGJ1eVRva2VucygpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CiAgICAgICAgd2VpQW1vdW50ICAgICAgICAgICAgICAgPSAwOwogICAgICAgIHRvayAgICAgICAgICAgICAgICAgICAgID0gMDsKICAgICAgICB3ZWlBbW91bnQgICAgICAgICAgICAgICA9IG1zZy52YWx1ZTsKICAgICAgICB0b2sgICAgICAgICAgICAgICAgICAgICA9IGRpdihtdWwod2VpQW1vdW50LGZldGNoUmF0ZSgpKSxwb3coMTAsMTYpKTsKICAgICAgICB3ZWlSYWlzZWQgICAgICAgICAgICAgICA9IGFkZCh3ZWlSYWlzZWQsd2VpQW1vdW50KTsKICAgICAgICB0b2tlbkxlZnQgICAgICAgICAgICAgICA9IHN1Yih0b2tlbkxlZnQsdG9rKTsKICAgICAgICB0b2tlbi50cmFuc2ZlcklDTyhtc2cuc2VuZGVyLHRvayk7CiAgICAgICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBtc2cuc2VuZGVyLCB3ZWlBbW91bnQsIHRvayk7CiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CgogICAgLy8gQG5vdGljZSBGdW5jdGlvbiB0byBmb3J3YXJkIGluY29tbWluZyBmdW5kcyB0byBtdWx0aS1zaWcgd2FsbGV0CiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8gQG5vdGljZSBWYWxpZGF0ZXMgdGhlIHB1cmNoYXNlCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgd2l0aGluUGVyaW9kID0gYmxvY2subnVtYmVyID49IGJsb2NrMCAmJiBibG9jay5udW1iZXIgPD0gYmxvY2s2OwogICAgICAgIGJvb2wgbm9uWmVyb1B1cmNoYXNlID0gbXNnLnZhbHVlICE9IDA7CiAgICAgICAgYm9vbCBjYXAgPSB3ZWlSYWlzZWQgPD0gaGFyZENhcDsKICAgICAgICByZXR1cm4gd2l0aGluUGVyaW9kICYmIG5vblplcm9QdXJjaGFzZSAmJiBjYXA7CiAgICB9CgogICAgLy8gQG5vdGljZSBDYWxjdWxhdGVzIHRoZSByYXRlIGJhc2VkIG9uIHNsYWJzCiAgICBmdW5jdGlvbiBmZXRjaFJhdGUoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KXsKICAgICAgICBpZiggYmxvY2swIDw9IGJsb2NrLm51bWJlciAmJiBibG9jazEgPiBibG9jay5udW1iZXIgKXsKICAgICAgICAgICAgYXBwbGljYWJsZVJhdGUgPSAxODcwMDAwMDAwMDsKICAgICAgICAgICAgcmV0dXJuIGFwcGxpY2FibGVSYXRlOwogICAgICAgIH0KICAgICAgICBpZiAoIGJsb2NrMSA8PSBibG9jay5udW1iZXIgJiYgYmxvY2syID4gYmxvY2subnVtYmVyICl7CiAgICAgICAgICAgIGFwcGxpY2FibGVSYXRlID0gMTY3MDAwMDAwMDA7CiAgICAgICAgICAgIHJldHVybiBhcHBsaWNhYmxlUmF0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKCBibG9jazIgPD0gYmxvY2subnVtYmVyICYmIGJsb2NrMyA+IGJsb2NrLm51bWJlciApewogICAgICAgICAgICBhcHBsaWNhYmxlUmF0ZSA9IDE1MDAwMDAwMDAwOwogICAgICAgICAgICByZXR1cm4gYXBwbGljYWJsZVJhdGU7CiAgICAgICAgfQogICAgICAgIGlmICggYmxvY2szIDw9IGJsb2NrLm51bWJlciAmJiBibG9jazQgPiBibG9jay5udW1iZXIgKXsKICAgICAgICAgICAgYXBwbGljYWJsZVJhdGUgPSAxMzYwMDAwMDAwMDsKICAgICAgICAgICAgcmV0dXJuIGFwcGxpY2FibGVSYXRlOwogICAgICAgIH0KICAgICAgICBpZiAoIGJsb2NrNCA8PSBibG9jay5udW1iZXIgJiYgYmxvY2s1ID4gYmxvY2subnVtYmVyICl7CiAgICAgICAgICAgIGFwcGxpY2FibGVSYXRlID0gMTI1MDAwMDAwMDA7CiAgICAgICAgICAgIHJldHVybiBhcHBsaWNhYmxlUmF0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKCBibG9jazUgPD0gYmxvY2subnVtYmVyICYmIGJsb2NrNiA+IGJsb2NrLm51bWJlciApewogICAgICAgICAgICBhcHBsaWNhYmxlUmF0ZSA9IDExNTAwMDAwMDAwOwogICAgICAgICAgICByZXR1cm4gYXBwbGljYWJsZVJhdGU7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEBub3RpY2UgQ2hlY2tzIHdlYXRoZXIgSUNPIGhhcyBlbmRlZCBvciBub3QKICAgIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIGJsb2NrLm51bWJlciA+IGJsb2NrNjsKICAgIH0KfQ=='.
	

]
