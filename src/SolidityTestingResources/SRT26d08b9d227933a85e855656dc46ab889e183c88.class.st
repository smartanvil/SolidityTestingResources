Class {
	#name : #SRT26d08b9d227933a85e855656dc46ab889e183c88,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT26d08b9d227933a85e855656dc46ab889e183c88 >> base64 [
	^ ''.
	

]
