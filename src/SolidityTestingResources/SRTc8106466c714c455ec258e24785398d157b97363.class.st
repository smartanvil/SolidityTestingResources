Class {
	#name : #SRTc8106466c714c455ec258e24785398d157b97363,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc8106466c714c455ec258e24785398d157b97363 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQ29weXJpZ2h0IChjKSAyMDE2IFNtYXJ0IENvbnRyYWN0IFNvbHV0aW9ucywgSW5jLgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgewogICAgICB0aHJvdzsKICAgIH0KICB9Cn0KCi8qCiAqIENvcHlyaWdodCAoYykgMjAxNiBTbWFydCBDb250cmFjdCBTb2x1dGlvbnMsIEluYy4KICogRVJDMjAgaW50ZXJmYWNlCiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCi8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTYgU21hcnQgQ29udHJhY3QgU29sdXRpb25zLCBJbmMuCiAqIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6CiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgU2FmZU1hdGggewoKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc2FmZVN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCi8qCiAqIENvcHlyaWdodCAoYykgMjAxNiBTbWFydCBDb250cmFjdCBTb2x1dGlvbnMsIEluYy4KICogT3duYWJsZQogKgogKiBCYXNlIGNvbnRyYWN0IHdpdGggYW4gb3duZXIuCiAqIFByb3ZpZGVzIG9ubHlPd25lciBtb2RpZmllciwgd2hpY2ggcHJldmVudHMgZnVuY3Rpb24gZnJvbSBydW5uaW5nIGlmIGl0IGlzIGNhbGxlZCBieSBhbnlvbmUgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCn0KCi8vLyBAdGl0bGUgTW9lZGEgTG9heWx0eSBQb2ludHMgdG9rZW4gY29udHJhY3QKY29udHJhY3QgTW9lZGFUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNb2VkYSBMb3lhbHR5IFBvaW50cyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJNTE8iOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgLy8gZG9uJ3QgYWxsb3cgY3JlYXRpb24gb2YgbW9yZSB0aGFuIHRoaXMgbnVtYmVyIG9mIHRva2VucwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX1RPS0VOUyA9IDIwMDAwMDAwIGV0aGVyOwogICAgCiAgICAvLyB0cmFuc2ZlcnMgYXJlIGxvY2tlZCBkdXJpbmcgdGhlIHNhbGUKICAgIGJvb2wgcHVibGljIHNhbGVBY3RpdmU7CgogICAgLy8gb25seSBlbWl0dGVkIGR1cmluZyB0aGUgY3Jvd2RzYWxlCiAgICBldmVudCBDcmVhdGVkKGFkZHJlc3MgaW5kZXhlZCBkb25vciwgdWludDI1NiB0b2tlbnNSZWNlaXZlZCk7CgogICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdHJhbnNmZXJzIGNhbiBiZSBtYWRlCiAgICBtb2RpZmllciBvbmx5QWZ0ZXJTYWxlKCkgewogICAgICAgIGlmIChzYWxlQWN0aXZlKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlEdXJpbmdTYWxlKCkgewogICAgICAgIGlmICghc2FsZUFjdGl2ZSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGUgbW9lZGEgdG9rZW4gYW5kIGxvY2sgdHJhbnNmZXJzCiAgICBmdW5jdGlvbiBNb2VkYVRva2VuKCkgewogICAgICAgIHNhbGVBY3RpdmUgPSB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IHVubG9jayB0cmFuc2ZlcnMKICAgIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciB7CiAgICAgICAgc2FsZUFjdGl2ZSA9IGZhbHNlOwogICAgfQoKICAgIC8vLyBAZGV2IGNyZWF0ZSB0b2tlbnMsIG9ubHkgdXNhYmxlIHdoaWxlIHNhbGVBY3RpdmUKICAgIC8vLyBAcGFyYW0gcmVjaXBpZW50IGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGNyZWF0ZWQgdG9rZW5zCiAgICAvLy8gQHBhcmFtIGFtb3VudCB0aGUgbnVtYmVyIG9mIHRva2VucyB0byBjcmVhdGUKICAgIGZ1bmN0aW9uIGNyZWF0ZShhZGRyZXNzIHJlY2lwaWVudCwgdWludDI1NiBhbW91bnQpCiAgICBvbmx5T3duZXIgb25seUR1cmluZ1NhbGUgewogICAgICAgIGlmIChhbW91bnQgPT0gMCkgdGhyb3c7CiAgICAgICAgaWYgKHNhZmVBZGQodG90YWxTdXBwbHksIGFtb3VudCkgPiBNQVhfVE9LRU5TKSB0aHJvdzsKCiAgICAgICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IHNhZmVBZGQoYmFsYW5jZXNbcmVjaXBpZW50XSwgYW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIGFtb3VudCk7CgogICAgICAgIENyZWF0ZWQocmVjaXBpZW50LCBhbW91bnQpOwogICAgfQoKICAgIC8vIHRyYW5zZmVyIHRva2VucwogICAgLy8gb25seSBhbGxvd2VkIGFmdGVyIHNhbGUgaGFzIGVuZGVkCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlBZnRlclNhbGUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8gdHJhbnNmZXIgdG9rZW5zCiAgICAvLyBvbmx5IGFsbG93ZWQgYWZ0ZXIgc2FsZSBoYXMgZW5kZWQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIG9ubHlBZnRlclNhbGUgCiAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKTsKICAgIH0KfQ=='.
	

]
