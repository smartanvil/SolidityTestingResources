Class {
	#name : #SRTaced90c414006b622a4b1ce74fa34b1f650ab319,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaced90c414006b622a4b1ce74fa34b1f650ab319 >> base64 [
	^ ''.
	

]
