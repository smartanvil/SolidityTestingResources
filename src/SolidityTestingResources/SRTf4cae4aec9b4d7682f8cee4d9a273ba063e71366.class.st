Class {
	#name : #SRTf4cae4aec9b4d7682f8cee4d9a273ba063e71366,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4cae4aec9b4d7682f8cee4d9a273ba063e71366 >> base64 [
	^ ''.
	

]
