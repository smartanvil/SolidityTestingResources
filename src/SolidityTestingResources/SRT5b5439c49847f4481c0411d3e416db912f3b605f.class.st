Class {
	#name : #SRT5b5439c49847f4481c0411d3e416db912f3b605f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5b5439c49847f4481c0411d3e416db912f3b605f >> base64 [
	^ ''.
	

]
