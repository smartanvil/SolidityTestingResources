Class {
	#name : #SRT383bf1fd04d0901bbd674a580e0a621fcbb4799b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT383bf1fd04d0901bbd674a580e0a621fcbb4799b >> base64 [
	^ ''.
	

]
