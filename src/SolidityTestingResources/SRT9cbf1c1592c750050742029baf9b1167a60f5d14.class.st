Class {
	#name : #SRT9cbf1c1592c750050742029baf9b1167a60f5d14,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9cbf1c1592c750050742029baf9b1167a60f5d14 >> base64 [
	^ ''.
	

]
