Class {
	#name : #SRT9a2e9235f7a7ac7b899e5f3208fbb13c6985171a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a2e9235f7a7ac7b899e5f3208fbb13c6985171a >> base64 [
	^ ''.
	

]
