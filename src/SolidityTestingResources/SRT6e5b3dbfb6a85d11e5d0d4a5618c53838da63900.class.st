Class {
	#name : #SRT6e5b3dbfb6a85d11e5d0d4a5618c53838da63900,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e5b3dbfb6a85d11e5d0d4a5618c53838da63900 >> base64 [
	^ ''.
	

]
