Class {
	#name : #SRTa6eccbefa6969afb8d35317d3e8c13f3867872fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6eccbefa6969afb8d35317d3e8c13f3867872fc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7CgovKiB0YWtpbmcgaWRlYXMgZnJvbSBGaXJzdEJsb29kIHRva2VuICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICAvKiBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsgKi8KICAgIC8qICAgaWYgKCFhc3NlcnRpb24pIHsgKi8KICAgIC8qICAgICB0aHJvdzsgKi8KICAgIC8qICAgfSAqLwogICAgLyogfSAgICAgIC8vIGFzc2VydCBubyBsb25nZXIgbmVlZGVkIG9uY2Ugc29saWRpdHkgaXMgb24gMC40LjEwICovCgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKfQoKCmNvbnRyYWN0IFRva2VuIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCgovKiAgRVJDIDIwIHRva2VuICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQpjb250cmFjdCBJbmRpY29pbiBpcyBTdGFuZGFyZFRva2VuLCBTYWZlTWF0aCB7CgogICAgLy8gbWV0YWRhdGEKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJJbmRpY29pbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJJTkRJIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wIjsKCiAgICAvLyBjb250cmFjdHMKICAgIGFkZHJlc3MgcHVibGljIGV0aEZ1bmREZXBvc2l0OyAgICAgIC8vIGRlcG9zaXQgYWRkcmVzcyBmb3IgRVRIIGZvciBJbmRpY29pbiBEZXZlbG9wZXJzCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRpRnVuZEFuZFNvY2lhbFZhdWx0RGVwb3NpdDsgICAgICAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIGluZGljb2luIGRldmVsb3BlcnMgdXNlIGFuZCBzb2NpYWwgdmF1bHQgCiAgICBhZGRyZXNzIHB1YmxpYyBib3VudHlEZXBvc2l0OyAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIGJvdW50eQogICAgYWRkcmVzcyBwdWJsaWMgc2FsZURlcG9zaXQ7IC8vZGVwb3NpdCBhZGRyZXNzIGZvciBwcmVTYWxlCiAgICAvLyBjcm93ZHNhbGUgcGFyYW1ldGVycwogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQ7ICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byB0cnVlIGluIG9wZXJhdGlvbmFsIHN0YXRlCiAgICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nU3RhcnRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ0VuZFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbmRpRnVuZEFuZFNvY2lhbFZhdWx0ID0gMzUwICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsgICAvLyAxMDBtIElOREkgcmVzZXJ2ZWQgZm9yIHRlYW0gdXNlIGFuZCAyNTBtIGZvciBzb2NpYWwgdmF1bHQKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGJvdW50eSA9IDUwICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsgLy8gNTBtIElOREkgcmVzZXJ2ZWQgZm9yIGJvdW50eQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgc2FsZSA9IDIwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7IAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5FeGNoYW5nZVJhdGUgPSAxMjUwMDsgLy8gMTI1MDAgSU5ESSB0b2tlbnMgcGVyIDEgRVRICiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gIDEwMDAgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbk1pbiA9ICA2MDAgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOwoKCiAgICAvLyBldmVudHMKICAgIGV2ZW50IExvZ1JlZnVuZChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBDcmVhdGVJTkRJKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIAoKICAgIAogICAgZnVuY3Rpb24gSW5kaWNvaW4oKQogICAgewogICAgICBpc0ZpbmFsaXplZCA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAvL2NvbnRyb2xzIHByZSB0aHJvdWdoIGNyb3dkc2FsZSBzdGF0ZQogICAgICBldGhGdW5kRGVwb3NpdCA9IDB4ZTE2OTI3MjQzNTg3ZDMyOTM1NzQyMzUzMTREOTZCMzUwMWZDMDBiNzsKICAgICAgaW5kaUZ1bmRBbmRTb2NpYWxWYXVsdERlcG9zaXQgPSAweEY4M0VBMzM1MzAwMjdBNEZkN0YzNzYyOUUxODUwOEUxMjRERkI5OUQ7CiAgICAgIHNhbGVEZXBvc2l0ID0gMHhDMUU1MjE0OTgzZDE4YjgwYzlDZGQ1ZDJlZEFDNDBCN2Q4ZGRmQ0I5OwogICAgICBib3VudHlEZXBvc2l0ID0gMHhCNDFBMTlhYkY4MTQzNzVEODkyMjI4MzRhZUUzRkIyNjRlNGI1ZTc3OwogICAgICBmdW5kaW5nU3RhcnRUaW1lID0gMTUwNzMwOTg2MTsKICAgICAgZnVuZGluZ0VuZFRpbWUgPSAxNTA5NTgwNzk5OwogICAgICAKICAgICAgdG90YWxTdXBwbHkgPSBpbmRpRnVuZEFuZFNvY2lhbFZhdWx0ICsgYm91bnR5ICsgc2FsZTsKICAgICAgYmFsYW5jZXNbaW5kaUZ1bmRBbmRTb2NpYWxWYXVsdERlcG9zaXRdID0gaW5kaUZ1bmRBbmRTb2NpYWxWYXVsdDsgLy8gRGVwb3NpdCBJbmRpY29pbiBkZXZlbG9wZXJzIHNoYXJlCiAgICAgIGJhbGFuY2VzW2JvdW50eURlcG9zaXRdID0gYm91bnR5OyAvL0RlcG9zaXQgYm91bnR5IFNoYXJlCiAgICAgIGJhbGFuY2VzW3NhbGVEZXBvc2l0XSA9IHNhbGU7IC8vRGVwb3NpdCBwcmVTYWxlIFNoYXJlCiAgICAgIENyZWF0ZUlOREkoaW5kaUZ1bmRBbmRTb2NpYWxWYXVsdERlcG9zaXQsIGluZGlGdW5kQW5kU29jaWFsVmF1bHQpOyAgLy8gbG9ncyBpbmRpY29pbiBkZXZlbG9wZXJzIGZ1bmQKICAgICAgQ3JlYXRlSU5ESShib3VudHlEZXBvc2l0LCBib3VudHkpOyAvLyBsb2dzIGJvdW50eSBmdW5kCiAgICAgIENyZWF0ZUlOREkoc2FsZURlcG9zaXQsIHNhbGUpOyAvLyBsb2dzIHByZVNhbGUgZnVuZAogICAgfQogICAgCiAgICAKICAgIC8vLyBAZGV2IEFjY2VwdHMgZXRoZXIgYW5kIGNyZWF0ZXMgbmV3IElOREkgdG9rZW5zLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgcGF5YWJsZSBleHRlcm5hbCB7CiAgICAgIGlmIChpc0ZpbmFsaXplZCkgcmV2ZXJ0KCk7CiAgICAgIGlmIChub3cgPCBmdW5kaW5nU3RhcnRUaW1lKSByZXZlcnQoKTsKICAgICAgaWYgKG5vdyA+IGZ1bmRpbmdFbmRUaW1lKSByZXZlcnQoKTsKICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSByZXZlcnQoKTsKCiAgICAgIHVpbnQyNTYgdG9rZW5zID0gc2FmZU11bHQobXNnLnZhbHVlLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7IC8vIGNoZWNrIHRoYXQgd2UncmUgbm90IG92ZXIgdG90YWxzCiAgICAgIHVpbnQyNTYgY2hlY2tlZFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CgogICAgICAvLyByZXR1cm4gbW9uZXkgaWYgc29tZXRoaW5nIGdvZXMgd3JvbmcKICAgICAgaWYgKHRva2VuQ3JlYXRpb25DYXAgPCBjaGVja2VkU3VwcGx5KSByZXZlcnQoKTsgIC8vIG9kZCBmcmFjdGlvbnMgd29uJ3QgYmUgZm91bmQKCiAgICAgIHRvdGFsU3VwcGx5ID0gY2hlY2tlZFN1cHBseTsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zOyAgLy8gc2FmZUFkZCBub3QgbmVlZGVkOyBiYWQgc2VtYW50aWNzIHRvIHVzZSBoZXJlCiAgICAgIENyZWF0ZUlOREkobXNnLnNlbmRlciwgdG9rZW5zKTsgIC8vIGxvZ3MgdG9rZW4gY3JlYXRpb24KICAgIH0KCiAgICAvLy8gQGRldiBFbmRzIHRoZSBmdW5kaW5nIHBlcmlvZCBhbmQgc2VuZHMgdGhlIEVUSCBob21lCiAgICBmdW5jdGlvbiBmaW5hbGl6ZSgpIGV4dGVybmFsIHsKICAgICAgaWYgKGlzRmluYWxpemVkKSByZXZlcnQoKTsKICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZXRoRnVuZERlcG9zaXQpIHJldmVydCgpOyAvLyBsb2NrcyBmaW5hbGl6ZSB0byB0aGUgdWx0aW1hdGUgRVRIIG93bmVyCiAgICAgIGlmKHRvdGFsU3VwcGx5IDwgdG9rZW5DcmVhdGlvbk1pbikgcmV2ZXJ0KCk7ICAgICAgLy8gaGF2ZSB0byBzZWxsIG1pbmltdW0gdG8gbW92ZSB0byBvcGVyYXRpb25hbAogICAgICBpZihub3cgPD0gZnVuZGluZ0VuZFRpbWUgJiYgdG90YWxTdXBwbHkgIT0gdG9rZW5DcmVhdGlvbkNhcCkgcmV2ZXJ0KCk7CiAgICAgIC8vIG1vdmUgdG8gb3BlcmF0aW9uYWwKICAgICAgaXNGaW5hbGl6ZWQgPSB0cnVlOwogICAgICBpZighZXRoRnVuZERlcG9zaXQuc2VuZCh0aGlzLmJhbGFuY2UpKSByZXZlcnQoKTsgIC8vIHNlbmQgdGhlIGV0aCB0byBJbmRpY29pbiBkZXZlbG9wZXJzCiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGNvbnRyaWJ1dG9ycyB0byByZWNvdmVyIHRoZWlyIGV0aGVyIGluIHRoZSBjYXNlIG9mIGEgZmFpbGVkIGZ1bmRpbmcgY2FtcGFpZ24uCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbCB7CiAgICAgIGlmKGlzRmluYWxpemVkKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnRzIHJlZnVuZCBpZiBvcGVyYXRpb25hbAogICAgICBpZiAobm93IDw9IGZ1bmRpbmdFbmRUaW1lKSByZXZlcnQoKTsgLy8gcHJldmVudHMgcmVmdW5kIHVudGlsIHNhbGUgcGVyaW9kIGlzIG92ZXIKICAgICAgaWYodG90YWxTdXBwbHkgPj0gdG9rZW5DcmVhdGlvbk1pbikgcmV2ZXJ0KCk7ICAvLyBubyByZWZ1bmRzIGlmIHdlIHNvbGQgZW5vdWdoCiAgICAgIGlmKG1zZy5zZW5kZXIgPT0gaW5kaUZ1bmRBbmRTb2NpYWxWYXVsdERlcG9zaXQpIHJldmVydCgpOyAgICAvLyBJbmRpY29pbiBkZXZlbG9wZXJzIG5vdCBlbnRpdGxlZCB0byBhIHJlZnVuZAogICAgICB1aW50MjU2IGluZGlWYWwgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgaWYgKGluZGlWYWwgPT0gMCkgcmV2ZXJ0KCk7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3VidHJhY3QodG90YWxTdXBwbHksIGluZGlWYWwpOyAvLyBleHRyYSBzYWZlCiAgICAgIHVpbnQyNTYgZXRoVmFsID0gaW5kaVZhbCAvIHRva2VuRXhjaGFuZ2VSYXRlOyAgICAgLy8gc2hvdWxkIGJlIHNhZmU7IHByZXZpb3VzIHRocm93cyBjb3ZlcnMgZWRnZXMKICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsIGV0aFZhbCk7ICAgICAgICAgICAgICAgLy8gbG9nIGl0IAogICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChldGhWYWwpKSByZXZlcnQoKTsgICAgICAgLy8gaWYgeW91J3JlIHVzaW5nIGEgY29udHJhY3Q7IG1ha2Ugc3VyZSBpdCB3b3JrcyB3aXRoIC5zZW5kIGdhcyBsaW1pdHMKICAgIH0KCn0='.
	

]
