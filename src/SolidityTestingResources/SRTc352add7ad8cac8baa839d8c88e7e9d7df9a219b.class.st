Class {
	#name : #SRTc352add7ad8cac8baa839d8c88e7e9d7df9a219b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc352add7ad8cac8baa839d8c88e7e9d7df9a219b >> base64 [
	^ ''.
	

]
