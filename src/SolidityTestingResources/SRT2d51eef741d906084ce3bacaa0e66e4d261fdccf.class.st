Class {
	#name : #SRT2d51eef741d906084ce3bacaa0e66e4d261fdccf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2d51eef741d906084ce3bacaa0e66e4d261fdccf >> base64 [
	^ ''.
	

]
