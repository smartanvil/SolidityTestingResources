Class {
	#name : #SRT47EB39C6d48BCA0883B89E2C089E0718a6fDb555,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47EB39C6d48BCA0883B89E2C089E0718a6fDb555 >> base64 [
	^ ''.
	

]
