Class {
	#name : #SRT90374ebf6a15e4fdf99d00e9e783cb6183b44272,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90374ebf6a15e4fdf99d00e9e783cb6183b44272 >> base64 [
	^ ''.
	

]
