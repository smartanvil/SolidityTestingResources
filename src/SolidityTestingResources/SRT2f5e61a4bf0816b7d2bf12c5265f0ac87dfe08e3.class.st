Class {
	#name : #SRT2f5e61a4bf0816b7d2bf12c5265f0ac87dfe08e3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f5e61a4bf0816b7d2bf12c5265f0ac87dfe08e3 >> base64 [
	^ ''.
	

]
