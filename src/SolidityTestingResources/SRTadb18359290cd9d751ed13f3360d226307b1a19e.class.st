Class {
	#name : #SRTadb18359290cd9d751ed13f3360d226307b1a19e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTadb18359290cd9d751ed13f3360d226307b1a19e >> base64 [
	^ ''.
	

]
