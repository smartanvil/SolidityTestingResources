Class {
	#name : #SRT19de65cb8f9747987ae97cfbd176f5031c35da30,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19de65cb8f9747987ae97cfbd176f5031c35da30 >> base64 [
	^ ''.
	

]
