Class {
	#name : #SRT08d32b0da63e2C3bcF8019c9c5d849d7a9d791e6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08d32b0da63e2C3bcF8019c9c5d849d7a9d791e6 >> base64 [
	^ ''.
	

]
