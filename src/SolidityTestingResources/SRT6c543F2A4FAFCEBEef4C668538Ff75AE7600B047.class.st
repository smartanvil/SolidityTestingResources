Class {
	#name : #SRT6c543F2A4FAFCEBEef4C668538Ff75AE7600B047,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6c543F2A4FAFCEBEef4C668538Ff75AE7600B047 >> base64 [
	^ ''.
	

]
