Class {
	#name : #SRT4BFFC9B4d4DcF730820a2EdCAD48Ff5D7E0Ae807,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4BFFC9B4d4DcF730820a2EdCAD48Ff5D7E0Ae807 >> base64 [
	^ ''.
	

]
