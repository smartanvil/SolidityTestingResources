Class {
	#name : #SRT1d97bccc6296aac6f0be796c7e8cb270eca4c6c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d97bccc6296aac6f0be796c7e8cb270eca4c6c6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmludGVyZmFjZSBUb2tlbiB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnMgKHVpbnQyNTYpOwogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBzdGFydFRyYWRpbmcoKSBleHRlcm5hbDsKfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCmludGVyZmFjZSBUb2tlblJlY2lwaWVudCB7IAogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgZXh0ZXJuYWw7IAogICAgCn0KCgppbnRlcmZhY2UgQXF1YVByaWNlT3JhY2xlIHsKICBmdW5jdGlvbiBnZXRBdWRDZW50V2VpUHJpY2UoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiBnZXRBcXVhVG9rZW5BdWRDZW50c1ByaWNlKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgZXZlbnQgTmV3UHJpY2UodWludCBfYXVkQ2VudFdlaVByaWNlLCB1aW50IF9hcXVhVG9rZW5BdWRDZW50c1ByaWNlKTsKfQoKCi8qCmZpbGU6ICAgTGliQ0xMLnNvbAp2ZXI6ICAgIDAuNC4wCnVwZGF0ZWQ6MzEtTWFyLTIwMTYKYXV0aG9yOiBEYXJyeWwgTW9ycmlzCmVtYWlsOiAgbzByYWdtYW4wbyBBVCBnbWFpbC5jb20KCkEgU29saWRpdHkgbGlicmFyeSBmb3IgaW1wbGVtZW50aW5nIGEgZGF0YSBpbmRleGluZyByZWdpbWUgdXNpbmcKYSBjaXJjdWxhciBsaW5rZWQgbGlzdC4KClRoaXMgbGlicmFyeSBwcm92aXNpb25zIGxvb2t1cCwgbmF2aWdhdGlvbiBhbmQga2V5L2luZGV4IHN0b3JhZ2UKZnVuY3Rpb25hbGl0eSB3aGljaCBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGFuIGFycmF5IG9yIG1hcHBpbmcuCgpOT1RJQ0U6IFRoaXMgbGlicmFyeSB1c2VzIGludGVybmFsIGZ1bmN0aW9ucyBvbmx5IGFuZCBzbyBjYW5ub3QgYmUgY29tcGlsZWQKYW5kIGRlcGxveWVkIGluZGVwZW5kZW50bHkgZnJvbSBpdHMgY2FsbGluZyBjb250cmFjdC4KClRoaXMgc29mdHdhcmUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgClNlZSBNSVQgTGljZW5jZSBmb3IgZnVydGhlciBkZXRhaWxzLgo8aHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQ+LgoqLwoKLy8gTGliQ0xMIHVzaW5nIGB1aW50YCBrZXlzCmxpYnJhcnkgTGliQ0xMdSB7CgogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBWRVJTSU9OID0gIkxpYkNMTHUgMC40LjAiOwogICAgdWludCBjb25zdGFudCBOVUxMID0gMDsKICAgIHVpbnQgY29uc3RhbnQgSEVBRCA9IDA7CiAgICBib29sIGNvbnN0YW50IFBSRVYgPSBmYWxzZTsKICAgIGJvb2wgY29uc3RhbnQgTkVYVCA9IHRydWU7CiAgICAKICAgIHN0cnVjdCBDTEx7CiAgICAgICAgbWFwcGluZyAodWludCA9PiBtYXBwaW5nIChib29sID0+IHVpbnQpKSBjbGw7CiAgICB9CgogICAgLy8gbjogbm9kZSBpZCAgZDogZGlyZWN0aW9uICByOiByZXR1cm4gbm9kZSBpZAoKICAgIC8vIFJldHVybiBleGlzdGVudGlhbCBzdGF0ZSBvZiBhIG5vZGUuIG4gPT0gSEVBRCByZXR1cm5zIGxpc3QgZXhpc3RlbmNlLgogICAgZnVuY3Rpb24gZXhpc3RzKENMTCBzdG9yYWdlIHNlbGYsIHVpbnQgbikKICAgICAgICBpbnRlcm5hbAogICAgICAgIGNvbnN0YW50IHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYgKHNlbGYuY2xsW25dW1BSRVZdICE9IEhFQUQgfHwgc2VsZi5jbGxbbl1bTkVYVF0gIT0gSEVBRCkKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgaWYgKG4gPT0gSEVBRCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChzZWxmLmNsbFtIRUFEXVtORVhUXSA9PSBuKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIC8vIFJldHVybnMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgbGlzdAogICAgZnVuY3Rpb24gc2l6ZU9mKENMTCBzdG9yYWdlIHNlbGYpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcikgewogICAgICAgIHVpbnQgaSA9IHN0ZXAoc2VsZiwgSEVBRCwgTkVYVCk7CiAgICAgICAgd2hpbGUgKGkgIT0gSEVBRCkgewogICAgICAgICAgICBpID0gc3RlcChzZWxmLCBpLCBORVhUKTsKICAgICAgICAgICAgcisrOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgbGlua3Mgb2YgYSBub2RlIGFzIGFuZCBhcnJheQogICAgZnVuY3Rpb24gZ2V0Tm9kZShDTEwgc3RvcmFnZSBzZWxmLCB1aW50IG4pCiAgICAgICAgaW50ZXJuYWwgIGNvbnN0YW50IHJldHVybnMgKHVpbnRbMl0pCiAgICB7CiAgICAgICAgcmV0dXJuIFtzZWxmLmNsbFtuXVtQUkVWXSwgc2VsZi5jbGxbbl1bTkVYVF1dOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIGxpbmsgb2YgYSBub2RlIGBuYCBpbiBkaXJlY3Rpb24gYGRgLgogICAgZnVuY3Rpb24gc3RlcChDTEwgc3RvcmFnZSBzZWxmLCB1aW50IG4sIGJvb2wgZCkKICAgICAgICBpbnRlcm5hbCAgY29uc3RhbnQgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZi5jbGxbbl1bZF07CiAgICB9CgogICAgLy8gQ2FuIGJlIHVzZWQgYmVmb3JlIGBpbnNlcnRgIHRvIGJ1aWxkIGFuIG9yZGVyZWQgbGlzdAogICAgLy8gYGFgIGFuIGV4aXN0aW5nIG5vZGUgdG8gc2VhcmNoIGZyb20sIGUuZy4gSEVBRC4KICAgIC8vIGBiYCB2YWx1ZSB0byBzZWVrCiAgICAvLyBgcmAgZmlyc3Qgbm9kZSBiZXlvbmQgYGJgIGluIGRpcmVjdGlvbiBgZGAKICAgIGZ1bmN0aW9uIHNlZWsoQ0xMIHN0b3JhZ2Ugc2VsZiwgdWludCBhLCB1aW50IGIsIGJvb2wgZCkKICAgICAgICBpbnRlcm5hbCAgY29uc3RhbnQgcmV0dXJucyAodWludCByKQogICAgewogICAgICAgIHIgPSBzdGVwKHNlbGYsIGEsIGQpOwogICAgICAgIHdoaWxlICAoKGIhPXIpICYmICgoYiA8IHIpICE9IGQpKSByID0gc2VsZi5jbGxbcl1bZF07CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIENyZWF0ZXMgYSBiaWRpcmVjdGlvbmFsIGxpbmsgYmV0d2VlbiB0d28gbm9kZXMgb24gZGlyZWN0aW9uIGBkYAogICAgZnVuY3Rpb24gc3RpdGNoKENMTCBzdG9yYWdlIHNlbGYsIHVpbnQgYSwgdWludCBiLCBib29sIGQpIGludGVybmFsICB7CiAgICAgICAgc2VsZi5jbGxbYl1bIWRdID0gYTsKICAgICAgICBzZWxmLmNsbFthXVtkXSA9IGI7CiAgICB9CgogICAgLy8gSW5zZXJ0IG5vZGUgYGJgIGJlc2lkZSBleGlzdGluZyBub2RlIGBhYCBpbiBkaXJlY3Rpb24gYGRgLgogICAgZnVuY3Rpb24gaW5zZXJ0IChDTEwgc3RvcmFnZSBzZWxmLCB1aW50IGEsIHVpbnQgYiwgYm9vbCBkKSBpbnRlcm5hbCAgewogICAgICAgIHVpbnQgYyA9IHNlbGYuY2xsW2FdW2RdOwogICAgICAgIHN0aXRjaCAoc2VsZiwgYSwgYiwgZCk7CiAgICAgICAgc3RpdGNoIChzZWxmLCBiLCBjLCBkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVtb3ZlKENMTCBzdG9yYWdlIHNlbGYsIHVpbnQgbikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmIChuID09IE5VTEwpIHJldHVybjsKICAgICAgICBzdGl0Y2goc2VsZiwgc2VsZi5jbGxbbl1bUFJFVl0sIHNlbGYuY2xsW25dW05FWFRdLCBORVhUKTsKICAgICAgICBkZWxldGUgc2VsZi5jbGxbbl1bUFJFVl07CiAgICAgICAgZGVsZXRlIHNlbGYuY2xsW25dW05FWFRdOwogICAgICAgIHJldHVybiBuOwogICAgfQoKICAgIGZ1bmN0aW9uIHB1c2goQ0xMIHN0b3JhZ2Ugc2VsZiwgdWludCBuLCBib29sIGQpIGludGVybmFsICB7CiAgICAgICAgaW5zZXJ0KHNlbGYsIEhFQUQsIG4sIGQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBwb3AoQ0xMIHN0b3JhZ2Ugc2VsZiwgYm9vbCBkKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHJlbW92ZShzZWxmLCBzdGVwKHNlbGYsIEhFQUQsIGQpKTsKICAgIH0KfQoKLy8gTGliQ0xMIHVzaW5nIGBpbnRgIGtleXMKbGlicmFyeSBMaWJDTExpIHsKCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIFZFUlNJT04gPSAiTGliQ0xMaSAwLjQuMCI7CiAgICBpbnQgY29uc3RhbnQgTlVMTCA9IDA7CiAgICBpbnQgY29uc3RhbnQgSEVBRCA9IDA7CiAgICBib29sIGNvbnN0YW50IFBSRVYgPSBmYWxzZTsKICAgIGJvb2wgY29uc3RhbnQgTkVYVCA9IHRydWU7CiAgICAKICAgIHN0cnVjdCBDTEx7CiAgICAgICAgbWFwcGluZyAoaW50ID0+IG1hcHBpbmcgKGJvb2wgPT4gaW50KSkgY2xsOwogICAgfQoKICAgIC8vIG46IG5vZGUgaWQgIGQ6IGRpcmVjdGlvbiAgcjogcmV0dXJuIG5vZGUgaWQKCiAgICAvLyBSZXR1cm4gZXhpc3RlbnRpYWwgc3RhdGUgb2YgYSBub2RlLiBuID09IEhFQUQgcmV0dXJucyBsaXN0IGV4aXN0ZW5jZS4KICAgIGZ1bmN0aW9uIGV4aXN0cyhDTEwgc3RvcmFnZSBzZWxmLCBpbnQgbikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChzZWxmLmNsbFtuXVtQUkVWXSAhPSBIRUFEIHx8IHNlbGYuY2xsW25dW05FWFRdICE9IEhFQUQpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChuID09IEhFQUQpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoc2VsZi5jbGxbSEVBRF1bTkVYVF0gPT0gbikKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBsaXN0CiAgICBmdW5jdGlvbiBzaXplT2YoQ0xMIHN0b3JhZ2Ugc2VsZikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCByKSB7CiAgICAgICAgaW50IGkgPSBzdGVwKHNlbGYsIEhFQUQsIE5FWFQpOwogICAgICAgIHdoaWxlIChpICE9IEhFQUQpIHsKICAgICAgICAgICAgaSA9IHN0ZXAoc2VsZiwgaSwgTkVYVCk7CiAgICAgICAgICAgIHIrKzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIGxpbmtzIG9mIGEgbm9kZSBhcyBhbmQgYXJyYXkKICAgIGZ1bmN0aW9uIGdldE5vZGUoQ0xMIHN0b3JhZ2Ugc2VsZiwgaW50IG4pCiAgICAgICAgaW50ZXJuYWwgIGNvbnN0YW50IHJldHVybnMgKGludFsyXSkKICAgIHsKICAgICAgICByZXR1cm4gW3NlbGYuY2xsW25dW1BSRVZdLCBzZWxmLmNsbFtuXVtORVhUXV07CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgbGluayBvZiBhIG5vZGUgYG5gIGluIGRpcmVjdGlvbiBgZGAuCiAgICBmdW5jdGlvbiBzdGVwKENMTCBzdG9yYWdlIHNlbGYsIGludCBuLCBib29sIGQpCiAgICAgICAgaW50ZXJuYWwgIGNvbnN0YW50IHJldHVybnMgKGludCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZi5jbGxbbl1bZF07CiAgICB9CgogICAgLy8gQ2FuIGJlIHVzZWQgYmVmb3JlIGBpbnNlcnRgIHRvIGJ1aWxkIGFuIG9yZGVyZWQgbGlzdAogICAgLy8gYGFgIGFuIGV4aXN0aW5nIG5vZGUgdG8gc2VhcmNoIGZyb20sIGUuZy4gSEVBRC4KICAgIC8vIGBiYCB2YWx1ZSB0byBzZWVrCiAgICAvLyBgcmAgZmlyc3Qgbm9kZSBiZXlvbmQgYGJgIGluIGRpcmVjdGlvbiBgZGAKICAgIGZ1bmN0aW9uIHNlZWsoQ0xMIHN0b3JhZ2Ugc2VsZiwgaW50IGEsIGludCBiLCBib29sIGQpCiAgICAgICAgaW50ZXJuYWwgIGNvbnN0YW50IHJldHVybnMgKGludCByKQogICAgewogICAgICAgIHIgPSBzdGVwKHNlbGYsIGEsIGQpOwogICAgICAgIHdoaWxlICAoKGIhPXIpICYmICgoYiA8IHIpICE9IGQpKSByID0gc2VsZi5jbGxbcl1bZF07CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIENyZWF0ZXMgYSBiaWRpcmVjdGlvbmFsIGxpbmsgYmV0d2VlbiB0d28gbm9kZXMgb24gZGlyZWN0aW9uIGBkYAogICAgZnVuY3Rpb24gc3RpdGNoKENMTCBzdG9yYWdlIHNlbGYsIGludCBhLCBpbnQgYiwgYm9vbCBkKSBpbnRlcm5hbCAgewogICAgICAgIHNlbGYuY2xsW2JdWyFkXSA9IGE7CiAgICAgICAgc2VsZi5jbGxbYV1bZF0gPSBiOwogICAgfQoKICAgIC8vIEluc2VydCBub2RlIGBiYCBiZXNpZGUgZXhpc3Rpbmcgbm9kZSBgYWAgaW4gZGlyZWN0aW9uIGBkYC4KICAgIGZ1bmN0aW9uIGluc2VydCAoQ0xMIHN0b3JhZ2Ugc2VsZiwgaW50IGEsIGludCBiLCBib29sIGQpIGludGVybmFsICB7CiAgICAgICAgaW50IGMgPSBzZWxmLmNsbFthXVtkXTsKICAgICAgICBzdGl0Y2ggKHNlbGYsIGEsIGIsIGQpOwogICAgICAgIHN0aXRjaCAoc2VsZiwgYiwgYywgZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZShDTEwgc3RvcmFnZSBzZWxmLCBpbnQgbikgaW50ZXJuYWwgcmV0dXJucyAoaW50KSB7CiAgICAgICAgaWYgKG4gPT0gTlVMTCkgcmV0dXJuOwogICAgICAgIHN0aXRjaChzZWxmLCBzZWxmLmNsbFtuXVtQUkVWXSwgc2VsZi5jbGxbbl1bTkVYVF0sIE5FWFQpOwogICAgICAgIGRlbGV0ZSBzZWxmLmNsbFtuXVtQUkVWXTsKICAgICAgICBkZWxldGUgc2VsZi5jbGxbbl1bTkVYVF07CiAgICAgICAgcmV0dXJuIG47CiAgICB9CgogICAgZnVuY3Rpb24gcHVzaChDTEwgc3RvcmFnZSBzZWxmLCBpbnQgbiwgYm9vbCBkKSBpbnRlcm5hbCAgewogICAgICAgIGluc2VydChzZWxmLCBIRUFELCBuLCBkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcG9wKENMTCBzdG9yYWdlIHNlbGYsIGJvb2wgZCkgaW50ZXJuYWwgcmV0dXJucyAoaW50KSB7CiAgICAgICAgcmV0dXJuIHJlbW92ZShzZWxmLCBzdGVwKHNlbGYsIEhFQUQsIGQpKTsKICAgIH0KfQoKLy8gTGliQ0xMIHVzaW5nIGBhZGRyZXNzYCBrZXlzCmxpYnJhcnkgTGliQ0xMYSB7CgogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBWRVJTSU9OID0gIkxpYkNMTGEgMC40LjAiOwogICAgYWRkcmVzcyBjb25zdGFudCBOVUxMID0gMDsKICAgIGFkZHJlc3MgY29uc3RhbnQgSEVBRCA9IDA7CiAgICBib29sIGNvbnN0YW50IFBSRVYgPSBmYWxzZTsKICAgIGJvb2wgY29uc3RhbnQgTkVYVCA9IHRydWU7CiAgICAKICAgIHN0cnVjdCBDTEx7CiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChib29sID0+IGFkZHJlc3MpKSBjbGw7CiAgICB9CgogICAgLy8gbjogbm9kZSBpZCAgZDogZGlyZWN0aW9uICByOiByZXR1cm4gbm9kZSBpZAoKICAgIC8vIFJldHVybiBleGlzdGVudGlhbCBzdGF0ZSBvZiBhIG5vZGUuIG4gPT0gSEVBRCByZXR1cm5zIGxpc3QgZXhpc3RlbmNlLgogICAgZnVuY3Rpb24gZXhpc3RzKENMTCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgbikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChzZWxmLmNsbFtuXVtQUkVWXSAhPSBIRUFEIHx8IHNlbGYuY2xsW25dW05FWFRdICE9IEhFQUQpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChuID09IEhFQUQpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoc2VsZi5jbGxbSEVBRF1bTkVYVF0gPT0gbikKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBsaXN0CiAgICBmdW5jdGlvbiBzaXplT2YoQ0xMIHN0b3JhZ2Ugc2VsZikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCByKSB7CiAgICAgICAgYWRkcmVzcyBpID0gc3RlcChzZWxmLCBIRUFELCBORVhUKTsKICAgICAgICB3aGlsZSAoaSAhPSBIRUFEKSB7CiAgICAgICAgICAgIGkgPSBzdGVwKHNlbGYsIGksIE5FWFQpOwogICAgICAgICAgICByKys7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBSZXR1cm5zIHRoZSBsaW5rcyBvZiBhIG5vZGUgYXMgYW5kIGFycmF5CiAgICBmdW5jdGlvbiBnZXROb2RlKENMTCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgbikKICAgICAgICBpbnRlcm5hbCAgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzc1syXSkKICAgIHsKICAgICAgICByZXR1cm4gW3NlbGYuY2xsW25dW1BSRVZdLCBzZWxmLmNsbFtuXVtORVhUXV07CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgbGluayBvZiBhIG5vZGUgYG5gIGluIGRpcmVjdGlvbiBgZGAuCiAgICBmdW5jdGlvbiBzdGVwKENMTCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgbiwgYm9vbCBkKQogICAgICAgIGludGVybmFsICBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKQogICAgewogICAgICAgIHJldHVybiBzZWxmLmNsbFtuXVtkXTsKICAgIH0KCiAgICAvLyBDYW4gYmUgdXNlZCBiZWZvcmUgYGluc2VydGAgdG8gYnVpbGQgYW4gb3JkZXJlZCBsaXN0CiAgICAvLyBgYWAgYW4gZXhpc3Rpbmcgbm9kZSB0byBzZWFyY2ggZnJvbSwgZS5nLiBIRUFELgogICAgLy8gYGJgIHZhbHVlIHRvIHNlZWsKICAgIC8vIGByYCBmaXJzdCBub2RlIGJleW9uZCBgYmAgaW4gZGlyZWN0aW9uIGBkYAogICAgZnVuY3Rpb24gc2VlayhDTEwgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGEsIGFkZHJlc3MgYiwgYm9vbCBkKQogICAgICAgIGludGVybmFsICBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIHIpCiAgICB7CiAgICAgICAgciA9IHN0ZXAoc2VsZiwgYSwgZCk7CiAgICAgICAgd2hpbGUgICgoYiE9cikgJiYgKChiIDwgcikgIT0gZCkpIHIgPSBzZWxmLmNsbFtyXVtkXTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy8gQ3JlYXRlcyBhIGJpZGlyZWN0aW9uYWwgbGluayBiZXR3ZWVuIHR3byBub2RlcyBvbiBkaXJlY3Rpb24gYGRgCiAgICBmdW5jdGlvbiBzdGl0Y2goQ0xMIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBhLCBhZGRyZXNzIGIsIGJvb2wgZCkgaW50ZXJuYWwgIHsKICAgICAgICBzZWxmLmNsbFtiXVshZF0gPSBhOwogICAgICAgIHNlbGYuY2xsW2FdW2RdID0gYjsKICAgIH0KCiAgICAvLyBJbnNlcnQgbm9kZSBgYmAgYmVzaWRlIGV4aXN0aW5nIG5vZGUgYGFgIGluIGRpcmVjdGlvbiBgZGAuCiAgICBmdW5jdGlvbiBpbnNlcnQgKENMTCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgYSwgYWRkcmVzcyBiLCBib29sIGQpIGludGVybmFsICB7CiAgICAgICAgYWRkcmVzcyBjID0gc2VsZi5jbGxbYV1bZF07CiAgICAgICAgc3RpdGNoIChzZWxmLCBhLCBiLCBkKTsKICAgICAgICBzdGl0Y2ggKHNlbGYsIGIsIGMsIGQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmUoQ0xMIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBuKSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgaWYgKG4gPT0gTlVMTCkgcmV0dXJuOwogICAgICAgIHN0aXRjaChzZWxmLCBzZWxmLmNsbFtuXVtQUkVWXSwgc2VsZi5jbGxbbl1bTkVYVF0sIE5FWFQpOwogICAgICAgIGRlbGV0ZSBzZWxmLmNsbFtuXVtQUkVWXTsKICAgICAgICBkZWxldGUgc2VsZi5jbGxbbl1bTkVYVF07CiAgICAgICAgcmV0dXJuIG47CiAgICB9CgogICAgZnVuY3Rpb24gcHVzaChDTEwgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIG4sIGJvb2wgZCkgaW50ZXJuYWwgIHsKICAgICAgICBpbnNlcnQoc2VsZiwgSEVBRCwgbiwgZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHBvcChDTEwgc3RvcmFnZSBzZWxmLCBib29sIGQpIGludGVybmFsIHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gcmVtb3ZlKHNlbGYsIHN0ZXAoc2VsZiwgSEVBRCwgZCkpOwogICAgfQp9CgoKbGlicmFyeSBMaWJIb2xkaW5ncyB7CiAgICB1c2luZyBMaWJDTExhIGZvciBMaWJDTExhLkNMTDsKICAgIGJvb2wgY29uc3RhbnQgUFJFViA9IGZhbHNlOwogICAgYm9vbCBjb25zdGFudCBORVhUID0gdHJ1ZTsKCiAgICBzdHJ1Y3QgSG9sZGluZyB7CiAgICAgICAgdWludCB0b3RhbFRva2VuczsKICAgICAgICB1aW50IGxvY2tlZFRva2VuczsKICAgICAgICB1aW50IHdlaUJhbGFuY2U7CiAgICAgICAgdWludCBsYXN0UmV3YXJkTnVtYmVyOwogICAgfQogICAgCiAgICBzdHJ1Y3QgSG9sZGluZ3NTZXQgewogICAgICAgIExpYkNMTGEuQ0xMIGtleXM7CiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiBIb2xkaW5nKSBob2xkaW5nczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZXhpc3RzKEhvbGRpbmdzU2V0IHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBob2xkZXIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc2VsZi5rZXlzLmV4aXN0cyhob2xkZXIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZGQoSG9sZGluZ3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGhvbGRlciwgSG9sZGluZyBoKSBpbnRlcm5hbCB7CiAgICAgICAgc2VsZi5rZXlzLnB1c2goaG9sZGVyLCBQUkVWKTsKICAgICAgICBzZWxmLmhvbGRpbmdzW2hvbGRlcl0gPSBoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXQoSG9sZGluZ3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGhvbGRlcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoSG9sZGluZyBzdG9yYWdlKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLmtleXMuZXhpc3RzKGhvbGRlcikpOwogICAgICAgIHJldHVybiBzZWxmLmhvbGRpbmdzW2hvbGRlcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZShIb2xkaW5nc1NldCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgaG9sZGVyKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShzZWxmLmtleXMuZXhpc3RzKGhvbGRlcikpOwogICAgICAgIGRlbGV0ZSBzZWxmLmhvbGRpbmdzW2hvbGRlcl07CiAgICAgICAgc2VsZi5rZXlzLnJlbW92ZShob2xkZXIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBmaXJzdEhvbGRlcihIb2xkaW5nc1NldCBzdG9yYWdlIHNlbGYpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gc2VsZi5rZXlzLnN0ZXAoMHgwLCBORVhUKTsKICAgIH0KICAgIGZ1bmN0aW9uIG5leHRIb2xkZXIoSG9sZGluZ3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGN1cnJlbnRIb2xkZXIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gc2VsZi5rZXlzLnN0ZXAoY3VycmVudEhvbGRlciwgTkVYVCk7CiAgICB9Cn0KCgpsaWJyYXJ5IExpYlJlZGVtcHRpb25zIHsKICAgIHVzaW5nIExpYkNMTHUgZm9yIExpYkNMTHUuQ0xMOwogICAgYm9vbCBjb25zdGFudCBQUkVWID0gZmFsc2U7CiAgICBib29sIGNvbnN0YW50IE5FWFQgPSB0cnVlOwoKICAgIHN0cnVjdCBSZWRlbXB0aW9uIHsKICAgICAgICB1aW50MjU2IElkOwogICAgICAgIGFkZHJlc3MgaG9sZGVyQWRkcmVzczsKICAgICAgICB1aW50MjU2IG51bWJlck9mVG9rZW5zOwogICAgfQogICAgCiAgICBzdHJ1Y3QgUmVkZW1wdGlvbnNRdWV1ZSB7CiAgICAgICAgdWludDI1NiByZWRlbXB0aW9uUmVxdWVzdHNDb3VudGVyOwogICAgICAgIExpYkNMTHUuQ0xMIGtleXM7CiAgICAgICAgbWFwcGluZyAodWludCA9PiBSZWRlbXB0aW9uKSBxdWV1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZXhpc3RzKFJlZGVtcHRpb25zUXVldWUgc3RvcmFnZSBzZWxmLCB1aW50IGlkKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHNlbGYua2V5cy5leGlzdHMoaWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZGQoUmVkZW1wdGlvbnNRdWV1ZSBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgaG9sZGVyLCB1aW50IF9udW1iZXJPZlRva2VucykgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgICAgUmVkZW1wdGlvbiBtZW1vcnkgciA9IFJlZGVtcHRpb24oewogICAgICAgICAgICBJZDogKytzZWxmLnJlZGVtcHRpb25SZXF1ZXN0c0NvdW50ZXIsCiAgICAgICAgICAgIGhvbGRlckFkZHJlc3M6IGhvbGRlciwgCiAgICAgICAgICAgIG51bWJlck9mVG9rZW5zOiBfbnVtYmVyT2ZUb2tlbnMKICAgICAgICB9KTsKICAgICAgICBzZWxmLnF1ZXVlW3IuSWRdID0gcjsKICAgICAgICBzZWxmLmtleXMucHVzaChyLklkLCBQUkVWKTsKICAgICAgICByZXR1cm4gci5JZDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0KFJlZGVtcHRpb25zUXVldWUgc3RvcmFnZSBzZWxmLCB1aW50IGlkKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChSZWRlbXB0aW9uIHN0b3JhZ2UpIHsKICAgICAgICByZXF1aXJlKHNlbGYua2V5cy5leGlzdHMoaWQpKTsKICAgICAgICByZXR1cm4gc2VsZi5xdWV1ZVtpZF07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZShSZWRlbXB0aW9uc1F1ZXVlIHN0b3JhZ2Ugc2VsZiwgdWludCBpZCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoc2VsZi5rZXlzLmV4aXN0cyhpZCkpOwogICAgICAgIGRlbGV0ZSBzZWxmLnF1ZXVlW2lkXTsKICAgICAgICBzZWxmLmtleXMucmVtb3ZlKGlkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZmlyc3RSZWRlbXB0aW9uKFJlZGVtcHRpb25zUXVldWUgc3RvcmFnZSBzZWxmKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHNlbGYua2V5cy5zdGVwKDB4MCwgTkVYVCk7CiAgICB9CiAgICBmdW5jdGlvbiBuZXh0UmVkZW1wdGlvbihSZWRlbXB0aW9uc1F1ZXVlIHN0b3JhZ2Ugc2VsZiwgdWludCBjdXJyZW50SWQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2VsZi5rZXlzLnN0ZXAoY3VycmVudElkLCBORVhUKTsKICAgIH0KfQoKCmNvbnRyYWN0IEFxdWFUb2tlbiBpcyBPd25lZCwgVG9rZW4gewogICAgCiAgICAvL2ltcG9ydHMKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgdXNpbmcgTGliSG9sZGluZ3MgZm9yIExpYkhvbGRpbmdzLkhvbGRpbmc7CiAgICB1c2luZyBMaWJIb2xkaW5ncyBmb3IgTGliSG9sZGluZ3MuSG9sZGluZ3NTZXQ7CiAgICB1c2luZyBMaWJSZWRlbXB0aW9ucyBmb3IgTGliUmVkZW1wdGlvbnMuUmVkZW1wdGlvbjsKICAgIHVzaW5nIExpYlJlZGVtcHRpb25zIGZvciBMaWJSZWRlbXB0aW9ucy5SZWRlbXB0aW9uc1F1ZXVlOwoKICAgIC8vaW5uZXIgdHlwZXMKICAgIHN0cnVjdCBEaXN0cmlidXRpb25Db250ZXh0IHsKICAgICAgICB1aW50IGRpc3RyaWJ1dGlvbkFtb3VudDsKICAgICAgICB1aW50IHJlY2VpdmVkUmVkZW1wdGlvbkFtb3VudDsKICAgICAgICB1aW50IHJlZGVtcHRpb25BbW91bnQ7CiAgICAgICAgdWludCB0b2tlblByaWNlV2VpOwogICAgICAgIHVpbnQgY3VycmVudFJlZGVtcHRpb25JZDsKCiAgICAgICAgdWludCB0b3RhbFJld2FyZEFtb3VudDsKICAgIH0KICAgIAoKICAgIHN0cnVjdCBXaW5kVXBDb250ZXh0IHsKICAgICAgICB1aW50IHRvdGFsV2luZFVwQW1vdW50OwogICAgICAgIHVpbnQgdG9rZW5SZXdhcmQ7CiAgICAgICAgdWludCBwYWlkUmV3YXJkOwogICAgICAgIGFkZHJlc3MgY3VycmVuSG9sZGVyQWRkcmVzczsKICAgIH0KICAgIAogICAgLy9jb25zdGFudHMKICAgIGJvb2wgY29uc3RhbnQgUFJFViA9IGZhbHNlOwogICAgYm9vbCBjb25zdGFudCBORVhUID0gdHJ1ZTsKCiAgICAvL3N0YXRlICAgIAogICAgZW51bSBUb2tlblN0YXR1cyB7CiAgICAgICAgT25TYWxlLAogICAgICAgIFRyYWRpbmcsCiAgICAgICAgRGlzdHJpYnV0aW5nLAogICAgICAgIFdpbmRpbmdVcAogICAgfQogICAgLy8vU3RhdHVzIG9mIHRoZSB0b2tlbiBjb250cmFjdAogICAgVG9rZW5TdGF0dXMgcHVibGljIHRva2VuU3RhdHVzOwogICAgCiAgICAvLy9BcXVhIFByaWNlIE9yYWNsZSBzbWFydCBjb250cmFjdAogICAgQXF1YVByaWNlT3JhY2xlIHB1YmxpYyBwcmljZU9yYWNsZTsKICAgIExpYkhvbGRpbmdzLkhvbGRpbmdzU2V0IGludGVybmFsIGhvbGRpbmdzOwogICAgdWludDI1NiBpbnRlcm5hbCB0b3RhbFN1cHBseU9mVG9rZW5zOwogICAgTGliUmVkZW1wdGlvbnMuUmVkZW1wdGlvbnNRdWV1ZSByZWRlbXB0aW9uc1F1ZXVlOwogICAgCiAgICAvLy9UaGUgd2hvbGUgcGVyY2VudGFnZSBudW1iZXIgKDAtMTAwKSBvZiB0aGUgdG90YWwgZGlzdHJpYnV0YWJsZSBwcm9maXQgCiAgICAvLy9hbW91bnQgYXZhaWxhYmxlIGZvciB0b2tlbiByZWRlbXB0aW9uIGluIGVhY2ggcHJvZml0IGRpc3RyaWJ1dGlvbiByb3VuZAogICAgdWludDggcHVibGljIHJlZGVtcHRpb25QZXJjZW50YWdlT2ZEaXN0cmlidXRpb247CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93YW5jZXM7CgogICAgdWludCBbXSBpbnRlcm5hbCByZXdhcmRzOwoKICAgIERpc3RyaWJ1dGlvbkNvbnRleHQgaW50ZXJuYWwgZGlzdEN0eDsKICAgIFdpbmRVcENvbnRleHQgaW50ZXJuYWwgd2luZFVwQ3R4OwogICAgCgogICAgLy9FUkMtMjAKICAgIC8vL1RyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIC8vL1RyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsgICAgCgogICAgLy8vVG9rZW4gbmFtZQogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgLy8vVG9rZW4gc3ltYm9sCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIC8vL051bWJlciBvZiBkZWNpbWFscwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgCiAgICAvLy9SZXR1cm5zIHRvdGFsIHN1cHBseSBvZiBBcXVhIFRva2VucyAKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseU9mVG9rZW5zOwogICAgfQoKICAgIC8vLyBHZXQgdGhlIHRva2VuIGJhbGFuY2UgZm9yIGFkZHJlc3MgX293bmVyCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBpZiAoIWhvbGRpbmdzLmV4aXN0cyhfb3duZXIpKQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICBMaWJIb2xkaW5ncy5Ib2xkaW5nIHN0b3JhZ2UgaCA9IGhvbGRpbmdzLmdldChfb3duZXIpOwogICAgICAgIHJldHVybiBoLnRvdGFsVG9rZW5zLnN1YihoLmxvY2tlZFRva2Vucyk7CiAgICB9CiAgICAvLy9UcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmV0dXJuIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAvLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgIC8vLyB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQogICAgLy8vIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IHRoZSBjb21tYW5kIHNob3VsZCBmYWlsIHVubGVzcyB0aGUgX2Zyb20gYWNjb3VudCBoYXMKICAgIC8vLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2FuY2VzW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICAvLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4gICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKHRva2VuU3RhdHVzID09IFRva2VuU3RhdHVzLk9uU2FsZSkgewogICAgICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIH0KICAgICAgICBhbGxvd2FuY2VzW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgCiAgICAvLy8gUmV0dXJucyB0aGUgYW1vdW50IHRoYXQgX3NwZW5kZXIgaXMgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lciBhY2NvdW50LgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dhbmNlc1tfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIAogICAgCiAgICAvL2N1c3RvbSBwdWJsaWMgaW50ZXJmYWNlCiAgICAKICAgIC8vL0V2ZW50IGlzIGZpcmVkIHdoZW4gaG9sZGVyIHJlcXVlc3RzIHRvIHJlZGVlbSB0aGVpciB0b2tlbnMKICAgIC8vL0BwYXJhbSBob2xkZXIgQWNjb3VudCBhZGRyZXNzIG9mIHRva2VuIGhvbGRlciByZXF1ZXN0aW5nIHJlZGVtcHRpb24KICAgIC8vL0BwYXJhbSBfbnVtYmVyT2ZUb2tlbnMgTnVtYmVyIG9mIHRva2VucyByZXF1ZXN0ZWQKICAgIC8vL0BwYXJhbSBfcmVxdWVzdElkIElEIGFzc2lnbmVkIHRvIHRoZSByZWRlbXB0aW9uIHJlcXVlc3QKICAgIGV2ZW50IFJlcXVlc3RSZWRlbXB0aW9uKGFkZHJlc3MgaG9sZGVyLCB1aW50MjU2IF9udW1iZXJPZlRva2VucywgdWludCBfcmVxdWVzdElkKTsKICAgIAogICAgLy8vRXZlbnQgaXMgZmlyZWQgd2hlbiBob2xkZXIgY2FuY2VscyByZWRlbXB0aW9uIHJlcXVlc3Qgd2l0aCBJRCA9IF9yZXF1ZXN0SWQKICAgIC8vL0BwYXJhbSBob2xkZXIgQWNjb3VudCBhZGRyZXNzIG9mIHRva2VuIGhvbGRlciBjYW5jZWxsaW5nIHJlZGVtcHRpb24gcmVxdWVzdAogICAgLy8vQHBhcmFtIF9udW1iZXJPZlRva2VucyBOdW1iZXIgb2YgdG9rZW5zIGFmZmVjdGVkCiAgICAvLy9AcGFyYW0gX3JlcXVlc3RJZCBJRCBvZiB0aGUgcmVkZW1wdGlvbiByZXF1ZXN0IHRoYXQgd2FzIGNhbmNlbGxlZAogICAgZXZlbnQgQ2FuY2VsUmVkZW1wdGlvblJlcXVlc3QoYWRkcmVzcyBob2xkZXIsIHVpbnQyNTYgX251bWJlck9mVG9rZW5zLCB1aW50MjU2IF9yZXF1ZXN0SWQpOwogICAgCiAgICAvLy9FdmVudCBvY2N1cnMgd2hlbiB0aGUgcmVkZW1wdGlvbiByZXF1ZXN0IGlzIHJlZGVlbWVkLiAKICAgIC8vL0BwYXJhbSBob2xkZXIgQWNjb3VudCBhZGRyZXNzIG9mIHRoZSB0b2tlbiBob2xkZXIgd2hvc2UgdG9rZW5zIHdlcmUgcmVkZWVtZWQKICAgIC8vL0BwYXJhbSBfcmVxdWVzdElkIFRoZSBJRCBvZiB0aGUgcmVkZW1wdGlvbiByZXF1ZXN0CiAgICAvLy9AcGFyYW0gX251bWJlck9mVG9rZW5zIFRoZSBudW1iZXIgb2YgdG9rZW5zIHJlZGVlbWVkCiAgICAvLy9AcGFyYW0gYW1vdW50IFRoZSByZWRlZW1lZCBhbW91bnQgaW4gV2VpCiAgICBldmVudCBIb2xkZXJSZWRlbXB0aW9uKGFkZHJlc3MgaG9sZGVyLCB1aW50IF9yZXF1ZXN0SWQsIHVpbnQyNTYgX251bWJlck9mVG9rZW5zLCB1aW50IGFtb3VudCk7CgogICAgLy8vRXZlbnQgb2NjdXJzIHdoZW4gcHJvZml0IGRpc3RyaWJ1dGlvbiBpcyB0cmlnZ2VyZWQKICAgIC8vL0BwYXJhbSBhbW91bnQgVG90YWwgYW1vdW50IChpbiBXZWkpIGF2YWlsYWJsZSBmb3IgdGhpcyBwcm9maXQgZGlzdHJpYnV0aW9uIHJvdW5kCiAgICBldmVudCBEaXN0cmlidXRpb25TdGFydGVkKHVpbnQgYW1vdW50KTsKICAgIC8vL0V2ZW50IG9jY3VycyB3aGVuIHByb2ZpdCBkaXN0cmlidXRpb24gcm91bmQgY29tcGxldGVzCiAgICAvLy9AcGFyYW0gcmVkZWVtZWRBbW91bnQgVG90YWwgYW1vdW50IChpbiB3ZWkpIHJlZGVlbWVkIGluIHRoaXMgZGlzdHJpYnV0aW9uIHJvdW5kCiAgICAvLy9AcGFyYW0gcmV3YXJkZWRBbW91bnQgVG90YWwgYW1vdW50IHJld2FyZGVkIGFzIGRpdmlkZW5kcyBpbiB0aGlzIGRpc3RyaWJ1dGlvbiByb3VuZAogICAgLy8vQHBhcmFtIHJlbWFpbmluZ0Ftb3VudCBBbnkgbWlub3IgcmVtYWluaW5nIGFtb3VudCAoZHVlIHRvIHJvdW5kaW5nIGVycm9ycykgdGhhdCBoYXMgYmVlbiBkaXN0cmlidXRlZCBiYWNrIHRvIGlBcXVhCiAgICBldmVudCBEaXN0cmlidXRpb25Db21wbGV0ZWQodWludCByZWRlZW1lZEFtb3VudCwgdWludCByZXdhcmRlZEFtb3VudCwgdWludCByZW1haW5pbmdBbW91bnQpOwogICAgLy8vRXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gdG9rZW4gaG9sZGVyIHdpdGhkcmF3cyB0aGVpciBiYWxhbmNlCiAgICAvLy9AcGFyYW0gaG9sZGVyQWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB0b2tlbiBob2xkZXIgYWNjb3VudAogICAgLy8vQHBhcmFtIGFtb3VudCBBbW91bnQgaW4gd2VpIHRoYXQgaGFzIGJlZW4gd2l0aGRyYXduCiAgICAvLy9AcGFyYW0gaGFzUmVtYWluaW5nQmFsYW5jZSBUcnVlIGlmIHRoZXJlIGlzIHN0aWxsIHJlbWFpbmluZyBiYWxhbmNlCiAgICBldmVudCBXaXRoZHJhd0JhbGFuY2UoYWRkcmVzcyBob2xkZXJBZGRyZXNzLCB1aW50IGFtb3VudCwgYm9vbCBoYXNSZW1haW5pbmdCYWxhbmNlKTsKICAgIAogICAgLy8vT2NjdXJzIHdoZW4gY29udHJhY3Qgb3duZXIgKGlBcXVhKSByZXBlYXRlZGx5IGNhbGxzIGNvbnRpbnVlRGlzdHJpYnV0aW9uIHRvIHByb2dyZXNzIHJlZGVtcHRpb24gYW5kIAogICAgLy8vZGl2aWRlbmQgcGF5bWVudHMgZHVyaW5nIHByb2ZpdCBkaXN0cmlidXRpb24gcm91bmQKICAgIC8vL0BwYXJhbSBfY29udGludWUgVHJ1ZSBpZiB0aGUgZGlzdHJpYnV0aW9uIGhhc27igJl0IGNvbXBsZXRlZCBhcyB5ZXQKICAgIGV2ZW50IENvbnRpbnVlRGlzdHJpYnV0aW9uKGJvb2wgX2NvbnRpbnVlKTsKCiAgICAvLy9UaGUgZXZlbnQgaXMgZmlyZWQgd2hlbiB3aW5kLXVwIHByb2NlZHVyZSBzdGFydHMKICAgIC8vL0BwYXJhbSBhbW91bnQgVG90YWwgYW1vdW50IGluIFdlaSBhdmFpbGFibGUgZm9yIGZpbmFsIGRpc3RyaWJ1dGlvbiBhbW9uZyB0b2tlbiBob2xkZXJzCiAgICBldmVudCBXaW5kaW5nVXBTdGFydGVkKHVpbnQgYW1vdW50KTsKICAgIAogICAgLy8vRXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gc21hcnQgY29udHJhY3QgdHJhbnNpdGlvbnMgaW50byBUcmFkaW5nIHN0YXRlIHdoZW4gdHJhZGluZyBhbmQgdG9rZW4gdHJhbnNmZXJzIGlzIGFsbG93ZWQKICAgIGV2ZW50IFN0YXJ0VHJhZGluZygpOwogICAgCiAgICAvLy9FdmVudCBpcyB0cmlnZ2VyZWQgd2hlbiBhIHRva2VuIGhvbGRlcnMgZGVzdHJveXMgdGhlaXIgdG9rZW5zCiAgICAvLy9AcGFyYW0gZnJvbSBBY2NvdW50IGFkZHJlc3Mgb2YgdGhlIHRva2VuIGhvbGRlcgogICAgLy8vQHBhcmFtIG51bWJlck9mVG9rZW5zIE51bWJlciBvZiB0b2tlbnMgYnVybmVkIChwZXJtYW5lbnRseSBkZXN0cm95ZWQpCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IG51bWJlck9mVG9rZW5zKTsKCiAgICAvLy8gQ29uc3RydWN0b3IgaW5pdGlhbGl6ZXMgdGhlIGNvbnRyYWN0CiAgICAvLy9AcGFyYW0gaW5pdGlhbFN1cHBseSBJbml0aWFsIHN1cHBseSBvZiB0b2tlbnMKICAgIC8vL0BwYXJhbSB0b2tlbk5hbWUgRGlzcGxheSBuYW1lIGlmIHRoZSB0b2tlbgogICAgLy8vQHBhcmFtIHRva2VuU3ltYm9sIFRva2VuIHN5bWJvbAogICAgLy8vQHBhcmFtIGRlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbCBwb2ludHMgZm9yIHRva2VuIGhvbGRpbmcgZGlzcGxheQogICAgLy8vQHBhcmFtIF9yZWRlbXB0aW9uUGVyY2VudGFnZU9mRGlzdHJpYnV0aW9uIFRoZSB3aG9sZSBwZXJjZW50YWdlIG51bWJlciAoMC0xMDApIG9mIHRoZSB0b3RhbCBkaXN0cmlidXRhYmxlIHByb2ZpdCBhbW91bnQgYXZhaWxhYmxlIGZvciB0b2tlbiByZWRlbXB0aW9uIGluIGVhY2ggcHJvZml0IGRpc3RyaWJ1dGlvbiByb3VuZCAKICAgIGZ1bmN0aW9uIEFxdWFUb2tlbih1aW50MjU2IGluaXRpYWxTdXBwbHksIAogICAgICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLCAKICAgICAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sLCAKICAgICAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgICAgICB1aW50OCBfcmVkZW1wdGlvblBlcmNlbnRhZ2VPZkRpc3RyaWJ1dGlvbiwKICAgICAgICAgICAgYWRkcmVzcyBfcHJpY2VPcmFjbGUKICAgICkgcHVibGljCiAgICB7CiAgICAgICAgdG90YWxTdXBwbHlPZlRva2VucyA9IGluaXRpYWxTdXBwbHk7CiAgICAgICAgaG9sZGluZ3MuYWRkKG1zZy5zZW5kZXIsIExpYkhvbGRpbmdzLkhvbGRpbmcoewogICAgICAgICAgICB0b3RhbFRva2VucyA6IGluaXRpYWxTdXBwbHksIAogICAgICAgICAgICBsb2NrZWRUb2tlbnMgOiAwLAogICAgICAgICAgICBsYXN0UmV3YXJkTnVtYmVyIDogMCwKICAgICAgICAgICAgd2VpQmFsYW5jZSA6IDAgCiAgICAgICAgfSkpOwoKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgCiAgICAgICAgcmVkZW1wdGlvblBlcmNlbnRhZ2VPZkRpc3RyaWJ1dGlvbiA9IF9yZWRlbXB0aW9uUGVyY2VudGFnZU9mRGlzdHJpYnV0aW9uOwogICAgCiAgICAgICAgcHJpY2VPcmFjbGUgPSBBcXVhUHJpY2VPcmFjbGUoX3ByaWNlT3JhY2xlKTsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgCiAgICAgICAgdG9rZW5TdGF0dXMgPSBUb2tlblN0YXR1cy5PblNhbGU7CiAgICAgICAgcmV3YXJkcy5wdXNoKDApOwogICAgfQogICAgCiAgICAvLy9DYWxsZWQgYnkgdG9rZW4gb3duZXIgZW5hYmxlIHRyYWRpbmcgd2l0aCB0b2tlbnMKICAgIGZ1bmN0aW9uIHN0YXJ0VHJhZGluZygpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXR1cyA9PSBUb2tlblN0YXR1cy5PblNhbGUpOwogICAgICAgIHRva2VuU3RhdHVzID0gVG9rZW5TdGF0dXMuVHJhZGluZzsKICAgICAgICBTdGFydFRyYWRpbmcoKTsKICAgIH0KICAgIAogICAgLy8vVG9rZW4gaG9sZGVycyBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIHRvIHJlcXVlc3QgdG8gcmVkZWVtIChzZWxsIGJhY2sgdG8gCiAgICAvLy90aGUgY29tcGFueSkgcGFydCBvciBhbGwgb2YgdGhlaXIgdG9rZW5zCiAgICAvLy9AcGFyYW0gX251bWJlck9mVG9rZW5zIE51bWJlciBvZiB0b2tlbnMgdG8gcmVkZWVtCiAgICAvLy9AcmV0dXJuIFJlZGVtcHRpb24gcmVxdWVzdCBJRCAocmVxdWlyZWQgaW4gb3JkZXIgdG8gY2FuY2VsIHRoaXMgcmVkZW1wdGlvbiByZXF1ZXN0KQogICAgZnVuY3Rpb24gcmVxdWVzdFJlZGVtcHRpb24odWludDI1NiBfbnVtYmVyT2ZUb2tlbnMpIHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXR1cyA9PSBUb2tlblN0YXR1cy5UcmFkaW5nICYmIF9udW1iZXJPZlRva2VucyA+IDApOwogICAgICAgIExpYkhvbGRpbmdzLkhvbGRpbmcgc3RvcmFnZSBoID0gaG9sZGluZ3MuZ2V0KG1zZy5zZW5kZXIpOwogICAgICAgIHJlcXVpcmUoaC50b3RhbFRva2Vucy5zdWIoIGgubG9ja2VkVG9rZW5zKSA+PSBfbnVtYmVyT2ZUb2tlbnMpOyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCgogICAgICAgIHVpbnQgcmVkZW1wdGlvbklkID0gcmVkZW1wdGlvbnNRdWV1ZS5hZGQobXNnLnNlbmRlciwgX251bWJlck9mVG9rZW5zKTsKCiAgICAgICAgaC5sb2NrZWRUb2tlbnMgPSBoLmxvY2tlZFRva2Vucy5hZGQoX251bWJlck9mVG9rZW5zKTsKICAgICAgICBSZXF1ZXN0UmVkZW1wdGlvbihtc2cuc2VuZGVyLCBfbnVtYmVyT2ZUb2tlbnMsIHJlZGVtcHRpb25JZCk7CiAgICAgICAgcmV0dXJuIHJlZGVtcHRpb25JZDsKICAgIH0KICAgIAogICAgLy8vVG9rZW4gaG9sZGVycyBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIHRvIGNhbmNlbCBhIHJlZGVtcHRpb24gcmVxdWVzdCB0aGV5IAogICAgLy8vcHJldmlvdXNseSBzdWJtaXR0ZWQgdXNpbmcgcmVxdWVzdFJlZGVtcHRpb24gZnVuY3Rpb24KICAgIC8vL0BwYXJhbSBfcmVxdWVzdElkIFJlZGVtcHRpb24gcmVxdWVzdCBJRAogICAgZnVuY3Rpb24gY2FuY2VsUmVkZW1wdGlvblJlcXVlc3QodWludDI1NiBfcmVxdWVzdElkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUodG9rZW5TdGF0dXMgPT0gVG9rZW5TdGF0dXMuVHJhZGluZyAmJiByZWRlbXB0aW9uc1F1ZXVlLmV4aXN0cyhfcmVxdWVzdElkKSk7CiAgICAgICAgTGliUmVkZW1wdGlvbnMuUmVkZW1wdGlvbiBzdG9yYWdlIHIgPSByZWRlbXB0aW9uc1F1ZXVlLmdldChfcmVxdWVzdElkKTsgCiAgICAgICAgcmVxdWlyZShyLmhvbGRlckFkZHJlc3MgPT0gbXNnLnNlbmRlcik7CgogICAgICAgIExpYkhvbGRpbmdzLkhvbGRpbmcgc3RvcmFnZSBoID0gaG9sZGluZ3MuZ2V0KG1zZy5zZW5kZXIpOyAKICAgICAgICBoLmxvY2tlZFRva2VucyA9IGgubG9ja2VkVG9rZW5zLnN1YihyLm51bWJlck9mVG9rZW5zKTsKICAgICAgICB1aW50IG51bWJlck9mVG9rZW5zID0gci5udW1iZXJPZlRva2VuczsKICAgICAgICByZWRlbXB0aW9uc1F1ZXVlLnJlbW92ZShfcmVxdWVzdElkKTsKCiAgICAgICAgQ2FuY2VsUmVkZW1wdGlvblJlcXVlc3QobXNnLnNlbmRlciwgbnVtYmVyT2ZUb2tlbnMsICBfcmVxdWVzdElkKTsKICAgIH0KICAgIAogICAgLy8vVGhlIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZW51bWVyYXRlIHJlZGVtcHRpb24gcmVxdWVzdHMuIEl0IHJldHVybnMgdGhlIGZpcnN0IHJlZGVtcHRpb24gcmVxdWVzdCBJRC4KICAgIC8vL0ByZXR1cm4gRmlyc3QgcmVkZW1wdGlvbiByZXF1ZXN0IElECiAgICBmdW5jdGlvbiBmaXJzdFJlZGVtcHRpb25SZXF1ZXN0KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gcmVkZW1wdGlvbnNRdWV1ZS5maXJzdFJlZGVtcHRpb24oKTsKICAgIH0KICAgIAogICAgLy8vVGhlIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZW51bWVyYXRlIHJlZGVtcHRpb24gcmVxdWVzdHMuIEl0IHJldHVybnMgdGhlIAogICAgLy8vbmV4dCByZWRlbXB0aW9uIHJlcXVlc3QgSUQgZm9sbG93aW5nIHRoZSBzdXBwbGllZCBvbmUuCiAgICAvLy9AcGFyYW0gX2N1cnJlbnRSZWRlbXB0aW9uSWQgQ3VycmVudCByZWRlbXB0aW9uIHJlcXVlc3QgSUQKICAgIC8vL0ByZXR1cm4gTmV4dCByZWRlbXB0aW9uIHJlcXVlc3QgSUQKICAgIGZ1bmN0aW9uIG5leHRSZWRlbXB0aW9uUmVxdWVzdCh1aW50IF9jdXJyZW50UmVkZW1wdGlvbklkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiByZWRlbXB0aW9uc1F1ZXVlLm5leHRSZWRlbXB0aW9uKF9jdXJyZW50UmVkZW1wdGlvbklkKTsKICAgIH0KICAgIAogICAgLy8vVGhlIGZ1bmN0aW9uIHJldHVybnMgcmVkZW1wdGlvbiByZXF1ZXN0IGRldGFpbHMgZm9yIHRoZSBzdXBwbGllZCByZWRlbXB0aW9uIHJlcXVlc3QgSUQKICAgIC8vL0BwYXJhbSBfcmVxdWVzdElkIFJlZGVtcHRpb24gcmVxdWVzdCBJRAogICAgLy8vQHJldHVybiBfaG9sZGVyQWRkcmVzcyBUb2tlbiBob2xkZXIgYWNjb3VudCBhZGRyZXNzCiAgICAvLy9AcmV0dXJuIF9udW1iZXJPZlRva2VucyBOdW1iZXIgb2YgdG9rZW5zIHJlcXVlc3RlZCB0byByZWRlZW0KICAgIGZ1bmN0aW9uIGdldFJlZGVtcHRpb25SZXF1ZXN0KHVpbnQgX3JlcXVlc3RJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgCiAgICAgICAgICAgICAgICAoYWRkcmVzcyBfaG9sZGVyQWRkcmVzcywgdWludDI1NiBfbnVtYmVyT2ZUb2tlbnMpIHsKICAgICAgICBMaWJSZWRlbXB0aW9ucy5SZWRlbXB0aW9uIHN0b3JhZ2UgciA9IHJlZGVtcHRpb25zUXVldWUuZ2V0KF9yZXF1ZXN0SWQpOwogICAgICAgIF9ob2xkZXJBZGRyZXNzID0gci5ob2xkZXJBZGRyZXNzOwogICAgICAgIF9udW1iZXJPZlRva2VucyA9IHIubnVtYmVyT2ZUb2tlbnM7CiAgICB9CiAgICAKICAgIC8vL1RoZSBmdW5jdGlvbiBpcyB1c2VkIHRvIGVudW1lcmF0ZSB0b2tlbiBob2xkZXJzLiBJdCByZXR1cm5zIHRoZSBmaXJzdCAKICAgIC8vL3Rva2VuIGhvbGRlciAodGhhdCB0aGUgZW51bWVyYXRpb24gc3RhcnRzIGZyb20pCiAgICAvLy9AcmV0dXJuIEFjY291bnQgYWRkcmVzcyBvZiB0aGUgZmlyc3QgdG9rZW4gaG9sZGVyCiAgICBmdW5jdGlvbiBmaXJzdEhvbGRlcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGhvbGRpbmdzLmZpcnN0SG9sZGVyKCk7CiAgICB9ICAgIAogICAgCiAgICAvLy9UaGUgZnVuY3Rpb24gaXMgdXNlZCB0byBlbnVtZXJhdGUgdG9rZW4gaG9sZGVycy4gSXQgcmV0dXJucyB0aGUgYWRkcmVzcyAKICAgIC8vL29mIHRoZSBuZXh0IHRva2VuIGhvbGRlciBnaXZlbiB0aGUgdG9rZW4gaG9sZGVyIGFkZHJlc3MuCiAgICAvLy9AcGFyYW0gX2N1cnJlbnRIb2xkZXIgQWNjb3VudCBhZGRyZXNzIG9mIHRoZSB0b2tlbiBob2xkZXIKICAgIC8vL0ByZXR1cm4gQWNjb3VudCBhZGRyZXNzIG9mIHRoZSBuZXh0IHRva2VuIGhvbGRlcgogICAgZnVuY3Rpb24gbmV4dEhvbGRlcihhZGRyZXNzIF9jdXJyZW50SG9sZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBob2xkaW5ncy5uZXh0SG9sZGVyKF9jdXJyZW50SG9sZGVyKTsKICAgIH0KICAgIAogICAgLy8vVGhlIGZ1bmN0aW9uIHJldHVybnMgdG9rZW4gaG9sZGVyIGRldGFpbHMgZ2l2ZW4gdG9rZW4gaG9sZGVyIGFjY291bnQgYWRkcmVzcwogICAgLy8vQHBhcmFtIF9ob2xkZXIgQWNjb3VudCBhZGRyZXNzIG9mIGEgdG9rZW4gaG9sZGVyCiAgICAvLy9AcmV0dXJuIHRvdGFsVG9rZW5zIFRvdGFsIHRva2VucyBoZWxkIGJ5IHRoaXMgdG9rZW4gaG9sZGVyCiAgICAvLy9AcmV0dXJuIGxvY2tlZFRva2VucyBUaGUgbnVtYmVyIG9mIHRva2VucyAob3V0IG9mIHRoZSB0b3RhbCBoZWxkIGJ1dCB0aGlzIHRva2VuIGhvbGRlcikgdGhhdCBhcmUgbG9ja2VkIGFuZCBhd2FpdCByZWRlbXB0aW9uIHRvIGJlIHByb2Nlc3NlZAogICAgLy8vQHJldHVybiB3ZWlCYWxhbmNlIFdlaSBiYWxhbmNlIG9mIHRoZSB0b2tlbiBob2xkZXIgYXZhaWxhYmxlIGZvciB3aXRoZHJhd2FsLgogICAgZnVuY3Rpb24gZ2V0SG9sZGluZyhhZGRyZXNzIF9ob2xkZXIpIHB1YmxpYyBjb25zdGFudCAKICAgICAgICAgICAgcmV0dXJucyAodWludCB0b3RhbFRva2VucywgdWludCBsb2NrZWRUb2tlbnMsIHVpbnQgd2VpQmFsYW5jZSkgewogICAgICAgIGlmICghaG9sZGluZ3MuZXhpc3RzKF9ob2xkZXIpKSB7CiAgICAgICAgICAgIHRvdGFsVG9rZW5zID0gMDsKICAgICAgICAgICAgbG9ja2VkVG9rZW5zID0gMDsKICAgICAgICAgICAgd2VpQmFsYW5jZSA9IDA7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIGggPSBob2xkaW5ncy5nZXQoX2hvbGRlcik7CiAgICAgICAgdG90YWxUb2tlbnMgPSBoLnRvdGFsVG9rZW5zOwogICAgICAgIGxvY2tlZFRva2VucyA9IGgubG9ja2VkVG9rZW5zOwogICAgICAgIHVpbnQgc3RlcHNNYWRlOwogICAgICAgICh3ZWlCYWxhbmNlLCBzdGVwc01hZGUpID0gY2FsY0Z1bGxXZWlCYWxhbmNlKGgsIDApOwogICAgICAgIHJldHVybjsKICAgIH0KICAgIAogICAgLy8vVG9rZW4gb3duZXIgY2FsbHMgdGhpcyBmdW5jdGlvbiB0byBzdGFydCBwcm9maXQgZGlzdHJpYnV0aW9uIHJvdW5kCiAgICBmdW5jdGlvbiBzdGFydERpc3RyaWJ1aW9uKCkgb25seU93bmVyIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHRva2VuU3RhdHVzID09IFRva2VuU3RhdHVzLlRyYWRpbmcpOwogICAgICAgIHRva2VuU3RhdHVzID0gVG9rZW5TdGF0dXMuRGlzdHJpYnV0aW5nOwogICAgICAgIHN0YXJ0UmVkZW1wdGlvbihtc2cudmFsdWUpOwogICAgICAgIERpc3RyaWJ1dGlvblN0YXJ0ZWQobXNnLnZhbHVlKTsKICAgIH0gCiAgICAKICAgIC8vL1Rva2VuIG93bmVyIGNhbGxzIHRoaXMgZnVuY3Rpb24gdG8gcHJvZ3Jlc3MgcHJvZml0IGRpc3RyaWJ1dGlvbiByb3VuZAogICAgLy8vQHBhcmFtIG1heE51bWJlT2ZTdGVwcyBNYXhpbXVtIG51bWJlciBvZiBzdGVwcyBpbiB0aGlzIHByb2dyZXNzaW9uCiAgICAvLy9AcmV0dXJuIEZhbHNlIGluIGNhc2UgcHJvZml0IGRpc3RyaWJ1dGlvbiByb3VuZCBoYXMgY29tcGxldGVkCiAgICBmdW5jdGlvbiBjb250aW51ZURpc3RyaWJ1dGlvbih1aW50IG1heE51bWJlT2ZTdGVwcykgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKHRva2VuU3RhdHVzID09IFRva2VuU3RhdHVzLkRpc3RyaWJ1dGluZyk7CiAgICAgICAgaWYgKGNvbnRpbnVlUmVkZWVtaW5nKG1heE51bWJlT2ZTdGVwcykpIHsKICAgICAgICAgICAgQ29udGludWVEaXN0cmlidXRpb24odHJ1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICB1aW50IHRva2VuUmV3YXJkID0gZGlzdEN0eC50b3RhbFJld2FyZEFtb3VudC5kaXYoIHRvdGFsU3VwcGx5T2ZUb2tlbnMgKTsKICAgICAgICByZXdhcmRzLnB1c2godG9rZW5SZXdhcmQpOwogICAgICAgIHVpbnQgcGFpZFJld2FyZCA9IHRva2VuUmV3YXJkLm11bCh0b3RhbFN1cHBseU9mVG9rZW5zKTsKCgogICAgICAgIHVpbnQgdW51c2VkRGlzdHJpYnV0aW9uQW1vdW50ID0gZGlzdEN0eC50b3RhbFJld2FyZEFtb3VudC5zdWIocGFpZFJld2FyZCk7CiAgICAgICAgaWYgKHVudXNlZERpc3RyaWJ1dGlvbkFtb3VudCA+IDApIHsKICAgICAgICAgICAgaWYgKCFob2xkaW5ncy5leGlzdHMob3duZXIpKSB7IAogICAgICAgICAgICAgICAgaG9sZGluZ3MuYWRkKG93bmVyLCBMaWJIb2xkaW5ncy5Ib2xkaW5nKHsKICAgICAgICAgICAgICAgICAgICB0b3RhbFRva2VucyA6IDAsIAogICAgICAgICAgICAgICAgICAgIGxvY2tlZFRva2VucyA6IDAsCiAgICAgICAgICAgICAgICAgICAgbGFzdFJld2FyZE51bWJlciA6IHJld2FyZHMubGVuZ3RoLnN1YigxKSwKICAgICAgICAgICAgICAgICAgICB3ZWlCYWxhbmNlIDogdW51c2VkRGlzdHJpYnV0aW9uQW1vdW50IAogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIG93bmVySG9sZGluZyA9IGhvbGRpbmdzLmdldChvd25lcik7CiAgICAgICAgICAgICAgICBvd25lckhvbGRpbmcud2VpQmFsYW5jZSA9IG93bmVySG9sZGluZy53ZWlCYWxhbmNlLmFkZCh1bnVzZWREaXN0cmlidXRpb25BbW91bnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRva2VuU3RhdHVzID0gVG9rZW5TdGF0dXMuVHJhZGluZzsKICAgICAgICBEaXN0cmlidXRpb25Db21wbGV0ZWQoZGlzdEN0eC5yZWNlaXZlZFJlZGVtcHRpb25BbW91bnQuc3ViKGRpc3RDdHgucmVkZW1wdGlvbkFtb3VudCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFpZFJld2FyZCwgdW51c2VkRGlzdHJpYnV0aW9uQW1vdW50KTsKICAgICAgICBDb250aW51ZURpc3RyaWJ1dGlvbihmYWxzZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vL1Rva2VuIGhvbGRlciBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIHRvIHdpdGhkcmF3IHRoZWlyIGJhbGFuY2UgKGRpdmlkZW5kIAogICAgLy8vYW5kIHJlZGVtcHRpb24gcGF5bWVudHMpIHdoaWxlIGxpbWl0aW5nIHRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyAoaW4gdGhlCiAgICAvLy9leHRyZW1lbHkgdW5saWtlbHkgY2FzZSAgd2hlbiB3aXRoZHJhd0JhbGFuY2UgZnVuY3Rpb24gZXhjZWVkcyBnYXMgbGltaXQpCiAgICAvLy9AcGFyYW0gbWF4U3RlcHMgTWF4aW11bSBudW1iZXIgb2Ygc3RlcHMgdG8gdGFrZSB3aGlsZSB3aXRoZHJhd2luZyBob2xkZXIgYmFsYW5jZQogICAgZnVuY3Rpb24gd2l0aGRyYXdCYWxhbmNlTWF4U3RlcHModWludCBtYXhTdGVwcykgcHVibGljIHsKICAgICAgICByZXF1aXJlKGhvbGRpbmdzLmV4aXN0cyhtc2cuc2VuZGVyKSk7CiAgICAgICAgTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIGggPSBob2xkaW5ncy5nZXQobXNnLnNlbmRlcik7IAogICAgICAgIHVpbnQgdXBkYXRlZEJhbGFuY2U7CiAgICAgICAgdWludCBzdGVwc01hZGU7CiAgICAgICAgKHVwZGF0ZWRCYWxhbmNlLCBzdGVwc01hZGUpID0gY2FsY0Z1bGxXZWlCYWxhbmNlKGgsIG1heFN0ZXBzKTsKICAgICAgICBoLndlaUJhbGFuY2UgPSAwOwogICAgICAgIGgubGFzdFJld2FyZE51bWJlciA9IGgubGFzdFJld2FyZE51bWJlci5hZGQoc3RlcHNNYWRlKTsKICAgICAgICAKICAgICAgICBib29sIGJhbGFuY2VSZW1haW5pZyA9IGgubGFzdFJld2FyZE51bWJlciA8IHJld2FyZHMubGVuZ3RoLnN1YigxKTsKICAgICAgICBpZiAoaC50b3RhbFRva2VucyA9PSAwICYmIGgud2VpQmFsYW5jZSA9PSAwKSAKICAgICAgICAgICAgaG9sZGluZ3MucmVtb3ZlKG1zZy5zZW5kZXIpOwoKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHVwZGF0ZWRCYWxhbmNlKTsKICAgICAgICAKICAgICAgICBXaXRoZHJhd0JhbGFuY2UobXNnLnNlbmRlciwgdXBkYXRlZEJhbGFuY2UsIGJhbGFuY2VSZW1haW5pZyk7CiAgICB9CgogICAgLy8vVG9rZW4gaG9sZGVyIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24gdG8gd2l0aGRyYXcgdGhlaXIgYmFsYW5jZSAoZGl2aWRlbmQgCiAgICAvLy9hbmQgcmVkZW1wdGlvbiBwYXltZW50cykgCiAgICBmdW5jdGlvbiB3aXRoZHJhd0JhbGFuY2UoKSBwdWJsaWMgewogICAgICAgIHdpdGhkcmF3QmFsYW5jZU1heFN0ZXBzKDApOwogICAgfQoKICAgIC8vL1NldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MgYW5kIG5vdGlmeQogICAgLy8vQWxsb3dzIF9zcGVuZGVyIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBfdmFsdWUgdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBhbmQgdGhlbiBwaW5nIHRoZSBjb250cmFjdCBhYm91dCBpdAogICAgLy8vQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgIC8vL0BwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgIC8vL0BwYXJhbSBfZXh0cmFEYXRhIHNvbWUgZXh0cmEgaW5mb3JtYXRpb24gdG8gc2VuZCB0byB0aGUgYXBwcm92ZWQgY29udHJhY3QKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgVG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IFRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vVG9rZW4gaG9sZGVycyBjYW4gY2FsbCB0aGlzIG1ldGhvZCB0byBwZXJtYW5lbnRseSBkZXN0cm95IHRoZWlyIHRva2Vucy4KICAgIC8vL1dBUk5JTkc6IEJ1cm5lZCB0b2tlbnMgY2Fubm90IGJlIHJlY292ZXJlZCEKICAgIC8vL0BwYXJhbSBudW1iZXJPZlRva2VucyBOdW1iZXIgb2YgdG9rZW5zIHRvIGJ1cm4gKHBlcm1hbmVudGx5IGRlc3Ryb3kpCiAgICAvLy9AcmV0dXJuIFRydWUgaWYgb3BlcmF0aW9uIHN1Y2NlZWRzIAogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IG51bWJlck9mVG9rZW5zKSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGhvbGRpbmdzLmV4aXN0cyhtc2cuc2VuZGVyKSk7CiAgICAgICAgaWYgKG51bWJlck9mVG9rZW5zID09IDApIHsKICAgICAgICAgICAgQnVybihtc2cuc2VuZGVyLCBudW1iZXJPZlRva2Vucyk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBMaWJIb2xkaW5ncy5Ib2xkaW5nIHN0b3JhZ2UgZnJvbUhvbGRpbmcgPSBob2xkaW5ncy5nZXQobXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShmcm9tSG9sZGluZy50b3RhbFRva2Vucy5zdWIoZnJvbUhvbGRpbmcubG9ja2VkVG9rZW5zKSA+PSBudW1iZXJPZlRva2Vucyk7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKCiAgICAgICAgdXBkYXRlV2VpQmFsYW5jZShmcm9tSG9sZGluZywgMCk7ICAgIAogICAgICAgIGZyb21Ib2xkaW5nLnRvdGFsVG9rZW5zID0gZnJvbUhvbGRpbmcudG90YWxUb2tlbnMuc3ViKG51bWJlck9mVG9rZW5zKTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgaWYgKGZyb21Ib2xkaW5nLnRvdGFsVG9rZW5zID09IDAgJiYgZnJvbUhvbGRpbmcud2VpQmFsYW5jZSA9PSAwKSAKICAgICAgICAgICAgaG9sZGluZ3MucmVtb3ZlKG1zZy5zZW5kZXIpOwogICAgICAgIHRvdGFsU3VwcGx5T2ZUb2tlbnMgPSB0b3RhbFN1cHBseU9mVG9rZW5zLnN1YihudW1iZXJPZlRva2Vucyk7CgogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgbnVtYmVyT2ZUb2tlbnMpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vL1Rva2VuIG93bmVyIHRvIGNhbGwgdGhpcyB0byBpbml0aWF0ZSBmaW5hbCBkaXN0cmlidXRpb24gaW4gY2FzZSBvZiBwcm9qZWN0IHdpbmQtdXAKICAgIGZ1bmN0aW9uIHdpbmRVcCgpIG9ubHlPd25lciBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblN0YXR1cyA9PSBUb2tlblN0YXR1cy5UcmFkaW5nKTsKICAgICAgICB0b2tlblN0YXR1cyA9IFRva2VuU3RhdHVzLldpbmRpbmdVcDsKICAgICAgICB1aW50IHRvdGFsV2luZFVwQW1vdW50ID0gbXNnLnZhbHVlOwogICAgCiAgICAgICAgdWludCB0b2tlblJld2FyZCA9IG1zZy52YWx1ZS5kaXYodG90YWxTdXBwbHlPZlRva2Vucyk7CiAgICAgICAgcmV3YXJkcy5wdXNoKHRva2VuUmV3YXJkKTsKICAgICAgICB1aW50IHBhaWRSZXdhcmQgPSB0b2tlblJld2FyZC5tdWwodG90YWxTdXBwbHlPZlRva2Vucyk7CgogICAgICAgIHVpbnQgdW51c2VkV2luZFVwQW1vdW50ID0gdG90YWxXaW5kVXBBbW91bnQuc3ViKHBhaWRSZXdhcmQpOwogICAgICAgIGlmICh1bnVzZWRXaW5kVXBBbW91bnQgPiAwKSB7CiAgICAgICAgICAgIGlmICghaG9sZGluZ3MuZXhpc3RzKG93bmVyKSkgeyAKICAgICAgICAgICAgICAgIGhvbGRpbmdzLmFkZChvd25lciwgTGliSG9sZGluZ3MuSG9sZGluZyh7CiAgICAgICAgICAgICAgICAgICAgdG90YWxUb2tlbnMgOiAwLCAKICAgICAgICAgICAgICAgICAgICBsb2NrZWRUb2tlbnMgOiAwLAogICAgICAgICAgICAgICAgICAgIGxhc3RSZXdhcmROdW1iZXIgOiByZXdhcmRzLmxlbmd0aC5zdWIoMSksCiAgICAgICAgICAgICAgICAgICAgd2VpQmFsYW5jZSA6IHVudXNlZFdpbmRVcEFtb3VudCAKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIExpYkhvbGRpbmdzLkhvbGRpbmcgc3RvcmFnZSBvd25lckhvbGRpbmcgPSBob2xkaW5ncy5nZXQob3duZXIpOwogICAgICAgICAgICAgICAgb3duZXJIb2xkaW5nLndlaUJhbGFuY2UgPSBvd25lckhvbGRpbmcud2VpQmFsYW5jZS5hZGQodW51c2VkV2luZFVwQW1vdW50KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBXaW5kaW5nVXBTdGFydGVkKG1zZy52YWx1ZSk7CiAgICB9CiAgICAvL2ludGVybmFsIGZ1bmN0aW9ucwogICAgZnVuY3Rpb24gY2FsY0Z1bGxXZWlCYWxhbmNlKExpYkhvbGRpbmdzLkhvbGRpbmcgc3RvcmFnZSBob2xkaW5nLCB1aW50IG1heFN0ZXBzKSBpbnRlcm5hbCBjb25zdGFudCAKICAgICAgICAgICAgICAgICAgICByZXR1cm5zKHVpbnQgdXBkYXRlZEJhbGFuY2UsIHVpbnQgc3RlcHNNYWRlKSB7CiAgICAgICAgdWludCBmcm9tUmV3YXJkSWR4ID0gaG9sZGluZy5sYXN0UmV3YXJkTnVtYmVyLmFkZCgxKTsKICAgICAgICB1cGRhdGVkQmFsYW5jZSA9IGhvbGRpbmcud2VpQmFsYW5jZTsKICAgICAgICBpZiAoZnJvbVJld2FyZElkeCA9PSByZXdhcmRzLmxlbmd0aCkgewogICAgICAgICAgICBzdGVwc01hZGUgPSAwOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB1aW50IHRvUmV3YXJkSWR4OwogICAgICAgIGlmIChtYXhTdGVwcyA9PSAwKSB7CiAgICAgICAgICAgIHRvUmV3YXJkSWR4ID0gcmV3YXJkcy5sZW5ndGguc3ViKCAxKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRvUmV3YXJkSWR4ID0gZnJvbVJld2FyZElkeC5hZGQoIG1heFN0ZXBzICkuc3ViKDEpOwogICAgICAgICAgICBpZiAodG9SZXdhcmRJZHggPiByZXdhcmRzLmxlbmd0aC5zdWIoMSkpIHsKICAgICAgICAgICAgICAgIHRvUmV3YXJkSWR4ID0gcmV3YXJkcy5sZW5ndGguc3ViKDEpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvcih1aW50IGlkeCA9IGZyb21SZXdhcmRJZHg7IAogICAgICAgICAgICAgICAgICAgIGlkeCA8PSB0b1Jld2FyZElkeDsgCiAgICAgICAgICAgICAgICAgICAgaWR4ID0gaWR4LmFkZCgxKSkgewogICAgICAgICAgICB1cGRhdGVkQmFsYW5jZSA9IHVwZGF0ZWRCYWxhbmNlLmFkZCggCiAgICAgICAgICAgICAgICByZXdhcmRzW2lkeF0ubXVsKCBob2xkaW5nLnRvdGFsVG9rZW5zICkgCiAgICAgICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBzdGVwc01hZGUgPSB0b1Jld2FyZElkeC5zdWIoIGZyb21SZXdhcmRJZHggKS5hZGQoIDEgKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZVdlaUJhbGFuY2UoTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIGhvbGRpbmcsIHVpbnQgbWF4U3RlcHMpIGludGVybmFsIAogICAgICAgICAgICAgICAgcmV0dXJucyh1aW50IHVwZGF0ZWRCYWxhbmNlLCB1aW50IHN0ZXBzTWFkZSkgewogICAgICAgICh1cGRhdGVkQmFsYW5jZSwgc3RlcHNNYWRlKSA9IGNhbGNGdWxsV2VpQmFsYW5jZShob2xkaW5nLCBtYXhTdGVwcyk7CiAgICAgICAgaWYgKHN0ZXBzTWFkZSA9PSAwKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgaG9sZGluZy53ZWlCYWxhbmNlID0gdXBkYXRlZEJhbGFuY2U7CiAgICAgICAgaG9sZGluZy5sYXN0UmV3YXJkTnVtYmVyID0gaG9sZGluZy5sYXN0UmV3YXJkTnVtYmVyLmFkZChzdGVwc01hZGUpOwogICAgfQogICAgCgogICAgZnVuY3Rpb24gc3RhcnRSZWRlbXB0aW9uKHVpbnQgZGlzdHJpYnV0aW9uQW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgZGlzdEN0eC5kaXN0cmlidXRpb25BbW91bnQgPSBkaXN0cmlidXRpb25BbW91bnQ7CiAgICAgICAgZGlzdEN0eC5yZWNlaXZlZFJlZGVtcHRpb25BbW91bnQgPSAKICAgICAgICAgICAgKGRpc3RDdHguZGlzdHJpYnV0aW9uQW1vdW50Lm11bChyZWRlbXB0aW9uUGVyY2VudGFnZU9mRGlzdHJpYnV0aW9uKSkuZGl2KDEwMCk7CiAgICAgICAgZGlzdEN0eC5yZWRlbXB0aW9uQW1vdW50ID0gZGlzdEN0eC5yZWNlaXZlZFJlZGVtcHRpb25BbW91bnQ7CiAgICAgICAgZGlzdEN0eC50b2tlblByaWNlV2VpID0gcHJpY2VPcmFjbGUuZ2V0QXF1YVRva2VuQXVkQ2VudHNQcmljZSgpLm11bChwcmljZU9yYWNsZS5nZXRBdWRDZW50V2VpUHJpY2UoKSk7CgogICAgICAgIGRpc3RDdHguY3VycmVudFJlZGVtcHRpb25JZCA9IHJlZGVtcHRpb25zUXVldWUuZmlyc3RSZWRlbXB0aW9uKCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNvbnRpbnVlUmVkZWVtaW5nKHVpbnQgbWF4TnVtYmVPZlN0ZXBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCByZW1haW5pbmdOb1N0ZXBzID0gbWF4TnVtYmVPZlN0ZXBzOwogICAgICAgIHVpbnQgY3VycmVudElkID0gZGlzdEN0eC5jdXJyZW50UmVkZW1wdGlvbklkOwogICAgICAgIHVpbnQgcmVkZW1wdGlvbkFtb3VudCA9IGRpc3RDdHgucmVkZW1wdGlvbkFtb3VudDsKICAgICAgICB1aW50IHRvdGFsUmVkZWVtZWRUb2tlbnMgPSAwOwogICAgICAgIHdoaWxlKGN1cnJlbnRJZCAhPSAwICYmIHJlZGVtcHRpb25BbW91bnQgPiAwKSB7CiAgICAgICAgICAgIGlmIChyZW1haW5pbmdOb1N0ZXBzID09IDApIHsgCiAgICAgICAgICAgICAgICBkaXN0Q3R4LmN1cnJlbnRSZWRlbXB0aW9uSWQgPSBjdXJyZW50SWQ7CiAgICAgICAgICAgICAgICBkaXN0Q3R4LnJlZGVtcHRpb25BbW91bnQgPSByZWRlbXB0aW9uQW1vdW50OwogICAgICAgICAgICAgICAgaWYgKHRvdGFsUmVkZWVtZWRUb2tlbnMgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdG90YWxTdXBwbHlPZlRva2VucyA9IHRvdGFsU3VwcGx5T2ZUb2tlbnMuc3ViKCB0b3RhbFJlZGVlbWVkVG9rZW5zICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVkZW1wdGlvbkFtb3VudC5kaXYoZGlzdEN0eC50b2tlblByaWNlV2VpKSA8IDEpCiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIExpYlJlZGVtcHRpb25zLlJlZGVtcHRpb24gc3RvcmFnZSByID0gcmVkZW1wdGlvbnNRdWV1ZS5nZXQoY3VycmVudElkKTsKICAgICAgICAgICAgTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIGhvbGRpbmcgPSBob2xkaW5ncy5nZXQoci5ob2xkZXJBZGRyZXNzKTsKICAgICAgICAgICAgdWludCB1cGRhdGVkQmFsYW5jZTsKICAgICAgICAgICAgdWludCBzdGVwc01hZGU7CiAgICAgICAgICAgICh1cGRhdGVkQmFsYW5jZSwgc3RlcHNNYWRlKSA9IHVwZGF0ZVdlaUJhbGFuY2UoaG9sZGluZywgcmVtYWluaW5nTm9TdGVwcyk7CiAgICAgICAgICAgIHJlbWFpbmluZ05vU3RlcHMgPSByZW1haW5pbmdOb1N0ZXBzLnN1YihzdGVwc01hZGUpOyAgICAgICAgICAKICAgICAgICAgICAgaWYgKHJlbWFpbmluZ05vU3RlcHMgPT0gMCkgeyAKICAgICAgICAgICAgICAgIGRpc3RDdHguY3VycmVudFJlZGVtcHRpb25JZCA9IGN1cnJlbnRJZDsKICAgICAgICAgICAgICAgIGRpc3RDdHgucmVkZW1wdGlvbkFtb3VudCA9IHJlZGVtcHRpb25BbW91bnQ7CiAgICAgICAgICAgICAgICBpZiAodG90YWxSZWRlZW1lZFRva2VucyA+IDApIHsKICAgICAgICAgICAgICAgICAgICB0b3RhbFN1cHBseU9mVG9rZW5zID0gdG90YWxTdXBwbHlPZlRva2Vucy5zdWIodG90YWxSZWRlZW1lZFRva2Vucyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdWludCBob2xkZXJUb2tlbnNUb1JlZGVlbSA9IHJlZGVtcHRpb25BbW91bnQuZGl2KGRpc3RDdHgudG9rZW5QcmljZVdlaSk7CiAgICAgICAgICAgIGlmIChob2xkZXJUb2tlbnNUb1JlZGVlbSA+IHIubnVtYmVyT2ZUb2tlbnMpCiAgICAgICAgICAgICAgICBob2xkZXJUb2tlbnNUb1JlZGVlbSA9IHIubnVtYmVyT2ZUb2tlbnM7CgogICAgICAgICAgICB1aW50IGhvbGRlclJlZGVtcHRpb24gPSBob2xkZXJUb2tlbnNUb1JlZGVlbS5tdWwoZGlzdEN0eC50b2tlblByaWNlV2VpKTsKICAgICAgICAgICAgaG9sZGluZy53ZWlCYWxhbmNlID0gaG9sZGluZy53ZWlCYWxhbmNlLmFkZCggaG9sZGVyUmVkZW1wdGlvbiApOwoKICAgICAgICAgICAgcmVkZW1wdGlvbkFtb3VudCA9IHJlZGVtcHRpb25BbW91bnQuc3ViKCBob2xkZXJSZWRlbXB0aW9uICk7CiAgICAgICAgICAgIAogICAgICAgICAgICByLm51bWJlck9mVG9rZW5zID0gci5udW1iZXJPZlRva2Vucy5zdWIoIGhvbGRlclRva2Vuc1RvUmVkZWVtICk7CiAgICAgICAgICAgIGhvbGRpbmcudG90YWxUb2tlbnMgPSBob2xkaW5nLnRvdGFsVG9rZW5zLnN1Yihob2xkZXJUb2tlbnNUb1JlZGVlbSk7CiAgICAgICAgICAgIGhvbGRpbmcubG9ja2VkVG9rZW5zID0gaG9sZGluZy5sb2NrZWRUb2tlbnMuc3ViKGhvbGRlclRva2Vuc1RvUmVkZWVtKTsKICAgICAgICAgICAgdG90YWxSZWRlZW1lZFRva2VucyA9IHRvdGFsUmVkZWVtZWRUb2tlbnMuYWRkKCBob2xkZXJUb2tlbnNUb1JlZGVlbSApOwoKICAgICAgICAgICAgdWludCBuZXh0SWQgPSByZWRlbXB0aW9uc1F1ZXVlLm5leHRSZWRlbXB0aW9uKGN1cnJlbnRJZCk7CiAgICAgICAgICAgIEhvbGRlclJlZGVtcHRpb24oci5ob2xkZXJBZGRyZXNzLCBjdXJyZW50SWQsIGhvbGRlclRva2Vuc1RvUmVkZWVtLCBob2xkZXJSZWRlbXB0aW9uKTsKICAgICAgICAgICAgaWYgKHIubnVtYmVyT2ZUb2tlbnMgPT0gMCkgCiAgICAgICAgICAgICAgICByZWRlbXB0aW9uc1F1ZXVlLnJlbW92ZShjdXJyZW50SWQpOwogICAgICAgICAgICBjdXJyZW50SWQgPSBuZXh0SWQ7CiAgICAgICAgICAgIHJlbWFpbmluZ05vU3RlcHMgPSByZW1haW5pbmdOb1N0ZXBzLnN1YigxKTsKICAgICAgICB9CiAgICAgICAgZGlzdEN0eC5jdXJyZW50UmVkZW1wdGlvbklkID0gY3VycmVudElkOwogICAgICAgIGRpc3RDdHgucmVkZW1wdGlvbkFtb3VudCA9IHJlZGVtcHRpb25BbW91bnQ7CiAgICAgICAgdG90YWxTdXBwbHlPZlRva2VucyA9IHRvdGFsU3VwcGx5T2ZUb2tlbnMuc3ViKHRvdGFsUmVkZWVtZWRUb2tlbnMpOwogICAgICAgIGRpc3RDdHgudG90YWxSZXdhcmRBbW91bnQgPSAKICAgICAgICAgICAgZGlzdEN0eC5kaXN0cmlidXRpb25BbW91bnQuc3ViKGRpc3RDdHgucmVjZWl2ZWRSZWRlbXB0aW9uQW1vdW50KS5hZGQoZGlzdEN0eC5yZWRlbXB0aW9uQW1vdW50KTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgoKICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICBpZiAodG9rZW5TdGF0dXMgPT0gVG9rZW5TdGF0dXMuT25TYWxlKSB7CiAgICAgICAgICAgIHJlcXVpcmUoX2Zyb20gPT0gb3duZXIpOwogICAgICAgIH0KICAgICAgICBpZiAoX3ZhbHVlID09IDApIHsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUoaG9sZGluZ3MuZXhpc3RzKF9mcm9tKSk7CiAgICAgICAgCiAgICAgICAgTGliSG9sZGluZ3MuSG9sZGluZyBzdG9yYWdlIGZyb21Ib2xkaW5nID0gaG9sZGluZ3MuZ2V0KF9mcm9tKTsKICAgICAgICByZXF1aXJlKGZyb21Ib2xkaW5nLnRvdGFsVG9rZW5zLnN1Yihmcm9tSG9sZGluZy5sb2NrZWRUb2tlbnMpID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICAKICAgICAgICBpZiAoIWhvbGRpbmdzLmV4aXN0cyhfdG8pKSB7IAogICAgICAgICAgICBob2xkaW5ncy5hZGQoX3RvLCBMaWJIb2xkaW5ncy5Ib2xkaW5nKHsKICAgICAgICAgICAgICAgIHRvdGFsVG9rZW5zIDogX3ZhbHVlLCAKICAgICAgICAgICAgICAgIGxvY2tlZFRva2VucyA6IDAsCiAgICAgICAgICAgICAgICBsYXN0UmV3YXJkTnVtYmVyIDogcmV3YXJkcy5sZW5ndGguc3ViKDEpLAogICAgICAgICAgICAgICAgd2VpQmFsYW5jZSA6IDAgCiAgICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIExpYkhvbGRpbmdzLkhvbGRpbmcgc3RvcmFnZSB0b0hvbGRpbmcgPSBob2xkaW5ncy5nZXQoX3RvKTsKICAgICAgICAgICAgcmVxdWlyZSh0b0hvbGRpbmcudG90YWxUb2tlbnMuYWRkKF92YWx1ZSkgPj0gdG9Ib2xkaW5nLnRvdGFsVG9rZW5zKTsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICAgICAgCiAgICAgICAgICAgIHVwZGF0ZVdlaUJhbGFuY2UodG9Ib2xkaW5nLCAwKTsgICAgCiAgICAgICAgICAgIHRvSG9sZGluZy50b3RhbFRva2VucyA9IHRvSG9sZGluZy50b3RhbFRva2Vucy5hZGQoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICB9CgogICAgICAgIHVwZGF0ZVdlaUJhbGFuY2UoZnJvbUhvbGRpbmcsIDApOyAgICAKICAgICAgICBmcm9tSG9sZGluZy50b3RhbFRva2VucyA9IGZyb21Ib2xkaW5nLnRvdGFsVG9rZW5zLnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBpZiAoZnJvbUhvbGRpbmcudG90YWxUb2tlbnMgPT0gMCAmJiBmcm9tSG9sZGluZy53ZWlCYWxhbmNlID09IDApIAogICAgICAgICAgICBob2xkaW5ncy5yZW1vdmUoX2Zyb20pOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKfQ=='.
	

]
