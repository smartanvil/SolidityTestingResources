Class {
	#name : #SRT11468d142559f6ab61e69b47f30fa6a36c93ee92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT11468d142559f6ab61e69b47f30fa6a36c93ee92 >> base64 [
	^ ''.
	

]
