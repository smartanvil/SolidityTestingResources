Class {
	#name : #SRTe4200db994b4a672d1ea323ce39825ea751cfe57,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe4200db994b4a672d1ea323ce39825ea751cfe57 >> base64 [
	^ ''.
	

]
