Class {
	#name : #SRT37de3a89b9115557b36bff31a2bfeaf77afcad70,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT37de3a89b9115557b36bff31a2bfeaf77afcad70 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8qKgoqIFRPS0VOIENvbnRyYWN0CiogRVJDLTIwIFRva2VuIFN0YW5kYXJkIENvbXBsaWFudAoqLwoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aCBieSBPcGVuWmVwcGVsaW4KICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cgp9CgovKioKICogVG9rZW4gY29udHJhY3QgaW50ZXJmYWNlIGZvciBleHRlcm5hbCB1c2UKICovCmNvbnRyYWN0IEVSQzIwVG9rZW5JbnRlcmZhY2UgewoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgfQoKLyoqCiogQHRpdGxlIFRva2VuIGRlZmluaXRpb24KKiBAZGV2IERlZmluZSB0b2tlbiBwYXJhbXRlcnMgaW5jbHVkaW5nIEVSQzIwIG9uZXMKKi8KY29udHJhY3QgRVJDMjBUb2tlbiBpcyBFUkMyMFRva2VuSW50ZXJmYWNlIHsgLy9TdGFuZGFyZCBkZWZpbml0aW9uIG9mIGEgRVJDMjBUb2tlbgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7IC8vQSBtYXBwaW5nIG9mIGFsbCBiYWxhbmNlcyBwZXIgYWRkcmVzcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOyAvL0EgbWFwcGluZyBvZiBhbGwgYWxsb3dhbmNlcwoKICAgIC8qKgogICAgKiBAZGV2IEdldCB0aGUgYmFsYW5jZSBvZiBhbiBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBiZSBxdWVyeS4KICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiB0byBhIHNwZWNpZmllZCBhZGRyZXNzCiAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsgLy9JZiB5b3UgZG9udCB3YW50IHRoYXQgcGVvcGxlIGRlc3Ryb3kgdG9rZW4KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmcm9tIGFuIGFkZHJlc3MgdG8gYW5vdGhlciBzcGVjaWZpZWQgYWRkcmVzcyB1c2luZyBhbGxvd2FuY2UKICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHdoZXJlIHRva2VuIGNvbWVzLgogICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOyAvL0lmIHlvdSBkb250IHdhbnQgdGhhdCBwZW9wbGUgZGVzdHJveSB0b2tlbgogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQXNzaWduIGFsbG93YW5jZSB0byBhbiBzcGVjaWZpZWQgYWRkcmVzcyB0byB1c2UgdGhlIG93bmVyIGJhbGFuY2UKICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHRvIGJlIGFsbG93ZWQgdG8gc3BlbmQuCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSBhbGxvd2VkLgogICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA9PSAwIHx8IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApOwogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEdldCB0aGUgYWxsb3dhbmNlIG9mIGFuIHNwZWNpZmllZCBhZGRyZXNzIHRvIHVzZSBhbm90aGVyIGFkZHJlc3MgYmFsYW5jZS4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2Vucy4KICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhbGxvd2VkIHNwZW5kZXIuCiAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEJ1cm4gdG9rZW4gb2Ygc2VuZGVyIGFkZHJlc3MuCiAgICAqIEBwYXJhbSBfYnVybmVkQW1vdW50IGFtb3VudCB0byBidXJuIGluY2x1ZGluZyBhbGwgZGVjaW1hbHMgd2l0aG91dCBkZWNpbWFsIHBvaW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbih1aW50MjU2IF9idXJuZWRBbW91bnQpIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF9idXJuZWRBbW91bnQpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gU2FmZU1hdGguc3ViKHRvdGFsU3VwcGx5LCBfYnVybmVkQW1vdW50KTsKICAgICAgICBCdXJuZWQobXNnLnNlbmRlciwgX2J1cm5lZEFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgTG9nIEV2ZW50cwogICAgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBCdXJuZWQoYWRkcmVzcyBpbmRleGVkIF90YXJnZXQsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLyoqCiogQHRpdGxlIEFzc2V0CiogQGRldiBJbml0aWFsIHN1cHBseSBjcmVhdGlvbgoqLwpjb250cmFjdCBBc3NldCBpcyBFUkMyMFRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdTb2NpYWwgQWN0aXZpdHkgVG9rZW4nOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gODsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gJ1NBVCc7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnMSc7CgogICAgZnVuY3Rpb24gQXNzZXQoKSBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMCAqICgxMCoqdWludDI1NihkZWNpbWFscykpOyAvLzEgYmlsbGlvbiBpbml0aWFsIHRva2VuIGNyZWF0aW9uCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsKICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCB0b3RhbFN1cHBseSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgfQogICAgCiAgICAvKioKICAgICpAZGV2IEZ1bmN0aW9uIHRvIGhhbmRsZSBjYWxsYmFjayBjYWxscwogICAgKi8KICAgIGZ1bmN0aW9uKCkgcHVibGljIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCn0='.
	

]
