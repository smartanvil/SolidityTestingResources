Class {
	#name : #SRT57b9348158389befa686c2b8cdc6c9b7bcb09a04,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT57b9348158389befa686c2b8cdc6c9b7bcb09a04 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CgogIGFkZHJlc3MgcHVibGljIGNvbnRyYWN0T3duZXI7CgogIGV2ZW50IENvbnRyYWN0T3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgY29udHJhY3RPd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5Q29udHJhY3RPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjb250cmFjdE93bmVyKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckNvbnRyYWN0T3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seUNvbnRyYWN0T3duZXIgewogICAgcmVxdWlyZShfbmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBDb250cmFjdE93bmVyc2hpcFRyYW5zZmVycmVkKGNvbnRyYWN0T3duZXIsIF9uZXdPd25lcik7CiAgICBjb250cmFjdE93bmVyID0gX25ld093bmVyOwogIH0KICAKICBmdW5jdGlvbiBwYXlvdXRGcm9tQ29udHJhY3QoKSBwdWJsaWMgb25seUNvbnRyYWN0T3duZXIgewogICAgICBjb250cmFjdE93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfSAgCgp9CgovLy8gQHRpdGxlIEludGVyZmFjZSBmb3IgY29udHJhY3RzIGNvbmZvcm1pbmcgdG8gRVJDLTcyMTogTm9uLUZ1bmdpYmxlIFRva2VucwovLy8gQGF1dGhvciBEaWV0ZXIgU2hpcmxleSA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJkZWJhYmJhYWJiOWViZmE2YjdiMWIzYTRiYmIwZjBiZGIxIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4gKGh0dHBzOi8vZ2l0aHViLmNvbS9kZXRlKQpjb250cmFjdCBFUkM3MjEgewogIC8vIFJlcXVpcmVkIG1ldGhvZHMKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgYWRkcik7CiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwoKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHRva2VuSWQpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwoKICAvLyBPcHRpb25hbAogIC8vIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgbmFtZSk7CiAgLy8gZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIHN5bWJvbCk7CiAgLy8gZnVuY3Rpb24gdG9rZW5PZk93bmVyQnlJbmRleChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfaW5kZXgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiB0b2tlbklkKTsKICAvLyBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSB0b2tlbklkcyk7CiAgLy8gZnVuY3Rpb24gdG9rZW5NZXRhZGF0YSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgaW5mb1VybCk7Cn0KCmNvbnRyYWN0IERvZ2d5RXRoUGljcyBpcyBFUkM3MjEsIE93bmFibGUgewoKICBldmVudCBEb2dneUNyZWF0ZWQodWludDI1NiB0b2tlbklkLCBzdHJpbmcgbmFtZSwgYWRkcmVzcyBvd25lcik7CiAgZXZlbnQgVG9rZW5Tb2xkKHVpbnQyNTYgdG9rZW5JZCwgdWludDI1NiBvbGRQcmljZSwgdWludDI1NiBuZXdQcmljZSwgYWRkcmVzcyBwcmV2T3duZXIsIGFkZHJlc3Mgd2lubmVyLCBzdHJpbmcgbmFtZSk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHRva2VuSWQpOwoKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IE5BTUUgPSAiRG9nZ3lFdGhQaWNzIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFNZTUJPTCA9ICJEb2dneVBpY3NUb2tlbiI7CgogIHVpbnQyNTYgcHJpdmF0ZSBzdGFydGluZ1ByaWNlID0gMC4wMSBldGhlcjsKCiAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgZG9nZ3lJZFRvT3duZXI7CgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGRvZ2d5SWRUb0RpdnM7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBvd25lcnNoaXBUb2tlbkNvdW50OwoKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyBkb2dneUlkVG9BcHByb3ZlZDsKCiAgbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSBwcml2YXRlIGRvZ2d5SWRUb1ByaWNlOwoKICAvKioqIERBVEFUWVBFUyAqKiovCiAgc3RydWN0IERvZ2d5IHsKICAgIHN0cmluZyBuYW1lOwogIH0KCiAgRG9nZ3lbXSBwcml2YXRlIGRvZ2dpZXM7CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB7IC8vRVJDNzIxCiAgICAvLyBDYWxsZXIgbXVzdCBvd24gdG9rZW4uCiAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICBkb2dneUlkVG9BcHByb3ZlZFtfdG9rZW5JZF0gPSBfdG87CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7IC8vRVJDNzIxCiAgICByZXR1cm4gb3duZXJzaGlwVG9rZW5Db3VudFtfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlRG9nZ3lUb2tlbihzdHJpbmcgX25hbWUsIHVpbnQyNTYgX3ByaWNlKSBwcml2YXRlIHsKICAgIF9jcmVhdGVEb2dneShfbmFtZSwgbXNnLnNlbmRlciwgX3ByaWNlKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZTNEb2dnaWVzVG9rZW5zKCkgcHVibGljIG9ubHlDb250cmFjdE93bmVyIHsgLy9taWdyYXRpb24KCSAgX2NyZWF0ZURvZ2d5KCJFdGhEb2dneSIsIDB4ZTZjNThmOGU0NTlmZTU3MGFmZmY1YjQ2MjI5OTBlYTE3NDRmMGUyOCwgMzg0NDMzNTkzNzUwMDAwMDAwKTsKCSAgX2NyZWF0ZURvZ2d5KCJFdGhEb2dneSIsIDB4NTYzMmNhOThlNTc4OGVkZGIyMzk3NzU3YWE4MmQxZWQ2MTcxZTVhZCwgMzg0NDMzNTkzNzUwMDAwMDAwKTsKCSAgX2NyZWF0ZURvZ2d5KCJFdGhEb2dneSIsIDB4N2NkODQ0NDMwMjdkMmUxOTQ3M2MzNjU3ZjE2N2FkYTM0NDE3NjU0ZiwgNTc2NjUwMzkwNjI1MDAwMDAwKTsKCQogIH0KICAKICBmdW5jdGlvbiBnZXREb2dneSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgZG9nZ3lOYW1lLCB1aW50MjU2IHNlbGxpbmdQcmljZSwgYWRkcmVzcyBvd25lcikgewogICAgRG9nZ3kgc3RvcmFnZSBkb2dneSA9IGRvZ2dpZXNbX3Rva2VuSWRdOwogICAgZG9nZ3lOYW1lID0gZG9nZ3kubmFtZTsKICAgIHNlbGxpbmdQcmljZSA9IGRvZ2d5SWRUb1ByaWNlW190b2tlbklkXTsKICAgIG93bmVyID0gZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdOwogIH0KCiAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZykgeyAvL0VSQzcyMQogICAgcmV0dXJuIE5BTUU7CiAgfQoKICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpIHsgLy9FUkM3MjEKICAgIG93bmVyID0gZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdOwogICAgcmVxdWlyZShvd25lciAhPSBhZGRyZXNzKDApKTsKICB9CgogIC8vIEFsbG93cyBzb21lb25lIHRvIHNlbmQgZXRoZXIgYW5kIG9idGFpbiB0aGUgdG9rZW4KICBmdW5jdGlvbiBwdXJjaGFzZSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcGF5YWJsZSB7CiAgICBhZGRyZXNzIG9sZE93bmVyID0gZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdOwogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CgogICAgdWludDI1NiBzZWxsaW5nUHJpY2UgPSBkb2dneUlkVG9QcmljZVtfdG9rZW5JZF07CgogICAgcmVxdWlyZShvbGRPd25lciAhPSBuZXdPd25lcik7CiAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbChuZXdPd25lcikpOwogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gc2VsbGluZ1ByaWNlKTsKCiAgICB1aW50MjU2IHBheW1lbnQgPSB1aW50MjU2KFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCA5KSwgMTApKTsgLy85MCUgdG8gcHJldmlvdXMgb3duZXIKICAgIHVpbnQyNTYgZGl2c19wYXltZW50ID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgMSksIDIwKSk7IC8vNSUgZGl2cwogICAgCglhZGRyZXNzIGRpdnNfYWRkcmVzcyA9IGRvZ2d5SWRUb0RpdnNbX3Rva2VuSWRdOwoJCiAgICAvLyBOZXh0IHByaWNlIHdpbGwgcmlzZSBvbiA1MCUKICAgIGRvZ2d5SWRUb1ByaWNlW190b2tlbklkXSA9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIDMpLCAyKSk7IAoKICAgIF90cmFuc2ZlcihvbGRPd25lciwgbmV3T3duZXIsIF90b2tlbklkKTsKCiAgICAvLyBQYXkgcHJldmlvdXMgdG9rZW5Pd25lciBpZiBvd25lciBpcyBub3QgY29udHJhY3QKICAgIGlmIChvbGRPd25lciAhPSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgIG9sZE93bmVyLnRyYW5zZmVyKHBheW1lbnQpOyAvLwogICAgfQoKICAgIC8vIFBheSB3aW5uZXIgdG9rZW5Pd25lciBpZiBvd25lciBpcyBub3QgY29udHJhY3QKICAgIGlmIChkaXZzX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSkgewogICAgICBkaXZzX2FkZHJlc3MudHJhbnNmZXIoZGl2c19wYXltZW50KTsgLy8KICAgIH0KCiAgICBUb2tlblNvbGQoX3Rva2VuSWQsIHNlbGxpbmdQcmljZSwgZG9nZ3lJZFRvUHJpY2VbX3Rva2VuSWRdLCBvbGRPd25lciwgbmV3T3duZXIsIGRvZ2dpZXNbX3Rva2VuSWRdLm5hbWUpOwoJCiAgICBpZiAobXNnLnZhbHVlID4gc2VsbGluZ1ByaWNlKSB7IC8vaWYgZXhjZXNzIHBheQoJICAgIHVpbnQyNTYgcHVyY2hhc2VFeGNlc3MgPSBTYWZlTWF0aC5zdWIobXNnLnZhbHVlLCBzZWxsaW5nUHJpY2UpOwoJCW1zZy5zZW5kZXIudHJhbnNmZXIocHVyY2hhc2VFeGNlc3MpOwoJfQogIH0KICAKICBmdW5jdGlvbiBjaGFuZ2VEb2dneSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcGF5YWJsZSB7IC8vCiAgICByZXF1aXJlKGRvZ2d5SWRUb1ByaWNlW190b2tlbklkXSA+PSA1MDAgZmlubmV5KTsKCQogICAgcmVxdWlyZShkb2dneUlkVG9Pd25lcltfdG9rZW5JZF0gPT0gbXNnLnNlbmRlciAmJiBtc2cudmFsdWUgPT0gMjAgZmlubmV5KTsgLy90YXggMC4wMmV0aCBmb3IgY2hhbmdlCgkKCXVpbnQyNTYgbmV3UHJpY2UxID0gIHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChkb2dneUlkVG9QcmljZVtfdG9rZW5JZF0sIDMpLCAxMCkpOyAvLzMwJQoJdWludDI1NiBuZXdQcmljZTIgPSAgdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKGRvZ2d5SWRUb1ByaWNlW190b2tlbklkXSwgNyksIDEwKSk7IC8vNzAlCiAgICAKICAgIC8vZ2V0IHR3byBkb2dnaWVzIHdpdGhpbiBvbmUKCWNyZWF0ZURvZ2d5VG9rZW4oIkV0aERvZ2d5IiwgbmV3UHJpY2UxKTsKCWNyZWF0ZURvZ2d5VG9rZW4oIkV0aERvZ2d5IiwgbmV3UHJpY2UyKTsKCQoJZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdID0gYWRkcmVzcyh0aGlzKTsgLy9yZXR1cm4gY2hhbmdlZCBkb2dneSB0byBkb2dneXBpY3MKCWRvZ2d5SWRUb1ByaWNlW190b2tlbklkXSA9IDEwIGZpbm5leTsKCSAKICB9CgoKICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsgLy9FUkM3MjEKICAgIHJldHVybiBTWU1CT0w7CiAgfQoKCiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgeyAvL0VSQzcyMQogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICBhZGRyZXNzIG9sZE93bmVyID0gZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdOwoKICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKG5ld093bmVyKSk7CiAgICByZXF1aXJlKF9hcHByb3ZlZChuZXdPd25lciwgX3Rva2VuSWQpKTsKCiAgICBfdHJhbnNmZXIob2xkT3duZXIsIG5ld093bmVyLCBfdG9rZW5JZCk7CiAgfQoKICBmdW5jdGlvbiBwcmljZU9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcHJpY2UpIHsgLy9mb3Igd2ViIHNpdGUgdmlldwogICAgcmV0dXJuIGRvZ2d5SWRUb1ByaWNlW190b2tlbklkXTsKICB9CgogIGZ1bmN0aW9uIEFMTG93bmVyc0FORHByaWNlcyh1aW50MjU2IF9zdGFydERvZ2d5SWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3NbXSBvd25lcnMsIGFkZHJlc3NbXSBkaXZzLCB1aW50MjU2W10gcHJpY2VzKSB7IC8vZm9yIHdlYiBzaXRlIHZpZXcKCQoJdWludDI1NiB0b3RhbERvZ2dpZXMgPSB0b3RhbFN1cHBseSgpOwoJCiAgICBpZiAodG90YWxEb2dnaWVzID09IDAgfHwgX3N0YXJ0RG9nZ3lJZCA+PSB0b3RhbERvZ2dpZXMpIHsKICAgICAgICAvLyBSZXR1cm4gYW4gZW1wdHkgYXJyYXkKICAgICAgcmV0dXJuIChuZXcgYWRkcmVzc1tdKDApLG5ldyBhZGRyZXNzW10oMCksbmV3IHVpbnQyNTZbXSgwKSk7CiAgICB9CgkKCXVpbnQyNTYgaW5kZXhUbzsKCWlmICh0b3RhbERvZ2dpZXMgPiBfc3RhcnREb2dneUlkKzEwMDApCgkJaW5kZXhUbyA9IF9zdGFydERvZ2d5SWQgKyAxMDAwOwoJZWxzZSAJCgkJaW5kZXhUbyA9IHRvdGFsRG9nZ2llczsKCQkKICAgIHVpbnQyNTYgdG90YWxSZXN1bHREb2dnaWVzID0gaW5kZXhUbyAtIF9zdGFydERvZ2d5SWQ7CQkKCQkKCWFkZHJlc3NbXSBtZW1vcnkgb3duZXJzX3JlcyA9IG5ldyBhZGRyZXNzW10odG90YWxSZXN1bHREb2dnaWVzKTsKCWFkZHJlc3NbXSBtZW1vcnkgZGl2c19yZXMgPSBuZXcgYWRkcmVzc1tdKHRvdGFsUmVzdWx0RG9nZ2llcyk7Cgl1aW50MjU2W10gbWVtb3J5IHByaWNlc19yZXMgPSBuZXcgdWludDI1NltdKHRvdGFsUmVzdWx0RG9nZ2llcyk7CgkKCWZvciAodWludDI1NiBkb2dneUlkID0gX3N0YXJ0RG9nZ3lJZDsgZG9nZ3lJZCA8IGluZGV4VG87IGRvZ2d5SWQrKykgewoJICBvd25lcnNfcmVzW2RvZ2d5SWQgLSBfc3RhcnREb2dneUlkXSA9IGRvZ2d5SWRUb093bmVyW2RvZ2d5SWRdOwoJICBkaXZzX3Jlc1tkb2dneUlkIC0gX3N0YXJ0RG9nZ3lJZF0gPSBkb2dneUlkVG9EaXZzW2RvZ2d5SWRdOwoJICBwcmljZXNfcmVzW2RvZ2d5SWQgLSBfc3RhcnREb2dneUlkXSA9IGRvZ2d5SWRUb1ByaWNlW2RvZ2d5SWRdOwoJfQoJCglyZXR1cm4gKG93bmVyc19yZXMsIGRpdnNfcmVzLCBwcmljZXNfcmVzKTsKICB9CiAgCiAgZnVuY3Rpb24gdG9rZW5zT2ZPd25lcihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2W10gb3duZXJUb2tlbikgeyAvL0VSQzcyMSBmb3Igd2ViIHNpdGUgdmlldwogICAgdWludDI1NiB0b2tlbkNvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICBpZiAodG9rZW5Db3VudCA9PSAwKSB7CiAgICAgICAgLy8gUmV0dXJuIGFuIGVtcHR5IGFycmF5CiAgICAgIHJldHVybiBuZXcgdWludDI1NltdKDApOwogICAgfSBlbHNlIHsKICAgICAgdWludDI1NltdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludDI1NltdKHRva2VuQ291bnQpOwogICAgICB1aW50MjU2IHRvdGFsRG9nZ2llcyA9IHRvdGFsU3VwcGx5KCk7CiAgICAgIHVpbnQyNTYgcmVzdWx0SW5kZXggPSAwOwoKICAgICAgdWludDI1NiBkb2dneUlkOwogICAgICBmb3IgKGRvZ2d5SWQgPSAwOyBkb2dneUlkIDw9IHRvdGFsRG9nZ2llczsgZG9nZ3lJZCsrKSB7CiAgICAgICAgaWYgKGRvZ2d5SWRUb093bmVyW2RvZ2d5SWRdID09IF9vd25lcikgewogICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4XSA9IGRvZ2d5SWQ7CiAgICAgICAgICByZXN1bHRJbmRleCsrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0KCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKSB7IC8vRVJDNzIxCiAgICByZXR1cm4gZG9nZ2llcy5sZW5ndGg7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsgLy9FUkM3MjEKICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKF90bykpOwoKCV90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsgLy9FUkM3MjEKICAgIHJlcXVpcmUoX293bnMoX2Zyb20sIF90b2tlbklkKSk7CiAgICByZXF1aXJlKF9hcHByb3ZlZChfdG8sIF90b2tlbklkKSk7CiAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKCiAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIH0KCgogIC8qIFBSSVZBVEUgRlVOQ1RJT05TICovCiAgZnVuY3Rpb24gX2FkZHJlc3NOb3ROdWxsKGFkZHJlc3MgX3RvKSBwcml2YXRlIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIF90byAhPSBhZGRyZXNzKDApOwogIH0KCiAgZnVuY3Rpb24gX2FwcHJvdmVkKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGRvZ2d5SWRUb0FwcHJvdmVkW190b2tlbklkXSA9PSBfdG87CiAgfQoKICBmdW5jdGlvbiBfY3JlYXRlRG9nZ3koc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UpIHByaXZhdGUgewogICAgRG9nZ3kgbWVtb3J5IF9kb2dneSA9IERvZ2d5KHsKICAgICAgbmFtZTogX25hbWUKICAgIH0pOwogICAgdWludDI1NiBuZXdEb2dneUlkID0gZG9nZ2llcy5wdXNoKF9kb2dneSkgLSAxOwoKICAgIHJlcXVpcmUobmV3RG9nZ3lJZCA9PSB1aW50MjU2KHVpbnQzMihuZXdEb2dneUlkKSkpOyAvL2NoZWNrIG1heGltdW0gbGltaXQgb2YgdG9rZW5zCgogICAgRG9nZ3lDcmVhdGVkKG5ld0RvZ2d5SWQsIF9uYW1lLCBfb3duZXIpOwoKICAgIGRvZ2d5SWRUb1ByaWNlW25ld0RvZ2d5SWRdID0gX3ByaWNlOwoJCglpZiAobmV3RG9nZ3lJZDwzKSAvL21pZ3JhdGlvbgoJCWRvZ2d5SWRUb0RpdnNbbmV3RG9nZ3lJZF0gPSAweGE4Mjg0NzY1MDVkM2I0ZGIwN2FjYTBiNjk3MjZlY2EzOWU1ZGVhNTA7IC8vZGl2aWRlbnRzIGFkZHJlc3M7CgllbHNlIAoJCWRvZ2d5SWRUb0RpdnNbbmV3RG9nZ3lJZF0gPSBfb3duZXI7IC8vZGl2aWRlbnRzIGFkZHJlc3M7CgogICAgX3RyYW5zZmVyKGFkZHJlc3MoMCksIF9vd25lciwgbmV3RG9nZ3lJZCk7CiAgfQoKICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIF9jaGVja2VkQWRkciwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBfY2hlY2tlZEFkZHIgPT0gZG9nZ3lJZFRvT3duZXJbX3Rva2VuSWRdOwogIH0KCmZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICBvd25lcnNoaXBUb2tlbkNvdW50W190b10rKzsKICAgIGRvZ2d5SWRUb093bmVyW190b2tlbklkXSA9IF90bzsKCiAgICAvLyBXaGVuIGNyZWF0aW5nIG5ldyBkb2dnaWVzIF9mcm9tIGlzIDB4MCwgYnV0IHdlIGNhbid0IGFjY291bnQgdGhhdCBhZGRyZXNzLgogICAgaWYgKF9mcm9tICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXJzaGlwVG9rZW5Db3VudFtfZnJvbV0tLTsKICAgICAgLy8gY2xlYXIgYW55IHByZXZpb3VzbHkgYXBwcm92ZWQgb3duZXJzaGlwIGV4Y2hhbmdlCiAgICAgIGRlbGV0ZSBkb2dneUlkVG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICB9CgogICAgLy8gRW1pdCB0aGUgdHJhbnNmZXIgZXZlbnQuCiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgfQp9'.
	

]
