Class {
	#name : #SRTc48dce601d09796b554fda45a1d28488f4aa3731,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc48dce601d09796b554fda45a1d28488f4aa3731 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLy8gQHRpdGxlIE93bmFibGUgY29udHJhY3QKbGlicmFyeSBTYWZlTWF0aCB7CgogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKfQoKLy8vIEB0aXRsZSBPd25hYmxlIGNvbnRyYWN0CmNvbnRyYWN0IE93bmFibGUgewogIAogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLy8vIEBkZXYgQ2hhbmdlIG93bmVyc2hpcAogIC8vLyBAcGFyYW0gbmV3T3duZXIgQWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8vIEB0aXRsZSBFUkMyMCBjb250cmFjdAovLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtMjAtdG9rZW4tc3RhbmRhcmQubWQKY29udHJhY3QgRVJDMjAgewogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICAKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCi8vLyBAdGl0bGUgRXh0ZW5kZWRFUkMyMCBjb250cmFjdApjb250cmFjdCBFeHRlbmRlZEVSQzIwIGlzIEVSQzIwIHsKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKTsKfQoKLy8vIEB0aXRsZSBXaXp6bGVJbmZpbml0eUhlbHBlciBjb250cmFjdApjb250cmFjdCBXaXp6bGVJbmZpbml0eUhlbHBlciB7CiAgZnVuY3Rpb24gaXNXaGl0ZWxpc3RlZChhZGRyZXNzIGFkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKTsKfQoKLy8vIEB0aXRsZSBDcm93ZHNhbGUgY29udHJhY3QKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIAogIC8vLyBUb2tlbiByZWZlcmVuY2UKICBFeHRlbmRlZEVSQzIwIHB1YmxpYyB0b2tlbjsKICAvLy8gV2l6emxlSW5maW5pdHlIZWxwZXIgcmVmZXJlbmNlIC0gaGVscGVyIGZvciB3aGl0ZWxpc3RpbmcKICBXaXp6bGVJbmZpbml0eUhlbHBlciBwdWJsaWMgaGVscGVyOwogIC8vLyBQcmVzYWxlIHN0YXJ0IHRpbWUgKGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWVQcmU7CiAgLy8vIFByZXNhbGUgZW5kIHRpbWUgKGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lUHJlOwogIC8vLyBJQ08gc3RhcnQgdGltZSAoaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZUljbzsKICAvLy8gSUNPIGVuZCB0aW1lIChpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgZW5kVGltZUljbzsKICAvLy8gQWRkcmVzcyB3aGVyZSB0aGUgZnVuZHMgd2lsbCBiZSBjb2xsZWN0ZWQKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CiAgLy8vIEVVUiBwZXIgMSBFVEggcmF0ZQogIHVpbnQzMiBwdWJsaWMgcmF0ZTsKICAvLy8gQW1vdW50IG9mIHRva2VucyBzb2xkIGluIHByZXNhbGUKICB1aW50MjU2IHB1YmxpYyB0b2tlbnNTb2xkUHJlOwogIC8vLyBBbW91bnQgb2YgdG9rZW5zIHNvbGQgaW4gSUNPCiAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZEljbzsKICAvLy8gQW1vdW50IG9mIHJhaXNlZCBldGhlcnMgZXhwcmVzc2VkIGluIHdlaXMKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CiAgLy8vIE51bWJlciBvZiBjb250cmlidXRvcnMKICB1aW50MjU2IHB1YmxpYyBjb250cmlidXRvcnM7CiAgLy8vIFByZXNhbGUgY2FwCiAgdWludDI1NiBwdWJsaWMgcHJlQ2FwOwogIC8vLyBJQ08gY2FwCiAgdWludDI1NiBwdWJsaWMgaWNvQ2FwOwogIC8vLyBQcmVzYWxlIGRpc2NvdW50IHBlcmNlbnRhZ2UKICB1aW50OCBwdWJsaWMgcHJlRGlzY291bnRQZXJjZW50YWdlOwogIC8vLyBBbW91bnQgb2YgdG9rZW5zIGluIElDTyBkaXNjb3VudCBsZXZlbCAxIAogIHVpbnQyNTYgcHVibGljIGljb0Rpc2NvdW50TGV2ZWwxOwogIC8vLyBBbW91bnQgb2YgdG9rZW5zIGluIElDTyBkaXNjb3VudCBsZXZlbCAyCiAgdWludDI1NiBwdWJsaWMgaWNvRGlzY291bnRMZXZlbDI7CiAgLy8vIElDTyBkaXNjb3VudCBwZXJjZW50YWdlIDEKICB1aW50OCBwdWJsaWMgaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwxOwogIC8vLyBJQ08gZGlzY291bnQgcGVyY2VudGFnZSAyCiAgdWludDggcHVibGljIGljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMjsKICAvLy8gSUNPIGRpc2NvdW50IHBlcmNlbnRhZ2UgMwogIHVpbnQ4IHB1YmxpYyBpY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDM7CgogIGZ1bmN0aW9uIENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWVQcmUsIHVpbnQyNTYgX2VuZFRpbWVQcmUsIHVpbnQyNTYgX3N0YXJ0VGltZUljbywgdWludDI1NiBfZW5kVGltZUljbywgdWludDMyIF9yYXRlLCBhZGRyZXNzIF93YWxsZXQsIGFkZHJlc3MgX3Rva2VuQWRkcmVzcywgYWRkcmVzcyBfaGVscGVyQWRkcmVzcykgewogICAgcmVxdWlyZShfc3RhcnRUaW1lUHJlID49IG5vdyk7CiAgICByZXF1aXJlKF9lbmRUaW1lUHJlID49IF9zdGFydFRpbWVQcmUpOwogICAgcmVxdWlyZShfc3RhcnRUaW1lSWNvID49IF9lbmRUaW1lUHJlKTsKICAgIHJlcXVpcmUoX2VuZFRpbWVJY28gPj0gX3N0YXJ0VGltZUljbyk7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF90b2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9oZWxwZXJBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgc3RhcnRUaW1lUHJlID0gX3N0YXJ0VGltZVByZTsKICAgIGVuZFRpbWVQcmUgPSBfZW5kVGltZVByZTsKICAgIHN0YXJ0VGltZUljbyA9IF9zdGFydFRpbWVJY287CiAgICBlbmRUaW1lSWNvID0gX2VuZFRpbWVJY287CiAgICByYXRlID0gX3JhdGU7CiAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgdG9rZW4gPSBFeHRlbmRlZEVSQzIwKF90b2tlbkFkZHJlc3MpOwogICAgaGVscGVyID0gV2l6emxlSW5maW5pdHlIZWxwZXIoX2hlbHBlckFkZHJlc3MpOwogICAgcHJlQ2FwID0gMTUwMCAqIDEwKioyNDsgICAgICAgICAgIC8vIDE1MDBtIHRva2VucwogICAgcHJlRGlzY291bnRQZXJjZW50YWdlID0gNTA7ICAgICAgIC8vIDUwJSBkaXNjb3VudAogICAgaWNvQ2FwID0gMzQ1MCAqIDEwKioyNDsgICAgICAgICAgIC8vIDM0NTBtIHRva2VucyAoNTAwbSArIDUwMG0gKyAyNDUwbSkKICAgIGljb0Rpc2NvdW50TGV2ZWwxID0gNTAwICogMTAqKjI0OyAvLyA1MDBtIHRva2VucyAKICAgIGljb0Rpc2NvdW50TGV2ZWwyID0gNTAwICogMTAqKjI0OyAvLyA1MDBtIHRva2VucwogICAgaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwxID0gNDA7IC8vIDQwJSBkaXNjb3VudAogICAgaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwyID0gMzA7IC8vIDMwJSBkaXNjb3VudAogICAgaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwzID0gMjU7IC8vIDI1JSBkaXNjb3VudAogIH0KCiAgLy8vIEBkZXYgU2V0IHRoZSByYXRlIG9mIEVUSCAtIEVVUgogIC8vLyBAcGFyYW0gX3JhdGUgUmF0ZSBvZiBFVEggLSBFVVIKICBmdW5jdGlvbiBzZXRSYXRlKHVpbnQzMiBfcmF0ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByYXRlID0gX3JhdGU7CiAgfQoKICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiBmb3IgY3Jvd2RzYWxlIGNvbnRyaWJ1dGlvbgogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8vIEBkZXYgQnV5IHRva2VucyBmdW5jdGlvbgogIC8vLyBAcGFyYW0gYmVuZWZpY2lhcnkgQWRkcmVzcyB3aGljaCB3aWxsIHJlY2VpdmUgdGhlIHRva2VucwogIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShoZWxwZXIuaXNXaGl0ZWxpc3RlZChiZW5lZmljaWFyeSkpOwogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICByZXF1aXJlKHdlaUFtb3VudCA+IDApOwogICAgdWludDI1NiB0b2tlbkFtb3VudCA9IDA7CiAgICBpZiAoaXNQcmVzYWxlKCkpIHsKICAgICAgLy8vIE1pbmltdW0gY29udHJpYnV0aW9uIG9mIDEgZXRoZXIgZHVyaW5nIHByZXNhbGUKICAgICAgcmVxdWlyZSh3ZWlBbW91bnQgPj0gMSBldGhlcik7IAogICAgICB0b2tlbkFtb3VudCA9IGdldFRva2VuQW1vdW50KHdlaUFtb3VudCwgcHJlRGlzY291bnRQZXJjZW50YWdlKTsKICAgICAgdWludDI1NiBuZXdUb2tlbnNTb2xkUHJlID0gdG9rZW5zU29sZFByZS5hZGQodG9rZW5BbW91bnQpOwogICAgICByZXF1aXJlKG5ld1Rva2Vuc1NvbGRQcmUgPD0gcHJlQ2FwKTsKICAgICAgdG9rZW5zU29sZFByZSA9IG5ld1Rva2Vuc1NvbGRQcmU7CiAgICB9IGVsc2UgaWYgKGlzSWNvKCkpIHsKICAgICAgdWludDggZGlzY291bnRQZXJjZW50YWdlID0gZ2V0SWNvRGlzY291bnRQZXJjZW50YWdlKCk7CiAgICAgIHRva2VuQW1vdW50ID0gZ2V0VG9rZW5BbW91bnQod2VpQW1vdW50LCBkaXNjb3VudFBlcmNlbnRhZ2UpOwogICAgICAvLy8gTWluaW11bSBjb250cmlidXRpb24gMSB0b2tlbiBkdXJpbmcgSUNPCiAgICAgIHJlcXVpcmUodG9rZW5BbW91bnQgPj0gMTAqKjE4KTsgCiAgICAgIHVpbnQyNTYgbmV3VG9rZW5zU29sZEljbyA9IHRva2Vuc1NvbGRJY28uYWRkKHRva2VuQW1vdW50KTsKICAgICAgcmVxdWlyZShuZXdUb2tlbnNTb2xkSWNvIDw9IGljb0NhcCk7CiAgICAgIHRva2Vuc1NvbGRJY28gPSBuZXdUb2tlbnNTb2xkSWNvOwogICAgfSBlbHNlIHsKICAgICAgLy8vIFN0b3AgZXhlY3V0aW9uIGFuZCByZXR1cm4gcmVtYWluaW5nIGdhcwogICAgICByZXF1aXJlKGZhbHNlKTsKICAgIH0KICAgIGV4ZWN1dGVUcmFuc2FjdGlvbihiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbkFtb3VudCk7CiAgfQoKICAvLy8gQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBjYWxjdWxhdGluZyBJQ08gZGlzY291bnQgcGVyY2VudGFnZSBkZXBlbmRpbmcgb24gbGV2ZWxzCiAgZnVuY3Rpb24gZ2V0SWNvRGlzY291bnRQZXJjZW50YWdlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgIGlmICh0b2tlbnNTb2xkSWNvIDw9IGljb0Rpc2NvdW50TGV2ZWwxKSB7CiAgICAgIHJldHVybiBpY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDE7CiAgICB9IGVsc2UgaWYgKHRva2Vuc1NvbGRJY28gPD0gaWNvRGlzY291bnRMZXZlbDEuYWRkKGljb0Rpc2NvdW50TGV2ZWwyKSkgewogICAgICByZXR1cm4gaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwyOwogICAgfSBlbHNlIHsgCiAgICAgIHJldHVybiBpY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDM7IC8vZm9yIGV2ZXJ5dGhpbmcgZWxzZQogICAgfQogIH0KCiAgLy8vIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBjYWxjdWxhdGUgYW1vdW50IG9mIHRva2VucyBiYXNlZCBvbiBkaXNjb3VudCBwZXJjZW50YWdlCiAgZnVuY3Rpb24gZ2V0VG9rZW5BbW91bnQodWludDI1NiB3ZWlBbW91bnQsIHVpbnQ4IGRpc2NvdW50UGVyY2VudGFnZSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8vIExlc3MgdGhhbiAxMDAgdG8gYXZvaWQgZGl2aXNpb24gd2l0aCB6ZXJvCiAgICByZXF1aXJlKGRpc2NvdW50UGVyY2VudGFnZSA+PSAwICYmIGRpc2NvdW50UGVyY2VudGFnZSA8IDEwMCk7IAogICAgdWludDI1NiBiYXNlVG9rZW5BbW91bnQgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwogICAgdWludDI1NiB0b2tlbkFtb3VudCA9IGJhc2VUb2tlbkFtb3VudC5tdWwoMTAwMDApLmRpdigxMDAgLSBkaXNjb3VudFBlcmNlbnRhZ2UpOwogICAgcmV0dXJuIHRva2VuQW1vdW50OwogIH0KCiAgLy8vIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gZm9yIGV4ZWN1dGlvbiBvZiBjcm93ZHNhbGUgdHJhbnNhY3Rpb24gYW5kIHByb3BlciBsb2dnaW5nIHVzZWQgYnkgcGF5YWJsZSBmdW5jdGlvbnMKICBmdW5jdGlvbiBleGVjdXRlVHJhbnNhY3Rpb24oYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludDI1NiB3ZWlBbW91bnQsIHVpbnQyNTYgdG9rZW5BbW91bnQpIGludGVybmFsIHsKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2VuQW1vdW50KTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5BbW91bnQpOwoJICBjb250cmlidXRvcnMgPSBjb250cmlidXRvcnMuYWRkKDEpOwogICAgd2FsbGV0LnRyYW5zZmVyKHdlaUFtb3VudCk7CiAgfQoKICAvLy8gQGRldiBVc2VkIHRvIGNoYW5nZSBwcmVzYWxlIGNhcCAobWF4aW11bSB0b2tlbnMgc29sZCBkdXJpbmcgcHJlc2FsZSkKICAvLy8gQHBhcmFtIF9wcmVDYXAgUHJlc2FsZSBjYXAKICBmdW5jdGlvbiBjaGFuZ2VQcmVzYWxlQ2FwKHVpbnQyNTYgX3ByZUNhcCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9wcmVDYXAgPiAwKTsKICAgIFByZXNhbGVDYXBDaGFuZ2VkKG93bmVyLCBfcHJlQ2FwKTsKICAgIHByZUNhcCA9IF9wcmVDYXA7CiAgfQoKICAvLy8gQGRldiBVc2VkIHRvIGNoYW5nZSBwcmVzYWxlIGRpc2NvdW50IHBlcmNlbnRhZ2UKICAvLy8gQHBhcmFtIF9wcmVEaXNjb3VudFBlcmNlbnRhZ2UgUHJlc2FsZSBkaXNjb3VudCBwZXJjZW50YWdlCiAgZnVuY3Rpb24gY2hhbmdlUHJlc2FsZURpc2NvdW50UGVyY2VudGFnZSh1aW50OCBfcHJlRGlzY291bnRQZXJjZW50YWdlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoX3ByZURpc2NvdW50UGVyY2VudGFnZSA+PSAwICYmIF9wcmVEaXNjb3VudFBlcmNlbnRhZ2UgPCAxMDApOwogICAgUHJlc2FsZURpc2NvdW50UGVyY2VudGFnZUNoYW5nZWQob3duZXIsIF9wcmVEaXNjb3VudFBlcmNlbnRhZ2UpOwogICAgcHJlRGlzY291bnRQZXJjZW50YWdlID0gX3ByZURpc2NvdW50UGVyY2VudGFnZTsKICB9CgogIC8vLyBAZGV2IFVzZWQgdG8gY2hhbmdlIHByZXNhbGUgdGltZQogIC8vLyBAcGFyYW0gX3N0YXJ0VGltZVByZSBTdGFydCB0aW1lIG9mIHByZXNhbGUKICAvLy8gQHBhcmFtIF9lbmRUaW1lUHJlIEVuZCB0aW1lIG9mIHByZXNhbGUKICBmdW5jdGlvbiBjaGFuZ2VQcmVzYWxlVGltZVJhbmdlKHVpbnQyNTYgX3N0YXJ0VGltZVByZSwgdWludDI1NiBfZW5kVGltZVByZSkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9lbmRUaW1lUHJlID49IF9zdGFydFRpbWVQcmUpOwogICAgUHJlc2FsZVRpbWVSYW5nZUNoYW5nZWQob3duZXIsIF9zdGFydFRpbWVQcmUsIF9lbmRUaW1lUHJlKTsKICAgIHN0YXJ0VGltZVByZSA9IF9zdGFydFRpbWVQcmU7CiAgICBlbmRUaW1lUHJlID0gX2VuZFRpbWVQcmU7CiAgfQoKICAvLy8gQGRldiBVc2VkIHRvIGNoYW5nZSBJQ08gY2FwIGluIGNhc2UgdGhlIGhhcmQgY2FwIGhhcyBiZWVuIHJlYWNoZWQKICAvLy8gQHBhcmFtIF9pY29DYXAgSUNPIGNhcAogIGZ1bmN0aW9uIGNoYW5nZUljb0NhcCh1aW50MjU2IF9pY29DYXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShfaWNvQ2FwID4gMCk7CiAgICBJY29DYXBDaGFuZ2VkKG93bmVyLCBfaWNvQ2FwKTsKICAgIGljb0NhcCA9IF9pY29DYXA7CiAgfQoKICAvLy8gQGRldiBVc2VkIHRvIGNoYW5nZSB0aW1lIG9mIElDTwogIC8vLyBAcGFyYW0gX3N0YXJ0VGltZUljbyBTdGFydCB0aW1lIG9mIElDTwogIC8vLyBAcGFyYW0gX2VuZFRpbWVJY28gRW5kIHRpbWUgb2YgSUNPCiAgZnVuY3Rpb24gY2hhbmdlSWNvVGltZVJhbmdlKHVpbnQyNTYgX3N0YXJ0VGltZUljbywgdWludDI1NiBfZW5kVGltZUljbykgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9lbmRUaW1lSWNvID49IF9zdGFydFRpbWVJY28pOwogICAgSWNvVGltZVJhbmdlQ2hhbmdlZChvd25lciwgX3N0YXJ0VGltZUljbywgX2VuZFRpbWVJY28pOwogICAgc3RhcnRUaW1lSWNvID0gX3N0YXJ0VGltZUljbzsKICAgIGVuZFRpbWVJY28gPSBfZW5kVGltZUljbzsKICB9CgogIC8vLyBAZGV2IENoYW5nZSBhbW91bnQgb2YgdG9rZW5zIGluIGRpc2NvdW50IHBoYXNlcwogIC8vLyBAcGFyYW0gX2ljb0Rpc2NvdW50TGV2ZWwxIEFtb3VudCBvZiB0b2tlbnMgaW4gZmlyc3QgcGhhc2UKICAvLy8gQHBhcmFtIF9pY29EaXNjb3VudExldmVsMiBBbW91bnQgb2YgdG9rZW5zIGluIHNlY29uZCBwaGFzZQogIGZ1bmN0aW9uIGNoYW5nZUljb0Rpc2NvdW50TGV2ZWxzKHVpbnQyNTYgX2ljb0Rpc2NvdW50TGV2ZWwxLCB1aW50MjU2IF9pY29EaXNjb3VudExldmVsMikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9pY29EaXNjb3VudExldmVsMSA+IDAgJiYgX2ljb0Rpc2NvdW50TGV2ZWwyID4gMCk7CiAgICBJY29EaXNjb3VudExldmVsc0NoYW5nZWQob3duZXIsIF9pY29EaXNjb3VudExldmVsMSwgX2ljb0Rpc2NvdW50TGV2ZWwyKTsKICAgIGljb0Rpc2NvdW50TGV2ZWwxID0gX2ljb0Rpc2NvdW50TGV2ZWwxOwogICAgaWNvRGlzY291bnRMZXZlbDIgPSBfaWNvRGlzY291bnRMZXZlbDI7CiAgfQoKICAvLy8gQGRldiBDaGFuZ2UgZGlzY291bnQgcGVyY2VudGFnZXMgZm9yIGRpZmZlcmVudCBwaGFzZXMKICAvLy8gQHBhcmFtIF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDEgRGlzY291bnQgcGVyY2VudGFnZSBvZiBwaGFzZSAxCiAgLy8vIEBwYXJhbSBfaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwyIERpc2NvdW50IHBlcmNlbnRhZ2Ugb2YgcGhhc2UgMgogIC8vLyBAcGFyYW0gX2ljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMyBEaXNjb3VudCBwZXJjZW50YWdlIG9mIHBoYXNlIDMKICBmdW5jdGlvbiBjaGFuZ2VJY29EaXNjb3VudFBlcmNlbnRhZ2VzKHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDEsIHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDIsIHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShfaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwxID49IDAgJiYgX2ljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMSA8IDEwMCk7CiAgICByZXF1aXJlKF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDIgPj0gMCAmJiBfaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwyIDwgMTAwKTsKICAgIHJlcXVpcmUoX2ljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMyA+PSAwICYmIF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDMgPCAxMDApOwogICAgSWNvRGlzY291bnRQZXJjZW50YWdlc0NoYW5nZWQob3duZXIsIF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDEsIF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDIsIF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDMpOwogICAgaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwxID0gX2ljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMTsKICAgIGljb0Rpc2NvdW50UGVyY2VudGFnZUxldmVsMiA9IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDI7CiAgICBpY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDMgPSBfaWNvRGlzY291bnRQZXJjZW50YWdlTGV2ZWwzOwogIH0KCiAgLy8vIEBkZXYgQ2hlY2sgaWYgcHJlc2FsZSBpcyBhY3RpdmUKICBmdW5jdGlvbiBpc1ByZXNhbGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIG5vdyA+PSBzdGFydFRpbWVQcmUgJiYgbm93IDw9IGVuZFRpbWVQcmU7CiAgfQoKICAvLy8gQGRldiBDaGVjayBpZiBJQ08gaXMgYWN0aXZlCiAgZnVuY3Rpb24gaXNJY28oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIG5vdyA+PSBzdGFydFRpbWVJY28gJiYgbm93IDw9IGVuZFRpbWVJY287CiAgfQoKICAvLy8gQGRldiBDaGVjayBpZiBwcmVzYWxlIGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc1ByZXNhbGVFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbm93ID4gZW5kVGltZVByZTsKICB9CgogIC8vLyBAZGV2IENoZWNrIGlmIElDTyBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNJY29FbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbm93ID4gZW5kVGltZUljbzsKICB9CgogIC8vLyBAZGV2IEFtb3VudCBvZiB0b2tlbnMgdGhhdCBoYXZlIGJlZW4gc29sZCBkdXJpbmcgYm90aCBwcmVzYWxlIGFuZCBJQ08gcGhhc2UKICBmdW5jdGlvbiBjdW1tdWxhdGl2ZVRva2Vuc1NvbGQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIHRva2Vuc1NvbGRQcmUgKyB0b2tlbnNTb2xkSWNvOwogIH0KCiAgLy8vIEBkZXYgRnVuY3Rpb24gdG8gZXh0cmFjdCBtaXN0YWtlbmx5IHNlbnQgRVJDMjAgdG9rZW5zIHNlbnQgdG8gQ3Jvd2RzYWxlIGNvbnRyYWN0CiAgLy8vIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiB0b2tlbiB3ZSB3YW50IHRvIGV4dHJhY3QKICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIF90b2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICBpZiAoX3Rva2VuID09IGFkZHJlc3MoMCkpIHsgCiAgICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgIHJldHVybjsKICAgIH0KCiAgICBFUkMyMCBlcmMyMFRva2VuID0gRVJDMjAoX3Rva2VuKTsKICAgIHVpbnQgYmFsYW5jZSA9IGVyYzIwVG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgZXJjMjBUb2tlbi50cmFuc2Zlcihvd25lciwgYmFsYW5jZSk7CiAgICBDbGFpbWVkVG9rZW5zKF90b2tlbiwgb3duZXIsIGJhbGFuY2UpOwogIH0KCiAgLy8vIEV2ZW50cwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIF9wdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IF9hbW91bnQpOwogIGV2ZW50IFByZXNhbGVUaW1lUmFuZ2VDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgX3N0YXJ0VGltZVByZSwgdWludDI1NiBfZW5kVGltZVByZSk7CiAgZXZlbnQgUHJlc2FsZUNhcENoYW5nZWQoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludDI1NiBfcHJlQ2FwKTsKICBldmVudCBQcmVzYWxlRGlzY291bnRQZXJjZW50YWdlQ2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50OCBfcHJlRGlzY291bnRQZXJjZW50YWdlKTsKICBldmVudCBJY29DYXBDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgX2ljb0NhcCk7CiAgZXZlbnQgSWNvVGltZVJhbmdlQ2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50MjU2IF9zdGFydFRpbWVJY28sIHVpbnQyNTYgX2VuZFRpbWVJY28pOwogIGV2ZW50IEljb0Rpc2NvdW50TGV2ZWxzQ2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50MjU2IF9pY29EaXNjb3VudExldmVsMSwgdWludDI1NiBfaWNvRGlzY291bnRMZXZlbDIpOwogIGV2ZW50IEljb0Rpc2NvdW50UGVyY2VudGFnZXNDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDEsIHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDIsIHVpbnQ4IF9pY29EaXNjb3VudFBlcmNlbnRhZ2VMZXZlbDMpOwogIGV2ZW50IENsYWltZWRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIF90b2tlbiwgYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludCBfYW1vdW50KTsKCn0KCi8vLyBAdGl0bGUgV2l6emxlSW5maW5pdHlUb2tlbkNyb3dkc2FsZSBjb250cmFjdApjb250cmFjdCBXaXp6bGVJbmZpbml0eVRva2VuQ3Jvd2RzYWxlIGlzIENyb3dkc2FsZSB7CgogIGZ1bmN0aW9uIFdpenpsZUluZmluaXR5VG9rZW5Dcm93ZHNhbGUodWludDI1NiBfc3RhcnRUaW1lUHJlLCB1aW50MjU2IF9lbmRUaW1lUHJlLCB1aW50MjU2IF9zdGFydFRpbWVJY28sIHVpbnQyNTYgX2VuZFRpbWVJY28sIHVpbnQzMiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0LCBhZGRyZXNzIF90b2tlbkFkZHJlc3MsIGFkZHJlc3MgX2hlbHBlckFkZHJlc3MpIAogIENyb3dkc2FsZShfc3RhcnRUaW1lUHJlLCBfZW5kVGltZVByZSwgX3N0YXJ0VGltZUljbywgX2VuZFRpbWVJY28sIF9yYXRlLCBfd2FsbGV0LCBfdG9rZW5BZGRyZXNzLCBfaGVscGVyQWRkcmVzcykgcHVibGljIHsKCiAgfQoKfQ=='.
	

]
