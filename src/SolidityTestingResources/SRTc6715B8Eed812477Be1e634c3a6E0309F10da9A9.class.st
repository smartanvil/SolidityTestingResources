Class {
	#name : #SRTc6715B8Eed812477Be1e634c3a6E0309F10da9A9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc6715B8Eed812477Be1e634c3a6E0309F10da9A9 >> base64 [
	^ ''.
	

]
