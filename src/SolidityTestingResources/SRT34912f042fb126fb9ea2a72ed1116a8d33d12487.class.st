Class {
	#name : #SRT34912f042fb126fb9ea2a72ed1116a8d33d12487,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT34912f042fb126fb9ea2a72ed1116a8d33d12487 >> base64 [
	^ 'Ly9zb2wgV2FsbGV0Ci8vIE11bHRpLXNpZywgZGFpbHktbGltaXRlZCBhY2NvdW50IHByb3h5L3dhbGxldC4KLy8gQGF1dGhvcnM6Ci8vIEdhdiBXb29kIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjY3MDAyNzAyMTMwZjAzMDIxMTQ5MDQwODBhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KLy8gaW5oZXJpdGFibGUgInByb3BlcnR5IiBjb250cmFjdCB0aGF0IGVuYWJsZXMgbWV0aG9kcyB0byBiZSBwcm90ZWN0ZWQgYnkgcmVxdWlyaW5nIHRoZSBhY3F1aWVzY2VuY2Ugb2YgZWl0aGVyIGEKLy8gc2luZ2xlLCBvciwgY3J1Y2lhbGx5LCBlYWNoIG9mIGEgbnVtYmVyIG9mLCBkZXNpZ25hdGVkIG93bmVycy4KLy8gdXNhZ2U6Ci8vIHVzZSBtb2RpZmllcnMgb25seW93bmVyIChqdXN0IG93biBvd25lZCkgb3Igb25seW1hbnlvd25lcnMoaGFzaCksIHdoZXJlYnkgdGhlIHNhbWUgaGFzaCBtdXN0IGJlIHByb3ZpZGVkIGJ5Ci8vIHNvbWUgbnVtYmVyIChzcGVjaWZpZWQgaW4gY29uc3RydWN0b3IpIG9mIHRoZSBzZXQgb2Ygb3duZXJzIChzcGVjaWZpZWQgaW4gdGhlIGNvbnN0cnVjdG9yLCBtb2RpZmlhYmxlKSBiZWZvcmUgdGhlCi8vIGludGVyaW9yIGlzIGV4ZWN1dGVkLgpwcmFnbWEgc29saWRpdHkgXjAuNC42OwoKY29udHJhY3QgbXVsdGlvd25lZCB7CgogICAgLy8gVFlQRVMKCiAgICAvLyBzdHJ1Y3QgZm9yIHRoZSBzdGF0dXMgb2YgYSBwZW5kaW5nIG9wZXJhdGlvbi4KICAgIHN0cnVjdCBQZW5kaW5nU3RhdGUgewogICAgICAgIHVpbnQgeWV0TmVlZGVkOwogICAgICAgIHVpbnQgb3duZXJzRG9uZTsKICAgICAgICB1aW50IGluZGV4OwogICAgfQoKICAgIC8vIEVWRU5UUwoKICAgIC8vIHRoaXMgY29udHJhY3Qgb25seSBoYXMgc2l4IHR5cGVzIG9mIGV2ZW50czogaXQgY2FuIGFjY2VwdCBhIGNvbmZpcm1hdGlvbiwgaW4gd2hpY2ggY2FzZQogICAgLy8gd2UgcmVjb3JkIG93bmVyIGFuZCBvcGVyYXRpb24gKGhhc2gpIGFsb25nc2lkZSBpdC4KICAgIGV2ZW50IENvbmZpcm1hdGlvbihhZGRyZXNzIG93bmVyLCBieXRlczMyIG9wZXJhdGlvbik7CiAgICBldmVudCBSZXZva2UoYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24pOwogICAgLy8gc29tZSBvdGhlcnMgYXJlIGluIHRoZSBjYXNlIG9mIGFuIG93bmVyIGNoYW5naW5nLgogICAgZXZlbnQgT3duZXJDaGFuZ2VkKGFkZHJlc3Mgb2xkT3duZXIsIGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJBZGRlZChhZGRyZXNzIG5ld093bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZlZChhZGRyZXNzIG9sZE93bmVyKTsKICAgIC8vIHRoZSBsYXN0IG9uZSBpcyBlbWl0dGVkIGlmIHRoZSByZXF1aXJlZCBzaWduYXR1cmVzIGNoYW5nZQogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2VkKHVpbnQgbmV3UmVxdWlyZW1lbnQpOwoKICAgIC8vIE1PRElGSUVSUwoKICAgIC8vIHNpbXBsZSBzaW5nbGUtc2lnIGZ1bmN0aW9uIG1vZGlmaWVyLgogICAgbW9kaWZpZXIgb25seW93bmVyIHsKICAgICAgICBpZiAoaXNPd25lcihtc2cuc2VuZGVyKSkKICAgICAgICAgICAgXzsKICAgIH0KICAgIC8vIG11bHRpLXNpZyBmdW5jdGlvbiBtb2RpZmllcjogdGhlIG9wZXJhdGlvbiBtdXN0IGhhdmUgYW4gaW50cmluc2ljIGhhc2ggaW4gb3JkZXIKICAgIC8vIHRoYXQgbGF0ZXIgYXR0ZW1wdHMgY2FuIGJlIHJlYWxpc2VkIGFzIHRoZSBzYW1lIHVuZGVybHlpbmcgb3BlcmF0aW9uIGFuZAogICAgLy8gdGh1cyBjb3VudCBhcyBjb25maXJtYXRpb25zLgogICAgbW9kaWZpZXIgb25seW1hbnlvd25lcnMoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgaWYgKGNvbmZpcm1BbmRDaGVjayhfb3BlcmF0aW9uKSkKICAgICAgICAgICAgXzsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgaXMgZ2l2ZW4gbnVtYmVyIG9mIHNpZ3MgcmVxdWlyZWQgdG8gZG8gcHJvdGVjdGVkICJvbmx5bWFueW93bmVycyIgdHJhbnNhY3Rpb25zCiAgICAvLyBhcyB3ZWxsIGFzIHRoZSBzZWxlY3Rpb24gb2YgYWRkcmVzc2VzIGNhcGFibGUgb2YgY29uZmlybWluZyB0aGVtLgogICAgZnVuY3Rpb24gbXVsdGlvd25lZChhZGRyZXNzW10gX293bmVycywgdWludCBfcmVxdWlyZWQpIHsKICAgICAgICBtX251bU93bmVycyA9IF9vd25lcnMubGVuZ3RoICsgMTsKICAgICAgICBtX293bmVyc1sxXSA9IHVpbnQobXNnLnNlbmRlcik7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildID0gMTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfb3duZXJzLmxlbmd0aDsgKytpKQogICAgICAgIHsKICAgICAgICAgICAgbV9vd25lcnNbMiArIGldID0gdWludChfb3duZXJzW2ldKTsKICAgICAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyc1tpXSldID0gMiArIGk7CiAgICAgICAgfQogICAgICAgIG1fcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICB9CgogICAgLy8gUmV2b2tlcyBhIHByaW9yIGNvbmZpcm1hdGlvbiBvZiB0aGUgZ2l2ZW4gb3BlcmF0aW9uCiAgICBmdW5jdGlvbiByZXZva2UoYnl0ZXMzMiBfb3BlcmF0aW9uKSBleHRlcm5hbCB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildOwogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGV5J3JlIGFuIG93bmVyCiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgdmFyIHBlbmRpbmcgPSBtX3BlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPiAwKSB7CiAgICAgICAgICAgIHBlbmRpbmcueWV0TmVlZGVkKys7CiAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSAtPSBvd25lckluZGV4Qml0OwogICAgICAgICAgICBSZXZva2UobXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFJlcGxhY2VzIGFuIG93bmVyIGBfZnJvbWAgd2l0aCBhbm90aGVyIGBfdG9gLgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgaWYgKGlzT3duZXIoX3RvKSkgcmV0dXJuOwogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9mcm9tKV07CiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwoKICAgICAgICBjbGVhclBlbmRpbmcoKTsKICAgICAgICBtX293bmVyc1tvd25lckluZGV4XSA9IHVpbnQoX3RvKTsKICAgICAgICBtX293bmVySW5kZXhbdWludChfZnJvbSldID0gMDsKICAgICAgICBtX293bmVySW5kZXhbdWludChfdG8pXSA9IG93bmVySW5kZXg7CiAgICAgICAgT3duZXJDaGFuZ2VkKF9mcm9tLCBfdG8pOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIGlmIChpc093bmVyKF9vd25lcikpIHJldHVybjsKCiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZW9yZ2FuaXplT3duZXJzKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgbV9udW1Pd25lcnMrKzsKICAgICAgICBtX293bmVyc1ttX251bU93bmVyc10gPSB1aW50KF9vd25lcik7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyKV0gPSBtX251bU93bmVyczsKICAgICAgICBPd25lckFkZGVkKF9vd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQoX293bmVyKV07CiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwogICAgICAgIGlmIChtX3JlcXVpcmVkID4gbV9udW1Pd25lcnMgLSAxKSByZXR1cm47CgogICAgICAgIG1fb3duZXJzW293bmVySW5kZXhdID0gMDsKICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXIpXSA9IDA7CiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgcmVvcmdhbml6ZU93bmVycygpOyAvL21ha2Ugc3VyZSBtX251bU93bmVyIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3duZXJzIGFuZCBhbHdheXMgcG9pbnRzIHRvIHRoZSBvcHRpbWFsIGZyZWUgc2xvdAogICAgICAgIE93bmVyUmVtb3ZlZChfb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVJlcXVpcmVtZW50KHVpbnQgX25ld1JlcXVpcmVkKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIGlmIChfbmV3UmVxdWlyZWQgPiBtX251bU93bmVycykgcmV0dXJuOwogICAgICAgIG1fcmVxdWlyZWQgPSBfbmV3UmVxdWlyZWQ7CiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgUmVxdWlyZW1lbnRDaGFuZ2VkKF9uZXdSZXF1aXJlZCk7CiAgICB9CgogICAgLy8gR2V0cyBhbiBvd25lciBieSAwLWluZGV4ZWQgcG9zaXRpb24gKHVzaW5nIG51bU93bmVycyBhcyB0aGUgY291bnQpCiAgICBmdW5jdGlvbiBnZXRPd25lcih1aW50IG93bmVySW5kZXgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gYWRkcmVzcyhtX293bmVyc1tvd25lckluZGV4ICsgMV0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzT3duZXIoYWRkcmVzcyBfYWRkcikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBtX293bmVySW5kZXhbdWludChfYWRkcildID4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBoYXNDb25maXJtZWQoYnl0ZXMzMiBfb3BlcmF0aW9uLCBhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9vd25lcildOwoKICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSdyZSBhbiBvd25lcgogICAgICAgIGlmIChvd25lckluZGV4ID09IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgcmV0dXJuICEocGVuZGluZy5vd25lcnNEb25lICYgb3duZXJJbmRleEJpdCA9PSAwKTsKICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgZnVuY3Rpb24gY29uZmlybUFuZENoZWNrKGJ5dGVzMzIgX29wZXJhdGlvbikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIGRldGVybWluZSB3aGF0IGluZGV4IHRoZSBwcmVzZW50IHNlbmRlciBpczoKICAgICAgICB1aW50IG93bmVySW5kZXggPSBtX293bmVySW5kZXhbdWludChtc2cuc2VuZGVyKV07CiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXkncmUgYW4gb3duZXIKICAgICAgICBpZiAob3duZXJJbmRleCA9PSAwKSByZXR1cm47CgogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIC8vIGlmIHdlJ3JlIG5vdCB5ZXQgd29ya2luZyBvbiB0aGlzIG9wZXJhdGlvbiwgc3dpdGNoIG92ZXIgYW5kIHJlc2V0IHRoZSBjb25maXJtYXRpb24gc3RhdHVzLgogICAgICAgIGlmIChwZW5kaW5nLnlldE5lZWRlZCA9PSAwKSB7CiAgICAgICAgICAgIC8vIHJlc2V0IGNvdW50IG9mIGNvbmZpcm1hdGlvbnMgbmVlZGVkLgogICAgICAgICAgICBwZW5kaW5nLnlldE5lZWRlZCA9IG1fcmVxdWlyZWQ7CiAgICAgICAgICAgIC8vIHJlc2V0IHdoaWNoIG93bmVycyBoYXZlIGNvbmZpcm1lZCAobm9uZSkgLSBzZXQgb3VyIGJpdG1hcCB0byAwLgogICAgICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgPSAwOwogICAgICAgICAgICBwZW5kaW5nLmluZGV4ID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoKys7CiAgICAgICAgICAgIG1fcGVuZGluZ0luZGV4W3BlbmRpbmcuaW5kZXhdID0gX29wZXJhdGlvbjsKICAgICAgICB9CiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgLy8gbWFrZSBzdXJlIHdlICh0aGUgbWVzc2FnZSBzZW5kZXIpIGhhdmVuJ3QgY29uZmlybWVkIHRoaXMgb3BlcmF0aW9uIHByZXZpb3VzbHkuCiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPT0gMCkgewogICAgICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgICAgIC8vIG9rIC0gY2hlY2sgaWYgY291bnQgaXMgZW5vdWdoIHRvIGdvIGFoZWFkLgogICAgICAgICAgICBpZiAocGVuZGluZy55ZXROZWVkZWQgPD0gMSkgewogICAgICAgICAgICAgICAgLy8gZW5vdWdoIGNvbmZpcm1hdGlvbnM6IHJlc2V0IGFuZCBydW4gaW50ZXJpb3IuCiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nSW5kZXhbbV9wZW5kaW5nW19vcGVyYXRpb25dLmluZGV4XTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBtX3BlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIC8vIG5vdCBlbm91Z2g6IHJlY29yZCB0aGF0IHRoaXMgb3duZXIgaW4gcGFydGljdWxhciBjb25maXJtZWQuCiAgICAgICAgICAgICAgICBwZW5kaW5nLnlldE5lZWRlZC0tOwogICAgICAgICAgICAgICAgcGVuZGluZy5vd25lcnNEb25lIHw9IG93bmVySW5kZXhCaXQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVvcmdhbml6ZU93bmVycygpIHByaXZhdGUgewogICAgICAgIHVpbnQgZnJlZSA9IDE7CiAgICAgICAgd2hpbGUgKGZyZWUgPCBtX251bU93bmVycykKICAgICAgICB7CiAgICAgICAgICAgIHdoaWxlIChmcmVlIDwgbV9udW1Pd25lcnMgJiYgbV9vd25lcnNbZnJlZV0gIT0gMCkgZnJlZSsrOwogICAgICAgICAgICB3aGlsZSAobV9udW1Pd25lcnMgPiAxICYmIG1fb3duZXJzW21fbnVtT3duZXJzXSA9PSAwKSBtX251bU93bmVycy0tOwogICAgICAgICAgICBpZiAoZnJlZSA8IG1fbnVtT3duZXJzICYmIG1fb3duZXJzW21fbnVtT3duZXJzXSAhPSAwICYmIG1fb3duZXJzW2ZyZWVdID09IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG1fb3duZXJzW2ZyZWVdID0gbV9vd25lcnNbbV9udW1Pd25lcnNdOwogICAgICAgICAgICAgICAgbV9vd25lckluZGV4W21fb3duZXJzW2ZyZWVdXSA9IGZyZWU7CiAgICAgICAgICAgICAgICBtX293bmVyc1ttX251bU93bmVyc10gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNsZWFyUGVuZGluZygpIGludGVybmFsIHsKICAgICAgICB1aW50IGxlbmd0aCA9IG1fcGVuZGluZ0luZGV4Lmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkKICAgICAgICAgICAgaWYgKG1fcGVuZGluZ0luZGV4W2ldICE9IDApCiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nW21fcGVuZGluZ0luZGV4W2ldXTsKICAgICAgICBkZWxldGUgbV9wZW5kaW5nSW5kZXg7CiAgICB9CgogICAgLy8gRklFTERTCgogICAgLy8gdGhlIG51bWJlciBvZiBvd25lcnMgdGhhdCBtdXN0IGNvbmZpcm0gdGhlIHNhbWUgb3BlcmF0aW9uIGJlZm9yZSBpdCBpcyBydW4uCiAgICB1aW50IHB1YmxpYyBtX3JlcXVpcmVkOwogICAgLy8gcG9pbnRlciB1c2VkIHRvIGZpbmQgYSBmcmVlIHNsb3QgaW4gbV9vd25lcnMKICAgIHVpbnQgcHVibGljIG1fbnVtT3duZXJzOwoKICAgIC8vIGxpc3Qgb2Ygb3duZXJzCiAgICB1aW50WzI1Nl0gbV9vd25lcnM7CiAgICB1aW50IGNvbnN0YW50IGNfbWF4T3duZXJzID0gMjUwOwogICAgLy8gaW5kZXggb24gdGhlIGxpc3Qgb2Ygb3duZXJzIHRvIGFsbG93IHJldmVyc2UgbG9va3VwCiAgICBtYXBwaW5nKHVpbnQgPT4gdWludCkgbV9vd25lckluZGV4OwogICAgLy8gdGhlIG9uZ29pbmcgb3BlcmF0aW9ucy4KICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBQZW5kaW5nU3RhdGUpIG1fcGVuZGluZzsKICAgIGJ5dGVzMzJbXSBtX3BlbmRpbmdJbmRleDsKfQoKLy8gaW5oZXJpdGFibGUgInByb3BlcnR5IiBjb250cmFjdCB0aGF0IGVuYWJsZXMgbWV0aG9kcyB0byBiZSBwcm90ZWN0ZWQgYnkgcGxhY2luZyBhIGxpbmVhciBsaW1pdCAoc3BlY2lmaWFibGUpCi8vIG9uIGEgcGFydGljdWxhciByZXNvdXJjZSBwZXIgY2FsZW5kYXIgZGF5LiBpcyBtdWx0aW93bmVkIHRvIGFsbG93IHRoZSBsaW1pdCB0byBiZSBhbHRlcmVkLiByZXNvdXJjZSB0aGF0IG1ldGhvZAovLyB1c2VzIGlzIHNwZWNpZmllZCBpbiB0aGUgbW9kaWZpZXIuCmNvbnRyYWN0IGRheWxpbWl0IGlzIG11bHRpb3duZWQgewoKICAgIC8vIE1PRElGSUVSUwoKICAgIC8vIHNpbXBsZSBtb2RpZmllciBmb3IgZGFpbHkgbGltaXQuCiAgICBtb2RpZmllciBsaW1pdGVkRGFpbHkodWludCBfdmFsdWUpIHsKICAgICAgICBpZiAodW5kZXJMaW1pdChfdmFsdWUpKQogICAgICAgICAgICBfOwogICAgfQoKICAgIC8vIE1FVEhPRFMKCiAgICAvLyBjb25zdHJ1Y3RvciAtIHN0b3JlcyBpbml0aWFsIGRhaWx5IGxpbWl0IGFuZCByZWNvcmRzIHRoZSBwcmVzZW50IGRheSdzIGluZGV4LgogICAgZnVuY3Rpb24gZGF5bGltaXQodWludCBfbGltaXQpIHsKICAgICAgICBtX2RhaWx5TGltaXQgPSBfbGltaXQ7CiAgICAgICAgbV9sYXN0RGF5ID0gdG9kYXkoKTsKICAgIH0KICAgIC8vIChyZSlzZXRzIHRoZSBkYWlseSBsaW1pdC4gbmVlZHMgbWFueSBvZiB0aGUgb3duZXJzIHRvIGNvbmZpcm0uIGRvZXNuJ3QgYWx0ZXIgdGhlIGFtb3VudCBhbHJlYWR5IHNwZW50IHRvZGF5LgogICAgZnVuY3Rpb24gc2V0RGFpbHlMaW1pdCh1aW50IF9uZXdMaW1pdCkgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpIGV4dGVybmFsIHsKICAgICAgICBtX2RhaWx5TGltaXQgPSBfbmV3TGltaXQ7CiAgICB9CiAgICAvLyByZXNldHMgdGhlIGFtb3VudCBhbHJlYWR5IHNwZW50IHRvZGF5LiBuZWVkcyBtYW55IG9mIHRoZSBvd25lcnMgdG8gY29uZmlybS4KICAgIGZ1bmN0aW9uIHJlc2V0U3BlbnRUb2RheSgpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgbV9zcGVudFRvZGF5ID0gMDsKICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgLy8gY2hlY2tzIHRvIHNlZSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBgX3ZhbHVlYCBsZWZ0IGZyb20gdGhlIGRhaWx5IGxpbWl0IHRvZGF5LiBpZiB0aGVyZSBpcywgc3VidHJhY3RzIGl0IGFuZAogICAgLy8gcmV0dXJucyB0cnVlLiBvdGhlcndpc2UganVzdCByZXR1cm5zIGZhbHNlLgogICAgZnVuY3Rpb24gdW5kZXJMaW1pdCh1aW50IF92YWx1ZSkgaW50ZXJuYWwgb25seW93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyByZXNldCB0aGUgc3BlbmQgbGltaXQgaWYgd2UncmUgb24gYSBkaWZmZXJlbnQgZGF5IHRvIGxhc3QgdGltZS4KICAgICAgICBpZiAodG9kYXkoKSA+IG1fbGFzdERheSkgewogICAgICAgICAgICBtX3NwZW50VG9kYXkgPSAwOwogICAgICAgICAgICBtX2xhc3REYXkgPSB0b2RheSgpOwogICAgICAgIH0KICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBlbm91Z2ggbGVmdCAtIGlmIHNvLCBzdWJ0cmFjdCBhbmQgcmV0dXJuIHRydWUuCiAgICAgICAgLy8gb3ZlcmZsb3cgcHJvdGVjdGlvbiAgICAgICAgICAgICAgICAgICAgLy8gZGFpbHlMaW1pdCBjaGVjawogICAgICAgIGlmIChtX3NwZW50VG9kYXkgKyBfdmFsdWUgPj0gbV9zcGVudFRvZGF5ICYmIG1fc3BlbnRUb2RheSArIF92YWx1ZSA8PSBtX2RhaWx5TGltaXQpIHsKICAgICAgICAgICAgbV9zcGVudFRvZGF5ICs9IF92YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIC8vIGRldGVybWluZXMgdG9kYXkncyBpbmRleC4KICAgIGZ1bmN0aW9uIHRvZGF5KCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7IHJldHVybiBub3cgLyAxIGRheXM7IH0KCiAgICAvLyBGSUVMRFMKCiAgICB1aW50IHB1YmxpYyBtX2RhaWx5TGltaXQ7CiAgICB1aW50IHB1YmxpYyBtX3NwZW50VG9kYXk7CiAgICB1aW50IHB1YmxpYyBtX2xhc3REYXk7Cn0KCi8vIGludGVyZmFjZSBjb250cmFjdCBmb3IgbXVsdGlzaWcgcHJveHkgY29udHJhY3RzOyBzZWUgYmVsb3cgZm9yIGRvY3MuCmNvbnRyYWN0IG11bHRpc2lnIHsKCiAgICAvLyBFVkVOVFMKCiAgICAvLyBsb2dnZWQgZXZlbnRzOgogICAgLy8gRnVuZHMgaGFzIGFycml2ZWQgaW50byB0aGUgd2FsbGV0IChyZWNvcmQgaG93IG11Y2gpLgogICAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIF9mcm9tLCB1aW50IHZhbHVlKTsKICAgIC8vIFNpbmdsZSB0cmFuc2FjdGlvbiBnb2luZyBvdXQgb2YgdGhlIHdhbGxldCAocmVjb3JkIHdobyBzaWduZWQgZm9yIGl0LCBob3cgbXVjaCwgYW5kIHRvIHdob20gaXQncyBnb2luZykuCiAgICBldmVudCBTaW5nbGVUcmFuc2FjdChhZGRyZXNzIG93bmVyLCB1aW50IHZhbHVlLCBhZGRyZXNzIHRvLCBieXRlcyBkYXRhKTsKICAgIC8vIE11bHRpLXNpZyB0cmFuc2FjdGlvbiBnb2luZyBvdXQgb2YgdGhlIHdhbGxldCAocmVjb3JkIHdobyBzaWduZWQgZm9yIGl0IGxhc3QsIHRoZSBvcGVyYXRpb24gaGFzaCwgaG93IG11Y2gsIGFuZCB0byB3aG9tIGl0J3MgZ29pbmcpLgogICAgZXZlbnQgTXVsdGlUcmFuc2FjdChhZGRyZXNzIG93bmVyLCBieXRlczMyIG9wZXJhdGlvbiwgdWludCB2YWx1ZSwgYWRkcmVzcyB0bywgYnl0ZXMgZGF0YSk7CiAgICAvLyBDb25maXJtYXRpb24gc3RpbGwgbmVlZGVkIGZvciBhIHRyYW5zYWN0aW9uLgogICAgZXZlbnQgQ29uZmlybWF0aW9uTmVlZGVkKGJ5dGVzMzIgb3BlcmF0aW9uLCBhZGRyZXNzIGluaXRpYXRvciwgdWludCB2YWx1ZSwgYWRkcmVzcyB0bywgYnl0ZXMgZGF0YSk7CgogICAgLy8gRlVOQ1RJT05TCgogICAgLy8gVE9ETzogZG9jdW1lbnQKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIGV4ZWN1dGUoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgZXh0ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMik7CiAgICBmdW5jdGlvbiBjb25maXJtKGJ5dGVzMzIgX2gpIHJldHVybnMgKGJvb2wpOwp9CgovLyB1c2FnZToKLy8gYnl0ZXMzMiBoID0gV2FsbGV0KHcpLmZyb20ob25lT3duZXIpLmV4ZWN1dGUodG8sIHZhbHVlLCBkYXRhKTsKLy8gV2FsbGV0KHcpLmZyb20oYW5vdGhlck93bmVyKS5jb25maXJtKGgpOwpjb250cmFjdCBXYWxsZXQgaXMgbXVsdGlzaWcsIG11bHRpb3duZWQsIGRheWxpbWl0IHsKCiAgICAvLyBUWVBFUwoKICAgIC8vIFRyYW5zYWN0aW9uIHN0cnVjdHVyZSB0byByZW1lbWJlciBkZXRhaWxzIG9mIHRyYW5zYWN0aW9uIGxlc3QgaXQgbmVlZCBiZSBzYXZlZCBmb3IgYSBsYXRlciBjYWxsLgogICAgc3RydWN0IFRyYW5zYWN0aW9uIHsKICAgICAgICBhZGRyZXNzIHRvOwogICAgICAgIHVpbnQgdmFsdWU7CiAgICAgICAgYnl0ZXMgZGF0YTsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgLSBqdXN0IHBhc3Mgb24gdGhlIG93bmVyIGFycmF5IHRvIHRoZSBtdWx0aW93bmVkIGFuZAogICAgLy8gdGhlIGxpbWl0IHRvIGRheWxpbWl0CiAgICBmdW5jdGlvbiBXYWxsZXQoYWRkcmVzc1tdIF9vd25lcnMsIHVpbnQgX3JlcXVpcmVkLCB1aW50IF9kYXlsaW1pdCkKICAgICAgICAgICAgbXVsdGlvd25lZChfb3duZXJzLCBfcmVxdWlyZWQpIGRheWxpbWl0KF9kYXlsaW1pdCkgewogICAgfQoKICAgIC8vIGtpbGxzIHRoZSBjb250cmFjdCBzZW5kaW5nIGV2ZXJ5dGhpbmcgdG8gYF90b2AuCiAgICBmdW5jdGlvbiBraWxsKGFkZHJlc3MgX3RvKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIHN1aWNpZGUoX3RvKTsKICAgIH0KCiAgICAvLyBnZXRzIGNhbGxlZCB3aGVuIG5vIG90aGVyIGZ1bmN0aW9uIG1hdGNoZXMKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgLy8ganVzdCBiZWluZyBzZW50IHNvbWUgY2FzaD8KICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIC8vIE91dHNpZGUtdmlzaWJsZSB0cmFuc2FjdCBlbnRyeSBwb2ludC4gRXhlY3V0ZXMgdHJhbnNhY3Rpb24gaW1tZWRpYXRlbHkgaWYgYmVsb3cgZGFpbHkgc3BlbmQgbGltaXQuCiAgICAvLyBJZiBub3QsIGdvZXMgaW50byBtdWx0aXNpZyBwcm9jZXNzLiBXZSBwcm92aWRlIGEgaGFzaCBvbiByZXR1cm4gdG8gYWxsb3cgdGhlIHNlbmRlciB0byBwcm92aWRlCiAgICAvLyBzaG9ydGN1dHMgZm9yIHRoZSBvdGhlciBjb25maXJtYXRpb25zIChhbGxvd2luZyB0aGVtIHRvIGF2b2lkIHJlcGxpY2F0aW5nIHRoZSBfdG8sIF92YWx1ZQogICAgLy8gYW5kIF9kYXRhIGFyZ3VtZW50cykuIFRoZXkgc3RpbGwgZ2V0IHRoZSBvcHRpb24gb2YgdXNpbmcgdGhlbSBpZiB0aGV5IHdhbnQsIGFueXdheXMuCiAgICBmdW5jdGlvbiBleGVjdXRlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIGV4dGVybmFsIG9ubHlvd25lciByZXR1cm5zIChieXRlczMyIF9yKSB7CiAgICAgICAgLy8gZmlyc3QsIHRha2UgdGhlIG9wcG9ydHVuaXR5IHRvIGNoZWNrIHRoYXQgd2UncmUgdW5kZXIgdGhlIGRhaWx5IGxpbWl0LgogICAgICAgIGlmICh1bmRlckxpbWl0KF92YWx1ZSkpIHsKICAgICAgICAgICAgU2luZ2xlVHJhbnNhY3QobXNnLnNlbmRlciwgX3ZhbHVlLCBfdG8sIF9kYXRhKTsKICAgICAgICAgICAgLy8geWVzIC0ganVzdCBleGVjdXRlIHRoZSBjYWxsLgogICAgICAgICAgICBfdG8uY2FsbC52YWx1ZShfdmFsdWUpKF9kYXRhKTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIC8vIGRldGVybWluZSBvdXIgb3BlcmF0aW9uIGhhc2guCiAgICAgICAgX3IgPSBzaGEzKG1zZy5kYXRhLCBibG9jay5udW1iZXIpOwogICAgICAgIGlmICghY29uZmlybShfcikgJiYgbV90eHNbX3JdLnRvID09IDApIHsKICAgICAgICAgICAgbV90eHNbX3JdLnRvID0gX3RvOwogICAgICAgICAgICBtX3R4c1tfcl0udmFsdWUgPSBfdmFsdWU7CiAgICAgICAgICAgIG1fdHhzW19yXS5kYXRhID0gX2RhdGE7CiAgICAgICAgICAgIENvbmZpcm1hdGlvbk5lZWRlZChfciwgbXNnLnNlbmRlciwgX3ZhbHVlLCBfdG8sIF9kYXRhKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gY29uZmlybSBhIHRyYW5zYWN0aW9uIHRocm91Z2gganVzdCB0aGUgaGFzaC4gd2UgdXNlIHRoZSBwcmV2aW91cyB0cmFuc2FjdGlvbnMgbWFwLCBtX3R4cywgaW4gb3JkZXIKICAgIC8vIHRvIGRldGVybWluZSB0aGUgYm9keSBvZiB0aGUgdHJhbnNhY3Rpb24gZnJvbSB0aGUgaGFzaCBwcm92aWRlZC4KICAgIGZ1bmN0aW9uIGNvbmZpcm0oYnl0ZXMzMiBfaCkgb25seW1hbnlvd25lcnMoX2gpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAobV90eHNbX2hdLnRvICE9IDApIHsKICAgICAgICAgICAgbV90eHNbX2hdLnRvLmNhbGwudmFsdWUobV90eHNbX2hdLnZhbHVlKShtX3R4c1tfaF0uZGF0YSk7CiAgICAgICAgICAgIE11bHRpVHJhbnNhY3QobXNnLnNlbmRlciwgX2gsIG1fdHhzW19oXS52YWx1ZSwgbV90eHNbX2hdLnRvLCBtX3R4c1tfaF0uZGF0YSk7CiAgICAgICAgICAgIGRlbGV0ZSBtX3R4c1tfaF07CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgZnVuY3Rpb24gY2xlYXJQZW5kaW5nKCkgaW50ZXJuYWwgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKQogICAgICAgICAgICBkZWxldGUgbV90eHNbbV9wZW5kaW5nSW5kZXhbaV1dOwogICAgICAgIHN1cGVyLmNsZWFyUGVuZGluZygpOwogICAgfQoKICAgIC8vIEZJRUxEUwoKICAgIC8vIHBlbmRpbmcgdHJhbnNhY3Rpb25zIHdlIGhhdmUgYXQgcHJlc2VudC4KICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gVHJhbnNhY3Rpb24pIG1fdHhzOwp9'.
	

]
