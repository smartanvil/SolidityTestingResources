Class {
	#name : #SRTa6c9e4d4b34d432d4aea793fa8c380b9940a5279,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6c9e4d4b34d432d4aea793fa8c380b9940a5279 >> base64 [
	^ ''.
	

]
