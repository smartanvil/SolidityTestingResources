Class {
	#name : #SRT838cda4a4cc873fff10f4d6373ada6636517fa31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT838cda4a4cc873fff10f4d6373ada6636517fa31 >> base64 [
	^ ''.
	

]
