Class {
	#name : #SRTae80e3c15a64a5eabdc805b764f90afccf9d3964,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTae80e3c15a64a5eabdc805b764f90afccf9d3964 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJhY3RPd25lcjsKICAgIAogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjb250cmFjdE93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgYWRkcmVzcyBvbGRPd25lciA9IGNvbnRyYWN0T3duZXI7CiAgICAgICAgY29udHJhY3RPd25lciA9IG5ld093bmVyOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVyKG9sZE93bmVyLG5ld093bmVyKTsKICAgIH0KfQoKY29udHJhY3QgQ2xhaW1hYmxlIGlzIE93bmFibGUgewoKICAgIGFkZHJlc3MgcHVibGljIHBlbmRpbmdPd25lcjsKCiAgICBldmVudCBQZW5kaW5nT3duZXJzaGlwVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pOwoKICAgIG1vZGlmaWVyIG9ubHlQZW5kaW5nT3duZXIoKXsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgcGVuZGluZ093bmVyID0gbmV3T3duZXI7CiAgICAgICAgUGVuZGluZ093bmVyc2hpcFRyYW5zZmVyKGNvbnRyYWN0T3duZXIscGVuZGluZ093bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbU93bmVyc2hpcCgpIG9ubHlQZW5kaW5nT3duZXIgewogICAgICAgIGFkZHJlc3Mgb2xkT3duZXIgPSBjb250cmFjdE93bmVyOwogICAgICAgIGNvbnRyYWN0T3duZXIgPSBwZW5kaW5nT3duZXI7CiAgICAgICAgcGVuZGluZ093bmVyID0gMHgwOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVyKG9sZE93bmVyLGNvbnRyYWN0T3duZXIpOwogICAgfQoKfQoKY29udHJhY3QgRVJDMjBCYXNpYyB7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KSByZXR1cm5zIChib29sIHJlc3VsdCk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KTsKfQoKY29udHJhY3QgVHJ1ZVZlZ2FuQ29pbiBpcyBFUkMyMEJhc2ljIHsKCiAgICBzdHJpbmcgcHVibGljIHRva2VuTmFtZSA9ICJUcnVlIFZlZ2FuIENvaW4iOyAgCiAgICBzdHJpbmcgcHVibGljIHRva2VuU3ltYm9sID0gIlRWQyI7IAoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAgIGZ1bmN0aW9uIFRydWVWZWdhbkNvaW4oKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSA1NSAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7IC8vIDU1IG1pbGxpb25zCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG90YWxTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBhbW91bnQpIHJldHVybnMgKGJvb2wgcmVzdWx0KSB7CiAgICAgICAgcmVxdWlyZShhbW91bnQgPiAwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gYW1vdW50OwogICAgICAgIGJhbGFuY2VzW190b10gKz0gYW1vdW50OwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgVHJ1ZVZlZ2FuQ29pblByZXNhbGUgaXMgQ2xhaW1hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGFkZHJlc3MgcHVibGljIHR2Y0V0aEZ1bmQgPSAweGVEODk5MjJEMUZlOWU1YWQ5Qjk5N0VmMzE1YTRBMTRiYTdiMDkwQ0Q7CgogICAgVHJ1ZVZlZ2FuQ29pbiBwdWJsaWMgdHZjID0gVHJ1ZVZlZ2FuQ29pbigweEM2NDVBRUFBYTA3M0Q3MzI1NGE0OTE1NkU2OUIzRTE2YmIzQTI1ZTQpOwoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsVG9rZW5TdXBwbHkgPSA1NSAqIDEwKio2ICogMTAqKnR2Yy5kZWNpbWFscygpOyAKICAgIHVpbnQyNTYgcHVibGljIGN1cnJlbnRUb2tlblN1cHBseSA9IHRvdGFsVG9rZW5TdXBwbHk7CgogICAgdWludDI1NiBwdWJsaWMgdG9rZW5FeGNoYW5nZVJhdGUgPSAxMzAwOyAvLyB0b2tlbiBwZXIgZXRoCgogICAgdWludDI1NiBwdWJsaWMgc2FsZVN0YXJ0VW5peFRpbWUgPSAxNTAzMTAwNzk5OyAvLyBGcmlkYXksIDE4LUF1Zy0xNyAyMzo1OTo1OSBVVEMKICAgIHVpbnQyNTYgcHVibGljIHNhbGVFbmRVbml4VGltZSA9IDE1MDY4MTYwMDE7IC8vIFN1bmRheSwgMDEtT2N0LTE3IDAwOjAwOjAxIFVUQwoKICAgIGJvb2wgcHVibGljIHNhbGVJc0Nsb3NlZCA9IGZhbHNlOwoKICAgIGV2ZW50IFByZXNhbGVFbnRyeShhZGRyZXNzIGJ1eWVyLCB1aW50MjU2IHRva2Vucyk7CiAgICBldmVudCBQcmVzYWxlQ2xvc2VkKHVpbnQyNTYgc29sZFRva2VucywgdWludDI1NiBhbW91bnRSYWlzZWQpOwoKICAgIGZ1bmN0aW9uIFRydWVWZWdhbkNvaW5QcmVzYWxlKCkgewogICAgICAgIGNvbnRyYWN0T3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGFzc2VydChibG9jay50aW1lc3RhbXAgPj0gc2FsZVN0YXJ0VW5peFRpbWUpOwogICAgICAgIGFzc2VydChibG9jay50aW1lc3RhbXAgPCBzYWxlRW5kVW5peFRpbWUpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZSghc2FsZUlzQ2xvc2VkKTsKCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBtc2cudmFsdWUubXVsKHRva2VuRXhjaGFuZ2VSYXRlKTsKCiAgICAgICAgYXNzZXJ0KGN1cnJlbnRUb2tlblN1cHBseSAtIHRva2VucyA+PSAwKTsKICAgICAgICBjdXJyZW50VG9rZW5TdXBwbHkgLT0gdG9rZW5zOwoKICAgICAgICBpZiAoIXR2Yy50cmFuc2Zlcihtc2cuc2VuZGVyLHRva2VucykpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICBQcmVzYWxlRW50cnkobXNnLnNlbmRlcix0b2tlbnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVuZFNhbGUoKSBvbmx5T3duZXIgewogICAgICAgIGFzc2VydChibG9jay50aW1lc3RhbXAgPiBzYWxlRW5kVW5peFRpbWUgfHwgY3VycmVudFRva2VuU3VwcGx5ID09IDApOwogICAgICAgIGFzc2VydCghc2FsZUlzQ2xvc2VkKTsKCiAgICAgICAgc2FsZUlzQ2xvc2VkID0gdHJ1ZTsKICAgICAgICB1aW50MjU2IGFtb3VudFJhaXNlZCA9IHRoaXMuYmFsYW5jZTsKICAgICAgICB1aW50MjU2IHRva2VuU29sZCA9IHRvdGFsVG9rZW5TdXBwbHkgLSBjdXJyZW50VG9rZW5TdXBwbHk7CgogICAgICAgIGlmICghdHZjRXRoRnVuZC5zZW5kKGFtb3VudFJhaXNlZCkpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIFByZXNhbGVDbG9zZWQodG9rZW5Tb2xkLCBhbW91bnRSYWlzZWQpOwogICAgfQoKCiAgICBmdW5jdGlvbiBjbGFpbVVuc29sZENvaW5zKCkgb25seU93bmVyIHsKICAgICAgICBhc3NlcnQoYmxvY2sudGltZXN0YW1wID4gc2FsZUVuZFVuaXhUaW1lKTsKICAgICAgICBhc3NlcnQoc2FsZUlzQ2xvc2VkKTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGN1cnJlbnRUb2tlblN1cHBseTsKICAgICAgICBjdXJyZW50VG9rZW5TdXBwbHkgPSAwOwogICAgICAgIC8vIHNlbmQgZXZlbnR1YWxseSB1bnNvbGQgdG9rZW5zIHRvIGNvbnRyYWN0IG93bmVyCiAgICAgICAgaWYgKCF0dmMudHJhbnNmZXIoY29udHJhY3RPd25lcixhbW91bnQpKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgIH0KICAgIAp9'.
	

]
