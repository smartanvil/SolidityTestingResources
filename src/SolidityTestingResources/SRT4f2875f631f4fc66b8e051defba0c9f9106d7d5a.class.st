Class {
	#name : #SRT4f2875f631f4fc66b8e051defba0c9f9106d7d5a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f2875f631f4fc66b8e051defba0c9f9106d7d5a >> base64 [
	^ 'Ly8gVGhpcyBtdWx0aXNpZ25hdHVyZSB3YWxsZXQgaXMgYmFzZWQgb24gdGhlIHdhbGxldCBjb250cmFjdCBieSBHYXYgV29vZC4KLy8gT25seSBvbmUgc2luZ2xlIGNoYW5nZSB3YXMgbWFkZTogVGhlIGNvbnRyYWN0IGNyZWF0b3IgaXMgbm90IGF1dG9tYXRpY2FsbHkgb25lIG9mIHRoZSB3YWxsZXQgb3duZXJzLgoKLy9zb2wgV2FsbGV0Ci8vIE11bHRpLXNpZywgZGFpbHktbGltaXRlZCBhY2NvdW50IHByb3h5L3dhbGxldC4KLy8gQGF1dGhvcnM6Ci8vIEdhdiBXb29kIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMjI0NTYyNDc1NjRhNDY0NzU0MGM0MTRkNGYiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgovLyBpbmhlcml0YWJsZSAicHJvcGVydHkiIGNvbnRyYWN0IHRoYXQgZW5hYmxlcyBtZXRob2RzIHRvIGJlIHByb3RlY3RlZCBieSByZXF1aXJpbmcgdGhlIGFjcXVpZXNjZW5jZSBvZiBlaXRoZXIgYQovLyBzaW5nbGUsIG9yLCBjcnVjaWFsbHksIGVhY2ggb2YgYSBudW1iZXIgb2YsIGRlc2lnbmF0ZWQgb3duZXJzLgovLyB1c2FnZToKLy8gdXNlIG1vZGlmaWVycyBvbmx5b3duZXIgKGp1c3Qgb3duIG93bmVkKSBvciBvbmx5bWFueW93bmVycyhoYXNoKSwgd2hlcmVieSB0aGUgc2FtZSBoYXNoIG11c3QgYmUgcHJvdmlkZWQgYnkKLy8gc29tZSBudW1iZXIgKHNwZWNpZmllZCBpbiBjb25zdHJ1Y3Rvcikgb2YgdGhlIHNldCBvZiBvd25lcnMgKHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3IsIG1vZGlmaWFibGUpIGJlZm9yZSB0aGUKLy8gaW50ZXJpb3IgaXMgZXhlY3V0ZWQuCnByYWdtYSBzb2xpZGl0eSBeMC40LjY7Cgpjb250cmFjdCBtdWx0aXNpZyB7CiAgICAvLyBFVkVOVFMKCiAgICAvLyB0aGlzIGNvbnRyYWN0IGNhbiBhY2NlcHQgYSBjb25maXJtYXRpb24sIGluIHdoaWNoIGNhc2UKICAgIC8vIHdlIHJlY29yZCBvd25lciBhbmQgb3BlcmF0aW9uIChoYXNoKSBhbG9uZ3NpZGUgaXQuCiAgICBldmVudCBDb25maXJtYXRpb24oYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24pOwogICAgZXZlbnQgUmV2b2tlKGFkZHJlc3Mgb3duZXIsIGJ5dGVzMzIgb3BlcmF0aW9uKTsKCiAgICAvLyBzb21lIG90aGVycyBhcmUgaW4gdGhlIGNhc2Ugb2YgYW4gb3duZXIgY2hhbmdpbmcuCiAgICBldmVudCBPd25lckNoYW5nZWQoYWRkcmVzcyBvbGRPd25lciwgYWRkcmVzcyBuZXdPd25lcik7CiAgICBldmVudCBPd25lckFkZGVkKGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJSZW1vdmVkKGFkZHJlc3Mgb2xkT3duZXIpOwoKICAgIC8vIHRoZSBsYXN0IG9uZSBpcyBlbWl0dGVkIGlmIHRoZSByZXF1aXJlZCBzaWduYXR1cmVzIGNoYW5nZQogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2VkKHVpbnQgbmV3UmVxdWlyZW1lbnQpOwoKICAgIC8vIEZ1bmRzIGhhcyBhcnJpdmVkIGludG8gdGhlIHdhbGxldCAocmVjb3JkIGhvdyBtdWNoKS4KICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBfZnJvbSwgdWludCB2YWx1ZSk7CiAgICAvLyBTaW5nbGUgdHJhbnNhY3Rpb24gZ29pbmcgb3V0IG9mIHRoZSB3YWxsZXQgKHJlY29yZCB3aG8gc2lnbmVkIGZvciBpdCwgaG93IG11Y2gsIGFuZCB0byB3aG9tIGl0J3MgZ29pbmcpLgogICAgZXZlbnQgU2luZ2xlVHJhbnNhY3QoYWRkcmVzcyBvd25lciwgdWludCB2YWx1ZSwgYWRkcmVzcyB0bywgYnl0ZXMgZGF0YSk7CiAgICAvLyBNdWx0aS1zaWcgdHJhbnNhY3Rpb24gZ29pbmcgb3V0IG9mIHRoZSB3YWxsZXQgKHJlY29yZCB3aG8gc2lnbmVkIGZvciBpdCBsYXN0LCB0aGUgb3BlcmF0aW9uIGhhc2gsIGhvdyBtdWNoLCBhbmQgdG8gd2hvbSBpdCdzIGdvaW5nKS4KICAgIGV2ZW50IE11bHRpVHJhbnNhY3QoYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24sIHVpbnQgdmFsdWUsIGFkZHJlc3MgdG8sIGJ5dGVzIGRhdGEpOwogICAgLy8gQ29uZmlybWF0aW9uIHN0aWxsIG5lZWRlZCBmb3IgYSB0cmFuc2FjdGlvbi4KICAgIGV2ZW50IENvbmZpcm1hdGlvbk5lZWRlZChieXRlczMyIG9wZXJhdGlvbiwgYWRkcmVzcyBpbml0aWF0b3IsIHVpbnQgdmFsdWUsIGFkZHJlc3MgdG8sIGJ5dGVzIGRhdGEpOwp9Cgpjb250cmFjdCBtdWx0aXNpZ0FiaSBpcyBtdWx0aXNpZyB7CiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FkZHIpIHJldHVybnMgKGJvb2wpOwoKICAgIGZ1bmN0aW9uIGhhc0NvbmZpcm1lZChieXRlczMyIF9vcGVyYXRpb24sIGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zIChib29sKTsKCiAgICBmdW5jdGlvbiBjb25maXJtKGJ5dGVzMzIgX2gpIHJldHVybnMoYm9vbCk7CgogICAgLy8gKHJlKXNldHMgdGhlIGRhaWx5IGxpbWl0LiBuZWVkcyBtYW55IG9mIHRoZSBvd25lcnMgdG8gY29uZmlybS4gZG9lc24ndCBhbHRlciB0aGUgYW1vdW50IGFscmVhZHkgc3BlbnQgdG9kYXkuCiAgICBmdW5jdGlvbiBzZXREYWlseUxpbWl0KHVpbnQgX25ld0xpbWl0KTsKCiAgICBmdW5jdGlvbiBhZGRPd25lcihhZGRyZXNzIF9vd25lcik7CgogICAgZnVuY3Rpb24gcmVtb3ZlT3duZXIoYWRkcmVzcyBfb3duZXIpOwoKICAgIGZ1bmN0aW9uIGNoYW5nZVJlcXVpcmVtZW50KHVpbnQgX25ld1JlcXVpcmVkKTsKCiAgICAvLyBSZXZva2VzIGEgcHJpb3IgY29uZmlybWF0aW9uIG9mIHRoZSBnaXZlbiBvcGVyYXRpb24KICAgIGZ1bmN0aW9uIHJldm9rZShieXRlczMyIF9vcGVyYXRpb24pOwoKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvKTsKCiAgICBmdW5jdGlvbiBleGVjdXRlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHJldHVybnMoYm9vbCk7Cn0KCmNvbnRyYWN0IFdhbGxldExpYnJhcnkgaXMgbXVsdGlzaWcgewogICAgLy8gVFlQRVMKCiAgICAvLyBzdHJ1Y3QgZm9yIHRoZSBzdGF0dXMgb2YgYSBwZW5kaW5nIG9wZXJhdGlvbi4KICAgIHN0cnVjdCBQZW5kaW5nU3RhdGUgewogICAgICAgIHVpbnQgeWV0TmVlZGVkOwogICAgICAgIHVpbnQgb3duZXJzRG9uZTsKICAgICAgICB1aW50IGluZGV4OwogICAgfQoKICAgIC8vIFRyYW5zYWN0aW9uIHN0cnVjdHVyZSB0byByZW1lbWJlciBkZXRhaWxzIG9mIHRyYW5zYWN0aW9uIGxlc3QgaXQgbmVlZCBiZSBzYXZlZCBmb3IgYSBsYXRlciBjYWxsLgogICAgc3RydWN0IFRyYW5zYWN0aW9uIHsKICAgICAgICBhZGRyZXNzIHRvOwogICAgICAgIHVpbnQgdmFsdWU7CiAgICAgICAgYnl0ZXMgZGF0YTsKICAgIH0KCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgKioqKiogTVVMVEkgT1dORUQgU0VDVElPTiAqKioqCiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgIC8vIE1PRElGSUVSUwoKICAgIC8vIHNpbXBsZSBzaW5nbGUtc2lnIGZ1bmN0aW9uIG1vZGlmaWVyLgogICAgbW9kaWZpZXIgb25seW93bmVyIHsKICAgICAgICBpZiAoaXNPd25lcihtc2cuc2VuZGVyKSkKICAgICAgICAgICAgXzsKICAgIH0KICAgIC8vIG11bHRpLXNpZyBmdW5jdGlvbiBtb2RpZmllcjogdGhlIG9wZXJhdGlvbiBtdXN0IGhhdmUgYW4gaW50cmluc2ljIGhhc2ggaW4gb3JkZXIKICAgIC8vIHRoYXQgbGF0ZXIgYXR0ZW1wdHMgY2FuIGJlIHJlYWxpc2VkIGFzIHRoZSBzYW1lIHVuZGVybHlpbmcgb3BlcmF0aW9uIGFuZAogICAgLy8gdGh1cyBjb3VudCBhcyBjb25maXJtYXRpb25zLgogICAgbW9kaWZpZXIgb25seW1hbnlvd25lcnMoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgaWYgKGNvbmZpcm1BbmRDaGVjayhfb3BlcmF0aW9uKSkKICAgICAgICAgICAgXzsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgaXMgZ2l2ZW4gbnVtYmVyIG9mIHNpZ3MgcmVxdWlyZWQgdG8gZG8gcHJvdGVjdGVkICJvbmx5bWFueW93bmVycyIgdHJhbnNhY3Rpb25zCiAgICAvLyBhcyB3ZWxsIGFzIHRoZSBzZWxlY3Rpb24gb2YgYWRkcmVzc2VzIGNhcGFibGUgb2YgY29uZmlybWluZyB0aGVtLgogICAgLy8gY2hhbmdlIGZyb20gb3JpZ2luYWw6IG1zZy5zZW5kZXIgaXMgbm90IGF1dG9tYXRpY2FsbHkgb3duZXIKICAgIGZ1bmN0aW9uIGluaXRNdWx0aW93bmVkKGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9yZXF1aXJlZCkgewogICAgICAgIG1fbnVtT3duZXJzID0gX293bmVycy5sZW5ndGggOwogICAgICAgIG1fcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9vd25lcnMubGVuZ3RoOyArK2kpCiAgICAgICAgewogICAgICAgICAgICBtX293bmVyc1sxICsgaV0gPSB1aW50KF9vd25lcnNbaV0pOwogICAgICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXJzW2ldKV0gPSAxICsgaTsKICAgICAgICB9CiAgICB9CgogICAgLy8gUmV2b2tlcyBhIHByaW9yIGNvbmZpcm1hdGlvbiBvZiB0aGUgZ2l2ZW4gb3BlcmF0aW9uCiAgICBmdW5jdGlvbiByZXZva2UoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildOwogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGV5J3JlIGFuIG93bmVyCiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgdmFyIHBlbmRpbmcgPSBtX3BlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPiAwKSB7CiAgICAgICAgICAgIHBlbmRpbmcueWV0TmVlZGVkKys7CiAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSAtPSBvd25lckluZGV4Qml0OwogICAgICAgICAgICBSZXZva2UobXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFJlcGxhY2VzIGFuIG93bmVyIGBfZnJvbWAgd2l0aCBhbm90aGVyIGBfdG9gLgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSB7CiAgICAgICAgaWYgKGlzT3duZXIoX3RvKSkgcmV0dXJuOwogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9mcm9tKV07CiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwoKICAgICAgICBjbGVhclBlbmRpbmcoKTsKICAgICAgICBtX293bmVyc1tvd25lckluZGV4XSA9IHVpbnQoX3RvKTsKICAgICAgICBtX293bmVySW5kZXhbdWludChfZnJvbSldID0gMDsKICAgICAgICBtX293bmVySW5kZXhbdWludChfdG8pXSA9IG93bmVySW5kZXg7CiAgICAgICAgT3duZXJDaGFuZ2VkKF9mcm9tLCBfdG8pOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgewogICAgICAgIGlmIChpc093bmVyKF9vd25lcikpIHJldHVybjsKCiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZW9yZ2FuaXplT3duZXJzKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgbV9udW1Pd25lcnMrKzsKICAgICAgICBtX293bmVyc1ttX251bU93bmVyc10gPSB1aW50KF9vd25lcik7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyKV0gPSBtX251bU93bmVyczsKICAgICAgICBPd25lckFkZGVkKF9vd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQoX293bmVyKV07CiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwogICAgICAgIGlmIChtX3JlcXVpcmVkID4gbV9udW1Pd25lcnMgLSAxKSByZXR1cm47CgogICAgICAgIG1fb3duZXJzW293bmVySW5kZXhdID0gMDsKICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXIpXSA9IDA7CiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgcmVvcmdhbml6ZU93bmVycygpOyAvL21ha2Ugc3VyZSBtX251bU93bmVyIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3duZXJzIGFuZCBhbHdheXMgcG9pbnRzIHRvIHRoZSBvcHRpbWFsIGZyZWUgc2xvdAogICAgICAgIE93bmVyUmVtb3ZlZChfb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVJlcXVpcmVtZW50KHVpbnQgX25ld1JlcXVpcmVkKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgewogICAgICAgIGlmIChfbmV3UmVxdWlyZWQgPiBtX251bU93bmVycykgcmV0dXJuOwogICAgICAgIG1fcmVxdWlyZWQgPSBfbmV3UmVxdWlyZWQ7CiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgUmVxdWlyZW1lbnRDaGFuZ2VkKF9uZXdSZXF1aXJlZCk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPd25lcihhZGRyZXNzIF9hZGRyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG1fb3duZXJJbmRleFt1aW50KF9hZGRyKV0gPiAwOwogICAgfQoKCiAgICBmdW5jdGlvbiBoYXNDb25maXJtZWQoYnl0ZXMzMiBfb3BlcmF0aW9uLCBhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9vd25lcildOwoKICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSdyZSBhbiBvd25lcgogICAgICAgIGlmIChvd25lckluZGV4ID09IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgcmV0dXJuICEocGVuZGluZy5vd25lcnNEb25lICYgb3duZXJJbmRleEJpdCA9PSAwKTsKICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgZnVuY3Rpb24gY29uZmlybUFuZENoZWNrKGJ5dGVzMzIgX29wZXJhdGlvbikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIGRldGVybWluZSB3aGF0IGluZGV4IHRoZSBwcmVzZW50IHNlbmRlciBpczoKICAgICAgICB1aW50IG93bmVySW5kZXggPSBtX293bmVySW5kZXhbdWludChtc2cuc2VuZGVyKV07CiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXkncmUgYW4gb3duZXIKICAgICAgICBpZiAob3duZXJJbmRleCA9PSAwKSByZXR1cm47CgogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIC8vIGlmIHdlJ3JlIG5vdCB5ZXQgd29ya2luZyBvbiB0aGlzIG9wZXJhdGlvbiwgc3dpdGNoIG92ZXIgYW5kIHJlc2V0IHRoZSBjb25maXJtYXRpb24gc3RhdHVzLgogICAgICAgIGlmIChwZW5kaW5nLnlldE5lZWRlZCA9PSAwKSB7CiAgICAgICAgICAgIC8vIHJlc2V0IGNvdW50IG9mIGNvbmZpcm1hdGlvbnMgbmVlZGVkLgogICAgICAgICAgICBwZW5kaW5nLnlldE5lZWRlZCA9IG1fcmVxdWlyZWQ7CiAgICAgICAgICAgIC8vIHJlc2V0IHdoaWNoIG93bmVycyBoYXZlIGNvbmZpcm1lZCAobm9uZSkgLSBzZXQgb3VyIGJpdG1hcCB0byAwLgogICAgICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgPSAwOwogICAgICAgICAgICBwZW5kaW5nLmluZGV4ID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoKys7CiAgICAgICAgICAgIG1fcGVuZGluZ0luZGV4W3BlbmRpbmcuaW5kZXhdID0gX29wZXJhdGlvbjsKICAgICAgICB9CiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgLy8gbWFrZSBzdXJlIHdlICh0aGUgbWVzc2FnZSBzZW5kZXIpIGhhdmVuJ3QgY29uZmlybWVkIHRoaXMgb3BlcmF0aW9uIHByZXZpb3VzbHkuCiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPT0gMCkgewogICAgICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgICAgIC8vIG9rIC0gY2hlY2sgaWYgY291bnQgaXMgZW5vdWdoIHRvIGdvIGFoZWFkLgogICAgICAgICAgICBpZiAocGVuZGluZy55ZXROZWVkZWQgPD0gMSkgewogICAgICAgICAgICAgICAgLy8gZW5vdWdoIGNvbmZpcm1hdGlvbnM6IHJlc2V0IGFuZCBydW4gaW50ZXJpb3IuCiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nSW5kZXhbbV9wZW5kaW5nW19vcGVyYXRpb25dLmluZGV4XTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBtX3BlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIC8vIG5vdCBlbm91Z2g6IHJlY29yZCB0aGF0IHRoaXMgb3duZXIgaW4gcGFydGljdWxhciBjb25maXJtZWQuCiAgICAgICAgICAgICAgICBwZW5kaW5nLnlldE5lZWRlZC0tOwogICAgICAgICAgICAgICAgcGVuZGluZy5vd25lcnNEb25lIHw9IG93bmVySW5kZXhCaXQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVvcmdhbml6ZU93bmVycygpIHByaXZhdGUgewogICAgICAgIHVpbnQgZnJlZSA9IDE7CiAgICAgICAgd2hpbGUgKGZyZWUgPCBtX251bU93bmVycykKICAgICAgICB7CiAgICAgICAgICAgIHdoaWxlIChmcmVlIDwgbV9udW1Pd25lcnMgJiYgbV9vd25lcnNbZnJlZV0gIT0gMCkgZnJlZSsrOwogICAgICAgICAgICB3aGlsZSAobV9udW1Pd25lcnMgPiAxICYmIG1fb3duZXJzW21fbnVtT3duZXJzXSA9PSAwKSBtX251bU93bmVycy0tOwogICAgICAgICAgICBpZiAoZnJlZSA8IG1fbnVtT3duZXJzICYmIG1fb3duZXJzW21fbnVtT3duZXJzXSAhPSAwICYmIG1fb3duZXJzW2ZyZWVdID09IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG1fb3duZXJzW2ZyZWVdID0gbV9vd25lcnNbbV9udW1Pd25lcnNdOwogICAgICAgICAgICAgICAgbV9vd25lckluZGV4W21fb3duZXJzW2ZyZWVdXSA9IGZyZWU7CiAgICAgICAgICAgICAgICBtX293bmVyc1ttX251bU93bmVyc10gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNsZWFyUGVuZGluZygpIGludGVybmFsIHsKICAgICAgICB1aW50IGxlbmd0aCA9IG1fcGVuZGluZ0luZGV4Lmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkKICAgICAgICAgICAgaWYgKG1fcGVuZGluZ0luZGV4W2ldICE9IDApCiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nW21fcGVuZGluZ0luZGV4W2ldXTsKICAgICAgICBkZWxldGUgbV9wZW5kaW5nSW5kZXg7CiAgICB9CgoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAqKioqKiogREFZIExJTUlUIFNFQ1RJT04gKioqKioKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgLy8gTU9ESUZJRVJTCgogICAgLy8gc2ltcGxlIG1vZGlmaWVyIGZvciBkYWlseSBsaW1pdC4KICAgIG1vZGlmaWVyIGxpbWl0ZWREYWlseSh1aW50IF92YWx1ZSkgewogICAgICAgIGlmICh1bmRlckxpbWl0KF92YWx1ZSkpCiAgICAgICAgICAgIF87CiAgICB9CgogICAgLy8gTUVUSE9EUwoKICAgIC8vIGNvbnN0cnVjdG9yIC0gc3RvcmVzIGluaXRpYWwgZGFpbHkgbGltaXQgYW5kIHJlY29yZHMgdGhlIHByZXNlbnQgZGF5J3MgaW5kZXguCiAgICBmdW5jdGlvbiBpbml0RGF5bGltaXQodWludCBfbGltaXQpIHsKICAgICAgICBtX2RhaWx5TGltaXQgPSBfbGltaXQ7CiAgICAgICAgbV9sYXN0RGF5ID0gdG9kYXkoKTsKICAgIH0KICAgIC8vIChyZSlzZXRzIHRoZSBkYWlseSBsaW1pdC4gbmVlZHMgbWFueSBvZiB0aGUgb3duZXJzIHRvIGNvbmZpcm0uIGRvZXNuJ3QgYWx0ZXIgdGhlIGFtb3VudCBhbHJlYWR5IHNwZW50IHRvZGF5LgogICAgZnVuY3Rpb24gc2V0RGFpbHlMaW1pdCh1aW50IF9uZXdMaW1pdCkgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpIHsKICAgICAgICBtX2RhaWx5TGltaXQgPSBfbmV3TGltaXQ7CiAgICB9CiAgICAvLyByZXNldHMgdGhlIGFtb3VudCBhbHJlYWR5IHNwZW50IHRvZGF5LiBuZWVkcyBtYW55IG9mIHRoZSBvd25lcnMgdG8gY29uZmlybS4KICAgIGZ1bmN0aW9uIHJlc2V0U3BlbnRUb2RheSgpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSB7CiAgICAgICAgbV9zcGVudFRvZGF5ID0gMDsKICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgLy8gY2hlY2tzIHRvIHNlZSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBgX3ZhbHVlYCBsZWZ0IGZyb20gdGhlIGRhaWx5IGxpbWl0IHRvZGF5LiBpZiB0aGVyZSBpcywgc3VidHJhY3RzIGl0IGFuZAogICAgLy8gcmV0dXJucyB0cnVlLiBvdGhlcndpc2UganVzdCByZXR1cm5zIGZhbHNlLgogICAgZnVuY3Rpb24gdW5kZXJMaW1pdCh1aW50IF92YWx1ZSkgaW50ZXJuYWwgb25seW93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyByZXNldCB0aGUgc3BlbmQgbGltaXQgaWYgd2UncmUgb24gYSBkaWZmZXJlbnQgZGF5IHRvIGxhc3QgdGltZS4KICAgICAgICBpZiAodG9kYXkoKSA+IG1fbGFzdERheSkgewogICAgICAgICAgICBtX3NwZW50VG9kYXkgPSAwOwogICAgICAgICAgICBtX2xhc3REYXkgPSB0b2RheSgpOwogICAgICAgIH0KICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBlbm91Z2ggbGVmdCAtIGlmIHNvLCBzdWJ0cmFjdCBhbmQgcmV0dXJuIHRydWUuCiAgICAgICAgLy8gb3ZlcmZsb3cgcHJvdGVjdGlvbiAgICAgICAgICAgICAgICAgICAgLy8gZGFpbHlMaW1pdCBjaGVjawogICAgICAgIGlmIChtX3NwZW50VG9kYXkgKyBfdmFsdWUgPj0gbV9zcGVudFRvZGF5ICYmIG1fc3BlbnRUb2RheSArIF92YWx1ZSA8PSBtX2RhaWx5TGltaXQpIHsKICAgICAgICAgICAgbV9zcGVudFRvZGF5ICs9IF92YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBkZXRlcm1pbmVzIHRvZGF5J3MgaW5kZXguCiAgICBmdW5jdGlvbiB0b2RheSgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludCkgeyByZXR1cm4gbm93IC8gMSBkYXlzOyB9CgoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAqKioqKioqKiogV0FMTEVUIFNFQ1RJT04gKioqKioKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgLy8gTUVUSE9EUwoKICAgIC8vIGNvbnN0cnVjdG9yIC0ganVzdCBwYXNzIG9uIHRoZSBvd25lciBhcnJheSB0byB0aGUgbXVsdGlvd25lZCBhbmQKICAgIC8vIHRoZSBsaW1pdCB0byBkYXlsaW1pdAogICAgZnVuY3Rpb24gaW5pdFdhbGxldChhZGRyZXNzW10gX293bmVycywgdWludCBfcmVxdWlyZWQsIHVpbnQgX2RheWxpbWl0KSB7CiAgICAgICAgaW5pdE11bHRpb3duZWQoX293bmVycywgX3JlcXVpcmVkKTsKICAgICAgICBpbml0RGF5bGltaXQoX2RheWxpbWl0KSA7CiAgICB9CgogICAgLy8ga2lsbHMgdGhlIGNvbnRyYWN0IHNlbmRpbmcgZXZlcnl0aGluZyB0byBgX3RvYC4KICAgIGZ1bmN0aW9uIGtpbGwoYWRkcmVzcyBfdG8pIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSB7CiAgICAgICAgc3VpY2lkZShfdG8pOwogICAgfQoKICAgIC8vIE91dHNpZGUtdmlzaWJsZSB0cmFuc2FjdCBlbnRyeSBwb2ludC4gRXhlY3V0ZXMgdHJhbnNhY3Rpb24gaW1tZWRpYXRlbHkgaWYgYmVsb3cgZGFpbHkgc3BlbmQgbGltaXQuCiAgICAvLyBJZiBub3QsIGdvZXMgaW50byBtdWx0aXNpZyBwcm9jZXNzLiBXZSBwcm92aWRlIGEgaGFzaCBvbiByZXR1cm4gdG8gYWxsb3cgdGhlIHNlbmRlciB0byBwcm92aWRlCiAgICAvLyBzaG9ydGN1dHMgZm9yIHRoZSBvdGhlciBjb25maXJtYXRpb25zIChhbGxvd2luZyB0aGVtIHRvIGF2b2lkIHJlcGxpY2F0aW5nIHRoZSBfdG8sIF92YWx1ZQogICAgLy8gYW5kIF9kYXRhIGFyZ3VtZW50cykuIFRoZXkgc3RpbGwgZ2V0IHRoZSBvcHRpb24gb2YgdXNpbmcgdGhlbSBpZiB0aGV5IHdhbnQsIGFueXdheXMuCiAgICBmdW5jdGlvbiBleGVjdXRlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIG9ubHlvd25lciByZXR1cm5zKGJvb2wgX2NhbGxWYWx1ZSkgewogICAgICAgIC8vIGZpcnN0LCB0YWtlIHRoZSBvcHBvcnR1bml0eSB0byBjaGVjayB0aGF0IHdlJ3JlIHVuZGVyIHRoZSBkYWlseSBsaW1pdC4KICAgICAgICBpZiAodW5kZXJMaW1pdChfdmFsdWUpKSB7CiAgICAgICAgICAgIFNpbmdsZVRyYW5zYWN0KG1zZy5zZW5kZXIsIF92YWx1ZSwgX3RvLCBfZGF0YSk7CiAgICAgICAgICAgIC8vIHllcyAtIGp1c3QgZXhlY3V0ZSB0aGUgY2FsbC4KICAgICAgICAgICAgX2NhbGxWYWx1ZSA9X3RvLmNhbGwudmFsdWUoX3ZhbHVlKShfZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIG91ciBvcGVyYXRpb24gaGFzaC4KICAgICAgICAgICAgYnl0ZXMzMiBfciA9IHNoYTMobXNnLmRhdGEsIGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgIGlmICghY29uZmlybShfcikgJiYgbV90eHNbX3JdLnRvID09IDApIHsKICAgICAgICAgICAgICAgIG1fdHhzW19yXS50byA9IF90bzsKICAgICAgICAgICAgICAgIG1fdHhzW19yXS52YWx1ZSA9IF92YWx1ZTsKICAgICAgICAgICAgICAgIG1fdHhzW19yXS5kYXRhID0gX2RhdGE7CiAgICAgICAgICAgICAgICBDb25maXJtYXRpb25OZWVkZWQoX3IsIG1zZy5zZW5kZXIsIF92YWx1ZSwgX3RvLCBfZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gY29uZmlybSBhIHRyYW5zYWN0aW9uIHRocm91Z2gganVzdCB0aGUgaGFzaC4gd2UgdXNlIHRoZSBwcmV2aW91cyB0cmFuc2FjdGlvbnMgbWFwLCBtX3R4cywgaW4gb3JkZXIKICAgIC8vIHRvIGRldGVybWluZSB0aGUgYm9keSBvZiB0aGUgdHJhbnNhY3Rpb24gZnJvbSB0aGUgaGFzaCBwcm92aWRlZC4KICAgIGZ1bmN0aW9uIGNvbmZpcm0oYnl0ZXMzMiBfaCkgb25seW1hbnlvd25lcnMoX2gpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAobV90eHNbX2hdLnRvICE9IDApIHsKICAgICAgICAgICAgbV90eHNbX2hdLnRvLmNhbGwudmFsdWUobV90eHNbX2hdLnZhbHVlKShtX3R4c1tfaF0uZGF0YSk7CiAgICAgICAgICAgIE11bHRpVHJhbnNhY3QobXNnLnNlbmRlciwgX2gsIG1fdHhzW19oXS52YWx1ZSwgbV90eHNbX2hdLnRvLCBtX3R4c1tfaF0uZGF0YSk7CiAgICAgICAgICAgIGRlbGV0ZSBtX3R4c1tfaF07CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBJTlRFUk5BTCBNRVRIT0RTCgogICAgZnVuY3Rpb24gY2xlYXJXYWxsZXRQZW5kaW5nKCkgaW50ZXJuYWwgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKQogICAgICAgICAgICBkZWxldGUgbV90eHNbbV9wZW5kaW5nSW5kZXhbaV1dOwogICAgICAgIGNsZWFyUGVuZGluZygpOwogICAgfQoKICAgIC8vIEZJRUxEUwogICAgYWRkcmVzcyBjb25zdGFudCBfd2FsbGV0TGlicmFyeSA9IDB4NGYyODc1ZjYzMWY0ZmM2NmI4ZTA1MWRlZmJhMGM5ZjkxMDZkN2Q1YTsKCiAgICAvLyB0aGUgbnVtYmVyIG9mIG93bmVycyB0aGF0IG11c3QgY29uZmlybSB0aGUgc2FtZSBvcGVyYXRpb24gYmVmb3JlIGl0IGlzIHJ1bi4KICAgIHVpbnQgbV9yZXF1aXJlZDsKICAgIC8vIHBvaW50ZXIgdXNlZCB0byBmaW5kIGEgZnJlZSBzbG90IGluIG1fb3duZXJzCiAgICB1aW50IG1fbnVtT3duZXJzOwoKICAgIHVpbnQgcHVibGljIG1fZGFpbHlMaW1pdDsKICAgIHVpbnQgcHVibGljIG1fc3BlbnRUb2RheTsKICAgIHVpbnQgcHVibGljIG1fbGFzdERheTsKCiAgICAvLyBsaXN0IG9mIG93bmVycwogICAgdWludFsyNTZdIG1fb3duZXJzOwogICAgdWludCBjb25zdGFudCBjX21heE93bmVycyA9IDI1MDsKCiAgICAvLyBpbmRleCBvbiB0aGUgbGlzdCBvZiBvd25lcnMgdG8gYWxsb3cgcmV2ZXJzZSBsb29rdXAKICAgIG1hcHBpbmcodWludCA9PiB1aW50KSBtX293bmVySW5kZXg7CiAgICAvLyB0aGUgb25nb2luZyBvcGVyYXRpb25zLgogICAgbWFwcGluZyhieXRlczMyID0+IFBlbmRpbmdTdGF0ZSkgbV9wZW5kaW5nOwogICAgYnl0ZXMzMltdIG1fcGVuZGluZ0luZGV4OwoKICAgIC8vIHBlbmRpbmcgdHJhbnNhY3Rpb25zIHdlIGhhdmUgYXQgcHJlc2VudC4KICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gVHJhbnNhY3Rpb24pIG1fdHhzOwp9'.
	

]
