Class {
	#name : #SRT4b0712de9b75bc68a566215acca876ea5e55c172,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4b0712de9b75bc68a566215acca876ea5e55c172 >> base64 [
	^ ''.
	

]
