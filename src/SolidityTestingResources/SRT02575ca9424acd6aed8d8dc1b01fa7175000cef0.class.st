Class {
	#name : #SRT02575ca9424acd6aed8d8dc1b01fa7175000cef0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02575ca9424acd6aed8d8dc1b01fa7175000cef0 >> base64 [
	^ ''.
	

]
