Class {
	#name : #SRTec6708fff9f9b579ebd5b783b681968203c843cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec6708fff9f9b579ebd5b783b681968203c843cd >> base64 [
	^ ''.
	

]
