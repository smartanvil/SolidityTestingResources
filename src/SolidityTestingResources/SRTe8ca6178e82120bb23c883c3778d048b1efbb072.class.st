Class {
	#name : #SRTe8ca6178e82120bb23c883c3778d048b1efbb072,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8ca6178e82120bb23c883c3778d048b1efbb072 >> base64 [
	^ ''.
	

]
