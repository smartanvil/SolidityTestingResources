Class {
	#name : #SRT880e31e1744bf5b2efd832585eec6e1d6752208c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT880e31e1744bf5b2efd832585eec6e1d6752208c >> base64 [
	^ ''.
	

]
