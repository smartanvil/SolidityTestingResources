Class {
	#name : #SRT02d3aea48b443a0026ed9cbc91b97d7335aba323,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02d3aea48b443a0026ed9cbc91b97d7335aba323 >> base64 [
	^ ''.
	

]
