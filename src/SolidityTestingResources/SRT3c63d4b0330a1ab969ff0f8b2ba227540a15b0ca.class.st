Class {
	#name : #SRT3c63d4b0330a1ab969ff0f8b2ba227540a15b0ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c63d4b0330a1ab969ff0f8b2ba227540a15b0ca >> base64 [
	^ ''.
	

]
