Class {
	#name : #SRT70c4eea814bee9b74cafeca0200991bb0d8a4320,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT70c4eea814bee9b74cafeca0200991bb0d8a4320 >> base64 [
	^ ''.
	

]
