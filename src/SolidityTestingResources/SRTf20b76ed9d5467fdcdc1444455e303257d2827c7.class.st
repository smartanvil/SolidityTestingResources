Class {
	#name : #SRTf20b76ed9d5467fdcdc1444455e303257d2827c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf20b76ed9d5467fdcdc1444455e303257d2827c7 >> base64 [
	^ 'Ly8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBUb2tlbiB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4qLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy9EZWZhdWx0IGFzc3VtZXMgdG90YWxTdXBwbHkgY2FuJ3QgYmUgb3ZlciBtYXggKDJeMjU2IC0gMSkuCiAgICAgICAgLy9JZiB5b3VyIHRva2VuIGxlYXZlcyBvdXQgdG90YWxTdXBwbHkgYW5kIGNhbiBpc3N1ZSBtb3JlIHRva2VucyBhcyB0aW1lIGdvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4KICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IEdHb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwICYmIHJlY2VpdmVkV2VpIDwgdGFyZ2V0V2VpKTsKICAgICAgICByZXF1aXJlKG5vdyA+IHJlbGVhc2VUaW1lKTsKICAgICAgICByZWNlaXZlZFdlaSArPSBtc2cudmFsdWU7CiAgICAgICAgd2FsbGV0QWRkcmVzcy50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgIE5ld1NhbGUobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgICAgICBhc3NlcnQocmVjZWl2ZWRXZWkgPj0gbXNnLnZhbHVlKTsKICAgIH0KCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiR0cgVG9rZW4iOyAgICAgICAgICAgICAgICAgICAvL2ZhbmN5IG5hbWUKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OyAgICAgICAgICAgICAgICAvL0hvdyBtYW55IGRlY2ltYWxzIHRvIHNob3cuIGllLiBUaGVyZSBjb3VsZCAxMDAwIGJhc2UgdW5pdHMgd2l0aCAzIGRlY2ltYWxzLiBNZWFuaW5nIDAuOTgwIFNCWCA9IDk4MCBiYXNlIHVuaXRzLiBJdCdzIGxpa2UgY29tcGFyaW5nIDEgd2VpIHRvIDEgZXRoZXIuCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJHRyI7ICAgICAgICAgICAgICAgICAvL0FuIGlkZW50aWZpZXIKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICd2MC4xJzsgICAgICAgLy9nZyAwLjEgc3RhbmRhcmQuIEp1c3QgYW4gYXJiaXRyYXJ5IHZlcnNpb25pbmcgc2NoZW1lLgoKICAgIGFkZHJlc3MgcHVibGljIGZvdW5kZXI7IC8vIFRoZSBhZGRyZXNzIG9mIHRoZSBmb3VuZGVyCiAgICB1aW50MjU2IHB1YmxpYyB0YXJnZXRXZWk7Ly8gVGhlIHRhcmdldCBldGggb2YgaWNvCiAgICB1aW50MjU2IHB1YmxpYyByZWNlaXZlZFdlaTsvL1RoZSByZWNlaXZlZCBudW1tYmVyIG9mIGV0aAogICAgdWludDI1NiBwdWJsaWMgcmVsZWFzZVRpbWU7Ly9UaGUgc3RhcnQgdGltZSBvZiBpY28KICAgIHVpbnQyNTYgcHVibGljIGFsbG9jYXRlRW5kVGltZTsKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldEFkZHJlc3M7Ly9BZGRyZXNzIG9mIHdhbGxldAoKICAgIGV2ZW50IE5ld1NhbGUoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpOwogICAgCiAgICAKICAgIC8vIFRoZSBub25jZSBmb3IgYXZvaWQgdHJhbnNmZXIgcmVwbGF5IGF0dGFja3MKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBub25jZXM7CgogICAgZnVuY3Rpb24gR0dva2VuKGFkZHJlc3MgX3dhbGxldEFkZHJlc3MpIHB1YmxpYyB7CiAgICAgICAgZm91bmRlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgd2FsbGV0QWRkcmVzcyA9IF93YWxsZXRBZGRyZXNzOwogICAgICAgIHJlbGVhc2VUaW1lID0gMTUxMTY5NTE1OTsKICAgICAgICBhbGxvY2F0ZUVuZFRpbWUgPSByZWxlYXNlVGltZSArIDEgZGF5czsKICAgICAgICB0YXJnZXRXZWkgPSAyIGV0aGVyOwogICAgfQoKICAgIC8qCiAgICAgKiBQcm94eSB0cmFuc2ZlciBnZyB0b2tlbi4gV2hlbiBzb21lIHVzZXJzIG9mIHRoZSBldGhlcmV1bSBhY2NvdW50IGhhcyBubyBldGhlciwKICAgICAqIGhlIG9yIHNoZSBjYW4gYXV0aG9yaXplIHRoZSBhZ2VudCBmb3IgYnJvYWRjYXN0IHRyYW5zYWN0aW9ucywgYW5kIGFnZW50cyBtYXkgY2hhcmdlIGFnZW5jeSBmZWVzCiAgICAgKiBAcGFyYW0gX2Zyb20KICAgICAqIEBwYXJhbSBfdG8KICAgICAqIEBwYXJhbSBfdmFsdWUKICAgICAqIEBwYXJhbSBmZWVHZwogICAgICogQHBhcmFtIF92CiAgICAgKiBAcGFyYW0gX3IKICAgICAqIEBwYXJhbSBfcwogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlclByb3h5KGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfZmVlR2csCiAgICAgICAgdWludDggX3YsYnl0ZXMzMiBfciwgYnl0ZXMzMiBfcykgcHVibGljIHJldHVybnMgKGJvb2wpewoKICAgICAgICBpZihiYWxhbmNlc1tfZnJvbV0gPCBfZmVlR2cgKyBfdmFsdWUpIHJldmVydCgpOwoKICAgICAgICB1aW50MjU2IG5vbmNlID0gbm9uY2VzW19mcm9tXTsKICAgICAgICBieXRlczMyIGggPSBrZWNjYWsyNTYoX2Zyb20sX3RvLF92YWx1ZSxfZmVlR2csbm9uY2UpOwogICAgICAgIGlmKF9mcm9tICE9IGVjcmVjb3ZlcihoLF92LF9yLF9zKSkgcmV2ZXJ0KCk7CgogICAgICAgIGlmKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dCiAgICAgICAgICAgIHx8IGJhbGFuY2VzW21zZy5zZW5kZXJdICsgX2ZlZUdnIDwgYmFsYW5jZXNbbXNnLnNlbmRlcl0pIHJldmVydCgpOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IF9mZWVHZzsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgbXNnLnNlbmRlciwgX2ZlZUdnKTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZSArIF9mZWVHZzsKICAgICAgICBub25jZXNbX2Zyb21dID0gbm9uY2UgKyAxOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qCiAgICAgKiBQcm94eSBhcHByb3ZlIHRoYXQgc29tZSBvbmUgY2FuIGF1dGhvcml6ZSB0aGUgYWdlbnQgZm9yIGJyb2FkY2FzdCB0cmFuc2FjdGlvbgogICAgICogd2hpY2ggY2FsbCBhcHByb3ZlIG1ldGhvZCwgYW5kIGFnZW50cyBtYXkgY2hhcmdlIGFnZW5jeSBmZWVzCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgd2hpY2ggc2hvdWxkIHRyYW5mZXIgZ2cgdG8gb3RoZXJzCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIHNwZW5kZXIgd2hvIGFsbG93ZWQgYnkgX2Zyb20KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHRyYW5mZXJlZC4KICAgICAqIEBwYXJhbSBfdgogICAgICogQHBhcmFtIF9yCiAgICAgKiBAcGFyYW0gX3MKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZVByb3h5KGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLAogICAgICAgIHVpbnQ4IF92LGJ5dGVzMzIgX3IsIGJ5dGVzMzIgX3MpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgdWludDI1NiBub25jZSA9IG5vbmNlc1tfZnJvbV07CiAgICAgICAgYnl0ZXMzMiBoYXNoID0ga2VjY2FrMjU2KF9mcm9tLF9zcGVuZGVyLF92YWx1ZSxub25jZSk7CiAgICAgICAgaWYoX2Zyb20gIT0gZWNyZWNvdmVyKGhhc2gsX3YsX3IsX3MpKSByZXZlcnQoKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwoX2Zyb20sIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIG5vbmNlc1tfZnJvbV0gPSBub25jZSArIDE7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8qCiAgICAgKiBHZXQgdGhlIG5vbmNlCiAgICAgKiBAcGFyYW0gX2FkZHIKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0Tm9uY2UoYWRkcmVzcyBfYWRkcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHJldHVybiBub25jZXNbX2FkZHJdOwogICAgfQoKICAgIC8qIEFwcHJvdmVzIGFuZCB0aGVuIGNhbGxzIHRoZSByZWNlaXZpbmcgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CgogICAgICAgIC8vY2FsbCB0aGUgcmVjZWl2ZUFwcHJvdmFsIGZ1bmN0aW9uIG9uIHRoZSBjb250cmFjdCB5b3Ugd2FudCB0byBiZSBub3RpZmllZC4gVGhpcyBjcmFmdHMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBtYW51YWxseSBzbyBvbmUgZG9lc24ndCBoYXZlIHRvIGluY2x1ZGUgYSBjb250cmFjdCBpbiBoZXJlIGp1c3QgZm9yIHRoaXMuCiAgICAgICAgLy9yZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuQ29udHJhY3QsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgLy9pdCBpcyBhc3N1bWVkIHRoYXQgd2hlbiBkb2VzIHRoaXMgdGhhdCB0aGUgY2FsbCAqc2hvdWxkKiBzdWNjZWVkLCBvdGhlcndpc2Ugb25lIHdvdWxkIHVzZSB2YW5pbGxhIGFwcHJvdmUgaW5zdGVhZC4KICAgICAgICBpZighX3NwZW5kZXIuY2FsbChieXRlczQoYnl0ZXMzMihrZWNjYWsyNTYoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSkpLCBtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpKSB7IHJldmVydCgpOyB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQXBwcm92ZXMgYW5kIHRoZW4gY2FsbHMgdGhlIGNvbnRyYWN0IGNvZGUqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGxjb2RlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CgogICAgICAgIC8vQ2FsbCB0aGUgY29udHJhY3QgY29kZQogICAgICAgIGlmKCFfc3BlbmRlci5jYWxsKF9leHRyYURhdGEpKSB7IHJldmVydCgpOyB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8gQWxsb2NhdGUgdG9rZW5zIHRvIHRoZSB1c2VycwogICAgLy8gQHBhcmFtIF9vd25lcnMgVGhlIG93bmVycyBsaXN0IG9mIHRoZSB0b2tlbgogICAgLy8gQHBhcmFtIF92YWx1ZXMgVGhlIHZhbHVlIGxpc3Qgb2YgdGhlIHRva2VuCiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRva2VucyhhZGRyZXNzW10gX293bmVycywgdWludDI1NltdIF92YWx1ZXMpIHB1YmxpYyB7CgogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gZm91bmRlcikgcmV2ZXJ0KCk7CiAgICAgICAgaWYoYWxsb2NhdGVFbmRUaW1lIDwgbm93KSByZXZlcnQoKTsKICAgICAgICBpZihfb3duZXJzLmxlbmd0aCAhPSBfdmFsdWVzLmxlbmd0aCkgcmV2ZXJ0KCk7CgogICAgICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgX293bmVycy5sZW5ndGggOyBpKyspewogICAgICAgICAgICBhZGRyZXNzIG93bmVyID0gX293bmVyc1tpXTsKICAgICAgICAgICAgdWludDI1NiB2YWx1ZSA9IF92YWx1ZXNbaV07CiAgICAgICAgICAgIGlmKHRvdGFsU3VwcGx5ICsgdmFsdWUgPD0gdG90YWxTdXBwbHkgfHwgYmFsYW5jZXNbb3duZXJdICsgdmFsdWUgPD0gYmFsYW5jZXNbb3duZXJdKSByZXZlcnQoKTsKICAgICAgICAgICAgdG90YWxTdXBwbHkgKz0gdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW293bmVyXSArPSB2YWx1ZTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
