Class {
	#name : #SRTc9935cec15431e00aff915762e47edfcf23bd76b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9935cec15431e00aff915762e47edfcf23bd76b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgTG9ja2luTWFuYWdlciB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvKkRlZmluZXMgdGhlIHN0cnVjdHVyZSBmb3IgYSBsb2NrKi8KICAgIHN0cnVjdCBMb2NrIHsKICAgICAgICB1aW50MjU2IGFtb3VudDsKICAgICAgICB1aW50MjU2IHVubG9ja0RhdGU7CiAgICAgICAgdWludDI1NiBsb2NrZWRGb3I7CiAgICB9CiAgICAKICAgIC8qT2JqZWN0IG9mIExvY2sqLyAgICAKICAgIExvY2sgbG9jazsKCiAgICAvKlZhbHVlIG9mIGRlZmF1bHQgbG9jayBkYXlzKi8KICAgIHVpbnQyNTYgZGVmYXVsdEFsbG93ZWRMb2NrID0gNzsKCiAgICAvKiBtYXBwaW5nIG9mIGxpc3Qgb2YgbG9ja2VkIGFkZHJlc3Mgd2l0aCBhcnJheSBvZiBsb2NrcyBmb3IgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gTG9ja1tdKSBwdWJsaWMgbG9ja2VkQWRkcmVzc2VzOwoKICAgIC8qIG1hcHBpbmcgb2YgdmFsaWQgY29udHJhY3RzIHdpdGggdGhlaXIgbG9ja2luIHRpbWVzdGFtcCAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYWxsb3dlZENvbnRyYWN0czsKCiAgICAvKiBsaXN0IG9mIGxvY2tlZCBkYXlzIG1hcHBlZCB3aXRoIHRoZWlyIGxvY2tlZCB0aW1lc3RhbXAqLwogICAgbWFwcGluZyAodWludCA9PiB1aW50MjU2KSBwdWJsaWMgYWxsb3dlZExvY2tzOwoKICAgIC8qIERlZmluZXMgb3VyIGludGVyZmFjZSB0byB0aGUgdG9rZW4gY29udHJhY3QgKi8KICAgIFRva2VuIHRva2VuOwoKICAgIC8qIERlZmluZXMgdGhlIGFkbWluIGNvbnRyYWN0IHdlIGludGVyZmFjZSB3aXRoIGZvciBjcmVkZW50YWlscy4gKi8KICAgIEF1dGhlbnRpY2F0aW9uTWFuYWdlciBhdXRoZW50aWNhdGlvbk1hbmFnZXI7CgogICAgIC8qIEZpcmVkIHdoZW5ldmVyIGxvY2sgZGF5IGlzIGFkZGVkIGJ5IHRoZSBhZG1pbi4gKi8KICAgIGV2ZW50IExvY2tlZERheUFkZGVkKGFkZHJlc3MgX2FkbWluLCB1aW50MjU2IF9kYXlzTG9ja2VkLCB1aW50MjU2IHRpbWVzdGFtcCk7CgogICAgIC8qIEZpcmVkIHdoZW5ldmVyIGxvY2sgZGF5IGlzIHJlbW92ZWQgYnkgdGhlIGFkbWluLiAqLwogICAgZXZlbnQgTG9ja2VkRGF5UmVtb3ZlZChhZGRyZXNzIF9hZG1pbiwgdWludDI1NiBfZGF5c0xvY2tlZCwgdWludDI1NiB0aW1lc3RhbXApOwoKICAgICAvKiBGaXJlZCB3aGVuZXZlciB2YWxpZCBjb250cmFjdCBpcyBhZGRlZCBieSB0aGUgYWRtaW4uICovCiAgICBldmVudCBWYWxpZENvbnRyYWN0QWRkZWQoYWRkcmVzcyBfYWRtaW4sIGFkZHJlc3MgX3ZhbGlkQWRkcmVzcywgdWludDI1NiB0aW1lc3RhbXApOwoKICAgICAvKiBGaXJlZCB3aGVuZXZlciB2YWxpZCBjb250cmFjdCBpcyByZW1vdmVkIGJ5IHRoZSBhZG1pbi4gKi8KICAgIGV2ZW50IFZhbGlkQ29udHJhY3RSZW1vdmVkKGFkZHJlc3MgX2FkbWluLCBhZGRyZXNzIF92YWxpZEFkZHJlc3MsIHVpbnQyNTYgdGltZXN0YW1wKTsKCiAgICAvKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBmdW5kIHdpdGggbGlua3MgdG8gb3RoZXIgY29udHJhY3RzIHRoYXQgYXJlIHJlcXVpcmVkLiAqLwogICAgZnVuY3Rpb24gTG9ja2luTWFuYWdlcihhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfYXV0aGVudGljYXRpb25NYW5hZ2VyKSB7CiAgICAgIAogICAgICAgIC8qIFNldHVwIGFjY2VzcyB0byBvdXIgb3RoZXIgY29udHJhY3RzIGFuZCB2YWxpZGF0ZSB0aGVpciB2ZXJzaW9ucyAqLwogICAgICAgIHRva2VuICA9IFRva2VuKF90b2tlbik7CiAgICAgICAgYXV0aGVudGljYXRpb25NYW5hZ2VyID0gQXV0aGVudGljYXRpb25NYW5hZ2VyKF9hdXRoZW50aWNhdGlvbk1hbmFnZXIpOwogICAgfQogICAKICAgIC8qIFRoaXMgbW9kaWZpZXIgYWxsb3dzIGEgbWV0aG9kIHRvIG9ubHkgYmUgY2FsbGVkIGJ5IGN1cnJlbnQgYWRtaW5zICovCiAgICBtb2RpZmllciBhZG1pbk9ubHkgewogICAgICAgIGlmICghYXV0aGVudGljYXRpb25NYW5hZ2VyLmlzQ3VycmVudEFkbWluKG1zZy5zZW5kZXIpKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8qIFRoaXMgbW9kaWZpZXIgYWxsb3dzIGEgbWV0aG9kIHRvIG9ubHkgYmUgY2FsbGVkIGJ5IHRva2VuIGNvbnRyYWN0ICovCiAgICBtb2RpZmllciB2YWxpZENvbnRyYWN0T25seSB7CiAgICAgICAgcmVxdWlyZShhbGxvd2VkQ29udHJhY3RzW21zZy5zZW5kZXJdICE9IDApOwoKICAgICAgICBfOwogICAgfQoKICAgIC8qIEdldHMgdGhlIGxlbmd0aCBvZiBsb2NrZWQgdmFsdWVzIGZvciBhbiBhY2NvdW50ICovCiAgICBmdW5jdGlvbiBnZXRMb2NrcyhhZGRyZXNzIF9vd25lcikgdmFsaWRDb250cmFjdE9ubHkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBsb2NrZWRBZGRyZXNzZXNbX293bmVyXS5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TG9jayhhZGRyZXNzIF9vd25lciwgdWludDI1NiBjb3VudCkgdmFsaWRDb250cmFjdE9ubHkgcmV0dXJucyh1aW50MjU2IGFtb3VudCwgdWludDI1NiB1bmxvY2tEYXRlLCB1aW50MjU2IGxvY2tlZEZvcikgewogICAgICAgIGFtb3VudCAgICAgPSBsb2NrZWRBZGRyZXNzZXNbX293bmVyXVtjb3VudF0uYW1vdW50OwogICAgICAgIHVubG9ja0RhdGUgPSBsb2NrZWRBZGRyZXNzZXNbX293bmVyXVtjb3VudF0udW5sb2NrRGF0ZTsKICAgICAgICBsb2NrZWRGb3IgID0gbG9ja2VkQWRkcmVzc2VzW19vd25lcl1bY291bnRdLmxvY2tlZEZvcjsKICAgIH0KICAgIAogICAgLyogR2V0cyBhbW91bnQgZm9yIHdoaWNoIGFuIGFkZHJlc3MgaXMgbG9ja2VkIHdpdGggbG9ja2VkIGluZGV4ICovCiAgICBmdW5jdGlvbiBnZXRMb2Nrc0Ftb3VudChhZGRyZXNzIF9vd25lciwgdWludDI1NiBjb3VudCkgdmFsaWRDb250cmFjdE9ubHkgcmV0dXJucyh1aW50MjU2IGFtb3VudCkgeyAgICAgICAgCiAgICAgICAgYW1vdW50ID0gbG9ja2VkQWRkcmVzc2VzW19vd25lcl1bY291bnRdLmFtb3VudDsKICAgIH0KCiAgICAvKiBHZXRzIHVubG9ja2VkIHRpbWVzdGFtcCBmb3Igd2hpY2ggYW4gYWRkcmVzcyBpcyBsb2NrZWQgd2l0aCBsb2NrZWQgaW5kZXggKi8KICAgIGZ1bmN0aW9uIGdldExvY2tzVW5sb2NrRGF0ZShhZGRyZXNzIF9vd25lciwgdWludDI1NiBjb3VudCkgdmFsaWRDb250cmFjdE9ubHkgcmV0dXJucyh1aW50MjU2IHVubG9ja0RhdGUpIHsKICAgICAgICB1bmxvY2tEYXRlID0gbG9ja2VkQWRkcmVzc2VzW19vd25lcl1bY291bnRdLnVubG9ja0RhdGU7CiAgICB9CgogICAgLyogR2V0cyBkYXlzIGZvciB3aGljaCBhbiBhZGRyZXNzIGlzIGxvY2tlZCB3aXRoIGxvY2tlZCBpbmRleCAqLwogICAgZnVuY3Rpb24gZ2V0TG9ja3NMb2NrZWRGb3IoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgY291bnQpIHZhbGlkQ29udHJhY3RPbmx5IHJldHVybnModWludDI1NiBsb2NrZWRGb3IpIHsKICAgICAgICBsb2NrZWRGb3IgPSBsb2NrZWRBZGRyZXNzZXNbX293bmVyXVtjb3VudF0ubG9ja2VkRm9yOwogICAgfQoKICAgIC8qIExvY2tzIHRva2VucyBmb3IgYW4gYWRkcmVzcyBmb3IgdGhlIGRlZmF1bHQgbnVtYmVyIG9mIGRheXMgKi8KICAgIGZ1bmN0aW9uIGRlZmF1bHRMb2NraW4oYWRkcmVzcyBfYWRkcmVzcywgdWludDI1NiBfdmFsdWUpIHZhbGlkQ29udHJhY3RPbmx5CiAgICB7CiAgICAgICAgbG9ja0l0KF9hZGRyZXNzLCBfdmFsdWUsIGRlZmF1bHRBbGxvd2VkTG9jayk7CiAgICB9CgogICAgLyogTG9ja3MgdG9rZW5zIGZvciBzZW5kZXIgZm9yIG4gZGF5cyovCiAgICBmdW5jdGlvbiBsb2NrRm9yRGF5cyh1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfZGF5cykgCiAgICB7CiAgICAgICAgcmVxdWlyZSggISBpZkluQWxsb3dlZExvY2tzKF9kYXlzKSk7ICAgICAgICAKCiAgICAgICAgcmVxdWlyZSh0b2tlbi5hdmFpbGFibGVCYWxhbmNlKG1zZy5zZW5kZXIpID49IF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgbG9ja0l0KG1zZy5zZW5kZXIsIF92YWx1ZSwgX2RheXMpOyAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gbG9ja0l0KGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IF9kYXlzKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gZXhwaXJ5IHdpbGwgYmUgY2FsY3VsYXRlZCBhcyAyNCAqIDYwICogNjAKICAgICAgICB1aW50MjU2IF9leHBpcnkgPSBub3cgKyBfZGF5cy5tdWwoODY0MDApOwogICAgICAgIGxvY2tlZEFkZHJlc3Nlc1tfYWRkcmVzc10ucHVzaChMb2NrKF92YWx1ZSwgX2V4cGlyeSwgX2RheXMpKTsgICAgICAgIAogICAgfQoKICAgIC8qIENoZWNrIGlmIGlucHV0IGRheSBpcyBwcmVzZW50IGluIGxvY2tlZCBkYXlzICovCiAgICBmdW5jdGlvbiBpZkluQWxsb3dlZExvY2tzKHVpbnQyNTYgX2RheXMpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBhbGxvd2VkTG9ja3NbX2RheXNdID09IDA7CiAgICB9CgogICAgLyogQWRkcyBhIGRheSB0byBvdXIgbGlzdCBvZiBhbGxvd2VkTG9ja3MgKi8KICAgIGZ1bmN0aW9uIGFkZEFsbG93ZWRMb2NrKHVpbnQgX2RheSkgYWRtaW5Pbmx5IHsKCiAgICAgICAgLy8gRmFpbCBpZiBkYXkgaXMgYWxyZWFkeSBwcmVzZW50IGluIGxvY2tlZCBkYXlzCiAgICAgICAgaWYgKGFsbG93ZWRMb2Nrc1tfZGF5XSAhPSAwKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICAKICAgICAgICAvLyBBZGQgZGF5IGluIGxvY2tlZCBkYXlzIAogICAgICAgIGFsbG93ZWRMb2Nrc1tfZGF5XSA9IG5vdzsKICAgICAgICBMb2NrZWREYXlBZGRlZChtc2cuc2VuZGVyLCBfZGF5LCBub3cpOwogICAgfQoKICAgIC8qIFJlbW92ZSBhbGxvd2VkIExvY2sgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZUFsbG93ZWRMb2NrKHVpbnQgX2RheSkgYWRtaW5Pbmx5IHsKCiAgICAgICAgLy8gRmFpbCBpZiBkYXkgZG9lc25vdCBleGlzdCBpbiBhbGxvd2VkTG9ja3MKICAgICAgICBpZiAoIGFsbG93ZWRMb2Nrc1tfZGF5XSA9PSAgMCkKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8qIFJlbW92ZSBsb2NrZWQgZGF5ICAqLwogICAgICAgIGFsbG93ZWRMb2Nrc1tfZGF5XSA9IDA7CiAgICAgICAgTG9ja2VkRGF5UmVtb3ZlZChtc2cuc2VuZGVyLCBfZGF5LCBub3cpOwogICAgfQoKICAgIC8qIEFkZHMgYSBhZGRyZXNzIHRvIG91ciBsaXN0IG9mIGFsbG93ZWRDb250cmFjdHMgKi8KICAgIGZ1bmN0aW9uIGFkZFZhbGlkQ29udHJhY3QoYWRkcmVzcyBfYWRkcmVzcykgYWRtaW5Pbmx5IHsKCiAgICAgICAgLy8gRmFpbCBpZiBhZGRyZXNzIGlzIGFscmVhZHkgcHJlc2VudCBpbiB2YWxpZCBjb250cmFjdHMKICAgICAgICBpZiAoYWxsb3dlZENvbnRyYWN0c1tfYWRkcmVzc10gIT0gMCkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgCiAgICAgICAgLy8gYWRkIGFuIGFkZHJlc3MgaW4gYWxsb3dlZENvbnRyYWN0cwogICAgICAgIGFsbG93ZWRDb250cmFjdHNbX2FkZHJlc3NdID0gbm93OwoKICAgICAgICBWYWxpZENvbnRyYWN0QWRkZWQobXNnLnNlbmRlciwgX2FkZHJlc3MsIG5vdyk7CiAgICB9CgogICAgLyogUmVtb3ZlcyBhbGxvd2VkIGNvbnRyYWN0IGZyb20gdGhlIGxpc3Qgb2YgYWxsb3dlZENvbnRyYWN0cyAqLwogICAgZnVuY3Rpb24gcmVtb3ZlVmFsaWRDb250cmFjdChhZGRyZXNzIF9hZGRyZXNzKSBhZG1pbk9ubHkgewoKICAgICAgICAvLyBGYWlsIGlmIGFkZHJlc3MgZG9lc25vdCBleGlzdCBpbiBhbGxvd2VkQ29udHJhY3RzCiAgICAgICAgaWYgKCBhbGxvd2VkQ29udHJhY3RzW19hZGRyZXNzXSA9PSAgMCkKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8qIFJlbW92ZSBhbGxvd2VkIGNvbnRyYWN0IGZyb20gYWxsb3dlZENvbnRyYWN0cyAgKi8KICAgICAgICBhbGxvd2VkQ29udHJhY3RzW19hZGRyZXNzXSA9IDA7CgogICAgICAgIFZhbGlkQ29udHJhY3RSZW1vdmVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzLCBub3cpOwogICAgfQoKICAgIC8qIFNldCBkZWZhdWx0IGFsbG93ZWQgbG9jayAqLwogICAgZnVuY3Rpb24gc2V0RGVmYXVsdEFsbG93ZWRMb2NrKHVpbnQgX2RheXMpIGFkbWluT25seSB7CiAgICAgICAgZGVmYXVsdEFsbG93ZWRMb2NrID0gX2RheXM7CiAgICB9Cn0KCi8qIFRoZSBhdXRoZW50aWNhdGlvbiBtYW5hZ2VyIGRldGFpbHMgdXNlciBhY2NvdW50cyB0aGF0IGhhdmUgYWNjZXNzIHRvIGNlcnRhaW4gcHJpdmlsZWRnZXMgYW5kIGtlZXBzIGEgcGVybWFuZW50IGxlZGdlciBvZiB3aG8gaGFzIGFuZCBoYXMgaGFkIHRoZXNlIHJpZ2h0cy4gKi8KY29udHJhY3QgQXV0aGVudGljYXRpb25NYW5hZ2VyIHsKICAgCiAgICAvKiBNYXAgYWRkcmVzc2VzIHRvIGFkbWlucyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBhZG1pbkFkZHJlc3NlczsKCiAgICAvKiBNYXAgYWRkcmVzc2VzIHRvIGFjY291bnQgcmVhZGVycyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBhY2NvdW50UmVhZGVyQWRkcmVzc2VzOwoKICAgIC8qIE1hcCBhZGRyZXNzZXMgdG8gYWNjb3VudCBtaW50ZXJzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIGFjY291bnRNaW50ZXJBZGRyZXNzZXM7CgogICAgLyogRGV0YWlscyBvZiBhbGwgYWRtaW5zIHRoYXQgaGF2ZSBldmVyIGV4aXN0ZWQgKi8KICAgIGFkZHJlc3NbXSBhZG1pbkF1ZGl0OwoKICAgIC8qIERldGFpbHMgb2YgYWxsIGFjY291bnQgcmVhZGVycyB0aGF0IGhhdmUgZXZlciBleGlzdGVkICovCiAgICBhZGRyZXNzW10gYWNjb3VudFJlYWRlckF1ZGl0OwoKICAgIC8qIERldGFpbHMgb2YgYWxsIGFjY291bnQgbWludGVycyB0aGF0IGhhdmUgZXZlciBleGlzdGVkICovCiAgICBhZGRyZXNzW10gYWNjb3VudE1pbnRlckF1ZGl0OwoKICAgIC8qIEZpcmVkIHdoZW5ldmVyIGFuIGFkbWluIGlzIGFkZGVkIHRvIHRoZSBjb250cmFjdC4gKi8KICAgIGV2ZW50IEFkbWluQWRkZWQoYWRkcmVzcyBhZGRlZEJ5LCBhZGRyZXNzIGFkbWluKTsKCiAgICAvKiBGaXJlZCB3aGVuZXZlciBhbiBhZG1pbiBpcyByZW1vdmVkIGZyb20gdGhlIGNvbnRyYWN0LiAqLwogICAgZXZlbnQgQWRtaW5SZW1vdmVkKGFkZHJlc3MgcmVtb3ZlZEJ5LCBhZGRyZXNzIGFkbWluKTsKCiAgICAvKiBGaXJlZCB3aGVuZXZlciBhbiBhY2NvdW50LXJlYWRlciBjb250cmFjdCBpcyBhZGRlZC4gKi8KICAgIGV2ZW50IEFjY291bnRSZWFkZXJBZGRlZChhZGRyZXNzIGFkZGVkQnksIGFkZHJlc3MgYWNjb3VudCk7CgogICAgLyogRmlyZWQgd2hlbmV2ZXIgYW4gYWNjb3VudC1yZWFkZXIgY29udHJhY3QgaXMgcmVtb3ZlZC4gKi8KICAgIGV2ZW50IEFjY291bnRSZWFkZXJSZW1vdmVkKGFkZHJlc3MgcmVtb3ZlZEJ5LCBhZGRyZXNzIGFjY291bnQpOwoKICAgIC8qIEZpcmVkIHdoZW5ldmVyIGFuIGFjY291bnQtbWludGVyIGNvbnRyYWN0IGlzIGFkZGVkLiAqLwogICAgZXZlbnQgQWNjb3VudE1pbnRlckFkZGVkKGFkZHJlc3MgYWRkZWRCeSwgYWRkcmVzcyBhY2NvdW50KTsKCiAgICAvKiBGaXJlZCB3aGVuZXZlciBhbiBhY2NvdW50LW1pbnRlciBjb250cmFjdCBpcyByZW1vdmVkLiAqLwogICAgZXZlbnQgQWNjb3VudE1pbnRlclJlbW92ZWQoYWRkcmVzcyByZW1vdmVkQnksIGFkZHJlc3MgYWNjb3VudCk7CgogICAgLyogV2hlbiB0aGlzIGNvbnRyYWN0IGlzIGZpcnN0IHNldHVwIHdlIHVzZSB0aGUgY3JlYXRvciBhcyB0aGUgZmlyc3QgYWRtaW4gKi8gICAgCiAgICBmdW5jdGlvbiBBdXRoZW50aWNhdGlvbk1hbmFnZXIoKSB7CiAgICAgICAgLyogU2V0IHRoZSBmaXJzdCBhZG1pbiB0byBiZSB0aGUgcGVyc29uIGNyZWF0aW5nIHRoZSBjb250cmFjdCAqLwogICAgICAgIGFkbWluQWRkcmVzc2VzW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBBZG1pbkFkZGVkKDAsIG1zZy5zZW5kZXIpOwogICAgICAgIGFkbWluQXVkaXQubGVuZ3RoKys7CiAgICAgICAgYWRtaW5BdWRpdFthZG1pbkF1ZGl0Lmxlbmd0aCAtIDFdID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBpcyBjdXJyZW50bHkgYW4gYWRtaW4gKi8KICAgIGZ1bmN0aW9uIGlzQ3VycmVudEFkbWluKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdOwogICAgfQoKICAgIC8qIEdldHMgd2hldGhlciBvciBub3QgdGhlIHNwZWNpZmllZCBhZGRyZXNzIGhhcyBldmVyIGJlZW4gYW4gYWRtaW4gKi8KICAgIGZ1bmN0aW9uIGlzQ3VycmVudE9yUGFzdEFkbWluKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBhZG1pbkF1ZGl0Lmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAoYWRtaW5BdWRpdFtpXSA9PSBfYWRkcmVzcykKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBpcyBjdXJyZW50bHkgYW4gYWNjb3VudCByZWFkZXIgKi8KICAgIGZ1bmN0aW9uIGlzQ3VycmVudEFjY291bnRSZWFkZXIoYWRkcmVzcyBfYWRkcmVzcykgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBhY2NvdW50UmVhZGVyQWRkcmVzc2VzW19hZGRyZXNzXTsKICAgIH0KCiAgICAvKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBoYXMgZXZlciBiZWVuIGFuIGFkbWluICovCiAgICBmdW5jdGlvbiBpc0N1cnJlbnRPclBhc3RBY2NvdW50UmVhZGVyKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBhY2NvdW50UmVhZGVyQXVkaXQubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmIChhY2NvdW50UmVhZGVyQXVkaXRbaV0gPT0gX2FkZHJlc3MpCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaXMgY3VycmVudGx5IGFuIGFjY291bnQgbWludGVyICovCiAgICBmdW5jdGlvbiBpc0N1cnJlbnRBY2NvdW50TWludGVyKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYWNjb3VudE1pbnRlckFkZHJlc3Nlc1tfYWRkcmVzc107CiAgICB9CgogICAgLyogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaGFzIGV2ZXIgYmVlbiBhbiBhZG1pbiAqLwogICAgZnVuY3Rpb24gaXNDdXJyZW50T3JQYXN0QWNjb3VudE1pbnRlcihhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgYWNjb3VudE1pbnRlckF1ZGl0Lmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAoYWNjb3VudE1pbnRlckF1ZGl0W2ldID09IF9hZGRyZXNzKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qIEFkZHMgYSB1c2VyIHRvIG91ciBsaXN0IG9mIGFkbWlucyAqLwogICAgZnVuY3Rpb24gYWRkQWRtaW4oYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLwogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvLyBGYWlsIGlmIHRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IGFkbWluCiAgICAgICAgaWYgKGFkbWluQWRkcmVzc2VzW19hZGRyZXNzXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgCiAgICAgICAgLy8gQWRkIHRoZSB1c2VyCiAgICAgICAgYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdID0gdHJ1ZTsKICAgICAgICBBZG1pbkFkZGVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzKTsKICAgICAgICBhZG1pbkF1ZGl0Lmxlbmd0aCsrOwogICAgICAgIGFkbWluQXVkaXRbYWRtaW5BdWRpdC5sZW5ndGggLSAxXSA9IF9hZGRyZXNzOwoKICAgIH0KCiAgICAvKiBSZW1vdmVzIGEgdXNlciBmcm9tIG91ciBsaXN0IG9mIGFkbWlucyBidXQga2VlcHMgdGhlbSBpbiB0aGUgaGlzdG9yeSBhdWRpdCAqLwogICAgZnVuY3Rpb24gcmVtb3ZlQWRtaW4oYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLwogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvKiBEb24ndCBhbGxvdyByZW1vdmFsIG9mIHNlbGYgKi8KICAgICAgICBpZiAoX2FkZHJlc3MgPT0gbXNnLnNlbmRlcikKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8vIEZhaWwgaWYgdGhpcyBhY2NvdW50IGlzIGFscmVhZHkgbm9uLWFkbWluCiAgICAgICAgaWYgKCFhZG1pbkFkZHJlc3Nlc1tfYWRkcmVzc10pCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvKiBSZW1vdmUgdGhpcyBhZG1pbiB1c2VyICovCiAgICAgICAgYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdID0gZmFsc2U7CiAgICAgICAgQWRtaW5SZW1vdmVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzKTsKICAgIH0KCiAgICAvKiBBZGRzIGEgdXNlci9jb250cmFjdCB0byBvdXIgbGlzdCBvZiBhY2NvdW50IHJlYWRlcnMgKi8KICAgIGZ1bmN0aW9uIGFkZEFjY291bnRSZWFkZXIoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLwogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvLyBGYWlsIGlmIHRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IGluIHRoZSBsaXN0CiAgICAgICAgaWYgKGFjY291bnRSZWFkZXJBZGRyZXNzZXNbX2FkZHJlc3NdKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICAKICAgICAgICAvLyBBZGQgdGhlIGFjY291bnQgcmVhZGVyCiAgICAgICAgYWNjb3VudFJlYWRlckFkZHJlc3Nlc1tfYWRkcmVzc10gPSB0cnVlOwogICAgICAgIEFjY291bnRSZWFkZXJBZGRlZChtc2cuc2VuZGVyLCBfYWRkcmVzcyk7CiAgICAgICAgYWNjb3VudFJlYWRlckF1ZGl0Lmxlbmd0aCsrOwogICAgICAgIGFjY291bnRSZWFkZXJBdWRpdFthY2NvdW50UmVhZGVyQXVkaXQubGVuZ3RoIC0gMV0gPSBfYWRkcmVzczsKICAgIH0KCiAgICAvKiBSZW1vdmVzIGEgdXNlci9jb250cmFjdHMgZnJvbSBvdXIgbGlzdCBvZiBhY2NvdW50IHJlYWRlcnMgYnV0IGtlZXBzIHRoZW0gaW4gdGhlIGhpc3RvcnkgYXVkaXQgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZUFjY291bnRSZWFkZXIoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLwogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvLyBGYWlsIGlmIHRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IG5vdCBpbiB0aGUgbGlzdAogICAgICAgIGlmICghYWNjb3VudFJlYWRlckFkZHJlc3Nlc1tfYWRkcmVzc10pCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvKiBSZW1vdmUgdGhpcyBhY2NvdW50IHJlYWRlciAqLwogICAgICAgIGFjY291bnRSZWFkZXJBZGRyZXNzZXNbX2FkZHJlc3NdID0gZmFsc2U7CiAgICAgICAgQWNjb3VudFJlYWRlclJlbW92ZWQobXNnLnNlbmRlciwgX2FkZHJlc3MpOwogICAgfQoKICAgIC8qIEFkZCBhIGNvbnRyYWN0IHRvIG91ciBsaXN0IG9mIGFjY291bnQgbWludGVycyAqLwogICAgZnVuY3Rpb24gYWRkQWNjb3VudE1pbnRlcihhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgLyogRW5zdXJlIHdlJ3JlIGFuIGFkbWluICovCiAgICAgICAgaWYgKCFpc0N1cnJlbnRBZG1pbihtc2cuc2VuZGVyKSkKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8vIEZhaWwgaWYgdGhpcyBhY2NvdW50IGlzIGFscmVhZHkgaW4gdGhlIGxpc3QKICAgICAgICBpZiAoYWNjb3VudE1pbnRlckFkZHJlc3Nlc1tfYWRkcmVzc10pCiAgICAgICAgICAgIHRocm93OwogICAgICAgIAogICAgICAgIC8vIEFkZCB0aGUgbWludGVyCiAgICAgICAgYWNjb3VudE1pbnRlckFkZHJlc3Nlc1tfYWRkcmVzc10gPSB0cnVlOwogICAgICAgIEFjY291bnRNaW50ZXJBZGRlZChtc2cuc2VuZGVyLCBfYWRkcmVzcyk7CiAgICAgICAgYWNjb3VudE1pbnRlckF1ZGl0Lmxlbmd0aCsrOwogICAgICAgIGFjY291bnRNaW50ZXJBdWRpdFthY2NvdW50TWludGVyQXVkaXQubGVuZ3RoIC0gMV0gPSBfYWRkcmVzczsKICAgIH0KCiAgICAvKiBSZW1vdmVzIGEgdXNlci9jb250cmFjdHMgZnJvbSBvdXIgbGlzdCBvZiBhY2NvdW50IHJlYWRlcnMgYnV0IGtlZXBzIHRoZW0gaW4gdGhlIGhpc3RvcnkgYXVkaXQgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZUFjY291bnRNaW50ZXIoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLwogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvLyBGYWlsIGlmIHRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IG5vdCBpbiB0aGUgbGlzdAogICAgICAgIGlmICghYWNjb3VudE1pbnRlckFkZHJlc3Nlc1tfYWRkcmVzc10pCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICAvKiBSZW1vdmUgdGhpcyBtaW50ZXIgYWNjb3VudCAqLwogICAgICAgIGFjY291bnRNaW50ZXJBZGRyZXNzZXNbX2FkZHJlc3NdID0gZmFsc2U7CiAgICAgICAgQWNjb3VudE1pbnRlclJlbW92ZWQobXNnLnNlbmRlciwgX2FkZHJlc3MpOwogICAgfQp9CgovKiBUaGUgVG9rZW4gaXRzZWxmIGlzIGEgc2ltcGxlIGV4dGVuc2lvbiBvZiB0aGUgRVJDMjAgdGhhdCBhbGxvd3MgZm9yIGdyYW50aW5nIG90aGVyIFRva2VuIGNvbnRyYWN0cyBzcGVjaWFsIHJpZ2h0cyB0byBhY3Qgb24gYmVoYWxmIG9mIGFsbCB0cmFuc2ZlcnMuICovCmNvbnRyYWN0IFRva2VuIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8qIE1hcCBhbGwgb3VyIG91ciBiYWxhbmNlcyBmb3IgaXNzdWVkIHRva2VucyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CgogICAgLyogTWFwIGJldHdlZW4gdXNlcnMgYW5kIHRoZWlyIGFwcHJvdmFsIGFkZHJlc3NlcyBhbmQgYW1vdW50cyAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLyogTGlzdCBvZiBhbGwgdG9rZW4gaG9sZGVycyAqLwogICAgYWRkcmVzc1tdIGFsbFRva2VuSG9sZGVyczsKCiAgICAvKiBUaGUgbmFtZSBvZiB0aGUgY29udHJhY3QgKi8KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKCiAgICAvKiBUaGUgc3ltYm9sIGZvciB0aGUgY29udHJhY3QgKi8KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwoKICAgIC8qIEhvdyBtYW55IERQcyBhcmUgaW4gdXNlIGluIHRoaXMgY29udHJhY3QgKi8KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKCiAgICAvKiBEZWZpbmVzIHRoZSBjdXJyZW50IHN1cHBseSBvZiB0aGUgdG9rZW4gaW4gaXRzIG93biB1bml0cyAqLwogICAgdWludDI1NiB0b3RhbFN1cHBseUFtb3VudCA9IDA7CiAgICAKICAgIC8qIERlZmluZXMgdGhlIGFkZHJlc3Mgb2YgdGhlIFJlZnVuZCBNYW5hZ2VyIGNvbnRyYWN0IHdoaWNoIGlzIHRoZSBvbmx5IGNvbnRyYWN0IHRvIGRlc3Ryb3kgdG9rZW5zLiAqLwogICAgYWRkcmVzcyBwdWJsaWMgcmVmdW5kTWFuYWdlckNvbnRyYWN0QWRkcmVzczsKCiAgICAvKiBEZWZpbmVzIHRoZSBhZG1pbiBjb250cmFjdCB3ZSBpbnRlcmZhY2Ugd2l0aCBmb3IgY3JlZGVudGFpbHMuICovCiAgICBBdXRoZW50aWNhdGlvbk1hbmFnZXIgYXV0aGVudGljYXRpb25NYW5hZ2VyOwoKICAgIC8qIEluc3RhbmNlIG9mIGxvY2tpbiBjb250cmFjdCAqLwogICAgTG9ja2luTWFuYWdlciBsb2NraW5NYW5hZ2VyOwoKICAgIC8qKiBAZGV2IFJldHVybnMgdGhlIGJhbGFuY2UgdGhhdCBhIGdpdmVuIGFkZHJlc3MgaGFzIGF2YWlsYWJsZSBmb3IgdHJhbnNmZXIuCiAgICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gb3duZXIuCiAgICAgICovCiAgICBmdW5jdGlvbiBhdmFpbGFibGVCYWxhbmNlKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICAKICAgICAgICB1aW50MjU2IGxlbmd0aCA9ICBsb2NraW5NYW5hZ2VyLmdldExvY2tzKF9vd25lcik7CiAgICAKICAgICAgICB1aW50MjU2IGxvY2tlZFZhbHVlID0gMDsKICAgICAgICAKICAgICAgICBmb3IodWludDI1NiBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CgogICAgICAgICAgICBpZihsb2NraW5NYW5hZ2VyLmdldExvY2tzVW5sb2NrRGF0ZShfb3duZXIsIGkpID4gbm93KSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IF92YWx1ZSA9IGxvY2tpbk1hbmFnZXIuZ2V0TG9ja3NBbW91bnQoX293bmVyLCBpKTsgICAgCiAgICAgICAgICAgICAgICBsb2NrZWRWYWx1ZSA9IGxvY2tlZFZhbHVlLmFkZChfdmFsdWUpOyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXS5zdWIobG9ja2VkVmFsdWUpOwogICAgfQoKICAgIC8qIEZpcmVkIHdoZW4gdGhlIGZ1bmQgaXMgZXZlbnR1YWxseSBjbG9zZWQuICovCiAgICBldmVudCBGdW5kQ2xvc2VkKCk7CiAgICAKICAgIC8qIE91ciB0cmFuc2ZlciBldmVudCB0byBmaXJlIHdoZW5ldmVyIHdlIHNoaWZ0IFNNUlQgYXJvdW5kICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIAogICAgLyogT3VyIGFwcHJvdmFsIGV2ZW50IHdoZW4gb25lIHVzZXIgYXBwcm92ZXMgYW5vdGhlciB0byBjb250cm9sICovCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBmdW5kIHdpdGggbGlua3MgdG8gb3RoZXIgY29udHJhY3RzIHRoYXQgYXJlIHJlcXVpcmVkLiAqLwogICAgZnVuY3Rpb24gVG9rZW4oYWRkcmVzcyBfYXV0aGVudGljYXRpb25NYW5hZ2VyQWRkcmVzcykgewogICAgICAgIC8vIFNldHVwIGRlZmF1bHRzCiAgICAgICAgbmFtZSA9ICJQSUUgKEF1dGhvcml0byBDYXBpdGFsKSI7CiAgICAgICAgc3ltYm9sID0gIlBJRSI7CiAgICAgICAgZGVjaW1hbHMgPSAxODsKCiAgICAgICAgLyogU2V0dXAgYWNjZXNzIHRvIG91ciBvdGhlciBjb250cmFjdHMgKi8KICAgICAgICBhdXRoZW50aWNhdGlvbk1hbmFnZXIgPSBBdXRoZW50aWNhdGlvbk1hbmFnZXIoX2F1dGhlbnRpY2F0aW9uTWFuYWdlckFkZHJlc3MpOyAgICAgICAgCiAgICB9CgogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgbnVtd29yZHMpIHsKICAgICAgICBhc3NlcnQobXNnLmRhdGEubGVuZ3RoID09IG51bXdvcmRzICogMzIgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8qIFRoaXMgbW9kaWZpZXIgYWxsb3dzIGEgbWV0aG9kIHRvIG9ubHkgYmUgY2FsbGVkIGJ5IGFjY291bnQgcmVhZGVycyAqLwogICAgbW9kaWZpZXIgYWNjb3VudFJlYWRlck9ubHkgewogICAgICAgIGlmICghYXV0aGVudGljYXRpb25NYW5hZ2VyLmlzQ3VycmVudEFjY291bnRSZWFkZXIobXNnLnNlbmRlcikpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgLyogVGhpcyBtb2RpZmllciBhbGxvd3MgYSBtZXRob2QgdG8gb25seSBiZSBjYWxsZWQgYnkgY3VycmVudCBhZG1pbnMgKi8KICAgIG1vZGlmaWVyIGFkbWluT25seSB7CiAgICAgICAgaWYgKCFhdXRoZW50aWNhdGlvbk1hbmFnZXIuaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpIHRocm93OwogICAgICAgIF87CiAgICB9ICAgCiAgICAKICAgIGZ1bmN0aW9uIHNldExvY2tpbk1hbmFnZXJBZGRyZXNzKGFkZHJlc3MgX2xvY2tpbk1hbmFnZXIpIGFkbWluT25seSB7CiAgICAgICAgbG9ja2luTWFuYWdlciA9IExvY2tpbk1hbmFnZXIoX2xvY2tpbk1hbmFnZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJlZnVuZE1hbmFnZXJDb250cmFjdChhZGRyZXNzIF9yZWZ1bmRNYW5hZ2VyQ29udHJhY3RBZGRyZXNzKSBhZG1pbk9ubHkgewogICAgICAgIHJlZnVuZE1hbmFnZXJDb250cmFjdEFkZHJlc3MgPSBfcmVmdW5kTWFuYWdlckNvbnRyYWN0QWRkcmVzczsKICAgIH0KCiAgICAvKiBUcmFuc2ZlciBmdW5kcyBiZXR3ZWVuIHR3byBhZGRyZXNzZXMgdGhhdCBhcmUgbm90IHRoZSBjdXJyZW50IG1zZy5zZW5kZXIgLSB0aGlzIHJlcXVpcmVzIGFwcHJvdmFsIHRvIGhhdmUgYmVlbiBzZXQgc2VwYXJhdGVseSBhbmQgZm9sbG93cyBzdGFuZGFyZCBFUkMyMCBndWlkZWxpbmVzICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seVBheWxvYWRTaXplKDMpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAKICAgICAgICBpZiAoYXZhaWxhYmxlQmFsYW5jZShfZnJvbSkgPj0gX2Ftb3VudCAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwICYmIGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICBib29sIGlzTmV3ID0gYmFsYW5jZXNbX3RvXSA9PSAwOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgICAgICBpZiAoaXNOZXcpCiAgICAgICAgICAgICAgICB0b2tlbk93bmVyQWRkKF90byk7CiAgICAgICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPT0gMCkKICAgICAgICAgICAgICAgIHRva2VuT3duZXJSZW1vdmUoX2Zyb20pOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgaG9sZGVycyBvZiB0aGlzIGN1cnJlbmN5LiAqLwogICAgZnVuY3Rpb24gdG9rZW5Ib2xkZXJDb3VudCgpIGFjY291bnRSZWFkZXJPbmx5IGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsVG9rZW5Ib2xkZXJzLmxlbmd0aDsKICAgIH0KCiAgICAvKiBHZXRzIHRoZSB0b2tlbiBob2xkZXIgYXQgdGhlIHNwZWNpZmllZCBpbmRleC4gKi8KICAgIGZ1bmN0aW9uIHRva2VuSG9sZGVyKHVpbnQyNTYgX2luZGV4KSBhY2NvdW50UmVhZGVyT25seSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGFsbFRva2VuSG9sZGVyc1tfaW5kZXhdOwogICAgfQogCiAgICAvKiBBZGRzIGFuIGFwcHJvdmFsIGZvciB0aGUgc3BlY2lmaWVkIGFjY291bnQgdG8gc3BlbmQgbW9uZXkgb2YgdGhlIG1lc3NhZ2Ugc2VuZGVyIHVwIHRvIHRoZSBkZWZpbmVkIGxpbWl0ICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgb25seVBheWxvYWRTaXplKDIpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogR2V0cyB0aGUgY3VycmVudCBhbGxvd2FuY2UgdGhhdCBoYXMgYmVlbiBhcHByb3ZlZCBmb3IgdGhlIHNwZWNpZmllZCBzcGVuZGVyIG9mIHRoZSBvd25lciBhZGRyZXNzICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLyogR2V0cyB0aGUgdG90YWwgc3VwcGx5IGF2YWlsYWJsZSBvZiB0aGlzIHRva2VuICovCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHlBbW91bnQ7CiAgICB9CgogICAgLyogR2V0cyB0aGUgYmFsYW5jZSBvZiBhIHNwZWNpZmllZCBhY2NvdW50ICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8qIFRyYW5zZmVyIHRoZSBiYWxhbmNlIGZyb20gb3duZXIncyBhY2NvdW50IHRvIGFub3RoZXIgYWNjb3VudCAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seVBheWxvYWRTaXplKDIpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAgICAgICAgIAogICAgICAgIC8qIENoZWNrIGlmIHNlbmRlciBoYXMgYmFsYW5jZSBhbmQgZm9yIG92ZXJmbG93cyAqLwogICAgICAgIGlmIChhdmFpbGFibGVCYWxhbmNlKG1zZy5zZW5kZXIpIDwgX2Ftb3VudCB8fCBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KSA8IGJhbGFuY2VzW190b10pCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgLyogRG8gYSBjaGVjayB0byBzZWUgaWYgdGhleSBhcmUgbmV3LCBpZiBzbyB3ZSdsbCB3YW50IHRvIGFkZCBpdCB0byBvdXIgYXJyYXkgKi8KICAgICAgICBib29sIGlzUmVjaXBpZW50TmV3ID0gYmFsYW5jZXNbX3RvXSA9PSAwOwoKICAgICAgICAvKiBBZGQgYW5kIHN1YnRyYWN0IG5ldyBiYWxhbmNlcyAqLwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICAKICAgICAgICAvKiBDb25zb2xpZGF0ZSBhcnJheXMgaWYgdGhleSBhcmUgbmV3IG9yIGlmIHNlbmRlciBub3cgaGFzIGVtcHR5IGJhbGFuY2UgKi8KICAgICAgICBpZiAoaXNSZWNpcGllbnROZXcpCiAgICAgICAgICAgIHRva2VuT3duZXJBZGQoX3RvKTsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPD0gMCkKICAgICAgICAgICAgdG9rZW5Pd25lclJlbW92ZShtc2cuc2VuZGVyKTsKCiAgICAgICAgLyogRmlyZSBub3RpZmljYXRpb24gZXZlbnQgKi8KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOyAKICAgIH0KCiAgICAvKiBJZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaXMgbm90IGluIG91ciBvd25lciBsaXN0LCBhZGQgdGhlbSAtIHRoaXMgY2FuIGJlIGNhbGxlZCBieSBkZXNjZW5kZW50cyB0byBlbnN1cmUgdGhlIGRhdGFiYXNlIGlzIGtlcHQgdXAgdG8gZGF0ZS4gKi8KICAgIGZ1bmN0aW9uIHRva2VuT3duZXJBZGQoYWRkcmVzcyBfYWRkcikgaW50ZXJuYWwgewogICAgICAgIC8qIEZpcnN0IGNoZWNrIGlmIHRoZXkgYWxyZWFkeSBleGlzdCAqLwogICAgICAgIHVpbnQyNTYgdG9rZW5Ib2xkZXJDb3VudCA9IGFsbFRva2VuSG9sZGVycy5sZW5ndGg7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgdG9rZW5Ib2xkZXJDb3VudDsgaSsrKQogICAgICAgICAgICBpZiAoYWxsVG9rZW5Ib2xkZXJzW2ldID09IF9hZGRyKQogICAgICAgICAgICAgICAgLyogQWxyZWFkeSBmb3VuZCBzbyB3ZSBjYW4gYWJvcnQgbm93ICovCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgCiAgICAgICAgLyogVGhleSBkb24ndCBzZWVtIHRvIGV4aXN0LCBzbyBsZXQncyBhZGQgdGhlbSAqLwogICAgICAgIGFsbFRva2VuSG9sZGVycy5sZW5ndGgrKzsKICAgICAgICBhbGxUb2tlbkhvbGRlcnNbYWxsVG9rZW5Ib2xkZXJzLmxlbmd0aCAtIDFdID0gX2FkZHI7CiAgICB9CgogICAgLyogSWYgdGhlIHNwZWNpZmllZCBhZGRyZXNzIGlzIGluIG91ciBvd25lciBsaXN0LCByZW1vdmUgdGhlbSAtIHRoaXMgY2FuIGJlIGNhbGxlZCBieSBkZXNjZW5kZW50cyB0byBlbnN1cmUgdGhlIGRhdGFiYXNlIGlzIGtlcHQgdXAgdG8gZGF0ZS4gKi8KICAgIGZ1bmN0aW9uIHRva2VuT3duZXJSZW1vdmUoYWRkcmVzcyBfYWRkcikgaW50ZXJuYWwgewogICAgICAgIC8qIEZpbmQgb3V0IHdoZXJlIGluIG91ciBhcnJheSB0aGV5IGFyZSAqLwogICAgICAgIHVpbnQyNTYgdG9rZW5Ib2xkZXJDb3VudCA9IGFsbFRva2VuSG9sZGVycy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBmb3VuZEluZGV4ID0gMDsKICAgICAgICBib29sIGZvdW5kID0gZmFsc2U7CiAgICAgICAgdWludDI1NiBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkhvbGRlckNvdW50OyBpKyspCiAgICAgICAgICAgIGlmIChhbGxUb2tlbkhvbGRlcnNbaV0gPT0gX2FkZHIpIHsKICAgICAgICAgICAgICAgIGZvdW5kSW5kZXggPSBpOwogICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAvKiBJZiB3ZSBkaWRuJ3QgZmluZCB0aGVtIGp1c3QgcmV0dXJuICovCiAgICAgICAgaWYgKCFmb3VuZCkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIAogICAgICAgIC8qIFdlIG5vdyBuZWVkIHRvIHNodWZmbGUgZG93biB0aGUgYXJyYXkgKi8KICAgICAgICBmb3IgKGkgPSBmb3VuZEluZGV4OyBpIDwgdG9rZW5Ib2xkZXJDb3VudCAtIDE7IGkrKykKICAgICAgICAgICAgYWxsVG9rZW5Ib2xkZXJzW2ldID0gYWxsVG9rZW5Ib2xkZXJzW2kgKyAxXTsKICAgICAgICBhbGxUb2tlbkhvbGRlcnMubGVuZ3RoLS07CiAgICB9CgogICAgLyogTWludCBuZXcgdG9rZW5zIC0gdGhpcyBjYW4gb25seSBiZSBkb25lIGJ5IHNwZWNpYWwgY2FsbGVycyAoaS5lLiB0aGUgSUNPIG1hbmFnZW1lbnQpIGR1cmluZyB0aGUgSUNPIHBoYXNlLiAqLwogICAgZnVuY3Rpb24gbWludFRva2VucyhhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9hbW91bnQpIG9ubHlQYXlsb2FkU2l6ZSgyKSB7CgogICAgICAgIC8qIGlmIGl0IGlzIGNvbW1pbmcgZnJvbSBhY2NvdW50IG1pbnRlciAqLwogICAgICAgIGlmICggISBhdXRoZW50aWNhdGlvbk1hbmFnZXIuaXNDdXJyZW50QWNjb3VudE1pbnRlcihtc2cuc2VuZGVyKSkKICAgICAgICAgICAgdGhyb3c7CgogICAgICAgIC8qIE1pbnQgdGhlIHRva2VucyBmb3IgdGhlIG5ldyBhZGRyZXNzKi8KICAgICAgICBib29sIGlzTmV3ID0gYmFsYW5jZXNbX2FkZHJlc3NdID09IDA7CiAgICAgICAgdG90YWxTdXBwbHlBbW91bnQgPSB0b3RhbFN1cHBseUFtb3VudC5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX2FkZHJlc3NdID0gYmFsYW5jZXNbX2FkZHJlc3NdLmFkZChfYW1vdW50KTsKCiAgICAgICAgbG9ja2luTWFuYWdlci5kZWZhdWx0TG9ja2luKF9hZGRyZXNzLCBfYW1vdW50KTsgICAgICAgIAoKICAgICAgICBpZiAoaXNOZXcpCiAgICAgICAgICAgIHRva2VuT3duZXJBZGQoX2FkZHJlc3MpOwogICAgICAgIFRyYW5zZmVyKDAsIF9hZGRyZXNzLCBfYW1vdW50KTsKICAgIH0KCiAgICAvKiogVGhpcyB3aWxsIGRlc3Ryb3kgdGhlIHRva2VucyBvZiB0aGUgaW52ZXN0b3IgYW5kIGNhbGxlZCBieSBzYWxlIGNvbnRyYWN0IG9ubHkgYXQgdGhlIHRpbWUgb2YgcmVmdW5kLiAqLwogICAgZnVuY3Rpb24gZGVzdHJveVRva2VucyhhZGRyZXNzIF9pbnZlc3RvciwgdWludDI1NiB0b2tlbkNvdW50KSByZXR1cm5zIChib29sKSB7CiAgICAgICAgCiAgICAgICAgLyogQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHJlZnVuZCBtYW5hZ2VyLCBhbHNvIHJlZnVuZCBtYW5hZ2VyIGFkZHJlc3MgbXVzdCBub3QgYmUgZW1wdHkgKi8KICAgICAgICBpZiAoIHJlZnVuZE1hbmFnZXJDb250cmFjdEFkZHJlc3MgID09IDB4MCB8fCBtc2cuc2VuZGVyICE9IHJlZnVuZE1hbmFnZXJDb250cmFjdEFkZHJlc3MpCiAgICAgICAgICAgIHRocm93OwoKICAgICAgICB1aW50MjU2IGJhbGFuY2UgPSBhdmFpbGFibGVCYWxhbmNlKF9pbnZlc3Rvcik7CgogICAgICAgIGlmIChiYWxhbmNlIDwgdG9rZW5Db3VudCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBiYWxhbmNlc1tfaW52ZXN0b3JdIC09IHRva2VuQ291bnQ7CiAgICAgICAgdG90YWxTdXBwbHlBbW91bnQgLT0gdG9rZW5Db3VudDsKCiAgICAgICAgaWYoYmFsYW5jZXNbX2ludmVzdG9yXSA8PSAwKQogICAgICAgICAgICB0b2tlbk93bmVyUmVtb3ZlKF9pbnZlc3Rvcik7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9'.
	

]
