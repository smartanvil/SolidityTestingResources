Class {
	#name : #SRT1bafa500bd219a2afb8f2d0286cc9480c7bd95c2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1bafa500bd219a2afb8f2d0286cc9480c7bd95c2 >> base64 [
	^ ''.
	

]
