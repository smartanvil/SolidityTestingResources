Class {
	#name : #SRTb24e9e3dc822daa8ace9af9c9b2ff8ab8348bc93,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb24e9e3dc822daa8ace9af9c9b2ff8ab8348bc93 >> base64 [
	^ ''.
	

]
