Class {
	#name : #SRT142020a28b22f7e68a9d8f9e9d24c43a2572a8cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT142020a28b22f7e68a9d8f9e9d24c43a2572a8cd >> base64 [
	^ ''.
	

]
