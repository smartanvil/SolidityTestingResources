Class {
	#name : #SRT90528aeb3a2b736b780fd1b6c478bb7e1d643170,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90528aeb3a2b736b780fd1b6c478bb7e1d643170 >> base64 [
	^ ''.
	

]
