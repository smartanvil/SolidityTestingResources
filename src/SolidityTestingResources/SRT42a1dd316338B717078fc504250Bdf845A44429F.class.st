Class {
	#name : #SRT42a1dd316338B717078fc504250Bdf845A44429F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42a1dd316338B717078fc504250Bdf845A44429F >> base64 [
	^ ''.
	

]
