Class {
	#name : #SRTb236e2477b8ed34b203b60e2b88884ee5b31a3c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb236e2477b8ed34b203b60e2b88884ee5b31a3c3 >> base64 [
	^ ''.
	

]
