Class {
	#name : #SRT369eb6821c94a78428f7c86c768590f53950068f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT369eb6821c94a78428f7c86c768590f53950068f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CmNvbnRyYWN0IEJhc2UgewogICAgbW9kaWZpZXIgb25seShhZGRyZXNzIGFsbG93ZWQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWxsb3dlZCk7CiAgICAgICAgXzsKICAgIH0KICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgIC8vICogICAgICAgICAgcmVlbnRyYW5jeSBoYW5kbGluZyAgICAgICAgICAgICAgICAgICoKICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgIHVpbnQgY29uc3RhbnQgaW50ZXJuYWwgTDAwID0gMiAqKiAwOwogICAgdWludCBjb25zdGFudCBpbnRlcm5hbCBMMDEgPSAyICoqIDE7CiAgICB1aW50IGNvbnN0YW50IGludGVybmFsIEwwMiA9IDIgKiogMjsKICAgIHVpbnQgY29uc3RhbnQgaW50ZXJuYWwgTDAzID0gMiAqKiAzOwogICAgdWludCBjb25zdGFudCBpbnRlcm5hbCBMMDQgPSAyICoqIDQ7CiAgICB1aW50IGNvbnN0YW50IGludGVybmFsIEwwNSA9IDIgKiogNTsKICAgIHVpbnQgcHJpdmF0ZSBiaXRsb2NrcyA9IDA7CiAgICBtb2RpZmllciBub0FueVJlZW50cmFuY3kgewogICAgICAgIHZhciBfbG9ja3MgPSBiaXRsb2NrczsKICAgICAgICByZXF1aXJlKF9sb2NrcyA9PSAwKTsKICAgICAgICBiaXRsb2NrcyA9IHVpbnQoLTEpOwogICAgICAgIF87CiAgICAgICAgYml0bG9ja3MgPSBfbG9ja3M7CiAgICB9Cn0KLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQpjb250cmFjdCBPd25lZCBpcyBCYXNlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBuZXdPd25lcjsKICAgIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG9ubHkob3duZXIpIHsKICAgICAgICBuZXdPd25lciA9IF9uZXdPd25lcjsKICAgIH0KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYyBvbmx5KG5ld093bmVyKSB7CiAgICAgICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvKTsKfQpjb250cmFjdCBFUkMyMCBpcyBPd25lZCB7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgaXNTdGFydGVkT25seSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgaXNTdGFydGVkT25seSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIGZ1bmN0aW9uIGFwcHJvdmVfZml4ZWQoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfY3VycmVudFZhbHVlLCB1aW50IF92YWx1ZSkgcHVibGljIGlzU3RhcnRlZE9ubHkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gX2N1cnJlbnRWYWx1ZSl7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyBpc1N0YXJ0ZWRPbmx5IHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGJvb2wgICAgcHVibGljIGlzU3RhcnRlZCA9IGZhbHNlOwogICAgbW9kaWZpZXIgaXNTdGFydGVkT25seSgpIHsKICAgICAgICByZXF1aXJlKGlzU3RhcnRlZCk7CiAgICAgICAgXzsKICAgIH0KfQpjb250cmFjdCBBVEZTVG9rZW4gaXMgRVJDMjAgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQVRGUyBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJBVEZTIjsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7CiAgICBhZGRyZXNzIHB1YmxpYyBjcm93ZHNhbGVNaW50ZXI7CiAgICBtb2RpZmllciBvbmx5Q3Jvd2RzYWxlTWludGVyKCl7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyb3dkc2FsZU1pbnRlcik7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIGlzTm90U3RhcnRlZE9ubHkoKSB7CiAgICAgICAgcmVxdWlyZSghaXNTdGFydGVkKTsKICAgICAgICBfOwogICAgfQogICAgZnVuY3Rpb24gQVRGU1Rva2VuKGFkZHJlc3MgX2Nyb3dkc2FsZU1pbnRlcikgcHVibGljIHsKICAgICAgICBjcm93ZHNhbGVNaW50ZXIgPSBfY3Jvd2RzYWxlTWludGVyOwogICAgfQogICAgZnVuY3Rpb24gZ2V0VG90YWxTdXBwbHkoKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgcmV0dXJucyh1aW50KQogICAgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KICAgIGZ1bmN0aW9uIHN0YXJ0KCkKICAgIHB1YmxpYwogICAgb25seUNyb3dkc2FsZU1pbnRlcgogICAgaXNOb3RTdGFydGVkT25seQogICAgewogICAgICAgIGlzU3RhcnRlZCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBlbWVyZ2VuY3lTdG9wKCkKICAgIHB1YmxpYwogICAgb25seShvd25lcikKICAgIHsKICAgICAgICBpc1N0YXJ0ZWQgPSBmYWxzZTsKICAgIH0KICAgIC8vPT09PT09PT09PT09PT09PT0gQ3Jvd2RzYWxlIE9ubHkgPT09PT09PT09PT09PT09PT0KICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljCiAgICBvbmx5Q3Jvd2RzYWxlTWludGVyCiAgICBpc05vdFN0YXJ0ZWRPbmx5CiAgICByZXR1cm5zKGJvb2wpCiAgICB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9'.
	

]
