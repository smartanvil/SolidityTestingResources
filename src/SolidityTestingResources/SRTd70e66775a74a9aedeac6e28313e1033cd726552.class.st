Class {
	#name : #SRTd70e66775a74a9aedeac6e28313e1033cd726552,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd70e66775a74a9aedeac6e28313e1033cd726552 >> base64 [
	^ ''.
	

]
