Class {
	#name : #SRT51db62d862314d036797c8ae897011dadb8256ce,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51db62d862314d036797c8ae897011dadb8256ce >> base64 [
	^ ''.
	

]
