Class {
	#name : #SRT3cf09759df237446a84c4de526d39e7b2dff0cdc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3cf09759df237446a84c4de526d39e7b2dff0cdc >> base64 [
	^ ''.
	

]
