Class {
	#name : #SRTA667227cA1b68563D9245AD91AAb9DB58A60C382,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA667227cA1b68563D9245AD91AAb9DB58A60C382 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gQWRkIGEgbnVtYmVyIHRvIGFub3RoZXIgbnVtYmVyLCBjaGVja2luZyBmb3Igb3ZlcmZsb3dzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEgJiYgYyA+PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIFN1YnRyYWN0IGEgbnVtYmVyIGZyb20gYW5vdGhlciBudW1iZXIsIGNoZWNraW5nIGZvciB1bmRlcmZsb3dzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCQp9Cgpjb250cmFjdCBPd25lZCB7CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9Cn0KCmludGVyZmFjZSB0b2tlbiB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSA7CglmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7Cn0KCmNvbnRyYWN0IElRVENyb3dkc2FsZSBpcyBPd25lZHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgkKCXN0cnVjdCBDb250cmlidXRvckRhdGF7CgkJYm9vbCBpc0FjdGl2ZTsKCQlib29sIGlzVG9rZW5EaXN0cmlidXRlZDsKCQl1aW50IGNvbnRyaWJ1dGlvbkFtb3VudDsJLy8gRVRIIGNvbnRyaWJ1dGlvbgoJCXVpbnQgdG9rZW5zQW1vdW50OwkJCS8vIEV4Y2hhbmdlZCBJUVQgYW1vdW50Cgl9CgkKCW1hcHBpbmcoYWRkcmVzcyA9PiBDb250cmlidXRvckRhdGEpIHB1YmxpYyBjb250cmlidXRvckxpc3Q7CgltYXBwaW5nKHVpbnQgPT4gYWRkcmVzcykgY29udHJpYnV0b3JJbmRleGVzOwoJdWludCBuZXh0Q29udHJpYnV0b3JJbmRleDsKCXVpbnQgY29udHJpYnV0b3JDb3VudDsKICAgIAogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CiAgICB1aW50IHB1YmxpYyBmdW5kaW5nTGltaXQ7CiAgICB1aW50IHB1YmxpYyBhbW91bnRSYWlzZWQ7Cgl1aW50IHB1YmxpYyByZW1haW5BbW91bnQ7CiAgICB1aW50IHB1YmxpYyBkZWFkbGluZTsKICAgIHVpbnQgcHVibGljIGV4Y2hhbmdlVG9rZW5SYXRlOwogICAgdG9rZW4gcHVibGljIHRva2VuUmV3YXJkOwoJdWludDI1NiBwdWJsaWMgdG9rZW5CYWxhbmNlOwogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBpc0lRVERpc3RyaWJ1dGVkID0gZmFsc2U7CiAgICAKCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIFRyYW5jaGUgMSBjcm93ZHNhbGUgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUKICAgIC8vIFN0YXJ0IC0gTW9uZGF5LCAyNS1TZXAtMTcgMTI6MDA6MDAgVVRDIC8gMTJwbSBHTVQgMjV0aCBTZXB0ZW1iZXIgMjAxNwogICAgLy8gVGllcjEgIC0gU3VuZGF5LCAxLU9jdC0xNyAxNjowMDowMCBVVEMgLyAxNnBtIEdNVCAxc3QgT2N0b2JlciAyMDE3CiAgICAvLyBUaWVyMiAgLSBXZWRuZXNkYXksIDExLU9jdC0xNyAxNjowMDowMCBVVEMgLyAxNnBtIEdNVCAxMXRoIE9jdG9iZXIgMjAxNwogICAgLy8gVGllcjMgIC0gTW9uZGF5LCAyMS1PY3QtMTcgMTY6MDA6MDAgVVRDIC8gMTZwbSBHTVQgMjF0aCBPY3RvYmVyIDIwMTcKICAgIC8vIEVuZCAtIFNhdHVyZGF5LCAyNS1Ob3YtMTcgMTI6MDA6MDAgVVRDIC8gMTJwbSBHTVQgMjUgTm92ZW1iZXIgMjAxNyAKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgU1RBUlRfVElNRSA9IDE1MDYzNDA4MDA7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTRUNPTkRfVElFUl9TQUxFX1NUQVJUX1RJTUUgPSAxNTA2Nzg3MjAwOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVEhJUkRfVElFUl9TQUxFX1NUQVJUX1RJTUUgPSAxNTA3NjUxMjAwOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgRk9VUlRIX1RJRVJfU0FMRV9TVEFSVF9USU1FID0gMTUwODUxNTIwMDsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEVORF9USU1FID0gMTUxMTYxMTIwMDsKCQoJCiAgICAKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gY3Jvd2RzYWxlIGV4Y2hhbmdlIHJhdGUKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgdWludCBwdWJsaWMgU1RBUlRfUkFURSA9IDkwMDsKICAgIHVpbnQgcHVibGljIFNFQ09ORF9USUVSX1JBVEUgPSA4NTA7CiAgICB1aW50IHB1YmxpYyBUSElSRF9USUVSX1JBVEUgPSA4MDA7CiAgICB1aW50IHB1YmxpYyBGT1VSVEhfUkFURSA9IDcwMDsKICAgIAoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gRnVuZGluZyBHb2FsCiAgICAvLyAgICAtIEhBUkQgQ0FQIDogMzMwMDAgRVRICiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEZVTkRJTkdfRVRIX0hBUkRfQ0FQID0gMzMwMDA7CiAgICAKICAgIC8vIElRVCB0b2tlbiBkZWNpbWFscwogICAgdWludDggcHVibGljIGNvbnN0YW50IElRVF9ERUNJTUFMUyA9IDg7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJUVRfREVDSU1BTFNGQUNUT1IgPSAxMCoqdWludChJUVRfREVDSU1BTFMpOwogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBJUVRfRlVOREFUSU9OX0FERFJFU1MgPSAweEI1OGQ2N2NlZDFFNDgwYUM3RkJBZjcwZGMyYjAyM2UzMDE0MGZCQjQ7CiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBJUVRfQ09OVFJBQ1RfQUREUkVTUyA9IDB4NTFlZTgyNjQxQWMyMzhCRGUzNEI5ODU5Zjk4RjVGMzExZDZFNDk1NDsKCiAgICBldmVudCBHb2FsUmVhY2hlZChhZGRyZXNzIHJhaXNpbmdBZGRyZXNzLCB1aW50IGFtb3VudFJhaXNlZCk7CglldmVudCBMaW1pdFJlYWNoZWQoYWRkcmVzcyByYWlzaW5nQWRkcmVzcywgdWludCBhbW91bnRSYWlzZWQpOwogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CglldmVudCBXaXRoZHJhd0ZhaWxlZChhZGRyZXNzIHJhaXNpbmdBZGRyZXNzLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CglldmVudCBGdW5kUmV0dXJuKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CgogICAgLyoqCiAgICAgKiBDb25zdHJjdG9yIGZ1bmN0aW9uCiAgICAgKgogICAgICogU2V0dXAgdGhlIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIElRVENyb3dkc2FsZSgKICAgICkgewogICAgICAgIGJlbmVmaWNpYXJ5ID0gSVFUX0ZVTkRBVElPTl9BRERSRVNTOwogICAgICAgIGZ1bmRpbmdMaW1pdCA9IEZVTkRJTkdfRVRIX0hBUkRfQ0FQICogMSBldGhlcjsgIC8vIEZ1bmRpbmcgbGltaXQgMzMwMDAgRVRICgkJCiAgICAgICAgZGVhZGxpbmUgPSBFTkRfVElNRTsgIC8vIDIwMTctMTEtMjUgMTI6MDA6MDAgVVRDCiAgICAgICAgZXhjaGFuZ2VUb2tlblJhdGUgPSBGT1VSVEhfUkFURSAqIElRVF9ERUNJTUFMU0ZBQ1RPUjsKICAgICAgICB0b2tlblJld2FyZCA9IHRva2VuKElRVF9DT05UUkFDVF9BRERSRVNTKTsKCQljb250cmlidXRvckNvdW50ID0gMDsKICAgIH0KCiAgICAvKioKICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uCiAgICAgKgogICAgICogVGhlIGZ1bmN0aW9uIHdpdGhvdXQgbmFtZSBpcyB0aGUgZGVmYXVsdCBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBhbnlvbmUgc2VuZHMgZnVuZHMgdG8gYSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKCQkKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVDbG9zZWQpOwogICAgICAgIHJlcXVpcmUobm93ID49IFNUQVJUX1RJTUUgJiYgbm93IDwgRU5EX1RJTUUpOwogICAgICAgIAoJCXByb2Nlc3NUcmFuc2FjdGlvbihtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoJCgkvKioKCSAqIFByb2Nlc3MgdHJhbnNhY3Rpb24KCSAqLwoJZnVuY3Rpb24gcHJvY2Vzc1RyYW5zYWN0aW9uKGFkZHJlc3MgX2NvbnRyaWJ1dG9yLCB1aW50IF9hbW91bnQpIGludGVybmFsewkKCQl1aW50IGNvbnRyaWJ1dGlvbkV0aEFtb3VudCA9IF9hbW91bnQ7CgkJCQogICAgICAgIGFtb3VudFJhaXNlZCArPSBjb250cmlidXRpb25FdGhBbW91bnQ7ICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbmV3bHkgcmVjZWl2ZWQgRVRICgkJcmVtYWluQW1vdW50ICs9IGNvbnRyaWJ1dGlvbkV0aEFtb3VudDsKICAgICAgICAKCQkvLyBjYWxjdWFsdGUgZXhjaGFuZ2VkIHRva2VuIGJhc2VkIG9uIGV4Y2hhbmdlIHJhdGUKICAgICAgICBpZiAobm93ID49IFNUQVJUX1RJTUUgJiYgbm93IDwgU0VDT05EX1RJRVJfU0FMRV9TVEFSVF9USU1FKXsKCQkJZXhjaGFuZ2VUb2tlblJhdGUgPSBTVEFSVF9SQVRFICogSVFUX0RFQ0lNQUxTRkFDVE9SOwogICAgICAgIH0KICAgICAgICBpZiAobm93ID49IFNFQ09ORF9USUVSX1NBTEVfU1RBUlRfVElNRSAmJiBub3cgPCBUSElSRF9USUVSX1NBTEVfU1RBUlRfVElNRSl7CiAgICAgICAgICAgIGV4Y2hhbmdlVG9rZW5SYXRlID0gU0VDT05EX1RJRVJfUkFURSAqIElRVF9ERUNJTUFMU0ZBQ1RPUjsKICAgICAgICB9CiAgICAgICAgaWYgKG5vdyA+PSBUSElSRF9USUVSX1NBTEVfU1RBUlRfVElNRSAmJiBub3cgPCBGT1VSVEhfVElFUl9TQUxFX1NUQVJUX1RJTUUpewogICAgICAgICAgICBleGNoYW5nZVRva2VuUmF0ZSA9IFRISVJEX1RJRVJfUkFURSAqIElRVF9ERUNJTUFMU0ZBQ1RPUjsKICAgICAgICB9CiAgICAgICAgaWYgKG5vdyA+PSBGT1VSVEhfVElFUl9TQUxFX1NUQVJUX1RJTUUgJiYgbm93IDwgRU5EX1RJTUUpewogICAgICAgICAgICBleGNoYW5nZVRva2VuUmF0ZSA9IEZPVVJUSF9SQVRFICogSVFUX0RFQ0lNQUxTRkFDVE9SOwogICAgICAgIH0KICAgICAgICB1aW50IGFtb3VudElxdFRva2VuID0gX2Ftb3VudCAqIGV4Y2hhbmdlVG9rZW5SYXRlIC8gMSBldGhlcjsKCQkKCQlpZiAoY29udHJpYnV0b3JMaXN0W19jb250cmlidXRvcl0uaXNBY3RpdmUgPT0gZmFsc2UpeyAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGNvbnRyaWJ1dG9yIGhhcyBhbHJlYWR5IGNvbnRyaWJ1dGVkCgkJCWNvbnRyaWJ1dG9yTGlzdFtfY29udHJpYnV0b3JdLmlzQWN0aXZlID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGhpcyBhY3Rpdml0eSB0byB0cnVlCgkJCWNvbnRyaWJ1dG9yTGlzdFtfY29udHJpYnV0b3JdLmNvbnRyaWJ1dGlvbkFtb3VudCA9IGNvbnRyaWJ1dGlvbkV0aEFtb3VudDsgICAgLy8gU2V0IGhpcyBjb250cmlidXRpb24KCQkJY29udHJpYnV0b3JMaXN0W19jb250cmlidXRvcl0udG9rZW5zQW1vdW50ID0gYW1vdW50SXF0VG9rZW47CgkJCWNvbnRyaWJ1dG9yTGlzdFtfY29udHJpYnV0b3JdLmlzVG9rZW5EaXN0cmlidXRlZCA9IGZhbHNlOwoJCQljb250cmlidXRvckluZGV4ZXNbbmV4dENvbnRyaWJ1dG9ySW5kZXhdID0gX2NvbnRyaWJ1dG9yOyAgICAgICAgICAgICAgICAgIC8vIFNldCBjb250cmlidXRvcnMgaW5kZXgKCQkJbmV4dENvbnRyaWJ1dG9ySW5kZXgrKzsKCQkJY29udHJpYnV0b3JDb3VudCsrOwoJCX0KCQllbHNlewoJCQljb250cmlidXRvckxpc3RbX2NvbnRyaWJ1dG9yXS5jb250cmlidXRpb25BbW91bnQgKz0gY29udHJpYnV0aW9uRXRoQW1vdW50OyAgIC8vIEFkZCBjb250cmlidXRpb24gYW1vdW50IHRvIGV4aXN0aW5nIGNvbnRyaWJ1dG9yCgkJCWNvbnRyaWJ1dG9yTGlzdFtfY29udHJpYnV0b3JdLnRva2Vuc0Ftb3VudCArPSBhbW91bnRJcXRUb2tlbjsgICAgICAgICAgICAgLy8gbG9nIHRva2VuIGFtb3VudGAKCQl9CgkJCiAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGNvbnRyaWJ1dGlvbkV0aEFtb3VudCwgdHJ1ZSk7CgkJCgkJaWYgKGFtb3VudFJhaXNlZCA+PSBmdW5kaW5nTGltaXQpewoJCQkvLyBjbG9zZSBjcm93ZHNhbGUgYmVjYXVzZSB0aGUgY3Jvd2RzYWxlIGxpbWl0IGlzIHJlYWNoZWQKCQkJY3Jvd2RzYWxlQ2xvc2VkID0gdHJ1ZTsKCQl9CQkKCQkKCX0KCiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lKCkgeyBpZiAobm93ID49IGRlYWRsaW5lKSBfOyB9CQoJbW9kaWZpZXIgYWZ0ZXJDcm93ZHNhbGVDbG9zZWQoKSB7IGlmIChjcm93ZHNhbGVDbG9zZWQgPT0gdHJ1ZSB8fCBub3cgPj0gZGVhZGxpbmUpIF87IH0KCQoJCgkvKioKICAgICAqIGNsb3NlIENyb3dkc2FsZQogICAgICoKICAgICAqLwoJZnVuY3Rpb24gY2xvc2VDcm93ZFNhbGUoKXsKCQlyZXF1aXJlKGJlbmVmaWNpYXJ5ID09IG1zZy5zZW5kZXIpOwoJCWlmICggYmVuZWZpY2lhcnkgPT0gbXNnLnNlbmRlcikgewoJCQljcm93ZHNhbGVDbG9zZWQgPSB0cnVlOwoJCX0KCX0KCQogICAgLyoqCiAgICAgKiBDaGVjayB0b2tlbiBiYWxhbmNlCiAgICAgKgogICAgICovCglmdW5jdGlvbiBjaGVja1Rva2VuQmFsYW5jZSgpewoJCWlmICggYmVuZWZpY2lhcnkgPT0gbXNnLnNlbmRlcikgewoJCQkvL2NoZWNrIGN1cnJlbnQgdG9rZW4gYmFsYW5jZQoJCQl0b2tlbkJhbGFuY2UgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CgkJfQoJfQoJCiAgICAvKioKICAgICAqIFdpdGhkcmF3IHRoZSBhbGwgZnVuZHMKICAgICAqCiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGdvYWwgb3IgdGltZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkLCBhbmQgaWYgc28sIGFuZCB0aGUgZnVuZGluZyBnb2FsIHdhcyByZWFjaGVkLAogICAgICogc2VuZHMgdGhlIGVudGlyZSBhbW91bnQgdG8gdGhlIGJlbmVmaWNpYXJ5LiAKICAgICAqLwogICAgZnVuY3Rpb24gc2FmZVdpdGhkcmF3YWxBbGwoKSB7CiAgICAgICAgaWYgKCBiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIGlmIChiZW5lZmljaWFyeS5zZW5kKGFtb3VudFJhaXNlZCkpIHsKICAgICAgICAgICAgICAgIEZ1bmRUcmFuc2ZlcihiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkLCBmYWxzZSk7CgkJCQlyZW1haW5BbW91bnQgPSByZW1haW5BbW91bnQgLSBhbW91bnRSYWlzZWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CgkJCQlXaXRoZHJhd0ZhaWxlZChiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkLCBmYWxzZSk7CgkJCQkvL0lmIHdlIGZhaWwgdG8gc2VuZCB0aGUgZnVuZHMgdG8gYmVuZWZpY2lhcnkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCQoJLyoqCiAgICAgKiBXaXRoZHJhdyB0aGUgZnVuZHMKICAgICAqCiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGdvYWwgb3IgdGltZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkLCBhbmQgaWYgc28sIGFuZCB0aGUgZnVuZGluZyBnb2FsIHdhcyByZWFjaGVkLAogICAgICogc2VuZHMgdGhlIGVudGlyZSBhbW91bnQgdG8gdGhlIGJlbmVmaWNpYXJ5LiAKICAgICAqLwogICAgZnVuY3Rpb24gc2FmZVdpdGhkcmF3YWxBbW91bnQodWludDI1NiB3aXRoZHJhd0Ftb3VudCkgewogICAgICAgIGlmIChiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIGlmIChiZW5lZmljaWFyeS5zZW5kKHdpdGhkcmF3QW1vdW50KSkgewogICAgICAgICAgICAgICAgRnVuZFRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB3aXRoZHJhd0Ftb3VudCwgZmFsc2UpOwoJCQkJcmVtYWluQW1vdW50ID0gcmVtYWluQW1vdW50IC0gd2l0aGRyYXdBbW91bnQ7CiAgICAgICAgICAgIH0gZWxzZSB7CgkJCQlXaXRoZHJhd0ZhaWxlZChiZW5lZmljaWFyeSwgd2l0aGRyYXdBbW91bnQsIGZhbHNlKTsKCQkJCS8vSWYgd2UgZmFpbCB0byBzZW5kIHRoZSBmdW5kcyB0byBiZW5lZmljaWFyeQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoJCgkvKioKCSAqIFdpdGhkcmF3IElRVCAKICAgICAqIAoJICogSWYgdGhlcmUgYXJlIHNvbWUgcmVtYWluaW5nIElRVCBpbiB0aGUgY29udHJhY3QgCgkgKiBhZnRlciBhbGwgdG9rZW4gYXJlIGRpc3RyaWJ1dGVkIHRoZSBjb250cmlidXRvciwKCSAqIHRoZSBiZW5lZmljaWFyeSBjYW4gd2l0aGRyYXcgdGhlIElRVCBpbiB0aGUgY29udHJhY3QKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3SVFUKHVpbnQyNTYgdG9rZW5BbW91bnQpIGFmdGVyQ3Jvd2RzYWxlQ2xvc2VkIHsKCQlyZXF1aXJlKGJlbmVmaWNpYXJ5ID09IG1zZy5zZW5kZXIpOwogICAgICAgIGlmIChpc0lRVERpc3RyaWJ1dGVkICYmIGJlbmVmaWNpYXJ5ID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIoYmVuZWZpY2lhcnksIHRva2VuQW1vdW50KTsKCQkJLy8gdXBkYXRlIHRva2VuIGJhbGFuY2UKCQkJdG9rZW5CYWxhbmNlID0gdG9rZW5SZXdhcmQuYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgICAgIH0KICAgIH0KCQoKCS8qKgogICAgICogRGlzdHJpYnV0ZSB0b2tlbgogICAgICoKICAgICAqIENoZWNrcyB0byBzZWUgaWYgZ29hbCBvciB0aW1lIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQsIGFuZCBpZiBzbywgYW5kIHRoZSBmdW5kaW5nIGdvYWwgd2FzIHJlYWNoZWQsCiAgICAgKiBkaXN0cmlidXRlIHRva2VuIHRvIGNvbnRyaWJ1dG9yLiAKICAgICAqLwoJZnVuY3Rpb24gZGlzdHJpYnV0ZUlRVFRva2VuKCkgewoJCWlmIChiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKSB7ICAvLyBvbmx5IElRVF9GVU5EQVRJT05fQUREUkVTUyBjYW4gZGlzdHJpYnV0ZSB0aGUgSVFUCgkJCWFkZHJlc3MgY3VycmVudFBhcnRpY2lwYW50QWRkcmVzczsKCQkJZm9yICh1aW50IGluZGV4ID0gMDsgaW5kZXggPCBjb250cmlidXRvckNvdW50OyBpbmRleCsrKXsKCQkJCWN1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3MgPSBjb250cmlidXRvckluZGV4ZXNbaW5kZXhdOyAKCQkJCQoJCQkJdWludCBhbW91bnRJcXRUb2tlbiA9IGNvbnRyaWJ1dG9yTGlzdFtjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzXS50b2tlbnNBbW91bnQ7CgkJCQlpZiAoZmFsc2UgPT0gY29udHJpYnV0b3JMaXN0W2N1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3NdLmlzVG9rZW5EaXN0cmlidXRlZCl7CgkJCQkJYm9vbCBpc1N1Y2Nlc3MgPSB0b2tlblJld2FyZC50cmFuc2ZlcihjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzLCBhbW91bnRJcXRUb2tlbik7CgkJCQkJaWYgKGlzU3VjY2Vzcyl7CgkJCQkJCWNvbnRyaWJ1dG9yTGlzdFtjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzXS5pc1Rva2VuRGlzdHJpYnV0ZWQgPSB0cnVlOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQkKCQkJLy8gY2hlY2sgaWYgYWxsIElRVCBhcmUgZGlzdHJpYnV0ZWQKCQkJY2hlY2tJZkFsbElRVERpc3RyaWJ1dGVkKCk7CgkJCS8vIGdldCBsYXRlc3QgdG9rZW4gYmFsYW5jZQoJCQl0b2tlbkJhbGFuY2UgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CgkJfQoJfQoJCgkvKioKICAgICAqIERpc3RyaWJ1dGUgdG9rZW4gYnkgYmF0Y2gKICAgICAqCiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGdvYWwgb3IgdGltZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkLCBhbmQgaWYgc28sIGFuZCB0aGUgZnVuZGluZyBnb2FsIHdhcyByZWFjaGVkLAogICAgICogZGlzdHJpYnV0ZSB0b2tlbiB0byBjb250cmlidXRvci4gCiAgICAgKi8KCWZ1bmN0aW9uIGRpc3RyaWJ1dGVJUVRUb2tlbkJhdGNoKHVpbnQgYmF0Y2hVc2VyQ291bnQpIHsKCQlpZiAoYmVuZWZpY2lhcnkgPT0gbXNnLnNlbmRlcikgeyAgLy8gb25seSBJUVRfRlVOREFUSU9OX0FERFJFU1MgY2FuIGRpc3RyaWJ1dGUgdGhlIElRVAoJCQlhZGRyZXNzIGN1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3M7CgkJCXVpbnQgdHJhbnNmZXJlZFVzZXJDb3VudCA9IDA7CgkJCWZvciAodWludCBpbmRleCA9IDA7IGluZGV4IDwgY29udHJpYnV0b3JDb3VudCAmJiB0cmFuc2ZlcmVkVXNlckNvdW50PGJhdGNoVXNlckNvdW50OyBpbmRleCsrKXsKCQkJCWN1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3MgPSBjb250cmlidXRvckluZGV4ZXNbaW5kZXhdOyAKCQkJCQoJCQkJdWludCBhbW91bnRJcXRUb2tlbiA9IGNvbnRyaWJ1dG9yTGlzdFtjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzXS50b2tlbnNBbW91bnQ7CgkJCQlpZiAoZmFsc2UgPT0gY29udHJpYnV0b3JMaXN0W2N1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3NdLmlzVG9rZW5EaXN0cmlidXRlZCl7CgkJCQkJYm9vbCBpc1N1Y2Nlc3MgPSB0b2tlblJld2FyZC50cmFuc2ZlcihjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzLCBhbW91bnRJcXRUb2tlbik7CgkJCQkJdHJhbnNmZXJlZFVzZXJDb3VudCA9IHRyYW5zZmVyZWRVc2VyQ291bnQgKyAxOwoJCQkJCWlmIChpc1N1Y2Nlc3MpewoJCQkJCQljb250cmlidXRvckxpc3RbY3VycmVudFBhcnRpY2lwYW50QWRkcmVzc10uaXNUb2tlbkRpc3RyaWJ1dGVkID0gdHJ1ZTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJCgkJCS8vIGNoZWNrIGlmIGFsbCBJUVQgYXJlIGRpc3RyaWJ1dGVkCgkJCWNoZWNrSWZBbGxJUVREaXN0cmlidXRlZCgpOwoJCQkvLyBnZXQgbGF0ZXN0IHRva2VuIGJhbGFuY2UKCQkJdG9rZW5CYWxhbmNlID0gdG9rZW5SZXdhcmQuYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwoJCX0KCX0KCQoJLyoqCgkgKiBDaGVjayBpZiBhbGwgY29udHJpYnV0b3IncyB0b2tlbiBhcmUgc3VjY2Vzc2Z1bGx5IGRpc3RyaWJ1dGVkCgkgKi8KCWZ1bmN0aW9uIGNoZWNrSWZBbGxJUVREaXN0cmlidXRlZCgpewoJICAgIGFkZHJlc3MgY3VycmVudFBhcnRpY2lwYW50QWRkcmVzczsKCQlpc0lRVERpc3RyaWJ1dGVkID0gdHJ1ZTsKCQlmb3IgKHVpbnQgaW5kZXggPSAwOyBpbmRleCA8IGNvbnRyaWJ1dG9yQ291bnQ7IGluZGV4KyspewoJCQkJY3VycmVudFBhcnRpY2lwYW50QWRkcmVzcyA9IGNvbnRyaWJ1dG9ySW5kZXhlc1tpbmRleF07IAoJCQkJCgkJCWlmIChmYWxzZSA9PSBjb250cmlidXRvckxpc3RbY3VycmVudFBhcnRpY2lwYW50QWRkcmVzc10uaXNUb2tlbkRpc3RyaWJ1dGVkKXsKCQkJCWlzSVFURGlzdHJpYnV0ZWQgPSBmYWxzZTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJfQoJCn0='.
	

]
