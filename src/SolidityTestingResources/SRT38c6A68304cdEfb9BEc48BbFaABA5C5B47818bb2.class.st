Class {
	#name : #SRT38c6A68304cdEfb9BEc48BbFaABA5C5B47818bb2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38c6A68304cdEfb9BEc48BbFaABA5C5B47818bb2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludCBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgewogICAgICB0aHJvdzsKICAgIH0KICB9Cn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKICAvKioKICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkgewogICAgICAgdGhyb3c7CiAgICAgfQogICAgIF87CiAgfQoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCgoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgoKCgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWFudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFydCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBCYXNpY1Rva2VuLCBFUkMyMCB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlYWhsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93OwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYW4gYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgoKCgoKCi8vLyBAdGl0bGUgSFBCIFByb3RvY29sIFRva2VuLgovLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyB0b2tlbiBzYWxlLCBwbGVhc2UgdmlzaXQgaHR0cHM6Ly9neG4uaW8KLy8vIEBhdXRob3IgQXJub2xkIC0gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNWUzZjJjMzAzMTMyM2ExZTM5MjYzMDcwMzczMSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+LCBCb2IgLSA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJiN2Q1ZDhkNWY3ZDBjZmQ5OTlkZWQ4Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4uCmNvbnRyYWN0IEhQQlRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBOQU1FID0gIkhQQkNvaW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiSFBCIjsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFQ0lNQUxTID0gMTg7CgogICAgLy8vIER1cmluZyB0b2tlbiBzYWxlLCB3ZSB1c2Ugb25lIGNvbnNpc3RlbnQgcHJpY2U6IDEwMDAgSFBCL0VUSC4KICAgIC8vLyBXZSBzcGxpdCB0aGUgZW50aXJlIHRva2VuIHNhbGUgcGVyaW9kIGludG8gMyBwaGFzZXMsIGVhY2gKICAgIC8vLyBwaGFzZSBoYXMgYSBkaWZmZXJlbnQgYm9udXMgc2V0dGluZyBhcyBzcGVjaWZpZWQgaW4gYGJvbnVzUGVyY2VudGFnZXNgLgogICAgLy8vIFRoZSByZWFsIHByaWNlIGZvciBwaGFzZSBpIGlzIGAoMSArIGJvbnVzUGVyY2VudGFnZXNbaV0vMTAwLjApICogQkFTRV9SQVRFYC4KICAgIC8vLyBUaGUgZmlyc3QgcGhhc2Ugb3IgZWFybHktYmlyZCBwaGFzZSBoYXMgYSBtdWNoIGhpZ2hlciBib251cy4KICAgIHVpbnQ4WzEwXSBwdWJsaWMgYm9udXNQZXJjZW50YWdlcyA9IFsKICAgICAgICAyMCwKICAgICAgICAxMCwKICAgICAgICAwCiAgICBdOwoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE5VTV9PRl9QSEFTRSA9IDM7CiAgCiAgICAvLy8gRWFjaCBwaGFzZSBjb250YWlucyBleGFjdGx5IDI5MDAwIEV0aGVyZXVtIGJsb2Nrcywgd2hpY2ggaXMgcm91Z2hseSA3IGRheXMsCiAgICAvLy8gd2hpY2ggbWFrZXMgdGhpcyAzLXBoYXNlIHNhbGUgcGVyaW9kIHJvdWdobHkgMjEgZGF5cy4KICAgIC8vLyBTZWUgaHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL2Nyb3dkc2FsZSNzY2hlZHVsaW5nLWEtY2FsbAogICAgdWludDE2IHB1YmxpYyBjb25zdGFudCBCTE9DS1NfUEVSX1BIQVNFID0gMjkwMDA7CgogICAgLy8vIFRoaXMgaXMgd2hlcmUgd2UgaG9sZCBFVEggZHVyaW5nIHRoaXMgdG9rZW4gc2FsZS4gV2Ugd2lsbCBub3QgdHJhbnNmZXIgYW55IEV0aGVyCiAgICAvLy8gb3V0IG9mIHRoaXMgYWRkcmVzcyBiZWZvcmUgd2UgaW52b2NhdGUgdGhlIGBjbG9zZWAgZnVuY3Rpb24gdG8gZmluYWxpemUgdGhlIHNhbGUuIAogICAgLy8vIFRoaXMgcHJvbWlzZSBpcyBub3QgZ3VhbnJhbnRlZWQgYnkgc21hcnQgY29udHJhY3QgYnkgY2FuIGJlIHZlcmlmaWVkIHdpdGggcHVibGljCiAgICAvLy8gRXRoZXJldW0gdHJhbnNhY3Rpb25zIGRhdGEgYXZhaWxhYmxlIG9uIHNldmVyYWwgYmxvY2tjaGFpbiBicm93c2Vycy4KICAgIC8vLyBUaGlzIGlzIHRoZSBvbmx5IGFkZHJlc3MgZnJvbSB3aGljaCBgc3RhcnRgIGFuZCBgY2xvc2VgIGNhbiBiZSBpbnZvY2F0ZWQuCiAgICAvLy8KICAgIC8vLyBOb3RlOiB0aGlzIHdpbGwgYmUgaW5pdGlhbGl6ZWQgZHVyaW5nIHRoZSBjb250cmFjdCBkZXBsb3ltZW50LgogICAgYWRkcmVzcyBwdWJsaWMgdGFyZ2V0OwoKICAgIC8vLyBgZmlyc3RibG9ja2Agc3BlY2lmaWVzIGZyb20gd2hpY2ggYmxvY2sgb3VyIHRva2VuIHNhbGUgc3RhcnRzLgogICAgLy8vIFRoaXMgY2FuIG9ubHkgYmUgbW9kaWZpZWQgb25jZSBieSB0aGUgb3duZXIgb2YgYHRhcmdldGAgYWRkcmVzcy4KICAgIHVpbnQgcHVibGljIGZpcnN0YmxvY2sgPSAwOwoKICAgIC8vLyBJbmRpY2F0ZXMgd2hldGhlciB1bnNvbGQgdG9rZW4gaGF2ZSBiZWVuIGlzc3VlZC4gVGhpcyBwYXJ0IG9mIEhQQiB0b2tlbgogICAgLy8vIGlzIG1hbmFnZWQgYnkgdGhlIHByb2plY3QgdGVhbSBhbmQgaXMgaXNzdWVkIGRpcmVjdGx5IHRvIGB0YXJnZXRgLgogICAgYm9vbCBwdWJsaWMgdW5zb2xkVG9rZW5Jc3N1ZWQgPSBmYWxzZTsKCiAgICAvLy8gTWluaW11bSBhbW91bnQgb2YgZnVuZHMgdG8gYmUgcmFpc2VkIGZvciB0aGUgc2FsZSB0byBzdWNjZWVkLiAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IEdPQUwgPSAzMDAwIGV0aGVyOwoKICAgIC8vLyBNYXhpbXVtIGFtb3VudCBvZiBmdW5kIHRvIGJlIHJhaXNlZCwgdGhlIHNhbGUgZW5kcyBvbiByZWFjaGluZyB0aGlzIGFtb3VudC4KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IEhBUkRfQ0FQID0gNDUwMCBldGhlcjsKCiAgICAvLy8gQmFzZSBleGNoYW5nZSByYXRlIGlzIHNldCB0byAxIEVUSCA9IDEwNTAgSFBCLgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQkFTRV9SQVRFID0gMTA1MDsKCiAgICAvLy8gQSBzaW1wbGUgc3RhdCBmb3IgZW1pdHRpbmcgZXZlbnRzLgogICAgdWludCBwdWJsaWMgdG90YWxFdGhSZWNlaXZlZCA9IDA7CgogICAgLy8vIElzc3VlIGV2ZW50IGluZGV4IHN0YXJ0aW5nIGZyb20gMC4KICAgIHVpbnQgcHVibGljIGlzc3VlSW5kZXggPSAwOwoKICAgIC8qIAogICAgICogRVZFTlRTCiAgICAgKi8KCiAgICAvLy8gRW1pdHRlZCBvbmx5IG9uY2UgYWZ0ZXIgdG9rZW4gc2FsZSBzdGFydHMuCiAgICBldmVudCBTYWxlU3RhcnRlZCgpOwoKICAgIC8vLyBFbWl0dGVkIG9ubHkgb25jZSBhZnRlciB0b2tlbiBzYWxlIGVuZGVkIChhbGwgdG9rZW4gaXNzdWVkKS4KICAgIGV2ZW50IFNhbGVFbmRlZCgpOwoKICAgIC8vLyBFbWl0dGVkIHdoZW4gYSBmdW5jdGlvbiBpcyBpbnZvY2F0ZWQgYnkgdW5hdXRob3JpemVkIGFkZHJlc3Nlcy4KICAgIGV2ZW50IEludmFsaWRDYWxsZXIoYWRkcmVzcyBjYWxsZXIpOwoKICAgIC8vLyBFbWl0dGVkIHdoZW4gYSBmdW5jdGlvbiBpcyBpbnZvY2F0ZWQgd2l0aG91dCB0aGUgc3BlY2lmaWVkIHByZWNvbmRpdGlvbnMuCiAgICAvLy8gVGhpcyBldmVudCB3aWxsIG5vdCBjb21lIGFsb25lIHdpdGggYW4gZXhjZXB0aW9uLgogICAgZXZlbnQgSW52YWxpZFN0YXRlKGJ5dGVzIG1zZyk7CgogICAgLy8vIEVtaXR0ZWQgZm9yIGVhY2ggc3VjdWVzc2Z1bCB0b2tlbiBwdXJjaGFzZS4KICAgIGV2ZW50IElzc3VlKHVpbnQgaXNzdWVJbmRleCwgYWRkcmVzcyBhZGRyLCB1aW50IGV0aEFtb3VudCwgdWludCB0b2tlbkFtb3VudCk7CgogICAgLy8vIEVtaXR0ZWQgaWYgdGhlIHRva2VuIHNhbGUgc3VjY2VlZGVkLgogICAgZXZlbnQgU2FsZVN1Y2NlZWRlZCgpOwoKICAgIC8vLyBFbWl0dGVkIGlmIHRoZSB0b2tlbiBzYWxlIGZhaWxlZC4KICAgIC8vLyBXaGVuIHRva2VuIHNhbGUgZmFpbGVkLCBhbGwgRXRoZXIgd2lsbCBiZSByZXR1cm4gdG8gdGhlIG9yaWdpbmFsIHB1cmNoYXNpbmcKICAgIC8vLyBhZGRyZXNzIHdpdGggYSBtaW5vciBkZWR1Y3Rpb24gb2YgdHJhbnNhY3Rpb24gZmVl6ZSb5Z2TYXMpCiAgICBldmVudCBTYWxlRmFpbGVkKCk7CgogICAgLyoKICAgICAqIE1PRElGSUVSUwogICAgICovCgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAodGFyZ2V0ID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBJbnZhbGlkQ2FsbGVyKG1zZy5zZW5kZXIpOwogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICB9CgogICAgbW9kaWZpZXIgYmVmb3JlU3RhcnQgewogICAgICAgIGlmICghc2FsZVN0YXJ0ZWQoKSkgewogICAgICAgICAgICBfOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEludmFsaWRTdGF0ZSgiU2FsZSBoYXMgbm90IHN0YXJ0ZWQgeWV0Iik7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBpblByb2dyZXNzIHsKICAgICAgICBpZiAoc2FsZVN0YXJ0ZWQoKSAmJiAhc2FsZUVuZGVkKCkpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBJbnZhbGlkU3RhdGUoIlNhbGUgaXMgbm90IGluIHByb2dyZXNzIik7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBhZnRlckVuZCB7CiAgICAgICAgaWYgKHNhbGVFbmRlZCgpKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgSW52YWxpZFN0YXRlKCJTYWxlIGlzIG5vdCBlbmRlZCB5ZXQiKTsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ09OU1RSVUNUT1IgCiAgICAgKiAKICAgICAqIEBkZXYgSW5pdGlhbGl6ZSB0aGUgSFBCIFRva2VuCiAgICAgKiBAcGFyYW0gX3RhcmdldCBUaGUgZXNjcm93IGFjY291bnQgYWRkcmVzcywgYWxsIGV0aGVycyB3aWxsCiAgICAgKiBiZSBzZW50IHRvIHRoaXMgYWRkcmVzcy4KICAgICAqIFRoaXMgYWRkcmVzcyB3aWxsIGJlIDogMHhlNTk3YzVhYjg3ZTlkMjBhZDQ0NTk3NmQ5YjAxNmMzN2Y4NjRkYTJiCiAgICAgKi8KICAgIGZ1bmN0aW9uIEhQQlRva2VuKGFkZHJlc3MgX3RhcmdldCkgewogICAgICAgIHRhcmdldCA9IF90YXJnZXQ7CiAgICAgICAgdG90YWxTdXBwbHkgPSAxMCAqKiAyNjsKICAgICAgICBiYWxhbmNlc1t0YXJnZXRdID0gdG90YWxTdXBwbHk7CiAgICB9CgogICAgLyoKICAgICAqIFBVQkxJQyBGVU5DVElPTlMKICAgICAqLwoKICAgIC8vLyBAZGV2IFN0YXJ0IHRoZSB0b2tlbiBzYWxlLgogICAgLy8vIEBwYXJhbSBfZmlyc3RibG9jayBUaGUgYmxvY2sgZnJvbSB3aGljaCB0aGUgc2FsZSB3aWxsIHN0YXJ0LgogICAgZnVuY3Rpb24gc3RhcnQodWludCBfZmlyc3RibG9jaykgcHVibGljIG9ubHlPd25lciBiZWZvcmVTdGFydCB7CiAgICAgICAgaWYgKF9maXJzdGJsb2NrIDw9IGJsb2NrLm51bWJlcikgewogICAgICAgICAgICAvLyBNdXN0IHNwZWNpZnkgYSBibG9jayBpbiB0aGUgZnV0dXJlLgogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIGZpcnN0YmxvY2sgPSBfZmlyc3RibG9jazsKICAgICAgICBTYWxlU3RhcnRlZCgpOwogICAgfQoKICAgIC8vLyBAZGV2IFRyaWdnZXJzIHVuc29sZCB0b2tlbnMgdG8gYmUgaXNzdWVkIHRvIGB0YXJnZXRgIGFkZHJlc3MuCiAgICBmdW5jdGlvbiBjbG9zZSgpIHB1YmxpYyBvbmx5T3duZXIgYWZ0ZXJFbmQgewogICAgICAgIGlmICh0b3RhbEV0aFJlY2VpdmVkIDwgR09BTCkgewogICAgICAgICAgICBTYWxlRmFpbGVkKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgU2FsZVN1Y2NlZWRlZCgpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIHRoZSBjdXJyZW50IHByaWNlLgogICAgZnVuY3Rpb24gcHJpY2UoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCB0b2tlbnMpIHsKICAgICAgICByZXR1cm4gY29tcHV0ZVRva2VuQW1vdW50KDEgZXRoZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZGVmYXVsdCBmdW5jdGlvbiBhbGxvd3MgdG9rZW4gdG8gYmUgcHVyY2hhc2VkIGJ5IGRpcmVjdGx5CiAgICAvLy8gc2VuZGluZyBldGhlciB0byB0aGlzIHNtYXJ0IGNvbnRyYWN0LgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgaXNzdWVUb2tlbihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBJc3N1ZSB0b2tlbiBiYXNlZCBvbiBFdGhlciByZWNlaXZlZC4KICAgIC8vLyBAcGFyYW0gcmVjaXBpZW50IEFkZHJlc3MgdGhhdCBuZXdseSBpc3N1ZWQgdG9rZW4gd2lsbCBiZSBzZW50IHRvLgogICAgZnVuY3Rpb24gaXNzdWVUb2tlbihhZGRyZXNzIHJlY2lwaWVudCkgcGF5YWJsZSBpblByb2dyZXNzIHsKICAgICAgICAvLyBXZSBvbmx5IGFjY2VwdCBtaW5pbXVtIHB1cmNoYXNlIG9mIDAuMDEgRVRILgogICAgICAgIGFzc2VydChtc2cudmFsdWUgPj0gMC4wMSBldGhlcik7CgogICAgICAgIC8vIFdlIG9ubHkgYWNjZXB0IG1heGltdW0gcHVyY2hhc2Ugb2YgMzUgRVRILgogICAgICAgIGFzc2VydChtc2cudmFsdWUgPD0gMzUgZXRoZXIpOwoKICAgICAgICAvLyBXZSBvbmx5IGFjY2VwdCB0b3RhbEV0aFJlY2VpdmVkIDwgSEFSRF9DQVAKICAgICAgICB1aW50IGV0aFJlY2VpdmVkID0gdG90YWxFdGhSZWNlaXZlZCArIG1zZy52YWx1ZTsKICAgICAgICBhc3NlcnQoZXRoUmVjZWl2ZWQgPD0gSEFSRF9DQVApOwoKICAgICAgICB1aW50IHRva2VucyA9IGNvbXB1dGVUb2tlbkFtb3VudChtc2cudmFsdWUpOwogICAgICAgIHRvdGFsRXRoUmVjZWl2ZWQgPSB0b3RhbEV0aFJlY2VpdmVkLmFkZChtc2cudmFsdWUpOwogICAgICAgIAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHRva2Vucyk7CiAgICAgICAgYmFsYW5jZXNbdGFyZ2V0XSA9IGJhbGFuY2VzW3RhcmdldF0uc3ViKHRva2Vucyk7CgogICAgICAgIElzc3VlKAogICAgICAgICAgICBpc3N1ZUluZGV4KyssCiAgICAgICAgICAgIHJlY2lwaWVudCwKICAgICAgICAgICAgbXNnLnZhbHVlLAogICAgICAgICAgICB0b2tlbnMKICAgICAgICApOwoKICAgICAgICBpZiAoIXRhcmdldC5zZW5kKG1zZy52YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBJTlRFUk5BTCBGVU5DVElPTlMKICAgICAqLwogIAogICAgLy8vIEBkZXYgQ29tcHV0ZSB0aGUgYW1vdW50IG9mIEhQQiB0b2tlbiB0aGF0IGNhbiBiZSBwdXJjaGFzZWQuCiAgICAvLy8gQHBhcmFtIGV0aEFtb3VudCBBbW91bnQgb2YgRXRoZXIgdG8gcHVyY2hhc2UgSFBCLgogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIEhQQiB0b2tlbiB0byBwdXJjaGFzZQogICAgZnVuY3Rpb24gY29tcHV0ZVRva2VuQW1vdW50KHVpbnQgZXRoQW1vdW50KSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50IHRva2VucykgewogICAgICAgIHVpbnQgcGhhc2UgPSAoYmxvY2subnVtYmVyIC0gZmlyc3RibG9jaykuZGl2KEJMT0NLU19QRVJfUEhBU0UpOwoKICAgICAgICAvLyBBIHNhZmUgY2hlY2sKICAgICAgICBpZiAocGhhc2UgPj0gYm9udXNQZXJjZW50YWdlcy5sZW5ndGgpIHsKICAgICAgICAgICAgcGhhc2UgPSBib251c1BlcmNlbnRhZ2VzLmxlbmd0aCAtIDE7CiAgICAgICAgfQoKICAgICAgICB1aW50IHRva2VuQmFzZSA9IGV0aEFtb3VudC5tdWwoQkFTRV9SQVRFKTsKICAgICAgICB1aW50IHRva2VuQm9udXMgPSB0b2tlbkJhc2UubXVsKGJvbnVzUGVyY2VudGFnZXNbcGhhc2VdKS5kaXYoMTAwKTsKCiAgICAgICAgdG9rZW5zID0gdG9rZW5CYXNlLmFkZCh0b2tlbkJvbnVzKTsKICAgIH0KCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHNhbGUgaGFzIHN0YXJ0ZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgIGZ1bmN0aW9uIHNhbGVTdGFydGVkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoZmlyc3RibG9jayA+IDAgJiYgYmxvY2subnVtYmVyID49IGZpcnN0YmxvY2spOwogICAgfQoKICAgIC8vLyBAcmV0dXJuIHRydWUgaWYgc2FsZSBoYXMgZW5kZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgIGZ1bmN0aW9uIHNhbGVFbmRlZCgpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZmlyc3RibG9jayA+IDAgJiYgKHNhbGVEdWUoKSB8fCBoYXJkQ2FwUmVhY2hlZCgpKTsKICAgIH0KCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHNhbGUgaXMgZHVlIHdoZW4gdGhlIGxhc3QgcGhhc2UgaXMgZmluaXNoZWQuCiAgICBmdW5jdGlvbiBzYWxlRHVlKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBibG9jay5udW1iZXIgPj0gZmlyc3RibG9jayArIEJMT0NLU19QRVJfUEhBU0UgKiBOVU1fT0ZfUEhBU0U7CiAgICB9CgogICAgLy8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgaGFyZCBjYXAgaXMgcmVhY2hlZC4KICAgIGZ1bmN0aW9uIGhhcmRDYXBSZWFjaGVkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b3RhbEV0aFJlY2VpdmVkID49IEhBUkRfQ0FQOwogICAgfQp9'.
	

]
