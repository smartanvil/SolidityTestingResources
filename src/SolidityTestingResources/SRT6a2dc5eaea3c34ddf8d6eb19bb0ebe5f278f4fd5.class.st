Class {
	#name : #SRT6a2dc5eaea3c34ddf8d6eb19bb0ebe5f278f4fd5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6a2dc5eaea3c34ddf8d6eb19bb0ebe5f278f4fd5 >> base64 [
	^ ''.
	

]
