Class {
	#name : #SRTFF603F43946A3A28DF5E6A73172555D8C8b02386,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTFF603F43946A3A28DF5E6A73172555D8C8b02386 >> base64 [
	^ ''.
	

]
