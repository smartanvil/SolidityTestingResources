Class {
	#name : #SRTde6ba48c830cb48c3521633e71d79c1a16f7c068,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTde6ba48c830cb48c3521633e71d79c1a16f7c068 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgSW5jcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGRlY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgTWludGFibGUgdG9rZW4KICogQGRldiBTaW1wbGUgRVJDMjAgVG9rZW4gZXhhbXBsZSwgd2l0aCBtaW50YWJsZSB0b2tlbiBjcmVhdGlvbgogKiBAZGV2IElzc3VlOiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvaXNzdWVzLzEyMAogKiBCYXNlZCBvbiBjb2RlIGJ5IFRva2VuTWFya2V0TmV0OiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9NaW50YWJsZVRva2VuLnNvbAogKi8KCmNvbnRyYWN0IE1pbnRhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICBldmVudCBNaW50RmluaXNoZWQoKTsKCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZS4KICogQ3Jvd2RzYWxlcyBoYXZlIGEgc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzLCB3aGVyZSBpbnZlc3RvcnMgY2FuIG1ha2UKICogdG9rZW4gcHVyY2hhc2VzIGFuZCB0aGUgY3Jvd2RzYWxlIHdpbGwgYXNzaWduIHRoZW0gdG9rZW5zIGJhc2VkCiAqIG9uIGEgdG9rZW4gcGVyIEVUSCByYXRlLiBGdW5kcyBjb2xsZWN0ZWQgYXJlIGZvcndhcmRlZCB0byBhIHdhbGxldAogKiBhcyB0aGV5IGFycml2ZS4KICovCmNvbnRyYWN0IENyb3dkc2FsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgTWludGFibGVUb2tlbiBwdWJsaWMgdG9rZW47CgogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlOwoKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICBmdW5jdGlvbiBDcm93ZHNhbGUodWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9lbmRUaW1lLCB1aW50MjU2IF9yYXRlLCBhZGRyZXNzIF93YWxsZXQpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoX2VuZFRpbWUgPj0gX3N0YXJ0VGltZSk7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KCk7CiAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgcmF0ZSA9IF9yYXRlOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICB9CgogIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgLy8gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGF2ZSBjcm93ZHNhbGUgb2YgYSBzcGVjaWZpYyBtaW50YWJsZSB0b2tlbi4KICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgcmV0dXJuIG5ldyBNaW50YWJsZVRva2VuKCk7CiAgfQoKCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CgogICAgLy8gdXBkYXRlIHN0YXRlCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICBmb3J3YXJkRnVuZHMoKTsKICB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogIH0KCgp9CgovKioKICogQHRpdGxlIENhcHBlZENyb3dkc2FsZQogKiBAZGV2IEV4dGVuc2lvbiBvZiBDcm93ZHNhbGUgd2l0aCBhIG1heCBhbW91bnQgb2YgZnVuZHMgcmFpc2VkCiAqLwpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgdWludDI1NiBwdWJsaWMgY2FwOwoKICBmdW5jdGlvbiBDYXBwZWRDcm93ZHNhbGUodWludDI1NiBfY2FwKSBwdWJsaWMgewogICAgcmVxdWlyZShfY2FwID4gMCk7CiAgICBjYXAgPSBfY2FwOwogIH0KCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjdmFsaWRQdXJjaGFzZSB0byBhZGQgZXh0cmEgY2FwIGxvZ2ljCiAgLy8gQHJldHVybiB0cnVlIGlmIGludmVzdG9ycyBjYW4gYnV5IGF0IHRoZSBtb21lbnQKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpbkNhcCA9IHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA8PSBjYXA7CiAgICByZXR1cm4gc3VwZXIudmFsaWRQdXJjaGFzZSgpICYmIHdpdGhpbkNhcDsKICB9CgogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlI2hhc0VuZGVkIHRvIGFkZCBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCBjYXBSZWFjaGVkID0gd2VpUmFpc2VkID49IGNhcDsKICAgIHJldHVybiBzdXBlci5oYXNFbmRlZCgpIHx8IGNhcFJlYWNoZWQ7CiAgfQoKfQoKY29udHJhY3QgVmVuZCBpcyBNaW50YWJsZVRva2VuIHsKICAJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlZFTkQiOwogIAlzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJWRU5EIjsKICAJdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogIAkvKioKICAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KIAkqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgKi8KICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cgp9CgoKCmNvbnRyYWN0IFZlbmRDcm93ZHNhbGUgaXMgQ3Jvd2RzYWxlICwgT3duYWJsZSwgQ2FwcGVkQ3Jvd2RzYWxlIHsKCgkvL3N0YWdlIHByZXNhbGUgb3IgY3Jvd2RzYWxlCgllbnVtIFN0YWdlIHtQUkVTQUxFLCBQVUJMSUNTQUxFfQoKCS8vc3RhZ2UgSUNPCglTdGFnZSBwdWJsaWMgc3RhZ2U7CgoJdWludDI1NiBwcml2YXRlIGNvbnN0YW50IERFQ0lNQUxGQUNUT1IgPSAxMCoqdWludDI1NigxOCk7CgoJdWludDI1NiBwdWJsaWMgcHVibGljQWxsb2NhdGlvbiA9IDEyMDAwMDAwMCAqIERFQ0lNQUxGQUNUT1I7IC8vNjAlIFB1YmxpYyBBbGxvY2F0aW9uIAoJdWludDI1NiBwdWJsaWMgYWR2aXNvcnNBbGxvY2F0aW9uID0gMjAwMDAwMDAgKiBERUNJTUFMRkFDVE9SOyAvLyAxMCUgQWR2aXNvcnkgYW5kIExlZ2FsIEZ1bmQgQWxsb2NhdGlvbiAgCgl1aW50MjU2IHB1YmxpYyBtYXJrZXRBbGxvY2F0aW9uID0gMjAwMDAwMDAgKiBERUNJTUFMRkFDVE9SOyAvLzEwJSBNYXJrZXQgUGxhY2UgSW5jZW50aXZlCgl1aW50MjU2IHB1YmxpYyBmb3VuZGVyQWxsb2NhdGlvbiA9IDQwMDAwMDAwKiBERUNJTUFMRkFDVE9SOyAvLzIwJSBGb3VuZGVyICYgS2V5IEVtcGxveWVlIEFsbG9jYXRpb24KCgl1aW50MjU2IHB1YmxpYyBzb2Z0Q2FwID0gOTAwMCBldGhlcjsKICAgICAgICAgICAgIAoKCWJvb2wgcHVibGljIGlzR29hbFJlYWNoZWQgPSBmYWxzZTsKCS8vIEhvdyBtdWNoIEVUSCBlYWNoIGFkZHJlc3MgaGFzIGludmVzdGVkIHRvIHRoaXMgY3Jvd2RzYWxlCgltYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBpbnZlc3RlZEFtb3VudE9mOwoJLy8gSG93IG1hbnkgZGlzdGluY3QgYWRkcmVzc2VzIGhhdmUgaW52ZXN0ZWQKCXVpbnQyNTYgcHVibGljIGludmVzdG9yQ291bnQ7CgoJdWludDI1NiBwdWJsaWMgbWluQ29udHJpYkFtb3VudCA9IDAuMSBldGhlcjsgLy8gMC4xIGV0aGVyCgoJZXZlbnQgTWluaW11bUdvYWxSZWFjaGVkKCk7CglldmVudCBCdXJuIChhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCgoJLyoqCgogCSogCiAJKiBAZGV2IFZlbmRDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZS4KIAkqIFZlbmRDcm93ZHNhbGUgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAJKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKIAkqIG9uIGEgdG9rZW4gcGVyIEVUSCByYXRlLiBGdW5kcyBjb2xsZWN0ZWQgYXJlIGZvcndhcmRlZCB0byBhIHdhbGxldAogCSogYXMgdGhleSBhcnJpdmUuCiAJKi8KCWZ1bmN0aW9uIFZlbmRDcm93ZHNhbGUodWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9lbmRUaW1lLCB1aW50MjU2IF9yYXRlLCBhZGRyZXNzIF93YWxsZXQsIHVpbnQyNTYgX2NhcCkKICAgIAlDcm93ZHNhbGUgKF9zdGFydFRpbWUsIF9lbmRUaW1lLCBfcmF0ZSwgX3dhbGxldCkgQ2FwcGVkQ3Jvd2RzYWxlKF9jYXAgKiBERUNJTUFMRkFDVE9SKQogIHsKICAgIAlzdGFnZSA9IFN0YWdlLlBSRVNBTEU7CiAgfQogIAlmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgCXJldHVybiBuZXcgVmVuZCgpOwogIH0KCiAgCS8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogIAkvLyBAbm90aWNlIGJ1eVRva2VucwogIAkvLyBAcGFyYW0gYmVuZWZpY2lhcnkgVGhlIGFkZHJlc3Mgb2YgdGhlIGJlbmVmaWNpYXJ5CiAgCS8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIFRva2VuUHVyY2hhc2UKCiAgCWZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CgogICAgICAgCXJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKICAgICAgIAl1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgIAkvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgICAgIAl1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CiAgICAgICAJdWludDI1NiB0aW1lYmFzZWRCb251cyA9IHRva2Vucy5tdWwoZ2V0VGltZWJhc2VkQm9udXNSYXRlKCkpLmRpdigxMDApOwogICAgICAgCXVpbnQyNTYgdm9sdW1lYmFzZWRCb251cyA9IHRva2Vucy5tdWwoZ2V0Vm9sdW1lYmFzZWRCb251c1JhdGUod2VpQW1vdW50KSkuZGl2KDEwMCk7CiAgICAgICAJdG9rZW5zID0gdG9rZW5zLmFkZCh0aW1lYmFzZWRCb251cyk7CiAgICAgICAJdG9rZW5zID0gdG9rZW5zLmFkZCh2b2x1bWViYXNlZEJvbnVzKTsKCQlhc3NlcnQgKHRva2VucyA8PSBwdWJsaWNBbGxvY2F0aW9uKTsKCQkgICAKICAgICAgIAlpZihpbnZlc3RlZEFtb3VudE9mW2JlbmVmaWNpYXJ5XSA9PSAwKSB7CiAgICAgICAgICAgLy8gQSBuZXcgaW52ZXN0b3IKICAgICAgICAgICAJaW52ZXN0b3JDb3VudCsrOwogICAgICAgIH0KICAgICAgICAvLyBVcGRhdGUgaW52ZXN0b3IKICAgICAgICBpbnZlc3RlZEFtb3VudE9mW2JlbmVmaWNpYXJ5XSA9IGludmVzdGVkQW1vdW50T2ZbYmVuZWZpY2lhcnldLmFkZCh3ZWlBbW91bnQpOwogICAgICAgIGlmIChzdGFnZSA9PSBTdGFnZS5QUkVTQUxFKSB7CiAgICAgICAgICAgIGFzc2VydCAodG9rZW5zIDw9IHB1YmxpY0FsbG9jYXRpb24pOwogICAgICAgICAgICBwdWJsaWNBbGxvY2F0aW9uID0gcHVibGljQWxsb2NhdGlvbi5zdWIodG9rZW5zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhc3NlcnQgKHRva2VucyA8PSBwdWJsaWNBbGxvY2F0aW9uKTsKICAgICAgICAgICAgcHVibGljQWxsb2NhdGlvbiA9IHB1YmxpY0FsbG9jYXRpb24uc3ViKHRva2Vucyk7CgogICAgICAgIH0KICAgICAgIGZvcndhcmRGdW5kcygpOwogICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwogICAgICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgICAgIGlmICghaXNHb2FsUmVhY2hlZCAmJiB3ZWlSYWlzZWQgPj0gc29mdENhcCkgewogICAgICAgICAgICAgaXNHb2FsUmVhY2hlZCA9IHRydWU7CiAgICAgICAgICAgICBNaW5pbXVtR29hbFJlYWNoZWQoKTsKICAgICAgICAgfQogICAgIH0KCiAgICAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogICAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgIGJvb2wgbWluQ29udHJpYnV0aW9uID0gbWluQ29udHJpYkFtb3VudCA8PSBtc2cudmFsdWU7CiAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgICAgYm9vbCBQdWJsaWNzYWxlID1wdWJsaWNBbGxvY2F0aW9uICE9MDsKICAgICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbWluQ29udHJpYnV0aW9uICYmIG5vblplcm9QdXJjaGFzZSAmJiBQdWJsaWNzYWxlOwogICAgfQogICAvLyBAcmV0dXJuICBjdXJyZW50IHRpbWUKICAgIGZ1bmN0aW9uIGdldE5vdygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICByZXR1cm4gKG5vdyk7CiAgICB9CiAgIAkvLyBAcmV0dXJuIHRpbWUtYmFzZWQgYm9udXMgcmF0ZQogICAgZnVuY3Rpb24gZ2V0VGltZWJhc2VkQm9udXNSYXRlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgdWludDI1NiBib251c1JhdGUgPSAwOwogICAgICAgICBpZiAoc3RhZ2UgPT0gU3RhZ2UuUFVCTElDU0FMRSkgewogICAgICAgdWludDI1NiBub3dUaW1lID0gZ2V0Tm93KCk7CiAgICAgICB1aW50MjU2IHdlZWsxID0gc3RhcnRUaW1lICsgKDcgZGF5cyk7CiAgICAgICB1aW50MjU2IHdlZWsyID0gc3RhcnRUaW1lICsgKDE0IGRheXMpOwogICAgICAgdWludDI1NiB3ZWVrMyA9IHN0YXJ0VGltZSArICgyMSBkYXlzKTsKICAgICAgIHVpbnQyNTYgd2VlazQgPSBzdGFydFRpbWUgKyAoMTQgZGF5cyk7CgogICAgICAgaWYgKG5vd1RpbWUgPD0gd2VlazEpIHsKICAgICAgICAgICBib251c1JhdGUgPSAxNTsKICAgICAgIH1lbHNlIGlmIChub3dUaW1lIDw9IHdlZWsyKSB7CiAgICAgICAgICAgYm9udXNSYXRlID0gMTU7CiAgICAgICB9ZWxzZSBpZiAobm93VGltZSA8PSB3ZWVrMykgewogICAgICAgICAgIGJvbnVzUmF0ZSA9IDEwOwogICAgICAgfSBlbHNlIGlmIChub3dUaW1lIDw9IHdlZWs0KSB7CiAgICAgICAgICAgYm9udXNSYXRlID0gMTA7CiAgICAgICB9CiAgICAgICAgIH0KICAgICAgIHJldHVybiBib251c1JhdGU7CiAgIH0KICAgCS8vQHJldHVybiBnZXRWb2x1bWViYXNlZEJvbnVzCiAgICBmdW5jdGlvbiBnZXRWb2x1bWViYXNlZEJvbnVzUmF0ZSh1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBib251c1JhdGUgPSAwOwogICAgICAgIGlmIChzdGFnZSA9PSBTdGFnZS5QUkVTQUxFKSB7CiAgICAgICAgICAgIHVpbnQyNTYgdm9sdW1lID0gdmFsdWUuZGl2KDEgZXRoZXIpOwogICAgICAgIGlmICh2b2x1bWUgPj0gNzAgJiYgdm9sdW1lIDw9IDEwMCApIHsKICAgICAgICAgICAgYm9udXNSYXRlID0gMTU7CiAgICAgICAgfWVsc2UgaWYgKHZvbHVtZSA+PSA0MCAmJiB2b2x1bWUgPD0gNjkgKSB7CiAgICAgICAgICAgIGJvbnVzUmF0ZSA9IDEwOwogICAgICAgIH1lbHNlIGlmICh2b2x1bWUgPj0gMTAgJiYgdm9sdW1lIDw9IDM5ICkgewogICAgICAgICAgICBib251c1JhdGUgPSA1OwogICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJvbnVzUmF0ZTsKICAgICAgICB9CiAgIAkvKioKIAkqICAKIAkqIEBkZXYgY2hhbmdlIHRoZSBTdGF0ZSBmcm9tIHByZXNhbGUgdG8gcHVibGljIHNhbGUKIAkqLwogIAlmdW5jdGlvbiBzdGFydFB1YmxpY3NhbGUodWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9lbmRUaW1lKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgCXJlcXVpcmUoX2VuZFRpbWUgPj0gX3N0YXJ0VGltZSk7CiAgICAgIAlzdGFnZSA9IFN0YWdlLlBVQkxJQ1NBTEU7CiAgICAgIAkvL1N0YXJ0IFRpbWUgZW5kVGltZSBhbmQgcHJpY2UgZm9yIFBVQkxJQ1NBTEUKICAgICAgCXN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICAgIAllbmRUaW1lID0gX2VuZFRpbWU7CiAgIH0KCiAgCS8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgY3Jvd2RzYWxlIGhhcyByYWlzZWQgZW5vdWdoIG1vbmV5IHRvIGJlIHN1Y2Nlc3NmdWwuCiAgCWZ1bmN0aW9uIGlzTWluaW11bUdvYWxSZWFjaGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgcmVhY2hlZCkgewogICAgICAgIHJldHVybiB3ZWlSYWlzZWQgPj0gc29mdENhcDsKICAJfQoKICAgICAvLyBDaGFuZ2UgU3RhcnQgYW5kIEVuZHRpbWUgZm9yIFRlc3RpbmcgUHVycG9zZQogICAgZnVuY3Rpb24gY2hhbmdlRW5kKHVpbnQyNTYgX2VuZFRpbWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgCXJlcXVpcmUoX2VuZFRpbWUhPTApOwogICAgICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgICAgICAKICAgIH0KCiAgICAvKioKIAkqICAgCiAJKiBAZGV2IGNoYW5nZSB0aGUgQ3VycmVudCBUb2tlbiBwcmljZSBwZXIgRXRoZXIKIAkqLwogICAJZnVuY3Rpb24gY2hhbmdlUmF0ZSh1aW50MjU2IF9yYXRlKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAJcmVxdWlyZShfcmF0ZSAhPSAwKTsKICAgICAgCXJhdGUgPSBfcmF0ZTsKCiAgIH0KICAgCgogICAgLyoqCiAJKiAKIAkqIEBwYXJhbSBfdG8gaXMgYmVuZWZpY2lhcnkgYWRkcmVzcwogCSogCiAJKiBAcGFyYW0gX3ZhbHVlICBBbW91bnQgaWYgdG9rZW5zCiAJKiAgIAogCSogQGRldiBBbGxvY2F0ZWQgdG9rZW5zIHRyYW5zZmVyIHRvIEFkdmlzb3J5IHRlYW0KIAkqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJBZHZpc29yc1Rva2VuKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHsKICAgIAlyZXF1aXJlICgKICAgICAgICAgICBfdG8gIT0gMHgwICYmIF92YWx1ZSA+IDAgJiYgYWR2aXNvcnNBbGxvY2F0aW9uID49IF92YWx1ZQogICAgICAgICk7CiAgICAgICAgdG9rZW4ubWludChfdG8sIF92YWx1ZSk7CiAgICAgICAgYWR2aXNvcnNBbGxvY2F0aW9uID0gYWR2aXNvcnNBbGxvY2F0aW9uLnN1YihfdmFsdWUpOwogICAgfQoKICAgIC8qKgogCSogQHBhcmFtIF90byBpcyBiZW5lZmljaWFyeSBhZGRyZXNzCiAJKiAKIAkqIEBwYXJhbSBfdmFsdWUgIEFtb3VudCBpZiB0b2tlbnMKIAkqICAgCiAJKiBAZGV2IEFsbG9jYXRlZCB0b2tlbnMgdHJhbnNmZXIgdG8gIE1hcmtldCBQbGFjZSBJbmNlbnRpdmUgdGVhbQogCSovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck1hcmtldGFsbG9jYXRpb25Ub2tlbnMoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgIF90byAhPSAweDAgJiYgX3ZhbHVlID4gMCAmJiBtYXJrZXRBbGxvY2F0aW9uID49IF92YWx1ZQogICAgICAgICk7CiAgICAgICAgdG9rZW4ubWludChfdG8sIF92YWx1ZSk7CiAgICAgICAgbWFya2V0QWxsb2NhdGlvbiA9IG1hcmtldEFsbG9jYXRpb24uc3ViKF92YWx1ZSk7Cgl9CgkKCgkvKioKIAkqIEBwYXJhbSBfdG8gaXMgYmVuZWZpY2lhcnkgYWRkcmVzcwogCSogCiAJKiBAcGFyYW0gX3ZhbHVlICBBbW91bnQgaWYgdG9rZW5zCiAJKiAgIAogCSogQGRldiBBbGxvY2F0ZWQgdG9rZW5zIHRyYW5zZmVyIHRvIAlGb3VuZGVyICYgS2V5IEVtcGxveWVlIHRlYW0KIAkqLwoJZnVuY3Rpb24gdHJhbnNmZXJGb3VuZGVyVG9rZW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICBfdG8gIT0gMHgwICYmIF92YWx1ZSA+IDAgJiYgZm91bmRlckFsbG9jYXRpb24gPj0gX3ZhbHVlCiAgICAgICAgKTsKICAgICAgICB0b2tlbi5taW50KF90bywgX3ZhbHVlKTsKICAgICAgICBmb3VuZGVyQWxsb2NhdGlvbiA9IGZvdW5kZXJBbGxvY2F0aW9uLnN1YihfdmFsdWUpOwogICAgfQoKICAgIC8qKgogCSogQHBhcmFtIF92YWx1ZSBubyBvZiB0b2tlbnMKCSoJICAgCiAJKiBAZGV2IEJ1cm4gdGhlIHRva2VucwogCSovCglmdW5jdGlvbiBidXJuVG9rZW4odWludDI1NiBfdmFsdWUpIG9ubHlPd25lciB7CiAgICAJcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgICAJcHVibGljQWxsb2NhdGlvbiA9IHB1YmxpY0FsbG9jYXRpb24uc3ViKF92YWx1ZSk7CgogICAgCUJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKCX0KfQ=='.
	

]
