Class {
	#name : #SRTd42c50dedae71f7ad62e7792e83d7736637689d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd42c50dedae71f7ad62e7792e83d7736637689d9 >> base64 [
	^ ''.
	

]
