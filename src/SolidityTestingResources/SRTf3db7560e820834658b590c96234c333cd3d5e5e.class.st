Class {
	#name : #SRTf3db7560e820834658b590c96234c333cd3d5e5e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf3db7560e820834658b590c96234c333cd3d5e5e >> base64 [
	^ ''.
	

]
