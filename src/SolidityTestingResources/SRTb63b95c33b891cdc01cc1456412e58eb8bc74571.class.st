Class {
	#name : #SRTb63b95c33b891cdc01cc1456412e58eb8bc74571,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb63b95c33b891cdc01cc1456412e58eb8bc74571 >> base64 [
	^ ''.
	

]
