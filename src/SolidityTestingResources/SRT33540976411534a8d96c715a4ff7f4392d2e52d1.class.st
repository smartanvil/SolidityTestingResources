Class {
	#name : #SRT33540976411534a8d96c715a4ff7f4392d2e52d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33540976411534a8d96c715a4ff7f4392d2e52d1 >> base64 [
	^ ''.
	

]
