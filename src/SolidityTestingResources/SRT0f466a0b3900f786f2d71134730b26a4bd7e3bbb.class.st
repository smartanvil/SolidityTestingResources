Class {
	#name : #SRT0f466a0b3900f786f2d71134730b26a4bd7e3bbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f466a0b3900f786f2d71134730b26a4bd7e3bbb >> base64 [
	^ ''.
	

]
