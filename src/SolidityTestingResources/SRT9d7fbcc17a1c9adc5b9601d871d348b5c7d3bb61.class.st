Class {
	#name : #SRT9d7fbcc17a1c9adc5b9601d871d348b5c7d3bb61,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9d7fbcc17a1c9adc5b9601d871d348b5c7d3bb61 >> base64 [
	^ ''.
	

]
