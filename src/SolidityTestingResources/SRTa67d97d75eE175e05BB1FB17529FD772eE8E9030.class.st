Class {
	#name : #SRTa67d97d75eE175e05BB1FB17529FD772eE8E9030,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa67d97d75eE175e05BB1FB17529FD772eE8E9030 >> base64 [
	^ ''.
	

]
