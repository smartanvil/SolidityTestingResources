Class {
	#name : #SRT4866906760006017d03083140b169ed36bac6956,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4866906760006017d03083140b169ed36bac6956 >> base64 [
	^ ''.
	

]
