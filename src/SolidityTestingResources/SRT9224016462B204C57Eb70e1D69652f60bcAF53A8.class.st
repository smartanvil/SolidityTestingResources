Class {
	#name : #SRT9224016462B204C57Eb70e1D69652f60bcAF53A8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9224016462B204C57Eb70e1D69652f60bcAF53A8 >> base64 [
	^ ''.
	

]
