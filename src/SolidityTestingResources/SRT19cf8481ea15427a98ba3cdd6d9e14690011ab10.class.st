Class {
	#name : #SRT19cf8481ea15427a98ba3cdd6d9e14690011ab10,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19cf8481ea15427a98ba3cdd6d9e14690011ab10 >> base64 [
	^ ''.
	

]
