Class {
	#name : #SRT74f4ef03989702d1a6daeecc23e16e408604e3ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT74f4ef03989702d1a6daeecc23e16e408604e3ff >> base64 [
	^ ''.
	

]
