Class {
	#name : #SRTa2f000B776A64770E1a3E1E43E63296F5f029451,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa2f000B776A64770E1a3E1E43E63296F5f029451 >> base64 [
	^ ''.
	

]
