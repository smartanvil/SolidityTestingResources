Class {
	#name : #SRT4fe6523c82b832b2cf5c31d4ed2f3a652325468d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4fe6523c82b832b2cf5c31d4ed2f3a652325468d >> base64 [
	^ ''.
	

]
