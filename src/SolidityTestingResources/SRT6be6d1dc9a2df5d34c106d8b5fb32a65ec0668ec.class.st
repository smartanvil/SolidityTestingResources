Class {
	#name : #SRT6be6d1dc9a2df5d34c106d8b5fb32a65ec0668ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6be6d1dc9a2df5d34c106d8b5fb32a65ec0668ec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4gCiAgICAgICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByZUlDT19hZGRyZXNzOwogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIHVpbnQyNTYgcHVibGljIGVuZERhdGU7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKCiAgICBpZiggcHJlSUNPX2FkZHJlc3NbbXNnLnNlbmRlcl0gKSByZXF1aXJlKCBub3cgPiBlbmREYXRlICsgMTIwIGRheXMgKTsgLy9Mb2NrIGNvaW4KICAgIGVsc2UgcmVxdWlyZSggbm93ID4gZW5kRGF0ZSApOyAvL0xvY2sgY29pbgoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgaWYoIHByZUlDT19hZGRyZXNzW19mcm9tXSApIHJlcXVpcmUoIG5vdyA+IGVuZERhdGUgKyAxMjAgZGF5cyApOyAvL0xvY2sgY29pbgogICAgZWxzZSByZXF1aXJlKCBub3cgPiBlbmREYXRlICk7IC8vTG9jayBjb2luCgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGlmKCBwcmVJQ09fYWRkcmVzc1ttc2cuc2VuZGVyXSApIHJlcXVpcmUoIG5vdyA+IGVuZERhdGUgKyAxMjAgZGF5cyApOyAvL0xvY2sgY29pbgogICAgZWxzZSByZXF1aXJlKCBub3cgPiBlbmREYXRlICk7IC8vTG9jayBjb2luCgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9Cgpjb250cmFjdCB4eHggaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLyBUb2tlbiBJbmZvLgogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJ4eHgiOwogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gInh4eCI7CiAgICB1aW50OCAgIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgIC8vIFNhbGUgcGVyaW9kLgogICAgdWludDI1NiBwdWJsaWMgc3RhcnREYXRlOwogICAgLy8gdWludDI1NiBwdWJsaWMgZW5kRGF0ZTsKCiAgICAvLyBUb2tlbiBDYXAgZm9yIGVhY2ggcm91bmRzCiAgICB1aW50MjU2IHB1YmxpYyBzYWxlQ2FwOwoKICAgIC8vIEFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZC4KICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgICAvLyBBbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaS4KICAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgICAvLyBFdmVudAogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCB1aW50MjU2IHZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBQcmVJQ09Ub2tlblB1c2hlZChhZGRyZXNzIGluZGV4ZWQgYnV5ZXIsIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvLyBNb2RpZmllcnMKICAgIG1vZGlmaWVyIHVuaW5pdGlhbGl6ZWQoKSB7CiAgICAgICAgcmVxdWlyZSh3YWxsZXQgPT0gMHgwKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHh4eCgpIHB1YmxpY3sKICAgIH0KLy8gCiAgICBmdW5jdGlvbiBpbml0aWFsaXplKGFkZHJlc3MgX3dhbGxldCwgdWludDI1NiBfc3RhcnQsIHVpbnQyNTYgX2VuZCwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfc2FsZUNhcCwgdWludDI1NiBfdG90YWxTdXBwbHkpCiAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyBvbmx5T3duZXIgdW5pbml0aWFsaXplZCB7CiAgICAgICAgcmVxdWlyZShfc3RhcnQgPj0gZ2V0Q3VycmVudFRpbWVzdGFtcCgpKTsKICAgICAgICByZXF1aXJlKF9zdGFydCA8IF9lbmQpOwogICAgICAgIHJlcXVpcmUoX3dhbGxldCAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3RvdGFsU3VwcGx5ID4gX3NhbGVDYXApOwoKICAgICAgICBzdGFydERhdGUgPSBfc3RhcnQ7CiAgICAgICAgZW5kRGF0ZSA9IF9lbmQ7CiAgICAgICAgc2FsZUNhcCA9IF9zYWxlQ2FwOwogICAgICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CgogICAgICAgIGJhbGFuY2VzW3dhbGxldF0gPSBfdG90YWxTdXBwbHkuc3ViKHNhbGVDYXApOwogICAgICAgIGJhbGFuY2VzWzB4YjFdID0gc2FsZUNhcDsKICAgIH0KCiAgICBmdW5jdGlvbiBzdXBwbHkoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbMHhiMV07CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWVzdGFtcCgpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBub3c7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmF0ZUF0KHVpbnQyNTYgYXQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGF0IDwgc3RhcnREYXRlKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0gZWxzZSBpZiAoYXQgPCAoc3RhcnREYXRlICsgMyBkYXlzKSkgewogICAgICAgICAgICByZXR1cm4gMTUwMDsKICAgICAgICB9IGVsc2UgaWYgKGF0IDwgKHN0YXJ0RGF0ZSArIDkgZGF5cykpIHsKICAgICAgICAgICAgcmV0dXJuIDE0NDA7CiAgICAgICAgfSBlbHNlIGlmIChhdCA8IChzdGFydERhdGUgKyAxNSBkYXlzKSkgewogICAgICAgICAgICByZXR1cm4gMTM4MDsKICAgICAgICB9IGVsc2UgaWYgKGF0IDwgKHN0YXJ0RGF0ZSArIDIxIGRheXMpKSB7CiAgICAgICAgICAgIHJldHVybiAxMzIwOwogICAgICAgIH0gZWxzZSBpZiAoYXQgPCAoc3RhcnREYXRlICsgMjcgZGF5cykpIHsKICAgICAgICAgICAgcmV0dXJuIDEyNjA7CiAgICAgICAgfSBlbHNlIGlmIChhdCA8PSBlbmREYXRlKSB7CiAgICAgICAgICAgIHJldHVybiAxMjAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8gRm9yIHB1c2hpbmcgcHJlLUlDTyByZWNvcmRzCiAgICBmdW5jdGlvbiBwdXNoKGFkZHJlc3MgYnV5ZXIsIHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsgLy9iNzUzYTk4YwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbd2FsbGV0XSA+PSBhbW91bnQpOwogICAgICAgIHJlcXVpcmUobm93IDwgc3RhcnREYXRlKTsKICAgICAgICByZXF1aXJlKGJ1eWVyICE9IHdhbGxldCk7CgogICAgICAgIHByZUlDT19hZGRyZXNzWyBidXllciBdID0gdHJ1ZTsKCiAgICAgICAgLy8gVHJhbnNmZXIKICAgICAgICBiYWxhbmNlc1t3YWxsZXRdID0gYmFsYW5jZXNbd2FsbGV0XS5zdWIoYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tidXllcl0gPSBiYWxhbmNlc1tidXllcl0uYWRkKGFtb3VudCk7CiAgICAgICAgUHJlSUNPVG9rZW5QdXNoZWQoYnV5ZXIsIGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3Mgc2VuZGVyLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShzYWxlQWN0aXZlKCkpOwoKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IHZhbHVlOwogICAgICAgIHVpbnQyNTYgdXBkYXRlZFdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBwdXJjaGFzZWQKICAgICAgICB1aW50MjU2IGFjdHVhbFJhdGUgPSBnZXRSYXRlQXQoZ2V0Q3VycmVudFRpbWVzdGFtcCgpKTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IHdlaUFtb3VudC5tdWwoYWN0dWFsUmF0ZSk7CgogICAgICAgIC8vIFdlIGhhdmUgZW5vdWdoIHRva2VuIHRvIHNhbGUKICAgICAgICByZXF1aXJlKHN1cHBseSgpID49IGFtb3VudCk7CgogICAgICAgIC8vIFRyYW5zZmVyCiAgICAgICAgYmFsYW5jZXNbMHhiMV0gPSBiYWxhbmNlc1sweGIxXS5zdWIoYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tzZW5kZXJdID0gYmFsYW5jZXNbc2VuZGVyXS5hZGQoYW1vdW50KTsKICAgICAgICBUb2tlblB1cmNoYXNlKHNlbmRlciwgd2VpQW1vdW50LCBhbW91bnQpOwoKICAgICAgICAvLyBVcGRhdGUgc3RhdGUuCiAgICAgICAgd2VpUmFpc2VkID0gdXBkYXRlZFdlaVJhaXNlZDsKCiAgICAgICAgLy8gRm9yd2FyZCB0aGUgZnVuZCB0byBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0LgogICAgICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSghc2FsZUFjdGl2ZSgpKTsKCiAgICAgICAgLy8gVHJhbnNmZXIgdGhlIHJlc3Qgb2YgdG9rZW4gdG8gVEIgdGVhbQogICAgICAgIGJhbGFuY2VzW3dhbGxldF0gPSBiYWxhbmNlc1t3YWxsZXRdLmFkZChiYWxhbmNlc1sweGIxXSk7CiAgICAgICAgYmFsYW5jZXNbMHhiMV0gPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhbGVBY3RpdmUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoZ2V0Q3VycmVudFRpbWVzdGFtcCgpID49IHN0YXJ0RGF0ZSAmJgogICAgICAgICAgICAgICAgZ2V0Q3VycmVudFRpbWVzdGFtcCgpIDwgZW5kRGF0ZSAmJiBzdXBwbHkoKSA+IDApOwogICAgfQogICAgCn0='.
	

]
