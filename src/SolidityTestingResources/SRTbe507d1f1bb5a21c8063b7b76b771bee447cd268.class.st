Class {
	#name : #SRTbe507d1f1bb5a21c8063b7b76b771bee447cd268,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbe507d1f1bb5a21c8063b7b76b771bee447cd268 >> base64 [
	^ ''.
	

]
