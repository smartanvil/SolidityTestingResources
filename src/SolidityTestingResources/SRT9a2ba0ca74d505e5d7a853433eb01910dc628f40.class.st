Class {
	#name : #SRT9a2ba0ca74d505e5d7a853433eb01910dc628f40,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a2ba0ca74d505e5d7a853433eb01910dc628f40 >> base64 [
	^ ''.
	

]
