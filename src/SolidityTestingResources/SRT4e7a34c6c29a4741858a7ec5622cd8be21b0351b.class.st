Class {
	#name : #SRT4e7a34c6c29a4741858a7ec5622cd8be21b0351b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e7a34c6c29a4741858a7ec5622cd8be21b0351b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Ci8vLyBAdGl0bGUgT3duYWJsZSBjb250cmFjdCAtIGJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lcgpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIH0KICAgIH0KfQoKLy8vIEB0aXRsZSBLaWxsYWJsZSBjb250cmFjdCAtIGJhc2UgY29udHJhY3QgdGhhdCBjYW4gYmUga2lsbGVkIGJ5IG93bmVyLiBBbGwgZnVuZHMgaW4gY29udHJhY3Qgd2lsbCBiZSBzZW50IHRvIHRoZSBvd25lci4KY29udHJhY3QgS2lsbGFibGUgaXMgT3duYWJsZSB7CiAgICBmdW5jdGlvbiBraWxsKCkgb25seU93bmVyIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQp9CgovLy8gQHRpdGxlIEhhbHRhYmxlIGNvbnRyYWN0IC0gYWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KLy8vIE9yaWdpbmFsbHkgZW52aXNpb25lZCBpbiBGaXJzdEJsb29kIElDTyBjb250cmFjdC4KY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgICBib29sIHB1YmxpYyBoYWx0ZWQ7CgogICAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgICAgICByZXF1aXJlKCFoYWx0ZWQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgICAgICByZXF1aXJlKGhhbHRlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbWVyZ2VuY3ksIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgIGZ1bmN0aW9uIGhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGhhbHRlZCA9IHRydWU7CiAgICB9CgogICAgLy8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgIGZ1bmN0aW9uIHVuaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgICAgIGhhbHRlZCA9IGZhbHNlOwogICAgfQp9CgovLy8gQHRpdGxlIE1pZ3JhdGlvbnMgY29udHJhY3QgLSBhYnN0cmFjdCBjb250cmFjdCB0aGF0IGFsbG93cyBtaWdyYXRlIHRvIG5ldyBhZGRyZXNzLgpjb250cmFjdCBNaWdyYXRpb25zIGlzIE93bmFibGUgewogICAgdWludCBwdWJsaWMgbGFzdENvbXBsZXRlZE1pZ3JhdGlvbjsKCiAgICBmdW5jdGlvbiBzZXRDb21wbGV0ZWQodWludCBjb21wbGV0ZWQpIG9ubHlPd25lciB7CiAgICAgICAgbGFzdENvbXBsZXRlZE1pZ3JhdGlvbiA9IGNvbXBsZXRlZDsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGdyYWRlKGFkZHJlc3MgbmV3QWRkcmVzcykgb25seU93bmVyIHsKICAgICAgICBNaWdyYXRpb25zIHVwZ3JhZGVkID0gTWlncmF0aW9ucyhuZXdBZGRyZXNzKTsKICAgICAgICB1cGdyYWRlZC5zZXRDb21wbGV0ZWQobGFzdENvbXBsZXRlZE1pZ3JhdGlvbik7CiAgICB9Cn0KLy8vIEB0aXRsZSBQYXVzYWJsZSBjb250cmFjdCAtIGFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogICAgYm9vbCBwdWJsaWMgc3RvcHBlZDsKCiAgICBtb2RpZmllciBzdG9wSW5FbWVyZ2VuY3kgewogICAgICAgIGlmICghc3RvcHBlZCkgewogICAgICAgICAgICBfOwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBvbmx5SW5FbWVyZ2VuY3kgewogICAgICAgIGlmIChzdG9wcGVkKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAgZnVuY3Rpb24gZW1lcmdlbmN5U3RvcCgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgc3RvcHBlZCA9IHRydWU7CiAgICB9CgogICAgLy8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgIGZ1bmN0aW9uIHJlbGVhc2UoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgICAgICBzdG9wcGVkID0gZmFsc2U7CiAgICB9Cn0KCi8vLyBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKY29udHJhY3QgRVJDMjAgewogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgoKLy8vIEB0aXRsZSBTYWZlTWF0aCBjb250cmFjdCAtIG1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKY29udHJhY3QgU2FmZU1hdGggewogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhIC8gYjsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KfQoKLy8vIEB0aXRsZSBTaGFyZUVzdGF0ZVRva2VuIGNvbnRyYWN0IC0gRVJDMjAgdG9rZW4gd2l0aCBTaG9ydCBIYW5kIEF0dGFjayBhbmQgYXBwcm92ZSgpIHJhY2UgY29uZGl0aW9uIG1pdGlnYXRpb24uCmNvbnRyYWN0IFNoYXJlRXN0YXRlVG9rZW4gaXMgU2FmZU1hdGgsIEVSQzIwLCBPd25hYmxlIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJTaGFyZUVzdGF0ZSBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJTUkUiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSA0OwoKICAgIC8vLyBjb250cmFjdCB0aGF0IGlzIGFsbG93ZWQgdG8gY3JlYXRlIG5ldyB0b2tlbnMgYW5kIGFsbG93cyB1bmxpZnQgdGhlIHRyYW5zZmVyIGxpbWl0cyBvbiB0aGlzIHRva2VuCiAgICBhZGRyZXNzIHB1YmxpYyBjcm93ZHNhbGVBZ2VudDsKICAgIC8vLyBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4KICAgIGJvb2wgcHVibGljIHJlbGVhc2VkID0gZmFsc2U7CiAgICAvLy8gYXBwcm92ZSgpIGFsbG93YW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKICAgIC8vLyBob2xkZXIgYmFsYW5jZXMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKCiAgICAvLy8gQGRldiBMaW1pdCB0b2tlbiB0cmFuc2ZlciB1bnRpbCB0aGUgY3Jvd2RzYWxlIGlzIG92ZXIuCiAgICBtb2RpZmllciBjYW5UcmFuc2ZlcigpIHsKICAgICAgICBpZighcmVsZWFzZWQpIHsKICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyb3dkc2FsZUFnZW50KTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBvbmx5IGJlZm9yZSBvciBhZnRlciB0aGUgdG9rZW5zIGhhdmUgYmVlbiByZWxlYXNlc2QKICAgIC8vLyBAcGFyYW0gX3JlbGVhc2VkIHRva2VuIHRyYW5zZmVyIGFuZCBtaW50IHN0YXRlCiAgICBtb2RpZmllciBpblJlbGVhc2VTdGF0ZShib29sIF9yZWxlYXNlZCkgewogICAgICAgIHJlcXVpcmUoX3JlbGVhc2VkID09IHJlbGVhc2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYnkgcmVsZWFzZSBhZ2VudC4KICAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVBZ2VudCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQWdlbnQpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sgaHR0cDovL3Zlc3NlbmVzLmNvbS90aGUtZXJjMjAtc2hvcnQtYWRkcmVzcy1hdHRhY2stZXhwbGFpbmVkLwogICAgLy8vIEBwYXJhbSBzaXplIHBheWxvYWQgc2l6ZQogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IE1ha2Ugc3VyZSB3ZSBhcmUgbm90IGRvbmUgeWV0LgogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFyZWxlYXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBNYWluIENvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBTaGFyZUVzdGF0ZVRva2VuKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLy8gRmFsbGJhY2sgbWV0aG9kIHdpbGwgYnV5b3V0IHRva2VucwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGUgbmV3IHRva2VucyBhbmQgYWxsb2NhdGUgdGhlbSB0byBhbiBhZGRyZXNzLiBPbmx5IGNhbGxhYmxlIGJ5IGEgY3Jvd2RzYWxlIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIHJlY2VpdmVyIEFkZHJlc3Mgb2YgcmVjZWl2ZXIKICAgIC8vLyBAcGFyYW0gYW1vdW50ICBOdW1iZXIgb2YgdG9rZW5zIHRvIGlzc3VlLgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgb25seUNyb3dkc2FsZUFnZW50IGNhbk1pbnQgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbcmVjZWl2ZXJdID0gc2FmZUFkZChiYWxhbmNlc1tyZWNlaXZlcl0sIGFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIoMCwgcmVjZWl2ZXIsIGFtb3VudCk7CiAgICB9CgogICAgLy8vIEBkZXYgU2V0IHRoZSBjb250cmFjdCB0aGF0IGNhbiBjYWxsIHJlbGVhc2UgYW5kIG1ha2UgdGhlIHRva2VuIHRyYW5zZmVyYWJsZS4KICAgIC8vLyBAcGFyYW0gX2Nyb3dkc2FsZUFnZW50IGNyb3dkc2FsZSBjb250cmFjdCBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVBZ2VudChhZGRyZXNzIF9jcm93ZHNhbGVBZ2VudCkgb25seU93bmVyIGluUmVsZWFzZVN0YXRlKGZhbHNlKSBwdWJsaWMgewogICAgICAgIGNyb3dkc2FsZUFnZW50ID0gX2Nyb3dkc2FsZUFnZW50OwogICAgfQogICAgLy8vIEBkZXYgT25lIHdheSBmdW5jdGlvbiB0byByZWxlYXNlIHRoZSB0b2tlbnMgdG8gdGhlIHdpbGQuIENhbiBiZSBjYWxsZWQgb25seSBmcm9tIHRoZSByZWxlYXNlIGFnZW50IHRoYXQgaXMgdGhlIGZpbmFsIElDTyBjb250cmFjdC4gSXQgaXMgb25seSBjYWxsZWQgaWYgdGhlIGNyb3dkc2FsZSBoYXMgYmVlbiBzdWNjZXNzIChmaXJzdCBtaWxlc3RvbmUgcmVhY2hlZCkuCiAgICBmdW5jdGlvbiByZWxlYXNlVG9rZW5UcmFuc2ZlcigpIHB1YmxpYyBvbmx5Q3Jvd2RzYWxlQWdlbnQgewogICAgICAgIHJlbGVhc2VkID0gdHJ1ZTsKICAgIH0KICAgIC8vLyBAZGV2IFRyYW5mZXIgdG9rZW5zIHRvIGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX3RvIGRlc3QgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfdmFsdWUgdG9rZW5zIGFtb3VudAogICAgLy8vIEByZXR1cm4gdHJhbnNmZXIgcmVzdWx0CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIGNhblRyYW5zZmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwoKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbmZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBvdGhlcgogICAgLy8vIEBwYXJhbSBfZnJvbSBzb3VyY2UgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfdG8gZGVzdCBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIF92YWx1ZSB0b2tlbnMgYW1vdW50CiAgICAvLy8gQHJldHVybiB0cmFuc2ZlciByZXN1bHQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIGNhblRyYW5zZmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8vLyBAZGV2IFRva2VucyBiYWxhbmNlCiAgICAvLy8gQHBhcmFtIF9vd25lciBob2xkZXIgYWRkcmVzcwogICAgLy8vIEByZXR1cm4gYmFsYW5jZSBhbW91bnQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgLy8vIEBkZXYgQXBwcm92ZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBob2xkZXIgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfdmFsdWUgdG9rZW5zIGFtb3VudAogICAgLy8vIEByZXR1cm4gcmVzdWx0CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgICAgcmVxdWlyZSAoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBUb2tlbiBhbGxvd2FuY2UKICAgIC8vLyBAcGFyYW0gX293bmVyIGhvbGRlciBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIHNwZW5kZXIgYWRkcmVzcwogICAgLy8vIEByZXR1cm4gcmVtYWluIGFtb3VudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9Ci8vLyBAdGl0bGUgU2hhcmVFc3RhdGVUb2tlbkNyb3dkc2FsZSBjb250cmFjdCAtIGNvbnRyYWN0IGZvciB0b2tlbiBzYWxlcy4KY29udHJhY3QgU2hhcmVFc3RhdGVUb2tlbkNyb3dkc2FsZSBpcyBIYWx0YWJsZSwgS2lsbGFibGUsIFNhZmVNYXRoIHsKCiAgICAvLy8gUHJlZnVuZGluZyBnb2FsIGluIFVTRCBjZW50cywgaWYgdGhlIHByZWZ1bmRpbmcgZ29hbCBpcyByZWFjaGVkLCBwcmUgSUNPIHdpbGwgc3RvcAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgUFJFX0ZVTkRJTkdfR09BTCA9IDFlNiAqIFBSSUNFOwoKICAgIC8vLyBNaW1pbmFsIHRva2VucyBmdW5kaW5nIGdvYWwgaW4gVVNEIGNlbnRzLCBpZiB0aGlzIGdvYWwgaXNuJ3QgcmVhY2hlZCBkdXJpbmcgSUNPLCByZWZ1bmQgd2lsbCBiZWdpbgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX1BSRV9GVU5ESU5HX0dPQUwgPSAyZTUgKiBQUklDRTsKCiAgICAvLy8gUGVyY2VudCBvZiBib251cyB0b2tlbnMgdGVhbSByZWNlaXZlcyBmcm9tIGVhY2ggaW52ZXN0bWVudAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVEVBTV9CT05VU19QRVJDRU5UID0gMjQ7CgogICAgLy8vIFRoZSB0b2tlbiBwcmljZSBpbiBVU0QgY2VudHMKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIFBSSUNFID0gMTAwOwoKICAgIC8vLyBEdXJhdGlvbiBvZiB0aGUgcHJlLUlDTyBzdGFnZQogICAgdWludCBjb25zdGFudCBwdWJsaWMgUFJFX0lDT19EVVJBVElPTiA9IDUgd2Vla3M7CgogICAgLy8vIFRoZSB0b2tlbiB3ZSBhcmUgc2VsbGluZwoKICAgIFNoYXJlRXN0YXRlVG9rZW4gcHVibGljIHRva2VuOwoKICAgIC8vLyB0b2tlbnMgd2lsbCBiZSB0cmFuc2ZlcmVkIGZyb20gdGhpcyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ1dhbGxldDsKCiAgICAvLy8gdGhlIFVOSVggdGltZXN0YW1wIHN0YXJ0IGRhdGUgb2YgdGhlIGNyb3dkc2FsZQogICAgdWludCBwdWJsaWMgc3RhcnRzQXQ7CgogICAgLy8vIHRoZSBVTklYIHRpbWVzdGFtcCBlbmQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlCiAgICB1aW50IHB1YmxpYyBwcmVJY29FbmRzQXQ7CgogICAgLy8vIHRoZSBudW1iZXIgb2YgdG9rZW5zIGFscmVhZHkgc29sZCB0aHJvdWdoIHRoaXMgY29udHJhY3QKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQgPSAwOwoKICAgIC8vLyBIb3cgbWFueSB3ZWkgb2YgZnVuZGluZyB3ZSBoYXZlIHJhaXNlZAogICAgdWludCBwdWJsaWMgd2VpUmFpc2VkID0gMDsKCiAgICAvLy8gSG93IG1hbnkgZGlzdGluY3QgYWRkcmVzc2VzIGhhdmUgaW52ZXN0ZWQKICAgIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQgPSAwOwoKICAgIC8vLyBIb3cgbXVjaCB3ZWkgd2UgaGF2ZSByZXR1cm5lZCBiYWNrIHRvIHRoZSBjb250cmFjdCBhZnRlciBhIGZhaWxlZCBjcm93ZGZ1bmQuCiAgICB1aW50IHB1YmxpYyBsb2FkZWRSZWZ1bmQgPSAwOwoKICAgIC8vLyBIb3cgbXVjaCB3ZWkgd2UgaGF2ZSBnaXZlbiBiYWNrIHRvIGludmVzdG9ycy4KICAgIHVpbnQgcHVibGljIHdlaVJlZnVuZGVkID0gMDsKCiAgICAvLy8gSGFzIHRoaXMgY3Jvd2RzYWxlIGJlZW4gZmluYWxpemVkCiAgICBib29sIHB1YmxpYyBmaW5hbGl6ZWQ7CgogICAgLy8vIFVTRCB0byBFdGhlciByYXRlIGluIGNlbnRzCiAgICB1aW50IHB1YmxpYyBleGNoYW5nZVJhdGU7CgogICAgLy8vIGV4Y2hhbmdlUmF0ZSB0aW1lc3RhbXAKICAgIHVpbnQgcHVibGljIGV4Y2hhbmdlUmF0ZVRpbWVzdGFtcDsKCiAgICAvLy8gRXh0ZXJuYWwgYWdlbnQgdGhhdCB3aWxsIGNhbiBjaGFuZ2UgZXhjaGFuZ2UgcmF0ZQogICAgYWRkcmVzcyBwdWJsaWMgZXhjaGFuZ2VSYXRlQWdlbnQ7CgogICAgLy8vIEhvdyBtdWNoIEVUSCBlYWNoIGFkZHJlc3MgaGFzIGludmVzdGVkIHRvIHRoaXMgY3Jvd2RzYWxlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBpbnZlc3RlZEFtb3VudE9mOwoKICAgIC8vLyBIb3cgbXVjaCB0b2tlbnMgdGhpcyBjcm93ZHNhbGUgaGFzIGNyZWRpdGVkIGZvciBlYWNoIGludmVzdG9yIGFkZHJlc3MKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHRva2VuQW1vdW50T2Y7CgogICAgLy8vIERlZmluZSBwcmVJQ08gcHJpY2luZyBzY2hlZHVsZSB1c2luZyBtaWxlc3RvbmVzLgogICAgc3RydWN0IE1pbGVzdG9uZSB7CiAgICAvLyBVTklYIHRpbWVzdGFtcCB3aGVuIHRoaXMgbWlsZXN0b25lIGtpY2tzIGluCiAgICB1aW50IHN0YXJ0OwogICAgLy8gVU5JWCB0aW1lc3RhbXAgd2hlbiB0aGlzIG1pbGVzdG9uZSBraWNrcyBvdXQKICAgIHVpbnQgZW5kOwogICAgLy8gSG93IG1hbnkgJSB0b2tlbnMgd2lsbCBhZGQKICAgIHVpbnQgYm9udXM7CiAgICB9CgogICAgTWlsZXN0b25lW10gcHVibGljIG1pbGVzdG9uZXM7CgogICAgLy8vIFN0YXRlIG1hY2hpbmUKICAgIC8vLyBQcmVwYXJpbmc6IEFsbCBjb250cmFjdCBpbml0aWFsaXphdGlvbiBjYWxscyBhbmQgdmFyaWFibGVzIGhhdmUgbm90IGJlZW4gc2V0IHlldAogICAgLy8vIFByZWZ1bmRpbmc6IFdlIGhhdmUgbm90IHBhc3NlZCBzdGFydCB0aW1lIHlldAogICAgLy8vIFByZUZ1bmRpbmdTdWNjZXNzOiBNaW5pbXVtIGZ1bmRpbmcgZ29hbCByZWFjaGVkCiAgICAvLy8gRmFpbHVyZTogTWluaW11bSBmdW5kaW5nIGdvYWwgbm90IHJlYWNoZWQgYmVmb3JlIGVuZGluZyB0aW1lCiAgICAvLy8gRmluYWxpemVkOiBUaGUgZmluYWxpemVkIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWRcCiAgICAvLy8gUmVmdW5kaW5nOiBSZWZ1bmRzIGFyZSBsb2FkZWQgb24gdGhlIGNvbnRyYWN0IGZvciByZWNsYWltLgogICAgZW51bSBTdGF0ZXtVbmtub3duLCBQcmVwYXJpbmcsIFByZUZ1bmRpbmcsIFByZUZ1bmRpbmdTdWNjZXNzLCBGYWlsdXJlLCBGaW5hbGl6ZWQsIFJlZnVuZGluZ30KCiAgICAvLy8gQSBuZXcgaW52ZXN0bWVudCB3YXMgbWFkZQogICAgZXZlbnQgSW52ZXN0ZWQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQpOwogICAgLy8vIFJlZnVuZCB3YXMgcHJvY2Vzc2VkIGZvciBhIGNvbnRyaWJ1dG9yCiAgICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQpOwogICAgLy8vIENyb3dkc2FsZSBlbmQgdGltZSBoYXMgYmVlbiBjaGFuZ2VkCiAgICBldmVudCBwcmVJY29FbmRzQXRDaGFuZ2VkKHVpbnQgZW5kc0F0KTsKICAgIC8vLyBDYWxjdWxhdGVkIG5ldwogICAgZXZlbnQgRXhjaGFuZ2VSYXRlQ2hhbmdlZCh1aW50IG9sZFZhbHVlLCB1aW50IG5ld1ZhbHVlKTsKCiAgICAvLy8gQGRldiBNb2RpZmllZCBhbGxvd2luZyBleGVjdXRpb24gb25seSBpZiB0aGUgY3Jvd2RzYWxlIGlzIGN1cnJlbnRseSBydW5uaW5nCiAgICBtb2RpZmllciBpblN0YXRlKFN0YXRlIHN0YXRlKSB7CiAgICAgICAgcmVxdWlyZShnZXRTdGF0ZSgpID09IHN0YXRlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlFeGNoYW5nZVJhdGVBZ2VudCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gZXhjaGFuZ2VSYXRlQWdlbnQpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IKICAgIC8vLyBAcGFyYW0gX3Rva2VuIFNvbGFyIERhbyB0b2tlbiBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIF9tdWx0aXNpZ1dhbGxldCB0ZWFtIHdhbGxldAogICAgLy8vIEBwYXJhbSBfcHJlSW52ZXN0U3RhcnQgcHJlSUNPIHN0YXJ0IGRhdGUKICAgIC8vLyBAcGFyYW0gX3ByZUludmVzdFN0b3AgdG9rZW4gSUNPIGVuZCBkYXRlCiAgICBmdW5jdGlvbiBTaGFyZUVzdGF0ZVRva2VuQ3Jvd2RzYWxlKGFkZHJlc3MgX3Rva2VuLCBhZGRyZXNzIF9tdWx0aXNpZ1dhbGxldCwgdWludCBfcHJlSW52ZXN0U3RhcnQsIHVpbnQgX3ByZUludmVzdFN0b3ApIHsKICAgICAgICByZXF1aXJlKF9tdWx0aXNpZ1dhbGxldCAhPSAwKTsKICAgICAgICByZXF1aXJlKF9wcmVJbnZlc3RTdGFydCAhPSAwKTsKICAgICAgICByZXF1aXJlKF9wcmVJbnZlc3RTdG9wICE9IDApOwogICAgICAgIHJlcXVpcmUoX3ByZUludmVzdFN0YXJ0IDwgX3ByZUludmVzdFN0b3ApOwoKICAgICAgICB0b2tlbiA9IFNoYXJlRXN0YXRlVG9rZW4oX3Rva2VuKTsKCiAgICAgICAgbXVsdGlzaWdXYWxsZXQgPSBfbXVsdGlzaWdXYWxsZXQ7CiAgICAgICAgc3RhcnRzQXQgPSBfcHJlSW52ZXN0U3RhcnQ7CiAgICAgICAgcHJlSWNvRW5kc0F0ID0gX3ByZUludmVzdFN0b3A7CiAgICAgICAgdmFyIHByZUljb0JvbnVzZXMgPSBbdWludCg2NSksIDUwLCA0MCwgMzUsIDMwXTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBwcmVJY29Cb251c2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIG1pbGVzdG9uZXMucHVzaChNaWxlc3RvbmUoX3ByZUludmVzdFN0YXJ0ICsgaSAqIDEgd2Vla3MsIF9wcmVJbnZlc3RTdGFydCArIChpICsgMSkgKiAxIHdlZWtzLCBwcmVJY29Cb251c2VzW2ldKSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5KCk7CiAgICB9CgogICAgLy8vIEBkZXYgR2V0IHRoZSBjdXJyZW50IG1pbGVzdG9uZSBvciBiYWlsIG91dCBpZiB3ZSBhcmUgbm90IGluIHRoZSBtaWxlc3RvbmUgcGVyaW9kcy4KICAgIC8vLyBAcmV0dXJuIE1pbGVzdG9uZSBjdXJyZW50IGJvbnVzIG1pbGVzdG9uZQogICAgZnVuY3Rpb24gZ2V0Q3VycmVudE1pbGVzdG9uZSgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoTWlsZXN0b25lKSB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbWlsZXN0b25lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAobWlsZXN0b25lc1tpXS5zdGFydCA8PSBub3cgJiYgbWlsZXN0b25lc1tpXS5lbmQgPiBub3cpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtaWxlc3RvbmVzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IE1ha2UgYW4gaW52ZXN0bWVudC4gQ3Jvd2RzYWxlIG11c3QgYmUgcnVubmluZyBmb3Igb25lIHRvIGludmVzdC4KICAgIC8vLyBAcGFyYW0gcmVjZWl2ZXIgVGhlIEV0aGVyZXVtIGFkZHJlc3Mgd2hvIHJlY2VpdmVzIHRoZSB0b2tlbnMKICAgIGZ1bmN0aW9uIGludmVzdEludGVybmFsKGFkZHJlc3MgcmVjZWl2ZXIpIHN0b3BJbkVtZXJnZW5jeSBwcml2YXRlIHsKICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpOwogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuUHJlRnVuZGluZyk7CgogICAgICAgIHVpbnQgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQgdG9rZW5zQW1vdW50ID0gY2FsY3VsYXRlVG9rZW5zKHdlaUFtb3VudCk7CgogICAgICAgIGlmKHN0YXRlID09IFN0YXRlLlByZUZ1bmRpbmcpIHsKICAgICAgICAgICAgdG9rZW5zQW1vdW50ICs9IHNhZmVEaXYoc2FmZU11bCh0b2tlbnNBbW91bnQsIGdldEN1cnJlbnRNaWxlc3RvbmUoKS5ib251cyksIDEwMCk7CiAgICAgICAgfQoKICAgICAgICBpZihpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9PSAwKSB7CiAgICAgICAgICAgIC8vIEEgbmV3IGludmVzdG9yCiAgICAgICAgICAgIGludmVzdG9yQ291bnQrKzsKICAgICAgICB9CgogICAgICAgIC8vIFVwZGF0ZSBpbnZlc3RvcgogICAgICAgIGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID0gc2FmZUFkZChpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSwgd2VpQW1vdW50KTsKICAgICAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHNhZmVBZGQodG9rZW5BbW91bnRPZltyZWNlaXZlcl0sIHRva2Vuc0Ftb3VudCk7CiAgICAgICAgLy8gVXBkYXRlIHRvdGFscwogICAgICAgIHdlaVJhaXNlZCA9IHNhZmVBZGQod2VpUmFpc2VkLCB3ZWlBbW91bnQpOwogICAgICAgIHRva2Vuc1NvbGQgPSBzYWZlQWRkKHRva2Vuc1NvbGQsIHRva2Vuc0Ftb3VudCk7CgogICAgICAgIGFzc2lnblRva2VucyhyZWNlaXZlciwgdG9rZW5zQW1vdW50KTsKICAgICAgICB2YXIgdGVhbUJvbnVzVG9rZW5zID0gc2FmZURpdihzYWZlTXVsKHRva2Vuc0Ftb3VudCwgVEVBTV9CT05VU19QRVJDRU5UKSwgMTAwIC0gVEVBTV9CT05VU19QRVJDRU5UKTsKICAgICAgICBhc3NpZ25Ub2tlbnMobXVsdGlzaWdXYWxsZXQsIHRlYW1Cb251c1Rva2Vucyk7CgogICAgICAgIG11bHRpc2lnV2FsbGV0LnRyYW5zZmVyKHdlaUFtb3VudCk7CiAgICAgICAgLy8gVGVsbCB1cyBpbnZlc3Qgd2FzIHN1Y2Nlc3MKICAgICAgICBJbnZlc3RlZChyZWNlaXZlciwgd2VpQW1vdW50LCB0b2tlbnNBbW91bnQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93IGFub255bW91cyBjb250cmlidXRpb25zIHRvIHRoaXMgY3Jvd2RzYWxlLgogICAgLy8vIEBwYXJhbSByZWNlaXZlciBUaGUgRXRoZXJldW0gYWRkcmVzcyB3aG8gcmVjZWl2ZXMgdGhlIHRva2VucwogICAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgcmVjZWl2ZXIpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpbnZlc3RJbnRlcm5hbChyZWNlaXZlcik7CiAgICB9CgogICAgLy8vIEBkZXYgVGhlIGJhc2ljIGVudHJ5IHBvaW50IHRvIHBhcnRpY2lwYXRlIHRoZSBjcm93ZHNhbGUgcHJvY2Vzcy4KICAgIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpbnZlc3QobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgRmluYWxpemUgYSBzdWNjY2VzZnVsIGNyb3dkc2FsZS4KICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIGluU3RhdGUoU3RhdGUuUHJlRnVuZGluZ1N1Y2Nlc3MpIG9ubHlPd25lciBzdG9wSW5FbWVyZ2VuY3kgewogICAgICAgIHJlcXVpcmUoIWZpbmFsaXplZCk7CgogICAgICAgIGZpbmFsaXplZCA9IHRydWU7CiAgICAgICAgZmluYWxpemVDcm93ZHNhbGUoKTsKICAgIH0KCiAgICAvLy8gQGRldiBGaW5hbGl6ZSBhIHN1Y2NjZXNmdWwgY3Jvd2RzYWxlLgogICAgZnVuY3Rpb24gZmluYWxpemVDcm93ZHNhbGUoKSBpbnRlcm5hbCB7CiAgICAgICAgLy9hc3NpZ25Ub2tlbnMob3duZXIsIHNhZmVBZGQoc2FmZVN1Yih1aW50KE1BWF9UT0tFTlNfVE9fU09MRCksIHRva2Vuc1NvbGQpLCBURUFNX1RPS0VOU19BTU9VTlQpKTsKICAgICAgICAvL3Rva2VuLnJlbGVhc2VUb2tlblRyYW5zZmVyKCk7IC8vIFdpbGwgYmUgcmVsZWFzZWQgaW4gcmVzdWx0IG9mIElDTwogICAgfQoKICAgIC8vLyBAZGV2IE1ldGhvZCBmb3Igc2V0dGluZyBVU0QgdG8gRXRoZXIgcmF0ZSBmcm9tIFBvbG9uaWV4CiAgICAvLy8gQHBhcmFtIHZhbHVlIFVTRCBhbW91dCBpbiBjZW50cyBmb3IgMSBFdGhlcgogICAgLy8vIEBwYXJhbSB0aW1lIHRpbWVzdGFtcAogICAgZnVuY3Rpb24gc2V0RXhjaGFuZ2VSYXRlKHVpbnQgdmFsdWUsIHVpbnQgdGltZSkgb25seUV4Y2hhbmdlUmF0ZUFnZW50IHsKICAgICAgICByZXF1aXJlKHZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZSh0aW1lID4gMCk7CiAgICAgICAgcmVxdWlyZShleGNoYW5nZVJhdGVUaW1lc3RhbXAgPT0gMCB8fCBnZXREaWZmZXJlbmNlKGludCh0aW1lKSwgaW50KG5vdykpIDw9IDEgbWludXRlcyk7CiAgICAgICAgcmVxdWlyZShleGNoYW5nZVJhdGUgPT0gMCB8fCAoZ2V0RGlmZmVyZW5jZShpbnQodmFsdWUpLCBpbnQoZXhjaGFuZ2VSYXRlKSkgKiAxMDAgLyBleGNoYW5nZVJhdGUgPD0gMzApKTsKCiAgICAgICAgRXhjaGFuZ2VSYXRlQ2hhbmdlZChleGNoYW5nZVJhdGUsIHZhbHVlKTsKICAgICAgICBleGNoYW5nZVJhdGUgPSB2YWx1ZTsKICAgICAgICBleGNoYW5nZVJhdGVUaW1lc3RhbXAgPSB0aW1lOwogICAgfQoKICAgIC8vLyBAZGV2IE1ldGhvZCBzZXQgZXhjaGFuZ2UgcmF0ZSBhZ2VudAogICAgLy8vIEBwYXJhbSBuZXdBZ2VudCBuZXcgYWdlbnQKICAgIGZ1bmN0aW9uIHNldEV4Y2hhbmdlUmF0ZUFnZW50KGFkZHJlc3MgbmV3QWdlbnQpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld0FnZW50ICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgZXhjaGFuZ2VSYXRlQWdlbnQgPSBuZXdBZ2VudDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RGlmZmVyZW5jZShpbnQgb25lLCBpbnQgdHdvKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICB2YXIgZGlmZiA9IG9uZSAtIHR3bzsKICAgICAgICBpZiAoZGlmZiA8IDApCiAgICAgICAgZGlmZiA9IC1kaWZmOwogICAgICAgIHJldHVybiB1aW50KGRpZmYpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93IGNyb3dkc2FsZSBvd25lciB0byBjbG9zZSBlYXJseSBvciBleHRlbmQgdGhlIGNyb3dkc2FsZS4KICAgIC8vLyBAcGFyYW0gdGltZSB0aW1lc3RhbXAKICAgIGZ1bmN0aW9uIHNldFByZUljb0VuZHNBdCh1aW50IHRpbWUpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSh0aW1lID49IG5vdyk7CiAgICAgICAgcHJlSWNvRW5kc0F0ID0gdGltZTsKICAgICAgICBwcmVJY29FbmRzQXRDaGFuZ2VkKHByZUljb0VuZHNBdCk7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3cgbG9hZCByZWZ1bmRzIGJhY2sgb24gdGhlIGNvbnRyYWN0IGZvciB0aGUgcmVmdW5kaW5nLgogICAgZnVuY3Rpb24gbG9hZFJlZnVuZCgpIHB1YmxpYyBwYXlhYmxlIGluU3RhdGUoU3RhdGUuRmFpbHVyZSkgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgbG9hZGVkUmVmdW5kID0gc2FmZUFkZChsb2FkZWRSZWZ1bmQsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgSW52ZXN0b3JzIGNhbiBjbGFpbSByZWZ1bmQuCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5SZWZ1bmRpbmcpIHsKICAgICAgICB1aW50MjU2IHdlaVZhbHVlID0gaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXTsKICAgICAgICBpZiAod2VpVmFsdWUgPT0gMCkKICAgICAgICByZXR1cm47CiAgICAgICAgaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgd2VpUmVmdW5kZWQgPSBzYWZlQWRkKHdlaVJlZnVuZGVkLCB3ZWlWYWx1ZSk7CiAgICAgICAgUmVmdW5kKG1zZy5zZW5kZXIsIHdlaVZhbHVlKTsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHdlaVZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBNaW5pbXVtIGdvYWwgd2FzIHJlYWNoZWQKICAgIC8vLyBAcmV0dXJuIHRydWUgaWYgdGhlIGNyb3dkc2FsZSBoYXMgcmFpc2VkIGVub3VnaCBtb25leSB0byBub3QgaW5pdGlhdGUgdGhlIHJlZnVuZGluZwogICAgZnVuY3Rpb24gaXNNaW5pbXVtR29hbFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCByZWFjaGVkKSB7CiAgICAgICAgcmV0dXJuIHdlaVRvVXNkQ2VudHMod2VpUmFpc2VkKSA+PSBNSU5fUFJFX0ZVTkRJTkdfR09BTDsKICAgIH0KCiAgICAvLy8gQGRldiBNZXRob2Qgc2V0IGRhdGEgZnJvbSBtaWdyYXRlZCBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfdG9rZW5zU29sZCB0b2tlbnMgc29sZAogICAgLy8vIEBwYXJhbSBfd2VpUmFpc2VkIF93ZWkgcmFpc2VkCiAgICAvLy8gQHBhcmFtIF9pbnZlc3RvckNvdW50IGludmVzdG9yIGNvdW50CiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVEYXRhKHVpbnQgX3Rva2Vuc1NvbGQsIHVpbnQgX3dlaVJhaXNlZCwgdWludCBfaW52ZXN0b3JDb3VudCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF90b2tlbnNTb2xkID4gMCk7CiAgICAgICAgcmVxdWlyZShfd2VpUmFpc2VkID4gMCk7CiAgICAgICAgcmVxdWlyZShfaW52ZXN0b3JDb3VudCA+IDApOwoKICAgICAgICB0b2tlbnNTb2xkID0gX3Rva2Vuc1NvbGQ7CiAgICAgICAgd2VpUmFpc2VkID0gX3dlaVJhaXNlZDsKICAgICAgICBpbnZlc3RvckNvdW50ID0gX2ludmVzdG9yQ291bnQ7CiAgICB9CgogICAgLy8vIEBkZXYgQ3Jvd2RmdW5kIHN0YXRlIG1hY2hpbmUgbWFuYWdlbWVudC4KICAgIC8vLyBAcmV0dXJuIFN0YXRlIGN1cnJlbnQgc3RhdGUKICAgIGZ1bmN0aW9uIGdldFN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKFN0YXRlKSB7CiAgICAgICAgaWYgKGZpbmFsaXplZCkKICAgICAgICByZXR1cm4gU3RhdGUuRmluYWxpemVkOwogICAgICAgIGlmIChhZGRyZXNzKHRva2VuKSA9PSAwIHx8IGFkZHJlc3MobXVsdGlzaWdXYWxsZXQpID09IDAgfHwgbm93IDwgc3RhcnRzQXQpCiAgICAgICAgcmV0dXJuIFN0YXRlLlByZXBhcmluZzsKICAgICAgICBpZiAobm93ID4gc3RhcnRzQXQgJiYgbm93IDwgcHJlSWNvRW5kc0F0IC0gMiBkYXlzICYmICFpc01heGltdW1QcmVGdW5kaW5nR29hbFJlYWNoZWQoKSkKICAgICAgICByZXR1cm4gU3RhdGUuUHJlRnVuZGluZzsKICAgICAgICBpZiAoaXNNaW5pbXVtR29hbFJlYWNoZWQoKSkKICAgICAgICByZXR1cm4gU3RhdGUuUHJlRnVuZGluZ1N1Y2Nlc3M7CiAgICAgICAgaWYgKCFpc01pbmltdW1Hb2FsUmVhY2hlZCgpICYmIHdlaVJhaXNlZCA+IDAgJiYgbG9hZGVkUmVmdW5kID49IHdlaVJhaXNlZCkKICAgICAgICByZXR1cm4gU3RhdGUuUmVmdW5kaW5nOwogICAgICAgIHJldHVybiBTdGF0ZS5GYWlsdXJlOwogICAgfQoKICAgIC8vLyBAZGV2IENhbGN1bGF0aW5nIHRva2VucyBjb3VudAogICAgLy8vIEBwYXJhbSB3ZWlBbW91bnQgaW52ZXN0ZWQKICAgIC8vLyBAcmV0dXJuIHRva2VucyBhbW91bnQKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2Vucyh1aW50IHdlaUFtb3VudCkgaW50ZXJuYWwgcmV0dXJucyAodWludCB0b2tlbkFtb3VudCkgewogICAgICAgIHZhciBtdWx0aXBsaWVyID0gMTAgKiogdG9rZW4uZGVjaW1hbHMoKTsKCiAgICAgICAgdWludCB1c2RBbW91bnQgPSB3ZWlUb1VzZENlbnRzKHdlaUFtb3VudCk7CgogICAgICAgIHJldHVybiBzYWZlTXVsKHVzZEFtb3VudCwgc2FmZURpdihtdWx0aXBsaWVyLCBQUklDRSkpOwogICAgfQoKICAgIC8vLyBAZGV2IENoZWNrIGlmIHRoZSBwcmUgSUNPIGdvYWwgd2FzIHJlYWNoZWQuCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIHRoZSBwcmVJQ08gaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gYmUgYSBzdWNjZXNzCiAgICBmdW5jdGlvbiBpc01heGltdW1QcmVGdW5kaW5nR29hbFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCByZWFjaGVkKSB7CiAgICAgICAgcmV0dXJuIHdlaVRvVXNkQ2VudHMod2VpUmFpc2VkKSA+PSBQUkVfRlVORElOR19HT0FMOwogICAgfQoKICAgIC8vLyBAZGV2IENvbnZlcnRzIHdlaSB2YWx1ZSBpbnRvIFVTRCBjZW50cyBhY2NvcmRpbmcgdG8gY3VycmVudCBleGNoYW5nZSByYXRlCiAgICAvLy8gQHBhcmFtIHdlaVZhbHVlIHdlaSB2YWx1ZSB0byBjb252ZXJ0CiAgICAvLy8gQHJldHVybiBVU0QgY2VudHMgZXF1aXZhbGVudCBvZiB0aGUgd2VpIHZhbHVlCiAgICBmdW5jdGlvbiB3ZWlUb1VzZENlbnRzKHVpbnQgd2VpVmFsdWUpIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzYWZlRGl2KHNhZmVNdWwod2VpVmFsdWUsIGV4Y2hhbmdlUmF0ZSksIDFlMTgpOwogICAgfQoKICAgIC8vLyBAZGV2IER5bmFtaWNhbGx5IGNyZWF0ZSB0b2tlbnMgYW5kIGFzc2lnbiB0aGVtIHRvIHRoZSBpbnZlc3Rvci4KICAgIC8vLyBAcGFyYW0gcmVjZWl2ZXIgaW52ZXN0b3IgYWRkcmVzcwogICAgLy8vIEBwYXJhbSB0b2tlbkFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB3ZSB0cnkgdG8gZ2l2ZSB0byB0aGUgaW52ZXN0b3IgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24KICAgIGZ1bmN0aW9uIGFzc2lnblRva2VucyhhZGRyZXNzIHJlY2VpdmVyLCB1aW50IHRva2VuQW1vdW50KSBwcml2YXRlIHsKICAgICAgICB0b2tlbi5taW50KHJlY2VpdmVyLCB0b2tlbkFtb3VudCk7CiAgICB9Cn0='.
	

]
