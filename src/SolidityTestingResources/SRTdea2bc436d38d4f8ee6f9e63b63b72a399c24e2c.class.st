Class {
	#name : #SRTdea2bc436d38d4f8ee6f9e63b63b72a399c24e2c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdea2bc436d38d4f8ee6f9e63b63b72a399c24e2c >> base64 [
	^ ''.
	

]
