Class {
	#name : #SRTf1dd5964eabcc6e86230fa6f222677cfdaaf9f0e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf1dd5964eabcc6e86230fa6f222677cfdaaf9f0e >> base64 [
	^ ''.
	

]
