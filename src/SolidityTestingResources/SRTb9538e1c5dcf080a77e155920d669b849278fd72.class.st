Class {
	#name : #SRTb9538e1c5dcf080a77e155920d669b849278fd72,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb9538e1c5dcf080a77e155920d669b849278fd72 >> base64 [
	^ ''.
	

]
