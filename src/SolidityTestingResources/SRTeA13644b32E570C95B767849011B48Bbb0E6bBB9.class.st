Class {
	#name : #SRTeA13644b32E570C95B767849011B48Bbb0E6bBB9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeA13644b32E570C95B767849011B48Bbb0E6bBB9 >> base64 [
	^ ''.
	

]
