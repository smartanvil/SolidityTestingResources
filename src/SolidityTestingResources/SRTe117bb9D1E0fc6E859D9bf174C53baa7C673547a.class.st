Class {
	#name : #SRTe117bb9D1E0fc6E859D9bf174C53baa7C673547a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe117bb9D1E0fc6E859D9bf174C53baa7C673547a >> base64 [
	^ ''.
	

]
