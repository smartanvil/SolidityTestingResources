Class {
	#name : #SRTaa1363a48cee0fe067f9bf253d7ecf46790fe684,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa1363a48cee0fe067f9bf253d7ecf46790fe684 >> base64 [
	^ ''.
	

]
