Class {
	#name : #SRTad01fab133e6b9a3308a68931f768ec86e1ad281,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad01fab133e6b9a3308a68931f768ec86e1ad281 >> base64 [
	^ ''.
	

]
