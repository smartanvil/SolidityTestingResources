Class {
	#name : #SRT49516fe7bdc54b29a7f95ff55fdd38d9228e55af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT49516fe7bdc54b29a7f95ff55fdd38d9228e55af >> base64 [
	^ ''.
	

]
