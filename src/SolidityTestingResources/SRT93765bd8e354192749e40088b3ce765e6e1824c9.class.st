Class {
	#name : #SRT93765bd8e354192749e40088b3ce765e6e1824c9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT93765bd8e354192749e40088b3ce765e6e1824c9 >> base64 [
	^ ''.
	

]
