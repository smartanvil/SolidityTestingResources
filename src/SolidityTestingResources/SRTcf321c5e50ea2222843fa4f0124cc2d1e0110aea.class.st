Class {
	#name : #SRTcf321c5e50ea2222843fa4f0124cc2d1e0110aea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcf321c5e50ea2222843fa4f0124cc2d1e0110aea >> base64 [
	^ ''.
	

]
