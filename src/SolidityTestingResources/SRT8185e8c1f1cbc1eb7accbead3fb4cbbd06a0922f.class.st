Class {
	#name : #SRT8185e8c1f1cbc1eb7accbead3fb4cbbd06a0922f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8185e8c1f1cbc1eb7accbead3fb4cbbd06a0922f >> base64 [
	^ ''.
	

]
