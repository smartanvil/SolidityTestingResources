Class {
	#name : #SRT5beeC0Cf71d30ED317979917896C677f3701A1c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5beeC0Cf71d30ED317979917896C677f3701A1c6 >> base64 [
	^ ''.
	

]
