Class {
	#name : #SRTb16f44c0f4f5dd3e886e9ea6f8afe7274f4dfffc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb16f44c0f4f5dd3e886e9ea6f8afe7274f4dfffc >> base64 [
	^ ''.
	

]
