Class {
	#name : #SRT9B6337547026342d4C8922537cc23268D1d75284,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9B6337547026342d4C8922537cc23268D1d75284 >> base64 [
	^ ''.
	

]
