Class {
	#name : #SRTd0a6e6c54dbc68db5db3a091b171a77407ff7ccf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd0a6e6c54dbc68db5db3a091b171a77407ff7ccf >> base64 [
	^ ''.
	

]
