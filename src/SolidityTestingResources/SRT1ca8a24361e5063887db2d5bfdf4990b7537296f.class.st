Class {
	#name : #SRT1ca8a24361e5063887db2d5bfdf4990b7537296f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1ca8a24361e5063887db2d5bfdf4990b7537296f >> base64 [
	^ ''.
	

]
