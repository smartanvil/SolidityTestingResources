Class {
	#name : #SRT71f1bc89f38b241f3ebf0d5a013fa2850c63a1d4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT71f1bc89f38b241f3ebf0d5a013fa2850c63a1d4 >> base64 [
	^ ''.
	

]
