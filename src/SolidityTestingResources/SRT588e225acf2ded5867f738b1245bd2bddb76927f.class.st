Class {
	#name : #SRT588e225acf2ded5867f738b1245bd2bddb76927f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT588e225acf2ded5867f738b1245bd2bddb76927f >> base64 [
	^ 'Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBEZXZlbG9wZXIgTmVjaGVzb3YgQW5kcmV5OiBGYWNlYm9vay5jb20vTmVjaGVzb3YgICAKLy8gRW5qb3kuIChjKSBQUkNSLm9yZyBJQ08gQnVzaW5lc3MgUGxhdGZvcm0gMjAxNy4gVGhlIFBSQ1IgTGljZW5jZS4KLy8gRXRoIGFkZHJlc3M6IDB4Nzg4QzQ1RGQ2MGFFNGRCRTUwNTViNUFjMDIzODRENWRjODQ2NzdiMAovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7ICAgIAoKLyoqCiogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwoqLwoKbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KfQoKICBjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICAgIC8vIEdldCB0aGUgdG90YWwgdG9rZW4gc3VwcGx5CiAgICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7CiAgIAogICAgICAvLyBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBvZiBhbm90aGVyIGFjY291bnQgd2l0aCBhZGRyZXNzIF9vd25lcgogICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgIAogICAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgX3RvCiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgCiAgICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgIAogICAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4KICAgICAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eQogICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAKICAgICAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgIAogICAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgogICAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgCiAgICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogIH0gIAogICAKICBjb250cmFjdCBCcXRfVG9rZW4gaXMgRVJDMjBJbnRlcmZhY2UgewoKICAgICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiQlFUIjsKICAgICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkJRVCB0b2tlbiI7CiAgICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAKICAgICAgICAgICAKICAgICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbWF4VG9rZW5zID0gMjAwKjEwKio2KjEwKioxODsgCiAgICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG93bmVyU3VwcGx5ID0gbWF4VG9rZW5zKjUxLzEwMDsKICAgICAgdWludDI1NiBfdG90YWxTdXBwbHkgPSBvd25lclN1cHBseTsgIAoKICAgICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5fcHJpY2UgPSAxMCoqMTgqMS8yNTA7IAogICAgICB1aW50MjU2IHB1YmxpYyBwcmVfaWNvX3N0YXJ0ID0gMTUwNjcyOTYwMDsKICAgICAgdWludDI1NiBwdWJsaWMgaWNvX3N0YXJ0ID0gMTUxMjY5MTIwMDsKICAgICAgdWludDI1NiBwdWJsaWMgaWNvX2ZpbmlzaCA9IDE1MTgxMzQ0MDA7IAogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtaW5WYWx1ZVByZSA9IDEwKioxOCoxLzEwMDAwMDA7IAogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtaW5WYWx1ZSA9IDEwKioxOCoxLzEwMDAwMDA7IAogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtYXhWYWx1ZSA9IDMwMDAqMTAqKjE4OwoKICAgICAgdWludDggcHVibGljIGNvbnN0YW50IGV4Y2hhbmdlX2NvZWZmaWNpZW50ID0gMTAyOwoKICAgICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICAgIAogICAgICAvLyBPd25lciBvZiB0aGlzIGNvbnRyYWN0CiAgICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAKICAgICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgIAogICAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgICAgLy8gT3JkZXJzIGhvbGRlcnMgd2hvIHdpc2ggc2VsbCB0b2tlbnMsIHNhdmUgYW1vdW50CiAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgb3JkZXJzX3NlbGxfYW1vdW50OwoKICAgICAgLy8gT3JkZXJzIGhvbGRlcnMgd2hvIHdpc2ggc2VsbCB0b2tlbnMsIHNhdmUgcHJpY2UKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBvcmRlcnNfc2VsbF9wcmljZTsKCiAgICAgIC8vb3JkZXJzIGxpc3QKICAgICAgYWRkcmVzc1tdIHB1YmxpYyBvcmRlcnNfc2VsbF9saXN0OwoKICAgICAgLy8gVHJpZ2dlcmVkIG9uIHNldCBTRUxMIG9yZGVyCiAgICAgIGV2ZW50IE9yZGVyX3NlbGwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludDI1NiBfbWF4X2Ftb3VudCwgdWludDI1NiBfcHJpY2UpOyAgICAgIAoKICAgICAgLy8gVHJpZ2dlcmVkIG9uIGV4ZWN1dGUgU0VMTCBvcmRlcgogICAgICBldmVudCBPcmRlcl9leGVjdXRlKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9wcmljZSk7ICAgICAgCiAgIAogICAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgogICAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgfQogICAgICAgICAgXzsKICAgICAgfSAgICAgIAogICAKICAgICAgLy8gQ29uc3RydWN0b3IKICAgICAgZnVuY3Rpb24gQnF0X1Rva2VuKCkgewogICAgICAgICAgLy9vd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgICBvd25lciA9IDB4MmVlZTY1MzRiZmE1NTEyZGVkN2Y3MDBkOGQyNmU4OGMxNjg4Yzg1NDsKICAgICAgICAgIGJhbGFuY2VzW293bmVyXSA9IG93bmVyU3VwcGx5OwogICAgICB9CiAgICAgIAogICAgICAvL2RlZmF1bHQgZnVuY3Rpb24gICAgICAKICAgICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsgICAgICAgIAogICAgICAgICAgdG9rZW5zX2J1eSgpOyAgICAgICAgCiAgICAgIH0KICAgICAgCiAgICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgIH0KCiAgICAgIC8vV2l0aGRyYXcgbW9uZXkgZnJvbSBjb250cmFjdCBiYWxhbmNlIHRvIG93bmVyCiAgICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgcmVzdWx0KSB7CiAgICAgICAgICB1aW50MjU2IGJhbGFuY2U7CiAgICAgICAgICBiYWxhbmNlID0gdGhpcy5iYWxhbmNlOwogICAgICAgICAgaWYoX2Ftb3VudCA+IDApIGJhbGFuY2UgPSBfYW1vdW50OwogICAgICAgICAgb3duZXIuc2VuZChiYWxhbmNlKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICAvL0NoYW5nZSBpY29fc3RhcnQgZGF0ZQogICAgICBmdW5jdGlvbiBjaGFuZ2VfaWNvX3N0YXJ0KHVpbnQyNTYgX2ljb19zdGFydCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgcmVzdWx0KSB7CiAgICAgICAgICBpY29fc3RhcnQgPSBfaWNvX3N0YXJ0OwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIC8vQ2hhbmdlIGljb19maW5pc2ggZGF0ZQogICAgICBmdW5jdGlvbiBjaGFuZ2VfaWNvX2ZpbmlzaCh1aW50MjU2IF9pY29fZmluaXNoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCByZXN1bHQpIHsKICAgICAgICAgIGljb19maW5pc2ggPSBfaWNvX2ZpbmlzaDsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgIAogICAgICAvLyBUb3RhbCB0b2tlbnMgb24gdXNlciBhZGRyZXNzCiAgICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgICAgfQogICAKICAgICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgeyAgICAgICAgICAKCiAgICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAKICAgICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgfQogICAKICAgICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgICAgLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgICAvLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQogICAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7ICAgICAgICAgCgogICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKICAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQKICAgICAgICAgICAgICYmIF9hbW91bnQgPiAwCiAgICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50OwogICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgIH0KICAgICB9CiAgCiAgICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4KICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICB9CiAgICAKICAgICAvL1JldHVybiBwYXJhbSwgaG93IG1hbnkgdG9rZW5zIGNhbiBzZW5kIF9zcGVuZGVyIGZyb20gX293bmVyIGFjY291bnQgIAogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICAgfSAKCiAgICAgIC8qKgogICAgICAqIEJ1eSB0b2tlbnMgb24gcHJlLWljbyBhbmQgaWNvIHdpdGggYm9udXNlcyBvbiB0aW1lIGJvdW5kYXJpZXMKICAgICAgKi8KICAgICAgZnVuY3Rpb24gdG9rZW5zX2J1eSgpIHBheWFibGUgcmV0dXJucyAoYm9vbCkgeyAKCiAgICAgICAgdWludDI1NiB0bm93ID0gbm93OwogICAgICAgIAogICAgICAgIC8vaWYodG5vdyA8IHByZV9pY29fc3RhcnQpIHRocm93OwogICAgICAgIGlmKHRub3cgPiBpY29fZmluaXNoKSB0aHJvdzsKICAgICAgICBpZihfdG90YWxTdXBwbHkgPj0gbWF4VG9rZW5zKSB0aHJvdzsKICAgICAgICBpZighKG1zZy52YWx1ZSA+PSB0b2tlbl9wcmljZSkpIHRocm93OwogICAgICAgIGlmKCEobXNnLnZhbHVlID49IG1pblZhbHVlKSkgdGhyb3c7CiAgICAgICAgaWYobXNnLnZhbHVlID4gbWF4VmFsdWUpIHRocm93OwoKICAgICAgICB1aW50IHRva2Vuc19idXkgPSAobXNnLnZhbHVlKjEwKioxOCkuZGl2KHRva2VuX3ByaWNlKTsKICAgICAgICB1aW50IHRva2Vuc19idXlfdG90YWw7CgogICAgICAgIGlmKCEodG9rZW5zX2J1eSA+IDApKSB0aHJvdzsgICAKICAgICAgICAKICAgICAgICAvL0JvbnVzIGZvciB0b3RhbCB0b2tlbnMgYW1vdW50IGZvciBhbGwgY29udHJhY3QKICAgICAgICB1aW50IGIxID0gMDsKICAgICAgICAvL1RpbWUgYm9udXMgb24gUHJlLUlDTyAmJiBJQ08KICAgICAgICB1aW50IGIyID0gMDsKICAgICAgICAvL0luZGl2aWR1YWwgYm9udXMgZm9yIHRva2VucyBhbW91bnQKICAgICAgICB1aW50IGIzID0gMDsKCiAgICAgICAgaWYoX3RvdGFsU3VwcGx5IDw9IDUqMTAqKjYqMTAqKjE4KSB7CiAgICAgICAgICBiMSA9IHRva2Vuc19idXkqMzAvMTAwOwogICAgICAgIH0KICAgICAgICBpZigoNSoxMCoqNioxMCoqMTggPCBfdG90YWxTdXBwbHkpJiYoX3RvdGFsU3VwcGx5IDw9IDEwKjEwKio2KjEwKioxOCkpIHsKICAgICAgICAgIGIxID0gdG9rZW5zX2J1eSoyNS8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKCgxMCoxMCoqNioxMCoqMTggPCBfdG90YWxTdXBwbHkpJiYoX3RvdGFsU3VwcGx5IDw9IDE1KjEwKio2KjEwKioxOCkpIHsKICAgICAgICAgIGIxID0gdG9rZW5zX2J1eSoyMC8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKCgxNSoxMCoqNioxMCoqMTggPCBfdG90YWxTdXBwbHkpJiYoX3RvdGFsU3VwcGx5IDw9IDIwKjEwKio2KjEwKioxOCkpIHsKICAgICAgICAgIGIxID0gdG9rZW5zX2J1eSoxNS8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKCgyMCoxMCoqNioxMCoqMTggPCBfdG90YWxTdXBwbHkpJiYoX3RvdGFsU3VwcGx5IDw9IDI1KjEwKio2KjEwKioxOCkpIHsKICAgICAgICAgIGIxID0gdG9rZW5zX2J1eSoxMC8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKDI1KjEwKio2KjEwKioxOCA8PSBfdG90YWxTdXBwbHkpIHsKICAgICAgICAgIGIxID0gdG9rZW5zX2J1eSo1LzEwMDsKICAgICAgICB9ICAgICAgICAKCiAgICAgICAgaWYodG5vdyA8IGljb19zdGFydCkgewogICAgICAgICAgYjIgPSB0b2tlbnNfYnV5KjUwLzEwMDsKICAgICAgICB9CiAgICAgICAgaWYoKGljb19zdGFydCArIDg2NDAwKjAgPD0gdG5vdykmJih0bm93IDwgaWNvX3N0YXJ0ICsgODY0MDAqNSkpewogICAgICAgICAgYjIgPSB0b2tlbnNfYnV5KjEwLzEwMDsKICAgICAgICB9IAogICAgICAgIGlmKChpY29fc3RhcnQgKyA4NjQwMCo1IDw9IHRub3cpJiYodG5vdyA8IGljb19zdGFydCArIDg2NDAwKjEwKSl7CiAgICAgICAgICBiMiA9IHRva2Vuc19idXkqOC8xMDA7ICAgICAgICAKICAgICAgICB9IAogICAgICAgIGlmKChpY29fc3RhcnQgKyA4NjQwMCoxMCA8PSB0bm93KSYmKHRub3cgPCBpY29fc3RhcnQgKyA4NjQwMCoyMCkpewogICAgICAgICAgYjIgPSB0b2tlbnNfYnV5KjYvMTAwOyAgICAgICAgCiAgICAgICAgfSAKICAgICAgICBpZigoaWNvX3N0YXJ0ICsgODY0MDAqMjAgPD0gdG5vdykmJih0bm93IDwgaWNvX3N0YXJ0ICsgODY0MDAqMzApKXsKICAgICAgICAgIGIyID0gdG9rZW5zX2J1eSo0LzEwMDsgICAgICAgIAogICAgICAgIH0gCiAgICAgICAgaWYoaWNvX3N0YXJ0ICsgODY0MDAqMzAgPD0gdG5vdyl7CiAgICAgICAgICBiMiA9IHRva2Vuc19idXkqMi8xMDA7ICAgICAgICAKICAgICAgICB9CiAgICAgICAgCgogICAgICAgIGlmKCgxMDAwKjEwKioxOCA8PSB0b2tlbnNfYnV5KSYmKDUwMDAqMTAqKjE4IDw9IHRva2Vuc19idXkpKSB7CiAgICAgICAgICBiMyA9IHRva2Vuc19idXkqNS8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKCg1MDAxKjEwKioxOCA8PSB0b2tlbnNfYnV5KSYmKDEwMDAwKjEwKioxOCA8IHRva2Vuc19idXkpKSB7CiAgICAgICAgICBiMyA9IHRva2Vuc19idXkqMTAvMTAwOwogICAgICAgIH0KICAgICAgICBpZigoMTAwMDEqMTAqKjE4IDw9IHRva2Vuc19idXkpJiYoMTUwMDAqMTAqKjE4IDwgdG9rZW5zX2J1eSkpIHsKICAgICAgICAgIGIzID0gdG9rZW5zX2J1eSoxNS8xMDA7CiAgICAgICAgfQogICAgICAgIGlmKCgxNTAwMSoxMCoqMTggPD0gdG9rZW5zX2J1eSkmJigyMDAwMCoxMCoqMTggPCB0b2tlbnNfYnV5KSkgewogICAgICAgICAgYjMgPSB0b2tlbnNfYnV5KjIwLzEwMDsKICAgICAgICB9CiAgICAgICAgaWYoMjAwMDEqMTAqKjE4IDw9IHRva2Vuc19idXkpIHsKICAgICAgICAgIGIzID0gdG9rZW5zX2J1eSoyNS8xMDA7CiAgICAgICAgfQoKICAgICAgICB0b2tlbnNfYnV5X3RvdGFsID0gdG9rZW5zX2J1eS5hZGQoYjEpOwogICAgICAgIHRva2Vuc19idXlfdG90YWwgPSB0b2tlbnNfYnV5X3RvdGFsLmFkZChiMik7CiAgICAgICAgdG9rZW5zX2J1eV90b3RhbCA9IHRva2Vuc19idXlfdG90YWwuYWRkKGIzKTsgICAgICAgIAoKICAgICAgICBpZihfdG90YWxTdXBwbHkuYWRkKHRva2Vuc19idXlfdG90YWwpID4gbWF4VG9rZW5zKSB0aHJvdzsKICAgICAgICBfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHkuYWRkKHRva2Vuc19idXlfdG90YWwpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHRva2Vuc19idXlfdG90YWwpOyAgICAgICAgIAoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICAKICAgICAgLyoqCiAgICAgICogR2V0IHRvdGFsIFNFTEwgb3JkZXJzCiAgICAgICovICAgICAgCiAgICAgIGZ1bmN0aW9uIG9yZGVyc19zZWxsX3RvdGFsICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gb3JkZXJzX3NlbGxfbGlzdC5sZW5ndGg7CiAgICAgIH0gCgogICAgICAvKioKICAgICAgKiBHZXQgaG93IG1hbnkgdG9rZW5zIGNhbiBidXkgZnJvbSB0aGlzIFNFTEwgb3JkZXIKICAgICAgKi8KICAgICAgZnVuY3Rpb24gZ2V0X29yZGVyc19zZWxsX2Ftb3VudChhZGRyZXNzIF9mcm9tKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKCiAgICAgICAgdWludCBfYW1vdW50X21heCA9IDA7CgogICAgICAgIGlmKCEob3JkZXJzX3NlbGxfYW1vdW50W19mcm9tXSA+IDApKSByZXR1cm4gX2Ftb3VudF9tYXg7CgogICAgICAgIGlmKGJhbGFuY2VPZihfZnJvbSkgPiAwKSBfYW1vdW50X21heCA9IGJhbGFuY2VPZihfZnJvbSk7CiAgICAgICAgaWYob3JkZXJzX3NlbGxfYW1vdW50W19mcm9tXSA8IF9hbW91bnRfbWF4KSBfYW1vdW50X21heCA9IG9yZGVyc19zZWxsX2Ftb3VudFtfZnJvbV07CgogICAgICAgIHJldHVybiBfYW1vdW50X21heDsKICAgICAgfQoKICAgICAgLyoqCiAgICAgICogVXNlciBjcmVhdGUgU0VMTCBvcmRlci4gIAogICAgICAqLwogICAgICBmdW5jdGlvbiBvcmRlcl9zZWxsKHVpbnQyNTYgX21heF9hbW91bnQsIHVpbnQyNTYgX3ByaWNlKSByZXR1cm5zIChib29sKSB7CgogICAgICAgIGlmKCEoX21heF9hbW91bnQgPiAwKSkgdGhyb3c7CiAgICAgICAgaWYoIShfcHJpY2UgPiAwKSkgdGhyb3c7ICAgICAgICAKCiAgICAgICAgb3JkZXJzX3NlbGxfYW1vdW50W21zZy5zZW5kZXJdID0gX21heF9hbW91bnQ7CiAgICAgICAgb3JkZXJzX3NlbGxfcHJpY2VbbXNnLnNlbmRlcl0gPSAoX3ByaWNlKmV4Y2hhbmdlX2NvZWZmaWNpZW50KS5kaXYoMTAwKTsKICAgICAgICBvcmRlcnNfc2VsbF9saXN0LnB1c2gobXNnLnNlbmRlcik7ICAgICAgICAKCiAgICAgICAgT3JkZXJfc2VsbChtc2cuc2VuZGVyLCBfbWF4X2Ftb3VudCwgb3JkZXJzX3NlbGxfcHJpY2VbbXNnLnNlbmRlcl0pOyAgICAgIAoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgLyoqCiAgICAgICogT3JkZXIgQnV5IHRva2VucyAtIGl0J3Mgb3JkZXIgc2VhcmNoIHNlbGwgb3JkZXIgZnJvbSB1c2VyIF9mcm9tIGFuZCBpZiBhbGwgb2ssIHNlbmQgdG9rZW4gYW5kIG1vbmV5IAogICAgICAqLwogICAgICBmdW5jdGlvbiBvcmRlcl9idXkoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfbWF4X3ByaWNlKSBwYXlhYmxlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAKICAgICAgICBpZighKG1zZy52YWx1ZSA+IDApKSB0aHJvdzsKICAgICAgICBpZighKF9tYXhfcHJpY2UgPiAwKSkgdGhyb3c7ICAgICAgICAKICAgICAgICBpZighKG9yZGVyc19zZWxsX2Ftb3VudFtfZnJvbV0gPiAwKSkgdGhyb3c7CiAgICAgICAgaWYoIShvcmRlcnNfc2VsbF9wcmljZVtfZnJvbV0gPiAwKSkgdGhyb3c7IAogICAgICAgIGlmKG9yZGVyc19zZWxsX3ByaWNlW19mcm9tXSA+IF9tYXhfcHJpY2UpIHRocm93OwoKICAgICAgICB1aW50IF9hbW91bnQgPSAobXNnLnZhbHVlKjEwKioxOCkuZGl2KG9yZGVyc19zZWxsX3ByaWNlW19mcm9tXSk7CiAgICAgICAgdWludCBfYW1vdW50X2Zyb20gPSBnZXRfb3JkZXJzX3NlbGxfYW1vdW50KF9mcm9tKTsKCiAgICAgICAgaWYoX2Ftb3VudCA+IF9hbW91bnRfZnJvbSkgX2Ftb3VudCA9IF9hbW91bnRfZnJvbTsgICAgICAgIAogICAgICAgIGlmKCEoX2Ftb3VudCA+IDApKSB0aHJvdzsgICAgICAgIAoKICAgICAgICB1aW50IF90b3RhbF9tb25leSA9IChvcmRlcnNfc2VsbF9wcmljZVtfZnJvbV0qX2Ftb3VudCkuZGl2KDEwKioxOCk7CiAgICAgICAgaWYoX3RvdGFsX21vbmV5ID4gbXNnLnZhbHVlKSB0aHJvdzsKCiAgICAgICAgdWludCBfc2VsbGVyX21vbmV5ID0gKF90b3RhbF9tb25leSoxMDApLmRpdihleGNoYW5nZV9jb2VmZmljaWVudCk7CiAgICAgICAgdWludCBfYnV5ZXJfbW9uZXkgPSBtc2cudmFsdWUgLSBfdG90YWxfbW9uZXk7CgogICAgICAgIGlmKF9zZWxsZXJfbW9uZXkgPiBtc2cudmFsdWUpIHRocm93OwogICAgICAgIGlmKF9zZWxsZXJfbW9uZXkgKyBfYnV5ZXJfbW9uZXkgPiBtc2cudmFsdWUpIHRocm93OwoKICAgICAgICBpZihfc2VsbGVyX21vbmV5ID4gMCkgX2Zyb20uc2VuZChfc2VsbGVyX21vbmV5KTsKICAgICAgICBpZihfYnV5ZXJfbW9uZXkgPiAwKSBtc2cuc2VuZGVyLnNlbmQoX2J1eWVyX21vbmV5KTsKCiAgICAgICAgb3JkZXJzX3NlbGxfYW1vdW50W19mcm9tXSAtPSBfYW1vdW50OyAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gX2Ftb3VudDsgCgogICAgICAgIE9yZGVyX2V4ZWN1dGUoX2Zyb20sIG1zZy5zZW5kZXIsIF9hbW91bnQsIG9yZGVyc19zZWxsX3ByaWNlW19mcm9tXSk7CgogICAgICB9CiAgICAgIAogfQ=='.
	

]
