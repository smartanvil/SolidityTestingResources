Class {
	#name : #SRTb33812b316e0c454039a3b48d09dfe97d11683cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb33812b316e0c454039a3b48d09dfe97d11683cc >> base64 [
	^ ''.
	

]
