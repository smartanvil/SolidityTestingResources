Class {
	#name : #SRT959529102cfde07b1196bd27adedc196d75f84f6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT959529102cfde07b1196bd27adedc196d75f84f6 >> base64 [
	^ ''.
	

]
