Class {
	#name : #SRTc03b0dbd201ee426d907e367f996706cf53b8028,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc03b0dbd201ee426d907e367f996706cf53b8028 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vCi8vIFdlbGNvbWUgdG8gdGhlIG5leHQgbGV2ZWwgb2YgRXRoZXJldW0gZ2FtZXM6IEFyZSB5b3Ugd2Vhay1oYW5kZWQsICBvciBhIGJyYXZlIEhPRExlcj8KLy8gSWYgeW91IHB1dCBldGhlciBpbnRvIHRoaXMgY29udHJhY3QsIHlvdSBhcmUgYWxtb3N0ICBndWFyYW50ZWVkIHRvIGdldCBiYWNrIG1vcmUgdGhhbgovLyB5b3UgcHV0IGluIHRoZSBmaXJzdCBwbGFjZS4gT2YgY291cnNlIGlmIHlvdSBIT0RMIHRvbyBsb25nLCB0aGUgcHJpY2UgcG9vbCBtaWdodCBiZSBnb25lCi8vIGJlZm9yZSB5b3UgY2xhaW0gdGhlIHJld2FyZCwgYnV0IHRoYXQncyBwYXJ0IG9mIHRoZSBnYW1lIQovLwovLyBUaGUgY29udHJhY3QgZGVwbG95ZXIgaXMgbm90IGFsbG93ZWQgdG8gZG8gYW55dGhpbmcgb25jZSB0aGUgZ2FtZSBpcyBzdGFydGVkLgovLyAob25seSBraWxsIHRoZSBjb250cmFjdCBhZnRlciB0aGVyZSB3YXMgbm8gYWN0aXZpdHkgZm9yIGEgd2VlaykKLy8gCi8vIFNlZSBnZXRfcGFyYW1ldGVycygpIGZvciBwcmljaW5nIGFuZCByZXdhcmRzLgovLwoKY29udHJhY3QgSE9ETGVyUGFyYWRpc2V7CiAgICBzdHJ1Y3QgVXNlcnsKICAgICAgICBhZGRyZXNzIGhvZGxlcjsKICAgICAgICBieXRlczMyIHBhc3Njb2RlOwogICAgICAgIHVpbnQgaG9kbGluZ19zaW5jZTsKICAgIH0KICAgIFVzZXJbXSB1c2VyczsKICAgIG1hcHBpbmcgKHN0cmluZyA9PiB1aW50KSBwYXJhbWV0ZXJzOwogICAgCiAgICBmdW5jdGlvbiBIT0RMZXJQYXJhZGlzZSgpIHB1YmxpY3sKICAgICAgICBwYXJhbWV0ZXJzWyJvd25lciJdID0gdWludChtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0X3BhcmFtZXRlcnMoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucygKICAgICAgICAgICAgdWludCBwcmljZSwKICAgICAgICAgICAgdWludCBwcmljZV9wb29sLAogICAgICAgICAgICB1aW50IGJhc2VfcmV3YXJkLAogICAgICAgICAgICB1aW50IGRhaWx5X3Jld2FyZCwKICAgICAgICAgICAgdWludCBtYXhfcmV3YXJkCiAgICAgICAgKXsKICAgICAgICBwcmljZSA9IHBhcmFtZXRlcnNbJ3ByaWNlJ107CiAgICAgICAgcHJpY2VfcG9vbCA9IHBhcmFtZXRlcnNbJ3ByaWNlX3Bvb2wnXTsKICAgICAgICBiYXNlX3Jld2FyZCA9IHBhcmFtZXRlcnNbJ2Jhc2VfcmV3YXJkJ107CiAgICAgICAgZGFpbHlfcmV3YXJkID0gcGFyYW1ldGVyc1snZGFpbHlfcmV3YXJkJ107CiAgICAgICAgbWF4X3Jld2FyZCA9IHBhcmFtZXRlcnNbJ21heF9yZXdhcmQnXTsKICAgIH0KICAgIAogICAgLy8gUmVnaXN0ZXIgYXMgYSBIT0RMZXIuCiAgICAvLyBQYXNzY29kZSBjYW4gYmUgeW91ciBwYXNzd29yZCwgb3IgdGhlIGhhc2ggb2YgeW91ciBwYXNzd29yZCwgeW91ciBjaG9pY2UKICAgIC8vIElmIGl0J3Mgbm90IGhhc2hlZCwgbWF4IHBhc3N3b3JkIGxlbiBpcyAxNiBjaGFyYWN0ZXJzLgogICAgZnVuY3Rpb24gcmVnaXN0ZXIoYnl0ZXMzMiBwYXNzY29kZSkgcHVibGljIHBheWFibGUgcmV0dXJucyh1aW50IHVpZCkKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBwYXJhbWV0ZXJzWyJwcmljZSJdKTsKICAgICAgICByZXF1aXJlKHBhc3Njb2RlICE9ICIiKTsKCiAgICAgICAgdXNlcnMucHVzaChVc2VyKG1zZy5zZW5kZXIsIHBhc3Njb2RlLCBub3cpKTsKICAgICAgICAKICAgICAgICAvLyBsZWF2ZSBzb21lIGZvciB0aGUgZGVwbG95ZXIKICAgICAgICBwYXJhbWV0ZXJzWyJwcmljZV9wb29sIl0gKz0gbXNnLnZhbHVlICogOTkgLyAxMDA7CiAgICAgICAgcGFyYW1ldGVyc1sibGFzdF9ob2RsZXIiXSA9IG5vdzsKICAgICAgICAKICAgICAgICB1aWQgPSB1c2Vycy5sZW5ndGggLSAxOwogICAgfQogICAgCiAgICAvLyBPUFRJT05BTDogVXNlIHRoaXMgdG8gc2VjdXJlbHkgaGFzaCB5b3VyIHBhc3N3b3JkIGJlZm9yZSByZWdpc3RlcmluZwogICAgZnVuY3Rpb24gaGFzaF9wYXNzY29kZShieXRlczMyIHBhc3Njb2RlKSBwdWJsaWMgcHVyZSByZXR1cm5zKGJ5dGVzMzIgaGFzaCl7CiAgICAgICAgaGFzaCA9IGtlY2NhazI1NihwYXNzY29kZSk7CiAgICB9CiAgICAKICAgIC8vIEhvdyBtdWNoIHdvdWxkIHlvdSBnZXQgaWYgeW91IGNsYWltZWQgcmlnaHQgbm93CiAgICBmdW5jdGlvbiBnZXRfcmV3YXJkKHVpbnQgdWlkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50IHJld2FyZCl7CiAgICAgICAgcmVxdWlyZSh1aWQgPCB1c2Vycy5sZW5ndGgpOwogICAgICAgIHJld2FyZCA9IHBhcmFtZXRlcnNbImJhc2VfcmV3YXJkIl0gKyBwYXJhbWV0ZXJzWyJkYWlseV9yZXdhcmQiXSAqIChub3cgLSB1c2Vyc1t1aWRdLmhvZGxpbmdfc2luY2UpIC8gMSBkYXlzOwogICAgICAgICAgICByZXdhcmQgPSBwYXJhbWV0ZXJzWyJtYXhfcmV3YXJkIl07CiAgICB9CiAgICAKICAgIC8vIElzIHlvdXIgcGFzc3dvcmQgc3RpbGwgd29ya2luZz8KICAgIGZ1bmN0aW9uIGlzX3Bhc3Njb2RlX2NvcnJlY3QodWludCB1aWQsIGJ5dGVzMzIgcGFzc2NvZGUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wgcGFzc2NvZGVfY29ycmVjdCl7CiAgICAgICAgcmVxdWlyZSh1aWQgPCB1c2Vycy5sZW5ndGgpOwogICAgICAgIGJ5dGVzMzIgcGFzc2NvZGVfYWN0dWFsbHkgPSB1c2Vyc1t1aWRdLnBhc3Njb2RlOwogICAgICAgIGlmIChwYXNzY29kZV9hY3R1YWxseSAmIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYgPT0gMCl7CiAgICAgICAgICAgIC8vIGJvdHRvbSAxNiBieXRlcyA9PSAwOiBzdG9yZWQgcGFzc3dvcmQgd2FzICBub3QgaGFzaGVkCiAgICAgICAgICAgIC8vIChlLmcuIGl0IGxvb2tzIGxpa2UgdGhpczogIjB4NzI2NTY3Njk3Mzc0NjU3MjMxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIgKQogICAgICAgICAgICByZXR1cm4gcGFzc2NvZGUgPT0gcGFzc2NvZGVfYWN0dWFsbHk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIC8vIHN0b3JlZCBwYXNzd29yZCBpcyBoYXNoZWQKICAgICAgICAgICAgcmV0dXJuIGtlY2NhazI1NihwYXNzY29kZSkgPT0gcGFzc2NvZGVfYWN0dWFsbHk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEdldCB0aGUgcHJpY2Ugb2YgeW91ciBnbG9yaW91cyBIT0RMaW5nIQogICAgZnVuY3Rpb24gY2xhaW1fcmV3YXJkKHVpbnQgdWlkLCBieXRlczMyIHBhc3Njb2RlKSBwdWJsaWMgcGF5YWJsZQogICAgewogICAgICAgIC8vIGEgZ29vZCBIT0RMZXIgYWx3YXlzIEhPRExzIHNvbWUgbW9yZSBldGhlcgogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHBhcmFtZXRlcnNbInByaWNlIl0pOwogICAgICAgIHJlcXVpcmUoaXNfcGFzc2NvZGVfY29ycmVjdCh1aWQsIHBhc3Njb2RlKSk7CiAgICAgICAgCiAgICAgICAgdWludCBmaW5hbF9yZXdhcmQgPSBnZXRfcmV3YXJkKHVpZCkgKyBtc2cudmFsdWU7CiAgICAgICAgaWYgKGZpbmFsX3Jld2FyZCA+IHBhcmFtZXRlcnNbInByaWNlX3Bvzr9sIl0pCiAgICAgICAgICAgIGZpbmFsX3Jld2FyZCA9IHBhcmFtZXRlcnNbInByaWNlX3Bvzr9sIl07CgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlci5jYWxsLnZhbHVlKGZpbmFsX3Jld2FyZCkoKSk7CgogICAgICAgIHBhcmFtZXRlcnNbInByaWNlX3Bvzr9sIl0gLT0gZmluYWxfcmV3YXJkOwogICAgICAgIC8vIERlbGV0ZSB0aGUgdXNlcjogY29weSBsYXN0IHVzZXIgdG8gdG8tYmUtZGVsZXRlZCB1c2VyIGFuZCBzaG9ydGVuIHRoZSBhcnJheQogICAgICAgIGlmICh1aWQgKyAxIDwgdXNlcnMubGVuZ3RoKQogICAgICAgICAgICB1c2Vyc1t1aWRdID0gdXNlcnNbdXNlcnMubGVuZ3RoIC0gMV07CiAgICAgICAgdXNlcnMubGVuZ3RoIC09IDE7CiAgICB9CiAgICAKICAgIC8vIFJlZnVuZCB0aGUgZWFybHkgSE9ETGVycywgYW5kIGxlYXZlIHRoZSByZXN0IHRvIHRoZSBjb250cmFjdCBkZXBsb3llcgogICAgZnVuY3Rpb24gcmVmdW5kX2FuZF9kaWUoKSBwdWJsaWN7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJlc3MocGFyYW1ldGVyc1snb3duZXInXSkpOwogICAgICAgIHJlcXVpcmUocGFyYW1ldGVyc1sibGFzdF9ozr9kbGVyIl0gKyA3IGRheXMgPCBub3cpOwogICAgICAgIAogICAgICAgIHVpbnQgcHJpY2VfcG9vbF9yZW1haW5pbmcgPSBwYXJhbWV0ZXJzWyJwcmljZV9wzr/Ov2wiXTsKICAgICAgICBmb3IodWludCBpPTA7IGk8dXNlcnMubGVuZ3RoICYmIHByaWNlX3Bvb2xfcmVtYWluaW5nID4gMDsgKytpKXsKICAgICAgICAgICAgdWludCByZXdhcmQgPSBnZXRfcmV3YXJkKGkpOwogICAgICAgICAgICBpZiAocmV3YXJkID4gcHJpY2VfcG9vbF9yZW1haW5pbmcpCiAgICAgICAgICAgICAgICByZXdhcmQgPSBwcmljZV9wb29sX3JlbWFpbmluZzsKICAgICAgICAgICAgaWYgKHVzZXJzW2ldLmhvZGxlci5zZW5kKHJld2FyZCkpCiAgICAgICAgICAgICAgICBwcmljZV9wb29sX3JlbWFpbmluZyAtPSByZXdhcmQ7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hlY2tfcGFyYW1ldGVyc19zYW5pdHkoKSBpbnRlcm5hbCB2aWV3ewogICAgICAgIHJlcXVpcmUocGFyYW1ldGVyc1sncHJpY2UnXSA8PSAxIGV0aGVyKTsKICAgICAgICByZXF1aXJlKHBhcmFtZXRlcnNbJ2Jhc2VfcmV3YXJkJ10gPj0gcGFyYW1ldGVyc1sncHJpY2UnXSAvIDIpOwogICAgICAgIHJlcXVpcmUocGFyYW1ldGVyc1siZGFpbHlfcmV3YXJkIl0gPj0gcGFyYW1ldGVyc1snYmFzZV9yZXdhcmQnXSAvIDIpOwogICAgICAgIHJlcXVpcmUocGFyYW1ldGVyc1snbWF4X3Jld2FyZCddID49IHBhcmFtZXRlcnNbJ3ByaWNlJ10pOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRfcGFyYW1ldGVyKHN0cmluZyBuYW1lLCB1aW50IHZhbHVlKSBwdWJsaWN7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJlc3MocGFyYW1ldGVyc1snb3duZXInXSkpOwogICAgICAgIAogICAgICAgIC8vIG5vdCBldmVuIG93bmVyIGNhbiB0b3VjaCB0aGVzZSwgdGhhdCB3b3VsZCBiZSB1bmZhaXIhCiAgICAgICAgcmVxdWlyZShrZWNjYWsyNTYobmFtZSkgIT0ga2VjY2FrMjU2KCJsYXN0X2hvZGxlciIpKTsKICAgICAgICByZXF1aXJlKGtlY2NhazI1NihuYW1lKSAhPSBrZWNjYWsyNTYoInByaWNlX3Bvb2wiKSk7CgogICAgICAgIHBhcmFtZXRlcnNbbmFtZV0gPSB2YWx1ZTsKICAgICAgICAKICAgICAgICBjaGVja19wYXJhbWV0ZXJzX3Nhbml0eSgpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcGFyYW1ldGVyc1sicHJpY2VfcG9vbCJdICs9IG1zZy52YWx1ZTsKICAgIH0KfQ=='.
	

]
