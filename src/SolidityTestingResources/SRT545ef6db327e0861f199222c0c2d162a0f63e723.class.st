Class {
	#name : #SRT545ef6db327e0861f199222c0c2d162a0f63e723,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT545ef6db327e0861f199222c0c2d162a0f63e723 >> base64 [
	^ ''.
	

]
