Class {
	#name : #SRTb67b88a25708a35ae7c2d736d398d268ce4f7f83,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb67b88a25708a35ae7c2d736d398d268ce4f7f83 >> base64 [
	^ ''.
	

]
