Class {
	#name : #SRT82f6feb8feebb573cb66c59cac46fcd5ffd891f6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82f6feb8feebb573cb66c59cac46fcd5ffd891f6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKioKKiBAdGl0bGUgQmFpa2FsIE1haW5pbmcgQ29udHJhY3QKKiBAZGV2IFRoZSBtYWluIHRva2VuIGNvbnRyYWN0CiovCgoKCmNvbnRyYWN0IEJhbSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsgLy8gVG9rZW4gb3duZXIgYWRkcmVzcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7IC8vIGJhbGFuY2VPZgogICAgLy8gbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnQmFpa2FsIE1pbmluZyc7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQmFpa2FsIE1pbmluZyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJCQU0iOwogICAgdWludCAgIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgdWludCAgIHB1YmxpYyBjb25zdGFudCB0b3RhbFN1cHBseSA9IDM0NTUwMDAwICogMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIAogICAgdWludCAgIGludGVybmFsIHRva2VuUHJpY2UgPSA3MDAwMDAwMDAwMDAwMDA7CiAgICAKICAgIGJvb2wgICBwdWJsaWMgYnV5QWxsb3dlZCA9IHRydWU7CiAgICAKICAgIGJvb2wgICBwdWJsaWMgdHJhbnNmZXJCbG9ja2VkID0gdHJ1ZTsKCiAgICAvLwogICAgLy8gRXZlbnRzCiAgICAvLyBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpY3MgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCiAgICAKICAgIGV2ZW50IFNlbnQoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBCdXkoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCBldGgsIHVpbnQgZmJ0KTsKICAgIGV2ZW50IFdpdGhkcmF3KGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgdG8sIHVpbnQgZXRoKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgLy8KICAgIC8vIE1vZGlmaWVycwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgoKICAgIG1vZGlmaWVyIG9ubHlPd25lcklmQmxvY2tlZCgpIHsKICAgICAgICBpZih0cmFuc2ZlckJsb2NrZWQpIHsKICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsgICAKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCgogICAgLy8KICAgIC8vIEZ1bmN0aW9ucwogICAgLy8gCgogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEJhbSgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGJ1eUFsbG93ZWQpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDEpOwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBvd25lcik7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICogYjsKICAgICAgICByZXF1aXJlKGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXF1aXJlKGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIHJlcXVpcmUoYz49YSAmJiBjPj1iKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCgogICAgLy8gUGF5YWJsZSBmdW5jdGlvbiBmb3IgYnV5IGNvaW5zIGZyb20gdG9rZW4gb3duZXIKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIF9idXllcikgcHVibGljIHBheWFibGUKICAgIHsKICAgICAgICByZXF1aXJlKGJ1eUFsbG93ZWQpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHRva2VuUHJpY2UpOwogICAgICAgIHJlcXVpcmUoX2J1eWVyICE9IG93bmVyKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHdlaV92YWx1ZSA9IG1zZy52YWx1ZTsKCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlfdmFsdWUgLyB0b2tlblByaWNlOwogICAgICAgIHRva2VucyA9IHRva2VuczsKCiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gc2FmZVN1YihiYWxhbmNlc1tvd25lcl0sIHRva2Vucyk7CiAgICAgICAgYmFsYW5jZXNbX2J1eWVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbX2J1eWVyXSwgdG9rZW5zKTsKCiAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAKICAgICAgICBCdXkoX2J1eWVyLCBtc2cudmFsdWUsIHRva2Vucyk7CiAgICAgICAgCiAgICB9CgoKICAgIGZ1bmN0aW9uIHNldFRva2VuUHJpY2UodWludCBfbmV3UHJpY2UpIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICB0b2tlblByaWNlID0gX25ld1ByaWNlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCgogICAgZnVuY3Rpb24gZ2V0VG9rZW5QcmljZSgpIHB1YmxpYyB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCBwcmljZSkKICAgIHsKICAgICAgICByZXR1cm4gdG9rZW5QcmljZTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXRCdXlBbGxvd2VkKGJvb2wgX2FsbG93ZWQpIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGJ1eUFsbG93ZWQgPSBfYWxsb3dlZDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VHJhbnNmZXJCbG9ja2VkKGJvb2wgX2Jsb2NrZWQpIHB1YmxpYwogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIHRyYW5zZmVyQmxvY2tlZCA9IF9ibG9ja2VkOwogICAgfQoKIAogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcihhZGRyZXNzIF90bykgcHVibGljIAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIF90by50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKCiAgICAvKioKICAgICAqIEVSQyAyMCB0b2tlbiBmdW5jdGlvbnMKICAgICAqCiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICAgICAqLwogICAgIAogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgb25seU93bmVySWZCbG9ja2VkCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYwogICAgICAgIG9ubHlPd25lcklmQmxvY2tlZAogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYwogICAgICAgIG9ubHlPd25lcklmQmxvY2tlZAogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMKICAgICAgICBvbmx5T3duZXJJZkJsb2NrZWQKICAgICAgICBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykKICAgIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgCn0='.
	

]
