Class {
	#name : #SRT23279920c2e84c337058c3aebc49e907481cc61f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23279920c2e84c337058c3aebc49e907481cc61f >> base64 [
	^ ''.
	

]
