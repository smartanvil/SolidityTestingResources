Class {
	#name : #SRT985063dC56d133b2D2AD9BADA8978d8c5AdFC5c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT985063dC56d133b2D2AD9BADA8978d8c5AdFC5c4 >> base64 [
	^ ''.
	

]
