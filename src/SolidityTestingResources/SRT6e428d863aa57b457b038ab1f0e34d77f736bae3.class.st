Class {
	#name : #SRT6e428d863aa57b457b038ab1f0e34d77f736bae3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e428d863aa57b457b038ab1f0e34d77f736bae3 >> base64 [
	^ ''.
	

]
