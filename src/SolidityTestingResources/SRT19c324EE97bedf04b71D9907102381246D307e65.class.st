Class {
	#name : #SRT19c324EE97bedf04b71D9907102381246D307e65,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19c324EE97bedf04b71D9907102381246D307e65 >> base64 [
	^ ''.
	

]
