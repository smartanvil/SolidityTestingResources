Class {
	#name : #SRTc502c37f8b801e9144e785fcd7817b6a85529a95,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc502c37f8b801e9144e785fcd7817b6a85529a95 >> base64 [
	^ ''.
	

]
