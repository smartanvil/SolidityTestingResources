Class {
	#name : #SRT8fb34a3c46e7f864943b7a387ace65d5593577cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fb34a3c46e7f864943b7a387ace65d5593577cd >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIAogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQogIAp9CgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICAgIAogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIAogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgCiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjaWV2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KICAKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICAgIAogIGV2ZW50IFBhdXNlKCk7CiAgCiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgTk9UIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9CiAgCn0KCgpjb250cmFjdCBGaWRjb21Ub2tlbiBpcyBNaW50YWJsZVRva2VuIHsKICAgIAogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJGaWRjb20gVGVzdCI7CiAgIAogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkZJRENUIjsKICAgIAogIHVpbnQzMiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgYm9vbCBwdWJsaWMgdHJhbnNmZXJBbGxvd2VkID0gZmFsc2U7CgogIG1vZGlmaWVyIHdoZW5UcmFuc2ZlckFsbG93ZWQoKSB7CiAgICByZXF1aXJlKHRyYW5zZmVyQWxsb3dlZCk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dUcmFuc2ZlcigpIG9ubHlPd25lciB7CiAgICB0cmFuc2ZlckFsbG93ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB3aGVuVHJhbnNmZXJBbGxvd2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB3aGVuVHJhbnNmZXJBbGxvd2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CiAgICAKfQoKCmNvbnRyYWN0IFN0YWdlZENyb3dkc2FsZSBpcyBPd25hYmxlIHsKCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogIHN0cnVjdCBTdGFnZSB7CiAgICB1aW50IHBlcmlvZDsKICAgIHVpbnQgaGFyZENhcDsKICAgIHVpbnQgcHJpY2U7CiAgICB1aW50IGludmVzdGVkOwogICAgdWludCBjbG9zZWQ7CiAgfQoKICB1aW50IHB1YmxpYyBzdGFydDsKCiAgdWludCBwdWJsaWMgdG90YWxQZXJpb2Q7CgogIHVpbnQgcHVibGljIHRvdGFsSGFyZENhcDsKIAogIHVpbnQgcHVibGljIHRvdGFsSW52ZXN0ZWQ7CgogIFN0YWdlW10gcHVibGljIHN0YWdlczsKCiAgZnVuY3Rpb24gc3RhZ2VzQ291bnQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIHJldHVybiBzdGFnZXMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gc2V0U3RhcnQodWludCBuZXdTdGFydCkgb25seU93bmVyIHsKICAgIHN0YXJ0ID0gbmV3U3RhcnQ7CiAgfQoKICBmdW5jdGlvbiBhZGRTdGFnZSh1aW50IHBlcmlvZCwgdWludCBoYXJkQ2FwLCB1aW50IHByaWNlKSBvbmx5T3duZXIgewogICAgcmVxdWlyZShwZXJpb2Q+MCAmJiBoYXJkQ2FwID4wICYmIHByaWNlID4gMCk7CiAgICBzdGFnZXMucHVzaChTdGFnZShwZXJpb2QsIGhhcmRDYXAsIHByaWNlLCAwLCAwKSk7CiAgICB0b3RhbFBlcmlvZCA9IHRvdGFsUGVyaW9kLmFkZChwZXJpb2QpOwogICAgdG90YWxIYXJkQ2FwID0gdG90YWxIYXJkQ2FwLmFkZChoYXJkQ2FwKTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZVN0YWdlKHVpbnQ4IG51bWJlcikgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyID49MCAmJiBudW1iZXIgPCBzdGFnZXMubGVuZ3RoKTsKCiAgICBTdGFnZSBzdG9yYWdlIHN0YWdlID0gc3RhZ2VzW251bWJlcl07CiAgICB0b3RhbEhhcmRDYXAgPSB0b3RhbEhhcmRDYXAuc3ViKHN0YWdlLmhhcmRDYXApOyAgICAKICAgIHRvdGFsUGVyaW9kID0gdG90YWxQZXJpb2Quc3ViKHN0YWdlLnBlcmlvZCk7CgogICAgZGVsZXRlIHN0YWdlc1tudW1iZXJdOwoKICAgIGZvciAodWludCBpID0gbnVtYmVyOyBpIDwgc3RhZ2VzLmxlbmd0aCAtIDE7IGkrKykgewogICAgICBzdGFnZXNbaV0gPSBzdGFnZXNbaSsxXTsKICAgIH0KCiAgICBzdGFnZXMubGVuZ3RoLS07CiAgfQoKICBmdW5jdGlvbiBjaGFuZ2VTdGFnZSh1aW50OCBudW1iZXIsIHVpbnQgcGVyaW9kLCB1aW50IGhhcmRDYXAsIHVpbnQgcHJpY2UpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG51bWJlciA+PSAwICYmbnVtYmVyIDwgc3RhZ2VzLmxlbmd0aCk7CgogICAgU3RhZ2Ugc3RvcmFnZSBzdGFnZSA9IHN0YWdlc1tudW1iZXJdOwoKICAgIHRvdGFsSGFyZENhcCA9IHRvdGFsSGFyZENhcC5zdWIoc3RhZ2UuaGFyZENhcCk7ICAgIAogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5zdWIoc3RhZ2UucGVyaW9kKTsgICAgCgogICAgc3RhZ2UuaGFyZENhcCA9IGhhcmRDYXA7CiAgICBzdGFnZS5wZXJpb2QgPSBwZXJpb2Q7CiAgICBzdGFnZS5wcmljZSA9IHByaWNlOwoKICAgIHRvdGFsSGFyZENhcCA9IHRvdGFsSGFyZENhcC5hZGQoaGFyZENhcCk7ICAgIAogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5hZGQocGVyaW9kKTsgICAgCiAgfQoKICBmdW5jdGlvbiBpbnNlcnRTdGFnZSh1aW50OCBudW1iZXJBZnRlciwgdWludCBwZXJpb2QsIHVpbnQgaGFyZENhcCwgdWludCBwcmljZSkgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyQWZ0ZXIgPCBzdGFnZXMubGVuZ3RoKTsKCgogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5hZGQocGVyaW9kKTsKICAgIHRvdGFsSGFyZENhcCA9IHRvdGFsSGFyZENhcC5hZGQoaGFyZENhcCk7CgogICAgc3RhZ2VzLmxlbmd0aCsrOwoKICAgIGZvciAodWludCBpID0gc3RhZ2VzLmxlbmd0aCAtIDI7IGkgPiBudW1iZXJBZnRlcjsgaS0tKSB7CiAgICAgIHN0YWdlc1tpICsgMV0gPSBzdGFnZXNbaV07CiAgICB9CgogICAgc3RhZ2VzW251bWJlckFmdGVyICsgMV0gPSBTdGFnZShwZXJpb2QsIGhhcmRDYXAsIHByaWNlLCAwLCAwKTsKICB9CgogIGZ1bmN0aW9uIGNsZWFyU3RhZ2VzKCkgb25seU93bmVyIHsKICAgIGZvciAodWludCBpID0gMDsgaSA8IHN0YWdlcy5sZW5ndGg7IGkrKykgewogICAgICBkZWxldGUgc3RhZ2VzW2ldOwogICAgfQogICAgc3RhZ2VzLmxlbmd0aCAtPSBzdGFnZXMubGVuZ3RoOwogICAgdG90YWxQZXJpb2QgPSAwOwogICAgdG90YWxIYXJkQ2FwID0gMDsKICB9CgogIG1vZGlmaWVyIHNhbGVJc09uKCkgewogICAgcmVxdWlyZShzdGFnZXMubGVuZ3RoID4gMCAmJiBub3cgPj0gc3RhcnQgJiYgbm93IDwgbGFzdFNhbGVEYXRlKCkpOwogICAgXzsKICB9CiAgCiAgbW9kaWZpZXIgaXNVbmRlckhhcmRDYXAoKSB7CiAgICByZXF1aXJlKHRvdGFsSW52ZXN0ZWQgPD0gdG90YWxIYXJkQ2FwKTsKICAgIF87CiAgfQogIAogIGZ1bmN0aW9uIGxhc3RTYWxlRGF0ZSgpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgcmVxdWlyZShzdGFnZXMubGVuZ3RoID4gMCk7CiAgICB1aW50IGxhc3REYXRlID0gc3RhcnQ7CiAgICBmb3IodWludCBpPTA7IGkgPCBzdGFnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYoc3RhZ2VzW2ldLmludmVzdGVkID49IHN0YWdlc1tpXS5oYXJkQ2FwKSB7CiAgICAgICAgbGFzdERhdGUgPSBzdGFnZXNbaV0uY2xvc2VkOwogICAgICB9IGVsc2UgewogICAgICAgIGxhc3REYXRlID0gbGFzdERhdGUuYWRkKHN0YWdlc1tpXS5wZXJpb2QgKiAxIGRheXMpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbGFzdERhdGU7CiAgfQoKICBmdW5jdGlvbiBjdXJyZW50U3RhZ2UoKSBzYWxlSXNPbiBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIHVpbnQgcHJldmlvdXNEYXRlID0gc3RhcnQ7CiAgICBmb3IodWludCBpPTA7IGkgPCBzdGFnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYoc3RhZ2VzW2ldLmludmVzdGVkIDwgc3RhZ2VzW2ldLmhhcmRDYXApIHsKICAgICAgICBpZihub3cgPj0gcHJldmlvdXNEYXRlICYmIG5vdyA8IHByZXZpb3VzRGF0ZSArIHN0YWdlc1tpXS5wZXJpb2QgKiAxIGRheXMpIHsKICAgICAgICAgIHJldHVybiBpOwogICAgICAgIH0KICAgICAgICBwcmV2aW91c0RhdGUgPSBwcmV2aW91c0RhdGUuYWRkKHN0YWdlc1tpXS5wZXJpb2QgKiAxIGRheXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHByZXZpb3VzRGF0ZSA9IHN0YWdlc1tpXS5jbG9zZWQ7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiAwOwogIH0KCiAgZnVuY3Rpb24gdXBkYXRlU3RhZ2VXaXRoSW52ZXN0ZWQoKSBpbnRlcm5hbCB7CiAgICB1aW50IHN0YWdlSW5kZXggPSBjdXJyZW50U3RhZ2UoKTsKICAgIHRvdGFsSW52ZXN0ZWQgPSB0b3RhbEludmVzdGVkLmFkZChtc2cudmFsdWUpOwogICAgU3RhZ2Ugc3RvcmFnZSBzdGFnZSA9IHN0YWdlc1tzdGFnZUluZGV4XTsKICAgIHN0YWdlLmludmVzdGVkID0gc3RhZ2UuaW52ZXN0ZWQuYWRkKG1zZy52YWx1ZSk7CiAgICBpZihzdGFnZS5pbnZlc3RlZCA+PSBzdGFnZS5oYXJkQ2FwKSB7CiAgICAgIHN0YWdlLmNsb3NlZCA9IG5vdzsKICAgIH0KICB9CgoKfQoKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIFN0YWdlZENyb3dkc2FsZSwgUGF1c2FibGUgewogICAgCiAgYWRkcmVzcyBwdWJsaWMgbXVsdGlzaWdXYWxsZXQ7CiAgCiAgYWRkcmVzcyBwdWJsaWMgZm91bmRlcnNUb2tlbnNXYWxsZXQ7CiAgCiAgYWRkcmVzcyBwdWJsaWMgYm91bnR5VG9rZW5zV2FsbGV0OwogIAogIHVpbnQgcHVibGljIHBlcmNlbnRSYXRlID0gMTAwMDsKCiAgdWludCBwdWJsaWMgZm91bmRlcnNQZXJjZW50OwogIAogIHVpbnQgcHVibGljIGJvdW50eVBlcmNlbnQ7CiAgCiAgRmlkY29tVG9rZW4gcHVibGljIHRva2VuID0gbmV3IEZpZGNvbVRva2VuKCk7CgogIGZ1bmN0aW9uIHNldEZvdW5kZXJzUGVyY2VudCh1aW50IG5ld0ZvdW5kZXJzUGVyY2VudCkgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3Rm91bmRlcnNQZXJjZW50ID4gMCAmJiBuZXdGb3VuZGVyc1BlcmNlbnQgPCBwZXJjZW50UmF0ZSk7CiAgICBmb3VuZGVyc1BlcmNlbnQgPSBuZXdGb3VuZGVyc1BlcmNlbnQ7CiAgfQogIAogIGZ1bmN0aW9uIHNldEJvdW50eVBlcmNlbnQodWludCBuZXdCb3VudHlQZXJjZW50KSBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdCb3VudHlQZXJjZW50ID4gMCAmJiBuZXdCb3VudHlQZXJjZW50IDwgcGVyY2VudFJhdGUpOwogICAgYm91bnR5UGVyY2VudCA9IG5ld0JvdW50eVBlcmNlbnQ7CiAgfQogIAogIGZ1bmN0aW9uIHNldE11bHRpc2lnV2FsbGV0KGFkZHJlc3MgbmV3TXVsdGlzaWdXYWxsZXQpIG9ubHlPd25lciB7CiAgICBtdWx0aXNpZ1dhbGxldCA9IG5ld011bHRpc2lnV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gc2V0Rm91bmRlcnNUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdGb3VuZGVyc1Rva2Vuc1dhbGxldCkgb25seU93bmVyIHsKICAgIGZvdW5kZXJzVG9rZW5zV2FsbGV0ID0gbmV3Rm91bmRlcnNUb2tlbnNXYWxsZXQ7CiAgfQoKICBmdW5jdGlvbiBzZXRCb3VudHlUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdCb3VudHlUb2tlbnNXYWxsZXQpIG9ubHlPd25lciB7CiAgICBib3VudHlUb2tlbnNXYWxsZXQgPSBuZXdCb3VudHlUb2tlbnNXYWxsZXQ7CiAgfQoKICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgcHVibGljIHdoZW5Ob3RQYXVzZWQgb25seU93bmVyIHsKICAgIHVpbnQgaXNzdWVkVG9rZW5TdXBwbHkgPSB0b2tlbi50b3RhbFN1cHBseSgpOwogICAgdWludCBzdW1tYXJ5VG9rZW5zUGVyY2VudCA9IGJvdW50eVBlcmNlbnQgKyBmb3VuZGVyc1BlcmNlbnQ7CiAgICB1aW50IHN1bW1hcnlGb3VuZGVyc1Rva2VucyA9IGlzc3VlZFRva2VuU3VwcGx5Lm11bChzdW1tYXJ5VG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlIC0gc3VtbWFyeVRva2Vuc1BlcmNlbnQpOwogICAgdWludCB0b3RhbFN1cHBseSA9IHN1bW1hcnlGb3VuZGVyc1Rva2VucyArIGlzc3VlZFRva2VuU3VwcGx5OwogICAgdWludCBmb3VuZGVyc1Rva2VucyA9IHRvdGFsU3VwcGx5LmRpdihwZXJjZW50UmF0ZSkubXVsKGZvdW5kZXJzUGVyY2VudCk7CiAgICB1aW50IGJvdW50eVRva2VucyA9IHRvdGFsU3VwcGx5LmRpdihwZXJjZW50UmF0ZSkubXVsKGJvdW50eVBlcmNlbnQpOwogICAgdG9rZW4ubWludChmb3VuZGVyc1Rva2Vuc1dhbGxldCwgZm91bmRlcnNUb2tlbnMpOwogICAgdG9rZW4ubWludChib3VudHlUb2tlbnNXYWxsZXQsIGJvdW50eVRva2Vucyk7CiAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgICB0b2tlbi5hbGxvd1RyYW5zZmVyKCk7CiAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVUb2tlbnMoKSB3aGVuTm90UGF1c2VkIGlzVW5kZXJIYXJkQ2FwIHNhbGVJc09uIHBheWFibGUgewogICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgIHVpbnQgc3RhZ2VJbmRleCA9IGN1cnJlbnRTdGFnZSgpOwogICAgU3RhZ2Ugc3RvcmFnZSBzdGFnZSA9IHN0YWdlc1tzdGFnZUluZGV4XTsKICAgIG11bHRpc2lnV2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB1aW50IHByaWNlID0gc3RhZ2UucHJpY2U7CiAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZS5kaXYocHJpY2UpLm11bCgxIGV0aGVyKTsKICAgIHVwZGF0ZVN0YWdlV2l0aEludmVzdGVkKCk7CiAgICB0b2tlbi5taW50KG1zZy5zZW5kZXIsIHRva2Vucyk7CiAgfQoKICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgY3JlYXRlVG9rZW5zKCk7CiAgfQoKICBmdW5jdGlvbiByZXRyaWV2ZVRva2VucyhhZGRyZXNzIGFub3RoZXJUb2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICBFUkMyMCBhbGllblRva2VuID0gRVJDMjAoYW5vdGhlclRva2VuKTsKICAgIGFsaWVuVG9rZW4udHJhbnNmZXIobXVsdGlzaWdXYWxsZXQsIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgfQoKfQ=='.
	

]
