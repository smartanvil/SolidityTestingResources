Class {
	#name : #SRT69A5b8f0A12269f3AF7EB57278d78414a1A9EEb4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69A5b8f0A12269f3AF7EB57278d78414a1A9EEb4 >> base64 [
	^ ''.
	

]
