Class {
	#name : #SRT0c01d1a41f21863c194c8e948054f8e3a433c424,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0c01d1a41f21863c194c8e948054f8e3a433c424 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBFUkM3MjEgewogICAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcik7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBhcHByb3ZlZCwgdWludDI1NiBpbmRleGVkIHRva2VuSWQpOwoKICAgIC8vIE9wdGlvbmFsCiAgICAvLyBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIG5hbWUpOwogICAgLy8gZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIHN5bWJvbCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk9mT3duZXJCeUluZGV4KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9pbmRleCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IHRva2VuSWQpOwogICAgLy8gZnVuY3Rpb24gdG9rZW5NZXRhZGF0YSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgaW5mb1VybCk7Cn0KCmxpYnJhcnkgU2FmZU1hdGggewogICAgLyoqCiAgICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgICAqLwogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IFRvbWJBY2Nlc3NDb250cm9sIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyQWRkcmVzczsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhd0JhbGFuY2UoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGFkZHJlc3MgY29udHJhY3RBZGRyZXNzID0gdGhpczsKICAgICAgICBvd25lckFkZHJlc3MudHJhbnNmZXIoY29udHJhY3RBZGRyZXNzLmJhbGFuY2UpOwogICAgfQp9Cgpjb250cmFjdCBUb21iQmFzZSBpcyBUb21iQWNjZXNzQ29udHJvbCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCk7CiAgICBzdHJ1Y3QgVG9tYiB7CiAgICAgICAgLy8gVGhlIHRpbWVzdGFtcCBmcm9tIHRoZSBibG9jayB3aGVuIHRoaXMgdG9tYiBjYW1lIGludG8gZXhpc3RlbmNlLgogICAgICAgIGFkZHJlc3Mgc2N1bHB0b3I7CiAgICAgICAgc3RyaW5nIGRhdGE7CiAgICB9CgogICAgLy8gQW4gYXJyYXkgY29udGFpbmluZyBhbGwgZXhpc3RpbmcgdG9tYgogICAgVG9tYltdIHRvbWJzOwogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgdG9tYlRvT3duZXI7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIG93bmVyVG9tYkNvdW50OwogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSB0b21iQXBwcm92YWxzOwoKICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgICAgIHRvbWJUb093bmVyW190b2tlbklkXSA9IF90bzsKICAgICAgICBvd25lclRvbWJDb3VudFtfdG9dID0gb3duZXJUb21iQ291bnRbX3RvXS5hZGQoMSk7CiAgICAgICAgaWYgKF9mcm9tICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXJUb21iQ291bnRbX2Zyb21dID0gb3duZXJUb21iQ291bnRbX2Zyb21dLnN1YigxKTsKICAgICAgICAgICAgZGVsZXRlIHRvbWJBcHByb3ZhbHNbX3Rva2VuSWRdOwogICAgICAgIH0KICAgICAgICBlbWl0IFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfY3JlYXRlVG9tYldpdGhEYXRhKGFkZHJlc3MgX293bmVyLCBzdHJpbmcgZ2l2ZW5EYXRhKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgVG9tYiBtZW1vcnkgX3RvbWIgPSBUb21iKHsKICAgICAgICAgICAgZGF0YTogZ2l2ZW5EYXRhLAogICAgICAgICAgICBzY3VscHRvcjogX293bmVyCiAgICAgICAgfSk7CiAgICAgICAgdWludDI1NiBuZXdUb21iSWQgPSAodG9tYnMucHVzaChfdG9tYikpLnN1YigxKTsKICAgICAgICBfdHJhbnNmZXIoMCwgX293bmVyLCBuZXdUb21iSWQpOwogICAgICAgIHJldHVybiBuZXdUb21iSWQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9tYkJ5T3duZXIoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyh1aW50W10pIHsKICAgICAgICB1aW50W10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50W10ob3duZXJUb21iQ291bnRbX293bmVyXSk7CiAgICAgICAgdWludCBjb3VudGVyID0gMDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0b21icy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAodG9tYlRvT3duZXJbaV0gPT0gX293bmVyKSB7CiAgICAgICAgICAgICAgICByZXN1bHRbY291bnRlcl0gPSBpOwogICAgICAgICAgICAgICAgY291bnRlcisrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWxsVG9tYnMoKSBleHRlcm5hbCB2aWV3IHJldHVybnModWludFtdKSB7CiAgICAgICAgdWludFtdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludFtdKHRvbWJzLmxlbmd0aCk7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdG9tYnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcmVzdWx0W2ldID0gaTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb21iRGV0YWlsKHVpbnQgaW5kZXgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzLCBhZGRyZXNzLCBzdHJpbmcpIHsKICAgICAgICByZXR1cm4gKHRvbWJUb093bmVyW2luZGV4XSwgdG9tYnNbaW5kZXhdLnNjdWxwdG9yLCB0b21ic1tpbmRleF0uZGF0YSk7CiAgICB9Cn0KCmNvbnRyYWN0IFRvbWJPd25lcnNoaXAgaXMgRVJDNzIxLCBUb21iQmFzZSB7CiAgICAvLy8gQG5vdGljZSBOYW1lIGFuZCBzeW1ib2wgb2YgdGhlIG5vbiBmdW5naWJsZSB0b2tlbiwgYXMgZGVmaW5lZCBpbiBFUkM3MjEuCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiRXRoZXJGZW4iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiRVRGIjsKCiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB0b21icy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIG93bmVyVG9tYkNvdW50W19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIF9vd25lcikgewogICAgICAgIHJldHVybiB0b21iVG9Pd25lcltfdG9rZW5JZF07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyBvbmx5T3duZXJPZihfdG9rZW5JZCkgewogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU93bmVyT2YoX3Rva2VuSWQpIHsKICAgICAgICB0b21iQXBwcm92YWxzW190b2tlbklkXSA9IF90bzsKICAgICAgICBlbWl0IEFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljCiAgICB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmVxdWlyZSh0b21iQXBwcm92YWxzW190b2tlbklkXSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlKHRvbWJUb093bmVyW190b2tlbklkXSA9PSBfZnJvbSk7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXJPZih1aW50MjU2IF90b2tlbklkKSB7CiAgICAgICAgcmVxdWlyZSh0b21iVG9Pd25lcltfdG9rZW5JZF0gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgXzsKICAgIH0KfQoKY29udHJhY3QgVG9tYkFjdGlvbiBpcyBUb21iT3duZXJzaGlwIHsKICAgIHVpbnQyNTYgY3VycmVudFByaWNlOwoKICAgIGZ1bmN0aW9uIGJ1eUFuZENyYXZlKHN0cmluZyBkYXRhKSBwYXlhYmxlIGV4dGVybmFsIHsKICAgICAgICBpZiAobXNnLnZhbHVlIDwgY3VycmVudFByaWNlKSByZXZlcnQoKTsKICAgICAgICBfY3JlYXRlVG9tYldpdGhEYXRhKG1zZy5zZW5kZXIsIGRhdGEpOwogICAgfQogCiAgICBmdW5jdGlvbiBjaGFuZ2VQcmljZSh1aW50MjU2IG5ld1ByaWNlKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIC8vZ3dlaSB0byBldGhlcgogICAgICAgIHVpbnQyNTYgZ3dlaVVuaXQgPSAxMDAwMDAwMDAwOwogICAgICAgIGN1cnJlbnRQcmljZSA9IG5ld1ByaWNlLm11bChnd2VpVW5pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJpY2UoKSBleHRlcm5hbCB2aWV3IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBjdXJyZW50UHJpY2U7CiAgICB9Cn0KCmNvbnRyYWN0IFRvbWJDb3JlIGlzIFRvbWJBY3Rpb24gewogICAgZnVuY3Rpb24gVG9tYkNvcmUoKSBwdWJsaWMgewogICAgICAgIG93bmVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgY3VycmVudFByaWNlID0gMC4wMiBldGhlcjsKICAgIH0KfQ=='.
	

]
