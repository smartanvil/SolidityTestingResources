Class {
	#name : #SRT0167ea36024d646ee38062cd07f041e1e1d3a89a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0167ea36024d646ee38062cd07f041e1e1d3a89a >> base64 [
	^ ''.
	

]
