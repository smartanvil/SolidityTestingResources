Class {
	#name : #SRT678aa5979b5a0e5b8e2fd5ab400a64616bc78aa3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT678aa5979b5a0e5b8e2fd5ab400a64616bc78aa3 >> base64 [
	^ ''.
	

]
