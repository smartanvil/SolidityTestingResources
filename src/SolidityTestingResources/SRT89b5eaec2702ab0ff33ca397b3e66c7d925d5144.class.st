Class {
	#name : #SRT89b5eaec2702ab0ff33ca397b3e66c7d925d5144,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT89b5eaec2702ab0ff33ca397b3e66c7d925d5144 >> base64 [
	^ ''.
	

]
