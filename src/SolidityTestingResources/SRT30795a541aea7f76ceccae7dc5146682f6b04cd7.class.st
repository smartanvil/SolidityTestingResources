Class {
	#name : #SRT30795a541aea7f76ceccae7dc5146682f6b04cd7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT30795a541aea7f76ceccae7dc5146682f6b04cd7 >> base64 [
	^ ''.
	

]
