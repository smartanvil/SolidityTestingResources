Class {
	#name : #SRT527980169Ea610d13887B97F12024320C75f26a3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT527980169Ea610d13887B97F12024320C75f26a3 >> base64 [
	^ ''.
	

]
