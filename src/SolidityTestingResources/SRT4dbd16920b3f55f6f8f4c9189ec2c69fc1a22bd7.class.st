Class {
	#name : #SRT4dbd16920b3f55f6f8f4c9189ec2c69fc1a22bd7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4dbd16920b3f55f6f8f4c9189ec2c69fc1a22bd7 >> base64 [
	^ ''.
	

]
