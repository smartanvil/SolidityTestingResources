Class {
	#name : #SRTd418Fcb33ae1a41BDC34D257A228Ea9CB7C8fd03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd418Fcb33ae1a41BDC34D257A228Ea9CB7C8fd03 >> base64 [
	^ ''.
	

]
