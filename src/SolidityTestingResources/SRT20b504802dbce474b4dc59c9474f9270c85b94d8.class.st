Class {
	#name : #SRT20b504802dbce474b4dc59c9474f9270c85b94d8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT20b504802dbce474b4dc59c9474f9270c85b94d8 >> base64 [
	^ ''.
	

]
