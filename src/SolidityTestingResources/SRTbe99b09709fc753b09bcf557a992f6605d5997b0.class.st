Class {
	#name : #SRTbe99b09709fc753b09bcf557a992f6605d5997b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbe99b09709fc753b09bcf557a992f6605d5997b0 >> base64 [
	^ ''.
	

]
