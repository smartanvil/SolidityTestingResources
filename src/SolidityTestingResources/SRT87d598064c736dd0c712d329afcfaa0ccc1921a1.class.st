Class {
	#name : #SRT87d598064c736dd0c712d329afcfaa0ccc1921a1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87d598064c736dd0c712d329afcfaa0ccc1921a1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9Ci8vLyBAdGl0bGUgQXVjdGlvbiBDb3JlCi8vLyBAZGV2IENvbnRhaW5zIG1vZGVscywgdmFyaWFibGVzLCBhbmQgaW50ZXJuYWwgbWV0aG9kcyBmb3IgdGhlIGF1Y3Rpb24uCmNvbnRyYWN0IENsb2NrQXVjdGlvbkJhc2UgewoKICAgIC8vIFJlcHJlc2VudHMgYW4gYXVjdGlvbiBvbiBhbiBORlQKICAgIHN0cnVjdCBBdWN0aW9uIHsKICAgICAgICAvLyBDdXJyZW50IG93bmVyIG9mIE5GVAogICAgICAgIGFkZHJlc3Mgc2VsbGVyOwogICAgICAgIC8vIFByaWNlIChpbiB3ZWkpIGF0IGJlZ2lubmluZyBvZiBhdWN0aW9uCiAgICAgICAgdWludDEyOCBzdGFydGluZ1ByaWNlOwogICAgICAgIC8vIFByaWNlIChpbiB3ZWkpIGF0IGVuZCBvZiBhdWN0aW9uCiAgICAgICAgdWludDEyOCBlbmRpbmdQcmljZTsKICAgICAgICAvLyBEdXJhdGlvbiAoaW4gc2Vjb25kcykgb2YgYXVjdGlvbgogICAgICAgIHVpbnQ2NCBkdXJhdGlvbjsKICAgICAgICAvLyBUaW1lIHdoZW4gYXVjdGlvbiBzdGFydGVkCiAgICAgICAgLy8gTk9URTogMCBpZiB0aGlzIGF1Y3Rpb24gaGFzIGJlZW4gY29uY2x1ZGVkCiAgICAgICAgdWludDY0IHN0YXJ0ZWRBdDsKICAgIH0KCiAgICAvLyBSZWZlcmVuY2UgdG8gY29udHJhY3QgdHJhY2tpbmcgTkZUIG93bmVyc2hpcAogICAgRVJDNzIxIHB1YmxpYyBub25GdW5naWJsZUNvbnRyYWN0OwoKICAgIC8vIEN1dCBvd25lciB0YWtlcyBvbiBlYWNoIGF1Y3Rpb24sIG1lYXN1cmVkIGluIGJhc2lzIHBvaW50cyAoMS8xMDAgb2YgYSBwZXJjZW50KS4KICAgIC8vIFZhbHVlcyAwLTEwLDAwMCBtYXAgdG8gMCUtMTAwJQogICAgdWludDI1NiBwdWJsaWMgb3duZXJDdXQ7CgogICAgLy8gTWFwIGZyb20gdG9rZW4gSUQgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBhdWN0aW9uLgogICAgbWFwcGluZyAodWludDI1NiA9PiBBdWN0aW9uKSB0b2tlbklkVG9BdWN0aW9uOwoKICAgIGV2ZW50IEF1Y3Rpb25DcmVhdGVkKHVpbnQyNTYgdG9rZW5JZCwgdWludDI1NiBzdGFydGluZ1ByaWNlLCB1aW50MjU2IGVuZGluZ1ByaWNlLCB1aW50MjU2IGR1cmF0aW9uKTsKICAgIGV2ZW50IEF1Y3Rpb25TdWNjZXNzZnVsKHVpbnQyNTYgdG9rZW5JZCwgdWludDI1NiB0b3RhbFByaWNlLCBhZGRyZXNzIHdpbm5lcik7CiAgICBldmVudCBBdWN0aW9uQ2FuY2VsbGVkKHVpbnQyNTYgdG9rZW5JZCk7CgogICAgLy8vIEBkZXYgRE9OJ1QgZ2l2ZSBtZSB5b3VyIG1vbmV5LgogICAgZnVuY3Rpb24oKSBleHRlcm5hbCB7fQoKICAgIC8vIE1vZGlmaWVycyB0byBjaGVjayB0aGF0IGlucHV0cyBjYW4gYmUgc2FmZWx5IHN0b3JlZCB3aXRoIGEgY2VydGFpbgogICAgLy8gbnVtYmVyIG9mIGJpdHMuIFdlIHVzZSBjb25zdGFudHMgYW5kIG11bHRpcGxlIG1vZGlmaWVycyB0byBzYXZlIGdhcy4KICAgIG1vZGlmaWVyIGNhbkJlU3RvcmVkV2l0aDY0Qml0cyh1aW50MjU2IF92YWx1ZSkgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IDE4NDQ2NzQ0MDczNzA5NTUxNjE1KTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNhbkJlU3RvcmVkV2l0aDEyOEJpdHModWludDI1NiBfdmFsdWUpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8IDM0MDI4MjM2NjkyMDkzODQ2MzQ2MzM3NDYwNzQzMTc2ODIxMTQ1NSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIGNsYWltYW50IG93bnMgdGhlIHRva2VuLgogICAgLy8vIEBwYXJhbSBfY2xhaW1hbnQgLSBBZGRyZXNzIGNsYWltaW5nIHRvIG93biB0aGUgdG9rZW4uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gd2hvc2Ugb3duZXJzaGlwIHRvIHZlcmlmeS4KICAgIGZ1bmN0aW9uIF9vd25zKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKG5vbkZ1bmdpYmxlQ29udHJhY3Qub3duZXJPZihfdG9rZW5JZCkgPT0gX2NsYWltYW50KTsKICAgIH0KCiAgICAvLy8gQGRldiBFc2Nyb3dzIHRoZSBORlQsIGFzc2lnbmluZyBvd25lcnNoaXAgdG8gdGhpcyBjb250cmFjdC4KICAgIC8vLyBUaHJvd3MgaWYgdGhlIGVzY3JvdyBmYWlscy4KICAgIC8vLyBAcGFyYW0gX293bmVyIC0gQ3VycmVudCBvd25lciBhZGRyZXNzIG9mIHRva2VuIHRvIGVzY3Jvdy4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0b2tlbiB3aG9zZSBhcHByb3ZhbCB0byB2ZXJpZnkuCiAgICBmdW5jdGlvbiBfZXNjcm93KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gaXQgd2lsbCB0aHJvdyBpZiB0cmFuc2ZlciBmYWlscwogICAgICAgIG5vbkZ1bmdpYmxlQ29udHJhY3QudHJhbnNmZXJGcm9tKF9vd25lciwgdGhpcywgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IFRyYW5zZmVycyBhbiBORlQgb3duZWQgYnkgdGhpcyBjb250cmFjdCB0byBhbm90aGVyIGFkZHJlc3MuCiAgICAvLy8gUmV0dXJucyB0cnVlIGlmIHRoZSB0cmFuc2ZlciBzdWNjZWVkcy4KICAgIC8vLyBAcGFyYW0gX3JlY2VpdmVyIC0gQWRkcmVzcyB0byB0cmFuc2ZlciBORlQgdG8uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gdG8gdHJhbnNmZXIuCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfcmVjZWl2ZXIsIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHsKICAgICAgICAvLyBpdCB3aWxsIHRocm93IGlmIHRyYW5zZmVyIGZhaWxzCiAgICAgICAgbm9uRnVuZ2libGVDb250cmFjdC50cmFuc2ZlcihfcmVjZWl2ZXIsIF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBZGRzIGFuIGF1Y3Rpb24gdG8gdGhlIGxpc3Qgb2Ygb3BlbiBhdWN0aW9ucy4gQWxzbyBmaXJlcyB0aGUKICAgIC8vLyAgQXVjdGlvbkNyZWF0ZWQgZXZlbnQuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgcHV0IG9uIGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF9hdWN0aW9uIEF1Y3Rpb24gdG8gYWRkLgogICAgZnVuY3Rpb24gX2FkZEF1Y3Rpb24odWludDI1NiBfdG9rZW5JZCwgQXVjdGlvbiBfYXVjdGlvbikgaW50ZXJuYWwgewogICAgICAgIC8vIFJlcXVpcmUgdGhhdCBhbGwgYXVjdGlvbnMgaGF2ZSBhIGR1cmF0aW9uIG9mCiAgICAgICAgLy8gYXQgbGVhc3Qgb25lIG1pbnV0ZS4gKEtlZXBzIG91ciBtYXRoIGZyb20gZ2V0dGluZyBoYWlyeSEpCiAgICAgICAgcmVxdWlyZShfYXVjdGlvbi5kdXJhdGlvbiA+PSAxIG1pbnV0ZXMpOwoKICAgICAgICB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXSA9IF9hdWN0aW9uOwogICAgICAgIAogICAgICAgIEF1Y3Rpb25DcmVhdGVkKAogICAgICAgICAgICB1aW50MjU2KF90b2tlbklkKSwKICAgICAgICAgICAgdWludDI1NihfYXVjdGlvbi5zdGFydGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDI1NihfYXVjdGlvbi5lbmRpbmdQcmljZSksCiAgICAgICAgICAgIHVpbnQyNTYoX2F1Y3Rpb24uZHVyYXRpb24pCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gQGRldiBDYW5jZWxzIGFuIGF1Y3Rpb24gdW5jb25kaXRpb25hbGx5LgogICAgZnVuY3Rpb24gX2NhbmNlbEF1Y3Rpb24odWludDI1NiBfdG9rZW5JZCwgYWRkcmVzcyBfc2VsbGVyKSBpbnRlcm5hbCB7CiAgICAgICAgX3JlbW92ZUF1Y3Rpb24oX3Rva2VuSWQpOwogICAgICAgIF90cmFuc2Zlcihfc2VsbGVyLCBfdG9rZW5JZCk7CiAgICAgICAgQXVjdGlvbkNhbmNlbGxlZChfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBkZXYgQ29tcHV0ZXMgdGhlIHByaWNlIGFuZCB0cmFuc2ZlcnMgd2lubmluZ3MuCiAgICAvLy8gRG9lcyBOT1QgdHJhbnNmZXIgb3duZXJzaGlwIG9mIHRva2VuLgogICAgZnVuY3Rpb24gX2JpZCh1aW50MjU2IF90b2tlbklkLCB1aW50MjU2IF9iaWRBbW91bnQpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgYXVjdGlvbiBzdHJ1Y3QKICAgICAgICBBdWN0aW9uIHN0b3JhZ2UgYXVjdGlvbiA9IHRva2VuSWRUb0F1Y3Rpb25bX3Rva2VuSWRdOwoKICAgICAgICAvLyBFeHBsaWNpdGx5IGNoZWNrIHRoYXQgdGhpcyBhdWN0aW9uIGlzIGN1cnJlbnRseSBsaXZlLgogICAgICAgIC8vIChCZWNhdXNlIG9mIGhvdyBFdGhlcmV1bSBtYXBwaW5ncyB3b3JrLCB3ZSBjYW4ndCBqdXN0IGNvdW50CiAgICAgICAgLy8gb24gdGhlIGxvb2t1cCBhYm92ZSBmYWlsaW5nLiBBbiBpbnZhbGlkIF90b2tlbklkIHdpbGwganVzdAogICAgICAgIC8vIHJldHVybiBhbiBhdWN0aW9uIG9iamVjdCB0aGF0IGlzIGFsbCB6ZXJvcy4pCiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwoKICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBpbmNvbWluZyBiaWQgaXMgaGlnaGVyIHRoYW4gdGhlIGN1cnJlbnQKICAgICAgICAvLyBwcmljZQogICAgICAgIHVpbnQyNTYgcHJpY2UgPSBfY3VycmVudFByaWNlKGF1Y3Rpb24pOwogICAgICAgIHJlcXVpcmUoX2JpZEFtb3VudCA+PSBwcmljZSk7CgogICAgICAgIC8vIEdyYWIgYSByZWZlcmVuY2UgdG8gdGhlIHNlbGxlciBiZWZvcmUgdGhlIGF1Y3Rpb24gc3RydWN0CiAgICAgICAgLy8gZ2V0cyBkZWxldGVkLgogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gYXVjdGlvbi5zZWxsZXI7CgogICAgICAgIC8vIFRoZSBiaWQgaXMgZ29vZCEgUmVtb3ZlIHRoZSBhdWN0aW9uIGJlZm9yZSBzZW5kaW5nIHRoZSBmZWVzCiAgICAgICAgLy8gdG8gdGhlIHNlbmRlciBzbyB3ZSBjYW4ndCBoYXZlIGEgcmVlbnRyYW5jeSBhdHRhY2suCiAgICAgICAgX3JlbW92ZUF1Y3Rpb24oX3Rva2VuSWQpOwoKICAgICAgICAvLyBUcmFuc2ZlciBwcm9jZWVkcyB0byBzZWxsZXIgKGlmIHRoZXJlIGFyZSBhbnkhKQogICAgICAgIGlmIChwcmljZSA+IDApIHsKICAgICAgICAgICAgLy8gIENhbGN1bGF0ZSB0aGUgYXVjdGlvbmVlcidzIGN1dC4KICAgICAgICAgICAgLy8gKE5PVEU6IF9jb21wdXRlQ3V0KCkgaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gYQogICAgICAgICAgICAvLyAgdmFsdWUgPD0gcHJpY2UsIHNvIHRoaXMgc3VidHJhY3Rpb24gY2FuJ3QgZ28gbmVnYXRpdmUuKQogICAgICAgICAgICB1aW50MjU2IGF1Y3Rpb25lZXJDdXQgPSBfY29tcHV0ZUN1dChwcmljZSk7CiAgICAgICAgICAgIHVpbnQyNTYgc2VsbGVyUHJvY2VlZHMgPSBwcmljZSAtIGF1Y3Rpb25lZXJDdXQ7CgogICAgICAgICAgICAvLyBOT1RFOiBEb2luZyBhIHRyYW5zZmVyKCkgaW4gdGhlIG1pZGRsZSBvZiBhIGNvbXBsZXgKICAgICAgICAgICAgLy8gbWV0aG9kIGxpa2UgdGhpcyBpcyBnZW5lcmFsbHkgZGlzY291cmFnZWQgYmVjYXVzZSBvZgogICAgICAgICAgICAvLyByZWVudHJhbmN5IGF0dGFja3MgYW5kIERvUyBhdHRhY2tzIGlmIHRoZSBzZWxsZXIgaXMKICAgICAgICAgICAgLy8gYSBjb250cmFjdCB3aXRoIGFuIGludmFsaWQgZmFsbGJhY2sgZnVuY3Rpb24uIFdlIGV4cGxpY2l0bHkKICAgICAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCByZWVudHJhbmN5IGF0dGFja3MgYnkgcmVtb3ZpbmcgdGhlIGF1Y3Rpb24KICAgICAgICAgICAgLy8gYmVmb3JlIGNhbGxpbmcgdHJhbnNmZXIoKSwgYW5kIHRoZSBvbmx5IHRoaW5nIHRoZSBzZWxsZXIKICAgICAgICAgICAgLy8gY2FuIERvUyBpcyB0aGUgc2FsZSBvZiB0aGVpciBvd24gYXNzZXQhIChBbmQgaWYgaXQncyBhbgogICAgICAgICAgICAvLyBhY2NpZGVudCwgdGhleSBjYW4gY2FsbCBjYW5jZWxBdWN0aW9uKCkuICkKICAgICAgICAgICAgc2VsbGVyLnRyYW5zZmVyKHNlbGxlclByb2NlZWRzKTsKICAgICAgICB9CgogICAgICAgIC8vIFRlbGwgdGhlIHdvcmxkIQogICAgICAgIEF1Y3Rpb25TdWNjZXNzZnVsKF90b2tlbklkLCBwcmljZSwgbXNnLnNlbmRlcik7CgogICAgICAgIHJldHVybiBwcmljZTsKICAgIH0KCiAgICAvLy8gQGRldiBSZW1vdmVzIGFuIGF1Y3Rpb24gZnJvbSB0aGUgbGlzdCBvZiBvcGVuIGF1Y3Rpb25zLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIE5GVCBvbiBhdWN0aW9uLgogICAgZnVuY3Rpb24gX3JlbW92ZUF1Y3Rpb24odWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgICAgIGRlbGV0ZSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIE5GVCBpcyBvbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfYXVjdGlvbiAtIEF1Y3Rpb24gdG8gY2hlY2suCiAgICBmdW5jdGlvbiBfaXNPbkF1Y3Rpb24oQXVjdGlvbiBzdG9yYWdlIF9hdWN0aW9uKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKF9hdWN0aW9uLnN0YXJ0ZWRBdCA+IDApOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgY3VycmVudCBwcmljZSBvZiBhbiBORlQgb24gYXVjdGlvbi4gQnJva2VuIGludG8gdHdvCiAgICAvLy8gIGZ1bmN0aW9ucyAodGhpcyBvbmUsIHRoYXQgY29tcHV0ZXMgdGhlIGR1cmF0aW9uIGZyb20gdGhlIGF1Y3Rpb24KICAgIC8vLyAgc3RydWN0dXJlLCBhbmQgdGhlIG90aGVyIHRoYXQgZG9lcyB0aGUgcHJpY2UgY29tcHV0YXRpb24pIHNvIHdlCiAgICAvLy8gIGNhbiBlYXNpbHkgdGVzdCB0aGF0IHRoZSBwcmljZSBjb21wdXRhdGlvbiB3b3JrcyBjb3JyZWN0bHkuCiAgICBmdW5jdGlvbiBfY3VycmVudFByaWNlKEF1Y3Rpb24gc3RvcmFnZSBfYXVjdGlvbikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQyNTYgc2Vjb25kc1Bhc3NlZCA9IDA7CiAgICAgICAgCiAgICAgICAgLy8gQSBiaXQgb2YgaW5zdXJhbmNlIGFnYWluc3QgbmVnYXRpdmUgdmFsdWVzIChvciB3cmFwYXJvdW5kKS4KICAgICAgICAvLyBQcm9iYWJseSBub3QgbmVjZXNzYXJ5IChzaW5jZSBFdGhlcmV1bSBndWFybmF0ZWVzIHRoYXQgdGhlCiAgICAgICAgLy8gbm93IHZhcmlhYmxlIGRvZXNuJ3QgZXZlciBnbyBiYWNrd2FyZHMpLgogICAgICAgIGlmIChub3cgPiBfYXVjdGlvbi5zdGFydGVkQXQpIHsKICAgICAgICAgICAgc2Vjb25kc1Bhc3NlZCA9IG5vdyAtIF9hdWN0aW9uLnN0YXJ0ZWRBdDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBfY29tcHV0ZUN1cnJlbnRQcmljZSgKICAgICAgICAgICAgX2F1Y3Rpb24uc3RhcnRpbmdQcmljZSwKICAgICAgICAgICAgX2F1Y3Rpb24uZW5kaW5nUHJpY2UsCiAgICAgICAgICAgIF9hdWN0aW9uLmR1cmF0aW9uLAogICAgICAgICAgICBzZWNvbmRzUGFzc2VkCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gQGRldiBDb21wdXRlcyB0aGUgY3VycmVudCBwcmljZSBvZiBhbiBhdWN0aW9uLiBGYWN0b3JlZCBvdXQKICAgIC8vLyAgZnJvbSBfY3VycmVudFByaWNlIHNvIHdlIGNhbiBydW4gZXh0ZW5zaXZlIHVuaXQgdGVzdHMuCiAgICAvLy8gIFdoZW4gdGVzdGluZywgbWFrZSB0aGlzIGZ1bmN0aW9uIHB1YmxpYyBhbmQgdHVybiBvbgogICAgLy8vICBgQ3VycmVudCBwcmljZSBjb21wdXRhdGlvbmAgdGVzdCBzdWl0ZS4KICAgIGZ1bmN0aW9uIF9jb21wdXRlQ3VycmVudFByaWNlKAogICAgICAgIHVpbnQyNTYgX3N0YXJ0aW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZW5kaW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZHVyYXRpb24sCiAgICAgICAgdWludDI1NiBfc2Vjb25kc1Bhc3NlZAogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gTk9URTogV2UgZG9uJ3QgdXNlIFNhZmVNYXRoIChvciBzaW1pbGFyKSBpbiB0aGlzIGZ1bmN0aW9uIGJlY2F1c2UKICAgICAgICAvLyAgYWxsIG9mIG91ciBwdWJsaWMgZnVuY3Rpb25zIGNhcmVmdWxseSBjYXAgdGhlIG1heGltdW0gdmFsdWVzIGZvcgogICAgICAgIC8vICB0aW1lIChhdCA2NC1iaXRzKSBhbmQgY3VycmVuY3kgKGF0IDEyOC1iaXRzKS4gX2R1cmF0aW9uIGlzCiAgICAgICAgLy8gIGFsc28ga25vd24gdG8gYmUgbm9uLXplcm8gKHNlZSB0aGUgcmVxdWlyZSgpIHN0YXRlbWVudCBpbgogICAgICAgIC8vICBfYWRkQXVjdGlvbigpKQogICAgICAgIGlmIChfc2Vjb25kc1Bhc3NlZCA+PSBfZHVyYXRpb24pIHsKICAgICAgICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBkeW5hbWljIHByaWNpbmcgcG9ydGlvbgogICAgICAgICAgICAvLyBvZiB0aGUgYXVjdGlvbiwganVzdCByZXR1cm4gdGhlIGVuZCBwcmljZS4KICAgICAgICAgICAgcmV0dXJuIF9lbmRpbmdQcmljZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBTdGFydGluZyBwcmljZSBjYW4gYmUgaGlnaGVyIHRoYW4gZW5kaW5nIHByaWNlIChhbmQgb2Z0ZW4gaXMhKSwgc28KICAgICAgICAgICAgLy8gdGhpcyBkZWx0YSBjYW4gYmUgbmVnYXRpdmUuCiAgICAgICAgICAgIGludDI1NiB0b3RhbFByaWNlQ2hhbmdlID0gaW50MjU2KF9lbmRpbmdQcmljZSkgLSBpbnQyNTYoX3N0YXJ0aW5nUHJpY2UpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gVGhpcyBtdWx0aXBsaWNhdGlvbiBjYW4ndCBvdmVyZmxvdywgX3NlY29uZHNQYXNzZWQgd2lsbCBlYXNpbHkgZml0IHdpdGhpbgogICAgICAgICAgICAvLyA2NC1iaXRzLCBhbmQgdG90YWxQcmljZUNoYW5nZSB3aWxsIGVhc2lseSBmaXQgd2l0aGluIDEyOC1iaXRzLCB0aGVpciBwcm9kdWN0CiAgICAgICAgICAgIC8vIHdpbGwgYWx3YXlzIGZpdCB3aXRoaW4gMjU2LWJpdHMuCiAgICAgICAgICAgIGludDI1NiBjdXJyZW50UHJpY2VDaGFuZ2UgPSB0b3RhbFByaWNlQ2hhbmdlICogaW50MjU2KF9zZWNvbmRzUGFzc2VkKSAvIGludDI1NihfZHVyYXRpb24pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gY3VycmVudFByaWNlQ2hhbmdlIGNhbiBiZSBuZWdhdGl2ZSwgYnV0IGlmIHNvLCB3aWxsIGhhdmUgYSBtYWduaXR1ZGUKICAgICAgICAgICAgLy8gbGVzcyB0aGF0IF9zdGFydGluZ1ByaWNlLiBUaHVzLCB0aGlzIHJlc3VsdCB3aWxsIGFsd2F5cyBlbmQgdXAgcG9zaXRpdmUuCiAgICAgICAgICAgIGludDI1NiBjdXJyZW50UHJpY2UgPSBpbnQyNTYoX3N0YXJ0aW5nUHJpY2UpICsgY3VycmVudFByaWNlQ2hhbmdlOwogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHVpbnQyNTYoY3VycmVudFByaWNlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgQ29tcHV0ZXMgb3duZXIncyBjdXQgb2YgYSBzYWxlLgogICAgLy8vIEBwYXJhbSBfcHJpY2UgLSBTYWxlIHByaWNlIG9mIE5GVC4KICAgIGZ1bmN0aW9uIF9jb21wdXRlQ3V0KHVpbnQyNTYgX3ByaWNlKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgU2FmZU1hdGggKG9yIHNpbWlsYXIpIGluIHRoaXMgZnVuY3Rpb24gYmVjYXVzZQogICAgICAgIC8vICBhbGwgb2Ygb3VyIGVudHJ5IGZ1bmN0aW9ucyBjYXJlZnVsbHkgY2FwIHRoZSBtYXhpbXVtIHZhbHVlcyBmb3IKICAgICAgICAvLyAgY3VycmVuY3kgKGF0IDEyOC1iaXRzKSwgYW5kIG93bmVyQ3V0IDw9IDEwMDAwIChzZWUgdGhlIHJlcXVpcmUoKQogICAgICAgIC8vICBzdGF0ZW1lbnQgaW4gdGhlIENsb2NrQXVjdGlvbiBjb25zdHJ1Y3RvcikuIFRoZSByZXN1bHQgb2YgdGhpcwogICAgICAgIC8vICBmdW5jdGlvbiBpcyBhbHdheXMgZ3VhcmFudGVlZCB0byBiZSA8PSBfcHJpY2UuCiAgICAgICAgcmV0dXJuIF9wcmljZSAqIG93bmVyQ3V0IC8gMTAwMDA7CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBDbG9jayBhdWN0aW9uIGZvciBub24tZnVuZ2libGUgdG9rZW5zLgpjb250cmFjdCBDbG9ja0F1Y3Rpb24gaXMgUGF1c2FibGUsIENsb2NrQXVjdGlvbkJhc2UgewoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yIGNyZWF0ZXMgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBvd25lcnNoaXAgY29udHJhY3QKICAgIC8vLyAgYW5kIHZlcmlmaWVzIHRoZSBvd25lciBjdXQgaXMgaW4gdGhlIHZhbGlkIHJhbmdlLgogICAgLy8vIEBwYXJhbSBfbmZ0QWRkcmVzcyAtIGFkZHJlc3Mgb2YgYSBkZXBsb3llZCBjb250cmFjdCBpbXBsZW1lbnRpbmcKICAgIC8vLyAgdGhlIE5vbmZ1bmdpYmxlIEludGVyZmFjZS4KICAgIC8vLyBAcGFyYW0gX2N1dCAtIHBlcmNlbnQgY3V0IHRoZSBvd25lciB0YWtlcyBvbiBlYWNoIGF1Y3Rpb24sIG11c3QgYmUKICAgIC8vLyAgYmV0d2VlbiAwLTEwLDAwMC4KICAgIGZ1bmN0aW9uIENsb2NrQXVjdGlvbihhZGRyZXNzIF9uZnRBZGRyZXNzLCB1aW50MjU2IF9jdXQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfY3V0IDw9IDEwMDAwKTsKICAgICAgICBvd25lckN1dCA9IF9jdXQ7CiAgICAgICAgCiAgICAgICAgRVJDNzIxIGNhbmRpZGF0ZUNvbnRyYWN0ID0gRVJDNzIxKF9uZnRBZGRyZXNzKTsKICAgICAgICByZXF1aXJlKGNhbmRpZGF0ZUNvbnRyYWN0LmltcGxlbWVudHNFUkM3MjEoKSk7CiAgICAgICAgbm9uRnVuZ2libGVDb250cmFjdCA9IGNhbmRpZGF0ZUNvbnRyYWN0OwogICAgfQoKICAgIC8vLyBAZGV2IFJlbW92ZSBhbGwgRXRoZXIgZnJvbSB0aGUgY29udHJhY3QsIHdoaWNoIGlzIHRoZSBvd25lcidzIGN1dHMKICAgIC8vLyAgYXMgd2VsbCBhcyBhbnkgRXRoZXIgc2VudCBkaXJlY3RseSB0byB0aGUgY29udHJhY3QgYWRkcmVzcy4KICAgIC8vLyAgQWx3YXlzIHRyYW5zZmVycyB0byB0aGUgTkZUIGNvbnRyYWN0LCBidXQgY2FuIGJlIGNhbGxlZCBlaXRoZXIgYnkKICAgIC8vLyAgdGhlIG93bmVyIG9yIHRoZSBORlQgY29udHJhY3QuCiAgICBmdW5jdGlvbiB3aXRoZHJhd0JhbGFuY2UoKSBleHRlcm5hbCB7CiAgICAgICAgYWRkcmVzcyBuZnRBZGRyZXNzID0gYWRkcmVzcyhub25GdW5naWJsZUNvbnRyYWN0KTsKCiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBvd25lciB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IG5mdEFkZHJlc3MKICAgICAgICApOwogICAgICAgIG5mdEFkZHJlc3MudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGVzIGFuZCBiZWdpbnMgYSBuZXcgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0b2tlbiB0byBhdWN0aW9uLCBzZW5kZXIgbXVzdCBiZSBvd25lci4KICAgIC8vLyBAcGFyYW0gX3N0YXJ0aW5nUHJpY2UgLSBQcmljZSBvZiBpdGVtIChpbiB3ZWkpIGF0IGJlZ2lubmluZyBvZiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfZW5kaW5nUHJpY2UgLSBQcmljZSBvZiBpdGVtIChpbiB3ZWkpIGF0IGVuZCBvZiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfZHVyYXRpb24gLSBMZW5ndGggb2YgdGltZSB0byBtb3ZlIGJldHdlZW4gc3RhcnRpbmcKICAgIC8vLyAgcHJpY2UgYW5kIGVuZGluZyBwcmljZSAoaW4gc2Vjb25kcykuCiAgICAvLy8gQHBhcmFtIF9zZWxsZXIgLSBTZWxsZXIsIGlmIG5vdCB0aGUgbWVzc2FnZSBzZW5kZXIKICAgIGZ1bmN0aW9uIGNyZWF0ZUF1Y3Rpb24oCiAgICAgICAgdWludDI1NiBfdG9rZW5JZCwKICAgICAgICB1aW50MjU2IF9zdGFydGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2VuZGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2R1cmF0aW9uLAogICAgICAgIGFkZHJlc3MgX3NlbGxlcgogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHdoZW5Ob3RQYXVzZWQKICAgICAgICBjYW5CZVN0b3JlZFdpdGgxMjhCaXRzKF9zdGFydGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDEyOEJpdHMoX2VuZGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDY0Qml0cyhfZHVyYXRpb24pCiAgICB7CiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgICAgIF9lc2Nyb3cobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgICAgIEF1Y3Rpb24gbWVtb3J5IGF1Y3Rpb24gPSBBdWN0aW9uKAogICAgICAgICAgICBfc2VsbGVyLAogICAgICAgICAgICB1aW50MTI4KF9zdGFydGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDEyOChfZW5kaW5nUHJpY2UpLAogICAgICAgICAgICB1aW50NjQoX2R1cmF0aW9uKSwKICAgICAgICAgICAgdWludDY0KG5vdykKICAgICAgICApOwogICAgICAgIF9hZGRBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uKTsKICAgIH0KCiAgICAvLy8gQGRldiBCaWRzIG9uIGFuIG9wZW4gYXVjdGlvbiwgY29tcGxldGluZyB0aGUgYXVjdGlvbiBhbmQgdHJhbnNmZXJyaW5nCiAgICAvLy8gIG93bmVyc2hpcCBvZiB0aGUgTkZUIGlmIGVub3VnaCBFdGhlciBpcyBzdXBwbGllZC4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0b2tlbiB0byBiaWQgb24uCiAgICBmdW5jdGlvbiBiaWQodWludDI1NiBfdG9rZW5JZCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIF9iaWQgd2lsbCB0aHJvdyBpZiB0aGUgYmlkIG9yIGZ1bmRzIHRyYW5zZmVyIGZhaWxzCiAgICAgICAgX2JpZChfdG9rZW5JZCwgbXNnLnZhbHVlKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IENhbmNlbHMgYW4gYXVjdGlvbiB0aGF0IGhhc24ndCBiZWVuIHdvbiB5ZXQuCiAgICAvLy8gIFJldHVybnMgdGhlIE5GVCB0byBvcmlnaW5hbCBvd25lci4KICAgIC8vLyBAbm90aWNlIFRoaXMgaXMgYSBzdGF0ZS1tb2RpZnlpbmcgZnVuY3Rpb24gdGhhdCBjYW4KICAgIC8vLyAgYmUgY2FsbGVkIHdoaWxlIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gb24gYXVjdGlvbgogICAgZnVuY3Rpb24gY2FuY2VsQXVjdGlvbih1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gYXVjdGlvbi5zZWxsZXI7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNlbGxlcik7CiAgICAgICAgX2NhbmNlbEF1Y3Rpb24oX3Rva2VuSWQsIHNlbGxlcik7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FuY2VscyBhbiBhdWN0aW9uIHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgIC8vLyAgT25seSB0aGUgb3duZXIgbWF5IGRvIHRoaXMsIGFuZCBORlRzIGFyZSByZXR1cm5lZCB0bwogICAgLy8vICB0aGUgc2VsbGVyLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gZW1lcmdlbmNpZXMuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdGhlIE5GVCBvbiBhdWN0aW9uIHRvIGNhbmNlbC4KICAgIGZ1bmN0aW9uIGNhbmNlbEF1Y3Rpb25XaGVuUGF1c2VkKHVpbnQyNTYgX3Rva2VuSWQpCiAgICAgICAgd2hlblBhdXNlZAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIF9jYW5jZWxBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uLnNlbGxlcik7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBhdWN0aW9uIGluZm8gZm9yIGFuIE5GVCBvbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIE5GVCBvbiBhdWN0aW9uLgogICAgZnVuY3Rpb24gZ2V0QXVjdGlvbih1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zCiAgICAoCiAgICAgICAgYWRkcmVzcyBzZWxsZXIsCiAgICAgICAgdWludDI1NiBzdGFydGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgZW5kaW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBkdXJhdGlvbiwKICAgICAgICB1aW50MjU2IHN0YXJ0ZWRBdAogICAgKSB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgYXVjdGlvbi5zZWxsZXIsCiAgICAgICAgICAgIGF1Y3Rpb24uc3RhcnRpbmdQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5lbmRpbmdQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5kdXJhdGlvbiwKICAgICAgICAgICAgYXVjdGlvbi5zdGFydGVkQXQKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdGhlIGN1cnJlbnQgcHJpY2Ugb2YgYW4gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0aGUgdG9rZW4gcHJpY2Ugd2UgYXJlIGNoZWNraW5nLgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFByaWNlKHVpbnQyNTYgX3Rva2VuSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UoYXVjdGlvbik7CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBDbG9jayBhdWN0aW9uIG1vZGlmaWVkIGZvciBzYWxlIG9mIGZpZ2h0ZXJzCmNvbnRyYWN0IFNhbGVDbG9ja0F1Y3Rpb24gaXMgQ2xvY2tBdWN0aW9uIHsKCiAgICAvLyBAZGV2IFNhbml0eSBjaGVjayB0aGF0IGFsbG93cyB1cyB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgcG9pbnRpbmcgdG8gdGhlCiAgICAvLyAgcmlnaHQgYXVjdGlvbiBpbiBvdXIgc2V0U2FsZUF1Y3Rpb25BZGRyZXNzKCkgY2FsbC4KICAgIGJvb2wgcHVibGljIGlzU2FsZUNsb2NrQXVjdGlvbiA9IHRydWU7CiAgICAKICAgIC8vIFRyYWNrcyBsYXN0IDQgc2FsZSBwcmljZSBvZiBnZW4wIGZpZ2h0ZXIgc2FsZXMKICAgIHVpbnQyNTYgcHVibGljIGdlbjBTYWxlQ291bnQ7CiAgICB1aW50MjU2WzRdIHB1YmxpYyBsYXN0R2VuMFNhbGVQcmljZXM7CgogICAgLy8gRGVsZWdhdGUgY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIFNhbGVDbG9ja0F1Y3Rpb24oYWRkcmVzcyBfbmZ0QWRkciwgdWludDI1NiBfY3V0KSBwdWJsaWMKICAgICAgICBDbG9ja0F1Y3Rpb24oX25mdEFkZHIsIF9jdXQpIHt9CgogICAgLy8vIEBkZXYgQ3JlYXRlcyBhbmQgYmVnaW5zIGEgbmV3IGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gdG8gYXVjdGlvbiwgc2VuZGVyIG11c3QgYmUgb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zdGFydGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBiZWdpbm5pbmcgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2VuZGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBlbmQgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2R1cmF0aW9uIC0gTGVuZ3RoIG9mIGF1Y3Rpb24gKGluIHNlY29uZHMpLgogICAgLy8vIEBwYXJhbSBfc2VsbGVyIC0gU2VsbGVyLCBpZiBub3QgdGhlIG1lc3NhZ2Ugc2VuZGVyCiAgICBmdW5jdGlvbiBjcmVhdGVBdWN0aW9uKAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQsCiAgICAgICAgdWludDI1NiBfc3RhcnRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9lbmRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9kdXJhdGlvbiwKICAgICAgICBhZGRyZXNzIF9zZWxsZXIKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICBjYW5CZVN0b3JlZFdpdGgxMjhCaXRzKF9zdGFydGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDEyOEJpdHMoX2VuZGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDY0Qml0cyhfZHVyYXRpb24pCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJlc3Mobm9uRnVuZ2libGVDb250cmFjdCkpOwogICAgICAgIF9lc2Nyb3coX3NlbGxlciwgX3Rva2VuSWQpOwogICAgICAgIEF1Y3Rpb24gbWVtb3J5IGF1Y3Rpb24gPSBBdWN0aW9uKAogICAgICAgICAgICBfc2VsbGVyLAogICAgICAgICAgICB1aW50MTI4KF9zdGFydGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDEyOChfZW5kaW5nUHJpY2UpLAogICAgICAgICAgICB1aW50NjQoX2R1cmF0aW9uKSwKICAgICAgICAgICAgdWludDY0KG5vdykKICAgICAgICApOwogICAgICAgIF9hZGRBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uKTsKICAgIH0KCiAgICAvLy8gQGRldiBVcGRhdGVzIGxhc3RTYWxlUHJpY2UgaWYgc2VsbGVyIGlzIHRoZSBuZnQgY29udHJhY3QKICAgIC8vLyBPdGhlcndpc2UsIHdvcmtzIHRoZSBzYW1lIGFzIGRlZmF1bHQgYmlkIG1ldGhvZC4KICAgIGZ1bmN0aW9uIGJpZCh1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICAvLyBfYmlkIHZlcmlmaWVzIHRva2VuIElEIHNpemUKICAgICAgICBhZGRyZXNzIHNlbGxlciA9IHRva2VuSWRUb0F1Y3Rpb25bX3Rva2VuSWRdLnNlbGxlcjsKICAgICAgICB1aW50MjU2IHByaWNlID0gX2JpZChfdG9rZW5JZCwgbXNnLnZhbHVlKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3Rva2VuSWQpOwoKICAgICAgICAvLyBJZiBub3QgYSBnZW4wIGF1Y3Rpb24sIGV4aXQKICAgICAgICBpZiAoc2VsbGVyID09IGFkZHJlc3Mobm9uRnVuZ2libGVDb250cmFjdCkpIHsKICAgICAgICAgICAgLy8gVHJhY2sgZ2VuMCBzYWxlIHByaWNlcwogICAgICAgICAgICBsYXN0R2VuMFNhbGVQcmljZXNbZ2VuMFNhbGVDb3VudCAlIDRdID0gcHJpY2U7CiAgICAgICAgICAgIGdlbjBTYWxlQ291bnQrKzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXZlcmFnZUdlbjBTYWxlUHJpY2UoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBzdW0gPSAwOwogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgICAgICBzdW0gKz0gbGFzdEdlbjBTYWxlUHJpY2VzW2ldOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VtIC8gNDsKICAgIH0KCn0KCgovLy8gQHRpdGxlIEEgZmFjZXQgb2YgRmlnaHRlckNvcmUgdGhhdCBtYW5hZ2VzIHNwZWNpYWwgYWNjZXNzIHByaXZpbGVnZXMuCmNvbnRyYWN0IEZpZ2h0ZXJBY2Nlc3NDb250cm9sIHsKICAgIC8vLyBAZGV2IEVtaXRlZCB3aGVuIGNvbnRyYWN0IGlzIHVwZ3JhZGVkCiAgICBldmVudCBDb250cmFjdFVwZ3JhZGUoYWRkcmVzcyBuZXdDb250cmFjdCk7CgogICAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGNmb0FkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBjb29BZGRyZXNzOwoKICAgIC8vIEBkZXYgS2VlcHMgdHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaXMgcGF1c2VkLiBXaGVuIHRoYXQgaXMgdHJ1ZSwgbW9zdCBhY3Rpb25zIGFyZSBibG9ja2VkCiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICBtb2RpZmllciBvbmx5Q0VPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlDRk8oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNmb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUNPTygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5Q0xldmVsKCkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjZm9BZGRyZXNzCiAgICAgICAgKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENFTyhhZGRyZXNzIF9uZXdDRU8pIHB1YmxpYyBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDRU8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNlb0FkZHJlc3MgPSBfbmV3Q0VPOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENGTyhhZGRyZXNzIF9uZXdDRk8pIHB1YmxpYyBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDRk8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNmb0FkZHJlc3MgPSBfbmV3Q0ZPOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENPTyhhZGRyZXNzIF9uZXdDT08pIHB1YmxpYyBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDT08gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNvb0FkZHJlc3MgPSBfbmV3Q09POwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIGNmb0FkZHJlc3MudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCgogICAgLyoqKiBQYXVzYWJsZSBmdW5jdGlvbmFsaXR5IGFkYXB0ZWQgZnJvbSBPcGVuWmVwcGVsaW4gKioqLwoKICAgIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBNb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuUGF1c2VkIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXVzZSgpIHB1YmxpYyBvbmx5Q0xldmVsIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdW5wYXVzZSgpIHB1YmxpYyBvbmx5Q0VPIHdoZW5QYXVzZWQgewogICAgICAgIC8vIGNhbid0IHVucGF1c2UgaWYgY29udHJhY3Qgd2FzIHVwZ3JhZGVkCiAgICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICB9Cn0KCgovLy8gQHRpdGxlIEJhc2UgY29udHJhY3QgZm9yIENyeXB0b0ZpZ2h0ZXJzLiBIb2xkcyBhbGwgY29tbW9uIHN0cnVjdHMsIGV2ZW50cyBhbmQgYmFzZSB2YXJpYWJsZXMuCmNvbnRyYWN0IEZpZ2h0ZXJCYXNlIGlzIEZpZ2h0ZXJBY2Nlc3NDb250cm9sIHsKICAgIC8qKiogRVZFTlRTICoqKi8KCiAgICBldmVudCBGaWdodGVyQ3JlYXRlZChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQyNTYgZmlnaHRlcklkLCB1aW50MjU2IGdlbmVzKTsKCiAgICAvLy8gQGRldiBUcmFuc2ZlciBldmVudCBhcyBkZWZpbmVkIGluIGN1cnJlbnQgZHJhZnQgb2YgRVJDNzIxLiBFbWl0dGVkIGV2ZXJ5IHRpbWUgYSBmaWdodGVyCiAgICAvLy8gIG93bmVyc2hpcCBpcyBhc3NpZ25lZCwgaW5jbHVkaW5nIG5ld2x5IGNyZWF0ZWQgZmlnaHRlcnMuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCk7CgogICAgLyoqKiBEQVRBIFRZUEVTICoqKi8KCiAgICAvLy8gQGRldiBUaGUgbWFpbiBGaWdodGVyIHN0cnVjdC4gRXZlcnkgZmlnaHRlciBpbiBDcnlwdG9GaWdodGVycyBpcyByZXByZXNlbnRlZCBieSBhIGNvcHkKICAgIC8vLyAgb2YgdGhpcyBzdHJ1Y3R1cmUuCiAgICBzdHJ1Y3QgRmlnaHRlciB7CiAgICAgICAgLy8gVGhlIEZpZ2h0ZXIncyBnZW5ldGljIGNvZGUgaXMgcGFja2VkIGludG8gdGhlc2UgMjU2LWJpdHMuCiAgICAgICAgLy8gQSBmaWdodGVyJ3MgZ2VuZXMgbmV2ZXIgY2hhbmdlLgogICAgICAgIHVpbnQyNTYgZ2VuZXM7CgogICAgICAgIC8vIFRoZSBtaW5pbXVtIHRpbWVzdGFtcCBhZnRlciB3aGljaCB0aGlzIGZpZ2h0ZXIgY2FuIHdpbiBhIHByaXplIGZpZ2h0ZXIgYWdhaW4KICAgICAgICB1aW50NjQgcHJpemVDb29sZG93bkVuZFRpbWU7CgogICAgICAgIC8vIFRoZSBtaW5pbXVtIHRpbWVzdGFtcCBhZnRlciB3aGljaCB0aGlzIGZpZ2h0ZXIgY2FuIGVuZ2FnZSBpbiBiYXR0bGUgYWdhaW4KICAgICAgICB1aW50NjQgYmF0dGxlQ29vbGRvd25FbmRUaW1lOwoKICAgICAgICAvLyBiYXR0bGUgZXhwZXJpZW5jZQogICAgICAgIHVpbnQzMiBleHBlcmllbmNlOwoKICAgICAgICAvLyBTZXQgdG8gdGhlIGluZGV4IHRoYXQgcmVwcmVzZW50cyB0aGUgY3VycmVudCBjb29sZG93biBkdXJhdGlvbiBmb3IgdGhpcyBGaWdodGVyLgogICAgICAgIC8vIEluY3JlbWVudGVkIGJ5IG9uZSBmb3IgZWFjaCBzdWNjZXNzZnVsIHByaXplIHdvbiBpbiBiYXR0bGUKICAgICAgICB1aW50MTYgcHJpemVDb29sZG93bkluZGV4OwoKICAgICAgICB1aW50MTYgYmF0dGxlc0ZvdWdodDsKICAgICAgICB1aW50MTYgYmF0dGxlc1dvbjsKCiAgICAgICAgLy8gVGhlICJnZW5lcmF0aW9uIG51bWJlciIgb2YgdGhpcyBmaWdodGVyLiBGaWdodGVycyBtaW50ZWQgYnkgdGhlIENGIGNvbnRyYWN0CiAgICAgICAgLy8gZm9yIHNhbGUgYXJlIGNhbGxlZCAiZ2VuMCIgYW5kIGhhdmUgYSBnZW5lcmF0aW9uIG51bWJlciBvZiAwLgogICAgICAgIHVpbnQxNiBnZW5lcmF0aW9uOwoKICAgICAgICB1aW50OCBkZXh0ZXJpdHk7CiAgICAgICAgdWludDggc3RyZW5ndGg7CiAgICAgICAgdWludDggdml0YWxpdHk7CiAgICAgICAgdWludDggbHVjazsKICAgIH0KCiAgICAvKioqIFNUT1JBR0UgKioqLwoKICAgIC8vLyBAZGV2IEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIEZpZ2h0ZXIgc3RydWN0IGZvciBhbGwgRmlnaHRlcnMgaW4gZXhpc3RlbmNlLiBUaGUgSUQKICAgIC8vLyAgb2YgZWFjaCBmaWdodGVyIGlzIGFjdHVhbGx5IGFuIGluZGV4IGludG8gdGhpcyBhcnJheS4gTm90ZSB0aGF0IElEIDAgaXMgYSBuZWdhZmlnaHRlci4KICAgIC8vLyAgRmlnaHRlciBJRCAwIGlzIGludmFsaWQuCiAgICBGaWdodGVyW10gZmlnaHRlcnM7CgogICAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gZmlnaHRlciBJRHMgdG8gdGhlIGFkZHJlc3MgdGhhdCBvd25zIHRoZW0uIEFsbCBmaWdodGVycyBoYXZlCiAgICAvLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcywgZXZlbiBnZW4wIGZpZ2h0ZXJzIGFyZSBjcmVhdGVkIHdpdGggYSBub24temVybyBvd25lci4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGZpZ2h0ZXJJbmRleFRvT3duZXI7CgogICAgLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBvd25lciBhZGRyZXNzIHRvIGNvdW50IG9mIHRva2VucyB0aGF0IGFkZHJlc3Mgb3ducy4KICAgIC8vICBVc2VkIGludGVybmFsbHkgaW5zaWRlIGJhbGFuY2VPZigpIHRvIHJlc29sdmUgb3duZXJzaGlwIGNvdW50LgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBvd25lcnNoaXBUb2tlbkNvdW50OwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIEZpZ2h0ZXJJRHMgdG8gYW4gYWRkcmVzcyB0aGF0IGhhcyBiZWVuIGFwcHJvdmVkIHRvIGNhbGwKICAgIC8vLyAgdHJhbnNmZXJGcm9tKCkuIEEgemVybyB2YWx1ZSBtZWFucyBubyBhcHByb3ZhbCBpcyBvdXRzdGFuZGluZy4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGZpZ2h0ZXJJbmRleFRvQXBwcm92ZWQ7CiAgICAKICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgICAgIC8vIHNpbmNlIHRoZSBudW1iZXIgb2YgZmlnaHRlcnMgaXMgY2FwcGVkIHRvIDJeMzIKICAgICAgICAvLyB0aGVyZSBpcyBubyB3YXkgdG8gb3ZlcmZsb3cgdGhpcwogICAgICAgIG93bmVyc2hpcFRva2VuQ291bnRbX3RvXSsrOwogICAgICAgIGZpZ2h0ZXJJbmRleFRvT3duZXJbX3Rva2VuSWRdID0gX3RvOwoKICAgICAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lcnNoaXBUb2tlbkNvdW50W19mcm9tXS0tOwogICAgICAgICAgICBkZWxldGUgZmlnaHRlckluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICAgICAgfQoKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8gV2lsbCBnZW5lcmF0ZSBib3RoIGEgRmlnaHRlckNyZWF0ZWQgZXZlbnQKICAgIGZ1bmN0aW9uIF9jcmVhdGVGaWdodGVyKAogICAgICAgIHVpbnQxNiBfZ2VuZXJhdGlvbiwKICAgICAgICB1aW50MjU2IF9nZW5lcywKICAgICAgICB1aW50OCBfZGV4dGVyaXR5LAogICAgICAgIHVpbnQ4IF9zdHJlbmd0aCwKICAgICAgICB1aW50OCBfdml0YWxpdHksCiAgICAgICAgdWludDggX2x1Y2ssCiAgICAgICAgYWRkcmVzcyBfb3duZXIKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgRmlnaHRlciBtZW1vcnkgX2ZpZ2h0ZXIgPSBGaWdodGVyKHsKICAgICAgICAgICAgZ2VuZXM6IF9nZW5lcywKICAgICAgICAgICAgcHJpemVDb29sZG93bkVuZFRpbWU6IDAsCiAgICAgICAgICAgIGJhdHRsZUNvb2xkb3duRW5kVGltZTogMCwKICAgICAgICAgICAgcHJpemVDb29sZG93bkluZGV4OiAwLAogICAgICAgICAgICBiYXR0bGVzRm91Z2h0OiAwLAogICAgICAgICAgICBiYXR0bGVzV29uOiAwLAogICAgICAgICAgICBleHBlcmllbmNlOiAwLAogICAgICAgICAgICBnZW5lcmF0aW9uOiBfZ2VuZXJhdGlvbiwKICAgICAgICAgICAgZGV4dGVyaXR5OiBfZGV4dGVyaXR5LAogICAgICAgICAgICBzdHJlbmd0aDogX3N0cmVuZ3RoLAogICAgICAgICAgICB2aXRhbGl0eTogX3ZpdGFsaXR5LAogICAgICAgICAgICBsdWNrOiBfbHVjawogICAgICAgIH0pOwogICAgICAgIHVpbnQyNTYgbmV3RmlnaHRlcklkID0gZmlnaHRlcnMucHVzaChfZmlnaHRlcikgLSAxOwoKICAgICAgICByZXF1aXJlKG5ld0ZpZ2h0ZXJJZCA8PSA0Mjk0OTY3Mjk1KTsKCiAgICAgICAgRmlnaHRlckNyZWF0ZWQoX293bmVyLCBuZXdGaWdodGVySWQsIF9maWdodGVyLmdlbmVzKTsKCiAgICAgICAgX3RyYW5zZmVyKDAsIF9vd25lciwgbmV3RmlnaHRlcklkKTsKCiAgICAgICAgcmV0dXJuIG5ld0ZpZ2h0ZXJJZDsKICAgIH0KfQoKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBOb24tRnVuZ2libGUgVG9rZW5zCmNvbnRyYWN0IEVSQzcyMSB7CiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgaW5kZXhlZCB0b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCk7CgogICAgLy8gT3B0aW9uYWwKICAgIC8vIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgbmFtZSk7CiAgICAvLyBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgc3ltYm9sKTsKICAgIC8vIGZ1bmN0aW9uIHRva2VuT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG9rZW5JZCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk1ldGFkYXRhKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBpbmZvVXJsKTsKfQoKLy8vIEB0aXRsZSBUaGUgZmFjZXQgb2YgdGhlIENyeXB0b0ZpZ2h0ZXJzIGNvcmUgY29udHJhY3QgdGhhdCBtYW5hZ2VzIG93bmVyc2hpcCwgRVJDLTcyMSAoZHJhZnQpIGNvbXBsaWFudC4KY29udHJhY3QgRmlnaHRlck93bmVyc2hpcCBpcyBGaWdodGVyQmFzZSwgRVJDNzIxIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJDcnlwdG9GaWdodGVycyI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJDRiI7CgogICAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IENoZWNrcyBpZiBhIGdpdmVuIGFkZHJlc3MgaXMgdGhlIGN1cnJlbnQgb3duZXIgb2YgYSBwYXJ0aWN1bGFyIEZpZ2h0ZXIuCiAgICAvLy8gQHBhcmFtIF9jbGFpbWFudCB0aGUgYWRkcmVzcyB3ZSBhcmUgdmFsaWRhdGluZyBhZ2FpbnN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBmaWdodGVyIGlkLCBvbmx5IHZhbGlkIHdoZW4gPiAwCiAgICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIF9jbGFpbWFudCwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGZpZ2h0ZXJJbmRleFRvT3duZXJbX3Rva2VuSWRdID09IF9jbGFpbWFudDsKICAgIH0KCiAgICAvLy8gQGRldiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGN1cnJlbnRseSBoYXMgdHJhbnNmZXJBcHByb3ZhbCBmb3IgYSBwYXJ0aWN1bGFyIEZpZ2h0ZXIuCiAgICAvLy8gQHBhcmFtIF9jbGFpbWFudCB0aGUgYWRkcmVzcyB3ZSBhcmUgY29uZmlybWluZyBmaWdodGVyIGlzIGFwcHJvdmVkIGZvci4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgZmlnaHRlciBpZCwgb25seSB2YWxpZCB3aGVuID4gMAogICAgZnVuY3Rpb24gX2FwcHJvdmVkRm9yKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZmlnaHRlckluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPT0gX2NsYWltYW50OwogICAgfQoKICAgIC8vLyBAZGV2IE1hcmtzIGFuIGFkZHJlc3MgYXMgYmVpbmcgYXBwcm92ZWQgZm9yIHRyYW5zZmVyRnJvbSgpLCBvdmVyd3JpdGluZyBhbnkgcHJldmlvdXMKICAgIC8vLyAgYXBwcm92YWwuIFNldHRpbmcgX2FwcHJvdmVkIHRvIGFkZHJlc3MoMCkgY2xlYXJzIGFsbCB0cmFuc2ZlciBhcHByb3ZhbC4KICAgIC8vLyAgTk9URTogX2FwcHJvdmUoKSBkb2VzIE5PVCBzZW5kIHRoZSBBcHByb3ZhbCBldmVudC4KICAgIGZ1bmN0aW9uIF9hcHByb3ZlKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgX2FwcHJvdmVkKSBpbnRlcm5hbCB7CiAgICAgICAgZmlnaHRlckluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPSBfYXBwcm92ZWQ7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIGEgZmlnaHRlciBvd25lZCBieSB0aGlzIGNvbnRyYWN0IHRvIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgIC8vLyAgVXNlZCB0byByZXNjdWUgbG9zdCBmaWdodGVycy4gKFRoZXJlIGlzIG5vICJwcm9wZXIiIGZsb3cgd2hlcmUgdGhpcyBjb250cmFjdAogICAgLy8vICBzaG91bGQgYmUgdGhlIG93bmVyIG9mIGFueSBGaWdodGVyLiBUaGlzIGZ1bmN0aW9uIGV4aXN0cyBmb3IgdXMgdG8gcmVhc3NpZ24KICAgIC8vLyAgdGhlIG93bmVyc2hpcCBvZiBGaWdodGVycyB0aGF0IHVzZXJzIG1heSBoYXZlIGFjY2lkZW50YWxseSBzZW50IHRvIG91ciBhZGRyZXNzLikKICAgIC8vLyBAcGFyYW0gX2ZpZ2h0ZXJJZCAtIElEIG9mIGZpZ2h0ZXIKICAgIC8vLyBAcGFyYW0gX3JlY2lwaWVudCAtIEFkZHJlc3MgdG8gc2VuZCB0aGUgZmlnaHRlciB0bwogICAgZnVuY3Rpb24gcmVzY3VlTG9zdEZpZ2h0ZXIodWludDI1NiBfZmlnaHRlcklkLCBhZGRyZXNzIF9yZWNpcGllbnQpIHB1YmxpYyBvbmx5Q09PIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHJlcXVpcmUoX293bnModGhpcywgX2ZpZ2h0ZXJJZCkpOwogICAgICAgIF90cmFuc2Zlcih0aGlzLCBfcmVjaXBpZW50LCBfZmlnaHRlcklkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmlnaHRlcnMgb3duZWQgYnkgYSBzcGVjaWZpYyBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIGFkZHJlc3MgdG8gY2hlY2suCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgY291bnQpIHsKICAgICAgICByZXR1cm4gb3duZXJzaGlwVG9rZW5Db3VudFtfb3duZXJdOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVycyBhIEZpZ2h0ZXIgdG8gYW5vdGhlciBhZGRyZXNzLiBJZiB0cmFuc2ZlcnJpbmcgdG8gYSBzbWFydAogICAgLy8vICBjb250cmFjdCBiZSBWRVJZIENBUkVGVUwgdG8gZW5zdXJlIHRoYXQgaXQgaXMgYXdhcmUgb2YgRVJDLTcyMSAob3IKICAgIC8vLyAgQ3J5cHRvRmlnaHRlcnMgc3BlY2lmaWNhbGx5KSBvciB5b3VyIEZpZ2h0ZXIgbWF5IGJlIGxvc3QgZm9yZXZlci4gU2VyaW91c2x5LgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudCwgY2FuIGJlIGEgdXNlciBvciBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBGaWdodGVyIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoCiAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgdWludDI1NiBfdG9rZW5JZAogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHdoZW5Ob3RQYXVzZWQKICAgIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBHcmFudCBhbm90aGVyIGFkZHJlc3MgdGhlIHJpZ2h0IHRvIHRyYW5zZmVyIGEgc3BlY2lmaWMgRmlnaHRlciB2aWEKICAgIC8vLyAgdHJhbnNmZXJGcm9tKCkuIFRoaXMgaXMgdGhlIHByZWZlcnJlZCBmbG93IGZvciB0cmFuc2ZlcmluZyBORlRzIHRvIGNvbnRyYWN0cy4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogICAgLy8vICBjbGVhciBhbGwgYXBwcm92YWxzLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIEZpZ2h0ZXIgdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogICAgZnVuY3Rpb24gYXBwcm92ZSgKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF90b2tlbklkCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKCiAgICAgICAgX2FwcHJvdmUoX3Rva2VuSWQsIF90byk7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVyIGEgRmlnaHRlciBvd25lZCBieSBhbm90aGVyIGFkZHJlc3MsIGZvciB3aGljaCB0aGUgY2FsbGluZyBhZGRyZXNzCiAgICAvLy8gIGhhcyBwcmV2aW91c2x5IGJlZW4gZ3JhbnRlZCB0cmFuc2ZlciBhcHByb3ZhbCBieSB0aGUgb3duZXIuCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGUgRmlnaHRlciB0byBiZSB0cmFuc2ZlcmVkLgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCBzaG91bGQgdGFrZSBvd25lcnNoaXAgb2YgdGhlIEZpZ2h0ZXIuIENhbiBiZSBhbnkgYWRkcmVzcywKICAgIC8vLyAgaW5jbHVkaW5nIHRoZSBjYWxsZXIuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgRmlnaHRlciB0byBiZSB0cmFuc2ZlcnJlZC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgcmVxdWlyZShfYXBwcm92ZWRGb3IobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgICAgICByZXF1aXJlKF9vd25zKF9mcm9tLCBfdG9rZW5JZCkpOwoKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBmaWdodGVycy5sZW5ndGggLSAxOwogICAgfQoKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYWRkcmVzcyBvd25lcikKICAgIHsKICAgICAgICBvd25lciA9IGZpZ2h0ZXJJbmRleFRvT3duZXJbX3Rva2VuSWRdOwoKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJldHVybnMgdGhlIG50aCBGaWdodGVyIGFzc2lnbmVkIHRvIGFuIGFkZHJlc3MsIHdpdGggbiBzcGVjaWZpZWQgYnkgdGhlCiAgICAvLy8gIF9pbmRleCBhcmd1bWVudC4KICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBvd25lciB3aG9zZSBGaWdodGVycyB3ZSBhcmUgaW50ZXJlc3RlZCBpbi4KICAgIC8vLyBAcGFyYW0gX2luZGV4IFRoZSB6ZXJvLWJhc2VkIGluZGV4IG9mIHRoZSBmaWdodGVyIHdpdGhpbiB0aGUgb3duZXIncyBsaXN0IG9mIGZpZ2h0ZXJzLgogICAgLy8vICBNdXN0IGJlIGxlc3MgdGhhbiBiYWxhbmNlT2YoX293bmVyKS4KICAgIC8vLyBAZGV2IFRoaXMgbWV0aG9kIE1VU1QgTkVWRVIgYmUgY2FsbGVkIGJ5IHNtYXJ0IGNvbnRyYWN0IGNvZGUuIEl0IHdpbGwgYWxtb3N0CiAgICAvLy8gIGNlcnRhaW5seSBibG93IHBhc3QgdGhlIGJsb2NrIGdhcyBsaW1pdCBvbmNlIHRoZXJlIGFyZSBhIGxhcmdlIG51bWJlciBvZgogICAgLy8vICBGaWdodGVycyBpbiBleGlzdGVuY2UuIEV4aXN0cyBvbmx5IHRvIGFsbG93IG9mZi1jaGFpbiBxdWVyaWVzIG9mIG93bmVyc2hpcC4KICAgIC8vLyAgT3B0aW9uYWwgbWV0aG9kIGZvciBFUkMtNzIxLgogICAgZnVuY3Rpb24gdG9rZW5zT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQyNTYgdG9rZW5JZCkKICAgIHsKICAgICAgICB1aW50MjU2IGNvdW50ID0gMDsKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDE7IGkgPD0gdG90YWxTdXBwbHkoKTsgaSsrKSB7CiAgICAgICAgICAgIGlmIChmaWdodGVySW5kZXhUb093bmVyW2ldID09IF9vd25lcikgewogICAgICAgICAgICAgICAgaWYgKGNvdW50ID09IF9pbmRleCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldmVydCgpOwogICAgfQp9CgoKLy8gdGhpcyBoZWxwcyB3aXRoIGJhdHRsZSBmdW5jdGlvbmFsaXR5Ci8vIGl0IGdpdmVzIHRoZSBhYmlsaXR5IHRvIGFuIGV4dGVybmFsIGNvbnRyYWN0IHRvIGRvIHRoZSBmb2xsb3dpbmc6Ci8vICogY3JlYXRlIGZpZ2h0ZXJzIGFzIHJld2FyZHMKLy8gKiB1cGRhdGUgZmlnaHRlciBzdGF0cwovLyAqIHVwZGF0ZSBjb29sZG93biBkYXRhIGZvciBuZXh0IHByaXplL2JhdHRsZQpjb250cmFjdCBGaWdodGVyQmF0dGxlIGlzIEZpZ2h0ZXJPd25lcnNoaXAgewogICAgZXZlbnQgRmlnaHRlclVwZGF0ZWQodWludDI1NiBmaWdodGVySWQpOwogICAgCiAgICAvLy8gQGRldiBUaGUgYWRkcmVzcyBvZiB0aGUgc2libGluZyBjb250cmFjdCB0aGF0IGhhbmRsZXMgYmF0dGxlcwogICAgYWRkcmVzcyBwdWJsaWMgYmF0dGxlQ29udHJhY3RBZGRyZXNzOwoKICAgIC8vLyBAZGV2IElmIHNldCB0byBmYWxzZSB0aGUgYGJhdHRsZUNvbnRyYWN0QWRkcmVzc2AgY2FuIG5ldmVyIGJlIHVwZGF0ZWQgYWdhaW4KICAgIGJvb2wgcHVibGljIGJhdHRsZUNvbnRyYWN0QWRkcmVzc0NhbkJlVXBkYXRlZCA9IHRydWU7CiAgICAKICAgIGZ1bmN0aW9uIHNldEJhdHRsZUFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlDRU8gewogICAgICAgIHJlcXVpcmUoYmF0dGxlQ29udHJhY3RBZGRyZXNzQ2FuQmVVcGRhdGVkID09IHRydWUpOwoKICAgICAgICBiYXR0bGVDb250cmFjdEFkZHJlc3MgPSBfYWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBmb3JldmVyQmxvY2tCYXR0bGVBZGRyZXNzVXBkYXRlKCkgcHVibGljIG9ubHlDRU8gewogICAgICAgIGJhdHRsZUNvbnRyYWN0QWRkcmVzc0NhbkJlVXBkYXRlZCA9IGZhbHNlOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5QmF0dGxlQ29udHJhY3QoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGJhdHRsZUNvbnRyYWN0QWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY3JlYXRlUHJpemVGaWdodGVyKAogICAgICAgIHVpbnQxNiBfZ2VuZXJhdGlvbiwKICAgICAgICB1aW50MjU2IF9nZW5lcywKICAgICAgICB1aW50OCBfZGV4dGVyaXR5LAogICAgICAgIHVpbnQ4IF9zdHJlbmd0aCwKICAgICAgICB1aW50OCBfdml0YWxpdHksCiAgICAgICAgdWludDggX2x1Y2ssCiAgICAgICAgYWRkcmVzcyBfb3duZXIKICAgICkgcHVibGljIG9ubHlCYXR0bGVDb250cmFjdCB7CiAgICAgICAgcmVxdWlyZShfZ2VuZXJhdGlvbiA+IDApOwogICAgICAgIAogICAgICAgIF9jcmVhdGVGaWdodGVyKF9nZW5lcmF0aW9uLCBfZ2VuZXMsIF9kZXh0ZXJpdHksIF9zdHJlbmd0aCwgX3ZpdGFsaXR5LCBfbHVjaywgX293bmVyKTsKICAgIH0KICAgIAogICAgLy8gVXBkYXRlIGZpZ2h0ZXIgZnVuY3Rpb25zCiAgICAKICAgIC8vIFRoZSBsb2dpYyBmb3IgY3JlYXRpbmcgc28gbWFueSBkaWZmZXJlbnQgZnVuY3Rpb25zIGlzIHRoYXQgaXQgd2lsbCBiZQogICAgLy8gZWFzaWVyIHRvIG9wdGltaXNlIGZvciBnYXMgY29zdHMgaGF2aW5nIGFsbCB0aGVzZSBhdmFpbGFibGUgdG8gdXMuCiAgICAvLyBUaGUgY29udHJhY3QgZGVwbG95bWVudCB3aWxsIGJlIG1vcmUgZXhwZW5zaXZlLCBidXQgZnV0dXJlIGNvc3RzIGNhbiBiZQogICAgLy8gY2hlYXBlci4KICAgIGZ1bmN0aW9uIHVwZGF0ZUZpZ2h0ZXIoCiAgICAgICAgdWludDI1NiBfZmlnaHRlcklkLAogICAgICAgIHVpbnQ4IF9kZXh0ZXJpdHksCiAgICAgICAgdWludDggX3N0cmVuZ3RoLAogICAgICAgIHVpbnQ4IF92aXRhbGl0eSwKICAgICAgICB1aW50OCBfbHVjaywKICAgICAgICB1aW50MzIgX2V4cGVyaWVuY2UsCiAgICAgICAgdWludDY0IF9wcml6ZUNvb2xkb3duRW5kVGltZSwKICAgICAgICB1aW50MTYgX3ByaXplQ29vbGRvd25JbmRleCwKICAgICAgICB1aW50NjQgX2JhdHRsZUNvb2xkb3duRW5kVGltZSwKICAgICAgICB1aW50MTYgX2JhdHRsZXNGb3VnaHQsCiAgICAgICAgdWludDE2IF9iYXR0bGVzV29uCiAgICApCiAgICAgICAgcHVibGljIG9ubHlCYXR0bGVDb250cmFjdAogICAgewogICAgICAgIEZpZ2h0ZXIgc3RvcmFnZSBmaWdodGVyID0gZmlnaHRlcnNbX2ZpZ2h0ZXJJZF07CiAgICAgICAgCiAgICAgICAgZmlnaHRlci5kZXh0ZXJpdHkgPSBfZGV4dGVyaXR5OwogICAgICAgIGZpZ2h0ZXIuc3RyZW5ndGggPSBfc3RyZW5ndGg7CiAgICAgICAgZmlnaHRlci52aXRhbGl0eSA9IF92aXRhbGl0eTsKICAgICAgICBmaWdodGVyLmx1Y2sgPSBfbHVjazsKICAgICAgICBmaWdodGVyLmV4cGVyaWVuY2UgPSBfZXhwZXJpZW5jZTsKICAgICAgICAKICAgICAgICBmaWdodGVyLnByaXplQ29vbGRvd25FbmRUaW1lID0gX3ByaXplQ29vbGRvd25FbmRUaW1lOwogICAgICAgIGZpZ2h0ZXIucHJpemVDb29sZG93bkluZGV4ID0gX3ByaXplQ29vbGRvd25JbmRleDsKICAgICAgICBmaWdodGVyLmJhdHRsZUNvb2xkb3duRW5kVGltZSA9IF9iYXR0bGVDb29sZG93bkVuZFRpbWU7CiAgICAgICAgZmlnaHRlci5iYXR0bGVzRm91Z2h0ID0gX2JhdHRsZXNGb3VnaHQ7CiAgICAgICAgZmlnaHRlci5iYXR0bGVzV29uID0gX2JhdHRsZXNXb247CiAgICAgICAgCiAgICAgICAgRmlnaHRlclVwZGF0ZWQoX2ZpZ2h0ZXJJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZUZpZ2h0ZXJTdGF0cygKICAgICAgICB1aW50MjU2IF9maWdodGVySWQsCiAgICAgICAgdWludDggX2RleHRlcml0eSwKICAgICAgICB1aW50OCBfc3RyZW5ndGgsCiAgICAgICAgdWludDggX3ZpdGFsaXR5LAogICAgICAgIHVpbnQ4IF9sdWNrLAogICAgICAgIHVpbnQzMiBfZXhwZXJpZW5jZQogICAgKQogICAgICAgIHB1YmxpYyBvbmx5QmF0dGxlQ29udHJhY3QKICAgIHsKICAgICAgICBGaWdodGVyIHN0b3JhZ2UgZmlnaHRlciA9IGZpZ2h0ZXJzW19maWdodGVySWRdOwogICAgICAgIAogICAgICAgIGZpZ2h0ZXIuZGV4dGVyaXR5ID0gX2RleHRlcml0eTsKICAgICAgICBmaWdodGVyLnN0cmVuZ3RoID0gX3N0cmVuZ3RoOwogICAgICAgIGZpZ2h0ZXIudml0YWxpdHkgPSBfdml0YWxpdHk7CiAgICAgICAgZmlnaHRlci5sdWNrID0gX2x1Y2s7CiAgICAgICAgZmlnaHRlci5leHBlcmllbmNlID0gX2V4cGVyaWVuY2U7CiAgICAgICAgCiAgICAgICAgRmlnaHRlclVwZGF0ZWQoX2ZpZ2h0ZXJJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZUZpZ2h0ZXJCYXR0bGVTdGF0cygKICAgICAgICB1aW50MjU2IF9maWdodGVySWQsCiAgICAgICAgdWludDY0IF9wcml6ZUNvb2xkb3duRW5kVGltZSwKICAgICAgICB1aW50MTYgX3ByaXplQ29vbGRvd25JbmRleCwKICAgICAgICB1aW50NjQgX2JhdHRsZUNvb2xkb3duRW5kVGltZSwKICAgICAgICB1aW50MTYgX2JhdHRsZXNGb3VnaHQsCiAgICAgICAgdWludDE2IF9iYXR0bGVzV29uCiAgICApCiAgICAgICAgcHVibGljIG9ubHlCYXR0bGVDb250cmFjdAogICAgewogICAgICAgIEZpZ2h0ZXIgc3RvcmFnZSBmaWdodGVyID0gZmlnaHRlcnNbX2ZpZ2h0ZXJJZF07CiAgICAgICAgCiAgICAgICAgZmlnaHRlci5wcml6ZUNvb2xkb3duRW5kVGltZSA9IF9wcml6ZUNvb2xkb3duRW5kVGltZTsKICAgICAgICBmaWdodGVyLnByaXplQ29vbGRvd25JbmRleCA9IF9wcml6ZUNvb2xkb3duSW5kZXg7CiAgICAgICAgZmlnaHRlci5iYXR0bGVDb29sZG93bkVuZFRpbWUgPSBfYmF0dGxlQ29vbGRvd25FbmRUaW1lOwogICAgICAgIGZpZ2h0ZXIuYmF0dGxlc0ZvdWdodCA9IF9iYXR0bGVzRm91Z2h0OwogICAgICAgIGZpZ2h0ZXIuYmF0dGxlc1dvbiA9IF9iYXR0bGVzV29uOwogICAgICAgIAogICAgICAgIEZpZ2h0ZXJVcGRhdGVkKF9maWdodGVySWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVEZXh0ZXJpdHkodWludDI1NiBfZmlnaHRlcklkLCB1aW50OCBfZGV4dGVyaXR5KSBwdWJsaWMgb25seUJhdHRsZUNvbnRyYWN0IHsKICAgICAgICBmaWdodGVyc1tfZmlnaHRlcklkXS5kZXh0ZXJpdHkgPSBfZGV4dGVyaXR5OwogICAgICAgIEZpZ2h0ZXJVcGRhdGVkKF9maWdodGVySWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVTdHJlbmd0aCh1aW50MjU2IF9maWdodGVySWQsIHVpbnQ4IF9zdHJlbmd0aCkgcHVibGljIG9ubHlCYXR0bGVDb250cmFjdCB7CiAgICAgICAgZmlnaHRlcnNbX2ZpZ2h0ZXJJZF0uc3RyZW5ndGggPSBfc3RyZW5ndGg7CiAgICAgICAgRmlnaHRlclVwZGF0ZWQoX2ZpZ2h0ZXJJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZVZpdGFsaXR5KHVpbnQyNTYgX2ZpZ2h0ZXJJZCwgdWludDggX3ZpdGFsaXR5KSBwdWJsaWMgb25seUJhdHRsZUNvbnRyYWN0IHsKICAgICAgICBmaWdodGVyc1tfZmlnaHRlcklkXS52aXRhbGl0eSA9IF92aXRhbGl0eTsKICAgICAgICBGaWdodGVyVXBkYXRlZChfZmlnaHRlcklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdXBkYXRlTHVjayh1aW50MjU2IF9maWdodGVySWQsIHVpbnQ4IF9sdWNrKSBwdWJsaWMgb25seUJhdHRsZUNvbnRyYWN0IHsKICAgICAgICBmaWdodGVyc1tfZmlnaHRlcklkXS5sdWNrID0gX2x1Y2s7CiAgICAgICAgRmlnaHRlclVwZGF0ZWQoX2ZpZ2h0ZXJJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZUV4cGVyaWVuY2UodWludDI1NiBfZmlnaHRlcklkLCB1aW50MzIgX2V4cGVyaWVuY2UpIHB1YmxpYyBvbmx5QmF0dGxlQ29udHJhY3QgewogICAgICAgIGZpZ2h0ZXJzW19maWdodGVySWRdLmV4cGVyaWVuY2UgPSBfZXhwZXJpZW5jZTsKICAgICAgICBGaWdodGVyVXBkYXRlZChfZmlnaHRlcklkKTsKICAgIH0KfQoKLy8vIEB0aXRsZSBIYW5kbGVzIGNyZWF0aW5nIGF1Y3Rpb25zIGZvciBzYWxlIG9mIGZpZ2h0ZXJzLgovLy8gIFRoaXMgd3JhcHBlciBvZiBSZXZlcnNlQXVjdGlvbiBleGlzdHMgb25seSBzbyB0aGF0IHVzZXJzIGNhbiBjcmVhdGUKLy8vICBhdWN0aW9ucyB3aXRoIG9ubHkgb25lIHRyYW5zYWN0aW9uLgpjb250cmFjdCBGaWdodGVyQXVjdGlvbiBpcyBGaWdodGVyQmF0dGxlIHsKICAgIFNhbGVDbG9ja0F1Y3Rpb24gcHVibGljIHNhbGVBdWN0aW9uOwoKICAgIGZ1bmN0aW9uIHNldFNhbGVBdWN0aW9uQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUNFTyB7CiAgICAgICAgU2FsZUNsb2NrQXVjdGlvbiBjYW5kaWRhdGVDb250cmFjdCA9IFNhbGVDbG9ja0F1Y3Rpb24oX2FkZHJlc3MpOwoKICAgICAgICByZXF1aXJlKGNhbmRpZGF0ZUNvbnRyYWN0LmlzU2FsZUNsb2NrQXVjdGlvbigpKTsKCiAgICAgICAgc2FsZUF1Y3Rpb24gPSBjYW5kaWRhdGVDb250cmFjdDsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVTYWxlQXVjdGlvbigKICAgICAgICB1aW50MjU2IF9maWdodGVySWQsCiAgICAgICAgdWludDI1NiBfc3RhcnRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9lbmRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9kdXJhdGlvbgogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHdoZW5Ob3RQYXVzZWQKICAgIHsKICAgICAgICAvLyBBdWN0aW9uIGNvbnRyYWN0IGNoZWNrcyBpbnB1dCBzaXplcwogICAgICAgIC8vIElmIGZpZ2h0ZXIgaXMgYWxyZWFkeSBvbiBhbnkgYXVjdGlvbiwgdGhpcyB3aWxsIHRocm93CiAgICAgICAgLy8gYmVjYXVzZSBpdCB3aWxsIGJlIG93bmVkIGJ5IHRoZSBhdWN0aW9uIGNvbnRyYWN0LgogICAgICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX2ZpZ2h0ZXJJZCkpOwogICAgICAgIF9hcHByb3ZlKF9maWdodGVySWQsIHNhbGVBdWN0aW9uKTsKICAgICAgICAvLyBTYWxlIGF1Y3Rpb24gdGhyb3dzIGlmIGlucHV0cyBhcmUgaW52YWxpZCBhbmQgY2xlYXJzCiAgICAgICAgLy8gdHJhbnNmZXIgYXBwcm92YWwgYWZ0ZXIgZXNjcm93aW5nIHRoZSBmaWdodGVyLgogICAgICAgIHNhbGVBdWN0aW9uLmNyZWF0ZUF1Y3Rpb24oCiAgICAgICAgICAgIF9maWdodGVySWQsCiAgICAgICAgICAgIF9zdGFydGluZ1ByaWNlLAogICAgICAgICAgICBfZW5kaW5nUHJpY2UsCiAgICAgICAgICAgIF9kdXJhdGlvbiwKICAgICAgICAgICAgbXNnLnNlbmRlcgogICAgICAgICk7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRoZSBiYWxhbmNlIG9mIHRoZSBzYWxlIGF1Y3Rpb24gY29udHJhY3QKICAgIC8vLyB0byB0aGUgRmlnaHRlckNvcmUgY29udHJhY3QuIFdlIHVzZSB0d28tc3RlcCB3aXRoZHJhd2FsIHRvCiAgICAvLy8gcHJldmVudCB0d28gdHJhbnNmZXIgY2FsbHMgaW4gdGhlIGF1Y3Rpb24gYmlkIGZ1bmN0aW9uLgogICAgZnVuY3Rpb24gd2l0aGRyYXdBdWN0aW9uQmFsYW5jZXMoKSBleHRlcm5hbCBvbmx5Q09PIHsKICAgICAgICBzYWxlQXVjdGlvbi53aXRoZHJhd0JhbGFuY2UoKTsKICAgIH0KfQoKCi8vLyBAdGl0bGUgYWxsIGZ1bmN0aW9ucyByZWxhdGVkIHRvIGNyZWF0aW5nIGZpZ2h0ZXJzCmNvbnRyYWN0IEZpZ2h0ZXJNaW50aW5nIGlzIEZpZ2h0ZXJBdWN0aW9uIHsKCiAgICAvLyBMaW1pdHMgdGhlIG51bWJlciBvZiBmaWdodGVycyB0aGUgY29udHJhY3Qgb3duZXIgY2FuIGV2ZXIgY3JlYXRlLgogICAgdWludDI1NiBwdWJsaWMgcHJvbW9DcmVhdGlvbkxpbWl0ID0gNTAwMDsKICAgIHVpbnQyNTYgcHVibGljIGdlbjBDcmVhdGlvbkxpbWl0ID0gMjUwMDA7CgogICAgLy8gQ29uc3RhbnRzIGZvciBnZW4wIGF1Y3Rpb25zLgogICAgdWludDI1NiBwdWJsaWMgZ2VuMFN0YXJ0aW5nUHJpY2UgPSA1MDAgZmlubmV5OwogICAgdWludDI1NiBwdWJsaWMgZ2VuMEVuZGluZ1ByaWNlID0gMTAgZmlubmV5OwogICAgdWludDI1NiBwdWJsaWMgZ2VuMEF1Y3Rpb25EdXJhdGlvbiA9IDEgZGF5czsKCiAgICAvLyBDb3VudHMgdGhlIG51bWJlciBvZiBmaWdodGVycyB0aGUgY29udHJhY3Qgb3duZXIgaGFzIGNyZWF0ZWQuCiAgICB1aW50MjU2IHB1YmxpYyBwcm9tb0NyZWF0ZWRDb3VudDsKICAgIHVpbnQyNTYgcHVibGljIGdlbjBDcmVhdGVkQ291bnQ7CgogICAgLy8vIEBkZXYgd2UgY2FuIGNyZWF0ZSBwcm9tbyBmaWdodGVycywgdXAgdG8gYSBsaW1pdAogICAgZnVuY3Rpb24gY3JlYXRlUHJvbW9GaWdodGVyKAogICAgICAgIHVpbnQyNTYgX2dlbmVzLAogICAgICAgIHVpbnQ4IF9kZXh0ZXJpdHksCiAgICAgICAgdWludDggX3N0cmVuZ3RoLAogICAgICAgIHVpbnQ4IF92aXRhbGl0eSwKICAgICAgICB1aW50OCBfbHVjaywKICAgICAgICBhZGRyZXNzIF9vd25lcgogICAgKSBwdWJsaWMgb25seUNPTyB7CiAgICAgICAgaWYgKF9vd25lciA9PSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgICBfb3duZXIgPSBjb29BZGRyZXNzOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKHByb21vQ3JlYXRlZENvdW50IDwgcHJvbW9DcmVhdGlvbkxpbWl0KTsKICAgICAgICByZXF1aXJlKGdlbjBDcmVhdGVkQ291bnQgPCBnZW4wQ3JlYXRpb25MaW1pdCk7CgogICAgICAgIHByb21vQ3JlYXRlZENvdW50Kys7CiAgICAgICAgZ2VuMENyZWF0ZWRDb3VudCsrOwogICAgICAgIAogICAgICAgIF9jcmVhdGVGaWdodGVyKDAsIF9nZW5lcywgX2RleHRlcml0eSwgX3N0cmVuZ3RoLCBfdml0YWxpdHksIF9sdWNrLCBfb3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgZ2VuMCBmaWdodGVyIHdpdGggdGhlIGdpdmVuIGdlbmVzIGFuZAogICAgLy8vICBjcmVhdGVzIGFuIGF1Y3Rpb24gZm9yIGl0LgogICAgZnVuY3Rpb24gY3JlYXRlR2VuMEF1Y3Rpb24oCiAgICAgICAgdWludDI1NiBfZ2VuZXMsCiAgICAgICAgdWludDggX2RleHRlcml0eSwKICAgICAgICB1aW50OCBfc3RyZW5ndGgsCiAgICAgICAgdWludDggX3ZpdGFsaXR5LAogICAgICAgIHVpbnQ4IF9sdWNrCiAgICApIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgICByZXF1aXJlKGdlbjBDcmVhdGVkQ291bnQgPCBnZW4wQ3JlYXRpb25MaW1pdCk7CgogICAgICAgIHVpbnQyNTYgZmlnaHRlcklkID0gX2NyZWF0ZUZpZ2h0ZXIoMCwgX2dlbmVzLCBfZGV4dGVyaXR5LCBfc3RyZW5ndGgsIF92aXRhbGl0eSwgX2x1Y2ssIGFkZHJlc3ModGhpcykpOwogICAgICAgIAogICAgICAgIF9hcHByb3ZlKGZpZ2h0ZXJJZCwgc2FsZUF1Y3Rpb24pOwoKICAgICAgICBzYWxlQXVjdGlvbi5jcmVhdGVBdWN0aW9uKAogICAgICAgICAgICBmaWdodGVySWQsCiAgICAgICAgICAgIF9jb21wdXRlTmV4dEdlbjBQcmljZSgpLAogICAgICAgICAgICBnZW4wRW5kaW5nUHJpY2UsCiAgICAgICAgICAgIGdlbjBBdWN0aW9uRHVyYXRpb24sCiAgICAgICAgICAgIGFkZHJlc3ModGhpcykKICAgICAgICApOwoKICAgICAgICBnZW4wQ3JlYXRlZENvdW50Kys7CiAgICB9CgogICAgLy8vIEBkZXYgQ29tcHV0ZXMgdGhlIG5leHQgZ2VuMCBhdWN0aW9uIHN0YXJ0aW5nIHByaWNlLCBnaXZlbgogICAgLy8vICB0aGUgYXZlcmFnZSBvZiB0aGUgcGFzdCA0IHByaWNlcyArIDUwJS4KICAgIGZ1bmN0aW9uIF9jb21wdXRlTmV4dEdlbjBQcmljZSgpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYXZlUHJpY2UgPSBzYWxlQXVjdGlvbi5hdmVyYWdlR2VuMFNhbGVQcmljZSgpOwoKICAgICAgICAvLyBzYW5pdHkgY2hlY2sgdG8gZW5zdXJlIHdlIGRvbid0IG92ZXJmbG93IGFyaXRobWV0aWMgKHRoaXMgYmlnIG51bWJlciBpcyAyXjEyOC0xKS4KICAgICAgICByZXF1aXJlKGF2ZVByaWNlIDwgMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1KTsKCiAgICAgICAgdWludDI1NiBuZXh0UHJpY2UgPSBhdmVQcmljZSArIChhdmVQcmljZSAvIDIpOwoKICAgICAgICAvLyBXZSBuZXZlciBhdWN0aW9uIGZvciBsZXNzIHRoYW4gc3RhcnRpbmcgcHJpY2UKICAgICAgICBpZiAobmV4dFByaWNlIDwgZ2VuMFN0YXJ0aW5nUHJpY2UpIHsKICAgICAgICAgICAgbmV4dFByaWNlID0gZ2VuMFN0YXJ0aW5nUHJpY2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV4dFByaWNlOwogICAgfQp9CgoKLy8vIEB0aXRsZSBDcnlwdG9GaWdodGVyczogQ29sbGVjdGlibGUsIGJhdHRsYWJsZSBmaWdodGVycyBvbiB0aGUgRXRoZXJldW0gYmxvY2tjaGFpbi4KLy8vIEBkZXYgVGhlIG1haW4gQ3J5cHRvRmlnaHRlcnMgY29udHJhY3QKY29udHJhY3QgRmlnaHRlckNvcmUgaXMgRmlnaHRlck1pbnRpbmcgewoKICAgIC8vIFRoaXMgaXMgdGhlIG1haW4gQ3J5cHRvRmlnaHRlcnMgY29udHJhY3QuIFdlIGhhdmUgc2V2ZXJhbCBzZXBlcmF0ZWx5LWluc3RhbnRpYXRlZCBzaWJsaW5nIGNvbnRyYWN0cwogICAgLy8gdGhhdCBoYW5kbGUgYXVjdGlvbnMsIGJhdHRsZXMgYW5kIHRoZSBjcmVhdGlvbiBvZiBuZXcgZmlnaHRlcnMuIEJ5IGtlZXBpbmcKICAgIC8vIHRoZW0gaW4gdGhlaXIgb3duIGNvbnRyYWN0cywgd2UgY2FuIHVwZ3JhZGUgdGhlbSB3aXRob3V0IGRpc3J1cHRpbmcgdGhlIG1haW4gY29udHJhY3QgdGhhdCB0cmFja3MKICAgIC8vIGZpZ2h0ZXIgb3duZXJzaGlwLgogICAgLy8KICAgIC8vICAgICAgLSBGaWdodGVyQmFzZTogVGhpcyBpcyB3aGVyZSB3ZSBkZWZpbmUgdGhlIG1vc3QgZnVuZGFtZW50YWwgY29kZSBzaGFyZWQgdGhyb3VnaG91dCB0aGUgY29yZQogICAgLy8gICAgICAgICAgICAgZnVuY3Rpb25hbGl0eS4gVGhpcyBpbmNsdWRlcyBvdXIgbWFpbiBkYXRhIHN0b3JhZ2UsIGNvbnN0YW50cyBhbmQgZGF0YSB0eXBlcywgcGx1cwogICAgLy8gICAgICAgICAgICAgaW50ZXJuYWwgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyB0aGVzZSBpdGVtcy4KICAgIC8vCiAgICAvLyAgICAgIC0gRmlnaHRlckFjY2Vzc0NvbnRyb2w6IFRoaXMgY29udHJhY3QgbWFuYWdlcyB0aGUgdmFyaW91cyBhZGRyZXNzZXMgYW5kIGNvbnN0cmFpbnRzIGZvciBvcGVyYXRpb25zCiAgICAvLyAgICAgICAgICAgICB0aGF0IGNhbiBiZSBleGVjdXRlZCBvbmx5IGJ5IHNwZWNpZmljIHJvbGVzLiBOYW1lbHkgQ0VPLCBDRk8gYW5kIENPTy4KICAgIC8vCiAgICAvLyAgICAgIC0gRmlnaHRlck93bmVyc2hpcDogVGhpcyBwcm92aWRlcyB0aGUgbWV0aG9kcyByZXF1aXJlZCBmb3IgYmFzaWMgbm9uLWZ1bmdpYmxlIHRva2VuCiAgICAvLyAgICAgICAgICAgICB0cmFuc2FjdGlvbnMsIGZvbGxvd2luZyB0aGUgZHJhZnQgRVJDLTcyMSBzcGVjIChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzIxKS4KICAgIC8vCiAgICAvLyAgICAgIC0gRmlnaHRlckJhdHRsZTogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtZXRob2RzIG5lY2Vzc2FyeSB0byBhbGxvdyBhIHNlcGFyYXRlIGNvbnRyYWN0IHRvIGhhbmRsZSBiYXR0bGVzCiAgICAvLyAgICAgICAgICAgICBhbGxvd2luZyBpdCB0byByZXdhcmQgbmV3IHByaXplIGZpZ2h0ZXJzIGFzIHdlbGwgYXMgdXBkYXRlIGZpZ2h0ZXIgc3RhdHMuCiAgICAvLwogICAgLy8gICAgICAtIEZpZ2h0ZXJBdWN0aW9uOiBIZXJlIHdlIGhhdmUgdGhlIHB1YmxpYyBtZXRob2RzIGZvciBhdWN0aW9uaW5nIG9yIGJpZGRpbmcgb24gZmlnaHRlcnMuCiAgICAvLyAgICAgICAgICAgICBUaGUgYWN0dWFsIGF1Y3Rpb24gZnVuY3Rpb25hbGl0eSBpcyBoYW5kbGVkIGluIGEgc2libGluZyBzYWxlcyBjb250cmFjdCwKICAgIC8vICAgICAgICAgICAgIHdoaWxlIGF1Y3Rpb24gY3JlYXRpb24gYW5kIGJpZGRpbmcgaXMgbW9zdGx5IG1lZGlhdGVkIHRocm91Z2ggdGhpcyBmYWNldCBvZiB0aGUgY29yZSBjb250cmFjdC4KICAgIC8vCiAgICAvLyAgICAgIC0gRmlnaHRlck1pbnRpbmc6IFRoaXMgZmluYWwgZmFjZXQgY29udGFpbnMgdGhlIGZ1bmN0aW9uYWxpdHkgd2UgdXNlIGZvciBjcmVhdGluZyBuZXcgZ2VuMCBmaWdodGVycy4KICAgIC8vICAgICAgICAgICAgIFdlIGNhbiBtYWtlIHVwIHRvIDUwMDAgInByb21vIiBmaWdodGVycyB0aGF0IGNhbiBiZSBnaXZlbiBhd2F5LCBhbmQgYWxsIG90aGVycyBjYW4gb25seSBiZSBjcmVhdGVkIGFuZCB0aGVuIGltbWVkaWF0ZWx5IHB1dCB1cAogICAgLy8gICAgICAgICAgICAgZm9yIGF1Y3Rpb24gdmlhIGFuIGFsZ29yaXRobWljYWxseSBkZXRlcm1pbmVkIHN0YXJ0aW5nIHByaWNlLiBSZWdhcmRsZXNzIG9mIGhvdyB0aGV5CiAgICAvLyAgICAgICAgICAgICBhcmUgY3JlYXRlZCwgdGhlcmUgaXMgYSBoYXJkIGxpbWl0IG9mIDI1LDAwMCBnZW4wIGZpZ2h0ZXJzLgoKICAgIC8vIFNldCBpbiBjYXNlIHRoZSBjb3JlIGNvbnRyYWN0IGlzIGJyb2tlbiBhbmQgYW4gdXBncmFkZSBpcyByZXF1aXJlZAogICAgYWRkcmVzcyBwdWJsaWMgbmV3Q29udHJhY3RBZGRyZXNzOwoKICAgIGZ1bmN0aW9uIEZpZ2h0ZXJDb3JlKCkgcHVibGljIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwoKICAgICAgICBjZW9BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICBjb29BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICBjZm9BZGRyZXNzID0gbXNnLnNlbmRlcjsKCiAgICAgICAgLy8gc3RhcnQgd2l0aCB0aGUgbXl0aGljYWwgZmlnaHRlciAwCiAgICAgICAgX2NyZWF0ZUZpZ2h0ZXIoMCwgdWludDI1NigtMSksIHVpbnQ4KC0xKSwgdWludDgoLTEpLCB1aW50OCgtMSksIHVpbnQ4KC0xKSwgIGFkZHJlc3MoMCkpOwogICAgfQoKICAgIC8vLyBAZGV2IFVzZWQgdG8gbWFyayB0aGUgc21hcnQgY29udHJhY3QgYXMgdXBncmFkZWQsIGluIGNhc2UgdGhlcmUgaXMgYSBzZXJpb3VzCiAgICAvLy8gIGJyZWFraW5nIGJ1Zy4gVGhpcyBtZXRob2QgZG9lcyBub3RoaW5nIGJ1dCBrZWVwIHRyYWNrIG9mIHRoZSBuZXcgY29udHJhY3QgYW5kCiAgICAvLy8gIGVtaXQgYSBtZXNzYWdlIGluZGljYXRpbmcgdGhhdCB0aGUgbmV3IGFkZHJlc3MgaXMgc2V0LiBJdCdzIHVwIHRvIGNsaWVudHMgb2YgdGhpcwogICAgLy8vICBjb250cmFjdCB0byB1cGRhdGUgdG8gdGhlIG5ldyBjb250cmFjdCBhZGRyZXNzIGluIHRoYXQgY2FzZS4gKFRoaXMgY29udHJhY3Qgd2lsbAogICAgLy8vICBiZSBwYXVzZWQgaW5kZWZpbml0ZWx5IGlmIHN1Y2ggYW4gdXBncmFkZSB0YWtlcyBwbGFjZS4pCiAgICAvLy8gQHBhcmFtIF92MkFkZHJlc3MgbmV3IGFkZHJlc3MKICAgIGZ1bmN0aW9uIHNldE5ld0FkZHJlc3MoYWRkcmVzcyBfdjJBZGRyZXNzKSBwdWJsaWMgb25seUNFTyB3aGVuUGF1c2VkIHsKICAgICAgICBuZXdDb250cmFjdEFkZHJlc3MgPSBfdjJBZGRyZXNzOwogICAgICAgIENvbnRyYWN0VXBncmFkZShfdjJBZGRyZXNzKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBObyB0aXBwaW5nIQogICAgLy8vIEBkZXYgUmVqZWN0IGFsbCBFdGhlciBmcm9tIGJlaW5nIHNlbnQgaGVyZSwgdW5sZXNzIGl0J3MgZnJvbSBvbmUgb2YgdGhlCiAgICAvLy8gIHR3byBhdWN0aW9uIGNvbnRyYWN0cy4gKEhvcGVmdWxseSwgd2UgY2FuIHByZXZlbnQgdXNlciBhY2NpZGVudHMuKQogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRkcmVzcyhzYWxlQXVjdGlvbikpOwogICAgfQoKICAgIC8vLyBAcGFyYW0gX2lkIFRoZSBJRCBvZiB0aGUgZmlnaHRlciBvZiBpbnRlcmVzdC4KICAgIGZ1bmN0aW9uIGdldEZpZ2h0ZXIodWludDI1NiBfaWQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKAogICAgICAgIHVpbnQyNTYgcHJpemVDb29sZG93bkVuZFRpbWUsCiAgICAgICAgdWludDI1NiBiYXR0bGVDb29sZG93bkVuZFRpbWUsCiAgICAgICAgdWludDI1NiBwcml6ZUNvb2xkb3duSW5kZXgsCiAgICAgICAgdWludDI1NiBiYXR0bGVzRm91Z2h0LAogICAgICAgIHVpbnQyNTYgYmF0dGxlc1dvbiwKICAgICAgICB1aW50MjU2IGdlbmVyYXRpb24sCiAgICAgICAgdWludDI1NiBnZW5lcywKICAgICAgICB1aW50MjU2IGRleHRlcml0eSwKICAgICAgICB1aW50MjU2IHN0cmVuZ3RoLAogICAgICAgIHVpbnQyNTYgdml0YWxpdHksCiAgICAgICAgdWludDI1NiBsdWNrLAogICAgICAgIHVpbnQyNTYgZXhwZXJpZW5jZQogICAgKSB7CiAgICAgICAgRmlnaHRlciBzdG9yYWdlIGZpZ2h0ZXIgPSBmaWdodGVyc1tfaWRdOwoKICAgICAgICBwcml6ZUNvb2xkb3duRW5kVGltZSA9IGZpZ2h0ZXIucHJpemVDb29sZG93bkVuZFRpbWU7CiAgICAgICAgYmF0dGxlQ29vbGRvd25FbmRUaW1lID0gZmlnaHRlci5iYXR0bGVDb29sZG93bkVuZFRpbWU7CiAgICAgICAgcHJpemVDb29sZG93bkluZGV4ID0gZmlnaHRlci5wcml6ZUNvb2xkb3duSW5kZXg7CiAgICAgICAgYmF0dGxlc0ZvdWdodCA9IGZpZ2h0ZXIuYmF0dGxlc0ZvdWdodDsKICAgICAgICBiYXR0bGVzV29uID0gZmlnaHRlci5iYXR0bGVzV29uOwogICAgICAgIGdlbmVyYXRpb24gPSBmaWdodGVyLmdlbmVyYXRpb247CiAgICAgICAgZ2VuZXMgPSBmaWdodGVyLmdlbmVzOwogICAgICAgIGRleHRlcml0eSA9IGZpZ2h0ZXIuZGV4dGVyaXR5OwogICAgICAgIHN0cmVuZ3RoID0gZmlnaHRlci5zdHJlbmd0aDsKICAgICAgICB2aXRhbGl0eSA9IGZpZ2h0ZXIudml0YWxpdHk7CiAgICAgICAgbHVjayA9IGZpZ2h0ZXIubHVjazsKICAgICAgICBleHBlcmllbmNlID0gZmlnaHRlci5leHBlcmllbmNlOwogICAgfQoKICAgIC8vLyBAZGV2IE92ZXJyaWRlIHVucGF1c2Ugc28gaXQgcmVxdWlyZXMgYWxsIGV4dGVybmFsIGNvbnRyYWN0IGFkZHJlc3NlcwogICAgLy8vICB0byBiZSBzZXQgYmVmb3JlIGNvbnRyYWN0IGNhbiBiZSB1bnBhdXNlZC4gQWxzbywgd2UgY2FuJ3QgaGF2ZQogICAgLy8vICBuZXdDb250cmFjdEFkZHJlc3Mgc2V0IGVpdGhlciwgYmVjYXVzZSB0aGVuIHRoZSBjb250cmFjdCB3YXMgdXBncmFkZWQuCiAgICBmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlDRU8gd2hlblBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShzYWxlQXVjdGlvbiAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKG5ld0NvbnRyYWN0QWRkcmVzcyA9PSBhZGRyZXNzKDApKTsKCiAgICAgICAgc3VwZXIudW5wYXVzZSgpOwogICAgfQp9'.
	

]
