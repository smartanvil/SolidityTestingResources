Class {
	#name : #SRTf77cead5b85f379aa7b9031a842ccd903d7966a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf77cead5b85f379aa7b9031a842ccd903d7966a7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgT3ZlcmZsb3cgcHJvdGVjdGVkIG1hdGggZnVuY3Rpb25zCiovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIC8qKgogICAgICAgIGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gU2FmZU1hdGgoKSB7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MKCiAgICAgICAgQHBhcmFtIF94ICAgdmFsdWUgMQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDIKCiAgICAgICAgQHJldHVybiBzdW0KICAgICovCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCArIF95OwogICAgICAgIGFzc2VydCh6ID49IF94KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgX3ggbWludXMgX3ksIGFzc2VydHMgaWYgdGhlIHN1YnRyYWN0aW9uIHJlc3VsdHMgaW4gYSBuZWdhdGl2ZSBudW1iZXIKCiAgICAgICAgQHBhcmFtIF94ICAgbWludWVuZAogICAgICAgIEBwYXJhbSBfeSAgIHN1YnRyYWhlbmQKCiAgICAgICAgQHJldHVybiBkaWZmZXJlbmNlCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KF94ID49IF95KTsKICAgICAgICByZXR1cm4gX3ggLSBfeTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICBmYWN0b3IgMQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyCgogICAgICAgIEByZXR1cm4gcHJvZHVjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICogX3k7CiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KfQoKLyoKICAgIE9wZW4gaXNzdWVzOgogICAgLSBUaGUgZm9ybXVsYSBpcyBub3QgeWV0IHN1cGVyIGFjY3VyYXRlLCBlc3BlY2lhbGx5IGZvciB2ZXJ5IHNtYWxsL3ZlcnkgaGlnaCByYXRpb3MKICAgIC0gSW1wcm92ZSBkeW5hbWljIHByZWNpc2lvbiBzdXBwb3J0CiovCgpjb250cmFjdCBCYW5jb3JGb3JtdWxhIGlzIFNhZmVNYXRoIHsKCiAgICB1aW50MjU2IGNvbnN0YW50IE9ORSA9IDE7CiAgICB1aW50MjU2IGNvbnN0YW50IFRXTyA9IDI7CiAgICB1aW50MjU2IGNvbnN0YW50IE1BWF9GSVhFRF9FWFBfMzIgPSAweDM4NmJmZGJhMjk7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnMC4yJzsKCiAgICBmdW5jdGlvbiBCYW5jb3JGb3JtdWxhKCkgewogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZ2l2ZW4gYSB0b2tlbiBzdXBwbHksIHJlc2VydmUsIENSUiBhbmQgYSBkZXBvc2l0IGFtb3VudCAoaW4gdGhlIHJlc2VydmUgdG9rZW4pLCBjYWxjdWxhdGVzIHRoZSByZXR1cm4gZm9yIGEgZ2l2ZW4gY2hhbmdlIChpbiB0aGUgbWFpbiB0b2tlbikKCiAgICAgICAgRm9ybXVsYToKICAgICAgICBSZXR1cm4gPSBfc3VwcGx5ICogKCgxICsgX2RlcG9zaXRBbW91bnQgLyBfcmVzZXJ2ZUJhbGFuY2UpIF4gKF9yZXNlcnZlUmF0aW8gLyAxMDApIC0gMSkKCiAgICAgICAgQHBhcmFtIF9zdXBwbHkgICAgICAgICAgICAgdG9rZW4gdG90YWwgc3VwcGx5CiAgICAgICAgQHBhcmFtIF9yZXNlcnZlQmFsYW5jZSAgICAgdG90YWwgcmVzZXJ2ZQogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVJhdGlvICAgICAgIGNvbnN0YW50IHJlc2VydmUgcmF0aW8sIDEtMTAwCiAgICAgICAgQHBhcmFtIF9kZXBvc2l0QW1vdW50ICAgICAgZGVwb3NpdCBhbW91bnQsIGluIHJlc2VydmUgdG9rZW4KCiAgICAgICAgQHJldHVybiBwdXJjaGFzZSByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlUHVyY2hhc2VSZXR1cm4odWludDI1NiBfc3VwcGx5LCB1aW50MjU2IF9yZXNlcnZlQmFsYW5jZSwgdWludDggX3Jlc2VydmVSYXRpbywgdWludDI1NiBfZGVwb3NpdEFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyB2YWxpZGF0ZSBpbnB1dAogICAgICAgIHJlcXVpcmUoX3N1cHBseSAhPSAwICYmIF9yZXNlcnZlQmFsYW5jZSAhPSAwICYmIF9yZXNlcnZlUmF0aW8gPiAwICYmIF9yZXNlcnZlUmF0aW8gPD0gMTAwKTsKCiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciAwIGRlcG9zaXQgYW1vdW50CiAgICAgICAgaWYgKF9kZXBvc2l0QW1vdW50ID09IDApCiAgICAgICAgICAgIHJldHVybiAwOwoKICAgICAgICB1aW50MjU2IGJhc2VOID0gc2FmZUFkZChfZGVwb3NpdEFtb3VudCwgX3Jlc2VydmVCYWxhbmNlKTsKICAgICAgICB1aW50MjU2IHRlbXA7CgogICAgICAgIC8vIHNwZWNpYWwgY2FzZSBpZiB0aGUgQ1JSID0gMTAwCiAgICAgICAgaWYgKF9yZXNlcnZlUmF0aW8gPT0gMTAwKSB7CiAgICAgICAgICAgIHRlbXAgPSBzYWZlTXVsKF9zdXBwbHksIGJhc2VOKSAvIF9yZXNlcnZlQmFsYW5jZTsKICAgICAgICAgICAgcmV0dXJuIHNhZmVTdWIodGVtcCwgX3N1cHBseSk7IAogICAgICAgIH0KCiAgICAgICAgdWludDggcHJlY2lzaW9uID0gY2FsY3VsYXRlQmVzdFByZWNpc2lvbihiYXNlTiwgX3Jlc2VydmVCYWxhbmNlLCBfcmVzZXJ2ZVJhdGlvLCAxMDApOwogICAgICAgIHVpbnQyNTYgcmVzTiA9IHBvd2VyKGJhc2VOLCBfcmVzZXJ2ZUJhbGFuY2UsIF9yZXNlcnZlUmF0aW8sIDEwMCwgcHJlY2lzaW9uKTsKICAgICAgICB0ZW1wID0gc2FmZU11bChfc3VwcGx5LCByZXNOKSA+PiBwcmVjaXNpb247CiAgICAgICAgcmV0dXJuIHNhZmVTdWIodGVtcCwgX3N1cHBseSk7CiAgICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZ2l2ZW4gYSB0b2tlbiBzdXBwbHksIHJlc2VydmUsIENSUiBhbmQgYSBzZWxsIGFtb3VudCAoaW4gdGhlIG1haW4gdG9rZW4pLCBjYWxjdWxhdGVzIHRoZSByZXR1cm4gZm9yIGEgZ2l2ZW4gY2hhbmdlIChpbiB0aGUgcmVzZXJ2ZSB0b2tlbikKCiAgICAgICAgRm9ybXVsYToKICAgICAgICBSZXR1cm4gPSBfcmVzZXJ2ZUJhbGFuY2UgKiAoMSAtICgxIC0gX3NlbGxBbW91bnQgLyBfc3VwcGx5KSBeICgxIC8gKF9yZXNlcnZlUmF0aW8gLyAxMDApKSkKCiAgICAgICAgQHBhcmFtIF9zdXBwbHkgICAgICAgICAgICAgdG9rZW4gdG90YWwgc3VwcGx5CiAgICAgICAgQHBhcmFtIF9yZXNlcnZlQmFsYW5jZSAgICAgdG90YWwgcmVzZXJ2ZQogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVJhdGlvICAgICAgIGNvbnN0YW50IHJlc2VydmUgcmF0aW8sIDEtMTAwCiAgICAgICAgQHBhcmFtIF9zZWxsQW1vdW50ICAgICAgICAgc2VsbCBhbW91bnQsIGluIHRoZSB0b2tlbiBpdHNlbGYKCiAgICAgICAgQHJldHVybiBzYWxlIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVTYWxlUmV0dXJuKHVpbnQyNTYgX3N1cHBseSwgdWludDI1NiBfcmVzZXJ2ZUJhbGFuY2UsIHVpbnQ4IF9yZXNlcnZlUmF0aW8sIHVpbnQyNTYgX3NlbGxBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gdmFsaWRhdGUgaW5wdXQKICAgICAgICByZXF1aXJlKF9zdXBwbHkgIT0gMCAmJiBfcmVzZXJ2ZUJhbGFuY2UgIT0gMCAmJiBfcmVzZXJ2ZVJhdGlvID4gMCAmJiBfcmVzZXJ2ZVJhdGlvIDw9IDEwMCAmJiBfc2VsbEFtb3VudCA8PSBfc3VwcGx5KTsKCiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciAwIHNlbGwgYW1vdW50CiAgICAgICAgaWYgKF9zZWxsQW1vdW50ID09IDApCiAgICAgICAgICAgIHJldHVybiAwOwoKICAgICAgICB1aW50MjU2IGJhc2VEID0gc2FmZVN1Yihfc3VwcGx5LCBfc2VsbEFtb3VudCk7CiAgICAgICAgdWludDI1NiB0ZW1wMTsKICAgICAgICB1aW50MjU2IHRlbXAyOwoKICAgICAgICAvLyBzcGVjaWFsIGNhc2UgaWYgdGhlIENSUiA9IDEwMAogICAgICAgIGlmIChfcmVzZXJ2ZVJhdGlvID09IDEwMCkgewogICAgICAgICAgICB0ZW1wMSA9IHNhZmVNdWwoX3Jlc2VydmVCYWxhbmNlLCBfc3VwcGx5KTsKICAgICAgICAgICAgdGVtcDIgPSBzYWZlTXVsKF9yZXNlcnZlQmFsYW5jZSwgYmFzZUQpOwogICAgICAgICAgICByZXR1cm4gc2FmZVN1Yih0ZW1wMSwgdGVtcDIpIC8gX3N1cHBseTsKICAgICAgICB9CgogICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3Igc2VsbGluZyB0aGUgZW50aXJlIHN1cHBseQogICAgICAgIGlmIChfc2VsbEFtb3VudCA9PSBfc3VwcGx5KQogICAgICAgICAgICByZXR1cm4gX3Jlc2VydmVCYWxhbmNlOwoKICAgICAgICB1aW50OCBwcmVjaXNpb24gPSBjYWxjdWxhdGVCZXN0UHJlY2lzaW9uKF9zdXBwbHksIGJhc2VELCAxMDAsIF9yZXNlcnZlUmF0aW8pOwogICAgICAgIHVpbnQyNTYgcmVzTiA9IHBvd2VyKF9zdXBwbHksIGJhc2VELCAxMDAsIF9yZXNlcnZlUmF0aW8sIHByZWNpc2lvbik7CiAgICAgICAgdGVtcDEgPSBzYWZlTXVsKF9yZXNlcnZlQmFsYW5jZSwgcmVzTik7CiAgICAgICAgdGVtcDIgPSBzYWZlTXVsKF9yZXNlcnZlQmFsYW5jZSwgT05FIDw8IHByZWNpc2lvbik7CiAgICAgICAgcmV0dXJuIHNhZmVTdWIodGVtcDEsIHRlbXAyKSAvIHJlc047CiAgICB9CgogICAgLyoqCiAgICAgICAgY2FsY3VsYXRlQmVzdFByZWNpc2lvbiAKICAgICAgICBQcmVkaWN0cyB0aGUgaGlnaGVzdCBwcmVjaXNpb24gd2hpY2ggY2FuIGJlIHVzZWQgaW4gb3JkZXIgdG8gY29tcHV0ZSAiYmFzZV5leHAiIHdpdGhvdXQgZXhjZWVkaW5nIDI1NiBiaXRzIGluIGFueSBvZiB0aGUgaW50ZXJtZWRpYXRlIGNvbXB1dGF0aW9ucy4KICAgICAgICBJbnN0ZWFkIG9mIGNhbGN1bGF0aW5nICJiYXNlIF4gZXhwIiwgd2UgY2FsY3VsYXRlICJlIF4gKGxuKGJhc2UpICogZXhwKSIuCiAgICAgICAgVGhlIHZhbHVlIG9mIGxuKGJhc2UpIGlzIHJlcHJlc2VudGVkIHdpdGggYW4gaW50ZWdlciBzbGlnaHRseSBzbWFsbGVyIHRoYW4gbG4oYmFzZSkgKiAyIF4gcHJlY2lzaW9uLgogICAgICAgIFRoZSBsYXJnZXIgdGhlIHByZWNpc2lvbiBpcywgdGhlIG1vcmUgYWNjdXJhdGVseSB0aGlzIHZhbHVlIHJlcHJlc2VudHMgdGhlIHJlYWwgdmFsdWUuCiAgICAgICAgSG93ZXZlciwgZnVuY3Rpb24gZml4ZWRFeHBVbnNhZmUoeCksIHdoaWNoIGNhbGN1bGF0ZXMgZSBeIHgsIGlzIGxpbWl0ZWQgdG8gYSBtYXhpbXVtIHZhbHVlIG9mIHguCiAgICAgICAgVGhlIGxpbWl0IGRlcGVuZHMgb24gdGhlIHByZWNpc2lvbiAoZS5nLCBmb3IgcHJlY2lzaW9uID0gMzIsIHRoZSBtYXhpbXVtIHZhbHVlIG9mIHggaXMgTUFYX0ZJWEVEX0VYUF8zMikuCiAgICAgICAgSGVuY2UgYmVmb3JlIGNhbGxpbmcgdGhlICdwb3dlcicgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZXN0aW1hdGUgYW4gdXBwZXItYm91bmQgZm9yIGxuKGJhc2UpICogZXhwb25lbnQuCiAgICAgICAgT2YgY291cnNlLCB3ZSBzaG91bGQgbGF0ZXIgYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIHBhc3NlZCB0byBmaXhlZEV4cFVuc2FmZSBpcyBub3QgbGFyZ2VyIHRoYW4gTUFYX0ZJWEVEX0VYUChwcmVjaXNpb24pLgogICAgICAgIER1ZSB0byB0aGlzIGFzc2VydGlvbiAobWFkZSBpbiBmdW5jdGlvbiBmaXhlZEV4cCksIGZ1bmN0aW9ucyBjYWxjdWxhdGVCZXN0UHJlY2lzaW9uIGFuZCBmaXhlZEV4cCBhcmUgdGlnaHRseSBjb3VwbGVkLgogICAgICAgIE5vdGUgdGhhdCB0aGUgb3V0Y29tZSBvZiB0aGlzIGZ1bmN0aW9uIG9ubHkgYWZmZWN0cyB0aGUgYWNjdXJhY3kgb2YgdGhlIGNvbXB1dGF0aW9uIG9mICJiYXNlIF4gZXhwIi4KICAgICAgICBUaGVyZWZvcmUsIHdlIGRvIG5vdCBuZWVkIHRvIGFzc2VydCB0aGF0IG5vIGludGVybWVkaWF0ZSByZXN1bHQgZXhjZWVkcyAyNTYgYml0cyAobm9yIGluIHRoaXMgZnVuY3Rpb24sIG5laXRoZXIgaW4gYW55IG9mIHRoZSBmdW5jdGlvbnMgZG93biB0aGUgY2FsbGluZyB0cmVlKS4KICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVCZXN0UHJlY2lzaW9uKHVpbnQyNTYgX2Jhc2VOLCB1aW50MjU2IF9iYXNlRCwgdWludDI1NiBfZXhwTiwgdWludDI1NiBfZXhwRCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICB1aW50OCBwcmVjaXNpb247CiAgICAgICAgdWludDI1NiBtYXhFeHAgPSBNQVhfRklYRURfRVhQXzMyOwogICAgICAgIHVpbnQyNTYgbWF4VmFsID0gbG5VcHBlckJvdW5kMzIoX2Jhc2VOLF9iYXNlRCkgKiBfZXhwTjsKICAgICAgICBmb3IgKHByZWNpc2lvbiA9IDA7IHByZWNpc2lvbiA8IDMyOyBwcmVjaXNpb24gKz0gMikgewogICAgICAgICAgICBpZiAobWF4RXhwIDwgKG1heFZhbCA8PCBwcmVjaXNpb24pIC8gX2V4cEQpCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgbWF4RXhwID0gKG1heEV4cCAqIDB4ZWI1ZWM1OTc1OTU5YzU2NSkgPj4gKDY0LTIpOwogICAgICAgIH0KICAgICAgICBpZiAocHJlY2lzaW9uID09IDApCiAgICAgICAgICAgIHJldHVybiAzMjsKICAgICAgICByZXR1cm4gcHJlY2lzaW9uKzMyLTI7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBjYWxjdWxhdGVzIChfYmFzZU4gLyBfYmFzZUQpIF4gKF9leHBOIC8gX2V4cEQpCiAgICAgICAgUmV0dXJucyByZXN1bHQgdXBzaGlmdGVkIGJ5IHByZWNpc2lvbgoKICAgICAgICBUaGlzIG1ldGhvZCBpcyBvdmVyZmxvdy1zYWZlCiAgICAqLyAKICAgIGZ1bmN0aW9uIHBvd2VyKHVpbnQyNTYgX2Jhc2VOLCB1aW50MjU2IF9iYXNlRCwgdWludDI1NiBfZXhwTiwgdWludDI1NiBfZXhwRCwgdWludDggX3ByZWNpc2lvbikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgbG9nYmFzZSA9IGxuKF9iYXNlTiwgX2Jhc2VELCBfcHJlY2lzaW9uKTsKICAgICAgICAvLyBOb3QgdXNpbmcgc2FmZURpdiBoZXJlLCBzaW5jZSBzYWZlRGl2IHByb3RlY3RzIGFnYWluc3QKICAgICAgICAvLyBwcmVjaXNpb24gbG9zcy4gSXQncyB1bmF2b2lkYWJsZSwgaG93ZXZlcgogICAgICAgIC8vIEJvdGggYGxuYCBhbmQgYGZpeGVkRXhwYCBhcmUgb3ZlcmZsb3ctc2FmZS4gCiAgICAgICAgcmV0dXJuIGZpeGVkRXhwKHNhZmVNdWwobG9nYmFzZSwgX2V4cE4pIC8gX2V4cEQsIF9wcmVjaXNpb24pOwogICAgfQogICAgCiAgICAvKioKICAgICAgICBpbnB1dCByYW5nZTogCiAgICAgICAgICAgIC0gbnVtZXJhdG9yOiBbMSwgdWludDI1Nl9tYXggPj4gcHJlY2lzaW9uXSAgICAKICAgICAgICAgICAgLSBkZW5vbWluYXRvcjogWzEsIHVpbnQyNTZfbWF4ID4+IHByZWNpc2lvbl0KICAgICAgICBvdXRwdXQgcmFuZ2U6CiAgICAgICAgICAgIFswLCAweDliNDNkNGY4ZDZdCgogICAgICAgIFRoaXMgbWV0aG9kIGFzc2VydHMgb3V0c2lkZSBvZiBib3VuZHMKICAgICovCiAgICBmdW5jdGlvbiBsbih1aW50MjU2IF9udW1lcmF0b3IsIHVpbnQyNTYgX2Rlbm9taW5hdG9yLCB1aW50OCBfcHJlY2lzaW9uKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGRlbm9taW5hdG9yID4gbnVtZXJhdG9yOiBsZXNzIHRoYW4gb25lIHlpZWxkcyBuZWdhdGl2ZSB2YWx1ZXMuIFVuc3VwcG9ydGVkCiAgICAgICAgYXNzZXJ0KF9kZW5vbWluYXRvciA8PSBfbnVtZXJhdG9yKTsKCiAgICAgICAgLy8gbG9nKDEpIGlzIHRoZSBsb3dlc3Qgd2UgY2FuIGdvCiAgICAgICAgYXNzZXJ0KF9kZW5vbWluYXRvciAhPSAwICYmIF9udW1lcmF0b3IgIT0gMCk7CgogICAgICAgIC8vIFVwcGVyIGJpdHMgYXJlIHNjYWxlZCBvZmYgYnkgcHJlY2lzaW9uCiAgICAgICAgdWludDI1NiBNQVhfVkFMID0gT05FIDw8ICgyNTYgLSBfcHJlY2lzaW9uKTsKICAgICAgICBhc3NlcnQoX251bWVyYXRvciA8IE1BWF9WQUwpOwogICAgICAgIGFzc2VydChfZGVub21pbmF0b3IgPCBNQVhfVkFMKTsKCiAgICAgICAgcmV0dXJuIGZpeGVkTG9nZSggKF9udW1lcmF0b3IgPDwgX3ByZWNpc2lvbikgLyBfZGVub21pbmF0b3IsIF9wcmVjaXNpb24pOwogICAgfQoKICAgIC8qKgogICAgICAgIGxuVXBwZXJCb3VuZDMyIAogICAgICAgIFRha2VzIGEgcmF0aW9uYWwgbnVtYmVyICJiYXNlTiAvIGJhc2VEIiBhcyBpbnB1dC4KICAgICAgICBSZXR1cm5zIGFuIGludGVnZXIgdXBwZXItYm91bmQgb2YgdGhlIG5hdHVyYWwgbG9nYXJpdGhtIG9mIHRoZSBpbnB1dCBzY2FsZWQgYnkgMl4zMi4KICAgICAgICBXZSBkbyB0aGlzIGJ5IGNhbGN1bGF0aW5nICJVcHBlckJvdW5kKGxvZzIoYmFzZU4gLyBiYXNlRCkpICogQ2VpbGluZyhsbigyKSAqIDJeMzIpIi4KICAgICAgICBXZSBjYWxjdWxhdGUgIlVwcGVyQm91bmQobG9nMihiYXNlTiAvIGJhc2VEKSkiIGFzICJGbG9vcihsb2cyKChfYmFzZU4gLSAxKSAvIF9iYXNlRCkpICsgMSIuCiAgICAgICAgRm9yIHNtYWxsIHZhbHVlcyBvZiAiYmFzZU4gLyBiYXNlRCIsIHRoaXMgc29tZXRpbWVzIHlpZWxkcyBhIGJhZCB1cHBlci1ib3VuZCBhcHByb3hpbWF0aW9uLgogICAgICAgIFdlIHRoZXJlZm9yZSBjb3ZlciB0aGVzZSBjYXNlcyAoYW5kIGEgZmV3IG1vcmUpIG1hbnVhbGx5LgogICAgICAgIENvbXBsZXhpdHkgaXMgTyhsb2coaW5wdXQgYml0LWxlbmd0aCkpLgogICAgKi8KICAgIGZ1bmN0aW9uIGxuVXBwZXJCb3VuZDMyKHVpbnQyNTYgX2Jhc2VOLCB1aW50MjU2IF9iYXNlRCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChfYmFzZU4gPiBfYmFzZUQpOwoKICAgICAgICB1aW50MjU2IHNjYWxlZEJhc2VOID0gX2Jhc2VOICogMTAwMDAwOwogICAgICAgIGlmIChzY2FsZWRCYXNlTiA8PSBfYmFzZUQgKiAgMjcxODI4KSAvLyBfYmFzZU4gLyBfYmFzZUQgPCBlXjEgKGZsb29yTG9nMiB3aWxsIHJldHVybiAwIGlmIF9iYXNlTiAvIF9iYXNlRCA8IDIpCiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KDEpIDw8IDMyOwogICAgICAgIGlmIChzY2FsZWRCYXNlTiA8PSBfYmFzZUQgKiAgNzM4OTA1KSAvLyBfYmFzZU4gLyBfYmFzZUQgPCBlXjIgKGZsb29yTG9nMiB3aWxsIHJldHVybiAxIGlmIF9iYXNlTiAvIF9iYXNlRCA8IDQpCiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KDIpIDw8IDMyOwogICAgICAgIGlmIChzY2FsZWRCYXNlTiA8PSBfYmFzZUQgKiAyMDA4NTUzKSAvLyBfYmFzZU4gLyBfYmFzZUQgPCBlXjMgKGZsb29yTG9nMiB3aWxsIHJldHVybiAyIGlmIF9iYXNlTiAvIF9iYXNlRCA8IDgpCiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KDMpIDw8IDMyOwoKICAgICAgICByZXR1cm4gKGZsb29yTG9nMigoX2Jhc2VOIC0gMSkgLyBfYmFzZUQpICsgMSkgKiAweGIxNzIxN2Y4OwogICAgfQoKICAgIC8qKgogICAgICAgIGlucHV0IHJhbmdlOiAKICAgICAgICAgICAgWzB4MTAwMDAwMDAwLCB1aW50MjU2X21heF0KICAgICAgICBvdXRwdXQgcmFuZ2U6CiAgICAgICAgICAgIFswLCAweDliNDNkNGY4ZDZdCgogICAgICAgIFRoaXMgbWV0aG9kIGFzc2VydHMgb3V0c2lkZSBvZiBib3VuZHMKCiAgICAgICAgU2luY2UgYGZpeGVkTG9nMl9taW5gIG91dHB1dCByYW5nZSBpcyBtYXggYDB4ZGZmZmZmZmZmZmAgCiAgICAgICAgKDQwIGJpdHMsIG9yIDUgYnl0ZXMpLCB3ZSBjYW4gdXNlIGEgdmVyeSBsYXJnZSBhcHByb3hpbWF0aW9uCiAgICAgICAgZm9yIGBsbigyKWAuIFRoaXMgb25lIGlzIHVzZWQgc2luY2UgaXQncyB0aGUgbWF4IGFjY3VyYWN5IAogICAgICAgIG9mIFB5dGhvbiBgbG4oMilgCgogICAgICAgIDB4YjE3MjE3ZjdkMWNmNzggPSBsbigyKSAqICgxIDw8IDU2KQogICAgKi8KICAgIGZ1bmN0aW9uIGZpeGVkTG9nZSh1aW50MjU2IF94LCB1aW50OCBfcHJlY2lzaW9uKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gY2Fubm90IHJlcHJlc2VudCBuZWdhdGl2ZSBudW1iZXJzIChiZWxvdyAxKQogICAgICAgIGFzc2VydChfeCA+PSBPTkUgPDwgX3ByZWNpc2lvbik7CgogICAgICAgIHVpbnQyNTYgZmxvZzIgPSBmaXhlZExvZzIoX3gsIF9wcmVjaXNpb24pOwogICAgICAgIHJldHVybiAoZmxvZzIgKiAweGIxNzIxN2Y3ZDFjZjc4KSA+PiA1NjsKICAgIH0KCiAgICAvKioKICAgICAgICBSZXR1cm5zIGxvZzIoeCA+PiAzMikgPDwgMzIgWzFdCiAgICAgICAgU28geCBpcyBhc3N1bWVkIHRvIGJlIGFscmVhZHkgdXBzaGlmdGVkIDMyIGJpdHMsIGFuZCAKICAgICAgICB0aGUgcmVzdWx0IGlzIGFsc28gdXBzaGlmdGVkIDMyIGJpdHMuIAogICAgICAgIAogICAgICAgIFsxXSBUaGUgZnVuY3Rpb24gcmV0dXJucyBhIG51bWJlciB3aGljaCBpcyBsb3dlciB0aGFuIHRoZSAKICAgICAgICBhY3R1YWwgdmFsdWUKCiAgICAgICAgaW5wdXQtcmFuZ2UgOiAKICAgICAgICAgICAgWzB4MTAwMDAwMDAwLCB1aW50MjU2X21heF0KICAgICAgICBvdXRwdXQtcmFuZ2U6IAogICAgICAgICAgICBbMCwweGRmZmZmZmZmZmZdCgogICAgICAgIFRoaXMgbWV0aG9kIGFzc2VydHMgb3V0c2lkZSBvZiBib3VuZHMKCiAgICAqLwogICAgZnVuY3Rpb24gZml4ZWRMb2cyKHVpbnQyNTYgX3gsIHVpbnQ4IF9wcmVjaXNpb24pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGZpeGVkT25lID0gT05FIDw8IF9wcmVjaXNpb247CiAgICAgICAgdWludDI1NiBmaXhlZFR3byA9IFRXTyA8PCBfcHJlY2lzaW9uOwoKICAgICAgICAvLyBOdW1iZXJzIGJlbG93IDEgYXJlIG5lZ2F0aXZlLiAKICAgICAgICBhc3NlcnQoIF94ID49IGZpeGVkT25lKTsKCiAgICAgICAgdWludDI1NiBoaSA9IDA7CiAgICAgICAgd2hpbGUgKF94ID49IGZpeGVkVHdvKSB7CiAgICAgICAgICAgIF94ID4+PSAxOwogICAgICAgICAgICBoaSArPSBmaXhlZE9uZTsKICAgICAgICB9CgogICAgICAgIGZvciAodWludDggaSA9IDA7IGkgPCBfcHJlY2lzaW9uOyArK2kpIHsKICAgICAgICAgICAgX3ggPSAoX3ggKiBfeCkgLyBmaXhlZE9uZTsKICAgICAgICAgICAgaWYgKF94ID49IGZpeGVkVHdvKSB7CiAgICAgICAgICAgICAgICBfeCA+Pj0gMTsKICAgICAgICAgICAgICAgIGhpICs9IE9ORSA8PCAoX3ByZWNpc2lvbiAtIDEgLSBpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGhpOwogICAgfQoKICAgIC8qKgogICAgICAgIGZsb29yTG9nMgogICAgICAgIFRha2VzIGEgbmF0dXJhbCBudW1iZXIgKG4pIGFzIGlucHV0LgogICAgICAgIFJldHVybnMgdGhlIGxhcmdlc3QgaW50ZWdlciBzbWFsbGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGJpbmFyeSBsb2dhcml0aG0gb2YgdGhlIGlucHV0LgogICAgICAgIENvbXBsZXhpdHkgaXMgTyhsb2coaW5wdXQgYml0LWxlbmd0aCkpLgogICAgKi8KICAgIGZ1bmN0aW9uIGZsb29yTG9nMih1aW50MjU2IF9uKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDggdCA9IDA7CiAgICAgICAgZm9yICh1aW50OCBzID0gMTI4OyBzID4gMDsgcyA+Pj0gMSkgewogICAgICAgICAgICBpZiAoX24gPj0gKE9ORSA8PCBzKSkgewogICAgICAgICAgICAgICAgX24gPj49IHM7CiAgICAgICAgICAgICAgICB0IHw9IHM7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0OwogICAgfQoKICAgIC8qKgogICAgICAgIGZpeGVkRXhwIGlzIGEgJ3Byb3RlY3RlZCcgdmVyc2lvbiBvZiBgZml4ZWRFeHBVbnNhZmVgLCB3aGljaCBhc3NlcnRzIGluc3RlYWQgb2Ygb3ZlcmZsb3dzLgogICAgICAgIFRoZSBtYXhpbXVtIHZhbHVlIHdoaWNoIGNhbiBiZSBwYXNzZWQgdG8gZml4ZWRFeHBVbnNhZmUgZGVwZW5kcyBvbiB0aGUgcHJlY2lzaW9uIHVzZWQuCiAgICAgICAgVGhlIGZvbGxvd2luZyBhcnJheSBtYXBzIGVhY2ggcHJlY2lzaW9uIGJldHdlZW4gMCBhbmQgNjMgdG8gdGhlIG1heGltdW0gdmFsdWUgcGVybWl0dGVkOgogICAgICAgIG1heEV4cEFycmF5ID0gewogICAgICAgICAgICAweGMxICAgICAgICAgICAgICAgLDB4MTdhICAgICAgICAgICAgICAsMHgyZTUgICAgICAgICAgICAgICwweDVhYiAgICAgICAgICAgICAgLAogICAgICAgICAgICAweGIxYiAgICAgICAgICAgICAgLDB4MTViZiAgICAgICAgICAgICAsMHgyYTBjICAgICAgICAgICAgICwweDUwYTIgICAgICAgICAgICAgLAogICAgICAgICAgICAweDlhYTIgICAgICAgICAgICAgLDB4MTI4OGMgICAgICAgICAgICAsMHgyMzhiMiAgICAgICAgICAgICwweDQ0MjlhICAgICAgICAgICAgLAogICAgICAgICAgICAweDgyYjc4ICAgICAgICAgICAgLDB4ZmFhZGMgICAgICAgICAgICAsMHgxZTBiYjggICAgICAgICAgICwweDM5OWU5NiAgICAgICAgICAgLAogICAgICAgICAgICAweDZlN2Y4OCAgICAgICAgICAgLDB4ZDNlN2EzICAgICAgICAgICAsMHgxOTY1ZmVhICAgICAgICAgICwweDMwYjUwNTcgICAgICAgICAgLAogICAgICAgICAgICAweDVkNjgxZjMgICAgICAgICAgLDB4YjMyMGQwMyAgICAgICAgICAsMHgxNTc4NGE0MCAgICAgICAgICwweDI5MmM1YmRkICAgICAgICAgLAogICAgICAgICAgICAweDRlZjU3YjliICAgICAgICAgLDB4OTc2YmQ5OTUgICAgICAgICAsMHgxMjI2MjRlMzIgICAgICAgICwweDIyY2UwM2NkNSAgICAgICAgLAogICAgICAgICAgICAweDQyYmVlZjgwOCAgICAgICAgLDB4N2ZmZmZmZmZmICAgICAgICAsMHhmNTc3ZWRlZDUgICAgICAgICwweDFkNmJkOGIyZWIgICAgICAgLAogICAgICAgICAgICAweDM4NmJmZGJhMjkgICAgICAgLDB4NmMzMzkwZWNjOCAgICAgICAsMHhjZjgwMTQ3NjBmICAgICAgICwweDE4ZGVkOTFmMGU3ICAgICAgLAogICAgICAgICAgICAweDJmYjFkOGZlMDgyICAgICAgLDB4NWI3NzE5NTViMzYgICAgICAsMHhhZjY3YTkzYmI1MCAgICAgICwweDE1MDYwYzI1NmNiMiAgICAgLAogICAgICAgICAgICAweDI4NTE0NWYzMWFlNSAgICAgLDB4NGQ1MTU2NjM5NzA4ICAgICAsMHg5NDQ2MjBiMGU3MGUgICAgICwweDExYzU5Mjc2MWM2NjYgICAgLAogICAgICAgICAgICAweDIyMTRkMTBkMDE0ZWEgICAgLDB4NDE1YmM2ZDZmYjdkZCAgICAsMHg3ZDU2ZTc2Nzc3ZmM1ICAgICwweGYwNWRjNmIyN2VkYWQgICAgLAogICAgICAgICAgICAweDFjY2Y0YjQ0YmI0ODIwICAgLDB4MzczZmM0NTZjNTNiYjcgICAsMHg2OWYzZDFjOTIxODkxYyAgICwweGNiMmZmNTI5ZWI3MWU0ICAgLAogICAgICAgICAgICAweDE4NWE4MmI4N2I3MmU5NSAgLDB4MmViNDBmOWY2MjBmZGE2ICAsMHg1OTkwNjgxZDk2MWExZWEgICwweGFiYzI1MjA0ZTAyODI4ZCAgLAogICAgICAgICAgICAweDE0OTYyZGVlOWRjOTc2NDAgLDB4Mjc3YWJkY2RhYjA3ZDVhNyAsMHg0YmI1ZWNjYTk2M2Q1NGFiICwweDkxMzEyNzE5MjJlYWE2MDYgLAogICAgICAgICAgICAweDExNjcwMWU2YWIwY2QxODhkLDB4MjE1Zjc3YzA0NWZiZTg4NTYsMHgzZmZmZmZmZmZmZmZmZmZmZiwweDdhYmJmNmY2YWJiOWQwODdmLAogICAgICAgIH07CiAgICAgICAgU2luY2Ugd2UgY2Fubm90IHVzZSBhbiBhcnJheSBvZiBjb25zdGFudHMsIHdlIG5lZWQgdG8gYXBwcm94aW1hdGUgdGhlIG1heGltdW0gdmFsdWUgZHluYW1pY2FsbHkuCiAgICAgICAgRm9yIGEgcHJlY2lzaW9uIG9mIDMyLCB0aGUgbWF4aW11bSB2YWx1ZSBwZXJtaXR0ZWQgaXMgTUFYX0ZJWEVEX0VYUF8zMi4KICAgICAgICBGb3IgZWFjaCBhZGRpdGlvbmFsIHByZWNpc2lvbiB1bml0LCB0aGUgbWF4aW11bSB2YWx1ZSBwZXJtaXR0ZWQgaW5jcmVhc2VzIGJ5IGFwcHJveGltYXRlbHkgMS45LgogICAgICAgIFNvIGluIG9yZGVyIHRvIGNhbGN1bGF0ZSBpdCwgd2UgbmVlZCB0byBtdWx0aXBseSBNQVhfRklYRURfRVhQXzMyIGJ5IDEuOSBmb3IgZXZlcnkgYWRkaXRpb25hbCBwcmVjaXNpb24gdW5pdC4KICAgICAgICBBbmQgaW4gb3JkZXIgdG8gb3B0aW1pemUgZm9yIHNwZWVkLCB3ZSBtdWx0aXBseSBNQVhfRklYRURfRVhQXzMyIGJ5IDEuOV4yIGZvciBldmVyeSAyIGFkZGl0aW9uYWwgcHJlY2lzaW9uIHVuaXRzLgogICAgICAgIEhlbmNlIHRoZSBnZW5lcmFsIGZ1bmN0aW9uIGZvciBtYXBwaW5nIGEgZ2l2ZW4gcHJlY2lzaW9uIHRvIHRoZSBtYXhpbXVtIHZhbHVlIHBlcm1pdHRlZCBpczoKICAgICAgICAtIHByZWNpc2lvbiA9IFszMiwgMzQsIDM2LCAuLi4sIDYyXQogICAgICAgIC0gTWF4Rml4ZWRFeHAocHJlY2lzaW9uKSA9IE1BWF9GSVhFRF9FWFBfMzIgKiAzLjYxIF4gKHByZWNpc2lvbiAvIDIgLSAxNikKICAgICAgICBTaW5jZSB3ZSBjYW5ub3QgdXNlIG5vbi1pbnRlZ2Vycywgd2UgZG8gTUFYX0ZJWEVEX0VYUF8zMiAqIDM2MSBeIChwcmVjaXNpb24gLyAyIC0gMTYpIC8gMTAwIF4gKHByZWNpc2lvbiAvIDIgLSAxNikuCiAgICAgICAgQnV0IHRoZXJlIGlzIGEgYmV0dGVyIGFwcHJveGltYXRpb24sIGJlY2F1c2UgdGhpcyAiMS45IiBmYWN0b3IgaW4gZmFjdCBleHRlbmRzIGJleW9uZCBhIHNpbmdsZSBkZWNpbWFsIGRpZ2l0LgogICAgICAgIFNvIGluc3RlYWQsIHdlIHVzZSAweGViNWVjNTk3NTk1OWM1NjUgLyAweDQwMDAwMDAwMDAwMDAwMDAsIHdoaWNoIHlpZWxkcyBtYXhpbXVtIHZhbHVlcyBxdWl0ZSBjbG9zZSB0byByZWFsIG9uZXM6CiAgICAgICAgbWF4RXhwQXJyYXkgPSB7CiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0sLS0tLS0tLS0tLS0tLS0tLS0tLSwtLS0tLS0tLS0tLS0tLS0tLS0tLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4Mzg2YmZkYmEyOSAgICAgICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweGNmODAxNDc2MGUgICAgICAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MmZiMWQ4ZmUwN2IgICAgICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweGFmNjdhOTNiYjM3ICAgICAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4Mjg1MTQ1ZjMxYThmICAgICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDk0NDYyMGIwZTVlZSAgICAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MjIxNGQxMGQwMTEyZSAgICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDdkNTZlNzY3NzczOGUgICAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MWNjZjRiNDRiYjIwZDAgICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDY5ZjNkMWM5MjEwZDI3ICAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MTg1YTgyYjg3YjViMjk0ICAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDU5OTA2ODFkOTVkNDM3MSAgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MTQ5NjJkZWU5ZGJkNjcyYiAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDRiYjVlY2NhOTYxZmI5YmYgLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgICAgIDB4MTE2NzAxZTZhYjA5NjcwODAsLS0tLS0tLS0tLS0tLS0tLS0tLSwweDNmZmZmZmZmZmZmZmU2NjUyLC0tLS0tLS0tLS0tLS0tLS0tLS0sCiAgICAgICAgfTsKICAgICovCiAgICBmdW5jdGlvbiBmaXhlZEV4cCh1aW50MjU2IF94LCB1aW50OCBfcHJlY2lzaW9uKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBtYXhFeHAgPSBNQVhfRklYRURfRVhQXzMyOwogICAgICAgIGZvciAodWludDggcCA9IDMyOyBwIDwgX3ByZWNpc2lvbjsgcCArPSAyKQogICAgICAgICAgICBtYXhFeHAgPSAobWF4RXhwICogMHhlYjVlYzU5NzU5NTljNTY1KSA+PiAoNjQtMik7CiAgICAgICAgCiAgICAgICAgYXNzZXJ0KF94IDw9IG1heEV4cCk7CiAgICAgICAgcmV0dXJuIGZpeGVkRXhwVW5zYWZlKF94LCBfcHJlY2lzaW9uKTsKICAgIH0KCiAgICAvKioKICAgICAgICBmaXhlZEV4cCAKICAgICAgICBDYWxjdWxhdGVzIGUgXiB4IGFjY29yZGluZyB0byBtYWNsYXVyZW4gc3VtbWF0aW9uOgoKICAgICAgICBlXnggPSAxICsgeCArIHggXiAyIC8gMiEuLi4rIHggXiBuIC8gbiEKCiAgICAgICAgYW5kIHJldHVybnMgZSBeICh4ID4+IDMyKSA8PCAzMiwgdGhhdCBpcywgdXBzaGlmdGVkIGZvciBhY2N1cmFjeQoKICAgICAgICBJbnB1dCByYW5nZToKICAgICAgICAgICAgLSBGdW5jdGlvbiBvayBhdCAgICA8PSAyNDIzMjk5NTg5NTMgCiAgICAgICAgICAgIC0gRnVuY3Rpb24gZmFpbHMgYXQgPj0gMjQyMzI5OTU4OTU0CgogICAgICAgIFRoaXMgbWV0aG9kIGlzIGlzIHZpc2libGUgZm9yIHRlc3RjYXNlcywgYnV0IG5vdCBtZWFudCBmb3IgZGlyZWN0IHVzZS4gCiAKICAgICAgICBUaGUgdmFsdWVzIGluIHRoaXMgbWV0aG9kIGJlZW4gZ2VuZXJhdGVkIHZpYSB0aGUgZm9sbG93aW5nIHB5dGhvbiBzbmlwcGV0OiAKCiAgICAgICAgZGVmIGNhbGN1bGF0ZUZhY3RvcmlhbHMoKToKICAgICAgICAgICAgIiIiTWV0aG9kIHRvIHByaW50IG91dCB0aGUgZmFjdG9yaWFscyBmb3IgZml4ZWRFeHAiIiIKCiAgICAgICAgICAgIG5pID0gW10KICAgICAgICAgICAgbmkuYXBwZW5kKDI5NTIzMjc5OTAzOTYwNDE0MDg0NzYxODYwOTY0MzUyMDAwMDAwMCkgIyAzNCEKICAgICAgICAgICAgSVRFUkFUSU9OUyA9IDM0CiAgICAgICAgICAgIGZvciBuIGluIHJhbmdlKDEsIElURVJBVElPTlMsIDEpIDoKICAgICAgICAgICAgICAgIG5pLmFwcGVuZChtYXRoLmZsb29yKG5pW24gLSAxXSAvIG4pKQogICAgICAgICAgICBwcmludCggIlxuICAgICAgICAiLmpvaW4oWyJ4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uO1xuICAgICAgICByZXMgKz0geGkgKiAlczsiICUgaGV4KGludCh4KSkgZm9yIHggaW4gbmldKSkKCiAgICAqLwogICAgZnVuY3Rpb24gZml4ZWRFeHBVbnNhZmUodWludDI1NiBfeCwgdWludDggX3ByZWNpc2lvbikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeGkgPSBfeDsKICAgICAgICB1aW50MjU2IHJlcyA9IHVpbnQyNTYoMHhkZTFiYzRkMTllZmNhYzgyNDQ1ZGE3NWIwMDAwMDAwMCkgPDwgX3ByZWNpc2lvbjsKCiAgICAgICAgcmVzICs9IHhpICogMHhkZTFiYzRkMTllZmNhYzgyNDQ1ZGE3NWIwMDAwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4NmYwZGUyNjhjZjdlNTY0MTIyMmVkM2FkODAwMDAwMDA7CiAgICAgICAgeGkgPSAoeGkgKiBfeCkgPj4gX3ByZWNpc2lvbjsKICAgICAgICByZXMgKz0geGkgKiAweDI1MDRhMGNkOWE3ZjcyMTViNjBmOWJlNDgwMDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHg5NDEyODMzNjY5ZmRjODU2ZDgzZTZmOTIwMDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHgxZDlkNGQ3MTQ4NjVmNGRlMmIzZmFmZWEwMDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHg0ZWY4Y2U4MzZiYmE4Y2ZiMWRmZjJhNzAwMDAwMDA7CiAgICAgICAgeGkgPSAoeGkgKiBfeCkgPj4gX3ByZWNpc2lvbjsKICAgICAgICByZXMgKz0geGkgKiAweGI0ODFkODA3ZDFhYTY2ZDA0NDkwNjEwMDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHgxNjkwM2IwMGZhMzU0Y2RhMDg5MjBjMjAwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4MjgxY2RhYWM2NzdiMzM0YWI5ZTczMjAwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4NDAyZTJhYWQ3MjVlYjg3NzhmZDg1MDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHg1ZDVhNmM5ZjMxZmUyMzk2YTJhZjAwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4N2M3ODkwZDQ0MmE4MmY3MzgzOTQwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4OTkzMWVkNTQwMzQ1MjZiNThlNDAwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHhhZjE0N2NmMjRjZTE1MGNmN2UwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4YmFjMDg1NDZiODY3Y2RhYTIwMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4YmFjMDg1NDZiODY3Y2RhYTIwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHhhZmM0NDEzMzgwNjFiMjgyMDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4OWMzY2FiYmMwMDU2ZDc5MDAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4ODM5MTY4MzI4NzA1YzMwMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHg2OTQxMjAyODZjMDQ5YzAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4NTAzMTllOThiM2QyYzAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4M2E1MmExZTM2YjgyMDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHgyODkyODZlMGZjZTAwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4MWIwYzU5ZWI1MzQwMDsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4MTE0Zjk1YjU1NDAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHhhYTcyMTBkMjAwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHg2NTAxMzk2MDA7CiAgICAgICAgeGkgPSAoeGkgKiBfeCkgPj4gX3ByZWNpc2lvbjsKICAgICAgICByZXMgKz0geGkgKiAweDM5Yjc4ZTgwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHgxZmQ4MDgwOwogICAgICAgIHhpID0gKHhpICogX3gpID4+IF9wcmVjaXNpb247CiAgICAgICAgcmVzICs9IHhpICogMHgxMGZiYzA7CiAgICAgICAgeGkgPSAoeGkgKiBfeCkgPj4gX3ByZWNpc2lvbjsKICAgICAgICByZXMgKz0geGkgKiAweDhjNDA7CiAgICAgICAgeGkgPSAoeGkgKiBfeCkgPj4gX3ByZWNpc2lvbjsKICAgICAgICByZXMgKz0geGkgKiAweDQ2MjsKICAgICAgICB4aSA9ICh4aSAqIF94KSA+PiBfcHJlY2lzaW9uOwogICAgICAgIHJlcyArPSB4aSAqIDB4MjI7CgogICAgICAgIHJldHVybiByZXMgLyAweGRlMWJjNGQxOWVmY2FjODI0NDVkYTc1YjAwMDAwMDAwOwogICAgfQp9CgoKY29udHJhY3QgQmFzaWNFUkMyMFRva2VuIHsKICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1Rva2VuIDAuMSc7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnSXZhblwncyBUcmFja2FibGUgVG9rZW4nOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnSVRUJzsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2VkOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZXZlbnQgQmFsYW5jZUNoZWNrKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgICAgICAvL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUgZ29lcyBvbiwgeW91IG5lZWQgdG8gY2hlY2sgaWYgaXQgZG9lc24ndCB3cmFwLgogICAgICAgIC8vUmVwbGFjZSB0aGUgaWYgd2l0aCB0aGlzIG9uZSBpbnN0ZWFkLgogICAgICAgIC8vaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4KICAgICAgICAvL2lmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvKiBGdW5jdGlvbnMgYmVsb3cgYXJlIHNwZWNpZmljIHRvIHRoaXMgdG9rZW4gYW5kCiAgICAgKiBub3QgcGFydCBvZiB0aGUgRVJDLTIwIHN0YW5kYXJkICovCgogICAgZnVuY3Rpb24gZGVwb3NpdCgpIHBheWFibGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1zZy52YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IGFtb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgYW1vdW50KSByZXR1cm4gZmFsc2U7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gYW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5IC09IGFtb3VudDsKICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChhbW91bnQpKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IGFtb3VudDsKICAgICAgICAgICAgdG90YWxTdXBwbHkgKz0gYW1vdW50OwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQoKCmNvbnRyYWN0IER1bW15QmFuY29yVG9rZW4gaXMgQmFzaWNFUkMyMFRva2VuLCBCYW5jb3JGb3JtdWxhIHsKCiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1Rva2VuIDAuMSc7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnRHVtbXkgQ29uc3RhbnQgUmVzZXJ2ZSBSYXRlIFRva2VuJzsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gJ0RCVCc7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsKCiAgICB1aW50OCBwdWJsaWMgcmF0aW8gPSAxMDsgLy8gQ1JSIG9mIDEwJQoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyID0gMHgwOwoKICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBpbmRleGVkIHNlbmRlcik7CiAgICBldmVudCBXaXRoZHJhdyh1aW50MjU2IGFtb3VudCk7CgogICAgLyogSSBjYW4ndCBtYWtlIE15RXRoZXJXYWxsZXQgc2VuZCBwYXltZW50cyBhcyBwYXJ0IG9mIGNvbnN0cnVjdG9yIGNhbGxzCiAgICAgKiB3aGlsZSBjcmVhdGluZyBjb250cmFjdHMuIFNvIGluc3RlYWQgb2YgaW1wbGVtZW50aW5nIGEgY29uc3RydWN0b3IsCiAgICAgKiB3ZSBmb2xsb3cgdGhlIFNldFVwL1RlYXJEb3duIHBhcmFkaWdtICovCiAgICBmdW5jdGlvbiBzZXRVcCh1aW50MjU2IF9pbml0aWFsU3VwcGx5KSBwYXlhYmxlIHsKICAgICAgICBpZiAob3duZXIgIT0gMCkgcmV0dXJuOwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9pbml0aWFsU3VwcGx5OwogICAgICAgIHRvdGFsU3VwcGx5ID0gX2luaXRpYWxTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gdGVhckRvd24oKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHJldHVybjsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlc2VydmVCYWxhbmNlKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0aGlzLmJhbGFuY2U7CiAgICB9CgogICAgLy8gT3VyIHJlc2VydmUgdG9rZW4gaXMgYWx3YXlzIEVUSC4KICAgIGZ1bmN0aW9uIGRlcG9zaXQoKSBwYXlhYmxlIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgcmV0dXJuIGZhbHNlOwogICAgICAgIHVpbnQyNTYgdG9rZW5zUHVyY2hhc2VkID0gY2FsY3VsYXRlUHVyY2hhc2VSZXR1cm4odG90YWxTdXBwbHksIHJlc2VydmVCYWxhbmNlKCksIHJhdGlvLCBtc2cudmFsdWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2Vuc1B1cmNoYXNlZDsKICAgICAgICB0b3RhbFN1cHBseSArPSB0b2tlbnNQdXJjaGFzZWQ7CiAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IGFtb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgYW1vdW50KSByZXR1cm4gZmFsc2U7CiAgICAgICAgdWludDI1NiBldGhBbW91bnQgPSBjYWxjdWxhdGVTYWxlUmV0dXJuKHRvdGFsU3VwcGx5LCByZXNlcnZlQmFsYW5jZSgpLCByYXRpbywgYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBhbW91bnQ7CiAgICAgICAgdG90YWxTdXBwbHkgLT0gYW1vdW50OwogICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGV0aEFtb3VudCkpIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgICAgICAgICB0b3RhbFN1cHBseSArPSBhbW91bnQ7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgV2l0aGRyYXcoYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCn0='.
	

]
