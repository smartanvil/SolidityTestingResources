Class {
	#name : #SRT4687f9def6e81ea36c43cc1b9dac319987b124c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4687f9def6e81ea36c43cc1b9dac319987b124c4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLyBFUkMyMCB0b2tlbiBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgb25seSBwYXJ0aWFsbHkuCi8vIFRva2VuIHRyYW5zZmVyIGlzIHByb2hpYml0ZWQgZHVlIHRvIHNwZWMgKHNlZSBQUkVTQUxFLVNQRUMubWQpLAovLyBoZW5jZSBzb21lIGZ1bmN0aW9ucyBhcmUgbGVmdCB1bmRlZmluZWQ6Ci8vICAtIHRyYW5zZmVyLCB0cmFuc2ZlckZyb20sCi8vICAtIGFwcHJvdmUsIGFsbG93YW5jZS4KCmNvbnRyYWN0IE1hcHRQcmVzYWxlMlRva2VuIHsKICAgIC8vIE1BUFQgVE9LRU4gUFJJQ0U6CiAgICB1aW50MjU2IGNvbnN0YW50IE1BUFRfSU5fRVRIID0gMTAwOyAvLyAxIE1BUFQgPSAwLjAxIEVUSAoKICAgIHVpbnQgY29uc3RhbnQgTUlOX1RSQU5TQUNUSU9OX0FNT1VOVF9FVEggPSAwIGV0aGVyOwoKICAgIHVpbnQgcHVibGljIFBSRVNBTEVfU1RBUlRfREFURSA9IDE1MDY4MzQwMDA7IC8vU3VuIE9jdCAgMSAxMjowMDowMCArMDcgMjAxNwogICAgdWludCBwdWJsaWMgUFJFU0FMRV9FTkRfREFURSA9IDE1MDgxOTg0MDE7IC8vMTcgb2N0IDAwOjAwOjAxICswMAoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yCiAgICAvLy8gQHBhcmFtIF90b2tlbk1hbmFnZXIgVG9rZW4gbWFuYWdlciBhZGRyZXNzLgogICAgZnVuY3Rpb24gTWFwdFByZXNhbGUyVG9rZW4oYWRkcmVzcyBfdG9rZW5NYW5hZ2VyLCBhZGRyZXNzIF9lc2Nyb3cpIHsKICAgICAgICB0b2tlbk1hbmFnZXIgPSBfdG9rZW5NYW5hZ2VyOwogICAgICAgIGVzY3JvdyA9IF9lc2Nyb3c7CiAgICAgICAgUFJFU0FMRV9TVEFSVF9EQVRFID0gbm93OwogICAgfQoKICAgIC8qLwogICAgICogIENvbnN0YW50cwogICAgLyovCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiTUFUIFByZXNhbGUyIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIk1BUFQyIjsKICAgIHVpbnQgICBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICAvLyBDdXAgaXMgMk0gdG9rZW5zCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTl9TVVBQTFlfTElNSVQgPSAyNzAwMDAwICogMSBldGhlciAvIDEgd2VpOwoKICAgIC8qLwogICAgICogIFRva2VuIHN0YXRlCiAgICAvKi8KICAgIGVudW0gUGhhc2UgewogICAgICAgIENyZWF0ZWQsCiAgICAgICAgUnVubmluZywKICAgICAgICBQYXVzZWQsCiAgICAgICAgTWlncmF0aW5nLAogICAgICAgIE1pZ3JhdGVkCiAgICB9CgogICAgUGhhc2UgcHVibGljIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkNyZWF0ZWQ7CgogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOyAvLyBhbW91bnQgb2YgdG9rZW5zIGFscmVhZHkgc29sZAoKICAgIC8vIFRva2VuIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGNhbGwgYWRtaW5pc3RyYXRpdmUKICAgIC8vIGZ1bmN0aW9ucyBvbiB0aGlzIGNvbnRyYWN0LgogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5NYW5hZ2VyOwoKICAgIC8vIEdhdGhlcmVkIGZ1bmRzIGNhbiBiZSB3aXRoZHJhd24gb25seSB0byBlc2Nyb3cncyBhZGRyZXNzLgogICAgYWRkcmVzcyBwdWJsaWMgZXNjcm93OwoKICAgIC8vIENyb3dkc2FsZSBtYW5hZ2VyIGhhcyBleGNsdXNpdmUgcHJpdmVsZWdlcyB0byBidXJuIHByZXNhbGUgdG9rZW5zLgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlTWFuYWdlcjsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgYmFsYW5jZVRhYmxlOwoKICAgIC8qLwogICAgICogTW9kaWZpZXJzCiAgICAvKi8KICAgIG1vZGlmaWVyIG9ubHlUb2tlbk1hbmFnZXIoKSAgICAgeyBpZihtc2cuc2VuZGVyICE9IHRva2VuTWFuYWdlcikgdGhyb3c7IF87IH0KICAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVNYW5hZ2VyKCkgeyBpZihtc2cuc2VuZGVyICE9IGNyb3dkc2FsZU1hbmFnZXIpIHRocm93OyBfOyB9CgogICAgLyovCiAgICAgKiAgRXZlbnRzCiAgICAvKi8KICAgIGV2ZW50IExvZ0J1eShhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgZXRoZXJXZWlJbmNvbWluZywgdWludCB0b2tlbnNTb2xkKTsKICAgIGV2ZW50IExvZ0J1cm4oYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IExvZ1BoYXNlU3dpdGNoKFBoYXNlIG5ld1BoYXNlKTsKICAgIGV2ZW50IExvZ0VzY3Jvd1dlaSh1aW50IGJhbGFuY2VXZWkpOwogICAgZXZlbnQgTG9nRXNjcm93V2VpUmVxKHVpbnQgYmFsYW5jZVdlaSk7CiAgICBldmVudCBMb2dFc2Nyb3dFdGgodWludCBiYWxhbmNlRXRoKTsKICAgIGV2ZW50IExvZ0VzY3Jvd0V0aFJlcSh1aW50IGJhbGFuY2VFdGgpOwogICAgZXZlbnQgTG9nU3RhcnREYXRlKHVpbnQgbmV3ZGF0ZSwgdWludCBvbGREYXRlKTsKCgogICAgLyoqCiAgICAgKiBXaGVuIHNvbWVib2R5IHRyaWVzIHRvIGJ1eSB0b2tlbnMgZm9yIFggZXRoLCBjYWxjdWxhdGUgaG93IG1hbnkgdG9rZW5zIHRoZXkgZ2V0LgogICAgICoKICAgICAqIEBwYXJhbSB2YWx1ZVdlaSAtIFdoYXQgaXMgdGhlIHZhbHVlIG9mIHRoZSB0cmFuc2FjdGlvbiBzZW5kIGluIGFzIHdlaQogICAgICogQHJldHVybiBBbW91bnQgb2YgdG9rZW5zIHRoZSBpbnZlc3RvciByZWNlaXZlcwogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQcmljZSh1aW50IHZhbHVlV2VpKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG9rZW5BbW91bnQpIHsKICAgICAgdWludCByZXMgPSB2YWx1ZVdlaSAqIE1BUFRfSU5fRVRIOwogICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIC8qLwogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8qLwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF9vd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5Q3Jvd2RzYWxlTWFuYWdlcgogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgLy8gQXZhaWxhYmxlIG9ubHkgZHVyaW5nIG1pZ3JhdGlvbiBwaGFzZQogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5NaWdyYXRpbmcpIHJldHVybiAxOwoKICAgICAgICB1aW50IHRva2VucyA9IGJhbGFuY2VUYWJsZVtfb3duZXJdOwogICAgICAgIGlmKHRva2VucyA9PSAwKSByZXR1cm4gMjsKICAgICAgICB0b3RhbFN1cHBseSAtPSB0b2tlbnM7CiAgICAgICAgYmFsYW5jZVRhYmxlW19vd25lcl0gPSAwOwogICAgICAgIExvZ0J1cm4oX293bmVyLCB0b2tlbnMpOwoKICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IHN3aXRjaCBwaGFzZSB3aGVuIG1pZ3JhdGlvbiBpcyBkb25lLgogICAgICAgIGlmKHRvdGFsU3VwcGx5ID09IDApIHsKICAgICAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuTWlncmF0ZWQ7CiAgICAgICAgICAgIExvZ1BoYXNlU3dpdGNoKFBoYXNlLk1pZ3JhdGVkKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAwOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlVGFibGVbX293bmVyXTsKICAgIH0KCiAgICAvKi8KICAgICAqICBBZG1pbmlzdHJhdGl2ZSBmdW5jdGlvbnMKICAgIC8qLwoKICAgIC8vdGFrZXMgdWludAogICAgZnVuY3Rpb24gc2V0UHJlc2FsZVBoYXNlVUludCh1aW50IHBoYXNlKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlUb2tlbk1hbmFnZXIKICAgIHsKICAgICAgcmVxdWlyZSggdWludChQaGFzZS5NaWdyYXRlZCkgPj0gcGhhc2UgJiYgcGhhc2UgPj0gMCApOwogICAgICBzZXRQcmVzYWxlUGhhc2UoUGhhc2UocGhhc2UpKTsKICAgIH0KCiAgICAvLyB0YWtlcyBlbnVtCiAgICBmdW5jdGlvbiBzZXRQcmVzYWxlUGhhc2UoUGhhc2UgX25leHRQaGFzZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgIF9zZXRQcmVzYWxlUGhhc2UoX25leHRQaGFzZSk7CiAgICB9CgogICAgZnVuY3Rpb24gX3NldFByZXNhbGVQaGFzZShQaGFzZSBfbmV4dFBoYXNlKQogICAgICAgIHByaXZhdGUKICAgIHsKICAgICAgICBib29sIGNhblN3aXRjaFBoYXNlCiAgICAgICAgICAgID0gIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuQ3JlYXRlZCAmJiBfbmV4dFBoYXNlID09IFBoYXNlLlJ1bm5pbmcpCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUnVubmluZyAmJiBfbmV4dFBoYXNlID09IFBoYXNlLlBhdXNlZCkKICAgICAgICAgICAgICAgIC8vIHN3aXRjaCB0byBtaWdyYXRpb24gcGhhc2Ugb25seSBpZiBjcm93ZHNhbGUgbWFuYWdlciBpcyBzZXQKICAgICAgICAgICAgfHwgKChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUnVubmluZyB8fCBjdXJyZW50UGhhc2UgPT0gUGhhc2UuUGF1c2VkKQogICAgICAgICAgICAgICAgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5NaWdyYXRpbmcKICAgICAgICAgICAgICAgICYmIGNyb3dkc2FsZU1hbmFnZXIgIT0gMHgwKQogICAgICAgICAgICB8fCAoY3VycmVudFBoYXNlID09IFBoYXNlLlBhdXNlZCAmJiBfbmV4dFBoYXNlID09IFBoYXNlLlJ1bm5pbmcpCiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0ZWQgb25seSBpZiBldmVyeXRpbmcgaXMgbWlncmF0ZWQKICAgICAgICAgICAgfHwgKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5NaWdyYXRpbmcgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5NaWdyYXRlZAogICAgICAgICAgICAgICAgJiYgdG90YWxTdXBwbHkgPT0gMCk7CgogICAgICAgIGlmKCFjYW5Td2l0Y2hQaGFzZSkgdGhyb3c7CiAgICAgICAgY3VycmVudFBoYXNlID0gX25leHRQaGFzZTsKICAgICAgICBMb2dQaGFzZVN3aXRjaChfbmV4dFBoYXNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVNYW5hZ2VyKGFkZHJlc3MgX21ncikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgICAgLy8gWW91IGNhbid0IGNoYW5nZSBjcm93ZHNhbGUgY29udHJhY3Qgd2hlbiBtaWdyYXRpb24gaXMgaW4gcHJvZ3Jlc3MuCiAgICAgICAgaWYoY3VycmVudFBoYXNlID09IFBoYXNlLk1pZ3JhdGluZykgdGhyb3c7CiAgICAgICAgY3Jvd2RzYWxlTWFuYWdlciA9IF9tZ3I7CiAgICB9CgogICAgLyoqIGJ1eSB0b2tlbnMgZm9yIEVodGVyICovCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfYnV5ZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgewogICAgICAgIHJlcXVpcmUodG90YWxTdXBwbHkgPCBUT0tFTl9TVVBQTFlfTElNSVQpOwogICAgICAgIHVpbnQgdmFsdWVXZWkgPSBtc2cudmFsdWU7CgogICAgICAgIC8vY29uZGl0aW9ucwogICAgICAgIHJlcXVpcmUoY3VycmVudFBoYXNlID09IFBoYXNlLlJ1bm5pbmcpOwogICAgICAgIHJlcXVpcmUodmFsdWVXZWkgPj0gTUlOX1RSQU5TQUNUSU9OX0FNT1VOVF9FVEgpOwogICAgICAgIHJlcXVpcmUobm93ID49IFBSRVNBTEVfU1RBUlRfREFURSk7CiAgICAgICAgcmVxdWlyZShub3cgPD0gUFJFU0FMRV9FTkRfREFURSk7CgogICAgICAgIHVpbnQgbmV3VG9rZW5zID0gY2FsY3VsYXRlUHJpY2UodmFsdWVXZWkpOwoKICAgICAgICByZXF1aXJlKG5ld1Rva2VucyA+IDApOwogICAgICAgIHJlcXVpcmUodG90YWxTdXBwbHkgKyBuZXdUb2tlbnMgPD0gVE9LRU5fU1VQUExZX0xJTUlUKTsKCiAgICAgICAgdG90YWxTdXBwbHkgKz0gbmV3VG9rZW5zOwogICAgICAgIGJhbGFuY2VUYWJsZVtfYnV5ZXJdICs9IG5ld1Rva2VuczsKCiAgICAgICAgTG9nQnV5KF9idXllciwgdmFsdWVXZWksIG5ld1Rva2Vucyk7CiAgICB9CgogICAgLyoqCiAgICAgKiByZXR1cm4gdmFsdWVzOiAwIC0gT0ssIDEgLSBiYWxhbmNlIGlzIHplcm8sIDIgLSBjYW5ub3Qgc2VuZCB0byBlc2Nyb3cKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdXZWkodWludCBiYWxXZWkpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgLy8gQXZhaWxhYmxlIGF0IGFueSBwaGFzZS4KICAgICAgICBMb2dFc2Nyb3dXZWlSZXEoYmFsV2VpKTsKICAgICAgICBpZih0aGlzLmJhbGFuY2UgPj0gYmFsV2VpKSB7CiAgICAgICAgICAgIGVzY3Jvdy50cmFuc2ZlcihiYWxXZWkpOwogICAgICAgICAgICBMb2dFc2Nyb3dXZWkoYmFsV2VpKTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxOwogICAgfQoKICAgIC8qKgogICAgICogcmV0dXJuIHZhbHVlczogMCAtIE9LLCAxIC0gYmFsYW5jZSBpcyB6ZXJvLCAyIC0gY2Fubm90IHNlbmQgdG8gZXNjcm93CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIodWludCBzdW1FdGhlcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5VG9rZW5NYW5hZ2VyCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICAvLyBBdmFpbGFibGUgYXQgYW55IHBoYXNlLgogICAgICAgIExvZ0VzY3Jvd0V0aFJlcShzdW1FdGhlcik7CiAgICAgICAgdWludCBzdW1XZWkgPSBzdW1FdGhlciAqIDEgZXRoZXIgLyAxIHdlaTsKICAgICAgICBpZih0aGlzLmJhbGFuY2UgPj0gc3VtV2VpKSB7CiAgICAgICAgICAgIGVzY3Jvdy50cmFuc2ZlcihzdW1XZWkpOwogICAgICAgICAgICBMb2dFc2Nyb3dXZWkoc3VtV2VpKTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxOwogICAgfQp9'.
	

]
