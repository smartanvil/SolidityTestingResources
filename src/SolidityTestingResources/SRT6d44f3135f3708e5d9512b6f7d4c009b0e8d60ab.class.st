Class {
	#name : #SRT6d44f3135f3708e5d9512b6f7d4c009b0e8d60ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6d44f3135f3708e5d9512b6f7d4c009b0e8d60ab >> base64 [
	^ ''.
	

]
