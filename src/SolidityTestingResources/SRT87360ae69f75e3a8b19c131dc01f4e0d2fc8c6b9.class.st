Class {
	#name : #SRT87360ae69f75e3a8b19c131dc01f4e0d2fc8c6b9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87360ae69f75e3a8b19c131dc01f4e0d2fc8c6b9 >> base64 [
	^ ''.
	

]
