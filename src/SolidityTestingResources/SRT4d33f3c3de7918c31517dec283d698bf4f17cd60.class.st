Class {
	#name : #SRT4d33f3c3de7918c31517dec283d698bf4f17cd60,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d33f3c3de7918c31517dec283d698bf4f17cd60 >> base64 [
	^ ''.
	

]
