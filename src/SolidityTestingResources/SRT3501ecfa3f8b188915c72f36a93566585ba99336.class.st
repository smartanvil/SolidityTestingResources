Class {
	#name : #SRT3501ecfa3f8b188915c72f36a93566585ba99336,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3501ecfa3f8b188915c72f36a93566585ba99336 >> base64 [
	^ ''.
	

]
