Class {
	#name : #SRTec4A8dBBc717Af02E570B3FBA82Bb13b83C3D32d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec4A8dBBc717Af02E570B3FBA82Bb13b83C3D32d >> base64 [
	^ ''.
	

]
