Class {
	#name : #SRT1cce39da85ff2d5ceae92a810447b52df13f9267,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1cce39da85ff2d5ceae92a810447b52df13f9267 >> base64 [
	^ ''.
	

]
