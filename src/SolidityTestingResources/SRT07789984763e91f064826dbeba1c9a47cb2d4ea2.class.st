Class {
	#name : #SRT07789984763e91f064826dbeba1c9a47cb2d4ea2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07789984763e91f064826dbeba1c9a47cb2d4ea2 >> base64 [
	^ ''.
	

]
