Class {
	#name : #SRT3d9210f1cca179eb2a1fbab381e7ed09780a3942,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3d9210f1cca179eb2a1fbab381e7ed09780a3942 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cgp9Ci8vLyBAdGl0bGUgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9Cn0KCmNvbnRyYWN0IEJhc2ljVG9rZW4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgdWludCBwdWJsaWMgdG90YWxUb2tlblN1cHBseTsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKCiAgICAvKioqKioKICAgICAgICAqIEBkZXYgVHJhbmZlciB0aGUgdG9rZW4gYmFsYW5jZSB0byBhIHNwZWNpZmllZCBhZGRyZXNzCiAgICAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvCiAgICAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSB2YWx1ZSB0byBiZSB0cmFuc2ZlcnJlZAogICAgICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKioqKgogICAgICAgICogQGRldiBHZXRzIHRoZSBiYWxhbmNlcyBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MKICAgICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIGJhbGFuY2Ugb2YKICAgICAgICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MKICAgICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8qKioqKgogICAgICAgICogQGRldiBHZXRzIHRoZSB0b3RhbFN1cHBseSBvZiB0aGUgdG9rZW5zLgogICAgICAgICovCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG90YWxTdXBwbHkpIHsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsVG9rZW5TdXBwbHk7CiAgICB9Cn0KCmNvbnRyYWN0IFRva2VuIGlzIEJhc2ljVG9rZW4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgc3RyaW5nIHB1YmxpYyB0b2tlbk5hbWU7IC8vIERlZmluZXMgdGhlIG5hbWUgb2YgdGhlIHRva2VuLgogICAgc3RyaW5nIHB1YmxpYyB0b2tlblN5bWJvbDsgLy8gRGVmaW5lcyB0aGUgc3ltYm9sIG9mIHRoZSB0b2tlbi4KICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzOyAvLyBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIHRoZSB0b2tlbi4KCiAgICAvKioqKioKICAgICAgICAqIEBkZXYgU2V0cyB0aGUgdmFyaWFibGVzIHJlbGF0ZWQgdG8gdGhlIFRva2VuCiAgICAgICAgKiBAcGFyYW0gX25hbWUgICAgICAgICAgICAgIHN0cmluZyAgICAgIFRoZSBuYW1lIG9mIHRoZSBUb2tlbgogICAgICAgICogQHBhcmFtIF9zeW1ib2wgICAgICAgICAgICBzdHJpbmcgICAgICBEZWZpbmVzIHRoZSBUb2tlbiBTeW1ib2wKICAgICAgICAqIEBwYXJhbSBfaW5pdGlhbFN1cHBseSAgICAgdWludDI1NiAgICAgVGhlIHRvdGFsIG51bWJlciBvZiB0aGUgdG9rZW5zIGF2YWlsYWJsZQogICAgICAgICogQHBhcmFtIF9kZWNpbWFscyAgICAgICAgICB1aW50MjU2ICAgICBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgcGxhY2VzIG9mIHRoZSB0b2tlbgogICAgICAgICovCiAgICBmdW5jdGlvbiBUb2tlbihzdHJpbmcgX25hbWUsIHN0cmluZyBfc3ltYm9sLCB1aW50MjU2IF9pbml0aWFsU3VwcGx5LCB1aW50MjU2IF9kZWNpbWFscyl7CiAgICAgICAgcmVxdWlyZShfaW5pdGlhbFN1cHBseSA+IDApOwogICAgICAgIHRva2VuTmFtZSA9IF9uYW1lOwogICAgICAgIHRva2VuU3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgICAgCiAgICB9CiAgICAvKioqKioKICAgICAgICAqIEBkZXYgVHJhbnNmZXIgdGhlIGFtb3VudCBvZiBtb25leSBpbnZlc3RlZCBieSB0aGUgaW52ZXN0b3IgdG8gaGlzIGJhbGFuY2UKICAgICAgICAqIEFsc28sIGtlZXBzIHRyYWNrIG9mIGF0IHdoYXQgcmF0ZSBkaWQgdGhleSBidXkgdGhlIHRva2VuLCBrZWVwcyB0cmFjayBvZgogICAgICAgICogZGlmZmVyZW50IHJhdGVzIG9mIHRva2VucyBhdCBQcmVTYWxlIGFuZCBJQ08KICAgICAgICAqIEBwYXJhbSBfcmVjaXBpZW50ICAgICBhZGRyZXNzICAgICBUaGUgYWRkcmVzcyBvZiB0aGUgaW52ZXN0b3IKICAgICAgICAqIEBwYXJhbSBfdmFsdWUgICAgICAgICB1aW50MjU2ICAgICBUaGUgbnVtYmVyIG9mIHRoZSB0b2tlbnMgYm91Z2h0CiAgICAgICAgKiBAcGFyYW0gX3JhdGVQZXJFVEggICAgdWludDI1NiAgICAgVGhlIHJhdGUgYXQgd2hpY2ggaXQgd2FzIGJvdWdodCwgZGlmZmVyZW50IGZvciBQcmUgU2FsZS9JQ08KICAgICAgICAqIEByZXR1cm4gICAgICAgICAgICAgICBib29sICAgICAgICBSZXR1cm5zIHRydWUsIGlmIGFsbCBnb2VzIGFzIGV4cGVjdGVkCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW5zKGFkZHJlc3MgX3JlY2lwaWVudCwgdWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX3JhdGVQZXJFVEgpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IGZpbmFsQW1vdW50ID0gX3ZhbHVlLm11bChfcmF0ZVBlckVUSCk7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyKF9yZWNpcGllbnQsIGZpbmFsQW1vdW50KTsKICAgIH0KICAgIC8qKioqKgogICAgICAgICogQGRldiBVc2VkIHRvIHJlbW92ZSB0aGUgYmFsYW5jZSwgd2hlbiBhc2tpbmcgZm9yIHJlZnVuZAogICAgICAgICogQHBhcmFtIF9yZWNpcGllbnQgYWRkcmVzcyBUaGUgYmVuZWZpY2lhcnkgb2YgdGhlIHJlZnVuZAogICAgICAgICogQHJldHVybiAgICAgICAgICAgYm9vbCAgICBSZXR1cm5zIHRydWUsIGlmIHN1Y2Nlc3NmdWwKICAgICAgICAqLwogICAgZnVuY3Rpb24gcmVmdW5kZWRBbW91bnQoYWRkcmVzcyBfcmVjaXBpZW50KSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfcmVjaXBpZW50XSAhPSAwKTsKICAgICAgICBiYWxhbmNlc1tfcmVjaXBpZW50XSA9IDA7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
