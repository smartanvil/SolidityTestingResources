Class {
	#name : #SRT0b6ddd1c0b7ab2dffccbbf95002713774677cbec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0b6ddd1c0b7ab2dffccbbf95002713774677cbec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBPd25lZCB7CgogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgcHVibGljIGljbzsKCiAgICBmdW5jdGlvbiBPd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgaWNvID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5SUNPKCkgewogICAgICAgIAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBpY28pOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2Zlckljb3NoaXAoYWRkcmVzcyBfbmV3SWNvKSBvbmx5T3duZXIgewogICAgICAgIGljbyA9IF9uZXdJY287CiAgICB9Cn0KCgpjb250cmFjdCBUb2tlbiB7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuLE93bmVkIHsKCiAgICBib29sIHB1YmxpYyBsb2NrZWQ7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwogICAgZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsKICAgIAogICAgZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIG9ubHlPd25lciB7CiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOwogICAgICAgIEZyb3plbkZ1bmRzKHRhcmdldCwgZnJlZXplKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICByZXF1aXJlKCFsb2NrZWQpOwogICAgICAgIHJlcXVpcmUoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pOwogICAgICAgIAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICAKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7CiAgICAgICAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CgoKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICByZXF1aXJlKCFsb2NrZWQpOwogICAgICAgIAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgICAgICAKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7ICAgIAogICAgICAgCiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAKCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKCiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwoKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAKICAgICAgICByZXF1aXJlKCFsb2NrZWQpOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0KCgoKY29udHJhY3QgRmNjVG9rZW4gaXMgT3duZWQsIFN0YW5kYXJkVG9rZW4gewoKICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAiVG9rZW4gMC4yIjsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiRmlyc3QgQ2FwaXRhbCBDb2luIjsgICAgICAgIAogICAgCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJGQ0MiOwoKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7CiAgIAogICAgZnVuY3Rpb24gRmNjVG9rZW4oKSB7ICAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDUwMDAwMDAwMCogMTAqKjg7CiAgICAgICAgdG90YWxTdXBwbHkgPSA1MDAwMDAwMDAqIDEwKio4OwogICAgICAgIGxvY2tlZCA9IGZhbHNlOwogICAgfQogICAKICAgIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICAgICAgbG9ja2VkID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGxvY2soKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICAgIGxvY2tlZCA9IHRydWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIAoKICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3JlY2lwaWVudCwgdWludDI1NiBfdmFsdWUpIG9ubHlJQ08gcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIHJlcXVpcmUoX3ZhbHVlID49IDApOwoKICAgICAgICBiYWxhbmNlc1tfcmVjaXBpZW50XSArPSBfdmFsdWU7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gX3ZhbHVlOwoKICAgICAgICBUcmFuc2ZlcigwLCBvd25lciwgX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihvd25lciwgX3JlY2lwaWVudCwgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgIAogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm93OwogICAgfQp9'.
	

]
