Class {
	#name : #SRT76eacde255403972bde24dea3f464d0a4104d7da,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76eacde255403972bde24dea3f464d0a4104d7da >> base64 [
	^ ''.
	

]
