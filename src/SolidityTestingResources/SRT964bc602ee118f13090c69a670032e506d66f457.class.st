Class {
	#name : #SRT964bc602ee118f13090c69a670032e506d66f457,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT964bc602ee118f13090c69a670032e506d66f457 >> base64 [
	^ ''.
	

]
