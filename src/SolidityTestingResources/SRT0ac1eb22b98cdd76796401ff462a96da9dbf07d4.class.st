Class {
	#name : #SRT0ac1eb22b98cdd76796401ff462a96da9dbf07d4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ac1eb22b98cdd76796401ff462a96da9dbf07d4 >> base64 [
	^ ''.
	

]
