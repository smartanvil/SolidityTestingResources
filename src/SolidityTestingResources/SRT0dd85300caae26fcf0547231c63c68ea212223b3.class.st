Class {
	#name : #SRT0dd85300caae26fcf0547231c63c68ea212223b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0dd85300caae26fcf0547231c63c68ea212223b3 >> base64 [
	^ ''.
	

]
