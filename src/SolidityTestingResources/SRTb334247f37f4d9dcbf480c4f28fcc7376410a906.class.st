Class {
	#name : #SRTb334247f37f4d9dcbf480c4f28fcc7376410a906,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb334247f37f4d9dcbf480c4f28fcc7376410a906 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9BdXRob3JpemFibGUuc29sCgpjb250cmFjdCBBdXRob3JpemFibGUgaXMgT3duYWJsZSB7CiAgICBldmVudCBMb2dBY2Nlc3MoYWRkcmVzcyBhdXRoQWRkcmVzcyk7CiAgICBldmVudCBHcmFudChhZGRyZXNzIGF1dGhBZGRyZXNzLCBib29sIGdyYW50KTsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGF1dGg7CgogICAgbW9kaWZpZXIgYXV0aG9yaXplZCgpIHsKICAgICAgICBMb2dBY2Nlc3MobXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShhdXRoW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGF1dGhvcml6ZShhZGRyZXNzIF9hZGRyZXNzKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBHcmFudChfYWRkcmVzcywgdHJ1ZSk7CiAgICAgICAgYXV0aFtfYWRkcmVzc10gPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHVuYXV0aG9yaXplKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIEdyYW50KF9hZGRyZXNzLCBmYWxzZSk7CiAgICAgICAgYXV0aFtfYWRkcmVzc10gPSBmYWxzZTsKICAgIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL21hdGgvU2FmZU1hdGguc29sCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0VSQzIwQmFzaWMuc29sCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0Jhc2ljVG9rZW4uc29sCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjAuc29sCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL1N0YW5kYXJkVG9rZW4uc29sCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICB1aW50MjU2IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL01pbnRhYmxlVG9rZW4uc29sCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgVHJhbnNmZXIoMHgwLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL1R1dGVsbHVzVG9rZW4uc29sCgovKioKICogQHRpdGxlIFR1dGVsbHVzIFRva2VuCiAqIEBhdXRob3IgSmF2aWVyIE9ydGl6CiAqCiAqIEBkZXYgRVJDMjAgVHV0ZWxsdXMgVG9rZW4gKFRVVCkKICovCmNvbnRyYWN0IFR1dGVsbHVzVG9rZW4gaXMgTWludGFibGVUb2tlbiB7CiAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJUdXRlbGx1cyI7CiAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlRVVCI7CiAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4Owp9CgovLyBGaWxlOiBjb250cmFjdHMvVHV0ZWxsdXNWYXVsdC5zb2wKCmNvbnRyYWN0IFR1dGVsbHVzVmF1bHQgaXMgQXV0aG9yaXphYmxlIHsKICAgIGV2ZW50IFZhdWx0TWludChhZGRyZXNzIGluZGV4ZWQgYXV0aEFkZHJlc3MpOwoKICAgIFR1dGVsbHVzVG9rZW4gcHVibGljIHRva2VuOwoKICAgIGZ1bmN0aW9uIFR1dGVsbHVzVmF1bHQoKSBwdWJsaWMgewogICAgICAgIHRva2VuID0gbmV3IFR1dGVsbHVzVG9rZW4oKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIGF1dGhvcml6ZWQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9hbW91bnQgPj0gMCk7CgogICAgICAgIFZhdWx0TWludChtc2cuc2VuZGVyKTsKICAgICAgICByZXR1cm4gdG9rZW4ubWludChfdG8sIF9hbW91bnQpOwogICAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vU2FmZUVSQzIwLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyKEVSQzIwQmFzaWMgdG9rZW4sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlckZyb20oRVJDMjAgdG9rZW4sIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvVG9rZW5WZXN0aW5nLnNvbAoKLy8gVGhpcyBjb2RlIHdhcyBiYXNlZCBvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkuCnByYWdtYSBzb2xpZGl0eSBeMC40LjE1OwoKCgoKCgovKioKICogQHRpdGxlIFRva2VuVmVzdGluZwogKiBAZGV2IEEgdG9rZW4gaG9sZGVyIGNvbnRyYWN0IHRoYXQgY2FuIHJlbGVhc2UgaXRzIHRva2VuIGJhbGFuY2UgZ3JhZHVhbGx5IGxpa2UgYQogKiB0eXBpY2FsIHZlc3Rpbmcgc2NoZW1lLCB3aXRoIGEgY2xpZmYgYW5kIHZlc3RpbmcgcGVyaW9kLiBPcHRpb25hbGx5IHJldm9jYWJsZSBieSB0aGUKICogb3duZXIuCiAqLwpjb250cmFjdCBUb2tlblZlc3RpbmcgaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwoKICBldmVudCBLWUNWYWxpZChhZGRyZXNzIGJlbmVmaWNpYXJ5KTsKICBldmVudCBSZWxlYXNlZCh1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgUmV2b2tlZCgpOwoKICAvLyBiZW5lZmljaWFyeSBvZiB0b2tlbnMgYWZ0ZXIgdGhleSBhcmUgcmVsZWFzZWQKICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgdWludDI1NiBwdWJsaWMgY2xpZmY7CiAgdWludDI1NiBwdWJsaWMgc3RhcnQ7CiAgdWludDI1NiBwdWJsaWMgZHVyYXRpb247CgogIGJvb2wgcHVibGljIHJldm9jYWJsZTsKCiAgLy8gS1lDIHZhbGlkCiAgYm9vbCBwdWJsaWMga3ljVmFsaWQgPSBmYWxzZTsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgcmVsZWFzZWQ7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgcmV2b2tlZDsKCiAgLyoqCiAgICogQGRldiBDcmVhdGVzIGEgdmVzdGluZyBjb250cmFjdCB0aGF0IHZlc3RzIGl0cyBiYWxhbmNlIG9mIGFueSBFUkMyMCB0b2tlbiB0byB0aGUKICAgKiBfYmVuZWZpY2lhcnksIGdyYWR1YWxseSBpbiBhIGxpbmVhciBmYXNoaW9uIHVudGlsIF9zdGFydCArIF9kdXJhdGlvbi4gQnkgdGhlbiBhbGwKICAgKiBvZiB0aGUgYmFsYW5jZSB3aWxsIGhhdmUgdmVzdGVkLgogICAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgYWRkcmVzcyBvZiB0aGUgYmVuZWZpY2lhcnkgdG8gd2hvbSB2ZXN0ZWQgdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZAogICAqIEBwYXJhbSBfY2xpZmYgZHVyYXRpb24gaW4gc2Vjb25kcyBvZiB0aGUgY2xpZmYgaW4gd2hpY2ggdG9rZW5zIHdpbGwgYmVnaW4gdG8gdmVzdAogICAqIEBwYXJhbSBfZHVyYXRpb24gZHVyYXRpb24gaW4gc2Vjb25kcyBvZiB0aGUgcGVyaW9kIGluIHdoaWNoIHRoZSB0b2tlbnMgd2lsbCB2ZXN0CiAgICogQHBhcmFtIF9yZXZvY2FibGUgd2hldGhlciB0aGUgdmVzdGluZyBpcyByZXZvY2FibGUgb3Igbm90CiAgICovCiAgZnVuY3Rpb24gVG9rZW5WZXN0aW5nKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50MjU2IF9zdGFydCwgdWludDI1NiBfY2xpZmYsIHVpbnQyNTYgX2R1cmF0aW9uLCBib29sIF9yZXZvY2FibGUpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9iZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX2NsaWZmIDw9IF9kdXJhdGlvbik7CgogICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CiAgICByZXZvY2FibGUgPSBfcmV2b2NhYmxlOwogICAgZHVyYXRpb24gPSBfZHVyYXRpb247CiAgICBjbGlmZiA9IF9zdGFydC5hZGQoX2NsaWZmKTsKICAgIHN0YXJ0ID0gX3N0YXJ0OwogIH0KCiAgLyoqCiAgICogQG5vdGljZSBUcmFuc2ZlcnMgdmVzdGVkIHRva2VucyB0byBiZW5lZmljaWFyeS4KICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgdG9rZW4gd2hpY2ggaXMgYmVpbmcgdmVzdGVkCiAgICovCiAgZnVuY3Rpb24gcmVsZWFzZShFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgewogICAgcmVxdWlyZShreWNWYWxpZCk7CiAgICB1aW50MjU2IHVucmVsZWFzZWQgPSByZWxlYXNhYmxlQW1vdW50KHRva2VuKTsKCiAgICByZXF1aXJlKHVucmVsZWFzZWQgPiAwKTsKCiAgICByZWxlYXNlZFt0b2tlbl0gPSByZWxlYXNlZFt0b2tlbl0uYWRkKHVucmVsZWFzZWQpOwoKICAgIHRva2VuLnNhZmVUcmFuc2ZlcihiZW5lZmljaWFyeSwgdW5yZWxlYXNlZCk7CgogICAgUmVsZWFzZWQodW5yZWxlYXNlZCk7CiAgfQoKICAvKioKICAgKiBAbm90aWNlIEFsbG93cyB0aGUgb3duZXIgdG8gcmV2b2tlIHRoZSB2ZXN0aW5nLiBUb2tlbnMgYWxyZWFkeSB2ZXN0ZWQKICAgKiByZW1haW4gaW4gdGhlIGNvbnRyYWN0LCB0aGUgcmVzdCBhcmUgcmV0dXJuZWQgdG8gdGhlIG93bmVyLgogICAqIEBwYXJhbSB0b2tlbiBFUkMyMCB0b2tlbiB3aGljaCBpcyBiZWluZyB2ZXN0ZWQKICAgKi8KICBmdW5jdGlvbiByZXZva2UoRVJDMjBCYXNpYyB0b2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHJldm9jYWJsZSk7CiAgICByZXF1aXJlKCFyZXZva2VkW3Rva2VuXSk7CgogICAgdWludDI1NiBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwoKICAgIHVpbnQyNTYgdW5yZWxlYXNlZCA9IHJlbGVhc2FibGVBbW91bnQodG9rZW4pOwogICAgdWludDI1NiByZWZ1bmQgPSBiYWxhbmNlLnN1Yih1bnJlbGVhc2VkKTsKCiAgICByZXZva2VkW3Rva2VuXSA9IHRydWU7CgogICAgdG9rZW4uc2FmZVRyYW5zZmVyKG93bmVyLCByZWZ1bmQpOwoKICAgIFJldm9rZWQoKTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlcyB0aGUgYW1vdW50IHRoYXQgaGFzIGFscmVhZHkgdmVzdGVkIGJ1dCBoYXNuJ3QgYmVlbiByZWxlYXNlZCB5ZXQuCiAgICogQHBhcmFtIHRva2VuIEVSQzIwIHRva2VuIHdoaWNoIGlzIGJlaW5nIHZlc3RlZAogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2FibGVBbW91bnQoRVJDMjBCYXNpYyB0b2tlbikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB2ZXN0ZWRBbW91bnQodG9rZW4pLnN1YihyZWxlYXNlZFt0b2tlbl0pOwogIH0KCiAgLyoqCiAgICogQGRldiBDYWxjdWxhdGVzIHRoZSBhbW91bnQgdGhhdCBoYXMgYWxyZWFkeSB2ZXN0ZWQuCiAgICogQHBhcmFtIHRva2VuIEVSQzIwIHRva2VuIHdoaWNoIGlzIGJlaW5nIHZlc3RlZAogICAqLwogIGZ1bmN0aW9uIHZlc3RlZEFtb3VudChFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjdXJyZW50QmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHVpbnQyNTYgdG90YWxCYWxhbmNlID0gY3VycmVudEJhbGFuY2UuYWRkKHJlbGVhc2VkW3Rva2VuXSk7CgogICAgaWYgKG5vdyA8IGNsaWZmKSB7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChub3cgPj0gc3RhcnQuYWRkKGR1cmF0aW9uKSB8fCByZXZva2VkW3Rva2VuXSkgewogICAgICByZXR1cm4gdG90YWxCYWxhbmNlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRvdGFsQmFsYW5jZS5tdWwobm93LnN1YihzdGFydCkpLmRpdihkdXJhdGlvbik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBzZXRWYWxpZEtZQygpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAga3ljVmFsaWQgPSB0cnVlOwogICAgS1lDVmFsaWQoYmVuZWZpY2lhcnkpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvVHV0ZWxsdXNWZXN0aW5nRmFjdG9yeS5zb2wKCmNvbnRyYWN0IFR1dGVsbHVzVmVzdGluZ0ZhY3RvcnkgaXMgQXV0aG9yaXphYmxlIHsKICAgIGV2ZW50IFZlc3RpbmdDcmVhdGVkKGFkZHJlc3MgaW5kZXhlZCBjb250cmFjdEFkZHJlc3MsIGFkZHJlc3MgaW5kZXhlZCB2ZXN0aW5nQWRkcmVzcywgYWRkcmVzcyBpbmRleGVkIHdhbGxldCwgdWludDI1NiBzdGFydFRpbWUsIHVpbnQyNTYgY2xpZmYsIHVpbnQyNTYgZHVyYXRpb24pOwogICAgZXZlbnQgVmVzdGluZ0tZQ1NldHRlZChhZGRyZXNzIGluZGV4ZWQgd2FsbGV0LCB1aW50MjU2IGNvdW50KTsKICAgIGV2ZW50IFZlc3RpbmdSZWxlYXNlZChhZGRyZXNzIGluZGV4ZWQgd2FsbGV0LCB1aW50MjU2IGNvdW50KTsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3MpKSB2ZXN0aW5nc0NvbnRyYWN0czsKICAgIGFkZHJlc3NbXSBjb250cmFjdHM7CgogICAgVHV0ZWxsdXNUb2tlbiB0b2tlbjsKCiAgICBmdW5jdGlvbiBUdXRlbGx1c1Zlc3RpbmdGYWN0b3J5KAogICAgICAgIGFkZHJlc3MgX3Rva2VuCiAgICApIHB1YmxpYyAKICAgIHsKICAgICAgICByZXF1aXJlKF90b2tlbiAhPSBhZGRyZXNzKDApKTsKICAgICAgICAKICAgICAgICB0b2tlbiA9IFR1dGVsbHVzVG9rZW4oX3Rva2VuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhdXRob3JpemUoYWRkcmVzcyBfYWRkcmVzcykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgc3VwZXIuYXV0aG9yaXplKF9hZGRyZXNzKTsKICAgICAgICBjb250cmFjdHMucHVzaChfYWRkcmVzcyk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VmVzdGluZyhhZGRyZXNzIF9hZGRyZXNzKSBhdXRob3JpemVkIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJldHVybiB2ZXN0aW5nc0NvbnRyYWN0c1ttc2cuc2VuZGVyXVtfYWRkcmVzc107CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VmVzdGluZ0Zyb21Db250cmFjdChhZGRyZXNzIF9jb250cmFjdCwgYWRkcmVzcyBfYWRkcmVzcykgYXV0aG9yaXplZCBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9jb250cmFjdCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXR1cm4gdmVzdGluZ3NDb250cmFjdHNbX2NvbnRyYWN0XVtfYWRkcmVzc107CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlVmVzdGluZyhhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IHN0YXJ0VGltZSwgdWludDI1NiBjbGlmZiwgdWludDI1NiBkdXJhdGlvbikgYXV0aG9yaXplZCBwdWJsaWMgewogICAgICAgIGFkZHJlc3MgdmVzdGluZ0FkZHJlc3MgPSBnZXRWZXN0aW5nKF9hZGRyZXNzKTsKICAgICAgICAvLyBjaGVjaywgaWYgbm90IGhhdmUgYWxyZWFkeSBvbmUKICAgICAgICBpZiAodmVzdGluZ0FkZHJlc3MgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgdmVzdGluZyBjb250cmFjdAogICAgICAgICAgICB2ZXN0aW5nQWRkcmVzcyA9IG5ldyBUb2tlblZlc3RpbmcoX2FkZHJlc3MsIHN0YXJ0VGltZSwgY2xpZmYsIGR1cmF0aW9uLCB0cnVlKTsKICAgICAgICAgICAgVmVzdGluZ0NyZWF0ZWQobXNnLnNlbmRlciwgdmVzdGluZ0FkZHJlc3MsIF9hZGRyZXNzLCBzdGFydFRpbWUsIGNsaWZmLCBkdXJhdGlvbik7CiAgICAgICAgICAgIC8vIHNhdmluZyBmb3IgcmV1c2UKICAgICAgICAgICAgdmVzdGluZ3NDb250cmFjdHNbbXNnLnNlbmRlcl1bX2FkZHJlc3NdID0gdmVzdGluZ0FkZHJlc3M7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldFZhbGlkS1lDKGFkZHJlc3MgX2FkZHJlc3MpIGF1dGhvcml6ZWQgcHVibGljIHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgY291bnQgPSAwOwogICAgICAgIGZvciAodWludDI1NiBjID0gMDsgYyA8IGNvbnRyYWN0cy5sZW5ndGg7IGMgKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBjb250cmFjdEFkZHJlc3MgPSBjb250cmFjdHNbY107CiAgICAgICAgICAgIGFkZHJlc3MgdmVzdGluZ0FkZHJlc3MgPSB2ZXN0aW5nc0NvbnRyYWN0c1tjb250cmFjdEFkZHJlc3NdW19hZGRyZXNzXTsKICAgICAgICAgICAgaWYgKHZlc3RpbmdBZGRyZXNzICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgICAgIFRva2VuVmVzdGluZyh2ZXN0aW5nQWRkcmVzcykuc2V0VmFsaWRLWUMoKTsKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgVmVzdGluZ0tZQ1NldHRlZChfYWRkcmVzcywgY291bnQpOwogICAgICAgIHJldHVybiBjb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiByZWxlYXNlKGFkZHJlc3MgX2FkZHJlc3MpIGF1dGhvcml6ZWQgcHVibGljIHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgY291bnQgPSAwOwogICAgICAgIGZvciAodWludDI1NiBjID0gMDsgYyA8IGNvbnRyYWN0cy5sZW5ndGg7IGMgKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBjb250cmFjdEFkZHJlc3MgPSBjb250cmFjdHNbY107CiAgICAgICAgICAgIGFkZHJlc3MgdmVzdGluZ0FkZHJlc3MgPSB2ZXN0aW5nc0NvbnRyYWN0c1tjb250cmFjdEFkZHJlc3NdW19hZGRyZXNzXTsKICAgICAgICAgICAgaWYgKHZlc3RpbmdBZGRyZXNzICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgICAgIFRva2VuVmVzdGluZyh2ZXN0aW5nQWRkcmVzcykucmVsZWFzZSh0b2tlbik7CiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIFZlc3RpbmdSZWxlYXNlZChfYWRkcmVzcywgY291bnQpOwogICAgICAgIHJldHVybiBjb3VudDsKICAgIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL2Nyb3dkc2FsZS9Dcm93ZHNhbGUuc29sCgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKiBAZGV2IENyb3dkc2FsZSBpcyBhIGJhc2UgY29udHJhY3QgZm9yIG1hbmFnaW5nIGEgdG9rZW4gY3Jvd2RzYWxlLgogKiBDcm93ZHNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KY29udHJhY3QgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBNaW50YWJsZVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgdWludDI1NiBwdWJsaWMgZW5kVGltZTsKCiAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogIHVpbnQyNTYgcHVibGljIHJhdGU7CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCgogIGZ1bmN0aW9uIENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3JhdGUsIGFkZHJlc3MgX3dhbGxldCkgewogICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyk7CiAgICByZXF1aXJlKF9lbmRUaW1lID49IF9zdGFydFRpbWUpOwogICAgcmVxdWlyZShfcmF0ZSA+IDApOwogICAgcmVxdWlyZShfd2FsbGV0ICE9IDB4MCk7CgogICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KCk7CiAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgcmF0ZSA9IF9yYXRlOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICB9CgogIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgLy8gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGF2ZSBjcm93ZHNhbGUgb2YgYSBzcGVjaWZpYyBtaW50YWJsZSB0b2tlbi4KICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgcmV0dXJuIG5ldyBNaW50YWJsZVRva2VuKCk7CiAgfQoKCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChyYXRlKTsKCiAgICAvLyB1cGRhdGUgc3RhdGUKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwoKICAgIGZvcndhcmRGdW5kcygpOwogIH0KCiAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogIC8vIG92ZXJyaWRlIHRvIGNyZWF0ZSBjdXN0b20gZnVuZCBmb3J3YXJkaW5nIG1lY2hhbmlzbXMKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbm93ID4gZW5kVGltZTsKICB9CgoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL2Nyb3dkc2FsZS9DYXBwZWRDcm93ZHNhbGUuc29sCgovKioKICogQHRpdGxlIENhcHBlZENyb3dkc2FsZQogKiBAZGV2IEV4dGVuc2lvbiBvZiBDcm93ZHNhbGUgd2l0aCBhIG1heCBhbW91bnQgb2YgZnVuZHMgcmFpc2VkCiAqLwpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgdWludDI1NiBwdWJsaWMgY2FwOwoKICBmdW5jdGlvbiBDYXBwZWRDcm93ZHNhbGUodWludDI1NiBfY2FwKSB7CiAgICByZXF1aXJlKF9jYXAgPiAwKTsKICAgIGNhcCA9IF9jYXA7CiAgfQoKICAvLyBvdmVycmlkaW5nIENyb3dkc2FsZSN2YWxpZFB1cmNoYXNlIHRvIGFkZCBleHRyYSBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpbkNhcCA9IHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA8PSBjYXA7CiAgICByZXR1cm4gc3VwZXIudmFsaWRQdXJjaGFzZSgpICYmIHdpdGhpbkNhcDsKICB9CgogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlI2hhc0VuZGVkIHRvIGFkZCBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgY2FwUmVhY2hlZCA9IHdlaVJhaXNlZCA+PSBjYXA7CiAgICByZXR1cm4gc3VwZXIuaGFzRW5kZWQoKSB8fCBjYXBSZWFjaGVkOwogIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9saWZlY3ljbGUvUGF1c2FibGUuc29sCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9UdXRlbGx1c1BhcnRuZXJDcm93ZHNhbGUuc29sCgovKioKICogQHRpdGxlIFR1dGVsbHVzUGFydG5lckNyb3dkc2FsZQogKgogKi8KY29udHJhY3QgVHV0ZWxsdXNQYXJ0bmVyQ3Jvd2RzYWxlIGlzIENhcHBlZENyb3dkc2FsZSwgUGF1c2FibGUgewogICAgZXZlbnQgV2l0aGRyYXdhbChhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgYW1vdW50KTsKCiAgICBhZGRyZXNzIHB1YmxpYyBwYXJ0bmVyOyAgIC8vUGFydG5lciBBZGRyZXNzLgogICAgdWludDI1NiBjbGlmZjsKICAgIHVpbnQyNTYgZHVyYXRpb247CiAgICB1aW50MjU2IHBlcmNlbnQ7CgogICAgVHV0ZWxsdXNWYXVsdCB2YXVsdDsKICAgIFR1dGVsbHVzVmVzdGluZ0ZhY3RvcnkgdmVzdGluZ0ZhY3Rvcnk7CgogICAgZnVuY3Rpb24gVHV0ZWxsdXNQYXJ0bmVyQ3Jvd2RzYWxlKAogICAgICAgIHVpbnQyNTYgX3N0YXJ0VGltZSwKICAgICAgICB1aW50MjU2IF9lbmRUaW1lLAogICAgICAgIHVpbnQyNTYgX2NhcCwgCiAgICAgICAgdWludDI1NiBfY2xpZmYsCiAgICAgICAgdWludDI1NiBfZHVyYXRpb24sCiAgICAgICAgdWludDI1NiBfcmF0ZSwKICAgICAgICBhZGRyZXNzIF93YWxsZXQsCiAgICAgICAgYWRkcmVzcyBfcGFydG5lciwKICAgICAgICB1aW50MjU2IF9wZXJjZW50LAogICAgICAgIGFkZHJlc3MgX3R1dGVsbHVzVmF1bHQsCiAgICAgICAgYWRkcmVzcyBfdHV0ZWxsdXNWZXN0aW5nRmFjdG9yeQogICAgKQogICAgICAgIENhcHBlZENyb3dkc2FsZShfY2FwKQogICAgICAgIENyb3dkc2FsZShfc3RhcnRUaW1lLCBfZW5kVGltZSwgX3JhdGUsIF93YWxsZXQpCiAgICB7CiAgICAgICAgcmVxdWlyZShfcGFydG5lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF90dXRlbGx1c1ZhdWx0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3R1dGVsbHVzVmVzdGluZ0ZhY3RvcnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfY2xpZmYgPD0gX2R1cmF0aW9uKTsKICAgICAgICByZXF1aXJlKF9wZXJjZW50ID49IDAgJiYgX3BlcmNlbnQgPD0gMTAwKTsKCiAgICAgICAgdmF1bHQgPSBUdXRlbGx1c1ZhdWx0KF90dXRlbGx1c1ZhdWx0KTsKICAgICAgICB0b2tlbiA9IE1pbnRhYmxlVG9rZW4odmF1bHQudG9rZW4oKSk7CgogICAgICAgIHZlc3RpbmdGYWN0b3J5ID0gVHV0ZWxsdXNWZXN0aW5nRmFjdG9yeShfdHV0ZWxsdXNWZXN0aW5nRmFjdG9yeSk7CgogICAgICAgIHBhcnRuZXIgPSBfcGFydG5lcjsKICAgICAgICBjbGlmZiA9IF9jbGlmZjsKICAgICAgICBkdXJhdGlvbiA9IF9kdXJhdGlvbjsKICAgICAgICBwZXJjZW50ID0gX3BlcmNlbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHdoZW5Ob3RQYXVzZWQgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwoKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgICAgIHZlc3RpbmdGYWN0b3J5LmNyZWF0ZVZlc3RpbmcoYmVuZWZpY2lhcnksIGVuZFRpbWUsIGNsaWZmLCBkdXJhdGlvbik7CiAgICAgICAgYWRkcmVzcyB2ZXN0aW5nQWRkcmVzcyA9IHZlc3RpbmdGYWN0b3J5LmdldFZlc3RpbmcoYmVuZWZpY2lhcnkpOwoKICAgICAgICB2YXVsdC5taW50KHZlc3RpbmdBZGRyZXNzLCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgICAgIC8vV2UgdHJhbnNmZXIgdGhlIGNvcnJlc3BvbmRpbmcgcGFydCwgdGhlIHJlc3QgcmVtYWlucyBpbiB0aGUgY29udHJhY3QKICAgICAgICB1aW50MjU2IHdhbGxldEFtb3VudCA9IG1zZy52YWx1ZS5tdWwoMTAwIC0gcGVyY2VudCkuZGl2KDEwMCk7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKHdhbGxldEFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIGludGVybmFsIHJldHVybnMgKE1pbnRhYmxlVG9rZW4pIHt9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoaGFzRW5kZWQoKSk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgcGFydG5lci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgICAgICBXaXRoZHJhd2FsKG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICAgICAgfQogICAgfQp9'.
	

]
