Class {
	#name : #SRT89df528d2c6db352cd326e6d637f6dd8fa4f4da1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT89df528d2c6db352cd326e6d637f6dd8fa4f4da1 >> base64 [
	^ ''.
	

]
