Class {
	#name : #SRTF352D33dC7e5828F47f3DbF7e6d30F8D3f9aA60C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF352D33dC7e5828F47f3DbF7e6d30F8D3f9aA60C >> base64 [
	^ ''.
	

]
