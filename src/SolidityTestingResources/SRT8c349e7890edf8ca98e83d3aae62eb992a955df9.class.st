Class {
	#name : #SRT8c349e7890edf8ca98e83d3aae62eb992a955df9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8c349e7890edf8ca98e83d3aae62eb992a955df9 >> base64 [
	^ ''.
	

]
