Class {
	#name : #SRTf7d24c5e3dcaa07f942f1c307361cdcaacc3e05c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf7d24c5e3dcaa07f942f1c307361cdcaacc3e05c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBDb250cm9sbGFibGUgewogIGFkZHJlc3MgcHVibGljIGNvbnRyb2xsZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIgYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBDb250cm9sbGFibGUoKSBwdWJsaWMgewogICAgY29udHJvbGxlciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seUNvbnRyb2xsZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29udHJvbGxlcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3Q29udHJvbGxlciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJDb250cm9sKGFkZHJlc3MgbmV3Q29udHJvbGxlcikgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgIGlmIChuZXdDb250cm9sbGVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgY29udHJvbGxlciA9IG5ld0NvbnRyb2xsZXI7CiAgICB9CiAgfQoKfQoKY29udHJhY3QgUHJvb2ZUb2tlbkludGVyZmFjZSBpcyBDb250cm9sbGFibGUgewoKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwogIGV2ZW50IENsYWltZWRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIF90b2tlbiwgYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludCBfYW1vdW50KTsKICBldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0b3RhbFN1cHBseUF0KHVpbnQgX2Jsb2NrTnVtYmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3MgX293bmVyLCB1aW50IF9ibG9ja051bWJlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50LCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF9vd25lciwgdWludCBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gaW1wb3J0UHJlc2FsZUJhbGFuY2VzKGFkZHJlc3NbXSBfYWRkcmVzc2VzLCB1aW50MjU2W10gX2JhbGFuY2VzLCBhZGRyZXNzIF9wcmVzYWxlQWRkcmVzcykgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGxvY2tQcmVzYWxlQmFsYW5jZXMoKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBlbmFibGVUcmFuc2ZlcnMoYm9vbCBfdHJhbnNmZXJzRW5hYmxlZCkgcHVibGljOwogIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4odWludCBfc25hcHNob3RCbG9jaywgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwgc3RyaW5nIF9jbG9uZVRva2VuU3ltYm9sKSBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcyk7Cgp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIgYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKICBmdW5jdGlvbiBQYXVzYWJsZSgpIHB1YmxpYyB7fQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBwdWJsaWMgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBwdWJsaWMgb25seU93bmVyIHdoZW5QYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCmNvbnRyYWN0IFRva2VuU2FsZSBpcyBQYXVzYWJsZSB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBQcm9vZlRva2VuSW50ZXJmYWNlIHB1YmxpYyBwcm9vZlRva2VuOwogIHVpbnQyNTYgcHVibGljIHRvdGFsV2VpUmFpc2VkOwogIHVpbnQyNTYgcHVibGljIHRva2Vuc01pbnRlZDsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICB1aW50MjU2IHB1YmxpYyBjb250cmlidXRvcnM7CiAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHNNdWx0aXBsaWVyOwogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwogIHVpbnQyNTYgcHVibGljIHJlbWFpbmluZ1Rva2VuczsKICB1aW50MjU2IHB1YmxpYyBhbGxvY2F0ZWRUb2tlbnM7CiAgYm9vbCBwdWJsaWMgZmluYWxpemVkOwoKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBCQVNFX1BSSUNFX0lOX1dFSSA9IDg4MDAwMDAwMDAwMDAwMDAwOwoKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBQVUJMSUNfVE9LRU5TID0gMTE4MTAzMSAqICgxMCAqKiAxOCk7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9UQUxfUFJFU0FMRV9UT0tFTlMgPSAxMTIzODY3MTI5MjQ3MjU1MDg4MDI0MDA7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9LRU5TX0FMTE9DQVRFRF9UT19QUk9PRiA9IDExODEwMzEgKiAoMTAgKiogMTgpOwoKICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBQUk9PRl9NVUxUSVNJRyA9IDB4MTFlM2RlMWJkQTI2NTBmYTZCQzc0ZTdDZWE2QTM5NTU5RTU5YjEwMzsKICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBQUk9PRl9UT0tFTl9XQUxMRVQgPSAweDExZTNkZTFiZEEyNjUwZmE2QkM3NGU3Q2VhNkEzOTU1OUU1OWIxMDM7CgogIHVpbnQyNTYgcHVibGljIHRva2VuQ2FwID0gUFVCTElDX1RPS0VOUyAtIFRPVEFMX1BSRVNBTEVfVE9LRU5TOwogIHVpbnQyNTYgcHVibGljIGNhcCA9IHRva2VuQ2FwIC8gKDEwICoqIDE4KTsKICB1aW50MjU2IHB1YmxpYyB3ZWlDYXAgPSBjYXAgKiBCQVNFX1BSSUNFX0lOX1dFSTsKCiAgdWludDI1NiBwdWJsaWMgZmlyc3RDaGVja3BvaW50UHJpY2UgPSAoQkFTRV9QUklDRV9JTl9XRUkgKiA4NSkgLyAxMDA7CiAgdWludDI1NiBwdWJsaWMgc2Vjb25kQ2hlY2twb2ludFByaWNlID0gKEJBU0VfUFJJQ0VfSU5fV0VJICogOTApIC8gMTAwOwogIHVpbnQyNTYgcHVibGljIHRoaXJkQ2hlY2twb2ludFByaWNlID0gKEJBU0VfUFJJQ0VfSU5fV0VJICogOTUpIC8gMTAwOwoKICB1aW50MjU2IHB1YmxpYyBmaXJzdENoZWNrcG9pbnQgPSAod2VpQ2FwICogNSkgLyAxMDA7CiAgdWludDI1NiBwdWJsaWMgc2Vjb25kQ2hlY2twb2ludCA9ICh3ZWlDYXAgKiAxMCkgLyAxMDA7CiAgdWludDI1NiBwdWJsaWMgdGhpcmRDaGVja3BvaW50ID0gKHdlaUNhcCAqIDIwKSAvIDEwMDsKCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKICBldmVudCBOZXdDbG9uZWRUb2tlbihhZGRyZXNzIGluZGV4ZWQgX2Nsb25lVG9rZW4pOwogIGV2ZW50IE9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCk7CiAgZXZlbnQgT25BcHByb3ZlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpOwogIGV2ZW50IExvZ0ludChzdHJpbmcgX25hbWUsIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBGaW5hbGl6ZWQoKTsKCiAgZnVuY3Rpb24gVG9rZW5TYWxlKAogICAgYWRkcmVzcyBfdG9rZW5BZGRyZXNzLAogICAgdWludDI1NiBfc3RhcnRUaW1lLAogICAgdWludDI1NiBfZW5kVGltZSkgcHVibGljIHsKICAgIHJlcXVpcmUoX3Rva2VuQWRkcmVzcyAhPSAweDApOwogICAgcmVxdWlyZShfc3RhcnRUaW1lID4gMCk7CiAgICByZXF1aXJlKF9lbmRUaW1lID4gX3N0YXJ0VGltZSk7CgogICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIHByb29mVG9rZW4gPSBQcm9vZlRva2VuSW50ZXJmYWNlKF90b2tlbkFkZHJlc3MpOwoKICAgIGRlY2ltYWxzTXVsdGlwbGllciA9ICgxMCAqKiAxOCk7CiAgfQoKCiAgLyoqCiAgICogSGlnaCBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogICAqLwogIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLyoqCiAgICogTG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgICogQHBhcmFtIF9iZW5lZmljaWFyeSB3aWxsIHJlY2VpdmUgdGhlIHRva2Vucy4KICAgKi8KICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgd2hlbk5vdEZpbmFsaXplZCB7CiAgICByZXF1aXJlKF9iZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgdWludDI1NiBwcmljZUluV2VpID0gZ2V0UHJpY2VJbldlaSgpOwogICAgdG90YWxXZWlSYWlzZWQgPSB0b3RhbFdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwoZGVjaW1hbHNNdWx0aXBsaWVyKS5kaXYocHJpY2VJbldlaSk7CiAgICB0b2tlbnNNaW50ZWQgPSB0b2tlbnNNaW50ZWQuYWRkKHRva2Vucyk7CiAgICByZXF1aXJlKHRva2Vuc01pbnRlZCA8IHRva2VuQ2FwKTsKCiAgICBjb250cmlidXRvcnMgPSBjb250cmlidXRvcnMuYWRkKDEpOwoKICAgIHByb29mVG9rZW4ubWludChfYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIF9iZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQoKCiAgLyoqCiAgICogR2V0IHRoZSBwcmljZSBpbiB3ZWkgZm9yIGN1cnJlbnQgcHJlbWl1bQogICAqIEByZXR1cm4gcHJpY2UKICAgKi8KICBmdW5jdGlvbiBnZXRQcmljZUluV2VpKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKCiAgICB1aW50MjU2IHByaWNlOwoKICAgIGlmICh0b3RhbFdlaVJhaXNlZCA8IGZpcnN0Q2hlY2twb2ludCkgewogICAgICBwcmljZSA9IGZpcnN0Q2hlY2twb2ludFByaWNlOwogICAgfSBlbHNlIGlmICh0b3RhbFdlaVJhaXNlZCA8IHNlY29uZENoZWNrcG9pbnQpIHsKICAgICAgcHJpY2UgPSBzZWNvbmRDaGVja3BvaW50UHJpY2U7CiAgICB9IGVsc2UgaWYgKHRvdGFsV2VpUmFpc2VkIDwgdGhpcmRDaGVja3BvaW50KSB7CiAgICAgIHByaWNlID0gdGhpcmRDaGVja3BvaW50UHJpY2U7CiAgICB9IGVsc2UgewogICAgICBwcmljZSA9IEJBU0VfUFJJQ0VfSU5fV0VJOwogICAgfQoKICAgIHJldHVybiBwcmljZTsKICB9CgogIC8qKgogICogRm9yd2FyZHMgZnVuZHMgdG8gdGhlIHRva2Vuc2FsZSB3YWxsZXQKICAqLwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIFBST09GX01VTFRJU0lHLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKCiAgLyoqCiAgKiBWYWxpZGF0ZXMgdGhlIHB1cmNoYXNlIChwZXJpb2QsIG1pbmltdW0gYW1vdW50LCB3aXRoaW4gY2FwKQogICogQHJldHVybiB7Ym9vbH0gdmFsaWQKICAqLwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICB1aW50MjU2IGN1cnJlbnQgPSBub3c7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IGN1cnJlbnQgPj0gc3RhcnRUaW1lICYmIGN1cnJlbnQgPD0gZW5kVGltZTsKICAgIGJvb2wgbm9uWmVyb1B1cmNoYXNlID0gbXNnLnZhbHVlICE9IDA7CgogICAgcmV0dXJuIG5vblplcm9QdXJjaGFzZSAmJiB3aXRoaW5QZXJpb2Q7CiAgfQoKICAvKioKICAqIFJldHVybnMgdGhlIHRvdGFsIFByb29mIHRva2VuIHN1cHBseQogICogQHJldHVybiB0b3RhbCBzdXBwbHkge3VpbnQyNTZ9CiAgKi8KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gcHJvb2ZUb2tlbi50b3RhbFN1cHBseSgpOwogIH0KCiAgLyoqCiAgKiBSZXR1cm5zIHRva2VuIGhvbGRlciBQcm9vZiBUb2tlbiBiYWxhbmNlCiAgKiBAcGFyYW0gX293bmVyIHthZGRyZXNzfQogICogQHJldHVybiB0b2tlbiBiYWxhbmNlIHt1aW50MjU2fQogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIHByb29mVG9rZW4uYmFsYW5jZU9mKF9vd25lcik7CiAgfQoKICAvL2NvbnRyb2xsZXIgaW50ZXJmYWNlCgogIC8vIGZ1bmN0aW9uIHByb3h5UGF5bWVudChhZGRyZXNzIF9vd25lcikgcGF5YWJsZSBwdWJsaWMgewogIC8vICAgcmV2ZXJ0KCk7CiAgLy8gfQoKICAvKioKICAqIENvbnRyb2xsZXIgSW50ZXJmYWNlIHRyYW5zZmVyIGNhbGxiYWNrIG1ldGhvZAogICogQHBhcmFtIF9mcm9tIHthZGRyZXNzfQogICogQHBhcmFtIF90byB7YWRkcmVzc30KICAqIEBwYXJhbSBfYW1vdW50IHtudW1iZXJ9CiAgKi8KICBmdW5jdGlvbiBvblRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBPblRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIENvbnRyb2xsZXIgSW50ZXJmYWNlIHRyYW5zZmVyIGNhbGxiYWNrIG1ldGhvZAogICogQHBhcmFtIF9vd25lciB7YWRkcmVzc30KICAqIEBwYXJhbSBfc3BlbmRlciB7YWRkcmVzc30KICAqIEBwYXJhbSBfYW1vdW50IHtudW1iZXJ9CiAgICovCiAgZnVuY3Rpb24gb25BcHByb3ZlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBPbkFwcHJvdmUoX293bmVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQ2hhbmdlIHRoZSBQcm9vZiBUb2tlbiBjb250cm9sbGVyCiAgKiBAcGFyYW0gX25ld0NvbnRyb2xsZXIge2FkZHJlc3N9CiAgKi8KICBmdW5jdGlvbiBjaGFuZ2VDb250cm9sbGVyKGFkZHJlc3MgX25ld0NvbnRyb2xsZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcHJvb2ZUb2tlbi50cmFuc2ZlckNvbnRyb2woX25ld0NvbnRyb2xsZXIpOwogIH0KCgogIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVycyhib29sIF90cmFuc2ZlcnNFbmFibGVkKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHByb29mVG9rZW4uZW5hYmxlVHJhbnNmZXJzKF90cmFuc2ZlcnNFbmFibGVkKTsKICB9CgogIC8qKgogICogQWxsb2NhdGVzIFByb29mIHRva2VucyB0byB0aGUgZ2l2ZW4gUHJvb2YgVG9rZW4gd2FsbGV0CiAgKiBAcGFyYW0gX3Rva2VucyB7dWludDI1Nn0KICAqLwogIGZ1bmN0aW9uIGFsbG9jYXRlUHJvb2ZUb2tlbnModWludDI1NiBfdG9rZW5zKSBwdWJsaWMgb25seU93bmVyIHdoZW5Ob3RGaW5hbGl6ZWQgewogICAgcHJvb2ZUb2tlbi5taW50KFBST09GX1RPS0VOX1dBTExFVCwgX3Rva2Vucyk7CiAgfQoKICAvKioKICAqIEZpbmFsaXplIHRoZSB0b2tlbiBzYWxlIChjYW4gb25seSBiZSBjYWxsZWQgYnkgb3duZXIpCiAgKi8KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShwYXVzZWQpOwoKICAgIHByb29mVG9rZW4uZmluaXNoTWludGluZygpOwogICAgcHJvb2ZUb2tlbi5lbmFibGVUcmFuc2ZlcnModHJ1ZSk7CiAgICBGaW5hbGl6ZWQoKTsKCiAgICBmaW5hbGl6ZWQgPSB0cnVlOwogIH0KCiAgbW9kaWZpZXIgd2hlbk5vdEZpbmFsaXplZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCn0='.
	

]
