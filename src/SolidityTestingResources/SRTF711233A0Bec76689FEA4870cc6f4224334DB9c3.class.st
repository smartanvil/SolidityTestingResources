Class {
	#name : #SRTF711233A0Bec76689FEA4870cc6f4224334DB9c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF711233A0Bec76689FEA4870cc6f4224334DB9c3 >> base64 [
	^ ''.
	

]
