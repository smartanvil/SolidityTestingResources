Class {
	#name : #SRT29c4bf3b662b1a57e841f27c161e27f61da63d69,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29c4bf3b662b1a57e841f27c161e27f61da63d69 >> base64 [
	^ ''.
	

]
