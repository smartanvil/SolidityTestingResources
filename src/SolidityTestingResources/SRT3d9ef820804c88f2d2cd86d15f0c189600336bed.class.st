Class {
	#name : #SRT3d9ef820804c88f2d2cd86d15f0c189600336bed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3d9ef820804c88f2d2cd86d15f0c189600336bed >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCgogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgpjb250cmFjdCBSVGNvaW4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKCWFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgc2FsZUFnZW50OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CglzdHJpbmcgcHVibGljIG5hbWU7Cgl1aW50OCBwdWJsaWMgZGVjaW1hbHM7CglzdHJpbmcgcHVibGljIHN5bWJvbDsKCWJvb2wgcHJpdmF0ZSBhbGxvd0VtaXNzaW9uID0gdHJ1ZTsKCW1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICAKICAgIAogICAgZnVuY3Rpb24gUlRjb2luKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQ4IF9kZWNpbWFscykgcHVibGljIHsKCQlkZWNpbWFscyA9IF9kZWNpbWFsczsKCQluYW1lID0gX25hbWU7CgkJc3ltYm9sID0gX3N5bWJvbDsKCQlvd25lciA9IG1zZy5zZW5kZXI7Cgl9CgkKCQogICAgZnVuY3Rpb24gY2hhbmdlU2FsZUFnZW50KGFkZHJlc3MgbmV3U2FsZUFnZW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlIChuZXdTYWxlQWdlbnQhPWFkZHJlc3MoMCkpOwogICAgICAgIHVpbnQyNTYgdG9rZW5BbW91bnQgPSBiYWxhbmNlc1tzYWxlQWdlbnRdOwogICAgICAgIGlmICh0b2tlbkFtb3VudD4wKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW25ld1NhbGVBZ2VudF0gPSBiYWxhbmNlc1tuZXdTYWxlQWdlbnRdLmFkZCh0b2tlbkFtb3VudCk7CiAgICAgICAgICAgIGJhbGFuY2VzW3NhbGVBZ2VudF0gPSBiYWxhbmNlc1tzYWxlQWdlbnRdLnN1Yih0b2tlbkFtb3VudCk7CiAgICAgICAgICAgIFRyYW5zZmVyKHNhbGVBZ2VudCwgbmV3U2FsZUFnZW50LCB0b2tlbkFtb3VudCk7CiAgICAgICAgfQogICAgICAgIHNhbGVBZ2VudCA9IG5ld1NhbGVBZ2VudDsKICAgIH0KCQoJCglmdW5jdGlvbiBlbWlzc2lvbih1aW50MjU2IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CgkgICAgcmVxdWlyZShhbGxvd0VtaXNzaW9uKTsKCSAgICByZXF1aXJlKHNhbGVBZ2VudCE9YWRkcmVzcygwKSk7CgkgICAgdG90YWxTdXBwbHkgPSBhbW91bnQgKiAodWludDI1NigxMCkgKiogZGVjaW1hbHMpOwoJCWJhbGFuY2VzW3NhbGVBZ2VudF0gPSB0b3RhbFN1cHBseTsKCQlUcmFuc2ZlcigweDAsIHNhbGVBZ2VudCwgdG90YWxTdXBwbHkpOwoJCWFsbG93RW1pc3Npb24gPSBmYWxzZTsKCX0KICAgIAogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgYWRkcmVzcyBidXJuZXI7CiAgICAgICAgaWYgKG1zZy5zZW5kZXI9PW93bmVyKQogICAgICAgICAgICBidXJuZXIgPSBzYWxlQWdlbnQ7CiAgICAgICAgZWxzZQogICAgICAgICAgICBidXJuZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW2J1cm5lcl0gPSBiYWxhbmNlc1tidXJuZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgQnVybihidXJuZXIsIF92YWx1ZSk7CiAgICB9CiAgICAgCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQgaW5kZXhlZCB2YWx1ZSk7CgkKCQoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoJCgkKCWZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsgCiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgoKCQoJZXZlbnQgVHJhbnNmZXIoCgkJYWRkcmVzcyBpbmRleGVkIF9mcm9tLAoJCWFkZHJlc3MgaW5kZXhlZCBfdG8sCgkJdWludCBfdmFsdWUKCSk7Cn0KCmNvbnRyYWN0IENyb3dkc2FsZSB7CiAgICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgYWRkcmVzcyBmdW5kc1dhbGxldDsKICAgIFJUY29pbiBwdWJsaWMgdG9rZW47CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCWJvb2wgcHVibGljIG9wZW4gPSBmYWxzZTsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuTGltaXQ7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIHJhdGUgPSAyMDAwMDsgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIENyb3dkc2FsZShhZGRyZXNzIF9mdW5kc1dhbGxldCwgYWRkcmVzcyB0b2tlbkFkZHJlc3MsIAogICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX3JhdGUsIHVpbnQyNTYgX3Rva2VuTGltaXQpIHB1YmxpYyB7CiAgICAgICAgZnVuZHNXYWxsZXQgPSBfZnVuZHNXYWxsZXQ7CiAgICAgICAgdG9rZW4gPSBSVGNvaW4odG9rZW5BZGRyZXNzKTsKICAgICAgICByYXRlID0gX3JhdGU7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHRva2VuTGltaXQgPSBfdG9rZW5MaW1pdCAqICh1aW50MjU2KDEwKSAqKiB0b2tlbi5kZWNpbWFscygpKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIGlzT3BlbiBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHRva2VuTGltaXQ+MCk7CiAgICAgICAgZnVuZHNXYWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICB1aW50MjU2IHRva2VucyA9IGNhbGN1bGF0ZVRva2VuQW1vdW50KG1zZy52YWx1ZSk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zKTsKICAgICAgICB0b2tlbkxpbWl0ID0gdG9rZW5MaW1pdC5zdWIodG9rZW5zKTsKICAgIH0KICAKICAgIAogICAgZnVuY3Rpb24gY2hhbmdlRnVuZEFkZHJlc3MoYWRkcmVzcyBuZXdBZGRyZXNzKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld0FkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgZnVuZHNXYWxsZXQgPSBuZXdBZGRyZXNzOwoJfQoJCgkKICAgIGZ1bmN0aW9uIGNoYW5nZVJhdGUodWludDI1NiBuZXdSYXRlKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld1JhdGU+MCk7CiAgICAgICAgcmF0ZSA9IG5ld1JhdGU7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5BbW91bnQodWludDI1NiB3ZWlBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICBpZiAodG9rZW4uZGVjaW1hbHMoKSE9MTgpewogICAgICAgICAgICB1aW50MjU2IHRva2VuQW1vdW50ID0gd2VpQW1vdW50Lm11bChyYXRlKS5kaXYodWludDI1NigxMCkgKiogKDE4LXRva2VuLmRlY2ltYWxzKCkpKTsgCiAgICAgICAgICAgIHJldHVybiB0b2tlbkFtb3VudDsKICAgICAgICB9CiAgICAgICAgZWxzZSByZXR1cm4gd2VpQW1vdW50Lm11bChyYXRlKTsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBhbGxvd1NhbGUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBvcGVuID0gdHJ1ZTsKICAgIH0KICAgIAogICAKICAgIGZ1bmN0aW9uIGRpc2FsbG93U2FsZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIG9wZW4gPSBmYWxzZTsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgaXNPcGVuKCkgewogICAgICAgIHJlcXVpcmUob3BlbiA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQp9'.
	

]
