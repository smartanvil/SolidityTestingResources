Class {
	#name : #SRT2f9860d5e8c1cb7b6816040756616c6aeb94063c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f9860d5e8c1cb7b6816040756616c6aeb94063c >> base64 [
	^ ''.
	

]
