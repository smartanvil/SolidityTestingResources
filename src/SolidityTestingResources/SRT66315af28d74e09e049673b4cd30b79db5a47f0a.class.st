Class {
	#name : #SRT66315af28d74e09e049673b4cd30b79db5a47f0a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT66315af28d74e09e049673b4cd30b79db5a47f0a >> base64 [
	^ ''.
	

]
