Class {
	#name : #SRT9813d5fa1a1838f30349c068492009b84fada13a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9813d5fa1a1838f30349c068492009b84fada13a >> base64 [
	^ ''.
	

]
