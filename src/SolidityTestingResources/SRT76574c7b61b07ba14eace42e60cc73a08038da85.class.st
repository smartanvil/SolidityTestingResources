Class {
	#name : #SRT76574c7b61b07ba14eace42e60cc73a08038da85,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76574c7b61b07ba14eace42e60cc73a08038da85 >> base64 [
	^ ''.
	

]
