Class {
	#name : #SRT9fad3724b0e2347e0625c0bc9b07fcf0c421d6bc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9fad3724b0e2347e0625c0bc9b07fcf0c421d6bc >> base64 [
	^ ''.
	

]
