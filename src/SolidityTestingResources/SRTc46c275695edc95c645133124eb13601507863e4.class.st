Class {
	#name : #SRTc46c275695edc95c645133124eb13601507863e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc46c275695edc95c645133124eb13601507863e4 >> base64 [
	^ ''.
	

]
