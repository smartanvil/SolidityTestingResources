Class {
	#name : #SRT740e6b6f0a0165e8bb3d1cdf94862bdffbded22e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT740e6b6f0a0165e8bb3d1cdf94862bdffbded22e >> base64 [
	^ ''.
	

]
