Class {
	#name : #SRT4e64e18f6e6f5d694725c8c02ec8ace180ade2d0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e64e18f6e6f5d694725c8c02ec8ace180ade2d0 >> base64 [
	^ ''.
	

]
