Class {
	#name : #SRT69fda08cc89cb6c63f84bfe0b059b0c38038cec8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69fda08cc89cb6c63f84bfe0b059b0c38038cec8 >> base64 [
	^ ''.
	

]
