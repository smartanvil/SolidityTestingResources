Class {
	#name : #SRT1664e5b86af9bba5c125c21dfd0cae7e6a46a733,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1664e5b86af9bba5c125c21dfd0cae7e6a46a733 >> base64 [
	^ ''.
	

]
