Class {
	#name : #SRT202bd96042127975114d8b2b1f0ef429a235313f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT202bd96042127975114d8b2b1f0ef429a235313f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKY29udHJhY3QgVG9rZW4gewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogICAgZXZlbnQgUGF1c2UoKTsKCiAgICBldmVudCBVbnBhdXNlKCk7CgogICAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAgIC8qKgogICAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICAgKi8KICAgIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgTk9UIHBhdXNlZAogICAgICovCiAgICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgICAgIHJlcXVpcmUocGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgUGF1c2UoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAgICovCiAgICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgewogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICAgIFVucGF1c2UoKTsKICAgIH0KfQoKCmNvbnRyYWN0IENhc2hQb2tlclByb1ByZUlDTyBpcyBPd25hYmxlLCBQYXVzYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICAvKiBUaGUgcGFydHkgd2hvIGhvbGRzIHRoZSBmdWxsIHRva2VuIHBvb2wgYW5kIGhhcyBhcHByb3ZlKCknZWQgdG9rZW5zIGZvciB0aGlzIGNyb3dkc2FsZSAqLwogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5XYWxsZXQgPSAweDc3NGQ5MWFjMzVmNGUyZjk0ZjBlODIxYTAzYzZlYWZmOGFkNGMxMzg7CgkKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQ7CgogICAgdWludCBwdWJsaWMgd2VpUmFpc2VkOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHB1cmNoYXNlZFRva2VuczsKICAgICAKICAgIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQ7CgogICAgVG9rZW4gcHVibGljIHRva2VuID0gVG9rZW4oMHhBOEY5M0ZBZWU0NDA2NDRGODkwNTlhMmM4OGJkQzlCRjNCZTVlMmVhKTsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtaW5JbnZlc3QgPSAwLjAxIGV0aGVyOwoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IHRva2Vuc0xpbWl0ID0gODAwMDAwMCAqIDEgZXRoZXI7CgogICAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IDE1MDM3NzA0MDA7IC8vIDI2IEF1Z3VzdCAyMDE3CiAgICAKICAgIHVpbnQyNTYgcHVibGljIGVuZFRpbWUgPSAxNTA0ODkzNjAwOyAvLyA4IFNlcHRlbWJlciAyMDE3CgogICAgdWludCBwdWJsaWMgcHJpY2UgPSAwLjAwMDE3ICogMSBldGhlcjsKCiAgICAvKioKICAgICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAgICovCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHdoZW5Ob3RQYXVzZWQgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShzdGFydFRpbWUgPD0gbm93ICYmIG5vdyA8PSBlbmRUaW1lKTsKCiAgICAgICAgdWludCB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIHJlcXVpcmUod2VpQW1vdW50ID49IG1pbkludmVzdCk7CgogICAgICAgIHVpbnQgdG9rZW5BbW91bnRFbmFibGUgPSB0b2tlbnNMaW1pdC5zdWIodG9rZW5zU29sZCk7CgogICAgICAgIHJlcXVpcmUodG9rZW5BbW91bnRFbmFibGUgPiAwKTsKCiAgICAgICAgdWludCB0b2tlbkFtb3VudCA9IHdlaUFtb3VudCAvIHByaWNlICogMSBldGhlcjsKCiAgICAgICAgaWYgKHRva2VuQW1vdW50ID4gdG9rZW5BbW91bnRFbmFibGUpIHsKICAgICAgICAgICAgdG9rZW5BbW91bnQgPSB0b2tlbkFtb3VudEVuYWJsZTsKICAgICAgICAgICAgd2VpQW1vdW50ID0gdG9rZW5BbW91bnQgKiBwcmljZSAvIDEgZXRoZXI7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlIC0gd2VpQW1vdW50KTsKICAgICAgICB9CgogICAgICAgIGlmIChwdXJjaGFzZWRUb2tlbnNbYmVuZWZpY2lhcnldID09IDApIGludmVzdG9yQ291bnQrKzsKICAgICAgICAKICAgICAgICBwdXJjaGFzZWRUb2tlbnNbYmVuZWZpY2lhcnldID0gcHVyY2hhc2VkVG9rZW5zW2JlbmVmaWNpYXJ5XS5hZGQodG9rZW5BbW91bnQpOwoKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXJGcm9tKHRva2VuV2FsbGV0LCBiZW5lZmljaWFyeSwgdG9rZW5BbW91bnQpKTsKCiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2VuQW1vdW50KTsKCiAgICAgICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbkFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdhbChhZGRyZXNzIHRvKSBvbmx5T3duZXIgewogICAgICAgIHRvLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCBhbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgdWludCB0b2tlbkFtb3VudEVuYWJsZSA9IHRva2Vuc0xpbWl0LnN1Yih0b2tlbnNTb2xkKTsKCiAgICAgICAgaWYgKGFtb3VudCA+IHRva2VuQW1vdW50RW5hYmxlKSBhbW91bnQgPSB0b2tlbkFtb3VudEVuYWJsZTsKCiAgICAgICAgcmVxdWlyZSh0b2tlbi50cmFuc2ZlckZyb20odG9rZW5XYWxsZXQsIHRvLCBhbW91bnQpKTsKCiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCk7CiAgICB9Cn0='.
	

]
