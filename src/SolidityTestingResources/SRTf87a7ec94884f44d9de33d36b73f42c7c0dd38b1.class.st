Class {
	#name : #SRTf87a7ec94884f44d9de33d36b73f42c7c0dd38b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf87a7ec94884f44d9de33d36b73f42c7c0dd38b1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgVXRpbGl0aWVzICYgQ29tbW9uIE1vZGlmaWVycwoqLwpjb250cmFjdCBVdGlscyB7CiAgICAvKioKICAgICAgICBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFV0aWxzKCkgewogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgYW4gYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICBtb2RpZmllciBncmVhdGVyVGhhblplcm8odWludDI1NiBfYW1vdW50KSB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyB2YWxpZGF0ZXMgYW4gYWRkcmVzcyAtIGN1cnJlbnRseSBvbmx5IGNoZWNrcyB0aGF0IGl0IGlzbid0IG51bGwKICAgIG1vZGlmaWVyIHZhbGlkQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSAweDApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmVyaWZpZXMgdGhhdCB0aGUgYWRkcmVzcyBpcyBkaWZmZXJlbnQgdGhhbiB0aGlzIGNvbnRyYWN0IGFkZHJlc3MKICAgIG1vZGlmaWVyIG5vdFRoaXMoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBPdmVyZmxvdyBwcm90ZWN0ZWQgbWF0aCBmdW5jdGlvbnMKCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHN1bSBvZiBfeCBhbmQgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICB2YWx1ZSAxCiAgICAgICAgQHBhcmFtIF95ICAgdmFsdWUgMgoKICAgICAgICBAcmV0dXJuIHN1bQogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICsgX3k7CiAgICAgICAgYXNzZXJ0KHogPj0gX3gpOwogICAgICAgIHJldHVybiB6OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiBfeCBtaW51cyBfeSwgYXNzZXJ0cyBpZiB0aGUgc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlIG51bWJlcgoKICAgICAgICBAcGFyYW0gX3ggICBtaW51ZW5kCiAgICAgICAgQHBhcmFtIF95ICAgc3VidHJhaGVuZAoKICAgICAgICBAcmV0dXJuIGRpZmZlcmVuY2UKICAgICovCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoX3ggPj0gX3kpOwogICAgICAgIHJldHVybiBfeCAtIF95OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgcHJvZHVjdCBvZiBtdWx0aXBseWluZyBfeCBieSBfeSwgYXNzZXJ0cyBpZiB0aGUgY2FsY3VsYXRpb24gb3ZlcmZsb3dzCgogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxCiAgICAgICAgQHBhcmFtIF95ICAgZmFjdG9yIDIKCiAgICAgICAgQHJldHVybiBwcm9kdWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB6ID0gX3ggKiBfeTsKICAgICAgICBhc3NlcnQoX3ggPT0gMCB8fCB6IC8gX3ggPT0gX3kpOwogICAgICAgIHJldHVybiB6OwogICAgfQp9CgovKgogICAgT3duZWQgY29udHJhY3QgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElPd25lZCB7CiAgICAvLyB0aGlzIGZ1bmN0aW9uIGlzbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7fQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWM7Cn0KCi8qCiAgICBQcm92aWRlcyBzdXBwb3J0IGFuZCB1dGlsaXRpZXMgZm9yIGNvbnRyYWN0IG93bmVyc2hpcAoqLwpjb250cmFjdCBPd25lZCBpcyBJT3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICBldmVudCBPd25lclVwZGF0ZShhZGRyZXNzIF9wcmV2T3duZXIsIGFkZHJlc3MgX25ld093bmVyKTsKCiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG93bmVyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWRzIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCgogICAgICAgIEBwYXJhbSBfbmV3T3duZXIgICAgbmV3IGNvbnRyYWN0IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IG93bmVyKTsKICAgICAgICBuZXdPd25lciA9IF9uZXdPd25lcjsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHVzZWQgYnkgYSBuZXcgb3duZXIgdG8gYWNjZXB0IGFuIG93bmVyc2hpcCB0cmFuc2ZlcgogICAgKi8KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsKICAgICAgICBPd25lclVwZGF0ZShvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgbmV3T3duZXIgPSAweDA7CiAgICB9Cn0KCi8qCiAgICBFUkMyMCBTdGFuZGFyZCBUb2tlbiBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUVSQzIwVG9rZW4gewogICAgLy8gdGhlc2UgZnVuY3Rpb25zIGFyZW4ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbAogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHt9CiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7fQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHt9CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgeyBfb3duZXI7IH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgX293bmVyOyBfc3BlbmRlcjsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9CgovKgogICAgU21hcnQgVG9rZW4gaW50ZXJmYWNlCiovCmNvbnRyYWN0IElTbWFydFRva2VuIGlzIElPd25lZCwgSUVSQzIwVG9rZW4gewogICAgZnVuY3Rpb24gZGlzYWJsZVRyYW5zZmVycyhib29sIF9kaXNhYmxlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBpc3N1ZShhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWM7CiAgICBmdW5jdGlvbiBkZXN0cm95KGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOwp9CgovKgogICAgVG9rZW4gSG9sZGVyIGludGVyZmFjZQoqLwpjb250cmFjdCBJVG9rZW5Ib2xkZXIgaXMgSU93bmVkIHsKICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOwp9CgovKgogICAgV2UgY29uc2lkZXIgZXZlcnkgY29udHJhY3QgdG8gYmUgYSAndG9rZW4gaG9sZGVyJyBzaW5jZSBpdCdzIGN1cnJlbnRseSBub3QgcG9zc2libGUKICAgIGZvciBhIGNvbnRyYWN0IHRvIGRlbnkgcmVjZWl2aW5nIHRva2Vucy4KCiAgICBUaGUgVG9rZW5Ib2xkZXIncyBjb250cmFjdCBzb2xlIHB1cnBvc2UgaXMgdG8gcHJvdmlkZSBhIHNhZmV0eSBtZWNoYW5pc20gdGhhdCBhbGxvd3MKICAgIHRoZSBvd25lciB0byBzZW5kIHRva2VucyB0aGF0IHdlcmUgc2VudCB0byB0aGUgY29udHJhY3QgYnkgbWlzdGFrZSBiYWNrIHRvIHRoZWlyIHNlbmRlci4KKi8KY29udHJhY3QgVG9rZW5Ib2xkZXIgaXMgSVRva2VuSG9sZGVyLCBPd25lZCwgVXRpbHMgewogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFRva2VuSG9sZGVyKCkgewogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgd2l0aGRyYXdzIHRva2VucyBoZWxkIGJ5IHRoZSBjb250cmFjdCBhbmQgc2VuZHMgdGhlbSB0byBhbiBhY2NvdW50CiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lcgoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgRVJDMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfdG8gICAgICBhY2NvdW50IHRvIHJlY2VpdmUgdGhlIG5ldyBhbW91bnQKICAgICAgICBAcGFyYW0gX2Ftb3VudCAgYW1vdW50IHRvIHdpdGhkcmF3CiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoSUVSQzIwVG9rZW4gX3Rva2VuLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkQWRkcmVzcyhfdG9rZW4pCiAgICAgICAgdmFsaWRBZGRyZXNzKF90bykKICAgICAgICBub3RUaGlzKF90bykKICAgIHsKICAgICAgICBhc3NlcnQoX3Rva2VuLnRyYW5zZmVyKF90bywgX2Ftb3VudCkpOwogICAgfQp9CgovKgogICAgRXRoZXIgVG9rZW4gaW50ZXJmYWNlCiovCmNvbnRyYWN0IElFdGhlclRva2VuIGlzIElUb2tlbkhvbGRlciwgSUVSQzIwVG9rZW4gewogICAgZnVuY3Rpb24gZGVwb3NpdCgpIHB1YmxpYyBwYXlhYmxlOwogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfYW1vdW50KSBwdWJsaWM7CiAgICBmdW5jdGlvbiB3aXRoZHJhd1RvKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpOwp9CgovKgogICAgRUlQMjI4IFRva2VuIENvbnZlcnRlciBpbnRlcmZhY2UKKi8KY29udHJhY3QgSVRva2VuQ29udmVydGVyIHsKICAgIGZ1bmN0aW9uIGNvbnZlcnRpYmxlVG9rZW5Db3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MTYpOwogICAgZnVuY3Rpb24gY29udmVydGlibGVUb2tlbih1aW50MTYgX3Rva2VuSW5kZXgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIGdldFJldHVybihJRVJDMjBUb2tlbiBfZnJvbVRva2VuLCBJRVJDMjBUb2tlbiBfdG9Ub2tlbiwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBjb252ZXJ0KElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwogICAgLy8gZGVwcmVjYXRlZCwgYmFja3dhcmQgY29tcGF0aWJpbGl0eQogICAgZnVuY3Rpb24gY2hhbmdlKElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwp9CgovKgogICAgQmFuY29yIFF1aWNrIENvbnZlcnRlciBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUJhbmNvclF1aWNrQ29udmVydGVyIHsKICAgIGZ1bmN0aW9uIGNvbnZlcnQoSUVSQzIwVG9rZW5bXSBfcGF0aCwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4pIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gY29udmVydEZvcihJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybiwgYWRkcmVzcyBfZm9yKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zICh1aW50MjU2KTsKfQoKLyoKICAgIFRoZSBCYW5jb3JRdWlja0NvbnZlcnRlciBjb250cmFjdCBwcm92aWRlcyBhbGxvd3MgY29udmVydGluZyBiZXR3ZWVuIGFueSB0b2tlbiBpbiB0aGUgCiAgICBiYW5jb3IgbmV0d29yayBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbi4KCiAgICBBIG5vdGUgb24gY29udmVyc2lvbiBwYXRocyAtCiAgICBDb252ZXJzaW9uIHBhdGggaXMgYSBkYXRhIHN0cnVjdHVyZSB0aGF0J3MgdXNlZCB3aGVuIGNvbnZlcnRpbmcgYSB0b2tlbiB0byBhbm90aGVyIHRva2VuIGluIHRoZSBiYW5jb3IgbmV0d29yawogICAgd2hlbiB0aGUgY29udmVyc2lvbiBjYW5ub3QgbmVjZXNzYXJpbHkgYmUgZG9uZSBieSBzaW5nbGUgY29udmVydGVyIGFuZCBtaWdodCByZXF1aXJlIG11bHRpcGxlICdob3BzJy4KICAgIFRoZSBwYXRoIGRlZmluZXMgd2hpY2ggY29udmVydGVycyBzaG91bGQgYmUgdXNlZCBhbmQgd2hhdCBraW5kIG9mIGNvbnZlcnNpb24gc2hvdWxkIGJlIGRvbmUgaW4gZWFjaCBzdGVwLgoKICAgIFRoZSBwYXRoIGZvcm1hdCBkb2Vzbid0IGluY2x1ZGUgY29tcGxleCBzdHJ1Y3R1cmUgYW5kIGluc3RlYWQsIGl0IGlzIHJlcHJlc2VudGVkIGJ5IGEgc2luZ2xlIGFycmF5CiAgICBpbiB3aGljaCBlYWNoICdob3AnIGlzIHJlcHJlc2VudGVkIGJ5IGEgMi10dXBsZSAtIHNtYXJ0IHRva2VuICYgdG8gdG9rZW4uCiAgICBJbiBhZGRpdGlvbiwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgYWx3YXlzIHRoZSBzb3VyY2UgdG9rZW4uCiAgICBUaGUgc21hcnQgdG9rZW4gaXMgb25seSB1c2VkIGFzIGEgcG9pbnRlciB0byBhIGNvbnZlcnRlciAoc2luY2UgY29udmVydGVyIGFkZHJlc3NlcyBhcmUgbW9yZSBsaWtlbHkgdG8gY2hhbmdlKS4KCiAgICBGb3JtYXQ6CiAgICBbc291cmNlIHRva2VuLCBzbWFydCB0b2tlbiwgdG8gdG9rZW4sIHNtYXJ0IHRva2VuLCB0byB0b2tlbi4uLl0KKi8KY29udHJhY3QgQmFuY29yUXVpY2tDb252ZXJ0ZXIgaXMgSUJhbmNvclF1aWNrQ29udmVydGVyLCBUb2tlbkhvbGRlciB7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBldGhlclRva2VuczsgICAvLyBsaXN0IG9mIGFsbCBzdXBwb3J0ZWQgZXRoZXIgdG9rZW5zCgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIEJhbmNvclF1aWNrQ29udmVydGVyKCkgewogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIGNvbnZlcnNpb24gcGF0aCAtIHZlcmlmaWVzIHRoYXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpcyBvZGQgYW5kIHRoYXQgbWF4aW11bSBudW1iZXIgb2YgJ2hvcHMnIGlzIDEwCiAgICBtb2RpZmllciB2YWxpZENvbnZlcnNpb25QYXRoKElFUkMyMFRva2VuW10gX3BhdGgpIHsKICAgICAgICByZXF1aXJlKF9wYXRoLmxlbmd0aCA+IDIgJiYgX3BhdGgubGVuZ3RoIDw9ICgxICsgMiAqIDEwKSAmJiBfcGF0aC5sZW5ndGggJSAyID09IDEpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIHJlZ2lzdGVyL3VucmVnaXN0ZXIgZXRoZXIgdG9rZW5zCgogICAgICAgIEBwYXJhbSBfdG9rZW4gICAgICAgZXRoZXIgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfcmVnaXN0ZXIgICAgdHJ1ZSB0byByZWdpc3RlciwgZmFsc2UgdG8gdW5yZWdpc3RlcgogICAgKi8KICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXRoZXJUb2tlbihJRXRoZXJUb2tlbiBfdG9rZW4sIGJvb2wgX3JlZ2lzdGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkQWRkcmVzcyhfdG9rZW4pCiAgICAgICAgbm90VGhpcyhfdG9rZW4pCiAgICB7CiAgICAgICAgZXRoZXJUb2tlbnNbX3Rva2VuXSA9IF9yZWdpc3RlcjsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGNvbnZlcnRzIHRoZSB0b2tlbiB0byBhbnkgb3RoZXIgdG9rZW4gaW4gdGhlIGJhbmNvciBuZXR3b3JrIGJ5IGZvbGxvd2luZwogICAgICAgIGEgcHJlZGVmaW5lZCBjb252ZXJzaW9uIHBhdGggYW5kIHRyYW5zZmVycyB0aGUgcmVzdWx0IHRva2VucyB0byBhIHRhcmdldCBhY2NvdW50CiAgICAgICAgbm90ZSB0aGF0IHRoZSBjb252ZXJ0ZXIgc2hvdWxkIGFscmVhZHkgb3duIHRoZSBzb3VyY2UgdG9rZW5zCgogICAgICAgIEBwYXJhbSBfcGF0aCAgICAgICAgY29udmVyc2lvbiBwYXRoLCBzZWUgY29udmVyc2lvbiBwYXRoIGZvcm1hdCBhYm92ZQogICAgICAgIEBwYXJhbSBfYW1vdW50ICAgICAgYW1vdW50IHRvIGNvbnZlcnQgZnJvbSAoaW4gdGhlIGluaXRpYWwgc291cmNlIHRva2VuKQogICAgICAgIEBwYXJhbSBfbWluUmV0dXJuICAgaWYgdGhlIGNvbnZlcnNpb24gcmVzdWx0cyBpbiBhbiBhbW91bnQgc21hbGxlciB0aGFuIHRoZSBtaW5pbXVtIHJldHVybiAtIGl0IGlzIGNhbmNlbGxlZCwgbXVzdCBiZSBub256ZXJvCiAgICAgICAgQHBhcmFtIF9mb3IgICAgICAgICBhY2NvdW50IHRoYXQgd2lsbCByZWNlaXZlIHRoZSBjb252ZXJzaW9uIHJlc3VsdAoKICAgICAgICBAcmV0dXJuIHRva2VucyBpc3N1ZWQgaW4gcmV0dXJuCiAgICAqLwogICAgZnVuY3Rpb24gY29udmVydEZvcihJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybiwgYWRkcmVzcyBfZm9yKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICB2YWxpZENvbnZlcnNpb25QYXRoKF9wYXRoKQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gaWYgRVRIIGlzIHByb3ZpZGVkLCBlbnN1cmUgdGhhdCB0aGUgYW1vdW50IGlzIGlkZW50aWNhbCB0byBfYW1vdW50IGFuZCB2ZXJpZnkgdGhhdCB0aGUgc291cmNlIHRva2VuIGlzIGFuIGV0aGVyIHRva2VuCiAgICAgICAgSUVSQzIwVG9rZW4gZnJvbVRva2VuID0gX3BhdGhbMF07CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMCB8fCAoX2Ftb3VudCA9PSBtc2cudmFsdWUgJiYgZXRoZXJUb2tlbnNbZnJvbVRva2VuXSkpOwoKICAgICAgICBJU21hcnRUb2tlbiBzbWFydFRva2VuOwogICAgICAgIElFUkMyMFRva2VuIHRvVG9rZW47CiAgICAgICAgSVRva2VuQ29udmVydGVyIGNvbnZlcnRlcjsKICAgICAgICB1aW50MjU2IHBhdGhMZW5ndGggPSBfcGF0aC5sZW5ndGg7CgogICAgICAgIC8vIGlmIEVUSCB3YXMgc2VudCB3aXRoIHRoZSBjYWxsLCB0aGUgc291cmNlIGlzIGFuIGV0aGVyIHRva2VuIC0gZGVwb3NpdCB0aGUgRVRIIGluIGl0CiAgICAgICAgLy8gb3RoZXJ3aXNlLCB3ZSBhc3N1bWUgd2UgYWxyZWFkeSBoYXZlIHRoZSB0b2tlbnMKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgSUV0aGVyVG9rZW4oZnJvbVRva2VuKS5kZXBvc2l0LnZhbHVlKG1zZy52YWx1ZSkoKTsKCiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBjb252ZXJzaW9uIHBhdGgKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDE7IGkgPCBwYXRoTGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgc21hcnRUb2tlbiA9IElTbWFydFRva2VuKF9wYXRoW2ldKTsKICAgICAgICAgICAgdG9Ub2tlbiA9IF9wYXRoW2kgKyAxXTsKICAgICAgICAgICAgY29udmVydGVyID0gSVRva2VuQ29udmVydGVyKHNtYXJ0VG9rZW4ub3duZXIoKSk7CgogICAgICAgICAgICAvLyBpZiB0aGUgc21hcnQgdG9rZW4gaXNuJ3QgdGhlIHNvdXJjZSAoZnJvbSB0b2tlbiksIHRoZSBjb252ZXJ0ZXIgZG9lc24ndCBoYXZlIGNvbnRyb2wgb3ZlciBpdCBhbmQgdGh1cyB3ZSBuZWVkIHRvIGFwcHJvdmUgdGhlIHJlcXVlc3QKICAgICAgICAgICAgaWYgKHNtYXJ0VG9rZW4gIT0gZnJvbVRva2VuKQogICAgICAgICAgICAgICAgZW5zdXJlQWxsb3dhbmNlKGZyb21Ub2tlbiwgY29udmVydGVyLCBfYW1vdW50KTsKCiAgICAgICAgICAgIC8vIG1ha2UgdGhlIGNvbnZlcnNpb24gLSBpZiBpdCdzIHRoZSBsYXN0IG9uZSwgYWxzbyBwcm92aWRlIHRoZSBtaW5pbXVtIHJldHVybiB2YWx1ZQogICAgICAgICAgICBfYW1vdW50ID0gY29udmVydGVyLmNoYW5nZShmcm9tVG9rZW4sIHRvVG9rZW4sIF9hbW91bnQsIGkgPT0gcGF0aExlbmd0aCAtIDIgPyBfbWluUmV0dXJuIDogMSk7CiAgICAgICAgICAgIGZyb21Ub2tlbiA9IHRvVG9rZW47CiAgICAgICAgfQoKICAgICAgICAvLyBmaW5pc2hlZCB0aGUgY29udmVyc2lvbiwgdHJhbnNmZXIgdGhlIGZ1bmRzIHRvIHRoZSB0YXJnZXQgYWNjb3VudAogICAgICAgIC8vIGlmIHRoZSB0YXJnZXQgdG9rZW4gaXMgYW4gZXRoZXIgdG9rZW4sIHdpdGhkcmF3IHRoZSB0b2tlbnMgYW5kIHNlbmQgdGhlbSBhcyBFVEgKICAgICAgICAvLyBvdGhlcndpc2UsIHRyYW5zZmVyIHRoZSB0b2tlbnMgYXMgaXMKICAgICAgICBpZiAoZXRoZXJUb2tlbnNbdG9Ub2tlbl0pCiAgICAgICAgICAgIElFdGhlclRva2VuKHRvVG9rZW4pLndpdGhkcmF3VG8oX2ZvciwgX2Ftb3VudCk7CiAgICAgICAgZWxzZQogICAgICAgICAgICBhc3NlcnQodG9Ub2tlbi50cmFuc2ZlcihfZm9yLCBfYW1vdW50KSk7CgogICAgICAgIHJldHVybiBfYW1vdW50OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgY2xhaW1zIHRoZSBjYWxsZXIncyB0b2tlbnMsIGNvbnZlcnRzIHRoZW0gdG8gYW55IG90aGVyIHRva2VuIGluIHRoZSBiYW5jb3IgbmV0d29yawogICAgICAgIGJ5IGZvbGxvd2luZyBhIHByZWRlZmluZWQgY29udmVyc2lvbiBwYXRoIGFuZCB0cmFuc2ZlcnMgdGhlIHJlc3VsdCB0b2tlbnMgdG8gYSB0YXJnZXQgYWNjb3VudAogICAgICAgIG5vdGUgdGhhdCBhbGxvd2FuY2UgbXVzdCBiZSBzZXQgYmVmb3JlaGFuZAoKICAgICAgICBAcGFyYW0gX3BhdGggICAgICAgIGNvbnZlcnNpb24gcGF0aCwgc2VlIGNvbnZlcnNpb24gcGF0aCBmb3JtYXQgYWJvdmUKICAgICAgICBAcGFyYW0gX2Ftb3VudCAgICAgIGFtb3VudCB0byBjb252ZXJ0IGZyb20gKGluIHRoZSBpbml0aWFsIHNvdXJjZSB0b2tlbikKICAgICAgICBAcGFyYW0gX21pblJldHVybiAgIGlmIHRoZSBjb252ZXJzaW9uIHJlc3VsdHMgaW4gYW4gYW1vdW50IHNtYWxsZXIgdGhhbiB0aGUgbWluaW11bSByZXR1cm4gLSBpdCBpcyBjYW5jZWxsZWQsIG11c3QgYmUgbm9uemVybwogICAgICAgIEBwYXJhbSBfZm9yICAgICAgICAgYWNjb3VudCB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgY29udmVyc2lvbiByZXN1bHQKCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIGNsYWltQW5kQ29udmVydEZvcihJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybiwgYWRkcmVzcyBfZm9yKSBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIHdlIG5lZWQgdG8gdHJhbnNmZXIgdGhlIHRva2VucyBmcm9tIHRoZSBjYWxsZXIgdG8gdGhlIGNvbnZlcnRlciBiZWZvcmUgd2UgZm9sbG93CiAgICAgICAgLy8gdGhlIGNvbnZlcnNpb24gcGF0aCwgdG8gYWxsb3cgaXQgdG8gZXhlY3V0ZSB0aGUgY29udmVyc2lvbiBvbiBiZWhhbGYgb2YgdGhlIGNhbGxlcgogICAgICAgIC8vIG5vdGU6IHdlIGFzc3VtZSB3ZSBhbHJlYWR5IGhhdmUgYWxsb3dhbmNlCiAgICAgICAgSUVSQzIwVG9rZW4gZnJvbVRva2VuID0gX3BhdGhbMF07CiAgICAgICAgYXNzZXJ0KGZyb21Ub2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgX2Ftb3VudCkpOwogICAgICAgIHJldHVybiBjb252ZXJ0Rm9yKF9wYXRoLCBfYW1vdW50LCBfbWluUmV0dXJuLCBfZm9yKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGNvbnZlcnRzIHRoZSB0b2tlbiB0byBhbnkgb3RoZXIgdG9rZW4gaW4gdGhlIGJhbmNvciBuZXR3b3JrIGJ5IGZvbGxvd2luZwogICAgICAgIGEgcHJlZGVmaW5lZCBjb252ZXJzaW9uIHBhdGggYW5kIHRyYW5zZmVycyB0aGUgcmVzdWx0IHRva2VucyBiYWNrIHRvIHRoZSBzZW5kZXIKICAgICAgICBub3RlIHRoYXQgdGhlIGNvbnZlcnRlciBzaG91bGQgYWxyZWFkeSBvd24gdGhlIHNvdXJjZSB0b2tlbnMKCiAgICAgICAgQHBhcmFtIF9wYXRoICAgICAgICBjb252ZXJzaW9uIHBhdGgsIHNlZSBjb252ZXJzaW9uIHBhdGggZm9ybWF0IGFib3ZlCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgICBhbW91bnQgdG8gY29udmVydCBmcm9tIChpbiB0aGUgaW5pdGlhbCBzb3VyY2UgdG9rZW4pCiAgICAgICAgQHBhcmFtIF9taW5SZXR1cm4gICBpZiB0aGUgY29udmVyc2lvbiByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnZlcnQoSUVSQzIwVG9rZW5bXSBfcGF0aCwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4pIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gY29udmVydEZvcihfcGF0aCwgX2Ftb3VudCwgX21pblJldHVybiwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBjbGFpbXMgdGhlIGNhbGxlcidzIHRva2VucywgY29udmVydHMgdGhlbSB0byBhbnkgb3RoZXIgdG9rZW4gaW4gdGhlIGJhbmNvciBuZXR3b3JrCiAgICAgICAgYnkgZm9sbG93aW5nIGEgcHJlZGVmaW5lZCBjb252ZXJzaW9uIHBhdGggYW5kIHRyYW5zZmVycyB0aGUgcmVzdWx0IHRva2VucyBiYWNrIHRvIHRoZSBzZW5kZXIKICAgICAgICBub3RlIHRoYXQgYWxsb3dhbmNlIG11c3QgYmUgc2V0IGJlZm9yZWhhbmQKCiAgICAgICAgQHBhcmFtIF9wYXRoICAgICAgICBjb252ZXJzaW9uIHBhdGgsIHNlZSBjb252ZXJzaW9uIHBhdGggZm9ybWF0IGFib3ZlCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgICBhbW91bnQgdG8gY29udmVydCBmcm9tIChpbiB0aGUgaW5pdGlhbCBzb3VyY2UgdG9rZW4pCiAgICAgICAgQHBhcmFtIF9taW5SZXR1cm4gICBpZiB0aGUgY29udmVyc2lvbiByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIGNsYWltQW5kQ29udmVydChJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gY2xhaW1BbmRDb252ZXJ0Rm9yKF9wYXRoLCBfYW1vdW50LCBfbWluUmV0dXJuLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHV0aWxpdHksIGNoZWNrcyB3aGV0aGVyIGFsbG93YW5jZSBmb3IgdGhlIGdpdmVuIHNwZW5kZXIgZXhpc3RzIGFuZCBhcHByb3ZlcyBvbmUgaWYgaXQgZG9lc24ndAoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgdG9rZW4gdG8gY2hlY2sgdGhlIGFsbG93YW5jZSBpbgogICAgICAgIEBwYXJhbSBfc3BlbmRlciBhcHByb3ZlZCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF92YWx1ZSAgIGFsbG93YW5jZSBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBlbnN1cmVBbGxvd2FuY2UoSUVSQzIwVG9rZW4gX3Rva2VuLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHJpdmF0ZSB7CiAgICAgICAgLy8gY2hlY2sgaWYgYWxsb3dhbmNlIGZvciB0aGUgZ2l2ZW4gYW1vdW50IGFscmVhZHkgZXhpc3RzCiAgICAgICAgaWYgKF90b2tlbi5hbGxvd2FuY2UodGhpcywgX3NwZW5kZXIpID49IF92YWx1ZSkKICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAvLyBpZiB0aGUgYWxsb3dhbmNlIGlzIG5vbnplcm8sIG11c3QgcmVzZXQgaXQgdG8gMCBmaXJzdAogICAgICAgIGlmIChfdG9rZW4uYWxsb3dhbmNlKHRoaXMsIF9zcGVuZGVyKSAhPSAwKQogICAgICAgICAgICBhc3NlcnQoX3Rva2VuLmFwcHJvdmUoX3NwZW5kZXIsIDApKTsKCiAgICAgICAgLy8gYXBwcm92ZSB0aGUgbmV3IGFsbG93YW5jZQogICAgICAgIGFzc2VydChfdG9rZW4uYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSk7CiAgICB9Cn0='.
	

]
