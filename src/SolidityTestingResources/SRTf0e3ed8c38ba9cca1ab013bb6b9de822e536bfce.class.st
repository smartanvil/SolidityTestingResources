Class {
	#name : #SRTf0e3ed8c38ba9cca1ab013bb6b9de822e536bfce,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf0e3ed8c38ba9cca1ab013bb6b9de822e536bfce >> base64 [
	^ ''.
	

]
