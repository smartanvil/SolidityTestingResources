Class {
	#name : #SRT64c6000e088bfe297cb7c8a1fcaf01c440153cb9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT64c6000e088bfe297cb7c8a1fcaf01c440153cb9 >> base64 [
	^ ''.
	

]
