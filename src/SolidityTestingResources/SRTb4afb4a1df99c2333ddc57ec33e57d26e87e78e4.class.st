Class {
	#name : #SRTb4afb4a1df99c2333ddc57ec33e57d26e87e78e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb4afb4a1df99c2333ddc57ec33e57d26e87e78e4 >> base64 [
	^ 'LyplbGVtZW50MTQqLwovKkNvaW5GbGlwICAxJSBvZiBIb3VzZUVkZ2UqLwoKCi8vIDxPUkFDTElaRV9BUEk+Ci8qCkNvcHlyaWdodCAoYykgMjAxNS0yMDE2IE9yYWNsaXplIFNSTApDb3B5cmlnaHQgKGMpIDIwMTYgT3JhY2xpemUgTFRECgoKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKCgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOClRIRSBTT0ZUV0FSRS4KKi8KCi8vIFRoaXMgYXBpIGlzIGN1cnJlbnRseSB0YXJnZXRlZCBhdCAwLjQuMTgsIHBsZWFzZSBpbXBvcnQgb3JhY2xpemVBUElfcHJlMC40LnNvbCBvciBvcmFjbGl6ZUFQSV8wLjQgd2hlcmUgbmVjZXNzYXJ5CnByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKY29udHJhY3QgT3JhY2xpemVJIHsKICAgIGFkZHJlc3MgcHVibGljIGNiQWRkcmVzczsKICAgIGZ1bmN0aW9uIHF1ZXJ5KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZykgZXh0ZXJuYWwgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgZXh0ZXJuYWwgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTIodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTJfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMiwgdWludCBfZ2FzbGltaXQpIGV4dGVybmFsIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gcXVlcnlOKHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTikgcHVibGljIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gcXVlcnlOX3dpdGhHYXNMaW1pdCh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgYnl0ZXMgX2FyZ04sIHVpbnQgX2dhc2xpbWl0KSBleHRlcm5hbCBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIGdldFByaWNlKHN0cmluZyBfZGF0YXNvdXJjZSkgcHVibGljIHJldHVybnMgKHVpbnQgX2RzcHJpY2UpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSBwdWJsaWMgcmV0dXJucyAodWludCBfZHNwcmljZSk7CiAgICBmdW5jdGlvbiBzZXRQcm9vZlR5cGUoYnl0ZSBfcHJvb2ZUeXBlKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHJhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyhieXRlczMyKTsKfQpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgewogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcygpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsKfQpjb250cmFjdCB1c2luZ09yYWNsaXplIHsKICAgIHVpbnQgY29uc3RhbnQgZGF5ID0gNjAqNjAqMjQ7CiAgICB1aW50IGNvbnN0YW50IHdlZWsgPSA2MCo2MCoyNCo3OwogICAgdWludCBjb25zdGFudCBtb250aCA9IDYwKjYwKjI0KjMwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTk9ORSA9IDB4MDA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9UTFNOb3RhcnkgPSAweDEwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfQW5kcm9pZCA9IDB4MjA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9MZWRnZXIgPSAweDMwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTmF0aXZlID0gMHhGMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZTdG9yYWdlX0lQRlMgPSAweDAxOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2F1dG8gPSAwOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX21haW5uZXQgPSAxOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX3Rlc3RuZXQgPSAyOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX21vcmRlbiA9IDI7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfY29uc2Vuc3lzID0gMTYxOwoKICAgIE9yYWNsaXplQWRkclJlc29sdmVySSBPQVI7CgogICAgT3JhY2xpemVJIG9yYWNsaXplOwogICAgbW9kaWZpZXIgb3JhY2xpemVBUEkgewogICAgICAgIGlmKChhZGRyZXNzKE9BUik9PTApfHwoZ2V0Q29kZVNpemUoYWRkcmVzcyhPQVIpKT09MCkpCiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmsobmV0d29ya0lEX2F1dG8pOwoKICAgICAgICBpZihhZGRyZXNzKG9yYWNsaXplKSAhPSBPQVIuZ2V0QWRkcmVzcygpKQogICAgICAgICAgICBvcmFjbGl6ZSA9IE9yYWNsaXplSShPQVIuZ2V0QWRkcmVzcygpKTsKCiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIGNvdXBvbihzdHJpbmcgY29kZSl7CiAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXROZXR3b3JrKHVpbnQ4IG5ldHdvcmtJRCkgaW50ZXJuYWwgcmV0dXJucyhib29sKXsKICAgICAgcmV0dXJuIG9yYWNsaXplX3NldE5ldHdvcmsoKTsKICAgICAgbmV0d29ya0lEOyAvLyBzaWxlbmNlIHRoZSB3YXJuaW5nIGFuZCByZW1haW4gYmFja3dhcmRzIGNvbXBhdGlibGUKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsoKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpewogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApeyAvL21haW5uZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfbWFpbm5ldCIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk+MCl7IC8vcm9wc3RlbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX3JvcHN0ZW4zIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhCN0EwN0JjRjJCYTJmMjcwM2IyNEMwNjkxYjUyNzg5OTlDNTlBQzdlKT4wKXsgLy9rb3ZhbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX2tvdmFuIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKXsgLy9yaW5rZWJ5IHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MTQ2NTAwY2ZkMzVCMjJFNEEzOTJGZTBhRGMwNkRlMWExMzY4RWQ0OCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfcmlua2VieSIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk+MCl7IC8vZXRoZXJldW0tYnJpZGdlCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik+MCl7IC8vZXRoZXIuY2FtcCBpZGUKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg1MWVmYUY0YzhCM0M5QWZCRDVhQjlGNGJiQzgyNzg0QWI2ZWY4ZkFBKT4wKXsgLy9icm93c2VyLXNvbGlkaXR5CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0KSBwdWJsaWMgewogICAgICAgIF9fY2FsbGJhY2sobXlpZCwgcmVzdWx0LCBuZXcgYnl0ZXMoMCkpOwogICAgfQogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQsIGJ5dGVzIHByb29mKSBwdWJsaWMgewogICAgICByZXR1cm47CiAgICAgIG15aWQ7IHJlc3VsdDsgcHJvb2Y7IC8vIFNpbGVuY2UgY29tcGlsZXIgd2FybmluZ3MKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShzdHJpbmcgZGF0YXNvdXJjZSkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAodWludCl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsKICAgICAgICByZXR1cm4gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ml93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2NiQWRkcmVzcygpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGFkZHJlc3MpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5jYkFkZHJlc3MoKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldFByb29mKGJ5dGUgcHJvb2ZQKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldFByb29mVHlwZShwcm9vZlApOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UodWludCBnYXNQcmljZSkgb3JhY2xpemVBUEkgaW50ZXJuYWwgewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRDdXN0b21HYXNQcmljZShnYXNQcmljZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyKXsKICAgICAgICByZXR1cm4gb3JhY2xpemUucmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb2RlU2l6ZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKHVpbnQgX3NpemUpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIF9zaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZUFkZHIoc3RyaW5nIF9hKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGFkZHJlc3MpewogICAgICAgIGJ5dGVzIG1lbW9yeSB0bXAgPSBieXRlcyhfYSk7CiAgICAgICAgdWludDE2MCBpYWRkciA9IDA7CiAgICAgICAgdWludDE2MCBiMTsKICAgICAgICB1aW50MTYwIGIyOwogICAgICAgIGZvciAodWludCBpPTI7IGk8MisyKjIwOyBpKz0yKXsKICAgICAgICAgICAgaWFkZHIgKj0gMjU2OwogICAgICAgICAgICBiMSA9IHVpbnQxNjAodG1wW2ldKTsKICAgICAgICAgICAgYjIgPSB1aW50MTYwKHRtcFtpKzFdKTsKICAgICAgICAgICAgaWYgKChiMSA+PSA5NykmJihiMSA8PSAxMDIpKSBiMSAtPSA4NzsKICAgICAgICAgICAgZWxzZSBpZiAoKGIxID49IDY1KSYmKGIxIDw9IDcwKSkgYjEgLT0gNTU7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMSA+PSA0OCkmJihiMSA8PSA1NykpIGIxIC09IDQ4OwogICAgICAgICAgICBpZiAoKGIyID49IDk3KSYmKGIyIDw9IDEwMikpIGIyIC09IDg3OwogICAgICAgICAgICBlbHNlIGlmICgoYjIgPj0gNjUpJiYoYjIgPD0gNzApKSBiMiAtPSA1NTsKICAgICAgICAgICAgZWxzZSBpZiAoKGIyID49IDQ4KSYmKGIyIDw9IDU3KSkgYjIgLT0gNDg7CiAgICAgICAgICAgIGlhZGRyICs9IChiMSoxNitiMik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhZGRyZXNzKGlhZGRyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJDb21wYXJlKHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBhID0gYnl0ZXMoX2EpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gYS5sZW5ndGg7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgbWluTGVuZ3RoKSBtaW5MZW5ndGggPSBiLmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspCiAgICAgICAgICAgIGlmIChhW2ldIDwgYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pCiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UgaWYgKGEubGVuZ3RoID4gYi5sZW5ndGgpCiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gaW5kZXhPZihzdHJpbmcgX2hheXN0YWNrLCBzdHJpbmcgX25lZWRsZSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChpbnQpIHsKICAgICAgICBieXRlcyBtZW1vcnkgaCA9IGJ5dGVzKF9oYXlzdGFjayk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG4gPSBieXRlcyhfbmVlZGxlKTsKICAgICAgICBpZihoLmxlbmd0aCA8IDEgfHwgbi5sZW5ndGggPCAxIHx8IChuLmxlbmd0aCA+IGgubGVuZ3RoKSkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UgaWYoaC5sZW5ndGggPiAoMioqMTI4IC0xKSkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHVpbnQgc3ViaW5kZXggPSAwOwogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBoLmxlbmd0aDsgaSArKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKGhbaV0gPT0gblswXSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCA9IDE7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3ViaW5kZXggPCBuLmxlbmd0aCAmJiAoaSArIHN1YmluZGV4KSA8IGgubGVuZ3RoICYmIGhbaSArIHN1YmluZGV4XSA9PSBuW3N1YmluZGV4XSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKHN1YmluZGV4ID09IG4ubGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50KGkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCwgc3RyaW5nIF9lKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmEgPSBieXRlcyhfYSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYiA9IGJ5dGVzKF9iKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JjID0gYnl0ZXMoX2MpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmQgPSBieXRlcyhfZCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iZSA9IGJ5dGVzKF9lKTsKICAgICAgICBzdHJpbmcgbWVtb3J5IGFiY2RlID0gbmV3IHN0cmluZyhfYmEubGVuZ3RoICsgX2JiLmxlbmd0aCArIF9iYy5sZW5ndGggKyBfYmQubGVuZ3RoICsgX2JlLmxlbmd0aCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJhYmNkZSA9IGJ5dGVzKGFiY2RlKTsKICAgICAgICB1aW50IGsgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9iYS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmFbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iYi5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmJbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iYy5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmNbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZC5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmRbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmVbaV07CiAgICAgICAgcmV0dXJuIHN0cmluZyhiYWJjZGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QpIGludGVybmFsIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCBfZCwgIiIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgIiIsICIiKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsICIiLCAiIiwgIiIpOwogICAgfQoKICAgIC8vIHBhcnNlSW50CiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcgX2EpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBwYXJzZUludChfYSwgMCk7CiAgICB9CgogICAgLy8gcGFyc2VJbnQocGFyc2VGbG9hdCoxMF5fYikKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSwgdWludCBfYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJyZXN1bHQgPSBieXRlcyhfYSk7CiAgICAgICAgdWludCBtaW50ID0gMDsKICAgICAgICBib29sIGRlY2ltYWxzID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxicmVzdWx0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYgKChicmVzdWx0W2ldID49IDQ4KSYmKGJyZXN1bHRbaV0gPD0gNTcpKXsKICAgICAgICAgICAgICAgIGlmIChkZWNpbWFscyl7CiAgICAgICAgICAgICAgICAgICBpZiAoX2IgPT0gMCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBfYi0tOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbWludCAqPSAxMDsKICAgICAgICAgICAgICAgIG1pbnQgKz0gdWludChicmVzdWx0W2ldKSAtIDQ4OwogICAgICAgICAgICB9IGVsc2UgaWYgKGJyZXN1bHRbaV0gPT0gNDYpIGRlY2ltYWxzID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKF9iID4gMCkgbWludCAqPSAxMCoqX2I7CiAgICAgICAgcmV0dXJuIG1pbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gdWludDJzdHIodWludCBpKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZyl7CiAgICAgICAgaWYgKGkgPT0gMCkgcmV0dXJuICIwIjsKICAgICAgICB1aW50IGogPSBpOwogICAgICAgIHVpbnQgbGVuOwogICAgICAgIHdoaWxlIChqICE9IDApewogICAgICAgICAgICBsZW4rKzsKICAgICAgICAgICAgaiAvPSAxMDsKICAgICAgICB9CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJzdHIgPSBuZXcgYnl0ZXMobGVuKTsKICAgICAgICB1aW50IGsgPSBsZW4gLSAxOwogICAgICAgIHdoaWxlIChpICE9IDApewogICAgICAgICAgICBic3RyW2stLV0gPSBieXRlKDQ4ICsgaSAlIDEwKTsKICAgICAgICAgICAgaSAvPSAxMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cmluZyhic3RyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJhMmNib3Ioc3RyaW5nW10gYXJyKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsKCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgICAgIGJ5dGVzW10gbWVtb3J5IGVsZW1BcnJheSA9IG5ldyBieXRlc1tdKGFycmxlbik7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRsZW4gKz0gZWxlbUFycmF5W2ldLmxlbmd0aCArIChlbGVtQXJyYXlbaV0ubGVuZ3RoIC0gMSkvMjMgKyAzOyAvLyszIGFjY291bnRzIGZvciBwYWlyZWQgaWRlbnRpZmllciB0eXBlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICAgICAgdWludCBjYm9ybGVuID0gYXJybGVuICsgMHg4MDsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOwogICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChieXRlcykgewogICAgICAgICAgICB1aW50IGFycmxlbiA9IGFyci5sZW5ndGg7CgogICAgICAgICAgICAvLyBnZXQgY29ycmVjdCBjYm9yIG91dHB1dCBsZW5ndGgKICAgICAgICAgICAgdWludCBvdXRwdXRsZW4gPSAwOwogICAgICAgICAgICBieXRlc1tdIG1lbW9yeSBlbGVtQXJyYXkgPSBuZXcgYnl0ZXNbXShhcnJsZW4pOwogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICAgICAgZWxlbUFycmF5W2ldID0gKGJ5dGVzKGFycltpXSkpOwogICAgICAgICAgICAgICAgb3V0cHV0bGVuICs9IGVsZW1BcnJheVtpXS5sZW5ndGggKyAoZWxlbUFycmF5W2ldLmxlbmd0aCAtIDEpLzIzICsgMzsgLy8rMyBhY2NvdW50cyBmb3IgcGFpcmVkIGlkZW50aWZpZXIgdHlwZXMKICAgICAgICAgICAgfQogICAgICAgICAgICB1aW50IGN0ciA9IDA7CiAgICAgICAgICAgIHVpbnQgY2JvcmxlbiA9IGFycmxlbiArIDB4ODA7CiAgICAgICAgICAgIG91dHB1dGxlbiArPSBieXRlKGNib3JsZW4pLmxlbmd0aDsKICAgICAgICAgICAgYnl0ZXMgbWVtb3J5IHJlcyA9IG5ldyBieXRlcyhvdXRwdXRsZW4pOwoKICAgICAgICAgICAgd2hpbGUgKGJ5dGUoY2JvcmxlbikubGVuZ3RoID4gY3RyKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoY2JvcmxlbilbY3RyXTsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweDVGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgeCA9IDA7IHggPCBlbGVtQXJyYXlbaV0ubGVuZ3RoOyB4KyspIHsKICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIGEgYnVnIHdpdGggbGFyZ2VyIHN0cmluZ3MsIHRoaXMgbWF5IGJlIHRoZSBjdWxwcml0CiAgICAgICAgICAgICAgICAgICAgaWYgKHggJSAyMyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgZWxlbWNib3JsZW4gPSBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geCA+PSAyNCA/IDIzIDogZWxlbUFycmF5W2ldLmxlbmd0aCAtIHg7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1jYm9ybGVuICs9IDB4NDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgbGN0ciA9IGN0cjsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ5dGUoZWxlbWNib3JsZW4pLmxlbmd0aCA+IGN0ciAtIGxjdHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShlbGVtY2JvcmxlbilbY3RyIC0gbGN0cl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGVsZW1BcnJheVtpXVt4XTsKICAgICAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHhGRjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgfQoKCiAgICBzdHJpbmcgb3JhY2xpemVfbmV0d29ya19uYW1lOwogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29ya05hbWUoc3RyaW5nIF9uZXR3b3JrX25hbWUpIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZV9uZXR3b3JrX25hbWUgPSBfbmV0d29ya19uYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gb3JhY2xpemVfbmV0d29ya19uYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX25ld1JhbmRvbURTUXVlcnkodWludCBfZGVsYXksIHVpbnQgX25ieXRlcywgdWludCBfY3VzdG9tR2FzTGltaXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpewogICAgICAgIHJlcXVpcmUoKF9uYnl0ZXMgPiAwKSAmJiAoX25ieXRlcyA8PSAzMikpOwogICAgICAgIC8vIENvbnZlcnQgZnJvbSBzZWNvbmRzIHRvIGxlZGdlciB0aW1lciB0aWNrcwogICAgICAgIF9kZWxheSAqPSAxMDsgCiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsKICAgICAgICBuYnl0ZXNbMF0gPSBieXRlKF9uYnl0ZXMpOwogICAgICAgIGJ5dGVzIG1lbW9yeSB1bm9uY2UgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uS2V5SGFzaF9ieXRlczMyID0gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQodW5vbmNlLCAweDIwKSwgeG9yKGJsb2NraGFzaChzdWIobnVtYmVyLCAxKSksIHhvcihjb2luYmFzZSwgdGltZXN0YW1wKSkpCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpCiAgICAgICAgfQogICAgICAgIGJ5dGVzIG1lbW9yeSBkZWxheSA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYXNzZW1ibHkgeyAKICAgICAgICAgICAgbXN0b3JlKGFkZChkZWxheSwgMHgyMCksIF9kZWxheSkgCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBkZWxheV9ieXRlczggPSBuZXcgYnl0ZXMoOCk7CiAgICAgICAgY29weUJ5dGVzKGRlbGF5LCAyNCwgOCwgZGVsYXlfYnl0ZXM4LCAwKTsKCiAgICAgICAgYnl0ZXNbNF0gbWVtb3J5IGFyZ3MgPSBbdW5vbmNlLCBuYnl0ZXMsIHNlc3Npb25LZXlIYXNoLCBkZWxheV07CiAgICAgICAgYnl0ZXMzMiBxdWVyeUlkID0gb3JhY2xpemVfcXVlcnkoInJhbmRvbSIsIGFyZ3MsIF9jdXN0b21HYXNMaW1pdCk7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IGRlbGF5X2J5dGVzOF9sZWZ0ID0gbmV3IGJ5dGVzKDgpOwogICAgICAgIAogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IHggOj0gbWxvYWQoYWRkKGRlbGF5X2J5dGVzOCwgMHgyMCkpCiAgICAgICAgICAgIG1zdG9yZTgoYWRkKGRlbGF5X2J5dGVzOF9sZWZ0LCAweDI3KSwgZGl2KHgsIDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjYpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjUpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkpCiAgICAgICAgICAgIG1zdG9yZTgoYWRkKGRlbGF5X2J5dGVzOF9sZWZ0LCAweDI0KSwgZGl2KHgsIDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjMpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjIpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkpCiAgICAgICAgICAgIG1zdG9yZTgoYWRkKGRlbGF5X2J5dGVzOF9sZWZ0LCAweDIxKSwgZGl2KHgsIDB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjApLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKCiAgICAgICAgfQogICAgICAgIAogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQocXVlcnlJZCwga2VjY2FrMjU2KGRlbGF5X2J5dGVzOF9sZWZ0LCBhcmdzWzFdLCBzaGEyNTYoYXJnc1swXSksIGFyZ3NbMl0pKTsKICAgICAgICByZXR1cm4gcXVlcnlJZDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzMzIgY29tbWl0bWVudCkgaW50ZXJuYWwgewogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF0gPSBjb21taXRtZW50OwogICAgfQoKICAgIG1hcHBpbmcoYnl0ZXMzMj0+Ynl0ZXMzMikgb3JhY2xpemVfcmFuZG9tRFNfYXJnczsKICAgIG1hcHBpbmcoYnl0ZXMzMj0+Ym9vbCkgb3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWQ7CgogICAgZnVuY3Rpb24gdmVyaWZ5U2lnKGJ5dGVzMzIgdG9zaWduaCwgYnl0ZXMgZGVyc2lnLCBieXRlcyBwdWJrZXkpIGludGVybmFsIHJldHVybnMgKGJvb2wpewogICAgICAgIGJvb2wgc2lnb2s7CiAgICAgICAgYWRkcmVzcyBzaWduZXI7CgogICAgICAgIGJ5dGVzMzIgc2lncjsKICAgICAgICBieXRlczMyIHNpZ3M7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdyXyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgdWludCBvZmZzZXQgPSA0Kyh1aW50KGRlcnNpZ1szXSkgLSAweDIwKTsKICAgICAgICBzaWdyXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCwgMzIsIHNpZ3JfLCAwKTsKICAgICAgICBieXRlcyBtZW1vcnkgc2lnc18gPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIG9mZnNldCArPSAzMiArIDI7CiAgICAgICAgc2lnc18gPSBjb3B5Qnl0ZXMoZGVyc2lnLCBvZmZzZXQrKHVpbnQoZGVyc2lnW29mZnNldC0xXSkgLSAweDIwKSwgMzIsIHNpZ3NfLCAwKTsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaWdyIDo9IG1sb2FkKGFkZChzaWdyXywgMzIpKQogICAgICAgICAgICBzaWdzIDo9IG1sb2FkKGFkZChzaWdzXywgMzIpKQogICAgICAgIH0KCgogICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyNywgc2lnciwgc2lncyk7CiAgICAgICAgaWYgKGFkZHJlc3Moa2VjY2FrMjU2KHB1YmtleSkpID09IHNpZ25lcikgcmV0dXJuIHRydWU7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyOCwgc2lnciwgc2lncyk7CiAgICAgICAgICAgIHJldHVybiAoYWRkcmVzcyhrZWNjYWsyNTYocHVia2V5KSkgPT0gc2lnbmVyKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShieXRlcyBwcm9vZiwgdWludCBzaWcyb2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzaWdvazsKCiAgICAgICAgLy8gU3RlcCA2OiB2ZXJpZnkgdGhlIGF0dGVzdGF0aW9uIHNpZ25hdHVyZSwgQVBQS0VZMSBtdXN0IHNpZ24gdGhlIHNlc3Npb25LZXkgZnJvbSB0aGUgY29ycmVjdCBsZWRnZXIgYXBwIChDT0RFSEFTSCkKICAgICAgICBieXRlcyBtZW1vcnkgc2lnMiA9IG5ldyBieXRlcyh1aW50KHByb29mW3NpZzJvZmZzZXQrMV0pKzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldCwgc2lnMi5sZW5ndGgsIHNpZzIsIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMiA9IG5ldyBieXRlcygxKzY1KzMyKTsKICAgICAgICB0b3NpZ24yWzBdID0gYnl0ZSgxKTsgLy9yb2xlCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY1LCA2NSwgdG9zaWduMiwgMSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IENPREVIQVNIID0gaGV4ImZkOTRmYTcxYmMwYmExMGQzOWQ0NjRkMGQ4ZjQ2NWVmZWVmMGEyNzY0ZTM4ODdmY2M5ZGY0MWRlZDIwZjUwNWMiOwogICAgICAgIGNvcHlCeXRlcyhDT0RFSEFTSCwgMCwgMzIsIHRvc2lnbjIsIDErNjUpOwogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24yKSwgc2lnMiwgYXBwa2V5MV9wdWJrZXkpOwoKICAgICAgICBpZiAoc2lnb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNzogdmVyaWZ5IHRoZSBBUFBLRVkxIHByb3ZlbmFuY2UgKG11c3QgYmUgc2lnbmVkIGJ5IExlZGdlcikKICAgICAgICBieXRlcyBtZW1vcnkgTEVER0VSS0VZID0gaGV4IjdmYjk1NjQ2OWM1YzliODk4NDBkNTViNDM1MzdlNjZhOThkZDQ4MTFlYTBhMjcyMjQyNzJjMmU1NjIyOTExZTg1MzdhMmY4ZTg2YTQ2YmFlYzgyODY0ZTk4ZGQwMWU5Y2NjMmY4YmM1ZGZjOWNiZTVhOTFhMjkwNDk4ZGQ5NmU0IjsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRvc2lnbjMgPSBuZXcgYnl0ZXMoMSs2NSk7CiAgICAgICAgdG9zaWduM1swXSA9IDB4RkU7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzLCA2NSwgdG9zaWduMywgMSk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWczID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbMys2NSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7CgogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24zKSwgc2lnMywgTEVER0VSS0VZKTsKCiAgICAgICAgcmV0dXJuIHNpZ29rOwogICAgfQoKICAgIG1vZGlmaWVyIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5KGJ5dGVzMzIgX3F1ZXJ5SWQsIHN0cmluZyBfcmVzdWx0LCBieXRlcyBfcHJvb2YpIHsKICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQogICAgICAgIHJlcXVpcmUoKF9wcm9vZlswXSA9PSAiTCIpICYmIChfcHJvb2ZbMV0gPT0gIlAiKSAmJiAoX3Byb29mWzJdID09IDEpKTsKCiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkpOwogICAgICAgIHJlcXVpcmUocHJvb2ZWZXJpZmllZCk7CgogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3JldHVybkNvZGUoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgaW50ZXJuYWwgcmV0dXJucyAodWludDgpewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSByZXR1cm4gMTsKCiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkpOwogICAgICAgIGlmIChwcm9vZlZlcmlmaWVkID09IGZhbHNlKSByZXR1cm4gMjsKCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gbWF0Y2hCeXRlczMyUHJlZml4KGJ5dGVzMzIgY29udGVudCwgYnl0ZXMgcHJlZml4LCB1aW50IG5fcmFuZG9tX2J5dGVzKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJvb2wpewogICAgICAgIGJvb2wgbWF0Y2hfID0gdHJ1ZTsKICAgICAgICAKICAgICAgICByZXF1aXJlKHByZWZpeC5sZW5ndGggPT0gbl9yYW5kb21fYnl0ZXMpOwoKICAgICAgICBmb3IgKHVpbnQyNTYgaT0wOyBpPCBuX3JhbmRvbV9ieXRlczsgaSsrKSB7CiAgICAgICAgICAgIGlmIChjb250ZW50W2ldICE9IHByZWZpeFtpXSkgbWF0Y2hfID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbWF0Y2hfOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKGJ5dGVzIHByb29mLCBieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzIHJlc3VsdCwgc3RyaW5nIGNvbnRleHRfbmFtZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7CgogICAgICAgIC8vIFN0ZXAgMjogdGhlIHVuaXF1ZSBrZXloYXNoIGhhcyB0byBtYXRjaCB3aXRoIHRoZSBzaGEyNTYgb2YgKGNvbnRleHQgbmFtZSArIHF1ZXJ5SWQpCiAgICAgICAgdWludCBsZWRnZXJQcm9vZkxlbmd0aCA9IDMrNjUrKHVpbnQocHJvb2ZbMys2NSsxXSkrMikrMzI7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGtleWhhc2ggPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyLCBrZXloYXNoLCAwKTsKICAgICAgICBpZiAoIShrZWNjYWsyNTYoa2V5aGFzaCkgPT0ga2VjY2FrMjU2KHNoYTI1Nihjb250ZXh0X25hbWUsIHF1ZXJ5SWQpKSkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzEgPSBuZXcgYnl0ZXModWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOwoKICAgICAgICAvLyBTdGVwIDM6IHdlIGFzc3VtZSBzaWcxIGlzIHZhbGlkIChpdCB3aWxsIGJlIHZlcmlmaWVkIGR1cmluZyBzdGVwIDUpIGFuZCB3ZSB2ZXJpZnkgaWYgJ3Jlc3VsdCcgaXMgdGhlIHByZWZpeCBvZiBzaGEyNTYoc2lnMSkKICAgICAgICBpZiAoIW1hdGNoQnl0ZXMzMlByZWZpeChzaGEyNTYoc2lnMSksIHJlc3VsdCwgdWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCszMis4XSkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIFN0ZXAgNDogY29tbWl0bWVudCBtYXRjaCB2ZXJpZmljYXRpb24sIGtlY2NhazI1NihkZWxheSwgbmJ5dGVzLCB1bm9uY2UsIHNlc3Npb25LZXlIYXNoKSA9PSBjb21taXRtZW50IGluIHN0b3JhZ2UuCiAgICAgICAgLy8gVGhpcyBpcyB0byB2ZXJpZnkgdGhhdCB0aGUgY29tcHV0ZWQgYXJncyBtYXRjaCB3aXRoIHRoZSBvbmVzIHNwZWNpZmllZCBpbiB0aGUgcXVlcnkuCiAgICAgICAgYnl0ZXMgbWVtb3J5IGNvbW1pdG1lbnRTbGljZTEgPSBuZXcgYnl0ZXMoOCsxKzMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoKzMyLCA4KzErMzIsIGNvbW1pdG1lbnRTbGljZTEsIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgc2Vzc2lvblB1YmtleSA9IG5ldyBieXRlcyg2NCk7CiAgICAgICAgdWludCBzaWcyb2Zmc2V0ID0gbGVkZ2VyUHJvb2ZMZW5ndGgrMzIrKDgrMSszMikrc2lnMS5sZW5ndGgrNjU7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY0LCA2NCwgc2Vzc2lvblB1YmtleSwgMCk7CgogICAgICAgIGJ5dGVzMzIgc2Vzc2lvblB1YmtleUhhc2ggPSBzaGEyNTYoc2Vzc2lvblB1YmtleSk7CiAgICAgICAgaWYgKG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF0gPT0ga2VjY2FrMjU2KGNvbW1pdG1lbnRTbGljZTEsIHNlc3Npb25QdWJrZXlIYXNoKSl7IC8vdW5vbmNlLCBuYnl0ZXMgYW5kIHNlc3Npb25LZXlIYXNoIG1hdGNoCiAgICAgICAgICAgIGRlbGV0ZSBvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdOwogICAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7CgoKICAgICAgICAvLyBTdGVwIDU6IHZhbGlkaXR5IHZlcmlmaWNhdGlvbiBmb3Igc2lnMSAoa2V5aGFzaCBhbmQgYXJncyBzaWduZWQgd2l0aCB0aGUgc2Vzc2lvbktleSkKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMSA9IG5ldyBieXRlcygzMis4KzErMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyKzgrMSszMiwgdG9zaWduMSwgMCk7CiAgICAgICAgaWYgKCF2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjEpLCBzaWcxLCBzZXNzaW9uUHVia2V5KSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAvLyB2ZXJpZnkgaWYgc2Vzc2lvblB1YmtleUhhc2ggd2FzIHZlcmlmaWVkIGFscmVhZHksIGlmIG5vdC4uIGxldCdzIGRvIGl0IQogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF0gPT0gZmFsc2UpewogICAgICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF0gPSBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fc2Vzc2lvbktleVZhbGlkaXR5KHByb29mLCBzaWcyb2Zmc2V0KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF07CiAgICB9CgogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UKICAgIGZ1bmN0aW9uIGNvcHlCeXRlcyhieXRlcyBmcm9tLCB1aW50IGZyb21PZmZzZXQsIHVpbnQgbGVuZ3RoLCBieXRlcyB0bywgdWludCB0b09mZnNldCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChieXRlcykgewogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gbGVuZ3RoICsgdG9PZmZzZXQ7CgogICAgICAgIC8vIEJ1ZmZlciB0b28gc21hbGwKICAgICAgICByZXF1aXJlKHRvLmxlbmd0aCA+PSBtaW5MZW5ndGgpOyAvLyBTaG91bGQgYmUgYSBiZXR0ZXIgd2F5PwoKICAgICAgICAvLyBOT1RFOiB0aGUgb2Zmc2V0IDMyIGlzIGFkZGVkIHRvIHNraXAgdGhlIGBzaXplYCBmaWVsZCBvZiBib3RoIGJ5dGVzIHZhcmlhYmxlcwogICAgICAgIHVpbnQgaSA9IDMyICsgZnJvbU9mZnNldDsKICAgICAgICB1aW50IGogPSAzMiArIHRvT2Zmc2V0OwoKICAgICAgICB3aGlsZSAoaSA8ICgzMiArIGZyb21PZmZzZXQgKyBsZW5ndGgpKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCB0bXAgOj0gbWxvYWQoYWRkKGZyb20sIGkpKQogICAgICAgICAgICAgICAgbXN0b3JlKGFkZCh0bywgaiksIHRtcCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDMyOwogICAgICAgICAgICBqICs9IDMyOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUKICAgIGZ1bmN0aW9uIHNhZmVyX2VjcmVjb3ZlcihieXRlczMyIGhhc2gsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQKICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzCiAgICAgICAgLy8gd3JpdGVzIGFyZSBtZW1vcnkgZXh0ZW5zaW9ucyksIGJ1dCBkb24ndCB1cGRhdGUgdGhlIG9mZnNldCBzbwogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcgogICAgICAgIC8vIHRoaXMgY29udGV4dC4KCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcwogICAgICAgIGJvb2wgcmV0OwogICAgICAgIGFkZHJlc3MgYWRkcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgc2l6ZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgNjQpLCByKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykKCiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiByZXVzZSB0aGUgcmVxdWVzdCBtZW1vcnkgYmVjYXVzZSB3ZSBkZWFsIHdpdGgKICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpCiAgICAgICAgICAgIGFkZHIgOj0gbWxvYWQoc2l6ZSkKICAgICAgICB9CgogICAgICAgIHJldHVybiAocmV0LCBhZGRyKTsKICAgIH0KCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgZnVuY3Rpb24gZWNyZWNvdmVyeShieXRlczMyIGhhc2gsIGJ5dGVzIHNpZykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgewogICAgICAgIGJ5dGVzMzIgcjsKICAgICAgICBieXRlczMyIHM7CiAgICAgICAgdWludDggdjsKCiAgICAgICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpCiAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsKCiAgICAgICAgLy8gVGhlIHNpZ25hdHVyZSBmb3JtYXQgaXMgYSBjb21wYWN0IGZvcm0gb2Y6CiAgICAgICAgLy8gICB7Ynl0ZXMzMiByfXtieXRlczMyIHN9e3VpbnQ4IHZ9CiAgICAgICAgLy8gQ29tcGFjdCBtZWFucywgdWludDggaXMgbm90IHBhZGRlZCB0byAzMiBieXRlcy4KICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZywgMzIpKQogICAgICAgICAgICBzIDo9IG1sb2FkKGFkZChzaWcsIDY0KSkKCiAgICAgICAgICAgIC8vIEhlcmUgd2UgYXJlIGxvYWRpbmcgdGhlIGxhc3QgMzIgYnl0ZXMuIFdlIGV4cGxvaXQgdGhlIGZhY3QgdGhhdAogICAgICAgICAgICAvLyAnbWxvYWQnIHdpbGwgcGFkIHdpdGggemVyb2VzIGlmIHdlIG92ZXJyZWFkLgogICAgICAgICAgICAvLyBUaGVyZSBpcyBubyAnbWxvYWQ4JyB0byBkbyB0aGlzLCBidXQgdGhhdCB3b3VsZCBiZSBuaWNlci4KICAgICAgICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWcsIDk2KSkpCgogICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBzb2x1dGlvbjoKICAgICAgICAgICAgLy8gJ2J5dGUnIGlzIG5vdCB3b3JraW5nIGR1ZSB0byB0aGUgU29saWRpdHkgcGFyc2VyLCBzbyBsZXRzCiAgICAgICAgICAgIC8vIHVzZSB0aGUgc2Vjb25kIGJlc3Qgb3B0aW9uLCAnYW5kJwogICAgICAgICAgICAvLyB2IDo9IGFuZChtbG9hZChhZGQoc2lnLCA2NSkpLCAyNTUpCiAgICAgICAgfQoKICAgICAgICAvLyBhbGJlaXQgbm9uLXRyYW5zYWN0aW9uYWwgc2lnbmF0dXJlcyBhcmUgbm90IHNwZWNpZmllZCBieSB0aGUgWVAsIG9uZSB3b3VsZCBleHBlY3QgaXQKICAgICAgICAvLyB0byBtYXRjaCB0aGUgWVAgcmFuZ2Ugb2YgWzI3LCAyOF0KICAgICAgICAvLwogICAgICAgIC8vIGdldGggdXNlcyBbMCwgMV0gYW5kIHNvbWUgY2xpZW50cyBoYXZlIGZvbGxvd2VkLiBUaGlzIG1pZ2h0IGNoYW5nZSwgc2VlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTMKICAgICAgICBpZiAodiA8IDI3KQogICAgICAgICAgdiArPSAyNzsKCiAgICAgICAgaWYgKHYgIT0gMjcgJiYgdiAhPSAyOCkKICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7CgogICAgICAgIHJldHVybiBzYWZlcl9lY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7CiAgICB9Cgp9Ci8vIDwvT1JBQ0xJWkVfQVBJPgoKLyplbGVtZW50MTQqLwoKY29udHJhY3QgQ29pbkZsaXAgaXMgdXNpbmdPcmFjbGl6ZSB7CiAgICAKICAgIG1vZGlmaWVyIG9ubHlBZG1pbigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW5BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQogICAgLyoKICAgICAqIGNoZWNrcyBvbmx5IE9yYWNsaXplIGFkZHJlc3MgaXMgY2FsbGluZwogICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPcmFjbGl6ZSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3JhY2xpemVfY2JBZGRyZXNzKCkpIHRocm93OwogICAgICAgIF87CiAgICB9CiAgICBldmVudCBuZXdCZXQoc3RyaW5nIF9zdHIpOwogICAgLy9TZXR1cAogICAgYWRkcmVzcyBwdWJsaWMgYWRtaW5BZGRyZXNzOwoKICAgIC8vR2FtZVNldHVwCiAgICB1aW50IHB1YmxpYyBtaW5CZXQ7CiAgICB1aW50IHB1YmxpYyBtYXhQcm9maXQ7CgogICAgLy9GZWVTZXR1cAogICAgdWludCBwdWJsaWMgb3JhY2xpemVGZWU7CiAgICB1aW50IHB1YmxpYyBhZG1pbkZlZTsKICAgIHVpbnQgcHVibGljIG9yYWNsaXplR2FzTGltaXQ7CiAgICAKICAgIHVpbnQgcHVibGljIG1heFByb2ZpdFBlcmNlbnRhZ2U7CiAgICB1aW50IHB1YmxpYyB0b3RhbFBsYXk7CiAgICB1aW50IHB1YmxpYyB0b3RhbExvc2U7CiAgICB1aW50IHB1YmxpYyB0b3RhbFdvbjsKICAgIAogICAgdWludCBwdWJsaWMgdG90YWxXZWlXb247CiAgICB1aW50IHB1YmxpYyB0b3RhbFdlaUxvc2U7CiAgICAKICAgIHVpbnQgcHVibGljIGNvbnRyYWN0QmFsYW5jZTsKCiAgICAvL1BsYXllclNldHVwCiAgICAvLyBBcnJheSBvZiBwbGF5ZXJzCiAgICBtYXBwaW5nIChieXRlczMyID0+IGFkZHJlc3MpIHBsYXllckFkZHJlc3M7CiAgICBtYXBwaW5nIChieXRlczMyID0+IHVpbnQpIHBsYXllckJldEFtb3VudDsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludCkgcGxheWVyQmV0TnVtYmVyOwogICAgc3RyaW5nIHB1YmxpYyBfcmVzdWx0OwoKICAgIAogICAgZnVuY3Rpb24gQ29pbkZsaXAoKSBwYXlhYmxlIHsKICAgICAgICAvL0NvbnN0cnVjdG9yVmFycwogICAgICAgIGFkbWluQWRkcmVzcz1tc2cuc2VuZGVyOwogICAgICAgIC8vbWluQmV0ID0gKDUwMDAwMDAwMDAwMDAwMDAgKiAxIHdlaSk7CiAgICAgICAgLy9hZG1pbkZlZT05OTsgLy8xJSBvZiAgaG91c2VFZGdlCiAgICAgICAgLy9vcmFjbGl6ZUdhc0xpbWl0ID0gMjM1MDAwOwogICAgICAgIC8vbWF4UHJvZml0UGVyY2VudGFnZT0xOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBxdWVyeUlkLCBzdHJpbmcgcmVzdWx0KSBvbmx5T3JhY2xpemUgewogICAgICAgIF9yZXN1bHQ9cmVzdWx0OwogICAgICAgIHVpbnQgIHdlaVdvbjsKICAgICAgICBpZiggKHBhcnNlSW50KHJlc3VsdCkvNTApID09IHBsYXllckJldE51bWJlcltxdWVyeUlkXSApewogICAgICAgICAgICB0b3RhbFdvbisrOwogICAgICAgICAgICB3ZWlXb249KCAoIHBsYXllckJldEFtb3VudFtxdWVyeUlkXSAqIGFkbWluRmVlLzEwMCApIC0gb3JhY2xpemVGZWUpKjI7CiAgICAgICAgICAgIHRvdGFsV2VpV29uKz13ZWlXb247CiAgICAgICAgICAgIHBsYXllckFkZHJlc3NbcXVlcnlJZF0udHJhbnNmZXIod2VpV29uICk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHRvdGFsTG9zZSsrOwogICAgICAgIH0KICAgICAgICBtYXhQcm9maXQ9KHRoaXMuYmFsYW5jZSAqIG1heFByb2ZpdFBlcmNlbnRhZ2UpLzEwMDsKICAgICAgICBkZWxldGUgcGxheWVyQWRkcmVzc1txdWVyeUlkXTsKICAgICAgICBkZWxldGUgcGxheWVyQmV0QW1vdW50W3F1ZXJ5SWRdOwogICAgICAgIGRlbGV0ZSBwbGF5ZXJCZXROdW1iZXJbcXVlcnlJZF07CgogICAgfQoKICAgIGZ1bmN0aW9uIEJldCh1aW50IF9udW1iZXIpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgCiAgICAgICAgdWludCBiZXRWYWx1ZSA9IG1zZy52YWx1ZTsKICAgICAgICAKICAgICAgICBhc3NlcnQobWF4UHJvZml0ID4gKGJldFZhbHVlKjIpKTsKICAgICAgICBpZihiZXRWYWx1ZSA8IG1pbkJldCkgdGhyb3c7CiAgICAgICAgdG90YWxXZWlMb3NlKz1iZXRWYWx1ZTsKICAgICAgICAKICAgICAgICB0b3RhbFBsYXkrKzsKICAgICAgICBieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9xdWVyeSgiV29sZnJhbUFscGhhIiwgInJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OSIsb3JhY2xpemVHYXNMaW1pdCk7CgogICAgICAgIHBsYXllckFkZHJlc3NbcXVlcnlJZF09bXNnLnNlbmRlcjsKICAgICAgICBwbGF5ZXJCZXRBbW91bnRbcXVlcnlJZF09YmV0VmFsdWU7CiAgICAgICAgcGxheWVyQmV0TnVtYmVyW3F1ZXJ5SWRdPV9udW1iZXI7CgogICAgICAgIHJldHVybiBxdWVyeUlkOwoKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRHYW1lKHVpbnQgX2FkbWluRmVlICAsIHVpbnQgX21pbkJldCAsIHVpbnQgX29yYWNsaXplR2FzTGltaXQgLCB1aW50IF9tYXhQcm9maXRQZXJjZW50YWdlICwgdWludCBfb3JhY2xpemVGZWUgLCB1aW50IG5ld0dhcykgcHVibGljIG9ubHlBZG1pbnsKICAgICAgICBhZG1pbkZlZSA9IF9hZG1pbkZlZTsKICAgICAgICBtaW5CZXQgPSAoX21pbkJldCAqIDEgd2VpKTsKICAgICAgICBvcmFjbGl6ZUdhc0xpbWl0ID0gX29yYWNsaXplR2FzTGltaXQgOwogICAgICAgIG1heFByb2ZpdFBlcmNlbnRhZ2U9IF9tYXhQcm9maXRQZXJjZW50YWdlOwogICAgICAgIG1heFByb2ZpdD0odGhpcy5iYWxhbmNlKl9tYXhQcm9maXRQZXJjZW50YWdlKS8xMDA7CiAgICAgICAgb3JhY2xpemVGZWU9KF9vcmFjbGl6ZUZlZSAqIDEgd2VpKTsKICAgICAgICBvcmFjbGl6ZV9zZXRDdXN0b21HYXNQcmljZShuZXdHYXMgKiAxIHdlaSk7CiAgICAgICAgY29udHJhY3RCYWxhbmNlPXRoaXMuYmFsYW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IF9hbW91bnQgLCBhZGRyZXNzIF9hZGRyKSBwdWJsaWMgb25seUFkbWluewogICAgICAgIF9hZGRyLnRyYW5zZmVyKF9hbW91bnQpOwogICAgICAgIGNvbnRyYWN0QmFsYW5jZT10aGlzLmJhbGFuY2U7CiAgICAgICAgbWF4UHJvZml0PShjb250cmFjdEJhbGFuY2UqbWF4UHJvZml0UGVyY2VudGFnZSkvMTAwOwogICAgfSAgIAogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVCYWxhbmNlKCkgcGF5YWJsZXsKICAgICAgICBjb250cmFjdEJhbGFuY2U9dGhpcy5iYWxhbmNlOwogICAgICAgIG1heFByb2ZpdD0oY29udHJhY3RCYWxhbmNlKm1heFByb2ZpdFBlcmNlbnRhZ2UpLzEwMDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lVmFycygpIHB1YmxpYyB2aWV3IHJldHVybnMoCiAgICAgICAgdWludCBfbWF4UHJvZml0LAogICAgICAgIHVpbnQgX21pbkJldCwKICAgICAgICB1aW50IF90b3RhbFBsYXksCiAgICAgICAgdWludCBfdG90YWxMb3NlLAogICAgICAgIHVpbnQgX3RvdGFsV29uLAogICAgICAgIHVpbnQgX21heFByb2ZpdFBlcmNlbnRhZ2UsCiAgICAgICAgdWludCBfY29udHJhY3RiYWxhbmNlLAogICAgICAgIHVpbnQgX3RvdGFsV2VpV29uLAogICAgICAgIHVpbnQgX3RvdGFsV2VpTG9zZQogICAgICAgICl7CiAgICAgICAgICAgIF9tYXhQcm9maXQ9bWF4UHJvZml0OwogICAgICAgICAgICBfbWluQmV0PW1pbkJldDsKICAgICAgICAgICAgX3RvdGFsUGxheT10b3RhbFBsYXk7CiAgICAgICAgICAgIF90b3RhbExvc2U9dG90YWxMb3NlOwogICAgICAgICAgICBfdG90YWxXb249dG90YWxXb247CiAgICAgICAgICAgIF9tYXhQcm9maXRQZXJjZW50YWdlPW1heFByb2ZpdFBlcmNlbnRhZ2U7IAogICAgICAgICAgICBfY29udHJhY3RiYWxhbmNlPWNvbnRyYWN0QmFsYW5jZTsKICAgICAgICAgICAgX3RvdGFsV2VpV29uPXRvdGFsV2VpV29uOwogICAgICAgICAgICBfdG90YWxXZWlMb3NlPXRvdGFsV2VpTG9zZTsKICAgIAogICAgICAgIH0KCiAgIAoKfQ=='.
	

]
