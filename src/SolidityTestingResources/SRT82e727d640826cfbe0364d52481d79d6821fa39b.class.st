Class {
	#name : #SRT82e727d640826cfbe0364d52481d79d6821fa39b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82e727d640826cfbe0364d52481d79d6821fa39b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLy8gcG9rZXIuc29sIC0tIGRzLWNhY2hlIHdpdGggbWVkaWFuaXplciBwb2tlCgovLyBDb3B5cmlnaHQgKEMpIDIwMTcgIERhcHBIdWIsIExMQwoKLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuCi8vIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KCi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQgKGV4cHJlc3Mgb3IgaW1wbGllZCkuCgpjb250cmFjdCBEU0F1dGhvcml0eSB7CiAgICBmdW5jdGlvbiBjYW5DYWxsKAogICAgICAgIGFkZHJlc3Mgc3JjLCBhZGRyZXNzIGRzdCwgYnl0ZXM0IHNpZwogICAgKSBjb25zdGFudCByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgRFNBdXRoRXZlbnRzIHsKICAgIGV2ZW50IExvZ1NldEF1dGhvcml0eSAoYWRkcmVzcyBpbmRleGVkIGF1dGhvcml0eSk7CiAgICBldmVudCBMb2dTZXRPd25lciAgICAgKGFkZHJlc3MgaW5kZXhlZCBvd25lcik7Cn0KCmNvbnRyYWN0IERTQXV0aCBpcyBEU0F1dGhFdmVudHMgewogICAgRFNBdXRob3JpdHkgIHB1YmxpYyAgYXV0aG9yaXR5OwogICAgYWRkcmVzcyAgICAgIHB1YmxpYyAgb3duZXI7CgogICAgZnVuY3Rpb24gRFNBdXRoKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBMb2dTZXRPd25lcihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRPd25lcihhZGRyZXNzIG93bmVyXykKICAgICAgICBhdXRoCiAgICB7CiAgICAgICAgb3duZXIgPSBvd25lcl87CiAgICAgICAgTG9nU2V0T3duZXIob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEF1dGhvcml0eShEU0F1dGhvcml0eSBhdXRob3JpdHlfKQogICAgICAgIGF1dGgKICAgIHsKICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHlfOwogICAgICAgIExvZ1NldEF1dGhvcml0eShhdXRob3JpdHkpOwogICAgfQoKICAgIG1vZGlmaWVyIGF1dGggewogICAgICAgIGFzc2VydChpc0F1dGhvcml6ZWQobXNnLnNlbmRlciwgbXNnLnNpZykpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgYXV0aG9yaXplZChieXRlczQgc2lnKSB7CiAgICAgICAgYXNzZXJ0KGlzQXV0aG9yaXplZChtc2cuc2VuZGVyLCBzaWcpKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChhZGRyZXNzIHNyYywgYnl0ZXM0IHNpZykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChzcmMgPT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKHNyYyA9PSBvd25lcikgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKGF1dGhvcml0eSA9PSBEU0F1dGhvcml0eSgwKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGF1dGhvcml0eS5jYW5DYWxsKHNyYywgdGhpcywgc2lnKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgeCkgaW50ZXJuYWwgewogICAgICAgIGlmICgheCkgdGhyb3c7CiAgICB9Cn0KCgpjb250cmFjdCBEU05vdGUgewogICAgZXZlbnQgTG9nTm90ZSgKICAgICAgICBieXRlczQgICBpbmRleGVkICBzaWcsCiAgICAgICAgYWRkcmVzcyAgaW5kZXhlZCAgZ3V5LAogICAgICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGZvbywKICAgICAgICBieXRlczMyICBpbmRleGVkICBiYXIsCgl1aW50CSAJICB3YWQsCiAgICAgICAgYnl0ZXMgICAgICAgICAgICAgZmF4CiAgICApIGFub255bW91czsKCiAgICBtb2RpZmllciBub3RlIHsKICAgICAgICBieXRlczMyIGZvbzsKICAgICAgICBieXRlczMyIGJhcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBmb28gOj0gY2FsbGRhdGFsb2FkKDQpCiAgICAgICAgICAgIGJhciA6PSBjYWxsZGF0YWxvYWQoMzYpCiAgICAgICAgfQoKICAgICAgICBMb2dOb3RlKG1zZy5zaWcsIG1zZy5zZW5kZXIsIGZvbywgYmFyLCBtc2cudmFsdWUsIG1zZy5kYXRhKTsKCiAgICAgICAgXzsKICAgIH0KfQoKY29udHJhY3QgRFNNYXRoIHsKICAgIAogICAgLyoKICAgIHN0YW5kYXJkIHVpbnQyNTYgZnVuY3Rpb25zCiAgICAgKi8KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGFzc2VydCgoeiA9IHggKyB5KSA+PSB4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHogPSB4ICogeTsKICAgICAgICBhc3NlcnQoeCA9PSAwIHx8IHogLyB4ID09IHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgeiA9IHggLyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgcmV0dXJuIHggPD0geSA/IHggOiB5OwogICAgfQogICAgZnVuY3Rpb24gbWF4KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CgogICAgLyoKICAgIHVpbnQxMjggZnVuY3Rpb25zIChoIGlzIGZvciBoYWxmKQogICAgICovCgoKICAgIGZ1bmN0aW9uIGhhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIGFzc2VydCgoeiA9IHggKyB5KSA+PSB4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBoc3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4IC0geSkgPD0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gaG11bCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IHggKiB5OwogICAgICAgIGFzc2VydCh4ID09IDAgfHwgeiAvIHggPT0geSk7CiAgICB9CgogICAgZnVuY3Rpb24gaGRpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IHggLyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIGhtaW4odWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIGhtYXgodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKICAgIH0KCgogICAgLyoKICAgIGludDI1NiBmdW5jdGlvbnMKICAgICAqLwoKICAgIGZ1bmN0aW9uIGltaW4oaW50MjU2IHgsIGludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zIChpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIGltYXgoaW50MjU2IHgsIGludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zIChpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKICAgIH0KCiAgICAvKgogICAgV0FEIG1hdGgKICAgICAqLwoKICAgIHVpbnQxMjggY29uc3RhbnQgV0FEID0gMTAgKiogMTg7CgogICAgZnVuY3Rpb24gd2FkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBoYWRkKHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdzdWIodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaHN1Yih4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3bXVsKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBXQUQgLyAyKSAvIFdBRCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2Rpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiBXQUQgKyB5IC8gMikgLyB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3bWluKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhtaW4oeCwgeSk7CiAgICB9CiAgICBmdW5jdGlvbiB3bWF4KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhtYXgoeCwgeSk7CiAgICB9CgogICAgLyoKICAgIFJBWSBtYXRoCiAgICAgKi8KCiAgICB1aW50MTI4IGNvbnN0YW50IFJBWSA9IDEwICoqIDI3OwoKICAgIGZ1bmN0aW9uIHJhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiByc3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhzdWIoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gcm11bCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiB5ICsgUkFZIC8gMikgLyBSQVkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogUkFZICsgeSAvIDIpIC8geSk7CiAgICB9CgogICAgZnVuY3Rpb24gcnBvdyh1aW50MTI4IHgsIHVpbnQ2NCBuKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICAvLyBUaGlzIGZhbW91cyBhbGdvcml0aG0gaXMgY2FsbGVkICJleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyIKICAgICAgICAvLyBhbmQgY2FsY3VsYXRlcyB4Xm4gd2l0aCB4IGFzIGZpeGVkLXBvaW50IGFuZCBuIGFzIHJlZ3VsYXIgdW5zaWduZWQuCiAgICAgICAgLy8KICAgICAgICAvLyBJdCdzIE8obG9nIG4pLCBpbnN0ZWFkIG9mIE8obikgZm9yIG5haXZlIHJlcGVhdGVkIG11bHRpcGxpY2F0aW9uLgogICAgICAgIC8vCiAgICAgICAgLy8gVGhlc2UgZmFjdHMgYXJlIHdoeSBpdCB3b3JrczoKICAgICAgICAvLwogICAgICAgIC8vICBJZiBuIGlzIGV2ZW4sIHRoZW4geF5uID0gKHheMileKG4vMikuCiAgICAgICAgLy8gIElmIG4gaXMgb2RkLCAgdGhlbiB4Xm4gPSB4ICogeF4obi0xKSwKICAgICAgICAvLyAgIGFuZCBhcHBseWluZyB0aGUgZXF1YXRpb24gZm9yIGV2ZW4geCBnaXZlcwogICAgICAgIC8vICAgIHhebiA9IHggKiAoeF4yKV4oKG4tMSkgLyAyKS4KICAgICAgICAvLwogICAgICAgIC8vICBBbHNvLCBFVk0gZGl2aXNpb24gaXMgZmxvb3JpbmcgYW5kCiAgICAgICAgLy8gICAgZmxvb3JbKG4tMSkgLyAyXSA9IGZsb29yW24gLyAyXS4KCiAgICAgICAgeiA9IG4gJSAyICE9IDAgPyB4IDogUkFZOwoKICAgICAgICBmb3IgKG4gLz0gMjsgbiAhPSAwOyBuIC89IDIpIHsKICAgICAgICAgICAgeCA9IHJtdWwoeCwgeCk7CgogICAgICAgICAgICBpZiAobiAlIDIgIT0gMCkgewogICAgICAgICAgICAgICAgeiA9IHJtdWwoeiwgeCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcm1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWluKHgsIHkpOwogICAgfQogICAgZnVuY3Rpb24gcm1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWF4KHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhc3QodWludDI1NiB4KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB1aW50MTI4KHgpKSA9PSB4KTsKICAgIH0KCn0KCmNvbnRyYWN0IERTVGhpbmcgaXMgRFNBdXRoLCBEU05vdGUsIERTTWF0aCB7Cn0KCmNvbnRyYWN0IERTVmFsdWUgaXMgRFNUaGluZyB7CiAgICBib29sICAgIGhhczsKICAgIGJ5dGVzMzIgdmFsOwogICAgZnVuY3Rpb24gcGVlaygpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIsIGJvb2wpIHsKICAgICAgICByZXR1cm4gKHZhbCxoYXMpOwogICAgfQogICAgZnVuY3Rpb24gcmVhZCgpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICB2YXIgKHd1dCwgaGFzKSA9IHBlZWsoKTsKICAgICAgICBhc3NlcnQoaGFzKTsKICAgICAgICByZXR1cm4gd3V0OwogICAgfQogICAgZnVuY3Rpb24gcG9rZShieXRlczMyIHd1dCkgbm90ZSBhdXRoIHsKICAgICAgICB2YWwgPSB3dXQ7CiAgICAgICAgaGFzID0gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIHZvaWQoKSBub3RlIGF1dGggeyAvLyB1bnNldCB0aGUgdmFsdWUKICAgICAgICBoYXMgPSBmYWxzZTsKICAgIH0KfQoKY29udHJhY3QgRFNDYWNoZSBpcyBEU1ZhbHVlCnsKICAgIHVpbnQxMjggcHVibGljIHp6ejsKLy8gIGZyb20gRFNWYWx1ZToKLy8gIGJvb2wgICAgaGFzOwovLyAgYnl0ZXMzMiB2YWw7CiAgICBmdW5jdGlvbiBwZWVrKCkgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMiwgYm9vbCkgewogICAgICAgIHJldHVybiAodmFsLCBoYXMgJiYgbm93IDwgenp6KTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlYWQoKSBjb25zdGFudCByZXR1cm5zIChieXRlczMyKSB7CiAgICAgICAgdmFyICh3dXQsIGhhcykgPSBwZWVrKCk7CiAgICAgICAgYXNzZXJ0KG5vdyA8IHp6eik7CiAgICAgICAgYXNzZXJ0KGhhcyk7CiAgICAgICAgcmV0dXJuIHd1dDsKICAgIH0KICAgIGZ1bmN0aW9uIHByb2QoYnl0ZXMzMiB3dXQsIHVpbnQxMjggWnp6KSBub3RlIGF1dGggewogICAgICAgIHp6eiA9IFp6ejsKICAgICAgICBwb2tlKHd1dCk7CiAgICB9CiAgICAvLyBmcm9tIERTVmFsdWU6CiAgICAvLyBmdW5jdGlvbiBwb2tlKGJ5dGVzMzIgd3V0KSBub3RlIGF1dGggewogICAgLy8gICAgIHZhbCA9IHd1dDsKICAgIC8vICAgICBoYXMgPSB0cnVlOwogICAgLy8gfQogICAgLy8gZnVuY3Rpb24gdm9pZCgpIG5vdGUgYXV0aCB7IC8vIHVuc2V0IHRoZSB2YWx1ZQogICAgLy8gICAgIGhhcyA9IGZhbHNlOwogICAgLy8gfQoKfQoKY29udHJhY3QgUG9rZXIgaXMgRFNDYWNoZSB7CgogICAgZnVuY3Rpb24gcG9rZShhZGRyZXNzIG1lZCwgYnl0ZXMzMiB3dXQpIGF1dGggewogICAgICAgIHN1cGVyLnBva2Uod3V0KTsKICAgICAgICBhc3NlcnQobWVkLmNhbGwoYnl0ZXM0KHNoYTMoInBva2UoKSIpKSkpOwogICAgICAgIC8vTWVkaWFuaXplcihtZWQpLnBva2UoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcm9kKGFkZHJlc3MgbWVkLCBieXRlczMyIHd1dCwgdWludDEyOCB6enopIGF1dGggewogICAgICAgIHN1cGVyLnByb2Qod3V0LCB6enopOwogICAgICAgIGFzc2VydChtZWQuY2FsbChieXRlczQoc2hhMygicG9rZSgpIikpKSk7CiAgICAgICAgLy9NZWRpYW5pemVyKG1lZCkucG9rZSgpOwogICAgfQp9'.
	

]
