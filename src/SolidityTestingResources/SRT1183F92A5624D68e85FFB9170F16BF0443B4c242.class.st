Class {
	#name : #SRT1183F92A5624D68e85FFB9170F16BF0443B4c242,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1183F92A5624D68e85FFB9170F16BF0443B4c242 >> base64 [
	^ ''.
	

]
