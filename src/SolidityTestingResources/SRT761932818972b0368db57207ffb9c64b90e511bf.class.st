Class {
	#name : #SRT761932818972b0368db57207ffb9c64b90e511bf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT761932818972b0368db57207ffb9c64b90e511bf >> base64 [
	^ ''.
	

]
