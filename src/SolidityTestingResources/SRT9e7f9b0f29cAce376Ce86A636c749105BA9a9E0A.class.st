Class {
	#name : #SRT9e7f9b0f29cAce376Ce86A636c749105BA9a9E0A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e7f9b0f29cAce376Ce86A636c749105BA9a9E0A >> base64 [
	^ ''.
	

]
