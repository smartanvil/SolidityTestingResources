Class {
	#name : #SRTe41a1f73979cb25def133fb3a529d540057188f2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe41a1f73979cb25def133fb3a529d540057188f2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLy8gaW5zcGlyZWQgYnkKLy8gaHR0cHM6Ly9naXRodWIuY29tL2F4aW9temVuL2NyeXB0b2tpdHRpZXMtYm91bnR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9LaXR0eUFjY2Vzc0NvbnRyb2wuc29sCmNvbnRyYWN0IEFjY2Vzc0NvbnRyb2wgewogICAgLy8vIEBkZXYgVGhlIGFkZHJlc3NlcyBvZiB0aGUgYWNjb3VudHMgKG9yIGNvbnRyYWN0cykgdGhhdCBjYW4gZXhlY3V0ZSBhY3Rpb25zIHdpdGhpbiBlYWNoIHJvbGVzCiAgICBhZGRyZXNzIHB1YmxpYyBjZW9BZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczsKCiAgICAvLy8gQGRldiBLZWVwcyB0cmFjayB3aGV0aGVyIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuIFdoZW4gdGhhdCBpcyB0cnVlLCBtb3N0IGFjdGlvbnMgYXJlIGJsb2NrZWQKICAgIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKICAgIC8vLyBAZGV2IFRoZSBBY2Nlc3NDb250cm9sIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIEMgcm9sZXMgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIgYWNjb3VudAogICAgZnVuY3Rpb24gQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRU8tb25seSBmdW5jdGlvbmFsaXR5CiAgICBtb2RpZmllciBvbmx5Q0VPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ09PLW9ubHkgZnVuY3Rpb25hbGl0eQogICAgbW9kaWZpZXIgb25seUNPTygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIGFueSBDTGV2ZWwgZnVuY3Rpb25hbGl0eQogICAgbW9kaWZpZXIgb25seUNMZXZlbCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyB8fCBtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ0VPLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDRU8KICAgIC8vLyBAcGFyYW0gX25ld0NFTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENFTwogICAgZnVuY3Rpb24gc2V0Q0VPKGFkZHJlc3MgX25ld0NFTykgcHVibGljIG9ubHlDRU8gewogICAgICAgIHJlcXVpcmUoX25ld0NFTyAhPSBhZGRyZXNzKDApKTsKICAgICAgICBjZW9BZGRyZXNzID0gX25ld0NFTzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDT08uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IENFTwogICAgLy8vIEBwYXJhbSBfbmV3Q09PIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ09PCiAgICBmdW5jdGlvbiBzZXRDT08oYWRkcmVzcyBfbmV3Q09PKSBwdWJsaWMgb25seUNFTyB7CiAgICAgICAgcmVxdWlyZShfbmV3Q09PICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGNvb0FkZHJlc3MgPSBfbmV3Q09POwogICAgfQoKICAgIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBNb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuUGF1c2VkIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBQYXVzZSB0aGUgc21hcnQgY29udHJhY3QuIE9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGUgQ0VPCiAgICBmdW5jdGlvbiBwYXVzZSgpIHB1YmxpYyBvbmx5Q0VPIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVW5wYXVzZXMgdGhlIHNtYXJ0IGNvbnRyYWN0LiBPbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhlIENFTwogICAgZnVuY3Rpb24gdW5wYXVzZSgpIHB1YmxpYyBvbmx5Q0VPIHdoZW5QYXVzZWQgewogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQp9CgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2RoYXJtYXByb3RvY29sL05vbkZ1bmdpYmxlVG9rZW4vYmxvYi9tYXN0ZXIvY29udHJhY3RzL0VSQzcyMS5zb2wKLy8gaHR0cHM6Ly9naXRodWIuY29tL2RoYXJtYXByb3RvY29sL05vbkZ1bmdpYmxlVG9rZW4vYmxvYi9tYXN0ZXIvY29udHJhY3RzL0RldGFpbGVkRVJDNzIxLnNvbAoKLyoqCiAqIEludGVyZmFjZSBmb3IgcmVxdWlyZWQgZnVuY3Rpb25hbGl0eSBpbiB0aGUgRVJDNzIxIHN0YW5kYXJkCiAqIGZvciBub24tZnVuZ2libGUgdG9rZW5zLgogKgogKiBBdXRob3I6IE5hZGF2IEhvbGxhbmRlciAobmFkYXYgYXQgZGhhcm1hLmlvKQogKi8KY29udHJhY3QgRVJDNzIxIHsKICAgIC8vIEV2ZW50cwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF90b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwoKICAgIC8vLyBGb3IgcXVlcnlpbmcgdG90YWxTdXBwbHkgb2YgdG9rZW4uCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KTsKCiAgICAvLy8gRm9yIHF1ZXJ5aW5nIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQuCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmb3IgYmFsYW5jZSBxdWVyeS4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2JhbGFuY2UpOwoKICAgIC8vLyBGb3IgcXVlcnlpbmcgb3duZXIgb2YgdG9rZW4uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbklEIGZvciBvd25lciBpbnF1aXJ5LgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIpOwoKICAgIC8vLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgdG9rZW4gdmlhIHRha2VPd25lcnNoaXAoKSBhbmQgdHJhbnNmZXJGcm9tKCkKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogICAgLy8vICBjbGVhciBhbGwgYXBwcm92YWxzLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogICAgLy8gTk9UIElNUExFTUVOVEVECiAgICAvLyBmdW5jdGlvbiBnZXRBcHByb3ZlZCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIF9hcHByb3ZlZCk7CgogICAgLy8vIFRoaXJkLXBhcnR5IGluaXRpYXRlcyB0cmFuc2ZlciBvZiB0b2tlbiBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8uCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgZnJvbS4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgdG8uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwoKICAgIC8vLyBPd25lciBpbml0YXRlcyB0aGUgdHJhbnNmZXIgb2YgdGhlIHRva2VuIHRvIGFub3RoZXIgYWNjb3VudC4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQsIGNhbiBiZSBhIHVzZXIgb3IgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgdG9rZW4gdG8gdHJhbnNmZXIuCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKCiAgICAvLy8KICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sIF9pbXBsZW1lbnRzRVJDNzIxKTsKCiAgICAvLyBFWFRSQQogICAgLy8vIEBub3RpY2UgQWxsb3cgcHJlLWFwcHJvdmVkIHVzZXIgdG8gdGFrZSBvd25lcnNoaXAgb2YgYSB0b2tlbi4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSB0b2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogICAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7Cn0KCgovKioKICogSW50ZXJmYWNlIGZvciBvcHRpb25hbCBmdW5jdGlvbmFsaXR5IGluIHRoZSBFUkM3MjEgc3RhbmRhcmQKICogZm9yIG5vbi1mdW5naWJsZSB0b2tlbnMuCiAqCiAqIEF1dGhvcjogTmFkYXYgSG9sbGFuZGVyIChuYWRhdiBhdCBkaGFybWEuaW8pCiAqLwpjb250cmFjdCBEZXRhaWxlZEVSQzcyMSBpcyBFUkM3MjEgewogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBfbmFtZSk7CiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk1ldGFkYXRhKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBfaW5mb1VybCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk9mT3duZXJCeUluZGV4KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9pbmRleCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfdG9rZW5JZCk7Cn0KCgpjb250cmFjdCBDcnlwdG9LaXR0ZW5Ub2tlbiBpcyBBY2Nlc3NDb250cm9sLCBEZXRhaWxlZEVSQzcyMSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLy8gQGRldiBUaGUgVG9rZW5DcmVhdGVkIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgbmV3IHRva2VuIGlzIGNyZWF0ZWQuCiAgICBldmVudCBUb2tlbkNyZWF0ZWQodWludDI1NiB0b2tlbklkLCBzdHJpbmcgbmFtZSwgdWludDI1NiBwcmljZSwgYWRkcmVzcyBvd25lcik7CgogICAgLy8vIEBkZXYgVGhlIFRva2VuU29sZCBldmVudCBpcyBmaXJlZCB3aGVuZXZlciBhIHRva2VuIGlzIHNvbGQuCiAgICBldmVudCBUb2tlblNvbGQodWludDI1NiBpbmRleGVkIHRva2VuSWQsIHN0cmluZyBuYW1lLCB1aW50MjU2IHNlbGxpbmdQcmljZSwKICAgIHVpbnQyNTYgbmV3UHJpY2UsIGFkZHJlc3MgaW5kZXhlZCBvbGRPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCiAgICAvLy8gQGRldiBBIG1hcHBpbmcgZnJvbSB0b2tlbklkcyB0byB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlbS4gQWxsIHRva2VucyBoYXZlCiAgICAvLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHJpdmF0ZSB0b2tlbklkVG9Pd25lcjsKCiAgICAvLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBUb2tlbklkcyB0byB0aGUgcHJpY2Ugb2YgdGhlIHRva2VuLgogICAgbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSBwcml2YXRlIHRva2VuSWRUb1ByaWNlOwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIG93bmVyIGFkZHJlc3MgdG8gY291bnQgb2YgdG9rZW5zIHRoYXQgYWRkcmVzcyBvd25zLgogICAgLy8vICBVc2VkIGludGVybmFsbHkgaW5zaWRlIGJhbGFuY2VPZigpIHRvIHJlc29sdmUgb3duZXJzaGlwIGNvdW50LgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIG93bmVyc2hpcFRva2VuQ291bnQ7CgogICAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gVG9rZW5JZHMgdG8gYW4gYWRkcmVzcyB0aGF0IGhhcyBiZWVuIGFwcHJvdmVkIHRvIGNhbGwKICAgIC8vLyAgdHJhbnNmZXJGcm9tKCkuIEVhY2ggVG9rZW4gY2FuIG9ubHkgaGF2ZSBvbmUgYXBwcm92ZWQgYWRkcmVzcyBmb3IgdHJhbnNmZXIKICAgIC8vLyAgYXQgYW55IHRpbWUuIEEgemVybyB2YWx1ZSBtZWFucyBubyBhcHByb3ZhbCBpcyBvdXRzdGFuZGluZwogICAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgdG9rZW5JZFRvQXBwcm92ZWQ7CgogICAgc3RydWN0IEtpdHRlbnMgewogICAgICAgIHN0cmluZyBuYW1lOwogICAgfQoKICAgIEtpdHRlbnNbXSBwcml2YXRlIGtpdHRlbnM7CgogICAgdWludDI1NiBwcml2YXRlIHN0YXJ0aW5nUHJpY2UgPSAwLjAxIGV0aGVyOwogICAgYm9vbCBwcml2YXRlIGVyYzcyMUVuYWJsZWQgPSBmYWxzZTsKCiAgICBtb2RpZmllciBvbmx5RVJDNzIxKCkgewogICAgICAgIHJlcXVpcmUoZXJjNzIxRW5hYmxlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGVzIGEgbmV3IHRva2VuIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIF9wcmljZSBhbmQgYXNzaWduZXMgaXQgdG8gYW4gX293bmVyLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW4oc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UpIHB1YmxpYyBvbmx5Q0xldmVsIHsKICAgICAgICByZXF1aXJlKF9vd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9wcmljZSA+PSBzdGFydGluZ1ByaWNlKTsKCiAgICAgICAgX2NyZWF0ZVRva2VuKF9uYW1lLCBfb3duZXIsIF9wcmljZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQ3JlYXRlcyBhIG5ldyB0b2tlbiB3aXRoIHRoZSBnaXZlbiBuYW1lLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW4oc3RyaW5nIF9uYW1lKSBwdWJsaWMgb25seUNMZXZlbCB7CiAgICAgICAgX2NyZWF0ZVRva2VuKF9uYW1lLCBhZGRyZXNzKHRoaXMpLCBzdGFydGluZ1ByaWNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfY3JlYXRlVG9rZW4oc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UpIHByaXZhdGUgewogICAgICAgIEtpdHRlbnMgbWVtb3J5IF9raXR0ZW4gPSBLaXR0ZW5zKHsKICAgICAgICAgICAgbmFtZTogX25hbWUKICAgICAgICB9KTsKICAgICAgICB1aW50MjU2IG5ld1Rva2VuSWQgPSBraXR0ZW5zLnB1c2goX2tpdHRlbikgLSAxOwogICAgICAgIHRva2VuSWRUb1ByaWNlW25ld1Rva2VuSWRdID0gX3ByaWNlOwoKICAgICAgICBUb2tlbkNyZWF0ZWQobmV3VG9rZW5JZCwgX25hbWUsIF9wcmljZSwgX293bmVyKTsKCiAgICAgICAgLy8gVGhpcyB3aWxsIGFzc2lnbiBvd25lcnNoaXAsIGFuZCBhbHNvIGVtaXQgdGhlIFRyYW5zZmVyIGV2ZW50IGFzIHBlciBFUkM3MjEgZHJhZnQKICAgICAgICBfdHJhbnNmZXIoYWRkcmVzcygwKSwgX293bmVyLCBuZXdUb2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb2tlbih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50MjU2IF9wcmljZSwKICAgICAgICB1aW50MjU2IF9uZXh0UHJpY2UsCiAgICAgICAgYWRkcmVzcyBfb3duZXIKICAgICkgewogICAgICAgIF90b2tlbk5hbWUgPSBraXR0ZW5zW190b2tlbklkXS5uYW1lOwogICAgICAgIF9wcmljZSA9IHRva2VuSWRUb1ByaWNlW190b2tlbklkXTsKICAgICAgICBfbmV4dFByaWNlID0gbmV4dFByaWNlT2YoX3Rva2VuSWQpOwogICAgICAgIF9vd25lciA9IHRva2VuSWRUb093bmVyW190b2tlbklkXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBbGxUb2tlbnMoKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAgICAgICB1aW50MjU2W10sCiAgICAgICAgdWludDI1NltdLAogICAgICAgIGFkZHJlc3NbXQogICAgKSB7CiAgICAgICAgdWludDI1NiB0b3RhbCA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgdWludDI1NltdIG1lbW9yeSBwcmljZXMgPSBuZXcgdWludDI1NltdKHRvdGFsKTsKICAgICAgICB1aW50MjU2W10gbWVtb3J5IG5leHRQcmljZXMgPSBuZXcgdWludDI1NltdKHRvdGFsKTsKICAgICAgICBhZGRyZXNzW10gbWVtb3J5IG93bmVycyA9IG5ldyBhZGRyZXNzW10odG90YWwpOwoKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgIHByaWNlc1tpXSA9IHRva2VuSWRUb1ByaWNlW2ldOwogICAgICAgICAgICBuZXh0UHJpY2VzW2ldID0gbmV4dFByaWNlT2YoaSk7CiAgICAgICAgICAgIG93bmVyc1tpXSA9IHRva2VuSWRUb093bmVyW2ldOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChwcmljZXMsIG5leHRQcmljZXMsIG93bmVycyk7CiAgICB9CgogICAgZnVuY3Rpb24gdG9rZW5zT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NltdKSB7CiAgICAgICAgdWludDI1NiB0b2tlbkNvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgaWYgKHRva2VuQ291bnQgPT0gMCkgewogICAgICAgICAgICAvLyBSZXR1cm4gYW4gZW1wdHkgYXJyYXkKICAgICAgICAgICAgcmV0dXJuIG5ldyB1aW50MjU2W10oMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdWludDI1NltdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludDI1NltdKHRva2VuQ291bnQpOwogICAgICAgICAgICB1aW50MjU2IHRvdGFsID0gdG90YWxTdXBwbHkoKTsKICAgICAgICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAodG9rZW5JZFRvT3duZXJbaV0gPT0gX293bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4XSA9IGk7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIHdpdGhkcmF3cyB0aGUgY29udHJhY3Qgb3duZXIncyBjdXQuCiAgICAvLy8gQW55IGFtb3VudCBtYXkgYmUgd2l0aGRyYXduIGFzIHRoZXJlIGlzIG5vIHVzZXIgZnVuZHMuCiAgICAvLy8gVXNlciBmdW5kcyBhcmUgaW1tZWRpYXRlbHkgc2VudCB0byB0aGUgb2xkIG93bmVyIGluIGBwdXJjaGFzZWAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZShhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seUNFTyB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50IDw9IHRoaXMuYmFsYW5jZSk7CgogICAgICAgIGlmIChfYW1vdW50ID09IDApIHsKICAgICAgICAgICAgX2Ftb3VudCA9IHRoaXMuYmFsYW5jZTsKICAgICAgICB9CgogICAgICAgIGlmIChfdG8gPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBjZW9BZGRyZXNzLnRyYW5zZmVyKF9hbW91bnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90by50cmFuc2ZlcihfYW1vdW50KTsKICAgICAgICB9CiAgICB9CgogICAgLy8gU2VuZCBldGhlciBhbmQgb2J0YWluIHRoZSB0b2tlbgogICAgZnVuY3Rpb24gcHVyY2hhc2UodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHBheWFibGUgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgYWRkcmVzcyBvbGRPd25lciA9IG93bmVyT2YoX3Rva2VuSWQpOwogICAgICAgIGFkZHJlc3MgbmV3T3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHVpbnQyNTYgc2VsbGluZ1ByaWNlID0gcHJpY2VPZihfdG9rZW5JZCk7CgogICAgICAgIC8vIGFjdGl2ZSB0b2tlbnMKICAgICAgICByZXF1aXJlKG9sZE93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIC8vIG1heWJlIG9uZSBkYXkgbmV3T3duZXIncyBsb2dpYyBhbGxvd3MgdGhpcyB0byBoYXBwZW4KICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIC8vIGRvbid0IGJ1eSBmcm9tIHlvdXJzZWxmCiAgICAgICAgcmVxdWlyZShvbGRPd25lciAhPSBuZXdPd25lcik7CiAgICAgICAgLy8gZG9uJ3Qgc2VsbCB0byBjb250cmFjdHMKICAgICAgICAvLyBidXQgZXZlbiB0aGlzIGRvZXNuJ3QgcHJldmVudCBiYWQgY29udHJhY3RzIHRvIGJlY29tZSBhbiBvd25lciBvZiBhIHRva2VuCiAgICAgICAgcmVxdWlyZSghX2lzQ29udHJhY3QobmV3T3duZXIpKTsKICAgICAgICAvLyBhbm90aGVyIGNoZWNrIHRvIGJlIHN1cmUgdGhhdCB0b2tlbiBpcyBhY3RpdmUKICAgICAgICByZXF1aXJlKHNlbGxpbmdQcmljZSA+IDApOwogICAgICAgIC8vIG1pbiByZXF1aXJlZCBhbW91bnQgY2hlY2sKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBzZWxsaW5nUHJpY2UpOwoKICAgICAgICAvLyB0cmFuc2ZlciB0byB0aGUgbmV3IG93bmVyCiAgICAgICAgX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwogICAgICAgIC8vIHVwZGF0ZSBmaWVsZHMgYmVmb3JlIGVtaXR0aW5nIGFuIGV2ZW50CiAgICAgICAgdG9rZW5JZFRvUHJpY2VbX3Rva2VuSWRdID0gbmV4dFByaWNlT2YoX3Rva2VuSWQpOwogICAgICAgIC8vIGVtaXQgZXZlbnQKICAgICAgICBUb2tlblNvbGQoX3Rva2VuSWQsIGtpdHRlbnNbX3Rva2VuSWRdLm5hbWUsIHNlbGxpbmdQcmljZSwgcHJpY2VPZihfdG9rZW5JZCksIG9sZE93bmVyLCBuZXdPd25lcik7CgogICAgICAgIC8vIGV4dHJhIGV0aGVyIHdoaWNoIHNob3VsZCBiZSByZXR1cm5lZCBiYWNrIHRvIGJ1eWVyCiAgICAgICAgdWludDI1NiBleGNlc3MgPSBtc2cudmFsdWUuc3ViKHNlbGxpbmdQcmljZSk7CiAgICAgICAgLy8gY29udHJhY3Qgb3duZXIncyBjdXQgd2hpY2ggaXMgbGVmdCBpbiBjb250cmFjdCBhbmQgYWNjZXNlZCBieSB3aXRoZHJhd0JhbGFuY2UKICAgICAgICB1aW50MjU2IGNvbnRyYWN0Q3V0ID0gc2VsbGluZ1ByaWNlLm11bCg2KS5kaXYoMTAwKTsgLy8gNiUKCiAgICAgICAgLy8gbm8gbmVlZCB0byB0cmFuc2ZlciBpZiBpdCdzIGluaXRpYWwgc2VsbAogICAgICAgIGlmIChvbGRPd25lciAhPSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIC8vIHRyYW5zZmVyIHBheW1lbnQgdG8gc2VsbGVyIG1pbnVzIHRoZSBjb250cmFjdCdzIGN1dAogICAgICAgICAgICBvbGRPd25lci50cmFuc2ZlcihzZWxsaW5nUHJpY2Uuc3ViKGNvbnRyYWN0Q3V0KSk7CiAgICAgICAgfQoKICAgICAgICAvLyByZXR1cm4gZXh0cmEgZXRoZXIKICAgICAgICBpZiAoZXhjZXNzID4gMCkgewogICAgICAgICAgICBuZXdPd25lci50cmFuc2ZlcihleGNlc3MpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwcmljZU9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3ByaWNlKSB7CiAgICAgICAgcmV0dXJuIHRva2VuSWRUb1ByaWNlW190b2tlbklkXTsKICAgIH0KCiAgICB1aW50MjU2IHByaXZhdGUgaW5jcmVhc2VMaW1pdDEgPSAwLjAyIGV0aGVyOwogICAgdWludDI1NiBwcml2YXRlIGluY3JlYXNlTGltaXQyID0gMC41IGV0aGVyOwogICAgdWludDI1NiBwcml2YXRlIGluY3JlYXNlTGltaXQzID0gMi4wIGV0aGVyOwogICAgdWludDI1NiBwcml2YXRlIGluY3JlYXNlTGltaXQ0ID0gNS4wIGV0aGVyOwoKICAgIGZ1bmN0aW9uIG5leHRQcmljZU9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX25leHRQcmljZSkgewogICAgICAgIHVpbnQyNTYgX3ByaWNlID0gcHJpY2VPZihfdG9rZW5JZCk7CiAgICAgICAgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQxKSB7CiAgICAgICAgICAgIHJldHVybiBfcHJpY2UubXVsKDIwMCkuZGl2KDk1KTsKICAgICAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQyKSB7CiAgICAgICAgICAgIHJldHVybiBfcHJpY2UubXVsKDEzNSkuZGl2KDk2KTsKICAgICAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQzKSB7CiAgICAgICAgICAgIHJldHVybiBfcHJpY2UubXVsKDEyNSkuZGl2KDk3KTsKICAgICAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQ0KSB7CiAgICAgICAgICAgIHJldHVybiBfcHJpY2UubXVsKDExNykuZGl2KDk3KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gX3ByaWNlLm11bCgxMTUpLmRpdig5OCk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioqIEVSQy03MjEgKioqLwogICAgLy8gVW5sb2NrcyBFUkM3MjEgYmVoYXZpb3VyLCBhbGxvd2luZyBmb3IgdHJhZGluZyBvbiB0aGlyZCBwYXJ0eSBwbGF0Zm9ybXMuCiAgICBmdW5jdGlvbiBlbmFibGVFUkM3MjEoKSBvbmx5Q0VPIHB1YmxpYyB7CiAgICAgICAgZXJjNzIxRW5hYmxlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IF90b3RhbFN1cHBseSkgewogICAgICAgIF90b3RhbFN1cHBseSA9IGtpdHRlbnMubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkgewogICAgICAgIF9iYWxhbmNlID0gb3duZXJzaGlwVG9rZW5Db3VudFtfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIpIHsKICAgICAgICBfb3duZXIgPSB0b2tlbklkVG9Pd25lcltfdG9rZW5JZF07CiAgICAgICAgLy8gcmVxdWlyZShfb3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHdoZW5Ob3RQYXVzZWQgb25seUVSQzcyMSB7CiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwoKICAgICAgICB0b2tlbklkVG9BcHByb3ZlZFtfdG9rZW5JZF0gPSBfdG87CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHdoZW5Ob3RQYXVzZWQgb25seUVSQzcyMSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfb3ducyhfZnJvbSwgX3Rva2VuSWQpKTsKICAgICAgICByZXF1aXJlKF9hcHByb3ZlZChtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwoKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBvbmx5RVJDNzIxIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIC8vIFJlYXNzaWduIG93bmVyc2hpcCwgY2xlYXIgcGVuZGluZyBhcHByb3ZhbHMsIGVtaXQgVHJhbnNmZXIgZXZlbnQuCiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgdmlldyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZXJjNzIxRW5hYmxlZDsKICAgIH0KCiAgICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB3aGVuTm90UGF1c2VkIG9ubHlFUkM3MjEgewogICAgICAgIHJlcXVpcmUoX2FwcHJvdmVkKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIF90cmFuc2Zlcih0b2tlbklkVG9Pd25lcltfdG9rZW5JZF0sIG1zZy5zZW5kZXIsIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIF9uYW1lKSB7CiAgICAgICAgX25hbWUgPSAiQ3J5cHRvS2l0dGVucyI7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsKICAgICAgICBfc3ltYm9sID0gIkNLVE4iOwogICAgfQoKICAgIC8qKiogUFJJVkFURVMgKioqLwogICAgLy8vIEBkZXYgQ2hlY2sgZm9yIHRva2VuIG93bmVyc2hpcC4KICAgIGZ1bmN0aW9uIF9vd25zKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b2tlbklkVG9Pd25lcltfdG9rZW5JZF0gPT0gX2NsYWltYW50OwogICAgfQoKICAgIC8vLyBAZGV2IEZvciBjaGVja2luZyBhcHByb3ZhbCBvZiB0cmFuc2ZlciBmb3IgYWRkcmVzcyBfdG8uCiAgICBmdW5jdGlvbiBfYXBwcm92ZWQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRva2VuSWRUb0FwcHJvdmVkW190b2tlbklkXSA9PSBfdG87CiAgICB9CgogICAgLy8vIEBkZXYgQXNzaWducyBvd25lcnNoaXAgb2YgYSBzcGVjaWZpYyB0b2tlbiB0byBhbiBhZGRyZXNzLgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHsKICAgICAgICAvLyBTaW5jZSB0aGUgbnVtYmVyIG9mIHRva2VucyBpcyBjYXBwZWQgdG8gMl4zMiB3ZSBjYW4ndCBvdmVyZmxvdyB0aGlzCiAgICAgICAgb3duZXJzaGlwVG9rZW5Db3VudFtfdG9dKys7CiAgICAgICAgLy8gVHJhbnNmZXIgb3duZXJzaGlwCiAgICAgICAgdG9rZW5JZFRvT3duZXJbX3Rva2VuSWRdID0gX3RvOwoKICAgICAgICAvLyBXaGVuIGNyZWF0aW5nIG5ldyB0b2tlbiBfZnJvbSBpcyAweDAsIGJ1dCB3ZSBjYW4ndCBhY2NvdW50IHRoYXQgYWRkcmVzcy4KICAgICAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lcnNoaXBUb2tlbkNvdW50W19mcm9tXS0tOwogICAgICAgICAgICAvLyBjbGVhciBhbnkgcHJldmlvdXNseSBhcHByb3ZlZCBvd25lcnNoaXAgZXhjaGFuZ2UKICAgICAgICAgICAgZGVsZXRlIHRva2VuSWRUb0FwcHJvdmVkW190b2tlbklkXTsKICAgICAgICB9CgogICAgICAgIC8vIEVtaXQgdGhlIHRyYW5zZmVyIGV2ZW50LgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBDaGVja3MgaWYgdGhlIGFkZHJlc3MgaWEgYSBjb250cmFjdCBvciBub3QKICAgIGZ1bmN0aW9uIF9pc0NvbnRyYWN0KGFkZHJlc3MgYWRkcikgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IHNpemU7CiAgICAgICAgYXNzZW1ibHkgeyBzaXplIDo9IGV4dGNvZGVzaXplKGFkZHIpIH0KICAgICAgICByZXR1cm4gc2l6ZSA+IDA7CiAgICB9Cn0KCgovLyBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAovLyB2MS42LjAKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIC8qKgogICAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgICAqLwogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0='.
	

]
