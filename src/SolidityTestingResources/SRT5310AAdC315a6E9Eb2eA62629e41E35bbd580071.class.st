Class {
	#name : #SRT5310AAdC315a6E9Eb2eA62629e41E35bbd580071,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5310AAdC315a6E9Eb2eA62629e41E35bbd580071 >> base64 [
	^ ''.
	

]
