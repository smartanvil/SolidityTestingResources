Class {
	#name : #SRT07E040D474a584cD2E7e4A819fA18420BeB5Eb4f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07E040D474a584cD2E7e4A819fA18420BeB5Eb4f >> base64 [
	^ ''.
	

]
