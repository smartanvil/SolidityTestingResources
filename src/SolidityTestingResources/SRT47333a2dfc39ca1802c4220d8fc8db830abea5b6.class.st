Class {
	#name : #SRT47333a2dfc39ca1802c4220d8fc8db830abea5b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47333a2dfc39ca1802c4220d8fc8db830abea5b6 >> base64 [
	^ ''.
	

]
