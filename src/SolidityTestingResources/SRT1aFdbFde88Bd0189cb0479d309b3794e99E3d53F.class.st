Class {
	#name : #SRT1aFdbFde88Bd0189cb0479d309b3794e99E3d53F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1aFdbFde88Bd0189cb0479d309b3794e99E3d53F >> base64 [
	^ ''.
	

]
