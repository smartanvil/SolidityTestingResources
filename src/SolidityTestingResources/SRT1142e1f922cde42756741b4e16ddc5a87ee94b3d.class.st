Class {
	#name : #SRT1142e1f922cde42756741b4e16ddc5a87ee94b3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1142e1f922cde42756741b4e16ddc5a87ee94b3d >> base64 [
	^ ''.
	

]
