Class {
	#name : #SRTc90233644d2eeb37a7ec641072c85ad272ef2feb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc90233644d2eeb37a7ec641072c85ad272ef2feb >> base64 [
	^ ''.
	

]
