Class {
	#name : #SRTd2c5c0d51c8d97d0deb0a5efa416de90600db62d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd2c5c0d51c8d97d0deb0a5efa416de90600db62d >> base64 [
	^ ''.
	

]
