Class {
	#name : #SRTEA06c9cB0d69058468387F283e9A3f61c53e3C21,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTEA06c9cB0d69058468387F283e9A3f61c53e3C21 >> base64 [
	^ ''.
	

]
