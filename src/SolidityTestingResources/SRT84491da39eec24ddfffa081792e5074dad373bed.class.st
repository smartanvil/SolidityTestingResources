Class {
	#name : #SRT84491da39eec24ddfffa081792e5074dad373bed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT84491da39eec24ddfffa081792e5074dad373bed >> base64 [
	^ ''.
	

]
