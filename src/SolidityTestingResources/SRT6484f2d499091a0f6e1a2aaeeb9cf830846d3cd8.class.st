Class {
	#name : #SRT6484f2d499091a0f6e1a2aaeeb9cf830846d3cd8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6484f2d499091a0f6e1a2aaeeb9cf830846d3cd8 >> base64 [
	^ ''.
	

]
