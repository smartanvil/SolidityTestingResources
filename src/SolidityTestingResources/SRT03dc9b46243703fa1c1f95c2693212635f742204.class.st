Class {
	#name : #SRT03dc9b46243703fa1c1f95c2693212635f742204,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT03dc9b46243703fa1c1f95c2693212635f742204 >> base64 [
	^ ''.
	

]
