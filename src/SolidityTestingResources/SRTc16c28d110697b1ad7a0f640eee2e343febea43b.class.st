Class {
	#name : #SRTc16c28d110697b1ad7a0f640eee2e343febea43b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc16c28d110697b1ad7a0f640eee2e343febea43b >> base64 [
	^ ''.
	

]
