Class {
	#name : #SRT50bb21BEFA6c04F0C81a44EDaEA5f11D069791f8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50bb21BEFA6c04F0C81a44EDaEA5f11D069791f8 >> base64 [
	^ ''.
	

]
