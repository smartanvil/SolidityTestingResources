Class {
	#name : #SRTbe87e87965b96d8174eae4e3724a6d7417c488b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbe87e87965b96d8174eae4e3724a6d7417c488b0 >> base64 [
	^ 'LyoqCiAqIFRoZSBFZGdlbGVzcyB0b2tlbiBjb250cmFjdCBjb21wbGllcyB3aXRoIHRoZSBFUkMyMCBzdGFuZGFyZC4KICogQWRkaXRpb25hbGx5IHRva2VucyBjYW4gYmUgbG9ja2VkIGZvciBhIGRlZmluZWQgdGltZSBpbnRlcnZhbCBieSB0b2tlbiBob2xkZXJzLgogKiBBdXRob3I6IEp1bGlhIEFsdGVucmllZAogKiAqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKY29udHJhY3QgRWRnZWxlc3NUb2tlbiB7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdFUkMyMCc7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnRWRnZWxlc3MnOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnRURHJzsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIHVpbnQyNTYgcHVibGljIGN1cnJlbnRJbnRlcnZhbCA9IDE7CiAgICB1aW50MjU2IHB1YmxpYyBpbnRlcnZhbExlbmd0aCA9IDMwIGRheXM7CiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNDkwMTEyMDAwOy8vZnJvbSB0aGlzIHRpbWUgb24gdG9rZW5zIG1heSBiZSB0cmFuc2ZlcmVkIChhZnRlciBJQ08pCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGJvb2wgYnVybmVkOy8vdGVsbHMgaWYgdG9rZW5zIGhhdmUgYmVlbiBidXJuZWQgYWxyZWFkeQoKICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8qIERlZmluZXMgaG93IG1hbnkgdG9rZW5zIG9mIHdoaWNoIGFkZHJlc3NlcyBhcmUgbG9ja2VkIGluIHdoaWNoIGludGVydmFsKi8KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKHVpbnQyNTY9PnVpbnQyNTYpKSBwdWJsaWMgbG9ja2VkOwoKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IExvY2soYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50MjU2IGludGVydmFsLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIEVkZ2VsZXNzVG9rZW4oKSB7CiAgICAgICAgb3duZXIgPSAweDAwMzIzMEJCRTY0ZWNjRDY2ZjYyOTEzNjc5Qzg5NjZDZjlGNDExNjY7CiAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IDUwMDAwMDAwMDsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIG93bmVyIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIHRvdGFsU3VwcGx5ID0gNTAwMDAwMDAwOyAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgZm9yKHVpbnQ4IGkgPSAxOyBpIDwgMTM7IGkrKykJCSAgIC8vIGxvY2sgb3duZXIncyBmaW5hbCBzaGFyZSBvZiB0b2tlbnMgZm9yIHRoZSBmaXJzdCAxMiBtb250aHMKICAgICAgICAJbG9ja2VkW293bmVyXVtpXSA9IDUwMDAwMDAwOwogICAgfQoKICAgIC8qIFNlbmQgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICBpZiAobm93IDwgc3RhcnRUaW1lKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3ZlcgogICAgICAgIGlmIChsb2NrZWRbbXNnLnNlbmRlcl1bZ2V0SW50ZXJ2YWwoKV0gPj0gYmFsYW5jZU9mW21zZy5zZW5kZXJdIHx8IGJhbGFuY2VPZlttc2cuc2VuZGVyXS1sb2NrZWRbbXNnLnNlbmRlcl1bZ2V0SW50ZXJ2YWwoKV0gPCBfdmFsdWUpIHRocm93OyAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIEFwcHJvdmUgYW5kIHRoZW4gY29tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUgJiYgX2Zyb20hPW93bmVyKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3ZlcgogICAgICAgIGlmIChsb2NrZWRbX2Zyb21dW2dldEludGVydmFsKCldID49IGJhbGFuY2VPZltfZnJvbV0gfHwgYmFsYW5jZU9mW19mcm9tXS1sb2NrZWRbX2Zyb21dW2dldEludGVydmFsKCldIDwgX3ZhbHVlKSB0aHJvdzsgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7ICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBMb2NrIGEgbnVtYmVyIG9mIHRva2VucyAqLwogICAgZnVuY3Rpb24gbG9jayhhZGRyZXNzIGhvbGRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmKGhvbGRlcj09bXNnLnNlbmRlcnx8aG9sZGVyPT10eC5vcmlnaW4pewogICAgICAgICAgICBsb2NrZWRbaG9sZGVyXVtnZXRJbnRlcnZhbCgpXSs9X3ZhbHVlOwogICAgICAgICAgICBMb2NrKGhvbGRlciwgY3VycmVudEludGVydmFsLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgLyogSW5jcmVhc2UgdGhlIGludGVydmFsLCBpZiBzdWZmaWNpZW50IHRpbWUgaGFzIHBhc3NlZCAqLwogICAgZnVuY3Rpb24gZ2V0SW50ZXJ2YWwoKSByZXR1cm5zICh1aW50MjU2IGludGVydmFsKXsKICAgICAgICBpZiAobm93ID4gY3VycmVudEludGVydmFsICogaW50ZXJ2YWxMZW5ndGggKyBzdGFydFRpbWUpIHsKICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gKG5vdyAtIHN0YXJ0VGltZSkgLyBpbnRlcnZhbExlbmd0aCArIDE7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjdXJyZW50SW50ZXJ2YWw7CiAgICB9CgogICAgLyogdG8gYmUgY2FsbGVkIHdoZW4gSUNPIGlzIGNsb3NlZCwgYnVybnMgdGhlIHJlbWFpbmluZyB0b2tlbnMgYnV0IHRoZSBvd25lcnMgc2hhcmUgKDUwIDAwMCAwMDApIGFuZCB0aGUgb25lcyByZXNlcnZlZAogICAgZm9yIHRoZSBib3VudHkgcHJvZ3JhbSAoMTAgMDAwIDAwMCkuCiAgICBhbnlib2R5IG1heSBidXJuIHRoZSB0b2tlbnMgYWZ0ZXIgSUNPIGVuZGVkLCBidXQgb25seSBvbmNlIChpbiBjYXNlIHRoZSBvd25lciBob2xkcyBtb3JlIHRva2VucyBpbiB0aGUgZnV0dXJlKS4gKi8KICAgIGZ1bmN0aW9uIGJ1cm4oKXsKICAgIAkvL2lmIHRva2VucyBoYXZlIG5vdCBiZWVuIGJ1cm5lZCBhbHJlYWR5IGFuZCB0aGUgSUNPIGVuZGVkCiAgICAJaWYoIWJ1cm5lZCAmJiBub3c+c3RhcnRUaW1lICYmIGJhbGFuY2VPZltvd25lcl0gPiA2MDAwMDAwMCl7CiAgICAJCXVpbnQgZGlmZmVyZW5jZSA9IGJhbGFuY2VPZltvd25lcl0gLSA2MDAwMDAwMDsKICAgIAkJYmFsYW5jZU9mW293bmVyXSA9IDYwMDAwMDAwOwogICAgCQl0b3RhbFN1cHBseSAtPSBkaWZmZXJlbmNlOwogICAgCQlidXJuZWQgPSB0cnVlOwogICAgCX0KICAgIH0KCn0='.
	

]
