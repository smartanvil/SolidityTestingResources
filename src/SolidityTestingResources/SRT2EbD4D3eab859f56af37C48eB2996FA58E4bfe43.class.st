Class {
	#name : #SRT2EbD4D3eab859f56af37C48eB2996FA58E4bfe43,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2EbD4D3eab859f56af37C48eB2996FA58E4bfe43 >> base64 [
	^ ''.
	

]
