Class {
	#name : #SRTf41624c6465e57a0dca498ef0b62f07cbaab09ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf41624c6465e57a0dca498ef0b62f07cbaab09ca >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgoKLy9NZWxvbiBXYWxsZXQgJE5HUihOYXR1cmFsIFJvb3QgR3Jvd3RoIHRva2VuIG1pbmluZyBldmVudCBJQ08gY29udHJhY3QgLSBtZWxvbi5idXNpbmVzcyAmIG1lbG9ud2FsbGV0Lm5ldHdvcmsgCgoKY29udHJhY3QgU2FmZU1hdGggewogIGZ1bmN0aW9uIHNhZmVNdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPiAwKTsKICAgIHVpbnQgYyA9IGEgLyBiOwogICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9CgoKCgpjb250cmFjdCBFUkMyMCB7CiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgoKCgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBTYWZlTWF0aCB7CgogIC8qIFRva2VuIHN1cHBseSBnb3QgaW5jcmVhc2VkIGFuZCBhIG5ldyBvd25lciByZWNlaXZlZCB0aGVzZSB0b2tlbnMgKi8KICBldmVudCBNaW50ZWQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwoKICAvKiBBY3R1YWwgYmFsYW5jZXMgb2YgdG9rZW4gaG9sZGVycyAqLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKCiAgLyogYXBwcm92ZSgpIGFsbG93YW5jZXMgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIC8qIEludGVyZmFjZSBkZWNsYXJhdGlvbiAqLwogIGZ1bmN0aW9uIGlzVG9rZW4oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCB3ZUFyZSkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAKICAgICAgaWYgKF92YWx1ZSA8IDEpIHsKICAgICAgICAgIHJldmVydCgpOwogICAgICB9CiAgICAgIAogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIAogICAgICBpZiAoX3ZhbHVlIDwgMSkgewogICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgIH0KICAgICAgCiAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIGlmICgoX3ZhbHVlICE9IDApICYmIChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSAhPSAwKSkgdGhyb3c7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKCgoKCi8vTWVsb24gV2FsbGV0IE5HUiB0b2tlbiBidXlpbmcgY29udHJhY3QgLSBtZWxvbi5idXNpbmVzcyAmIG1lbG9ud2FsbGV0Lm5ldHdvcmsgCgpjb250cmFjdCBNZWxvbldhbGxldCBpcyBTdGFuZGFyZFRva2VuIHsKICAKICAgIAogICAgdWludDI1NiBwdWJsaWMgcmF0ZSA9IDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsJIC8vRWFjaCBFVEggd2lsbCBnZXQgeW91IDEwMEsgTkdSIE1lbG9uIFdhbGxldCBUb2tlbnMKICAgIGFkZHJlc3MgcHVibGljIG93bmVyID0gbXNnLnNlbmRlcjsJCSAvL1JlY29yZCB0aGUgb3duZXIgb2YgdGhlIGNvbnRyYWN0Cgl1aW50MjU2IHB1YmxpYyB0b2tlbkFtb3VudCA9IDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAKICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJNZWxvbiBXYWxsZXQiOyB9CiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJOR1IiOyB9CiAgICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7IHJldHVybiAxODsgfQoJCgoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBwdWJsaWMgewogICAgICAKICAgICB0b2tlbkFtb3VudCA9ICgobXNnLnZhbHVlKnJhdGUpLygxIGV0aGVyKSk7CQkvL2NhbGN1bGF0ZSB0aGUgYW1vdW50IG9mIHRva2VucyB0byBnaXZlCiAgICAgIAogICAgaWYgKHRvdGFsU3VwcGx5ID4gNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgeyAgICAgICAgLy9NYWtlIHN1cmUgdGhhdCBubyBtb3JlIHRoYW4gNiBtaWxsaW9uIE5HUiBjYW4gYmUgbWFkZS4KICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIAogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID4gMjUwMDAwMDAwMDAwMDAwMDAwMDAwMDApIHsgICAgICAgICAgICAgLy9NYWtlIHN1cmUgYSBidXllciBjYW4ndCBidXkgbW9yZSB0aGFuIDEwMEsuCiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgICAKICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSt0b2tlbkFtb3VudCA+IDI1MDAwMDAwMDAwMDAwMDAwMDAwMDAwKSB7ICAgIC8vTWFrZSBzdXJlIGEgYnV5ZXIgY2FuJ3QgYnV5IG1vcmUgdGhhbiAxMDBLLgogICAgICAgIHJldmVydCgpOwogICAgfQogICAgCiAgICBpZiAodG9rZW5BbW91bnQgPiAyNTAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgeyAgICAgICAgICAvL01ha2Ugc3VyZSBhIGJ1eWVyIGNhbid0IGJ1eSBtb3JlIHRoYW4gMTAwSy4KICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIAoJaWYgKCh0b2tlbkFtb3VudCt0b3RhbFN1cHBseSkgPiA2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSB7ICAgICAgLy9NYWtlIHN1cmUgdGhhdCBubyBtb3JlIHRoYW4gNiBtaWxsaW9uIE5HUiBjYW4gYmUgbWFkZS4KICAgICAgICByZXZlcnQoKTsKICAgIH0KCiAgICAgIGlmIChhbW91bnQgIT0gKChtc2cudmFsdWUqcmF0ZSkvMSBldGhlcikpIHsgICAgICAgLy9wcmV2ZW50IG1pbnRpbmcgdG9rZW5zIGJ5IGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBkaXJlY3RseS4KICAgICAgICAgIHJldmVydCgpOwogICAgICB9CiAgICAgIAogICAgICBpZiAobXNnLnZhbHVlIDw9IDApIHsgICAgICAgICAgICAgICAgIC8vRXh0cmEgcHJlY2F1dGlvbiB0byBjb250cmFjdCBhdHRhY2sKICAgICAgICAgIHJldmVydCgpOwogICAgICB9CiAgICAgIAogICAgICBpZiAoYW1vdW50IDwgMSkgeyAgICAgICAgICAgICAgICAgICAgIC8vRXh0cmEgcHJlY2F1dGlvbiB0byBjb250cmFjdCBhdHRhY2sKICAgICAgICAgIHJldmVydCgpOwogICAgICB9CgogICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBhbW91bnQpOwogICAgYmFsYW5jZXNbcmVjZWl2ZXJdID0gc2FmZUFkZChiYWxhbmNlc1tyZWNlaXZlcl0sIGFtb3VudCk7CgogICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIG1pbnQgdHJhbnNhY3Rpb24gYXBwZXIgaW4gRXRoZXJTY2FuLmlvCiAgICAvLyBXZSBjYW4gcmVtb3ZlIHRoaXMgYWZ0ZXIgdGhlcmUgaXMgYSBzdGFuZGFyZGl6ZWQgbWludGluZyBldmVudAogICAgVHJhbnNmZXIoMCwgcmVjZWl2ZXIsIGFtb3VudCk7CiAgfQoKICAKICAKCS8vVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBFdGhlciBpcyBzZW50IHRvIHRoZSBNZWxvbiBXYWxsZXQgY29udHJhY3QgYWRkcmVzcwoJLy9FdmVuIGlmIDAgZXRoZXIgaXMgc2VudC4KZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAKICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+IDI1MDAwMDAwMDAwMDAwMDAwMDAwMDAwKSB7ICAgICAvL01ha2Ugc3VyZSBhIGJ1eWVyIGNhbid0IGJ1eSBtb3JlIHRoYW4gMTAwIEsgTWVsb24gV2FsbGV0IFRva2Vucy4KICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIAogICAgaWYgKHRvdGFsU3VwcGx5ID4gNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgeyAgICAgICAgLy9NYWtlIHN1cmUgdGhhdCBubyBtb3JlIHRoYW4gNiBtaWxsaW9uIE5HUiBjYW4gYmUgbWFkZS4KICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIAoKCWlmIChtc2cudmFsdWUgPD0gMCkgewkJLy9JZiB6ZXJvIG9yIGxlc3MgZXRoZXIgaXMgc2VudCwgcmVmdW5kIHVzZXIuIAoJCXJldmVydCgpOwoJfQoJCgoJdG9rZW5BbW91bnQgPSAyMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CQkJCQkJLy9zZXQgdGhlICdhbW91bnQnIHZhciBiYWNrIHRvIHplcm8KCXRva2VuQW1vdW50ID0gKChtc2cudmFsdWUqcmF0ZSkvKDEgZXRoZXIpKTsJCS8vY2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGdpdmUKCQogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdK3Rva2VuQW1vdW50ID4gMjUwMDAwMDAwMDAwMDAwMDAwMDAwMDApIHsgICAgIC8vTWFrZSBzdXJlIGEgYnV5ZXIgY2FuJ3QgYnV5IG1vcmUgdGhhbiAxMDAgSyBNZWxvbiBXYWxsZXQgVG9rZW5zLgogICAgICAgIHJldmVydCgpOwogICAgfQoJCiAgICBpZiAodG9rZW5BbW91bnQgPiAyNTAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgeyAgICAgICAgICAvL01ha2Ugc3VyZSBhIGJ1eWVyIGNhbid0IGJ1eSBtb3JlIHRoYW4gMTAwSyBNZWxvbiBXYWxsZXQgVG9rZW5zLgogICAgICAgIHJldmVydCgpOwogICAgfQoJCglpZiAodG9rZW5BbW91bnQgPCAxKSB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgICAKCWlmICgodG9rZW5BbW91bnQrdG90YWxTdXBwbHkpID4gNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgeyAgICAgIC8vTWFrZSBzdXJlIHRoYXQgbm8gbW9yZSB0aGFuIDYgbWlsbGlvbiBOR1IgY2FuIGJlIG1hZGUuCiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgICAgIAoJbWludChtc2cuc2VuZGVyLCB0b2tlbkFtb3VudCk7CgoJCQoJb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsJCQkJCS8vU2VuZCB0aGUgRVRICgp9ICAKICAKICAgICBmdW5jdGlvbiBNZWxvbldhbGxldCgpIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsgCiAgICAgfQogIAp9'.
	

]
