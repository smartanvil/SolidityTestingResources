Class {
	#name : #SRT09F0aaABe4Df881797698aF29477A65AC9A302d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT09F0aaABe4Df881797698aF29477A65AC9A302d1 >> base64 [
	^ 'Y29udHJhY3QgdGlja2luZ0JvbWIgewoKICAgIHN0cnVjdCB0ZWFtIHsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50IGxhc3RVcGRhdGU7CiAgICAgICAgYWRkcmVzc1tdIG1lbWJlcnM7CiAgICAgICAgdWludCBuYnJNZW1iZXJzOwogICAgfQoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiAxMjsgLy8gMTIgSG91cnMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IElOVkVTVF9BTU9VTlQgPSA1MDAgZmlubmV5OyAvLyAwLjUgRVRICiAgICB1aW50IGNvbnN0YW50IEZFRSA9IDM7CgogICAgdGVhbSBwdWJsaWMgcmVkOwogICAgdGVhbSBwdWJsaWMgYmx1ZTsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwogICAgYWRkcmVzcyBjcmVhdG9yOwoKICAgIHN0cmluZ1tdIHB1YmxpYyBoaXN0b3J5V2lubmVyOwogICAgdWludFtdIHB1YmxpYyBoaXN0b3J5UmVkOwogICAgdWludFtdIHB1YmxpYyBoaXN0b3J5Qmx1ZTsKICAgIHVpbnQgcHVibGljIGdhbWVOYnI7CgogICAgZnVuY3Rpb24gdGlja2luZ0JvbWIoKSB7CiAgICAgICAgbmV3Um91bmQoKTsKICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgICAgICBnYW1lTmJyID0gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBoZWxwUmVkKCkgewogICAgICAgIHVpbnQgaTsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgRXhwbG9kZWQsIGlmIHNvIHNhdmUgdGhlIHByZXZpb3VzIGdhbWUKICAgICAgICAvLyBBbmQgY3JlYXRlIGEgbmV3IHJvdW5kCiAgICAgICAgY2hlY2tJZkV4cGxvZGVkKCk7CgogICAgICAgIC8vIFVwZGF0ZSB0aGUgVGltZVN0YW1wCiAgICAgICAgcmVkLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7CgogICAgICAgIC8vIFNwbGl0IHRoZSBpbmNvbWluZyBtb25leSBldmVyeSBJTlZFU1RfQU1PVU5UCiAgICAgICAgd2hpbGUgKGFtb3VudCA+PSBJTlZFU1RfQU1PVU5UKSB7CiAgICAgICAgICAgIHJlZC5tZW1iZXJzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICAgIHJlZC5uYnJNZW1iZXJzKys7CiAgICAgICAgICAgIGFtb3VudCAtPSBJTlZFU1RfQU1PVU5UOwogICAgICAgIH0KCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgc3RpbGwgc29tZSBtb25leSBpbiB0aGUgYmFsYW5jZSwgc2VudCBpdCBiYWNrCiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKGFtb3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGhlbHBCbHVlKCkgewogICAgICAgIHVpbnQgaTsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgRXhwbG9kZWQsIGlmIHNvIHNhdmUgdGhlIHByZXZpb3VzIGdhbWUKICAgICAgICAvLyBBbmQgY3JlYXRlIGEgbmV3IGdhbWUKICAgICAgICBjaGVja0lmRXhwbG9kZWQoKTsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSBUaW1lU3RhbXAKICAgICAgICBibHVlLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7CgogICAgICAgIC8vIFNwbGl0IHRoZSBpbmNvbWluZyBtb25leSBldmVyeSAxMDAgZmlubmV5cwogICAgICAgIHdoaWxlIChhbW91bnQgPj0gSU5WRVNUX0FNT1VOVCkgewogICAgICAgICAgICBibHVlLm1lbWJlcnMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgYmx1ZS5uYnJNZW1iZXJzKys7CiAgICAgICAgICAgIGFtb3VudCAtPSBJTlZFU1RfQU1PVU5UOwogICAgICAgIH0KCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgc3RpbGwgc29tZSBtb25leSBpbiB0aGUgYmFsYW5jZSwgc2VudCBpdCBiYWNrCiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKGFtb3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrSWZFeHBsb2RlZCgpIHsKICAgICAgICBpZiAoY2hlY2tUaW1lKCkpIHsKICAgICAgICAgICAgbmV3Um91bmQoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tUaW1lKCkgcHJpdmF0ZSByZXR1cm5zKGJvb2wgZXhwbG9kZWQpIHsKICAgICAgICB1aW50IGk7CiAgICAgICAgdWludCBsb3N0QW1vdW50ID0gMDsKICAgICAgICB1aW50IGdhaW5QZXJNZW1iZXIgPSAwOwogICAgICAgIHVpbnQgZmVlQ29sbGVjdGVkID0gMDsKCiAgICAgICAgLy8gSWYgUmVkIGFuZCBCbHVlIGhhdmUgZXhwbG9kZWQgYXQgdGhlIHNhbWUgdGltZSwgcmV0dXJuIHRoZSBhbW91bnRlZCBpbnZlc3RlZAogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA9PSBibHVlLmxhc3RVcGRhdGUgJiYgcmVkLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVkLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW3JlZC5tZW1iZXJzW2ldXSArPSBJTlZFU1RfQU1PVU5UOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBibHVlLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW2JsdWUubWVtYmVyc1tpXV0gKz0gSU5WRVNUX0FNT1VOVDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdUaWUgYmV0d2VlbiBSZWQgYW5kIEJsdWUnKTsKICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOwogICAgICAgICAgICBnYW1lTmJyKys7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgLy8gVGFrZSB0aGUgb2xkZXIgdGltZXN0YW1wCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlIDwgYmx1ZS5sYXN0VXBkYXRlKSB7CiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBSZWQgYm9tYiBleHBsb2RlZAogICAgICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBsb3N0IGFtb3VudCBieSB0aGUgcmVkIHRlYW0KICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBSZWQgbWVtYmVyICogSW52ZXN0ZWQgYW1vdW50IHBlciB1c2VyICAqCiAgICAgICAgICAgICAgICBmZWVDb2xsZWN0ZWQgKz0gKHJlZC5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCAqIEZFRSAvIDEwMCk7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSArPSBmZWVDb2xsZWN0ZWQ7CiAgICAgICAgICAgICAgICBsb3N0QW1vdW50ID0gKHJlZC5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCkgLSBmZWVDb2xsZWN0ZWQ7CgogICAgICAgICAgICAgICAgZ2FpblBlck1lbWJlciA9IGxvc3RBbW91bnQgLyBibHVlLm5ick1lbWJlcnM7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmx1ZS5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbYmx1ZS5tZW1iZXJzW2ldXSArPSAoSU5WRVNUX0FNT1VOVCArIGdhaW5QZXJNZW1iZXIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnUmVkJyk7CiAgICAgICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOwogICAgICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOwogICAgICAgICAgICAgICAgZ2FtZU5icisrOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBCbHVlIGJvbWIgZXhwbG9kZWQKICAgICAgICAgICAgaWYgKGJsdWUubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGxvc3QgYW1vdW50IGJ5IHRoZSByZWQgdGVhbQogICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIFJlZCBtZW1iZXIgKiBJbnZlc3RlZCBhbW91bnQgcGVyIHVzZXIgICoKICAgICAgICAgICAgICAgIGZlZUNvbGxlY3RlZCArPSAoYmx1ZS5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCAqIEZFRSAvIDEwMCk7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSArPSBmZWVDb2xsZWN0ZWQ7CiAgICAgICAgICAgICAgICBsb3N0QW1vdW50ID0gKGJsdWUubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQpIC0gZmVlQ29sbGVjdGVkOwogICAgICAgICAgICAgICAgZ2FpblBlck1lbWJlciA9IGxvc3RBbW91bnQgLyByZWQubmJyTWVtYmVyczsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWQubWVtYmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW3JlZC5tZW1iZXJzW2ldXSArPSAoSU5WRVNUX0FNT1VOVCArIGdhaW5QZXJNZW1iZXIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnQmx1ZScpOwogICAgICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsKICAgICAgICAgICAgICAgIGdhbWVOYnIrKzsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbmV3Um91bmQoKSBwcml2YXRlIHsKICAgICAgICByZWQubmFtZSA9ICJSZWQgdGVhbSI7CiAgICAgICAgYmx1ZS5uYW1lID0gIkJsdWUgdGVhbSI7CiAgICAgICAgcmVkLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgYmx1ZS5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIHJlZC5uYnJNZW1iZXJzID0gMDsKICAgICAgICBibHVlLm5ick1lbWJlcnMgPSAwOwogICAgICAgIHJlZC5tZW1iZXJzID0gbmV3IGFkZHJlc3NbXSgwKTsKICAgICAgICBibHVlLm1lbWJlcnMgPSBuZXcgYWRkcmVzc1tdKDApOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgewogICAgICAgIC8vIEhlbHAgdGhlIG9sZGVzdCB0aW1lc3RhbXAgKGdvaW5nIHRvIGV4cGxvZGUgZmlyc3QpCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlIDwgYmx1ZS5sYXN0VXBkYXRlKSB7CiAgICAgICAgICAgIGhlbHBSZWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoZWxwQmx1ZSgpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb2xsZWN0QmFsYW5jZSgpIHsKICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgIH0KCiAgICAvLyBBbGxvdyB0aGUgY3JlYXRvciB0byBzZW5kIHRoZWlyIGJhbGFuY2VzIHRvIHRoZSBwbGF5ZXJzCiAgICBmdW5jdGlvbiBzZW5kQmFsYW5jZShhZGRyZXNzIHBsYXllcikgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNyZWF0b3IpIHsKICAgICAgICAgICAgcGxheWVyLnNlbmQoYmFsYW5jZXNbcGxheWVyXSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG5ld093bmVyKGFkZHJlc3MgbmV3T3duZXIpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yKSB7CiAgICAgICAgICAgIGNyZWF0b3IgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cgp9'.
	

]
