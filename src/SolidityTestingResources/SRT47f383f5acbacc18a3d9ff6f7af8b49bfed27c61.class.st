Class {
	#name : #SRT47f383f5acbacc18a3d9ff6f7af8b49bfed27c61,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47f383f5acbacc18a3d9ff6f7af8b49bfed27c61 >> base64 [
	^ ''.
	

]
