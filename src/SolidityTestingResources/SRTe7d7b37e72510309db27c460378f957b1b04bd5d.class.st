Class {
	#name : #SRTe7d7b37e72510309db27c460378f957b1b04bd5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe7d7b37e72510309db27c460378f957b1b04bd5d >> base64 [
	^ ''.
	

]
