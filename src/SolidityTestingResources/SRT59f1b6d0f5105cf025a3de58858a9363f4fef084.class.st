Class {
	#name : #SRT59f1b6d0f5105cf025a3de58858a9363f4fef084,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT59f1b6d0f5105cf025a3de58858a9363f4fef084 >> base64 [
	^ 'pragma solidity ^0.4.18;

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

/**
 * @title Math
 * @dev Assorted math operations
 */
library Math {
  function max64(uint64 a, uint64 b) internal pure returns (uint64) {
    return a >= b ? a : b;
  }

  function min64(uint64 a, uint64 b) internal pure returns (uint64) {
    return a < b ? a : b;
  }

  function max256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a >= b ? a : b;
  }

  function min256(uint256 a, uint256 b) internal pure returns (uint256) {
    return a < b ? a : b;
  }
}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  uint256 totalSupply_;

  /**
  * @dev total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) internal allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

contract Auscoin is StandardToken, Ownable {
  // Publicly listed name
  string public name = "AUSCOIN COIN";
  // Symbol under which token will be trading
  string public symbol = "AUSC";
  // 1 ETH consists of 10^18 Wei, which is the smallest ETH unit
  uint8 public decimals = 18;
  // Defining the value of a million for easy calculations - order of declaration matters (hoisting)
  uint256 million = 1000000 * (uint256(10) ** decimals);
  // We are offering a total of 100 Million Auscoin Tokens to distribute
  uint256 public totalSupply = 100 * million;
  // This is established on contract deployment in relevance to the (at the time) ETH/USD exchange rate
  uint256 public exchangeRate;
  // Initialized to 0, this value tracks the total amount of ETH sent to the smart contract
  uint256 public totalEthRaised = 0;
  // The time at which the ICO allows for buy interactions, 12th Feb 6PM
  uint256 public startTime;
  // The time at which the ICO stops buy interactions, 12th Feb 6PM + 28 days, after this only transfers and withdrawals are allowed
  uint256 public endTime;
  // The AusGroup token allocation will not be available to AusGroup until this date
  uint256 public ausGroupReleaseDate;
  // Address where the ether raised is transfered to and address where the token balance is stored within the balances mapping
  address public fundsWallet;
  // Address where the bonus tokens are transferred to and held
  address public bonusWallet;
  // Address where AusGroup tokens are held
  address public ausGroup;
  // Whitelister - the entity with permission to add addresses to the whiteList mapping
  address public whiteLister;

  // Initial Allocation amounts
  uint256 public ausGroupAllocation = 50 * million;
  uint256 public bountyAllocation = 1 * million;
  uint256 public preSeedAllocation = 3 * million;
  uint256 public bonusAllocation = 6 * million;

  // Whitelisted mapping - the addresses which have participated in the ICO and are allowed to transact after the ICO.
  // ICO Participants need to be verify their identity before they can use AusCoin
  mapping (address => bool) public whiteListed;

  // ICO Participant
  mapping (address => bool) isICOParticipant;

  // Constants
  uint256 numberOfMillisecsPerYear = 365 * 24 * 60 * 60 * 1000;
  uint256 amountPerYearAvailableToAusGroup = 5 * million;

  function Auscoin(
    uint256 _startTime,
    uint256 _endTime,
    uint256 _ausGroupReleaseDate,
    uint256 _exchangeRate,
    address _bonusWallet,
    address _ausGroup,
    address _bounty,
    address _preSeedFund,
    address _whiteLister
  )
    public
  {
    fundsWallet = owner;
    bonusWallet = _bonusWallet;
    startTime = _startTime;
    endTime = _endTime; // 4 weeks
    ausGroupReleaseDate = _ausGroupReleaseDate;
    exchangeRate = _exchangeRate;
    ausGroup = _ausGroup;
    whiteLister = _whiteLister;

    // Assign total supply to funds wallet
    // https://github.com/OpenZeppelin/zeppelin-solidity/issues/494
    // A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.
    balances[fundsWallet] = totalSupply;
    Transfer(0x0, fundsWallet, totalSupply);

    // Allocate bonus tokens
    // https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/BasicToken.sol
    // The inherited transfer method from the StandardToken which inherits from BasicToken emits Transfer events and subtracts/adds respective
    // amounts to respective accounts
    super.transfer(bonusWallet, bonusAllocation);

    // Transfer pre-allocated funds
    super.transfer(_ausGroup, ausGroupAllocation);

    // Allocate bounty funds
    super.transfer(_bounty, bountyAllocation);

    // Allocate pre-seed funds
    super.transfer(_preSeedFund, preSeedAllocation);
  }

  // Time utility function
  function currentTime() public view returns (uint256) {
    return now * 1000;
  }

  // calculateBonusAmount, view tag attached as it does not manipulate state
  function calculateBonusAmount(uint256 amount) view internal returns (uint256) {
    uint256 totalAvailableDuringICO = totalSupply - (bonusAllocation + ausGroupAllocation + bountyAllocation + preSeedAllocation);
    uint256 sold = totalAvailableDuringICO - balances[fundsWallet];

    uint256 amountForThirtyBonusBracket = int256((10 * million) - sold) > 0 ? (10 * million) - sold : 0;
    uint256 amountForTwentyBonusBracket = int256((20 * million) - sold) > 0 ? (20 * million) - sold : 0;
    uint256 amountForTenBonusBracket = int256((30 * million) - sold) > 0 ? (30 * million) - sold : 0;

    uint256 thirtyBonusBracket = Math.min256(Math.max256(0, amountForThirtyBonusBracket), Math.min256(amount, (10 * million)));
    uint256 twentyBonusBracket = Math.min256(Math.max256(0, amountForTwentyBonusBracket), Math.min256(amount - thirtyBonusBracket, (10 * million)));
    uint256 tenBonusBracket = Math.min256(Math.max256(0, amountForTenBonusBracket), Math.min256(amount - twentyBonusBracket - thirtyBonusBracket, (10 * million)));

    uint256 totalBonus = thirtyBonusBracket.mul(30).div(100) + twentyBonusBracket.mul(20).div(100) + tenBonusBracket.mul(10).div(100);

    return totalBonus;
  }

  // Payable functions. Fall out and low level buy
  // isIcoOpen modifier ensures ETH payments can only be made if the ICO is 'open', after start and before end date (or if all tokens are sold)
  // payable is needed on the fallback function in order to receive Ether
  // Reference: http://solidity.readthedocs.io/en/develop/contracts.html
  function() isIcoOpen payable public {
    buyTokens();
  }

  function buyTokens() isIcoOpen payable public {
    // Use the exchange rate set at deployment to calculate the amount of tokens the transferred ETH converts to
    uint256 tokenAmount = msg.value.mul(exchangeRate);
    // Calculate the bonus the sender will receive based on which Tier the current Smart Contract is sitting on
    uint256 bonusAmount = calculateBonusAmount(tokenAmount);
    // Ensure that the tokenAmount is greater than the total funds currently present
    require(balances[fundsWallet] >= tokenAmount);
    // Ensure that the bonusAmount is greater than the total bonus currently availbale in the bonusWallet
    require(balances[bonusWallet] >= bonusAmount);

    // Add to the state level ETH raised value
    totalEthRaised = totalEthRaised.add(msg.value);

    // Deduct the said amount from the relevant wallet addresses in the balance map
    balances[bonusWallet] = balances[bonusWallet].sub(bonusAmount);
    balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);
    // Add the sold tokens to the sender's wallet address in the balance map for them to claim after ICO
    balances[msg.sender] = balances[msg.sender].add(tokenAmount.add(bonusAmount));

    // Add them to the isICOParticipant mapping
    isICOParticipant[msg.sender] = true;

    fundsWallet.transfer(msg.value);

    // Since we did not use the transfer method, we manually emit the Transfer event
    Transfer(fundsWallet, msg.sender, tokenAmount);
    Transfer(bonusWallet, msg.sender, bonusAmount);
  }

  function addToWhiteList(address _purchaser) canAddToWhiteList public {
    whiteListed[_purchaser] = true;
  }

  function setWhiteLister(address _newWhiteLister) onlyOwner public {
    whiteLister = _newWhiteLister;
  }

  // Transfers
  function transfer(address _to, uint _value) isIcoClosed public returns (bool success) {
    require(msg.sender != ausGroup);
    if (isICOParticipant[msg.sender]) {
      require(whiteListed[msg.sender]);
    }
    return super.transfer(_to, _value);
  }

  function ausgroupTransfer(address _to, uint _value) timeRestrictedAccess isValidAusGroupTransfer(_value) public returns (bool success) {
    require(msg.sender == ausGroup);
    require(balances[ausGroup] >= _value);
    return super.transfer(_to, _value);
  }

  // Override to enforce modifier that ensures that ICO is closed before the following function is invoked
  function transferFrom(address _from, address _to, uint _value) isIcoClosed public returns (bool success) {
    require(_from != ausGroup);
    if (isICOParticipant[_from]) {
      require(whiteListed[_from]);
    }
    return super.transferFrom(_from, _to, _value);
  }

  function burnUnsoldTokens() isIcoClosed onlyOwner public {
    uint256 bonusLeft = balances[bonusWallet];
    uint256 fundsLeft = balances[fundsWallet];
    // Burn anything in our balances map
    balances[bonusWallet] = 0;
    balances[fundsWallet] = 0;
    Transfer(bonusWallet, 0, bonusLeft);
    Transfer(fundsWallet, 0, fundsLeft);
  }

  // Modifiers
  modifier isIcoOpen() {
    require(currentTime() >= startTime);
    require(currentTime() < endTime);
    _;
  }

  modifier isIcoClosed() {
    require(currentTime() >= endTime);
    _;
  }

  modifier timeRestrictedAccess() {
    require(currentTime() >= ausGroupReleaseDate);
    _;
  }

  modifier canAddToWhiteList() {
    require(msg.sender == whiteLister);
    _;
  }

  modifier isValidAusGroupTransfer(uint256 _value) {
    uint256 yearsAfterRelease = ((currentTime() - ausGroupReleaseDate) / numberOfMillisecsPerYear) + 1;
    uint256 cumulativeTotalAvailable = yearsAfterRelease * amountPerYearAvailableToAusGroup;
    require(cumulativeTotalAvailable > 0);
    uint256 amountAlreadyTransferred = ausGroupAllocation - balances[ausGroup];
    uint256 amountAvailable = cumulativeTotalAvailable - amountAlreadyTransferred;
    require(_value <= amountAvailable);
    _;
  }
}'.
	

]
