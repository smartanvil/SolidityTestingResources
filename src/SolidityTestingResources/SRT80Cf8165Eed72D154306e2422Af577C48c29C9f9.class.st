Class {
	#name : #SRT80Cf8165Eed72D154306e2422Af577C48c29C9f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80Cf8165Eed72D154306e2422Af577C48c29C9f9 >> base64 [
	^ ''.
	

]
