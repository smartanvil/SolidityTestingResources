Class {
	#name : #SRT95eefc5f6412701d86268752532cddf29f7c9234,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT95eefc5f6412701d86268752532cddf29f7c9234 >> base64 [
	^ ''.
	

]
