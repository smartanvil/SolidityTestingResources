Class {
	#name : #SRT3bb831e1ae1b9abacb2e9626994483e0b3759c1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3bb831e1ae1b9abacb2e9626994483e0b3759c1c >> base64 [
	^ ''.
	

]
