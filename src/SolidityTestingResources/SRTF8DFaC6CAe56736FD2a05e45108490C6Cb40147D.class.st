Class {
	#name : #SRTF8DFaC6CAe56736FD2a05e45108490C6Cb40147D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF8DFaC6CAe56736FD2a05e45108490C6Cb40147D >> base64 [
	^ ''.
	

]
