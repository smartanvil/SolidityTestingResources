Class {
	#name : #SRT4e9d3792ff24babf36b83c0c36113da6714917c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e9d3792ff24babf36b83c0c36113da6714917c6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgoKLy9pbXBvcnQgImdpdGh1Yi5jb20vb3JhY2xpemUvZXRoZXJldW0tYXBpL29yYWNsaXplQVBJLnNvbCI7Ci8vIDxPUkFDTElaRV9BUEk+Ci8qCkNvcHlyaWdodCAoYykgMjAxNS0yMDE2IE9yYWNsaXplIFNSTApDb3B5cmlnaHQgKGMpIDIwMTYgT3JhY2xpemUgTFRECgoKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKCgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOClRIRSBTT0ZUV0FSRS4KKi8KCi8vcGxlYXNlIGltcG9ydCBvcmFjbGl6ZUFQSV9wcmUwLjQuc29sIHdoZW4gc29saWRpdHkgPCAwLjQuMAoKY29udHJhY3QgT3JhY2xpemVJIHsKICAgIGFkZHJlc3MgcHVibGljIGNiQWRkcmVzczsKICAgIGZ1bmN0aW9uIHF1ZXJ5KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZykgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTIodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Ml93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeU4odWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tl93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBnZXRQcmljZShzdHJpbmcgX2RhdGFzb3VyY2UpIHJldHVybnMgKHVpbnQgX2RzcHJpY2UpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIHVzZUNvdXBvbihzdHJpbmcgX2NvdXBvbik7CiAgICBmdW5jdGlvbiBzZXRQcm9vZlR5cGUoYnl0ZSBfcHJvb2ZUeXBlKTsKICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpOwogICAgZnVuY3Rpb24gc2V0Q3VzdG9tR2FzUHJpY2UodWludCBfZ2FzUHJpY2UpOwogICAgZnVuY3Rpb24gcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKSByZXR1cm5zKGJ5dGVzMzIpOwp9CmNvbnRyYWN0IE9yYWNsaXplQWRkclJlc29sdmVySSB7CiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKCkgcmV0dXJucyAoYWRkcmVzcyBfYWRkcik7Cn0KY29udHJhY3QgdXNpbmdPcmFjbGl6ZSB7CiAgICB1aW50IGNvbnN0YW50IGRheSA9IDYwKjYwKjI0OwogICAgdWludCBjb25zdGFudCB3ZWVrID0gNjAqNjAqMjQqNzsKICAgIHVpbnQgY29uc3RhbnQgbW9udGggPSA2MCo2MCoyNCozMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05PTkUgPSAweDAwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfVExTTm90YXJ5ID0gMHgxMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX0FuZHJvaWQgPSAweDIwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTGVkZ2VyID0gMHgzMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05hdGl2ZSA9IDB4RjA7CiAgICBieXRlIGNvbnN0YW50IHByb29mU3RvcmFnZV9JUEZTID0gMHgwMTsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9hdXRvID0gMDsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tYWlubmV0ID0gMTsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF90ZXN0bmV0ID0gMjsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tb3JkZW4gPSAyOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2NvbnNlbnN5cyA9IDE2MTsKCiAgICBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgT0FSOwoKICAgIE9yYWNsaXplSSBvcmFjbGl6ZTsKICAgIG1vZGlmaWVyIG9yYWNsaXplQVBJIHsKICAgICAgICBpZigoYWRkcmVzcyhPQVIpPT0wKXx8KGdldENvZGVTaXplKGFkZHJlc3MoT0FSKSk9PTApKQogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrKG5ldHdvcmtJRF9hdXRvKTsKCiAgICAgICAgaWYoYWRkcmVzcyhvcmFjbGl6ZSkgIT0gT0FSLmdldEFkZHJlc3MoKSkKICAgICAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7CgogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBjb3Vwb24oc3RyaW5nIGNvZGUpewogICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOwogICAgICAgIG9yYWNsaXplLnVzZUNvdXBvbihjb2RlKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsodWludDggbmV0d29ya0lEKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpewogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApeyAvL21haW5uZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfbWFpbm5ldCIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk+MCl7IC8vcm9wc3RlbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX3JvcHN0ZW4zIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhCN0EwN0JjRjJCYTJmMjcwM2IyNEMwNjkxYjUyNzg5OTlDNTlBQzdlKT4wKXsgLy9rb3ZhbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX2tvdmFuIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKXsgLy9yaW5rZWJ5IHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MTQ2NTAwY2ZkMzVCMjJFNEEzOTJGZTBhRGMwNkRlMWExMzY4RWQ0OCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfcmlua2VieSIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk+MCl7IC8vZXRoZXJldW0tYnJpZGdlCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik+MCl7IC8vZXRoZXIuY2FtcCBpZGUKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg1MWVmYUY0YzhCM0M5QWZCRDVhQjlGNGJiQzgyNzg0QWI2ZWY4ZkFBKT4wKXsgLy9icm93c2VyLXNvbGlkaXR5CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0KSB7CiAgICAgICAgX19jYWxsYmFjayhteWlkLCByZXN1bHQsIG5ldyBieXRlcygwKSk7CiAgICB9CiAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgbXlpZCwgc3RyaW5nIHJlc3VsdCwgYnl0ZXMgcHJvb2YpIHsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV91c2VDb3Vwb24oc3RyaW5nIGNvZGUpIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZS51c2VDb3Vwb24oY29kZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0UHJpY2Uoc3RyaW5nIGRhdGFzb3VyY2UpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKHVpbnQpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShzdHJpbmcgZGF0YXNvdXJjZSwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAodWludCl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTIudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9jYkFkZHJlc3MoKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKXsKICAgICAgICByZXR1cm4gb3JhY2xpemUuY2JBZGRyZXNzKCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRQcm9vZihieXRlIHByb29mUCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldEN1c3RvbUdhc1ByaWNlKHVpbnQgZ2FzUHJpY2UpIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0Q3VzdG9tR2FzUHJpY2UoZ2FzUHJpY2UpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q29uZmlnKGJ5dGVzMzIgY29uZmlnKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldENvbmZpZyhjb25maWcpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnJhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29kZVNpemUoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyh1aW50IF9zaXplKSB7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBfc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYWRkcikKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VBZGRyKHN0cmluZyBfYSkgaW50ZXJuYWwgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHRtcCA9IGJ5dGVzKF9hKTsKICAgICAgICB1aW50MTYwIGlhZGRyID0gMDsKICAgICAgICB1aW50MTYwIGIxOwogICAgICAgIHVpbnQxNjAgYjI7CiAgICAgICAgZm9yICh1aW50IGk9MjsgaTwyKzIqMjA7IGkrPTIpewogICAgICAgICAgICBpYWRkciAqPSAyNTY7CiAgICAgICAgICAgIGIxID0gdWludDE2MCh0bXBbaV0pOwogICAgICAgICAgICBiMiA9IHVpbnQxNjAodG1wW2krMV0pOwogICAgICAgICAgICBpZiAoKGIxID49IDk3KSYmKGIxIDw9IDEwMikpIGIxIC09IDg3OwogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNjUpJiYoYjEgPD0gNzApKSBiMSAtPSA1NTsKICAgICAgICAgICAgZWxzZSBpZiAoKGIxID49IDQ4KSYmKGIxIDw9IDU3KSkgYjEgLT0gNDg7CiAgICAgICAgICAgIGlmICgoYjIgPj0gOTcpJiYoYjIgPD0gMTAyKSkgYjIgLT0gODc7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA2NSkmJihiMiA8PSA3MCkpIGIyIC09IDU1OwogICAgICAgICAgICBlbHNlIGlmICgoYjIgPj0gNDgpJiYoYjIgPD0gNTcpKSBiMiAtPSA0ODsKICAgICAgICAgICAgaWFkZHIgKz0gKGIxKjE2K2IyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoaWFkZHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbXBhcmUoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKGludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBhID0gYnl0ZXMoX2EpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gYS5sZW5ndGg7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgbWluTGVuZ3RoKSBtaW5MZW5ndGggPSBiLmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspCiAgICAgICAgICAgIGlmIChhW2ldIDwgYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pCiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UgaWYgKGEubGVuZ3RoID4gYi5sZW5ndGgpCiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gaW5kZXhPZihzdHJpbmcgX2hheXN0YWNrLCBzdHJpbmcgX25lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoaW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGggPSBieXRlcyhfaGF5c3RhY2spOwogICAgICAgIGJ5dGVzIG1lbW9yeSBuID0gYnl0ZXMoX25lZWRsZSk7CiAgICAgICAgaWYoaC5sZW5ndGggPCAxIHx8IG4ubGVuZ3RoIDwgMSB8fCAobi5sZW5ndGggPiBoLmxlbmd0aCkpCiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpCiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB1aW50IHN1YmluZGV4ID0gMDsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkgKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChoW2ldID09IG5bMF0pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXggPSAxOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKHN1YmluZGV4IDwgbi5sZW5ndGggJiYgKGkgKyBzdWJpbmRleCkgPCBoLmxlbmd0aCAmJiBoW2kgKyBzdWJpbmRleF0gPT0gbltzdWJpbmRleF0pCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihzdWJpbmRleCA9PSBuLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QsIHN0cmluZyBfZSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYSA9IGJ5dGVzKF9hKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmMgPSBieXRlcyhfYyk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iZCA9IGJ5dGVzKF9kKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOwogICAgICAgIHN0cmluZyBtZW1vcnkgYWJjZGUgPSBuZXcgc3RyaW5nKF9iYS5sZW5ndGggKyBfYmIubGVuZ3RoICsgX2JjLmxlbmd0aCArIF9iZC5sZW5ndGggKyBfYmUubGVuZ3RoKTsKICAgICAgICBieXRlcyBtZW1vcnkgYmFiY2RlID0gYnl0ZXMoYWJjZGUpOwogICAgICAgIHVpbnQgayA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2JhLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYVtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JiLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYltpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JkLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZFtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JlLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZVtpXTsKICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCBfZCwgIiIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsICIiLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7CiAgICB9CgogICAgLy8gcGFyc2VJbnQKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSkgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBwYXJzZUludChfYSwgMCk7CiAgICB9CgogICAgLy8gcGFyc2VJbnQocGFyc2VGbG9hdCoxMF5fYikKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSwgdWludCBfYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBicmVzdWx0ID0gYnl0ZXMoX2EpOwogICAgICAgIHVpbnQgbWludCA9IDA7CiAgICAgICAgYm9vbCBkZWNpbWFscyA9IGZhbHNlOwogICAgICAgIGZvciAodWludCBpPTA7IGk8YnJlc3VsdC5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIGlmICgoYnJlc3VsdFtpXSA+PSA0OCkmJihicmVzdWx0W2ldIDw9IDU3KSl7CiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHMpewogICAgICAgICAgICAgICAgICAgaWYgKF9iID09IDApIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGVsc2UgX2ItLTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1pbnQgKj0gMTA7CiAgICAgICAgICAgICAgICBtaW50ICs9IHVpbnQoYnJlc3VsdFtpXSkgLSA0ODsKICAgICAgICAgICAgfSBlbHNlIGlmIChicmVzdWx0W2ldID09IDQ2KSBkZWNpbWFscyA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChfYiA+IDApIG1pbnQgKj0gMTAqKl9iOwogICAgICAgIHJldHVybiBtaW50OwogICAgfQoKICAgIGZ1bmN0aW9uIHVpbnQyc3RyKHVpbnQgaSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKXsKICAgICAgICBpZiAoaSA9PSAwKSByZXR1cm4gIjAiOwogICAgICAgIHVpbnQgaiA9IGk7CiAgICAgICAgdWludCBsZW47CiAgICAgICAgd2hpbGUgKGogIT0gMCl7CiAgICAgICAgICAgIGxlbisrOwogICAgICAgICAgICBqIC89IDEwOwogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYnN0ciA9IG5ldyBieXRlcyhsZW4pOwogICAgICAgIHVpbnQgayA9IGxlbiAtIDE7CiAgICAgICAgd2hpbGUgKGkgIT0gMCl7CiAgICAgICAgICAgIGJzdHJbay0tXSA9IGJ5dGUoNDggKyBpICUgMTApOwogICAgICAgICAgICBpIC89IDEwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyaW5nKGJzdHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsKCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgICAgIGJ5dGVzW10gbWVtb3J5IGVsZW1BcnJheSA9IG5ldyBieXRlc1tdKGFycmxlbik7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRsZW4gKz0gZWxlbUFycmF5W2ldLmxlbmd0aCArIChlbGVtQXJyYXlbaV0ubGVuZ3RoIC0gMSkvMjMgKyAzOyAvLyszIGFjY291bnRzIGZvciBwYWlyZWQgaWRlbnRpZmllciB0eXBlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICAgICAgdWludCBjYm9ybGVuID0gYXJybGVuICsgMHg4MDsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOwogICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoCiAgICAgICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7CiAgICAgICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGNib3JsZW4pW2N0cl07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgZm9yICh1aW50IHggPSAwOyB4IDwgZWxlbUFycmF5W2ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGVsZW1jYm9ybGVuID0gZWxlbUFycmF5W2ldLmxlbmd0aCAtIHggPj0gMjQgPyAyMyA6IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4OwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChieXRlKGVsZW1jYm9ybGVuKS5sZW5ndGggPiBjdHIgLSBsY3RyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KCgogICAgc3RyaW5nIG9yYWNsaXplX25ldHdvcmtfbmFtZTsKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHN0cmluZyBfbmV0d29ya19uYW1lKSBpbnRlcm5hbCB7CiAgICAgICAgb3JhY2xpemVfbmV0d29ya19uYW1lID0gX25ldHdvcmtfbmFtZTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeSh1aW50IF9kZWxheSwgdWludCBfbmJ5dGVzLCB1aW50IF9jdXN0b21HYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgaWYgKChfbmJ5dGVzID09IDApfHwoX25ieXRlcyA+IDMyKSkgdGhyb3c7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsKICAgICAgICBuYnl0ZXNbMF0gPSBieXRlKF9uYnl0ZXMpOwogICAgICAgIGJ5dGVzIG1lbW9yeSB1bm9uY2UgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uS2V5SGFzaF9ieXRlczMyID0gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQodW5vbmNlLCAweDIwKSwgeG9yKGJsb2NraGFzaChzdWIobnVtYmVyLCAxKSksIHhvcihjb2luYmFzZSwgdGltZXN0YW1wKSkpCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpCiAgICAgICAgfQogICAgICAgIGJ5dGVzWzNdIG1lbW9yeSBhcmdzID0gW3Vub25jZSwgbmJ5dGVzLCBzZXNzaW9uS2V5SGFzaF07CiAgICAgICAgYnl0ZXMzMiBxdWVyeUlkID0gb3JhY2xpemVfcXVlcnkoX2RlbGF5LCAicmFuZG9tIiwgYXJncywgX2N1c3RvbUdhc0xpbWl0KTsKICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KHF1ZXJ5SWQsIHNoYTMoYnl0ZXM4KF9kZWxheSksIGFyZ3NbMV0sIHNoYTI1NihhcmdzWzBdKSwgYXJnc1syXSkpOwogICAgICAgIHJldHVybiBxdWVyeUlkOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQoYnl0ZXMzMiBxdWVyeUlkLCBieXRlczMyIGNvbW1pdG1lbnQpIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID0gY29tbWl0bWVudDsKICAgIH0KCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIG9yYWNsaXplX3JhbmRvbURTX2FyZ3M7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJvb2wpIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkOwoKICAgIGZ1bmN0aW9uIHZlcmlmeVNpZyhieXRlczMyIHRvc2lnbmgsIGJ5dGVzIGRlcnNpZywgYnl0ZXMgcHVia2V5KSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIGFkZHJlc3Mgc2lnbmVyOwoKICAgICAgICBieXRlczMyIHNpZ3I7CiAgICAgICAgYnl0ZXMzMiBzaWdzOwoKICAgICAgICBieXRlcyBtZW1vcnkgc2lncl8gPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIHVpbnQgb2Zmc2V0ID0gNCsodWludChkZXJzaWdbM10pIC0gMHgyMCk7CiAgICAgICAgc2lncl8gPSBjb3B5Qnl0ZXMoZGVyc2lnLCBvZmZzZXQsIDMyLCBzaWdyXywgMCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3NfID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBvZmZzZXQgKz0gMzIgKyAyOwogICAgICAgIHNpZ3NfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0Kyh1aW50KGRlcnNpZ1tvZmZzZXQtMV0pIC0gMHgyMCksIDMyLCBzaWdzXywgMCk7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgc2lnciA6PSBtbG9hZChhZGQoc2lncl8sIDMyKSkKICAgICAgICAgICAgc2lncyA6PSBtbG9hZChhZGQoc2lnc18sIDMyKSkKICAgICAgICB9CgoKICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjcsIHNpZ3IsIHNpZ3MpOwogICAgICAgIGlmIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKSByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI4LCBzaWdyLCBzaWdzKTsKICAgICAgICAgICAgcmV0dXJuIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShieXRlcyBwcm9vZiwgdWludCBzaWcyb2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzaWdvazsKCiAgICAgICAgLy8gU3RlcCA2OiB2ZXJpZnkgdGhlIGF0dGVzdGF0aW9uIHNpZ25hdHVyZSwgQVBQS0VZMSBtdXN0IHNpZ24gdGhlIHNlc3Npb25LZXkgZnJvbSB0aGUgY29ycmVjdCBsZWRnZXIgYXBwIChDT0RFSEFTSCkKICAgICAgICBieXRlcyBtZW1vcnkgc2lnMiA9IG5ldyBieXRlcyh1aW50KHByb29mW3NpZzJvZmZzZXQrMV0pKzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldCwgc2lnMi5sZW5ndGgsIHNpZzIsIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMiA9IG5ldyBieXRlcygxKzY1KzMyKTsKICAgICAgICB0b3NpZ24yWzBdID0gMTsgLy9yb2xlCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY1LCA2NSwgdG9zaWduMiwgMSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IENPREVIQVNIID0gaGV4ImZkOTRmYTcxYmMwYmExMGQzOWQ0NjRkMGQ4ZjQ2NWVmZWVmMGEyNzY0ZTM4ODdmY2M5ZGY0MWRlZDIwZjUwNWMiOwogICAgICAgIGNvcHlCeXRlcyhDT0RFSEFTSCwgMCwgMzIsIHRvc2lnbjIsIDErNjUpOwogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24yKSwgc2lnMiwgYXBwa2V5MV9wdWJrZXkpOwoKICAgICAgICBpZiAoc2lnb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNzogdmVyaWZ5IHRoZSBBUFBLRVkxIHByb3ZlbmFuY2UgKG11c3QgYmUgc2lnbmVkIGJ5IExlZGdlcikKICAgICAgICBieXRlcyBtZW1vcnkgTEVER0VSS0VZID0gaGV4IjdmYjk1NjQ2OWM1YzliODk4NDBkNTViNDM1MzdlNjZhOThkZDQ4MTFlYTBhMjcyMjQyNzJjMmU1NjIyOTExZTg1MzdhMmY4ZTg2YTQ2YmFlYzgyODY0ZTk4ZGQwMWU5Y2NjMmY4YmM1ZGZjOWNiZTVhOTFhMjkwNDk4ZGQ5NmU0IjsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRvc2lnbjMgPSBuZXcgYnl0ZXMoMSs2NSk7CiAgICAgICAgdG9zaWduM1swXSA9IDB4RkU7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzLCA2NSwgdG9zaWduMywgMSk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWczID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbMys2NSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7CgogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24zKSwgc2lnMywgTEVER0VSS0VZKTsKCiAgICAgICAgcmV0dXJuIHNpZ29rOwogICAgfQoKICAgIG1vZGlmaWVyIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5KGJ5dGVzMzIgX3F1ZXJ5SWQsIHN0cmluZyBfcmVzdWx0LCBieXRlcyBfcHJvb2YpIHsKICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQogICAgICAgIGlmICgoX3Byb29mWzBdICE9ICJMIil8fChfcHJvb2ZbMV0gIT0gIlAiKXx8KF9wcm9vZlsyXSAhPSAxKSkgdGhyb3c7CgogICAgICAgIGJvb2wgcHJvb2ZWZXJpZmllZCA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKF9wcm9vZiwgX3F1ZXJ5SWQsIGJ5dGVzKF9yZXN1bHQpLCBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpKTsKICAgICAgICBpZiAocHJvb2ZWZXJpZmllZCA9PSBmYWxzZSkgdGhyb3c7CgogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3JldHVybkNvZGUoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgaW50ZXJuYWwgcmV0dXJucyAodWludDgpewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSByZXR1cm4gMTsKCiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkpOwogICAgICAgIGlmIChwcm9vZlZlcmlmaWVkID09IGZhbHNlKSByZXR1cm4gMjsKCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gbWF0Y2hCeXRlczMyUHJlZml4KGJ5dGVzMzIgY29udGVudCwgYnl0ZXMgcHJlZml4LCB1aW50IG5fcmFuZG9tX2J5dGVzKSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIG1hdGNoXyA9IHRydWU7CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50MjU2IGk9MDsgaTwgbl9yYW5kb21fYnl0ZXM7IGkrKykgewogICAgICAgICAgICBpZiAoY29udGVudFtpXSAhPSBwcmVmaXhbaV0pIG1hdGNoXyA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG1hdGNoXzsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihieXRlcyBwcm9vZiwgYnl0ZXMzMiBxdWVyeUlkLCBieXRlcyByZXN1bHQsIHN0cmluZyBjb250ZXh0X25hbWUpIGludGVybmFsIHJldHVybnMgKGJvb2wpewoKICAgICAgICAvLyBTdGVwIDI6IHRoZSB1bmlxdWUga2V5aGFzaCBoYXMgdG8gbWF0Y2ggd2l0aCB0aGUgc2hhMjU2IG9mIChjb250ZXh0IG5hbWUgKyBxdWVyeUlkKQogICAgICAgIHVpbnQgbGVkZ2VyUHJvb2ZMZW5ndGggPSAzKzY1Kyh1aW50KHByb29mWzMrNjUrMV0pKzIpKzMyOwogICAgICAgIGJ5dGVzIG1lbW9yeSBrZXloYXNoID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoLCAzMiwga2V5aGFzaCwgMCk7CiAgICAgICAgaWYgKCEoc2hhMyhrZXloYXNoKSA9PSBzaGEzKHNoYTI1Nihjb250ZXh0X25hbWUsIHF1ZXJ5SWQpKSkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzEgPSBuZXcgYnl0ZXModWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOwoKICAgICAgICAvLyBTdGVwIDM6IHdlIGFzc3VtZSBzaWcxIGlzIHZhbGlkIChpdCB3aWxsIGJlIHZlcmlmaWVkIGR1cmluZyBzdGVwIDUpIGFuZCB3ZSB2ZXJpZnkgaWYgJ3Jlc3VsdCcgaXMgdGhlIHByZWZpeCBvZiBzaGEyNTYoc2lnMSkKICAgICAgICBpZiAoIW1hdGNoQnl0ZXMzMlByZWZpeChzaGEyNTYoc2lnMSksIHJlc3VsdCwgdWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCszMis4XSkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIFN0ZXAgNDogY29tbWl0bWVudCBtYXRjaCB2ZXJpZmljYXRpb24sIHNoYTMoZGVsYXksIG5ieXRlcywgdW5vbmNlLCBzZXNzaW9uS2V5SGFzaCkgPT0gY29tbWl0bWVudCBpbiBzdG9yYWdlLgogICAgICAgIC8vIFRoaXMgaXMgdG8gdmVyaWZ5IHRoYXQgdGhlIGNvbXB1dGVkIGFyZ3MgbWF0Y2ggd2l0aCB0aGUgb25lcyBzcGVjaWZpZWQgaW4gdGhlIHF1ZXJ5LgogICAgICAgIGJ5dGVzIG1lbW9yeSBjb21taXRtZW50U2xpY2UxID0gbmV3IGJ5dGVzKDgrMSszMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCszMiwgOCsxKzMyLCBjb21taXRtZW50U2xpY2UxLCAwKTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25QdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIHVpbnQgc2lnMm9mZnNldCA9IGxlZGdlclByb29mTGVuZ3RoKzMyKyg4KzErMzIpK3NpZzEubGVuZ3RoKzY1OwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldC02NCwgNjQsIHNlc3Npb25QdWJrZXksIDApOwoKICAgICAgICBieXRlczMyIHNlc3Npb25QdWJrZXlIYXNoID0gc2hhMjU2KHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID09IHNoYTMoY29tbWl0bWVudFNsaWNlMSwgc2Vzc2lvblB1YmtleUhhc2gpKXsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gKICAgICAgICAgICAgZGVsZXRlIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF07CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNTogdmFsaWRpdHkgdmVyaWZpY2F0aW9uIGZvciBzaWcxIChrZXloYXNoIGFuZCBhcmdzIHNpZ25lZCB3aXRoIHRoZSBzZXNzaW9uS2V5KQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24xID0gbmV3IGJ5dGVzKDMyKzgrMSszMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCwgMzIrOCsxKzMyLCB0b3NpZ24xLCAwKTsKICAgICAgICBpZiAoIXZlcmlmeVNpZyhzaGEyNTYodG9zaWduMSksIHNpZzEsIHNlc3Npb25QdWJrZXkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIHZlcmlmeSBpZiBzZXNzaW9uUHVia2V5SGFzaCB3YXMgdmVyaWZpZWQgYWxyZWFkeSwgaWYgbm90Li4gbGV0J3MgZG8gaXQhCiAgICAgICAgaWYgKG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9PSBmYWxzZSl7CiAgICAgICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkocHJvb2YsIHNpZzJvZmZzZXQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXTsKICAgIH0KCgogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UKICAgIGZ1bmN0aW9uIGNvcHlCeXRlcyhieXRlcyBmcm9tLCB1aW50IGZyb21PZmZzZXQsIHVpbnQgbGVuZ3RoLCBieXRlcyB0bywgdWludCB0b09mZnNldCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGxlbmd0aCArIHRvT2Zmc2V0OwoKICAgICAgICBpZiAodG8ubGVuZ3RoIDwgbWluTGVuZ3RoKSB7CiAgICAgICAgICAgIC8vIEJ1ZmZlciB0b28gc21hbGwKICAgICAgICAgICAgdGhyb3c7IC8vIFNob3VsZCBiZSBhIGJldHRlciB3YXk/CiAgICAgICAgfQoKICAgICAgICAvLyBOT1RFOiB0aGUgb2Zmc2V0IDMyIGlzIGFkZGVkIHRvIHNraXAgdGhlIGBzaXplYCBmaWVsZCBvZiBib3RoIGJ5dGVzIHZhcmlhYmxlcwogICAgICAgIHVpbnQgaSA9IDMyICsgZnJvbU9mZnNldDsKICAgICAgICB1aW50IGogPSAzMiArIHRvT2Zmc2V0OwoKICAgICAgICB3aGlsZSAoaSA8ICgzMiArIGZyb21PZmZzZXQgKyBsZW5ndGgpKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCB0bXAgOj0gbWxvYWQoYWRkKGZyb20sIGkpKQogICAgICAgICAgICAgICAgbXN0b3JlKGFkZCh0bywgaiksIHRtcCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDMyOwogICAgICAgICAgICBqICs9IDMyOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUKICAgIGZ1bmN0aW9uIHNhZmVyX2VjcmVjb3ZlcihieXRlczMyIGhhc2gsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQKICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzCiAgICAgICAgLy8gd3JpdGVzIGFyZSBtZW1vcnkgZXh0ZW5zaW9ucyksIGJ1dCBkb24ndCB1cGRhdGUgdGhlIG9mZnNldCBzbwogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcgogICAgICAgIC8vIHRoaXMgY29udGV4dC4KCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcwogICAgICAgIGJvb2wgcmV0OwogICAgICAgIGFkZHJlc3MgYWRkcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgc2l6ZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgNjQpLCByKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykKCiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiByZXVzZSB0aGUgcmVxdWVzdCBtZW1vcnkgYmVjYXVzZSB3ZSBkZWFsIHdpdGgKICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpCiAgICAgICAgICAgIGFkZHIgOj0gbWxvYWQoc2l6ZSkKICAgICAgICB9CgogICAgICAgIHJldHVybiAocmV0LCBhZGRyKTsKICAgIH0KCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgZnVuY3Rpb24gZWNyZWNvdmVyeShieXRlczMyIGhhc2gsIGJ5dGVzIHNpZykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgewogICAgICAgIGJ5dGVzMzIgcjsKICAgICAgICBieXRlczMyIHM7CiAgICAgICAgdWludDggdjsKCiAgICAgICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpCiAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsKCiAgICAgICAgLy8gVGhlIHNpZ25hdHVyZSBmb3JtYXQgaXMgYSBjb21wYWN0IGZvcm0gb2Y6CiAgICAgICAgLy8gICB7Ynl0ZXMzMiByfXtieXRlczMyIHN9e3VpbnQ4IHZ9CiAgICAgICAgLy8gQ29tcGFjdCBtZWFucywgdWludDggaXMgbm90IHBhZGRlZCB0byAzMiBieXRlcy4KICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZywgMzIpKQogICAgICAgICAgICBzIDo9IG1sb2FkKGFkZChzaWcsIDY0KSkKCiAgICAgICAgICAgIC8vIEhlcmUgd2UgYXJlIGxvYWRpbmcgdGhlIGxhc3QgMzIgYnl0ZXMuIFdlIGV4cGxvaXQgdGhlIGZhY3QgdGhhdAogICAgICAgICAgICAvLyAnbWxvYWQnIHdpbGwgcGFkIHdpdGggemVyb2VzIGlmIHdlIG92ZXJyZWFkLgogICAgICAgICAgICAvLyBUaGVyZSBpcyBubyAnbWxvYWQ4JyB0byBkbyB0aGlzLCBidXQgdGhhdCB3b3VsZCBiZSBuaWNlci4KICAgICAgICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWcsIDk2KSkpCgogICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBzb2x1dGlvbjoKICAgICAgICAgICAgLy8gJ2J5dGUnIGlzIG5vdCB3b3JraW5nIGR1ZSB0byB0aGUgU29saWRpdHkgcGFyc2VyLCBzbyBsZXRzCiAgICAgICAgICAgIC8vIHVzZSB0aGUgc2Vjb25kIGJlc3Qgb3B0aW9uLCAnYW5kJwogICAgICAgICAgICAvLyB2IDo9IGFuZChtbG9hZChhZGQoc2lnLCA2NSkpLCAyNTUpCiAgICAgICAgfQoKICAgICAgICAvLyBhbGJlaXQgbm9uLXRyYW5zYWN0aW9uYWwgc2lnbmF0dXJlcyBhcmUgbm90IHNwZWNpZmllZCBieSB0aGUgWVAsIG9uZSB3b3VsZCBleHBlY3QgaXQKICAgICAgICAvLyB0byBtYXRjaCB0aGUgWVAgcmFuZ2Ugb2YgWzI3LCAyOF0KICAgICAgICAvLwogICAgICAgIC8vIGdldGggdXNlcyBbMCwgMV0gYW5kIHNvbWUgY2xpZW50cyBoYXZlIGZvbGxvd2VkLiBUaGlzIG1pZ2h0IGNoYW5nZSwgc2VlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTMKICAgICAgICBpZiAodiA8IDI3KQogICAgICAgICAgdiArPSAyNzsKCiAgICAgICAgaWYgKHYgIT0gMjcgJiYgdiAhPSAyOCkKICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7CgogICAgICAgIHJldHVybiBzYWZlcl9lY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7CiAgICB9Cgp9Ci8vIDwvT1JBQ0xJWkVfQVBJPgoKCi8vaW1wb3J0ICJnaXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wiOwoKCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgQnVybmFibGUgVG9rZW4KICogQGRldiBUb2tlbiB0aGF0IGNhbiBiZSBpcnJldmVyc2libHkgYnVybmVkIChkZXN0cm95ZWQpLgogKi8KY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBCYXNpY1Rva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgYnVybmVkLgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KfQoKCgoKIC8qIEVSQzIyMyBhZGRpdGlvbnMgdG8gRVJDMjAgKi8KCgoKIC8qCiAgRVJDMjIzIGFkZGl0aW9ucyB0byBFUkMyMAoKICBJbnRlcmZhY2Ugd2lzZSBpcyBFUkMyMCArIGRhdGEgcGFyYW1lbnRlciB0byB0cmFuc2ZlciBhbmQgdHJhbnNmZXJGcm9tLgogKi8KCi8vaW1wb3J0ICJnaXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjAuc29sIjsKCgoKCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCmNvbnRyYWN0IEVSQzIyMyBpcyBFUkMyMCB7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkgcmV0dXJucyAoYm9vbCBvayk7CiAgCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSwgYnl0ZXMgaW5kZXhlZCBkYXRhKTsKfQoKCgovKgpCYXNlIGNsYXNzIGNvbnRyYWN0cyB3aWxsaW5nIHRvIGFjY2VwdCBFUkMyMjMgdG9rZW4gdHJhbnNmZXJzIG11c3QgY29uZm9ybSB0by4KClNlbmRlcjogbXNnLnNlbmRlciB0byB0aGUgdG9rZW4gY29udHJhY3QsIHRoZSBhZGRyZXNzIG9yaWdpbmF0aW5nIHRoZSB0b2tlbiB0cmFuc2Zlci4KICAgICAgICAgIC0gRm9yIHVzZXIgb3JpZ2luYXRlZCB0cmFuc2ZlcnMgc2VuZGVyIHdpbGwgYmUgZXF1YWwgdG8gdHgub3JpZ2luCiAgICAgICAgICAtIEZvciBjb250cmFjdCBvcmlnaW5hdGVkIHRyYW5zZmVycywgdHgub3JpZ2luIHdpbGwgYmUgdGhlIHVzZXIgdGhhdCBtYWRlIHRoZSB0eCB0aGF0IHByb2R1Y2VkIHRoZSB0cmFuc2Zlci4KT3JpZ2luOiB0aGUgb3JpZ2luIGFkZHJlc3MgZnJvbSB3aG9zZSBiYWxhbmNlIHRoZSB0b2tlbnMgYXJlIHNlbnQKICAgICAgICAgIC0gRm9yIHRyYW5zZmVyKCksIG9yaWdpbiA9IG1zZy5zZW5kZXIKICAgICAgICAgIC0gRm9yIHRyYW5zZmVyRnJvbSgpIG9yaWdpbiA9IF9mcm9tIHRvIHRva2VuIGNvbnRyYWN0ClZhbHVlIGlzIHRoZSBhbW91bnQgb2YgdG9rZW5zIHNlbnQKRGF0YSBpcyBhcmJpdHJhcnkgZGF0YSBzZW50IHdpdGggdGhlIHRva2VuIHRyYW5zZmVyLiBTaW11bGF0ZXMgZXRoZXIgdHguZGF0YQoKRnJvbSwgb3JpZ2luIGFuZCB2YWx1ZSBzaG91bGRuJ3QgYmUgdHJ1c3RlZCB1bmxlc3MgdGhlIHRva2VuIGNvbnRyYWN0IGlzIHRydXN0ZWQuCklmIHNlbmRlciA9PSB0eC5vcmlnaW4sIGl0IGlzIHNhZmUgdG8gdHJ1c3QgaXQgcmVnYXJkbGVzcyBvZiB0aGUgdG9rZW4uCiovCgpjb250cmFjdCBFUkMyMjNSZWNlaXZlciB7CiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpOwp9CgoKLy9pbXBvcnQgImdpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9TdGFuZGFyZFRva2VuLnNvbCI7CgoKCgoKCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICoKICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiBJbmNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCmNvbnRyYWN0IFN0YW5kYXJkMjIzVG9rZW4gaXMgRVJDMjIzLCBTdGFuZGFyZFRva2VuIHsKICAvL2Z1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB1c2VyIG9yIGFub3RoZXIgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIC8vZmlsdGVyaW5nIGlmIHRoZSB0YXJnZXQgaXMgYSBjb250cmFjdCB3aXRoIGJ5dGVjb2RlIGluc2lkZSBpdAogICAgaWYgKCFzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSkpIHRocm93OyAvLyBkbyBhIG5vcm1hbCB0b2tlbiB0cmFuc2ZlcgogICAgaWYgKGlzQ29udHJhY3QoX3RvKSkgY29udHJhY3RGYWxsYmFjayhtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoIXN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpKSB0aHJvdzsgLy8gZG8gYSBub3JtYWwgdG9rZW4gdHJhbnNmZXIKICAgIGlmIChpc0NvbnRyYWN0KF90bykpIGNvbnRyYWN0RmFsbGJhY2soX2Zyb20sIF90bywgX3ZhbHVlLCBfZGF0YSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUsIF9kYXRhKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJldHVybiB0cmFuc2ZlcihfdG8sIF92YWx1ZSwgbmV3IGJ5dGVzKDApKTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmV0dXJuIHRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUsIG5ldyBieXRlcygwKSk7CiAgfQoKICAvL2Z1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdHJhbnNhY3Rpb24gdGFyZ2V0IGlzIGEgY29udHJhY3QKICBmdW5jdGlvbiBjb250cmFjdEZhbGxiYWNrKGFkZHJlc3MgX29yaWdpbiwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHJpdmF0ZSB7CiAgICBFUkMyMjNSZWNlaXZlciByZWNpZXZlciA9IEVSQzIyM1JlY2VpdmVyKF90byk7CiAgICByZWNpZXZlci50b2tlbkZhbGxiYWNrKF9vcmlnaW4sIF92YWx1ZSwgX2RhdGEpOwogIH0KCiAgLy9hc3NlbWJsZSB0aGUgZ2l2ZW4gYWRkcmVzcyBieXRlY29kZS4gSWYgYnl0ZWNvZGUgZXhpc3RzIHRoZW4gdGhlIF9hZGRyIGlzIGEgY29udHJhY3QuCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBwcml2YXRlIHJldHVybnMgKGJvb2wgaXNfY29udHJhY3QpIHsKICAgIC8vIHJldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5CiAgICB1aW50IGxlbmd0aDsKICAgIGFzc2VtYmx5IHsgbGVuZ3RoIDo9IGV4dGNvZGVzaXplKF9hZGRyKSB9CiAgICByZXR1cm4gbGVuZ3RoID4gMDsKICB9Cn0KCi8qKgogKiBAdGl0bGUgUmVmdW5kVmF1bHQKICogQGRldiBUaGlzIGNvbnRyYWN0IGlzIHVzZWQgZm9yIHN0b3JpbmcgZnVuZHMgd2hpbGUgYSBjcm93ZHNhbGUKICogaXMgaW4gcHJvZ3Jlc3MuIFN1cHBvcnRzIHJlZnVuZGluZyB0aGUgbW9uZXkgaWYgY3Jvd2RzYWxlIGZhaWxzLAogKiBhbmQgZm9yd2FyZGluZyBpdCBpZiBjcm93ZHNhbGUgaXMgc3VjY2Vzc2Z1bC4KICovCmNvbnRyYWN0IFJlZnVuZFZhdWx0IHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgZW51bSBTdGF0ZSB7IEFjdGl2ZSwgUmVmdW5kaW5nLCBSZWxlYXNlZH0KCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdmF1bHRfZGVwb3NpdGVkOwogIGFkZHJlc3MgcHVibGljIHZhdWx0X3dhbGxldDsKICBTdGF0ZSBwdWJsaWMgdmF1bHRfc3RhdGU7CiAgdWludDI1NiB0b3RhbERlcG9zaXRlZCA9IDA7CiAgdWludDI1NiBwdWJsaWMgcmVmdW5kRGVhZGxpbmU7CgogIGV2ZW50IERlcG9zaXRSZWxlYXNlZCgpOwogIGV2ZW50IFJlZnVuZHNFbmFibGVkKCk7CiAgZXZlbnQgUmVmdW5kc0Rpc2FibGVkKCk7CiAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHdlaUFtb3VudCk7CgogIGZ1bmN0aW9uIFJlZnVuZFZhdWx0KCkgcHVibGljIHsKICAgIHZhdWx0X3N0YXRlID0gU3RhdGUuQWN0aXZlOwogIH0KCiAgZnVuY3Rpb24gdmF1bHRfZGVwb3NpdChhZGRyZXNzIGludmVzdG9yLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewogICAgcmVxdWlyZSh2YXVsdF9zdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgdmF1bHRfZGVwb3NpdGVkW2ludmVzdG9yXSA9IHZhdWx0X2RlcG9zaXRlZFtpbnZlc3Rvcl0uYWRkKF92YWx1ZSk7CiAgICB0b3RhbERlcG9zaXRlZCA9IHRvdGFsRGVwb3NpdGVkLmFkZChfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdmF1bHRfcmVsZWFzZURlcG9zaXQoKSBpbnRlcm5hbCB7CiAgICB2YXVsdF9zdGF0ZSA9IFN0YXRlLlJlbGVhc2VkOwogICAgRGVwb3NpdFJlbGVhc2VkKCk7CiAgICBpZiAodG90YWxEZXBvc2l0ZWQgPiAwKSB7dmF1bHRfd2FsbGV0LnRyYW5zZmVyKHRvdGFsRGVwb3NpdGVkKTt9CiAgICB0b3RhbERlcG9zaXRlZCA9IDA7CiAgfQoKICBmdW5jdGlvbiB2YXVsdF9lbmFibGVSZWZ1bmRzKCkgaW50ZXJuYWwgewogICAgcmVxdWlyZSh2YXVsdF9zdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgcmVmdW5kRGVhZGxpbmUgPSBub3cgKyAxODAgZGF5czsKICAgIHZhdWx0X3N0YXRlID0gU3RhdGUuUmVmdW5kaW5nOwogICAgUmVmdW5kc0VuYWJsZWQoKTsKICB9CgogIGZ1bmN0aW9uIHZhdWx0X3JlZnVuZChhZGRyZXNzIGludmVzdG9yKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKHZhdWx0X3N0YXRlID09IFN0YXRlLlJlZnVuZGluZyk7CiAgICB1aW50MjU2IGRlcG9zaXRlZFZhbHVlID0gdmF1bHRfZGVwb3NpdGVkW2ludmVzdG9yXTsKICAgIHZhdWx0X2RlcG9zaXRlZFtpbnZlc3Rvcl0gPSAwOwogICAgaW52ZXN0b3IudHJhbnNmZXIoZGVwb3NpdGVkVmFsdWUpOwogICAgUmVmdW5kZWQoaW52ZXN0b3IsIGRlcG9zaXRlZFZhbHVlKTsKICAgIHRvdGFsRGVwb3NpdGVkID0gdG90YWxEZXBvc2l0ZWQuc3ViKGRlcG9zaXRlZFZhbHVlKTsKICB9Cn0KCi8vIEBkZXYgVExDIFRva2VuIFNhbGUgKElDTykKCmNvbnRyYWN0IFRMQyBpcyB1c2luZ09yYWNsaXplLCBPd25hYmxlLCBSZWZ1bmRWYXVsdCwgQnVybmFibGVUb2tlbiwgU3RhbmRhcmQyMjNUb2tlbgp7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiVHJpbGxDb2luIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlRMQyI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFQ0lNQUxTX01VTFRJUExJRVIgPSAxMCoqdWludChkZWNpbWFscyk7CiAgICAKICAgIHVpbnQgcHVibGljIElDT3N0YXJ0dGltZSA9IDE1MTkwNDg4MDA7ICAvLyAoR01UKTogTW9uZGF5LCBGZWJydWFyeSAxOSwgMjAxOCAyOjAwOjAwIFBNICAgICAgICAgIAogICAgdWludCBwdWJsaWMgSUNPZW5kdGltZSA9IDE1MjE0NjQ0MDA7ICAgIC8vIChHTVQpOiBNb25kYXksIE1hcmNoIDE5LCAyMDE4IDE6MDA6MDAgUE0gICAgICAKICAgIAogICAgdWludCBwdWJsaWMgbWluaW11bUludmVzdG1lbnRJbldlaSA9IERFQ0lNQUxTX01VTFRJUExJRVIgLyA1MDsgLy8gLjAyIEVUSCBNSU4KICAgIHVpbnQgcHVibGljIG1heGltdW1JbnZlc3RtZW50SW5XZWkgPSAxMDAgKiAxIGV0aGVyOyAgICAgICAgICAgIC8vIDEwMCBFVEggTUFYCiAgICBhZGRyZXNzIHNhbGVXYWxsZXRBZGRyZXNzOwoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHNvZnRjYXBJblRva2VucyA9IDIwMDAwMDAgKiBERUNJTUFMU19NVUxUSVBMSUVSOyAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGhhcmRjYXBJblRva2VucyA9IDQwMDAwMDAwMCAqIERFQ0lNQUxTX01VTFRJUExJRVI7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsdG9rZW5zb2xkID0gMDsKICAgIAogICAgdWludCBwdWJsaWMgVVNERVRIID0gOTI1OwogICAgdWludCBOdW1iZXJPZlRva2Vuc0luMVVTRCA9IDIwOwogICAgCiAgICAvL1JlZnVuZFZhdWx0IHB1YmxpYyB2YXVsdDsKICAgIGJvb2wgcHVibGljIGlzRmluYWxpemVkID0gZmFsc2U7CiAgICBldmVudCBGaW5hbGl6ZWQoKTsKICAgIAogICAgZXZlbnQgbmV3T3JhY2xpemVRdWVyeShzdHJpbmcgZGVzY3JpcHRpb24pOwogICAgZXZlbnQgbmV3RVRIVVNEUHJpY2Uoc3RyaW5nIHByaWNlKTsKICAgIAogICAgZnVuY3Rpb24gaW5jcmVhc2VTdXBwbHkodWludCB2YWx1ZSwgYWRkcmVzcyB0bykgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKDAsIHRvLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIAogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoMCAhPSBfdmFsdWUpOwogICAgICAgIAogICAgICAgIHN1cGVyLmJ1cm4oX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCAwLCBfdmFsdWUpOwogICAgfQogICAgCgogICAgCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHVpbnQyNTYgbG9jYWxPd25lckJhbGFuY2UgPSBiYWxhbmNlc1tvd25lcl07CiAgICAgICAgYmFsYW5jZXNbbmV3T3duZXJdID0gYmFsYW5jZXNbbmV3T3duZXJdLmFkZChsb2NhbE93bmVyQmFsYW5jZSk7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gMDsKICAgICAgICB2YXVsdF93YWxsZXQgPSBuZXdPd25lcjsKICAgICAgICBUcmFuc2Zlcihvd25lciwgbmV3T3duZXIsIGxvY2FsT3duZXJCYWxhbmNlKTsKICAgICAgICBzdXBlci50cmFuc2Zlck93bmVyc2hpcChuZXdPd25lcik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKCFpc0ZpbmFsaXplZCk7CiAgICAgICAgcmVxdWlyZShJQ09lbmR0aW1lIDwgbm93KTsKICAgICAgICBmaW5hbGl6YXRpb24oKTsKICAgICAgICBGaW5hbGl6ZWQoKTsKICAgICAgICBpc0ZpbmFsaXplZCA9IHRydWU7CiAgICB9CiAgCiAgICBmdW5jdGlvbiBkZXBvc2l0RnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgdmF1bHRfZGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUgKiA5NSAvIDEwMCk7CiAgICB9CiAgICAKICAgIC8vIGlmIGNyb3dkc2FsZSBpcyB1bnN1Y2Nlc3NmdWwsIGludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kcyBoZXJlCiAgICBmdW5jdGlvbiBjbGFpbVJlZnVuZCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShpc0ZpbmFsaXplZCk7CiAgICAgICAgcmVxdWlyZSghZ29hbFJlYWNoZWQoKSk7CiAgICAgICAgCiAgICAgICAgdWludDI1NiByZWZ1bmRlZFRva2VucyA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IGJhbGFuY2VzW293bmVyXS5hZGQocmVmdW5kZWRUb2tlbnMpOwogICAgICAgIHRvdGFsdG9rZW5zb2xkID0gdG90YWx0b2tlbnNvbGQuc3ViKHJlZnVuZGVkVG9rZW5zKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgb3duZXIsIHJlZnVuZGVkVG9rZW5zKTsKICAgICAgICAKICAgICAgICB2YXVsdF9yZWZ1bmQobXNnLnNlbmRlcik7CiAgICB9CiAgICAKICAgIC8vIHZhdWx0IGZpbmFsaXphdGlvbiB0YXNrLCBjYWxsZWQgd2hlbiBvd25lciBjYWxscyBmaW5hbGl6ZSgpCiAgICBmdW5jdGlvbiBmaW5hbGl6YXRpb24oKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKGdvYWxSZWFjaGVkKCkpIHsKICAgICAgICAgICAgdmF1bHRfcmVsZWFzZURlcG9zaXQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXVsdF9lbmFibGVSZWZ1bmRzKCk7CiAgICAgICAgICAgIAogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVsZWFzZVVuY2xhaW1lZEZ1bmRzKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSh2YXVsdF9zdGF0ZSA9PSBTdGF0ZS5SZWZ1bmRpbmcgJiYgbm93ID49IHJlZnVuZERlYWRsaW5lKTsKICAgICAgICB2YXVsdF9yZWxlYXNlRGVwb3NpdCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdvYWxSZWFjaGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b3RhbHRva2Vuc29sZCA+PSBzb2Z0Y2FwSW5Ub2tlbnM7CiAgICB9ICAgIAogICAgCiAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgbXlpZCwgc3RyaW5nIHJlc3VsdCkgewogICAgICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3JhY2xpemVfY2JBZGRyZXNzKCkpOwoKICAgICAgICBuZXdFVEhVU0RQcmljZShyZXN1bHQpOwoKICAgICAgICBVU0RFVEggPSBwYXJzZUludChyZXN1bHQsIDApOwogICAgICAgIGlmICgobm93IDwgSUNPZW5kdGltZSkgJiYgKHRvdGFsdG9rZW5zb2xkIDwgaGFyZGNhcEluVG9rZW5zKSkKICAgICAgICB7CiAgICAgICAgICAgIFVwZGF0ZVVTREVUSFByaWNlQWZ0ZXIoZGF5KTsgLy91cGRhdGUgZXZlcnkgMjQgaG91cnMKICAgICAgICB9CiAgICAgICAgCiAgICB9CiAgICAKCiAgZnVuY3Rpb24gVXBkYXRlVVNERVRIUHJpY2VBZnRlciAodWludCBkZWxheSkgcHJpdmF0ZSB7CiAgICAgIAogICAgbmV3T3JhY2xpemVRdWVyeSgiVXBkYXRlIG9mIFVTRC9FVEggcHJpY2UgcmVxdWVzdGVkIik7CiAgICBvcmFjbGl6ZV9xdWVyeShkZWxheSwgIlVSTCIsICJqc29uKGh0dHBzOi8vYXBpLmV0aGVyc2Nhbi5pby9hcGk/bW9kdWxlPXN0YXRzJmFjdGlvbj1ldGhwcmljZSZhcGlrZXk9WW91ckFwaUtleVRva2VuKS5yZXN1bHQuZXRodXNkIik7CiAgICAgICAKICB9CgoKICAKCiAgZnVuY3Rpb24gVExDKCkgcHVibGljIHBheWFibGUgewogICAgICB0b3RhbFN1cHBseSA9IDUwMDAwMDAwMCAqIERFQ0lNQUxTX01VTFRJUExJRVI7CiAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OwogICAgICB2YXVsdF93YWxsZXQgPSBvd25lcjsKICAgICAgVHJhbnNmZXIoMHgwLCBvd25lciwgdG90YWxTdXBwbHkpOwogICAgICBpbml0aWFsaXplU2FsZVdhbGxldEFkZHJlc3MoKTsKICAgICAgVXBkYXRlVVNERVRIUHJpY2VBZnRlcigwKTsKICB9CiAgCiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVNhbGVXYWxsZXRBZGRyZXNzKCkgcHJpdmF0ZSB7CiAgICAgIHNhbGVXYWxsZXRBZGRyZXNzID0gMHgzRWVjMjBBMDVDMzU4NjhmYTFFMjQ5OUZlNTU5NGVGMGFiMDRiMDNmOwogICAgICAKICB9CiAgCgoKICAKCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgYnV5KCk7CiAgICAgICB9CiAgfQogIAogIGZ1bmN0aW9uIElDT2FjdGl2ZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoSUNPc3RhcnR0aW1lIDwgbm93ICYmIG5vdyA8IElDT2VuZHRpbWUgJiYgdG90YWx0b2tlbnNvbGQgPCBoYXJkY2FwSW5Ub2tlbnMpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIAogICAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKCiAgICAgIAoKICAgICAgcmVxdWlyZSAobXNnLnZhbHVlID49IG1pbmltdW1JbnZlc3RtZW50SW5XZWkgJiYgbXNnLnZhbHVlIDw9IG1heGltdW1JbnZlc3RtZW50SW5XZWkpOwoKICAgICAgcmVxdWlyZSAoSUNPYWN0aXZlKCkpOwogICAgICAKICAgICAgdWludDI1NiBOdW1iZXJPZlRva2Vuc1RvR2l2ZSA9IG1zZy52YWx1ZS5tdWwoVVNERVRIKS5tdWwoTnVtYmVyT2ZUb2tlbnNJbjFVU0QpOwogICAgIAoKICAgICAgCiAgICAgIGlmKG5vdyA8PSBJQ09zdGFydHRpbWUgKyB3ZWVrKSB7CiAgICAgICAgICAKICAgICAgICAgIE51bWJlck9mVG9rZW5zVG9HaXZlID0gTnVtYmVyT2ZUb2tlbnNUb0dpdmUubXVsKDEyNSkuZGl2KDEwMCk7CiAgICAgICAgICAKICAgICAgfSBlbHNlewogICAgICAgICAgTnVtYmVyT2ZUb2tlbnNUb0dpdmUgPSBOdW1iZXJPZlRva2Vuc1RvR2l2ZTsKICAgICAgfQogICAgICAKICAgICAgdWludDI1NiBsb2NhbFRvdGFsdG9rZW5zb2xkID0gdG90YWx0b2tlbnNvbGQ7CiAgICAgIHJlcXVpcmUobG9jYWxUb3RhbHRva2Vuc29sZCArIE51bWJlck9mVG9rZW5zVG9HaXZlIDw9IGhhcmRjYXBJblRva2Vucyk7CiAgICAgIHRvdGFsdG9rZW5zb2xkID0gbG9jYWxUb3RhbHRva2Vuc29sZC5hZGQoTnVtYmVyT2ZUb2tlbnNUb0dpdmUpOwogICAgICAKICAgICAgYWRkcmVzcyBsb2NhbE93bmVyID0gb3duZXI7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKE51bWJlck9mVG9rZW5zVG9HaXZlKTsKICAgICAgYmFsYW5jZXNbbG9jYWxPd25lcl0gPSBiYWxhbmNlc1tsb2NhbE93bmVyXS5zdWIoTnVtYmVyT2ZUb2tlbnNUb0dpdmUpOwogICAgICBUcmFuc2Zlcihsb2NhbE93bmVyLCBtc2cuc2VuZGVyLCBOdW1iZXJPZlRva2Vuc1RvR2l2ZSk7CiAgICAgIAogICAgICBzYWxlV2FsbGV0QWRkcmVzcy50cmFuc2Zlcihtc2cudmFsdWUgLSBtc2cudmFsdWUgKiA5NSAvIDEwMCk7CiAgICAgIAogICAgICBpZighZ29hbFJlYWNoZWQoKSAmJiAoUmVmdW5kVmF1bHQuU3RhdGUuQWN0aXZlID09IHZhdWx0X3N0YXRlKSkKICAgICAgewogICAgICAgICAgZGVwb3NpdEZ1bmRzKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZihSZWZ1bmRWYXVsdC5TdGF0ZS5BY3RpdmUgPT0gdmF1bHRfc3RhdGUpIHt2YXVsdF9yZWxlYXNlRGVwb3NpdCgpO30KICAgICAgICAgIGxvY2FsT3duZXIudHJhbnNmZXIobXNnLnZhbHVlICogOTUgLyAxMDApOwogICAgICB9CiAgfQogIAp9'.
	

]
