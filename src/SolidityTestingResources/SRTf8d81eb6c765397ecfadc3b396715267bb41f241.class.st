Class {
	#name : #SRTf8d81eb6c765397ecfadc3b396715267bb41f241,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8d81eb6c765397ecfadc3b396715267bb41f241 >> base64 [
	^ ''.
	

]
