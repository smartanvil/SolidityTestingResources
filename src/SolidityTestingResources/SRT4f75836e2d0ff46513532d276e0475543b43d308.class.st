Class {
	#name : #SRT4f75836e2d0ff46513532d276e0475543b43d308,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f75836e2d0ff46513532d276e0475543b43d308 >> base64 [
	^ ''.
	

]
