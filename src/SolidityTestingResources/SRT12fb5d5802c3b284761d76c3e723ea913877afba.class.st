Class {
	#name : #SRT12fb5d5802c3b284761d76c3e723ea913877afba,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT12fb5d5802c3b284761d76c3e723ea913877afba >> base64 [
	^ ''.
	

]
