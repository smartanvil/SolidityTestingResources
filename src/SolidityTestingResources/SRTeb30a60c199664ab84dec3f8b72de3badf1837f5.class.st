Class {
	#name : #SRTeb30a60c199664ab84dec3f8b72de3badf1837f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb30a60c199664ab84dec3f8b72de3badf1837f5 >> base64 [
	^ ''.
	

]
