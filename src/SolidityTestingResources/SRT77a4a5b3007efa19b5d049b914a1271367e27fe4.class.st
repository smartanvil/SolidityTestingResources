Class {
	#name : #SRT77a4a5b3007efa19b5d049b914a1271367e27fe4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT77a4a5b3007efa19b5d049b914a1271367e27fe4 >> base64 [
	^ ''.
	

]
