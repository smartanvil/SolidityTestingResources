Class {
	#name : #SRT4f38f4229924bfa28d58eeda496cc85e8016bccc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f38f4229924bfa28d58eeda496cc85e8016bccc >> base64 [
	^ ''.
	

]
