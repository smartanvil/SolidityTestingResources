Class {
	#name : #SRTF73c97245B3bE2559d01343bFFAa3e3a69F6dD3b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF73c97245B3bE2559d01343bFFAa3e3a69F6dD3b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7Cgpjb250cmFjdCBJdGVtTWFya2V0ewoJYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoJLy8gNTAwIC8gMTAwMDAgPSA1JQoJdWludDE2IHB1YmxpYyBkZXZGZWUgPSA1MDA7Cgl1aW50MjU2IHB1YmxpYyBJdGVtQ3JlYXRlUHJpY2UgPSAwLjAyIGV0aGVyOwoKCWV2ZW50IEl0ZW1DcmVhdGVkKHVpbnQyNTYgaWQpOwoJZXZlbnQgSXRlbUJvdWdodCh1aW50MjU2IGlkKTsKCWV2ZW50IEl0ZW1Xb24odWludDI1NiBpZCk7CgoJc3RydWN0IEl0ZW17CgkJdWludDMyIHRpbWVyOwoJCXVpbnQyNTYgdGltZXN0YW1wOwoJCXVpbnQxNiBwcmljZUluY3JlYXNlOwoJCXVpbnQyNTYgcHJpY2U7CgkJdWludDI1NiBhbW91bnQ7CgkJdWludDI1NiBtaW5QcmljZTsKCQl1aW50MTYgY3JlYXRvckZlZTsKCQl1aW50MTYgcHJldmlvdXNGZWU7CgkJdWludDE2IHBvdEZlZTsKCgkJYWRkcmVzcyBjcmVhdG9yOwoJCWFkZHJlc3Mgb3duZXI7CgkJc3RyaW5nIHF1b3RlOwoJCXN0cmluZyBuYW1lOwoJfSAKCgltYXBwaW5nICh1aW50MjU2ID0+IEl0ZW0pIHB1YmxpYyBJdGVtczsKCgl1aW50MjU2IHB1YmxpYyBuZXh0X2l0ZW1faW5kZXggPSAwOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKXsKICAgICAgICAgICAgXzsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIEl0ZW1NYXJrZXQoKSBwdWJsaWN7CiAgICAJb3duZXIgPSBtc2cuc2VuZGVyOwogICAgCS8vIEFkZCBpdGVtcyAKCiAgICAJQWRkSXRlbSg2MDAsIDE1MDAsIDEgZmlubmV5LCAwLCAzMDAwLCAiQmF0dGVyeSIpOwoKCiAgICAJQWRkSXRlbSg2MDAsIDE1MCwgNCBmaW5uZXksIDAsIDUwMDAsICJUd2lnIik7CgogICAgCUFkZEl0ZW0oMzYwMCwgMjAwMCwgMTAgZmlubmV5LCAwLCA0MDAwLCAiU29sYXIgUGFuZWwiKTsKICAgIAlBZGRJdGVtKDM2MDAqMjQsIDUwMDAsIDEwIGZpbm5leSwgMCwgNTAwMCwgIk1vb24iKTsKICAgIAlBZGRJdGVtKDM2MDAqMjQqNywgNzUwMCwgNTAgZmlubmV5LCAwLCA3MDAwLCAiRXRoZXJldW0iKTsKCiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlRmVlKHVpbnQxNiBfZmVlKSBwdWJsaWMgb25seU93bmVyewogICAgCXJlcXVpcmUoX2ZlZSA8PSA1MDApOwogICAgCWRldkZlZSA9IF9mZWU7CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlSXRlbVByaWNlKHVpbnQyNTYgX25ld1ByaWNlKSBwdWJsaWMgb25seU93bmVyewogICAgCUl0ZW1DcmVhdGVQcmljZSA9IF9uZXdQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBBZGRJdGVtKHVpbnQzMiB0aW1lciwgdWludDE2IHByaWNlSW5jcmVhc2UsIHVpbnQyNTYgbWluUHJpY2UsIHVpbnQxNiBjcmVhdG9yRmVlLCB1aW50MTYgcG90RmVlLCBzdHJpbmcgbmFtZSkgcHVibGljIHBheWFibGUgewogICAgCXJlcXVpcmUgKHRpbWVyID49IDMwMCk7CiAgICAJcmVxdWlyZSAodGltZXIgPCAzMTYyMjQwMCk7CgogICAgCXJlcXVpcmUocHJpY2VJbmNyZWFzZSA8PSAxMDAwMCk7CiAgICAJcmVxdWlyZShtaW5QcmljZSA+PSAoMSBmaW5uZXkpICYmIG1pblByaWNlIDw9ICgxIGV0aGVyKSk7CiAgICAJcmVxdWlyZShjcmVhdG9yRmVlIDw9IDI1MDApOwogICAgCXJlcXVpcmUocG90RmVlIDw9IDEwMDAwKTsKICAgIAlyZXF1aXJlKGFkZChhZGQoY3JlYXRvckZlZSwgcG90RmVlKSwgZGV2RmVlKSA8PSAxMDAwMCk7CgoKCiAgICAJaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpewogICAgCQlyZXF1aXJlKGNyZWF0b3JGZWUgPT0gMCk7CiAgICAJCWlmIChtc2cudmFsdWUgPiAwKXsKICAgIAkJCW93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAJCX0KICAgIAl9CiAgICAJZWxzZXsKICAgIAkJdWludDI1NiBsZWZ0ID0gMDsKICAgIAkJaWYgKG1zZy52YWx1ZSA+IEl0ZW1DcmVhdGVQcmljZSl7CiAgICAJCQlsZWZ0ID0gc3ViKG1zZy52YWx1ZSwgSXRlbUNyZWF0ZVByaWNlKTsKICAgIAkJCW1zZy5zZW5kZXIudHJhbnNmZXIobGVmdCk7CiAgICAJCX0KICAgIAkJZWxzZXsKICAgIAkJCWlmIChtc2cudmFsdWUgPCBJdGVtQ3JlYXRlUHJpY2UpewoKICAgIAkJCQlyZXZlcnQoKTsKICAgIAkJCX0KICAgIAkJfQoKICAgIAkJb3duZXIudHJhbnNmZXIoc3ViKG1zZy52YWx1ZSwgbGVmdCkpOwogICAgCX0KCgogICAgICAgIHJlcXVpcmUgKGRldkZlZSArIHBvdEZlZSArIGNyZWF0b3JGZWUgPD0gMTAwMDApOwogICAgICAgIAogICAgCXVpbnQxNiBwcmV2aW91c0ZlZSA9IDEwMDAwIC0gZGV2RmVlIC0gcG90RmVlIC0gY3JlYXRvckZlZTsKICAgIAl2YXIgTmV3SXRlbSA9IEl0ZW0odGltZXIsIDAsIHByaWNlSW5jcmVhc2UsIG1pblByaWNlLCAwLCBtaW5QcmljZSwgY3JlYXRvckZlZSwgcHJldmlvdXNGZWUsIHBvdEZlZSwgbXNnLnNlbmRlciwgYWRkcmVzcygwKSwgIiIsIG5hbWUpOwoKICAgIAlJdGVtc1tuZXh0X2l0ZW1faW5kZXhdID0gTmV3SXRlbTsKCiAgICAJZW1pdCBJdGVtQ3JlYXRlZChuZXh0X2l0ZW1faW5kZXgpOwoKICAgIAluZXh0X2l0ZW1faW5kZXggPSBhZGQobmV4dF9pdGVtX2luZGV4LDEpOwogICAgfQoKICAgIGZ1bmN0aW9uIFBheW91dCh1aW50MjU2IGlkKSBpbnRlcm5hbCB7CiAgICAJdmFyIFVzZWRJdGVtID0gSXRlbXNbaWRdOwogICAgCXVpbnQyNTYgUGFpZCA9IFVzZWRJdGVtLmFtb3VudDsKICAgIAlVc2VkSXRlbS5hbW91bnQgPSAwOwoKICAgIAlVc2VkSXRlbS5vd25lci50cmFuc2ZlcihQYWlkKTsKCiAgICAJLy8gcmVzZXQgZ2FtZSAKICAgIAlVc2VkSXRlbS5vd25lciA9IGFkZHJlc3MoMCk7CiAgICAJVXNlZEl0ZW0ucHJpY2UgPSBVc2VkSXRlbS5taW5QcmljZTsKICAgIAlVc2VkSXRlbS50aW1lc3RhbXAgPSAwOwoKICAgIAllbWl0IEl0ZW1Xb24oaWQpOwoKICAgIH0KCgogICAgZnVuY3Rpb24gVGFrZVByaXplKHVpbnQyNTYgaWQpIHB1YmxpYyB7CiAgICAJcmVxdWlyZShpZCA8IG5leHRfaXRlbV9pbmRleCk7CiAgICAJdmFyIFVzZWRJdGVtID0gSXRlbXNbaWRdOwogICAgCXJlcXVpcmUoVXNlZEl0ZW0ub3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAJdWludDI1NiBUaW1pbmdUYXJnZXQgPSBhZGQoVXNlZEl0ZW0udGltZXIsIFVzZWRJdGVtLnRpbWVzdGFtcCk7CgogICAgCWlmIChibG9jay50aW1lc3RhbXAgPiBUaW1pbmdUYXJnZXQpewogICAgCQlQYXlvdXQoaWQpOwogICAgCQlyZXR1cm47CiAgICAJfQogICAgCWVsc2V7CiAgICAJCXJldmVydCgpOwogICAgCX0KICAgIH0KCgoKCiAgICBmdW5jdGlvbiBCdXlJdGVtKHVpbnQyNTYgaWQsIHN0cmluZyBxdW90ZSkgcHVibGljIHBheWFibGV7CiAgICAJcmVxdWlyZShpZCA8IG5leHRfaXRlbV9pbmRleCk7CiAgICAJdmFyIFVzZWRJdGVtID0gSXRlbXNbaWRdOwoKCiAgICAJaWYgKFVzZWRJdGVtLm93bmVyICE9IGFkZHJlc3MoMCkgJiYgYmxvY2sudGltZXN0YW1wID4gKGFkZChVc2VkSXRlbS50aW1lc3RhbXAsIFVzZWRJdGVtLnRpbWVyKSkpewogICAgCQlQYXlvdXQoaWQpOwogICAgCQlpZiAobXNnLnZhbHVlID4gMCl7CiAgICAJCQltc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAJCX0KICAgIAkJcmV0dXJuOwogICAgCX0KCiAgICAJcmVxdWlyZShtc2cudmFsdWUgPj0gVXNlZEl0ZW0ucHJpY2UpOwogICAgCXJlcXVpcmUobXNnLnNlbmRlciAhPSBvd25lcik7CiAgICAJLy9yZXF1aXJlKG1zZy5zZW5kZXIgIT0gVXNlZEl0ZW0uY3JlYXRvcik7IAogICAgCXJlcXVpcmUobXNnLnNlbmRlciAhPSBVc2VkSXRlbS5vd25lcik7CgogICAgCXVpbnQyNTYgZGV2RmVlX3VzZWQgPSBtdWwoVXNlZEl0ZW0ucHJpY2UsIGRldkZlZSkgLyAxMDAwMDsKICAgIAl1aW50MjU2IGNyZWF0b3JGZWVfdXNlZCA9IG11bChVc2VkSXRlbS5wcmljZSwgVXNlZEl0ZW0uY3JlYXRvckZlZSkgLyAxMDAwMDsKICAgIAl1aW50MjU2IHByZXZGZWVfdXNlZDsKCiAgIAkJaWYgKFVzZWRJdGVtLm93bmVyID09IGFkZHJlc3MoMCkpewogICAJCQkvLyBnYW1lIG5vdCBzdGFydGVkLiAKICAgCQkJcHJldkZlZV91c2VkID0gMDsKICAgCQl9CiAgIAkJZWxzZXsKICAgCQkJcHJldkZlZV91c2VkID0gKG11bChVc2VkSXRlbS5wcmljZSwgVXNlZEl0ZW0ucHJldmlvdXNGZWUpKSAvIDEwMDAwOwogICAJCQlVc2VkSXRlbS5vd25lci50cmFuc2ZlcihwcmV2RmVlX3VzZWQpOwogICAJCX0KCiAgIAkJaWYgKGNyZWF0b3JGZWVfdXNlZCAhPSAwKXsKICAgCQkJVXNlZEl0ZW0uY3JlYXRvci50cmFuc2ZlcihjcmVhdG9yRmVlX3VzZWQpOwogICAJCX0KCiAgIAkJaWYgKGRldkZlZV91c2VkICE9IDApewogICAJCQlvd25lci50cmFuc2ZlcihkZXZGZWVfdXNlZCk7CiAgIAkJfQogICAJCQogICAJCWlmIChtc2cudmFsdWUgPiBVc2VkSXRlbS5wcmljZSl7CiAgIAkJICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoc3ViKG1zZy52YWx1ZSwgVXNlZEl0ZW0ucHJpY2UpKTsKICAgCQl9CgogICAJCXVpbnQyNTYgcG90RmVlX3VzZWQgPSBzdWIoc3ViKHN1YihVc2VkSXRlbS5wcmljZSwgZGV2RmVlX3VzZWQpLCBjcmVhdG9yRmVlX3VzZWQpLCBwcmV2RmVlX3VzZWQpOwoKICAgCQlVc2VkSXRlbS5hbW91bnQgPSBhZGQoVXNlZEl0ZW0uYW1vdW50LCBwb3RGZWVfdXNlZCk7CiAgIAkJVXNlZEl0ZW0udGltZXN0YW1wID0gYmxvY2sudGltZXN0YW1wOwogICAJCVVzZWRJdGVtLm93bmVyID0gbXNnLnNlbmRlcjsKICAgCQlVc2VkSXRlbS5xdW90ZSA9IHF1b3RlOwogICAJCVVzZWRJdGVtLnByaWNlID0gKFVzZWRJdGVtLnByaWNlICogKGFkZCgxMDAwMCwgVXNlZEl0ZW0ucHJpY2VJbmNyZWFzZSkpKS8xMDAwMDsKCiAgIAkJZW1pdCBJdGVtQm91Z2h0KGlkKTsKICAgIH0KICAgIAoJZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMgewoJCS8vIG1zZy52YWx1ZSBpcyB0aGUgYW1vdW50IG9mIEV0aGVyIHNlbnQgYnkgdGhlIHRyYW5zYWN0aW9uLgoJCWlmIChtc2cudmFsdWUgPiAwKSB7CgkJCW1zZy5zZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKCQl9Cgl9CgkKCQoJCgkgICAgCiAgICAvLyBOb3QgaW50ZXJlc3RpbmcsIHNhZmUgbWF0aCBmdW5jdGlvbnMKICAgIAogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICByZXR1cm4gYzsKICAgfQoKICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICByZXR1cm4gYzsKICAgfQoKICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgIHJldHVybiBhIC0gYjsKICAgfQoKICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgIGFzc2VydChjID49IGEpOwogICAgICByZXR1cm4gYzsKICAgfQoKCn0='.
	

]
