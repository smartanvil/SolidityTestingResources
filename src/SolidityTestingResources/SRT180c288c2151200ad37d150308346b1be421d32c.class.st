Class {
	#name : #SRT180c288c2151200ad37d150308346b1be421d32c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT180c288c2151200ad37d150308346b1be421d32c >> base64 [
	^ ''.
	

]
