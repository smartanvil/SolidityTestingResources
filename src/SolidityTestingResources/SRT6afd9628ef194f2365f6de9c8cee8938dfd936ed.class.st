Class {
	#name : #SRT6afd9628ef194f2365f6de9c8cee8938dfd936ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6afd9628ef194f2365f6de9c8cee8938dfd936ed >> base64 [
	^ ''.
	

]
