Class {
	#name : #SRT8ac4b79f0a29624fcb1720ee131068f1ce23acd3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8ac4b79f0a29624fcb1720ee131068f1ce23acd3 >> base64 [
	^ ''.
	

]
