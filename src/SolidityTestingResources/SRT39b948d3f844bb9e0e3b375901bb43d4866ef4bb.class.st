Class {
	#name : #SRT39b948d3f844bb9e0e3b375901bb43d4866ef4bb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT39b948d3f844bb9e0e3b375901bb43d4866ef4bb >> base64 [
	^ ''.
	

]
