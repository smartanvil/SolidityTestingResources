Class {
	#name : #SRT548fe7c07062954a1930a1df08c9ee24fe3cc30a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT548fe7c07062954a1930a1df08c9ee24fe3cc30a >> base64 [
	^ ''.
	

]
