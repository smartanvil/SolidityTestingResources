Class {
	#name : #SRTbd5cfa0e509b2981753da7a53ee18f5876f8631e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd5cfa0e509b2981753da7a53ee18f5876f8631e >> base64 [
	^ ''.
	

]
