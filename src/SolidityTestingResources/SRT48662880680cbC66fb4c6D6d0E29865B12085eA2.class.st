Class {
	#name : #SRT48662880680cbC66fb4c6D6d0E29865B12085eA2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48662880680cbC66fb4c6D6d0E29865B12085eA2 >> base64 [
	^ ''.
	

]
