Class {
	#name : #SRTd184b10ee51be2c6bf45214b048f311a15296cae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd184b10ee51be2c6bf45214b048f311a15296cae >> base64 [
	^ ''.
	

]
