Class {
	#name : #SRT81f074bb3b158bf81799dcff159521a089e59a37,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT81f074bb3b158bf81799dcff159521a089e59a37 >> base64 [
	^ ''.
	

]
