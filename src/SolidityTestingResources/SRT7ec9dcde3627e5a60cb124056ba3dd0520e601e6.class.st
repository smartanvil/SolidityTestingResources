Class {
	#name : #SRT7ec9dcde3627e5a60cb124056ba3dd0520e601e6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7ec9dcde3627e5a60cb124056ba3dd0520e601e6 >> base64 [
	^ ''.
	

]
