Class {
	#name : #SRT7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2 >> base64 [
	^ ''.
	

]
