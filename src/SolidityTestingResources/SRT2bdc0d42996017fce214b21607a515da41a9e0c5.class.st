Class {
	#name : #SRT2bdc0d42996017fce214b21607a515da41a9e0c5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2bdc0d42996017fce214b21607a515da41a9e0c5 >> base64 [
	^ ''.
	

]
