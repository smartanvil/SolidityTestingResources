Class {
	#name : #SRT22a4d688748845e9d5d7394a0f05bc583adf4656,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22a4d688748845e9d5d7394a0f05bc583adf4656 >> base64 [
	^ ''.
	

]
