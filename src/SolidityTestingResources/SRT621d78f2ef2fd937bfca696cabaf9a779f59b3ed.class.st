Class {
	#name : #SRT621d78f2ef2fd937bfca696cabaf9a779f59b3ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT621d78f2ef2fd937bfca696cabaf9a779f59b3ed >> base64 [
	^ ''.
	

]
