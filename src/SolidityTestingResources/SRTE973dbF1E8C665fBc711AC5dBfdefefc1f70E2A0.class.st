Class {
	#name : #SRTE973dbF1E8C665fBc711AC5dBfdefefc1f70E2A0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE973dbF1E8C665fBc711AC5dBfdefefc1f70E2A0 >> base64 [
	^ ''.
	

]
