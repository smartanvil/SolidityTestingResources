Class {
	#name : #SRTf4f5e4c5d5dfd01a3604016bc861ac3654a0c2e2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4f5e4c5d5dfd01a3604016bc861ac3654a0c2e2 >> base64 [
	^ ''.
	

]
