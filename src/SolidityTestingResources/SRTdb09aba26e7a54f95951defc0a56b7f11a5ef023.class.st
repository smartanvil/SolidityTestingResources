Class {
	#name : #SRTdb09aba26e7a54f95951defc0a56b7f11a5ef023,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdb09aba26e7a54f95951defc0a56b7f11a5ef023 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgYm9vbCBwdWJsaWMgaGFsdGVkID0gZmFsc2U7CgogIG1vZGlmaWVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICByZXF1aXJlKCFoYWx0ZWQpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIHN0b3BOb25Pd25lcnNJbkVtZXJnZW5jeSB7CiAgICByZXF1aXJlKChtc2cuc2VuZGVyPT1vd25lcikgfHwgIWhhbHRlZCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoaGFsdGVkKTsKICAgIF87CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogIGZ1bmN0aW9uIGhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgaGFsdGVkID0gdHJ1ZTsKICB9CgogIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGhhbHRlZCA9IGZhbHNlOwogIH0KCn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgpjb250cmFjdCBUb2tlbiB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAqLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBUYWtlUHJvZml0VG9rZW4gaXMgVG9rZW4sIEhhbHRhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIG5hbWUgPSAiVGFrZVByb2ZpdCI7CiAgICB1aW50OCBjb25zdGFudCBwdWJsaWMgZGVjaW1hbHMgPSA4OwogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBzeW1ib2wgPSAiWFRQIjsgICAgICAgCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIHZlcnNpb24gPSAiMS4xIjsKCgogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgVU5JVCA9IHVpbnQyNTYoMTApKipkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMTAqKjggKiBVTklUOwoKICAgIHVpbnQyNTYgY29uc3RhbnQgTUFYX1VJTlQyNTYgPSAyKioyNTYgLSAxOyAvLyBVc2VkIGZvciBhbGxvd2FuY2U6IHRoaXMgdmFsdWUgbWVhbiBpbmZpbml0ZSBhbGxvd2FuY2UKCiAgICBmdW5jdGlvbiBUYWtlUHJvZml0VG9rZW4oKSBwdWJsaWMgewogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBzdG9wSW5FbWVyZ2VuY3kgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBzdG9wSW5FbWVyZ2VuY3kgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgdWludDI1NiBhbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dhbmNlID49IF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGlmIChhbGxvd2FuY2UgPCBNQVhfVUlOVDI1NikgewogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgc3RvcEluRW1lcmdlbmN5IHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCgovKioKICogQHRpdGxlIFByZXNhbGUKICogQGRldiBQcmVzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBQcmVzYWxlLgogKiBQcmVzYWxlcyBoYXZlIGEgc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzLCB3aGVyZSBpbnZlc3RvcnMgY2FuIG1ha2UKICogdG9rZW4gcHVyY2hhc2VzIGFuZCB0aGUgUHJlc2FsZSB3aWxsIGFzc2lnbiB0aGVtIHRva2VucyBiYXNlZAogKiBvbiBhIHRva2VuIHBlciBFVEggcmF0ZS4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqLwpjb250cmFjdCBQcmVzYWxlIGlzIEhhbHRhYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBUb2tlbiBwdWJsaWMgdG9rZW47CgogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgc3RhcnRUaW1lID0gMTUxMTg5MjAwMDsgLy8gMjggTm92IDIwMTcgQCAxODowMCAgIChVVEMpCiAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgZW5kVGltZSA9ICAgMTUxMzY0MTYwMDsgLy8gMTkgRGVjIDIwMTcgQCAxMjowMGFtIChVVEMpCgogIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIHRva2VuQ2FwID0gdWludDI1Nig4KjFlNioxZTgpOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIHdpbGwgYmUgdHJhbnNmZXJlZAogIGFkZHJlc3MgcHVibGljIHdpdGhkcmF3QWRkcmVzczsKCiAgLy8gaG93IG1hbnkgd2VpcyBidXllciBuZWVkIHRvIHBheSBmb3Igb25lIHRva2VuIHVuaXQKICB1aW50MjU2IHB1YmxpYyBkZWZhdWx0X3JhdGUgPSAyNTAwMDAwOwoKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLy8gYW1vdW50IG9mIGFscmVhZHkgc29sZCB0b2tlbnMKICB1aW50MjU2IHB1YmxpYyB0b2tlblNvbGQ7CgogIGJvb2wgcHVibGljIGluaXRpYXRlZCA9IGZhbHNlOwogIGJvb2wgcHVibGljIGZpbmFsaXplZCA9IGZhbHNlOwoKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgLy8gd2UgYWx3YXlzIHJlZnVuZCB0byBhZGRyZXNzIGZyb20gd2hpY2ggd2UgZ2V0IG1vbmV5LCB3aGlsZSB0b2tlbnMgY2FuIGJlIGJvdWdodCBmb3IgYW5vdGhlciBhZGRyZXNzCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdXJjaGFzZWRUb2tlbnM7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSByZWNlaXZlZEZ1bmRzOwoKICBlbnVtIFN0YXRle1Vua25vd24sIFByZXBhaXJpbmcsIFByZUZ1bmRpbmcsIEZ1bmRpbmcsIFN1Y2Nlc3MsIEZhaWx1cmUsIEZpbmFsaXplZCwgUmVmdW5kaW5nfQoKICBmdW5jdGlvbiBQcmVzYWxlKGFkZHJlc3MgdG9rZW5fYWRkcmVzcywgYWRkcmVzcyBfd2l0aGRyYXdBZGRyZXNzKSBwdWJsaWMgewogICAgcmVxdWlyZShzdGFydFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoZW5kVGltZSA+PSBzdGFydFRpbWUpOwogICAgcmVxdWlyZShkZWZhdWx0X3JhdGUgPiAwKTsKICAgIHJlcXVpcmUod2l0aGRyYXdBZGRyZXNzID09IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfd2l0aGRyYXdBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh0b2tlbkNhcD4wKTsKICAgIHRva2VuID0gVG9rZW4odG9rZW5fYWRkcmVzcyk7CiAgICByZXF1aXJlKHRva2VuLnRvdGFsU3VwcGx5KCk9PTEwMCp1aW50MjU2KDEwKSoqKDYrOCkpOwogICAgd2l0aGRyYXdBZGRyZXNzID0gX3dpdGhkcmF3QWRkcmVzczsKICB9CgogIGZ1bmN0aW9uIGluaXRpYXRlKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHRva2VuLmJhbGFuY2VPZih0aGlzKSA+PSB0b2tlbkNhcCk7CiAgICBpbml0aWF0ZWQgPSB0cnVlOwogICAgaWYodG9rZW4uYmFsYW5jZU9mKHRoaXMpPnRva2VuQ2FwKQogICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKHdpdGhkcmF3QWRkcmVzcywgdG9rZW4uYmFsYW5jZU9mKHRoaXMpLnN1Yih0b2tlbkNhcCkpKTsKICB9CgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBwdWJsaWMgc3RvcEluRW1lcmdlbmN5IHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBzdG9wSW5FbWVyZ2VuY3kgaW5TdGF0ZShTdGF0ZS5GdW5kaW5nKSBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICB1aW50MjU2IHdlaUFtb3VudENvbnN1bWVkID0gMDsKICAgIHVpbnQyNTYgd2VpRXhjZXNzID0gMDsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGJvdWdodAogICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQuZGl2KHJhdGUoKSk7CiAgICBpZih0b2tlblNvbGQuYWRkKHRva2Vucyk+dG9rZW5DYXApIHsKICAgICAgdG9rZW5zID0gdG9rZW5DYXAuc3ViKHRva2VuU29sZCk7CiAgICB9CgogICAgd2VpQW1vdW50Q29uc3VtZWQgPSB0b2tlbnMubXVsKHJhdGUoKSk7CiAgICB3ZWlFeGNlc3MgPSB3ZWlBbW91bnQuc3ViKHdlaUFtb3VudENvbnN1bWVkKTsKCgogICAgLy8gdXBkYXRlIHN0YXRlCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudENvbnN1bWVkKTsKICAgIHRva2VuU29sZCA9IHRva2VuU29sZC5hZGQodG9rZW5zKTsKCiAgICBwdXJjaGFzZWRUb2tlbnNbYmVuZWZpY2lhcnldICs9IHRva2VuczsKICAgIHJlY2VpdmVkRnVuZHNbbXNnLnNlbmRlcl0gKz0gd2VpQW1vdW50Q29uc3VtZWQ7CiAgICBpZih3ZWlFeGNlc3M+MCkgewogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHdlaUV4Y2Vzcyk7CiAgICB9CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgdmFsdWFibGVQdXJjaGFzZSA9IChtc2cudmFsdWUgPj0gMC4xIGV0aGVyKTsKICAgIHJldHVybiB2YWx1YWJsZVB1cmNoYXNlOwogIH0KCiAgZnVuY3Rpb24gZ2V0UHVyY2hhc2VkVG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gcHVyY2hhc2VkVG9rZW5zW2JlbmVmaWNpYXJ5XTsKICB9CgogIGZ1bmN0aW9uIGdldFJlY2VpdmVkRnVuZHMoYWRkcmVzcyBidXllcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiByZWNlaXZlZEZ1bmRzW2J1eWVyXTsKICB9CgogIGZ1bmN0aW9uIGNsYWltKCkgcHVibGljIHN0b3BJbkVtZXJnZW5jeSBpblN0YXRlKFN0YXRlLkZpbmFsaXplZCkgewogICAgY2xhaW1Ub2tlbnMobXNnLnNlbmRlcik7CiAgfQoKCiAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHN0b3BJbkVtZXJnZW5jeSBpblN0YXRlKFN0YXRlLkZpbmFsaXplZCkgewogICAgcmVxdWlyZShwdXJjaGFzZWRUb2tlbnNbYmVuZWZpY2lhcnldPjApOwogICAgdWludDI1NiB2YWx1ZSA9IHB1cmNoYXNlZFRva2Vuc1tiZW5lZmljaWFyeV07CiAgICBwdXJjaGFzZWRUb2tlbnNbYmVuZWZpY2lhcnldIC09IHZhbHVlOwogICAgcmVxdWlyZSh0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHJlZnVuZCgpIHB1YmxpYyBzdG9wSW5FbWVyZ2VuY3kgaW5TdGF0ZShTdGF0ZS5SZWZ1bmRpbmcpIHsKICAgIGRlbGVnYXRlZFJlZnVuZChtc2cuc2VuZGVyKTsKICB9CgogIGZ1bmN0aW9uIGRlbGVnYXRlZFJlZnVuZChhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgc3RvcEluRW1lcmdlbmN5IGluU3RhdGUoU3RhdGUuUmVmdW5kaW5nKSB7CiAgICByZXF1aXJlKHJlY2VpdmVkRnVuZHNbYmVuZWZpY2lhcnldPjApOwogICAgdWludDI1NiB2YWx1ZSA9IHJlY2VpdmVkRnVuZHNbYmVuZWZpY2lhcnldOwogICAgcmVjZWl2ZWRGdW5kc1tiZW5lZmljaWFyeV0gPSAwOwogICAgYmVuZWZpY2lhcnkudHJhbnNmZXIodmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzKSBvbmx5T3duZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoIWZpbmFsaXplZCk7CiAgICByZXF1aXJlKHRoaXMuYmFsYW5jZT09MCk7CiAgICBmaW5hbGl6ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgIGluU3RhdGUoU3RhdGUuU3VjY2Vzcykgb25seU93bmVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICB3aXRoZHJhd0FkZHJlc3MudHJhbnNmZXIod2VpUmFpc2VkKTsKICB9CgogIGZ1bmN0aW9uIG1hbnVhbFdpdGhkcmF3YWwodWludDI1NiBfYW1vdW50KSBwdWJsaWMgIGluU3RhdGUoU3RhdGUuU3VjY2Vzcykgb25seU93bmVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICB3aXRoZHJhd0FkZHJlc3MudHJhbnNmZXIoX2Ftb3VudCk7CiAgfQoKICBmdW5jdGlvbiBlbWVyZ2VuY3lXaXRoZHJhd2FsKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgd2l0aGRyYXdBZGRyZXNzLnRyYW5zZmVyKF9hbW91bnQpOwogIH0KCiAgZnVuY3Rpb24gZW1lcmdlbmN5VG9rZW5XaXRoZHJhd2FsKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZSh0b2tlbi50cmFuc2Zlcih3aXRoZHJhd0FkZHJlc3MsIF9hbW91bnQpKTsKICB9CgogIGZ1bmN0aW9uIHJhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IHN0YXJ0VGltZSkgcmV0dXJuIDA7CiAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPj0gc3RhcnRUaW1lICYmIGJsb2NrLnRpbWVzdGFtcCA8IChzdGFydFRpbWUgKyAxIHdlZWtzKSkgcmV0dXJuIHVpbnQyNTYoZGVmYXVsdF9yYXRlLzIpOwogICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wID49IChzdGFydFRpbWUrMSB3ZWVrcykgJiYgYmxvY2sudGltZXN0YW1wIDwgKHN0YXJ0VGltZSArIDIgd2Vla3MpKSByZXR1cm4gdWludDI1NigxMCpkZWZhdWx0X3JhdGUvMTkpOwogICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wID49IChzdGFydFRpbWUrMiB3ZWVrcykgJiYgYmxvY2sudGltZXN0YW1wIDwgKHN0YXJ0VGltZSArIDMgd2Vla3MpKSByZXR1cm4gdWludDI1NigxMCpkZWZhdWx0X3JhdGUvMTgpOwogICAgcmV0dXJuIDA7CiAgfQoKICAvL0l0IGlzIGZ1bmN0aW9uIGFuZCBub3QgdmFyaWFibGUsIHRodXMgaXQgY2FuJ3QgYmUgc3RhbGUKICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgewogICAgaWYoZmluYWxpemVkKSByZXR1cm4gU3RhdGUuRmluYWxpemVkOwogICAgaWYoIWluaXRpYXRlZCkgcmV0dXJuIFN0YXRlLlByZXBhaXJpbmc7CiAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPCBzdGFydFRpbWUpIHJldHVybiBTdGF0ZS5QcmVGdW5kaW5nOwogICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wIDw9IGVuZFRpbWUgJiYgdG9rZW5Tb2xkPHRva2VuQ2FwKSByZXR1cm4gU3RhdGUuRnVuZGluZzsKICAgIGVsc2UgaWYgKHRva2VuU29sZD49dG9rZW5DYXApIHJldHVybiBTdGF0ZS5TdWNjZXNzOwogICAgZWxzZSBpZiAod2VpUmFpc2VkID4gMCAmJiBibG9jay50aW1lc3RhbXAgPj0gZW5kVGltZSAmJiB0b2tlblNvbGQ8dG9rZW5DYXApIHJldHVybiBTdGF0ZS5SZWZ1bmRpbmc7CiAgICBlbHNlIHJldHVybiBTdGF0ZS5GYWlsdXJlOwogIH0KCiAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgcmVxdWlyZShnZXRTdGF0ZSgpID09IHN0YXRlKTsKICAgIF87CiAgfQp9'.
	

]
