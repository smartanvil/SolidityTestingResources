Class {
	#name : #SRTbcec57361649e5da917efa9f992fbca0a2529350,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbcec57361649e5da917efa9f992fbca0a2529350 >> base64 [
	^ ''.
	

]
