Class {
	#name : #SRT27500ae27b6b6ad7de7d64b1def90f3e6e7ced47,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT27500ae27b6b6ad7de7d64b1def90f3e6e7ced47 >> base64 [
	^ ''.
	

]
