Class {
	#name : #SRT31fe7e62254B239305CBbddA71822186a0b3B38c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31fe7e62254B239305CBbddA71822186a0b3B38c >> base64 [
	^ ''.
	

]
