Class {
	#name : #SRT4e329bB4CAd4D168Eebc0f64e5b320D1c6DD6E17,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e329bB4CAd4D168Eebc0f64e5b320D1c6DD6E17 >> base64 [
	^ ''.
	

]
