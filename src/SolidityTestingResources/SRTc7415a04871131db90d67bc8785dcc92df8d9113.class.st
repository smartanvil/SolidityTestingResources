Class {
	#name : #SRTc7415a04871131db90d67bc8785dcc92df8d9113,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc7415a04871131db90d67bc8785dcc92df8d9113 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIAogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQogIAp9CgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICAgIAogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIAogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgCiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKICBhZGRyZXNzIHB1YmxpYyBzYWxlQWdlbnQ7CgogIGZ1bmN0aW9uIHNldFNhbGVBZ2VudChhZGRyZXNzIG5ld1NhbGVBZ25ldCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNhbGVBZ2VudCB8fCBtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIHNhbGVBZ2VudCA9IG5ld1NhbGVBZ25ldDsKICB9CgogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNhbGVBZ2VudCAmJiAhbWludGluZ0ZpbmlzaGVkKTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKChtc2cuc2VuZGVyID09IHNhbGVBZ2VudCB8fCBtc2cuc2VuZGVyID09IG93bmVyKSAmJiAhbWludGluZ0ZpbmlzaGVkKTsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgCn0KCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgICAKICBldmVudCBQYXVzZSgpOwogIAogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQogIAp9Cgpjb250cmFjdCBRQkVUb2tlbiBpcyBNaW50YWJsZVRva2VuIHsJCiAgICAKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiUXViaWNsZSI7CiAgIAogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlFCRSI7CiAgICAKICB1aW50MzIgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGxvY2tlZDsKCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKGxvY2tlZFttc2cuc2VuZGVyXSA8IG5vdyk7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShsb2NrZWRbX2Zyb21dIDwgbm93KTsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CiAgCiAgZnVuY3Rpb24gbG9jayhhZGRyZXNzIGFkZHIsIHVpbnQgcGVyaW9kSW5EYXlzKSB7CiAgICByZXF1aXJlKGxvY2tlZFthZGRyXSA8IG5vdyAmJiAobXNnLnNlbmRlciA9PSBzYWxlQWdlbnQgfHwgbXNnLnNlbmRlciA9PSBhZGRyKSk7CiAgICBsb2NrZWRbYWRkcl0gPSBub3cgKyBwZXJpb2RJbkRheXMgKiAxIGRheXM7CiAgfQoKICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgIHJldmVydCgpOwogIH0KCn0KCmNvbnRyYWN0IFN0YWdlZENyb3dkc2FsZSBpcyBQYXVzYWJsZSB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBzdHJ1Y3QgU3RhZ2UgewogICAgdWludCBoYXJkY2FwOwogICAgdWludCBwcmljZTsKICAgIHVpbnQgaW52ZXN0ZWQ7CiAgICB1aW50IGNsb3NlZDsKICB9CgogIHVpbnQgcHVibGljIHN0YXJ0OwoKICB1aW50IHB1YmxpYyBwZXJpb2Q7CgogIHVpbnQgcHVibGljIHRvdGFsSGFyZGNhcDsKIAogIHVpbnQgcHVibGljIHRvdGFsSW52ZXN0ZWQ7CgogIFN0YWdlW10gcHVibGljIHN0YWdlczsKCiAgZnVuY3Rpb24gc3RhZ2VzQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICByZXR1cm4gc3RhZ2VzLmxlbmd0aDsKICB9CgogIGZ1bmN0aW9uIHNldFN0YXJ0KHVpbnQgbmV3U3RhcnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgc3RhcnQgPSBuZXdTdGFydDsKICB9CgogIGZ1bmN0aW9uIHNldFBlcmlvZCh1aW50IG5ld1BlcmlvZCkgcHVibGljIG9ubHlPd25lciB7CiAgICBwZXJpb2QgPSBuZXdQZXJpb2Q7CiAgfQoKICBmdW5jdGlvbiBhZGRTdGFnZSh1aW50IGhhcmRjYXAsIHVpbnQgcHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShoYXJkY2FwID4gMCAmJiBwcmljZSA+IDApOwogICAgU3RhZ2UgbWVtb3J5IHN0YWdlID0gU3RhZ2UoaGFyZGNhcC5tdWwoMSBldGhlciksIHByaWNlLCAwLCAwKTsKICAgIHN0YWdlcy5wdXNoKHN0YWdlKTsKICAgIHRvdGFsSGFyZGNhcCA9IHRvdGFsSGFyZGNhcC5hZGQoc3RhZ2UuaGFyZGNhcCk7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVTdGFnZSh1aW50OCBudW1iZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShudW1iZXIgPj0gMCAmJiBudW1iZXIgPCBzdGFnZXMubGVuZ3RoKTsKICAgIFN0YWdlIHN0b3JhZ2Ugc3RhZ2UgPSBzdGFnZXNbbnVtYmVyXTsKICAgIHRvdGFsSGFyZGNhcCA9IHRvdGFsSGFyZGNhcC5zdWIoc3RhZ2UuaGFyZGNhcCk7ICAgIAogICAgZGVsZXRlIHN0YWdlc1tudW1iZXJdOwogICAgZm9yICh1aW50IGkgPSBudW1iZXI7IGkgPCBzdGFnZXMubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgIHN0YWdlc1tpXSA9IHN0YWdlc1tpKzFdOwogICAgfQogICAgc3RhZ2VzLmxlbmd0aC0tOwogIH0KIAogIGZ1bmN0aW9uIGNoYW5nZVN0YWdlKHVpbnQ4IG51bWJlciwgdWludCBoYXJkY2FwLCB1aW50IHByaWNlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyID49IDAgJiYgbnVtYmVyIDwgc3RhZ2VzLmxlbmd0aCk7CiAgICBTdGFnZSBzdG9yYWdlIHN0YWdlID0gc3RhZ2VzW251bWJlcl07CiAgICB0b3RhbEhhcmRjYXAgPSB0b3RhbEhhcmRjYXAuc3ViKHN0YWdlLmhhcmRjYXApOyAgICAKICAgIHN0YWdlLmhhcmRjYXAgPSBoYXJkY2FwLm11bCgxIGV0aGVyKTsKICAgIHN0YWdlLnByaWNlID0gcHJpY2U7CiAgICB0b3RhbEhhcmRjYXAgPSB0b3RhbEhhcmRjYXAuYWRkKHN0YWdlLmhhcmRjYXApOyAgICAKICB9CgogIGZ1bmN0aW9uIGluc2VydFN0YWdlKHVpbnQ4IG51bWJlckFmdGVyLCB1aW50IGhhcmRjYXAsIHVpbnQgcHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShudW1iZXJBZnRlciA8IHN0YWdlcy5sZW5ndGgpOwogICAgU3RhZ2UgbWVtb3J5IHN0YWdlID0gU3RhZ2UoaGFyZGNhcC5tdWwoMSBldGhlciksIHByaWNlLCAwLCAwKTsKICAgIHRvdGFsSGFyZGNhcCA9IHRvdGFsSGFyZGNhcC5hZGQoc3RhZ2UuaGFyZGNhcCk7CiAgICBzdGFnZXMubGVuZ3RoKys7CiAgICBmb3IgKHVpbnQgaSA9IHN0YWdlcy5sZW5ndGggLSAyOyBpID4gbnVtYmVyQWZ0ZXI7IGktLSkgewogICAgICBzdGFnZXNbaSArIDFdID0gc3RhZ2VzW2ldOwogICAgfQogICAgc3RhZ2VzW251bWJlckFmdGVyICsgMV0gPSBzdGFnZTsKICB9CgogIGZ1bmN0aW9uIGNsZWFyU3RhZ2VzKCkgcHVibGljIG9ubHlPd25lciB7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBzdGFnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgZGVsZXRlIHN0YWdlc1tpXTsKICAgIH0KICAgIHN0YWdlcy5sZW5ndGggLT0gc3RhZ2VzLmxlbmd0aDsKICAgIHRvdGFsSGFyZGNhcCA9IDA7CiAgfQoKICBmdW5jdGlvbiBsYXN0U2FsZURhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICByZXR1cm4gc3RhcnQgKyBwZXJpb2QgKiAxIGRheXM7CiAgfQoKICBtb2RpZmllciBzYWxlSXNPbigpIHsKICAgIHJlcXVpcmUoc3RhZ2VzLmxlbmd0aCA+IDAgJiYgbm93ID49IHN0YXJ0ICYmIG5vdyA8IGxhc3RTYWxlRGF0ZSgpKTsKICAgIF87CiAgfQogIAogIG1vZGlmaWVyIGlzVW5kZXJIYXJkY2FwKCkgewogICAgcmVxdWlyZSh0b3RhbEludmVzdGVkIDw9IHRvdGFsSGFyZGNhcCk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gY3VycmVudFN0YWdlKCkgcHVibGljIHNhbGVJc09uIGlzVW5kZXJIYXJkY2FwIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgc3RhZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChzdGFnZXNbaV0uY2xvc2VkID09IDApIHsKICAgICAgICByZXR1cm4gaTsKICAgICAgfQogICAgfQogICAgcmV2ZXJ0KCk7CiAgfQoKfQoKY29udHJhY3QgQ29tbW9uU2FsZSBpcyBTdGFnZWRDcm93ZHNhbGUgewoKICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ1dhbGxldDsKCiAgdWludCBwdWJsaWMgbWluUHJpY2U7CgogIHVpbnQgcHVibGljIHRvdGFsVG9rZW5zTWludGVkOwoKICBRQkVUb2tlbiBwdWJsaWMgdG9rZW47CiAgCiAgZnVuY3Rpb24gc2V0TWluUHJpY2UodWludCBuZXdNaW5QcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBtaW5QcmljZSA9IG5ld01pblByaWNlOwogIH0KCiAgZnVuY3Rpb24gc2V0TXVsdGlzaWdXYWxsZXQoYWRkcmVzcyBuZXdNdWx0aXNpZ1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtdWx0aXNpZ1dhbGxldCA9IG5ld011bHRpc2lnV2FsbGV0OwogIH0KICAKICBmdW5jdGlvbiBzZXRUb2tlbihhZGRyZXNzIG5ld1Rva2VuKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRva2VuID0gUUJFVG9rZW4obmV3VG9rZW4pOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcGF5YWJsZSB7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBtaW5QcmljZSk7CiAgICB1aW50IHN0YWdlSW5kZXggPSBjdXJyZW50U3RhZ2UoKTsgLy8gc2hvdWxkIGNoZWNrIGlmIGN1cnJlbnQgc3RhZ2UgcmV0dXJuZWQgYSB2YWxpZCBzdGFnZQogICAgbXVsdGlzaWdXYWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIFN0YWdlIHN0b3JhZ2Ugc3RhZ2UgPSBzdGFnZXNbc3RhZ2VJbmRleF07CiAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZS5tdWwoc3RhZ2UucHJpY2UpOwogICAgdG9rZW4ubWludCh0aGlzLCB0b2tlbnMpOwogICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zKTsKICAgIHRvdGFsVG9rZW5zTWludGVkID0gdG90YWxUb2tlbnNNaW50ZWQuYWRkKHRva2Vucyk7CiAgICB0b3RhbEludmVzdGVkID0gdG90YWxJbnZlc3RlZC5hZGQobXNnLnZhbHVlKTsKICAgIHN0YWdlLmludmVzdGVkID0gc3RhZ2UuaW52ZXN0ZWQuYWRkKG1zZy52YWx1ZSk7CiAgICBpZiAoc3RhZ2UuaW52ZXN0ZWQgPj0gc3RhZ2UuaGFyZGNhcCkgewogICAgICBzdGFnZS5jbG9zZWQgPSBub3c7CiAgICB9CiAgfQoKICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgY3JlYXRlVG9rZW5zKCk7CiAgfQoKICBmdW5jdGlvbiByZXRyaWV2ZVRva2VucyhhZGRyZXNzIGFub3RoZXJUb2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICBFUkMyMCBhbGllblRva2VuID0gRVJDMjAoYW5vdGhlclRva2VuKTsKICAgIGFsaWVuVG9rZW4udHJhbnNmZXIobXVsdGlzaWdXYWxsZXQsIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgfQoKfQoKY29udHJhY3QgUHJlc2FsZSBpcyBDb21tb25TYWxlIHsKCiAgTWFpbnNhbGUgcHVibGljIG1haW5zYWxlOwoKICBmdW5jdGlvbiBzZXRNYWluc2FsZShhZGRyZXNzIG5ld01haW5zYWxlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIG1haW5zYWxlID0gTWFpbnNhbGUobmV3TWFpbnNhbGUpOwogIH0KCiAgZnVuY3Rpb24gc2V0TXVsdGlzaWdXYWxsZXQoYWRkcmVzcyBuZXdNdWx0aXNpZ1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtdWx0aXNpZ1dhbGxldCA9IG5ld011bHRpc2lnV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIHB1YmxpYyB3aGVuTm90UGF1c2VkIG9ubHlPd25lciB7CiAgICB0b2tlbi5zZXRTYWxlQWdlbnQobWFpbnNhbGUpOwogIH0KCiAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgIGNyZWF0ZVRva2VucygpOwogIH0KCiAgZnVuY3Rpb24gcmV0cmlldmVUb2tlbnMoYWRkcmVzcyBhbm90aGVyVG9rZW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgRVJDMjAgYWxpZW5Ub2tlbiA9IEVSQzIwKGFub3RoZXJUb2tlbik7CiAgICBhbGllblRva2VuLnRyYW5zZmVyKG11bHRpc2lnV2FsbGV0LCB0b2tlbi5iYWxhbmNlT2YodGhpcykpOwogIH0KCn0KCgpjb250cmFjdCBNYWluc2FsZSBpcyBDb21tb25TYWxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgZm91bmRlcnNUb2tlbnNXYWxsZXQ7CiAgCiAgYWRkcmVzcyBwdWJsaWMgYm91bnR5VG9rZW5zV2FsbGV0OwoKICBhZGRyZXNzIHB1YmxpYyB1bnNvbGRUb2tlbnNXYWxsZXQ7CiAgCiAgdWludCBwdWJsaWMgZm91bmRlcnNUb2tlbnNSZXNlcnZlOwogIAogIHVpbnQgcHVibGljIGJvdW50eVRva2Vuc1Jlc2VydmU7CgogIHVpbnQgcHVibGljIG1heFRva2VuU3VwcGx5OwogIAogIHVpbnQgcHVibGljIGxvY2tQZXJpb2Q7CgogIGZ1bmN0aW9uIHNldExvY2tQZXJpb2QodWludCBuZXdMb2NrUGVyaW9kKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGxvY2tQZXJpb2QgPSBuZXdMb2NrUGVyaW9kOwogIH0KCiAgZnVuY3Rpb24gc2V0Rm91bmRlcnNUb2tlbnNSZXNlcnZlKHVpbnQgbmV3Rm91bmRlcnNUb2tlbnNSZXNlcnZlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGZvdW5kZXJzVG9rZW5zUmVzZXJ2ZSA9IG5ld0ZvdW5kZXJzVG9rZW5zUmVzZXJ2ZTsKICB9CgogIGZ1bmN0aW9uIHNldEJvdW50eVRva2Vuc1Jlc2VydmUodWludCBuZXdCb3VudHlUb2tlbnNSZXNlcnZlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGJvdW50eVRva2Vuc1Jlc2VydmUgPSBuZXdCb3VudHlUb2tlbnNSZXNlcnZlOwogIH0KCiAgZnVuY3Rpb24gc2V0TWF4VG9rZW5TdXBwbHkodWludCBuZXdNYXhUb2tlblN1cHBseSkgcHVibGljIG9ubHlPd25lciB7CiAgICBtYXhUb2tlblN1cHBseSA9IG5ld01heFRva2VuU3VwcGx5OwogIH0KCiAgZnVuY3Rpb24gc2V0Rm91bmRlcnNUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdGb3VuZGVyc1Rva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBmb3VuZGVyc1Rva2Vuc1dhbGxldCA9IG5ld0ZvdW5kZXJzVG9rZW5zV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gc2V0Qm91bnR5VG9rZW5zV2FsbGV0KGFkZHJlc3MgbmV3Qm91bnR5VG9rZW5zV2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGJvdW50eVRva2Vuc1dhbGxldCA9IG5ld0JvdW50eVRva2Vuc1dhbGxldDsKICB9CgogIGZ1bmN0aW9uIHNldFVuc29sZFRva2Vuc1dhbGxldChhZGRyZXNzIG5ld1Vuc29sZFRva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICB1bnNvbGRUb2tlbnNXYWxsZXQgPSBuZXdVbnNvbGRUb2tlbnNXYWxsZXQ7CiAgfQogIAogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBvbmx5T3duZXIgewogICAgdG9rZW4ubWludCh0aGlzLCBmb3VuZGVyc1Rva2Vuc1Jlc2VydmUpOwogICAgdG9rZW4ubG9jayhmb3VuZGVyc1Rva2Vuc1dhbGxldCwgbG9ja1BlcmlvZCAqIDEgZGF5cyk7CiAgICB0b2tlbi50cmFuc2Zlcihmb3VuZGVyc1Rva2Vuc1dhbGxldCwgZm91bmRlcnNUb2tlbnNSZXNlcnZlKTsKICAgIHRva2VuLm1pbnQodGhpcywgYm91bnR5VG9rZW5zUmVzZXJ2ZSk7CiAgICB0b2tlbi50cmFuc2Zlcihib3VudHlUb2tlbnNXYWxsZXQsIGJvdW50eVRva2Vuc1Jlc2VydmUpOwogICAgdG90YWxUb2tlbnNNaW50ZWQgPSB0b3RhbFRva2Vuc01pbnRlZC5hZGQoZm91bmRlcnNUb2tlbnNSZXNlcnZlKS5hZGQoYm91bnR5VG9rZW5zUmVzZXJ2ZSk7CgogICAgdWludCB0b3RhbFVuc29sZFRva2VucyA9IG1heFRva2VuU3VwcGx5LnN1Yih0b3RhbFRva2Vuc01pbnRlZCk7CiAgICBpZiAodG90YWxVbnNvbGRUb2tlbnMgPiAwKXsKICAgICAgdG9rZW4ubWludCh0aGlzLCB0b3RhbFVuc29sZFRva2Vucyk7CiAgICAgIHRva2VuLnRyYW5zZmVyKHVuc29sZFRva2Vuc1dhbGxldCwgdG90YWxVbnNvbGRUb2tlbnMpOwogICAgfQogICAgCiAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgfQoKfQoKY29udHJhY3QgVGVzdENvbmZpZ3VyYXRvciBpcyBPd25hYmxlIHsKCiAgUUJFVG9rZW4gcHVibGljIHRva2VuOyAKCiAgUHJlc2FsZSBwdWJsaWMgcHJlc2FsZTsKCiAgTWFpbnNhbGUgcHVibGljIG1haW5zYWxlOwoKICBmdW5jdGlvbiBkZXBsb3koKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRva2VuID0gbmV3IFFCRVRva2VuKCk7CgogICAgcHJlc2FsZSA9IG5ldyBQcmVzYWxlKCk7CgogICAgcHJlc2FsZS5zZXRUb2tlbih0b2tlbik7CiAgICBwcmVzYWxlLmFkZFN0YWdlKDEwLDMwMDApOwogICAgcHJlc2FsZS5zZXRNdWx0aXNpZ1dhbGxldCgweDRjMDc2ZTk5ZDlFOGNGQzY0N0UxODA3RDg5NTA2MTg5ZDQyNTZFZTEpOwogICAgcHJlc2FsZS5zZXRTdGFydCgxNTA5MzkzNzMwKTsKICAgIHByZXNhbGUuc2V0UGVyaW9kKDEpOwogICAgcHJlc2FsZS5zZXRNaW5QcmljZSgxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgdG9rZW4uc2V0U2FsZUFnZW50KHByZXNhbGUpOwkKCiAgICBtYWluc2FsZSA9IG5ldyBNYWluc2FsZSgpOwoKICAgIG1haW5zYWxlLnNldFRva2VuKHRva2VuKTsKICAgIG1haW5zYWxlLmFkZFN0YWdlKDEwMCwxNTAwKTsKICAgIG1haW5zYWxlLnNldE11bHRpc2lnV2FsbGV0KDB4ZjMyNzM3Rjc3NzljQTJEMjBjMDE3RGE4RjUxYjJERjk5Rjg2QTIyMSk7CiAgICBtYWluc2FsZS5zZXRGb3VuZGVyc1Rva2Vuc1dhbGxldCgweDViODE5MTc5QzhCYTg0RkI0YTUxN0RkNTY2Y2IwOUZmNGI4YTI3N2YpOwogICAgbWFpbnNhbGUuc2V0Qm91bnR5VG9rZW5zV2FsbGV0KDB4N0QyYjAwQzIzYURhYjk3MTUyYWFCNjU4OEE1MEZjRWRDRWJENThlNCk7CiAgICBtYWluc2FsZS5zZXRVbnNvbGRUb2tlbnNXYWxsZXQoMHhBRTVlNjQyODBlRDc3N2M2RDJiYjhFZGRmZUYyMzk0QTIxZjE0N0REKTsKICAgIG1haW5zYWxlLnNldFN0YXJ0KDE1MDkzOTM4MDApOwogICAgbWFpbnNhbGUuc2V0UGVyaW9kKDEpOwogICAgbWFpbnNhbGUuc2V0TG9ja1BlcmlvZCgxKTsKICAgIG1haW5zYWxlLnNldE1pblByaWNlKDEwMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBtYWluc2FsZS5zZXRGb3VuZGVyc1Rva2Vuc1Jlc2VydmUoMjAgKiAoMTAqKjYpICogMTAqKjE4KTsKICAgIG1haW5zYWxlLnNldEJvdW50eVRva2Vuc1Jlc2VydmUoMTAgKiAoMTAqKjYpICogMTAqKjE4KTsKICAgIG1haW5zYWxlLnNldE1heFRva2VuU3VwcGx5KDEwMCAqICgxMCoqNikgKiAxMCoqMTgpOwoKICAgIHByZXNhbGUuc2V0TWFpbnNhbGUobWFpbnNhbGUpOwoKICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICAgIHByZXNhbGUudHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgbWFpbnNhbGUudHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogIH0KCn0KCmNvbnRyYWN0IENvbmZpZ3VyYXRvciBpcyBPd25hYmxlIHsKCiAgUUJFVG9rZW4gcHVibGljIHRva2VuOyAKCiAgUHJlc2FsZSBwdWJsaWMgcHJlc2FsZTsKCiAgTWFpbnNhbGUgcHVibGljIG1haW5zYWxlOwoKICBmdW5jdGlvbiBkZXBsb3koKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRva2VuID0gbmV3IFFCRVRva2VuKCk7CgogICAgcHJlc2FsZSA9IG5ldyBQcmVzYWxlKCk7CgogICAgcHJlc2FsZS5zZXRUb2tlbih0b2tlbik7CiAgICBwcmVzYWxlLmFkZFN0YWdlKDYwMDAsMzAwMCk7CiAgICBwcmVzYWxlLnNldE11bHRpc2lnV2FsbGV0KDB4MTdGQjRBM2ZmMDk1RjQ0NTI4N0FBNkYzQWI2OTlhM0RDYUUzREM1Nik7CiAgICBwcmVzYWxlLnNldFN0YXJ0KDE1MTAxMjgwMDApOwogICAgcHJlc2FsZS5zZXRQZXJpb2QoMzEpOwogICAgcHJlc2FsZS5zZXRNaW5QcmljZSgxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgdG9rZW4uc2V0U2FsZUFnZW50KHByZXNhbGUpOwkKCiAgICBtYWluc2FsZSA9IG5ldyBNYWluc2FsZSgpOwoKICAgIG1haW5zYWxlLnNldFRva2VuKHRva2VuKTsKICAgIG1haW5zYWxlLmFkZFN0YWdlKDQ1MDAwLDE1MDApOwogICAgbWFpbnNhbGUuc2V0TXVsdGlzaWdXYWxsZXQoMHhkZkYwN0Y0MTVFMDBhMzM4MjA1QThFMjFDMzllQzAwN2ViMzdGNzQ2KTsKICAgIG1haW5zYWxlLnNldEZvdW5kZXJzVG9rZW5zV2FsbGV0KDB4N2JmQzlBZGFGM0QwN2FkQzRhMWQzRDAzY2RlNjU4MTEwMDg0NTU0MCk7CiAgICBtYWluc2FsZS5zZXRCb3VudHlUb2tlbnNXYWxsZXQoMHhjZThkODNCQTNjREQ0RTc0NDczMzk5MzY2NDM4NjE0NzhGODAzN0FEKTsKICAgIG1haW5zYWxlLnNldFVuc29sZFRva2Vuc1dhbGxldCgweGQ4OGEwOTIwRGM0QTA0NEE5NTg3NGY0QmQ0ODU4RmIwMTM1MTEyOTApOwogICAgbWFpbnNhbGUuc2V0U3RhcnQoMTUxNDc2NDgwMCk7CiAgICBtYWluc2FsZS5zZXRQZXJpb2QoNjApOwogICAgbWFpbnNhbGUuc2V0TG9ja1BlcmlvZCg5MCk7CiAgICBtYWluc2FsZS5zZXRNaW5QcmljZSgxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgbWFpbnNhbGUuc2V0Rm91bmRlcnNUb2tlbnNSZXNlcnZlKDIwICogKDEwKio2KSAqIDEwKioxOCk7CiAgICBtYWluc2FsZS5zZXRCb3VudHlUb2tlbnNSZXNlcnZlKDEwICogKDEwKio2KSAqIDEwKioxOCk7CiAgICBtYWluc2FsZS5zZXRNYXhUb2tlblN1cHBseSgxMDAgKiAoMTAqKjYpICogMTAqKjE4KTsKCiAgICBwcmVzYWxlLnNldE1haW5zYWxlKG1haW5zYWxlKTsKCiAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgICBwcmVzYWxlLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICAgIG1haW5zYWxlLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICB9Cn0='.
	

]
