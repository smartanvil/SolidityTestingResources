Class {
	#name : #SRTd697A61D5FB4e076125e0bE647f902b02bb3A0F1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd697A61D5FB4e076125e0bE647f902b02bb3A0F1 >> base64 [
	^ ''.
	

]
