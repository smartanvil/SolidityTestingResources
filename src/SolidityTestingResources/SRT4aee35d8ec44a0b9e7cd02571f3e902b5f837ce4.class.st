Class {
	#name : #SRT4aee35d8ec44a0b9e7cd02571f3e902b5f837ce4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4aee35d8ec44a0b9e7cd02571f3e902b5f837ce4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCi8vIEZpbGU6IGNvbnRyYWN0cy9CeXRlc0Rlc2VyaWFsaXplci5zb2wKCi8qCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKLyoKICogRGVzZXJpYWxpemUgYnl0ZXMgcGF5bG9hZHMuCiAqCiAqIFZhbHVlcyBhcmUgaW4gYmlnLWVuZGlhbiBieXRlIG9yZGVyLgogKgogKi8KbGlicmFyeSBCeXRlc0Rlc2VyaWFsaXplciB7CgogIC8qCiAgICogRXh0cmFjdCAyNTYtYml0IHdvcnRoIG9mIGRhdGEgZnJvbSB0aGUgYnl0ZXMgc3RyZWFtLgogICAqLwogIGZ1bmN0aW9uIHNsaWNlMzIoYnl0ZXMgYiwgdWludCBvZmZzZXQpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJ5dGVzMzIpIHsKICAgIGJ5dGVzMzIgb3V0OwoKICAgIGZvciAodWludCBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgb3V0IHw9IGJ5dGVzMzIoYltvZmZzZXQgKyBpXSAmIDB4RkYpID4+IChpICogOCk7CiAgICB9CiAgICByZXR1cm4gb3V0OwogIH0KCiAgLyoKICAgKiBFeHRyYWN0IEV0aGVyZXVtIGFkZHJlc3Mgd29ydGggb2YgZGF0YSBmcm9tIHRoZSBieXRlcyBzdHJlYW0uCiAgICovCiAgZnVuY3Rpb24gc2xpY2VBZGRyZXNzKGJ5dGVzIGIsIHVpbnQgb2Zmc2V0KSBwdWJsaWMgcHVyZSByZXR1cm5zIChhZGRyZXNzKSB7CiAgICBieXRlczMyIG91dDsKCiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7CiAgICAgIG91dCB8PSBieXRlczMyKGJbb2Zmc2V0ICsgaV0gJiAweEZGKSA+PiAoKGkrMTIpICogOCk7CiAgICB9CiAgICByZXR1cm4gYWRkcmVzcyh1aW50KG91dCkpOwogIH0KCiAgLyoKICAgKiBFeHRyYWN0IDEyOC1iaXQgd29ydGggb2YgZGF0YSBmcm9tIHRoZSBieXRlcyBzdHJlYW0uCiAgICovCiAgZnVuY3Rpb24gc2xpY2UxNihieXRlcyBiLCB1aW50IG9mZnNldCkgcHVibGljIHB1cmUgcmV0dXJucyAoYnl0ZXMxNikgewogICAgYnl0ZXMxNiBvdXQ7CgogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICBvdXQgfD0gYnl0ZXMxNihiW29mZnNldCArIGldICYgMHhGRikgPj4gKGkgKiA4KTsKICAgIH0KICAgIHJldHVybiBvdXQ7CiAgfQoKICAvKgogICAqIEV4dHJhY3QgMzItYml0IHdvcnRoIG9mIGRhdGEgZnJvbSB0aGUgYnl0ZXMgc3RyZWFtLgogICAqLwogIGZ1bmN0aW9uIHNsaWNlNChieXRlcyBiLCB1aW50IG9mZnNldCkgcHVibGljIHB1cmUgcmV0dXJucyAoYnl0ZXM0KSB7CiAgICBieXRlczQgb3V0OwoKICAgIGZvciAodWludCBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICBvdXQgfD0gYnl0ZXM0KGJbb2Zmc2V0ICsgaV0gJiAweEZGKSA+PiAoaSAqIDgpOwogICAgfQogICAgcmV0dXJuIG91dDsKICB9CgogIC8qCiAgICogRXh0cmFjdCAxNi1iaXQgd29ydGggb2YgZGF0YSBmcm9tIHRoZSBieXRlcyBzdHJlYW0uCiAgICovCiAgZnVuY3Rpb24gc2xpY2UyKGJ5dGVzIGIsIHVpbnQgb2Zmc2V0KSBwdWJsaWMgcHVyZSByZXR1cm5zIChieXRlczIpIHsKICAgIGJ5dGVzMiBvdXQ7CgogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgMjsgaSsrKSB7CiAgICAgIG91dCB8PSBieXRlczIoYltvZmZzZXQgKyBpXSAmIDB4RkYpID4+IChpICogOCk7CiAgICB9CiAgICByZXR1cm4gb3V0OwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9LWUNQYXlsb2FkRGVzZXJpYWxpemVyLnNvbAoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCi8qKgogKiBBIG1peC1pbiBjb250cmFjdCB0byBkZWNvZGUgQU1MIHBheWxvYWRzLgogKgogKiBAbm90aWNlIFRoaXMgc2hvdWxkIGJlIGEgbGlicmFyeSwgYnV0IGZvciB0aGUgY29tcGxleGl0eSBhbmQgdG9vbGNoYWluIGZyYWdpbGl0eSByaXNrcyBpbnZvbHZpbmcgb2YgbGlua2luZyBsaWJyYXJ5IGluc2lkZSBsaWJyYXJ5LCB3ZSBwdXQgdGhpcyBhcyBhIG1peC1pbi4KICovCmNvbnRyYWN0IEtZQ1BheWxvYWREZXNlcmlhbGl6ZXIgewoKICB1c2luZyBCeXRlc0Rlc2VyaWFsaXplciBmb3IgYnl0ZXM7CgogIC8qKgogICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgdGhlIGRhdGFmcmFtZSBhbmQgdW5wYWNrcyBpdAogICAqIFdlIGhhdmUgdGhlIHVzZXJzIEVUSCBhZGRyZXNzIGZvciB2ZXJpZmljYXRpb24gdGhhdCB0aGV5IGFyZSB1c2luZyB0aGVpciBvd24gc2lnbmF0dXJlCiAgICogQ3VzdG9tZXJJRCBzbyB3ZSBjYW4gdHJhY2sgY3VzdG9tZXIgcHVyY2hhc2VzCiAgICogTWluL01heCBFVEggdG8gaW52ZXN0IGZvciBBTUwvQ1RGIHB1cnBvc2VzIC0gdGhpcyBjYW4gYmUgc3VwcGxpZWQgYnkgdGhlIHVzZXIgT1IgYnkgdGhlIGJhY2stZW5kLgogICAqLwogIGZ1bmN0aW9uIGdldEtZQ1BheWxvYWQoYnl0ZXMgZGF0YWZyYW1lKSBwdWJsaWMgcHVyZSByZXR1cm5zKGFkZHJlc3Mgd2hpdGVsaXN0ZWRBZGRyZXNzLCB1aW50MTI4IGN1c3RvbWVySWQsIHVpbnQzMiBtaW5FdGgsIHVpbnQzMiBtYXhFdGgpIHsKICAgIGFkZHJlc3MgX3doaXRlbGlzdGVkQWRkcmVzcyA9IGRhdGFmcmFtZS5zbGljZUFkZHJlc3MoMCk7CiAgICB1aW50MTI4IF9jdXN0b21lcklkID0gdWludDEyOChkYXRhZnJhbWUuc2xpY2UxNigyMCkpOwogICAgdWludDMyIF9taW5FVEggPSB1aW50MzIoZGF0YWZyYW1lLnNsaWNlNCgzNikpOwogICAgdWludDMyIF9tYXhFVEggPSB1aW50MzIoZGF0YWZyYW1lLnNsaWNlNCg0MCkpOwogICAgcmV0dXJuIChfd2hpdGVsaXN0ZWRBZGRyZXNzLCBfY3VzdG9tZXJJZCwgX21pbkVUSCwgX21heEVUSCk7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvRVJDMjBCYXNpYy5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TYWZlTWF0aC5zb2wKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9CYXNpY1Rva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvRVJDMjAuc29sCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovLyBGaWxlOiBjb250cmFjdHMvU3RhbmRhcmRUb2tlbi5zb2wKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvUmVsZWFzYWJsZVRva2VuLnNvbAoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqCiAqIFNvbWUgb2YgdGhpcyBjb2RlIGhhcyBiZWVuIHVwZGF0ZWQgYnkgUGlja2VyaW5nd2FyZSBsdGQgdG8gZmFjaWxpYXR0ZSB0aGUgbmV3IHNvbGlkaXR5IGNvbXBpbGF0aW9uIHJlcXVpcmVtZW50cwogKi8KCnByYWdtYSBzb2xpZGl0eSAwLjQuMjE7CgoKCgovKioKICogRGVmaW5lIGludGVyZmFjZSBmb3IgcmVsZWFzaW5nIHRoZSB0b2tlbiB0cmFuc2ZlciBhZnRlciBhIHN1Y2Nlc3NmdWwgY3Jvd2RzYWxlLgogKi8KY29udHJhY3QgUmVsZWFzYWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewoKICAvKiBUaGUgZmluYWxpemVyIGNvbnRyYWN0IHRoYXQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4gKi8KICBhZGRyZXNzIHB1YmxpYyByZWxlYXNlQWdlbnQ7CgogIC8qKiBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4qLwogIGJvb2wgcHVibGljIHJlbGVhc2VkID0gZmFsc2U7CgogIC8qKiBNYXAgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gdHJhbnNmZXIgdG9rZW5zIHJlZ2FyZGxlc3Mgb2YgdGhlIGxvY2sgZG93biBwZXJpb2QuIFRoZXNlIGFyZSBjcm93ZHNhbGUgY29udHJhY3RzIGFuZCBwb3NzaWJsZSB0aGUgdGVhbSBtdWx0aXNpZyBpdHNlbGYuICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgdHJhbnNmZXJBZ2VudHM7CgogIC8qKgogICAqIExpbWl0IHRva2VuIHRyYW5zZmVyIHVudGlsIHRoZSBjcm93ZHNhbGUgaXMgb3Zlci4KICAgKgogICAqLwogIG1vZGlmaWVyIGNhblRyYW5zZmVyKGFkZHJlc3MgX3NlbmRlcikgewogICAgaWYoIXJlbGVhc2VkKSB7CiAgICAgICAgaWYoIXRyYW5zZmVyQWdlbnRzW19zZW5kZXJdKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgIH0KICAgIF87CiAgfQoKICAvKioKICAgKiBTZXQgdGhlIGNvbnRyYWN0IHRoYXQgY2FuIGNhbGwgcmVsZWFzZSBhbmQgbWFrZSB0aGUgdG9rZW4gdHJhbnNmZXJhYmxlLgogICAqCiAgICogRGVzaWduIGNob2ljZS4gQWxsb3cgcmVzZXQgdGhlIHJlbGVhc2UgYWdlbnQgdG8gZml4IGZhdCBmaW5nZXIgbWlzdGFrZXMuCiAgICovCiAgZnVuY3Rpb24gc2V0UmVsZWFzZUFnZW50KCkgb25seU93bmVyIGluUmVsZWFzZVN0YXRlKGZhbHNlKSBwdWJsaWMgewoKICAgIC8vIFdlIGRvbid0IGRvIGludGVyZmFjZSBjaGVjayBoZXJlIGFzIHdlIG1pZ2h0IHdhbnQgdG8gYSBub3JtYWwgd2FsbGV0IGFkZHJlc3MgdG8gYWN0IGFzIGEgcmVsZWFzZSBhZ2VudAogICAgcmVsZWFzZUFnZW50ID0gb3duZXI7CiAgfQoKICAvKioKICAgKiBPd25lciBjYW4gYWxsb3cgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKGEgY3Jvd2RzYWxlIGNvbnRyYWN0KSB0byB0cmFuc2ZlciB0b2tlbnMgZGVzcGl0ZSB0aGUgbG9jayB1cCBwZXJpb2QuCiAgICovCiAgZnVuY3Rpb24gc2V0VHJhbnNmZXJBZ2VudChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUpIG9ubHlSZWxlYXNlQWdlbnQgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CiAgICB0cmFuc2ZlckFnZW50c1thZGRyXSA9IHN0YXRlOwogIH0KCiAgLyoqCiAgICogT25lIHdheSBmdW5jdGlvbiB0byByZWxlYXNlIHRoZSB0b2tlbnMgdG8gdGhlIHdpbGQuCiAgICoKICAgKiBDYW4gYmUgY2FsbGVkIG9ubHkgZnJvbSB0aGUgcmVsZWFzZSBhZ2VudCB0aGF0IGlzIHRoZSBmaW5hbCBJQ08gY29udHJhY3QuIEl0IGlzIG9ubHkgY2FsbGVkIGlmIHRoZSBjcm93ZHNhbGUgaGFzIGJlZW4gc3VjY2VzcyAoZmlyc3QgbWlsZXN0b25lIHJlYWNoZWQpLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VUb2tlblRyYW5zZmVyKCkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgewogICAgcmVsZWFzZWQgPSB0cnVlOwogIH0KCiAgLyoqIFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYmVmb3JlIG9yIGFmdGVyIHRoZSB0b2tlbnMgaGF2ZSBiZWVuIHJlbGVhc2VzZCAqLwogIG1vZGlmaWVyIGluUmVsZWFzZVN0YXRlKGJvb2wgcmVsZWFzZVN0YXRlKSB7CiAgICBpZihyZWxlYXNlU3RhdGUgIT0gcmVsZWFzZWQpIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIF87CiAgfQoKICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSBhIHdoaXRlbGlzdGVkIHJlbGVhc2UgYWdlbnQuICovCiAgbW9kaWZpZXIgb25seVJlbGVhc2VBZ2VudCgpIHsKICAgIGlmKG1zZy5zZW5kZXIgIT0gcmVsZWFzZUFnZW50KSB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBjYW5UcmFuc2Zlcihtc2cuc2VuZGVyKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAvLyBDYWxsIFN0YW5kYXJkVG9rZW4udHJhbnNmZXIoKQogICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20pIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIC8vIENhbGwgU3RhbmRhcmRUb2tlbi50cmFuc2ZlckZvcm0oKQogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9NaW50YWJsZVRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqIAogKiBTb21lIG9mIHRoaXMgY29kZSBoYXMgYmVlbiBjaGFuZ2VkIGJ5IFBpY2tlcmluZ3dhcmUgbHRkIHRvIGZhY2lsaXRhdGUgc29saWRpdGllcyBuZXcgY29tcGlsYXRpb24gcmVxdWlyZW1lbnRzCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBSZWxlYXNhYmxlVG9rZW4gewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQU1MVG9rZW4uc29sCgovKioKICogVGhpcyBjb250cmFjdCBoYXMgYmVlbiB3cml0dGVuIGJ5IFBpY2tlcmluZ3dhcmUgbHRkIGluIHNvbWUgYXJlYXMgdG8gZmFjaWxpdGF0ZSBjdXN0b20gY3J3b2RzYWxlIGZlYXR1cmVzCiAqLwoKcHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCgoKLyoqCiAqIFRoZSBBTUwgVG9rZW4KICoKICogVGhpcyBzdWJzZXQgb2YgTWludGFibGVDcm93ZHNhbGVUb2tlbiBnaXZlcyB0aGUgT3duZXIgYSBwb3NzaWJpbGl0eSB0bwogKiByZWNsYWltIHRva2VucyBmcm9tIGEgcGFydGljaXBhbnQgYmVmb3JlIHRoZSB0b2tlbiBpcyByZWxlYXNlZAogKiBhZnRlciBhIHBhcnRpY2lwYW50IGhhcyBmYWlsZWQgYSBwcm9sb25nZWQgQU1MIHByb2Nlc3MuCiAqCiAqIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgYW50aS1tb25leSBsYXVuZGVyaW5nIHByb2Nlc3MgZGVwZW5kcyBvbiBibG9ja2NoYWluIGRhdGEuCiAqIFRoZSBkYXRhIGlzIG5vdCBhdmFpbGFibGUgYmVmb3JlIHRoZSB0cmFuc2FjdGlvbiBhbmQgbm90IGZvciB0aGUgc21hcnQgY29udHJhY3QuCiAqIFRodXMsIHdlIG5lZWQgdG8gaW1wbGVtZW50IGxvZ2ljIHRvIGhhbmRsZSBBTUwgZmFpbHVyZSBjYXNlcyBwb3N0IHBheW1lbnQuCiAqIFdlIGdpdmUgYSB0aW1lIHdpbmRvdyBiZWZvcmUgdGhlIHRva2VuIHJlbGVhc2UgZm9yIHRoZSB0b2tlbiBzYWxlIG93bmVycyB0bwogKiBjb21wbGV0ZSB0aGUgQU1MIGFuZCBjbGF3IGJhY2sgYWxsIHRva2VuIHRyYW5zYWN0aW9ucyB0aGF0IHdlcmUKICogY2F1c2VkIGJ5IHJlamVjdGVkIHB1cmNoYXNlcy4KICovCmNvbnRyYWN0IEFNTFRva2VuIGlzIE1pbnRhYmxlVG9rZW4gewoKICAvLyBBbiBldmVudCB3aGVuIHRoZSBvd25lciBoYXMgcmVjbGFpbWVkIG5vbi1yZWxlYXNlZCB0b2tlbnMKICBldmVudCBSZWNsYWltZWRBbGxBbmRCdXJuZWQoYWRkcmVzcyBjbGFpbWVkQnksIGFkZHJlc3MgZnJvbVdob20sIHVpbnQgYW1vdW50KTsKCiAgICAvLyBBbiBldmVudCB3aGVuIHRoZSBvd25lciBoYXMgcmVjbGFpbWVkIG5vbi1yZWxlYXNlZCB0b2tlbnMKICBldmVudCBSZWNsYWltQW5kQnVybmVkKGFkZHJlc3MgY2xhaW1lZEJ5LCBhZGRyZXNzIGZyb21XaG9tLCB1aW50IGFtb3VudCk7CgogIC8vLyBAZGV2IEhlcmUgdGhlIG93bmVyIGNhbiByZWNsYWltIHRoZSB0b2tlbnMgZnJvbSBhIHBhcnRpY2lwYW50IGlmCiAgLy8vICAgICAgdGhlIHRva2VuIGlzIG5vdCByZWxlYXNlZCB5ZXQuIFJlZnVuZCB3aWxsIGJlIGhhbmRsZWQgaW4gc2FsZSBjb250cmFjdC4KICAvLy8gV2UgYWxzbyBidXJuIHRoZSB0b2tlbnMgaW4gdGhlIGludGVyZXN0IG9mIGVjb25vbWljIHZhbHVlIHRvIHRoZSB0b2tlbiBob2xkZXIKICAvLy8gQHBhcmFtIGZyb21XaG9tIGFkZHJlc3Mgb2YgdGhlIHBhcnRpY2lwYW50IHdob3NlIHRva2VucyB3ZSB3YW50IHRvIGNsYWltCiAgZnVuY3Rpb24gcmVjbGFpbUFsbEFuZEJ1cm4oYWRkcmVzcyBmcm9tV2hvbSkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHsKICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZU9mKGZyb21XaG9tKTsgICAgCiAgICBiYWxhbmNlc1tmcm9tV2hvbV0gPSAwOwogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoYW1vdW50KTsKICAgIAogICAgUmVjbGFpbWVkQWxsQW5kQnVybmVkKG1zZy5zZW5kZXIsIGZyb21XaG9tLCBhbW91bnQpOwogIH0KCiAgLy8vIEBkZXYgSGVyZSB0aGUgb3duZXIgY2FuIHJlY2xhaW0gdGhlIHRva2VucyBmcm9tIGEgcGFydGljaXBhbnQgaWYKICAvLy8gICAgICB0aGUgdG9rZW4gaXMgbm90IHJlbGVhc2VkIHlldC4gUmVmdW5kIHdpbGwgYmUgaGFuZGxlZCBpbiBzYWxlIGNvbnRyYWN0LgogIC8vLyBXZSBhbHNvIGJ1cm4gdGhlIHRva2VucyBpbiB0aGUgaW50ZXJlc3Qgb2YgZWNvbm9taWMgdmFsdWUgdG8gdGhlIHRva2VuIGhvbGRlcgogIC8vLyBAcGFyYW0gZnJvbVdob20gYWRkcmVzcyBvZiB0aGUgcGFydGljaXBhbnQgd2hvc2UgdG9rZW5zIHdlIHdhbnQgdG8gY2xhaW0KICBmdW5jdGlvbiByZWNsYWltQW5kQnVybihhZGRyZXNzIGZyb21XaG9tLCB1aW50MjU2IGFtb3VudCkgcHVibGljIG9ubHlSZWxlYXNlQWdlbnQgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHsgICAgICAgCiAgICBiYWxhbmNlc1tmcm9tV2hvbV0gPSBiYWxhbmNlc1tmcm9tV2hvbV0uc3ViKGFtb3VudCk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihhbW91bnQpOwogICAgCiAgICBSZWNsYWltQW5kQnVybmVkKG1zZy5zZW5kZXIsIGZyb21XaG9tLCBhbW91bnQpOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL1BpY2tUb2tlbi5zb2wKCi8qCiAqIFRoaXMgdG9rZW4gaXMgcGFydCBvZiBQaWNrZXJpbmd3YXJlIGx0ZHMgc21hcnQgY29udHJhY3RzCiAqIEl0IGlzIHVzZWQgdG8gc3BlY2lmeSBjZXJ0YWluIGRldGFpbHMgYWJvdXQgdGhlIHRva2VuIHVwb24gcmVsZWFzZQogKi8KCgpjb250cmFjdCBQaWNrVG9rZW4gaXMgQU1MVG9rZW4gewogIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJBWDEgTWluaW5nIHRva2VuIjsKICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJBWDEiOwogIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDU7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TdG9wcGFibGUuc29sCgpjb250cmFjdCBTdG9wcGFibGUgaXMgT3duYWJsZSB7CiAgYm9vbCBwdWJsaWMgaGFsdGVkOwoKICBldmVudCBTYWxlU3RvcHBlZChhZGRyZXNzIG93bmVyLCB1aW50MjU2IGRhdGV0aW1lKTsKCiAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoIWhhbHRlZCk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gaGFzSGFsdGVkKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sIGlzSGFsdGVkKSB7CiAgCXJldHVybiBoYWx0ZWQ7CiAgfQoKICAgLy8gY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbWVyZ2VuY3ksIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICBmdW5jdGlvbiBzdG9wSUNPKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIGhhbHRlZCA9IHRydWU7CiAgICBTYWxlU3RvcHBlZChtc2cuc2VuZGVyLCBub3cpOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0Nyb3dkc2FsZS5zb2wKCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlCiAqIEBkZXYgQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIENyb3dkc2FsZXMgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAqIHRva2VuIHB1cmNoYXNlcyBhbmQgdGhlIGNyb3dkc2FsZSB3aWxsIGFzc2lnbiB0aGVtIHRva2VucyBiYXNlZAogKiBvbiBhIHRva2VuIHBlciBFVEggcmF0ZS4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqCiAqIFRoaXMgYmFzZSBjb250cmFjdCBoYXMgYmVlbiBjaGFuZ2VkIGluIGNlcnRhaW4gYXJlYXMgYnkgUGlja2VyaW5nd2FyZSBsdGQgdG8gZmFjaWxpdGF0ZSBleHRyYSBmdW5jdGlvbmFsaXR5CiAqLwpjb250cmFjdCBDcm93ZHNhbGUgaXMgU3RvcHBhYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBQaWNrVG9rZW4gcHVibGljIHRva2VuOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CiAgYWRkcmVzcyBwdWJsaWMgY29udHJhY3RBZGRyOwogIAogIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgdWludDI1NiBwdWJsaWMgcmF0ZTsKCiAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CiAgdWludDI1NiBwdWJsaWMgcHJlc2FsZVdlaVJhaXNlZDsKCiAgLy8gYW1vdW50IG9mIHRva2VucyBzZW50CiAgdWludDI1NiBwdWJsaWMgdG9rZW5zU2VudDsKCiAgLy8gVGhlc2Ugc3RvcmUgYmFsYW5jZXMgb2YgcGFydGljaXBhbnRzIGJ5IElELCBhZGRyZXNzIGFuZCBpbiB3ZWksIHByZS1zYWxlIHdlaSBhbmQgdG9rZW5zCiAgbWFwcGluZyh1aW50MTI4ID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlUGVySUQ7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBwcmVzYWxlQmFsYW5jZU9mOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdG9rZW5CYWxhbmNlT2Y7CgogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgZGF0ZXRpbWUpOwoKICAvKgogICAqIENvbnRydWN0b3IKICAgKiBUaGlzIGluaXRpYWxpc2VzIHRoZSBiYXNpYyBjcm93ZHNhbGUgZGF0YQogICAqIEl0IHRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhpcyB0b2tlbiB0byB0aGUgY2hvc2VuIGJlbmVmaWNpYXJ5IAogICovCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0LCBQaWNrVG9rZW4gX3Rva2VuKSBwdWJsaWMgewogICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyk7CiAgICByZXF1aXJlKF9lbmRUaW1lID49IF9zdGFydFRpbWUpOwogICAgcmVxdWlyZShfcmF0ZSA+IDApOwogICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwoKICAgIHRva2VuID0gX3Rva2VuOwogICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIHJhdGUgPSBfcmF0ZTsKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICB0cmFuc2Zlck93bmVyc2hpcChfd2FsbGV0KTsKICB9CgogIC8qCiAgICogVGhpcyBtZXRob2QgaGFzIGJlZW4gY2hhbmdlZCBieSBQaWNrZXJpbmd3YXJlIGx0ZAogICAqIFdlIGhhdmUgc3BsaXQgdGhpcyBtZXRob2QgZG93biBpbnRvIG92ZXJpZGFibGUgZnVuY3Rpb25zIHdoaWNoIG1heSBhZmZlY3QgaG93IHVzZXJzIHB1cmNoYXNlIHRva2VucwogICAqIFdlIGFsc28gdGFrZSBpbiBhIGN1c3RvbWVySUQgKFVVaUQgdjQpIHdoaWNoIHdlIHN0b3JlIGluIG91ciBiYWNrLWVuZCBpbiBvcmRlciB0byB0cmFjayB1c2VycyBwYXJ0aWNpcGF0aW9uCiAgKi8gCiAgZnVuY3Rpb24gYnV5VG9rZW5zKHVpbnQxMjggYnV5ZXIpIGludGVybmFsIHN0b3BJbkVtZXJnZW5jeSB7CiAgICByZXF1aXJlKGJ1eWVyICE9IDApOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgdWludDI1NiB0b2tlbnMgPSB0b2tlbnNUb1JlY2lldmUod2VpQW1vdW50KTsKCiAgICAvLyBNVVNUIERPIFJFUVVJUkUgQUZURVIgdG9rZW5zIGFyZSBjYWxjdWxhdGVkIHRvIGNoZWNrIGZvciBjYXAgcmVzdHJpY3Rpb25zIGluIHN0YWdlcwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKHRva2VucykpOwoKICAgIC8vIFdlIG1vdmUgdGhlIHBhcnRpY2lwYW50cyBzbGlkZXJzIGJlZm9yZSB3ZSBtaW50IHRoZSB0b2tlbnMgdG8gcHJldmVudCByZS1lbnRyYW5jeQogICAgZmluYWxpemVTYWxlKHdlaUFtb3VudCwgdG9rZW5zLCBidXllcik7CiAgICBwcm9kdWNlVG9rZW5zKG1zZy5zZW5kZXIsIHdlaUFtb3VudCwgdG9rZW5zKTsKICB9CgogIC8vIFRoaXMgZnVuY3Rpb24gd2FzIGNyZWF0ZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBhIHBhcmVudCBjb250cmFjdAogIGZ1bmN0aW9uIHByb2R1Y2VUb2tlbnMoYWRkcmVzcyBidXllciwgdWludDI1NiB3ZWlBbW91bnQsIHVpbnQyNTYgdG9rZW5zKSBpbnRlcm5hbCB7CiAgICB0b2tlbi5taW50KGJ1eWVyLCB0b2tlbnMpOwogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBidXllciwgd2VpQW1vdW50LCB0b2tlbnMsIG5vdyk7CiAgfQoKICAvLyBUaGlzIHdhcyBjcmVhdGVkIHRvIGJlIG92ZXJyaWRlbiBieSBzdGFnZXMgaW1wbGVtZW50YXRpb24KICAvLyBJdCB3aWxsIGFkanVzdCB0aGUgc3RhZ2Ugc2xpZGVycyBhY2NvcmRpbmdseSBpZiBuZWVkZWQKICBmdW5jdGlvbiBmaW5hbGl6ZVNhbGUodWludDI1NiBfd2VpQW1vdW50LCB1aW50MjU2IF90b2tlbnMsIHVpbnQxMjggX2J1eWVyKSBpbnRlcm5hbCB7CiAgICAvLyBDb2xsZWN0IEVUSCBhbmQgc2VuZCB0aGVtIGEgdG9rZW4gaW4gcmV0dXJuCiAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uYWRkKF93ZWlBbW91bnQpOwogICAgdG9rZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXS5hZGQoX3Rva2Vucyk7CiAgICBiYWxhbmNlUGVySURbX2J1eWVyXSA9IGJhbGFuY2VQZXJJRFtfYnV5ZXJdLmFkZChfd2VpQW1vdW50KTsKCiAgICAvLyB1cGRhdGUgc3RhdGUKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQoX3dlaUFtb3VudCk7CiAgICB0b2tlbnNTZW50ID0gdG9rZW5zU2VudC5hZGQoX3Rva2Vucyk7CiAgfQogIAogIC8vIFRoaXMgd2FzIGNyZWF0ZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSB0aGUgc3RhZ2VzIGltcGxlbWVudGF0aW9uCiAgLy8gQWdhaW4sIHRoaXMgaXMgZGVwZW5kZW50IG9uIHRoZSBwcmljZSBvZiB0b2tlbnMgd2hpY2ggbWF5IG9yIG1heSBub3QgYmUgY29sbGVjdGVkIGluIHN0YWdlcwogIGZ1bmN0aW9uIHRva2Vuc1RvUmVjaWV2ZSh1aW50MjU2IF93ZWkpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiB0b2tlbnMpIHsKICAgIHJldHVybiBfd2VpLmRpdihyYXRlKTsKICB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgZnVuY3Rpb24gc3VjY2Vzc2Z1bFdpdGhkcmF3KCkgZXh0ZXJuYWwgb25seU93bmVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICByZXF1aXJlKGhhc0VuZGVkKCkpOwoKICAgIG93bmVyLnRyYW5zZmVyKHdlaVJhaXNlZCk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgLy8gUmVjZWl2ZXMgdG9rZW5zIHRvIHNlbmQgYXMgdmFyaWFibGUgZm9yIGN1c3RvbSBzdGFnZSBpbXBsZW1lbnRhdGlvbgogIC8vIEhhcyBhbiB1bnVzZWQgdmFyaWFibGUgX3Rva2VucyB3aGljaCBpcyBuZWNlc3NhcnkgZm9yIGNhcHBlZCBzYWxlIGltcGxlbWVudGF0aW9uCiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSh1aW50MjU2IF90b2tlbnMpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0NhcHBlZENyb3dkc2FsZS5zb2wKCi8qKgogKiBAdGl0bGUgQ2FwcGVkQ3Jvd2RzYWxlCiAqIEBkZXYgRXh0ZW5zaW9uIG9mIENyb3dkc2FsZSB3aXRoIGEgbWF4IGFtb3VudCBvZiBmdW5kcyByYWlzZWQKICovCmNvbnRyYWN0IENhcHBlZENyb3dkc2FsZSBpcyBDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICB1aW50MjU2IHB1YmxpYyBzb2Z0Q2FwOwogIHVpbnQyNTYgcHVibGljIGhhcmRDYXA7CiAgdWludDI1NiBwdWJsaWMgd2l0aGRyYXduOwogIGJvb2wgcHVibGljIGNhbldpdGhkcmF3OwogIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwoKICBldmVudCBCZW5lZmljaWFyeVdpdGhkcmF3YWwoYWRkcmVzcyBhZG1pbiwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgZGF0ZXRpbWUpOwoKICAvLyBDaGFuZ2VkIGltcGxlbnRhdGlvbiB0byBpbmNsdWRlIHNvZnQvaGFyZCBjYXBzCiAgZnVuY3Rpb24gQ2FwcGVkQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0LCBhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfc29mdENhcCwgdWludDI1NiBfaGFyZENhcCwgUGlja1Rva2VuIF90b2tlbikgCiAgICBDcm93ZHNhbGUoX3N0YXJ0VGltZSwgX2VuZFRpbWUsIF9yYXRlLCBfd2FsbGV0LCBfdG9rZW4pCiAgICAgIHB1YmxpYyB7CgogICAgcmVxdWlyZShfaGFyZENhcCA+IDAgJiYgX3NvZnRDYXAgPiAwICYmIF9zb2Z0Q2FwIDwgX2hhcmRDYXApOwoKICAgIHNvZnRDYXAgPSBfc29mdENhcDsKICAgIGhhcmRDYXAgPSBfaGFyZENhcDsKICAgIHdpdGhkcmF3biA9IDA7CiAgICBjYW5XaXRoZHJhdyA9IGZhbHNlOwogICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CiAgfQoKICAvLyBvdmVycmlkaW5nIENyb3dkc2FsZSN2YWxpZFB1cmNoYXNlIHRvIGFkZCBleHRyYSBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UodWludDI1NiBfdG9rZW5zKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgd2l0aGluQ2FwID0gdG9rZW5zU2VudC5hZGQoX3Rva2VucykgPD0gaGFyZENhcDsKICAgIHJldHVybiBzdXBlci52YWxpZFB1cmNoYXNlKF90b2tlbnMpICYmIHdpdGhpbkNhcDsKICB9CiAgCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjaGFzRW5kZWQgdG8gYWRkIGNhcCBsb2dpYwogIC8vIEByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIGNhcFJlYWNoZWQgPSB0b2tlbnNTZW50ID49IGhhcmRDYXA7CiAgICByZXR1cm4gc3VwZXIuaGFzRW5kZWQoKSB8fCBjYXBSZWFjaGVkOwogIH0KCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjc3VjY2Vzc2Z1bFdpdGhkcmF3IHRvIGFkZCBjYXAgbG9naWMKICAvLyBvbmx5IGFsbG93IGJlbmVmaWNpYXJ5IHRvIHdpdGhkcmF3IGlmIHNvZnRjYXAgaGFzIGJlZW4gcmVhY2hlZAogIC8vIFVzZXMgd2l0aGRyYXduIGluY2FzZSBhIHBhcmVudCBjb250cmFjdCByZXF1aXJlcyB3aXRoZHJhd2luZyBzb2Z0Y2FwIGVhcmx5CiAgZnVuY3Rpb24gc3VjY2Vzc2Z1bFdpdGhkcmF3KCkgZXh0ZXJuYWwgb25seU93bmVyIHN0b3BJbkVtZXJnZW5jeSB7CiAgICByZXF1aXJlKGhhc0VuZGVkKCkpOwogICAgLy8gVGhpcyBpcyB1c2VkIGZvciBleHRyYSBmdW5jdGlvbmFsaXR5IGlmIG5lY2Vzc2FyeSwgaS5lLiBLWUMgY2hlY2tzCiAgICByZXF1aXJlKGNhbldpdGhkcmF3KTsKICAgIHJlcXVpcmUodG9rZW5zU2VudCA+IHNvZnRDYXApOwoKICAgIHVpbnQyNTYgd2l0aGRyYXdhbEFtb3VudCA9IHdlaVJhaXNlZC5zdWIod2l0aGRyYXduKTsKCiAgICB3aXRoZHJhd24gPSB3aXRoZHJhd24uYWRkKHdpdGhkcmF3YWxBbW91bnQpOwoKICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKHdpdGhkcmF3YWxBbW91bnQpOwoKICAgIEJlbmVmaWNpYXJ5V2l0aGRyYXdhbChtc2cuc2VuZGVyLCB3aXRoZHJhd2FsQW1vdW50LCBub3cpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TYWxlU3RhZ2VzTGliLnNvbAoKLyoKICogU2FsZVN0YWdlc0xpYiBpcyBhIHBhcnQgb2YgUGlja2VyaW5nd2FyZSBsdGQncyBzbWFydCBjb250cmFjdHMKICogSXRzIGludGVuZGVkIHVzZSBpcyB0byBhYnN0cmFjdCB0aGUgaW1wbGVtZW50YXRpb24gb2Ygc3RhZ2VzIGF3YXkgZnJvbSBhIGNvbnRyYWN0IHRvIGVhc2UgZGVwbG95bWVudCBhbmQgY29kZWwgbGVuZ3RoCiAqIEl0IHVzZXMgYSBzdGFnZSBzdHJ1Y3QgdG8gc3RvcmUgc3BlY2lmaWMgZGV0YWlscyBhYm91dCBlYWNoIHN0YWdlCiAqIEl0IGhhcyBzZXZlcmFsIGZ1bmN0aW9ucyB3aGljaCBhcmUgdXNlZCB0byBnZXQvY2hhbmdlIHRoaXMgZGF0YQoqLwoKbGlicmFyeSBTYWxlU3RhZ2VzTGliIHsKCXVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKCS8vIFN0b3JlcyBTdGFnZSBpbXBsZW1lbnRhdGlvbgoJc3RydWN0IFN0YWdlewogICAgICAgIHVpbnQyNTYgZGVhZGxpbmU7CiAgICAgICAgdWludDI1NiB0b2tlblByaWNlOwogICAgICAgIHVpbnQyNTYgdG9rZW5zU29sZDsKICAgICAgICB1aW50MjU2IG1pbmltdW1CdXk7CiAgICAgICAgdWludDI1NiBjYXA7Cgl9CgoJLy8gVGhlIHN0cnVjdCB0aGF0IGlzIHN0b3JlZCBieSB0aGUgY29udHJhY3QKCS8vIENvbnRhaW5zIGNvdW50ZXIgdG8gaXRlcmF0ZSB0aHJvdWdoIG1hcCBvZiBzdGFnZXMKCXN0cnVjdCBTdGFnZVN0b3JhZ2UgewogCQltYXBwaW5nKHVpbnQ4ID0+IFN0YWdlKSBzdGFnZXM7CiAJCXVpbnQ4IHN0YWdlQ291bnQ7Cgl9CgoJLy8gSW5pdGlsaWFzZSB0aGUgc3RhZ2Vjb3VudCB0byAwCglmdW5jdGlvbiBpbml0KFN0YWdlU3RvcmFnZSBzdG9yYWdlIHNlbGYpIHB1YmxpYyB7CgkJc2VsZi5zdGFnZUNvdW50ID0gMDsKCX0KCgkvLyBDcmVhdGUgc3RhZ2UgYWRkcyBuZXcgc3RhZ2UgdG8gc3RhZ2VzIG1hcCBhbmQgaW5jcmVtZW50cyBzdGFnZSBjb3VudAoJZnVuY3Rpb24gY3JlYXRlU3RhZ2UoCgkJU3RhZ2VTdG9yYWdlIHN0b3JhZ2Ugc2VsZiwgCgkJdWludDggX3N0YWdlLCAKCQl1aW50MjU2IF9kZWFkbGluZSwgCgkJdWludDI1NiBfcHJpY2UsCgkJdWludDI1NiBfbWluaW11bSwKCQl1aW50MjU2IF9jYXAKCSkgaW50ZXJuYWwgewogICAgICAgIC8vIEVuc3VyZXMgc3RhZ2VzIGNhbm5vdCBvdmVybGFwIGVhY2ggb3RoZXIKICAgICAgICB1aW50OCBwcmV2U3RhZ2UgPSBfc3RhZ2UgLSAxOwogICAgICAgIHJlcXVpcmUoc2VsZi5zdGFnZXNbcHJldlN0YWdlXS5kZWFkbGluZSA8IF9kZWFkbGluZSk7CgkJCiAgICAgICAgc2VsZi5zdGFnZXNbX3N0YWdlXS5kZWFkbGluZSA9IF9kZWFkbGluZTsKCQlzZWxmLnN0YWdlc1tfc3RhZ2VdLnRva2VuUHJpY2UgPSBfcHJpY2U7CgkJc2VsZi5zdGFnZXNbX3N0YWdlXS50b2tlbnNTb2xkID0gMDsKCQlzZWxmLnN0YWdlc1tfc3RhZ2VdLm1pbmltdW1CdXkgPSBfbWluaW11bTsKCQlzZWxmLnN0YWdlc1tfc3RhZ2VdLmNhcCA9IF9jYXA7CgkJc2VsZi5zdGFnZUNvdW50ID0gc2VsZi5zdGFnZUNvdW50ICsgMTsKCX0KCiAgIC8qCiAgICAqIENyb3dkZnVuZCBzdGF0ZSBtYWNoaW5lIG1hbmFnZW1lbnQuCiAgICAqCiAgICAqIFdlIG1ha2UgaXQgYSBmdW5jdGlvbiBhbmQgZG8gbm90IGFzc2lnbiB0aGUgcmVzdWx0IHRvIGEgdmFyaWFibGUsIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSBvZiB0aGUgdmFyaWFibGUgYmVpbmcgc3RhbGUuCiAgICAqIEVhY2ggb25lIG9mIHRoZXNlIGNvbmRpdGlvbnMgY2hlY2tzIGlmIHRoZSB0aW1lIGhhcyBwYXNzZWQgaW50byBhbm90aGVyIHN0YWdlIGFuZCB0aGVyZWZvcmUsIGFjdCBhcyBhcHByb3ByaWF0ZQogICAgKi8KICAgIGZ1bmN0aW9uIGdldFN0YWdlKFN0YWdlU3RvcmFnZSBzdG9yYWdlIHNlbGYpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQ4IHN0YWdlKSB7CiAgICAgICAgdWludDggdGhpc1N0YWdlID0gc2VsZi5zdGFnZUNvdW50ICsgMTsKCiAgICAgICAgZm9yICh1aW50OCBpID0gMDsgaSA8IHRoaXNTdGFnZTsgaSsrKSB7CiAgICAgICAgICAgIGlmKG5vdyA8PSBzZWxmLnN0YWdlc1tpXS5kZWFkbGluZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXNTdGFnZTsKICAgIH0KCiAgICAvLyBCb3RoIG9mIHRoZSBiZWxvdyBhcmUgY2hlY2tlZCBvbiB0aGUgb3ZlcnJpZGRlbiB2YWxpZFB1cmNoYXNlKCkgZnVuY3Rpb24KICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdG9rZW5zIHRoZXkncmUgYWJvdXQgdG8gcHVyY2hhc2UgaXMgYWJvdmUgdGhlIG1pbmltdW0gZm9yIHRoaXMgc3RhZ2UKICAgIGZ1bmN0aW9uIGNoZWNrTWluaW11bShTdGFnZVN0b3JhZ2Ugc3RvcmFnZSBzZWxmLCB1aW50OCBfc3RhZ2UsIHVpbnQyNTYgX3Rva2VucykgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sIGlzVmFsaWQpIHsKICAgIAlpZihfdG9rZW5zIDwgc2VsZi5zdGFnZXNbX3N0YWdlXS5taW5pbXVtQnV5KXsKICAgIAkJcmV0dXJuIGZhbHNlOwogICAgCX0gZWxzZSB7CiAgICAJCXJldHVybiB0cnVlOwogICAgCX0KICAgIH0KCiAgICAvLyBCb3RoIG9mIHRoZSBiZWxvdyBhcmUgY2hlY2tlZCBvbiB0aGUgb3ZlcnJpZGRlbiB2YWxpZFB1cmNoYXNlKCkgZnVuY3Rpb24KICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdG9rZW5zIHRoZXkncmUgYWJvdXQgdG8gcHVyY2hhc2UgaXMgYWJvdmUgdGhlIG1pbmltdW0gZm9yIHRoaXMgc3RhZ2UKICAgIGZ1bmN0aW9uIGNoYW5nZURlYWRsaW5lKFN0YWdlU3RvcmFnZSBzdG9yYWdlIHNlbGYsIHVpbnQ4IF9zdGFnZSwgdWludDI1NiBfZGVhZGxpbmUpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKHNlbGYuc3RhZ2VzW19zdGFnZV0uZGVhZGxpbmUgPiBub3cpOwogICAgICAgIHNlbGYuc3RhZ2VzW19zdGFnZV0uZGVhZGxpbmUgPSBfZGVhZGxpbmU7CiAgICB9CgogICAgLy8gQ2hlY2tzIHRvIHNlZSBpZiB0aGUgdG9rZW5zIHRoZXkncmUgYWJvdXQgdG8gcHVyY2hhc2UgaXMgYmVsb3cgdGhlIGNhcCBmb3IgdGhpcyBzdGFnZQogICAgZnVuY3Rpb24gY2hlY2tDYXAoU3RhZ2VTdG9yYWdlIHN0b3JhZ2Ugc2VsZiwgdWludDggX3N0YWdlLCB1aW50MjU2IF90b2tlbnMpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCBpc1ZhbGlkKSB7CiAgICAJdWludDI1NiB0b3RhbFRva2VucyA9IHNlbGYuc3RhZ2VzW19zdGFnZV0udG9rZW5zU29sZC5hZGQoX3Rva2Vucyk7CgogICAgCWlmKHRvdGFsVG9rZW5zID4gc2VsZi5zdGFnZXNbX3N0YWdlXS5jYXApewogICAgCQlyZXR1cm4gZmFsc2U7CiAgICAJfSBlbHNlIHsKICAgIAkJcmV0dXJuIHRydWU7CiAgICAJfQogICAgfQoKICAgIC8vIFJlZnVuZCBhIHBhcnRpY3VsYXIgcGFydGljaXBhbnQsIGJ5IG1vdmluZyB0aGUgc2xpZGVycyBvZiBzdGFnZXMgaGUgcGFydGljaXBhdGVkIGluCiAgICBmdW5jdGlvbiByZWZ1bmRQYXJ0aWNpcGFudChTdGFnZVN0b3JhZ2Ugc3RvcmFnZSBzZWxmLCB1aW50MjU2IHN0YWdlMSwgdWludDI1NiBzdGFnZTIsIHVpbnQyNTYgc3RhZ2UzLCB1aW50MjU2IHN0YWdlNCkgaW50ZXJuYWwgewogICAgICAgIHNlbGYuc3RhZ2VzWzFdLnRva2Vuc1NvbGQgPSBzZWxmLnN0YWdlc1sxXS50b2tlbnNTb2xkLnN1YihzdGFnZTEpOwogICAgICAgIHNlbGYuc3RhZ2VzWzJdLnRva2Vuc1NvbGQgPSBzZWxmLnN0YWdlc1syXS50b2tlbnNTb2xkLnN1YihzdGFnZTIpOwogICAgICAgIHNlbGYuc3RhZ2VzWzNdLnRva2Vuc1NvbGQgPSBzZWxmLnN0YWdlc1szXS50b2tlbnNTb2xkLnN1YihzdGFnZTMpOwogICAgICAgIHNlbGYuc3RhZ2VzWzRdLnRva2Vuc1NvbGQgPSBzZWxmLnN0YWdlc1s0XS50b2tlbnNTb2xkLnN1YihzdGFnZTQpOwogICAgfQogICAgCgkvLyBCb3RoIG9mIHRoZSBiZWxvdyBhcmUgY2hlY2tlZCBvbiB0aGUgb3ZlcnJpZGRlbiB2YWxpZFB1cmNoYXNlKCkgZnVuY3Rpb24KICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdG9rZW5zIHRoZXkncmUgYWJvdXQgdG8gcHVyY2hhc2UgaXMgYWJvdmUgdGhlIG1pbmltdW0gZm9yIHRoaXMgc3RhZ2UKICAgIGZ1bmN0aW9uIGNoYW5nZVByaWNlKFN0YWdlU3RvcmFnZSBzdG9yYWdlIHNlbGYsIHVpbnQ4IF9zdGFnZSwgdWludDI1NiBfdG9rZW5QcmljZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoc2VsZi5zdGFnZXNbX3N0YWdlXS5kZWFkbGluZSA+IG5vdyk7CgogICAgICAgIHNlbGYuc3RhZ2VzW19zdGFnZV0udG9rZW5QcmljZSA9IF90b2tlblByaWNlOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvUGlja0Nyb3dkc2FsZS5zb2wKCi8qCiAqIFBpY2tDcm93ZHNhbGUgYW5kIFBpY2tUb2tlbiBhcmUgYSBwYXJ0IG9mIFBpY2tlcmluZ3dhcmUgbHRkJ3Mgc21hcnQgY29udHJhY3RzCiAqIFRoaXMgdXNlcyB0aGUgU2FsZVN0YWdlTGliIHdoaWNoIGlzIGFsc28gYSBwYXJ0IG9mIFBpY2tlcmluZ3dhcmUgbHRkJ3Mgc21hcnQgY29udHJhY3RzCiAqIFdlIGNyZWF0ZSB0aGUgc3RhZ2VzIGluaXRpYWxseSBpbiB0aGUgY29uc3RydWN0b3Igc3VjaCB0aGF0IHN0YWdlcyBjYW5ub3QgYmUgYWRkZWQgYWZ0ZXIgdGhlIHNhbGUgaGFzIHN0YXJ0ZWQKICogV2UgdGhlbiBwcmUtYWxsb2NhdGUgbmVjZXNzYXJ5IGFjY291bnRzIHByaW9yIHRvIHRoZSBzYWxlIHN0YXJ0aW5nCiAqIFRoaXMgY29udHJhY3QgaW1wbGVtZW50cyB0aGUgc3RhZ2VzIGxpYiBmdW5jdGlvbmFsaXR5IHdpdGggb3ZlcnJpZGluZyBmdW5jdGlvbnMgZm9yIHN0YWdlcyBpbXBsZW1lbnRhdGlvbgoqLwpjb250cmFjdCBQaWNrQ3Jvd2RzYWxlIGlzIENhcHBlZENyb3dkc2FsZSB7CgogIHVzaW5nIFNhbGVTdGFnZXNMaWIgZm9yIFNhbGVTdGFnZXNMaWIuU3RhZ2VTdG9yYWdlOwogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBTYWxlU3RhZ2VzTGliLlN0YWdlU3RvcmFnZSBwdWJsaWMgc3RhZ2VzOwoKICBib29sIHByZWFsbG9jYXRlZCA9IGZhbHNlOwogIGJvb2wgc3RhZ2VzU2V0ID0gZmFsc2U7CiAgYWRkcmVzcyBwcml2YXRlIGZvdW5kZXJzOwogIGFkZHJlc3MgcHJpdmF0ZSBib3VudHk7CiAgYWRkcmVzcyBwcml2YXRlIGJ1eWVyOwogIHVpbnQyNTYgcHVibGljIGJ1cm50Qm91bnR5OwogIHVpbnQyNTYgcHVibGljIGJ1cm50Rm91bmRlcjsKCiAgZXZlbnQgUGFydGljaXBhbnRXaXRoZHJhd2FsKGFkZHJlc3MgcGFydGljaXBhbnQsIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IGRhdGV0aW1lKTsKICBldmVudCBTdGFnZVByaWNlQ2hhbmdlZChhZGRyZXNzIGFkbWluLCB1aW50OCBzdGFnZSwgdWludDI1NiBwcmljZSk7CiAgZXZlbnQgRXh0ZW5kZWRTdGFydCh1aW50MjU2IG9sZFN0YXJ0LCB1aW50MjU2IG5ld1N0YXJ0KTsKCiAgbW9kaWZpZXIgb25seU9uY2UoYm9vbCBfY2hlY2spIHsKICAgIGlmKF9jaGVjaykgewogICAgICByZXZlcnQoKTsKICAgIH0KICAgIF87CiAgfQoKICBmdW5jdGlvbiBQaWNrQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0LCBhZGRyZXNzIF9iZW5lZmljaWFyeSwgYWRkcmVzcyBfYnV5ZXIsIGFkZHJlc3MgX2ZvdW5kZXJzLCBhZGRyZXNzIF9ib3VudHksIHVpbnQyNTYgX3NvZnRDYXAsIHVpbnQyNTYgX2hhcmRDYXAsIFBpY2tUb2tlbiBfdG9rZW4pCiAgCUNhcHBlZENyb3dkc2FsZShfc3RhcnRUaW1lLCBfZW5kVGltZSwgX3JhdGUsIF93YWxsZXQsIF9iZW5lZmljaWFyeSwgX3NvZnRDYXAsIF9oYXJkQ2FwLCBfdG9rZW4pCiAgICAgcHVibGljIHsgCiAgICBzdGFnZXMuaW5pdCgpOwogICAgc3RhZ2VzLmNyZWF0ZVN0YWdlKDAsIF9zdGFydFRpbWUsIDAsIDAsIDApOwogICAgZm91bmRlcnMgPSBfZm91bmRlcnM7CiAgICBib3VudHkgPSBfYm91bnR5OwogICAgYnV5ZXIgPSBfYnV5ZXI7CiAgfQoKICBmdW5jdGlvbiBzZXRQcmVhbGxvY2F0aW9ucygpIGV4dGVybmFsIG9ubHlPd25lciBvbmx5T25jZShwcmVhbGxvY2F0ZWQpIHsKICAgIHByZWFsbG9jYXRlKGJ1eWVyLCAxMjUwMDAwLCAxMDAwMDAwMDAwMCk7CiAgICBwcmVhbGxvY2F0ZShmb3VuZGVycywgMTc3Nzc3NywgMCk7CiAgICBwcmVhbGxvY2F0ZShib3VudHksIDQ0NDQ0NSwgMCk7CiAgICBwcmVhbGxvY2F0ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gc2V0U3RhZ2VzKCkgZXh0ZXJuYWwgb25seU93bmVyIG9ubHlPbmNlKHN0YWdlc1NldCkgewogICAgc3RhZ2VzLmNyZWF0ZVN0YWdlKDEsIHN0YXJ0VGltZS5hZGQoMSBkYXlzKSwgMTAwMDAwMDAwMDAsIDEwMDAwMDAwLCAxNzUwMDAwMDAwMDApOyAgLy9EZWFkbGluZSAxIGRheSAoODY0MDApICBhZnRlciBzdGFydCAtIHByaWNlOiAwLjAwMSAgLSBtaW46IDkwIC0gY2FwOiAxLDI1MCwwMDAKICAgIHN0YWdlcy5jcmVhdGVTdGFnZSgyLCBzdGFydFRpbWUuYWRkKDIgZGF5cyksIDExMDAwMDAwMDAwLCA1MDAwMDAwLCAzMDAwMDAwMDAwMDApOyAvL0RlYWRsaW5lIDIgZGF5cyAoMTcyODAwKSBhZnRlciBzdGFydCAtIHByaWNlOiAwLjAwMTEgLSBtaW46IDYwIC0gY2FwOiAzLDAwMCwwMDAgCiAgICBzdGFnZXMuY3JlYXRlU3RhZ2UoMywgc3RhcnRUaW1lLmFkZCgzIGRheXMpLCAxMjAwMDAwMDAwMCwgMjUwMDAwMCwgNTc1MDAwMDAwMDAwKTsgIC8vRGVhZGxpbmUgNCBkYXlzICgzNDU2MDApIGFmdGVyIHN0YXJ0IC0gcHJpY2U6IDAuMDAxMiAtIGNhcDogNSw3NTAsMDAwIAogICAgc3RhZ2VzLmNyZWF0ZVN0YWdlKDQsIGVuZFRpbWUsIDE1MDAwMDAwMDAwLCAxMDAwMDAwLCAyMDAwMDAwMDAwMDAwKTsgICAgICAgICAgICAgICAvL0RlYWRsaW5lIDEgd2VlayBhZnRlciBzdGFydCAtIHByaWNlOiAwLjAwMTUgLSBjYXA6IDIwLDAwMCwwMDAgCiAgICBzdGFnZXNTZXQgPSB0cnVlOwogIH0KCiAgLy8gQ3JlYXRlcyBuZXcgc3RhZ2UgZm9yIHRoZSBjcm93ZHNhbGUKICAvLyBDYW4gT05MWSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBhcyBzaG91bGQgbmV2ZXIgY2hhbmdlIGFmdGVyIGNyZWF0aW5nIHRoZW0gb24gaW5pdGlhbGlzYXRpb24KICBmdW5jdGlvbiBjcmVhdGVTdGFnZSh1aW50OCBfc3RhZ2UsIHVpbnQyNTYgX2RlYWRsaW5lLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfbWluaW11bSwgdWludDI1NiBfY2FwICkgaW50ZXJuYWwgb25seU93bmVyIHsKICAgIHN0YWdlcy5jcmVhdGVTdGFnZShfc3RhZ2UsIF9kZWFkbGluZSwgX3ByaWNlLCBfbWluaW11bSwgX2NhcCk7CiAgfQoKICAvLyBDcmVhdGVzIG5ldyBzdGFnZSBmb3IgdGhlIGNyb3dkc2FsZQogIC8vIENhbiBPTkxZIGJlIGNhbGxlZCBieSB0aGUgb3duZXIgb2YgdGhlIGNvbnRyYWN0IGFzIHNob3VsZCBuZXZlciBjaGFuZ2UgYWZ0ZXIgY3JlYXRpbmcgdGhlbSBvbiBpbml0aWFsaXNhdGlvbgogIGZ1bmN0aW9uIGNoYW5nZVByaWNlKHVpbnQ4IF9zdGFnZSwgdWludDI1NiBfcHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgc3RhZ2VzLmNoYW5nZVByaWNlKF9zdGFnZSwgX3ByaWNlKTsKICAgIFN0YWdlUHJpY2VDaGFuZ2VkKG1zZy5zZW5kZXIsIF9zdGFnZSwgX3ByaWNlKTsKICB9CgogIC8vIEdldCBzdGFnZSBpcyByZXF1aXJlZCB0byByZXRoZW4gdGhlIHN0YWdlIHdlIGFyZSBjdXJyZW50bHkgaW4KICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSB0byBjaGVjayB0aGUgc3RhZ2UgZGV0YWlscyBsaXN0ZWQgaW4gdGhlIGJlbG93IGZ1bmN0aW9ucwogIGZ1bmN0aW9uIGdldFN0YWdlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDggc3RhZ2UpIHsKICAgIHJldHVybiBzdGFnZXMuZ2V0U3RhZ2UoKTsKICB9CgogIGZ1bmN0aW9uIGdldFN0YWdlRGVhZGxpbmUodWludDggX3N0YWdlKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGRlYWRsaW5lKSB7IAogICAgcmV0dXJuIHN0YWdlcy5zdGFnZXNbX3N0YWdlXS5kZWFkbGluZTsKICB9CgogIGZ1bmN0aW9uIGdldFN0YWdlVG9rZW5zU29sZCh1aW50OCBfc3RhZ2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgc29sZCkgeyAKICAgIHJldHVybiBzdGFnZXMuc3RhZ2VzW19zdGFnZV0udG9rZW5zU29sZDsKICB9CgogIGZ1bmN0aW9uIGdldFN0YWdlQ2FwKHVpbnQ4IF9zdGFnZSkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBjYXApIHsgCiAgICByZXR1cm4gc3RhZ2VzLnN0YWdlc1tfc3RhZ2VdLmNhcDsKICB9CgogIGZ1bmN0aW9uIGdldFN0YWdlTWluaW11bSh1aW50OCBfc3RhZ2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgbWluKSB7IAogICAgcmV0dXJuIHN0YWdlcy5zdGFnZXNbX3N0YWdlXS5taW5pbXVtQnV5OwogIH0KCiAgZnVuY3Rpb24gZ2V0U3RhZ2VQcmljZSh1aW50OCBfc3RhZ2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcHJpY2UpIHsgCiAgICByZXR1cm4gc3RhZ2VzLnN0YWdlc1tfc3RhZ2VdLnRva2VuUHJpY2U7CiAgfQoKICAvLyBUaGlzIGlzIHVzZWQgZm9yIGV4dGVuZGluZyB0aGUgc2FsZXMgc3RhcnQgdGltZSAoYW5kIHRoZSBkZWFkbGluZXMgb2YgZWFjaCBzdGFnZSkgYWNjb3JkaW5nbHkKICBmdW5jdGlvbiBleHRlbmRTdGFydCh1aW50MjU2IF9uZXdTdGFydCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHJlcXVpcmUoX25ld1N0YXJ0ID4gc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoX25ld1N0YXJ0ID4gbm93KTsgCiAgICByZXF1aXJlKG5vdyA8IHN0YXJ0VGltZSk7CgogICAgdWludDI1NiBkaWZmZXJlbmNlID0gX25ld1N0YXJ0IC0gc3RhcnRUaW1lOwogICAgdWludDI1NiBvbGRTdGFydCA9IHN0YXJ0VGltZTsKICAgIHN0YXJ0VGltZSA9IF9uZXdTdGFydDsKICAgIGVuZFRpbWUgPSBlbmRUaW1lICsgZGlmZmVyZW5jZTsKCiAgICAvLyBMb29wIHRocm91Z2ggZXZlcnkgc3RhZ2UgaW4gdGhlIHNhbGUKICAgIGZvciAodWludDggaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgLy8gRXh0ZW5kIHRoYXQgc3RhZ2VzIGRlYWRsaW5lIGFjY29yZGluZ2x5CiAgICAgIHVpbnQyNTYgdGVtcCA9IHN0YWdlcy5zdGFnZXNbaV0uZGVhZGxpbmU7CiAgICAgIHRlbXAgPSB0ZW1wICsgZGlmZmVyZW5jZTsKCiAgICAgIHN0YWdlcy5jaGFuZ2VEZWFkbGluZShpLCB0ZW1wKTsKICAgIH0KCiAgICBFeHRlbmRlZFN0YXJ0KG9sZFN0YXJ0LCBfbmV3U3RhcnQpOwogIH0KCiAgLy8gQE92ZXJyaWRlIGNyb3dkc2FsZSBjb250cmFjdCB0byBjaGVjayB0aGUgY3VycmVudCBzdGFnZSBwcmljZQogIC8vIEByZXR1cm4gdG9rZW5zIGludmVzdG9ycyBhcmUgZHVlIHRvIHJlY2lldmUKICBmdW5jdGlvbiB0b2tlbnNUb1JlY2lldmUodWludDI1NiBfd2VpKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG9rZW5zKSB7CiAgICB1aW50OCBzdGFnZSA9IGdldFN0YWdlKCk7CiAgICB1aW50MjU2IHByaWNlID0gZ2V0U3RhZ2VQcmljZShzdGFnZSk7CgogICAgcmV0dXJuIF93ZWkuZGl2KHByaWNlKTsKICB9CgogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlIHZhbGlkUHVyY2hhc2UgdG8gYWRkIGV4dHJhIHN0YWdlIGxvZ2ljCiAgLy8gQHJldHVybiB0cnVlIGlmIGludmVzdG9ycyBjYW4gYnV5IGF0IHRoZSBtb21lbnQKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKHVpbnQyNTYgX3Rva2VucykgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIGlzVmFsaWQgPSBmYWxzZTsKICAgIHVpbnQ4IHN0YWdlID0gZ2V0U3RhZ2UoKTsKCiAgICBpZihzdGFnZXMuY2hlY2tNaW5pbXVtKHN0YWdlLCBfdG9rZW5zKSAmJiBzdGFnZXMuY2hlY2tDYXAoc3RhZ2UsIF90b2tlbnMpKXsKICAgICAgaXNWYWxpZCA9IHRydWU7CiAgICB9CgogICAgcmV0dXJuIHN1cGVyLnZhbGlkUHVyY2hhc2UoX3Rva2VucykgJiYgaXNWYWxpZDsKICB9CgogIC8vIE92ZXJyaWRlIGNyb3dkc2FsZSBmaW5hbGl6ZVNhbGUgZnVuY3Rpb24gdG8gbG9nIGJhbGFuY2UgY2hhbmdlIHBsdXMgdG9rZW5zIHNvbGQgaW4gdGhhdCBzdGFnZQogIGZ1bmN0aW9uIGZpbmFsaXplU2FsZSh1aW50MjU2IF93ZWlBbW91bnQsIHVpbnQyNTYgX3Rva2VucywgdWludDEyOCBfYnV5ZXIpIGludGVybmFsIHsKICAgIC8vIENvbGxlY3QgRVRIIGFuZCBzZW5kIHRoZW0gYSB0b2tlbiBpbiByZXR1cm4KICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXS5hZGQoX3dlaUFtb3VudCk7CiAgICB0b2tlbkJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRva2VuQmFsYW5jZU9mW21zZy5zZW5kZXJdLmFkZChfdG9rZW5zKTsKICAgIGJhbGFuY2VQZXJJRFtfYnV5ZXJdID0gYmFsYW5jZVBlcklEW19idXllcl0uYWRkKF93ZWlBbW91bnQpOwoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZChfd2VpQW1vdW50KTsKICAgIHRva2Vuc1NlbnQgPSB0b2tlbnNTZW50LmFkZChfdG9rZW5zKTsKCiAgICB1aW50OCBzdGFnZSA9IGdldFN0YWdlKCk7CiAgICBzdGFnZXMuc3RhZ2VzW3N0YWdlXS50b2tlbnNTb2xkID0gc3RhZ2VzLnN0YWdlc1tzdGFnZV0udG9rZW5zU29sZC5hZGQoX3Rva2Vucyk7CiAgfQoKICAvKioKICAgKiBQcmVhbGxvY2F0ZSB0b2tlbnMgZm9yIHRoZSBlYXJseSBpbnZlc3RvcnMuCiAgICovCiAgZnVuY3Rpb24gcHJlYWxsb2NhdGUoYWRkcmVzcyByZWNlaXZlciwgdWludCB0b2tlbnMsIHVpbnQgd2VpUHJpY2UpIGludGVybmFsIHsKICAgIHVpbnQgZGVjaW1hbHMgPSB0b2tlbi5kZWNpbWFscygpOwogICAgdWludCB0b2tlbkFtb3VudCA9IHRva2VucyAqIDEwICoqIGRlY2ltYWxzOwogICAgdWludCB3ZWlBbW91bnQgPSB3ZWlQcmljZSAqIHRva2VuczsgCgogICAgcHJlc2FsZVdlaVJhaXNlZCA9IHByZXNhbGVXZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICB0b2tlbnNTZW50ID0gdG9rZW5zU2VudC5hZGQodG9rZW5BbW91bnQpOwogICAgdG9rZW5CYWxhbmNlT2ZbcmVjZWl2ZXJdID0gdG9rZW5CYWxhbmNlT2ZbcmVjZWl2ZXJdLmFkZCh0b2tlbkFtb3VudCk7CgogICAgcHJlc2FsZUJhbGFuY2VPZltyZWNlaXZlcl0gPSBwcmVzYWxlQmFsYW5jZU9mW3JlY2VpdmVyXS5hZGQod2VpQW1vdW50KTsKCiAgICBwcm9kdWNlVG9rZW5zKHJlY2VpdmVyLCB3ZWlBbW91bnQsIHRva2VuQW1vdW50KTsKICB9CgogIC8vIElmIHRoZSBzYWxlIGlzIHVuc3VjY2Vzc2Z1bCAoaGFzIGhhbHRlZCBvciByZWFjaGVkIGRlYWRsaW5lIGFuZCBkaWRudCByZWFjaCBzb2Z0Y2FwKQogIC8vIEFsbG93cyBwYXJ0aWNpcGFudHMgdG8gd2l0aGRyYXcgdGhlaXIgYmFsYW5jZQogIGZ1bmN0aW9uIHVuc3VjY2Vzc2Z1bFdpdGhkcmF3YWwoKSBleHRlcm5hbCB7CiAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID4gMCk7CiAgICAgIHJlcXVpcmUoaGFzRW5kZWQoKSAmJiB0b2tlbnNTZW50IDwgc29mdENhcCB8fCBoYXNIYWx0ZWQoKSk7CiAgICAgIHVpbnQyNTYgd2l0aGRyYXdhbEFtb3VudDsKCiAgICAgIHdpdGhkcmF3YWxBbW91bnQgPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7IAoKICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih3aXRoZHJhd2FsQW1vdW50KTsKICAgICAgYXNzZXJ0KGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9PSAwKTsKCiAgICAgIFBhcnRpY2lwYW50V2l0aGRyYXdhbChtc2cuc2VuZGVyLCB3aXRoZHJhd2FsQW1vdW50LCBub3cpOwogIH0KCiAgLy8gQnVybiB0aGUgcGVyY2VudGFnZSBvZiB0b2tlbnMgbm90IHNvbGQgZnJvbSB0aGUgZm91bmRlcnMgYW5kIGJvdW50eSB3YWxsZXRzCiAgLy8gTXVzdCBkbyBpdCB0aGlzIHdheSBhcyBzb2xpZGl0eSBkb2VzbnQgZGVhbCB3aXRoIGRlY2ltYWxzCiAgZnVuY3Rpb24gYnVybkZvdW5kZXJzVG9rZW5zKHVpbnQyNTYgX2JvdW50eSwgdWludDI1NiBfZm91bmRlcnMpIGludGVybmFsIHsKICAgICAgcmVxdWlyZShfZm91bmRlcnMgPCAxNzc3Nzc3MDAwMDApOwogICAgICByZXF1aXJlKF9ib3VudHkgPCA0NDQ0NDUwMDAwMCk7CgogICAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiB0b2tlbnMgdG8gYnVybiBmcm9tIGZvdW5kZXJzIGFuZCBib3VudHkgd2FsbGV0CiAgICAgIGJ1cm50Rm91bmRlciA9IF9mb3VuZGVyczsKICAgICAgYnVybnRCb3VudHkgPSBfYm91bnR5OwoKICAgICAgdG9rZW4ucmVjbGFpbUFuZEJ1cm4oZm91bmRlcnMsIGJ1cm50Rm91bmRlcik7CiAgICAgIHRva2VuLnJlY2xhaW1BbmRCdXJuKGJvdW50eSwgYnVybnRCb3VudHkpOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0tZQ0Nyb3dkc2FsZS5zb2wKCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKgogKiBTb21lIGltcGxlbWVudGF0aW9uIGhhcyBiZWVuIGNoYW5nZWQgYnkgUGlja2VyaW5nd2FyZSBsdGQgdG8gYWNoaWV2ZSBjdXN0b20gZmVhdHVyZXMKICovCgoKCi8qCiAqIEEgY3Jvd2RzYWxlIHRoYXQgYWxsb3dzIG9ubHkgc2lnbmVkIHBheWxvYWQgd2l0aCBzZXJ2ZXItc2lkZSBzcGVjaWZpZWQgYnV5IGluIGxpbWl0cy4KICoKICogVGhlIHRva2VuIGRpc3RyaWJ1dGlvbiBoYXBwZW5zIGFzIGluIHRoZSBhbGxvY2F0ZWQgY3Jvd2RzYWxlIGNvbnRyYWN0CiAqLwpjb250cmFjdCBLWUNDcm93ZHNhbGUgaXMgS1lDUGF5bG9hZERlc2VyaWFsaXplciwgUGlja0Nyb3dkc2FsZSB7CgogIC8qIFNlcnZlciBob2xkcyB0aGUgcHJpdmF0ZSBrZXkgdG8gdGhpcyBhZGRyZXNzIHRvIGRlY2lkZSBpZiB0aGUgQU1MIHBheWxvYWQgaXMgdmFsaWQgb3Igbm90LiAqLwogIGFkZHJlc3MgcHVibGljIHNpZ25lckFkZHJlc3M7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyByZWZ1bmRhYmxlOwogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgcmVmdW5kZWQ7CiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBibGFja2xpc3Q7CgogIC8qIEEgbmV3IHNlcnZlci1zaWRlIHNpZ25lciBrZXkgd2FzIHNldCB0byBiZSBlZmZlY3RpdmUgKi8KICBldmVudCBTaWduZXJDaGFuZ2VkKGFkZHJlc3Mgc2lnbmVyKTsKICBldmVudCBUb2tlbnNSZWNsYWltZWQoYWRkcmVzcyB1c2VyLCB1aW50MjU2IGFtb3VudCwgdWludDI1NiBkYXRldGltZSk7CiAgZXZlbnQgQWRkZWRUb0JsYWNrbGlzdChhZGRyZXNzIHVzZXIsIHVpbnQyNTYgZGF0ZXRpbWUpOwogIGV2ZW50IFJlbW92ZWRGcm9tQmxhY2tsaXN0KGFkZHJlc3MgdXNlciwgdWludDI1NiBkYXRldGltZSk7CiAgZXZlbnQgUmVmdW5kQ29sbGVjdGVkKGFkZHJlc3MgdXNlciwgdWludDI1NiBkYXRldGltZSk7CiAgZXZlbnQgVG9rZW5zUmVsZWFzZWQoYWRkcmVzcyBhZ2VudCwgdWludDI1NiBkYXRldGltZSwgdWludDI1NiBib3VudHksIHVpbnQyNTYgZm91bmRlcnMpOwoKICAvKgogICAqIENvbnN0cnVjdG9yLgogICAqLwogIGZ1bmN0aW9uIEtZQ0Nyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3JhdGUsIGFkZHJlc3MgX3dhbGxldCwgYWRkcmVzcyBfYmVuZWZpY2lhcnksIGFkZHJlc3MgX2J1eWVyLCBhZGRyZXNzIF9mb3VuZGVycywgYWRkcmVzcyBfYm91bnR5LCB1aW50MjU2IF9zb2Z0Q2FwLCB1aW50MjU2IF9oYXJkQ2FwLCBQaWNrVG9rZW4gX3Rva2VuKSBwdWJsaWMKICBQaWNrQ3Jvd2RzYWxlKF9zdGFydFRpbWUsIF9lbmRUaW1lLCBfcmF0ZSwgX3dhbGxldCwgX2JlbmVmaWNpYXJ5LCBfYnV5ZXIsIF9mb3VuZGVycywgX2JvdW50eSwgX3NvZnRDYXAsIF9oYXJkQ2FwLCBfdG9rZW4pCiAge30KCiAgLy8gVGhpcyBzZXRzIHRoZSB0b2tlbiBhZ2VudCB0byB0aGUgY29udHJhY3QsIGFsbG93aW5nIHRoZSBjb250cmFjdCB0byByZWNsYWltIGFuZCBidXJuIHRva2VucyBpZiBuZWNlc3NhcnkKICBmdW5jdGlvbiBzZXRUb2tlbkFnZW50KCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIC8vIGNvbnRyYWN0QWRkciA9IHRva2VuLm93bmVyKCk7CiAgICAvLyBHaXZlIHRoZSBzYWxlIGNvbnRyYWN0IHJpZ2h0cyB0byByZWNsYWltIHRva2VucwogICAgdG9rZW4uc2V0UmVsZWFzZUFnZW50KCk7CiAgfQoKIC8qIAogICogVGhpcyBmdW5jdGlvbiB3YXMgd3JpdHRlbiBieSBQaWNrZXJpbmd3YXJlIGx0ZCB0byBmYWNpbGl0YXRlIGEgcmVmdW5kIGFjdGlvbiB1cG9uIGZhaWx1cmUgb2YgS1lDIGFuYWx5c2lzCiAgKiAKICAqIEl0IHNpbXBseSBhbGxvd3MgdGhlIHBhcnRpY2lwYW50IHRvIHdpdGhkcmF3IGhpcyBldGhlciBmcm9tIHRoZSBzYWxlCiAgKiBNb3ZlcyB0aGUgY3Jvd2RzYWxlIHNsaWRlcnMgYWNjb3JkaW5nbHkKICAqIFJlY2xhaW1zIHRoZSB1c2VycyB0b2tlbnMgYW5kIGJ1cm5zIHRoZW0KICAqIEJsYWNrbGlzdHMgdGhlIHVzZXIgdG8gcHJldmVudCB0aGVtIGZyb20gYnV5aW5nIGFueSBtb3JlIHRva2VucwogICoKICAqIFN0YWdlIDEsIDIsIDMsICYgNCBhcmUgYWxsIGNvbGxlY3RlZCBmcm9tIHRoZSBkYXRhYmFzZSBwcmlvciB0byBjYWxsaW5nIHRoaXMgZnVuY3Rpb24KICAqIEl0IGFsbG93cyB1cyB0byBjYWxjdWxhdGUgaG93IG1hbnkgdG9rZW5zIG5lZWQgdG8gYmUgdGFrZW4gZnJvbSBlYWNoIGluZGl2aWR1YWwgc3RhZ2UKICAqLwogIGZ1bmN0aW9uIHJlZnVuZFBhcnRpY2lwYW50KGFkZHJlc3MgcGFydGljaXBhbnQsIHVpbnQyNTYgX3N0YWdlMSwgdWludDI1NiBfc3RhZ2UyLCB1aW50MjU2IF9zdGFnZTMsIHVpbnQyNTYgX3N0YWdlNCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHJlcXVpcmUoYmFsYW5jZU9mW3BhcnRpY2lwYW50XSA+IDApOwoKICAgIHVpbnQyNTYgYmFsYW5jZSA9IGJhbGFuY2VPZltwYXJ0aWNpcGFudF07CiAgICB1aW50MjU2IHRva2VucyA9IHRva2VuQmFsYW5jZU9mW3BhcnRpY2lwYW50XTsKCiAgICBiYWxhbmNlT2ZbcGFydGljaXBhbnRdID0gMDsKICAgIHRva2VuQmFsYW5jZU9mW3BhcnRpY2lwYW50XSA9IDA7CgogICAgLy8gUmVmdW5kIHRoZSBwYXJ0aWNpcGFudAogICAgcmVmdW5kYWJsZVtwYXJ0aWNpcGFudF0gPSBiYWxhbmNlOwoKICAgIC8vIE1vdmUgdGhlIGNyb3dkc2FsZSBzbGlkZXJzCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuc3ViKGJhbGFuY2UpOwogICAgdG9rZW5zU2VudCA9IHRva2Vuc1NlbnQuc3ViKHRva2Vucyk7CgogICAgLy8gUmVjbGFpbSB0aGUgcGFydGljaXBhbnRzIHRva2VucyBhbmQgYnVybiB0aGVtCiAgICB0b2tlbi5yZWNsYWltQWxsQW5kQnVybihwYXJ0aWNpcGFudCk7CgogICAgLy8gQmxhY2tsaXN0IHBhcnRpY2lwYW50IHNvIHRoZXkgY2Fubm90IG1ha2UgZnVydGhlciBwdXJjaGFzZXMKICAgIGJsYWNrbGlzdFtwYXJ0aWNpcGFudF0gPSB0cnVlOwogICAgQWRkZWRUb0JsYWNrbGlzdChwYXJ0aWNpcGFudCwgbm93KTsKCiAgICBzdGFnZXMucmVmdW5kUGFydGljaXBhbnQoX3N0YWdlMSwgX3N0YWdlMiwgX3N0YWdlMywgX3N0YWdlNCk7CgogICAgVG9rZW5zUmVjbGFpbWVkKHBhcnRpY2lwYW50LCB0b2tlbnMsIG5vdyk7CiAgfQoKICAvLyBBbGxvd3Mgb25seSB0aGUgYmVuZWZpY2lhcnkgdG8gcmVsZWFzZSB0b2tlbnMgdG8gcGVvcGxlCiAgLy8gVGhpcyBpcyBuZWVkZWQgYXMgdGhlIHRva2VuIGlzIG93bmVkIGJ5IHRoZSBjb250cmFjdCwgaW4gb3JkZXIgdG8gbWludCB0b2tlbnMKICAvLyB0aGVyZWZvcmUsIHRoZSBvd25lciBlc3NlbnRpYWxseSBnaXZlcyBwZXJtaXNzaW9uIGZvciB0aGUgY29udHJhY3QgdG8gcmVsZWFzZSB0b2tlbnMKICBmdW5jdGlvbiByZWxlYXNlVG9rZW5zKHVpbnQyNTYgX2JvdW50eSwgdWludDI1NiBfZm91bmRlcnMpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICAgIC8vIFVubGVzcyB0aGUgaGFyZGNhcCB3YXMgcmVhY2hlZCwgdGhlcmVtdXN0IGJlIHRva2VucyB0byBidXJuCiAgICAgIHJlcXVpcmUoX2JvdW50eSA+IDAgfHwgdG9rZW5zU2VudCA9PSBoYXJkQ2FwKTsKICAgICAgcmVxdWlyZShfZm91bmRlcnMgPiAwIHx8IHRva2Vuc1NlbnQgPT0gaGFyZENhcCk7CgogICAgICBidXJuRm91bmRlcnNUb2tlbnMoX2JvdW50eSwgX2ZvdW5kZXJzKTsKCiAgICAgIHRva2VuLnJlbGVhc2VUb2tlblRyYW5zZmVyKCk7CgogICAgICBjYW5XaXRoZHJhdyA9IHRydWU7CgogICAgICBUb2tlbnNSZWxlYXNlZChtc2cuc2VuZGVyLCBub3csIF9ib3VudHksIF9mb3VuZGVycyk7CiAgfQogIAogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlI3ZhbGlkUHVyY2hhc2UgdG8gYWRkIGV4dHJhIEtZQyBibGFja2xpc3QgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UodWludDI1NiBfdG9rZW5zKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgb25CbGFja0xpc3Q7CgogICAgaWYoYmxhY2tsaXN0W21zZy5zZW5kZXJdID09IHRydWUpewogICAgICBvbkJsYWNrTGlzdCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBvbkJsYWNrTGlzdCA9IGZhbHNlOwogICAgfQogICAgcmV0dXJuIHN1cGVyLnZhbGlkUHVyY2hhc2UoX3Rva2VucykgJiYgIW9uQmxhY2tMaXN0OwogIH0KCiAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIHRoZSBibGFja2xpc3RlZCB1c2VyIHRvIHB1bGwgaGlzIGV0aGVyIGZyb20gdGhlIGNvbnRyYWN0IHVwb24gYmVpbmcgcmVmdW5kZWQKICBmdW5jdGlvbiBjb2xsZWN0UmVmdW5kKCkgZXh0ZXJuYWwgewogICAgcmVxdWlyZShyZWZ1bmRhYmxlW21zZy5zZW5kZXJdID4gMCk7CiAgICByZXF1aXJlKHJlZnVuZGVkW21zZy5zZW5kZXJdID09IGZhbHNlKTsKCiAgICB1aW50MjU2IHRoZWlyd2VpID0gcmVmdW5kYWJsZVttc2cuc2VuZGVyXTsKICAgIHJlZnVuZGFibGVbbXNnLnNlbmRlcl0gPSAwOwogICAgcmVmdW5kZWRbbXNnLnNlbmRlcl0gPT0gdHJ1ZTsKCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRoZWlyd2VpKTsKCiAgICBSZWZ1bmRDb2xsZWN0ZWQobXNnLnNlbmRlciwgbm93KTsKICB9CgogIC8qCiAgICogQSB0b2tlbiBwdXJjaGFzZSB3aXRoIGFudGktbW9uZXkgbGF1bmRlcmluZyBhbmQgS1lDIGNoZWNrcwogICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gYSBkYXRhZnJhbWUgYW5kIEVDIHNpZ25hdHVyZSB0byB2ZXJpZnkgaWYgdGhlIHB1cmNoYXNlciBoYXMgYmVlbiB2ZXJpZmllZAogICAqIG9uIHRoZSBzZXJ2ZXIgc2lkZSBvZiBvdXIgYXBwbGljYXRpb24gYW5kIGhhcyB0aGVyZWZvcmUsIHBhcnRpY2lwYXRlZCBpbiBLWUMuIAogICAqIFVwb24gcmVnaXN0ZXJpbmcgdG8gdGhlIHNpdGUsIHVzZXJzIGFyZSBzdXBwbGllZCB3aXRoIGEgc2lnbmF0dXJlIGFsbG93aW5nIHRoZW0gdG8gcHVyY2hhc2UgdG9rZW5zLCAKICAgKiB3aGljaCBjYW4gYmUgcmV2b2tlZCBhdCBhbnkgdGltZSwgdGhpcyBjb250YWluc3QgdGhlaXIgRVRIIGFkZHJlc3MsIGEgdW5pcXVlIElEIGFuZCB0aGUgbWluIGFuZCBtYXggCiAgICogRVRIIHRoYXQgdXNlciBoYXMgc3RhdGVkIHRoZXkgd2lsbCBwdXJjaGFzZS4gKEFueSBtb3JlIHRoYW4gdGhlIG1heCBtYXkgYmUgc3ViamVjdCB0byBBTUwgY2hlY2tzKS4KICAgKi8KICBmdW5jdGlvbiBidXlXaXRoS1lDRGF0YShieXRlcyBkYXRhZnJhbWUsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBwdWJsaWMgcGF5YWJsZSB7CgogICAgICBieXRlczMyIGhhc2ggPSBzaGEyNTYoZGF0YWZyYW1lKTsKCiAgICAgIGFkZHJlc3Mgd2hpdGVsaXN0ZWRBZGRyZXNzOwogICAgICB1aW50MTI4IGN1c3RvbWVySWQ7CiAgICAgIHVpbnQzMiBtaW5FVEg7CiAgICAgIHVpbnQzMiBtYXhFVEg7CiAgICAgIAogICAgICAod2hpdGVsaXN0ZWRBZGRyZXNzLCBjdXN0b21lcklkLCBtaW5FVEgsIG1heEVUSCkgPSBnZXRLWUNQYXlsb2FkKGRhdGFmcmFtZSk7CgogICAgICAvLyBDaGVjayB0aGF0IHRoZSBLWUMgZGF0YSBpcyBzaWduZWQgYnkgb3VyIHNlcnZlcgogICAgICByZXF1aXJlKGVjcmVjb3ZlcihoYXNoLCB2LCByLCBzKSA9PSBzaWduZXJBZGRyZXNzKTsKCiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHVzZXIgaXMgdXNpbmcgaGlzIG93biBzaWduYXR1cmUKICAgICAgcmVxdWlyZSh3aGl0ZWxpc3RlZEFkZHJlc3MgPT0gbXNnLnNlbmRlcik7CgogICAgICAvLyBDaGVjayB0aGV5IGFyZSBidXlpbmcgd2l0aGluIHRoZWlyIGxpbWl0cyAtIFRISVMgSVMgT05MWSBORUVERUQgSUYgU1BFQ0lGSUVEIEJZIFJFR1VMQVRPUlMKICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgIHVpbnQyNTYgbWF4ID0gbWF4RVRIOwogICAgICB1aW50MjU2IG1pbiA9IG1pbkVUSDsKCiAgICAgIHJlcXVpcmUod2VpQW1vdW50IDwgKG1heCAqIDEgZXRoZXIpKTsKICAgICAgcmVxdWlyZSh3ZWlBbW91bnQgPiAobWluICogMSBldGhlcikpOwoKICAgICAgYnV5VG9rZW5zKGN1c3RvbWVySWQpOwogIH0gIAoKICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIGNhbiBzZXQgdGhlIHNlcnZlciBzaWRlIGFkZHJlc3MKICAvLy8gQHBhcmFtIF9zaWduZXJBZGRyZXNzIFRoZSBhZGRyZXNzIGRlcml2ZWQgZnJvbSBzZXJ2ZXIncyBwcml2YXRlIGtleQogIGZ1bmN0aW9uIHNldFNpZ25lckFkZHJlc3MoYWRkcmVzcyBfc2lnbmVyQWRkcmVzcykgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIC8vIEVDIHJjb3ZlciByZXR1cm5zIDAgaW4gY2FzZSBvZiBlcnJvciB0aGVyZWZvcmUsIHRoaXMgQ0FOTk9UIGJlIDAuCiAgICByZXF1aXJlKF9zaWduZXJBZGRyZXNzICE9IDApOwogICAgc2lnbmVyQWRkcmVzcyA9IF9zaWduZXJBZGRyZXNzOwogICAgU2lnbmVyQ2hhbmdlZChzaWduZXJBZGRyZXNzKTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZUZyb21CbGFja2xpc3QoYWRkcmVzcyBfYmxhY2tsaXN0ZWQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICByZXF1aXJlKGJsYWNrbGlzdFtfYmxhY2tsaXN0ZWRdID09IHRydWUpOwogICAgYmxhY2tsaXN0W19ibGFja2xpc3RlZF0gPSBmYWxzZTsKICAgIFJlbW92ZWRGcm9tQmxhY2tsaXN0KF9ibGFja2xpc3RlZCwgbm93KTsKICB9Cgp9'.
	

]
