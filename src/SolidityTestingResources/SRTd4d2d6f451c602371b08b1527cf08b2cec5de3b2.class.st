Class {
	#name : #SRTd4d2d6f451c602371b08b1527cf08b2cec5de3b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd4d2d6f451c602371b08b1527cf08b2cec5de3b2 >> base64 [
	^ ''.
	

]
