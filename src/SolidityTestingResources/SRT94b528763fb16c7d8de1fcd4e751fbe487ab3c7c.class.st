Class {
	#name : #SRT94b528763fb16c7d8de1fcd4e751fbe487ab3c7c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT94b528763fb16c7d8de1fcd4e751fbe487ab3c7c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCBEU01hdGggewoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCArIHkpID49IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCAtIHkpIDw9IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCAqIHkpID49IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgeiA9IHggLyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgcmV0dXJuIHggPD0geSA/IHggOiB5OwogICAgfQoKICAgIGZ1bmN0aW9uIG1heCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5OwogICAgfQp9CgoKY29udHJhY3QgcXVldWUgewogICAgUXVldWUgcHVibGljIHE7CgogICAgc3RydWN0IEJ1eVRpY2tldCB7CiAgICAgICAgYWRkcmVzcyBhY2NvdW50OwogICAgICAgIHVpbnQgYW1vdW50OwogICAgICAgIHVpbnQgdGltZTsKICAgIH0KCiAgICBzdHJ1Y3QgUXVldWUgewogICAgICAgIEJ1eVRpY2tldFtdIGRhdGE7CiAgICAgICAgdWludCBmcm9udDsKICAgICAgICB1aW50IGJhY2s7CiAgICB9CgogICAgZnVuY3Rpb24gcXVldWVTaXplKCkgY29uc3RhbnQgcmV0dXJucyAodWludCByKSB7CiAgICAgICAgciA9IHEuYmFjayAtIHEuZnJvbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gcXVldWUoKSB7CiAgICAgICAgcS5kYXRhLmxlbmd0aCA9IDYwMDAwMDsKICAgIH0KCiAgICBmdW5jdGlvbiBwdXNoUXVldWUoQnV5VGlja2V0IHRpY2tldCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoKHEuYmFjayArIDEpICUgcS5kYXRhLmxlbmd0aCAhPSBxLmZyb250KTsKCiAgICAgICAgcS5kYXRhW3EuYmFja10gPSB0aWNrZXQ7CiAgICAgICAgcS5iYWNrID0gKHEuYmFjayArIDEpICUgcS5kYXRhLmxlbmd0aDsKICAgIH0KCiAgICBmdW5jdGlvbiBwZWVrUXVldWUoKSBpbnRlcm5hbCByZXR1cm5zIChCdXlUaWNrZXQgcikgewogICAgICAgIHJlcXVpcmUocS5iYWNrICE9IHEuZnJvbnQpOwoKICAgICAgICByID0gcS5kYXRhW3EuZnJvbnRdOwogICAgfQoKICAgIGZ1bmN0aW9uIHBvcFF1ZXVlKCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUocS5iYWNrICE9IHEuZnJvbnQpOwoKICAgICAgICBkZWxldGUgcS5kYXRhW3EuZnJvbnRdOwogICAgICAgIHEuZnJvbnQgPSAocS5mcm9udCArIDEpICUgcS5kYXRhLmxlbmd0aDsKICAgIH0KfQoKY29udHJhY3QgRGVDZW50ZXJUb2tlbiBpcyBvd25lZCwgcXVldWUsIERTTWF0aCB7CiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1Rva2VuIDAuMSc7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnRGVDZW50ZXInOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnREMnOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gODsKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDEwMDAwMDAwMDAwMDAwMDAwOyAvLyAxMDAgbWlsbGlvbgogICAgdWludDI1NiBwdWJsaWMgYXZhaWxhYmxlVG9rZW5zID0gNjAwMDAwMDAwMDAwMDAwMDsgLy8gNjAgbWlsbGlvbgogICAgdWludDI1NiBwdWJsaWMgdGVhbUFuZEV4cGVydHNUb2tlbnMgPSA0MDAwMDAwMDAwMDAwMDAwOyAvLyA0MCBtaWxsaW9uCiAgICB1aW50MjU2IHB1YmxpYyBwcmljZSA9IDAuMDAwMDAwMDAwMSBldGhlcjsgLy8gMC4wMSBldGhlciBwZXIgdG9rZW4KCiAgICB1aW50IHB1YmxpYyBzdGFydFRpbWU7CiAgICB1aW50IHB1YmxpYyByZWZ1bmRTdGFydFRpbWU7CiAgICB1aW50IHB1YmxpYyByZWZ1bmREdXJhdGlvbiA9IDMgZGF5czsgLy8gMyB5ZWFycwogICAgdWludCBwdWJsaWMgZmlyc3RTdGFnZUR1cmF0aW9uID0gMyBkYXlzOyAvLyAzMSBkYXlzCgogICAgdWludCBwdWJsaWMgbWF4RGFpbHlDYXAgPSAzMzMzMzAwMDAwMDAwOyAvLyAzMyAzMzMgREMKICAgIG1hcHBpbmcgKHVpbnQgPT4gdWludCkgcHVibGljIGRhaWx5VG90YWxzOwoKICAgIHVpbnQgcHVibGljIHF1ZXVlZEFtb3VudDsKCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKICAgIGFkZHJlc3MgcHVibGljIGV4cGVydHNBY2NvdW50OwogICAgYWRkcmVzcyBwdWJsaWMgdGVhbUFjY291bnQ7CgogICAgdWludCBwdWJsaWMgbGFzdFNjaGVkdWxlZFRvcFVwOwogICAgdWludCBwdWJsaWMgbGFzdFByb2Nlc3NlZERheTsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8vIGZvciB0ZXN0aW5nCiAgICB1aW50IHB1YmxpYyBjVGltZSA9IDA7CiAgICBmdW5jdGlvbiBzZXRDVGltZSh1aW50IF9jVGltZSkgb25seU93bmVyIHsKICAgICAgICBjVGltZSA9IF9jVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBEZUNlbnRlclRva2VuKAogICAgYWRkcmVzcyBfYmVuZWZpY2lhcnksCiAgICBhZGRyZXNzIF9leHBlcnRzQWNjb3VudCwKICAgIGFkZHJlc3MgX3RlYW1BY2NvdW50LAogICAgdWludCBfc3RhcnRUaW1lLAogICAgdWludCBfcmVmdW5kU3RhcnRUaW1lCiAgICApIHsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKICAgICAgICBleHBlcnRzQWNjb3VudCA9IF9leHBlcnRzQWNjb3VudDsKICAgICAgICB0ZWFtQWNjb3VudCA9IF90ZWFtQWNjb3VudDsKCiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICByZWZ1bmRTdGFydFRpbWUgPSBfcmVmdW5kU3RhcnRUaW1lOwoKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gPSB0b3RhbFN1cHBseTsKCiAgICAgICAgbGFzdFByb2Nlc3NlZERheSA9IGRheUZvcihzdGFydFRpbWUgKyBmaXJzdFN0YWdlRHVyYXRpb24gKiAxIGRheXMpOwoKICAgICAgICBzY2hlZHVsZWRUb3BVcCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRpbWUoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgLy8gZm9yIHRlc3RpbmcKICAgICAgICBpZihjVGltZSA+IDApIHsKICAgICAgICAgICAgcmV0dXJuIGNUaW1lOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGJsb2NrLnRpbWVzdGFtcDsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2RheSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZGF5Rm9yKHRpbWUoKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGF5Rm9yKHVpbnQgdGltZXN0YW1wKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHN1Yih0aW1lc3RhbXAsIHN0YXJ0VGltZSkgLyAyNCBob3VyczsKICAgIH0KCiAgICBmdW5jdGlvbiBsb3dlckxpbWl0Rm9yVG9kYXkoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRvZGF5KCkgKiAxIGV0aGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNjaGVkdWxlZFRvcFVwKCkgb25seU93bmVyIHsKICAgICAgICB1aW50IHBheW1lbnQgPSA0MDAwMDAwMDAwMDAwMDA7IC8vIDQgbWlsbGlvbiB0b2tlbnMKCiAgICAgICAgcmVxdWlyZShzdWIodGltZSgpLCBsYXN0U2NoZWR1bGVkVG9wVXApID49IDEgeWVhcnMpOwogICAgICAgIHJlcXVpcmUodGVhbUFuZEV4cGVydHNUb2tlbnMgPj0gcGF5bWVudCAqIDIpOwoKICAgICAgICBsYXN0U2NoZWR1bGVkVG9wVXAgPSB0aW1lKCk7CgogICAgICAgIHRlYW1BbmRFeHBlcnRzVG9rZW5zIC09IHBheW1lbnQ7CiAgICAgICAgYmFsYW5jZU9mW3RoaXNdID0gc3ViKGJhbGFuY2VPZlt0aGlzXSwgcGF5bWVudCk7CiAgICAgICAgYmFsYW5jZU9mW2V4cGVydHNBY2NvdW50XSA9IGFkZChiYWxhbmNlT2ZbZXhwZXJ0c0FjY291bnRdLCBwYXltZW50KTsKCiAgICAgICAgdGVhbUFuZEV4cGVydHNUb2tlbnMgLT0gcGF5bWVudDsKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gPSBzdWIoYmFsYW5jZU9mW3RoaXNdLCBwYXltZW50KTsKICAgICAgICBiYWxhbmNlT2ZbdGVhbUFjY291bnRdID0gYWRkKGJhbGFuY2VPZlt0ZWFtQWNjb3VudF0sIHBheW1lbnQpOwoKICAgICAgICBUcmFuc2Zlcih0aGlzLCBleHBlcnRzQWNjb3VudCwgcGF5bWVudCk7IC8vIGV4ZWN1dGUgYW4gZXZlbnQgcmVmbGVjdGluZyB0aGUgY2hhbmdlCiAgICAgICAgVHJhbnNmZXIodGhpcywgdGVhbUFjY291bnQsIHBheW1lbnQpOyAvLyBleGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZCh1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUodGltZSgpID4gcmVmdW5kU3RhcnRUaW1lKTsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBfdmFsdWUgKiBwcmljZSk7CgogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHN1YihiYWxhbmNlT2ZbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZU9mW3RoaXNdID0gYWRkKGJhbGFuY2VPZlt0aGlzXSwgX3ZhbHVlKTsKICAgICAgICBhdmFpbGFibGVUb2tlbnMgPSBhZGQoYXZhaWxhYmxlVG9rZW5zLCBfdmFsdWUpOwoKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKF92YWx1ZSAqIHByaWNlKTsKCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgX3ZhbHVlKTsgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgIH0KCiAgICAvKiBTZW5kIHRva2VucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCgogICAgICAgIGlmIChfdG8gPT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICByZWZ1bmQoX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gc3ViKGJhbGFuY2VPZlttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGFkZChiYWxhbmNlT2ZbX3RvXSwgX3ZhbHVlKTsKCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgfQoKICAgIC8qIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSB0b2tlbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgLy8gQ2hlY2sgYWxsb3dhbmNlCgogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzdWIoYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsgLy8gIFN1YnRyYWN0IGZyb20gdGhlIGFsbG93YW5jZQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gPSBzdWIoYmFsYW5jZU9mW19mcm9tXSwgX3ZhbHVlKTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBhZGQoYmFsYW5jZU9mW190b10sIF92YWx1ZSk7IC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsb3NlUmVmdW5kKCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHRpbWUoKSAtIHJlZnVuZFN0YXJ0VGltZSA+IHJlZnVuZER1cmF0aW9uKTsKCiAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICAvKgogICAgICogICAgVG9rZW4gcHVyY2hhc2luZyBoYXMgMiBzdGFnZXM6CiAgICAgKiAgICAgICAtIEZpcnN0IHN0YWdlIGhvbGRzIDMxIGRheXMuIFRoZXJlIGlzIG5vIGxpbWl0IG9mIGJ1eWluZy4KICAgICAqICAgICAgIC0gU2Vjb25kIHN0YWdlIGhvbGRzIH41IHllYXJzIGFmdGVyLiBUaGVyZSB3aWxsIGJlIGxpbWl0IG9mIDMzMy4zMyBldGhlciBwZXIgZGF5LgogICAgICovCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHN0YXJ0VGltZSA8PSB0aW1lKCkpOyAvLyBjaGVjayBpZiBJQ08gaXMgZ29pbmcKCiAgICAgICAgdWludCBhbW91bnQgPSBkaXYobXNnLnZhbHVlLCBwcmljZSk7CgogICAgICAgIGlmICh0aW1lKCkgLSBzdGFydFRpbWUgPiBmaXJzdFN0YWdlRHVyYXRpb24pIHsgLy8gc2Vjb25kIHN0YWdlCiAgICAgICAgICAgIHJlcXVpcmUoMSBldGhlciA8PSBtc2cudmFsdWUpOyAvLyBjaGVjayBtaW4uIGxpbWl0CiAgICAgICAgICAgIHJlcXVpcmUobXNnLnZhbHVlIDw9IDMwMCBldGhlcik7IC8vIGNoZWNrIG1heC4gbGltaXQKCiAgICAgICAgICAgIC8vIHNlbmQgODAlIHRvIGJlbmVmaWNpYXJ5IGFjY291bnQsIGFub3RoZXIgMjAlIHN0YXlzIGZvciByZWZ1bmRpbmcKICAgICAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIobXVsKGRpdihtc2cudmFsdWUsIDUpLCA0KSk7CgogICAgICAgICAgICB1aW50IGN1cnJlbnREYXkgPSBsYXN0UHJvY2Vzc2VkRGF5ICsgMTsKICAgICAgICAgICAgdWludCBsaW1pdCA9IG1heERhaWx5Q2FwIC0gZGFpbHlUb3RhbHNbY3VycmVudERheV07CgogICAgICAgICAgICBpZiAobGltaXQgPj0gYW1vdW50KSB7CiAgICAgICAgICAgICAgICBhdmFpbGFibGVUb2tlbnMgPSBzdWIoYXZhaWxhYmxlVG9rZW5zLCBhbW91bnQpOwogICAgICAgICAgICAgICAgYmFsYW5jZU9mW3RoaXNdID0gc3ViKGJhbGFuY2VPZlt0aGlzXSwgYW1vdW50KTsgLy8gc3VidHJhY3RzIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UKICAgICAgICAgICAgICAgIGRhaWx5VG90YWxzW2N1cnJlbnREYXldID0gYWRkKGRhaWx5VG90YWxzW2N1cnJlbnREYXldLCBhbW91bnQpOwogICAgICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYWRkKGJhbGFuY2VPZlttc2cuc2VuZGVyXSwgYW1vdW50KTsgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQoKICAgICAgICAgICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFtb3VudCk7IC8vIGV4ZWN1dGUgYW4gZXZlbnQgcmVmbGVjdGluZyB0aGUgY2hhbmdlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBxdWV1ZWRBbW91bnQgPSBhZGQocXVldWVkQW1vdW50LCBhbW91bnQpOwogICAgICAgICAgICAgICAgcmVxdWlyZShxdWV1ZWRBbW91bnQgPD0gYXZhaWxhYmxlVG9rZW5zKTsKICAgICAgICAgICAgICAgIEJ1eVRpY2tldCBtZW1vcnkgdGlja2V0ID0gQnV5VGlja2V0KHthY2NvdW50OiBtc2cuc2VuZGVyLCBhbW91bnQ6IGFtb3VudCwgdGltZTogdGltZSgpfSk7CiAgICAgICAgICAgICAgICBwdXNoUXVldWUodGlja2V0KTsKICAgICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgeyAvLyBmaXJzdCBzdGFnZQogICAgICAgICAgICByZXF1aXJlKGxvd2VyTGltaXRGb3JUb2RheSgpIDw9IG1zZy52YWx1ZSk7IC8vIGNoZWNrIG1pbi4gbGltaXQKICAgICAgICAgICAgcmVxdWlyZShhbW91bnQgPD0gYXZhaWxhYmxlVG9rZW5zKTsKCiAgICAgICAgICAgIC8vIHNlbmQgODAlIHRvIGJlbmVmaWNpYXJ5IGFjY291bnQsIGFub3RoZXIgMjAlIHN0YXlzIGZvciByZWZ1bmRpbmcKICAgICAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIobXVsKGRpdihtc2cudmFsdWUsIDUpLCA0KSk7CgogICAgICAgICAgICBhdmFpbGFibGVUb2tlbnMgPSBzdWIoYXZhaWxhYmxlVG9rZW5zLCBhbW91bnQpOwogICAgICAgICAgICBiYWxhbmNlT2ZbdGhpc10gPSBzdWIoYmFsYW5jZU9mW3RoaXNdLCBhbW91bnQpOyAvLyBzdWJ0cmFjdHMgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBhZGQoYmFsYW5jZU9mW21zZy5zZW5kZXJdLCBhbW91bnQpOyAvLyBhZGRzIHRoZSBhbW91bnQgdG8gYnV5ZXIncyBiYWxhbmNlCgogICAgICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAvLyBleGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwcm9jZXNzUGVuZGluZ1RpY2tldHMoKSBvbmx5T3duZXIgewoKICAgICAgICB1aW50IHNpemUgPSBxdWV1ZVNpemUoKTsKICAgICAgICB1aW50IHB0ciA9IDA7CiAgICAgICAgdWludCBjdXJyZW50RGF5OwogICAgICAgIHVpbnQgbGltaXQ7CiAgICAgICAgQnV5VGlja2V0IG1lbW9yeSB0aWNrZXQ7CgogICAgICAgIHdoaWxlIChwdHIgPCBzaXplKSB7CiAgICAgICAgICAgIGN1cnJlbnREYXkgPSBsYXN0UHJvY2Vzc2VkRGF5ICsgMTsKICAgICAgICAgICAgbGltaXQgPSBtYXhEYWlseUNhcCAtIGRhaWx5VG90YWxzW2N1cnJlbnREYXldOwoKICAgICAgICAgICAgLy8gc3RvcCB0aGVuIHRyeWluZyB0byBwcm9jZXNzIGZ1dHVyZQogICAgICAgICAgICBpZiAoc3RhcnRUaW1lICsgKGN1cnJlbnREYXkgLSAxKSAqIDEgZGF5cyA+IHRpbWUoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBsaW1pdCB0byBwcmV2ZW50IG91dCBvZiBnYXMgZXJyb3IKICAgICAgICAgICAgaWYgKHB0ciA+IDUwKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRpY2tldCA9IHBlZWtRdWV1ZSgpOwoKICAgICAgICAgICAgaWYgKGxpbWl0IDwgdGlja2V0LmFtb3VudCB8fCB0aWNrZXQudGltZSAtIDEwMDAgc2Vjb25kcyA+IHN0YXJ0VGltZSArIChjdXJyZW50RGF5IC0gMSkgKiAxIGRheXMpIHsKICAgICAgICAgICAgICAgIGxhc3RQcm9jZXNzZWREYXkgKz0gMTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwb3BRdWV1ZSgpOwogICAgICAgICAgICBwdHIgKz0gMTsKCiAgICAgICAgICAgIGF2YWlsYWJsZVRva2VucyA9IHN1YihhdmFpbGFibGVUb2tlbnMsIHRpY2tldC5hbW91bnQpOwogICAgICAgICAgICBxdWV1ZWRBbW91bnQgPSBzdWIocXVldWVkQW1vdW50LCB0aWNrZXQuYW1vdW50KTsKICAgICAgICAgICAgZGFpbHlUb3RhbHNbY3VycmVudERheV0gPSBhZGQoZGFpbHlUb3RhbHNbY3VycmVudERheV0sIHRpY2tldC5hbW91bnQpOwogICAgICAgICAgICBiYWxhbmNlT2ZbdGhpc10gPSBzdWIoYmFsYW5jZU9mW3RoaXNdLCB0aWNrZXQuYW1vdW50KTsKICAgICAgICAgICAgYmFsYW5jZU9mW3RpY2tldC5hY2NvdW50XSA9IGFkZChiYWxhbmNlT2ZbdGlja2V0LmFjY291bnRdLCB0aWNrZXQuYW1vdW50KTsgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQoKICAgICAgICAgICAgVHJhbnNmZXIodGhpcywgdGlja2V0LmFjY291bnQsIHRpY2tldC5hbW91bnQpOyAvLyBleGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIGJ1eSgpOwogICAgfQp9'.
	

]
