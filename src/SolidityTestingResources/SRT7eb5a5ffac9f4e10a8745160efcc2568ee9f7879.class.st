Class {
	#name : #SRT7eb5a5ffac9f4e10a8745160efcc2568ee9f7879,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7eb5a5ffac9f4e10a8745160efcc2568ee9f7879 >> base64 [
	^ ''.
	

]
