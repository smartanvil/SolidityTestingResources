Class {
	#name : #SRT3845f2534e6db61d3c093a84fa6b3672c895c91b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3845f2534e6db61d3c093a84fa6b3672c895c91b >> base64 [
	^ ''.
	

]
