Class {
	#name : #SRT3fcee23add6e86dde3c4d395cbce1cae7f16d06d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3fcee23add6e86dde3c4d395cbce1cae7f16d06d >> base64 [
	^ ''.
	

]
