Class {
	#name : #SRT5652ac06e148b8c8d86c2c040fdbbbf98860ef47,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5652ac06e148b8c8d86c2c040fdbbbf98860ef47 >> base64 [
	^ ''.
	

]
