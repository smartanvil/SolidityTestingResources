Class {
	#name : #SRT63f28b9f453d66d9d15a124d05399a8120725be3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63f28b9f453d66d9d15a124d05399a8120725be3 >> base64 [
	^ ''.
	

]
