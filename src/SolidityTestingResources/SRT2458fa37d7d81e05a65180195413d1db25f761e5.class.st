Class {
	#name : #SRT2458fa37d7d81e05a65180195413d1db25f761e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2458fa37d7d81e05a65180195413d1db25f761e5 >> base64 [
	^ ''.
	

]
