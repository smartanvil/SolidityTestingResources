Class {
	#name : #SRTbA6284cA128d72B25f1353FadD06Aa145D9095Af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbA6284cA128d72B25f1353FadD06Aa145D9095Af >> base64 [
	^ ''.
	

]
