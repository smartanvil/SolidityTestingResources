Class {
	#name : #SRT6ccb56947ea1d6efdc81acfbacd8263ddfa9b202,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6ccb56947ea1d6efdc81acfbacd8263ddfa9b202 >> base64 [
	^ ''.
	

]
