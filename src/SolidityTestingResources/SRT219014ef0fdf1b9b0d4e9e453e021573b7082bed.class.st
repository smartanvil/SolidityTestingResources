Class {
	#name : #SRT219014ef0fdf1b9b0d4e9e453e021573b7082bed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT219014ef0fdf1b9b0d4e9e453e021573b7082bed >> base64 [
	^ ''.
	

]
