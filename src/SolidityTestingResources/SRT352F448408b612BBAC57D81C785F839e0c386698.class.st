Class {
	#name : #SRT352F448408b612BBAC57D81C785F839e0c386698,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT352F448408b612BBAC57D81C785F839e0c386698 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCi8vCi8vICBUaGlzIGlzIGFuIEV0aGVyZXVtIFJhY2UgKCBhbmQgY29kZXIgY2hhbGxlbmdlICkKLy8KLy8gIFRvIHN1cHBvcnQgdGhpcyBnYW1lIHBsZWFzZSBtYWtlIHN1cmUgeW91IGNoZWNrIG91dCB0aGUgc3BvbnNvciBpbiB0aGUgcHVibGljIHNwb25zb3IgdmFyaWFibGUgb2YgZWFjaCBnYW1lCi8vCi8vICBob3cgdG8gcGxheToKLy8KLy8gIDEpIDIwIHJhY2VycyBjYW4gcmVnaXN0ZXIsIHJhY2Ugc3RhcnRpbmcgZmVlIGlzIDUwIGV0aGVyIHBlciBlbnRyeSAob25seSBvbmUgZW50cnkgcGVyIHBlcnNvbiBhbGxvd2VkISkKLy8gIDIpIE9uY2UgMjAgcmFjZXJzIGhhdmUgcmVnaXN0ZXJlZCwgYW55b25lIGNhbiBzdGFydCB0aGUgcmFjZSBieSBoaXR0aW5nIHRoZSBzdGFydF90aGVfcmFjZSgpIGZ1bmN0aW9uCi8vICAzKSBPbmNlIHRoZSByYWNlIGhhcyBzdGFydGVkLCBldmVyeSByYWNlciBoYXMgdG8gaGl0IHRoZSBkcml2ZSgpIGZ1bmN0aW9uIGFzIG9mdGVuIGFzIHRoZXkgY2FuCi8vICA0KSBBZnRlciBhcHByb3ggMzAgbWlucyAofjEyNiBibG9ja3MpIHRoZSByYWNlIGVuZHMsIGFuZCB0aGUgd2lubmVyIGNhbiBjbGFpbSBoaXMgcHJpY2UKLy8gICAgICAgICAocHJpY2UgaXMgYWxsIGVudHJ5IGZlZXMsIGFzIHdlbGwgYXMgd2hhdGV2ZXIgd2FzIGluIHRoZSBhZGRpdGlvbmFsX3ByaWNlX21vbmV5IHBvb2wgdG8gc3RhcnQgd2l0aCApCi8vICAgICAgCi8vICBQbGVhc2Ugbm90ZSB0aGF0IHdlJ2xsIHRyeSB0byBmaW5kIGEgZGlmZmVyZW50IHNwb25zb3IgZm9yIGVhY2ggcmFjZSAod2hvIGNvbnRyaWJ1dGVzIHRvIHRoZSBhZGRpdGlvbmFsX3ByaWNlX21vbmV5IHBvb2wpCi8vICBEb250IGZvcmdldCB0byBjaGVjayBvdXQgdGhlIHNwb25zb3Igb2YgdGhpcyBnYW1lIQovLwovLyAgUGxlYXNlIHNlbmQgYW55IGNvbW1lbnRzIG9yIHF1ZXN0aW9ucyBhYm91dCB0aGlzIGdhbWUgdG8gPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImUzOTM4YjhhOGY4YTkzOTNjZDgxOTY5MTg4ODI5MTg3YTM5YTgyOGI4YzhjY2Q4MDhjOGUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+LCBJIHdpbGwgdHJ5IHRvIHJlc3BvbmQgd2l0aGluIGEgZGF5LgovLyAgTGFuZ3VhZ2VzIHNwb2tlbjogRW5nbGlzaCwgR2VybWFuLCBhIGxpdHRsZSBTcGFuaXNoCi8vCgpjb250cmFjdCBUaGVHcmVhdEV0aGVyUmFjZSB7CgogICBtYXBwaW5nKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHJhY2VyczsgLy9rZWVwcyByYWNlcnMgKGluZGV4IDEuLnRvdGFsX3JhY2VycykKICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyByYWNlcl9pbmRleDsgLy8gYWRkcmVzcyB0byBpbmRleAogICAKICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBkaXN0YW5jZV9kcml2ZW47IC8vIGtlZXBzIHRyYWNrIG9mIHRoZSByYWNlL3Byb2dyZXNzIG9mIHBsYXllcnMKICAgCiAgIHN0cmluZyBwdWJsaWMgc3BvbnNvcjsKICAgCiAgIHVpbnQyNTYgcHVibGljIHRvdGFsX3JhY2VyczsgICAgICAvLyBudW1iZXIgb2YgcmFjZXJzLCBvbmNlIHJlYWNoZWQgdGhlIHJhY2UgY2FuIHN0YXJ0CiAgIHVpbnQyNTYgcHVibGljIHJlZ2lzdGVyZWRfcmFjZXJzOyAvLyBob3cgbWFueSByYWNlcnMgZG8gd2UgaGF2ZSBhbHJlYWR5CiAgIHVpbnQyNTYgcHVibGljIHJlZ2lzdHJhdGlvbl9mZWU7ICAvLyBob3cgbXVjaCBpcyBpdCB0byBwYXJ0aWNpcGF0ZQogICB1aW50MjU2IHB1YmxpYyBhZGRpdGlvbmFsX3ByaWNlX21vbmV5OwogICB1aW50MjU2IHB1YmxpYyByYWNlX3N0YXJ0X2Jsb2NrOyAgLy8gYmxvY2sgbnVtYmVyIHRoYXQgaW5kaWNhdGVzIHdoZW4gdGhlIHJhY2Ugc3RhcnRzIChzZXQgYWZ0ZXIgZXZlcnlvbmUgaGFzIHNpZ25lZCB1cCkKICAgCiAgIGFkZHJlc3MgcHVibGljIHdpbm5lcjsKICAgCiAgIGFkZHJlc3MgZGV2ZWxvcGVyX2FkZHJlc3M7IC8vIHRvIGdpdmUgZGV2ZWxvcGVyIGhpcyA1IGV0aGVyIGZlZQogICBhZGRyZXNzIGNyZWF0b3I7CgogICBlbnVtIEV2dFN0YXR1cyB7IFNpZ25VcCwgUmVhZHlUb1N0YXJ0LCBTdGFydGVkLCBGaW5pc2hlZCB9CiAgIEV2dFN0YXR1cyBwdWJsaWMgZXZlbnRTdGF0dXM7CiAgIAogICBmdW5jdGlvbiBnZXRTdGF0dXMoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgIGlmIChldmVudFN0YXR1cyA9PSBFdnRTdGF0dXMuU2lnblVwKSByZXR1cm4gIlNpZ25VcCI7CiAgICAgICBpZiAoZXZlbnRTdGF0dXMgPT0gRXZ0U3RhdHVzLlJlYWR5VG9TdGFydCkgcmV0dXJuICJSZWFkeVRvU3RhcnQiOwogICAgICAgaWYgKGV2ZW50U3RhdHVzID09IEV2dFN0YXR1cy5TdGFydGVkKSByZXR1cm4gIlN0YXJ0ZWQiOwogICAgICAgaWYgKGV2ZW50U3RhdHVzID09IEV2dFN0YXR1cy5GaW5pc2hlZCkgcmV0dXJuICJGaW5pc2hlZCI7CiAgIH0KICAgCiAgIGZ1bmN0aW9uIGFkZGl0aW9uYWxfaW5jZW50aXZlKCkgcHVibGljIHBheWFibGUgeyAvLyBhZGRpdGlvbmFsIGV0aGVyIHRvIHdpbiwgb24gdG9wIG9mIG90aGVyIHJhY2VycyBjb250cmlidXRpb24KICAgICAgIGFkZGl0aW9uYWxfcHJpY2VfbW9uZXkgKz0gbXNnLnZhbHVlOwogICB9CiAgIAogICBmdW5jdGlvbiBUaGVHcmVhdEV0aGVyUmFjZShzdHJpbmcgcF9zcG9uc29yKXsgLy8gY3JlYXRlIHRoZSBjb250cmFjdAogICAgICAgc3BvbnNvciA9IHBfc3BvbnNvcjsKICAgICAgIHRvdGFsX3JhY2VycyA9IDIwOwogICAgICAgcmVnaXN0ZXJlZF9yYWNlcnMgPSAwOwogICAgICAgcmVnaXN0cmF0aW9uX2ZlZSA9IDUwIGV0aGVyOwogICAgICAgZXZlbnRTdGF0dXMgPSBFdnRTdGF0dXMuU2lnblVwOwogICAgICAgZGV2ZWxvcGVyX2FkZHJlc3MgPSAweDZkNTcxOUZmNDY0YzY2MjRDMzAyMjU5MzEzOTNGODQyRTNBNEE0MWE7CiAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgfQogICAKICAgLy8vIDEpIFNJR04gVVAgRk9SIFRIRSBSQUNFIChvbmx5IG9uZSBlbnRyeSBwZXIgcGVyc29uIGFsbG93ZWQpCiAgIAogICBmdW5jdGlvbigpIHBheWFibGUgeyAvLyBidXkgc3RhcnRpbmcgcG9zaXRpb24gYnkgc2ltcGx5IHRyYW5zZmVycmluZyAKICAgICAgICB1aW50IHN0b3JlOwogICAgICAgIGlmICggbXNnLnZhbHVlIDwgcmVnaXN0cmF0aW9uX2ZlZSApIHRocm93OyAgICAvLyBub3QgZW5vdWdoIHBhaWQgdG8gCiAgICAgICAgaWYgKCByYWNlcl9pbmRleFttc2cuc2VuZGVyXSA+IDAgICkgdGhyb3c7ICAgIC8vIGFscmVhZHkgcGFydCBvZiB0aGUgcmFjZQogICAgICAgIGlmICggZXZlbnRTdGF0dXMgIT0gRXZ0U3RhdHVzLlNpZ25VcCApIHRocm93OyAvLyBhcmUgd2Ugc3RpbGwgaW4gc2lnbnVwIHBoYXNlCiAgICAgICAgCiAgICAgICAgcmVnaXN0ZXJlZF9yYWNlcnMrKzsKICAgICAgICByYWNlcl9pbmRleFttc2cuc2VuZGVyXSA9IHJlZ2lzdGVyZWRfcmFjZXJzOyAgLy8gc3RvcmUgcmFjZXIgaW5kZXgvcG9zaXRpb24KICAgICAgICByYWNlcnNbcmVnaXN0ZXJlZF9yYWNlcnNdID0gbXNnLnNlbmRlcjsgICAgICAgLy8gc3RvcmUgcmFjZXIgYnkgaW5kZXgvcG9zaXRpb24KICAgICAgICBpZiAoIHJlZ2lzdGVyZWRfcmFjZXJzID49IHRvdGFsX3JhY2Vycyl7ICAgICAgLy8gcmFjZSBpcyBmdWxsLCBsZXRzIGJlZ2luLi4KICAgICAgICAgICAgZXZlbnRTdGF0dXMgPSBFdnRTdGF0dXMuUmVhZHlUb1N0YXJ0OyAgICAgLy8gbm8gbW9yZSBidXkgaW4ncyBwb3NzaWJsZQogICAgICAgICAgICByYWNlX3N0YXJ0X2Jsb2NrID0gYmxvY2subnVtYmVyICsgNDI7ICAvLyByYWNlIGNhbiBzdGFydCB+IDEwIG1pbnV0ZXMgYWZ0ZXIgbGFzdCBwZXJzb24gaGFzIHNpZ25lZCB1cAogICAgICAgIH0KICAgfQogICAKICAgLy8vIDIpIFNUQVJUIFRIRSBSQUNFCiAgIAogICBmdW5jdGlvbiBzdGFydF90aGVfcmFjZSgpIHB1YmxpYyB7CiAgICAgICBpZiAoIGV2ZW50U3RhdHVzICE9IEV2dFN0YXR1cy5SZWFkeVRvU3RhcnQgKSB0aHJvdzsgLy8gcmFjZSBpcyBub3QgcmVhZHkgdG8gYmUgc3RhcnRlZCB5ZXQKICAgICAgIGlmIChibG9jay5udW1iZXIgPCByYWNlX3N0YXJ0X2Jsb2NrKSB0aHJvdzsgICAgICAgICAgICAvLyByYWNlIHN0YXJ0aW5nIGJsb2NrIG5vdCB5ZXQgcmVhY2hlZAogICAgICAgZXZlbnRTdGF0dXMgPSBFdnRTdGF0dXMuU3RhcnRlZDsKICAgfQogICAKICAgLy8vIDMpIERSSVZFIEFTIEZBU1QgQVMgWU9VIENBTiAoaGl0IHRoaXMgZnVuY3Rpb24gYXMgb2Z0ZW4gYXMgeW91IGNhbiB3aXRoaW4gdGhlIG5leHQgMzAgbWlucyApCiAgIGZ1bmN0aW9uIGRyaXZlKCkgcHVibGljIHsKICAgICAgIGlmICggZXZlbnRTdGF0dXMgIT0gRXZ0U3RhdHVzLlN0YXJ0ZWQgKSB0aHJvdzsKICAgICAgIAogICAgICAgaWYgKCBibG9jay5udW1iZXIgPiByYWNlX3N0YXJ0X2Jsb2NrICsgMTI2ICl7IAogICAgICAgICAgIAogICAgICAgICAgIGV2ZW50U3RhdHVzID0gRXZ0U3RhdHVzLkZpbmlzaGVkOwogICAgICAgICAgIAogICAgICAgICAgIC8vIGZpbmQgd2lubmVyCiAgICAgICAgICAgd2lubmVyID0gcmFjZXJzWzFdOwogICAgICAgICAgIGZvciAodWludDI1NiBpZHggPSAyOyBpZHggPD0gcmVnaXN0ZXJlZF9yYWNlcnM7IGlkeCsrKXsKICAgICAgICAgICAgICAgaWYgKCBkaXN0YW5jZV9kcml2ZW5bcmFjZXJzW2lkeF1dID4gZGlzdGFuY2VfZHJpdmVuW3dpbm5lcl0gICkgLy8gbm90ZTogaW4gY2FzZSBvZiBlcXVhbCBkaXN0YW5jZSwgdGhlIHJhY2VyIHdobyBzaWduZWQgdXAgZWFybGllciB3aW5zCiAgICAgICAgICAgICAgICAgICAgd2lubmVyID0gcmFjZXJzW2lkeF07CiAgICAgICAgICAgfQogICAgICAgICAgIHJldHVybjsKICAgICAgIH0KICAgICAgIGRpc3RhbmNlX2RyaXZlblttc2cuc2VuZGVyXSsrOyAvLyBkcml2ZSAxIHVuaXQKICAgfQogICAKICAgLy8gNCkgQ0xBSU0gV0lOTklORyBNT05FWQogICAKICAgZnVuY3Rpb24gY2xhaW1fcHJpY2VfbW9uZXkoKSBwdWJsaWMgewogICAgICAgCiAgICAgICBpZiAgKGV2ZW50U3RhdHVzID09IEV2dFN0YXR1cy5GaW5pc2hlZCl7CiAgICAgICAgICAgICAgICB1aW50IHdpbm5pbmdfYW1vdW50ID0gdGhpcy5iYWxhbmNlIC0gNSBldGhlcjsgIC8vIGJhbGFuY2UgbWludXMgNSBldGhlciBmZWUKICAgICAgICAgICAgICAgIGlmICghd2lubmVyLnNlbmQod2lubmluZ19hbW91bnQpKSB0aHJvdzsgICAgICAgLy8gc2VuZCB0byB3aW5uZXIKICAgICAgICAgICAgICAgIGlmICghZGV2ZWxvcGVyX2FkZHJlc3Muc2VuZCg1IGV0aGVyKSkgdGhyb3c7ICAgLy8gc2VuZCA1IGV0aGVyIHRvIGRldmVsb3BlcgogICAgICAgfQogICAgICAgCiAgIH0KCiAgIAogICAvLyBjbGVhbnVwIG5vIGVhcmxpZXIgdGhhbiAzIGRheXMgYWZ0ZXIgcmFjZSAodG8gYWxsb3cgZm9yIGVub3VnaCB0aW1lIHRvIGNsYWltKSwgb3Igd2hpbGUgbm9vbmUgaGFzIHlldCByZWdpc3RlcmVkCiAgIGZ1bmN0aW9uIGNsZWFudXAoKSBwdWJsaWMgewogICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY3JlYXRvcikgdGhyb3c7CiAgICAgICBpZiAoCiAgICAgICAgICAgICByZWdpc3RlcmVkX3JhY2VycyA9PSAwIHx8ICAgIC8vIG5vb25lIGhhcyB5ZXQgcmVnaXN0ZXJlZAogICAgICAgICAgICAgZXZlbnRTdGF0dXMgPT0gRXZ0U3RhdHVzLkZpbmlzaGVkICYmIGJsb2NrLm51bWJlciA+IHJhY2Vfc3RhcnRfYmxvY2sgKyAxODUxNCAvLyBmaW5pc2hlZCwgYW5kIDMgZGF5cyBoYXZlIHBhc3NlZAogICAgICAgICAgKXsKICAgICAgICAgICBzZWxmZGVzdHJ1Y3QoY3JlYXRvcik7CiAgICAgICB9IAogICAgICAgZWxzZSB0aHJvdzsKICAgfQogICAgCn0='.
	

]
