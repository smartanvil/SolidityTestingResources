Class {
	#name : #SRTe2ace83f9acfc236bd95481045990bfa6b711e16,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe2ace83f9acfc236bd95481045990bfa6b711e16 >> base64 [
	^ ''.
	

]
