Class {
	#name : #SRT3c22ae85b4ee099f4fd656872343c95ff74d57d4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c22ae85b4ee099f4fd656872343c95ff74d57d4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMApjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CgkvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQoJZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgkKCS8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCglmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCQoJLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bwoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgkKCS8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgkKCS8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCgkvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4KCS8vIHRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIHNvbWUgREVYIGZ1bmN0aW9uYWxpdHkKCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCQoJLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwoJCgkvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgkKCS8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCglldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgUmFuZG9tVG9rZW4gewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBOdW1iZXIxRGltZSBpcyBFUkMyMEludGVyZmFjZSB7CiAgICBib29sIHB1YmxpYyBpc19wdXJjaGFzZV9hbGxvd2VkOwogICAgYm9vbCBwdWJsaWMgaXNfdHJhbnNmZXJfYWxsb3dlZDsKICAgIHVpbnQyNTYgcHVibGljIHRvdFN1cHBseSA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RDb250cmlidXRpb24gPSAwOwogICAgYWRkcmVzcyBvd25lcjsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIAogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHJldmVydCgpOyB9CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgdHJhbnNmZXJBbGxvd2VkKCkgewogICAgICAgIGlmICghIGlzX3RyYW5zZmVyX2FsbG93ZWQpIHsgcmV2ZXJ0KCk7IH0KICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBwdXJjaGFzZUFsbG93ZWQoKSB7CiAgICAgICAgaWYgKCEgaXNfcHVyY2hhc2VfYWxsb3dlZCkgeyByZXZlcnQoKTsgfQogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIE51bWJlcjFEaW1lKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgZW5hYmxlVHJhbnNmZXIoZmFsc2UpOwogICAgICAgIGVuYWJsZVB1cmNoYXNlKGZhbHNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nKSAgICB7IHJldHVybiAiTnVtYmVyIE9uZSBEaW1lIjsgfQogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nKSAgeyByZXR1cm4gIk4xRCI7IH0KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsgcmV0dXJuIDA7IH0KICAgIAogICAgZnVuY3Rpb24gZ2V0X2JhbGFuY2UoYWRkcmVzcyBhKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiBhLmJhbGFuY2U7IH0KICAgIAogICAgZnVuY3Rpb24gZ2V0X3N0YXRzKCkgcHVibGljIHZpZXcgb25seU93bmVyIHJldHVybnMgKHVpbnQyNTYgX3RvdFN1cHBseSwgdWludDI1NiBfdG90Q29udHJpYnV0aW9uKSB7CiAgICAgICAgX3RvdFN1cHBseSA9IHRvdFN1cHBseTsKICAgICAgICBfdG90Q29udHJpYnV0aW9uID0gdG90Q29udHJpYnV0aW9uOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBlbmFibGVQdXJjaGFzZShib29sIF9lbmFiKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gaXNfcHVyY2hhc2VfYWxsb3dlZCA9IF9lbmFiOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2Zlcihib29sIF9lbmFiKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gaXNfdHJhbnNmZXJfYWxsb3dlZCA9IF9lbmFiOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG90U3VwcGx5OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBhKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW2FdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyB0cmFuc2ZlckFsbG93ZWQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmICggCiAgICAgICAgICAgICAgICBfYW1vdW50ID4gMAogICAgICAgICAgICAmJiAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAgICAmJiAgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dCiAgICAgICAgKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgdWludDI1NiBfYW1vdW50CiAgICApIHB1YmxpYyB0cmFuc2ZlckFsbG93ZWQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmICgKICAgICAgICAgICAgICAgIF9hbW91bnQgPiAwCiAgICAgICAgICAgICYmICBiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudAogICAgICAgICAgICAmJiAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAgICAmJiAgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dCiAgICAgICAgKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50OwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHB1cmNoYXNlQWxsb3dlZCB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7IHJldHVybjsgfQoKICAgICAgICB0b3RDb250cmlidXRpb24gKz0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQyNTYgdG9rZW5zSXNzdWVkID0gbXNnLnZhbHVlOwogICAgICAgIHRvdFN1cHBseSArPSB0b2tlbnNJc3N1ZWQ7CiAgICAgICAgb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNJc3N1ZWQ7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcyh0aGlzKSwgbXNnLnNlbmRlciwgdG9rZW5zSXNzdWVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gd2l0aGRyYXdGb3JlaWduVG9rZW5zKGFkZHJlc3MgX3Rva2VuQ29udHJhY3QpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIFJhbmRvbVRva2VuIHRva2VuID0gUmFuZG9tVG9rZW4oX3Rva2VuQ29udHJhY3QpOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgICAgIHJldHVybiB0b2tlbi50cmFuc2Zlcihvd25lciwgYW1vdW50KTsKICAgIH0KfQ=='.
	

]
