Class {
	#name : #SRT48cd81536898c5143459867c508c4b02440424f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48cd81536898c5143459867c508c4b02440424f1 >> base64 [
	^ ''.
	

]
