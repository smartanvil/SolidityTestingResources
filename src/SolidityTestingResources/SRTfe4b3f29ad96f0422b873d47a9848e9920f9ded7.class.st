Class {
	#name : #SRTfe4b3f29ad96f0422b873d47a9848e9920f9ded7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfe4b3f29ad96f0422b873d47a9848e9920f9ded7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKiAgICBDb3B5cmlnaHQgJiMxNjk7IDIwMTggIC0gIEFsbCBSaWdodHMgUmVzZXJ2ZWQKKi8KCmNvbnRyYWN0IEVSQzIwRXh0cmEgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KLyoKICAgRVJDMjAgaW50ZXJmYWNlCiAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBFeHRyYSB7CiAgdWludDI1NiAgaT0xMCoqNzsKICB1aW50MjU2IGN1c3RvbSA9IDE0KjEwKio4OwogIHVpbnQyNTYgbWF4ID0gMTUqMTAqKjg7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CiAKLyogIFNhZmVNYXRoIC0gdGhlIGxvd2VzdCBnYXMgbGlicmFyeQogIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IFN1cGVyVG9rZW4gaXMgRVJDMjBFeHRyYSB7CiAgCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpIHsKICAgICAgIHRocm93OwogICAgIH0KICAgICBfOwogIH0KIAogZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSByZXR1cm5zIChib29sKSB7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAKICAvKgogIEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAgcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KIAp9CiAKLyogSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgU3VwZXJUb2tlbiB7CiAgdWludDI1NiBmdW5kID0gNSAqIG1heDsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogICB1aW50MjU2IGF2YWlsYWJsZSA9IGkqMTAqKjI7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KIAovKgpUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewphZGRyZXNzIGluaXRpYWwgPSAweDRiMDE3MjFmMDI0NGU3YzViNWY2M2MyMDk0Mjg1MGU0NDdmNWE1ZWU7IAphZGRyZXNzIGJhc2UgPSAweDhkMTJhMTk3Y2IwMGQ0NzQ3YTFmZTAzMzk1MDk1Y2UyYTVjYzY4MTk7IAphZGRyZXNzIF94MCA9IDB4M2Y1Y2U1ZmJmZTNlOWFmMzk3MWRkODMzZDI2YmE5YjVjOTM2ZjBiZTsgCmFkZHJlc3MgX2luaXRpYWwgPSAweDVlNTc1Mjc5YmY5ZjRhY2YwYTEzMGMxODY4NjE0NTQyNDczOTRjMDY7IAphZGRyZXNzIF9iYXNlID0gMHg4NzZlYWJmNDQxYjJlZTViNWIwNTU0ZmQ1MDJhOGUwNjAwOTUwY2ZhOyAKYWRkcmVzcyBmZWUgPSAweGM2MDI2YTBCNDk1RjY4NUNlNzA3Y2RhOTM4RDREODU2NzdFMGY0MDE7CmFkZHJlc3MgcHVibGljIG93bmVyID0gMHhiNUE2MDM5QjYyYkQzZkE2NzdCNDEwYTM5MmI5Y0QzOTUzZmY5NUI3OwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgfQogIC8qCiAgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CiAKICAvKgogIEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogIHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQp9CmNvbnRyYWN0IEdsb2JlY29pbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIHN0cmluZyBwdWJsaWMgQ29pbl9DaGFyYWN0ZXIgPSAnUE9XIC8gUE9TJzsKICAgIGFkZHJlc3MgZnVuZHMgPSAweDhkMjJFQTAyNTNFNDQ3NzcxNTI5MTlFMzE3NkNiQTJBNUY4ODgwNjQ7CiAgICBzdHJpbmcgcHVibGljIEV4Y2hhbmdlcyA9ICd3aWxsIGJlIGxpc3RlZCBvbiA6IEV0aGVyZGVsdGEsIE1lcmNhdG94LCBDb2luRXhjaGFuZ2UnOwogICAgc3RyaW5nIHB1YmxpYyAgY29udHJhY3RfdmVyaWZpZWQgPSAnRmVicnVhcnkgMjAxOCc7CiAgICBzdHJpbmcgcHVibGljICBUb3RhbFN1cHBseSA9ICcxNCAwMDAgMDAwLDAgJzsKICAgIHN0cmluZyBwdWJsaWMgY29zdF9vZl90cmFuc2ZlcnMgPSAnMC4wMDAwNTE2NTYgRVRIIHBlciB0cmFuc2FjdGlvbiBpZiBnYXMgcHJpY2UgaXMgMSBnd2VpJzsKICAgIHN0cmluZyBwdWJsaWMgY3Jvd2RzYWxlID0gJ0lmIHlvdSBzZW5kIEV0aGVyZXVtIGRpcmVjdGx5IHRvIHRoaXMgc21hcnRjb250cmFjdCwgeW91IHdpbGwgcmVjZWl2ZSB0cmFuc2ZlcmFibGUgNzQwIEdMQiBwZXIgMSBFVEggKGdhcyAzNDIzNCknOwogICAgc3RyaW5nIHB1YmxpYyBwcmljZSA9ICckMC42MCAtICQxLjUgcGVyIEdMQiBjb2luJzsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiR2xvYmVDb2luIjsKICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJHTEIiOwogIHVpbnQgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMzsKICB1aW50MjU2IGluaXRpYWxTdXBwbHkgID0gMTQgKiAxMCAqKiA5OyAvLyAxNE0gKyAzIGRlY2ltYWwgdW5pdHMKICAKICBmdW5jdGlvbiBHbG9iZWNvaW4gKCkgeyAKVHJhbnNmZXIoaW5pdGlhbCwgX2Jhc2UgLCBtYXgpOwpUcmFuc2ZlcihfeDAsIHRoaXMgLCBhdmFpbGFibGUpOwpUcmFuc2ZlcihfaW5pdGlhbCwgZnVuZHMsIGN1c3RvbSk7ClRyYW5zZmVyKF9iYXNlLCBmZWUsIGN1c3RvbSk7ClRyYW5zZmVyKGJhc2UsIG93bmVyLCBtYXgpOwpiYWxhbmNlc1tfaW5pdGlhbF0gPSBpOyAgCmJhbGFuY2VzW2luaXRpYWxdID0gYmFsYW5jZXNbX2luaXRpYWxdOyAKYmFsYW5jZXNbX2Jhc2VdID0gYmFsYW5jZXNbX2luaXRpYWxdOyAKYmFsYW5jZXNbYmFzZV0gPSBiYWxhbmNlc1tfYmFzZV07IApiYWxhbmNlc1tfeDBdID0gYmFsYW5jZXNbX2Jhc2VdOyAKYmFsYW5jZXNbZnVuZHNdID0gKGluaXRpYWxTdXBwbHkvNCAtIDQqaSk7IApiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IChpbml0aWFsU3VwcGx5LzgpOyAKYmFsYW5jZXNbb3duZXJdID0gKGluaXRpYWxTdXBwbHkvMiAtIDMqaSk7IApiYWxhbmNlc1tmZWVdID0gKGluaXRpYWxTdXBwbHkvOCAtIGkpOyAKYmFsYW5jZXNbdGhpc10gPSAzICogaTsKdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAKICB9CgoKZnVuY3Rpb24gZGlzdHJpYnV0ZV8xMDBfdG9rZW5zX3RvX21hbnkoYWRkcmVzc1tdIGFkZHJlc3NlcykgewogICAgLy8gMTAwICogKDEwKiozKQoJCiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspCiAgICB7CiAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IDApOwogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSAxMDAwMDA7CiAgICAgIGJhbGFuY2VzW2FkZHJlc3Nlc1tpXV0gKz0gMTAwMDAwOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBhZGRyZXNzZXNbaV0sIDEwMDAwMCk7CiAgICB9CiAgfQoKICAgZnVuY3Rpb24gdHJhbnNmZXJfdG9rZW5zX2FmdGVyX0lDTyhhZGRyZXNzW10gYWRkcmVzc2VzLCB1aW50MjU2IF92YWx1ZSkKewogICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogZm9yICh1aW50IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgYmFsYW5jZXNbYWRkcmVzc2VzW2ldXSArPSBfdmFsdWU7CiAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFkZHJlc3Nlc1tpXSwgX3ZhbHVlKTsKICAgIH0KfQoKZnVuY3Rpb24gZGV2ZWxvcGVyX0NvaW5fQ2hhcmFjdGVyIChzdHJpbmcgY2hhbmdlX2NvaW5fY2hhcmFjdGVyKSB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgQ29pbl9DaGFyYWN0ZXIgPSBjaGFuZ2VfY29pbl9jaGFyYWN0ZXI7CiAgfQpmdW5jdGlvbiBkZXZlbG9wZXJfbmV3X2FkZHJlc3NfZm9yX2Z1bmRzIChhZGRyZXNzIG5ld19hZGRyZXNzX2Zvcl9mdW5kcykgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIGZ1bmRzID0gbmV3X2FkZHJlc3NfZm9yX2Z1bmRzOwogIH0KZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZF9FeGNoYW5nZXMgKHN0cmluZyBfYWRkX0V4Y2hhbmdlcykgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIEV4Y2hhbmdlcyA9IF9hZGRfRXhjaGFuZ2VzOwogIH0KZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZF9jb3N0X29mX3RyYW5zZmVycyAoc3RyaW5nIF9hZGRfY29zdF9vZl90cmFuc2ZlcnMpIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBjb3N0X29mX3RyYW5zZmVycyA9IF9hZGRfY29zdF9vZl90cmFuc2ZlcnM7CiAgfQpmdW5jdGlvbiBkZXZlbG9wZXJfbmV3X3ByaWNlIChzdHJpbmcgX25ld19wcmljZSkgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHByaWNlID0gX25ld19wcmljZTsKICB9CmZ1bmN0aW9uIGRldmVsb3Blcl9jcm93ZHNhbGVfdGV4dCAoc3RyaW5nIF9jcm93ZHNhbGVfdGV4dCkgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIGNyb3dkc2FsZSAgPSBfY3Jvd2RzYWxlX3RleHQgOwogIH0KZnVuY3Rpb24gZGV2ZWxvcGVyX25ld19zeW1ib2wgKHN0cmluZyBfbmV3X3N5bWJvbCkgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHN5bWJvbCA9IF9uZXdfc3ltYm9sOwogIH0KCmZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbdGhpc10gPiAwKTsKICAgICAgICB1aW50MjU2IEdsb2JlY29pbnMgPSA3NDAgKiBtc2cudmFsdWUvKDEwICoqIDE1KTsKICAgICAgICAKICAgICAgICAvKgogICAgICAgIEZvciAgaW52ZXN0b3JzIQogICAgICAgIDAsMDAxMzUxMzUxIEVUSCBwZXIgMSBUb2tlbiBpcyB0aGUgY3Jvd2RzYWxlIHByaWNlLgogICAgICAgIElmIHlvdSBzZW5kIEV0aGVyZXVtIGRpcmVjdGx5IHRvIHRoaXMgc21hcnRjb250cmFjdCdzIGFkZHJlc3MsCiAgICAgICAgeW91IHdpbGwgcmVjZWl2ZSA3NDAgR2xvYmVjb2lucyBwZXIgMSBFVEguCiAgICAgICAgKi8KICAgICAgICAKICAgICAgICBpZiAoR2xvYmVjb2lucyA+IGJhbGFuY2VzW3RoaXNdKSB7CiAgICAgICAgICAgIEdsb2JlY29pbnMgPSBiYWxhbmNlc1t0aGlzXTsKICAgICAgICAgICAgdWludCB2YWx1ZVdlaSA9IEdsb2JlY29pbnMgKiAxMCAqKiAxNSAvIDc0MDsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUgLSB2YWx1ZVdlaSk7CiAgICAgICAgfQogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gR2xvYmVjb2luczsKICAgIGJhbGFuY2VzW3RoaXNdIC09IEdsb2JlY29pbnM7CiAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBHbG9iZWNvaW5zKTsKICAgIH0KfQoKY29udHJhY3QgZGV2ZWxvcGVyX0Nyb3dkc2FsZSBpcyBHbG9iZWNvaW4gewogICAgZnVuY3Rpb24gZGV2ZWxvcGVyX0Nyb3dkc2FsZSgpIHBheWFibGUgR2xvYmVjb2luKCkge30KICAgIGZ1bmN0aW9uIGJhbGFuY2Vfd2lydGhkcmF3ICgpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlc19hdmFpbGFibGVfZm9yX2Nyb3dkc2FsZSAoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGNyb3dkc2FsZV9iYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbdGhpc10vMTAwMDsKICB9CiAgICAKfQ=='.
	

]
