Class {
	#name : #SRT71fbecb11e291f824fd5dc9e760f56a5239e4702,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT71fbecb11e291f824fd5dc9e760f56a5239e4702 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Ci8qKgoqIEhvZGxkIERBTyBhbmQgRVJDMjAgdG9rZW4KKiBBdXRob3I6IEN1cnJlbmN5VHljb29uIG9uIEdpdEh1YgoqIExpY2Vuc2U6IE1JVAoqIERhdGU6IDIwMTcKKgoqIERlcGxveSB3aXRoIHRoZSBmb2xsb3dpbmcgYXJnczoKKiAiSG9kbCBEQU8iLCAxOCwgIkhPREwiCioKKi8KY29udHJhY3QgSG9kbERBTyB7CiAgICAvKiBFUkMyMCBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ0hEQU8gMC41JzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLyogRVJDMjAgVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgoKICAgIC8qIHN0b3JlIHRoZSBibG9jayBudW1iZXIgd2hlbiBhIHdpdGhkcmF3YWwgaGFzIGJlZW4gcmVxdWVzdGVkKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gd2l0aGRyYXdhbFJlcXVlc3QpIHB1YmxpYyB3aXRoZHJhd2FsUmVxdWVzdHM7CiAgICBzdHJ1Y3Qgd2l0aGRyYXdhbFJlcXVlc3QgewogICAgdWludCBzaW5jZVRpbWU7CiAgICB1aW50MjU2IGFtb3VudDsKICAgIH0KCiAgICAvKioKICAgICAqIGZlZVBvdCBjb2xsZWN0cyBmZWVzIGZyb20gcXVpY2sgd2l0aGRyYXdhbHMuIFRoaXMgZ2V0cyByZS1kaXN0cmlidXRlZCB0byBzbG93LXdpdGhkcmF3YWxzCiAgICAqLwogICAgdWludDI1NiBwdWJsaWMgZmVlUG90OwoKICAgIHVpbnQgcHVibGljIHRpbWVXYWl0ID0gMzAgZGF5czsKICAgIC8vdWludCBwdWJsaWMgdGltZVdhaXQgPSAxIG1pbnV0ZXM7IC8vIHVuY29tbWVudCBmb3IgVGVzdE5ldAoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluaXRpYWxTdXBwbHkgPSAwOwoKICAgIC8qKgogICAgICogRVJDMjAgZXZlbnRzIHRoZXNlIGdlbmVyYXRlIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwogICAgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZXZlbnQgV2l0aGRyYXdhbFF1aWNrKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgZmVlKTsgLy8gcXVpY2sgd2l0aGRyYXdhbCBkb25lCiAgICBldmVudCBJbmNvcnJlY3RGZWUoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50MjU2IGZlZVJlcXVpcmVkKTsgIC8vIGluY29ycmVjdCBmZWUgcGFpZCBmb3IgcXVpY2sgd2l0aGRyYXdhbAogICAgZXZlbnQgV2l0aGRyYXdhbFN0YXJ0ZWQoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBXaXRoZHJhd2FsRG9uZShhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IHJld2FyZCk7IC8vIGFtb3VudCBpcyB0aGUgYW1vdW50IHRoYXQgd2FzIHVzZWQgdG8gY2FsY3VsYXRlIHJld2FyZAogICAgZXZlbnQgV2l0aGRyYXdhbFByZW1hdHVyZShhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQgYmxvY2tzVG9XYWl0KTsgLy8gTmVlZHMgdG8gd2FpdCBibG9ja3NUb1dhaXQgYmVmb3JlIHdpdGhkcmF3YWwgdW5sb2NrZWQKICAgIGV2ZW50IERlcG9zaXRlZChhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvKioKICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICogSW4gb3VyIGNhc2UsIHRoZXJlJ3Mgbm8gaW5pdGlhbCBzdXBwbHkuIFRva2VucyB3aWxsIGJlIGNyZWF0ZWQgYXMgZXRoZXIgaXMgc2VudAogICAgICogdG8gdGhlIGZhbGwtYmFjayBmdW5jdGlvbi4gVGhlbiB0b2tlbnMgYXJlIGJ1cm5lZCB3aGVuIGV0aGVyIGlzIHdpdGhkcmF3bi4KICAgICAqLwogICAgZnVuY3Rpb24gSG9kbERBTygKICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICkgewoKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMgKDAgaW4gdGhpcyBjYXNlKQogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5ICgwIGluIHRoaXMgY2FzZSkKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgfQoKICAgIC8qKgogICAgICogbm90UGVuZGluZ1dpdGhkcmF3YWwgbW9kaWZpZXIgZ3VhcmRzIHRoZSBmdW5jdGlvbiBmcm9tIGV4ZWN1dGluZyB3aGVuIGEKICAgICAqIHdpdGhkcmF3YWwgaGFzIGJlZW4gcmVxdWVzdGVkIGFuZCBpcyBjdXJyZW50bHkgcGVuZGluZwogICAgICovCiAgICBtb2RpZmllciBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgaWYgKHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5zaW5jZVRpbWUgPiAwKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8qKiBFUkMyMCAtIHRyYW5zZmVyIHNlbmRzIHRva2VucwogICAgICogQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgICogQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICB9CgogICAgLyoqIEVSQzIwIGFwcHJvdmUgYWxsb3dzIGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYKICAgICAqIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgICogQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAqCiAgICAgKgogICAgICogTm90ZSwgdGhlcmUgYXJlIHNvbWUgZWRnZS1jYXNlcyB3aXRoIHRoZSBFUkMtMjAgYXBwcm92ZSBtZWNoYW5pc20uIEluIHRoaXMgY2FzZSBhICdib3VuZHMgY2hlY2snCiAgICAgKiB3YXMgYWRkZWQgdG8gbWFrZSBzdXJlIEFsaWNlIGNhbnQnIGFwcHJvdmUgQm9iIGZvciBtb3JlIHRva2VucyB0aGFuIHNoZSBoYXMuCiAgICAgKiBUaGUgYXNzdW1wdGlvbnMgYXJlIHRoYXQgdGhlc2Ugc2NlbmFyaW9zIGNvdWxkIHN0aWxsIGhhcHBlbiBpZiBub3QgbWl0aWdhdGVkIGJ5IEFsaWNlOgogICAgICoKICAgICAqIFNjZW5hcmlvIDE6CiAgICAgKgogICAgICogVGhlIGZvbGxvd2luZyBzY2VuYXJpbyBjb3VsZCBiZSB0aGUgZXhwZWN0ZWQgb3V0Y29tZSBieSBBbGljZSwgYnV0IGlmIG5vdCwgQWxpY2Ugd291bGQgbmVlZCB0byBzZXQKICAgICAqIGhlciBhcHByb3ZhbCB0byBCb2IgdG8gMCBiZWZvcmUgQWxpY2UgcHVyY2hhc2VzIG1vcmUgdG9rZW5zLgogICAgICoKICAgICAqICAxLiBBbGljZSBoYXMgMTAwIHRva2Vucy4KICAgICAqICAyLiBBbGljZSBhcHByb3ZlcyA1MCB0b2tlbnMgZm9yIEJvYi4KICAgICAqICAzLiBBbGljZSBhcHByb3ZlcyAxMDAgdG9rZW5zIGZvciBDaGFybGVzCiAgICAgKiAgNC4gQm9iIGNhbGxzIHRyYW5zZmVyRnJvbSBhbmQgcmVjZWl2ZXMgaGlzIDUwIHRva2Vucy4KICAgICAqICA1LiBDaGFybGVzIGNhbGxzIHRyYW5zZmVyRnJvbSBhbmQgcmVjZWl2ZXMgdGhlIHJlbWFpbmluZyA1MCB0b2tlbnMKICAgICAqICA2LiBDaGFybGVzIHN0aWxsIGhhcyBhbiBhcHByb3ZhbCBmb3IgNTAgbW9yZSB0b2tlbnMgZnJvbSBBbGljZSwgZXZlbiB0aG91Z2ggc2hlIG5vdyBvd25zIDAgdG9rZW5zLgogICAgICogIDcuIEFsaWNlIHB1cmNoYXNlcyA1MCBtb3JlIHRva2VucwogICAgICogIDguIENoYXJsZXMgc2VlcyB0aGlzLCBhbmQgaW1tZWRpYXRlbHkgY2FsbHMgdHJhbnNmZXJGcm9tIGFuZCByZWNlaXZlcyB0aG9zZSA1MCB0b2tlbnMuCiAgICAgKgogICAgICogU2NlbmFyaW8gMjoKICAgICAqCiAgICAgKiBUaGlzIGlzIGEgcmFjZSBjb25kaXRpb24uIFRvIG1pdGlnYXRlIHRoaXMgcHJvYmxlbSwgQWxpY2Ugc2hvdWxkIHNldCB0aGUgYWxsb3dhbmNlIHRvIDAgaW4gc3RlcCAyLAogICAgICogdGhlbiB3YWl0IHVudGlsIGl0J3MgbWluZWQsIHRoZW4gaWYgQm9iIGRpZG4ndCB0YWtlIHRoZSAxMDAgc2hlIGNhbiBzZXQgdG8gNTAuIChPdGhlcndpc2UgQm9iIG1heQogICAgICogcG90ZW50aWFsbHkgZ2V0IDE1MCB0b2tlbnMpCiAgICAgKgogICAgICoKICAgICAqICAxLiBBbGljZSBhcHByb3ZlcyBCb2IgZm9yIDEwMCwKICAgICAqICAyLiBBbGljZSBjaGFuZ2VzIGl0IHRvIDUwCiAgICAgKiAgMy4gQm9iIHNlZXMgdGhlIGNoYW5nZSBpbiB0aGUgbWVtcG9vbCBiZWZvcmUgaXQncyBtaW5lZCwgYW5kIHNlbmRzIGEgbmV3IHRyYW5zYWN0aW9uCiAgICAgKiAgICAgdGhhdCB3aWxsIGhvcGVmdWxseSB3aW4gdGhlIHJhY2UgYW5kIHdpdGhkcmF3IHRoZSAxMDAgZmlyc3QsIG1lYW53aGlsZSB0aGUgNTAgd2lsbAogICAgICogICAgIGJlIG1pbmVkIGFmdGVyIGFuZCBhbGxvdyBCb2IgdG8gd2l0aGRyYXcgYW5vdGhlciA1MC4KICAgICAqCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBub3RQZW5kaW5nV2l0aGRyYXdhbAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbGluZSBoYXMgYmVlbiBjb21tZW50ZWQgb3V0IGFmdGVyIHBlZXIgcmV2aWV3ICMyCiAgICAgICAgLy8gSXQgbWF5IGJlIHBvc3NpYmxlIHRoYXQgQWxpY2UgY2FuIHByZS1hcHByb3ZlIHRoZSByZWNpcGllbnQgaW4gYWR2YW5jZSwgYmVmb3JlIHNoZSBoYXMgYSBiYWxhbmNlLgogICAgICAgIC8vIGVnLiBBbGljZSBtYXkgYXBwcm92ZSBhIHRvdGFsIGxpZmV0aW1lIGFtb3VudCBmb3IgaGVyIGNoaWxkIHRvIHNwZW5kLCBidXQgb25seSBmdW5kIGhlciBhY2NvdW50IG1vbnRobHkuCiAgICAgICAgLy8gSXQgYWxzbyBhbGxvd3MgaGVyIHRvIGhhdmUgbXVsdGlwbGUgZXF1YWwgYXBwcm92ZWVzCgogICAgICAgIC8vaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOyAvLyBEb24ndCBhbGxvdyBtb3JlIHRoYW4gdGhleSBjdXJyZW50bHkgaGF2ZSAoYm91bmRzIGNoZWNrKQoKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzJiMxODA7CiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIGlmICgoX3ZhbHVlICE9IDApICYmIChhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSB0aHJvdzsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbXVzdCByZXR1cm4gYSBib29sIGFzIHBhcnQgb2YgdGhlIEVSQzIwCiAgICB9CgoKICAgIC8qKgogICAgICogRVJDLTIwIEFwcHJvdmVzIGFuZCB0aGVuIGNhbGxzIHRoZSByZWNlaXZpbmcgY29udHJhY3QKICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgbm90UGVuZGluZ1dpdGhkcmF3YWwKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICBpZiAoIWFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy9jYWxsIHRoZSByZWNlaXZlQXBwcm92YWwgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0IHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0IGhhdmUgdG8gaW5jbHVkZSBhIGNvbnRyYWN0IGluIGhlcmUganVzdCBmb3IgdGhpcy4KICAgICAgICAvL3JlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW5Db250cmFjdCwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICAvL2l0IGlzIGFzc3VtZWQgdGhhdCB3aGVuIGRvZXMgdGhpcyB0aGF0IHRoZSBjYWxsICpzaG91bGQqIHN1Y2NlZWQsIG90aGVyd2lzZSBvbmUgd291bGQgdXNlIHZhbmlsbGEgYXBwcm92ZSBpbnN0ZWFkLgogICAgICAgIGlmKCFfc3BlbmRlci5jYWxsKGJ5dGVzNChieXRlczMyKHNoYTMoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSkpLCBtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEVSQzIwIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucy4gTm90ZTogV2UgYXJlIG5vdCBhbGxvd2luZyBhIHRyYW5zZmVyIGlmCiAgICAgKiBlaXRoZXIgdGhlIGZyb20gb3IgdG8gYWRkcmVzcyBpcyBwZW5kaW5nIHdpdGhkcmF3YWwKICAgICAqIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBub3RlIHRoYXQgd2UgY2FuJ3QgdXNlIG5vdFBlbmRpbmdXaXRoZHJhd2FsIG1vZGlmaWVyIGhlcmUgc2luY2UgdGhpcyBmdW5jdGlvbiBkb2VzIGEgdHJhbnNmZXIKICAgICAgICAvLyBvbiB0aGUgYmVoYWxmIG9mIF9mcm9tCiAgICAgICAgaWYgKHdpdGhkcmF3YWxSZXF1ZXN0c1tfZnJvbV0uc2luY2VUaW1lID4gMCkgdGhyb3c7ICAgLy8gY2FuJ3QgbW92ZSB0b2tlbnMgd2hlbiBfZnJvbSBpcyBwZW5kaW5nIHdpdGhkcmF3YWwKICAgICAgICBpZiAod2l0aGRyYXdhbFJlcXVlc3RzW190b10uc2luY2VUaW1lID4gMCkgdGhyb3c7ICAgICAvLyBjYW4ndCBtb3ZlIHRva2VucyB3aGVuIF90byBpcyBwZW5kaW5nIHdpdGhkcmF3YWwKICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHRocm93OyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogd2l0aGRyYXdhbEluaXRpYXRlIGluaXRpYXRlcyB0aGUgd2l0aGRyYXdhbCBieSBnb2luZyBpbnRvIGEgd2FpdGluZyBwZXJpb2QKICAgICAqIEl0IHJlbWVtYmVycyB0aGUgYmxvY2sgbnVtYmVyICYgYW1vdW50IGhlbGQgYXQgdGhlIHRpbWUgb2YgcmVxdWVzdC4KICAgICAqIFRva2VucyBjYW5ub3QgYmUgbW92ZWQgb3V0IGR1cmluZyB0aGUgd2FpdGluZyBwZXJpb2QsIGxvY2tpbmcgdGhlIHRva2VucyB1bnRpbCB0aGVuLgogICAgICogQWZ0ZXIgdGhlIHdhaXRpbmcgcGVyaW9kIGZpbmlzaGVzLCB0aGUgY2FsbCB3aXRoZHJhd2FsQ29tcGxldGUKICAgICAqCiAgICAgKiBHYXM6IDY0NDkwCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd2FsSW5pdGlhdGUoKSBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgV2l0aGRyYXdhbFN0YXJ0ZWQobXNnLnNlbmRlciwgYmFsYW5jZU9mW21zZy5zZW5kZXJdKTsKICAgICAgICB3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0gPSB3aXRoZHJhd2FsUmVxdWVzdChub3csIGJhbGFuY2VPZlttc2cuc2VuZGVyXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiB3aXRoZHJhd2FsQ29tcGxldGUgaXMgY2FsbGVkIGFmdGVyIHRoZSB3YWl0aW5nIHBlcmlvZC4gVGhlIGV0aGVyIHdpbGwgYmUKICAgICAqIHJldHVybmVkIHRvIHRoZSBjYWxsZXIgYW5kIHRoZSB0b2tlbnMgd2lsbCBiZSBidXJuZWQuCiAgICAgKiBBIHJld2FyZCB3aWxsIGJlIGlzc3VlZCBiYXNlZCBvbiB0aGUgY3VycmVudCBhbW91bnQgaW4gdGhlIGZlZVBvdCwgcmVsYXRpdmUgdG8gdGhlCiAgICAgKiBhbW91bnQgdGhhdCB3YXMgcmVxdWVzdGVkIGZvciB3aXRoZHJhd2FsIHdoZW4gd2l0aGRyYXdhbEluaXRpYXRlKCkgd2FzIGNhbGxlZC4KICAgICAqCiAgICAgKiBHYXM6IDMwOTQ2CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3YWxDb21wbGV0ZSgpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB3aXRoZHJhd2FsUmVxdWVzdCByID0gd2l0aGRyYXdhbFJlcXVlc3RzW21zZy5zZW5kZXJdOwogICAgICAgIGlmIChyLnNpbmNlVGltZSA9PSAwKSB0aHJvdzsKICAgICAgICBpZiAoKHIuc2luY2VUaW1lICsgdGltZVdhaXQpID4gbm93KSB7CiAgICAgICAgICAgIC8vIGhvbGRlciBuZWVkcyB0byB3YWl0IHNvbWUgbW9yZSBibG9ja3MKICAgICAgICAgICAgV2l0aGRyYXdhbFByZW1hdHVyZShtc2cuc2VuZGVyLCByLnNpbmNlVGltZSArIHRpbWVXYWl0IC0gbm93KTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGFtb3VudCA9IHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5hbW91bnQ7CiAgICAgICAgdWludDI1NiByZXdhcmQgPSBjYWxjdWxhdGVSZXdhcmQoci5hbW91bnQpOwogICAgICAgIHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5zaW5jZVRpbWUgPSAwOyAgIC8vIFRoaXMgd2lsbCB1bmxvY2sgdGhlIGhvbGRlcnMgdG9rZW5zCiAgICAgICAgd2l0aGRyYXdhbFJlcXVlc3RzW21zZy5zZW5kZXJdLmFtb3VudCA9IDA7ICAgICAgLy8gY2xlYXIgdGhlIGFtb3VudCB0aGF0IHdhcyByZXF1ZXN0ZWQKCiAgICAgICAgaWYgKHJld2FyZCA+IDApIHsKICAgICAgICAgICAgaWYgKGZlZVBvdCAtIHJld2FyZCA+IGZlZVBvdCkgewogICAgICAgICAgICAgICAgZmVlUG90ID0gMDsgLy8gb3ZlcmZsb3cKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZlZVBvdCAtPSByZXdhcmQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZG9XaXRoZHJhd2FsKHJld2FyZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnVybiB0aGUgdG9rZW5zIGFuZCBzZW5kIGJhY2sgdGhlIGV0aGVyCiAgICAgICAgV2l0aGRyYXdhbERvbmUobXNnLnNlbmRlciwgYW1vdW50LCByZXdhcmQpOwogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCiAgICAvKioKICAgICAqIFJld2FyZCBpcyBiYXNlZCBvbiB0aGUgYW1vdW50IGhlbGQsIHJlbGF0aXZlIHRvIHRvdGFsIHN1cHBseSBvZiB0b2tlbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVJld2FyZCh1aW50MjU2IHYpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHJld2FyZCA9IDA7CiAgICAgICAgaWYgKGZlZVBvdCA+IDApIHsKICAgICAgICAgICAgcmV3YXJkID0gZmVlUG90ICogdiAvIHRvdGFsU3VwcGx5OwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV3YXJkOwogICAgfQoKICAgIC8qKiBjYWxjdWxhdGUgdGhlIGZlZSBmb3IgcXVpY2sgd2l0aGRyYXdhbAogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVGZWUodWludDI1NiB2KSBjb25zdGFudCByZXR1cm5zICAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgZmVlUmVxdWlyZWQgPSB2IC8gMTAwOyAvLyAxJQogICAgICAgIHJldHVybiBmZWVSZXF1aXJlZDsKICAgIH0KCiAgICAvKioKICAgICAqIFF1aWNrIHdpdGhkcmF3YWwsIG5lZWRzIHRvIHNlbmQgZXRoZXIgdG8gdGhpcyBmdW5jdGlvbiBmb3IgdGhlIGZlZS4KICAgICAqCiAgICAgKiBHYXMgdXNlOiA/IChpbmNsdWRpbmcgY2FsbCB0byBwcm9jZXNzV2l0aGRyYXdhbCkKICAgICovCiAgICBmdW5jdGlvbiBxdWlja1dpdGhkcmF3KCkgcGF5YWJsZSBub3RQZW5kaW5nV2l0aGRyYXdhbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGFtb3VudCA8PSAwKSB0aHJvdzsKICAgICAgICAvLyBjYWxjdWxhdGUgcmVxdWlyZWQgZmVlCiAgICAgICAgdWludDI1NiBmZWVSZXF1aXJlZCA9IGNhbGN1bGF0ZUZlZShhbW91bnQpOwogICAgICAgIGlmIChtc2cudmFsdWUgIT0gZmVlUmVxdWlyZWQpIHsKICAgICAgICAgICAgSW5jb3JyZWN0RmVlKG1zZy5zZW5kZXIsIGZlZVJlcXVpcmVkKTsgICAvLyBub3RpZnkgdGhlIGV4YWN0IGZlZSB0aGF0IG5lZWRzIHRvIGJlIHNlbnQKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGZlZVBvdCArPSBtc2cudmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBmZWUgdG8gdGhlIGZlZVBvdAogICAgICAgIGRvV2l0aGRyYXdhbCgwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGhkcmF3LCAwIHJld2FyZAogICAgICAgIFdpdGhkcmF3YWxEb25lKG1zZy5zZW5kZXIsIGFtb3VudCwgMCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBkbyB3aXRoZHJhd2FsCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRvV2l0aGRyYXdhbCh1aW50MjU2IGV4dHJhKSBpbnRlcm5hbCB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGFtb3VudCA8PSAwKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IHdpdGhkcmF3CiAgICAgICAgaWYgKGFtb3VudCArIGV4dHJhID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgICAgIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udHJhY3QgZG9lc24ndCBoYXZlIGVub3VnaCBiYWxhbmNlCiAgICAgICAgfQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgaWYgKHRvdGFsU3VwcGx5ID4gdG90YWxTdXBwbHkgLSBhbW91bnQpIHsKICAgICAgICAgICAgdG90YWxTdXBwbHkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBsZXQgaXQgb3ZlcmZsb3cKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b3RhbFN1cHBseSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgIC8vIGRlZmxhdGUgdGhlIHN1cHBseSEKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMCwgYW1vdW50KTsgICAgICAgICAgICAgLy8gYnVybiBiYWJ5IGJ1cm4KICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChhbW91bnQgKyBleHRyYSkpIHRocm93OyAvLyByZXR1cm4gYmFjayB0aGUgZXRoZXIgb3Igcm9sbGJhY2sgaWYgZmFpbGVkCiAgICB9CgoKICAgIC8qKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gd2hlbiBzZW5kaW5nIGV0aGVyIHRvIHRoZSBjb250cmFjdAogICAgICogR2FzIHVzZTogNjUwNTEKICAgICovCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIG5vdFBlbmRpbmdXaXRoZHJhd2FsIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZTsgICAgICAgICAvLyBhbW91bnQgdGhhdCB3YXMgc2VudAogICAgICAgIGlmIChhbW91bnQgPD0gMCkgdGhyb3c7ICAgICAgICAgICAgIC8vIG5lZWQgdG8gc2VuZCBzb21lIEVUSAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBhbW91bnQ7ICAgIC8vIG1pbnQgbmV3IHRva2VucwogICAgICAgIHRvdGFsU3VwcGx5ICs9IGFtb3VudDsgICAgICAgICAgICAgIC8vIHRyYWNrIHRoZSBzdXBwbHkKICAgICAgICBUcmFuc2ZlcigwLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAgICAvLyBub3RpZnkgb2YgdGhlIGV2ZW50CiAgICAgICAgRGVwb3NpdGVkKG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICB9Cn0='.
	

]
