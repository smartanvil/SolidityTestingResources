Class {
	#name : #SRT1d1CF6cD3fE91fe4d1533BA3E0b7758DFb59aa1f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d1CF6cD3fE91fe4d1533BA3E0b7758DFb59aa1f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40IC4xMTsKCgoKCgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7CiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsKfQoKCmNvbnRyYWN0IEVSQzIwIHsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnModWludCBfdG90YWxTdXBwbHkpOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zKGJvb2wgb2spOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMoYm9vbCBvayk7CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMoYm9vbCBvayk7CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50KTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cgp9Cgpjb250cmFjdCBCdXJuZXIgeyBmdW5jdGlvbiBkcmFnb25IYW5kbGVyKCB1aW50MjU2IF9hbW91bnQpe30gfQogCmNvbnRyYWN0IERyYWdvbiBpcyBFUkMyMCB7CgoKICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnRFJBR09OIDEuMSc7CiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIAogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIG1hcHBpbmcoIGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcoIHVpbnQgPT4gYWRkcmVzcykgcHVibGljIGFjY291bnRJbmRleDsKICAgIHVpbnQgYWNjb3VudENvdW50OwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwogICAgYWRkcmVzcyBwdWJsaWMgYnVybmVyOwogICAgYm9vbCBwdWJsaWMgYnVybmVyU2V0OwogICAgCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IE1lc3NhZ2UgKCBhZGRyZXNzIGEsIHVpbnQyNTYgYW1vdW50ICk7CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKCiAgICAKICAgIGZ1bmN0aW9uIERyYWdvbigpIHsKICAgICAgICAgCiAgICAgICAgdWludCBzdXBwbHkgPSA1MDAwMDAwMDAwMDAwMDAwMDsgCiAgICAgICAgYXBwZW5kVG9rZW5Ib2xkZXJzKCBtc2cuc2VuZGVyICk7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gIHN1cHBseTsKICAgICAgICB0b3RhbFN1cHBseSA9IHN1cHBseTsgLy8gCiAgICAgICAgbmFtZSA9ICJEUkFHT04iOyAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSAiRFJHIjsgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IDg7IC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAKICAgIH0KICAgIAogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgIG1vZGlmaWVyIG9ubHlCdXJuZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gYnVybmVyKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcnNoaXAoIGFkZHJlc3MgX293bmVyICkgb25seU93bmVyIHsKICAgICAgICAKICAgICAgICBvd25lciA9IF9vd25lcjsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0QnVybmVyKCBhZGRyZXNzIF9idXJuZXIgKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKCAhYnVybmVyU2V0ICk7CiAgICAgICAgYnVybmVyID0gX2J1cm5lcjsKICAgICAgICBidXJuZXJTZXQgPSB0cnVlOwogICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm5DaGVjayggYWRkcmVzcyBfdG9jaGVjayAsIHVpbnQyNTYgYW1vdW50ICkgaW50ZXJuYWwgewogICAgICAgIAogICAgICAgIGlmICggX3RvY2hlY2sgIT0gYnVybmVyIClyZXR1cm47CiAgICAgICAgCiAgICAgICAgQnVybmVyIGJ1cm4gPSBCdXJuZXIgKCBidXJuZXIgKTsKICAgICAgICBidXJuLmRyYWdvbkhhbmRsZXIoIGFtb3VudCApOwogICAgICAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuRHJhZ29ucyAoIHVpbnQyNTYgX2Ftb3VudCApIG9ubHlCdXJuZXJ7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgYnVybiggX2Ftb3VudCApOwogICAgICAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbkhvbGRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiBiYWxhbmNlT2ZbdG9rZW5Ib2xkZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBY2NvdW50Q291bnQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKCiAgICAgICAgcmV0dXJuIGFjY291bnRDb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKHVpbnQgc2xvdCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CgogICAgICAgIHJldHVybiBhY2NvdW50SW5kZXhbc2xvdF07CgogICAgfQoKICAgIAogICAgZnVuY3Rpb24gYXBwZW5kVG9rZW5Ib2xkZXJzKGFkZHJlc3MgdG9rZW5Ib2xkZXIpIHByaXZhdGUgewoKICAgICAgICBpZiAoYmFsYW5jZU9mW3Rva2VuSG9sZGVyXSA9PSAwKSB7CiAgICAgICAgICAgIGlmICggdG9rZW5Ib2xkZXIgPT0gYnVybmVyICkgcmV0dXJuOwogICAgICAgICAgICBhY2NvdW50SW5kZXhbYWNjb3VudENvdW50XSA9IHRva2VuSG9sZGVyOwogICAgICAgICAgICBhY2NvdW50Q291bnQrKzsKICAgICAgICB9CgogICAgfQoKICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgb2spIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgdGhyb3c7IAogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7CiAgICAgICAgCiAgICAgICAgYXBwZW5kVG9rZW5Ib2xkZXJzKF90byk7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7IAogICAgICAgIGJ1cm5DaGVjayggX3RvLCBfdmFsdWUgKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbCggbXNnLnNlbmRlciAsX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKF90byA9PSAweDApIHRocm93OyAgCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAgCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAgCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHRocm93OyAKICAgICAgICBhcHBlbmRUb2tlbkhvbGRlcnMoX3RvKTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAKICAgICAgICBpZiggdG90YWxTdXBwbHkgLSAgX3ZhbHVlIDwgMjEwMDAwMDAwMDAwMDAwMCkgdGhyb3c7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgCiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAKICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7IAogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7IAogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsgCiAgICAgICAgQnVybihfZnJvbSwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KIAogICAgCn0='.
	

]
