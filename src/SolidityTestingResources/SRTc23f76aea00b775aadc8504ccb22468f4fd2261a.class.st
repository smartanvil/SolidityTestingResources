Class {
	#name : #SRTc23f76aea00b775aadc8504ccb22468f4fd2261a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc23f76aea00b775aadc8504ccb22468f4fd2261a >> base64 [
	^ ''.
	

]
