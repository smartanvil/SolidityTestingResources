Class {
	#name : #SRT1f5cdff41fb9b17996d6f0fca6ab9c5bed96f20f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1f5cdff41fb9b17996d6f0fca6ab9c5bed96f20f >> base64 [
	^ ''.
	

]
