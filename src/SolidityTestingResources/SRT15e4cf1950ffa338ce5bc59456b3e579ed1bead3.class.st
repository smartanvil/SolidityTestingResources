Class {
	#name : #SRT15e4cf1950ffa338ce5bc59456b3e579ed1bead3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15e4cf1950ffa338ce5bc59456b3e579ed1bead3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKiBPd25lciBzZXR0ZXIgKi8KY29udHJhY3QgT3duYWJsZVRva2VuCnsKICAgIGFkZHJlc3Mgb3duZXI7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBPd25hYmxlVG9rZW4oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX25ld19vd25lcikgcGF5YWJsZSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9uZXdfb3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZXIgPSBfbmV3X293bmVyOwogICAgfQp9CgovKioKICogQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwSQp7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCi8qIEVSQyAyMCBUb2tlbiBpbXBsZW1lbnRhdGlvbiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEkgewoKICAgIHVpbnQyNTYgY29uc3RhbnQgTUFYX1VJTlQyNTYgPSAyKioyNTYgLSAxOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIHVpbnQyNTYgYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93YW5jZSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgaWYgKGFsbG93YW5jZSA8IE1BWF9VSU5UMjU2KSB7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHZpZXcgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKQogICAgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHZpZXcgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0KCi8qIGFpcmRvcGFibGUgcHJvbW8gc21hcnQgY29udHJhY3QgKi8KY29udHJhY3QgQU50b2tDb250cmFjdEFpcmRyb3AgaXMgRVJDMjAsIE93bmFibGVUb2tlbgp7CiAgICBldmVudCBXYXN0ZWQoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSwgdWludDI1NiBkYXRlKTsgIC8vIFdhc3RlZChfdG8sIF9hbW91bnQsIG5vdyk7CgogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzEuMic7IC8vSnVzdCBhbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUuCgogICAgdWludDggIHB1YmxpYyBkZWNpbWFsczsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlggbGVuZ3RoIDYgc3ltYm9scyBtYXgKCiAgICB1aW50MjU2IHB1YmxpYyBwYXlTaXplID0gMSAqIDEwICoqIDE4OyAgLy8gc2hvdyBzaXplIG9mIHBheW1lbnQgaW4gbWFzcyB0cmFuc2ZlcgogICAgdWludDI1NiBwdWJsaWMgaG9sZGVyc0NvdW50OwogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU3BlbnQ7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBib3VudHk7IC8vIHNob3cgd2hvIGdvdCBib3VudHkKCiAgICAvKiBBdXRvY29uc3RydWN0b3IgKi8KICAgIGZ1bmN0aW9uIEFOdG9rQ29udHJhY3RBaXJkcm9wKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGRlY2ltYWxzID0gMTg7ICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBuYW1lID0gIkFMRkEgTlRPSyI7ICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSAi0LBOVE9LIjsgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAyMDE4MDAwMCAqIDEwICoqIHVpbnQoZGVjaW1hbHMpOyAvLyBHaXZlIHRoZSBjcmVhdG9yIHByb21vIHRva2VucyAoMTAwMDAwIGZvciBleGFtcGxlKQogICAgICAgIGJhbGFuY2VzW3RoaXNdID0gNTAwMDAgKiAxMCAqKiB1aW50KGRlY2ltYWxzKTsgLy8gU3RheSBzb21lIHRva2VucyBmb3IgYm91bnR5IGZyb20gY29udHJhY3QKICAgICAgICB0b3RhbFN1cHBseSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdICsgYmFsYW5jZXNbdGhpc107IC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkgKDEwMDAwMCBmb3IgZXhhbXBsZSkKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgbm90aWZ5IG93bmVycyBhYm91dCB0aGVpciBiYWxhbmNlcyB3YXMgaW4gcHJvbW8gYWN0aW9uLgogICAgICogQHBhcmFtIF9ob2xkZXJzIGFkZHJlc3NlcyBvZiB0aGUgb3duZXJzIHRvIGJlIG5vdGlmaWVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1hc3NUcmFuc2ZlcihhZGRyZXNzIFtdIF9ob2xkZXJzKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgdWludDI1NiBjb3VudCA9IF9ob2xkZXJzLmxlbmd0aDsKICAgICAgICBhc3NlcnQocGF5U2l6ZSAqIGNvdW50IDw9IGJhbGFuY2VPZihtc2cuc2VuZGVyKSk7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICAgICAgICB0cmFuc2ZlcihfaG9sZGVycyBbaV0sIHBheVNpemUpOwogICAgICAgIH0KICAgICAgICBXYXN0ZWQob3duZXIsIHRva2Vuc1NwZW50LCBub3cpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBjb250cmFjdC4KICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1RvKGFkZHJlc3MgX3JlY2lwaWVudCwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICB0aGlzLnRyYW5zZmVyKF9yZWNpcGllbnQsIF9hbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBjb250cmFjdC4KICAgICovCiAgICBmdW5jdGlvbiBzZXRQYXlTaXplKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICBwYXlTaXplID0gX3ZhbHVlOwogICAgICAgIHJldHVybiBwYXlTaXplOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHdpdGhkcmF3IHRva2VucyBhcyBib3VudHkuCiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdCb3VudHkoYWRkcmVzcyBfcmVjaXBpZW50LCB1aW50MjU2IF9hbW91bnQpIGludGVybmFsIHsKICAgICAgICB0aGlzLnRyYW5zZmVyKF9yZWNpcGllbnQsIF9hbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IGdldCBib3VudHkgZm9yIHRoZSBwZW9wbGUuCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0Qm91bnR5KCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYm91bnR5W21zZy5zZW5kZXJdICE9IHRydWUpOyAvLyAxIGFkZHJlc3MgPSAxIHRva2VuCiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1t0aGlzXSAhPSAwKTsKICAgICAgICBib3VudHlbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgIHdpdGhkcmF3Qm91bnR5KG1zZy5zZW5kZXIsIDEgKiAxMCAqKiB1aW50KGRlY2ltYWxzKSk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgaXMgYm91bnR5IGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gYm91bnR5T2YoYWRkcmVzcyBfYm91bnRpc3QpIHZpZXcgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCB0aGFua2VkKQogICAgewogICAgICAgIHJldHVybiBib3VudHlbX2JvdW50aXN0XTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHB1YmxpYyB7CiAgICAgICAgcmV2ZXJ0KCk7IC8vIHJldmVydCBhbGwgaW5jb21pbmcgdHJhbnNhY3Rpb25zCiAgICB9Cn0='.
	

]
