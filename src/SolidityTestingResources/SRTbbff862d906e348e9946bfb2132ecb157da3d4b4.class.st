Class {
	#name : #SRTbbff862d906e348e9946bfb2132ecb157da3d4b4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbbff862d906e348e9946bfb2132ecb157da3d4b4 >> base64 [
	^ ''.
	

]
