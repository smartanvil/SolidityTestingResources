Class {
	#name : #SRT53d6fcc2424c7deade5c5615b7df3c196e8d267c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53d6fcc2424c7deade5c5615b7df3c196e8d267c >> base64 [
	^ ''.
	

]
