Class {
	#name : #SRT9712fa4faf0720b55741dacfe16de3787fa46348,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9712fa4faf0720b55741dacfe16de3787fa46348 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBFdGhlckhlbGwgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZXZlbnQgTmV3Um91bmQoCiAgICAgICAgdWludCBfdGltZXN0YW1wLAogICAgICAgIHVpbnQgX3JvdW5kLAogICAgICAgIHVpbnQgX2luaXRpYWxQb3QKICAgICk7CgogICAgZXZlbnQgQmlkKAogICAgICAgIHVpbnQgX3RpbWVzdGFtcCwKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIHVpbnQgX2Ftb3VudCwKICAgICAgICB1aW50IF9uZXdQb3QKICAgICk7CgogICAgZXZlbnQgTmV3TGVhZGVyKAogICAgICAgIHVpbnQgX3RpbWVzdGFtcCwKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIHVpbnQgX25ld1BvdCwKICAgICAgICB1aW50IF9uZXdEZWFkbGluZQogICAgKTsKICAgIAogICAgZXZlbnQgV2lubmVyKAogICAgICAgIHVpbnQgX3RpbWVzdGFtcCwKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIHVpbnQgX2Vhcm5pbmdzLAogICAgICAgIHVpbnQgX2RlYWRsaW5lCiAgICApOwoKICAgIGV2ZW50IFdpdGhkcmF3YWwoCiAgICAgICAgdWludCBfdGltZXN0YW1wLAogICAgICAgIGFkZHJlc3MgX2FkZHJlc3MsCiAgICAgICAgdWludCBfYW1vdW50CiAgICApOwoKICAgIC8vIEluaXRpYWwgY291bnRkb3duIGR1cmF0aW9uIGF0IHRoZSBzdGFydCBvZiBlYWNoIHJvdW5kCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBCQVNFX0RVUkFUSU9OID0gMSBkYXlzOwoKICAgIC8vIEFtb3VudCBieSB3aGljaCB0aGUgY291bnRkb3duIGR1cmF0aW9uIGRlY3JlYXNlcyBwZXIgZXRoZXIgaW4gdGhlIHBvdAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgRFVSQVRJT05fREVDUkVBU0VfUEVSX0VUSEVSID0gMTAgbWludXRlczsKCiAgICAvLyBNaW5pbXVtIGNvdW50ZG93biBkdXJhdGlvbgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOSU1VTV9EVVJBVElPTiA9IDEgaG91cnM7CgogICAgLy8gRnJhY3Rpb24gb2YgdGhlIHByZXZpb3VzIHBvdCB1c2VkIHRvIHNlZWQgdGhlIG5leHQgcG90CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBORVhUX1BPVF9GUkFDX1RPUCA9IDE7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBORVhUX1BPVF9GUkFDX0JPVCA9IDI7CgogICAgLy8gTWluaW11bSBmcmFjdGlvbiBvZiB0aGUgcG90IHJlcXVpcmVkIGJ5IGEgYmlkZGVyIHRvIGJlY29tZSB0aGUgbmV3IGxlYWRlcgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0xFQURFUl9GUkFDX1RPUCA9IDE7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNSU5fTEVBREVSX0ZSQUNfQk9UID0gMTAwMDsKCiAgICAvLyBGcmFjdGlvbiBvZiBlYWNoIGJpZCBzZXQgYXNpZGUgYXMgc2VlZCBmdW5kaW5nIGZvciBldmVuIG1vcmUgZGV2aWxpc2ggdmFyaWFudHMgZnJvbSB0aGUgY29tbXVuaXR5CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBGVU5EX0ZSQUNfVE9QID0gMTsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEZVTkRfRlJBQ19CT1QgPSA1OwoKICAgIC8vIE93bmVyIG9mIHRoZSBjb250cmFjdAogICAgYWRkcmVzcyBvd25lcjsKCiAgICAvLyBNYXBwaW5nIGZyb20gYWRkcmVzc2VzIHRvIGFtb3VudHMgZWFybmVkCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGVhcm5pbmdzOwoKICAgIC8vIEN1cnJlbnQgcm91bmQgbnVtYmVyCiAgICB1aW50IHB1YmxpYyByb3VuZDsKCiAgICAvLyBDdXJyZW50IHZhbHVlIG9mIHRoZSBwb3QKICAgIHVpbnQgcHVibGljIHBvdDsKCiAgICAvLyBBZGRyZXNzIG9mIHRoZSBjdXJyZW50IGxlYWRlcgogICAgYWRkcmVzcyBwdWJsaWMgbGVhZGVyOwoKICAgIC8vIFRpbWUgYXQgd2hpY2ggdGhlIGN1cnJlbnQgcm91bmQgZXhwaXJlcwogICAgdWludCBwdWJsaWMgZGVhZGxpbmU7CgogICAgZnVuY3Rpb24gRXRoZXJIZWxsKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHJvdW5kID0gMTsKICAgICAgICBwb3QgPSBtc2cudmFsdWU7CiAgICAgICAgbGVhZGVyID0gb3duZXI7CiAgICAgICAgZGVhZGxpbmUgPSBjb21wdXRlRGVhZGxpbmUoKTsKICAgICAgICBOZXdSb3VuZChub3csIHJvdW5kLCBwb3QpOwogICAgICAgIE5ld0xlYWRlcihub3csIGxlYWRlciwgcG90LCBkZWFkbGluZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNvbXB1dGVEZWFkbGluZSgpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgX2R1cmF0aW9uRGVjcmVhc2UgPSBEVVJBVElPTl9ERUNSRUFTRV9QRVJfRVRIRVIubXVsKHBvdC5kaXYoMSBldGhlcikpOwogICAgICAgIHVpbnQgX2R1cmF0aW9uOwogICAgICAgIGlmIChNSU5JTVVNX0RVUkFUSU9OLmFkZChfZHVyYXRpb25EZWNyZWFzZSkgPiBCQVNFX0RVUkFUSU9OKSB7CiAgICAgICAgICAgIF9kdXJhdGlvbiA9IE1JTklNVU1fRFVSQVRJT047CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX2R1cmF0aW9uID0gQkFTRV9EVVJBVElPTi5zdWIoX2R1cmF0aW9uRGVjcmVhc2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbm93LmFkZChfZHVyYXRpb24pOwogICAgfQoKICAgIG1vZGlmaWVyIGFkdmFuY2VSb3VuZElmTmVlZGVkIHsKICAgICAgICBpZiAobm93ID4gZGVhZGxpbmUpIHsKICAgICAgICAgICAgdWludCBfbmV4dFBvdCA9IHBvdC5tdWwoTkVYVF9QT1RfRlJBQ19UT1ApLmRpdihORVhUX1BPVF9GUkFDX0JPVCk7CiAgICAgICAgICAgIHVpbnQgX2xlYWRlckVhcm5pbmdzID0gcG90LnN1YihfbmV4dFBvdCk7CiAgICAgICAgICAgIFdpbm5lcihub3csIGxlYWRlciwgX2xlYWRlckVhcm5pbmdzLCBkZWFkbGluZSk7CiAgICAgICAgICAgIGVhcm5pbmdzW2xlYWRlcl0gPSBlYXJuaW5nc1tsZWFkZXJdLmFkZChfbGVhZGVyRWFybmluZ3MpOwogICAgICAgICAgICByb3VuZCsrOwogICAgICAgICAgICBwb3QgPSBfbmV4dFBvdDsKICAgICAgICAgICAgbGVhZGVyID0gb3duZXI7CiAgICAgICAgICAgIGRlYWRsaW5lID0gY29tcHV0ZURlYWRsaW5lKCk7CiAgICAgICAgICAgIE5ld1JvdW5kKG5vdywgcm91bmQsIHBvdCk7CiAgICAgICAgICAgIE5ld0xlYWRlcihub3csIGxlYWRlciwgcG90LCBkZWFkbGluZSk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gYmlkKCkgcHVibGljIHBheWFibGUgYWR2YW5jZVJvdW5kSWZOZWVkZWQgewogICAgICAgIHVpbnQgX21pbkxlYWRlckFtb3VudCA9IHBvdC5tdWwoTUlOX0xFQURFUl9GUkFDX1RPUCkuZGl2KE1JTl9MRUFERVJfRlJBQ19CT1QpOwogICAgICAgIHVpbnQgX2JpZEFtb3VudFRvRnVuZCA9IG1zZy52YWx1ZS5tdWwoRlVORF9GUkFDX1RPUCkuZGl2KEZVTkRfRlJBQ19CT1QpOwogICAgICAgIHVpbnQgX2JpZEFtb3VudFRvUG90ID0gbXNnLnZhbHVlLnN1YihfYmlkQW1vdW50VG9GdW5kKTsKCiAgICAgICAgZWFybmluZ3Nbb3duZXJdID0gZWFybmluZ3Nbb3duZXJdLmFkZChfYmlkQW1vdW50VG9GdW5kKTsKICAgICAgICBwb3QgPSBwb3QuYWRkKF9iaWRBbW91bnRUb1BvdCk7CiAgICAgICAgQmlkKG5vdywgbXNnLnNlbmRlciwgbXNnLnZhbHVlLCBwb3QpOwoKICAgICAgICBpZiAobXNnLnZhbHVlID49IF9taW5MZWFkZXJBbW91bnQpIHsKICAgICAgICAgICAgbGVhZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgZGVhZGxpbmUgPSBjb21wdXRlRGVhZGxpbmUoKTsKICAgICAgICAgICAgTmV3TGVhZGVyKG5vdywgbGVhZGVyLCBwb3QsIGRlYWRsaW5lKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgYWR2YW5jZVJvdW5kSWZOZWVkZWQgewogICAgICAgIHJlcXVpcmUoZWFybmluZ3NbbXNnLnNlbmRlcl0gPiAwKTsKICAgICAgICBhc3NlcnQoZWFybmluZ3NbbXNnLnNlbmRlcl0gPD0gdGhpcy5iYWxhbmNlKTsKICAgICAgICB1aW50IF9hbW91bnQgPSBlYXJuaW5nc1ttc2cuc2VuZGVyXTsKICAgICAgICBlYXJuaW5nc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihfYW1vdW50KTsKICAgICAgICBXaXRoZHJhd2FsKG5vdywgbXNnLnNlbmRlciwgX2Ftb3VudCk7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgLyoqCiAgICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIAlpZiAoYSA9PSAwKSB7CiAgICAgIAkgIHJldHVybiAwOwogICAgICAJfQogICAgICAJdWludDI1NiBjID0gYSAqIGI7CiAgICAgIAlhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgIAlyZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAgICovCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICAgKi8KICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9'.
	

]
