Class {
	#name : #SRTcf43a59e41722BDd4631A0CDda76853374A3855d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcf43a59e41722BDd4631A0CDda76853374A3855d >> base64 [
	^ ''.
	

]
