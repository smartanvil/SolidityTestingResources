Class {
	#name : #SRT233265020cc69214aea3edd4192b96d5232bf5ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT233265020cc69214aea3edd4192b96d5232bf5ca >> base64 [
	^ ''.
	

]
