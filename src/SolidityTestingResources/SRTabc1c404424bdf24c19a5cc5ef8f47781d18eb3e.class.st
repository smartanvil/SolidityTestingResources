Class {
	#name : #SRTabc1c404424bdf24c19a5cc5ef8f47781d18eb3e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTabc1c404424bdf24c19a5cc5ef8f47781d18eb3e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovLyBjb3B5cmlnaHQgPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI3YzFmMTMxMjA4MWQxZjA4M2MzOTA4MTQxOTBlMTkxMTEzMTI1MjFmMTMxMSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICAvKiBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsgKi8KICAgIC8qICAgaWYgKCFhc3NlcnRpb24pIHsgKi8KICAgIC8qICAgICB0aHJvdzsgKi8KICAgIC8qICAgfSAqLwogICAgLyogfSAgICAgIC8vIGFzc2VydCBubyBsb25nZXIgbmVlZGVkIG9uY2Ugc29saWRpdHkgaXMgb24gMC40LjEwICovCgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KHggPj0geSk7CiAgICAgIHVpbnQyNTYgeiA9IHggLSB5OwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKfQoKY29udHJhY3QgQmFzaWNBY2Nlc3NDb250cm9sIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzc1tdIHB1YmxpYyBtb2RlcmF0b3JzOwoKICAgIGZ1bmN0aW9uIEJhc2ljQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlNb2RlcmF0b3JzKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIGJvb2wgZm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgZm9yICh1aW50IGluZGV4ID0gMDsgaW5kZXggPCBtb2RlcmF0b3JzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgaWYgKG1vZGVyYXRvcnNbaW5kZXhdID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVxdWlyZShmb3VuZCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChfbmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gS2lsbCgpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gQWRkTW9kZXJhdG9yKGFkZHJlc3MgX25ld01vZGVyYXRvcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgaWYgKF9uZXdNb2RlcmF0b3IgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBmb3IgKHVpbnQgaW5kZXggPSAwOyBpbmRleCA8IG1vZGVyYXRvcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kZXJhdG9yc1tpbmRleF0gPT0gX25ld01vZGVyYXRvcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBtb2RlcmF0b3JzLnB1c2goX25ld01vZGVyYXRvcik7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBSZW1vdmVNb2RlcmF0b3IoYWRkcmVzcyBfb2xkTW9kZXJhdG9yKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICB1aW50IGZvdW5kSW5kZXggPSAwOwogICAgICAgIGZvciAoOyBmb3VuZEluZGV4IDwgbW9kZXJhdG9ycy5sZW5ndGg7IGZvdW5kSW5kZXgrKykgewogICAgICAgICAgICBpZiAobW9kZXJhdG9yc1tmb3VuZEluZGV4XSA9PSBfb2xkTW9kZXJhdG9yKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZm91bmRJbmRleCA8IG1vZGVyYXRvcnMubGVuZ3RoKSB7CiAgICAgICAgICAgIG1vZGVyYXRvcnNbZm91bmRJbmRleF0gPSBtb2RlcmF0b3JzW21vZGVyYXRvcnMubGVuZ3RoLTFdOwogICAgICAgICAgICBkZWxldGUgbW9kZXJhdG9yc1ttb2RlcmF0b3JzLmxlbmd0aC0xXTsKICAgICAgICAgICAgbW9kZXJhdG9ycy5sZW5ndGgtLTsKICAgICAgICB9CiAgICB9Cn0KCgpjb250cmFjdCBFdGhlcmVtb25FbnVtIHsKCiAgICBlbnVtIFJlc3VsdENvZGUgewogICAgICAgIFNVQ0NFU1MsCiAgICAgICAgRVJST1JfQ0xBU1NfTk9UX0ZPVU5ELAogICAgICAgIEVSUk9SX0xPV19CQUxBTkNFLAogICAgICAgIEVSUk9SX1NFTkRfRkFJTCwKICAgICAgICBFUlJPUl9OT1RfVFJBSU5FUiwKICAgICAgICBFUlJPUl9OT1RfRU5PVUdIX01PTkVZLAogICAgICAgIEVSUk9SX0lOVkFMSURfQU1PVU5UCiAgICB9CiAgICAKICAgIGVudW0gQXJyYXlUeXBlIHsKICAgICAgICBDTEFTU19UWVBFLAogICAgICAgIFNUQVRfU1RFUCwKICAgICAgICBTVEFUX1NUQVJULAogICAgICAgIFNUQVRfQkFTRSwKICAgICAgICBPQkpfU0tJTEwKICAgIH0KfQoKY29udHJhY3QgRXRoZXJlbW9uRGF0YUJhc2UgaXMgRXRoZXJlbW9uRW51bSwgQmFzaWNBY2Nlc3NDb250cm9sLCBTYWZlTWF0aCB7CiAgICAKICAgIHVpbnQ2NCBwdWJsaWMgdG90YWxNb25zdGVyOwogICAgdWludDMyIHB1YmxpYyB0b3RhbENsYXNzOwogICAgCiAgICAvLyB3cml0ZQogICAgZnVuY3Rpb24gYWRkRWxlbWVudFRvQXJyYXlUeXBlKEFycmF5VHlwZSBfdHlwZSwgdWludDY0IF9pZCwgdWludDggX3ZhbHVlKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIHVwZGF0ZUluZGV4T2ZBcnJheVR5cGUoQXJyYXlUeXBlIF90eXBlLCB1aW50NjQgX2lkLCB1aW50IF9pbmRleCwgdWludDggX3ZhbHVlKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIHNldE1vbnN0ZXJDbGFzcyh1aW50MzIgX2NsYXNzSWQsIHVpbnQyNTYgX3ByaWNlLCB1aW50MjU2IF9yZXR1cm5QcmljZSwgYm9vbCBfY2F0Y2hhYmxlKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MzIpOwogICAgZnVuY3Rpb24gYWRkTW9uc3Rlck9iaih1aW50MzIgX2NsYXNzSWQsIGFkZHJlc3MgX3RyYWluZXIsIHN0cmluZyBfbmFtZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDY0KTsKICAgIGZ1bmN0aW9uIHNldE1vbnN0ZXJPYmoodWludDY0IF9vYmpJZCwgc3RyaW5nIF9uYW1lLCB1aW50MzIgX2V4cCwgdWludDMyIF9jcmVhdGVJbmRleCwgdWludDMyIF9sYXN0Q2xhaW1JbmRleCkgb25seU1vZGVyYXRvcnMgcHVibGljOwogICAgZnVuY3Rpb24gaW5jcmVhc2VNb25zdGVyRXhwKHVpbnQ2NCBfb2JqSWQsIHVpbnQzMiBhbW91bnQpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGRlY3JlYXNlTW9uc3RlckV4cCh1aW50NjQgX29iaklkLCB1aW50MzIgYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWM7CiAgICBmdW5jdGlvbiByZW1vdmVNb25zdGVySWRNYXBwaW5nKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWM7CiAgICBmdW5jdGlvbiBhZGRNb25zdGVySWRNYXBwaW5nKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWM7CiAgICBmdW5jdGlvbiBjbGVhck1vbnN0ZXJSZXR1cm5CYWxhbmNlKHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2IGFtb3VudCk7CiAgICBmdW5jdGlvbiBjb2xsZWN0QWxsUmV0dXJuQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2IGFtb3VudCk7CiAgICBmdW5jdGlvbiB0cmFuc2Zlck1vbnN0ZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyhSZXN1bHRDb2RlKTsKICAgIGZ1bmN0aW9uIGFkZEV4dHJhQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyLCB1aW50MjU2IF9hbW91bnQpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gZGVkdWN0RXh0cmFCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQyNTYgX2Ftb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDI1Nik7CiAgICBmdW5jdGlvbiBzZXRFeHRyYUJhbGFuY2UoYWRkcmVzcyBfdHJhaW5lciwgdWludDI1NiBfYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWM7CiAgICAKICAgIC8vIHJlYWQKICAgIGZ1bmN0aW9uIGdldFNpemVBcnJheVR5cGUoQXJyYXlUeXBlIF90eXBlLCB1aW50NjQgX2lkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRJbkFycmF5VHlwZShBcnJheVR5cGUgX3R5cGUsIHVpbnQ2NCBfaWQsIHVpbnQgX2luZGV4KSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50OCk7CiAgICBmdW5jdGlvbiBnZXRNb25zdGVyQ2xhc3ModWludDMyIF9jbGFzc0lkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MzIgY2xhc3NJZCwgdWludDI1NiBwcmljZSwgdWludDI1NiByZXR1cm5QcmljZSwgdWludDMyIHRvdGFsLCBib29sIGNhdGNoYWJsZSk7CiAgICBmdW5jdGlvbiBnZXRNb25zdGVyT2JqKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ2NCBvYmpJZCwgdWludDMyIGNsYXNzSWQsIGFkZHJlc3MgdHJhaW5lciwgdWludDMyIGV4cCwgdWludDMyIGNyZWF0ZUluZGV4LCB1aW50MzIgbGFzdENsYWltSW5kZXgsIHVpbnQgY3JlYXRlVGltZSk7CiAgICBmdW5jdGlvbiBnZXRNb25zdGVyTmFtZSh1aW50NjQgX29iaklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyhzdHJpbmcgbmFtZSk7CiAgICBmdW5jdGlvbiBnZXRFeHRyYUJhbGFuY2UoYWRkcmVzcyBfdHJhaW5lcikgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDI1Nik7CiAgICBmdW5jdGlvbiBnZXRNb25zdGVyRGV4U2l6ZShhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIGdldE1vbnN0ZXJPYmpJZChhZGRyZXNzIF90cmFpbmVyLCB1aW50IGluZGV4KSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50NjQpOwogICAgZnVuY3Rpb24gZ2V0RXhwZWN0ZWRCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gZ2V0TW9uc3RlclJldHVybih1aW50NjQgX29iaklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2IGN1cnJlbnQsIHVpbnQyNTYgdG90YWwpOwp9Cgpjb250cmFjdCBFdGhlcmVtb25EYXRhIGlzIEV0aGVyZW1vbkRhdGFCYXNlIHsKCiAgICBzdHJ1Y3QgTW9uc3RlckNsYXNzIHsKICAgICAgICB1aW50MzIgY2xhc3NJZDsKICAgICAgICB1aW50OFtdIHR5cGVzOwogICAgICAgIHVpbnQ4W10gc3RhdFN0ZXBzOwogICAgICAgIHVpbnQ4W10gc3RhdFN0YXJ0czsKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgICAgIHVpbnQyNTYgcmV0dXJuUHJpY2U7CiAgICAgICAgdWludDMyIHRvdGFsOwogICAgICAgIGJvb2wgY2F0Y2hhYmxlOwogICAgfQogICAgCiAgICBzdHJ1Y3QgTW9uc3Rlck9iaiB7CiAgICAgICAgdWludDY0IG1vbnN0ZXJJZDsKICAgICAgICB1aW50MzIgY2xhc3NJZDsKICAgICAgICBhZGRyZXNzIHRyYWluZXI7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgdWludDMyIGV4cDsKICAgICAgICB1aW50OFtdIHN0YXRCYXNlczsKICAgICAgICB1aW50OFtdIHNraWxsczsKICAgICAgICB1aW50MzIgY3JlYXRlSW5kZXg7CiAgICAgICAgdWludDMyIGxhc3RDbGFpbUluZGV4OwogICAgICAgIHVpbnQgY3JlYXRlVGltZTsKICAgIH0KCiAgICBtYXBwaW5nKHVpbnQzMiA9PiBNb25zdGVyQ2xhc3MpIHB1YmxpYyBtb25zdGVyQ2xhc3M7CiAgICBtYXBwaW5nKHVpbnQ2NCA9PiBNb25zdGVyT2JqKSBwdWJsaWMgbW9uc3RlcldvcmxkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQ2NFtdKSBwdWJsaWMgdHJhaW5lckRleDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdHJhaW5lckV4dHJhQmFsYW5jZTsKICAgIAogICAgCiAgICAvLyB3cml0ZSBhY2Nlc3MKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIoYWRkcmVzcyBfc2VuZFRvLCB1aW50IF9hbW91bnQpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyhSZXN1bHRDb2RlKSB7CiAgICAgICAgaWYgKF9hbW91bnQgPiB0aGlzLmJhbGFuY2UpIHsKICAgICAgICAgICAgcmV0dXJuIFJlc3VsdENvZGUuRVJST1JfSU5WQUxJRF9BTU9VTlQ7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIF9zZW5kVG8udHJhbnNmZXIoX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIFJlc3VsdENvZGUuU1VDQ0VTUzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkRWxlbWVudFRvQXJyYXlUeXBlKEFycmF5VHlwZSBfdHlwZSwgdWludDY0IF9pZCwgdWludDggX3ZhbHVlKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludDhbXSBzdG9yYWdlIGFycmF5ID0gbW9uc3RlcldvcmxkW19pZF0uc3RhdEJhc2VzOwogICAgICAgIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuQ0xBU1NfVFlQRSkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0udHlwZXM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuU1RBVF9TVEVQKSB7CiAgICAgICAgICAgIGFycmF5ID0gbW9uc3RlckNsYXNzW3VpbnQzMihfaWQpXS5zdGF0U3RlcHM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuU1RBVF9TVEFSVCkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0uc3RhdFN0YXJ0czsKICAgICAgICB9IGVsc2UgaWYgKF90eXBlID09IEFycmF5VHlwZS5PQkpfU0tJTEwpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyV29ybGRbX2lkXS5za2lsbHM7CiAgICAgICAgfQogICAgICAgIGFycmF5LnB1c2goX3ZhbHVlKTsKICAgICAgICByZXR1cm4gYXJyYXkubGVuZ3RoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVJbmRleE9mQXJyYXlUeXBlKEFycmF5VHlwZSBfdHlwZSwgdWludDY0IF9pZCwgdWludCBfaW5kZXgsIHVpbnQ4IF92YWx1ZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludCkgewogICAgICAgIHVpbnQ4W10gc3RvcmFnZSBhcnJheSA9IG1vbnN0ZXJXb3JsZFtfaWRdLnN0YXRCYXNlczsKICAgICAgICBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLkNMQVNTX1RZUEUpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyQ2xhc3NbdWludDMyKF9pZCldLnR5cGVzOwogICAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLlNUQVRfU1RFUCkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0uc3RhdFN0ZXBzOwogICAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLlNUQVRfU1RBUlQpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyQ2xhc3NbdWludDMyKF9pZCldLnN0YXRTdGFydHM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuT0JKX1NLSUxMKSB7CiAgICAgICAgICAgIGFycmF5ID0gbW9uc3RlcldvcmxkW19pZF0uc2tpbGxzOwogICAgICAgIH0KICAgICAgICBpZiAoX2luZGV4IDwgYXJyYXkubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChfdmFsdWUgPT0gMjU1KSB7CiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciBhcyBkZWxldGUKICAgICAgICAgICAgICAgIGZvcih1aW50IGkgPSBfaW5kZXg7IGkgPCBhcnJheS5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGFycmF5W2krMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkZWxldGUgYXJyYXlbYXJyYXkubGVuZ3RoLTFdOwogICAgICAgICAgICAgICAgYXJyYXkubGVuZ3RoLS07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhcnJheVtfaW5kZXhdID0gX3ZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRNb25zdGVyQ2xhc3ModWludDMyIF9jbGFzc0lkLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfcmV0dXJuUHJpY2UsIGJvb2wgX2NhdGNoYWJsZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDMyKSB7CiAgICAgICAgTW9uc3RlckNsYXNzIHN0b3JhZ2UgY2xhc3MgPSBtb25zdGVyQ2xhc3NbX2NsYXNzSWRdOwogICAgICAgIGlmIChjbGFzcy5jbGFzc0lkID09IDApIHsKICAgICAgICAgICAgdG90YWxDbGFzcyArPSAxOwogICAgICAgIH0KICAgICAgICBjbGFzcy5jbGFzc0lkID0gX2NsYXNzSWQ7CiAgICAgICAgY2xhc3MucHJpY2UgPSBfcHJpY2U7CiAgICAgICAgY2xhc3MucmV0dXJuUHJpY2UgPSBfcmV0dXJuUHJpY2U7CiAgICAgICAgY2xhc3MuY2F0Y2hhYmxlID0gX2NhdGNoYWJsZTsKICAgICAgICByZXR1cm4gdG90YWxDbGFzczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkTW9uc3Rlck9iaih1aW50MzIgX2NsYXNzSWQsIGFkZHJlc3MgX3RyYWluZXIsIHN0cmluZyBfbmFtZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDY0KSB7CiAgICAgICAgTW9uc3RlckNsYXNzIHN0b3JhZ2UgY2xhc3MgPSBtb25zdGVyQ2xhc3NbX2NsYXNzSWRdOwogICAgICAgIGlmIChjbGFzcy5jbGFzc0lkID09IDApCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgCiAgICAgICAgLy8gY29uc3RydWN0IG5ldyBtb25zdGVyCiAgICAgICAgdG90YWxNb25zdGVyICs9IDE7CiAgICAgICAgY2xhc3MudG90YWwgKz0gMTsKCiAgICAgICAgTW9uc3Rlck9iaiBzdG9yYWdlIG9iaiA9IG1vbnN0ZXJXb3JsZFt0b3RhbE1vbnN0ZXJdOwogICAgICAgIG9iai5tb25zdGVySWQgPSB0b3RhbE1vbnN0ZXI7CiAgICAgICAgb2JqLmNsYXNzSWQgPSBfY2xhc3NJZDsKICAgICAgICBvYmoudHJhaW5lciA9IF90cmFpbmVyOwogICAgICAgIG9iai5uYW1lID0gX25hbWU7CiAgICAgICAgb2JqLmV4cCA9IDE7CiAgICAgICAgb2JqLmNyZWF0ZUluZGV4ID0gY2xhc3MudG90YWw7CiAgICAgICAgb2JqLmxhc3RDbGFpbUluZGV4ID0gY2xhc3MudG90YWw7CiAgICAgICAgb2JqLmNyZWF0ZVRpbWUgPSBub3c7CgogICAgICAgIC8vIGFkZCB0byBtb25zdGVyZGV4CiAgICAgICAgYWRkTW9uc3RlcklkTWFwcGluZyhfdHJhaW5lciwgb2JqLm1vbnN0ZXJJZCk7CiAgICAgICAgcmV0dXJuIG9iai5tb25zdGVySWQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldE1vbnN0ZXJPYmoodWludDY0IF9vYmpJZCwgc3RyaW5nIF9uYW1lLCB1aW50MzIgX2V4cCwgdWludDMyIF9jcmVhdGVJbmRleCwgdWludDMyIF9sYXN0Q2xhaW1JbmRleCkgb25seU1vZGVyYXRvcnMgcHVibGljIHsKICAgICAgICBNb25zdGVyT2JqIHN0b3JhZ2Ugb2JqID0gbW9uc3RlcldvcmxkW19vYmpJZF07CiAgICAgICAgaWYgKG9iai5tb25zdGVySWQgPT0gX29iaklkKSB7CiAgICAgICAgICAgIG9iai5uYW1lID0gX25hbWU7CiAgICAgICAgICAgIG9iai5leHAgPSBfZXhwOwogICAgICAgICAgICBvYmouY3JlYXRlSW5kZXggPSBfY3JlYXRlSW5kZXg7CiAgICAgICAgICAgIG9iai5sYXN0Q2xhaW1JbmRleCA9IF9sYXN0Q2xhaW1JbmRleDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaW5jcmVhc2VNb25zdGVyRXhwKHVpbnQ2NCBfb2JqSWQsIHVpbnQzMiBhbW91bnQpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyB7CiAgICAgICAgTW9uc3Rlck9iaiBzdG9yYWdlIG9iaiA9IG1vbnN0ZXJXb3JsZFtfb2JqSWRdOwogICAgICAgIGlmIChvYmoubW9uc3RlcklkID09IF9vYmpJZCkgewogICAgICAgICAgICBvYmouZXhwID0gdWludDMyKHNhZmVBZGQob2JqLmV4cCwgYW1vdW50KSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRlY3JlYXNlTW9uc3RlckV4cCh1aW50NjQgX29iaklkLCB1aW50MzIgYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgewogICAgICAgIE1vbnN0ZXJPYmogc3RvcmFnZSBvYmogPSBtb25zdGVyV29ybGRbX29iaklkXTsKICAgICAgICBpZiAob2JqLm1vbnN0ZXJJZCA9PSBfb2JqSWQpIHsKICAgICAgICAgICAgb2JqLmV4cCA9IHVpbnQzMihzYWZlU3VidHJhY3Qob2JqLmV4cCwgYW1vdW50KSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZU1vbnN0ZXJJZE1hcHBpbmcoYWRkcmVzcyBfdHJhaW5lciwgdWludDY0IF9tb25zdGVySWQpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyB7CiAgICAgICAgdWludCBmb3VuZEluZGV4ID0gMDsKICAgICAgICB1aW50NjRbXSBzdG9yYWdlIG9iaklkTGlzdCA9IHRyYWluZXJEZXhbX3RyYWluZXJdOwogICAgICAgIGZvciAoOyBmb3VuZEluZGV4IDwgb2JqSWRMaXN0Lmxlbmd0aDsgZm91bmRJbmRleCsrKSB7CiAgICAgICAgICAgIGlmIChvYmpJZExpc3RbZm91bmRJbmRleF0gPT0gX21vbnN0ZXJJZCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGZvdW5kSW5kZXggPCBvYmpJZExpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgIG9iaklkTGlzdFtmb3VuZEluZGV4XSA9IG9iaklkTGlzdFtvYmpJZExpc3QubGVuZ3RoLTFdOwogICAgICAgICAgICBkZWxldGUgb2JqSWRMaXN0W29iaklkTGlzdC5sZW5ndGgtMV07CiAgICAgICAgICAgIG9iaklkTGlzdC5sZW5ndGgtLTsKICAgICAgICAgICAgTW9uc3Rlck9iaiBzdG9yYWdlIG1vbnN0ZXIgPSBtb25zdGVyV29ybGRbX21vbnN0ZXJJZF07CiAgICAgICAgICAgIG1vbnN0ZXIudHJhaW5lciA9IDA7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZGRNb25zdGVySWRNYXBwaW5nKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgewogICAgICAgIGlmIChfdHJhaW5lciAhPSBhZGRyZXNzKDApICYmIF9tb25zdGVySWQgPiAwKSB7CiAgICAgICAgICAgIHVpbnQ2NFtdIHN0b3JhZ2Ugb2JqSWRMaXN0ID0gdHJhaW5lckRleFtfdHJhaW5lcl07CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG9iaklkTGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKG9iaklkTGlzdFtpXSA9PSBfbW9uc3RlcklkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIG9iaklkTGlzdC5wdXNoKF9tb25zdGVySWQpOwogICAgICAgICAgICBNb25zdGVyT2JqIHN0b3JhZ2UgbW9uc3RlciA9IG1vbnN0ZXJXb3JsZFtfbW9uc3RlcklkXTsKICAgICAgICAgICAgbW9uc3Rlci50cmFpbmVyID0gX3RyYWluZXI7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjbGVhck1vbnN0ZXJSZXR1cm5CYWxhbmNlKHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgTW9uc3Rlck9iaiBzdG9yYWdlIG1vbnN0ZXIgPSBtb25zdGVyV29ybGRbX21vbnN0ZXJJZF07CiAgICAgICAgTW9uc3RlckNsYXNzIHN0b3JhZ2UgY2xhc3MgPSBtb25zdGVyQ2xhc3NbbW9uc3Rlci5jbGFzc0lkXTsKICAgICAgICBpZiAobW9uc3Rlci5tb25zdGVySWQgPT0gMCB8fCBjbGFzcy5jbGFzc0lkID09IDApCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gMDsKICAgICAgICB1aW50MzIgZ2FwID0gdWludDMyKHNhZmVTdWJ0cmFjdChjbGFzcy50b3RhbCwgbW9uc3Rlci5sYXN0Q2xhaW1JbmRleCkpOwogICAgICAgIGlmIChnYXAgPiAwKSB7CiAgICAgICAgICAgIG1vbnN0ZXIubGFzdENsYWltSW5kZXggPSBjbGFzcy50b3RhbDsKICAgICAgICAgICAgYW1vdW50ID0gc2FmZU11bHQoZ2FwLCBjbGFzcy5yZXR1cm5QcmljZSk7CiAgICAgICAgICAgIHRyYWluZXJFeHRyYUJhbGFuY2VbbW9uc3Rlci50cmFpbmVyXSA9IHNhZmVBZGQodHJhaW5lckV4dHJhQmFsYW5jZVttb25zdGVyLnRyYWluZXJdLCBhbW91bnQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYW1vdW50OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjb2xsZWN0QWxsUmV0dXJuQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2IGFtb3VudCkgewogICAgICAgIHVpbnQ2NFtdIHN0b3JhZ2Ugb2JqSWRMaXN0ID0gdHJhaW5lckRleFtfdHJhaW5lcl07CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb2JqSWRMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNsZWFyTW9uc3RlclJldHVybkJhbGFuY2Uob2JqSWRMaXN0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRyYWluZXJFeHRyYUJhbGFuY2VbX3RyYWluZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2Zlck1vbnN0ZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQ2NCBfbW9uc3RlcklkKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyhSZXN1bHRDb2RlKSB7CiAgICAgICAgTW9uc3Rlck9iaiBzdG9yYWdlIG1vbnN0ZXIgPSBtb25zdGVyV29ybGRbX21vbnN0ZXJJZF07CiAgICAgICAgaWYgKG1vbnN0ZXIudHJhaW5lciAhPSBfZnJvbSkgewogICAgICAgICAgICByZXR1cm4gUmVzdWx0Q29kZS5FUlJPUl9OT1RfVFJBSU5FUjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgY2xlYXJNb25zdGVyUmV0dXJuQmFsYW5jZShfbW9uc3RlcklkKTsKICAgICAgICAKICAgICAgICByZW1vdmVNb25zdGVySWRNYXBwaW5nKF9mcm9tLCBfbW9uc3RlcklkKTsKICAgICAgICBhZGRNb25zdGVySWRNYXBwaW5nKF90bywgX21vbnN0ZXJJZCk7CiAgICAgICAgcmV0dXJuIFJlc3VsdENvZGUuU1VDQ0VTUzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkRXh0cmFCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQyNTYgX2Ftb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDI1NikgewogICAgICAgIHRyYWluZXJFeHRyYUJhbGFuY2VbX3RyYWluZXJdID0gc2FmZUFkZCh0cmFpbmVyRXh0cmFCYWxhbmNlW190cmFpbmVyXSwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRyYWluZXJFeHRyYUJhbGFuY2VbX3RyYWluZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkZWR1Y3RFeHRyYUJhbGFuY2UoYWRkcmVzcyBfdHJhaW5lciwgdWludDI1NiBfYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdHJhaW5lckV4dHJhQmFsYW5jZVtfdHJhaW5lcl0gPSBzYWZlU3VidHJhY3QodHJhaW5lckV4dHJhQmFsYW5jZVtfdHJhaW5lcl0sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cmFpbmVyRXh0cmFCYWxhbmNlW190cmFpbmVyXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0RXh0cmFCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQyNTYgX2Ftb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljIHsKICAgICAgICB0cmFpbmVyRXh0cmFCYWxhbmNlW190cmFpbmVyXSA9IF9hbW91bnQ7CiAgICB9CiAgICAKICAgIAogICAgLy8gcHVibGljCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgYWRkRXh0cmFCYWxhbmNlKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8gcmVhZCBhY2Nlc3MKICAgIGZ1bmN0aW9uIGdldFNpemVBcnJheVR5cGUoQXJyYXlUeXBlIF90eXBlLCB1aW50NjQgX2lkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludDhbXSBzdG9yYWdlIGFycmF5ID0gbW9uc3RlcldvcmxkW19pZF0uc3RhdEJhc2VzOwogICAgICAgIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuQ0xBU1NfVFlQRSkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0udHlwZXM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuU1RBVF9TVEVQKSB7CiAgICAgICAgICAgIGFycmF5ID0gbW9uc3RlckNsYXNzW3VpbnQzMihfaWQpXS5zdGF0U3RlcHM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuU1RBVF9TVEFSVCkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0uc3RhdFN0YXJ0czsKICAgICAgICB9IGVsc2UgaWYgKF90eXBlID09IEFycmF5VHlwZS5PQkpfU0tJTEwpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyV29ybGRbX2lkXS5za2lsbHM7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcnJheS5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRJbkFycmF5VHlwZShBcnJheVR5cGUgX3R5cGUsIHVpbnQ2NCBfaWQsIHVpbnQgX2luZGV4KSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50OCkgewogICAgICAgIHVpbnQ4W10gc3RvcmFnZSBhcnJheSA9IG1vbnN0ZXJXb3JsZFtfaWRdLnN0YXRCYXNlczsKICAgICAgICBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLkNMQVNTX1RZUEUpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyQ2xhc3NbdWludDMyKF9pZCldLnR5cGVzOwogICAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLlNUQVRfU1RFUCkgewogICAgICAgICAgICBhcnJheSA9IG1vbnN0ZXJDbGFzc1t1aW50MzIoX2lkKV0uc3RhdFN0ZXBzOwogICAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT0gQXJyYXlUeXBlLlNUQVRfU1RBUlQpIHsKICAgICAgICAgICAgYXJyYXkgPSBtb25zdGVyQ2xhc3NbdWludDMyKF9pZCldLnN0YXRTdGFydHM7CiAgICAgICAgfSBlbHNlIGlmIChfdHlwZSA9PSBBcnJheVR5cGUuT0JKX1NLSUxMKSB7CiAgICAgICAgICAgIGFycmF5ID0gbW9uc3RlcldvcmxkW19pZF0uc2tpbGxzOwogICAgICAgIH0KICAgICAgICBpZiAoX2luZGV4ID49IGFycmF5Lmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgcmV0dXJuIGFycmF5W19pbmRleF07CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gZ2V0TW9uc3RlckNsYXNzKHVpbnQzMiBfY2xhc3NJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDMyIGNsYXNzSWQsIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgcmV0dXJuUHJpY2UsIHVpbnQzMiB0b3RhbCwgYm9vbCBjYXRjaGFibGUpIHsKICAgICAgICBNb25zdGVyQ2xhc3Mgc3RvcmFnZSBjbGFzcyA9IG1vbnN0ZXJDbGFzc1tfY2xhc3NJZF07CiAgICAgICAgY2xhc3NJZCA9IGNsYXNzLmNsYXNzSWQ7CiAgICAgICAgcHJpY2UgPSBjbGFzcy5wcmljZTsKICAgICAgICByZXR1cm5QcmljZSA9IGNsYXNzLnJldHVyblByaWNlOwogICAgICAgIHRvdGFsID0gY2xhc3MudG90YWw7CiAgICAgICAgY2F0Y2hhYmxlID0gY2xhc3MuY2F0Y2hhYmxlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRNb25zdGVyT2JqKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ2NCBvYmpJZCwgdWludDMyIGNsYXNzSWQsIGFkZHJlc3MgdHJhaW5lciwgdWludDMyIGV4cCwgdWludDMyIGNyZWF0ZUluZGV4LCB1aW50MzIgbGFzdENsYWltSW5kZXgsIHVpbnQgY3JlYXRlVGltZSkgewogICAgICAgIE1vbnN0ZXJPYmogc3RvcmFnZSBtb25zdGVyID0gbW9uc3RlcldvcmxkW19vYmpJZF07CiAgICAgICAgb2JqSWQgPSBtb25zdGVyLm1vbnN0ZXJJZDsKICAgICAgICBjbGFzc0lkID0gbW9uc3Rlci5jbGFzc0lkOwogICAgICAgIHRyYWluZXIgPSBtb25zdGVyLnRyYWluZXI7CiAgICAgICAgZXhwID0gbW9uc3Rlci5leHA7CiAgICAgICAgY3JlYXRlSW5kZXggPSBtb25zdGVyLmNyZWF0ZUluZGV4OwogICAgICAgIGxhc3RDbGFpbUluZGV4ID0gbW9uc3Rlci5sYXN0Q2xhaW1JbmRleDsKICAgICAgICBjcmVhdGVUaW1lID0gbW9uc3Rlci5jcmVhdGVUaW1lOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRNb25zdGVyTmFtZSh1aW50NjQgX29iaklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyhzdHJpbmcgbmFtZSkgewogICAgICAgIHJldHVybiBtb25zdGVyV29ybGRbX29iaklkXS5uYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEV4dHJhQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRyYWluZXJFeHRyYUJhbGFuY2VbX3RyYWluZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRNb25zdGVyRGV4U2l6ZShhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRyYWluZXJEZXhbX3RyYWluZXJdLmxlbmd0aDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0TW9uc3Rlck9iaklkKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQgaW5kZXgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ2NCkgewogICAgICAgIGlmIChpbmRleCA+PSB0cmFpbmVyRGV4W190cmFpbmVyXS5sZW5ndGgpCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIHJldHVybiB0cmFpbmVyRGV4W190cmFpbmVyXVtpbmRleF07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEV4cGVjdGVkQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDY0W10gc3RvcmFnZSBvYmpJZExpc3QgPSB0cmFpbmVyRGV4W190cmFpbmVyXTsKICAgICAgICB1aW50MjU2IG1vbnN0ZXJCYWxhbmNlID0gMDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBvYmpJZExpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgTW9uc3Rlck9iaiBtZW1vcnkgbW9uc3RlciA9IG1vbnN0ZXJXb3JsZFtvYmpJZExpc3RbaV1dOwogICAgICAgICAgICBNb25zdGVyQ2xhc3Mgc3RvcmFnZSBjbGFzcyA9IG1vbnN0ZXJDbGFzc1ttb25zdGVyLmNsYXNzSWRdOwogICAgICAgICAgICB1aW50MzIgZ2FwID0gdWludDMyKHNhZmVTdWJ0cmFjdChjbGFzcy50b3RhbCwgbW9uc3Rlci5sYXN0Q2xhaW1JbmRleCkpOwogICAgICAgICAgICBtb25zdGVyQmFsYW5jZSArPSBzYWZlTXVsdChnYXAsIGNsYXNzLnJldHVyblByaWNlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG1vbnN0ZXJCYWxhbmNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRNb25zdGVyUmV0dXJuKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYgY3VycmVudCwgdWludDI1NiB0b3RhbCkgewogICAgICAgIE1vbnN0ZXJPYmogbWVtb3J5IG1vbnN0ZXIgPSBtb25zdGVyV29ybGRbX29iaklkXTsKICAgICAgICBNb25zdGVyQ2xhc3Mgc3RvcmFnZSBjbGFzcyA9IG1vbnN0ZXJDbGFzc1ttb25zdGVyLmNsYXNzSWRdOwogICAgICAgIHVpbnQzMiB0b3RhbEdhcCA9IHVpbnQzMihzYWZlU3VidHJhY3QoY2xhc3MudG90YWwsIG1vbnN0ZXIuY3JlYXRlSW5kZXgpKTsKICAgICAgICB1aW50MzIgY3VycmVudEdhcCA9IHVpbnQzMihzYWZlU3VidHJhY3QoY2xhc3MudG90YWwsIG1vbnN0ZXIubGFzdENsYWltSW5kZXgpKTsKICAgICAgICByZXR1cm4gKHNhZmVNdWx0KGN1cnJlbnRHYXAsIGNsYXNzLnJldHVyblByaWNlKSwgc2FmZU11bHQodG90YWxHYXAsIGNsYXNzLnJldHVyblByaWNlKSk7CiAgICB9Cgp9'.
	

]
