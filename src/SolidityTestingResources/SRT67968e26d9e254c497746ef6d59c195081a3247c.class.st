Class {
	#name : #SRT67968e26d9e254c497746ef6d59c195081a3247c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT67968e26d9e254c497746ef6d59c195081a3247c >> base64 [
	^ ''.
	

]
