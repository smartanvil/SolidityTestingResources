Class {
	#name : #SRTe638dc39b6adbee8526b5c22380b4b45daf46d8e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe638dc39b6adbee8526b5c22380b4b45daf46d8e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vCi8vIEdaUiAnR2l6ZXIgR2FtaW5nJyB0b2tlbiBwdWJsaWMgc2FsZSBjb250cmFjdAovLwovLyBGb3IgZGV0YWlscywgcGxlYXNlIHZpc2l0OiBodHRwOi8vd3d3LmdpemVyLmlvCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vCi8vIFNhZmVNYXRoCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxpYnJhcnkgU2FmZU1hdGggewoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CiAgICBjID0gYSArIGI7CiAgICByZXF1aXJlKCBjID49IGEgKTsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IGMpIHsKICAgIHJlcXVpcmUoIGIgPD0gYSApOwogICAgYyA9IGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgYykgewogICAgYyA9IGEgKiBiOwogICAgcmVxdWlyZSggYSA9PSAwIHx8IGMgLyBhID09IGIgKTsKICB9Cgp9CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLwovLyBPd25lZCBjb250cmFjdAovLwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBPd25lZCB7CgogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGFkZHJlc3MgcHVibGljIG5ld093bmVyOwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGlzQWRtaW47CgogIC8vIEV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJQcm9wb3NlZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8pOwogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90byk7CiAgZXZlbnQgQWRtaW5DaGFuZ2UoYWRkcmVzcyBpbmRleGVkIF9hZG1pbiwgYm9vbCBfc3RhdHVzKTsKCiAgLy8gTW9kaWZpZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICBtb2RpZmllciBvbmx5T3duZXIgeyByZXF1aXJlKCBtc2cuc2VuZGVyID09IG93bmVyICk7IF87IH0KICBtb2RpZmllciBvbmx5QWRtaW4geyByZXF1aXJlKCBpc0FkbWluW21zZy5zZW5kZXJdICk7IF87IH0KCiAgLy8gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICBpc0FkbWluW293bmVyXSA9IHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKCBfbmV3T3duZXIgIT0gYWRkcmVzcygweDApICk7CiAgICBPd25lcnNoaXBUcmFuc2ZlclByb3Bvc2VkKG93bmVyLCBfbmV3T3duZXIpOwogICAgbmV3T3duZXIgPSBfbmV3T3duZXI7CiAgfQoKICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KICAKICBmdW5jdGlvbiBhZGRBZG1pbihhZGRyZXNzIF9hKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIGlzQWRtaW5bX2FdID09IGZhbHNlICk7CiAgICBpc0FkbWluW19hXSA9IHRydWU7CiAgICBBZG1pbkNoYW5nZShfYSwgdHJ1ZSk7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVBZG1pbihhZGRyZXNzIF9hKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIGlzQWRtaW5bX2FdID09IHRydWUgKTsKICAgIGlzQWRtaW5bX2FdID0gZmFsc2U7CiAgICBBZG1pbkNoYW5nZShfYSwgZmFsc2UpOwogIH0KICAKfQoKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8KLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtMjAtdG9rZW4tc3RhbmRhcmQubWQKLy8KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewoKICAvLyBFdmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwoKICAvLyBGdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IGJhbGFuY2UpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7Cgp9CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLwovLyBFUkMgVG9rZW4gU3RhbmRhcmQgIzIwCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IEVSQzIwVG9rZW4gaXMgRVJDMjBJbnRlcmZhY2UsIE93bmVkIHsKICAKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgdWludCBwdWJsaWMgdG9rZW5zSXNzdWVkVG90YWwgPSAwOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgLy8gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvKiBUb3RhbCB0b2tlbiBzdXBwbHkgKi8KCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gdG9rZW5zSXNzdWVkVG90YWw7CiAgfQoKICAvKiBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBmb3IgYW4gYWRkcmVzcyAqLwoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICAvKiBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgLy8gYW1vdW50IHNlbnQgY2Fubm90IGV4Y2VlZCBiYWxhbmNlCiAgICByZXF1aXJlKCBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICk7CgogICAgLy8gdXBkYXRlIGJhbGFuY2VzCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gICAgICAgID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CgogICAgLy8gbG9nIGV2ZW50CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKiBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCB1cCB0byBfYW1vdW50ICovCgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAvLyBhcHByb3ZhbCBhbW91bnQgY2Fubm90IGV4Y2VlZCB0aGUgYmFsYW5jZQogICAgcmVxdWlyZSggYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCApOwogICAgICAKICAgIC8vIHVwZGF0ZSBhbGxvd2VkIGFtb3VudAogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgCiAgICAvLyBsb2cgZXZlbnQKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyogU3BlbmRlciBvZiB0b2tlbnMgdHJhbnNmZXJzIHRva2VucyBmcm9tIHRoZSBvd25lcidzIGJhbGFuY2UgKi8KICAvKiBNdXN0IGJlIHByZS1hcHByb3ZlZCBieSBvd25lciAqLwoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgLy8gYmFsYW5jZSBjaGVja3MKICAgIHJlcXVpcmUoIGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50ICk7CiAgICByZXF1aXJlKCBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICk7CgogICAgLy8gdXBkYXRlIGJhbGFuY2VzIGFuZCBhbGxvd2VkIGFtb3VudAogICAgYmFsYW5jZXNbX2Zyb21dICAgICAgICAgICAgPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICBiYWxhbmNlc1tfdG9dICAgICAgICAgICAgICA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwoKICAgIC8vIGxvZyBldmVudAogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qIFJldHVybnMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXBwcm92ZWQgYnkgdGhlIG93bmVyICovCiAgLyogdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgYnkgc3BlbmRlciAqLwoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLwovLyBHWlIgcHVibGljIHRva2VuIHNhbGUKLy8KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKY29udHJhY3QgR2l6ZXJUb2tlbiBpcyBFUkMyMFRva2VuIHsKCiAgLyogVXRpbGl0eSB2YXJpYWJsZSAqLwogIAogIHVpbnQgY29uc3RhbnQgRTYgID0gMTAqKjY7CgogIC8qIEJhc2ljIHRva2VuIGRhdGEgKi8KCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lICAgICA9ICJHaXplciBHYW1pbmcgVG9rZW4iOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sICAgPSAiR1pSIjsKICB1aW50OCAgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gNjsKCiAgLyogV2FsbGV0cyAqLwogIAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICBhZGRyZXNzIHB1YmxpYyByZWRlbXB0aW9uV2FsbGV0OwogIGFkZHJlc3MgcHVibGljIGdpemVySXRlbXNDb250cmFjdDsKCiAgLyogQ3Jvd2RzYWxlIHBhcmFtZXRlcnMgKGNvbnN0YW50cykgKi8KCiAgdWludCBwdWJsaWMgY29uc3RhbnQgREFURV9JQ09fU1RBUlQgPSAxNTIxMTIyNDAwOyAvLyAxNS1NYXItMjAxOCAxNDowMCBVVEMgMTA6MDAgRVNUCgogIHVpbnQgcHVibGljIGNvbnN0YW50IFRPS0VOX1NVUFBMWV9UT1RBTCA9IDEwMDAwMDAwICogRTY7CiAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9LRU5fU1VQUExZX0NST1dEID0gIDYxMTI5MjYgKiBFNjsKICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTl9TVVBQTFlfT1dORVIgPSAgMzg4NzA3NCAqIEU2OyAvLyAyLDAwMCwwMDAgdG9rZW5zIHJlc2VydmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxLDg4NywwNzQgcHJlc2FsZSB0b2tlbnMKCiAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0NPTlRSSUJVVElPTiA9IDEgZXRoZXIgLyAxMDA7ICAKICAKICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTlNfUEVSX0VUSCA9IDEwMDA7CiAgCiAgdWludCBwdWJsaWMgY29uc3RhbnQgREFURV9UT0tFTlNfVU5MT0NLRUQgPSAxNTM5MTgwMDAwOyAvLyAxMC1PQ1QtMjAxOCAxNDowMCBVVEMgMTA6MDAgRVNUCgogIC8qIENyb3dkc2FsZSBwYXJhbWV0ZXJzIChjYW4gYmUgbW9kaWZpZWQgYnkgb3duZXIpICovCiAgCiAgdWludCBwdWJsaWMgZGF0ZV9pY29fZW5kID0gMTUyMzM2ODgwMDsgLy8gMTAtQXByLTIwMTggMTQ6MDAgVVRDIDEwOjAwIEVTVAoKICAvKiBDcm93ZHNhbGUgdmFyaWFibGVzICovCgogIHVpbnQgcHVibGljIHRva2Vuc0lzc3VlZENyb3dkICA9IDA7CiAgdWludCBwdWJsaWMgdG9rZW5zSXNzdWVkT3duZXIgID0gMDsKICB1aW50IHB1YmxpYyB0b2tlbnNJc3N1ZWRMb2NrZWQgPSAwOwogIAogIHVpbnQgcHVibGljIGV0aGVyUmVjZWl2ZWQgPSAwOyAvLyBkb2VzIG5vdCBpbmNsdWRlIHByZXNhbGUgZXRoZXJzCgogIC8qIEtlZXAgdHJhY2sgb2YgKyBldGhlcnMgY29udHJpYnV0ZWQsCiAgICAgICAgICAgICAgICAgICArIHRva2VucyByZWNlaXZlZCAKICAgICAgICAgICAgICAgICAgICsgdG9rZW5zIGxvY2tlZCBkdXJpbmcgQ3Jvd2RzYWxlICovCiAgCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBldGhlckNvbnRyaWJ1dGVkOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgdG9rZW5zUmVjZWl2ZWQ7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBsb2NrZWQ7CiAgCiAgLy8gRXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIAogIGV2ZW50IFdhbGxldFVwZGF0ZWQoYWRkcmVzcyBfbmV3V2FsbGV0KTsKICBldmVudCBHaXplckl0ZW1zQ29udHJhY3RVcGRhdGVkKGFkZHJlc3MgX0dpemVySXRlbXNDb250cmFjdCk7CiAgZXZlbnQgUmVkZW1wdGlvbldhbGxldFVwZGF0ZWQoYWRkcmVzcyBfbmV3UmVkZW1wdGlvbldhbGxldCk7CiAgZXZlbnQgRGF0ZUljb0VuZFVwZGF0ZWQodWludCBfdW5peHRzKTsKICBldmVudCBUb2tlbnNJc3N1ZWRDcm93ZChhZGRyZXNzIGluZGV4ZWQgX3JlY2lwaWVudCwgdWludCBfdG9rZW5zLCB1aW50IF9ldGhlcik7CiAgZXZlbnQgVG9rZW5zSXNzdWVkT3duZXIoYWRkcmVzcyBpbmRleGVkIF9yZWNpcGllbnQsIHVpbnQgX3Rva2VucywgYm9vbCBfbG9ja2VkKTsKICBldmVudCBJdGVtc0JvdWdodChhZGRyZXNzIGluZGV4ZWQgX3JlY2lwaWVudCwgdWludCBfbGFzdElkeCwgdWludCBfbnVtYmVyKTsKCiAgLy8gQmFzaWMgRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAvKiBJbml0aWFsaXplICovCgogIGZ1bmN0aW9uIEdpemVyVG9rZW4oKSBwdWJsaWMgewogICAgcmVxdWlyZSggVE9LRU5fU1VQUExZX09XTkVSICsgVE9LRU5fU1VQUExZX0NST1dEID09IFRPS0VOX1NVUFBMWV9UT1RBTCApOwogICAgd2FsbGV0ID0gb3duZXI7CiAgICByZWRlbXB0aW9uV2FsbGV0ID0gb3duZXI7CiAgfQoKICAvKiBGYWxsYmFjayAqLwogIAogIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGJ1eVRva2VucygpOwogIH0KCiAgLy8gSW5mb3JtYXRpb24gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLQogIAogIC8qIFdoYXQgdGltZSBpcyBpdD8gKi8KICAKICBmdW5jdGlvbiBhdE5vdygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBub3c7CiAgfQoKICAvKiBBcmUgdG9rZW5zIHRyYWRlYWJsZSAqLwogIAogIGZ1bmN0aW9uIHRyYWRlYWJsZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGlmIChhdE5vdygpID4gZGF0ZV9pY29fZW5kKSByZXR1cm4gdHJ1ZSA7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIAogIC8qIEF2YWlsYWJsZSB0byBtaW50IGJ5IG93bmVyICovCiAgCiAgZnVuY3Rpb24gYXZhaWxhYmxlVG9NaW50KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBhdmFpbGFibGUpIHsKICAgIGlmIChhdE5vdygpIDw9IGRhdGVfaWNvX2VuZCkgewogICAgICBhdmFpbGFibGUgPSBUT0tFTl9TVVBQTFlfT1dORVIuc3ViKHRva2Vuc0lzc3VlZE93bmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGF2YWlsYWJsZSA9IFRPS0VOX1NVUFBMWV9UT1RBTC5zdWIodG9rZW5zSXNzdWVkVG90YWwpOwogICAgfQogIH0KICAKICAvKiBVbmxvY2tlZCB0b2tlbnMgaW4gYW4gYWNjb3VudCAqLwogIAogIGZ1bmN0aW9uIHVubG9ja2VkVG9rZW5zKGFkZHJlc3MgX2FjY291bnQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgX3VubG9ja2VkVG9rZW5zKSB7CiAgICBpZiAoYXROb3coKSA8PSBEQVRFX1RPS0VOU19VTkxPQ0tFRCkgewogICAgICByZXR1cm4gYmFsYW5jZXNbX2FjY291bnRdIC0gbG9ja2VkW19hY2NvdW50XTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBiYWxhbmNlc1tfYWNjb3VudF07CiAgICB9CiAgfQoKICAvLyBPd25lciBGdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tCiAgCiAgLyogQ2hhbmdlIHRoZSBjcm93ZHNhbGUgd2FsbGV0IGFkZHJlc3MgKi8KCiAgZnVuY3Rpb24gc2V0V2FsbGV0KGFkZHJlc3MgX3dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKCBfd2FsbGV0ICE9IGFkZHJlc3MoMHgwKSApOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICAgIFdhbGxldFVwZGF0ZWQoX3dhbGxldCk7CiAgfQoKICAvKiBDaGFuZ2UgdGhlIHJlZGVtcHRpb24gd2FsbGV0IGFkZHJlc3MgKi8KCiAgZnVuY3Rpb24gc2V0UmVkZW1wdGlvbldhbGxldChhZGRyZXNzIF93YWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSggX3dhbGxldCAhPSBhZGRyZXNzKDB4MCkgKTsKICAgIHJlZGVtcHRpb25XYWxsZXQgPSBfd2FsbGV0OwogICAgUmVkZW1wdGlvbldhbGxldFVwZGF0ZWQoX3dhbGxldCk7CiAgfQogIAogIC8qIENoYW5nZSB0aGUgR2l6ZXIgSXRlbXMgY29udHJhY3QgYWRkcmVzcyAqLwoKICBmdW5jdGlvbiBzZXRHaXplckl0ZW1zQ29udHJhY3QoYWRkcmVzcyBfY29udHJhY3QpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSggX2NvbnRyYWN0ICE9IGFkZHJlc3MoMHgwKSApOwogICAgZ2l6ZXJJdGVtc0NvbnRyYWN0ID0gX2NvbnRyYWN0OwogICAgR2l6ZXJJdGVtc0NvbnRyYWN0VXBkYXRlZChfY29udHJhY3QpOwogIH0KICAKICAvKiBDaGFuZ2UgdGhlIElDTyBlbmQgZGF0ZSAqLwoKICBmdW5jdGlvbiBleHRlbmRJY28odWludCBfdW5peHRzKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIF91bml4dHMgPiBkYXRlX2ljb19lbmQgKTsKICAgIHJlcXVpcmUoIF91bml4dHMgPCAxNTMwMzE2ODAwICk7IC8vIG11c3QgYmUgYmVmb3JlIDMwLUpVTi0yMDE4CiAgICBkYXRlX2ljb19lbmQgPSBfdW5peHRzOwogICAgRGF0ZUljb0VuZFVwZGF0ZWQoX3VuaXh0cyk7CiAgfQogIAogIC8qIE1pbnRpbmcgb2YgdG9rZW5zIGJ5IG93bmVyICovCgogIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyBfYWNjb3VudCwgdWludCBfdG9rZW5zKSBwdWJsaWMgb25seU93bmVyIHsKICAgIC8vIGNoZWNrIHRva2VuIGFtb3VudAogICAgcmVxdWlyZSggX3Rva2VucyA8PSBhdmFpbGFibGVUb01pbnQoKSApOwogICAgCiAgICAvLyB1cGRhdGUKICAgIGJhbGFuY2VzW19hY2NvdW50XSA9IGJhbGFuY2VzW19hY2NvdW50XS5hZGQoX3Rva2Vucyk7CiAgICB0b2tlbnNJc3N1ZWRPd25lciAgPSB0b2tlbnNJc3N1ZWRPd25lci5hZGQoX3Rva2Vucyk7CiAgICB0b2tlbnNJc3N1ZWRUb3RhbCAgPSB0b2tlbnNJc3N1ZWRUb3RhbC5hZGQoX3Rva2Vucyk7CiAgICAKICAgIC8vIGxvZyBldmVudAogICAgVHJhbnNmZXIoMHgwLCBfYWNjb3VudCwgX3Rva2Vucyk7CiAgICBUb2tlbnNJc3N1ZWRPd25lcihfYWNjb3VudCwgX3Rva2VucywgZmFsc2UpOwogIH0KCiAgLyogTWludGluZyBvZiB0b2tlbnMgYnkgb3duZXIgKi8KCiAgZnVuY3Rpb24gbWludFRva2Vuc0xvY2tlZChhZGRyZXNzIF9hY2NvdW50LCB1aW50IF90b2tlbnMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgLy8gY2hlY2sgdG9rZW4gYW1vdW50CiAgICByZXF1aXJlKCBfdG9rZW5zIDw9IGF2YWlsYWJsZVRvTWludCgpICk7CiAgICAKICAgIC8vIHVwZGF0ZQogICAgYmFsYW5jZXNbX2FjY291bnRdID0gYmFsYW5jZXNbX2FjY291bnRdLmFkZChfdG9rZW5zKTsKICAgIGxvY2tlZFtfYWNjb3VudF0gICA9IGxvY2tlZFtfYWNjb3VudF0uYWRkKF90b2tlbnMpOwogICAgdG9rZW5zSXNzdWVkT3duZXIgID0gdG9rZW5zSXNzdWVkT3duZXIuYWRkKF90b2tlbnMpOwogICAgdG9rZW5zSXNzdWVkVG90YWwgID0gdG9rZW5zSXNzdWVkVG90YWwuYWRkKF90b2tlbnMpOwogICAgdG9rZW5zSXNzdWVkTG9ja2VkID0gdG9rZW5zSXNzdWVkTG9ja2VkLmFkZChfdG9rZW5zKTsKICAgIAogICAgLy8gbG9nIGV2ZW50CiAgICBUcmFuc2ZlcigweDAsIF9hY2NvdW50LCBfdG9rZW5zKTsKICAgIFRva2Vuc0lzc3VlZE93bmVyKF9hY2NvdW50LCBfdG9rZW5zLCB0cnVlKTsKICB9ICAKICAKICAvKiBUcmFuc2ZlciBvdXQgYW55IGFjY2lkZW50YWxseSBzZW50IEVSQzIwIHRva2VucyAqLwoKICBmdW5jdGlvbiB0cmFuc2ZlckFueUVSQzIwVG9rZW4oYWRkcmVzcyB0b2tlbkFkZHJlc3MsIHVpbnQgYW1vdW50KSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXR1cm4gRVJDMjBJbnRlcmZhY2UodG9rZW5BZGRyZXNzKS50cmFuc2Zlcihvd25lciwgYW1vdW50KTsKICB9CgogIC8vIFByaXZhdGUgZnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0KCiAgLyogQWNjZXB0IEVUSCBkdXJpbmcgY3Jvd2RzYWxlIChjYWxsZWQgYnkgZGVmYXVsdCBmdW5jdGlvbikgKi8KCiAgZnVuY3Rpb24gYnV5VG9rZW5zKCkgcHJpdmF0ZSB7CiAgICAKICAgIC8vIGJhc2ljIGNoZWNrcwogICAgcmVxdWlyZSggYXROb3coKSA+IERBVEVfSUNPX1NUQVJUICYmIGF0Tm93KCkgPCBkYXRlX2ljb19lbmQgKTsKICAgIHJlcXVpcmUoIG1zZy52YWx1ZSA+PSBNSU5fQ09OVFJJQlVUSU9OICk7CiAgICAKICAgIC8vIGNoZWNrIHRva2VuIHZvbHVtZQogICAgdWludCB0b2tlbnNBdmFpbGFibGUgPSBUT0tFTl9TVVBQTFlfQ1JPV0Quc3ViKHRva2Vuc0lzc3VlZENyb3dkKTsKICAgIHVpbnQgdG9rZW5zID0gbXNnLnZhbHVlLm11bChUT0tFTlNfUEVSX0VUSCkgLyAxMCoqMTI7CiAgICByZXF1aXJlKCB0b2tlbnMgPD0gdG9rZW5zQXZhaWxhYmxlICk7CiAgICAKICAgIC8vIGlzc3VlIHRva2VucwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKICAgIAogICAgLy8gdXBkYXRlIGdsb2JhbCB0cmFja2luZyB2YXJpYWJsZXMKICAgIHRva2Vuc0lzc3VlZENyb3dkICA9IHRva2Vuc0lzc3VlZENyb3dkLmFkZCh0b2tlbnMpOwogICAgdG9rZW5zSXNzdWVkVG90YWwgID0gdG9rZW5zSXNzdWVkVG90YWwuYWRkKHRva2Vucyk7CiAgICBldGhlclJlY2VpdmVkICAgICAgPSBldGhlclJlY2VpdmVkLmFkZChtc2cudmFsdWUpOwogICAgCiAgICAvLyB1cGRhdGUgY29udHJpYnV0b3IgdHJhY2tpbmcgdmFyaWFibGVzCiAgICBldGhlckNvbnRyaWJ1dGVkW21zZy5zZW5kZXJdID0gZXRoZXJDb250cmlidXRlZFttc2cuc2VuZGVyXS5hZGQobXNnLnZhbHVlKTsKICAgIHRva2Vuc1JlY2VpdmVkW21zZy5zZW5kZXJdICAgPSB0b2tlbnNSZWNlaXZlZFttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKICAgIAogICAgLy8gdHJhbnNmZXIgRXRoZXIgb3V0CiAgICBpZiAodGhpcy5iYWxhbmNlID4gMCkgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CgogICAgLy8gbG9nIHRva2VuIGlzc3VhbmNlCiAgICBUb2tlbnNJc3N1ZWRDcm93ZChtc2cuc2VuZGVyLCB0b2tlbnMsIG1zZy52YWx1ZSk7CiAgICBUcmFuc2ZlcigweDAsIG1zZy5zZW5kZXIsIHRva2Vucyk7CiAgfQoKICAvLyBFUkMyMCBmdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tCgogIC8qIE92ZXJyaWRlICJ0cmFuc2ZlciIgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSggdHJhZGVhYmxlKCkgKTsKICAgIHJlcXVpcmUoIHVubG9ja2VkVG9rZW5zKG1zZy5zZW5kZXIpID49IF9hbW91bnQgKTsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF9hbW91bnQpOwogIH0KICAKICAvKiBPdmVycmlkZSAidHJhbnNmZXJGcm9tIiAqLwoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSggdHJhZGVhYmxlKCkgKTsKICAgIHJlcXVpcmUoIHVubG9ja2VkVG9rZW5zKF9mcm9tKSA+PSBfYW1vdW50ICk7IAogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfYW1vdW50KTsKICB9CgogIC8vIEJ1bGsgdG9rZW4gdHJhbnNmZXIgZnVuY3Rpb24gLS0tLS0KCiAgLyogTXVsdGlwbGUgdG9rZW4gdHJhbnNmZXJzIGZyb20gb25lIGFkZHJlc3MgdG8gc2F2ZSBnYXMgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXJNdWx0aXBsZShhZGRyZXNzW10gX2FkZHJlc3NlcywgdWludFtdIF9hbW91bnRzKSBleHRlcm5hbCB7CiAgICByZXF1aXJlKCB0cmFkZWFibGUoKSApOwogICAgcmVxdWlyZSggX2FkZHJlc3Nlcy5sZW5ndGggPT0gX2Ftb3VudHMubGVuZ3RoICk7CiAgICByZXF1aXJlKCBfYWRkcmVzc2VzLmxlbmd0aCA8PSAxMDAgKTsKICAgIAogICAgLy8gY2hlY2sgdG9rZW4gYW1vdW50cwogICAgdWludCB0b2tlbnNfdG9fdHJhbnNmZXIgPSAwOwogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2FkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICB0b2tlbnNfdG9fdHJhbnNmZXIgPSB0b2tlbnNfdG9fdHJhbnNmZXIuYWRkKF9hbW91bnRzW2ldKTsKICAgIH0KICAgIHJlcXVpcmUoIHRva2Vuc190b190cmFuc2ZlciA8PSB1bmxvY2tlZFRva2Vucyhtc2cuc2VuZGVyKSApOwogICAgCiAgICAvLyBkbyB0aGUgdHJhbnNmZXJzCiAgICBmb3IgKGkgPSAwOyBpIDwgX2FkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICBzdXBlci50cmFuc2ZlcihfYWRkcmVzc2VzW2ldLCBfYW1vdW50c1tpXSk7CiAgICB9CiAgfQogIAogIC8vIEZ1bmN0aW9ucyB0byBjb252ZXJ0IEdaUiB0byBHaXplciBpdGVtcyAtLS0tLS0tLS0tLQogIAogIC8qIEdaUiB0b2tlbiBvd25lciBidXlzIG9uZSBHaXplciBJdGVtICovIAogIAogIGZ1bmN0aW9uIGJ1eUl0ZW0oKSBwdWJsaWMgcmV0dXJucyAodWludCBpZHgpIHsKICAgIHN1cGVyLnRyYW5zZmVyKHJlZGVtcHRpb25XYWxsZXQsIEU2KTsKICAgIGlkeCA9IG1pbnRJdGVtKG1zZy5zZW5kZXIpOwoKICAgIC8vIGV2ZW50CiAgICBJdGVtc0JvdWdodChtc2cuc2VuZGVyLCBpZHgsIDEpOwogIH0KICAKICAvKiBHWlIgdG9rZW4gb3duZXIgYnV5cyBzZXZlcmFsIEdpemVyIEl0ZW1zIChtYXggMTAwKSAqLyAKICAKICBmdW5jdGlvbiBidXlNdWx0aXBsZUl0ZW1zKHVpbnQ4IF9pdGVtcykgcHVibGljIHJldHVybnMgKHVpbnQgaWR4KSB7CiAgICAKICAgIC8vIGJldHdlZW4gMCBhbmQgMTAwIGl0ZW1zCiAgICByZXF1aXJlKCBfaXRlbXMgPiAwICYmIF9pdGVtcyA8PSAxMDAgKTsKCiAgICAvLyB0cmFuc2ZlciBHWlIgdG9rZW5zIHRvIHJlZGVtcHRpb24gd2FsbGV0CiAgICBzdXBlci50cmFuc2ZlcihyZWRlbXB0aW9uV2FsbGV0LCBfaXRlbXMgKiBFNik7CiAgICAKICAgIC8vIG1pbnQgdG9rZW5zLCByZXR1cm5pbmcgaW5kZXhlcyBvZiBmaXJzdCBhbmQgbGFzdCBpdGVtIG1pbnRlZAogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2l0ZW1zOyBpKyspIHsKICAgICAgaWR4ID0gbWludEl0ZW0obXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8gZXZlbnQKICAgIEl0ZW1zQm91Z2h0KG1zZy5zZW5kZXIsIGlkeCwgX2l0ZW1zKTsKICB9CgogIC8qIEludGVybmFsIGZ1bmN0aW9uIHRvIGNhbGwgKi8KICAKICBmdW5jdGlvbiBtaW50SXRlbShhZGRyZXNzIF9vd25lcikgaW50ZXJuYWwgcmV0dXJucyh1aW50IGlkeCkgewogICAgR2l6ZXJJdGVtc0ludGVyZmFjZSBnID0gR2l6ZXJJdGVtc0ludGVyZmFjZShnaXplckl0ZW1zQ29udHJhY3QpOwogICAgaWR4ID0gZy5taW50KF9vd25lcik7CiAgfQogIAp9CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLwovLyBHWlIgSXRlbXMgaW50ZXJmYWNlCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IEdpemVySXRlbXNJbnRlcmZhY2UgaXMgT3duZWQgewoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvKSBwdWJsaWMgb25seUFkbWluIHJldHVybnMgKHVpbnQgaWR4KTsKCn0='.
	

]
