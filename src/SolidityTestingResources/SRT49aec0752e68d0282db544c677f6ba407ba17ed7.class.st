Class {
	#name : #SRT49aec0752e68d0282db544c677f6ba407ba17ed7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT49aec0752e68d0282db544c677f6ba407ba17ed7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8qIEJpbGxpb25haXJlIFRva2VuIChYQkwpIHNvdXJjZSBjb2RlLiAqLwogIAogY29udHJhY3QgWEJMVG9rZW4gewogICAgIAogICAgLy8gR2V0IHRoZSB0b3RhbCB0b2tlbiBzdXBwbHkKICAKICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvKiBUaGlzIG5vdGlmaWVzIGNsaWVudHMgYWJvdXQgdGhlIFhCTCBhbW91bnQgYnVybmVkICovCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIAogICAgLy8gQW5kIHdlIGJlZ2luOgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiWEJMIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJCaWxsaW9uYWlyZSBUb2tlbiI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gMzMzMzMzMzAwMDAwMDAwMDAwMDAwMDAwMDsgICAgLy8gMywzMzMsMzMzIHRva2VucyB3aXRoIDE4IGRlY2ltYWwgcGxhY2VzLgogICAgdWludDI1NiBfdG90YWxCdXJuZWQgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBidXJuZWQgaW5pdGlhbGx5IHN0YXJ0cyBhdCAwLgogICAgIAogICAgLyogVGhlIG93bmVyIG9mIHRoaXMgY29udHJhY3QgKGluaXRpYWwgYWRkcmVzcykgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogIAogICAgLyogRGljdGlvbmFyeSBjb250YWluaW5nIGJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQgKi8KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAKICAgIC8qIE93bmVyIG9mIGFjY291bnQgY2FuIGFwcHJvdmUgKGFsbG93KSB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudCAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgCiAgICAgLy8gRnVuY3Rpb25zIHdpdGggdGhpcyBtb2RpZmllciBjYW4gb25seSBiZSBleGVjdXRlZCBieSB0aGUgb3duZXIKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIAogICAgIHsKICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIAogICAgICAgICB7CiAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgfQogICAgICAgICBfOwogICAgIH0KICAKICAgICAvLyBDb25zdHJ1Y3RvcjoKICAgICBmdW5jdGlvbiBYQkxUb2tlbigpIAogICAgIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gX3RvdGFsU3VwcGx5OwogICAgIH0KICAKICAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgbF90b3RhbFN1cHBseSkgCiAgICAgewogICAgICAgIGxfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgfQoKICAgICBmdW5jdGlvbiB0b3RhbEJ1cm5lZCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgbF90b3RhbEJ1cm5lZCkKICAgICB7CiAgICAgICAgbF90b3RhbEJ1cm5lZCA9IF90b3RhbEJ1cm5lZDsKICAgICB9CiAgCiAgICAgLyogV2hhdCBpcyB0aGUgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudD8gKi8KICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgCiAgICAgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgIH0KICAKICAgICAvKiBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQuICovCiAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgICB7CiAgICAgICAgaWYgKF90byA9PSAweDApIHRocm93OyAgICAgIC8qIFByZXZlbnRzIHRyYW5zZmVycmluZyB0byAweDAgYWRkcmVzc2VzLiBVc2UgYnVybigpIGluc3RlYWQuICovCgogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgCiAgICAgICAgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IAogICAgICAgICBlbHNlIAogICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogICAgIH0KICAKICAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kCiAgICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzCiAgICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UKICAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICAgewogICAgICAgIGlmIChfdG8gPT0gMHgwKSB0aHJvdzsgICAgICAvKiBQcmV2ZW50cyB0cmFuc2ZlcnJpbmcgdG8gMHgwIGFkZHJlc3Nlcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkLiAqLwoKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAmJiBfYW1vdW50ID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIAogICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IAogICAgICAgICBlbHNlIAogICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogICAgIH0KICAKICAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIAogICAgIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgIH0KICAKICAgICAvKiBJcyB0aGUgX3NwZW5kZXIgYWxsb3dlZCB0byBzcGVuZCBvbiB0aGUgYmVoYWxmIG9mIHRoZSBfb3duZXI/ICovIAogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIAogICAgIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgICB9CgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgLyogVXBkYXRpbmcgaW5kaWNhdG9yIHZhcmlhYmxlcyAqLwogICAgICAgIF90b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgIAogICAgICAgIF90b3RhbEJ1cm5lZCArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAvKiBTZW5kIHRoZSBldmVudCBub3RpZmljYXRpb24gKi8KICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgLyogVXBkYXRpbmcgaW5kaWNhdG9yIHZhcmlhYmxlcyAqLwogICAgICAgIF90b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgX3RvdGFsQnVybmVkICs9IF92YWx1ZTsKICAgICAgICAvKiBTZW5kIHRoZSBldmVudCBub3RpZmljYXRpb24gKi8KICAgICAgICBCdXJuKF9mcm9tLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogfQ=='.
	

]
