Class {
	#name : #SRT1d688a985f56a48a022a98de59fd37b32e2c72f2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d688a985f56a48a022a98de59fd37b32e2c72f2 >> base64 [
	^ ''.
	

]
