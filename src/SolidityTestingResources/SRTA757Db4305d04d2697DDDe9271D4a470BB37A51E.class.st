Class {
	#name : #SRTA757Db4305d04d2697DDDe9271D4a470BB37A51E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA757Db4305d04d2697DDDe9271D4a470BB37A51E >> base64 [
	^ ''.
	

]
