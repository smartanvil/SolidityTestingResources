Class {
	#name : #SRT9cdF0b3B0B35d0EE593D68C55da1cC79585335bC,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9cdF0b3B0B35d0EE593D68C55da1cC79585335bC >> base64 [
	^ ''.
	

]
