Class {
	#name : #SRTf3e827ee018007603899170f0d4b80076dfa469e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf3e827ee018007603899170f0d4b80076dfa469e >> base64 [
	^ ''.
	

]
