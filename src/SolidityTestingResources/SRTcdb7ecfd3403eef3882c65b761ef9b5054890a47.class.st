Class {
	#name : #SRTcdb7ecfd3403eef3882c65b761ef9b5054890a47,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcdb7ecfd3403eef3882c65b761ef9b5054890a47 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CmNvbnRyYWN0IEh1cmlmeSB7Ci8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCnN0cmluZyBwdWJsaWMgbmFtZSA9ICJIdXJpZnkgVG9rZW4iOyAgICAgICAgICAgICAgICAgIC8vIFRva2VuIE5hbWUKc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiSFVSIjsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG9rZW4gc3ltYm9sCnVpbnQgcHVibGljIGRlY2ltYWxzID0gMTg7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRva2VuIERlY2ltYWwgUG9pbnQKYWRkcmVzcyBwdWJsaWMgb3duZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3duZXIgb2YgdGhlIFRva2VuIENvbnRyYWN0CnVpbnQyNTYgdG90YWxIdXJpZnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvdGFsIFRva2VuIGZvciB0aGUgQ3Jvd2RzYWxlCnVpbnQyNTYgdG90YWxUb2tlbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IHRvdGFsIHRva2VuIHN1cHBseS4KYm9vbCBwdWJsaWMgaGF1bHQgPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3Jvd2RzYWxlIFN0YXRlCiAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwovKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Ci8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgcmVmdW5kIGFtb3VudCAqLwogZXZlbnQgQnVybihhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CiBldmVudCBBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpOwovKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KZnVuY3Rpb24gSHVyaWZ5ICgKICBhZGRyZXNzIF9odXJjbGFuCiAgKSBwdWJsaWMgewogICBvd25lciA9IG1zZy5zZW5kZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3NpZ25pbmcgb3duZXIgYWRkcmVzcy4KICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAyMTI1MDAwMDAgKiAoMTAgKiogZGVjaW1hbHMpOyAgICAgICAgICAgIC8vIEFzc2lnbmluZyBUb3RhbCBUb2tlbiBiYWxhbmNlIHRvIG93bmVyCiAgIHRvdGFsSHVyaWZ5ID0gMjczMTI1MDAwICogKDEwICoqIGRlY2ltYWxzKTsKICAgYmFsYW5jZXNbX2h1cmNsYW5dID0gc2FmZUFkZChiYWxhbmNlc1tfaHVyY2xhbl0sIDUzMTI1MDAwICogKDEwICoqIGRlY2ltYWxzKSk7Cn0KZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSBzaXplICsgNCkgOwogICBfOwp9Cm1vZGlmaWVyIG9ubHlvd25lciB7CiAgcmVxdWlyZSAob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgXzsKfQovLy9Abm90aWNlIEFsdGVyIHRoZSBUb3RhbCBTdXBwbHkuCmZ1bmN0aW9uIHRva2Vuc3VwKHVpbnQyNTYgX3ZhbHVlKSBvbmx5b3duZXIgcHVibGljewogIHRvdGFsSHVyaWZ5ID0gc2FmZUFkZCh0b3RhbEh1cmlmeSwgX3ZhbHVlICogKDEwICoqIGRlY2ltYWxzKSk7CiAgYmFsYW5jZXNbb3duZXJdID0gc2FmZUFkZChiYWxhbmNlc1tvd25lcl0sIF92YWx1ZSAqICgxMCAqKiBkZWNpbWFscykpOwp9Ci8vL0Bub3RpY2UgVHJhbnNmZXIgdG9rZW5zIGJhc2VkIG9uIHR5cGUKZnVuY3Rpb24gaHVyaWZ5bWludCggYWRkcmVzcyBfY2xpZW50LCB1aW50IF92YWx1ZSwgdWludCBfdHlwZSkgb25seW93bmVyIHB1YmxpYyB7CiAgdWludCBudW1IdXI7CiAgcmVxdWlyZSh0b3RhbFRva2VuIDw9IHRvdGFsSHVyaWZ5KTsKICBpZihfdHlwZSA9PSAxKXsKICAgICAgbnVtSHVyID0gX3ZhbHVlICogNjAwMCAqICgxMCAqKiBkZWNpbWFscyk7CiAgfQogIGVsc2UgaWYgKF90eXBlID09IDIpewogICAgICBudW1IdXIgPSBfdmFsdWUgKiA1MDAwICogKDEwICoqIGRlY2ltYWxzKTsKICB9CiAgYmFsYW5jZXNbb3duZXJdID0gc2FmZVN1YihiYWxhbmNlc1tvd25lcl0sIG51bUh1cik7CiAgYmFsYW5jZXNbX2NsaWVudF0gPSBzYWZlQWRkKGJhbGFuY2VzW19jbGllbnRdLCBudW1IdXIpOwogIHRvdGFsVG9rZW4gPSBzYWZlQWRkKHRvdGFsVG9rZW4sIG51bUh1cik7CiAgVHJhbnNmZXIob3duZXIsIF9jbGllbnQsIG51bUh1cik7Cn0KLy8vQG5vdGljZSBUcmFuc2ZlciB0b2tlbiB3aXRoIG9ubHkgdmFsdWUKZnVuY3Rpb24gaHVybWludCggYWRkcmVzcyBfY2xpZW50LCB1aW50MjU2IF92YWx1ZSkgb25seW93bmVyIHB1YmxpYyB7CiAgcmVxdWlyZSh0b3RhbFRva2VuIDw9IHRvdGFsSHVyaWZ5KTsKICB1aW50MjU2IG51bUh1ciA9IF92YWx1ZSAqICggMTAgKiogZGVjaW1hbHMpOwogIGJhbGFuY2VzW293bmVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbb3duZXJdLCBudW1IdXIpOwogIGJhbGFuY2VzW19jbGllbnRdID0gc2FmZUFkZChiYWxhbmNlc1tfY2xpZW50XSwgbnVtSHVyKTsKICB0b3RhbFRva2VuID0gc2FmZUFkZCh0b3RhbFRva2VuLCBudW1IdXIpOwogIFRyYW5zZmVyKG93bmVyLCBfY2xpZW50LCBudW1IdXIpOwp9Ci8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLgovL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUgZ29lcyBvbiwgeW91IG5lZWQgdG8gY2hlY2sgcmVxdWlyZWl0IGRvZXNuJ3Qgd3JhcC4KLy9SZXBsYWNlIHRoZSBpZiB3aXRoIHRoaXMgb25lIGluc3RlYWQuCmZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSghaGF1bHQpOwogICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dIDwgX3ZhbHVlIHx8IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB7CiAgICAgICAgICAvLyBCYWxhbmNlIG9yIGFsbG93YW5jZSB0b28gbG93CiAgICAgICAgICByZXZlcnQoKTsKICAgICAgfQogICAgICByZXF1aXJlKCFoYXVsdCk7CiAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLF92YWx1ZSk7CiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSxfdmFsdWUpOwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKfQovLy8gQGRldiBTZXRzIGFwcHJvdmVkIGFtb3VudCBvZiB0b2tlbnMgZm9yIHNwZW5kZXIuIFJldHVybnMgc3VjY2Vzcy4KLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIGFsbG93ZWQgYWNjb3VudC4KLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIGFwcHJvdmVkIHRva2Vucy4KLy8vIEByZXR1cm4gUmV0dXJucyBzdWNjZXNzIG9mIGZ1bmN0aW9uIGNhbGwuCmZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICBwdWJsaWMKICAgIHJldHVybnMgKGJvb2wpCnsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKfQovLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiBhbGxvd2VkIHRva2VucyBmb3IgZ2l2ZW4gYWRkcmVzcy4KLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIHNwZW5kZXIuCi8vLyBAcmV0dXJuIFJldHVybnMgcmVtYWluaW5nIGFsbG93YW5jZSBmb3Igc3BlbmRlci4KZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKQogICAgY29uc3RhbnQKICAgIHB1YmxpYwogICAgcmV0dXJucyAodWludDI1NikKewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07Cn0KLy8vIEBub3RpY2UgUmV0dXJucyBiYWxhbmNlIG9mIEhVUiBUb2tlbnMuCi8vLyBAcGFyYW0gX2Zyb20gQmFsYW5jZSBmb3IgQWRkcmVzcy4KZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2Zyb20pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19mcm9tXTsKICB9CgovLy9Abm90aWNlIFJldHVybnMgdGhlIFRvdGFsIE51bWJlciBvZiBIVVIgVG9rZW5zLgpmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgU3VwcGx5KXsKICByZXR1cm4gdG90YWxIdXJpZnk7Cn0KLy8vIEBub3RpY2UgUGF1c2UgdGhlIGNyb3dkc2FsZQpmdW5jdGlvbiBwYXVzZWFibGUoKSBwdWJsaWMgb25seW93bmVyIHsKICAgIGhhdWx0ID0gdHJ1ZTsKICB9Ci8vLyBAbm90aWNlIFVucGF1c2UgdGhlIGNyb3dkc2FsZQpmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlvd25lciB7CiAgICBoYXVsdCA9IGZhbHNlOwp9CgovLy8gQG5vdGljZSBSZW1vdmUgYF92YWx1ZWAgdG9rZW5zIGZyb20gdGhlIHN5c3RlbSBpcnJldmVyc2libHkKZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgb25seW93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgdG90YWxIdXJpZnkgPSBzYWZlU3ViKHRvdGFsSHVyaWZ5LCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKfQp9'.
	

]
