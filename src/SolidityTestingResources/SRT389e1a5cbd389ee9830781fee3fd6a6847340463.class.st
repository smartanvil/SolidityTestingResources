Class {
	#name : #SRT389e1a5cbd389ee9830781fee3fd6a6847340463,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT389e1a5cbd389ee9830781fee3fd6a6847340463 >> base64 [
	^ ''.
	

]
