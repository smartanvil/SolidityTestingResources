Class {
	#name : #SRT01b6f09b54d246670627a009a7dc85bd54354eed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT01b6f09b54d246670627a009a7dc85bd54354eed >> base64 [
	^ ''.
	

]
