Class {
	#name : #SRTfc44094c53832e8a3cea0e97600950c11f14fe5f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc44094c53832e8a3cea0e97600950c11f14fe5f >> base64 [
	^ ''.
	

]
