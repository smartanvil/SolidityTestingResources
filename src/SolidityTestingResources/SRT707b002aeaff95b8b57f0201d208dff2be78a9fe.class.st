Class {
	#name : #SRT707b002aeaff95b8b57f0201d208dff2be78a9fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT707b002aeaff95b8b57f0201d208dff2be78a9fe >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiApIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgKSB7CiAgICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2ICkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2ICkgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMCB7CgogICAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKICAgIGlzIHJlcGxhY2VkIHdpdGg6CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIFRoaXMgYXV0b21hdGljYWxseSBjcmVhdGVzIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgdG90YWxTdXBwbHkuCiAgICBUaGlzIGlzIG1vdmVkIHRvIHRoZSBiYXNlIGNvbnRyYWN0IHNpbmNlIHB1YmxpYyBnZXR0ZXIgZnVuY3Rpb25zIGFyZSBub3QKICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgZnVuY3Rpb24gYnkgdGhlIGNvbXBpbGVyLgogICAgKi8KICAgIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgU2FmZU1hdGggewoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHNlbmRlcidzIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYWxsb3dlZCB0aGlyZCBwYXJ0eSB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAvLy8gQHBhcmFtIF9mcm9tIEFkZHJlc3MgZnJvbSB3aGVyZSB0b2tlbnMgYXJlIHdpdGhkcmF3bi4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gd2hlcmUgdG9rZW5zIGFyZSBzZW50LgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLy8gQGRldiBTZXRzIGFwcHJvdmVkIGFtb3VudCBvZiB0b2tlbnMgZm9yIHNwZW5kZXIuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgQWRkcmVzcyBvZiBhbGxvd2VkIGFjY291bnQuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgYXBwcm92ZWQgdG9rZW5zLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiBhbGxvd2VkIHRva2VucyBmb3IgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgdG9rZW4gc3BlbmRlci4KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgcGVuZGluZ093bmVyOwoKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gU2FmZSB0cmFuc2ZlciBvZiBvd25lcnNoaXAgaW4gMiBzdGVwcy4gT25jZSBjYWxsZWQsIGEgbmV3T3duZXIgbmVlZHMgdG8gY2FsbCBjbGFpbU93bmVyc2hpcCgpIHRvIHByb3ZlIG93bmVyc2hpcC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgcGVuZGluZ093bmVyID0gbmV3T3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gY2xhaW1Pd25lcnNoaXAoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKSB7CiAgICAgICAgICAgIG93bmVyID0gcGVuZGluZ093bmVyOwogICAgICAgICAgICBwZW5kaW5nT3duZXIgPSAwOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgTXVsdGlPd25hYmxlIHsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIG93bmVyTWFwOwogICAgYWRkcmVzc1tdIHB1YmxpYyBvd25lcnM7CgogICAgZXZlbnQgT3duZXJBZGRlZChhZGRyZXNzIGluZGV4ZWQgX25ld093bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZlZChhZGRyZXNzIGluZGV4ZWQgX29sZE93bmVyKTsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShpc093bmVyKG1zZy5zZW5kZXIpKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIE11bHRpT3duYWJsZSgpIHsKICAgICAgICAvLyBBZGQgZGVmYXVsdCBvd25lcgogICAgICAgIGFkZHJlc3Mgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG93bmVyTWFwW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIG93bmVyQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBvd25lcnMubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzT3duZXIoYWRkcmVzcyBvd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gb3duZXJNYXBbb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3Mgb3duZXIpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmICghaXNPd25lcihvd25lcikgJiYgb3duZXIgIT0gMCkgewogICAgICAgICAgICBvd25lck1hcFtvd25lcl0gPSB0cnVlOwogICAgICAgICAgICBvd25lcnMucHVzaChvd25lcik7CgogICAgICAgICAgICBPd25lckFkZGVkKG93bmVyKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVPd25lcihhZGRyZXNzIG93bmVyKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoaXNPd25lcihvd25lcikpIHsKICAgICAgICAgICAgb3duZXJNYXBbb3duZXJdID0gZmFsc2U7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG93bmVycy5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChvd25lcnNbaV0gPT0gb3duZXIpIHsKICAgICAgICAgICAgICAgICAgICBvd25lcnNbaV0gPSBvd25lcnNbb3duZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIG93bmVycy5sZW5ndGggLT0gMTsKCiAgICAgICAgICAgIE93bmVyUmVtb3ZlZChvd25lcik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7CiAgICB9Cn0KCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewoKICAgIGJvb2wgcHVibGljIHBhdXNlZDsKCiAgICBtb2RpZmllciBpZk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlmUGF1c2VkIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgcGF1c2VkIHN0YXRlCiAgICBmdW5jdGlvbiBwYXVzZSgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcGF1c2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBDYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICBmdW5jdGlvbiByZXN1bWUoKSBleHRlcm5hbCBvbmx5T3duZXIgaWZQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQp9Cgpjb250cmFjdCBUb2tlblNwZW5kZXIgewogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgQ29tbW9uQnNUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBNdWx0aU93bmFibGUgewoKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICd2MC4xJzsKCiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwogICAgYWRkcmVzcyBwdWJsaWMgc2VsbGVyOyAgICAgLy8gVGhlIG1haW4gYWNjb3VudCB0aGF0IGhvbGRzIGFsbCB0b2tlbnMgYXQgdGhlIGJlZ2lubmluZy4KCiAgICB1aW50MjU2IHB1YmxpYyBzYWxlTGltaXQ7ICAvLyAoZTE4KSBIb3cgbWFueSB0b2tlbnMgY2FuIGJlIHNvbGQgaW4gdG90YWwgdGhyb3VnaCBhbGwgdGllcnMgb3IgdG9rZW5zYWxlcy4KICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGQ7IC8vIChlMTgpIE51bWJlciBvZiB0b2tlbnMgc29sZCB0aHJvdWdoIGFsbCB0aWVycyBvciB0b2tlbnNhbGVzLgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTYWxlczsgLy8gVG90YWwgbnVtYmVyIG9mIHNhbGUgKGluY2x1ZGluZyBleHRlcm5hbCBzYWxlcykgbWFkZSB0aHJvdWdoIGFsbCB0aWVycyBvciB0b2tlbnNhbGVzLgoKICAgIGJvb2wgcHVibGljIGxvY2tlZDsKCiAgICBldmVudCBTZWxsKGFkZHJlc3MgaW5kZXhlZCBfc2VsbGVyLCBhZGRyZXNzIGluZGV4ZWQgX2J1eWVyLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBTZWxsZXJDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb2xkU2VsbGVyLCBhZGRyZXNzIGluZGV4ZWQgX25ld1NlbGxlcik7CgogICAgZXZlbnQgTG9jaygpOwogICAgZXZlbnQgVW5sb2NrKCk7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgX2J1cm5lciwgdWludDI1NiBfdmFsdWUpOwoKICAgIG1vZGlmaWVyIG9ubHlVbmxvY2tlZCgpIHsKICAgICAgICBpZiAoIWlzT3duZXIobXNnLnNlbmRlcikgJiYgbG9ja2VkKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENvbW1vbkJzVG9rZW4oCiAgICAgICAgYWRkcmVzcyBfc2VsbGVyLAogICAgICAgIHN0cmluZyBfbmFtZSwKICAgICAgICBzdHJpbmcgX3N5bWJvbCwKICAgICAgICB1aW50MjU2IF90b3RhbFN1cHBseU5vRGVjaW1hbHMsCiAgICAgICAgdWludDI1NiBfc2FsZUxpbWl0Tm9EZWNpbWFscwogICAgKSBNdWx0aU93bmFibGUoKSB7CgogICAgICAgIC8vIExvY2sgdGhlIHRyYW5zZmVyIGZ1bmN0aW9uIGR1cmluZyB0aGUgcHJlc2FsZS9jcm93ZHNhbGUgdG8gcHJldmVudCBzcGVjdWxhdGlvbnMuCiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKCiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgc2VsbGVyID0gX3NlbGxlcjsKCiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHlOb0RlY2ltYWxzICogMWUxODsKICAgICAgICBzYWxlTGltaXQgPSBfc2FsZUxpbWl0Tm9EZWNpbWFscyAqIDFlMTg7CgogICAgICAgIGJhbGFuY2VzW3NlbGxlcl0gPSB0b3RhbFN1cHBseTsKICAgICAgICBUcmFuc2ZlcigweDAsIHNlbGxlciwgdG90YWxTdXBwbHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVNlbGxlcihhZGRyZXNzIG5ld1NlbGxlcikgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShuZXdTZWxsZXIgIT0gMHgwICYmIHNlbGxlciAhPSBuZXdTZWxsZXIpOwoKICAgICAgICBhZGRyZXNzIG9sZFNlbGxlciA9IHNlbGxlcjsKICAgICAgICB1aW50MjU2IHVuc29sZFRva2VucyA9IGJhbGFuY2VzW29sZFNlbGxlcl07CiAgICAgICAgYmFsYW5jZXNbb2xkU2VsbGVyXSA9IDA7CiAgICAgICAgYmFsYW5jZXNbbmV3U2VsbGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbbmV3U2VsbGVyXSwgdW5zb2xkVG9rZW5zKTsKICAgICAgICBUcmFuc2ZlcihvbGRTZWxsZXIsIG5ld1NlbGxlciwgdW5zb2xkVG9rZW5zKTsKCiAgICAgICAgc2VsbGVyID0gbmV3U2VsbGVyOwogICAgICAgIFNlbGxlckNoYW5nZWQob2xkU2VsbGVyLCBuZXdTZWxsZXIpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbGxOb0RlY2ltYWxzKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc2VsbChfdG8sIF92YWx1ZSAqIDFlMTgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbGwoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKCiAgICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBhcmUgbm90IG91dCBvZiBsaW1pdCBhbmQgc3RpbGwgY2FuIHNlbGwgdG9rZW5zOgogICAgICAgIGlmIChzYWxlTGltaXQgPiAwKSByZXF1aXJlKHNhZmVTdWIoc2FsZUxpbWl0LCBzYWZlQWRkKHRva2Vuc1NvbGQsIF92YWx1ZSkpID49IDApOwoKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW3NlbGxlcl0pOwoKICAgICAgICBiYWxhbmNlc1tzZWxsZXJdID0gc2FmZVN1YihiYWxhbmNlc1tzZWxsZXJdLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoc2VsbGVyLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHRva2Vuc1NvbGQgPSBzYWZlQWRkKHRva2Vuc1NvbGQsIF92YWx1ZSk7CiAgICAgICAgdG90YWxTYWxlcyA9IHNhZmVBZGQodG90YWxTYWxlcywgMSk7CiAgICAgICAgU2VsbChzZWxsZXIsIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5VW5sb2NrZWQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlVbmxvY2tlZCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2NrKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKICAgICAgICBMb2NrKCk7CiAgICB9CgogICAgZnVuY3Rpb24gdW5sb2NrKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgbG9ja2VkID0gZmFsc2U7CiAgICAgICAgVW5sb2NrKCk7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpIDsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBfdmFsdWUpOwogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb21tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIFRva2VuU3BlbmRlciBzcGVuZGVyID0gVG9rZW5TcGVuZGVyKF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgQ29tbW9uQnNQcmVzYWxlIGlzIFNhZmVNYXRoLCBPd25hYmxlLCBQYXVzYWJsZSB7CgogICAgZW51bSBDdXJyZW5jeSB7IEJUQywgTFRDLCBaRUMsIERBU0gsIFdBVkVTLCBVU0QsIEVVUiB9CgogICAgLy8gVE9ETyByZW5hbWUgdG8gQnV5ZXI/CgogICAgc3RydWN0IEJhY2tlciB7CiAgICAgICAgdWludDI1NiB3ZWlSZWNlaXZlZDsgLy8gQW1vdW50IG9mIHdlaSBnaXZlbiBieSBiYWNrZXIKICAgICAgICB1aW50MjU2IHRva2Vuc1NlbnQ7ICAvLyBBbW91bnQgb2YgdG9rZW5zIHJlY2VpdmVkIGluIHJldHVybiB0byB0aGUgZ2l2ZW4gYW1vdW50IG9mIEVUSC4KICAgIH0KCiAgICAvLyBUT0RPIHJlbmFtZSB0byBidXllcnM/CgogICAgLy8gKGJ1eWVyX2V0aF9hZGRyZXNzIC0+IHN0cnVjdCkKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBCYWNrZXIpIHB1YmxpYyBiYWNrZXJzOwoKICAgIC8vIGN1cnJlbmN5X2NvZGUgPT4gKHR4X2hhc2ggPT4gdG9rZW5zKQogICAgbWFwcGluZyh1aW50OCA9PiBtYXBwaW5nKGJ5dGVzMzIgPT4gdWludDI1NikpIHB1YmxpYyBleHRlcm5hbFR4czsKCiAgICBDb21tb25Cc1Rva2VuIHB1YmxpYyB0b2tlbjsgLy8gVG9rZW4gY29udHJhY3QgcmVmZXJlbmNlLgogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7IC8vIEFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgRVRIIHJhaXNlZCBkdXJpbmcgdGhpcyBjcm93ZHNhbGUuCiAgICBhZGRyZXNzIHB1YmxpYyBub3RpZmllcjsgICAgLy8gQWRkcmVzcyB0aGF0IGNhbiB0aGlzIGNyb3dkc2FsZSBhYm91dCBjaGFuZ2VkIGV4dGVybmFsIGNvbmRpdGlvbnMuCgogICAgLy8gVE9ETyBpbXBsZW1lbnQKICAgIHVpbnQyNTYgcHVibGljIG1pbldlaVRvQWNjZXB0ID0gMC4wMDAxIGV0aGVyOwoKICAgIHVpbnQyNTYgcHVibGljIG1heENhcFdlaSA9IDAuMDEgZXRoZXI7CiAgICB1aW50IHB1YmxpYyB0b2tlbnNQZXJXZWkgPSA0MDAgKiAxLjI1OyAvLyBPcmRpbmFyeSBwcmljZTogMSBFVEggPSA0MDAgdG9rZW5zLiBQbHVzIDI1JSBib251cyBkdXJpbmcgcHJlc2FsZS4KCiAgICB1aW50IHB1YmxpYyBzdGFydFRpbWU7IC8vIFdpbGwgYmUgc2V0dXAgb25jZSBpbiBhIGNvbnN0cnVjdG9yIGZyb20gbm93KCkuCiAgICB1aW50IHB1YmxpYyBlbmRUaW1lID0gMTUyMDYwMDQwMDsgLy8gMjAxOC0wMy0wOVQxMzowMDowMFoKCiAgICAvLyBTdGF0cyBmb3IgY3VycmVudCBjcm93ZHNhbGUKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEluV2VpICAgICAgICAgPSAwOyAvLyBHcmFuZCB0b3RhbCBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsVG9rZW5zU29sZCAgICA9IDA7IC8vIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMgc29sZCBkdXJpbmcgdGhpcyBjcm93ZHNhbGUuCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aFNhbGVzICAgICAgPSAwOyAvLyBUb3RhbCBhbW91bnQgb2YgRVRIIGNvbnRyaWJ1dGlvbnMgZHVyaW5nIHRoaXMgY3Jvd2RzYWxlLgogICAgdWludDI1NiBwdWJsaWMgdG90YWxFeHRlcm5hbFNhbGVzID0gMDsgLy8gVG90YWwgYW1vdW50IG9mIGV4dGVybmFsIGNvbnRyaWJ1dGlvbnMgKEJUQywgTFRDLCBVU0QsIGV0Yy4pIGR1cmluZyB0aGlzIGNyb3dkc2FsZS4KICAgIHVpbnQyNTYgcHVibGljIHdlaVJlY2VpdmVkICAgICAgICA9IDA7IC8vIFRvdGFsIGFtb3VudCBvZiB3ZWkgcmVjZWl2ZWQgZHVyaW5nIHRoaXMgY3Jvd2RzYWxlIHNtYXJ0IGNvbnRyYWN0LgoKICAgIHVpbnQgcHVibGljIGZpbmFsaXplZFRpbWUgPSAwOyAvLyBVbml4IHRpbWVzdGFtcCB3aGVuIGZpbmFsaXplKCkgd2FzIGNhbGxlZC4KCiAgICBib29sIHB1YmxpYyBzYWxlRW5hYmxlZCA9IHRydWU7ICAgLy8gaWYgZmFsc2UsIHRoZW4gY29udHJhY3Qgd2lsbCBub3Qgc2VsbCB0b2tlbnMgb24gcGF5bWVudCByZWNlaXZlZAoKICAgIGV2ZW50IEJlbmVmaWNpYXJ5Q2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgX29sZEFkZHJlc3MsIGFkZHJlc3MgaW5kZXhlZCBfbmV3QWRkcmVzcyk7CiAgICBldmVudCBOb3RpZmllckNoYW5nZWQoYWRkcmVzcyBpbmRleGVkIF9vbGRBZGRyZXNzLCBhZGRyZXNzIGluZGV4ZWQgX25ld0FkZHJlc3MpOwoKICAgIGV2ZW50IEV0aFJlY2VpdmVkKGFkZHJlc3MgaW5kZXhlZCBfYnV5ZXIsIHVpbnQyNTYgX2Ftb3VudFdlaSk7CiAgICBldmVudCBFeHRlcm5hbFNhbGUoQ3VycmVuY3kgX2N1cnJlbmN5LCBieXRlczMyIF90eElkU2hhMywgYWRkcmVzcyBpbmRleGVkIF9idXllciwgdWludDI1NiBfYW1vdW50V2VpLCB1aW50MjU2IF90b2tlbnNFMTgpOwoKICAgIG1vZGlmaWVyIHJlc3BlY3RUaW1lRnJhbWUoKSB7CiAgICAgICAgcmVxdWlyZShpc1NhbGVPbigpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNhbk5vdGlmeSgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBub3RpZmllcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBDb21tb25Cc1ByZXNhbGUoYWRkcmVzcyBfdG9rZW4sIGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSB7CiAgICAgICAgdG9rZW4gPSBDb21tb25Cc1Rva2VuKF90b2tlbik7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG5vdGlmaWVyID0gb3duZXI7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CiAgICAgICAgc3RhcnRUaW1lID0gbm93OwogICAgfQoKICAgIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIG1vY2sgY3VycmVudCB0aW1lLgogICAgZnVuY3Rpb24gZ2V0Tm93KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbm93OwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNhbGVFbmFibGVkKGJvb2wgX2VuYWJsZWQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHNhbGVFbmFibGVkID0gX2VuYWJsZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QmVuZWZpY2lhcnkoYWRkcmVzcyBfYmVuZWZpY2lhcnkpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIEJlbmVmaWNpYXJ5Q2hhbmdlZChiZW5lZmljaWFyeSwgX2JlbmVmaWNpYXJ5KTsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXROb3RpZmllcihhZGRyZXNzIF9ub3RpZmllcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgTm90aWZpZXJDaGFuZ2VkKG5vdGlmaWVyLCBfbm90aWZpZXIpOwogICAgICAgIG5vdGlmaWVyID0gX25vdGlmaWVyOwogICAgfQoKICAgIC8qCiAgICAgKiBUaGUgZmFsbGJhY2sgZnVuY3Rpb24gY29ycmVzcG9uZHMgdG8gYSBkb25hdGlvbiBpbiBFVEgKICAgICAqLwogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgaWYgKHNhbGVFbmFibGVkKSBzZWxsVG9rZW5zRm9yRXRoKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2VsbFRva2Vuc0ZvckV0aChhZGRyZXNzIF9idXllciwgdWludDI1NiBfYW1vdW50V2VpKSBpbnRlcm5hbCBpZk5vdFBhdXNlZCByZXNwZWN0VGltZUZyYW1lIHsKCiAgICAgICAgcmVxdWlyZShfYW1vdW50V2VpID49IG1pbldlaVRvQWNjZXB0KTsKCiAgICAgICAgdG90YWxJbldlaSA9IHNhZmVBZGQodG90YWxJbldlaSwgX2Ftb3VudFdlaSk7CiAgICAgICAgd2VpUmVjZWl2ZWQgPSBzYWZlQWRkKHdlaVJlY2VpdmVkLCBfYW1vdW50V2VpKTsKICAgICAgICByZXF1aXJlKHRvdGFsSW5XZWkgPD0gbWF4Q2FwV2VpKTsgLy8gSWYgbWF4IGNhcCByZWFjaGVkLgoKICAgICAgICB1aW50MjU2IHRva2Vuc0UxOCA9IHdlaVRvVG9rZW5zKF9hbW91bnRXZWkpOwogICAgICAgIHJlcXVpcmUodG9rZW4uc2VsbChfYnV5ZXIsIHRva2Vuc0UxOCkpOyAvLyBUcmFuc2ZlciB0b2tlbnMgdG8gYnV5ZXIuCiAgICAgICAgdG90YWxUb2tlbnNTb2xkID0gc2FmZUFkZCh0b3RhbFRva2Vuc1NvbGQsIHRva2Vuc0UxOCk7CiAgICAgICAgdG90YWxFdGhTYWxlcysrOwoKICAgICAgICBCYWNrZXIgYmFja2VyID0gYmFja2Vyc1tfYnV5ZXJdOwogICAgICAgIGJhY2tlci50b2tlbnNTZW50ID0gc2FmZUFkZChiYWNrZXIudG9rZW5zU2VudCwgdG9rZW5zRTE4KTsKICAgICAgICBiYWNrZXIud2VpUmVjZWl2ZWQgPSBzYWZlQWRkKGJhY2tlci53ZWlSZWNlaXZlZCwgX2Ftb3VudFdlaSk7ICAvLyBVcGRhdGUgdGhlIHRvdGFsIHdlaSBjb2xsZWN0ZWQgZHVyaW5nIHRoZSBjcm93ZGZ1bmRpbmcgZm9yIHRoaXMgYmFja2VyCgogICAgICAgIEV0aFJlY2VpdmVkKF9idXllciwgX2Ftb3VudFdlaSk7CiAgICB9CgogICAgLy8gQ2FsYyBob3cgbXVjaCB0b2tlbnMgeW91IGNhbiBidXkgYXQgY3VycmVudCB0aW1lLgogICAgZnVuY3Rpb24gd2VpVG9Ub2tlbnModWludDI1NiBfYW1vdW50V2VpKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzYWZlTXVsKF9hbW91bnRXZWksIHRva2Vuc1BlcldlaSk7CiAgICB9CgogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBCZWdpbiBvZiBleHRlcm5hbCBzYWxlcy4KCiAgICBmdW5jdGlvbiBleHRlcm5hbFNhbGVzKAogICAgICAgIHVpbnQ4W10gX2N1cnJlbmNpZXMsCiAgICAgICAgYnl0ZXMzMltdIF90eElkU2hhMywKICAgICAgICBhZGRyZXNzW10gX2J1eWVycywKICAgICAgICB1aW50MjU2W10gX2Ftb3VudHNXZWksCiAgICAgICAgdWludDI1NltdIF90b2tlbnNFMTgKICAgICkgcHVibGljIGlmTm90UGF1c2VkIGNhbk5vdGlmeSB7CgogICAgICAgIHJlcXVpcmUoX2N1cnJlbmNpZXMubGVuZ3RoID4gMCk7CiAgICAgICAgcmVxdWlyZShfY3VycmVuY2llcy5sZW5ndGggPT0gX3R4SWRTaGEzLmxlbmd0aCk7CiAgICAgICAgcmVxdWlyZShfY3VycmVuY2llcy5sZW5ndGggPT0gX2J1eWVycy5sZW5ndGgpOwogICAgICAgIHJlcXVpcmUoX2N1cnJlbmNpZXMubGVuZ3RoID09IF9hbW91bnRzV2VpLmxlbmd0aCk7CiAgICAgICAgcmVxdWlyZShfY3VycmVuY2llcy5sZW5ndGggPT0gX3Rva2Vuc0UxOC5sZW5ndGgpOwoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfdHhJZFNoYTMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgX2V4dGVybmFsU2FsZVNoYTMoCiAgICAgICAgICAgICAgICBDdXJyZW5jeShfY3VycmVuY2llc1tpXSksCiAgICAgICAgICAgICAgICBfdHhJZFNoYTNbaV0sCiAgICAgICAgICAgICAgICBfYnV5ZXJzW2ldLAogICAgICAgICAgICAgICAgX2Ftb3VudHNXZWlbaV0sCiAgICAgICAgICAgICAgICBfdG9rZW5zRTE4W2ldCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIF9leHRlcm5hbFNhbGVTaGEzKAogICAgICAgIEN1cnJlbmN5IF9jdXJyZW5jeSwKICAgICAgICBieXRlczMyIF90eElkU2hhMywgLy8gVG8gZ2V0IGJ5dGVzMzIgdXNlIGtlY2NhazI1Nih0eElkKSBPUiBzaGEzKHR4SWQpCiAgICAgICAgYWRkcmVzcyBfYnV5ZXIsCiAgICAgICAgdWludDI1NiBfYW1vdW50V2VpLAogICAgICAgIHVpbnQyNTYgX3Rva2Vuc0UxOAogICAgKSBpbnRlcm5hbCB7CgogICAgICAgIHJlcXVpcmUoX2J1eWVyID4gMCAmJiBfYW1vdW50V2VpID4gMCAmJiBfdG9rZW5zRTE4ID4gMCk7CgogICAgICAgIHZhciB0eHNCeUN1ciA9IGV4dGVybmFsVHhzW3VpbnQ4KF9jdXJyZW5jeSldOwoKICAgICAgICAvLyBJZiB0aGlzIGZvcmVpZ24gdHJhbnNhY3Rpb24gaGFzIGJlZW4gYWxyZWFkeSBwcm9jZXNzZWQgaW4gdGhpcyBjb250cmFjdC4KICAgICAgICByZXF1aXJlKHR4c0J5Q3VyW190eElkU2hhM10gPT0gMCk7CgogICAgICAgIHRvdGFsSW5XZWkgPSBzYWZlQWRkKHRvdGFsSW5XZWksIF9hbW91bnRXZWkpOwogICAgICAgIHJlcXVpcmUodG90YWxJbldlaSA8PSBtYXhDYXBXZWkpOyAvLyBNYXggY2FwIHNob3VsZCBub3QgYmUgcmVhY2hlZCB5ZXQuCgogICAgICAgIHJlcXVpcmUodG9rZW4uc2VsbChfYnV5ZXIsIF90b2tlbnNFMTgpKTsgLy8gVHJhbnNmZXIgdG9rZW5zIHRvIGJ1eWVyLgogICAgICAgIHRvdGFsVG9rZW5zU29sZCA9IHNhZmVBZGQodG90YWxUb2tlbnNTb2xkLCBfdG9rZW5zRTE4KTsKICAgICAgICB0b3RhbEV4dGVybmFsU2FsZXMrKzsKCiAgICAgICAgdHhzQnlDdXJbX3R4SWRTaGEzXSA9IF90b2tlbnNFMTg7CiAgICAgICAgRXh0ZXJuYWxTYWxlKF9jdXJyZW5jeSwgX3R4SWRTaGEzLCBfYnV5ZXIsIF9hbW91bnRXZWksIF90b2tlbnNFMTgpOwogICAgfQoKICAgIC8vIEdldCBpZCBvZiBjdXJyZW5jeSBlbnVtLiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGZ1bmN0aW9uIGJ0Y0lkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgcmV0dXJuIHVpbnQ4KEN1cnJlbmN5LkJUQyk7CiAgICB9CgogICAgZnVuY3Rpb24gbHRjSWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICByZXR1cm4gdWludDgoQ3VycmVuY3kuTFRDKTsKICAgIH0KCiAgICBmdW5jdGlvbiB6ZWNJZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiB1aW50OChDdXJyZW5jeS5aRUMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRhc2hJZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiB1aW50OChDdXJyZW5jeS5EQVNIKTsKICAgIH0KCiAgICBmdW5jdGlvbiB3YXZlc0lkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgcmV0dXJuIHVpbnQ4KEN1cnJlbmN5LldBVkVTKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1c2RJZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiB1aW50OChDdXJyZW5jeS5VU0QpOwogICAgfQoKICAgIGZ1bmN0aW9uIGV1cklkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgcmV0dXJuIHVpbnQ4KEN1cnJlbmN5LkVVUik7CiAgICB9CgogICAgLy8gR2V0IHRva2VuIGNvdW50IGJ5IHRyYW5zYWN0aW9uIGlkLiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gX3Rva2Vuc0J5VHgoQ3VycmVuY3kgX2N1cnJlbmN5LCBzdHJpbmcgX3R4SWQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG9rZW5zQnlUeCh1aW50OChfY3VycmVuY3kpLCBfdHhJZCk7CiAgICB9CgogICAgZnVuY3Rpb24gdG9rZW5zQnlUeCh1aW50OCBfY3VycmVuY3ksIHN0cmluZyBfdHhJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gZXh0ZXJuYWxUeHNbX2N1cnJlbmN5XVtrZWNjYWsyNTYoX3R4SWQpXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2tlbnNCeUJ0Y1R4KHN0cmluZyBfdHhJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3Rva2Vuc0J5VHgoQ3VycmVuY3kuQlRDLCBfdHhJZCk7CiAgICB9CgogICAgZnVuY3Rpb24gdG9rZW5zQnlMdGNUeChzdHJpbmcgX3R4SWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b2tlbnNCeVR4KEN1cnJlbmN5LkxUQywgX3R4SWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRva2Vuc0J5WmVjVHgoc3RyaW5nIF90eElkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG9rZW5zQnlUeChDdXJyZW5jeS5aRUMsIF90eElkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2tlbnNCeURhc2hUeChzdHJpbmcgX3R4SWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b2tlbnNCeVR4KEN1cnJlbmN5LkRBU0gsIF90eElkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2tlbnNCeVdhdmVzVHgoc3RyaW5nIF90eElkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG9rZW5zQnlUeChDdXJyZW5jeS5XQVZFUywgX3R4SWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRva2Vuc0J5VXNkVHgoc3RyaW5nIF90eElkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG9rZW5zQnlUeChDdXJyZW5jeS5VU0QsIF90eElkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2tlbnNCeUV1clR4KHN0cmluZyBfdHhJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3Rva2Vuc0J5VHgoQ3VycmVuY3kuRVVSLCBfdHhJZCk7CiAgICB9CgogICAgLy8gRW5kIG9mIGV4dGVybmFsIHNhbGVzLgogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gdG90YWxTYWxlcygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNhZmVBZGQodG90YWxFdGhTYWxlcywgdG90YWxFeHRlcm5hbFNhbGVzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc01heENhcFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b3RhbEluV2VpID49IG1heENhcFdlaTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1NhbGVPbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBfbm93ID0gZ2V0Tm93KCk7CiAgICAgICAgcmV0dXJuIHN0YXJ0VGltZSA8PSBfbm93ICYmIF9ub3cgPD0gZW5kVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1NhbGVPdmVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZ2V0Tm93KCkgPiBlbmRUaW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzRmluYWxpemVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZmluYWxpemVkVGltZSA+IDA7CiAgICB9CgogICAgLyoKICAgICAqIEZpbmFsaXplIHRoZSBjcm93ZHNhbGUuIFJhaXNlZCBtb25leSBjYW4gYmUgc2VudCB0byBiZW5lZmljaWFyeSBvbmx5IGlmIGNyb3dkc2FsZSBoaXQgZW5kIHRpbWUgb3IgbWF4IGNhcC4KICAgICAqLwogICAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgLy8gQ2Fubm90IGZpbmFsaXNlIGJlZm9yZSBlbmQgZGF5IG9mIGNyb3dkc2FsZSB1bnRpbCBtYXggY2FwIGlzIHJlYWNoZWQuCiAgICAgICAgcmVxdWlyZShpc01heENhcFJlYWNoZWQoKSB8fCBpc1NhbGVPdmVyKCkpOwoKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwoKICAgICAgICBmaW5hbGl6ZWRUaW1lID0gZ2V0Tm93KCk7CiAgICB9Cn0KCmNvbnRyYWN0IFhQcmVzYWxlIGlzIENvbW1vbkJzUHJlc2FsZSB7CgogICAgZnVuY3Rpb24gWFByZXNhbGUoKSBwdWJsaWMgQ29tbW9uQnNQcmVzYWxlKAogICAgICAgIDB4NjI1NjE1ZENiMWIzM0M0YzVGMjhmNDg2MDllNDZCMDcyN2NmQjQ1MSwgLy8gVE9ETyBhZGRyZXNzIF90b2tlbgogICAgICAgIDB4RTNFOUY2NkU1RWJlOUU5NjE2NjJkYTM0RkY5YUVBOTVjNjc5NWZkMCAgLy8gVE9ETyBhZGRyZXNzIF9iZW5lZmljaWFyeQogICAgKSB7fQp9'.
	

]
