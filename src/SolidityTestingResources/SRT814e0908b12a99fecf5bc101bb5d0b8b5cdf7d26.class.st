Class {
	#name : #SRT814e0908b12a99fecf5bc101bb5d0b8b5cdf7d26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT814e0908b12a99fecf5bc101bb5d0b8b5cdf7d26 >> base64 [
	^ ''.
	

]
