Class {
	#name : #SRTF61b69A1961Cd0d7E0422F3E8A7aA09d1bAd01F8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF61b69A1961Cd0d7E0422F3E8A7aA09d1bAd01F8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBQZXJtaXNzaW9uR3JvdXBzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKICAgIGFkZHJlc3MgcHVibGljIHBlbmRpbmdBZG1pbjsKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgaW50ZXJuYWwgb3BlcmF0b3JzOwogICAgbWFwcGluZyhhZGRyZXNzPT5ib29sKSBpbnRlcm5hbCBhbGVydGVyczsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBvcGVyYXRvcnNHcm91cDsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBhbGVydGVyc0dyb3VwOwogICAgdWludCBjb25zdGFudCBpbnRlcm5hbCBNQVhfR1JPVVBfU0laRSA9IDUwOwoKICAgIGZ1bmN0aW9uIFBlcm1pc3Npb25Hcm91cHMoKSBwdWJsaWMgewogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRvcigpIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWxlcnRlcigpIHsKICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE9wZXJhdG9ycyAoKSBleHRlcm5hbCB2aWV3IHJldHVybnMoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIG9wZXJhdG9yc0dyb3VwOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFsZXJ0ZXJzICgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gYWxlcnRlcnNHcm91cDsKICAgIH0KCiAgICBldmVudCBUcmFuc2ZlckFkbWluUGVuZGluZyhhZGRyZXNzIHBlbmRpbmdBZG1pbik7CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzLgogICAgICogQHBhcmFtIG5ld0FkbWluIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG5ld0FkbWluICE9IGFkZHJlc3MoMCkpOwogICAgICAgIFRyYW5zZmVyQWRtaW5QZW5kaW5nKHBlbmRpbmdBZG1pbik7CiAgICAgICAgcGVuZGluZ0FkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIGFkbWluIGluIG9uZSB0eC4gVXNlZnVsIGluaXRpYWwgZGVwbG95bWVudC4KICAgICAqIEBwYXJhbSBuZXdBZG1pbiBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyQWRtaW5RdWlja2x5KGFkZHJlc3MgbmV3QWRtaW4pIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUobmV3QWRtaW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgVHJhbnNmZXJBZG1pblBlbmRpbmcobmV3QWRtaW4pOwogICAgICAgIEFkbWluQ2xhaW1lZChuZXdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgZXZlbnQgQWRtaW5DbGFpbWVkKCBhZGRyZXNzIG5ld0FkbWluLCBhZGRyZXNzIHByZXZpb3VzQWRtaW4pOwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzIHRvIGZpbmFsaXplIHRoZSBjaGFuZ2UgYWRtaW4gcHJvY2Vzcy4KICAgICAqLwogICAgZnVuY3Rpb24gY2xhaW1BZG1pbigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShwZW5kaW5nQWRtaW4gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgQWRtaW5DbGFpbWVkKHBlbmRpbmdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gcGVuZGluZ0FkbWluOwogICAgICAgIHBlbmRpbmdBZG1pbiA9IGFkZHJlc3MoMCk7CiAgICB9CgogICAgZXZlbnQgQWxlcnRlckFkZGVkIChhZGRyZXNzIG5ld0FsZXJ0ZXIsIGJvb2wgaXNBZGQpOwoKICAgIGZ1bmN0aW9uIGFkZEFsZXJ0ZXIoYWRkcmVzcyBuZXdBbGVydGVyKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFhbGVydGVyc1tuZXdBbGVydGVyXSk7IC8vIHByZXZlbnQgZHVwbGljYXRlcy4KICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzR3JvdXAubGVuZ3RoIDwgTUFYX0dST1VQX1NJWkUpOwoKICAgICAgICBBbGVydGVyQWRkZWQobmV3QWxlcnRlciwgdHJ1ZSk7CiAgICAgICAgYWxlcnRlcnNbbmV3QWxlcnRlcl0gPSB0cnVlOwogICAgICAgIGFsZXJ0ZXJzR3JvdXAucHVzaChuZXdBbGVydGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVBbGVydGVyIChhZGRyZXNzIGFsZXJ0ZXIpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoYWxlcnRlcnNbYWxlcnRlcl0pOwogICAgICAgIGFsZXJ0ZXJzW2FsZXJ0ZXJdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsZXJ0ZXJzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGFsZXJ0ZXJzR3JvdXBbaV0gPT0gYWxlcnRlcikgewogICAgICAgICAgICAgICAgYWxlcnRlcnNHcm91cFtpXSA9IGFsZXJ0ZXJzR3JvdXBbYWxlcnRlcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGFsZXJ0ZXJzR3JvdXAubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBBbGVydGVyQWRkZWQoYWxlcnRlciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZXZlbnQgT3BlcmF0b3JBZGRlZChhZGRyZXNzIG5ld09wZXJhdG9yLCBib29sIGlzQWRkKTsKCiAgICBmdW5jdGlvbiBhZGRPcGVyYXRvcihhZGRyZXNzIG5ld09wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFvcGVyYXRvcnNbbmV3T3BlcmF0b3JdKTsgLy8gcHJldmVudCBkdXBsaWNhdGVzLgogICAgICAgIHJlcXVpcmUob3BlcmF0b3JzR3JvdXAubGVuZ3RoIDwgTUFYX0dST1VQX1NJWkUpOwoKICAgICAgICBPcGVyYXRvckFkZGVkKG5ld09wZXJhdG9yLCB0cnVlKTsKICAgICAgICBvcGVyYXRvcnNbbmV3T3BlcmF0b3JdID0gdHJ1ZTsKICAgICAgICBvcGVyYXRvcnNHcm91cC5wdXNoKG5ld09wZXJhdG9yKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVPcGVyYXRvciAoYWRkcmVzcyBvcGVyYXRvcikgcHVibGljIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZShvcGVyYXRvcnNbb3BlcmF0b3JdKTsKICAgICAgICBvcGVyYXRvcnNbb3BlcmF0b3JdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG9wZXJhdG9yc0dyb3VwLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChvcGVyYXRvcnNHcm91cFtpXSA9PSBvcGVyYXRvcikgewogICAgICAgICAgICAgICAgb3BlcmF0b3JzR3JvdXBbaV0gPSBvcGVyYXRvcnNHcm91cFtvcGVyYXRvcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIG9wZXJhdG9yc0dyb3VwLmxlbmd0aCAtPSAxOwogICAgICAgICAgICAgICAgT3BlcmF0b3JBZGRlZChvcGVyYXRvciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCmludGVyZmFjZSBCdXJuYWJsZVRva2VuIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGJ1cm5Gcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IFdpdGhkcmF3YWJsZSBpcyBQZXJtaXNzaW9uR3JvdXBzIHsKCiAgICBldmVudCBUb2tlbldpdGhkcmF3KEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCwgYWRkcmVzcyBzZW5kVG8pOwoKICAgIC8qKgogICAgICogQGRldiBXaXRoZHJhdyBhbGwgRVJDMjAgY29tcGF0aWJsZSB0b2tlbnMKICAgICAqIEBwYXJhbSB0b2tlbiBFUkMyMCBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbihFUkMyMCB0b2tlbiwgdWludCBhbW91bnQsIGFkZHJlc3Mgc2VuZFRvKSBleHRlcm5hbCBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIoc2VuZFRvLCBhbW91bnQpKTsKICAgICAgICBUb2tlbldpdGhkcmF3KHRva2VuLCBhbW91bnQsIHNlbmRUbyk7CiAgICB9CgogICAgZXZlbnQgRXRoZXJXaXRoZHJhdyh1aW50IGFtb3VudCwgYWRkcmVzcyBzZW5kVG8pOwoKICAgIC8qKgogICAgICogQGRldiBXaXRoZHJhdyBFdGhlcnMKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcih1aW50IGFtb3VudCwgYWRkcmVzcyBzZW5kVG8pIGV4dGVybmFsIG9ubHlBZG1pbiB7CiAgICAgICAgc2VuZFRvLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgRXRoZXJXaXRoZHJhdyhhbW91bnQsIHNlbmRUbyk7CiAgICB9Cn0KCmludGVyZmFjZSBFUkMyMCB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7CiAgICBmdW5jdGlvbiBkZWNpbWFscygpIHB1YmxpYyB2aWV3IHJldHVybnModWludCBkaWdpdHMpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCmludGVyZmFjZSBGZWVCdXJuZXJJbnRlcmZhY2UgewogICAgZnVuY3Rpb24gaGFuZGxlRmVlcyAodWludCB0cmFkZVdlaUFtb3VudCwgYWRkcmVzcyByZXNlcnZlLCBhZGRyZXNzIHdhbGxldCkgcHVibGljIHJldHVybnMoYm9vbCk7Cn0KCmNvbnRyYWN0IEZlZUJ1cm5lciBpcyBXaXRoZHJhd2FibGUsIEZlZUJ1cm5lckludGVyZmFjZSB7CgogICAgbWFwcGluZyhhZGRyZXNzPT51aW50KSBwdWJsaWMgcmVzZXJ2ZUZlZXNJbkJwczsKICAgIG1hcHBpbmcoYWRkcmVzcz0+YWRkcmVzcykgcHVibGljIHJlc2VydmVLTkNXYWxsZXQ7CiAgICBtYXBwaW5nKGFkZHJlc3M9PnVpbnQpIHB1YmxpYyB3YWxsZXRGZWVzSW5CcHM7CiAgICBtYXBwaW5nKGFkZHJlc3M9PnVpbnQpIHB1YmxpYyByZXNlcnZlRmVlVG9CdXJuOwogICAgbWFwcGluZyhhZGRyZXNzPT5tYXBwaW5nKGFkZHJlc3M9PnVpbnQpKSBwdWJsaWMgcmVzZXJ2ZUZlZVRvV2FsbGV0OwoKICAgIEJ1cm5hYmxlVG9rZW4gcHVibGljIGtuYzsKICAgIGFkZHJlc3MgcHVibGljIGt5YmVyTmV0d29yazsKICAgIHVpbnQgcHVibGljIGtuY1BlckVUSFJhdGUgPSAzMDA7CgogICAgZnVuY3Rpb24gRmVlQnVybmVyKGFkZHJlc3MgX2FkbWluLCBCdXJuYWJsZVRva2VuIGtuY1Rva2VuKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX2FkbWluICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoa25jVG9rZW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgYWRtaW4gPSBfYWRtaW47CiAgICAgICAga25jID0ga25jVG9rZW47CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UmVzZXJ2ZURhdGEoYWRkcmVzcyByZXNlcnZlLCB1aW50IGZlZXNJbkJwcywgYWRkcmVzcyBrbmNXYWxsZXQpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoZmVlc0luQnBzIDwgMTAwKTsgLy8gbWFrZSBzdXJlIGl0IGlzIGFsd2F5cyA8IDElCiAgICAgICAgcmVxdWlyZShrbmNXYWxsZXQgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVzZXJ2ZUZlZXNJbkJwc1tyZXNlcnZlXSA9IGZlZXNJbkJwczsKICAgICAgICByZXNlcnZlS05DV2FsbGV0W3Jlc2VydmVdID0ga25jV2FsbGV0OwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFdhbGxldEZlZXMoYWRkcmVzcyB3YWxsZXQsIHVpbnQgZmVlc0luQnBzKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKGZlZXNJbkJwcyA8IDEwMDAwKTsgLy8gdW5kZXIgMTAwJQogICAgICAgIHdhbGxldEZlZXNJbkJwc1t3YWxsZXRdID0gZmVlc0luQnBzOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEt5YmVyTmV0d29yayhhZGRyZXNzIF9reWJlck5ldHdvcmspIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoX2t5YmVyTmV0d29yayAhPSBhZGRyZXNzKDApKTsKICAgICAgICBreWJlck5ldHdvcmsgPSBfa3liZXJOZXR3b3JrOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEtOQ1JhdGUodWludCByYXRlKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICBrbmNQZXJFVEhSYXRlID0gcmF0ZTsKICAgIH0KCiAgICBldmVudCBBc3NpZ25GZWVUb1dhbGxldChhZGRyZXNzIHJlc2VydmUsIGFkZHJlc3Mgd2FsbGV0LCB1aW50IHdhbGxldEZlZSk7CiAgICBldmVudCBBc3NpZ25CdXJuRmVlcyhhZGRyZXNzIHJlc2VydmUsIHVpbnQgYnVybkZlZSk7CgogICAgZnVuY3Rpb24gaGFuZGxlRmVlcyh1aW50IHRyYWRlV2VpQW1vdW50LCBhZGRyZXNzIHJlc2VydmUsIGFkZHJlc3Mgd2FsbGV0KSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGt5YmVyTmV0d29yayk7CgogICAgICAgIHVpbnQga25jQW1vdW50ID0gdHJhZGVXZWlBbW91bnQgKiBrbmNQZXJFVEhSYXRlOwogICAgICAgIHVpbnQgZmVlID0ga25jQW1vdW50ICogcmVzZXJ2ZUZlZXNJbkJwc1tyZXNlcnZlXSAvIDEwMDAwOwoKICAgICAgICB1aW50IHdhbGxldEZlZSA9IGZlZSAqIHdhbGxldEZlZXNJbkJwc1t3YWxsZXRdIC8gMTAwMDA7CiAgICAgICAgcmVxdWlyZShmZWUgPj0gd2FsbGV0RmVlKTsKICAgICAgICB1aW50IGZlZVRvQnVybiA9IGZlZSAtIHdhbGxldEZlZTsKCiAgICAgICAgaWYgKHdhbGxldEZlZSA+IDApIHsKICAgICAgICAgICAgcmVzZXJ2ZUZlZVRvV2FsbGV0W3Jlc2VydmVdW3dhbGxldF0gKz0gd2FsbGV0RmVlOwogICAgICAgICAgICBBc3NpZ25GZWVUb1dhbGxldChyZXNlcnZlLCB3YWxsZXQsIHdhbGxldEZlZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoZmVlVG9CdXJuID4gMCkgewogICAgICAgICAgICBBc3NpZ25CdXJuRmVlcyhyZXNlcnZlLCBmZWVUb0J1cm4pOwogICAgICAgICAgICByZXNlcnZlRmVlVG9CdXJuW3Jlc2VydmVdICs9IGZlZVRvQnVybjsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGFibGUgYnkgYW55b25lCiAgICBldmVudCBCdXJuQXNzaWduZWRGZWVzKGFkZHJlc3MgaW5kZXhlZCByZXNlcnZlLCBhZGRyZXNzIHNlbmRlcik7CgogICAgZnVuY3Rpb24gYnVyblJlc2VydmVGZWVzKGFkZHJlc3MgcmVzZXJ2ZSkgcHVibGljIHsKICAgICAgICB1aW50IGJ1cm5BbW91bnQgPSByZXNlcnZlRmVlVG9CdXJuW3Jlc2VydmVdOwogICAgICAgIHJlcXVpcmUoYnVybkFtb3VudCA+IDEpOwogICAgICAgIHJlc2VydmVGZWVUb0J1cm5bcmVzZXJ2ZV0gPSAxOyAvLyBsZWF2ZSAxIHR3ZWkgdG8gYXZvaWQgc3Bpa2VzIGluIGdhcyBmZWUKICAgICAgICByZXF1aXJlKGtuYy5idXJuRnJvbShyZXNlcnZlS05DV2FsbGV0W3Jlc2VydmVdLCBidXJuQW1vdW50IC0gMSkpOwoKICAgICAgICBCdXJuQXNzaWduZWRGZWVzKHJlc2VydmUsIG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGV2ZW50IFNlbmRXYWxsZXRGZWVzKGFkZHJlc3MgaW5kZXhlZCB3YWxsZXQsIGFkZHJlc3MgcmVzZXJ2ZSwgYWRkcmVzcyBzZW5kZXIpOwoKICAgIC8vIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGFibGUgYnkgYW55b25lCiAgICBmdW5jdGlvbiBzZW5kRmVlVG9XYWxsZXQoYWRkcmVzcyB3YWxsZXQsIGFkZHJlc3MgcmVzZXJ2ZSkgcHVibGljIHsKICAgICAgICB1aW50IGZlZUFtb3VudCA9IHJlc2VydmVGZWVUb1dhbGxldFtyZXNlcnZlXVt3YWxsZXRdOwogICAgICAgIHJlcXVpcmUoZmVlQW1vdW50ID4gMSk7CiAgICAgICAgcmVzZXJ2ZUZlZVRvV2FsbGV0W3Jlc2VydmVdW3dhbGxldF0gPSAxOyAvLyBsZWF2ZSAxIHR3ZWkgdG8gYXZvaWQgc3Bpa2VzIGluIGdhcyBmZWUKICAgICAgICByZXF1aXJlKGtuYy50cmFuc2ZlckZyb20ocmVzZXJ2ZUtOQ1dhbGxldFtyZXNlcnZlXSwgd2FsbGV0LCBmZWVBbW91bnQgLSAxKSk7CgogICAgICAgIFNlbmRXYWxsZXRGZWVzKHdhbGxldCwgcmVzZXJ2ZSwgbXNnLnNlbmRlcik7CiAgICB9Cn0='.
	

]
