Class {
	#name : #SRT6F47980674550d8c8240e6eaf3B594F562Adc7A9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6F47980674550d8c8240e6eaf3B594F562Adc7A9 >> base64 [
	^ ''.
	

]
