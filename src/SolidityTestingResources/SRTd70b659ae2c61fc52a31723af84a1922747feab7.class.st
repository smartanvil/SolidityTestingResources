Class {
	#name : #SRTd70b659ae2c61fc52a31723af84a1922747feab7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd70b659ae2c61fc52a31723af84a1922747feab7 >> base64 [
	^ ''.
	

]
