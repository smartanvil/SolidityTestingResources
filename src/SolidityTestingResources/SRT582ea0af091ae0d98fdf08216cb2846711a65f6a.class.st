Class {
	#name : #SRT582ea0af091ae0d98fdf08216cb2846711a65f6a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT582ea0af091ae0d98fdf08216cb2846711a65f6a >> base64 [
	^ ''.
	

]
