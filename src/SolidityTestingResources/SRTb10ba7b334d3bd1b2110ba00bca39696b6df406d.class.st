Class {
	#name : #SRTb10ba7b334d3bd1b2110ba00bca39696b6df406d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb10ba7b334d3bd1b2110ba00bca39696b6df406d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vc29sIFdhbGxldAovLyBNdWx0aS1zaWcsIGRhaWx5LWxpbWl0ZWQgYWNjb3VudCBwcm94eS93YWxsZXQuCi8vIEBhdXRob3JzOgovLyBHYXYgV29vZCA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJmZjk4YmY5YThiOTc5YjlhODlkMTljOTA5MiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+Ci8vIGluaGVyaXRhYmxlICJwcm9wZXJ0eSIgY29udHJhY3QgdGhhdCBlbmFibGVzIG1ldGhvZHMgdG8gYmUgcHJvdGVjdGVkIGJ5IHJlcXVpcmluZyB0aGUgYWNxdWllc2NlbmNlIG9mIGVpdGhlciBhCi8vIHNpbmdsZSwgb3IsIGNydWNpYWxseSwgZWFjaCBvZiBhIG51bWJlciBvZiwgZGVzaWduYXRlZCBvd25lcnMuCi8vIHVzYWdlOgovLyB1c2UgbW9kaWZpZXJzIG9ubHlvd25lciAoanVzdCBvd24gb3duZWQpIG9yIG9ubHltYW55b3duZXJzKGhhc2gpLCB3aGVyZWJ5IHRoZSBzYW1lIGhhc2ggbXVzdCBiZSBwcm92aWRlZCBieQovLyBzb21lIG51bWJlciAoc3BlY2lmaWVkIGluIGNvbnN0cnVjdG9yKSBvZiB0aGUgc2V0IG9mIG93bmVycyAoc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3RvciwgbW9kaWZpYWJsZSkgYmVmb3JlIHRoZQovLyBpbnRlcmlvciBpcyBleGVjdXRlZC4KY29udHJhY3QgbXVsdGlvd25lZCB7CgogICAgLy8gVFlQRVMKCiAgICAvLyBzdHJ1Y3QgZm9yIHRoZSBzdGF0dXMgb2YgYSBwZW5kaW5nIG9wZXJhdGlvbi4KICAgIHN0cnVjdCBQZW5kaW5nU3RhdGUgewogICAgICAgIHVpbnQgeWV0TmVlZGVkOwogICAgICAgIHVpbnQgb3duZXJzRG9uZTsKICAgICAgICB1aW50IGluZGV4OwogICAgfQoKICAgIC8vIEVWRU5UUwoKICAgIC8vIHRoaXMgY29udHJhY3Qgb25seSBoYXMgc2l4IHR5cGVzIG9mIGV2ZW50czogaXQgY2FuIGFjY2VwdCBhIGNvbmZpcm1hdGlvbiwgaW4gd2hpY2ggY2FzZQogICAgLy8gd2UgcmVjb3JkIG93bmVyIGFuZCBvcGVyYXRpb24gKGhhc2gpIGFsb25nc2lkZSBpdC4KICAgIGV2ZW50IENvbmZpcm1hdGlvbihhZGRyZXNzIG93bmVyLCBieXRlczMyIG9wZXJhdGlvbik7CiAgICBldmVudCBSZXZva2UoYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24pOwogICAgLy8gc29tZSBvdGhlcnMgYXJlIGluIHRoZSBjYXNlIG9mIGFuIG93bmVyIGNoYW5naW5nLgogICAgZXZlbnQgT3duZXJDaGFuZ2VkKGFkZHJlc3Mgb2xkT3duZXIsIGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJBZGRlZChhZGRyZXNzIG5ld093bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZlZChhZGRyZXNzIG9sZE93bmVyKTsKICAgIC8vIHRoZSBsYXN0IG9uZSBpcyBlbWl0dGVkIGlmIHRoZSByZXF1aXJlZCBzaWduYXR1cmVzIGNoYW5nZQogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2VkKHVpbnQgbmV3UmVxdWlyZW1lbnQpOwoKICAgIC8vIE1PRElGSUVSUwoKICAgIC8vIHNpbXBsZSBzaW5nbGUtc2lnIGZ1bmN0aW9uIG1vZGlmaWVyLgogICAgbW9kaWZpZXIgb25seW93bmVyIHsKICAgICAgICBpZiAoaXNPd25lcihtc2cuc2VuZGVyKSkKICAgICAgICAgICAgXzsKICAgIH0KICAgIC8vIG11bHRpLXNpZyBmdW5jdGlvbiBtb2RpZmllcjogdGhlIG9wZXJhdGlvbiBtdXN0IGhhdmUgYW4gaW50cmluc2ljIGhhc2ggaW4gb3JkZXIKICAgIC8vIHRoYXQgbGF0ZXIgYXR0ZW1wdHMgY2FuIGJlIHJlYWxpc2VkIGFzIHRoZSBzYW1lIHVuZGVybHlpbmcgb3BlcmF0aW9uIGFuZAogICAgLy8gdGh1cyBjb3VudCBhcyBjb25maXJtYXRpb25zLgogICAgbW9kaWZpZXIgb25seW1hbnlvd25lcnMoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgaWYgKGNvbmZpcm1BbmRDaGVjayhfb3BlcmF0aW9uKSkKICAgICAgICAgICAgXzsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgaXMgZ2l2ZW4gbnVtYmVyIG9mIHNpZ3MgcmVxdWlyZWQgdG8gZG8gcHJvdGVjdGVkICJvbmx5bWFueW93bmVycyIgdHJhbnNhY3Rpb25zCiAgICAvLyBhcyB3ZWxsIGFzIHRoZSBzZWxlY3Rpb24gb2YgYWRkcmVzc2VzIGNhcGFibGUgb2YgY29uZmlybWluZyB0aGVtLgogICAgZnVuY3Rpb24gbXVsdGlvd25lZChhZGRyZXNzW10gX293bmVycywgdWludCBfcmVxdWlyZWQpIHsKICAgICAgICBtX251bU93bmVycyA9IF9vd25lcnMubGVuZ3RoICsgMTsKICAgICAgICBtX293bmVyc1sxXSA9IHVpbnQobXNnLnNlbmRlcik7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildID0gMTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfb3duZXJzLmxlbmd0aDsgKytpKQogICAgICAgIHsKICAgICAgICAgICAgbV9vd25lcnNbMiArIGldID0gdWludChfb3duZXJzW2ldKTsKICAgICAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyc1tpXSldID0gMiArIGk7CiAgICAgICAgfQogICAgICAgIG1fcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICB9CiAgICAKICAgIC8vIFJldm9rZXMgYSBwcmlvciBjb25maXJtYXRpb24gb2YgdGhlIGdpdmVuIG9wZXJhdGlvbgogICAgZnVuY3Rpb24gcmV2b2tlKGJ5dGVzMzIgX29wZXJhdGlvbikgZXh0ZXJuYWwgewogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KG1zZy5zZW5kZXIpXTsKICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSdyZSBhbiBvd25lcgogICAgICAgIGlmIChvd25lckluZGV4ID09IDApIHJldHVybjsKICAgICAgICB1aW50IG93bmVySW5kZXhCaXQgPSAyKipvd25lckluZGV4OwogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIGlmIChwZW5kaW5nLm93bmVyc0RvbmUgJiBvd25lckluZGV4Qml0ID4gMCkgewogICAgICAgICAgICBwZW5kaW5nLnlldE5lZWRlZCsrOwogICAgICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgLT0gb3duZXJJbmRleEJpdDsKICAgICAgICAgICAgUmV2b2tlKG1zZy5zZW5kZXIsIF9vcGVyYXRpb24pOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8gUmVwbGFjZXMgYW4gb3duZXIgYF9mcm9tYCB3aXRoIGFub3RoZXIgYF90b2AuCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bykgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpIGV4dGVybmFsIHsKICAgICAgICBpZiAoaXNPd25lcihfdG8pKSByZXR1cm47CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQoX2Zyb20pXTsKICAgICAgICBpZiAob3duZXJJbmRleCA9PSAwKSByZXR1cm47CgogICAgICAgIGNsZWFyUGVuZGluZygpOwogICAgICAgIG1fb3duZXJzW293bmVySW5kZXhdID0gdWludChfdG8pOwogICAgICAgIG1fb3duZXJJbmRleFt1aW50KF9mcm9tKV0gPSAwOwogICAgICAgIG1fb3duZXJJbmRleFt1aW50KF90byldID0gb3duZXJJbmRleDsKICAgICAgICBPd25lckNoYW5nZWQoX2Zyb20sIF90byk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZE93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIGlmIChpc093bmVyKF9vd25lcikpIHJldHVybjsKCiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZW9yZ2FuaXplT3duZXJzKCk7CiAgICAgICAgaWYgKG1fbnVtT3duZXJzID49IGNfbWF4T3duZXJzKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgbV9udW1Pd25lcnMrKzsKICAgICAgICBtX293bmVyc1ttX251bU93bmVyc10gPSB1aW50KF9vd25lcik7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyKV0gPSBtX251bU93bmVyczsKICAgICAgICBPd25lckFkZGVkKF9vd25lcik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9vd25lcildOwogICAgICAgIGlmIChvd25lckluZGV4ID09IDApIHJldHVybjsKICAgICAgICBpZiAobV9yZXF1aXJlZCA+IG1fbnVtT3duZXJzIC0gMSkgcmV0dXJuOwoKICAgICAgICBtX293bmVyc1tvd25lckluZGV4XSA9IDA7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX293bmVyKV0gPSAwOwogICAgICAgIGNsZWFyUGVuZGluZygpOwogICAgICAgIHJlb3JnYW5pemVPd25lcnMoKTsgLy9tYWtlIHN1cmUgbV9udW1Pd25lciBpcyBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG93bmVycyBhbmQgYWx3YXlzIHBvaW50cyB0byB0aGUgb3B0aW1hbCBmcmVlIHNsb3QKICAgICAgICBPd25lclJlbW92ZWQoX293bmVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlUmVxdWlyZW1lbnQodWludCBfbmV3UmVxdWlyZWQpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgaWYgKF9uZXdSZXF1aXJlZCA+IG1fbnVtT3duZXJzKSByZXR1cm47CiAgICAgICAgbV9yZXF1aXJlZCA9IF9uZXdSZXF1aXJlZDsKICAgICAgICBjbGVhclBlbmRpbmcoKTsKICAgICAgICBSZXF1aXJlbWVudENoYW5nZWQoX25ld1JlcXVpcmVkKTsKICAgIH0KCiAgICAvLyBHZXRzIGFuIG93bmVyIGJ5IDAtaW5kZXhlZCBwb3NpdGlvbiAodXNpbmcgbnVtT3duZXJzIGFzIHRoZSBjb3VudCkKICAgIGZ1bmN0aW9uIGdldE93bmVyKHVpbnQgb3duZXJJbmRleCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBhZGRyZXNzKG1fb3duZXJzW293bmVySW5kZXggKyAxXSk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPd25lcihhZGRyZXNzIF9hZGRyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG1fb3duZXJJbmRleFt1aW50KF9hZGRyKV0gPiAwOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBoYXNDb25maXJtZWQoYnl0ZXMzMiBfb3BlcmF0aW9uLCBhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHZhciBwZW5kaW5nID0gbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9vd25lcildOwoKICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSdyZSBhbiBvd25lcgogICAgICAgIGlmIChvd25lckluZGV4ID09IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgcmV0dXJuICEocGVuZGluZy5vd25lcnNEb25lICYgb3duZXJJbmRleEJpdCA9PSAwKTsKICAgIH0KICAgIAogICAgLy8gSU5URVJOQUwgTUVUSE9EUwoKICAgIGZ1bmN0aW9uIGNvbmZpcm1BbmRDaGVjayhieXRlczMyIF9vcGVyYXRpb24pIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBkZXRlcm1pbmUgd2hhdCBpbmRleCB0aGUgcHJlc2VudCBzZW5kZXIgaXM6CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildOwogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGV5J3JlIGFuIG93bmVyCiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgcmV0dXJuOwoKICAgICAgICB2YXIgcGVuZGluZyA9IG1fcGVuZGluZ1tfb3BlcmF0aW9uXTsKICAgICAgICAvLyBpZiB3ZSdyZSBub3QgeWV0IHdvcmtpbmcgb24gdGhpcyBvcGVyYXRpb24sIHN3aXRjaCBvdmVyIGFuZCByZXNldCB0aGUgY29uZmlybWF0aW9uIHN0YXR1cy4KICAgICAgICBpZiAocGVuZGluZy55ZXROZWVkZWQgPT0gMCkgewogICAgICAgICAgICAvLyByZXNldCBjb3VudCBvZiBjb25maXJtYXRpb25zIG5lZWRlZC4KICAgICAgICAgICAgcGVuZGluZy55ZXROZWVkZWQgPSBtX3JlcXVpcmVkOwogICAgICAgICAgICAvLyByZXNldCB3aGljaCBvd25lcnMgaGF2ZSBjb25maXJtZWQgKG5vbmUpIC0gc2V0IG91ciBiaXRtYXAgdG8gMC4KICAgICAgICAgICAgcGVuZGluZy5vd25lcnNEb25lID0gMDsKICAgICAgICAgICAgcGVuZGluZy5pbmRleCA9IG1fcGVuZGluZ0luZGV4Lmxlbmd0aCsrOwogICAgICAgICAgICBtX3BlbmRpbmdJbmRleFtwZW5kaW5nLmluZGV4XSA9IF9vcGVyYXRpb247CiAgICAgICAgfQogICAgICAgIC8vIGRldGVybWluZSB0aGUgYml0IHRvIHNldCBmb3IgdGhpcyBvd25lci4KICAgICAgICB1aW50IG93bmVySW5kZXhCaXQgPSAyKipvd25lckluZGV4OwogICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSAodGhlIG1lc3NhZ2Ugc2VuZGVyKSBoYXZlbid0IGNvbmZpcm1lZCB0aGlzIG9wZXJhdGlvbiBwcmV2aW91c2x5LgogICAgICAgIGlmIChwZW5kaW5nLm93bmVyc0RvbmUgJiBvd25lckluZGV4Qml0ID09IDApIHsKICAgICAgICAgICAgQ29uZmlybWF0aW9uKG1zZy5zZW5kZXIsIF9vcGVyYXRpb24pOwogICAgICAgICAgICAvLyBvayAtIGNoZWNrIGlmIGNvdW50IGlzIGVub3VnaCB0byBnbyBhaGVhZC4KICAgICAgICAgICAgaWYgKHBlbmRpbmcueWV0TmVlZGVkIDw9IDEpIHsKICAgICAgICAgICAgICAgIC8vIGVub3VnaCBjb25maXJtYXRpb25zOiByZXNldCBhbmQgcnVuIGludGVyaW9yLgogICAgICAgICAgICAgICAgZGVsZXRlIG1fcGVuZGluZ0luZGV4W21fcGVuZGluZ1tfb3BlcmF0aW9uXS5pbmRleF07CiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nW19vcGVyYXRpb25dOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBub3QgZW5vdWdoOiByZWNvcmQgdGhhdCB0aGlzIG93bmVyIGluIHBhcnRpY3VsYXIgY29uZmlybWVkLgogICAgICAgICAgICAgICAgcGVuZGluZy55ZXROZWVkZWQtLTsKICAgICAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSB8PSBvd25lckluZGV4Qml0OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlb3JnYW5pemVPd25lcnMoKSBwcml2YXRlIHsKICAgICAgICB1aW50IGZyZWUgPSAxOwogICAgICAgIHdoaWxlIChmcmVlIDwgbV9udW1Pd25lcnMpCiAgICAgICAgewogICAgICAgICAgICB3aGlsZSAoZnJlZSA8IG1fbnVtT3duZXJzICYmIG1fb3duZXJzW2ZyZWVdICE9IDApIGZyZWUrKzsKICAgICAgICAgICAgd2hpbGUgKG1fbnVtT3duZXJzID4gMSAmJiBtX293bmVyc1ttX251bU93bmVyc10gPT0gMCkgbV9udW1Pd25lcnMtLTsKICAgICAgICAgICAgaWYgKGZyZWUgPCBtX251bU93bmVycyAmJiBtX293bmVyc1ttX251bU93bmVyc10gIT0gMCAmJiBtX293bmVyc1tmcmVlXSA9PSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBtX293bmVyc1tmcmVlXSA9IG1fb3duZXJzW21fbnVtT3duZXJzXTsKICAgICAgICAgICAgICAgIG1fb3duZXJJbmRleFttX293bmVyc1tmcmVlXV0gPSBmcmVlOwogICAgICAgICAgICAgICAgbV9vd25lcnNbbV9udW1Pd25lcnNdID0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2xlYXJQZW5kaW5nKCkgaW50ZXJuYWwgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKQogICAgICAgICAgICBpZiAobV9wZW5kaW5nSW5kZXhbaV0gIT0gMCkKICAgICAgICAgICAgICAgIGRlbGV0ZSBtX3BlbmRpbmdbbV9wZW5kaW5nSW5kZXhbaV1dOwogICAgICAgIGRlbGV0ZSBtX3BlbmRpbmdJbmRleDsKICAgIH0KICAgICAgICAKICAgIC8vIEZJRUxEUwoKICAgIC8vIHRoZSBudW1iZXIgb2Ygb3duZXJzIHRoYXQgbXVzdCBjb25maXJtIHRoZSBzYW1lIG9wZXJhdGlvbiBiZWZvcmUgaXQgaXMgcnVuLgogICAgdWludCBwdWJsaWMgbV9yZXF1aXJlZDsKICAgIC8vIHBvaW50ZXIgdXNlZCB0byBmaW5kIGEgZnJlZSBzbG90IGluIG1fb3duZXJzCiAgICB1aW50IHB1YmxpYyBtX251bU93bmVyczsKICAgIAogICAgLy8gbGlzdCBvZiBvd25lcnMKICAgIHVpbnRbMjU2XSBtX293bmVyczsKICAgIHVpbnQgY29uc3RhbnQgY19tYXhPd25lcnMgPSAyNTA7CiAgICAvLyBpbmRleCBvbiB0aGUgbGlzdCBvZiBvd25lcnMgdG8gYWxsb3cgcmV2ZXJzZSBsb29rdXAKICAgIG1hcHBpbmcodWludCA9PiB1aW50KSBtX293bmVySW5kZXg7CiAgICAvLyB0aGUgb25nb2luZyBvcGVyYXRpb25zLgogICAgbWFwcGluZyhieXRlczMyID0+IFBlbmRpbmdTdGF0ZSkgbV9wZW5kaW5nOwogICAgYnl0ZXMzMltdIG1fcGVuZGluZ0luZGV4Owp9CgovLyBpbmhlcml0YWJsZSAicHJvcGVydHkiIGNvbnRyYWN0IHRoYXQgZW5hYmxlcyBtZXRob2RzIHRvIGJlIHByb3RlY3RlZCBieSBwbGFjaW5nIGEgbGluZWFyIGxpbWl0IChzcGVjaWZpYWJsZSkKLy8gb24gYSBwYXJ0aWN1bGFyIHJlc291cmNlIHBlciBjYWxlbmRhciBkYXkuIGlzIG11bHRpb3duZWQgdG8gYWxsb3cgdGhlIGxpbWl0IHRvIGJlIGFsdGVyZWQuIHJlc291cmNlIHRoYXQgbWV0aG9kCi8vIHVzZXMgaXMgc3BlY2lmaWVkIGluIHRoZSBtb2RpZmllci4KY29udHJhY3QgZGF5bGltaXQgaXMgbXVsdGlvd25lZCB7CgogICAgLy8gTU9ESUZJRVJTCgogICAgLy8gc2ltcGxlIG1vZGlmaWVyIGZvciBkYWlseSBsaW1pdC4KICAgIG1vZGlmaWVyIGxpbWl0ZWREYWlseSh1aW50IF92YWx1ZSkgewogICAgICAgIGlmICh1bmRlckxpbWl0KF92YWx1ZSkpCiAgICAgICAgICAgIF87CiAgICB9CgogICAgLy8gTUVUSE9EUwoKICAgIC8vIGNvbnN0cnVjdG9yIC0gc3RvcmVzIGluaXRpYWwgZGFpbHkgbGltaXQgYW5kIHJlY29yZHMgdGhlIHByZXNlbnQgZGF5J3MgaW5kZXguCiAgICBmdW5jdGlvbiBkYXlsaW1pdCh1aW50IF9saW1pdCkgewogICAgICAgIG1fZGFpbHlMaW1pdCA9IF9saW1pdDsKICAgICAgICBtX2xhc3REYXkgPSB0b2RheSgpOwogICAgfQogICAgLy8gKHJlKXNldHMgdGhlIGRhaWx5IGxpbWl0LiBuZWVkcyBtYW55IG9mIHRoZSBvd25lcnMgdG8gY29uZmlybS4gZG9lc24ndCBhbHRlciB0aGUgYW1vdW50IGFscmVhZHkgc3BlbnQgdG9kYXkuCiAgICBmdW5jdGlvbiBzZXREYWlseUxpbWl0KHVpbnQgX25ld0xpbWl0KSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIG1fZGFpbHlMaW1pdCA9IF9uZXdMaW1pdDsKICAgIH0KICAgIC8vIHJlc2V0cyB0aGUgYW1vdW50IGFscmVhZHkgc3BlbnQgdG9kYXkuIG5lZWRzIG1hbnkgb2YgdGhlIG93bmVycyB0byBjb25maXJtLiAKICAgIGZ1bmN0aW9uIHJlc2V0U3BlbnRUb2RheSgpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgbV9zcGVudFRvZGF5ID0gMDsKICAgIH0KICAgIAogICAgLy8gSU5URVJOQUwgTUVUSE9EUwogICAgCiAgICAvLyBjaGVja3MgdG8gc2VlIGlmIHRoZXJlIGlzIGF0IGxlYXN0IGBfdmFsdWVgIGxlZnQgZnJvbSB0aGUgZGFpbHkgbGltaXQgdG9kYXkuIGlmIHRoZXJlIGlzLCBzdWJ0cmFjdHMgaXQgYW5kCiAgICAvLyByZXR1cm5zIHRydWUuIG90aGVyd2lzZSBqdXN0IHJldHVybnMgZmFsc2UuCiAgICBmdW5jdGlvbiB1bmRlckxpbWl0KHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCBvbmx5b3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIHJlc2V0IHRoZSBzcGVuZCBsaW1pdCBpZiB3ZSdyZSBvbiBhIGRpZmZlcmVudCBkYXkgdG8gbGFzdCB0aW1lLgogICAgICAgIGlmICh0b2RheSgpID4gbV9sYXN0RGF5KSB7CiAgICAgICAgICAgIG1fc3BlbnRUb2RheSA9IDA7CiAgICAgICAgICAgIG1fbGFzdERheSA9IHRvZGF5KCk7CiAgICAgICAgfQogICAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGVub3VnaCBsZWZ0IC0gaWYgc28sIHN1YnRyYWN0IGFuZCByZXR1cm4gdHJ1ZS4KICAgICAgICAvLyBvdmVyZmxvdyBwcm90ZWN0aW9uICAgICAgICAgICAgICAgICAgICAvLyBkYWlseUxpbWl0IGNoZWNrICAKICAgICAgICBpZiAobV9zcGVudFRvZGF5ICsgX3ZhbHVlID49IG1fc3BlbnRUb2RheSAmJiBtX3NwZW50VG9kYXkgKyBfdmFsdWUgPD0gbV9kYWlseUxpbWl0KSB7CiAgICAgICAgICAgIG1fc3BlbnRUb2RheSArPSBfdmFsdWU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAvLyBkZXRlcm1pbmVzIHRvZGF5J3MgaW5kZXguCiAgICBmdW5jdGlvbiB0b2RheSgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludCkgeyByZXR1cm4gbm93IC8gMSBkYXlzOyB9CgogICAgLy8gRklFTERTCgogICAgdWludCBwdWJsaWMgbV9kYWlseUxpbWl0OwogICAgdWludCBwdWJsaWMgbV9zcGVudFRvZGF5OwogICAgdWludCBwdWJsaWMgbV9sYXN0RGF5Owp9CgovLyBpbnRlcmZhY2UgY29udHJhY3QgZm9yIG11bHRpc2lnIHByb3h5IGNvbnRyYWN0czsgc2VlIGJlbG93IGZvciBkb2NzLgpjb250cmFjdCBtdWx0aXNpZyB7CgogICAgLy8gRVZFTlRTCgogICAgLy8gbG9nZ2VkIGV2ZW50czoKICAgIC8vIEZ1bmRzIGhhcyBhcnJpdmVkIGludG8gdGhlIHdhbGxldCAocmVjb3JkIGhvdyBtdWNoKS4KICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBfZnJvbSwgdWludCB2YWx1ZSk7CiAgICAvLyBTaW5nbGUgdHJhbnNhY3Rpb24gZ29pbmcgb3V0IG9mIHRoZSB3YWxsZXQgKHJlY29yZCB3aG8gc2lnbmVkIGZvciBpdCwgaG93IG11Y2gsIGFuZCB0byB3aG9tIGl0J3MgZ29pbmcpLgogICAgZXZlbnQgU2luZ2xlVHJhbnNhY3QoYWRkcmVzcyBvd25lciwgdWludCB2YWx1ZSwgYWRkcmVzcyB0bywgYnl0ZXMgZGF0YSk7CiAgICAvLyBNdWx0aS1zaWcgdHJhbnNhY3Rpb24gZ29pbmcgb3V0IG9mIHRoZSB3YWxsZXQgKHJlY29yZCB3aG8gc2lnbmVkIGZvciBpdCBsYXN0LCB0aGUgb3BlcmF0aW9uIGhhc2gsIGhvdyBtdWNoLCBhbmQgdG8gd2hvbSBpdCdzIGdvaW5nKS4KICAgIGV2ZW50IE11bHRpVHJhbnNhY3QoYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24sIHVpbnQgdmFsdWUsIGFkZHJlc3MgdG8sIGJ5dGVzIGRhdGEpOwogICAgLy8gQ29uZmlybWF0aW9uIHN0aWxsIG5lZWRlZCBmb3IgYSB0cmFuc2FjdGlvbi4KICAgIGV2ZW50IENvbmZpcm1hdGlvbk5lZWRlZChieXRlczMyIG9wZXJhdGlvbiwgYWRkcmVzcyBpbml0aWF0b3IsIHVpbnQgdmFsdWUsIGFkZHJlc3MgdG8sIGJ5dGVzIGRhdGEpOwogICAgCiAgICAvLyBGVU5DVElPTlMKICAgIAogICAgLy8gVE9ETzogZG9jdW1lbnQKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIGV4ZWN1dGUoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgZXh0ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMik7CiAgICBmdW5jdGlvbiBjb25maXJtKGJ5dGVzMzIgX2gpIHJldHVybnMgKGJvb2wpOwp9CgovLyB1c2FnZToKLy8gYnl0ZXMzMiBoID0gV2FsbGV0KHcpLmZyb20ob25lT3duZXIpLmV4ZWN1dGUodG8sIHZhbHVlLCBkYXRhKTsKLy8gV2FsbGV0KHcpLmZyb20oYW5vdGhlck93bmVyKS5jb25maXJtKGgpOwpjb250cmFjdCBXYWxsZXQgaXMgbXVsdGlzaWcsIG11bHRpb3duZWQsIGRheWxpbWl0IHsKCiAgICAvLyBUWVBFUwoKICAgIC8vIFRyYW5zYWN0aW9uIHN0cnVjdHVyZSB0byByZW1lbWJlciBkZXRhaWxzIG9mIHRyYW5zYWN0aW9uIGxlc3QgaXQgbmVlZCBiZSBzYXZlZCBmb3IgYSBsYXRlciBjYWxsLgogICAgc3RydWN0IFRyYW5zYWN0aW9uIHsKICAgICAgICBhZGRyZXNzIHRvOwogICAgICAgIHVpbnQgdmFsdWU7CiAgICAgICAgYnl0ZXMgZGF0YTsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgLSBqdXN0IHBhc3Mgb24gdGhlIG93bmVyIGFycmF5IHRvIHRoZSBtdWx0aW93bmVkIGFuZAogICAgLy8gdGhlIGxpbWl0IHRvIGRheWxpbWl0CiAgICBmdW5jdGlvbiBXYWxsZXQoYWRkcmVzc1tdIF9vd25lcnMsIHVpbnQgX3JlcXVpcmVkLCB1aW50IF9kYXlsaW1pdCkKICAgICAgICAgICAgbXVsdGlvd25lZChfb3duZXJzLCBfcmVxdWlyZWQpIGRheWxpbWl0KF9kYXlsaW1pdCkgewogICAgfQogICAgCiAgICAvLyBraWxscyB0aGUgY29udHJhY3Qgc2VuZGluZyBldmVyeXRoaW5nIHRvIGBfdG9gLgogICAgZnVuY3Rpb24ga2lsbChhZGRyZXNzIF90bykgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpIGV4dGVybmFsIHsKICAgICAgICBzdWljaWRlKF90byk7CiAgICB9CiAgICAKICAgIC8vIGdldHMgY2FsbGVkIHdoZW4gbm8gb3RoZXIgZnVuY3Rpb24gbWF0Y2hlcwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICAvLyBqdXN0IGJlaW5nIHNlbnQgc29tZSBjYXNoPwogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKQogICAgICAgICAgICBEZXBvc2l0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CiAgICAKICAgIC8vIE91dHNpZGUtdmlzaWJsZSB0cmFuc2FjdCBlbnRyeSBwb2ludC4gRXhlY3V0ZXMgdHJhbnNhY3Rpb24gaW1tZWRpYXRlbHkgaWYgYmVsb3cgZGFpbHkgc3BlbmQgbGltaXQuCiAgICAvLyBJZiBub3QsIGdvZXMgaW50byBtdWx0aXNpZyBwcm9jZXNzLiBXZSBwcm92aWRlIGEgaGFzaCBvbiByZXR1cm4gdG8gYWxsb3cgdGhlIHNlbmRlciB0byBwcm92aWRlCiAgICAvLyBzaG9ydGN1dHMgZm9yIHRoZSBvdGhlciBjb25maXJtYXRpb25zIChhbGxvd2luZyB0aGVtIHRvIGF2b2lkIHJlcGxpY2F0aW5nIHRoZSBfdG8sIF92YWx1ZQogICAgLy8gYW5kIF9kYXRhIGFyZ3VtZW50cykuIFRoZXkgc3RpbGwgZ2V0IHRoZSBvcHRpb24gb2YgdXNpbmcgdGhlbSBpZiB0aGV5IHdhbnQsIGFueXdheXMuCiAgICBmdW5jdGlvbiBleGVjdXRlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIGV4dGVybmFsIG9ubHlvd25lciByZXR1cm5zIChieXRlczMyIF9yKSB7CiAgICAgICAgLy8gZmlyc3QsIHRha2UgdGhlIG9wcG9ydHVuaXR5IHRvIGNoZWNrIHRoYXQgd2UncmUgdW5kZXIgdGhlIGRhaWx5IGxpbWl0LgogICAgICAgIGlmICh1bmRlckxpbWl0KF92YWx1ZSkpIHsKICAgICAgICAgICAgU2luZ2xlVHJhbnNhY3QobXNnLnNlbmRlciwgX3ZhbHVlLCBfdG8sIF9kYXRhKTsKICAgICAgICAgICAgLy8geWVzIC0ganVzdCBleGVjdXRlIHRoZSBjYWxsLgogICAgICAgICAgICBfdG8uY2FsbC52YWx1ZShfdmFsdWUpKF9kYXRhKTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIC8vIGRldGVybWluZSBvdXIgb3BlcmF0aW9uIGhhc2guCiAgICAgICAgX3IgPSBzaGEzKG1zZy5kYXRhLCBibG9jay5udW1iZXIpOwogICAgICAgIGlmICghY29uZmlybShfcikgJiYgbV90eHNbX3JdLnRvID09IDApIHsKICAgICAgICAgICAgbV90eHNbX3JdLnRvID0gX3RvOwogICAgICAgICAgICBtX3R4c1tfcl0udmFsdWUgPSBfdmFsdWU7CiAgICAgICAgICAgIG1fdHhzW19yXS5kYXRhID0gX2RhdGE7CiAgICAgICAgICAgIENvbmZpcm1hdGlvbk5lZWRlZChfciwgbXNnLnNlbmRlciwgX3ZhbHVlLCBfdG8sIF9kYXRhKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vIGNvbmZpcm0gYSB0cmFuc2FjdGlvbiB0aHJvdWdoIGp1c3QgdGhlIGhhc2guIHdlIHVzZSB0aGUgcHJldmlvdXMgdHJhbnNhY3Rpb25zIG1hcCwgbV90eHMsIGluIG9yZGVyCiAgICAvLyB0byBkZXRlcm1pbmUgdGhlIGJvZHkgb2YgdGhlIHRyYW5zYWN0aW9uIGZyb20gdGhlIGhhc2ggcHJvdmlkZWQuCiAgICBmdW5jdGlvbiBjb25maXJtKGJ5dGVzMzIgX2gpIG9ubHltYW55b3duZXJzKF9oKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG1fdHhzW19oXS50byAhPSAwKSB7CiAgICAgICAgICAgIG1fdHhzW19oXS50by5jYWxsLnZhbHVlKG1fdHhzW19oXS52YWx1ZSkobV90eHNbX2hdLmRhdGEpOwogICAgICAgICAgICBNdWx0aVRyYW5zYWN0KG1zZy5zZW5kZXIsIF9oLCBtX3R4c1tfaF0udmFsdWUsIG1fdHhzW19oXS50bywgbV90eHNbX2hdLmRhdGEpOwogICAgICAgICAgICBkZWxldGUgbV90eHNbX2hdOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vIElOVEVSTkFMIE1FVEhPRFMKICAgIAogICAgZnVuY3Rpb24gY2xlYXJQZW5kaW5nKCkgaW50ZXJuYWwgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKQogICAgICAgICAgICBkZWxldGUgbV90eHNbbV9wZW5kaW5nSW5kZXhbaV1dOwogICAgICAgIHN1cGVyLmNsZWFyUGVuZGluZygpOwogICAgfQoKICAgIC8vIEZJRUxEUwoKICAgIC8vIHBlbmRpbmcgdHJhbnNhY3Rpb25zIHdlIGhhdmUgYXQgcHJlc2VudC4KICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gVHJhbnNhY3Rpb24pIG1fdHhzOwp9'.
	

]
