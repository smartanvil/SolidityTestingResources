Class {
	#name : #SRT08c1a513a230f4cfc219896713b4dbe22b433e16,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08c1a513a230f4cfc219896713b4dbe22b433e16 >> base64 [
	^ ''.
	

]
