Class {
	#name : #SRTd15d322351667b202f70b2c2d568341da8d39b67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd15d322351667b202f70b2c2d568341da8d39b67 >> base64 [
	^ ''.
	

]
