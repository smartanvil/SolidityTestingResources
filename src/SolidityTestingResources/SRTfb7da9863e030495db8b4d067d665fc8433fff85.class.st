Class {
	#name : #SRTfb7da9863e030495db8b4d067d665fc8433fff85,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfb7da9863e030495db8b4d067d665fc8433fff85 >> base64 [
	^ ''.
	

]
