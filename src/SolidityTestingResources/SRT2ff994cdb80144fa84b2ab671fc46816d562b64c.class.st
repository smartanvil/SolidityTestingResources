Class {
	#name : #SRT2ff994cdb80144fa84b2ab671fc46816d562b64c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ff994cdb80144fa84b2ab671fc46816d562b64c >> base64 [
	^ ''.
	

]
