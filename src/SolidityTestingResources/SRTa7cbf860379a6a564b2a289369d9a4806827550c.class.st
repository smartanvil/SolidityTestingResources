Class {
	#name : #SRTa7cbf860379a6a564b2a289369d9a4806827550c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa7cbf860379a6a564b2a289369d9a4806827550c >> base64 [
	^ ''.
	

]
