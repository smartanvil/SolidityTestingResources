Class {
	#name : #SRT72bf3030e276a96539143551bd8f91aff699bf7c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT72bf3030e276a96539143551bd8f91aff699bf7c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8qKgogKiBWZXJ5IGJhc2ljIG93bmVkL21vcnRhbCBib2lsZXJwbGF0ZS4gIFVzZWQgZm9yIGJhc2ljYWxseSBldmVyeXRoaW5nLCBmb3IKICogc2VjdXJpdHkvYWNjZXNzIGNvbnRyb2wgcHVycG9zZXMuCiAqLwpjb250cmFjdCBPd25lZCB7CiAgYWRkcmVzcyBvd25lcjsKCiAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CgogIC8qKgogICAqIEJhc2ljIGNvbnN0cnVjdG9yLiAgVGhlIHNlbmRlciBpcyB0aGUgb3duZXIuCiAgICovCiAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBvd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgIFdobyBnZXRzIHRvIGluaGVyaXQgdGhpcyB0aGluZy4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgb3duZXIgPSBuZXdPd25lcjsKICB9CgogIC8qKgogICAqIFNodXRzIGRvd24gdGhlIGNvbnRyYWN0IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIGJsb2NrY2hhaW4gc3RhdGUuCiAgICogT25seSBhdmFpbGFibGUgdG8gdGhlIG93bmVyLgogICAqLwogIGZ1bmN0aW9uIHNodXRkb3duKCkgb25seU93bmVyIHsKICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgfQoKICAvKioKICAgKiBXaXRoZHJhdyBhbGwgdGhlIGZ1bmRzIGZyb20gdGhpcyBjb250cmFjdC4KICAgKiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgb3duZXIuCiAgICovCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgewogICAgaWYgKCFvd25lci5zZW5kKHRoaXMuYmFsYW5jZSkpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9Cgpjb250cmFjdCBMb3R0ZXJ5Um91bmRGYWN0b3J5SW50ZXJmYWNlIHsKICBzdHJpbmcgcHVibGljIFZFUlNJT047CiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcik7Cn0KCmNvbnRyYWN0IExvdHRlcnlSb3VuZEZhY3RvcnlJbnRlcmZhY2VWMSBpcyBMb3R0ZXJ5Um91bmRGYWN0b3J5SW50ZXJmYWNlIHsKICBmdW5jdGlvbiBjcmVhdGVSb3VuZChieXRlczMyIF9zYWx0SGFzaCwgYnl0ZXMzMiBfc2FsdE5IYXNoKSBwYXlhYmxlIHJldHVybnMoYWRkcmVzcyk7Cn0KCmNvbnRyYWN0IExvdHRlcnlSb3VuZEludGVyZmFjZSB7CiAgYm9vbCBwdWJsaWMgd2lubmluZ051bWJlcnNQaWNrZWQ7CiAgdWludDI1NiBwdWJsaWMgY2xvc2luZ0Jsb2NrOwoKICBmdW5jdGlvbiBwaWNrVGlja2V0KGJ5dGVzNCBwaWNrcykgcGF5YWJsZTsKICBmdW5jdGlvbiByYW5kb21UaWNrZXQoKSBwYXlhYmxlOwoKICBmdW5jdGlvbiBwcm9vZk9mU2FsdChieXRlczMyIHNhbHQsIHVpbnQ4IE4pIGNvbnN0YW50IHJldHVybnMoYm9vbCk7CiAgZnVuY3Rpb24gY2xvc2VHYW1lKGJ5dGVzMzIgc2FsdCwgdWludDggTik7CiAgZnVuY3Rpb24gY2xhaW1Pd25lckZlZShhZGRyZXNzIHBheW91dCk7CiAgZnVuY3Rpb24gd2l0aGRyYXcoKTsKICBmdW5jdGlvbiBzaHV0ZG93bigpOwogIGZ1bmN0aW9uIGRpc3RyaWJ1dGVXaW5uaW5ncygpOwogIGZ1bmN0aW9uIGNsYWltUHJpemUoKTsKCiAgZnVuY3Rpb24gcGFpZE91dCgpIGNvbnN0YW50IHJldHVybnMoYm9vbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcik7Cn0KCi8qKgogKiBUaGUgYmFzZSBpbnRlcmZhY2UgaXMgd2hhdCB0aGUgcGFyZW50IGNvbnRyYWN0IGV4cGVjdHMgdG8gYmUgYWJsZSB0byB1c2UuCiAqIElmIHJ1bGVzIGNoYW5nZSBpbiB0aGUgZnV0dXJlLCBhbmQgbmV3IGxvZ2ljIGlzIGludHJvZHVjZWQsIGl0IG9ubHkgaGFzIHRvCiAqIGltcGxlbWVudCB0aGVzZSBtZXRob2RzLCB3dGloIHRoZSByb2xlIG9mIHRoZSBjdXJhdG9yIGJlaW5nIHVzZWQKICogdG8gZXhlY3V0ZSB0aGUgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IChpZiBhbnkpLgogKi8KY29udHJhY3QgTG90dGVyeUdhbWVMb2dpY0ludGVyZmFjZSB7CiAgYWRkcmVzcyBwdWJsaWMgY3VycmVudFJvdW5kOwogIGZ1bmN0aW9uIGZpbmFsaXplUm91bmQoKSByZXR1cm5zKGFkZHJlc3MpOwogIGZ1bmN0aW9uIGlzVXBncmFkZUFsbG93ZWQoKSBjb25zdGFudCByZXR1cm5zKGJvb2wpOwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpOwp9Cgpjb250cmFjdCBMb3R0ZXJ5R2FtZUxvZ2ljSW50ZXJmYWNlVjEgaXMgTG90dGVyeUdhbWVMb2dpY0ludGVyZmFjZSB7CiAgZnVuY3Rpb24gZGVwb3NpdCgpIHBheWFibGU7CiAgZnVuY3Rpb24gc2V0Q3VyYXRvcihhZGRyZXNzIG5ld0N1cmF0b3IpOwp9CgoKLyoqCiAqIENvcmUgZ2FtZSBsb2dpYy4gIEhhbmRsaW5ncyBtYW5hZ2VtZW50IG9mIHJvdW5kcywgY2Fycnktb3ZlciBiYWxhbmNlcywKICogcGF5aW5nIHdpbm5lcnMsIGV0Yy4gIFNlcGFyYXRlIGZyb20gdGhlIG1haW4gY29udHJhY3QgYmVjYXVzZSBpdCdzIG1vcmUKICogdGlnaHRseS1jb3VwbGVkIHRvIHRoZSBmYWN0b3J5L3JvdW5kIGxvZ2ljIHRoYW4gdGhlIGdhbWUgbG9naWMuICBUaGlzCiAqIGFsbG93cyBmb3IgbmV3IHJ1bGVzIGluIHRoZSBmdXR1cmUgKGUuZy4gcGFydGlhbCBwaWNrcywgZXRjKS4gIENhcnJpZXMKICogdGhlIGNhdmVhdCB0aGF0IGl0IGNhbm5vdCBiZSB1cGdyYWRlZCB1bnRpbCB0aGUgY3VycmVudCBydWxlcyBwcm9kdWNlCiAqIGEgd2lubmVyLCBhbmQgY2FuIG9ubHkgYmUgdXBncmFkZWQgaW4gdGhlIHBlcmlvZCBiZXR3ZWVuIGEgd2lubmVyIHVuZGVyCiAqIHRoZSBjdXJyZW50IHJ1bGVzIGFuZCB0aGUgbmV4dCByb3VuZCBiZWluZyBzdGFydGVkLgogKi8KY29udHJhY3QgTG90dGVyeUdhbWVMb2dpYyBpcyBMb3R0ZXJ5R2FtZUxvZ2ljSW50ZXJmYWNlVjEsIE93bmVkIHsKCiAgTG90dGVyeVJvdW5kRmFjdG9yeUludGVyZmFjZVYxIHB1YmxpYyByb3VuZEZhY3Rvcnk7CgogIGFkZHJlc3MgcHVibGljIGN1cmF0b3I7CgogIExvdHRlcnlSb3VuZEludGVyZmFjZSBwdWJsaWMgY3VycmVudFJvdW5kOwoKICBtb2RpZmllciBvbmx5V2hlbk5vUm91bmQgewogICAgaWYgKGN1cnJlbnRSb3VuZCAhPSBMb3R0ZXJ5Um91bmRJbnRlcmZhY2UoMCkpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUJlZm9yZURyYXcgewogICAgaWYgKAogICAgICBjdXJyZW50Um91bmQgPT0gTG90dGVyeVJvdW5kSW50ZXJmYWNlKDApIHx8CiAgICAgIGJsb2NrLm51bWJlciA8PSBjdXJyZW50Um91bmQuY2xvc2luZ0Jsb2NrKCkgfHwKICAgICAgY3VycmVudFJvdW5kLndpbm5pbmdOdW1iZXJzUGlja2VkKCkgPT0gdHJ1ZQogICAgKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlBZnRlckRyYXcgewogICAgaWYgKAogICAgICBjdXJyZW50Um91bmQgPT0gTG90dGVyeVJvdW5kSW50ZXJmYWNlKDApIHx8CiAgICAgIGN1cnJlbnRSb3VuZC53aW5uaW5nTnVtYmVyc1BpY2tlZCgpID09IGZhbHNlCiAgICApIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUN1cmF0b3IgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gY3VyYXRvcikgewogICAgICB0aHJvdzsKICAgIH0KICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5RnJvbUN1cnJlbnRSb3VuZCB7CiAgICBpZiAobXNnLnNlbmRlciAhPSBhZGRyZXNzKGN1cnJlbnRSb3VuZCkpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICBfOwogIH0KCiAgLyoqCiAgICogQ3JlYXRlcyB0aGUgY29yZSBsb2dpYyBvZiB0aGUgbG90dGVyeS4gIFJlcXVpcmVzIGEgcm91bmQgZmFjdG9yeQogICAqIGFuZCBhbiBpbml0aWFsIGN1cmF0b3IuCiAgICogQHBhcmFtIF9yb3VuZEZhY3RvcnkgIFRoZSBmYWN0b3J5IHRvIGdlbmVyYXRlIG5ldyByb3VuZHMKICAgKiBAcGFyYW0gX2N1cmF0b3IgICAgICAgVGhlIGluaXRpYWwgY3VyYXRvcgogICAqLwogIGZ1bmN0aW9uIExvdHRlcnlHYW1lTG9naWMoYWRkcmVzcyBfcm91bmRGYWN0b3J5LCBhZGRyZXNzIF9jdXJhdG9yKSB7CiAgICByb3VuZEZhY3RvcnkgPSBMb3R0ZXJ5Um91bmRGYWN0b3J5SW50ZXJmYWNlVjEoX3JvdW5kRmFjdG9yeSk7CiAgICBjdXJhdG9yID0gX2N1cmF0b3I7CiAgfQoKICAvKioKICAgKiBBbGxvd3MgdGhlIGN1cmF0b3IgdG8gaGFuZCBvdmVyIGN1cmF0aW9uIHJlc3BvbnNpYmlsaXRpZXMgdG8gc29tZW9uZSBlbHNlLgogICAqIEBwYXJhbSBuZXdDdXJhdG9yICBUaGUgbmV3IGN1cmF0b3IKICAgKi8KICBmdW5jdGlvbiBzZXRDdXJhdG9yKGFkZHJlc3MgbmV3Q3VyYXRvcikgb25seUN1cmF0b3Igb25seVdoZW5Ob1JvdW5kIHsKICAgIGN1cmF0b3IgPSBuZXdDdXJhdG9yOwogIH0KCiAgLyoqCiAgICogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHVwZ3JhZGluZyB0aGlzIGNvbnRyYWN0IGlzIGFsbG93ZWQuICBJbiBnZW5lcmFsLCBpZiB0aGVyZQogICAqIGlzIGEgcm91bmQgdW5kZXJ3YXksIG9yIHRoaXMgY29udHJhY3QgaXMgaG9sZGluZyBhIGJhbGFuY2UsIHVwZ3JhZGluZyBpcyBub3QgYWxsb3dlZC4KICAgKi8KICBmdW5jdGlvbiBpc1VwZ3JhZGVBbGxvd2VkKCkgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICByZXR1cm4gY3VycmVudFJvdW5kID09IExvdHRlcnlSb3VuZEludGVyZmFjZSgwKSAmJiB0aGlzLmJhbGFuY2UgPCAxIGZpbm5leTsKICB9CgogIC8qKgogICAqIFN0YXJ0cyBhIG5ldyByb3VuZC4gIENhbiBvbmx5IGJlIHN0YXJ0ZWQgYnkgdGhlIGN1cmF0b3IsIGFuZCBvbmx5IHdoZW4gdGhlcmUgaXMgbm8gcm91bmQKICAgKiBjdXJyZW50bHkgdW5kZXJ3YXkKICAgKiBAcGFyYW0gc2FsdEhhc2ggICAgU2VjcmV0IHNhbHQsIGhhc2hlZCBOIHRpbWVzLgogICAqIEBwYXJhbSBzYWx0Tkhhc2ggICBQcm9vZiBvZiBOLCBpbiB0aGUgZm9ybSBvZiBzaGEzKHNhbHQsIE4sIHNhbHQpCiAgICovCiAgZnVuY3Rpb24gc3RhcnRSb3VuZChieXRlczMyIHNhbHRIYXNoLCBieXRlczMyIHNhbHROSGFzaCkgb25seUN1cmF0b3Igb25seVdoZW5Ob1JvdW5kIHsKICAgIGlmICh0aGlzLmJhbGFuY2UgPiAwKSB7CiAgICAgIGN1cnJlbnRSb3VuZCA9IExvdHRlcnlSb3VuZEludGVyZmFjZSgKICAgICAgICByb3VuZEZhY3RvcnkuY3JlYXRlUm91bmQudmFsdWUodGhpcy5iYWxhbmNlKShzYWx0SGFzaCwgc2FsdE5IYXNoKQogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudFJvdW5kID0gTG90dGVyeVJvdW5kSW50ZXJmYWNlKHJvdW5kRmFjdG9yeS5jcmVhdGVSb3VuZChzYWx0SGFzaCwgc2FsdE5IYXNoKSk7CiAgICB9CiAgfQoKICAvKioKICAgKiBSZXZlYWwgdGhlIGNob3NlbiBzYWx0IGFuZCBudW1iZXIgb2YgaGFzaCBpdGVyYXRpb25zLCB0aGVuIGNsb3NlIHRoZSBjdXJyZW50IHJvdW5kbgogICAqIGFuZCBwaWNrIHRoZSB3aW5uaW5nIG51bWJlcnMKICAgKiBAcGFyYW0gc2FsdCAgIFRoZSBvcmlnaW5hbCBzYWx0CiAgICogQHBhcmFtIE4gICAgICBUaGUgb3JpZ2luYWwgTgogICAqLwogIGZ1bmN0aW9uIGNsb3NlUm91bmQoYnl0ZXMzMiBzYWx0LCB1aW50OCBOKSBvbmx5Q3VyYXRvciBvbmx5QmVmb3JlRHJhdyB7CiAgICBjdXJyZW50Um91bmQuY2xvc2VHYW1lKHNhbHQsIE4pOwogIH0KCiAgLyoqCiAgICogRmluYWxpemUgdGhlIHJvdW5kIGJlZm9yZSByZXR1cm5pbmcgaXQgYmFjayB0byB0aGUgdGhlIHBhcmVudCBjb250cmFjdCBmb3IKICAgKiBoaXN0b3JpY2FsIHB1cnBvc2VzLiAgQXR0ZW1wdHMgdG8gcGF5IHdpbm5lcnMgYW5kIHRoZSBjdXJhdG9yIGlmIHRoZXJlIHdhcyBhIHdpbm5pbmcKICAgKiBkcmF3LCBvdGhlcndpc2UsIHB1bGxzIHRoZSBiYWxhbmNlIG91dCBvZiB0aGUgcm91bmQgYmVmb3JlIGhhbmRpbmcgb3ZlciBvd25lcnNoaXAKICAgKiB0byB0aGUgY3VyYXRvci4KICAgKi8KICBmdW5jdGlvbiBmaW5hbGl6ZVJvdW5kKCkgb25seU93bmVyIG9ubHlBZnRlckRyYXcgcmV0dXJucyhhZGRyZXNzKSB7CiAgICBhZGRyZXNzIHJvdW5kQWRkcmVzcyA9IGFkZHJlc3MoY3VycmVudFJvdW5kKTsKICAgIGlmICghY3VycmVudFJvdW5kLnBhaWRPdXQoKSkgewogICAgICAvLyB3ZSdsbCBvbmx5IG1ha2Ugb25lIGF0dGVtcHQgaGVyZSB0byBwYXkgdGhlIHdpbm5lcnMKICAgICAgY3VycmVudFJvdW5kLmRpc3RyaWJ1dGVXaW5uaW5ncygpOwogICAgICBjdXJyZW50Um91bmQuY2xhaW1Pd25lckZlZShjdXJhdG9yKTsKICAgIH0gZWxzZSBpZiAoY3VycmVudFJvdW5kLmJhbGFuY2UgPiAwKSB7CiAgICAgIC8vIG90aGVyd2lzZSwgd2UgaGF2ZSBubyB3aW5uZXJzLCBzbyBqdXN0IHB1bGwgb3V0IGZ1bmRzIGluCiAgICAgIC8vIHByZXBhcmF0aW9uIGZvciB0aGUgbmV4dCByb3VuZC4KICAgICAgY3VycmVudFJvdW5kLndpdGhkcmF3KCk7CiAgICB9CgogICAgLy8gYmUgc3VyZSBzb21lb25lIGNhbiBoYW5kbGUgZGlzcHV0ZXMsIGV0YywgaWYgdGhleSBhcmlzZS4KICAgIC8vIG5vdCB0aGF0IHRoZXknbGwgYmUgYWJsZSB0byAqZG8qIGFueXRoaW5nLCBidXQgdGhleSBjYW4gYXQgbGVhc3QKICAgIC8vIHRyeSBjYWxsaW5nIGBkaXN0cmlidXRlV2lubmluZ3MoKWAgYWdhaW4uLi4KICAgIGN1cnJlbnRSb3VuZC50cmFuc2Zlck93bmVyc2hpcChjdXJhdG9yKTsKCiAgICAvLyBjbGVhciB0aGlzIHNoaXQgb3V0LgogICAgZGVsZXRlIGN1cnJlbnRSb3VuZDsKCiAgICAvLyBpZiB0aGVyZSBhcmUgb3Igd2VyZSBhbnkgcHJvYmxlbXMgZGlzdHJpYnV0aW5nIHdpbm5pbmdzLCB0aGUgd2lubmVycyBjYW4gYXR0ZW1wdCB0byB3aXRoZHJhdwogICAgLy8gZnVuZHMgZm9yIHRoZW1zZWx2ZXMuICBUaGUgY29udHJhY3RzIHdvbid0IGJlIGRlc3Ryb3llZCBzbyBsb25nIGFzIHRoZXkgaGF2ZSBmdW5kcyB0byBwYXkgb3V0LgogICAgLy8gaGFuZGxpbmcgdGhlbSBtaWdodCByZXF1aXJlIHNwZWNpYWwgY2FyZSBvciBzb21ldGhpbmcuCgogICAgcmV0dXJuIHJvdW5kQWRkcmVzczsKICB9CgogIC8qKgogICAqIE1vc3RseSBqdXN0IHVzZWQgZm9yIHRlc3RpbmcuICBUZWNobmljYWxseSwgdGhpcyBjb250cmFjdCBtYXkgYmUgc2VlZGVkIHdpdGggYW4gaW5pdGlhbCBkZXBvc2l0CiAgICogYmVmb3JlCiAgICovCiAgZnVuY3Rpb24gZGVwb3NpdCgpIHBheWFibGUgb25seU93bmVyIG9ubHlXaGVuTm9Sb3VuZCB7CiAgICAvLyBub29wLCBqdXN0IHVzZWQgZm9yIGRlcG9zaXRpbmcgZnVuZHMgZHVyaW5nIGFuIHVwZ3JhZGUuCiAgfQoKICAvKioKICAgKiBPbmx5IGFjY2VwdCBwYXltZW50cyBmcm9tIHRoZSBjdXJyZW50IHJvdW5kLiAgUmVxdWlyZWQgZHVlIHRvIGNhbGxpbmcgYC53aXRoZHJhd2AgYXQgcm91bmQncyBlbmQuCiAgICovCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSBvbmx5RnJvbUN1cnJlbnRSb3VuZCB7CiAgICAvLyBhbm90aGVyIG5vb3AsIHNpbmNlIHdlIGNhbiBvbmx5IHJlY2VpdmUgZnVuZHMgZnJvbSB0aGUgY3VycmVudCByb3VuZC4KICB9Cn0='.
	

]
