Class {
	#name : #SRTee477b54bcb99ad2f5f7dece17069188e3bb69f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTee477b54bcb99ad2f5f7dece17069188e3bb69f4 >> base64 [
	^ ''.
	

]
