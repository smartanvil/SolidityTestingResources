Class {
	#name : #SRT229f07c5df0d19919185dd08b61dd9a26151ddfe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT229f07c5df0d19919185dd08b61dd9a26151ddfe >> base64 [
	^ ''.
	

]
