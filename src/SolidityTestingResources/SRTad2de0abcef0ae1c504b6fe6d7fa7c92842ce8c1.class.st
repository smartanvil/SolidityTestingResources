Class {
	#name : #SRTad2de0abcef0ae1c504b6fe6d7fa7c92842ce8c1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad2de0abcef0ae1c504b6fe6d7fa7c92842ce8c1 >> base64 [
	^ ''.
	

]
