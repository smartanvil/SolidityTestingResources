Class {
	#name : #SRTdabe47206ec8bb074b6d138071542b808dcdc36a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdabe47206ec8bb074b6d138071542b808dcdc36a >> base64 [
	^ ''.
	

]
