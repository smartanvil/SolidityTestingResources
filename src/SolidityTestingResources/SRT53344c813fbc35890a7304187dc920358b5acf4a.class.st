Class {
	#name : #SRT53344c813fbc35890a7304187dc920358b5acf4a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53344c813fbc35890a7304187dc920358b5acf4a >> base64 [
	^ ''.
	

]
