Class {
	#name : #SRT2b34ebda72bade6e6e91883ca67eb23484b045fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2b34ebda72bade6e6e91883ca67eb23484b045fb >> base64 [
	^ ''.
	

]
