Class {
	#name : #SRT179c9d17b574e2c2296d66433d340dbe31474975,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT179c9d17b574e2c2296d66433d340dbe31474975 >> base64 [
	^ ''.
	

]
