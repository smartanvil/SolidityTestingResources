Class {
	#name : #SRT9c0c2c6d734d075a013c822b0cfea8917a3f5e75,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9c0c2c6d734d075a013c822b0cfea8917a3f5e75 >> base64 [
	^ ''.
	

]
