Class {
	#name : #SRT96a65609a7b84e8842732deb08f56c3e21ac6f8a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96a65609a7b84e8842732deb08f56c3e21ac6f8a >> base64 [
	^ ''.
	

]
