Class {
	#name : #SRTa1477980b4fbbe5a1eca65e2aee84bec79c133f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1477980b4fbbe5a1eca65e2aee84bec79c133f9 >> base64 [
	^ ''.
	

]
