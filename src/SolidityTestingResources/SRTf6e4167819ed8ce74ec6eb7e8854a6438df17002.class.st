Class {
	#name : #SRTf6e4167819ed8ce74ec6eb7e8854a6438df17002,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf6e4167819ed8ce74ec6eb7e8854a6438df17002 >> base64 [
	^ ''.
	

]
