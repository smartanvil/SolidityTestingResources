Class {
	#name : #SRT1400300399f6fc996a58846bc251e28282a97c2b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1400300399f6fc996a58846bc251e28282a97c2b >> base64 [
	^ ''.
	

]
