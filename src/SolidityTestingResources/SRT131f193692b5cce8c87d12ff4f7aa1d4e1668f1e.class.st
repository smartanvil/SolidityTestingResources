Class {
	#name : #SRT131f193692b5cce8c87d12ff4f7aa1d4e1668f1e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT131f193692b5cce8c87d12ff4f7aa1d4e1668f1e >> base64 [
	^ ''.
	

]
