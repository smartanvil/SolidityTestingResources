Class {
	#name : #SRT018c4031426917a769fe9964ab2650621642b8d7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT018c4031426917a769fe9964ab2650621642b8d7 >> base64 [
	^ ''.
	

]
