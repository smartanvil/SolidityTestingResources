Class {
	#name : #SRTb3f959713a058426921646a52fec9d73ec0f20e1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb3f959713a058426921646a52fec9d73ec0f20e1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgoKCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyKEVSQzIwQmFzaWMgdG9rZW4sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlckZyb20oRVJDMjAgdG9rZW4sIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgfQp9CgoKY29udHJhY3QgQ2hlY2thYmxlIHsKICAgIGFkZHJlc3MgcHJpdmF0ZSBzZXJ2aWNlQWNjb3VudDsKICAgIC8qKgogICAgICogRmxhZyBtZWFucyB0aGF0IGNvbnRyYWN0IGFjY2lkZW50IGFscmVhZHkgb2NjdXJzLgogICAgICovCiAgICBib29sIHByaXZhdGUgdHJpZ2dlcmVkID0gZmFsc2U7CgogICAgLy8gT2NjdXJzIHdoZW4gYWNjaWRlbnQgaGFwcGVuZWQuCiAgICBldmVudCBUcmlnZ2VyZWQodWludCBiYWxhbmNlKTsKCiAgICBmdW5jdGlvbiBDaGVja2FibGUoKSBwdWJsaWMgewogICAgICAgIHNlcnZpY2VBY2NvdW50ID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmVwbGFjZSBzZXJ2aWNlIGFjY291bnQgd2l0aCBuZXcgb25lLgogICAgICogQHBhcmFtIF9hY2NvdW50IFZhbGlkIHNlcnZpY2UgYWNjb3VudCBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VTZXJ2aWNlQWNjb3VudChhZGRyZXNzIF9hY2NvdW50KSBvbmx5U2VydmljZSBwdWJsaWMgewogICAgICAgIGFzc2VydChfYWNjb3VudCAhPSAwKTsKICAgICAgICBzZXJ2aWNlQWNjb3VudCA9IF9hY2NvdW50OwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJcyBjYWxsZXIgKHNlbmRlcikgc2VydmljZSBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBpc1NlcnZpY2VBY2NvdW50KCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gbXNnLnNlbmRlciA9PSBzZXJ2aWNlQWNjb3VudDsKICAgIH0KCiAgICAvKioKICAgICAqIFB1YmxpYyBjaGVjayBtZXRob2QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrKCkgb25seVNlcnZpY2Ugbm90VHJpZ2dlcmVkIHBheWFibGUgcHVibGljIHsKICAgICAgICBpZiAoaW50ZXJuYWxDaGVjaygpKSB7CiAgICAgICAgICAgIFRyaWdnZXJlZCh0aGlzLmJhbGFuY2UpOwogICAgICAgICAgICB0cmlnZ2VyZWQgPSB0cnVlOwogICAgICAgICAgICBpbnRlcm5hbEFjdGlvbigpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRG8gaW5uZXIgY2hlY2suCiAgICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBvZiBhY2NpZGVudCB0cmlnZ2VyZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJuYWxDaGVjaygpIGludGVybmFsIHJldHVybnMgKGJvb2wpOwoKICAgIC8qKgogICAgICogQGRldiBEbyBpbm5lciBhY3Rpb24gaWYgY2hlY2sgd2FzIHN1Y2Nlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGludGVybmFsQWN0aW9uKCkgaW50ZXJuYWw7CgogICAgbW9kaWZpZXIgb25seVNlcnZpY2UgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBzZXJ2aWNlQWNjb3VudCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RUcmlnZ2VyZWQoKSB7CiAgICAgICAgcmVxdWlyZSghdHJpZ2dlcmVkKTsKICAgICAgICBfOwogICAgfQp9CgoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgoKCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKCgovKioKICogQHRpdGxlIEJ1cm5hYmxlIFRva2VuCiAqIEBkZXYgVG9rZW4gdGhhdCBjYW4gYmUgaXJyZXZlcnNpYmx5IGJ1cm5lZCAoZGVzdHJveWVkKS4KICovCmNvbnRyYWN0IEJ1cm5hYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgQnVybnMgYSBzcGVjaWZpYyBhbW91bnQgb2YgdG9rZW5zLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIGJ1cm5lZC4KICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KfQoKCgoKLyoqCiAqIEB0aXRsZSBUb2tlblRpbWVsb2NrCiAqIEBkZXYgVG9rZW5UaW1lbG9jayBpcyBhIHRva2VuIGhvbGRlciBjb250cmFjdCB0aGF0IHdpbGwgYWxsb3cgYQogKiBiZW5lZmljaWFyeSB0byBleHRyYWN0IHRoZSB0b2tlbnMgYWZ0ZXIgYSBnaXZlbiByZWxlYXNlIHRpbWUKICovCmNvbnRyYWN0IFRva2VuVGltZWxvY2sgewogIHVzaW5nIFNhZmVFUkMyMCBmb3IgRVJDMjBCYXNpYzsKCiAgLy8gRVJDMjAgYmFzaWMgdG9rZW4gY29udHJhY3QgYmVpbmcgaGVsZAogIEVSQzIwQmFzaWMgcHVibGljIHRva2VuOwoKICAvLyBiZW5lZmljaWFyeSBvZiB0b2tlbnMgYWZ0ZXIgdGhleSBhcmUgcmVsZWFzZWQKICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgLy8gdGltZXN0YW1wIHdoZW4gdG9rZW4gcmVsZWFzZSBpcyBlbmFibGVkCiAgdWludDY0IHB1YmxpYyByZWxlYXNlVGltZTsKCiAgZnVuY3Rpb24gVG9rZW5UaW1lbG9jayhFUkMyMEJhc2ljIF90b2tlbiwgYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQ2NCBfcmVsZWFzZVRpbWUpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9yZWxlYXNlVGltZSA+IG5vdyk7CiAgICB0b2tlbiA9IF90b2tlbjsKICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgcmVsZWFzZVRpbWUgPSBfcmVsZWFzZVRpbWU7CiAgfQoKICAvKioKICAgKiBAbm90aWNlIFRyYW5zZmVycyB0b2tlbnMgaGVsZCBieSB0aW1lbG9jayB0byBiZW5lZmljaWFyeS4KICAgKi8KICBmdW5jdGlvbiByZWxlYXNlKCkgcHVibGljIHsKICAgIHJlcXVpcmUobm93ID49IHJlbGVhc2VUaW1lKTsKCiAgICB1aW50MjU2IGFtb3VudCA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CgogICAgdG9rZW4uc2FmZVRyYW5zZmVyKGJlbmVmaWNpYXJ5LCBhbW91bnQpOwogIH0KfQoKCmNvbnRyYWN0IHVzaW5nQ29uc3RzIHsKICAgIHVpbnQgY29uc3RhbnQgVE9LRU5fREVDSU1BTFMgPSAxODsKICAgIHVpbnQ4IGNvbnN0YW50IFRPS0VOX0RFQ0lNQUxTX1VJTlQ4ID0gMTg7CiAgICB1aW50IGNvbnN0YW50IFRPS0VOX0RFQ0lNQUxfTVVMVElQTElFUiA9IDEwICoqIFRPS0VOX0RFQ0lNQUxTOwoKICAgIHN0cmluZyBjb25zdGFudCBUT0tFTl9OQU1FID0gIkNyb25vcyI7CiAgICBzdHJpbmcgY29uc3RhbnQgVE9LRU5fU1lNQk9MID0gIkNSUyI7CiAgICBib29sIGNvbnN0YW50IFBBVVNFRCA9IHRydWU7CiAgICBhZGRyZXNzIGNvbnN0YW50IFRBUkdFVF9VU0VSID0gMHgyMTZDNjE5Q0I0NEJlRWU3NDZEQzc4MTc0MEMyMTVCY2UyM2ZBODkyOwogICAgdWludCBjb25zdGFudCBTVEFSVF9USU1FID0gMTUxODY5NzUwMDsKICAgIGJvb2wgY29uc3RhbnQgQ09OVElOVUVfTUlOVElORyA9IGZhbHNlOwp9CgoKY29udHJhY3QgRnJlZXphYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQ2NCkgaW50ZXJuYWwgcm9vdHM7CgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiB1aW50NjQpIGludGVybmFsIGNoYWluczsKCiAgICBldmVudCBGcmVlemVkKGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDY0IHJlbGVhc2UsIHVpbnQgYW1vdW50KTsKICAgIGV2ZW50IFJlbGVhc2VkKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludCBhbW91bnQpOwoKICAgIC8qKgogICAgICogQGRldiBnZXRzIHN1bW1hcnkgaW5mb3JtYXRpb24gYWJvdXQgYWxsIGZyZWV6ZSB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSBfYWRkciBBZGRyZXNzIG9mIGZyZWV6ZSB0b2tlbnMgb3duZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEZyZWV6aW5nU3VtbWFyeU9mKGFkZHJlc3MgX2FkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHRva2VuQW1vdW50LCB1aW50IGZyZWV6aW5nQ291bnQpIHsKICAgICAgICB1aW50IGNvdW50OwogICAgICAgIHVpbnQgdG90YWw7CiAgICAgICAgdWludDY0IHJlbGVhc2UgPSByb290c1tfYWRkcl07CiAgICAgICAgd2hpbGUgKHJlbGVhc2UgIT0gMCkgewogICAgICAgICAgICBjb3VudCArKzsKICAgICAgICAgICAgdG90YWwgKz0gYmFsYW5jZU9mKGFkZHJlc3Moa2VjY2FrMjU2KHRvS2V5KF9hZGRyLCByZWxlYXNlKSkpKTsKICAgICAgICAgICAgcmVsZWFzZSA9IGNoYWluc1t0b0tleShfYWRkciwgcmVsZWFzZSldOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICh0b3RhbCwgY291bnQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBnZXRzIGZyZWV6aW5nIGVuZCBkYXRlIGFuZCBmcmVlemluZyBiYWxhbmNlIGZvciB0aGUgZnJlZXppbmcgcG9ydGlvbiBzcGVjaWZpZWQgYnkgaW5kZXguCiAgICAgKiBAcGFyYW0gX2FkZHIgQWRkcmVzcyBvZiBmcmVlemUgdG9rZW5zIG93bmVyLgogICAgICogQHBhcmFtIF9pbmRleCBGcmVlemluZyBwb3J0aW9uIGluZGV4LiBJdCBvcmRlcmVkIGJ5IHJlbGVhc2UgZGF0ZSBkZXNjZW5kaW5nLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRGcmVlemluZyhhZGRyZXNzIF9hZGRyLCB1aW50IF9pbmRleCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCBfcmVsZWFzZSwgdWludCBfYmFsYW5jZSkgewogICAgICAgIHVpbnQ2NCByZWxlYXNlID0gcm9vdHNbX2FkZHJdOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9pbmRleDsgaSArKykgewogICAgICAgICAgICByZWxlYXNlID0gY2hhaW5zW3RvS2V5KF9hZGRyLCByZWxlYXNlKV07CiAgICAgICAgfQogICAgICAgIHJldHVybiAocmVsZWFzZSwgYmFsYW5jZU9mKGFkZHJlc3Moa2VjY2FrMjU2KHRvS2V5KF9hZGRyLCByZWxlYXNlKSkpKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGZyZWV6ZSB5b3VyIHRva2VucyB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgKiAgICAgIEJlIGNhcmVmdWwsIGdhcyB1c2FnZSBpcyBub3QgZGV0ZXJtaW5pc3RpYywKICAgICAqICAgICAgYW5kIGRlcGVuZHMgb24gaG93IG1hbnkgZnJlZXplcyBfdG8gYWRkcmVzcyBhbHJlYWR5IGhhcy4KICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGljaCB0b2tlbiB3aWxsIGJlIGZyZWV6ZS4KICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiB0b2tlbiB0byBmcmVlemUuCiAgICAgKiBAcGFyYW0gX3VudGlsIFJlbGVhc2UgZGF0ZSwgbXVzdCBiZSBpbiBmdXR1cmUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZyZWV6ZVRvKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQsIHVpbnQ2NCBfdW50aWwpIHB1YmxpYyB7CiAgICAgICAgYnl0ZXMzMiBjdXJyZW50S2V5ID0gdG9LZXkoX3RvLCBfdW50aWwpOwogICAgICAgIHRyYW5zZmVyKGFkZHJlc3Moa2VjY2FrMjU2KGN1cnJlbnRLZXkpKSwgX2Ftb3VudCk7CgogICAgICAgIGZyZWV6ZShfdG8sIF91bnRpbCk7CiAgICAgICAgRnJlZXplZChfdG8sIF91bnRpbCwgX2Ftb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IHJlbGVhc2UgZmlyc3QgYXZhaWxhYmxlIGZyZWV6aW5nIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZU9uY2UoKSBwdWJsaWMgewogICAgICAgIHVpbnQ2NCBoZWFkID0gcm9vdHNbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShoZWFkICE9IDApOwogICAgICAgIHJlcXVpcmUodWludDY0KGJsb2NrLnRpbWVzdGFtcCkgPiBoZWFkKTsKICAgICAgICBieXRlczMyIGN1cnJlbnRLZXkgPSB0b0tleShtc2cuc2VuZGVyLCBoZWFkKTsKCiAgICAgICAgdWludDY0IG5leHQgPSBjaGFpbnNbY3VycmVudEtleV07CgogICAgICAgIGFkZHJlc3MgY3VycmVudEFkZHJlc3MgPSBhZGRyZXNzKGtlY2NhazI1NihjdXJyZW50S2V5KSk7CiAgICAgICAgdWludCBhbW91bnQgPSBiYWxhbmNlc1tjdXJyZW50QWRkcmVzc107CiAgICAgICAgZGVsZXRlIGJhbGFuY2VzW2N1cnJlbnRBZGRyZXNzXTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwoKICAgICAgICBpZiAobmV4dCA9PSAwKSB7CiAgICAgICAgICAgIGRlbGV0ZSByb290c1ttc2cuc2VuZGVyXTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJvb3RzW21zZy5zZW5kZXJdID0gbmV4dDsKICAgICAgICB9CiAgICAgICAgUmVsZWFzZWQobXNnLnNlbmRlciwgYW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgcmVsZWFzZSBhbGwgYXZhaWxhYmxlIGZvciByZWxlYXNlIGZyZWV6aW5nIHRva2Vucy4gR2FzIHVzYWdlIGlzIG5vdCBkZXRlcm1pbmlzdGljIQogICAgICogQHJldHVybiBob3cgbWFueSB0b2tlbnMgd2FzIHJlbGVhc2VkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2VBbGwoKSBwdWJsaWMgcmV0dXJucyAodWludCB0b2tlbnMpIHsKICAgICAgICB1aW50IHJlbGVhc2U7CiAgICAgICAgdWludCBiYWxhbmNlOwogICAgICAgIChyZWxlYXNlLCBiYWxhbmNlKSA9IGdldEZyZWV6aW5nKG1zZy5zZW5kZXIsIDApOwogICAgICAgIHdoaWxlIChyZWxlYXNlICE9IDAgJiYgYmxvY2sudGltZXN0YW1wID4gcmVsZWFzZSkgewogICAgICAgICAgICByZWxlYXNlT25jZSgpOwogICAgICAgICAgICB0b2tlbnMgKz0gYmFsYW5jZTsKICAgICAgICAgICAgKHJlbGVhc2UsIGJhbGFuY2UpID0gZ2V0RnJlZXppbmcobXNnLnNlbmRlciwgMCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRvS2V5KGFkZHJlc3MgX2FkZHIsIHVpbnQgX3JlbGVhc2UpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgcmVzdWx0KSB7CiAgICAgICAgLy8gV0lTSCBtYXNjIHRvIGluY3JlYXNlIGVudHJvcHkKICAgICAgICByZXN1bHQgPSAweDU3NDk1MzQ4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICByZXN1bHQgOj0gb3IocmVzdWx0LCBtdWwoX2FkZHIsIDB4MTAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICByZXN1bHQgOj0gb3IocmVzdWx0LCBfcmVsZWFzZSkKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZnJlZXplKGFkZHJlc3MgX3RvLCB1aW50NjQgX3VudGlsKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdW50aWwgPiBibG9jay50aW1lc3RhbXApOwogICAgICAgIHVpbnQ2NCBoZWFkID0gcm9vdHNbX3RvXTsKCiAgICAgICAgaWYgKGhlYWQgPT0gMCkgewogICAgICAgICAgICByb290c1tfdG9dID0gX3VudGlsOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBieXRlczMyIGhlYWRLZXkgPSB0b0tleShfdG8sIGhlYWQpOwogICAgICAgIHVpbnQgcGFyZW50OwogICAgICAgIGJ5dGVzMzIgcGFyZW50S2V5OwoKICAgICAgICB3aGlsZSAoaGVhZCAhPSAwICYmIF91bnRpbCA+IGhlYWQpIHsKICAgICAgICAgICAgcGFyZW50ID0gaGVhZDsKICAgICAgICAgICAgcGFyZW50S2V5ID0gaGVhZEtleTsKCiAgICAgICAgICAgIGhlYWQgPSBjaGFpbnNbaGVhZEtleV07CiAgICAgICAgICAgIGhlYWRLZXkgPSB0b0tleShfdG8sIGhlYWQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKF91bnRpbCA9PSBoZWFkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChoZWFkICE9IDApIHsKICAgICAgICAgICAgY2hhaW5zW3RvS2V5KF90bywgX3VudGlsKV0gPSBoZWFkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmVudCA9PSAwKSB7CiAgICAgICAgICAgIHJvb3RzW190b10gPSBfdW50aWw7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBjaGFpbnNbcGFyZW50S2V5XSA9IF91bnRpbDsKICAgICAgICB9CiAgICB9Cn0KCgoKCgoKCmNvbnRyYWN0IEZyZWV6YWJsZU1pbnRhYmxlVG9rZW4gaXMgRnJlZXphYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW4gewogICAgLyoqCiAgICAgKiBAZGV2IE1pbnQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW4gdG8gdGhlIHNwZWNpZmllZCBhZGRyZXNzIGFuZCBmcmVlemUgaXQgdW50aWwgdGhlIHNwZWNpZmllZCBkYXRlLgogICAgICogICAgICBCZSBjYXJlZnVsLCBnYXMgdXNhZ2UgaXMgbm90IGRldGVybWluaXN0aWMsCiAgICAgKiAgICAgIGFuZCBkZXBlbmRzIG9uIGhvdyBtYW55IGZyZWV6ZXMgX3RvIGFkZHJlc3MgYWxyZWFkeSBoYXMuCiAgICAgKiBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gd2hpY2ggdG9rZW4gd2lsbCBiZSBmcmVlemUuCiAgICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgdG9rZW4gdG8gbWludCBhbmQgZnJlZXplLgogICAgICogQHBhcmFtIF91bnRpbCBSZWxlYXNlIGRhdGUsIG11c3QgYmUgaW4gZnV0dXJlLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50QW5kRnJlZXplKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQsIHVpbnQ2NCBfdW50aWwpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGJ5dGVzMzIgY3VycmVudEtleSA9IHRvS2V5KF90bywgX3VudGlsKTsKICAgICAgICBtaW50KGFkZHJlc3Moa2VjY2FrMjU2KGN1cnJlbnRLZXkpKSwgX2Ftb3VudCk7CgogICAgICAgIGZyZWV6ZShfdG8sIF91bnRpbCk7CiAgICAgICAgRnJlZXplZChfdG8sIF91bnRpbCwgX2Ftb3VudCk7CiAgICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZS4KICogQ3Jvd2RzYWxlcyBoYXZlIGEgc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzLCB3aGVyZSBpbnZlc3RvcnMgY2FuIG1ha2UKICogdG9rZW4gcHVyY2hhc2VzIGFuZCB0aGUgY3Jvd2RzYWxlIHdpbGwgYXNzaWduIHRoZW0gdG9rZW5zIGJhc2VkCiAqIG9uIGEgdG9rZW4gcGVyIEVUSCByYXRlLiBGdW5kcyBjb2xsZWN0ZWQgYXJlIGZvcndhcmRlZCB0byBhIHdhbGxldAogKiBhcyB0aGV5IGFycml2ZS4KICovCmNvbnRyYWN0IENyb3dkc2FsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgTWludGFibGVUb2tlbiBwdWJsaWMgdG9rZW47CgogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlOwoKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICBmdW5jdGlvbiBDcm93ZHNhbGUodWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9lbmRUaW1lLCB1aW50MjU2IF9yYXRlLCBhZGRyZXNzIF93YWxsZXQpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoX2VuZFRpbWUgPj0gX3N0YXJ0VGltZSk7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KCk7CiAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgcmF0ZSA9IF9yYXRlOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICB9CgogIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgLy8gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGF2ZSBjcm93ZHNhbGUgb2YgYSBzcGVjaWZpYyBtaW50YWJsZSB0b2tlbi4KICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgcmV0dXJuIG5ldyBNaW50YWJsZVRva2VuKCk7CiAgfQoKCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CgogICAgLy8gdXBkYXRlIHN0YXRlCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICBmb3J3YXJkRnVuZHMoKTsKICB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogIH0KCgp9CgoKCi8qKgogKiBAdGl0bGUgQ2FwcGVkQ3Jvd2RzYWxlCiAqIEBkZXYgRXh0ZW5zaW9uIG9mIENyb3dkc2FsZSB3aXRoIGEgbWF4IGFtb3VudCBvZiBmdW5kcyByYWlzZWQKICovCmNvbnRyYWN0IENhcHBlZENyb3dkc2FsZSBpcyBDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICB1aW50MjU2IHB1YmxpYyBjYXA7CgogIGZ1bmN0aW9uIENhcHBlZENyb3dkc2FsZSh1aW50MjU2IF9jYXApIHB1YmxpYyB7CiAgICByZXF1aXJlKF9jYXAgPiAwKTsKICAgIGNhcCA9IF9jYXA7CiAgfQoKICAvLyBvdmVycmlkaW5nIENyb3dkc2FsZSN2YWxpZFB1cmNoYXNlIHRvIGFkZCBleHRyYSBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgd2l0aGluQ2FwID0gd2VpUmFpc2VkLmFkZChtc2cudmFsdWUpIDw9IGNhcDsKICAgIHJldHVybiBzdXBlci52YWxpZFB1cmNoYXNlKCkgJiYgd2l0aGluQ2FwOwogIH0KCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjaGFzRW5kZWQgdG8gYWRkIGNhcCBsb2dpYwogIC8vIEByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIGNhcFJlYWNoZWQgPSB3ZWlSYWlzZWQgPj0gY2FwOwogICAgcmV0dXJuIHN1cGVyLmhhc0VuZGVkKCkgfHwgY2FwUmVhY2hlZDsKICB9Cgp9CgoKCi8qKgogKiBAdGl0bGUgRmluYWxpemFibGVDcm93ZHNhbGUKICogQGRldiBFeHRlbnNpb24gb2YgQ3Jvd2RzYWxlIHdoZXJlIGFuIG93bmVyIGNhbiBkbyBleHRyYSB3b3JrCiAqIGFmdGVyIGZpbmlzaGluZy4KICovCmNvbnRyYWN0IEZpbmFsaXphYmxlQ3Jvd2RzYWxlIGlzIENyb3dkc2FsZSwgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIGJvb2wgcHVibGljIGlzRmluYWxpemVkID0gZmFsc2U7CgogIGV2ZW50IEZpbmFsaXplZCgpOwoKICAvKioKICAgKiBAZGV2IE11c3QgYmUgY2FsbGVkIGFmdGVyIGNyb3dkc2FsZSBlbmRzLCB0byBkbyBzb21lIGV4dHJhIGZpbmFsaXphdGlvbgogICAqIHdvcmsuIENhbGxzIHRoZSBjb250cmFjdCdzIGZpbmFsaXphdGlvbiBmdW5jdGlvbi4KICAgKi8KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZSghaXNGaW5hbGl6ZWQpOwogICAgcmVxdWlyZShoYXNFbmRlZCgpKTsKCiAgICBmaW5hbGl6YXRpb24oKTsKICAgIEZpbmFsaXplZCgpOwoKICAgIGlzRmluYWxpemVkID0gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FuIGJlIG92ZXJyaWRkZW4gdG8gYWRkIGZpbmFsaXphdGlvbiBsb2dpYy4gVGhlIG92ZXJyaWRpbmcgZnVuY3Rpb24KICAgKiBzaG91bGQgY2FsbCBzdXBlci5maW5hbGl6YXRpb24oKSB0byBlbnN1cmUgdGhlIGNoYWluIG9mIGZpbmFsaXphdGlvbiBpcwogICAqIGV4ZWN1dGVkIGVudGlyZWx5LgogICAqLwogIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICB9Cn0KCgovKioKICogQHRpdGxlIFJlZnVuZFZhdWx0CiAqIEBkZXYgVGhpcyBjb250cmFjdCBpcyB1c2VkIGZvciBzdG9yaW5nIGZ1bmRzIHdoaWxlIGEgY3Jvd2RzYWxlCiAqIGlzIGluIHByb2dyZXNzLiBTdXBwb3J0cyByZWZ1bmRpbmcgdGhlIG1vbmV5IGlmIGNyb3dkc2FsZSBmYWlscywKICogYW5kIGZvcndhcmRpbmcgaXQgaWYgY3Jvd2RzYWxlIGlzIHN1Y2Nlc3NmdWwuCiAqLwpjb250cmFjdCBSZWZ1bmRWYXVsdCBpcyBPd25hYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgZW51bSBTdGF0ZSB7IEFjdGl2ZSwgUmVmdW5kaW5nLCBDbG9zZWQgfQoKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBkZXBvc2l0ZWQ7CiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwogIFN0YXRlIHB1YmxpYyBzdGF0ZTsKCiAgZXZlbnQgQ2xvc2VkKCk7CiAgZXZlbnQgUmVmdW5kc0VuYWJsZWQoKTsKICBldmVudCBSZWZ1bmRlZChhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgd2VpQW1vdW50KTsKCiAgZnVuY3Rpb24gUmVmdW5kVmF1bHQoYWRkcmVzcyBfd2FsbGV0KSBwdWJsaWMgewogICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICAgIHN0YXRlID0gU3RhdGUuQWN0aXZlOwogIH0KCiAgZnVuY3Rpb24gZGVwb3NpdChhZGRyZXNzIGludmVzdG9yKSBvbmx5T3duZXIgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgZGVwb3NpdGVkW2ludmVzdG9yXSA9IGRlcG9zaXRlZFtpbnZlc3Rvcl0uYWRkKG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBjbG9zZSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7CiAgICBDbG9zZWQoKTsKICAgIHdhbGxldC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogIH0KCiAgZnVuY3Rpb24gZW5hYmxlUmVmdW5kcygpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgc3RhdGUgPSBTdGF0ZS5SZWZ1bmRpbmc7CiAgICBSZWZ1bmRzRW5hYmxlZCgpOwogIH0KCiAgZnVuY3Rpb24gcmVmdW5kKGFkZHJlc3MgaW52ZXN0b3IpIHB1YmxpYyB7CiAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLlJlZnVuZGluZyk7CiAgICB1aW50MjU2IGRlcG9zaXRlZFZhbHVlID0gZGVwb3NpdGVkW2ludmVzdG9yXTsKICAgIGRlcG9zaXRlZFtpbnZlc3Rvcl0gPSAwOwogICAgaW52ZXN0b3IudHJhbnNmZXIoZGVwb3NpdGVkVmFsdWUpOwogICAgUmVmdW5kZWQoaW52ZXN0b3IsIGRlcG9zaXRlZFZhbHVlKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBSZWZ1bmRhYmxlQ3Jvd2RzYWxlCiAqIEBkZXYgRXh0ZW5zaW9uIG9mIENyb3dkc2FsZSBjb250cmFjdCB0aGF0IGFkZHMgYSBmdW5kaW5nIGdvYWwsIGFuZAogKiB0aGUgcG9zc2liaWxpdHkgb2YgdXNlcnMgZ2V0dGluZyBhIHJlZnVuZCBpZiBnb2FsIGlzIG5vdCBtZXQuCiAqIFVzZXMgYSBSZWZ1bmRWYXVsdCBhcyB0aGUgY3Jvd2RzYWxlJ3MgdmF1bHQuCiAqLwpjb250cmFjdCBSZWZ1bmRhYmxlQ3Jvd2RzYWxlIGlzIEZpbmFsaXphYmxlQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gbWluaW11bSBhbW91bnQgb2YgZnVuZHMgdG8gYmUgcmFpc2VkIGluIHdlaXMKICB1aW50MjU2IHB1YmxpYyBnb2FsOwoKICAvLyByZWZ1bmQgdmF1bHQgdXNlZCB0byBob2xkIGZ1bmRzIHdoaWxlIGNyb3dkc2FsZSBpcyBydW5uaW5nCiAgUmVmdW5kVmF1bHQgcHVibGljIHZhdWx0OwoKICBmdW5jdGlvbiBSZWZ1bmRhYmxlQ3Jvd2RzYWxlKHVpbnQyNTYgX2dvYWwpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9nb2FsID4gMCk7CiAgICB2YXVsdCA9IG5ldyBSZWZ1bmRWYXVsdCh3YWxsZXQpOwogICAgZ29hbCA9IF9nb2FsOwogIH0KCiAgLy8gV2UncmUgb3ZlcnJpZGluZyB0aGUgZnVuZCBmb3J3YXJkaW5nIGZyb20gQ3Jvd2RzYWxlLgogIC8vIEluIGFkZGl0aW9uIHRvIHNlbmRpbmcgdGhlIGZ1bmRzLCB3ZSB3YW50IHRvIGNhbGwKICAvLyB0aGUgUmVmdW5kVmF1bHQgZGVwb3NpdCBmdW5jdGlvbgogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIHZhdWx0LmRlcG9zaXQudmFsdWUobXNnLnZhbHVlKShtc2cuc2VuZGVyKTsKICB9CgogIC8vIGlmIGNyb3dkc2FsZSBpcyB1bnN1Y2Nlc3NmdWwsIGludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kcyBoZXJlCiAgZnVuY3Rpb24gY2xhaW1SZWZ1bmQoKSBwdWJsaWMgewogICAgcmVxdWlyZShpc0ZpbmFsaXplZCk7CiAgICByZXF1aXJlKCFnb2FsUmVhY2hlZCgpKTsKCiAgICB2YXVsdC5yZWZ1bmQobXNnLnNlbmRlcik7CiAgfQoKICAvLyB2YXVsdCBmaW5hbGl6YXRpb24gdGFzaywgY2FsbGVkIHdoZW4gb3duZXIgY2FsbHMgZmluYWxpemUoKQogIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICAgIGlmIChnb2FsUmVhY2hlZCgpKSB7CiAgICAgIHZhdWx0LmNsb3NlKCk7CiAgICB9IGVsc2UgewogICAgICB2YXVsdC5lbmFibGVSZWZ1bmRzKCk7CiAgICB9CgogICAgc3VwZXIuZmluYWxpemF0aW9uKCk7CiAgfQoKICBmdW5jdGlvbiBnb2FsUmVhY2hlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB3ZWlSYWlzZWQgPj0gZ29hbDsKICB9Cgp9CgoKCgoKY29udHJhY3QgQm9udXNhYmxlQ3Jvd2RzYWxlIGlzIHVzaW5nQ29uc3RzLCBDcm93ZHNhbGUgewoKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgICAgICB1aW50MjU2IGJvbnVzUmF0ZSA9IGdldEJvbnVzUmF0ZSh3ZWlBbW91bnQpOwogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChib251c1JhdGUpLmRpdigxIGV0aGVyKTsKCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Qm9udXNSYXRlKHVpbnQyNTYgd2VpQW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBib251c1JhdGUgPSByYXRlOwoKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgLy8gYXBwbHkgYW1vdW50CiAgICAgICAgdWludFsyXSBtZW1vcnkgd2VpQW1vdW50Qm91bmRhcmllcyA9IFt1aW50KDQzMzMwMDAwMDAwMDAwMDAwMDAwMDApLHVpbnQoMTAwMDAwMDAwMDAwMDAwMDAwMDApXTsKICAgICAgICB1aW50WzJdIG1lbW9yeSB3ZWlBbW91bnRSYXRlcyA9IFt1aW50KDApLHVpbnQoMTUwKV07CgogICAgICAgIGZvciAodWludCBqID0gMDsgaiA8IDI7IGorKykgewogICAgICAgICAgICBpZiAod2VpQW1vdW50ID49IHdlaUFtb3VudEJvdW5kYXJpZXNbal0pIHsKICAgICAgICAgICAgICAgIGJvbnVzUmF0ZSArPSBib251c1JhdGUgKiB3ZWlBbW91bnRSYXRlc1tqXSAvIDEwMDA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKCiAgICAgICAgcmV0dXJuIGJvbnVzUmF0ZTsKICAgIH0KfQoKCmNvbnRyYWN0IE1haW5Dcm93ZHNhbGUgaXMgdXNpbmdDb25zdHMsIEZpbmFsaXphYmxlQ3Jvd2RzYWxlIHsKICAgIGZ1bmN0aW9uIGhhc1N0YXJ0ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBub3cgPj0gc3RhcnRUaW1lOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBvdmVycmlkZSB0b2tlbiBjcmVhdGlvbiB0byBpbnRlZ3JhdGUgd2l0aCBNeVdpc2ggdG9rZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoKSBpbnRlcm5hbCByZXR1cm5zIChNaW50YWJsZVRva2VuKSB7CiAgICAgICAgcmV0dXJuIG5ldyBNYWluVG9rZW4oKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmaW5hbGl6YXRpb24oKSBpbnRlcm5hbCB7CiAgICAgICAgc3VwZXIuZmluYWxpemF0aW9uKCk7CiAgICAgICAgaWYgKENPTlRJTlVFX01JTlRJTkcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKFBBVVNFRCkgewogICAgICAgICAgICBNYWluVG9rZW4odG9rZW4pLnVucGF1c2UoKTsKICAgICAgICB9CiAgICAgICAgdG9rZW4uZmluaXNoTWludGluZygpOwogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKFRBUkdFVF9VU0VSKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpLmRpdigxIGV0aGVyKTsKCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9Cn0KCgpjb250cmFjdCBNYWluVG9rZW4gaXMgdXNpbmdDb25zdHMsIEZyZWV6YWJsZU1pbnRhYmxlVG9rZW4sIEJ1cm5hYmxlVG9rZW4sIFBhdXNhYmxlIHsKICAgIGZ1bmN0aW9uIE1haW5Ub2tlbigpIHsKICAgICAgICBpZiAoUEFVU0VEKSB7CiAgICAgICAgICAgIHBhdXNlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAoc3RyaW5nIF9uYW1lKSB7CiAgICAgICAgcmV0dXJuIFRPS0VOX05BTUU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHN0cmluZyBfc3ltYm9sKSB7CiAgICAgICAgcmV0dXJuIFRPS0VOX1NZTUJPTDsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50OCBfZGVjaW1hbHMpIHsKICAgICAgICByZXR1cm4gVE9LRU5fREVDSU1BTFNfVUlOVDg7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBfc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBfc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KfQoKY29udHJhY3QgVGVtcGxhdGVDcm93ZHNhbGUgaXMgdXNpbmdDb25zdHMsIE1haW5Dcm93ZHNhbGUKCiwgQm9udXNhYmxlQ3Jvd2RzYWxlCgoKLCBDYXBwZWRDcm93ZHNhbGUKCnsKICAgIGV2ZW50IEluaXRpYWxpemVkKCk7CiAgICBib29sIHB1YmxpYyBpbml0aWFsaXplZCA9IGZhbHNlOwoKICAgIGZ1bmN0aW9uIFRlbXBsYXRlQ3Jvd2RzYWxlKE1pbnRhYmxlVG9rZW4gX3Rva2VuKQogICAgQ3Jvd2RzYWxlKFNUQVJUX1RJTUUgPiBub3cgPyBTVEFSVF9USU1FIDogbm93LCAxNTE4NzA4NzgwLCAyNTAwICogVE9LRU5fREVDSU1BTF9NVUxUSVBMSUVSLCBUQVJHRVRfVVNFUikKICAgIENhcHBlZENyb3dkc2FsZSg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwKQoKICAgIHsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgIH0KCiAgICBmdW5jdGlvbiBpbml0KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSghaW5pdGlhbGl6ZWQpOwogICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTsKCgogICAgICAgIGFkZHJlc3NbNF0gbWVtb3J5IGFkZHJlc3NlcyA9IFthZGRyZXNzKDB4NDdhZDY4MTJiZDNiMTA0NjRmODg3MzhhYjMwNWExMmRjNDA0ZTY5MyksYWRkcmVzcygweGY1YjBlMjg2YTkzY2FiYjViZjExMGU4YjU4OGY1ZDg3NmE0NmFkYTQpLGFkZHJlc3MoMHgzOGNmYTJlNWU5NGE1MWY2MzY1ZDM5ZjQ1MjllNWFlZjM1MWVmMDM1KSxhZGRyZXNzKDB4M2ZjMWE5ZTU5YjQxNmY4ZjllNTUwYmJhNjEzNmU3YjUxMGI2MjA1YildOwogICAgICAgIHVpbnRbNF0gbWVtb3J5IGFtb3VudHMgPSBbdWludCgzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApLHVpbnQoMTYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCksdWludCg1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApLHVpbnQoODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKV07CiAgICAgICAgdWludDY0WzRdIG1lbW9yeSBmcmVlemVzID0gW3VpbnQ2NCgwKSx1aW50NjQoMCksdWludDY0KDApLHVpbnQ2NCgwKV07CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkgKyspIHsKICAgICAgICAgICAgaWYgKGZyZWV6ZXNbaV0gPT0gMCkgewogICAgICAgICAgICAgICAgdG9rZW4ubWludChhZGRyZXNzZXNbaV0sIGFtb3VudHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgRnJlZXphYmxlTWludGFibGVUb2tlbih0b2tlbikubWludEFuZEZyZWV6ZShhZGRyZXNzZXNbaV0sIGFtb3VudHNbaV0sIGZyZWV6ZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKCiAgICAgICAgdHJhbnNmZXJPd25lcnNoaXAoVEFSR0VUX1VTRVIpOwogICAgICAgIEluaXRpYWxpemVkKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IG92ZXJyaWRlIHRva2VuIGNyZWF0aW9uIHRvIHNldCB0b2tlbiBhZGRyZXNzIGluIGNvbnN0cnVjdG9yLgogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgICAgIHJldHVybiBNaW50YWJsZVRva2VuKDApOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICAgICAgICBzdXBlci5maW5hbGl6YXRpb24oKTsKCiAgICB9CgoKfQ=='.
	

]
