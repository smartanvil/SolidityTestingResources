Class {
	#name : #SRTe1fee26c5fd6c6e58cc1cc976e4eeb63b9b3e44f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe1fee26c5fd6c6e58cc1cc976e4eeb63b9b3e44f >> base64 [
	^ ''.
	

]
