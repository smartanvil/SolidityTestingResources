Class {
	#name : #SRT51541130834f4408f0ac2a3af88318e1c30a1d3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51541130834f4408f0ac2a3af88318e1c30a1d3d >> base64 [
	^ ''.
	

]
