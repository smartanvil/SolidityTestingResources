Class {
	#name : #SRT138A8752093F4f9a79AaeDF48d4B9248fab93c9C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT138A8752093F4f9a79AaeDF48d4B9248fab93c9C >> base64 [
	^ ''.
	

]
