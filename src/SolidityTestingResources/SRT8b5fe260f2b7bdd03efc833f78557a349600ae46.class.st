Class {
	#name : #SRT8b5fe260f2b7bdd03efc833f78557a349600ae46,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b5fe260f2b7bdd03efc833f78557a349600ae46 >> base64 [
	^ ''.
	

]
