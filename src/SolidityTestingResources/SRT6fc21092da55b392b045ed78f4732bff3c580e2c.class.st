Class {
	#name : #SRT6fc21092da55b392b045ed78f4732bff3c580e2c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6fc21092da55b392b045ed78f4732bff3c580e2c >> base64 [
	^ ''.
	

]
