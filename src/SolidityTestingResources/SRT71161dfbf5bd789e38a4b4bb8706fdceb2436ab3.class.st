Class {
	#name : #SRT71161dfbf5bd789e38a4b4bb8706fdceb2436ab3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT71161dfbf5bd789e38a4b4bb8706fdceb2436ab3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIGFzc2VydChiID4gMCk7CiAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgcmV0dXJuIGM7CiAgICB9Cgp9Cgpjb250cmFjdCBUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IE1vbmRvIGlzIFNhZmVNYXRoLCBTdGFuZGFyZFRva2VuIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiTW9uZG8gVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiTU5EIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICAKICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwUHJlSUNPMDIgPSAgNTAwMDAwMCoxMCoqZGVjaW1hbHM7CiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkNhcFByZUlDTzE1ID0gIDYwMDAwMDAqMTAqKmRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkNhcCA9IDEyNTAwMDAwKjEwKipkZWNpbWFsczsKCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBvd25lciA9IDB4MDA3N0RBOURGNjUwNzY1NUNEYjNhQjkyNzdBMzQ3RURlNzU5RjkzRjsKCiAgICAvLyAxIEVUSCA9IDMwMCBVU0QgRGF0ZTogMTEuMDguMjAxNwogICAgdWludCBwcml2YXRlIG9uZVRva2VuSW5XZWlTYWxlMSA9IDcwMTc1NDM4NTk2NDkxOyAvLyAwLDAyICQKICAgIHVpbnQgcHJpdmF0ZSBvbmVUb2tlbkluV2VpMVNhbGUyID0gNTI2MzE1Nzg5NDczNjg0OyAvLyAwLDE1ICQKICAgIHVpbnQgcHJpdmF0ZSBvbmVUb2tlbkluV2VpID0gNTQ3MzY4NDIxMDUyNjMyMDsgLy8gMSw1NiAkCiAgICAKICAgIFBoYXNlIHB1YmxpYyBjdXJyZW50UGhhc2UgPSBQaGFzZS5QcmVJQ08xOwogICAgCiAgICBlbnVtIFBoYXNlIHsKICAgICAgICBQcmVJQ08xLAogICAgICAgIFByZUlDTzIsCiAgICAgICAgSUNPCiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZihvd25lciAhPSBtc2cuc2VuZGVyKSByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIGV2ZW50IENyZWF0ZU1ORChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gTW9uZG8oKSB7fQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGNyZWF0ZVRva2VucygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VucygpIGludGVybmFsIHsKICAgICAgICBpZiAobXNnLnZhbHVlIDw9IDApIHJldmVydCgpOwogICAgICAgIAogICAgICAgIGlmIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUHJlSUNPMSkgewogICAgICAgICAgICBpZiAodG90YWxTdXBwbHkgPD0gdG9rZW5DcmVhdGlvbkNhcFByZUlDTzAyKSB7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRva2VucyhvbmVUb2tlbkluV2VpU2FsZTEpOwogICAgICAgICAgICB9CiAgICAgICAgfSAKICAgICAgICBlbHNlIGlmIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUHJlSUNPMikgewogICAgICAgICAgICBpZiAodG90YWxTdXBwbHkgPiB0b2tlbkNyZWF0aW9uQ2FwUHJlSUNPMDIgJiYgdG90YWxTdXBwbHkgPD0gdG9rZW5DcmVhdGlvbkNhcFByZUlDTzE1KSB7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRva2VucyhvbmVUb2tlbkluV2VpMVNhbGUyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuSUNPKSB7CiAgICAgICAgICAgIGlmICh0b3RhbFN1cHBseSA+IHRva2VuQ3JlYXRpb25DYXBQcmVJQ08xNSAmJiB0b3RhbFN1cHBseSA8PSB0b2tlbkNyZWF0aW9uQ2FwKSB7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRva2VucyhvbmVUb2tlbkluV2VpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7IAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5zKHVpbnQgX29uZVRva2VuSW5XZWkpIGludGVybmFsIHsKICAgICAgICB1aW50IG11bHRpcGxpZXIgPSAxMCAqKiBkZWNpbWFsczsKICAgICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVEaXYobXNnLnZhbHVlLCBfb25lVG9rZW5JbldlaSkqbXVsdGlwbGllcjsKICAgICAgICB1aW50MjU2IGNoZWNrZWRTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCB0b2tlbnMpOwogICAgICAgIGlmICh0b2tlbkNyZWF0aW9uQ2FwIDw9IGNoZWNrZWRTdXBwbHkpIHJldmVydCgpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2VuczsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CiAgICAgICAgQ3JlYXRlTU5EKG1zZy5zZW5kZXIsdG9rZW5zKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlUGhhc2VUb1ByZUlDTzIoKSBleHRlcm5hbCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuUHJlSUNPMjsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlUGhhc2VUb0lDTygpIGV4dGVybmFsIG9ubHlPd25lciByZXR1cm5zIChib29sKXsKICAgICAgICBjdXJyZW50UGhhc2UgPSBQaGFzZS5JQ087CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZVRva2VuUHJpY2UodWludCB0cGljbzEsIHVpbnQgdHBpY28yLCB1aW50IHRwaWNvKSBleHRlcm5hbCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgb25lVG9rZW5JbldlaVNhbGUxID0gdHBpY28xOwogICAgICAgIG9uZVRva2VuSW5XZWkxU2FsZTIgPSB0cGljbzI7CiAgICAgICAgb25lVG9rZW5JbldlaSA9IHRwaWNvOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKGJvb2wpewogICAgICBvd25lci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
