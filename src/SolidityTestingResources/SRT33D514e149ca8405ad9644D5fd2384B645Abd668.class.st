Class {
	#name : #SRT33D514e149ca8405ad9644D5fd2384B645Abd668,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33D514e149ca8405ad9644D5fd2384B645Abd668 >> base64 [
	^ ''.
	

]
