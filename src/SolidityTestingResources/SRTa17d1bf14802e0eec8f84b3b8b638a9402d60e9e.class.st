Class {
	#name : #SRTa17d1bf14802e0eec8f84b3b8b638a9402d60e9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa17d1bf14802e0eec8f84b3b8b638a9402d60e9e >> base64 [
	^ ''.
	

]
