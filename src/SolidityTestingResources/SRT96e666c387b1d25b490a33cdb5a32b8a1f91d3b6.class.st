Class {
	#name : #SRT96e666c387b1d25b490a33cdb5a32b8a1f91d3b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96e666c387b1d25b490a33cdb5a32b8a1f91d3b6 >> base64 [
	^ ''.
	

]
