Class {
	#name : #SRT50d828b7dabeafbeaa0027d7c26a37e4c5fa97a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50d828b7dabeafbeaa0027d7c26a37e4c5fa97a8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KY29udHJhY3QgU2FmZU1hdGggewoKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZURpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhICYmIGMgPj0gYik7CiAgICByZXR1cm4gYzsKICB9Cgp9CgovKioKICogU3RhbmRhcmQgRVJDMjAgdG9rZW4gd2l0aCBTaG9ydCBIYW5kIEF0dGFjayBhbmQgYXBwcm92ZSgpIHJhY2UgY29uZGl0aW9uIG1pdGlnYXRpb24uCiAqCiAqIEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDoKICogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFNhZmVNYXRoIHsKCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogIC8qIEFjdHVhbCBiYWxhbmNlcyBvZiB0b2tlbiBob2xkZXJzICovCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKICAvKiBhcHByb3ZlKCkgYWxsb3dhbmNlcyAqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICAvKioKICAgKgogICAqIEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrCiAgICoKICAgKiBodHRwOi8vdmVzc2VuZXMuY29tL3RoZS1lcmMyMC1zaG9ydC1hZGRyZXNzLWF0dGFjay1leHBsYWluZWQvCiAgICovCiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQyNTYgc2l6ZSkgewogICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0KTsKICAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICByZXF1aXJlKF90byAhPSAwKTsKICAgIHVpbnQyNTYgYmFsYW5jZUZyb20gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VGcm9tKTsKCiAgICAvLyBTYWZlTWF0aCBzYWZlU3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VGcm9tLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZShfdG8gIT0gMCk7CiAgICB1aW50MjU2IGFsbG93VG9UcmFucyA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgdWludDI1NiBiYWxhbmNlRnJvbSA9IGJhbGFuY2VzW19mcm9tXTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VGcm9tKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93VG9UcmFucyk7CgogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZUZyb20sIF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYWxsb3dUb1RyYW5zLCBfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKLy8gICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSB0aHJvdzsKICAgIC8vIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQXRvbWljIGluY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZwogICAqCiAgICogV29ya3MgYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICoKICAgKi8KICBmdW5jdGlvbiBhZGRBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hZGRlZFZhbHVlKQogIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpCiAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICB1aW50MjU2IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gc2FmZUFkZChvbGRWYWx1ZSwgX2FkZGVkVmFsdWUpOwogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEF0b21pYyBkZWNyZW1lbnQgb2YgYXBwcm92ZWQgc3BlbmRpbmcuCiAgICoKICAgKiBXb3JrcyBhcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKi8KICBmdW5jdGlvbiBzdWJBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9zdWJ0cmFjdGVkVmFsdWUpCiAgb25seVBheWxvYWRTaXplKDIgKiAzMikKICBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICB1aW50MjU2IG9sZFZhbCA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwoKICAgICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWwpIHsKICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gc2FmZVN1YihvbGRWYWwsIF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICB9CiAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgTWlncmF0aW9uQWdlbnQgewogIGZ1bmN0aW9uIG1pZ3JhdGVGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7Cn0KCmNvbnRyYWN0IFVwZ3JhZGVhYmxlVG9rZW4gaXMgT3duYWJsZSwgU3RhbmRhcmRUb2tlbiB7CiAgYWRkcmVzcyBwdWJsaWMgbWlncmF0aW9uQWdlbnQ7CgogIC8qKgogICAqIFNvbWVib2R5IGhhcyB1cGdyYWRlZCBzb21lIG9mIGhpcyB0b2tlbnMuCiAgICovCiAgZXZlbnQgVXBncmFkZShhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgLyoqCiAgICogTmV3IHVwZ3JhZGUgYWdlbnQgYXZhaWxhYmxlLgogICAqLwogIGV2ZW50IFVwZ3JhZGVBZ2VudFNldChhZGRyZXNzIGFnZW50KTsKCiAgICAvLyBNaWdyYXRlIHRva2VucyB0byB0aGUgbmV3IHRva2VuIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBtaWdyYXRlKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1pZ3JhdGlvbkFnZW50ICE9IDApOwogICAgICAgIHVpbnQgdmFsdWUgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIHZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIHZhbHVlKTsKICAgICAgICBNaWdyYXRpb25BZ2VudChtaWdyYXRpb25BZ2VudCkubWlncmF0ZUZyb20obXNnLnNlbmRlciwgdmFsdWUpOwogICAgICAgIFVwZ3JhZGUobXNnLnNlbmRlciwgbWlncmF0aW9uQWdlbnQsIHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgIHJlcXVpcmUobWlncmF0aW9uQWdlbnQgIT0gMCk7CiAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAwKTsKICAgICAgbWlncmF0ZSgpOwogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWlncmF0aW9uQWdlbnQoYWRkcmVzcyBfYWdlbnQpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICAgICAgbWlncmF0aW9uQWdlbnQgPSBfYWdlbnQ7CiAgICAgICAgVXBncmFkZUFnZW50U2V0KF9hZ2VudCk7CiAgICB9Cgp9CmNvbnRyYWN0IFNBQlRva2VuIGlzIFVwZ3JhZGVhYmxlVG9rZW4gewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgoKICBhZGRyZXNzIHB1YmxpYyBhbGxUb2tlbk93bmVyT25TdGFydDsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiU0FCQ29pbiI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiU0FCIjsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDY7CiAgCgogIGZ1bmN0aW9uIFNBQlRva2VuKCkgcHVibGljIHsKICAgIGFsbFRva2VuT3duZXJPblN0YXJ0ID0gbXNnLnNlbmRlcjsKICAgIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMDAwMDAwOwogICAgYmFsYW5jZXNbYWxsVG9rZW5Pd25lck9uU3RhcnRdID0gdG90YWxTdXBwbHk7CiAgICBNaW50KGFsbFRva2VuT3duZXJPblN0YXJ0LCB0b3RhbFN1cHBseSk7CiAgICBUcmFuc2ZlcigweDAsIGFsbFRva2VuT3duZXJPblN0YXJ0ICx0b3RhbFN1cHBseSk7CiAgICBNaW50RmluaXNoZWQoKTsKICB9CiAgCn0KCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNvbnRyYWN0IEljb1NBQlRva2VuIGlzIE93bmFibGUsIFNhZmVNYXRoIHsKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CiAgYWRkcmVzcyBwdWJsaWMgYWxsVG9rZW5BZGRyZXNzOwogIGJvb2wgcHVibGljIGVtZXJnZW5jeUZsYWdBbmRIaWRkZW5DYXAgPSBmYWxzZTsKICAvLyBVTklYIGZvcm1hdAogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IDE1MTU4ODgwMDA7IC8vIDE0IERlYyAyMDE3IDE5OjAwOjAwIEdNVAogIHVpbnQyNTYgcHVibGljIGVuZFRpbWUgPSAgIDE1MTg5OTg0MDA7IC8vIDEzIEphbiAyMDE4IDE5OjAwOjAwIEdNVAoKICB1aW50MjU2IHB1YmxpYyBVU0R0bzFFVEggPSAxMzAwOyAvLyAxIGV0aGVyID0gMTMwMCQKICB1aW50MjU2IHB1YmxpYyBwcmljZTsgCiAgdWludDI1NiBwdWJsaWMgdG90YWxUb2tlbnNTb2xkID0gMDsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBtYXhUb2tlbnNUb1NvbGQgPSA2MDAwMDAwMDAwMDAwMDsgLy8gNjAlICogKDEwMCAwMDAgMDAwLjAwMCAwMDApCiAgU0FCVG9rZW4gcHVibGljIHRva2VuOwoKICBmdW5jdGlvbiBJY29TQUJUb2tlbihhZGRyZXNzIF93YWxsZXQsIFNBQlRva2VuIF90b2tlbikgcHVibGljIHsKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICB0b2tlbiA9IF90b2tlbjsKICAgIGFsbFRva2VuQWRkcmVzcyA9IHRva2VuLmFsbFRva2VuT3duZXJPblN0YXJ0KCk7CiAgICBwcmljZSA9IDEgZXRoZXIgLyBVU0R0bzFFVEggLyAxMDAwMDAwOwogIH0KCiAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShub3cgPD0gZW5kVGltZSAmJiBub3cgPj0gc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoIWVtZXJnZW5jeUZsYWdBbmRIaWRkZW5DYXApOwogICAgcmVxdWlyZSh0b3RhbFRva2Vuc1NvbGQgPCBtYXhUb2tlbnNUb1NvbGQpOwogICAgdWludDI1NiB2YWx1ZSA9IG1zZy52YWx1ZTsKICAgIHVpbnQyNTYgdG9rZW5zVG9TZW5kID0gc2FmZURpdih2YWx1ZSwgcHJpY2UpOwogICAgcmVxdWlyZSh0b2tlbnNUb1NlbmQgPj0gNDAwMDAwMDAgJiYgdG9rZW5zVG9TZW5kIDw9IDUwMDAwMDAwMDAwMCk7CiAgICB1aW50MjU2IHZhbHVlVG9SZXR1cm4gPSBzYWZlU3ViKHZhbHVlLCB0b2tlbnNUb1NlbmQgKiBwcmljZSk7CiAgICB1aW50MjU2IHZhbHVlVG9XYWxsZXQgPSBzYWZlU3ViKHZhbHVlLCB2YWx1ZVRvUmV0dXJuKTsKCiAgICB3YWxsZXQudHJhbnNmZXIodmFsdWVUb1dhbGxldCk7CiAgICBpZiAodmFsdWVUb1JldHVybiA+IDApIHsKICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih2YWx1ZVRvUmV0dXJuKTsKICAgfQogICAgdG9rZW4udHJhbnNmZXJGcm9tKGFsbFRva2VuQWRkcmVzcywgbXNnLnNlbmRlciwgdG9rZW5zVG9TZW5kKTsKICAgIHRvdGFsVG9rZW5zU29sZCArPSB0b2tlbnNUb1NlbmQ7CiAgfQoKICAgIGZ1bmN0aW9uIENoYW5nZVVTRHRvMUVUSCh1aW50MjU2IF9VU0R0bzFFVEgpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIFVTRHRvMUVUSCA9IF9VU0R0bzFFVEg7CiAgICAgICAgQ2hhbmdlUHJpY2UoKTsKICAgIH0KCiAgZnVuY3Rpb24gQ2hhbmdlUHJpY2UoKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHVpbnQyNTYgcHJpY2VXZWlUb1VTRCA9IDEgZXRoZXIgLyBVU0R0bzFFVEg7CiAgICB1aW50MjU2IHByaWNlMW1Ub2tlbiA9IHByaWNlV2VpVG9VU0QgLyAxMDAwMDAwOyAvLyBkZWNpbWFscyA9IDYKICAgIGlmICggbm93IDw9IHN0YXJ0VGltZSArIDE1IGRheXMpIHsKICAgICAgcHJpY2UgPSBwcmljZTFtVG9rZW4gKiAxIC8gNDsgLy8gMS4wMDAwMDBUb2tlbiA9IDAuMjUgJCBmaXJzdCA1IGRheXMKICAgIH0gCiAgICBlbHNlIHsKICAgICAgaWYgKCBub3cgPD0gc3RhcnRUaW1lICsgMjUgZGF5cyApIHsKICAgICAgICBwcmljZSA9IHByaWNlMW1Ub2tlbiAqIDEgLyAyOyAvLyAxLjAwMDAwMFRva2VuID0gMC41ICQgbmV4dAogICAgICB9IAogICAgICBlbHNlIHsKICAgICAgICBwcmljZSA9IHByaWNlMW1Ub2tlbjsgLy8gMS4wMDAwMDBUb2tlbiA9IDEuMCAkIHRvIGVuZAogICAgICB9CiAgICB9CgogIH0KCiAgICBmdW5jdGlvbiBDaGFuZ2VTdGFydCh1aW50IF9zdGFydFRpbWUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlRW5kKHVpbnQgX2VuZFRpbWUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIH0KCgogIGZ1bmN0aW9uIGVtZXJnZW5jeUFuZEhpZGRlbkNhcFRvZ2dsZSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgZW1lcmdlbmN5RmxhZ0FuZEhpZGRlbkNhcCA9ICFlbWVyZ2VuY3lGbGFnQW5kSGlkZGVuQ2FwOwogIH0KCn0='.
	

]
