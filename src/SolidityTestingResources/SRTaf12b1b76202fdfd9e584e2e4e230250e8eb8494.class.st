Class {
	#name : #SRTaf12b1b76202fdfd9e584e2e4e230250e8eb8494,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf12b1b76202fdfd9e584e2e4e230250e8eb8494 >> base64 [
	^ ''.
	

]
