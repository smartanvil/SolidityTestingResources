Class {
	#name : #SRT01d5d0108589f3c52fcce6e65503bb6515e66698,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT01d5d0108589f3c52fcce6e65503bb6515e66698 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIE93bmVyc2hpcCBpbnRlcmZhY2UKICoKICogUGVybWluZW50IG93bmVyc2hpcAogKgogKiAjY3JlYXRlZCAwMS8xMC8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBJT3duZXJzaGlwIHsKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiBgX2FjY291bnRgIGlzIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FjY291bnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIKICAgICAqCiAgICAgKiBAcmV0dXJuIGFkZHJlc3MgVGhlIGN1cnJlbnQgb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T3duZXIoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKTsKfQoKCi8qKgogKiBAdGl0bGUgT3duZXJzaGlwCiAqCiAqIFBlcm1pbmVudCBvd25lcnNoaXAKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgT3duZXJzaGlwIGlzIElPd25lcnNoaXAgewoKICAgIC8vIE93bmVyCiAgICBhZGRyZXNzIGludGVybmFsIG93bmVyOwoKCiAgICAvKioKICAgICAqIFRoZSBwdWJsaXNoZXIgaXMgdGhlIGluaXRhbCBvd25lcgogICAgICovCiAgICBmdW5jdGlvbiBPd25lcnNoaXAoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEFjY2VzcyBpcyByZXN0cmljdGVkIHRvIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlfb3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiBgX2FjY291bnRgIGlzIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FjY291bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIF9hY2NvdW50ID09IG93bmVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIKICAgICAqCiAgICAgKiBAcmV0dXJuIGFkZHJlc3MgVGhlIGN1cnJlbnQgb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBvd25lcjsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgVHJhbnNmZXJhYmxlIG93bmVyc2hpcCBpbnRlcmZhY2UKICoKICogRW5oYW5jZXMgb3duZXJzaGlwIGJ5IGFsbG93aW5nIHRoZSBjdXJyZW50IG93bmVyIHRvIAogKiB0cmFuc2ZlciBvd25lcnNoaXAgdG8gYSBuZXcgb3duZXIKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgSVRyYW5zZmVyYWJsZU93bmVyc2hpcCB7CiAgICAKCiAgICAvKioKICAgICAqIFRyYW5zZmVyIG93bmVyc2hpcCB0byBgX25ld093bmVyYAogICAgICoKICAgICAqIEBwYXJhbSBfbmV3T3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdGhhdCB3aWxsIGJlY29tZSB0aGUgbmV3IG93bmVyIAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcik7Cn0KCgovKioKICogQHRpdGxlIFRyYW5zZmVyYWJsZSBvd25lcnNoaXAKICoKICogRW5oYW5jZXMgb3duZXJzaGlwIGJ5IGFsbG93aW5nIHRoZSBjdXJyZW50IG93bmVyIHRvIAogKiB0cmFuc2ZlciBvd25lcnNoaXAgdG8gYSBuZXcgb3duZXIKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgVHJhbnNmZXJhYmxlT3duZXJzaGlwIGlzIElUcmFuc2ZlcmFibGVPd25lcnNoaXAsIE93bmVyc2hpcCB7CgoKICAgIC8qKgogICAgICogVHJhbnNmZXIgb3duZXJzaGlwIHRvIGBfbmV3T3duZXJgCiAgICAgKgogICAgICogQHBhcmFtIF9uZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0aGF0IHdpbGwgYmVjb21lIHRoZSBuZXcgb3duZXIgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seV9vd25lciB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9Cn0KCgovKioKICogQHRpdGxlIE11bHRpLW93bmVkIGludGVyZmFjZQogKgogKiBJbnRlcmZhY2UgdGhhdCBhbGxvd3MgbXVsdGlwbGUgb3duZXJzCiAqCiAqICNjcmVhdGVkIDA5LzEwLzIwMTcKICogI2F1dGhvciBGcmFuayBCb25uZXQKICovCmNvbnRyYWN0IElNdWx0aU93bmVkIHsKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiBgX2FjY291bnRgIGlzIGFuIG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FjY291bnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGFtb3VudCBvZiBvd25lcnMKICAgICAqCiAgICAgKiBAcmV0dXJuIFRoZSBhbW91bnQgb2Ygb3duZXJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldE93bmVyQ291bnQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCgogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBvd25lciBhdCBgX2luZGV4YAogICAgICoKICAgICAqIEBwYXJhbSBfaW5kZXggVGhlIGluZGV4IG9mIHRoZSBvd25lcgogICAgICogQHJldHVybiBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXIgZm91bmQgYXQgYF9pbmRleGAKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T3duZXJBdCh1aW50IF9pbmRleCkgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CgoKICAgICAvKioKICAgICAqIEFkZHMgYF9hY2NvdW50YCBhcyBhIG5ldyBvd25lcgogICAgICoKICAgICAqIEBwYXJhbSBfYWNjb3VudCBUaGUgYWNjb3VudCB0byBhZGQgYXMgYW4gb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBfYWNjb3VudCk7CgoKICAgIC8qKgogICAgICogUmVtb3ZlcyBgX2FjY291bnRgIGFzIGFuIG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhY2NvdW50IHRvIHJlbW92ZSBhcyBhbiBvd25lcgogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmVPd25lcihhZGRyZXNzIF9hY2NvdW50KTsKfQoKCi8qKgogKiBAdGl0bGUgVG9rZW4gcmV0cmlldmUgaW50ZXJmYWNlCiAqCiAqIEFsbG93cyB0b2tlbnMgdG8gYmUgcmV0cmlldmVkIGZyb20gYSBjb250cmFjdAogKgogKiAjY3JlYXRlZCAyOS8wOS8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBJVG9rZW5SZXRyaWV2ZXIgewoKICAgIC8qKgogICAgICogRXh0cmFjdHMgdG9rZW5zIGZyb20gdGhlIGNvbnRyYWN0CiAgICAgKgogICAgICogQHBhcmFtIF90b2tlbkNvbnRyYWN0IFRoZSBhZGRyZXNzIG9mIEVSQzIwIGNvbXBhdGlibGUgdG9rZW4KICAgICAqLwogICAgZnVuY3Rpb24gcmV0cmlldmVUb2tlbnMoYWRkcmVzcyBfdG9rZW5Db250cmFjdCk7Cn0KCgovKioKICogQHRpdGxlIFRva2VuIHJldHJpZXZlCiAqCiAqIEFsbG93cyB0b2tlbnMgdG8gYmUgcmV0cmlldmVkIGZyb20gYSBjb250cmFjdAogKgogKiAjY3JlYXRlZCAxOC8xMC8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBUb2tlblJldHJpZXZlciBpcyBJVG9rZW5SZXRyaWV2ZXIgewoKICAgIC8qKgogICAgICogRXh0cmFjdHMgdG9rZW5zIGZyb20gdGhlIGNvbnRyYWN0CiAgICAgKgogICAgICogQHBhcmFtIF90b2tlbkNvbnRyYWN0IFRoZSBhZGRyZXNzIG9mIEVSQzIwIGNvbXBhdGlibGUgdG9rZW4KICAgICAqLwogICAgZnVuY3Rpb24gcmV0cmlldmVUb2tlbnMoYWRkcmVzcyBfdG9rZW5Db250cmFjdCkgcHVibGljIHsKICAgICAgICBJVG9rZW4gdG9rZW5JbnN0YW5jZSA9IElUb2tlbihfdG9rZW5Db250cmFjdCk7CiAgICAgICAgdWludCB0b2tlbkJhbGFuY2UgPSB0b2tlbkluc3RhbmNlLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICBpZiAodG9rZW5CYWxhbmNlID4gMCkgewogICAgICAgICAgICB0b2tlbkluc3RhbmNlLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2VuQmFsYW5jZSk7CiAgICAgICAgfQogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBUb2tlbiBvYnNlcnZlciBpbnRlcmZhY2UKICoKICogQWxsb3dzIGEgdG9rZW4gc21hcnQtY29udHJhY3QgdG8gbm90aWZ5IG9ic2VydmVycyAKICogd2hlbiB0b2tlbnMgYXJlIHJlY2VpdmVkCiAqCiAqICNjcmVhdGVkIDA5LzEwLzIwMTcKICogI2F1dGhvciBGcmFuayBCb25uZXQKICovCmNvbnRyYWN0IElUb2tlbk9ic2VydmVyIHsKCiAgICAvKioKICAgICAqIENhbGxlZCBieSB0aGUgb2JzZXJ2ZWQgdG9rZW4gc21hcnQtY29udHJhY3QgaW4gb3JkZXIgCiAgICAgKiB0byBub3RpZnkgdGhlIHRva2VuIG9ic2VydmVyIHdoZW4gdG9rZW5zIGFyZSByZWNlaXZlZAogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB0aGF0IHRoZSB0b2tlbnMgd2hlcmUgc2VuZCBmcm9tCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgd2FzIHJlY2VpdmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5vdGlmeVRva2Vuc1JlY2VpdmVkKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgQWJzdHJhY3QgdG9rZW4gb2JzZXJ2ZXIKICoKICogQWxsb3dzIG9ic2VydmVycyB0byBiZSBub3RpZmllZCBieSBhbiBvYnNlcnZlZCB0b2tlbiBzbWFydC1jb250cmFjdAogKiB3aGVuIHRva2VucyBhcmUgcmVjZWl2ZWQKICoKICogI2NyZWF0ZWQgMDkvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgVG9rZW5PYnNlcnZlciBpcyBJVG9rZW5PYnNlcnZlciB7CgogICAgLyoqCiAgICAgKiBDYWxsZWQgYnkgdGhlIG9ic2VydmVkIHRva2VuIHNtYXJ0LWNvbnRyYWN0IGluIG9yZGVyIAogICAgICogdG8gbm90aWZ5IHRoZSB0b2tlbiBvYnNlcnZlciB3aGVuIHRva2VucyBhcmUgcmVjZWl2ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgdGhhdCB0aGUgdG9rZW5zIHdoZXJlIHNlbmQgZnJvbQogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0aGF0IHdhcyByZWNlaXZlZAogICAgICovCiAgICBmdW5jdGlvbiBub3RpZnlUb2tlbnNSZWNlaXZlZChhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSkgcHVibGljIHsKICAgICAgICBvblRva2Vuc1JlY2VpdmVkKG1zZy5zZW5kZXIsIF9mcm9tLCBfdmFsdWUpOwogICAgfQoKCiAgICAvKioKICAgICAqIEV2ZW50IGhhbmRsZXIKICAgICAqIAogICAgICogQ2FsbGVkIGJ5IGBfdG9rZW5gIHdoZW4gYSB0b2tlbiBhbW91bnQgaXMgcmVjZWl2ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX3Rva2VuIFRoZSB0b2tlbiBjb250cmFjdCB0aGF0IHJlY2VpdmVkIHRoZSB0cmFuc2FjdGlvbgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhY2NvdW50IG9yIGNvbnRyYWN0IHRoYXQgc2VuZCB0aGUgdHJhbnNhY3Rpb24KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIHZhbHVlIG9mIHRva2VucyB0aGF0IHdoZXJlIHJlY2VpdmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9uVG9rZW5zUmVjZWl2ZWQoYWRkcmVzcyBfdG9rZW4sIGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbDsKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjAgY29tcGF0aWJsZSB0b2tlbiBpbnRlcmZhY2UKICoKICogLSBJbXBsZW1lbnRzIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAogKiAtIEltcGxlbWVudHMgc2hvcnQgYWRkcmVzcyBhdHRhY2sgZml4CiAqCiAqICNjcmVhdGVkIDI5LzA5LzIwMTcKICogI2F1dGhvciBGcmFuayBCb25uZXQKICovCmNvbnRyYWN0IElUb2tlbiB7IAoKICAgIC8qKiAKICAgICAqIEdldCB0aGUgdG90YWwgc3VwcGx5IG9mIHRva2VucwogICAgICogCiAgICAgKiBAcmV0dXJuIFRoZSB0b3RhbCBzdXBwbHkKICAgICAqLwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCgogICAgLyoqIAogICAgICogR2V0IGJhbGFuY2Ugb2YgYF9vd25lcmAgCiAgICAgKiAKICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgICogQHJldHVybiBUaGUgYmFsYW5jZQogICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKCiAgICAvKiogCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAgKiAKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wpOwoKCiAgICAvKiogCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgICAqIAogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKCgogICAgLyoqIAogICAgICogYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAgKiAKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKCgogICAgLyoqIAogICAgICogR2V0IHRoZSBhbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyB0aGF0IGBfc3BlbmRlcmAgaXMgYWxsb3dlZCB0byBzcGVuZCBmcm9tIGBfb3duZXJgCiAgICAgKiAKICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgICogQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7Cn0KCgovKioKICogQHRpdGxlIERjb3JwIFByb3h5CiAqCiAqIFNlcnZlcyBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgRGNvcnAgZnVuZHMsIGFsbG93aW5nIHRoZSBjb21tdW5pdHkgdGhlIGFiaWxpdHkgdG8gdm90ZSBvbiB0aGUgYWNjZXB0YW5jZSBvZiB0aGUgVkMgcGxhdGZvcm0sCiAqIGFuZCB0aGUgdHJhbnNmZXIgb2YgdG9rZW4gb3duZXJzaGlwLiBUaGlzIG1lY2hhbmlzbSBpcyBpbiBwbGFjZSB0byBhbGxvdyB0aGUgdW5sb2NraW5nIG9mIHRoZSBvcmlnaW5hbCBEUlAgdG9rZW4sIGFuZCB0byBhbGxvdyB0b2tlbiAKICogaG9sZGVycyB0byBjb252ZXJ0IHRvIERSUFUgb3IgRFJQUy4KCiAqIFRoaXMgcHJveHkgaXMgZGVwbG95ZWQgdXBvbiByZWNlaXZpbmcgdGhlIEV0aGVyIHRoYXQgaXMgY3VycmVudGx5IGhlbGQgYnkgdGhlIERSUCBDcm93ZHNhbGUgY29udHJhY3QuCiAqCiAqICNjcmVhdGVkIDE2LzEwLzIwMTcKICogI2F1dGhvciBGcmFuayBCb25uZXQKICovCmNvbnRyYWN0IERjb3JwUHJveHkgaXMgVG9rZW5PYnNlcnZlciwgVHJhbnNmZXJhYmxlT3duZXJzaGlwLCBUb2tlblJldHJpZXZlciB7CgogICAgZW51bSBTdGFnZXMgewogICAgICAgIERlcGxveWluZywKICAgICAgICBEZXBsb3llZCwKICAgICAgICBFeGVjdXRlZAogICAgfQoKICAgIHN0cnVjdCBCYWxhbmNlIHsKICAgICAgICB1aW50IGRycHM7CiAgICAgICAgdWludCBkcnB1OwogICAgICAgIHVpbnQgaW5kZXg7CiAgICB9CgogICAgc3RydWN0IFZvdGUgewogICAgICAgIHVpbnQgZGF0ZXRpbWU7CiAgICAgICAgYm9vbCBzdXBwb3J0OwogICAgICAgIHVpbnQgaW5kZXg7CiAgICB9CgogICAgc3RydWN0IFByb3Bvc2FsIHsKICAgICAgICB1aW50IGNyZWF0ZWRUaW1lc3RhbXA7CiAgICAgICAgdWludCBzdXBwb3J0aW5nV2VpZ2h0OwogICAgICAgIHVpbnQgcmVqZWN0aW5nV2VpZ2h0OwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBWb3RlKSB2b3RlczsKICAgICAgICBhZGRyZXNzW10gdm90ZUluZGV4OwogICAgICAgIHVpbnQgaW5kZXg7CiAgICB9CgogICAgLy8gU3RhdGUKICAgIFN0YWdlcyBwcml2YXRlIHN0YWdlOwoKICAgIC8vIFNldHRpbmdzCiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgVk9USU5HX0RVUkFUSU9OID0gNyBkYXlzOwogICAgdWludCBwcml2YXRlIGNvbnN0YW50IE1JTl9RVU9SVU0gPSA1OyAvLyA1JQoKICAgIC8vIEFsb2NhdGVkIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEJhbGFuY2UpIHByaXZhdGUgYWxsb2NhdGVkOwogICAgYWRkcmVzc1tdIHByaXZhdGUgYWxsb2NhdGVkSW5kZXg7CgogICAgLy8gUHJvcG9zYWxzCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gUHJvcG9zYWwpIHByaXZhdGUgcHJvcG9zYWxzOwogICAgYWRkcmVzc1tdIHByaXZhdGUgcHJvcG9zYWxJbmRleDsKCiAgICAvLyBUb2tlbnMKICAgIElUb2tlbiBwcml2YXRlIGRycHNUb2tlbjsKICAgIElUb2tlbiBwcml2YXRlIGRycHVUb2tlbjsKCiAgICAvLyBDcm93ZHNhbGUKICAgIGFkZHJlc3MgcHJpdmF0ZSBkcnBDcm93ZHNhbGU7CiAgICB1aW50IHB1YmxpYyBkcnBDcm93ZHNhbGVSZWNvcmRlZEJhbGFuY2U7CgoKICAgIC8qKgogICAgICogUmVxdWlyZSB0aGF0IHRoZSBwcm94eSBpcyBpbiBgX3N0YWdlYCAKICAgICAqLwogICAgbW9kaWZpZXIgb25seV9hdF9zdGFnZShTdGFnZXMgX3N0YWdlKSB7CiAgICAgICAgcmVxdWlyZShzdGFnZSA9PSBfc3RhZ2UpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogUmVxdWlyZSBgX3Rva2VuYCB0byBiZSBvbmUgb2YgdGhlIGRycCB0b2tlbnMKICAgICAqCiAgICAgKiBAcGFyYW0gX3Rva2VuIFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBtb2RpZmllciBvbmx5X2FjY2VwdGVkX3Rva2VuKGFkZHJlc3MgX3Rva2VuKSB7CiAgICAgICAgcmVxdWlyZShfdG9rZW4gPT0gYWRkcmVzcyhkcnBzVG9rZW4pIHx8IF90b2tlbiA9PSBhZGRyZXNzKGRycHVUb2tlbikpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogUmVxdWlyZSB0aGF0IGBfdG9rZW5gIGlzIG5vdCBvbmUgb2YgdGhlIGRycCB0b2tlbnMKICAgICAqCiAgICAgKiBAcGFyYW0gX3Rva2VuIFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBtb2RpZmllciBub3RfYWNjZXB0ZWRfdG9rZW4oYWRkcmVzcyBfdG9rZW4pIHsKICAgICAgICByZXF1aXJlKF90b2tlbiAhPSBhZGRyZXNzKGRycHNUb2tlbikgJiYgX3Rva2VuICE9IGFkZHJlc3MoZHJwdVRva2VuKSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXF1aXJlIHRoYXQgc2VuZGVyIGhhcyBtb3JlIHRoYW4gemVybyB0b2tlbnMgCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlfdG9rZW5faG9sZGVyKCkgewogICAgICAgIHJlcXVpcmUoYWxsb2NhdGVkW21zZy5zZW5kZXJdLmRycHMgPiAwIHx8IGFsbG9jYXRlZFttc2cuc2VuZGVyXS5kcnB1ID4gMCk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXF1aXJlIGBfcHJvcG9zZWRBZGRyZXNzYCB0byBoYXZlIGJlZW4gcHJvcG9zZWQgYWxyZWFkeQogICAgICoKICAgICAqIEBwYXJhbSBfcHJvcG9zZWRBZGRyZXNzIEFkZHJlc3MgdGhhdCBuZWVkcyB0byBiZSBwcm9wb3NlZAogICAgICovCiAgICBtb2RpZmllciBvbmx5X3Byb3Bvc2VkKGFkZHJlc3MgX3Byb3Bvc2VkQWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoaXNQcm9wb3NlZChfcHJvcG9zZWRBZGRyZXNzKSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXF1aXJlIHRoYXQgdGhlIHZvdGluZyBwZXJpb2QgZm9yIHRoZSBwcm9wb3NhbCBoYXMKICAgICAqIG5vdCB5ZXQgZW5kZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3Bvc2VkQWRkcmVzcyBBZGRyZXNzIHRoYXQgd2FzIHByb3Bvc2VkCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlfZHVyaW5nX3ZvdGluZ19wZXJpb2QoYWRkcmVzcyBfcHJvcG9zZWRBZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShub3cgPD0gcHJvcG9zYWxzW19wcm9wb3NlZEFkZHJlc3NdLmNyZWF0ZWRUaW1lc3RhbXAgKyBWT1RJTkdfRFVSQVRJT04pOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogUmVxdWlyZSB0aGF0IHRoZSB2b3RpbmcgcGVyaW9kIGZvciB0aGUgcHJvcG9zYWwgaGFzIGVuZGVkCiAgICAgKgogICAgICogQHBhcmFtIF9wcm9wb3NlZEFkZHJlc3MgQWRkcmVzcyB0aGF0IHdhcyBwcm9wb3NlZAogICAgICovCiAgICBtb2RpZmllciBvbmx5X2FmdGVyX3ZvdGluZ19wZXJpb2QoYWRkcmVzcyBfcHJvcG9zZWRBZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShub3cgPiBwcm9wb3NhbHNbX3Byb3Bvc2VkQWRkcmVzc10uY3JlYXRlZFRpbWVzdGFtcCArIFZPVElOR19EVVJBVElPTik7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXF1aXJlIHRoYXQgdGhlIHByb3Bvc2FsIGlzIHN1cHBvcnRlZAogICAgICoKICAgICAqIEBwYXJhbSBfcHJvcG9zZWRBZGRyZXNzIEFkZHJlc3MgdGhhdCB3YXMgcHJvcG9zZWQKICAgICAqLwogICAgbW9kaWZpZXIgb25seV93aGVuX3N1cHBvcnRlZChhZGRyZXNzIF9wcm9wb3NlZEFkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKGlzU3VwcG9ydGVkKF9wcm9wb3NlZEFkZHJlc3MsIGZhbHNlKSk7CiAgICAgICAgXzsKICAgIH0KICAgIAoKICAgIC8qKgogICAgICogQ29uc3RydWN0IHRoZSBwcm94eQogICAgICoKICAgICAqIEBwYXJhbSBfZHJwc1Rva2VuIFRoZSBuZXcgc2VjdXJpdHkgdG9rZW4KICAgICAqIEBwYXJhbSBfZHJwdVRva2VuIFRoZSBuZXcgdXRpbGl0eSB0b2tlbgogICAgICogQHBhcmFtIF9kcnBDcm93ZHNhbGUgUHJveHkgYWNjZXB0cyBhbmQgcmVxdWlyZXMgZXRoZXIgZnJvbSB0aGUgY3Jvd2RzYWxlCiAgICAgKi8KICAgIGZ1bmN0aW9uIERjb3JwUHJveHkoYWRkcmVzcyBfZHJwc1Rva2VuLCBhZGRyZXNzIF9kcnB1VG9rZW4sIGFkZHJlc3MgX2RycENyb3dkc2FsZSkgewogICAgICAgIGRycHNUb2tlbiA9IElUb2tlbihfZHJwc1Rva2VuKTsKICAgICAgICBkcnB1VG9rZW4gPSBJVG9rZW4oX2RycHVUb2tlbik7CiAgICAgICAgZHJwQ3Jvd2RzYWxlID0gX2RycENyb3dkc2FsZTsKICAgICAgICBkcnBDcm93ZHNhbGVSZWNvcmRlZEJhbGFuY2UgPSBfZHJwQ3Jvd2RzYWxlLmJhbGFuY2U7CiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuRGVwbG95aW5nOwogICAgfQoKCiAgICAvKioKICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJveHkgaXMgYmVpbmcgZGVwbG95ZWQKICAgICAqCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIHByb3h5IGlzIGluIHRoZSBkZXBsb3lpbmcgc3RhZ2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNEZXBsb3lpbmcoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdGFnZSA9PSBTdGFnZXMuRGVwbG95aW5nOwogICAgfQoKCiAgICAvKioKICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJveHkgaXMgZGVwbG95ZWQuIFRoZSBwcm94eSBpcyBkZXBsb3llZCAKICAgICAqIHdoZW4gaXQgcmVjZWl2ZXMgRXRoZXIgZnJvbSB0aGUgZHJwIGNyb3dkc2FsZSBjb250cmFjdAogICAgICoKICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgcHJveHkgaXMgZGVwbG95ZWQKICAgICAqLwogICAgZnVuY3Rpb24gaXNEZXBsb3llZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN0YWdlID09IFN0YWdlcy5EZXBsb3llZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBwcm9wb3NhbCwgYW5kIHdpdGggaXQgdGhlIHByb3h5IGl0c2VsZiwgaXMgCiAgICAgKiBhbHJlYWR5IGV4ZWN1dGVkIG9yIG5vdAogICAgICoKICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgcHJveHkgaXMgZXhlY3V0ZWQKICAgICAqLwogICAgZnVuY3Rpb24gaXNFeGVjdXRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN0YWdlID09IFN0YWdlcy5FeGVjdXRlZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBBY2NlcHQgZXRoIGZyb20gdGhlIGNyb3dkc2FsZSB3aGlsZSBkZXBsb3lpbmcKICAgICAqLwogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgb25seV9hdF9zdGFnZShTdGFnZXMuRGVwbG95aW5nKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGRycENyb3dkc2FsZSk7CiAgICB9CgoKICAgIC8qKgogICAgICogRGVwbG95IHRoZSBwcm94eQogICAgICovCiAgICBmdW5jdGlvbiBkZXBsb3koKSBvbmx5X293bmVyIG9ubHlfYXRfc3RhZ2UoU3RhZ2VzLkRlcGxveWluZykgewogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IGRycENyb3dkc2FsZVJlY29yZGVkQmFsYW5jZSk7CiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuRGVwbG95ZWQ7CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgY29tYmluZWQgdG90YWwgc3VwcGx5IG9mIGFsbCBkcnAgdG9rZW5zCiAgICAgKgogICAgICogQHJldHVybiBUaGUgY29tYmluZWQgdG90YWwgZHJwIHN1cHBseQogICAgICovCiAgICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBzdW0gPSAwOyAKICAgICAgICBzdW0gKz0gZHJwc1Rva2VuLnRvdGFsU3VwcGx5KCk7CiAgICAgICAgc3VtICs9IGRycHVUb2tlbi50b3RhbFN1cHBseSgpOwogICAgICAgIHJldHVybiBzdW07CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJucyB0cnVlIGlmIGBfb3duZXJgIGhhcyBhIGJhbGFuY2UgYWxsb2NhdGVkCiAgICAgKgogICAgICogQHBhcmFtIF9vd25lciBUaGUgYWNjb3VudCB0aGF0IHRoZSBiYWxhbmNlIGlzIGFsbG9jYXRlZCBmb3IKICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGVyZSBpcyBhIGJhbGFuY2UgdGhhdCBiZWxvbmdzIHRvIGBfb3duZXJgCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhc0JhbGFuY2UoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFsbG9jYXRlZEluZGV4Lmxlbmd0aCA+IDAgJiYgX293bmVyID09IGFsbG9jYXRlZEluZGV4W2FsbG9jYXRlZFtfb3duZXJdLmluZGV4XTsKICAgIH0KCgogICAgLyoqIAogICAgICogR2V0IHRoZSBhbGxvY2F0ZWQgZHJwcyB0b2tlbiBiYWxhbmNlIG9mIGBfb3duZXJgCiAgICAgKiAKICAgICAqIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3MgdG8gdGVzdCBhZ2FpbnN0CiAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGFsbG9jYXRlZCB0b2tlbiBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAgKiBAcmV0dXJuIFRoZSBhbGxvY2F0ZWQgZHJwcyB0b2tlbiBiYWxhbmNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBiYWxhbmNlID0gMDsKICAgICAgICBpZiAoYWRkcmVzcyhkcnBzVG9rZW4pID09IF90b2tlbikgewogICAgICAgICAgICBiYWxhbmNlID0gYWxsb2NhdGVkW19vd25lcl0uZHJwczsKICAgICAgICB9IAogICAgICAgIAogICAgICAgIGVsc2UgaWYgKGFkZHJlc3MoZHJwdVRva2VuKSA9PSBfdG9rZW4pIHsKICAgICAgICAgICAgYmFsYW5jZSA9IGFsbG9jYXRlZFtfb3duZXJdLmRycHU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYmFsYW5jZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYF9wcm9wb3NlZEFkZHJlc3NgIGlzIGFscmVhZHkgcHJvcG9zZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3Bvc2VkQWRkcmVzcyBBZGRyZXNzIHRoYXQgd2FzIHByb3Bvc2VkCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgYF9wcm9wb3NlZEFkZHJlc3NgIGlzIGFscmVhZHkgcHJvcG9zZWQgCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzUHJvcG9zZWQoYWRkcmVzcyBfcHJvcG9zZWRBZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBwcm9wb3NhbEluZGV4Lmxlbmd0aCA+IDAgJiYgX3Byb3Bvc2VkQWRkcmVzcyA9PSBwcm9wb3NhbEluZGV4W3Byb3Bvc2Fsc1tfcHJvcG9zZWRBZGRyZXNzXS5pbmRleF07CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgaG93IG1hbnkgcHJvcG9zYWxzIHdoZXJlIG1hZGUKICAgICAqCiAgICAgKiBAcmV0dXJuIFRoZSBhbW91bnQgb2YgcHJvcG9zYWxzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFByb3Bvc2FsQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBwcm9wb3NhbEluZGV4Lmxlbmd0aDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBQcm9wb3NlIHRoZSB0cmFuc2ZlciB0b2tlbiBvd25lcnNoaXAgYW5kIGFsbCBmdW5kcyB0byBgX3Byb3Bvc2VkQWRkcmVzc2AgCiAgICAgKgogICAgICogQHBhcmFtIF9wcm9wb3NlZEFkZHJlc3MgVGhlIHByb3Bvc2VkIERDT1JQIGFkZHJlc3MgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByb3Bvc2UoYWRkcmVzcyBfcHJvcG9zZWRBZGRyZXNzKSBwdWJsaWMgb25seV9vd25lciBvbmx5X2F0X3N0YWdlKFN0YWdlcy5EZXBsb3llZCkgewogICAgICAgIHJlcXVpcmUoIWlzUHJvcG9zZWQoX3Byb3Bvc2VkQWRkcmVzcykpOwoKICAgICAgICAvLyBBZGQgcHJvcG9zYWwKICAgICAgICBQcm9wb3NhbCBzdG9yYWdlIHAgPSBwcm9wb3NhbHNbX3Byb3Bvc2VkQWRkcmVzc107CiAgICAgICAgcC5jcmVhdGVkVGltZXN0YW1wID0gbm93OwogICAgICAgIHAuaW5kZXggPSBwcm9wb3NhbEluZGV4LnB1c2goX3Byb3Bvc2VkQWRkcmVzcykgLSAxOwogICAgfQoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIHZvdGluZyBkdXJhdGlvbiwgdGhlIGFtb3VudCBvZiB0aW1lIHZvdGluZyAKICAgICAqIGlzIGFsbG93ZWQKICAgICAqCiAgICAgKiBAcmV0dXJuIFZvdGluZyBkdXJhdGlvbgogICAgICovCiAgICBmdW5jdGlvbiBnZXRWb3RpbmdEdXJhdGlvbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7ICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gVk9USU5HX0RVUkFUSU9OOwogICAgfQoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIG51bWJlciBvZiB2b3RlcyB0b3dhcmRzIGEgcHJvcG9zYWwKICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3Bvc2VkQWRkcmVzcyBUaGUgcHJvcG9zZWQgRENPUlAgYWRkcmVzcyAKICAgICAqIEByZXR1cm4gdWludCBWb3RlIGNvdW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFZvdGVDb3VudChhZGRyZXNzIF9wcm9wb3NlZEFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7ICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gcHJvcG9zYWxzW19wcm9wb3NlZEFkZHJlc3NdLnZvdGVJbmRleC5sZW5ndGg7CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJucyB0cnVlIGlmIGBfYWNjb3VudGAgaGFzIHZvdGVkIG9uIHRoZSBwcm9wb3NhbAogICAgICoKICAgICAqIEBwYXJhbSBfcHJvcG9zZWRBZGRyZXNzIFRoZSBwcm9wb3NlZCBEQ09SUCBhZGRyZXNzIAogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBrZXkgKGFkZHJlc3MpIHRoYXQgbWFwcyB0byB0aGUgdm90ZQogICAgICogQHJldHVybiBib29sIFdoZXRoZXIgYF9hY2NvdW50YCBoYXMgdm90ZWQgb24gdGhlIHByb3Bvc2FsCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhc1ZvdGVkKGFkZHJlc3MgX3Byb3Bvc2VkQWRkcmVzcywgYWRkcmVzcyBfYWNjb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHZvdGVkID0gZmFsc2U7CiAgICAgICAgaWYgKGdldFZvdGVDb3VudChfcHJvcG9zZWRBZGRyZXNzKSA+IDApIHsKICAgICAgICAgICAgUHJvcG9zYWwgc3RvcmFnZSBwID0gcHJvcG9zYWxzW19wcm9wb3NlZEFkZHJlc3NdOwogICAgICAgICAgICB2b3RlZCA9IHAudm90ZUluZGV4W3Audm90ZXNbX2FjY291bnRdLmluZGV4XSA9PSBfYWNjb3VudDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB2b3RlZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYF9hY2NvdW50YCBzdXBwb3J0ZWQgdGhlIHByb3Bvc2FsIGFuZCByZXR1cm5zIAogICAgICogZmFsc2UgaWYgYF9hY2NvdW50YCBpcyBvcHBvc2VkIHRvIHRoZSBwcm9wb3NhbAogICAgICoKICAgICAqIERvZXMgbm90IGNoZWNrIGlmIGBfYWNjb3VudGAgaGFkIHZvdGVkLCB1c2UgaGFzVm90ZWQoKQogICAgICoKICAgICAqIEBwYXJhbSBfcHJvcG9zZWRBZGRyZXNzIFRoZSBwcm9wb3NlZCBEQ09SUCBhZGRyZXNzIAogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBrZXkgKGFkZHJlc3MpIHRoYXQgbWFwcyB0byB0aGUgdm90ZQogICAgICogQHJldHVybiBib29sIFN1cHBvcnRlZAogICAgICovCiAgICBmdW5jdGlvbiBnZXRWb3RlKGFkZHJlc3MgX3Byb3Bvc2VkQWRkcmVzcywgYWRkcmVzcyBfYWNjb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gcHJvcG9zYWxzW19wcm9wb3NlZEFkZHJlc3NdLnZvdGVzW19hY2NvdW50XS5zdXBwb3J0OwogICAgfQoKCiAgICAvKioKICAgICAqIEFsbG93cyBhIHRva2VuIGhvbGRlciB0byB2b3RlIG9uIGEgcHJvcG9zYWwKICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3Bvc2VkQWRkcmVzcyBUaGUgcHJvcG9zZWQgRENPUlAgYWRkcmVzcyAKICAgICAqIEBwYXJhbSBfc3VwcG9ydCBUcnVlIGlmIHN1cHBvcnRlZAogICAgICovCiAgICBmdW5jdGlvbiB2b3RlKGFkZHJlc3MgX3Byb3Bvc2VkQWRkcmVzcywgYm9vbCBfc3VwcG9ydCkgcHVibGljIG9ubHlfYXRfc3RhZ2UoU3RhZ2VzLkRlcGxveWVkKSBvbmx5X3Byb3Bvc2VkKF9wcm9wb3NlZEFkZHJlc3MpIG9ubHlfZHVyaW5nX3ZvdGluZ19wZXJpb2QoX3Byb3Bvc2VkQWRkcmVzcykgb25seV90b2tlbl9ob2xkZXIgeyAgICAKICAgICAgICBQcm9wb3NhbCBzdG9yYWdlIHAgPSBwcm9wb3NhbHNbX3Byb3Bvc2VkQWRkcmVzc107CiAgICAgICAgQmFsYW5jZSBzdG9yYWdlIGIgPSBhbGxvY2F0ZWRbbXNnLnNlbmRlcl07CiAgICAgICAgCiAgICAgICAgLy8gUmVnaXN0ZXIgdm90ZQogICAgICAgIGlmICghaGFzVm90ZWQoX3Byb3Bvc2VkQWRkcmVzcywgbXNnLnNlbmRlcikpIHsKICAgICAgICAgICAgcC52b3Rlc1ttc2cuc2VuZGVyXSA9IFZvdGUoCiAgICAgICAgICAgICAgICBub3csIF9zdXBwb3J0LCBwLnZvdGVJbmRleC5wdXNoKG1zZy5zZW5kZXIpIC0gMSk7CgogICAgICAgICAgICAvLyBSZWdpc3RlciB3ZWlnaHQKICAgICAgICAgICAgaWYgKF9zdXBwb3J0KSB7CiAgICAgICAgICAgICAgICBwLnN1cHBvcnRpbmdXZWlnaHQgKz0gYi5kcnBzICsgYi5kcnB1OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcC5yZWplY3RpbmdXZWlnaHQgKz0gYi5kcnBzICsgYi5kcnB1OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgVm90ZSBzdG9yYWdlIHYgPSBwLnZvdGVzW21zZy5zZW5kZXJdOwogICAgICAgICAgICBpZiAodi5zdXBwb3J0ICE9IF9zdXBwb3J0KSB7CgogICAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgY2hhbmdlZCB3ZWlnaHQKICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydCkgewogICAgICAgICAgICAgICAgICAgIHAuc3VwcG9ydGluZ1dlaWdodCArPSBiLmRycHMgKyBiLmRycHU7CiAgICAgICAgICAgICAgICAgICAgcC5yZWplY3RpbmdXZWlnaHQgLT0gYi5kcnBzICsgYi5kcnB1OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwLnJlamVjdGluZ1dlaWdodCArPSBiLmRycHMgKyBiLmRycHU7CiAgICAgICAgICAgICAgICAgICAgcC5zdXBwb3J0aW5nV2VpZ2h0IC09IGIuZHJwcyArIGIuZHJwdTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2LnN1cHBvcnQgPSBfc3VwcG9ydDsKICAgICAgICAgICAgICAgIHYuZGF0ZXRpbWUgPSBub3c7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2b3RpbmcgcmVzdWx0cyBmb3IgYSBwcm9wb3NhbAogICAgICoKICAgICAqIEBwYXJhbSBfcHJvcG9zZWRBZGRyZXNzIFRoZSBwcm9wb3NlZCBEQ09SUCBhZGRyZXNzIAogICAgICogQHJldHVybiBzdXBwb3J0ZWQsIHJlamVjdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFZvdGluZ1Jlc3VsdChhZGRyZXNzIF9wcm9wb3NlZEFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50LCB1aW50KSB7ICAgICAgCiAgICAgICAgUHJvcG9zYWwgc3RvcmFnZSBwID0gcHJvcG9zYWxzW19wcm9wb3NlZEFkZHJlc3NdOyAgICAKICAgICAgICByZXR1cm4gKHAuc3VwcG9ydGluZ1dlaWdodCwgcC5yZWplY3RpbmdXZWlnaHQpOwogICAgfQoKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvcG9zYWwgaXMgc3VwcG9ydGVkCiAgICAgKgogICAgICogQHBhcmFtIF9wcm9wb3NlZEFkZHJlc3MgVGhlIHByb3Bvc2VkIERDT1JQIGFkZHJlc3MgCiAgICAgKiBAcGFyYW0gX3N0cmljdCBJZiBzZXQgdG8gdHJ1ZSB0aGUgZnVuY3Rpb24gcmVxdWlyZXMgdGhhdCB0aGUgdm90aW5nIHBlcmlvZCBpcyBlbmRlZAogICAgICogQHJldHVybiBib29sIFN1cHBvcnRlZAogICAgICovCiAgICBmdW5jdGlvbiBpc1N1cHBvcnRlZChhZGRyZXNzIF9wcm9wb3NlZEFkZHJlc3MsIGJvb2wgX3N0cmljdCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsgICAgICAgIAogICAgICAgIFByb3Bvc2FsIHN0b3JhZ2UgcCA9IHByb3Bvc2Fsc1tfcHJvcG9zZWRBZGRyZXNzXTsKICAgICAgICBib29sIHN1cHBvcnRlZCA9IGZhbHNlOwoKICAgICAgICBpZiAoIV9zdHJpY3QgfHwgbm93ID4gcC5jcmVhdGVkVGltZXN0YW1wICsgVk9USU5HX0RVUkFUSU9OKSB7CiAgICAgICAgICAgIHZhciAoc3VwcG9ydCwgcmVqZWN0KSA9IGdldFZvdGluZ1Jlc3VsdChfcHJvcG9zZWRBZGRyZXNzKTsKICAgICAgICAgICAgc3VwcG9ydGVkID0gc3VwcG9ydCA+IHJlamVjdDsKICAgICAgICAgICAgaWYgKHN1cHBvcnRlZCkgewogICAgICAgICAgICAgICAgc3VwcG9ydGVkID0gc3VwcG9ydCArIHJlamVjdCA+PSBnZXRUb3RhbFN1cHBseSgpICogTUlOX1FVT1JVTSAvIDEwMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gc3VwcG9ydGVkOwogICAgfQoKCiAgICAvKioKICAgICAqIEV4ZWN1dGVzIHRoZSBwcm9wb3NhbAogICAgICoKICAgICAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgdm90aW5nIHBlcmlvZCBhbmQgCiAgICAgKiB3aGVuIHRoZSBwcm9wb3NhbCBpcyBzdXBwb3J0ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX2FjY2VwdGVkQWRkcmVzcyBUaGUgYWNjZXB0ZWQgRENPUlAgYWRkcmVzcyAKICAgICAqIEByZXR1cm4gYm9vbCBTdWNjZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGV4ZWN1dGUoYWRkcmVzcyBfYWNjZXB0ZWRBZGRyZXNzKSBwdWJsaWMgb25seV9vd25lciBvbmx5X2F0X3N0YWdlKFN0YWdlcy5EZXBsb3llZCkgb25seV9wcm9wb3NlZChfYWNjZXB0ZWRBZGRyZXNzKSBvbmx5X2FmdGVyX3ZvdGluZ19wZXJpb2QoX2FjY2VwdGVkQWRkcmVzcykgb25seV93aGVuX3N1cHBvcnRlZChfYWNjZXB0ZWRBZGRyZXNzKSB7CiAgICAgICAgCiAgICAgICAgLy8gTWFyayBhcyBleGVjdXRlZAogICAgICAgIHN0YWdlID0gU3RhZ2VzLkV4ZWN1dGVkOwoKICAgICAgICAvLyBBZGQgYWNjZXB0ZWQgYWRkcmVzcyBhcyB0b2tlbiBvd25lcgogICAgICAgIElNdWx0aU93bmVkKGRycHNUb2tlbikuYWRkT3duZXIoX2FjY2VwdGVkQWRkcmVzcyk7CiAgICAgICAgSU11bHRpT3duZWQoZHJwdVRva2VuKS5hZGRPd25lcihfYWNjZXB0ZWRBZGRyZXNzKTsKCiAgICAgICAgLy8gUmVtb3ZlIHNlbGYgdG9rZW4gYXMgb3duZXIKICAgICAgICBJTXVsdGlPd25lZChkcnBzVG9rZW4pLnJlbW92ZU93bmVyKHRoaXMpOwogICAgICAgIElNdWx0aU93bmVkKGRycHVUb2tlbikucmVtb3ZlT3duZXIodGhpcyk7CgogICAgICAgIC8vIFRyYW5zZmVyIEV0aCAoc2FmZSBiZWNhdXNlIHdlIGRvbid0IGtub3cgaG93IG11Y2ggZ2FzIGlzIHVzZWQgY291bnRpbmcgdm90ZXMpCiAgICAgICAgdWludCBiYWxhbmNlQmVmb3JlID0gX2FjY2VwdGVkQWRkcmVzcy5iYWxhbmNlOwogICAgICAgIHVpbnQgYmFsYW5jZVRvU2VuZCA9IHRoaXMuYmFsYW5jZTsKICAgICAgICBfYWNjZXB0ZWRBZGRyZXNzLnRyYW5zZmVyKGJhbGFuY2VUb1NlbmQpOwoKICAgICAgICAvLyBBc3NlcnQgYmFsYW5jZXMKICAgICAgICBhc3NlcnQoYmFsYW5jZUJlZm9yZSArIGJhbGFuY2VUb1NlbmQgPT0gX2FjY2VwdGVkQWRkcmVzcy5iYWxhbmNlKTsKICAgICAgICBhc3NlcnQodGhpcy5iYWxhbmNlID09IDApOwogICAgfQoKCiAgICAvKioKICAgICAqIEV2ZW50IGhhbmRsZXIgdGhhdCBpbml0aWFsaXplcyB0aGUgdG9rZW4gY29udmVyc2lvbgogICAgICogCiAgICAgKiBDYWxsZWQgYnkgYF90b2tlbmAgd2hlbiBhIHRva2VuIGFtb3VudCBpcyByZWNlaXZlZCBvbiAKICAgICAqIHRoZSBhZGRyZXNzIG9mIHRoaXMgdG9rZW4gY2hhbmdlcgogICAgICoKICAgICAqIEBwYXJhbSBfdG9rZW4gVGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgcmVjZWl2ZWQgdGhlIHRyYW5zYWN0aW9uCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFjY291bnQgb3IgY29udHJhY3QgdGhhdCBzZW5kIHRoZSB0cmFuc2FjdGlvbgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgdmFsdWUgb2YgdG9rZW5zIHRoYXQgd2hlcmUgcmVjZWl2ZWQKICAgICAqLwogICAgZnVuY3Rpb24gb25Ub2tlbnNSZWNlaXZlZChhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfZnJvbSwgdWludCBfdmFsdWUpIGludGVybmFsIG9ubHlfYXRfc3RhZ2UoU3RhZ2VzLkRlcGxveWVkKSBvbmx5X2FjY2VwdGVkX3Rva2VuKF90b2tlbikgewogICAgICAgIHJlcXVpcmUoX3Rva2VuID09IG1zZy5zZW5kZXIpOwoKICAgICAgICAvLyBBbGxvY2F0ZSB0b2tlbnMKICAgICAgICBpZiAoIWhhc0JhbGFuY2UoX2Zyb20pKSB7CiAgICAgICAgICAgIGFsbG9jYXRlZFtfZnJvbV0gPSBCYWxhbmNlKAogICAgICAgICAgICAgICAgMCwgMCwgYWxsb2NhdGVkSW5kZXgucHVzaChfZnJvbSkgLSAxKTsKICAgICAgICB9CgogICAgICAgIEJhbGFuY2Ugc3RvcmFnZSBiID0gYWxsb2NhdGVkW19mcm9tXTsKICAgICAgICBpZiAoX3Rva2VuID09IGFkZHJlc3MoZHJwc1Rva2VuKSkgewogICAgICAgICAgICBiLmRycHMgKz0gX3ZhbHVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGIuZHJwdSArPSBfdmFsdWU7CiAgICAgICAgfQoKICAgICAgICAvLyBJbmNyZWFzZSB3ZWlnaHQKICAgICAgICBfYWRqdXN0V2VpZ2h0KF9mcm9tLCBfdmFsdWUsIHRydWUpOwogICAgfQoKCiAgICAvKioKICAgICAqIFdpdGhkcmF3IERSUFMgdG9rZW5zIGZyb20gdGhlIHByb3h5IGFuZCByZWR1Y2UgdGhlIAogICAgICogb3duZXJzIHdlaWdodCBhY2NvcmRpbmdseQogICAgICogCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgRFJQUyB0b2tlbnMgdG8gd2l0aGRyYXcKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdEUlBTKHVpbnQgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIEJhbGFuY2Ugc3RvcmFnZSBiID0gYWxsb2NhdGVkW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBSZXF1aXJlIHN1ZmZpY2llbnQgYmFsYW5jZQogICAgICAgIHJlcXVpcmUoYi5kcnBzID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShiLmRycHMgLSBfdmFsdWUgPD0gYi5kcnBzKTsKCiAgICAgICAgLy8gVXBkYXRlIGJhbGFuY2UKICAgICAgICBiLmRycHMgLT0gX3ZhbHVlOwoKICAgICAgICAvLyBSZWR1Y2Ugd2VpZ2h0CiAgICAgICAgX2FkanVzdFdlaWdodChtc2cuc2VuZGVyLCBfdmFsdWUsIGZhbHNlKTsKCiAgICAgICAgLy8gQ2FsbCBleHRlcm5hbAogICAgICAgIGlmICghZHJwc1Rva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIFdpdGhkcmF3IERSUFUgdG9rZW5zIGZyb20gdGhlIHByb3h5IGFuZCByZWR1Y2UgdGhlIAogICAgICogb3duZXJzIHdlaWdodCBhY2NvcmRpbmdseQogICAgICogCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgRFJQVSB0b2tlbnMgdG8gd2l0aGRyYXcKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdEUlBVKHVpbnQgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIEJhbGFuY2Ugc3RvcmFnZSBiID0gYWxsb2NhdGVkW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBSZXF1aXJlIHN1ZmZpY2llbnQgYmFsYW5jZQogICAgICAgIHJlcXVpcmUoYi5kcnB1ID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShiLmRycHUgLSBfdmFsdWUgPD0gYi5kcnB1KTsKCiAgICAgICAgLy8gVXBkYXRlIGJhbGFuY2UKICAgICAgICBiLmRycHUgLT0gX3ZhbHVlOwoKICAgICAgICAvLyBSZWR1Y2Ugd2VpZ2h0CiAgICAgICAgX2FkanVzdFdlaWdodChtc2cuc2VuZGVyLCBfdmFsdWUsIGZhbHNlKTsKCiAgICAgICAgLy8gQ2FsbCBleHRlcm5hbAogICAgICAgIGlmICghZHJwdVRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIEZhaWxzYWZlIG1lY2hhbmlzbQogICAgICogCiAgICAgKiBBbGxvd3MgdGhlIG93bmVyIHRvIHJldHJpZXZlIHRva2VucyAob3RoZXIgdGhhbiBEUlBTIGFuZCBEUlBVIHRva2VucykgZnJvbSB0aGUgY29udHJhY3QgdGhhdCAKICAgICAqIG1pZ2h0IGhhdmUgYmVlbiBzZW5kIHRoZXJlIGJ5IGFjY2lkZW50CiAgICAgKgogICAgICogQHBhcmFtIF90b2tlbkNvbnRyYWN0IFRoZSBhZGRyZXNzIG9mIEVSQzIwIGNvbXBhdGlibGUgdG9rZW4KICAgICAqLwogICAgZnVuY3Rpb24gcmV0cmlldmVUb2tlbnMoYWRkcmVzcyBfdG9rZW5Db250cmFjdCkgcHVibGljIG9ubHlfb3duZXIgbm90X2FjY2VwdGVkX3Rva2VuKF90b2tlbkNvbnRyYWN0KSB7CiAgICAgICAgc3VwZXIucmV0cmlldmVUb2tlbnMoX3Rva2VuQ29udHJhY3QpOwogICAgfQoKCiAgICAvKioKICAgICAqIEFkanVzdCB2b3Rpbmcgd2VpZ2h0IGluIG9uZ29pbmcgcHJvcG9zYWxzIG9uIHdoaWNoIGBfb3duZXJgIAogICAgICogaGFzIGFscmVhZHkgdm90ZWQKICAgICAqIAogICAgICogQHBhcmFtIF9vd25lciBUaGUgb3duZXIgb2YgdGhlIHdlaWdodAogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaWdodCB0aGF0IGlzIGFkanVzdGVkCiAgICAgKiBAcGFyYW0gX2luY3JlYXNlIEluZGljYXRlZCB3aGV0aGVyIHRoZSB3ZWlnaHQgaXMgaW5jcmVhc2VkIG9yIGRlY3JlYXNlZAogICAgICovCiAgICBmdW5jdGlvbiBfYWRqdXN0V2VpZ2h0KGFkZHJlc3MgX293bmVyLCB1aW50IF92YWx1ZSwgYm9vbCBfaW5jcmVhc2UpIHByaXZhdGUgewogICAgICAgIGZvciAodWludCBpID0gcHJvcG9zYWxJbmRleC5sZW5ndGg7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgICAgUHJvcG9zYWwgc3RvcmFnZSBwID0gcHJvcG9zYWxzW3Byb3Bvc2FsSW5kZXhbaSAtIDFdXTsKICAgICAgICAgICAgaWYgKG5vdyA+IHAuY3JlYXRlZFRpbWVzdGFtcCArIFZPVElOR19EVVJBVElPTikgewogICAgICAgICAgICAgICAgYnJlYWs7IC8vIExhc3QgYWN0aXZlIHByb3Bvc2FsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChoYXNWb3RlZChwcm9wb3NhbEluZGV4W2kgLSAxXSwgX293bmVyKSkgewogICAgICAgICAgICAgICAgaWYgKHAudm90ZXNbX293bmVyXS5zdXBwb3J0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF9pbmNyZWFzZSkgewogICAgICAgICAgICAgICAgICAgICAgICBwLnN1cHBvcnRpbmdXZWlnaHQgKz0gX3ZhbHVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHAuc3VwcG9ydGluZ1dlaWdodCAtPSBfdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoX2luY3JlYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHAucmVqZWN0aW5nV2VpZ2h0ICs9IF92YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwLnJlamVjdGluZ1dlaWdodCAtPSBfdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9'.
	

]
