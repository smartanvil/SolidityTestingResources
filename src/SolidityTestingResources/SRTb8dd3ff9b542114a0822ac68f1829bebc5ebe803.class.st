Class {
	#name : #SRTb8dd3ff9b542114a0822ac68f1829bebc5ebe803,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8dd3ff9b542114a0822ac68f1829bebc5ebe803 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgLyogZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7ICovCiAgICAvKiAgIGlmICghYXNzZXJ0aW9uKSB7ICovCiAgICAvKiAgICAgdGhyb3c7ICovCiAgICAvKiAgIH0gKi8KICAgIC8qIH0gICAgICAvLyBhc3NlcnQgbm8gbG9uZ2VyIG5lZWRlZCBvbmNlIHNvbGlkaXR5IGlzIG9uIDAuNC4xMCAqLwoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICsgeTsKICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50MjU2IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9Cgpjb250cmFjdCBPd25hYmxlIHsKCWFkZHJlc3MgcHVibGljIG93bmVyOwoJZnVuY3Rpb24gT3duYWJsZSgpIHtvd25lciA9IG1zZy5zZW5kZXI7fQoJbW9kaWZpZXIgb25seU93bmVyKCkgewoJCWlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKCQlfOwoJfQoKfQoKY29udHJhY3QgVG9rZW4gewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLyogIEVSQyAyMCB0b2tlbiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IFhDVG9rZW4gaXMgU3RhbmRhcmRUb2tlbixTYWZlTWF0aCxPd25hYmxlIHsKCiAgICAvLyBtZXRhZGF0YQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlhDLkNPTShYQyBQcm9ncmFtKSI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJYQ0NPTSI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wIjsKICAgIAogICAgLy8gdG90YWwgY2FwCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gMjAwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7CiAgICAvLyBpbml0IGFtb3VudAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkluaXQgPSAxMDAwICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsKICAgIC8vIFRoZSBhbW91bnQgb2YgWENUb2tlbnMgdGhhdCBjYW4gYmUgbWludAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5NaW50Q2FwID0gMTAwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7CiAgICAvLyBUaGUgYW1vdW50IG9mIFhDVG9rZW5zIHRoYXQgaGF2ZSBiZWVuIG1pbnRlZAogICAgdWludDI1NiBwdWJsaWMgdG9rZW5NaW50ZWRTdXBwbHk7CiAgICAKICAgIGFkZHJlc3MgcHVibGljIGluaXREZXBvc2l0QWNjb3VudDsKICAgIGFkZHJlc3MgcHVibGljIG1pbnREZXBvc2l0QWNjb3VudDsKICAgIAoJYm9vbCBwdWJsaWMgbWludEZpbmlzaGVkOwoJCglldmVudCBNaW50KHVpbnQyNTYgYW1vdW50KTsKCWV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICAgIGZ1bmN0aW9uIFhDVG9rZW4oCiAgICAgICAgYWRkcmVzcyBfaW5pdEZ1bmREZXBvc2l0QWNjb3VudCwKICAgICAgICBhZGRyZXNzIF9taW50RnVuZERlcG9zaXRBY2NvdW50CiAgICAgICAgKSB7CiAgICAgICAgaW5pdERlcG9zaXRBY2NvdW50ID0gX2luaXRGdW5kRGVwb3NpdEFjY291bnQ7CiAgICAgICAgbWludERlcG9zaXRBY2NvdW50ID0gX21pbnRGdW5kRGVwb3NpdEFjY291bnQ7CiAgICAgICAgYmFsYW5jZXNbaW5pdERlcG9zaXRBY2NvdW50XSA9IHRva2VuQ3JlYXRpb25Jbml0OwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG9rZW5DcmVhdGlvbkluaXQ7CiAgICAgICAgdG9rZW5NaW50ZWRTdXBwbHkgPSAwOwogICAgICAgIG1pbnRGaW5pc2hlZCA9IGZhbHNlOwogICAgfQogICAgCiAgICBtb2RpZmllciBjYW5NaW50KCkgewoJCWlmKG1pbnRGaW5pc2hlZCkgdGhyb3c7CgkJXzsKCX0KCQogICAgLy8gVGhlIHJlbWFpbmluZyBhbW91bnQgb2YgdG9rZW5zIHRoYXQgY2FuIGJlIG1pbnRlZC4KCWZ1bmN0aW9uIHJlbWFpbk1pbnRUb2tlbkFtb3VudCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluTWludFRva2VuQW1vdW50KSB7CgkgICAgcmV0dXJuIHNhZmVTdWIodG9rZW5NaW50Q2FwLCB0b2tlbk1pbnRlZFN1cHBseSk7Cgl9CgoJLy8gbWludCB0b2tlbgoJZnVuY3Rpb24gbWludCh1aW50MjU2IF90b2tlbkFtb3VudCkgb25seU93bmVyIGNhbk1pbnQgcmV0dXJucyAoYm9vbCkgewoJCWlmKF90b2tlbkFtb3VudCA8PSAwKSB0aHJvdzsKCQl1aW50MjU2IGNoZWNrZWRTdXBwbHkgPSBzYWZlQWRkKHRva2VuTWludGVkU3VwcGx5LCBfdG9rZW5BbW91bnQpOwoJCWlmKGNoZWNrZWRTdXBwbHkgPiB0b2tlbk1pbnRDYXApIHRocm93OwoJCWlmKGNoZWNrZWRTdXBwbHkgPT0gdG9rZW5NaW50Q2FwKXsgLy8gbWludCBmaW5pc2gKCQkgICAgbWludEZpbmlzaGVkID0gdHJ1ZTsKCQkgICAgTWludEZpbmlzaGVkKCk7CgkJfQoJCXRva2VuTWludGVkU3VwcGx5ID0gY2hlY2tlZFN1cHBseTsKCQl0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIF90b2tlbkFtb3VudCk7CgkJYmFsYW5jZXNbbWludERlcG9zaXRBY2NvdW50XSA9IHNhZmVBZGQoYmFsYW5jZXNbbWludERlcG9zaXRBY2NvdW50XSwgX3Rva2VuQW1vdW50KTsKCQlNaW50KF90b2tlbkFtb3VudCk7CgkJcmV0dXJuIHRydWU7Cgl9CgkKCS8vIERvIG5vdCBhbGxvdyBkaXJlY3QgZGVwb3NpdHMuCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCB7CiAgICAgICAgdGhyb3c7CiAgICB9CgkKfQ=='.
	

]
