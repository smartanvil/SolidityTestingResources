Class {
	#name : #SRTe4972421f88c1f47986f54cbfd2d1e2e671680ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe4972421f88c1f47986f54cbfd2d1e2e671680ac >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovLyBGaWxlOiBjb250cmFjdHMvRGF0ZVRpbWUuc29sCgpjb250cmFjdCBEYXRlVGltZSB7CiAgICAgICAgLyoKICAgICAgICAgKiAgRGF0ZSBhbmQgVGltZSB1dGlsaXRpZXMgZm9yIGV0aGVyZXVtIGNvbnRyYWN0cwogICAgICAgICAqCiAgICAgICAgICovCiAgICAgICAgc3RydWN0IF9EYXRlVGltZSB7CiAgICAgICAgICAgICAgICB1aW50MTYgeWVhcjsKICAgICAgICAgICAgICAgIHVpbnQ4IG1vbnRoOwogICAgICAgICAgICAgICAgdWludDggZGF5OwogICAgICAgICAgICAgICAgdWludDggaG91cjsKICAgICAgICAgICAgICAgIHVpbnQ4IG1pbnV0ZTsKICAgICAgICAgICAgICAgIHVpbnQ4IHNlY29uZDsKICAgICAgICAgICAgICAgIHVpbnQ4IHdlZWtkYXk7CiAgICAgICAgfQoKICAgICAgICB1aW50IGNvbnN0YW50IERBWV9JTl9TRUNPTkRTID0gODY0MDA7CiAgICAgICAgdWludCBjb25zdGFudCBZRUFSX0lOX1NFQ09ORFMgPSAzMTUzNjAwMDsKICAgICAgICB1aW50IGNvbnN0YW50IExFQVBfWUVBUl9JTl9TRUNPTkRTID0gMzE2MjI0MDA7CgogICAgICAgIHVpbnQgY29uc3RhbnQgSE9VUl9JTl9TRUNPTkRTID0gMzYwMDsKICAgICAgICB1aW50IGNvbnN0YW50IE1JTlVURV9JTl9TRUNPTkRTID0gNjA7CgogICAgICAgIHVpbnQxNiBjb25zdGFudCBPUklHSU5fWUVBUiA9IDE5NzA7CgogICAgICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIodWludDE2IHllYXIpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAgICAgICAgIGlmICh5ZWFyICUgNCAhPSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh5ZWFyICUgMTAwICE9IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeWVhciAlIDQwMCAhPSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbGVhcFllYXJzQmVmb3JlKHVpbnQgeWVhcikgcHVibGljIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgICAgICAgICAgeWVhciAtPSAxOwogICAgICAgICAgICAgICAgcmV0dXJuIHllYXIgLyA0IC0geWVhciAvIDEwMCArIHllYXIgLyA0MDA7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCh1aW50OCBtb250aCwgdWludDE2IHllYXIpIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICBpZiAobW9udGggPT0gMSB8fCBtb250aCA9PSAzIHx8IG1vbnRoID09IDUgfHwgbW9udGggPT0gNyB8fCBtb250aCA9PSA4IHx8IG1vbnRoID09IDEwIHx8IG1vbnRoID09IDEyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vbnRoID09IDQgfHwgbW9udGggPT0gNiB8fCBtb250aCA9PSA5IHx8IG1vbnRoID09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzTGVhcFllYXIoeWVhcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyODsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHBhcnNlVGltZXN0YW1wKHVpbnQgdGltZXN0YW1wKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKF9EYXRlVGltZSBkdCkgewogICAgICAgICAgICAgICAgdWludCBzZWNvbmRzQWNjb3VudGVkRm9yID0gMDsKICAgICAgICAgICAgICAgIHVpbnQgYnVmOwogICAgICAgICAgICAgICAgdWludDggaTsKCiAgICAgICAgICAgICAgICAvLyBZZWFyCiAgICAgICAgICAgICAgICBkdC55ZWFyID0gZ2V0WWVhcih0aW1lc3RhbXApOwogICAgICAgICAgICAgICAgYnVmID0gbGVhcFllYXJzQmVmb3JlKGR0LnllYXIpIC0gbGVhcFllYXJzQmVmb3JlKE9SSUdJTl9ZRUFSKTsKCiAgICAgICAgICAgICAgICBzZWNvbmRzQWNjb3VudGVkRm9yICs9IExFQVBfWUVBUl9JTl9TRUNPTkRTICogYnVmOwogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBZRUFSX0lOX1NFQ09ORFMgKiAoZHQueWVhciAtIE9SSUdJTl9ZRUFSIC0gYnVmKTsKCiAgICAgICAgICAgICAgICAvLyBNb250aAogICAgICAgICAgICAgICAgdWludCBzZWNvbmRzSW5Nb250aDsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gMTI7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzSW5Nb250aCA9IERBWV9JTl9TRUNPTkRTICogZ2V0RGF5c0luTW9udGgoaSwgZHQueWVhcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWNvbmRzSW5Nb250aCArIHNlY29uZHNBY2NvdW50ZWRGb3IgPiB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdC5tb250aCA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBzZWNvbmRzSW5Nb250aDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBEYXkKICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gZ2V0RGF5c0luTW9udGgoZHQubW9udGgsIGR0LnllYXIpOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERBWV9JTl9TRUNPTkRTICsgc2Vjb25kc0FjY291bnRlZEZvciA+IHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR0LmRheSA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBEQVlfSU5fU0VDT05EUzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBIb3VyCiAgICAgICAgICAgICAgICBkdC5ob3VyID0gZ2V0SG91cih0aW1lc3RhbXApOwoKICAgICAgICAgICAgICAgIC8vIE1pbnV0ZQogICAgICAgICAgICAgICAgZHQubWludXRlID0gZ2V0TWludXRlKHRpbWVzdGFtcCk7CgogICAgICAgICAgICAgICAgLy8gU2Vjb25kCiAgICAgICAgICAgICAgICBkdC5zZWNvbmQgPSBnZXRTZWNvbmQodGltZXN0YW1wKTsKCiAgICAgICAgICAgICAgICAvLyBEYXkgb2Ygd2Vlay4KICAgICAgICAgICAgICAgIGR0LndlZWtkYXkgPSBnZXRXZWVrZGF5KHRpbWVzdGFtcCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRZZWFyKHVpbnQgdGltZXN0YW1wKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50MTYpIHsKICAgICAgICAgICAgICAgIHVpbnQgc2Vjb25kc0FjY291bnRlZEZvciA9IDA7CiAgICAgICAgICAgICAgICB1aW50MTYgeWVhcjsKICAgICAgICAgICAgICAgIHVpbnQgbnVtTGVhcFllYXJzOwoKICAgICAgICAgICAgICAgIC8vIFllYXIKICAgICAgICAgICAgICAgIHllYXIgPSB1aW50MTYoT1JJR0lOX1lFQVIgKyB0aW1lc3RhbXAgLyBZRUFSX0lOX1NFQ09ORFMpOwogICAgICAgICAgICAgICAgbnVtTGVhcFllYXJzID0gbGVhcFllYXJzQmVmb3JlKHllYXIpIC0gbGVhcFllYXJzQmVmb3JlKE9SSUdJTl9ZRUFSKTsKCiAgICAgICAgICAgICAgICBzZWNvbmRzQWNjb3VudGVkRm9yICs9IExFQVBfWUVBUl9JTl9TRUNPTkRTICogbnVtTGVhcFllYXJzOwogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBZRUFSX0lOX1NFQ09ORFMgKiAoeWVhciAtIE9SSUdJTl9ZRUFSIC0gbnVtTGVhcFllYXJzKTsKCiAgICAgICAgICAgICAgICB3aGlsZSAoc2Vjb25kc0FjY291bnRlZEZvciA+IHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMZWFwWWVhcih1aW50MTYoeWVhciAtIDEpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgLT0gTEVBUF9ZRUFSX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciAtPSBZRUFSX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgeWVhciAtPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHllYXI7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRNb250aCh1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRpbWVzdGFtcCh0aW1lc3RhbXApLm1vbnRoOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0RGF5KHVpbnQgdGltZXN0YW1wKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXN0YW1wKHRpbWVzdGFtcCkuZGF5OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0SG91cih1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OCgodGltZXN0YW1wIC8gNjAgLyA2MCkgJSAyNCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRNaW51dGUodWludCB0aW1lc3RhbXApIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdWludDgoKHRpbWVzdGFtcCAvIDYwKSAlIDYwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldFNlY29uZCh1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OCh0aW1lc3RhbXAgJSA2MCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRXZWVrZGF5KHVpbnQgdGltZXN0YW1wKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KCh0aW1lc3RhbXAgLyBEQVlfSU5fU0VDT05EUyArIDQpICUgNyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b1RpbWVzdGFtcCh1aW50MTYgeWVhciwgdWludDggbW9udGgsIHVpbnQ4IGRheSkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0b1RpbWVzdGFtcCh5ZWFyLCBtb250aCwgZGF5LCAwLCAwLCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvVGltZXN0YW1wKHVpbnQxNiB5ZWFyLCB1aW50OCBtb250aCwgdWludDggZGF5LCB1aW50OCBob3VyKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50IHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRvVGltZXN0YW1wKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIDAsIDApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9UaW1lc3RhbXAodWludDE2IHllYXIsIHVpbnQ4IG1vbnRoLCB1aW50OCBkYXksIHVpbnQ4IGhvdXIsIHVpbnQ4IG1pbnV0ZSkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0b1RpbWVzdGFtcCh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIDApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9UaW1lc3RhbXAodWludDE2IHllYXIsIHVpbnQ4IG1vbnRoLCB1aW50OCBkYXksIHVpbnQ4IGhvdXIsIHVpbnQ4IG1pbnV0ZSwgdWludDggc2Vjb25kKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50IHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgdWludDE2IGk7CgogICAgICAgICAgICAgICAgLy8gWWVhcgogICAgICAgICAgICAgICAgZm9yIChpID0gT1JJR0lOX1lFQVI7IGkgPCB5ZWFyOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTGVhcFllYXIoaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gTEVBUF9ZRUFSX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IFlFQVJfSU5fU0VDT05EUzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIE1vbnRoCiAgICAgICAgICAgICAgICB1aW50OFsxMl0gbWVtb3J5IG1vbnRoRGF5Q291bnRzOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbMF0gPSAzMTsKICAgICAgICAgICAgICAgIGlmIChpc0xlYXBZZWFyKHllYXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzFdID0gMjk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbMV0gPSAyODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzJdID0gMzE7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1szXSA9IDMwOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbNF0gPSAzMTsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzVdID0gMzA7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s2XSA9IDMxOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbN10gPSAzMTsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzhdID0gMzA7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s5XSA9IDMxOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbMTBdID0gMzA7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1sxMV0gPSAzMTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9udGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gREFZX0lOX1NFQ09ORFMgKiBtb250aERheUNvdW50c1tpIC0gMV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gRGF5CiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gREFZX0lOX1NFQ09ORFMgKiAoZGF5IC0gMSk7CgogICAgICAgICAgICAgICAgLy8gSG91cgogICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IEhPVVJfSU5fU0VDT05EUyAqIChob3VyKTsKCiAgICAgICAgICAgICAgICAvLyBNaW51dGUKICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBNSU5VVEVfSU5fU0VDT05EUyAqIChtaW51dGUpOwoKICAgICAgICAgICAgICAgIC8vIFNlY29uZAogICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IHNlY29uZDsKCiAgICAgICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wOwogICAgICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0lTaW1wbGVDcm93ZHNhbGUuc29sCgppbnRlcmZhY2UgSVNpbXBsZUNyb3dkc2FsZSB7CiAgICBmdW5jdGlvbiBnZXRTb2Z0Q2FwKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gaXNDb250cmlidXRvckluTGlzdHMoYWRkcmVzcyBjb250cmlidXRvckFkZHJlc3MpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhib29sKTsKICAgIGZ1bmN0aW9uIHByb2Nlc3NSZXNlcnZhdGlvbkZ1bmRDb250cmlidXRpb24oCiAgICAgICAgYWRkcmVzcyBjb250cmlidXRvciwKICAgICAgICB1aW50MjU2IHRva2VuQW1vdW50LAogICAgICAgIHVpbnQyNTYgdG9rZW5Cb251c0Ftb3VudAogICAgKSBleHRlcm5hbCBwYXlhYmxlOwp9CgovLyBGaWxlOiBjb250cmFjdHMvZnVuZC9JQ3Jvd2RzYWxlRnVuZC5zb2wKCi8qKgogKiBAdGl0bGUgSUNyb3dkc2FsZUZ1bmQKICogQGRldiBGdW5kIG1ldGhvZHMgdXNlZCBieSBjcm93ZHNhbGUgY29udHJhY3QKICovCmludGVyZmFjZSBJQ3Jvd2RzYWxlRnVuZCB7CiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiBhY2NlcHRzIHVzZXJgcyBjb250cmlidXRlZCBldGhlciBhbmQgbG9ncyBjb250cmlidXRpb24KICAgICogQHBhcmFtIGNvbnRyaWJ1dG9yIENvbnRyaWJ1dG9yIHdhbGxldCBhZGRyZXNzLgogICAgKi8KICAgIGZ1bmN0aW9uIHByb2Nlc3NDb250cmlidXRpb24oYWRkcmVzcyBjb250cmlidXRvcikgZXh0ZXJuYWwgcGF5YWJsZTsKICAgIC8qKgogICAgKiBAZGV2IEZ1bmN0aW9uIGlzIGNhbGxlZCBvbiB0aGUgZW5kIG9mIHN1Y2Nlc3NmdWwgY3Jvd2RzYWxlCiAgICAqLwogICAgZnVuY3Rpb24gb25Dcm93ZHNhbGVFbmQoKSBleHRlcm5hbDsKICAgIC8qKgogICAgKiBAZGV2IEZ1bmN0aW9uIGlzIGNhbGxlZCBpZiBjcm93ZHNhbGUgZmFpbGVkIHRvIHJlYWNoIHNvZnQgY2FwCiAgICAqLwogICAgZnVuY3Rpb24gZW5hYmxlQ3Jvd2RzYWxlUmVmdW5kKCkgZXh0ZXJuYWw7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KY29udHJhY3QgU2FmZU1hdGggewogICAgLyoqCiAgICAqIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBTYWZlTWF0aCgpIHB1YmxpYyB7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYSA+PSBiKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9vd25lcnNoaXAvTXVsdGlPd25hYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBNdWx0aU93bmFibGUKICogQGRldiBUaGUgTXVsdGlPd25hYmxlIGNvbnRyYWN0IGhhcyBvd25lcnMgYWRkcmVzc2VzIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VycyBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBNdWx0aU93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgbWFuYWdlcjsgLy8gYWRkcmVzcyB1c2VkIHRvIHNldCBvd25lcnMKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBvd25lckJ5QWRkcmVzczsKCiAgICBldmVudCBTZXRPd25lcnMoYWRkcmVzc1tdIG93bmVycyk7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUob3duZXJCeUFkZHJlc3NbbXNnLnNlbmRlcl0gPT0gdHJ1ZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgTXVsdGlPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG1hbmFnZXIKICAgICAqLwogICAgZnVuY3Rpb24gTXVsdGlPd25hYmxlKCkgcHVibGljIHsKICAgICAgICBtYW5hZ2VyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRnVuY3Rpb24gdG8gc2V0IG93bmVycyBhZGRyZXNzZXMKICAgICAqLwogICAgZnVuY3Rpb24gc2V0T3duZXJzKGFkZHJlc3NbXSBfb3duZXJzKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtYW5hZ2VyKTsKICAgICAgICBfc2V0T3duZXJzKF9vd25lcnMpOwoKICAgIH0KCiAgICBmdW5jdGlvbiBfc2V0T3duZXJzKGFkZHJlc3NbXSBfb3duZXJzKSBpbnRlcm5hbCB7CiAgICAgICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBvd25lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgb3duZXJCeUFkZHJlc3Nbb3duZXJzW2ldXSA9IGZhbHNlOwogICAgICAgIH0KCgogICAgICAgIGZvcih1aW50MjU2IGogPSAwOyBqIDwgX293bmVycy5sZW5ndGg7IGorKykgewogICAgICAgICAgICBvd25lckJ5QWRkcmVzc1tfb3duZXJzW2pdXSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIG93bmVycyA9IF9vd25lcnM7CiAgICAgICAgU2V0T3duZXJzKF9vd25lcnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE93bmVycygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gb3duZXJzOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvdG9rZW4vSUVSQzIwVG9rZW4uc29sCgovKioKICogQHRpdGxlIElFUkMyMFRva2VuIC0gRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgSUVSQzIwVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpICBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy90b2tlbi9FUkMyMFRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBFUkMyMFRva2VuIC0gRVJDMjAgYmFzZSBpbXBsZW1lbnRhdGlvbgogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwVG9rZW4gaXMgSUVSQzIwVG9rZW4sIFNhZmVNYXRoIHsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dlZDsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvdG9rZW4vSVRva2VuRXZlbnRMaXN0ZW5lci5zb2wKCi8qKgogKiBAdGl0bGUgSVRva2VuRXZlbnRMaXN0ZW5lcgogKiBAZGV2IEludGVyZmFjZSB3aGljaCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgdG9rZW4gbGlzdGVuZXIKICovCmludGVyZmFjZSBJVG9rZW5FdmVudExpc3RlbmVyIHsKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiBpcyBjYWxsZWQgYWZ0ZXIgdG9rZW4gdHJhbnNmZXIvdHJhbnNmZXJGcm9tCiAgICAgKiBAcGFyYW0gX2Zyb20gU2VuZGVyIGFkZHJlc3MKICAgICAqIEBwYXJhbSBfdG8gUmVjZWl2ZXIgYWRkcmVzcwogICAgICogQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9uVG9rZW5UcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGV4dGVybmFsOwp9CgovLyBGaWxlOiBjb250cmFjdHMvdG9rZW4vTWFuYWdlZFRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBNYW5hZ2VkVG9rZW4KICogQGRldiBFUkMyMCBjb21wYXRpYmxlIHRva2VuIHdpdGggaXNzdWUgYW5kIGRlc3Ryb3kgZmFjaWxpdGllcwogKiBAZGV2IEFsbCB0cmFuc2ZlcnMgY2FuIGJlIG1vbml0b3JlZCBieSB0b2tlbiBldmVudCBsaXN0ZW5lcgogKi8KY29udHJhY3QgTWFuYWdlZFRva2VuIGlzIEVSQzIwVG9rZW4sIE11bHRpT3duYWJsZSB7CiAgICBib29sIHB1YmxpYyBhbGxvd1RyYW5zZmVycyA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgaXNzdWFuY2VGaW5pc2hlZCA9IGZhbHNlOwoKICAgIElUb2tlbkV2ZW50TGlzdGVuZXIgcHVibGljIGV2ZW50TGlzdGVuZXI7CgogICAgZXZlbnQgQWxsb3dUcmFuc2ZlcnNDaGFuZ2VkKGJvb2wgX25ld1N0YXRlKTsKICAgIGV2ZW50IElzc3VlKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IERlc3Ryb3koYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBJc3N1YW5jZUZpbmlzaGVkKCk7CgogICAgbW9kaWZpZXIgdHJhbnNmZXJzQWxsb3dlZCgpIHsKICAgICAgICByZXF1aXJlKGFsbG93VHJhbnNmZXJzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNhbklzc3VlKCkgewogICAgICAgIHJlcXVpcmUoIWlzc3VhbmNlRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IE1hbmFnZWRUb2tlbiBjb25zdHJ1Y3RvcgogICAgICogQHBhcmFtIF9saXN0ZW5lciBUb2tlbiBsaXN0ZW5lcihhZGRyZXNzIGNhbiBiZSAweDApCiAgICAgKiBAcGFyYW0gX293bmVycyBPd25lcnMgbGlzdAogICAgICovCiAgICBmdW5jdGlvbiBNYW5hZ2VkVG9rZW4oYWRkcmVzcyBfbGlzdGVuZXIsIGFkZHJlc3NbXSBfb3duZXJzKSBwdWJsaWMgewogICAgICAgIGlmKF9saXN0ZW5lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXIgPSBJVG9rZW5FdmVudExpc3RlbmVyKF9saXN0ZW5lcik7CiAgICAgICAgfQogICAgICAgIF9zZXRPd25lcnMoX293bmVycyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEVuYWJsZS9kaXNhYmxlIHRva2VuIHRyYW5zZmVycy4gQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG93bmVycwogICAgICogQHBhcmFtIF9hbGxvd1RyYW5zZmVycyBUcnVlIC0gYWxsb3cgRmFsc2UgLSBkaXNhYmxlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEFsbG93VHJhbnNmZXJzKGJvb2wgX2FsbG93VHJhbnNmZXJzKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGFsbG93VHJhbnNmZXJzID0gX2FsbG93VHJhbnNmZXJzOwogICAgICAgIEFsbG93VHJhbnNmZXJzQ2hhbmdlZChfYWxsb3dUcmFuc2ZlcnMpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTZXQvcmVtb3ZlIHRva2VuIGV2ZW50IGxpc3RlbmVyCiAgICAgKiBAcGFyYW0gX2xpc3RlbmVyIExpc3RlbmVyIGFkZHJlc3MgKENvbnRyYWN0IG11c3QgaW1wbGVtZW50IElUb2tlbkV2ZW50TGlzdGVuZXIgaW50ZXJmYWNlKQogICAgICovCiAgICBmdW5jdGlvbiBzZXRMaXN0ZW5lcihhZGRyZXNzIF9saXN0ZW5lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgaWYoX2xpc3RlbmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgZXZlbnRMaXN0ZW5lciA9IElUb2tlbkV2ZW50TGlzdGVuZXIoX2xpc3RlbmVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkZWxldGUgZXZlbnRMaXN0ZW5lcjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgdHJhbnNmZXJzQWxsb3dlZCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzdWNjZXNzID0gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgICAgIGlmKGhhc0xpc3RlbmVyKCkgJiYgc3VjY2VzcykgewogICAgICAgICAgICBldmVudExpc3RlbmVyLm9uVG9rZW5UcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdWNjZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB0cmFuc2ZlcnNBbGxvd2VkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHN1Y2Nlc3MgPSBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICBpZihoYXNMaXN0ZW5lcigpICYmIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgZXZlbnRMaXN0ZW5lci5vblRva2VuVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICB9CgogICAgZnVuY3Rpb24gaGFzTGlzdGVuZXIoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKGV2ZW50TGlzdGVuZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJc3N1ZSB0b2tlbnMgdG8gc3BlY2lmaWVkIHdhbGxldAogICAgICogQHBhcmFtIF90byBXYWxsZXQgYWRkcmVzcwogICAgICogQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgb25seU93bmVyIGNhbklzc3VlIHsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgICBJc3N1ZShfdG8sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBEZXN0cm95IHRva2VucyBvbiBzcGVjaWZpZWQgYWRkcmVzcyAoQ2FsbGVkIGJ5IG93bmVyIG9yIHRva2VuIGhvbGRlcikKICAgICAqIEBkZXYgRnVuZCBjb250cmFjdCBhZGRyZXNzIG11c3QgYmUgaW4gdGhlIGxpc3Qgb2Ygb3duZXJzIHRvIGJ1cm4gdG9rZW4gZHVyaW5nIHJlZnVuZAogICAgICogQHBhcmFtIF9mcm9tIFdhbGxldCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiB0b2tlbnMgdG8gZGVzdHJveQogICAgICovCiAgICBmdW5jdGlvbiBkZXN0cm95KGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShvd25lckJ5QWRkcmVzc1ttc2cuc2VuZGVyXSB8fCBtc2cuc2VuZGVyID09IF9mcm9tKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgYWRkcmVzcygwKSwgX3ZhbHVlKTsKICAgICAgICBEZXN0cm95KF9mcm9tLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbmNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAgICoKICAgICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgICAqIEZyb20gT3BlblplcHBlbGluIFN0YW5kYXJkVG9rZW4uc29sCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX2FkZGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gaW5jcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgICAqLwogICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gc2FmZUFkZChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSwgX2FkZGVkVmFsdWUpOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKgogICAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAgICogRnJvbSBPcGVuWmVwcGVsaW4gU3RhbmRhcmRUb2tlbi5zb2wKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IHNhZmVTdWIob2xkVmFsdWUsIF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICAgIH0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGaW5pc2ggdG9rZW4gaXNzdWFuY2UKICAgICAqIEByZXR1cm4gVHJ1ZSBpZiBzdWNjZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmlzaElzc3VhbmNlKCkgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgaXNzdWFuY2VGaW5pc2hlZCA9IHRydWU7CiAgICAgICAgSXNzdWFuY2VGaW5pc2hlZCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvRnVuZC5zb2wKCmNvbnRyYWN0IEZ1bmQgaXMgSUNyb3dkc2FsZUZ1bmQsIFNhZmVNYXRoLCBNdWx0aU93bmFibGUgewogICAgZW51bSBGdW5kU3RhdGUgewogICAgICAgIENyb3dkc2FsZSwKICAgICAgICBDcm93ZHNhbGVSZWZ1bmQsCiAgICAgICAgVGVhbVdpdGhkcmF3LAogICAgICAgIFJlZnVuZAogICAgfQoKICAgIEZ1bmRTdGF0ZSBwdWJsaWMgc3RhdGUgPSBGdW5kU3RhdGUuQ3Jvd2RzYWxlOwogICAgTWFuYWdlZFRva2VuIHB1YmxpYyB0b2tlbjsKCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBJTklUSUFMX1RBUCA9IDE5MjkwMTIzNDU2NzkwMTsgLy8gKHdlaS9zZWMpID09IDUwMCBldGhlci9tb250aAoKICAgIGFkZHJlc3MgcHVibGljIHRlYW1XYWxsZXQ7CiAgICB1aW50MjU2IHB1YmxpYyBjcm93ZHNhbGVFbmREYXRlOwoKICAgIGFkZHJlc3MgcHVibGljIHJlZmVycmFsVG9rZW5XYWxsZXQ7CiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGF0aW9uVG9rZW5XYWxsZXQ7CiAgICBhZGRyZXNzIHB1YmxpYyByZXNlcnZlVG9rZW5XYWxsZXQ7CiAgICBhZGRyZXNzIHB1YmxpYyBib3VudHlUb2tlbldhbGxldDsKICAgIGFkZHJlc3MgcHVibGljIGNvbXBhbnlUb2tlbldhbGxldDsKICAgIGFkZHJlc3MgcHVibGljIGFkdmlzb3JUb2tlbldhbGxldDsKCiAgICB1aW50MjU2IHB1YmxpYyB0YXA7CiAgICB1aW50MjU2IHB1YmxpYyBsYXN0V2l0aGRyYXdUaW1lID0gMDsKICAgIHVpbnQyNTYgcHVibGljIGZpcnN0V2l0aGRyYXdBbW91bnQgPSAwOwoKICAgIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZUFkZHJlc3M7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGNvbnRyaWJ1dGlvbnM7CgogICAgZXZlbnQgUmVmdW5kQ29udHJpYnV0b3IoYWRkcmVzcyB0b2tlbkhvbGRlciwgdWludDI1NiBhbW91bnRXZWksIHVpbnQyNTYgdGltZXN0YW1wKTsKICAgIGV2ZW50IFJlZnVuZEhvbGRlcihhZGRyZXNzIHRva2VuSG9sZGVyLCB1aW50MjU2IGFtb3VudFdlaSwgdWludDI1NiB0b2tlbkFtb3VudCwgdWludDI1NiB0aW1lc3RhbXApOwogICAgZXZlbnQgV2l0aGRyYXcodWludDI1NiBhbW91bnRXZWksIHVpbnQyNTYgdGltZXN0YW1wKTsKICAgIGV2ZW50IFJlZnVuZEVuYWJsZWQoYWRkcmVzcyBpbml0aWF0b3JBZGRyZXNzKTsKCiAgICAvKioKICAgICAqIEBkZXYgRnVuZCBjb25zdHJ1Y3RvcgogICAgICogQHBhcmFtIF90ZWFtV2FsbGV0IFdpdGhkcmF3IGZ1bmN0aW9ucyB0cmFuc2ZlcnMgZXRoZXIgdG8gdGhpcyBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3JlZmVycmFsVG9rZW5XYWxsZXQgUmVmZXJyYWwgd2FsbGV0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfY29tcGFueVRva2VuV2FsbGV0IENvbXBhbnkgd2FsbGV0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfcmVzZXJ2ZVRva2VuV2FsbGV0IFJlc2VydmUgd2FsbGV0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfYm91bnR5VG9rZW5XYWxsZXQgQm91bnR5IHdhbGxldCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX2Fkdmlzb3JUb2tlbldhbGxldCBBZHZpc29yIHdhbGxldCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX293bmVycyBDb250cmFjdCBvd25lcnMKICAgICAqLwogICAgZnVuY3Rpb24gRnVuZCgKICAgICAgICBhZGRyZXNzIF90ZWFtV2FsbGV0LAogICAgICAgIGFkZHJlc3MgX3JlZmVycmFsVG9rZW5XYWxsZXQsCiAgICAgICAgYWRkcmVzcyBfZm91bmRhdGlvblRva2VuV2FsbGV0LAogICAgICAgIGFkZHJlc3MgX2NvbXBhbnlUb2tlbldhbGxldCwKICAgICAgICBhZGRyZXNzIF9yZXNlcnZlVG9rZW5XYWxsZXQsCiAgICAgICAgYWRkcmVzcyBfYm91bnR5VG9rZW5XYWxsZXQsCiAgICAgICAgYWRkcmVzcyBfYWR2aXNvclRva2VuV2FsbGV0LAogICAgICAgIGFkZHJlc3NbXSBfb3duZXJzCiAgICApIHB1YmxpYwogICAgewogICAgICAgIHRlYW1XYWxsZXQgPSBfdGVhbVdhbGxldDsKICAgICAgICByZWZlcnJhbFRva2VuV2FsbGV0ID0gX3JlZmVycmFsVG9rZW5XYWxsZXQ7CiAgICAgICAgZm91bmRhdGlvblRva2VuV2FsbGV0ID0gX2ZvdW5kYXRpb25Ub2tlbldhbGxldDsKICAgICAgICBjb21wYW55VG9rZW5XYWxsZXQgPSBfY29tcGFueVRva2VuV2FsbGV0OwogICAgICAgIHJlc2VydmVUb2tlbldhbGxldCA9IF9yZXNlcnZlVG9rZW5XYWxsZXQ7CiAgICAgICAgYm91bnR5VG9rZW5XYWxsZXQgPSBfYm91bnR5VG9rZW5XYWxsZXQ7CiAgICAgICAgYWR2aXNvclRva2VuV2FsbGV0ID0gX2Fkdmlzb3JUb2tlbldhbGxldDsKICAgICAgICBfc2V0T3duZXJzKF9vd25lcnMpOwogICAgfQoKICAgIG1vZGlmaWVyIHdpdGhkcmF3RW5hYmxlZCgpIHsKICAgICAgICByZXF1aXJlKGNhbldpdGhkcmF3KCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUNyb3dkc2FsZSgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBjYW5XaXRoZHJhdygpIHB1YmxpYyByZXR1cm5zKGJvb2wpOwoKICAgIGZ1bmN0aW9uIHNldENyb3dkc2FsZUFkZHJlc3MoYWRkcmVzcyBfY3Jvd2RzYWxlQWRkcmVzcykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVBZGRyZXNzID09IGFkZHJlc3MoMCkpOwogICAgICAgIGNyb3dkc2FsZUFkZHJlc3MgPSBfY3Jvd2RzYWxlQWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRUb2tlbkFkZHJlc3MoYWRkcmVzcyBfdG9rZW5BZGRyZXNzKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3ModG9rZW4pID09IGFkZHJlc3MoMCkpOwogICAgICAgIHRva2VuID0gTWFuYWdlZFRva2VuKF90b2tlbkFkZHJlc3MpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBQcm9jZXNzIGNyb3dkc2FsZSBjb250cmlidXRpb24KICAgICAqLwogICAgZnVuY3Rpb24gcHJvY2Vzc0NvbnRyaWJ1dGlvbihhZGRyZXNzIGNvbnRyaWJ1dG9yKSBleHRlcm5hbCBwYXlhYmxlIG9ubHlDcm93ZHNhbGUgewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gRnVuZFN0YXRlLkNyb3dkc2FsZSk7CiAgICAgICAgdWludDI1NiB0b3RhbENvbnRyaWJ1dGlvbiA9IHNhZmVBZGQoY29udHJpYnV0aW9uc1tjb250cmlidXRvcl0sIG1zZy52YWx1ZSk7CiAgICAgICAgY29udHJpYnV0aW9uc1tjb250cmlidXRvcl0gPSB0b3RhbENvbnRyaWJ1dGlvbjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2FsbGJhY2sgaXMgY2FsbGVkIGFmdGVyIGNyb3dkc2FsZSBmaW5hbGl6YXRpb24gaWYgc29mdCBjYXAgaXMgcmVhY2hlZAogICAgICovCiAgICBmdW5jdGlvbiBvbkNyb3dkc2FsZUVuZCgpIGV4dGVybmFsIG9ubHlDcm93ZHNhbGUgewogICAgICAgIHN0YXRlID0gRnVuZFN0YXRlLlRlYW1XaXRoZHJhdzsKICAgICAgICBJU2ltcGxlQ3Jvd2RzYWxlIGNyb3dkc2FsZSA9IElTaW1wbGVDcm93ZHNhbGUoY3Jvd2RzYWxlQWRkcmVzcyk7CiAgICAgICAgZmlyc3RXaXRoZHJhd0Ftb3VudCA9IHNhZmVEaXYoY3Jvd2RzYWxlLmdldFNvZnRDYXAoKSwgMik7CiAgICAgICAgbGFzdFdpdGhkcmF3VGltZSA9IG5vdzsKICAgICAgICB0YXAgPSBJTklUSUFMX1RBUDsKICAgICAgICBjcm93ZHNhbGVFbmREYXRlID0gbm93OwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDYWxsYmFjayBpcyBjYWxsZWQgYWZ0ZXIgY3Jvd2RzYWxlIGZpbmFsaXphdGlvbiBpZiBzb2Z0IGNhcCBpcyBub3QgcmVhY2hlZAogICAgICovCiAgICBmdW5jdGlvbiBlbmFibGVDcm93ZHNhbGVSZWZ1bmQoKSBleHRlcm5hbCBvbmx5Q3Jvd2RzYWxlIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IEZ1bmRTdGF0ZS5Dcm93ZHNhbGUpOwogICAgICAgIHN0YXRlID0gRnVuZFN0YXRlLkNyb3dkc2FsZVJlZnVuZDsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiBpcyBjYWxsZWQgYnkgY29udHJpYnV0b3IgdG8gcmVmdW5kIHBheW1lbnRzIGlmIGNyb3dkc2FsZSBmYWlsZWQgdG8gcmVhY2ggc29mdCBjYXAKICAgICovCiAgICBmdW5jdGlvbiByZWZ1bmRDcm93ZHNhbGVDb250cmlidXRvcigpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IEZ1bmRTdGF0ZS5Dcm93ZHNhbGVSZWZ1bmQpOwogICAgICAgIHJlcXVpcmUoY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXSA+IDApOwoKICAgICAgICB1aW50MjU2IHJlZnVuZEFtb3VudCA9IGNvbnRyaWJ1dGlvbnNbbXNnLnNlbmRlcl07CiAgICAgICAgY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgdG9rZW4uZGVzdHJveShtc2cuc2VuZGVyLCB0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikpOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIocmVmdW5kQW1vdW50KTsKICAgICAgICBSZWZ1bmRDb250cmlidXRvcihtc2cuc2VuZGVyLCByZWZ1bmRBbW91bnQsIG5vdyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IERlY3JlYXNlIHRhcCBhbW91bnQKICAgICAqIEBwYXJhbSBfdGFwIE5ldyB0YXAgdmFsdWUKICAgICAqLwogICAgZnVuY3Rpb24gZGVjVGFwKHVpbnQyNTYgX3RhcCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHN0YXRlID09IEZ1bmRTdGF0ZS5UZWFtV2l0aGRyYXcpOwogICAgICAgIHJlcXVpcmUoX3RhcCA8IHRhcCk7CiAgICAgICAgdGFwID0gX3RhcDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50VGFwQW1vdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIGlmKHN0YXRlICE9IEZ1bmRTdGF0ZS5UZWFtV2l0aGRyYXcpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWxjVGFwQW1vdW50KCk7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY1RhcEFtb3VudCgpIGludGVybmFsIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBzYWZlTXVsKHNhZmVTdWIobm93LCBsYXN0V2l0aGRyYXdUaW1lKSwgdGFwKTsKICAgICAgICBpZihhZGRyZXNzKHRoaXMpLmJhbGFuY2UgPCBhbW91bnQpIHsKICAgICAgICAgICAgYW1vdW50ID0gYWRkcmVzcyh0aGlzKS5iYWxhbmNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGZpcnN0V2l0aGRyYXcoKSBwdWJsaWMgb25seU93bmVyIHdpdGhkcmF3RW5hYmxlZCB7CiAgICAgICAgcmVxdWlyZShmaXJzdFdpdGhkcmF3QW1vdW50ID4gMCk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBmaXJzdFdpdGhkcmF3QW1vdW50OwogICAgICAgIGZpcnN0V2l0aGRyYXdBbW91bnQgPSAwOwogICAgICAgIHRlYW1XYWxsZXQudHJhbnNmZXIoYW1vdW50KTsKICAgICAgICBXaXRoZHJhdyhhbW91bnQsIG5vdyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFdpdGhkcmF3IHRhcCBhbW91bnQKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgb25seU93bmVyIHdpdGhkcmF3RW5hYmxlZCB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBGdW5kU3RhdGUuVGVhbVdpdGhkcmF3KTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGNhbGNUYXBBbW91bnQoKTsKICAgICAgICBsYXN0V2l0aGRyYXdUaW1lID0gbm93OwogICAgICAgIHRlYW1XYWxsZXQudHJhbnNmZXIoYW1vdW50KTsKICAgICAgICBXaXRoZHJhdyhhbW91bnQsIG5vdyk7CiAgICB9CgogICAgLy8gUmVmdW5kCiAgICAvKioKICAgICAqIEBkZXYgQ2FsbGVkIHRvIHN0YXJ0IHJlZnVuZGluZwogICAgICovCiAgICBmdW5jdGlvbiBlbmFibGVSZWZ1bmQoKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBGdW5kU3RhdGUuVGVhbVdpdGhkcmF3KTsKICAgICAgICBzdGF0ZSA9IEZ1bmRTdGF0ZS5SZWZ1bmQ7CiAgICAgICAgdG9rZW4uZGVzdHJveShjb21wYW55VG9rZW5XYWxsZXQsIHRva2VuLmJhbGFuY2VPZihjb21wYW55VG9rZW5XYWxsZXQpKTsKICAgICAgICB0b2tlbi5kZXN0cm95KHJlc2VydmVUb2tlbldhbGxldCwgdG9rZW4uYmFsYW5jZU9mKHJlc2VydmVUb2tlbldhbGxldCkpOwogICAgICAgIHRva2VuLmRlc3Ryb3koZm91bmRhdGlvblRva2VuV2FsbGV0LCB0b2tlbi5iYWxhbmNlT2YoZm91bmRhdGlvblRva2VuV2FsbGV0KSk7CiAgICAgICAgdG9rZW4uZGVzdHJveShib3VudHlUb2tlbldhbGxldCwgdG9rZW4uYmFsYW5jZU9mKGJvdW50eVRva2VuV2FsbGV0KSk7CiAgICAgICAgdG9rZW4uZGVzdHJveShyZWZlcnJhbFRva2VuV2FsbGV0LCB0b2tlbi5iYWxhbmNlT2YocmVmZXJyYWxUb2tlbldhbGxldCkpOwogICAgICAgIHRva2VuLmRlc3Ryb3koYWR2aXNvclRva2VuV2FsbGV0LCB0b2tlbi5iYWxhbmNlT2YoYWR2aXNvclRva2VuV2FsbGV0KSk7CiAgICAgICAgUmVmdW5kRW5hYmxlZChtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiBpcyBjYWxsZWQgYnkgY29udHJpYnV0b3IgdG8gcmVmdW5kCiAgICAqIEJ1eSB1c2VyIHRva2VucyBmb3IgcmVmdW5kVG9rZW5QcmljZSBhbmQgZGVzdHJveSB0aGVtCiAgICAqLwogICAgZnVuY3Rpb24gcmVmdW5kVG9rZW5Ib2xkZXIoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gRnVuZFN0YXRlLlJlZnVuZCk7CgogICAgICAgIHVpbnQyNTYgdG9rZW5CYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwogICAgICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlID4gMCk7CiAgICAgICAgdWludDI1NiByZWZ1bmRBbW91bnQgPSBzYWZlRGl2KHNhZmVNdWwodG9rZW5CYWxhbmNlLCBhZGRyZXNzKHRoaXMpLmJhbGFuY2UpLCB0b2tlbi50b3RhbFN1cHBseSgpKTsKICAgICAgICByZXF1aXJlKHJlZnVuZEFtb3VudCA+IDApOwoKICAgICAgICB0b2tlbi5kZXN0cm95KG1zZy5zZW5kZXIsIHRva2VuQmFsYW5jZSk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZWZ1bmRBbW91bnQpOwoKICAgICAgICBSZWZ1bmRIb2xkZXIobXNnLnNlbmRlciwgcmVmdW5kQW1vdW50LCB0b2tlbkJhbGFuY2UsIG5vdyk7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9mdW5kL0lQb2xsTWFuYWdlZEZ1bmQuc29sCgovKioKICogQHRpdGxlIElQb2xsTWFuYWdlZEZ1bmQKICogQGRldiBGdW5kIGNhbGxiYWNrcyB1c2VkIGJ5IHBvbGxpbmcgY29udHJhY3RzCiAqLwppbnRlcmZhY2UgSVBvbGxNYW5hZ2VkRnVuZCB7CiAgICAvKioKICAgICAqIEBkZXYgVGFwUG9sbCBjYWxsYmFjawogICAgICogQHBhcmFtIGFncmVlIFRydWUgaWYgbmV3IHRhcCB2YWx1ZSBpcyBhY2NlcHRlZCBieSBtYWpvcml0eSBvZiBjb250cmlidXRvcnMKICAgICAqIEBwYXJhbSBfdGFwIE5ldyB0YXAgdmFsdWUKICAgICAqLwogICAgZnVuY3Rpb24gb25UYXBQb2xsRmluaXNoKGJvb2wgYWdyZWUsIHVpbnQyNTYgX3RhcCkgZXh0ZXJuYWw7CgogICAgLyoqCiAgICAgKiBAZGV2IFJlZnVuZFBvbGwgY2FsbGJhY2sKICAgICAqIEBwYXJhbSBhZ3JlZSBUcnVlIGlmIGNvbnRyaWJ1dG9ycyBkZWNpZGVkIHRvIGFsbG93IHJlZnVuZGluZwogICAgICovCiAgICBmdW5jdGlvbiBvblJlZnVuZFBvbGxGaW5pc2goYm9vbCBhZ3JlZSkgZXh0ZXJuYWw7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9wb2xsL0Jhc2VQb2xsLnNvbAoKLyoqCiAqIEB0aXRsZSBCYXNlUG9sbAogKiBAZGV2IEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIHBvbGxpbmcgY29udHJhY3RzCiAqLwpjb250cmFjdCBCYXNlUG9sbCBpcyBTYWZlTWF0aCB7CiAgICBzdHJ1Y3QgVm90ZSB7CiAgICAgICAgdWludDI1NiB0aW1lOwogICAgICAgIHVpbnQyNTYgd2VpZ2h0OwogICAgICAgIGJvb2wgYWdyZWU7CiAgICB9CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgTUFYX1RPS0VOU19XRUlHSFRfREVOT00gPSAxMDAwOwoKICAgIElFUkMyMFRva2VuIHB1YmxpYyB0b2tlbjsKICAgIGFkZHJlc3MgcHVibGljIGZ1bmRBZGRyZXNzOwoKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICAgIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CiAgICBib29sIGNoZWNrVHJhbnNmZXJzQWZ0ZXJFbmQ7CgogICAgdWludDI1NiBwdWJsaWMgeWVzQ291bnRlciA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyBub0NvdW50ZXIgPSAwOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxWb3RlZCA9IDA7CgogICAgYm9vbCBwdWJsaWMgZmluYWxpemVkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IFZvdGUpIHB1YmxpYyB2b3Rlc0J5QWRkcmVzczsKCiAgICBtb2RpZmllciBjaGVja1RpbWUoKSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdEZpbmFsaXplZCgpIHsKICAgICAgICByZXF1aXJlKCFmaW5hbGl6ZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEJhc2VQb2xsIGNvbnN0cnVjdG9yCiAgICAgKiBAcGFyYW0gX3Rva2VuQWRkcmVzcyBFUkMyMCBjb21wYXRpYmxlIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfZnVuZEFkZHJlc3MgRnVuZCBjb250cmFjdCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3N0YXJ0VGltZSBQb2xsIHN0YXJ0IHRpbWUKICAgICAqIEBwYXJhbSBfZW5kVGltZSBQb2xsIGVuZCB0aW1lCiAgICAgKi8KICAgIGZ1bmN0aW9uIEJhc2VQb2xsKGFkZHJlc3MgX3Rva2VuQWRkcmVzcywgYWRkcmVzcyBfZnVuZEFkZHJlc3MsIHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgYm9vbCBfY2hlY2tUcmFuc2ZlcnNBZnRlckVuZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF90b2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyAmJiBfZW5kVGltZSA+IF9zdGFydFRpbWUpOwoKICAgICAgICB0b2tlbiA9IElFUkMyMFRva2VuKF90b2tlbkFkZHJlc3MpOwogICAgICAgIGZ1bmRBZGRyZXNzID0gX2Z1bmRBZGRyZXNzOwogICAgICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICAgICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgICAgIGZpbmFsaXplZCA9IGZhbHNlOwogICAgICAgIGNoZWNrVHJhbnNmZXJzQWZ0ZXJFbmQgPSBfY2hlY2tUcmFuc2ZlcnNBZnRlckVuZDsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUHJvY2VzcyB1c2VyYHMgdm90ZQogICAgICogQHBhcmFtIGFncmVlIFRydWUgaWYgdXNlciBlbmRvcnNlcyB0aGUgcHJvcG9zYWwgZWxzZSBGYWxzZQogICAgICovCiAgICBmdW5jdGlvbiB2b3RlKGJvb2wgYWdyZWUpIHB1YmxpYyBjaGVja1RpbWUgewogICAgICAgIHJlcXVpcmUodm90ZXNCeUFkZHJlc3NbbXNnLnNlbmRlcl0udGltZSA9PSAwKTsKCiAgICAgICAgdWludDI1NiB2b2ljZVdlaWdodCA9IHRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKTsKICAgICAgICB1aW50MjU2IG1heFZvaWNlV2VpZ2h0ID0gc2FmZURpdih0b2tlbi50b3RhbFN1cHBseSgpLCBNQVhfVE9LRU5TX1dFSUdIVF9ERU5PTSk7CiAgICAgICAgdm9pY2VXZWlnaHQgPSAgdm9pY2VXZWlnaHQgPD0gbWF4Vm9pY2VXZWlnaHQgPyB2b2ljZVdlaWdodCA6IG1heFZvaWNlV2VpZ2h0OwoKICAgICAgICBpZihhZ3JlZSkgewogICAgICAgICAgICB5ZXNDb3VudGVyID0gc2FmZUFkZCh5ZXNDb3VudGVyLCB2b2ljZVdlaWdodCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbm9Db3VudGVyID0gc2FmZUFkZChub0NvdW50ZXIsIHZvaWNlV2VpZ2h0KTsKCiAgICAgICAgfQoKICAgICAgICB2b3Rlc0J5QWRkcmVzc1ttc2cuc2VuZGVyXS50aW1lID0gbm93OwogICAgICAgIHZvdGVzQnlBZGRyZXNzW21zZy5zZW5kZXJdLndlaWdodCA9IHZvaWNlV2VpZ2h0OwogICAgICAgIHZvdGVzQnlBZGRyZXNzW21zZy5zZW5kZXJdLmFncmVlID0gYWdyZWU7CgogICAgICAgIHRvdGFsVm90ZWQgPSBzYWZlQWRkKHRvdGFsVm90ZWQsIDEpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXZva2UgdXNlcmBzIHZvdGUKICAgICAqLwogICAgZnVuY3Rpb24gcmV2b2tlVm90ZSgpIHB1YmxpYyBjaGVja1RpbWUgewogICAgICAgIHJlcXVpcmUodm90ZXNCeUFkZHJlc3NbbXNnLnNlbmRlcl0udGltZSA+IDApOwoKICAgICAgICB1aW50MjU2IHZvaWNlV2VpZ2h0ID0gdm90ZXNCeUFkZHJlc3NbbXNnLnNlbmRlcl0ud2VpZ2h0OwogICAgICAgIGJvb2wgYWdyZWUgPSB2b3Rlc0J5QWRkcmVzc1ttc2cuc2VuZGVyXS5hZ3JlZTsKCiAgICAgICAgdm90ZXNCeUFkZHJlc3NbbXNnLnNlbmRlcl0udGltZSA9IDA7CiAgICAgICAgdm90ZXNCeUFkZHJlc3NbbXNnLnNlbmRlcl0ud2VpZ2h0ID0gMDsKICAgICAgICB2b3Rlc0J5QWRkcmVzc1ttc2cuc2VuZGVyXS5hZ3JlZSA9IGZhbHNlOwoKICAgICAgICB0b3RhbFZvdGVkID0gc2FmZVN1Yih0b3RhbFZvdGVkLCAxKTsKICAgICAgICBpZihhZ3JlZSkgewogICAgICAgICAgICB5ZXNDb3VudGVyID0gc2FmZVN1Yih5ZXNDb3VudGVyLCB2b2ljZVdlaWdodCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbm9Db3VudGVyID0gc2FmZVN1Yihub0NvdW50ZXIsIHZvaWNlV2VpZ2h0KTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0b2tlbiB0cmFuc2ZlciBmcm9tIHVzZXJgcyB3YWxsZXQgdG8gY2hlY2sgYW5kIGNvcnJlY3QgdXNlcmBzIHZvdGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9uVG9rZW5UcmFuc2ZlcihhZGRyZXNzIHRva2VuSG9sZGVyLCB1aW50MjU2IGFtb3VudCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gZnVuZEFkZHJlc3MpOwogICAgICAgIGlmKHZvdGVzQnlBZGRyZXNzW3Rva2VuSG9sZGVyXS50aW1lID09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZighY2hlY2tUcmFuc2ZlcnNBZnRlckVuZCkgewogICAgICAgICAgICAgaWYoZmluYWxpemVkIHx8IChub3cgPCBzdGFydFRpbWUgfHwgbm93ID4gZW5kVGltZSkpIHsKICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZih0b2tlbi5iYWxhbmNlT2YodG9rZW5Ib2xkZXIpID49IHZvdGVzQnlBZGRyZXNzW3Rva2VuSG9sZGVyXS53ZWlnaHQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IHZvaWNlV2VpZ2h0ID0gYW1vdW50OwogICAgICAgIGlmKGFtb3VudCA+IHZvdGVzQnlBZGRyZXNzW3Rva2VuSG9sZGVyXS53ZWlnaHQpIHsKICAgICAgICAgICAgdm9pY2VXZWlnaHQgPSB2b3Rlc0J5QWRkcmVzc1t0b2tlbkhvbGRlcl0ud2VpZ2h0OwogICAgICAgIH0KCiAgICAgICAgaWYodm90ZXNCeUFkZHJlc3NbdG9rZW5Ib2xkZXJdLmFncmVlKSB7CiAgICAgICAgICAgIHllc0NvdW50ZXIgPSBzYWZlU3ViKHllc0NvdW50ZXIsIHZvaWNlV2VpZ2h0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub0NvdW50ZXIgPSBzYWZlU3ViKG5vQ291bnRlciwgdm9pY2VXZWlnaHQpOwogICAgICAgIH0KICAgICAgICB2b3Rlc0J5QWRkcmVzc1t0b2tlbkhvbGRlcl0ud2VpZ2h0ID0gc2FmZVN1Yih2b3Rlc0J5QWRkcmVzc1t0b2tlbkhvbGRlcl0ud2VpZ2h0LCB2b2ljZVdlaWdodCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBGaW5hbGl6ZSBwb2xsIGFuZCBjYWxsIG9uUG9sbEZpbmlzaCBjYWxsYmFjayB3aXRoIHJlc3VsdAogICAgICovCiAgICBmdW5jdGlvbiB0cnlUb0ZpbmFsaXplKCkgcHVibGljIG5vdEZpbmFsaXplZCByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZihub3cgPCBlbmRUaW1lKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZmluYWxpemVkID0gdHJ1ZTsKICAgICAgICBvblBvbGxGaW5pc2goaXNTdWJqZWN0QXBwcm92ZWQoKSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gaXNOb3dBcHByb3ZlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBpc1N1YmplY3RBcHByb3ZlZCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzU3ViamVjdEFwcHJvdmVkKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4geWVzQ291bnRlciA+IG5vQ291bnRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgY2FsbGJhY2sgY2FsbGVkIGFmdGVyIHBvbGwgZmluYWxpemF0aW9uCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9uUG9sbEZpbmlzaChib29sIGFncmVlKSBpbnRlcm5hbDsKfQoKLy8gRmlsZTogY29udHJhY3RzL1JlZnVuZFBvbGwuc29sCgovKioKICogQHRpdGxlIFJlZnVuZFBvbGwKICogQGRldiBFbmFibGVzIGZ1bmQgcmVmdW5kIG1vZGUKICovCmNvbnRyYWN0IFJlZnVuZFBvbGwgaXMgQmFzZVBvbGwgewogICAgdWludDI1NiBwdWJsaWMgaG9sZEVuZFRpbWUgPSAwOwoKICAgIC8qKgogICAgICogUmVmdW5kUG9sbCBjb25zdHJ1Y3RvcgogICAgICogQHBhcmFtIF90b2tlbkFkZHJlc3MgRVJDMjAgY29tcGF0aWJsZSB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX2Z1bmRBZGRyZXNzIEZ1bmQgY29udHJhY3QgYWRkcmVzcwogICAgICogQHBhcmFtIF9zdGFydFRpbWUgUG9sbCBzdGFydCB0aW1lCiAgICAgKiBAcGFyYW0gX2VuZFRpbWUgUG9sbCBlbmQgdGltZQogICAgICovCiAgICBmdW5jdGlvbiBSZWZ1bmRQb2xsKAogICAgICAgIGFkZHJlc3MgX3Rva2VuQWRkcmVzcywKICAgICAgICBhZGRyZXNzIF9mdW5kQWRkcmVzcywKICAgICAgICB1aW50MjU2IF9zdGFydFRpbWUsCiAgICAgICAgdWludDI1NiBfZW5kVGltZSwKICAgICAgICB1aW50MjU2IF9ob2xkRW5kVGltZSwKICAgICAgICBib29sIF9jaGVja1RyYW5zZmVyc0FmdGVyRW5kCiAgICApIHB1YmxpYwogICAgICAgIEJhc2VQb2xsKF90b2tlbkFkZHJlc3MsIF9mdW5kQWRkcmVzcywgX3N0YXJ0VGltZSwgX2VuZFRpbWUsIF9jaGVja1RyYW5zZmVyc0FmdGVyRW5kKQogICAgewogICAgICAgIGhvbGRFbmRUaW1lID0gX2hvbGRFbmRUaW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyeVRvRmluYWxpemUoKSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgaWYoaG9sZEVuZFRpbWUgPiAwICYmIGhvbGRFbmRUaW1lID4gZW5kVGltZSkgewogICAgICAgICAgICByZXF1aXJlKG5vdyA+PSBob2xkRW5kVGltZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVxdWlyZShub3cgPj0gZW5kVGltZSk7CiAgICAgICAgfQoKICAgICAgICBmaW5hbGl6ZWQgPSB0cnVlOwogICAgICAgIG9uUG9sbEZpbmlzaChpc1N1YmplY3RBcHByb3ZlZCgpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1N1YmplY3RBcHByb3ZlZCgpIGludGVybmFsIHZpZXcgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHllc0NvdW50ZXIgPiBub0NvdW50ZXIgJiYgeWVzQ291bnRlciA+PSBzYWZlRGl2KHRva2VuLnRvdGFsU3VwcGx5KCksIDMpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9uUG9sbEZpbmlzaChib29sIGFncmVlKSBpbnRlcm5hbCB7CiAgICAgICAgSVBvbGxNYW5hZ2VkRnVuZCBmdW5kID0gSVBvbGxNYW5hZ2VkRnVuZChmdW5kQWRkcmVzcyk7CiAgICAgICAgZnVuZC5vblJlZnVuZFBvbGxGaW5pc2goYWdyZWUpOwogICAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL1RhcFBvbGwuc29sCgovKioKICogQHRpdGxlIFRhcFBvbGwKICogQGRldiBQb2xsIHRvIGluY3JlYXNlIHRhcCBhbW91bnQKICovCmNvbnRyYWN0IFRhcFBvbGwgaXMgQmFzZVBvbGwgewogICAgdWludDI1NiBwdWJsaWMgdGFwOwogICAgdWludDI1NiBwdWJsaWMgbWluVG9rZW5zUGVyYyA9IDA7CgogICAgLyoqCiAgICAgKiBUYXBQb2xsIGNvbnN0cnVjdG9yCiAgICAgKiBAcGFyYW0gX3RhcCBOZXcgdGFwIHZhbHVlCiAgICAgKiBAcGFyYW0gX3Rva2VuQWRkcmVzcyBFUkMyMCBjb21wYXRpYmxlIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqIEBwYXJhbSBfZnVuZEFkZHJlc3MgRnVuZCBjb250cmFjdCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3N0YXJ0VGltZSBQb2xsIHN0YXJ0IHRpbWUKICAgICAqIEBwYXJhbSBfZW5kVGltZSBQb2xsIGVuZCB0aW1lCiAgICAgKiBAcGFyYW0gX21pblRva2Vuc1BlcmMgLSBNaW4gcGVyY2VudCBvZiB0b2tlbnMgZnJvbSB0b3RhbFN1cHBseSB3aGVyZSBwb2xsIGlzIGNvbnNpZGVyZWQgdG8gYmUgZnVsZmlsbGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIFRhcFBvbGwoCiAgICAgICAgdWludDI1NiBfdGFwLAogICAgICAgIGFkZHJlc3MgX3Rva2VuQWRkcmVzcywKICAgICAgICBhZGRyZXNzIF9mdW5kQWRkcmVzcywKICAgICAgICB1aW50MjU2IF9zdGFydFRpbWUsCiAgICAgICAgdWludDI1NiBfZW5kVGltZSwKICAgICAgICB1aW50MjU2IF9taW5Ub2tlbnNQZXJjCiAgICApIHB1YmxpYwogICAgICAgIEJhc2VQb2xsKF90b2tlbkFkZHJlc3MsIF9mdW5kQWRkcmVzcywgX3N0YXJ0VGltZSwgX2VuZFRpbWUsIGZhbHNlKQogICAgewogICAgICAgIHRhcCA9IF90YXA7CiAgICAgICAgbWluVG9rZW5zUGVyYyA9IF9taW5Ub2tlbnNQZXJjOwogICAgfQoKICAgIGZ1bmN0aW9uIG9uUG9sbEZpbmlzaChib29sIGFncmVlKSBpbnRlcm5hbCB7CiAgICAgICAgSVBvbGxNYW5hZ2VkRnVuZCBmdW5kID0gSVBvbGxNYW5hZ2VkRnVuZChmdW5kQWRkcmVzcyk7CiAgICAgICAgZnVuZC5vblRhcFBvbGxGaW5pc2goYWdyZWUsIHRhcCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Vm90ZWRUb2tlbnNQZXJjKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNhZmVEaXYoc2FmZU11bChzYWZlQWRkKHllc0NvdW50ZXIsIG5vQ291bnRlciksIDEwMCksIHRva2VuLnRvdGFsU3VwcGx5KCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzU3ViamVjdEFwcHJvdmVkKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4geWVzQ291bnRlciA+IG5vQ291bnRlciAmJiBnZXRWb3RlZFRva2Vuc1BlcmMoKSA+PSBtaW5Ub2tlbnNQZXJjOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvUG9sbE1hbmFnZWRGdW5kLnNvbAoKLyoqCiAqIEB0aXRsZSBQb2xsTWFuYWdlZEZ1bmQKICogQGRldiBGdW5kIGNvbnRyb2xsZWQgYnkgdXNlcnMKICovCmNvbnRyYWN0IFBvbGxNYW5hZ2VkRnVuZCBpcyBGdW5kLCBEYXRlVGltZSwgSVRva2VuRXZlbnRMaXN0ZW5lciB7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBUQVBfUE9MTF9EVVJBVElPTiA9IDMgZGF5czsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFJFRlVORF9QT0xMX0RVUkFUSU9OID0gNyBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgTUFYX1ZPVEVEX1RPS0VOX1BFUkMgPSAxMDsKCiAgICBUYXBQb2xsIHB1YmxpYyB0YXBQb2xsOwogICAgUmVmdW5kUG9sbCBwdWJsaWMgcmVmdW5kUG9sbDsKCiAgICB1aW50MjU2IHB1YmxpYyBtaW5Wb3RlZFRva2Vuc1BlcmMgPSAwOwogICAgdWludDI1NiBwdWJsaWMgc2Vjb25kUmVmdW5kUG9sbERhdGUgPSAwOwogICAgYm9vbCBwdWJsaWMgaXNXaXRoZHJhd0VuYWJsZWQgPSB0cnVlOwoKICAgIHVpbnQyNTZbXSBwdWJsaWMgcmVmdW5kUG9sbERhdGVzID0gWwogICAgICAgIDE1MzA0MDMyMDAsIC8vIDAxLjA3LjIwMTgKICAgICAgICAxNTM4MzUyMDAwLCAvLyAwMS4xMC4yMDE4CiAgICAgICAgMTU0NjMwMDgwMCwgLy8gMDEuMDEuMjAxOQogICAgICAgIDE1NTQwNzY4MDAsIC8vIDAxLjA0LjIwMTkKICAgICAgICAxNTYxOTM5MjAwLCAvLyAwMS4wNy4yMDE5CiAgICAgICAgMTU2OTg4ODAwMCwgLy8gMDEuMTAuMjAxOQogICAgICAgIDE1Nzc4MzY4MDAsIC8vIDAxLjAxLjIwMjAKICAgICAgICAxNTg1Njk5MjAwICAvLyAwMS4wNC4yMDIwCiAgICBdOwoKICAgIG1vZGlmaWVyIG9ubHlUb2tlbkhvbGRlcigpIHsKICAgICAgICByZXF1aXJlKHRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgZXZlbnQgVGFwUG9sbENyZWF0ZWQoKTsKICAgIGV2ZW50IFRhcFBvbGxGaW5pc2hlZChib29sIGFwcHJvdmVkLCB1aW50MjU2IF90YXApOwogICAgZXZlbnQgUmVmdW5kUG9sbENyZWF0ZWQoKTsKICAgIGV2ZW50IFJlZnVuZFBvbGxGaW5pc2hlZChib29sIGFwcHJvdmVkKTsKCiAgICAvKioKICAgICAqIEBkZXYgUG9sbE1hbmFnZWRGdW5kIGNvbnN0cnVjdG9yCiAgICAgKiBwYXJhbXMgLSBzZWUgRnVuZCBjb25zdHJ1Y3RvcgogICAgICovCiAgICBmdW5jdGlvbiBQb2xsTWFuYWdlZEZ1bmQoCiAgICAgICAgYWRkcmVzcyBfdGVhbVdhbGxldCwKICAgICAgICBhZGRyZXNzIF9yZWZlcnJhbFRva2VuV2FsbGV0LAogICAgICAgIGFkZHJlc3MgX2ZvdW5kYXRpb25Ub2tlbldhbGxldCwKICAgICAgICBhZGRyZXNzIF9jb21wYW55VG9rZW5XYWxsZXQsCiAgICAgICAgYWRkcmVzcyBfcmVzZXJ2ZVRva2VuV2FsbGV0LAogICAgICAgIGFkZHJlc3MgX2JvdW50eVRva2VuV2FsbGV0LAogICAgICAgIGFkZHJlc3MgX2Fkdmlzb3JUb2tlbldhbGxldCwKICAgICAgICBhZGRyZXNzW10gX293bmVycwogICAgICAgICkgcHVibGljCiAgICBGdW5kKF90ZWFtV2FsbGV0LCBfcmVmZXJyYWxUb2tlbldhbGxldCwgX2ZvdW5kYXRpb25Ub2tlbldhbGxldCwgX2NvbXBhbnlUb2tlbldhbGxldCwgX3Jlc2VydmVUb2tlbldhbGxldCwgX2JvdW50eVRva2VuV2FsbGV0LCBfYWR2aXNvclRva2VuV2FsbGV0LCBfb3duZXJzKQogICAgewogICAgfQoKICAgIGZ1bmN0aW9uIGNhbldpdGhkcmF3KCkgcHVibGljIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKAogICAgICAgICAgICBhZGRyZXNzKHJlZnVuZFBvbGwpICE9IGFkZHJlc3MoMCkgJiYKICAgICAgICAgICAgIXJlZnVuZFBvbGwuZmluYWxpemVkKCkgJiYKICAgICAgICAgICAgcmVmdW5kUG9sbC5ob2xkRW5kVGltZSgpID4gMCAmJgogICAgICAgICAgICBub3cgPj0gcmVmdW5kUG9sbC5ob2xkRW5kVGltZSgpICYmCiAgICAgICAgICAgIHJlZnVuZFBvbGwuaXNOb3dBcHByb3ZlZCgpCiAgICAgICAgKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlzV2l0aGRyYXdFbmFibGVkOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJVG9rZW5FdmVudExpc3RlbmVyIGltcGxlbWVudGF0aW9uLiBOb3RpZnkgYWN0aXZlIHBvbGwgY29udHJhY3RzIGFib3V0IHRva2VuIHRyYW5zZmVycwogICAgICovCiAgICBmdW5jdGlvbiBvblRva2VuVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyAvKl90byovLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHRva2VuKSk7CiAgICAgICAgaWYoYWRkcmVzcyh0YXBQb2xsKSAhPSBhZGRyZXNzKDApICYmICF0YXBQb2xsLmZpbmFsaXplZCgpKSB7CiAgICAgICAgICAgIHRhcFBvbGwub25Ub2tlblRyYW5zZmVyKF9mcm9tLCBfdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgaWYoYWRkcmVzcyhyZWZ1bmRQb2xsKSAhPSBhZGRyZXNzKDApICYmICFyZWZ1bmRQb2xsLmZpbmFsaXplZCgpKSB7CiAgICAgICAgICAgIHJlZnVuZFBvbGwub25Ub2tlblRyYW5zZmVyKF9mcm9tLCBfdmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVXBkYXRlIG1pblZvdGVkVG9rZW5zUGVyYyB2YWx1ZSBhZnRlciB0YXAgcG9sbC4KICAgICAqIFNldCBuZXcgdmFsdWUgPT0gNTAlIGZyb20gY3VycmVudCB2b3RlZCB0b2tlbnMgYW1vdW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZU1pblZvdGVkVG9rZW5zKHVpbnQyNTYgX21pblZvdGVkVG9rZW5zUGVyYykgaW50ZXJuYWwgewogICAgICAgIHVpbnQyNTYgbmV3UGVyYyA9IHNhZmVEaXYoX21pblZvdGVkVG9rZW5zUGVyYywgMik7CiAgICAgICAgaWYobmV3UGVyYyA+IE1BWF9WT1RFRF9UT0tFTl9QRVJDKSB7CiAgICAgICAgICAgIG1pblZvdGVkVG9rZW5zUGVyYyA9IE1BWF9WT1RFRF9UT0tFTl9QRVJDOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIG1pblZvdGVkVG9rZW5zUGVyYyA9IG5ld1BlcmM7CiAgICB9CgogICAgLy8gVGFwIHBvbGwKICAgIGZ1bmN0aW9uIGNyZWF0ZVRhcFBvbGwodWludDggdGFwSW5jUGVyYykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBGdW5kU3RhdGUuVGVhbVdpdGhkcmF3KTsKICAgICAgICByZXF1aXJlKHRhcFBvbGwgPT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShnZXREYXkobm93KSA9PSAxMCk7CiAgICAgICAgcmVxdWlyZSh0YXBJbmNQZXJjIDw9IDUwKTsKICAgICAgICB1aW50MjU2IF90YXAgPSBzYWZlQWRkKHRhcCwgc2FmZURpdihzYWZlTXVsKHRhcCwgdGFwSW5jUGVyYyksIDEwMCkpOwogICAgICAgIHVpbnQyNTYgc3RhcnRUaW1lID0gbm93OwogICAgICAgIHVpbnQyNTYgZW5kVGltZSA9IHN0YXJ0VGltZSArIFRBUF9QT0xMX0RVUkFUSU9OOwogICAgICAgIHRhcFBvbGwgPSBuZXcgVGFwUG9sbChfdGFwLCB0b2tlbiwgdGhpcywgc3RhcnRUaW1lLCBlbmRUaW1lLCBtaW5Wb3RlZFRva2Vuc1BlcmMpOwogICAgICAgIFRhcFBvbGxDcmVhdGVkKCk7CiAgICB9CgogICAgZnVuY3Rpb24gb25UYXBQb2xsRmluaXNoKGJvb2wgYWdyZWUsIHVpbnQyNTYgX3RhcCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHRhcFBvbGwpICYmIHRhcFBvbGwuZmluYWxpemVkKCkpOwogICAgICAgIGlmKGFncmVlKSB7CiAgICAgICAgICAgIHRhcCA9IF90YXA7CiAgICAgICAgfQogICAgICAgIHVwZGF0ZU1pblZvdGVkVG9rZW5zKHRhcFBvbGwuZ2V0Vm90ZWRUb2tlbnNQZXJjKCkpOwogICAgICAgIFRhcFBvbGxGaW5pc2hlZChhZ3JlZSwgX3RhcCk7CiAgICAgICAgZGVsZXRlIHRhcFBvbGw7CiAgICB9CgogICAgLy8gUmVmdW5kIHBvbGwKICAgIGZ1bmN0aW9uIGNoZWNrUmVmdW5kUG9sbERhdGUoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIGlmKHNlY29uZFJlZnVuZFBvbGxEYXRlID4gMCAmJiBub3cgPj0gc2Vjb25kUmVmdW5kUG9sbERhdGUgJiYgbm93IDw9IHNhZmVBZGQoc2Vjb25kUmVmdW5kUG9sbERhdGUsIDEgZGF5cykpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmb3IodWludCBpOyBpIDwgcmVmdW5kUG9sbERhdGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmKG5vdyA+PSByZWZ1bmRQb2xsRGF0ZXNbaV0gJiYgbm93IDw9IHNhZmVBZGQocmVmdW5kUG9sbERhdGVzW2ldLCAxIGRheXMpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlUmVmdW5kUG9sbCgpIHB1YmxpYyBvbmx5VG9rZW5Ib2xkZXIgewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gRnVuZFN0YXRlLlRlYW1XaXRoZHJhdyk7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKHJlZnVuZFBvbGwpID09IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoY2hlY2tSZWZ1bmRQb2xsRGF0ZSgpKTsKCiAgICAgICAgaWYoc2Vjb25kUmVmdW5kUG9sbERhdGUgPiAwICYmIG5vdyA+IHNhZmVBZGQoc2Vjb25kUmVmdW5kUG9sbERhdGUsIDEgZGF5cykpIHsKICAgICAgICAgICAgc2Vjb25kUmVmdW5kUG9sbERhdGUgPSAwOwogICAgICAgIH0KCiAgICAgICAgdWludDI1NiBzdGFydFRpbWUgPSBub3c7CiAgICAgICAgdWludDI1NiBlbmRUaW1lID0gc3RhcnRUaW1lICsgUkVGVU5EX1BPTExfRFVSQVRJT047CiAgICAgICAgYm9vbCBpc0ZpcnN0UmVmdW5kID0gc2Vjb25kUmVmdW5kUG9sbERhdGUgPT0gMDsKICAgICAgICB1aW50MjU2IGhvbGRFbmRUaW1lID0gMDsKCiAgICAgICAgaWYoaXNGaXJzdFJlZnVuZCkgewogICAgICAgICAgICBob2xkRW5kVGltZSA9IHRvVGltZXN0YW1wKAogICAgICAgICAgICAgICAgZ2V0WWVhcihzdGFydFRpbWUpLAogICAgICAgICAgICAgICAgZ2V0TW9udGgoc3RhcnRUaW1lKSArIDEsCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlZnVuZFBvbGwgPSBuZXcgUmVmdW5kUG9sbCh0b2tlbiwgdGhpcywgc3RhcnRUaW1lLCBlbmRUaW1lLCBob2xkRW5kVGltZSwgaXNGaXJzdFJlZnVuZCk7CiAgICAgICAgUmVmdW5kUG9sbENyZWF0ZWQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvblJlZnVuZFBvbGxGaW5pc2goYm9vbCBhZ3JlZSkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHJlZnVuZFBvbGwpICYmIHJlZnVuZFBvbGwuZmluYWxpemVkKCkpOwogICAgICAgIGlmKGFncmVlKSB7CiAgICAgICAgICAgIGlmKHNlY29uZFJlZnVuZFBvbGxEYXRlID4gMCkgewogICAgICAgICAgICAgICAgZW5hYmxlUmVmdW5kKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IHN0YXJ0VGltZSA9IHJlZnVuZFBvbGwuc3RhcnRUaW1lKCk7CiAgICAgICAgICAgICAgICBzZWNvbmRSZWZ1bmRQb2xsRGF0ZSA9IHRvVGltZXN0YW1wKAogICAgICAgICAgICAgICAgICAgIGdldFllYXIoc3RhcnRUaW1lKSwKICAgICAgICAgICAgICAgICAgICBnZXRNb250aChzdGFydFRpbWUpICsgMiwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgaXNXaXRoZHJhd0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlY29uZFJlZnVuZFBvbGxEYXRlID0gMDsKICAgICAgICAgICAgaXNXaXRoZHJhd0VuYWJsZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBSZWZ1bmRQb2xsRmluaXNoZWQoYWdyZWUpOwoKICAgICAgICBkZWxldGUgcmVmdW5kUG9sbDsKICAgIH0KCiAgICBmdW5jdGlvbiBmb3JjZVJlZnVuZCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGVuYWJsZVJlZnVuZCgpOwogICAgfQp9'.
	

]
