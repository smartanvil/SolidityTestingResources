Class {
	#name : #SRT6E3Ed592e28006Eb6db16A568a56E82437A32935,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6E3Ed592e28006Eb6db16A568a56E82437A32935 >> base64 [
	^ ''.
	

]
