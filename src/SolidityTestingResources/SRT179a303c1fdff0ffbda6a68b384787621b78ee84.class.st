Class {
	#name : #SRT179a303c1fdff0ffbda6a68b384787621b78ee84,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT179a303c1fdff0ffbda6a68b384787621b78ee84 >> base64 [
	^ ''.
	

]
