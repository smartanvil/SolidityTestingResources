Class {
	#name : #SRTcc99a3284b8f6eb1c2497ad3267e02d930c853c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc99a3284b8f6eb1c2497ad3267e02d930c853c8 >> base64 [
	^ ''.
	

]
