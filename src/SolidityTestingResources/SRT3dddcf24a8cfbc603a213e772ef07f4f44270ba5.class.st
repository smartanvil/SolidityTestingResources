Class {
	#name : #SRT3dddcf24a8cfbc603a213e772ef07f4f44270ba5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3dddcf24a8cfbc603a213e772ef07f4f44270ba5 >> base64 [
	^ ''.
	

]
