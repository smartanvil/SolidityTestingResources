Class {
	#name : #SRT7Ec6A713197FCBb4cFe7213800470b0940268549,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7Ec6A713197FCBb4cFe7213800470b0940268549 >> base64 [
	^ ''.
	

]
