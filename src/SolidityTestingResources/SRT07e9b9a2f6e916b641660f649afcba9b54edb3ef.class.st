Class {
	#name : #SRT07e9b9a2f6e916b641660f649afcba9b54edb3ef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07e9b9a2f6e916b641660f649afcba9b54edb3ef >> base64 [
	^ ''.
	

]
