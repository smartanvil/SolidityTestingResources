Class {
	#name : #SRT03209BdE47dA583547C17c47e7CA74bFa3DFb404,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT03209BdE47dA583547C17c47e7CA74bFa3DFb404 >> base64 [
	^ ''.
	

]
