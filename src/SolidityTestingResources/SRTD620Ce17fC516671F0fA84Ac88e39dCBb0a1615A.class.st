Class {
	#name : #SRTD620Ce17fC516671F0fA84Ac88e39dCBb0a1615A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTD620Ce17fC516671F0fA84Ac88e39dCBb0a1615A >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIEFycmF5MjU2IExpYnJhcnkKICogQGF1dGhvciBNYWpvb2xyLmlvCiAqCiAqIHZlcnNpb24gMS4xLjAKICogQ29weXJpZ2h0IChjKSAyMDE3IE1ham9vbHIsIExMQwogKiBUaGUgTUlUIExpY2Vuc2UgKE1JVCkKICogaHR0cHM6Ly9naXRodWIuY29tL01ham9vbHIvZXRoZXJldW0tbGlicmFyaWVzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UKICoKICogVGhlIEFycmF5MjU2IExpYnJhcnkgcHJvdmlkZXMgYSBmZXcgdXRpbGl0eSBmdW5jdGlvbnMgdG8gd29yayB3aXRoCiAqIHN0b3JhZ2UgdWludDI1NltdIHR5cGVzIGluIHBsYWNlLiBNYWpvb2xyIHByb3ZpZGVzIHNtYXJ0IGNvbnRyYWN0IHNlcnZpY2VzCiAqIGFuZCBzZWN1cml0eSByZXZpZXdzIGZvciBjb250cmFjdCBkZXBsb3ltZW50cyBpbiBhZGRpdGlvbiB0byB3b3JraW5nIG9uIG9wZW4KICogc291cmNlIHByb2plY3RzIGluIHRoZSBFdGhlcmV1bSBjb21tdW5pdHkuIE91ciBwdXJwb3NlIGlzIHRvIHRlc3QsIGRvY3VtZW50LAogKiBhbmQgZGVwbG95IHJldXNhYmxlIGNvZGUgb250byB0aGUgYmxvY2tjaGFpbiBhbmQgaW1wcm92ZSBib3RoIHNlY3VyaXR5IGFuZAogKiB1c2FiaWxpdHkuIFdlIGFsc28gZWR1Y2F0ZSBub24tcHJvZml0cywgc2Nob29scywgYW5kIG90aGVyIGNvbW11bml0eSBtZW1iZXJzCiAqIGFib3V0IHRoZSBhcHBsaWNhdGlvbiBvZiBibG9ja2NoYWluIHRlY2hub2xvZ3kuCiAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uOiBtYWpvb2xyLmlvCiAqCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULgogKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWQogKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULAogKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRQogKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KICovCgpsaWJyYXJ5IEFycmF5MjU2TGliIHsKCiAgLy8vIEBkZXYgU3VtIHZlY3RvcgogIC8vLyBAcGFyYW0gc2VsZiBTdG9yYWdlIGFycmF5IGNvbnRhaW5pbmcgdWludDI1NiB0eXBlIHZhcmlhYmxlcwogIC8vLyBAcmV0dXJuIHN1bSBUaGUgc3VtIG9mIGFsbCBlbGVtZW50cywgZG9lcyBub3QgY2hlY2sgZm9yIG92ZXJmbG93CiAgZnVuY3Rpb24gc3VtRWxlbWVudHModWludDI1NltdIHN0b3JhZ2Ugc2VsZikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2IHN1bSkgewogICAgYXNzZW1ibHkgewogICAgICBtc3RvcmUoMHg2MCxzZWxmX3Nsb3QpCgogICAgICBmb3IgeyBsZXQgaSA6PSAwIH0gbHQoaSwgc2xvYWQoc2VsZl9zbG90KSkgeyBpIDo9IGFkZChpLCAxKSB9IHsKICAgICAgICBzdW0gOj0gYWRkKHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpLHN1bSkKICAgICAgfQogICAgfQogIH0KCiAgLy8vIEBkZXYgUmV0dXJucyB0aGUgbWF4IHZhbHVlIGluIGFuIGFycmF5LgogIC8vLyBAcGFyYW0gc2VsZiBTdG9yYWdlIGFycmF5IGNvbnRhaW5pbmcgdWludDI1NiB0eXBlIHZhcmlhYmxlcwogIC8vLyBAcmV0dXJuIG1heFZhbHVlIFRoZSBoaWdoZXN0IHZhbHVlIGluIHRoZSBhcnJheQogIGZ1bmN0aW9uIGdldE1heCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYgbWF4VmFsdWUpIHsKICAgIGFzc2VtYmx5IHsKICAgICAgbXN0b3JlKDB4NjAsc2VsZl9zbG90KQogICAgICBtYXhWYWx1ZSA6PSBzbG9hZChzaGEzKDB4NjAsMHgyMCkpCgogICAgICBmb3IgeyBsZXQgaSA6PSAwIH0gbHQoaSwgc2xvYWQoc2VsZl9zbG90KSkgeyBpIDo9IGFkZChpLCAxKSB9IHsKICAgICAgICBzd2l0Y2ggZ3Qoc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxpKSksIG1heFZhbHVlKQogICAgICAgIGNhc2UgMSB7CiAgICAgICAgICBtYXhWYWx1ZSA6PSBzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLGkpKQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLy8vIEBkZXYgUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBpbiBhbiBhcnJheS4KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMKICAvLy8gQHJldHVybiBtaW5WYWx1ZSBUaGUgaGlnaGVzdCB2YWx1ZSBpbiB0aGUgYXJyYXkKICBmdW5jdGlvbiBnZXRNaW4odWludDI1NltdIHN0b3JhZ2Ugc2VsZikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2IG1pblZhbHVlKSB7CiAgICBhc3NlbWJseSB7CiAgICAgIG1zdG9yZSgweDYwLHNlbGZfc2xvdCkKICAgICAgbWluVmFsdWUgOj0gc2xvYWQoc2hhMygweDYwLDB4MjApKQoKICAgICAgZm9yIHsgbGV0IGkgOj0gMCB9IGx0KGksIHNsb2FkKHNlbGZfc2xvdCkpIHsgaSA6PSBhZGQoaSwgMSkgfSB7CiAgICAgICAgc3dpdGNoIGd0KHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpLCBtaW5WYWx1ZSkKICAgICAgICBjYXNlIDAgewogICAgICAgICAgbWluVmFsdWUgOj0gc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxpKSkKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8vLyBAZGV2IEZpbmRzIHRoZSBpbmRleCBvZiBhIGdpdmVuIHZhbHVlIGluIGFuIGFycmF5CiAgLy8vIEBwYXJhbSBzZWxmIFN0b3JhZ2UgYXJyYXkgY29udGFpbmluZyB1aW50MjU2IHR5cGUgdmFyaWFibGVzCiAgLy8vIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvcgogIC8vLyBAcGFyYW0gaXNTb3J0ZWQgVHJ1ZSBpZiB0aGUgYXJyYXkgaXMgc29ydGVkLCBmYWxzZSBvdGhlcndpc2UKICAvLy8gQHJldHVybiBmb3VuZCBUcnVlIGlmIHRoZSB2YWx1ZSB3YXMgZm91bmQsIGZhbHNlIG90aGVyd2lzZQogIC8vLyBAcmV0dXJuIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gdmFsdWUsIHJldHVybnMgMCBpZiBmb3VuZCBpcyBmYWxzZQogIGZ1bmN0aW9uIGluZGV4T2YodWludDI1NltdIHN0b3JhZ2Ugc2VsZiwgdWludDI1NiB2YWx1ZSwgYm9vbCBpc1NvcnRlZCkKICAgICAgICAgICBwdWJsaWMKICAgICAgICAgICB2aWV3CiAgICAgICAgICAgcmV0dXJucyhib29sIGZvdW5kLCB1aW50MjU2IGluZGV4KSB7CiAgICBhc3NlbWJseXsKICAgICAgbXN0b3JlKDB4NjAsc2VsZl9zbG90KQogICAgICBzd2l0Y2ggaXNTb3J0ZWQKICAgICAgY2FzZSAxIHsKICAgICAgICBsZXQgaGlnaCA6PSBzdWIoc2xvYWQoc2VsZl9zbG90KSwxKQogICAgICAgIGxldCBtaWQgOj0gMAogICAgICAgIGxldCBsb3cgOj0gMAogICAgICAgIGZvciB7IH0gaXN6ZXJvKGd0KGxvdywgaGlnaCkpIHsgfSB7CiAgICAgICAgICBtaWQgOj0gZGl2KGFkZChsb3csaGlnaCksMikKCiAgICAgICAgICBzd2l0Y2ggbHQoc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxtaWQpKSx2YWx1ZSkKICAgICAgICAgIGNhc2UgMSB7CiAgICAgICAgICAgICBsb3cgOj0gYWRkKG1pZCwxKQogICAgICAgICAgfQogICAgICAgICAgY2FzZSAwIHsKICAgICAgICAgICAgc3dpdGNoIGd0KHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksbWlkKSksdmFsdWUpCiAgICAgICAgICAgIGNhc2UgMSB7CiAgICAgICAgICAgICAgaGlnaCA6PSBzdWIobWlkLDEpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FzZSAwIHsKICAgICAgICAgICAgICBmb3VuZCA6PSAxCiAgICAgICAgICAgICAgaW5kZXggOj0gbWlkCiAgICAgICAgICAgICAgbG93IDo9IGFkZChoaWdoLDEpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgY2FzZSAwIHsKICAgICAgICBmb3IgeyBsZXQgbG93IDo9IDAgfSBsdChsb3csIHNsb2FkKHNlbGZfc2xvdCkpIHsgbG93IDo9IGFkZChsb3csIDEpIH0gewogICAgICAgICAgc3dpdGNoIGVxKHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksbG93KSksIHZhbHVlKQogICAgICAgICAgY2FzZSAxIHsKICAgICAgICAgICAgZm91bmQgOj0gMQogICAgICAgICAgICBpbmRleCA6PSBsb3cKICAgICAgICAgICAgbG93IDo9IHNsb2FkKHNlbGZfc2xvdCkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGhlYXBTb3J0CiAgLy8vIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgY2hpbGQgbm9kZQogIC8vLyBAcmV0dXJuIHBJIFRoZSBwYXJlbnQgbm9kZSBpbmRleAogIGZ1bmN0aW9uIGdldFBhcmVudEkodWludDI1NiBpbmRleCkgcHJpdmF0ZSBwdXJlIHJldHVybnMgKHVpbnQyNTYgcEkpIHsKICAgIHVpbnQyNTYgaSA9IGluZGV4IC0gMTsKICAgIHBJID0gaS8yOwogIH0KCiAgLy8vIEBkZXYgVXRpbGl0eSBmdW5jdGlvbiBmb3IgaGVhcFNvcnQKICAvLy8gQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiBwYXJlbnQgbm9kZQogIC8vLyBAcmV0dXJuIGxjSSBUaGUgaW5kZXggb2YgbGVmdCBjaGlsZAogIGZ1bmN0aW9uIGdldExlZnRDaGlsZEkodWludDI1NiBpbmRleCkgcHJpdmF0ZSBwdXJlIHJldHVybnMgKHVpbnQyNTYgbGNJKSB7CiAgICB1aW50MjU2IGkgPSBpbmRleCAqIDI7CiAgICBsY0kgPSBpICsgMTsKICB9CgogIC8vLyBAZGV2IFNvcnRzIGdpdmVuIGFycmF5IGluIHBsYWNlCiAgLy8vIEBwYXJhbSBzZWxmIFN0b3JhZ2UgYXJyYXkgY29udGFpbmluZyB1aW50MjU2IHR5cGUgdmFyaWFibGVzCiAgZnVuY3Rpb24gaGVhcFNvcnQodWludDI1NltdIHN0b3JhZ2Ugc2VsZikgcHVibGljIHsKICAgIHVpbnQyNTYgZW5kID0gc2VsZi5sZW5ndGggLSAxOwogICAgdWludDI1NiBzdGFydCA9IGdldFBhcmVudEkoZW5kKTsKICAgIHVpbnQyNTYgcm9vdCA9IHN0YXJ0OwogICAgdWludDI1NiBsQ2hpbGQ7CiAgICB1aW50MjU2IHJDaGlsZDsKICAgIHVpbnQyNTYgc3dhcDsKICAgIHVpbnQyNTYgdGVtcDsKICAgIHdoaWxlKHN0YXJ0ID49IDApewogICAgICByb290ID0gc3RhcnQ7CiAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkoc3RhcnQpOwogICAgICB3aGlsZShsQ2hpbGQgPD0gZW5kKXsKICAgICAgICByQ2hpbGQgPSBsQ2hpbGQgKyAxOwogICAgICAgIHN3YXAgPSByb290OwogICAgICAgIGlmKHNlbGZbc3dhcF0gPCBzZWxmW2xDaGlsZF0pCiAgICAgICAgICBzd2FwID0gbENoaWxkOwogICAgICAgIGlmKChyQ2hpbGQgPD0gZW5kKSAmJiAoc2VsZltzd2FwXTxzZWxmW3JDaGlsZF0pKQogICAgICAgICAgc3dhcCA9IHJDaGlsZDsKICAgICAgICBpZihzd2FwID09IHJvb3QpCiAgICAgICAgICBsQ2hpbGQgPSBlbmQrMTsKICAgICAgICBlbHNlIHsKICAgICAgICAgIHRlbXAgPSBzZWxmW3N3YXBdOwogICAgICAgICAgc2VsZltzd2FwXSA9IHNlbGZbcm9vdF07CiAgICAgICAgICBzZWxmW3Jvb3RdID0gdGVtcDsKICAgICAgICAgIHJvb3QgPSBzd2FwOwogICAgICAgICAgbENoaWxkID0gZ2V0TGVmdENoaWxkSShyb290KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYoc3RhcnQgPT0gMCkKICAgICAgICBicmVhazsKICAgICAgZWxzZQogICAgICAgIHN0YXJ0ID0gc3RhcnQgLSAxOwogICAgfQogICAgd2hpbGUoZW5kID4gMCl7CiAgICAgIHRlbXAgPSBzZWxmW2VuZF07CiAgICAgIHNlbGZbZW5kXSA9IHNlbGZbMF07CiAgICAgIHNlbGZbMF0gPSB0ZW1wOwogICAgICBlbmQgPSBlbmQgLSAxOwogICAgICByb290ID0gMDsKICAgICAgbENoaWxkID0gZ2V0TGVmdENoaWxkSSgwKTsKICAgICAgd2hpbGUobENoaWxkIDw9IGVuZCl7CiAgICAgICAgckNoaWxkID0gbENoaWxkICsgMTsKICAgICAgICBzd2FwID0gcm9vdDsKICAgICAgICBpZihzZWxmW3N3YXBdIDwgc2VsZltsQ2hpbGRdKQogICAgICAgICAgc3dhcCA9IGxDaGlsZDsKICAgICAgICBpZigockNoaWxkIDw9IGVuZCkgJiYgKHNlbGZbc3dhcF08c2VsZltyQ2hpbGRdKSkKICAgICAgICAgIHN3YXAgPSByQ2hpbGQ7CiAgICAgICAgaWYoc3dhcCA9PSByb290KQogICAgICAgICAgbENoaWxkID0gZW5kICsgMTsKICAgICAgICBlbHNlIHsKICAgICAgICAgIHRlbXAgPSBzZWxmW3N3YXBdOwogICAgICAgICAgc2VsZltzd2FwXSA9IHNlbGZbcm9vdF07CiAgICAgICAgICBzZWxmW3Jvb3RdID0gdGVtcDsKICAgICAgICAgIHJvb3QgPSBzd2FwOwogICAgICAgICAgbENoaWxkID0gZ2V0TGVmdENoaWxkSShyb290KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8vLyBAZGV2IFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGEgZ2l2ZW4gYXJyYXkuCiAgLy8vIEBwYXJhbSBzZWxmIFN0b3JhZ2UgYXJyYXkgY29udGFpbmluZyB1aW50MjU2IHR5cGUgdmFyaWFibGVzCiAgZnVuY3Rpb24gdW5pcSh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBsZW5ndGgpIHsKICAgIGJvb2wgY29udGFpbnM7CiAgICB1aW50MjU2IGluZGV4OwoKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHNlbGYubGVuZ3RoOyBpKyspIHsKICAgICAgKGNvbnRhaW5zLCBpbmRleCkgPSBpbmRleE9mKHNlbGYsIHNlbGZbaV0sIGZhbHNlKTsKCiAgICAgIGlmIChpID4gaW5kZXgpIHsKICAgICAgICBmb3IgKHVpbnQyNTYgaiA9IGk7IGogPCBzZWxmLmxlbmd0aCAtIDE7IGorKyl7CiAgICAgICAgICBzZWxmW2pdID0gc2VsZltqICsgMV07CiAgICAgICAgfQoKICAgICAgICBkZWxldGUgc2VsZltzZWxmLmxlbmd0aCAtIDFdOwogICAgICAgIHNlbGYubGVuZ3RoLS07CiAgICAgICAgaS0tOwogICAgICB9CiAgICB9CgogICAgbGVuZ3RoID0gc2VsZi5sZW5ndGg7CiAgfQp9'.
	

]
