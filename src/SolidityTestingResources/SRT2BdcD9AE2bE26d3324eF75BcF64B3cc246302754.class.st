Class {
	#name : #SRT2BdcD9AE2bE26d3324eF75BcF64B3cc246302754,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2BdcD9AE2bE26d3324eF75BcF64B3cc246302754 >> base64 [
	^ ''.
	

]
