Class {
	#name : #SRTfa1d63b87f40c92d27bfb255419c1ea8c49086de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa1d63b87f40c92d27bfb255419c1ea8c49086de >> base64 [
	^ ''.
	

]
