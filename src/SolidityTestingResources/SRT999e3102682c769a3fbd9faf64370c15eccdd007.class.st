Class {
	#name : #SRT999e3102682c769a3fbd9faf64370c15eccdd007,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT999e3102682c769a3fbd9faf64370c15eccdd007 >> base64 [
	^ ''.
	

]
