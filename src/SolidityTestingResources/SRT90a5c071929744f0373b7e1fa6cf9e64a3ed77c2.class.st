Class {
	#name : #SRT90a5c071929744f0373b7e1fa6cf9e64a3ed77c2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90a5c071929744f0373b7e1fa6cf9e64a3ed77c2 >> base64 [
	^ ''.
	

]
