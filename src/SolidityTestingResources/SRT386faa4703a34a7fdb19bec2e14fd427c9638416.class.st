Class {
	#name : #SRT386faa4703a34a7fdb19bec2e14fd427c9638416,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT386faa4703a34a7fdb19bec2e14fd427c9638416 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGZ1bmN0aW9uIG93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KY29udHJhY3QgVG9rZW5FUkMyMCBpcyBvd25lZCB7CiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIHVpbnQgcHVibGljIGFtb3VudFJhaXNlZDsKCiAgICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7CiAgICB1aW50MjU2IHB1YmxpYyBidXlQcmljZTsKICAgIGJvb2wgcHVibGljIGxvY2tlZFNlbGw7CiAgICAKICAgIGJ5dGVzMzIgcHVibGljIGN1cnJlbnRDaGFsbGVuZ2U7CiAgICB1aW50IHB1YmxpYyB0aW1lT2ZMYXN0UHJvb2Y7CiAgICB1aW50IHB1YmxpYyBkaWZmaWN1bHR5ID0gMTAqKjMyOwogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBGcmVlemUoYWRkcmVzcyBmcm9tLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBVbkZyZWV6ZShhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgICAgICAgCiAgICBmdW5jdGlvbiBUb2tlbkVSQzIwKHVpbnQyNTYgaW5pdGlhbFN1cHBseSwgc3RyaW5nIHRva2VuTmFtZSwgc3RyaW5nIHRva2VuU3ltYm9sLCB1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHkgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsgIAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICB0aW1lT2ZMYXN0UHJvb2YgPSBub3c7CiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlOwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgICAgICAgbG9ja2VkU2VsbCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZW1pc3Npb24odWludDI1NiBhbW91bnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ICs9IGFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgfSAKICAgIAogICAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3U2VsbFByaWNlLCB1aW50MjU2IG5ld0J1eVByaWNlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBzZWxsUHJpY2UgPSBuZXdTZWxsUHJpY2U7CiAgICAgICAgYnV5UHJpY2UgPSBuZXdCdXlQcmljZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHBheWFibGUgcmV0dXJucyAodWludCBhbW91bnQpIHsKICAgICAgICBhbW91bnQgPSAobXNnLnZhbHVlICogMTAgKiogdWludDI1NihkZWNpbWFscykpIC8gYnV5UHJpY2U7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2Zbb3duZXJdID49IGFtb3VudCk7ICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAKICAgICAgICBiYWxhbmNlT2Zbb3duZXJdIC09IGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBhbW91bnRSYWlzZWQgKz0gbXNnLnZhbHVlOwogICAgICAgIFRyYW5zZmVyKG93bmVyLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gc2VsbCh1aW50IGFtb3VudCkgcHVibGljIHJldHVybnMgKHVpbnQgcmV2ZW51ZSkgewogICAgICAgIHJlcXVpcmUoIWxvY2tlZFNlbGwpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IGFtb3VudCk7ICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW293bmVyXSArPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IGFtb3VudDsgIAogICAgICAgIHJldmVudWUgPSBhbW91bnQgKiBzZWxsUHJpY2UgLyAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICBhbW91bnRSYWlzZWQgLT0gcmV2ZW51ZTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIuc2VuZChyZXZlbnVlKSk7ICAgICAgICAgICAgICAgIAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIG93bmVyLCBhbW91bnQpOyAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiByZXZlbnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gbG9ja1NlbGwoYm9vbCB2YWx1ZSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgbG9ja2VkU2VsbCA9IHZhbHVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHByb29mT2ZXb3JrKHVpbnQgbm9uY2UpIHB1YmxpYyB7CiAgICAgICAgYnl0ZXM4IG4gPSBieXRlczgoa2VjY2FrMjU2KG5vbmNlLCBjdXJyZW50Q2hhbGxlbmdlKSk7ICAgIAogICAgICAgIHJlcXVpcmUobiA+PSBieXRlczgoZGlmZmljdWx0eSkpOyAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgdWludCB0aW1lU2luY2VMYXN0UHJvb2YgPSAobm93IC0gdGltZU9mTGFzdFByb29mKTsgIAogICAgICAgIHJlcXVpcmUodGltZVNpbmNlTGFzdFByb29mID49IDUgc2Vjb25kcyk7ICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IHRpbWVTaW5jZUxhc3RQcm9vZiAvIDYwIHNlY29uZHM7ICAKCiAgICAgICAgZGlmZmljdWx0eSA9IGRpZmZpY3VsdHkgKiAxMCBtaW51dGVzIC8gdGltZVNpbmNlTGFzdFByb29mICsgMTsgIAoKICAgICAgICB0aW1lT2ZMYXN0UHJvb2YgPSBub3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgY3VycmVudENoYWxsZW5nZSA9IGtlY2NhazI1Nihub25jZSwgY3VycmVudENoYWxsZW5nZSwgYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpKTsgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IGFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUodG8gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltmcm9tXSA+PSBhbW91bnQpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW3RvXSArIGFtb3VudCA+IGJhbGFuY2VPZlt0b10pOwogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltmcm9tXSArIGJhbGFuY2VPZlt0b107CiAgICAgICAgYmFsYW5jZU9mW2Zyb21dIC09IGFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbdG9dICs9IGFtb3VudDsKICAgICAgICBUcmFuc2Zlcihmcm9tLCB0bywgYW1vdW50KTsKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW2Zyb21dICsgYmFsYW5jZU9mW3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCBhbW91bnQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYW1vdW50IDw9IGFsbG93YW5jZVtmcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgYWxsb3dhbmNlW2Zyb21dW21zZy5zZW5kZXJdIC09IGFtb3VudDsKICAgICAgICBfdHJhbnNmZXIoZnJvbSwgdG8sIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gYW1vdW50OwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gYW1vdW50KTsgICAKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OyAgICAgICAgICAgIAogICAgICAgIHRvdGFsU3VwcGx5IC09IGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm5Gcm9tKGFkZHJlc3MgZnJvbSwgdWludDI1NiBhbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltmcm9tXSA+PSBhbW91bnQpOwogICAgICAgIHJlcXVpcmUoYW1vdW50IDw9IGFsbG93YW5jZVtmcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgYmFsYW5jZU9mW2Zyb21dIC09IGFtb3VudDsKICAgICAgICBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0gLT0gYW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5IC09IGFtb3VudDsKICAgICAgICBCdXJuKGZyb20sIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdSYWlzZWQodWludCBhbW91bnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoYW1vdW50UmFpc2VkID49IGFtb3VudCk7CiAgICAgICAgaWYgKG93bmVyLnNlbmQoYW1vdW50KSkKICAgICAgICAgICAgYW1vdW50UmFpc2VkIC09IGFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBmcmVlemUoYWRkcmVzcyBmcm9tLCB1aW50MjU2IGFtb3VudCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAgIHJlcXVpcmUoYW1vdW50IDw9IGFsbG93YW5jZVtmcm9tXVt0aGlzXSk7CiAgICAgICAgYWxsb3dhbmNlW2Zyb21dW3RoaXNdIC09IGFtb3VudDsKICAgICAgICBfdHJhbnNmZXIoZnJvbSwgdGhpcywgYW1vdW50KTsKICAgICAgICBGcmVlemUoZnJvbSwgYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1bkZyZWV6ZShhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAgIF90cmFuc2Zlcih0aGlzLCB0bywgYW1vdW50KTsKICAgICAgICBVbkZyZWV6ZSh0bywgYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
