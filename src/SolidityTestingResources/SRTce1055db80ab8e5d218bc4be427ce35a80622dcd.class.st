Class {
	#name : #SRTce1055db80ab8e5d218bc4be427ce35a80622dcd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTce1055db80ab8e5d218bc4be427ce35a80622dcd >> base64 [
	^ ''.
	

]
