Class {
	#name : #SRT0766315FC8257F890B683b5F9fAA9875c7846b4D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0766315FC8257F890B683b5F9fAA9875c7846b4D >> base64 [
	^ ''.
	

]
