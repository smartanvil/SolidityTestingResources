Class {
	#name : #SRT92249e2ac5ff1645a2f25519a832fddbc13dac1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92249e2ac5ff1645a2f25519a832fddbc13dac1c >> base64 [
	^ ''.
	

]
