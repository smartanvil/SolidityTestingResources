Class {
	#name : #SRT4290563C2D7c255B5EEC87f2D3bD10389f991d68,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4290563C2D7c255B5EEC87f2D3bD10389f991d68 >> base64 [
	^ 'Ly8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBUb2tlbiB7CiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgkKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoJCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QJCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgkKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QJCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoJCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAkKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgkKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgkKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IElNaWdyYXRpb25Db250cmFjdCB7CiAgICBmdW5jdGlvbiBtaWdyYXRlKGFkZHJlc3MgYWRkciwgdWludDI1NiB1aXApIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0KCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50MjU2IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9CgovKiAgRVJDIDIwIHRva2VuICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKY29udHJhY3QgVW5saW1pdGVkSVBUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBTYWZlTWF0aCB7CgogICAgLy8gbWV0YWRhdGEKICAgIHN0cmluZyAgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiVW5saW1pdGVkSVAgVG9rZW4iOwogICAgc3RyaW5nICBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlVJUCI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nICBwdWJsaWMgdmVyc2lvbiA9ICIxLjAiOwoKICAgIC8vIGNvbnRyYWN0cwogICAgYWRkcmVzcyBwdWJsaWMgZXRoRnVuZERlcG9zaXQ7ICAgICAgICAgIC8vIGRlcG9zaXQgYWRkcmVzcyBmb3IgRVRIIGZvciBVbmxpbWl0ZWRJUCBUZWFtLgogICAgYWRkcmVzcyBwdWJsaWMgbmV3Q29udHJhY3RBZGRyOyAgICAgICAgIC8vIHRoZSBuZXcgY29udHJhY3QgZm9yIFVubGltaXRlZElQIHRva2VuIHVwZGF0ZXM7CgogICAgLy8gY3Jvd2RzYWxlIHBhcmFtZXRlcnMKICAgIGJvb2wgICAgcHVibGljIGlzRnVuZGluZzsgICAgICAgICAgICAgICAgLy8gc3dpdGNoZWQgdG8gdHJ1ZSBpbiBvcGVyYXRpb25hbCBzdGF0ZQogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0YXJ0QmxvY2s7CiAgICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nU3RvcEJsb2NrOwoKICAgIHVpbnQyNTYgcHVibGljIGN1cnJlbnRTdXBwbHk7ICAgICAgICAgICAvLyBjdXJyZW50IHN1cHBseSB0b2tlbnMgZm9yIHNlbGwKICAgIHVpbnQyNTYgcHVibGljIHRva2VuUmFpc2VkID0gMDsgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIHRvdGFsIHNvbGQgdG9rZW4KICAgIHVpbnQyNTYgcHVibGljIHRva2VuTWlncmF0ZWQgPSAwOyAgICAgLy8gdGhlIG51bWJlciBvZiB0b3RhbCB0cmFuc2ZlcnRlZCB0b2tlbgogICAgdWludDI1NiBwdWJsaWMgdG9rZW5FeGNoYW5nZVJhdGUgPSAxMDAwOyAgICAgICAgICAgICAvLyAxMDAwIFVJUCB0b2tlbnMgcGVyIDEgRVRICgogICAgLy8gZXZlbnRzCiAgICBldmVudCBJc3N1ZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsgICAgICAvLyBpc3N1ZSB0b2tlbiBmb3IgcHVibGljIHNhbGU7CiAgICBldmVudCBJbmNyZWFzZVN1cHBseSh1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBEZWNyZWFzZVN1cHBseSh1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBNaWdyYXRlKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIC8vIGZvcm1hdCBkZWNpbWFscy4KICAgIGZ1bmN0aW9uIGZvcm1hdERlY2ltYWxzKHVpbnQyNTYgX3ZhbHVlKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2ICkgewogICAgICAgIHJldHVybiBfdmFsdWUgKiAxMCAqKiBkZWNpbWFsczsKICAgIH0KCiAgICAvLyBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gVW5saW1pdGVkSVBUb2tlbigpCiAgICB7CiAgICAgICAgZXRoRnVuZERlcG9zaXQgPSAweEJiZjkxQ2Y0Y2Y1ODI2MDBCRWNCYjYzZDVCZEI4RDk2OUYyMTc3OUM7CgogICAgICAgIGlzRnVuZGluZyA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udHJvbHMgcHJlIHRocm91Z2ggY3Jvd2RzYWxlIHN0YXRlCiAgICAgICAgZnVuZGluZ1N0YXJ0QmxvY2sgPSAwOwogICAgICAgIGZ1bmRpbmdTdG9wQmxvY2sgPSAwOwoKICAgICAgICBjdXJyZW50U3VwcGx5ID0gZm9ybWF0RGVjaW1hbHMoMCk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBmb3JtYXREZWNpbWFscygzMDAwMDAwMDAwKTsKICAgICAgICByZXF1aXJlKGN1cnJlbnRTdXBwbHkgPD0gdG90YWxTdXBwbHkpOwogICAgICAgIGJhbGFuY2VzW2V0aEZ1bmREZXBvc2l0XSA9IHRvdGFsU3VwcGx5LWN1cnJlbnRTdXBwbHk7CiAgICB9CgogICAgbW9kaWZpZXIgaXNPd25lcigpICB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBldGhGdW5kRGVwb3NpdCk7IF87IH0KCiAgICAvLy8gQGRldiBzZXQgdGhlIHRva2VuJ3MgdG9rZW5FeGNoYW5nZVJhdGUsCiAgICBmdW5jdGlvbiBzZXRUb2tlbkV4Y2hhbmdlUmF0ZSh1aW50MjU2IF90b2tlbkV4Y2hhbmdlUmF0ZSkgaXNPd25lciBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG9rZW5FeGNoYW5nZVJhdGUgPiAwKTsKICAgICAgICByZXF1aXJlKF90b2tlbkV4Y2hhbmdlUmF0ZSAhPSB0b2tlbkV4Y2hhbmdlUmF0ZSk7CiAgICAgICAgdG9rZW5FeGNoYW5nZVJhdGUgPSBfdG9rZW5FeGNoYW5nZVJhdGU7CiAgICB9CgogICAgLy8vIEBkZXYgaW5jcmVhc2UgdGhlIHRva2VuJ3Mgc3VwcGx5CiAgICBmdW5jdGlvbiBpbmNyZWFzZVN1cHBseSAodWludDI1NiBfdmFsdWUpIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHVpbnQyNTYgdmFsdWUgPSBmb3JtYXREZWNpbWFscyhfdmFsdWUpOwogICAgICAgIHJlcXVpcmUgKHZhbHVlICsgY3VycmVudFN1cHBseSA8PSB0b3RhbFN1cHBseSk7CiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgdmFsdWU+MCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICAgICAgY3VycmVudFN1cHBseSA9IHNhZmVBZGQoY3VycmVudFN1cHBseSwgdmFsdWUpOwogICAgICAgIEluY3JlYXNlU3VwcGx5KHZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBkZWNyZWFzZSB0aGUgdG9rZW4ncyBzdXBwbHkKICAgIGZ1bmN0aW9uIGRlY3JlYXNlU3VwcGx5ICh1aW50MjU2IF92YWx1ZSkgaXNPd25lciBleHRlcm5hbCB7CiAgICAgICAgdWludDI1NiB2YWx1ZSA9IGZvcm1hdERlY2ltYWxzKF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZSAodmFsdWUgKyB0b2tlblJhaXNlZCA8PSBjdXJyZW50U3VwcGx5KTsKICAgICAgICBjdXJyZW50U3VwcGx5ID0gc2FmZVN1YnRyYWN0KGN1cnJlbnRTdXBwbHksIHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB2YWx1ZTsKICAgICAgICBEZWNyZWFzZVN1cHBseSh2YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgdHVybiBvbiB0aGUgZnVuZGluZyBzdGF0ZQogICAgZnVuY3Rpb24gc3RhcnRGdW5kaW5nICh1aW50MjU2IF9mdW5kaW5nU3RhcnRCbG9jaywgdWludDI1NiBfZnVuZGluZ1N0b3BCbG9jaykgaXNPd25lciBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSghaXNGdW5kaW5nKTsKICAgICAgICByZXF1aXJlKF9mdW5kaW5nU3RhcnRCbG9jayA8IF9mdW5kaW5nU3RvcEJsb2NrKTsKICAgICAgICByZXF1aXJlKGJsb2NrLm51bWJlciA8IF9mdW5kaW5nU3RhcnRCbG9jaykgOwogICAgICAgIGZ1bmRpbmdTdGFydEJsb2NrID0gX2Z1bmRpbmdTdGFydEJsb2NrOwogICAgICAgIGZ1bmRpbmdTdG9wQmxvY2sgPSBfZnVuZGluZ1N0b3BCbG9jazsKICAgICAgICBpc0Z1bmRpbmcgPSB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IHR1cm4gb2ZmIHRoZSBmdW5kaW5nIHN0YXRlCiAgICBmdW5jdGlvbiBzdG9wRnVuZGluZygpIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoaXNGdW5kaW5nKTsKICAgICAgICBpc0Z1bmRpbmcgPSBmYWxzZTsKICAgIH0KCiAgICAvLy8gQGRldiBzZXQgYSBuZXcgY29udHJhY3QgZm9yIHJlY2lldmUgdGhlIHRva2VucyAoZm9yIHVwZGF0ZSBjb250cmFjdCkKICAgIGZ1bmN0aW9uIHNldE1pZ3JhdGVDb250cmFjdChhZGRyZXNzIF9uZXdDb250cmFjdEFkZHIpIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX25ld0NvbnRyYWN0QWRkciAhPSBuZXdDb250cmFjdEFkZHIpOwogICAgICAgIG5ld0NvbnRyYWN0QWRkciA9IF9uZXdDb250cmFjdEFkZHI7CiAgICB9CgogICAgLy8vIEBkZXYgc2V0IGEgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3RnVuZERlcG9zaXQpIGlzT3duZXIoKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfbmV3RnVuZERlcG9zaXQgIT0gYWRkcmVzcygweDApKTsKICAgICAgICBldGhGdW5kRGVwb3NpdCA9IF9uZXdGdW5kRGVwb3NpdDsKICAgIH0KCiAgICAvLy8gc2VuZHMgdGhlIHRva2VucyB0byBuZXcgY29udHJhY3QKICAgIGZ1bmN0aW9uIG1pZ3JhdGUoKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSghaXNGdW5kaW5nKTsKICAgICAgICByZXF1aXJlKG5ld0NvbnRyYWN0QWRkciAhPSBhZGRyZXNzKDB4MCkpOwoKICAgICAgICB1aW50MjU2IHRva2VucyA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUgKHRva2VucyA+IDApOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgdG9rZW5NaWdyYXRlZCA9IHNhZmVBZGQodG9rZW5NaWdyYXRlZCwgdG9rZW5zKTsKCiAgICAgICAgSU1pZ3JhdGlvbkNvbnRyYWN0IG5ld0NvbnRyYWN0ID0gSU1pZ3JhdGlvbkNvbnRyYWN0KG5ld0NvbnRyYWN0QWRkcik7CiAgICAgICAgcmVxdWlyZShuZXdDb250cmFjdC5taWdyYXRlKG1zZy5zZW5kZXIsIHRva2VucykpOwoKICAgICAgICBNaWdyYXRlKG1zZy5zZW5kZXIsIHRva2Vucyk7ICAgICAgICAgICAgICAgLy8gbG9nIGl0CiAgICB9CgogICAgLy8vIEBkZXYgd2l0aGRyYXcgRVRIIGZyb20gY29udHJhY3QgdG8gVW5saW1pdGVkSVAgdGVhbSBhZGRyZXNzCiAgICBmdW5jdGlvbiB0cmFuc2ZlckVUSCgpIGlzT3duZXIgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID4gMCk7CiAgICAgICAgcmVxdWlyZShldGhGdW5kRGVwb3NpdC5zZW5kKHRoaXMuYmFsYW5jZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIGlzT3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICB1aW50MjU2IHZhbHVlID0gZm9ybWF0RGVjaW1hbHMoX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlPjApOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgICAgIHRvdGFsU3VwcGx5IC09IHZhbHVlOwogICAgICAgIEJ1cm4obXNnLnNlbmRlcix2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIGJ1eXMgdGhlIHRva2VucwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZSAoaXNGdW5kaW5nKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwoKICAgICAgICByZXF1aXJlKGJsb2NrLm51bWJlciA+PSBmdW5kaW5nU3RhcnRCbG9jayk7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPD0gZnVuZGluZ1N0b3BCbG9jayk7CgogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gc2FmZU11bHQobXNnLnZhbHVlLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnMgKyB0b2tlblJhaXNlZCA8PSBjdXJyZW50U3VwcGx5KTsKCiAgICAgICAgdG9rZW5SYWlzZWQgPSBzYWZlQWRkKHRva2VuUmFpc2VkLCB0b2tlbnMpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2VuczsKCiAgICAgICAgSXNzdWVUb2tlbihtc2cuc2VuZGVyLCB0b2tlbnMpOyAgLy8gbG9ncyB0b2tlbiBpc3N1ZWQKICAgIH0KfQ=='.
	

]
