Class {
	#name : #SRTbcea0b07d6f79783aeaf35c6ddcd27dbd42ab621,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbcea0b07d6f79783aeaf35c6ddcd27dbd42ab621 >> base64 [
	^ ''.
	

]
