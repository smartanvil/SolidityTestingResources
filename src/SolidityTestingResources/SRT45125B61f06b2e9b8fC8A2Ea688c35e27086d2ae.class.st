Class {
	#name : #SRT45125B61f06b2e9b8fC8A2Ea688c35e27086d2ae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT45125B61f06b2e9b8fC8A2Ea688c35e27086d2ae >> base64 [
	^ ''.
	

]
