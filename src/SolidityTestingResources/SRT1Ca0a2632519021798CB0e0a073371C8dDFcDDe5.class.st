Class {
	#name : #SRT1Ca0a2632519021798CB0e0a073371C8dDFcDDe5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1Ca0a2632519021798CB0e0a073371C8dDFcDDe5 >> base64 [
	^ ''.
	

]
