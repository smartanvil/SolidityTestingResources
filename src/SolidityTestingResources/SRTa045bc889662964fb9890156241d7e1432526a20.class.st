Class {
	#name : #SRTa045bc889662964fb9890156241d7e1432526a20,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa045bc889662964fb9890156241d7e1432526a20 >> base64 [
	^ ''.
	

]
