Class {
	#name : #SRT10d4b24938f6de7ae4048c7273f09c50d5caf4d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT10d4b24938f6de7ae4048c7273f09c50d5caf4d9 >> base64 [
	^ ''.
	

]
