Class {
	#name : #SRTe372dd32e141b019346f8ee8527d3049105a47b9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe372dd32e141b019346f8ee8527d3049105a47b9 >> base64 [
	^ ''.
	

]
