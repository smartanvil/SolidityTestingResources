Class {
	#name : #SRTc6e7ce1b2b7bad6fefcf18b43f5a3cc93033f854,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc6e7ce1b2b7bad6fefcf18b43f5a3cc93033f854 >> base64 [
	^ ''.
	

]
