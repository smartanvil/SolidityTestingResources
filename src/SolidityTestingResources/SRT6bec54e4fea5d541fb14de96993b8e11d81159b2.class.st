Class {
	#name : #SRT6bec54e4fea5d541fb14de96993b8e11d81159b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6bec54e4fea5d541fb14de96993b8e11d81159b2 >> base64 [
	^ 'Ly8gb3VyIG1pcnJvcnM6Ci8vIGZ0ZWMuaW8KLy8gZnRlYy5haSAKLy8gb3VyIG9mZmljaWFsIFRlbGVncmFtIGdyb3VwOgovLyB0Lm1lL0ZURUNvZmZpY2lhbAoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE11bHRpT3duYWJsZSB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNPd25lcjsKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJIaXN0b3J5OwoKICAgIGV2ZW50IE93bmVyQWRkZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgX25ld093bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBfb2xkT3duZXIpOwoKICAgIGZ1bmN0aW9uIE11bHRpT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgLy8gQWRkIGRlZmF1bHQgb3duZXIKICAgICAgICBhZGRyZXNzIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBvd25lckhpc3RvcnkucHVzaChvd25lcik7CiAgICAgICAgaXNPd25lcltvd25lcl0gPSB0cnVlOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKGlzT3duZXJbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG93bmVySGlzdG9yeUNvdW50KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBvd25lckhpc3RvcnkubGVuZ3RoOwogICAgfQoKICAgIC8qKiBBZGQgZXh0cmEgb3duZXIuICovCiAgICBmdW5jdGlvbiBhZGRPd25lcihhZGRyZXNzIG93bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoIWlzT3duZXJbb3duZXJdKTsKICAgICAgICBvd25lckhpc3RvcnkucHVzaChvd25lcik7CiAgICAgICAgaXNPd25lcltvd25lcl0gPSB0cnVlOwogICAgICAgIE93bmVyQWRkZWRFdmVudChvd25lcik7CiAgICB9CgogICAgLyoqIFJlbW92ZSBleHRyYSBvd25lci4gKi8KICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoaXNPd25lcltvd25lcl0pOwogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgT3duZXJSZW1vdmVkRXZlbnQob3duZXIpOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMCB7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICAKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwIHsKICAgIAogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbGxvd2VkIHRoaXJkIHBhcnR5IHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX2Zyb20gQWRkcmVzcyBmcm9tIHdoZXJlIHRva2VucyBhcmUgd2l0aGRyYXduLgogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIHNlbnQuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFNldHMgYXBwcm92ZWQgYW1vdW50IG9mIHRva2VucyBmb3Igc3BlbmRlci4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIGFsbG93ZWQgYWNjb3VudC4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiBhcHByb3ZlZCB0b2tlbnMuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIGFsbG93ZWQgdG9rZW5zIGZvciBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgQWRkcmVzcyBvZiB0b2tlbiBzcGVuZGVyLgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9Cgpjb250cmFjdCBDb21tb25Ub2tlbiBpcyBTdGFuZGFyZFRva2VuLCBNdWx0aU93bmFibGUgewogICAgCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgICA9ICdGVEVDJzsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gJ0ZURUMnOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIHNhbGVMaW1pdDsgICAvLyA4NSUgb2YgdG9rZW5zIGZvciBzYWxlLgogICAgdWludDI1NiBwdWJsaWMgdGVhbVRva2VuczsgIC8vIDclIG9mIHRva2VucyBnb2VzIHRvIHRoZSB0ZWFtIGFuZCB3aWxsIGJlIGxvY2tlZCBmb3IgMSB5ZWFyLgogICAgLy8gOCUgb2YgdGhlIHJlc3QgdG9rZW5zIHdpbGwgYmUgdXNlZCBmb3IgYm91bnR5LCBhZHZpc29ycywgYW5kIGFpcmRyb3BzLgogICAgCiAgICAvLyA3JSBvZiB0ZWFtIHRva2VucyB3aWxsIGJlIGxvY2tlZCBhdCB0aGlzIGFkZHJlc3MgZm9yIDEgeWVhci4KICAgIGFkZHJlc3MgcHVibGljIHRlYW1XYWxsZXQ7IC8vIFRlYW0gYWRkcmVzcy4KICAgIAogICAgdWludCBwdWJsaWMgdW5sb2NrVGVhbVRva2Vuc1RpbWUgPSBub3cgKyAxIHllYXJzOwoKICAgIC8vIFRoZSBtYWluIGFjY291bnQgdGhhdCBob2xkcyBhbGwgdG9rZW5zIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGR1cmluZyB0b2tlbnNhbGUuCiAgICBhZGRyZXNzIHB1YmxpYyBzZWxsZXI7IC8vIFNlbGxlciBhZGRyZXNzIChtYWluIGhvbGRlciBvZiB0b2tlbnMpCgogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZDsgLy8gKGUxOCkgTnVtYmVyIG9mIHRva2VucyBzb2xkIHRocm91Z2ggYWxsIHRpZXJzIG9yIHRva2Vuc2FsZXMuCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFNhbGVzOyAvLyBUb3RhbCBudW1iZXIgb2Ygc2FsZXMgKGluY2x1ZGluZyBleHRlcm5hbCBzYWxlcykgbWFkZSB0aHJvdWdoIGFsbCB0aWVycyBvciB0b2tlbnNhbGVzLgoKICAgIC8vIExvY2sgdGhlIHRyYW5zZmVyIGZ1bmN0aW9ucyBkdXJpbmcgdG9rZW5zYWxlcyB0byBwcmV2ZW50IHByaWNlIHNwZWN1bGF0aW9ucy4KICAgIGJvb2wgcHVibGljIGxvY2tlZCA9IHRydWU7CiAgICAKICAgIGV2ZW50IFNlbGxFdmVudChhZGRyZXNzIGluZGV4ZWQgX3NlbGxlciwgYWRkcmVzcyBpbmRleGVkIF9idXllciwgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQ2hhbmdlU2VsbGVyRXZlbnQoYWRkcmVzcyBpbmRleGVkIF9vbGRTZWxsZXIsIGFkZHJlc3MgaW5kZXhlZCBfbmV3U2VsbGVyKTsKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIF9idXJuZXIsIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IFVubG9jaygpOwoKICAgIGZ1bmN0aW9uIENvbW1vblRva2VuKAogICAgICAgIGFkZHJlc3MgX3NlbGxlciwKICAgICAgICBhZGRyZXNzIF90ZWFtV2FsbGV0CiAgICApIE11bHRpT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgCiAgICAgICAgdG90YWxTdXBwbHkgPSA5OTg0MDAwMDAgZXRoZXI7CiAgICAgICAgc2FsZUxpbWl0ICAgPSA4NDg2NDAwMDAgZXRoZXI7CiAgICAgICAgdGVhbVRva2VucyAgPSAgNjk4ODgwMDAgZXRoZXI7CgogICAgICAgIHNlbGxlciA9IF9zZWxsZXI7CiAgICAgICAgdGVhbVdhbGxldCA9IF90ZWFtV2FsbGV0OwoKICAgICAgICB1aW50IHNlbGxlclRva2VucyA9IHRvdGFsU3VwcGx5IC0gdGVhbVRva2VuczsKICAgICAgICBiYWxhbmNlc1tzZWxsZXJdID0gc2VsbGVyVG9rZW5zOwogICAgICAgIFRyYW5zZmVyKDB4MCwgc2VsbGVyLCBzZWxsZXJUb2tlbnMpOwogICAgICAgIAogICAgICAgIGJhbGFuY2VzW3RlYW1XYWxsZXRdID0gdGVhbVRva2VuczsKICAgICAgICBUcmFuc2ZlcigweDAsIHRlYW1XYWxsZXQsIHRlYW1Ub2tlbnMpOwogICAgfQogICAgCiAgICBtb2RpZmllciBpZlVubG9ja2VkKGFkZHJlc3MgX2Zyb20pIHsKICAgICAgICByZXF1aXJlKCFsb2NrZWQpOwogICAgICAgIAogICAgICAgIC8vIElmIHJlcXVlc3RlZCBhIHRyYW5zZmVyIGZyb20gdGhlIHRlYW0gd2FsbGV0OgogICAgICAgIGlmIChfZnJvbSA9PSB0ZWFtV2FsbGV0KSB7CiAgICAgICAgICAgIHJlcXVpcmUobm93ID49IHVubG9ja1RlYW1Ub2tlbnNUaW1lKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLyoqIENhbiBiZSBjYWxsZWQgb25jZSBieSBzdXBlciBvd25lci4gKi8KICAgIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobG9ja2VkKTsKICAgICAgICBsb2NrZWQgPSBmYWxzZTsKICAgICAgICBVbmxvY2soKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFuIGFkZHJlc3MgY2FuIGJlY29tZSBhIG5ldyBzZWxsZXIgb25seSBpbiBjYXNlIGl0IGhhcyBubyB0b2tlbnMuCiAgICAgKiBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgc3RlYWxpbmcgb2YgdG9rZW5zICBmcm9tIG5ld1NlbGxlciB2aWEgCiAgICAgKiAyIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoYW5nZVNlbGxlcihhZGRyZXNzIG5ld1NlbGxlcikgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShuZXdTZWxsZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShzZWxsZXIgIT0gbmV3U2VsbGVyKTsKICAgICAgICAKICAgICAgICAvLyBUbyBwcmV2ZW50IHN0ZWFsaW5nIG9mIHRva2VucyBmcm9tIG5ld1NlbGxlciB2aWEgMiBjYWxscyBvZiBjaGFuZ2VTZWxsZXI6CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tuZXdTZWxsZXJdID09IDApOwoKICAgICAgICBhZGRyZXNzIG9sZFNlbGxlciA9IHNlbGxlcjsKICAgICAgICB1aW50MjU2IHVuc29sZFRva2VucyA9IGJhbGFuY2VzW29sZFNlbGxlcl07CiAgICAgICAgYmFsYW5jZXNbb2xkU2VsbGVyXSA9IDA7CiAgICAgICAgYmFsYW5jZXNbbmV3U2VsbGVyXSA9IHVuc29sZFRva2VuczsKICAgICAgICBUcmFuc2ZlcihvbGRTZWxsZXIsIG5ld1NlbGxlciwgdW5zb2xkVG9rZW5zKTsKCiAgICAgICAgc2VsbGVyID0gbmV3U2VsbGVyOwogICAgICAgIENoYW5nZVNlbGxlckV2ZW50KG9sZFNlbGxlciwgbmV3U2VsbGVyKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFVzZXItZnJpZW5kbHkgYWx0ZXJuYXRpdmUgdG8gc2VsbCgpIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBzZWxsTm9EZWNpbWFscyhhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHNlbGwoX3RvLCBfdmFsdWUgKiAxZTE4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxsKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgogICAgICAgIC8vIENoZWNrIHRoYXQgd2UgYXJlIG5vdCBvdXQgb2YgbGltaXQgYW5kIHN0aWxsIGNhbiBzZWxsIHRva2VuczoKICAgICAgICByZXF1aXJlKHRva2Vuc1NvbGQuYWRkKF92YWx1ZSkgPD0gc2FsZUxpbWl0KTsKCiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tzZWxsZXJdKTsKCiAgICAgICAgYmFsYW5jZXNbc2VsbGVyXSA9IGJhbGFuY2VzW3NlbGxlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoc2VsbGVyLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHRvdGFsU2FsZXMrKzsKICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQoX3ZhbHVlKTsKICAgICAgICBTZWxsRXZlbnQoc2VsbGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogVW50aWwgYWxsIHRva2VucyBhcmUgc29sZCwgdG9rZW5zIGNhbiBiZSB0cmFuc2ZlcmVkIHRvL2Zyb20gb3duZXIncyBhY2NvdW50cy4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBpZlVubG9ja2VkKG1zZy5zZW5kZXIpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFVudGlsIGFsbCB0b2tlbnMgYXJlIHNvbGQsIHRva2VucyBjYW4gYmUgdHJhbnNmZXJlZCB0by9mcm9tIG93bmVyJ3MgYWNjb3VudHMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlmVW5sb2NrZWQoX2Zyb20pIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX3ZhbHVlKTsKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCmNvbnRyYWN0IFByb2RUb2tlbiBpcyBDb21tb25Ub2tlbiB7CiAgICBmdW5jdGlvbiBQcm9kVG9rZW4oKSBDb21tb25Ub2tlbigKICAgICAgICAweDI5MkZERmREN0UyOTY3ZmMwMjUxZTM1QTJlRjZDQkEzRjMxMmRBZDcsIAogICAgICAgIDB4NWY0NDg4MDlEZTllMmJCZTMxMjAwMDVEOTRlNEQ3QzBEODRkMzcxMCAgCiAgICApIHB1YmxpYyB7fQp9'.
	

]
