Class {
	#name : #SRT427a6663c260d12b4ffd4c2c9ecd6fee0c8a62cb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT427a6663c260d12b4ffd4c2c9ecd6fee0c8a62cb >> base64 [
	^ ''.
	

]
