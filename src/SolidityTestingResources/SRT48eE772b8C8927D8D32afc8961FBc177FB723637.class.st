Class {
	#name : #SRT48eE772b8C8927D8D32afc8961FBc177FB723637,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48eE772b8C8927D8D32afc8961FBc177FB723637 >> base64 [
	^ ''.
	

]
