Class {
	#name : #SRTadb41fcd3df9ff681680203a074271d3b3dae526,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTadb41fcd3df9ff681680203a074271d3b3dae526 >> base64 [
	^ ''.
	

]
