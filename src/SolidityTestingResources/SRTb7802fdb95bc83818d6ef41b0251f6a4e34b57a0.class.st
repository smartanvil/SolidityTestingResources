Class {
	#name : #SRTb7802fdb95bc83818d6ef41b0251f6a4e34b57a0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7802fdb95bc83818d6ef41b0251f6a4e34b57a0 >> base64 [
	^ ''.
	

]
