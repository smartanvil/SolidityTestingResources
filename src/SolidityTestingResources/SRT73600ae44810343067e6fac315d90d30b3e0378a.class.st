Class {
	#name : #SRT73600ae44810343067e6fac315d90d30b3e0378a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73600ae44810343067e6fac315d90d30b3e0378a >> base64 [
	^ ''.
	

]
