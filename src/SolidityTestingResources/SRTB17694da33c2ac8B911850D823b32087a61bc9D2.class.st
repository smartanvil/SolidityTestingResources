Class {
	#name : #SRTB17694da33c2ac8B911850D823b32087a61bc9D2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB17694da33c2ac8B911850D823b32087a61bc9D2 >> base64 [
	^ ''.
	

]
