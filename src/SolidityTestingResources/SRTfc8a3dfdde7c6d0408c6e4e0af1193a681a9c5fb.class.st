Class {
	#name : #SRTfc8a3dfdde7c6d0408c6e4e0af1193a681a9c5fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc8a3dfdde7c6d0408c6e4e0af1193a681a9c5fb >> base64 [
	^ ''.
	

]
