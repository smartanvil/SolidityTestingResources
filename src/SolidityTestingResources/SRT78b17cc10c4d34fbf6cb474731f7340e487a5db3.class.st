Class {
	#name : #SRT78b17cc10c4d34fbf6cb474731f7340e487a5db3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT78b17cc10c4d34fbf6cb474731f7340e487a5db3 >> base64 [
	^ ''.
	

]
