Class {
	#name : #SRTCDa98bA916AD2561ACA6D5aC7B83C76Fe49165c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTCDa98bA916AD2561ACA6D5aC7B83C76Fe49165c8 >> base64 [
	^ ''.
	

]
