Class {
	#name : #SRT401e28717a6a35a50938bc7f290f2678fc0a2816,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT401e28717a6a35a50938bc7f290f2678fc0a2816 >> base64 [
	^ ''.
	

]
