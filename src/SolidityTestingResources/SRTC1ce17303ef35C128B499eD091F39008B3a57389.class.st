Class {
	#name : #SRTC1ce17303ef35C128B499eD091F39008B3a57389,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC1ce17303ef35C128B499eD091F39008B3a57389 >> base64 [
	^ 'Y29udHJhY3QgR2FtZVJlZ2lzdHJ5IHsKCiAgICAvLyBUaGlzIHN0cnVjdCBrZWVwcyBhbGwgZGF0YSBmb3IgYSBSZWNvcmQuCiAgICBzdHJ1Y3QgUmVjb3JkIHsKICAgICAgICAvLyBLZWVwcyB0aGUgYWRkcmVzcyBvZiB0aGlzIHJlY29yZCBjcmVhdG9yLgogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgLy8gS2VlcHMgdGhlIHRpbWUgd2hlbiB0aGlzIHJlY29yZCB3YXMgY3JlYXRlZC4KICAgICAgICB1aW50IHRpbWU7CiAgICAgICAgLy8gS2VlcHMgdGhlIGluZGV4IG9mIHRoZSBrZXlzIGFycmF5IGZvciBmYXN0IGxvb2t1cAogICAgICAgIHVpbnQga2V5c0luZGV4OwogICAgICAgIHN0cmluZyBkZXNjcmlwdGlvbjsKICAgICAgICBzdHJpbmcgdXJsOwogICAgfQoKICAgIC8vIFRoaXMgbWFwcGluZyBrZWVwcyB0aGUgcmVjb3JkcyBvZiB0aGlzIFJlZ2lzdHJ5LgogICAgbWFwcGluZyhhZGRyZXNzID0+IFJlY29yZCkgcmVjb3JkczsKCiAgICAvLyBLZWVwcyB0aGUgdG90YWwgbnVtYmVycyBvZiByZWNvcmRzIGluIHRoaXMgUmVnaXN0cnkuCiAgICB1aW50IHB1YmxpYyBudW1SZWNvcmRzOwoKICAgIC8vIEtlZXBzIGEgbGlzdCBvZiBhbGwga2V5cyB0byBpbnRlcmF0ZSB0aGUgcmVjb3JlZHMuCiAgICBhZGRyZXNzW10gcHJpdmF0ZSBrZXlzOwoKICAgIC8vIFRoZSBvd25lciBvZiB0aGlzIHJlZ2lzdHJ5LgogICAgYWRkcmVzcyBvd25lcjsKCiAgICB1aW50IHB1YmxpYyBSRUdJU1RSQVRJT05fQ09TVCA9IDEwMCBmaW5uZXk7CiAgICB1aW50IHB1YmxpYyBUUkFOU0ZFUl9DT1NUID0gMTAgZmlubmV5OwogICAgdWludCBwdWJsaWMgVkFMVUVfRElTVFJJQlVUSU9OX0tFWV9PV05FUlMgPSA1MDsKCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gR2FtZVJlZ2lzdHJ5KCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlVmFsdWUoKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdWludCBvd25lclBlcmNlbnRhZ2UgPSAxMDAgLSBWQUxVRV9ESVNUUklCVVRJT05fS0VZX09XTkVSUzsKICAgICAgICB1aW50IHZhbHVlRm9yUmVnT3duZXIgPSAob3duZXJQZXJjZW50YWdlICogbXNnLnZhbHVlKSAvIDEwMDsKICAgICAgICBvd25lci5zZW5kKHZhbHVlRm9yUmVnT3duZXIpOwogICAgICAgIHVpbnQgdmFsdWVGb3JFYWNoT3duZXIgPSAobXNnLnZhbHVlIC0gdmFsdWVGb3JSZWdPd25lcikgLyBudW1SZWNvcmRzOwogICAgICAgIGlmICh2YWx1ZUZvckVhY2hPd25lciA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZm9yICh1aW50IGsgPSAwOyBrIDwgbnVtUmVjb3JkczsgaysrKSB7CiAgICAgICAgICAgIHJlY29yZHNba2V5c1trXV0ub3duZXIuc2VuZCh2YWx1ZUZvckVhY2hPd25lcik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgYWN0dWFsbHkgaW5zZXJ0cyBhIHJlY29yZC4gCiAgICBmdW5jdGlvbiByZWdpc3RlcihhZGRyZXNzIGtleSwgc3RyaW5nIGRlc2NyaXB0aW9uLCBzdHJpbmcgdXJsKSB7CiAgICAgICAgLy8gT25seSBhbGxvdyByZWdpc3RyYXRpb24gaWYgcmVjZWl2ZWQgdmFsdWUgPj0gUkVHSVNUUkFUSU9OX0NPU1QKICAgICAgICBpZiAobXNnLnZhbHVlIDwgUkVHSVNUUkFUSU9OX0NPU1QpIHsKICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlIGJhY2sgdG8gc2VuZGVyLgogICAgICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBkaXN0cmlidXRlVmFsdWUoKTsKICAgICAgICBpZiAocmVjb3Jkc1trZXldLnRpbWUgPT0gMCkgewogICAgICAgICAgICByZWNvcmRzW2tleV0udGltZSA9IG5vdzsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLm93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLmtleXNJbmRleCA9IGtleXMubGVuZ3RoOwogICAgICAgICAgICBrZXlzLmxlbmd0aCsrOwogICAgICAgICAgICBrZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBrZXk7CiAgICAgICAgICAgIHJlY29yZHNba2V5XS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uOwogICAgICAgICAgICByZWNvcmRzW2tleV0udXJsID0gdXJsOwoKICAgICAgICAgICAgbnVtUmVjb3JkcysrOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBVcGRhdGVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHJlY29yZC4KICAgIGZ1bmN0aW9uIHVwZGF0ZShhZGRyZXNzIGtleSwgc3RyaW5nIGRlc2NyaXB0aW9uLCBzdHJpbmcgdXJsKSB7CiAgICAgICAgLy8gT25seSB0aGUgb3duZXIgY2FuIHVwZGF0ZSBoaXMgcmVjb3JkLgogICAgICAgIGlmIChyZWNvcmRzW2tleV0ub3duZXIgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZWNvcmRzW2tleV0uZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLnVybCA9IHVybDsKICAgICAgICB9CiAgICB9CgogICAgLy8gVW5yZWdpc3RlciBhIGdpdmVuIHJlY29yZAogICAgZnVuY3Rpb24gdW5yZWdpc3RlcihhZGRyZXNzIGtleSkgewogICAgICAgIGlmIChyZWNvcmRzW2tleV0ub3duZXIgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICB1aW50IGtleXNJbmRleCA9IHJlY29yZHNba2V5XS5rZXlzSW5kZXg7CiAgICAgICAgICAgIGRlbGV0ZSByZWNvcmRzW2tleV07CiAgICAgICAgICAgIG51bVJlY29yZHMtLTsKICAgICAgICAgICAga2V5c1trZXlzSW5kZXhdID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICByZWNvcmRzW2tleXNba2V5c0luZGV4XV0ua2V5c0luZGV4ID0ga2V5c0luZGV4OwogICAgICAgICAgICBrZXlzLmxlbmd0aC0tOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBUcmFuc2ZlciBvd25lcnNoaXAgb2YgYSBnaXZlbiByZWNvcmQuCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIGtleSwgYWRkcmVzcyBuZXdPd25lcikgewogICAgICAgIC8vIE9ubHkgYWxsb3cgdHJhbnNmZXIgaWYgcmVjZWl2ZWQgdmFsdWUgPj0gVFJBTlNGRVJfQ09TVAogICAgICAgIGlmIChtc2cudmFsdWUgPCBUUkFOU0ZFUl9DT1NUKSB7CiAgICAgICAgICAgIC8vIFJldHVybiB2YWx1ZSBiYWNrIHRvIHNlbmRlcgogICAgICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBkaXN0cmlidXRlVmFsdWUoKTsKICAgICAgICBpZiAocmVjb3Jkc1trZXldLm93bmVyID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLm93bmVyID0gbmV3T3duZXI7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFRlbGxzIHdoZXRoZXIgYSBnaXZlbiBrZXkgaXMgcmVnaXN0ZXJlZC4KICAgIGZ1bmN0aW9uIGlzUmVnaXN0ZXJlZChhZGRyZXNzIGtleSkgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNba2V5XS50aW1lICE9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmVjb3JkQXRJbmRleCh1aW50IHJpbmRleCkgcmV0dXJucyhhZGRyZXNzIGtleSwgYWRkcmVzcyBvd25lciwgdWludCB0aW1lLCBzdHJpbmcgZGVzY3JpcHRpb24sIHN0cmluZyB1cmwpIHsKICAgICAgICBSZWNvcmQgcmVjb3JkID0gcmVjb3Jkc1trZXlzW3JpbmRleF1dOwogICAgICAgIGtleSA9IGtleXNbcmluZGV4XTsKICAgICAgICBvd25lciA9IHJlY29yZC5vd25lcjsKICAgICAgICB0aW1lID0gcmVjb3JkLnRpbWU7CiAgICAgICAgZGVzY3JpcHRpb24gPSByZWNvcmQuZGVzY3JpcHRpb247CiAgICAgICAgdXJsID0gcmVjb3JkLnVybDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSZWNvcmQoYWRkcmVzcyBrZXkpIHJldHVybnMoYWRkcmVzcyBvd25lciwgdWludCB0aW1lLCBzdHJpbmcgZGVzY3JpcHRpb24sIHN0cmluZyB1cmwpIHsKICAgICAgICBSZWNvcmQgcmVjb3JkID0gcmVjb3Jkc1trZXldOwogICAgICAgIG93bmVyID0gcmVjb3JkLm93bmVyOwogICAgICAgIHRpbWUgPSByZWNvcmQudGltZTsKICAgICAgICBkZXNjcmlwdGlvbiA9IHJlY29yZC5kZXNjcmlwdGlvbjsKICAgICAgICB1cmwgPSByZWNvcmQudXJsOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIG93bmVyIG9mIHRoZSBnaXZlbiByZWNvcmQuIFRoZSBvd25lciBjb3VsZCBhbHNvIGJlIGdldAogICAgLy8gYnkgdXNpbmcgdGhlIGZ1bmN0aW9uIGdldFJlY29yZCBidXQgaW4gdGhhdCBjYXNlIGFsbCByZWNvcmQgYXR0cmlidXRlcyAKICAgIC8vIGFyZSByZXR1cm5lZC4KICAgIGZ1bmN0aW9uIGdldE93bmVyKGFkZHJlc3Mga2V5KSByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1trZXldLm93bmVyOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIHJlZ2lzdHJhdGlvbiB0aW1lIG9mIHRoZSBnaXZlbiByZWNvcmQuIFRoZSB0aW1lIGNvdWxkIGFsc28KICAgIC8vIGJlIGdldCBieSB1c2luZyB0aGUgZnVuY3Rpb24gZ2V0UmVjb3JkIGJ1dCBpbiB0aGF0IGNhc2UgYWxsIHJlY29yZCBhdHRyaWJ1dGVzCiAgICAvLyBhcmUgcmV0dXJuZWQuCiAgICBmdW5jdGlvbiBnZXRUaW1lKGFkZHJlc3Mga2V5KSByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1trZXldLnRpbWU7CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIHJlY29yZHMgaW4gdGhpcyByZWdpc3RyeS4KICAgIGZ1bmN0aW9uIGdldFRvdGFsUmVjb3JkcygpIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBudW1SZWNvcmRzOwogICAgfQoKICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSBzdWJjb250cmFjdHMgd2hlbiBhbiBlcnJvciBpcyBkZXRlY3RlZCBhbmQKICAgIC8vIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSByZXR1cm5lZCB0byB0aGUgdHJhbnNhY3Rpb24gb3JpZ2luYXRvci4KICAgIGZ1bmN0aW9uIHJldHVyblZhbHVlKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBSZWdpc3RyeSBvd25lciBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gdG8gd2l0aGRyYXcgYW55IHZhbHVlIG93bmVkIGJ5CiAgICAvLyB0aGUgcmVnaXN0cnkuCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IHZhbHVlKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKHZhbHVlKTsKICAgICAgICB9CiAgICB9Cgp9'.
	

]
