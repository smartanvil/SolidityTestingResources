Class {
	#name : #SRT7Aef44E5e6930F8799559aFB046Ccd8692044f86,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7Aef44E5e6930F8799559aFB046Ccd8692044f86 >> base64 [
	^ ''.
	

]
