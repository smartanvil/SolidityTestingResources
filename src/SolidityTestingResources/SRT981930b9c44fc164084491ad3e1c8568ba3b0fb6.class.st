Class {
	#name : #SRT981930b9c44fc164084491ad3e1c8568ba3b0fb6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT981930b9c44fc164084491ad3e1c8568ba3b0fb6 >> base64 [
	^ ''.
	

]
