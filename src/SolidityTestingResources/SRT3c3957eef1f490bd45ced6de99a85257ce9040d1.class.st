Class {
	#name : #SRT3c3957eef1f490bd45ced6de99a85257ce9040d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c3957eef1f490bd45ced6de99a85257ce9040d1 >> base64 [
	^ ''.
	

]
