Class {
	#name : #SRTd61bc5b57c41a405c001e202bfd4445c2fba9031,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd61bc5b57c41a405c001e202bfd4445c2fba9031 >> base64 [
	^ ''.
	

]
