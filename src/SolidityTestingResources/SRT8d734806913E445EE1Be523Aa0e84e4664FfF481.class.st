Class {
	#name : #SRT8d734806913E445EE1Be523Aa0e84e4664FfF481,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8d734806913E445EE1Be523Aa0e84e4664FfF481 >> base64 [
	^ 'Y29udHJhY3QgUHJvdGVjdFRoZUNhc3RsZSB7CiAgICAvLyBLaW5nJ3MgSmVzdGVyCiAgICBhZGRyZXNzIHB1YmxpYyBqZXN0ZXI7CiAgICAvLyBSZWNvcmQgdGhlIGxhc3QgUmVwYXJhdGlvbiB0aW1lCiAgICB1aW50IHB1YmxpYyBsYXN0UmVwYXJhdGlvbjsKICAgIC8vIFBpZ2d5IEJhbmsgQW1vdW50CiAgICB1aW50IHB1YmxpYyBwaWdneUJhbms7CgogICAgLy8gQ29sbGVjdGVkIEZlZSBBbW91bnQKICAgIHVpbnQgcHVibGljIGNvbGxlY3RlZEZlZTsKCiAgICAvLyBUcmFjayB0aGUgY2l0aXplbnMgd2hvIGhlbHBlZCB0byByZXBhaXIgdGhlIGNhc3RsZQogICAgYWRkcmVzc1tdIHB1YmxpYyBjaXRpemVuc0FkZHJlc3NlczsKICAgIHVpbnRbXSBwdWJsaWMgY2l0aXplbnNBbW91bnRzOwogICAgdWludDMyIHB1YmxpYyB0b3RhbENpdGl6ZW5zOwogICAgdWludDMyIHB1YmxpYyBsYXN0Q2l0aXplblBhaWQ7CiAgICAvLyBCcmlkZWQgQ2l0aXplbiB3aG8gbWFkZSB0aGUgc3lzdGVtIHdvcmtzCiAgICBhZGRyZXNzIHB1YmxpYyBicmliZWRDaXRpemVuOwogICAgLy8gUmVjb3JkIGhvdyBtYW55IHRpbWVzIHRoZSBjYXN0bGUgaGFkIGZlbGwKICAgIHVpbnQzMiBwdWJsaWMgcm91bmQ7CiAgICAvLyBBbW91bnQgYWxyZWFkeSBwYWlkIGJhY2sgaW4gdGhpcyByb3VuZAogICAgdWludCBwdWJsaWMgYW1vdW50QWxyZWFkeVBhaWRCYWNrOwogICAgLy8gQW1vdW50IGludmVzdGVkIGluIHRoaXMgcm91bmQKICAgIHVpbnQgcHVibGljIGFtb3VudEludmVzdGVkOwoKICAgIHVpbnQgY29uc3RhbnQgU0lYX0hPVVJTID0gNjAgKiA2MCAqIDY7CgogICAgZnVuY3Rpb24gUHJvdGVjdFRoZUNhc3RsZSgpIHsKICAgICAgICAvLyBEZWZpbmUgdGhlIGZpcnN0IGNhc3RsZQogICAgICAgIGJyaWJlZENpdGl6ZW4gPSBtc2cuc2VuZGVyOwogICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgbGFzdFJlcGFyYXRpb24gPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgYW1vdW50QWxyZWFkeVBhaWRCYWNrID0gMDsKICAgICAgICBhbW91bnRJbnZlc3RlZCA9IDA7CiAgICAgICAgdG90YWxDaXRpemVucyA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gcmVwYWlyVGhlQ2FzdGxlKCkgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG1pbmltdW0gYW1vdW50IGlmIHJlYWNoZWQKICAgICAgICBpZiAoYW1vdW50IDwgMTAgZmlubmV5KSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIElmIHRoZSBhbW91bnQgcmVjZWl2ZWQgaXMgbW9yZSB0aGFuIDEwMCBFVEggcmV0dXJuIHRoZSBkaWZmZXJlbmNlCiAgICAgICAgaWYgKGFtb3VudCA+IDEwMCBldGhlcikgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gMTAwIGV0aGVyKTsKICAgICAgICAgICAgYW1vdW50ID0gMTAwIGV0aGVyOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIENhc3RsZSBoYXMgZmVsbAogICAgICAgIGlmIChsYXN0UmVwYXJhdGlvbiArIFNJWF9IT1VSUyA8IGJsb2NrLnRpbWVzdGFtcCkgewogICAgICAgICAgICAvLyBTZW5kIHRoZSBQaWdneSBCYW5rIHRvIHRoZSBsYXN0IDMgY2l0aXplbnMKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gb25lIHdobyBjb250cmlidXRlZCB0aGlzIGxhc3QgNiBob3Vycywgbm8gYWN0aW9uIG5lZWRlZAogICAgICAgICAgICBpZiAodG90YWxDaXRpemVucyA9PSAxKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBDaXRpemVuIHdobyBjb250cmlidXRlZCwgaGUgZ2V0cyB0aGUgZnVsbCBQaWdnIEJhbmsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID09IDIpIHsKICAgICAgICAgICAgICAgIC8vIElmIG9ubHkgMiBjaXRpemVucyBjb250cmlidXRlZAogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMV0uc2VuZChwaWdneUJhbmsgKiA2NSAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAyXS5zZW5kKHBpZ2d5QmFuayAqIDM1IC8gMTAwKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID49IDMpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIDMgb3IgbW9yZSBjaXRpemVucyB3aG8gY29udHJpYnV0ZWQKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rICogNTUgLyAxMDApOwogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMl0uc2VuZChwaWdneUJhbmsgKiAzMCAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAzXS5zZW5kKHBpZ2d5QmFuayAqIDE1IC8gMTAwKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSBuZXcgUGlnZ3kgQmFuawogICAgICAgICAgICBwaWdneUJhbmsgPSAwOwoKICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSBuZXcgQ2FzdGxlCiAgICAgICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIGxhc3RSZXBhcmF0aW9uID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlcy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgICBjaXRpemVuc0Ftb3VudHMucHVzaChhbW91bnQgKiAyKTsKICAgICAgICAgICAgdG90YWxDaXRpemVucyArPSAxOwogICAgICAgICAgICBhbW91bnRJbnZlc3RlZCArPSBhbW91bnQ7CgogICAgICAgICAgICAvLyBBbGwgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgICAgICBwaWdneUJhbmsgKz0gYW1vdW50OwoKICAgICAgICAgICAgLy8gVGhlIEpldHN0ZXIgdGFrZSAzJQogICAgICAgICAgICBqZXN0ZXIuc2VuZChhbW91bnQgKiAzIC8gMTAwKTsKCiAgICAgICAgICAgIC8vIFRoZSBicmlkZWQgQ2l0aXplbiB0YWtlcyAzJQogICAgICAgICAgICBjb2xsZWN0ZWRGZWUgKz0gYW1vdW50ICogMyAvIDEwMDsKCiAgICAgICAgICAgIHJvdW5kICs9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gVGhlIENhc3RsZSBpcyBzdGlsbCB1cAogICAgICAgICAgICBsYXN0UmVwYXJhdGlvbiA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgY2l0aXplbnNBbW91bnRzLnB1c2goYW1vdW50ICogMik7CiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsKICAgICAgICAgICAgYW1vdW50SW52ZXN0ZWQgKz0gYW1vdW50OwoKICAgICAgICAgICAgLy8gNSUgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgICAgICBwaWdneUJhbmsgKz0gKGFtb3VudCAqIDUgLyAxMDApOwoKICAgICAgICAgICAgLy8gVGhlIEpldHN0ZXIgdGFrZXMgMyUKICAgICAgICAgICAgamVzdGVyLnNlbmQoYW1vdW50ICogMyAvIDEwMCk7CgogICAgICAgICAgICAvLyBUaGUgYnJpZGVkIENpdGl6ZW4gdGFrZXMgMyUKICAgICAgICAgICAgY29sbGVjdGVkRmVlICs9IGFtb3VudCAqIDMgLyAxMDA7CgogICAgICAgICAgICB3aGlsZSAoY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF0gPCAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlIC0gcGlnZ3lCYW5rIC0gY29sbGVjdGVkRmVlKSAmJiBsYXN0Q2l0aXplblBhaWQgPD0gdG90YWxDaXRpemVucykgewogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbbGFzdENpdGl6ZW5QYWlkXS5zZW5kKGNpdGl6ZW5zQW1vdW50c1tsYXN0Q2l0aXplblBhaWRdKTsKICAgICAgICAgICAgICAgIGFtb3VudEFscmVhZHlQYWlkQmFjayArPSBjaXRpemVuc0Ftb3VudHNbbGFzdENpdGl6ZW5QYWlkXTsKICAgICAgICAgICAgICAgIGxhc3RDaXRpemVuUGFpZCArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHsKICAgICAgICByZXBhaXJUaGVDYXN0bGUoKTsKICAgIH0KCiAgICAvLyBXaGVuIHRoZSBjYXN0bGUgd291bGQgYmUgbm8gbW9yZS4uLgogICAgZnVuY3Rpb24gc3VycmVuZGVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGJyaWJlZENpdGl6ZW4pIHsKICAgICAgICAgICAgYnJpYmVkQ2l0aXplbi5zZW5kKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7CiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChicmliZWRDaXRpemVuKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gV2hlbiB0aGUgYnJpZGVkIENpdGl6ZW4gZGVjaWRlcyB0byBnaXZlIGhpcyBzZWF0IHRvIHNvbWVvbmUgZWxzZQogICAgZnVuY3Rpb24gbmV3QnJpYmVkQ2l0aXplbihhZGRyZXNzIG5ld0JyaWJlZENpdGl6ZW4pIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBicmliZWRDaXRpemVuKSB7CiAgICAgICAgICAgIGJyaWJlZENpdGl6ZW4gPSBuZXdCcmliZWRDaXRpemVuOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBXaGVuIHRoZSBicmlkZWQgQ2l0aXplbiBkZWNpZGVzIHRvIGNvbGxlY3QgaGlzIGZlZXMKICAgIGZ1bmN0aW9uIGNvbGxlY3RGZWUoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYnJpYmVkQ2l0aXplbikgewogICAgICAgICAgICBicmliZWRDaXRpemVuLnNlbmQoY29sbGVjdGVkRmVlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gV2hlbiB0aGUgamVzdGVyIGNhbid0IGhhbmRsZSBpdCBhbnltb3JlLCBoZSBjYW4gZ2l2ZSBoaXMgcG9zaXRpb24gdG8gc29tZW9uZSBlbHNlCiAgICBmdW5jdGlvbiBuZXdKZXN0ZXIoYWRkcmVzcyBuZXdKZXN0ZXIpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBqZXN0ZXIpIHsKICAgICAgICAgICAgamVzdGVyID0gbmV3SmVzdGVyOwogICAgICAgIH0KICAgIH0gICAgICAgCn0='.
	

]
