Class {
	#name : #SRT17df117bb806a622d841bd5166a23b5d8746232f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17df117bb806a622d841bd5166a23b5d8746232f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBJdGVtUmVnaXN0cnkgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBlbnVtIEl0ZW1DbGFzcyB7VElFUjEsIFRJRVIyLCBUSUVSMywgVElFUjR9CgogIGV2ZW50IEJvdWdodCAodWludDI1NiBpbmRleGVkIF9pdGVtSWQsIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgX3ByaWNlKTsKICBldmVudCBTb2xkICh1aW50MjU2IGluZGV4ZWQgX2l0ZW1JZCwgYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludDI1NiBfcHJpY2UpOwoKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICB1aW50MjU2IGN1dE51bWVyYXRvciA9IDU7CiAgdWludDI1NiBjdXREZW5vbWluYXRvciA9IDEwMDsKCiAgdWludDI1NltdIHByaXZhdGUgbGlzdGVkSXRlbXM7CiAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwcml2YXRlIG93bmVyT2ZJdGVtOwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBzdGFydGluZ1ByaWNlT2ZJdGVtOwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBwcmljZU9mSXRlbTsKICBtYXBwaW5nICh1aW50MjU2ID0+IEl0ZW1DbGFzcykgcHJpdmF0ZSBjbGFzc09mSXRlbTsKCiAgZnVuY3Rpb24gSXRlbVJlZ2lzdHJ5ICgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKiBNb2RpZmllcnMgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgXzsKICB9CgogIC8qIEFkbWluICovCiAgZnVuY3Rpb24gc2V0T3duZXIgKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgb3duZXIgPSBfb3duZXI7CiAgfQoKICBmdW5jdGlvbiBzZXRDdXQgKHVpbnQyNTYgX24sIHVpbnQyNTYgX2QpIG9ubHlPd25lcigpIHB1YmxpYyB7CiAgICBjdXROdW1lcmF0b3IgPSBfbjsKICAgIGN1dERlbm9taW5hdG9yID0gX2Q7CiAgfQoKICBmdW5jdGlvbiB3aXRoZHJhdyAoKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICB9CgogIGZ1bmN0aW9uIGxpc3RJdGVtICh1aW50MjU2IF9pdGVtSWQsIHVpbnQyNTYgX3ByaWNlLCBJdGVtQ2xhc3MgX2NsYXNzKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgIHJlcXVpcmUocHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPT0gMCk7CiAgICByZXF1aXJlKG93bmVyT2ZJdGVtW19pdGVtSWRdID09IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfY2xhc3MgPD0gSXRlbUNsYXNzLlRJRVI0KTsKCiAgICBvd25lck9mSXRlbVtfaXRlbUlkXSA9IG93bmVyOwogICAgcHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPSBfcHJpY2U7CiAgICBzdGFydGluZ1ByaWNlT2ZJdGVtW19pdGVtSWRdID0gX3ByaWNlOwogICAgY2xhc3NPZkl0ZW1bX2l0ZW1JZF0gPSBfY2xhc3M7CiAgICBsaXN0ZWRJdGVtcy5wdXNoKF9pdGVtSWQpOwogIH0KCiAgZnVuY3Rpb24gbGlzdE11bHRpcGxlSXRlbXMgKHVpbnQyNTZbXSBfaXRlbUlkcywgdWludDI1NiBfcHJpY2UsIEl0ZW1DbGFzcyBfY2xhc3MpIG9ubHlPd25lcigpIGV4dGVybmFsIHsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF9pdGVtSWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGxpc3RJdGVtKF9pdGVtSWRzW2ldLCBfcHJpY2UsIF9jbGFzcyk7CiAgICB9CiAgfQoKICAvKiBSZWFkICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkgewogICAgdWludDI1NiBjb3VudGVyID0gMDsKCiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBsaXN0ZWRJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAob3duZXJPZihsaXN0ZWRJdGVtc1tpXSkgPT0gX293bmVyKSB7CiAgICAgICAgY291bnRlcisrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGNvdW50ZXI7CiAgfQoKICBmdW5jdGlvbiBvd25lck9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKSB7CiAgICByZXR1cm4gb3duZXJPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBzdGFydGluZ1ByaWNlT2YgKHVpbnQyNTYgX2l0ZW1JZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfc3RhcnRpbmdQcmljZSkgewogICAgcmV0dXJuIHN0YXJ0aW5nUHJpY2VPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBwcmljZU9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3ByaWNlKSB7CiAgICByZXR1cm4gcHJpY2VPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBjbGFzc09mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKEl0ZW1DbGFzcyBfY2xhc3MpIHsKICAgIHJldHVybiBjbGFzc09mSXRlbVtfaXRlbUlkXTsKICB9CgogIGZ1bmN0aW9uIG5leHRQcmljZU9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX25leHRQcmljZSkgewogICAgcmV0dXJuIGNhbGN1bGF0ZU5leHRQcmljZShwcmljZU9mKF9pdGVtSWQpLCBjbGFzc09mKF9pdGVtSWQpKTsKICB9CgogIGZ1bmN0aW9uIGFsbE9mICh1aW50MjU2IF9pdGVtSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3N0YXJ0aW5nUHJpY2UsIHVpbnQyNTYgX3ByaWNlLCBJdGVtQ2xhc3MgX2NsYXNzLCB1aW50MjU2IF9uZXh0UHJpY2UpIHsKICAgIHJldHVybiAob3duZXJPZihfaXRlbUlkKSwgc3RhcnRpbmdQcmljZU9mKF9pdGVtSWQpLCBwcmljZU9mKF9pdGVtSWQpLCBjbGFzc09mKF9pdGVtSWQpLCBuZXh0UHJpY2VPZihfaXRlbUlkKSk7CiAgfQoKICBmdW5jdGlvbiBpdGVtc09mT3duZXIgKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2W10gX2l0ZW1zKSB7CiAgICB1aW50MjU2W10gbWVtb3J5IGl0ZW1zID0gbmV3IHVpbnQyNTZbXShiYWxhbmNlT2YoX293bmVyKSk7CgogICAgdWludDI1NiBpdGVtQ291bnRlciA9IDA7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBsaXN0ZWRJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAob3duZXJPZihsaXN0ZWRJdGVtc1tpXSkgPT0gX293bmVyKSB7CiAgICAgICAgaXRlbXNbaXRlbUNvdW50ZXJdID0gbGlzdGVkSXRlbXNbaV07CiAgICAgICAgaXRlbUNvdW50ZXIgKz0gMTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBpdGVtczsKICB9CgogIGZ1bmN0aW9uIG51bWJlck9mSXRlbXNGb3JTYWxlICgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX24pIHsKICAgIHJldHVybiBsaXN0ZWRJdGVtcy5sZW5ndGg7CiAgfQoKICBmdW5jdGlvbiBpdGVtc0ZvclNhbGVMaW1pdCAodWludDI1NiBfZnJvbSwgdWludDI1NiBfdGFrZSkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NltdIF9pdGVtcykgewogICAgdWludDI1NltdIG1lbW9yeSBpdGVtcyA9IG5ldyB1aW50MjU2W10oX3Rha2UpOwoKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF90YWtlOyBpKyspIHsKICAgICAgaXRlbXNbaV0gPSBsaXN0ZWRJdGVtc1tfZnJvbSArIGldOwogICAgfQoKICAgIHJldHVybiBpdGVtczsKICB9CgogIGZ1bmN0aW9uIGFsbEl0ZW1zRm9yU2FsZSAoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2W10gX2l0ZW1zKSB7CiAgICByZXR1cm4gbGlzdGVkSXRlbXM7CiAgfQoKICAvKiBOZXh0IHByaWNlICovCiAgZnVuY3Rpb24gY2FsY3VsYXRlTmV4dFByaWNlICh1aW50MjU2IF9jdXJyZW50UHJpY2UsIEl0ZW1DbGFzcyBfY2xhc3MpIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQyNTYgX25ld1ByaWNlKSB7CiAgICBpZiAoX2NsYXNzID09IEl0ZW1DbGFzcy5USUVSMSkgewogICAgICBpZiAoX2N1cnJlbnRQcmljZSA8PSAwLjA1IGV0aGVyKSB7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UubXVsKDIpOyAvLyAyCiAgICAgIH0gZWxzZSBpZiAoX2N1cnJlbnRQcmljZSA8PSAwLjUgZXRoZXIpIHsKICAgICAgICByZXR1cm4gX2N1cnJlbnRQcmljZS5tdWwoMTE3KS5kaXYoMTAwKTsgLy8gMS4xNwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBfY3VycmVudFByaWNlLm11bCgxMTIpLmRpdigxMDApOyAvLyAxLjEyCiAgICAgIH0KICAgIH0KCiAgICBpZiAoX2NsYXNzID09IEl0ZW1DbGFzcy5USUVSMikgewogICAgICBpZiAoX2N1cnJlbnRQcmljZSA8PSAwLjEgZXRoZXIpIHsKICAgICAgICByZXR1cm4gX2N1cnJlbnRQcmljZS5tdWwoMik7IC8vIDIKICAgICAgfSBlbHNlIGlmIChfY3VycmVudFByaWNlIDw9IDAuNSBldGhlcikgewogICAgICAgIHJldHVybiBfY3VycmVudFByaWNlLm11bCgxMTgpLmRpdigxMDApOyAvLyAxLjE4CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UubXVsKDExMykuZGl2KDEwMCk7IC8vIDEuMTMKICAgICAgfQogICAgfQoKICAgIGlmIChfY2xhc3MgPT0gSXRlbUNsYXNzLlRJRVIzKSB7CiAgICAgIGlmIChfY3VycmVudFByaWNlIDw9IDAuMTUgZXRoZXIpIHsKICAgICAgICByZXR1cm4gX2N1cnJlbnRQcmljZSAqIDI7IC8vIDIKICAgICAgfSBlbHNlIGlmIChfY3VycmVudFByaWNlIDw9IDAuNSBldGhlcikgewogICAgICAgIHJldHVybiBfY3VycmVudFByaWNlLm11bCgxMTkpLmRpdigxMDApOyAvLyAxLjE5CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UubXVsKDExNCkuZGl2KDEwMCk7IC8vIDEuMTQKICAgICAgfQogICAgfQoKICAgIGlmIChfY2xhc3MgPT0gSXRlbUNsYXNzLlRJRVI0KSB7CiAgICAgIGlmIChfY3VycmVudFByaWNlIDw9IDAuMiBldGhlcikgewogICAgICAgIHJldHVybiBfY3VycmVudFByaWNlLm11bCgyKTsgLy8gMgogICAgICB9IGVsc2UgaWYgKF9jdXJyZW50UHJpY2UgPD0gMC41IGV0aGVyKSB7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UubXVsKDEyMCkuZGl2KDEwMCk7IC8vIDEuMgogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAgX2N1cnJlbnRQcmljZS5tdWwoMTE1KS5kaXYoMTAwKTsgLy8gMS4xNQogICAgICB9CiAgICB9CiAgfQoKICAvKiBCdXkgKi8KICBmdW5jdGlvbiBidXkgKHVpbnQyNTYgX2l0ZW1JZCkgcGF5YWJsZSBwdWJsaWMgewogICAgcmVxdWlyZShwcmljZU9mKF9pdGVtSWQpID4gMCk7CiAgICByZXF1aXJlKG93bmVyT2YoX2l0ZW1JZCkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA9PSBwcmljZU9mKF9pdGVtSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfaXRlbUlkKSAhPSBtc2cuc2VuZGVyKTsKICAgIHJlcXVpcmUoIWlzQ29udHJhY3QobXNnLnNlbmRlcikpOwoKICAgIGFkZHJlc3Mgb2xkT3duZXIgPSBvd25lck9mKF9pdGVtSWQpOwogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICB1aW50MjU2IHByaWNlID0gcHJpY2VPZihfaXRlbUlkKTsKCiAgICBvd25lck9mSXRlbVtfaXRlbUlkXSA9IG5ld093bmVyOwogICAgcHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPSBuZXh0UHJpY2VPZihfaXRlbUlkKTsKCiAgICBCb3VnaHQoX2l0ZW1JZCwgbmV3T3duZXIsIHByaWNlKTsKICAgIFNvbGQoX2l0ZW1JZCwgb2xkT3duZXIsIHByaWNlKTsKCiAgICB1aW50MjU2IGN1dCA9IDA7CiAgICBpZiAoY3V0RGVub21pbmF0b3IgPiAwICYmIGN1dE51bWVyYXRvciA+IDApIHsKICAgICAgY3V0ID0gcHJpY2UubXVsKGN1dE51bWVyYXRvcikuZGl2KGN1dERlbm9taW5hdG9yKTsKICAgIH0KCiAgICBvbGRPd25lci50cmFuc2ZlcihwcmljZSAtIGN1dCk7CiAgfQoKICAvKiBVdGlsICovCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBzaXplOwogICAgYXNzZW1ibHkgeyBzaXplIDo9IGV4dGNvZGVzaXplKGFkZHIpIH0gLy8gc29saXVtLWRpc2FibGUtbGluZQogICAgcmV0dXJuIHNpemUgPiAwOwogIH0KfQoKbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0='.
	

]
