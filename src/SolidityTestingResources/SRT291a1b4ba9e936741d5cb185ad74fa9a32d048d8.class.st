Class {
	#name : #SRT291a1b4ba9e936741d5cb185ad74fa9a32d048d8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT291a1b4ba9e936741d5cb185ad74fa9a32d048d8 >> base64 [
	^ ''.
	

]
