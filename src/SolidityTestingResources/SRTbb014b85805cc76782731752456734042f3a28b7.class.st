Class {
	#name : #SRTbb014b85805cc76782731752456734042f3a28b7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb014b85805cc76782731752456734042f3a28b7 >> base64 [
	^ ''.
	

]
