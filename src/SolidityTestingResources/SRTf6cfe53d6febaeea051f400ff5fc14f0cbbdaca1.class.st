Class {
	#name : #SRTf6cfe53d6febaeea051f400ff5fc14f0cbbdaca1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf6cfe53d6febaeea051f400ff5fc14f0cbbdaca1 >> base64 [
	^ ''.
	

]
