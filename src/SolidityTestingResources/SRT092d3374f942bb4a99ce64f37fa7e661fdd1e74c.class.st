Class {
	#name : #SRT092d3374f942bb4a99ce64f37fa7e661fdd1e74c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT092d3374f942bb4a99ce64f37fa7e661fdd1e74c >> base64 [
	^ ''.
	

]
