Class {
	#name : #SRT66345ae2b6fc2ce02684eee1aa1453257f77e635,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT66345ae2b6fc2ce02684eee1aa1453257f77e635 >> base64 [
	^ ''.
	

]
