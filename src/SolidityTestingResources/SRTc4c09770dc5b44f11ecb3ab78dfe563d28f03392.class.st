Class {
	#name : #SRTc4c09770dc5b44f11ecb3ab78dfe563d28f03392,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4c09770dc5b44f11ecb3ab78dfe563d28f03392 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgRW5ncmF2ZWRUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MsIHVpbnQyNTYpIHB1YmxpYyByZXR1cm5zIChib29sKSB7fQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gdW5sb2NrKCkgcHVibGljIHJldHVybnMgKGJvb2wpIHt9CiAgICBmdW5jdGlvbiBzdGFydEluY2VudGl2ZURpc3RyaWJ1dGlvbigpIHB1YmxpYyByZXR1cm5zIChib29sKSB7fQogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcykgcHVibGljIHt9CiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzKSB7fQp9CgoKY29udHJhY3QgRUdSQ3Jvd2RzYWxlIHsKICAgIC8vIENyb3dkc2FsZSBkZXRhaWxzCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKICAgIGFkZHJlc3MgcHVibGljIGNvbmZpcm1lZEJ5OyAvLyBBZGRyZXNzIHRoYXQgY29uZmlybWVkIGJlbmVmaWNpYXJ5CgogICAgLy8gTWF4aW11bSB0b2tlbnMgc3VwcGx5CiAgICB1aW50MjU2IHB1YmxpYyBtYXhTdXBwbHkgPSAxMDAwMDAwMDAwOyAvLyAxIGJpbGxpb24KCiAgICAvLyBNaW51bSBhbW91bnQgb2YgZXRoZXIgdG8gYmUgZXhjaGFuZ2VkIGZvciBFR1IKICAgIHVpbnQyNTYgcHVibGljIG1pbkFjY2VwdGVkQW1vdW50ID0gMTAgZmlubmV5OyAvLyAwLjAxIEVUSAoKICAgIC8vQW1vdW50IG9mIGZyZWUgdG9rZW5zIHBlciB1c2VyIGluIGFpcmRyb3AgcGVyaW9kCiAgICB1aW50MjU2IHB1YmxpYyByYXRlQWlyRHJvcCA9IDEwMDA7CgogICAgLy8gTnVtYmVyIG9mIGFpcmRyb3AgcGFydGljaXBhbnRzCiAgICB1aW50MjU2IHB1YmxpYyBhaXJkcm9wUGFydGljaXBhbnRzOwoKICAgIC8vTWF4aW11bSBudW1iZXIgb2YgYWlyZHJvcCBwYXJ0aWNpcGFudHMKICAgIHVpbnQyNTYgcHVibGljIG1heEFpcmRyb3BQYXJ0aWNpcGFudHMgPSA1MDA7CgogICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyB0aGUgZmlyc3QgcGFydGljaXBhdGlvbiBpbiB0aGUgYWlyZHJvcAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgcGFydGljaXBhdGVkSW5BaXJkcm9wOwoKICAgIC8vIEVUSCB0byBFR1IgcmF0ZQogICAgdWludDI1NiBwdWJsaWMgcmF0ZUFuZ2Vsc0RheSA9IDEwMDAwMDsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVGaXJzdFdlZWsgPSA4MDAwMDsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVTZWNvbmRXZWVrID0gNzAwMDA7CiAgICB1aW50MjU2IHB1YmxpYyByYXRlVGhpcmRXZWVrID0gNjAwMDA7CiAgICB1aW50MjU2IHB1YmxpYyByYXRlTGFzdFdlZWsgPSA1MDAwMDsKCiAgICB1aW50MjU2IHB1YmxpYyBhaXJkcm9wRW5kID0gMyBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgYWlyZHJvcENvb2xkb3duRW5kID0gNyBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgcmF0ZUFuZ2Vsc0RheUVuZCA9IDggZGF5czsKICAgIHVpbnQyNTYgcHVibGljIGFuZ2Vsc0RheUNvb2xkb3duRW5kID0gMTQgZGF5czsKICAgIHVpbnQyNTYgcHVibGljIHJhdGVGaXJzdFdlZWtFbmQgPSAyMSBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgcmF0ZVNlY29uZFdlZWtFbmQgPSAyOCBkYXlzOwogICAgdWludDI1NiBwdWJsaWMgcmF0ZVRoaXJkV2Vla0VuZCA9IDM1IGRheXM7CiAgICB1aW50MjU2IHB1YmxpYyByYXRlTGFzdFdlZWtFbmQgPSA0MiBkYXlzOwoKICAgIGVudW0gU3RhZ2VzIHsKICAgICAgICBBaXJkcm9wLAogICAgICAgIEluUHJvZ3Jlc3MsCiAgICAgICAgRW5kZWQsCiAgICAgICAgV2l0aGRyYXduLAogICAgICAgIFByb3Bvc2VkLAogICAgICAgIEFjY2VwdGVkCiAgICB9CgogICAgU3RhZ2VzIHB1YmxpYyBzdGFnZSA9IFN0YWdlcy5BaXJkcm9wOwoKICAgIC8vIENyb3dkc2FsZSBzdGF0ZQogICAgdWludDI1NiBwdWJsaWMgc3RhcnQ7CiAgICB1aW50MjU2IHB1YmxpYyBlbmQ7CiAgICB1aW50MjU2IHB1YmxpYyByYWlzZWQ7CgogICAgLy8gRUdSIEVuZ3JhdmVkVG9rZW4KICAgIEVuZ3JhdmVkVG9rZW4gcHVibGljIGVuZ3JhdmVkVG9rZW47CgogICAgLy8gSW52ZXN0ZWQgYmFsYW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgaW50ZXJuYWwgYmFsYW5jZXM7CgogICAgc3RydWN0IFByb3Bvc2FsIHsKICAgICAgICBhZGRyZXNzIGVuZ3JhdmVkQWRkcmVzczsKICAgICAgICB1aW50MjU2IGRlYWRsaW5lOwogICAgICAgIHVpbnQyNTYgYXBwcm92ZWRXZWlnaHQ7CiAgICAgICAgdWludDI1NiBkaXNhcHByb3ZlZFdlaWdodDsKICAgICAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHZvdGVkOwogICAgfQoKICAgIC8vIE93bmVyc2hpcCB0cmFuc2ZlciBwcm9wb3NhbAogICAgUHJvcG9zYWwgcHVibGljIHRyYW5zZmVyUHJvcG9zYWw7CgogICAgLy8gVGltZSB0byB2b3RlCiAgICB1aW50MjU2IHB1YmxpYyB0cmFuc2ZlclByb3Bvc2FsRW5kID0gNyBkYXlzOwoKICAgIC8vIFRpbWUgYmV0d2VlbiBwcm9wb3NhbHMKICAgIHVpbnQyNTYgcHVibGljIHRyYW5zZmVyUHJvcG9zYWxDb29sZG93biA9IDEgZGF5czsKCiAgICAvKioKICAgICAqIFRocm93IGlmIGF0IHN0YWdlIG90aGVyIHRoYW4gY3VycmVudCBzdGFnZQogICAgICoKICAgICAqIEBwYXJhbSBfc3RhZ2UgZXhwZWN0ZWQgc3RhZ2UgdG8gdGVzdCBmb3IKICAgICAqLwogICAgbW9kaWZpZXIgYXRTdGFnZShTdGFnZXMgX3N0YWdlKSB7CiAgICAgICAgcmVxdWlyZShzdGFnZSA9PSBfc3RhZ2UpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBUaHJvdyBpZiBhdCBzdGFnZSBvdGhlciB0aGFuIGN1cnJlbnQgc3RhZ2UKICAgICAqCiAgICAgKiBAcGFyYW0gX3N0YWdlMSBleHBlY3RlZCBzdGFnZSB0byB0ZXN0IGZvcgogICAgICogQHBhcmFtIF9zdGFnZTIgZXhwZWN0ZWQgc3RhZ2UgdG8gdGVzdCBmb3IKICAgICAqLwogICAgbW9kaWZpZXIgYXRTdGFnZXMoU3RhZ2VzIF9zdGFnZTEsIFN0YWdlcyBfc3RhZ2UyKSB7CiAgICAgICAgcmVxdWlyZShzdGFnZSA9PSBfc3RhZ2UxIHx8IHN0YWdlID09IF9zdGFnZTIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBUaHJvdyBpZiBzZW5kZXIgaXMgbm90IGJlbmVmaWNpYXJ5CiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlCZW5lZmljaWFyeSgpIHsKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBUaHJvdyBpZiBzZW5kZXIgaGFzIGEgRUdSIGJhbGFuY2Ugb2YgemVybwogICAgICovCiAgICBtb2RpZmllciBvbmx5VG9rZW5ob2xkZXJzKCkgewogICAgICAgIHJlcXVpcmUoZW5ncmF2ZWRUb2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPiAwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogVGhyb3cgaWYgdGhlIGN1cnJlbnQgdHJhbnNmZXIgcHJvcG9zYWwncyBkZWFkbGluZQogICAgICogaXMgaW4gdGhlIHBhc3QKICAgICAqLwogICAgbW9kaWZpZXIgYmVmb3JlRGVhZGxpbmUoKSB7CiAgICAgICAgcmVxdWlyZShub3cgPCB0cmFuc2ZlclByb3Bvc2FsLmRlYWRsaW5lKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogVGhyb3cgaWYgdGhlIGN1cnJlbnQgdHJhbnNmZXIgcHJvcG9zYWwncyBkZWFkbGluZQogICAgICogaXMgaW4gdGhlIGZ1dHVyZQogICAgICovCiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lKCkgewogICAgICAgIHJlcXVpcmUobm93ID4gdHJhbnNmZXJQcm9wb3NhbC5kZWFkbGluZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIE1vc3QgcGFyYW1zIGFyZSBoYXJkY29kZWQgZm9yIGNsYXJpdHkKICAgICAqCiAgICAgKiBAcGFyYW0gX2VuZ3JhdmVkVG9rZW5BZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBFR1IgRW5ncmF2ZWRUb2tlbiBjb250YWN0CiAgICAgKiBAcGFyYW0gX2JlbmVmaWNpYXJ5IENvbXBhbnkgYWRkcmVzcwogICAgICogQHBhcmFtIF9zdGFydCBhaXJkcm9wIHN0YXJ0IGRhdGUKICAgICAqLwogICAgZnVuY3Rpb24gRUdSQ3Jvd2RzYWxlKGFkZHJlc3MgX2VuZ3JhdmVkVG9rZW5BZGRyZXNzLCBhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfc3RhcnQpIHB1YmxpYyB7CiAgICAgICAgZW5ncmF2ZWRUb2tlbiA9IEVuZ3JhdmVkVG9rZW4oX2VuZ3JhdmVkVG9rZW5BZGRyZXNzKTsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICBlbmQgPSBzdGFydCArIDQyIGRheXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWNlaXZlcyBFVEggYW5kIGlzc3VlIEVHUiBFbmdyYXZlZFRva2VucyB0byB0aGUgc2VuZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgYXRTdGFnZShTdGFnZXMuSW5Qcm9ncmVzcykgewogICAgICAgIC8vIENyb3dkc2FsZSBub3Qgc3RhcnRlZCBhbmQgbm90IGVuZGVkIHlldAogICAgICAgIC8vIEVuZm9yY2UgbWluIGFtb3VudAogICAgICAgIHJlcXVpcmUobm93ID4gc3RhcnQgJiYgbm93IDwgZW5kICYmIG1zZy52YWx1ZSA+PSBtaW5BY2NlcHRlZEFtb3VudCk7CgogICAgICAgIHVpbnQyNTYgdmFsdWVJbkVHUiA9IHRvRUdSKG1zZy52YWx1ZSk7CgogICAgICAgIHJlcXVpcmUoKGVuZ3JhdmVkVG9rZW4udG90YWxTdXBwbHkoKSArIHZhbHVlSW5FR1IpIDw9IChtYXhTdXBwbHkgKiAxMCoqMykpOwogICAgICAgIHJlcXVpcmUoZW5ncmF2ZWRUb2tlbi5pc3N1ZShtc2cuc2VuZGVyLCB2YWx1ZUluRUdSKSk7CgogICAgICAgIHVpbnQyNTYgcmVjZWl2ZWQgPSBtc2cudmFsdWU7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gcmVjZWl2ZWQ7CiAgICAgICAgcmFpc2VkICs9IHJlY2VpdmVkOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IGJhbGFuY2Ugb2YgYF9pbnZlc3RvcmAKICAgICAqCiAgICAgKiBAcGFyYW0gX2ludmVzdG9yIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgICAqIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2ludmVzdG9yKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX2ludmVzdG9yXTsKICAgIH0KCiAgICAvKioKICAgICAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzCiAgICAgKgogICAgICogQHJldHVybiBUaGUgYmVuZWZpY2lhcnkgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiBjb25maXJtQmVuZWZpY2lhcnkoKSBwdWJsaWMgb25seUJlbmVmaWNpYXJ5IHsKICAgICAgICBjb25maXJtZWRCeSA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0IGBfd2VpYCB0byBhbiBhbW91bnQgaW4gRUdSIHVzaW5nCiAgICAgKiB0aGUgY3VycmVudCByYXRlCiAgICAgKgogICAgICogQHBhcmFtIF93ZWkgYW1vdW50IG9mIHdlaSB0byBjb252ZXJ0CiAgICAgKiBAcmV0dXJuIFRoZSBhbW91bnQgaW4gRUdSCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvRUdSKHVpbnQyNTYgX3dlaSkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBhbW91bnQpIHsKICAgICAgICB1aW50MjU2IHJhdGUgPSAwOwogICAgICAgIGlmIChzdGFnZSAhPSBTdGFnZXMuRW5kZWQgJiYgbm93ID49IHN0YXJ0ICYmIG5vdyA8PSBlbmQpIHsKICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvb2wgZG93biBhZnRlciBhaXJkcm9wCiAgICAgICAgICAgIGlmIChub3cgPD0gc3RhcnQgKyBhaXJkcm9wQ29vbGRvd25FbmQpIHsKICAgICAgICAgICAgICAgIHJhdGUgPSAwOwogICAgICAgICAgICAvLyBDaGVjayBmb3IgQW5nZWxzRGF5CiAgICAgICAgICAgIH0gZWxzZSBpZiAobm93IDw9IHN0YXJ0ICsgcmF0ZUFuZ2Vsc0RheUVuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVBbmdlbHNEYXk7CiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb29sIGRvd24gYWZ0ZXIgdGhlIGFuZ2VscyBkYXkKICAgICAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gc3RhcnQgKyBhbmdlbHNEYXlDb29sZG93bkVuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IDA7CiAgICAgICAgICAgIC8vIENoZWNrIGZpcnN0IHdlZWsKICAgICAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gc3RhcnQgKyByYXRlRmlyc3RXZWVrRW5kKSB7CiAgICAgICAgICAgICAgICByYXRlID0gcmF0ZUZpcnN0V2VlazsKICAgICAgICAgICAgLy8gQ2hlY2sgc2Vjb25kIHdlZWsKICAgICAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gc3RhcnQgKyByYXRlU2Vjb25kV2Vla0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVTZWNvbmRXZWVrOwogICAgICAgICAgICAvLyBDaGVjayB0aGlyZCB3ZWVrCiAgICAgICAgICAgIH0gZWxzZSBpZiAobm93IDw9IHN0YXJ0ICsgcmF0ZVRoaXJkV2Vla0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVUaGlyZFdlZWs7CiAgICAgICAgICAgIC8vIENoZWNrIGxhc3Qgd2VlawogICAgICAgICAgICB9IGVsc2UgaWYgKG5vdyA8PSBzdGFydCArIHJhdGVMYXN0V2Vla0VuZCkgewogICAgICAgICAgICAgICAgcmF0ZSA9IHJhdGVMYXN0V2VlazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXF1aXJlKHJhdGUgIT0gMCk7IC8vIENoZWNrIGZvciBjb29sIGRvd24gcGVyaW9kcwogICAgICAgIHJldHVybiBfd2VpICogcmF0ZSAqIDEwKiozIC8gMSBldGhlcjsgLy8gMTAqKjMgZm9yIDMgZGVjaW1hbHMKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcGFydGljaXBhdGUgaW4gdGhlIGFpcmRyb3AKICAgICovCiAgICBmdW5jdGlvbiBjbGFpbSgpIHB1YmxpYyBhdFN0YWdlKFN0YWdlcy5BaXJkcm9wKSB7CiAgICAgICAgLy8gQ3Jvd2RzYWwgbm90IHN0YXJ0ZWQgeWV0IG5vciBBaXJkcm9wIGV4cGlyZWQKICAgICAgICAvLyBPbmx5IG9uY2UgcGVyIGFkZHJlc3MKICAgICAgICByZXF1aXJlKGFpcmRyb3BQYXJ0aWNpcGFudHMgPCBtYXhBaXJkcm9wUGFydGljaXBhbnRzCiAgICAgICAgICAgICYmIG5vdyA+IHN0YXJ0ICYmIG5vdyA8IHN0YXJ0ICsgYWlyZHJvcEVuZAogICAgICAgICAgICAmJiBwYXJ0aWNpcGF0ZWRJbkFpcmRyb3BbbXNnLnNlbmRlcl0gPT0gZmFsc2UpOwoKICAgICAgICByZXF1aXJlKGVuZ3JhdmVkVG9rZW4uaXNzdWUobXNnLnNlbmRlciwgcmF0ZUFpckRyb3AgKiAxMCoqMykpOwoKICAgICAgICBwYXJ0aWNpcGF0ZWRJbkFpcmRyb3BbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgIGFpcmRyb3BQYXJ0aWNpcGFudHMgKz0gMTsKICAgIH0KCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIHRvIGVuZCB0aGUgYWlyZHJvcCBhbmQgc3RhcnQgY3Jvd2RzYWxlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuZEFpcmRyb3AoKSBwdWJsaWMgYXRTdGFnZShTdGFnZXMuQWlyZHJvcCkgewogICAgICAgIHJlcXVpcmUobm93ID4gc3RhcnQgKyBhaXJkcm9wRW5kKTsKICAgICAgICBzdGFnZSA9IFN0YWdlcy5JblByb2dyZXNzOwogICAgfQoKICAgIC8qKgogICAgICogRnVuY3Rpb24gdG8gZW5kIHRoZSBjcm93ZHNhbGUgYnkgc2V0dGluZwogICAgICogdGhlIHN0YWdlIHRvIEVuZGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuZENyb3dkc2FsZSgpIHB1YmxpYyBhdFN0YWdlKFN0YWdlcy5JblByb2dyZXNzKSB7CiAgICAgICAgLy8gQ3Jvd2RzYWxlIG5vdCBlbmRlZCB5ZXQKICAgICAgICByZXF1aXJlKG5vdyA+IGVuZCk7CiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuRW5kZWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciByYWlzZWQgYW1vdW50IHRvIHRoZSBjb21wYW55IGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgb25seUJlbmVmaWNpYXJ5IGF0U3RhZ2UoU3RhZ2VzLkVuZGVkKSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeS5zZW5kKHJhaXNlZCkpOwogICAgICAgIHN0YWdlID0gU3RhZ2VzLldpdGhkcmF3bjsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIGN1c3RvbSBhbW91bnQgdG8gYSBjdXN0b20gYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0N1c3RvbSh1aW50MjU2IGFtb3VudCwgYWRkcmVzcyBhZGRyZXNzZWUpIHB1YmxpYyBvbmx5QmVuZWZpY2lhcnkgYXRTdGFnZShTdGFnZXMuRW5kZWQpIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3NlZS5zZW5kKGFtb3VudCkpOwogICAgICAgIHJhaXNlZCA9IHJhaXNlZCAtIGFtb3VudDsKICAgICAgICBpZiAocmFpc2VkID09IDApIHsKICAgICAgICAgICAgc3RhZ2UgPSBTdGFnZXMuV2l0aGRyYXduOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEVtZXJnZW5jeSBzdGFnZSBjaGFuZ2UgdG8gV2l0aGRyYXduCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1vdmVTdGFnZVdpdGhkcmF3bigpIHB1YmxpYyBvbmx5QmVuZWZpY2lhcnkgYXRTdGFnZShTdGFnZXMuRW5kZWQpIHsKICAgICAgICBzdGFnZSA9IFN0YWdlcy5XaXRoZHJhd247CiAgICB9CgogICAgLyoqCiAgICAgKiBQcm9wb3NlIHRoZSB0cmFuc2ZlciBvZiB0aGUgRW5ncmF2ZWRUb2tlbiBjb250cmFjdCBvd25lcnNoaXAKICAgICAqIHRvIGBfZW5ncmF2ZWRBZGRyZXNzYAogICAgICoKICAgICAqIEBwYXJhbSBfZW5ncmF2ZWRBZGRyZXNzIHRoZSBhZGRyZXNzIG9mIHRoZSBwcm9wb3NlZCBFbmdyYXZlZFRva2VuIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByb3Bvc2VUcmFuc2ZlcihhZGRyZXNzIF9lbmdyYXZlZEFkZHJlc3MpIHB1YmxpYyBvbmx5QmVuZWZpY2lhcnkKICAgIGF0U3RhZ2VzKFN0YWdlcy5XaXRoZHJhd24sIFN0YWdlcy5Qcm9wb3NlZCkgewogICAgICAgIC8vIENoZWNrIGZvciBhIHBlbmRpbmcgcHJvcG9zYWwKICAgICAgICByZXF1aXJlKHN0YWdlICE9IFN0YWdlcy5Qcm9wb3NlZCB8fCBub3cgPiB0cmFuc2ZlclByb3Bvc2FsLmRlYWRsaW5lICsgdHJhbnNmZXJQcm9wb3NhbENvb2xkb3duKTsKCiAgICAgICAgdHJhbnNmZXJQcm9wb3NhbCA9IFByb3Bvc2FsKHsKICAgICAgICAgICAgZW5ncmF2ZWRBZGRyZXNzOiBfZW5ncmF2ZWRBZGRyZXNzLAogICAgICAgICAgICBkZWFkbGluZTogbm93ICsgdHJhbnNmZXJQcm9wb3NhbEVuZCwKICAgICAgICAgICAgYXBwcm92ZWRXZWlnaHQ6IDAsCiAgICAgICAgICAgIGRpc2FwcHJvdmVkV2VpZ2h0OiAwCiAgICAgICAgfSk7CgogICAgICAgIHN0YWdlID0gU3RhZ2VzLlByb3Bvc2VkOwogICAgfQoKICAgIC8qKgogICAgICogQWxsb3dzIEVHUiBob2xkZXJzIHRvIHZvdGUgb24gdGhlIHBvcG9zZWQgdHJhbnNmZXIgb2YKICAgICAqIG93bmVyc2hpcC4gV2VpZ2h0IGlzIGNhbGN1bGF0ZWQgZGlyZWN0bHksIHRoaXMgaXMgbm8gcHJvYmxlbQogICAgICogYmVjYXVzZSBFbmdyYXZlZFRva2VucyBjYW5ub3QgYmUgdHJhbnNmZXJyZWQgeWV0CiAgICAgKgogICAgICogQHBhcmFtIF9hcHByb3ZlIGluZGljYXRlcyBpZiB0aGUgc2VuZGVyIHN1cHBvcnRzIHRoZSBwcm9wb3NhbAogICAgICovCiAgICBmdW5jdGlvbiB2b3RlKGJvb2wgX2FwcHJvdmUpIHB1YmxpYyBvbmx5VG9rZW5ob2xkZXJzIGJlZm9yZURlYWRsaW5lIGF0U3RhZ2UoU3RhZ2VzLlByb3Bvc2VkKSB7CiAgICAgICAgLy8gT25lIHZvdGUgcGVyIHByb3Bvc2FsCiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlclByb3Bvc2FsLnZvdGVkW21zZy5zZW5kZXJdIDwgdHJhbnNmZXJQcm9wb3NhbC5kZWFkbGluZSAtIHRyYW5zZmVyUHJvcG9zYWxFbmQpOwoKICAgICAgICB0cmFuc2ZlclByb3Bvc2FsLnZvdGVkW21zZy5zZW5kZXJdID0gbm93OwogICAgICAgIHVpbnQyNTYgd2VpZ2h0ID0gZW5ncmF2ZWRUb2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcik7CgogICAgICAgIGlmIChfYXBwcm92ZSkgewogICAgICAgICAgICB0cmFuc2ZlclByb3Bvc2FsLmFwcHJvdmVkV2VpZ2h0ICs9IHdlaWdodDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0cmFuc2ZlclByb3Bvc2FsLmRpc2FwcHJvdmVkV2VpZ2h0ICs9IHdlaWdodDsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDYWxjdWxhdGVzIHRoZSB2b3RlcyBhbmQgaWYgdGhlIG1ham9yaXR5IHdlaWd0IGFwcHJvdmVkCiAgICAgKiB0aGUgcHJvcG9zYWwgdGhlIHRyYW5zZmVyIG9mIG93bmVyc2hpcCBpcyBleGVjdXRlZC4KCiAgICAgKiBUaGUgQ3Jvd2RzYWxlIGNvbnRhY3QgdHJhbnNmZXJyZXMgdGhlIG93bmVyc2hpcCBvZiB0aGUKICAgICAqIEVuZ3JhdmVkVG9rZW4gY29udHJhY3QgdG8gRW5ncmF2ZWQKICAgICAqLwogICAgZnVuY3Rpb24gZXhlY3V0ZVRyYW5zZmVyKCkgcHVibGljIGFmdGVyRGVhZGxpbmUgYXRTdGFnZShTdGFnZXMuUHJvcG9zZWQpIHsKICAgICAgICAvLyBDaGVjayBhcHByb3ZlZAogICAgICAgIHJlcXVpcmUodHJhbnNmZXJQcm9wb3NhbC5hcHByb3ZlZFdlaWdodCA+IHRyYW5zZmVyUHJvcG9zYWwuZGlzYXBwcm92ZWRXZWlnaHQpOwogICAgICAgIHJlcXVpcmUoZW5ncmF2ZWRUb2tlbi51bmxvY2soKSk7CiAgICAgICAgcmVxdWlyZShlbmdyYXZlZFRva2VuLnN0YXJ0SW5jZW50aXZlRGlzdHJpYnV0aW9uKCkpOwoKICAgICAgICBlbmdyYXZlZFRva2VuLnRyYW5zZmVyT3duZXJzaGlwKHRyYW5zZmVyUHJvcG9zYWwuZW5ncmF2ZWRBZGRyZXNzKTsKCiAgICAgICAgcmVxdWlyZShlbmdyYXZlZFRva2VuLm93bmVyKCkgPT0gdHJhbnNmZXJQcm9wb3NhbC5lbmdyYXZlZEFkZHJlc3MpOwoKICAgICAgICBzdGFnZSA9IFN0YWdlcy5BY2NlcHRlZDsKICAgIH0KCn0='.
	

]
