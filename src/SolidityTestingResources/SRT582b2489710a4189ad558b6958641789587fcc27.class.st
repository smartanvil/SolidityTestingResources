Class {
	#name : #SRT582b2489710a4189ad558b6958641789587fcc27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT582b2489710a4189ad558b6958641789587fcc27 >> base64 [
	^ ''.
	

]
