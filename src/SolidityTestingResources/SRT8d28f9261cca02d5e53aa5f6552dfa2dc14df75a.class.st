Class {
	#name : #SRT8d28f9261cca02d5e53aa5f6552dfa2dc14df75a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8d28f9261cca02d5e53aa5f6552dfa2dc14df75a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgoKY29udHJhY3QgQWNjZXNzQ29udHJvbCB7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yQWRkcmVzczsKICAgIHVpbnQxNiBwdWJsaWMgdG90YWxTZXJhcGhpbXMgPSAwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgc2VyYXBoaW1zOwoKICAgIGJvb2wgcHVibGljIGlzTWFpbnRlbmFuY2VNb2RlID0gdHJ1ZTsKIAogICAgbW9kaWZpZXIgb25seUNSRUFUT1IoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyZWF0b3JBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlTRVJBUEhJTSgpIHsKICAgICAgICByZXF1aXJlKHNlcmFwaGltc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBpc0NvbnRyYWN0QWN0aXZlIHsKICAgICAgICByZXF1aXJlKCFpc01haW50ZW5hbmNlTW9kZSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEFjY2Vzc0NvbnRyb2woKSBwdWJsaWMgewogICAgICAgIGNyZWF0b3JBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAoKICAgIGZ1bmN0aW9uIGFkZFNFUkFQSElNKGFkZHJlc3MgX25ld1NlcmFwaGltKSBvbmx5Q1JFQVRPUiBwdWJsaWMgewogICAgICAgIGlmIChzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9PSBmYWxzZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9IHRydWU7CiAgICAgICAgICAgIHRvdGFsU2VyYXBoaW1zICs9IDE7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVTRVJBUEhJTShhZGRyZXNzIF9vbGRTZXJhcGhpbSkgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpZiAoc2VyYXBoaW1zW19vbGRTZXJhcGhpbV0gPT0gdHJ1ZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX29sZFNlcmFwaGltXSA9IGZhbHNlOwogICAgICAgICAgICB0b3RhbFNlcmFwaGltcyAtPSAxOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVNYWludGVuYW5jZU1vZGUoYm9vbCBfaXNNYWludGFpbmluZykgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpc01haW50ZW5hbmNlTW9kZSA9IF9pc01haW50YWluaW5nOwogICAgfQoKICAKfSAKCgpjb250cmFjdCBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgeCwgdWludCB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludCkgewogICAgICB1aW50IHogPSB4ICsgeTsKICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1YnRyYWN0KHVpbnQgeCwgdWludCB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludCkgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludCB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQgeCwgdWludCB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludCkgewogICAgICB1aW50IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKHVpbnQxNiBtYXhSYW5kb20sIHVpbnQ4IG1pbiwgYWRkcmVzcyBwcml2YXRlQWRkcmVzcykgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDgpIHsKICAgICAgICB1aW50MjU2IGdlbk51bSA9IHVpbnQyNTYoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlci0xKSkgKyB1aW50MjU2KHByaXZhdGVBZGRyZXNzKTsKICAgICAgICByZXR1cm4gdWludDgoZ2VuTnVtICUgKG1heFJhbmRvbSAtIG1pbiArIDEpK21pbik7CiAgICB9Cn0KCmNvbnRyYWN0IEVudW1zIHsKICAgIGVudW0gUmVzdWx0Q29kZSB7CiAgICAgICAgU1VDQ0VTUywKICAgICAgICBFUlJPUl9DTEFTU19OT1RfRk9VTkQsCiAgICAgICAgRVJST1JfTE9XX0JBTEFOQ0UsCiAgICAgICAgRVJST1JfU0VORF9GQUlMLAogICAgICAgIEVSUk9SX05PVF9PV05FUiwKICAgICAgICBFUlJPUl9OT1RfRU5PVUdIX01PTkVZLAogICAgICAgIEVSUk9SX0lOVkFMSURfQU1PVU5UCiAgICB9CgogICAgZW51bSBBbmdlbEF1cmEgeyAKICAgICAgICBCbHVlLCAKICAgICAgICBZZWxsb3csIAogICAgICAgIFB1cnBsZSwgCiAgICAgICAgT3JhbmdlLCAKICAgICAgICBSZWQsIAogICAgICAgIEdyZWVuIAogICAgfQp9CgoKY29udHJhY3QgSUFuZ2VsQ2FyZERhdGEgaXMgQWNjZXNzQ29udHJvbCwgRW51bXMgewogICAgdWludDggcHVibGljIHRvdGFsQW5nZWxDYXJkU2VyaWVzOwogICAgdWludDY0IHB1YmxpYyB0b3RhbEFuZ2VsczsKCiAgICAKICAgIC8vIHdyaXRlCiAgICAvLyBhbmdlbHMKICAgIGZ1bmN0aW9uIGNyZWF0ZUFuZ2VsQ2FyZFNlcmllcyh1aW50OCBfYW5nZWxDYXJkU2VyaWVzSWQsIHVpbnQgX2Jhc2VQcmljZSwgIHVpbnQ2NCBfbWF4VG90YWwsIHVpbnQ4IF9iYXNlQXVyYSwgdWludDE2IF9iYXNlQmF0dGxlUG93ZXIsIHVpbnQ2NCBfbGl2ZVRpbWUpIG9ubHlDUkVBVE9SIGV4dGVybmFsIHJldHVybnModWludDgpOwogICAgZnVuY3Rpb24gdXBkYXRlQW5nZWxDYXJkU2VyaWVzKHVpbnQ4IF9hbmdlbENhcmRTZXJpZXNJZCwgdWludDY0IF9uZXdQcmljZSwgdWludDY0IF9uZXdNYXhUb3RhbCkgb25seUNSRUFUT1IgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBzZXRBbmdlbCh1aW50OCBfYW5nZWxDYXJkU2VyaWVzSWQsIGFkZHJlc3MgX293bmVyLCB1aW50IF9wcmljZSwgdWludDE2IF9iYXR0bGVQb3dlcikgb25seVNFUkFQSElNIGV4dGVybmFsIHJldHVybnModWludDY0KTsKICAgIGZ1bmN0aW9uIGFkZFRvQW5nZWxFeHBlcmllbmNlTGV2ZWwodWludDY0IF9hbmdlbElkLCB1aW50IF92YWx1ZSkgb25seVNFUkFQSElNIGV4dGVybmFsOwogICAgZnVuY3Rpb24gc2V0QW5nZWxMYXN0QmF0dGxlVGltZSh1aW50NjQgX2FuZ2VsSWQpIG9ubHlTRVJBUEhJTSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHNldEFuZ2VsTGFzdFZzQmF0dGxlVGltZSh1aW50NjQgX2FuZ2VsSWQpIG9ubHlTRVJBUEhJTSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHNldExhc3RCYXR0bGVSZXN1bHQodWludDY0IF9hbmdlbElkLCB1aW50MTYgX3ZhbHVlKSBvbmx5U0VSQVBISU0gZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBhZGRBbmdlbElkTWFwcGluZyhhZGRyZXNzIF9vd25lciwgdWludDY0IF9hbmdlbElkKSBwcml2YXRlOwogICAgZnVuY3Rpb24gdHJhbnNmZXJBbmdlbChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDY0IF9hbmdlbElkKSBvbmx5U0VSQVBISU0gcHVibGljIHJldHVybnMoUmVzdWx0Q29kZSk7CiAgICBmdW5jdGlvbiBvd25lckFuZ2VsVHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50NjQgX2FuZ2VsSWQpICBwdWJsaWM7CiAgICBmdW5jdGlvbiB1cGRhdGVBbmdlbExvY2sgKHVpbnQ2NCBfYW5nZWxJZCwgYm9vbCBuZXdWYWx1ZSkgcHVibGljOwogICAgZnVuY3Rpb24gcmVtb3ZlQ3JlYXRvcigpIG9ubHlDUkVBVE9SIGV4dGVybmFsOwoKICAgIC8vIHJlYWQKICAgIGZ1bmN0aW9uIGdldEFuZ2VsQ2FyZFNlcmllcyh1aW50OCBfYW5nZWxDYXJkU2VyaWVzSWQpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ4IGFuZ2VsQ2FyZFNlcmllc0lkLCB1aW50NjQgY3VycmVudEFuZ2VsVG90YWwsIHVpbnQgYmFzZVByaWNlLCB1aW50NjQgbWF4QW5nZWxUb3RhbCwgdWludDggYmFzZUF1cmEsIHVpbnQgYmFzZUJhdHRsZVBvd2VyLCB1aW50NjQgbGFzdFNlbGxUaW1lLCB1aW50NjQgbGl2ZVRpbWUpOwogICAgZnVuY3Rpb24gZ2V0QW5nZWwodWludDY0IF9hbmdlbElkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50NjQgYW5nZWxJZCwgdWludDggYW5nZWxDYXJkU2VyaWVzSWQsIHVpbnQxNiBiYXR0bGVQb3dlciwgdWludDggYXVyYSwgdWludDE2IGV4cGVyaWVuY2UsIHVpbnQgcHJpY2UsIHVpbnQ2NCBjcmVhdGVkVGltZSwgdWludDY0IGxhc3RCYXR0bGVUaW1lLCB1aW50NjQgbGFzdFZzQmF0dGxlVGltZSwgdWludDE2IGxhc3RCYXR0bGVSZXN1bHQsIGFkZHJlc3Mgb3duZXIpOwogICAgZnVuY3Rpb24gZ2V0T3duZXJBbmdlbENvdW50KGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIGdldEFuZ2VsQnlJbmRleChhZGRyZXNzIF9vd25lciwgdWludCBfaW5kZXgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ2NCk7CiAgICBmdW5jdGlvbiBnZXRUb3RhbEFuZ2VsQ2FyZFNlcmllcygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50OCk7CiAgICBmdW5jdGlvbiBnZXRUb3RhbEFuZ2VscygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50NjQpOwogICAgZnVuY3Rpb24gZ2V0QW5nZWxMb2NrU3RhdHVzKHVpbnQ2NCBfYW5nZWxJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGJvb2wpOwp9CmNvbnRyYWN0IExlYWRlcmJvYXJkU2xvZ2FucyBpcyBBY2Nlc3NDb250cm9sIHsKICAgIAogICAgCiAgICBtYXBwaW5nKHVpbnQ2NCA9PiBzdHJpbmcpIHB1YmxpYyBzbG9nYW5zOwogICAgdWludDY0W10gU2xvZ2FuczsKICAgIGFkZHJlc3MgcHVibGljIGFuZ2VsQ2FyZERhdGFDb250cmFjdCA9IDB4NkQyRTc2MjEzNjE1OTI1YzVmYzQzNjU2NUI1ZWU3ODhFZTBFODZEQzsKICAgIAogICAgIGZ1bmN0aW9uIFNldEFuZ2VsQ2FyZERhdGFDb250YWN0KGFkZHJlc3MgX2FuZ2VsQ2FyZERhdGFDb250cmFjdCkgb25seUNSRUFUT1IgZXh0ZXJuYWwgewogICAgICAgIGFuZ2VsQ2FyZERhdGFDb250cmFjdCA9IF9hbmdlbENhcmREYXRhQ29udHJhY3Q7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRTbG9nYW4odWludDY0IF9hbmdlbElELCBzdHJpbmcgX3Nsb2dhbikgcHVibGljIHsKICAgICAgICBJQW5nZWxDYXJkRGF0YSBhbmdlbENhcmREYXRhID0gSUFuZ2VsQ2FyZERhdGEoYW5nZWxDYXJkRGF0YUNvbnRyYWN0KTsKICAgICAgICAgIGFkZHJlc3MgYW5nZWxvd25lcjsKICAgICAgICAgICgsLCwsLCwsLCwsYW5nZWxvd25lcikgPSBhbmdlbENhcmREYXRhLmdldEFuZ2VsKF9hbmdlbElEKTsKICAgICAgICAgICAgaWYgKGFuZ2Vsb3duZXIgIT0gbXNnLnNlbmRlcikge3JldmVydCgpO30KICAgICAgICAgICAgIC8vY2FuIG9ubHkgc2V0IHNsb2dhbnMgZm9yIGFuZ2VscyB5b3Ugb3duLiAKICAgICAgICAgICAgc2xvZ2Fuc1tfYW5nZWxJRF0gPSBfc2xvZ2FuOwogICAgfQogICAgZnVuY3Rpb24gZ2V0U2xvZ2FuKHVpbnQ2NCBfYW5nZWxJRCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBzbG9nYW5zW19hbmdlbElEXTsKICAgIH0KICAgIAogICAgICAgZnVuY3Rpb24ga2lsbCgpIG9ubHlDUkVBVE9SIGV4dGVybmFsIHsKICAgICAgICBzZWxmZGVzdHJ1Y3QoY3JlYXRvckFkZHJlc3MpOwogICAgfQp9'.
	

]
