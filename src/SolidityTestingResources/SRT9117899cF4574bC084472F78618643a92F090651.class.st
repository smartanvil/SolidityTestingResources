Class {
	#name : #SRT9117899cF4574bC084472F78618643a92F090651,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9117899cF4574bC084472F78618643a92F090651 >> base64 [
	^ ''.
	

]
