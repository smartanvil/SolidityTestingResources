Class {
	#name : #SRT611171923b84185e9328827cfaae6630481ecc7a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT611171923b84185e9328827cfaae6630481ecc7a >> base64 [
	^ ''.
	

]
