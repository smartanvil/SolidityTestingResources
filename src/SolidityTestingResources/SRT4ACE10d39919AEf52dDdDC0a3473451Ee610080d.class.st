Class {
	#name : #SRT4ACE10d39919AEf52dDdDC0a3473451Ee610080d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ACE10d39919AEf52dDdDC0a3473451Ee610080d >> base64 [
	^ ''.
	

]
