Class {
	#name : #SRT1cE7AE555139c5EF5A57CC8d814a867ee6Ee33D8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1cE7AE555139c5EF5A57CC8d814a867ee6Ee33D8 >> base64 [
	^ ''.
	

]
