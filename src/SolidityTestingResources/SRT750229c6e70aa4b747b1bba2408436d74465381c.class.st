Class {
	#name : #SRT750229c6e70aa4b747b1bba2408436d74465381c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT750229c6e70aa4b747b1bba2408436d74465381c >> base64 [
	^ ''.
	

]
