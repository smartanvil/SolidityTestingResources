Class {
	#name : #SRT0ccD5eA595a3E7537e471F40a4d90F88eD0cf5ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ccD5eA595a3E7537e471F40a4d90F88eD0cf5ec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTI7Cgpjb250cmFjdCBBbHRydWlzbSB7IAogICAgYWRkcmVzcyBvd25lciA9IG1zZy5zZW5kZXI7CgoJbW9kaWZpZXIgb25seU93bmVyIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoJCV87Cgl9CgkKCWJvb2wgcHVibGljIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDEwMDAwMDAwMCBldGhlcjsKCiAgICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiQWx0cnVpc20gVG9rZW4iOyB9CiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJBTFRSIjsgfQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gMTg7IH0KICAgIAogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiBiYWxhbmNlc1tfb3duZXJdOyB9CiAgICAKICAgIGV2ZW50IEFsdHJ1aXNtTW9kZShhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCB1aW50IF90aW1lc3RhbXApOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBmdW5jdGlvbiBBbHRydWlzbSgpIHsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSB0b3RhbFN1cHBseTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gdHJhbnNmZXJyaW5nKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+IF9hbW91bnQpOwogICAgICAgIGlmICh0cmFuc2ZlcnJpbmcoX2Zyb20sIF90bywgX2Ftb3VudCkpIHsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXJyaW5nKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSAoMiAqIDMyKSArIDQpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50KTsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPj0gYmFsYW5jZXNbX3RvXSk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOyAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmICgoX2Ftb3VudCAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHJldmVydCgpOwogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGVuYWJsZVB1cmNoYXNpbmcoKSBvbmx5T3duZXIgewogICAgICAgIHB1cmNoYXNpbmdBbGxvd2VkID0gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGRpc2FibGVQdXJjaGFzaW5nKCkgb25seU93bmVyIHsKICAgICAgICBwdXJjaGFzaW5nQWxsb3dlZCA9IGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShwdXJjaGFzaW5nQWxsb3dlZCk7CiAgICAgICAgCiAgICAgICAgLy8gTWluaW11bSBhbW91bnQgaXMgMC4wMSBFVEgKICAgICAgICB2YXIgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIGlmIChhbW91bnQgPCAxMCBmaW5uZXkpIHsgcmV2ZXJ0KCk7IH0KCiAgICAgICAgdmFyIHRva2Vuc0lzc3VlZCA9IGFtb3VudCAqIDEwMDA7CgogICAgICAgIC8vIEhhY2tlZCBtb2RlLgogICAgICAgIGlmIChhbW91bnQgPT0gNDAgZmlubmV5KSB7CiAgICAgICAgICAgIHRva2Vuc0lzc3VlZCA9IDgwMCBldGhlcjsKICAgICAgICB9CiAKICAgICAgICBpZiAoYmFsYW5jZXNbb3duZXJdIDwgdG9rZW5zSXNzdWVkKSB7IHJldmVydCgpOyB9CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdICsgdG9rZW5zSXNzdWVkIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKSB7IHJldmVydCgpOyB9CgogICAgICAgIG93bmVyLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdIC09IHRva2Vuc0lzc3VlZDsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNJc3N1ZWQ7CgogICAgICAgIFRyYW5zZmVyKG93bmVyLCBtc2cuc2VuZGVyLCB0b2tlbnNJc3N1ZWQpOwogICAgICAgIGlmIChhbW91bnQgPj0gMzAgZmlubmV5KSB7CiAgICAgICAgICAgIC8vIEFsdHJ1aXNtIG1vZGUgbXVzdCBiZSBhdCBsZWFzdCAwLjAzIEVUSAogICAgICAgICAgICBBbHRydWlzbU1vZGUobXNnLnNlbmRlciwgYW1vdW50LCBibG9jay50aW1lc3RhbXApOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
