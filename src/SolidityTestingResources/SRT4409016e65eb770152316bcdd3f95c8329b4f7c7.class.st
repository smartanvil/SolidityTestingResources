Class {
	#name : #SRT4409016e65eb770152316bcdd3f95c8329b4f7c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4409016e65eb770152316bcdd3f95c8329b4f7c7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICsgeTsKICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1YnRyYWN0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBwdXJlIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9Cgpjb250cmFjdCBFUkM3MjEgewogICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcik7CiAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsOwogICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CiAgIGZ1bmN0aW9uIHRva2Vuc09mT3duZXIoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSBvd25lclRva2Vucyk7CiAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdG9rZW5JZCk7CiAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwp9Cgpjb250cmFjdCBGTVdvcmxkQWNjZXNzQ29udHJvbCB7CiAgICBhZGRyZXNzIHB1YmxpYyBjZW9BZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczsKICAgIAogICAgYm9vbCBwdWJsaWMgcGF1c2UgPSBmYWxzZTsKCiAgICBtb2RpZmllciBvbmx5Q0VPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlDT08oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUMoKSB7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzIHx8CiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcwogICAgICAgICk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RQYXVzZSgpIHsKICAgICAgICByZXF1aXJlKCFwYXVzZSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0Q0VPKGFkZHJlc3MgX25ld0NFTykgZXh0ZXJuYWwgb25seUNFTyB7CiAgICAgICAgcmVxdWlyZShfbmV3Q0VPICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGNlb0FkZHJlc3MgPSBfbmV3Q0VPOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRDT08oYWRkcmVzcyBfbmV3Q09PKSBleHRlcm5hbCBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDT08gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNvb0FkZHJlc3MgPSBfbmV3Q09POwogICAgfQoKCiAgICBmdW5jdGlvbiBzZXRQYXVzZShib29sIF9wYXVzZSkgZXh0ZXJuYWwgb25seUMgewogICAgICAgIHBhdXNlID0gX3BhdXNlOwogICAgfQogICAgCgp9CmNvbnRyYWN0IFBsYXllclRva2VuIGlzIEVSQzcyMSwgRk1Xb3JsZEFjY2Vzc0NvbnRyb2wgewoKICAgIHN0cnVjdCBQbGF5ZXIgewogICAgICAgIHVpbnQzMiB0YWxlbnQ7CiAgICAgICAgdWludDMyIHRhY3RpY3M7CiAgICAgICAgdWludDMyIGRyaWJibGluZzsKICAgICAgICB1aW50MzIga2ljazsKICAgICAgICB1aW50MzIgc3BlZWQ7CiAgICAgICAgdWludDMyIHBhc3M7CiAgICAgICAgdWludDMyIHNlbGVjdGlvbjsKICAgICAgICB1aW50MjU2IHBvc2l0aW9uOwogICAgfQoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJGb290YmFsbCBNYW5hZ2VyIFBsYXllciI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJGTVAiOwoKICAgIFBsYXllcltdIHB1YmxpYyBwbGF5ZXJzOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1Nikgb3duZXJQbGF5ZXJzQ291bnQ7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHBsYXllck93bmVyczsKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHBsYXllckFwcHJvdmVkOwogICAgCiAgICBmdW5jdGlvbiBQbGF5ZXJUb2tlbigpIHB1YmxpYyB7CiAgICAgICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGNvdW50KSB7CiAgICAgICAgcmV0dXJuIG93bmVyUGxheWVyc0NvdW50W19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHBsYXllcnMubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgewogICAgICAgIG93bmVyID0gcGxheWVyT3duZXJzW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXJPZihfdG9rZW5JZCkpOwogICAgICAgIHBsYXllckFwcHJvdmVkW190b2tlbklkXSA9IF90bzsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHsKICAgICAgICBvd25lclBsYXllcnNDb3VudFtfdG9dKys7CiAgICAgICAgcGxheWVyT3duZXJzW190b2tlbklkXSA9IF90bzsKICAgICAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lclBsYXllcnNDb3VudFtfZnJvbV0tLTsKICAgICAgICAgICAgZGVsZXRlIHBsYXllckFwcHJvdmVkW190b2tlbklkXTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyT2YoX3Rva2VuSWQpKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShwbGF5ZXJBcHByb3ZlZFtfdG9rZW5JZF0gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShfZnJvbSA9PSBvd25lck9mKF90b2tlbklkKSk7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTZbXSBvd25lclRva2VucykgewogICAgICAgIHVpbnQyNTYgcGxheWVyc0NvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgaWYgKHBsYXllcnNDb3VudCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdWludDI1NltdKDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnQyNTZbXShwbGF5ZXJzQ291bnQpOwogICAgICAgICAgICB1aW50MjU2IHRvdGFsUGxheWVycyA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgICAgIHVpbnQyNTYgcGxheWVySWQ7CiAgICAgICAgICAgIHVpbnQyNTYgcmVzdWx0SW5kZXggPSAwOwogICAgICAgICAgICBmb3IgKHBsYXllcklkID0gMTsgcGxheWVySWQgPD0gdG90YWxQbGF5ZXJzOyBwbGF5ZXJJZCsrKSB7CiAgICAgICAgICAgICAgICBpZiAocGxheWVyT3duZXJzW3BsYXllcklkXSA9PSBfb3duZXIpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gcGxheWVySWQ7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQbGF5ZXIodWludDI1NiBfcGxheWVySWQpIHB1YmxpYyB2aWV3IHJldHVybnMoCiAgICAgICAgdWludDMyIHRhbGVudCwKICAgICAgICB1aW50MzIgdGFjdGljcywKICAgICAgICB1aW50MzIgZHJpYmJsaW5nLAogICAgICAgIHVpbnQzMiBraWNrLAogICAgICAgIHVpbnQzMiBzcGVlZCwKICAgICAgICB1aW50MzIgcGFzcywKICAgICAgICB1aW50MzIgc2VsZWN0aW9uLAogICAgICAgIHVpbnQyNTYgcG9zaXRpb24KICAgICkgewogICAgICAgIFBsYXllciBtZW1vcnkgcGxheWVyID0gcGxheWVyc1tfcGxheWVySWRdOwogICAgICAgIHRhbGVudCA9IHBsYXllci50YWxlbnQ7CiAgICAgICAgdGFjdGljcyA9IHBsYXllci50YWN0aWNzOwogICAgICAgIGRyaWJibGluZyA9IHBsYXllci5kcmliYmxpbmc7CiAgICAgICAga2ljayA9IHBsYXllci5raWNrOwogICAgICAgIHNwZWVkID0gcGxheWVyLnNwZWVkOwogICAgICAgIHBhc3MgPSBwbGF5ZXIucGFzczsKICAgICAgICBzZWxlY3Rpb24gPSBwbGF5ZXIuc2VsZWN0aW9uOwogICAgICAgIHBvc2l0aW9uID0gcGxheWVyLnBvc2l0aW9uOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uKHVpbnQyNTYgX3BsYXllcklkKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICBQbGF5ZXIgbWVtb3J5IHBsYXllciA9IHBsYXllcnNbX3BsYXllcklkXTsKICAgICAgICByZXR1cm4gcGxheWVyLnBvc2l0aW9uOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVBsYXllcigKICAgICAgICAgICAgdWludDMyWzddIF9za2lsbHMsCiAgICAgICAgICAgIHVpbnQyNTYgX3Bvc2l0aW9uLAogICAgICAgICAgICBhZGRyZXNzIF9vd25lcgogICAgKQogICAgICAgIHB1YmxpYyBvbmx5Q09PCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICBQbGF5ZXIgbWVtb3J5IHBsYXllciA9IFBsYXllcihfc2tpbGxzWzBdLCBfc2tpbGxzWzFdLCBfc2tpbGxzWzJdLCBfc2tpbGxzWzNdLCBfc2tpbGxzWzRdLCBfc2tpbGxzWzVdLCBfc2tpbGxzWzZdLCBfcG9zaXRpb24pOwogICAgICAgIHVpbnQyNTYgbmV3UGxheWVySWQgPSBwbGF5ZXJzLnB1c2gocGxheWVyKSAtIDE7CiAgICAgICAgIF90cmFuc2ZlcigwLCBfb3duZXIsIG5ld1BsYXllcklkKTsKICAgICAgICByZXR1cm4gbmV3UGxheWVySWQ7CiAgICB9Cn0='.
	

]
