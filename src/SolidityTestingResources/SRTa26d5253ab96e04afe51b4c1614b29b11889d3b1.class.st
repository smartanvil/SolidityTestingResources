Class {
	#name : #SRTa26d5253ab96e04afe51b4c1614b29b11889d3b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa26d5253ab96e04afe51b4c1614b29b11889d3b1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKCgovLyBOT1RFOiBCYXNpY1Rva2VuIG9ubHkgaGFzIHBhcnRpYWwgRVJDMjAgc3VwcG9ydApjb250cmFjdCBJY28gaXMgQmFzaWNUb2tlbiB7CiAgYWRkcmVzcyBvd25lcjsKICB1aW50MjU2IHB1YmxpYyB0ZWFtTnVtOwogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSB0ZWFtOwoKICAvLyBleHBvc2UgdGhlc2UgZm9yIEVSQzIwIHRvb2xzCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkxVTkEiOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkxVTkEiOwogIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAvLyBTaWduaWZpY2FudCBkaWdpdHMgdG9rZW5QcmVjaXNpb24KICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgdG9rZW5QcmVjaXNpb24gPSAxMGUxNzsKCiAgLy8gVE9ETzogc2V0IHRoaXMgZmluYWwsIHRoaXMgZXF1YXRlcyB0byBhbiBhbW91bnQKICAvLyBpbiBkb2xsYXJzLgogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGhhcmRDYXAgPSAzMjAwMCAqIHRva2VuUHJlY2lzaW9uOwoKICAvLyBUb2tlbnMgZnJvemVuIHN1cHBseQogIHVpbnQyNTYgcHVibGljIHRva2Vuc0Zyb3plbiA9IDA7CgogIHVpbnQyNTYgcHVibGljIHRva2VuVmFsdWUgPSAxICogdG9rZW5QcmVjaXNpb247CgogIC8vIHN0cnVjdCByZXByZXNlbnRpbmcgYSBkaXZpZGVuZHMgc25hcHNob3QKICBzdHJ1Y3QgRGl2aWRlbmRTbmFwc2hvdCB7CiAgICB1aW50MjU2IHRvdGFsU3VwcGx5OwogICAgdWludDI1NiBkaXZpZGVuZHNJc3N1ZWQ7CiAgICB1aW50MjU2IG1hbmFnZW1lbnREaXZpZGVuZHM7CiAgfQogIC8vIEFuIGFycmF5IG9mIGFsbCB0aGUgRGl2aWRlbmRTbmFwc2hvdCBzbyBmYXIKICBEaXZpZGVuZFNuYXBzaG90W10gZGl2aWRlbmRTbmFwc2hvdHM7CgogIC8vIE1hcHBpbmcgb2YgdXNlciB0byB0aGUgaW5kZXggb2YgdGhlIGxhc3QgZGl2aWRlbmQgdGhhdCB3YXMgYXdhcmRlZCB0byB6aGllCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGxhc3REaXZpZGVuZDsKCiAgLy8gTWFuYWdlbWVudCBmZWVzIHNoYXJlIGV4cHJlc3MgYXMgMTAwLyU6IGVnLiAyMCUgPT4gMTAwLzIwID0gNQogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1hbmFnZW1lbnRGZWVzID0gMTA7CgogIC8vIEFzc2V0cyB1bmRlciBtYW5hZ2VtZW50IGluIFVTRAogIHVpbnQyNTYgcHVibGljIGF1bSA9IDA7CgogIC8vIG51bWJlciBvZiB0b2tlbnMgaW52ZXN0b3JzIHdpbGwgcmVjZWl2ZSBwZXIgZXRoIGludmVzdGVkCiAgdWludDI1NiBwdWJsaWMgdG9rZW5zUGVyRXRoOwoKICAvLyBJY28gc3RhcnQvZW5kIHRpbWVzdGFtcHMsIGJldHdlZW4gd2hpY2ggKGluY2x1c2l2ZWx5KSBpbnZlc3RtZW50cyBhcmUgYWNjZXB0ZWQKICB1aW50IHB1YmxpYyBpY29TdGFydDsKICB1aW50IHB1YmxpYyBpY29FbmQ7CgogIC8vIGRyaXAgcGVyY2VudCBpbiAxMDAgLyBwZXJjZW50YWdlCiAgdWludDI1NiBwdWJsaWMgZHJpcFJhdGUgPSA1MDsKCiAgLy8gY3VycmVudCByZWdpc3RyZWQgY2hhbmdlIGFkZHJlc3MKICBhZGRyZXNzIHB1YmxpYyBjdXJyZW50U2FsZUFkZHJlc3M7CgogIC8vIGN1c3RvbSBldmVudHMKICBldmVudCBGcmVlemUoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IFBhcnRpY2lwYXRlKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBSZWNvbmNpbGUoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgcGVyaW9kLCB1aW50MjU2IHZhbHVlKTsKCiAgLyoqCiAgICogSUNPIGNvbnN0cnVjdG9yCiAgICogRGVmaW5lIElDTyBkZXRhaWxzIGFuZCBjb250cmlidXRpb24gcGVyaW9kCiAgICovCiAgZnVuY3Rpb24gSWNvKHVpbnQyNTYgX2ljb1N0YXJ0LCB1aW50MjU2IF9pY29FbmQsIGFkZHJlc3NbXSBfdGVhbSwgdWludDI1NiBfdG9rZW5zUGVyRXRoKSBwdWJsaWMgewogICAgLy8gcmVxdWlyZSAoX2ljb1N0YXJ0ID49IG5vdyk7CiAgICByZXF1aXJlIChfaWNvRW5kID49IF9pY29TdGFydCk7CiAgICByZXF1aXJlIChfdG9rZW5zUGVyRXRoID4gMCk7CgogICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgIGljb1N0YXJ0ID0gX2ljb1N0YXJ0OwogICAgaWNvRW5kID0gX2ljb0VuZDsKICAgIHRva2Vuc1BlckV0aCA9IF90b2tlbnNQZXJFdGg7CgogICAgLy8gaW5pdGlhbGl6ZSB0aGUgdGVhbSBtYXBwaW5nIHdpdGggdHJ1ZSB3aGVuIHBhcnQgb2YgdGhlIHRlYW0KICAgIHRlYW1OdW0gPSBfdGVhbS5sZW5ndGg7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCB0ZWFtTnVtOyBpKyspIHsKICAgICAgdGVhbVtfdGVhbVtpXV0gPSB0cnVlOwogICAgfQoKICAgIC8vIGFzIGEgc2FmZXR5IG1lYXN1cmUgdGVtcG9yeSBzZXQgdGhlIHNhbGUgYWRkcmVzcyB0byBzb21ldGhpbmcgZWxzZSB0aGFuIDB4MAogICAgY3VycmVudFNhbGVBZGRyZXNzID0gb3duZXI7CiAgfQoKICAvKioKICAgKiBNb2RpZmllcnMKICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5VGVhbSgpIHsKICAgIHJlcXVpcmUgKHRlYW1bbXNnLnNlbmRlcl0gPT0gdHJ1ZSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seVNhbGVBZGRyZXNzKCkgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBjdXJyZW50U2FsZUFkZHJlc3MpOwogICAgXzsKICB9CgogIC8qKgogICAqCiAgICogRnVuY3Rpb24gYWxsb3dpbmcgaW52ZXN0b3JzIHRvIHBhcnRpY2lwYXRlIGluIHRoZSBJQ08uCiAgICogU3BlY2lmeWluZyB0aGUgYmVuZWZpY2lhcnkgd2lsbCBjaGFuZ2Ugd2hvIHdpbGwgcmVjZWl2ZSB0aGUgdG9rZW5zLgogICAqIEZ1bmQgdG9rZW5zIHdpbGwgYmUgZGlzdHJpYnV0ZWQgYmFzZWQgb24gYW1vdW50IG9mIEVUSCBzZW50IGJ5IGludmVzdG9yLCBhbmQgY2FsY3VsYXRlZAogICAqIHVzaW5nIHRva2Vuc1BlckV0aCB2YWx1ZS4KICAgKi8KICBmdW5jdGlvbiBwYXJ0aWNpcGF0ZShhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlIChiZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUgKG5vdyA+PSBpY29TdGFydCAmJiBub3cgPD0gaWNvRW5kKTsKICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA+IDApOwoKICAgIHVpbnQyNTYgZXRoQW1vdW50ID0gbXNnLnZhbHVlOwogICAgdWludDI1NiBudW1Ub2tlbnMgPSBldGhBbW91bnQubXVsKHRva2Vuc1BlckV0aCk7CgogICAgcmVxdWlyZSh0b3RhbFN1cHBseS5hZGQobnVtVG9rZW5zKSA8PSBoYXJkQ2FwKTsKCiAgICBiYWxhbmNlc1tiZW5lZmljaWFyeV0gPSBiYWxhbmNlc1tiZW5lZmljaWFyeV0uYWRkKG51bVRva2Vucyk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChudW1Ub2tlbnMpOwogICAgdG9rZW5zRnJvemVuID0gdG90YWxTdXBwbHkgKiAyOwogICAgYXVtID0gdG90YWxTdXBwbHk7CgogICAgb3duZXIudHJhbnNmZXIoZXRoQW1vdW50KTsKICAgIC8vIE91ciBvd24gY3VzdG9tIGV2ZW50IHRvIG1vbml0b3IgSUNPIHBhcnRpY2lwYXRpb24KICAgIFBhcnRpY2lwYXRlKGJlbmVmaWNpYXJ5LCBudW1Ub2tlbnMpOwogICAgLy8gTGV0IEVSQzIwIHRvb2xzIGtub3cgb2YgdG9rZW4gaG9kbGVycwogICAgVHJhbnNmZXIoMHgwLCBiZW5lZmljaWFyeSwgbnVtVG9rZW5zKTsKICB9CgogIC8qKgogICAqCiAgICogV2UgZmFsbGJhY2sgdG8gdGhlIHBhcnRjaXBhdGUgZnVuY3Rpb24KICAgKi8KICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICBwYXJ0aWNpcGF0ZShtc2cuc2VuZGVyKTsKICB9CgogIC8qKgogICAqIEludGVybmFsIGJ1cm4gZnVuY3Rpb24sIG9ubHkgY2FsbGFibGUgYnkgdGVhbQogICAqCiAgICogQHBhcmFtIF9hbW91bnQgaXMgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYnVybi4KICAgKi8KICBmdW5jdGlvbiBmcmVlemUodWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seVNhbGVBZGRyZXNzIHJldHVybnMgKGJvb2wpIHsKICAgIHJlY29uY2lsZURpdmlkZW5kKG1zZy5zZW5kZXIpOwogICAgcmVxdWlyZShfYW1vdW50IDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF9hbW91bnQpOwogICAgdG9rZW5zRnJvemVuID0gdG9rZW5zRnJvemVuLmFkZChfYW1vdW50KTsKCiAgICBhdW0gPSBhdW0uc3ViKHRva2VuVmFsdWUubXVsKF9hbW91bnQpLmRpdih0b2tlblByZWNpc2lvbikpOwoKICAgIEZyZWV6ZShtc2cuc2VuZGVyLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIENhbGN1bGF0ZSB0aGUgZGl2ZW5kcyBmb3IgdGhlIGN1cnJlbnQgcGVyaW9kIGdpdmVuIHRoZSBBVU0gcHJvZml0CiAgICoKICAgKiBAcGFyYW0gdG90YWxQcm9maXQgaXMgdGhlIGFtb3VudCBvZiB0b3RhbCBwcm9maXQgaW4gVVNELgogICAqLwogIGZ1bmN0aW9uIHJlcG9ydFByb2ZpdChpbnQyNTYgdG90YWxQcm9maXQsIGFkZHJlc3Mgc2FsZUFkZHJlc3MpIHB1YmxpYyBvbmx5VGVhbSByZXR1cm5zIChib29sKSB7CiAgICAvLyBmaXJzdCB3ZSBuZXcgZGl2aWRlbmRzIGlmIHRoaXMgcGVyaW9kIHdhcyBwcm9maXRhYmxlCiAgICBpZiAodG90YWxQcm9maXQgPiAwKSB7CiAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCA1MCUgb2YgdGhpcywgYXMgdGhlIHJlc3QgaXMgcmVpbnZlc3RlZCByaWdodCBhd2F5CiAgICAgIHVpbnQyNTYgcHJvZml0ID0gdWludDI1Nih0b3RhbFByb2ZpdCkubXVsKHRva2VuUHJlY2lzaW9uKS5kaXYoMik7CgogICAgICAvLyB0aGlzIHdpbGwgdGhyb3cgaWYgdGhlcmUgYXJlIG5vdCBlbm91Z2ggdG9rZW5zCiAgICAgIGFkZE5ld0RpdmlkZW5kcyhwcm9maXQpOwogICAgfQoKICAgIC8vIHRoZW4gd2UgZHJpcAogICAgZHJpcChzYWxlQWRkcmVzcyk7CgogICAgLy8gYWRqdXN0IEFVTQogICAgYXVtID0gYXVtLmFkZCh1aW50MjU2KHRvdGFsUHJvZml0KS5tdWwodG9rZW5QcmVjaXNpb24pKTsKCiAgICAvLyByZWdpc3RlciB0aGUgc2FsZSBhZGRyZXNzCiAgICBjdXJyZW50U2FsZUFkZHJlc3MgPSBzYWxlQWRkcmVzczsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKICBmdW5jdGlvbiBkcmlwKGFkZHJlc3Mgc2FsZUFkZHJlc3MpIGludGVybmFsIHsKICAgIHVpbnQyNTYgZHJpcFRva2VucyA9IHRva2Vuc0Zyb3plbi5kaXYoZHJpcFJhdGUpOwoKICAgIHRva2Vuc0Zyb3plbiA9IHRva2Vuc0Zyb3plbi5zdWIoZHJpcFRva2Vucyk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChkcmlwVG9rZW5zKTsKICAgIGF1bSA9IGF1bS5hZGQodG9rZW5WYWx1ZS5tdWwoZHJpcFRva2VucykuZGl2KHRva2VuUHJlY2lzaW9uKSk7CgogICAgcmVjb25jaWxlRGl2aWRlbmQoc2FsZUFkZHJlc3MpOwogICAgYmFsYW5jZXNbc2FsZUFkZHJlc3NdID0gYmFsYW5jZXNbc2FsZUFkZHJlc3NdLmFkZChkcmlwVG9rZW5zKTsKICAgIFRyYW5zZmVyKDB4MCwgc2FsZUFkZHJlc3MsIGRyaXBUb2tlbnMpOwogIH0KCiAgLyoqCiAgICogQ2FsY3VsYXRlIHRoZSBkaXZlbmRzIGZvciB0aGUgY3VycmVudCBwZXJpb2QgZ2l2ZW4gdGhlIGRpdmlkZW5kCiAgICogYW1vdW50cyAoVVNEICogdG9rZW5QcmVjaXNpb24pLgogICAqLwogIGZ1bmN0aW9uIGFkZE5ld0RpdmlkZW5kcyh1aW50MjU2IHByb2ZpdCkgaW50ZXJuYWwgewogICAgdWludDI1NiBuZXdBdW0gPSBhdW0uYWRkKHByb2ZpdCk7IC8vIDE4IHNpZyBkaWdpdHMKICAgIHRva2VuVmFsdWUgPSBuZXdBdW0ubXVsKHRva2VuUHJlY2lzaW9uKS5kaXYodG90YWxTdXBwbHkpOyAvLyAxOCBzaWcgZGlnaXRzCiAgICB1aW50MjU2IHRvdGFsRGl2aWRlbmRzID0gcHJvZml0Lm11bCh0b2tlblByZWNpc2lvbikuZGl2KHRva2VuVmFsdWUpOyAvLyAxOCBzaWcgZGlnaXRzCiAgICB1aW50MjU2IG1hbmFnZW1lbnREaXZpZGVuZHMgPSB0b3RhbERpdmlkZW5kcy5kaXYobWFuYWdlbWVudEZlZXMpOyAvLyAxNyBzaWcgZGlnaXRzCiAgICB1aW50MjU2IGRpdmlkZW5kc0lzc3VlZCA9IHRvdGFsRGl2aWRlbmRzLnN1YihtYW5hZ2VtZW50RGl2aWRlbmRzKTsgLy8gMTggc2lnIGRpZ2l0cwoKICAgIC8vIG1ha2Ugc3VyZSB3ZSBoYXZlIGVub3VnaCBpbiB0aGUgZnJvemVuIGZ1bmQKICAgIHJlcXVpcmUodG9rZW5zRnJvemVuID49IHRvdGFsRGl2aWRlbmRzKTsKCiAgICBkaXZpZGVuZFNuYXBzaG90cy5wdXNoKERpdmlkZW5kU25hcHNob3QodG90YWxTdXBwbHksIGRpdmlkZW5kc0lzc3VlZCwgbWFuYWdlbWVudERpdmlkZW5kcykpOwoKICAgIC8vIGFkZCB0aGUgcHJldmlvdXMgYW1vdW50IG9mIGdpdmVuIGRpdmlkZW5kcyB0byB0aGUgdG90YWxTdXBwbHkKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKHRvdGFsRGl2aWRlbmRzKTsKICAgIHRva2Vuc0Zyb3plbiA9IHRva2Vuc0Zyb3plbi5zdWIodG90YWxEaXZpZGVuZHMpOwogIH0KCiAgLyoqCiAgICogV2l0aGRyYXcgYWxsIGZ1bmRzIGFuZCBraWxsIGZ1bmQgc21hcnQgY29udHJhY3QKICAgKi8KICBmdW5jdGlvbiBsaXF1aWRhdGUoKSBwdWJsaWMgb25seVRlYW0gcmV0dXJucyAoYm9vbCkgewogICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICB9CgoKICAvLyBnZXR0ZXIgdG8gcmV0cmlldmUgZGl2aWRlbnQgb3dlZAogIGZ1bmN0aW9uIGdldE93ZWREaXZpZGVuZChhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCwgdWludDI1NltdKSB7CiAgICB1aW50MjU2W10gbWVtb3J5IG5vRGl2aWRlbmRzID0gbmV3IHVpbnQyNTZbXSgwKTsKICAgIC8vIEFuZCB0aGUgYWRkcmVzcycgY3VycmVudCBiYWxhbmNlCiAgICB1aW50MjU2IGJhbGFuY2UgPSBCYXNpY1Rva2VuLmJhbGFuY2VPZihfb3duZXIpOwogICAgLy8gcmV0cmlldmUgaW5kZXggb2YgbGFzdCBkaXZpZGVuZCB0aGlzIGFkZHJlc3MgcmVjZWl2ZWQKICAgIC8vIE5PVEU6IHRoZSBkZWZhdWx0IHJldHVybiB2YWx1ZSBvZiBhIG1hcHBpbmcgaXMgMCBpbiB0aGlzIGNhc2UKICAgIHVpbnQgaWR4ID0gbGFzdERpdmlkZW5kW19vd25lcl07CiAgICBpZiAoaWR4ID09IGRpdmlkZW5kU25hcHNob3RzLmxlbmd0aCkgcmV0dXJuICh0b3RhbCwgbm9EaXZpZGVuZHMpOwogICAgaWYgKGJhbGFuY2UgPT0gMCAmJiB0ZWFtW19vd25lcl0gIT0gdHJ1ZSkgcmV0dXJuICh0b3RhbCwgbm9EaXZpZGVuZHMpOwoKICAgIHVpbnQyNTZbXSBtZW1vcnkgZGl2aWRlbmRzID0gbmV3IHVpbnQyNTZbXShkaXZpZGVuZFNuYXBzaG90cy5sZW5ndGggLSBpZHggLSBpKTsKICAgIHVpbnQyNTYgY3VyckJhbGFuY2UgPSBiYWxhbmNlOwogICAgZm9yICh1aW50IGkgPSBpZHg7IGkgPCBkaXZpZGVuZFNuYXBzaG90cy5sZW5ndGg7IGkrKykgewogICAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byByZW1vdmUgdGhlIC5tdWwodG9rZW5QcmVjaXNpb24pIGFuZCAuZGl2KHRva2VuUHJlY2lzaW9uKSBhbmQgYXBwbHkgdGhlbSBvbmNlCiAgICAgIC8vIGF0IHRoZSBiZWdpbm5pbmcgYW5kIG9uY2UgYXQgdGhlIGVuZCwgYnV0IHdlIG5lZWQgdG8gbWF0aCBpdCBvdXQKICAgICAgdWludDI1NiBkaXZpZGVuZCA9IGN1cnJCYWxhbmNlLm11bCh0b2tlblByZWNpc2lvbikuZGl2KGRpdmlkZW5kU25hcHNob3RzW2ldLnRvdGFsU3VwcGx5KS5tdWwoZGl2aWRlbmRTbmFwc2hvdHNbaV0uZGl2aWRlbmRzSXNzdWVkKS5kaXYodG9rZW5QcmVjaXNpb24pOwoKICAgICAgLy8gQWRkIHRoZSBtYW5hZ2VtZW50IGRpdmlkZW5kcyBpbiBlcXVhbCBwYXJ0cyBpZiB0aGUgY3VycmVudCBhZGRyZXNzIGlzIHBhcnQgb2YgdGhlIHRlYW0KICAgICAgaWYgKHRlYW1bX293bmVyXSA9PSB0cnVlKSB7CiAgICAgICAgZGl2aWRlbmQgPSBkaXZpZGVuZC5hZGQoZGl2aWRlbmRTbmFwc2hvdHNbaV0ubWFuYWdlbWVudERpdmlkZW5kcy5kaXYodGVhbU51bSkpOwogICAgICB9CgogICAgICB0b3RhbCA9IHRvdGFsLmFkZChkaXZpZGVuZCk7CgogICAgICBkaXZpZGVuZHNbaSAtIGlkeF0gPSBkaXZpZGVuZDsKCiAgICAgIGN1cnJCYWxhbmNlID0gY3VyckJhbGFuY2UuYWRkKGRpdmlkZW5kKTsKICAgIH0KCiAgICByZXR1cm4gKHRvdGFsLCBkaXZpZGVuZHMpOwogIH0KCiAgLy8gbW9ua2V5IHBhdGNoZXMKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHZhciAob3dlZERpdmlkZW5kLCAvKiBkaXZpZGVuZHMgKi8pID0gZ2V0T3dlZERpdmlkZW5kKF9vd25lcik7CiAgICByZXR1cm4gQmFzaWNUb2tlbi5iYWxhbmNlT2YoX293bmVyKS5hZGQob3dlZERpdmlkZW5kKTsKICB9CgoKICAvLyBSZWNvbmNpbGUgYWxsIG91dHN0YW5kaW5nIGRpdmlkZW5kcyBmb3IgYW4gYWRkcmVzcwogIC8vIGludG8gaXRzIGJhbGFuY2UuCiAgZnVuY3Rpb24gcmVjb25jaWxlRGl2aWRlbmQoYWRkcmVzcyBfb3duZXIpIGludGVybmFsIHsKICAgIHZhciAob3dlZERpdmlkZW5kLCBkaXZpZGVuZHMpID0gZ2V0T3dlZERpdmlkZW5kKF9vd25lcik7CgogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgZGl2aWRlbmRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChkaXZpZGVuZHNbaV0gPiAwKSB7CiAgICAgICAgUmVjb25jaWxlKF9vd25lciwgbGFzdERpdmlkZW5kW19vd25lcl0gKyBpLCBkaXZpZGVuZHNbaV0pOwogICAgICAgIFRyYW5zZmVyKDB4MCwgX293bmVyLCBkaXZpZGVuZHNbaV0pOwogICAgICB9CiAgICB9CgogICAgaWYob3dlZERpdmlkZW5kID4gMCkgewogICAgICBiYWxhbmNlc1tfb3duZXJdID0gYmFsYW5jZXNbX293bmVyXS5hZGQob3dlZERpdmlkZW5kKTsKICAgIH0KCiAgICAvLyByZWdpc3RlciB0aGlzIHVzZXIgYXMgYmVpbmcgb3dlZCBubyBmdXJ0aGVyIGRpdmlkZW5kcwogICAgbGFzdERpdmlkZW5kW19vd25lcl0gPSBkaXZpZGVuZFNuYXBzaG90cy5sZW5ndGg7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVjb25jaWxlRGl2aWRlbmQobXNnLnNlbmRlcik7CiAgICByZWNvbmNpbGVEaXZpZGVuZChfdG8pOwogICAgcmV0dXJuIEJhc2ljVG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KTsKICB9Cgp9'.
	

]
