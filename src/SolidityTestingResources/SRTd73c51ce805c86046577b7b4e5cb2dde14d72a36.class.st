Class {
	#name : #SRTd73c51ce805c86046577b7b4e5cb2dde14d72a36,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd73c51ce805c86046577b7b4e5cb2dde14d72a36 >> base64 [
	^ ''.
	

]
