Class {
	#name : #SRT547759d4f3BdB4deAC0e8D3787d614468E9d5162,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT547759d4f3BdB4deAC0e8D3787d614468E9d5162 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE1OwoKCi8qKgoqY29udHJhY3QgbmFtZSA6IHRva2VuUmVjaXBpZW50CiovCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0KCgovKioKKmNvbnRyYWN0IG5hbWUgOiBHb2R6U3RhcnR1cEJhc2ljSW5mb3JtYXRpb24KKnB1cnBvc2UgOiBiZSB0aGUgc21hcnQgY29udHJhY3QgZm9yIHRoZSBlcmMyMCB0b2tlbm9mIHRoZSBzdGFydHVwCipnb2FsIDogdG8gYWNoaWV2ZSB0byBiZSB0aGUgc21hcnQgY29udHJhY3QgdGhhdCB0aGUgc3RhcnR1cCB1c2UgZm9yIGhpcyBzdG9rY3MKKi8KY29udHJhY3QgR29kelN0YXJ0dXBCYXNpY0luZm9ybWF0aW9uIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgdWludDI1NiBwdWJsaWMgYW1vdW50OwogICAgdWludDI1NiBwdWJsaWMgcmV3YXJkOyAvKnJld2FyZCBvZmZlcmVkIGZvciB0aGUgdm90ZXJzKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICBmdW5jdGlvbiBHb2R6U3RhcnR1cEJhc2ljSW5mb3JtYXRpb24oCiAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbCwKICAgICAgICB1aW50MjU2IF9hbW91bnQsCiAgICAgICAgdWludDI1NiBfcmV3YXJkLCAvKnJld2FyZCBvZmZlcmVkIGZvciB0aGUgdm90ZXJzKi8KICAgICAgICBhZGRyZXNzIF9Hb2R6U3dhcFRva2VucyAvKmFkZHJlc3Mgb2YgdGhlIHNtYXJ0IGNvbnRyYWN0IHRva2VuIHN3YXAqLwogICAgKSB7CiAgICAgICAgb3duZXIgPSB0eC5vcmlnaW47IC8qYmVjYXN1c2UgdGhlIGNvbnRyYWN0IGNyZWF0aW9uIGlzIGNvbnRyb2xsZWQgYnkgdGhlIHNtYXJ0IGNvbnRyYWN0IGNvbnRyb2xsZXIgd2UgdXNlIHR4Lm9yaWdpbiovCiAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IGluaXRpYWxTdXBwbHk7CgogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOwoKICAgICAgICBhbW91bnQgPSBfYW1vdW50OyAvKmFtb3VudCBvZiB0aGUgZXJjMjAgdG9rZW4qLwogICAgICAgIHJld2FyZCA9IF9yZXdhcmQ7IC8qcmV3YXJkIG9mZmVyZWQgZm9yIHRoZSB2b3RlcnMqLwoKICAgICAgICBhbGxvd2FuY2Vbb3duZXJdW19Hb2R6U3dhcFRva2Vuc10gPSBpbml0aWFsU3VwcGx5OyAvKmhlcmUgd2lsbCBhbGxvdyB0aGUgdG9rZW5zIHRyYW5zZmVyIHRvIHRoZSBzbWFydCBjb250cmFjdCBzd2FwIHRva2VuKi8KICAgIH0KCiAgICAgLyogU2VuZCBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgaWYgKF90byA9PSAweDApIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQqLwogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHJldmVydCgpOyAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8qIENoZWNrIGZvciBvdmVyZmxvd3MqLwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgLyogU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyKi8KICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50Ki8KICAgIH0KCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb21tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucyBidXQgdHJhbnNmZXIgZnJvbSB0aGUgb3JpZ2luKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbU9yaWdpbihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhZGRyZXNzIG9yaWdpbiA9IHR4Lm9yaWdpbjsKICAgICAgICBpZiAob3JpZ2luID09IDB4MCkgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKF90byA9PSAweDApIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4qLwogICAgICAgIGlmIChiYWxhbmNlT2Zbb3JpZ2luXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgIC8qIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCovCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldmVydCgpOyAgLyogQ2hlY2sgZm9yIG92ZXJmbG93cyovCiAgICAgICAgYmFsYW5jZU9mW29yaWdpbl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyKi8KICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudCovCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiovCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHJldmVydCgpOyAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7ICAvKiBDaGVjayBmb3Igb3ZlcmZsb3dzKi8KICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgICAvKiBDaGVjayBhbGxvd2FuY2UqLwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlciovCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQqLwogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9'.
	

]
