Class {
	#name : #SRTc19d40a3659520c11fba9d37599cd945eb6f9fad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc19d40a3659520c11fba9d37599cd945eb6f9fad >> base64 [
	^ ''.
	

]
