Class {
	#name : #SRTcdf89e7f44fcc837630fb4a10387ca81eba6932a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcdf89e7f44fcc837630fb4a10387ca81eba6932a >> base64 [
	^ ''.
	

]
