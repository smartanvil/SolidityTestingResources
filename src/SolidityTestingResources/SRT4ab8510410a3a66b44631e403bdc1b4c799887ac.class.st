Class {
	#name : #SRT4ab8510410a3a66b44631e403bdc1b4c799887ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ab8510410a3a66b44631e403bdc1b4c799887ac >> base64 [
	^ ''.
	

]
