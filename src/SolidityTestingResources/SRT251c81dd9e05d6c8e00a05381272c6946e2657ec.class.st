Class {
	#name : #SRT251c81dd9e05d6c8e00a05381272c6946e2657ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT251c81dd9e05d6c8e00a05381272c6946e2657ec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE1OwoKLyoqCipsaWJyYXJ5IG5hbWUgOiBTYWZlTWF0aAoqcHVycG9zZSA6IGJlIHRoZSBsaWJyYXJ5IGZvciB0aGUgc21hcnQgY29udHJhY3QgZm9yIHRoZSBzd2FwIGJldHdlZW4gdGhlIGdvZHogYW5kIGV0aGVyCipnb2FsIDogdG8gYWNoaWV2ZSB0aGUgc2VjdXJlIGJhc2ljIG1hdGggb3BlcmF0aW9ucwoqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLypmdW5jdGlvbiBuYW1lIDogbXVsKi8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBtdWx0aXBsaWNhdGUqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAvKmFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7Ki8KICAgIHJldHVybiBjOwogIH0KCiAgLypmdW5jdGlvbiBuYW1lIDogZGl2Ki8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBkaXZpc2lvbiovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KCiAgLypmdW5jdGlvbiBuYW1lIDogc3ViKi8KICAvKnB1cnBvc2UgOiBiZSB0aGUgZnVuY2lvbiBmb3Igc2FmZSBzdWJzdHJhY3QqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKmZ1bmN0aW9uIG5hbWUgOiBhZGQqLwogIC8qcHVycG9zZSA6IGJlIHRoZSBmdW5jaW9uIGZvciBzYWZlIHN1bSovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Ci8qKgoqY29udHJhY3QgbmFtZSA6IHRva2VuUmVjaXBpZW50CiovCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0KCgovKioKKmNvbnRyYWN0IG5hbWUgOiBUb2tlbgoqLwpjb250cmFjdCBUb2tlbiB7CiAgICAvKnVzaW5nIHRoZSBzZWN1cmUgbWF0aCBsaWJyYXJ5IGZvciBiYXNpYyBtYXRoIG9wZXJhdGlvbnMqLwogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnRFNDUy5HT0RaLlRPS0VOJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFRva2VuKAogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwKICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICAgICApIHsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgIC8qIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zKi8KICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFVwZGF0ZSB0b3RhbCBzdXBwbHkqLwogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzKi8KICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzKi8KICAgICAgICBkZWNpbWFscyA9IGRlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcyovCiAgICB9CgogICAgLyogU2VuZCBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgaWYgKF90byA9PSAweDApIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQqLwogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHJldmVydCgpOyAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8qIENoZWNrIGZvciBvdmVyZmxvd3MqLwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIqLwogICAgICAgIGJhbGFuY2VPZltfdG9dID0gYmFsYW5jZU9mW190b10uYWRkKF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50Ki8KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlKi8KICAgIH0KCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb21tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qIEEgY29udHJhY3QgYXR0ZW1wdHMgdG8gZ2V0IHRoZSBjb2lucyBidXQgdHJhbnNmZXIgZnJvbSB0aGUgb3JpZ2luKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbU9yaWdpbihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhZGRyZXNzIG9yaWdpbiA9IHR4Lm9yaWdpbjsKICAgICAgICBpZiAob3JpZ2luID09IDB4MCkgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKF90byA9PSAweDApIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4qLwogICAgICAgIGlmIChiYWxhbmNlT2Zbb3JpZ2luXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgIC8qIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCovCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldmVydCgpOyAgLyogQ2hlY2sgZm9yIG92ZXJmbG93cyovCiAgICAgICAgYmFsYW5jZU9mW29yaWdpbl0gPSBiYWxhbmNlT2Zbb3JpZ2luXS5zdWIoX3ZhbHVlKTsgICAgICAgLyogU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyKi8KICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOyAgICAgICAgICAgICAvKiBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudCovCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiovCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHJldmVydCgpOyAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7ICAvKiBDaGVjayBmb3Igb3ZlcmZsb3dzKi8KICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgICAvKiBDaGVjayBhbGxvd2FuY2UqLwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gPSBiYWxhbmNlT2ZbX2Zyb21dLnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlciovCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50Ki8KICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQ=='.
	

]
