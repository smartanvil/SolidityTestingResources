Class {
	#name : #SRT0b9cab17883e721888c22b2bcb5a00f91a711989,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0b9cab17883e721888c22b2bcb5a00f91a711989 >> base64 [
	^ ''.
	

]
