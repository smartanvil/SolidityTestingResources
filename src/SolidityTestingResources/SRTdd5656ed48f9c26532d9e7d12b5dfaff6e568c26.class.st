Class {
	#name : #SRTdd5656ed48f9c26532d9e7d12b5dfaff6e568c26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd5656ed48f9c26532d9e7d12b5dfaff6e568c26 >> base64 [
	^ ''.
	

]
