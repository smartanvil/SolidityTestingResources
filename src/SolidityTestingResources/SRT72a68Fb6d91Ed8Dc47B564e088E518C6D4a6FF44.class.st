Class {
	#name : #SRT72a68Fb6d91Ed8Dc47B564e088E518C6D4a6FF44,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT72a68Fb6d91Ed8Dc47B564e088E518C6D4a6FF44 >> base64 [
	^ ''.
	

]
