Class {
	#name : #SRT0d5516103752b3954d95621f470a8261151da2e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d5516103752b3954d95621f470a8261151da2e4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOyBfOyB9CgogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICBldmVudCBQYXVzZSgpOwogICAgZXZlbnQgVW5wYXVzZSgpOwoKICAgIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7IHJlcXVpcmUoIXBhdXNlZCk7IF87IH0KICAgIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7IHJlcXVpcmUocGF1c2VkKTsgXzsgfQoKICAgIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgUGF1c2UoKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgICAgICBVbnBhdXNlKCk7CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CgogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CgogICAgICAgIGlmKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICAgICAgfQoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9Cgpjb250cmFjdCBCdXJuYWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKCiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKCiAgICAgICAgQnVybihidXJuZXIsIF92YWx1ZSk7CiAgICB9Cn0KCmNvbnRyYWN0IE1pbnRhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogICAgbW9kaWZpZXIgY2FuTWludCgpIHsgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsgXzsgfQoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwoKICAgICAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwoKICAgICAgICBNaW50RmluaXNoZWQoKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8qCiAgICBJQ08gQmxvb216ZWQgVG9rZW4KICAgIC0g0K3QvNC40YHRgdC40Y8g0YLQvtC60LXQvdC+0LIg0L7Qs9GA0LDQvdC40YfQtdC90LAgKNCy0YHQtdCz0L4gMTAwIDAwMCAwMDAg0YLQvtC60LXQvdC+0LIsINGC0L7QutC10L3RiyDQstGL0L/Rg9GB0LrQsNGO0YLRgdGPINCy0L4g0LLRgNC10LzRjyBJQ08g0LggUHJlSUNPKQogICAgLSDQptC10L3QsCDRgtC+0LrQtdC90LAg0YTQuNC60YHQuNGA0L7QstCw0L3QvdCw0Y86IDEgRVRIID0gNTAwINGC0L7QutC10L3QvtCyCiAgICAtINCi0L7QutC10L3QvtCyINC90LAg0L/RgNC+0LTQsNC20YMgNTAgMDAwIDAwMCAoNTAlKQogICAgLSA1MCAwMDAgMDAwICg1MCUpINGC0L7QutC10L3QvtCyINC/0LXRgNC10LTQsNC10YLRgdGPINC60L7QvNCw0L3QtNC1INCy0L4g0LLRgNC10LzRjyDRgdC+0LfQtNCw0L3QuNGPINGC0L7QutC10L3QsAogICAgLSDQkdC+0L3Rg9GB0Ysg0L3QsCBQcmVJQ086ICs1MCUg0YLQvtC60LXQvdC+0LIKICAgIC0g0JHQvtC90YPRgdGLINC90LAgSUNPOiArMjUlINC/0LXRgNCy0YvQuSDQtNC10L3RjCwgKzIwJSDRgSAyINC/0L4gMyDQtNC10L3RjCwgKzE1JSDRgSA0INC/0L4gNSDQtNC10L3RjCwgKzEwJSDRgSA2INC/0L4gNyDQtNC10L3RjCwgKzclINGBIDgg0L/QviA5INC00LXQvdGMLCArNSUg0YEgMTAg0L/QviAxMSDQtNC10L3RjAogICAgLSDQkdC+0L3Rg9GB0Ysg0L3QsCBJQ086ICszJSDQv9GA0Lgg0L/QvtC60YPQv9C60LUgPj0gMyAwMDAg0YLQvtC60LXQvdC+0LIsICs1JSDQv9GA0Lgg0L/QvtC60YPQv9C60LUgPiA1IDAwMCDRgtC+0LrQtdC90L7QsiwgKzclINC/0YDQuCDQv9C+0LrRg9C/0LrQtSA+IDEwIDAwMCDRgtC+0LrQtdC90L7QsiwgKzEwJSDQv9GA0Lgg0L/QvtC60YPQv9C60LUgPiAxNSAwMDAg0YLQvtC60LXQvdC+0LIKICAgIC0g0JHQvtC90YPRgdGLINGA0LDRgdGH0LjRgtGL0LLQsNGO0YLRgdGPINC90LAg0L3QsNGH0LDQu9GM0L3Rg9GOINGB0YPQvNC80YMsINCx0L7QvdGD0YHRiyDRgdGD0LzQuNGA0YPRjtGC0YHRjwogICAgLSDQnNC40L3QuNC80LDQu9GM0L3QsNGPINC4INC80LDQutGB0LjQvNCw0LvRjNC90LDRjyDRgdGD0LzQvNCwINC/0L7QutGD0L/QutC4OiAwLjUgRVRIINC4IDEwMDAwIEVUSAogICAgLSDQodGA0LXQtNGB0YLQstCwINC+0YIg0L/QvtC60YPQv9C60Lgg0YLQvtC60LXQvdC+0LIg0L/QtdGA0LXQtNCw0Y7RgtGB0Y8g0LHQtdC90LXRhNC40YbQuNCw0YDRgwogICAgLSBDcm93ZHNhbGUg0L7Qs9GA0LDQvdC40YfQtdC9INC/0L4g0LLRgNC10LzQtdC90LgKICAgIC0g0JfQsNC60YDRi9GC0LjQtSBDcm93ZHNhbGUg0L/RgNC+0LjRgdGF0L7QtNC40YIg0YEg0L/QvtC80L7RidGM0Y4g0YTRg9C90LrRhtC40LggIndpdGhkcmF3KCkiLCDQvNC40L3RgtC40L3QsyDQt9Cw0LrRgNGL0LLQsNC10YLRgdGPLCDRg9C/0YDQsNCy0LvQtdC90LjQtSDRgtC+0LrQtdC90L7QvCDQv9C10YDQtdC00LDRjtGC0YHRjyDQsdC10L3QtdGE0LjRhtC40LDRgNGDCiovCmNvbnRyYWN0IFRva2VuIGlzIEJ1cm5hYmxlVG9rZW4sIE1pbnRhYmxlVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkJsb29temVkIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkJaVCI7CiAgICB1aW50MjU2IHB1YmxpYyBkZWNpbWFscyA9IDE4OwoKICAgIGZ1bmN0aW9uIFRva2VuKCkgewogICAgICAgIG1pbnQoMHgzYzY0Qjg2Y0VFNEU2MEVEZEE1MTc1MjFiNDZBYzc0MTM0NDQyMDU4LCA1MDAwMDAwMCAqIDEgZXRoZXIpOyAgICAgICAvLyBDb21tYW5kIG1pbnQKICAgIH0KfQoKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIFRva2VuIHB1YmxpYyB0b2tlbjsKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5ID0gMHg4NmZBQmZkQkI5QjVCRkRiZWMzOTc1YUVDZERlZTU0YjI4YkRlQTQ1OyAgICAgICAgLy8gQmVuZWZpY2lhcnkKICAgIGFkZHJlc3MgcHVibGljIG1hbmFnZXIgPSAweEQ5ZTRhOGZDYjQzNTdEZmQxNDg2MUJjOUU0MTcwZTQzQzE0MDYyQTQ7ICAgICAgICAgICAgLy8gTWFuYWdlcgoKICAgIHVpbnQgcHVibGljIGNvbGxlY3RlZFdlaTsKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQ7CgogICAgdWludCBwdWJsaWMgcHJpY2VUb2tlbldlaSA9IDEgZXRoZXIgLyA1MDA7CgogICAgdWludCBwdWJsaWMgcGlUb2tlbnNGb3JTYWxlID0gNTAwMDAwMCAqIDEgZXRoZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgdG9rZW5zIGZvciBzYWxlIG9uIFByZUlDTwogICAgdWludCBwdWJsaWMgdG9rZW5zRm9yU2FsZSA9IDUwMDAwMDAwICogMSBldGhlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgdG9rZW5zIGZvciBzYWxlCgogICAgdWludCBwdWJsaWMgcGlTdGFydFRpbWUgPSAxNTEzNjc0MDAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEYXRlIHN0YXJ0ICAgMTkuMTIuMjAxNyAxMjowMCArMDMKICAgIHVpbnQgcHVibGljIHBpRW5kVGltZSA9IDE1MTQyNzg4MDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGF0ZSBlbmQgICAgIDI2LjEyLjIwMTcgMTI6MDAgKzAzCiAgICB1aW50IHB1YmxpYyBzdGFydFRpbWUgPSAxNTE2MTc5NjAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERhdGUgc3RhcnQgICAxNy4wMS4yMDE4IDEyOjAwICswMwogICAgdWludCBwdWJsaWMgZW5kVGltZSA9IDE1MTg4NTgwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEYXRlIGVuZCAgICAgMTcuMDIuMjAxOCAxMjowMCArMDMKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUZpbmlzaGVkID0gZmFsc2U7CgogICAgZXZlbnQgTmV3Q29udHJpYnV0aW9uKGFkZHJlc3MgaW5kZXhlZCBob2xkZXIsIHVpbnQyNTYgdG9rZW5BbW91bnQsIHVpbnQyNTYgZXRoZXJBbW91bnQpOwogICAgZXZlbnQgV2l0aGRyYXcoKTsKCiAgICBtb2RpZmllciBvbmx5TWFuYWdlcigpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IG1hbmFnZXIpOyBfOyB9CgogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKCkgewogICAgICAgIHRva2VuID0gbmV3IFRva2VuKCk7CiAgICB9CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBwdXJjaGFzZSgpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBwdXJjaGFzZSgpIHdoZW5Ob3RQYXVzZWQgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZSghY3Jvd2RzYWxlRmluaXNoZWQpOwogICAgICAgIHJlcXVpcmUoKG5vdyA+PSBwaVN0YXJ0VGltZSAmJiBub3cgPCBwaUVuZFRpbWUgJiYgdG9rZW5zU29sZCA8IHBpVG9rZW5zRm9yU2FsZSkgfHwgKG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDwgZW5kVGltZSkpOwogICAgICAgIHJlcXVpcmUodG9rZW5zU29sZCA8IHRva2Vuc0ZvclNhbGUpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDAuNSAqIDEgZXRoZXIgJiYgbXNnLnZhbHVlIDw9IDEwMDAwICogMSBldGhlcik7CgogICAgICAgIHVpbnQgc3VtID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQgYW1vdW50ID0gc3VtLmRpdihwcmljZVRva2VuV2VpKS5tdWwoMSBldGhlcik7CiAgICAgICAgdWludCByZXRTdW0gPSAwOwoKICAgICAgICAvLyBJQ08KICAgICAgICBpZihub3cgPiBwaUVuZFRpbWUpIHsKICAgICAgICAgICAgdWludCBib251cyA9IDA7CgogICAgICAgICAgICAvLyBEYXkgYm9udXMKICAgICAgICAgICAgaWYodG9rZW5zU29sZC5hZGQoYW1vdW50KSA8IHBpVG9rZW5zRm9yU2FsZSkgewogICAgICAgICAgICAgICAgYm9udXMuYWRkKAogICAgICAgICAgICAgICAgICAgIG5vdyA8IHN0YXJ0VGltZSArIDEgZGF5cyA/IDI1CiAgICAgICAgICAgICAgICAgICAgICAgIDogKG5vdyA8IHN0YXJ0VGltZSArIDMgZGF5cyA/IDIwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChub3cgPCBzdGFydFRpbWUgKyA1IGRheXMgPyAxNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKG5vdyA8IHN0YXJ0VGltZSArIDcgZGF5cyA/IDEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKG5vdyA8IHN0YXJ0VGltZSArIDkgZGF5cyA/IDcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKG5vdyA8IHN0YXJ0VGltZSArIDExIGRheXMgPyA1IDogMAogICAgICAgICAgICAgICAgKSkpKSkpOwoKICAgICAgICAgICAgICAgIC8vIEFtb3VudCBib251cwogICAgICAgICAgICAgICAgaWYoYW1vdW50ID49IDMwMDAgKiAxIGV0aGVyKSB7CiAgICAgICAgICAgICAgICAgICAgYm9udXMuYWRkKAogICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgPiAxNTAwMCAqIDEgZXRoZXIgPyAxMCA6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFtb3VudCA+IDEwMDAwICogMSBldGhlciA/IDcgOiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYW1vdW50ID4gNTAwMCAqIDEgZXRoZXIgPyA1IDogMwogICAgICAgICAgICAgICAgICAgICkpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoYm9udXMgPiAwKSB7CiAgICAgICAgICAgICAgICBhbW91bnQgPSBhbW91bnQuYWRkKGFtb3VudC5kaXYoMTAwKS5tdWwoYm9udXMpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYodG9rZW5zU29sZC5hZGQoYW1vdW50KSA+IHBpVG9rZW5zRm9yU2FsZSkgewogICAgICAgICAgICAgICAgdWludCByZXRBbW91bnQgPSB0b2tlbnNTb2xkLmFkZChhbW91bnQpLnN1YihwaVRva2Vuc0ZvclNhbGUpOwogICAgICAgICAgICAgICAgcmV0U3VtID0gcmV0QW1vdW50Lm11bChwcmljZSkuZGl2KDEgZXRoZXIpOwoKICAgICAgICAgICAgICAgIGFtb3VudCA9IGFtb3VudC5zdWIocmV0QW1vdW50KTsKICAgICAgICAgICAgICAgIHN1bSA9IHN1bS5zdWIocmV0U3VtKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBQcmVJQ08KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdWludCBwcmljZSA9IHByaWNlVG9rZW5XZWkubXVsKDEwMCkuZGl2KDE1MCk7CiAgICAgICAgICAgIGFtb3VudCA9IHN1bS5kaXYocHJpY2UpLm11bCgxIGV0aGVyKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKHRva2Vuc1NvbGQuYWRkKGFtb3VudCkgPiBwaVRva2Vuc0ZvclNhbGUpIHsKICAgICAgICAgICAgICAgIHJldEFtb3VudCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCkuc3ViKHBpVG9rZW5zRm9yU2FsZSk7CiAgICAgICAgICAgICAgICByZXRTdW0gPSByZXRBbW91bnQubXVsKHByaWNlKS5kaXYoMSBldGhlcik7CgogICAgICAgICAgICAgICAgYW1vdW50ID0gYW1vdW50LnN1YihyZXRBbW91bnQpOwogICAgICAgICAgICAgICAgc3VtID0gc3VtLnN1YihyZXRTdW0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQoYW1vdW50KTsKICAgICAgICBjb2xsZWN0ZWRXZWkgPSBjb2xsZWN0ZWRXZWkuYWRkKHN1bSk7CgogICAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKHN1bSk7CiAgICAgICAgdG9rZW4ubWludChtc2cuc2VuZGVyLCBhbW91bnQpOwoKICAgICAgICBpZihyZXRTdW0gPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIocmV0U3VtKTsKICAgICAgICB9CgogICAgICAgIE5ld0NvbnRyaWJ1dGlvbihtc2cuc2VuZGVyLCBhbW91bnQsIHN1bSk7CiAgICB9CgogICAgZnVuY3Rpb24gZXh0ZXJuYWxQdXJjaGFzZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHdoZW5Ob3RQYXVzZWQgb25seU1hbmFnZXIgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICByZXF1aXJlKHRva2Vuc1NvbGQgPCB0b2tlbnNGb3JTYWxlKTsKCiAgICAgICAgdWludCBhbW91bnQgPSBfdmFsdWUubXVsKDEgZXRoZXIpOwoKICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQoYW1vdW50KTsKCiAgICAgICAgdG9rZW4ubWludChfdG8sIGFtb3VudCk7CgogICAgICAgIE5ld0NvbnRyaWJ1dGlvbihfdG8sIGFtb3VudCwgMCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICAKICAgICAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAoYmVuZWZpY2lhcnkpOwoKICAgICAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CgogICAgICAgIFdpdGhkcmF3KCk7CiAgICB9Cn0='.
	

]
