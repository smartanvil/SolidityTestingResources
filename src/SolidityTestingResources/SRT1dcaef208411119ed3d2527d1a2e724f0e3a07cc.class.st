Class {
	#name : #SRT1dcaef208411119ed3d2527d1a2e724f0e3a07cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1dcaef208411119ed3d2527d1a2e724f0e3a07cc >> base64 [
	^ ''.
	

]
