Class {
	#name : #SRTcEB279c001177101D4736D1fb2bA6133D0EA9Fde,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcEB279c001177101D4736D1fb2bA6133D0EA9Fde >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCmNvbnRyYWN0IERpZ2lQdWxzZVRva2VuIHsKCgkvLyBUb2tlbiBkYXRhIGZvciBFUkMyMAogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJEaWdpUHVsc2UgVG9rZW4iOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkRHVCI7CiAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gODsKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogIC8vIE1heCBhdmFpbGFibGUgc3VwcGx5IGlzIDE2NTgxNjMzICogMWU4IChpbmNsLiAxMDAwMDAgcHJlc2FsZSBhbmQgMiUgYm91bnRpZXMpCiAgdWludCBjb25zdGFudCB0b2tlblN1cHBseSA9IDE2MTI1MDAwICogMWU4OwogIHVpbnQ4IGNvbnN0YW50IGRndFJhdGlvVG9FdGggPSAyNTA7CiAgdWludCBjb25zdGFudCByYWlzZWRJblByZXNhbGUgPSA5NjE3MzUzNDMxMjU7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBldGhCYWxhbmNlT2Y7CiAgYWRkcmVzcyBvd25lcjsKCiAgLy8gRm9yIExJVkUKICB1aW50IGNvbnN0YW50IHN0YXJ0T2ZJY28gPSAxNTAxODMzNjAwOyAvLyAwOC8wNC8yMDE3IEAgODowMGFtIChVVEMpCiAgdWludCBjb25zdGFudCBlbmRPZkljbyA9IDE1MDQyMjM5OTk7IC8vIDA4LzMxLzIwMTcgQCAyMzo1OXBtIChVVEMpCgogIHVpbnQgYWxsb2NhdGVkU3VwcGx5ID0gMDsKICBib29sIGljb0ZhaWxlZCA9IGZhbHNlOwogIGJvb2wgaWNvRnVsZmlsbGVkID0gZmFsc2U7CgogIC8vIEdlbmVyYXRlIHB1YmxpYyBldmVudCB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IFJlZnVuZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgLy8gTm8gc3BlY2lhbCBhY3Rpb25zIGFyZSByZXF1aXJlZCB1cG9uIGNyZWF0aW9uLCBzbyBpbml0aWFsaXNlciBpcyBsZWZ0IGVtcHR5CiAgZnVuY3Rpb24gRGlnaVB1bHNlVG9rZW4oKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvLyBGb3IgZnV0dXJlIHRyYW5zZmVycyBvZiBER1QKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICByZXF1aXJlIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICByZXF1aXJlIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VPZltfdG9dKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwoKICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAoKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8vIGxvZ2ljIHdoaWNoIGNvbnZlcnRzIGV0aCB0byBkZ3QgYW5kIHN0b3JlcyBpbiBhbGxvY2F0ZWRTdXBwbHkKICBmdW5jdGlvbigpIHBheWFibGUgZXh0ZXJuYWwgewogICAgLy8gQWJvcnQgaWYgY3Jvd2RmdW5kaW5nIGhhcyByZWFjaGVkIGFuIGVuZAogICAgcmVxdWlyZSAobm93ID4gc3RhcnRPZkljbyk7CiAgICByZXF1aXJlIChub3cgPCBlbmRPZkljbyk7CiAgICByZXF1aXJlICghaWNvRnVsZmlsbGVkKTsKCiAgICAvLyBEbyBub3QgYWxsb3cgY3JlYXRpbmcgMCB0b2tlbnMKICAgIHJlcXVpcmUgKG1zZy52YWx1ZSAhPSAwKTsKCiAgICAvLyBNdXN0IGFkanVzdCBudW1iZXIgb2YgZGVjaW1hbHMsIHNvIHRoZSByYXRpbyB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQKICAgIC8vIEZyb20gRVRIIDE2IGRlY2ltYWxzIHRvIERHVCA4IGRlY2ltYWxzCiAgICB1aW50MjU2IGRndEFtb3VudCA9IG1zZy52YWx1ZSAvIDFlMTAgKiBkZ3RSYXRpb1RvRXRoOwogICAgcmVxdWlyZSAoZGd0QW1vdW50IDwgKHRva2VuU3VwcGx5IC0gYWxsb2NhdGVkU3VwcGx5KSk7CgogICAgLy8gVGllciBib251cyBjYWxjdWxhdGlvbnMKICAgIHVpbnQyNTYgZGd0V2l0aEJvbnVzOwogICAgdWludDI1NiBhcHBsaWNhYmxlX2Zvcl90aWVyOwoKICAgIGZvciAodWludDggaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgICAgLy8gRWFjaCB0aWVyIGhhcyBzYW1lIGFtb3VudCBvZiBER1QKICAgICAgdWludDI1NiB0aWVyX2Ftb3VudCA9IDMyNzUwMDAgKiAxZTg7CiAgICAgIC8vIEV2ZXJ5IG5leHQgdGllciBoYXMgNSUgbGVzcyBib251cyBwb29sCiAgICAgIHVpbnQ4IHRpZXJfYm9udXMgPSAxMTUgLSAoaSAqIDUpOwogICAgICBhcHBsaWNhYmxlX2Zvcl90aWVyICs9IHRpZXJfYW1vdW50OwoKICAgICAgLy8gU2tpcHBpbmcgb3ZlciB0aGlzIHRpZXIsIHNpbmNlIGl0IGlzIGZpbGxlZCBhbHJlYWR5CiAgICAgIGlmIChhbGxvY2F0ZWRTdXBwbHkgPj0gYXBwbGljYWJsZV9mb3JfdGllcikgY29udGludWU7CgogICAgICAvLyBSZWFjaGVkIHRoaXMgdGllciB3aXRoIDAgYW1vdW50LCBzbyBhYm9ydAogICAgICBpZiAoZGd0QW1vdW50ID09IDApIGJyZWFrOwoKICAgICAgLy8gQ2FzZXMgd2hlbiBwYXJ0IG9mIHRoZSBjb250cmlidXRpb24gaXMgY292ZXJpbmcgdHdvIHRpZXJzCiAgICAgIGludDI1NiBkaWZmID0gaW50KGFsbG9jYXRlZFN1cHBseSkgKyBpbnQoZGd0QW1vdW50IC0gYXBwbGljYWJsZV9mb3JfdGllcik7CgogICAgICBpZiAoZGlmZiA+IDApIHsKICAgICAgICAvLyBhZGQgYm9udXMgZm9yIGN1cnJlbnQgdGllciBhbmQgc3RyaXAgdGhlIGRpZmZlcmVuY2UgZm9yCiAgICAgICAgLy8gY2FsY3VsYXRpb24gaW4gdGhlIG5leHQgdGllcgogICAgICAgIGRndFdpdGhCb251cyArPSAodWludChpbnQoZGd0QW1vdW50KSAtIGRpZmYpICogdGllcl9ib251cyAvIDEwMCk7CiAgICAgICAgZGd0QW1vdW50ID0gdWludChkaWZmKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZ3RXaXRoQm9udXMgKz0gKGRndEFtb3VudCAqIHRpZXJfYm9udXMgLyAxMDApOwogICAgICAgIGRndEFtb3VudCA9IDA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBJbmNyZWFzZSBzdXBwbHkKICAgIGFsbG9jYXRlZFN1cHBseSArPSBkZ3RXaXRoQm9udXM7CgogICAgLy8gQXNzaWduIG5ldyB0b2tlbnMgdG8gdGhlIHNlbmRlciBhbmQgbG9nIHRva2VuIGNyZWF0aW9uIGV2ZW50CiAgICBldGhCYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGRndFdpdGhCb251czsKICAgIFRyYW5zZmVyKDAsIG1zZy5zZW5kZXIsIGRndFdpdGhCb251cyk7CiAgfQoKICAvLyBEZWNpZGUgdGhlIHN0YXRlIG9mIHRoZSBwcm9qZWN0CiAgZnVuY3Rpb24gZmluYWxpc2UoKSBleHRlcm5hbCB7CiAgICByZXF1aXJlICghaWNvRmFpbGVkKTsKICAgIHJlcXVpcmUgKCFpY29GdWxmaWxsZWQpOwogICAgcmVxdWlyZSAobm93ID4gZW5kT2ZJY28gfHwgYWxsb2NhdGVkU3VwcGx5ID49IHRva2VuU3VwcGx5KTsKCiAgICAvLyBNaW4gY2FwIGlzIDgwMDAgRVRICiAgICBpZiAodGhpcy5iYWxhbmNlIDwgODAwMCBldGhlcikgewogICAgICBpY29GYWlsZWQgPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgc2V0UHJlU2FsZUFtb3VudHMoKTsKICAgICAgYWxsb2NhdGVCb3VudHlUb2tlbnMoKTsKICAgICAgaWNvRnVsZmlsbGVkID0gdHJ1ZTsKICAgIH0KICB9CgogIC8vIElmIHRoZSBnb2FsIGlzIG5vdCByZWFjaGVkIHRpbGwgdGhlIGVuZCBvZiB0aGUgSUNPCiAgLy8gYWxsb3cgcmVmdW5kcwogIGZ1bmN0aW9uIHJlZnVuZEV0aGVyKCkgZXh0ZXJuYWwgewogIAlyZXF1aXJlIChpY29GYWlsZWQpOwoKICAgIHZhciBldGhWYWx1ZSA9IGV0aEJhbGFuY2VPZlttc2cuc2VuZGVyXTsKICAgIHJlcXVpcmUgKGV0aFZhbHVlICE9IDApOwogICAgZXRoQmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsKCiAgICAvLyBSZWZ1bmQgb3JpZ2luYWwgRXRoZXIgYW1vdW50CiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV0aFZhbHVlKTsKICAgIFJlZnVuZChtc2cuc2VuZGVyLCBldGhWYWx1ZSk7CiAgfQoKICAvLyBSZXR1cm5zIGJhbGFuY2UgcmFpc2VkIGluIEVUSCBmcm9tIHNwZWNpZmljIGFkZHJlc3MKCWZ1bmN0aW9uIGdldEJhbGFuY2VJbkV0aChhZGRyZXNzIGFkZHIpIHJldHVybnModWludCl7CgkJcmV0dXJuIGV0aEJhbGFuY2VPZlthZGRyXTsKCX0KCiAgLy8gUmV0dXJucyBiYWxhbmNlIHJhaXNlZCBpbiBER1QgZnJvbSBzcGVjaWZpYyBhZGRyZXNzCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlT2ZbX293bmVyXTsKICB9CgoJLy8gR2V0IHJlbWFpbmluZyBzdXBwbHkgb2YgREdUCglmdW5jdGlvbiBnZXRSZW1haW5pbmdTdXBwbHkoKSByZXR1cm5zKHVpbnQpIHsKCQlyZXR1cm4gdG9rZW5TdXBwbHkgLSBhbGxvY2F0ZWRTdXBwbHk7Cgl9CgogIC8vIEdldCByYWlzZWQgYW1vdW50IGR1cmluZyBJQ08KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHJldHVybnMgKHVpbnQgdG90YWxTdXBwbHkpIHsKICAgIHJldHVybiBhbGxvY2F0ZWRTdXBwbHk7CiAgfQoKICAvLyBVcG9uIHN1Y2Nlc3NmdWxsIElDTwogIC8vIEFsbG93IG93bmVyIHRvIHdpdGhkcmF3IGZ1bmRzCiAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kc1RvT3duZXIodWludDI1NiBfYW1vdW50KSB7CiAgICByZXF1aXJlIChpY29GdWxmaWxsZWQpOwogICAgcmVxdWlyZSAodGhpcy5iYWxhbmNlID49IF9hbW91bnQpOwoKICAgIG93bmVyLnRyYW5zZmVyKF9hbW91bnQpOwogIH0KCiAgLy8gUmFpc2VkIGR1cmluZyBQcmUtc2FsZQogIC8vIFNpbmNlIHNvbWUgb2YgdGhlIHdhbGxldHMgaW4gcHJlLXNhbGUgd2VyZSBvbiBleGNoYW5nZXMsIHdlIHRyYW5zZmVyIHRva2VucwogIC8vIHRvIGFjY291bnQgd2hpY2ggd2lsbCBzZW5kIHRva2VucyBtYW51YWxseSBvdXQKCWZ1bmN0aW9uIHNldFByZVNhbGVBbW91bnRzKCkgcHJpdmF0ZSB7CiAgICBiYWxhbmNlT2ZbMHg4Nzc2QTZmQTkyMmU2NWVmY0VhMjM3MTY5MkZFRkU0YUI3YzkzM0FCXSArPSByYWlzZWRJblByZXNhbGU7CiAgICBhbGxvY2F0ZWRTdXBwbHkgKz0gcmFpc2VkSW5QcmVzYWxlOwogICAgVHJhbnNmZXIoMCwgMHg4Nzc2QTZmQTkyMmU2NWVmY0VhMjM3MTY5MkZFRkU0YUI3YzkzM0FCLCByYWlzZWRJblByZXNhbGUpOwoJfQoKCS8vIEJvdW50eSBwb29sIG1ha2VzIHVwIDIlIGZyb20gYWxsIHRva2VucyBib3VnaHQKCWZ1bmN0aW9uIGFsbG9jYXRlQm91bnR5VG9rZW5zKCkgcHJpdmF0ZSB7CiAgICB1aW50MjU2IGJvdW50eUFtb3VudCA9IGFsbG9jYXRlZFN1cHBseSAqIDEwMCAvIDk4ICogMiAvIDEwMDsKCQliYWxhbmNlT2ZbMHg2NjNGOThlOWMzN0I5YmJBNDYwZDRkODBjYTQ4ZWYwMzllQUU0MDUyXSArPSBib3VudHlBbW91bnQ7CiAgICBhbGxvY2F0ZWRTdXBwbHkgKz0gYm91bnR5QW1vdW50OwogICAgVHJhbnNmZXIoMCwgMHg2NjNGOThlOWMzN0I5YmJBNDYwZDRkODBjYTQ4ZWYwMzllQUU0MDUyLCBib3VudHlBbW91bnQpOwoJfQp9'.
	

]
