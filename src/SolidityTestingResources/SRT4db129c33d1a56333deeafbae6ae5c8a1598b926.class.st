Class {
	#name : #SRT4db129c33d1a56333deeafbae6ae5c8a1598b926,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4db129c33d1a56333deeafbae6ae5c8a1598b926 >> base64 [
	^ ''.
	

]
