Class {
	#name : #SRTdfbfd64726b1b178ef8204ae4992f641f31c8248,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfbfd64726b1b178ef8204ae4992f641f31c8248 >> base64 [
	^ ''.
	

]
