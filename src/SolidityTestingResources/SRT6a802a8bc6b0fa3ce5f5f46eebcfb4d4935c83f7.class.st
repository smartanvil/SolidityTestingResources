Class {
	#name : #SRT6a802a8bc6b0fa3ce5f5f46eebcfb4d4935c83f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6a802a8bc6b0fa3ce5f5f46eebcfb4d4935c83f7 >> base64 [
	^ ''.
	

]
