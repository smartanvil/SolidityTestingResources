Class {
	#name : #SRTfae9cd03c11e15cf611fd935bd66026fe6611d39,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfae9cd03c11e15cf611fd935bd66026fe6611d39 >> base64 [
	^ ''.
	

]
