Class {
	#name : #SRTa6925e30ff46f82f1170d59c516cda1a82a51625,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6925e30ff46f82f1170d59c516cda1a82a51625 >> base64 [
	^ ''.
	

]
