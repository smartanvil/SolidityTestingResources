Class {
	#name : #SRT25d3b1550e518ba8d7581cad811285e005902faa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT25d3b1550e518ba8d7581cad811285e005902faa >> base64 [
	^ ''.
	

]
