Class {
	#name : #SRTBdb0B3f3b4c154f55006BA428790dCB19391a7E8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTBdb0B3f3b4c154f55006BA428790dCB19391a7E8 >> base64 [
	^ ''.
	

]
