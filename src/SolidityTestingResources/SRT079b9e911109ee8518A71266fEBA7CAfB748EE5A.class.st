Class {
	#name : #SRT079b9e911109ee8518A71266fEBA7CAfB748EE5A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT079b9e911109ee8518A71266fEBA7CAfB748EE5A >> base64 [
	^ ''.
	

]
