Class {
	#name : #SRTf0a924661b0263e5ce12756d07f45b8668c53380,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf0a924661b0263e5ce12756d07f45b8668c53380 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgogLy8vIEB0aXRsZSBTYWZlTWF0aCBjb250cmFjdCAtIG1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKIC8vLyBAYXV0aG9yIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iN2QxOTE4MGIzZDBlMTAxYzBmMDkxZTEyMTMwOTBmMWMxZTA5MTgxYzEwNTMxZTEyMTAiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+CmNvbnRyYWN0IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiID4gMCk7CiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIHJlcXVpcmUoYXNzZXJ0aW9uKTsgIAogIH0KfQoKIC8vLyBAdGl0bGUgT3duYWJsZSBjb250cmFjdCAtIGJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lcgogLy8vIEBhdXRob3IgPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI0MDI0MjUzNjAwMzMyZDIxMzIzNDIzMmYyZTM0MzIyMTIzMzQyNTIxMmQ2ZTIzMmYyZCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOyAgCiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQp9CgoKLy8vIEB0aXRsZSBIYWx0YWJsZSBjb250cmFjdCAtIGFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCi8vLyBAYXV0aG9yIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMDg2YzZkN2U0ODdiNjU2OTdhN2M2YjY3NjY3YzdhNjk2YjdjNmQ2OTY1MjY2YjY3NjUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+Ci8vLyBPcmlnaW5hbGx5IGVudmlzaW9uZWQgaW4gRmlyc3RCbG9vZCBJQ08gY29udHJhY3QuCmNvbnRyYWN0IEhhbHRhYmxlIGlzIE93bmFibGUgewogIGJvb2wgcHVibGljIGhhbHRlZDsKCiAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoIWhhbHRlZCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgIHJlcXVpcmUoaGFsdGVkKTsgICAgICAgCiAgICBfOwogIH0KCiAgLy8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW1lcmdlbmN5LCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgZnVuY3Rpb24gaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICBoYWx0ZWQgPSB0cnVlOwogIH0KCiAgLy8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGhhbHRlZCA9IGZhbHNlOwogIH0KfQoKIC8vLyBAdGl0bGUgS2lsbGFibGUgY29udHJhY3QgLSBiYXNlIGNvbnRyYWN0IHRoYXQgY2FuIGJlIGtpbGxlZCBieSBvd25lci4gQWxsIGZ1bmRzIGluIGNvbnRyYWN0IHdpbGwgYmUgc2VudCB0byB0aGUgb3duZXIuCiAvLy8gQGF1dGhvciA8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjFkNzk3ODZiNWQ2ZTcwN2M2ZjY5N2U3MjczNjk2ZjdjN2U2OTc4N2M3MDMzN2U3MjcwIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPgpjb250cmFjdCBLaWxsYWJsZSBpcyBPd25hYmxlIHsKICBmdW5jdGlvbiBraWxsKCkgb25seU93bmVyIHsKICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgfQp9CgoKIC8vLyBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKIC8vLyBAYXV0aG9yIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMDc2MzYyNzE0Nzc0NmE2Njc1NzM2NDY4Njk3Mzc1NjY2NDczNjI2NjZhMjk2NDY4NmEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+CmNvbnRyYWN0IEVSQzIwIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKfQoKCi8vLyBAdGl0bGUgWmliZXJUb2tlbiBjb250cmFjdCAtIHN0YW5kYXJkIEVSQzIwIHRva2VuIHdpdGggU2hvcnQgSGFuZCBBdHRhY2sgYW5kIGFwcHJvdmUoKSByYWNlIGNvbmRpdGlvbiBtaXRpZ2F0aW9uLgovLy8gQGF1dGhvciA8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9Ijk2ZjJmM2UwZDZlNWZiZjdlNGUyZjVmOWY4ZTJlNGY3ZjVlMmYzZjdmYmI4ZjVmOWZiIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPgpjb250cmFjdCBaaWJlclRva2VuIGlzIFNhZmVNYXRoLCBFUkMyMCwgT3duYWJsZSB7CiBzdHJpbmcgcHVibGljIG5hbWUgPSAiWmliZXIgVG9rZW4iOwogc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiWkJSIjsKIHVpbnQgcHVibGljIGRlY2ltYWxzID0gODsKIHVpbnQgcHVibGljIGNvbnN0YW50IEZST1pFTl9UT0tFTlMgPSAxZTc7CiB1aW50IHB1YmxpYyBjb25zdGFudCBGUkVFWkVfUEVSSU9EID0gMSB5ZWFyczsKIHVpbnQgcHVibGljIGNyb3dkU2FsZU92ZXJUaW1lc3RhbXA7CgogLy8vIGNvbnRyYWN0IHRoYXQgaXMgYWxsb3dlZCB0byBjcmVhdGUgbmV3IHRva2VucyBhbmQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4KIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZUFnZW50OwogLy8vIEEgY3Jvd2RzYWxlIGNvbnRyYWN0IGNhbiByZWxlYXNlIHVzIHRvIHRoZSB3aWxkIGlmIElDTyBzdWNjZXNzLiBJZiBmYWxzZSB3ZSBhcmUgYXJlIGluIHRyYW5zZmVyIGxvY2sgdXAgcGVyaW9kLgogYm9vbCBwdWJsaWMgcmVsZWFzZWQgPSBmYWxzZTsKIC8vLyBhcHByb3ZlKCkgYWxsb3dhbmNlcwogbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwogLy8vIGhvbGRlciBiYWxhbmNlcwogbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKIC8vLyBAZGV2IExpbWl0IHRva2VuIHRyYW5zZmVyIHVudGlsIHRoZSBjcm93ZHNhbGUgaXMgb3Zlci4KIG1vZGlmaWVyIGNhblRyYW5zZmVyKCkgewogICBpZighcmVsZWFzZWQpIHsKICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQWdlbnQpOwogICB9CiAgIF87CiB9CgogbW9kaWZpZXIgY2hlY2tGcm96ZW5BbW91bnQoYWRkcmVzcyBzb3VyY2UsIHVpbnQgYW1vdW50KSB7CiAgIGlmIChzb3VyY2UgPT0gb3duZXIgJiYgbm93IDwgY3Jvd2RTYWxlT3ZlclRpbWVzdGFtcCArIEZSRUVaRV9QRVJJT0QpIHsKICAgICB2YXIgZnJvemVuVG9rZW5zID0gMTAgKiogZGVjaW1hbHMgKiBGUk9aRU5fVE9LRU5TOwogICAgIHJlcXVpcmUoc2FmZVN1YihiYWxhbmNlc1tvd25lcl0sIGFtb3VudCkgPiBmcm96ZW5Ub2tlbnMpOwogICB9CiAgIF87CiB9CgogLy8vIEBkZXYgVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHRva2VucyBoYXZlIGJlZW4gcmVsZWFzZXNkCiAvLy8gQHBhcmFtIF9yZWxlYXNlZCB0b2tlbiB0cmFuc2ZlciBhbmQgbWludCBzdGF0ZQogbW9kaWZpZXIgaW5SZWxlYXNlU3RhdGUoYm9vbCBfcmVsZWFzZWQpIHsKICAgcmVxdWlyZShfcmVsZWFzZWQgPT0gcmVsZWFzZWQpOwogICBfOwogfQoKIC8vLyBAZGV2IFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYnkgcmVsZWFzZSBhZ2VudC4KIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVBZ2VudCgpIHsKICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyb3dkc2FsZUFnZW50KTsKICAgXzsKIH0KCiAvLy8gQGRldiBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjayBodHRwOi8vdmVzc2VuZXMuY29tL3RoZS1lcmMyMC1zaG9ydC1hZGRyZXNzLWF0dGFjay1leHBsYWluZWQvCiAvLy8gQHBhcmFtIHNpemUgcGF5bG9hZCBzaXplCiBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgIF87CiB9CgogLy8vIEBkZXYgTWFrZSBzdXJlIHdlIGFyZSBub3QgZG9uZSB5ZXQuCiBtb2RpZmllciBjYW5NaW50KCkgewogICByZXF1aXJlKCFyZWxlYXNlZCk7CiAgICBfOwogIH0KCiAvLy8gQGRldiBDb25zdHJ1Y3RvcgogZnVuY3Rpb24gWmliZXJUb2tlbigpIHsKICAgb3duZXIgPSBtc2cuc2VuZGVyOwogfQoKIC8vLyBGYWxsYmFjayBtZXRob2Qgd2lsbCBidXlvdXQgdG9rZW5zCiBmdW5jdGlvbigpIHBheWFibGUgewogICByZXZlcnQoKTsKIH0KIC8vLyBAZGV2IENyZWF0ZSBuZXcgdG9rZW5zIGFuZCBhbGxvY2F0ZSB0aGVtIHRvIGFuIGFkZHJlc3MuIE9ubHkgY2FsbGFibHkgYnkgYSBjcm93ZHNhbGUgY29udHJhY3QKIC8vLyBAcGFyYW0gcmVjZWl2ZXIgQWRkcmVzcyBvZiByZWNlaXZlcgogLy8vIEBwYXJhbSBhbW91bnQgIE51bWJlciBvZiB0b2tlbnMgdG8gaXNzdWUuCiBmdW5jdGlvbiBtaW50KGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBvbmx5Q3Jvd2RzYWxlQWdlbnQgY2FuTWludCBwdWJsaWMgewogICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBhbW91bnQpOwogICAgYmFsYW5jZXNbcmVjZWl2ZXJdID0gc2FmZUFkZChiYWxhbmNlc1tyZWNlaXZlcl0sIGFtb3VudCk7CiAgICBUcmFuc2ZlcigwLCByZWNlaXZlciwgYW1vdW50KTsKIH0KCiAvLy8gQGRldiBTZXQgdGhlIGNvbnRyYWN0IHRoYXQgY2FuIGNhbGwgcmVsZWFzZSBhbmQgbWFrZSB0aGUgdG9rZW4gdHJhbnNmZXJhYmxlLgogLy8vIEBwYXJhbSBfY3Jvd2RzYWxlQWdlbnQgY3Jvd2RzYWxlIGNvbnRyYWN0IGFkZHJlc3MKIGZ1bmN0aW9uIHNldENyb3dkc2FsZUFnZW50KGFkZHJlc3MgX2Nyb3dkc2FsZUFnZW50KSBvbmx5T3duZXIgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CiAgIGNyb3dkc2FsZUFnZW50ID0gX2Nyb3dkc2FsZUFnZW50OwogfQogLy8vIEBkZXYgT25lIHdheSBmdW5jdGlvbiB0byByZWxlYXNlIHRoZSB0b2tlbnMgdG8gdGhlIHdpbGQuIENhbiBiZSBjYWxsZWQgb25seSBmcm9tIHRoZSByZWxlYXNlIGFnZW50IHRoYXQgaXMgdGhlIGZpbmFsIElDTyBjb250cmFjdC4gSXQgaXMgb25seSBjYWxsZWQgaWYgdGhlIGNyb3dkc2FsZSBoYXMgYmVlbiBzdWNjZXNzIChmaXJzdCBtaWxlc3RvbmUgcmVhY2hlZCkuCiBmdW5jdGlvbiByZWxlYXNlVG9rZW5UcmFuc2ZlcigpIHB1YmxpYyBvbmx5Q3Jvd2RzYWxlQWdlbnQgewogICBjcm93ZFNhbGVPdmVyVGltZXN0YW1wID0gbm93OwogICByZWxlYXNlZCA9IHRydWU7CiB9CiAvLy8gQGRldiBUcmFuZmVyIHRva2VucyB0byBhZGRyZXNzCiAvLy8gQHBhcmFtIF90byBkZXN0IGFkZHJlc3MKIC8vLyBAcGFyYW0gX3ZhbHVlIHRva2VucyBhbW91bnQKIC8vLyBAcmV0dXJuIHRyYW5zZmVyIHJlc3VsdAogZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBjYW5UcmFuc2ZlciBjaGVja0Zyb3plbkFtb3VudChtc2cuc2VuZGVyLCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CgogICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgIHJldHVybiB0cnVlOwogfQoKIC8vLyBAZGV2IFRyYW5mZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gb3RoZXIKIC8vLyBAcGFyYW0gX2Zyb20gc291cmNlIGFkZHJlc3MKIC8vLyBAcGFyYW0gX3RvIGRlc3QgYWRkcmVzcwogLy8vIEBwYXJhbSBfdmFsdWUgdG9rZW5zIGFtb3VudAogLy8vIEByZXR1cm4gdHJhbnNmZXIgcmVzdWx0CiBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBjYW5UcmFuc2ZlciBjaGVja0Zyb3plbkFtb3VudChfZnJvbSwgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiB9CiAvLy8gQGRldiBUb2tlbnMgYmFsYW5jZQogLy8vIEBwYXJhbSBfb3duZXIgaG9sZGVyIGFkZHJlc3MKIC8vLyBAcmV0dXJuIGJhbGFuY2UgYW1vdW50CiBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKIH0KCiAvLy8gQGRldiBBcHByb3ZlIHRyYW5zZmVyCiAvLy8gQHBhcmFtIF9zcGVuZGVyIGhvbGRlciBhZGRyZXNzCiAvLy8gQHBhcmFtIF92YWx1ZSB0b2tlbnMgYW1vdW50CiAvLy8gQHJldHVybiByZXN1bHQKIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgIHJlcXVpcmUgKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgcmV0dXJuIHRydWU7CiB9CgogLy8vIEBkZXYgVG9rZW4gYWxsb3dhbmNlCiAvLy8gQHBhcmFtIF9vd25lciBob2xkZXIgYWRkcmVzcwogLy8vIEBwYXJhbSBfc3BlbmRlciBzcGVuZGVyIGFkZHJlc3MKIC8vLyBAcmV0dXJuIHJlbWFpbiBhbW91bnQKIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiB9Cn0KCgovLy8gQHRpdGxlIFppYmVyQ3Jvd2RzYWxlIGNvbnRyYWN0IC0gY29udHJhY3QgZm9yIHRva2VuIHNhbGVzLgovLy8gQGF1dGhvciA8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjFkNzk3ODZiNWQ2ZTcwN2M2ZjY5N2U3MjczNjk2ZjdjN2U2OTc4N2M3MDMzN2U3MjcwIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPgpjb250cmFjdCBaaWJlckNyb3dkc2FsZSBpcyBIYWx0YWJsZSwgS2lsbGFibGUsIFNhZmVNYXRoIHsKCiAgLy8vIFRvdGFsIGNvdW50IG9mIHRva2VucyBkaXN0cmlidXRlZCB2aWEgSUNPCiAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9UQUxfSUNPX1RPS0VOUyA9IDEwMDAwMDAwMDsKCiAgLy8vIE1pbWluYWwgdG9rZW5zIGZ1bmRpbmcgZ29hbCBpbiBXZWksIGlmIHRoaXMgZ29hbCBpc24ndCByZWFjaGVkIGR1cmluZyBJQ08sIHJlZnVuZCB3aWxsIGJlZ2luCiAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0lDT19HT0FMID0gNTAwMCBldGhlcjsKCiAgLy8vIE1heGltYWwgdG9rZW5zIGZ1bmRpbmcgZ29hbCBpbiBXZWkKICB1aW50IHB1YmxpYyBjb25zdGFudCBNQVhfSUNPX0dPQUwgPSA1MDAwMCBldGhlcjsKICAKICAvLy8gdGhlIFVOSVggdGltZXN0YW1wIDVlNCBldGhlciBmdW5kZWQKICB1aW50IHB1YmxpYyBtYXhHb2FsUmVhY2hlZEF0ID0gMDsKCiAgLy8vIFRoZSBkdXJhdGlvbiBvZiBJQ08KICB1aW50IHB1YmxpYyBjb25zdGFudCBJQ09fRFVSQVRJT04gPSAxMCBkYXlzOwoKICAvLy8gVGhlIGR1cmF0aW9uIG9mIElDTwogIHVpbnQgcHVibGljIGNvbnN0YW50IEFGVEVSX01BWF9HT0FMX0RVUkFUSU9OID0gMjQgaG91cnM7CgogIC8vLyBUaGUgdG9rZW4gd2UgYXJlIHNlbGxpbmcKICBaaWJlclRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8vIHRoZSBVTklYIHRpbWVzdGFtcCBzdGFydCBkYXRlIG9mIHRoZSBjcm93ZHNhbGUKICB1aW50IHB1YmxpYyBzdGFydHNBdDsKCiAgLy8vIEhvdyBtYW55IHdlaSBvZiBmdW5kaW5nIHdlIGhhdmUgcmFpc2VkCiAgdWludCBwdWJsaWMgd2VpUmFpc2VkID0gMDsKCiAgLy8vIEhvdyBtdWNoIHdlaSB3ZSBoYXZlIHJldHVybmVkIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFmdGVyIGEgZmFpbGVkIGNyb3dkZnVuZC4KICB1aW50IHB1YmxpYyBsb2FkZWRSZWZ1bmQgPSAwOwoKICAvLy8gSG93IG11Y2ggd2VpIHdlIGhhdmUgZ2l2ZW4gYmFjayB0byBpbnZlc3RvcnMuCiAgdWludCBwdWJsaWMgd2VpUmVmdW5kZWQgPSAwOwoKICAvLy8gSGFzIHRoaXMgY3Jvd2RzYWxlIGJlZW4gZmluYWxpemVkCiAgYm9vbCBwdWJsaWMgZmluYWxpemVkOwoKICAvLy8gSG93IG11Y2ggRVRIIGVhY2ggYWRkcmVzcyBoYXMgaW52ZXN0ZWQgdG8gdGhpcyBjcm93ZHNhbGUKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBpbnZlc3RlZEFtb3VudE9mOwoKICAvLy8gSG93IG11Y2ggdG9rZW5zIHRoaXMgY3Jvd2RzYWxlIGhhcyBjcmVkaXRlZCBmb3IgZWFjaCBpbnZlc3RvciBhZGRyZXNzCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdG9rZW5BbW91bnRPZjsKCiAgLy8vIERlZmluZSBhIHN0cnVjdHVyZSBmb3Igb25lIGludmVzdG1lbnQgZXZlbnQgb2NjdXJyZW5jZQogIHN0cnVjdCBJbnZlc3RtZW50IHsKICAgICAgLy8vIFdobyBpbnZlc3RlZAogICAgICBhZGRyZXNzIHNvdXJjZTsKICAgICAgLy8vIEFtb3VudCBpbnZlc3RlZAogICAgICB1aW50IHdlaVZhbHVlOwogIH0KCiAgSW52ZXN0bWVudFtdIHB1YmxpYyBpbnZlc3RtZW50czsKCiAgLy8vIFN0YXRlIG1hY2hpbmUKICAvLy8gUHJlcGFyaW5nOiBBbGwgY29udHJhY3QgaW5pdGlhbGl6YXRpb24gY2FsbHMgYW5kIHZhcmlhYmxlcyBoYXZlIG5vdCBiZWVuIHNldCB5ZXQKICAvLy8gUHJlZnVuZGluZzogV2UgaGF2ZSBub3QgcGFzc2VkIHN0YXJ0IHRpbWUgeWV0CiAgLy8vIEZ1bmRpbmc6IEFjdGl2ZSBjcm93ZHNhbGUKICAvLy8gU3VjY2VzczogTWluaW11bSBmdW5kaW5nIGdvYWwgcmVhY2hlZAogIC8vLyBGYWlsdXJlOiBNaW5pbXVtIGZ1bmRpbmcgZ29hbCBub3QgcmVhY2hlZCBiZWZvcmUgZW5kaW5nIHRpbWUKICAvLy8gRmluYWxpemVkOiBUaGUgZmluYWxpemVkIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWRcCiAgLy8vIFJlZnVuZGluZzogUmVmdW5kcyBhcmUgbG9hZGVkIG9uIHRoZSBjb250cmFjdCBmb3IgcmVjbGFpbS4KICBlbnVtIFN0YXRlIHtVbmtub3duLCBQcmVwYXJpbmcsIEZ1bmRpbmcsIFN1Y2Nlc3MsIEZhaWx1cmUsIEZpbmFsaXplZCwgUmVmdW5kaW5nfQoKICAvLy8gQSBuZXcgaW52ZXN0bWVudCB3YXMgbWFkZQogIGV2ZW50IEludmVzdGVkKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgd2VpQW1vdW50KTsKICAvLy8gUmVmdW5kIHdhcyBwcm9jZXNzZWQgZm9yIGEgY29udHJpYnV0b3IKICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQpOwoKICAvLy8gQGRldiBNb2RpZmllZCBhbGxvd2luZyBleGVjdXRpb24gb25seSBpZiB0aGUgY3Jvd2RzYWxlIGlzIGN1cnJlbnRseSBydW5uaW5nCiAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgcmVxdWlyZShnZXRTdGF0ZSgpID09IHN0YXRlKTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBDb25zdHJ1Y3RvcgogIC8vLyBAcGFyYW0gX3Rva2VuIFBheSBGYWlyIHRva2VuIGFkZHJlc3MKICAvLy8gQHBhcmFtIF9zdGFydCB0b2tlbiBJQ08gc3RhcnQgZGF0ZQogIGZ1bmN0aW9uIENyb3dkc2FsZShhZGRyZXNzIF90b2tlbiwgdWludCBfc3RhcnQpIHsKICAgIHJlcXVpcmUoX3Rva2VuICE9IDApOwogICAgcmVxdWlyZShfc3RhcnQgIT0gMCk7CgogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgdG9rZW4gPSBaaWJlclRva2VuKF90b2tlbik7CiAgICBzdGFydHNBdCA9IF9zdGFydDsKICB9CgogIC8vLyAgRG9uJ3QgZXhwZWN0IHRvIGp1c3Qgc2VuZCBpbiBtb25leSBhbmQgZ2V0IHRva2Vucy4KICBmdW5jdGlvbigpIHBheWFibGUgewogICAgYnV5KCk7CiAgfQoKICAgLy8vIEBkZXYgTWFrZSBhbiBpbnZlc3RtZW50LiBDcm93ZHNhbGUgbXVzdCBiZSBydW5uaW5nIGZvciBvbmUgdG8gaW52ZXN0LgogICAvLy8gQHBhcmFtIHJlY2VpdmVyIFRoZSBFdGhlcmV1bSBhZGRyZXNzIHdobyByZWNlaXZlcyB0aGUgdG9rZW5zCiAgZnVuY3Rpb24gaW52ZXN0SW50ZXJuYWwoYWRkcmVzcyByZWNlaXZlcikgc3RvcEluRW1lcmdlbmN5IHByaXZhdGUgewogICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTsKICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuRnVuZGluZyk7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwoKICAgIC8vIEFkZCBpbnZlc3RtZW50IHJlY29yZAogICAgdmFyIHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgIGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID0gc2FmZUFkZChpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSwgd2VpQW1vdW50KTsKICAgIGludmVzdG1lbnRzLnB1c2goSW52ZXN0bWVudChyZWNlaXZlciwgd2VpQW1vdW50KSk7CgogICAgLy8gVXBkYXRlIHRvdGFscwogICAgd2VpUmFpc2VkID0gc2FmZUFkZCh3ZWlSYWlzZWQsIHdlaUFtb3VudCk7CiAgICAvLyBNYXggSUNPIGdvYWwgcmVhY2hlZCBhdAogICAgaWYobWF4R29hbFJlYWNoZWRBdCA9PSAwICYmIHdlaVJhaXNlZCA+PSBNQVhfSUNPX0dPQUwpCiAgICAgIG1heEdvYWxSZWFjaGVkQXQgPSBub3c7CiAgICAvLyBUZWxsIHVzIGludmVzdCB3YXMgc3VjY2VzcwogICAgSW52ZXN0ZWQocmVjZWl2ZXIsIHdlaUFtb3VudCk7CiAgfQoKICAvLy8gQGRldiBBbGxvdyBhbm9ueW1vdXMgY29udHJpYnV0aW9ucyB0byB0aGlzIGNyb3dkc2FsZS4KICAvLy8gQHBhcmFtIHJlY2VpdmVyIFRoZSBFdGhlcmV1bSBhZGRyZXNzIHdobyByZWNlaXZlcyB0aGUgdG9rZW5zCiAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgcmVjZWl2ZXIpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGludmVzdEludGVybmFsKHJlY2VpdmVyKTsKICB9CgogIC8vLyBAZGV2IFRoZSBiYXNpYyBlbnRyeSBwb2ludCB0byBwYXJ0aWNpcGF0ZSB0aGUgY3Jvd2RzYWxlIHByb2Nlc3MuCiAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHBheWFibGUgewogICAgaW52ZXN0KG1zZy5zZW5kZXIpOwogIH0KCiAgLy8vIEBkZXYgRmluYWxpemUgYSBzdWNjY2VzZnVsIGNyb3dkc2FsZS4KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHB1YmxpYyBpblN0YXRlKFN0YXRlLlN1Y2Nlc3MpIG9ubHlPd25lciBzdG9wSW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZSghZmluYWxpemVkKTsKCiAgICBmaW5hbGl6ZWQgPSB0cnVlOwogICAgZmluYWxpemVDcm93ZHNhbGUoKTsKICB9CgogIC8vLyBAZGV2IE93bmVyIGNhbiB3aXRoZHJhdyBjb250cmFjdCBmdW5kcwogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAvLyBUcmFuc2ZlciBmdW5kcyB0byB0aGUgdGVhbSB3YWxsZXQKICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICAvLy8gQGRldiBGaW5hbGl6ZSBhIHN1Y2NjZXNmdWwgY3Jvd2RzYWxlLgogIGZ1bmN0aW9uIGZpbmFsaXplQ3Jvd2RzYWxlKCkgaW50ZXJuYWwgewogICAgLy8gQ2FsY3VsYXRlIGRpdmlzb3Igb2YgdGhlIHRvdGFsIHRva2VuIGNvdW50CiAgICB1aW50IGRpdmlzb3I7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBpbnZlc3RtZW50cy5sZW5ndGg7IGkrKykKICAgICAgIGRpdmlzb3IgPSBzYWZlQWRkKGRpdmlzb3IsIGludmVzdG1lbnRzW2ldLndlaVZhbHVlKTsKCiAgICB2YXIgbXVsdGlwbGllciA9IDEwICoqIHRva2VuLmRlY2ltYWxzKCk7CiAgICAvLyBHZXQgdW5pdCBwcmljZQogICAgdWludCB1bml0UHJpY2UgPSBzYWZlRGl2KHNhZmVNdWwoVE9UQUxfSUNPX1RPS0VOUywgbXVsdGlwbGllciksIGRpdmlzb3IpOwoKICAgIC8vIERpc3RyaWJ1dGUgdG9rZW5zIGFtb25nIGludmVzdG9ycwogICAgZm9yIChpID0gMDsgaSA8IGludmVzdG1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHRva2VuQW1vdW50ID0gc2FmZU11bCh1bml0UHJpY2UsIGludmVzdG1lbnRzW2ldLndlaVZhbHVlKTsKICAgICAgICB0b2tlbkFtb3VudE9mW2ludmVzdG1lbnRzW2ldLnNvdXJjZV0gKz0gdG9rZW5BbW91bnQ7CiAgICAgICAgYXNzaWduVG9rZW5zKGludmVzdG1lbnRzW2ldLnNvdXJjZSwgdG9rZW5BbW91bnQpOwogICAgfQogICAgYXNzaWduVG9rZW5zKG93bmVyLCAyZTcpOwogICAgdG9rZW4ucmVsZWFzZVRva2VuVHJhbnNmZXIoKTsKICB9CgogIC8vLyBAZGV2IEFsbG93IGxvYWQgcmVmdW5kcyBiYWNrIG9uIHRoZSBjb250cmFjdCBmb3IgdGhlIHJlZnVuZGluZy4KICBmdW5jdGlvbiBsb2FkUmVmdW5kKCkgcHVibGljIHBheWFibGUgaW5TdGF0ZShTdGF0ZS5GYWlsdXJlKSB7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgbG9hZGVkUmVmdW5kID0gc2FmZUFkZChsb2FkZWRSZWZ1bmQsIG1zZy52YWx1ZSk7CiAgfQoKICAvLy8gQGRldiBJbnZlc3RvcnMgY2FuIGNsYWltIHJlZnVuZC4KICBmdW5jdGlvbiByZWZ1bmQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5SZWZ1bmRpbmcpIHsKICAgIHVpbnQyNTYgd2VpVmFsdWUgPSBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdOwogICAgaWYgKHdlaVZhbHVlID09IDApCiAgICAgIHJldHVybjsKICAgIGludmVzdGVkQW1vdW50T2ZbbXNnLnNlbmRlcl0gPSAwOwogICAgd2VpUmVmdW5kZWQgPSBzYWZlQWRkKHdlaVJlZnVuZGVkLCB3ZWlWYWx1ZSk7CiAgICBSZWZ1bmQobXNnLnNlbmRlciwgd2VpVmFsdWUpOwogICAgbXNnLnNlbmRlci50cmFuc2Zlcih3ZWlWYWx1ZSk7CiAgfQoKICAvLy8gQGRldiBNaW5pbXVtIGdvYWwgd2FzIHJlYWNoZWQKICAvLy8gQHJldHVybiB0cnVlIGlmIHRoZSBjcm93ZHNhbGUgaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gbm90IGluaXRpYXRlIHRoZSByZWZ1bmRpbmcKICBmdW5jdGlvbiBpc01pbmltdW1Hb2FsUmVhY2hlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHJlYWNoZWQpIHsKICAgIHJldHVybiB3ZWlSYWlzZWQgPj0gTUlOX0lDT19HT0FMOwogIH0KCiAgLy8vIEBkZXYgQ2hlY2sgaWYgdGhlIElDTyBnb2FsIHdhcyByZWFjaGVkLgogIC8vLyBAcmV0dXJuIHRydWUgaWYgdGhlIGNyb3dkc2FsZSBoYXMgcmFpc2VkIGVub3VnaCBtb25leSB0byBiZSBhIHN1Y2Nlc3MKICBmdW5jdGlvbiBpc0Nyb3dkc2FsZUZ1bGwoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBNQVhfSUNPX0dPQUwgJiYgbm93ID4gbWF4R29hbFJlYWNoZWRBdCArIEFGVEVSX01BWF9HT0FMX0RVUkFUSU9OOwogIH0KCiAgLy8vIEBkZXYgQ3Jvd2RmdW5kIHN0YXRlIG1hY2hpbmUgbWFuYWdlbWVudC4KICAvLy8gQHJldHVybiBTdGF0ZSBjdXJyZW50IHN0YXRlCiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoU3RhdGUpIHsKICAgIGlmIChmaW5hbGl6ZWQpCiAgICAgIHJldHVybiBTdGF0ZS5GaW5hbGl6ZWQ7CiAgICBpZiAoYWRkcmVzcyh0b2tlbikgPT0gMCkKICAgICAgcmV0dXJuIFN0YXRlLlByZXBhcmluZzsKICAgIGlmIChub3cgPj0gc3RhcnRzQXQgJiYgbm93IDwgc3RhcnRzQXQgKyBJQ09fRFVSQVRJT04gJiYgIWlzQ3Jvd2RzYWxlRnVsbCgpKQogICAgICByZXR1cm4gU3RhdGUuRnVuZGluZzsKICAgIGlmIChpc0Nyb3dkc2FsZUZ1bGwoKSkKICAgICAgcmV0dXJuIFN0YXRlLlN1Y2Nlc3M7CiAgICBpZiAoIWlzTWluaW11bUdvYWxSZWFjaGVkKCkgJiYgd2VpUmFpc2VkID4gMCAmJiBsb2FkZWRSZWZ1bmQgPj0gd2VpUmFpc2VkKQogICAgICByZXR1cm4gU3RhdGUuUmVmdW5kaW5nOwogICAgcmV0dXJuIFN0YXRlLkZhaWx1cmU7CiAgfQoKICAgLy8vIEBkZXYgRHluYW1pY2FsbHkgY3JlYXRlIHRva2VucyBhbmQgYXNzaWduIHRoZW0gdG8gdGhlIGludmVzdG9yLgogICAvLy8gQHBhcmFtIHJlY2VpdmVyIGludmVzdG9yIGFkZHJlc3MKICAgLy8vIEBwYXJhbSB0b2tlbkFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB3ZSB0cnkgdG8gZ2l2ZSB0byB0aGUgaW52ZXN0b3IgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24KICAgZnVuY3Rpb24gYXNzaWduVG9rZW5zKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgdG9rZW5BbW91bnQpIHByaXZhdGUgewogICAgIHRva2VuLm1pbnQocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsKICAgfQp9'.
	

]
