Class {
	#name : #SRTe381bc830432434133856ec4f185b1dd8e05cdb6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe381bc830432434133856ec4f185b1dd8e05cdb6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCmNvbnRyYWN0IFRva2VuCnsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHt9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkge30KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykge30KCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOyAgICAKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbgp7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKQogICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApCiAgICAgICAgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykKICAgIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Owp9Cgpjb250cmFjdCBSaWNjb2luIGlzIFN0YW5kYXJkVG9rZW4KewoKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ0gxLjAnOwogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKICAgIGFkZHJlc3MgcHVibGljIGNyZWF0b3I7CiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbDsKICAgIHVpbnQgcHVibGljIHN0YXJ0dGltZTsKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lOwogICAgdWludCBwdWJsaWMgYW1vdW50UmFpc2VkOwogICAgdWludDI1NiBwdWJsaWMgdW5pdHNPbmVFdGhDYW5CdXk7CiAgICBib29sIHB1YmxpYyBmdW5kaW5nR29hbFJlYWNoZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUNsb3NlZCA9IGZhbHNlOwoKICAgIGV2ZW50IEdvYWxSZWFjaGVkKGFkZHJlc3MgcmVjaXBpZW50LCB1aW50IHRvdGFsQW1vdW50UmFpc2VkKTsKICAgIAogICAgZnVuY3Rpb24gUmljY29pbihzdHJpbmcgdG9rZW5OYW1lLCBzdHJpbmcgdG9rZW5TeW1ib2wsIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwgYWRkcmVzcyBzZW5kRXRoZXJUbywgdWludCBmdW5kaW5nR29hbEluRXRoZXIsIHVpbnQgZHVyYXRpb25Jbk1pbnV0ZXMsIHVpbnQyNTYgdG9rZW5Jbk9uZUV0aGVyKQogICAgewogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7IAogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAKICAgICAgICBkZWNpbWFscyA9IDE4OwogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseSAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwogICAgICAgIGJlbmVmaWNpYXJ5ID0gc2VuZEV0aGVyVG87CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYmVuZWZpY2lhcnldID0gdG90YWxTdXBwbHk7CiAgICAgICAgZnVuZGluZ0dvYWwgPSBmdW5kaW5nR29hbEluRXRoZXIgKiAxIGV0aGVyOwogICAgICAgIHN0YXJ0dGltZSA9IG5vdzsKICAgICAgICBkZWFkbGluZSA9IG5vdyArIGR1cmF0aW9uSW5NaW51dGVzICogMSBtaW51dGVzOwogICAgICAgIHVuaXRzT25lRXRoQ2FuQnV5ID0gdG9rZW5Jbk9uZUV0aGVyOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZQogICAgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUNsb3NlZCk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWUgKiB1bml0c09uZUV0aENhbkJ1eTsKICAgICAgICAKICAgICAgICAKICAgICAgICBpZigobm93IC0gc3RhcnR0aW1lKSA8PSAoZGVhZGxpbmUgLSBzdGFydHRpbWUpIC8gMjApCiAgICAgICAgICAgIGFtb3VudCA9IDIzICogKGFtb3VudC8yMCk7CiAgICAgICAgZWxzZSBpZigobm93IC0gc3RhcnR0aW1lKSA8PSA5ICogKChkZWFkbGluZSAtIHN0YXJ0dGltZSkgLyAyMCkgKQogICAgICAgICAgICBhbW91bnQgPSAxMSAqIChhbW91bnQvMTApOwoKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW2JlbmVmaWNpYXJ5XSA+PSBhbW91bnQpOwogICAgICAgIAogICAgICAgIGFtb3VudFJhaXNlZCArPSBtc2cudmFsdWU7CiAgICAgICAgYmFsYW5jZXNbYmVuZWZpY2lhcnldID0gYmFsYW5jZXNbYmVuZWZpY2lhcnldIC0gYW1vdW50OwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKyBhbW91bnQ7CiAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihiZW5lZmljaWFyeSwgbXNnLnNlbmRlciwgYW1vdW50KTsgCiAgICB9CgogICAgbW9kaWZpZXIgYWZ0ZXJEZWFkbGluZSgpCiAgICB7IGlmIChub3cgPj0gZGVhZGxpbmUpIF87IH0KCiAgICBmdW5jdGlvbiBjaGVja0dvYWxSZWFjaGVkKCkgYWZ0ZXJEZWFkbGluZQogICAgewogICAgICAgIGlmIChhbW91bnRSYWlzZWQgPj0gZnVuZGluZ0dvYWwpCiAgICAgICAgewogICAgICAgICAgICBmdW5kaW5nR29hbFJlYWNoZWQgPSB0cnVlOwogICAgICAgICAgICBHb2FsUmVhY2hlZChiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkKTsKICAgICAgICB9CiAgICAgICAgY3Jvd2RzYWxlQ2xvc2VkID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVSYXRlKHVpbnQyNTYgdG9rZW5Jbk9uZUV0aGVyKSBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcmVhdG9yKTsKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVDbG9zZWQpOwogICAgICAgIHVuaXRzT25lRXRoQ2FuQnV5ID0gdG9rZW5Jbk9uZUV0aGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZUNyZWF0b3IoYWRkcmVzcyBfY3JlYXRvcikgZXh0ZXJuYWwKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3JlYXRvcik7CiAgICAgICAgY3JlYXRvciA9IF9jcmVhdG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUJlbmVmaWNpYXJ5KGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcmVhdG9yKTsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIGlmKCFfc3BlbmRlci5jYWxsKGJ5dGVzNChieXRlczMyKHNoYTMoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSkpLCBtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpKQogICAgICAgICAgICB7IHRocm93OyB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
