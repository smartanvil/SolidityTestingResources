Class {
	#name : #SRT9a51f8fdd2d43c79da4549d452d35970bbefc48f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a51f8fdd2d43c79da4549d452d35970bbefc48f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovL01PTEQgQm9udXMgY29udHJhY3QKCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAvL2ludGVybmFscwoKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICBhc3NlcnQoYiA+IDApOwogICAgICB1aW50IGMgPSBhIC8gYjsKICAgICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7CiAgICAgIHJldHVybiBjOwogIH0KfQoKLy8gRVJDIDIwIFRva2VuCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoKY29udHJhY3QgVG9rZW4gewogICAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKICAgIGlzIHJlcGxhY2VkIHdpdGg6CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIFRoaXMgYXV0b21hdGljYWxseSBjcmVhdGVzIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgdG90YWxTdXBwbHkuCiAgICBUaGlzIGlzIG1vdmVkIHRvIHRoZSBiYXNlIGNvbnRyYWN0IHNpbmNlIHB1YmxpYyBnZXR0ZXIgZnVuY3Rpb25zIGFyZSBub3QKICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgZnVuY3Rpb24gYnkgdGhlIGNvbXBpbGVyLgogICAgKi8KICAgIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy9EZWZhdWx0IGFzc3VtZXMgdG90YWxTdXBwbHkgY2FuJ3QgYmUgb3ZlciBtYXggKDJeMjU2IC0gMSkuCiAgICAgICAgLy9JZiB5b3VyIHRva2VuIGxlYXZlcyBvdXQgdG90YWxTdXBwbHkgYW5kIGNhbiBpc3N1ZSBtb3JlIHRva2VucyBhcyB0aW1lIGdvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICAvL2lmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL3NhbWUgYXMgYWJvdmUuIFJlcGxhY2UgdGhpcyBsaW5lIHdpdGggdGhlIGZvbGxvd2luZyBpZiB5b3Ugd2FudCB0byBwcm90ZWN0IGFnYWluc3Qgd3JhcHBpbmcgdWludHMuCiAgICAgICAgLy9pZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKCi8qKgogKiBNb2xkQ29pbiBwcmUtc2VsbCBjb250cmFjdC4KICoKICovCmNvbnRyYWN0IE1vbGRDb2luIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTU9MRCI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJNTEQiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50IHB1YmxpYyBzdGFydERhdGV0aW1lOyAvL3ByZS1zZWxsIHN0YXJ0IGRhdGV0aW1lIHNlY29uZHMKICAgIHVpbnQgcHVibGljIGZpcnN0U3RhZ2VEYXRldGltZTsgLy9maXJzdCAxMjAgaG91cnMgcHJlLXNlbGwgaW4gc2Vjb25kcwogICAgdWludCBwdWJsaWMgc2Vjb25kU3RhZ2VEYXRldGltZTsgLy9zZWNvbmQgc3RhZ2UsIDI0MCBob3VycyBvZiBwcmUtc2VsbCBpbiBzZWNvbmRzLgogICAgdWludCBwdWJsaWMgZW5kRGF0ZXRpbWU7IC8vcHJlLXNlbGwgZW5kIGRhdGV0aW1lIHNlY29uZHMgKHNldCBpbiBjb25zdHJ1Y3RvcikKCiAgICAvLyBJbml0aWFsIGZvdW5kZXIgYWRkcmVzcyAoc2V0IGluIGNvbnN0cnVjdG9yKQogICAgLy8gQWxsIGRlcG9zaXRlZCBFVEggd2lsbCBiZSBpbnN0YW50bHkgZm9yd2FyZGVkIHRvIHRoaXMgYWRkcmVzcy4KICAgIGFkZHJlc3MgcHVibGljIGZvdW5kZXI7CgogICAgLy8gYWRtaW5pc3RyYXRvciBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKCiAgICB1aW50IHB1YmxpYyBjb2luQWxsb2NhdGlvbiA9IDIwICogMTAqKjggKiAxMCoqZGVjaW1hbHM7IC8vMjAwME0gdG9rZW5zIHN1cHBseSBmb3IgcHJlLXNlbGwKICAgIHVpbnQgcHVibGljIGFuZ2VsQWxsb2NhdGlvbiA9IDIgKiAxMCoqOCAqIDEwKipkZWNpbWFsczsgLy8gMjAwTSBvZiB0b2tlbiBzdXBwbHkgYWxsb2NhdGVkIGFuZ2VsIGludmVzdG9yCiAgICB1aW50IHB1YmxpYyBmb3VuZGVyQWxsb2NhdGlvbiA9IDMgKiAxMCoqOCAqIDEwKipkZWNpbWFsczsgLy8zMDBNIG9mIHRva2VuIHN1cHBseSBhbGxvY2F0ZWQgZm9yIHRoZSBmb3VuZGVyIGFsbG9jYXRpb24KCiAgICBib29sIHB1YmxpYyBmb3VuZGVyQWxsb2NhdGVkID0gZmFsc2U7IC8vdGhpcyB3aWxsIGNoYW5nZSB0byB0cnVlIHdoZW4gdGhlIGZvdW5kZXIgZnVuZCBpcyBhbGxvY2F0ZWQKCiAgICB1aW50IHB1YmxpYyBzYWxlVG9rZW5TdXBwbHkgPSAwOyAvL3RoaXMgd2lsbCBrZWVwIHRyYWNrIG9mIHRoZSB0b2tlbiBzdXBwbHkgY3JlYXRlZCBkdXJpbmcgdGhlIHByZS1zZWxsCiAgICB1aW50IHB1YmxpYyBzYWxlc1ZvbHVtZSA9IDA7IC8vdGhpcyB3aWxsIGtlZXAgdHJhY2sgb2YgdGhlIEV0aGVyIHJhaXNlZCBkdXJpbmcgdGhlIHByZS1zZWxsCgogICAgdWludCBwdWJsaWMgYW5nZWxUb2tlblN1cHBseSA9IDA7IC8vdGhpcyB3aWxsIGtlZXAgdHJhY2sgb2YgdGhlIHRva2VuIGFuZ2VsIHN1cHBseQoKICAgIGJvb2wgcHVibGljIGhhbHRlZCA9IGZhbHNlOyAvL3RoZSBhZG1pbiBhZGRyZXNzIGNhbiBzZXQgdGhpcyB0byB0cnVlIHRvIGhhbHQgdGhlIHByZS1zZWxsIGR1ZSB0byBlbWVyZ2VuY3kKCiAgICBldmVudCBCdXkoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCBldGgsIHVpbnQgdG9rZW5zKTsKICAgIGV2ZW50IEFsbG9jYXRlRm91bmRlclRva2VucyhhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IHRva2Vucyk7CiAgICBldmVudCBBbGxvY2F0ZUFuZ2VsVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKTsKICAgIGV2ZW50IEFsbG9jYXRlVW5zb2xkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgaG9sZGVyLCB1aW50IHRva2Vucyk7CgogICAgbW9kaWZpZXIgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgZHVyaW5nQ3Jvd2RTYWxlIHsKICAgICAgICByZXF1aXJlKGJsb2NrLnRpbWVzdGFtcCA+PSBzdGFydERhdGV0aW1lICYmIGJsb2NrLnRpbWVzdGFtcCA8PSBlbmREYXRldGltZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqCiAgICAgKiBJbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDCiAgICAgKi8KICAgIGZ1bmN0aW9uIE1vbGRDb2luKHVpbnQgc3RhcnREYXRldGltZUluU2Vjb25kcywgYWRkcmVzcyBmb3VuZGVyV2FsbGV0KSB7CgogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgICAgICBmb3VuZGVyID0gZm91bmRlcldhbGxldDsKICAgICAgICBzdGFydERhdGV0aW1lID0gc3RhcnREYXRldGltZUluU2Vjb25kczsKICAgICAgICBmaXJzdFN0YWdlRGF0ZXRpbWUgPSBzdGFydERhdGV0aW1lICsgMTIwICogMSBob3VyczsKICAgICAgICBzZWNvbmRTdGFnZURhdGV0aW1lID0gZmlyc3RTdGFnZURhdGV0aW1lICsgMjQwICogMSBob3VyczsKICAgICAgICBlbmREYXRldGltZSA9IHNlY29uZFN0YWdlRGF0ZXRpbWUgKyAyMDQwICogMSBob3VyczsKCiAgICB9CgogICAgLyoqCiAgICAgKiBQcmljZSBmb3IgY3Jvd2RzYWxlIGJ5IHRpbWUKICAgICAqLwogICAgZnVuY3Rpb24gcHJpY2UodWludCB0aW1lSW5TZWNvbmRzKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICBpZiAodGltZUluU2Vjb25kcyA8IHN0YXJ0RGF0ZXRpbWUpIHJldHVybiAwOwogICAgICAgIGlmICh0aW1lSW5TZWNvbmRzIDw9IGZpcnN0U3RhZ2VEYXRldGltZSkgcmV0dXJuIDE1MDAwOyAvLzEyMCBob3VycwogICAgICAgIGlmICh0aW1lSW5TZWNvbmRzIDw9IHNlY29uZFN0YWdlRGF0ZXRpbWUpIHJldHVybiAxMjAwMDsgLy8yNDAgaG91cnMKICAgICAgICBpZiAodGltZUluU2Vjb25kcyA8PSBlbmREYXRldGltZSkgcmV0dXJuIDEwMDAwOyAvLzIwNDAgaG91cnMKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICAvKioKICAgICAqIGFsbG93IGFueW9uZSBzZW5kcyBmdW5kcyB0byB0aGUgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7CiAgICAgICAgYnV5UmVjaXBpZW50KG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5UmVjaXBpZW50KG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgICogTWFpbiB0b2tlbiBidXkgZnVuY3Rpb24uCiAgICAgKiBCdXkgZm9yIHRoZSBzZW5kZXIgaXRzZWxmIG9yIGJ1eSBvbiB0aGUgYmVoYWxmIG9mIHNvbWVib2R5IGVsc2UgKHRoaXJkIHBhcnR5IGFkZHJlc3MpLgogICAgICovCiAgICBmdW5jdGlvbiBidXlSZWNpcGllbnQoYWRkcmVzcyByZWNpcGllbnQpIGR1cmluZ0Nyb3dkU2FsZSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKCFoYWx0ZWQpOwoKICAgICAgICB1aW50IHRva2VucyA9IHNhZmVNdWwobXNnLnZhbHVlLCBwcmljZShibG9jay50aW1lc3RhbXApKTsKICAgICAgICByZXF1aXJlKHNhZmVBZGQoc2FsZVRva2VuU3VwcGx5LHRva2Vucyk8PWNvaW5BbGxvY2F0aW9uICk7CgogICAgICAgIGJhbGFuY2VzW3JlY2lwaWVudF0gPSBzYWZlQWRkKGJhbGFuY2VzW3JlY2lwaWVudF0sIHRva2Vucyk7CgogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKICAgICAgICBzYWxlVG9rZW5TdXBwbHkgPSBzYWZlQWRkKHNhbGVUb2tlblN1cHBseSwgdG9rZW5zKTsKICAgICAgICBzYWxlc1ZvbHVtZSA9IHNhZmVBZGQoc2FsZXNWb2x1bWUsIG1zZy52YWx1ZSk7CgogICAgICAgIGlmICghZm91bmRlci5jYWxsLnZhbHVlKG1zZy52YWx1ZSkoKSkgcmV2ZXJ0KCk7IC8vaW1tZWRpYXRlbHkgc2VuZCBFdGhlciB0byBmb3VuZGVyIGFkZHJlc3MKCiAgICAgICAgQnV5KHJlY2lwaWVudCwgbXNnLnZhbHVlLCB0b2tlbnMpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHVwIGZvdW5kZXIgYWRkcmVzcyB0b2tlbiBiYWxhbmNlLgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvY2F0ZUZvdW5kZXJUb2tlbnMoKSBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoIGJsb2NrLnRpbWVzdGFtcCA+IGVuZERhdGV0aW1lICk7CiAgICAgICAgcmVxdWlyZSghZm91bmRlckFsbG9jYXRlZCk7CgogICAgICAgIGJhbGFuY2VzW2ZvdW5kZXJdID0gc2FmZUFkZChiYWxhbmNlc1tmb3VuZGVyXSwgZm91bmRlckFsbG9jYXRpb24pOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgZm91bmRlckFsbG9jYXRpb24pOwogICAgICAgIGZvdW5kZXJBbGxvY2F0ZWQgPSB0cnVlOwoKICAgICAgICBBbGxvY2F0ZUZvdW5kZXJUb2tlbnMobXNnLnNlbmRlciwgZm91bmRlckFsbG9jYXRpb24pOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHVwIGFuZ2VsIGFkZHJlc3MgdG9rZW4gYmFsYW5jZS4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVBbmdlbFRva2VucyhhZGRyZXNzIGFuZ2VsLCB1aW50IHRva2Vucykgb25seUFkbWluIHsKCiAgICAgICAgcmVxdWlyZShzYWZlQWRkKGFuZ2VsVG9rZW5TdXBwbHksdG9rZW5zKSA8PSBhbmdlbEFsbG9jYXRpb24gKTsKCiAgICAgICAgYmFsYW5jZXNbYW5nZWxdID0gc2FmZUFkZChiYWxhbmNlc1thbmdlbF0sIHRva2Vucyk7CiAgICAgICAgYW5nZWxUb2tlblN1cHBseSA9IHNhZmVBZGQoYW5nZWxUb2tlblN1cHBseSwgdG9rZW5zKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CgogICAgICAgIEFsbG9jYXRlQW5nZWxUb2tlbnMobXNnLnNlbmRlciwgYW5nZWwsIHRva2Vucyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBFbWVyZ2VuY3kgU3RvcCBjcm93ZHNhbGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhbHQoKSBvbmx5QWRtaW4gewogICAgICAgIGhhbHRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdW5oYWx0KCkgb25seUFkbWluIHsKICAgICAgICBoYWx0ZWQgPSBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSBhZG1pbiBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBvbmx5QWRtaW4gIHsKICAgICAgICBhZG1pbiA9IG5ld0FkbWluOwogICAgfQoKICAgIC8qKgogICAgICogYXJyYW5nZSB1bnNvbGQgY29pbnMKICAgICAqLwogICAgZnVuY3Rpb24gYXJyYW5nZVVuc29sZFRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDI1NiB0b2tlbnMpIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZSggYmxvY2sudGltZXN0YW1wID4gZW5kRGF0ZXRpbWUgKTsKICAgICAgICByZXF1aXJlKCBzYWZlQWRkKHNhbGVUb2tlblN1cHBseSx0b2tlbnMpIDw9IGNvaW5BbGxvY2F0aW9uICk7CiAgICAgICAgcmVxdWlyZSggYmFsYW5jZXNbaG9sZGVyXSA+MCApOwoKICAgICAgICBiYWxhbmNlc1tob2xkZXJdID0gc2FmZUFkZChiYWxhbmNlc1tob2xkZXJdLCB0b2tlbnMpOwogICAgICAgIHNhbGVUb2tlblN1cHBseSA9IHNhZmVBZGQoc2FsZVRva2VuU3VwcGx5LCB0b2tlbnMpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKCiAgICAgICAgQWxsb2NhdGVVbnNvbGRUb2tlbnMobXNnLnNlbmRlciwgaG9sZGVyLCB0b2tlbnMpOwoKICAgIH0KCn0KCgpjb250cmFjdCBNb2xkQ29pbkJvbnVzIGlzIFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBib251c0JhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJvbnVzQmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJvbnVzQmFsYW5jZXM7CgogICAgLy8gYWRtaW5pc3RyYXRvciBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKCiAgICAvLyBjcm93ZGZ1bmQgYWRkcmVzcwogICAgTW9sZENvaW4gcHVibGljIGZ1bmRBZGRyZXNzOwogICAgdWludCBwdWJsaWMgcmF0ZSA9IDEwOwogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKICAgIGJvb2wgcHVibGljIGhhbHRlZCA9IGZhbHNlOyAvL3RoZSBhZG1pbiBhZGRyZXNzIGNhbiBzZXQgdGhpcyB0byB0cnVlIHRvIGhhbHQgdGhlIHByZS1zZWxsIGR1ZSB0byBlbWVyZ2VuY3kKCiAgICBldmVudCBCdXlXaXRoQm9udXMoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgYWRkcmVzcyBpbmRleGVkIGludml0ZXIsIHVpbnQgZXRoLCB1aW50IHRva2VucywgdWludCBib251cyk7CiAgICBldmVudCBCdXlGb3JGcmllbmQoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgYWRkcmVzcyBpbmRleGVkIGZyaWVuZCwgdWludCBldGgsIHVpbnQgdG9rZW5zLCB1aW50IGJvbnVzKTsKCiAgICBtb2RpZmllciBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZG1pbik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB2YWxpZFNhbGUgewogICAgICAgIHJlcXVpcmUoIWhhbHRlZCk7CiAgICAgICAgcmVxdWlyZSghZnVuZEFkZHJlc3MuaGFsdGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gTW9sZENvaW5Cb251cyhNb2xkQ29pbiBfZnVuZEFkZHJlc3MsIHVpbnQgX3JhdGUpIHsKCiAgICAgICAgYWRtaW4gPSBtc2cuc2VuZGVyOwogICAgICAgIGZ1bmRBZGRyZXNzID0gX2Z1bmRBZGRyZXNzOwogICAgICAgIHJhdGUgPSBfcmF0ZTsKCiAgICB9CgogICAgZnVuY3Rpb24gYnV5V2l0aEJvbnVzKGFkZHJlc3MgaW52aXRlcikgdmFsaWRTYWxlIHBheWFibGUgewoKICAgICAgICByZXF1aXJlKCBtc2cuc2VuZGVyICE9IGludml0ZXIgKTsKCiAgICAgICAgdWludCB0b2tlbnMgPSBzYWZlTXVsKG1zZy52YWx1ZSwgZnVuZEFkZHJlc3MucHJpY2UoYmxvY2sudGltZXN0YW1wKSk7CiAgICAgICAgdWludCBib251cyA9IHNhZmVEaXYoc2FmZU11bCh0b2tlbnMsIHJhdGUpLCAxMDApOwoKICAgICAgICBmdW5kQWRkcmVzcy5idXlSZWNpcGllbnQudmFsdWUobXNnLnZhbHVlKShtc2cuc2VuZGVyKTsgLy9zZW5kIEV0aGVyIHRvIHByZS1zYWxlIGNvbnRyYWN0IGFkZHJlc3MKCiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBib251cyoyKTsKCiAgICAgICAgYm9udXNCYWxhbmNlc1tpbnZpdGVyXSA9IHNhZmVBZGQoYm9udXNCYWxhbmNlc1tpbnZpdGVyXSwgYm9udXMpOwogICAgICAgIGJvbnVzQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlQWRkKGJvbnVzQmFsYW5jZXNbbXNnLnNlbmRlcl0sIGJvbnVzKTsKICAgICAgICBCdXlXaXRoQm9udXMobXNnLnNlbmRlciwgaW52aXRlciwgbXNnLnZhbHVlLCB0b2tlbnMsIGJvbnVzKTsKCiAgICB9CgoKICAgIC8qKgogICAgICogRW1lcmdlbmN5IFN0b3AuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhbHQoKSBvbmx5QWRtaW4gewogICAgICAgIGhhbHRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdW5oYWx0KCkgb25seUFkbWluIHsKICAgICAgICBoYWx0ZWQgPSBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSBhZG1pbiBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBvbmx5QWRtaW4gIHsKICAgICAgICBhZG1pbiA9IG5ld0FkbWluOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVJhdGUodWludCBfcmF0ZSkgb25seUFkbWluICB7CiAgICAgICAgcmF0ZSA9IF9yYXRlOwogICAgfQoKfQ=='.
	

]
