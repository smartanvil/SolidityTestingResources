Class {
	#name : #SRTa975bbf3ce255ad7081c2f8a6c9b97c49475e334,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa975bbf3ce255ad7081c2f8a6c9b97c49475e334 >> base64 [
	^ ''.
	

]
