Class {
	#name : #SRT1c1aa049d56b7ef02dca61afc4a815e9aa95240b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c1aa049d56b7ef02dca61afc4a815e9aa95240b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IEFic3RyYWN0U3RhcmJhc2VUb2tlbiBpcyBFUkMyMCB7CiAgICBmdW5jdGlvbiBpc0Z1bmRyYWlzZXIoYWRkcmVzcyBmdW5kcmFpc2VyQWRkcmVzcykgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gY29tcGFueSgpIHB1YmxpYyByZXR1cm5zIChhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG9jYXRlVG9Dcm93ZHNhbGVQdXJjaGFzZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gYWxsb2NhdGVUb01hcmtldGluZ1N1cHBvcnRlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7Cn0KCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlIGNvbnRyYWN0IC0gU3RhcmJhc2UgbWFya2V0aW5nIGNhbXBhaWduIGNvbnRyYWN0IHRvIHJld2FyZCBzdXBwb3J0b3JzCiAqIEBhdXRob3IgU3RhcmJhc2UgUFRFLiBMVEQuIC0gPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJhOWMwYzdjZmM2ZTlkYWRkYzhkYmNiYzhkYWNjODdjYWM2Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4KICovCmNvbnRyYWN0IFN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24gaXMgT3duYWJsZSB7CiAgICAvKgogICAgICogIEV2ZW50cwogICAgICovCiAgICBldmVudCBOZXdDb250cmlidXRvciAoYWRkcmVzcyBpbmRleGVkIGNvbnRyaWJ1dG9yQWRkcmVzcywgdWludDI1NiB0b2tlbkNvdW50KTsKICAgIGV2ZW50IFVwZGF0ZUNvbnRyaWJ1dG9yc1Rva2VucyhhZGRyZXNzIGluZGV4ZWQgY29udHJpYnV0b3JBZGRyZXNzLCB1aW50MjU2IHRva2VuQ291bnQpOwogICAgZXZlbnQgV2l0aGRyYXdDb250cmlidXRvcnNUb2tlbihhZGRyZXNzIGluZGV4ZWQgY29udHJpYnV0b3JBZGRyZXNzLCB1aW50MjU2IHRva2VuV2l0aGRyYXduLCB1aW50IHJlbWFpbmluZ1Rva2Vucyk7CgogICAgLyoqCiAgICAgKiAgRXh0ZXJuYWwgY29udHJhY3RzCiAgICAgKi8KICAgIEFic3RyYWN0U3RhcmJhc2VUb2tlbiBwdWJsaWMgc3RhcmJhc2VUb2tlbjsKCiAgICAvKioKICAgICAqIFR5cGVzCiAgICAgKi8KICAgIHN0cnVjdCBDb250cmlidXRvciB7CiAgICAgICAgdWludDI1NiByZXdhcmRUb2tlbnM7CiAgICAgICAgdWludDI1NiB0cmFuc2ZlcnJlZFJld2FyZFRva2VuczsKICAgICAgICBtYXBwaW5nIChieXRlczMyID0+IGJvb2wpIGNvbnRyaWJ1dGlvbnM7ICAvLyBleGFtcGxlOiBrZWNjYWsyNTYoYmNtLXhkYTk4c2RmKSA9PiB0cnVlCiAgICB9CgogICAgLyoqCiAgICAgKiAgU3RvcmFnZQogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyB3b3Jrc2hvcDsgIC8vIGhvbGRzIHVuZGVsaXZlcmVkIFNUQVJzCiAgICBhZGRyZXNzW10gcHVibGljIGNvbnRyaWJ1dG9yczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gQ29udHJpYnV0b3IpIHB1YmxpYyBjb250cmlidXRvcjsKCiAgICAvKioKICAgICAqICBNb2RpZmllcnMKICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyT3IoYWRkcmVzcyBfYWxsb3dlZCkgewogICAgICAgIC8vIE9ubHkgb3duZXIgb3Igc3BlY2lmaWVkIGFkZHJlc3MgYXJlIGFsbG93ZWQgdG8gZG8gdGhpcyBhY3Rpb24uCiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBfYWxsb3dlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqICBGdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBzZXRzIG93bmVyIGFuZCB3b3Jrc2hvcCBhZGRyZXNzLgogICAgICogQHBhcmFtIHdvcmtzaG9wQWRkciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgaG9sZCB1bmRlbGl2ZXJlZCBTdGFyIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBTdGFyYmFzZU1hcmtldGluZ0NhbXBhaWduKGFkZHJlc3Mgd29ya3Nob3BBZGRyKSB7CiAgICAgICAgcmVxdWlyZSh3b3Jrc2hvcEFkZHIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHdvcmtzaG9wID0gd29ya3Nob3BBZGRyOwogICAgfQoKICAgIC8qCiAgICAgKiAgRXh0ZXJuYWwgRnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIGZvciBtYXJrZXRpbmcgY29udHJpYnV0b3IncyByZXdhcmQgd2l0aGRyYXdsCiAgICAgKiBAcGFyYW0gY29udHJpYnV0b3JBZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmlidXRvcgogICAgICogQHBhcmFtIHRva2Vuc1RvVHJhbnNmZXIgVG9rZW4gbnVtYmVyIHRvIHdpdGhkcmF3CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3UmV3YXJkZWRUb2tlbnMgKGFkZHJlc3MgY29udHJpYnV0b3JBZGRyZXNzLCB1aW50MjU2IHRva2Vuc1RvVHJhbnNmZXIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXJPcihjb250cmlidXRvckFkZHJlc3MpCiAgICB7CiAgICAgICAgcmVxdWlyZShjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2VucyA+IDAgJiYgdG9rZW5zVG9UcmFuc2ZlciA8PSBjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2VucyAmJiBhZGRyZXNzKHN0YXJiYXNlVG9rZW4pICE9IDApOwoKICAgICAgICBjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2VucyA9IFNhZmVNYXRoLnN1Yihjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2VucywgdG9rZW5zVG9UcmFuc2Zlcik7CgogICAgICAgIGNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10udHJhbnNmZXJyZWRSZXdhcmRUb2tlbnMgPSBTYWZlTWF0aC5hZGQoY29udHJpYnV0b3JbY29udHJpYnV0b3JBZGRyZXNzXS50cmFuc2ZlcnJlZFJld2FyZFRva2VucywgdG9rZW5zVG9UcmFuc2Zlcik7CgogICAgICAgIHN0YXJiYXNlVG9rZW4uYWxsb2NhdGVUb01hcmtldGluZ1N1cHBvcnRlcihjb250cmlidXRvckFkZHJlc3MsIHRva2Vuc1RvVHJhbnNmZXIpOwogICAgICAgIFdpdGhkcmF3Q29udHJpYnV0b3JzVG9rZW4oY29udHJpYnV0b3JBZGRyZXNzLCB0b2tlbnNUb1RyYW5zZmVyLCBjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2Vucyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFNldHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3RzJyBhZGRyZXNzZXMuCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VUb2tlbkFkZHJlc3MgVG9rZW4gYWRkcmVzcy4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0dXAoYWRkcmVzcyBzdGFyYmFzZVRva2VuQWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VUb2tlbikgPT0gMCk7CiAgICAgICAgc3RhcmJhc2VUb2tlbiA9IEFic3RyYWN0U3RhcmJhc2VUb2tlbihzdGFyYmFzZVRva2VuQWRkcmVzcyk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEluY2x1ZGUgbmV3IGNvbnRyaWJ1dG9yCiAgICAgKiBAcGFyYW0gY29udHJpYnV0b3JBZGRyZXNzIEEgY29udHJpYnV0b3IncyBhZGRyZXNzCiAgICAgKiBAcGFyYW0gdG9rZW5Db3VudCBudW1iZXIgb2YgdG9rZW5zIGFzc2lnbmVkIHRvIGNvbnRyaWJ1dG9yIG9uIHRoZWlyIGluY2x1c2lvbgogICAgICogQHBhcmFtIGNvbnRyaWJ1dGlvbklkIElkIG9mIGNvbnRyaWJ1dGlvbiBmcm9tIGJvdW50eSBhcHAgZGIKICAgICAqLwogICAgZnVuY3Rpb24gYWRkUmV3YXJkZm9yTmV3Q29udHJpYnV0b3IKICAgICAgICAoCiAgICAgICAgICAgIGFkZHJlc3MgY29udHJpYnV0b3JBZGRyZXNzLAogICAgICAgICAgICB1aW50MjU2IHRva2VuQ291bnQsCiAgICAgICAgICAgIHN0cmluZyBjb250cmlidXRpb25JZAogICAgICAgICkKICAgICAgICAgICAgZXh0ZXJuYWwKICAgICAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgYnl0ZXMzMiBpZCA9IGtlY2NhazI1Nihjb250cmlidXRpb25JZCk7CgogICAgICAgIHJlcXVpcmUoIWNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10uY29udHJpYnV0aW9uc1tpZF0pOwogICAgICAgIGFzc2VydChjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnJld2FyZFRva2VucyA9PSAwICYmIGNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10udHJhbnNmZXJyZWRSZXdhcmRUb2tlbnMgPT0gMCk7CgogICAgICAgIGNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10ucmV3YXJkVG9rZW5zID0gdG9rZW5Db3VudDsKICAgICAgICBjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLmNvbnRyaWJ1dGlvbnNbaWRdID0gdHJ1ZTsKICAgICAgICBjb250cmlidXRvcnMucHVzaChjb250cmlidXRvckFkZHJlc3MpOwogICAgICAgIE5ld0NvbnRyaWJ1dG9yKGNvbnRyaWJ1dG9yQWRkcmVzcywgdG9rZW5Db3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFVwZGF0ZXMgY29udHJpYnV0b3JzIHJld2FyZFRva2VucwogICAgICogQHBhcmFtIGNvbnRyaWJ1dG9yQWRkcmVzcyBBIGNvbnRyaWJ1dG9yJ3MgYWRkcmVzcwogICAgICogQHBhcmFtIHRva2VuQ291bnQgbnVtYmVyIG9mIHRva2VucyB0byB1cGRhdGUgZm9yIHRoZSBjb250cmlidXRvcgogICAgICogQHBhcmFtIGNvbnRyaWJ1dGlvbklkIElkIG9mIGNvbnRyaWJ1dGlvbiBmcm9tIGJvdW50eSBhcHAgZGIKICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlUmV3YXJkRm9yQ29udHJpYnV0b3IgKGFkZHJlc3MgY29udHJpYnV0b3JBZGRyZXNzLCB1aW50MjU2IHRva2VuQ291bnQsIHN0cmluZyBjb250cmlidXRpb25JZCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYnl0ZXMzMiBpZCA9IGtlY2NhazI1Nihjb250cmlidXRpb25JZCk7CgogICAgICAgIHJlcXVpcmUoY29udHJpYnV0b3JbY29udHJpYnV0b3JBZGRyZXNzXS5jb250cmlidXRpb25zW2lkXSk7CgogICAgICAgIGNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10ucmV3YXJkVG9rZW5zID0gU2FmZU1hdGguYWRkKGNvbnRyaWJ1dG9yW2NvbnRyaWJ1dG9yQWRkcmVzc10ucmV3YXJkVG9rZW5zLCB0b2tlbkNvdW50KTsKICAgICAgICBVcGRhdGVDb250cmlidXRvcnNUb2tlbnMoY29udHJpYnV0b3JBZGRyZXNzLCB0b2tlbkNvdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqICBQdWJsaWMgRnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgSW5mb3JtcyBhYm91dCBjb250cmlidXRvcnMgcmV3YXJkVG9rZW5zIGFuZCB0cmFuc2ZlcnJlZFJld2FyZFRva2VucyBzdGF0dXMKICAgICAqIEBwYXJhbSBjb250cmlidXRvckFkZHJlc3MgQSBjb250cmlidXRvcidzIGFkZHJlc3MKICAgICAqIEBwYXJhbSBjb250cmlidXRpb25JZCBJZCBvZiBjb250cmlidXRpb24gZnJvbSBib3VudHkgYXBwIGRiCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldENvbnRyaWJ1dG9ySW5mbyhhZGRyZXNzIGNvbnRyaWJ1dG9yQWRkcmVzcywgc3RyaW5nIGNvbnRyaWJ1dGlvbklkKQogICAgICBjb25zdGFudAogICAgICBwdWJsaWMKICAgICAgcmV0dXJucyAodWludDI1NiwgdWludDI1NiwgYm9vbCkKICAgIHsKICAgICAgICBieXRlczMyIGlkID0ga2VjY2FrMjU2KGNvbnRyaWJ1dGlvbklkKTsKCiAgICAgICAgcmV0dXJuKAogICAgICAgICAgY29udHJpYnV0b3JbY29udHJpYnV0b3JBZGRyZXNzXS5yZXdhcmRUb2tlbnMsCiAgICAgICAgICBjb250cmlidXRvcltjb250cmlidXRvckFkZHJlc3NdLnRyYW5zZmVycmVkUmV3YXJkVG9rZW5zLAogICAgICAgICAgY29udHJpYnV0b3JbY29udHJpYnV0b3JBZGRyZXNzXS5jb250cmlidXRpb25zW2lkXQogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgbnVtYmVyIG9mIGNvbnRyaWJ1dG9ycy4KICAgICAqLwogICAgZnVuY3Rpb24gbnVtYmVyT2ZDb250cmlidXRvcnMoKQogICAgICBjb25zdGFudAogICAgICBwdWJsaWMKICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgcmV0dXJuIGNvbnRyaWJ1dG9ycy5sZW5ndGg7CiAgICB9Cn0='.
	

]
