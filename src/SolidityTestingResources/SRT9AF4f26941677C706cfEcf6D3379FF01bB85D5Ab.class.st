Class {
	#name : #SRT9AF4f26941677C706cfEcf6D3379FF01bB85D5Ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9AF4f26941677C706cfEcf6D3379FF01bB85D5Ab >> base64 [
	^ ''.
	

]
