Class {
	#name : #SRT7563e06d6507dd9ee37ba9f957e0d57a6a16daa1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7563e06d6507dd9ee37ba9f957e0d57a6a16daa1 >> base64 [
	^ ''.
	

]
