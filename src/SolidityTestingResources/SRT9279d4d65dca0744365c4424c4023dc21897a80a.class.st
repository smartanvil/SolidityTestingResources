Class {
	#name : #SRT9279d4d65dca0744365c4424c4023dc21897a80a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9279d4d65dca0744365c4424c4023dc21897a80a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBFdGhlclNwYWNlIHsKICAgIC8vIFRoaXMgY29udHJhY3Qgd2FzIGhlYXZpbHkgaW5zcGlyZWQgYnkgRXRoZXJUYW5rcy9FdGhlckFybXkuCiAgICAKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgCiAgICBzdHJ1Y3QgU2hpcFByb2R1Y3QgewogICAgICAgIHVpbnQxNiBjbGFzczsgLy8gCiAgICAgICAgdWludDI1NiBzdGFydFByaWNlOyAvLyBpbml0aWFsIHByaWNlCiAgICAgICAgdWludDI1NiBjdXJyZW50UHJpY2U7IC8vIFRoZSBjdXJyZW50IHByaWNlLiBDaGFuZ2VzIGV2ZXJ5IHRpbWUgc29tZW9uZSBidXlzIHRoaXMga2luZCBvZiBzaGlwCiAgICAgICAgdWludDI1NiBlYXJuaW5nOyAvLyBUaGUgYW1vdW50IG9mIGVhcm5pbmcgZWFjaCBvd25lciBvZiB0aGlzIHNoaXAgZ2V0cyB3aGVuIHNvbWVvbmUgYnV5cyB0aGlzIHR5cGUgb2Ygc2hpcAogICAgICAgIHVpbnQ2NCBhbW91bnQ7IC8vIFRoZSBhbW91bnQgb2Ygc2hpcHMgaXNzdWVkCiAgICB9CiAgICAKICAgIHN0cnVjdCBTaGlwRW50aXR5IHsKICAgICAgICB1aW50MTYgbW9kZWw7CiAgICAgICAgYWRkcmVzcyBvd25lcjsgLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIHRoaXMgc2hpcAogICAgICAgIHVpbnQ2NCBsYXN0Q2FzaG91dEluZGV4OyAvLyBMYXN0IGFtb3VudCBleGlzdGluZyBpbiB0aGUgZ2FtZSB3aXRoIHRoZSBzYW1lIFByb2R1Y3RJRAogICAgICAgIGJvb2wgYmF0dGxlOwogICAgICAgIHVpbnQzMiBiYXR0bGVXaW5zOwogICAgICAgIHVpbnQzMiBiYXR0bGVMb3NzZXM7CiAgICB9CiAgICAKICAgIC8vIGV2ZW50IEV2ZW50UHJvZHVjdCAoCiAgICAvLyAgICAgdWludDE2IG1vZGVsLAogICAgLy8gICAgIHVpbnQxNiBjbGFzcywKICAgIC8vICAgICB1aW50MjU2IHByaWNlLAogICAgLy8gICAgIHVpbnQyNTYgZWFybmluZywKICAgIC8vICAgICB1aW50MjU2IGN1cnJlbnRUaW1lCiAgICAvLyApOyAKICAgIAogICAgZXZlbnQgRXZlbnRDYXNoT3V0ICgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQyNTYgYW1vdW50CiAgICApOwogICAgICAgIAogICAgZXZlbnQgRXZlbnRCdXlTaGlwICgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQxNiBwcm9kdWN0SUQsCiAgICAgICAgdWludDY0IHNoaXBJRAogICAgKTsKICAgIAogICAgZXZlbnQgRXZlbnRBZGRUb0JhdHRsZSAoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHBsYXllciwKICAgICAgICB1aW50NjQgaWQKICAgICk7CiAgICBldmVudCBFdmVudFJlbW92ZUZyb21CYXR0bGUgKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBwbGF5ZXIsCiAgICAgICAgdWludDY0IGlkCiAgICApOwogICAgZXZlbnQgRXZlbnRCYXR0bGUgKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBwbGF5ZXIsCiAgICAgICAgdWludDY0IGlkLAogICAgICAgIHVpbnQ2NCBpZFRvQXR0YWNrLAogICAgICAgIHVpbnQ2NCBpZFdpbm5lcgogICAgKTsKICAgICAgICAKICAgIGZ1bmN0aW9uIEV0aGVyU3BhY2UoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAgICAgICBuZXdTaGlwUHJvZHVjdCgwLCAgIDUwMDAwMDAwMDAwMDAwMDAwLCAgIDUwMDAwMDAwMDAwMDAwMCk7IC8vIDAuMDUsIDAuMDAwNQogICAgICAgIG5ld1NoaXBQcm9kdWN0KDAsICAgNzAwMDAwMDAwMDAwMDAwMDAsICAgNzAwMDAwMDAwMDAwMDAwKTsgLy8gMC4wNywgMC4wMDA3CiAgICAgICAgbmV3U2hpcFByb2R1Y3QoMCwgICA3MDAwMDAwMDAwMDAwMDAwMCwgICA3MDAwMDAwMDAwMDAwMDApOyAvLyAwLjA3LCAwLjAwMDcKICAgICAgICBuZXdTaGlwUHJvZHVjdCgwLCAgIDcwMDAwMDAwMDAwMDAwMDAwLCAgIDcwMDAwMDAwMDAwMDAwMCk7IC8vIDAuMDcsIDAuMDAwNwogICAgICAgIG5ld1NoaXBQcm9kdWN0KDAsICAxMDAwMDAwMDAwMDAwMDAwMDAsICAxMDAwMDAwMDAwMDAwMDAwKTsgLy8gMC4xMCwgMC4wMDEwCiAgICAgICAgbmV3U2hpcFByb2R1Y3QoMCwgIDEwMDAwMDAwMDAwMDAwMDAwMCwgIDEwMDAwMDAwMDAwMDAwMDApOyAvLyAwLjEwLCAwLjAwMTAKICAgICAgICBuZXdTaGlwUHJvZHVjdCgwLCAgMzAwMDAwMDAwMDAwMDAwMDAwLCAgMzAwMDAwMDAwMDAwMDAwMCk7IC8vIDAuMzAsIDAuMDAzMAogICAgICAgIG5ld1NoaXBQcm9kdWN0KDAsICAzMDAwMDAwMDAwMDAwMDAwMDAsICAzMDAwMDAwMDAwMDAwMDAwKTsgLy8gMC4zMCwgMC4wMDMwCiAgICAgICAgbmV3U2hpcFByb2R1Y3QoMCwgIDUwMDAwMDAwMDAwMDAwMDAwMCwgIDUwMDAwMDAwMDAwMDAwMDApOyAvLyAwLjUwLCAwLjAwNTAKICAgICAgICBuZXdTaGlwUHJvZHVjdCgwLCAgNTAwMDAwMDAwMDAwMDAwMDAwLCAgNTAwMDAwMDAwMDAwMDAwMCk7IC8vIDAuNTAsIDAuMDA1MAogICAgICAgIG5ld1NoaXBQcm9kdWN0KDAsICA3MDAwMDAwMDAwMDAwMDAwMDAsICA3MDAwMDAwMDAwMDAwMDAwKTsgLy8gMC43MCwgMC4wMDcwCiAgICAgICAgbmV3U2hpcFByb2R1Y3QoMCwgIDcwMDAwMDAwMDAwMDAwMDAwMCwgIDcwMDAwMDAwMDAwMDAwMDApOyAvLyAwLjcwLCAwLjAwNzAKICAgICAgICBuZXdTaGlwUHJvZHVjdCgwLCAgNzUwMDAwMDAwMDAwMDAwMDAwLCAgNzUwMDAwMDAwMDAwMDAwMCk7IC8vIDAuNzUsIDAuMDA3NQogICAgICAgIG5ld1NoaXBQcm9kdWN0KDAsIDEwMDAwMDAwMDAwMDAwMDAwMDAsIDEwMDAwMDAwMDAwMDAwMDAwKTsgLy8gMS4wMCwgMC4wMTAwCiAgICAgICAgbmV3U2hpcFByb2R1Y3QoMCwgMjMwMDAwMDAwMDAwMDAwMDAwMCwgMjMwMDAwMDAwMDAwMDAwMDApOyAvLyAyLjMwLCAwLjAyMzAKICAgIH0KICAgIAogICAgdWludDY0IHB1YmxpYyBuZXdJZFNoaXAgPSAwOyAvLyBUaGUgbmV4dCBJRCBmb3IgdGhlIG5ldyBzaGlwCiAgICB1aW50MTYgcHVibGljIG5ld01vZGVsU2hpcFByb2R1Y3QgPSAwOyAvLyBUaGUgbmV4dCBtb2RlbCB3aGVuIGNyZWF0aW5nIHNoaXBzCiAgICBtYXBwaW5nICh1aW50NjQgPT4gU2hpcEVudGl0eSkgcHVibGljIHNoaXBzOyAvLyBUaGUgc3RvcmFnZSAKICAgIG1hcHBpbmcgKHVpbnQxNiA9PiBTaGlwUHJvZHVjdCkgc2hpcFByb2R1Y3RzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50NjRbXSkgc2hpcE93bmVyczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICAKICAgIGZ1bmN0aW9uIG5ld1NoaXBQcm9kdWN0ICh1aW50MTYgX2NsYXNzLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfZWFybmluZykgcHJpdmF0ZSB7CiAgICAgICAgc2hpcFByb2R1Y3RzW25ld01vZGVsU2hpcFByb2R1Y3QrK10gPSBTaGlwUHJvZHVjdChfY2xhc3MsIF9wcmljZSwgX3ByaWNlLCBfZWFybmluZywgMCk7CiAgICAgICAgCiAgICAgICAgLy8gRXZlbnRQcm9kdWN0IChuZXdNb2RlbFNoaXBQcm9kdWN0LTEsIF9jbGFzcywgX3ByaWNlLCBfZWFybmluZywgbm93KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2FzaE91dCAoKSBwdWJsaWMgcGF5YWJsZSB7IC8vIHNob3VsZG50IGJlIHBheWFibGUKICAgICAgICB1aW50IF9iYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50NjQgaW5kZXg9MDsgaW5kZXg8c2hpcE93bmVyc1ttc2cuc2VuZGVyXS5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgdWludDY0IGlkID0gc2hpcE93bmVyc1ttc2cuc2VuZGVyXVtpbmRleF07IC8vIGVudGl0eSBpZAogICAgICAgICAgICB1aW50MTYgbW9kZWwgPSBzaGlwc1tpZF0ubW9kZWw7IC8vIHByb2R1Y3QgbW9kZWwgaWQKICAgICAgICAgICAgCiAgICAgICAgICAgIF9iYWxhbmNlICs9IHNoaXBQcm9kdWN0c1ttb2RlbF0uZWFybmluZyAqIChzaGlwUHJvZHVjdHNbbW9kZWxdLmFtb3VudCAtIHNoaXBzW2lkXS5sYXN0Q2FzaG91dEluZGV4KTsKCiAgICAgICAgICAgIHNoaXBzW2lkXS5sYXN0Q2FzaG91dEluZGV4ID0gc2hpcFByb2R1Y3RzW21vZGVsXS5hbW91bnQ7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJlcXVpcmUgKHRoaXMuYmFsYW5jZSA+PSBfYmFsYW5jZSk7IC8vIENoZWNraW5nIGlmIHRoaXMgY29udHJhY3QgaGFzIGVub3VnaHQgbW9uZXkgdG8gcGF5CiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoX2JhbGFuY2UpOwogICAgICAgIAogICAgICAgIEV2ZW50Q2FzaE91dCAobXNnLnNlbmRlciwgX2JhbGFuY2UpOwogICAgICAgIHJldHVybjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYnV5U2hpcCAodWludDE2IF9zaGlwTW9kZWwpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlIChtc2cudmFsdWUgPj0gc2hpcFByb2R1Y3RzW19zaGlwTW9kZWxdLmN1cnJlbnRQcmljZSk7IC8vdmFsdWUgaXMgaGlnaGVyIHRoYW4gcHJpY2UKICAgICAgICByZXF1aXJlIChzaGlwT3duZXJzW21zZy5zZW5kZXJdLmxlbmd0aCA8PSAxMCk7IC8vIG1heCAxMCBzaGlwcyBhbGxvd2VkIHBlciBwbGF5ZXIKCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IHNoaXBQcm9kdWN0c1tfc2hpcE1vZGVsXS5jdXJyZW50UHJpY2UpewogICAgICAgICAgICAvLyBJZiBwbGF5ZXIgcGF5ZWQgbW9yZSwgcHV0IHRoZSByZXN0IGFtb3VudCBvZiBtb25leSBvbiBoaXMgYmFsYW5jZQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBtc2cudmFsdWUgLSBzaGlwUHJvZHVjdHNbX3NoaXBNb2RlbF0uY3VycmVudFByaWNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBzaGlwUHJvZHVjdHNbX3NoaXBNb2RlbF0uY3VycmVudFByaWNlICs9IHNoaXBQcm9kdWN0c1tfc2hpcE1vZGVsXS5lYXJuaW5nOwogICAgCiAgICAgICAgc2hpcHNbbmV3SWRTaGlwKytdID0gU2hpcEVudGl0eShfc2hpcE1vZGVsLCBtc2cuc2VuZGVyLCArK3NoaXBQcm9kdWN0c1tfc2hpcE1vZGVsXS5hbW91bnQsIGZhbHNlLCAwLCAwKTsKCiAgICAgICAgc2hpcE93bmVyc1ttc2cuc2VuZGVyXS5wdXNoKG5ld0lkU2hpcC0xKTsKCiAgICAgICAgLy8gQWZ0ZXIgYWxsIG93bmVycyBvZiB0aGUgc2FtZSB0eXBlIG9mIHNoaXAgZ290IHRoZWlyIGVhcm5pbmdzLCBhZG1pbnMgZ2V0IHRoZSBhbW91bnQgd2hpY2ggcmVtYWlucyBhbmQgbm8gb25lIG5lZWQgaXQKICAgICAgICAvLyBCYXNpY2FsbHksIGl0IGlzIHRoZSBzdGFydCBwcmljZSBvZiB0aGUgc2hpcC4KICAgICAgICBiYWxhbmNlc1tvd25lcl0gKz0gc2hpcFByb2R1Y3RzW19zaGlwTW9kZWxdLnN0YXJ0UHJpY2U7CiAgICAgICAgCiAgICAgICAgRXZlbnRCdXlTaGlwIChtc2cuc2VuZGVyLCBfc2hpcE1vZGVsLCBuZXdJZFNoaXAtMSk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgCiAgICAvLyBNYW5hZ2VtZW50CiAgICBmdW5jdGlvbiBuZXdTaGlwICh1aW50MTYgX2NsYXNzLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfZWFybmluZykgcHVibGljIHsKICAgICAgICByZXF1aXJlIChvd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICBzaGlwUHJvZHVjdHNbbmV3TW9kZWxTaGlwUHJvZHVjdCsrXSA9IFNoaXBQcm9kdWN0KF9jbGFzcywgX3ByaWNlLCBfcHJpY2UsIF9lYXJuaW5nLCAwKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9CiAgICAKICAgIC8vIEJhdHRsZSBGdW5jdGlvbnMKICAgIAogICAgdWludCBiYXR0bGVTdGFrZSA9IDUwMDAwMDAwMDAwMDAwMDAwOyAvLyAwLjA1CiAgICB1aW50IGJhdHRsZUZlZSA9IDUwMDAwMDAwMDAwMDAwMDA7IC8vIDAuMDA1IG9yIDUlCiAgICAKICAgIHVpbnQgbm9uY2UgPSAwOwogICAgZnVuY3Rpb24gcmFuZCh1aW50IG1pbiwgdWludCBtYXgpIHB1YmxpYyByZXR1cm5zICh1aW50KXsKICAgICAgICBub25jZSsrOwogICAgICAgIHJldHVybiB1aW50KHNoYTMobm9uY2UrdWludDI1NihibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSkpJShtaW4rbWF4KzEpLW1pbjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkVG9CYXR0bGUodWludDY0IF9pZCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA9PSBiYXR0bGVTdGFrZSk7IC8vIG11c3QgcGF5IGV4YWN0bHkgdGhlIGJhdHRsZSBzdGFrZQogICAgICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gc2hpcHNbX2lkXS5vd25lcik7IC8vIG11c3QgYmUgdGhlIG93bmVyCiAgICAgICAgCiAgICAgICAgc2hpcHNbX2lkXS5iYXR0bGUgPSB0cnVlOwogICAgICAgIAogICAgICAgIEV2ZW50QWRkVG9CYXR0bGUobXNnLnNlbmRlciwgX2lkKTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlbW92ZUZyb21CYXR0bGUodWludDY0IF9pZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IHNoaXBzW19pZF0ub3duZXIpOyAvLyBtdXN0IGJlIHRoZSBvd25lcgogICAgICAgIAogICAgICAgIHNoaXBzW19pZF0uYmF0dGxlID0gZmFsc2U7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gYmF0dGxlU3Rha2U7CiAgICAgICAgCiAgICAgICAgRXZlbnRSZW1vdmVGcm9tQmF0dGxlKG1zZy5zZW5kZXIsIF9pZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJhdHRsZSh1aW50NjQgX2lkLCB1aW50NjQgX2lkVG9BdHRhY2spIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IHNoaXBzW19pZF0ub3duZXIpOyAvLyBtdXN0IGJlIHRoZSBvd25lcgogICAgICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA9PSBiYXR0bGVTdGFrZSk7IC8vIG11c3QgcGF5IGV4YWN0bHkgdGhlIGJhdHRsZSBzdGFrZQogICAgICAgIHJlcXVpcmUgKHNoaXBzW19pZFRvQXR0YWNrXS5iYXR0bGUgPT0gdHJ1ZSk7IC8vIHNoaXAgdG8gYXR0YWNrIG11c3QgYmUgaW4gYmF0dGxlIG1vZGUKICAgICAgICByZXF1aXJlIChzaGlwc1tfaWRdLmJhdHRsZSA9PSBmYWxzZSk7IC8vIGF0dGFja2luZyBzaGlwIG11c3Qgbm90IGJlIG9mZmVyZWQgZm9yIGJhdHRsZQogICAgICAgIAogICAgICAgIHVpbnQgcmFuZE51bWJlciA9IHJhbmQoMCwxKTsKICAgICAgICAKICAgICAgICBpZiAocmFuZE51bWJlciA9PSAxKSB7CiAgICAgICAgICAgIHNoaXBzW19pZF0uYmF0dGxlV2lucysrOwogICAgICAgICAgICBzaGlwc1tfaWRUb0F0dGFja10uYmF0dGxlTG9zc2VzKys7CiAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1tzaGlwc1tfaWRdLm93bmVyXSArPSAoYmF0dGxlU3Rha2UgKiAyKSAtIGJhdHRsZUZlZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIEV2ZW50QmF0dGxlKG1zZy5zZW5kZXIsIF9pZCwgX2lkVG9BdHRhY2ssIF9pZCk7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNoaXBzW19pZF0uYmF0dGxlTG9zc2VzKys7CiAgICAgICAgICAgIHNoaXBzW19pZFRvQXR0YWNrXS5iYXR0bGVXaW5zKys7CiAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1tzaGlwc1tfaWRUb0F0dGFja10ub3duZXJdICs9IChiYXR0bGVTdGFrZSAqIDIpIC0gYmF0dGxlRmVlOwogICAgICAgICAgICAKICAgICAgICAgICAgRXZlbnRCYXR0bGUobXNnLnNlbmRlciwgX2lkLCBfaWRUb0F0dGFjaywgX2lkVG9BdHRhY2spOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlc1tvd25lcl0gKz0gYmF0dGxlRmVlOwogICAgICAgIAogICAgICAgIHNoaXBzW19pZFRvQXR0YWNrXS5iYXR0bGUgPSBmYWxzZTsKICAgIH0KICAgIAogICAgLy8gVUkgRnVuY3Rpb25zCiAgICBmdW5jdGlvbiBnZXRQbGF5ZXJTaGlwTW9kZWxCeUlkKHVpbnQ2NCBfaWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MTYpIHsKICAgICAgICByZXR1cm4gc2hpcHNbX2lkXS5tb2RlbDsKICAgIH0KICAgIGZ1bmN0aW9uIGdldFBsYXllclNoaXBPd25lckJ5SWQodWludDY0IF9pZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gc2hpcHNbX2lkXS5vd25lcjsKICAgIH0KICAgIGZ1bmN0aW9uIGdldFBsYXllclNoaXBCYXR0bGVCeUlkKHVpbnQ2NCBfaWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHNoaXBzW19pZF0uYmF0dGxlOwogICAgfQogICAgZnVuY3Rpb24gZ2V0UGxheWVyU2hpcEJhdHRsZVdpbnNCeUlkKHVpbnQ2NCBfaWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MzIpIHsKICAgICAgICByZXR1cm4gc2hpcHNbX2lkXS5iYXR0bGVXaW5zOwogICAgfQogICAgZnVuY3Rpb24gZ2V0UGxheWVyU2hpcEJhdHRsZUxvc3Nlc0J5SWQodWludDY0IF9pZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQzMikgewogICAgICAgIHJldHVybiBzaGlwc1tfaWRdLmJhdHRsZUxvc3NlczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0UGxheWVyU2hpcENvdW50KGFkZHJlc3MgX3BsYXllcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2hpcE93bmVyc1tfcGxheWVyXS5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFBsYXllclNoaXBNb2RlbEJ5SW5kZXgoYWRkcmVzcyBfcGxheWVyLCB1aW50IGluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDE2KSB7CiAgICAgICAgcmV0dXJuIHNoaXBzW3NoaXBPd25lcnNbX3BsYXllcl1baW5kZXhdXS5tb2RlbDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0UGxheWVyU2hpcHMoYWRkcmVzcyBfcGxheWVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDY0W10pIHsKICAgICAgICByZXR1cm4gc2hpcE93bmVyc1tfcGxheWVyXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0UGxheWVyQmFsYW5jZShhZGRyZXNzIF9wbGF5ZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludCBfYmFsYW5jZSA9IGJhbGFuY2VzW19wbGF5ZXJdOwogICAgICAgIAogICAgICAgIGZvciAodWludDY0IGluZGV4PTA7IGluZGV4PHNoaXBPd25lcnNbX3BsYXllcl0ubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgIHVpbnQ2NCBpZCA9IHNoaXBPd25lcnNbX3BsYXllcl1baW5kZXhdOyAvLyBlbnRpdHkgaWQKICAgICAgICAgICAgdWludDE2IG1vZGVsID0gc2hpcHNbaWRdLm1vZGVsOyAvLyBwcm9kdWN0IG1vZGVsIGlkCgogICAgICAgICAgICBfYmFsYW5jZSArPSBzaGlwUHJvZHVjdHNbbW9kZWxdLmVhcm5pbmcgKiAoc2hpcFByb2R1Y3RzW21vZGVsXS5hbW91bnQgLSBzaGlwc1tpZF0ubGFzdENhc2hvdXRJbmRleCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBfYmFsYW5jZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0U2hpcFByb2R1Y3RDbGFzc0J5TW9kZWwodWludDE2IF9tb2RlbCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQxNikgewogICAgICAgIHJldHVybiBzaGlwUHJvZHVjdHNbX21vZGVsXS5jbGFzczsKICAgIH0KICAgIGZ1bmN0aW9uIGdldFNoaXBQcm9kdWN0U3RhcnRQcmljZUJ5TW9kZWwodWludDE2IF9tb2RlbCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2hpcFByb2R1Y3RzW19tb2RlbF0uc3RhcnRQcmljZTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldFNoaXBQcm9kdWN0Q3VycmVudFByaWNlQnlNb2RlbCh1aW50MTYgX21vZGVsKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzaGlwUHJvZHVjdHNbX21vZGVsXS5jdXJyZW50UHJpY2U7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRTaGlwUHJvZHVjdEVhcm5pbmdCeU1vZGVsKHVpbnQxNiBfbW9kZWwpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNoaXBQcm9kdWN0c1tfbW9kZWxdLmVhcm5pbmc7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRTaGlwUHJvZHVjdEFtb3VudEJ5TW9kZWwodWludDE2IF9tb2RlbCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiBzaGlwUHJvZHVjdHNbX21vZGVsXS5hbW91bnQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFNoaXBQcm9kdWN0Q291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDE2KSB7CiAgICAgICAgcmV0dXJuIG5ld01vZGVsU2hpcFByb2R1Y3Q7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRTaGlwQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIG5ld0lkU2hpcDsKICAgIH0KfQ=='.
	

]
