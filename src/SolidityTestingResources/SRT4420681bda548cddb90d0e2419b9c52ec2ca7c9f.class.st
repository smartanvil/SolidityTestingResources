Class {
	#name : #SRT4420681bda548cddb90d0e2419b9c52ec2ca7c9f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4420681bda548cddb90d0e2419b9c52ec2ca7c9f >> base64 [
	^ ''.
	

]
