Class {
	#name : #SRT54c14fcb13772f6c56d09264e8fc3b050a458cdb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT54c14fcb13772f6c56d09264e8fc3b050a458cdb >> base64 [
	^ ''.
	

]
