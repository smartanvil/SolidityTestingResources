Class {
	#name : #SRTe4D29b6D8B1B095F1E214106Cf9111c4840E8Ad1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe4D29b6D8B1B095F1E214106Cf9111c4840E8Ad1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKY29udHJhY3QgS2ViZXJ1bnR1bmdhbkFjYWsgewovLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKLy8jI1BheW91dCBpYWxhaCBhY2FrIGRhbiB0aWRhayBtZW5naWt1dCBhbnRyaWFuIyMjIwovLyMjS2VhY2FrYW4gYmVyZGFzYXJrYW4gcmFuZG9tIGhhc2hibG9jayBvbGVoIG1pbmVyIyMjIwovLyMjIyMgRGVwb3NpdCAwLjA1IEVUSEVSICsgZmVlIGdhcyB1dGsgcGFydGlzaXBhc2kgIyMjIwovLyMjIyMgMiUgZGFyaSAwLjA1IEV0aGVyIGFrYW4gZGlwZXJ1bnR1a2thbiB1dGsgZmVlIGtlcGFkYSBvd25lciAjIyMjCi8vIyMjIyBKaWthIHRyYW5zZmVyIGxlYmloIGRhcmkgMC4wNUV0aGVyIG1ha2Egc2lzYW55YSBha2FuIGRpa2VtYmFsaWthbiAjIyMjCi8vIyMjSmlrYSBiZXJ1bnR1bmcgbWFrYSBiaXNhIGxncyBkYXBhdCBwYXlvdXQjIyMjIyMjIyMjCi8vIyMjSmlrYSBnYWsgYmVydW50dW5nIG1ha2EgaGFydXMgd2FpdCAjIyMjIyMjIyMjCi8vIyMjcGF5b3V0IGlhbGFoIDEyNSUgIyMjIyMjIyMjIwovLyMjI3BheW91dCBpYWxhaCBvdG9tYXRpcyBkYW4gY29udHJhY3QgdGlkYWsgZGFwYXQgZGltb2RpZiBsYWdpIHNldGVsYWggZGVwbG95IG9sZWggc2VzaWFwYXB1biB0ZXJtYXN1ayBvd25lciAjIyMjIyMjIyMjCi8vQ09QWVJJR0hUIDIwMTcgaGFkaW9uZXllc29uZW5vCi8vRWR1a2FzaSBkYW4gZWtzcGVyaW1lbiBwdXJwb3NlIG9ubHkKCgogICAgYWRkcmVzcyBwcml2YXRlIG93bmVyOwogICAgCiAgICAvL1N0b3JlZCB2YXJpYWJsZXMKICAgIHVpbnQgcHJpdmF0ZSBiYWxhbmNlID0gMDsKICAgIHVpbnQgcHJpdmF0ZSBmZWUgPSAyOwogICAgdWludCBwcml2YXRlIG11bHRpcGxpZXIgPSAxMjU7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBVc2VyKSBwcml2YXRlIHVzZXJzOwogICAgRW50cnlbXSBwcml2YXRlIGVudHJpZXM7CiAgICB1aW50W10gcHJpdmF0ZSB1bnBhaWRFbnRyaWVzOwogICAgCiAgICAvL1NldCBvd25lciBvbiBjb250cmFjdCBjcmVhdGlvbgogICAgZnVuY3Rpb24gS2ViZXJ1bnR1bmdhbkFjYWsoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlvd25lciB7IGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBfIDt9CiAgICAKICAgIHN0cnVjdCBVc2VyIHsKICAgICAgICBhZGRyZXNzIGlkOwogICAgICAgIHVpbnQgZGVwb3NpdHM7CiAgICAgICAgdWludCBwYXlvdXRzUmVjZWl2ZWQ7CiAgICB9CiAgICAKICAgIHN0cnVjdCBFbnRyeSB7CiAgICAgICAgYWRkcmVzcyBlbnRyeUFkZHJlc3M7CiAgICAgICAgdWludCBkZXBvc2l0OwogICAgICAgIHVpbnQgcGF5b3V0OwogICAgICAgIGJvb2wgcGFpZDsKICAgIH0KCiAgICAvL0ZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHsKICAgICAgICBpbml0KCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGluaXQoKSBwcml2YXRlewogICAgICAgIAogICAgICAgIGlmIChtc2cudmFsdWUgPCA1MCBmaW5uZXkpIHsKICAgICAgICAgICAgIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgam9pbigpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBqb2luKCkgcHVibGljIHBheWFibGUgewogICAgICAgIAogICAgICAgIC8vTGltaXQgZGVwb3NpdHMgdG8gMC4wNUVUSAogICAgICAgIHVpbnQgZFZhbHVlID0gNTAgZmlubmV5OwogICAgICAgIAogICAgICAgIGlmIChtc2cudmFsdWUgPiA1MCBmaW5uZXkpIHsKICAgICAgICAgICAgCiAgICAgICAgCShtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gNTAgZmlubmV5KSk7CQogICAgICAgIAlkVmFsdWUgPSA1MCBmaW5uZXk7CiAgICAgICAgfQogICAgICAKICAgICAgICAvL0FkZCBuZXcgdXNlcnMgdG8gdGhlIHVzZXJzIGFycmF5CiAgICAgICAgaWYgKHVzZXJzW21zZy5zZW5kZXJdLmlkID09IGFkZHJlc3MoMCkpCiAgICAgICAgewogICAgICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5pZCA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmRlcG9zaXRzID0gMDsKICAgICAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0ucGF5b3V0c1JlY2VpdmVkID0gMDsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9BZGQgbmV3IGVudHJ5IHRvIHRoZSBlbnRyaWVzIGFycmF5CiAgICAgICAgZW50cmllcy5wdXNoKEVudHJ5KG1zZy5zZW5kZXIsIGRWYWx1ZSwgKGRWYWx1ZSAqIChtdWx0aXBsaWVyKSAvIDEwMCksIGZhbHNlKSk7CiAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0uZGVwb3NpdHMrKzsKICAgICAgICB1bnBhaWRFbnRyaWVzLnB1c2goZW50cmllcy5sZW5ndGggLTEpOwogICAgICAgIAogICAgICAgIC8vQ29sbGVjdCBmZWVzIGFuZCB1cGRhdGUgY29udHJhY3QgYmFsYW5jZQogICAgICAgIGJhbGFuY2UgKz0gKGRWYWx1ZSAqICgxMDAgLSBmZWUpKSAvIDEwMDsKICAgICAgICAKICAgICAgICB1aW50IGluZGV4ID0gdW5wYWlkRW50cmllcy5sZW5ndGggPiAxID8gcmFuZCh1bnBhaWRFbnRyaWVzLmxlbmd0aCkgOiAwOwogICAgICAgIEVudHJ5IHRoZUVudHJ5ID0gZW50cmllc1t1bnBhaWRFbnRyaWVzW2luZGV4XV07CiAgICAgICAgCiAgICAgICAgLy9QYXkgcGVuZGluZyBlbnRyaWVzIGlmIHRoZSBuZXcgYmFsYW5jZSBhbGxvd3MgZm9yIGl0CiAgICAgICAgaWYgKGJhbGFuY2UgPiB0aGVFbnRyeS5wYXlvdXQpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHVpbnQgcGF5b3V0ID0gdGhlRW50cnkucGF5b3V0OwogICAgICAgICAgICAKICAgICAgICAgICAgKHRoZUVudHJ5LmVudHJ5QWRkcmVzcy5zZW5kKHBheW91dCkpOwogICAgICAgICAgICB0aGVFbnRyeS5wYWlkID0gdHJ1ZTsKICAgICAgICAgICAgdXNlcnNbdGhlRW50cnkuZW50cnlBZGRyZXNzXS5wYXlvdXRzUmVjZWl2ZWQrKzsKCiAgICAgICAgICAgIGJhbGFuY2UgLT0gcGF5b3V0OwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGluZGV4IDwgdW5wYWlkRW50cmllcy5sZW5ndGggLSAxKQogICAgICAgICAgICAgICAgdW5wYWlkRW50cmllc1tpbmRleF0gPSB1bnBhaWRFbnRyaWVzW3VucGFpZEVudHJpZXMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgCiAgICAgICAgICAgIHVucGFpZEVudHJpZXMubGVuZ3RoLS07CiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICAvL0NvbGxlY3QgbW9uZXkgZnJvbSBmZWVzIGFuZCBwb3NzaWJsZSBsZWZ0b3ZlcnMgZnJvbSBlcnJvcnMgKGFjdHVhbCBiYWxhbmNlIHVudG91Y2hlZCkKICAgICAgICB1aW50IGZlZXMgPSB0aGlzLmJhbGFuY2UgLSBiYWxhbmNlOwogICAgICAgIGlmIChmZWVzID4gMCkKICAgICAgICB7CiAgICAgICAgICAgICAgICAob3duZXIuc2VuZChmZWVzKSk7CiAgICAgICAgfSAgICAgIAogICAgICAgCiAgICB9CiAgICAKICAgIC8vR2VuZXJhdGUgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDAgJiBtYXgKICAgIHVpbnQyNTYgY29uc3RhbnQgcHJpdmF0ZSBGQUNUT1IgPSAgMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3NTg0MDA3OTEzMTI5NjM5OTsKICAgIGZ1bmN0aW9uIHJhbmQodWludCBtYXgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludDI1NiByZXN1bHQpewogICAgICAgIHVpbnQyNTYgZmFjdG9yID0gRkFDVE9SICogMTAwIC8gbWF4OwogICAgICAgIHVpbnQyNTYgbGFzdEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyIC0gMTsKICAgICAgICB1aW50MjU2IGhhc2hWYWwgPSB1aW50MjU2KGJsb2NrLmJsb2NraGFzaChsYXN0QmxvY2tOdW1iZXIpKTsKICAgIAogICAgICAgIHJldHVybiB1aW50MjU2KCh1aW50MjU2KGhhc2hWYWwpIC8gZmFjdG9yKSkgJSBtYXg7CiAgICB9CiAgICAKICAgIAogICAgLy9Db250cmFjdCBtYW5hZ2VtZW50CiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5b3duZXIgcHJpdmF0ZSB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlTXVsdGlwbGllcih1aW50IG11bHRpKSBvbmx5b3duZXIgcHJpdmF0ZSB7CiAgICAgICAgaWYgKG11bHRpIDwgMTEwIHx8IG11bHRpID4gMTUwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBtdWx0aXBsaWVyID0gbXVsdGk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUZlZSh1aW50IG5ld0ZlZSkgb25seW93bmVyIHByaXZhdGUgewogICAgICAgIGlmIChmZWUgPiAyKSAKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgZmVlID0gbmV3RmVlOwogICAgfQogICAgCiAgICAKICAgIC8vSlNPTiBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIG11bHRpcGxpZXJGYWN0b3IoKSBjb25zdGFudCByZXR1cm5zICh1aW50IGZhY3Rvciwgc3RyaW5nIGluZm8pIHsKICAgICAgICBmYWN0b3IgPSBtdWx0aXBsaWVyOwogICAgICAgIGluZm8gPSAnbXVsdGlwbGl5ZXIgaWFsYWggMTI1JSc7IAogICAgfQogICAgCiAgICBmdW5jdGlvbiBjdXJyZW50RmVlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmZWVQZXJjZW50YWdlLCBzdHJpbmcgaW5mbykgewogICAgICAgIGZlZVBlcmNlbnRhZ2UgPSBmZWU7CiAgICAgICAgaW5mbyA9ICdmZWUgaWFsYWggMiUuJzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG90YWxFbnRyaWVzKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBjb3VudCwgc3RyaW5nIGluZm8pIHsKICAgICAgICBjb3VudCA9IGVudHJpZXMubGVuZ3RoOwogICAgICAgIGluZm8gPSAnc2ViZXJhcGEgYmFueWFrIGRlcG9zaXQnOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1c2VyU3RhdHMoYWRkcmVzcyB1c2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGRlcG9zaXRzLCB1aW50IHBheW91dHMsIHN0cmluZyBpbmZvKQogICAgewogICAgICAgIGlmICh1c2Vyc1t1c2VyXS5pZCAhPSBhZGRyZXNzKDB4MCkpCiAgICAgICAgewogICAgICAgICAgICBkZXBvc2l0cyA9IHVzZXJzW3VzZXJdLmRlcG9zaXRzOwogICAgICAgICAgICBwYXlvdXRzID0gdXNlcnNbdXNlcl0ucGF5b3V0c1JlY2VpdmVkOwogICAgICAgICAgICBpbmZvID0gJ1VzZXJzIHN0YXRzOiB0b3RhbCBkZXBvc2l0cywgcGF5b3V0cyBkaXRlcmltYS4nOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gZW50cnlEZXRhaWxzKHVpbnQgaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgdXNlciwgdWludCBwYXlvdXQsIGJvb2wgcGFpZCwgc3RyaW5nIGluZm8pCiAgICB7CiAgICAgICAgaWYgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICAgICAgICAgICAgdXNlciA9IGVudHJpZXNbaW5kZXhdLmVudHJ5QWRkcmVzczsKICAgICAgICAgICAgcGF5b3V0ID0gZW50cmllc1tpbmRleF0ucGF5b3V0IC8gMSBmaW5uZXk7CiAgICAgICAgICAgIHBhaWQgPSBlbnRyaWVzW2luZGV4XS5wYWlkOwogICAgICAgICAgICBpbmZvID0gJ0VudHJ5IGluZm86IHVzZXIgYWRkcmVzcywgZXhwZWN0ZWQgcGF5b3V0IGluIEZpbm5leXMsIHBheW91dCBzdGF0dXMuJzsKICAgICAgICB9CiAgICB9CiAgICAKICAgIAp9'.
	

]
