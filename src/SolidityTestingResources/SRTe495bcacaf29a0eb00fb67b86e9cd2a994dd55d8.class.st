Class {
	#name : #SRTe495bcacaf29a0eb00fb67b86e9cd2a994dd55d8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe495bcacaf29a0eb00fb67b86e9cd2a994dd55d8 >> base64 [
	^ 'LyoKCiAgQ29weXJpZ2h0IDIwMTcgWmVyb0V4IEludGwuCgogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKY29udHJhY3QgVG9rZW4gewoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkge30KCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkge30KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkge30KCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7fQoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IEVSQzIwVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKSAKICAgIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VzW190b10pOyAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpCiAgICAgICAgcHVibGljIAogICAgICAgIHJldHVybnMgKGJvb2wpIAogICAgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsgCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSAKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIAogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKfQoKY29udHJhY3QgVW5saW1pdGVkQWxsb3dhbmNlVG9rZW4gaXMgRVJDMjBUb2tlbiB7CgogICAgdWludCBjb25zdGFudCBNQVhfVUlOVCA9IDIqKjI1NiAtIDE7CgogICAgLy8vIEBkZXYgRVJDMjAgdHJhbnNmZXJGcm9tLCBtb2RpZmllZCBzdWNoIHRoYXQgYW4gYWxsb3dhbmNlIG9mIE1BWF9VSU5UIHJlcHJlc2VudHMgYW4gdW5saW1pdGVkIGFsbG93YW5jZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy83MTcKICAgIC8vLyBAcGFyYW0gX2Zyb20gQWRkcmVzcyB0byB0cmFuc2ZlciBmcm9tLgogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCB0byB0cmFuc2Zlci4KICAgIC8vLyBAcmV0dXJuIFN1Y2Nlc3Mgb2YgdHJhbnNmZXIuCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgICAgIHB1YmxpYyAKICAgICAgICByZXR1cm5zIChib29sKSAKICAgIHsKICAgICAgICB1aW50IGFsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2FuY2UgPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7IAogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgaWYgKGFsbG93YW5jZSA8IE1BWF9VSU5UKSB7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgU2FmZU1hdGggewogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKQogICAgICAgIGludGVybmFsCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9Cn0KCmNvbnRyYWN0IEV0aGVyVG9rZW4gaXMgVW5saW1pdGVkQWxsb3dhbmNlVG9rZW4sIFNhZmVNYXRoIHsKCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIG5hbWUgPSAiRXRoZXIgVG9rZW4iOwogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBzeW1ib2wgPSAiV0VUSCI7CiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIHZlcnNpb24gPSAiMi4wLjAiOyAvLyB2ZXJzaW9uIDEuMC4wIGRlcGxveWVkIG9uIG1haW5uZXQgYXQgMHgyOTU2MzU2Y2QyYTJiZjMyMDJmNzcxZjUwZDNkMTRhMzY3YjQ4MDcwCiAgICB1aW50OCBjb25zdGFudCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICAvLy8gQGRldiBGYWxsYmFjayB0byBjYWxsaW5nIGRlcG9zaXQgd2hlbiBldGhlciBpcyBzZW50IGRpcmVjdGx5IHRvIGNvbnRyYWN0LgogICAgZnVuY3Rpb24oKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBkZXBvc2l0KCk7CiAgICB9CgogICAgLy8vIEBkZXYgQnV5cyB0b2tlbnMgd2l0aCBFdGhlciwgZXhjaGFuZ2luZyB0aGVtIDE6MS4KICAgIGZ1bmN0aW9uIGRlcG9zaXQoKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIG1zZy52YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCBtc2cudmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgU2VsbHMgdG9rZW5zIGluIGV4Y2hhbmdlIGZvciBFdGhlciwgZXhjaGFuZ2luZyB0aGVtIDE6MS4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gc2VsbC4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyLnNlbmQoX3ZhbHVlKSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgYWRkcmVzcygwKSwgX3ZhbHVlKTsKICAgIH0KfQ=='.
	

]
