Class {
	#name : #SRT5e78b5a8d6bb2eff65b3eb03925a7c5450e0af27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e78b5a8d6bb2eff65b3eb03925a7c5450e0af27 >> base64 [
	^ ''.
	

]
