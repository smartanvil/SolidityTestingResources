Class {
	#name : #SRTe289630e0fd471b55e98b9cb959d39aec3e4abf8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe289630e0fd471b55e98b9cb959d39aec3e4abf8 >> base64 [
	^ ''.
	

]
