Class {
	#name : #SRTa69a5675527ddb30a0d5830a427328587a94843f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa69a5675527ddb30a0d5830a427328587a94843f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7Cgpjb250cmFjdCBvd25lZCB7CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7IAogIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOwp9IAoKY29udHJhY3QgSUVSQzIwVG9rZW4gewoKICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7CgogIC8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHt9CgogIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgdG8gYWRkcmVzcyBfdG8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCiAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCiAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7fQoKICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgCiAgLy8gVHJpZ2dlcmVkIHdoZW5ldmVyIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIGlzIGNhbGxlZAogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9IAoKY29udHJhY3QgVmFsdXNUb2tlbiBpcyBJRVJDMjBUb2tlbiwgb3duZWR7CgogIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICJWQUxVUyB0b2tlbiB2MS4wIjsKICBzdHJpbmcgcHVibGljIG5hbWUgPSAiVkFMVVMiOwogIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlZMUyI7CiAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlQ29udHJhY3RBZGRyZXNzOwogIHVpbnQyNTYgcHVibGljIHRva2VuRnJvemVuVW50aWxCbG9jazsKCiAgLyogUHJpdmF0ZSB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgdWludDI1NiBzdXBwbHkgPSAwOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2FuY2VzOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcmVzdHJpY3RlZEFkZHJlc3NlczsKCiAgLyogRXZlbnRzICovCiAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBUb2tlbkZyb3plbih1aW50MjU2IF9mcm96ZW5VbnRpbEJsb2NrLCBzdHJpbmcgX3JlYXNvbik7CgogIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IGFuZCAgc2V0cyByZXN0cmljdGVkIGFkZHJlc3NlcyAqLwogIGZ1bmN0aW9uIFZhbHVzVG9rZW4oKSB7CiAgICByZXN0cmljdGVkQWRkcmVzc2VzWzB4MF0gPSB0cnVlOwogICAgcmVzdHJpY3RlZEFkZHJlc3Nlc1sweDhGOGU1ZTY1MTVjM2U2MDg4YzMyNzI1N2JEY0YyYzk3M0IxNTMwYWRdID0gdHJ1ZTsKICAgIHJlc3RyaWN0ZWRBZGRyZXNzZXNbYWRkcmVzcyh0aGlzKV0gPSB0cnVlOwogICAgY3Jvd2RzYWxlQ29udHJhY3RBZGRyZXNzID0gMHg4RjhlNWU2NTE1YzNlNjA4OGMzMjcyNTdiRGNGMmM5NzNCMTUzMGFkOwogIH0KCiAgLyogUmV0dXJucyB0b3RhbCBzdXBwbHkgb2YgaXNzdWVkIHRva2VucyAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgcmV0dXJuIHN1cHBseTsKICB9CgogIC8qIFJldHVybnMgYmFsYW5jZSBvZiBhZGRyZXNzICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgLyogVHJhbnNmZXJzIHRva2VucyBmcm9tIHlvdXIgYWRkcmVzcyB0byBvdGhlciAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmxvY2subnVtYmVyIDwgdG9rZW5Gcm96ZW5VbnRpbEJsb2NrKSB0aHJvdzsgICAgLy8gVGhyb3cgaWYgdG9rZW4gaXMgZnJvemVuCiAgICBpZiAocmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKSB0aHJvdzsgICAgICAgICAgICAgICAgLy8gVGhyb3cgaWYgcmVjaXBpZW50IGlzIHJlc3RyaWN0ZWQgYWRkcmVzcwogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgIC8vIFRocm93IGlmIHNlbmRlciBoYXMgaW5zdWZmaWNpZW50IGJhbGFuY2UKICAgIGlmIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXSkgdGhyb3c7ICAvLyBUaHJvdyBpZiBvd2VyZmxvdyBkZXRlY3RlZAogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgIC8vIERlZHVjdCBzZW5kZXJzIGJhbGFuY2UKICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgcmVjaXZlcnMgYmxhYW5jZSAKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBUcmFuc2ZlciBldmVudAogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKiBBcHByb3ZlIG90aGVyIGFkZHJlc3MgdG8gc3BlbmQgdG9rZW5zIG9uIHlvdXIgYWNjb3VudCAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGJsb2NrLm51bWJlciA8IHRva2VuRnJvemVuVW50aWxCbG9jaykgdGhyb3c7ICAgIC8vIFRocm93IGlmIHRva2VuIGlzIGZyb3plbiAgICAgICAgCiAgICBhbGxvd2FuY2VzW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsgICAgICAgICAgLy8gU2V0IGFsbG93YW5jZSAgICAgICAgIAogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7ICAgICAgICAgICAgIC8vIFJhaXNlIEFwcHJvdmFsIGV2ZW50ICAgICAgICAgCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qIEFwcHJvdmUgYW5kIHRoZW4gY29tbXVuaWNhdGUgdGhlIGFwcHJvdmVkIGNvbnRyYWN0IGluIGEgc2luZ2xlIHR4ICovIAogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsgICAgICAgICAgICAKICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7ICAgICAgICAgICAgICAvLyBDYXN0IHNwZW5kZXIgdG8gdG9rZW5SZWNpcGllbnQgY29udHJhY3QgICAgICAgICAKICAgIGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYXBwcm92YWwgdG8gY29udHJhY3QgZm9yIF92YWx1ZSAgICAgICAgIAogICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsgIC8vIFJhaXNlIG1ldGhvZCBvbiBfc3BlbmRlciBjb250cmFjdCAgICAgICAgIAogICAgcmV0dXJuIHRydWU7ICAgICAKICB9ICAgICAKCiAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7ICAgICAgCiAgICBpZiAoYmxvY2subnVtYmVyIDwgdG9rZW5Gcm96ZW5VbnRpbEJsb2NrKSB0aHJvdzsgICAgLy8gVGhyb3cgaWYgdG9rZW4gaXMgZnJvemVuCiAgICBpZiAocmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKSB0aHJvdzsgICAgICAgICAgICAgICAgLy8gVGhyb3cgaWYgcmVjaXBpZW50IGlzIHJlc3RyaWN0ZWQgYWRkcmVzcyAgCiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgICAgICAgLy8gVGhyb3cgaWYgc2VuZGVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIGJhbGFuY2UgICAgIAogICAgaWYgKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dKSB0aHJvdzsgIC8vIFRocm93IGlmIG92ZXJmbG93IGRldGVjdGVkICAgIAogICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgIC8vIFRocm93IGlmIHlvdSBkbyBub3QgaGF2ZSBhbGxvd2FuY2UgICAgICAgCiAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVkdWN0IHNlbmRlcnMgYmFsYW5jZSAgICAKICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgcmVjaXBpZW50IGJsYWFuY2UgICAgICAgICAKICAgIGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAvLyBEZWR1Y3QgYWxsb3dhbmNlIGZvciB0aGlzIGFkZHJlc3MgICAgICAgICAKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBUcmFuc2ZlciBldmVudAogICAgcmV0dXJuIHRydWU7ICAgICAKICB9ICAgICAgICAgCgogIC8qIEdldCB0aGUgYW1vdW50IG9mIGFsbG93ZWQgdG9rZW5zIHRvIHNwZW5kICovICAgICAKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7ICAgICAgICAgCiAgICByZXR1cm4gYWxsb3dhbmNlc1tfb3duZXJdW19zcGVuZGVyXTsKICB9ICAgICAgICAgCgogIC8qIElzc3VlIG5ldyB0b2tlbnMgKi8gICAgIAogIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgeyAgICAgICAgIAogICAgaWYgKG1zZy5zZW5kZXIgIT0gY3Jvd2RzYWxlQ29udHJhY3RBZGRyZXNzKSB0aHJvdzsgICAgICAgICAgICAvLyBPbmx5IENyb3dkc2FsZSBhZGRyZXNzIGNhbiBtaW50IHRva2VucyAgICAgICAgCiAgICBpZiAocmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgIC8vIFRocm93IGlmIHVzZXIgd2FudHMgdG8gc2VuZCB0byByZXN0cmljdGVkIGFkZHJlc3MgICAgICAgCiAgICBpZiAoYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPCBiYWxhbmNlc1tfdG9dKSB0aHJvdzsgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgIHN1cHBseSArPSBfYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQogICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbWludGVkIGNvaW5zIHRvIHRhcmdldAogICAgTWludChfdG8sIF9hbW91bnQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgTWludCBldmVudCAgICAgICAKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIFRyYW5zZmVyIGV2ZW50IGZyb20gMHgKICB9ICAgICAKCiAgLyogU3RvcHMgYWxsIHRva2VuIHRyYW5zZmVycyBpbiBjYXNlIG9mIGVtZXJnZW5jeSAqLwogIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zZmVyc1VudGlsKHVpbnQyNTYgX2Zyb3plblVudGlsQmxvY2ssIHN0cmluZyBfcmVhc29uKSBvbmx5T3duZXIgeyAgICAgIAogICAgdG9rZW5Gcm96ZW5VbnRpbEJsb2NrID0gX2Zyb3plblVudGlsQmxvY2s7CiAgICBUb2tlbkZyb3plbihfZnJvemVuVW50aWxCbG9jaywgX3JlYXNvbik7CiAgfQoKICBmdW5jdGlvbiBpc1Jlc3RyaWN0ZWRBZGRyZXNzKGFkZHJlc3MgX3F1ZXJyeUFkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgYW5zd2VyKXsKICAgIHJldHVybiByZXN0cmljdGVkQWRkcmVzc2VzW19xdWVycnlBZGRyZXNzXTsKICB9Cn0='.
	

]
