Class {
	#name : #SRTad73155dc273ec605929f46d7f4f9aa72d992506,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad73155dc273ec605929f46d7f4f9aa72d992506 >> base64 [
	^ ''.
	

]
