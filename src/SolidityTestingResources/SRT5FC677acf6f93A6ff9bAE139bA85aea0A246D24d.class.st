Class {
	#name : #SRT5FC677acf6f93A6ff9bAE139bA85aea0A246D24d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5FC677acf6f93A6ff9bAE139bA85aea0A246D24d >> base64 [
	^ ''.
	

]
