Class {
	#name : #SRTfb38005627b5b4d3034dcf6d9651877d34830f29,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfb38005627b5b4d3034dcf6d9651877d34830f29 >> base64 [
	^ ''.
	

]
