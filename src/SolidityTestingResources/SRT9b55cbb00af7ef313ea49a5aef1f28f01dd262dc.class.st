Class {
	#name : #SRT9b55cbb00af7ef313ea49a5aef1f28f01dd262dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9b55cbb00af7ef313ea49a5aef1f28f01dd262dc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9Cgpjb250cmFjdCBCb251bVByZUlDTyBpcyBQYXVzYWJsZXsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJCb251bSBQcmVJQ08iOwoKICAgIHVpbnQgcHVibGljIGZpYXRWYWx1ZU11bHRpcGxpZXIgPSAxMCoqNjsKICAgIHVpbnQgcHVibGljIHRva2VuRGVjaW1hbHMgPSAxMCoqMTg7CgogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CgogICAgdWludCBwdWJsaWMgZXRoVXNkUmF0ZTsKICAgIHVpbnQgcHVibGljIGNvbGxlY3RlZCA9IDA7CiAgICB1aW50IHB1YmxpYyB0b2tlbnNTb2xkID0gMDsKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGRXaXRoQm9udXMgPSAwOwoKCiAgICBldmVudCBOZXdDb250cmlidXRpb24oYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludCB0b2tlbkFtb3VudCwgdWludCBldGhlckFtb3VudCk7CgogICAgZnVuY3Rpb24gQm9udW1QcmVJQ08oCiAgICAgICAgYWRkcmVzcyBfYmVuZWZpY2lhcnksCiAgICAgICAgdWludCBfYmFzZUV0aFVzZFJhdGUKICAgICkgcHVibGljIHsKICAgICAgICBiZW5lZmljaWFyeSA9IF9iZW5lZmljaWFyeTsKCiAgICAgICAgZXRoVXNkUmF0ZSA9IF9iYXNlRXRoVXNkUmF0ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gc2V0TmV3QmVuZWZpY2lhcnkoYWRkcmVzcyBuZXdCZW5lZmljaWFyeSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld0JlbmVmaWNpYXJ5ICE9IDB4MCk7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBuZXdCZW5lZmljaWFyeTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRFdGhVc2RSYXRlKHVpbnQgcmF0ZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHJhdGUgPiAwKTsKICAgICAgICBldGhVc2RSYXRlID0gcmF0ZTsKICAgIH0KCiAgICBtb2RpZmllciB1bmRlckNhcCgpewogICAgICAgIHJlcXVpcmUodG9rZW5zU29sZCA8IHVpbnQoNzUwMDAwKS5tdWwodG9rZW5EZWNpbWFscykpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbWluaW11bUFtb3VudCgpewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlLm11bChldGhVc2RSYXRlKS5kaXYoZmlhdFZhbHVlTXVsdGlwbGllci5tdWwoMSBldGhlcikpID49IDEwMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBpbnZlc3RvcnM7CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHB1YmxpYyB3aGVuTm90UGF1c2VkIG1pbmltdW1BbW91bnQgdW5kZXJDYXB7CiAgICAgICAgdWludCB0b2tlbnMgPSBtc2cudmFsdWUubXVsKGV0aFVzZFJhdGUpLmRpdihmaWF0VmFsdWVNdWx0aXBsaWVyKTsKICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQodG9rZW5zKTsKICAgICAgICAKICAgICAgICB0b2tlbnMgPSB0b2tlbnMuYWRkKHRva2Vucy5tdWwoMjUpLmRpdigxMDApKTsKICAgICAgICB0b2tlbnNTb2xkV2l0aEJvbnVzID0gIHRva2Vuc1NvbGRXaXRoQm9udXMuYWRkKHRva2Vucyk7CiAgICAgICAgCiAgICAgICAgaW52ZXN0b3JzW21zZy5zZW5kZXJdID0gaW52ZXN0b3JzW21zZy5zZW5kZXJdLmFkZCh0b2tlbnMpOwogICAgICAgIE5ld0NvbnRyaWJ1dGlvbihtc2cuc2VuZGVyLCB0b2tlbnMsIG1zZy52YWx1ZSk7CgogICAgICAgIGNvbGxlY3RlZCA9IGNvbGxlY3RlZC5hZGQobXNnLnZhbHVlKTsKCiAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KfQ=='.
	

]
