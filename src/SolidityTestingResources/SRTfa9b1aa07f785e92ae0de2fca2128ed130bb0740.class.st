Class {
	#name : #SRTfa9b1aa07f785e92ae0de2fca2128ed130bb0740,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa9b1aa07f785e92ae0de2fca2128ed130bb0740 >> base64 [
	^ ''.
	

]
