Class {
	#name : #SRT486cf19a550e2814aef970b14e509e93209a0151,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT486cf19a550e2814aef970b14e509e93209a0151 >> base64 [
	^ ''.
	

]
