Class {
	#name : #SRT8f199d74d89b977d3f0684f0572bc66b16120ed8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8f199d74d89b977d3f0684f0572bc66b16120ed8 >> base64 [
	^ 'LyoqCiAqICBUaGUgT3B0aW9uIHRva2VuIGNvbnRyYWN0IGNvbXBsaWVzIHdpdGggdGhlIEVSQzIwIHN0YW5kYXJkLgogKiAgVGhpcyBjb250cmFjdCBpbXBsZW1lbnRzIGFtZXJpY2FuIG9wdGlvbi4KICogIEhvbGRlcnMgb2YgdGhlIE9wdGlvbiB0b2tlbnMgY2FuIG1ha2UgYSBwdXJjaGFzZSBvZiB0aGUgdW5kZXJseWluZyBhc3NldAogKiAgYXQgdGhlIHByaWNlIG9mIFN0cmlrZSB1bnRpbCB0aGUgRXhwaXJhdGlvbiB0aW1lLgogKiAgVGhlIFN0cmlrZSBwcmljZSBhbmQgRXhwaXJhdGlvbiBkYXRlIGFyZSBzZXQgb25jZSBhbmQgY2FuJ3QgYmUgY2hhbmdlZC4KICogIEF1dGhvcjogQWxleGV5IEJ1a2h0ZXlldgogKiovCgpwcmFnbWEgc29saWRpdHkgXjAuNC40OwoKY29udHJhY3QgRVJDMjAgewogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhzdHJpbmcpOwogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKTsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBmdW5jdGlvbiBkZWNpbWFscygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQ4KTsKfQoKLyoKICAgIEFsbG93cyB0byByZWNyZWF0ZSBPcHRpb25Ub2tlbiBjb250cmFjdCBvbiB0aGUgc2FtZSBhZGRyZXNzLgogICAgSnVzdCBjcmVhdGUgbmV3IFRva2VuSG9sZGVycyhPcHRpb25Ub2tlbikgYW5kIHJlaW5pdGlhbGxpemUgT3B0aW9uVG9rZW4gdXNpbmcgaXQncyBhZGRyZXNzCiovCmNvbnRyYWN0IFRva2VuSG9sZGVycyB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgLyoKICAgICAgICBUb2tlbkhvbGRlcnMgY29udHJhY3QgaXMgYmVpbmcgY29ubmVjdGVkIHRvIE9wdGlvblRva2VuIG9uIGNyZWF0aW9uLgogICAgICAgIE5vYm9keSBjYW4gbW9kaWZ5IGJhbGFuY2VPZiBhbmQgYWxsb3dhbmNlIGV4Y2VwdCBPcHRpb25Ub2tlbgogICAgKi8KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZSgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKICAgIGZ1bmN0aW9uIHNldEJhbGFuY2UoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbDsKCiAgICAvKiBTZW5kIHNvbWUgb2YgeW91ciB0b2tlbnMgdG8gYSBnaXZlbiBhZGRyZXNzICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wgc3VjY2Vzcyk7CgogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCBvciBwZXJzb24gdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc2VuZGVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKCiAgICAvKiBBIGNvbnRyYWN0IG9yICBwZXJzb24gYXR0ZW1wdHMgdG8gZ2V0IHRoZSB0b2tlbnMgb2Ygc29tZWJvZHkgZWxzZS4KICAgICAqICBUaGlzIGlzIG9ubHkgYWxsb3dlZCBpZiB0aGUgdG9rZW4gaG9sZGVyIGFwcHJvdmVkLiAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJXaXRoQWxsb3dhbmNlKGFkZHJlc3MgX29yaWdpbiwgYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKfQoKLyoKICAgIFRoaXMgRVJDMjAgY29udHJhY3QgaXMgYSBiYXNpYyBvcHRpb24gY29udHJhY3QgdGhhdCBpbXBsZW1lbnRzIGEgdG9rZW4gd2hpY2gKICAgIGFsbG93cyB0byB0b2tlbiBob2xkZXIgdG8gYnV5IHNvbWUgYXNzZXQgZm9yIHRoZSBmaXhlZCBzdHJpa2UgcHJpY2UgYmVmb3JlIGV4cGlyYXRpb24gZGF0ZS4KKi8KY29udHJhY3QgT3B0aW9uVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdFUkMyMCc7CiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIE9wdGlvbiBjaGFyYWN0ZXJpc3RpY3MKICAgIHVpbnQyNTYgcHVibGljIGV4cGlyYXRpb24gPSAxNTEyMTcyODAwOyAvLzAyLjEyLjIwMTcgVXNlIHVuaXggdGltZXNwYW1wCiAgICB1aW50MjU2IHB1YmxpYyBzdHJpa2UgPSAyMDAwMDAwMDAwMDsKCiAgICBFUkMyMCBwdWJsaWMgYmFzZVRva2VuOwogICAgVG9rZW5Ib2xkZXJzIHB1YmxpYyB0b2tlbkhvbGRlcnM7CgogICAgYm9vbCBfaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCgogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgICAvLyBFUkMyMCBldmVudHMKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvLyBPcHRpb25Ub2tlbiBldmVudHMKICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgUmVkZWVtKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGV0aHZhbHVlKTsKICAgIGV2ZW50IElzc3VlKGFkZHJlc3MgaW5kZXhlZCBpc3N1ZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8vIE9ubHkgc2V0IG93bmVyIG9uIHRoZSBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gT3B0aW9uVG9rZW4oKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLyBFUkMyMCBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIHRva2VuSG9sZGVycy5iYWxhbmNlT2YoX293bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgc3VwcGx5KSB7CiAgICAgICAgLy8gdG90YWwgc3VwcGx5IGlzIGEgYmFsYW5jZSBvZiB0aGlzIGNvbnRyYWN0IGluIGJhc2UgdG9rZW5zCiAgICAgICAgcmV0dXJuIGJhc2VUb2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB9CgogICAgLyogU2VuZCBzb21lIG9mIHlvdXIgdG9rZW5zIHRvIGEgZ2l2ZW4gYWRkcmVzcyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZihub3cgPiBleHBpcmF0aW9uKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGlmKCF0b2tlbkhvbGRlcnMudHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IG9yIHBlcnNvbiB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYobm93ID4gZXhwaXJhdGlvbikKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZighdG9rZW5Ib2xkZXJzLmFwcHJvdmUobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8qIEEgY29udHJhY3Qgb3IgIHBlcnNvbiBhdHRlbXB0cyB0byBnZXQgdGhlIHRva2VucyBvZiBzb21lYm9keSBlbHNlLgogICAgICogIFRoaXMgaXMgb25seSBhbGxvd2VkIGlmIHRoZSB0b2tlbiBob2xkZXIgYXBwcm92ZWQuICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZihub3cgPiBleHBpcmF0aW9uKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGlmKCF0b2tlbkhvbGRlcnMudHJhbnNmZXJXaXRoQWxsb3dhbmNlKG1zZy5zZW5kZXIsIF9mcm9tLCBfdG8sIF92YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIHRva2VuSG9sZGVycy5hbGxvd2FuY2UoX293bmVyLCBfc3BlbmRlcik7CiAgICB9CgogICAgLy8gT3B0aW9uVG9rZW4gZnVuY3Rpb25zCgogICAgLyoKICAgICAgICBUaGVuIHdlIHNob3VsZCBwYXNzIGJhc2UgdG9rZW4gY29udHJhY3QgYWRkcmVzcyB0byBpbml0KCkgZnVuY3Rpb24uCiAgICAgICAgT25seSBjb250cmFjdCBjcmVhdG9yIGNhbiBjYWxsIGluaXQoKSBhbmQgb25seSBvbmNlCiAgICAqLwogICAgZnVuY3Rpb24gaW5pdChFUkMyMCBfYmFzZVRva2VuLCBUb2tlbkhvbGRlcnMgX3Rva2VuSG9sZGVycywgc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwKICAgICAgICAgICAgICAgIHVpbnQyNTYgX2V4cCwgdWludDI1NiBfc3RyaWtlKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgJiYgIV9pbml0aWFsaXplZCk7CgogICAgICAgIGJhc2VUb2tlbiA9IF9iYXNlVG9rZW47CiAgICAgICAgdG9rZW5Ib2xkZXJzID0gX3Rva2VuSG9sZGVyczsKCiAgICAgICAgLy8gaWYgYmFzZVRva2VuLnRvdGFsU3VwcGx5KCkgaXMgemVybyAtIHNvbWV0aGluZyBpcyB3cm9uZwogICAgICAgIGFzc2VydChiYXNlVG9rZW4udG90YWxTdXBwbHkoKSAhPSAwKTsKICAgICAgICAvLyB2YWxpZGF0ZSB0b2tlbkhvbGRlcnMgY29udHJhY3Qgb3duZXIgLSBpdCBzaG91bGQgYmUgT3B0aW9uVG9rZW4KICAgICAgICBhc3NlcnQodG9rZW5Ib2xkZXJzLnZhbGlkYXRlKCkpOwoKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBleHBpcmF0aW9uID0gX2V4cDsKICAgICAgICBzdHJpa2UgPSBfc3RyaWtlOwoKICAgICAgICBkZWNpbWFscyA9IGJhc2VUb2tlbi5kZWNpbWFscygpOwoKICAgICAgICBfaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qCiAgICAgICAgQWxsb3dzIHRvIGluY3JlYXNlIHRvdGFsU3VwcGx5IGFuZCBnZXQgT3B0aW9uVG9rZW5zIHRvIHRoZWlyIGJhbGFuY2UuCiAgICAgICAgQmVmb3JlIGNhbGxpbmcgZGVwb3NpdFRva2VucyB0aGUgY2FsbGVyIHNob3VsZCBhcHByb3ZlIHRoZSB0cmFuc2ZlciBmb3IgdGhpcyBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgdXNpbmcgRVJDMjAuYXBwcm92ZSgpLgogICAgICAgIEFjdHVhbGx5IHNob3VsZCBiZSBjYWxsZWQgYnkgY29udHJhY3Qgb3duZXIsIGJlY2F1c2Ugbm8gRVRIIHBheW91dCB3aWxsIGJlIGRvbmUgZm9yIHRva2VuIHRyYW5zZmVyLgogICAgKi8KICAgIGZ1bmN0aW9uIGlzc3VlKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKG5vdyA8PSBleHBpcmF0aW9uICYmIF9pbml0aWFsaXplZCk7CgogICAgICAgIHVpbnQyNTYgcmVjZWl2ZXJfYmFsYW5jZSA9IGJhbGFuY2VPZihtc2cuc2VuZGVyKSArIF92YWx1ZTsKICAgICAgICBhc3NlcnQocmVjZWl2ZXJfYmFsYW5jZSA+PSBfdmFsdWUpOwoKICAgICAgICAvLyBjaGVjayBpZiB0cmFuc2ZlciBmYWlsZWQKICAgICAgICBpZighYmFzZVRva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBfdmFsdWUpKQogICAgICAgICAgICByZXZlcnQoKTsKCiAgICAgICAgdG9rZW5Ib2xkZXJzLnNldEJhbGFuY2UobXNnLnNlbmRlciwgcmVjZWl2ZXJfYmFsYW5jZSk7CiAgICAgICAgSXNzdWUobXNnLnNlbmRlciwgcmVjZWl2ZXJfYmFsYW5jZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qCiAgICAgICAgQnV5IGJhc2UgdG9rZW5zIGZvciB0aGUgc3RyaWtlIHByaWNlCiAgICAqLwogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShub3cgPD0gZXhwaXJhdGlvbiAmJiBfaW5pdGlhbGl6ZWQpOyAvLyB0aGUgY29udHJhY3Qgc2hvdWxkIGJlIGluaXRpYWxpemVkIQogICAgICAgIHVpbnQyNTYgYXZhaWxhYmxlID0gYmFsYW5jZU9mKG1zZy5zZW5kZXIpOyAvLyBiYWxhbmNlIG9mIG9wdGlvbiBob2xkZXIKCiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHRva2VucyBmb3Igc2FsZQogICAgICAgIHJlcXVpcmUoYXZhaWxhYmxlID4gMCk7CgogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gbXNnLnZhbHVlIC8gKHN0cmlrZSk7CiAgICAgICAgYXNzZXJ0KHRva2VucyA+IDAgJiYgdG9rZW5zIDw9IG1zZy52YWx1ZSk7CgogICAgICAgIHVpbnQyNTYgY2hhbmdlID0gMDsKICAgICAgICB1aW50MjU2IGV0aF90b190cmFuc2ZlciA9IDA7CgogICAgICAgIGlmKHRva2VucyA+IGF2YWlsYWJsZSkgewogICAgICAgICAgICB0b2tlbnMgPSBhdmFpbGFibGU7IC8vIHNlbmQgYWxsIGF2YWlsYWJsZSB0b2tlbnMKICAgICAgICB9CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgY2hhbmdlIGZvciB0aGUgb3BlcmF0aW9uCiAgICAgICAgZXRoX3RvX3RyYW5zZmVyID0gdG9rZW5zICogc3RyaWtlOwogICAgICAgIGFzc2VydChldGhfdG9fdHJhbnNmZXIgPj0gdG9rZW5zKTsKICAgICAgICBjaGFuZ2UgPSBtc2cudmFsdWUgLSBldGhfdG9fdHJhbnNmZXI7CiAgICAgICAgYXNzZXJ0KGNoYW5nZSA8IG1zZy52YWx1ZSk7CgogICAgICAgIGlmKCFiYXNlVG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zKSkgewogICAgICAgICAgICByZXZlcnQoKTsgLy8gZXJyb3IsIHJldmVydCB0cmFuc2FjdGlvbgogICAgICAgIH0KCiAgICAgICAgdWludDI1NiBuZXdfYmFsYW5jZSA9IGJhbGFuY2VPZihtc2cuc2VuZGVyKSAtIHRva2VuczsKICAgICAgICB0b2tlbkhvbGRlcnMuc2V0QmFsYW5jZShtc2cuc2VuZGVyLCBuZXdfYmFsYW5jZSk7CgogICAgICAgIC8vIG5ldyBiYWxhbmNlIHNob3VsZCBiZSBsZXNzIHRoZW4gb2xkIGJhbGFuY2UKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mKG1zZy5zZW5kZXIpIDwgYXZhaWxhYmxlKTsKCiAgICAgICAgaWYoY2hhbmdlID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGNoYW5nZSk7IC8vIHJldHVybiB0aGUgY2hhbmdlCiAgICAgICAgfQoKICAgICAgICBpZihldGhfdG9fdHJhbnNmZXIgPiAwKSB7CiAgICAgICAgICAgIG93bmVyLnRyYW5zZmVyKGV0aF90b190cmFuc2Zlcik7IC8vIHRyYW5zZmVyIGV0aCBmb3IgdG9rZW5zIHRvIHRoZSBjb250cmFjdCBvd25lcgogICAgICAgIH0KCiAgICAgICAgUmVkZWVtKG1zZy5zZW5kZXIsIHRva2VucywgZXRoX3RvX3RyYW5zZmVyKTsKICAgIH0KCiAgICAvKgogICAgICAgIEFsbG93cyB0aGUgdGhlIGNvbnRyYWN0IG93bmVyIHRvIHdpdGhkcmF3IGFsbCB1bnNvbGQgYmFzZSB0b2tlbnMsCiAgICAgICAgYWxzbyBkZWluaXRpYWxpemVzIHRoZSB0b2tlbgogICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBpZihub3cgPD0gZXhwaXJhdGlvbiB8fCAhX2luaXRpYWxpemVkKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIHRyYW5zZmVyIGFsbCB0b2tlbnMKICAgICAgICBiYXNlVG9rZW4udHJhbnNmZXIob3duZXIsIHRvdGFsU3VwcGx5KCkpOwoKICAgICAgICAvLyBwZXJmb3JtIGRlaW5pdGlhbGl6YXRpb24KICAgICAgICBiYXNlVG9rZW4gPSBFUkMyMCgwKTsKICAgICAgICB0b2tlbkhvbGRlcnMgPSBUb2tlbkhvbGRlcnMoMCk7CiAgICAgICAgX2luaXRpYWxpemVkID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
