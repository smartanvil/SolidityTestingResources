Class {
	#name : #SRTcfb98637bcae43C13323EAa1731cED2B716962fD,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcfb98637bcae43C13323EAa1731cED2B716962fD >> base64 [
	^ ''.
	

]
