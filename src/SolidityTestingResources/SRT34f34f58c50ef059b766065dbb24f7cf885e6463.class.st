Class {
	#name : #SRT34f34f58c50ef059b766065dbb24f7cf885e6463,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT34f34f58c50ef059b766065dbb24f7cf885e6463 >> base64 [
	^ ''.
	

]
