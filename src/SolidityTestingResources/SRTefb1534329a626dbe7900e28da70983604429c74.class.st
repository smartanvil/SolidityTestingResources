Class {
	#name : #SRTefb1534329a626dbe7900e28da70983604429c74,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTefb1534329a626dbe7900e28da70983604429c74 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCB0b2tlbiB7IGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KTsKICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQgbWludGVkQW1vdW50KTsKICAgICAgICAgICAgICAgIH0KCmNvbnRyYWN0IENyb3dkU2FsZSB7CiAgICBlbnVtIFN0YXRlIHsKICAgICAgICBGdW5kcmFpc2luZywKICAgICAgICBGYWlsZWQsCiAgICAgICAgU3VjY2Vzc2Z1bCwKICAgICAgICBDbG9zZWQKICAgIH0KICAgIFN0YXRlIHB1YmxpYyBzdGF0ZSA9IFN0YXRlLkZ1bmRyYWlzaW5nOwoKICAgIHN0cnVjdCBDb250cmlidXRpb24gewogICAgICAgIHVpbnQgYW1vdW50OwogICAgICAgIGFkZHJlc3MgY29udHJpYnV0b3I7CiAgICB9CiAgICBDb250cmlidXRpb25bXSBjb250cmlidXRpb25zOwoKICAgIAogICAgCiAgICB1aW50IHB1YmxpYyB0b3RhbFJhaXNlZDsKICAgIHVpbnQgcHVibGljIGN1cnJlbnRCYWxhbmNlOwogICAgdWludCBwdWJsaWMgZGVhZGxpbmU7CiAgICB1aW50IHB1YmxpYyBjb21wbGV0ZWRBdDsKICAgIHVpbnQgcHVibGljIHByaWNlSW5XZWk7CiAgICB1aW50IHB1YmxpYyBmdW5kaW5nTWluaW11bVRhcmdldEluV2VpOyAKICAgIHVpbnQgcHVibGljIGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWk7IAogICAgdG9rZW4gcHVibGljIHRva2VuUmV3YXJkOwogICAgYWRkcmVzcyBwdWJsaWMgY3JlYXRvcjsKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OyAKICAgIHN0cmluZyBjYW1wYWlnblVybDsKICAgIGJ5dGUgY29uc3RhbnQgdmVyc2lvbiA9IDE7CgogICAgCiAgICBldmVudCBMb2dGdW5kaW5nUmVjZWl2ZWQoYWRkcmVzcyBhZGRyLCB1aW50IGFtb3VudCwgdWludCBjdXJyZW50VG90YWwpOwogICAgZXZlbnQgTG9nV2lubmVyUGFpZChhZGRyZXNzIHdpbm5lckFkZHJlc3MpOwogICAgZXZlbnQgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodWludCB0b3RhbFJhaXNlZCk7CiAgICBldmVudCBMb2dGdW5kZXJJbml0aWFsaXplZCgKICAgICAgICBhZGRyZXNzIGNyZWF0b3IsCiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeSwKICAgICAgICBzdHJpbmcgdXJsLAogICAgICAgIHVpbnQgX2Z1bmRpbmdNYXhpbXVtVGFyZ2V0SW5FdGhlciwgCiAgICAgICAgdWludDI1NiBkZWFkbGluZSk7CgoKICAgIG1vZGlmaWVyIGluU3RhdGUoU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgaWYgKHN0YXRlICE9IF9zdGF0ZSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICAgbW9kaWZpZXIgaXNNaW5pbXVtKCkgewogICAgICAgIGlmKG1zZy52YWx1ZSA8IHByaWNlSW5XZWkpIHRocm93OwogICAgICAgIF87CiAgICB9CgoKCiAgICBtb2RpZmllciBpc0NyZWF0b3IoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY3JlYXRvcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICAKICAgIG1vZGlmaWVyIGF0RW5kT2ZMaWZlY3ljbGUoKSB7CiAgICAgICAgaWYoISgoc3RhdGUgPT0gU3RhdGUuRmFpbGVkIHx8IHN0YXRlID09IFN0YXRlLlN1Y2Nlc3NmdWwpICYmIGNvbXBsZXRlZEF0ICsgMSBob3VycyA8IG5vdykpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgCiAgICBmdW5jdGlvbiBDcm93ZFNhbGUoCiAgICAgICAgdWludCBfdGltZUluTWludXRlc0ZvckZ1bmRyYWlzaW5nLAogICAgICAgIHN0cmluZyBfY2FtcGFpZ25VcmwsCiAgICAgICAgYWRkcmVzcyBfaWZTdWNjZXNzZnVsU2VuZFRvLAogICAgICAgIHVpbnQgX2Z1bmRpbmdNaW5pbXVtVGFyZ2V0SW5FdGhlciwKICAgICAgICB1aW50IF9mdW5kaW5nTWF4aW11bVRhcmdldEluRXRoZXIsCiAgICAgICAgdG9rZW4gX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkLAogICAgICAgIHVpbnQgX2V0aGVyQ29zdE9mRWFjaFRva2VuKQogICAgewogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2lmU3VjY2Vzc2Z1bFNlbmRUbzsKICAgICAgICBjYW1wYWlnblVybCA9IF9jYW1wYWlnblVybDsKICAgICAgICBmdW5kaW5nTWluaW11bVRhcmdldEluV2VpID0gX2Z1bmRpbmdNaW5pbXVtVGFyZ2V0SW5FdGhlciAqIDEgZXRoZXI7IAogICAgICAgIGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWkgPSBfZnVuZGluZ01heGltdW1UYXJnZXRJbkV0aGVyICogMSBldGhlcjsgCiAgICAgICAgZGVhZGxpbmUgPSBub3cgKyAoX3RpbWVJbk1pbnV0ZXNGb3JGdW5kcmFpc2luZyAqIDEgbWludXRlcyk7CiAgICAgICAgY3VycmVudEJhbGFuY2UgPSAwOwogICAgICAgIHRva2VuUmV3YXJkID0gdG9rZW4oX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkKTsKICAgICAgICBwcmljZUluV2VpID0gX2V0aGVyQ29zdE9mRWFjaFRva2VuIDsKICAgICAgICBMb2dGdW5kZXJJbml0aWFsaXplZCgKICAgICAgICAgICAgY3JlYXRvciwKICAgICAgICAgICAgYmVuZWZpY2lhcnksCiAgICAgICAgICAgIGNhbXBhaWduVXJsLAogICAgICAgICAgICBmdW5kaW5nTWF4aW11bVRhcmdldEluV2VpLAogICAgICAgICAgICBkZWFkbGluZSk7CiAgICB9CgogICAgZnVuY3Rpb24gY29udHJpYnV0ZSgpCiAgICBwdWJsaWMKICAgIGluU3RhdGUoU3RhdGUuRnVuZHJhaXNpbmcpIGlzTWluaW11bSgpIHBheWFibGUgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICB1aW50MjU2IGFtb3VudEluV2VpID0gbXNnLnZhbHVlOwoKICAgICAgICAKICAgICAgICBjb250cmlidXRpb25zLnB1c2goCiAgICAgICAgICAgIENvbnRyaWJ1dGlvbih7CiAgICAgICAgICAgICAgICBhbW91bnQ6IG1zZy52YWx1ZSwKICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yOiBtc2cuc2VuZGVyCiAgICAgICAgICAgICAgICB9KSAKICAgICAgICAgICAgKTsKCiAgICAgICAgdG90YWxSYWlzZWQgKz0gbXNnLnZhbHVlOwogICAgICAgIGN1cnJlbnRCYWxhbmNlID0gdG90YWxSYWlzZWQ7CgoKICAgICAgICBpZihmdW5kaW5nTWF4aW11bVRhcmdldEluV2VpICE9IDApewogICAgICAgICAgICAKICAgICAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50SW5XZWkgKiAxMDAwMDAwMDAwMDAwMDAwMDAwIC8gcHJpY2VJbldlaSk7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHRva2VuUmV3YXJkLm1pbnRUb2tlbihtc2cuc2VuZGVyLCBhbW91bnRJbldlaSAqIDEwMDAwMDAwMDAwMDAwMDAwMDAgLyBwcmljZUluV2VpKTsKICAgICAgICB9CgogICAgICAgIExvZ0Z1bmRpbmdSZWNlaXZlZChtc2cuc2VuZGVyLCBtc2cudmFsdWUsIHRvdGFsUmFpc2VkKTsKCiAgICAgICAgCgogICAgICAgIGNoZWNrSWZGdW5kaW5nQ29tcGxldGVPckV4cGlyZWQoKTsKICAgICAgICByZXR1cm4gY29udHJpYnV0aW9ucy5sZW5ndGggLSAxOyAKICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCkgewogICAgICAgIAogICAgICAgCiAgICAgICAgaWYgKGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWkgIT0gMCAmJiB0b3RhbFJhaXNlZCA+IGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWkpIHsKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdWNjZXNzZnVsOwogICAgICAgICAgICBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh0b3RhbFJhaXNlZCk7CiAgICAgICAgICAgIHBheU91dCgpOwogICAgICAgICAgICBjb21wbGV0ZWRBdCA9IG5vdzsKICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vdyA+IGRlYWRsaW5lICkgIHsKICAgICAgICAgICAgICAgIGlmKHRvdGFsUmFpc2VkID49IGZ1bmRpbmdNaW5pbXVtVGFyZ2V0SW5XZWkpewogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuU3VjY2Vzc2Z1bDsKICAgICAgICAgICAgICAgICAgICBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh0b3RhbFJhaXNlZCk7CiAgICAgICAgICAgICAgICAgICAgcGF5T3V0KCk7ICAKICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRBdCA9IG5vdzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5GYWlsZWQ7IAogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZEF0ID0gbm93OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IAogICAgICAgIAogICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXlPdXQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGluU3RhdGUoU3RhdGUuU3VjY2Vzc2Z1bCkKICAgICAgICB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZighYmVuZWZpY2lhcnkuc2VuZCh0aGlzLmJhbGFuY2UpKSB7CiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7CiAgICAgICAgICAgIGN1cnJlbnRCYWxhbmNlID0gMDsKICAgICAgICAgICAgTG9nV2lubmVyUGFpZChiZW5lZmljaWFyeSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGluU3RhdGUoU3RhdGUuRmFpbGVkKSAKICAgICAgICByZXR1cm5zIChib29sKQogICAgICAgIHsKICAgICAgICAgICAgZm9yKHVpbnQgaT0wOyBpPD1jb250cmlidXRpb25zLmxlbmd0aDsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZihjb250cmlidXRpb25zW2ldLmNvbnRyaWJ1dG9yID09IG1zZy5zZW5kZXIpewogICAgICAgICAgICAgICAgICAgIHVpbnQgYW1vdW50VG9SZWZ1bmQgPSBjb250cmlidXRpb25zW2ldLmFtb3VudDsKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb25zW2ldLmFtb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgaWYoIWNvbnRyaWJ1dGlvbnNbaV0uY29udHJpYnV0b3Iuc2VuZChhbW91bnRUb1JlZnVuZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uc1tpXS5hbW91bnQgPSBhbW91bnRUb1JlZnVuZDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFJhaXNlZCAtPSBhbW91bnRUb1JlZnVuZDsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJhbGFuY2UgPSB0b3RhbFJhaXNlZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ29udHJhY3QoKQogICAgICAgIHB1YmxpYwogICAgICAgIGlzQ3JlYXRvcigpCiAgICAgICAgYXRFbmRPZkxpZmVjeWNsZSgpCiAgICAgICAgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3QobXNnLnNlbmRlcik7CiAgICAgICAgICAgIAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gKCkgeyB0aHJvdzsgfQp9'.
	

]
