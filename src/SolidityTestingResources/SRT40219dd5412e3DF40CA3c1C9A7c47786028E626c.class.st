Class {
	#name : #SRT40219dd5412e3DF40CA3c1C9A7c47786028E626c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT40219dd5412e3DF40CA3c1C9A7c47786028E626c >> base64 [
	^ ''.
	

]
