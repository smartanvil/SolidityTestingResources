Class {
	#name : #SRT060acfacadd315734771feb83ff076c05ae0c5bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT060acfacadd315734771feb83ff076c05ae0c5bd >> base64 [
	^ ''.
	

]
