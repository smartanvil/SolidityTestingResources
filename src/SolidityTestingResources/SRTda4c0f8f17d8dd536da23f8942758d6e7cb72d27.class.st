Class {
	#name : #SRTda4c0f8f17d8dd536da23f8942758d6e7cb72d27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTda4c0f8f17d8dd536da23f8942758d6e7cb72d27 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICovCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgLyoqCiAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAgIEB0aXRsZSBFUkM4MjcgaW50ZXJmYWNlLCBhbiBleHRlbnNpb24gb2YgRVJDMjAgdG9rZW4gc3RhbmRhcmQKCiAgIEludGVyZmFjZSBvZiBhIEVSQzgyNyB0b2tlbiwgZm9sbG93aW5nIHRoZSBFUkMyMCBzdGFuZGFyZCB3aXRoIGV4dHJhCiAgIG1ldGhvZHMgdG8gdHJhbnNmZXIgdmFsdWUgYW5kIGRhdGEgYW5kIGV4ZWN1dGUgY2FsbHMgaW4gdHJhbnNmZXJzIGFuZAogICBhcHByb3ZhbHMuCiAqLwpjb250cmFjdCBFUkM4MjcgaXMgRVJDMjAgewoKICBmdW5jdGlvbiBhcHByb3ZlKCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhICkgcHVibGljIHJldHVybnMgKGJvb2wpOwoKfQoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgdWludDI1NiB0b3RhbFN1cHBseV87CgogIC8qKgogICogQGRldiB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGV4aXN0ZW5jZQogICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdG90YWxTdXBwbHlfOwogIH0KCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBAZGV2IEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX2FkZGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gaW5jcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBkZWNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3N1YnRyYWN0ZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBkZWNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgovKioKICAgQHRpdGxlIEVSQzgyNywgYW4gZXh0ZW5zaW9uIG9mIEVSQzIwIHRva2VuIHN0YW5kYXJkCgogICBJbXBsZW1lbnRhdGlvbiB0aGUgRVJDODI3LCBmb2xsb3dpbmcgdGhlIEVSQzIwIHN0YW5kYXJkIHdpdGggZXh0cmEKICAgbWV0aG9kcyB0byB0cmFuc2ZlciB2YWx1ZSBhbmQgZGF0YSBhbmQgZXhlY3V0ZSBjYWxscyBpbiB0cmFuc2ZlcnMgYW5kCiAgIGFwcHJvdmFscy4KICAgVXNlcyBPcGVuWmVwcGVsaW4gU3RhbmRhcmRUb2tlbi4KICovCmNvbnRyYWN0IEVSQzgyN1Rva2VuIGlzIEVSQzgyNywgU3RhbmRhcmRUb2tlbiB7CgogIC8qKgogICAgIEBkZXYgQWRkaXRpb24gdG8gRVJDMjAgdG9rZW4gbWV0aG9kcy4gSXQgYWxsb3dzIHRvCiAgICAgYXBwcm92ZSB0aGUgdHJhbnNmZXIgb2YgdmFsdWUgYW5kIGV4ZWN1dGUgYSBjYWxsIHdpdGggdGhlIHNlbnQgZGF0YS4KCiAgICAgQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQKICAgICBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZQogICAgIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcyByYWNlIGNvbmRpdGlvbgogICAgIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUKICAgICBhZnRlcndhcmRzOgogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CgogICAgIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICAgQHBhcmFtIF9kYXRhIEFCSS1lbmNvZGVkIGNvbnRyYWN0IGNhbGwgdG8gY2FsbCBgX3RvYCBhZGRyZXNzLgoKICAgICBAcmV0dXJuIHRydWUgaWYgdGhlIGNhbGwgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseQogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfc3BlbmRlciAhPSBhZGRyZXNzKHRoaXMpKTsKCiAgICBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICAgQGRldiBBZGRpdGlvbiB0byBFUkMyMCB0b2tlbiBtZXRob2RzLiBUcmFuc2ZlciB0b2tlbnMgdG8gYSBzcGVjaWZpZWQKICAgICBhZGRyZXNzIGFuZCBleGVjdXRlIGEgY2FsbCB3aXRoIHRoZSBzZW50IGRhdGEgb24gdGhlIHNhbWUgdHJhbnNhY3Rpb24KCiAgICAgQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAgIEBwYXJhbSBfZGF0YSBBQkktZW5jb2RlZCBjb250cmFjdCBjYWxsIHRvIGNhbGwgYF90b2AgYWRkcmVzcy4KCiAgICAgQHJldHVybiB0cnVlIGlmIHRoZSBjYWxsIGZ1bmN0aW9uIHdhcyBleGVjdXRlZCBzdWNjZXNzZnVsbHkKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcyh0aGlzKSk7CgogICAgc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3RvLmNhbGwoX2RhdGEpKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICAgQGRldiBBZGRpdGlvbiB0byBFUkMyMCB0b2tlbiBtZXRob2RzLiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0bwogICAgIGFub3RoZXIgYW5kIG1ha2UgYSBjb250cmFjdCBjYWxsIG9uIHRoZSBzYW1lIHRyYW5zYWN0aW9uCgogICAgIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICAgQHBhcmFtIF90byBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgIEBwYXJhbSBfZGF0YSBBQkktZW5jb2RlZCBjb250cmFjdCBjYWxsIHRvIGNhbGwgYF90b2AgYWRkcmVzcy4KCiAgICAgQHJldHVybiB0cnVlIGlmIHRoZSBjYWxsIGZ1bmN0aW9uIHdhcyBleGVjdXRlZCBzdWNjZXNzZnVsbHkKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwoKICAgIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3RvLmNhbGwoX2RhdGEpKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBZGRpdGlvbiB0byBTdGFuZGFyZFRva2VuIG1ldGhvZHMuIEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQKICAgKiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlciBhbmQgZXhlY3V0ZSBhIGNhbGwgd2l0aCB0aGUgc2VudCBkYXRhLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICogQHBhcmFtIF9kYXRhIEFCSS1lbmNvZGVkIGNvbnRyYWN0IGNhbGwgdG8gY2FsbCBgX3NwZW5kZXJgIGFkZHJlc3MuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3NwZW5kZXIgIT0gYWRkcmVzcyh0aGlzKSk7CgogICAgc3VwZXIuaW5jcmVhc2VBcHByb3ZhbChfc3BlbmRlciwgX2FkZGVkVmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBZGRpdGlvbiB0byBTdGFuZGFyZFRva2VuIG1ldGhvZHMuIERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQKICAgKiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlciBhbmQgZXhlY3V0ZSBhIGNhbGwgd2l0aCB0aGUgc2VudCBkYXRhLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKiBAcGFyYW0gX2RhdGEgQUJJLWVuY29kZWQgY29udHJhY3QgY2FsbCB0byBjYWxsIGBfc3BlbmRlcmAgYWRkcmVzcy4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSwgYnl0ZXMgX2RhdGEpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF9zcGVuZGVyICE9IGFkZHJlc3ModGhpcykpOwoKICAgIHN1cGVyLmRlY3JlYXNlQXBwcm92YWwoX3NwZW5kZXIsIF9zdWJ0cmFjdGVkVmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCmNvbnRyYWN0IE1pbnRhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICBldmVudCBNaW50RmluaXNoZWQoKTsKCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdG90YWxTdXBwbHlfID0gdG90YWxTdXBwbHlfLmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlIHRva2VuCiAqIEBkZXYgU3RhbmRhcmRUb2tlbiBtb2RpZmllZCB3aXRoIHBhdXNhYmxlIHRyYW5zZmVycy4KICoqLwpjb250cmFjdCBQYXVzYWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFBhdXNhYmxlIHsKCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLmFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmV0dXJuIHN1cGVyLmluY3JlYXNlQXBwcm92YWwoX3NwZW5kZXIsIF9hZGRlZFZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJldHVybiBzdXBlci5kZWNyZWFzZUFwcHJvdmFsKF9zcGVuZGVyLCBfc3VidHJhY3RlZFZhbHVlKTsKICB9Cn0KCgovKioKICAgQHRpdGxlIEwmIzIzNztmLCB0aGUgV2luZGluZyBUcmVlIHRva2VuCgogICBJbXBsZW1lbnRhdGlvbiBvZiBMJiMyMzc7ZiwgdGhlIEVSQzgyNyB0b2tlbiBmb3IgV2luZGluZyBUcmVlLCBhbiBleHRlbnNpb24gb2YgdGhlCiAgIEVSQzIwIHRva2VuIHdpdGggZXh0cmEgbWV0aG9kcyB0byB0cmFuc2ZlciB2YWx1ZSBhbmQgZGF0YSB0byBleGVjdXRlIGEgY2FsbAogICBvbiB0cmFuc2Zlci4KICAgVXNlcyBPcGVuWmVwcGVsaW4gU3RhbmRhcmRUb2tlbiwgRVJDODI3VG9rZW4sIE1pbnRhYmxlVG9rZW4gYW5kIFBhdXNhYmxlVG9rZW4uCiAqLwpjb250cmFjdCBMaWZUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBFUkM4MjdUb2tlbiwgTWludGFibGVUb2tlbiwgUGF1c2FibGVUb2tlbiB7CiAgLy8gVG9rZW4gTmFtZQogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgTkFNRSA9ICJMJiMyMzc7ZiI7CgogIC8vIFRva2VuIFN5bWJvbAogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgU1lNQk9MID0gIkxJRiI7CgogIC8vIFRva2VuIGRlY2ltYWxzCiAgdWludCBwdWJsaWMgY29uc3RhbnQgREVDSU1BTFMgPSAxODsKCiAgLyoqCiAgICogQGRldiBCdXJucyBhIHNwZWNpZmljIGFtb3VudCBvZiB0b2tlbnMuCiAgICoKICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGJ1cm5lZC4KICAgKi8KICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCB7CgogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICB0b3RhbFN1cHBseV8gPSB0b3RhbFN1cHBseV8uc3ViKF92YWx1ZSk7CgogICAgLy8gYSBUcmFuc2ZlciBldmVudCB0byAweDAgY2FuIGJlIHVzZWZ1bCBmb3Igb2JzZXJ2ZXJzIHRvIGtlZXAgdHJhY2sgb2YKICAgIC8vIGFsbCB0aGUgTGlmIGJ5IGp1c3QgbG9va2luZyBhdCB0aG9zZSBldmVudHMKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFkZHJlc3MoMCksIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEJ1cm5zIGEgc3BlY2lmaWMgYW1vdW50IG9mIHRva2VucyBvZiBhbiBhZGRyZXNzCiAgICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYnkgdGhlIG93bmVyIGluIHRoZSBtaW50aW5nIHByb2Nlc3MKICAgKgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYnVybmVkLgogICAqLwogIGZ1bmN0aW9uIGJ1cm4oYWRkcmVzcyBidXJuZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwoKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW2J1cm5lcl0pOwoKICAgIGJhbGFuY2VzW2J1cm5lcl0gPSBiYWxhbmNlc1tidXJuZXJdLnN1YihfdmFsdWUpOwogICAgdG90YWxTdXBwbHlfID0gdG90YWxTdXBwbHlfLnN1YihfdmFsdWUpOwoKICAgIC8vIGEgVHJhbnNmZXIgZXZlbnQgdG8gMHgwIGNhbiBiZSB1c2VmdWwgZm9yIG9ic2VydmVycyB0byBrZWVwIHRyYWNrIG9mCiAgICAvLyBhbGwgdGhlIExpZiBieSBqdXN0IGxvb2tpbmcgYXQgdGhvc2UgZXZlbnRzCiAgICBUcmFuc2ZlcihidXJuZXIsIGFkZHJlc3MoMCksIF92YWx1ZSk7CiAgfQp9CgoKLyoqCiAgIEB0aXRsZSBWZXN0ZWQgUGF5bWVudCBTY2hlZHVsZSBmb3IgTGlmVG9rZW4KCiAgIEFuIG93bmFibGUgdmVzdGluZyBzY2hlZHVsZSBmb3IgdGhlIExpZlRva2VuLCB0aGUgdG9rZW5zIGNhbiBvbmx5IGJlCiAgIGNsYWltZWQgYnkgdGhlIG93bmVyLiBUaGUgY29udHJhY3QgaGFzIGEgc3RhcnQgdGltZXN0YW1wLCBhIGR1cmF0aW9uCiAgIG9mIGVhY2ggcGVyaW9kIGluIHNlY29uZHMgKGl0IGNhbiBiZSBkYXlzLCBtb250aHMsIHllYXJzKSwgYSB0b3RhbAogICBhbW91bnQgb2YgcGVyaW9kcyBhbmQgYSBjbGlmZi4gVGhlIGF2YWlsYWJsZSBhbW91bnQgb2YgdG9rZW5zIHdpbGwKICAgYmUgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgYmFsYW5jZSBvZiBMaWZUb2tlbnMgb2YgdGhlIGNvbnRyYWN0IGF0CiAgIHRoYXQgdGltZS4KICovCgpjb250cmFjdCBWZXN0ZWRQYXltZW50IGlzIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBXaGVuIHRoZSB2ZXN0ZWQgc2NoZWR1bGUgc3RhcnRzCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lc3RhbXA7CgogIC8vIEhvdyBtYW55IHNlY29uZHMgZWFjaCBwZXJpb2Qgd2lsbCBsYXN0CiAgdWludDI1NiBwdWJsaWMgc2Vjb25kc1BlclBlcmlvZDsKCiAgLy8gSG93IG1hbnkgcGVyaW9kcyB3aWxsIGhhdmUgaW4gdG90YWwKICB1aW50MjU2IHB1YmxpYyB0b3RhbFBlcmlvZHM7CgogIC8vIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHZlc3RlZCBpbiB0b3RhbAogIHVpbnQyNTYgcHVibGljIHRva2VuczsKCiAgLy8gSG93IG1hbnkgdG9rZW5zIHdlcmUgY2xhaW1lZAogIHVpbnQyNTYgcHVibGljIGNsYWltZWQ7CgogIC8vIFRoZSB0b2tlbiBjb250cmFjdAogIExpZlRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gRHVyYXRpb24gKGluIHBlcmlvZHMpIG9mIHRoZSBpbml0aWFsIGNsaWZmIGluIHRoZSB2ZXN0aW5nIHNjaGVkdWxlCiAgdWludDI1NiBwdWJsaWMgY2xpZmZEdXJhdGlvbjsKCiAgLyoqCiAgICAgQGRldiBDb25zdHJ1Y3Rvci4KCiAgICAgQHBhcmFtIF9zdGFydFRpbWVzdGFtcCBzZWUgYHN0YXJ0VGltZXN0YW1wYAogICAgIEBwYXJhbSBfc2Vjb25kc1BlclBlcmlvZCBzZWUgYHNlY29uZHNQZXJQZXJpb2RgCiAgICAgQHBhcmFtIF90b3RhbFBlcmlvZHMgc2VlIGB0b3RhbFBlcmlvZHMKICAgICBAcGFyYW0gX2NsaWZmRHVyYXRpb24gc2VlIGBjbGlmZkR1cmF0aW9uYAogICAgIEBwYXJhbSBfdG9rZW5zIHNlZSBgdG9rZW5zYAogICAgIEBwYXJhbSB0b2tlbkFkZHJlc3MgdGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgICovCiAgZnVuY3Rpb24gVmVzdGVkUGF5bWVudCgKICAgIHVpbnQyNTYgX3N0YXJ0VGltZXN0YW1wLCB1aW50MjU2IF9zZWNvbmRzUGVyUGVyaW9kLAogICAgdWludDI1NiBfdG90YWxQZXJpb2RzLCB1aW50MjU2IF9jbGlmZkR1cmF0aW9uLAogICAgdWludDI1NiBfdG9rZW5zLCBhZGRyZXNzIHRva2VuQWRkcmVzcwogICkgewogICAgcmVxdWlyZShfc3RhcnRUaW1lc3RhbXAgPj0gYmxvY2sudGltZXN0YW1wKTsKICAgIHJlcXVpcmUoX3NlY29uZHNQZXJQZXJpb2QgPiAwKTsKICAgIHJlcXVpcmUoX3RvdGFsUGVyaW9kcyA+IDApOwogICAgcmVxdWlyZSh0b2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9jbGlmZkR1cmF0aW9uIDwgX3RvdGFsUGVyaW9kcyk7CiAgICByZXF1aXJlKF90b2tlbnMgPiAwKTsKCiAgICBzdGFydFRpbWVzdGFtcCA9IF9zdGFydFRpbWVzdGFtcDsKICAgIHNlY29uZHNQZXJQZXJpb2QgPSBfc2Vjb25kc1BlclBlcmlvZDsKICAgIHRvdGFsUGVyaW9kcyA9IF90b3RhbFBlcmlvZHM7CiAgICBjbGlmZkR1cmF0aW9uID0gX2NsaWZmRHVyYXRpb247CiAgICB0b2tlbnMgPSBfdG9rZW5zOwogICAgdG9rZW4gPSBMaWZUb2tlbih0b2tlbkFkZHJlc3MpOwogIH0KCiAgLyoqCiAgICAgQGRldiBHZXQgaG93IG1hbnkgdG9rZW5zIGFyZSBhdmFpbGFibGUgdG8gYmUgY2xhaW1lZAogICAqLwogIGZ1bmN0aW9uIGdldEF2YWlsYWJsZVRva2VucygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgcGVyaW9kID0gYmxvY2sudGltZXN0YW1wLnN1YihzdGFydFRpbWVzdGFtcCkKICAgICAgLmRpdihzZWNvbmRzUGVyUGVyaW9kKTsKCiAgICBpZiAocGVyaW9kIDwgY2xpZmZEdXJhdGlvbikgewogICAgICByZXR1cm4gMDsKICAgIH0gZWxzZSBpZiAocGVyaW9kID49IHRvdGFsUGVyaW9kcykgewogICAgICByZXR1cm4gdG9rZW5zLnN1YihjbGFpbWVkKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB0b2tlbnMubXVsKHBlcmlvZC5hZGQoMSkpLmRpdih0b3RhbFBlcmlvZHMpLnN1YihjbGFpbWVkKTsKICAgIH0KICB9CgogIC8qKgogICAgIEBkZXYgQ2xhaW0gdGhlIHRva2VucywgdGhleSBjYW4gYmUgY2xhaW1lZCBvbmx5IGJ5IHRoZSBvd25lcgogICAgIG9mIHRoZSBjb250cmFjdAoKICAgICBAcGFyYW0gYW1vdW50IGhvdyBtYW55IHRva2VucyB0byBiZSBjbGFpbWVkCiAgICovCiAgZnVuY3Rpb24gY2xhaW1Ub2tlbnModWludDI1NiBhbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgYXNzZXJ0KGdldEF2YWlsYWJsZVRva2VucygpID49IGFtb3VudCk7CgogICAgY2xhaW1lZCA9IGNsYWltZWQuYWRkKGFtb3VudCk7CiAgICB0b2tlbi50cmFuc2Zlcihvd25lciwgYW1vdW50KTsKICB9Cgp9CgoKLyoqCiAgIEB0aXRsZSBNYXJrZXQgVmFsaWRhdGlvbiBNZWNoYW5pc20gKE1WTSkKICovCmNvbnRyYWN0IExpZk1hcmtldFZhbGlkYXRpb25NZWNoYW5pc20gaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIC8vIFRoZSBMaWYgdG9rZW4gY29udHJhY3QKICBMaWZUb2tlbiBwdWJsaWMgbGlmVG9rZW47CgogIC8vIFRoZSBhZGRyZXNzIG9mIHRoZSBmb3VuZGF0aW9uIHdhbGxldC4gSXQgY2FuIGNsYWltIHBhcnQgb2YgdGhlIGV0aCBmdW5kcwogIC8vIGZvbGxvd2luZyBhbiBleHBvbmVudGlhbCBjdXJ2ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBNVk0gbGlmZXRpbWUgKDI0IG9yIDQ4CiAgLy8gbW9udGhzKS4gQWZ0ZXIgdGhhdCBpdCBjYW4gY2xhaW0gMTAwJSBvZiB0aGUgcmVtYWluaW5nIGV0aCBpbiB0aGUgTVZNLgogIGFkZHJlc3MgcHVibGljIGZvdW5kYXRpb25BZGRyOwoKICAvLyBUaGUgYW1vdW50IG9mIHdlaSB0aGF0IHRoZSBNVk0gcmVjZWl2ZWQgaW5pdGlhbGx5CiAgdWludDI1NiBwdWJsaWMgaW5pdGlhbFdlaTsKCiAgLy8gU3RhcnQgdGltZXN0YW1wIHNpbmNlIHdoaWNoIHRoZSBNVk0gYmVnaW5zIHRvIGFjY2VwdCB0b2tlbnMgdmlhIHNlbmRUb2tlbnMKICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWVzdGFtcDsKCiAgLy8gUXVhbnRpdHkgb2Ygc2Vjb25kcyBpbiBldmVyeSBwZXJpb2QsIHVzdWFsbHkgZXF1aXZhbGVudCB0byAzMCBkYXlzCiAgdWludDI1NiBwdWJsaWMgc2Vjb25kc1BlclBlcmlvZDsKCiAgLy8gTnVtYmVyIG9mIHBlcmlvZHMuIEl0IHNob3VsZCBiZSAyNCBvciA0OCAoZWFjaCBwZXJpb2QgaXMgcm91Z2hseSBhIG1vbnRoKQogIHVpbnQ4IHB1YmxpYyB0b3RhbFBlcmlvZHM7CgogIC8vIFRoZSB0b3RhbCBhbW91bnQgb2Ygd2VpIHRoYXQgd2FzIGNsYWltZWQgYnkgdGhlIGZvdW5kYXRpb24gc28gZmFyCiAgdWludDI1NiBwdWJsaWMgdG90YWxXZWlDbGFpbWVkID0gMDsKCiAgLy8gVGhlIHByaWNlIGF0IHdoaWNoIHRoZSBNVk0gYnV5cyB0b2tlbnMgYXQgdGhlIGJlZ2lubmluZyBvZiBpdHMgbGlmZXRpbWUKICB1aW50MjU2IHB1YmxpYyBpbml0aWFsQnV5UHJpY2UgPSAwOwoKICAvLyBBbW91bnQgb2YgdG9rZW5zIHRoYXQgd2VyZSBidXJuZWQgYnkgdGhlIE1WTQogIHVpbnQyNTYgcHVibGljIHRvdGFsQnVybmVkVG9rZW5zID0gMDsKCiAgLy8gQW1vdW50IG9mIHdlaSB0aGF0IHdhcyByZWltYnVyc2VkIHZpYSBzZW5kVG9rZW5zIGNhbGxzCiAgdWludDI1NiBwdWJsaWMgdG90YWxSZWltYnVyc2VkV2VpID0gMDsKCiAgLy8gVG90YWwgc3VwcGx5IG9mIHRva2VucyB3aGVuIHRoZSBNVk0gd2FzIGNyZWF0ZWQKICB1aW50MjU2IHB1YmxpYyBvcmlnaW5hbFRvdGFsU3VwcGx5OwoKICB1aW50MjU2IGNvbnN0YW50IFBSSUNFX0ZBQ1RPUiA9IDEwMDAwMDsKCiAgLy8gSGFzIHRoZSBNVk0gYmVlbiBmdW5kZWQgYnkgY2FsbGluZyBgZnVuZGA/IEl0IGNhbiBiZSBmdW5kZWQgb25seSBvbmNlCiAgYm9vbCBwdWJsaWMgZnVuZGVkID0gZmFsc2U7CgogIC8vIHRydWUgd2hlbiB0aGUgbWFya2V0IE1WTSBpcyBwYXVzZWQKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgLy8gdG90YWwgYW1vdW50IG9mIHNlY29uZHMgdGhhdCB0aGUgTVZNIHdhcyBwYXVzZWQKICB1aW50MjU2IHB1YmxpYyB0b3RhbFBhdXNlZFNlY29uZHMgPSAwOwoKICAvLyB0aGUgdGltZXN0YW1wIHdoZXJlIHRoZSBNVk0gd2FzIHBhdXNlZAogIHVpbnQyNTYgcHVibGljIHBhdXNlZFRpbWVzdGFtcDsKCiAgdWludDI1NltdIHB1YmxpYyBwZXJpb2RzOwoKICAvLyBFdmVudHMKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UodWludDI1NiBwYXVzZWRTZWNvbmRzKTsKCiAgZXZlbnQgQ2xhaW1lZFdlaSh1aW50MjU2IGNsYWltZWRXZWkpOwogIGV2ZW50IFNlbnRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludDI1NiBwcmljZSwgdWludDI1NiB0b2tlbnMsIHVpbnQyNTYgcmV0dXJuZWRXZWkpOwoKICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCl7CiAgICBhc3NlcnQoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpewogICAgYXNzZXJ0KHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICAgQGRldiBDb25zdHJ1Y3RvcgoKICAgICBAcGFyYW0gbGlmQWRkciB0aGUgbGlmIHRva2VuIGFkZHJlc3MKICAgICBAcGFyYW0gX3N0YXJ0VGltZXN0YW1wIHNlZSBgc3RhcnRUaW1lc3RhbXBgCiAgICAgQHBhcmFtIF9zZWNvbmRzUGVyUGVyaW9kIHNlZSBgc2Vjb25kc1BlclBlcmlvZGAKICAgICBAcGFyYW0gX3RvdGFsUGVyaW9kcyBzZWUgYHRvdGFsUGVyaW9kc2AKICAgICBAcGFyYW0gX2ZvdW5kYXRpb25BZGRyIHNlZSBgZm91bmRhdGlvbkFkZHJgCiAgICAqLwogIGZ1bmN0aW9uIExpZk1hcmtldFZhbGlkYXRpb25NZWNoYW5pc20oCiAgICBhZGRyZXNzIGxpZkFkZHIsIHVpbnQyNTYgX3N0YXJ0VGltZXN0YW1wLCB1aW50MjU2IF9zZWNvbmRzUGVyUGVyaW9kLAogICAgdWludDggX3RvdGFsUGVyaW9kcywgYWRkcmVzcyBfZm91bmRhdGlvbkFkZHIKICApIHsKICAgIHJlcXVpcmUobGlmQWRkciAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3N0YXJ0VGltZXN0YW1wID4gYmxvY2sudGltZXN0YW1wKTsKICAgIHJlcXVpcmUoX3NlY29uZHNQZXJQZXJpb2QgPiAwKTsKICAgIHJlcXVpcmUoX3RvdGFsUGVyaW9kcyA9PSAyNCB8fCBfdG90YWxQZXJpb2RzID09IDQ4KTsKICAgIHJlcXVpcmUoX2ZvdW5kYXRpb25BZGRyICE9IGFkZHJlc3MoMCkpOwoKICAgIGxpZlRva2VuID0gTGlmVG9rZW4obGlmQWRkcik7CiAgICBzdGFydFRpbWVzdGFtcCA9IF9zdGFydFRpbWVzdGFtcDsKICAgIHNlY29uZHNQZXJQZXJpb2QgPSBfc2Vjb25kc1BlclBlcmlvZDsKICAgIHRvdGFsUGVyaW9kcyA9IF90b3RhbFBlcmlvZHM7CiAgICBmb3VuZGF0aW9uQWRkciA9IF9mb3VuZGF0aW9uQWRkcjsKCiAgfQoKICAvKioKICAgICBAZGV2IFJlY2VpdmVzIHRoZSBpbml0aWFsIGZ1bmRpbmcgZnJvbSB0aGUgQ3Jvd2RzYWxlLiBDYWxjdWxhdGVzIHRoZQogICAgIGluaXRpYWwgYnV5IHByaWNlIGFzIGluaXRpYWxXZWkgLyB0b3RhbFN1cHBseQogICAgKi8KICBmdW5jdGlvbiBmdW5kKCkgcHVibGljIHBheWFibGUgb25seU93bmVyIHsKICAgIGFzc2VydCghZnVuZGVkKTsKCiAgICBvcmlnaW5hbFRvdGFsU3VwcGx5ID0gbGlmVG9rZW4udG90YWxTdXBwbHkoKTsKICAgIGluaXRpYWxXZWkgPSBtc2cudmFsdWU7CiAgICBpbml0aWFsQnV5UHJpY2UgPSBpbml0aWFsV2VpLgogICAgICBtdWwoUFJJQ0VfRkFDVE9SKS4KICAgICAgZGl2KG9yaWdpbmFsVG90YWxTdXBwbHkpOwoKICAgIGZ1bmRlZCA9IHRydWU7CiAgfQoKICAvKioKICAgICBAZGV2IGNhbGN1bGF0ZXMgdGhlIGV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbiBjdXJ2ZS4gSXQgZGV0ZXJtaW5lcyBob3cgbXVjaAogICAgIHdlaSBjYW4gYmUgZGlzdHJpYnV0ZWQgYmFjayB0byB0aGUgZm91bmRhdGlvbiBldmVyeSBtb250aC4gSXQgc3RhcnRzIHdpdGgKICAgICB2ZXJ5IGxvdyBhbW91bnRzIGVuZGluZyB3aXRoIGhpZ2hlciBjaHVua3MgYXQgdGhlIGVuZCBvZiB0aGUgTVZNIGxpZmV0aW1lCiAgICAqLwogIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RyaWJ1dGlvblBlcmlvZHMoKSBwdWJsaWMgewogICAgYXNzZXJ0KHRvdGFsUGVyaW9kcyA9PSAyNCB8fCB0b3RhbFBlcmlvZHMgPT0gNDgpOwogICAgYXNzZXJ0KHBlcmlvZHMubGVuZ3RoID09IDApOwoKICAgIC8vIFRhYmxlIHdpdGggdGhlIG1heCBkZWx0YSAlIHRoYXQgY2FuIGJlIGRpc3RyaWJ1dGVkIGJhY2sgdG8gdGhlIGZvdW5kYXRpb24gb24KICAgIC8vIGVhY2ggcGVyaW9kLiBJdCBmb2xsb3dzIGFuIGV4cG9uZW50aWFsIGN1cnZlIChzdGFydHMgd2l0aCBsb3dlciAlIGFuZCBlbmRzCiAgICAvLyB3aXRoIGhpZ2hlciAlKSB0byBrZWVwIHRoZSBmdW5kcyBpbiB0aGUgTVZNIGxvbmdlci4gZGVsdGFzMjQKICAgIC8vIGlzIHVzZWQgd2hlbiBNVk0gbGlmZXRpbWUgaXMgMjQgbW9udGhzLCBkZWx0YXM0OCB3aGVuIGl0J3MgNDggbW9udGhzLgogICAgLy8gVGhlIHN1bSBpcyBsZXNzIHRoYW4gMTAwJSBiZWNhdXNlIHRoZSBsYXN0ICUgaXMgbWlzc2luZzogYWZ0ZXIgdGhlIGxhc3QgcGVyaW9kCiAgICAvLyB0aGUgMTAwJSByZW1haW5pbmcgY2FuIGJlIGNsYWltZWQgYnkgdGhlIGZvdW5kYXRpb24uIFZhbHVlcyBtdWx0aXBsZWQgYnkgMTBeNQoKICAgIHVpbnQyNTZbMjRdIG1lbW9yeSBhY2N1bURpc3RyaWJ1dGlvbjI0ID0gWwogICAgICB1aW50MjU2KDApLCAxOCwgMTE3LCAzNTEsIDc2NywgMTQwNywKICAgICAgMjMwOSwgMzUxMSwgNTA0NywgNjk1MiwgOTI1NywgMTE5OTUsCiAgICAgIDE1MTk2LCAxODg4OSwgMjMxMDQsIDI3ODcwLCAzMzIxNSwgMzkxNjYsCiAgICAgIDQ1NzQ5LCA1Mjk5MiwgNjA5MjEsIDY5NTYxLCA3ODkzOCwgODkwNzYKICAgIF07CgogICAgdWludDI1Nls0OF0gbWVtb3J5IGFjY3VtRGlzdHJpYnV0aW9uNDggPSBbCiAgICAgIHVpbnQyNTYoMCksIDMsIDE4LCA1NCwgMTE3LCAyMTQsIDM1MSwgNTM0LAogICAgICA3NjcsIDEwNTYsIDE0MDYsIDE4MjIsIDIzMDgsIDI4NjksIDM1MTAsIDQyMzQsCiAgICAgIDUwNDYsIDU5NTAsIDY5NTAsIDgwNTEsIDkyNTYsIDEwNTY5LCAxMTk5NCwgMTM1MzUsCiAgICAgIDE1MTk1LCAxNjk3OCwgMTg4ODgsIDIwOTI5LCAyMzEwNCwgMjU0MTYsIDI3ODcwLCAzMDQ2OCwKICAgICAgMzMyMTQsIDM2MTEyLCAzOTE2NSwgNDIzNzYsIDQ1NzQ5LCA0OTI4NiwgNTI5OTIsIDU2ODY5LAogICAgICA2MDkyMSwgNjUxNTAsIDY5NTYwLCA3NDE1NSwgNzg5MzcsIDgzOTA5LCA4OTA3NSwgOTQ0MzgKICAgIF07CgogICAgZm9yICh1aW50OCBpID0gMDsgaSA8IHRvdGFsUGVyaW9kczsgaSsrKSB7CgogICAgICBpZiAodG90YWxQZXJpb2RzID09IDI0KSB7CiAgICAgICAgcGVyaW9kcy5wdXNoKGFjY3VtRGlzdHJpYnV0aW9uMjRbaV0pOwogICAgICB9IGVsc2UgewogICAgICAgIHBlcmlvZHMucHVzaChhY2N1bURpc3RyaWJ1dGlvbjQ4W2ldKTsKICAgICAgfQoKICAgIH0KICB9CgogIC8qKgogICAgIEBkZXYgUmV0dXJucyB0aGUgY3VycmVudCBwZXJpb2QgYXMgYSBudW1iZXIgZnJvbSAwIHRvIHRvdGFsUGVyaW9kcwoKICAgICBAcmV0dXJuIHRoZSBjdXJyZW50IHBlcmlvZCBhcyBhIG51bWJlciBmcm9tIDAgdG8gdG90YWxQZXJpb2RzCiAgICAqLwogIGZ1bmN0aW9uIGdldEN1cnJlbnRQZXJpb2RJbmRleCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NikgewogICAgYXNzZXJ0KGJsb2NrLnRpbWVzdGFtcCA+PSBzdGFydFRpbWVzdGFtcCk7CiAgICByZXR1cm4gYmxvY2sudGltZXN0YW1wLnN1YihzdGFydFRpbWVzdGFtcCkuCiAgICAgIHN1Yih0b3RhbFBhdXNlZFNlY29uZHMpLgogICAgICBkaXYoc2Vjb25kc1BlclBlcmlvZCk7CiAgfQoKICAvKioKICAgICBAZGV2IGNhbGN1bGF0ZXMgdGhlIGFjY3VtdWxhdGVkIGRpc3RyaWJ1dGlvbiBwZXJjZW50YWdlIGFzIG9mIG5vdywKICAgICBmb2xsb3dpbmcgdGhlIGV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbiBjdXJ2ZQoKICAgICBAcmV0dXJuIHRoZSBhY2N1bXVsYXRlZCBkaXN0cmlidXRpb24gcGVyY2VudGFnZSwgdXNlZCB0byBjYWxjdWxhdGUgdGhpbmdzCiAgICAgbGlrZSB0aGUgbWF4aW11bSBhbW91bnQgdGhhdCBjYW4gYmUgY2xhaW1lZCBieSB0aGUgZm91bmRhdGlvbgogICAgKi8KICBmdW5jdGlvbiBnZXRBY2N1bXVsYXRlZERpc3RyaWJ1dGlvblBlcmNlbnRhZ2UoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYgcGVyY2VudGFnZSkgewogICAgdWludDI1NiBwZXJpb2QgPSBnZXRDdXJyZW50UGVyaW9kSW5kZXgoKTsKCiAgICBhc3NlcnQocGVyaW9kIDwgdG90YWxQZXJpb2RzKTsKCiAgICByZXR1cm4gcGVyaW9kc1twZXJpb2RdOwogIH0KCiAgLyoqCiAgICAgQGRldiByZXR1cm5zIHRoZSBjdXJyZW50IGJ1eSBwcmljZSBhdCB3aGljaCB0aGUgTVZNIG9mZmVycyB0byBidXkgdG9rZW5zIHRvCiAgICAgYnVybiB0aGVtCgogICAgIEByZXR1cm4gdGhlIGN1cnJlbnQgYnV5IHByaWNlIChpbiBldGgvbGlmLCBtdWx0aXBsaWVkIGJ5IFBSSUNFX0ZBQ1RPUikKICAgICovCiAgZnVuY3Rpb24gZ2V0QnV5UHJpY2UoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHByaWNlKSB7CiAgICB1aW50MjU2IGFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSA9IGdldEFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSgpOwoKICAgIHJldHVybiBpbml0aWFsQnV5UHJpY2UuCiAgICAgIG11bChQUklDRV9GQUNUT1Iuc3ViKGFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSkpLgogICAgICBkaXYoUFJJQ0VfRkFDVE9SKTsKICB9CgogIC8qKgogICAgIEBkZXYgUmV0dXJucyB0aGUgbWF4aW11bSBhbW91bnQgb2Ygd2VpIHRoYXQgdGhlIGZvdW5kYXRpb24gY2FuIGNsYWltLiBJdCdzCiAgICAgYSBwb3J0aW9uIG9mIHRoZSBFVEggdGhhdCB3YXMgbm90IGNsYWltZWQgYnkgdG9rZW4gaG9sZGVycwoKICAgICBAcmV0dXJuIHRoZSBtYXhpbXVtIHdlaSBjbGFpbWFibGUgYnkgdGhlIGZvdW5kYXRpb24gYXMgb2Ygbm93CiAgICAqLwogIGZ1bmN0aW9uIGdldE1heENsYWltYWJsZVdlaUFtb3VudCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChpc0ZpbmlzaGVkKCkpIHsKICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0gZWxzZSB7CiAgICAgIHVpbnQyNTYgY2xhaW1hYmxlRnJvbVJlaW1idXJzZWQgPSBpbml0aWFsQnV5UHJpY2UuCiAgICAgICAgbXVsKHRvdGFsQnVybmVkVG9rZW5zKS5kaXYoUFJJQ0VfRkFDVE9SKS4KICAgICAgICBzdWIodG90YWxSZWltYnVyc2VkV2VpKTsKICAgICAgdWludDI1NiBjdXJyZW50Q2lyY3VsYXRpb24gPSBsaWZUb2tlbi50b3RhbFN1cHBseSgpOwogICAgICB1aW50MjU2IGFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSA9IGdldEFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSgpOwogICAgICB1aW50MjU2IG1heENsYWltYWJsZSA9IGluaXRpYWxXZWkuCiAgICAgICAgbXVsKGFjY3VtdWxhdGVkRGlzdHJpYnV0aW9uUGVyY2VudGFnZSkuZGl2KFBSSUNFX0ZBQ1RPUikuCiAgICAgICAgbXVsKGN1cnJlbnRDaXJjdWxhdGlvbikuZGl2KG9yaWdpbmFsVG90YWxTdXBwbHkpLgogICAgICAgIGFkZChjbGFpbWFibGVGcm9tUmVpbWJ1cnNlZCk7CgogICAgICBpZiAobWF4Q2xhaW1hYmxlID4gdG90YWxXZWlDbGFpbWVkKSB7CiAgICAgICAgcmV0dXJuIG1heENsYWltYWJsZS5zdWIodG90YWxXZWlDbGFpbWVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICAgQGRldiBhbGxvd3MgdG8gc2VuZCB0b2tlbnMgdG8gdGhlIE1WTSBpbiBleGNoYW5nZSBvZiBFdGggYXQgdGhlIHByaWNlCiAgICAgZGV0ZXJtaW5lZCBieSBnZXRCdXlQcmljZS4gVGhlIHRva2VucyBhcmUgYnVybmVkCiAgICAqLwogIGZ1bmN0aW9uIHNlbmRUb2tlbnModWludDI1NiB0b2tlbnMpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHsKICAgIHJlcXVpcmUodG9rZW5zID4gMCk7CgogICAgdWludDI1NiBwcmljZSA9IGdldEJ1eVByaWNlKCk7CiAgICB1aW50MjU2IHRvdGFsV2VpID0gdG9rZW5zLm11bChwcmljZSkuZGl2KFBSSUNFX0ZBQ1RPUik7CgogICAgbGlmVG9rZW4udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIGFkZHJlc3ModGhpcyksIHRva2Vucyk7CiAgICBsaWZUb2tlbi5idXJuKHRva2Vucyk7CiAgICB0b3RhbEJ1cm5lZFRva2VucyA9IHRvdGFsQnVybmVkVG9rZW5zLmFkZCh0b2tlbnMpOwoKICAgIFNlbnRUb2tlbnMobXNnLnNlbmRlciwgcHJpY2UsIHRva2VucywgdG90YWxXZWkpOwoKICAgIHRvdGFsUmVpbWJ1cnNlZFdlaSA9IHRvdGFsUmVpbWJ1cnNlZFdlaS5hZGQodG90YWxXZWkpOwogICAgbXNnLnNlbmRlci50cmFuc2Zlcih0b3RhbFdlaSk7CiAgfQoKICAvKioKICAgICBAZGV2IFJldHVybnMgd2hldGhlciB0aGUgTVZNIGVuZC1vZi1saWZlIGhhcyBiZWVuIHJlYWNoZWQuIFdoZW4gdGhhdAogICAgIGhhcHBlbnMgbm8gbW9yZSB0b2tlbnMgY2FuIGJlIHNlbnQgdG8gdGhlIE1WTSBhbmQgdGhlIGZvdW5kYXRpb24gY2FuIGNsYWltCiAgICAgMTAwJSBvZiB0aGUgcmVtYWluaW5nIGJhbGFuY2UgaW4gdGhlIE1WTQoKICAgICBAcmV0dXJuIHRydWUgaWYgdGhlIE1WTSBlbmQtb2YtbGlmZSBoYXMgYmVlbiByZWFjaGVkCiAgICAqLwogIGZ1bmN0aW9uIGlzRmluaXNoZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sIGZpbmlzaGVkKSB7CiAgICByZXR1cm4gZ2V0Q3VycmVudFBlcmlvZEluZGV4KCkgPj0gdG90YWxQZXJpb2RzOwogIH0KCiAgLyoqCiAgICAgQGRldiBDYWxsZWQgZnJvbSB0aGUgZm91bmRhdGlvbiB3YWxsZXQgdG8gY2xhaW0gZXRoIGJhY2sgZnJvbSB0aGUgTVZNLgogICAgIE1heGltdW0gYW1vdW50IHRoYXQgY2FuIGJlIGNsYWltZWQgaXMgZGV0ZXJtaW5lZCBieQogICAgIGdldE1heENsYWltYWJsZVdlaUFtb3VudAogICAgKi8KICBmdW5jdGlvbiBjbGFpbVdlaSh1aW50MjU2IHdlaUFtb3VudCkgcHVibGljIHdoZW5Ob3RQYXVzZWQgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZvdW5kYXRpb25BZGRyKTsKCiAgICB1aW50MjU2IGNsYWltYWJsZSA9IGdldE1heENsYWltYWJsZVdlaUFtb3VudCgpOwoKICAgIGFzc2VydChjbGFpbWFibGUgPj0gd2VpQW1vdW50KTsKCiAgICBmb3VuZGF0aW9uQWRkci50cmFuc2Zlcih3ZWlBbW91bnQpOwoKICAgIHRvdGFsV2VpQ2xhaW1lZCA9IHRvdGFsV2VpQ2xhaW1lZC5hZGQod2VpQW1vdW50KTsKCiAgICBDbGFpbWVkV2VpKHdlaUFtb3VudCk7CiAgfQoKICAvKioKICAgICBAZGV2IFBhdXNlcyB0aGUgTVZNLiBObyB0b2tlbnMgY2FuIGJlIHNlbnQgdG8gdGhlIE1WTSBhbmQgbm8gZXRoIGNhbiBiZQogICAgIGNsYWltZWQgZnJvbSB0aGUgTVZNIHdoaWxlIHBhdXNlZC4gTVZNIHRvdGFsIGxpZmV0aW1lIGlzIGV4dGVuZGVkIGJ5IHRoZQogICAgIHBlcmlvZCBpdCBzdGF5cyBwYXVzZWQKICAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBwdWJsaWMgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIHBhdXNlZFRpbWVzdGFtcCA9IGJsb2NrLnRpbWVzdGFtcDsKCiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICAgQGRldiBVbnBhdXNlcyB0aGUgTVZNLiBTZWUgYHBhdXNlYCBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHBhdXNpbmcKICAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIHB1YmxpYyBvbmx5T3duZXIgd2hlblBhdXNlZCB7CiAgICB1aW50MjU2IHBhdXNlZFNlY29uZHMgPSBibG9jay50aW1lc3RhbXAuc3ViKHBhdXNlZFRpbWVzdGFtcCk7CiAgICB0b3RhbFBhdXNlZFNlY29uZHMgPSB0b3RhbFBhdXNlZFNlY29uZHMuYWRkKHBhdXNlZFNlY29uZHMpOwogICAgcGF1c2VkID0gZmFsc2U7CgogICAgVW5wYXVzZShwYXVzZWRTZWNvbmRzKTsKICB9Cgp9CgovKioKICAgQHRpdGxlIENyb3dkc2FsZSBmb3IgdGhlIExpZiBUb2tlbiBHZW5lcmF0aW9uIEV2ZW50CgogICBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgTGlmIFRva2VuIEdlbmVyYXRpb24gRXZlbnQgKFRHRSkgQ3Jvd2RzYWxlOiBBIDIgd2VlawogICBmaXhlZCBwcmljZSwgdW5jYXBwZWQgdG9rZW4gc2FsZSwgd2l0aCBhIGRpc2NvdW50ZWQgcmF0ZWZvciBjb250cmlidXRpb25zCiAgICYjMjM2O24gdGhlIHByaXZhdGUgcHJlc2FsZSBhbmQgYSBNYXJrZXQgVmFsaWRhdGlvbiBNZWNoYW5pc20gdGhhdCB3aWxsIHJlY2VpdmUKICAgdGhlIGZ1bmRzIG92ZXIgdGhlIFVTRCAxME0gc29mdCBjYXAuCiAgIFRoZSBjcm93ZHNhbGUgaGFzIGEgbWluaW11bSBjYXAgb2YgVVNEIDVNIHdoaWNoIGluIGNhc2Ugb2Ygbm90IGJlaW5nIHJlYWNoZWQKICAgYnkgcHVyY2hhc2VzIG1hZGUgZHVyaW5nIHRoZSAyIHdlZWsgcGVyaW9kIHRoZSB0b2tlbiB3aWxsIG5vdCBzdGFydCBvcGVyYXRpbmcKICAgYW5kIGFsbCBmdW5kcyBzZW50IGR1cmluZyB0aGF0IHBlcmlvZCB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIHRvIGJlIGNsYWltZWQgYnkKICAgdGhlIG9yaWdpbmF0aW5nIGFkZHJlc3Nlcy4KICAgRnVuZHMgdXAgdG8gdGhlIFVTRCAxME0gc29mdCBjYXAgd2lsbCBiZSBzZW50IHRvIHRoZSBXaW5kaW5nIFRyZWUgRm91bmRhdGlvbgogICB3YWxsZXQgYXQgdGhlIGVuZCBvZiB0aGUgY3Jvd2RzYWxlLgogICBGdW5kcyBvdmVyIHRoYXQgYW1vdW50IHdpbGwgYmUgcHV0IGluIGEgTWFya2V0VmFsaWRhdGlvbk1lY2hhbmlzbSAoTVZNKSBzbWFydAogICBjb250cmFjdCB0aGF0IGd1YXJhbnRlZXMgYSBwcmljZSBmbG9vciBmb3IgYSBwZXJpb2Qgb2YgMiBvciA0IHllYXJzLCBhbGxvd2luZwogICBhbnkgdG9rZW4gaG9sZGVyIHRvIGJ1cm4gdGhlaXIgdG9rZW5zIGluIGV4Y2hhbmdlIG9mIHBhcnQgb2YgdGhlIGV0aCBhbW91bnQKICAgc2VudCBkdXJpbmcgdGhlIFRHRSBpbiBleGNoYW5nZSBvZiB0aG9zZSB0b2tlbnMuCiAqLwpjb250cmFjdCBMaWZDcm93ZHNhbGUgaXMgT3duYWJsZSwgUGF1c2FibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZC4KICBMaWZUb2tlbiBwdWJsaWMgdG9rZW47CgogIC8vIEJlZ2lubmluZyBvZiB0aGUgcGVyaW9kIHdoZXJlIHRva2VucyBjYW4gYmUgcHVyY2hhc2VkIGF0IHJhdGUgYHJhdGUxYC4KICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWVzdGFtcDsKICAvLyBNb21lbnQgYWZ0ZXIgd2hpY2ggdGhlIHJhdGUgdG8gYnV5IHRva2VucyBnb2VzIGZyb20gYHJhdGUxYCB0byBgcmF0ZTJgLgogIHVpbnQyNTYgcHVibGljIGVuZDFUaW1lc3RhbXA7CiAgLy8gTWFya3MgdGhlIGVuZCBvZiB0aGUgVG9rZW4gR2VuZXJhdGlvbiBFdmVudC4KICB1aW50MjU2IHB1YmxpYyBlbmQyVGltZXN0YW1wOwoKICAvLyBBZGRyZXNzIG9mIHRoZSBXaW5kaW5nIFRyZWUgRm91bmRhdGlvbiB3YWxsZXQuIEZ1bmRzIHVwIHRvIHRoZSBzb2Z0IGNhcCBhcmUKICAvLyBzZW50IHRvIHRoaXMgYWRkcmVzcy4gSXQncyBhbHNvIHRoZSBhZGRyZXNzIHRvIHdoaWNoIHRoZSBNVk0gZGlzdHJpYnV0ZXMKICAvLyB0aGUgZnVuZHMgdGhhdCBhcmUgbWFkZSBhdmFpbGFibGUgbW9udGggYWZ0ZXIgbW9udGguIEFuIGV4dHJhIDUlIG9mIHRva2VucwogIC8vIGFyZSBwdXQgaW4gYSBWZXN0ZWQgUGF5bWVudCB3aXRoIHRoaXMgYWRkcmVzcyBhcyBiZW5lZmljaWFyeSwgYWN0aW5nIGFzIGEKICAvLyBsb25nLXRlcm0gcmVzZXJ2ZSBmb3IgdGhlIGZvdW5kYXRpb24uCiAgYWRkcmVzcyBwdWJsaWMgZm91bmRhdGlvbldhbGxldDsKCiAgLy8gQWRkcmVzcyBvZiB0aGUgV2luZGluZyBUcmVlIEZvdW5kZXJzIHdhbGxldC4gQW4gZXh0cmEgMTIuOCUgb2YgdG9rZW5zCiAgLy8gYXJlIHB1dCBpbiBhIFZlc3RlZCBQYXltZW50IHdpdGggdGhpcyBhZGRyZXNzIGFzIGJlbmVmaWNpYXJ5LCB3aXRoIDEgeWVhcgogIC8vIGNsaWZmIGFuZCA0IHllYXJzIGR1cmF0aW9uLgogIGFkZHJlc3MgcHVibGljIGZvdW5kZXJzV2FsbGV0OwoKICAvLyBUR0UgbWluIGNhcCwgaW4gVVNELiBDb252ZXJ0ZWQgdG8gd2VpIHVzaW5nIGB3ZWlQZXJVU0RpblRHRWAuCiAgdWludDI1NiBwdWJsaWMgbWluQ2FwVVNEID0gNTAwMDAwMDsKCiAgLy8gTWF4aW11biBhbW91bnQgZnJvbSB0aGUgVEdFIHRoYXQgdGhlIGZvdW5kYXRpb24gcmVjZWl2ZXMsIGluIFVTRC4gQ29udmVydGVkCiAgLy8gdG8gd2VpIHVzaW5nIGB3ZWlQZXJVU0RpblRHRWAuIEZ1bmRzIG92ZXIgdGhpcyBjYXAgZ28gdG8gdGhlIE1WTS4KICB1aW50MjU2IHB1YmxpYyBtYXhGb3VuZGF0aW9uQ2FwVVNEID0gMTAwMDAwMDA7CgogIC8vIE1heGltdW0gYW1vdW50IGZyb20gdGhlIFRHRSB0aGF0IG1ha2VzIHRoZSBNVk0gdG8gbGFzdCBmb3IgMjQgbW9udGhzLiBJZgogIC8vIGZ1bmRzIGZyb20gdGhlIFRHRSBleGNlZWQgdGhpcyBhbW91bnQsIHRoZSBNVk0gd2lsbCBsYXN0IGZvciAyNCBtb250aHMuCiAgdWludDI1NiBwdWJsaWMgTVZNMjRQZXJpb2RzQ2FwVVNEID0gNDAwMDAwMDA7CgogIC8vIENvbnZlcnNpb24gcmF0ZSBmcm9tIFVTRCB0byB3ZWkgdG8gdXNlIGR1cmluZyB0aGUgVEdFLgogIHVpbnQyNTYgcHVibGljIHdlaVBlclVTRGluVEdFID0gMDsKCiAgLy8gU2Vjb25kcyBiZWZvcmUgdGhlIFRHRSBzaW5jZSB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIFVTRCB0bwogIC8vIHdlaSByYXRlIGNhbm5vdCBiZSBzZXQgYnkgdGhlIG93bmVyIGFueW1vcmUuCiAgdWludDI1NiBwdWJsaWMgc2V0V2VpTG9ja1NlY29uZHMgPSAwOwoKICAvLyBRdWFudGl0eSBvZiBMaWYgdGhhdCBpcyByZWNlaXZlZCBpbiBleGNoYWdlIG9mIDEgRXRoZXIgZHVyaW5nIHRoZSBmaXJzdAogIC8vIHdlZWsgb2YgdGhlIDIgd2Vla3MgVEdFCiAgdWludDI1NiBwdWJsaWMgcmF0ZTE7CgogIC8vIFF1YW50aXR5IG9mIExpZiB0aGF0IGlzIHJlY2VpdmVkIGluIGV4Y2hhZ2Ugb2YgMSBFdGhlciBkdXJpbmcgdGhlIHNlY29uZAogIC8vIHdlZWsgb2YgdGhlIDIgd2Vla3MgVEdFCiAgdWludDI1NiBwdWJsaWMgcmF0ZTI7CgogIC8vIEFtb3VudCBvZiB3ZWkgcmVjZWl2ZWQgaW4gZXhjaGFuZ2Ugb2YgdG9rZW5zIGR1cmluZyB0aGUgMiB3ZWVrcyBUR0UKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogIC8vIEFtb3VudCBvZiBsaWYgbWludGVkIGFuZCB0cmFuc2ZlcnJlZCBkdXJpbmcgdGhlIFRHRQogIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGQ7CgogIC8vIEFkZHJlc3Mgb2YgdGhlIHZlc3Rpbmcgc2NoZWR1bGUgZm9yIHRoZSBmb3VuZGF0aW9uIGNyZWF0ZWQgYXQgdGhlCiAgLy8gZW5kIG9mIHRoZSBjcm93ZHNhbGUKICBWZXN0ZWRQYXltZW50IHB1YmxpYyBmb3VuZGF0aW9uVmVzdGVkUGF5bWVudDsKCiAgLy8gQWRkcmVzcyBvZiB0aGUgdmVzdGluZyBzY2hlZHVsZSBmb3IgZm91bmRlcnMgY3JlYXRlZCBhdCB0aGUKICAvLyBlbmQgb2YgdGhlIGNyb3dkc2FsZQogIFZlc3RlZFBheW1lbnQgcHVibGljIGZvdW5kZXJzVmVzdGVkUGF5bWVudDsKCiAgLy8gQWRkcmVzcyBvZiB0aGUgTVZNIGNyZWF0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgY3Jvd2RzYWxlCiAgTGlmTWFya2V0VmFsaWRhdGlvbk1lY2hhbmlzbSBwdWJsaWMgTVZNOwoKICAvLyBUcmFja3MgdGhlIHdlaSBzZW50IHBlciBhZGRyZXNzIGR1cmluZyB0aGUgMiB3ZWVrIFRHRS4gVGhpcyBpcyB0aGUgYW1vdW50CiAgLy8gdGhhdCBjYW4gYmUgY2xhaW1lZCBieSBlYWNoIGFkZHJlc3MgaW4gY2FzZSB0aGUgbWluaW11bSBjYXAgaXMgbm90IHJlYWNoZWQKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHB1cmNoYXNlczsKCiAgLy8gSGFzIHRoZSBDcm93ZHNhbGUgYmVlbiBmaW5hbGl6ZWQgYnkgYSBzdWNjZXNzZnVsIGNhbGwgdG8gYGZpbmFsaXplYD8KICBib29sIHB1YmxpYyBpc0ZpbmFsaXplZCA9IGZhbHNlOwoKICAvKioKICAgICBAZGV2IEV2ZW50IHRyaWdnZXJlZCAoYXQgbW9zdCBvbmNlKSBvbiBhIHN1Y2Nlc3NmdWwgY2FsbCB0byBgZmluYWxpemVgCiAgKiovCiAgZXZlbnQgRmluYWxpemVkKCk7CgogIC8qKgogICAgIEBkZXYgRXZlbnQgdHJpZ2dlcmVkIGV2ZXJ5IHRpbWUgYSBwcmVzYWxlIHB1cmNoYXNlIGlzIGRvbmUKICAqKi8KICBldmVudCBUb2tlblByZXNhbGVQdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgd2VpQW1vdW50LCB1aW50MjU2IHJhdGUpOwoKICAvKioKICAgICBAZGV2IEV2ZW50IHRyaWdnZXJlZCBvbiBldmVyeSBwdXJjaGFzZSBkdXJpbmcgdGhlIFRHRQoKICAgICBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICAgQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAgIEBwYXJhbSB2YWx1ZSBhbW91bnQgb2Ygd2VpIHBhaWQKICAgICBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZSgKICAgIGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsCiAgICBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksCiAgICB1aW50MjU2IHZhbHVlLAogICAgdWludDI1NiBhbW91bnQKICApOwoKICAvKioKICAgICBAZGV2IENvbnN0cnVjdG9yLiBDcmVhdGVzIHRoZSB0b2tlbiBpbiBhIHBhdXNlZCBzdGF0ZQoKICAgICBAcGFyYW0gX3N0YXJ0VGltZXN0YW1wIHNlZSBgc3RhcnRUaW1lc3RhbXBgCiAgICAgQHBhcmFtIF9lbmQxVGltZXN0YW1wIHNlZSBgZW5kMVRpbWVzdGFtcGAKICAgICBAcGFyYW0gX2VuZDJUaW1lc3RhbXAgc2VlIGBlbmQyVGltZXN0YW1wCiAgICAgQHBhcmFtIF9yYXRlMSBzZWUgYHJhdGUxYAogICAgIEBwYXJhbSBfcmF0ZTIgc2VlIGByYXRlMmAKICAgICBAcGFyYW0gX2ZvdW5kYXRpb25XYWxsZXQgc2VlIGBmb3VuZGF0aW9uV2FsbGV0YAogICAqLwogIGZ1bmN0aW9uIExpZkNyb3dkc2FsZSgKICAgIHVpbnQyNTYgX3N0YXJ0VGltZXN0YW1wLAogICAgdWludDI1NiBfZW5kMVRpbWVzdGFtcCwKICAgIHVpbnQyNTYgX2VuZDJUaW1lc3RhbXAsCiAgICB1aW50MjU2IF9yYXRlMSwKICAgIHVpbnQyNTYgX3JhdGUyLAogICAgdWludDI1NiBfc2V0V2VpTG9ja1NlY29uZHMsCiAgICBhZGRyZXNzIF9mb3VuZGF0aW9uV2FsbGV0LAogICAgYWRkcmVzcyBfZm91bmRlcnNXYWxsZXQKICApIHsKCiAgICByZXF1aXJlKF9zdGFydFRpbWVzdGFtcCA+IGJsb2NrLnRpbWVzdGFtcCk7CiAgICByZXF1aXJlKF9lbmQxVGltZXN0YW1wID4gX3N0YXJ0VGltZXN0YW1wKTsKICAgIHJlcXVpcmUoX2VuZDJUaW1lc3RhbXAgPiBfZW5kMVRpbWVzdGFtcCk7CiAgICByZXF1aXJlKF9yYXRlMSA+IDApOwogICAgcmVxdWlyZShfcmF0ZTIgPiAwKTsKICAgIHJlcXVpcmUoX3NldFdlaUxvY2tTZWNvbmRzID4gMCk7CiAgICByZXF1aXJlKF9mb3VuZGF0aW9uV2FsbGV0ICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfZm91bmRlcnNXYWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgdG9rZW4gPSBuZXcgTGlmVG9rZW4oKTsKICAgIHRva2VuLnBhdXNlKCk7CgogICAgc3RhcnRUaW1lc3RhbXAgPSBfc3RhcnRUaW1lc3RhbXA7CiAgICBlbmQxVGltZXN0YW1wID0gX2VuZDFUaW1lc3RhbXA7CiAgICBlbmQyVGltZXN0YW1wID0gX2VuZDJUaW1lc3RhbXA7CiAgICByYXRlMSA9IF9yYXRlMTsKICAgIHJhdGUyID0gX3JhdGUyOwogICAgc2V0V2VpTG9ja1NlY29uZHMgPSBfc2V0V2VpTG9ja1NlY29uZHM7CiAgICBmb3VuZGF0aW9uV2FsbGV0ID0gX2ZvdW5kYXRpb25XYWxsZXQ7CiAgICBmb3VuZGVyc1dhbGxldCA9IF9mb3VuZGVyc1dhbGxldDsKICB9CgogIC8qKgogICAgIEBkZXYgU2V0IHRoZSB3ZWkgcGVyIFVTRCByYXRlIGZvciB0aGUgVEdFLiBIYXMgdG8gYmUgY2FsbGVkIGJ5CiAgICAgdGhlIG93bmVyIHVwIHRvIGBzZXRXZWlMb2NrU2Vjb25kc2AgYmVmb3JlIGBzdGFydFRpbWVzdGFtcGAKCiAgICAgQHBhcmFtIF93ZWlQZXJVU0Qgd2VpIHBlciBVU0QgcmF0ZSB2YWxpZCBkdXJpbmcgdGhlIFRHRQogICAqLwogIGZ1bmN0aW9uIHNldFdlaVBlclVTRGluVEdFKHVpbnQyNTYgX3dlaVBlclVTRCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF93ZWlQZXJVU0QgPiAwKTsKICAgIGFzc2VydChibG9jay50aW1lc3RhbXAgPCBzdGFydFRpbWVzdGFtcC5zdWIoc2V0V2VpTG9ja1NlY29uZHMpKTsKCiAgICB3ZWlQZXJVU0RpblRHRSA9IF93ZWlQZXJVU0Q7CiAgfQoKICAvKioKICAgICBAZGV2IFJldHVybnMgdGhlIGN1cnJlbnQgTGlmIHBlciBFdGggcmF0ZSBkdXJpbmcgdGhlIFRHRQoKICAgICBAcmV0dXJuIHRoZSBjdXJyZW50IExpZiBwZXIgRXRoIHJhdGUgb3IgMCB3aGVuIG5vdCBpbiBUR0UKICAgKi8KICBmdW5jdGlvbiBnZXRSYXRlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IHN0YXJ0VGltZXN0YW1wKQogICAgICByZXR1cm4gMDsKICAgIGVsc2UgaWYgKGJsb2NrLnRpbWVzdGFtcCA8PSBlbmQxVGltZXN0YW1wKQogICAgICByZXR1cm4gcmF0ZTE7CiAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPD0gZW5kMlRpbWVzdGFtcCkKICAgICAgcmV0dXJuIHJhdGUyOwogICAgZWxzZQogICAgICByZXR1cm4gMDsKICB9CgogIC8qKgogICAgIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24sIHBheWFibGUuIENhbGxzIGBidXlUb2tlbnNgCiAgICovCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAvKioKICAgICBAZGV2IEFsbG93cyB0byBnZXQgdG9rZW5zIGR1cmluZyB0aGUgVEdFLiBQYXlhYmxlLiBUaGUgdmFsdWUgaXMgY29udmVydGVkIHRvCiAgICAgTGlmIHVzaW5nIHRoZSBjdXJyZW50IHJhdGUgb2J0YWluZWQgYnkgY2FsbGluZyBgZ2V0UmF0ZSgpYC4KCiAgICAgQHBhcmFtIGJlbmVmaWNpYXJ5IEFkZHJlc3MgdG8gd2hpY2ggTGlmIHNob3VsZCBiZSBzZW50CiAgICovCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgdmFsaWRQdXJjaGFzZSB7CiAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgYXNzZXJ0KHdlaVBlclVTRGluVEdFID4gMCk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy8gZ2V0IGN1cnJlbnQgcHJpY2UgKGl0IGRlcGVuZHMgb24gY3VycmVudCBibG9jayBudW1iZXIpCiAgICB1aW50MjU2IHJhdGUgPSBnZXRSYXRlKCk7CgogICAgYXNzZXJ0KHJhdGUgPiAwKTsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChyYXRlKTsKCiAgICAvLyBzdG9yZSB3ZWkgYW1vdW50IGluIGNhc2Ugb2YgVEdFIG1pbiBjYXAgbm90IHJlYWNoZWQKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKICAgIHB1cmNoYXNlc1tiZW5lZmljaWFyeV0gPSBwdXJjaGFzZXNbYmVuZWZpY2lhcnldLmFkZCh3ZWlBbW91bnQpOwogICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2Vucyk7CgogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICB9CgogIC8qKgogICAgIEBkZXYgQWxsb3dzIHRvIGFkZCB0aGUgYWRkcmVzcyBhbmQgdGhlIGFtb3VudCBvZiB3ZWkgc2VudCBieSBhIGNvbnRyaWJ1dG9yCiAgICAgaW4gdGhlIHByaXZhdGUgcHJlc2FsZS4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBiZWZvcmUgdGhlIGJlZ2lubmluZwogICAgIG9mIFRHRQoKICAgICBAcGFyYW0gYmVuZWZpY2lhcnkgQWRkcmVzcyB0byB3aGljaCBMaWYgd2lsbCBiZSBzZW50CiAgICAgQHBhcmFtIHdlaVNlbnQgQW1vdW50IG9mIHdlaSBjb250cmlidXRlZAogICAgIEBwYXJhbSByYXRlIExpZiBwZXIgZXRoZXIgcmF0ZSBhdCB0aGUgbW9tZW50IG9mIHRoZSBjb250cmlidXRpb24KICAgKi8KICBmdW5jdGlvbiBhZGRQcml2YXRlUHJlc2FsZVRva2VucygKICAgIGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQyNTYgd2VpU2VudCwgdWludDI1NiByYXRlCiAgKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoYmxvY2sudGltZXN0YW1wIDwgc3RhcnRUaW1lc3RhbXApOwogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUod2VpU2VudCA+IDApOwoKICAgIC8vIHZhbGlkYXRlIHRoYXQgcmF0ZSBpcyBoaWdoZXIgdGhhbiBUR0UgcmF0ZQogICAgcmVxdWlyZShyYXRlID4gcmF0ZTEpOwoKICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpU2VudC5tdWwocmF0ZSk7CgogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlTZW50KTsKCiAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwoKICAgIFRva2VuUHJlc2FsZVB1cmNoYXNlKGJlbmVmaWNpYXJ5LCB3ZWlTZW50LCByYXRlKTsKICB9CgogIC8qKgogICAgIEBkZXYgSW50ZXJuYWwuIEZvcndhcmRzIGZ1bmRzIHRvIHRoZSBmb3VuZGF0aW9uIHdhbGxldCBhbmQgaW4gY2FzZSB0aGUgc29mdAogICAgIGNhcCB3YXMgZXhjZWVkZWQgaXQgYWxzbyBjcmVhdGVzIGFuZCBmdW5kcyB0aGUgTWFya2V0IFZhbGlkYXRpb24gTWVjaGFuaXNtLgogICAqLwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKCiAgICAvLyBjYWxjdWxhdGUgdGhlIG1heCBhbW91bnQgb2Ygd2VpIGZvciB0aGUgZm91bmRhdGlvbgogICAgdWludDI1NiBmb3VuZGF0aW9uQmFsYW5jZUNhcFdlaSA9IG1heEZvdW5kYXRpb25DYXBVU0QubXVsKHdlaVBlclVTRGluVEdFKTsKCiAgICAvLyBJZiB0aGUgbWluaW1pdW4gY2FwIGZvciB0aGUgTVZNIGlzIG5vdCByZWFjaGVkIHRyYW5zZmVyIGFsbCBmdW5kcyB0byBmb3VuZGF0aW9uCiAgICAvLyBlbHNlIGlmIHRoZSBtaW4gY2FwIGZvciB0aGUgTVZNIGlzIHJlYWNoZWQsIGNyZWF0ZSBpdCBhbmQgc2VuZCB0aGUgcmVtYWluaW5nIGZ1bmRzLgogICAgLy8gV2UgdXNlIHdlaVJhaXNlZCB0byBjb21wYXJlIGJlY3Vhc2UgdGhhdCBpcyB0aGUgdG90YWwgYW1vdW50IG9mIHdlaSByYWlzZWQgaW4gYWxsIFRHRQogICAgLy8gYnV0IHdlIGhhdmUgdG8gZGlzdHJpYnV0ZSB0aGUgYmFsYW5jZSB1c2luZyBgdGhpcy5iYWxhbmNlYCBiZWNhdXNlIHRoYXRzIHRoZSBhbW91bnQKICAgIC8vIHJhaXNlZCBieSB0aGUgY3Jvd2RzYWxlCiAgICBpZiAod2VpUmFpc2VkIDw9IGZvdW5kYXRpb25CYWxhbmNlQ2FwV2VpKSB7CgogICAgICBmb3VuZGF0aW9uV2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CgogICAgICBtaW50RXh0cmFUb2tlbnModWludDI1NigyNCkpOwoKICAgIH0gZWxzZSB7CgogICAgICB1aW50MjU2IG1tRnVuZEJhbGFuY2UgPSB0aGlzLmJhbGFuY2Uuc3ViKGZvdW5kYXRpb25CYWxhbmNlQ2FwV2VpKTsKCiAgICAgIC8vIGNoZWNrIGhvdyBtdWNoIHByZWlvZHMgd2UgaGF2ZSB0byB1c2Ugb24gdGhlIE1WTQogICAgICB1aW50OCBNVk1QZXJpb2RzID0gMjQ7CiAgICAgIGlmIChtbUZ1bmRCYWxhbmNlID4gTVZNMjRQZXJpb2RzQ2FwVVNELm11bCh3ZWlQZXJVU0RpblRHRSkpCiAgICAgICAgTVZNUGVyaW9kcyA9IDQ4OwoKICAgICAgZm91bmRhdGlvbldhbGxldC50cmFuc2Zlcihmb3VuZGF0aW9uQmFsYW5jZUNhcFdlaSk7CgogICAgICBNVk0gPSBuZXcgTGlmTWFya2V0VmFsaWRhdGlvbk1lY2hhbmlzbSgKICAgICAgICBhZGRyZXNzKHRva2VuKSwgYmxvY2sudGltZXN0YW1wLmFkZCgzMCBtaW51dGVzKSwgMTAgbWludXRlcywgTVZNUGVyaW9kcywgZm91bmRhdGlvbldhbGxldAogICAgICApOwogICAgICBNVk0uY2FsY3VsYXRlRGlzdHJpYnV0aW9uUGVyaW9kcygpOwoKICAgICAgbWludEV4dHJhVG9rZW5zKHVpbnQyNTYoTVZNUGVyaW9kcykpOwoKICAgICAgTVZNLmZ1bmQudmFsdWUobW1GdW5kQmFsYW5jZSkoKTsKICAgICAgTVZNLnRyYW5zZmVyT3duZXJzaGlwKGZvdW5kYXRpb25XYWxsZXQpOwoKICAgIH0KICB9CgogIC8qKgogICAgIEBkZXYgSW50ZXJuYWwuIERpc3RyaWJ1dGUgZXh0cmEgdG9rZW5zIGFtb25nIGZvdW5kZXJzLAogICAgIHRlYW0gYW5kIHRoZSBmb3VuZGF0aW9uIGxvbmctdGVybSByZXNlcnZlLiBGb3VuZGVycyByZWNlaXZlCiAgICAgMTIuOCUgb2YgdG9rZW5zIGluIGEgNHkgKDF5IGNsaWZmKSB2ZXN0aW5nIHNjaGVkdWxlLgogICAgIEZvdW5kYXRpb24gbG9uZy10ZXJtIHJlc2VydmUgcmVjZWl2ZXMgNSUgb2YgdG9rZW5zIGluIGEKICAgICB2ZXN0aW5nIHNjaGVkdWxlIHdpdGggdGhlIHNhbWUgZHVyYXRpb24gYXMgdGhlIE1WTSB0aGF0CiAgICAgc3RhcnRzIHdoZW4gdGhlIE1WTSBlbmRzLiBBbiBleHRyYSA3LjIlIGlzIHRyYW5zZmVycmVkIHRvCiAgICAgdGhlIGZvdW5kYXRpb24gdG8gYmUgZGlzdHJpYnV0ZWQgYW1vbmcgYWR2aXNvcnMgYW5kIGZ1dHVyZSBoaXJlcwogICAqLwogIGZ1bmN0aW9uIG1pbnRFeHRyYVRva2Vucyh1aW50MjU2IGZvdW5kYXRpb25Nb250aHNTdGFydCkgaW50ZXJuYWwgewogICAgLy8gY2FsY3VsYXRlIGhvdyBtdWNoIHRva2VucyB3aWxsIHRoZSBmb3VuZGVycywKICAgIC8vIGZvdW5kYXRpb24gYW5kIGFkdmlzb3JzIHdpbGwgcmVjZWl2ZQogICAgdWludDI1NiBmb3VuZGVyc1Rva2VucyA9IHRva2VuLnRvdGFsU3VwcGx5KCkubXVsKDEyOCkuZGl2KDEwMDApOwogICAgdWludDI1NiBmb3VuZGF0aW9uVG9rZW5zID0gdG9rZW4udG90YWxTdXBwbHkoKS5tdWwoNTApLmRpdigxMDAwKTsKICAgIHVpbnQyNTYgdGVhbVRva2VucyA9IHRva2VuLnRvdGFsU3VwcGx5KCkubXVsKDcyKS5kaXYoMTAwMCk7CgogICAgLy8gY3JlYXRlIHRoZSB2ZXN0ZWQgcGF5bWVudCBzY2hlZHVsZSBmb3IgdGhlIGZvdW5kZXJzCiAgICBmb3VuZGVyc1Zlc3RlZFBheW1lbnQgPSBuZXcgVmVzdGVkUGF5bWVudCgKICAgICAgYmxvY2sudGltZXN0YW1wLCAxMCBtaW51dGVzLCA0OCwgMTIsIGZvdW5kZXJzVG9rZW5zLCB0b2tlbgogICAgKTsKICAgIHRva2VuLm1pbnQoZm91bmRlcnNWZXN0ZWRQYXltZW50LCBmb3VuZGVyc1Rva2Vucyk7CiAgICBmb3VuZGVyc1Zlc3RlZFBheW1lbnQudHJhbnNmZXJPd25lcnNoaXAoZm91bmRlcnNXYWxsZXQpOwoKICAgIC8vIGNyZWF0ZSB0aGUgdmVzdGVkIHBheW1lbnQgc2NoZWR1bGUgZm9yIHRoZSBmb3VuZGF0aW9uCiAgICB1aW50MjU2IGZvdW5kYXRpb25QYXltZW50U3RhcnQgPSBmb3VuZGF0aW9uTW9udGhzU3RhcnQubXVsKDEwIG1pbnV0ZXMpCiAgICAgIC5hZGQoMzAgbWludXRlcyk7CiAgICBmb3VuZGF0aW9uVmVzdGVkUGF5bWVudCA9IG5ldyBWZXN0ZWRQYXltZW50KAogICAgICBibG9jay50aW1lc3RhbXAuYWRkKGZvdW5kYXRpb25QYXltZW50U3RhcnQpLCAxMCBtaW51dGVzLAogICAgICBmb3VuZGF0aW9uTW9udGhzU3RhcnQsIDAsIGZvdW5kYXRpb25Ub2tlbnMsIHRva2VuCiAgICApOwogICAgdG9rZW4ubWludChmb3VuZGF0aW9uVmVzdGVkUGF5bWVudCwgZm91bmRhdGlvblRva2Vucyk7CiAgICBmb3VuZGF0aW9uVmVzdGVkUGF5bWVudC50cmFuc2Zlck93bmVyc2hpcChmb3VuZGF0aW9uV2FsbGV0KTsKCiAgICAvLyB0cmFuc2ZlciB0aGUgdG9rZW4gZm9yIGFkdmlzb3JzIGFuZCBmdXR1cmUgZW1wbG95ZWVzIHRvIHRoZSBmb3VuZGF0aW9uCiAgICB0b2tlbi5taW50KGZvdW5kYXRpb25XYWxsZXQsIHRlYW1Ub2tlbnMpOwoKICB9CgogIC8qKgogICAgIEBkZXYgTW9kaWZpZXIKICAgICBvayBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMgb24gVEdFCiAgICovCiAgbW9kaWZpZXIgdmFsaWRQdXJjaGFzZSgpIHsKICAgIGJvb2wgd2l0aGluUGVyaW9kID0gbm93ID49IHN0YXJ0VGltZXN0YW1wICYmIG5vdyA8PSBlbmQyVGltZXN0YW1wOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIGFzc2VydCh3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlKTsKICAgIF87CiAgfQoKICAvKioKICAgICBAZGV2IE1vZGlmaWVyCiAgICAgb2sgd2hlbiBibG9jay50aW1lc3RhbXAgaXMgcGFzdCBlbmQyVGltZXN0YW1wCiAgKi8KICBtb2RpZmllciBoYXNFbmRlZCgpIHsKICAgIGFzc2VydChibG9jay50aW1lc3RhbXAgPiBlbmQyVGltZXN0YW1wKTsKICAgIF87CiAgfQoKICAvKioKICAgICBAZGV2IE1vZGlmaWVyCiAgICAgQHJldHVybiB0cnVlIGlmIG1pbkNhcFVTRCBoYXMgYmVlbiByZWFjaGVkIGJ5IGNvbnRyaWJ1dGlvbnMgZHVyaW5nIHRoZSBUR0UKICAqLwogIGZ1bmN0aW9uIGZ1bmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGFzc2VydCh3ZWlQZXJVU0RpblRHRSA+IDApOwogICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBtaW5DYXBVU0QubXVsKHdlaVBlclVTRGluVEdFKTsKICB9CgogIC8qKgogICAgIEBkZXYgQWxsb3dzIGEgVEdFIGNvbnRyaWJ1dG9yIHRvIGNsYWltIHRoZWlyIGNvbnRyaWJ1dGVkIGV0aCBpbiBjYXNlIHRoZQogICAgIFRHRSBoYXMgZmluaXNoZWQgd2l0aG91dCByZWFjaGluZyB0aGUgbWluQ2FwVVNECiAgICovCiAgZnVuY3Rpb24gY2xhaW1FdGgoKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBoYXNFbmRlZCB7CiAgICByZXF1aXJlKGlzRmluYWxpemVkKTsKICAgIHJlcXVpcmUoIWZ1bmRlZCgpKTsKCiAgICB1aW50MjU2IHRvUmV0dXJuID0gcHVyY2hhc2VzW21zZy5zZW5kZXJdOwogICAgYXNzZXJ0KHRvUmV0dXJuID4gMCk7CgogICAgcHVyY2hhc2VzW21zZy5zZW5kZXJdID0gMDsKCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRvUmV0dXJuKTsKICB9CgogIC8qKgogICAgIEBkZXYgQWxsb3dzIHRoZSBvd25lciB0byByZXR1cm4gYW4gcHVyY2hhc2UgdG8gYSBjb250cmlidXRvcgogICAqLwogIGZ1bmN0aW9uIHJldHVyblB1cmNoYXNlKGFkZHJlc3MgY29udHJpYnV0b3IpCiAgICBwdWJsaWMgaGFzRW5kZWQgb25seU93bmVyCiAgewogICAgcmVxdWlyZSghaXNGaW5hbGl6ZWQpOwoKICAgIHVpbnQyNTYgdG9SZXR1cm4gPSBwdXJjaGFzZXNbY29udHJpYnV0b3JdOwogICAgYXNzZXJ0KHRvUmV0dXJuID4gMCk7CgogICAgdWludDI1NiB0b2tlbkJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YoY29udHJpYnV0b3IpOwoKICAgIC8vIFN1YnN0cmFjdCB3ZWlSYWlzZWQgYW5kIHRva2VucyBzb2xkCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuc3ViKHRvUmV0dXJuKTsKICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLnN1Yih0b2tlbkJhbGFuY2UpOwogICAgdG9rZW4uYnVybihjb250cmlidXRvciwgdG9rZW5CYWxhbmNlKTsKICAgIHB1cmNoYXNlc1tjb250cmlidXRvcl0gPSAwOwoKICAgIGNvbnRyaWJ1dG9yLnRyYW5zZmVyKHRvUmV0dXJuKTsKICB9CgogIC8qKgogICAgIEBkZXYgRmluYWxpemVzIHRoZSBjcm93ZHNhbGUsIHRha2luZyBjYXJlIG9mIHRyYW5zZmVyIG9mIGZ1bmRzIHRvIHRoZQogICAgIFdpbmRpbmcgVHJlZSBGb3VuZGF0aW9uIGFuZCBjcmVhdGlvbiBhbmQgZnVuZGluZyBvZiB0aGUgTWFya2V0IFZhbGlkYXRpb24KICAgICBNZWNoYW5pc20gaW4gY2FzZSB0aGUgc29mdCBjYXAgd2FzIGV4Y2VlZGVkLiBJdCBhbHNvIHVucGF1c2VzIHRoZSB0b2tlbiB0bwogICAgIGVuYWJsZSB0cmFuc2ZlcnMuIEl0IGNhbiBiZSBjYWxsZWQgb25seSBvbmNlLCBhZnRlciBgZW5kMlRpbWVzdGFtcGAKICAgKi8KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHB1YmxpYyBvbmx5T3duZXIgaGFzRW5kZWQgewogICAgcmVxdWlyZSghaXNGaW5hbGl6ZWQpOwoKICAgIC8vIGZvd2FyZCBmb3VuZHMgYW5kIHVucGF1c2UgdG9rZW4gb25seSBpZiBtaW5DYXAgaXMgcmVhY2hlZAogICAgaWYgKGZ1bmRlZCgpKSB7CgogICAgICBmb3J3YXJkRnVuZHMoKTsKCiAgICAgIC8vIGZpbmlzaCB0aGUgbWludGluZyBvZiB0aGUgdG9rZW4KICAgICAgdG9rZW4uZmluaXNoTWludGluZygpOwoKICAgICAgLy8gdHJhbnNmZXIgdGhlIG93bmVyc2hpcCBvZiB0aGUgdG9rZW4gdG8gdGhlIGZvdW5kYXRpb24KICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwoKICAgIH0KCiAgICBGaW5hbGl6ZWQoKTsKICAgIGlzRmluYWxpemVkID0gdHJ1ZTsKICB9Cgp9'.
	

]
