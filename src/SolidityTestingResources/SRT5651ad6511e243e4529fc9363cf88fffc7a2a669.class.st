Class {
	#name : #SRT5651ad6511e243e4529fc9363cf88fffc7a2a669,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5651ad6511e243e4529fc9363cf88fffc7a2a669 >> base64 [
	^ 'Ly8gY29tcGlsZXI6IDAuNC4xOStjb21taXQuYzRjYmJiMDUuRW1zY3JpcHRlbi5jbGFuZwpwcmFnbWEgc29saWRpdHkgXjAuNC4xOTsKCi8vIGh0dHBzOi8vd3d3LmV0aGVyZXVtLm9yZy90b2tlbgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgewogIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbCggYWRkcmVzcyBmcm9tLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhICkgcHVibGljOwp9CgovLyBFUkMyMjMKaW50ZXJmYWNlIENvbnRyYWN0UmVjZWl2ZXIgewogIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soIGFkZHJlc3MgZnJvbSwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSApIHB1YmxpYzsKfQoKLy8gRVJDMjAgdG9rZW4gd2l0aCBhZGRlZCBFUkMyMjMgYW5kIEV0aGVyZXVtLVRva2VuIHN1cHBvcnQKLy8KLy8gQmxlbmQgb2YgbXVsdGlwbGUgaW50ZXJmYWNlczoKLy8gLSBodHRwczovL3RoZWV0aGVyZXVtLndpa2kvdy9pbmRleC5waHAvRVJDMjBfVG9rZW5fU3RhbmRhcmQKLy8gLSBodHRwczovL3d3dy5ldGhlcmV1bS5vcmcvdG9rZW4gKHVuY29udHJvbGxlZCwgbm9uLXN0YW5kYXJkKQovLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXhhcmFuL0VSQzIzLXRva2Vucy9ibG9iL1JlY29tbWVuZGVkL0VSQzIyM19Ub2tlbi5zb2wKCmNvbnRyYWN0IEVSQzIyM1Rva2VuCnsKICBzdHJpbmcgIHB1YmxpYyBuYW1lOyAgICAgICAgLy8gRVJDMjAKICBzdHJpbmcgIHB1YmxpYyBzeW1ib2w7ICAgICAgLy8gRVJDMjAKICB1aW50OCAgIHB1YmxpYyBkZWNpbWFsczsgICAgLy8gRVJDMjAKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsgLy8gRVJDMjAKCiAgbWFwcGluZyggYWRkcmVzcyA9PiB1aW50MjU2ICkgYmFsYW5jZXNfOwogIG1hcHBpbmcoIGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpICkgYWxsb3dhbmNlc187CgogIC8vIEVSQzIwCiAgZXZlbnQgQXBwcm92YWwoIGFkZHJlc3MgaW5kZXhlZCBvd25lciwKICAgICAgICAgICAgICAgICAgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsCiAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUgKTsKCiAgZXZlbnQgVHJhbnNmZXIoIGFkZHJlc3MgaW5kZXhlZCBmcm9tLAogICAgICAgICAgICAgICAgICBhZGRyZXNzIGluZGV4ZWQgdG8sCiAgICAgICAgICAgICAgICAgIHVpbnQyNTYgdmFsdWUgKTsKICAgICAgICAgICAgICAgLy8gYnl0ZXMgICAgZGF0YSApOwoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGV2ZW50IEJ1cm4oIGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlICk7CgogIGZ1bmN0aW9uIEVSQzIyM1Rva2VuKCB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cywKICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sICkgcHVibGljCiAgewogICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5ICogMTAgKiogdWludDI1NihkZWNpbWFsVW5pdHMpOwogICAgYmFsYW5jZXNfW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgICBuYW1lID0gdG9rZW5OYW1lOwogICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7CiAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsKICB9CgogIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgeyByZXZlcnQoKTsgfSAvLyBkb2VzIG5vdCBhY2NlcHQgbW9uZXkKCiAgLy8gRVJDMjAKICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgb3duZXIgKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIGJhbGFuY2VzX1tvd25lcl07CiAgfQoKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGFwcHJvdmUoIGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBhbGxvd2FuY2VzX1ttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgQXBwcm92YWwoIG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGFsbG93YW5jZSggYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyICkgcHVibGljIGNvbnN0YW50CiAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpCiAgewogICAgcmV0dXJuIGFsbG93YW5jZXNfW293bmVyXVtzcGVuZGVyXTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljCiAgewogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OyAvLyBudWxsCiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZW1wdHkgKTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgcmVxdWlyZSggdmFsdWUgPD0gYWxsb3dhbmNlc19bZnJvbV1bbXNnLnNlbmRlcl0gKTsKCiAgICBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsKICAgIF90cmFuc2ZlciggZnJvbSwgdG8sIHZhbHVlLCBlbXB0eSApOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRXRoZXJldW0gVG9rZW4KICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbCggYWRkcmVzcyBzcGVuZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IHZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcyBjb250ZXh0ICkgcHVibGljCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIGlmICggYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkgKQogICAgewogICAgICB0b2tlblJlY2lwaWVudCByZWNpcCA9IHRva2VuUmVjaXBpZW50KCBzcGVuZGVyICk7CiAgICAgIHJlY2lwLnJlY2VpdmVBcHByb3ZhbCggbXNnLnNlbmRlciwgdmFsdWUsIGNvbnRleHQgKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSAgICAgICAgCgogIC8vIEV0aGVyZXVtIFRva2VuCiAgZnVuY3Rpb24gYnVybiggdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bbXNnLnNlbmRlcl0gPj0gdmFsdWUgKTsKICAgIGJhbGFuY2VzX1ttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIHRvdGFsU3VwcGx5IC09IHZhbHVlOwoKICAgIEJ1cm4oIG1zZy5zZW5kZXIsIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEV0aGVyZXVtIFRva2VuCiAgZnVuY3Rpb24gYnVybkZyb20oIGFkZHJlc3MgZnJvbSwgdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bZnJvbV0gPj0gdmFsdWUgKTsKICAgIHJlcXVpcmUoIHZhbHVlIDw9IGFsbG93YW5jZXNfW2Zyb21dW21zZy5zZW5kZXJdICk7CgogICAgYmFsYW5jZXNfW2Zyb21dIC09IHZhbHVlOwogICAgYWxsb3dhbmNlc19bZnJvbV1bbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICB0b3RhbFN1cHBseSAtPSB2YWx1ZTsKCiAgICBCdXJuKCBmcm9tLCB2YWx1ZSApOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFUkMyMjMgVHJhbnNmZXIgYW5kIGludm9rZSBzcGVjaWZpZWQgY2FsbGJhY2sKICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywKICAgICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgZGF0YSwKICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGN1c3RvbV9mYWxsYmFjayApIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgX3RyYW5zZmVyKCBtc2cuc2VuZGVyLCB0bywgdmFsdWUsIGRhdGEgKTsKCiAgICBpZiAoIGlzQ29udHJhY3QodG8pICkKICAgIHsKICAgICAgQ29udHJhY3RSZWNlaXZlciByeCA9IENvbnRyYWN0UmVjZWl2ZXIoIHRvICk7CiAgICAgIHJlcXVpcmUoIHJ4LmNhbGwudmFsdWUoMCkoYnl0ZXM0KGtlY2NhazI1NihjdXN0b21fZmFsbGJhY2spKSwKICAgICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgICAgIGRhdGEpICk7CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFUkMyMjMgVHJhbnNmZXIgdG8gYSBjb250cmFjdCBvciBleHRlcm5hbGx5LW93bmVkIGFjY291bnQKICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBpZiAoaXNDb250cmFjdCh0bykpIHsKICAgICAgcmV0dXJuIHRyYW5zZmVyVG9Db250cmFjdCggdG8sIHZhbHVlLCBkYXRhICk7CiAgICB9CgogICAgX3RyYW5zZmVyKCBtc2cuc2VuZGVyLCB0bywgdmFsdWUsIGRhdGEgKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIHRvIGNvbnRyYWN0IGFuZCBpbnZva2UgdG9rZW5GYWxsYmFjaygpIG1ldGhvZAogIGZ1bmN0aW9uIHRyYW5zZmVyVG9Db250cmFjdCggYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSApIHByaXZhdGUKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgX3RyYW5zZmVyKCBtc2cuc2VuZGVyLCB0bywgdmFsdWUsIGRhdGEgKTsKCiAgICBDb250cmFjdFJlY2VpdmVyIHJ4ID0gQ29udHJhY3RSZWNlaXZlcih0byk7CiAgICByeC50b2tlbkZhbGxiYWNrKCBtc2cuc2VuZGVyLCB2YWx1ZSwgZGF0YSApOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIGZldGNoIGNvbnRyYWN0IHNpemUgKG11c3QgYmUgbm9uemVybyB0byBiZSBhIGNvbnRyYWN0KQogIGZ1bmN0aW9uIGlzQ29udHJhY3QoIGFkZHJlc3MgX2FkZHIgKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpCiAgewogICAgdWludCBsZW5ndGg7CiAgICBhc3NlbWJseSB7IGxlbmd0aCA6PSBleHRjb2Rlc2l6ZShfYWRkcikgfQogICAgcmV0dXJuIChsZW5ndGggPiAwKTsKICB9CgogIGZ1bmN0aW9uIF90cmFuc2ZlciggYWRkcmVzcyBmcm9tLAogICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyB0bywKICAgICAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICBieXRlcyBkYXRhICkgaW50ZXJuYWwKICB7CiAgICByZXF1aXJlKCB0byAhPSAweDAgKTsKICAgIHJlcXVpcmUoIGJhbGFuY2VzX1tmcm9tXSA+PSB2YWx1ZSApOwogICAgcmVxdWlyZSggYmFsYW5jZXNfW3RvXSArIHZhbHVlID4gYmFsYW5jZXNfW3RvXSApOyAvLyBjYXRjaCBvdmVyZmxvdwoKICAgIGJhbGFuY2VzX1tmcm9tXSAtPSB2YWx1ZTsKICAgIGJhbGFuY2VzX1t0b10gKz0gdmFsdWU7CgogICAgLy9UcmFuc2ZlciggZnJvbSwgdG8sIHZhbHVlLCBkYXRhICk7IEVSQzIyMy1jb21wYXQgdmVyc2lvbgogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgZW1wdHkgPSBkYXRhOwogICAgVHJhbnNmZXIoIGZyb20sIHRvLCB2YWx1ZSApOyAvLyBFUkMyMC1jb21wYXQgdmVyc2lvbgogIH0KfQ=='.
	

]
