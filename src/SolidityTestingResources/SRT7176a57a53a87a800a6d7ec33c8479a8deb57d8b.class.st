Class {
	#name : #SRT7176a57a53a87a800a6d7ec33c8479a8deb57d8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7176a57a53a87a800a6d7ec33c8479a8deb57d8b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLyBFUkMyMCB0b2tlbiBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgb25seSBwYXJ0aWFsbHkuCgpjb250cmFjdCBBUklUb2tlbiB7CgogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IKICAgIC8vLyBAcGFyYW0gX3Rva2VuTWFuYWdlciBUb2tlbiBtYW5hZ2VyIGFkZHJlc3MuCiAgICBmdW5jdGlvbiBBUklUb2tlbihhZGRyZXNzIF90b2tlbk1hbmFnZXIsIGFkZHJlc3MgX2VzY3JvdykgewogICAgICAgIHRva2VuTWFuYWdlciA9IF90b2tlbk1hbmFnZXI7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgIH0KCgogICAgLyovCiAgICAgKiAgQ29uc3RhbnRzCiAgICAvKi8KCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQVJJIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkFSSSI7CiAgICB1aW50ICAgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgLyovCiAgICAgKiAgVG9rZW4gc3RhdGUKICAgIC8qLwoKICAgIGVudW0gUGhhc2UgewogICAgICAgIENyZWF0ZWQsCiAgICAgICAgUnVubmluZywKICAgICAgICBQYXVzZWQsCiAgICAgICAgTWlncmF0aW5nLAogICAgICAgIE1pZ3JhdGVkCiAgICB9CgogICAgUGhhc2UgcHVibGljIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkNyZWF0ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7IC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkCgogICAgdWludCBwdWJsaWMgcHJpY2UgPSAyMDAwOwogICAgdWludCBwdWJsaWMgdG9rZW5TdXBwbHlMaW1pdCA9IDIwMDAgKiAxMDAwMCAqICgxIGV0aGVyIC8gMSB3ZWkpOwoKICAgIGJvb2wgcHVibGljIHRyYW5zZmVyYWJsZSA9IGZhbHNlOwoKICAgIC8vIFRva2VuIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGNhbGwgYWRtaW5pc3RyYXRpdmUKICAgIC8vIGZ1bmN0aW9ucyBvbiB0aGlzIGNvbnRyYWN0LgogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5NYW5hZ2VyOwoKICAgIC8vIEdhdGhlcmVkIGZ1bmRzIGNhbiBiZSB3aXRoZHJhd24gb25seSB0byBlc2Nyb3cncyBhZGRyZXNzLgogICAgYWRkcmVzcyBwdWJsaWMgZXNjcm93OwoKICAgIC8vIENyb3dkc2FsZSBtYW5hZ2VyIGhhcyBleGNsdXNpdmUgcHJpdmVsZWdlcyB0byBidXJuIHByZXNhbGUgdG9rZW5zLgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlTWFuYWdlcjsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgYmFsYW5jZTsKCgogICAgbW9kaWZpZXIgb25seVRva2VuTWFuYWdlcigpICAgICB7IGlmKG1zZy5zZW5kZXIgIT0gdG9rZW5NYW5hZ2VyKSB0aHJvdzsgXzsgfQogICAgbW9kaWZpZXIgb25seUNyb3dkc2FsZU1hbmFnZXIoKSB7IGlmKG1zZy5zZW5kZXIgIT0gY3Jvd2RzYWxlTWFuYWdlcikgdGhyb3c7IF87IH0KCgogICAgLyovCiAgICAgKiAgRXZlbnRzCiAgICAvKi8KCiAgICBldmVudCBMb2dCdXkoYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IExvZ0J1cm4oYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IExvZ1BoYXNlU3dpdGNoKFBoYXNlIG5ld1BoYXNlKTsKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgoKICAgIC8qLwogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8qLwoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IExldHMgYnV5IHlvdSBzb21lIHRva2Vucy4KICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIF9idXllcikgcHVibGljIHBheWFibGUgewogICAgICAgIC8vIEF2YWlsYWJsZSBvbmx5IGlmIHByZXNhbGUgaXMgcnVubmluZy4KICAgICAgICBpZihjdXJyZW50UGhhc2UgIT0gUGhhc2UuUnVubmluZykgdGhyb3c7CgogICAgICAgIGlmKG1zZy52YWx1ZSA8PSAwKSB0aHJvdzsKICAgICAgICB1aW50IG5ld1Rva2VucyA9IG1zZy52YWx1ZSAqIHByaWNlOwogICAgICAgIGlmICh0b3RhbFN1cHBseSArIG5ld1Rva2VucyA+IHRva2VuU3VwcGx5TGltaXQpIHRocm93OwogICAgICAgIGJhbGFuY2VbX2J1eWVyXSArPSBuZXdUb2tlbnM7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gbmV3VG9rZW5zOwogICAgICAgIExvZ0J1eShfYnV5ZXIsIG5ld1Rva2Vucyk7CiAgICB9CgoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYwogICAgICAgIG9ubHlDcm93ZHNhbGVNYW5hZ2VyCiAgICB7CiAgICAgICAgLy8gQXZhaWxhYmxlIG9ubHkgZHVyaW5nIG1pZ3JhdGlvbiBwaGFzZQogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5NaWdyYXRpbmcpIHRocm93OwoKICAgICAgICB1aW50IHRva2VucyA9IGJhbGFuY2VbX293bmVyXTsKICAgICAgICBpZih0b2tlbnMgPT0gMCkgdGhyb3c7CiAgICAgICAgYmFsYW5jZVtfb3duZXJdID0gMDsKICAgICAgICB0b3RhbFN1cHBseSAtPSB0b2tlbnM7CiAgICAgICAgTG9nQnVybihfb3duZXIsIHRva2Vucyk7CgogICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgc3dpdGNoIHBoYXNlIHdoZW4gbWlncmF0aW9uIGlzIGRvbmUuCiAgICAgICAgaWYodG90YWxTdXBwbHkgPT0gMCkgewogICAgICAgICAgICBjdXJyZW50UGhhc2UgPSBQaGFzZS5NaWdyYXRlZDsKICAgICAgICAgICAgTG9nUGhhc2VTd2l0Y2goUGhhc2UuTWlncmF0ZWQpOwogICAgICAgIH0KICAgIH0KCgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VbX293bmVyXTsKICAgIH0KCgogICAgLyovCiAgICAgKiAgQWRtaW5pc3RyYXRpdmUgZnVuY3Rpb25zCiAgICAvKi8KCiAgICBmdW5jdGlvbiBzZXRQcmVzYWxlUGhhc2UoUGhhc2UgX25leHRQaGFzZSkgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIGJvb2wgY2FuU3dpdGNoUGhhc2UKICAgICAgICAgICAgPSAgKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5DcmVhdGVkICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuUnVubmluZykKICAgICAgICAgICAgfHwgKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5SdW5uaW5nICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuUGF1c2VkKQogICAgICAgICAgICAgICAgLy8gc3dpdGNoIHRvIG1pZ3JhdGlvbiBwaGFzZSBvbmx5IGlmIGNyb3dkc2FsZSBtYW5hZ2VyIGlzIHNldAogICAgICAgICAgICB8fCAoKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5SdW5uaW5nIHx8IGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5QYXVzZWQpCiAgICAgICAgICAgICAgICAmJiBfbmV4dFBoYXNlID09IFBoYXNlLk1pZ3JhdGluZwogICAgICAgICAgICAgICAgJiYgY3Jvd2RzYWxlTWFuYWdlciAhPSAweDApCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUGF1c2VkICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuUnVubmluZykKICAgICAgICAgICAgICAgIC8vIHN3aXRjaCB0byBtaWdyYXRlZCBvbmx5IGlmIGV2ZXJ5dGluZyBpcyBtaWdyYXRlZAogICAgICAgICAgICB8fCAoY3VycmVudFBoYXNlID09IFBoYXNlLk1pZ3JhdGluZyAmJiBfbmV4dFBoYXNlID09IFBoYXNlLk1pZ3JhdGVkCiAgICAgICAgICAgICAgICAmJiB0b3RhbFN1cHBseSA9PSAwKTsKCiAgICAgICAgaWYoIWNhblN3aXRjaFBoYXNlKSB0aHJvdzsKICAgICAgICBjdXJyZW50UGhhc2UgPSBfbmV4dFBoYXNlOwogICAgICAgIExvZ1BoYXNlU3dpdGNoKF9uZXh0UGhhc2UpOwogICAgfQoKCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKCkgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIC8vIEF2YWlsYWJsZSBhdCBhbnkgcGhhc2UuCiAgICAgICAgaWYodGhpcy5iYWxhbmNlID4gMCkgewogICAgICAgICAgICBpZighZXNjcm93LnNlbmQodGhpcy5iYWxhbmNlKSkgdGhyb3c7CiAgICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVNYW5hZ2VyKGFkZHJlc3MgX21ncikgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIC8vIFlvdSBjYW4ndCBjaGFuZ2UgY3Jvd2RzYWxlIGNvbnRyYWN0IHdoZW4gbWlncmF0aW9uIGlzIGluIHByb2dyZXNzLgogICAgICAgIGlmKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5NaWdyYXRpbmcpIHRocm93OwogICAgICAgIGNyb3dkc2FsZU1hbmFnZXIgPSBfbWdyOwogICAgfQogICAgCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZiAoIXRyYW5zZmVyYWJsZSkgdGhyb3c7CiAgICAgICAgaWYgKGJhbGFuY2VbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VHJhbnNmZXJhYmxlKGJvb2wgX3ZhbHVlKSBwdWJsaWMKICAgICAgICBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgICAgdHJhbnNmZXJhYmxlID0gX3ZhbHVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRQcmljZSh1aW50MjU2IF9wcmljZSkgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5QYXVzZWQpIHRocm93OwogICAgICAgIGlmKF9wcmljZSA8PSAwKSB0aHJvdzsKCiAgICAgICAgcHJpY2UgPSBfcHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VG9rZW5TdXBwbHlMaW1pdCh1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5QYXVzZWQpIHRocm93OwogICAgICAgIGlmKF92YWx1ZSA8PSAwKSB0aHJvdzsKCiAgICAgICAgdWludCBfdG9rZW5TdXBwbHlMaW1pdDsKICAgICAgICBfdG9rZW5TdXBwbHlMaW1pdCA9IF92YWx1ZSAqICgxIGV0aGVyIC8gMSB3ZWkpOwoKICAgICAgICBpZih0b3RhbFN1cHBseSA+IF90b2tlblN1cHBseUxpbWl0KSB0aHJvdzsKCiAgICAgICAgdG9rZW5TdXBwbHlMaW1pdCA9IF90b2tlblN1cHBseUxpbWl0OwogICAgfQp9'.
	

]
