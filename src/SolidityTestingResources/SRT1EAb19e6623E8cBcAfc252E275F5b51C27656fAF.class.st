Class {
	#name : #SRT1EAb19e6623E8cBcAfc252E275F5b51C27656fAF,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1EAb19e6623E8cBcAfc252E275F5b51C27656fAF >> base64 [
	^ ''.
	

]
