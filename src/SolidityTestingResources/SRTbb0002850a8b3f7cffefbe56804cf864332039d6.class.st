Class {
	#name : #SRTbb0002850a8b3f7cffefbe56804cf864332039d6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb0002850a8b3f7cffefbe56804cf864332039d6 >> base64 [
	^ ''.
	

]
