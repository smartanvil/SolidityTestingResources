Class {
	#name : #SRT373604ee6f3bce3b7126bb38f54ce6fd5ec59803,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT373604ee6f3bce3b7126bb38f54ce6fd5ec59803 >> base64 [
	^ ''.
	

]
