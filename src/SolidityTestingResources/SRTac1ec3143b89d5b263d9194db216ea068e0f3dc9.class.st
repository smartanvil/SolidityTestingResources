Class {
	#name : #SRTac1ec3143b89d5b263d9194db216ea068e0f3dc9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTac1ec3143b89d5b263d9194db216ea068e0f3dc9 >> base64 [
	^ ''.
	

]
