Class {
	#name : #SRT9501bfc48897dceeadf73113ef635d2ff7ee4b97,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9501bfc48897dceeadf73113ef635d2ff7ee4b97 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBUb2tlbiB7CiAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAqLwogIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgIC8vSWYgeW91ciB0b2tlbiBsZWF2ZXMgb3V0IHRvdGFsU3VwcGx5IGFuZCBjYW4gaXNzdWUgbW9yZSB0b2tlbnMgYXMgdGltZSBnb2VzIG9uLCB5b3UgbmVlZCB0byBjaGVjayBpZiBpdCBkb2Vzbid0IHdyYXAuCiAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgIC8vaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgLy9zYW1lIGFzIGFib3ZlLiBSZXBsYWNlIHRoaXMgbGluZSB3aXRoIHRoZSBmb2xsb3dpbmcgaWYgeW91IHdhbnQgdG8gcHJvdGVjdCBhZ2FpbnN0IHdyYXBwaW5nIHVpbnRzLgogICAgLy9pZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IEVhc3lNaW5lVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJlYXN5TUlORSBUb2tlbiI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRU1UIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgZnVuY3Rpb24gRWFzeU1pbmVUb2tlbihhZGRyZXNzIF9pY29BZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfcHJlSWNvQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgX2Vhc3lNaW5lV2FsbGV0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgX2JvdW50eVdhbGxldEFkZHJlc3MpIHsKICAgIHJlcXVpcmUoX2ljb0FkZHJlc3MgIT0gMHgwKTsKICAgIHJlcXVpcmUoX3ByZUljb0FkZHJlc3MgIT0gMHgwKTsKICAgIHJlcXVpcmUoX2Vhc3lNaW5lV2FsbGV0QWRkcmVzcyAhPSAweDApOwogICAgcmVxdWlyZShfYm91bnR5V2FsbGV0QWRkcmVzcyAhPSAweDApOwoKICAgIHRvdGFsU3VwcGx5ID0gMzMwMDAwMDAgKiAxMCoqMTg7ICAgICAgICAgICAgICAgICAgICAgLy8gMzMuMDAwLjAwMCBFTVQKCiAgICB1aW50MjU2IGljb1Rva2VucyA9IDI3MDAwMDAwICogMTAqKjE4OyAgICAgICAgICAgICAgIC8vIDI3LjAwMC4wMDAgRU1UCgogICAgdWludDI1NiBwcmVJY29Ub2tlbnMgPSAyMDAwMDAwICogMTAqKjE4OyAgICAgICAgICAgICAvLyAyLjAwMC4wMDAgRU1UCgogICAgdWludDI1NiBlYXN5TWluZVRva2VucyA9IDMwMDAwMDAgKiAxMCoqMTg7ICAgICAgICAgICAvLyAxLjUwMC4wMDAgRU1UIGRldiB0ZWFtICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gNTAwLjAwMCBFTVQgYWR2aXNvcnMgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxLjAwMC4wMDAgRU1UIGVhc3lNSU5FIGNvcnBvcmF0aW9uICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPSAzLjAwMC4wMDAgRU1UCgogICAgdWludDI1NiBib3VudHlUb2tlbnMgPSAxMDAwMDAwICogMTAqKjE4OyAgICAgICAgICAgICAvLyAxLjAwMC4wMDAgRU1UCgogICAgYXNzZXJ0KGljb1Rva2VucyArIHByZUljb1Rva2VucyArIGVhc3lNaW5lVG9rZW5zICsgYm91bnR5VG9rZW5zID09IHRvdGFsU3VwcGx5KTsKCiAgICBiYWxhbmNlc1tfaWNvQWRkcmVzc10gPSBpY29Ub2tlbnM7CiAgICBUcmFuc2ZlcigwLCBfaWNvQWRkcmVzcywgaWNvVG9rZW5zKTsKCiAgICBiYWxhbmNlc1tfcHJlSWNvQWRkcmVzc10gPSBwcmVJY29Ub2tlbnM7CiAgICBUcmFuc2ZlcigwLCBfcHJlSWNvQWRkcmVzcywgcHJlSWNvVG9rZW5zKTsKCiAgICBiYWxhbmNlc1tfZWFzeU1pbmVXYWxsZXRBZGRyZXNzXSA9IGVhc3lNaW5lVG9rZW5zOwogICAgVHJhbnNmZXIoMCwgX2Vhc3lNaW5lV2FsbGV0QWRkcmVzcywgZWFzeU1pbmVUb2tlbnMpOwoKICAgIGJhbGFuY2VzW19ib3VudHlXYWxsZXRBZGRyZXNzXSA9IGJvdW50eVRva2VuczsKICAgIFRyYW5zZmVyKDAsIF9ib3VudHlXYWxsZXRBZGRyZXNzLCBib3VudHlUb2tlbnMpOwogIH0KCiAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQp9'.
	

]
