Class {
	#name : #SRT5bd4b6ab074ede76baa2aec49dcf9edb89a90dcf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5bd4b6ab074ede76baa2aec49dcf9edb89a90dcf >> base64 [
	^ ''.
	

]
