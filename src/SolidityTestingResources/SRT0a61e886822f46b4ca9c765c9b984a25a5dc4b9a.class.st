Class {
	#name : #SRT0a61e886822f46b4ca9c765c9b984a25a5dc4b9a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a61e886822f46b4ca9c765c9b984a25a5dc4b9a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IFZhbml0eUxpYiB7CiAgICB1aW50IGNvbnN0YW50IG0gPSAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlZmZmZmZjMmY7CgogICAgZnVuY3Rpb24gbGVuZ3RoT2ZDb21tb25QcmVmaXgoYnl0ZXMzMiBhLCBieXRlczMyIGIpIHB1YmxpYyBwdXJlIHJldHVybnModWludCkgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFbaV0gIT0gYltpXSB8fCBhW2ldID09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBieXRlc1RvQnl0ZXMzMihieXRlcyBzb3VyY2UpIHB1YmxpYyBwdXJlIHJldHVybnMoYnl0ZXMzMiByZXN1bHQpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHJlc3VsdCA6PSBtbG9hZChhZGQoc291cmNlLCAzMikpCiAgICAgICAgfQogICAgfQoKICAgIC8qIENvbnZlcnRzIGdpdmVuIG51bWJlciB0byBiYXNlNTgsIGxpbWl0ZWQgYnkgMzIgc3ltYm9scyAqLwogICAgZnVuY3Rpb24gdG9CYXNlNThDaGVja2VkKHVpbnQyNTYgX3ZhbHVlLCBieXRlIGFwcENvZGUpIHB1YmxpYyBwdXJlIHJldHVybnMoYnl0ZXMzMikgewogICAgICAgIHN0cmluZyBtZW1vcnkgbGV0dGVycyA9ICIxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6IjsKICAgICAgICBieXRlcyBtZW1vcnkgYWxwaGFiZXQgPSBieXRlcyhsZXR0ZXJzKTsKICAgICAgICB1aW50OCBiYXNlID0gNTg7CiAgICAgICAgdWludDggbGVuID0gMDsKICAgICAgICB1aW50MjU2IHJlbWFpbmRlciA9IDA7CiAgICAgICAgYm9vbCBuZWVkQnJlYWsgPSBmYWxzZTsKICAgICAgICBieXRlcyBtZW1vcnkgYnl0ZXNSZXZlcnNlZCA9IGJ5dGVzKG5ldyBzdHJpbmcoMzIpKTsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAwOyB0cnVlOyBpKyspIHsKICAgICAgICAgICAgaWYgKF92YWx1ZSA8IGJhc2UpIHsKICAgICAgICAgICAgICAgIG5lZWRCcmVhayA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVtYWluZGVyID0gX3ZhbHVlICUgYmFzZTsKICAgICAgICAgICAgX3ZhbHVlID0gdWludDI1NihfdmFsdWUgLyBiYXNlKTsKICAgICAgICAgICAgaWYgKGxlbiA9PSAzMikgewogICAgICAgICAgICAgICAgZm9yICh1aW50IGogPSAwOyBqIDwgbGVuIC0gMTsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXNSZXZlcnNlZFtqXSA9IGJ5dGVzUmV2ZXJzZWRbaiArIDFdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGVuLS07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnl0ZXNSZXZlcnNlZFtsZW5dID0gYWxwaGFiZXRbcmVtYWluZGVyXTsKICAgICAgICAgICAgbGVuKys7CiAgICAgICAgICAgIGlmIChuZWVkQnJlYWspIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFJldmVyc2UKICAgICAgICBieXRlcyBtZW1vcnkgcmVzdWx0ID0gYnl0ZXMobmV3IHN0cmluZygzMikpOwogICAgICAgIHJlc3VsdFswXSA9IGFwcENvZGU7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMxOyBpKyspIHsKICAgICAgICAgICAgcmVzdWx0W2kgKyAxXSA9IGJ5dGVzUmV2ZXJzZWRbbGVuIC0gMSAtIGldOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gYnl0ZXNUb0J5dGVzMzIocmVzdWx0KTsKICAgIH0KCiAgICAvLyBDcmVhdGUgQlRDIEFkZHJlc3M6IGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL1RlY2huaWNhbF9iYWNrZ3JvdW5kX29mX3ZlcnNpb25fMV9CaXRjb2luX2FkZHJlc3NlcyNIb3dfdG9fY3JlYXRlX0JpdGNvaW5fQWRkcmVzcwogICAgZnVuY3Rpb24gY3JlYXRlQnRjQWRkcmVzc0hleCh1aW50MjU2IHB1YmxpY1hQb2ludCwgdWludDI1NiBwdWJsaWNZUG9pbnQpIHB1YmxpYyBwdXJlIHJldHVybnModWludDI1NikgewogICAgICAgIGJ5dGVzMjAgcHVibGljS2V5UGFydCA9IHJpcGVtZDE2MChzaGEyNTYoYnl0ZSgweDA0KSwgcHVibGljWFBvaW50LCBwdWJsaWNZUG9pbnQpKTsKICAgICAgICBieXRlczMyIHB1YmxpY0tleUNoZWNrQ29kZSA9IHNoYTI1NihzaGEyNTYoYnl0ZSgweDAwKSwgcHVibGljS2V5UGFydCkpOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBwdWJsaWNLZXkgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IDc7IGkrKykgewogICAgICAgICAgICBwdWJsaWNLZXlbaV0gPSAweDAwOwogICAgICAgIH0KICAgICAgICBwdWJsaWNLZXlbN10gPSAweDAwOyAvLyBNYWluIE5ldHdvcmsKICAgICAgICBmb3IgKHVpbnQgaiA9IDA7IGogPCAyMDsgaisrKSB7CiAgICAgICAgICAgIHB1YmxpY0tleVtqICsgOF0gPSBwdWJsaWNLZXlQYXJ0W2pdOwogICAgICAgIH0KICAgICAgICBwdWJsaWNLZXlbMjhdID0gcHVibGljS2V5Q2hlY2tDb2RlWzBdOwogICAgICAgIHB1YmxpY0tleVsyOV0gPSBwdWJsaWNLZXlDaGVja0NvZGVbMV07CiAgICAgICAgcHVibGljS2V5WzMwXSA9IHB1YmxpY0tleUNoZWNrQ29kZVsyXTsKICAgICAgICBwdWJsaWNLZXlbMzFdID0gcHVibGljS2V5Q2hlY2tDb2RlWzNdOwogICAgICAgIAogICAgICAgIHJldHVybiB1aW50MjU2KGJ5dGVzVG9CeXRlczMyKHB1YmxpY0tleSkpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjcmVhdGVCdGNBZGRyZXNzKHVpbnQyNTYgcHVibGljWFBvaW50LCB1aW50MjU2IHB1YmxpY1lQb2ludCkgcHVibGljIHB1cmUgcmV0dXJucyhieXRlczMyKSB7CiAgICAgICAgcmV0dXJuIHRvQmFzZTU4Q2hlY2tlZChjcmVhdGVCdGNBZGRyZXNzSGV4KHB1YmxpY1hQb2ludCwgcHVibGljWVBvaW50KSwgIjEiKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21wbGV4aXR5Rm9yQnRjQWRkcmVzc1ByZWZpeChieXRlcyBwcmVmaXgpIHB1YmxpYyBwdXJlIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBjb21wbGV4aXR5Rm9yQnRjQWRkcmVzc1ByZWZpeFdpdGhMZW5ndGgocHJlZml4LCBwcmVmaXgubGVuZ3RoKTsKICAgIH0KCiAgICAvLyBodHRwczovL2JpdGNvaW4uc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzQ4NTg2CiAgICBmdW5jdGlvbiBjb21wbGV4aXR5Rm9yQnRjQWRkcmVzc1ByZWZpeFdpdGhMZW5ndGgoYnl0ZXMgcHJlZml4LCB1aW50IGxlbmd0aCkgcHVibGljIHB1cmUgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmVxdWlyZShwcmVmaXgubGVuZ3RoID49IGxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgdWludDhbMTI4XSBtZW1vcnkgdW5iYXNlNTggPSBbCiAgICAgICAgICAgIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgCiAgICAgICAgICAgIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwKICAgICAgICAgICAgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAKICAgICAgICAgICAgMjU1LCAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCAyNTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgMjU1LCAKICAgICAgICAgICAgMjU1LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMjU1LCAxNywgMTgsIDE5LCAyMCwgMjEsIDI1NSwgCiAgICAgICAgICAgIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUsCiAgICAgICAgICAgIDI1NSwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCAyNTUsIDQ0LCA0NSwgNDYsCiAgICAgICAgICAgIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgMjU1LCAyNTUsIDI1NSwgMjU1LCAyNTUKICAgICAgICBdOwoKICAgICAgICB1aW50IGxlYWRpbmdPbmVzID0gY291bnRCdGNBZGRyZXNzTGVhZGluZ09uZXMocHJlZml4LCBsZW5ndGgpOwoKICAgICAgICB1aW50MjU2IHByZWZpeFZhbHVlID0gMDsKICAgICAgICB1aW50MjU2IHByZWZpeDEgPSAxOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHVpbnQgaW5kZXggPSB1aW50KHByZWZpeFtpXSk7CiAgICAgICAgICAgIHJlcXVpcmUoaW5kZXggIT0gMjU1KTsKICAgICAgICAgICAgcHJlZml4VmFsdWUgPSBwcmVmaXhWYWx1ZSAqIDU4ICsgdW5iYXNlNThbaW5kZXhdOwogICAgICAgICAgICBwcmVmaXgxICo9IDU4OwogICAgICAgIH0KCiAgICAgICAgdWludDI1NiB0b3AgPSAodWludDI1NigxKSA8PCAoMjAwIC0gOCpsZWFkaW5nT25lcykpOwogICAgICAgIHVpbnQyNTYgdG90YWwgPSAwOwogICAgICAgIHVpbnQyNTYgcHJlZml4TWluID0gcHJlZml4VmFsdWU7CiAgICAgICAgdWludDI1NiBkaWZmID0gMDsKICAgICAgICBmb3IgKHVpbnQgZGlnaXRzID0gMTsgcHJlZml4MS81OCA8ICgxIDw8IDE5Mik7IGRpZ2l0cysrKSB7CiAgICAgICAgICAgIHByZWZpeDEgKj0gNTg7CiAgICAgICAgICAgIHByZWZpeE1pbiAqPSA1ODsKICAgICAgICAgICAgcHJlZml4VmFsdWUgPSBwcmVmaXhWYWx1ZSAqIDU4ICsgNTc7CgogICAgICAgICAgICBkaWZmID0gMDsKICAgICAgICAgICAgaWYgKHByZWZpeFZhbHVlID49IHRvcCkgewogICAgICAgICAgICAgICAgZGlmZiArPSBwcmVmaXhWYWx1ZSAtIHRvcDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocHJlZml4TWluIDwgKHRvcCA+PiA4KSkgewogICAgICAgICAgICAgICAgZGlmZiArPSAodG9wID4+IDgpIC0gcHJlZml4TWluOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoKDU4ICoqIGRpZ2l0cykgPj0gZGlmZikgewogICAgICAgICAgICAgICAgdG90YWwgKz0gKDU4ICoqIGRpZ2l0cykgLSBkaWZmOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocHJlZml4TWluID09IDApIHsgLy8gaWYgcHJlZml4IGlzIGNvbnRhaW5zIG9ubHkgb25lczogMTExMTExCiAgICAgICAgICAgIHRvdGFsID0gKDU4ICoqIChkaWdpdHMgLSAxKSkgLSBkaWZmOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICgxIDw8IDE5MikgLyB0b3RhbDsKICAgIH0KCiAgICBmdW5jdGlvbiBjb3VudEJ0Y0FkZHJlc3NMZWFkaW5nT25lcyhieXRlcyBwcmVmaXgsIHVpbnQgbGVuZ3RoKSBwdWJsaWMgcHVyZSByZXR1cm5zKHVpbnQpIHsKICAgICAgICB1aW50IGxlYWRpbmdPbmVzID0gMTsKICAgICAgICBmb3IgKHVpbnQgaiA9IDA7IGogPCBsZW5ndGggJiYgcHJlZml4W2pdID09IDQ5OyBqKyspIHsKICAgICAgICAgICAgbGVhZGluZ09uZXMgPSBqICsgMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlYWRpbmdPbmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzVmFsaWRCaWNvaW5BZGRyZXNzUHJlZml4KGJ5dGVzIHByZWZpeEFyZykgcHVibGljIHB1cmUgcmV0dXJucyhib29sKSB7CiAgICAgICAgaWYgKHByZWZpeEFyZy5sZW5ndGggPCA1KSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHByZWZpeEFyZ1swXSAhPSAiMSIgJiYgcHJlZml4QXJnWzBdICE9ICIzIikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHByZWZpeEFyZy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBieXRlIGNoID0gcHJlZml4QXJnW2ldOwogICAgICAgICAgICBpZiAoY2ggPT0gIjAiIHx8IGNoID09ICJPIiB8fCBjaCA9PSAiSSIgfHwgY2ggPT0gImwiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCEoKGNoID49ICIxIiAmJiBjaCA8PSAiOSIpIHx8IChjaCA+PSAiYSIgJiYgY2ggPD0gInoiKSB8fCAoY2ggPj0gIkEiICYmIGNoIDw9ICJaIikpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzVmFsaWRQdWJsaWNLZXkodWludDI1NiB4LCB1aW50MjU2IHkpIHB1YmxpYyBwdXJlIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiAobXVsbW9kKHksIHksIG0pID09IGFkZG1vZChtdWxtb2QoeCwgbXVsbW9kKHgsIHgsIG0pLCBtKSwgNywgbSkpOwogICAgfQoKfQoKY29udHJhY3QgSVVwZ3JhZGFibGUgewoKICAgIGZ1bmN0aW9uIHN0YXJ0VXBncmFkZSgpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGVuZFVwZ3JhZGUoKSBwdWJsaWM7Cgp9Cgpjb250cmFjdCBVcGdyYWRhYmxlIGlzIE93bmFibGUgewoKICAgIHN0cnVjdCBVcGdyYWRhYmxlU3RhdGUgewogICAgICAgIGJvb2wgaXNVcGdyYWRpbmc7CiAgICAgICAgYWRkcmVzcyBwcmV2VmVyc2lvbjsKICAgICAgICBhZGRyZXNzIG5leHRWZXJzaW9uOwogICAgfQoKICAgIFVwZ3JhZGFibGVTdGF0ZSBwdWJsaWMgdXBncmFkYWJsZVN0YXRlOwoKICAgIGV2ZW50IEluaXRpYWxpemVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2VmVyc2lvbik7CiAgICBldmVudCBVcGdyYWRpbmcoYWRkcmVzcyBpbmRleGVkIG5leHRWZXJzaW9uKTsKICAgIGV2ZW50IFVwZ3JhZGVkKGFkZHJlc3MgaW5kZXhlZCBuZXh0VmVyc2lvbik7CgogICAgbW9kaWZpZXIgaXNMYXN0ZXN0VmVyc2lvbiB7CiAgICAgICAgcmVxdWlyZSghdXBncmFkYWJsZVN0YXRlLmlzVXBncmFkaW5nKTsKICAgICAgICByZXF1aXJlKHVwZ3JhZGFibGVTdGF0ZS5uZXh0VmVyc2lvbiA9PSBhZGRyZXNzKDApKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lck9yaWdpbiB7CiAgICAgICAgcmVxdWlyZSh0eC5vcmlnaW4gPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gVXBncmFkYWJsZShhZGRyZXNzIF9wcmV2VmVyc2lvbikgcHVibGljIHsKICAgICAgICBpZiAoX3ByZXZWZXJzaW9uICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IE93bmFibGUoX3ByZXZWZXJzaW9uKS5vd25lcigpKTsKICAgICAgICAgICAgdXBncmFkYWJsZVN0YXRlLmlzVXBncmFkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgdXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uID0gX3ByZXZWZXJzaW9uOwogICAgICAgICAgICBJVXBncmFkYWJsZShfcHJldlZlcnNpb24pLnN0YXJ0VXBncmFkZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEluaXRpYWxpemVkKF9wcmV2VmVyc2lvbik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHN0YXJ0VXBncmFkZSgpIHB1YmxpYyBvbmx5T3duZXJPcmlnaW4gewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBvd25lcik7CiAgICAgICAgcmVxdWlyZSghdXBncmFkYWJsZVN0YXRlLmlzVXBncmFkaW5nKTsKICAgICAgICByZXF1aXJlKHVwZ3JhZGFibGVTdGF0ZS5uZXh0VmVyc2lvbiA9PSAwKTsKICAgICAgICB1cGdyYWRhYmxlU3RhdGUuaXNVcGdyYWRpbmcgPSB0cnVlOwogICAgICAgIHVwZ3JhZGFibGVTdGF0ZS5uZXh0VmVyc2lvbiA9IG1zZy5zZW5kZXI7CiAgICAgICAgVXBncmFkaW5nKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vZnVuY3Rpb24gdXBncmFkZSh1aW50IGluZGV4LCB1aW50IHNpemUpIHB1YmxpYyBvbmx5T3duZXIge30KCiAgICBmdW5jdGlvbiBlbmRVcGdyYWRlKCkgcHVibGljIG9ubHlPd25lck9yaWdpbiB7CiAgICAgICAgcmVxdWlyZSh1cGdyYWRhYmxlU3RhdGUuaXNVcGdyYWRpbmcpOwogICAgICAgIHVwZ3JhZGFibGVTdGF0ZS5pc1VwZ3JhZGluZyA9IGZhbHNlOwogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIHJlcXVpcmUodXBncmFkYWJsZVN0YXRlLm5leHRWZXJzaW9uID09IG1zZy5zZW5kZXIpOwogICAgICAgICAgICBVcGdyYWRlZCh1cGdyYWRhYmxlU3RhdGUubmV4dFZlcnNpb24pOwogICAgICAgIH0gCiAgICAgICAgZWxzZSAgewogICAgICAgICAgICBpZiAodXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgICAgIFVwZ3JhZGFibGUodXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uKS5lbmRVcGdyYWRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgSW5pdGlhbGl6ZWQodXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uKTsKICAgICAgICB9CiAgICB9Cgp9Cgpjb250cmFjdCBJRUMgewoKICAgIGZ1bmN0aW9uIF9pbnZlcnNlKHVpbnQyNTYgYSkgcHVibGljIGNvbnN0YW50IAogICAgICAgIHJldHVybnModWludDI1NiBpbnZBKTsKCiAgICBmdW5jdGlvbiBfZWNBZGQodWludDI1NiB4MSx1aW50MjU2IHkxLHVpbnQyNTYgejEsCiAgICAgICAgICAgICAgICAgICAgdWludDI1NiB4Mix1aW50MjU2IHkyLHVpbnQyNTYgejIpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1NiB4Myx1aW50MjU2IHkzLHVpbnQyNTYgejMpOwoKICAgIGZ1bmN0aW9uIF9lY0RvdWJsZSh1aW50MjU2IHgxLHVpbnQyNTYgeTEsdWludDI1NiB6MSkgcHVibGljIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2IHgzLHVpbnQyNTYgeTMsdWludDI1NiB6Myk7CgogICAgZnVuY3Rpb24gX2VjTXVsKHVpbnQyNTYgZCwgdWludDI1NiB4MSx1aW50MjU2IHkxLHVpbnQyNTYgejEpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1NiB4Myx1aW50MjU2IHkzLHVpbnQyNTYgejMpOwoKICAgIGZ1bmN0aW9uIHB1YmxpY0tleSh1aW50MjU2IHByaXZLZXkpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1NiBxeCwgdWludDI1NiBxeSk7CgogICAgZnVuY3Rpb24gZGVyaXZlS2V5KHVpbnQyNTYgcHJpdktleSwgdWludDI1NiBwdWJYLCB1aW50MjU2IHB1YlkpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1NiBxeCwgdWludDI1NiBxeSk7Cgp9Cgpjb250cmFjdCBUYXNrUmVnaXN0ZXIgaXMgVXBncmFkYWJsZSwgVmFuaXR5TGliIHsKCiAgICBlbnVtIFRhc2tUeXBlIHsKICAgICAgICBCSVRDT0lOX0FERFJFU1NfUFJFRklYCiAgICB9CgogICAgc3RydWN0IFRhc2sgewogICAgICAgIFRhc2tUeXBlIHRhc2tUeXBlOwogICAgICAgIHVpbnQyNTYgdGFza0lkOwogICAgICAgIGFkZHJlc3MgY3JlYXRvcjsKICAgICAgICB1aW50MjU2IHJld2FyZDsKICAgICAgICBieXRlczMyIGRhdGE7CiAgICAgICAgdWludDI1NiBkYXRhTGVuZ3RoOwogICAgICAgIHVpbnQyNTYgcmVxdWVzdFB1YmxpY1hQb2ludDsKICAgICAgICB1aW50MjU2IHJlcXVlc3RQdWJsaWNZUG9pbnQ7CiAgICAgICAgdWludDI1NiBhbnN3ZXJQcml2YXRlS2V5OwogICAgfQoKICAgIElFQyBwdWJsaWMgZWM7CiAgICBFUkMyMCBwdWJsaWMgdG9rZW47CiAgICB1aW50MjU2IHB1YmxpYyBuZXh0VGFza0lkID0gMTsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmV3YXJkOwogICAgCiAgICBUYXNrW10gcHVibGljIHRhc2tzOwogICAgVGFza1tdIHB1YmxpYyBjb21wbGV0ZWRUYXNrczsKICAgIG1hcHBpbmcodWludDI1NiA9PiB1aW50KSBwdWJsaWMgaW5kZXhPZlRhc2tJZDsgLy8gU3RhcnRpbmcgZnJvbSAxCiAgICBldmVudCBUYXNrQ3JlYXRlZCh1aW50MjU2IGluZGV4ZWQgdGFza0lkKTsKICAgIGV2ZW50IFRhc2tTb2x2ZWQodWludDI1NiBpbmRleGVkIHRhc2tJZCk7CiAgICBldmVudCBUYXNrUGF5ZWQodWludDI1NiBpbmRleGVkIHRhc2tJZCk7CgogICAgZnVuY3Rpb24gVGFza1JlZ2lzdGVyKGFkZHJlc3MgX2VjLCBhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfcHJldlZlcnNpb24pIHB1YmxpYyBVcGdyYWRhYmxlKF9wcmV2VmVyc2lvbikgewogICAgICAgIGVjID0gSUVDKF9lYyk7CiAgICAgICAgdG9rZW4gPSBFUkMyMChfdG9rZW4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZ3JhZGUodWludCBzaXplKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHVwZ3JhZGFibGVTdGF0ZS5pc1VwZ3JhZGluZyk7CiAgICAgICAgcmVxdWlyZSh1cGdyYWRhYmxlU3RhdGUucHJldlZlcnNpb24gIT0gMCk7CgogICAgICAgIC8vIE1pZ3JhdGUgc29tZSB2YXJzCiAgICAgICAgbmV4dFRhc2tJZCA9IFRhc2tSZWdpc3Rlcih1cGdyYWRhYmxlU3RhdGUucHJldlZlcnNpb24pLm5leHRUYXNrSWQoKTsKICAgICAgICB0b3RhbFJld2FyZCA9IHRva2VuLmJhbGFuY2VPZih1cGdyYWRhYmxlU3RhdGUucHJldlZlcnNpb24pOy8vVE9ETzogVGFza1JlZ2lzdGVyKHVwZ3JhZGFibGVTdGF0ZS5wcmV2VmVyc2lvbikudG90YWxSZXdhcmQoKTsKCiAgICAgICAgdWludCBpbmRleCA9IHRhc2tzLmxlbmd0aDsKICAgICAgICB1aW50IHRhc2tzQ291bnQgPSBUYXNrUmVnaXN0ZXIodXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uKS50YXNrc0NvdW50KCk7CgogICAgICAgIC8vIE1pZ3JhdGUgdGFza3MKCiAgICAgICAgZm9yICh1aW50IGkgPSBpbmRleDsgaSA8IGluZGV4ICsgc2l6ZSAmJiBpIDwgdGFza3NDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIHRhc2tzLnB1c2goVGFzayhUYXNrVHlwZS5CSVRDT0lOX0FERFJFU1NfUFJFRklYLDAsMCwwLGJ5dGVzMzIoMCksMCwwLDAsMCkpOwogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGogPSBpbmRleDsgaiA8IGluZGV4ICsgc2l6ZSAmJiBqIDwgdGFza3NDb3VudDsgaisrKSB7CiAgICAgICAgICAgICgKICAgICAgICAgICAgICAgIHRhc2tzW2pdLnRhc2tUeXBlLAogICAgICAgICAgICAgICAgdGFza3Nbal0udGFza0lkLAogICAgICAgICAgICAgICAgdGFza3Nbal0uY3JlYXRvciwKICAgICAgICAgICAgICAgIHRhc2tzW2pdLnJld2FyZCwKICAgICAgICAgICAgICAgIHRhc2tzW2pdLmRhdGEsCiAgICAgICAgICAgICAgICAsLy90YXNrc1tqXS5kYXRhTGVuZ3RoLCAKICAgICAgICAgICAgICAgICwvL3Rhc2tzW2pdLnJlcXVlc3RQdWJsaWNYUG9pbnQsIAogICAgICAgICAgICAgICAgLC8vdGFza3Nbal0ucmVxdWVzdFB1YmxpY1lQb2ludCwKICAgICAgICAgICAgICAgICAvL3Rhc2tzW2pdLmFuc3dlclByaXZhdGVLZXkKICAgICAgICAgICAgKSA9IFRhc2tSZWdpc3Rlcih1cGdyYWRhYmxlU3RhdGUucHJldlZlcnNpb24pLnRhc2tzKGopOwogICAgICAgICAgICBpbmRleE9mVGFza0lkW3Rhc2tzW2pdLnRhc2tJZF0gPSBqICsgMTsKICAgICAgICB9CgogICAgICAgIGZvciAodWludCBrID0gaW5kZXg7IGsgPCBpbmRleCArIHNpemUgJiYgayA8IHRhc2tzQ291bnQ7IGsrKykgewogICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAsLy90YXNrc1trXS50YXNrVHlwZSwKICAgICAgICAgICAgICAgICwvL3Rhc2tzW2tdLnRhc2tJZCwKICAgICAgICAgICAgICAgICwvL3Rhc2tzW2tdLmNyZWF0b3IsCiAgICAgICAgICAgICAgICAsLy90YXNrc1trXS5yZXdhcmQsCiAgICAgICAgICAgICAgICAsLy90YXNrc1trXS5kYXRhLAogICAgICAgICAgICAgICAgdGFza3Nba10uZGF0YUxlbmd0aCwgCiAgICAgICAgICAgICAgICB0YXNrc1trXS5yZXF1ZXN0UHVibGljWFBvaW50LCAKICAgICAgICAgICAgICAgIHRhc2tzW2tdLnJlcXVlc3RQdWJsaWNZUG9pbnQsCiAgICAgICAgICAgICAgICB0YXNrc1trXS5hbnN3ZXJQcml2YXRlS2V5CiAgICAgICAgICAgICkgPSBUYXNrUmVnaXN0ZXIodXBncmFkYWJsZVN0YXRlLnByZXZWZXJzaW9uKS50YXNrcyhrKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGVuZFVwZ3JhZGUoKSBwdWJsaWMgewogICAgICAgIHN1cGVyLmVuZFVwZ3JhZGUoKTsKICAgICAgICAKICAgICAgICBpZiAodXBncmFkYWJsZVN0YXRlLm5leHRWZXJzaW9uICE9IDApIHsKICAgICAgICAgICAgdG9rZW4udHJhbnNmZXIodXBncmFkYWJsZVN0YXRlLm5leHRWZXJzaW9uLCB0b2tlbi5iYWxhbmNlT2YodGhpcykpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0YXNrc0NvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgICAgIHJldHVybiB0YXNrcy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gY29tcGxldGVkVGFza3NDb3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gY29tcGxldGVkVGFza3MubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIHBheUZvclRhc2sodWludDI1NiB0YXNrSWQsIHVpbnQyNTYgcmV3YXJkKSBwdWJsaWMgaXNMYXN0ZXN0VmVyc2lvbiB7CiAgICAgICAgdWludCBpbmRleCA9IHNhZmVJbmRleE9mVGFza0lkKHRhc2tJZCk7CiAgICAgICAgaWYgKHJld2FyZCA+IDApIHsKICAgICAgICAgICAgdG9rZW4udHJhbnNmZXJGcm9tKHR4Lm9yaWdpbiwgdGhpcywgcmV3YXJkKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXdhcmQgPSB0b2tlbi5iYWxhbmNlT2YodGhpcykgLSB0b3RhbFJld2FyZDsKICAgICAgICB9CiAgICAgICAgdGFza3NbaW5kZXhdLnJld2FyZCArPSByZXdhcmQ7CiAgICAgICAgdG90YWxSZXdhcmQgKz0gcmV3YXJkOwogICAgICAgIFRhc2tQYXllZCh0YXNrSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVJbmRleE9mVGFza0lkKHVpbnQgdGFza0lkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBpbmRleCA9IGluZGV4T2ZUYXNrSWRbdGFza0lkXTsKICAgICAgICByZXF1aXJlKGluZGV4ID4gMCk7CiAgICAgICAgcmV0dXJuIGluZGV4IC0gMTsKICAgIH0KCiAgICAvLyBQYXNzIHJld2FyZCA9PSAwIGZvciBhdXRvbWF0aWNhbGx5IGRldGVybWluZSBhbHJlYWR5IHRyYW5zZmVycmVkIHZhbHVlCiAgICBmdW5jdGlvbiBjcmVhdGVCaXRjb2luQWRkcmVzc1ByZWZpeFRhc2soYnl0ZXMgcHJlZml4LCB1aW50MjU2IHJld2FyZCwgdWludDI1NiByZXF1ZXN0UHVibGljWFBvaW50LCB1aW50MjU2IHJlcXVlc3RQdWJsaWNZUG9pbnQpIHB1YmxpYyBpc0xhc3Rlc3RWZXJzaW9uIHsKICAgICAgICByZXF1aXJlKHByZWZpeC5sZW5ndGggPiA1KTsKICAgICAgICByZXF1aXJlKHByZWZpeFswXSA9PSAiMSIpOwogICAgICAgIHJlcXVpcmUocHJlZml4WzFdICE9ICIxIik7IC8vIERvIG5vdCBzdXBwb3J0IG11bHRpcGxlIDFzIHlldAogICAgICAgIHJlcXVpcmUoaXNWYWxpZEJpY29pbkFkZHJlc3NQcmVmaXgocHJlZml4KSk7CiAgICAgICAgcmVxdWlyZShpc1ZhbGlkUHVibGljS2V5KHJlcXVlc3RQdWJsaWNYUG9pbnQsIHJlcXVlc3RQdWJsaWNZUG9pbnQpKTsKICAgICAgICBpZiAocmV3YXJkID4gMCkgewogICAgICAgICAgICB0b2tlbi50cmFuc2ZlckZyb20odHgub3JpZ2luLCB0aGlzLCByZXdhcmQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJld2FyZCA9IHRva2VuLmJhbGFuY2VPZih0aGlzKSAtIHRvdGFsUmV3YXJkOwogICAgICAgIH0KICAgICAgICB0b3RhbFJld2FyZCArPSByZXdhcmQ7CgogICAgICAgIGJ5dGVzMzIgZGF0YTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGRhdGEgOj0gbWxvYWQoYWRkKHByZWZpeCwgMzIpKQogICAgICAgIH0KICAgICAgICAKICAgICAgICBUYXNrIG1lbW9yeSB0YXNrID0gVGFzayh7CiAgICAgICAgICAgIHRhc2tUeXBlOiBUYXNrVHlwZS5CSVRDT0lOX0FERFJFU1NfUFJFRklYLAogICAgICAgICAgICB0YXNrSWQ6IG5leHRUYXNrSWQsCiAgICAgICAgICAgIGNyZWF0b3I6IHR4Lm9yaWdpbiwKICAgICAgICAgICAgcmV3YXJkOiByZXdhcmQsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGRhdGFMZW5ndGg6IHByZWZpeC5sZW5ndGgsCiAgICAgICAgICAgIHJlcXVlc3RQdWJsaWNYUG9pbnQ6IHJlcXVlc3RQdWJsaWNYUG9pbnQsCiAgICAgICAgICAgIHJlcXVlc3RQdWJsaWNZUG9pbnQ6IHJlcXVlc3RQdWJsaWNZUG9pbnQsCiAgICAgICAgICAgIGFuc3dlclByaXZhdGVLZXk6IDAKICAgICAgICB9KTsKICAgICAgICB0YXNrcy5wdXNoKHRhc2spOwogICAgICAgIGluZGV4T2ZUYXNrSWRbbmV4dFRhc2tJZF0gPSB0YXNrcy5sZW5ndGg7IC8vIGluY3JlbWVudGVkIHRvIGF2b2lkIDAgaW5kZXgKICAgICAgICBUYXNrQ3JlYXRlZChuZXh0VGFza0lkKTsKICAgICAgICBuZXh0VGFza0lkKys7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNvbHZlVGFzayh1aW50IHRhc2tJZCwgdWludDI1NiBhbnN3ZXJQcml2YXRlS2V5KSBwdWJsaWMgaXNMYXN0ZXN0VmVyc2lvbiB7CiAgICAgICAgdWludCB0YXNrSW5kZXggPSBzYWZlSW5kZXhPZlRhc2tJZCh0YXNrSWQpOwogICAgICAgIFRhc2sgc3RvcmFnZSB0YXNrID0gdGFza3NbdGFza0luZGV4XTsKCiAgICAgICAgLy8gUmVxdWlyZSBwcml2YXRlIGtleSB0byBiZSBwYXJ0IG9mIGFkZHJlc3MgdG8gcHJldmVudCBmcm9udC1ydW5uaW5nIGF0dGFjawogICAgICAgIGJ5dGVzMzIgYW5zd2VyUHJpdmF0ZUtleUJ5dGVzID0gYnl0ZXMzMihhbnN3ZXJQcml2YXRlS2V5KTsKICAgICAgICBieXRlczMyIHNlbmRlckFkZHJlc3NCeXRlcyA9IGJ5dGVzMzIodWludDI1Nihtc2cuc2VuZGVyKSA8PCA5Nik7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKGFuc3dlclByaXZhdGVLZXlCeXRlc1tpXSA9PSBzZW5kZXJBZGRyZXNzQnl0ZXNbaV0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRhc2sudGFza1R5cGUgPT0gVGFza1R5cGUuQklUQ09JTl9BRERSRVNTX1BSRUZJWCkgewogICAgICAgICAgICB1aW50MjU2IGFuc3dlclB1YmxpY1hQb2ludDsKICAgICAgICAgICAgdWludDI1NiBhbnN3ZXJQdWJsaWNZUG9pbnQ7CiAgICAgICAgICAgIHVpbnQyNTYgcHVibGljWFBvaW50OwogICAgICAgICAgICB1aW50MjU2IHB1YmxpY1lQb2ludDsKICAgICAgICAgICAgdWludDI1NiB6OwogICAgICAgICAgICAoYW5zd2VyUHVibGljWFBvaW50LCBhbnN3ZXJQdWJsaWNZUG9pbnQpID0gZWMucHVibGljS2V5KGFuc3dlclByaXZhdGVLZXkpOwogICAgICAgICAgICAocHVibGljWFBvaW50LCBwdWJsaWNZUG9pbnQsIHopID0gZWMuX2VjQWRkKAogICAgICAgICAgICAgICAgdGFzay5yZXF1ZXN0UHVibGljWFBvaW50LAogICAgICAgICAgICAgICAgdGFzay5yZXF1ZXN0UHVibGljWVBvaW50LAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIGFuc3dlclB1YmxpY1hQb2ludCwKICAgICAgICAgICAgICAgIGFuc3dlclB1YmxpY1lQb2ludCwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHVpbnQyNTYgbSA9IDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRjsKICAgICAgICAgICAgeiA9IGVjLl9pbnZlcnNlKHopOwogICAgICAgICAgICBwdWJsaWNYUG9pbnQgPSBtdWxtb2QocHVibGljWFBvaW50LCB6LCBtKTsKICAgICAgICAgICAgcHVibGljWVBvaW50ID0gbXVsbW9kKHB1YmxpY1lQb2ludCwgeiwgbSk7CiAgICAgICAgICAgIHJlcXVpcmUoaXNWYWxpZFB1YmxpY0tleShwdWJsaWNYUG9pbnQsIHB1YmxpY1lQb2ludCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgYnl0ZXMzMiBidGNBZGRyZXNzID0gY3JlYXRlQnRjQWRkcmVzcyhwdWJsaWNYUG9pbnQsIHB1YmxpY1lQb2ludCk7CiAgICAgICAgICAgIHVpbnQgcHJlZml4TGVuZ3RoID0gbGVuZ3RoT2ZDb21tb25QcmVmaXgoYnRjQWRkcmVzcywgdGFzay5kYXRhKTsKICAgICAgICAgICAgcmVxdWlyZShwcmVmaXhMZW5ndGggPT0gdGFzay5kYXRhTGVuZ3RoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRhc2suYW5zd2VyUHJpdmF0ZUtleSA9IGFuc3dlclByaXZhdGVLZXk7CiAgICAgICAgfQoKICAgICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCB0YXNrLnJld2FyZCk7CiAgICAgICAgdG90YWxSZXdhcmQgLT0gdGFzay5yZXdhcmQ7CgogICAgICAgIGNvbXBsZXRlVGFzayh0YXNrSWQsIHRhc2tJbmRleCk7CiAgICAgICAgVGFza1NvbHZlZCh0YXNrSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbXBsZXRlVGFzayh1aW50IHRhc2tJZCwgdWludCBpbmRleCkgaW50ZXJuYWwgewogICAgICAgIGNvbXBsZXRlZFRhc2tzLnB1c2godGFza3NbaW5kZXhdKTsKICAgICAgICBpZiAoaW5kZXggPCB0YXNrcy5sZW5ndGggLSAxKSB7IC8vIGlmIG5vdCBsYXRlc3QKICAgICAgICAgICAgdGFza3NbaW5kZXhdID0gdGFza3NbdGFza3MubGVuZ3RoIC0gMV07CiAgICAgICAgICAgIGluZGV4T2ZUYXNrSWRbdGFza3NbaW5kZXhdLnRhc2tJZF0gPSBpbmRleCArIDE7CiAgICAgICAgfQogICAgICAgIHRhc2tzLmxlbmd0aCAtPSAxOwogICAgICAgIGRlbGV0ZSBpbmRleE9mVGFza0lkW3Rhc2tJZF07CiAgICB9CgogICAgZnVuY3Rpb24gcmVjb3Zlckxvc3QoRVJDMjBCYXNpYyBfdG9rZW4sIGFkZHJlc3MgbG9zZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gX3Rva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICBpZiAoX3Rva2VuID09IHRva2VuKSB7CiAgICAgICAgICAgIGFtb3VudCAtPSB0b3RhbFJld2FyZDsKICAgICAgICB9CiAgICAgICAgX3Rva2VuLnRyYW5zZmVyKGxvc2VyLCBfdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KCn0='.
	

]
