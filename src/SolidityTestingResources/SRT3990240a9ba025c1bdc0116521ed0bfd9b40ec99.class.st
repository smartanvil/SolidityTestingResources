Class {
	#name : #SRT3990240a9ba025c1bdc0116521ed0bfd9b40ec99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3990240a9ba025c1bdc0116521ed0bfd9b40ec99 >> base64 [
	^ ''.
	

]
