Class {
	#name : #SRTecd570bbf74761b960fa04cc10fe2c4e86ffda36,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTecd570bbf74761b960fa04cc10fe2c4e86ffda36 >> base64 [
	^ ''.
	

]
