Class {
	#name : #SRTe350ca978a8afb5ec1a3e72f581ecf6b394cf761,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe350ca978a8afb5ec1a3e72f581ecf6b394cf761 >> base64 [
	^ ''.
	

]
