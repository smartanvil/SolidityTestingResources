Class {
	#name : #SRTf60efc8e10692b111f7e73af821ccfdbcd78eb45,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf60efc8e10692b111f7e73af821ccfdbcd78eb45 >> base64 [
	^ ''.
	

]
