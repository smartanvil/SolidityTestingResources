Class {
	#name : #SRTbb8a43af111b59c7742f36e9cd245357d04059fd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb8a43af111b59c7742f36e9cd245357d04059fd >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CiAgCiAgY29udHJhY3QgRVJDMjAgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KClwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHRvdGFsX1N1cHBseSk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKXB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKXB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudClwdWJsaWMgcmV0dXJucyAoYm9vbCBvayk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgb2spOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfYW1vdW50KTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX2Ftb3VudCk7Cn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEJpdGNvaWluIGlzIEVSQzIwCnsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiQjJHIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJCaXRjb2lpbiI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxMDsKICAgICAvLyBtdWxpcGxpZXMgZHVlcyB0byBkZWNpbWFsIHByZWNpc2lvbgogICAgdWludDI1NiBwdWJsaWMgX3RvdGFsU3VwcGx5ID0gNTAwMDAwMDAgKiAxMCAqKjEwOyAgICAgLy8gNTAgbWlsbGlvbiBzdXBwbHkgICAgICAgICAgIAogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOyAgIAogICAgLy8gT3duZXIgb2YgdGhpcyBjb250cmFjdAogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7CgogICAgZXZlbnQgTE9HKHN0cmluZyBlLHVpbnQyNTYgdmFsdWUpOwogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgICAgIH0KCiAgICAKICAgIGZ1bmN0aW9uIEJpdGNvaWluKCkgcHVibGljCiAgICB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsgCiAgICB9CiAgICAKICAgIC8vIHRvdGFsIHN1cHBseSBvZiB0aGUgdG9rZW5zCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWxfU3VwcGx5KSB7CiAgICAgICAgIHRvdGFsX1N1cHBseSA9IF90b3RhbFN1cHBseTsKICAgICB9CiAgCiAgICAgLy8gIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQKICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgIH0KICAKICAgICAvLyBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KXB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgcmVxdWlyZSggX3RvICE9IDB4MCk7CiAgICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAKICAgICAgICAgICAgICYmIF9hbW91bnQgPj0gMAogICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPj0gYmFsYW5jZXNbX3RvXSk7CiAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICB9CiAgCiAgICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgICAvLyBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAogICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlCiAgICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgIC8vIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCiAgICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOgogICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgIClwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgCiAgICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKICAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQKICAgICAgICAgICAgICYmIF9hbW91bnQgPj0gMAogICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPj0gYmFsYW5jZXNbX3RvXSk7CiAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgfQogCiAgICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4KICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudClwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICB9CiAgCiAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKXB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICB9CiAgIAogICAJLy9JbiBjYXNlIHRoZSBvd25lcnNoaXAgbmVlZHMgdG8gYmUgdHJhbnNmZXJyZWQKCWZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpcHVibGljIG9ubHlPd25lcgoJewoJICAgIHJlcXVpcmUoIG5ld093bmVyICE9IDB4MCk7CgkgICAgYmFsYW5jZXNbbmV3T3duZXJdID0gYmFsYW5jZXNbbmV3T3duZXJdLmFkZChiYWxhbmNlc1tvd25lcl0pOwogICAgICAgIFRyYW5zZmVyKDAsIG5ld093bmVyLCBiYWxhbmNlc1tvd25lcl0pOwoJICAgIGJhbGFuY2VzW293bmVyXSA9IDA7CgkgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICAKCX0KCQogICAgCn0='.
	

]
