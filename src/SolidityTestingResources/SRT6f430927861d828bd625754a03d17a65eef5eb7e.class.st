Class {
	#name : #SRT6f430927861d828bd625754a03d17a65eef5eb7e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6f430927861d828bd625754a03d17a65eef5eb7e >> base64 [
	^ ''.
	

]
