Class {
	#name : #SRTdfb0fd446c8bf56e2ba87f0d37e38ace33294339,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfb0fd446c8bf56e2ba87f0d37e38ace33294339 >> base64 [
	^ ''.
	

]
