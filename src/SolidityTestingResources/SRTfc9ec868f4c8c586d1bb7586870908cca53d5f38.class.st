Class {
	#name : #SRTfc9ec868f4c8c586d1bb7586870908cca53d5f38,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc9ec868f4c8c586d1bb7586870908cca53d5f38 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8qKgogKiBAdGl0bGUgS2l0dHlJdGVtVG9rZW4gaW50ZXJmYWNlIAogKi8KY29udHJhY3QgS2l0dHlJdGVtVG9rZW4gewogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MsIHVpbnQyNTYpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpIHt9CiAgZnVuY3Rpb24gdHJhbnNmZXJBbmRBcHBseShhZGRyZXNzLCB1aW50MjU2KSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7fQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7fQp9CgovKioKICogQHRpdGxlIEtpdHR5SXRlbU1hcmtldCBpcyBhIG1hcmtldCBjb250cmFjdCBmb3IgYnV5aW5nIEtpdHR5SXRlbVRva2VucyBhbmQgCiAqLwpjb250cmFjdCBLaXR0eUl0ZW1NYXJrZXQgewoKICBzdHJ1Y3QgSXRlbSB7CiAgICBhZGRyZXNzIGl0ZW1Db250cmFjdDsKICAgIHVpbnQyNTYgY29zdDsgIC8vIGluIHdlaQogICAgYWRkcmVzcyBhcnRpc3Q7CiAgICB1aW50MTI4IHNwbGl0OyAgLy8gdGhlIHBlcmNlbnRhZ2Ugc3BsaXQgdGhlIGFydGlzdCBnZXRzIHZzLiBLaXR0eUl0ZW1NYXJrZXQub3duZXIuIEEgc3BsaXQgb2YgIjY2NjYiIHdvdWxkIG1lYW4gdGhlIGFydGlzdCBnZXRzIDY2LjY2JSBvZiB0aGUgZnVuZHMKICAgIHVpbnQyNTYgdG90YWxGdW5kczsKICB9CgogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIG1hcHBpbmcgKHN0cmluZyA9PiBJdGVtKSBpdGVtczsKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgLy8gZXZlbnRzCiAgZXZlbnQgQnV5KHN0cmluZyBpdGVtTmFtZSk7CgogIC8qKgogICAqIEtpdHR5SXRlbU1hcmtldCBjb25zdHJ1Y3RvcgogICAqLwogIGZ1bmN0aW9uIEtpdHR5SXRlbU1hcmtldCgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCiAgLyoqCiAgICogQGRldiBQYXVzZXMgdGhlIG1hcmtldCwgbm90IGFsbG93aW5nIGFueSBidXlJdGVtIGFuZCBidXlJdGVtQW5kQXBwbHkKICAgKiBAcGFyYW0gX3BhdXNlZCB0aGUgcGF1c2VkIHN0YXRlIG9mIHRoZSBjb250cmFjdAogICAqLwogIGZ1bmN0aW9uIHNldFBhdXNlZChib29sIF9wYXVzZWQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgcGF1c2VkID0gX3BhdXNlZDsKICB9CgogIC8qKgogICAqIEBkZXYgWW91IGNhbm5vdCByZXR1cm4gc3RydWN0cywgcmV0dXJuIGVhY2ggYXR0cmlidXRlIGluIEl0ZW0gc3RydWN0CiAgICogQHBhcmFtIF9pdGVtTmFtZSB0aGUgS2l0dHlJdGVtVG9rZW4gbmFtZSBpbiBpdGVtcwogICAqLwogIGZ1bmN0aW9uIGdldEl0ZW0oc3RyaW5nIF9pdGVtTmFtZSkgdmlldyBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcywgdWludDI1NiwgYWRkcmVzcywgdWludDI1NiwgdWludDI1NikgewogICAgcmV0dXJuIChpdGVtc1tfaXRlbU5hbWVdLml0ZW1Db250cmFjdCwgaXRlbXNbX2l0ZW1OYW1lXS5jb3N0LCBpdGVtc1tfaXRlbU5hbWVdLmFydGlzdCwgaXRlbXNbX2l0ZW1OYW1lXS5zcGxpdCwgaXRlbXNbX2l0ZW1OYW1lXS50b3RhbEZ1bmRzKTsKICB9CgogIC8qKgogICAqIEBkZXYgQWRkIGEgS2l0dHlJdGVtVG9rZW4gY29udHJhY3QgdG8gYmUgc29sZCBpbiB0aGUgbWFya2V0CiAgICogQHBhcmFtIF9pdGVtTmFtZSBOYW1lIGZvciBpdGVtcyBtYXBwaW5nCiAgICogQHBhcmFtIF9pdGVtQ29udHJhY3QgY29udHJhY3QgYWRkcmVzcyBvZiBLaXR0eUl0ZW1Ub2tlbiB3ZSdyZSBhZGRpbmcKICAgKiBAcGFyYW0gX2Nvc3QgIGNvc3Qgb2YgaXRlbSBpbiB3ZWkKICAgKiBAcGFyYW0gX2FydGlzdCAgYXJ0aXN0IGFkZGVzcyB0byBzZW5kIGZ1bmRzIHRvCiAgICogQHBhcmFtIF9zcGxpdCAgYXJ0aXN0IHNwbGl0LiAiNjY2NiIgd291bGQgYmUgYSA2Ni42NiUgc3BsaXQuCiAgICovCiAgZnVuY3Rpb24gYWRkSXRlbShzdHJpbmcgX2l0ZW1OYW1lLCBhZGRyZXNzIF9pdGVtQ29udHJhY3QsIHVpbnQyNTYgX2Nvc3QsIGFkZHJlc3MgX2FydGlzdCwgdWludDEyOCBfc3BsaXQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgcmVxdWlyZShpdGVtc1tfaXRlbU5hbWVdLml0ZW1Db250cmFjdCA9PSAweDApOyAgLy8gaXRlbSBjYW4ndCBhbHJlYWR5IGV4aXN0CiAgICBpdGVtc1tfaXRlbU5hbWVdID0gSXRlbShfaXRlbUNvbnRyYWN0LCBfY29zdCwgX2FydGlzdCwgX3NwbGl0LCAwKTsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZ5IGFuIGl0ZW0gdGhhdCBpcyBpbiB0aGUgbWFya2V0CiAgICogQHBhcmFtIF9pdGVtTmFtZSBOYW1lIG9mIGl0ZW0gdG8gbW9kaWZ5CiAgICogQHBhcmFtIF9pdGVtQ29udHJhY3QgbW9kaWZ5IEtpdHR5SXRlbXRva2VuIGNvbnRyYWN0IGFkZHJlc3MgZm9yIGl0ZW0KICAgKiBAcGFyYW0gX2Nvc3QgbW9kaWZ5IGNvc3Qgb2YgaXRlbQogICAqIEBwYXJhbSBfYXJ0aXN0ICBtb2RpZnkgYXJ0aXN0IGFkZGVzcyB0byBzZW5kIGZ1bmRzIHRvCiAgICogQHBhcmFtIF9zcGxpdCAgbW9kaWZ5IGFydGlzdCBzcGxpdAogICAqLwogIGZ1bmN0aW9uIG1vZGlmeUl0ZW0oc3RyaW5nIF9pdGVtTmFtZSwgYWRkcmVzcyBfaXRlbUNvbnRyYWN0LCB1aW50MjU2IF9jb3N0LCBhZGRyZXNzIF9hcnRpc3QsIHVpbnQxMjggX3NwbGl0KSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIHJlcXVpcmUoaXRlbXNbX2l0ZW1OYW1lXS5pdGVtQ29udHJhY3QgIT0gMHgwKTsgIC8vIGl0ZW0gc2hvdWxkIGFscmVhZHkgZXhpc3QKICAgIEl0ZW0gc3RvcmFnZSBpdGVtID0gaXRlbXNbX2l0ZW1OYW1lXTsKICAgIGl0ZW0uaXRlbUNvbnRyYWN0ID0gX2l0ZW1Db250cmFjdDsKICAgIGl0ZW0uY29zdCA9IF9jb3N0OwogICAgaXRlbS5hcnRpc3QgPSBfYXJ0aXN0OwogICAgaXRlbS5zcGxpdCA9IF9zcGxpdDsKICB9CgogIC8qKgogICAqIEBkZXYgQnV5IGl0ZW0gZnJvbSB0aGUgbWFya2V0CiAgICogQHBhcmFtIF9pdGVtTmFtZSBOYW1lIG9mIGl0ZW0gdG8gYnV5CiAgICogQHBhcmFtIF9hbW91bnQgYW1vdW50IG9mIGl0ZW0gdG8gYnV5CiAgICovCiAgZnVuY3Rpb24gYnV5SXRlbShzdHJpbmcgX2l0ZW1OYW1lLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUocGF1c2VkID09IGZhbHNlKTsKICAgIHJlcXVpcmUoaXRlbXNbX2l0ZW1OYW1lXS5pdGVtQ29udHJhY3QgIT0gMHgwKTsgIC8vIGl0ZW0gc2hvdWxkIGFscmVhZHkgZXhpc3QKICAgIEl0ZW0gc3RvcmFnZSBpdGVtID0gaXRlbXNbX2l0ZW1OYW1lXTsgIC8vIHdlJ3JlIGdvaW5nIHRvIG1vZGlmeSB0aGUgaXRlbSBpbiBzdG9yYWdlCiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBpdGVtLmNvc3QgKiBfYW1vdW50KTsgIC8vIG1ha2Ugc3VyZSB1c2VyIHNlbnQgZW5vdWdoIGV0aCBmb3IgdGhlIG51bWJlciBvZiBpdGVtcyB0aGV5IHdhbnQKICAgIGl0ZW0udG90YWxGdW5kcyArPSBtc2cudmFsdWU7CiAgICBLaXR0eUl0ZW1Ub2tlbiBraXQgPSBLaXR0eUl0ZW1Ub2tlbihpdGVtLml0ZW1Db250cmFjdCk7CiAgICBraXQudHJhbnNmZXIobXNnLnNlbmRlciwgX2Ftb3VudCk7CiAgICAvLyBlbWl0IGV2ZW50cwogICAgQnV5KF9pdGVtTmFtZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEJ1eSBpdGVtIGZyb20gdGhlIG1hcmtldCBhbmQgYXBwbHkgdG8ga2l0dHlJZAogICAqIEBwYXJhbSBfaXRlbU5hbWUgTmFtZSBvZiBpdGVtIHRvIGJ1eQogICAqIEBwYXJhbSBfa2l0dHlJZCAgS2l0dHlJZCB0byBhcHBseSB0aGUgaXRlbQogICAqLwogIGZ1bmN0aW9uIGJ1eUl0ZW1BbmRBcHBseShzdHJpbmcgX2l0ZW1OYW1lLCB1aW50MjU2IF9raXR0eUlkKSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKHBhdXNlZCA9PSBmYWxzZSk7CiAgICAvLyBOT1RFIC0gY2FuIG9ubHkgYmUgdXNlZCB0byBidXkgYW5kIGFwcGx5IDEgaXRlbQogICAgcmVxdWlyZShpdGVtc1tfaXRlbU5hbWVdLml0ZW1Db250cmFjdCAhPSAweDApOyAgLy8gaXRlbSBzaG91bGQgYWxyZWFkeSBleGlzdAogICAgSXRlbSBzdG9yYWdlIGl0ZW0gPSBpdGVtc1tfaXRlbU5hbWVdOyAgLy8gd2UncmUgZ29pbmcgdG8gbW9kaWZ5IHRoZSBpdGVtIGluIHN0b3JhZ2UKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IGl0ZW0uY29zdCk7ICAvLyBtYWtlIHN1cmUgdXNlciBzZW50IGVub3VnaCBldGggZm9yIDEgaXRlbQogICAgaXRlbS50b3RhbEZ1bmRzICs9IG1zZy52YWx1ZTsKICAgIEtpdHR5SXRlbVRva2VuIGtpdCA9IEtpdHR5SXRlbVRva2VuKGl0ZW0uaXRlbUNvbnRyYWN0KTsKICAgIGtpdC50cmFuc2ZlckFuZEFwcGx5KG1zZy5zZW5kZXIsIF9raXR0eUlkKTsKICAgIC8vIGVtaXQgZXZlbnRzCiAgICBCdXkoX2l0ZW1OYW1lKTsKICB9CgogIC8qKgogICAqIEBkZXYgc3BsaXQgZnVuZHMgZnJvbSBJdGVtIHNhbGVzIGJldHdlZW4gY29udHJhY3Qgb3duZXIgYW5kIGFydGlzdAogICAqIEBwYXJhbSBfaXRlbU5hbWUgSXRlbSB0byBzcGxpdCBmdW5kcyBmb3IKICAgKi8KICBmdW5jdGlvbiBzcGxpdEZ1bmRzKHN0cmluZyBfaXRlbU5hbWUpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgSXRlbSBzdG9yYWdlIGl0ZW0gPSBpdGVtc1tfaXRlbU5hbWVdOyAgLy8gd2UncmUgZ29pbmcgdG8gbW9kaWZ5IHRoZSBpdGVtIGluIHN0b3JhZ2UKICAgIHVpbnQyNTYgYW1vdW50VG9BcnRpc3QgPSBpdGVtLnRvdGFsRnVuZHMgKiBpdGVtLnNwbGl0IC8gMTAwMDA7CiAgICB1aW50MjU2IGFtb3VudFRvT3duZXIgPSBpdGVtLnRvdGFsRnVuZHMgLSBhbW91bnRUb0FydGlzdDsKICAgIGl0ZW0uYXJ0aXN0LnRyYW5zZmVyKGFtb3VudFRvQXJ0aXN0KTsKICAgIG93bmVyLnRyYW5zZmVyKGFtb3VudFRvT3duZXIpOwogICAgaXRlbS50b3RhbEZ1bmRzID0gMDsKICB9CgogIC8qKgogICAqIEBkZXYgcmV0dXJuIGFsbCBfaXRlbU5hbWUgdG9rZW5zIGhlbHAgYnkgY29udHJhY3QgdG8gY29udHJhY3Qgb3duZXIKICAgKiBAcGFyYW0gX2l0ZW1OYW1lIEl0ZW0gdG8gcmV0dXJuIHRva2VucyB0byBjb250cmFjdCBvd25lcgogICAqIEByZXR1cm4gd2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICovCiAgZnVuY3Rpb24gcmV0dXJuVG9rZW5zVG9Pd25lcihzdHJpbmcgX2l0ZW1OYW1lKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIEl0ZW0gc3RvcmFnZSBpdGVtID0gaXRlbXNbX2l0ZW1OYW1lXTsgIC8vIHdlJ3JlIGdvaW5nIHRvIG1vZGlmeSB0aGUgaXRlbSBpbiBzdG9yYWdlCiAgICBLaXR0eUl0ZW1Ub2tlbiBraXQgPSBLaXR0eUl0ZW1Ub2tlbihpdGVtLml0ZW1Db250cmFjdCk7CiAgICB1aW50MjU2IGNvbnRyYWN0QmFsYW5jZSA9IGtpdC5iYWxhbmNlT2YodGhpcyk7CiAgICBraXQudHJhbnNmZXIobXNnLnNlbmRlciwgY29udHJhY3RCYWxhbmNlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0='.
	

]
