Class {
	#name : #SRT245233BC8604D2097bFCbF3338959C46Da04D9e0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT245233BC8604D2097bFCbF3338959C46Da04D9e0 >> base64 [
	^ ''.
	

]
