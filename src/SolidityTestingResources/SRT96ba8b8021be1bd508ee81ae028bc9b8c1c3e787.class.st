Class {
	#name : #SRT96ba8b8021be1bd508ee81ae028bc9b8c1c3e787,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96ba8b8021be1bd508ee81ae028bc9b8c1c3e787 >> base64 [
	^ ''.
	

]
