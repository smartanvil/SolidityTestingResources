Class {
	#name : #SRT3c16e0f484c0b6b4fe407b5de8281c40a64ab37c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c16e0f484c0b6b4fe407b5de8281c40a64ab37c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBIb25vciB7CgogICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1Rva2VuIDAuMSc7CiAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy9BZG1pbnMgZGVjbGFyYXRpb24KICAgIGFkZHJlc3MgcHJpdmF0ZSBhZG1pbjE7CgogICAgLy9Vc2VyIHN0cnVjdAogICAgc3RydWN0IFVzZXIgewogICAgICAgIGJvb2wgZnJvemVuOwogICAgICAgIGJvb2wgYmFubmVkOwogICAgICAgIHVpbnQyNTYgYmFsYW5jZTsKICAgICAgICBib29sIGlzc2V0OwogICAgfQogICAgLy9NYXBwaW5ncwogICAgbWFwcGluZyhhZGRyZXNzID0+IFVzZXIpIHByaXZhdGUgdXNlcnM7CgogICAgYWRkcmVzc1tdIHByaXZhdGUgYmFsYW5jZXNLZXlzOwoKICAgIC8vRXZlbnRzCiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIGluZGV4ZWQgdGFyZ2V0LCBib29sIGluZGV4ZWQgZnJvemVuKTsKICAgIGV2ZW50IEJhbkFjY291bnQoYWRkcmVzcyBpbmRleGVkIGFjY291bnQsIGJvb2wgaW5kZXhlZCBiYW5uZWQpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBNaW50ZWQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGluZGV4ZWQgdmFsdWUpOwoKICAgIC8vTWFpbiBjb250cmFjdCBmdW5jdGlvbgogICAgZnVuY3Rpb24gSG9ub3IgKCkgcHVibGljIHsKICAgICAgICAvL3NldHRpbmcgdXAgYWRtaW5zCiAgICAgICAgYWRtaW4xID0gMHg2MTM1Zjg4ZDE1MUQ5NUJjNWJCQ0JhOEY1RTE1NEViODRDMjU4QmJFOwoKICAgICAgICB0b3RhbFN1cHBseSA9IDI1MDAwMDAwMDAwMDAwMDAwOwoKICAgICAgICAvL3VzZXIgY3JlYXRpb24KICAgICAgICB1c2Vyc1thZG1pbjFdID0gVXNlcihmYWxzZSwgZmFsc2UsIHRvdGFsU3VwcGx5LCB0cnVlKTsKCiAgICAgICAgaWYoIWhhc0tleShhZG1pbjEpKSB7CiAgICAgICAgICAgIGJhbGFuY2VzS2V5cy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgIH0KCiAgICAgICAgbmFtZSA9ICdIb25vcic7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSAnSE5SJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IDg7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgfQoKICAgIC8vTW9kaWZpZXIgdG8gbGltaXQgYWNjZXNzIHRvIGFkbWluIGZ1bmN0aW9ucwogICAgbW9kaWZpZXIgb25seUFkbWluIHsKICAgICAgICBpZighKG1zZy5zZW5kZXIgPT0gYWRtaW4xKSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB1bmJhbm5lZCB7CiAgICAgICAgaWYodXNlcnNbbXNnLnNlbmRlcl0uYmFubmVkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHVuZnJvemVuIHsKICAgICAgICBpZih1c2Vyc1ttc2cuc2VuZGVyXS5mcm96ZW4pIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgoKICAgIC8vQWRtaW5zIGdldHRlcnMKICAgIGZ1bmN0aW9uIGdldEZpcnN0QWRtaW4oKSBvbmx5QWRtaW4gcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gYWRtaW4xOwogICAgfQoKCgogICAgLy9BZG1pbmlzdHJhdGl2ZSBhY3Rpb25zCiAgICBmdW5jdGlvbiBtaW50VG9rZW4odWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlBZG1pbiBwdWJsaWMgewogICAgICAgIGlmKCF1c2Vyc1ttc2cuc2VuZGVyXS5pc3NldCl7CiAgICAgICAgICAgIHVzZXJzW21zZy5zZW5kZXJdID0gVXNlcihmYWxzZSwgZmFsc2UsIDAsIHRydWUpOwogICAgICAgIH0KICAgICAgICBpZighaGFzS2V5KG1zZy5zZW5kZXIpKXsKICAgICAgICAgICAgYmFsYW5jZXNLZXlzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgfQogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmJhbGFuY2UgKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICBNaW50ZWQobXNnLnNlbmRlciwgbWludGVkQW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiB1c2VyQmFubmluZyAoYWRkcmVzcyBiYW5Vc2VyKSBvbmx5QWRtaW4gcHVibGljIHsKICAgICAgICBpZighdXNlcnNbYmFuVXNlcl0uaXNzZXQpewogICAgICAgICAgICB1c2Vyc1tiYW5Vc2VyXSA9IFVzZXIoZmFsc2UsIGZhbHNlLCAwLCB0cnVlKTsKICAgICAgICB9CiAgICAgICAgdXNlcnNbYmFuVXNlcl0uYmFubmVkID0gdHJ1ZTsKICAgICAgICB2YXIgdXNlckJhbGFuY2UgPSB1c2Vyc1tiYW5Vc2VyXS5iYWxhbmNlOwogICAgICAgIAogICAgICAgIHVzZXJzW2dldEZpcnN0QWRtaW4oKV0uYmFsYW5jZSArPSB1c2VyQmFsYW5jZTsKICAgICAgICB1c2Vyc1tiYW5Vc2VyXS5iYWxhbmNlID0gMDsKICAgICAgICAKICAgICAgICBCYW5BY2NvdW50KGJhblVzZXIsIHRydWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkZXN0cm95Q29pbnMgKGFkZHJlc3MgYWRkcmVzc1RvRGVzdHJveSwgdWludDI1NiBhbW91bnQpIG9ubHlBZG1pbiBwdWJsaWMgewogICAgICAgIHVzZXJzW2FkZHJlc3NUb0Rlc3Ryb3ldLmJhbGFuY2UgLT0gYW1vdW50OyAgICAKICAgICAgICB0b3RhbFN1cHBseSAtPSBhbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gdG9rZW5GcmVlemluZyAoYWRkcmVzcyBmcmVlekFjY291bnQsIGJvb2wgaXNGcm96ZW4pIG9ubHlBZG1pbiBwdWJsaWN7CiAgICAgICAgaWYoIXVzZXJzW2ZyZWV6QWNjb3VudF0uaXNzZXQpewogICAgICAgICAgICB1c2Vyc1tmcmVlekFjY291bnRdID0gVXNlcihmYWxzZSwgZmFsc2UsIDAsIHRydWUpOwogICAgICAgIH0KICAgICAgICB1c2Vyc1tmcmVlekFjY291bnRdLmZyb3plbiA9IGlzRnJvemVuOwogICAgICAgIEZyb3plbkZ1bmRzKGZyZWV6QWNjb3VudCwgaXNGcm96ZW4pOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHRhcmdldCkgcHVibGljIHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIGlmKCF1c2Vyc1t0YXJnZXRdLmlzc2V0KXsKICAgICAgICAgICAgdXNlcnNbdGFyZ2V0XSA9IFVzZXIoZmFsc2UsIGZhbHNlLCAwLCB0cnVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVzZXJzW3RhcmdldF0uYmFsYW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiBoYXNLZXkoYWRkcmVzcyBrZXkpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgZm9yKHVpbnQyNTYgaT0wO2k8YmFsYW5jZXNLZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICBhZGRyZXNzIHZhbHVlID0gYmFsYW5jZXNLZXlzW2ldOwogICAgICAgICAgICBpZih2YWx1ZSA9PSBrZXkpewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vVXNlciBhY3Rpb25zCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHVuYmFubmVkIHVuZnJvemVuIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICAgICAgaWYoIXVzZXJzW21zZy5zZW5kZXJdLmlzc2V0KXsKICAgICAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0gPSBVc2VyKGZhbHNlLCBmYWxzZSwgMCwgdHJ1ZSk7CiAgICAgICAgfQogICAgICAgIGlmKCF1c2Vyc1tfdG9dLmlzc2V0KXsKICAgICAgICAgICAgdXNlcnNbX3RvXSA9IFVzZXIoZmFsc2UsIGZhbHNlLCAwLCB0cnVlKTsKICAgICAgICB9CiAgICAgICAgaWYoIWhhc0tleShtc2cuc2VuZGVyKSl7CiAgICAgICAgICAgIGJhbGFuY2VzS2V5cy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgIH0KICAgICAgICBpZighaGFzS2V5KF90bykpewogICAgICAgICAgICBiYWxhbmNlc0tleXMucHVzaChfdG8pOwogICAgICAgIH0KICAgICAgICBpZih1c2Vyc1ttc2cuc2VuZGVyXS5iYWxhbmNlIDwgX3ZhbHVlIHx8IHVzZXJzW190b10uYmFsYW5jZSArIF92YWx1ZSA8IHVzZXJzW190b10uYmFsYW5jZSl7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0uYmFsYW5jZSAtPSBfdmFsdWU7CiAgICAgICAgdXNlcnNbX3RvXS5iYWxhbmNlICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gaGFzTmV4dEtleSh1aW50MjU2IGJhbGFuY2VzSW5kZXgpIG9ubHlBZG1pbiBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBiYWxhbmNlc0luZGV4IDwgYmFsYW5jZXNLZXlzLmxlbmd0aDsKICAgIH0KCiAgICBmdW5jdGlvbiBuZXh0S2V5KHVpbnQyNTYgYmFsYW5jZXNJbmRleCkgb25seUFkbWluIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgaWYoIWhhc05leHRLZXkoYmFsYW5jZXNJbmRleCkpewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzS2V5c1tiYWxhbmNlc0luZGV4XTsKICAgIH0KCn0='.
	

]
