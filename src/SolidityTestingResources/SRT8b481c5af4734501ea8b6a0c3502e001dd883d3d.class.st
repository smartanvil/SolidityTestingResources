Class {
	#name : #SRT8b481c5af4734501ea8b6a0c3502e001dd883d3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b481c5af4734501ea8b6a0c3502e001dd883d3d >> base64 [
	^ ''.
	

]
