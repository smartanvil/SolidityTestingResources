Class {
	#name : #SRT80fb784b7ed66730e8b1dbd9820afd29931aab03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80fb784b7ed66730e8b1dbd9820afd29931aab03 >> base64 [
	^ ''.
	

]
