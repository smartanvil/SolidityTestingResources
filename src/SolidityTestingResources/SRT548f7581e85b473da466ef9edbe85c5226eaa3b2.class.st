Class {
	#name : #SRT548f7581e85b473da466ef9edbe85c5226eaa3b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT548f7581e85b473da466ef9edbe85c5226eaa3b2 >> base64 [
	^ ''.
	

]
