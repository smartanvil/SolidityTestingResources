Class {
	#name : #SRTe980f54563c08adad8b9c63c65c0f99c6d718c21,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe980f54563c08adad8b9c63c65c0f99c6d718c21 >> base64 [
	^ ''.
	

]
