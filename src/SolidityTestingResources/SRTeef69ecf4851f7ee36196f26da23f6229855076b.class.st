Class {
	#name : #SRTeef69ecf4851f7ee36196f26da23f6229855076b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeef69ecf4851f7ee36196f26da23f6229855076b >> base64 [
	^ ''.
	

]
