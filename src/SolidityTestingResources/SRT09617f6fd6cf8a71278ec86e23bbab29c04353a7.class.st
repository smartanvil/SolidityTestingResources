Class {
	#name : #SRT09617f6fd6cf8a71278ec86e23bbab29c04353a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT09617f6fd6cf8a71278ec86e23bbab29c04353a7 >> base64 [
	^ ''.
	

]
