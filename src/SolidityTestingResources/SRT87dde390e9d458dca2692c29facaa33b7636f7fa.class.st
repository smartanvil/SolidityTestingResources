Class {
	#name : #SRT87dde390e9d458dca2692c29facaa33b7636f7fa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87dde390e9d458dca2692c29facaa33b7636f7fa >> base64 [
	^ ''.
	

]
