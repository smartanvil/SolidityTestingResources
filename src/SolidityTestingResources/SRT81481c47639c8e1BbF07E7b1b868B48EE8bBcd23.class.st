Class {
	#name : #SRT81481c47639c8e1BbF07E7b1b868B48EE8bBcd23,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT81481c47639c8e1BbF07E7b1b868B48EE8bBcd23 >> base64 [
	^ ''.
	

]
