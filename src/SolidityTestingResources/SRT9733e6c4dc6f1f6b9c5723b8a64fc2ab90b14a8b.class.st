Class {
	#name : #SRT9733e6c4dc6f1f6b9c5723b8a64fc2ab90b14a8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9733e6c4dc6f1f6b9c5723b8a64fc2ab90b14a8b >> base64 [
	^ ''.
	

]
