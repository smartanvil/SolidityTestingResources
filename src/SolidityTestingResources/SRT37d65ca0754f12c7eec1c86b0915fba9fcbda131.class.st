Class {
	#name : #SRT37d65ca0754f12c7eec1c86b0915fba9fcbda131,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT37d65ca0754f12c7eec1c86b0915fba9fcbda131 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCi8vIFRva2VuIHN0YW5kYXJkIEFQSQovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKY29udHJhY3QgRVJDMjBDb25zdGFudCB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyB3aG8gKSBjb25zdGFudCByZXR1cm5zICh1aW50IHZhbHVlKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgX2FsbG93YW5jZSk7Cn0KY29udHJhY3QgRVJDMjBTdGF0ZWZ1bCB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7Cn0KY29udHJhY3QgRVJDMjBFdmVudHMgewogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbCggYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBDb25zdGFudCwgRVJDMjBTdGF0ZWZ1bCwgRVJDMjBFdmVudHMge30KCmNvbnRyYWN0IEFzc2VydGl2ZSB7CiAgICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgICAgICBpZiAoIWFzc2VydGlvbikgdGhyb3c7CiAgICB9Cn0KCmNvbnRyYWN0IEZhbGxiYWNrRmFpbGVyIHsKICBmdW5jdGlvbiAoKSB7CiAgICB0aHJvdzsKICB9Cn0KCmNvbnRyYWN0IE11dGV4VXNlciB7CiAgICBib29sIHByaXZhdGUgbG9jazsKICAgIG1vZGlmaWVyIGV4Y2x1c2l2ZSB7CiAgICAgICAgaWYgKGxvY2spIHRocm93OwogICAgICAgIGxvY2sgPSB0cnVlOwogICAgICAgIF87CiAgICAgICAgbG9jayA9IGZhbHNlOwogICAgfQp9CgovLyBBIHNpbXBsZSBkaXJlY3QgZXhjaGFuZ2Ugb3JkZXIgbWFuYWdlci4KCmNvbnRyYWN0IEV2ZW50ZnVsTWFya2V0IHsKICAgIGV2ZW50IEl0ZW1VcGRhdGUoIHVpbnQgaWQgKTsKICAgIGV2ZW50IFRyYWRlKCB1aW50IHNlbGxfaG93X211Y2gsIGFkZHJlc3MgaW5kZXhlZCBzZWxsX3doaWNoX3Rva2VuLAogICAgICAgICAgICAgICAgIHVpbnQgYnV5X2hvd19tdWNoLCBhZGRyZXNzIGluZGV4ZWQgYnV5X3doaWNoX3Rva2VuICk7Cn0KCmNvbnRyYWN0IFNpbXBsZU1hcmtldCBpcyBFdmVudGZ1bE1hcmtldAogICAgICAgICAgICAgICAgICAgICAgICwgQXNzZXJ0aXZlCiAgICAgICAgICAgICAgICAgICAgICAgLCBGYWxsYmFja0ZhaWxlcgogICAgICAgICAgICAgICAgICAgICAgICwgTXV0ZXhVc2VyCnsKICAgIHN0cnVjdCBPZmZlckluZm8gewogICAgICAgIHVpbnQgc2VsbF9ob3dfbXVjaDsKICAgICAgICBFUkMyMCBzZWxsX3doaWNoX3Rva2VuOwogICAgICAgIHVpbnQgYnV5X2hvd19tdWNoOwogICAgICAgIEVSQzIwIGJ1eV93aGljaF90b2tlbjsKICAgICAgICBhZGRyZXNzIG93bmVyOwogICAgICAgIGJvb2wgYWN0aXZlOwogICAgfQogICAgbWFwcGluZyggdWludCA9PiBPZmZlckluZm8gKSBwdWJsaWMgb2ZmZXJzOwoKICAgIHVpbnQgcHVibGljIGxhc3Rfb2ZmZXJfaWQ7CgogICAgZnVuY3Rpb24gbmV4dF9pZCgpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBsYXN0X29mZmVyX2lkKys7IHJldHVybiBsYXN0X29mZmVyX2lkOwogICAgfQoKICAgIG1vZGlmaWVyIGNhbl9vZmZlciB7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIGNhbl9idXkodWludCBpZCkgewogICAgICAgIGFzc2VydChpc0FjdGl2ZShpZCkpOwogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBjYW5fY2FuY2VsKHVpbnQgaWQpIHsKICAgICAgICBhc3NlcnQoaXNBY3RpdmUoaWQpKTsKICAgICAgICBhc3NlcnQoZ2V0T3duZXIoaWQpID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CiAgICBmdW5jdGlvbiBpc0FjdGl2ZSh1aW50IGlkKSBjb25zdGFudCByZXR1cm5zIChib29sIGFjdGl2ZSkgewogICAgICAgIHJldHVybiBvZmZlcnNbaWRdLmFjdGl2ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldE93bmVyKHVpbnQgaWQpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpIHsKICAgICAgICByZXR1cm4gb2ZmZXJzW2lkXS5vd25lcjsKICAgIH0KICAgIGZ1bmN0aW9uIGdldE9mZmVyKCB1aW50IGlkICkgY29uc3RhbnQgcmV0dXJucyAodWludCwgRVJDMjAsIHVpbnQsIEVSQzIwKSB7CiAgICAgIHZhciBvZmZlciA9IG9mZmVyc1tpZF07CiAgICAgIHJldHVybiAob2ZmZXIuc2VsbF9ob3dfbXVjaCwgb2ZmZXIuc2VsbF93aGljaF90b2tlbiwKICAgICAgICAgICAgICBvZmZlci5idXlfaG93X211Y2gsIG9mZmVyLmJ1eV93aGljaF90b2tlbik7CiAgICB9CgogICAgLy8gbm9uIHVuZGVyZmxvd2luZyBzdWJ0cmFjdGlvbgogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KICAgIC8vIG5vbiBvdmVyZmxvd2luZyBtdWx0aXBsaWNhdGlvbgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCBjKSB7CiAgICAgICAgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhZGUoIGFkZHJlc3Mgc2VsbGVyLCB1aW50IHNlbGxfaG93X211Y2gsIEVSQzIwIHNlbGxfd2hpY2hfdG9rZW4sCiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBidXllciwgIHVpbnQgYnV5X2hvd19tdWNoLCAgRVJDMjAgYnV5X3doaWNoX3Rva2VuICkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIHZhciBzZWxsZXJfcGFpZF9vdXQgPSBidXlfd2hpY2hfdG9rZW4udHJhbnNmZXJGcm9tKCBidXllciwgc2VsbGVyLCBidXlfaG93X211Y2ggKTsKICAgICAgICBhc3NlcnQoc2VsbGVyX3BhaWRfb3V0KTsKICAgICAgICB2YXIgYnV5ZXJfcGFpZF9vdXQgPSBzZWxsX3doaWNoX3Rva2VuLnRyYW5zZmVyKCBidXllciwgc2VsbF9ob3dfbXVjaCApOwogICAgICAgIGFzc2VydChidXllcl9wYWlkX291dCk7CiAgICAgICAgVHJhZGUoIHNlbGxfaG93X211Y2gsIHNlbGxfd2hpY2hfdG9rZW4sIGJ1eV9ob3dfbXVjaCwgYnV5X3doaWNoX3Rva2VuICk7CiAgICB9CgogICAgLy8gLS0tLSBQdWJsaWMgZW50cnlwb2ludHMgLS0tLSAvLwoKICAgIC8vIE1ha2UgYSBuZXcgb2ZmZXIuIFRha2VzIGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbnRvIG1hcmtldCBlc2Nyb3cuCiAgICBmdW5jdGlvbiBvZmZlciggdWludCBzZWxsX2hvd19tdWNoLCBFUkMyMCBzZWxsX3doaWNoX3Rva2VuCiAgICAgICAgICAgICAgICAgICwgdWludCBidXlfaG93X211Y2gsICBFUkMyMCBidXlfd2hpY2hfdG9rZW4gKQogICAgICAgIGNhbl9vZmZlcgogICAgICAgIGV4Y2x1c2l2ZQogICAgICAgIHJldHVybnMgKHVpbnQgaWQpCiAgICB7CiAgICAgICAgYXNzZXJ0KHNlbGxfaG93X211Y2ggPiAwKTsKICAgICAgICBhc3NlcnQoc2VsbF93aGljaF90b2tlbiAhPSBFUkMyMCgweDApKTsKICAgICAgICBhc3NlcnQoYnV5X2hvd19tdWNoID4gMCk7CiAgICAgICAgYXNzZXJ0KGJ1eV93aGljaF90b2tlbiAhPSBFUkMyMCgweDApKTsKICAgICAgICBhc3NlcnQoc2VsbF93aGljaF90b2tlbiAhPSBidXlfd2hpY2hfdG9rZW4pOwoKICAgICAgICBPZmZlckluZm8gbWVtb3J5IGluZm87CiAgICAgICAgaW5mby5zZWxsX2hvd19tdWNoID0gc2VsbF9ob3dfbXVjaDsKICAgICAgICBpbmZvLnNlbGxfd2hpY2hfdG9rZW4gPSBzZWxsX3doaWNoX3Rva2VuOwogICAgICAgIGluZm8uYnV5X2hvd19tdWNoID0gYnV5X2hvd19tdWNoOwogICAgICAgIGluZm8uYnV5X3doaWNoX3Rva2VuID0gYnV5X3doaWNoX3Rva2VuOwogICAgICAgIGluZm8ub3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGluZm8uYWN0aXZlID0gdHJ1ZTsKICAgICAgICBpZCA9IG5leHRfaWQoKTsKICAgICAgICBvZmZlcnNbaWRdID0gaW5mbzsKCiAgICAgICAgdmFyIHNlbGxlcl9wYWlkID0gc2VsbF93aGljaF90b2tlbi50cmFuc2ZlckZyb20oIG1zZy5zZW5kZXIsIHRoaXMsIHNlbGxfaG93X211Y2ggKTsKICAgICAgICBhc3NlcnQoc2VsbGVyX3BhaWQpOwoKICAgICAgICBJdGVtVXBkYXRlKGlkKTsKICAgIH0KICAgIC8vIEFjY2VwdCBnaXZlbiBgcXVhbnRpdHlgIG9mIGFuIG9mZmVyLiBUcmFuc2ZlcnMgZnVuZHMgZnJvbSBjYWxsZXIgdG8KICAgIC8vIG9mZmVyIG1ha2VyLCBhbmQgZnJvbSBtYXJrZXQgdG8gY2FsbGVyLgogICAgZnVuY3Rpb24gYnV5KCB1aW50IGlkLCB1aW50IHF1YW50aXR5ICkKICAgICAgICBjYW5fYnV5KGlkKQogICAgICAgIGV4Y2x1c2l2ZQogICAgICAgIHJldHVybnMgKCBib29sIHN1Y2Nlc3MgKQogICAgewogICAgICAgIC8vIHJlYWQtb25seSBvZmZlci4gTW9kaWZ5IGFuIG9mZmVyIGJ5IGRpcmVjdGx5IGFjY2Vzc2luZyBvZmZlcnNbaWRdCiAgICAgICAgT2ZmZXJJbmZvIG1lbW9yeSBvZmZlciA9IG9mZmVyc1tpZF07CgogICAgICAgIC8vIGluZmVycmVkIHF1YW50aXR5IHRoYXQgdGhlIGJ1eWVyIHdpc2hlcyB0byBzcGVuZAogICAgICAgIHVpbnQgc3BlbmQgPSBzYWZlTXVsKHF1YW50aXR5LCBvZmZlci5idXlfaG93X211Y2gpIC8gb2ZmZXIuc2VsbF9ob3dfbXVjaDsKCiAgICAgICAgaWYgKCBzcGVuZCA+IG9mZmVyLmJ1eV9ob3dfbXVjaCB8fCBxdWFudGl0eSA+IG9mZmVyLnNlbGxfaG93X211Y2ggKSB7CiAgICAgICAgICAgIC8vIGJ1eWVyIHdhbnRzIG1vcmUgdGhhbiBpcyBhdmFpbGFibGUKICAgICAgICAgICAgc3VjY2VzcyA9IGZhbHNlOwogICAgICAgIH0gZWxzZSBpZiAoIHNwZW5kID09IG9mZmVyLmJ1eV9ob3dfbXVjaCAmJiBxdWFudGl0eSA9PSBvZmZlci5zZWxsX2hvd19tdWNoICkgewogICAgICAgICAgICAvLyBidXllciB3YW50cyBleGFjdGx5IHdoYXQgaXMgYXZhaWxhYmxlCiAgICAgICAgICAgIGRlbGV0ZSBvZmZlcnNbaWRdOwoKICAgICAgICAgICAgdHJhZGUoIG9mZmVyLm93bmVyLCBxdWFudGl0eSwgb2ZmZXIuc2VsbF93aGljaF90b2tlbiwKICAgICAgICAgICAgICAgICAgIG1zZy5zZW5kZXIsIHNwZW5kLCBvZmZlci5idXlfd2hpY2hfdG9rZW4gKTsKCiAgICAgICAgICAgIEl0ZW1VcGRhdGUoaWQpOwogICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKCBzcGVuZCA+IDAgJiYgcXVhbnRpdHkgPiAwICkgewogICAgICAgICAgICAvLyBidXllciB3YW50cyBhIGZyYWN0aW9uIG9mIHdoYXQgaXMgYXZhaWxhYmxlCiAgICAgICAgICAgIG9mZmVyc1tpZF0uc2VsbF9ob3dfbXVjaCA9IHNhZmVTdWIob2ZmZXIuc2VsbF9ob3dfbXVjaCwgcXVhbnRpdHkpOwogICAgICAgICAgICBvZmZlcnNbaWRdLmJ1eV9ob3dfbXVjaCA9IHNhZmVTdWIob2ZmZXIuYnV5X2hvd19tdWNoLCBzcGVuZCk7CgogICAgICAgICAgICB0cmFkZSggb2ZmZXIub3duZXIsIHF1YW50aXR5LCBvZmZlci5zZWxsX3doaWNoX3Rva2VuLAogICAgICAgICAgICAgICAgICAgIG1zZy5zZW5kZXIsIHNwZW5kLCBvZmZlci5idXlfd2hpY2hfdG9rZW4gKTsKCiAgICAgICAgICAgIEl0ZW1VcGRhdGUoaWQpOwogICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBidXllciB3YW50cyBhbiB1bnNhdGlzZmlhYmxlIGFtb3VudCAobGVzcyB0aGFuIDEgaW50ZWdlcikKICAgICAgICAgICAgc3VjY2VzcyA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIC8vIENhbmNlbCBhbiBvZmZlci4gUmVmdW5kcyBvZmZlciBtYWtlci4KICAgIGZ1bmN0aW9uIGNhbmNlbCggdWludCBpZCApCiAgICAgICAgY2FuX2NhbmNlbChpZCkKICAgICAgICBleGNsdXNpdmUKICAgICAgICByZXR1cm5zICggYm9vbCBzdWNjZXNzICkKICAgIHsKICAgICAgICAvLyByZWFkLW9ubHkgb2ZmZXIuIE1vZGlmeSBhbiBvZmZlciBieSBkaXJlY3RseSBhY2Nlc3Npbmcgb2ZmZXJzW2lkXQogICAgICAgIE9mZmVySW5mbyBtZW1vcnkgb2ZmZXIgPSBvZmZlcnNbaWRdOwogICAgICAgIGRlbGV0ZSBvZmZlcnNbaWRdOwoKICAgICAgICB2YXIgc2VsbGVyX3JlZnVuZGVkID0gb2ZmZXIuc2VsbF93aGljaF90b2tlbi50cmFuc2Zlciggb2ZmZXIub3duZXIgLCBvZmZlci5zZWxsX2hvd19tdWNoICk7CiAgICAgICAgYXNzZXJ0KHNlbGxlcl9yZWZ1bmRlZCk7CgogICAgICAgIEl0ZW1VcGRhdGUoaWQpOwogICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwogICAgfQp9CgovLyBTaW1wbGUgTWFya2V0IHdpdGggYSBtYXJrZXQgbGlmZXRpbWUuIFdoZW4gdGhlIGxpZmV0aW1lIGhhcyBlbGFwc2VkLAovLyBvZmZlcnMgY2FuIG9ubHkgYmUgY2FuY2VsbGVkIChvZmZlciBhbmQgYnV5IHdpbGwgdGhyb3cpLgoKY29udHJhY3QgRXhwaXJpbmdNYXJrZXQgaXMgU2ltcGxlTWFya2V0IHsKICAgIHVpbnQgcHVibGljIGNsb3NlX3RpbWU7CiAgICBmdW5jdGlvbiBFeHBpcmluZ01hcmtldCh1aW50IGxpZmV0aW1lKSB7CiAgICAgICAgY2xvc2VfdGltZSA9IGdldFRpbWUoKSArIGxpZmV0aW1lOwogICAgfQogICAgZnVuY3Rpb24gZ2V0VGltZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYmxvY2sudGltZXN0YW1wOwogICAgfQogICAgZnVuY3Rpb24gaXNDbG9zZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sIGNsb3NlZCkgewogICAgICAgIHJldHVybiAoZ2V0VGltZSgpID4gY2xvc2VfdGltZSk7CiAgICB9CgogICAgLy8gYWZ0ZXIgbWFya2V0IGxpZmV0aW1lIGhhcyBlbGFwc2VkLCBubyBuZXcgb2ZmZXJzIGFyZSBhbGxvd2VkCiAgICBtb2RpZmllciBjYW5fb2ZmZXIgewogICAgICAgIGFzc2VydCghaXNDbG9zZWQoKSk7CiAgICAgICAgXzsKICAgIH0KICAgIC8vIGFmdGVyIGNsb3NlLCBubyBuZXcgYnV5cyBhcmUgYWxsb3dlZAogICAgbW9kaWZpZXIgY2FuX2J1eSh1aW50IGlkKSB7CiAgICAgICAgYXNzZXJ0KGlzQWN0aXZlKGlkKSk7CiAgICAgICAgYXNzZXJ0KCFpc0Nsb3NlZCgpKTsKICAgICAgICBfOwogICAgfQogICAgLy8gYWZ0ZXIgY2xvc2UsIGFueW9uZSBjYW4gY2FuY2VsIGFuIG9mZmVyCiAgICBtb2RpZmllciBjYW5fY2FuY2VsKHVpbnQgaWQpIHsKICAgICAgICBhc3NlcnQoaXNBY3RpdmUoaWQpKTsKICAgICAgICBhc3NlcnQoaXNDbG9zZWQoKSB8fCAobXNnLnNlbmRlciA9PSBnZXRPd25lcihpZCkpKTsKICAgICAgICBfOwogICAgfQp9'.
	

]
