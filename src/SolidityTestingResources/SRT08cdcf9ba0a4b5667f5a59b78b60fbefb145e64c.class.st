Class {
	#name : #SRT08cdcf9ba0a4b5667f5a59b78b60fbefb145e64c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08cdcf9ba0a4b5667f5a59b78b60fbefb145e64c >> base64 [
	^ ''.
	

]
