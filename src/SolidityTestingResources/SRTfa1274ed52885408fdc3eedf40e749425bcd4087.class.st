Class {
	#name : #SRTfa1274ed52885408fdc3eedf40e749425bcd4087,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa1274ed52885408fdc3eedf40e749425bcd4087 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpOwogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1Nik7CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgCiAgICB1aW50MjU2IHRvdGFsU3VwcGx5XzsKICAgIAogICAgLyoqCiAgICAgKiBAZGV2IHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gZXhpc3RlbmNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5XzsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgCiAgICAgICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIAp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KTsKICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCk7CiAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKICAgIAogICAgCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIAogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAgKgogICAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKgogICAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAgICovCiAgICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKgogICAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICAgIH0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKICAgIAogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogICAgCn0KLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICAgIGV2ZW50IFBhdXNlKCk7CiAgICBldmVudCBVbnBhdXNlKCk7CiAgICAKICAgIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwogICAgCiAgICAvKioKICAgICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgICAqLwogICAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgICAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICAgKi8KICAgIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZShwYXVzZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIFBhdXNlKCk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICAgIFVucGF1c2UoKTsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwogICAgCiAgICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKICAgIAogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICB0b3RhbFN1cHBseV8gPSB0b3RhbFN1cHBseV8uYWRkKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZSB0b2tlbgogKiBAZGV2IFN0YW5kYXJkVG9rZW4gbW9kaWZpZWQgd2l0aCBwYXVzYWJsZSB0cmFuc2ZlcnMuCiAqKi8KY29udHJhY3QgUGF1c2FibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBQYXVzYWJsZSB7CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJldHVybiBzdXBlci5pbmNyZWFzZUFwcHJvdmFsKF9zcGVuZGVyLCBfYWRkZWRWYWx1ZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJldHVybiBzdXBlci5kZWNyZWFzZUFwcHJvdmFsKF9zcGVuZGVyLCBfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgICBmdW5jdGlvbiBzYWZlVHJhbnNmZXIoRVJDMjBCYXNpYyB0b2tlbiwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyRnJvbShFUkMyMCB0b2tlbiwgYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2FmZUFwcHJvdmUoRVJDMjAgdG9rZW4sIGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgTWF2aW5Ub2tlbgogKiBAZGV2IEVSQzIwIG1pbnRhYmxlIHRva2VuCiAqIFRoZSB0b2tlbiB3aWxsIGJlIG1pbnRlZCBieSB0aGUgY3Jvd2RzYWxlIGNvbnRyYWN0IG9ubHkKICovCmNvbnRyYWN0IE1hdmluVG9rZW4gaXMgTWludGFibGVUb2tlbiwgUGF1c2FibGVUb2tlbiB7CiAgICAKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNYXZpbiBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJNVk4iOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwogICAgCiAgICBmdW5jdGlvbiBNYXZpblRva2VuKCkKICAgIHB1YmxpYwogICAgT3duYWJsZSgpCiAgICBNaW50YWJsZVRva2VuKCkKICAgIFBhdXNhYmxlVG9rZW4oKSB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgcGF1c2VkID0gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZmluYWxpemUoKQogICAgcHVibGljCiAgICBvbmx5T3duZXIgewogICAgICAgIGZpbmlzaE1pbnRpbmcoKTsgLy90aGlzIGNhbid0IGJlIHJlYWN0aXZhdGVkCiAgICAgICAgdW5wYXVzZSgpOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIG93bmVyc2hpcFRvQ3JlYXRvcigpCiAgICBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoY3JlYXRvciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9Cn0KCi8qKgogKiBAYXV0aG9yIE9wZW5aZXBwZWxpbgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCgpsaWJyYXJ5IFJlZmVycmFsIHsKICAgIAogICAgLyoqCiAgICAgKiBAZGV2IHJlZmVycmFsIHRyZWUKICAgICAqLwogICAgZXZlbnQgTG9nUmVmKGFkZHJlc3MgbWVtYmVyLCBhZGRyZXNzIHJlZmVycmVyKTsKICAgIAogICAgc3RydWN0IE5vZGUgewogICAgICAgIGFkZHJlc3MgcmVmZXJyZXI7CiAgICAgICAgYm9vbCB2YWxpZDsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IHRyZWUgaXMgYSBjb2xsZWN0aW9uIG9mIG5vZGVzCiAgICAgKi8KICAgIHN0cnVjdCBUcmVlIHsKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gUmVmZXJyYWwuTm9kZSkgbm9kZXM7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZE1lbWJlcigKICAgICAgICAgICAgICAgICAgICAgICBUcmVlIHN0b3JhZ2Ugc2VsZiwKICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9tZW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfcmVmZXJyZXIKICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICApCiAgICBpbnRlcm5hbAogICAgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBOb2RlIG1lbW9yeSBtZW1iZXJOb2RlOwogICAgICAgIG1lbWJlck5vZGUucmVmZXJyZXIgPSBfcmVmZXJyZXI7CiAgICAgICAgbWVtYmVyTm9kZS52YWxpZCA9IHRydWU7CiAgICAgICAgc2VsZi5ub2Rlc1tfbWVtYmVyXSA9IG1lbWJlck5vZGU7CiAgICAgICAgTG9nUmVmKF9tZW1iZXIsIF9yZWZlcnJlcik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCgpjb250cmFjdCBBZmZpbGlhdGVUcmVlU3RvcmUgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIHVzaW5nIFJlZmVycmFsIGZvciBSZWZlcnJhbC5UcmVlOwogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwogICAgCiAgICBSZWZlcnJhbC5UcmVlIGFmZmlsaWF0ZVRyZWU7CiAgICAKICAgIGZ1bmN0aW9uIEFmZmlsaWF0ZVRyZWVTdG9yZSgpCiAgICBwdWJsaWMgewogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvd25lcnNoaXBUb0NyZWF0b3IoKQogICAgcHVibGljIHsKICAgICAgICByZXF1aXJlKGNyZWF0b3IgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXROb2RlKAogICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9ub2RlCiAgICAgICAgICAgICAgICAgICAgICkKICAgIHB1YmxpYwogICAgdmlldwogICAgcmV0dXJucyhhZGRyZXNzIHJlZmVycmVyKSB7CiAgICAgICAgUmVmZXJyYWwuTm9kZSBtZW1vcnkgbiA9IGFmZmlsaWF0ZVRyZWUubm9kZXNbX25vZGVdOwogICAgICAgIGlmIChuLnZhbGlkID09IHRydWUpIHsKICAgICAgICAgICAgcmV0dXJuIF9ub2RlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0UmVmZXJyZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9ub2RlCiAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICBwdWJsaWMKICAgIHZpZXcKICAgIHJldHVybnMoYWRkcmVzcyByZWZlcnJlcikgewogICAgICAgIFJlZmVycmFsLk5vZGUgbWVtb3J5IG4gPSBhZmZpbGlhdGVUcmVlLm5vZGVzW19ub2RlXTsKICAgICAgICBpZiAobi52YWxpZCA9PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiBuLnJlZmVycmVyOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkTWVtYmVyKAogICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgX21lbWJlciwKICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9yZWZlcnJlcgogICAgICAgICAgICAgICAgICAgICAgICkKICAgIAogICAgcHVibGljCiAgICBvbmx5T3duZXIKICAgIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmV0dXJuIGFmZmlsaWF0ZVRyZWUuYWRkTWVtYmVyKF9tZW1iZXIsIF9yZWZlcnJlcik7CiAgICB9CiAgICAKICAgIAogICAgLy8gRmFsbGJhY2sgRnVuY3Rpb24gb25seSBFVEggd2l0aCBubyBmdW5jdGlvbkNhbGwKICAgIGZ1bmN0aW9uKCkgcHVibGljIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KICAgIAp9Ci8qKgogKiBAdGl0bGUgVG9rZW5WZXN0aW5nCiAqIEBkZXYgQSB0b2tlbiBob2xkZXIgY29udHJhY3QgdGhhdCBjYW4gcmVsZWFzZSBpdHMgdG9rZW4gYmFsYW5jZSBncmFkdWFsbHkgbGlrZSBhCiAqIHR5cGljYWwgdmVzdGluZyBzY2hlbWUsIHdpdGggYSBjbGlmZiBhbmQgdmVzdGluZyBwZXJpb2QuIE9wdGlvbmFsbHkgcmV2b2NhYmxlIGJ5IHRoZQogKiBvd25lci4KICovCmNvbnRyYWN0IFRva2VuVmVzdGluZyBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwogICAgCiAgICBldmVudCBSZWxlYXNlZCh1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBSZXZva2VkKCk7CiAgICAKICAgIC8vIGJlbmVmaWNpYXJ5IG9mIHRva2VucyBhZnRlciB0aGV5IGFyZSByZWxlYXNlZAogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIGNsaWZmOwogICAgdWludDI1NiBwdWJsaWMgc3RhcnQ7CiAgICB1aW50MjU2IHB1YmxpYyBkdXJhdGlvbjsKICAgIAogICAgYm9vbCBwdWJsaWMgcmV2b2NhYmxlOwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHJlbGVhc2VkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyByZXZva2VkOwogICAgCiAgICAvKioKICAgICAqIEBkZXYgQ3JlYXRlcyBhIHZlc3RpbmcgY29udHJhY3QgdGhhdCB2ZXN0cyBpdHMgYmFsYW5jZSBvZiBhbnkgRVJDMjAgdG9rZW4gdG8gdGhlCiAgICAgKiBfYmVuZWZpY2lhcnksIGdyYWR1YWxseSBpbiBhIGxpbmVhciBmYXNoaW9uIHVudGlsIF9zdGFydCArIF9kdXJhdGlvbi4gQnkgdGhlbiBhbGwKICAgICAqIG9mIHRoZSBiYWxhbmNlIHdpbGwgaGF2ZSB2ZXN0ZWQuCiAgICAgKiBAcGFyYW0gX2JlbmVmaWNpYXJ5IGFkZHJlc3Mgb2YgdGhlIGJlbmVmaWNpYXJ5IHRvIHdob20gdmVzdGVkIHRva2VucyBhcmUgdHJhbnNmZXJyZWQKICAgICAqIEBwYXJhbSBfY2xpZmYgZHVyYXRpb24gaW4gc2Vjb25kcyBvZiB0aGUgY2xpZmYgaW4gd2hpY2ggdG9rZW5zIHdpbGwgYmVnaW4gdG8gdmVzdAogICAgICogQHBhcmFtIF9kdXJhdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzIG9mIHRoZSBwZXJpb2QgaW4gd2hpY2ggdGhlIHRva2VucyB3aWxsIHZlc3QKICAgICAqIEBwYXJhbSBfcmV2b2NhYmxlIHdoZXRoZXIgdGhlIHZlc3RpbmcgaXMgcmV2b2NhYmxlIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBUb2tlblZlc3RpbmcoYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX3N0YXJ0LCB1aW50MjU2IF9jbGlmZiwgdWludDI1NiBfZHVyYXRpb24sIGJvb2wgX3Jldm9jYWJsZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9iZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9jbGlmZiA8PSBfZHVyYXRpb24pOwogICAgICAgIAogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwogICAgICAgIHJldm9jYWJsZSA9IF9yZXZvY2FibGU7CiAgICAgICAgZHVyYXRpb24gPSBfZHVyYXRpb247CiAgICAgICAgY2xpZmYgPSBfc3RhcnQuYWRkKF9jbGlmZik7CiAgICAgICAgc3RhcnQgPSBfc3RhcnQ7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQG5vdGljZSBUcmFuc2ZlcnMgdmVzdGVkIHRva2VucyB0byBiZW5lZmljaWFyeS4KICAgICAqIEBwYXJhbSB0b2tlbiBFUkMyMCB0b2tlbiB3aGljaCBpcyBiZWluZyB2ZXN0ZWQKICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZShFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgewogICAgICAgIHVpbnQyNTYgdW5yZWxlYXNlZCA9IHJlbGVhc2FibGVBbW91bnQodG9rZW4pOwogICAgICAgIAogICAgICAgIHJlcXVpcmUodW5yZWxlYXNlZCA+IDApOwogICAgICAgIAogICAgICAgIHJlbGVhc2VkW3Rva2VuXSA9IHJlbGVhc2VkW3Rva2VuXS5hZGQodW5yZWxlYXNlZCk7CiAgICAgICAgCiAgICAgICAgdG9rZW4uc2FmZVRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB1bnJlbGVhc2VkKTsKICAgICAgICAKICAgICAgICBSZWxlYXNlZCh1bnJlbGVhc2VkKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAbm90aWNlIEFsbG93cyB0aGUgb3duZXIgdG8gcmV2b2tlIHRoZSB2ZXN0aW5nLiBUb2tlbnMgYWxyZWFkeSB2ZXN0ZWQKICAgICAqIHJlbWFpbiBpbiB0aGUgY29udHJhY3QsIHRoZSByZXN0IGFyZSByZXR1cm5lZCB0byB0aGUgb3duZXIuCiAgICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgdG9rZW4gd2hpY2ggaXMgYmVpbmcgdmVzdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJldm9rZShFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHJldm9jYWJsZSk7CiAgICAgICAgcmVxdWlyZSghcmV2b2tlZFt0b2tlbl0pOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHVucmVsZWFzZWQgPSByZWxlYXNhYmxlQW1vdW50KHRva2VuKTsKICAgICAgICB1aW50MjU2IHJlZnVuZCA9IGJhbGFuY2Uuc3ViKHVucmVsZWFzZWQpOwogICAgICAgIAogICAgICAgIHJldm9rZWRbdG9rZW5dID0gdHJ1ZTsKICAgICAgICAKICAgICAgICB0b2tlbi5zYWZlVHJhbnNmZXIob3duZXIsIHJlZnVuZCk7CiAgICAgICAgCiAgICAgICAgUmV2b2tlZCgpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEBkZXYgQ2FsY3VsYXRlcyB0aGUgYW1vdW50IHRoYXQgaGFzIGFscmVhZHkgdmVzdGVkIGJ1dCBoYXNuJ3QgYmVlbiByZWxlYXNlZCB5ZXQuCiAgICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgdG9rZW4gd2hpY2ggaXMgYmVpbmcgdmVzdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2FibGVBbW91bnQoRVJDMjBCYXNpYyB0b2tlbikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHZlc3RlZEFtb3VudCh0b2tlbikuc3ViKHJlbGVhc2VkW3Rva2VuXSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBDYWxjdWxhdGVzIHRoZSBhbW91bnQgdGhhdCBoYXMgYWxyZWFkeSB2ZXN0ZWQuCiAgICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgdG9rZW4gd2hpY2ggaXMgYmVpbmcgdmVzdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHZlc3RlZEFtb3VudChFUkMyMEJhc2ljIHRva2VuKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGN1cnJlbnRCYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHVpbnQyNTYgdG90YWxCYWxhbmNlID0gY3VycmVudEJhbGFuY2UuYWRkKHJlbGVhc2VkW3Rva2VuXSk7CiAgICAgICAgCiAgICAgICAgaWYgKG5vdyA8IGNsaWZmKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0gZWxzZSBpZiAobm93ID49IHN0YXJ0LmFkZChkdXJhdGlvbikgfHwgcmV2b2tlZFt0b2tlbl0pIHsKICAgICAgICAgICAgcmV0dXJuIHRvdGFsQmFsYW5jZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdG90YWxCYWxhbmNlLm11bChub3cuc3ViKHN0YXJ0KSkuZGl2KGR1cmF0aW9uKTsKICAgICAgICB9CiAgICB9Cn0KCgpjb250cmFjdCBBZmZpbGlhdGVNYW5hZ2VyIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgCiAgICBBZmZpbGlhdGVUcmVlU3RvcmUgcHVibGljIGFmZmlsaWF0ZVRyZWU7IC8vIHRyZWVTdG9yYWdlCiAgICAKICAgIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgICBNYXZpblRva2VuIHB1YmxpYyB0b2tlbjsKICAgIC8vIGVuZFRpbWUKICAgIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CiAgICAvLyBoYXJkY2FwCiAgICB1aW50MjU2IHB1YmxpYyBjYXA7CiAgICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAgIGFkZHJlc3MgcHVibGljIHZhdWx0OwogICAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciBldGgKICAgIHVpbnQyNTYgcHVibGljIG12bnBlcmV0aDsKICAgIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CiAgICAvLyBtaW4gY29udHJpYnV0aW9uIGFtb3VudAogICAgdWludDI1NiBwdWJsaWMgbWluQW1vdW50V2VpOwogICAgLy8gY3JlYXRvcgogICAgYWRkcmVzcyBjcmVhdG9yOwogICAgCiAgICAKICAgIGZ1bmN0aW9uIEFmZmlsaWF0ZU1hbmFnZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgX3Rva2VuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF90cmVlc3RvcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgcHVibGljIHsKICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgICAgICB0b2tlbiA9IE1hdmluVG9rZW4oX3Rva2VuKTsKICAgICAgICBlbmRUaW1lID0gMTUzNjk2OTYwMDsgLy8gU2F0IFNlcCAxNSAwMTowMDowMCAyMDE4IEdNVCsxCiAgICAgICAgdmF1bHQgPSAweEQwYjQwRDNiZmQ4REZhNmVjQzBiMzU3NTU1MDM5QzNlZTFDMTEyMDI7CiAgICAgICAgbXZucGVyZXRoID0gMTAwOwogICAgICAgIAogICAgICAgIG1pbkFtb3VudFdlaSA9IDAuMDEgZXRoZXI7CiAgICAgICAgY2FwID0gMzIwMDAgZXRoZXI7CiAgICAgICAgCiAgICAgICAgYWZmaWxpYXRlVHJlZSA9IEFmZmlsaWF0ZVRyZWVTdG9yZShfdHJlZXN0b3JlKTsKICAgIH0KICAgIAogICAgLy8vIExvZyBidXlUb2tlbnMKICAgIGV2ZW50IExvZ0J1eVRva2VucyhhZGRyZXNzIG93bmVyLCB1aW50MjU2IHRva2VucywgdWludDI1NiB0b2tlbnByaWNlKTsKICAgIC8vLyBMb2cgTG9nSWQKICAgIGV2ZW50IExvZ0lkKGFkZHJlc3Mgb3duZXIsIHVpbnQ0OCBpZCk7CiAgICAKICAgIG1vZGlmaWVyIG9ubHlOb25aZXJvQWRkcmVzcyhhZGRyZXNzIF9hKSB7CiAgICAgICAgcmVxdWlyZShfYSAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5RGlmZkFkcihhZGRyZXNzIF9yZWZlcnJlciwgYWRkcmVzcyBfc2VuZGVyKSB7CiAgICAgICAgcmVxdWlyZShfcmVmZXJyZXIgIT0gX3NlbmRlcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaW5pdEFmZmlsaWF0ZSgpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyhib29sKSB7CiAgICAgICAgLy9jcmVhdGUgZmlyc3QgMiByb290IG5vZGVzCiAgICAgICAgYm9vbCBzdWNjZXNzMSA9IGFmZmlsaWF0ZVRyZWUuYWRkTWVtYmVyKHZhdWx0LCAwKTsgLy9yb290CiAgICAgICAgYm9vbCBzdWNjZXNzMiA9IGFmZmlsaWF0ZVRyZWUuYWRkTWVtYmVyKG1zZy5zZW5kZXIsIHZhdWx0KTsgLy9yb290KzEKICAgICAgICByZXR1cm4gc3VjY2VzczEgJiYgc3VjY2VzczI7CiAgICB9CiAgICAKICAgIAogICAgLy8gZXhlY3V0ZSBhZnRlciBhbGwgY3Jvd2RzYWxlIHRva2VucyBhcmUgbWludGVkCiAgICBmdW5jdGlvbiBmaW5hbGl6ZUNyb3dkc2FsZSgpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyhib29sKSB7CiAgICAgICAgCiAgICAgICAgcGF1c2UoKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHRvdGFsU3VwcGx5ID0gdG9rZW4udG90YWxTdXBwbHkoKTsKICAgICAgICAKICAgICAgICAvLyA2IG1vbnRoIGNsaWZmLCAxMiBtb250aCB0b3RhbAogICAgICAgIFRva2VuVmVzdGluZyB0ZWFtID0gbmV3IFRva2VuVmVzdGluZyh2YXVsdCwgbm93LCAyNCB3ZWVrcywgMSB5ZWFycywgZmFsc2UpOwogICAgICAgIHVpbnQyNTYgdGVhbVRva2VucyA9IHRvdGFsU3VwcGx5LmRpdig2MCkubXVsKDE2KTsKICAgICAgICB0b2tlbi5taW50KHRlYW0sIHRlYW1Ub2tlbnMpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcmVzZXJ2ZVRva2VucyA9IHRvdGFsU3VwcGx5LmRpdig2MCkubXVsKDE4KTsKICAgICAgICB0b2tlbi5taW50KHZhdWx0LCByZXNlcnZlVG9rZW5zKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IGFkdmlzb3J5VG9rZW5zID0gdG90YWxTdXBwbHkuZGl2KDYwKS5tdWwoNik7CiAgICAgICAgdG9rZW4ubWludCh2YXVsdCwgYWR2aXNvcnlUb2tlbnMpOwogICAgICAgIAogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKGNyZWF0b3IpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgICAgYm9vbCB3aXRoaW5DYXAgPSB3ZWlSYWlzZWQuYWRkKG1zZy52YWx1ZSkgPD0gY2FwOwogICAgICAgIGJvb2wgd2l0aGluVGltZSA9IGVuZFRpbWUgPiBub3c7CiAgICAgICAgYm9vbCB3aXRoaW5NaW5BbW91bnQgPSBtc2cudmFsdWUgPj0gbWluQW1vdW50V2VpOwogICAgICAgIHJldHVybiB3aXRoaW5DYXAgJiYgd2l0aGluVGltZSAmJiB3aXRoaW5NaW5BbW91bnQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHByZXNhbGVNaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfYmVuZWZpY2lhcnksCiAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9hbW91bnRtdm4sCiAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9tdm5wZXJldGgKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgcHVibGljCiAgICBvbmx5T3duZXIKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQyNTYgX3dlaUFtb3VudCA9IF9hbW91bnRtdm4uZGl2KF9tdm5wZXJldGgpOwogICAgICAgIHJlcXVpcmUoX2JlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHRva2VuLm1pbnQoX2JlbmVmaWNpYXJ5LCBfYW1vdW50bXZuKTsKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKF93ZWlBbW91bnQpOwogICAgICAgIAogICAgICAgIExvZ0J1eVRva2VucyhfYmVuZWZpY2lhcnksIF9hbW91bnRtdm4sIF9tdm5wZXJldGgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBqb2luTWFudWFsKAogICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9yZWZlcnJlciwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDQ4IF9pZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICBwdWJsaWMKICAgIHBheWFibGUKICAgIHdoZW5Ob3RQYXVzZWQKICAgIG9ubHlEaWZmQWRyKF9yZWZlcnJlciwgbXNnLnNlbmRlcikgLy8gcHJldmVudCBzZWxmcmVmZXJhbAogICAgb25seURpZmZBZHIoX3JlZmVycmVyLCB0aGlzKSAvLyBwcmV2ZW50IHJlZW50cmFuY3kKICAgIHJldHVybnMoYm9vbCkgewogICAgICAgIExvZ0lkKG1zZy5zZW5kZXIsIF9pZCk7CiAgICAgICAgcmV0dXJuIGpvaW4oX3JlZmVycmVyKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBqb2luKAogICAgICAgICAgICAgICAgICBhZGRyZXNzIF9yZWZlcnJlcgogICAgICAgICAgICAgICAgICApCiAgICBwdWJsaWMKICAgIHBheWFibGUKICAgIHdoZW5Ob3RQYXVzZWQKICAgIG9ubHlEaWZmQWRyKF9yZWZlcnJlciwgbXNnLnNlbmRlcikgLy8gcHJldmVudCBzZWxmcmVmZXJhbAogICAgb25seURpZmZBZHIoX3JlZmVycmVyLCB0aGlzKSAvLyBwcmV2ZW50IHJlZW50cmFuY3kKICAgIHJldHVybnMoYm9vbCBzdWNjZXNzKQogICAgCiAgICB7CiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgcmVxdWlyZShfcmVmZXJyZXIgIT0gdmF1bHQpOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsgLy9yZXNwZWN0IG1pbiBhbW91bnQgLyBjYXAgLyBkYXRlCiAgICAgICAgCiAgICAgICAgLy9nZXQgZXhpc3Rpbmcgc2VuZGVyIG5vZGUKICAgICAgICBhZGRyZXNzIHNlbmRlck5vZGUgPSBhZmZpbGlhdGVUcmVlLmdldE5vZGUobXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgLy8gaWYgc2VuZGVyTm9kZSBhbHJlYWR5IGV4aXN0cyB1c2Ugc2FtZSByZWZlcnJlcgogICAgICAgIGlmIChzZW5kZXJOb2RlICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgX3JlZmVycmVyID0gIGFmZmlsaWF0ZVRyZWUuZ2V0UmVmZXJyZXIobXNnLnNlbmRlcik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vZ2V0IHJlZmVycmVyCiAgICAgICAgYWRkcmVzcyByZWZlcnJlck5vZGUgPSBhZmZpbGlhdGVUcmVlLmdldE5vZGUoX3JlZmVycmVyKTsKICAgICAgICAvL3JlZmVycmVyIG11c3QgZXhpc3QKICAgICAgICByZXF1aXJlKHJlZmVycmVyTm9kZSAhPSBhZGRyZXNzKDApKTsKICAgICAgICAKICAgICAgICAvL2dldCByZWZlcnJlciBvZiByZWZlcnJlcgogICAgICAgIGFkZHJlc3MgdG9wTm9kZSA9IGFmZmlsaWF0ZVRyZWUuZ2V0UmVmZXJyZXIoX3JlZmVycmVyKTsKICAgICAgICAvL3JlZmVycmVyIG9mIHJlZmVycmVyIG11c3QgZXhpc3QKICAgICAgICByZXF1aXJlKHRvcE5vZGUgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh0b3BOb2RlICE9IG1zZy5zZW5kZXIpOyAvL3NlbGZyZWZlcmFsCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgLy8gQWRkIHNlbmRlciB0byB0aGUgdHJlZQogICAgICAgIGlmIChzZW5kZXJOb2RlID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgYWZmaWxpYXRlVHJlZS5hZGRNZW1iZXIobXNnLnNlbmRlciwgX3JlZmVycmVyKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgc3VjY2VzcyA9IGJ1eVRva2Vucyhtc2cuc2VuZGVyLCB3ZWlBbW91bnQpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcGFyZW50QW1vdW50ID0gMDsKICAgICAgICB1aW50MjU2IHJvb3RBbW91bnQgPSAwOwogICAgICAgIAogICAgICAgIC8vcDEKICAgICAgICBwYXJlbnRBbW91bnQgPSB3ZWlBbW91bnQuZGl2KDEwMCkubXVsKDUpOyAvLzUlIGNvbW1pc2lvbiBmb3IgcDEKICAgICAgICByZWZlcnJlck5vZGUudHJhbnNmZXIocGFyZW50QW1vdW50KTsKICAgICAgICBidXlUb2tlbnMocmVmZXJyZXJOb2RlLCBwYXJlbnRBbW91bnQpOwogICAgICAgIAogICAgICAgIC8vcDIKICAgICAgICByb290QW1vdW50ID0gd2VpQW1vdW50LmRpdigxMDApLm11bCgzKTsgLy8zJSBjb21taXNpb24gZm9yIHAyCiAgICAgICAgYnV5VG9rZW5zKHRvcE5vZGUsIHJvb3RBbW91bnQpOwogICAgICAgIHRvcE5vZGUudHJhbnNmZXIocm9vdEFtb3VudCk7CiAgICAgICAgCiAgICAgICAgdmF1bHQudHJhbnNmZXIod2VpQW1vdW50LnN1YihwYXJlbnRBbW91bnQpLnN1Yihyb290QW1vdW50KSk7IC8vcmVzdCBnb2VzIHRvIHZhdWx0CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1eVRva2VucygKICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwKICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF93ZWlBbW91bnQKICAgICAgICAgICAgICAgICAgICAgICApCiAgICBpbnRlcm5hbAogICAgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF9iZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgICAgICB1aW50MjU2IHRva2VucyA9IDA7CiAgICAgICAgCiAgICAgICAgdG9rZW5zID0gX3dlaUFtb3VudC5tdWwobXZucGVyZXRoKTsKICAgICAgICAKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKF93ZWlBbW91bnQpOwogICAgICAgIHN1Y2Nlc3MgPSB0b2tlbi5taW50KF9iZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgICAgICAKICAgICAgICBMb2dCdXlUb2tlbnMoX2JlbmVmaWNpYXJ5LCB0b2tlbnMsIG12bnBlcmV0aCk7CiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZU1WTlJhdGUodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBtdm5wZXJldGggPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZU1pbkFtb3VudFdlaSh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zKGJvb2wgc3VjY2VzcykgewogICAgICAgIG1pbkFtb3VudFdlaSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gdG9rZW4uYmFsYW5jZU9mKF9vd25lcik7CiAgICB9CiAgICAKICAgIC8vIEZhbGxiYWNrIEZ1bmN0aW9uIG9ubHkgRVRIIHdpdGggbm8gZnVuY3Rpb25DYWxsCiAgICBmdW5jdGlvbigpIHB1YmxpYyB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgICAKfQ=='.
	

]
