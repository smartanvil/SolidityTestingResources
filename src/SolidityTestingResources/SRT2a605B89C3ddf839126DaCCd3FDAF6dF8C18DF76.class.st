Class {
	#name : #SRT2a605B89C3ddf839126DaCCd3FDAF6dF8C18DF76,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2a605B89C3ddf839126DaCCd3FDAF6dF8C18DF76 >> base64 [
	^ ''.
	

]
