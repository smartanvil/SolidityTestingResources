Class {
	#name : #SRTc9f9764097220f325762d0c5c0ff43513071833a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9f9764097220f325762d0c5c0ff43513071833a >> base64 [
	^ 'Ly8gaHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9Ub2tlbnMvYmxvYi9tYXN0ZXIvY29udHJhY3RzL2VpcDIwL0VJUDIwLnNvbAovLyBBYnN0cmFjdCBjb250cmFjdCBmb3IgdGhlIGZ1bGwgRVJDIDIwIFRva2VuIHN0YW5kYXJkCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTIwLm1kCnByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKCmNvbnRyYWN0IEVJUDIwSW50ZXJmYWNlIHsKICAgIC8qIFRoaXMgaXMgYSBzbGlnaHQgY2hhbmdlIHRvIHRoZSBFUkMyMCBiYXNlIHN0YW5kYXJkLgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBpcyByZXBsYWNlZCB3aXRoOgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgVGhpcyBpcyBtb3ZlZCB0byB0aGUgYmFzZSBjb250cmFjdCBzaW5jZSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9ucyBhcmUgbm90CiAgICBjdXJyZW50bHkgcmVjb2duaXNlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWF0Y2hpbmcgYWJzdHJhY3QKICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAgICovCiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICAvLyBzb2xoaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNpbXBsZS1ldmVudC1mdW5jLW5hbWUKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IEVJUDIwIGlzIEVJUDIwSW50ZXJmYWNlIHsKCiAgICB1aW50MjU2IGNvbnN0YW50IHByaXZhdGUgTUFYX1VJTlQyNTYgPSAyKioyNTYgLSAxOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2VkOwogICAgLyoKICAgIE5PVEU6CiAgICBUaGUgZm9sbG93aW5nIHZhcmlhYmxlcyBhcmUgT1BUSU9OQUwgdmFuaXRpZXMuIE9uZSBkb2VzIG5vdCBoYXZlIHRvIGluY2x1ZGUgdGhlbS4KICAgIFRoZXkgYWxsb3cgb25lIHRvIGN1c3RvbWlzZSB0aGUgdG9rZW4gY29udHJhY3QgJiBpbiBubyB3YXkgaW5mbHVlbmNlcyB0aGUgY29yZSBmdW5jdGlvbmFsaXR5LgogICAgU29tZSB3YWxsZXRzL2ludGVyZmFjZXMgbWlnaHQgbm90IGV2ZW4gYm90aGVyIHRvIGxvb2sgYXQgdGhpcyBpbmZvcm1hdGlvbi4KICAgICovCiAgICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgICAgICAgICAgICAgIC8vZmFuY3kgbmFtZTogZWcgU2ltb24gQnVja3MKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7ICAgICAgICAgICAgICAgIC8vSG93IG1hbnkgZGVjaW1hbHMgdG8gc2hvdy4KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlgKCiAgICBmdW5jdGlvbiBFSVAyMCgKICAgICAgICB1aW50MjU2IF9pbml0aWFsQW1vdW50LAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wKICAgICkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsQW1vdW50ICogMTAgKiogdWludDI1NihkZWNpbWFscyk7IC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHVpbnQyNTYgYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93YW5jZSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgaWYgKGFsbG93YW5jZSA8IE1BWF9VSU5UMjU2KSB7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0='.
	

]
