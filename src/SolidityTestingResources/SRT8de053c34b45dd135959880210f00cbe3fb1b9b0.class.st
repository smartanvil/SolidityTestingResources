Class {
	#name : #SRT8de053c34b45dd135959880210f00cbe3fb1b9b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8de053c34b45dd135959880210f00cbe3fb1b9b0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICAvKioKICAgICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgICAqLwogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAgICovCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGVtaXQgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQoKfQoKCgpjb250cmFjdCBDcnlwdG9Sb2JvdGljc1Rva2VuIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKfQoKCmNvbnRyYWN0IElDT0NvbnRyYWN0IHsKICAgIGZ1bmN0aW9uIHNldFRva2VuQ291bnRGcm9tUHJlSWNvKHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKfQoKCmNvbnRyYWN0IENyb3dkc2FsZSBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgICBDcnlwdG9Sb2JvdGljc1Rva2VuIHB1YmxpYyB0b2tlbjsKICAgIElDT0NvbnRyYWN0IGljbzsKCiAgICAvLyBBZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgICAvLyBBbW91bnQgb2Ygd2VpIHJhaXNlZAogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICAgIHVpbnQyNTYgcHVibGljIG9wZW5pbmdUaW1lOwogICAgdWludDI1NiBwdWJsaWMgY2xvc2luZ1RpbWU7CgogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQgPSBmYWxzZTsKCiAgICB1aW50IHB1YmxpYyB0b2tlblByaWNlSW5XZWkgPSAxMDUgc3phYm87CgogICAgdWludDI1NiBwdWJsaWMgY2FwID0gMTAwOCBldGhlcjsKCgogICAgZXZlbnQgRmluYWxpemVkKCk7CiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIG1vZGlmaWVyIG9ubHlXaGlsZU9wZW4gewogICAgICAgIHJlcXVpcmUobm93ID49IG9wZW5pbmdUaW1lICYmIG5vdyA8PSBjbG9zaW5nVGltZSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKENyeXB0b1JvYm90aWNzVG9rZW4gX3Rva2VuKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKF90b2tlbiAhPSBhZGRyZXNzKDApKTsKCgogICAgICAgIHdhbGxldCA9IDB4ZWI2QkQxNDM2MDQ2YjIyRWIwM2Y2YjdjMjE1QTg1MzdDOWJlZDg2ODsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgICAgICBvcGVuaW5nVGltZSA9IG5vdzsKICAgICAgICBjbG9zaW5nVGltZSA9IDE1MjY2MDE2MDA7CiAgICB9CgoKICAgIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KCgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIF9wcmVWYWxpZGF0ZVB1cmNoYXNlKF9iZW5lZmljaWFyeSwgd2VpQW1vdW50KTsKCiAgICAgICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBfZ2V0VG9rZW5BbW91bnQod2VpQW1vdW50KTsKCiAgICAgICAgdWludCBfZGlmZiA9ICB3ZWlBbW91bnQgJSB0b2tlblByaWNlSW5XZWk7CgogICAgICAgIGlmIChfZGlmZiA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihfZGlmZik7CiAgICAgICAgICAgIHdlaUFtb3VudCA9IHdlaUFtb3VudC5zdWIoX2RpZmYpOwogICAgICAgIH0KCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICBfcHJvY2Vzc1B1cmNoYXNlKF9iZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgICAgICBlbWl0IFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgX2JlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CgoKICAgICAgICBfZm9yd2FyZEZ1bmRzKHdlaUFtb3VudCk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIF9wcmVWYWxpZGF0ZVB1cmNoYXNlKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50MjU2IF93ZWlBbW91bnQpIGludGVybmFsIHZpZXcgb25seVdoaWxlT3BlbiB7CiAgICAgICAgcmVxdWlyZShfYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh3ZWlSYWlzZWQuYWRkKF93ZWlBbW91bnQpIDw9IGNhcCk7CiAgICAgICAgcmVxdWlyZShfd2VpQW1vdW50ID49IDIwIGV0aGVyKTsKICAgIH0KCgogICAgZnVuY3Rpb24gX2RlbGl2ZXJUb2tlbnMoYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX3Rva2VuQW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoX2JlbmVmaWNpYXJ5LCBfdG9rZW5BbW91bnQpOwogICAgfQoKCiAgICBmdW5jdGlvbiBfcHJvY2Vzc1B1cmNoYXNlKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50MjU2IF90b2tlbkFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIF90b2tlbkFtb3VudCA9IF90b2tlbkFtb3VudCAqIDEgZXRoZXI7CiAgICAgICAgX2RlbGl2ZXJUb2tlbnMoX2JlbmVmaWNpYXJ5LCBfdG9rZW5BbW91bnQpOwogICAgfQoKCiAgICBmdW5jdGlvbiBfZ2V0VG9rZW5BbW91bnQodWludDI1NiBfd2VpQW1vdW50KSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50IF90b2tlbnMgPSBfd2VpQW1vdW50LmRpdih0b2tlblByaWNlSW5XZWkpOwogICAgICAgIHJldHVybiBfdG9rZW5zOwogICAgfQoKCiAgICBmdW5jdGlvbiBfZm9yd2FyZEZ1bmRzKHVpbnQgX3dlaUFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIHdhbGxldC50cmFuc2Zlcihfd2VpQW1vdW50KTsKICAgIH0KCgogICAgZnVuY3Rpb24gaGFzQ2xvc2VkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBub3cgPiBjbG9zaW5nVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYXBSZWFjaGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB3ZWlSYWlzZWQgPj0gY2FwOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBNdXN0IGJlIGNhbGxlZCBhZnRlciBjcm93ZHNhbGUgZW5kcywgdG8gZG8gc29tZSBleHRyYSBmaW5hbGl6YXRpb24KICAgICAqIHdvcmsuIENhbGxzIHRoZSBjb250cmFjdCdzIGZpbmFsaXphdGlvbiBmdW5jdGlvbi4KICAgICAqLwogICAgZnVuY3Rpb24gZmluYWxpemUoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKCFpc0ZpbmFsaXplZCk7CiAgICAgICAgcmVxdWlyZShoYXNDbG9zZWQoKSB8fCBjYXBSZWFjaGVkKCkpOwoKICAgICAgICBmaW5hbGl6YXRpb24oKTsKICAgICAgICBlbWl0IEZpbmFsaXplZCgpOwoKICAgICAgICBpc0ZpbmFsaXplZCA9IHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHNldEljbyhhZGRyZXNzIF9pY28pIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGljbyA9IElDT0NvbnRyYWN0KF9pY28pOwogICAgfQoKCiAgICBmdW5jdGlvbiBmaW5hbGl6YXRpb24oKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBfYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICBpZiAoX2JhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgIHRva2VuLnRyYW5zZmVyKGFkZHJlc3MoaWNvKSwgX2JhbGFuY2UpOwogICAgICAgICAgICBpY28uc2V0VG9rZW5Db3VudEZyb21QcmVJY28oX2JhbGFuY2UpOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
