Class {
	#name : #SRT913fa716822660489b2c031d1844bd1425e7ef32,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT913fa716822660489b2c031d1844bd1425e7ef32 >> base64 [
	^ ''.
	

]
