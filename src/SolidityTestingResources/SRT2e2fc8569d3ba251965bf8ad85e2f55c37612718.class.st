Class {
	#name : #SRT2e2fc8569d3ba251965bf8ad85e2f55c37612718,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e2fc8569d3ba251965bf8ad85e2f55c37612718 >> base64 [
	^ ''.
	

]
