Class {
	#name : #SRTab790e676fc8bd57170c352330679a23a510a182,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTab790e676fc8bd57170c352330679a23a510a182 >> base64 [
	^ ''.
	

]
