Class {
	#name : #SRT1e932ce1e5167c4747196517783c2bc8106656f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e932ce1e5167c4747196517783c2bc8106656f4 >> base64 [
	^ ''.
	

]
