Class {
	#name : #SRT473ae4e31bfd1f821388a017f2839c3187aaf82e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT473ae4e31bfd1f821388a017f2839c3187aaf82e >> base64 [
	^ 'LyoqCiAqICBBVE1YIEFtZXJpdG9rZW4gY29udHJhY3QsIEVSQzIwIGNvbXBsaWFudCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCkKKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40LjE2OwoKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWM7IH0KCmNvbnRyYWN0IEFtZXJpdG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ0FtZXJpdG9rZW4nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICdBVE1YJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCBkZWNpbWFscyAKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgdmVyc2lvbiA9ICdBVE1YLTEuMSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWJsaWMgVmVyc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvcnJlY3RlZCBnbGl0Y2ggb2Ygc2VuZGluZyBkb3VibGUgcXR5IHRvIHJlY2VpdmVyLiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXggcHJvdmlkZWQgYnkgaHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy8xOTUxMC9zbWFyeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgdG90YWxUb2tlbnMgPSA0MTAwMDAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm91cnR5IE9uZSBtaWxsaW9uIGNvaW5zLCBOTyBGT1JLCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKEVSQzIwKQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOyAgICAgICAgIC8vIChFUkMyMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsgICAgCiAKICAgIGZ1bmN0aW9uIEFtZXJpdG9rZW4gKCkgcHVibGljIHsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFRva2VuczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIChBbWVyaXRva2VuLCBMTEMpIGFsbCBpbml0aWFsIHRva2Vucy4KICAgIH0KCiAgLy8gU2VlIEVSQzIwCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJucyB0aGUgVG90YWwgb2YgQW1lcml0b2tlbnMKICAgICAgICByZXR1cm4gdG90YWxUb2tlbnM7CiAgICB9CgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7ICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107ICAgICAgICAgICAgICAvLyBTYXZlIHRoaXMgZm9yIGFuIGFzc2VydGlvbiBpbiB0aGUgZnV0dXJlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIGFzc2VydChiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b10gPT0gcHJldmlvdXNCYWxhbmNlcyk7ICAgICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICB9CgogICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IF92YWx1ZSkgewogICAgICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKSB7CiAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOwogICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQp9'.
	

]
