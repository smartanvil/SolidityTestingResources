Class {
	#name : #SRT77a77eca75445841875ebb67a33d0a97dc34d924,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT77a77eca75445841875ebb67a33d0a97dc34d924 >> base64 [
	^ ''.
	

]
