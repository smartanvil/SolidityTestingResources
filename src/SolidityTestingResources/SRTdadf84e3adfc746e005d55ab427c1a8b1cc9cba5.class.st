Class {
	#name : #SRTdadf84e3adfc746e005d55ab427c1a8b1cc9cba5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdadf84e3adfc746e005d55ab427c1a8b1cc9cba5 >> base64 [
	^ ''.
	

]
