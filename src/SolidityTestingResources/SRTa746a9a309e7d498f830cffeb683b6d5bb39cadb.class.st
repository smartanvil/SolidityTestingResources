Class {
	#name : #SRTa746a9a309e7d498f830cffeb683b6d5bb39cadb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa746a9a309e7d498f830cffeb683b6d5bb39cadb >> base64 [
	^ ''.
	

]
