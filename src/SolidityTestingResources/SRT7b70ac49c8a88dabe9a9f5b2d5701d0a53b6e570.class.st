Class {
	#name : #SRT7b70ac49c8a88dabe9a9f5b2d5701d0a53b6e570,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7b70ac49c8a88dabe9a9f5b2d5701d0a53b6e570 >> base64 [
	^ ''.
	

]
