Class {
	#name : #SRT1e09bd8cadb441632e441db3e1d79909ee0a2256,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e09bd8cadb441632e441db3e1d79909ee0a2256 >> base64 [
	^ ''.
	

]
