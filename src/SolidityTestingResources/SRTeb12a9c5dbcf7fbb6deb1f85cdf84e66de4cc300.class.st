Class {
	#name : #SRTeb12a9c5dbcf7fbb6deb1f85cdf84e66de4cc300,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb12a9c5dbcf7fbb6deb1f85cdf84e66de4cc300 >> base64 [
	^ ''.
	

]
