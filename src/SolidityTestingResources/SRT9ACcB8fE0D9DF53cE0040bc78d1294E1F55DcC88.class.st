Class {
	#name : #SRT9ACcB8fE0D9DF53cE0040bc78d1294E1F55DcC88,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9ACcB8fE0D9DF53cE0040bc78d1294E1F55DcC88 >> base64 [
	^ 'Ly9zb2wgTXlBZHZhbmNlZFRva2VuOApwcmFnbWEgc29saWRpdHkgXjAuNC4xODsKLy8gUGV0ZXIncyAidGlrIiwgIlRJSyIsICJUaVRvayIgLSBUb2tlbiBDb250cmFjdCBJTCBNQVJFIEZJTE0sIE15QWR2YW5jZWRUb2tlbjgsIDI1dGggSnVseSAyMDE3Cgpjb250cmFjdCBNeUFkdmFuY2VkVG9rZW44ICB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIHVpbnQyNTYgcHVibGljIHNlbGxQcmljZTsKICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwogICAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdFUkMtVG9rZW4gMS4wJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICAKCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyAKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIE15QWR2YW5jZWRUb2tlbjgoCiAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbAogICAgKSBwdWJsaWMKICAgIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgfQogICAgCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGZyb3plbgogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgIH0KCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFtfZnJvbV0pIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGZyb3plbiAgICAgICAgICAgIAogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSByZXZlcnQoKTsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlT2ZbdGFyZ2V0XSArPSBtaW50ZWRBbW91bnQ7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gbWludGVkQW1vdW50OwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICAKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlOwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlIC8gYnV5UHJpY2U7ICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIGFtb3VudAogICAgICAgIGlmIChiYWxhbmNlT2ZbdGhpc10gPCBhbW91bnQpIHJldmVydCgpOyAgICAgICAgICAgICAvLyBjaGVja3MgaWYgaXQgaGFzIGVub3VnaCB0byBzZWxsCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICAgIGJhbGFuY2VPZlt0aGlzXSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSBhbiBldmVudCByZWZsZWN0aW5nIHRoZSBjaGFuZ2UKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxsKHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgewogICAgICAgIGJvb2wgc2VuZFNVQ0NFU1MgPSBmYWxzZTsKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgYW1vdW50ICkgcmV2ZXJ0KCk7ICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gKz0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRzIHRoZSBhbW91bnQgdG8gb3duZXIncyBiYWxhbmNlCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IGFtb3VudDsgICAgICAgICAgICAgICAgICAgLy8gc3VidHJhY3RzIHRoZSBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgc2VuZFNVQ0NFU1MgPSBtc2cuc2VuZGVyLnNlbmQoYW1vdW50ICogc2VsbFByaWNlKTsKICAgICAgICBpZiAoIXNlbmRTVUNDRVNTKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlbmRzIGV0aGVyIHRvIHRoZSBzZWxsZXIuIEl0J3MgaW1wb3J0YW50CiAgICAgICAgICAgIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBkbyB0aGlzIGxhc3QgdG8gYXZvaWQgcmVjdXJzaW9uIGF0dGFja3MKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOyAgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZXMgYW4gZXZlbnQgcmVmbGVjdGluZyBvbiB0aGUgY2hhbmdlCiAgICAgICAgfSAgICAgICAgICAgICAgIAogICAgfQogICAgCiAgICAvLyBnZXRzIGNhbGxlZCB3aGVuIG5vIG90aGVyIGZ1bmN0aW9uIG1hdGNoZXMKCWZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewoJCS8vIGp1c3QgYmVpbmcgc2VudCBzb21lIGNhc2g/CgkJaWYgKG1zZy52YWx1ZSA+IDApCgkJCURlcG9zaXQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKCX0KICAgIAogICAgCn0='.
	

]
