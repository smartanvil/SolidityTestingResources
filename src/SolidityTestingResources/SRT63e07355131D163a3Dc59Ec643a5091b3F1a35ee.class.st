Class {
	#name : #SRT63e07355131D163a3Dc59Ec643a5091b3F1a35ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63e07355131D163a3Dc59Ec643a5091b3F1a35ee >> base64 [
	^ ''.
	

]
