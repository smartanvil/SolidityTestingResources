Class {
	#name : #SRTC2D346915414047795418b16694CA0B3F01251a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC2D346915414047795418b16694CA0B3F01251a6 >> base64 [
	^ ''.
	

]
