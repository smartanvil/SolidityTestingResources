Class {
	#name : #SRT2138ffe292fd0953f7fe2569111246e4de9ff1dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2138ffe292fd0953f7fe2569111246e4de9ff1dc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKgoKICAgIENyeXB0byBNYXJrZXQgUHJpY2VzIHZpYSBFdGhlcmV1bSBTbWFydCBDb250cmFjdAoKICAgIEEgY29tbXVuaXR5IGRyaXZlbiBzbWFydCBjb250cmFjdCB0aGF0IGxldHMgeW91ciBjb250cmFjdHMgdXNlIGZpYXQKICAgIGFtb3VudHMgaW4gVVNELCBFVVJPLCBhbmQgR0JQLiBOZWVkIHRvIGNoYXJnZSAkMTAuNTAgZm9yIGEgY29udHJhY3QgY2FsbD8KICAgIFdpdGggdGhpcyBjb250cmFjdCwgeW91IGNhbiBjb252ZXJ0IEVUSCBhbmQgb3RoZXIgY3J5cHRvJ3MuCgogICAgUmVwbzogaHR0cHM6Ly9naXRodWIuY29tL2h1bnRlcmxvbmcvbWFya2V0cHJpY2UKICAgIExvb2sgYXQgcmVwbyBmb3IgbW9yZSB0b2tlbiBleGFtcGxlcwoKICAgIEV4YW1wbGVzOgoKICAgICAgTWFya2V0UHJpY2UgcHJpY2UgPSBNYXJrZXRQcmljZShDT05UUkFDVF9BRERSRVNTKTsKCiAgICAgIHVpbnQyNTYgZXRoQ2VudCA9IHByaWNlLlVTRCgwKTsgICAgICAgIC8vIHJldHVybnMgJDAuMDEgd29ydGggb2YgRVRIIGluIFVTRC4KICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBldGhDZW50ICogMjUwMCAgICAgLy8gcmV0dXJucyAkMjUuMDAgd29ydGggb2YgRVRIIGluIFVTRAogICAgICByZXF1aXJlKG1zZy52YWx1ZSA9PSB3ZWlBbW91bnQpOyAgICAgICAvLyByZXF1aXJlICQyNS4wMCB3b3J0aCBvZiBFVEggYXMgYSBwYXltZW50CgogICAgQGF1dGhvciBIdW50ZXIgTG9uZwoqLwoKY29udHJhY3QgTWFya2V0UHJpY2UgewoKICAgIG1hcHBpbmcodWludCA9PiBUb2tlbikgcHVibGljIHRva2VuczsKCiAgICBhZGRyZXNzIHB1YmxpYyBzZW5kZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwoKICAgIGV2ZW50IE5ld1ByaWNlKHVpbnQgaWQsIHN0cmluZyB0b2tlbik7CiAgICBldmVudCBEZWxldGVQcmljZSh1aW50IGlkKTsKICAgIGV2ZW50IFVwZGF0ZWRQcmljZSh1aW50IGlkKTsKICAgIGV2ZW50IFJlcXVlc3RVcGRhdGUodWludCBpZCk7CgogICAgc3RydWN0IFRva2VuIHsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50MjU2IGV0aDsKICAgICAgICB1aW50MjU2IHVzZDsKICAgICAgICB1aW50MjU2IGV1cjsKICAgICAgICB1aW50MjU2IGdicDsKICAgICAgICB1aW50IGJsb2NrOwogICAgfQoKICAgIC8vIGluaXRpYWxpemUgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIE1hcmtldFByaWNlKCkgewogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIHNlbmRlciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8gcmV0dXJucyB0aGUgVG9rZW4gc3RydWN0CiAgICBmdW5jdGlvbiBnZXRUb2tlbih1aW50IF9pZCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoVG9rZW4pIHsKICAgICAgICByZXR1cm4gdG9rZW5zW19pZF07CiAgICB9CgogICAgLy8gcmV0dXJucyByYXRlIHByaWNlIG9mIGNvaW4gcmVsYXRlZCB0byBFVEguCiAgICBmdW5jdGlvbiBFVEgodWludCBfaWQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG9rZW5zW19pZF0uZXRoOwogICAgfQoKICAgIC8vIHJldHVybnMgMC4wMSB2YWx1ZSBpbiBVbml0ZWQgU3RhdGVzIERvbGxhcgogICAgZnVuY3Rpb24gVVNEKHVpbnQgX2lkKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRva2Vuc1tfaWRdLnVzZDsKICAgIH0KCiAgICAvLyByZXR1cm5zIDAuMDEgdmFsdWUgaW4gRXVybwogICAgZnVuY3Rpb24gRVVSKHVpbnQgX2lkKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRva2Vuc1tfaWRdLmV1cjsKICAgIH0KCiAgICAvLyByZXR1cm5zIDAuMDEgdmFsdWUgaW4gQnJpdGlzaCBQb3VuZAogICAgZnVuY3Rpb24gR0JQKHVpbnQgX2lkKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRva2Vuc1tfaWRdLmdicDsKICAgIH0KCiAgICAvLyByZXR1cm5zIGJsb2NrIHdoZW4gcHJpY2Ugd2FzIHVwZGF0ZWQgbGFzdAogICAgZnVuY3Rpb24gdXBkYXRlZEF0KHVpbnQgX2lkKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRva2Vuc1tfaWRdLmJsb2NrOwogICAgfQoKICAgIC8vIHVwZGF0ZSBtYXJrZXQgcmF0ZXMgaW4gVVNELCBFVVJPLCBhbmQgR0JQIGZvciBhIHNwZWNpZmljIGNvaW4KICAgIGZ1bmN0aW9uIHVwZGF0ZSh1aW50IGlkLCBzdHJpbmcgX3Rva2VuLCB1aW50MjU2IGV0aCwgdWludDI1NiB1c2QsIHVpbnQyNTYgZXVyLCB1aW50MjU2IGdicCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09c2VuZGVyKTsKICAgICAgICB0b2tlbnNbaWRdID0gVG9rZW4oX3Rva2VuLCBldGgsIHVzZCwgZXVyLCBnYnAsIGJsb2NrLm51bWJlcik7CiAgICAgICAgTmV3UHJpY2UoaWQsIF90b2tlbik7CiAgICB9CgogICAgLy8gZGVsZXRlIGEgdG9rZW4gZnJvbSB0aGUgY29udHJhY3QKICAgIGZ1bmN0aW9uIGRlbGV0ZVRva2VuKHVpbnQgaWQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PXNlbmRlcik7CiAgICAgICAgRGVsZXRlUHJpY2UoaWQpOwogICAgICAgIGRlbGV0ZSB0b2tlbnNbaWRdOwogICAgfQoKICAgIC8vIGNoYW5nZSBjcmVhdG9yIGFkZHJlc3MKICAgIGZ1bmN0aW9uIGNoYW5nZUNyZWF0b3IoYWRkcmVzcyBfY3JlYXRvcil7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT1jcmVhdG9yKTsKICAgICAgICBjcmVhdG9yID0gX2NyZWF0b3I7CiAgICB9CgogICAgLy8gY2hhbmdlIHNlbmRlciBhZGRyZXNzCiAgICBmdW5jdGlvbiBjaGFuZ2VTZW5kZXIoYWRkcmVzcyBfc2VuZGVyKXsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PWNyZWF0b3IpOwogICAgICAgIHNlbmRlciA9IF9zZW5kZXI7CiAgICB9CgogICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiBmb3IgY3JlYXRvciBpZiBFUkMyMCdzIGdldCBzdHVjayBpbiB0aGlzIHdhbGxldAogICAgZnVuY3Rpb24gZXhlY3V0ZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBleHRlcm5hbCByZXR1cm5zIChieXRlczMyIF9yKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT1jcmVhdG9yKTsKICAgICAgICByZXF1aXJlKF90by5jYWxsLnZhbHVlKF92YWx1ZSkoX2RhdGEpKTsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICAvLyBkZWZhdWx0IGZ1bmN0aW9uIHNvIHRoaXMgY29udHJhY3QgY2FuIGFjY2VwdCBFVEggd2l0aCBsb3cgZ2FzIGxpbWl0cy4KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CgogICAgfQoKICAgIC8vIHB1YmxpYyBmdW5jdGlvbiBmb3IgcmVxdWVzdGluZyBhbiB1cGRhdGVkIHByaWNlIGZyb20gc2VydmVyCiAgICAvLyB1c2luZyB0aGlzIGZ1bmN0aW9uIHJlcXVpcmVzIGEgcGF5bWVudCBvZiAkMC4zNSBVU0QKICAgIGZ1bmN0aW9uIHJlcXVlc3RVcGRhdGUodWludCBpZCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSB0b2tlbnNbMF0udXNkICogMzU7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gd2VpQW1vdW50KTsKICAgICAgICBzZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICBSZXF1ZXN0VXBkYXRlKGlkKTsKICAgIH0KCiAgICAvLyBkb25hdGlvbiBmdW5jdGlvbiB0aGF0IGdldCBmb3J3YXJkZWQgdG8gdGhlIGNvbnRyYWN0IHVwZGF0ZXIKICAgIGZ1bmN0aW9uIGRvbmF0ZSgpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDApOwogICAgICAgIHNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgfQoKfQ=='.
	

]
