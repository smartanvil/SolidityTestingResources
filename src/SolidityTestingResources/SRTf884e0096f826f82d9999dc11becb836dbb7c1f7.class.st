Class {
	#name : #SRTf884e0096f826f82d9999dc11becb836dbb7c1f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf884e0096f826f82d9999dc11becb836dbb7c1f7 >> base64 [
	^ ''.
	

]
