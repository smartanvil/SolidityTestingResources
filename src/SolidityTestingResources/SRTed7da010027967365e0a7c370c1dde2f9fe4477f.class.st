Class {
	#name : #SRTed7da010027967365e0a7c370c1dde2f9fe4477f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed7da010027967365e0a7c370c1dde2f9fe4477f >> base64 [
	^ ''.
	

]
