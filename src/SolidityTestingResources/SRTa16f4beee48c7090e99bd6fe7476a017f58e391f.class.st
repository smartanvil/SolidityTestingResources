Class {
	#name : #SRTa16f4beee48c7090e99bd6fe7476a017f58e391f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa16f4beee48c7090e99bd6fe7476a017f58e391f >> base64 [
	^ ''.
	

]
