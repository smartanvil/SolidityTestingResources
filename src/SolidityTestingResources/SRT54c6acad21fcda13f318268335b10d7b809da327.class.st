Class {
	#name : #SRT54c6acad21fcda13f318268335b10d7b809da327,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT54c6acad21fcda13f318268335b10d7b809da327 >> base64 [
	^ ''.
	

]
