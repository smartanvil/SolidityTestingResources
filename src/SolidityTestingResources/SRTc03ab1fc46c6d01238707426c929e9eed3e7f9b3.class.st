Class {
	#name : #SRTc03ab1fc46c6d01238707426c929e9eed3e7f9b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc03ab1fc46c6d01238707426c929e9eed3e7f9b3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9Cgpjb250cmFjdCBBYnN0cmFjdFN0YXJiYXNlVG9rZW4gewogICAgZnVuY3Rpb24gaXNGdW5kcmFpc2VyKGFkZHJlc3MgZnVuZHJhaXNlckFkZHJlc3MpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGNvbXBhbnkoKSBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRvQ3Jvd2RzYWxlUHVyY2hhc2VyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFsbG9jYXRlVG9NYXJrZXRpbmdTdXBwb3J0ZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlIHsKICAgIGZ1bmN0aW9uIHN0YXJ0RGF0ZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHt9CiAgICBmdW5jdGlvbiBlbmRlZEF0KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGlzRW5kZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIG51bU9mUHVyY2hhc2VkVG9rZW5zT25Dc0J5KGFkZHJlc3MgcHVyY2hhc2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5KGFkZHJlc3MgcHVyY2hhc2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKLy8vIEB0aXRsZSBFYXJseVB1cmNoYXNlIGNvbnRyYWN0IC0gS2VlcCB0cmFjayBvZiBwdXJjaGFzZWQgYW1vdW50IGJ5IEVhcmx5IFB1cmNoYXNlcnMKLy8vIEBhdXRob3IgU3RhcmJhc2UgUFRFLiBMVEQuIC0gPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI4M2VhZWRlNWVjYzNmMGY3ZTJmMWUxZTJmMGU2YWRlMGVjIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4KY29udHJhY3QgU3RhcmJhc2VFYXJseVB1cmNoYXNlIHsKICAgIC8qCiAgICAgKiAgQ29uc3RhbnRzCiAgICAgKi8KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgUFVSQ0hBU0VfQU1PVU5UX1VOSVQgPSAnQ05ZJzsgICAgLy8gQ2hpbmVzZSBZdWFuCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFBVUkNIQVNFX0FNT1VOVF9SQVRFX1JFRkVSRU5DRSA9ICdodHRwOi8vd3d3LnhlLmNvbS9jdXJyZW5jeXRhYmxlcy8nOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgUFVSQ0hBU0VfQU1PVU5UX0NBUCA9IDkwMDAwMDA7CgogICAgLyoKICAgICAqICBUeXBlcwogICAgICovCiAgICBzdHJ1Y3QgRWFybHlQdXJjaGFzZSB7CiAgICAgICAgYWRkcmVzcyBwdXJjaGFzZXI7CiAgICAgICAgdWludDI1NiBhbW91bnQ7ICAgICAgICAvLyBDTlkgYmFzZWQgYW1vdW50CiAgICAgICAgdWludDI1NiBwdXJjaGFzZWRBdDsgICAvLyB0aW1lc3RhbXAKICAgIH0KCiAgICAvKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlIHB1YmxpYyBzdGFyYmFzZUNyb3dkc2FsZTsKCiAgICAvKgogICAgICogIFN0b3JhZ2UKICAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBFYXJseVB1cmNoYXNlW10gcHVibGljIGVhcmx5UHVyY2hhc2VzOwogICAgdWludDI1NiBwdWJsaWMgZWFybHlQdXJjaGFzZUNsb3NlZEF0OwoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG5vRXRoZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlCZWZvcmVDcm93ZHNhbGUoKSB7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VDcm93ZHNhbGUpID09IGFkZHJlc3MoMCkgfHwgc3RhcmJhc2VDcm93ZHNhbGUuc3RhcnREYXRlKCkgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5RWFybHlQdXJjaGFzZVRlcm0oKSB7CiAgICAgICAgYXNzZXJ0KGVhcmx5UHVyY2hhc2VDbG9zZWRBdCA8PSAwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qCiAgICAgKiAgQ29udHJhY3QgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBlYXJseSBwdXJjaGFzZWQgYW1vdW50IGJ5IHB1cmNoYXNlcidzIGFkZHJlc3MKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgUHVyY2hhc2VyIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VkQW1vdW50QnkoYWRkcmVzcyBwdXJjaGFzZXIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG5vRXRoZXIKICAgICAgICByZXR1cm5zICh1aW50MjU2IGFtb3VudCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQyNTYgaTsgaSA8IGVhcmx5UHVyY2hhc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlYXJseVB1cmNoYXNlc1tpXS5wdXJjaGFzZXIgPT0gcHVyY2hhc2VyKSB7CiAgICAgICAgICAgICAgICBhbW91bnQgKz0gZWFybHlQdXJjaGFzZXNbaV0uYW1vdW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIHRvdGFsIGFtb3VudCBvZiByYWlzZWQgZnVuZHMgYnkgRWFybHkgUHVyY2hhc2VycwogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKHVpbnQyNTYgdG90YWxBbW91bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50MjU2IGk7IGkgPCBlYXJseVB1cmNoYXNlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0b3RhbEFtb3VudCArPSBlYXJseVB1cmNoYXNlc1tpXS5hbW91bnQ7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIG51bWJlciBvZiBlYXJseSBwdXJjaGFzZXMKICAgICAqLwogICAgZnVuY3Rpb24gbnVtYmVyT2ZFYXJseVB1cmNoYXNlcygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG5vRXRoZXIKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBlYXJseVB1cmNoYXNlcy5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFwcGVuZCBhbiBlYXJseSBwdXJjaGFzZSBsb2cKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgUHVyY2hhc2VyIGFkZHJlc3MKICAgICAqIEBwYXJhbSBhbW91bnQgUHVyY2hhc2UgYW1vdW50CiAgICAgKiBAcGFyYW0gcHVyY2hhc2VkQXQgVGltZXN0YW1wIG9mIHB1cmNoYXNlZCBkYXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcGVuZEVhcmx5UHVyY2hhc2UoYWRkcmVzcyBwdXJjaGFzZXIsIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IHB1cmNoYXNlZEF0KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9FdGhlcgogICAgICAgIG9ubHlPd25lcgogICAgICAgIG9ubHlCZWZvcmVDcm93ZHNhbGUKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZVRlcm0KICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChhbW91bnQgPT0gMCB8fAogICAgICAgICAgICB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKSArIGFtb3VudCA+IFBVUkNIQVNFX0FNT1VOVF9DQVApCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBhc3NlcnQocHVyY2hhc2VkQXQgIT0gMCB8fCBwdXJjaGFzZWRBdCA8PSBub3cpOwoKICAgICAgICBlYXJseVB1cmNoYXNlcy5wdXNoKEVhcmx5UHVyY2hhc2UocHVyY2hhc2VyLCBhbW91bnQsIHB1cmNoYXNlZEF0KSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENsb3NlIGVhcmx5IHB1cmNoYXNlIHRlcm0KICAgICAqLwogICAgZnVuY3Rpb24gY2xvc2VFYXJseVB1cmNoYXNlKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGVhcmx5UHVyY2hhc2VDbG9zZWRBdCA9IG5vdzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0dXAgZnVuY3Rpb24gc2V0cyBleHRlcm5hbCBjb250cmFjdCdzIGFkZHJlc3MKICAgICAqIEBwYXJhbSBzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MgVG9rZW4gYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiBzZXR1cChhZGRyZXNzIHN0YXJiYXNlQ3Jvd2RzYWxlQWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSA9PSAwKSB7CiAgICAgICAgICAgIHN0YXJiYXNlQ3Jvd2RzYWxlID0gQWJzdHJhY3RTdGFyYmFzZUNyb3dkc2FsZShzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBmdW5jdGlvbgogICAgICovCiAgICBmdW5jdGlvbiBTdGFyYmFzZUVhcmx5UHVyY2hhc2UoKSBub0V0aGVyIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9Cn0KCi8vLyBAdGl0bGUgRWFybHlQdXJjaGFzZUFtZW5kbWVudCBjb250cmFjdCAtIEFtZW5kIGVhcmx5IHB1cmNoYXNlIHJlY29yZHMgb2YgdGhlIG9yaWdpbmFsIGNvbnRyYWN0Ci8vLyBAYXV0aG9yIFN0YXJiYXNlIFBURS4gTFRELiAtIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNTMyMDI2MjMyMzNjMjEyNzEzMjAyNzMyMjEzMTMyMjAzNjdkMzAzYyI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+CmNvbnRyYWN0IFN0YXJiYXNlRWFybHlQdXJjaGFzZUFtZW5kbWVudCB7CiAgICAvKgogICAgICogIEV2ZW50cwogICAgICovCiAgICBldmVudCBFYXJseVB1cmNoYXNlSW52YWxpZGF0ZWQodWludDI1NiBlcElkeCk7CiAgICBldmVudCBFYXJseVB1cmNoYXNlQW1lbmRlZCh1aW50MjU2IGVwSWR4KTsKCiAgICAvKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlIHB1YmxpYyBzdGFyYmFzZUNyb3dkc2FsZTsKICAgIFN0YXJiYXNlRWFybHlQdXJjaGFzZSBwdWJsaWMgc3RhcmJhc2VFYXJseVB1cmNoYXNlOwoKICAgIC8qCiAgICAgKiAgU3RvcmFnZQogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIHVpbnQyNTZbXSBwdWJsaWMgaW52YWxpZEVhcmx5UHVyY2hhc2VJbmRleGVzOwogICAgdWludDI1NltdIHB1YmxpYyBhbWVuZGVkRWFybHlQdXJjaGFzZUluZGV4ZXM7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlKSBwdWJsaWMgYW1lbmRlZEVhcmx5UHVyY2hhc2VzOwoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG5vRXRoZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlCZWZvcmVDcm93ZHNhbGUoKSB7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VDcm93ZHNhbGUpID09IGFkZHJlc3MoMCkgfHwgc3RhcmJhc2VDcm93ZHNhbGUuc3RhcnREYXRlKCkgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQoKSB7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VFYXJseVB1cmNoYXNlKSAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qCiAgICAgKiAgRnVuY3Rpb25zIGJlbG93IGFyZSBjb21wYXRpYmxlIHdpdGggc3RhcmJhc2VFYXJseVB1cmNoYXNlIGNvbnRyYWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBhbiBlYXJseSBwdXJjaGFzZSByZWNvcmQKICAgICAqIEBwYXJhbSBlYXJseVB1cmNoYXNlSW5kZXggSW5kZXggbnVtYmVyIG9mIGFuIGVhcmx5IHB1cmNoYXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVhcmx5UHVyY2hhc2VzKHVpbnQyNTYgZWFybHlQdXJjaGFzZUluZGV4KQogICAgICAgIGV4dGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICByZXR1cm5zIChhZGRyZXNzIHB1cmNoYXNlciwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgcHVyY2hhc2VkQXQpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXJiYXNlRWFybHlQdXJjaGFzZS5lYXJseVB1cmNoYXNlcyhlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIGVhcmx5IHB1cmNoYXNlZCBhbW91bnQgYnkgcHVyY2hhc2VyJ3MgYWRkcmVzcwogICAgICogQHBhcmFtIHB1cmNoYXNlciBQdXJjaGFzZXIgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiBwdXJjaGFzZWRBbW91bnRCeShhZGRyZXNzIHB1cmNoYXNlcikKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYW1vdW50KQogICAgewogICAgICAgIFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlW10gbWVtb3J5IG5vcm1hbGl6ZWRFUCA9CiAgICAgICAgICAgIG5vcm1hbGl6ZWRFYXJseVB1cmNoYXNlcygpOwogICAgICAgIGZvciAodWludDI1NiBpOyBpIDwgbm9ybWFsaXplZEVQLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChub3JtYWxpemVkRVBbaV0ucHVyY2hhc2VyID09IHB1cmNoYXNlcikgewogICAgICAgICAgICAgICAgYW1vdW50ICs9IG5vcm1hbGl6ZWRFUFtpXS5hbW91bnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgdG90YWwgYW1vdW50IG9mIHJhaXNlZCBmdW5kcyBieSBFYXJseSBQdXJjaGFzZXJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlcygpCiAgICAgICAgY29uc3RhbnQKICAgICAgICBub0V0aGVyCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludDI1NiB0b3RhbEFtb3VudCkKICAgIHsKICAgICAgICBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZVtdIG1lbW9yeSBub3JtYWxpemVkRVAgPQogICAgICAgICAgICBub3JtYWxpemVkRWFybHlQdXJjaGFzZXMoKTsKICAgICAgICBmb3IgKHVpbnQyNTYgaTsgaSA8IG5vcm1hbGl6ZWRFUC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0b3RhbEFtb3VudCArPSBub3JtYWxpemVkRVBbaV0uYW1vdW50OwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgZWFybHkgcHVyY2hhc2VzCiAgICAgKi8KICAgIGZ1bmN0aW9uIG51bWJlck9mRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICBub0V0aGVyCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gbm9ybWFsaXplZEVhcmx5UHVyY2hhc2VzKCkubGVuZ3RoOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTZXRzIHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3QncyBhZGRyZXNzCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VDcm93ZHNhbGVBZGRyZXNzIFRva2VuIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gc2V0dXAoYWRkcmVzcyBzdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBub0V0aGVyCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAoYWRkcmVzcyhzdGFyYmFzZUNyb3dkc2FsZSkgPT0gMCkgewogICAgICAgICAgICBzdGFyYmFzZUNyb3dkc2FsZSA9IEFic3RyYWN0U3RhcmJhc2VDcm93ZHNhbGUoc3RhcmJhc2VDcm93ZHNhbGVBZGRyZXNzKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKgogICAgICogIENvbnRyYWN0IGZ1bmN0aW9ucyB1bmlxdWUgdG8gU3RhcmJhc2VFYXJseVB1cmNoYXNlQW1lbmRtZW50CiAgICAgKi8KCiAgICAgLyoqCiAgICAgICogQGRldiBJbnZhbGlkYXRlIGVhcmx5IHB1cmNoYXNlCiAgICAgICogQHBhcmFtIGVhcmx5UHVyY2hhc2VJbmRleCBJbmRleCBudW1iZXIgb2YgdGhlIHB1cmNoYXNlCiAgICAgICovCiAgICBmdW5jdGlvbiBpbnZhbGlkYXRlRWFybHlQdXJjaGFzZSh1aW50MjU2IGVhcmx5UHVyY2hhc2VJbmRleCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICBvbmx5QmVmb3JlQ3Jvd2RzYWxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhc3NlcnQobnVtYmVyT2ZSYXdFYXJseVB1cmNoYXNlcygpID4gZWFybHlQdXJjaGFzZUluZGV4KTsgLy8gQXJyYXkgSW5kZXggT3V0IG9mIEJvdW5kcyBFeGNlcHRpb24KCiAgICAgICAgZm9yICh1aW50MjU2IGk7IGkgPCBpbnZhbGlkRWFybHlQdXJjaGFzZUluZGV4ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYXNzZXJ0KGludmFsaWRFYXJseVB1cmNoYXNlSW5kZXhlc1tpXSAhPSBlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIH0KCiAgICAgICAgaW52YWxpZEVhcmx5UHVyY2hhc2VJbmRleGVzLnB1c2goZWFybHlQdXJjaGFzZUluZGV4KTsKICAgICAgICBFYXJseVB1cmNoYXNlSW52YWxpZGF0ZWQoZWFybHlQdXJjaGFzZUluZGV4KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2hlY2tzIHdoZXRoZXIgZWFybHkgcHVyY2hhc2UgaXMgaW52YWxpZAogICAgICogQHBhcmFtIGVhcmx5UHVyY2hhc2VJbmRleCBJbmRleCBudW1iZXIgb2YgdGhlIHB1cmNoYXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzSW52YWxpZEVhcmx5UHVyY2hhc2UodWludDI1NiBlYXJseVB1cmNoYXNlSW5kZXgpCiAgICAgICAgY29uc3RhbnQKICAgICAgICBub0V0aGVyCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhc3NlcnQobnVtYmVyT2ZSYXdFYXJseVB1cmNoYXNlcygpID4gZWFybHlQdXJjaGFzZUluZGV4KTsgLy8gQXJyYXkgSW5kZXggT3V0IG9mIEJvdW5kcyBFeGNlcHRpb24KCgogICAgICAgIGZvciAodWludDI1NiBpOyBpIDwgaW52YWxpZEVhcmx5UHVyY2hhc2VJbmRleGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpbnZhbGlkRWFybHlQdXJjaGFzZUluZGV4ZXNbaV0gPT0gZWFybHlQdXJjaGFzZUluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFtZW5kcyBhIGdpdmVuIGVhcmx5IHB1cmNoYXNlIHdpdGggZGF0YQogICAgICogQHBhcmFtIGVhcmx5UHVyY2hhc2VJbmRleCBJbmRleCBudW1iZXIgb2YgdGhlIHB1cmNoYXNlCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIFB1cmNoYXNlcidzIGFkZHJlc3MKICAgICAqIEBwYXJhbSBhbW91bnQgVmFsdWUgb2YgcHVyY2hhc2UKICAgICAqIEBwYXJhbSBwdXJjaGFzZWRBdCBQdXJjaGFzZSB0aW1lc3RhbXAKICAgICAqLwogICAgZnVuY3Rpb24gYW1lbmRFYXJseVB1cmNoYXNlKHVpbnQyNTYgZWFybHlQdXJjaGFzZUluZGV4LCBhZGRyZXNzIHB1cmNoYXNlciwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgcHVyY2hhc2VkQXQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBub0V0aGVyCiAgICAgICAgb25seU93bmVyCiAgICAgICAgb25seUVhcmx5UHVyY2hhc2VzTG9hZGVkCiAgICAgICAgb25seUJlZm9yZUNyb3dkc2FsZQogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYXNzZXJ0KHB1cmNoYXNlZEF0ICE9IDAgfHwgcHVyY2hhc2VkQXQgPD0gbm93KTsKCiAgICAgICAgYXNzZXJ0KG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKSA+IGVhcmx5UHVyY2hhc2VJbmRleCk7CgogICAgICAgIGFzc2VydCghaXNJbnZhbGlkRWFybHlQdXJjaGFzZShlYXJseVB1cmNoYXNlSW5kZXgpKTsgLy8gSW52YWxpZCBlYXJseSBwdXJjaGFzZSBjYW5ub3QgYmUgYW1lbmRlZAoKICAgICAgICBpZiAoIWlzQW1lbmRlZEVhcmx5UHVyY2hhc2UoZWFybHlQdXJjaGFzZUluZGV4KSkgewogICAgICAgICAgICBhbWVuZGVkRWFybHlQdXJjaGFzZUluZGV4ZXMucHVzaChlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIH0KCiAgICAgICAgYW1lbmRlZEVhcmx5UHVyY2hhc2VzW2Vhcmx5UHVyY2hhc2VJbmRleF0gPQogICAgICAgICAgICBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZShwdXJjaGFzZXIsIGFtb3VudCwgcHVyY2hhc2VkQXQpOwogICAgICAgIEVhcmx5UHVyY2hhc2VBbWVuZGVkKGVhcmx5UHVyY2hhc2VJbmRleCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENoZWNrcyB3aGV0aGVyIGVhcmx5IHB1cmNoYXNlIGlzIGFtZW5kZWQKICAgICAqIEBwYXJhbSBlYXJseVB1cmNoYXNlSW5kZXggSW5kZXggbnVtYmVyIG9mIHRoZSBwdXJjaGFzZQogICAgICovCiAgICBmdW5jdGlvbiBpc0FtZW5kZWRFYXJseVB1cmNoYXNlKHVpbnQyNTYgZWFybHlQdXJjaGFzZUluZGV4KQogICAgICAgIGNvbnN0YW50CiAgICAgICAgbm9FdGhlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYXNzZXJ0KG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKSA+IGVhcmx5UHVyY2hhc2VJbmRleCk7IC8vIEFycmF5IEluZGV4IE91dCBvZiBCb3VuZHMgRXhjZXB0aW9uCgogICAgICAgIGZvciAodWludDI1NiBpOyBpIDwgYW1lbmRlZEVhcmx5UHVyY2hhc2VJbmRleGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChhbWVuZGVkRWFybHlQdXJjaGFzZUluZGV4ZXNbaV0gPT0gZWFybHlQdXJjaGFzZUluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IExvYWRzIGVhcmx5IHB1cmNoYXNlcyBkYXRhIHRvIFN0YXJiYXNlRWFybHlQdXJjaGFzZUFtZW5kbWVudCBjb250cmFjdAogICAgICogQHBhcmFtIHN0YXJiYXNlRWFybHlQdXJjaGFzZUFkZHJlc3MgQWRkcmVzcyBmcm9tIHN0YXJiYXNlIGVhcmx5IHB1cmNoYXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvYWRTdGFyYmFzZUVhcmx5UHVyY2hhc2VzKGFkZHJlc3Mgc3RhcmJhc2VFYXJseVB1cmNoYXNlQWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vRXRoZXIKICAgICAgICBvbmx5T3duZXIKICAgICAgICBvbmx5QmVmb3JlQ3Jvd2RzYWxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhc3NlcnQoc3RhcmJhc2VFYXJseVB1cmNoYXNlQWRkcmVzcyAhPSAwIHx8CiAgICAgICAgICAgIGFkZHJlc3Moc3RhcmJhc2VFYXJseVB1cmNoYXNlKSA9PSAwKTsKCiAgICAgICAgc3RhcmJhc2VFYXJseVB1cmNoYXNlID0gU3RhcmJhc2VFYXJseVB1cmNoYXNlKHN0YXJiYXNlRWFybHlQdXJjaGFzZUFkZHJlc3MpOwogICAgICAgIGFzc2VydChzdGFyYmFzZUVhcmx5UHVyY2hhc2UuZWFybHlQdXJjaGFzZUNsb3NlZEF0KCkgIT0gMCk7IC8vIHRoZSBlYXJseSBwdXJjaGFzZSBtdXN0IGJlIGNsb3NlZAoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IgZnVuY3Rpb24uIEl0IHNldHMgb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gU3RhcmJhc2VFYXJseVB1cmNoYXNlQW1lbmRtZW50KCkgbm9FdGhlciB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgTm9ybWFsaXplcyBlYXJseSBwdXJjaGFzZXMgZGF0YQogICAgICovCiAgICBmdW5jdGlvbiBub3JtYWxpemVkRWFybHlQdXJjaGFzZXMoKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zIChTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZVtdIG5vcm1hbGl6ZWRFUCkKICAgIHsKICAgICAgICB1aW50MjU2IHJhd0VQQ291bnQgPSBudW1iZXJPZlJhd0Vhcmx5UHVyY2hhc2VzKCk7CiAgICAgICAgbm9ybWFsaXplZEVQID0gbmV3IFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlW10oCiAgICAgICAgICAgIHJhd0VQQ291bnQgLSBpbnZhbGlkRWFybHlQdXJjaGFzZUluZGV4ZXMubGVuZ3RoKTsKCiAgICAgICAgdWludDI1NiBub3JtYWxpemVkSWR4OwogICAgICAgIGZvciAodWludDI1NiBpOyBpIDwgcmF3RVBDb3VudDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpc0ludmFsaWRFYXJseVB1cmNoYXNlKGkpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsgICAvLyBpbnZhbGlkIGVhcmx5IHB1cmNoYXNlIHNob3VsZCBiZSBpZ25vcmVkCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlIG1lbW9yeSBlcDsKICAgICAgICAgICAgaWYgKGlzQW1lbmRlZEVhcmx5UHVyY2hhc2UoaSkpIHsKICAgICAgICAgICAgICAgIGVwID0gYW1lbmRlZEVhcmx5UHVyY2hhc2VzW2ldOyAgLy8gYW1lbmRlZCBlYXJseSBwdXJjaGFzZSBzaG91bGQgdGFrZSBhIHByaW9yaXR5CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlcCA9IGdldEVhcmx5UHVyY2hhc2UoaSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vcm1hbGl6ZWRFUFtub3JtYWxpemVkSWR4XSA9IGVwOwogICAgICAgICAgICBub3JtYWxpemVkSWR4Kys7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGZXRjaGVzIGVhcmx5IHB1cmNoYXNlcyBkYXRhCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEVhcmx5UHVyY2hhc2UodWludDI1NiBlYXJseVB1cmNoYXNlSW5kZXgpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIG9ubHlFYXJseVB1cmNoYXNlc0xvYWRlZAogICAgICAgIHJldHVybnMgKFN0YXJiYXNlRWFybHlQdXJjaGFzZS5FYXJseVB1cmNoYXNlKQogICAgewogICAgICAgIHZhciAocHVyY2hhc2VyLCBhbW91bnQsIHB1cmNoYXNlZEF0KSA9CiAgICAgICAgICAgIHN0YXJiYXNlRWFybHlQdXJjaGFzZS5lYXJseVB1cmNoYXNlcyhlYXJseVB1cmNoYXNlSW5kZXgpOwogICAgICAgIHJldHVybiBTdGFyYmFzZUVhcmx5UHVyY2hhc2UuRWFybHlQdXJjaGFzZShwdXJjaGFzZXIsIGFtb3VudCwgcHVyY2hhc2VkQXQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIHJhdyBudW1iZXIgb2YgZWFybHkgcHVyY2hhc2VzCiAgICAgKi8KICAgIGZ1bmN0aW9uIG51bWJlck9mUmF3RWFybHlQdXJjaGFzZXMoKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICBvbmx5RWFybHlQdXJjaGFzZXNMb2FkZWQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBzdGFyYmFzZUVhcmx5UHVyY2hhc2UubnVtYmVyT2ZFYXJseVB1cmNoYXNlcygpOwogICAgfQp9CgovLyEgQ2VydGlmaWVyIGNvbnRyYWN0LgovLyEgQnkgUGFyaXR5IFRlY2hub2xvZ2llcywgMjAxNy4KLy8hIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5jZSAyLgoKY29udHJhY3QgQ2VydGlmaWVyIHsKCWV2ZW50IENvbmZpcm1lZChhZGRyZXNzIGluZGV4ZWQgd2hvKTsKCWV2ZW50IFJldm9rZWQoYWRkcmVzcyBpbmRleGVkIHdobyk7CglmdW5jdGlvbiBjZXJ0aWZpZWQoYWRkcmVzcykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoJZnVuY3Rpb24gZ2V0KGFkZHJlc3MsIHN0cmluZykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpOwoJZnVuY3Rpb24gZ2V0QWRkcmVzcyhhZGRyZXNzLCBzdHJpbmcpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKTsKCWZ1bmN0aW9uIGdldFVpbnQoYWRkcmVzcywgc3RyaW5nKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7Cn0KCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlIGNvbnRyYWN0IC0gU3RhcmJhc2UgY3Jvd2RzYWxlIHRvIGNyZWF0ZSBTVEFSLgogKiBAYXV0aG9yIFN0YXJiYXNlIFBURS4gTFRELiAtIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZWU4NzgwODg4MWFlOWQ5YThmOWM4YzhmOWQ4YmMwOGQ4MSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+CiAqLwpjb250cmFjdCBTdGFyYmFzZUNyb3dkc2FsZSBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgLyoKICAgICAqICBFdmVudHMKICAgICAqLwogICAgZXZlbnQgQ3Jvd2RzYWxlRW5kZWQodWludDI1NiBlbmRlZEF0KTsKICAgIGV2ZW50IFN0YXJiYXNlUHVyY2hhc2VkV2l0aEV0aChhZGRyZXNzIHB1cmNoYXNlciwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgcmF3QW1vdW50LCB1aW50MjU2IGNueUV0aFJhdGUpOwogICAgZXZlbnQgQ255RXRoUmF0ZVVwZGF0ZWQodWludDI1NiBjbnlFdGhSYXRlKTsKICAgIGV2ZW50IENueUJ0Y1JhdGVVcGRhdGVkKHVpbnQyNTYgY255QnRjUmF0ZSk7CiAgICBldmVudCBRdWFsaWZpZWRQYXJ0bmVyQWRkcmVzcyhhZGRyZXNzIHF1YWxpZmllZFBhcnRuZXIpOwoKICAgIC8qKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFN0YXJiYXNlVG9rZW4gcHVibGljIHN0YXJiYXNlVG9rZW47CiAgICBTdGFyYmFzZUVhcmx5UHVyY2hhc2VBbWVuZG1lbnQgcHVibGljIHN0YXJiYXNlRXBBbWVuZG1lbnQ7CiAgICBDZXJ0aWZpZXIgcHVibGljIHBpY29wc0NlcnRpZmllcjsKCiAgICAvKioKICAgICAqICBDb25zdGFudHMKICAgICAqLwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgY3Jvd2RzYWxlVG9rZW5BbW91bnQgPSAxMjUwMDAwMDBlMTg7CiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBlYXJseVB1cmNoYXNlVG9rZW5BbW91bnQgPSA1MDAwMDAwMGUxODsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIE1JTl9JTlZFU1RNRU5UID0gMTsgLy8gbWluIGlzIDEgV2VpCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBNQVhfQ0FQID0gNjcwMDAwMDA7IC8vIGluIENOWS4gYXBwcm94aW1hdGVseSAxME0gVVNELiAoaW5jbHVkZXMgcmFpc2VkIGFtb3VudCBmcm9tIGJvdGggRVAgYW5kIENTKQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBQVVJDSEFTRV9BTU9VTlRfVU5JVCA9ICdDTlknOyAgLy8gQ2hpbmVzZSBZdWFuCgogICAgLyoqCiAgICAgKiBUeXBlcwogICAgICovCiAgICBzdHJ1Y3QgQ3Jvd2RzYWxlUHVyY2hhc2UgewogICAgICAgIGFkZHJlc3MgcHVyY2hhc2VyOwogICAgICAgIHVpbnQyNTYgYW1vdW50OyAgICAgICAgLy8gQ05ZIGJhc2VkIGFtb3VudCB3aXRoIGJvbnVzCiAgICAgICAgdWludDI1NiByYXdBbW91bnQ7ICAgICAvLyBDTlkgYmFzZWQgYW1vdW50IG5vIGJvbnVzCiAgICAgICAgdWludDI1NiBwdXJjaGFzZWRBdDsgICAvLyB0aW1lc3RhbXAKICAgIH0KCiAgICBzdHJ1Y3QgUXVhbGlmaWVkUGFydG5lcnMgewogICAgICAgIHVpbnQyNTYgYW1vdW50Q2FwOwogICAgICAgIHVpbnQyNTYgYW1vdW50UmFpc2VkOwogICAgICAgIGJvb2wgICAgYm9uYUZpZGU7CiAgICAgICAgdWludDI1NiBjb21taXNzaW9uRmVlUGVyY2VudGFnZTsgLy8gZXhhbXBsZSA1IHdpbGwgY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIGFzIDUlCiAgICB9CgogICAgLyoKICAgICAqICBFbnVtcwogICAgICovCiAgICBlbnVtIEJvbnVzTWlsZXN0b25lcyB7CiAgICAgICAgRmlyc3QsCiAgICAgICAgU2Vjb25kLAogICAgICAgIFRoaXJkLAogICAgICAgIEZvdXJ0aCwKICAgICAgICBGaWZ0aAogICAgfQoKICAgIC8vIEluaXRpYWxpemUgYm9udXNNaWxlc3RvbmVzCiAgICBCb251c01pbGVzdG9uZXMgcHVibGljIGJvbnVzTWlsZXN0b25lcyA9IEJvbnVzTWlsZXN0b25lcy5GaXJzdDsKCiAgICAvKioKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIHVpbnQgcHVibGljIG51bU9mRGVsaXZlcmVkQ3Jvd2RzYWxlUHVyY2hhc2VzOyAgLy8gaW5kZXggdG8ga2VlcCB0aGUgbnVtYmVyIG9mIGNyb3dkc2FsZSBwdXJjaGFzZXMgaGF2ZSBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIGJ5IGB3aXRoZHJhd1B1cmNoYXNlZFRva2Vuc2AKICAgIHVpbnQgcHVibGljIG51bU9mRGVsaXZlcmVkRWFybHlQdXJjaGFzZXM7ICAvLyBpbmRleCB0byBrZWVwIHRoZSBudW1iZXIgb2YgZWFybHkgcHVyY2hhc2VzIGhhdmUgYWxyZWFkeSBiZWVuIHByb2Nlc3NlZCBieSBgd2l0aGRyYXdQdXJjaGFzZWRUb2tlbnNgCiAgICB1aW50MjU2IHB1YmxpYyBudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzOyAvLyBpbmRleCB0byBrZWVwIHRoZSBudW1iZXIgb2YgZWFybHkgcHVyY2hhc2VzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gbG9hZGVkIGJ5IGBsb2FkRWFybHlQdXJjaGFzZXNgCgogICAgLy8gZWFybHkgcHVyY2hhc2UKICAgIGFkZHJlc3NbXSBwdWJsaWMgZWFybHlQdXJjaGFzZXJzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZWFybHlQdXJjaGFzZWRBbW91bnRCeTsgLy8gZWFybHkgcHVyY2hhc2VkIGFtb3VudCBpbiBDTlkgcGVyIHB1cmNoYXNlcnMnIGFkZHJlc3MKICAgIGJvb2wgcHVibGljIGVhcmx5UHVyY2hhc2VzTG9hZGVkID0gZmFsc2U7ICAvLyByZXR1cm5zIHdoZXRoZXIgYWxsIGVhcmx5IHB1cmNoYXNlcyBhcmUgbG9hZGVkIGludG8gdGhpcyBjb250cmFjdAogICAgdWludDI1NiBwdWJsaWMgdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzOyAvLyBpbmNsdWRpbmcgMjAlIGJvbnVzCgogICAgLy8gY3Jvd2RzYWxlCiAgICBib29sIHB1YmxpYyBwcmVzYWxlUHVyY2hhc2VzTG9hZGVkID0gZmFsc2U7IC8vIHJldHVybnMgd2hldGhlciBhbGwgcHJlc2FsZSBwdXJjaGFzZXMgYXJlIGxvYWRlZCBpbnRvIHRoaXMgY29udHJhY3QKICAgIHVpbnQyNTYgcHVibGljIG1heENyb3dkc2FsZUNhcDsgICAgIC8vID0gNjdNIENOWSAtICh0b3RhbCByYWlzZWQgYW1vdW50IGZyb20gRVApCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzOyAvLyBpbiBDTlksIGluY2x1ZGluZyBib251c2VzCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzOyAvLyBpbiBDTlkKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gUXVhbGlmaWVkUGFydG5lcnMpIHB1YmxpYyBxdWFsaWZpZWRQYXJ0bmVyczsKICAgIHVpbnQyNTYgcHVibGljIHB1cmNoYXNlU3RhcnRCbG9jazsgIC8vIGNyb3dkc2FsZSBwdXJjaGFzZXMgY2FuIGJlIGFjY2VwdGVkIGZyb20gdGhpcyBibG9jayBudW1iZXIKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0RGF0ZTsKICAgIHVpbnQyNTYgcHVibGljIGVuZGVkQXQ7CiAgICBDcm93ZHNhbGVQdXJjaGFzZVtdIHB1YmxpYyBjcm93ZHNhbGVQdXJjaGFzZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5OyAvLyBjcm93ZHNhbGUgcHVyY2hhc2UgYW1vdW50IGluIENOWSBwZXIgcHVyY2hhc2VycycgYWRkcmVzcwogICAgdWludDI1NiBwdWJsaWMgY255QnRjUmF0ZTsgLy8gdGhpcyByYXRlIHdvbid0IGJlIHVzZWQgZnJvbSBhIHNtYXJ0IGNvbnRyYWN0IGZ1bmN0aW9uIGJ1dCBleHRlcm5hbCBzeXN0ZW0KICAgIHVpbnQyNTYgcHVibGljIGNueUV0aFJhdGU7CgogICAgLy8gYm9udXMgbWlsZXN0b25lcwogICAgdWludDI1NiBwdWJsaWMgZmlyc3RCb251c0VuZHM7CiAgICB1aW50MjU2IHB1YmxpYyBzZWNvbmRCb251c0VuZHM7CiAgICB1aW50MjU2IHB1YmxpYyB0aGlyZEJvbnVzRW5kczsKICAgIHVpbnQyNTYgcHVibGljIGZvdXJ0aEJvbnVzRW5kczsKCiAgICAvLyBhZnRlciB0aGUgY3Jvd2RzYWxlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBudW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeTsgICAgLy8gdGhlIG51bWJlciBvZiB0b2tlbnMgcHVyY2hhc2VkIG9uIHRoZSBjcm93ZHNhbGUgYnkgYSBwdXJjaGFzZXIKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5OyAgICAvLyB0aGUgbnVtYmVyIG9mIHRva2VucyBlYXJseSBwdXJjaGFzZWQgYnkgYSBwdXJjaGFzZXIKCiAgICAvKioKICAgICAqICBNb2RpZmllcnMKICAgICAqLwogICAgbW9kaWZpZXIgbWluSW52ZXN0bWVudCgpIHsKICAgICAgICAvLyBVc2VyIGhhcyB0byBzZW5kIGF0IGxlYXN0IHRoZSBldGhlciB2YWx1ZSBvZiBvbmUgdG9rZW4uCiAgICAgICAgYXNzZXJ0KG1zZy52YWx1ZSA+PSBNSU5fSU5WRVNUTUVOVCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB3aGVuTm90U3RhcnRlZCgpIHsKICAgICAgICBhc3NlcnQoc3RhcnREYXRlID09IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgd2hlbkVuZGVkKCkgewogICAgICAgIGFzc2VydChpc0VuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzQmFsYW5jZSgpIHsKICAgICAgICBhc3NlcnQodGhpcy5iYWxhbmNlID4gMCk7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIHJhdGVJc1NldCh1aW50MjU2IF9yYXRlKSB7CiAgICAgICAgYXNzZXJ0KF9yYXRlICE9IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgd2hlbk5vdEVuZGVkKCkgewogICAgICAgIGFzc2VydCghaXNFbmRlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRva2Vuc05vdERlbGl2ZXJlZCgpIHsKICAgICAgICBhc3NlcnQobnVtT2ZEZWxpdmVyZWRDcm93ZHNhbGVQdXJjaGFzZXMgPT0gMCk7CiAgICAgICAgYXNzZXJ0KG51bU9mRGVsaXZlcmVkRWFybHlQdXJjaGFzZXMgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5RnVuZHJhaXNlcigpIHsKICAgICAgICBhc3NlcnQoYWRkcmVzcyhzdGFyYmFzZVRva2VuKSAhPSAwKTsKICAgICAgICBhc3NlcnQoc3RhcmJhc2VUb2tlbi5pc0Z1bmRyYWlzZXIobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVF1YWxpZmllZFBhcnRuZXIoKSB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmJvbmFGaWRlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlRdWFsaWZpZWRQYXJ0bmVyT1JQaWNvcHNDZXJ0aWZpZWQoKSB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmJvbmFGaWRlIHx8IHBpY29wc0NlcnRpZmllci5jZXJ0aWZpZWQobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDb250cmFjdCBmdW5jdGlvbnMKICAgICAqLwogICAgLyoqCiAgICAgKiBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHNldHMgb3duZXIgYWRkcmVzcyBhbmQKICAgICAqICAgICAgYWRkcmVzcyBvZiBTdGFyYmFzZUVhcmx5UHVyY2hhc2VBbWVuZG1lbnQgY29udHJhY3QuCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VFcEFkZHIgVGhlIGFkZHJlc3MgdGhhdCBob2xkcyB0aGUgZWFybHkgcHVyY2hhc2VycyBTdGFyIHRva2VucwogICAgICogQHBhcmFtIHBpY29wc0NlcnRpZmllckFkZHIgVGhlIGFkZHJlc3Mgb2YgdGhlIFBJQ09QUyBjZXJ0aWZpZXIuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgYWxzbyBodHRwczovL3BpY29wcy5wYXJpdHkuaW8vIy9kZXRhaWxzCiAgICAgKi8KICAgIGZ1bmN0aW9uIFN0YXJiYXNlQ3Jvd2RzYWxlKGFkZHJlc3Mgc3RhcmJhc2VFcEFkZHIsIGFkZHJlc3MgcGljb3BzQ2VydGlmaWVyQWRkcikgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VFcEFkZHIgIT0gMCAmJiBwaWNvcHNDZXJ0aWZpZXJBZGRyICE9IDApOwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBzdGFyYmFzZUVwQW1lbmRtZW50ID0gU3RhcmJhc2VFYXJseVB1cmNoYXNlQW1lbmRtZW50KHN0YXJiYXNlRXBBZGRyKTsKICAgICAgICBwaWNvcHNDZXJ0aWZpZXIgPSBDZXJ0aWZpZXIocGljb3BzQ2VydGlmaWVyQWRkcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZhbGxiYWNrIGFjY2VwdHMgcGF5bWVudCBmb3IgU3RhciB0b2tlbnMgd2l0aCBFdGgKICAgICAqLwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICByZWRpcmVjdFRvUHVyY2hhc2UoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEV4dGVybmFsIGZ1bmN0aW9ucwogICAgICovCgogICAgLyoqCiAgICAgKiBAZGV2IFNldHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3RzJyBhZGRyZXNzZXMgYW5kIHNldCB0aGUgbWF4IGNyb3dkc2FsZSBjYXAKICAgICAqIEBwYXJhbSBzdGFyYmFzZVRva2VuQWRkcmVzcyBUb2tlbiBhZGRyZXNzLgogICAgICogQHBhcmFtIF9wdXJjaGFzZVN0YXJ0QmxvY2sgQmxvY2sgbnVtYmVyIHRvIHN0YXJ0IGNyb3dkc2FsZQogICAgICovCiAgICBmdW5jdGlvbiBzZXR1cChhZGRyZXNzIHN0YXJiYXNlVG9rZW5BZGRyZXNzLCB1aW50MjU2IF9wdXJjaGFzZVN0YXJ0QmxvY2spCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VUb2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKHN0YXJiYXNlVG9rZW4pID09IDApOwogICAgICAgIHN0YXJiYXNlVG9rZW4gPSBBYnN0cmFjdFN0YXJiYXNlVG9rZW4oc3RhcmJhc2VUb2tlbkFkZHJlc3MpOwogICAgICAgIHB1cmNoYXNlU3RhcnRCbG9jayA9IF9wdXJjaGFzZVN0YXJ0QmxvY2s7CgogICAgICAgIC8vIHNldCB0aGUgbWF4IGNhcCBvZiB0aGlzIGNyb3dkc2FsZQogICAgICAgIG1heENyb3dkc2FsZUNhcCA9IE1BWF9DQVAuc3ViKHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlc1dpdGhvdXRCb251cygpKTsKCiAgICAgICAgYXNzZXJ0KG1heENyb3dkc2FsZUNhcCA+IDApOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXJzIHJhaXNlZCBmdW5kcyB0byBjb21wYW55J3Mgd2FsbGV0IGFkZHJlc3MgYXQgYW55IGdpdmVuIHRpbWUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3Rm9yQ29tcGFueSgpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5RnVuZHJhaXNlcgogICAgICAgIGhhc0JhbGFuY2UKICAgIHsKICAgICAgICBhZGRyZXNzIGNvbXBhbnkgPSBzdGFyYmFzZVRva2VuLmNvbXBhbnkoKTsKICAgICAgICByZXF1aXJlKGNvbXBhbnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgY29tcGFueS50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBVcGRhdGUgc3RhcnQgYmxvY2sgTnVtYmVyIGZvciB0aGUgY3Jvd2RzYWxlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZVB1cmNoYXNlU3RhcnRCbG9jayh1aW50MjU2IF9wdXJjaGFzZVN0YXJ0QmxvY2spCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB3aGVuTm90U3RhcnRlZAogICAgICAgIG9ubHlGdW5kcmFpc2VyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBwdXJjaGFzZVN0YXJ0QmxvY2sgPSBfcHVyY2hhc2VTdGFydEJsb2NrOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBVcGRhdGUgdGhlIENOWS9FVEggcmF0ZSB0byByZWNvcmQgcHVyY2hhc2VzIGluIENOWQogICAgICovCiAgICBmdW5jdGlvbiB1cGRhdGVDbnlFdGhSYXRlKHVpbnQyNTYgcmF0ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlGdW5kcmFpc2VyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBjbnlFdGhSYXRlID0gcmF0ZTsKICAgICAgICBDbnlFdGhSYXRlVXBkYXRlZChjbnlFdGhSYXRlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVXBkYXRlIHRoZSBDTlkvQlRDIHJhdGUgdG8gcmVjb3JkIHB1cmNoYXNlcyBpbiBDTlkKICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlQ255QnRjUmF0ZSh1aW50MjU2IHJhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5RnVuZHJhaXNlcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgY255QnRjUmF0ZSA9IHJhdGU7CiAgICAgICAgQ255QnRjUmF0ZVVwZGF0ZWQoY255QnRjUmF0ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93IGZvciB0aGUgcG9zc2liaWxpdHkgZm9yIGNvbnRyYWN0IG93bmVyIHRvIHN0YXJ0IGNyb3dkc2FsZQogICAgICovCiAgICBmdW5jdGlvbiBvd25lclN0YXJ0c0Nyb3dkc2FsZSh1aW50MjU2IHRpbWVzdGFtcCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHdoZW5Ob3RTdGFydGVkCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgYXNzZXJ0KGJsb2NrLm51bWJlciA+PSBwdXJjaGFzZVN0YXJ0QmxvY2spOyAgIC8vIHRoaXMgc2hvdWxkIGJlIGFmdGVyIHRoZSBjcm93ZHNhbGUgc3RhcnQgYmxvY2sKICAgICAgICBzdGFydENyb3dkc2FsZSh0aW1lc3RhbXApOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBFbmRzIGNyb3dkc2FsZQogICAgICogICAgICBUaGlzIG1heSBiZSBleGVjdXRlZCBieSBhbiBvd25lciBpZiB0aGUgcmFpc2VkIGZ1bmRzIGRpZCBub3QgcmVhY2ggdGhlIG1hcCBjYXAKICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGltZXN0YW1wIGF0IHRoZSBjcm93ZHNhbGUgZW5kZWQKICAgICAqLwogICAgZnVuY3Rpb24gZW5kQ3Jvd2RzYWxlKHVpbnQyNTYgdGltZXN0YW1wKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgYXNzZXJ0KHRpbWVzdGFtcCA+IDAgJiYgdGltZXN0YW1wIDw9IG5vdyk7CiAgICAgICAgYXNzZXJ0KGJsb2NrLm51bWJlciA+PSBwdXJjaGFzZVN0YXJ0QmxvY2sgJiYgZW5kZWRBdCA9PSAwKTsgICAvLyBjYW5ub3QgZW5kIGJlZm9yZSBpdCBzdGFydHMgYW5kIG92ZXJ3cml0aW5nIHRpbWUgaXMgbm90IHBlcm1pdHRlZAogICAgICAgIGVuZGVkQXQgPSB0aW1lc3RhbXA7CiAgICAgICAgQ3Jvd2RzYWxlRW5kZWQoZW5kZWRBdCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEVuZHMgY3Jvd2RzYWxlCiAgICAgKiAgICAgIFRoaXMgbWF5IGJlIGV4ZWN1dGVkIGJ5IHB1cmNoYXNlV2l0aEV0aCB3aGVuIHRoZSByYWlzZWQgZnVuZHMgcmVhY2ggdGhlIG1hcCBjYXAKICAgICAqLwogICAgZnVuY3Rpb24gZW5kQ3Jvd2RzYWxlKCkgaW50ZXJuYWwgewogICAgICAgIGFzc2VydChibG9jay5udW1iZXIgPj0gcHVyY2hhc2VTdGFydEJsb2NrICYmIGVuZGVkQXQgPT0gMCk7CiAgICAgICAgZW5kZWRBdCA9IG5vdzsKICAgICAgICBDcm93ZHNhbGVFbmRlZChlbmRlZEF0KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRGVsaXZlciB0b2tlbnMgdG8gcHVyY2hhc2VycyBhY2NvcmRpbmcgdG8gdGhlaXIgcHVyY2hhc2UgYW1vdW50IGluIENOWQogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1B1cmNoYXNlZFRva2VucygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB3aGVuRW5kZWQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGFzc2VydChlYXJseVB1cmNoYXNlc0xvYWRlZCk7CiAgICAgICAgYXNzZXJ0KGFkZHJlc3Moc3RhcmJhc2VUb2tlbikgIT0gMCk7CgogICAgICAgIC8qCiAgICAgICAgICog4oCcVmFsdWXigJ0gcmVmZXJzIHRvIHRoZSBjb250cmlidXRpb24gb2YgdGhlIFVzZXI6CiAgICAgICAgICogIHtjcm93ZHNhbGVfcHVyY2hhc2VyX3Rva2VuX2Ftb3VudH0gPQogICAgICAgICAqICB7Y3Jvd2RzYWxlX3Rva2VuX2Ftb3VudH0gKiB7Y3Jvd2RzYWxlUHVyY2hhc2VfdmFsdWV9IC8ge2Vhcmx5cHVyY2hhc2VfdmFsdWV9ICsge2Nyb3dkc2FsZV92YWx1ZX0uCiAgICAgICAgICoKICAgICAgICAgKiBFeGFtcGxlOiBJZiBhIFVzZXIgY29udHJpYnV0ZXMgZHVyaW5nIHRoZSBDb250cmlidXRpb24gUGVyaW9kIDEwMCBDTlkgKGluY2x1ZGluZyBhcHBsaWNhYmxlCiAgICAgICAgICogQm9udXMsIGlmIGFueSkgYW5kIHRoZSB0b3RhbCBhbW91bnQgZWFybHkgcHVyY2hhc2VzIGFtb3VudHMgdG8gNuKAmTAwMOKAmTAwMCBDTlkKICAgICAgICAgKiBhbmQgdG90YWwgYW1vdW50IHJhaXNlZCBkdXJpbmcgdGhlIENvbnRyaWJ1dGlvbiBQZXJpb2QgaXMgMzDigJkwMDDigJkwMDAsIHRoZW4gaGUgd2lsbCBnZXQKICAgICAgICAgKiAzNDcuMjIgU1RBUiA9IDEyNeKAmTAwMOKAmTAwMCBTVEFSICogMTAwIENOWSAvIDMw4oCZMDAw4oCZMDAwIENOWSArIDbigJkwMDDigJkwMDAgQ05ZLgogICAgICAgICovCgogICAgICAgIGlmIChjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGNyb3dkc2FsZVB1cmNoYXNlVmFsdWUgPSBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdOwogICAgICAgICAgICBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W21zZy5zZW5kZXJdID0gMDsKCiAgICAgICAgICAgIHVpbnQyNTYgdG9rZW5Db3VudCA9CiAgICAgICAgICAgICAgICBTYWZlTWF0aC5tdWwoY3Jvd2RzYWxlVG9rZW5BbW91bnQsIGNyb3dkc2FsZVB1cmNoYXNlVmFsdWUpIC8KICAgICAgICAgICAgICAgIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKTsKCiAgICAgICAgICAgIG51bU9mUHVyY2hhc2VkVG9rZW5zT25Dc0J5W21zZy5zZW5kZXJdID0KICAgICAgICAgICAgICAgIFNhZmVNYXRoLmFkZChudW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeVttc2cuc2VuZGVyXSwgdG9rZW5Db3VudCk7CiAgICAgICAgICAgIGFzc2VydChzdGFyYmFzZVRva2VuLmFsbG9jYXRlVG9Dcm93ZHNhbGVQdXJjaGFzZXIobXNnLnNlbmRlciwgdG9rZW5Db3VudCkpOwogICAgICAgICAgICBudW1PZkRlbGl2ZXJlZENyb3dkc2FsZVB1cmNoYXNlcysrOwogICAgICAgIH0KCiAgICAgICAgLyoKICAgICAgICAgKiDigJxWYWx1ZeKAnSByZWZlcnMgdG8gdGhlIGNvbnRyaWJ1dGlvbiBvZiB0aGUgVXNlcjoKICAgICAgICAgKiB7ZWFybHlwdXJjaGFzZXJfdG9rZW5fYW1vdW50fSA9CiAgICAgICAgICoge2Vhcmx5cHVyY2hhc2VyX3Rva2VuX2Ftb3VudH0gKiAoe2Vhcmx5cHVyY2hhc2VfdmFsdWV9IC8ge3RvdGFsX2Vhcmx5cHVyY2hhc2VfdmFsdWV9KQogICAgICAgICAqICArIHtjcm93ZHNhbGVfdG9rZW5fYW1vdW50fSAqICh7ZWFybHlwdXJjaGFzZV92YWx1ZX0gLyB7ZWFybHlwdXJjaGFzZV92YWx1ZX0gKyB7Y3Jvd2RzYWxlX3ZhbHVlfSkuCiAgICAgICAgICoKICAgICAgICAgKiBFeGFtcGxlOiBJZiBhbiBFYXJseSBQdXJjaGFzZXIgY29udHJpYnV0ZXMgMTAwIENOWSAoaW5jbHVkaW5nIEJvbnVzIG9mIDIwJSkgYW5kIHRoZQogICAgICAgICAqIHRvdGFsIGFtb3VudCBvZiBlYXJseSBwdXJjaGFzZXMgYW1vdW50cyB0byA24oCZMDAw4oCZMDAwIENOWSBhbmQgdGhlIHRvdGFsIGFtb3VudCByYWlzZWQKICAgICAgICAgKiBkdXJpbmcgdGhlIENvbnRyaWJ1dGlvbiBQZXJpb2QgaXMgMzDigJkwMDDigJkwMDAgQ05ZLCB0aGVuIGhlIHdpbGwgZ2V0IDExODAuNTUgU1RBUiA9CiAgICAgICAgICogNTDigJkwMDDigJkwMDAgU1RBUiAqIDEwMCBDTlkgLyA24oCZMDAw4oCZMDAwIENOWSArIDEyNeKAmTAwMOKAmTAwMCBTVEFSICogMTAwIENOWSAvCiAgICAgICAgICogMzDigJkwMDDigJkwMDAgQ05ZICsgNuKAmTAwMOKAmTAwMCBDTlkKICAgICAgICAgKi8KCiAgICAgICAgaWYgKGVhcmx5UHVyY2hhc2VkQW1vdW50QnlbbXNnLnNlbmRlcl0gPiAwKSB7ICAvLyBza2lwIGlmIGlzIG5vdCBhbiBlYXJseSBwdXJjaGFzZXIKICAgICAgICAgICAgdWludDI1NiBlYXJseVB1cmNoYXNlclB1cmNoYXNlVmFsdWUgPSBlYXJseVB1cmNoYXNlZEFtb3VudEJ5W21zZy5zZW5kZXJdOwogICAgICAgICAgICBlYXJseVB1cmNoYXNlZEFtb3VudEJ5W21zZy5zZW5kZXJdID0gMDsKCiAgICAgICAgICAgIHVpbnQyNTYgZXBUb2tlbkNhbGN1bGF0aW9uRnJvbUVQVG9rZW5BbW91bnQgPSBTYWZlTWF0aC5tdWwoZWFybHlQdXJjaGFzZVRva2VuQW1vdW50LCBlYXJseVB1cmNoYXNlclB1cmNoYXNlVmFsdWUpIC8gdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzOwoKICAgICAgICAgICAgdWludDI1NiBlcFRva2VuQ2FsY3VsYXRpb25Gcm9tQ3Jvd2RzYWxlVG9rZW5BbW91bnQgPSBTYWZlTWF0aC5tdWwoY3Jvd2RzYWxlVG9rZW5BbW91bnQsIGVhcmx5UHVyY2hhc2VyUHVyY2hhc2VWYWx1ZSkgLyB0b3RhbFJhaXNlZEFtb3VudEluQ255KCk7CgogICAgICAgICAgICB1aW50MjU2IGVwVG9rZW5Db3VudCA9IFNhZmVNYXRoLmFkZChlcFRva2VuQ2FsY3VsYXRpb25Gcm9tRVBUb2tlbkFtb3VudCwgZXBUb2tlbkNhbGN1bGF0aW9uRnJvbUNyb3dkc2FsZVRva2VuQW1vdW50KTsKCiAgICAgICAgICAgIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5W21zZy5zZW5kZXJdID0gU2FmZU1hdGguYWRkKG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5W21zZy5zZW5kZXJdLCBlcFRva2VuQ291bnQpOwogICAgICAgICAgICBhc3NlcnQoc3RhcmJhc2VUb2tlbi5hbGxvY2F0ZVRvQ3Jvd2RzYWxlUHVyY2hhc2VyKG1zZy5zZW5kZXIsIGVwVG9rZW5Db3VudCkpOwogICAgICAgICAgICBudW1PZkRlbGl2ZXJlZEVhcmx5UHVyY2hhc2VzKys7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgTG9hZCBlYXJseSBwdXJjaGFzZXMgZnJvbSB0aGUgY29udHJhY3Qga2VlcHMgdHJhY2sgb2YgdGhlbQogICAgICovCiAgICBmdW5jdGlvbiBsb2FkRWFybHlQdXJjaGFzZXMoKSBleHRlcm5hbCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChlYXJseVB1cmNoYXNlc0xvYWRlZCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgIC8vIGFsbCBFUHMgaGF2ZSBhbHJlYWR5IGJlZW4gbG9hZGVkCiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IG51bU9mT3JpZ0VwID0gc3RhcmJhc2VFcEFtZW5kbWVudAogICAgICAgICAgICAuc3RhcmJhc2VFYXJseVB1cmNoYXNlKCkKICAgICAgICAgICAgLm51bWJlck9mRWFybHlQdXJjaGFzZXMoKTsKCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSBudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzOyBpIDwgbnVtT2ZPcmlnRXAgJiYgbXNnLmdhcyA+IDIwMDAwMDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChzdGFyYmFzZUVwQW1lbmRtZW50LmlzSW52YWxpZEVhcmx5UHVyY2hhc2UoaSkpIHsKICAgICAgICAgICAgICAgIG51bU9mTG9hZGVkRWFybHlQdXJjaGFzZXMgPSBTYWZlTWF0aC5hZGQobnVtT2ZMb2FkZWRFYXJseVB1cmNoYXNlcywgMSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgKHB1cmNoYXNlciwgYW1vdW50LCkgPQogICAgICAgICAgICAgICAgc3RhcmJhc2VFcEFtZW5kbWVudC5pc0FtZW5kZWRFYXJseVB1cmNoYXNlKGkpCiAgICAgICAgICAgICAgICA/IHN0YXJiYXNlRXBBbWVuZG1lbnQuYW1lbmRlZEVhcmx5UHVyY2hhc2VzKGkpCiAgICAgICAgICAgICAgICA6IHN0YXJiYXNlRXBBbWVuZG1lbnQuZWFybHlQdXJjaGFzZXMoaSk7CiAgICAgICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAoZWFybHlQdXJjaGFzZWRBbW91bnRCeVtwdXJjaGFzZXJdID09IDApIHsKICAgICAgICAgICAgICAgICAgICBlYXJseVB1cmNoYXNlcnMucHVzaChwdXJjaGFzZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gZWFjaCBlYXJseSBwdXJjaGFzZXIgcmVjZWl2ZXMgMjAlIGJvbnVzCiAgICAgICAgICAgICAgICB1aW50MjU2IGJvbnVzID0gU2FmZU1hdGgubXVsKGFtb3VudCwgMjApIC8gMTAwOwogICAgICAgICAgICAgICAgdWludDI1NiBhbW91bnRXaXRoQm9udXMgPSBTYWZlTWF0aC5hZGQoYW1vdW50LCBib251cyk7CgogICAgICAgICAgICAgICAgZWFybHlQdXJjaGFzZWRBbW91bnRCeVtwdXJjaGFzZXJdID0gU2FmZU1hdGguYWRkKGVhcmx5UHVyY2hhc2VkQW1vdW50QnlbcHVyY2hhc2VyXSwgYW1vdW50V2l0aEJvbnVzKTsKICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlcyA9IHRvdGFsQW1vdW50T2ZFYXJseVB1cmNoYXNlcy5hZGQoYW1vdW50V2l0aEJvbnVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbnVtT2ZMb2FkZWRFYXJseVB1cmNoYXNlcyA9IFNhZmVNYXRoLmFkZChudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzLCAxKTsKICAgICAgICB9CgogICAgICAgIGFzc2VydChudW1PZkxvYWRlZEVhcmx5UHVyY2hhc2VzIDw9IG51bU9mT3JpZ0VwKTsKICAgICAgICBpZiAobnVtT2ZMb2FkZWRFYXJseVB1cmNoYXNlcyA9PSBudW1PZk9yaWdFcCkgewogICAgICAgICAgICBlYXJseVB1cmNoYXNlc0xvYWRlZCA9IHRydWU7ICAgIC8vIGVuYWJsZSB0aGUgZmxhZwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgTG9hZCBwcmVzYWxlIHB1cmNoYXNlcyBmcm9tIHRoZSBjb250cmFjdCBrZWVwcyB0cmFjayBvZiB0aGVtCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VDcm93ZHNhbGVQcmVzYWxlIFN0YXJiYXNlIHByZXNhbGUgY29udHJhY3QgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiBsb2FkUHJlc2FsZVB1cmNoYXNlcyhhZGRyZXNzIHN0YXJiYXNlQ3Jvd2RzYWxlUHJlc2FsZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHdoZW5Ob3RFbmRlZAogICAgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VDcm93ZHNhbGVQcmVzYWxlICE9IDApOwogICAgICAgIHJlcXVpcmUoIXByZXNhbGVQdXJjaGFzZXNMb2FkZWQpOwogICAgICAgIFN0YXJiYXNlQ3Jvd2RzYWxlIHByZXNhbGUgPSBTdGFyYmFzZUNyb3dkc2FsZShzdGFyYmFzZUNyb3dkc2FsZVByZXNhbGUpOwogICAgICAgIGZvciAodWludCBpOyBpIDwgcHJlc2FsZS5udW1PZlB1cmNoYXNlcygpOyBpKyspIHsKICAgICAgICAgICAgdmFyIChwdXJjaGFzZXIsIGFtb3VudCwgcmF3QW1vdW50LCBwdXJjaGFzZWRBdCkgPQogICAgICAgICAgICAgICAgcHJlc2FsZS5jcm93ZHNhbGVQdXJjaGFzZXMoaSk7ICAvLyBwcmVzYWxlIHB1cmNoYXNlCiAgICAgICAgICAgIGNyb3dkc2FsZVB1cmNoYXNlcy5wdXNoKENyb3dkc2FsZVB1cmNoYXNlKHB1cmNoYXNlciwgYW1vdW50LCByYXdBbW91bnQsIHB1cmNoYXNlZEF0KSk7CgogICAgICAgICAgICAvLyBJbmNyZWFzZSB0aGUgc3VtcwogICAgICAgICAgICBjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W3B1cmNoYXNlcl0gPSBTYWZlTWF0aC5hZGQoY3Jvd2RzYWxlUHVyY2hhc2VBbW91bnRCeVtwdXJjaGFzZXJdLCBhbW91bnQpOwogICAgICAgICAgICB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzID0gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlcy5hZGQoYW1vdW50KTsKICAgICAgICAgICAgdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cyA9IHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXNXaXRob3V0Qm9udXMuYWRkKHJhd0Ftb3VudCk7CiAgICAgICAgfQogICAgICAgIHByZXNhbGVQdXJjaGFzZXNMb2FkZWQgPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICAqIEBkZXYgU2V0IHF1YWxpZmllZCBjcm93ZHNhbGUgcGFydG5lciBpLmUuIEJpdGNvaW4gU3Vpc3NlIGFkZHJlc3MKICAgICAgKiBAcGFyYW0gX3F1YWxpZmllZFBhcnRuZXIgQWRkcmVzcyBvZiB0aGUgcXVhbGlmaWVkIHBhcnRuZXIgdGhhdCBjYW4gcHVyY2hhc2UgZHVyaW5nIGNyb3dkc2FsZQogICAgICAqIEBwYXJhbSBfYW1vdW50Q2FwIEV0aGVyIHZhbHVlIHdoaWNoIHBhcnRuZXIgaXMgYWJsZSB0byBjb250cmlidXRlCiAgICAgICogQHBhcmFtIF9jb21taXNzaW9uRmVlUGVyY2VudGFnZSBJbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyB0aGUgZmVlIHRvIHBheSBxdWFsaWZpZWQgcGFydG5lciA1IGlzIDUlCiAgICAgICovCiAgICBmdW5jdGlvbiBzZXRRdWFsaWZpZWRQYXJ0bmVyKGFkZHJlc3MgX3F1YWxpZmllZFBhcnRuZXIsIHVpbnQyNTYgX2Ftb3VudENhcCwgdWludDI1NiBfY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQoIXF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmJvbmFGaWRlID0gdHJ1ZTsKICAgICAgICBxdWFsaWZpZWRQYXJ0bmVyc1tfcXVhbGlmaWVkUGFydG5lcl0uYW1vdW50Q2FwID0gX2Ftb3VudENhcDsKICAgICAgICBxdWFsaWZpZWRQYXJ0bmVyc1tfcXVhbGlmaWVkUGFydG5lcl0uY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UgPSBfY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2U7CiAgICAgICAgUXVhbGlmaWVkUGFydG5lckFkZHJlc3MoX3F1YWxpZmllZFBhcnRuZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZW1vdmUgYWRkcmVzcyBmcm9tIHF1YWxpZmllZCBwYXJ0bmVycyBsaXN0LgogICAgICogQHBhcmFtIF9xdWFsaWZpZWRQYXJ0bmVyIEFkZHJlc3MgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LgogICAgICovCiAgICBmdW5jdGlvbiB1bmxpc3RRdWFsaWZpZWRQYXJ0bmVyKGFkZHJlc3MgX3F1YWxpZmllZFBhcnRuZXIpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmJvbmFGaWRlID0gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFVwZGF0ZSB3aGl0ZWxpc3RlZCBhZGRyZXNzIGFtb3VudCBhbGxvd2VkIHRvIHJhaXNlIGR1cmluZyB0aGUgcHJlc2FsZS4KICAgICAqIEBwYXJhbSBfcXVhbGlmaWVkUGFydG5lciBRdWFsaWZpZWQgUGFydG5lciBhZGRyZXNzIHRvIGJlIHVwZGF0ZWQuCiAgICAgKiBAcGFyYW0gX2Ftb3VudENhcCBBbW91bnQgdGhhdCB0aGUgYWRkcmVzcyBpcyBhYmxlIHRvIHJhaXNlIGR1cmluZyB0aGUgcHJlc2FsZS4KICAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlUXVhbGlmaWVkUGFydG5lckNhcEFtb3VudChhZGRyZXNzIF9xdWFsaWZpZWRQYXJ0bmVyLCB1aW50MjU2IF9hbW91bnRDYXApIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYXNzZXJ0KHF1YWxpZmllZFBhcnRuZXJzW19xdWFsaWZpZWRQYXJ0bmVyXS5ib25hRmlkZSk7CiAgICAgICAgcXVhbGlmaWVkUGFydG5lcnNbX3F1YWxpZmllZFBhcnRuZXJdLmFtb3VudENhcCA9IF9hbW91bnRDYXA7CiAgICB9CgogICAgLyoqCiAgICAgKiBQdWJsaWMgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBib29sZWFuIGZvciB3aGV0aGVyIGNyb3dkc2FsZSBoYXMgZW5kZWQKICAgICAqLwogICAgZnVuY3Rpb24gaXNFbmRlZCgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChlbmRlZEF0ID4gMCAmJiBlbmRlZEF0IDw9IG5vdyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHB1cmNoYXNlcyB0byBkYXRlLgogICAgICovCiAgICBmdW5jdGlvbiBudW1PZlB1cmNoYXNlcygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGNyb3dkc2FsZVB1cmNoYXNlcy5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgdG90YWwgcmFpc2VkIGFtb3VudCBpbiBDTlkgKGluY2x1ZGVzIEVQKSBhbmQgYm9udXNlcwogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbFJhaXNlZEFtb3VudEluQ255KCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzLmFkZCh0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0b3RhbCBhbW91bnQgb2YgZWFybHkgcHVyY2hhc2VzIGluIENOWSBhbmQgYm9udXNlcwogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNXaXRoQm9udXMoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICByZXR1cm4gc3RhcmJhc2VFcEFtZW5kbWVudC50b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKS5tdWwoMTIwKS5kaXYoMTAwKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0b3RhbCBhbW91bnQgb2YgZWFybHkgcHVyY2hhc2VzIGluIENOWQogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXNXaXRob3V0Qm9udXMoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICByZXR1cm4gc3RhcmJhc2VFcEFtZW5kbWVudC50b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHF1YWxpZmllZCBjcm93ZHNhbGUgcGFydG5lciB0byBwdXJjaGFzZSBTdGFyIFRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBwdXJjaGFzZUFzUXVhbGlmaWVkUGFydG5lcigpCiAgICAgICAgcGF5YWJsZQogICAgICAgIHB1YmxpYwogICAgICAgIHJhdGVJc1NldChjbnlFdGhSYXRlKQogICAgICAgIG9ubHlRdWFsaWZpZWRQYXJ0bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmFtb3VudFJhaXNlZCA9IFNhZmVNYXRoLmFkZChtc2cudmFsdWUsIHF1YWxpZmllZFBhcnRuZXJzW21zZy5zZW5kZXJdLmFtb3VudFJhaXNlZCk7CgogICAgICAgIGFzc2VydChxdWFsaWZpZWRQYXJ0bmVyc1ttc2cuc2VuZGVyXS5hbW91bnRSYWlzZWQgPD0gcXVhbGlmaWVkUGFydG5lcnNbbXNnLnNlbmRlcl0uYW1vdW50Q2FwKTsKCiAgICAgICAgdWludDI1NiByYXdBbW91bnQgPSBTYWZlTWF0aC5tdWwobXNnLnZhbHVlLCBjbnlFdGhSYXRlKSAvIDFlMTg7CiAgICAgICAgcmVjb3JkUHVyY2hhc2UobXNnLnNlbmRlciwgcmF3QW1vdW50LCBub3cpOwoKICAgICAgICBpZiAocXVhbGlmaWVkUGFydG5lcnNbbXNnLnNlbmRlcl0uY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2UgPiAwKSB7CiAgICAgICAgICAgIHNlbmRRdWFsaWZpZWRQYXJ0bmVyQ29tbWlzc2lvbkZlZShtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB1c2VyIHRvIHB1cmNoYXNlIFNUQVIgdG9rZW5zIHdpdGggRXRoZXIKICAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VXaXRoRXRoKCkKICAgICAgICBwYXlhYmxlCiAgICAgICAgcHVibGljCiAgICAgICAgbWluSW52ZXN0bWVudAogICAgICAgIHdoZW5Ob3RFbmRlZAogICAgICAgIHJhdGVJc1NldChjbnlFdGhSYXRlKQogICAgICAgIG9ubHlRdWFsaWZpZWRQYXJ0bmVyT1JQaWNvcHNDZXJ0aWZpZWQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUocHVyY2hhc2VTdGFydEJsb2NrID4gMCAmJiBibG9jay5udW1iZXIgPj0gcHVyY2hhc2VTdGFydEJsb2NrKTsKCiAgICAgICAgaWYgKHN0YXJ0RGF0ZSA9PSAwKSB7CiAgICAgICAgICAgIHN0YXJ0Q3Jvd2RzYWxlKGJsb2NrLnRpbWVzdGFtcCk7CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHJhd0Ftb3VudCA9IFNhZmVNYXRoLm11bChtc2cudmFsdWUsIGNueUV0aFJhdGUpIC8gMWUxODsKICAgICAgICByZWNvcmRQdXJjaGFzZShtc2cuc2VuZGVyLCByYXdBbW91bnQsIG5vdyk7CgogICAgICAgIGlmICh0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzID49IG1heENyb3dkc2FsZUNhcCkgewogICAgICAgICAgICBlbmRDcm93ZHNhbGUoKTsgLy8gZW5kcyB0aGlzIGNyb3dkc2FsZSBhdXRvbWF0aWNhbGx5CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEludGVybmFsIGZ1bmN0aW9ucwogICAgICovCgogICAgLyoqCiAgICAgKiBAZGV2IEluaXRpYWxpemVzIFN0YXJiYXNlIGNyb3dkc2FsZQogICAgICovCiAgICBmdW5jdGlvbiBzdGFydENyb3dkc2FsZSh1aW50MjU2IHRpbWVzdGFtcCkgaW50ZXJuYWwgewogICAgICAgIHN0YXJ0RGF0ZSA9IHRpbWVzdGFtcDsKICAgICAgICB1aW50MjU2IHByZXNhbGVBbW91bnQgPSB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzOwogICAgICAgIGlmIChtYXhDcm93ZHNhbGVDYXAgPiBwcmVzYWxlQW1vdW50KSB7CiAgICAgICAgICAgIHVpbnQyNTYgbWFpblNhbGVDYXAgPSBtYXhDcm93ZHNhbGVDYXAuc3ViKHByZXNhbGVBbW91bnQpOwogICAgICAgICAgICB1aW50MjU2IHR3ZW50eVBlcmNlbnRPZkNyb3dkc2FsZVB1cmNoYXNlID0gbWFpblNhbGVDYXAubXVsKDIwKS5kaXYoMTAwKTsKCiAgICAgICAgICAgIC8vIHNldCB0b2tlbiBib251cyBtaWxlc3RvbmVzIGluIGNueSB0b3RhbCBjcm93ZHNhbGUgcHVyY2hhc2UKICAgICAgICAgICAgZmlyc3RCb251c0VuZHMgPSAgdHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2U7CiAgICAgICAgICAgIHNlY29uZEJvbnVzRW5kcyA9IGZpcnN0Qm9udXNFbmRzLmFkZCh0d2VudHlQZXJjZW50T2ZDcm93ZHNhbGVQdXJjaGFzZSk7CiAgICAgICAgICAgIHRoaXJkQm9udXNFbmRzID0gIHNlY29uZEJvbnVzRW5kcy5hZGQodHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2UpOwogICAgICAgICAgICBmb3VydGhCb251c0VuZHMgPSB0aGlyZEJvbnVzRW5kcy5hZGQodHdlbnR5UGVyY2VudE9mQ3Jvd2RzYWxlUHVyY2hhc2UpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWJzdHJhY3QgcmVjb3JkIG9mIGEgcHVyY2hhc2UgdG8gVG9rZW5zCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIEFkZHJlc3Mgb2YgdGhlIGJ1eWVyCiAgICAgKiBAcGFyYW0gcmF3QW1vdW50IEFtb3VudCBpbiBDTlkgYXMgcGVyIHRoZSBDTlkvRVRIIHJhdGUgdXNlZAogICAgICogQHBhcmFtIHRpbWVzdGFtcCBUaW1lc3RhbXAgYXQgdGhlIHB1cmNoYXNlIG1hZGUKICAgICAqLwogICAgZnVuY3Rpb24gcmVjb3JkUHVyY2hhc2UoCiAgICAgICAgYWRkcmVzcyBwdXJjaGFzZXIsCiAgICAgICAgdWludDI1NiByYXdBbW91bnQsCiAgICAgICAgdWludDI1NiB0aW1lc3RhbXAKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnModWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgYW1vdW50ID0gcmF3QW1vdW50OyAvLyBhbW91bnQgdG8gY2hlY2sgcmVhY2ggb2YgbWF4IGNhcC4gaXQgZG9lcyBub3QgY2FyZSBmb3IgYm9udXMgdG9rZW5zIGhlcmUKCiAgICAgICAgLy8gcHJlc2FsZSB0cmFuc2ZlcnMgd2hpY2ggb2NjdXJzIGJlZm9yZSB0aGUgY3Jvd2RzYWxlIGlnbm9yZXMgdGhlIGNyb3dkc2FsZSBoYXJkIGNhcAogICAgICAgIGlmIChibG9jay5udW1iZXIgPj0gcHVyY2hhc2VTdGFydEJsb2NrKSB7CiAgICAgICAgICAgIHJlcXVpcmUodG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cyA8IG1heENyb3dkc2FsZUNhcCk7ICAgLy8gY2hlY2sgaWYgdGhlIGFtb3VudCBoYXMgYWxyZWFkeSByZWFjaGVkIHRoZSBjYXAKCiAgICAgICAgICAgIHVpbnQyNTYgY3Jvd2RzYWxlVG90YWxBbW91bnRBZnRlclB1cmNoYXNlID0KICAgICAgICAgICAgICAgIFNhZmVNYXRoLmFkZCh0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzLCBhbW91bnQpOwoKICAgICAgICAgICAgLy8gY2hlY2sgd2hldGhlciBwdXJjaGFzZSBnb2VzIG92ZXIgdGhlIGNhcCBhbmQgc2VuZCB0aGUgZGlmZmVyZW5jZSBiYWNrIHRvIHRoZSBwdXJjaGFzZXIuCiAgICAgICAgICAgIGlmIChjcm93ZHNhbGVUb3RhbEFtb3VudEFmdGVyUHVyY2hhc2UgPiBtYXhDcm93ZHNhbGVDYXApIHsKICAgICAgICAgICAgICB1aW50MjU2IGRpZmZlcmVuY2UgPSBTYWZlTWF0aC5zdWIoY3Jvd2RzYWxlVG90YWxBbW91bnRBZnRlclB1cmNoYXNlLCBtYXhDcm93ZHNhbGVDYXApOwogICAgICAgICAgICAgIHVpbnQyNTYgZXRoVmFsdWVUb1JldHVybiA9IFNhZmVNYXRoLm11bChkaWZmZXJlbmNlLCAxZTE4KSAvIGNueUV0aFJhdGU7CiAgICAgICAgICAgICAgcHVyY2hhc2VyLnRyYW5zZmVyKGV0aFZhbHVlVG9SZXR1cm4pOwogICAgICAgICAgICAgIGFtb3VudCA9IFNhZmVNYXRoLnN1YihhbW91bnQsIGRpZmZlcmVuY2UpOwogICAgICAgICAgICAgIHJhd0Ftb3VudCA9IGFtb3VudDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYW1vdW50ID0gZ2V0Qm9udXNBbW91bnRDYWxjdWxhdGlvbihhbW91bnQpOyAvLyBhdCB0aGlzIHBvaW50IGFtb3VudCBib251cyBpcyBjYWxjdWxhdGVkCgogICAgICAgIENyb3dkc2FsZVB1cmNoYXNlIG1lbW9yeSBwdXJjaGFzZSA9IENyb3dkc2FsZVB1cmNoYXNlKHB1cmNoYXNlciwgYW1vdW50LCByYXdBbW91bnQsIHRpbWVzdGFtcCk7CiAgICAgICAgY3Jvd2RzYWxlUHVyY2hhc2VzLnB1c2gocHVyY2hhc2UpOwogICAgICAgIFN0YXJiYXNlUHVyY2hhc2VkV2l0aEV0aChtc2cuc2VuZGVyLCBhbW91bnQsIHJhd0Ftb3VudCwgY255RXRoUmF0ZSk7CiAgICAgICAgY3Jvd2RzYWxlUHVyY2hhc2VBbW91bnRCeVtwdXJjaGFzZXJdID0gU2FmZU1hdGguYWRkKGNyb3dkc2FsZVB1cmNoYXNlQW1vdW50QnlbcHVyY2hhc2VyXSwgYW1vdW50KTsKICAgICAgICB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzID0gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlcy5hZGQoYW1vdW50KTsKICAgICAgICB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzID0gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cy5hZGQocmF3QW1vdW50KTsKICAgICAgICByZXR1cm4gYW1vdW50OwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDYWxjdWxhdGVzIGFtb3VudCB3aXRoIGJvbnVzIGZvciBib251cyBtaWxlc3RvbmVzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUJvbnVzCiAgICAgICAgKAogICAgICAgICAgICBCb251c01pbGVzdG9uZXMgbmV4dE1pbGVzdG9uZSwKICAgICAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgICAgIHVpbnQyNTYgYm9udXNSYW5nZSwKICAgICAgICAgICAgdWludDI1NiBib251c1RpZXIsCiAgICAgICAgICAgIHVpbnQyNTYgcmVzdWx0cwogICAgICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgcmVzdWx0LCB1aW50MjU2IG5ld0Ftb3VudCkKICAgIHsKICAgICAgICB1aW50MjU2IGJvbnVzQ2FsYzsKCiAgICAgICAgaWYgKGFtb3VudCA8PSBib251c1JhbmdlKSB7CiAgICAgICAgICAgIGJvbnVzQ2FsYyA9IGFtb3VudC5tdWwoYm9udXNUaWVyKS5kaXYoMTAwKTsKCiAgICAgICAgICAgIGlmIChhbW91bnQuYWRkKHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXNXaXRob3V0Qm9udXMpID49IGJvbnVzUmFuZ2UpCiAgICAgICAgICAgICAgICBib251c01pbGVzdG9uZXMgPSBuZXh0TWlsZXN0b25lOwoKICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5hZGQoYW1vdW50KS5hZGQoYm9udXNDYWxjKTsKICAgICAgICAgICAgbmV3QW1vdW50ID0gMDsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYm9udXNDYWxjID0gYm9udXNSYW5nZS5tdWwoYm9udXNUaWVyKS5kaXYoMTAwKTsKICAgICAgICAgICAgYm9udXNNaWxlc3RvbmVzID0gbmV4dE1pbGVzdG9uZTsKICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5hZGQoYm9udXNSYW5nZSkuYWRkKGJvbnVzQ2FsYyk7CiAgICAgICAgICAgIG5ld0Ftb3VudCA9IGFtb3VudC5zdWIoYm9udXNSYW5nZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGZXRjaHMgQm9udXMgdGllciBwZXJjZW50YWdlIHBlciBib251cyBtaWxlc3RvbmVzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEJvbnVzQW1vdW50Q2FsY3VsYXRpb24odWludDI1NiBhbW91bnQpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYmxvY2subnVtYmVyIDwgcHVyY2hhc2VTdGFydEJsb2NrKSB7CiAgICAgICAgICAgIHVpbnQyNTYgYm9udXNGcm9tQW1vdW50ID0gYW1vdW50Lm11bCgzMCkuZGl2KDEwMCk7IC8vIHByZXNhbGUgaGFzIDMwJSBib251cwogICAgICAgICAgICByZXR1cm4gYW1vdW50LmFkZChib251c0Zyb21BbW91bnQpOwogICAgICAgIH0KCiAgICAgICAgLy8gcmFuZ2Ugb2YgZWFjaCBib251cyBtaWxlc3RvbmVzCiAgICAgICAgdWludDI1NiBmaXJzdEJvbnVzUmFuZ2UgPSBmaXJzdEJvbnVzRW5kczsKICAgICAgICB1aW50MjU2IHNlY29uZEJvbnVzUmFuZ2UgPSBzZWNvbmRCb251c0VuZHMuc3ViKGZpcnN0Qm9udXNFbmRzKTsKICAgICAgICB1aW50MjU2IHRoaXJkQm9udXNSYW5nZSA9IHRoaXJkQm9udXNFbmRzLnN1YihzZWNvbmRCb251c0VuZHMpOwogICAgICAgIHVpbnQyNTYgZm91cnRoQm9udXNSYW5nZSA9IGZvdXJ0aEJvbnVzRW5kcy5zdWIodGhpcmRCb251c0VuZHMpOwogICAgICAgIHVpbnQyNTYgcmVzdWx0OwoKICAgICAgICBpZiAoYm9udXNNaWxlc3RvbmVzID09IEJvbnVzTWlsZXN0b25lcy5GaXJzdCkKICAgICAgICAgICAgKHJlc3VsdCwgYW1vdW50KSA9IGNhbGN1bGF0ZUJvbnVzKEJvbnVzTWlsZXN0b25lcy5TZWNvbmQsIGFtb3VudCwgZmlyc3RCb251c1JhbmdlLCAyMCwgcmVzdWx0KTsKCiAgICAgICAgaWYgKGJvbnVzTWlsZXN0b25lcyA9PSBCb251c01pbGVzdG9uZXMuU2Vjb25kKQogICAgICAgICAgICAocmVzdWx0LCBhbW91bnQpID0gY2FsY3VsYXRlQm9udXMoQm9udXNNaWxlc3RvbmVzLlRoaXJkLCBhbW91bnQsIHNlY29uZEJvbnVzUmFuZ2UsIDE1LCByZXN1bHQpOwoKICAgICAgICBpZiAoYm9udXNNaWxlc3RvbmVzID09IEJvbnVzTWlsZXN0b25lcy5UaGlyZCkKICAgICAgICAgICAgKHJlc3VsdCwgYW1vdW50KSA9IGNhbGN1bGF0ZUJvbnVzKEJvbnVzTWlsZXN0b25lcy5Gb3VydGgsIGFtb3VudCwgdGhpcmRCb251c1JhbmdlLCAxMCwgcmVzdWx0KTsKCiAgICAgICAgaWYgKGJvbnVzTWlsZXN0b25lcyA9PSBCb251c01pbGVzdG9uZXMuRm91cnRoKQogICAgICAgICAgICAocmVzdWx0LCBhbW91bnQpID0gY2FsY3VsYXRlQm9udXMoQm9udXNNaWxlc3RvbmVzLkZpZnRoLCBhbW91bnQsIGZvdXJ0aEJvbnVzUmFuZ2UsIDUsIHJlc3VsdCk7CgogICAgICAgIHJldHVybiByZXN1bHQuYWRkKGFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZldGNocyBCb251cyB0aWVyIHBlcmNlbnRhZ2UgcGVyIGJvbnVzIG1pbGVzdG9uZXMKICAgICAqIEBkZXYgcXVhbGlmaWVkUGFydG5lciBBZGRyZXNzIG9mIHBhcnRuZXJzIHRoYXQgcGFydGljaXBhdGVkIGluIHByZSBzYWxlCiAgICAgKiBAZGV2IGFtb3VudFNlbnQgVmFsdWUgc2VudCBieSBxdWFsaWZpZWQgcGFydG5lcgogICAgICovCiAgICBmdW5jdGlvbiBzZW5kUXVhbGlmaWVkUGFydG5lckNvbW1pc3Npb25GZWUoYWRkcmVzcyBxdWFsaWZpZWRQYXJ0bmVyLCB1aW50MjU2IGFtb3VudFNlbnQpIGludGVybmFsIHsKICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgY29tbWlzc2lvbiBmZWUgdG8gc2VuZCB0byBxdWFsaWZpZWQgcGFydG5lcgogICAgICAgIHVpbnQyNTYgY29tbWlzc2lvbkZlZVBlcmNlbnRhZ2VDYWxjdWxhdGlvbkFtb3VudCA9IFNhZmVNYXRoLm11bChhbW91bnRTZW50LCBxdWFsaWZpZWRQYXJ0bmVyc1txdWFsaWZpZWRQYXJ0bmVyXS5jb21taXNzaW9uRmVlUGVyY2VudGFnZSkgLyAxMDA7CgogICAgICAgIC8vIHNlbmQgY29tbWlzc2lvbiBmZWUgYW1vdW50CiAgICAgICAgcXVhbGlmaWVkUGFydG5lci50cmFuc2Zlcihjb21taXNzaW9uRmVlUGVyY2VudGFnZUNhbGN1bGF0aW9uQW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgcmVkaXJlY3RUb1B1cmNoYXNlIFJlZGlyZWN0IHRvIGFkZXF1YXRlIHB1cmNoYXNlIGZ1bmN0aW9uIHdpdGhpbiB0aGUgc21hcnQgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gcmVkaXJlY3RUb1B1cmNoYXNlKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChibG9jay5udW1iZXIgPCBwdXJjaGFzZVN0YXJ0QmxvY2spIHsKICAgICAgICAgICAgcHVyY2hhc2VBc1F1YWxpZmllZFBhcnRuZXIoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwdXJjaGFzZVdpdGhFdGgoKTsKICAgICAgICB9CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgU3RhcmJhc2UgQ3Jvd2RzYWxlIENvbnRyYWN0IFdpdGhkcmF3YWwgY29udHJhY3QgLSBQcm92aWRlcyBhbiBmdW5jdGlvbgogICAgICAgICAgdG8gd2l0aGRyYXcgU1RBUiB0b2tlbiBhY2NvcmRpbmcgdG8gY3Jvd2RzYWxlIHJlc3VsdHMKICogQGF1dGhvciBTdGFyYmFzZSBQVEUuIExURC4gLSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjgxZThlZmU3ZWVjMWYyZjVlMGYzZTNlMGYyZTRhZmUyZWUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgogKi8KY29udHJhY3QgU3RhcmJhc2VDcm93ZHNhbGVDb250cmFjdFcgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvKgogICAgICogIEV2ZW50cwogICAgICovCiAgICBldmVudCBUb2tlbldpdGhkcmF3bihhZGRyZXNzIHB1cmNoYXNlciwgdWludDI1NiB0b2tlbkNvdW50KTsKICAgIGV2ZW50IENyb3dkc2FsZVB1cmNoYXNlQm9udXNMb2coCiAgICAgICAgdWludDI1NiBwdXJjaGFzZUlkeCwgdWludDI1NiByYXdBbW91bnQsIHVpbnQyNTYgYm9udXMpOwoKICAgIC8qKgogICAgICogIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBBYnN0cmFjdFN0YXJiYXNlVG9rZW4gcHVibGljIHN0YXJiYXNlVG9rZW47CiAgICBTdGFyYmFzZUNyb3dkc2FsZSBwdWJsaWMgc3RhcmJhc2VDcm93ZHNhbGU7CgogICAgLyoqCiAgICAgKiAgQ29uc3RhbnRzCiAgICAgKi8KICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGNyb3dkc2FsZVRva2VuQW1vdW50ID0gMTI1MDAwMDAwZTE4OwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgZWFybHlQdXJjaGFzZVRva2VuQW1vdW50ID0gNTAwMDAwMDBlMTg7CgogICAgLyoqCiAgICAgKiAgU3RvcmFnZQogICAgICovCgogICAgLy8gZWFybHkgcHVyY2hhc2UKICAgIGJvb2wgcHVibGljIGVhcmx5UHVyY2hhc2VzTG9hZGVkID0gZmFsc2U7ICAvLyByZXR1cm5zIHdoZXRoZXIgYWxsIGVhcmx5IHB1cmNoYXNlcyBhcmUgbG9hZGVkIGludG8gdGhpcyBjb250cmFjdAogICAgdWludDI1NiBwdWJsaWMgdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzOyAvLyBpbmNsdWRpbmcgMjAlIGJvbnVzCiAgICB1aW50IHB1YmxpYyBudW1PZkRlbGl2ZXJlZEVhcmx5UHVyY2hhc2VzOyAgLy8gaW5kZXggdG8ga2VlcCB0aGUgbnVtYmVyIG9mIGVhcmx5IHB1cmNoYXNlcyBoYXZlIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQgYnkgYHdpdGhkcmF3UHVyY2hhc2VkVG9rZW5zYAoKICAgIC8vIGNyb3dkc2FsZQogICAgdWludDI1NiBwdWJsaWMgdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlczsgLy8gaW4gQ05ZLCBpbmNsdWRpbmcgYm9udXNlcwogICAgdWludDI1NiBwdWJsaWMgdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251czsgLy8gaW4gQ05ZCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydERhdGU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRlZEF0OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgY3Jvd2RzYWxlUHVyY2hhc2VBbW91bnRCeTsgLy8gY3Jvd2RzYWxlIHB1cmNoYXNlIGFtb3VudCBpbiBDTlkgcGVyIHB1cmNoYXNlcnMnIGFkZHJlc3MKICAgIHVpbnQgcHVibGljIG51bU9mRGVsaXZlcmVkQ3Jvd2RzYWxlUHVyY2hhc2VzOyAgLy8gaW5kZXggdG8ga2VlcCB0aGUgbnVtYmVyIG9mIGNyb3dkc2FsZSBwdXJjaGFzZXMgaGF2ZSBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIGJ5IGB3aXRoZHJhd1B1cmNoYXNlZFRva2Vuc2AKCiAgICAvLyBjcm93ZHNhbGUgY29udHJhY3Qgd2l0aGRyYXdhbAogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlUHVyY2hhc2VzTG9hZGVkID0gZmFsc2U7ICAgLy8gcmV0dXJucyB3aGV0aGVyIGFsbCBjcm93ZHNhbGUgcHVyY2hhc2VzIGFyZSBsb2FkZWQgaW50byB0aGlzIGNvbnRyYWN0CiAgICB1aW50MjU2IHB1YmxpYyBudW1PZkxvYWRlZENyb3dkc2FsZVB1cmNoYXNlczsgLy8gaW5kZXggdG8ga2VlcCB0aGUgbnVtYmVyIG9mIGNyb3dkc2FsZSBwdXJjaGFzZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBsb2FkZWQgYnkgYGxvYWRDcm93ZHNhbGVQdXJjaGFzZXNgCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEFtb3VudE9mUHJlc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251czsgIC8vIGluIENOWQoKICAgIC8vIGJvbnVzIG1pbGVzdG9uZXMKICAgIHVpbnQyNTYgcHVibGljIGZpcnN0Qm9udXNFbmRzOwogICAgdWludDI1NiBwdWJsaWMgc2Vjb25kQm9udXNFbmRzOwogICAgdWludDI1NiBwdWJsaWMgdGhpcmRCb251c0VuZHM7CiAgICB1aW50MjU2IHB1YmxpYyBmb3VydGhCb251c0VuZHM7CgogICAgLy8gYWZ0ZXIgdGhlIGNyb3dkc2FsZQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgdG9rZW5XaXRoZHJhd247ICAgIC8vIHJldHVybnMgd2hldGhlciBwdXJjaGFzZWQgdG9rZW5zIHdlcmUgd2l0aGRyYXduIGJ5IGEgcHVyY2hhc2VyCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBudW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeTsgICAgLy8gdGhlIG51bWJlciBvZiB0b2tlbnMgcHVyY2hhc2VkIG9uIHRoZSBjcm93ZHNhbGUgYnkgYSBwdXJjaGFzZXIKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5OyAgICAvLyB0aGUgbnVtYmVyIG9mIHRva2VucyBlYXJseSBwdXJjaGFzZWQgYnkgYSBwdXJjaGFzZXIKCiAgICAvKioKICAgICAqICBNb2RpZmllcnMKICAgICAqLwogICAgbW9kaWZpZXIgd2hlbkVuZGVkKCkgewogICAgICAgIGFzc2VydChpc0VuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDb250cmFjdCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBSZWplY3QgYWxsIGluY29taW5nIEV0aGVyIHRyYW5zZmVycwogICAgICovCiAgICBmdW5jdGlvbiAoKSB7IHJldmVydCgpOyB9CgogICAgLyoqCiAgICAgKiBFeHRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIGNvbnRyYWN0cycgYWRkcmVzcwogICAgICogQHBhcmFtIHN0YXJiYXNlVG9rZW5BZGRyZXNzIFRva2VuIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gU3RhcmJhc2VDcm93ZHNhbGVBZGRyZXNzIFRva2VuIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldHVwKGFkZHJlc3Mgc3RhcmJhc2VUb2tlbkFkZHJlc3MsIGFkZHJlc3MgU3RhcmJhc2VDcm93ZHNhbGVBZGRyZXNzKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShzdGFyYmFzZVRva2VuQWRkcmVzcyAhPSBhZGRyZXNzKDApICYmIFN0YXJiYXNlQ3Jvd2RzYWxlQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKGFkZHJlc3Moc3RhcmJhc2VUb2tlbikgPT0gMCAmJiBhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSA9PSAwKTsKCiAgICAgICAgc3RhcmJhc2VUb2tlbiA9IEFic3RyYWN0U3RhcmJhc2VUb2tlbihzdGFyYmFzZVRva2VuQWRkcmVzcyk7CiAgICAgICAgc3RhcmJhc2VDcm93ZHNhbGUgPSBTdGFyYmFzZUNyb3dkc2FsZShTdGFyYmFzZUNyb3dkc2FsZUFkZHJlc3MpOwoKICAgICAgICByZXF1aXJlKHN0YXJiYXNlQ3Jvd2RzYWxlLnN0YXJ0RGF0ZSgpID4gMCk7CiAgICAgICAgc3RhcnREYXRlID0gc3RhcmJhc2VDcm93ZHNhbGUuc3RhcnREYXRlKCk7CgogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VDcm93ZHNhbGUuZW5kZWRBdCgpID4gMCk7CiAgICAgICAgZW5kZWRBdCA9IHN0YXJiYXNlQ3Jvd2RzYWxlLmVuZGVkQXQoKTsKCiAgICAgICAgdG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzID0gc3RhcmJhc2VDcm93ZHNhbGUudG90YWxBbW91bnRPZkVhcmx5UHVyY2hhc2VzKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IExvYWQgY3Jvd2RzYWxlIHB1cmNoYXNlcyBmcm9tIHRoZSBjb250cmFjdCBrZWVwcyB0cmFjayBvZiB0aGVtCiAgICAgKiBAcGFyYW0gbnVtT2ZQcmVzYWxlUHVyY2hhc2VzIE51bWJlciBvZiBwcmVzYWxlIHB1cmNoYXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxvYWRDcm93ZHNhbGVQdXJjaGFzZXModWludDI1NiBudW1PZlByZXNhbGVQdXJjaGFzZXMpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgICAgICB3aGVuRW5kZWQKICAgIHsKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVQdXJjaGFzZXNMb2FkZWQpOwoKICAgICAgICB1aW50MjU2IG51bU9mUHVyY2hhc2VzID0gc3RhcmJhc2VDcm93ZHNhbGUubnVtT2ZQdXJjaGFzZXMoKTsKCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSBudW1PZkxvYWRlZENyb3dkc2FsZVB1cmNoYXNlczsgaSA8IG51bU9mUHVyY2hhc2VzICYmIG1zZy5nYXMgPiAyMDAwMDA7IGkrKykgewogICAgICAgICAgICB2YXIgKHB1cmNoYXNlciwgYW1vdW50LCByYXdBbW91bnQsKSA9CiAgICAgICAgICAgICAgICBzdGFyYmFzZUNyb3dkc2FsZS5jcm93ZHNhbGVQdXJjaGFzZXMoaSk7CgogICAgICAgICAgICB1aW50MjU2IGJvbnVzOwogICAgICAgICAgICBpZiAoaSA8IG51bU9mUHJlc2FsZVB1cmNoYXNlcykgewogICAgICAgICAgICAgICAgYm9udXMgPSByYXdBbW91bnQgKiAzMCAvIDEwMDsgICAvLyBwcmVzYWxlOiAzMCUgYm9udXMKICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50T2ZQcmVzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzID0KICAgICAgICAgICAgICAgICAgICB0b3RhbEFtb3VudE9mUHJlc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cy5hZGQocmF3QW1vdW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJvbnVzID0gY2FsY3VsYXRlQm9udXMocmF3QW1vdW50KTsgLy8gbWFpbnNhbGU6IDIwJSB+IDAlIGJvbnVzCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFVwZGF0ZSBhbW91bnQgd2l0aCBib251cwogICAgICAgICAgICBDcm93ZHNhbGVQdXJjaGFzZUJvbnVzTG9nKGksIHJhd0Ftb3VudCwgYm9udXMpOwogICAgICAgICAgICBhbW91bnQgPSByYXdBbW91bnQgKyBib251czsKCiAgICAgICAgICAgIC8vIEluY3JlYXNlIHRoZSBzdW1zCiAgICAgICAgICAgIGNyb3dkc2FsZVB1cmNoYXNlQW1vdW50QnlbcHVyY2hhc2VyXSA9IFNhZmVNYXRoLmFkZChjcm93ZHNhbGVQdXJjaGFzZUFtb3VudEJ5W3B1cmNoYXNlcl0sIGFtb3VudCk7CiAgICAgICAgICAgIHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXMgPSB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzLmFkZChhbW91bnQpOwogICAgICAgICAgICB0b3RhbEFtb3VudE9mQ3Jvd2RzYWxlUHVyY2hhc2VzV2l0aG91dEJvbnVzID0gdG90YWxBbW91bnRPZkNyb3dkc2FsZVB1cmNoYXNlc1dpdGhvdXRCb251cy5hZGQocmF3QW1vdW50KTsKCiAgICAgICAgICAgIG51bU9mTG9hZGVkQ3Jvd2RzYWxlUHVyY2hhc2VzKys7ICAgIC8vIEluY3JlYXNlIHRoZSBpbmRleAogICAgICAgIH0KCiAgICAgICAgYXNzZXJ0KG51bU9mTG9hZGVkQ3Jvd2RzYWxlUHVyY2hhc2VzIDw9IG51bU9mUHVyY2hhc2VzKTsKICAgICAgICBpZiAobnVtT2ZMb2FkZWRDcm93ZHNhbGVQdXJjaGFzZXMgPT0gbnVtT2ZQdXJjaGFzZXMpIHsKICAgICAgICAgICAgY3Jvd2RzYWxlUHVyY2hhc2VzTG9hZGVkID0gdHJ1ZTsgICAgLy8gZW5hYmxlIHRoZSBmbGFnCiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBEZWxpdmVyIHRva2VucyB0byBwdXJjaGFzZXJzIGFjY29yZGluZyB0byB0aGVpciBwdXJjaGFzZSBhbW91bnQgaW4gQ05ZCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3UHVyY2hhc2VkVG9rZW5zKCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHdoZW5FbmRlZAogICAgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VDcm93ZHNhbGUuZWFybHlQdXJjaGFzZXNMb2FkZWQoKSk7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVQdXJjaGFzZXNMb2FkZWQpOwogICAgICAgIGFzc2VydChhZGRyZXNzKHN0YXJiYXNlVG9rZW4pICE9IDApOwoKICAgICAgICAvLyBwcmV2ZW50IGRvdWJsZSB3aXRoZHJhd2FsCiAgICAgICAgcmVxdWlyZSghdG9rZW5XaXRoZHJhd25bbXNnLnNlbmRlcl0pOwogICAgICAgIHRva2VuV2l0aGRyYXduW21zZy5zZW5kZXJdID0gdHJ1ZTsKCiAgICAgICAgLyoKICAgICAgICAgKiDigJxWYWx1ZeKAnSByZWZlcnMgdG8gdGhlIGNvbnRyaWJ1dGlvbiBvZiB0aGUgVXNlcjoKICAgICAgICAgKiAge2Nyb3dkc2FsZV9wdXJjaGFzZXJfdG9rZW5fYW1vdW50fSA9CiAgICAgICAgICogIHtjcm93ZHNhbGVfdG9rZW5fYW1vdW50fSAqIHtjcm93ZHNhbGVQdXJjaGFzZV92YWx1ZX0gLyB7ZWFybHlwdXJjaGFzZV92YWx1ZX0gKyB7Y3Jvd2RzYWxlX3ZhbHVlfS4KICAgICAgICAgKgogICAgICAgICAqIEV4YW1wbGU6IElmIGEgVXNlciBjb250cmlidXRlcyBkdXJpbmcgdGhlIENvbnRyaWJ1dGlvbiBQZXJpb2QgMTAwIENOWSAoaW5jbHVkaW5nIGFwcGxpY2FibGUKICAgICAgICAgKiBCb251cywgaWYgYW55KSBhbmQgdGhlIHRvdGFsIGFtb3VudCBlYXJseSBwdXJjaGFzZXMgYW1vdW50cyB0byA24oCZMDAw4oCZMDAwIENOWQogICAgICAgICAqIGFuZCB0b3RhbCBhbW91bnQgcmFpc2VkIGR1cmluZyB0aGUgQ29udHJpYnV0aW9uIFBlcmlvZCBpcyAzMOKAmTAwMOKAmTAwMCwgdGhlbiBoZSB3aWxsIGdldAogICAgICAgICAqIDM0Ny4yMiBTVEFSID0gMTI14oCZMDAw4oCZMDAwIFNUQVIgKiAxMDAgQ05ZIC8gMzDigJkwMDDigJkwMDAgQ05ZICsgNuKAmTAwMOKAmTAwMCBDTlkuCiAgICAgICAgKi8KCiAgICAgICAgaWYgKGNyb3dkc2FsZVB1cmNoYXNlQW1vdW50QnlbbXNnLnNlbmRlcl0gPiAwKSB7CiAgICAgICAgICAgIHVpbnQyNTYgY3Jvd2RzYWxlUHVyY2hhc2VWYWx1ZSA9IGNyb3dkc2FsZVB1cmNoYXNlQW1vdW50QnlbbXNnLnNlbmRlcl07CiAgICAgICAgICAgIHVpbnQyNTYgdG9rZW5Db3VudCA9CiAgICAgICAgICAgICAgICBTYWZlTWF0aC5tdWwoY3Jvd2RzYWxlVG9rZW5BbW91bnQsIGNyb3dkc2FsZVB1cmNoYXNlVmFsdWUpIC8KICAgICAgICAgICAgICAgIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKTsKCiAgICAgICAgICAgIG51bU9mUHVyY2hhc2VkVG9rZW5zT25Dc0J5W21zZy5zZW5kZXJdID0KICAgICAgICAgICAgICAgIFNhZmVNYXRoLmFkZChudW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeVttc2cuc2VuZGVyXSwgdG9rZW5Db3VudCk7CiAgICAgICAgICAgIGFzc2VydChzdGFyYmFzZVRva2VuLmFsbG9jYXRlVG9Dcm93ZHNhbGVQdXJjaGFzZXIobXNnLnNlbmRlciwgdG9rZW5Db3VudCkpOwogICAgICAgICAgICBudW1PZkRlbGl2ZXJlZENyb3dkc2FsZVB1cmNoYXNlcysrOwogICAgICAgICAgICBUb2tlbldpdGhkcmF3bihtc2cuc2VuZGVyLCB0b2tlbkNvdW50KTsKICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICog4oCcVmFsdWXigJ0gcmVmZXJzIHRvIHRoZSBjb250cmlidXRpb24gb2YgdGhlIFVzZXI6CiAgICAgICAgICoge2Vhcmx5cHVyY2hhc2VyX3Rva2VuX2Ftb3VudH0gPQogICAgICAgICAqIHtlYXJseXB1cmNoYXNlcl90b2tlbl9hbW91bnR9ICogKHtlYXJseXB1cmNoYXNlX3ZhbHVlfSAvIHt0b3RhbF9lYXJseXB1cmNoYXNlX3ZhbHVlfSkKICAgICAgICAgKiAgKyB7Y3Jvd2RzYWxlX3Rva2VuX2Ftb3VudH0gKiAoe2Vhcmx5cHVyY2hhc2VfdmFsdWV9IC8ge2Vhcmx5cHVyY2hhc2VfdmFsdWV9ICsge2Nyb3dkc2FsZV92YWx1ZX0pLgogICAgICAgICAqCiAgICAgICAgICogRXhhbXBsZTogSWYgYW4gRWFybHkgUHVyY2hhc2VyIGNvbnRyaWJ1dGVzIDEwMCBDTlkgKGluY2x1ZGluZyBCb251cyBvZiAyMCUpIGFuZCB0aGUKICAgICAgICAgKiB0b3RhbCBhbW91bnQgb2YgZWFybHkgcHVyY2hhc2VzIGFtb3VudHMgdG8gNuKAmTAwMOKAmTAwMCBDTlkgYW5kIHRoZSB0b3RhbCBhbW91bnQgcmFpc2VkCiAgICAgICAgICogZHVyaW5nIHRoZSBDb250cmlidXRpb24gUGVyaW9kIGlzIDMw4oCZMDAw4oCZMDAwIENOWSwgdGhlbiBoZSB3aWxsIGdldCAxMTgwLjU1IFNUQVIgPQogICAgICAgICAqIDUw4oCZMDAw4oCZMDAwIFNUQVIgKiAxMDAgQ05ZIC8gNuKAmTAwMOKAmTAwMCBDTlkgKyAxMjXigJkwMDDigJkwMDAgU1RBUiAqIDEwMCBDTlkgLwogICAgICAgICAqIDMw4oCZMDAw4oCZMDAwIENOWSArIDbigJkwMDDigJkwMDAgQ05ZCiAgICAgICAgICovCgogICAgICAgIGlmIChlYXJseVB1cmNoYXNlZEFtb3VudEJ5KG1zZy5zZW5kZXIpID4gMCkgeyAgLy8gc2tpcCBpZiBpcyBub3QgYW4gZWFybHkgcHVyY2hhc2VyCiAgICAgICAgICAgIHVpbnQyNTYgZWFybHlQdXJjaGFzZXJQdXJjaGFzZVZhbHVlID0gZWFybHlQdXJjaGFzZWRBbW91bnRCeShtc2cuc2VuZGVyKTsKICAgICAgICAgICAgdWludDI1NiBlcFRva2VuQ2FsY3VsYXRpb25Gcm9tRVBUb2tlbkFtb3VudCA9IFNhZmVNYXRoLm11bChlYXJseVB1cmNoYXNlVG9rZW5BbW91bnQsIGVhcmx5UHVyY2hhc2VyUHVyY2hhc2VWYWx1ZSkgLyB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXM7CiAgICAgICAgICAgIHVpbnQyNTYgZXBUb2tlbkNhbGN1bGF0aW9uRnJvbUNyb3dkc2FsZVRva2VuQW1vdW50ID0gU2FmZU1hdGgubXVsKGNyb3dkc2FsZVRva2VuQW1vdW50LCBlYXJseVB1cmNoYXNlclB1cmNoYXNlVmFsdWUpIC8gdG90YWxSYWlzZWRBbW91bnRJbkNueSgpOwogICAgICAgICAgICB1aW50MjU2IGVwVG9rZW5Db3VudCA9IFNhZmVNYXRoLmFkZChlcFRva2VuQ2FsY3VsYXRpb25Gcm9tRVBUb2tlbkFtb3VudCwgZXBUb2tlbkNhbGN1bGF0aW9uRnJvbUNyb3dkc2FsZVRva2VuQW1vdW50KTsKCiAgICAgICAgICAgIG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5W21zZy5zZW5kZXJdID0gU2FmZU1hdGguYWRkKG51bU9mUHVyY2hhc2VkVG9rZW5zT25FcEJ5W21zZy5zZW5kZXJdLCBlcFRva2VuQ291bnQpOwogICAgICAgICAgICBhc3NlcnQoc3RhcmJhc2VUb2tlbi5hbGxvY2F0ZVRvQ3Jvd2RzYWxlUHVyY2hhc2VyKG1zZy5zZW5kZXIsIGVwVG9rZW5Db3VudCkpOwogICAgICAgICAgICBudW1PZkRlbGl2ZXJlZEVhcmx5UHVyY2hhc2VzKys7CiAgICAgICAgICAgIFRva2VuV2l0aGRyYXduKG1zZy5zZW5kZXIsIGVwVG9rZW5Db3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogUHVibGljIGZ1bmN0aW9ucwogICAgICovCgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgcHVyY2hhc2VkIGFtb3VudCBieSBhbiBlYXJseSBwdXJjaGFzZXIKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgQWRkcmVzcyBvZiBhbiBlYXJseSBwdXJjaGFzZXIKICAgICAqLwogICAgZnVuY3Rpb24gZWFybHlQdXJjaGFzZWRBbW91bnRCeShhZGRyZXNzIHB1cmNoYXNlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXJiYXNlQ3Jvd2RzYWxlLmVhcmx5UHVyY2hhc2VkQW1vdW50QnkocHVyY2hhc2VyKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBib29sZWFuIGZvciB3aGV0aGVyIGNyb3dkc2FsZSBoYXMgZW5kZWQKICAgICAqLwogICAgZnVuY3Rpb24gaXNFbmRlZCgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChzdGFyYmFzZUNyb3dkc2FsZSAhPSBhZGRyZXNzKDApICYmIGVuZGVkQXQgPiAwKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0b3RhbCByYWlzZWQgYW1vdW50IGluIENOWSAoaW5jbHVkZXMgRVApIGFuZCBib251c2VzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsUmFpc2VkQW1vdW50SW5DbnkoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b3RhbEFtb3VudE9mRWFybHlQdXJjaGFzZXMuYWRkKHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXMpOwogICAgfQoKICAgIC8qKgogICAgICogSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgQ2FsY3VsYXRlcyBib251cyBvZiBhIHB1cmNoYXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUJvbnVzKHVpbnQyNTYgcmF3QW1vdW50KQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAodWludDI1NiBib251cykKICAgIHsKICAgICAgICB1aW50MjU2IHB1cmNoYXNlZEFtb3VudCA9CiAgICAgICAgICAgIHRvdGFsQW1vdW50T2ZDcm93ZHNhbGVQdXJjaGFzZXNXaXRob3V0Qm9udXMKICAgICAgICAgICAgICAgIC5zdWIodG90YWxBbW91bnRPZlByZXNhbGVQdXJjaGFzZXNXaXRob3V0Qm9udXMpOwogICAgICAgIHVpbnQyNTYgZTEgPSBzdGFyYmFzZUNyb3dkc2FsZS5maXJzdEJvbnVzRW5kcygpOwogICAgICAgIHVpbnQyNTYgZTIgPSBzdGFyYmFzZUNyb3dkc2FsZS5zZWNvbmRCb251c0VuZHMoKTsKICAgICAgICB1aW50MjU2IGUzID0gc3RhcmJhc2VDcm93ZHNhbGUudGhpcmRCb251c0VuZHMoKTsKICAgICAgICB1aW50MjU2IGU0ID0gc3RhcmJhc2VDcm93ZHNhbGUuZm91cnRoQm9udXNFbmRzKCk7CiAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZUJvbnVzSW5SYW5nZShwdXJjaGFzZWRBbW91bnQsIHJhd0Ftb3VudCwgMCwgZTEsIDIwKQogICAgICAgICAgICAuYWRkKGNhbGN1bGF0ZUJvbnVzSW5SYW5nZShwdXJjaGFzZWRBbW91bnQsIHJhd0Ftb3VudCwgZTEsIGUyLCAxNSkpCiAgICAgICAgICAgIC5hZGQoY2FsY3VsYXRlQm9udXNJblJhbmdlKHB1cmNoYXNlZEFtb3VudCwgcmF3QW1vdW50LCBlMiwgZTMsIDEwKSkKICAgICAgICAgICAgLmFkZChjYWxjdWxhdGVCb251c0luUmFuZ2UocHVyY2hhc2VkQW1vdW50LCByYXdBbW91bnQsIGUzLCBlNCwgNSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUJvbnVzSW5SYW5nZSgKICAgICAgICB1aW50MjU2IHB1cmNoYXNlZEFtb3VudCwKICAgICAgICB1aW50MjU2IHJhd0Ftb3VudCwKICAgICAgICB1aW50MjU2IGJvbnVzQmVnaW4sCiAgICAgICAgdWludDI1NiBib251c0VuZCwKICAgICAgICB1aW50MjU2IGJvbnVzVGllcgogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiBib251cykKICAgIHsKICAgICAgICB1aW50MjU2IHN1bSA9IHB1cmNoYXNlZEFtb3VudCArIHJhd0Ftb3VudDsKICAgICAgICBpZiAocHVyY2hhc2VkQW1vdW50ID4gYm9udXNFbmQgfHwgc3VtIDwgYm9udXNCZWdpbikgewogICAgICAgICAgICByZXR1cm4gMDsgICAvLyBvdXQgb2YgdGhpcyByYW5nZQogICAgICAgIH0KCiAgICAgICAgdWludDI1NiBtaW4gPSBwdXJjaGFzZWRBbW91bnQgPD0gYm9udXNCZWdpbiA/IGJvbnVzQmVnaW4gOiBwdXJjaGFzZWRBbW91bnQ7CiAgICAgICAgdWludDI1NiBtYXggPSBib251c0VuZCA8PSBzdW0gPyBib251c0VuZCA6IHN1bTsKICAgICAgICByZXR1cm4gbWF4LnN1YihtaW4pICogYm9udXNUaWVyIC8gMTAwOwogICAgfQp9'.
	

]
