Class {
	#name : #SRTef90b9fea51c983827ba3b79c3c19a9751fc7e99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTef90b9fea51c983827ba3b79c3c19a9751fc7e99 >> base64 [
	^ ''.
	

]
