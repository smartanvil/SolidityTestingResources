Class {
	#name : #SRT6e08a8b4da2a13c655af2dd74f7bdb979efe141b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e08a8b4da2a13c655af2dd74f7bdb979efe141b >> base64 [
	^ ''.
	

]
