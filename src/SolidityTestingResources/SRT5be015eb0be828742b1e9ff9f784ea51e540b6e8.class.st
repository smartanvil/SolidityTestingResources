Class {
	#name : #SRT5be015eb0be828742b1e9ff9f784ea51e540b6e8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5be015eb0be828742b1e9ff9f784ea51e540b6e8 >> base64 [
	^ ''.
	

]
