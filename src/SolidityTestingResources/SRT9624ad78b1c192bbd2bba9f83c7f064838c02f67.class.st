Class {
	#name : #SRT9624ad78b1c192bbd2bba9f83c7f064838c02f67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9624ad78b1c192bbd2bba9f83c7f064838c02f67 >> base64 [
	^ ''.
	

]
