Class {
	#name : #SRT78Cb0dB58721596Bc79Dc9D8d8296212D153D804,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT78Cb0dB58721596Bc79Dc9D8d8296212D153D804 >> base64 [
	^ ''.
	

]
