Class {
	#name : #SRT618bb37e5644da4946f052c50d7819f95d327c8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT618bb37e5644da4946f052c50d7819f95d327c8b >> base64 [
	^ ''.
	

]
