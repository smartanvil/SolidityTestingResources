Class {
	#name : #SRTc95c0910d39d1f6cd3bd71e4b689660c18172b7b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc95c0910d39d1f6cd3bd71e4b689660c18172b7b >> base64 [
	^ ''.
	

]
