Class {
	#name : #SRTd9EfB77fD4041a28F0108EB8726dE2505817C6D1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd9EfB77fD4041a28F0108EB8726dE2505817C6D1 >> base64 [
	^ ''.
	

]
