Class {
	#name : #SRT3Ad1c7615047E8aC1Ee9A302C7B523b30606a3ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3Ad1c7615047E8aC1Ee9A302C7B523b30606a3ee >> base64 [
	^ ''.
	

]
