Class {
	#name : #SRT6c940a8d477922F1CffE012449321098E06Db3f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6c940a8d477922F1CffE012449321098E06Db3f7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgcmVxdWlyZShhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCmNvbnRyYWN0IENyeXB0b0dhaW4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIHN0cnVjdCBCaWQgewogICAgICAgIGFkZHJlc3MgcGxheWVyOwogICAgICAgIHVpbnQ4IHNsb3RfZnJvbTsKICAgICAgICB1aW50OCBzbG90X3RvOwogICAgfQoKICAgIEJpZFtdIHB1YmxpYyBiaWRzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKICAgIGJvb2wgcHVibGljIGlzX2FsaXZlID0gdHJ1ZTsKICAgIHVpbnQ4IGNvbnN0YW50IG1heF9zbG90cyA9IDEwMDsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHJpY2VfdGlja2V0ID0gMTAgZmlubmV5OwogICAgdWludDI1NiBjb25zdGFudCB3aW5fcmV3YXJkID0gNDAgZmlubmV5OwogICAgdWludDI1NiBjb25zdGFudCBob3VzZV9lZGdlID0gMiBmaW5uZXk7CiAgICB1aW50OCBjb25zdGFudCB3aW5uZXJzX2NvdW50ID0gMjA7IC8vcmlwZW1kMTYwIGxlbmd0aAogICAgdWludDggcHVibGljIGxhc3Rfc2xvdCA9IDA7CiAgICB1aW50IHB1YmxpYyBzdGFydF90cyA9IDA7CiAgICB1aW50IGNvbnN0YW50IHdlZWtfc2Vjb25kcyA9IDYwKjYwKjI0Kjc7CiAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4pOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlBbGl2ZSgpIHsKICAgICAgICByZXF1aXJlKGlzX2FsaXZlKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENyeXB0b0dhaW4oKSB7CiAgICAgICAgYWRtaW4gPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldF9hZG1pbihhZGRyZXNzIG5ld0FkbWluKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBhZG1pbiA9IG5ld0FkbWluOwogICAgfQogICAgCiAgICAvLyBGdWxseSBkZXN0cnVjdCBjb250cmFjdC4gVXNlIE9OTFkgaWYgeW91IHdhbnQgdG8gZnVsbHkgY2xvc2UgbG90dGVyeS4KICAgIC8vIFRoaXMgYWN0aW9uIGNhbid0IGJlIHJldmVydC4gVXNlIGNhcmVmdWxseSBpZiB5b3Uga25vdyB3aGF0IHlvdSBkbyEKICAgIGZ1bmN0aW9uIGRlc3RydWN0KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgYWRtaW4udHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICBpc19hbGl2ZSA9IGZhbHNlOyAvLyA8LSB0aGlzIGFjdGlvbiBpcyBmdWxseSBkZXN0cm95IGNvbnRyYWN0CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlc2V0KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShibG9jay50aW1lc3RhbXAgPiBzdGFydF90cyArIHdlZWtfc2Vjb25kcyk7IC8vb25seSBhZnRlciB3ZWVrIG9mIGluYWN0aXZpdHkKICAgICAgICBhZG1pbi50cmFuc2ZlcihwcmljZV90aWNrZXQubXVsKGxhc3Rfc2xvdCkpOwogICAgICAgIHJlc3RhcnQoKTsKCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlc3RhcnQoKSBpbnRlcm5hbCB7CiAgICAgICAgc3RhcnRfdHMgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgbGFzdF9zbG90ID0gMDsKICAgICAgICBkZWxldGUgYmlkczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYmlkKGFkZHJlc3MgcGxheWVyLCB1aW50OCBiaWRfc2xvdHNfY291bnQpIGludGVybmFsIHsKICAgICAgICB1aW50OCBuZXdfbGFzdF9zbG90ID0gbGFzdF9zbG90ICsgYmlkX3Nsb3RzX2NvdW50OwogICAgICAgIGJpZHMucHVzaChCaWQocGxheWVyLCBsYXN0X3Nsb3QsIG5ld19sYXN0X3Nsb3QpKTsKICAgICAgICByZW1vdmVfZXhjZWVkKGhvdXNlX2VkZ2UubXVsKGJpZF9zbG90c19jb3VudCkpOwogICAgICAgIGxhc3Rfc2xvdCA9IG5ld19sYXN0X3Nsb3Q7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGlzX3Nsb3RfaW5fYmlkKHVpbnQ4IHNsb3RfZnJvbSwgdWludDggc2xvdF90bywgdWludDggc2xvdCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoc2xvdCA+PSBzbG90X2Zyb20gJiYgc2xvdCA8IHNsb3RfdG8pID8gdHJ1ZSA6IGZhbHNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZWFyY2hfd2lubmVyX2JpZF9hZGRyZXNzKHVpbnQ4IHNsb3QpIHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICB1aW50OCBpOwogICAgICAgIAogICAgICAgIGlmIChzbG90IDwgMTI4KSB7CiAgICAgICAgICAgIGZvciAoaT0wOyBpPGJpZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChpc19zbG90X2luX2JpZChiaWRzW2ldLnNsb3RfZnJvbSwgYmlkc1tpXS5zbG90X3RvLCBzbG90KSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBiaWRzW2ldLnBsYXllcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGk9dWludDgoYmlkcy5sZW5ndGgpLTE7IGk+PTA7IGktLSkgewogICAgICAgICAgICAgICAgaWYgKGlzX3Nsb3RfaW5fYmlkKGJpZHNbaV0uc2xvdF9mcm9tLCBiaWRzW2ldLnNsb3RfdG8sIHNsb3QpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpZHNbaV0ucGxheWVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGFzc2VydCAoZmFsc2UpOwoKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcGxheW91dCgpIGludGVybmFsIHsKICAgICAgICAKICAgICAgICBieXRlczIwIGhhc2ggPSByaXBlbWQxNjAoYmxvY2sudGltZXN0YW1wLCBibG9jay5udW1iZXIsIG1zZy5zZW5kZXIpOwogICAgICAgIAogICAgICAgIHVpbnQ4IGN1cnJlbnRfd2lubmVyX3Nsb3QgPSAwOwogICAgICAgIGZvciAodWludDggaT0wOyBpPHdpbm5lcnNfY291bnQ7IGkrKykgewogICAgICAgICAgICBjdXJyZW50X3dpbm5lcl9zbG90ID0gKCBjdXJyZW50X3dpbm5lcl9zbG90ICsgdWludDgoaGFzaFtpXSkgKSAlIG1heF9zbG90czsKICAgICAgICAgICAgYWRkcmVzcyBjdXJyZW50X3dpbm5lcl9hZGRyZXNzID0gc2VhcmNoX3dpbm5lcl9iaWRfYWRkcmVzcyhjdXJyZW50X3dpbm5lcl9zbG90KTsKICAgICAgICAgICAgYmFsYW5jZXNbY3VycmVudF93aW5uZXJfYWRkcmVzc10gPSBiYWxhbmNlc1tjdXJyZW50X3dpbm5lcl9hZGRyZXNzXS5hZGQod2luX3Jld2FyZCk7CiAgICAgICAgfQogICAgICAgIHJlc3RhcnQoKTsKICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVfZXhjZWVkKHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgYmFsYW5jZXNbYWRtaW5dID0gYmFsYW5jZXNbYWRtaW5dLmFkZChhbW91bnQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRfYmFsYW5jZSgpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRfZm9yZWlnbl9iYWxhbmNlKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19hZGRyZXNzXTsKICAgIH0KICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIG9ubHlBbGl2ZSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+IDApOwogICAgICAgIHZhciBhbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBydW4oYWRkcmVzcyBwbGF5ZXIsIHVpbnQyNTYgZGVwb3NpdF9ldGgpIGludGVybmFsIG9ubHlBbGl2ZSB7CiAgICAgICAgcmVxdWlyZShkZXBvc2l0X2V0aCA+PSBwcmljZV90aWNrZXQpOwogICAgICAgIHVpbnQyNTYgZXhjZWVkX21vZF9ldGggPSBkZXBvc2l0X2V0aCAlIHByaWNlX3RpY2tldDsKICAgICAgICAKICAgICAgICBpZiAoZXhjZWVkX21vZF9ldGggPiAwKSB7CiAgICAgICAgICAgIHJlbW92ZV9leGNlZWQoZXhjZWVkX21vZF9ldGgpOwogICAgICAgICAgICBkZXBvc2l0X2V0aCA9IGRlcG9zaXRfZXRoLnN1YihleGNlZWRfbW9kX2V0aCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHVpbnQ4IGRlcG9zaXRfYmlkcyA9IHVpbnQ4KGRlcG9zaXRfZXRoIC8gcHJpY2VfdGlja2V0KTsKICAgICAgICAKICAgICAgICAvL2hvdyBtdWNoIHNsb3RzIGlzIGF2YWxpYWJsZSBmb3IgYmlkCiAgICAgICAgdWludDggYXZhbGlhYmxlX3Nlc3Npb25fc2xvdHMgPSBtYXhfc2xvdHMgLSBsYXN0X3Nsb3Q7CiAgICAgICAgCgogICAgICAgIGlmIChkZXBvc2l0X2JpZHMgPCBhdmFsaWFibGVfc2Vzc2lvbl9zbG90cykgewogICAgICAgICAgICBiaWQocGxheWVyLCBkZXBvc2l0X2JpZHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQ4IG1heF9hdmFsaWFibGVfc2xvdHMgPSAoYXZhbGlhYmxlX3Nlc3Npb25fc2xvdHMgKyBtYXhfc2xvdHMgLSAxKTsKICAgICAgICAgICAgaWYgKGRlcG9zaXRfYmlkcyA+IG1heF9hdmFsaWFibGVfc2xvdHMpIHsgLy9vdmVyZmxvdwogICAgICAgICAgICAgICAgdWludDI1NiBtYXhfYmlkX2V0aCA9IHByaWNlX3RpY2tldC5tdWwobWF4X2F2YWxpYWJsZV9zbG90cyk7CiAgICAgICAgICAgICAgICB1aW50MjU2IGV4Y2VlZF9vdmVyX2V0aCA9IGRlcG9zaXRfZXRoLnN1YihtYXhfYmlkX2V0aCk7CiAgICAgICAgICAgICAgICByZW1vdmVfZXhjZWVkKGV4Y2VlZF9vdmVyX2V0aCk7CiAgICAgICAgICAgICAgICBkZXBvc2l0X2JpZHMgPSBtYXhfYXZhbGlhYmxlX3Nsb3RzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQ4IHNlY29uZF9zZXNzaW9uX2JpZHNfY291bnQgPSBkZXBvc2l0X2JpZHMgLSBhdmFsaWFibGVfc2Vzc2lvbl9zbG90czsKICAgICAgICAgICAgCiAgICAgICAgICAgIGJpZChwbGF5ZXIsIGF2YWxpYWJsZV9zZXNzaW9uX3Nsb3RzKTsKICAgICAgICAgICAgcGxheW91dCgpOwogICAgICAgICAgICBpZiAoc2Vjb25kX3Nlc3Npb25fYmlkc19jb3VudCA+IDApIHsKICAgICAgICAgICAgICAgIGJpZChwbGF5ZXIsIHNlY29uZF9zZXNzaW9uX2JpZHNfY291bnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbigpIHBheWFibGUgcHVibGljIHsKICAgICAgICBydW4obXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgICAgICAKICAgIH0KCn0='.
	

]
