Class {
	#name : #SRTb49d44f5005bb1126f64429daf4ebe264eac6ba4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb49d44f5005bb1126f64429daf4ebe264eac6ba4 >> base64 [
	^ ''.
	

]
