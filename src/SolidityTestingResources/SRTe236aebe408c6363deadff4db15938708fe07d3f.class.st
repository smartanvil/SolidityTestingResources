Class {
	#name : #SRTe236aebe408c6363deadff4db15938708fe07d3f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe236aebe408c6363deadff4db15938708fe07d3f >> base64 [
	^ ''.
	

]
