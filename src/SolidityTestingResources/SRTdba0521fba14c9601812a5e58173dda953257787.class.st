Class {
	#name : #SRTdba0521fba14c9601812a5e58173dda953257787,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdba0521fba14c9601812a5e58173dda953257787 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBTTUlOVCB7CiAgICBzdHJ1Y3QgSW52b2ljZSB7CiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeTsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICBhZGRyZXNzIHBheWVyOwogICAgfQogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdTTUlOVCc7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdTTUlOVCc7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludCBwdWJsaWMgY3VycmVudEludm9pY2UgPSAwOwogICAgdWludCBwdWJsaWMgbGFzdEVmZmljaWVudEJsb2NrTnVtYmVyOwogICAgCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGZyb3plbkJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHN1Y2Nlc3Nlc09mOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgZmFpbHNPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgcHVibGljIGFsbG93YW5jZTsKICAgIG1hcHBpbmcgKHVpbnQgPT4gSW52b2ljZSkgcHVibGljIGludm9pY2VzOwogICAgCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgCiAgICBldmVudCBNaW5lKGFkZHJlc3MgaW5kZXhlZCBtaW5lciwgdWludCB2YWx1ZSwgdWludCByZXdhcmRBZGRpdGlvbik7CiAgICBldmVudCBCaWxsKHVpbnQgaW52b2ljZUlkKTsKICAgIGV2ZW50IFBheSh1aW50IGluZGV4ZWQgaW52b2ljZUlkKTsKCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFNNSU5UKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgICAgICAgbGFzdEVmZmljaWVudEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyOwogICAgfQogICAgCiAgICAvKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIC8qIFVuZnJlZXplIG5vdCBtb3JlIHRoYW4gX3ZhbHVlIHRva2VucyAqLwogICAgZnVuY3Rpb24gX3VuZnJlZXplTWF4VG9rZW5zKHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBhbW91bnQgPSBmcm96ZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPiBfdmFsdWUgPyBfdmFsdWUgOiBmcm96ZW5CYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsKICAgICAgICAgICAgZnJvemVuQmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IGFtb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyQW5kRnJlZXplKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seU93bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW293bmVyXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoZnJvemVuQmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBmcm96ZW5CYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgYmFsYW5jZU9mW293bmVyXSAtPSBfdmFsdWU7CiAgICAgICAgZnJvemVuQmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG93bmVyLCB0aGlzLCBfdmFsdWUpOwogICAgfQogICAgCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBiaWxsKHVpbnQgX2Ftb3VudCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOwogICAgICAgIGludm9pY2VzW2N1cnJlbnRJbnZvaWNlXSA9IEludm9pY2UoewogICAgICAgICAgICBiZW5lZmljaWFyeTogbXNnLnNlbmRlciwKICAgICAgICAgICAgYW1vdW50OiBfYW1vdW50LAogICAgICAgICAgICBwYXllcjogMHgwCiAgICAgICAgfSk7CiAgICAgICAgQmlsbChjdXJyZW50SW52b2ljZSk7CiAgICAgICAgY3VycmVudEludm9pY2UrKzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcGF5KHVpbnQgX2ludm9pY2VJZCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX2ludm9pY2VJZCA8IGN1cnJlbnRJbnZvaWNlKTsKICAgICAgICByZXF1aXJlKGludm9pY2VzW19pbnZvaWNlSWRdLnBheWVyID09IDB4MCk7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIGludm9pY2VzW19pbnZvaWNlSWRdLmJlbmVmaWNpYXJ5LCBpbnZvaWNlc1tfaW52b2ljZUlkXS5hbW91bnQpOwogICAgICAgIGludm9pY2VzW19pbnZvaWNlSWRdLnBheWVyID0gbXNnLnNlbmRlcjsKICAgICAgICBQYXkoX2ludm9pY2VJZCk7CiAgICB9CiAgICAKICAgIC8qIFRyYW5zZmVyIHRva2VucyBmcm9tIG90aGVyIGFkZHJlc3MgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAvKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHVpbnQgbWluZWRBdEJsb2NrID0gdWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gMSkpOwogICAgICAgIHVpbnQgbWluZWRIYXNoUmVsID0gdWludChzaGEyNTYobWluZWRBdEJsb2NrICsgdWludChtc2cuc2VuZGVyKSArIGJsb2NrLnRpbWVzdGFtcCkpICUgMTAwMDAwMDsKICAgICAgICB1aW50IGJhbGFuY2VSZWwgPSAoYmFsYW5jZU9mW21zZy5zZW5kZXJdICsgZnJvemVuQmFsYW5jZU9mW21zZy5zZW5kZXJdKSAqIDEwMDAwMDAgLyB0b3RhbFN1cHBseTsKICAgICAgICBpZiAoYmFsYW5jZVJlbCA+IDApIHsKICAgICAgICAgICAgdWludCBrID0gYmFsYW5jZVJlbDsKICAgICAgICAgICAgaWYgKGsgPiAyNTUpIHsKICAgICAgICAgICAgICAgIGsgPSAyNTU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgayA9IDIgKiogazsKICAgICAgICAgICAgYmFsYW5jZVJlbCA9IDUwMDAwMCAvIGs7CiAgICAgICAgICAgIGJhbGFuY2VSZWwgPSA1MDAwMDAgLSBiYWxhbmNlUmVsOwogICAgICAgICAgICBpZiAobWluZWRIYXNoUmVsIDwgYmFsYW5jZVJlbCkgewogICAgICAgICAgICAgICAgdWludCByZXdhcmQgPSAxMDAwMDAwMDAwMDAwMDAwMDAgKyBtaW5lZEhhc2hSZWwgKiAxMDAwMDAwMDAwMDAwMDAwOwogICAgICAgICAgICAgICAgdWludCByZXdhcmRBZGRpdGlvbiA9IHJld2FyZCAqIChibG9jay5udW1iZXIgLSBsYXN0RWZmaWNpZW50QmxvY2tOdW1iZXIpICogMTk3IC8gMTAwMDAwMDsKICAgICAgICAgICAgICAgIHJld2FyZCArPSByZXdhcmRBZGRpdGlvbjsKICAgICAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSByZXdhcmQ7CiAgICAgICAgICAgICAgICB0b3RhbFN1cHBseSArPSByZXdhcmQ7CiAgICAgICAgICAgICAgICBfdW5mcmVlemVNYXhUb2tlbnMocmV3YXJkKTsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIHJld2FyZCk7CiAgICAgICAgICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCByZXdhcmQpOwogICAgICAgICAgICAgICAgTWluZShtc2cuc2VuZGVyLCByZXdhcmQsIHJld2FyZEFkZGl0aW9uKTsKICAgICAgICAgICAgICAgIHN1Y2Nlc3Nlc09mW21zZy5zZW5kZXJdKys7CiAgICAgICAgICAgICAgICBsYXN0RWZmaWNpZW50QmxvY2tOdW1iZXIgPSBibG9jay5udW1iZXI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBNaW5lKG1zZy5zZW5kZXIsIDAsIDApOwogICAgICAgICAgICAgICAgZmFpbHNPZlttc2cuc2VuZGVyXSsrOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQp9'.
	

]
