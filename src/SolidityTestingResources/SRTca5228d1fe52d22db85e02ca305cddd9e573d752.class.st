Class {
	#name : #SRTca5228d1fe52d22db85e02ca305cddd9e573d752,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca5228d1fe52d22db85e02ca305cddd9e573d752 >> base64 [
	^ ''.
	

]
