Class {
	#name : #SRT1d0dcc8d8bcafa8e8502beaeef6cbd49d3affcdc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d0dcc8d8bcafa8e8502beaeef6cbd49d3affcdc >> base64 [
	^ ''.
	

]
