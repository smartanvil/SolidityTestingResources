Class {
	#name : #SRT4e260e3ca268e40133c84b142de73108a7c1ec99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e260e3ca268e40133c84b142de73108a7c1ec99 >> base64 [
	^ ''.
	

]
