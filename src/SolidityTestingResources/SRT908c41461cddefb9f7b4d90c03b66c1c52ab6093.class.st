Class {
	#name : #SRT908c41461cddefb9f7b4d90c03b66c1c52ab6093,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT908c41461cddefb9f7b4d90c03b66c1c52ab6093 >> base64 [
	^ ''.
	

]
