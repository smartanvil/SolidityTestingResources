Class {
	#name : #SRT73b958200ca61991556324cdf2f315ce2ae08698,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73b958200ca61991556324cdf2f315ce2ae08698 >> base64 [
	^ ''.
	

]
