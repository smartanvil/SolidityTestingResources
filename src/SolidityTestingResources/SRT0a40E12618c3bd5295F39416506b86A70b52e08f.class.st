Class {
	#name : #SRT0a40E12618c3bd5295F39416506b86A70b52e08f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a40E12618c3bd5295F39416506b86A70b52e08f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyogSW50ZXJmYWNlIG9mIHRoZSBFUkMyMjMgdG9rZW4gKi8KY29udHJhY3QgRVJDMjIzVG9rZW5JbnRlcmZhY2UgewogICAgZnVuY3Rpb24gbmFtZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBfbmFtZSk7CiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCk7CiAgICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4IF9kZWNpbWFscyk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3N1cHBseSk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIF9zdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9yZW1haW5pbmcpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9tZXRhZGF0YSkgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIF9zdWNjZXNzKTsKCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSwgYnl0ZXMgbWV0YWRhdGEpOwp9CgoKLyogSW50ZXJmYWNlIG9mIHRoZSBjb250cmFjdCB0aGF0IGlzIGdvaW5nIHRvIHJlY2VpdmUgRVJDMjIzIHRva2VucyAqLwpjb250cmFjdCBFUkMyMjNDb250cmFjdEludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBlcmMyMjNGYWxsYmFjayhhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEpewogICAgICAgIC8vIHRvIGF2b2lkIHdhcm5pbmdzIGR1cmluZyBjb21waWxhdGlvbgogICAgICAgIF9mcm9tID0gX2Zyb207CiAgICAgICAgX3ZhbHVlID0gX3ZhbHVlOwogICAgICAgIF9kYXRhID0gX2RhdGE7CiAgICAgICAgLy8gSW5jb21pbmcgdHJhbnNhY3Rpb24gY29kZSBoZXJlCiAgICAgICAgdGhyb3c7CiAgICB9Cn0KCgovKiBodHRwczovL2dpdGh1Yi5jb20vTHlra2VDaXR5L0V0aGVyZXVtQXBpRG90TmV0Q29yZS9ibG9iL21hc3Rlci9zcmMvQ29udHJhY3RCdWlsZGVyL2NvbnRyYWN0cy90b2tlbi9TYWZlTWF0aC5zb2wgKi8KY29udHJhY3QgU2FmZU1hdGggewogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgTUFYX1VJTlQyNTYgPQogICAgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGOwoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLSB5KSB0aHJvdzsKICAgICAgICByZXR1cm4geCArIHk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgaWYgKHggPCB5KSB0aHJvdzsKICAgICAgICByZXR1cm4geCAtIHk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgaWYgKHkgPT0gMCkgcmV0dXJuIDA7CiAgICAgICAgaWYgKHggPiBNQVhfVUlOVDI1NiAvIHkpIHRocm93OwogICAgICAgIHJldHVybiB4ICogeTsKICAgIH0KfQoKCmNvbnRyYWN0IEVSQzIyM1Rva2VuIGlzIEVSQzIyM1Rva2VuSW50ZXJmYWNlLCBTYWZlTWF0aCB7CgogICAgLyoKICAgICAgU3RvcmFnZSBvZiB0aGUgY29udHJhY3QKICAgICovCgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dhbmNlczsKCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKCiAgICAvKgogICAgICBHZXR0ZXJzCiAgICAqLwoKICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX25hbWUpIHsKICAgICAgICByZXR1cm4gbmFtZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCkgewogICAgICAgIHJldHVybiBzeW1ib2w7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCBfZGVjaW1hbHMpIHsKICAgICAgICByZXR1cm4gZGVjaW1hbHM7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9zdXBwbHkpIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgoKICAgIC8qCiAgICAgIEFsbG93IHRvIHNwZW5kCiAgICAqLwoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VzW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3JlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2FuY2VzW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKCiAgICAvKgogICAgICBUcmFuc2ZlcgogICAgKi8KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICBieXRlcyBtZW1vcnkgZW1wdHlNZXRhZGF0YTsKICAgICAgICBfX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBlbXB0eU1ldGFkYXRhKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9tZXRhZGF0YSkgcmV0dXJucyAoYm9vbCBfc3VjY2VzcykKICAgIHsKICAgICAgICBfX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBfbWV0YWRhdGEpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBfbWV0YWRhdGEpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICBpZiAoYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OwoKICAgICAgICBhbGxvd2FuY2VzW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGVtcHR5TWV0YWRhdGE7CiAgICAgICAgX190cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUsIGVtcHR5TWV0YWRhdGEpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfbWV0YWRhdGEpIGludGVybmFsCiAgICB7CiAgICAgICAgaWYgKF9mcm9tID09IF90bykgdGhyb3c7CiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB0aHJvdzsKICAgICAgICBpZiAoYmFsYW5jZU9mKF9mcm9tKSA8IF92YWx1ZSkgdGhyb3c7CgogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZU9mKF9mcm9tKSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlT2YoX3RvKSwgX3ZhbHVlKTsKCiAgICAgICAgaWYgKGlzQ29udHJhY3QoX3RvKSkgewogICAgICAgICAgICBFUkMyMjNDb250cmFjdEludGVyZmFjZSByZWNlaXZlckNvbnRyYWN0ID0gRVJDMjIzQ29udHJhY3RJbnRlcmZhY2UoX3RvKTsKICAgICAgICAgICAgcmVjZWl2ZXJDb250cmFjdC5lcmMyMjNGYWxsYmFjayhfZnJvbSwgX3ZhbHVlLCBfbWV0YWRhdGEpOwogICAgICAgIH0KCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCgogICAgLyoKICAgICAgSGVscGVycwogICAgKi8KCiAgICAvLyBBc3NlbWJsZSB0aGUgZ2l2ZW4gYWRkcmVzcyBieXRlY29kZS4gSWYgYnl0ZWNvZGUgZXhpc3RzIHRoZW4gdGhlIF9hZGRyIGlzIGEgY29udHJhY3QuCiAgICBmdW5jdGlvbiBpc0NvbnRyYWN0KGFkZHJlc3MgX2FkZHIpIGludGVybmFsIHJldHVybnMgKGJvb2wgX2lzQ29udHJhY3QpIHsKICAgICAgICBfYWRkciA9IF9hZGRyOyAvLyB0byBhdm9pZCB3YXJuaW5ncyBkdXJpbmcgY29tcGlsYXRpb24KCiAgICAgICAgdWludDI1NiBsZW5ndGg7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAvL3JldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5CiAgICAgICAgICAgIGxlbmd0aCA6PSBleHRjb2Rlc2l6ZShfYWRkcikKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChsZW5ndGggPiAwKTsKICAgIH0KfQoKY29udHJhY3QgREFTVG9rZW4gaXMgRVJDMjIzVG9rZW4gewogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBibG9ja2VkQWNjb3VudHM7CiAgICBhZGRyZXNzIHB1YmxpYyBzZWNyZXRhcnlHZW5lcmFsOwoKCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gREFTVG9rZW4oCiAgICAgICAgICAgIHN0cmluZyBfbmFtZSwKICAgICAgICAgICAgc3RyaW5nIF9zeW1ib2wsCiAgICAgICAgICAgIHVpbnQ4IF9kZWNpbWFscywKICAgICAgICAgICAgdWludDI1NiBfdG90YWxTdXBwbHksCiAgICAgICAgICAgIGFkZHJlc3MgX2luaXRpYWxUb2tlbnNIb2xkZXIpIHsKICAgICAgICBzZWNyZXRhcnlHZW5lcmFsID0gbXNnLnNlbmRlcjsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgICAgICB0b3RhbFN1cHBseSA9IF90b3RhbFN1cHBseTsKICAgICAgICBiYWxhbmNlc1tfaW5pdGlhbFRva2Vuc0hvbGRlcl0gPSBfdG90YWxTdXBwbHk7CiAgICB9CgoKICAgIG1vZGlmaWVyIG9ubHlTZWNyZXRhcnlHZW5lcmFsIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBzZWNyZXRhcnlHZW5lcmFsKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBibG9jayBhY2NvdW50CiAgICBmdW5jdGlvbiBibG9ja0FjY291bnQoYWRkcmVzcyBfYWNjb3VudCkgb25seVNlY3JldGFyeUdlbmVyYWwgewogICAgICAgIGJsb2NrZWRBY2NvdW50c1tfYWNjb3VudF0gPSB0cnVlOwogICAgfQoKICAgIC8vIHVuYmxvY2sgYWNjb3VudAogICAgZnVuY3Rpb24gdW5ibG9ja0FjY291bnQoYWRkcmVzcyBfYWNjb3VudCkgb25seVNlY3JldGFyeUdlbmVyYWwgewogICAgICAgIGJsb2NrZWRBY2NvdW50c1tfYWNjb3VudF0gPSBmYWxzZTsKICAgIH0KCiAgICAvLyBjaGVjayBpcyBhY2NvdW50IGJsb2NrZWQKICAgIGZ1bmN0aW9uIGlzQWNjb3VudEJsb2NrZWQoYWRkcmVzcyBfYWNjb3VudCkgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgcmV0dXJuIGJsb2NrZWRBY2NvdW50c1tfYWNjb3VudF07CiAgICB9CgogICAgLy8gb3ZlcnJpZGUgdHJhbnNmZXIgbWV0aG9kcyB0byB0aHJvdyBvbiBibG9ja2VkIGFjY291bnRzCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmxvY2tlZEFjY291bnRzW21zZy5zZW5kZXJdKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX21ldGFkYXRhKSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICAgICAgaWYgKGJsb2NrZWRBY2NvdW50c1ttc2cuc2VuZGVyXSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlLCBfbWV0YWRhdGEpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmxvY2tlZEFjY291bnRzW19mcm9tXSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQp9'.
	

]
