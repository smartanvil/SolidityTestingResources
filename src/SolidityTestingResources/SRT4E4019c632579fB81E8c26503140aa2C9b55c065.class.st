Class {
	#name : #SRT4E4019c632579fB81E8c26503140aa2C9b55c065,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4E4019c632579fB81E8c26503140aa2C9b55c065 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8vL2FkZHJlc3MgLT4gdWludDI1NiBtYXBwaW5nLgpsaWJyYXJ5IEl0ZXJhYmxlTWFwcGluZwp7CiAgICBzdHJ1Y3QgSW5kZXhWYWx1ZSB7IHVpbnQga2V5SW5kZXg7IHVpbnQgdmFsdWU7IH0KICAgIHN0cnVjdCBLZXlGbGFnIHsgYWRkcmVzcyBrZXk7IGJvb2wgZGVsZXRlZDsgfQogICAgc3RydWN0IGl0bWFwCiAgICB7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IEluZGV4VmFsdWUpIGRhdGE7CiAgICAgICAgS2V5RmxhZ1tdIGtleXM7CiAgICAgICAgdWludCBzaXplOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydChpdG1hcCBzdG9yYWdlIHNlbGYsIGFkZHJlc3Mga2V5LCB1aW50IHZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHJlcGxhY2VkKQogICAgewogICAgICAgIHVpbnQga2V5SW5kZXggPSBzZWxmLmRhdGFba2V5XS5rZXlJbmRleDsKICAgICAgICBzZWxmLmRhdGFba2V5XS52YWx1ZSA9IHZhbHVlOwogICAgICAgIGlmIChrZXlJbmRleCA+IDApCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGtleUluZGV4ID0gc2VsZi5rZXlzLmxlbmd0aCsrOwogICAgICAgICAgICBzZWxmLmRhdGFba2V5XS5rZXlJbmRleCA9IGtleUluZGV4ICsgMTsKICAgICAgICAgICAgc2VsZi5rZXlzW2tleUluZGV4XS5rZXkgPSBrZXk7CiAgICAgICAgICAgIHNlbGYuc2l6ZSsrOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gcmVtb3ZlKGl0bWFwIHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBrZXkpIGludGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICB1aW50IGtleUluZGV4ID0gc2VsZi5kYXRhW2tleV0ua2V5SW5kZXg7CiAgICAgICAgaWYgKGtleUluZGV4ID09IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBkZWxldGUgc2VsZi5kYXRhW2tleV07CiAgICAgICAgc2VsZi5rZXlzW2tleUluZGV4IC0gMV0uZGVsZXRlZCA9IHRydWU7CiAgICAgICAgc2VsZi5zaXplIC0tOwogICAgfQogICAgZnVuY3Rpb24gY29udGFpbnMoaXRtYXAgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGtleSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZi5kYXRhW2tleV0ua2V5SW5kZXggPiAwOwogICAgfQogICAgZnVuY3Rpb24gaXRlcmF0ZV9zdGFydChpdG1hcCBzdG9yYWdlIHNlbGYpIGludGVybmFsIHJldHVybnMgKHVpbnQga2V5SW5kZXgpCiAgICB7CiAgICAgICAgcmV0dXJuIGl0ZXJhdGVfbmV4dChzZWxmLCB1aW50KC0xKSk7CiAgICB9CiAgICBmdW5jdGlvbiBpdGVyYXRlX3ZhbGlkKGl0bWFwIHN0b3JhZ2Ugc2VsZiwgdWludCBrZXlJbmRleCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4ga2V5SW5kZXggPCBzZWxmLmtleXMubGVuZ3RoOwogICAgfQogICAgZnVuY3Rpb24gaXRlcmF0ZV9uZXh0KGl0bWFwIHN0b3JhZ2Ugc2VsZiwgdWludCBrZXlJbmRleCkgaW50ZXJuYWwgcmV0dXJucyAodWludCByX2tleUluZGV4KQogICAgewogICAgICAgIGtleUluZGV4Kys7CiAgICAgICAgd2hpbGUgKGtleUluZGV4IDwgc2VsZi5rZXlzLmxlbmd0aCAmJiBzZWxmLmtleXNba2V5SW5kZXhdLmRlbGV0ZWQpCiAgICAgICAgICAgIGtleUluZGV4Kys7CiAgICAgICAgcmV0dXJuIGtleUluZGV4OwogICAgfQogICAgZnVuY3Rpb24gaXRlcmF0ZV9nZXQoaXRtYXAgc3RvcmFnZSBzZWxmLCB1aW50IGtleUluZGV4KSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzIGtleSwgdWludCB2YWx1ZSkKICAgIHsKICAgICAgICBrZXkgPSBzZWxmLmtleXNba2V5SW5kZXhdLmtleTsKICAgICAgICB2YWx1ZSA9IHNlbGYuZGF0YVtrZXldLnZhbHVlOwogICAgfQp9CgovKioKICpNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCl7CiAgICAgICAgdWludCBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PWIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIC8vYXNzZXJ0KGIgPiAwKTsgLy9Tb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50IGMgPSBhL2I7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhJSBiKTsgLy9UaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYXNzZXJ0KGI8PWEpOwogICAgICAgIHJldHVybiBhLWI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICAgICAgaWYoIWFzc2VydGlvbil7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KfQoKCi8qKgogKiB0aXRsZSBFUkMyMCBCYXNpYwogKiBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKgogKi8KY29udHJhY3QgRVJDMjBCYXNpY3sKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwp9CgoKLyoqCiAqIHRpdGxlIEJhc2ljIHRva2VuCiAqIGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIGVpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIC8qKgogICAgKiBkZXYgRml4IGZvciBlaHQgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICAqLwogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KXsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9Cn0KCgovKioKKiB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKKiBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKfQoKCi8qKgoqIHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCioKKiBkZXYgSW1wbGVtYW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJ0IHRva2VuLgoqIGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKKiBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOmh0dHA6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCioqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEJhc2ljVG9rZW4sIEVSQzIwewogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgdWludCB2YWx1ZSk7CiAgICBldmVudCBEaXZpZGVuZHMoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKCiAgICAvKioKICAgICogZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlYWhsZiBvZiBtc2cuc2VuZGVyLgogICAgKiBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICogcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHsKICAgICAgICAvL1RvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXMKICAgICAgICAvLyBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGFwcHJvdmUoX3NwZW5kZXIsIDApIGlmIGlmIGl0IG5vdAogICAgICAgIC8vIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VzY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93OwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICogZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW4gcmhhbiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICogcGFyYW0gX293bmVyIGFkZHJlc3MgVGhyIGFkZHJlc3Mgd2hpdmggb3ducyB0aGUgZnVuZHMuCiAgICAqIHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAqIHJldHVybiBBIHVpbnQgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rcm5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgKiovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gT3duYWJsZSgpewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKXsKICAgICAgICBpZihtc2cuc2VuZGVyICE9IG93bmVyKXsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgovLyAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXJ7Ci8vICAgICAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSl7Ci8vICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKLy8gICAgICAgIH0KLy8gICAgfQp9Cgpjb250cmFjdCBHbG9iYWxDb2luIGlzIE93bmFibGUsIFN0YW5kYXJkVG9rZW57CiAgICB1aW50MjU2IHB1YmxpYyBkZWNpbWFscyA9IDg7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiR0JDVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiR0JDIjsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMDAwMDAwMDsvLzHlkI7pnaIxNeS4qjAgLOWPkeihjDEwMDDvvIwwMDAwIO+8jOWQjumdouaYrzAwMDAwMDAwLOWvueW6lOWwj+aVsOeCueWQjjjkuKowCiAgICBhZGRyZXNzIHB1YmxpYyBkaXZpZGVuZEFkZHJlc3MgPSAweDFEMzM3NzZhMDkwYTJGMzIxRkY1OTZDMEMwMTFGMmY0MTRmM0E1Mjc7Ly/liIbnuqLlnLDlnYAKICAgIGFkZHJlc3MgcHVibGljIGJ1cm5BZGRyZXNzID0gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOyAvL+mUgOavgUdCQ+WcsOWdgAogICAgdWludDI1NiBwcml2YXRlIGdsb2JhbFNoYXJlcyA9IDA7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgdmlwczsKICAgIHVzaW5nIEl0ZXJhYmxlTWFwcGluZyBmb3IgSXRlcmFibGVNYXBwaW5nLml0bWFwOwogICAgSXRlcmFibGVNYXBwaW5nLml0bWFwIHB1YmxpYyBkYXRhOwogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgbW9kaWZpZXIgbm9FdGgoKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CiAgICBmdW5jdGlvbigpIHsKICAgICAgICAvLyDlvZPmnInkurrlj5HpgIFldGjmiJbogIVUb2tlbu+8jOS8muinpuWPkei/meS4quS6i+S7tgogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKQogICAgICAgICAgICBUcmFuc2ZlckZyb20obXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnQoYWRkcmVzcyBrLCB1aW50IHYpIGludGVybmFsIHJldHVybnMgKHVpbnQgc2l6ZSkKICAgIHsKICAgICAgICBJdGVyYWJsZU1hcHBpbmcuaW5zZXJ0KGRhdGEsIGssIHYpOwogICAgICAgIHJldHVybiBkYXRhLnNpemU7CiAgICB9CiAgICAgICAgLy/pooTorqHliIblpJrlsJHnuqIKICAgIGZ1bmN0aW9uIGV4cGVjdGVkRGl2aWRlbmRzKGFkZHJlc3MgdXNlcikgY29uc3RhbnQgcmV0dXJucyAodWludCBEaXZpZGVuZHMpewogICAgICAgIHJldHVybiBiYWxhbmNlc1tkaXZpZGVuZEFkZHJlc3NdIC8gZ2xvYmFsU2hhcmVzICogdmlwc1t1c2VyXTsKICAgIH0KCi8vICAgIC8v5pi+56S65pyJ5aSa5bCRR0JDCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBhZGRyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbYWRkcl07CiAgICB9CiAgICAvL+aYvuekuuacieWkmuWwkeiCoQogICAgZnVuY3Rpb24geW91clNoYXJlcyhhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc2hhcmVzKSB7CiAgICAgICAgcmV0dXJuIHZpcHNbYWRkcl07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpCiAgICB7CiAgICAgICAgaWYgKHRvID09IGJ1cm5BZGRyZXNzKSB7CiAgICAgICAgICAgIHJldHVybiBidXJuKGFtb3VudCk7CiAgICAgICAgfQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZChhbW91bnQpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCBhbW91bnQpOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgewogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy9DaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgZnVuY3Rpb24gYnVybiAodWludDI1NiBhbW91bnQpIC8v6I635b6X5YiG57qiCiAgICB7CiAgICAgICAgaWYgKGFtb3VudCA+PSAxMDAwMDAwMDAwMDApIHsKICAgICAgICAgICAgdmlwc1ttc2cuc2VuZGVyXSArPSBhbW91bnQgLyAxMDAwMDAwMDAwMDA7CiAgICAgICAgICAgIGdsb2JhbFNoYXJlcyArPSBhbW91bnQgLyAxMDAwMDAwMDAwMDA7CiAgICAgICAgICAgIGluc2VydChtc2cuc2VuZGVyLCB2aXBzW21zZy5zZW5kZXJdKTsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoYW1vdW50KTsKICAgICAgICAgICAgYmFsYW5jZXNbYnVybkFkZHJlc3NdID0gYmFsYW5jZXNbYnVybkFkZHJlc3NdLmFkZChhbW91bnQpOwogICAgICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIGJ1cm5BZGRyZXNzLCBhbW91bnQpOwogICAgICAgIH0KICAgIH0KCgogICAgLy/mn6XnnIvlhajnkIPkuIDlhbHlpJrlsJHogqEKICAgIGZ1bmN0aW9uIHRvdGFsU2hhcmVzKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzaGFyZXMpewogICAgICAgIHJldHVybiBnbG9iYWxTaGFyZXM7CiAgICB9CgoKICAgIC8v5Li65q+P5Liq6IKh5rCR5Y+R6YCB5YiG57qiCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlRGl2aWRlbmRzKCkgb25seU93bmVyIHB1YmxpYyBub0V0aCgpewogICAgICAgIGZvciAodmFyIGkgPSBJdGVyYWJsZU1hcHBpbmcuaXRlcmF0ZV9zdGFydChkYXRhKTsgSXRlcmFibGVNYXBwaW5nLml0ZXJhdGVfdmFsaWQoZGF0YSwgaSk7IGkgPSBJdGVyYWJsZU1hcHBpbmcuaXRlcmF0ZV9uZXh0KGRhdGEsIGkpKQogICAgICAgIHsKICAgICAgICAgICAgdmFyIChrZXksIHZhbHVlKSA9IEl0ZXJhYmxlTWFwcGluZy5pdGVyYXRlX2dldChkYXRhLCBpKTsKICAgICAgICAgICAgdWludCB0bXAgPSBiYWxhbmNlc1tkaXZpZGVuZEFkZHJlc3NdIC8gZ2xvYmFsU2hhcmVzICogdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW2tleV0gPSBiYWxhbmNlc1trZXldLmFkZCh0bXApOwogICAgICAgICAgICBEaXZpZGVuZHMoZGl2aWRlbmRBZGRyZXNzLCBrZXksIHRtcCk7CiAgICAgICAgfQogICAgICAgIGJhbGFuY2VzW2RpdmlkZW5kQWRkcmVzc10gPSBiYWxhbmNlc1tkaXZpZGVuZEFkZHJlc3NdLnN1YihiYWxhbmNlc1tkaXZpZGVuZEFkZHJlc3NdIC8gZ2xvYmFsU2hhcmVzICogZ2xvYmFsU2hhcmVzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBHbG9iYWxDb2luKCkgb25seU93bmVyIHsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSB0b3RhbFN1cHBseTsKICAgIH0KCn0='.
	

]
