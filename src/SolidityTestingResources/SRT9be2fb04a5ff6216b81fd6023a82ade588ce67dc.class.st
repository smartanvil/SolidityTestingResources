Class {
	#name : #SRT9be2fb04a5ff6216b81fd6023a82ade588ce67dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9be2fb04a5ff6216b81fd6023a82ade588ce67dc >> base64 [
	^ ''.
	

]
