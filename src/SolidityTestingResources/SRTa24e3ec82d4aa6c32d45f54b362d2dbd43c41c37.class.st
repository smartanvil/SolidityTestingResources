Class {
	#name : #SRTa24e3ec82d4aa6c32d45f54b362d2dbd43c41c37,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa24e3ec82d4aa6c32d45f54b362d2dbd43c41c37 >> base64 [
	^ ''.
	

]
