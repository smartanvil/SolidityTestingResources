Class {
	#name : #SRT75096895714C15a0E31686b73eFD16FB108F4aDE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT75096895714C15a0E31686b73eFD16FB108F4aDE >> base64 [
	^ ''.
	

]
