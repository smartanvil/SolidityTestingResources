Class {
	#name : #SRTcb4fc459c926e5e10b698009f6f3c1ed658faef7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb4fc459c926e5e10b698009f6f3c1ed658faef7 >> base64 [
	^ ''.
	

]
