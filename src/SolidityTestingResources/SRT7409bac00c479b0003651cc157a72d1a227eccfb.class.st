Class {
	#name : #SRT7409bac00c479b0003651cc157a72d1a227eccfb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7409bac00c479b0003651cc157a72d1a227eccfb >> base64 [
	^ ''.
	

]
