Class {
	#name : #SRTfE38739c4b70cD6D1d3674E70d17fB1999CB4F9F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfE38739c4b70cD6D1d3674E70d17fB1999CB4F9F >> base64 [
	^ ''.
	

]
