Class {
	#name : #SRTc85b0c4874b8f06bfb3f9b65f252d60f962e60b7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc85b0c4874b8f06bfb3f9b65f252d60f962e60b7 >> base64 [
	^ ''.
	

]
