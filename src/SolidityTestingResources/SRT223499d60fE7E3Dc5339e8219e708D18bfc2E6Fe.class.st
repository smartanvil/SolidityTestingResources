Class {
	#name : #SRT223499d60fE7E3Dc5339e8219e708D18bfc2E6Fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT223499d60fE7E3Dc5339e8219e708D18bfc2E6Fe >> base64 [
	^ 'Ly9zb2wgTXlBZHZhbmNlZFRva2VuNwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMzsKLy8gUGV0ZXIncyBUaVRvayBUb2tlbiBDb250cmFjdCBNeUFkdmFuY2VkVG9rZW43IDI1dGggSnVseSAyMDE3Cgpjb250cmFjdCBNeUFkdmFuY2VkVG9rZW43ICB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIHVpbnQyNTYgcHVibGljIHNlbGxQcmljZTsKICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwogCgogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnVG9rZW4gMC4xJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBUaGlzIHVubmFtZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIHNvbWVvbmUgdHJpZXMgdG8gc2VuZCBldGhlciB0byBpdCAqLwogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHJldmVydCgpOyAgICAgLy8gUHJldmVudHMgYWNjaWRlbnRhbCBzZW5kaW5nIG9mIGV0aGVyCiAgICB9CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBNeUFkdmFuY2VkVG9rZW43KAogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwKICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICkgCiAgICB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgbmFtZSA9IHRva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KICAgIAogICAgLyogU2VuZCBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGZyb3plbgogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgIH0KCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W19mcm9tXSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZnJvemVuICAgICAgICAgICAgCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHJldmVydCgpOyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldmVydCgpOyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXZlcnQoKTsgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCBtaW50ZWRBbW91bnQpOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIHRhcmdldCwgbWludGVkQW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICAKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICAKICAgICAgICBzZWxsUHJpY2UgPSBuZXdTZWxsUHJpY2U7CiAgICAgICAgYnV5UHJpY2UgPSBuZXdCdXlQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVzIHRoZSBhbW91bnQKICAgICAgICBpZiAoYmFsYW5jZU9mW3RoaXNdIDwgYW1vdW50KSByZXZlcnQoKTsgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFtb3VudCk7ICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUgYW4gZXZlbnQgcmVmbGVjdGluZyB0aGUgY2hhbmdlCiAgICB9CgogICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IGFtb3VudCkgewogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBhbW91bnQgKSByZXZlcnQoKTsgICAgICAgIC8vIGNoZWNrcyBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICAgIGJhbGFuY2VPZlt0aGlzXSArPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBvd25lcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgdGhlIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UKICAgICAgICAKICAgICAgICAKICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChhbW91bnQgKiBzZWxsUHJpY2UpKSB7ICAgICAgICAvLyBzZW5kcyBldGhlciB0byB0aGUgc2VsbGVyLiBJdCdzIGltcG9ydGFudAogICAgICAgICAgICByZXZlcnQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGRvIHRoaXMgbGFzdCB0byBhdm9pZCByZWN1cnNpb24gYXR0YWNrcwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7ICAgICAgICAgICAgLy8gZXhlY3V0ZXMgYW4gZXZlbnQgcmVmbGVjdGluZyBvbiB0aGUgY2hhbmdlCiAgICAgICAgfSAgICAgICAgICAgICAgIAogICAgfQp9'.
	

]
