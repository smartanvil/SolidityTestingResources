Class {
	#name : #SRTfb1e5f5e984c28ad7e228cdaa1f8a0919bb6a09b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfb1e5f5e984c28ad7e228cdaa1f8a0919bb6a09b >> base64 [
	^ ''.
	

]
