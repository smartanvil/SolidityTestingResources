Class {
	#name : #SRTb65E16b44A80C9c44aDdD56a5014CbA2814a82D1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb65E16b44A80C9c44aDdD56a5014CbA2814a82D1 >> base64 [
	^ ''.
	

]
