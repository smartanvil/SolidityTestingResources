Class {
	#name : #SRT8b7d07b6ffB9364e97B89cEA8b84F94249bE459F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b7d07b6ffB9364e97B89cEA8b84F94249bE459F >> base64 [
	^ ''.
	

]
