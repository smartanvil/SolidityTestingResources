Class {
	#name : #SRTb3bd49e28f8f832b8d1e246106991e546c323502,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb3bd49e28f8f832b8d1e246106991e546c323502 >> base64 [
	^ ''.
	

]
