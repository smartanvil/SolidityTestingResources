Class {
	#name : #SRT64c14e2c286918803de6d965174ca6bc9048eafa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT64c14e2c286918803de6d965174ca6bc9048eafa >> base64 [
	^ ''.
	

]
