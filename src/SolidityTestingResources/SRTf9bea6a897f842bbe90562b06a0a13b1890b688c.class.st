Class {
	#name : #SRTf9bea6a897f842bbe90562b06a0a13b1890b688c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf9bea6a897f842bbe90562b06a0a13b1890b688c >> base64 [
	^ ''.
	

]
