Class {
	#name : #SRT15c1426677d49730a50fee58e50a10a0c13a6fce,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15c1426677d49730a50fee58e50a10a0c13a6fce >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KfQoKCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZDsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGJvb2wgcHVibGljIHRyYW5zZmVyc0VuYWJsZWQ7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAgIC8qKgogICAgKiBQcm90ZWN0aW9uIGFnYWluc3Qgc2hvcnQgYWRkcmVzcyBhdHRhY2sKICAgICovCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBudW13b3JkcykgewogICAgICAgIGFzc2VydChtc2cuZGF0YS5sZW5ndGggPT0gbnVtd29yZHMgKiAzMiArIDQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9Cgp9CgoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKICAgIC8qKgogICAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seVBheWxvYWRTaXplKDMpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwoKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAgKgogICAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgb25seVBheWxvYWRTaXplKDIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLyoqCiAgICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAgICovCiAgICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICAgIH0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGV2ZW50IE93bmVyQ2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgT3duZXJDaGFuZ2VkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCn0KCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkRlbHRhSEZUIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkhGVCI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkOwoKICAgIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICAgICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQsIGFkZHJlc3MgX293bmVyKSBjYW5NaW50IGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX293bmVyXSA9IGJhbGFuY2VzW19vd25lcl0uc3ViKF9hbW91bnQpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihfb3duZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFBldGVyc29uJ3MgTGF3IFByb3RlY3Rpb24KICAgICAqIENsYWltIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIF90b2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgaWYgKF90b2tlbiA9PSAweDApIHsKICAgICAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgTWludGFibGVUb2tlbiB0b2tlbiA9IE1pbnRhYmxlVG9rZW4oX3Rva2VuKTsKICAgICAgICB1aW50MjU2IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIob3duZXIsIGJhbGFuY2UpOwoKICAgICAgICBUcmFuc2ZlcihfdG9rZW4sIG93bmVyLCBiYWxhbmNlKTsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlCiAqIEBkZXYgQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIENyb3dkc2FsZXMgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAqIHRva2VuIHB1cmNoYXNlcy4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqLwpjb250cmFjdCBDcm93ZHNhbGUgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAgIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgICB1aW50MjU2IGludGVybmFsIHN0YXJ0VGltZTsKICAgIHVpbnQyNTYgaW50ZXJuYWwgZW5kVGltZTsKCiAgICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwogICAgdWludDI1NiBwdWJsaWMgdG9rZW5BbGxvY2F0ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyBoYXJkV2VpQ2FwID0gMTQ0MTIgKiAoMTAgKiogMTgpOwoKICAgIGZ1bmN0aW9uIENyb3dkc2FsZSgKICAgIGFkZHJlc3MgX3dhbGxldCwKICAgIHVpbnQyNTYgX3N0YXJ0VGltZSwKICAgIHVpbnQyNTYgX2VuZFRpbWUKICAgICkKICAgIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoX3dhbGxldCAhPSBhZGRyZXNzKDApKTsKICAgICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgICAgIHJlcXVpcmUoMCA8IF9zdGFydFRpbWUgJiYgMCA8IF9lbmRUaW1lKTsKICAgICAgICByZXF1aXJlKF9zdGFydFRpbWUgPCBfZW5kVGltZSk7CiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICB9Cn0KCgpjb250cmFjdCBIRlRDcm93ZHNhbGUgaXMgT3duYWJsZSwgQ3Jvd2RzYWxlLCBNaW50YWJsZVRva2VuIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGVudW0gU3RhdGUge0FjdGl2ZSwgQ2xvc2VkfQogICAgU3RhdGUgcHVibGljIHN0YXRlOwogICAgdWludDI1NltdIHB1YmxpYyByYXRlcyAgPSBbNDAwMCwgICAgMzAwMCwgICAgMjUwMCwgICAgMjAwMCwgICAgMTc1MCwgICAgMTUwMF07CiAgICB1aW50MjU2W10gcHVibGljIGxpbWl0cyA9IFsxKjEwKioyNCwgNyoxMCoqMjQsIDEzKjEwKioyNCwgMTkqMTAqKjI0LCAyNSoxMCoqMjQsIDMwKjEwKioyNF07CiAgICB1aW50MjU2IHdlaU1pblNhbGUgPSAxICogMTAqKjE3OyAvLyAwLjEgRVRICgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZGVwb3NpdGVkOwoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IElOSVRJQUxfU1VQUExZID0gMTAwICogKDEwICoqIDYpICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKICAgIHVpbnQyNTYgcHVibGljIGZ1bmRGb3JTYWxlID0gMzAgKiAoMTAgKiogNikgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwoKICAgIHVpbnQyNTYgcHVibGljIGNvdW50SW52ZXN0b3I7CgogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IFRva2VuTGltaXRSZWFjaGVkKHVpbnQyNTYgdG9rZW5SYWlzZWQsIHVpbnQyNTYgcHVyY2hhc2VkVG9rZW4pOwogICAgZXZlbnQgSGFyZENhcFJlYWNoZWQoKTsKICAgIGV2ZW50IEZpbmFsaXplZCgpOwoKICAgIGZ1bmN0aW9uIEhGVENyb3dkc2FsZSgKICAgIGFkZHJlc3MgX293bmVyLAogICAgdWludDI1NiBfc3RhcnRUaW1lLAogICAgdWludDI1NiBfZW5kVGltZQogICAgKQogICAgcHVibGljCiAgICBDcm93ZHNhbGUoX293bmVyLCBfc3RhcnRUaW1lLCBfZW5kVGltZSkKICAgIHsKCiAgICAgICAgcmVxdWlyZShfb3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZXIgPSBfb3duZXI7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IHRydWU7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5BY3RpdmU7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICBib29sIHJlc3VsdE1pbnRGb3JPd25lciA9IG1pbnRGb3JPd25lcihvd25lcik7CiAgICAgICAgcmVxdWlyZShyZXN1bHRNaW50Rm9yT3duZXIpOwogICAgfQoKICAgIG1vZGlmaWVyIGluU3RhdGUoU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBfc3RhdGUpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgX2ludmVzdG9yKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5BY3RpdmUpIHBheWFibGUgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgcmVxdWlyZShfaW52ZXN0b3IgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgdWludDI1NiBjdXJyZW50VGltZSA9IG5vdzsKICAgICAgICAvL2N1cnJlbnRUaW1lID0gMTUyNDE4MjQwMDsgLy9GcmksIDIwIEFwciAyMDE4IDAwOjAwOjAwIEdNVAogICAgICAgIHJlcXVpcmUoc3RhcnRUaW1lIDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDw9IGVuZFRpbWUpOwogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gdmFsaWRQdXJjaGFzZVRva2Vucyh3ZWlBbW91bnQpOwogICAgICAgIGlmICh0b2tlbnMgPT0gMCkge3JldmVydCgpO30KICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAgICAgdG9rZW5BbGxvY2F0ZWQgPSB0b2tlbkFsbG9jYXRlZC5hZGQodG9rZW5zKTsKICAgICAgICBtaW50KF9pbnZlc3RvciwgdG9rZW5zLCBvd25lcik7CgogICAgICAgIFRva2VuUHVyY2hhc2UoX2ludmVzdG9yLCB3ZWlBbW91bnQsIHRva2Vucyk7CiAgICAgICAgaWYgKGRlcG9zaXRlZFtfaW52ZXN0b3JdID09IDApIHsKICAgICAgICAgICAgY291bnRJbnZlc3RvciA9IGNvdW50SW52ZXN0b3IuYWRkKDEpOwogICAgICAgIH0KICAgICAgICBkZXBvc2l0KF9pbnZlc3Rvcik7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKHdlaUFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRva2VuczsKICAgIH0KCiAgICAvKioKICAgICogcHJlSUNPICAgIDEgRVRIID0gNCwwMDAgdG9rZW5zIC0tIExpbWl0ID0gMCwxMCAgRVRICiAgICAqIDEgU3RhZ2UgICAxIEVUSCA9IDMsMDAwIHRva2VucyAtLSBMaW1pdCA9IDAsMTAgIEVUSAogICAgKiAyIFN0YWdlICAgMSBFVEggPSAyLDUwMCB0b2tlbnMgLS0gTGltaXQgPSAwLDEwICBFVEgKICAgICogMyBTdGFnZSAgIDEgRVRIID0gMiwwMDAgdG9rZW5zIC0tIExpbWl0ID0gMCwxMCAgRVRICiAgICAqIDQgU3RhZ2UgICAxIEVUSCA9IDEsNzUwIHRva2VucyAtLSBMaW1pdCA9IDAsMTAgIEVUSAogICAgKiA1IFN0YWdlICAgMSBFVEggPSAxLDUwMCB0b2tlbnMgLS0gTGltaXQgPSAwLDEwICBFVEgKICAgICoKICAgICogQm9udXMgdG9rZW4gb2YgMTAlIGdpdmVuIHRvIGNvbnRyaWJ1dG9ycyBvZiAxIEVUSCBvciBtb3JlLgogICAgKiBCb251cyB0b2tlbiBvZiAyMCUgZ2l2ZW4gdG8gY29udHJpYnV0b3JzIG9mIDUgRVRIIG9yIG1vcmUKICAgICovCiAgICBmdW5jdGlvbiBnZXRUb3RhbEFtb3VudE9mVG9rZW5zKHVpbnQyNTYgX3dlaUFtb3VudCkgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjdXJyZW50UGVyaW9kID0gZ2V0UGVyaW9kKHRva2VuQWxsb2NhdGVkKTsKICAgICAgICB1aW50MjU2IGFtb3VudE9mVG9rZW5zID0gMDsKICAgICAgICBpZihjdXJyZW50UGVyaW9kIDwgNil7CiAgICAgICAgICAgIGFtb3VudE9mVG9rZW5zID0gX3dlaUFtb3VudC5tdWwocmF0ZXNbY3VycmVudFBlcmlvZF0pOwogICAgICAgICAgICBpZiggMSoxMCoqMTggPD0gX3dlaUFtb3VudCAmJiBfd2VpQW1vdW50IDwgNSoxMCoqMTgpewogICAgICAgICAgICAgICAgYW1vdW50T2ZUb2tlbnMgPSBhbW91bnRPZlRva2Vucy5tdWwoMTEwKS5kaXYoMTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiggNSoxMCoqMTggPD0gX3dlaUFtb3VudCl7CiAgICAgICAgICAgICAgICBhbW91bnRPZlRva2VucyA9IGFtb3VudE9mVG9rZW5zLm11bCgxMjApLmRpdigxMDApOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYW1vdW50T2ZUb2tlbnMgPSAwOwogICAgICAgIH0KICAgICAgICBpZih0b2tlbkFsbG9jYXRlZC5hZGQoYW1vdW50T2ZUb2tlbnMpID4gZnVuZEZvclNhbGUpewogICAgICAgICAgICBhbW91bnRPZlRva2VucyA9IDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhbW91bnRPZlRva2VuczsKICAgIH0KCiAgICAvKioKICAgICogVG90YWwgc3VwcGx5IHRva2VucyBmb3IgcGVyaW9kcwogICAgKiBwcmVJQ08gICAgMSwgMDAwLDAwMCB0b2tlbnMKICAgICogMSBTdGFnZSAgIDcsIDAwMCwwMDAgdG9rZW5zCiAgICAqIDIgU3RhZ2UgICAxMywwMDAsMDAwIHRva2VucwogICAgKiAzIFN0YWdlICAgMTksMDAwLDAwMCB0b2tlbnMKICAgICogNCBTdGFnZSAgIDI1LDAwMCwwMDAgdG9rZW5zCiAgICAqIDUgU3RhZ2UgICAzMCwwMDAsMDAwIHRva2VucwogICAgKgogICAgKi8KICAgIGZ1bmN0aW9uIGdldFBlcmlvZCh1aW50MjU2IGN1cnJlbnRUb2tlbkFsbG9jYXRlZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIGlmKDAgPCBjdXJyZW50VG9rZW5BbGxvY2F0ZWQgJiYgY3VycmVudFRva2VuQWxsb2NhdGVkIDwgbGltaXRzWzBdKXsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIGlmKGN1cnJlbnRUb2tlbkFsbG9jYXRlZCA+IGxpbWl0c1s1XSl7CiAgICAgICAgICAgIHJldHVybiA2OwogICAgICAgIH0KICAgICAgICBmb3IodWludCBpID0gMTsgaSA8IDY7IGkrKyl7CiAgICAgICAgICAgIGlmKGxpbWl0c1tpLTFdIDw9IGN1cnJlbnRUb2tlbkFsbG9jYXRlZCAmJiBjdXJyZW50VG9rZW5BbGxvY2F0ZWQgPCBsaW1pdHNbaV0pewogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZGVwb3NpdChhZGRyZXNzIGludmVzdG9yKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgICAgIGRlcG9zaXRlZFtpbnZlc3Rvcl0gPSBkZXBvc2l0ZWRbaW52ZXN0b3JdLmFkZChtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRGb3JPd25lcihhZGRyZXNzIF93YWxsZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wgcmVzdWx0KSB7CiAgICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICAgICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGJhbGFuY2VzW193YWxsZXRdID0gYmFsYW5jZXNbX3dhbGxldF0uYWRkKElOSVRJQUxfU1VQUExZKTsKICAgICAgICByZXN1bHQgPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldERlcG9zaXRlZChhZGRyZXNzIF9pbnZlc3RvcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgcmV0dXJuIGRlcG9zaXRlZFtfaW52ZXN0b3JdOwogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2VUb2tlbnModWludDI1NiBfd2VpQW1vdW50KSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5BY3RpdmUpIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGFkZFRva2VucyA9IGdldFRvdGFsQW1vdW50T2ZUb2tlbnMoX3dlaUFtb3VudCk7CiAgICAgICAgaWYgKF93ZWlBbW91bnQgPCB3ZWlNaW5TYWxlKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICBpZiAodG9rZW5BbGxvY2F0ZWQuYWRkKGFkZFRva2VucykgPiBmdW5kRm9yU2FsZSkgewogICAgICAgICAgICBUb2tlbkxpbWl0UmVhY2hlZCh0b2tlbkFsbG9jYXRlZCwgYWRkVG9rZW5zKTsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIGlmICh3ZWlSYWlzZWQuYWRkKF93ZWlBbW91bnQpID4gaGFyZFdlaUNhcCkgewogICAgICAgICAgICBIYXJkQ2FwUmVhY2hlZCgpOwogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICByZXR1cm4gYWRkVG9rZW5zOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIG9ubHlPd25lciBpblN0YXRlKFN0YXRlLkFjdGl2ZSkgcmV0dXJucyAoYm9vbCByZXN1bHQpIHsKICAgICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgICBzdGF0ZSA9IFN0YXRlLkNsb3NlZDsKICAgICAgICB3YWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICBmaW5pc2hNaW50aW5nKCk7CiAgICAgICAgRmluYWxpemVkKCk7CiAgICAgICAgcmVzdWx0ID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVDb250cmFjdCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9Cn0='.
	

]
