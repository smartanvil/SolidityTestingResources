Class {
	#name : #SRTda25e5b939643a51375eee932aed11b92a9bc003,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTda25e5b939643a51375eee932aed11b92a9bc003 >> base64 [
	^ 'LyogQXV0aG9yOiBWaWN0b3IgTWV6cmluICA8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImE2ZDBjZmM1ZDJjOWQ0ZTZjYmMzZGNkNGNmYzg4OGM1YzljYiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4gKi8KCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xODsKCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aEludGVyZmFjZQogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KY29udHJhY3QgU2FmZU1hdGhJbnRlcmZhY2UgewogIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gc2FmZURpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1Nik7Cn0KCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KY29udHJhY3QgU2FmZU1hdGggaXMgU2FmZU1hdGhJbnRlcmZhY2UgewogIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgQ29tbW9uTW9kaWZpZXJzSW50ZXJmYWNlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBjb250YWlucyBjb21tb24gY2hlY2tzLgogKi8KY29udHJhY3QgQ29tbW9uTW9kaWZpZXJzSW50ZXJmYWNlIHsKCiAgLyoqCiAgICogQGRldiBBc3NlbWJsZSB0aGUgZ2l2ZW4gYWRkcmVzcyBieXRlY29kZS4gSWYgYnl0ZWNvZGUgZXhpc3RzIHRoZW4gdGhlIF9hZGRyIGlzIGEgY29udHJhY3QuCiAgICovCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF90YXJnZXRBZGRyZXNzKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKTsKCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgX3RhcmdldEFkZHJlc3MgaXMgYSBjb250cmFjdC4KICAgKi8KICBtb2RpZmllciBvbmx5Q29udHJhY3RBZGRyZXNzKGFkZHJlc3MgX3RhcmdldEFkZHJlc3MpIHsKICAgIHJlcXVpcmUoaXNDb250cmFjdChfdGFyZ2V0QWRkcmVzcykgPT0gdHJ1ZSk7CiAgICBfOwogIH0KfQoKCgovKioKICogQHRpdGxlIENvbW1vbk1vZGlmaWVycwogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggY29udGFpbnMgY29tbW9uIGNoZWNrcy4KICovCmNvbnRyYWN0IENvbW1vbk1vZGlmaWVycyBpcyBDb21tb25Nb2RpZmllcnNJbnRlcmZhY2UgewoKICAvKioKICAgKiBAZGV2IEFzc2VtYmxlIHRoZSBnaXZlbiBhZGRyZXNzIGJ5dGVjb2RlLiBJZiBieXRlY29kZSBleGlzdHMgdGhlbiB0aGUgX2FkZHIgaXMgYSBjb250cmFjdC4KICAgKi8KICBmdW5jdGlvbiBpc0NvbnRyYWN0KGFkZHJlc3MgX3RhcmdldEFkZHJlc3MpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUgKF90YXJnZXRBZGRyZXNzICE9IGFkZHJlc3MoMHgwKSk7CgogICAgdWludDI1NiBsZW5ndGg7CiAgICBhc3NlbWJseSB7CiAgICAgIC8vcmV0cmlldmUgdGhlIHNpemUgb2YgdGhlIGNvZGUgb24gdGFyZ2V0IGFkZHJlc3MsIHRoaXMgbmVlZHMgYXNzZW1ibHkKICAgICAgbGVuZ3RoIDo9IGV4dGNvZGVzaXplKF90YXJnZXRBZGRyZXNzKQogICAgfQogICAgcmV0dXJuIChsZW5ndGggPiAwKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBBc3NldElESW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgY29udHJhY3QgdGhhdCBhc3NpZ25lZCB0byBhbiBhc3NldCAoSk5ULCBqVVNEIGV0Yy4pCiAqIEBkZXYgQ29udHJhY3RzIGZvciB0aGUgc2FtZSBhc3NldCAobGlrZSBKTlQsIGpVU0QgZXRjLikgd2lsbCBoYXZlIHRoZSBzYW1lIEFzc2V0SUQuCiAqIEBkZXYgVGhpcyB3aWxsIGhlbHAgdG8gYXZvaWQgbWlzY29uZmlndXJhdGlvbiBvZiBjb250cmFjdHMKICovCmNvbnRyYWN0IEFzc2V0SURJbnRlcmZhY2UgewogIGZ1bmN0aW9uIGdldEFzc2V0SUQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKTsKICBmdW5jdGlvbiBnZXRBc3NldElESGFzaCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChieXRlczMyKTsKfQoKCgovKioKICogQHRpdGxlIEFzc2V0SUQKICogQGRldiBCYXNlIGNvbnRyYWN0IGltcGxlbWVudGluZyBBc3NldElESW50ZXJmYWNlCiAqLwpjb250cmFjdCBBc3NldElEIGlzIEFzc2V0SURJbnRlcmZhY2UgewoKICAvKiBTdG9yYWdlICovCgogIHN0cmluZyBhc3NldElEOwoKCiAgLyogQ29uc3RydWN0b3IgKi8KCiAgZnVuY3Rpb24gQXNzZXRJRChzdHJpbmcgX2Fzc2V0SUQpIHB1YmxpYyB7CiAgICByZXF1aXJlKGJ5dGVzKF9hc3NldElEKS5sZW5ndGggPiAwKTsKCiAgICBhc3NldElEID0gX2Fzc2V0SUQ7CiAgfQoKCiAgLyogR2V0dGVycyAqLwoKICBmdW5jdGlvbiBnZXRBc3NldElEKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIGFzc2V0SUQ7CiAgfQoKICBmdW5jdGlvbiBnZXRBc3NldElESGFzaCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChieXRlczMyKSB7CiAgICByZXR1cm4ga2VjY2FrMjU2KGFzc2V0SUQpOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZUludGVyZmFjZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlSW50ZXJmYWNlIHsKCiAgLyoqCiAgICogQGRldiBUaGUgZ2V0dGVyIGZvciAib3duZXIiIGNvbnRyYWN0IHZhcmlhYmxlCiAgICovCiAgZnVuY3Rpb24gZ2V0T3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBjdXJyZW50IG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gZ2V0T3duZXIoKSk7CiAgICBfOwogIH0KfQoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSBpcyBPd25hYmxlSW50ZXJmYWNlIHsKCiAgLyogU3RvcmFnZSAqLwoKICBhZGRyZXNzIG93bmVyID0gYWRkcmVzcygweDApOwogIGFkZHJlc3MgcHJvcG9zZWRPd25lciA9IGFkZHJlc3MoMHgwKTsKCgogIC8qIEV2ZW50cyAqLwoKICBldmVudCBPd25lckFzc2lnbmVkRXZlbnQoYWRkcmVzcyBpbmRleGVkIG5ld293bmVyKTsKICBldmVudCBPd25lcnNoaXBPZmZlckNyZWF0ZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgY3VycmVudG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgcHJvcG9zZWRvd25lcik7CiAgZXZlbnQgT3duZXJzaGlwT2ZmZXJBY2NlcHRlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBjdXJyZW50b3duZXIsIGFkZHJlc3MgaW5kZXhlZCBwcm9wb3NlZG93bmVyKTsKICBldmVudCBPd25lcnNoaXBPZmZlckNhbmNlbGxlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBjdXJyZW50b3duZXIsIGFkZHJlc3MgaW5kZXhlZCBwcm9wb3NlZG93bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIGNvbnN0cnVjdG9yIHNldHMgdGhlIGluaXRpYWwgYG93bmVyYCB0byB0aGUgcGFzc2VkIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CgogICAgT3duZXJBc3NpZ25lZEV2ZW50KG93bmVyKTsKICB9CgoKICAvKioKICAgKiBAZGV2IE9sZCBvd25lciByZXF1ZXN0cyB0cmFuc2ZlciBvd25lcnNoaXAgdG8gdGhlIG5ldyBvd25lci4KICAgKiBAcGFyYW0gX3Byb3Bvc2VkT3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIGNyZWF0ZU93bmVyc2hpcE9mZmVyKGFkZHJlc3MgX3Byb3Bvc2VkT3duZXIpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChwcm9wb3NlZE93bmVyID09IGFkZHJlc3MoMHgwKSk7CiAgICByZXF1aXJlIChfcHJvcG9zZWRPd25lciAhPSBhZGRyZXNzKDB4MCkpOwogICAgcmVxdWlyZSAoX3Byb3Bvc2VkT3duZXIgIT0gYWRkcmVzcyh0aGlzKSk7CgogICAgcHJvcG9zZWRPd25lciA9IF9wcm9wb3NlZE93bmVyOwoKICAgIE93bmVyc2hpcE9mZmVyQ3JlYXRlZEV2ZW50KG93bmVyLCBfcHJvcG9zZWRPd25lcik7CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIG5ldyBvd25lciB0byBhY2NlcHQgYW4gb3duZXJzaGlwIG9mZmVyIHRvIGNvbnRyYWN0IGNvbnRyb2wuCiAgICovCiAgLy9ub2luc3BlY3Rpb24gVW5wcm90ZWN0ZWRGdW5jdGlvbgogIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcE9mZmVyKCkgZXh0ZXJuYWwgewogICAgcmVxdWlyZSAocHJvcG9zZWRPd25lciAhPSBhZGRyZXNzKDB4MCkpOwogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBwcm9wb3NlZE93bmVyKTsKCiAgICBhZGRyZXNzIF9vbGRPd25lciA9IG93bmVyOwogICAgb3duZXIgPSBwcm9wb3NlZE93bmVyOwogICAgcHJvcG9zZWRPd25lciA9IGFkZHJlc3MoMHgwKTsKCiAgICBPd25lckFzc2lnbmVkRXZlbnQob3duZXIpOwogICAgT3duZXJzaGlwT2ZmZXJBY2NlcHRlZEV2ZW50KF9vbGRPd25lciwgb3duZXIpOwogIH0KCgogIC8qKgogICAqIEBkZXYgT2xkIG93bmVyIGNhbmNlbHMgdHJhbnNmZXIgb3duZXJzaGlwIHRvIHRoZSBuZXcgb3duZXIuCiAgICovCiAgZnVuY3Rpb24gY2FuY2VsT3duZXJzaGlwT2ZmZXIoKSBleHRlcm5hbCB7CiAgICByZXF1aXJlIChwcm9wb3NlZE93bmVyICE9IGFkZHJlc3MoMHgwKSk7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyIHx8IG1zZy5zZW5kZXIgPT0gcHJvcG9zZWRPd25lcik7CgogICAgYWRkcmVzcyBfb2xkUHJvcG9zZWRPd25lciA9IHByb3Bvc2VkT3duZXI7CiAgICBwcm9wb3NlZE93bmVyID0gYWRkcmVzcygweDApOwoKICAgIE93bmVyc2hpcE9mZmVyQ2FuY2VsbGVkRXZlbnQob3duZXIsIF9vbGRQcm9wb3NlZE93bmVyKTsKICB9CgoKICAvKioKICAgKiBAZGV2IFRoZSBnZXR0ZXIgZm9yICJvd25lciIgY29udHJhY3QgdmFyaWFibGUKICAgKi8KICBmdW5jdGlvbiBnZXRPd25lcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICByZXR1cm4gb3duZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRoZSBnZXR0ZXIgZm9yICJwcm9wb3NlZE93bmVyIiBjb250cmFjdCB2YXJpYWJsZQogICAqLwogIGZ1bmN0aW9uIGdldFByb3Bvc2VkT3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgcmV0dXJuIHByb3Bvc2VkT3duZXI7CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgTWFuYWdlYWJsZUludGVyZmFjZQogKiBAZGV2IENvbnRyYWN0IHRoYXQgYWxsb3dzIHRvIGdyYW50IHBlcm1pc3Npb25zIHRvIGFueSBhZGRyZXNzCiAqIEBkZXYgSW4gcmVhbCBsaWZlIHdlIGFyZSBubyBhYmxlIHRvIHBlcmZvcm0gYWxsIGFjdGlvbnMgd2l0aCBqdXN0IG9uZSBFdGhlcmV1bSBhZGRyZXNzCiAqIEBkZXYgYmVjYXVzZSByaXNrcyBhcmUgdG9vIGhpZ2guCiAqIEBkZXYgSW5zdGVhZCBvd25lciBkZWxlZ2F0ZXMgcmlnaHRzIHRvIG1hbmFnZSBhbiBjb250cmFjdCB0byB0aGUgZGlmZmVyZW50IGFkZHJlc3NlcyBhbmQKICogQGRldiBzdGF5IGFibGUgdG8gcmV2b2tlIHBlcm1pc3Npb25zIGF0IGFueSB0aW1lLgogKi8KY29udHJhY3QgTWFuYWdlYWJsZUludGVyZmFjZSB7CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIG1hbmFnZXIgY2FuIHBlcmZvcm0gdGhlIGFjdGlvbiBvciBub3QKICAgKiBAcGFyYW0gX21hbmFnZXIgICAgICAgIGFkZHJlc3MgTWFuYWdlcmBzIGFkZHJlc3MKICAgKiBAcGFyYW0gX3Blcm1pc3Npb25OYW1lIHN0cmluZyAgUGVybWlzc2lvbiBuYW1lCiAgICogQHJldHVybiBUcnVlIGlmIG1hbmFnZXIgaXMgZW5hYmxlZCBhbmQgaGFzIGJlZW4gZ3JhbnRlZCBuZWVkZWQgcGVybWlzc2lvbgogICAqLwogIGZ1bmN0aW9uIGlzTWFuYWdlckFsbG93ZWQoYWRkcmVzcyBfbWFuYWdlciwgc3RyaW5nIF9wZXJtaXNzaW9uTmFtZSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIHVzZSBpbiBkZXJpdmVkIGNvbnRyYWN0cwogICAqLwogIG1vZGlmaWVyIG9ubHlBbGxvd2VkTWFuYWdlcihzdHJpbmcgX3Blcm1pc3Npb25OYW1lKSB7CiAgICByZXF1aXJlKGlzTWFuYWdlckFsbG93ZWQobXNnLnNlbmRlciwgX3Blcm1pc3Npb25OYW1lKSA9PSB0cnVlKTsKICAgIF87CiAgfQp9CgoKCmNvbnRyYWN0IE1hbmFnZWFibGUgaXMgT3duYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICBNYW5hZ2VhYmxlSW50ZXJmYWNlIHsKCiAgLyogU3RvcmFnZSAqLwoKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIG1hbmFnZXJFbmFibGVkOyAgLy8gaGFyZCBzd2l0Y2ggZm9yIGEgbWFuYWdlciAtIG9uL29mZgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoc3RyaW5nID0+IGJvb2wpKSBtYW5hZ2VyUGVybWlzc2lvbnM7ICAvLyBkZXRhaWxlZCBpbmZvIGFib3V0IG1hbmFnZXJgcyBwZXJtaXNzaW9ucwoKCiAgLyogRXZlbnRzICovCgogIGV2ZW50IE1hbmFnZXJFbmFibGVkRXZlbnQoYWRkcmVzcyBpbmRleGVkIG1hbmFnZXIpOwogIGV2ZW50IE1hbmFnZXJEaXNhYmxlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBtYW5hZ2VyKTsKICBldmVudCBNYW5hZ2VyUGVybWlzc2lvbkdyYW50ZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgbWFuYWdlciwgc3RyaW5nIHBlcm1pc3Npb24pOwogIGV2ZW50IE1hbmFnZXJQZXJtaXNzaW9uUmV2b2tlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBtYW5hZ2VyLCBzdHJpbmcgcGVybWlzc2lvbik7CgoKICAvKiBDb25maWd1cmUgY29udHJhY3QgKi8KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBhZGQgbmV3IG1hbmFnZXIKICAgKiBAcGFyYW0gX21hbmFnZXIgYWRkcmVzcyBOZXcgbWFuYWdlcgogICAqLwogIGZ1bmN0aW9uIGVuYWJsZU1hbmFnZXIoYWRkcmVzcyBfbWFuYWdlcikgZXh0ZXJuYWwgb25seU93bmVyIG9ubHlWYWxpZE1hbmFnZXJBZGRyZXNzKF9tYW5hZ2VyKSB7CiAgICByZXF1aXJlKG1hbmFnZXJFbmFibGVkW19tYW5hZ2VyXSA9PSBmYWxzZSk7CgogICAgbWFuYWdlckVuYWJsZWRbX21hbmFnZXJdID0gdHJ1ZTsKICAgIE1hbmFnZXJFbmFibGVkRXZlbnQoX21hbmFnZXIpOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byByZW1vdmUgZXhpc3RpbmcgbWFuYWdlcgogICAqIEBwYXJhbSBfbWFuYWdlciBhZGRyZXNzIEV4aXN0aW5nIG1hbmFnZXIKICAgKi8KICBmdW5jdGlvbiBkaXNhYmxlTWFuYWdlcihhZGRyZXNzIF9tYW5hZ2VyKSBleHRlcm5hbCBvbmx5T3duZXIgb25seVZhbGlkTWFuYWdlckFkZHJlc3MoX21hbmFnZXIpIHsKICAgIHJlcXVpcmUobWFuYWdlckVuYWJsZWRbX21hbmFnZXJdID09IHRydWUpOwoKICAgIG1hbmFnZXJFbmFibGVkW19tYW5hZ2VyXSA9IGZhbHNlOwogICAgTWFuYWdlckRpc2FibGVkRXZlbnQoX21hbmFnZXIpOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBncmFudCBuZXcgcGVybWlzc2lvbiB0byB0aGUgbWFuYWdlcgogICAqIEBwYXJhbSBfbWFuYWdlciAgICAgICAgYWRkcmVzcyBFeGlzdGluZyBtYW5hZ2VyCiAgICogQHBhcmFtIF9wZXJtaXNzaW9uTmFtZSBzdHJpbmcgIEdyYW50ZWQgcGVybWlzc2lvbiBuYW1lCiAgICovCiAgZnVuY3Rpb24gZ3JhbnRNYW5hZ2VyUGVybWlzc2lvbigKICAgIGFkZHJlc3MgX21hbmFnZXIsIHN0cmluZyBfcGVybWlzc2lvbk5hbWUKICApCiAgICBleHRlcm5hbAogICAgb25seU93bmVyCiAgICBvbmx5VmFsaWRNYW5hZ2VyQWRkcmVzcyhfbWFuYWdlcikKICAgIG9ubHlWYWxpZFBlcm1pc3Npb25OYW1lKF9wZXJtaXNzaW9uTmFtZSkKICB7CiAgICByZXF1aXJlKG1hbmFnZXJQZXJtaXNzaW9uc1tfbWFuYWdlcl1bX3Blcm1pc3Npb25OYW1lXSA9PSBmYWxzZSk7CgogICAgbWFuYWdlclBlcm1pc3Npb25zW19tYW5hZ2VyXVtfcGVybWlzc2lvbk5hbWVdID0gdHJ1ZTsKICAgIE1hbmFnZXJQZXJtaXNzaW9uR3JhbnRlZEV2ZW50KF9tYW5hZ2VyLCBfcGVybWlzc2lvbk5hbWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byByZXZva2UgcGVybWlzc2lvbiBvZiB0aGUgbWFuYWdlcgogICAqIEBwYXJhbSBfbWFuYWdlciAgICAgICAgYWRkcmVzcyBFeGlzdGluZyBtYW5hZ2VyCiAgICogQHBhcmFtIF9wZXJtaXNzaW9uTmFtZSBzdHJpbmcgIFJldm9rZWQgcGVybWlzc2lvbiBuYW1lCiAgICovCiAgZnVuY3Rpb24gcmV2b2tlTWFuYWdlclBlcm1pc3Npb24oCiAgICBhZGRyZXNzIF9tYW5hZ2VyLCBzdHJpbmcgX3Blcm1pc3Npb25OYW1lCiAgKQogICAgZXh0ZXJuYWwKICAgIG9ubHlPd25lcgogICAgb25seVZhbGlkTWFuYWdlckFkZHJlc3MoX21hbmFnZXIpCiAgICBvbmx5VmFsaWRQZXJtaXNzaW9uTmFtZShfcGVybWlzc2lvbk5hbWUpCiAgewogICAgcmVxdWlyZShtYW5hZ2VyUGVybWlzc2lvbnNbX21hbmFnZXJdW19wZXJtaXNzaW9uTmFtZV0gPT0gdHJ1ZSk7CgogICAgbWFuYWdlclBlcm1pc3Npb25zW19tYW5hZ2VyXVtfcGVybWlzc2lvbk5hbWVdID0gZmFsc2U7CiAgICBNYW5hZ2VyUGVybWlzc2lvblJldm9rZWRFdmVudChfbWFuYWdlciwgX3Blcm1pc3Npb25OYW1lKTsKICB9CgoKICAvKiBHZXR0ZXJzICovCgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgbWFuYWdlciBzdGF0dXMKICAgKiBAcGFyYW0gX21hbmFnZXIgYWRkcmVzcyBNYW5hZ2VyYHMgYWRkcmVzcwogICAqIEByZXR1cm4gVHJ1ZSBpZiBtYW5hZ2VyIGlzIGVuYWJsZWQKICAgKi8KICBmdW5jdGlvbiBpc01hbmFnZXJFbmFibGVkKAogICAgYWRkcmVzcyBfbWFuYWdlcgogICkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIG9ubHlWYWxpZE1hbmFnZXJBZGRyZXNzKF9tYW5hZ2VyKQogICAgcmV0dXJucyAoYm9vbCkKICB7CiAgICByZXR1cm4gbWFuYWdlckVuYWJsZWRbX21hbmFnZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayBwZXJtaXNzaW9ucyBvZiBhIG1hbmFnZXIKICAgKiBAcGFyYW0gX21hbmFnZXIgICAgICAgIGFkZHJlc3MgTWFuYWdlcmBzIGFkZHJlc3MKICAgKiBAcGFyYW0gX3Blcm1pc3Npb25OYW1lIHN0cmluZyAgUGVybWlzc2lvbiBuYW1lCiAgICogQHJldHVybiBUcnVlIGlmIG1hbmFnZXIgaGFzIGJlZW4gZ3JhbnRlZCBuZWVkZWQgcGVybWlzc2lvbgogICAqLwogIGZ1bmN0aW9uIGlzUGVybWlzc2lvbkdyYW50ZWQoCiAgICBhZGRyZXNzIF9tYW5hZ2VyLCBzdHJpbmcgX3Blcm1pc3Npb25OYW1lCiAgKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgb25seVZhbGlkTWFuYWdlckFkZHJlc3MoX21hbmFnZXIpCiAgICBvbmx5VmFsaWRQZXJtaXNzaW9uTmFtZShfcGVybWlzc2lvbk5hbWUpCiAgICByZXR1cm5zIChib29sKQogIHsKICAgIHJldHVybiBtYW5hZ2VyUGVybWlzc2lvbnNbX21hbmFnZXJdW19wZXJtaXNzaW9uTmFtZV07CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBtYW5hZ2VyIGNhbiBwZXJmb3JtIHRoZSBhY3Rpb24gb3Igbm90CiAgICogQHBhcmFtIF9tYW5hZ2VyICAgICAgICBhZGRyZXNzIE1hbmFnZXJgcyBhZGRyZXNzCiAgICogQHBhcmFtIF9wZXJtaXNzaW9uTmFtZSBzdHJpbmcgIFBlcm1pc3Npb24gbmFtZQogICAqIEByZXR1cm4gVHJ1ZSBpZiBtYW5hZ2VyIGlzIGVuYWJsZWQgYW5kIGhhcyBiZWVuIGdyYW50ZWQgbmVlZGVkIHBlcm1pc3Npb24KICAgKi8KICBmdW5jdGlvbiBpc01hbmFnZXJBbGxvd2VkKAogICAgYWRkcmVzcyBfbWFuYWdlciwgc3RyaW5nIF9wZXJtaXNzaW9uTmFtZQogICkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIG9ubHlWYWxpZE1hbmFnZXJBZGRyZXNzKF9tYW5hZ2VyKQogICAgb25seVZhbGlkUGVybWlzc2lvbk5hbWUoX3Blcm1pc3Npb25OYW1lKQogICAgcmV0dXJucyAoYm9vbCkKICB7CiAgICByZXR1cm4gKG1hbmFnZXJFbmFibGVkW19tYW5hZ2VyXSAmJiBtYW5hZ2VyUGVybWlzc2lvbnNbX21hbmFnZXJdW19wZXJtaXNzaW9uTmFtZV0pOwogIH0KCgogIC8qIEhlbHBlcnMgKi8KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBjaGVjayBtYW5hZ2VyIGFkZHJlc3MKICAgKi8KICBtb2RpZmllciBvbmx5VmFsaWRNYW5hZ2VyQWRkcmVzcyhhZGRyZXNzIF9tYW5hZ2VyKSB7CiAgICByZXF1aXJlKF9tYW5hZ2VyICE9IGFkZHJlc3MoMHgwKSk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBjaGVjayBuYW1lIG9mIG1hbmFnZXIgcGVybWlzc2lvbgogICAqLwogIG1vZGlmaWVyIG9ubHlWYWxpZFBlcm1pc3Npb25OYW1lKHN0cmluZyBfcGVybWlzc2lvbk5hbWUpIHsKICAgIHJlcXVpcmUoYnl0ZXMoX3Blcm1pc3Npb25OYW1lKS5sZW5ndGggIT0gMCk7CiAgICBfOwogIH0KfQoKCgovKioKICogQHRpdGxlIFBhdXNhYmxlSW50ZXJmYWNlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICogQGRldiBCYXNlZCBvbiB6ZXBwZWxpbidzIFBhdXNhYmxlLCBidXQgaW50ZWdyYXRlZCB3aXRoIE1hbmFnZWFibGUKICogQGRldiBDb250cmFjdCBpcyBpbiBwYXVzZWQgc3RhdGUgYnkgZGVmYXVsdCBhbmQgc2hvdWxkIGJlIGV4cGxpY2l0bHkgdW5sb2NrZWQKICovCmNvbnRyYWN0IFBhdXNhYmxlSW50ZXJmYWNlIHsKCiAgLyoqCiAgICogRXZlbnRzCiAgICovCgogIGV2ZW50IFBhdXNlRXZlbnQoKTsKICBldmVudCBVbnBhdXNlRXZlbnQoKTsKCgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBtYW5hZ2VyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2VDb250cmFjdCgpIHB1YmxpYzsKCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG1hbmFnZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlQ29udHJhY3QoKSBwdWJsaWM7CgogIC8qKgogICAqIEBkZXYgVGhlIGdldHRlciBmb3IgInBhdXNlZCIgY29udHJhY3QgdmFyaWFibGUKICAgKi8KICBmdW5jdGlvbiBnZXRQYXVzZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7CgoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuQ29udHJhY3ROb3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKGdldFBhdXNlZCgpID09IGZhbHNlKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlbkNvbnRyYWN0UGF1c2VkIHsKICAgIHJlcXVpcmUoZ2V0UGF1c2VkKCkgPT0gdHJ1ZSk7CiAgICBfOwogIH0KfQoKCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICogQGRldiBCYXNlZCBvbiB6ZXBwZWxpbidzIFBhdXNhYmxlLCBidXQgaW50ZWdyYXRlZCB3aXRoIE1hbmFnZWFibGUKICogQGRldiBDb250cmFjdCBpcyBpbiBwYXVzZWQgc3RhdGUgYnkgZGVmYXVsdCBhbmQgc2hvdWxkIGJlIGV4cGxpY2l0bHkgdW5sb2NrZWQKICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE1hbmFnZWFibGVJbnRlcmZhY2UsCiAgICAgICAgICAgICAgICAgICAgIFBhdXNhYmxlSW50ZXJmYWNlIHsKCiAgLyoqCiAgICogU3RvcmFnZQogICAqLwoKICBib29sIHBhdXNlZCA9IHRydWU7CgoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgbWFuYWdlciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlQ29udHJhY3QoKSBwdWJsaWMgb25seUFsbG93ZWRNYW5hZ2VyKCdwYXVzZV9jb250cmFjdCcpIHdoZW5Db250cmFjdE5vdFBhdXNlZCB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2VFdmVudCgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG1hbmFnZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlQ29udHJhY3QoKSBwdWJsaWMgb25seUFsbG93ZWRNYW5hZ2VyKCd1bnBhdXNlX2NvbnRyYWN0Jykgd2hlbkNvbnRyYWN0UGF1c2VkIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZUV2ZW50KCk7CiAgfQoKICAvKioKICAgKiBAZGV2IFRoZSBnZXR0ZXIgZm9yICJwYXVzZWQiIGNvbnRyYWN0IHZhcmlhYmxlCiAgICovCiAgZnVuY3Rpb24gZ2V0UGF1c2VkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBwYXVzZWQ7CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgQnl0ZWNvZGVFeGVjdXRvckludGVyZmFjZSBpbnRlcmZhY2UKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiBhIGNvbnRyYWN0IHRoYXQgZXhlY3V0ZSBhbnkgYnl0ZWNvZGUgb24gYmVoYWxmIG9mIHRoZSBjb250cmFjdAogKiBAZGV2IExhc3QgcmVzb3J0IGZvciB0aGUgaW1tdXRhYmxlIGFuZCBub3QtcmVwbGFjZWFibGUgY29udHJhY3QgOikKICovCmNvbnRyYWN0IEJ5dGVjb2RlRXhlY3V0b3JJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgQ2FsbEV4ZWN1dGVkRXZlbnQoYWRkcmVzcyBpbmRleGVkIHRhcmdldCwKICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IHN1cHBsaWVkR2FzLAogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgZXRoVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMzMiB0cmFuc2FjdGlvbkJ5dGVjb2RlSGFzaCk7CiAgZXZlbnQgRGVsZWdhdGVjYWxsRXhlY3V0ZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgdGFyZ2V0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBzdXBwbGllZEdhcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzMzIgdHJhbnNhY3Rpb25CeXRlY29kZUhhc2gpOwoKCiAgLyogRnVuY3Rpb25zICovCgogIGZ1bmN0aW9uIGV4ZWN1dGVDYWxsKGFkZHJlc3MgX3RhcmdldCwgdWludDI1NiBfc3VwcGxpZWRHYXMsIHVpbnQyNTYgX2V0aFZhbHVlLCBieXRlcyBfdHJhbnNhY3Rpb25CeXRlY29kZSkgZXh0ZXJuYWw7CiAgZnVuY3Rpb24gZXhlY3V0ZURlbGVnYXRlY2FsbChhZGRyZXNzIF90YXJnZXQsIHVpbnQyNTYgX3N1cHBsaWVkR2FzLCBieXRlcyBfdHJhbnNhY3Rpb25CeXRlY29kZSkgZXh0ZXJuYWw7Cn0KCgoKLyoqCiAqIEB0aXRsZSBCeXRlY29kZUV4ZWN1dG9yCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgYSBjb250cmFjdCB0aGF0IGV4ZWN1dGUgYW55IGJ5dGVjb2RlIG9uIGJlaGFsZiBvZiB0aGUgY29udHJhY3QKICogQGRldiBMYXN0IHJlc29ydCBmb3IgdGhlIGltbXV0YWJsZSBhbmQgbm90LXJlcGxhY2VhYmxlIGNvbnRyYWN0IDopCiAqLwpjb250cmFjdCBCeXRlY29kZUV4ZWN1dG9yIGlzIE1hbmFnZWFibGVJbnRlcmZhY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnl0ZWNvZGVFeGVjdXRvckludGVyZmFjZSB7CgogIC8qIFN0b3JhZ2UgKi8KCiAgYm9vbCB1bmRlckV4ZWN1dGlvbiA9IGZhbHNlOwoKCiAgLyogQnl0ZWNvZGVFeGVjdXRvckludGVyZmFjZSAqLwoKICBmdW5jdGlvbiBleGVjdXRlQ2FsbCgKICAgIGFkZHJlc3MgX3RhcmdldCwKICAgIHVpbnQyNTYgX3N1cHBsaWVkR2FzLAogICAgdWludDI1NiBfZXRoVmFsdWUsCiAgICBieXRlcyBfdHJhbnNhY3Rpb25CeXRlY29kZQogICkKICAgIGV4dGVybmFsCiAgICBvbmx5QWxsb3dlZE1hbmFnZXIoJ2V4ZWN1dGVfY2FsbCcpCiAgewogICAgcmVxdWlyZSh1bmRlckV4ZWN1dGlvbiA9PSBmYWxzZSk7CgogICAgdW5kZXJFeGVjdXRpb24gPSB0cnVlOyAvLyBBdm9pZCByZWN1cnNpdmUgY2FsbGluZwogICAgX3RhcmdldC5jYWxsLmdhcyhfc3VwcGxpZWRHYXMpLnZhbHVlKF9ldGhWYWx1ZSkoX3RyYW5zYWN0aW9uQnl0ZWNvZGUpOwogICAgdW5kZXJFeGVjdXRpb24gPSBmYWxzZTsKCiAgICBDYWxsRXhlY3V0ZWRFdmVudChfdGFyZ2V0LCBfc3VwcGxpZWRHYXMsIF9ldGhWYWx1ZSwga2VjY2FrMjU2KF90cmFuc2FjdGlvbkJ5dGVjb2RlKSk7CiAgfQoKICBmdW5jdGlvbiBleGVjdXRlRGVsZWdhdGVjYWxsKAogICAgYWRkcmVzcyBfdGFyZ2V0LAogICAgdWludDI1NiBfc3VwcGxpZWRHYXMsCiAgICBieXRlcyBfdHJhbnNhY3Rpb25CeXRlY29kZQogICkKICAgIGV4dGVybmFsCiAgICBvbmx5QWxsb3dlZE1hbmFnZXIoJ2V4ZWN1dGVfZGVsZWdhdGVjYWxsJykKICB7CiAgICByZXF1aXJlKHVuZGVyRXhlY3V0aW9uID09IGZhbHNlKTsKCiAgICB1bmRlckV4ZWN1dGlvbiA9IHRydWU7IC8vIEF2b2lkIHJlY3Vyc2l2ZSBjYWxsaW5nCiAgICBfdGFyZ2V0LmRlbGVnYXRlY2FsbC5nYXMoX3N1cHBsaWVkR2FzKShfdHJhbnNhY3Rpb25CeXRlY29kZSk7CiAgICB1bmRlckV4ZWN1dGlvbiA9IGZhbHNlOwoKICAgIERlbGVnYXRlY2FsbEV4ZWN1dGVkRXZlbnQoX3RhcmdldCwgX3N1cHBsaWVkR2FzLCBrZWNjYWsyNTYoX3RyYW5zYWN0aW9uQnl0ZWNvZGUpKTsKICB9Cn0KCgoKY29udHJhY3QgQ3J5ZHJWaWV3QmFzZUludGVyZmFjZSB7CgogIC8qIEV2ZW50cyAqLwoKICBldmVudCBDcnlkckNvbnRyb2xsZXJDaGFuZ2VkRXZlbnQoYWRkcmVzcyBpbmRleGVkIGNyeWRyY29udHJvbGxlcik7CgoKICAvKiBDb25maWd1cmF0aW9uICovCgogIGZ1bmN0aW9uIHNldENyeWRyQ29udHJvbGxlcihhZGRyZXNzIF9jcnlkckNvbnRyb2xsZXIpIGV4dGVybmFsOwogIGZ1bmN0aW9uIGdldENyeWRyQ29udHJvbGxlcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKTsKCiAgZnVuY3Rpb24gZ2V0Q3J5ZHJWaWV3U3RhbmRhcmROYW1lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyk7CiAgZnVuY3Rpb24gZ2V0Q3J5ZHJWaWV3U3RhbmRhcmROYW1lSGFzaCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChieXRlczMyKTsKfQoKCgovKioKICogQHRpdGxlIENyeWRyU3RvcmFnZUJhbGFuY2VJbnRlcmZhY2UgaW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgY29udHJhY3QgdGhhdCBtYW5hZ2VzIGJhbGFuY2Ugb2YgYW4gQ3J5RFIKICovCmNvbnRyYWN0IENyeWRyU3RvcmFnZUJhbGFuY2VJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgQWNjb3VudEJhbGFuY2VJbmNyZWFzZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgYWNjb3VudCwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgQWNjb3VudEJhbGFuY2VEZWNyZWFzZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgYWNjb3VudCwgdWludDI1NiB2YWx1ZSk7CgoKICAvKiBMb3ctbGV2ZWwgY2hhbmdlIG9mIGJhbGFuY2UuIEltcGxpZWQgdGhhdCB0b3RhbFN1cHBseSBrZXB0IGluIHN5bmMuICovCgogIGZ1bmN0aW9uIGluY3JlYXNlQmFsYW5jZShhZGRyZXNzIF9hY2NvdW50LCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGRlY3JlYXNlQmFsYW5jZShhZGRyZXNzIF9hY2NvdW50LCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGdldEJhbGFuY2UoYWRkcmVzcyBfYWNjb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGdldFRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJTdG9yYWdlQWxsb3dhbmNlSW50ZXJmYWNlIGludGVyZmFjZQogKiBAZGV2IEludGVyZmFjZSBvZiBhIGNvbnRyYWN0IHRoYXQgbWFuYWdlcyBiYWxhbmNlIG9mIGFuIENyeURSCiAqLwpjb250cmFjdCBDcnlkclN0b3JhZ2VBbGxvd2FuY2VJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgQWNjb3VudEFsbG93YW5jZUluY3JlYXNlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IEFjY291bnRBbGxvd2FuY2VEZWNyZWFzZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCgogIC8qIExvdy1sZXZlbCBjaGFuZ2Ugb2YgYWxsb3dhbmNlICovCgogIGZ1bmN0aW9uIGluY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGRlY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGdldEFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJTdG9yYWdlRVJDMjBJbnRlcmZhY2UgaW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgY29udHJhY3QgdGhhdCBtYW5hZ2VzIGJhbGFuY2Ugb2YgYW4gQ3J5RFIgYW5kIGhhdmUgb3B0aW1pemF0aW9uIGZvciBFUkMyMCBjb250cm9sbGVycwogKi8KY29udHJhY3QgQ3J5ZHJTdG9yYWdlRVJDMjBJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgQ3J5ZHJUcmFuc2ZlcnJlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IENyeWRyVHJhbnNmZXJyZWRGcm9tRXZlbnQoYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IENyeWRyU3BlbmRpbmdBcHByb3ZlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwoKCiAgLyogRVJDMjAgb3B0aW1pemF0aW9uLiBfbXNnc2VuZGVyIC0gYWNjb3VudCB0aGF0IGludm9rZWQgQ3J5ZHJWaWV3ICovCgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX21zZ3NlbmRlciwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX21zZ3NlbmRlciwgYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9tc2dzZW5kZXIsIGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcnlkclN0b3JhZ2VCbG9ja3NJbnRlcmZhY2UgaW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgY29udHJhY3QgdGhhdCBtYW5hZ2VzIGJhbGFuY2Ugb2YgYW4gQ3J5RFIKICovCmNvbnRyYWN0IENyeWRyU3RvcmFnZUJsb2Nrc0ludGVyZmFjZSB7CgogIC8qIEV2ZW50cyAqLwoKICBldmVudCBBY2NvdW50QmxvY2tlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBhY2NvdW50KTsKICBldmVudCBBY2NvdW50VW5ibG9ja2VkRXZlbnQoYWRkcmVzcyBpbmRleGVkIGFjY291bnQpOwogIGV2ZW50IEFjY291bnRGdW5kc0Jsb2NrZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgYWNjb3VudCwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgQWNjb3VudEZ1bmRzVW5ibG9ja2VkRXZlbnQoYWRkcmVzcyBpbmRleGVkIGFjY291bnQsIHVpbnQyNTYgdmFsdWUpOwoKCiAgLyogTG93LWxldmVsIGNoYW5nZSBvZiBibG9ja3MgYW5kIGdldHRlcnMgKi8KCiAgZnVuY3Rpb24gYmxvY2tBY2NvdW50KGFkZHJlc3MgX2FjY291bnQpIHB1YmxpYzsKICBmdW5jdGlvbiB1bmJsb2NrQWNjb3VudChhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWM7CiAgZnVuY3Rpb24gZ2V0QWNjb3VudEJsb2NrcyhhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGZ1bmN0aW9uIGJsb2NrQWNjb3VudEZ1bmRzKGFkZHJlc3MgX2FjY291bnQsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7CiAgZnVuY3Rpb24gdW5ibG9ja0FjY291bnRGdW5kcyhhZGRyZXNzIF9hY2NvdW50LCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGdldEFjY291bnRCbG9ja2VkRnVuZHMoYWRkcmVzcyBfYWNjb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJWaWV3RVJDMjBMb2dnYWJsZUludGVyZmFjZQogKiBAZGV2IENvbnRyYWN0IGlzIGFibGUgdG8gY3JlYXRlIFRyYW5zZmVyL0FwcHJvdmFsIGV2ZW50cyB3aXRoIHRoZSBjYWwgZnJvbSBjb250cm9sbGVyCiAqLwpjb250cmFjdCBDcnlkclZpZXdFUkMyMExvZ2dhYmxlSW50ZXJmYWNlIHsKCiAgZnVuY3Rpb24gZW1pdFRyYW5zZmVyRXZlbnQoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbDsKICBmdW5jdGlvbiBlbWl0QXBwcm92YWxFdmVudChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIGV4dGVybmFsOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJWaWV3RVJDMjBNaW50YWJsZUludGVyZmFjZQogKiBAZGV2IENvbnRyYWN0IGlzIGFibGUgdG8gY3JlYXRlIE1pbnQvQnVybiBldmVudHMgd2l0aCB0aGUgY2FsIGZyb20gY29udHJvbGxlcgogKi8KY29udHJhY3QgQ3J5ZHJWaWV3RVJDMjBNaW50YWJsZUludGVyZmFjZSB7CiAgZXZlbnQgTWludEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgQnVybkV2ZW50KGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludDI1NiB2YWx1ZSk7CgogIGZ1bmN0aW9uIGVtaXRNaW50RXZlbnQoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbDsKICBmdW5jdGlvbiBlbWl0QnVybkV2ZW50KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWw7Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcnlkckNvbnRyb2xsZXJCYXNlSW50ZXJmYWNlIGludGVyZmFjZQogKiBAZGV2IEludGVyZmFjZSBvZiBhIGNvbnRyYWN0IHRoYXQgaW1wbGVtZW50IGJ1c2luZXNzLWxvZ2ljIG9mIGFuIENyeURSLCBtZWRpYXRlcyBDcnlEUiB2aWV3cyBhbmQgc3RvcmFnZQogKi8KY29udHJhY3QgQ3J5ZHJDb250cm9sbGVyQmFzZUludGVyZmFjZSB7CgogIC8qIEV2ZW50cyAqLwoKICBldmVudCBDcnlkclN0b3JhZ2VDaGFuZ2VkRXZlbnQoYWRkcmVzcyBpbmRleGVkIGNyeWRyc3RvcmFnZSk7CiAgZXZlbnQgQ3J5ZHJWaWV3QWRkZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgY3J5ZHJ2aWV3LCBzdHJpbmcgc3RhbmRhcmRuYW1lKTsKICBldmVudCBDcnlkclZpZXdSZW1vdmVkRXZlbnQoYWRkcmVzcyBpbmRleGVkIGNyeWRydmlldywgc3RyaW5nIHN0YW5kYXJkbmFtZSk7CgoKICAvKiBDb25maWd1cmF0aW9uICovCgogIGZ1bmN0aW9uIHNldENyeWRyU3RvcmFnZShhZGRyZXNzIF9uZXdTdG9yYWdlKSBleHRlcm5hbDsKICBmdW5jdGlvbiBnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpOwoKICBmdW5jdGlvbiBzZXRDcnlkclZpZXcoYWRkcmVzcyBfbmV3Q3J5ZHJWaWV3LCBzdHJpbmcgX3ZpZXdBcGlTdGFuZGFyZE5hbWUpIGV4dGVybmFsOwogIGZ1bmN0aW9uIHJlbW92ZUNyeWRyVmlldyhzdHJpbmcgX3ZpZXdBcGlTdGFuZGFyZE5hbWUpIGV4dGVybmFsOwogIGZ1bmN0aW9uIGdldENyeWRyVmlld0FkZHJlc3Moc3RyaW5nIF92aWV3QXBpU3RhbmRhcmROYW1lKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CgogIGZ1bmN0aW9uIGlzQ3J5ZHJWaWV3QWRkcmVzcyhhZGRyZXNzIF9jcnlkclZpZXdBZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gaXNDcnlkclZpZXdSZWdpc3RlcmVkKHN0cmluZyBfdmlld0FwaVN0YW5kYXJkTmFtZSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKCiAgLyogSGVscGVycyAqLwoKICBtb2RpZmllciBvbmx5VmFsaWRDcnlkclZpZXdTdGFuZGFyZE5hbWUoc3RyaW5nIF92aWV3QXBpU3RhbmRhcmQpIHsKICAgIHJlcXVpcmUoYnl0ZXMoX3ZpZXdBcGlTdGFuZGFyZCkubGVuZ3RoID4gMCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUNyeWRyVmlldygpIHsKICAgIHJlcXVpcmUoaXNDcnlkclZpZXdBZGRyZXNzKG1zZy5zZW5kZXIpID09IHRydWUpOwogICAgXzsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcnlkckNvbnRyb2xsZXJCYXNlCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgYSBjb250cmFjdCB3aXRoIGJ1c2luZXNzLWxvZ2ljIG9mIGFuIENyeURSLCBtZWRpYXRlcyBDcnlEUiB2aWV3cyBhbmQgc3RvcmFnZQogKi8KY29udHJhY3QgQ3J5ZHJDb250cm9sbGVyQmFzZSBpcyBDb21tb25Nb2RpZmllcnNJbnRlcmZhY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFuYWdlYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXVzYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcnlkckNvbnRyb2xsZXJCYXNlSW50ZXJmYWNlIHsKCiAgLyogU3RvcmFnZSAqLwoKICBhZGRyZXNzIGNyeWRyU3RvcmFnZSA9IGFkZHJlc3MoMHgwKTsKICBtYXBwaW5nIChzdHJpbmcgPT4gYWRkcmVzcykgY3J5ZHJWaWV3c0FkZHJlc3NlczsKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIGlzUmVnaXN0ZXJlZFZpZXc7CgoKICAvKiBDcnlkckNvbnRyb2xsZXJCYXNlSW50ZXJmYWNlICovCgogIGZ1bmN0aW9uIHNldENyeWRyU3RvcmFnZSgKICAgIGFkZHJlc3MgX2NyeWRyU3RvcmFnZQogICkKICAgIGV4dGVybmFsCiAgICBvbmx5Q29udHJhY3RBZGRyZXNzKF9jcnlkclN0b3JhZ2UpCiAgICBvbmx5QWxsb3dlZE1hbmFnZXIoJ3NldF9jcnlkcl9zdG9yYWdlJykKICAgIHdoZW5Db250cmFjdFBhdXNlZAogIHsKICAgIHJlcXVpcmUoX2NyeWRyU3RvcmFnZSAhPSBhZGRyZXNzKHRoaXMpKTsKICAgIHJlcXVpcmUoX2NyeWRyU3RvcmFnZSAhPSBhZGRyZXNzKGNyeWRyU3RvcmFnZSkpOwoKICAgIGNyeWRyU3RvcmFnZSA9IF9jcnlkclN0b3JhZ2U7CiAgICBDcnlkclN0b3JhZ2VDaGFuZ2VkRXZlbnQoX2NyeWRyU3RvcmFnZSk7CiAgfQoKICBmdW5jdGlvbiBnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIHJldHVybiBhZGRyZXNzKGNyeWRyU3RvcmFnZSk7CiAgfQoKCiAgZnVuY3Rpb24gc2V0Q3J5ZHJWaWV3KAogICAgYWRkcmVzcyBfbmV3Q3J5ZHJWaWV3LCBzdHJpbmcgX3ZpZXdBcGlTdGFuZGFyZE5hbWUKICApCiAgICBleHRlcm5hbAogICAgb25seUNvbnRyYWN0QWRkcmVzcyhfbmV3Q3J5ZHJWaWV3KQogICAgb25seVZhbGlkQ3J5ZHJWaWV3U3RhbmRhcmROYW1lKF92aWV3QXBpU3RhbmRhcmROYW1lKQogICAgb25seUFsbG93ZWRNYW5hZ2VyKCdzZXRfY3J5ZHJfdmlldycpCiAgICB3aGVuQ29udHJhY3RQYXVzZWQKICB7CiAgICByZXF1aXJlKF9uZXdDcnlkclZpZXcgIT0gYWRkcmVzcyh0aGlzKSk7CiAgICByZXF1aXJlKGNyeWRyVmlld3NBZGRyZXNzZXNbX3ZpZXdBcGlTdGFuZGFyZE5hbWVdID09IGFkZHJlc3MoMHgwKSk7CgogICAgdmFyIGNyeWRyVmlld0luc3RhbmNlID0gQ3J5ZHJWaWV3QmFzZUludGVyZmFjZShfbmV3Q3J5ZHJWaWV3KTsKICAgIHZhciBzdGFuZGFyZE5hbWVIYXNoID0gY3J5ZHJWaWV3SW5zdGFuY2UuZ2V0Q3J5ZHJWaWV3U3RhbmRhcmROYW1lSGFzaCgpOwogICAgcmVxdWlyZShzdGFuZGFyZE5hbWVIYXNoID09IGtlY2NhazI1Nihfdmlld0FwaVN0YW5kYXJkTmFtZSkpOwoKICAgIGNyeWRyVmlld3NBZGRyZXNzZXNbX3ZpZXdBcGlTdGFuZGFyZE5hbWVdID0gX25ld0NyeWRyVmlldzsKICAgIGlzUmVnaXN0ZXJlZFZpZXdbX25ld0NyeWRyVmlld10gPSB0cnVlOwoKICAgIENyeWRyVmlld0FkZGVkRXZlbnQoX25ld0NyeWRyVmlldywgX3ZpZXdBcGlTdGFuZGFyZE5hbWUpOwogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlQ3J5ZHJWaWV3KAogICAgc3RyaW5nIF92aWV3QXBpU3RhbmRhcmROYW1lCiAgKQogICAgZXh0ZXJuYWwKICAgIG9ubHlWYWxpZENyeWRyVmlld1N0YW5kYXJkTmFtZShfdmlld0FwaVN0YW5kYXJkTmFtZSkKICAgIG9ubHlBbGxvd2VkTWFuYWdlcigncmVtb3ZlX2NyeWRyX3ZpZXcnKQogICAgd2hlbkNvbnRyYWN0UGF1c2VkCiAgewogICAgcmVxdWlyZShjcnlkclZpZXdzQWRkcmVzc2VzW192aWV3QXBpU3RhbmRhcmROYW1lXSAhPSBhZGRyZXNzKDB4MCkpOwoKICAgIGFkZHJlc3MgcmVtb3ZlZFZpZXcgPSBjcnlkclZpZXdzQWRkcmVzc2VzW192aWV3QXBpU3RhbmRhcmROYW1lXTsKCiAgICAvLyBtYWtlIGNoYW5nZXMgdG8gdGhlIHN0b3JhZ2UKICAgIGNyeWRyVmlld3NBZGRyZXNzZXNbX3ZpZXdBcGlTdGFuZGFyZE5hbWVdID09IGFkZHJlc3MoMHgwKTsKICAgIGlzUmVnaXN0ZXJlZFZpZXdbcmVtb3ZlZFZpZXddID0gZmFsc2U7CgogICAgQ3J5ZHJWaWV3UmVtb3ZlZEV2ZW50KHJlbW92ZWRWaWV3LCBfdmlld0FwaVN0YW5kYXJkTmFtZSk7CiAgfQoKICBmdW5jdGlvbiBnZXRDcnlkclZpZXdBZGRyZXNzKAogICAgc3RyaW5nIF92aWV3QXBpU3RhbmRhcmROYW1lCiAgKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgb25seVZhbGlkQ3J5ZHJWaWV3U3RhbmRhcmROYW1lKF92aWV3QXBpU3RhbmRhcmROYW1lKQogICAgcmV0dXJucyAoYWRkcmVzcykKICB7CiAgICByZXF1aXJlKGNyeWRyVmlld3NBZGRyZXNzZXNbX3ZpZXdBcGlTdGFuZGFyZE5hbWVdICE9IGFkZHJlc3MoMHgwKSk7CgogICAgcmV0dXJuIGNyeWRyVmlld3NBZGRyZXNzZXNbX3ZpZXdBcGlTdGFuZGFyZE5hbWVdOwogIH0KCiAgZnVuY3Rpb24gaXNDcnlkclZpZXdBZGRyZXNzKAogICAgYWRkcmVzcyBfY3J5ZHJWaWV3QWRkcmVzcwogICkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIHJldHVybnMgKGJvb2wpCiAgewogICAgcmVxdWlyZShfY3J5ZHJWaWV3QWRkcmVzcyAhPSBhZGRyZXNzKDB4MCkpOwoKICAgIHJldHVybiBpc1JlZ2lzdGVyZWRWaWV3W19jcnlkclZpZXdBZGRyZXNzXTsKICB9CgogIGZ1bmN0aW9uIGlzQ3J5ZHJWaWV3UmVnaXN0ZXJlZCgKICAgIHN0cmluZyBfdmlld0FwaVN0YW5kYXJkTmFtZQogICkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIG9ubHlWYWxpZENyeWRyVmlld1N0YW5kYXJkTmFtZShfdmlld0FwaVN0YW5kYXJkTmFtZSkKICAgIHJldHVybnMgKGJvb2wpCiAgewogICAgcmV0dXJuIChjcnlkclZpZXdzQWRkcmVzc2VzW192aWV3QXBpU3RhbmRhcmROYW1lXSAhPSBhZGRyZXNzKDB4MCkpOwogIH0KfQoKCgovKioKICogQHRpdGxlIENyeWRyQ29udHJvbGxlckJsb2NrYWJsZUludGVyZmFjZSBpbnRlcmZhY2UKICogQGRldiBJbnRlcmZhY2Ugb2YgYSBjb250cmFjdCB0aGF0IGFsbG93cyBibG9jay91bmxvY2sgYWNjb3VudHMKICovCmNvbnRyYWN0IENyeWRyQ29udHJvbGxlckJsb2NrYWJsZUludGVyZmFjZSB7CgogIC8qIGJsb2NraW5nL3VubG9ja2luZyAqLwoKICBmdW5jdGlvbiBibG9ja0FjY291bnQoYWRkcmVzcyBfYWNjb3VudCkgcHVibGljOwogIGZ1bmN0aW9uIHVuYmxvY2tBY2NvdW50KGFkZHJlc3MgX2FjY291bnQpIHB1YmxpYzsKCiAgZnVuY3Rpb24gYmxvY2tBY2NvdW50RnVuZHMoYWRkcmVzcyBfYWNjb3VudCwgdWludDI1NiBfdmFsdWUpIHB1YmxpYzsKICBmdW5jdGlvbiB1bmJsb2NrQWNjb3VudEZ1bmRzKGFkZHJlc3MgX2FjY291bnQsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcnlkckNvbnRyb2xsZXJCbG9ja2FibGUgaW50ZXJmYWNlCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgYSBjb250cmFjdCB0aGF0IGFsbG93cyBibG9ja2luZy91bmxvY2tpbmcgYWNjb3VudHMKICovCmNvbnRyYWN0IENyeWRyQ29udHJvbGxlckJsb2NrYWJsZSBpcyBNYW5hZ2VhYmxlSW50ZXJmYWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyQmFzZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyeWRyQ29udHJvbGxlckJsb2NrYWJsZUludGVyZmFjZSB7CgoKICAvKiBibG9ja2luZy91bmxvY2tpbmcgKi8KCiAgZnVuY3Rpb24gYmxvY2tBY2NvdW50KAogICAgYWRkcmVzcyBfYWNjb3VudAogICkKICAgIHB1YmxpYwogICAgb25seUFsbG93ZWRNYW5hZ2VyKCdibG9ja19hY2NvdW50JykKICB7CiAgICBDcnlkclN0b3JhZ2VCbG9ja3NJbnRlcmZhY2UoZ2V0Q3J5ZHJTdG9yYWdlQWRkcmVzcygpKS5ibG9ja0FjY291bnQoX2FjY291bnQpOwogIH0KCiAgZnVuY3Rpb24gdW5ibG9ja0FjY291bnQoCiAgICBhZGRyZXNzIF9hY2NvdW50CiAgKQogICAgcHVibGljCiAgICBvbmx5QWxsb3dlZE1hbmFnZXIoJ3VuYmxvY2tfYWNjb3VudCcpCiAgewogICAgQ3J5ZHJTdG9yYWdlQmxvY2tzSW50ZXJmYWNlKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkudW5ibG9ja0FjY291bnQoX2FjY291bnQpOwogIH0KCiAgZnVuY3Rpb24gYmxvY2tBY2NvdW50RnVuZHMoCiAgICBhZGRyZXNzIF9hY2NvdW50LAogICAgdWludDI1NiBfdmFsdWUKICApCiAgICBwdWJsaWMKICAgIG9ubHlBbGxvd2VkTWFuYWdlcignYmxvY2tfYWNjb3VudF9mdW5kcycpCiAgewogICAgQ3J5ZHJTdG9yYWdlQmxvY2tzSW50ZXJmYWNlKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkuYmxvY2tBY2NvdW50RnVuZHMoX2FjY291bnQsIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB1bmJsb2NrQWNjb3VudEZ1bmRzKAogICAgYWRkcmVzcyBfYWNjb3VudCwKICAgIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICBvbmx5QWxsb3dlZE1hbmFnZXIoJ3VuYmxvY2tfYWNjb3VudF9mdW5kcycpCiAgewogICAgQ3J5ZHJTdG9yYWdlQmxvY2tzSW50ZXJmYWNlKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkudW5ibG9ja0FjY291bnRGdW5kcyhfYWNjb3VudCwgX3ZhbHVlKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBDcnlkckNvbnRyb2xsZXJNaW50YWJsZUludGVyZmFjZSBpbnRlcmZhY2UKICogQGRldiBJbnRlcmZhY2Ugb2YgYSBjb250cmFjdCB0aGF0IGFsbG93cyBtaW50aW5nL2J1cm5pbmcgb2YgdG9rZW5zCiAqLwpjb250cmFjdCBDcnlkckNvbnRyb2xsZXJNaW50YWJsZUludGVyZmFjZSB7CgogIC8qIG1pbnRpbmcvYnVybmluZyAqLwoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX2FjY291bnQsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7CiAgZnVuY3Rpb24gYnVybihhZGRyZXNzIF9hY2NvdW50LCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJDb250cm9sbGVyTWludGFibGUgaW50ZXJmYWNlCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgYSBjb250cmFjdCB0aGF0IGFsbG93cyBtaW50aW5nL2J1cm5pbmcgb2YgdG9rZW5zCiAqIEBkZXYgV2UgZG8gbm90IHVzZSBldmVudHMgVHJhbnNmZXIoMHgwLCBvd25lciwgYW1vdW50KSBmb3IgbWludGluZyBhcyBkZXNjcmliZWQgaW4gdGhlIEVJUDIwCiAqIEBkZXYgYmVjYXVzZSB0aGF0IGFyZSBub3QgdHJhbnNmZXJzCiAqLwpjb250cmFjdCBDcnlkckNvbnRyb2xsZXJNaW50YWJsZSBpcyBNYW5hZ2VhYmxlSW50ZXJmYWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXVzYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyQmFzZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyTWludGFibGVJbnRlcmZhY2UgewoKICAvKiBtaW50aW5nL2J1cm5pbmcgKi8KCiAgZnVuY3Rpb24gbWludCgKICAgIGFkZHJlc3MgX2FjY291bnQsIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICB3aGVuQ29udHJhY3ROb3RQYXVzZWQKICAgIG9ubHlBbGxvd2VkTWFuYWdlcignbWludF9jcnlkcicpCiAgewogICAgLy8gaW5wdXQgcGFyYW1ldGVycyBjaGVja2VkIGJ5IHRoZSBzdG9yYWdlCgogICAgQ3J5ZHJTdG9yYWdlQmFsYW5jZUludGVyZmFjZShnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkpLmluY3JlYXNlQmFsYW5jZShfYWNjb3VudCwgX3ZhbHVlKTsKCiAgICBpZiAoaXNDcnlkclZpZXdSZWdpc3RlcmVkKCdlcmMyMCcpID09IHRydWUpIHsKICAgICAgQ3J5ZHJWaWV3RVJDMjBNaW50YWJsZUludGVyZmFjZShnZXRDcnlkclZpZXdBZGRyZXNzKCdlcmMyMCcpKS5lbWl0TWludEV2ZW50KF9hY2NvdW50LCBfdmFsdWUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gYnVybigKICAgIGFkZHJlc3MgX2FjY291bnQsIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICB3aGVuQ29udHJhY3ROb3RQYXVzZWQKICAgIG9ubHlBbGxvd2VkTWFuYWdlcignYnVybl9jcnlkcicpCiAgewogICAgLy8gaW5wdXQgcGFyYW1ldGVycyBjaGVja2VkIGJ5IHRoZSBzdG9yYWdlCgogICAgQ3J5ZHJTdG9yYWdlQmFsYW5jZUludGVyZmFjZShnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkpLmRlY3JlYXNlQmFsYW5jZShfYWNjb3VudCwgX3ZhbHVlKTsKCiAgICBpZiAoaXNDcnlkclZpZXdSZWdpc3RlcmVkKCdlcmMyMCcpID09IHRydWUpIHsKICAgICAgQ3J5ZHJWaWV3RVJDMjBNaW50YWJsZUludGVyZmFjZShnZXRDcnlkclZpZXdBZGRyZXNzKCdlcmMyMCcpKS5lbWl0QnVybkV2ZW50KF9hY2NvdW50LCBfdmFsdWUpOwogICAgfQogIH0KfQoKCgovKioKICogQHRpdGxlIENyeWRyQ29udHJvbGxlckVSQzIwSW50ZXJmYWNlIGludGVyZmFjZQogKiBAZGV2IEludGVyZmFjZSBvZiBhIGNvbnRyYWN0IHRoYXQgaW1wbGVtZW50IGJ1c2luZXNzLWxvZ2ljIG9mIGFuIEVSQzIwIENyeURSCiAqLwpjb250cmFjdCBDcnlkckNvbnRyb2xsZXJFUkMyMEludGVyZmFjZSB7CgogIC8qIEVSQzIwIHN1cHBvcnQuIF9tc2dzZW5kZXIgLSBhY2NvdW50IHRoYXQgaW52b2tlZCBDcnlkclZpZXcgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfbXNnc2VuZGVyLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYzsKICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBnZXRCYWxhbmNlKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfbXNnc2VuZGVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9tc2dzZW5kZXIsIGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwogIGZ1bmN0aW9uIGdldEFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgoKCi8qKgogKiBAdGl0bGUgQ3J5ZHJDb250cm9sbGVyRVJDMjBJbnRlcmZhY2UgaW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgY29udHJhY3QgdGhhdCBpbXBsZW1lbnQgYnVzaW5lc3MtbG9naWMgb2YgYW4gRVJDMjAgQ3J5RFIKICovCmNvbnRyYWN0IENyeWRyQ29udHJvbGxlckVSQzIwIGlzIFBhdXNhYmxlSW50ZXJmYWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcnlkckNvbnRyb2xsZXJCYXNlSW50ZXJmYWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcnlkckNvbnRyb2xsZXJFUkMyMEludGVyZmFjZSB7CgogIC8qIEVSQzIwIHN1cHBvcnQuIF9tc2dzZW5kZXIgLSBhY2NvdW50IHRoYXQgaW52b2tlZCBDcnlkclZpZXcgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXIoCiAgICBhZGRyZXNzIF9tc2dzZW5kZXIsCiAgICBhZGRyZXNzIF90bywKICAgIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICBvbmx5Q3J5ZHJWaWV3CiAgICB3aGVuQ29udHJhY3ROb3RQYXVzZWQKICB7CiAgICBDcnlkclN0b3JhZ2VFUkMyMEludGVyZmFjZShhZGRyZXNzKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkpLnRyYW5zZmVyKF9tc2dzZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICBpZiAoaXNDcnlkclZpZXdSZWdpc3RlcmVkKCdlcmMyMCcpID09IHRydWUpIHsKICAgICAgQ3J5ZHJWaWV3RVJDMjBMb2dnYWJsZUludGVyZmFjZShnZXRDcnlkclZpZXdBZGRyZXNzKCdlcmMyMCcpKS5lbWl0VHJhbnNmZXJFdmVudChfbXNnc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gQ3J5ZHJTdG9yYWdlQmFsYW5jZUludGVyZmFjZShhZGRyZXNzKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkpLmdldFRvdGFsU3VwcGx5KCk7CiAgfQoKICBmdW5jdGlvbiBnZXRCYWxhbmNlKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIENyeWRyU3RvcmFnZUJhbGFuY2VJbnRlcmZhY2UoYWRkcmVzcyhnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkpKS5nZXRCYWxhbmNlKF9vd25lcik7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKAogICAgYWRkcmVzcyBfbXNnc2VuZGVyLAogICAgYWRkcmVzcyBfc3BlbmRlciwKICAgIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICBvbmx5Q3J5ZHJWaWV3CiAgICB3aGVuQ29udHJhY3ROb3RQYXVzZWQKICB7CiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9ibG9iL21hc3Rlci9FSVBTL2VpcC0yMC10b2tlbi1zdGFuZGFyZC5tZAogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIC8vIFdlIGRlY2lkZWQgdG8gZW5mb3JjZSB1c2VycyB0byBzZXQgMCBiZWZvcmUgc2V0IG5ldyB2YWx1ZQogICAgdmFyIGFsbG93YW5jZSA9IENyeWRyU3RvcmFnZUFsbG93YW5jZUludGVyZmFjZShnZXRDcnlkclN0b3JhZ2VBZGRyZXNzKCkpLmdldEFsbG93YW5jZShfbXNnc2VuZGVyLCBfc3BlbmRlcik7CiAgICByZXF1aXJlKChhbGxvd2FuY2UgPiAwICYmIF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dhbmNlID09IDAgJiYgX3ZhbHVlID4gMCkpOwoKICAgIENyeWRyU3RvcmFnZUVSQzIwSW50ZXJmYWNlKGFkZHJlc3MoZ2V0Q3J5ZHJTdG9yYWdlQWRkcmVzcygpKSkuYXBwcm92ZShfbXNnc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICBpZiAoaXNDcnlkclZpZXdSZWdpc3RlcmVkKCdlcmMyMCcpID09IHRydWUpIHsKICAgICAgQ3J5ZHJWaWV3RVJDMjBMb2dnYWJsZUludGVyZmFjZShnZXRDcnlkclZpZXdBZGRyZXNzKCdlcmMyMCcpKS5lbWl0QXBwcm92YWxFdmVudChfbXNnc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgIGFkZHJlc3MgX21zZ3NlbmRlciwKICAgIGFkZHJlc3MgX2Zyb20sCiAgICBhZGRyZXNzIF90bywKICAgIHVpbnQyNTYgX3ZhbHVlCiAgKQogICAgcHVibGljCiAgICBvbmx5Q3J5ZHJWaWV3CiAgICB3aGVuQ29udHJhY3ROb3RQYXVzZWQKICB7CiAgICBDcnlkclN0b3JhZ2VFUkMyMEludGVyZmFjZShhZGRyZXNzKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkpLnRyYW5zZmVyRnJvbShfbXNnc2VuZGVyLCBfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgIGlmIChpc0NyeWRyVmlld1JlZ2lzdGVyZWQoJ2VyYzIwJykgPT0gdHJ1ZSkgewogICAgICBDcnlkclZpZXdFUkMyMExvZ2dhYmxlSW50ZXJmYWNlKGdldENyeWRyVmlld0FkZHJlc3MoJ2VyYzIwJykpLmVtaXRUcmFuc2ZlckV2ZW50KF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRBbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2ICkgewogICAgcmV0dXJuIENyeWRyU3RvcmFnZUFsbG93YW5jZUludGVyZmFjZShhZGRyZXNzKGdldENyeWRyU3RvcmFnZUFkZHJlc3MoKSkpLmdldEFsbG93YW5jZShfb3duZXIsIF9zcGVuZGVyKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBKTlRDb250cm9sbGVyIGludGVyZmFjZQogKiBAZGV2IENvbnRhaW5zIGhlbHBlciBtZXRob2RzIG9mIEpOVCBjb250cm9sbGVyIHRoYXQgbmVlZGVkIGJ5IG90aGVyIEppYnJlbCBjb250cmFjdHMKICovCmNvbnRyYWN0IEpOVENvbnRyb2xsZXJJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgSk5UQ2hhcmdlZEV2ZW50KGFkZHJlc3MgaW5kZXhlZCBwYXlhYmxlc2VydmljZSwgYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgoKICAvKiBBY3Rpb25zICovCgogIGZ1bmN0aW9uIGNoYXJnZUpOVChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYzsKfQoKCgovKioKICogQHRpdGxlIEpOVFBheWFibGVTZXJ2aWNlIGludGVyZmFjZQogKiBAZGV2IEludGVyZmFjZSBvZiBhIGNvbnRyYWN0IHRoYXQgY2hhcmdlIEpOVCBmb3IgYWN0aW9ucwogKi8KY29udHJhY3QgSk5UUGF5YWJsZVNlcnZpY2VJbnRlcmZhY2UgewoKICAvKiBFdmVudHMgKi8KCiAgZXZlbnQgSk5UQ29udHJvbGxlckNoYW5nZWRFdmVudChhZGRyZXNzIGpudGNvbnRyb2xsZXIpOwogIGV2ZW50IEpOVEJlbmVmaWNpYXJ5Q2hhbmdlZEV2ZW50KGFkZHJlc3Mgam50YmVuZWZpY2lhcnkpOwogIGV2ZW50IEpOVENoYXJnZWRFdmVudChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCgogIC8qIENvbmZpZ3VyYXRpb24gKi8KCiAgZnVuY3Rpb24gc2V0Sm50Q29udHJvbGxlcihhZGRyZXNzIF9qbnRDb250cm9sbGVyKSBleHRlcm5hbDsKICBmdW5jdGlvbiBnZXRKbnRDb250cm9sbGVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpOwoKICBmdW5jdGlvbiBzZXRKbnRCZW5lZmljaWFyeShhZGRyZXNzIF9qbnRCZW5lZmljaWFyeSkgZXh0ZXJuYWw7CiAgZnVuY3Rpb24gZ2V0Sm50QmVuZWZpY2lhcnkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CgoKICAvKiBBY3Rpb25zICovCgogIGZ1bmN0aW9uIGNoYXJnZUpOVEZvclNlcnZpY2UoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIGludGVybmFsOwp9CgoKCmNvbnRyYWN0IEpOVFBheWFibGVTZXJ2aWNlIGlzIENvbW1vbk1vZGlmaWVyc0ludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFuYWdlYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF1c2FibGVJbnRlcmZhY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpOVFBheWFibGVTZXJ2aWNlSW50ZXJmYWNlIHsKCiAgLyogU3RvcmFnZSAqLwoKICBKTlRDb250cm9sbGVySW50ZXJmYWNlIGpudENvbnRyb2xsZXI7CiAgYWRkcmVzcyBqbnRCZW5lZmljaWFyeTsKCgogIC8qIEpOVFBheWFibGVTZXJ2aWNlSW50ZXJmYWNlICovCgogIC8qIENvbmZpZ3VyYXRpb24gKi8KCiAgZnVuY3Rpb24gc2V0Sm50Q29udHJvbGxlcigKICAgIGFkZHJlc3MgX2pudENvbnRyb2xsZXIKICApCiAgICBleHRlcm5hbAogICAgb25seUNvbnRyYWN0QWRkcmVzcyhfam50Q29udHJvbGxlcikKICAgIG9ubHlBbGxvd2VkTWFuYWdlcignc2V0X2pudF9jb250cm9sbGVyJykKICAgIHdoZW5Db250cmFjdFBhdXNlZAogIHsKICAgIHJlcXVpcmUoX2pudENvbnRyb2xsZXIgIT0gYWRkcmVzcyhqbnRDb250cm9sbGVyKSk7CgogICAgam50Q29udHJvbGxlciA9IEpOVENvbnRyb2xsZXJJbnRlcmZhY2UoX2pudENvbnRyb2xsZXIpOwogICAgSk5UQ29udHJvbGxlckNoYW5nZWRFdmVudChfam50Q29udHJvbGxlcik7CiAgfQoKICBmdW5jdGlvbiBnZXRKbnRDb250cm9sbGVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIHJldHVybiBhZGRyZXNzKGpudENvbnRyb2xsZXIpOwogIH0KCgogIGZ1bmN0aW9uIHNldEpudEJlbmVmaWNpYXJ5KAogICAgYWRkcmVzcyBfam50QmVuZWZpY2lhcnkKICApCiAgICBleHRlcm5hbAogICAgb25seVZhbGlkSm50QmVuZWZpY2lhcnkoX2pudEJlbmVmaWNpYXJ5KQogICAgb25seUFsbG93ZWRNYW5hZ2VyKCdzZXRfam50X2JlbmVmaWNpYXJ5JykKICAgIHdoZW5Db250cmFjdFBhdXNlZAogIHsKICAgIHJlcXVpcmUoX2pudEJlbmVmaWNpYXJ5ICE9IGpudEJlbmVmaWNpYXJ5KTsKICAgIHJlcXVpcmUoX2pudEJlbmVmaWNpYXJ5ICE9IGFkZHJlc3ModGhpcykpOwoKICAgIGpudEJlbmVmaWNpYXJ5ID0gX2pudEJlbmVmaWNpYXJ5OwogICAgSk5UQmVuZWZpY2lhcnlDaGFuZ2VkRXZlbnQoam50QmVuZWZpY2lhcnkpOwogIH0KCiAgZnVuY3Rpb24gZ2V0Sm50QmVuZWZpY2lhcnkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgcmV0dXJuIGpudEJlbmVmaWNpYXJ5OwogIH0KCgogIC8qIEFjdGlvbnMgKi8KCiAgZnVuY3Rpb24gY2hhcmdlSk5URm9yU2VydmljZShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgd2hlbkNvbnRyYWN0Tm90UGF1c2VkIHsKICAgIHJlcXVpcmUoX2Zyb20gIT0gYWRkcmVzcygweDApKTsKICAgIHJlcXVpcmUoX2Zyb20gIT0gam50QmVuZWZpY2lhcnkpOwogICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKCiAgICBqbnRDb250cm9sbGVyLmNoYXJnZUpOVChfZnJvbSwgam50QmVuZWZpY2lhcnksIF92YWx1ZSk7CiAgICBKTlRDaGFyZ2VkRXZlbnQoX2Zyb20sIGpudEJlbmVmaWNpYXJ5LCBfdmFsdWUpOwogIH0KCgogIC8qIFBhdXNhYmxlICovCgogIC8qKgogICAqIEBkZXYgT3ZlcnJpZGUgbWV0aG9kIHRvIGVuc3VyZSB0aGF0IGNvbnRyYWN0IHByb3Blcmx5IGNvbmZpZ3VyZWQgYmVmb3JlIGl0IGlzIHVucGF1c2VkCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZUNvbnRyYWN0KCkKICAgIHB1YmxpYwogICAgb25seUNvbnRyYWN0QWRkcmVzcyhqbnRDb250cm9sbGVyKQogICAgb25seVZhbGlkSm50QmVuZWZpY2lhcnkoam50QmVuZWZpY2lhcnkpCiAgewogICAgc3VwZXIudW5wYXVzZUNvbnRyYWN0KCk7CiAgfQoKCiAgLyogSGVscGVycyAqLwoKICBtb2RpZmllciBvbmx5VmFsaWRKbnRCZW5lZmljaWFyeShhZGRyZXNzIF9qbnRCZW5lZmljaWFyeSkgewogICAgcmVxdWlyZShfam50QmVuZWZpY2lhcnkgIT0gYWRkcmVzcygweDApKTsKICAgIF87CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgSk5UUGF5YWJsZVNlcnZpY2VFUkMyMEZlZXMgaW50ZXJmYWNlCiAqIEBkZXYgSW50ZXJmYWNlIG9mIGEgQ3J5RFIgY29udHJvbGxlciB0aGF0IGNoYXJnZSBKTlQgZm9yIGFjdGlvbnMKICogQGRldiBQcmljZSBmb3IgYWN0aW9ucyBoYXMgYSBmbGF0IHZhbHVlIGFuZCBkbyBub3QgZGVwZW5kIG9uIGFtb3VudCBvZiB0cmFuc2ZlcnJlZCBDcnlEUnMKICovCmNvbnRyYWN0IEpOVFBheWFibGVTZXJ2aWNlRVJDMjBGZWVzSW50ZXJmYWNlIHsKCiAgLyogRXZlbnRzICovCgogIGV2ZW50IEpOVFByaWNlVHJhbnNmZXJDaGFuZ2VkRXZlbnQodWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgSk5UUHJpY2VUcmFuc2ZlckZyb21DaGFuZ2VkRXZlbnQodWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgSk5UUHJpY2VBcHByb3ZlQ2hhbmdlZEV2ZW50KHVpbnQyNTYgdmFsdWUpOwoKCiAgLyogQ29uZmlndXJhdGlvbiAqLwoKICBmdW5jdGlvbiBzZXRKbnRQcmljZSh1aW50MjU2IF9qbnRQcmljZVRyYW5zZmVyLCB1aW50MjU2IF9qbnRQcmljZVRyYW5zZmVyRnJvbSwgdWludDI1NiBfam50UHJpY2VBcHByb3ZlKSBleHRlcm5hbDsKICBmdW5jdGlvbiBnZXRKbnRQcmljZUZvclRyYW5zZmVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGdldEpudFByaWNlRm9yVHJhbnNmZXJGcm9tKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGdldEpudFByaWNlRm9yQXBwcm92ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKCgpjb250cmFjdCBKTlRQYXlhYmxlU2VydmljZUVSQzIwRmVlcyBpcyBNYW5hZ2VhYmxlSW50ZXJmYWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXVzYWJsZUludGVyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSk5UUGF5YWJsZVNlcnZpY2VFUkMyMEZlZXNJbnRlcmZhY2UgewoKICAvKiBTdG9yYWdlICovCgogIHVpbnQyNTYgam50UHJpY2VUcmFuc2ZlcjsKICB1aW50MjU2IGpudFByaWNlVHJhbnNmZXJGcm9tOwogIHVpbnQyNTYgam50UHJpY2VBcHByb3ZlOwoKCiAgLyogQ29uc3RydWN0b3IgKi8KCiAgZnVuY3Rpb24gSk5UUGF5YWJsZVNlcnZpY2VFUkMyMEZlZXMoCiAgICB1aW50MjU2IF9qbnRQcmljZVRyYW5zZmVyLAogICAgdWludDI1NiBfam50UHJpY2VUcmFuc2ZlckZyb20sCiAgICB1aW50MjU2IF9qbnRQcmljZUFwcHJvdmUKICApCiAgICBwdWJsaWMKICB7CiAgICBqbnRQcmljZVRyYW5zZmVyID0gX2pudFByaWNlVHJhbnNmZXI7CiAgICBqbnRQcmljZVRyYW5zZmVyRnJvbSA9IF9qbnRQcmljZVRyYW5zZmVyRnJvbTsKICAgIGpudFByaWNlQXBwcm92ZSA9IF9qbnRQcmljZUFwcHJvdmU7CiAgfQoKCiAgLyogSk5UUGF5YWJsZVNlcnZpY2VFUkMyMEZlZXNJbnRlcmZhY2UgKi8KCiAgLyogQ29uZmlndXJhdGlvbiAqLwoKICBmdW5jdGlvbiBzZXRKbnRQcmljZSgKICAgIHVpbnQyNTYgX2pudFByaWNlVHJhbnNmZXIsIHVpbnQyNTYgX2pudFByaWNlVHJhbnNmZXJGcm9tLCB1aW50MjU2IF9qbnRQcmljZUFwcHJvdmUKICApCiAgICBleHRlcm5hbAogICAgb25seUFsbG93ZWRNYW5hZ2VyKCdzZXRfam50X3ByaWNlJykKICAgIHdoZW5Db250cmFjdFBhdXNlZAogIHsKICAgIHJlcXVpcmUoX2pudFByaWNlVHJhbnNmZXIgIT0gam50UHJpY2VUcmFuc2ZlciB8fAogICAgICAgICAgICBfam50UHJpY2VUcmFuc2ZlckZyb20gIT0gam50UHJpY2VUcmFuc2ZlckZyb20gfHwKICAgICAgICAgICAgX2pudFByaWNlQXBwcm92ZSAhPSBqbnRQcmljZUFwcHJvdmUpOwoKICAgIGlmIChqbnRQcmljZVRyYW5zZmVyICE9IF9qbnRQcmljZVRyYW5zZmVyKSB7CiAgICAgIGpudFByaWNlVHJhbnNmZXIgPSBfam50UHJpY2VUcmFuc2ZlcjsKICAgICAgSk5UUHJpY2VUcmFuc2ZlckNoYW5nZWRFdmVudChfam50UHJpY2VUcmFuc2Zlcik7CiAgICB9CiAgICBpZiAoam50UHJpY2VUcmFuc2ZlckZyb20gIT0gX2pudFByaWNlVHJhbnNmZXJGcm9tKSB7CiAgICAgIGpudFByaWNlVHJhbnNmZXJGcm9tID0gX2pudFByaWNlVHJhbnNmZXJGcm9tOwogICAgICBKTlRQcmljZVRyYW5zZmVyRnJvbUNoYW5nZWRFdmVudChfam50UHJpY2VUcmFuc2ZlckZyb20pOwogICAgfQogICAgaWYgKGpudFByaWNlQXBwcm92ZSAhPSBfam50UHJpY2VBcHByb3ZlKSB7CiAgICAgIGpudFByaWNlQXBwcm92ZSA9IF9qbnRQcmljZUFwcHJvdmU7CiAgICAgIEpOVFByaWNlQXBwcm92ZUNoYW5nZWRFdmVudChfam50UHJpY2VBcHByb3ZlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldEpudFByaWNlRm9yVHJhbnNmZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGpudFByaWNlVHJhbnNmZXI7CiAgfQoKICBmdW5jdGlvbiBnZXRKbnRQcmljZUZvclRyYW5zZmVyRnJvbSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gam50UHJpY2VUcmFuc2ZlckZyb207CiAgfQoKICBmdW5jdGlvbiBnZXRKbnRQcmljZUZvckFwcHJvdmUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGpudFByaWNlQXBwcm92ZTsKICB9Cn0KCgoKY29udHJhY3QgSkNhc2hDcnlkckNvbnRyb2xsZXIgaXMgQ29tbW9uTW9kaWZpZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc3NldElELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25hYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYW5hZ2VhYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXVzYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnl0ZWNvZGVFeGVjdXRvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyQmFzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyQmxvY2thYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcnlkckNvbnRyb2xsZXJNaW50YWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyRVJDMjAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpOVFBheWFibGVTZXJ2aWNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKTlRQYXlhYmxlU2VydmljZUVSQzIwRmVlcyB7CgogIC8qIENvbnN0cnVjdG9yICovCiAgLy8gMTBeMTggLSBhc3N1bWVzIHRoYXQgSk5UIGhhcyBkZWNpbWFscz09MTgsIDFKTlQgcGVyIG9wZXJhdGlvbgoKICBmdW5jdGlvbiBKQ2FzaENyeWRyQ29udHJvbGxlcihzdHJpbmcgX2Fzc2V0SUQpCiAgICBwdWJsaWMKICAgIEFzc2V0SUQoX2Fzc2V0SUQpCiAgICBKTlRQYXlhYmxlU2VydmljZUVSQzIwRmVlcygxMF4xOCwgMTBeMTgsIDEwXjE4KQogIHt9CgoKICAvKiBDcnlkckNvbnRyb2xsZXJFUkMyMCAqLwoKICAvKiBFUkMyMCBzdXBwb3J0LiBfbXNnc2VuZGVyIC0gYWNjb3VudCB0aGF0IGludm9rZWQgQ3J5ZHJWaWV3ICovCgogIGZ1bmN0aW9uIHRyYW5zZmVyKAogICAgYWRkcmVzcyBfbXNnc2VuZGVyLAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF92YWx1ZQogICkKICAgIHB1YmxpYwogIHsKICAgIENyeWRyQ29udHJvbGxlckVSQzIwLnRyYW5zZmVyKF9tc2dzZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIGNoYXJnZUpOVEZvclNlcnZpY2UoX21zZ3NlbmRlciwgZ2V0Sm50UHJpY2VGb3JUcmFuc2ZlcigpKTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoCiAgICBhZGRyZXNzIF9tc2dzZW5kZXIsCiAgICBhZGRyZXNzIF9zcGVuZGVyLAogICAgdWludDI1NiBfdmFsdWUKICApCiAgICBwdWJsaWMKICB7CiAgICBDcnlkckNvbnRyb2xsZXJFUkMyMC5hcHByb3ZlKF9tc2dzZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgY2hhcmdlSk5URm9yU2VydmljZShfbXNnc2VuZGVyLCBnZXRKbnRQcmljZUZvckFwcHJvdmUoKSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCiAgICBhZGRyZXNzIF9tc2dzZW5kZXIsCiAgICBhZGRyZXNzIF9mcm9tLAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF92YWx1ZQogICkKICAgIHB1YmxpYwogIHsKICAgIENyeWRyQ29udHJvbGxlckVSQzIwLnRyYW5zZmVyRnJvbShfbXNnc2VuZGVyLCBfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgY2hhcmdlSk5URm9yU2VydmljZShfbXNnc2VuZGVyLCBnZXRKbnRQcmljZUZvclRyYW5zZmVyRnJvbSgpKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBKTlRDb250cm9sbGVyCiAqIEBkZXYgTWVkaWF0ZXMgdmlld3MgYW5kIHN0b3JhZ2Ugb2YgSk5ULCBwcm92aWRlcyBhZGRpdGlvbmFsIG1ldGhvZHMgZm9yIEppYnJlbCBjb250cmFjdHMKICovCmNvbnRyYWN0IEpOVENvbnRyb2xsZXIgaXMgQ29tbW9uTW9kaWZpZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgIEFzc2V0SUQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgT3duYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBNYW5hZ2VhYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgIFBhdXNhYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgIEJ5dGVjb2RlRXhlY3V0b3IsCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyQmFzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBDcnlkckNvbnRyb2xsZXJCbG9ja2FibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyTWludGFibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ3J5ZHJDb250cm9sbGVyRVJDMjAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSk5UQ29udHJvbGxlckludGVyZmFjZSB7CgogIC8qIENvbnN0cnVjdG9yICovCgogIGZ1bmN0aW9uIEpOVENvbnRyb2xsZXIoKSBBc3NldElEKCdKTlQnKSBwdWJsaWMge30KCgogIC8qIEpOVENvbnRyb2xsZXJJbnRlcmZhY2UgKi8KCiAgZnVuY3Rpb24gY2hhcmdlSk5UKAogICAgYWRkcmVzcyBfZnJvbSwKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdmFsdWUKICApCiAgICBwdWJsaWMKICAgIG9ubHlBbGxvd2VkTWFuYWdlcignam50X3BheWFibGVfc2VydmljZScpIHsKICAgIENyeWRyU3RvcmFnZUVSQzIwSW50ZXJmYWNlKGFkZHJlc3MoY3J5ZHJTdG9yYWdlKSkudHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIEpOVENoYXJnZWRFdmVudChtc2cuc2VuZGVyLCBfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KfQ=='.
	

]
