Class {
	#name : #SRT711e10146e6c00f18e2805cf165d9bc5644b9dbe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT711e10146e6c00f18e2805cf165d9bc5644b9dbe >> base64 [
	^ 'Ly9BIEJ1cm5hYmxlT3BlblBheW1lbnQgaXMgaW5zdGFudGlhdGVkIHdpdGggYSBzcGVjaWZpZWQgcGF5ZXIgYW5kIGEgY29tbWl0VGhyZXNob2xkLgovL1RoZSByZWNpcGllbnQgaXMgbm90IHNldCB3aGVuIHRoZSBjb250cmFjdCBpcyBpbnN0YW50aWF0ZWQuCgovL1RoZSBjb25zdHJ1Y3RvciBpcyBwYXlhYmxlLCBzbyB0aGUgY29udHJhY3QgY2FuIGJlIGluc3RhbnRpYXRlZCB3aXRoIGluaXRpYWwgZnVuZHMuCi8vT25seSB0aGUgcGF5ZXIgY2FuIGZ1bmQgdGhlIFBheW1lbnQgYWZ0ZXIgaW5zdGFudGlhdGlvbi4KCi8vQWxsIGJlaGF2aW9yIG9mIHRoZSBjb250cmFjdCBpcyBkaXJlY3RlZCBieSB0aGUgcGF5ZXIsIGJ1dAovL3RoZSBwYXllciBjYW4gbmV2ZXIgZGlyZWN0bHkgcmVjb3ZlciB0aGUgcGF5bWVudCwKLy91bmxlc3MgaGUgY2FsbHMgdGhlIHJlY292ZXIoKSBmdW5jdGlvbiBiZWZvcmUgYW55b25lIGVsc2UgY29tbWl0KClzLgoKLy9BbnlvbmUgY2FuIGJlY29tZSB0aGUgcmVjaXBpZW50IGJ5IGNvbnRyaWJ1dGluZyB0aGUgY29tbWl0VGhyZXNob2xkIHdpdGggY29tbWl0KCkuCi8vVGhlIHJlY2lwaWVudCB3aWxsIG5ldmVyIGJlIGNoYW5nZWQgb25jZSBpdCdzIGJlZW4gc2V0IHZpYSBjb21taXQoKS4KCi8vVGhlIHBheWVyIGNhbiBhdCBhbnkgdGltZSBjaG9vc2UgdG8gYnVybiBvciByZWxlYXNlIHRvIHRoZSByZWNpcGllbnQgYW55IGFtb3VudCBvZiBmdW5kcy4KCnByYWdtYSBzb2xpZGl0eSBeMC40LjEwOwoKY29udHJhY3QgQnVybmFibGVPcGVuUGF5bWVudCB7CiAgICAvL0JPUCB3aWxsIHN0YXJ0IHdpdGggYSBwYXllciBidXQgbm8gcmVjaXBpZW50IChyZWNpcGllbnQ9PTB4MCkKICAgIGFkZHJlc3MgcHVibGljIHBheWVyOwogICAgYWRkcmVzcyBwdWJsaWMgcmVjaXBpZW50OwogICAgYWRkcmVzcyBjb25zdGFudCBidXJuQWRkcmVzcyA9IDB4MDsKICAgIAogICAgLy9Ob3RlIHRoYXQgdGhlc2Ugd2lsbCB0cmFjaywgYnV0IG5vdCBpbmZsdWVuY2UgdGhlIEJPUCBsb2dpYy4KICAgIHVpbnQgcHVibGljIGFtb3VudERlcG9zaXRlZDsKICAgIHVpbnQgcHVibGljIGFtb3VudEJ1cm5lZDsKICAgIHVpbnQgcHVibGljIGFtb3VudFJlbGVhc2VkOwogICAgCiAgICAvL3BheWVyU3RyaW5nIGFuZCByZWNpcGllbnRTdHJpbmcgZW5hYmxlIHJ1ZGltZW50YXJ5IGNvbW11bmljYXRpb24vcHVibGlzaGluZy4KICAgIC8vQWx0aG91Z2ggdGhlIHR3byBwYXJ0aWVzIG1pZ2h0IHF1aWNrbHkgbW92ZSB0byBhbm90aGVyIG1lZGl1bSB3aXRoIGJldHRlciBwcml2YWN5IG9yIGNvbnZlbmllbmNlLAogICAgLy9iZWdpbm5pbmcgd2l0aCB0aGlzIGlzIG5pY2UgYmVjYXVzZSBpdCdzIGFscmVhZHkgdHJ1c3RsZXNzL3RyYW5zcGFyZW50L3NpZ25lZC9wc2V1ZG9ueW1vdXMvZXRjLgogICAgc3RyaW5nIHB1YmxpYyBwYXllclN0cmluZzsKICAgIHN0cmluZyBwdWJsaWMgcmVjaXBpZW50U3RyaW5nOwogICAgCiAgICAvL0Ftb3VudCBvZiBldGhlciBhIHByb3NwZWN0aXZlIHJlY2lwaWVudCBtdXN0IHBheSB0byBwZXJtYW5lbnRseSBiZWNvbWUgdGhlIHJlY2lwaWVudC4gU2VlIGNvbW1pdCgpLgogICAgdWludCBwdWJsaWMgY29tbWl0VGhyZXNob2xkOwogICAgCiAgICAvL1doYXQgaWYgdGhlIHBheWVyIGZhbGxzIG9mZiB0aGUgZmFjZSBvZiB0aGUgcGxhbmV0PwogICAgLy9BIEJPUCBpcyBpbnN0YW50aWF0ZWQgd2l0aCBhIGNob3NlbiBkZWZhdWx0QWN0aW9uLCB3aGljaCBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBpbnN0YW50aWF0aW9uLgogICAgZW51bSBEZWZhdWx0QWN0aW9uIHtOb25lLCBSZWxlYXNlLCBCdXJufQogICAgRGVmYXVsdEFjdGlvbiBwdWJsaWMgZGVmYXVsdEFjdGlvbjsKICAgIAogICAgLy9pZiBkZWZhdWx0QWN0aW9uICE9IE5vbmUsIGhvdyBsb25nIHNob3VsZCB3ZSB3YWl0IGFsbG93aW5nIHRoZSBkZWZhdWx0IGFjdGlvbiB0byBiZSBjYWxsZWQ/CiAgICB1aW50IHB1YmxpYyBkZWZhdWx0VGltZW91dExlbmd0aDsKICAgIAogICAgLy9DYWxjdWxhdGVkIGZyb20gZGVmYXVsdFRpbWVvdXRMZW5ndGggaW4gY29tbWl0KCksCiAgICAvL2FuZCByZWNhbHVjbGF0ZWQgd2hlbmV2ZXIgdGhlIHBheWVyIChvciBwb3NzaWJseSB0aGUgcmVjaXBpZW50KSBjYWxscyBkZWxheURlZmF1bHRBY3Rpb24oKQogICAgdWludCBwdWJsaWMgZGVmYXVsdFRyaWdnZXJUaW1lOwogICAgCiAgICAvL01vc3QgYWN0aW9uIGhhcHBlbnMgaW4gdGhlIENvbW1pdHRlZCBzdGF0ZS4KICAgIGVudW0gU3RhdGUge09wZW4sIENvbW1pdHRlZCwgRXhwZW5kZWR9CiAgICBTdGF0ZSBwdWJsaWMgc3RhdGU7CiAgICAvL05vdGUgdGhhdCBhIEJPUCBjYW5ub3QgZ28gZnJvbSBDb21taXR0ZWQgYmFjayB0byBPcGVuLCBidXQgaXQgY2FuIGdvIGZyb20gRXhwZW5kZWQgYmFjayB0byBDb21taXR0ZWQKICAgIC8vKHRoaXMgd291bGQgcmV0YWluIHRoZSBjb21taXR0ZWQgcmVjaXBpZW50KS4gU2VhcmNoIGZvciBFeHBlbmRlZCBhbmQgVW5leHBlbmRlZCBldmVudHMgdG8gc2VlIGhvdyB0aGlzIHdvcmtzLgogICAgCiAgICBtb2RpZmllciBpblN0YXRlKFN0YXRlIHMpIHsgcmVxdWlyZShzID09IHN0YXRlKTsgXzsgfQogICAgbW9kaWZpZXIgb25seVBheWVyKCkgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGF5ZXIpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5UmVjaXBpZW50KCkgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcmVjaXBpZW50KTsgXzsgfQogICAgbW9kaWZpZXIgb25seVBheWVyT3JSZWNpcGllbnQoKSB7IHJlcXVpcmUoKG1zZy5zZW5kZXIgPT0gcGF5ZXIpIHx8IChtc2cuc2VuZGVyID09IHJlY2lwaWVudCkpOyBfOyB9CiAgICAKICAgIGV2ZW50IENyZWF0ZWQoYWRkcmVzcyBwYXllciwgdWludCBjb21taXRUaHJlc2hvbGQsIEJ1cm5hYmxlT3BlblBheW1lbnQuRGVmYXVsdEFjdGlvbiBkZWZhdWx0QWN0aW9uLCB1aW50IGRlZmF1bHRUaW1lb3V0TGVuZ3RoLCBzdHJpbmcgaW5pdGlhbFBheWVyU3RyaW5nKTsKICAgIGV2ZW50IEZ1bmRzQWRkZWQodWludCBhbW91bnQpOy8vVGhlIHBheWVyIGhhcyBhZGRlZCBmdW5kcyB0byB0aGUgQk9QLgogICAgZXZlbnQgUGF5ZXJTdHJpbmdVcGRhdGVkKHN0cmluZyBuZXdQYXllclN0cmluZyk7CiAgICBldmVudCBSZWNpcGllbnRTdHJpbmdVcGRhdGVkKHN0cmluZyBuZXdSZWNpcGllbnRTdHJpbmcpOwogICAgZXZlbnQgRnVuZHNSZWNvdmVyZWQoKTsKICAgIGV2ZW50IENvbW1pdHRlZChhZGRyZXNzIHJlY2lwaWVudCk7CiAgICBldmVudCBGdW5kc0J1cm5lZCh1aW50IGFtb3VudCk7CiAgICBldmVudCBGdW5kc1JlbGVhc2VkKHVpbnQgYW1vdW50KTsKICAgIGV2ZW50IEV4cGVuZGVkKCk7CiAgICBldmVudCBVbmV4cGVuZGVkKCk7CiAgICBldmVudCBEZWZhdWx0QWN0aW9uRGVsYXllZCgpOwogICAgZXZlbnQgRGVmYXVsdEFjdGlvbkNhbGxlZCgpOwogICAgCiAgICBmdW5jdGlvbiBCdXJuYWJsZU9wZW5QYXltZW50KGFkZHJlc3MgX3BheWVyLCB1aW50IF9jb21taXRUaHJlc2hvbGQsIERlZmF1bHRBY3Rpb24gX2RlZmF1bHRBY3Rpb24sIHVpbnQgX2RlZmF1bHRUaW1lb3V0TGVuZ3RoLCBzdHJpbmcgX3BheWVyU3RyaW5nKQogICAgcHVibGljCiAgICBwYXlhYmxlIHsKICAgICAgICBDcmVhdGVkKF9wYXllciwgX2NvbW1pdFRocmVzaG9sZCwgX2RlZmF1bHRBY3Rpb24sIF9kZWZhdWx0VGltZW91dExlbmd0aCwgX3BheWVyU3RyaW5nKTsKICAgICAgICAKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICBGdW5kc0FkZGVkKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIGFtb3VudERlcG9zaXRlZCArPSBtc2cudmFsdWU7CiAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICBzdGF0ZSA9IFN0YXRlLk9wZW47CiAgICAgICAgcGF5ZXIgPSBfcGF5ZXI7CiAgICAgICAgCiAgICAgICAgY29tbWl0VGhyZXNob2xkID0gX2NvbW1pdFRocmVzaG9sZDsKICAgICAgICAKICAgICAgICBkZWZhdWx0QWN0aW9uID0gX2RlZmF1bHRBY3Rpb247CiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb24gIT0gRGVmYXVsdEFjdGlvbi5Ob25lKSAKICAgICAgICAgICAgZGVmYXVsdFRpbWVvdXRMZW5ndGggPSBfZGVmYXVsdFRpbWVvdXRMZW5ndGg7CiAgICAgICAgCiAgICAgICAgcGF5ZXJTdHJpbmcgPSBfcGF5ZXJTdHJpbmc7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEZ1bGxTdGF0ZSgpCiAgICBwdWJsaWMKICAgIGNvbnN0YW50CiAgICByZXR1cm5zIChTdGF0ZSwgc3RyaW5nLCBhZGRyZXNzLCBzdHJpbmcsIHVpbnQsIHVpbnQsIHVpbnQsIHVpbnQpIHsKICAgICAgICByZXR1cm4gKHN0YXRlLCBwYXllclN0cmluZywgcmVjaXBpZW50LCByZWNpcGllbnRTdHJpbmcsIGFtb3VudERlcG9zaXRlZCwgYW1vdW50QnVybmVkLCBhbW91bnRSZWxlYXNlZCwgZGVmYXVsdFRyaWdnZXJUaW1lKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkRnVuZHMoKQogICAgcHVibGljCiAgICBvbmx5UGF5ZXIoKQogICAgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICAKICAgICAgICBGdW5kc0FkZGVkKG1zZy52YWx1ZSk7CiAgICAgICAgYW1vdW50RGVwb3NpdGVkICs9IG1zZy52YWx1ZTsKICAgICAgICBpZiAoc3RhdGUgPT0gU3RhdGUuRXhwZW5kZWQpIHsKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5Db21taXR0ZWQ7CiAgICAgICAgICAgIFVuZXhwZW5kZWQoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlY292ZXJGdW5kcygpCiAgICBwdWJsaWMKICAgIG9ubHlQYXllcigpCiAgICBpblN0YXRlKFN0YXRlLk9wZW4pCiAgICB7CiAgICAgICAgRnVuZHNSZWNvdmVyZWQoKTsKICAgICAgICBzZWxmZGVzdHJ1Y3QocGF5ZXIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjb21taXQoKQogICAgcHVibGljCiAgICBpblN0YXRlKFN0YXRlLk9wZW4pCiAgICBwYXlhYmxlCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gY29tbWl0VGhyZXNob2xkKTsKICAgICAgICAKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICBGdW5kc0FkZGVkKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIGFtb3VudERlcG9zaXRlZCArPSBtc2cudmFsdWU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJlY2lwaWVudCA9IG1zZy5zZW5kZXI7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5Db21taXR0ZWQ7CiAgICAgICAgQ29tbWl0dGVkKHJlY2lwaWVudCk7CiAgICAgICAgCiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb24gIT0gRGVmYXVsdEFjdGlvbi5Ob25lKSB7CiAgICAgICAgICAgIGRlZmF1bHRUcmlnZ2VyVGltZSA9IG5vdyArIGRlZmF1bHRUaW1lb3V0TGVuZ3RoOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gaW50ZXJuYWxCdXJuKHVpbnQgYW1vdW50KQogICAgcHJpdmF0ZQogICAgaW5TdGF0ZShTdGF0ZS5Db21taXR0ZWQpCiAgICB7CiAgICAgICAgYnVybkFkZHJlc3MudHJhbnNmZXIoYW1vdW50KTsKICAgICAgICAKICAgICAgICBhbW91bnRCdXJuZWQgKz0gYW1vdW50OwogICAgICAgIEZ1bmRzQnVybmVkKGFtb3VudCk7CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA9PSAwKSB7CiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuRXhwZW5kZWQ7CiAgICAgICAgICAgIEV4cGVuZGVkKCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQgYW1vdW50KQogICAgcHVibGljCiAgICBpblN0YXRlKFN0YXRlLkNvbW1pdHRlZCkKICAgIG9ubHlQYXllcigpCiAgICB7CiAgICAgICAgaW50ZXJuYWxCdXJuKGFtb3VudCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGludGVybmFsUmVsZWFzZSh1aW50IGFtb3VudCkKICAgIHByaXZhdGUKICAgIGluU3RhdGUoU3RhdGUuQ29tbWl0dGVkKQogICAgewogICAgICAgIHJlY2lwaWVudC50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIAogICAgICAgIGFtb3VudFJlbGVhc2VkICs9IGFtb3VudDsKICAgICAgICBGdW5kc1JlbGVhc2VkKGFtb3VudCk7CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA9PSAwKSB7CiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuRXhwZW5kZWQ7CiAgICAgICAgICAgIEV4cGVuZGVkKCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZWxlYXNlKHVpbnQgYW1vdW50KQogICAgcHVibGljCiAgICBpblN0YXRlKFN0YXRlLkNvbW1pdHRlZCkKICAgIG9ubHlQYXllcigpCiAgICB7CiAgICAgICAgaW50ZXJuYWxSZWxlYXNlKGFtb3VudCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFBheWVyU3RyaW5nKHN0cmluZyBfc3RyaW5nKQogICAgcHVibGljCiAgICBvbmx5UGF5ZXIoKQogICAgewogICAgICAgIHBheWVyU3RyaW5nID0gX3N0cmluZzsKICAgICAgICBQYXllclN0cmluZ1VwZGF0ZWQocGF5ZXJTdHJpbmcpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRSZWNpcGllbnRTdHJpbmcoc3RyaW5nIF9zdHJpbmcpCiAgICBwdWJsaWMKICAgIG9ubHlSZWNpcGllbnQoKQogICAgewogICAgICAgIHJlY2lwaWVudFN0cmluZyA9IF9zdHJpbmc7CiAgICAgICAgUmVjaXBpZW50U3RyaW5nVXBkYXRlZChyZWNpcGllbnRTdHJpbmcpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkZWxheURlZmF1bHRBY3Rpb24oKQogICAgcHVibGljCiAgICBvbmx5UGF5ZXJPclJlY2lwaWVudCgpCiAgICBpblN0YXRlKFN0YXRlLkNvbW1pdHRlZCkKICAgIHsKICAgICAgICByZXF1aXJlKGRlZmF1bHRBY3Rpb24gIT0gRGVmYXVsdEFjdGlvbi5Ob25lKTsKICAgICAgICAKICAgICAgICBkZWZhdWx0VHJpZ2dlclRpbWUgPSBub3cgKyBkZWZhdWx0VGltZW91dExlbmd0aDsKICAgICAgICBEZWZhdWx0QWN0aW9uRGVsYXllZCgpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjYWxsRGVmYXVsdEFjdGlvbigpCiAgICBwdWJsaWMKICAgIG9ubHlQYXllck9yUmVjaXBpZW50KCkKICAgIGluU3RhdGUoU3RhdGUuQ29tbWl0dGVkKQogICAgewogICAgICAgIHJlcXVpcmUoZGVmYXVsdEFjdGlvbiAhPSBEZWZhdWx0QWN0aW9uLk5vbmUpOwogICAgICAgIHJlcXVpcmUobm93ID49IGRlZmF1bHRUcmlnZ2VyVGltZSk7CiAgICAgICAgCiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb24gPT0gRGVmYXVsdEFjdGlvbi5CdXJuKSB7CiAgICAgICAgICAgIGludGVybmFsQnVybih0aGlzLmJhbGFuY2UpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChkZWZhdWx0QWN0aW9uID09IERlZmF1bHRBY3Rpb24uUmVsZWFzZSkgewogICAgICAgICAgICBpbnRlcm5hbFJlbGVhc2UodGhpcy5iYWxhbmNlKTsKICAgICAgICB9CiAgICAgICAgRGVmYXVsdEFjdGlvbkNhbGxlZCgpOwogICAgfQp9Cgpjb250cmFjdCBCdXJuYWJsZU9wZW5QYXltZW50RmFjdG9yeSB7CiAgICBldmVudCBOZXdCT1AoYWRkcmVzcyBuZXdCT1BBZGRyZXNzLCBhZGRyZXNzIHBheWVyLCB1aW50IGNvbW1pdFRocmVzaG9sZCwgQnVybmFibGVPcGVuUGF5bWVudC5EZWZhdWx0QWN0aW9uIGRlZmF1bHRBY3Rpb24sIHVpbnQgZGVmYXVsdFRpbWVvdXRMZW5ndGgsIHN0cmluZyBpbml0aWFsUGF5ZXJTdHJpbmcpOwogICAgCiAgICBmdW5jdGlvbiBuZXdCdXJuYWJsZU9wZW5QYXltZW50KGFkZHJlc3MgcGF5ZXIsIHVpbnQgY29tbWl0VGhyZXNob2xkLCBCdXJuYWJsZU9wZW5QYXltZW50LkRlZmF1bHRBY3Rpb24gZGVmYXVsdEFjdGlvbiwgdWludCBkZWZhdWx0VGltZW91dExlbmd0aCwgc3RyaW5nIGluaXRpYWxQYXllclN0cmluZykKICAgIHB1YmxpYwogICAgcGF5YWJsZQogICAgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIC8vcGFzcyBhbG9uZyBhbnkgZXRoZXIgdG8gdGhlIGNvbnN0cnVjdG9yCiAgICAgICAgYWRkcmVzcyBuZXdCT1BBZGRyID0gKG5ldyBCdXJuYWJsZU9wZW5QYXltZW50KS52YWx1ZShtc2cudmFsdWUpKHBheWVyLCBjb21taXRUaHJlc2hvbGQsIGRlZmF1bHRBY3Rpb24sIGRlZmF1bHRUaW1lb3V0TGVuZ3RoLCBpbml0aWFsUGF5ZXJTdHJpbmcpOwogICAgICAgIE5ld0JPUChuZXdCT1BBZGRyLCBwYXllciwgY29tbWl0VGhyZXNob2xkLCBkZWZhdWx0QWN0aW9uLCBkZWZhdWx0VGltZW91dExlbmd0aCwgaW5pdGlhbFBheWVyU3RyaW5nKTsKICAgICAgICByZXR1cm4gbmV3Qk9QQWRkcjsKICAgIH0KfQ=='.
	

]
