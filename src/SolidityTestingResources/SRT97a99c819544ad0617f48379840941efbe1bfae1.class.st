Class {
	#name : #SRT97a99c819544ad0617f48379840941efbe1bfae1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT97a99c819544ad0617f48379840941efbe1bfae1 >> base64 [
	^ ''.
	

]
