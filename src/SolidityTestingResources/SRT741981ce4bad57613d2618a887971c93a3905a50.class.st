Class {
	#name : #SRT741981ce4bad57613d2618a887971c93a3905a50,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT741981ce4bad57613d2618a887971c93a3905a50 >> base64 [
	^ ''.
	

]
