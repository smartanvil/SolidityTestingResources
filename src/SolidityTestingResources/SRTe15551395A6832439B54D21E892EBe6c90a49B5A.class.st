Class {
	#name : #SRTe15551395A6832439B54D21E892EBe6c90a49B5A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe15551395A6832439B54D21E892EBe6c90a49B5A >> base64 [
	^ 'Ly8gS2luZyBvZiB0aGUgRXRoZXIgVGhyb25lIENvbnRyYWN0cy4KLy8gQ29weXJpZ2h0IChjKSAyMDE2IEtpZXJhbiBFbGJ5LiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCi8vIFZlcnNpb24gMC45LjkuMiwgSnVseSAyMDE2LgovLwovLyBTZWUgYWxzbyBodHRwOi8vd3d3LmtpbmdvZnRoZWV0aGVyLmNvbSBhbmQKLy8gaHR0cHM6Ly9naXRodWIuY29tL2tpZXJhbmVsYnkvS2luZ09mVGhlRXRoZXJUaHJvbmUgLgovLyAKLy8gVGhpcyBmaWxlIGNvbnRhaW5zIGEgbnVtYmVyIG9mIGNvbnRyYWN0cywgb2Ygd2hpY2ggb25seQovLyB0aGVzZSB0aHJlZSBhcmUgbm9ybWFsbHkgY3JlYXRlZDoKLy8KLy8gLSBLaW5nZG9tICAgICAgICA9IG1haW50YWlucyB0aGUgdGhyb25lIGZvciBhIGtpbmdkb20KLy8gLSBXb3JsZCAgICAgICAgICA9IHJ1bnMgdGhlIHdvcmxkLCB3aGljaCBpcyBhIGNvbGxlY3Rpb24gb2Yga2luZ2RvbXMKLy8gLSBLaW5nZG9tRmFjdG9yeSA9IHVzZWQgaW50ZXJuYWxseSBieSB0aGUgV29ybGQgY29udHJhY3QKLy8KLy8gVGhlICJNaXhpbiIgY29udHJhY3RzIChUaHJvbmVSdWxlc01peGluLCBSZWVudHJ5UHJvdGVjdG9yTWl4aW4sCi8vIENhcmVmdWxTZW5kZXJNaXhpbiwgRnVuZHNIb2xkZXJNaXhpbiwgTW9uZXlSb3VuZGVyTWl4aW4sCi8vIE5hbWVhYmxlTWl4aW4pIGNvbnRhaW4gZnVuY3Rpb25zIC8gZGF0YSAvIHN0cnVjdHVyZXMgdXNlZAovLyBieSB0aGUgdGhyZWUgbWFpbiBjb250cmFjdHMuCi8vIFRoZSBFeHBvc2VkSW50ZXJuYWxzRm9yVGVzdGluZyBjb250cmFjdCBpcyB1c2VkIGJ5IGF1dG9tYXRlZCB0ZXN0cy4KCgovLy8gQHRpdGxlIE1peGluIHRvIGhlbHAgYXZvaWQgcmVjdXJzaXZlLWNhbGwgYXR0YWNrcy4KY29udHJhY3QgUmVlbnRyeVByb3RlY3Rvck1peGluIHsKCiAgICAvLyB0cnVlIGlmIHdlIGFyZSBpbnNpZGUgYW4gZXh0ZXJuYWwgZnVuY3Rpb24KICAgIGJvb2wgcmVlbnRyeVByb3RlY3RvcjsKCiAgICAvLyBNYXJrIGNvbnRyYWN0IGFzIGhhdmluZyBlbnRlcmVkIGFuIGV4dGVybmFsIGZ1bmN0aW9uLgogICAgLy8gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBjYWxsZWQgdHdpY2Ugd2l0aCBubyBleHRlcm5hbExlYXZlKCkuCiAgICAvLyBGb3IgdGhpcyB0byB3b3JrLCBDb250cmFjdHMgTVVTVDoKICAgIC8vICAtIGNhbGwgZXh0ZXJuYWxFbnRlcigpIGF0IHRoZSBzdGFydCBvZiBlYWNoIGV4dGVybmFsIGZ1bmN0aW9uCiAgICAvLyAgLSBjYWxsIGV4dGVybmFsTGVhdmUoKSBhdCB0aGUgZW5kIG9mIGVhY2ggZXh0ZXJuYWwgZnVuY3Rpb24KICAgIC8vICAtIG5ldmVyIHVzZSByZXR1cm4gc3RhdGVtZW50cyBpbiBiZXR3ZWVuIGVudGVyIGFuZCBsZWF2ZQogICAgLy8gIC0gbmV2ZXIgY2FsbCBhbiBleHRlcm5hbCBmdW5jdGlvbiBmcm9tIGFub3RoZXIgZnVuY3Rpb24KICAgIC8vIFdBUk46IHNlcmlvdXMgcmlzayBvZiBjb250cmFjdCBnZXR0aW5nIHN0dWNrIGlmIHVzZWQgd3JvbmdseS4KICAgIGZ1bmN0aW9uIGV4dGVybmFsRW50ZXIoKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHJlZW50cnlQcm90ZWN0b3IpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHJlZW50cnlQcm90ZWN0b3IgPSB0cnVlOwogICAgfQoKICAgIC8vIE1hcmsgY29udHJhY3QgYXMgaGF2aW5nIGxlZnQgYW4gZXh0ZXJuYWwgZnVuY3Rpb24uCiAgICAvLyBEbyB0aGlzIGFmdGVyIGVhY2ggY2FsbCB0byBleHRlcm5hbEVudGVyKCkuCiAgICBmdW5jdGlvbiBleHRlcm5hbExlYXZlKCkgaW50ZXJuYWwgewogICAgICAgIHJlZW50cnlQcm90ZWN0b3IgPSBmYWxzZTsKICAgIH0KCn0KCgovLy8gQHRpdGxlIE1peGluIHRvIGhlbHAgc2VuZCBldGhlciB0byB1bnRydXN0ZWQgYWRkcmVzc2VzLgpjb250cmFjdCBDYXJlZnVsU2VuZGVyTWl4aW4gewoKICAgIC8vIFNlZW1zIGEgcmVhc29uYWJsZSBhbW91bnQgZm9yIGEgd2VsbC13cml0dGVuIGZhbGxiYWNrIGZ1bmN0aW9uLgogICAgdWludCBjb25zdGFudCBzdWdnZXN0ZWRFeHRyYUdhc1RvSW5jbHVkZVdpdGhTZW5kcyA9IDIzMDAwOwoKICAgIC8vIFNlbmQgYF92YWx1ZVdlaWAgb2Ygb3VyIGV0aGVyIHRvIGBfdG9BZGRyZXNzYCwgaW5jbHVkaW5nCiAgICAvLyBgX2V4dHJhR2FzSW5jbHVkZWRgIGdhcyBhYm92ZSB0aGUgdXN1YWwgMjMwMCBnYXMgc3RpcGVuZAogICAgLy8gd2l0aCB0aGUgc2VuZCBjYWxsLgogICAgLy8KICAgIC8vIFRoaXMgbmVlZHMgY2FyZSBiZWNhdXNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIGlmIF90b0FkZHJlc3MKICAgIC8vIGlzIGV4dGVybmFsbHkgb3duZWQgb3IgaXMgYW5vdGhlciBjb250cmFjdCAtIGFuZCBzZW5kaW5nIGV0aGVyCiAgICAvLyB0byBhIGNvbnRyYWN0IGFkZHJlc3Mgd2lsbCBpbnZva2UgaXRzIGZhbGxiYWNrIGZ1bmN0aW9uOyB0aGlzCiAgICAvLyBoYXMgdGhyZWUgaW1wbGljYXRpb25zOgogICAgLy8KICAgIC8vIDEpIERhbmdlciBvZiByZWN1cnNpdmUgYXR0YWNrLgogICAgLy8gIFRoZSBkZXN0aW5hdGlvbiBjb250cmFjdCdzIGZhbGxiYWNrIGZ1bmN0aW9uIChvciBhbm90aGVyCiAgICAvLyAgY29udHJhY3QgaXQgY2FsbHMpIG1heSBjYWxsIGJhY2sgaW50byB0aGlzIGNvbnRyYWN0IChpbmNsdWRpbmcKICAgIC8vICBvdXIgZmFsbGJhY2sgZnVuY3Rpb24gYW5kIGV4dGVybmFsIGZ1bmN0aW9ucyBpbmhlcml0ZWQsIG9yIGludG8KICAgIC8vICBvdGhlciBjb250cmFjdHMgaW4gb3VyIHN0YWNrKSwgbGVhZGluZyB0byB1bmV4cGVjdGVkIGJlaGF2aW91ci4KICAgIC8vICBNaXRpZ2F0aW9uczoKICAgIC8vICAgLSBwcm90ZWN0IGFsbCBleHRlcm5hbCBmdW5jdGlvbnMgYWdhaW5zdCByZS1lbnRyeSBpbnRvCiAgICAvLyAgICAgYW55IG9mIHRoZW0gKHNlZSBSZWVudHJ5UHJvdGVjdG9yTWl4aW4pOwogICAgLy8gICAtIHByb2dyYW0gdmVyeSBkZWZlbnNpdmVseSAoZS5nLiBkZWJpdCBiYWxhbmNlIGJlZm9yZSBzZW5kKS4KICAgIC8vCiAgICAvLyAyKSBEZXN0aW5hdGlvbiBmYWxsYmFjayBmdW5jdGlvbiBjYW4gZmFpbC4KICAgIC8vICBJZiB0aGUgZGVzdGluYXRpb24gY29udHJhY3QncyBmYWxsYmFjayBmdW5jdGlvbiBmYWlscywgZXRoZXIKICAgIC8vICB3aWxsIG5vdCBiZSBzZW50IGFuZCBtYXkgYmUgbG9ja2VkIGludG8gdGhlIHNlbmRpbmcgY29udHJhY3QuCiAgICAvLyAgVW5saWtlIG1vc3QgZXJyb3JzLCBpdCB3aWxsIE5PVCBjYXVzZSB0aGlzIGNvbnRyYWN0IHRvIHRocm93LgogICAgLy8gIE1pdGlnYXRpb25zOgogICAgLy8gICAtIGNoZWNrIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGlzIGZ1bmN0aW9uIChzZWUgYmVsb3cpLgogICAgLy8KICAgIC8vIDMpIEdhcyB1c2FnZS4KICAgIC8vICBUaGUgZGVzdGluYXRpb24gZmFsbGJhY2sgZnVuY3Rpb24gd2lsbCBjb25zdW1lIHRoZSBnYXMgc3VwcGxpZWQKICAgIC8vICBpbiB0aGlzIHRyYW5zYWN0aW9uICh3aGljaCBpcyBmaXhlZCBhbmQgc2V0IGJ5IHRoZSB0cmFuc2FjdGlvbgogICAgLy8gIHN0YXJ0ZXIsIHRob3VnaCBzb21lIGNsaWVudHMgZG8gYSBnb29kIGpvYiBvZiBlc3RpbWF0aW5nIGl0LgogICAgLy8gIFRoaXMgaXMgYSBwcm9ibGVtIGZvciBsb3R0ZXJ5LXR5cGUgY29udHJhY3RzIHdoZXJlIG9uZSB2ZXJ5CiAgICAvLyAgZXhwZW5zaXZlLXRvLWNhbGwgcmVjZWl2aW5nIGNvbnRyYWN0IGNvdWxkICdwb2lzb24nIHRoZSBsb3R0ZXJ5CiAgICAvLyAgY29udHJhY3QgYnkgcHJldmVudGluZyBpdCBiZWluZyBpbnZva2VkIGJ5IGFub3RoZXIgcGVyc29uIHdobwogICAgLy8gIGNhbm5vdCBzdXBwbHkgZW5vdWdoIGdhcy4KICAgIC8vICBNaXRpZ2F0aW9uczoKICAgIC8vICAgIC0gY2hvb3NlIHNlbnNpYmxlIHZhbHVlIGZvciBfZXh0cmFHYXNJbmNsdWRlZCAoYnkgZGVmYXVsdAogICAgLy8gICAgICBvbmx5IDIzMDAgZ2FzIGlzIHN1cHBsaWVkIHRvIHRoZSBkZXN0aW5hdGlvbiBmdW5jdGlvbik7CiAgICAvLyAgICAtIGlmIGNhbGwgZmFpbHMgY29uc2lkZXIgd2hldGhlciB0byB0aHJvdyBvciB0byByaW5nLWZlbmNlCiAgICAvLyAgICAgIGZ1bmRzIGZvciBsYXRlciB3aXRoZHJhd2FsLgogICAgLy8KICAgIC8vIFJldHVybnM6CiAgICAvLwogICAgLy8gIFRydWUgaWYtYW5kLW9ubHktaWYgdGhlIHNlbmQgY2FsbCB3YXMgbWFkZSBhbmQgZGlkIG5vdCB0aHJvdwogICAgLy8gIGFuIGVycm9yLiBJbiB0aGlzIGNhc2UsIHdlIHdpbGwgbm8gbG9uZ2VyIG93biB0aGUgX3ZhbHVlV2VpCiAgICAvLyAgZXRoZXIuIE5vdGUgdGhhdCB3ZSBjYW5ub3QgZ2V0IHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhbGxiYWNrCiAgICAvLyAgZnVuY3Rpb24gY2FsbGVkIChpZiBhbnkpLgogICAgLy8KICAgIC8vICBGYWxzZSBpZiB0aGUgc2VuZCB3YXMgbWFkZSBidXQgdGhlIGRlc3RpbmF0aW9uIGZhbGxiYWNrIGZ1bmN0aW9uCiAgICAvLyAgdGhyZXcgYW4gZXJyb3IgKG9yIHJhbiBvdXQgb2YgZ2FzKS4gSWYgdGhpcyBoYXBlbnMsIHdlIHN0aWxsIG93bgogICAgLy8gIF92YWx1ZVdlaSBldGhlciBhbmQgdGhlIGRlc3RpbmF0aW9uJ3MgYWN0aW9ucyB3ZXJlIHVuZG9uZS4KICAgIC8vCiAgICAvLyAgVGhpcyBmdW5jdGlvbiBzaG91bGQgbm90IG5vcm1hbGx5IHRocm93IGFuIGVycm9yIHVubGVzczoKICAgIC8vICAgIC0gbm90IGVub3VnaCBnYXMgdG8gbWFrZSB0aGUgc2VuZC9jYWxsCiAgICAvLyAgICAtIG1heCBjYWxsIHN0YWNrIGRlcHRoIHJlYWNoZWQKICAgIC8vICAgIC0gaW5zdWZmaWNpZW50IGV0aGVyCiAgICAvLwogICAgZnVuY3Rpb24gY2FyZWZ1bFNlbmRXaXRoRml4ZWRHYXMoCiAgICAgICAgYWRkcmVzcyBfdG9BZGRyZXNzLAogICAgICAgIHVpbnQgX3ZhbHVlV2VpLAogICAgICAgIHVpbnQgX2V4dHJhR2FzSW5jbHVkZWQKICAgICkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmV0dXJuIF90b0FkZHJlc3MuY2FsbC52YWx1ZShfdmFsdWVXZWkpLmdhcyhfZXh0cmFHYXNJbmNsdWRlZCkoKTsKICAgIH0KCn0KCgovLy8gQHRpdGxlIE1peGluIHRvIGhlbHAgdHJhY2sgd2hvIG93bnMgb3VyIGV0aGVyIGFuZCBhbGxvdyB3aXRoZHJhd2Fscy4KY29udHJhY3QgRnVuZHNIb2xkZXJNaXhpbiBpcyBSZWVudHJ5UHJvdGVjdG9yTWl4aW4sIENhcmVmdWxTZW5kZXJNaXhpbiB7CgogICAgLy8gUmVjb3JkIGhlcmUgaG93IG11Y2ggd2VpIGlzIG93bmVkIGJ5IGFuIGFkZHJlc3MuCiAgICAvLyBPYnZpb3VzbHksIHRoZSBlbnRyaWVzIGhlcmUgTVVTVCBiZSBiYWNrZWQgYnkgYWN0dWFsIGV0aGVyCiAgICAvLyBvd25lZCBieSB0aGUgY29udHJhY3QgLSB3ZSBjYW5ub3QgZW5mb3JjZSB0aGF0IGluIHRoaXMgbWl4aW4uCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIGZ1bmRzOwoKICAgIGV2ZW50IEZ1bmRzV2l0aGRyYXduRXZlbnQoCiAgICAgICAgYWRkcmVzcyBmcm9tQWRkcmVzcywKICAgICAgICBhZGRyZXNzIHRvQWRkcmVzcywKICAgICAgICB1aW50IHZhbHVlV2VpCiAgICApOwoKICAgIC8vLyBAbm90aWNlIEFtb3VudCBvZiBldGhlciBoZWxkIGZvciBgX2FkZHJlc3NgLgogICAgZnVuY3Rpb24gZnVuZHNPZihhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zICh1aW50IHZhbHVlV2VpKSB7CiAgICAgICAgcmV0dXJuIGZ1bmRzW19hZGRyZXNzXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZW5kIHRoZSBjYWxsZXIgKGBtc2cuc2VuZGVyYCkgYWxsIGV0aGVyIHRoZXkgb3duLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kcygpIHsKICAgICAgICBleHRlcm5hbEVudGVyKCk7CiAgICAgICAgd2l0aGRyYXdGdW5kc1JQKCk7CiAgICAgICAgZXh0ZXJuYWxMZWF2ZSgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF92YWx1ZVdlaWAgb2YgdGhlIGV0aGVyIG93bmVkIGJ5IHRoZSBjYWxsZXIKICAgIC8vLyAoYG1zZy5zZW5kZXJgKSB0byBgX3RvQWRkcmVzc2AsIGluY2x1ZGluZyBgX2V4dHJhR2FzYCBnYXMKICAgIC8vLyBiZXlvbmQgdGhlIG5vcm1hbCBzdGlwZW5kLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kc0FkdmFuY2VkKAogICAgICAgIGFkZHJlc3MgX3RvQWRkcmVzcywKICAgICAgICB1aW50IF92YWx1ZVdlaSwKICAgICAgICB1aW50IF9leHRyYUdhcwogICAgKSB7CiAgICAgICAgZXh0ZXJuYWxFbnRlcigpOwogICAgICAgIHdpdGhkcmF3RnVuZHNBZHZhbmNlZFJQKF90b0FkZHJlc3MsIF92YWx1ZVdlaSwgX2V4dHJhR2FzKTsKICAgICAgICBleHRlcm5hbExlYXZlKCk7CiAgICB9CgogICAgLy8vIEBkZXYgaW50ZXJuYWwgdmVyc2lvbiBvZiB3aXRoZHJhd0Z1bmRzKCkKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RnVuZHNSUCgpIGludGVybmFsIHsKICAgICAgICBhZGRyZXNzIGZyb21BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICBhZGRyZXNzIHRvQWRkcmVzcyA9IGZyb21BZGRyZXNzOwogICAgICAgIHVpbnQgYWxsQXZhaWxhYmxlV2VpID0gZnVuZHNbZnJvbUFkZHJlc3NdOwogICAgICAgIHdpdGhkcmF3RnVuZHNBZHZhbmNlZFJQKAogICAgICAgICAgICB0b0FkZHJlc3MsCiAgICAgICAgICAgIGFsbEF2YWlsYWJsZVdlaSwKICAgICAgICAgICAgc3VnZ2VzdGVkRXh0cmFHYXNUb0luY2x1ZGVXaXRoU2VuZHMKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IGludGVybmFsIHZlcnNpb24gb2Ygd2l0aGRyYXdGdW5kc0FkdmFuY2VkKCksIGFsc28gdXNlZAogICAgLy8vIGJ5IHdpdGhkcmF3RnVuZHNSUCgpLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kc0FkdmFuY2VkUlAoCiAgICAgICAgYWRkcmVzcyBfdG9BZGRyZXNzLAogICAgICAgIHVpbnQgX3ZhbHVlV2VpLAogICAgICAgIHVpbnQgX2V4dHJhR2FzSW5jbHVkZWQKICAgICkgaW50ZXJuYWwgewogICAgICAgIGlmIChtc2cudmFsdWUgIT0gMCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgYWRkcmVzcyBmcm9tQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgaWYgKF92YWx1ZVdlaSA+IGZ1bmRzW2Zyb21BZGRyZXNzXSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgZnVuZHNbZnJvbUFkZHJlc3NdIC09IF92YWx1ZVdlaTsKICAgICAgICBib29sIHNlbnRPayA9IGNhcmVmdWxTZW5kV2l0aEZpeGVkR2FzKAogICAgICAgICAgICBfdG9BZGRyZXNzLAogICAgICAgICAgICBfdmFsdWVXZWksCiAgICAgICAgICAgIF9leHRyYUdhc0luY2x1ZGVkCiAgICAgICAgKTsKICAgICAgICBpZiAoIXNlbnRPaykgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgRnVuZHNXaXRoZHJhd25FdmVudChmcm9tQWRkcmVzcywgX3RvQWRkcmVzcywgX3ZhbHVlV2VpKTsKICAgIH0KCn0KCgovLy8gQHRpdGxlIE1peGluIHRvIGhlbHAgbWFrZSBuaWNlciBsb29raW5nIGV0aGVyIGFtb3VudHMuCmNvbnRyYWN0IE1vbmV5Um91bmRlck1peGluIHsKCiAgICAvLy8gQG5vdGljZSBNYWtlIGBfcmF3VmFsdWVXZWlgIGludG8gYSBuaWNlciwgcm91bmRlciBudW1iZXIuCiAgICAvLy8gQHJldHVybiBBIHZhbHVlIHRoYXQ6CiAgICAvLy8gICAtIGlzIG5vIGxhcmdlciB0aGFuIGBfcmF3VmFsdWVXZWlgCiAgICAvLy8gICAtIGlzIG5vIHNtYWxsZXIgdGhhbiBgX3Jhd1ZhbHVlV2VpYCAqIDAuOTk5CiAgICAvLy8gICAtIGhhcyBubyBtb3JlIHRoYW4gdGhyZWUgc2lnbmlmaWNhbnQgZmlndXJlcyBVTkxFU1MgdGhlCiAgICAvLy8gICAgIG51bWJlciBpcyB2ZXJ5IHNtYWxsIG9yIHZlcnkgbGFyZ2UgaW4gbW9uZXRhcnkgdGVybXMKICAgIC8vLyAgICAgKHdoaWNoIHdlIGRlZmluZSBhcyA8IDEgZmlubmV5IG9yID4gMTAwMDAgZXRoZXIpLCBpbgogICAgLy8vICAgICB3aGljaCBjYXNlIG5vIHByZWNpc2lvbiB3aWxsIGJlIGxvc3QuCiAgICBmdW5jdGlvbiByb3VuZE1vbmV5RG93bk5pY2VseSh1aW50IF9yYXdWYWx1ZVdlaSkgY29uc3RhbnQgaW50ZXJuYWwKICAgIHJldHVybnMgKHVpbnQgbmljZXJWYWx1ZVdlaSkgewogICAgICAgIGlmIChfcmF3VmFsdWVXZWkgPCAxIGZpbm5leSkgewogICAgICAgICAgICByZXR1cm4gX3Jhd1ZhbHVlV2VpOwogICAgICAgIH0gZWxzZSBpZiAoX3Jhd1ZhbHVlV2VpIDwgMTAgZmlubmV5KSB7CiAgICAgICAgICAgIHJldHVybiAxMCBzemFibyAqIChfcmF3VmFsdWVXZWkgLyAxMCBzemFibyk7CiAgICAgICAgfSBlbHNlIGlmIChfcmF3VmFsdWVXZWkgPCAxMDAgZmlubmV5KSB7CiAgICAgICAgICAgIHJldHVybiAxMDAgc3phYm8gKiAoX3Jhd1ZhbHVlV2VpIC8gMTAwIHN6YWJvKTsKICAgICAgICB9IGVsc2UgaWYgKF9yYXdWYWx1ZVdlaSA8IDEgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuIDEgZmlubmV5ICogKF9yYXdWYWx1ZVdlaSAvIDEgZmlubmV5KTsKICAgICAgICB9IGVsc2UgaWYgKF9yYXdWYWx1ZVdlaSA8IDEwIGV0aGVyKSB7CiAgICAgICAgICAgIHJldHVybiAxMCBmaW5uZXkgKiAoX3Jhd1ZhbHVlV2VpIC8gMTAgZmlubmV5KTsKICAgICAgICB9IGVsc2UgaWYgKF9yYXdWYWx1ZVdlaSA8IDEwMCBldGhlcikgewogICAgICAgICAgICByZXR1cm4gMTAwIGZpbm5leSAqIChfcmF3VmFsdWVXZWkgLyAxMDAgZmlubmV5KTsKICAgICAgICB9IGVsc2UgaWYgKF9yYXdWYWx1ZVdlaSA8IDEwMDAgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuIDEgZXRoZXIgKiAoX3Jhd1ZhbHVlV2VpIC8gMSBldGhlcik7CiAgICAgICAgfSBlbHNlIGlmIChfcmF3VmFsdWVXZWkgPCAxMDAwMCBldGhlcikgewogICAgICAgICAgICByZXR1cm4gMTAgZXRoZXIgKiAoX3Jhd1ZhbHVlV2VpIC8gMTAgZXRoZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBfcmF3VmFsdWVXZWk7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBDb252ZXJ0IGBfdmFsdWVXZWlgIGludG8gYSB3aG9sZSBudW1iZXIgb2YgZmlubmV5LgogICAgLy8vIEByZXR1cm4gVGhlIHNtYWxsZXN0IHdob2xlIG51bWJlciBvZiBmaW5uZXkgd2hpY2ggaXMgZXF1YWwKICAgIC8vLyB0byBvciBncmVhdGVyIHRoYW4gYF92YWx1ZVdlaWAgd2hlbiBjb252ZXJ0ZWQgdG8gd2VpLgogICAgLy8vIFdBUk46IE1heSBiZSBpbmNvcnJlY3QgaWYgYF92YWx1ZVdlaWAgaXMgYWJvdmUgMioqMjU0LgogICAgZnVuY3Rpb24gcm91bmRNb25leVVwVG9XaG9sZUZpbm5leSh1aW50IF92YWx1ZVdlaSkgY29uc3RhbnQgaW50ZXJuYWwKICAgIHJldHVybnMgKHVpbnQgdmFsdWVGaW5uZXkpIHsKICAgICAgICByZXR1cm4gKDEgZmlubmV5ICsgX3ZhbHVlV2VpIC0gMSB3ZWkpIC8gMSBmaW5uZXk7CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBNaXhpbiB0byBoZWxwIGFsbG93IHVzZXJzIHRvIG5hbWUgdGhpbmdzLgpjb250cmFjdCBOYW1lYWJsZU1peGluIHsKCiAgICAvLyBTdHJpbmcgbWFuaXB1bGF0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0aGUgRVZNOyBrZWVwIHRoaW5ncyBzaG9ydC4KCiAgICB1aW50IGNvbnN0YW50IG1pbmltdW1OYW1lTGVuZ3RoID0gMTsKICAgIHVpbnQgY29uc3RhbnQgbWF4aW11bU5hbWVMZW5ndGggPSAyNTsKICAgIHN0cmluZyBjb25zdGFudCBuYW1lRGF0YVByZWZpeCA9ICJOQU1FOiI7CgogICAgLy8vIEBub3RpY2UgQ2hlY2sgaWYgYF9uYW1lYCBpcyBhIHJlYXNvbmFibGUgY2hvaWNlIG9mIG5hbWUuCiAgICAvLy8gQHJldHVybiBUcnVlIGlmLWFuZC1vbmx5LWlmIGBfbmFtZV9gIG1lZXRzIHRoZSBjcml0ZXJpYQogICAgLy8vIGJlbG93LCBvciBmYWxzZSBvdGhlcndpc2U6CiAgICAvLy8gICAtIG5vIGZld2VyIHRoYW4gMSBjaGFyYWN0ZXIKICAgIC8vLyAgIC0gbm8gbW9yZSB0aGFuIDI1IGNoYXJhY3RlcnMKICAgIC8vLyAgIC0gbm8gY2hhcmFjdGVycyBvdGhlciB0aGFuOgogICAgLy8vICAgICAtICJyb21hbiIgYWxwaGFiZXQgbGV0dGVycyAoQS1aIGFuZCBhLXopCiAgICAvLy8gICAgIC0gd2VzdGVybiBkaWdpdHMgKDAtOSkKICAgIC8vLyAgICAgLSAic2FmZSIgcHVuY3R1YXRpb246ICEgKCApIC0gLiBfIFNQQUNFCiAgICAvLy8gICAtIGF0IGxlYXN0IG9uZSBub24tcHVuY3R1YXRpb24gY2hhcmFjdGVyCiAgICAvLy8gTm90ZSB0aGF0IHdlIGRlbGliZXJhdGVseSBleGNsdWRlIGNoYXJhY3RlcnMgd2hpY2ggbWF5IGNhdXNlCiAgICAvLy8gc2VjdXJpdHkgcHJvYmxlbXMgZm9yIHdlYnNpdGVzIGFuZCBkYXRhYmFzZXMgaWYgZXNjYXBpbmcgaXMKICAgIC8vLyBub3QgcGVyZm9ybWVkIGNvcnJlY3RseSwgc3VjaCBhcyA8ID4gIiBhbmQgJy4KICAgIC8vLyBBcG9sb2dpZXMgZm9yIHRoZSBsYWNrIG9mIG5vbi1FbmdsaXNoIGxhbmd1YWdlIHN1cHBvcnQuCiAgICBmdW5jdGlvbiB2YWxpZGF0ZU5hbWVJbnRlcm5hbChzdHJpbmcgX25hbWUpIGNvbnN0YW50IGludGVybmFsCiAgICByZXR1cm5zIChib29sIGFsbG93ZWQpIHsKICAgICAgICBieXRlcyBtZW1vcnkgbmFtZUJ5dGVzID0gYnl0ZXMoX25hbWUpOwogICAgICAgIHVpbnQgbGVuZ3RoQnl0ZXMgPSBuYW1lQnl0ZXMubGVuZ3RoOwogICAgICAgIGlmIChsZW5ndGhCeXRlcyA8IG1pbmltdW1OYW1lTGVuZ3RoIHx8CiAgICAgICAgICAgIGxlbmd0aEJ5dGVzID4gbWF4aW11bU5hbWVMZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBib29sIGZvdW5kTm9uUHVuY3R1YXRpb24gPSBmYWxzZTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBsZW5ndGhCeXRlczsgaSsrKSB7CiAgICAgICAgICAgIGJ5dGUgYiA9IG5hbWVCeXRlc1tpXTsKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgKGIgPj0gNDggJiYgYiA8PSA1NykgfHwgLy8gMCAtIDkKICAgICAgICAgICAgICAgIChiID49IDY1ICYmIGIgPD0gOTApIHx8IC8vIEEgLSBaCiAgICAgICAgICAgICAgICAoYiA+PSA5NyAmJiBiIDw9IDEyMikgICAvLyBhIC0gegogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIGZvdW5kTm9uUHVuY3R1YXRpb24gPSB0cnVlOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgYiA9PSAzMiB8fCAvLyBzcGFjZQogICAgICAgICAgICAgICAgYiA9PSAzMyB8fCAvLyAhCiAgICAgICAgICAgICAgICBiID09IDQwIHx8IC8vICgKICAgICAgICAgICAgICAgIGIgPT0gNDEgfHwgLy8gKQogICAgICAgICAgICAgICAgYiA9PSA0NSB8fCAvLyAtCiAgICAgICAgICAgICAgICBiID09IDQ2IHx8IC8vIC4KICAgICAgICAgICAgICAgIGIgPT0gOTUgICAgLy8gXwogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZvdW5kTm9uUHVuY3R1YXRpb247CiAgICB9CgogICAgLy8gRXh0cmFjdCBhIG5hbWUgZnJvbSBieXRlcyBgX2RhdGFgIChwcmVzdW1hYmx5IGZyb20gYG1zZy5kYXRhYCksCiAgICAvLyBvciB0aHJvdyBhbiBleGNlcHRpb24gaWYgdGhlIGRhdGEgaXMgbm90IGluIHRoZSBleHBlY3RlZCBmb3JtYXQuCiAgICAvLyAKICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBpdCBlYXN5IGZvciBwZW9wbGUgdG8gbmFtZSB0aGluZ3MsIGV2ZW4gaWYKICAgIC8vIHRoZXkncmUgbm90IGNvbWZvcnRhYmxlIGNhbGxpbmcgZnVuY3Rpb25zIG9uIGNvbnRyYWN0cy4KICAgIC8vCiAgICAvLyBTbyB3ZSBhbGxvdyBuYW1lcyB0byBiZSBzZW50IHRvIHRoZSBmYWxsYmFjayBmdW5jdGlvbiBlbmNvZGVkCiAgICAvLyBhcyBtZXNzYWdlIGRhdGEuCiAgICAvLwogICAgLy8gVW5mb3J0dW5hdGVseSwgdGhlIHdheSB0aGUgRXRoZXJldW0gRnVuY3Rpb24gQUJJIHdvcmtzIG1lYW5zIHdlCiAgICAvLyBtdXN0IGJlIGNhcmVmdWwgdG8gYXZvaWQgY2xhc2hlcyBiZXR3ZWVuIG1lc3NhZ2UgZGF0YSB0aGF0CiAgICAvLyByZXByZXNlbnRzIG91ciBuYW1lcyBhbmQgbWVzc2FnZSBkYXRhIHRoYXQgcmVwcmVzZW50cyBhIGNhbGwKICAgIC8vIHRvIGFuIGV4dGVybmFsIGZ1bmN0aW9uIC0gb3RoZXJ3aXNlOgogICAgLy8gICBhKSBzb21lIG5hbWVzIHdvbid0IGJlIHVzYWJsZTsKICAgIC8vICAgYikgc21hbGwgcG9zc2liaWxpdHkgb2YgYSBwaGlzaGluZyBhdHRhY2sgd2hlcmUgdXNlcnMgYXJlCiAgICAvLyAgICAgdHJpY2tlZCBpbnRvIHVzaW5nIGNlcnRhaW4gbmFtZXMgd2hpY2ggY2F1c2UgYW4gZXh0ZXJuYWwKICAgIC8vICAgICBmdW5jdGlvbiBjYWxsIC0gZS5nLiBpZiB0aGUgZGF0YSBzZW50IHRvIHRoZSBjb250cmFjdCBpcwogICAgLy8gICAgIGtlY2NhazI1Nigid2l0aGRyYXdGdW5kcygpIikgdGhlbiBhIHdpdGhkcmF3YWwgd2lsbCBvY2N1ci4KICAgIC8vCiAgICAvLyBTbyB3ZSByZXF1aXJlIGEgcHJlZml4ICJOQU1FOiIgYXQgdGhlIHN0YXJ0IG9mIHRoZSBuYW1lIChlbmNvZGVkCiAgICAvLyBpbiBBU0NJSSkgd2hlbiBzZW50IHZpYSB0aGUgZmFsbGJhY2sgZnVuY3Rpb24gLSB0aGlzIHByZWZpeAogICAgLy8gZG9lc24ndCBjbGFzaCB3aXRoIGFueSBleHRlcm5hbCBmdW5jdGlvbiBzaWduYXR1cmUgaGFzaGVzLgogICAgLy8KICAgIC8vIGUuZy4gd2ViMy5mcm9tQXNjaWkoJ05BTUU6JyArICdKb2UgQmxvZ2dzJykKICAgIC8vCiAgICAvLyBXQVJOOiB0aGlzIGRvZXMgbm90IGNoZWNrIHRoZSBuYW1lIGZvciAicmVhc29uYWJsZW5lc3MiOwogICAgLy8gdXNlIHZhbGlkYXRlTmFtZUludGVybmFsKCkgZm9yIHRoYXQuCiAgICAvLwogICAgZnVuY3Rpb24gZXh0cmFjdE5hbWVGcm9tRGF0YShieXRlcyBfZGF0YSkgY29uc3RhbnQgaW50ZXJuYWwKICAgIHJldHVybnMgKHN0cmluZyBleHRyYWN0ZWROYW1lKSB7CiAgICAgICAgLy8gY2hlY2sgcHJlZml4IHByZXNlbnQKICAgICAgICB1aW50IGV4cGVjdGVkUHJlZml4TGVuZ3RoID0gKGJ5dGVzKG5hbWVEYXRhUHJlZml4KSkubGVuZ3RoOwogICAgICAgIGlmIChfZGF0YS5sZW5ndGggPCBleHBlY3RlZFByZWZpeExlbmd0aCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgdWludCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RlZFByZWZpeExlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICgoYnl0ZXMobmFtZURhdGFQcmVmaXgpKVtpXSAhPSBfZGF0YVtpXSkgewogICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gY29weSBkYXRhIGFmdGVyIHByZWZpeAogICAgICAgIHVpbnQgcGF5bG9hZExlbmd0aCA9IF9kYXRhLmxlbmd0aCAtIGV4cGVjdGVkUHJlZml4TGVuZ3RoOwogICAgICAgIGlmIChwYXlsb2FkTGVuZ3RoIDwgbWluaW11bU5hbWVMZW5ndGggfHwKICAgICAgICAgICAgcGF5bG9hZExlbmd0aCA+IG1heGltdW1OYW1lTGVuZ3RoKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBzdHJpbmcgbWVtb3J5IG5hbWUgPSBuZXcgc3RyaW5nKHBheWxvYWRMZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXlsb2FkTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgKGJ5dGVzKG5hbWUpKVtpXSA9IF9kYXRhW2V4cGVjdGVkUHJlZml4TGVuZ3RoICsgaV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBuYW1lOwogICAgfQoKICAgIC8vIFR1cm4gYSBzaG9ydCBuYW1lIGludG8gYSAiZnV6enkgaGFzaCIgd2l0aCB0aGUgcHJvcGVydHkKICAgIC8vIHRoYXQgZXh0cmVtZWx5IHNpbWlsYXIgbmFtZXMgd2lsbCBoYXZlIHRoZSBzYW1lIGZ1enp5IGhhc2guCiAgICAvLwogICAgLy8gVGhpcyBpcyB1c2VmdWwgdG86CiAgICAvLyAgLSBzdG9wIHBlb3BsZSBjaG9vc2luZyBuYW1lcyB3aGljaCBkaWZmZXIgb25seSBpbiBjYXNlIG9yCiAgICAvLyAgICBwdW5jdHVhdGlvbiBhbmQgd291bGQgbGVhZCB0byBjb25mdXNpb24uCiAgICAvLyAgLSBmYWNpbGlhdGUgc2VhcmNoaW5nIGJ5IG5hbWUgd2l0aG91dCBuZWVkaW5nIGV4YWN0IG1hdGNoCiAgICAvLwogICAgLy8gRm9yIGV4YW1wbGUsIHRoZXNlIG5hbWVzIGFsbCBoYXZlIHRoZSBzYW1lIGZ1enp5IGhhc2g6CiAgICAvLwogICAgLy8gICJCYW5hbmEiCiAgICAvLyAgIkJBTkFOQSIKICAgIC8vICAiQmEtbmEtbmEiCiAgICAvLyAgIiAgYmFuYW5hICAiCiAgICAvLyAgIkJhbmFuYSAgICAgICAgICAgICAgICAgICAgICAgIC4uIHNvIGxvbmcgdGhlIGVuZCBpcyBpZ25vcmVkIgogICAgLy8KICAgIC8vIE9uIHRoZSBvdGhlciBoYW5kLCAiQmFuYW5hMSIgYW5kICJBIEJhbmFuYSIgYXJlIGRpZmZlcmVudCB0bwogICAgLy8gdGhlIGFib3ZlLgogICAgLy8KICAgIC8vIFdBUk46IHRoaXMgaXMgbGlrZWx5IHRvIHdvcmsgcG9vcmx5IG9uIG5hbWVzIHRoYXQgZG8gbm90IG1lZXQKICAgIC8vIHRoZSB2YWxpZGF0ZU5hbWVJbnRlcm5hbCgpIHRlc3QuCiAgICAvLwogICAgZnVuY3Rpb24gY29tcHV0ZU5hbWVGdXp6eUhhc2goc3RyaW5nIF9uYW1lKSBjb25zdGFudCBpbnRlcm5hbAogICAgcmV0dXJucyAodWludCBmdXp6eUhhc2gpIHsKICAgICAgICBieXRlcyBtZW1vcnkgbmFtZUJ5dGVzID0gYnl0ZXMoX25hbWUpOwogICAgICAgIHVpbnQgaCA9IDA7CiAgICAgICAgdWludCBsZW4gPSBuYW1lQnl0ZXMubGVuZ3RoOwogICAgICAgIGlmIChsZW4gPiBtYXhpbXVtTmFtZUxlbmd0aCkgewogICAgICAgICAgICBsZW4gPSBtYXhpbXVtTmFtZUxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdWludCBtdWwgPSAxMjg7CiAgICAgICAgICAgIGJ5dGUgYiA9IG5hbWVCeXRlc1tpXTsKICAgICAgICAgICAgdWludCB1YiA9IHVpbnQoYik7CiAgICAgICAgICAgIGlmIChiID49IDQ4ICYmIGIgPD0gNTcpIHsKICAgICAgICAgICAgICAgIC8vIDAtOQogICAgICAgICAgICAgICAgaCA9IGggKiBtdWwgKyB1YjsKICAgICAgICAgICAgfSBlbHNlIGlmIChiID49IDY1ICYmIGIgPD0gOTApIHsKICAgICAgICAgICAgICAgIC8vIEEtWgogICAgICAgICAgICAgICAgaCA9IGggKiBtdWwgKyB1YjsKICAgICAgICAgICAgfSBlbHNlIGlmIChiID49IDk3ICYmIGIgPD0gMTIyKSB7CiAgICAgICAgICAgICAgICAvLyBmb2xkIGEteiB0byBBLVoKICAgICAgICAgICAgICAgIHVpbnQgdXBwZXIgPSB1YiAtIDMyOwogICAgICAgICAgICAgICAgaCA9IGggKiBtdWwgKyB1cHBlcjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBvdGhlcnMKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaDsKICAgIH0KCn0KCgovLy8gQHRpdGxlIE1peGluIHRvIGhlbHAgZGVmaW5lIHRoZSBydWxlcyBvZiBhIHRocm9uZS4KY29udHJhY3QgVGhyb25lUnVsZXNNaXhpbiB7CgogICAgLy8gU2VlIFdvcmxkLmNyZWF0ZUtpbmdkb20oLi4pIGZvciBkb2N1bWVudGF0aW9uLgogICAgc3RydWN0IFRocm9uZVJ1bGVzIHsKICAgICAgICB1aW50IHN0YXJ0aW5nQ2xhaW1QcmljZVdlaTsKICAgICAgICB1aW50IG1heGltdW1DbGFpbVByaWNlV2VpOwogICAgICAgIHVpbnQgY2xhaW1QcmljZUFkanVzdFBlcmNlbnQ7CiAgICAgICAgdWludCBjdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHM7CiAgICAgICAgdWludCBjb21taXNzaW9uUGVyVGhvdXNhbmQ7CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBNYWludGFpbnMgdGhlIHRocm9uZSBvZiBhIGtpbmdkb20uCmNvbnRyYWN0IEtpbmdkb20gaXMKICBSZWVudHJ5UHJvdGVjdG9yTWl4aW4sCiAgQ2FyZWZ1bFNlbmRlck1peGluLAogIEZ1bmRzSG9sZGVyTWl4aW4sCiAgTW9uZXlSb3VuZGVyTWl4aW4sCiAgTmFtZWFibGVNaXhpbiwKICBUaHJvbmVSdWxlc01peGluIHsKCiAgICAvLyBlLmcuICJLaW5nIG9mIHRoZSBFdGhlciIKICAgIHN0cmluZyBwdWJsaWMga2luZ2RvbU5hbWU7CgogICAgLy8gVGhlIFdvcmxkIGNvbnRyYWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMga2luZ2RvbSwgb3IgMHgwIGlmIG5vbmUuCiAgICBhZGRyZXNzIHB1YmxpYyB3b3JsZDsKCiAgICAvLyBUaGUgcnVsZXMgdGhhdCBnb3Zlcm4gdGhpcyBraW5nZG9tIC0gc2VlIFRocm9uZVJ1bGVzTWl4aW4uCiAgICBUaHJvbmVSdWxlcyBwdWJsaWMgcnVsZXM7CgogICAgLy8gU29tZW9uZSB3aG8gaGFzIHJ1bGVkIChvciBpcyBydWxpbmcpIG91ciBraW5nZG9tLgogICAgc3RydWN0IE1vbmFyY2ggewogICAgICAgIC8vIHdoZXJlIHRvIHNlbmQgdGhlaXIgY29tcGVuc2F0aW9uCiAgICAgICAgYWRkcmVzcyBjb21wZW5zYXRpb25BZGRyZXNzOwogICAgICAgIC8vIHRoZWlyIG5hbWUKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICAvLyB3aGVuIHRoZXkgYmVjYW1lIG91ciBydWxlcgogICAgICAgIHVpbnQgY29yb25hdGlvblRpbWVzdGFtcDsKICAgICAgICAvLyB0aGUgY2xhaW0gcHJpY2UgcGFpZCAoZXhjbHVkaW5nIGFueSBvdmVyLXBheW1lbnQpCiAgICAgICAgdWludCBjbGFpbVByaWNlV2VpOwogICAgICAgIC8vIHRoZSBjb21wZW5zYXRpb24gc2VudCB0byBvciBoZWxkIGZvciB0aGVtIHNvIGZhcgogICAgICAgIHVpbnQgY29tcGVuc2F0aW9uV2VpOwogICAgfQoKICAgIC8vIFRoZSBmaXJzdCBydWxlciBpcyBudW1iZXIgMTsgdGhlIHplcm8tdGggZW50cnkgaXMgYSBkdW1teSBlbnRyeS4KICAgIE1vbmFyY2hbXSBwdWJsaWMgbW9uYXJjaHNCeU51bWJlcjsKCiAgICAvLyBUaGUgdG9wV2l6YXJkIGVhcm5zIGhhbGYgdGhlIGNvbW1pc3Npb24uCiAgICAvLyBUaGV5IGFyZSBub3JtYWxseSB0aGUgb3duZXIgb2YgdGhlIFdvcmxkIGNvbnRyYWN0LgogICAgYWRkcmVzcyBwdWJsaWMgdG9wV2l6YXJkOwoKICAgIC8vIFRoZSBzdWJXaXphcmQgZWFybnMgaGFsZiB0aGUgY29tbWlzc2lvbi4KICAgIC8vIFRoZXkgYXJlIG5vcm1hbGx5IHRoZSBjcmVhdG9yIG9mIHRoaXMgS2luZ2RvbS4KICAgIC8vIFRoZSB0b3BXaXphcmQgYW5kIHN1YldpemFyZCBjYW4gYmUgdGhlIHNhbWUgYWRkcmVzcy4KICAgIGFkZHJlc3MgcHVibGljIHN1YldpemFyZDsKCiAgICAvLyBOQjogd2UgYWxzbyBoYXZlIGEgYGZ1bmRzYCBtYXBwaW5nIGZyb20gRnVuZHNIb2xkZXJNaXhpbiwKICAgIC8vIGFuZCBhIHJlbnRyeVByb3RlY3RvciBmcm9tIFJlZW50cnlQcm90ZWN0b3JNaXhpbi4KCiAgICBldmVudCBUaHJvbmVDbGFpbWVkRXZlbnQodWludCBtb25hcmNoTnVtYmVyKTsKICAgIGV2ZW50IENvbXBlbnNhdGlvblNlbnRFdmVudChhZGRyZXNzIHRvQWRkcmVzcywgdWludCB2YWx1ZVdlaSk7CiAgICBldmVudCBDb21wZW5zYXRpb25GYWlsRXZlbnQoYWRkcmVzcyB0b0FkZHJlc3MsIHVpbnQgdmFsdWVXZWkpOwogICAgZXZlbnQgQ29tbWlzc2lvbkVhcm5lZEV2ZW50KGFkZHJlc3MgYnlBZGRyZXNzLCB1aW50IHZhbHVlV2VpKTsKICAgIGV2ZW50IFdpemFyZFJlcGxhY2VkRXZlbnQoYWRkcmVzcyBvbGRXaXphcmQsIGFkZHJlc3MgbmV3V2l6YXJkKTsKICAgIC8vIE5COiB3ZSBhbHNvIGhhdmUgYSBgRnVuZHNXaXRoZHJhd25FdmVudGAgZnJvbSBGdW5kc0hvbGRlck1peGluCgogICAgLy8gV0FSTiAtIGRvZXMgTk9UIHZhbGlkYXRlIGFyZ3VtZW50czsgeW91IE1VU1QgZWl0aGVyIGNhbGwKICAgIC8vIEtpbmdkb21GYWN0b3J5LnZhbGlkYXRlUHJvcG9zZWRUaHJvbmVSdWxlcygpIG9yIGNyZWF0ZQogICAgLy8gdGhlIEtpbmdkb20gdmlhIEtpbmdkb21GYWN0b3J5L1dvcmxkJ3MgY3JlYXRlS2luZ2RvbSgpLgogICAgLy8gU2VlIFdvcmxkLmNyZWF0ZUtpbmdkb20oLi4pIGZvciBwYXJhbWV0ZXIgZG9jdW1lbnRhdGlvbi4KICAgIGZ1bmN0aW9uIEtpbmdkb20oCiAgICAgICAgc3RyaW5nIF9raW5nZG9tTmFtZSwKICAgICAgICBhZGRyZXNzIF93b3JsZCwKICAgICAgICBhZGRyZXNzIF90b3BXaXphcmQsCiAgICAgICAgYWRkcmVzcyBfc3ViV2l6YXJkLAogICAgICAgIHVpbnQgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9tYXhpbXVtQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCwKICAgICAgICB1aW50IF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgdWludCBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICApIHsKICAgICAgICBraW5nZG9tTmFtZSA9IF9raW5nZG9tTmFtZTsKICAgICAgICB3b3JsZCA9IF93b3JsZDsKICAgICAgICB0b3BXaXphcmQgPSBfdG9wV2l6YXJkOwogICAgICAgIHN1YldpemFyZCA9IF9zdWJXaXphcmQ7CiAgICAgICAgcnVsZXMgPSBUaHJvbmVSdWxlcygKICAgICAgICAgICAgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICAgICAgX21heGltdW1DbGFpbVByaWNlV2VpLAogICAgICAgICAgICBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQsCiAgICAgICAgICAgIF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgICAgIF9jb21taXNzaW9uUGVyVGhvdXNhbmQKICAgICAgICApOwogICAgICAgIC8vIFdlIG51bWJlciB0aGUgbW9uYXJjaHMgc3RhcnRpbmcgZnJvbSAxOyBpdCdzIHNvbWV0aW1lcyB1c2VmdWwKICAgICAgICAvLyB0byB1c2UgemVybyA9IGludmFsaWQsIHNvIHB1dCBpbiBhIGR1bW15IGVudHJ5IGZvciBudW1iZXIgMC4KICAgICAgICBtb25hcmNoc0J5TnVtYmVyLnB1c2goCiAgICAgICAgICAgIE1vbmFyY2goCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgIiIsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgKQogICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gbnVtYmVyT2ZNb25hcmNocygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG90YWxDb3VudCkgewogICAgICAgIC8vIHplcm8tdGggZW50cnkgaXMgaW52YWxpZAogICAgICAgIHJldHVybiBtb25hcmNoc0J5TnVtYmVyLmxlbmd0aCAtIDE7CiAgICB9CgogICAgLy8gRmFsc2UgaWYgZWl0aGVyIHRoZXJlIGFyZSBubyBtb25hcmNocywgb3IgaWYgdGhlIGxhdGVzdCBtb25hcmNoCiAgICAvLyBoYXMgcmVpZ25lZCB0b28gbG9uZyBhbmQgYmVlbiBzdHJ1Y2sgZG93biBieSB0aGUgY3Vyc2UuCiAgICBmdW5jdGlvbiBpc0xpdmluZ01vbmFyY2goKSBjb25zdGFudCByZXR1cm5zIChib29sIGFsaXZlKSB7CiAgICAgICAgaWYgKG51bWJlck9mTW9uYXJjaHMoKSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdWludCByZWlnblN0YXJ0ZWRUaW1lc3RhbXAgPSBsYXRlc3RNb25hcmNoSW50ZXJuYWwoKS5jb3JvbmF0aW9uVGltZXN0YW1wOwogICAgICAgIGlmIChub3cgPCByZWlnblN0YXJ0ZWRUaW1lc3RhbXApIHsKICAgICAgICAgICAgLy8gU2hvdWxkIG5vdCBiZSBwb3NzaWJsZSwgdGhpbmsgbWluZXJzIHJlamVjdCBibG9ja3Mgd2l0aAogICAgICAgICAgICAvLyB0aW1lc3RhbXBzIHRoYXQgZ28gYmFja3dhcmRzPyBCdXQgc29tZSBkcmlmdCBwb3NzaWJsZSBhbmQKICAgICAgICAgICAgLy8gaXQgbmVlZHMgaGFuZGxpbmcgZm9yIHVuc2lnbmVkIG92ZXJmbG93IGF1ZGl0IGNoZWNrcyAuLi4KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHVpbnQgZWxhcHNlZFJlaWduRHVyYXRpb25TZWNvbmRzID0gbm93IC0gcmVpZ25TdGFydGVkVGltZXN0YW1wOwogICAgICAgIGlmIChlbGFwc2VkUmVpZ25EdXJhdGlvblNlY29uZHMgPiBydWxlcy5jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBIb3cgbXVjaCB5b3UgbXVzdCBwYXkgdG8gY2xhaW0gdGhlIHRocm9uZSBub3csIGluIHdlaS4KICAgIGZ1bmN0aW9uIGN1cnJlbnRDbGFpbVByaWNlV2VpKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBwcmljZUluV2VpKSB7CiAgICAgICAgaWYgKCFpc0xpdmluZ01vbmFyY2goKSkgewogICAgICAgICAgICByZXR1cm4gcnVsZXMuc3RhcnRpbmdDbGFpbVByaWNlV2VpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQgbGFzdENsYWltUHJpY2VXZWkgPSBsYXRlc3RNb25hcmNoSW50ZXJuYWwoKS5jbGFpbVByaWNlV2VpOwogICAgICAgICAgICAvLyBubyBkYW5nZXIgb2Ygb3ZlcmZsb3cgYmVjYXVzZSBjbGFpbSBwcmljZSBuZXZlciBnZXRzIHRoYXQgaGlnaAogICAgICAgICAgICB1aW50IG5ld0NsYWltUHJpY2UgPQogICAgICAgICAgICAgIChsYXN0Q2xhaW1QcmljZVdlaSAqICgxMDAgKyBydWxlcy5jbGFpbVByaWNlQWRqdXN0UGVyY2VudCkpIC8gMTAwOwogICAgICAgICAgICBuZXdDbGFpbVByaWNlID0gcm91bmRNb25leURvd25OaWNlbHkobmV3Q2xhaW1QcmljZSk7CiAgICAgICAgICAgIGlmIChuZXdDbGFpbVByaWNlIDwgcnVsZXMuc3RhcnRpbmdDbGFpbVByaWNlV2VpKSB7CiAgICAgICAgICAgICAgICBuZXdDbGFpbVByaWNlID0gcnVsZXMuc3RhcnRpbmdDbGFpbVByaWNlV2VpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChuZXdDbGFpbVByaWNlID4gcnVsZXMubWF4aW11bUNsYWltUHJpY2VXZWkpIHsKICAgICAgICAgICAgICAgIG5ld0NsYWltUHJpY2UgPSBydWxlcy5tYXhpbXVtQ2xhaW1QcmljZVdlaTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbmV3Q2xhaW1QcmljZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgSG93IG11Y2ggeW91IG11c3QgcGF5IHRvIGNsYWltIHRoZSB0aHJvbmUgbm93LCBpbiBmaW5uZXkuCiAgICBmdW5jdGlvbiBjdXJyZW50Q2xhaW1QcmljZUluRmlubmV5KCkgY29uc3RhbnQKICAgIHJldHVybnMgKHVpbnQgcHJpY2VJbkZpbm5leSkgewogICAgICAgIHVpbnQgdmFsdWVXZWkgPSBjdXJyZW50Q2xhaW1QcmljZVdlaSgpOwogICAgICAgIHJldHVybiByb3VuZE1vbmV5VXBUb1dob2xlRmlubmV5KHZhbHVlV2VpKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDaGVjayBpZiBhIG5hbWUgY2FuIGJlIHVzZWQgYXMgYSBtb25hcmNoIG5hbWUuCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBuYW1lIHNhdGlzZmllcyB0aGUgY3JpdGVyaWEgb2Y6CiAgICAvLy8gICAtIG5vIGZld2VyIHRoYW4gMSBjaGFyYWN0ZXIKICAgIC8vLyAgIC0gbm8gbW9yZSB0aGFuIDI1IGNoYXJhY3RlcnMKICAgIC8vLyAgIC0gbm8gY2hhcmFjdGVycyBvdGhlciB0aGFuOgogICAgLy8vICAgICAtICJyb21hbiIgYWxwaGFiZXQgbGV0dGVycyAoQS1aIGFuZCBhLXopCiAgICAvLy8gICAgIC0gd2VzdGVybiBkaWdpdHMgKDAtOSkKICAgIC8vLyAgICAgLSAic2FmZSIgcHVuY3R1YXRpb246ICEgKCApIC0gLiBfIFNQQUNFCiAgICBmdW5jdGlvbiB2YWxpZGF0ZVByb3Bvc2VkTW9uYXJjaE5hbWUoc3RyaW5nIF9tb25hcmNoTmFtZSkgY29uc3RhbnQKICAgIHJldHVybnMgKGJvb2wgYWxsb3dlZCkgewogICAgICAgIHJldHVybiB2YWxpZGF0ZU5hbWVJbnRlcm5hbChfbW9uYXJjaE5hbWUpOwogICAgfQoKICAgIC8vIEdldCBkZXRhaWxzIG9mIHRoZSBsYXRlc3QgbW9uYXJjaCAoZXZlbiBpZiB0aGV5IGFyZSBkZWFkKS4KICAgIC8vCiAgICAvLyBXZSBkb24ndCBleHBvc2UgZXh0ZXJuYWxseSBiZWNhdXNlIHJldHVybmluZyBzdHJ1Y3RzIGlzIG5vdCB3ZWxsCiAgICAvLyBzdXBwb3J0ZWQgaW4gdGhlIEFCSSAoc3RyYW5nZSB0aGF0IG1vbmFyY2hzQnlOdW1iZXIgYXJyYXkgd29ya3MKICAgIC8vIGZpbmUgdGhvdWdoKS4gTm90ZSB0aGF0IHRoZSByZWZlcmVuY2UgcmV0dXJuZWQgaXMgd3JpdGFibGUgLSBpdAogICAgLy8gY2FuIGJlIHVzZWQgdG8gdXBkYXRlIGRldGFpbHMgb2YgdGhlIGxhdGVzdCBtb25hcmNoLgogICAgLy8gV0FSTjogeW91IHNob3VsZCBjaGVjayBudW1iZXJPZk1vbmFyY2hzKCkgPiAwIGZpcnN0LgogICAgZnVuY3Rpb24gbGF0ZXN0TW9uYXJjaEludGVybmFsKCkgY29uc3RhbnQgaW50ZXJuYWwKICAgIHJldHVybnMgKE1vbmFyY2ggc3RvcmFnZSBtb25hcmNoKSB7CiAgICAgICAgcmV0dXJuIG1vbmFyY2hzQnlOdW1iZXJbbW9uYXJjaHNCeU51bWJlci5sZW5ndGggLSAxXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDbGFpbSB0aHJvbmUgYnkgc2VuZGluZyBmdW5kcyB0byB0aGUgY29udHJhY3QuCiAgICAvLy8gQW55IGZ1dHVyZSBjb21wZW5zYXRpb24gZWFybmVkIHdpbGwgYmUgc2VudCB0byB0aGUgc2VuZGVyJ3MKICAgIC8vLyBhZGRyZXNzIChgbXNnLnNlbmRlcmApLgogICAgLy8vIFNlbmRpbmcgZnJvbSBhIGNvbnRyYWN0IGlzIG5vdCByZWNvbW1lbmRlZCB1bmxlc3MgeW91IGtub3cKICAgIC8vLyB3aGF0IHlvdSdyZSBkb2luZyAoYW5kIHlvdSd2ZSB0ZXN0ZWQgaXQpLgogICAgLy8vIElmIG5vIG1lc3NhZ2UgZGF0YSBpcyBzdXBwbGllZCwgdGhlIHRocm9uZSB3aWxsIGJlIGNsYWltZWQgaW4KICAgIC8vLyB0aGUgbmFtZSBvZiAiQW5vbnltb3VzIi4gVG8gc3VwcGx5IGEgbmFtZSwgc2VuZCBkYXRhIGVuY29kZWQKICAgIC8vLyB1c2luZyB3ZWIzLmZyb21Bc2NpaSgnTkFNRTonICsgJ3lvdXJfY2hvc2VuX3ZhbGlkX25hbWUnKS4KICAgIC8vLyBTZW5kZXIgbXVzdCBpbmNsdWRlIHBheW1lbnQgZXF1YWwgdG8gY3VycmVudENsYWltUHJpY2VXZWkoKS4KICAgIC8vLyBXaWxsIGNvbnN1bWUgdXAgdG8gfjMwMCwwMDAgZ2FzLgogICAgLy8vIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWY6CiAgICAvLy8gICAtIG5hbWUgaXMgaW52YWxpZCAoc2VlIGB2YWxpZGF0ZVByb3Bvc2VkTW9uYXJjaE5hbWUoc3RyaW5nKWApCiAgICAvLy8gICAtIHBheW1lbnQgaXMgdG9vIGxvdyBvciB0b28gaGlnaAogICAgLy8vIFByb2R1Y2VzIGV2ZW50czoKICAgIC8vLyAgIC0gYFRocm9uZUNsYWltZWRFdmVudGAKICAgIC8vLyAgIC0gYENvbXBlbnNhdGlvblNlbnRFdmVudGAgLyBgQ29tcGVuc2F0aW9uRmFpbEV2ZW50YAogICAgLy8vICAgLSBgQ29tbWlzc2lvbkVhcm5lZEV2ZW50YAogICAgZnVuY3Rpb24gKCkgewogICAgICAgIGV4dGVybmFsRW50ZXIoKTsKICAgICAgICBmYWxsYmFja1JQKCk7CiAgICAgICAgZXh0ZXJuYWxMZWF2ZSgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENsYWltIHRocm9uZSBpbiB0aGUgZ2l2ZW4gYF9tb25hcmNoTmFtZWAuCiAgICAvLy8gQW55IGZ1dHVyZSBjb21wZW5zYXRpb24gZWFybmVkIHdpbGwgYmUgc2VudCB0byB0aGUgY2FsbGVyJ3MKICAgIC8vLyBhZGRyZXNzIChgbXNnLnNlbmRlcmApLgogICAgLy8vIENhbGxlciBtdXN0IGluY2x1ZGUgcGF5bWVudCBlcXVhbCB0byBjdXJyZW50Q2xhaW1QcmljZVdlaSgpLgogICAgLy8vIENhbGxpbmcgZnJvbSBhIGNvbnRyYWN0IGlzIG5vdCByZWNvbW1lbmRlZCB1bmxlc3MgeW91IGtub3cKICAgIC8vLyB3aGF0IHlvdSdyZSBkb2luZyAoYW5kIHlvdSd2ZSB0ZXN0ZWQgaXQpLgogICAgLy8vIFdpbGwgY29uc3VtZSB1cCB0byB+MzAwLDAwMCBnYXMuCiAgICAvLy8gV2lsbCB0aHJvdyBhbiBlcnJvciBpZjoKICAgIC8vLyAgIC0gbmFtZSBpcyBpbnZhbGlkIChzZWUgYHZhbGlkYXRlUHJvcG9zZWRNb25hcmNoTmFtZShzdHJpbmcpYCkKICAgIC8vLyAgIC0gcGF5bWVudCBpcyB0b28gbG93IG9yIHRvbyBoaWdoCiAgICAvLy8gUHJvZHVjZXMgZXZlbnRzOgogICAgLy8vICAgLSBgVGhyb25lQ2xhaW1lZEV2ZW50CiAgICAvLy8gICAtIGBDb21wZW5zYXRpb25TZW50RXZlbnRgIC8gYENvbXBlbnNhdGlvbkZhaWxFdmVudGAKICAgIC8vLyAgIC0gYENvbW1pc3Npb25FYXJuZWRFdmVudGAKICAgIGZ1bmN0aW9uIGNsYWltVGhyb25lKHN0cmluZyBfbW9uYXJjaE5hbWUpIHsKICAgICAgICBleHRlcm5hbEVudGVyKCk7CiAgICAgICAgY2xhaW1UaHJvbmVSUChfbW9uYXJjaE5hbWUpOwogICAgICAgIGV4dGVybmFsTGVhdmUoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBVc2VkIGJ5IGVpdGhlciB0aGUgdG9wV2l6YXJkIG9yIHN1YldpemFyZCB0byB0cmFuc2ZlcgogICAgLy8vIGFsbCByaWdodHMgdG8gZnV0dXJlIGNvbW1pc3Npb25zIHRvIHRoZSBgX3JlcGxhY2VtZW50YCB3aXphcmQuCiAgICAvLy8gV0FSTjogVGhlIG9yaWdpbmFsIHdpemFyZCByZXRhaW5zIG93bmVyc2hpcCBvZiBhbnkgcGFzdAogICAgLy8vIGNvbW1pc3Npb24gaGVsZCBmb3IgdGhlbSBpbiB0aGUgYGZ1bmRzYCBtYXBwaW5nLCB3aGljaCB0aGV5CiAgICAvLy8gY2FuIHN0aWxsIHdpdGhkcmF3LgogICAgLy8vIFByb2R1Y2VzIGV2ZW50IFdpemFyZFJlcGxhY2VkRXZlbnQuCiAgICBmdW5jdGlvbiByZXBsYWNlV2l6YXJkKGFkZHJlc3MgX3JlcGxhY2VtZW50KSB7CiAgICAgICAgZXh0ZXJuYWxFbnRlcigpOwogICAgICAgIHJlcGxhY2VXaXphcmRSUChfcmVwbGFjZW1lbnQpOwogICAgICAgIGV4dGVybmFsTGVhdmUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmYWxsYmFja1JQKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChtc2cuZGF0YS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICBjbGFpbVRocm9uZVJQKCJBbm9ueW1vdXMiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdHJpbmcgbWVtb3J5IF9tb25hcmNoTmFtZSA9IGV4dHJhY3ROYW1lRnJvbURhdGEobXNnLmRhdGEpOwogICAgICAgICAgICBjbGFpbVRocm9uZVJQKF9tb25hcmNoTmFtZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjbGFpbVRocm9uZVJQKAogICAgICAgIHN0cmluZyBfbW9uYXJjaE5hbWUKICAgICkgaW50ZXJuYWwgewoKICAgICAgICBhZGRyZXNzIF9jb21wZW5zYXRpb25BZGRyZXNzID0gbXNnLnNlbmRlcjsKCiAgICAgICAgaWYgKCF2YWxpZGF0ZU5hbWVJbnRlcm5hbChfbW9uYXJjaE5hbWUpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgaWYgKF9jb21wZW5zYXRpb25BZGRyZXNzID09IDAgfHwKICAgICAgICAgICAgX2NvbXBlbnNhdGlvbkFkZHJlc3MgPT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIHVpbnQgcGFpZFdlaSA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IHByaWNlV2VpID0gY3VycmVudENsYWltUHJpY2VXZWkoKTsKICAgICAgICBpZiAocGFpZFdlaSA8IHByaWNlV2VpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICAvLyBNYWtlIGl0IGVhc3kgZm9yIHBlb3BsZSB0byBwYXkgdXNpbmcgYSB3aG9sZSBudW1iZXIgb2YgZmlubmV5LAogICAgICAgIC8vIHdoaWNoIGNvdWxkIGJlIGEgdGVlbnkgYml0IGhpZ2hlciB0aGFuIHRoZSByYXcgd2VpIHZhbHVlLgogICAgICAgIHVpbnQgZXhjZXNzV2VpID0gcGFpZFdlaSAtIHByaWNlV2VpOwogICAgICAgIGlmIChleGNlc3NXZWkgPiAxIGZpbm5leSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdWludCBjb21wZW5zYXRpb25XZWk7CiAgICAgICAgdWludCBjb21taXNzaW9uV2VpOwogICAgICAgIGlmICghaXNMaXZpbmdNb25hcmNoKCkpIHsKICAgICAgICAgICAgLy8gZGVhZCBtZW4gZ2V0IG5vIGNvbXBlbnNhdGlvbgogICAgICAgICAgICBjb21taXNzaW9uV2VpID0gcGFpZFdlaTsKICAgICAgICAgICAgY29tcGVuc2F0aW9uV2VpID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb21taXNzaW9uV2VpID0gKHBhaWRXZWkgKiBydWxlcy5jb21taXNzaW9uUGVyVGhvdXNhbmQpIC8gMTAwMDsKICAgICAgICAgICAgY29tcGVuc2F0aW9uV2VpID0gcGFpZFdlaSAtIGNvbW1pc3Npb25XZWk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29tbWlzc2lvbldlaSAhPSAwKSB7CiAgICAgICAgICAgIHJlY29yZENvbW1pc3Npb25FYXJuZWQoY29tbWlzc2lvbldlaSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29tcGVuc2F0aW9uV2VpICE9IDApIHsKICAgICAgICAgICAgY29tcGVuc2F0ZUxhdGVzdE1vbmFyY2goY29tcGVuc2F0aW9uV2VpKTsKICAgICAgICB9CgogICAgICAgIC8vIEluIGNhc2Ugb2YgYW55IHRlZW55IGV4Y2Vzcywgd2UgdXNlIHRoZSBvZmZpY2lhbCBwcmljZSBoZXJlCiAgICAgICAgLy8gc2luY2UgdGhhdCBzaG91bGQgZGV0ZXJtaW5lIHRoZSBuZXcgY2xhaW0gcHJpY2UsIG5vdCBwYWlkV2VpLgogICAgICAgIG1vbmFyY2hzQnlOdW1iZXIucHVzaChNb25hcmNoKAogICAgICAgICAgICBfY29tcGVuc2F0aW9uQWRkcmVzcywKICAgICAgICAgICAgX21vbmFyY2hOYW1lLAogICAgICAgICAgICBub3csCiAgICAgICAgICAgIHByaWNlV2VpLAogICAgICAgICAgICAwCiAgICAgICAgKSk7CgogICAgICAgIFRocm9uZUNsYWltZWRFdmVudChtb25hcmNoc0J5TnVtYmVyLmxlbmd0aCAtIDEpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXphcmRSUChhZGRyZXNzIHJlcGxhY2VtZW50KSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSAhPSAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBib29sIHJlcGxhY2VkT2sgPSBmYWxzZTsKICAgICAgICBhZGRyZXNzIG9sZFdpemFyZDsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSB0b3BXaXphcmQpIHsKICAgICAgICAgICAgb2xkV2l6YXJkID0gdG9wV2l6YXJkOwogICAgICAgICAgICB0b3BXaXphcmQgPSByZXBsYWNlbWVudDsKICAgICAgICAgICAgV2l6YXJkUmVwbGFjZWRFdmVudChvbGRXaXphcmQsIHJlcGxhY2VtZW50KTsKICAgICAgICAgICAgcmVwbGFjZWRPayA9IHRydWU7CiAgICAgICAgfQogICAgICAgIC8vIENhcmVmdWwgLSB0b3BXaXphcmQgYW5kIHN1YldpemFyZCBjYW4gYmUgdGhlIHNhbWUgYWRkcmVzcywKICAgICAgICAvLyBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVwbGFjZSBib3RoLgogICAgICAgIGlmIChtc2cuc2VuZGVyID09IHN1YldpemFyZCkgewogICAgICAgICAgICBvbGRXaXphcmQgPSBzdWJXaXphcmQ7CiAgICAgICAgICAgIHN1YldpemFyZCA9IHJlcGxhY2VtZW50OwogICAgICAgICAgICBXaXphcmRSZXBsYWNlZEV2ZW50KG9sZFdpemFyZCwgcmVwbGFjZW1lbnQpOwogICAgICAgICAgICByZXBsYWNlZE9rID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKCFyZXBsYWNlZE9rKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICAvLyBBbGxvdyBjb21taXNzaW9uIGZ1bmRzIHRvIGJ1aWxkIHVwIGluIGNvbnRyYWN0IGZvciB0aGUgd2l6YXJkcwogICAgLy8gdG8gd2l0aGRyYXcgKGNhcmVmdWxseSByaW5nLWZlbmNlZCkuCiAgICBmdW5jdGlvbiByZWNvcmRDb21taXNzaW9uRWFybmVkKHVpbnQgX2NvbW1pc3Npb25XZWkpIGludGVybmFsIHsKICAgICAgICAvLyBnaXZlIHRoZSBzdWJXaXphcmQgYW55ICJvZGQiIHNpbmdsZSB3ZWkKICAgICAgICB1aW50IHRvcFdpemFyZFdlaSA9IF9jb21taXNzaW9uV2VpIC8gMjsKICAgICAgICB1aW50IHN1YldpemFyZFdlaSA9IF9jb21taXNzaW9uV2VpIC0gdG9wV2l6YXJkV2VpOwogICAgICAgIGZ1bmRzW3RvcFdpemFyZF0gKz0gdG9wV2l6YXJkV2VpOwogICAgICAgIENvbW1pc3Npb25FYXJuZWRFdmVudCh0b3BXaXphcmQsIHRvcFdpemFyZFdlaSk7CiAgICAgICAgZnVuZHNbc3ViV2l6YXJkXSArPSBzdWJXaXphcmRXZWk7CiAgICAgICAgQ29tbWlzc2lvbkVhcm5lZEV2ZW50KHN1YldpemFyZCwgc3ViV2l6YXJkV2VpKTsKICAgIH0KCiAgICAvLyBTZW5kIGNvbXBlbnNhdGlvbiB0byBsYXRlc3QgbW9uYXJjaCAob3IgaG9sZCBmdW5kcyBmb3IgdGhlbQogICAgLy8gaWYgY2Fubm90IHRocm91Z2ggbm8gZmF1bHQgb2YgY3VycmVudCBjYWxsZXIpLgogICAgZnVuY3Rpb24gY29tcGVuc2F0ZUxhdGVzdE1vbmFyY2godWludCBfY29tcGVuc2F0aW9uV2VpKSBpbnRlcm5hbCB7CiAgICAgICAgYWRkcmVzcyBjb21wZW5zYXRpb25BZGRyZXNzID0KICAgICAgICAgIGxhdGVzdE1vbmFyY2hJbnRlcm5hbCgpLmNvbXBlbnNhdGlvbkFkZHJlc3M7CiAgICAgICAgLy8gcmVjb3JkIHRoYXQgd2UgY29tcGVuc2F0ZWQgdGhlbQogICAgICAgIGxhdGVzdE1vbmFyY2hJbnRlcm5hbCgpLmNvbXBlbnNhdGlvbldlaSA9IF9jb21wZW5zYXRpb25XZWk7CiAgICAgICAgLy8gV0FSTjogaWYgdGhlIGxhdGVzdCBtb25hcmNoIGlzIGEgY29udHJhY3Qgd2hvc2UgZmFsbGJhY2sKICAgICAgICAvLyBmdW5jdGlvbiBuZWVkcyBtb3JlIDI1MzAwIGdhcyB0aGFuIHRoZW4gdGhleSB3aWxsIE5PVAogICAgICAgIC8vIHJlY2VpdmUgY29tcGVuc2F0aW9uIGF1dG9tYXRpY2FsbHkuCiAgICAgICAgYm9vbCBzZW50T2sgPSBjYXJlZnVsU2VuZFdpdGhGaXhlZEdhcygKICAgICAgICAgICAgY29tcGVuc2F0aW9uQWRkcmVzcywKICAgICAgICAgICAgX2NvbXBlbnNhdGlvbldlaSwKICAgICAgICAgICAgc3VnZ2VzdGVkRXh0cmFHYXNUb0luY2x1ZGVXaXRoU2VuZHMKICAgICAgICApOwogICAgICAgIGlmIChzZW50T2spIHsKICAgICAgICAgICAgQ29tcGVuc2F0aW9uU2VudEV2ZW50KGNvbXBlbnNhdGlvbkFkZHJlc3MsIF9jb21wZW5zYXRpb25XZWkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZSBsYXRlc3QgbW9uYXJjaCBpcyBhIGNvbnRyYWN0CiAgICAgICAgICAgIC8vIHdob3NlIGZhbGxiYWNrLWZ1bmN0aW9uIGZhaWxlZCBvciByYW4gb3V0IG9mIGdhcyAoZGVzcGl0ZQogICAgICAgICAgICAvLyB1cyBpbmNsdWRpbmcgYSBmYWlyIGFtb3VudCBvZiBnYXMpLgogICAgICAgICAgICAvLyBXZSBkbyBub3QgdGhyb3cgc2luY2Ugd2UgZG8gbm90IHdhbnQgdGhlIHRocm9uZSB0byBnZXQKICAgICAgICAgICAgLy8gJ3N0dWNrJyAoaXQncyBub3QgdGhlIG5ldyB1c3VycGVycyBmYXVsdCkgLSBpbnN0ZWFkIHNhdmUKICAgICAgICAgICAgLy8gdGhlIGZ1bmRzIHdlIGNvdWxkIG5vdCBzZW5kIHNvIGNhbiBiZSBjbGFpbWVkIGxhdGVyLgogICAgICAgICAgICAvLyBUaGVpciBtb25hcmNoIGNvbnRyYWN0IHdvdWxkIG5lZWQgdG8gaGF2ZSBiZWVuIGRlc2lnbmVkCiAgICAgICAgICAgIC8vIHRvIGNhbGwgb3VyIHdpdGhkcmF3RnVuZHNBZHZhbmNlZCguLikgZnVuY3Rpb24gbWluZCB5b3UuCiAgICAgICAgICAgIGZ1bmRzW2NvbXBlbnNhdGlvbkFkZHJlc3NdICs9IF9jb21wZW5zYXRpb25XZWk7CiAgICAgICAgICAgIENvbXBlbnNhdGlvbkZhaWxFdmVudChjb21wZW5zYXRpb25BZGRyZXNzLCBfY29tcGVuc2F0aW9uV2VpKTsKICAgICAgICB9CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBVc2VkIGJ5IHRoZSBXb3JsZCBjb250cmFjdCB0byBjcmVhdGUgS2luZ2RvbSBpbnN0YW5jZXMuCi8vLyBAZGV2IE1vc3RseSBleGlzdHMgc28gdG9wV2l6YXJkIGNhbiBwb3RlbnRpYWxseSByZXBsYWNlIHRoaXMKLy8vIGNvbnRyYWN0IHRvIG1vZGlmeSB0aGUgS2luZ2RvbSBjb250cmFjdCBhbmQvb3IgcnVsZSB2YWxpZGF0aW9uCi8vLyBsb2dpYyB0byBiZSB1c2VkIGZvciAqZnV0dXJlKiBLaW5nZG9tcyBjcmVhdGVkIGJ5IHRoZSBXb3JsZC4KLy8vIFdlIGRvIG5vdCBpbXBsZW1lbnQgcmVudHJ5IHByb3RlY3Rpb24gYmVjYXVzZSB3ZSBkb24ndCBzZW5kL2NhbGwuCi8vLyBXZSBkbyBub3QgY2hhcmdlIGEgZmVlIGhlcmUgLSBidXQgaWYgeW91IGJ5cGFzcyB0aGUgV29ybGQgdGhlbgovLy8geW91IHdvbid0IGJlIGxpc3RlZCBvbiB0aGUgb2ZmaWNpYWwgV29ybGQgcGFnZSBvZiBjb3Vyc2UuCmNvbnRyYWN0IEtpbmdkb21GYWN0b3J5IHsKCiAgICBmdW5jdGlvbiBLaW5nZG9tRmFjdG9yeSgpIHsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gdGhpcyBjb250cmFjdCBzaG91bGQgbmV2ZXIgaGF2ZSBhIGJhbGFuY2UKICAgICAgICB0aHJvdzsKICAgIH0KCiAgICAvLyBTZWUgV29ybGQuY3JlYXRlS2luZ2RvbSguLikgZm9yIHBhcmFtZXRlciBkb2N1bWVudGF0aW9uLgogICAgZnVuY3Rpb24gdmFsaWRhdGVQcm9wb3NlZFRocm9uZVJ1bGVzKAogICAgICAgIHVpbnQgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9tYXhpbXVtQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCwKICAgICAgICB1aW50IF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgdWludCBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICApIGNvbnN0YW50IHJldHVybnMgKGJvb2wgYWxsb3dlZCkgewogICAgICAgIC8vIEkgc3VwcG9zZSB0aGVyZSBpcyBhIGRhbmdlciB0aGF0IG1hc3NpdmUgZGVmbGF0aW9uL2luZmxhdGlvbiBjb3VsZAogICAgICAgIC8vIGNoYW5nZSB0aGUgcmVhbC13b3JsZCBzYW5pdHkgb2YgdGhlc2UgY2hlY2tzLCBidXQgaW4gdGhhdCBjYXNlIHdlCiAgICAgICAgLy8gY2FuIGRlcGxveSBhIG5ldyBmYWN0b3J5IGFuZCB1cGRhdGUgdGhlIHdvcmxkLgogICAgICAgIGlmIChfc3RhcnRpbmdDbGFpbVByaWNlV2VpIDwgMSBmaW5uZXkgfHwKICAgICAgICAgICAgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSA+IDEwMCBldGhlcikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChfbWF4aW11bUNsYWltUHJpY2VXZWkgPCAxIGV0aGVyIHx8CiAgICAgICAgICAgIF9tYXhpbXVtQ2xhaW1QcmljZVdlaSA+IDEwMDAwMCBldGhlcikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChfc3RhcnRpbmdDbGFpbVByaWNlV2VpICogMjAgPiBfbWF4aW11bUNsYWltUHJpY2VXZWkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoX2NsYWltUHJpY2VBZGp1c3RQZXJjZW50IDwgMSB8fAogICAgICAgICAgICBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQgPiA5MDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoX2N1cnNlSW5jdWJhdGlvbkR1cmF0aW9uU2Vjb25kcyA8IDIgaG91cnMgfHwKICAgICAgICAgICAgX2N1cnNlSW5jdWJhdGlvbkR1cmF0aW9uU2Vjb25kcyA+IDEwMDAwIGRheXMpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoX2NvbW1pc3Npb25QZXJUaG91c2FuZCA8IDEwIHx8CiAgICAgICAgICAgIF9jb21taXNzaW9uUGVyVGhvdXNhbmQgPiAxMDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDcmVhdGUgYSBuZXcgS2luZ2RvbS4gTm9ybWFsbHkgY2FsbGVkIGJ5IFdvcmxkIGNvbnRyYWN0LgogICAgLy8vIFdBUk46IERvZXMgTk9UIHZhbGlkYXRlIHRoZSBfa2luZ2RvbU5hbWUgb3IgX3dvcmxkIGFyZ3VtZW50cy4KICAgIC8vLyBXaWxsIGNvbnN1bWUgdXAgdG8gMSw4MDAsMDAwIGdhcyAoISkKICAgIC8vLyBXaWxsIHRocm93IGFuIGVycm9yIGlmOgogICAgLy8vICAgLSBydWxlcyBpbnZhbGlkIChzZWUgdmFsaWRhdGVQcm9wb3NlZFRocm9uZVJ1bGVzKQogICAgLy8vICAgLSB3aXphcmQgYWRkcmVzc2VzICJvYnZpb3VzbHkiIHdyb25nCiAgICAvLy8gICAtIG91dCBvZiBnYXMgcXVpdGUgbGlrZWx5IChwZXJoYXBzIGluIGZ1dHVyZSBzaG91bGQgY29uc2lkZXIKICAgIC8vLyAgICAgdXNpbmcgc29saWRpdHkgbGlicmFyaWVzIHRvIHJlZHVjZSBLaW5nZG9tIHNpemU/KQogICAgLy8gU2VlIFdvcmxkLmNyZWF0ZUtpbmdkb20oLi4pIGZvciBwYXJhbWV0ZXIgZG9jdW1lbnRhdGlvbi4KICAgIGZ1bmN0aW9uIGNyZWF0ZUtpbmdkb20oCiAgICAgICAgc3RyaW5nIF9raW5nZG9tTmFtZSwKICAgICAgICBhZGRyZXNzIF93b3JsZCwKICAgICAgICBhZGRyZXNzIF90b3BXaXphcmQsCiAgICAgICAgYWRkcmVzcyBfc3ViV2l6YXJkLAogICAgICAgIHVpbnQgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9tYXhpbXVtQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCwKICAgICAgICB1aW50IF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgdWludCBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICApIHJldHVybnMgKEtpbmdkb20gbmV3S2luZ2RvbSkgewogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB7CiAgICAgICAgICAgIC8vIHRoaXMgY29udHJhY3Qgc2hvdWxkIG5ldmVyIGhhdmUgYSBiYWxhbmNlCiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICAvLyBOQjogdG9wV2l6YXJkIGFuZCBzdWJXaXphcmQgQ0FOIGJlIHRoZSBzYW1lIGFzIGVhY2ggb3RoZXIuCiAgICAgICAgaWYgKF90b3BXaXphcmQgPT0gMCB8fCBfc3ViV2l6YXJkID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmIChfdG9wV2l6YXJkID09IF93b3JsZCB8fCBfc3ViV2l6YXJkID09IF93b3JsZCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgaWYgKCF2YWxpZGF0ZVByb3Bvc2VkVGhyb25lUnVsZXMoCiAgICAgICAgICAgIF9zdGFydGluZ0NsYWltUHJpY2VXZWksCiAgICAgICAgICAgIF9tYXhpbXVtQ2xhaW1QcmljZVdlaSwKICAgICAgICAgICAgX2NsYWltUHJpY2VBZGp1c3RQZXJjZW50LAogICAgICAgICAgICBfY3Vyc2VJbmN1YmF0aW9uRHVyYXRpb25TZWNvbmRzLAogICAgICAgICAgICBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICAgICAgKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBLaW5nZG9tKAogICAgICAgICAgICBfa2luZ2RvbU5hbWUsCiAgICAgICAgICAgIF93b3JsZCwKICAgICAgICAgICAgX3RvcFdpemFyZCwKICAgICAgICAgICAgX3N1YldpemFyZCwKICAgICAgICAgICAgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICAgICAgX21heGltdW1DbGFpbVByaWNlV2VpLAogICAgICAgICAgICBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQsCiAgICAgICAgICAgIF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgICAgIF9jb21taXNzaW9uUGVyVGhvdXNhbmQKICAgICAgICApOwogICAgfQoKfQoKCi8vLyBAdGl0bGUgUnVucyB0aGUgd29ybGQsIHdoaWNoIGlzIGEgY29sbGVjdGlvbiBvZiBLaW5nZG9tcy4KY29udHJhY3QgV29ybGQgaXMKICBSZWVudHJ5UHJvdGVjdG9yTWl4aW4sCiAgTmFtZWFibGVNaXhpbiwKICBNb25leVJvdW5kZXJNaXhpbiwKICBGdW5kc0hvbGRlck1peGluLAogIFRocm9uZVJ1bGVzTWl4aW4gewoKICAgIC8vIFRoZSB0b3BXaXphcmQgcnVucyB0aGUgd29ybGQuIFRoZXkgY2hhcmdlIGZvciB0aGUgY3JlYXRpb24gb2YKICAgIC8vIGtpbmdkb21zIGFuZCBiZWNvbWUgdGhlIHRvcFdpemFyZCBpbiBlYWNoIGtpbmdkb20gY3JlYXRlZC4KICAgIGFkZHJlc3MgcHVibGljIHRvcFdpemFyZDsKCiAgICAvLyBIb3cgbXVjaCBvbmUgbXVzdCBwYXkgdG8gY3JlYXRlIGEgbmV3IGtpbmdkb20gKGluIHdlaSkuCiAgICAvLyBDYW4gYmUgY2hhbmdlZCBieSB0aGUgdG9wV2l6YXJkLgogICAgdWludCBwdWJsaWMga2luZ2RvbUNyZWF0aW9uRmVlV2VpOwoKICAgIHN0cnVjdCBLaW5nZG9tTGlzdGluZyB7CiAgICAgICAgdWludCBraW5nZG9tTnVtYmVyOwogICAgICAgIHN0cmluZyBraW5nZG9tTmFtZTsKICAgICAgICBhZGRyZXNzIGtpbmdkb21Db250cmFjdDsKICAgICAgICBhZGRyZXNzIGtpbmdkb21DcmVhdG9yOwogICAgICAgIHVpbnQgY3JlYXRpb25UaW1lc3RhbXA7CiAgICAgICAgYWRkcmVzcyBraW5nZG9tRmFjdG9yeVVzZWQ7CiAgICB9CiAgICAKICAgIC8vIFRoZSBmaXJzdCBraW5nZG9tIGlzIG51bWJlciAxOyB0aGUgemVyby10aCBlbnRyeSBpcyBhIGR1bW15LgogICAgS2luZ2RvbUxpc3RpbmdbXSBwdWJsaWMga2luZ2RvbXNCeU51bWJlcjsKCiAgICAvLyBGb3Igc2FmZXR5LCB3ZSBjYXAganVzdCBob3cgaGlnaCB0aGUgcHJpY2UgY2FuIGdldC4KICAgIC8vIENhbiBiZSBjaGFuZ2VkIGJ5IHRoZSB0b3BXaXphcmQsIHRob3VnaCBpdCB3aWxsIG9ubHkgYWZmZWN0CiAgICAvLyBraW5nZG9tcyBjcmVhdGVkIGFmdGVyIHRoYXQuCiAgICB1aW50IHB1YmxpYyBtYXhpbXVtQ2xhaW1QcmljZVdlaTsKCiAgICAvLyBIZWxwZXIgY29udHJhY3QgZm9yIGNyZWF0aW5nIEtpbmdkb20gaW5zdGFuY2VzLiBDYW4gYmUKICAgIC8vIHVwZ3JhZGVkIGJ5IHRoZSB0b3BXaXphcmQgKHdvbid0IGFmZmVjdCBleGlzdGluZyBvbmVzKS4KICAgIEtpbmdkb21GYWN0b3J5IHB1YmxpYyBraW5nZG9tRmFjdG9yeTsKCiAgICAvLyBBdm9pZHMgZHVwbGljYXRlIGtpbmdkb20gbmFtZXMgYW5kIGFsbG93cyBzZWFyY2hpbmcgYnkgbmFtZS4KICAgIG1hcHBpbmcgKHVpbnQgPT4gdWludCkga2luZ2RvbU51bWJlcnNCeWZ1enp5SGFzaDsKCiAgICAvLyBOQjogd2UgYWxzbyBoYXZlIGEgYGZ1bmRzYCBtYXBwaW5nIGZyb20gRnVuZHNIb2xkZXJNaXhpbiwKICAgIC8vIGFuZCBhIHJlbnRyeVByb3RlY3RvciBmcm9tIFJlZW50cnlQcm90ZWN0b3JNaXhpbi4KCiAgICBldmVudCBLaW5nZG9tQ3JlYXRlZEV2ZW50KHVpbnQga2luZ2RvbU51bWJlcik7CiAgICBldmVudCBDcmVhdGlvbkZlZUNoYW5nZWRFdmVudCh1aW50IG5ld0ZlZVdlaSk7CiAgICBldmVudCBGYWN0b3J5Q2hhbmdlZEV2ZW50KGFkZHJlc3MgbmV3RmFjdG9yeSk7CiAgICBldmVudCBXaXphcmRSZXBsYWNlZEV2ZW50KGFkZHJlc3Mgb2xkV2l6YXJkLCBhZGRyZXNzIG5ld1dpemFyZCk7CiAgICAvLyBOQjogd2UgYWxzbyBoYXZlIGEgYEZ1bmRzV2l0aGRyYXduRXZlbnRgIGZyb20gRnVuZHNIb2xkZXJNaXhpbgoKICAgIC8vIENyZWF0ZSB0aGUgd29ybGQgd2l0aCBubyBraW5nZG9tcyB5ZXQuCiAgICAvLyBDb3N0cyBhYm91dCAxLjlNIGdhcyB0byBkZXBsb3kuCiAgICBmdW5jdGlvbiBXb3JsZCgKICAgICAgICBhZGRyZXNzIF90b3BXaXphcmQsCiAgICAgICAgdWludCBfa2luZ2RvbUNyZWF0aW9uRmVlV2VpLAogICAgICAgIEtpbmdkb21GYWN0b3J5IF9raW5nZG9tRmFjdG9yeSwKICAgICAgICB1aW50IF9tYXhpbXVtQ2xhaW1QcmljZVdlaQogICAgKSB7CiAgICAgICAgaWYgKF90b3BXaXphcmQgPT0gMCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgaWYgKF9tYXhpbXVtQ2xhaW1QcmljZVdlaSA8IDEgZXRoZXIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHRvcFdpemFyZCA9IF90b3BXaXphcmQ7CiAgICAgICAga2luZ2RvbUNyZWF0aW9uRmVlV2VpID0gX2tpbmdkb21DcmVhdGlvbkZlZVdlaTsKICAgICAgICBraW5nZG9tRmFjdG9yeSA9IF9raW5nZG9tRmFjdG9yeTsKICAgICAgICBtYXhpbXVtQ2xhaW1QcmljZVdlaSA9IF9tYXhpbXVtQ2xhaW1QcmljZVdlaTsKICAgICAgICAvLyBXZSBudW1iZXIgdGhlIGtpbmdkb21zIHN0YXJ0aW5nIGZyb20gMSBzaW5jZSBpdCdzIHNvbWV0aW1lcwogICAgICAgIC8vIHVzZWZ1bCB0byB1c2UgemVybyA9IGludmFsaWQuIENyZWF0ZSBkdW1teSB6ZXJvLXRoIGVudHJ5LgogICAgICAgIGtpbmdkb21zQnlOdW1iZXIucHVzaChLaW5nZG9tTGlzdGluZygwLCAiIiwgMCwgMCwgMCwgMCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIG51bWJlck9mS2luZ2RvbXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50IHRvdGFsQ291bnQpIHsKICAgICAgICByZXR1cm4ga2luZ2RvbXNCeU51bWJlci5sZW5ndGggLSAxOwogICAgfQoKICAgIC8vLyBAcmV0dXJuIGluZGV4IGludG8ga2luZ2RvbXNCeU51bWJlciBpZiBmb3VuZCwgb3IgemVybyBpZiBub3QuIAogICAgZnVuY3Rpb24gZmluZEtpbmdkb21DYWxsZWQoc3RyaW5nIF9raW5nZG9tTmFtZSkgY29uc3RhbnQKICAgIHJldHVybnMgKHVpbnQga2luZ2RvbU51bWJlcikgewogICAgICAgIHVpbnQgZnV6enlIYXNoID0gY29tcHV0ZU5hbWVGdXp6eUhhc2goX2tpbmdkb21OYW1lKTsKICAgICAgICByZXR1cm4ga2luZ2RvbU51bWJlcnNCeWZ1enp5SGFzaFtmdXp6eUhhc2hdOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENoZWNrIGlmIGEgbmFtZSBjYW4gYmUgdXNlZCBhcyBhIGtpbmdkb20gbmFtZS4KICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIG5hbWUgc2F0aXNmaWVzIHRoZSBjcml0ZXJpYSBvZjoKICAgIC8vLyAgIC0gbm8gZmV3ZXIgdGhhbiAxIGNoYXJhY3RlcgogICAgLy8vICAgLSBubyBtb3JlIHRoYW4gMjUgY2hhcmFjdGVycwogICAgLy8vICAgLSBubyBjaGFyYWN0ZXJzIG90aGVyIHRoYW46CiAgICAvLy8gICAgIC0gInJvbWFuIiBhbHBoYWJldCBsZXR0ZXJzIChBLVogYW5kIGEteikKICAgIC8vLyAgICAgLSB3ZXN0ZXJuIGRpZ2l0cyAoMC05KQogICAgLy8vICAgICAtICJzYWZlIiBwdW5jdHVhdGlvbjogISAoICkgLSAuIF8gU1BBQ0UKICAgIC8vLwogICAgLy8vIFdBUk46IGRvZXMgbm90IGNoZWNrIGlmIHRoZSBuYW1lIGlzIGFscmVhZHkgaW4gdXNlOwogICAgLy8vIHVzZSBgZmluZEtpbmdkb21DYWxsZWQoc3RyaW5nKWAgZm9yIHRoYXQgYWZ0ZXJ3YXJkcy4KICAgIGZ1bmN0aW9uIHZhbGlkYXRlUHJvcG9zZWRLaW5nZG9tTmFtZShzdHJpbmcgX2tpbmdkb21OYW1lKSBjb25zdGFudAogICAgcmV0dXJucyAoYm9vbCBhbGxvd2VkKSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlTmFtZUludGVybmFsKF9raW5nZG9tTmFtZSk7CiAgICB9CgogICAgLy8gQ2hlY2sgaWYgcnVsZXMgd291bGQgYmUgYWxsb3dlZCBmb3IgYSBuZXcgY3VzdG9tIEtpbmdkb20uCiAgICAvLyBUeXBpY2FsbHkgdXNlZCBiZWZvcmUgY2FsbGluZyBgY3JlYXRlS2luZ2RvbSguLi4pYC4KICAgIGZ1bmN0aW9uIHZhbGlkYXRlUHJvcG9zZWRUaHJvbmVSdWxlcygKICAgICAgICB1aW50IF9zdGFydGluZ0NsYWltUHJpY2VXZWksCiAgICAgICAgdWludCBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQsCiAgICAgICAgdWludCBfY3Vyc2VJbmN1YmF0aW9uRHVyYXRpb25TZWNvbmRzLAogICAgICAgIHVpbnQgX2NvbW1pc3Npb25QZXJUaG91c2FuZAogICAgKSBjb25zdGFudCByZXR1cm5zIChib29sIGFsbG93ZWQpIHsKICAgICAgICByZXR1cm4ga2luZ2RvbUZhY3RvcnkudmFsaWRhdGVQcm9wb3NlZFRocm9uZVJ1bGVzKAogICAgICAgICAgICBfc3RhcnRpbmdDbGFpbVByaWNlV2VpLAogICAgICAgICAgICBtYXhpbXVtQ2xhaW1QcmljZVdlaSwKICAgICAgICAgICAgX2NsYWltUHJpY2VBZGp1c3RQZXJjZW50LAogICAgICAgICAgICBfY3Vyc2VJbmN1YmF0aW9uRHVyYXRpb25TZWNvbmRzLAogICAgICAgICAgICBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICAgICAgKTsKICAgIH0KCiAgICAvLyBIb3cgbXVjaCBvbmUgbXVzdCBwYXkgdG8gY3JlYXRlIGEgbmV3IGtpbmdkb20gKGluIGZpbm5leSkuCiAgICAvLyBDYW4gYmUgY2hhbmdlZCBieSB0aGUgdG9wV2l6YXJkLgogICAgZnVuY3Rpb24ga2luZ2RvbUNyZWF0aW9uRmVlSW5GaW5uZXkoKSBjb25zdGFudAogICAgcmV0dXJucyAodWludCBmZWVJbkZpbm5leSkgewogICAgICAgIHJldHVybiByb3VuZE1vbmV5VXBUb1dob2xlRmlubmV5KGtpbmdkb21DcmVhdGlvbkZlZVdlaSk7CiAgICB9CgogICAgLy8gUmVqZWN0IGZ1bmRzIHNlbnQgdG8gdGhlIGNvbnRyYWN0IC0gd2l6YXJkcyB3aG8gY2Fubm90IGludGVyYWN0CiAgICAvLyB3aXRoIGl0IHZpYSB0aGUgQVBJIHdvbid0IGJlIGFibGUgdG8gd2l0aGRyYXcgdGhlaXIgY29tbWlzc2lvbi4KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdzsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDcmVhdGUgYSBuZXcga2luZ2RvbSB1c2luZyBjdXN0b20gcnVsZXMuCiAgICAvLy8gQHBhcmFtIF9raW5nZG9tTmFtZSBcCiAgICAvLy8gICBlLmcuICJLaW5nIG9mIHRoZSBFdGhlciBUaHJvbmUiCiAgICAvLy8gQHBhcmFtIF9zdGFydGluZ0NsYWltUHJpY2VXZWkgXAogICAgLy8vICAgSG93IG11Y2ggaXQgd2lsbCBjb3N0IHRoZSBmaXJzdCBtb25hcmNoIHRvIGNsYWltIHRoZSB0aHJvbmUKICAgIC8vLyAgIChhbmQgYWxzbyB0aGUgcHJpY2UgYWZ0ZXIgdGhlIGRlYXRoIG9mIGEgbW9uYXJjaCkuCiAgICAvLy8gQHBhcmFtIF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCBcCiAgICAvLy8gICBQZXJjZW50YWdlIGluY3JlYXNlIGFmdGVyIGVhY2ggY2xhaW0gLSBlLmcuIGlmIGNsYWltIHByaWNlCiAgICAvLy8gICB3YXMgMjAwIEVUSCwgYW5kIGBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnRgIGlzIDUwLCB0aGUgbmV4dAogICAgLy8vICAgY2xhaW0gcHJpY2Ugd2lsbCBiZSAyMDAgRVRIICsgKDUwJSBvZiAyMDAgRVRIKSA9PiAzMDAgRVRILgogICAgLy8vIEBwYXJhbSBfY3Vyc2VJbmN1YmF0aW9uRHVyYXRpb25TZWNvbmRzIFwKICAgIC8vLyAgIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiBhIHRpbWUgYSBtb25hcmNoIGNhbiBydWxlIGJlZm9yZSB0aGUKICAgIC8vLyAgIGN1cnNlIHN0cmlrZXMgYW5kIHRoZXkgYXJlIHJlbW92ZWQgd2l0aG91dCBjb21wZW5zYXRpb24uCiAgICAvLy8gQHBhcmFtIF9jb21taXNzaW9uUGVyVGhvdXNhbmQgXAogICAgLy8vICAgSG93IG11Y2ggb2YgZWFjaCBwYXltZW50IGlzIGdpdmVuIHRvIHRoZSB3aXphcmRzIHRvIHNoYXJlLAogICAgLy8vICAgZXhwcmVzc2VkIGluIHBhcnRzIHBlciB0aG91c2FuZCAtIGUuZy4gMjUgbWVhbnMgMjUvMTAwMCwKICAgIC8vLyAgIG9yIDIuNSUuCiAgICAvLy8gCiAgICAvLy8gQ2FsbGVyIG11c3QgaW5jbHVkZSBwYXltZW50IGVxdWFsIHRvIGtpbmdkb21DcmVhdGlvbkZlZVdlaS4KICAgIC8vLyBUaGUgY2FsbGVyIHdpbGwgYmVjb21lIHRoZSAnc3ViLXdpemFyZCcgYW5kIHdpbGwgZWFybiBoYWxmCiAgICAvLy8gYW55IGNvbW1pc3Npb24gY2hhcmdlZCBieSB0aGUgS2luZ2RvbS4gIE5vdGUgaG93ZXZlciB0aGV5CiAgICAvLy8gd2lsbCBuZWVkIHRvIGNhbGwgd2l0aGRyYXdGdW5kcygpIG9uIHRoZSBLaW5nZG9tIGNvbnRyYWN0CiAgICAvLy8gdG8gZ2V0IHRoZWlyIGNvbW1pc3Npb24gLSBpdCdzIG5vdCBzZW5kIGF1dG9tYXRpY2FsbHkuCiAgICAvLy8KICAgIC8vLyBXaWxsIGNvbnN1bWUgdXAgdG8gMSw5MDAsMDAwIGdhcyAoISkKICAgIC8vLyBXaWxsIHRocm93IGFuIGVycm9yIGlmOgogICAgLy8vICAgLSBuYW1lIGlzIGludmFsaWQgKHNlZSBgdmFsaWRhdGVQcm9wb3NlZEtpbmdkb21OYW1lKHN0cmluZylgKQogICAgLy8vICAgLSBuYW1lIGlzIGFscmVhZHkgaW4gdXNlIChzZWUgYGZpbmRLaW5nZG9tQ2FsbGVkKHN0cmluZylgKQogICAgLy8vICAgLSBydWxlcyBhcmUgaW52YWxpZCAoc2VlIGB2YWxpZGF0ZVByb3Bvc2VkS2luZ2RvbVJ1bGVzKC4uLilgKQogICAgLy8vICAgLSBwYXltZW50IGlzIHRvbyBsb3cgb3IgdG9vIGhpZ2gKICAgIC8vLyAgIC0gaW5zdWZmaWNpZW50IGdhcyAocXVpdGUgbGlrZWx5ISkKICAgIC8vLyBQcm9kdWNlcyBldmVudCBLaW5nZG9tQ3JlYXRlZEV2ZW50LgogICAgZnVuY3Rpb24gY3JlYXRlS2luZ2RvbSgKICAgICAgICBzdHJpbmcgX2tpbmdkb21OYW1lLAogICAgICAgIHVpbnQgX3N0YXJ0aW5nQ2xhaW1QcmljZVdlaSwKICAgICAgICB1aW50IF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCwKICAgICAgICB1aW50IF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgdWludCBfY29tbWlzc2lvblBlclRob3VzYW5kCiAgICApIHsKICAgICAgICBleHRlcm5hbEVudGVyKCk7CiAgICAgICAgY3JlYXRlS2luZ2RvbVJQKAogICAgICAgICAgICBfa2luZ2RvbU5hbWUsCiAgICAgICAgICAgIF9zdGFydGluZ0NsYWltUHJpY2VXZWksCiAgICAgICAgICAgIF9jbGFpbVByaWNlQWRqdXN0UGVyY2VudCwKICAgICAgICAgICAgX2N1cnNlSW5jdWJhdGlvbkR1cmF0aW9uU2Vjb25kcywKICAgICAgICAgICAgX2NvbW1pc3Npb25QZXJUaG91c2FuZAogICAgICAgICk7CiAgICAgICAgZXh0ZXJuYWxMZWF2ZSgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFVzZWQgYnkgdG9wV2l6YXJkIHRvIHRyYW5zZmVyIGFsbCByaWdodHMgdG8gZnV0dXJlCiAgICAvLy8gZmVlcyBhbmQgZnV0dXJlIGtpbmdkb20gd2l6YXJkc2hpcHMgdG8gYF9yZXBsYWNlbWVudGAgd2l6YXJkLgogICAgLy8vIFdBUk46IFRoZSBvcmlnaW5hbCB3aXphcmQgcmV0YWlucyBvd25lcnNoaXAgb2YgYW55IHBhc3QgZmVlcwogICAgLy8vIGhlbGQgZm9yIHRoZW0gaW4gdGhlIGBmdW5kc2AgbWFwcGluZywgd2hpY2ggdGhleSBjYW4gc3RpbGwKICAgIC8vLyB3aXRoZHJhdy4gVGhleSBhbHNvIHJlbWFpbiB0b3BXaXphcmQgaW4gYW55IGV4aXN0aW5nIEtpbmdkb21zLgogICAgLy8vIFByb2R1Y2VzIGV2ZW50IFdpemFyZFJlcGxhY2VkRXZlbnQuCiAgICBmdW5jdGlvbiByZXBsYWNlV2l6YXJkKGFkZHJlc3MgX3JlcGxhY2VtZW50KSB7CiAgICAgICAgZXh0ZXJuYWxFbnRlcigpOwogICAgICAgIHJlcGxhY2VXaXphcmRSUChfcmVwbGFjZW1lbnQpOwogICAgICAgIGV4dGVybmFsTGVhdmUoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBVc2VkIGJ5IHRvcFdpemFyZCB0byB2YXJ5IHRoZSBmZWUgZm9yIGNyZWF0aW5nIGtpbmdkb21zLgogICAgZnVuY3Rpb24gc2V0S2luZ2RvbUNyZWF0aW9uRmVlV2VpKHVpbnQgX2tpbmdkb21DcmVhdGlvbkZlZVdlaSkgewogICAgICAgIGV4dGVybmFsRW50ZXIoKTsKICAgICAgICBzZXRLaW5nZG9tQ3JlYXRpb25GZWVXZWlSUChfa2luZ2RvbUNyZWF0aW9uRmVlV2VpKTsKICAgICAgICBleHRlcm5hbExlYXZlKCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgVXNlZCBieSB0b3BXaXphcmQgdG8gdmFyeSB0aGUgY2FwIG9uIGNsYWltIHByaWNlLgogICAgZnVuY3Rpb24gc2V0TWF4aW11bUNsYWltUHJpY2VXZWkodWludCBfbWF4aW11bUNsYWltUHJpY2VXZWkpIHsKICAgICAgICBleHRlcm5hbEVudGVyKCk7CiAgICAgICAgc2V0TWF4aW11bUNsYWltUHJpY2VXZWlSUChfbWF4aW11bUNsYWltUHJpY2VXZWkpOwogICAgICAgIGV4dGVybmFsTGVhdmUoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBVc2VkIGJ5IHRvcFdpemFyZCB0byB2YXJ5IHRoZSBmYWN0b3J5IGNvbnRyYWN0IHdoaWNoCiAgICAvLy8gd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBmdXR1cmUgS2luZ2RvbXMuCiAgICBmdW5jdGlvbiBzZXRLaW5nZG9tRmFjdG9yeShLaW5nZG9tRmFjdG9yeSBfa2luZ2RvbUZhY3RvcnkpIHsKICAgICAgICBleHRlcm5hbEVudGVyKCk7CiAgICAgICAgc2V0S2luZ2RvbUZhY3RvcnlSUChfa2luZ2RvbUZhY3RvcnkpOwogICAgICAgIGV4dGVybmFsTGVhdmUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVLaW5nZG9tUlAoCiAgICAgICAgc3RyaW5nIF9raW5nZG9tTmFtZSwKICAgICAgICB1aW50IF9zdGFydGluZ0NsYWltUHJpY2VXZWksCiAgICAgICAgdWludCBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQsCiAgICAgICAgdWludCBfY3Vyc2VJbmN1YmF0aW9uRHVyYXRpb25TZWNvbmRzLAogICAgICAgIHVpbnQgX2NvbW1pc3Npb25QZXJUaG91c2FuZAogICAgKSBpbnRlcm5hbCB7CgogICAgICAgIGFkZHJlc3Mgc3ViV2l6YXJkID0gbXNnLnNlbmRlcjsKCiAgICAgICAgaWYgKCF2YWxpZGF0ZU5hbWVJbnRlcm5hbChfa2luZ2RvbU5hbWUpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgdWludCBuZXdLaW5nZG9tTnVtYmVyID0ga2luZ2RvbXNCeU51bWJlci5sZW5ndGg7CiAgICAgICAgY2hlY2tVbmlxdWVBbmRSZWdpc3Rlck5ld0tpbmdkb21OYW1lKAogICAgICAgICAgICBfa2luZ2RvbU5hbWUsCiAgICAgICAgICAgIG5ld0tpbmdkb21OdW1iZXIKICAgICAgICApOwoKICAgICAgICB1aW50IHBhaWRXZWkgPSBtc2cudmFsdWU7CiAgICAgICAgaWYgKHBhaWRXZWkgPCBraW5nZG9tQ3JlYXRpb25GZWVXZWkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIC8vIE1ha2UgaXQgZWFzeSBmb3IgcGVvcGxlIHRvIHBheSB1c2luZyBhIHdob2xlIG51bWJlciBvZiBmaW5uZXksCiAgICAgICAgLy8gd2hpY2ggY291bGQgYmUgYSB0ZWVueSBiaXQgaGlnaGVyIHRoYW4gdGhlIHJhdyB3ZWkgdmFsdWUuCiAgICAgICAgdWludCBleGNlc3NXZWkgPSBwYWlkV2VpIC0ga2luZ2RvbUNyZWF0aW9uRmVlV2VpOwogICAgICAgIGlmIChleGNlc3NXZWkgPiAxIGZpbm5leSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgZnVuZHNbdG9wV2l6YXJkXSArPSBwYWlkV2VpOwogICAgICAgIAogICAgICAgIC8vIFRoaXMgd2lsbCBwZXJmb3JtIHJ1bGUgdmFsaWRhdGlvbi4KICAgICAgICBLaW5nZG9tIGtpbmdkb21Db250cmFjdCA9IGtpbmdkb21GYWN0b3J5LmNyZWF0ZUtpbmdkb20oCiAgICAgICAgICAgIF9raW5nZG9tTmFtZSwKICAgICAgICAgICAgYWRkcmVzcyh0aGlzKSwKICAgICAgICAgICAgdG9wV2l6YXJkLAogICAgICAgICAgICBzdWJXaXphcmQsCiAgICAgICAgICAgIF9zdGFydGluZ0NsYWltUHJpY2VXZWksCiAgICAgICAgICAgIG1heGltdW1DbGFpbVByaWNlV2VpLAogICAgICAgICAgICBfY2xhaW1QcmljZUFkanVzdFBlcmNlbnQsCiAgICAgICAgICAgIF9jdXJzZUluY3ViYXRpb25EdXJhdGlvblNlY29uZHMsCiAgICAgICAgICAgIF9jb21taXNzaW9uUGVyVGhvdXNhbmQKICAgICAgICApOwoKICAgICAgICBraW5nZG9tc0J5TnVtYmVyLnB1c2goS2luZ2RvbUxpc3RpbmcoCiAgICAgICAgICAgIG5ld0tpbmdkb21OdW1iZXIsCiAgICAgICAgICAgIF9raW5nZG9tTmFtZSwKICAgICAgICAgICAga2luZ2RvbUNvbnRyYWN0LAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBub3csCiAgICAgICAgICAgIGtpbmdkb21GYWN0b3J5CiAgICAgICAgKSk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVwbGFjZVdpemFyZFJQKGFkZHJlc3MgcmVwbGFjZW1lbnQpIGludGVybmFsIHsgCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gdG9wV2l6YXJkKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZiAobXNnLnZhbHVlICE9IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGFkZHJlc3Mgb2xkV2l6YXJkID0gdG9wV2l6YXJkOwogICAgICAgIHRvcFdpemFyZCA9IHJlcGxhY2VtZW50OwogICAgICAgIFdpemFyZFJlcGxhY2VkRXZlbnQob2xkV2l6YXJkLCByZXBsYWNlbWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0S2luZ2RvbUNyZWF0aW9uRmVlV2VpUlAodWludCBfa2luZ2RvbUNyZWF0aW9uRmVlV2VpKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gdG9wV2l6YXJkKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZiAobXNnLnZhbHVlICE9IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGtpbmdkb21DcmVhdGlvbkZlZVdlaSA9IF9raW5nZG9tQ3JlYXRpb25GZWVXZWk7CiAgICAgICAgQ3JlYXRpb25GZWVDaGFuZ2VkRXZlbnQoa2luZ2RvbUNyZWF0aW9uRmVlV2VpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNYXhpbXVtQ2xhaW1QcmljZVdlaVJQKHVpbnQgX21heGltdW1DbGFpbVByaWNlV2VpKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gdG9wV2l6YXJkKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZiAoX21heGltdW1DbGFpbVByaWNlV2VpIDwgMSBldGhlcikgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgbWF4aW11bUNsYWltUHJpY2VXZWkgPSBfbWF4aW11bUNsYWltUHJpY2VXZWk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0S2luZ2RvbUZhY3RvcnlSUChLaW5nZG9tRmFjdG9yeSBfa2luZ2RvbUZhY3RvcnkpIGludGVybmFsIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSB0b3BXaXphcmQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmIChtc2cudmFsdWUgIT0gMCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAga2luZ2RvbUZhY3RvcnkgPSBfa2luZ2RvbUZhY3Rvcnk7CiAgICAgICAgRmFjdG9yeUNoYW5nZWRFdmVudChraW5nZG9tRmFjdG9yeSk7CiAgICB9CgogICAgLy8gSWYgdGhlcmUgaXMgbm8gZXhpc3Rpbmcga2luZ2RvbSBjYWxsZWQgYF9raW5nZG9tTmFtZWAsIGNyZWF0ZQogICAgLy8gYSByZWNvcmQgbWFwcGluZyB0aGF0IG5hbWUgdG8ga2luZ2RvbSBuby4gYF9uZXdLaW5nZG9tTnVtYmVyYC4KICAgIC8vIFRocm93cyBhbiBlcnJvciBpZiBhbiBleGlzdGluZyBraW5nZG9tIHdpdGggdGhlIHNhbWUgKG9yCiAgICAvLyBmdXp6aWx5IHNpbWlsYXIgLSBzZWUgY29tcHV0ZU5hbWVGdXp6eUhhc2gpIG5hbWUgZXhpc3RzLgogICAgZnVuY3Rpb24gY2hlY2tVbmlxdWVBbmRSZWdpc3Rlck5ld0tpbmdkb21OYW1lKAogICAgICAgIHN0cmluZyBfa2luZ2RvbU5hbWUsCiAgICAgICAgdWludCBfbmV3S2luZ2RvbU51bWJlcgogICAgKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBmdXp6eUhhc2ggPSBjb21wdXRlTmFtZUZ1enp5SGFzaChfa2luZ2RvbU5hbWUpOwogICAgICAgIGlmIChraW5nZG9tTnVtYmVyc0J5ZnV6enlIYXNoW2Z1enp5SGFzaF0gIT0gMCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAga2luZ2RvbU51bWJlcnNCeWZ1enp5SGFzaFtmdXp6eUhhc2hdID0gX25ld0tpbmdkb21OdW1iZXI7CiAgICB9Cgp9CgoKLy8vIEB0aXRsZSBVc2VkIG9uIHRoZSB0ZXN0bmV0IHRvIGFsbG93IGF1dG9tYXRlZCB0ZXN0aW5nIG9mIGludGVybmFscy4KY29udHJhY3QgRXhwb3NlZEludGVybmFsc0ZvclRlc3RpbmcgaXMKICBNb25leVJvdW5kZXJNaXhpbiwgTmFtZWFibGVNaXhpbiB7CgogICAgZnVuY3Rpb24gcm91bmRNb25leURvd25OaWNlbHlFVCh1aW50IF9yYXdWYWx1ZVdlaSkgY29uc3RhbnQKICAgIHJldHVybnMgKHVpbnQgbmljZXJWYWx1ZVdlaSkgewogICAgICAgIHJldHVybiByb3VuZE1vbmV5RG93bk5pY2VseShfcmF3VmFsdWVXZWkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJvdW5kTW9uZXlVcFRvV2hvbGVGaW5uZXlFVCh1aW50IF92YWx1ZVdlaSkgY29uc3RhbnQKICAgIHJldHVybnMgKHVpbnQgdmFsdWVGaW5uZXkpIHsKICAgICAgICByZXR1cm4gcm91bmRNb25leVVwVG9XaG9sZUZpbm5leShfdmFsdWVXZWkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkYXRlTmFtZUludGVybmFsRVQoc3RyaW5nIF9uYW1lKSBjb25zdGFudAogICAgcmV0dXJucyAoYm9vbCBhbGxvd2VkKSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlTmFtZUludGVybmFsKF9uYW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBleHRyYWN0TmFtZUZyb21EYXRhRVQoYnl0ZXMgX2RhdGEpIGNvbnN0YW50CiAgICByZXR1cm5zIChzdHJpbmcgZXh0cmFjdGVkTmFtZSkgewogICAgICAgIHJldHVybiBleHRyYWN0TmFtZUZyb21EYXRhKF9kYXRhKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29tcHV0ZU5hbWVGdXp6eUhhc2hFVChzdHJpbmcgX25hbWUpIGNvbnN0YW50CiAgICByZXR1cm5zICh1aW50IGZ1enp5SGFzaCkgewogICAgICAgIHJldHVybiBjb21wdXRlTmFtZUZ1enp5SGFzaChfbmFtZSk7CiAgICB9Cgp9'.
	

]
