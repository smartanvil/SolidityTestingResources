Class {
	#name : #SRTe6766297571f8693adec94e5f8ef363d323e211d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe6766297571f8693adec94e5f8ef363d323e211d >> base64 [
	^ ''.
	

]
