Class {
	#name : #SRT9d1da8d08a10286402e289a8b5e9f865f2d14d2a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9d1da8d08a10286402e289a8b5e9f865f2d14d2a >> base64 [
	^ ''.
	

]
