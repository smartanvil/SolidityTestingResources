Class {
	#name : #SRTd2f7a3cbcc4aa43de3cd23f19bd5d9ce4524e135,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd2f7a3cbcc4aa43de3cd23f19bd5d9ce4524e135 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBTQVRVUk4gc3RyYXRlZ2ljIGV4Y2hhbmdlIHByb2dyYW0KCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgU3VidHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEVSQzIyMyB7CiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgZnVuY3Rpb24gbmFtZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBfbmFtZSk7CiAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpOwogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDggX2RlY2ltYWxzKTsKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3N1cHBseSk7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHJldHVybnMgKGJvb2wgb2spOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IEVSQzIyM1RyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKTsKfQoKY29udHJhY3QgQ29udHJhY3RSZWNlaXZlciB7CiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpOwp9Cgpjb250cmFjdCBFUkMyMjNUb2tlbiBpcyBFUkMyMjMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogIHN0cmluZyBwdWJsaWMgbmFtZTsKICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgoKICAvLyBGdW5jdGlvbiB0byBhY2Nlc3MgbmFtZSBvZiB0b2tlbiAuCiAgZnVuY3Rpb24gbmFtZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBfbmFtZSkgewogICAgICByZXR1cm4gbmFtZTsKICB9CiAgLy8gRnVuY3Rpb24gdG8gYWNjZXNzIHN5bWJvbCBvZiB0b2tlbiAuCiAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsKICAgICAgcmV0dXJuIHN5bWJvbDsKICB9CiAgLy8gRnVuY3Rpb24gdG8gYWNjZXNzIGRlY2ltYWxzIG9mIHRva2VuIC4KICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4IF9kZWNpbWFscykgewogICAgICByZXR1cm4gZGVjaW1hbHM7CiAgfQogIC8vIEZ1bmN0aW9uIHRvIGFjY2VzcyB0b3RhbCBzdXBwbHkgb2YgdG9rZW5zIC4KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KSB7CiAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICB9CgogIC8vIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB1c2VyIG9yIGFub3RoZXIgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMgLgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYoaXNDb250cmFjdChfdG8pKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyVG9Db250cmFjdChfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyVG9BZGRyZXNzKF90bywgX3ZhbHVlLCBfZGF0YSk7CiAgICB9Cn0KCiAgLy8gU3RhbmRhcmQgZnVuY3Rpb24gdHJhbnNmZXIgc2ltaWxhciB0byBFUkMyMCB0cmFuc2ZlciB3aXRoIG5vIF9kYXRhIC4KICAvLyBBZGRlZCBkdWUgdG8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucyAuCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAvL3N0YW5kYXJkIGZ1bmN0aW9uIHRyYW5zZmVyIHNpbWlsYXIgdG8gRVJDMjAgdHJhbnNmZXIgd2l0aCBubyBfZGF0YQogICAgLy9hZGRlZCBkdWUgdG8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucwogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgaWYoaXNDb250cmFjdChfdG8pKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyVG9Db250cmFjdChfdG8sIF92YWx1ZSwgZW1wdHkpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyVG9BZGRyZXNzKF90bywgX3ZhbHVlLCBlbXB0eSk7CiAgICB9Cn0KCi8vYXNzZW1ibGUgdGhlIGdpdmVuIGFkZHJlc3MgYnl0ZWNvZGUuIElmIGJ5dGVjb2RlIGV4aXN0cyB0aGVuIHRoZSBfYWRkciBpcyBhIGNvbnRyYWN0LgogIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgcHJpdmF0ZSByZXR1cm5zIChib29sIGlzX2NvbnRyYWN0KSB7CiAgICAgIHVpbnQgbGVuZ3RoOwogICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIC8vcmV0cmlldmUgdGhlIHNpemUgb2YgdGhlIGNvZGUgb24gdGFyZ2V0IGFkZHJlc3MsIHRoaXMgbmVlZHMgYXNzZW1ibHkKICAgICAgICAgICAgbGVuZ3RoIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICBpZihsZW5ndGg+MCkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogIC8vZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0cmFuc2FjdGlvbiB0YXJnZXQgaXMgYW4gYWRkcmVzcwogIGZ1bmN0aW9uIHRyYW5zZmVyVG9BZGRyZXNzKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZU9mKG1zZy5zZW5kZXIpIDwgX3ZhbHVlKSByZXZlcnQoKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mKG1zZy5zZW5kZXIpLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VPZihfdG8pLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgRVJDMjIzVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUsIF9kYXRhKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy9mdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRyYW5zYWN0aW9uIHRhcmdldCBpcyBhIGNvbnRyYWN0CiAgZnVuY3Rpb24gdHJhbnNmZXJUb0NvbnRyYWN0KGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZU9mKG1zZy5zZW5kZXIpIDwgX3ZhbHVlKSByZXZlcnQoKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mKG1zZy5zZW5kZXIpLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VPZihfdG8pLmFkZChfdmFsdWUpOwogICAgQ29udHJhY3RSZWNlaXZlciByZWNpZXZlciA9IENvbnRyYWN0UmVjZWl2ZXIoX3RvKTsKICAgIHJlY2lldmVyLnRva2VuRmFsbGJhY2sobXNnLnNlbmRlciwgX3ZhbHVlLCBfZGF0YSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICBFUkMyMjNUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KfQoKY29udHJhY3QgU2F0dXJuUHJlc2FsZSBpcyBDb250cmFjdFJlY2VpdmVyIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgYm9vbCAgICBwdWJsaWMgYWN0aXZlID0gZmFsc2U7CiAgYWRkcmVzcyBwdWJsaWMgdG9rZW5BZGRyZXNzOwogIHVpbnQyNTYgcHVibGljIGhhcmRDYXA7CiAgdWludDI1NiBwdWJsaWMgc29sZDsKCiAgc3RydWN0IE9yZGVyIHsKICAgIGFkZHJlc3Mgb3duZXI7CiAgICB1aW50MjU2IGFtb3VudDsKICAgIHVpbnQyNTYgbG9ja3VwOwogICAgYm9vbCAgICBjbGFpbWVkOwogIH0KCiAgbWFwcGluZyh1aW50MjU2ID0+IE9yZGVyKSBwcml2YXRlIG9yZGVyczsKICB1aW50MjU2IHByaXZhdGUgbGF0ZXN0T3JkZXJJZCA9IDA7CiAgYWRkcmVzcyBwcml2YXRlIG93bmVyOwogIGFkZHJlc3MgcHJpdmF0ZSB0cmVhc3VyeTsKCiAgZXZlbnQgQWN0aXZhdGVkKHVpbnQyNTYgdGltZSk7CiAgZXZlbnQgRmluaXNoZWQodWludDI1NiB0aW1lKTsKICBldmVudCBQdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCB1aW50MjU2IGlkLCB1aW50MjU2IGFtb3VudCwgdWludDI1NiBwdXJjaGFzZWRBdCwgdWludDI1NiByZWRlZW1BdCk7CiAgZXZlbnQgQ2xhaW0oYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgdWludDI1NiBpZCwgdWludDI1NiBhbW91bnQpOwoKICBmdW5jdGlvbiBTYXR1cm5QcmVzYWxlKGFkZHJlc3MgdG9rZW4sIGFkZHJlc3MgZXRoUmVjZXBpZW50LCB1aW50MjU2IHByZXNhbGVIYXJkQ2FwKSBwdWJsaWMgewogICAgdG9rZW5BZGRyZXNzICA9IHRva2VuOwogICAgb3duZXIgICAgICAgICA9IG1zZy5zZW5kZXI7CiAgICB0cmVhc3VyeSAgICAgID0gZXRoUmVjZXBpZW50OwogICAgaGFyZENhcCAgICAgICA9IHByZXNhbGVIYXJkQ2FwOwogIH0KCiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIC8qIF9mcm9tICovLCB1aW50IF92YWx1ZSwgYnl0ZXMgLyogX2RhdGEgKi8pIHB1YmxpYyB7CiAgICAvLyBBY2NlcHQgb25seSBTQVRVUk4gRVJDMjIzIHRva2VuCiAgICBpZiAobXNnLnNlbmRlciAhPSB0b2tlbkFkZHJlc3MpIHsgcmV2ZXJ0KCk7IH0KICAgIC8vIElmIHRoZSBQcmVzYWxlIGlzIGFjdGl2ZSBkbyBub3QgYWNjZXB0IGluY29taW5nIHRyYW5zYWN0aW9ucwogICAgaWYgKGFjdGl2ZSkgeyByZXZlcnQoKTsgfQogICAgLy8gT25seSBhY2NlcHQgb25lIHRyYW5zYWN0aW9uIG9mIHRoZSByaWdodCBhbW91bnQKICAgIGlmIChfdmFsdWUgIT0gaGFyZENhcCkgeyByZXZlcnQoKTsgfQoKICAgIGFjdGl2ZSA9IHRydWU7CiAgICBBY3RpdmF0ZWQobm93KTsKICB9CgogIGZ1bmN0aW9uIGFtb3VudE9mKHVpbnQyNTYgb3JkZXJJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYW1vdW50KSB7CiAgICByZXR1cm4gb3JkZXJzW29yZGVySWRdLmFtb3VudDsKICB9CgogIGZ1bmN0aW9uIGxvY2t1cE9mKHVpbnQyNTYgb3JkZXJJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgdGltZXN0YW1wKSB7CiAgICByZXR1cm4gb3JkZXJzW29yZGVySWRdLmxvY2t1cDsKICB9CgogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBvcmRlcklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcyBvcmRlck93bmVyKSB7CiAgICByZXR1cm4gb3JkZXJzW29yZGVySWRdLm93bmVyOwogIH0KCiAgZnVuY3Rpb24gaXNDbGFpbWVkKHVpbnQyNTYgb3JkZXJJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGJvb2wgY2xhaW1lZCkgewogICAgcmV0dXJuIG9yZGVyc1tvcmRlcklkXS5jbGFpbWVkOwogIH0KCiAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICByZXZlcnQoKTsKICB9CgogIGZ1bmN0aW9uIHNob3J0QnV5KCkgcHVibGljIHBheWFibGUgewogICAgLy8gMTAlIGJvbnVzCiAgICB1aW50MjU2IGxvY2t1cCA9IG5vdyArIDEyIHdlZWtzOwogICAgdWludDI1NiBwcmljZURpdiA9IDE4MTgxODE4MTg7CiAgICBwcm9jZXNzUHVyY2hhc2UocHJpY2VEaXYsIGxvY2t1cCk7CiAgfQoKICBmdW5jdGlvbiBtZWRpdW1CdXkoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAvLyAyNSUgYm9udXMKICAgIHVpbnQyNTYgbG9ja3VwID0gbm93ICsgMjQgd2Vla3M7CiAgICB1aW50MjU2IHByaWNlRGl2ID0gMTYwMDAwMDAwMDsKICAgIHByb2Nlc3NQdXJjaGFzZShwcmljZURpdiwgbG9ja3VwKTsKICB9CgogIGZ1bmN0aW9uIGxvbmdCdXkoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAvLyA1MCUgYm9udXMKICAgIHVpbnQyNTYgbG9ja3VwID0gbm93ICsgNTIgd2Vla3M7CiAgICB1aW50MjU2IHByaWNlRGl2ID0gMTMzMzMzMzMzMzsKICAgIHByb2Nlc3NQdXJjaGFzZShwcmljZURpdiwgbG9ja3VwKTsKICB9CgogIGZ1bmN0aW9uIHByb2Nlc3NQdXJjaGFzZSh1aW50MjU2IHByaWNlRGl2LCB1aW50MjU2IGxvY2t1cCkgcHJpdmF0ZSB7CiAgICBpZiAoIWFjdGl2ZSkgeyByZXZlcnQoKTsgfQogICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7IHJldmVydCgpOyB9CiAgICArK2xhdGVzdE9yZGVySWQ7CgogICAgdWludDI1NiBwdXJjaGFzZWRBbW91bnQgPSBtc2cudmFsdWUuZGl2KHByaWNlRGl2KTsKICAgIGlmIChwdXJjaGFzZWRBbW91bnQgPT0gMCkgeyByZXZlcnQoKTsgfSAvLyBub3QgZW5vdWdoIEVUSCBzZW50CiAgICBpZiAocHVyY2hhc2VkQW1vdW50ID4gaGFyZENhcCAtIHNvbGQpIHsgcmV2ZXJ0KCk7IH0gLy8gdG9vIG11Y2ggRVRIIHNlbnQKCiAgICBvcmRlcnNbbGF0ZXN0T3JkZXJJZF0gPSBPcmRlcihtc2cuc2VuZGVyLCBwdXJjaGFzZWRBbW91bnQsIGxvY2t1cCwgZmFsc2UpOwogICAgc29sZCArPSBwdXJjaGFzZWRBbW91bnQ7CgogICAgdHJlYXN1cnkudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIFB1cmNoYXNlKG1zZy5zZW5kZXIsIGxhdGVzdE9yZGVySWQsIHB1cmNoYXNlZEFtb3VudCwgbm93LCBsb2NrdXApOwogIH0KCiAgZnVuY3Rpb24gcmVkZWVtKHVpbnQyNTYgb3JkZXJJZCkgcHVibGljIHsKICAgIGlmIChvcmRlcklkID4gbGF0ZXN0T3JkZXJJZCkgeyByZXZlcnQoKTsgfQogICAgT3JkZXIgc3RvcmFnZSBvcmRlciA9IG9yZGVyc1tvcmRlcklkXTsKCiAgICAvLyBvbmx5IG93bmVyIGNhbiB3aXRoZHJhdwogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3JkZXIub3duZXIpIHsgcmV2ZXJ0KCk7IH0KICAgIGlmIChub3cgPCBvcmRlci5sb2NrdXApIHsgcmV2ZXJ0KCk7IH0KICAgIGlmIChvcmRlci5jbGFpbWVkKSB7IHJldmVydCgpOyB9CiAgICBvcmRlci5jbGFpbWVkID0gdHJ1ZTsKCiAgICBFUkMyMjMgdG9rZW4gPSBFUkMyMjModG9rZW5BZGRyZXNzKTsKICAgIHRva2VuLnRyYW5zZmVyKG9yZGVyLm93bmVyLCBvcmRlci5hbW91bnQpOwoKICAgIENsYWltKG9yZGVyLm93bmVyLCBvcmRlcklkLCBvcmRlci5hbW91bnQpOwogIH0KCiAgZnVuY3Rpb24gZW5kUHJlc2FsZSgpIHB1YmxpYyB7CiAgICAvLyBvbmx5IHRoZSBjcmVhdG9yIG9mIHRoZSBzbWFydCBjb250cmFjdAogICAgLy8gY2FuIGVuZCB0aGUgY3Jvd2RzYWxlIHByZW1hdHVyZWx5CiAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgeyByZXZlcnQoKTsgfQogICAgLy8gY2FuIG9ubHkgc3RvcCBhbiBhY3RpdmUgY3Jvd2RzYWxlCiAgICBpZiAoIWFjdGl2ZSkgeyByZXZlcnQoKTsgfQogICAgX2VuZCgpOwogIH0KCiAgZnVuY3Rpb24gX2VuZCgpIHByaXZhdGUgewogICAgLy8gaWYgdGhlcmUgYXJlIGFueSB0b2tlbnMgcmVtYWluaW5nIC0gcmV0dXJuIHRoZW0gdG8gdGhlIG93bmVyCiAgICBpZiAoc29sZCA8IGhhcmRDYXApIHsKICAgICAgRVJDMjIzIHRva2VuID0gRVJDMjIzKHRva2VuQWRkcmVzcyk7CiAgICAgIHRva2VuLnRyYW5zZmVyKHRyZWFzdXJ5LCBoYXJkQ2FwLnN1Yihzb2xkKSk7CiAgICB9CiAgICBhY3RpdmUgPSBmYWxzZTsKICAgIEZpbmlzaGVkKG5vdyk7CiAgfQp9'.
	

]
