Class {
	#name : #SRTA3dB4B373b39301f6e1fdF9167349636d693406b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA3dB4B373b39301f6e1fdF9167349636d693406b >> base64 [
	^ ''.
	

]
