Class {
	#name : #SRT158a96da5dcd1ade84ac11ac952683c0ee3516ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT158a96da5dcd1ade84ac11ac952683c0ee3516ab >> base64 [
	^ ''.
	

]
