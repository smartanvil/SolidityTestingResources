Class {
	#name : #SRTedc7378a93d782e382a2c76cc6bccfa4a723549b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTedc7378a93d782e382a2c76cc6bccfa4a723549b >> base64 [
	^ ''.
	

]
