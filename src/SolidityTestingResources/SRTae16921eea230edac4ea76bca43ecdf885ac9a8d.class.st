Class {
	#name : #SRTae16921eea230edac4ea76bca43ecdf885ac9a8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTae16921eea230edac4ea76bca43ecdf885ac9a8d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7Cgpjb250cmFjdCBTT05JQ1Rva2VuIHsKICAgIC8qIEVSQzIwIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHZlcnNpb24gPSAnU09OSUMgMC4xJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLyogRVJDMjAgVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgoKICAgIC8qIHN0b3JlIHRoZSBibG9jayBudW1iZXIgd2hlbiBhIHdpdGhkcmF3YWwgaGFzIGJlZW4gcmVxdWVzdGVkKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gd2l0aGRyYXdhbFJlcXVlc3QpIHB1YmxpYyB3aXRoZHJhd2FsUmVxdWVzdHM7CiAgICBzdHJ1Y3Qgd2l0aGRyYXdhbFJlcXVlc3QgewogICAgdWludCBzaW5jZVRpbWU7CiAgICB1aW50MjU2IGFtb3VudDsKICAgIH0KCiAgICAvKioKICAgICAqIGZlZVBvdCBjb2xsZWN0cyBmZWVzIGZyb20gcXVpY2sgd2l0aGRyYXdhbHMuIFRoaXMgZ2V0cyByZS1kaXN0cmlidXRlZCB0byBzbG93LXdpdGhkcmF3YWxzCiAgICAqLwogICAgdWludDI1NiBwdWJsaWMgZmVlUG90OwoKICAgIHVpbnQgcHVibGljIHRpbWVXYWl0ID0gMzAgZGF5czsKICAgLy8gdWludCBwdWJsaWMgdGltZVdhaXQgPSAxMCBtaW51dGVzOyAvLyB1bmNvbW1lbnQgZm9yIFRlc3ROZXQKCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbml0aWFsU3VwcGx5ID0gNjAwMDUwMDsKCiAgICAvKioKICAgICAqIEVSQzIwIGV2ZW50cyB0aGVzZSBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKICAgICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIGV2ZW50IFdpdGhkcmF3YWxRdWljayhhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IGZlZSk7IC8vIHF1aWNrIHdpdGhkcmF3YWwgZG9uZQogICAgZXZlbnQgSW5jb3JyZWN0RmVlKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludDI1NiBmZWVSZXF1aXJlZCk7ICAvLyBpbmNvcnJlY3QgZmVlIHBhaWQgZm9yIHF1aWNrIHdpdGhkcmF3YWwKICAgIGV2ZW50IFdpdGhkcmF3YWxTdGFydGVkKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgV2l0aGRyYXdhbERvbmUoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50MjU2IGFtb3VudCwgdWludDI1NiByZXdhcmQpOyAvLyBhbW91bnQgaXMgdGhlIGFtb3VudCB0aGF0IHdhcyB1c2VkIHRvIGNhbGN1bGF0ZSByZXdhcmQKICAgIGV2ZW50IFdpdGhkcmF3YWxQcmVtYXR1cmUoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50IHRpbWVUb1dhaXQpOyAvLyBOZWVkcyB0byB3YWl0IHRpbWVUb1dhaXQgYmVmb3JlIHdpdGhkcmF3YWwgdW5sb2NrZWQKICAgIGV2ZW50IERlcG9zaXRlZChhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvKioKICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICogSW4gb3VyIGNhc2UsIHRoZXJlJ3Mgbm8gaW5pdGlhbCBzdXBwbHkuIFRva2VucyB3aWxsIGJlIGNyZWF0ZWQgYXMgZXRoZXIgaXMgc2VudAogICAgICogdG8gdGhlIGZhbGwtYmFjayBmdW5jdGlvbi4gVGhlbiB0b2tlbnMgYXJlIGJ1cm5lZCB3aGVuIGV0aGVyIGlzIHdpdGhkcmF3bi4KICAgICAqLwogICAgZnVuY3Rpb24gU09OSUNUb2tlbigKICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICkgewoKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMgKDAgaW4gdGhpcyBjYXNlKQogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5ICgwIGluIHRoaXMgY2FzZSkKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgfQoKICAgIC8qKgogICAgICogbm90UGVuZGluZ1dpdGhkcmF3YWwgbW9kaWZpZXIgZ3VhcmRzIHRoZSBmdW5jdGlvbiBmcm9tIGV4ZWN1dGluZyB3aGVuIGEKICAgICAqIHdpdGhkcmF3YWwgaGFzIGJlZW4gcmVxdWVzdGVkIGFuZCBpcyBjdXJyZW50bHkgcGVuZGluZwogICAgICovCiAgICBtb2RpZmllciBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgaWYgKHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5zaW5jZVRpbWUgPiAwKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8qKiBFUkMyMCAtIHRyYW5zZmVyIHNlbmRzIHRva2VucwogICAgICogQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgICogQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAod2l0aGRyYXdhbFJlcXVlc3RzW190b10uc2luY2VUaW1lID4gMCkgdGhyb3c7ICAgIC8vIGNhbid0IG1vdmUgdG9rZW5zIHdoZW4gX3RvIGlzIHBlbmRpbmcgd2l0aGRyYXdhbAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgIH0KCiAgICAvKiogRVJDMjAgYXBwcm92ZSBhbGxvd3MgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZgogICAgICogQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBub3RQZW5kaW5nV2l0aGRyYXdhbAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93OwogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBtdXN0IHJldHVybiBhIGJvb2wgYXMgcGFydCBvZiB0aGUgRVJDMjAKICAgIH0KCgogICAgLyoqCiAgICAgKiBFUkMtMjAgQXBwcm92ZXMgYW5kIHRoZW4gY2FsbHMgdGhlIHJlY2VpdmluZyBjb250cmFjdAogICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBub3RQZW5kaW5nV2l0aGRyYXdhbAogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIGlmICghYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZighX3NwZW5kZXIuY2FsbChieXRlczQoYnl0ZXMzMihzaGEzKCJyZWNlaXZlQXBwcm92YWwoYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsYnl0ZXMpIikpKSwgbXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBFUkMyMCBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMuIE5vdGU6IFdlIGFyZSBub3QgYWxsb3dpbmcgYSB0cmFuc2ZlciBpZgogICAgICogZWl0aGVyIHRoZSBmcm9tIG9yIHRvIGFkZHJlc3MgaXMgcGVuZGluZyB3aXRoZHJhd2FsCiAgICAgKiBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gbm90ZSB0aGF0IHdlIGNhbid0IHVzZSBub3RQZW5kaW5nV2l0aGRyYXdhbCBtb2RpZmllciBoZXJlIHNpbmNlIHRoaXMgZnVuY3Rpb24gZG9lcyBhIHRyYW5zZmVyCiAgICAgICAgLy8gb24gdGhlIGJlaGFsZiBvZiBfZnJvbQogICAgICAgIGlmICh3aXRoZHJhd2FsUmVxdWVzdHNbX2Zyb21dLnNpbmNlVGltZSA+IDApIHRocm93OyAgIC8vIGNhbid0IG1vdmUgdG9rZW5zIHdoZW4gX2Zyb20gaXMgcGVuZGluZyB3aXRoZHJhd2FsCiAgICAgICAgaWYgKHdpdGhkcmF3YWxSZXF1ZXN0c1tfdG9dLnNpbmNlVGltZSA+IDApIHRocm93OyAgICAgLy8gY2FuJ3QgbW92ZSB0b2tlbnMgd2hlbiBfdG8gaXMgcGVuZGluZyB3aXRoZHJhd2FsCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIHdpdGhkcmF3YWxJbml0aWF0ZSBpbml0aWF0ZXMgdGhlIHdpdGhkcmF3YWwgYnkgZ29pbmcgaW50byBhIHdhaXRpbmcgcGVyaW9kCiAgICAgKiBJdCByZW1lbWJlcnMgdGhlIGJsb2NrIG51bWJlciAmIGFtb3VudCBoZWxkIGF0IHRoZSB0aW1lIG9mIHJlcXVlc3QuCiAgICAgKiBUb2tlbnMgY2Fubm90IGJlIG1vdmVkIG91dCBkdXJpbmcgdGhlIHdhaXRpbmcgcGVyaW9kLCBsb2NraW5nIHRoZSB0b2tlbnMgdW50aWwgdGhlbi4KICAgICAqIEFmdGVyIHRoZSB3YWl0aW5nIHBlcmlvZCBmaW5pc2hlcywgdGhlIGNhbGwgd2l0aGRyYXdhbENvbXBsZXRlCiAgICAgKgogICAgICogR2FzOiA2NDQ5MAogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdhbEluaXRpYXRlKCkgbm90UGVuZGluZ1dpdGhkcmF3YWwgewogICAgICAgIFdpdGhkcmF3YWxTdGFydGVkKG1zZy5zZW5kZXIsIGJhbGFuY2VPZlttc2cuc2VuZGVyXSk7CiAgICAgICAgd2l0aGRyYXdhbFJlcXVlc3RzW21zZy5zZW5kZXJdID0gd2l0aGRyYXdhbFJlcXVlc3Qobm93LCBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0pOwogICAgfQoKICAgIC8qKgogICAgICogd2l0aGRyYXdhbENvbXBsZXRlIGlzIGNhbGxlZCBhZnRlciB0aGUgd2FpdGluZyBwZXJpb2QuIFRoZSBldGhlciB3aWxsIGJlCiAgICAgKiByZXR1cm5lZCB0byB0aGUgY2FsbGVyIGFuZCB0aGUgdG9rZW5zIHdpbGwgYmUgYnVybmVkLgogICAgICogQSByZXdhcmQgd2lsbCBiZSBpc3N1ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgYW1vdW50IGluIHRoZSBmZWVQb3QsIHJlbGF0aXZlIHRvIHRoZQogICAgICogYW1vdW50IHRoYXQgd2FzIHJlcXVlc3RlZCBmb3Igd2l0aGRyYXdhbCB3aGVuIHdpdGhkcmF3YWxJbml0aWF0ZSgpIHdhcyBjYWxsZWQuCiAgICAgKgogICAgICogR2FzOiAzMDk0NgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd2FsQ29tcGxldGUoKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgd2l0aGRyYXdhbFJlcXVlc3QgciA9IHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXTsKICAgICAgICBpZiAoci5zaW5jZVRpbWUgPT0gMCkgdGhyb3c7CiAgICAgICAgaWYgKChyLnNpbmNlVGltZSArIHRpbWVXYWl0KSA+IG5vdykgewogICAgICAgICAgICAvLyBob2xkZXIgbmVlZHMgdG8gd2FpdCBzb21lIG1vcmUgYmxvY2tzCiAgICAgICAgICAgIFdpdGhkcmF3YWxQcmVtYXR1cmUobXNnLnNlbmRlciwgci5zaW5jZVRpbWUgKyB0aW1lV2FpdCAtIG5vdyk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBhbW91bnQgPSB3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0uYW1vdW50OwogICAgICAgIHVpbnQyNTYgcmV3YXJkID0gY2FsY3VsYXRlUmV3YXJkKHIuYW1vdW50KTsKICAgICAgICB3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0uc2luY2VUaW1lID0gMDsgICAvLyBUaGlzIHdpbGwgdW5sb2NrIHRoZSBob2xkZXJzIHRva2VucwogICAgICAgIHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5hbW91bnQgPSAwOyAgICAgIC8vIGNsZWFyIHRoZSBhbW91bnQgdGhhdCB3YXMgcmVxdWVzdGVkCgogICAgICAgIGlmIChyZXdhcmQgPiAwKSB7CiAgICAgICAgICAgIGlmIChmZWVQb3QgLSByZXdhcmQgPiBmZWVQb3QpIHsgICAgICAgICAgICAgLy8gdW5kZXJmbG93IGNoZWNrCiAgICAgICAgICAgICAgICBmZWVQb3QgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmVlUG90IC09IHJld2FyZDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBkb1dpdGhkcmF3YWwocmV3YXJkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBidXJuIHRoZSB0b2tlbnMgYW5kIHNlbmQgYmFjayB0aGUgZXRoZXIKICAgICAgICBXaXRoZHJhd2FsRG9uZShtc2cuc2VuZGVyLCBhbW91bnQsIHJld2FyZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgfQoKICAgIC8qKgogICAgICogUmV3YXJkIGlzIGJhc2VkIG9uIHRoZSBhbW91bnQgaGVsZCwgcmVsYXRpdmUgdG8gdG90YWwgc3VwcGx5IG9mIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlUmV3YXJkKHVpbnQyNTYgdikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgcmV3YXJkID0gMDsKICAgICAgICBpZiAoZmVlUG90ID4gMCkgewogICAgICAgICAgICByZXdhcmQgPSBmZWVQb3QgKiB2IC8gdG90YWxTdXBwbHk7IC8vIGFzc3VtaW5nIHRoYXQgaWYgZmVlUG90ID4gMCB0aGVuIGFsc28gdG90YWxTdXBwbHkgPiAwCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXdhcmQ7CiAgICB9CgogICAgLyoqIGNhbGN1bGF0ZSB0aGUgZmVlIGZvciBxdWljayB3aXRoZHJhd2FsCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUZlZSh1aW50MjU2IHYpIGNvbnN0YW50IHJldHVybnMgICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBmZWVSZXF1aXJlZCA9IHYgLyAxMDA7IC8vIDElCiAgICAgICAgcmV0dXJuIGZlZVJlcXVpcmVkOwogICAgfQoKICAgIC8qKgogICAgICogUXVpY2sgd2l0aGRyYXdhbCwgbmVlZHMgdG8gc2VuZCBldGhlciB0byB0aGlzIGZ1bmN0aW9uIGZvciB0aGUgZmVlLgogICAgICoKICAgICAqIEdhcyB1c2U6ID8gKGluY2x1ZGluZyBjYWxsIHRvIHByb2Nlc3NXaXRoZHJhd2FsKQogICAgKi8KICAgIGZ1bmN0aW9uIHF1aWNrV2l0aGRyYXcoKSBwYXlhYmxlIG5vdFBlbmRpbmdXaXRoZHJhd2FsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsKICAgICAgICBpZiAoYW1vdW50ID09IDApIHRocm93OwogICAgICAgIC8vIGNhbGN1bGF0ZSByZXF1aXJlZCBmZWUKICAgICAgICB1aW50MjU2IGZlZVJlcXVpcmVkID0gY2FsY3VsYXRlRmVlKGFtb3VudCk7CiAgICAgICAgaWYgKG1zZy52YWx1ZSAhPSBmZWVSZXF1aXJlZCkgewogICAgICAgICAgICBJbmNvcnJlY3RGZWUobXNnLnNlbmRlciwgZmVlUmVxdWlyZWQpOyAgIC8vIG5vdGlmeSB0aGUgZXhhY3QgZmVlIHRoYXQgbmVlZHMgdG8gYmUgc2VudAogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgZmVlUG90ICs9IG1zZy52YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGZlZSB0byB0aGUgZmVlUG90CiAgICAgICAgZG9XaXRoZHJhd2FsKDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aGRyYXcsIDAgcmV3YXJkCiAgICAgICAgV2l0aGRyYXdhbERvbmUobXNnLnNlbmRlciwgYW1vdW50LCAwKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIGRvIHdpdGhkcmF3YWwKICAgICAqLwogICAgZnVuY3Rpb24gZG9XaXRoZHJhd2FsKHVpbnQyNTYgZXh0cmEpIGludGVybmFsIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsKICAgICAgICBpZiAoYW1vdW50ID09IDApIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAvLyBjYW5ub3Qgd2l0aGRyYXcKICAgICAgICBpZiAoYW1vdW50ICsgZXh0cmEgPiB0aGlzLmJhbGFuY2UpIHsKICAgICAgICAgICAgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250cmFjdCBkb2Vzbid0IGhhdmUgZW5vdWdoIGJhbGFuY2UKICAgICAgICB9CgogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgaWYgKHRvdGFsU3VwcGx5IDwgdG90YWxTdXBwbHkgLSBhbW91bnQpIHsKICAgICAgICAgICAgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBsZXQgaXQgdW5kZXJmbG93IChzaG91bGQgbm90IGhhcHBlbiBzaW5jZSBhbW91bnQgPD0gdG90YWxTdXBwbHkpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG90YWxTdXBwbHkgLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAvLyBkZWZsYXRlIHRoZSBzdXBwbHkhCiAgICAgICAgfQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDAsIGFtb3VudCk7ICAgICAgICAgICAgIC8vIGJ1cm4gYmFieSBidXJuCiAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoYW1vdW50ICsgZXh0cmEpKSB0aHJvdzsgLy8gcmV0dXJuIGJhY2sgdGhlIGV0aGVyIG9yIHJvbGxiYWNrIGlmIGZhaWxlZAogICAgfQoKCiAgICAvKioKICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gc2VuZGluZyBldGhlciB0byB0aGUgY29udHJhY3QKICAgICAqIEdhcyB1c2U6IDY1MDUxCiAgICAqLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBub3RQZW5kaW5nV2l0aGRyYXdhbCB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7ICAgICAgICAgLy8gYW1vdW50IHRoYXQgd2FzIHNlbnQKICAgICAgICBpZiAoYW1vdW50ID09IDApIHRocm93OyAgICAgICAgICAgICAvLyBuZWVkIHRvIHNlbmQgc29tZSBFVEgKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OyAgICAvLyBtaW50IG5ldyB0b2tlbnMKICAgICAgICB0b3RhbFN1cHBseSArPSBhbW91bnQ7ICAgICAgICAgICAgICAvLyB0cmFjayB0aGUgc3VwcGx5CiAgICAgICAgVHJhbnNmZXIoMCwgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgLy8gbm90aWZ5IG9mIHRoZSBldmVudAogICAgICAgIERlcG9zaXRlZChtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgfQp9'.
	

]
