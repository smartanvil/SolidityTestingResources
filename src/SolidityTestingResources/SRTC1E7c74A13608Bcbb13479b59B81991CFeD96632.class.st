Class {
	#name : #SRTC1E7c74A13608Bcbb13479b59B81991CFeD96632,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC1E7c74A13608Bcbb13479b59B81991CFeD96632 >> base64 [
	^ ''.
	

]
