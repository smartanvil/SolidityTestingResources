Class {
	#name : #SRT3b26ba2b0ffd0bcb6fab0bbf185d7b0b78844c86,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b26ba2b0ffd0bcb6fab0bbf185d7b0b78844c86 >> base64 [
	^ ''.
	

]
