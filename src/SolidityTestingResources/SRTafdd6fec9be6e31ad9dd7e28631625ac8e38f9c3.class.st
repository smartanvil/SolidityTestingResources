Class {
	#name : #SRTafdd6fec9be6e31ad9dd7e28631625ac8e38f9c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTafdd6fec9be6e31ad9dd7e28631625ac8e38f9c3 >> base64 [
	^ ''.
	

]
