Class {
	#name : #SRT3b514e091f220c582a089fb8b8721b23646f2c79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b514e091f220c582a089fb8b8721b23646f2c79 >> base64 [
	^ ''.
	

]
