Class {
	#name : #SRT61645fba94c7443f5c29577a20670128d573ab87,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61645fba94c7443f5c29577a20670128d573ab87 >> base64 [
	^ ''.
	

]
