Class {
	#name : #SRTA1f87895550EAc6a8e9E4318466F482612a5986D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA1f87895550EAc6a8e9E4318466F482612a5986D >> base64 [
	^ ''.
	

]
