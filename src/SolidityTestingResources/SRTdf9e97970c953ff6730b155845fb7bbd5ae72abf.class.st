Class {
	#name : #SRTdf9e97970c953ff6730b155845fb7bbd5ae72abf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdf9e97970c953ff6730b155845fb7bbd5ae72abf >> base64 [
	^ ''.
	

]
