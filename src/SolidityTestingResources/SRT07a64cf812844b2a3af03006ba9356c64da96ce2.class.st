Class {
	#name : #SRT07a64cf812844b2a3af03006ba9356c64da96ce2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07a64cf812844b2a3af03006ba9356c64da96ce2 >> base64 [
	^ ''.
	

]
