Class {
	#name : #SRT501c17b26029f3a129fd9adeb4b642bd35a35248,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT501c17b26029f3a129fd9adeb4b642bd35a35248 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKiogU2FmZU1hdGggbGlicyBhcmUgaW5zcGlyZWQgYnk6CiAgKiAgaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9ibG9iL21hc3Rlci9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKICAqIFRoZXJlIGlzIGRlYmF0ZSBhcyB0byB3aGV0aGVyIHRoaXMgbGliIHNob3VsZCB1c2UgYXNzZXJ0IG9yIHJlcXVpcmU6CiAgKiAgaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvNTY1CgogICogYHJlcXVpcmVgIGlzIHVzZWQgaW4gdGhlc2UgbGlicmFyaWVzIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbnM6CiAgKiAgIC0gb3ZlcmZsb3dzIHNob3VsZCBub3QgYmUgY2hlY2tlZCBpbiBjb250cmFjdCBmdW5jdGlvbiBib2RpZXM7IERSWQogICogICAtICJ2YWxpZCIgdXNlciBpbnB1dCBjYW4gY2F1c2Ugb3ZlcmZsb3dzLCB3aGljaCBzaG91bGQgbm90IGFzc2VydCgpCiAgKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJlcXVpcmUoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKbGlicmFyeSBTYWZlTWF0aDY0IHsKICBmdW5jdGlvbiBzdWIodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQ2NCkgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50NjQpIHsKICAgIHVpbnQ2NCBjID0gYSArIGI7CiAgICByZXF1aXJlKGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovLyBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9vd25lcnNoaXAvT3duYWJsZS5zb2wKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQp9CgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMApjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvYmxvYi9tYXN0ZXIvY29udHJhY3RzL3Rva2VuL0RldGFpbGVkRVJDMjAuc29sCmNvbnRyYWN0IERldGFpbGVkRVJDMjAgaXMgRVJDMjAgewogIHN0cmluZyBwdWJsaWMgbmFtZTsKICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgogIGZ1bmN0aW9uIERldGFpbGVkRVJDMjAoc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWxzKSBwdWJsaWMgewogICAgbmFtZSA9IF9uYW1lOwogICAgc3ltYm9sID0gX3N5bWJvbDsKICAgIGRlY2ltYWxzID0gX2RlY2ltYWxzOwogIH0KfQoKCi8qKiBTb2xDbHViIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgKgogICogTWVtYmVyIENyZWF0aW9uOgogICogLSBTZWxmLXJlZ2lzdHJhdGlvbgogICogICAtIE93bmVyIHNpZ25zIGhhc2goYWRkcmVzcywgdXNlcm5hbWUsIGVuZG93bWVudCksIGFuZCBzZW5kcyB0byBtZW1iZXIKICAqICAgLSBNZW1iZXIgcmVnaXN0ZXJzIHdpdGggdXNlcm5hbWUsIGVuZG93bWVudCwgYW5kIHNpZ25hdHVyZSB0byBjcmVhdGUgbmV3IGFjY291bnQuCiAgKiAtIE1vZCBjcmVhdGVzIG5ldyBtZW1iZXIuCiAgKiAtIE1lbWJlcnMgYXJlIGZpcnN0IGVsaWdpYmxlIHRvIHdpdGhkcmF3IGRpdmlkZW5kcyBmb3IgdGhlIHBlcmlvZCBhZnRlciBhY2NvdW50IGNyZWF0aW9uLgogICoKICAqIEthcm1hL1Rva2VuIFJ1bGVzOgogICogLSBLYXJtYSBpcyBjcmVhdGVkIGJ5IGluaXRpYWwgbWVtYmVyIGNyZWF0aW9uIGVuZG93bWVudC4KICAqIC0gS2FybWEgY2FuIGFsc28gYmUgbWludGVkIGJ5IG1vZCBpbnRvIGFuIGV4aXN0aW5nIGFjY291bnQuCiAgKiAtIEthcm1hIGNhbiBvbmx5IGJlIHRyYW5zZmVycmVkIHRvIGV4aXN0aW5nIGFjY291bnQgaG9sZGVyLgogICogLSBLYXJtYSBpbXBsZW1lbnRzIHRoZSBFUkMyMCB0b2tlbiBpbnRlcmZhY2UuCiAgKgogICogRGl2aWRlbmRzOgogICogLSBlYWNoIG1lbWJlciBjYW4gd2l0aGRyYXcgYSBkaXZpZGVuZCBvbmNlIHBlciBtb250aC4KICAqIC0gZGl2aWRlbmQgaXMgdG90YWwgY29udHJhY3QgdmFsdWUgbWludXMgb3duZXIgY3V0IGF0IGVuZCBvZiB0aGUgbW9udGgsIGRpdmlkZWQgYnkgdG90YWwgbnVtYmVyIG9mIG1lbWJlcnMgYXQgZW5kIG9mIG1vbnRoLgogICogLSBvd25lciBjdXQgaXMgZGV0ZXJtaW5lZCBhdCBiZWdpbm5pbmcgb2YgbmV3IHBlcmlvZC4KICAqIC0gbWVtYmVyIGhhcyAxIG1vbnRoIHRvIHdpdGhkcmF3IHRoZWlyIGRpdmlkZW5kIGZyb20gdGhlIHByZXZpb3VzIG1vbnRoLgogICogLSBpZiBtZW1iZXIgZG9lcyBub3Qgd2l0aGRyYXcgdGhlaXIgZGl2aWRlbmQsIHRoZWlyIHNoYXJlIHdpbGwgYmUgZ2l2ZW4gdG8gb3duZXIuCiAgKiAtIG1vZCBjYW4gcGxhY2UgYSBtZW1iZXIgb24gYSAxIG1vbnRoICJ0aW1lb3V0Iiwgd2hlcmVieSB0aGV5IHdvbid0IGJlIGVsaWdpYmxlIGZvciBhIGRpdmlkZW5kLgoKICAqIEVnOiAxMCBldGggaXMgc2VudCB0byB0aGUgY29udHJhY3QgaW4gSmFudWFyeSwgb3duZXIgY3V0IGlzIDMwJS4gCiAgKiBUaGVyZSBhcmUgNzAgdG9rZW4gaG9sZGVycyBvbiBKYW4gMzEuIEF0IGFueSB0aW1lIGluIEZlYnJ1YXJ5LCBlYWNoIHRva2VuIGhvbGRlciBjYW4gd2l0aGRyYXcgLjEgZXRoIGZvciB0aGVpciBKYW51YXJ5IAogICogZGl2aWRlbmQgKHVubGVzcyB0aGV5IHdlcmUgZ2l2ZW4gYSAidGltZW91dCIgaW4gSmFudWFyeSkuCiAgKi8KY29udHJhY3QgU29sQ2x1YiBpcyBPd25hYmxlLCBEZXRhaWxlZEVSQzIwKCJTb2xDbHViIiwgIlNPTCIsIDApIHsKICAvLyBTYWZlTWF0aCBsaWJzIGFyZSByZXNwb25zaWJsZSBmb3IgY2hlY2tpbmcgb3ZlcmZsb3cuCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgdXNpbmcgU2FmZU1hdGg2NCBmb3IgdWludDY0OwoKICBzdHJ1Y3QgTWVtYmVyIHsKICAgIGJ5dGVzMjAgdXNlcm5hbWU7CiAgICB1aW50NjQga2FybWE7IAogICAgdWludDE2IGNhbldpdGhkcmF3UGVyaW9kOwogICAgdWludDE2IGJpcnRoUGVyaW9kOwogIH0KCiAgLy8gTWFuYWdlIG1lbWJlcnMuCiAgbWFwcGluZyhhZGRyZXNzID0+IE1lbWJlcikgcHVibGljIG1lbWJlcnM7CiAgbWFwcGluZyhieXRlczIwID0+IGFkZHJlc3MpIHB1YmxpYyB1c2VybmFtZXM7CgogIC8vIE1hbmFnZSBkaXZpZGVuZCBwYXltZW50cy4KICB1aW50MjU2IHB1YmxpYyBlcG9jaDsgLy8gVGltZXN0YW1wIGF0IHN0YXJ0IG9mIG5ldyBwZXJpb2QuCiAgdWludDI1NiBkaXZpZGVuZFBvb2w7IC8vIFRvdGFsIGFtb3VudCBvZiBkaXZpZGVuZHMgdG8gcGF5IG91dCBmb3IgbGFzdCBwZXJpb2QuCiAgdWludDI1NiBwdWJsaWMgZGl2aWRlbmQ7IC8vIFBlci1tZW1iZXIgc2hhcmUgb2YgbGFzdCBwZXJpb2QncyBkaXZpZGVuZC4KICB1aW50MjU2IHB1YmxpYyBvd25lckN1dDsgLy8gUGVyY2VudGFnZSwgaW4gYmFzaXMgcG9pbnRzLCBvZiBvd25lciBjdXQgb2YgdGhpcyBwZXJpb2QncyBwYXltZW50cy4KICB1aW50NjQgcHVibGljIG51bU1lbWJlcnM7IC8vIE51bWJlciBvZiBtZW1iZXJzIGNyZWF0ZWQgYmVmb3JlIHRoaXMgcGVyaW9kLgogIHVpbnQ2NCBwdWJsaWMgbmV3TWVtYmVyczsgLy8gTnVtYmVyIG9mIG1lbWJlcnMgY3JlYXRlZCBkdXJpbmcgdGhpcyBwZXJpb2QuCiAgdWludDE2IHB1YmxpYyBjdXJyZW50UGVyaW9kID0gMTsKCiAgYWRkcmVzcyBwdWJsaWMgbW9kZXJhdG9yOwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCiAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICBldmVudCBQZXJpb2RFbmQodWludDE2IHBlcmlvZCwgdWludDI1NiBhbW91bnQsIHVpbnQ2NCBtZW1iZXJzKTsKICBldmVudCBQYXltZW50KGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgV2l0aGRyYXdhbChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQxNiBpbmRleGVkIHBlcmlvZCwgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE5ld01lbWJlcihhZGRyZXNzIGluZGV4ZWQgYWRkciwgYnl0ZXMyMCB1c2VybmFtZSwgdWludDY0IGVuZG93bWVudCk7CiAgZXZlbnQgUmVtb3ZlZE1lbWJlcihhZGRyZXNzIGluZGV4ZWQgYWRkciwgYnl0ZXMyMCB1c2VybmFtZSwgdWludDY0IGthcm1hLCBieXRlczMyIHJlYXNvbik7CgogIG1vZGlmaWVyIG9ubHlNb2QoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbW9kZXJhdG9yKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBTb2xDbHViKCkgcHVibGljIHsKICAgIGVwb2NoID0gbm93OwogICAgbW9kZXJhdG9yID0gbXNnLnNlbmRlcjsKICB9CgogIGZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewogICAgUGF5bWVudChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogIH0KCiAgLyoqIAogICAqIE93bmVyIEZ1bmN0aW9ucyAKICAgKi8KCiAgZnVuY3Rpb24gc2V0TW9kKGFkZHJlc3MgX25ld01vZCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtb2RlcmF0b3IgPSBfbmV3TW9kOwogIH0KCiAgLy8gT3duZXIgc2hvdWxkIGNhbGwgdGhpcyBvbiB0d2ljZSBhIG1vbnRoLgogIC8vIF9vd25lckN1dCBpcyBuZXcgb3duZXIgY3V0IGZvciBuZXcgcGVyaW9kLgogIGZ1bmN0aW9uIG5ld1BlcmlvZCh1aW50MjU2IF9vd25lckN1dCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5vdyA+PSBlcG9jaCArIDE1IGRheXMpOwogICAgcmVxdWlyZShfb3duZXJDdXQgPD0gMTAwMDApOwoKICAgIHVpbnQyNTYgdW5jbGFpbWVkRGl2aWRlbmQgPSBkaXZpZGVuZFBvb2w7CiAgICB1aW50MjU2IG93bmVyUmFrZSA9IChhZGRyZXNzKHRoaXMpLmJhbGFuY2UtdW5jbGFpbWVkRGl2aWRlbmQpICogb3duZXJDdXQgLyAxMDAwMDsKCiAgICBkaXZpZGVuZFBvb2wgPSBhZGRyZXNzKHRoaXMpLmJhbGFuY2UgLSB1bmNsYWltZWREaXZpZGVuZCAtIG93bmVyUmFrZTsKCiAgICAvLyBDYWxjdWxhdGUgZGl2aWRlbmQuCiAgICB1aW50NjQgZXhpc3RpbmdNZW1iZXJzID0gbnVtTWVtYmVyczsKICAgIGlmIChleGlzdGluZ01lbWJlcnMgPT0gMCkgewogICAgICBkaXZpZGVuZCA9IDA7CiAgICB9IGVsc2UgewogICAgICBkaXZpZGVuZCA9IGRpdmlkZW5kUG9vbCAvIGV4aXN0aW5nTWVtYmVyczsKICAgIH0KCiAgICBudW1NZW1iZXJzID0gbnVtTWVtYmVycy5hZGQobmV3TWVtYmVycyk7CiAgICBuZXdNZW1iZXJzID0gMDsKICAgIGN1cnJlbnRQZXJpb2QrKzsKICAgIGVwb2NoID0gbm93OwogICAgb3duZXJDdXQgPSBfb3duZXJDdXQ7CgogICAgbXNnLnNlbmRlci50cmFuc2Zlcihvd25lclJha2UgKyB1bmNsYWltZWREaXZpZGVuZCk7CiAgICBQZXJpb2RFbmQoY3VycmVudFBlcmlvZC0xLCB0aGlzLmJhbGFuY2UsIGV4aXN0aW5nTWVtYmVycyk7CiAgfQoKICAvLyBQbGFjZXMgbWVtYmVyIGlzIGEgImJhbmlzaGVkIiBzdGF0ZSB3aGVyZWJ5IHRoZXkgYXJlIG5vIGxvbmdlciBhIG1lbWJlciwKICAvLyBidXQgdGhlaXIgdXNlcm5hbWUgcmVtYWlucyBhY3RpdmUgKHByZXZlbnRpbmcgcmUtcmVnaXN0cmF0aW9uKQogIGZ1bmN0aW9uIHJlbW92ZU1lbWJlcihhZGRyZXNzIF9hZGRyLCBieXRlczMyIF9yZWFzb24pIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShtZW1iZXJzW19hZGRyXS5iaXJ0aFBlcmlvZCAhPSAwKTsKICAgIE1lbWJlciBtZW1vcnkgbSA9IG1lbWJlcnNbX2FkZHJdOwoKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKG0ua2FybWEpOwogICAgaWYgKG0uYmlydGhQZXJpb2QgPT0gY3VycmVudFBlcmlvZCkgewogICAgICBuZXdNZW1iZXJzLS07CiAgICB9IGVsc2UgewogICAgICBudW1NZW1iZXJzLS07CiAgICB9CgogICAgLy8gIkJ1cm5zIiB1c2VybmFtZSwgc28gdXNlciBjYW4ndCByZWNyZWF0ZS4KICAgIHVzZXJuYW1lc1ttLnVzZXJuYW1lXSA9IGFkZHJlc3MoMHgxKTsKCiAgICBkZWxldGUgbWVtYmVyc1tfYWRkcl07CiAgICBSZW1vdmVkTWVtYmVyKF9hZGRyLCBtLnVzZXJuYW1lLCBtLmthcm1hLCBfcmVhc29uKTsKICB9CgogIC8vIFBsYWNlIGEgdXNlcm5hbWUgYmFjayBpbnRvIGNpcmN1bGF0aW9uIGZvciByZS1yZWdpc3RyYXRpb24uCiAgZnVuY3Rpb24gZGVsZXRlVXNlcm5hbWUoYnl0ZXMyMCBfdXNlcm5hbWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSh1c2VybmFtZXNbX3VzZXJuYW1lXSA9PSBhZGRyZXNzKDB4MSkpOwogICAgZGVsZXRlIHVzZXJuYW1lc1tfdXNlcm5hbWVdOwogIH0KCiAgLyoqCiAgICAqIE1vZCBGdW5jdGlvbnMKICAgICovCgogIGZ1bmN0aW9uIGNyZWF0ZU1lbWJlcihhZGRyZXNzIF9hZGRyLCBieXRlczIwIF91c2VybmFtZSwgdWludDY0IF9hbW91bnQpIHB1YmxpYyBvbmx5TW9kIHsKICAgIG5ld01lbWJlcihfYWRkciwgX3VzZXJuYW1lLCBfYW1vdW50KTsKICB9CgogIC8vIFNlbmQga2FybWEgdG8gZXhpc3RpbmcgYWNjb3VudC4KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX2FkZHIsIHVpbnQ2NCBfYW1vdW50KSBwdWJsaWMgb25seU1vZCB7CiAgICByZXF1aXJlKG1lbWJlcnNbX2FkZHJdLmNhbldpdGhkcmF3UGVyaW9kICE9IDApOwoKICAgIG1lbWJlcnNbX2FkZHJdLmthcm1hID0gbWVtYmVyc1tfYWRkcl0ua2FybWEuYWRkKF9hbW91bnQpOwogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF9hZGRyLCBfYW1vdW50KTsKICB9CgogIC8vIElmIGEgbWVtYmVyIGhhcyBiZWVuIGJhZCwgdGhleSB3b24ndCBiZSBhYmxlIHRvIHJlY2VpdmUgYSBkaXZpZGVuZCA6KAogIGZ1bmN0aW9uIHRpbWVvdXQoYWRkcmVzcyBfYWRkcikgcHVibGljIG9ubHlNb2QgewogICAgcmVxdWlyZShtZW1iZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCAhPSAwKTsKCiAgICBtZW1iZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCA9IGN1cnJlbnRQZXJpb2QgKyAxOwogIH0KCiAgLyoqCiAgICAqIE1lbWJlciBGdW5jdGlvbnMKICAgICovCgogIC8vIE93bmVyIHdpbGwgc2lnbiBoYXNoKGFkZHJlc3MsIHVzZXJuYW1lLCBhbW91bnQpLCBhbmQgYWRkcmVzcyBvd25lciB1c2VzIHRoaXMgCiAgLy8gc2lnbmF0dXJlIHRvIHJlZ2lzdGVyIHRoZWlyIGFjY291bnQuCiAgZnVuY3Rpb24gcmVnaXN0ZXIoYnl0ZXMyMCBfdXNlcm5hbWUsIHVpbnQ2NCBfZW5kb3dtZW50LCBieXRlcyBfc2lnKSBwdWJsaWMgewogICAgcmVxdWlyZShyZWNvdmVyKGtlY2NhazI1Nihtc2cuc2VuZGVyLCBfdXNlcm5hbWUsIF9lbmRvd21lbnQpLCBfc2lnKSA9PSBvd25lcik7CiAgICBuZXdNZW1iZXIobXNnLnNlbmRlciwgX3VzZXJuYW1lLCBfZW5kb3dtZW50KTsKICB9CgogIC8vIE1lbWJlciBjYW4gd2l0aGRyYXcgdGhlaXIgc2hhcmUgb2YgZG9uYXRpb25zIGZyb20gdGhlIHByZXZpb3VzIG1vbnRoLgogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHsKICAgIHJlcXVpcmUobWVtYmVyc1ttc2cuc2VuZGVyXS5jYW5XaXRoZHJhd1BlcmlvZCAhPSAwKTsKICAgIHJlcXVpcmUobWVtYmVyc1ttc2cuc2VuZGVyXS5jYW5XaXRoZHJhd1BlcmlvZCA8IGN1cnJlbnRQZXJpb2QpOwoKICAgIG1lbWJlcnNbbXNnLnNlbmRlcl0uY2FuV2l0aGRyYXdQZXJpb2QgPSBjdXJyZW50UGVyaW9kOwogICAgZGl2aWRlbmRQb29sIC09IGRpdmlkZW5kOwogICAgbXNnLnNlbmRlci50cmFuc2ZlcihkaXZpZGVuZCk7CiAgICBXaXRoZHJhd2FsKG1zZy5zZW5kZXIsIGN1cnJlbnRQZXJpb2QtMSwgZGl2aWRlbmQpOwogIH0KCiAgLyoqCiAgICAqIEVSQzIwIEZ1bmN0aW9ucwogICAgKi8KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBtZW1iZXJzW19vd25lcl0ua2FybWE7CiAgfQoKICAvLyBDb250cmFyeSB0byBtb3N0IEVSQzIwIGltcGxlbWVudGF0aW9ucywgcmVxdWlyZSB0aGF0IHJlY2lwaWVudCBpcyBleGlzdGluZyBtZW1iZXIuCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShtZW1iZXJzW190b10uY2FuV2l0aGRyYXdQZXJpb2QgIT0gMCk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBtZW1iZXJzW21zZy5zZW5kZXJdLmthcm1hKTsKCiAgICAvLyBUeXBlIGFzc2VydGlvbiB0byB1aW50NjQgaXMgc2FmZSBiZWNhdXNlIHdlIHJlcXVpcmUgdGhhdCBfdmFsdWUgaXMgPCB1aW50NjQgYWJvdmUuCiAgICBtZW1iZXJzW21zZy5zZW5kZXJdLmthcm1hID0gbWVtYmVyc1ttc2cuc2VuZGVyXS5rYXJtYS5zdWIodWludDY0KF92YWx1ZSkpOwogICAgbWVtYmVyc1tfdG9dLmthcm1hID0gbWVtYmVyc1tfdG9dLmthcm1hLmFkZCh1aW50NjQoX3ZhbHVlKSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gQ29udHJhcnkgdG8gbW9zdCBFUkMyMCBpbXBsZW1lbnRhdGlvbnMsIHJlcXVpcmUgdGhhdCByZWNpcGllbnQgaXMgZXhpc3RpbmcgbWVtYmVyLgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKG1lbWJlcnNbX3RvXS5jYW5XaXRoZHJhd1BlcmlvZCAhPSAwKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IG1lbWJlcnNbX2Zyb21dLmthcm1hKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBtZW1iZXJzW19mcm9tXS5rYXJtYSA9IG1lbWJlcnNbX2Zyb21dLmthcm1hLnN1Yih1aW50NjQoX3ZhbHVlKSk7CiAgICBtZW1iZXJzW190b10ua2FybWEgPSBtZW1iZXJzW190b10ua2FybWEuYWRkKHVpbnQ2NChfdmFsdWUpKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgICogUHJpdmF0ZSBGdW5jdGlvbnMKICAgICovCgogIC8vIEVuc3VyZXMgdGhhdCB1c2VybmFtZSBpc24ndCB0YWtlbiwgYW5kIGFjY291bnQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IGZvcgogIC8vIG1lbWJlcidzIGFkZHJlc3MuCiAgZnVuY3Rpb24gbmV3TWVtYmVyKGFkZHJlc3MgX2FkZHIsIGJ5dGVzMjAgX3VzZXJuYW1lLCB1aW50NjQgX2VuZG93bWVudCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKHVzZXJuYW1lc1tfdXNlcm5hbWVdID09IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShtZW1iZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCA9PSAwKTsKCiAgICBtZW1iZXJzW19hZGRyXS5jYW5XaXRoZHJhd1BlcmlvZCA9IGN1cnJlbnRQZXJpb2QgKyAxOwogICAgbWVtYmVyc1tfYWRkcl0uYmlydGhQZXJpb2QgPSBjdXJyZW50UGVyaW9kOwogICAgbWVtYmVyc1tfYWRkcl0ua2FybWEgPSBfZW5kb3dtZW50OwogICAgbWVtYmVyc1tfYWRkcl0udXNlcm5hbWUgPSBfdXNlcm5hbWU7CiAgICB1c2VybmFtZXNbX3VzZXJuYW1lXSA9IF9hZGRyOwoKICAgIG5ld01lbWJlcnMgPSBuZXdNZW1iZXJzLmFkZCgxKTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9lbmRvd21lbnQpOwogICAgTmV3TWVtYmVyKF9hZGRyLCBfdXNlcm5hbWUsIF9lbmRvd21lbnQpOwogIH0KCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9ibG9iL21hc3Rlci9jb250cmFjdHMvRUNSZWNvdmVyeS5zb2wKICBmdW5jdGlvbiByZWNvdmVyKGJ5dGVzMzIgaGFzaCwgYnl0ZXMgc2lnKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGFkZHJlc3MpIHsKICAgIGJ5dGVzMzIgcjsKICAgIGJ5dGVzMzIgczsKICAgIHVpbnQ4IHY7CgogICAgLy9DaGVjayB0aGUgc2lnbmF0dXJlIGxlbmd0aAogICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpIHsKICAgICAgcmV0dXJuIChhZGRyZXNzKDApKTsKICAgIH0KCiAgICAvLyBEaXZpZGUgdGhlIHNpZ25hdHVyZSBpbiByLCBzIGFuZCB2IHZhcmlhYmxlcwogICAgYXNzZW1ibHkgewogICAgICByIDo9IG1sb2FkKGFkZChzaWcsIDMyKSkKICAgICAgcyA6PSBtbG9hZChhZGQoc2lnLCA2NCkpCiAgICAgIHYgOj0gYnl0ZSgwLCBtbG9hZChhZGQoc2lnLCA5NikpKQogICAgfQoKICAgIC8vIFZlcnNpb24gb2Ygc2lnbmF0dXJlIHNob3VsZCBiZSAyNyBvciAyOCwgYnV0IDAgYW5kIDEgYXJlIGFsc28gcG9zc2libGUgdmVyc2lvbnMKICAgIGlmICh2IDwgMjcpIHsKICAgICAgdiArPSAyNzsKICAgIH0KCiAgICAvLyBJZiB0aGUgdmVyc2lvbiBpcyBjb3JyZWN0IHJldHVybiB0aGUgc2lnbmVyIGFkZHJlc3MKICAgIGlmICh2ICE9IDI3ICYmIHYgIT0gMjgpIHsKICAgICAgcmV0dXJuIChhZGRyZXNzKDApKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBlY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7CiAgICB9CiAgfQp9'.
	

]
