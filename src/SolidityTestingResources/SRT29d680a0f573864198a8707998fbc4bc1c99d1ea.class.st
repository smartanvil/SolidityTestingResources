Class {
	#name : #SRT29d680a0f573864198a8707998fbc4bc1c99d1ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29d680a0f573864198a8707998fbc4bc1c99d1ea >> base64 [
	^ ''.
	

]
