Class {
	#name : #SRTfa22ca18b762b19d5f52c46ed95e22b17302d119,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa22ca18b762b19d5f52c46ed95e22b17302d119 >> base64 [
	^ ''.
	

]
