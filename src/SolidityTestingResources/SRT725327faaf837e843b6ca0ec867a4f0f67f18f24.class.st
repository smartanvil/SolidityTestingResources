Class {
	#name : #SRT725327faaf837e843b6ca0ec867a4f0f67f18f24,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT725327faaf837e843b6ca0ec867a4f0f67f18f24 >> base64 [
	^ ''.
	

]
