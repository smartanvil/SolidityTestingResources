Class {
	#name : #SRT930ba3ca7ed61e59f9c1833dcff1866257150443,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT930ba3ca7ed61e59f9c1833dcff1866257150443 >> base64 [
	^ 'Y29udHJhY3QgTXVsdGlTaWdXYWxsZXQgewoKICAgIC8qCiAgICAgKiAgRXZlbnRzCiAgICAgKi8KICAgIGV2ZW50IENvbmZpcm1hdGlvbihhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IGluZGV4ZWQgdHJhbnNhY3Rpb25JZCk7CiAgICBldmVudCBSZXZvY2F0aW9uKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IFN1Ym1pc3Npb24odWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwogICAgZXZlbnQgRXhlY3V0aW9uKHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IEV4ZWN1dGlvbkZhaWx1cmUodWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwogICAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IE93bmVyQWRkaXRpb24oYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIpOwogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2UodWludCByZXF1aXJlZCk7CgogICAgLyoKICAgICAqICBDb25zdGFudHMKICAgICAqLwogICAgdWludCBjb25zdGFudCBwdWJsaWMgTUFYX09XTkVSX0NPVU5UID0gNTA7CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIG1hcHBpbmcgKHVpbnQgPT4gVHJhbnNhY3Rpb24pIHB1YmxpYyB0cmFuc2FjdGlvbnM7CiAgICBtYXBwaW5nICh1aW50ID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkpIHB1YmxpYyBjb25maXJtYXRpb25zOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNPd25lcjsKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJzOwogICAgdWludCBwdWJsaWMgcmVxdWlyZWQ7CiAgICB1aW50IHB1YmxpYyB0cmFuc2FjdGlvbkNvdW50OwoKICAgIHN0cnVjdCBUcmFuc2FjdGlvbiB7CiAgICAgICAgYWRkcmVzcyBkZXN0aW5hdGlvbjsKICAgICAgICB1aW50IHZhbHVlOwogICAgICAgIGJ5dGVzIGRhdGE7CiAgICAgICAgYm9vbCBleGVjdXRlZDsKICAgIH0KCiAgICAvKgogICAgICogIE1vZGlmaWVycwogICAgICovCiAgICBtb2RpZmllciBvbmx5V2FsbGV0KCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGFkZHJlc3ModGhpcykpCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb3duZXJEb2VzTm90RXhpc3QoYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmIChpc093bmVyW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvd25lckV4aXN0cyhhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgaWYgKCFpc093bmVyW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB0cmFuc2FjdGlvbkV4aXN0cyh1aW50IHRyYW5zYWN0aW9uSWQpIHsKICAgICAgICBpZiAodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdLmRlc3RpbmF0aW9uID09IDApCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmICghY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcl0pCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90Q29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RFeGVjdXRlZCh1aW50IHRyYW5zYWN0aW9uSWQpIHsKICAgICAgICBpZiAodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdLmV4ZWN1dGVkKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdE51bGwoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIGlmIChfYWRkcmVzcyA9PSAwKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHZhbGlkUmVxdWlyZW1lbnQodWludCBvd25lckNvdW50LCB1aW50IF9yZXF1aXJlZCkgewogICAgICAgIGlmICggICBvd25lckNvdW50ID4gTUFYX09XTkVSX0NPVU5UCiAgICAgICAgICAgIHx8IF9yZXF1aXJlZCA+IG93bmVyQ291bnQKICAgICAgICAgICAgfHwgX3JlcXVpcmVkID09IDAKICAgICAgICAgICAgfHwgb3duZXJDb3VudCA9PSAwKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uIGFsbG93cyB0byBkZXBvc2l0IGV0aGVyLgogICAgZnVuY3Rpb24oKQogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIC8qCiAgICAgKiBQdWJsaWMgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIHNldHMgaW5pdGlhbCBvd25lcnMgYW5kIHJlcXVpcmVkIG51bWJlciBvZiBjb25maXJtYXRpb25zLgogICAgLy8vIEBwYXJhbSBfb3duZXJzIExpc3Qgb2YgaW5pdGlhbCBvd25lcnMuCiAgICAvLy8gQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4KICAgIGZ1bmN0aW9uIE11bHRpU2lnV2FsbGV0KGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9yZXF1aXJlZCkKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZFJlcXVpcmVtZW50KF9vd25lcnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxfb3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpc093bmVyW19vd25lcnNbaV1dIHx8IF9vd25lcnNbaV0gPT0gMCkKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICBpc093bmVyW19vd25lcnNbaV1dID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgb3duZXJzID0gX293bmVyczsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBvd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgb3duZXJEb2VzTm90RXhpc3Qob3duZXIpCiAgICAgICAgbm90TnVsbChvd25lcikKICAgICAgICB2YWxpZFJlcXVpcmVtZW50KG93bmVycy5sZW5ndGggKyAxLCByZXF1aXJlZCkKICAgIHsKICAgICAgICBpc093bmVyW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgICAgIE93bmVyQWRkaXRpb24ob3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lci4KICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgewogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoIC0gMTsgaSsrKQogICAgICAgICAgICBpZiAob3duZXJzW2ldID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBvd25lcnNbaV0gPSBvd25lcnNbb3duZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICBvd25lcnMubGVuZ3RoIC09IDE7CiAgICAgICAgaWYgKHJlcXVpcmVkID4gb3duZXJzLmxlbmd0aCkKICAgICAgICAgICAgY2hhbmdlUmVxdWlyZW1lbnQob3duZXJzLmxlbmd0aCk7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gcmVwbGFjZSBhbiBvd25lciB3aXRoIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuCiAgICAvLy8gQHBhcmFtIG5ld093bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gcmVwbGFjZU93bmVyKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3MgbmV3T3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgICAgIG93bmVyRG9lc05vdEV4aXN0KG5ld093bmVyKQogICAgewogICAgICAgIGZvciAodWludCBpPTA7IGk8b3duZXJzLmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAob3duZXJzW2ldID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBvd25lcnNbaV0gPSBuZXdPd25lcjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgaXNPd25lcltvd25lcl0gPSBmYWxzZTsKICAgICAgICBpc093bmVyW25ld093bmVyXSA9IHRydWU7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgICAgICBPd25lckFkZGl0aW9uKG5ld093bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LgogICAgLy8vIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBjaGFuZ2VSZXF1aXJlbWVudCh1aW50IF9yZXF1aXJlZCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgdmFsaWRSZXF1aXJlbWVudChvd25lcnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICAgICAgUmVxdWlyZW1lbnRDaGFuZ2UoX3JlcXVpcmVkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS4KICAgIC8vLyBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELgogICAgZnVuY3Rpb24gc3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyBkZXN0aW5hdGlvbiwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25JZCA9IGFkZFRyYW5zYWN0aW9uKGRlc3RpbmF0aW9uLCB2YWx1ZSwgZGF0YSk7CiAgICAgICAgY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBjb25maXJtVHJhbnNhY3Rpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgdHJhbnNhY3Rpb25FeGlzdHModHJhbnNhY3Rpb25JZCkKICAgICAgICBub3RDb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgdHJhbnNhY3Rpb25JZCk7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiByZXZva2VDb25maXJtYXRpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgY29uZmlybWVkKHRyYW5zYWN0aW9uSWQsIG1zZy5zZW5kZXIpCiAgICAgICAgbm90RXhlY3V0ZWQodHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gZmFsc2U7CiAgICAgICAgUmV2b2NhdGlvbihtc2cuc2VuZGVyLCB0cmFuc2FjdGlvbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3Mgb3duZXIgdG8gZXhlY3V0ZSBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIGZ1bmN0aW9uIGV4ZWN1dGVUcmFuc2FjdGlvbih1aW50IHRyYW5zYWN0aW9uSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJFeGlzdHMobXNnLnNlbmRlcikKICAgICAgICBjb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgICAgICBub3RFeGVjdXRlZCh0cmFuc2FjdGlvbklkKQogICAgewogICAgICAgIGlmIChpc0NvbmZpcm1lZCh0cmFuc2FjdGlvbklkKSkgewogICAgICAgICAgICBUcmFuc2FjdGlvbiB0eCA9IHRyYW5zYWN0aW9uc1t0cmFuc2FjdGlvbklkXTsKICAgICAgICAgICAgdHguZXhlY3V0ZWQgPSB0cnVlOwogICAgICAgICAgICBpZiAodHguZGVzdGluYXRpb24uY2FsbC52YWx1ZSh0eC52YWx1ZSkodHguZGF0YSkpCiAgICAgICAgICAgICAgICBFeGVjdXRpb24odHJhbnNhY3Rpb25JZCk7CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgRXhlY3V0aW9uRmFpbHVyZSh0cmFuc2FjdGlvbklkKTsKICAgICAgICAgICAgICAgIHR4LmV4ZWN1dGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgY29uZmlybWF0aW9uIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgLy8vIEByZXR1cm4gQ29uZmlybWF0aW9uIHN0YXR1cy4KICAgIGZ1bmN0aW9uIGlzQ29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bb3duZXJzW2ldXSkKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIGlmIChjb3VudCA9PSByZXF1aXJlZCkKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICogSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8vLyBAZGV2IEFkZHMgYSBuZXcgdHJhbnNhY3Rpb24gdG8gdGhlIHRyYW5zYWN0aW9uIG1hcHBpbmcsIGlmIHRyYW5zYWN0aW9uIGRvZXMgbm90IGV4aXN0IHlldC4KICAgIC8vLyBAcGFyYW0gZGVzdGluYXRpb24gVHJhbnNhY3Rpb24gdGFyZ2V0IGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIHZhbHVlIFRyYW5zYWN0aW9uIGV0aGVyIHZhbHVlLgogICAgLy8vIEBwYXJhbSBkYXRhIFRyYW5zYWN0aW9uIGRhdGEgcGF5bG9hZC4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgdHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBhZGRUcmFuc2FjdGlvbihhZGRyZXNzIGRlc3RpbmF0aW9uLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKQogICAgICAgIGludGVybmFsCiAgICAgICAgbm90TnVsbChkZXN0aW5hdGlvbikKICAgICAgICByZXR1cm5zICh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25JZCA9IHRyYW5zYWN0aW9uQ291bnQ7CiAgICAgICAgdHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdID0gVHJhbnNhY3Rpb24oewogICAgICAgICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZXhlY3V0ZWQ6IGZhbHNlCiAgICAgICAgfSk7CiAgICAgICAgdHJhbnNhY3Rpb25Db3VudCArPSAxOwogICAgICAgIFN1Ym1pc3Npb24odHJhbnNhY3Rpb25JZCk7CiAgICB9CgogICAgLyoKICAgICAqIFdlYjMgY2FsbCBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgLy8vIEByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBnZXRDb25maXJtYXRpb25Db3VudCh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50IGNvdW50KQogICAgewogICAgICAgIGZvciAodWludCBpPTA7IGk8b3duZXJzLmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIHRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsZXJzIGFyZSBhcHBsaWVkLgogICAgLy8vIEBwYXJhbSBwZW5kaW5nIEluY2x1ZGUgcGVuZGluZyB0cmFuc2FjdGlvbnMuCiAgICAvLy8gQHBhcmFtIGV4ZWN1dGVkIEluY2x1ZGUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zLgogICAgLy8vIEByZXR1cm4gVG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWx0ZXJzIGFyZSBhcHBsaWVkLgogICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25Db3VudChib29sIHBlbmRpbmcsIGJvb2wgZXhlY3V0ZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50IGNvdW50KQogICAgewogICAgICAgIGZvciAodWludCBpPTA7IGk8dHJhbnNhY3Rpb25Db3VudDsgaSsrKQogICAgICAgICAgICBpZiAoICAgcGVuZGluZyAmJiAhdHJhbnNhY3Rpb25zW2ldLmV4ZWN1dGVkCiAgICAgICAgICAgICAgICB8fCBleGVjdXRlZCAmJiB0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQpCiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbGlzdCBvZiBvd25lcnMuCiAgICAvLy8gQHJldHVybiBMaXN0IG9mIG93bmVyIGFkZHJlc3Nlcy4KICAgIGZ1bmN0aW9uIGdldE93bmVycygpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChhZGRyZXNzW10pCiAgICB7CiAgICAgICAgcmV0dXJuIG93bmVyczsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGFycmF5IHdpdGggb3duZXIgYWRkcmVzc2VzLCB3aGljaCBjb25maXJtZWQgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIGFycmF5IG9mIG93bmVyIGFkZHJlc3Nlcy4KICAgIGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbnModWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYWRkcmVzc1tdIF9jb25maXJtYXRpb25zKQogICAgewogICAgICAgIGFkZHJlc3NbXSBtZW1vcnkgY29uZmlybWF0aW9uc1RlbXAgPSBuZXcgYWRkcmVzc1tdKG93bmVycy5sZW5ndGgpOwogICAgICAgIHVpbnQgY291bnQgPSAwOwogICAgICAgIHVpbnQgaTsKICAgICAgICBmb3IgKGk9MDsgaTxvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyc1tpXV0pIHsKICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvbnNUZW1wW2NvdW50XSA9IG93bmVyc1tpXTsKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICBfY29uZmlybWF0aW9ucyA9IG5ldyBhZGRyZXNzW10oY291bnQpOwogICAgICAgIGZvciAoaT0wOyBpPGNvdW50OyBpKyspCiAgICAgICAgICAgIF9jb25maXJtYXRpb25zW2ldID0gY29uZmlybWF0aW9uc1RlbXBbaV07CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLgogICAgLy8vIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LgogICAgLy8vIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuCiAgICAvLy8gQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy4KICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uSWRzKHVpbnQgZnJvbSwgdWludCB0bywgYm9vbCBwZW5kaW5nLCBib29sIGV4ZWN1dGVkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludFtdIF90cmFuc2FjdGlvbklkcykKICAgIHsKICAgICAgICB1aW50W10gbWVtb3J5IHRyYW5zYWN0aW9uSWRzVGVtcCA9IG5ldyB1aW50W10odHJhbnNhY3Rpb25Db3VudCk7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgdWludCBpOwogICAgICAgIGZvciAoaT0wOyBpPHRyYW5zYWN0aW9uQ291bnQ7IGkrKykKICAgICAgICAgICAgaWYgKCAgIHBlbmRpbmcgJiYgIXRyYW5zYWN0aW9uc1tpXS5leGVjdXRlZAogICAgICAgICAgICAgICAgfHwgZXhlY3V0ZWQgJiYgdHJhbnNhY3Rpb25zW2ldLmV4ZWN1dGVkKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbklkc1RlbXBbY291bnRdID0gaTsKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICBfdHJhbnNhY3Rpb25JZHMgPSBuZXcgdWludFtdKHRvIC0gZnJvbSk7CiAgICAgICAgZm9yIChpPWZyb207IGk8dG87IGkrKykKICAgICAgICAgICAgX3RyYW5zYWN0aW9uSWRzW2kgLSBmcm9tXSA9IHRyYW5zYWN0aW9uSWRzVGVtcFtpXTsKICAgIH0KfQ=='.
	

]
