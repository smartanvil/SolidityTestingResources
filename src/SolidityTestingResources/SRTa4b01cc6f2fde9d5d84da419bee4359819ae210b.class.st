Class {
	#name : #SRTa4b01cc6f2fde9d5d84da419bee4359819ae210b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4b01cc6f2fde9d5d84da419bee4359819ae210b >> base64 [
	^ ''.
	

]
