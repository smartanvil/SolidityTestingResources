Class {
	#name : #SRT7cb6db24d356a0ba98bf837cec40b403d1f0a239,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7cb6db24d356a0ba98bf837cec40b403d1f0a239 >> base64 [
	^ ''.
	

]
