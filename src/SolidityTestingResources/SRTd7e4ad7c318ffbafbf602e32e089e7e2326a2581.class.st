Class {
	#name : #SRTd7e4ad7c318ffbafbf602e32e089e7e2326a2581,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7e4ad7c318ffbafbf602e32e089e7e2326a2581 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogRG9jVGFpbG9yOiBodHRwczovL3d3dy5kb2N0YWlsb3IuY29tCiAqLwoKLy8gPT09PSBPcGVuIFplcHBlbGluIGxpYnJhcnkgPT09CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogICBAdGl0bGUgRVJDODI3IGludGVyZmFjZSwgYW4gZXh0ZW5zaW9uIG9mIEVSQzIwIHRva2VuIHN0YW5kYXJkCgogICBJbnRlcmZhY2Ugb2YgYSBFUkM4MjcgdG9rZW4sIGZvbGxvd2luZyB0aGUgRVJDMjAgc3RhbmRhcmQgd2l0aCBleHRyYQogICBtZXRob2RzIHRvIHRyYW5zZmVyIHZhbHVlIGFuZCBkYXRhIGFuZCBleGVjdXRlIGNhbGxzIGluIHRyYW5zZmVycyBhbmQKICAgYXBwcm92YWxzLgogKi8KY29udHJhY3QgRVJDODI3IGlzIEVSQzIwIHsKCiAgZnVuY3Rpb24gYXBwcm92ZSggYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhICkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhICkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSggYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSApIHB1YmxpYyByZXR1cm5zIChib29sKTsKCn0KCi8qKgogKiBAdGl0bGUgU2FmZUVSQzIwCiAqIEBkZXYgV3JhcHBlcnMgYXJvdW5kIEVSQzIwIG9wZXJhdGlvbnMgdGhhdCB0aHJvdyBvbiBmYWlsdXJlLgogKiBUbyB1c2UgdGhpcyBsaWJyYXJ5IHlvdSBjYW4gYWRkIGEgYHVzaW5nIFNhZmVFUkMyMCBmb3IgRVJDMjA7YCBzdGF0ZW1lbnQgdG8geW91ciBjb250cmFjdCwKICogd2hpY2ggYWxsb3dzIHlvdSB0byBjYWxsIHRoZSBzYWZlIG9wZXJhdGlvbnMgYXMgYHRva2VuLnNhZmVUcmFuc2ZlciguLi4pYCwgZXRjLgogKi8KbGlicmFyeSBTYWZlRVJDMjAgewogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlcihFUkMyMEJhc2ljIHRva2VuLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4udHJhbnNmZXIodG8sIHZhbHVlKSk7CiAgfQoKICBmdW5jdGlvbiBzYWZlVHJhbnNmZXJGcm9tKEVSQzIwIHRva2VuLCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKSk7CiAgfQoKICBmdW5jdGlvbiBzYWZlQXBwcm92ZShFUkMyMCB0b2tlbiwgYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4uYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIENvbnRyYWN0cyB0aGF0IHNob3VsZCBub3Qgb3duIEV0aGVyCiAqIEBhdXRob3IgUmVtY28gQmxvZW1lbiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI5ZGVmZjhmMGZlZjJkZGFmIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPs+ALmNvbT4KICogQGRldiBUaGlzIHRyaWVzIHRvIGJsb2NrIGluY29taW5nIGV0aGVyIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBsb3NzIG9mIEV0aGVyLiBTaG91bGQgRXRoZXIgZW5kIHVwCiAqIGluIHRoZSBjb250cmFjdCwgaXQgd2lsbCBhbGxvdyB0aGUgb3duZXIgdG8gcmVjbGFpbSB0aGlzIGV0aGVyLgogKiBAbm90aWNlIEV0aGVyIGNhbiBzdGlsbCBiZSBzZW5kIHRvIHRoaXMgY29udHJhY3QgYnk6CiAqIGNhbGxpbmcgZnVuY3Rpb25zIGxhYmVsZWQgYHBheWFibGVgCiAqIGBzZWxmZGVzdHJ1Y3QoY29udHJhY3RfYWRkcmVzcylgCiAqIG1pbmluZyBkaXJlY3RseSB0byB0aGUgY29udHJhY3QgYWRkcmVzcwoqLwpjb250cmFjdCBIYXNOb0V0aGVyIGlzIE93bmFibGUgewoKICAvKioKICAqIEBkZXYgQ29uc3RydWN0b3IgdGhhdCByZWplY3RzIGluY29taW5nIEV0aGVyCiAgKiBAZGV2IFRoZSBgcGF5YWJsZWAgZmxhZyBpcyBhZGRlZCBzbyB3ZSBjYW4gYWNjZXNzIGBtc2cudmFsdWVgIHdpdGhvdXQgY29tcGlsZXIgd2FybmluZy4gSWYgd2UKICAqIGxlYXZlIG91dCBwYXlhYmxlLCB0aGVuIFNvbGlkaXR5IHdpbGwgYWxsb3cgaW5oZXJpdGluZyBjb250cmFjdHMgdG8gaW1wbGVtZW50IGEgcGF5YWJsZQogICogY29uc3RydWN0b3IuIEJ5IGRvaW5nIGl0IHRoaXMgd2F5IHdlIHByZXZlbnQgYSBwYXlhYmxlIGNvbnN0cnVjdG9yIGZyb20gd29ya2luZy4gQWx0ZXJuYXRpdmVseQogICogd2UgY291bGQgdXNlIGFzc2VtYmx5IHRvIGFjY2VzcyBtc2cudmFsdWUuCiAgKi8KICBmdW5jdGlvbiBIYXNOb0V0aGVyKCkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMCk7CiAgfQoKICAvKioKICAgKiBAZGV2IERpc2FsbG93cyBkaXJlY3Qgc2VuZCBieSBzZXR0aW5ncyBhIGRlZmF1bHQgZnVuY3Rpb24gd2l0aG91dCB0aGUgYHBheWFibGVgIGZsYWcuCiAgICovCiAgZnVuY3Rpb24oKSBleHRlcm5hbCB7CiAgfQoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIGFsbCBFdGhlciBoZWxkIGJ5IHRoZSBjb250cmFjdCB0byB0aGUgb3duZXIuCiAgICovCiAgZnVuY3Rpb24gcmVjbGFpbUV0aGVyKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIGFzc2VydChvd25lci5zZW5kKHRoaXMuYmFsYW5jZSkpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBDb250cmFjdHMgdGhhdCBzaG91bGQgbm90IG93biBDb250cmFjdHMKICogQGF1dGhvciBSZW1jbyBCbG9lbWVuIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9Ijc2MDQxMzFiMTUxOTM2NDQiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+z4AuY29tPgogKiBAZGV2IFNob3VsZCBjb250cmFjdHMgKGFueXRoaW5nIE93bmFibGUpIGVuZCB1cCBiZWluZyBvd25lZCBieSB0aGlzIGNvbnRyYWN0LCBpdCBhbGxvd3MgdGhlIG93bmVyCiAqIG9mIHRoaXMgY29udHJhY3QgdG8gcmVjbGFpbSBvd25lcnNoaXAgb2YgdGhlIGNvbnRyYWN0cy4KICovCmNvbnRyYWN0IEhhc05vQ29udHJhY3RzIGlzIE93bmFibGUgewoKICAvKioKICAgKiBAZGV2IFJlY2xhaW0gb3duZXJzaGlwIG9mIE93bmFibGUgY29udHJhY3RzCiAgICogQHBhcmFtIGNvbnRyYWN0QWRkciBUaGUgYWRkcmVzcyBvZiB0aGUgT3duYWJsZSB0byBiZSByZWNsYWltZWQuCiAgICovCiAgZnVuY3Rpb24gcmVjbGFpbUNvbnRyYWN0KGFkZHJlc3MgY29udHJhY3RBZGRyKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgT3duYWJsZSBjb250cmFjdEluc3QgPSBPd25hYmxlKGNvbnRyYWN0QWRkcik7CiAgICBjb250cmFjdEluc3QudHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBDb250cmFjdHMgdGhhdCBzaG91bGQgYmUgYWJsZSB0byByZWNvdmVyIHRva2VucwogKiBAYXV0aG9yIFN5bFRpCiAqIEBkZXYgVGhpcyBhbGxvdyBhIGNvbnRyYWN0IHRvIHJlY292ZXIgYW55IEVSQzIwIHRva2VuIHJlY2VpdmVkIGluIGEgY29udHJhY3QgYnkgdHJhbnNmZXJyaW5nIHRoZSBiYWxhbmNlIHRvIHRoZSBjb250cmFjdCBvd25lci4KICogVGhpcyB3aWxsIHByZXZlbnQgYW55IGFjY2lkZW50YWwgbG9zcyBvZiB0b2tlbnMuCiAqLwpjb250cmFjdCBDYW5SZWNsYWltVG9rZW4gaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwoKICAvKioKICAgKiBAZGV2IFJlY2xhaW0gYWxsIEVSQzIwQmFzaWMgY29tcGF0aWJsZSB0b2tlbnMKICAgKiBAcGFyYW0gdG9rZW4gRVJDMjBCYXNpYyBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QKICAgKi8KICBmdW5jdGlvbiByZWNsYWltVG9rZW4oRVJDMjBCYXNpYyB0b2tlbikgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnNhZmVUcmFuc2Zlcihvd25lciwgYmFsYW5jZSk7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBDb250cmFjdHMgdGhhdCBzaG91bGQgbm90IG93biBUb2tlbnMKICogQGF1dGhvciBSZW1jbyBCbG9lbWVuIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9Ijc4MGExZDE1MWIxNzM4NGEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+z4AuY29tPgogKiBAZGV2IFRoaXMgYmxvY2tzIGluY29taW5nIEVSQzIzIHRva2VucyB0byBwcmV2ZW50IGFjY2lkZW50YWwgbG9zcyBvZiB0b2tlbnMuCiAqIFNob3VsZCB0b2tlbnMgKGFueSBFUkMyMEJhc2ljIGNvbXBhdGlibGUpIGVuZCB1cCBpbiB0aGUgY29udHJhY3QsIGl0IGFsbG93cyB0aGUKICogb3duZXIgdG8gcmVjbGFpbSB0aGUgdG9rZW5zLgogKi8KY29udHJhY3QgSGFzTm9Ub2tlbnMgaXMgQ2FuUmVjbGFpbVRva2VuIHsKCiAvKioKICAqIEBkZXYgUmVqZWN0IGFsbCBFUkMyMyBjb21wYXRpYmxlIHRva2VucwogICogQHBhcmFtIGZyb21fIGFkZHJlc3MgVGhlIGFkZHJlc3MgdGhhdCBpcyB0cmFuc2ZlcnJpbmcgdGhlIHRva2VucwogICogQHBhcmFtIHZhbHVlXyB1aW50MjU2IHRoZSBhbW91bnQgb2YgdGhlIHNwZWNpZmllZCB0b2tlbgogICogQHBhcmFtIGRhdGFfIEJ5dGVzIFRoZSBkYXRhIHBhc3NlZCBmcm9tIHRoZSBjYWxsZXIuCiAgKi8KICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgZnJvbV8sIHVpbnQyNTYgdmFsdWVfLCBieXRlcyBkYXRhXykgcHVyZSBleHRlcm5hbCB7CiAgICBmcm9tXzsKICAgIHZhbHVlXzsKICAgIGRhdGFfOwogICAgcmV2ZXJ0KCk7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBCYXNlIGNvbnRyYWN0IGZvciBjb250cmFjdHMgdGhhdCBzaG91bGQgbm90IG93biB0aGluZ3MuCiAqIEBhdXRob3IgUmVtY28gQmxvZW1lbiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJiOWNiZGNkNGRhZDZmOThiIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPs+ALmNvbT4KICogQGRldiBTb2x2ZXMgYSBjbGFzcyBvZiBlcnJvcnMgd2hlcmUgYSBjb250cmFjdCBhY2NpZGVudGFsbHkgYmVjb21lcyBvd25lciBvZiBFdGhlciwgVG9rZW5zIG9yCiAqIE93bmVkIGNvbnRyYWN0cy4gU2VlIHJlc3BlY3RpdmUgYmFzZSBjb250cmFjdHMgZm9yIGRldGFpbHMuCiAqLwpjb250cmFjdCBOb093bmVyIGlzIEhhc05vRXRoZXIsIEhhc05vVG9rZW5zLCBIYXNOb0NvbnRyYWN0cyB7Cn0KCi8qKgogKiBAdGl0bGUgRGVzdHJ1Y3RpYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB0aGF0IGNhbiBiZSBkZXN0cm95ZWQgYnkgb3duZXIuIEFsbCBmdW5kcyBpbiBjb250cmFjdCB3aWxsIGJlIHNlbnQgdG8gdGhlIG93bmVyLgogKi8KY29udHJhY3QgRGVzdHJ1Y3RpYmxlIGlzIE93bmFibGUgewoKICBmdW5jdGlvbiBEZXN0cnVjdGlibGUoKSBwdWJsaWMgcGF5YWJsZSB7IH0KCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlcnMgdGhlIGN1cnJlbnQgYmFsYW5jZSB0byB0aGUgb3duZXIgYW5kIHRlcm1pbmF0ZXMgdGhlIGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIGRlc3Ryb3koKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgfQoKICBmdW5jdGlvbiBkZXN0cm95QW5kU2VuZChhZGRyZXNzIF9yZWNpcGllbnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgc2VsZmRlc3RydWN0KF9yZWNpcGllbnQpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICB1aW50MjU2IHRvdGFsU3VwcGx5XzsKCiAgLyoqCiAgKiBAZGV2IHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gZXhpc3RlbmNlCiAgKi8KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFN1cHBseV87CiAgfQoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICoKICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiBJbmNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5XyA9IHRvdGFsU3VwcGx5Xy5hZGQoX2Ftb3VudCk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovKioKICAgQHRpdGxlIEVSQzgyNywgYW4gZXh0ZW5zaW9uIG9mIEVSQzIwIHRva2VuIHN0YW5kYXJkCgogICBJbXBsZW1lbnRhdGlvbiB0aGUgRVJDODI3LCBmb2xsb3dpbmcgdGhlIEVSQzIwIHN0YW5kYXJkIHdpdGggZXh0cmEKICAgbWV0aG9kcyB0byB0cmFuc2ZlciB2YWx1ZSBhbmQgZGF0YSBhbmQgZXhlY3V0ZSBjYWxscyBpbiB0cmFuc2ZlcnMgYW5kCiAgIGFwcHJvdmFscy4KICAgVXNlcyBPcGVuWmVwcGVsaW4gU3RhbmRhcmRUb2tlbi4KICovCmNvbnRyYWN0IEVSQzgyN1Rva2VuIGlzIEVSQzgyNywgU3RhbmRhcmRUb2tlbiB7CgogIC8qKgogICAgIEBkZXYgQWRkaXRpb24gdG8gRVJDMjAgdG9rZW4gbWV0aG9kcy4gSXQgYWxsb3dzIHRvCiAgICAgYXBwcm92ZSB0aGUgdHJhbnNmZXIgb2YgdmFsdWUgYW5kIGV4ZWN1dGUgYSBjYWxsIHdpdGggdGhlIHNlbnQgZGF0YS4KCiAgICAgQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQKICAgICBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZQogICAgIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcyByYWNlIGNvbmRpdGlvbgogICAgIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUKICAgICBhZnRlcndhcmRzOgogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CgogICAgIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICAgQHBhcmFtIF9kYXRhIEFCSS1lbmNvZGVkIGNvbnRyYWN0IGNhbGwgdG8gY2FsbCBgX3RvYCBhZGRyZXNzLgoKICAgICBAcmV0dXJuIHRydWUgaWYgdGhlIGNhbGwgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseQogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfc3BlbmRlciAhPSBhZGRyZXNzKHRoaXMpKTsKCiAgICBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICAgQGRldiBBZGRpdGlvbiB0byBFUkMyMCB0b2tlbiBtZXRob2RzLiBUcmFuc2ZlciB0b2tlbnMgdG8gYSBzcGVjaWZpZWQKICAgICBhZGRyZXNzIGFuZCBleGVjdXRlIGEgY2FsbCB3aXRoIHRoZSBzZW50IGRhdGEgb24gdGhlIHNhbWUgdHJhbnNhY3Rpb24KCiAgICAgQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAgIEBwYXJhbSBfZGF0YSBBQkktZW5jb2RlZCBjb250cmFjdCBjYWxsIHRvIGNhbGwgYF90b2AgYWRkcmVzcy4KCiAgICAgQHJldHVybiB0cnVlIGlmIHRoZSBjYWxsIGZ1bmN0aW9uIHdhcyBleGVjdXRlZCBzdWNjZXNzZnVsbHkKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcyh0aGlzKSk7CgogICAgc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3RvLmNhbGwoX2RhdGEpKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICAgQGRldiBBZGRpdGlvbiB0byBFUkMyMCB0b2tlbiBtZXRob2RzLiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0bwogICAgIGFub3RoZXIgYW5kIG1ha2UgYSBjb250cmFjdCBjYWxsIG9uIHRoZSBzYW1lIHRyYW5zYWN0aW9uCgogICAgIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICAgQHBhcmFtIF90byBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgIEBwYXJhbSBfZGF0YSBBQkktZW5jb2RlZCBjb250cmFjdCBjYWxsIHRvIGNhbGwgYF90b2AgYWRkcmVzcy4KCiAgICAgQHJldHVybiB0cnVlIGlmIHRoZSBjYWxsIGZ1bmN0aW9uIHdhcyBleGVjdXRlZCBzdWNjZXNzZnVsbHkKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwoKICAgIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgIHJlcXVpcmUoX3RvLmNhbGwoX2RhdGEpKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBZGRpdGlvbiB0byBTdGFuZGFyZFRva2VuIG1ldGhvZHMuIEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQKICAgKiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlciBhbmQgZXhlY3V0ZSBhIGNhbGwgd2l0aCB0aGUgc2VudCBkYXRhLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICogQHBhcmFtIF9kYXRhIEFCSS1lbmNvZGVkIGNvbnRyYWN0IGNhbGwgdG8gY2FsbCBgX3NwZW5kZXJgIGFkZHJlc3MuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3NwZW5kZXIgIT0gYWRkcmVzcyh0aGlzKSk7CgogICAgc3VwZXIuaW5jcmVhc2VBcHByb3ZhbChfc3BlbmRlciwgX2FkZGVkVmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBZGRpdGlvbiB0byBTdGFuZGFyZFRva2VuIG1ldGhvZHMuIERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQKICAgKiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlciBhbmQgZXhlY3V0ZSBhIGNhbGwgd2l0aCB0aGUgc2VudCBkYXRhLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKiBAcGFyYW0gX2RhdGEgQUJJLWVuY29kZWQgY29udHJhY3QgY2FsbCB0byBjYWxsIGBfc3BlbmRlcmAgYWRkcmVzcy4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSwgYnl0ZXMgX2RhdGEpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF9zcGVuZGVyICE9IGFkZHJlc3ModGhpcykpOwoKICAgIHN1cGVyLmRlY3JlYXNlQXBwcm92YWwoX3NwZW5kZXIsIF9zdWJ0cmFjdGVkVmFsdWUpOwoKICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChfZGF0YSkpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8vID09PT0gRE9DVCBDb250cmFjdHMgPT09Cgpjb250cmFjdCBET0NUVG9rZW4gaXMgTWludGFibGVUb2tlbiwgRVJDODI3VG9rZW4sIE5vT3duZXIgewogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnRE9DVCc7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAnRG9jVGFpbG9yJzsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7CgogICAgYWRkcmVzcyBmb3VuZGVyOyAgICAgICAgICAgICAgICAvL2ZvdW5kZXIgYWRkcmVzcyB0byBhbGxvdyBoaW0gdHJhbnNmZXIgdG9rZW5zIGV2ZW4gd2hlbiB0cmFuc2ZlcnMgZGlzYWJsZWQKICAgIGJvb2wgcHVibGljIHRyYW5zZmVyRW5hYmxlZDsgICAgLy9hbGxvd3MgdG8gZGlzc2FibGUgdHJhbnNmZXJzIHdoaWxlIG1pbnRpbmcgYW5kIGluIGNhc2Ugb2YgZW1lcmdlbmN5CgogICAgZnVuY3Rpb24gc2V0Rm91bmRlcihhZGRyZXNzIF9mb3VuZGVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBmb3VuZGVyID0gX2ZvdW5kZXI7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRUcmFuc2ZlckVuYWJsZWQoYm9vbCBlbmFibGUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHRyYW5zZmVyRW5hYmxlZCA9IGVuYWJsZTsKICAgIH0KICAgIG1vZGlmaWVyIGNhblRyYW5zZmVyKCkgewogICAgICAgIHJlcXVpcmUoIHRyYW5zZmVyRW5hYmxlZCB8fCBtc2cuc2VuZGVyID09IGZvdW5kZXIgfHwgbXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBjYW5UcmFuc2ZlciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBjYW5UcmFuc2ZlciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIGNhblRyYW5zZmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlLCBfZGF0YSk7CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgY2FuVHJhbnNmZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgfQp9CgovKioKICogQHRpdGxlIERvY1RhaWxvciBDcm93ZHNhbGUKICovCmNvbnRyYWN0IERPQ1RDcm93ZHNhbGUgaXMgT3duYWJsZSwgSGFzTm9Db250cmFjdHMsIENhblJlY2xhaW1Ub2tlbiwgRGVzdHJ1Y3RpYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHVpbnQyNTYgY29uc3RhbnQgIERPQ1RfVE9fRVRIX0RFQ0lNQUxTID0gMTAwMDAwMDAwMDA7ICAgIC8vTmVlZCB0aGlzIGJlY2F1c2UgRVRIIGRlY2ltYWxzIGlzIDE4LCB3aGlsZSBET0NUIGRlY2ltYWxzIGlzIDguCgogICAgRE9DVFRva2VuIHB1YmxpYyB0b2tlbjsKCiAgICBzdHJ1Y3QgUm91bmQgewogICAgICAgIHVpbnQyNTYgc3RhcnQ7ICAgICAgICAgIC8vVGltZXN0YW1wIG9mIGNyb3dkc2FsZSByb3VuZCBzdGFydAogICAgICAgIHVpbnQyNTYgZW5kOyAgICAgICAgICAgIC8vVGltZXN0YW1wIG9mIGNyb3dkc2FsZSByb3VuZCBlbmQKICAgICAgICB1aW50MjU2IHJhdGU7ICAgICAgICAgICAvL1JhdGU6IGhvdyBtdWNoIFRPS0VOIG9uZSB3aWxsIGdldCBmbyAxIEVUSCBkdXJpbmcgdGhpcyByb3VuZAogICAgICAgIHVpbnQyNTYgcmF0ZUJ1bGs7ICAgICAgIC8vUmF0ZSBmb3IgYnVsayBwdXJzaGFzZXMKICAgICAgICB1aW50MjU2IGJ1bGtUaHJlc2hvbGQ7ICAvL0lmIHB1cnNoYXNlIG1vcmUgdGhhbiB0aGlzIGFtb3VudCwgYnVsayByYXRlIGFwcGxpZWQKICAgIH0KICAgIFJvdW5kW10gcHVibGljIHJvdW5kczsgICAgICAgICAgLy9BcnJheSBvZiBjcm93ZHNhbGUgcm91bmRzCiAgICB1aW50MjU2IHB1YmxpYyBoYXJkQ2FwOyAgICAgICAgIC8vTWF4IGFtb3VudCBvZiB0b2tlbnMgdG8gbWludAogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zTWludGVkOyAgICAvL0Ftb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBtaW50ZWQKICAgIGJvb2wgcHVibGljIGZpbmFsaXplZDsgICAgICAgICAgLy9jcm93ZHNhbGUgaXMgZmluYWxpemVkCgogICAgZnVuY3Rpb24gRE9DVENyb3dkc2FsZSAoCiAgICAgICAgdWludDI1NiBfaGFyZENhcCwKICAgICAgICB1aW50MjU2W10gcm91bmRTdGFydHMsCiAgICAgICAgdWludDI1NltdIHJvdW5kRW5kcywKICAgICAgICB1aW50MjU2W10gcm91bmRSYXRlcywKICAgICAgICB1aW50MjU2W10gcm91bmRSYXRlc0J1bGssCiAgICAgICAgdWludDI1NltdIHJvdW5kQnVsa1RocmVzaG9sZAogICAgKSBwdWJsaWMgewogICAgICAgIHRva2VuID0gbmV3IERPQ1RUb2tlbigpOwogICAgICAgIHRva2VuLnNldEZvdW5kZXIob3duZXIpOwogICAgICAgIHRva2VuLnNldFRyYW5zZmVyRW5hYmxlZChmYWxzZSk7CgogICAgICAgIHRva2Vuc01pbnRlZCA9IHRva2VuLnRvdGFsU3VwcGx5KCk7CgogICAgICAgIC8vQ2hlY2sgYWxsIHBhcmFtYXRlcnMgYXJlIGNvcnJlY3QgYW5kIGNyZWF0ZSByb3VuZHMKICAgICAgICByZXF1aXJlKF9oYXJkQ2FwID4gMCk7ICAgICAgICAgICAgICAgICAgICAvL05lZWQgc29tZXRoaW5nIHRvIHNlbGwKICAgICAgICBoYXJkQ2FwID0gX2hhcmRDYXA7CgogICAgICAgIGluaXRSb3VuZHMocm91bmRTdGFydHMsIHJvdW5kRW5kcywgcm91bmRSYXRlcywgcm91bmRSYXRlc0J1bGssIHJvdW5kQnVsa1RocmVzaG9sZCk7CiAgICB9CiAgICBmdW5jdGlvbiBpbml0Um91bmRzKHVpbnQyNTZbXSByb3VuZFN0YXJ0cywgdWludDI1NltdIHJvdW5kRW5kcywgdWludDI1NltdIHJvdW5kUmF0ZXMsIHVpbnQyNTZbXSByb3VuZFJhdGVzQnVsaywgdWludDI1NltdIHJvdW5kQnVsa1RocmVzaG9sZCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIChyb3VuZFN0YXJ0cy5sZW5ndGggPiAwKSAgJiYgICAgICAgICAgICAgICAgLy9UaGVyZSBzaG91bGQgYmUgYXQgbGVhc3Qgb25lIHJvdW5kCiAgICAgICAgICAgIChyb3VuZFN0YXJ0cy5sZW5ndGggPT0gcm91bmRFbmRzLmxlbmd0aCkgJiYKICAgICAgICAgICAgKHJvdW5kU3RhcnRzLmxlbmd0aCA9PSByb3VuZFJhdGVzLmxlbmd0aCkgJiYKICAgICAgICAgICAgKHJvdW5kU3RhcnRzLmxlbmd0aCA9PSByb3VuZFJhdGVzQnVsay5sZW5ndGgpICYmCiAgICAgICAgICAgIChyb3VuZFN0YXJ0cy5sZW5ndGggPT0gcm91bmRCdWxrVGhyZXNob2xkLmxlbmd0aCkKICAgICAgICApOyAgICAgICAgICAgICAgICAgICAKICAgICAgICB1aW50MjU2IHByZXZSb3VuZEVuZCA9IG5vdzsKICAgICAgICByb3VuZHMubGVuZ3RoID0gcm91bmRTdGFydHMubGVuZ3RoOyAgICAgICAgICAgICAvL2luaXRpYWxpemUgcm91bmRzIGFycmF5CiAgICAgICAgZm9yKHVpbnQ4IGk9MDsgaSA8IHJvdW5kU3RhcnRzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgcm91bmRzW2ldID0gUm91bmQoe3N0YXJ0OnJvdW5kU3RhcnRzW2ldLCBlbmQ6cm91bmRFbmRzW2ldLCByYXRlOnJvdW5kUmF0ZXNbaV0sIHJhdGVCdWxrOnJvdW5kUmF0ZXNCdWxrW2ldLCBidWxrVGhyZXNob2xkOnJvdW5kQnVsa1RocmVzaG9sZFtpXX0pOwogICAgICAgICAgICBSb3VuZCBzdG9yYWdlIHIgPSByb3VuZHNbaV07CiAgICAgICAgICAgIHJlcXVpcmUocHJldlJvdW5kRW5kIDw9IHIuc3RhcnQpOwogICAgICAgICAgICByZXF1aXJlKHIuc3RhcnQgPCByLmVuZCk7CiAgICAgICAgICAgIHJlcXVpcmUoci5idWxrVGhyZXNob2xkID4gMCk7CiAgICAgICAgICAgIHByZXZSb3VuZEVuZCA9IHJvdW5kc1tpXS5lbmQ7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gc2V0Um91bmQodWludDggcm91bmROdW0sIHVpbnQyNTYgc3RhcnQsIHVpbnQyNTYgZW5kLCB1aW50MjU2IHJhdGUsIHVpbnQyNTYgcmF0ZUJ1bGssIHVpbnQyNTYgYnVsa1RocmVzaG9sZCkgb25seU93bmVyIGV4dGVybmFsIHsKICAgICAgICB1aW50OCByb3VuZCA9IHJvdW5kTnVtLTE7CiAgICAgICAgaWYocm91bmQgPiAwKXsKICAgICAgICAgICAgcmVxdWlyZShyb3VuZHNbcm91bmQgLSAxXS5lbmQgPD0gc3RhcnQpOwogICAgICAgIH0KICAgICAgICBpZihyb3VuZCA8IHJvdW5kcy5sZW5ndGggLSAxKXsKICAgICAgICAgICAgcmVxdWlyZShlbmQgPD0gcm91bmRzW3JvdW5kICsgMV0uc3RhcnQpOyAgIAogICAgICAgIH0KICAgICAgICByb3VuZHNbcm91bmRdLnN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgcm91bmRzW3JvdW5kXS5lbmQgPSBlbmQ7CiAgICAgICAgcm91bmRzW3JvdW5kXS5yYXRlID0gcmF0ZTsKICAgICAgICByb3VuZHNbcm91bmRdLnJhdGVCdWxrID0gcmF0ZUJ1bGs7CiAgICAgICAgcm91bmRzW3JvdW5kXS5idWxrVGhyZXNob2xkID0gYnVsa1RocmVzaG9sZDsKICAgIH0KCgogICAgLyoqCiAgICAqIEBub3RpY2UgQnV5IHRva2VucwogICAgKi8KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVSdW5uaW5nKCkpOwoKICAgICAgICB1aW50MjU2IHJhdGUgPSBjdXJyZW50UmF0ZShtc2cudmFsdWUpOwogICAgICAgIHJlcXVpcmUocmF0ZSA+IDApOwogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gcmF0ZS5tdWwobXNnLnZhbHVlKS5kaXYoRE9DVF9UT19FVEhfREVDSU1BTFMpOwogICAgICAgIG1pbnRUb2tlbnMobXNnLnNlbmRlciwgdG9rZW5zKTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBNaW50IHRva2VucyBmb3IgcHVyc2hhc2VzIHdpdGggTm9uLUV0aGVyIGN1cnJlbmNpZXMKICAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdob20gdG8gc2VuZCB0b2tlbmQKICAgICogQHBhcmFtIGFtb3VudCBob3cgbXVjaCB0b2tlbnMgdG8gc2VuZAogICAgKiBwYXJhbSBtZXNzYWdlIHJlYXNvbiB3aHkgd2UgYXJlIHNlbmRpbmcgdG9rZW5zIChub3Qgc3RvcmVkIGFueXRoZXJlLCBvbmx5IGluIHRyYW5zYWN0aW9uIGl0c2VsZikKICAgICovCiAgICBmdW5jdGlvbiBzYWxlTm9uRXRoZXIoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludDI1NiBhbW91bnQsIHN0cmluZyAvKm1lc3NhZ2UqLykgb25seU93bmVyIGV4dGVybmFsewogICAgICAgIG1pbnRUb2tlbnMoYmVuZWZpY2lhcnksIGFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgQnVsayBtaW50IHRva2VucyAoZGlmZmVyZW50IGFtb3VudHMpCiAgICAqIEBwYXJhbSBiZW5lZmljaWFyaWVzIGFycmF5IHdob20gdG8gc2VuZCB0b2tlbmQKICAgICogQHBhcmFtIGFtb3VudHMgYXJyYXkgaG93IG11Y2ggdG9rZW5zIHRvIHNlbmQKICAgICogcGFyYW0gbWVzc2FnZSByZWFzb24gd2h5IHdlIGFyZSBzZW5kaW5nIHRva2VucyAobm90IHN0b3JlZCBhbnl0aGVyZSwgb25seSBpbiB0cmFuc2FjdGlvbiBpdHNlbGYpCiAgICAqLwogICAgZnVuY3Rpb24gYnVsa1Rva2VuU2VuZChhZGRyZXNzW10gYmVuZWZpY2lhcmllcywgdWludDI1NltdIGFtb3VudHMsIHN0cmluZyAvKm1lc3NhZ2UqLykgb25seU93bmVyIGV4dGVybmFsewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcmllcy5sZW5ndGggPT0gYW1vdW50cy5sZW5ndGgpOwogICAgICAgIGZvcih1aW50MzIgaT0wOyBpIDwgYmVuZWZpY2lhcmllcy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIG1pbnRUb2tlbnMoYmVuZWZpY2lhcmllc1tpXSwgYW1vdW50c1tpXSk7CiAgICAgICAgfQogICAgfQogICAgLyoqCiAgICAqIEBub3RpY2UgQnVsayBtaW50IHRva2VucyAoc2FtZSBhbW91bnRzKQogICAgKiBAcGFyYW0gYmVuZWZpY2lhcmllcyBhcnJheSB3aG9tIHRvIHNlbmQgdG9rZW5kCiAgICAqIEBwYXJhbSBhbW91bnQgaG93IG11Y2ggdG9rZW5zIHRvIHNlbmQKICAgICogcGFyYW0gbWVzc2FnZSByZWFzb24gd2h5IHdlIGFyZSBzZW5kaW5nIHRva2VucyAobm90IHN0b3JlZCBhbnl0aGVyZSwgb25seSBpbiB0cmFuc2FjdGlvbiBpdHNlbGYpCiAgICAqLwogICAgZnVuY3Rpb24gYnVsa1Rva2VuU2VuZChhZGRyZXNzW10gYmVuZWZpY2lhcmllcywgdWludDI1NiBhbW91bnQsIHN0cmluZyAvKm1lc3NhZ2UqLykgb25seU93bmVyIGV4dGVybmFsewogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CiAgICAgICAgZm9yKHVpbnQzMiBpPTA7IGkgPCBiZW5lZmljaWFyaWVzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgbWludFRva2VucyhiZW5lZmljaWFyaWVzW2ldLCBhbW91bnQpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBTaG93cyBpZiBjcm93ZHNhbGUgaXMgcnVubmluZwogICAgKi8gCiAgICBmdW5jdGlvbiBjcm93ZHNhbGVSdW5uaW5nKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMoYm9vbCl7CiAgICAgICAgcmV0dXJuICFmaW5hbGl6ZWQgJiYgKHRva2Vuc01pbnRlZCA8IGhhcmRDYXApICYmIChjdXJyZW50Um91bmROdW0oKSA+IDApOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIEZldGNoZXMgY3VycmVudCBSb3VuZCBudW1iZXIKICAgICogQHJldHVybiByb3VuZCBudW1iZXIgKGluZGV4IGluIHJvdW5kcyBhcnJheSArIDEpIG9yIDAgaWYgbm9uZQogICAgKi8KICAgIGZ1bmN0aW9uIGN1cnJlbnRSb3VuZE51bSgpIHZpZXcgcHVibGljIHJldHVybnModWludDgpIHsKICAgICAgICBmb3IodWludDggaT0wOyBpIDwgcm91bmRzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYoIChub3cgPiByb3VuZHNbaV0uc3RhcnQpICYmIChub3cgPD0gcm91bmRzW2ldLmVuZCkgKSByZXR1cm4gaSsxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIC8qKgogICAgKiBAbm90aWNlIEZldGNoZXMgY3VycmVudCByYXRlIChob3cgbWFueSB0b2tlbnMgeW91IGdldCBmb3IgMSBFVEgpCiAgICAqIEBwYXJhbSBhbW91bnQgaG93IG11Y2ggZXRoZXIgaXMgcmVjZWl2ZWQKICAgICogQHJldHVybiBjYWxjdWxhdGVkIHJhdGUgb3IgemVybyBpZiBubyByb3VuZCBvZiBjcm93ZHNhbGUgaXMgcnVubmluZwogICAgKi8KICAgIGZ1bmN0aW9uIGN1cnJlbnRSYXRlKHVpbnQyNTYgYW1vdW50KSB2aWV3IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50OCByb3VuZE51bSA9IGN1cnJlbnRSb3VuZE51bSgpOwogICAgICAgIGlmKHJvdW5kTnVtID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHVpbnQ4IHJvdW5kID0gcm91bmROdW0tMTsKICAgICAgICAgICAgaWYoYW1vdW50IDwgcm91bmRzW3JvdW5kXS5idWxrVGhyZXNob2xkKXsKICAgICAgICAgICAgICAgIHJldHVybiByb3VuZHNbcm91bmRdLnJhdGU7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgcmV0dXJuIHJvdW5kc1tyb3VuZF0ucmF0ZUJ1bGs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgSGVscGVyIGZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zIGFuZCBpbmNyZWFzZSB0b2tlbnNNaW50ZWQgY291bnRlcgogICAgKi8KICAgIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludDI1NiBhbW91bnQpIGludGVybmFsIHsKICAgICAgICB0b2tlbnNNaW50ZWQgPSB0b2tlbnNNaW50ZWQuYWRkKGFtb3VudCk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnNNaW50ZWQgPD0gaGFyZENhcCk7CiAgICAgICAgYXNzZXJ0KHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIGFtb3VudCkpOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIFNlbmRzIGNvbGxlY3RlZCBmdW5kcyB0byBvd25lcgogICAgKi8KICAgIGZ1bmN0aW9uIGNsYWltRXRoZXIoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBpZih0aGlzLmJhbGFuY2UgPiAwKXsKICAgICAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgRmluYWxpemVzIElDTzogY2hhbmdlcyB0b2tlbiBvd25lcnNoaXAgdG8gZm91bmRlciwgYWxsb3dzIHRva2VuIHRyYW5zZmVycwogICAgKi8KICAgIGZ1bmN0aW9uIGZpbmFsaXplQ3Jvd2RzYWxlKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgZmluYWxpemVkID0gdHJ1ZTsKICAgICAgICBhc3NlcnQodG9rZW4uZmluaXNoTWludGluZygpKTsKICAgICAgICB0b2tlbi5zZXRUcmFuc2ZlckVuYWJsZWQodHJ1ZSk7CiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgICAgIGNsYWltRXRoZXIoKTsKICAgIH0KCn0='.
	

]
