Class {
	#name : #SRTa1f30d32e650cabc0be20b921a014c30052145e0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1f30d32e650cabc0be20b921a014c30052145e0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgovKgpDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBCkNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0EKQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQQpDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBCkNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0EKQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQQpDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBCkNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0EKQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQQpDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBCkNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0EKQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQUNIRVdCQUtBQ0hFV0JBS0FDSEVXQkFLQQoqLwoKY29udHJhY3QgQ2hld2Jha2EgewogICAgCiAgICBtb2RpZmllciBvbmx5QmFnaG9sZGVycygpIHsKICAgICAgICByZXF1aXJlKG15VG9rZW5zKCkgPiAwKTsKICAgICAgICBfOwogICAgfQogICAgCiAgIAogICAgbW9kaWZpZXIgb25seVN0cm9uZ2hhbmRzKCkgewogICAgICAgIHJlcXVpcmUobXlEaXZpZGVuZHModHJ1ZSkgPiAwKTsKICAgICAgICBfOwogICAgfQogICAgCiAgIAogICAgbW9kaWZpZXIgb25seUFkbWluaXN0cmF0b3IoKXsKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHJlcXVpcmUoYWRtaW5pc3RyYXRvcnNba2VjY2FrMjU2KF9jdXN0b21lckFkZHJlc3MpXSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgCiAgIAogICAgbW9kaWZpZXIgYW50aUVhcmx5V2hhbGUodWludDI1NiBfYW1vdW50T2ZFdGhlcmV1bSl7CiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAgICAgIAogICAgICAgIGlmKCBvbmx5QW1iYXNzYWRvcnMgJiYgKCh0b3RhbEV0aGVyZXVtQmFsYW5jZSgpIC0gX2Ftb3VudE9mRXRoZXJldW0pIDw9IGFtYmFzc2Fkb3JRdW90YV8gKSl7CiAgICAgICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzX1tfY3VzdG9tZXJBZGRyZXNzXSA9PSB0cnVlICYmCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgKGFtYmFzc2Fkb3JBY2N1bXVsYXRlZFF1b3RhX1tfY3VzdG9tZXJBZGRyZXNzXSArIF9hbW91bnRPZkV0aGVyZXVtKSA8PSBhbWJhc3NhZG9yTWF4UHVyY2hhc2VfCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICAgIAogICAgICAgICAgICBhbWJhc3NhZG9yQWNjdW11bGF0ZWRRdW90YV9bX2N1c3RvbWVyQWRkcmVzc10gPSBTYWZlTWF0aC5hZGQoYW1iYXNzYWRvckFjY3VtdWxhdGVkUXVvdGFfW19jdXN0b21lckFkZHJlc3NdLCBfYW1vdW50T2ZFdGhlcmV1bSk7CiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBfOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBvbmx5QW1iYXNzYWRvcnMgPSBmYWxzZTsKICAgICAgICAgICAgXzsgICAgCiAgICAgICAgfQogICAgICAgIAogICAgfQogICAgCiAgICAKICAgIAogICAgZXZlbnQgb25Ub2tlblB1cmNoYXNlKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBjdXN0b21lckFkZHJlc3MsCiAgICAgICAgdWludDI1NiBpbmNvbWluZ0V0aGVyZXVtLAogICAgICAgIHVpbnQyNTYgdG9rZW5zTWludGVkLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCByZWZlcnJlZEJ5CiAgICApOwogICAgCiAgICBldmVudCBvblRva2VuU2VsbCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgY3VzdG9tZXJBZGRyZXNzLAogICAgICAgIHVpbnQyNTYgdG9rZW5zQnVybmVkLAogICAgICAgIHVpbnQyNTYgZXRoZXJldW1FYXJuZWQKICAgICk7CiAgICAKICAgIGV2ZW50IG9uUmVpbnZlc3RtZW50KAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBjdXN0b21lckFkZHJlc3MsCiAgICAgICAgdWludDI1NiBldGhlcmV1bVJlaW52ZXN0ZWQsCiAgICAgICAgdWludDI1NiB0b2tlbnNNaW50ZWQKICAgICk7CiAgICAKICAgIGV2ZW50IG9uV2l0aGRyYXcoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGN1c3RvbWVyQWRkcmVzcywKICAgICAgICB1aW50MjU2IGV0aGVyZXVtV2l0aGRyYXduCiAgICApOwogICAgCiAgICAvLyBFUkMyMAogICAgZXZlbnQgVHJhbnNmZXIoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHRvLAogICAgICAgIHVpbnQyNTYgdG9rZW5zCiAgICApOwogICAgCiAgICAKICAgCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQ0hFV1kiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQ0hFV1kiOwogICAgdWludDggY29uc3RhbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICB1aW50OCBjb25zdGFudCBpbnRlcm5hbCBkaXZpZGVuZEZlZV8gPSAzOwogICAgdWludDI1NiBjb25zdGFudCBpbnRlcm5hbCB0b2tlblByaWNlSW5pdGlhbF8gPSAwLjAwMDAwMDEgZXRoZXI7CiAgICB1aW50MjU2IGNvbnN0YW50IGludGVybmFsIHRva2VuUHJpY2VJbmNyZW1lbnRhbF8gPSAwLjAwMDAwMDAxIGV0aGVyOwogICAgdWludDI1NiBjb25zdGFudCBpbnRlcm5hbCBtYWduaXR1ZGUgPSAyKio2NDsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyBzdGFraW5nUmVxdWlyZW1lbnQgPSA1ZTE4OwogICAgCiAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGludGVybmFsIGFtYmFzc2Fkb3JzXzsKICAgIHVpbnQyNTYgY29uc3RhbnQgaW50ZXJuYWwgYW1iYXNzYWRvck1heFB1cmNoYXNlXyA9IDEwIGV0aGVyOwogICAgdWludDI1NiBjb25zdGFudCBpbnRlcm5hbCBhbWJhc3NhZG9yUXVvdGFfID0gMTAgZXRoZXI7CiAgICAKICAgIAogICAgCiAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGludGVybmFsIHRva2VuQmFsYW5jZUxlZGdlcl87CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgaW50ZXJuYWwgcmVmZXJyYWxCYWxhbmNlXzsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBpbnQyNTYpIGludGVybmFsIHBheW91dHNUb187CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgaW50ZXJuYWwgYW1iYXNzYWRvckFjY3VtdWxhdGVkUXVvdGFfOwogICAgdWludDI1NiBpbnRlcm5hbCB0b2tlblN1cHBseV8gPSAwOwogICAgdWludDI1NiBpbnRlcm5hbCBwcm9maXRQZXJTaGFyZV87CiAgICAKICAgCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYm9vbCkgcHVibGljIGFkbWluaXN0cmF0b3JzOwogICAgCiAgIAogICAgYm9vbCBwdWJsaWMgb25seUFtYmFzc2Fkb3JzID0gZmFsc2U7CiAgICAKCgogICAKICAgIGZ1bmN0aW9uIENoZXdiYWthKCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgIAogICAgICAgIGFkbWluaXN0cmF0b3JzWzB4MjM1OTEwZjQ2ODJjZmU3MjUwMDA0NDMwYTRmZmI1YWM3OGY1MjE3ZTFmNmE0YmY5OWM5MzdlZGY3NTdjMzMzMF0gPSB0cnVlOwogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIGFtYmFzc2Fkb3JzX1sweDY0MDVDMjk2ZDU3MjhkZTQ2NTE3NjA5Qjc4REEzNzEzMDk3MTYzZEJdID0gdHJ1ZTsKICAgICAgICAKICAgICAgICAKICAgICAgIAogICAgICAgIGFtYmFzc2Fkb3JzX1sweDE1RmRhNjRmQ2RiY0EyN2E2MEFhOGM2Y2E4ODJBYTNlMURFNEVhNDFdID0gdHJ1ZTsKICAgICAgICAgCiAgICAgICAgYW1iYXNzYWRvcnNfWzB4NDQ4RDlBZTg5REYxNjAzOTJEZDBERDVkZGE2Njk1Mjk5OTM5MEQ1MF0gPSB0cnVlOwogICAgICAgIAogICAgCiAgICAgICAgIAogICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAKCiAgICB9CiAgICAKICAgICAKICAgIC8qKgogICAgICogQ29udmVydHMgYWxsIGluY29taW5nIGV0aGVyZXVtIHRvIHRva2VucyBmb3IgdGhlIGNhbGxlciwgYW5kIHBhc3NlcyBkb3duIHRoZSByZWZlcnJhbCBhZGR5IChpZiBhbnkpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eShhZGRyZXNzIF9yZWZlcnJlZEJ5KQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcHVyY2hhc2VUb2tlbnMobXNnLnZhbHVlLCBfcmVmZXJyZWRCeSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gdG8gaGFuZGxlIGV0aGVyZXVtIHRoYXQgd2FzIHNlbmQgc3RyYWlnaHQgdG8gdGhlIGNvbnRyYWN0CiAgICAgKiBVbmZvcnR1bmF0ZWx5IHdlIGNhbm5vdCB1c2UgYSByZWZlcnJhbCBhZGRyZXNzIHRoaXMgd2F5LgogICAgICovCiAgICBmdW5jdGlvbigpCiAgICAgICAgcGF5YWJsZQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHB1cmNoYXNlVG9rZW5zKG1zZy52YWx1ZSwgMHgwKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBDb252ZXJ0cyBhbGwgb2YgY2FsbGVyJ3MgZGl2aWRlbmRzIHRvIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gcmVpbnZlc3QoKQogICAgICAgIG9ubHlTdHJvbmdoYW5kcygpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAKICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBteURpdmlkZW5kcyhmYWxzZSk7IC8vIHJldHJpZXZlIHJlZi4gYm9udXMgbGF0ZXIgaW4gdGhlIGNvZGUKICAgICAgICAKICAgICAgICAKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHBheW91dHNUb19bX2N1c3RvbWVyQWRkcmVzc10gKz0gIChpbnQyNTYpIChfZGl2aWRlbmRzICogbWFnbml0dWRlKTsKICAgICAgICAKICAgICAgIAogICAgICAgIF9kaXZpZGVuZHMgKz0gcmVmZXJyYWxCYWxhbmNlX1tfY3VzdG9tZXJBZGRyZXNzXTsKICAgICAgICByZWZlcnJhbEJhbGFuY2VfW19jdXN0b21lckFkZHJlc3NdID0gMDsKICAgICAgICAKICAgICAgICAKICAgICAgICB1aW50MjU2IF90b2tlbnMgPSBwdXJjaGFzZVRva2VucyhfZGl2aWRlbmRzLCAweDApOwogICAgICAgIAogICAgICAgIAogICAgICAgIG9uUmVpbnZlc3RtZW50KF9jdXN0b21lckFkZHJlc3MsIF9kaXZpZGVuZHMsIF90b2tlbnMpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEFsaWFzIG9mIHNlbGwoKSBhbmQgd2l0aGRyYXcoKS4KICAgICAqLwogICAgZnVuY3Rpb24gZXhpdCgpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgCiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IF90b2tlbnMgPSB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdOwogICAgICAgIGlmKF90b2tlbnMgPiAwKSBzZWxsKF90b2tlbnMpOwogICAgICAgIAogICAgICAgCiAgICAgICAgd2l0aGRyYXcoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdpdGhkcmF3cyBhbGwgb2YgdGhlIGNhbGxlcnMgZWFybmluZ3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkKICAgICAgICBvbmx5U3Ryb25naGFuZHMoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgCiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBteURpdmlkZW5kcyhmYWxzZSk7IAogICAgICAgIAogICAgICAgCiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSArPSAgKGludDI1NikgKF9kaXZpZGVuZHMgKiBtYWduaXR1ZGUpOwogICAgICAgIAogICAgICAgIAogICAgICAgIF9kaXZpZGVuZHMgKz0gcmVmZXJyYWxCYWxhbmNlX1tfY3VzdG9tZXJBZGRyZXNzXTsKICAgICAgICByZWZlcnJhbEJhbGFuY2VfW19jdXN0b21lckFkZHJlc3NdID0gMDsKICAgICAgICAKICAgICAgIAogICAgICAgIF9jdXN0b21lckFkZHJlc3MudHJhbnNmZXIoX2RpdmlkZW5kcyk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgb25XaXRoZHJhdyhfY3VzdG9tZXJBZGRyZXNzLCBfZGl2aWRlbmRzKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBMaXF1aWZpZXMgdG9rZW5zIHRvIGV0aGVyZXVtLgogICAgICovCiAgICBmdW5jdGlvbiBzZWxsKHVpbnQyNTYgX2Ftb3VudE9mVG9rZW5zKQogICAgICAgIG9ubHlCYWdob2xkZXJzKCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICAKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIAogICAgICAgIHJlcXVpcmUoX2Ftb3VudE9mVG9rZW5zIDw9IHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10pOwogICAgICAgIHVpbnQyNTYgX3Rva2VucyA9IF9hbW91bnRPZlRva2VuczsKICAgICAgICB1aW50MjU2IF9ldGhlcmV1bSA9IHRva2Vuc1RvRXRoZXJldW1fKF90b2tlbnMpOwogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLmRpdihfZXRoZXJldW0sIGRpdmlkZW5kRmVlXyk7CiAgICAgICAgdWludDI1NiBfdGF4ZWRFdGhlcmV1bSA9IFNhZmVNYXRoLnN1YihfZXRoZXJldW0sIF9kaXZpZGVuZHMpOwogICAgICAgIAogICAgICAgIAogICAgICAgIHRva2VuU3VwcGx5XyA9IFNhZmVNYXRoLnN1Yih0b2tlblN1cHBseV8sIF90b2tlbnMpOwogICAgICAgIHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10gPSBTYWZlTWF0aC5zdWIodG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSwgX3Rva2Vucyk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaW50MjU2IF91cGRhdGVkUGF5b3V0cyA9IChpbnQyNTYpIChwcm9maXRQZXJTaGFyZV8gKiBfdG9rZW5zICsgKF90YXhlZEV0aGVyZXVtICogbWFnbml0dWRlKSk7CiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSAtPSBfdXBkYXRlZFBheW91dHM7ICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIGlmICh0b2tlblN1cHBseV8gPiAwKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBwcm9maXRQZXJTaGFyZV8gPSBTYWZlTWF0aC5hZGQocHJvZml0UGVyU2hhcmVfLCAoX2RpdmlkZW5kcyAqIG1hZ25pdHVkZSkgLyB0b2tlblN1cHBseV8pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAKICAgICAgICBvblRva2VuU2VsbChfY3VzdG9tZXJBZGRyZXNzLCBfdG9rZW5zLCBfdGF4ZWRFdGhlcmV1bSk7CiAgICB9CiAgICAKICAgIAogICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMgZnJvbSB0aGUgY2FsbGVyIHRvIGEgbmV3IGhvbGRlci4KICAgICAqIFJlbWVtYmVyLCB0aGVyZSdzIGEgMTAlIGZlZSBoZXJlIGFzIHdlbGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvQWRkcmVzcywgdWludDI1NiBfYW1vdW50T2ZUb2tlbnMpCiAgICAgICAgb25seUJhZ2hvbGRlcnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICAKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIAogICAgICAgIAogICAgICAgIHJlcXVpcmUoIW9ubHlBbWJhc3NhZG9ycyAmJiBfYW1vdW50T2ZUb2tlbnMgPD0gdG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYobXlEaXZpZGVuZHModHJ1ZSkgPiAwKSB3aXRoZHJhdygpOwogICAgICAgIAoKICAgICAgICB1aW50MjU2IF90b2tlbkZlZSA9IFNhZmVNYXRoLmRpdihfYW1vdW50T2ZUb2tlbnMsIGRpdmlkZW5kRmVlXyk7CiAgICAgICAgdWludDI1NiBfdGF4ZWRUb2tlbnMgPSBTYWZlTWF0aC5zdWIoX2Ftb3VudE9mVG9rZW5zLCBfdG9rZW5GZWUpOwogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IHRva2Vuc1RvRXRoZXJldW1fKF90b2tlbkZlZSk7CiAgCiAgICAgICAKICAgICAgICB0b2tlblN1cHBseV8gPSBTYWZlTWF0aC5zdWIodG9rZW5TdXBwbHlfLCBfdG9rZW5GZWUpOwoKICAgICAgICAKICAgICAgICB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdID0gU2FmZU1hdGguc3ViKHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10sIF9hbW91bnRPZlRva2Vucyk7CiAgICAgICAgdG9rZW5CYWxhbmNlTGVkZ2VyX1tfdG9BZGRyZXNzXSA9IFNhZmVNYXRoLmFkZCh0b2tlbkJhbGFuY2VMZWRnZXJfW190b0FkZHJlc3NdLCBfdGF4ZWRUb2tlbnMpOwogICAgICAgIAogICAgICAgCiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSAtPSAoaW50MjU2KSAocHJvZml0UGVyU2hhcmVfICogX2Ftb3VudE9mVG9rZW5zKTsKICAgICAgICBwYXlvdXRzVG9fW190b0FkZHJlc3NdICs9IChpbnQyNTYpIChwcm9maXRQZXJTaGFyZV8gKiBfdGF4ZWRUb2tlbnMpOwogICAgICAgIAogICAgICAgIAogICAgICAgIHByb2ZpdFBlclNoYXJlXyA9IFNhZmVNYXRoLmFkZChwcm9maXRQZXJTaGFyZV8sIChfZGl2aWRlbmRzICogbWFnbml0dWRlKSAvIHRva2VuU3VwcGx5Xyk7CiAgICAgICAgCiAgICAgICAKICAgICAgICBUcmFuc2ZlcihfY3VzdG9tZXJBZGRyZXNzLCBfdG9BZGRyZXNzLCBfdGF4ZWRUb2tlbnMpOwogICAgICAgIAogICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAKICAgIH0KICAgIAogICAgLyotLS0tLS0tLS0tICBBRE1JTklTVFJBVE9SIE9OTFkgRlVOQ1RJT05TICAtLS0tLS0tLS0tKi8KICAgIC8qKgogICAgICogSW4gY2FzZSB0aGUgYW1hc3NhZG9yIHF1b3RhIGlzIG5vdCBtZXQsIHRoZSBhZG1pbmlzdHJhdG9yIGNhbiBtYW51YWxseSBkaXNhYmxlIHRoZSBhbWJhc3NhZG9yIHBoYXNlLgogICAgICovCiAgICBmdW5jdGlvbiBkaXNhYmxlSW5pdGlhbFN0YWdlKCkKICAgICAgICBvbmx5QWRtaW5pc3RyYXRvcigpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgb25seUFtYmFzc2Fkb3JzID0gZmFsc2U7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogSW4gY2FzZSBvbmUgb2YgdXMgZGllcywgd2UgbmVlZCB0byByZXBsYWNlIG91cnNlbHZlcy4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QWRtaW5pc3RyYXRvcihieXRlczMyIF9pZGVudGlmaWVyLCBib29sIF9zdGF0dXMpCiAgICAgICAgb25seUFkbWluaXN0cmF0b3IoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIGFkbWluaXN0cmF0b3JzW19pZGVudGlmaWVyXSA9IF9zdGF0dXM7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUHJlY2F1dGlvbmFyeSBtZWFzdXJlcyBpbiBjYXNlIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBtYXN0ZXJub2RlIHJhdGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFN0YWtpbmdSZXF1aXJlbWVudCh1aW50MjU2IF9hbW91bnRPZlRva2VucykKICAgICAgICBvbmx5QWRtaW5pc3RyYXRvcigpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgc3Rha2luZ1JlcXVpcmVtZW50ID0gX2Ftb3VudE9mVG9rZW5zOwogICAgfQogICAgCiAgICAvKioKICAgICAqIElmIHdlIHdhbnQgdG8gcmVicmFuZCwgd2UgY2FuLgogICAgICovCiAgICBmdW5jdGlvbiBzZXROYW1lKHN0cmluZyBfbmFtZSkKICAgICAgICBvbmx5QWRtaW5pc3RyYXRvcigpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgfQogICAgCiAgICAvKioKICAgICAqIElmIHdlIHdhbnQgdG8gcmVicmFuZCwgd2UgY2FuLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRTeW1ib2woc3RyaW5nIF9zeW1ib2wpCiAgICAgICAgb25seUFkbWluaXN0cmF0b3IoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICB9CgogICAgCiAgICAvKi0tLS0tLS0tLS0gIEhFTFBFUlMgQU5EIENBTENVTEFUT1JTICAtLS0tLS0tLS0tKi8KICAgIC8qKgogICAgICogTWV0aG9kIHRvIHZpZXcgdGhlIGN1cnJlbnQgRXRoZXJldW0gc3RvcmVkIGluIHRoZSBjb250cmFjdAogICAgICogRXhhbXBsZTogdG90YWxFdGhlcmV1bUJhbGFuY2UoKQogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbEV0aGVyZXVtQmFsYW5jZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnModWludCkKICAgIHsKICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHJpZXZlIHRoZSB0b3RhbCB0b2tlbiBzdXBwbHkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiB0b2tlblN1cHBseV87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0cmlldmUgdGhlIHRva2VucyBvd25lZCBieSB0aGUgY2FsbGVyLgogICAgICovCiAgICBmdW5jdGlvbiBteVRva2VucygpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHJldHVybiBiYWxhbmNlT2YoX2N1c3RvbWVyQWRkcmVzcyk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0cmlldmUgdGhlIGRpdmlkZW5kcyBvd25lZCBieSB0aGUgY2FsbGVyLgogICAgICogSWYgYF9pbmNsdWRlUmVmZXJyYWxCb251c2AgaXMgdG8gdG8gMS90cnVlLCB0aGUgcmVmZXJyYWwgYm9udXMgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgY2FsY3VsYXRpb25zLgogICAgICogVGhlIHJlYXNvbiBmb3IgdGhpcywgaXMgdGhhdCBpbiB0aGUgZnJvbnRlbmQsIHdlIHdpbGwgd2FudCB0byBnZXQgdGhlIHRvdGFsIGRpdnMgKGdsb2JhbCArIHJlZikKICAgICAqIEJ1dCBpbiB0aGUgaW50ZXJuYWwgY2FsY3VsYXRpb25zLCB3ZSB3YW50IHRoZW0gc2VwYXJhdGUuIAogICAgICovIAogICAgZnVuY3Rpb24gbXlEaXZpZGVuZHMoYm9vbCBfaW5jbHVkZVJlZmVycmFsQm9udXMpIAogICAgICAgIHB1YmxpYyAKICAgICAgICB2aWV3IAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHJldHVybiBfaW5jbHVkZVJlZmVycmFsQm9udXMgPyBkaXZpZGVuZHNPZihfY3VzdG9tZXJBZGRyZXNzKSArIHJlZmVycmFsQmFsYW5jZV9bX2N1c3RvbWVyQWRkcmVzc10gOiBkaXZpZGVuZHNPZihfY3VzdG9tZXJBZGRyZXNzKSA7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0cmlldmUgdGhlIHRva2VuIGJhbGFuY2Ugb2YgYW55IHNpbmdsZSBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzKQogICAgICAgIHZpZXcKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc107CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0cmlldmUgdGhlIGRpdmlkZW5kIGJhbGFuY2Ugb2YgYW55IHNpbmdsZSBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBkaXZpZGVuZHNPZihhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MpCiAgICAgICAgdmlldwogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gKHVpbnQyNTYpICgoaW50MjU2KShwcm9maXRQZXJTaGFyZV8gKiB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdKSAtIHBheW91dHNUb19bX2N1c3RvbWVyQWRkcmVzc10pIC8gbWFnbml0dWRlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgYnV5IHByaWNlIG9mIDEgaW5kaXZpZHVhbCB0b2tlbi4KICAgICAqLwogICAgZnVuY3Rpb24gc2VsbFByaWNlKCkgCiAgICAgICAgcHVibGljIAogICAgICAgIHZpZXcgCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIC8vIG91ciBjYWxjdWxhdGlvbiByZWxpZXMgb24gdGhlIHRva2VuIHN1cHBseSwgc28gd2UgbmVlZCBzdXBwbHkuIERvaC4KICAgICAgICBpZih0b2tlblN1cHBseV8gPT0gMCl7CiAgICAgICAgICAgIHJldHVybiB0b2tlblByaWNlSW5pdGlhbF8gLSB0b2tlblByaWNlSW5jcmVtZW50YWxfOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQyNTYgX2V0aGVyZXVtID0gdG9rZW5zVG9FdGhlcmV1bV8oMWUxOCk7CiAgICAgICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLmRpdihfZXRoZXJldW0sIGRpdmlkZW5kRmVlXyAgKTsKICAgICAgICAgICAgdWludDI1NiBfdGF4ZWRFdGhlcmV1bSA9IFNhZmVNYXRoLnN1YihfZXRoZXJldW0sIF9kaXZpZGVuZHMpOwogICAgICAgICAgICByZXR1cm4gX3RheGVkRXRoZXJldW07CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHVybiB0aGUgc2VsbCBwcmljZSBvZiAxIGluZGl2aWR1YWwgdG9rZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eVByaWNlKCkgCiAgICAgICAgcHVibGljIAogICAgICAgIHZpZXcgCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIC8vIG91ciBjYWxjdWxhdGlvbiByZWxpZXMgb24gdGhlIHRva2VuIHN1cHBseSwgc28gd2UgbmVlZCBzdXBwbHkuIERvaC4KICAgICAgICBpZih0b2tlblN1cHBseV8gPT0gMCl7CiAgICAgICAgICAgIHJldHVybiB0b2tlblByaWNlSW5pdGlhbF8gKyB0b2tlblByaWNlSW5jcmVtZW50YWxfOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQyNTYgX2V0aGVyZXVtID0gdG9rZW5zVG9FdGhlcmV1bV8oMWUxOCk7CiAgICAgICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLmRpdihfZXRoZXJldW0sIGRpdmlkZW5kRmVlXyAgKTsKICAgICAgICAgICAgdWludDI1NiBfdGF4ZWRFdGhlcmV1bSA9IFNhZmVNYXRoLmFkZChfZXRoZXJldW0sIF9kaXZpZGVuZHMpOwogICAgICAgICAgICByZXR1cm4gX3RheGVkRXRoZXJldW07CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIGZvciB0aGUgZnJvbnRlbmQgdG8gZHluYW1pY2FsbHkgcmV0cmlldmUgdGhlIHByaWNlIHNjYWxpbmcgb2YgYnV5IG9yZGVycy4KICAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zUmVjZWl2ZWQodWludDI1NiBfZXRoZXJldW1Ub1NwZW5kKSAKICAgICAgICBwdWJsaWMgCiAgICAgICAgdmlldyAKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBfZGl2aWRlbmRzID0gU2FmZU1hdGguZGl2KF9ldGhlcmV1bVRvU3BlbmQsIGRpdmlkZW5kRmVlXyk7CiAgICAgICAgdWludDI1NiBfdGF4ZWRFdGhlcmV1bSA9IFNhZmVNYXRoLnN1YihfZXRoZXJldW1Ub1NwZW5kLCBfZGl2aWRlbmRzKTsKICAgICAgICB1aW50MjU2IF9hbW91bnRPZlRva2VucyA9IGV0aGVyZXVtVG9Ub2tlbnNfKF90YXhlZEV0aGVyZXVtKTsKICAgICAgICAKICAgICAgICByZXR1cm4gX2Ftb3VudE9mVG9rZW5zOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEZ1bmN0aW9uIGZvciB0aGUgZnJvbnRlbmQgdG8gZHluYW1pY2FsbHkgcmV0cmlldmUgdGhlIHByaWNlIHNjYWxpbmcgb2Ygc2VsbCBvcmRlcnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUV0aGVyZXVtUmVjZWl2ZWQodWludDI1NiBfdG9rZW5zVG9TZWxsKSAKICAgICAgICBwdWJsaWMgCiAgICAgICAgdmlldyAKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmVxdWlyZShfdG9rZW5zVG9TZWxsIDw9IHRva2VuU3VwcGx5Xyk7CiAgICAgICAgdWludDI1NiBfZXRoZXJldW0gPSB0b2tlbnNUb0V0aGVyZXVtXyhfdG9rZW5zVG9TZWxsKTsKICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBTYWZlTWF0aC5kaXYoX2V0aGVyZXVtLCBkaXZpZGVuZEZlZV8pOwogICAgICAgIHVpbnQyNTYgX3RheGVkRXRoZXJldW0gPSBTYWZlTWF0aC5zdWIoX2V0aGVyZXVtLCBfZGl2aWRlbmRzKTsKICAgICAgICByZXR1cm4gX3RheGVkRXRoZXJldW07CiAgICB9CiAgICAKICAgIAogICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgID0gICAgICAgICAgICBJTlRFUk5BTCBGVU5DVElPTlMgICAgICAgICAgICA9CiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwogICAgZnVuY3Rpb24gcHVyY2hhc2VUb2tlbnModWludDI1NiBfaW5jb21pbmdFdGhlcmV1bSwgYWRkcmVzcyBfcmVmZXJyZWRCeSkKICAgICAgICBhbnRpRWFybHlXaGFsZShfaW5jb21pbmdFdGhlcmV1bSkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICAvLyBkYXRhIHNldHVwCiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IF91bmRpdmlkZWREaXZpZGVuZHMgPSBTYWZlTWF0aC5kaXYoX2luY29taW5nRXRoZXJldW0sIGRpdmlkZW5kRmVlXyk7CiAgICAgICAgdWludDI1NiBfcmVmZXJyYWxCb251cyA9IFNhZmVNYXRoLmRpdihfdW5kaXZpZGVkRGl2aWRlbmRzLCAzKTsKICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBTYWZlTWF0aC5zdWIoX3VuZGl2aWRlZERpdmlkZW5kcywgX3JlZmVycmFsQm9udXMpOwogICAgICAgIHVpbnQyNTYgX3RheGVkRXRoZXJldW0gPSBTYWZlTWF0aC5zdWIoX2luY29taW5nRXRoZXJldW0sIF91bmRpdmlkZWREaXZpZGVuZHMpOwogICAgICAgIHVpbnQyNTYgX2Ftb3VudE9mVG9rZW5zID0gZXRoZXJldW1Ub1Rva2Vuc18oX3RheGVkRXRoZXJldW0pOwogICAgICAgIHVpbnQyNTYgX2ZlZSA9IF9kaXZpZGVuZHMgKiBtYWduaXR1ZGU7CiAKICAgICAgICAvLyBubyBwb2ludCBpbiBjb250aW51aW5nIGV4ZWN1dGlvbiBpZiBPUCBpcyBhIHBvb3JmYWcgcnVzc2lhbiBoYWNrZXIKICAgICAgICAvLyBwcmV2ZW50cyBvdmVyZmxvdyBpbiB0aGUgY2FzZSB0aGF0IHRoZSBweXJhbWlkIHNvbWVob3cgbWFnaWNhbGx5IHN0YXJ0cyBiZWluZyB1c2VkIGJ5IGV2ZXJ5b25lIGluIHRoZSB3b3JsZAogICAgICAgIC8vIChvciBoYWNrZXJzKQogICAgICAgIC8vIGFuZCB5ZXMgd2Uga25vdyB0aGF0IHRoZSBzYWZlbWF0aCBmdW5jdGlvbiBhdXRvbWF0aWNhbGx5IHJ1bGVzIG91dCB0aGUgImdyZWF0ZXIgdGhlbiIgZXF1YXNpb24uCiAgICAgICAgcmVxdWlyZShfYW1vdW50T2ZUb2tlbnMgPiAwICYmIChTYWZlTWF0aC5hZGQoX2Ftb3VudE9mVG9rZW5zLHRva2VuU3VwcGx5XykgPiB0b2tlblN1cHBseV8pKTsKICAgICAgICAKICAgICAgICAvLyBpcyB0aGUgdXNlciByZWZlcnJlZCBieSBhIG1hc3Rlcm5vZGU/CiAgICAgICAgaWYoCiAgICAgICAgICAgIC8vIGlzIHRoaXMgYSByZWZlcnJlZCBwdXJjaGFzZT8KICAgICAgICAgICAgX3JlZmVycmVkQnkgIT0gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwICYmCgogICAgICAgICAgICAvLyBubyBjaGVhdGluZyEKICAgICAgICAgICAgX3JlZmVycmVkQnkgIT0gX2N1c3RvbWVyQWRkcmVzcyAmJgogICAgICAgICAgICAKICAgICAgICAgICAgLy8gZG9lcyB0aGUgcmVmZXJyZXIgaGF2ZSBhdCBsZWFzdCBYIHdob2xlIHRva2Vucz8KICAgICAgICAgICAgLy8gaS5lIGlzIHRoZSByZWZlcnJlciBhIGdvZGx5IGNoYWQgbWFzdGVybm9kZQogICAgICAgICAgICB0b2tlbkJhbGFuY2VMZWRnZXJfW19yZWZlcnJlZEJ5XSA+PSBzdGFraW5nUmVxdWlyZW1lbnQKICAgICAgICApewogICAgICAgICAgICAvLyB3ZWFsdGggcmVkaXN0cmlidXRpb24KICAgICAgICAgICAgcmVmZXJyYWxCYWxhbmNlX1tfcmVmZXJyZWRCeV0gPSBTYWZlTWF0aC5hZGQocmVmZXJyYWxCYWxhbmNlX1tfcmVmZXJyZWRCeV0sIF9yZWZlcnJhbEJvbnVzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBubyByZWYgcHVyY2hhc2UKICAgICAgICAgICAgLy8gYWRkIHRoZSByZWZlcnJhbCBib251cyBiYWNrIHRvIHRoZSBnbG9iYWwgZGl2aWRlbmRzIGNha2UKICAgICAgICAgICAgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLmFkZChfZGl2aWRlbmRzLCBfcmVmZXJyYWxCb251cyk7CiAgICAgICAgICAgIF9mZWUgPSBfZGl2aWRlbmRzICogbWFnbml0dWRlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyB3ZSBjYW4ndCBnaXZlIHBlb3BsZSBpbmZpbml0ZSBldGhlcmV1bQogICAgICAgIGlmKHRva2VuU3VwcGx5XyA+IDApewogICAgICAgICAgICAKICAgICAgICAgICAgLy8gYWRkIHRva2VucyB0byB0aGUgcG9vbAogICAgICAgICAgICB0b2tlblN1cHBseV8gPSBTYWZlTWF0aC5hZGQodG9rZW5TdXBwbHlfLCBfYW1vdW50T2ZUb2tlbnMpOwogCiAgICAgICAgICAgIC8vIHRha2UgdGhlIGFtb3VudCBvZiBkaXZpZGVuZHMgZ2FpbmVkIHRocm91Z2ggdGhpcyB0cmFuc2FjdGlvbiwgYW5kIGFsbG9jYXRlcyB0aGVtIGV2ZW5seSB0byBlYWNoIHNoYXJlaG9sZGVyCiAgICAgICAgICAgIHByb2ZpdFBlclNoYXJlXyArPSAoX2RpdmlkZW5kcyAqIG1hZ25pdHVkZSAvICh0b2tlblN1cHBseV8pKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGUgY3VzdG9tZXIgcmVjZWl2ZXMgb3ZlciBoaXMgcHVyY2hhc2UgCiAgICAgICAgICAgIF9mZWUgPSBfZmVlIC0gKF9mZWUtKF9hbW91bnRPZlRva2VucyAqIChfZGl2aWRlbmRzICogbWFnbml0dWRlIC8gKHRva2VuU3VwcGx5XykpKSk7CiAgICAgICAgCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gYWRkIHRva2VucyB0byB0aGUgcG9vbAogICAgICAgICAgICB0b2tlblN1cHBseV8gPSBfYW1vdW50T2ZUb2tlbnM7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIHVwZGF0ZSBjaXJjdWxhdGluZyBzdXBwbHkgJiB0aGUgbGVkZ2VyIGFkZHJlc3MgZm9yIHRoZSBjdXN0b21lcgogICAgICAgIHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10gPSBTYWZlTWF0aC5hZGQodG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSwgX2Ftb3VudE9mVG9rZW5zKTsKICAgICAgICAKICAgICAgICAvLyBUZWxscyB0aGUgY29udHJhY3QgdGhhdCB0aGUgYnV5ZXIgZG9lc24ndCBkZXNlcnZlIGRpdmlkZW5kcyBmb3IgdGhlIHRva2VucyBiZWZvcmUgdGhleSBvd25lZCB0aGVtOwogICAgICAgIC8vcmVhbGx5IGkga25vdyB5b3UgdGhpbmsgeW91IGRvIGJ1dCB5b3UgZG9uJ3QKICAgICAgICBpbnQyNTYgX3VwZGF0ZWRQYXlvdXRzID0gKGludDI1NikgKChwcm9maXRQZXJTaGFyZV8gKiBfYW1vdW50T2ZUb2tlbnMpIC0gX2ZlZSk7CiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSArPSBfdXBkYXRlZFBheW91dHM7CiAgICAgICAgCiAgICAgICAgLy8gZmlyZSBldmVudAogICAgICAgIG9uVG9rZW5QdXJjaGFzZShfY3VzdG9tZXJBZGRyZXNzLCBfaW5jb21pbmdFdGhlcmV1bSwgX2Ftb3VudE9mVG9rZW5zLCBfcmVmZXJyZWRCeSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIF9hbW91bnRPZlRva2VuczsKICAgIH0KCiAgICAvKioKICAgICAqIENhbGN1bGF0ZSBUb2tlbiBwcmljZSBiYXNlZCBvbiBhbiBhbW91bnQgb2YgaW5jb21pbmcgZXRoZXJldW0KICAgICAqIEl0J3MgYW4gYWxnb3JpdGhtLCBob3BlZnVsbHkgd2UgZ2F2ZSB5b3UgdGhlIHdoaXRlcGFwZXIgd2l0aCBpdCBpbiBzY2llbnRpZmljIG5vdGF0aW9uOwogICAgICogU29tZSBjb252ZXJzaW9ucyBvY2N1cnJlZCB0byBwcmV2ZW50IGRlY2ltYWwgZXJyb3JzIG9yIHVuZGVyZmxvd3MgLyBvdmVyZmxvd3MgaW4gc29saWRpdHkgY29kZS4KICAgICAqLwogICAgZnVuY3Rpb24gZXRoZXJldW1Ub1Rva2Vuc18odWludDI1NiBfZXRoZXJldW0pCiAgICAgICAgaW50ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQyNTYgX3Rva2VuUHJpY2VJbml0aWFsID0gdG9rZW5QcmljZUluaXRpYWxfICogMWUxODsKICAgICAgICB1aW50MjU2IF90b2tlbnNSZWNlaXZlZCA9IAogICAgICAgICAoCiAgICAgICAgICAgICgKICAgICAgICAgICAgICAgIC8vIHVuZGVyZmxvdyBhdHRlbXB0cyBCVEZPCiAgICAgICAgICAgICAgICBTYWZlTWF0aC5zdWIoCiAgICAgICAgICAgICAgICAgICAgKHNxcnQKICAgICAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKF90b2tlblByaWNlSW5pdGlhbCoqMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICgyKih0b2tlblByaWNlSW5jcmVtZW50YWxfICogMWUxOCkqKF9ldGhlcmV1bSAqIDFlMTgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCgodG9rZW5QcmljZUluY3JlbWVudGFsXykqKjIpKih0b2tlblN1cHBseV8qKjIpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDIqKHRva2VuUHJpY2VJbmNyZW1lbnRhbF8pKl90b2tlblByaWNlSW5pdGlhbCp0b2tlblN1cHBseV8pCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApLCBfdG9rZW5QcmljZUluaXRpYWwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKS8odG9rZW5QcmljZUluY3JlbWVudGFsXykKICAgICAgICApLSh0b2tlblN1cHBseV8pCiAgICAgICAgOwogIAogICAgICAgIHJldHVybiBfdG9rZW5zUmVjZWl2ZWQ7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQ2FsY3VsYXRlIHRva2VuIHNlbGwgdmFsdWUuCiAgICAgKiBJdCdzIGFuIGFsZ29yaXRobSwgaG9wZWZ1bGx5IHdlIGdhdmUgeW91IHRoZSB3aGl0ZXBhcGVyIHdpdGggaXQgaW4gc2NpZW50aWZpYyBub3RhdGlvbjsKICAgICAqIFNvbWUgY29udmVyc2lvbnMgb2NjdXJyZWQgdG8gcHJldmVudCBkZWNpbWFsIGVycm9ycyBvciB1bmRlcmZsb3dzIC8gb3ZlcmZsb3dzIGluIHNvbGlkaXR5IGNvZGUuCiAgICAgKi8KICAgICBmdW5jdGlvbiB0b2tlbnNUb0V0aGVyZXVtXyh1aW50MjU2IF90b2tlbnMpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewoKICAgICAgICB1aW50MjU2IHRva2Vuc18gPSAoX3Rva2VucyArIDFlMTgpOwogICAgICAgIHVpbnQyNTYgX3Rva2VuU3VwcGx5ID0gKHRva2VuU3VwcGx5XyArIDFlMTgpOwogICAgICAgIHVpbnQyNTYgX2V0aGVyUmVjZWl2ZWQgPQogICAgICAgICgKICAgICAgICAgICAgLy8gdW5kZXJmbG93IGF0dGVtcHRzIEJURk8KICAgICAgICAgICAgU2FmZU1hdGguc3ViKAogICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICgKICAgICAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5QcmljZUluaXRpYWxfICsodG9rZW5QcmljZUluY3JlbWVudGFsXyAqIChfdG9rZW5TdXBwbHkvMWUxOCkpCiAgICAgICAgICAgICAgICAgICAgICAgICktdG9rZW5QcmljZUluY3JlbWVudGFsXwogICAgICAgICAgICAgICAgICAgICkqKHRva2Vuc18gLSAxZTE4KQogICAgICAgICAgICAgICAgKSwodG9rZW5QcmljZUluY3JlbWVudGFsXyooKHRva2Vuc18qKjItdG9rZW5zXykvMWUxOCkpLzIKICAgICAgICAgICAgKQogICAgICAgIC8xZTE4KTsKICAgICAgICByZXR1cm4gX2V0aGVyUmVjZWl2ZWQ7CiAgICB9CiAgICAKICAgIAogICAgLy9UaGlzIGlzIHdoZXJlIGFsbCB5b3VyIGdhcyBnb2VzLCBzb3JyeQogICAgLy9Ob3Qgc29ycnksIHlvdSBwcm9iYWJseSBvbmx5IHBhaWQgMSBnd2VpCiAgICBmdW5jdGlvbiBzcXJ0KHVpbnQgeCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IHkpIHsKICAgICAgICB1aW50IHogPSAoeCArIDEpIC8gMjsKICAgICAgICB5ID0geDsKICAgICAgICB3aGlsZSAoeiA8IHkpIHsKICAgICAgICAgICAgeSA9IHo7CiAgICAgICAgICAgIHogPSAoeCAvIHogKyB6KSAvIDI7CiAgICAgICAgfQogICAgfQp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICAvKioKICAgICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgICAqLwogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAgICovCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQ=='.
	

]
