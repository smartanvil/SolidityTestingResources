Class {
	#name : #SRT4d8cf569c2fd7c436f44dea3763c6bf967358e8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d8cf569c2fd7c436f44dea3763c6bf967358e8d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgUmVlbnRyYW5jeUd1YXJkIHsKCiAgLyoqCiAgICogQGRldiBXZSB1c2UgYSBzaW5nbGUgbG9jayBmb3IgdGhlIHdob2xlIGNvbnRyYWN0LgogICAqLwogIGJvb2wgcHJpdmF0ZSByZWVudHJhbmN5X2xvY2sgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBQcmV2ZW50cyBhIGNvbnRyYWN0IGZyb20gY2FsbGluZyBpdHNlbGYsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkuCiAgICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICAgKiBtYXJrIGl0IGBleHRlcm5hbGAuIENhbGxpbmcgb25lIG5vblJlZW50cmFudCBmdW5jdGlvbiBmcm9tCiAgICogYW5vdGhlciBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCB5b3UgY2FuIGltcGxlbWVudCBhCiAgICogYHByaXZhdGVgIGZ1bmN0aW9uIGRvaW5nIHRoZSBhY3R1YWwgd29yaywgYW5kIGEgYGV4dGVybmFsYAogICAqIHdyYXBwZXIgbWFya2VkIGFzIGBub25SZWVudHJhbnRgLgogICAqLwogIG1vZGlmaWVyIG5vblJlZW50cmFudCgpIHsKICAgIHJlcXVpcmUoIXJlZW50cmFuY3lfbG9jayk7CiAgICByZWVudHJhbmN5X2xvY2sgPSB0cnVlOwogICAgXzsKICAgIHJlZW50cmFuY3lfbG9jayA9IGZhbHNlOwogIH0KCn0KCmNvbnRyYWN0IE11bHRpb3duZWQgewoKICAgIC8vIFRZUEVTCgogICAgLy8gc3RydWN0IGZvciB0aGUgc3RhdHVzIG9mIGEgcGVuZGluZyBvcGVyYXRpb24uCiAgICBzdHJ1Y3QgUGVuZGluZ1N0YXRlIHsKICAgICAgICB1aW50IHlldE5lZWRlZDsKICAgICAgICB1aW50IG93bmVyc0RvbmU7CiAgICAgICAgdWludCBpbmRleDsKICAgIH0KCiAgICAvLyBFVkVOVFMKCiAgICAvLyB0aGlzIGNvbnRyYWN0IG9ubHkgaGFzIGZpdmUgdHlwZXMgb2YgZXZlbnRzOiBpdCBjYW4gYWNjZXB0IGEgY29uZmlybWF0aW9uLCBpbiB3aGljaCBjYXNlCiAgICAvLyB3ZSByZWNvcmQgb3duZXIgYW5kIG9wZXJhdGlvbiAoaGFzaCkgYWxvbmdzaWRlIGl0LgogICAgZXZlbnQgQ29uZmlybWF0aW9uKGFkZHJlc3Mgb3duZXIsIGJ5dGVzMzIgb3BlcmF0aW9uKTsKICAgIGV2ZW50IFJldm9rZShhZGRyZXNzIG93bmVyLCBieXRlczMyIG9wZXJhdGlvbik7CiAgICAvLyBzb21lIG90aGVycyBhcmUgaW4gdGhlIGNhc2Ugb2YgYW4gb3duZXIgY2hhbmdpbmcuCiAgICBldmVudCBPd25lckNoYW5nZWQoYWRkcmVzcyBvbGRPd25lciwgYWRkcmVzcyBuZXdPd25lcik7CiAgICBldmVudCBPd25lckFkZGVkKGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJSZW1vdmVkKGFkZHJlc3Mgb2xkT3duZXIpOwogICAgLy8gdGhlIGxhc3Qgb25lIGlzIGVtaXR0ZWQgaWYgdGhlIHJlcXVpcmVkIHNpZ25hdHVyZXMgY2hhbmdlCiAgICBldmVudCBSZXF1aXJlbWVudENoYW5nZWQodWludCBuZXdSZXF1aXJlbWVudCk7CgogICAgLy8gTU9ESUZJRVJTCgogICAgLy8gc2ltcGxlIHNpbmdsZS1zaWcgZnVuY3Rpb24gbW9kaWZpZXIuCiAgICBtb2RpZmllciBvbmx5b3duZXIgewogICAgICAgIGlmIChpc093bmVyKG1zZy5zZW5kZXIpKQogICAgICAgICAgICBfOwogICAgfQoKICAgIC8vIG11bHRpLXNpZyBmdW5jdGlvbiBtb2RpZmllcjogdGhlIG9wZXJhdGlvbiBtdXN0IGhhdmUgYW4gaW50cmluc2ljIGhhc2ggaW4gb3JkZXIKICAgIC8vIHRoYXQgbGF0ZXIgYXR0ZW1wdHMgY2FuIGJlIHJlYWxpc2VkIGFzIHRoZSBzYW1lIHVuZGVybHlpbmcgb3BlcmF0aW9uIGFuZAogICAgLy8gdGh1cyBjb3VudCBhcyBjb25maXJtYXRpb25zLgogICAgbW9kaWZpZXIgb25seW1hbnlvd25lcnMoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgaWYgKGNvbmZpcm1BbmRDaGVjayhfb3BlcmF0aW9uKSkKICAgICAgICAgICAgXzsKICAgIH0KCiAgICAvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgaXMgZ2l2ZW4gbnVtYmVyIG9mIHNpZ3MgcmVxdWlyZWQgdG8gZG8gcHJvdGVjdGVkICJvbmx5bWFueW93bmVycyIgdHJhbnNhY3Rpb25zCiAgICAvLyBhcyB3ZWxsIGFzIHRoZSBzZWxlY3Rpb24gb2YgYWRkcmVzc2VzIGNhcGFibGUgb2YgY29uZmlybWluZyB0aGVtLgogICAgZnVuY3Rpb24gTXVsdGlvd25lZChhZGRyZXNzW10gX293bmVycywgdWludCBfcmVxdWlyZWQpIHB1YmxpYyB7CiAgICAgICAgbV9udW1Pd25lcnMgPSBfb3duZXJzLmxlbmd0aDsKICAgICAgICBtX2NoaWVmT3duZXJJbmRleEJpdCA9IDIqKjE7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbV9udW1Pd25lcnM7IGkrKykgewogICAgICAgICAgICBtX293bmVyc1sxICsgaV0gPSBfb3duZXJzW2ldOwogICAgICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXJzW2ldKV0gPSAxICsgaTsKICAgICAgICB9CiAgICAgICAgbV9yZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgIH0KICAgIAogICAgLy8gUmV2b2tlcyBhIHByaW9yIGNvbmZpcm1hdGlvbiBvZiB0aGUgZ2l2ZW4gb3BlcmF0aW9uCiAgICBmdW5jdGlvbiByZXZva2UoYnl0ZXMzMiBfb3BlcmF0aW9uKSBleHRlcm5hbCB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildOwogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGV5J3JlIGFuIG93bmVyCiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgdmFyIHBlbmRpbmcgPSBtX3BlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPiAwKSB7CiAgICAgICAgICAgIHBlbmRpbmcueWV0TmVlZGVkKys7CiAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSAtPSBvd25lckluZGV4Qml0OwogICAgICAgICAgICBSZXZva2UobXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLyBSZXBsYWNlcyBhbiBvd25lciBgX2Zyb21gIHdpdGggYW5vdGhlciBgX3RvYC4KICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvKSBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgZXh0ZXJuYWwgewogICAgICAgIHVpbnQgb3duZXJJbmRleCA9IG1fb3duZXJJbmRleFt1aW50KF9mcm9tKV07CiAgICAgICAgaWYgKGlzT3duZXIoX3RvKSB8fCBvd25lckluZGV4ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgbV9vd25lcnNbb3duZXJJbmRleF0gPSBfdG87CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX2Zyb20pXSA9IDA7CiAgICAgICAgbV9vd25lckluZGV4W3VpbnQoX3RvKV0gPSBvd25lckluZGV4OwogICAgICAgIE93bmVyQ2hhbmdlZChfZnJvbSwgX3RvKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgaWYgKGlzT3duZXIoX293bmVyKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAobV9udW1Pd25lcnMgPj0gY19tYXhPd25lcnMpIHsKICAgICAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgICAgIHJlb3JnYW5pemVPd25lcnMoKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShtX251bU93bmVycyA8IGNfbWF4T3duZXJzKTsKICAgICAgICBtX251bU93bmVycysrOwogICAgICAgIG1fb3duZXJzW21fbnVtT3duZXJzXSA9IF9vd25lcjsKICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXIpXSA9IG1fbnVtT3duZXJzOwogICAgICAgIE93bmVyQWRkZWQoX293bmVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVtb3ZlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSBleHRlcm5hbCB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQoX293bmVyKV07CiAgICAgICAgaWYgKG93bmVySW5kZXggPT0gMCB8fCBtX3JlcXVpcmVkID4gbV9udW1Pd25lcnMgLSAxKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIG1fb3duZXJzW293bmVySW5kZXhdID0gMDsKICAgICAgICBtX293bmVySW5kZXhbdWludChfb3duZXIpXSA9IDA7CiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgcmVvcmdhbml6ZU93bmVycygpOyAvL21ha2Ugc3VyZSBtX251bU93bmVyIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3duZXJzIGFuZCBhbHdheXMgcG9pbnRzIHRvIHRoZSBvcHRpbWFsIGZyZWUgc2xvdAogICAgICAgIE93bmVyUmVtb3ZlZChfb3duZXIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VSZXF1aXJlbWVudCh1aW50IF9uZXdSZXF1aXJlZCkgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpIGV4dGVybmFsIHsKICAgICAgICBpZiAoX25ld1JlcXVpcmVkID4gbV9udW1Pd25lcnMpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBtX3JlcXVpcmVkID0gX25ld1JlcXVpcmVkOwogICAgICAgIGNsZWFyUGVuZGluZygpOwogICAgICAgIFJlcXVpcmVtZW50Q2hhbmdlZChfbmV3UmVxdWlyZWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FkZHIpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBtX293bmVySW5kZXhbdWludChfYWRkcildID4gMDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaGFzQ29uZmlybWVkKGJ5dGVzMzIgX29wZXJhdGlvbiwgYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB2YXIgcGVuZGluZyA9IG1fcGVuZGluZ1tfb3BlcmF0aW9uXTsKICAgICAgICB1aW50IG93bmVySW5kZXggPSBtX293bmVySW5kZXhbdWludChfb3duZXIpXTsKCiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXkncmUgYW4gb3duZXIKICAgICAgICBpZiAob3duZXJJbmRleCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIGRldGVybWluZSB0aGUgYml0IHRvIHNldCBmb3IgdGhpcyBvd25lci4KICAgICAgICB1aW50IG93bmVySW5kZXhCaXQgPSAyKipvd25lckluZGV4OwogICAgICAgIGlmIChwZW5kaW5nLm93bmVyc0RvbmUgJiBvd25lckluZGV4Qml0ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8gSU5URVJOQUwgTUVUSE9EUwoKICAgIGZ1bmN0aW9uIGNvbmZpcm1BbmRDaGVjayhieXRlczMyIF9vcGVyYXRpb24pIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBkZXRlcm1pbmUgd2hhdCBpbmRleCB0aGUgcHJlc2VudCBzZW5kZXIgaXM6CiAgICAgICAgdWludCBvd25lckluZGV4ID0gbV9vd25lckluZGV4W3VpbnQobXNnLnNlbmRlcildOwogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGV5J3JlIGFuIG93bmVyCiAgICAgICAgcmVxdWlyZShvd25lckluZGV4ICE9IDApOwoKICAgICAgICB2YXIgcGVuZGluZyA9IG1fcGVuZGluZ1tfb3BlcmF0aW9uXTsKICAgICAgICAvLyBpZiB3ZSdyZSBub3QgeWV0IHdvcmtpbmcgb24gdGhpcyBvcGVyYXRpb24sIHN3aXRjaCBvdmVyIGFuZCByZXNldCB0aGUgY29uZmlybWF0aW9uIHN0YXR1cy4KICAgICAgICBpZiAocGVuZGluZy55ZXROZWVkZWQgPT0gMCkgewogICAgICAgICAgICAvLyByZXNldCBjb3VudCBvZiBjb25maXJtYXRpb25zIG5lZWRlZC4KICAgICAgICAgICAgcGVuZGluZy55ZXROZWVkZWQgPSBjX21heE93bmVycyArIG1fcmVxdWlyZWQ7CiAgICAgICAgICAgIC8vIHJlc2V0IHdoaWNoIG93bmVycyBoYXZlIGNvbmZpcm1lZCAobm9uZSkgLSBzZXQgb3VyIGJpdG1hcCB0byAwLgogICAgICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgPSAwOwogICAgICAgICAgICBwZW5kaW5nLmluZGV4ID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoKys7CiAgICAgICAgICAgIG1fcGVuZGluZ0luZGV4W3BlbmRpbmcuaW5kZXhdID0gX29wZXJhdGlvbjsKICAgICAgICB9CiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBiaXQgdG8gc2V0IGZvciB0aGlzIG93bmVyLgogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IDIqKm93bmVySW5kZXg7CiAgICAgICAgLy8gbWFrZSBzdXJlIHdlICh0aGUgbWVzc2FnZSBzZW5kZXIpIGhhdmVuJ3QgY29uZmlybWVkIHRoaXMgb3BlcmF0aW9uIHByZXZpb3VzbHkuCiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPT0gMCkgewogICAgICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgX29wZXJhdGlvbik7CiAgICAgICAgICAgIC8vIG9rIC0gY2hlY2sgaWYgY291bnQgaXMgZW5vdWdoIHRvIGdvIGFoZWFkIGFuZCBjaGllZiBvd25lciBjb25maXJtZWQgb3BlcmF0aW9uLgogICAgICAgICAgICBpZiAoKHBlbmRpbmcueWV0TmVlZGVkIDw9IGNfbWF4T3duZXJzICsgMSkgJiYgKChwZW5kaW5nLm93bmVyc0RvbmUgJiBtX2NoaWVmT3duZXJJbmRleEJpdCAhPSAwKSB8fCAob3duZXJJbmRleEJpdCA9PSBtX2NoaWVmT3duZXJJbmRleEJpdCkpKSB7CiAgICAgICAgICAgICAgICAvLyBlbm91Z2ggY29uZmlybWF0aW9uczogcmVzZXQgYW5kIHJ1biBpbnRlcmlvci4KICAgICAgICAgICAgICAgIGRlbGV0ZSBtX3BlbmRpbmdJbmRleFttX3BlbmRpbmdbX29wZXJhdGlvbl0uaW5kZXhdOwogICAgICAgICAgICAgICAgZGVsZXRlIG1fcGVuZGluZ1tfb3BlcmF0aW9uXTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gbm90IGVub3VnaDogcmVjb3JkIHRoYXQgdGhpcyBvd25lciBpbiBwYXJ0aWN1bGFyIGNvbmZpcm1lZC4KICAgICAgICAgICAgICAgIHBlbmRpbmcueWV0TmVlZGVkLS07CiAgICAgICAgICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgfD0gb3duZXJJbmRleEJpdDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW9yZ2FuaXplT3duZXJzKCkgcHJpdmF0ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBmcmVlID0gMTsKICAgICAgICB3aGlsZSAoZnJlZSA8IG1fbnVtT3duZXJzKSB7CiAgICAgICAgICAgIHdoaWxlIChmcmVlIDwgbV9udW1Pd25lcnMgJiYgbV9vd25lcnNbZnJlZV0gIT0gMCkgewogICAgICAgICAgICAgICAgZnJlZSsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlIChtX251bU93bmVycyA+IDEgJiYgbV9vd25lcnNbbV9udW1Pd25lcnNdID09IDApIHsKICAgICAgICAgICAgICAgIG1fbnVtT3duZXJzLS07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGZyZWUgPCBtX251bU93bmVycyAmJiBtX293bmVyc1ttX251bU93bmVyc10gIT0gMCAmJiBtX293bmVyc1tmcmVlXSA9PSAwKSB7CiAgICAgICAgICAgICAgICBtX293bmVyc1tmcmVlXSA9IG1fb3duZXJzW21fbnVtT3duZXJzXTsKICAgICAgICAgICAgICAgIG1fb3duZXJJbmRleFt1aW50KG1fb3duZXJzW2ZyZWVdKV0gPSBmcmVlOwogICAgICAgICAgICAgICAgbV9vd25lcnNbbV9udW1Pd25lcnNdID0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2xlYXJQZW5kaW5nKCkgaW50ZXJuYWwgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9wZW5kaW5nSW5kZXgubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChtX3BlbmRpbmdJbmRleFtpXSAhPSAwKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgbV9wZW5kaW5nW21fcGVuZGluZ0luZGV4W2ldXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBkZWxldGUgbV9wZW5kaW5nSW5kZXg7CiAgICB9CiAgICAgICAgCiAgICAvLyBGSUVMRFMKCiAgICAvLyB0aGUgbnVtYmVyIG9mIG93bmVycyB0aGF0IG11c3QgY29uZmlybSB0aGUgc2FtZSBvcGVyYXRpb24gYmVmb3JlIGl0IGlzIHJ1bi4KICAgIHVpbnQgcHVibGljIG1fcmVxdWlyZWQ7CiAgICAvLyBwb2ludGVyIHVzZWQgdG8gZmluZCBhIGZyZWUgc2xvdCBpbiBtX293bmVycwogICAgdWludCBwdWJsaWMgbV9udW1Pd25lcnM7CiAgICAKICAgIC8vIGxpc3Qgb2Ygb3duZXJzCiAgICBhZGRyZXNzWzhdIHB1YmxpYyBtX293bmVyczsKICAgIHVpbnQgcHVibGljIG1fY2hpZWZPd25lckluZGV4Qml0OwogICAgdWludCBjb25zdGFudCBjX21heE93bmVycyA9IDc7CiAgICAvLyBpbmRleCBvbiB0aGUgbGlzdCBvZiBvd25lcnMgdG8gYWxsb3cgcmV2ZXJzZSBsb29rdXAKICAgIG1hcHBpbmcodWludCA9PiB1aW50KSBwdWJsaWMgbV9vd25lckluZGV4OwogICAgLy8gdGhlIG9uZ29pbmcgb3BlcmF0aW9ucy4KICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBQZW5kaW5nU3RhdGUpIHB1YmxpYyBtX3BlbmRpbmc7CiAgICBieXRlczMyW10gcHVibGljIG1fcGVuZGluZ0luZGV4Owp9Cgpjb250cmFjdCBBbHBoYU1hcmtldElDTyBpcyBNdWx0aW93bmVkLCBSZWVudHJhbmN5R3VhcmQgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICBlbnVtIFN0YXRlIHsgREVGSU5FRCwgSU5fUFJPR1JFU1NfVE9LRU5fRlJFRVpFLCBJTl9QUk9HUkVTUywgRkFJTEVELCBTVUNDRUVERUQgfQoKICAgIGV2ZW50IEV0aGVyVHJhbnNmZXJlZChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgU3RhdGVVcGRhdGVkKFN0YXRlIHN0YXRlKTsKICAgIGV2ZW50IEludmVzdG1lbnRQcm9jZXNzZWQoYWRkcmVzcyBmcm9tLCB1aW50IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBBbHBoYU1hcmtldElDTyhhZGRyZXNzW10gX293bmVycykgTXVsdGlvd25lZChfb3duZXJzLCBfb3duZXJzLmxlbmd0aCAtIDEpIHB1YmxpYyB7fQoKICAgIGZ1bmN0aW9uIHNldFRva2VuKGFkZHJlc3MgX3Rva2VuKSBleHRlcm5hbCBvbmx5b3duZXIgewogICAgICAgIHJlcXVpcmUoYWRkcmVzcyh0b2tlbikgPT0gMHgwKTsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoX3Rva2VuKSAhPSAweDApOwogICAgICAgIHRva2VuID0gQWxwaGFNYXJrZXRDb2luKF90b2tlbik7CiAgICAgICAgdG9rZW5zVG9Tb2xkID0gdG9rZW4udG90YWxTdXBwbHkoKS5tdWwoNjApLmRpdigxMDApOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEV4Y2hhbmdlcihhZGRyZXNzIF9leGNoYW5nZXIpIGV4dGVybmFsIG9ubHlvd25lciB7CiAgICAgICAgcmVxdWlyZShfZXhjaGFuZ2VyICE9IDB4MCAmJiBleGNoYW5nZXIgPT0gMHgwKTsKICAgICAgICBleGNoYW5nZXIgPSBfZXhjaGFuZ2VyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbmRUb2tlbnNUb0JvdW50eVdhbGxldChhZGRyZXNzIF9ib3VudHlXYWxsZXQpIGV4dGVybmFsIG9ubHlvd25lciB7CiAgICAgICAgcmVxdWlyZSghaXNCb3VudHlTZW50ICYmIF9ib3VudHlXYWxsZXQgIT0gMHgwKTsKCiAgICAgICAgdG9rZW4uYWRkRWFybHlBY2Nlc3NBZGRyZXNzKF9ib3VudHlXYWxsZXQpOwogICAgICAgIHVpbnQyNTYgdG9rZW5zRm9yQm91bnR5ID0gdG9rZW4udG90YWxTdXBwbHkoKS5tdWwoMjApLmRpdigxMDApOwogICAgICAgIHRva2VuLnRyYW5zZmVyKF9ib3VudHlXYWxsZXQsIHRva2Vuc0ZvckJvdW50eSk7CiAgICAgICAgaXNCb3VudHlTZW50ID0gdHJ1ZTsKICAgIH0KICAgIAoKICAgIG1vZGlmaWVyIHByb2Nlc3NTdGF0ZSB7CiAgICAgICAgdXBkYXRlU3RhdGUoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGljb0luUHJvZ3Jlc3MgewogICAgICAgIHJlcXVpcmUoKGljb1N0YXRlID09IFN0YXRlLklOX1BST0dSRVNTIHx8IGljb1N0YXRlID09IFN0YXRlLklOX1BST0dSRVNTX1RPS0VOX0ZSRUVaRSkgJiYgY3VycmVudFRpbWUoKSA8IGVuZFRpbWUpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSBwdWJsaWMgewogICAgICAgIHVpbnQgY3VyclRpbWUgPSBjdXJyZW50VGltZSgpOwogICAgICAgIAogICAgICAgIGlmIChpY29TdGF0ZSA9PSBTdGF0ZS5JTl9QUk9HUkVTU19UT0tFTl9GUkVFWkUgfHwgaWNvU3RhdGUgPT0gU3RhdGUuSU5fUFJPR1JFU1MpIHsKICAgICAgICAgICAgaWYgKGljb1N0YXRlID09IFN0YXRlLklOX1BST0dSRVNTX1RPS0VOX0ZSRUVaRSkgewogICAgICAgICAgICAgICAgaWYgKGN1cnJUaW1lID49IHRva2VuVW5mcmVlemVUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5hYmxlVHJhbnNmZXJpbmcoKTsKICAgICAgICAgICAgICAgICAgICBpY29TdGF0ZSA9IFN0YXRlLklOX1BST0dSRVNTOwogICAgICAgICAgICAgICAgICAgIGVtaXQgU3RhdGVVcGRhdGVkKGljb1N0YXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY3VyclRpbWUgPj0gZW5kVGltZSB8fCB0b3RhbEludmVzdG1lbnQgPj0gaGFyZENhcCB8fCB0b3RhbFNvbGQgPj0gdG9rZW5zVG9Tb2xkKSB7CiAgICAgICAgICAgICAgICB0b2tlbi50cmFuc2ZlcihleGNoYW5nZXIsIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgICAgICAgICAgICAgICBpY29TdGF0ZSA9IFN0YXRlLlNVQ0NFRURFRDsKICAgICAgICAgICAgICAgIGVtaXQgU3RhdGVVcGRhdGVkKGljb1N0YXRlKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoaWNvU3RhdGUgPT0gU3RhdGUuREVGSU5FRCkgewogICAgICAgICAgICBpZiAoY3VyclRpbWUgPj0gc3RhcnRUaW1lKSB7CiAgICAgICAgICAgICAgICBpY29TdGF0ZSA9IFN0YXRlLklOX1BST0dSRVNTX1RPS0VOX0ZSRUVaRTsKICAgICAgICAgICAgICAgIGVtaXQgU3RhdGVVcGRhdGVkKGljb1N0YXRlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZXdhcmRDb250cmlidXRvcnMoYWRkcmVzc1tdIF9jb250cmlidXRvcnMsIHVpbnQyNTZbXSBfdG9rZW5BbW91bnRzKSBleHRlcm5hbCBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgewogICAgICAgIGlmKGlzQ29udHJpYnV0b3JzUmV3YXJkZWQgfHwgX2NvbnRyaWJ1dG9ycy5sZW5ndGggIT0gX3Rva2VuQW1vdW50cy5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdWludDI1NiBzdW0gPSAwOwogICAgICAgIGZvciAodWludDY0IGkgPSAwOyBpIDwgX2NvbnRyaWJ1dG9ycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKF9jb250cmlidXRvcnNbaV0gIT0gMHgwKTsKICAgICAgICAgICAgc3VtID0gc3VtLmFkZChfdG9rZW5BbW91bnRzW2ldKTsKICAgICAgICAgICAgdG9rZW4udHJhbnNmZXIoX2NvbnRyaWJ1dG9yc1tpXSwgX3Rva2VuQW1vdW50c1tpXSk7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUoc3VtID09IHRva2VuLnRvdGFsU3VwcGx5KCkubXVsKDIwKS5kaXYoMTAwKSk7CiAgICAgICAgaXNDb250cmlidXRvcnNSZXdhcmRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9rZW5zQ291bnRQZXJFdGhlcigpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQgY3VyclRpbWUgPSBjdXJyZW50VGltZSgpOwogICAgICAgIHJlcXVpcmUoY3VyclRpbWUgPj0gc3RhcnRUaW1lKTsKCiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgMSB3ZWVrcykge3JldHVybiAgMjc3Nzg7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDIgd2Vla3MpIHtyZXR1cm4gIDI1MDAwO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAzIHdlZWtzKSB7cmV0dXJuICAyMjcyNzt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgNCB3ZWVrcykge3JldHVybiAgMjA4MzM7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDUgd2Vla3MpIHtyZXR1cm4gIDE5MjMwO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA2IHdlZWtzKSB7cmV0dXJuICAxNzg1Nzt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgNyB3ZWVrcykge3JldHVybiAgMTY2Njc7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDggd2Vla3MpIHtyZXR1cm4gIDE1NjI1O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA5IHdlZWtzKSB7cmV0dXJuICAxNDcwNjt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgMTAgd2Vla3MpIHtyZXR1cm4gMTM4ODk7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDExIHdlZWtzKSB7cmV0dXJuIDEzMTU4O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAxMiB3ZWVrcykge3JldHVybiAxMjUwMDt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgZW5kVGltZSkge3JldHVybiAgICAgICAgICAgICAgMTI1MDA7fQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvbnVzKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjdXJyVGltZSA9IGN1cnJlbnRUaW1lKCk7CiAgICAgICAgcmVxdWlyZShjdXJyVGltZSA+PSBzdGFydFRpbWUpOwoKICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAxIHdlZWtzKSB7cmV0dXJuICAyMDt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgMiB3ZWVrcykge3JldHVybiAgMTg7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDMgd2Vla3MpIHtyZXR1cm4gIDE2O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA0IHdlZWtzKSB7cmV0dXJuICAxNDt9CiAgICAgICAgaWYgKGN1cnJUaW1lIDwgc3RhcnRUaW1lICsgNSB3ZWVrcykge3JldHVybiAgMTI7fQogICAgICAgIGlmIChjdXJyVGltZSA8IHN0YXJ0VGltZSArIDYgd2Vla3MpIHtyZXR1cm4gIDEwO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA3IHdlZWtzKSB7cmV0dXJuICA4O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA4IHdlZWtzKSB7cmV0dXJuICA2O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyA5IHdlZWtzKSB7cmV0dXJuICA0O30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAxMCB3ZWVrcykge3JldHVybiAzO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAxMSB3ZWVrcykge3JldHVybiAyO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBzdGFydFRpbWUgKyAxMiB3ZWVrcykge3JldHVybiAxO30KICAgICAgICBpZiAoY3VyclRpbWUgPCBlbmRUaW1lKSB7cmV0dXJuICAgICAgICAgICAgICAwO30KICAgIH0KCiAgICBmdW5jdGlvbiBwcm9jZXNzSW52ZXN0bWVudChhZGRyZXNzIGludmVzdG9yLCB1aW50MjU2IHZhbHVlLCBhZGRyZXNzIHJlZmVycmVyKSBpbnRlcm5hbCBwcm9jZXNzU3RhdGUgaWNvSW5Qcm9ncmVzcyB7CiAgICAgICAgcmVxdWlyZSh2YWx1ZSA+PSBtaW5JbnZlc3RtZW50ICYmIHZhbHVlIDw9IG1heEludmVzdG1lbnQpOwogICAgICAgIHVpbnQyNTYgdG9rZW5zQ291bnQgPSB1aW50MjU2KHZhbHVlKS5tdWwoZ2V0VG9rZW5zQ291bnRQZXJFdGhlcigpKTsKCiAgICAgICAgLy8gQWRkIGJvbnVzIHRva2VucwogICAgICAgIHVpbnQyNTYgdG9rZW5zU29sZCA9IHRva2Vuc0NvdW50LmFkZCh0b2tlbnNDb3VudC5tdWwoZ2V0Qm9udXMoKSkuZGl2KDEwMCkpOwogICAgICAgIHRva2VuLnRyYW5zZmVyKGludmVzdG9yLCB0b2tlbnNTb2xkKTsKCiAgICAgICAgaWYgKHJlZmVycmVyICE9IDB4MCkgewogICAgICAgICAgICByZXF1aXJlKHJlZmVycmVyICE9IGludmVzdG9yKTsKICAgICAgICAgICAgdWludDI1NiB0b2tlbnNGb3JSZWZlcnJlciA9IHRva2Vuc0NvdW50Lm11bCg1KS5kaXYoMTAwKTsKICAgICAgICAgICAgdG9rZW4udHJhbnNmZXIocmVmZXJyZXIsIHRva2Vuc0ZvclJlZmVycmVyKTsKICAgICAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2Vuc0ZvclJlZmVycmVyKTsKICAgICAgICB9CgogICAgICAgIGludmVzdG1lbnRzW2ludmVzdG9yXSA9IGludmVzdG1lbnRzW2ludmVzdG9yXS5hZGQodmFsdWUpOwogICAgICAgIHRvdGFsSW52ZXN0bWVudCA9IHRvdGFsSW52ZXN0bWVudC5hZGQodmFsdWUpOwogICAgICAgIHRvdGFsU29sZCA9IHRvdGFsU29sZC5hZGQodG9rZW5zU29sZCk7CiAgICAgICAgZW1pdCBJbnZlc3RtZW50UHJvY2Vzc2VkKGludmVzdG9yLCB2YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zV2l0aFJlZihhZGRyZXNzIHJlZmVycmVyKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcHJvY2Vzc0ludmVzdG1lbnQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCByZWZlcnJlcik7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHByb2Nlc3NJbnZlc3RtZW50KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgMHgwKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKDAgPT0gbXNnLmRhdGEubGVuZ3RoKTsKICAgICAgICBidXlUb2tlbnMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckV0aGVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIGV4dGVybmFsIG5vblJlZW50cmFudCBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgewogICAgICAgIGlmKHZhbHVlID09IDAgfHwgdGhpcy5iYWxhbmNlIDwgdmFsdWUgfHwgdG8gPT0gMHgwKXsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0by50cmFuc2Zlcih2YWx1ZSk7CiAgICAgICAgRXRoZXJUcmFuc2ZlcmVkKHRvLCB2YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZmFpbElDTygpIGV4dGVybmFsIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKSB7CiAgICAgICAgaWNvU3RhdGUgPSBTdGF0ZS5GQUlMRUQ7CiAgICAgICAgZW1pdCBTdGF0ZVVwZGF0ZWQoaWNvU3RhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3UmVmdW5kKCkgZXh0ZXJuYWwgbm9uUmVlbnRyYW50IHsKICAgICAgICByZXF1aXJlKGljb1N0YXRlID09IFN0YXRlLkZBSUxFRCk7CgogICAgICAgIHVpbnQyNTYgaW52ZXN0bWVudCA9IGludmVzdG1lbnRzW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUoaW52ZXN0bWVudCA+IDAgJiYgdGhpcy5iYWxhbmNlID49IGludmVzdG1lbnQpOwoKICAgICAgICB0b3RhbEludmVzdG1lbnQgPSB0b3RhbEludmVzdG1lbnQuc3ViKGludmVzdG1lbnQpOwogICAgICAgIGludmVzdG1lbnRzW21zZy5zZW5kZXJdID0gMDsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGludmVzdG1lbnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGN1cnJlbnRUaW1lKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG5vdzsKICAgIH0KCiAgICB1aW50IHB1YmxpYyBzdGFydFRpbWUgPSAxNTIzODgwMDAwOyAvLyBVbml4IGVwb2NoIHRpbWVzdGFtcC4gV2VkbmVzZGF5LCBBcHJpbCAxNiwgMjAxOCAxMjowMDowMCBQTQogICAgdWludCBwdWJsaWMgdG9rZW5VbmZyZWV6ZVRpbWUgPSBzdGFydFRpbWUgKyAxMiB3ZWVrczsKICAgIHVpbnQgcHVibGljIGVuZFRpbWUgPSBzdGFydFRpbWUgKyAyNCB3ZWVrczsgCiAgICB1aW50IHB1YmxpYyBoYXJkQ2FwID0gNDgwMDAgZXRoZXI7CiAgICB1aW50IHB1YmxpYyBtaW5JbnZlc3RtZW50ID0gMTAgZmlubmV5OwogICAgdWludCBwdWJsaWMgbWF4SW52ZXN0bWVudCA9IGhhcmRDYXA7CiAgICB1aW50IHB1YmxpYyB0b2tlbnNUb1NvbGQ7CiAgICBTdGF0ZSBwdWJsaWMgaWNvU3RhdGUgPSBTdGF0ZS5ERUZJTkVEOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgaW52ZXN0bWVudHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEludmVzdG1lbnQgPSAwOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTb2xkID0gMDsKCiAgICBib29sIHB1YmxpYyBpc0NvbnRyaWJ1dG9yc1Jld2FyZGVkID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBpc0JvdW50eVNlbnQgPSBmYWxzZTsKICAgIEFscGhhTWFya2V0Q29pbiBwdWJsaWMgdG9rZW47CiAgICBhZGRyZXNzIHB1YmxpYyBleGNoYW5nZXI7Cn0KCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgdWludDI1NiB0b3RhbFN1cHBseV87CgogIC8qKgogICogQGRldiB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGV4aXN0ZW5jZQogICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdG90YWxTdXBwbHlfOwogIH0KCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBAZGV2IEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX2FkZGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gaW5jcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBkZWNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3N1YnRyYWN0ZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBkZWNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9Cgpjb250cmFjdCBBbHBoYU1hcmtldENvaW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgZnVuY3Rpb24gQWxwaGFNYXJrZXRDb2luKGFkZHJlc3MgX2NvbnRyb2xsZXIpIHB1YmxpYyB7CiAgICAgICAgY29udHJvbGxlciA9IF9jb250cm9sbGVyOwogICAgICAgIGVhcmx5QWNjZXNzW19jb250cm9sbGVyXSA9IHRydWU7CiAgICAgICAgdG90YWxTdXBwbHlfID0gOTk5OTk5OTk5ICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgYmFsYW5jZXNbX2NvbnRyb2xsZXJdID0gdG90YWxTdXBwbHlfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29udHJvbGxlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBUcmFuc2ZlcmluZyBzaG91bGQgYmUgZW5hYmxlZCBieSBJQ08gY29udHJhY3Qgb25seSB3aGVuIGhhbGYgb2YgSUNPIGlzIHBhc3NlZAogICAgZXZlbnQgVHJhbnNmZXJFbmFibGVkKCk7CgogICAgZnVuY3Rpb24gYWRkRWFybHlBY2Nlc3NBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIGV4dGVybmFsIG9ubHlDb250cm9sbGVyIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IDB4MCk7CiAgICAgICAgZWFybHlBY2Nlc3NbX2FkZHJlc3NdID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShpc1RyYW5zZmVyRW5hYmxlZCB8fCBlYXJseUFjY2Vzc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoaXNUcmFuc2ZlckVuYWJsZWQpOwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoaXNUcmFuc2ZlckVuYWJsZWQpOwogICAgICAgIHJldHVybiBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2ZlcmluZygpIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgcmVxdWlyZSghaXNUcmFuc2ZlckVuYWJsZWQpOwoKICAgICAgICBpc1RyYW5zZmVyRW5hYmxlZCA9IHRydWU7CiAgICAgICAgZW1pdCBUcmFuc2ZlckVuYWJsZWQoKTsKICAgIH0KCiAgICAvLyBQcmV2ZW50IHNlbmRpbmcgZXRoZXIgdG8gdGhpcyBhZGRyZXNzCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CgogICAgYm9vbCBwdWJsaWMgaXNUcmFuc2ZlckVuYWJsZWQgPSBmYWxzZTsKICAgIGFkZHJlc3MgcHVibGljIGNvbnRyb2xsZXI7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGVhcmx5QWNjZXNzOwoKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ0FscGhhTWFya2V0IENvaW4nOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAnQU1DJzsKfQ=='.
	

]
