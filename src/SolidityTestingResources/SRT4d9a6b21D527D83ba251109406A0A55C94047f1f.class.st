Class {
	#name : #SRT4d9a6b21D527D83ba251109406A0A55C94047f1f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d9a6b21D527D83ba251109406A0A55C94047f1f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBOb24tRnVuZ2libGUgVG9rZW5zCi8vLyBAYXV0aG9yIERpZXRlciBTaGlybGV5IDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMGU2YTZiN2E2YjRlNmY3NjY3NjE2Mzc0NmI2MDIwNmQ2MSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+IChodHRwczovL2dpdGh1Yi5jb20vZGV0ZSkKY29udHJhY3QgRVJDNzIxIHsKICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHJldHVybnMoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcmV0dXJucyhib29sIHN1Y2Nlc3MpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IGFtb3VudCk7CgogICAgLy8gT3B0aW9uYWwKICAgIC8vIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgbmFtZSk7CiAgICAvLyBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgc3ltYm9sKTsKICAgIC8vIGZ1bmN0aW9uIHRva2VuT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG9rZW5JZCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk1ldGFkYXRhKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBpbmZvVXJsKTsKfQoKY29udHJhY3QgU2luZ2xlVHJhbnNmZXJUb2tlbiBpcyBFUkM3MjEgewoKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlNUVCI7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlNpbmdsZVRyYW5zZmVyVG9rZW4iOwoKICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gMTsKCiAgICB1aW50MjU2IGN1cnJlbnRQcmljZTsKCiAgICB1aW50MjU2IHNlbGxpbmdQcmljZTsKCiAgICB1aW50MjU2IHN0ZXBMaW1pdCA9IDEgZXRoZXI7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwoKICAgIC8vIE93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgIAogICAgYWRkcmVzcyBvd25lcjsKCiAgICAvLyBDdXJyZW50IG93bmVyIG9mIHRoZSB0b2tlbgogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5Pd25lcjsKCiAgICAvLyBBbGxvd2VkIHRvIHRyYW5zZmVyIHRvIHRoaXMgYWRkcmVzcwogICAgYWRkcmVzcyBhbGxvd2VkVG8gPSBhZGRyZXNzKDApOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwoKICAgIH0KCiAgICBtb2RpZmllciBvbmx5U2luZ2xlKHVpbnQyNTYgYW1vdW50KXsKICAgICAgICByZXF1aXJlKGFtb3VudCA9PSAxKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIENvbnN0cnVjdG9yCgogICAgZnVuY3Rpb24gU2luZ2xlVHJhbnNmZXJUb2tlbihzdHJpbmcgdG9rZW5OYW1lLCBzdHJpbmcgdG9rZW5TeW1ib2wsIHVpbnQyNTYgaW5pdGlhbFByaWNlLCB1aW50MjU2IHNMaW1pdCkgcHVibGljewoKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOwogICAgICAgIAogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOwoKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CgogICAgICAgIHRva2VuT3duZXIgPSBtc2cuc2VuZGVyOwoKICAgICAgICBzdGVwTGltaXQgPSBzTGltaXQ7CgogICAgICAgIHNlbGxpbmdQcmljZSA9IGluaXRpYWxQcmljZTsKCiAgICAgICAgY3VycmVudFByaWNlID0gaW5pdGlhbFByaWNlOwoKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IHRvdGFsKSB7CgogICAgICAgIHRvdGFsID0gX3RvdGFsU3VwcGx5OwoKICAgIH0KCiAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewoKICAgICAgICByZXR1cm4gX293bmVyID09IHRva2VuT3duZXIgPyAxIDogMDsKCiAgICB9CgogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seVNpbmdsZShfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIGlmKGJhbGFuY2VPZihtc2cuc2VuZGVyKSA+IDApewogICAgICAgICAKICAgICAgICAgICAgdG9rZW5Pd25lciA9IF90bzsKICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwoKICAgICAgICB9ZWxzZSB7CgogICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7CgogICAgICAgIH0KCiAgICB9CgogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCgogICAgICAgIGFkZHJlc3MgX2Zyb20sCgogICAgICAgIGFkZHJlc3MgX3RvLAoKICAgICAgICB1aW50MjU2IF9hbW91bnQKCiAgICApIG9ubHlTaW5nbGUoX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZihfZnJvbSkgPiAwICYmIGFsbG93ZWRUbyA9PSBfdG8pOwoKICAgICAgICB0b2tlbk93bmVyID0gX3RvOwogICAgICAgIAogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICBzdWNjZXNzID0gdHJ1ZTsKICAgIH0KCiAKICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCgogICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5U2luZ2xlKF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICByZXF1aXJlKHRva2VuT3duZXIgPT0gbXNnLnNlbmRlcik7CgogICAgICAgIGFsbG93ZWRUbyA9IF9zcGVuZGVyOwoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CgogICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwoKICAgIH0KCiAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CgogICAgICAgIHJldHVybiBfb3duZXIgPT0gdG9rZW5Pd25lciAmJiBhbGxvd2VkVG8gPT0gX3NwZW5kZXI/IDEgOiAwOwoKICAgIH0KCiAgICAvLyBBbGxvd3Mgc29tZW9uZSB0byBzZW5kIGV0aGVyIGFuZCBvYnRhaW4gdGhlIHRva2VuCgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CgogICAgICAgIC8vbWFraW5nIHN1cmUgdG9rZW4gb3duZXIgaXMgbm90IHNlbmRpbmcKICAgICAgICBhc3NlcnQodG9rZW5Pd25lciAhPSBtc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICAvL21ha2luZyBzdXJlIHNlbnQgYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgc2VsbGluZ1ByaWNlCiAgICAgICAgYXNzZXJ0KG1zZy52YWx1ZSA+PSBzZWxsaW5nUHJpY2UpOwogICAgICAgIAogICAgICAgIC8vaWYgc2VudCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIHNlbGxpbmdQcmljZSByZWZ1bmQgZXh0cmEKICAgICAgICBpZihtc2cudmFsdWUgPiBzZWxsaW5nUHJpY2UpewogICAgICAgICAgICAKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUgLSBzZWxsaW5nUHJpY2UpOwoKICAgICAgICB9CgogICAgICAgIC8vdXBkYXRlIHByaWNlcwogICAgICAgIGN1cnJlbnRQcmljZSA9IHNlbGxpbmdQcmljZTsKCiAgICAgICAgaWYoY3VycmVudFByaWNlID49IHN0ZXBMaW1pdCl7CgogICAgICAgICAgICBzZWxsaW5nUHJpY2UgPSAoY3VycmVudFByaWNlICogMTIwKS85NDsgLy9hZGRpbmcgY29tbWlzc2lvbiBhbW91bnQgLy8xLjIvKDEtMC4wNikKICAgICAgICAKICAgICAgICB9ZWxzZXsKCiAgICAgICAgICAgIHNlbGxpbmdQcmljZSA9IChjdXJyZW50UHJpY2UgKiAyICogMTAwKS85NDsvL2FkZGluZyBjb21taXNzaW9uIGFtb3VudAogICAgICAgIAogICAgICAgIH0gIAogICAgICAgIAogICAgICAgIHRyYW5zZmVyVG9rZW4odG9rZW5Pd25lciwgbXNnLnNlbmRlcik7CgogICAgICAgIC8vaWYgY29udGFjdCBiYWxhbmNlIGlzIGdyZWF0ZXIgdGhhbiAxMDAwMDAwMDAwMDAwMDAwIHdlaSwKICAgICAgICAvL3RyYW5zZmVyIGJhbGFuY2UgdG8gdGhlIGNvbnRyYWN0IG93bmVyCiAgICAgICAgLy9pZiAodGhpcy5iYWxhbmNlID49IDEwMDAwMDAwMDAwMDAwMDApIHsKCiAgICAgICAgLy8gICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKCiAgICAgICAgLy99CgogICAgfSAKCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuKGFkZHJlc3MgcHJldk93bmVyLCBhZGRyZXNzIG5ld093bmVyKSBpbnRlcm5hbCB7CgogICAgICAgIC8vcGF5IHByZXZpb3VzIG93bmVyICAgICAgICAKICAgICAgICBwcmV2T3duZXIudHJhbnNmZXIoKGN1cnJlbnRQcmljZSo5NCkvMTAwKTsgLy8oMS0wLjA2KSAKCiAgICAgICAgdG9rZW5Pd25lciA9IG5ld093bmVyOwoKICAgICAgICBUcmFuc2ZlcihwcmV2T3duZXIsIG5ld093bmVyLCAxKTsKICAgICAgICAKCiAgICB9CgogICAgZnVuY3Rpb24gcGF5b3V0KGFkZHJlc3MgX3RvKSBvbmx5T3duZXIgcHVibGljewogICAgCWlmKHRoaXMuYmFsYW5jZSA+IDEgZXRoZXIpewogICAgCQlpZihfdG8gPT0gYWRkcmVzcygwKSl7CiAgICAJCQlvd25lci50cmFuc2Zlcih0aGlzLmJhbGFuY2UgLSAxIGV0aGVyKTsKICAgIAkJfWVsc2V7CiAgICAJCQlfdG8udHJhbnNmZXIodGhpcy5iYWxhbmNlIC0gMSBldGhlcik7CiAgICAJCX0KICAgIAkJCiAgICAJfQogICAgfQoKfQ=='.
	

]
