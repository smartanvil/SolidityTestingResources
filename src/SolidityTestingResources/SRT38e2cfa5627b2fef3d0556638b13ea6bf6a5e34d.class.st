Class {
	#name : #SRT38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICoKICogQGF1dGhvciAgPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJlMDgzODg4OTgzOGY4MzkyODk5MDk0OGZhMDkwOTI4Zjk0OGY4ZThkODE4OThjY2U4MzhmOGQiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgogKgogKiBSREZETSAtIFJpdmVyZGltZXMgRmlhdCBEb25hdGlvbiBNYW5hZ2VyCiAqIFZlcnNpb24gQgogKgogKiBPdmVydmlldzoKICogZm91ciBiYXNpYyByb3VuZC11cCBvcGVyYXRpb25zIGFyZSBzdXBwb3J0ZWQ6CiAqCiAqIEEpIGZpYXRDb2xsZWN0ZWQ6IFJlY29yZCBGaWF0IERvbmF0aW9uIChjb2xsZWN0aW9uKQogKiAgICBpbnB1dHM6ICAgICAgICBjaGFyaXR5IChDKSwgZmlhdCBhbW91bnQgKCRYWC5YWCksCiAqICAgIHN1bW1hcnk6ICAgICAgIGNyZWF0ZXMgYSBsb2cgb2YgYSBmaWF0IGRvbmF0aW9uIHRvIGEgc3BlY2lmaWVkIGNoYXJpdHksIEMuCiAqICAgIG1lc3NhZ2U6ICAgICAgICRYWC5YWCBjb2xsZWN0ZWQgRkJPIENoYXJpdHkgQywgaW50ZXJuYWwgZG9jdW1lbnQgI0FCQwogKiAgICAtIGFkZCAkWFguWFggdG8gY2hhcml5J3MgZmlhdEJhbGFuY2VJbiwgZmlhdENvbGxlY3RlZAogKgogKiBCKSBmaWF0VG9FdGg6ICAgICBGaWF0IENvbnZlcnRlZCB0byBFVEgKICogICAgaW5wdXRzOiAgICAgICAgY2hhcml0eSAoQyksIGZpYXQgYW1vdW50ICgkWFguWFgpLCBFVEggYW1vdW50IChaKSwgZG9jdW1lbnQgcmVmZXJlbmNlIChBQkMpCiAqICAgIHN1bW1hcnk6ICAgICAgIGRlZHVjdCAkWFguWFggZnJvbSBjaGFyaXR5IEMncyBmaWF0QmFsYW5jZUluOyBjcmVkaXQgY2hhcml0eSBDJ3MgZXRoQmFsYW5jZUluLiB0aGlzIG9wZXJhdGlvbiBpcyBpbnZva2VkCiAqICAgICAgICAgICAgICAgICAgIHdoZW4gZmlhdCBkb25hdGlvbnMgYXJlIGNvbnZlcnRlZCB0byBFVEguIGl0IGluY2x1ZGVzIGEgZGVwb3NpdCBvZiBaIEVUSC4KICogICAgbWVzc2FnZShzKTogICAgT24gYmVoYWxmIG9mIENoYXJpdHkgQywgJFhYLlhYIHVzZWQgdG8gcHVyY2hhc2UgWiBFVEgKICogICAgLSAkWFguWFggZGVkdWN0ZWQgZnJvbSBjaGFyaXR5IEMncyBmaWF0QmFsYW5jZUluCiAqICAgIC0gc2tpbXMgNCUgb2YgWiBmb3IgUkQgVG9rZW4gaG9sZGVycywgYW5kIDE2JSBmb3Igb3BlcmF0aW9uYWwgb3ZlcmhlYWQKICogICAgLSBjcmVkaXRzIGNoYXJpdHkgQyB3aXRoIDgwJSBvZiBaIEVUSCAoZXRoQmFsYW5jZSkKICoKICogQykgZXRoVG9GaWF0OiAgICAgRVRIIENvbnZlcnRlZCB0byBGaWF0CiAqICAgIGlucHV0czogICAgICAgIGNoYXJpdHkgKEMpLCBFVEggYW1vdW50IChaKSwgZmlhdCBhbW91bnQgKCRYWC5YWCksIGRvY3VtZW50IHJlZmVyZW5jZSAoQUJDKQogKiAgICBzdW1tYXJ5OiAgICAgICB3aXRoZHJhdyBFVEggZnJvbSBhbmQgY29udmVydCB0byBmaWF0CiAqICAgIG1lc3NhZ2Uocyk6ICAgIFogRVRIIGNvbnZlcnRlZCB0byAkWFguWFggRkJPIENoYXJpdHkgQwogKiAgICAtIGRlZHVjdHMgWiBFVEggZnJvbSBjaGFyaXR5IEMncyBldGhCYWxhbmNlCiAqICAgIC0gYWRkcyAkWFguWFggdG8gY2hhcml0eSBDJ3MgZmlhdEJhbGFuY2VPdXQKICoKICogRCkgZmlhdERlbGl2ZXJlZDogUmVjb3JkIEZpYXQgRGVsaXZlcnkgdG8gU3BlY2lmaWVkIENoYXJpdHkKICogICAgaW5wdXRzOiAgICAgICAgY2hhcml0eSAoQyksIGZpYXQgYW1vdW50ICgkWFguWFgpLCBkb2N1bWVudCByZWZlcmVuY2UgKEFCQykKICogICAgc3VtbWFyeTogICAgICAgY3JlYXRlcyBhIGxvZyBvZiBhIGZpYXQgZGVsaXZlcnkgdG8gYSBzcGVjaWZpZWQgY2hhcml0eSwgQzoKICogICAgbWVzc2FnZTogICAgICAgJFhYLlhYIGRlbGl2ZXJlZCB0byBDaGFyaXR5IEMsIGludGVybmFsIGRvY3VtZW50ICNBQkMKICogICAgLSBkZWR1Y3RzIHRoZSBkb2xsYXIgYW1vdW50LCAkWFguWFggZnJvbSBjaGFyaXR5J3MgZmlhdEJhbGFuY2VPdXQKICogICAgLSBhZGQgJFhYLlhYIHRvIGNoYXJpdHkncyB0b3RhbERlbGl2ZXJlZAogKgogKiBvbmUgYmFzaWMgb3BlcmF0aW9uLCB1bnJlbGF0ZWQgdG8gcm91bmQtdXAKICoKICogQSkgZXRoRG9uYXRpb246ICAgICAgICBEaXJlY3QgRVRIIERvbmF0aW9uIHRvIENoYXJpdHkKICogICAgaW5wdXRzOiAgICAgICAgICAgICBjaGFyaXR5IChDKSwgRVRIIGFtb3VudCAoWiksIGRvY3VtZW50IHJlZmVyZW5jZSAoQUJDKQogKiAgICBzdW1tYXJ5OiAgICAgICAgICAgIEVUSCBkb25hdGlvbiB0byBhIHNwZWNpZmllZCBjaGFyaXR5LCBjcmVkaXRpbmcgY2hhcml0eSdzIGV0aEJhbGFuY2UuIEVUSCBpbiB0cmFuc2FjdGlvbi4KICogICAgbWVzc2FnZXM6ICAgICAgICAgICBaIEVUSCBkb25hdGVkIHRvIENoYXJpdHkgQywgaW50ZXJuYWwgZG9jdW1lbnQgI0FCQwogKiAgICAtIGFkZCBaIEVUSCB0byBjaGFyaXkncyBldGhEb25hdGVkCiAqICAgIC0gc2tpbXMgMC41JSBvZiBaIGZvciBSRCBUb2tlbiBob2xkZXJzLCBhbmQgMS41JSBmb3Igb3BlcmF0aW9uYWwgb3ZlcmhlYWQKICogICAgLSBjcmVkaXRzIGNoYXJpdHkgQyB3aXRoIDk4JSBvZiBaIEVUSCAoZXRoQmFsYW5jZSkKICoKICogaW4gYWRkaXRpb24gdGhlcmUgYXJlIHNob3J0Y3V0IG9wZXJhdGlvbnMgKHJlbGF0ZWQgdG8gcm91bmQtdXApOgogKgogKiBBKSBmaWF0Q29sbGVjdGVkVG9FdGg6IFJlY29yZCBGaWF0IERvbmF0aW9uIChjb2xsZWN0aW9uKSBhbmQgY29udmVydCB0byBFVEgKICogICAgaW5wdXRzOiAgICAgICAgICAgICBjaGFyaXR5IChDKSwgZmlhdCBhbW91bnQgKCRYWC5YWCksIEVUSCBhbW91bnQgKFopLCBkb2N1bWVudCByZWZlcmVuY2UgKEFCQykKICogICAgc3VtbWFyeTogICAgICAgICAgICBjcmVhdGVzIGEgbG9nIG9mIGEgZmlhdCBkb25hdGlvbiB0byBhIHNwZWNpZmllZCBjaGFyaXR5LCBDOyBmaWF0IGRvbmF0aW9uIGlzIGltbWVkaWF0ZWx5IGNvbnZlcnRlZCB0bwogKiAgICAgICAgICAgICAgICAgICAgICAgIEVUSCwgY3JlZGl0aW5nIGNoYXJpdHkgQydzIGV0aEJhbGFuY2UuIHRoZSB0cmFuc2FjdGlvbiBpbmNsdWRlcyBhIGRlcG9zaXQgb2YgWiBFVEguCiAqICAgIG1lc3NhZ2VzOiAgICAgICAgICAgJFhYLlhYIGNvbGxlY3RlZCBGQk8gQ2hhcml0eSBDLCBpbnRlcm5hbCBkb2N1bWVudCAjQUJDCiAqICAgICAgICAgICAgICAgICAgICAgICAgT24gYmVoYWxmIG9mIENoYXJpdHkgQywgJFhYLlhYIHVzZWQgdG8gcHVyY2hhc2UgWiBFVEgKICogICAgLSBhZGQgJFhYLlhYIHRvIGNoYXJpeSdzIGZpYXRDb2xsZWN0ZWQKICogICAgLSBza2ltcyA0JSBvZiBaIGZvciBSRCBUb2tlbiBob2xkZXJzLCBhbmQgMTYlIGZvciBvcGVyYXRpb25hbCBvdmVyaGVhZAogKiAgICAtIGNyZWRpdHMgY2hhcml0eSBDIHdpdGggODAlIG9mIFogRVRIIChldGhCYWxhbmNlKQogKgogKiBCKSBldGhUb0ZpYXREZWxpdmVyZWQ6IFJlY29yZCBFVEggQ29udmVyc2lvbiB0byBGaWF0OyBhbmQgRmlhdCBEZWxpdmVyeSB0byBTcGVjaWZpZWQgQ2hhcml0eQogKiAgICBpbnB1dHM6ICAgICAgICAgICAgIGNoYXJpdHkgKEMpLCBFVEggYW1vdW50IChaKSwgZmlhdCBhbW91bnQgKCRYWC5YWCksIGRvY3VtZW50IHJlZmVyZW5jZSAoQUJDKQogKiAgICBzdW1tYXJ5OiAgICAgICAgICAgIHdpdGhkcmF3IEVUSCBmcm9tIGNoYXJpdHkgQydzIGV0aEJhbGFuY2UgYW5kIGNvbnZlcnQgdG8gZmlhdDsgbG9nIGZpYXQgZGVsaXZlcnkgb2YgJFhYLlhYLgogKiAgICBtZXNzYWdlczogICAgICAgICAgIFogRVRIIGNvbnZlcnRlZCB0byAkWFguWFggRkJPIENoYXJpdHkgQwogKiAgICAgICAgICAgICAgICAgICAgICAgICRYWC5YWCBkZWxpdmVyZWQgdG8gQ2hhcml0eSBDLCBpbnRlcm5hbCBkb2N1bWVudCAjQUJDCiAqICAgIC0gZGVkdWN0cyBaIEVUSCBmcm9tIGNoYXJpdHkgQydzIGV0aEJhbGFuY2UKICogICAgLSBhZGQgJFhYLlhYIHRvIGNoYXJpdHkncyB0b3RhbERlbGl2ZXJlZAogKgogKi8KCi8vaW1wb3J0ICcuL1NhZmVNYXRoLnNvbCc7Ci8vY29udHJhY3QgUkRGRE0gaXMgU2FmZU1hdGgKY29udHJhY3QgUkRGRE0gewoKICAvL2V2ZW50cyByZWxhdGluZyB0byBkb25hdGlvbiBvcGVyYXRpb25zCiAgLy8KICBldmVudCBGaWF0Q29sbGVjdGVkRXZlbnQodWludCBpbmRleGVkIGNoYXJpdHksIHVpbnQgdXNkLCBzdHJpbmcgcmVmKTsKICBldmVudCBGaWF0VG9FdGhFdmVudCh1aW50IGluZGV4ZWQgY2hhcml0eSwgdWludCB1c2QsIHVpbnQgZXRoKTsKICBldmVudCBFdGhUb0ZpYXRFdmVudCh1aW50IGluZGV4ZWQgY2hhcml0eSwgdWludCBldGgsIHVpbnQgdXNkKTsKICBldmVudCBGaWF0RGVsaXZlcmVkRXZlbnQodWludCBpbmRleGVkIGNoYXJpdHksIHVpbnQgdXNkLCBzdHJpbmcgcmVmKTsKICBldmVudCBFdGhEb25hdGlvbkV2ZW50KHVpbnQgaW5kZXhlZCBjaGFyaXR5LCB1aW50IGV0aCk7CgogIC8vZXZlbnRzIHJlbGF0aW5nIHRvIGFkZGluZyBhbmQgZGVsZXRpbmcgY2hhcml0aWVzCiAgLy8KICBldmVudCBDaGFyaXR5QWRkZWRFdmVudCh1aW50IGluZGV4ZWQgY2hhcml0eSwgc3RyaW5nIG5hbWUsIHVpbnQ4IGN1cnJlbmN5KTsKICBldmVudCBDaGFyaXR5TW9kaWZpZWRFdmVudCh1aW50IGluZGV4ZWQgY2hhcml0eSwgc3RyaW5nIG5hbWUsIHVpbnQ4IGN1cnJlbmN5KTsKCiAgLy9jdXJyZW5jaWVzCiAgLy8KICB1aW50IGNvbnN0YW50ICBDVVJSRU5DWV9VU0QgID0gMHgwMTsKICB1aW50IGNvbnN0YW50ICBDVVJSRU5DWV9FVVJPID0gMHgwMjsKICB1aW50IGNvbnN0YW50ICBDVVJSRU5DWV9OSVMgID0gMHgwMzsKICB1aW50IGNvbnN0YW50ICBDVVJSRU5DWV9ZVUFOID0gMHgwNDsKCgogIHN0cnVjdCBDaGFyaXR5IHsKICAgIHVpbnQgZmlhdEJhbGFuY2VJbjsgICAgICAgICAgIC8vIGZ1bmRzIGluIGV4dGVybmFsIGFjY3QsIGNvbGxlY3RlZCBmYm8gY2hhcml0eQogICAgdWludCBmaWF0QmFsYW5jZU91dDsgICAgICAgICAgLy8gZnVuZHMgaW4gZXh0ZXJuYWwgYWNjdCwgcGVuZGluZyBkZWxpdmVyeSB0byBjaGFyaXR5CiAgICB1aW50IGZpYXRDb2xsZWN0ZWQ7ICAgICAgICAgICAvLyB0b3RhbCBjb2xsZWN0ZWQgc2luY2UgZGF3biBvZiBjcmVhdGlvbgogICAgdWludCBmaWF0RGVsaXZlcmVkOyAgICAgICAgICAgLy8gdG90YWwgZGVsaXZlcmVkIHNpbmNlIGRhd24gb2YgY3JlYXRpb24KICAgIHVpbnQgZXRoRG9uYXRlZDsgICAgICAgICAgICAgIC8vIHRvdGFsIGV0aCBkb25hdGVkIHNpbmNlIGRhd24gb2YgY3JlYXRpb24KICAgIHVpbnQgZXRoQ3JlZGl0ZWQ7ICAgICAgICAgICAgIC8vIHRvdGFsIGV0aCBjcmVkaXRlZCB0byB0aGlzIGNoYXJpdHkgc2luY2UgZGF3biBvZiBjcmVhdGlvbgogICAgdWludCBldGhCYWxhbmNlOyAgICAgICAgICAgICAgLy8gY3VycmVudCBldGggYmFsYW5jZSBvZiB0aGlzIGNoYXJpdHkKICAgIHVpbnQgZmlhdFRvRXRoUHJpY2VBY2NFdGg7ICAgIC8vIGtlZXAgdHJhY2sgb2YgZmlhdCB0byBldGggY29udmVyc2lvbiBwcmljZTogdG90YWwgZXRoCiAgICB1aW50IGZpYXRUb0V0aFByaWNlQWNjRmlhdDsgICAvLyBrZWVwIHRyYWNrIG9mIGZpYXQgdG8gZXRoIGNvbnZlcnNpb24gcHJpY2U6IHRvdGFsIGZpYXQKICAgIHVpbnQgZXRoVG9GaWF0UHJpY2VBY2NFdGg7ICAgIC8vIGtrZXAgdHJhY2sgb2YgZXRoIHRvIGZpYXQgY29udmVyc2lvbiBwcmljZTogdG90YWwgZXRoCiAgICB1aW50IGV0aFRvRmlhdFByaWNlQWNjRmlhdDsgICAvLyBra2VwIHRyYWNrIG9mIGV0aCB0byBmaWF0IGNvbnZlcnNpb24gcHJpY2U6IHRvdGFsIGZpYXQKICAgIHVpbnQ4IGN1cnJlbmN5OyAgICAgICAgICAgICAgIC8vIGZpYXQgYW1vdW50cyBhcmUgaW4gc21hbGxlc3QgZGVub21pbmF0aW9uIG9mIGN1cnJlbmN5CiAgICBzdHJpbmcgbmFtZTsgICAgICAgICAgICAgICAgICAvLyBlZy4gIlNhbHZhdGlvbiBBcm15IgogIH0KCiAgdWludCBwdWJsaWMgY2hhcml0eUNvdW50OwogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGFkZHJlc3MgcHVibGljIG1hbmFnZXI7CiAgYWRkcmVzcyBwdWJsaWMgdG9rZW47ICAgICAgICAgICAvL3Rva2VuLWhvbGRlciBmZWVzIHNlbnQgdG8gdGhpcyBhZGRyZXNzCiAgYWRkcmVzcyBwdWJsaWMgb3BlcmF0b3JGZWVBY2N0OyAvL29wZXJhdGlvbnMgZmVlcyBzZW50IHRvIHRoaXMgYWRkcmVzcwogIG1hcHBpbmcgKHVpbnQgPT4gQ2hhcml0eSkgcHVibGljIGNoYXJpdGllczsKICBib29sIHB1YmxpYyBpc0xvY2tlZDsKCiAgbW9kaWZpZXIgb3duZXJPbmx5IHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbWFuYWdlck9ubHkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IG1zZy5zZW5kZXIgPT0gbWFuYWdlcik7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgdW5sb2NrZWRPbmx5IHsKICAgIHJlcXVpcmUoIWlzTG9ja2VkKTsKICAgIF87CiAgfQoKCiAgLy8KICAvL2NvbnN0cnVjdG9yCiAgLy8KICBmdW5jdGlvbiBSREZETSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICBtYW5hZ2VyID0gbXNnLnNlbmRlcjsKICAgIHRva2VuID0gbXNnLnNlbmRlcjsKICAgIG9wZXJhdG9yRmVlQWNjdCA9IG1zZy5zZW5kZXI7CiAgfQogIGZ1bmN0aW9uIGxvY2soKSBwdWJsaWMgb3duZXJPbmx5IHsgaXNMb2NrZWQgPSB0cnVlOyB9CiAgZnVuY3Rpb24gc2V0VG9rZW4oYWRkcmVzcyBfdG9rZW4pIHB1YmxpYyBvd25lck9ubHkgdW5sb2NrZWRPbmx5IHsgdG9rZW4gPSBfdG9rZW47IH0KICBmdW5jdGlvbiBzZXRPcGVyYXRvckZlZUFjY3QoYWRkcmVzcyBfb3BlcmF0b3JGZWVBY2N0KSBwdWJsaWMgb3duZXJPbmx5IHsgb3BlcmF0b3JGZWVBY2N0ID0gX29wZXJhdG9yRmVlQWNjdDsgfQogIGZ1bmN0aW9uIHNldE1hbmFnZXIoYWRkcmVzcyBfbWFuYWdlcikgcHVibGljIG1hbmFnZXJPbmx5IHsgbWFuYWdlciA9IF9tYW5hZ2VyOyB9CiAgZnVuY3Rpb24gZGVsZXRlTWFuYWdlcigpIHB1YmxpYyBtYW5hZ2VyT25seSB7IG1hbmFnZXIgPSBvd25lcjsgfQoKCiAgZnVuY3Rpb24gYWRkQ2hhcml0eShzdHJpbmcgX25hbWUsIHVpbnQ4IF9jdXJyZW5jeSkgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLm5hbWUgPSBfbmFtZTsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmN1cnJlbmN5ID0gX2N1cnJlbmN5OwogICAgQ2hhcml0eUFkZGVkRXZlbnQoY2hhcml0eUNvdW50LCBfbmFtZSwgX2N1cnJlbmN5KTsKICAgICsrY2hhcml0eUNvdW50OwogIH0KCiAgZnVuY3Rpb24gbW9kaWZ5Q2hhcml0eSh1aW50IF9jaGFyaXR5LCBzdHJpbmcgX25hbWUsIHVpbnQ4IF9jdXJyZW5jeSkgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgIHJlcXVpcmUoX2NoYXJpdHkgPCBjaGFyaXR5Q291bnQpOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0ubmFtZSA9IF9uYW1lOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uY3VycmVuY3kgPSBfY3VycmVuY3k7CiAgICBDaGFyaXR5TW9kaWZpZWRFdmVudChfY2hhcml0eSwgX25hbWUsIF9jdXJyZW5jeSk7CiAgfQoKCgogIC8vPT09PT09PT0gYmFzaWMgb3BlcmF0aW9ucwoKICBmdW5jdGlvbiBmaWF0Q29sbGVjdGVkKHVpbnQgX2NoYXJpdHksIHVpbnQgX2ZpYXQsIHN0cmluZyBfcmVmKSBwdWJsaWMgbWFuYWdlck9ubHkgewogICAgcmVxdWlyZShfY2hhcml0eSA8IGNoYXJpdHlDb3VudCk7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5maWF0QmFsYW5jZUluICs9IF9maWF0OwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdENvbGxlY3RlZCArPSBfZmlhdDsKICAgIEZpYXRDb2xsZWN0ZWRFdmVudChfY2hhcml0eSwgX2ZpYXQsIF9yZWYpOwogIH0KCiAgZnVuY3Rpb24gZmlhdFRvRXRoKHVpbnQgX2NoYXJpdHksIHVpbnQgX2ZpYXQpIHB1YmxpYyBtYW5hZ2VyT25seSBwYXlhYmxlIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMCk7CiAgICByZXF1aXJlKF9jaGFyaXR5IDwgY2hhcml0eUNvdW50KTsKICAgIC8va2VlcCB0cmFjayBvZiBmaWF0IHRvIGV0aCBjb252ZXJzaW9uIHByaWNlCiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5maWF0VG9FdGhQcmljZUFjY0ZpYXQgKz0gX2ZpYXQ7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5maWF0VG9FdGhQcmljZUFjY0V0aCArPSBtc2cudmFsdWU7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5maWF0QmFsYW5jZUluIC09IF9maWF0OwogICAgdWludCBfdG9rZW5DdXQgPSAobXNnLnZhbHVlICogNCkgLyAxMDA7CiAgICB1aW50IF9vcGVyYXRvckN1dCA9IChtc2cudmFsdWUgKiAxNikgLyAxMDA7CiAgICB1aW50IF9jaGFyaXR5Q3JlZGl0ID0gKG1zZy52YWx1ZSAtIF9vcGVyYXRvckN1dCkgLSBfdG9rZW5DdXQ7CiAgICBvcGVyYXRvckZlZUFjY3QudHJhbnNmZXIoX29wZXJhdG9yQ3V0KTsKICAgIHRva2VuLnRyYW5zZmVyKF90b2tlbkN1dCk7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhCYWxhbmNlICs9IF9jaGFyaXR5Q3JlZGl0OwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoQ3JlZGl0ZWQgKz0gX2NoYXJpdHlDcmVkaXQ7CiAgICBGaWF0VG9FdGhFdmVudChfY2hhcml0eSwgX2ZpYXQsIG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBldGhUb0ZpYXQodWludCBfY2hhcml0eSwgdWludCBfZXRoLCB1aW50IF9maWF0KSBwdWJsaWMgbWFuYWdlck9ubHkgewogICAgcmVxdWlyZShfY2hhcml0eSA8IGNoYXJpdHlDb3VudCk7CiAgICByZXF1aXJlKGNoYXJpdGllc1tfY2hhcml0eV0uZXRoQmFsYW5jZSA+PSBfZXRoKTsKICAgIC8va2VlcCB0cmFjayBvZiBmaWF0IHRvIGV0aCBjb252ZXJzaW9uIHByaWNlCiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhUb0ZpYXRQcmljZUFjY0ZpYXQgKz0gX2ZpYXQ7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhUb0ZpYXRQcmljZUFjY0V0aCArPSBfZXRoOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoQmFsYW5jZSAtPSBfZXRoOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdEJhbGFuY2VPdXQgKz0gX2ZpYXQ7CiAgICAvL3dpdGhkcmF3IGZ1bmRzIHRvIHRoZSBjYWxsZXIKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoX2V0aCk7CiAgICBFdGhUb0ZpYXRFdmVudChfY2hhcml0eSwgX2V0aCwgX2ZpYXQpOwogIH0KCiAgZnVuY3Rpb24gZmlhdERlbGl2ZXJlZCh1aW50IF9jaGFyaXR5LCB1aW50IF9maWF0LCBzdHJpbmcgX3JlZikgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgIHJlcXVpcmUoX2NoYXJpdHkgPCBjaGFyaXR5Q291bnQpOwogICAgcmVxdWlyZShjaGFyaXRpZXNbX2NoYXJpdHldLmZpYXRCYWxhbmNlT3V0ID49IF9maWF0KTsKICAgIGNoYXJpdGllc1tfY2hhcml0eV0uZmlhdEJhbGFuY2VPdXQgLT0gX2ZpYXQ7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5maWF0RGVsaXZlcmVkICs9IF9maWF0OwogICAgRmlhdERlbGl2ZXJlZEV2ZW50KF9jaGFyaXR5LCBfZmlhdCwgX3JlZik7CiAgfQoKICAvLz09PT09PT09IHVucmVsYXRlZCB0byByb3VuZC11cAogIGZ1bmN0aW9uIGV0aERvbmF0aW9uKHVpbnQgX2NoYXJpdHkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMCk7CiAgICByZXF1aXJlKF9jaGFyaXR5IDwgY2hhcml0eUNvdW50KTsKICAgIHVpbnQgX3Rva2VuQ3V0ID0gKG1zZy52YWx1ZSAqIDEpIC8gMjAwOwogICAgdWludCBfb3BlcmF0b3JDdXQgPSAobXNnLnZhbHVlICogMykgLyAyMDA7CiAgICB1aW50IF9jaGFyaXR5Q3JlZGl0ID0gKG1zZy52YWx1ZSAtIF9vcGVyYXRvckN1dCkgLSBfdG9rZW5DdXQ7CiAgICBvcGVyYXRvckZlZUFjY3QudHJhbnNmZXIoX29wZXJhdG9yQ3V0KTsKICAgIHRva2VuLnRyYW5zZmVyKF90b2tlbkN1dCk7CiAgICBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhEb25hdGVkICs9IF9jaGFyaXR5Q3JlZGl0OwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoQmFsYW5jZSArPSBfY2hhcml0eUNyZWRpdDsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aENyZWRpdGVkICs9IF9jaGFyaXR5Q3JlZGl0OwogICAgRXRoRG9uYXRpb25FdmVudChfY2hhcml0eSwgbXNnLnZhbHVlKTsKICB9CgoKICAvLz09PT09PT09IGNvbWJvIG9wZXJhdGlvbnMKICBmdW5jdGlvbiBmaWF0Q29sbGVjdGVkVG9FdGgodWludCBfY2hhcml0eSwgdWludCBfZmlhdCwgc3RyaW5nIF9yZWYpIHB1YmxpYyBtYW5hZ2VyT25seSBwYXlhYmxlIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMCk7CiAgICByZXF1aXJlKF9jaGFyaXR5IDwgY2hhcml0eUNvdW50KTsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRDb2xsZWN0ZWQgKz0gX2ZpYXQ7CiAgICAvL2NoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRCYWxhbmNlSW4gZG9lcyBub3QgY2hhbmdlLCBzaW5jZSB3ZSBpbW1lZGlhdGVseSBjb252ZXJ0IHRvIGV0aAogICAgLy9rZWVwIHRyYWNrIG9mIGZpYXQgdG8gZXRoIGNvbnZlcnNpb24gcHJpY2UKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRUb0V0aFByaWNlQWNjRmlhdCArPSBfZmlhdDsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRUb0V0aFByaWNlQWNjRXRoICs9IG1zZy52YWx1ZTsKICAgIHVpbnQgX3Rva2VuQ3V0ID0gKG1zZy52YWx1ZSAqIDQpIC8gMTAwOwogICAgdWludCBfb3BlcmF0b3JDdXQgPSAobXNnLnZhbHVlICogMTYpIC8gMTAwOwogICAgdWludCBfY2hhcml0eUNyZWRpdCA9IChtc2cudmFsdWUgLSBfb3BlcmF0b3JDdXQpIC0gX3Rva2VuQ3V0OwogICAgb3BlcmF0b3JGZWVBY2N0LnRyYW5zZmVyKF9vcGVyYXRvckN1dCk7CiAgICB0b2tlbi50cmFuc2ZlcihfdG9rZW5DdXQpOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoQmFsYW5jZSArPSBfY2hhcml0eUNyZWRpdDsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aENyZWRpdGVkICs9IF9jaGFyaXR5Q3JlZGl0OwogICAgRmlhdENvbGxlY3RlZEV2ZW50KF9jaGFyaXR5LCBfZmlhdCwgX3JlZik7CiAgICBGaWF0VG9FdGhFdmVudChfY2hhcml0eSwgX2ZpYXQsIG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBldGhUb0ZpYXREZWxpdmVyZWQodWludCBfY2hhcml0eSwgdWludCBfZXRoLCB1aW50IF9maWF0LCBzdHJpbmcgX3JlZikgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgIHJlcXVpcmUoX2NoYXJpdHkgPCBjaGFyaXR5Q291bnQpOwogICAgcmVxdWlyZShjaGFyaXRpZXNbX2NoYXJpdHldLmV0aEJhbGFuY2UgPj0gX2V0aCk7CiAgICAvL2tlZXAgdHJhY2sgb2YgZmlhdCB0byBldGggY29udmVyc2lvbiBwcmljZQogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoVG9GaWF0UHJpY2VBY2NGaWF0ICs9IF9maWF0OwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoVG9GaWF0UHJpY2VBY2NFdGggKz0gX2V0aDsKICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aEJhbGFuY2UgLT0gX2V0aDsKICAgIC8vY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdEJhbGFuY2VPdXQgZG9lcyBub3QgY2hhbmdlLCBzaW5jZSB3ZSBpbW1lZGlhdGVseSBkZWxpdmVyCiAgICAvL3dpdGhkcmF3IGZ1bmRzIHRvIHRoZSBjYWxsZXIKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoX2V0aCk7CiAgICBFdGhUb0ZpYXRFdmVudChfY2hhcml0eSwgX2V0aCwgX2ZpYXQpOwogICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdERlbGl2ZXJlZCArPSBfZmlhdDsKICAgIEZpYXREZWxpdmVyZWRFdmVudChfY2hhcml0eSwgX2ZpYXQsIF9yZWYpOwogIH0KCgogIC8vbm90ZTogY29udGFudCBmY24gZG9lcyBub3QgbmVlZCBzYWZlIG1hdGgKICBmdW5jdGlvbiBxdWlja0F1ZGl0RXRoQ3JlZGl0ZWQodWludCBfY2hhcml0eSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgX2ZpYXRDb2xsZWN0ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludCBfZmlhdFRvRXRoTm90UHJvY2Vzc2VkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgX2ZpYXRUb0V0aFByb2Nlc3NlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9maWF0VG9FdGhQcmljZVBlckV0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9maWF0VG9FdGhDcmVkaXRlZEZpbm5leSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9maWF0VG9FdGhBZnRlckZlZXNGaW5uZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludCBfZXRoRG9uYXRlZEZpbm5leSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9ldGhEb25hdGVkQWZ0ZXJGZWVzRmlubmV5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgX3RvdGFsRXRoQ3JlZGl0ZWRGaW5uZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBfcXVpY2tEaXNjcmVwYW5jeSkgewogICAgcmVxdWlyZShfY2hhcml0eSA8IGNoYXJpdHlDb3VudCk7CiAgICBfZmlhdENvbGxlY3RlZCA9IGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRDb2xsZWN0ZWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lZy4gJDQ1MCA9IDQ1MDAwCiAgICBfZmlhdFRvRXRoTm90UHJvY2Vzc2VkID0gY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdEJhbGFuY2VJbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lZy4gICAgICAgICAgICAwCiAgICBfZmlhdFRvRXRoUHJvY2Vzc2VkID0gX2ZpYXRDb2xsZWN0ZWQgLSBfZmlhdFRvRXRoTm90UHJvY2Vzc2VkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lZy4gICAgICAgIDQ1MDAwCiAgICBpZiAoY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdFRvRXRoUHJpY2VBY2NFdGggPT0gMCkgewogICAgICBfZmlhdFRvRXRoUHJpY2VQZXJFdGggPSAwOwogICAgICBfZmlhdFRvRXRoQ3JlZGl0ZWRGaW5uZXkgPSAwOwogICAgfSBlbHNlIHsKICAgICAgX2ZpYXRUb0V0aFByaWNlUGVyRXRoID0gKGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmZpYXRUb0V0aFByaWNlQWNjRmlhdCAqICgxIGV0aGVyKSkgLyAgICAgICAgICAgICAgICAvL2VnLiA0NTAwMCAqIDEwXjE4ID0gNDUgKiAxMF4yMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdFRvRXRoUHJpY2VBY2NFdGg7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWcgMS41IEVUSCAgICAgICAgPSAxNSAqIDEwXjE3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgMyAqIDEwXjQgKDMwMDAwIGNlbnRzIHBlciBldGhlcikKICAgICAgX2ZpYXRUb0V0aENyZWRpdGVkRmlubmV5ID0gX2ZpYXRUb0V0aFByb2Nlc3NlZCAqICgxIGV0aGVyIC8gMSBmaW5uZXkpIC8gX2ZpYXRUb0V0aFByaWNlUGVyRXRoOyAgICAgICAvL2VnLiA0NTAwMCAqIDEwMDAgLyAzMDAwMCA9IDE1MDAgKGZpbm5leSkKICAgICAgX2ZpYXRUb0V0aEFmdGVyRmVlc0Zpbm5leSA9IF9maWF0VG9FdGhDcmVkaXRlZEZpbm5leSAqIDggLyAxMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VnLiAxNTAwICogOCAvIDEwID0gMTIwMCAoZmlubmV5KQogICAgfQogICAgX2V0aERvbmF0ZWRGaW5uZXkgPSBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhEb25hdGVkIC8gKDEgZmlubmV5KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWcuIDEgRVRIID0gMSAqIDEwXjE4IC8gMTBeMTUgPSAxMDAwIChmaW5uZXkpCiAgICBfZXRoRG9uYXRlZEFmdGVyRmVlc0Zpbm5leSA9IF9ldGhEb25hdGVkRmlubmV5ICogOTggLyAxMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lZy4gMTAwMCAqIDk4LzEwMCA9IDk4MCAoZmlubmV5KQogICAgX3RvdGFsRXRoQ3JlZGl0ZWRGaW5uZXkgPSBfZmlhdFRvRXRoQWZ0ZXJGZWVzRmlubmV5ICsgX2V0aERvbmF0ZWRBZnRlckZlZXNGaW5uZXk7ICAgICAgICAgICAgICAgICAgICAgIC8vZWcgMTIwMCArIDk4MCA9IDIxODAgKGZpbm5leSkKICAgIHVpbnQyNTYgdGVjZiA9IGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aENyZWRpdGVkICogKDEgZXRoZXIgLyAxIGZpbm5leSk7CiAgICBfcXVpY2tEaXNjcmVwYW5jeSA9IGludDI1NihfdG90YWxFdGhDcmVkaXRlZEZpbm5leSkgLSBpbnQyNTYodGVjZik7CiAgfQoKCiAgLy9ub3RlOiBjb250YW50IGZjbiBkb2VzIG5vdCBuZWVkIHNhZmUgbWF0aAogIGZ1bmN0aW9uIHF1aWNrQXVkaXRGaWF0RGVsaXZlcmVkKHVpbnQgX2NoYXJpdHkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF90b3RhbEV0aENyZWRpdGVkRmlubmV5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgX2V0aE5vdFByb2Nlc3NlZEZpbm5leSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9wcm9jZXNzZWRFdGhDcmVkaXRlZEZpbm5leSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9ldGhUb0ZpYXRQcmljZVBlckV0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9ldGhUb0ZpYXRDcmVkaXRlZEZpYXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludCBfZXRoVG9GaWF0Tm90UHJvY2Vzc2VkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgX2V0aFRvRmlhdFByb2Nlc3NlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9maWF0RGVsaXZlcmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnQgX3F1aWNrRGlzY3JlcGFuY3kpIHsKICAgIHJlcXVpcmUoX2NoYXJpdHkgPCBjaGFyaXR5Q291bnQpOwogICAgX3RvdGFsRXRoQ3JlZGl0ZWRGaW5uZXkgPSBjaGFyaXRpZXNbY2hhcml0eUNvdW50XS5ldGhDcmVkaXRlZCAqICgxIGV0aGVyIC8gMSBmaW5uZXkpOwogICAgX2V0aE5vdFByb2Nlc3NlZEZpbm5leSA9IGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aEJhbGFuY2UgLyAoMSBmaW5uZXkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWcuIDEgRVRIID0gMSAqIDEwXjE4IC8gMTBeMTUgPSAxMDAwIChmaW5uZXkpCiAgICBfcHJvY2Vzc2VkRXRoQ3JlZGl0ZWRGaW5uZXkgPSBfdG90YWxFdGhDcmVkaXRlZEZpbm5leSAtIF9ldGhOb3RQcm9jZXNzZWRGaW5uZXk7ICAgICAgICAgICAgICAgICAgICAgICAgLy9lZyAxMTgwIGZpbm5leQogICAgaWYgKGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aFRvRmlhdFByaWNlQWNjRXRoID09IDApIHsKICAgICAgX2V0aFRvRmlhdFByaWNlUGVyRXRoID0gMDsKICAgICAgX2V0aFRvRmlhdENyZWRpdGVkRmlhdCA9IDA7CiAgICB9IGVsc2UgewogICAgICBfZXRoVG9GaWF0UHJpY2VQZXJFdGggPSAoY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZXRoVG9GaWF0UHJpY2VBY2NGaWF0ICogKDEgZXRoZXIpKSAvICAgICAgICAgICAgICAgIC8vZWcuIDI5NDAwICogMTBeMTggPSAyOTQwMDAwICogMTBeMTYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJpdGllc1tjaGFyaXR5Q291bnRdLmV0aFRvRmlhdFByaWNlQWNjRXRoOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VnIDAuOTgwIEVUSCAgICAgID0gICAgICA5OCAqIDEwXjE2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIDMwMDAwICgzMDAwMCBjZW50cyBwZXIgZXRoZXIpCiAgICAgIF9ldGhUb0ZpYXRDcmVkaXRlZEZpYXQgPSBfcHJvY2Vzc2VkRXRoQ3JlZGl0ZWRGaW5uZXkgKiBfZXRoVG9GaWF0UHJpY2VQZXJFdGggLyAoMSBldGhlciAvIDEgZmlubmV5KTsgLy9lZy4gMTE4MCAqIDMwMDAwIC8gMTAwMCA9IDM1NDAwCiAgICB9CiAgICBfZXRoVG9GaWF0Tm90UHJvY2Vzc2VkID0gY2hhcml0aWVzW19jaGFyaXR5XS5maWF0QmFsYW5jZU91dDsKICAgIF9ldGhUb0ZpYXRQcm9jZXNzZWQgPSBfZXRoVG9GaWF0Q3JlZGl0ZWRGaWF0IC0gX2V0aFRvRmlhdE5vdFByb2Nlc3NlZDsKICAgIF9maWF0RGVsaXZlcmVkID0gY2hhcml0aWVzW2NoYXJpdHlDb3VudF0uZmlhdERlbGl2ZXJlZDsKICAgIF9xdWlja0Rpc2NyZXBhbmN5ID0gaW50MjU2KF9ldGhUb0ZpYXRQcm9jZXNzZWQpIC0gaW50MjU2KF9maWF0RGVsaXZlcmVkKTsKICB9CgoKICAvLwogIC8vIGRlZmF1bHQgcGF5YWJsZSBmdW5jdGlvbi4KICAvLwogIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJldmVydCgpOwogIH0KCiAgLy9mb3IgZGVidWcKICAvL29ubHkgYXZhaWxhYmxlIGJlZm9yZSB0aGUgY29udHJhY3QgaXMgbG9ja2VkCiAgZnVuY3Rpb24gaGFyYUtpcmkoKSBwdWJsaWMgb3duZXJPbmx5IHVubG9ja2VkT25seSB7CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCn0='.
	

]
