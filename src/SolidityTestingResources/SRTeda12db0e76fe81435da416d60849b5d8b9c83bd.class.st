Class {
	#name : #SRTeda12db0e76fe81435da416d60849b5d8b9c83bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeda12db0e76fe81435da416d60849b5d8b9c83bd >> base64 [
	^ ''.
	

]
