Class {
	#name : #SRTb1ea18b3195d25847fedc83511043ac2be9e9bf1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1ea18b3195d25847fedc83511043ac2be9e9bf1 >> base64 [
	^ ''.
	

]
