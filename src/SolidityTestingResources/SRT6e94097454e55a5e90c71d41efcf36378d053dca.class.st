Class {
	#name : #SRT6e94097454e55a5e90c71d41efcf36378d053dca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e94097454e55a5e90c71d41efcf36378d053dca >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKLyoqCiAqIEBkZXYgRG91YmxlIGxpbmtlZCBsaXN0IHdpdGggYWRkcmVzcyBpdGVtcwogKi8KbGlicmFyeSBBZGRyZXNzTGlzdCB7CiAgICBzdHJ1Y3QgRGF0YSB7CiAgICAgICAgYWRkcmVzcyBoZWFkOwogICAgICAgIGFkZHJlc3MgdGFpbDsKICAgICAgICB1aW50ICAgIGxlbmd0aDsKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgICAgaXNDb250YWluOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBhZGRyZXNzKSBuZXh0T2Y7CiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3MpIHByZXZPZjsKICAgIH0KCiAgICBmdW5jdGlvbiBmaXJzdChEYXRhIHN0b3JhZ2UgX2RhdGEpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpCiAgICB7IHJldHVybiBfZGF0YS5oZWFkOyB9CgogICAgZnVuY3Rpb24gbGFzdChEYXRhIHN0b3JhZ2UgX2RhdGEpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpCiAgICB7IHJldHVybiBfZGF0YS50YWlsOyB9CgogICAgLyoqCiAgICAgKiBAZGV2IENoZWMgbGlzdCBmb3IgZWxlbWVudAogICAgICogQHBhcmFtIF9kYXRhIGlzIGxpc3Qgc3RvcmFnZSByZWYKICAgICAqIEBwYXJhbSBfaXRlbSBpcyBhbiBlbGVtZW50CiAgICAgKiBAcmV0dXJuIGB0cnVlYCB3aGVuIGVsZW1lbnQgaW4gbGlzdAogICAgICovCiAgICBmdW5jdGlvbiBjb250YWlucyhEYXRhIHN0b3JhZ2UgX2RhdGEsIGFkZHJlc3MgX2l0ZW0pIGNvbnN0YW50IHJldHVybnMgKGJvb2wpCiAgICB7IHJldHVybiBfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dOyB9CgogICAgLyoqCiAgICAgKiBAZGV2IE5leHQgZWxlbWVudCBvZiBsaXN0CiAgICAgKiBAcGFyYW0gX2RhdGEgaXMgbGlzdCBzdG9yYWdlIHJlZgogICAgICogQHBhcmFtIF9pdGVtIGlzIGN1cnJlbnQgZWxlbWVudCBvZiBsaXN0CiAgICAgKiBAcmV0dXJuIG5leHQgZWxlbWVuIG9mIGxpc3QKICAgICAqLwogICAgZnVuY3Rpb24gbmV4dChEYXRhIHN0b3JhZ2UgX2RhdGEsIGFkZHJlc3MgX2l0ZW0pIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpCiAgICB7IHJldHVybiBfZGF0YS5uZXh0T2ZbX2l0ZW1dOyB9CgogICAgLyoqCiAgICAgKiBAZGV2IFByZXZpb3VzIGVsZW1lbnQgb2YgbGlzdAogICAgICogQHBhcmFtIF9kYXRhIGlzIGxpc3Qgc3RvcmFnZSByZWYKICAgICAqIEBwYXJhbSBfaXRlbSBpcyBjdXJyZW50IGVsZW1lbnQgb2YgbGlzdAogICAgICogQHJldHVybiBwcmV2aW91cyBlbGVtZW50IG9mIGxpc3QgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByZXYoRGF0YSBzdG9yYWdlIF9kYXRhLCBhZGRyZXNzIF9pdGVtKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKQogICAgeyByZXR1cm4gX2RhdGEucHJldk9mW19pdGVtXTsgfQoKICAgIC8qKgogICAgICogQGRldiBBcHBlbmQgZWxlbWVudCB0byBlbmQgb2YgbGlzdAogICAgICogQHBhcmFtIF9kYXRhIGlzIGxpc3Qgc3RvcmFnZSByZWYKICAgICAqIEBwYXJhbSBfaXRlbSBpcyBhIG5ldyBsaXN0IGVsZW1lbnQgIAogICAgICovCiAgICBmdW5jdGlvbiBhcHBlbmQoRGF0YSBzdG9yYWdlIF9kYXRhLCBhZGRyZXNzIF9pdGVtKQogICAgeyBhcHBlbmQoX2RhdGEsIF9pdGVtLCBfZGF0YS50YWlsKTsgfQoKICAgIC8qKgogICAgICogQGRldiBBcHBlbmQgZWxlbWVudCB0byBlbmQgb2YgZWxlbWVudAogICAgICogQHBhcmFtIF9kYXRhIGlzIGxpc3Qgc3RvcmFnZSByZWYKICAgICAqIEBwYXJhbSBfaXRlbSBpcyBhIG5ldyBsaXN0IGVsZW1lbnQgIAogICAgICogQHBhcmFtIF90byBpcyBhIGl0ZW0gZWxlbWVudCBiZWZvcmUgbmV3IAogICAgICogQG5vdGljZSBnYXMgdXNhZ2UgPCAxMDAwMDAKICAgICAqLwogICAgZnVuY3Rpb24gYXBwZW5kKERhdGEgc3RvcmFnZSBfZGF0YSwgYWRkcmVzcyBfaXRlbSwgYWRkcmVzcyBfdG8pIHsKICAgICAgICAvLyBVbmFibGUgdG8gY29udGFpbiBkb3VibGUgZWxlbWVudAogICAgICAgIGlmIChfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dKSB0aHJvdzsKCiAgICAgICAgLy8gRW1wdHkgbGlzdAogICAgICAgIGlmIChfZGF0YS5oZWFkID09IDApIHsKICAgICAgICAgICAgX2RhdGEuaGVhZCA9IF9kYXRhLnRhaWwgPSBfaXRlbTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoIV9kYXRhLmlzQ29udGFpbltfdG9dKSB0aHJvdzsKIAogICAgICAgICAgICB2YXIgbmV4dFRvID0gX2RhdGEubmV4dE9mW190b107CiAgICAgICAgICAgIGlmIChuZXh0VG8gIT0gMCkgewogICAgICAgICAgICAgICAgX2RhdGEucHJldk9mW25leHRUb10gPSBfaXRlbTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF9kYXRhLnRhaWwgPSBfaXRlbTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2RhdGEubmV4dE9mW190b10gICAgPSBfaXRlbTsKICAgICAgICAgICAgX2RhdGEucHJldk9mW19pdGVtXSAgPSBfdG87CiAgICAgICAgICAgIF9kYXRhLm5leHRPZltfaXRlbV0gID0gbmV4dFRvOwogICAgICAgIH0KICAgICAgICBfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dID0gdHJ1ZTsKICAgICAgICArK19kYXRhLmxlbmd0aDsKICAgIH0KIAogICAgLyoqCiAgICAgKiBAZGV2IFByZXBlbmQgZWxlbWVudCB0byBiZWdpbiBvZiBsaXN0CiAgICAgKiBAcGFyYW0gX2RhdGEgaXMgbGlzdCBzdG9yYWdlIHJlZgogICAgICogQHBhcmFtIF9pdGVtIGlzIGEgbmV3IGxpc3QgZWxlbWVudCAgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByZXBlbmQoRGF0YSBzdG9yYWdlIF9kYXRhLCBhZGRyZXNzIF9pdGVtKQogICAgeyBwcmVwZW5kKF9kYXRhLCBfaXRlbSwgX2RhdGEuaGVhZCk7IH0KCiAgICAvKioKICAgICAqIEBkZXYgUHJlcGVuZCBlbGVtZW50IHRvIGVsZW1lbnQgb2YgbGlzdAogICAgICogQHBhcmFtIF9kYXRhIGlzIGxpc3Qgc3RvcmFnZSByZWYKICAgICAqIEBwYXJhbSBfaXRlbSBpcyBhIG5ldyBsaXN0IGVsZW1lbnQgIAogICAgICogQHBhcmFtIF90byBpcyBhIGl0ZW0gZWxlbWVudCBiZWZvcmUgbmV3IAogICAgICovCiAgICBmdW5jdGlvbiBwcmVwZW5kKERhdGEgc3RvcmFnZSBfZGF0YSwgYWRkcmVzcyBfaXRlbSwgYWRkcmVzcyBfdG8pIHsKICAgICAgICAvLyBVbmFibGUgdG8gY29udGFpbiBkb3VibGUgZWxlbWVudAogICAgICAgIGlmIChfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dKSB0aHJvdzsKCiAgICAgICAgLy8gRW1wdHkgbGlzdAogICAgICAgIGlmIChfZGF0YS5oZWFkID09IDApIHsKICAgICAgICAgICAgX2RhdGEuaGVhZCA9IF9kYXRhLnRhaWwgPSBfaXRlbTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoIV9kYXRhLmlzQ29udGFpbltfdG9dKSB0aHJvdzsKIAogICAgICAgICAgICB2YXIgcHJldlRvID0gX2RhdGEucHJldk9mW190b107CiAgICAgICAgICAgIGlmIChwcmV2VG8gIT0gMCkgewogICAgICAgICAgICAgICAgX2RhdGEubmV4dE9mW3ByZXZUb10gPSBfaXRlbTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF9kYXRhLmhlYWQgPSBfaXRlbTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2RhdGEucHJldk9mW19pdGVtXSAgPSBwcmV2VG87CiAgICAgICAgICAgIF9kYXRhLm5leHRPZltfaXRlbV0gID0gX3RvOwogICAgICAgICAgICBfZGF0YS5wcmV2T2ZbX3RvXSAgICA9IF9pdGVtOwogICAgICAgIH0KICAgICAgICBfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dID0gdHJ1ZTsKICAgICAgICArK19kYXRhLmxlbmd0aDsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmVtb3ZlIGVsZW1lbnQgZnJvbSBsaXN0CiAgICAgKiBAcGFyYW0gX2RhdGEgaXMgbGlzdCBzdG9yYWdlIHJlZgogICAgICogQHBhcmFtIF9pdGVtIGlzIGEgcmVtb3ZlZCBsaXN0IGVsZW1lbnQKICAgICAqLwogICAgZnVuY3Rpb24gcmVtb3ZlKERhdGEgc3RvcmFnZSBfZGF0YSwgYWRkcmVzcyBfaXRlbSkgewogICAgICAgIGlmICghX2RhdGEuaXNDb250YWluW19pdGVtXSkgdGhyb3c7CgogICAgICAgIHZhciBlbGVtUHJldiA9IF9kYXRhLnByZXZPZltfaXRlbV07CiAgICAgICAgdmFyIGVsZW1OZXh0ID0gX2RhdGEubmV4dE9mW19pdGVtXTsKCiAgICAgICAgaWYgKGVsZW1QcmV2ICE9IDApIHsKICAgICAgICAgICAgX2RhdGEubmV4dE9mW2VsZW1QcmV2XSA9IGVsZW1OZXh0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9kYXRhLmhlYWQgPSBlbGVtTmV4dDsKICAgICAgICB9CgogICAgICAgIGlmIChlbGVtTmV4dCAhPSAwKSB7CiAgICAgICAgICAgIF9kYXRhLnByZXZPZltlbGVtTmV4dF0gPSBlbGVtUHJldjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfZGF0YS50YWlsID0gZWxlbVByZXY7CiAgICAgICAgfQoKICAgICAgICBfZGF0YS5pc0NvbnRhaW5bX2l0ZW1dID0gZmFsc2U7CiAgICAgICAgLS1fZGF0YS5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJlcGxhY2UgZWxlbWVudCBvbiBsaXN0CiAgICAgKiBAcGFyYW0gX2RhdGEgaXMgbGlzdCBzdG9yYWdlIHJlZgogICAgICogQHBhcmFtIF9mcm9tIGlzIG9sZCBlbGVtZW50CiAgICAgKiBAcGFyYW0gX3RvIGlzIGEgbmV3IGVsZW1lbnQKICAgICAqLwogICAgZnVuY3Rpb24gcmVwbGFjZShEYXRhIHN0b3JhZ2UgX2RhdGEsIGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvKSB7CiAgICAgICAgaWYgKCFfZGF0YS5pc0NvbnRhaW5bX2Zyb21dKSB0aHJvdzsKCiAgICAgICAgdmFyIGVsZW1QcmV2ID0gX2RhdGEucHJldk9mW19mcm9tXTsKICAgICAgICB2YXIgZWxlbU5leHQgPSBfZGF0YS5uZXh0T2ZbX2Zyb21dOwoKICAgICAgICBpZiAoZWxlbVByZXYgIT0gMCkgewogICAgICAgICAgICBfZGF0YS5uZXh0T2ZbZWxlbVByZXZdID0gX3RvOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9kYXRhLmhlYWQgPSBfdG87CiAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICBpZiAoZWxlbU5leHQgIT0gMCkgewogICAgICAgICAgICBfZGF0YS5wcmV2T2ZbZWxlbU5leHRdID0gX3RvOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9kYXRhLnRhaWwgPSBfdG87CiAgICAgICAgfQoKICAgICAgICBfZGF0YS5wcmV2T2ZbX3RvXSA9IGVsZW1QcmV2OwogICAgICAgIF9kYXRhLm5leHRPZltfdG9dID0gZWxlbU5leHQ7CiAgICAgICAgX2RhdGEuaXNDb250YWluW19mcm9tXSA9IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTd2FwIHR3byBlbGVtZW50cyBvZiBsaXN0CiAgICAgKiBAcGFyYW0gX2RhdGEgaXMgbGlzdCBzdG9yYWdlIHJlZgogICAgICogQHBhcmFtIF9hIGlzIGEgZmlyc3QgZWxlbWVudAogICAgICogQHBhcmFtIF9iIGlzIGEgc2Vjb25kIGVsZW1lbnQKICAgICAqLwogICAgZnVuY3Rpb24gc3dhcChEYXRhIHN0b3JhZ2UgX2RhdGEsIGFkZHJlc3MgX2EsIGFkZHJlc3MgX2IpIHsKICAgICAgICBpZiAoIV9kYXRhLmlzQ29udGFpbltfYV0gfHwgIV9kYXRhLmlzQ29udGFpbltfYl0pIHRocm93OyAKCiAgICAgICAgdmFyIHByZXZBID0gX2RhdGEucHJldk9mW19hXTsKCiAgICAgICAgcmVtb3ZlKF9kYXRhLCBfYSk7CiAgICAgICAgcmVwbGFjZShfZGF0YSwgX2IsIF9hKTsKCiAgICAgICAgaWYgKHByZXZBID09IDApIHsKICAgICAgICAgICAgcHJlcGVuZChfZGF0YSwgX2IpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFwcGVuZChfZGF0YSwgX2IsIHByZXZBKTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
