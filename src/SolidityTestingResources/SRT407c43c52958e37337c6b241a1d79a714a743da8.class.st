Class {
	#name : #SRT407c43c52958e37337c6b241a1d79a714a743da8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT407c43c52958e37337c6b241a1d79a714a743da8 >> base64 [
	^ ''.
	

]
