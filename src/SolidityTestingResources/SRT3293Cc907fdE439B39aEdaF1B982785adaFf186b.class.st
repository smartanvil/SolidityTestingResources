Class {
	#name : #SRT3293Cc907fdE439B39aEdaF1B982785adaFf186b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3293Cc907fdE439B39aEdaF1B982785adaFf186b >> base64 [
	^ ''.
	

]
