Class {
	#name : #SRT2c6537795def9ee3a4ff5a99dab508fe1c8d2d25,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c6537795def9ee3a4ff5a99dab508fe1c8d2d25 >> base64 [
	^ ''.
	

]
