Class {
	#name : #SRTcc70741313254e83fe697a964d4f8971f5ba21b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc70741313254e83fe697a964d4f8971f5ba21b2 >> base64 [
	^ ''.
	

]
