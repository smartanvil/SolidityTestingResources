Class {
	#name : #SRT446D1696a5527018453cdA3d67aa4C2cd189b9f6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT446D1696a5527018453cdA3d67aa4C2cd189b9f6 >> base64 [
	^ ''.
	

]
