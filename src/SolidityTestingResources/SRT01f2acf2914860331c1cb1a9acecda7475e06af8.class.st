Class {
	#name : #SRT01f2acf2914860331c1cb1a9acecda7475e06af8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT01f2acf2914860331c1cb1a9acecda7475e06af8 >> base64 [
	^ ''.
	

]
