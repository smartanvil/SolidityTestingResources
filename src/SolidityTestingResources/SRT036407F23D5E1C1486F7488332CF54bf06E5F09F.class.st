Class {
	#name : #SRT036407F23D5E1C1486F7488332CF54bf06E5F09F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT036407F23D5E1C1486F7488332CF54bf06E5F09F >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoKICBBdXRob3I6IFZpY3RvciBNZXpyaW4gIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iYTRkMmNkYzdkMGNiZDZlNGM5YzFkZWQ2Y2RjYThhYzdjYmM5Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPgoqLwoKCi8qIEludGVyZmFjZSBvZiB0aGUgRVJDMjIzIHRva2VuICovCmNvbnRyYWN0IEVSQzIyM1Rva2VuSW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX25hbWUpOwogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpOwogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCBfZGVjaW1hbHMpOwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9zdXBwbHkpOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSk7CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfcmVtYWluaW5nKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfbWV0YWRhdGEpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcyk7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIG1ldGFkYXRhKTsKfQoKCi8qIEludGVyZmFjZSBvZiB0aGUgY29udHJhY3QgdGhhdCBpcyBnb2luZyB0byByZWNlaXZlIEVSQzIyMyB0b2tlbnMgKi8KY29udHJhY3QgRVJDMjIzQ29udHJhY3RJbnRlcmZhY2UgewogICAgZnVuY3Rpb24gZXJjMjIzRmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKXsKICAgICAgICAvLyB0byBhdm9pZCB3YXJuaW5ncyBkdXJpbmcgY29tcGlsYXRpb24KICAgICAgICBfZnJvbSA9IF9mcm9tOwogICAgICAgIF92YWx1ZSA9IF92YWx1ZTsKICAgICAgICBfZGF0YSA9IF9kYXRhOwogICAgICAgIC8vIEluY29taW5nIHRyYW5zYWN0aW9uIGNvZGUgaGVyZQogICAgICAgIHRocm93OwogICAgfQp9CgoKLyogaHR0cHM6Ly9naXRodWIuY29tL0x5a2tlQ2l0eS9FdGhlcmV1bUFwaURvdE5ldENvcmUvYmxvYi9tYXN0ZXIvc3JjL0NvbnRyYWN0QnVpbGRlci9jb250cmFjdHMvdG9rZW4vU2FmZU1hdGguc29sICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIE1BWF9VSU5UMjU2ID0KICAgIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBpZiAoeCA+IE1BWF9VSU5UMjU2IC0geSkgdGhyb3c7CiAgICAgICAgcmV0dXJuIHggKyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGlmICh4IDwgeSkgdGhyb3c7CiAgICAgICAgcmV0dXJuIHggLSB5OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGlmICh5ID09IDApIHJldHVybiAwOwogICAgICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLyB5KSB0aHJvdzsKICAgICAgICByZXR1cm4geCAqIHk7CiAgICB9Cn0KCgpjb250cmFjdCBFUkMyMjNUb2tlbiBpcyBFUkMyMjNUb2tlbkludGVyZmFjZSwgU2FmZU1hdGggewoKICAgIC8qCiAgICAgIFN0b3JhZ2Ugb2YgdGhlIGNvbnRyYWN0CiAgICAqLwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93YW5jZXM7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCgogICAgLyoKICAgICAgR2V0dGVycwogICAgKi8KCiAgICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9uYW1lKSB7CiAgICAgICAgcmV0dXJuIG5hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsKICAgICAgICByZXR1cm4gc3ltYm9sOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDggX2RlY2ltYWxzKSB7CiAgICAgICAgcmV0dXJuIGRlY2ltYWxzOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfc3VwcGx5KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKCiAgICAvKgogICAgICBBbGxvdyB0byBzcGVuZAogICAgKi8KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlc1ttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9yZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dhbmNlc1tfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCgogICAgLyoKICAgICAgVHJhbnNmZXIKICAgICovCgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGVtcHR5TWV0YWRhdGE7CiAgICAgICAgX190cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgZW1wdHlNZXRhZGF0YSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfbWV0YWRhdGEpIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpCiAgICB7CiAgICAgICAgX190cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX21ldGFkYXRhKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX21ldGFkYXRhKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICAgICAgaWYgKGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsKCiAgICAgICAgYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBlbXB0eU1ldGFkYXRhOwogICAgICAgIF9fdHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlLCBlbXB0eU1ldGFkYXRhKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBfX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX21ldGFkYXRhKSBpbnRlcm5hbAogICAgewogICAgICAgIGlmIChfZnJvbSA9PSBfdG8pIHRocm93OwogICAgICAgIGlmIChfdmFsdWUgPT0gMCkgdGhyb3c7CiAgICAgICAgaWYgKGJhbGFuY2VPZihfZnJvbSkgPCBfdmFsdWUpIHRocm93OwoKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VPZihfZnJvbSksIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZU9mKF90byksIF92YWx1ZSk7CgogICAgICAgIGlmIChpc0NvbnRyYWN0KF90bykpIHsKICAgICAgICAgICAgRVJDMjIzQ29udHJhY3RJbnRlcmZhY2UgcmVjZWl2ZXJDb250cmFjdCA9IEVSQzIyM0NvbnRyYWN0SW50ZXJmYWNlKF90byk7CiAgICAgICAgICAgIHJlY2VpdmVyQ29udHJhY3QuZXJjMjIzRmFsbGJhY2soX2Zyb20sIF92YWx1ZSwgX21ldGFkYXRhKTsKICAgICAgICB9CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CgoKICAgIC8qCiAgICAgIEhlbHBlcnMKICAgICovCgogICAgLy8gQXNzZW1ibGUgdGhlIGdpdmVuIGFkZHJlc3MgYnl0ZWNvZGUuIElmIGJ5dGVjb2RlIGV4aXN0cyB0aGVuIHRoZSBfYWRkciBpcyBhIGNvbnRyYWN0LgogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBpbnRlcm5hbCByZXR1cm5zIChib29sIF9pc0NvbnRyYWN0KSB7CiAgICAgICAgX2FkZHIgPSBfYWRkcjsgLy8gdG8gYXZvaWQgd2FybmluZ3MgZHVyaW5nIGNvbXBpbGF0aW9uCgogICAgICAgIHVpbnQyNTYgbGVuZ3RoOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy9yZXRyaWV2ZSB0aGUgc2l6ZSBvZiB0aGUgY29kZSBvbiB0YXJnZXQgYWRkcmVzcywgdGhpcyBuZWVkcyBhc3NlbWJseQogICAgICAgICAgICBsZW5ndGggOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICAgICAgfQogICAgICAgIHJldHVybiAobGVuZ3RoID4gMCk7CiAgICB9Cn0KCgoKY29udHJhY3QgQUJDVG9rZW4gaXMgRVJDMjIzVG9rZW4gewogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEFCQ1Rva2VuKAogICAgICAgICAgICBzdHJpbmcgX25hbWUsCiAgICAgICAgICAgIHN0cmluZyBfc3ltYm9sLAogICAgICAgICAgICB1aW50OCBfZGVjaW1hbHMsCiAgICAgICAgICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5LAogICAgICAgICAgICBhZGRyZXNzIF9pbml0aWFsVG9rZW5zSG9sZGVyKSB7CiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7CiAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgICAgYmFsYW5jZXNbX2luaXRpYWxUb2tlbnNIb2xkZXJdID0gX3RvdGFsU3VwcGx5OwogICAgfQp9'.
	

]
