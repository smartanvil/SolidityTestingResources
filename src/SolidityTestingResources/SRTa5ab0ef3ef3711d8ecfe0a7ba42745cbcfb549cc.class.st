Class {
	#name : #SRTa5ab0ef3ef3711d8ecfe0a7ba42745cbcfb549cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa5ab0ef3ef3711d8ecfe0a7ba42745cbcfb549cc >> base64 [
	^ ''.
	

]
