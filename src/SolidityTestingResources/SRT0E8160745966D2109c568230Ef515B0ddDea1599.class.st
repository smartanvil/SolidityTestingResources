Class {
	#name : #SRT0E8160745966D2109c568230Ef515B0ddDea1599,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0E8160745966D2109c568230Ef515B0ddDea1599 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgppbnRlcmZhY2UgdG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwp9Cgpjb250cmFjdCBDcm93ZFNhbGUgewogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbDsKICAgIHVpbnQgcHVibGljIGFtb3VudFJhaXNlZDsKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZTsKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lOwogICAgdWludCBwdWJsaWMgZW5kRmlyc3RCb251czsKICAgIHVpbnQgcHVibGljIGVuZFNlY29uZEJvbnVzOwogICAgdWludCBwdWJsaWMgZW5kVGhpcmRCb251czsKICAgIHVpbnQgcHVibGljIGhhcmRDYXA7CiAgICB1aW50IHB1YmxpYyBwcmljZTsKICAgIHVpbnQgcHVibGljIG1pblB1cmNoYXNlOwogICAgdG9rZW4gcHVibGljIHRva2VuUmV3YXJkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBib29sIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CgogICAgZXZlbnQgR29hbFJlYWNoZWQoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgdG90YWxBbW91bnRSYWlzZWQpOwogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CiAgICBldmVudCBDcm93ZHNhbGVDbG9zZSh1aW50IHRvdGFsQW1vdW50UmFpc2VkLCBib29sIGZ1bmRpbmdHb2FsUmVhY2hlZCk7CgogICAgLyoqCiAgICAgKiBDb25zdHJjdG9yIGZ1bmN0aW9uCiAgICAgKgogICAgICogU2V0dXAgdGhlIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIENyb3dkU2FsZSgKICAgICAgICBhZGRyZXNzIGlmU3VjY2Vzc2Z1bFNlbmRUbywKICAgICAgICBhZGRyZXNzIGFkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkLAogICAgICAgIHVpbnQgdG9rZW5zUGVyRXRoLAogICAgICAgIHVpbnQgX21pblB1cmNoYXNlLAogICAgICAgIHVpbnQgZnVuZGluZ0dvYWxJbldlaSwKICAgICAgICB1aW50IGhhcmRDYXBJbldlaSwKICAgICAgICB1aW50IHN0YXJ0VGltZUluU2Vjb25kcywKICAgICAgICB1aW50IGR1cmF0aW9uSW5NaW51dGVzLAogICAgICAgIHVpbnQgX2VuZEZpcnN0Qm9udXMsCiAgICAgICAgdWludCBfZW5kU2Vjb25kQm9udXMsCiAgICAgICAgdWludCBfZW5kVGhpcmRCb251cwogICAgKSBwdWJsaWMgewogICAgICAgIGJlbmVmaWNpYXJ5ID0gaWZTdWNjZXNzZnVsU2VuZFRvOwogICAgICAgIHRva2VuUmV3YXJkID0gdG9rZW4oYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQpOwogICAgICAgIHByaWNlID0gdG9rZW5zUGVyRXRoOwogICAgICAgIG1pblB1cmNoYXNlID0gX21pblB1cmNoYXNlOwogICAgICAgIGZ1bmRpbmdHb2FsID0gZnVuZGluZ0dvYWxJbldlaTsKICAgICAgICBoYXJkQ2FwID0gaGFyZENhcEluV2VpOwogICAgICAgIHN0YXJ0VGltZSA9IHN0YXJ0VGltZUluU2Vjb25kczsKICAgICAgICBkZWFkbGluZSA9IHN0YXJ0VGltZUluU2Vjb25kcyArIGR1cmF0aW9uSW5NaW51dGVzICogMSBtaW51dGVzOwogICAgICAgIGVuZEZpcnN0Qm9udXMgPSBfZW5kRmlyc3RCb251czsKICAgICAgICBlbmRTZWNvbmRCb251cyA9IF9lbmRTZWNvbmRCb251czsKICAgICAgICBlbmRUaGlyZEJvbnVzID0gX2VuZFRoaXJkQm9udXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBEbyBwdXJjaGFzZSBwcm9jZXNzCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBwdXJjaGFzZSgpIGludGVybmFsIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IHZwID0gYW1vdW50ICogcHJpY2U7CiAgICAgICAgdWludCB0b2tlbnMgPSAoKHZwICsgKCh2cCAqIGdldEJvbnVzKCkpIC8gMTAwKSkpIC8gMSBldGhlcjsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgICAgIGFtb3VudFJhaXNlZCArPSBhbW91bnQ7CiAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXJGcm9tKGJlbmVmaWNpYXJ5LCBtc2cuc2VuZGVyLCB0b2tlbnMpOwogICAgICAgIGNoZWNrR29hbFJlYWNoZWQoKTsKICAgICAgICBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uCiAgICAgKgogICAgICogVGhlIGZ1bmN0aW9uIHdpdGhvdXQgbmFtZSBpcyB0aGUgZGVmYXVsdCBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBhbnlvbmUgc2VuZHMgZnVuZHMgdG8gYSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbigpCiAgICBwYXlhYmxlCiAgICBpc09wZW4KICAgIGFmdGVyU3RhcnQKICAgIGhhcmRDYXBOb3RSZWFjaGVkCiAgICBhYm92ZU1pblZhbHVlCiAgICBwdWJsaWMgewogICAgICAgIHB1cmNoYXNlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgZnVuY3Rpb24gY2FsbGVkIG9ubHkgZnJvbSBzaGlmdHNhbGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNoaWZ0U2FsZVB1cmNoYXNlKCkKICAgIHBheWFibGUKICAgIGlzT3BlbgogICAgYWZ0ZXJTdGFydAogICAgaGFyZENhcE5vdFJlYWNoZWQKICAgIGFib3ZlTWluVmFsdWUKICAgIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBwdXJjaGFzZSgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIG1vZGlmaWVyIGFmdGVyU3RhcnQoKSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gc3RhcnRUaW1lKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGFmdGVyRGVhZGxpbmUoKSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gZGVhZGxpbmUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgcHJldmlvdXNEZWFkbGluZSgpIHsKICAgICAgICByZXF1aXJlKG5vdyA8PSBkZWFkbGluZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc093bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBiZW5lZmljaWFyeSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0Nsb3NlZCgpIHsKICAgICAgICByZXF1aXJlKGNyb3dkc2FsZUNsb3NlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc09wZW4oKSB7CiAgICAgICAgcmVxdWlyZSghY3Jvd2RzYWxlQ2xvc2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGhhcmRDYXBOb3RSZWFjaGVkKCkgewogICAgICAgIHJlcXVpcmUoYW1vdW50UmFpc2VkIDwgaGFyZENhcCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBhYm92ZU1pblZhbHVlKCkgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IG1pblB1cmNoYXNlKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgZ29hbCB3YXMgcmVhY2hlZAogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tHb2FsUmVhY2hlZCgpIGludGVybmFsIHsKICAgICAgICBpZiAoYW1vdW50UmFpc2VkID49IGZ1bmRpbmdHb2FsICYmICFmdW5kaW5nR29hbFJlYWNoZWQpIHsKICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgR29hbFJlYWNoZWQoYmVuZWZpY2lhcnksIGFtb3VudFJhaXNlZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ2xvc2UgdGhlIGNyb3dkc2FsZQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gY2xvc2VDcm93ZHNhbGUoKQogICAgaXNPd25lcgogICAgcHVibGljIHsKICAgICAgICBjcm93ZHNhbGVDbG9zZWQgPSB0cnVlOwogICAgICAgIENyb3dkc2FsZUNsb3NlKGFtb3VudFJhaXNlZCwgZnVuZGluZ0dvYWxSZWFjaGVkKTsKICAgIH0KCiAgICAvKioKICAgICAqIENoYW5nZSBtaW4gcHVyY2hhc2UgdmFsdWUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE1pblB1cmNoYXNlVmFsdWUodWludCBfbWluUHVyY2hhc2UpCiAgICBpc093bmVyCiAgICBwdWJsaWMgewogICAgICAgIG1pblB1cmNoYXNlID0gX21pblB1cmNoYXNlOwogICAgfQoKICAgIC8qKgogICAgICogV2l0aGRyYXcgdGhlIGZ1bmRzCiAgICAgKgogICAgICogQ2hlY2tzIHRvIHNlZSBpZiBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCwgYW5kIGlmIHNvLCBhbmQgdGhlIGZ1bmRpbmcgZ29hbCB3YXMgcmVhY2hlZCwKICAgICAqIHNlbmRzIHRoZSBlbnRpcmUgYW1vdW50IHRvIHRoZSBiZW5lZmljaWFyeS4gSWYgZ29hbCB3YXMgbm90IHJlYWNoZWQsIGVhY2ggY29udHJpYnV0b3IgY2FuIHdpdGhkcmF3CiAgICAgKiB0aGUgYW1vdW50IHRoZXkgY29udHJpYnV0ZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVXaXRoZHJhd2FsKCkKICAgIGFmdGVyRGVhZGxpbmUKICAgIGlzQ2xvc2VkCiAgICBwdWJsaWMgewogICAgICAgIGlmICghZnVuZGluZ0dvYWxSZWFjaGVkKSB7CiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdOwogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChhbW91bnQpKSB7CiAgICAgICAgICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgZmFsc2UpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBhbW91bnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmdW5kaW5nR29hbFJlYWNoZWQgJiYgYmVuZWZpY2lhcnkgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICBpZiAoYmVuZWZpY2lhcnkuc2VuZChhbW91bnRSYWlzZWQpKSB7CiAgICAgICAgICAgICAgICBGdW5kVHJhbnNmZXIoYmVuZWZpY2lhcnksIGFtb3VudFJhaXNlZCwgZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy9JZiB3ZSBmYWlsIHRvIHNlbmQgdGhlIGZ1bmRzIHRvIGJlbmVmaWNpYXJ5LCB1bmxvY2sgZnVuZGVycyBiYWxhbmNlCiAgICAgICAgICAgICAgICBmdW5kaW5nR29hbFJlYWNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb251cygpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoc3RhcnRUaW1lIDw9IG5vdykgewogICAgICAgICAgICBpZiAobm93IDw9IGVuZEZpcnN0Qm9udXMpIHsKICAgICAgICAgICAgICAgIHJldHVybiA1MDsKICAgICAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gZW5kU2Vjb25kQm9udXMpIHsKICAgICAgICAgICAgICAgIHJldHVybiA0MDsKICAgICAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gZW5kVGhpcmRCb251cykgewogICAgICAgICAgICAgICAgcmV0dXJuIDMwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIDIwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfQp9'.
	

]
