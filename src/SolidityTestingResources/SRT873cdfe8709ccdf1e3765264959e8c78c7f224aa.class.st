Class {
	#name : #SRT873cdfe8709ccdf1e3765264959e8c78c7f224aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT873cdfe8709ccdf1e3765264959e8c78c7f224aa >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoKICAgCiAgIAogICAKICAgCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCmZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIAogICAgcmV0dXJuIGM7CiAgICB9CiAKZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICAgIH0KCmZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogICAgfQp9IAoKY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7Cn0KCgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKCgoKCgpmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgIAogICAgcmVxdWlyZSAoIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICByZXF1aXJlICggYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKICAgIAogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwp9CgoKZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgewogICAgCiAgICByZXF1aXJlICggYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgCiAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7Cn0KCgoKCgoKCmZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKfQoKfQoKCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewogICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgCiAgIAogICAKICAgCiAgIAogICAKICAgCiAgIAogICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgICAgCiAgICAgICAKICAgICAgIAogICAgICAgCiAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgIH0gCiAgIAoKCgoKCiAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICByZXF1aXJlICggISgoX3ZhbHVlICE9MCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9MCkpKTsKICAgIAogICAgCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwp9CgoKCgoKCgpmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKfQoKfQoKY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCgoKCm1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAKICAgIF87Cn0KCgoKCgoKZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKfQoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBNaW50RmluaXNoZWQoKTsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJFbGVjdHJvbiBXb3JsZCBNb25leSI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJFV00iOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIAogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CiAgICAKICAgIAogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIE1pbnRhYmxlVG9rZW4oKSB7CiAgICAgICAgbWludChtc2cuc2VuZGVyLCAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgICBmaW5pc2hNaW50aW5nKCk7ICAgCiAgICB9CiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoMCwgX3RvLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICAgICAgTWludEZpbmlzaGVkKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgICAKfQoKY29udHJhY3QgU3dhcFRva2VuIGlzIE1pbnRhYmxlVG9rZW4gewogICAgTWludGFibGVUb2tlbiBCYXNpY1Rva2VuOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIG1pZ3JhdGVkOwogICAgCiAgICBmdW5jdGlvbiBTd2FwVG9rZW4gKE1pbnRhYmxlVG9rZW4gX2Jhc2ljVG9rZW4pIHsKICAgICAgICBCYXNpY1Rva2VuID0gX2Jhc2ljVG9rZW47CiAgICAgICAgdG90YWxTdXBwbHkgPSAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBtaWdyYXRpb24gKGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKCFtaWdyYXRlZFtfb3duZXJdKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW19vd25lcl0gPSBiYWxhbmNlc1tfb3duZXJdLmFkZChCYXNpY1Rva2VuLmJhbGFuY2VPZihfb3duZXIpKTsKICAgICAgICAgICAgbWlncmF0ZWRbX293bmVyXSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBtaWdyYXRpb24gKG1zZy5zZW5kZXIpOwogICAgICAgIHJlcXVpcmUgKCBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUgKCBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VzW190b10pOwogICAgICAgIAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHsKICAgICAgICBtaWdyYXRpb24gKG1zZy5zZW5kZXIpOwogICAgICAgIHJlcXVpcmUgKCBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICAKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgbWlncmF0aW9uKF9vd25lcik7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgICAgIAogICAgICAgIG1pZ3JhdGlvbiAobXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgewogICAgICAgIAogICAgICAgIG1pZ3JhdGlvbiAobXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgcmVxdWlyZSAoICEoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpKTsKICAgICAgICAKICAgICAgICAKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KCgp9Cgpjb250cmFjdCBDcm93ZHNhbGUgaXMgT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgCiAgICBNaW50YWJsZVRva2VuIHB1YmxpYyB0b2tlbjsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyBkZWFkbGluZTsKICAgIAogICAgCiAgICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CiAgICAKICAgIAogICAgdWludDI1NiBwdWJsaWMgcmF0ZTsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CiAgICAKICAgIAogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZDsKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwogICAgCiAgICAKICAgIGZ1bmN0aW9uIENyb3dkc2FsZShNaW50YWJsZVRva2VuIHRva2VuQ29udHJhY3QsIHVpbnQyNTYgZHVyYXRpb25JbldlZWtzLCB1aW50MjU2IF9yYXRlLCBhZGRyZXNzIF93YWxsZXQpIHsKICAgICAgICAKICAgICAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICAgICAgcmVxdWlyZShfd2FsbGV0ICE9IDB4MCk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgdG9rZW4gPSB0b2tlbkNvbnRyYWN0OwogICAgICAgIAogICAgICAgIGRlYWRsaW5lID0gbm93ICsgZHVyYXRpb25JbldlZWtzICogMSB3ZWVrczsKICAgICAgICByYXRlID0gX3JhdGU7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXROZXdUb2tlbk93bmVyKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpOwogICAgfQogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIGludGVybmFsIHJldHVybnMgKE1pbnRhYmxlVG9rZW4pIHsKICAgICAgICByZXR1cm4gbmV3IE1pbnRhYmxlVG9rZW4oKTsKICAgIH0KICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IHVwZGF0ZWR3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwogICAgICAgIAogICAgICAgIAogICAgICAgIHJlcXVpcmUgKCB0b2tlbnMgPD0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpICk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgd2VpUmFpc2VkID0gdXBkYXRlZHdlaVJhaXNlZDsKICAgICAgICAKICAgICAgICAKICAgICAgICB0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgICAgICAKICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQodG9rZW5zKTsKICAgICAgICAKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CiAgICAgICAgCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CiAgICAKICAgIAogICAgCiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IGN1cnJlbnQgPSBibG9jay5udW1iZXI7CiAgICAgICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPD0gZGVhZGxpbmU7CiAgICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgICAgICAKICAgICAgICByZXR1cm4gd2l0aGluUGVyaW9kICYmIG5vblplcm9QdXJjaGFzZTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuICggbm93ID4gZGVhZGxpbmUpOwogICAgICAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b2tlblJlc2VuZCgpIG9ubHlPd25lciB7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgdG9rZW4udHJhbnNmZXIob3duZXIsIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgICB9CiAgICAKfQ=='.
	

]
