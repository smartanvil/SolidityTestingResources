Class {
	#name : #SRT82c7a0c5e9c8c435df21e00eecea76106054fbf8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82c7a0c5e9c8c435df21e00eecea76106054fbf8 >> base64 [
	^ ''.
	

]
