Class {
	#name : #SRTe979c1dbcf46b9935e2a46e76a4b64765edd1a9d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe979c1dbcf46b9935e2a46e76a4b64765edd1a9d >> base64 [
	^ ''.
	

]
