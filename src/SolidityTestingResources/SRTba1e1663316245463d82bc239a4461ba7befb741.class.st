Class {
	#name : #SRTba1e1663316245463d82bc239a4461ba7befb741,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTba1e1663316245463d82bc239a4461ba7befb741 >> base64 [
	^ ''.
	

]
