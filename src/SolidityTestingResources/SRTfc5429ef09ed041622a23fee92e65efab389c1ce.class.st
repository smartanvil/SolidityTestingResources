Class {
	#name : #SRTfc5429ef09ed041622a23fee92e65efab389c1ce,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc5429ef09ed041622a23fee92e65efab389c1ce >> base64 [
	^ ''.
	

]
