Class {
	#name : #SRTf36b0F457999CbBB436EeB28DBb5944bfC3f99DE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf36b0F457999CbBB436EeB28DBb5944bfC3f99DE >> base64 [
	^ 'Y29udHJhY3QgdGlja2luZ0JvbWIgewoKICAgIHN0cnVjdCB0ZWFtIHsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50IGxhc3RVcGRhdGU7CiAgICAgICAgYWRkcmVzc1tdIG1lbWJlcnM7CiAgICAgICAgdWludCBuYnJNZW1iZXJzOwogICAgfQoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiAyNDsgLy8gMjQgSG91cnMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IElOVkVTVF9BTU9VTlQgPSAxMDAwIGZpbm5leTsgLy8gMSBFVEgKICAgIHVpbnQgY29uc3RhbnQgRkVFID0gMzsKCiAgICB0ZWFtIHB1YmxpYyByZWQ7CiAgICB0ZWFtIHB1YmxpYyBibHVlOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7CiAgICBhZGRyZXNzIGNyZWF0b3I7CgogICAgc3RyaW5nW10gcHVibGljIGhpc3RvcnlXaW5uZXI7CiAgICB1aW50W10gcHVibGljIGhpc3RvcnlSZWQ7CiAgICB1aW50W10gcHVibGljIGhpc3RvcnlCbHVlOwogICAgdWludCBwdWJsaWMgZ2FtZU5icjsKCiAgICBmdW5jdGlvbiB0aWNraW5nQm9tYigpIHsKICAgICAgICBuZXdSb3VuZCgpOwogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGdhbWVOYnIgPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGhlbHBSZWQoKSB7CiAgICAgICAgdWludCBpOwogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBDaGVjayBpZiBFeHBsb2RlZCwgaWYgc28gc2F2ZSB0aGUgcHJldmlvdXMgZ2FtZQogICAgICAgIC8vIEFuZCBjcmVhdGUgYSBuZXcgcm91bmQKICAgICAgICBjaGVja0lmRXhwbG9kZWQoKTsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSBUaW1lU3RhbXAKICAgICAgICByZWQubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsKCiAgICAgICAgLy8gU3BsaXQgdGhlIGluY29taW5nIG1vbmV5IGV2ZXJ5IElOVkVTVF9BTU9VTlQKICAgICAgICB3aGlsZSAoYW1vdW50ID49IElOVkVTVF9BTU9VTlQpIHsKICAgICAgICAgICAgcmVkLm1lbWJlcnMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgcmVkLm5ick1lbWJlcnMrKzsKICAgICAgICAgICAgYW1vdW50IC09IElOVkVTVF9BTU9VTlQ7CiAgICAgICAgfQoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBzdGlsbCBzb21lIG1vbmV5IGluIHRoZSBiYWxhbmNlLCBzZW50IGl0IGJhY2sKICAgICAgICBpZiAoYW1vdW50ID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYW1vdW50KTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaGVscEJsdWUoKSB7CiAgICAgICAgdWludCBpOwogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBDaGVjayBpZiBFeHBsb2RlZCwgaWYgc28gc2F2ZSB0aGUgcHJldmlvdXMgZ2FtZQogICAgICAgIC8vIEFuZCBjcmVhdGUgYSBuZXcgZ2FtZQogICAgICAgIGNoZWNrSWZFeHBsb2RlZCgpOwoKICAgICAgICAvLyBVcGRhdGUgdGhlIFRpbWVTdGFtcAogICAgICAgIGJsdWUubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsKCiAgICAgICAgLy8gU3BsaXQgdGhlIGluY29taW5nIG1vbmV5IGV2ZXJ5IDEwMCBmaW5uZXlzCiAgICAgICAgd2hpbGUgKGFtb3VudCA+PSBJTlZFU1RfQU1PVU5UKSB7CiAgICAgICAgICAgIGJsdWUubWVtYmVycy5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgICBibHVlLm5ick1lbWJlcnMrKzsKICAgICAgICAgICAgYW1vdW50IC09IElOVkVTVF9BTU9VTlQ7CiAgICAgICAgfQoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBzdGlsbCBzb21lIG1vbmV5IGluIHRoZSBiYWxhbmNlLCBzZW50IGl0IGJhY2sKICAgICAgICBpZiAoYW1vdW50ID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYW1vdW50KTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tJZkV4cGxvZGVkKCkgewogICAgICAgIGlmIChjaGVja1RpbWUoKSkgewogICAgICAgICAgICBuZXdSb3VuZCgpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja1RpbWUoKSBwcml2YXRlIHJldHVybnMoYm9vbCBleHBsb2RlZCkgewogICAgICAgIHVpbnQgaTsKICAgICAgICB1aW50IGxvc3RBbW91bnQgPSAwOwogICAgICAgIHVpbnQgZ2FpblBlck1lbWJlciA9IDA7CiAgICAgICAgdWludCBmZWVDb2xsZWN0ZWQgPSAwOwoKICAgICAgICAvLyBJZiBSZWQgYW5kIEJsdWUgaGF2ZSBleHBsb2RlZCBhdCB0aGUgc2FtZSB0aW1lLCByZXR1cm4gdGhlIGFtb3VudGVkIGludmVzdGVkCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlID09IGJsdWUubGFzdFVwZGF0ZSAmJiByZWQubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWQubWVtYmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgYmFsYW5jZXNbcmVkLm1lbWJlcnNbaV1dICs9IElOVkVTVF9BTU9VTlQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsdWUubWVtYmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgYmFsYW5jZXNbYmx1ZS5tZW1iZXJzW2ldXSArPSBJTlZFU1RfQU1PVU5UOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ1RpZSBiZXR3ZWVuIFJlZCBhbmQgQmx1ZScpOwogICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOwogICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7CiAgICAgICAgICAgIGdhbWVOYnIrKzsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBUYWtlIHRoZSBvbGRlciB0aW1lc3RhbXAKICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPCBibHVlLmxhc3RVcGRhdGUpIHsKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIFJlZCBib21iIGV4cGxvZGVkCiAgICAgICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGxvc3QgYW1vdW50IGJ5IHRoZSByZWQgdGVhbQogICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIFJlZCBtZW1iZXIgKiBJbnZlc3RlZCBhbW91bnQgcGVyIHVzZXIgICoKICAgICAgICAgICAgICAgIGZlZUNvbGxlY3RlZCArPSAocmVkLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UICogRkVFIC8gMTAwKTsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW2NyZWF0b3JdICs9IGZlZUNvbGxlY3RlZDsKICAgICAgICAgICAgICAgIGxvc3RBbW91bnQgPSAocmVkLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UKSAtIGZlZUNvbGxlY3RlZDsKCiAgICAgICAgICAgICAgICBnYWluUGVyTWVtYmVyID0gbG9zdEFtb3VudCAvIGJsdWUubmJyTWVtYmVyczsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBibHVlLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tibHVlLm1lbWJlcnNbaV1dICs9IChJTlZFU1RfQU1PVU5UICsgZ2FpblBlck1lbWJlcik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdSZWQnKTsKICAgICAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7CiAgICAgICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7CiAgICAgICAgICAgICAgICBnYW1lTmJyKys7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIEJsdWUgYm9tYiBleHBsb2RlZAogICAgICAgICAgICBpZiAoYmx1ZS5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbG9zdCBhbW91bnQgYnkgdGhlIHJlZCB0ZWFtCiAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2YgUmVkIG1lbWJlciAqIEludmVzdGVkIGFtb3VudCBwZXIgdXNlciAgKgogICAgICAgICAgICAgICAgZmVlQ29sbGVjdGVkICs9IChibHVlLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UICogRkVFIC8gMTAwKTsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW2NyZWF0b3JdICs9IGZlZUNvbGxlY3RlZDsKICAgICAgICAgICAgICAgIGxvc3RBbW91bnQgPSAoYmx1ZS5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCkgLSBmZWVDb2xsZWN0ZWQ7CiAgICAgICAgICAgICAgICBnYWluUGVyTWVtYmVyID0gbG9zdEFtb3VudCAvIHJlZC5uYnJNZW1iZXJzOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlZC5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbcmVkLm1lbWJlcnNbaV1dICs9IChJTlZFU1RfQU1PVU5UICsgZ2FpblBlck1lbWJlcik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdCbHVlJyk7CiAgICAgICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOwogICAgICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOwogICAgICAgICAgICAgICAgZ2FtZU5icisrOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBuZXdSb3VuZCgpIHByaXZhdGUgewogICAgICAgIHJlZC5uYW1lID0gIlJlZCB0ZWFtIjsKICAgICAgICBibHVlLm5hbWUgPSAiQmx1ZSB0ZWFtIjsKICAgICAgICByZWQubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICBibHVlLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgcmVkLm5ick1lbWJlcnMgPSAwOwogICAgICAgIGJsdWUubmJyTWVtYmVycyA9IDA7CiAgICAgICAgcmVkLm1lbWJlcnMgPSBuZXcgYWRkcmVzc1tdKDApOwogICAgICAgIGJsdWUubWVtYmVycyA9IG5ldyBhZGRyZXNzW10oMCk7CiAgICB9CgogICAgZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gSGVscCB0aGUgb2xkZXN0IHRpbWVzdGFtcCAoZ29pbmcgdG8gZXhwbG9kZSBmaXJzdCkKICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPCBibHVlLmxhc3RVcGRhdGUpIHsKICAgICAgICAgICAgaGVscFJlZCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGhlbHBCbHVlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbGxlY3RCYWxhbmNlKCkgewogICAgICAgIG1zZy5zZW5kZXIuc2VuZChiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgfQoKICAgIC8vIEFsbG93IHRoZSBjcmVhdG9yIHRvIHNlbmQgdGhlaXIgYmFsYW5jZXMgdG8gdGhlIHBsYXllcnMKICAgIGZ1bmN0aW9uIHNlbmRCYWxhbmNlKGFkZHJlc3MgcGxheWVyKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgewogICAgICAgICAgICBwbGF5ZXIuc2VuZChiYWxhbmNlc1twbGF5ZXJdKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbmV3T3duZXIoYWRkcmVzcyBuZXdPd25lcikgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNyZWF0b3IpIHsKICAgICAgICAgICAgY3JlYXRvciA9IG5ld093bmVyOwogICAgICAgIH0KICAgIH0KCn0='.
	

]
