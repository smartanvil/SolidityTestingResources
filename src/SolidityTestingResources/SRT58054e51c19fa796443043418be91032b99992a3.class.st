Class {
	#name : #SRT58054e51c19fa796443043418be91032b99992a3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT58054e51c19fa796443043418be91032b99992a3 >> base64 [
	^ ''.
	

]
