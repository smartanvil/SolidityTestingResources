Class {
	#name : #SRT70A8629c1B9A50133C5325502232Bd54447BEeE7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT70A8629c1B9A50133C5325502232Bd54447BEeE7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKY29udHJhY3QgU29hcmNvaW4gewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7ICAgICAgICAgICAgICAgLy8gZWFjaCBhZGRyZXNzIGluIHRoaXMgY29udHJhY3QgbWF5IGhhdmUgdG9rZW5zLiAKICAgIGFkZHJlc3MgaW50ZXJuYWwgb3duZXIgPSAweDRCY2U4RTk4NTAyNTRBODZhMTk4OEUyZEE3OWU0MUJjNjc5MzY0MGQ7ICAgICAgICAgICAgICAgIC8vIHRoZSBvd25lciBpcyB0aGUgY3JlYXRvciBvZiB0aGUgc21hcnQgY29udHJhY3QKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJTb2FyY29pbiI7ICAgICAgICAgICAgICAgICAgICAgLy8gbmFtZSBvZiB0aGlzIGNvbnRyYWN0IGFuZCBpbnZlc3RtZW50IGZ1bmQKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlNPQVIiOyAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9rZW4gc3ltYm9sCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSA2OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlY2ltYWxzIChmb3IgaHVtYW5zKQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSA1MDAwMDAwMDAwMDAwMDAwOyAgCiAgICAgICAgICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIoKQogICAgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIFNvYXJjb2luKCkgeyBiYWxhbmNlc1tvd25lcl0gPSB0b3RhbFN1cHBseTsgfSAgICAKCiAgICAvLyBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8vIHF1ZXJ5IGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKQogICAgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8vIHRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIGlmKF92YWx1ZSA8PSAwKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHNlbmQgdG9rZW4gdmFsdWUgPiAwOwogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXSkgdGhyb3c7ICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50LCBpZiBpdCdzIHRoZSBjb250YWN0IGl0c2VsZiB0aGVuIGl0IHNpZ25hbHMgYSBzZWxsIG9yZGVyIG9mIHRob3NlIHRva2VucyAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICByZXR1cm4gdHJ1ZTsgICAgICAKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyCiAgICB7CiAgICAgICAgaWYoX3ZhbHVlIDw9IDApIHRocm93OwogICAgCWJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgCXRvdGFsU3VwcGx5ICs9IF92YWx1ZTsKICAgIH0KfQoKLyoqCiAqIEVSQyAyMCB0b2tlbgogKgogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IFRva2VuIGlzIFNvYXJjb2luIHsKCiAgICAvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICAKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHt9CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfYWRkcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB3ZWkgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykge30KCiAgICAKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKfQoKLyoqCiAqIEVSQyAyMCB0b2tlbgogKgogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICov'.
	

]
