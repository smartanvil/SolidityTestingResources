Class {
	#name : #SRTb1aa9d49c5a824745f219411c80f873c81f79e86,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1aa9d49c5a824745f219411c80f873c81f79e86 >> base64 [
	^ ''.
	

]
