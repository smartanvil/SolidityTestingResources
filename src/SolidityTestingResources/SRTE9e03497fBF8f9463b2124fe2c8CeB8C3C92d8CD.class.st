Class {
	#name : #SRTE9e03497fBF8f9463b2124fe2c8CeB8C3C92d8CD,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE9e03497fBF8f9463b2124fe2c8CeB8C3C92d8CD >> base64 [
	^ ''.
	

]
