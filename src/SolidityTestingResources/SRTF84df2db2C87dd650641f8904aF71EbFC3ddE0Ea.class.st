Class {
	#name : #SRTF84df2db2C87dd650641f8904aF71EbFC3ddE0Ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF84df2db2C87dd650641f8904aF71EbFC3ddE0Ea >> base64 [
	^ ''.
	

]
