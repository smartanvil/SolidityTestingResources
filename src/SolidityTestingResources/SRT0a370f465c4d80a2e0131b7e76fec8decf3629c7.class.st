Class {
	#name : #SRT0a370f465c4d80a2e0131b7e76fec8decf3629c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a370f465c4d80a2e0131b7e76fec8decf3629c7 >> base64 [
	^ ''.
	

]
