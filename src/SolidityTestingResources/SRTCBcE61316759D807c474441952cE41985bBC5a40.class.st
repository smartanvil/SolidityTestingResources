Class {
	#name : #SRTCBcE61316759D807c474441952cE41985bBC5a40,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTCBcE61316759D807c474441952cE41985bBC5a40 >> base64 [
	^ ''.
	

]
