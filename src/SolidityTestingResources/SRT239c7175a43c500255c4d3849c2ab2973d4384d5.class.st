Class {
	#name : #SRT239c7175a43c500255c4d3849c2ab2973d4384d5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT239c7175a43c500255c4d3849c2ab2973d4384d5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKKiBhc3NlcnQoMiArIDIgaXMgNCAtIDEgdGhhdHMgMykgUXVpY2sgTWFmcyAKKi8KbGlicmFyeSBRdWlja01hZnMgewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgX2EsIHVpbnQyNTYgX2IpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IF9hICogX2I7CiAgICAgICAgYXNzZXJ0KF9hID09IDAgfHwgYyAvIF9hID09IF9iKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBfYSwgdWludDI1NiBfYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KF9iID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IF9hIC8gX2I7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgX2EsIHVpbnQyNTYgX2IpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChfYiA8PSBfYSk7CiAgICAgICAgcmV0dXJuIF9hIC0gX2I7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgX2EsIHVpbnQyNTYgX2IpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IF9hICsgX2I7CiAgICAgICAgYXNzZXJ0KGMgPj0gX2EpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgoKLyoqIAoqIFRoZSBvd25hYmxlIGNvbnRyYWN0IGNvbnRhaW5zIGFuIG93bmVyIGFkZHJlc3MuIFRoaXMgZ2l2ZSB1cyBzaW1wbGUgb3duZXJzaGlwIHByaXZsZWRnZXMgYW5kIGNhbiBhbGxvdyBvd25zaGlwIHRyYW5zZmVyLiAKKi8KY29udHJhY3QgT3duYWJsZSB7CgogICAgIC8qKiAKICAgICAqIFRoZSBvd25lci9hZG1pbiBvZiB0aGUgY29udHJhY3QKICAgICAqLyAKICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIAogICAgIC8qKgogICAgICogQ29uc3RydWN0b3IgZm9yIGNvbnRyYWN0LiBTZXRzIFRoZSBjb250cmFjdCBjcmVhdG9yIHRvIHRoZSBkZWZhdWx0IG93bmVyLgogICAgICovCiAgICAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICB9CiAgICAKICAgIC8qKgogICAgKiBNb2RpZmllciB0byBhcHBseSB0byBtZXRob2RzIHRvIHJlc3RyaWN0IGFjY2VzcyB0byB0aGUgb3duZXIKICAgICovCiAgICAgbW9kaWZpZXIgb25seU93bmVyKCl7CiAgICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgIF87IC8vUGxhY2Vob2xkZXIgZm9yIG1ldGhvZCBjb250ZW50CiAgICAgfQogICAgCiAgICAvKioKICAgICogVHJhbnNmZXIgdGhlIG93bmVyc2hpcCB0byBhIG5ldyBvd25lciBjYW4gb25seSBiZSBkb25lIGJ5IHRoZSBjdXJyZW50IG93bmVyLiAKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAKICAgICAgICAvL09ubHkgbWFrZSB0aGUgY2hhbmdlIGlmIHJlcXVpcmVkCiAgICAgICAgaWYgKF9uZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG93bmVyID0gX25ld093bmVyOwogICAgICAgIH0KICAgIH0KfQoKCi8qKgoqICBFUkMgVG9rZW4gU3RhbmRhcmQgIzIwIEludGVyZmFjZQoqLwpjb250cmFjdCBFUkMyMCB7CiAgICAKICAgIC8qKgogICAgKiBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KTsKICAgIAogICAgLyoqCiAgICAqIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIAogICAgLyoqCiAgICAqIFNlbmQgX2Ftb3VudCBvZiB0b2tlbnMgdG8gYWRkcmVzcyBfdG8KICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIAogICAgLyoqCiAgICAqIFNlbmQgX2Ftb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgCiAgICAvKioKICAgICogQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX2Ftb3VudC4KICAgICogSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfYW1vdW50LgogICAgKiB0aGlzIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGZvciBzb21lIERFWCBmdW5jdGlvbmFsaXR5CiAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgCiAgICAvKioKICAgICogUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICAKICAgIC8qKgogICAgKiBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgogICAgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsKICAgIAogICAgLyoqCiAgICAqIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgaXMgY2FsbGVkLgogICAgKi8KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KTsKfQoKCi8qKgoqIFRoZSBDVE4gVG9rZW4KKi8KY29udHJhY3QgVG9rZW4gaXMgRVJDMjAsIE93bmFibGUgewoKICAgIHVzaW5nIFF1aWNrTWFmcyBmb3IgdWludDI1NjsKICAgIAogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiQ1ROIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgTkFNRSA9ICJDcnlwdG8gVHJ1c3QgTmV0d29yayI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgREVDSU1BTFMgPSAxODsKICAgIAogICAgLyoqCiAgICAqIFRvdGFsIHN1cHBseSBvZiB0b2tlbnMKICAgICovCiAgICB1aW50MjU2IHRvdGFsVG9rZW5zOwogICAgCiAgICAvKioKICAgICogVGhlIGluaXRpYWwgc3VwcGx5IG9mIGNvaW5zIGJlZm9yZSBtaW50aW5nCiAgICAgKi8KICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseTsKICAgIAogICAgLyoqCiAgICAqIEJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQKICAgICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICAKICAgIC8qKgogICAgKiBXaG9zIGFsbG93ZWQgdG8gd2l0aGRyYXdsIGZ1bmRzIGZyb20gd2hpY2ggYWNjb3VudHMKICAgICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIAogICAgLyoqCiAgICAgKiBJZiB0aGUgdG9rZW4gaXMgdHJhZGFibGUKICAgICAqLyAKICAgICBib29sIHRyYWRhYmxlOwogICAgIAogICAgLyoqCiAgICAqIFRoZSBhZGRyZXNzIHRvIHN0b3JlIHRoZSBpbml0aWFsU3VwcGx5CiAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgdmF1bHQ7CiAgICAKICAgIC8qKgogICAgKiBJZiB0aGUgY29pbiBjYW4gYmUgbWludGVkCiAgICAqLwogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CiAgICAKICAgIC8qKgogICAgICogRXZlbnQgZm9yIHdoZW4gbmV3IGNvaW5zIGFyZSBjcmVhdGVkIAogICAgICovCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIAogICAgLyoqCiAgICAqIEV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiB0b2tlbiBzYWxlIGlzIG92ZXIKICAgICovCiAgICBldmVudCBNaW50RmluaXNoZWQoKTsKICAgIAogICAgLyoqCiAgICAgKiBUb2tlbnMgY2FuIG5vdyBiZSB0cmFkZWQKICAgICAqLyAKICAgIGV2ZW50IFRyYWRhYmxlVG9rZW5zKCk7IAogICAgCiAgICAvKioKICAgICAqIEFsbG93cyB0aGlzIGNvaW4gdG8gYmUgdHJhZGVkIGJldHdlZW4gdXNlcnMKICAgICAqLyAKICAgIG1vZGlmaWVyIGlzVHJhZGFibGUoKXsKICAgICAgICByZXF1aXJlKHRyYWRhYmxlKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKioKICAgICAqIElmIHRoaXMgY29pbiBjYW4gYmUgbWludGVkIG1vZGlmaWVyCiAgICAgKi8KICAgIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICAgICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKioKICAgICogSW5pdGlhbGl6aW5nIHRoZSB0b2tlbiwgc2V0dGluZyB0aGUgb3duZXIsIGluaXRpYWwgc3VwcGx5ICYgdmF1bHQKICAgICovCiAgICBmdW5jdGlvbiBUb2tlbigpIHB1YmxpYyB7CiAgICAgICAgaW5pdGlhbFN1cHBseSA9IDQ1MDAwMDAgKiAxIGV0aGVyOwogICAgICAgIHRvdGFsVG9rZW5zID0gaW5pdGlhbFN1cHBseTsKICAgICAgICB0cmFkYWJsZSA9IGZhbHNlOwogICAgICAgIHZhdWx0ID0gMHg2ZTc5NEFBQTJkYjUxZkMyNDZiMTk3OUZCOUE5ODQ5ZjUzOTE5RDFFOyAKICAgICAgICBiYWxhbmNlc1t2YXVsdF0gPSBiYWxhbmNlc1t2YXVsdF0uYWRkKGluaXRpYWxTdXBwbHkpOyAvL1NldCBpbml0aWFsIHN1cHBseSB0byB0aGUgdmF1bHQKICAgIH0KICAgIAogICAgLyoqCiAgICAqIE9idGFpbiBjdXJyZW50IHRvdGFsIHN1cHBseSBvZiBDVE4gdG9rZW5zIAogICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxBbW91bnQpIHsKICAgICAgICAgIHRvdGFsQW1vdW50ID0gdG90YWxUb2tlbnM7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBHZXQgdGhlIGluaXRpYWwgc3VwcGx5IG9mIENUTiBjb2lucyAKICAgICovCiAgICBmdW5jdGlvbiBiYXNlU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgaW5pdGlhbEFtb3VudCkgewogICAgICAgICAgaW5pdGlhbEFtb3VudCA9IGluaXRpYWxTdXBwbHk7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBSZXR1cm5zIHRoZSBiYWxhbmNlIG9mIGEgd2FsbGV0CiAgICAqLyAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19hZGRyZXNzXTsKICAgIH0KICAgIAogICAgLyoqCiAgICAqIFRyYW5zZmVyIENUTiBiZXR3ZWVuIHdhbGxldHMKICAgICovIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGlzVHJhZGFibGUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBTZW5kIF9hbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgKiBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAogICAgKiB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQogICAgKiBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzCiAgICAqIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCiAgICAqIHRoZXNlIHN0YW5kYXJkaXplZCBBUElzIGZvciBhcHByb3ZhbDoKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCiAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICkgcHVibGljIGlzVHJhZGFibGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgIHsKICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgCiAgICAgICAgLyoqIAogICAgICAgICogICBRdWlja01hZiB3aWxsIHJvbGwgYmFjayBhbnkgY2hhbmdlcyBzbyBubyBuZWVkIHRvIGNoZWNrIGJlZm9yZSB0aGVzZSBvcGVyYXRpb25zCiAgICAgICAgKi8KICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOyAgCiAgICB9CgogICAgLyoqCiAgICAqIEFsbG93cyBhbiBhZGRyZXNzIHRvIHRyYW5zZmVyIG1vbmV5IG91dCB0aGlzIGlzIGFkbWluaXN0ZXJlZCBieSB0aGUgY29udHJhY3Qgb3duZXIgd2hvIGNhbiBzcGVjaWZ5IGhvdyBtYW55IGNvaW5zIGFuIGFjY291bnQgY2FuIHRha2UuCiAgICAqIE5lZWRzIHRvIGJlIGNhbGxlZCB0byBmZWF1bHQgdGhlIGFtb3VudCB0byAwIGZpcnN0IC0+IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgKlNldCB0aGUgYW1vdW50IHRoZXkgYXJlIGFibGUgdG8gc3BlbmQgdG8gMCBmaXJzdCBzbyB0aGF0IHRyYW5zYWN0aW9uIG9yZGVyaW5nIGNhbm5vdCBhbGxvdyBtdWx0aXBsZSB3aXRoZHJhd2xzIGFzeW5jbHkKICAgICAgICAqVGhpcyBmdW5jdGlvbiBhbHdheXMgcmVxdWlyZXMgdG8gY2FsbHMgaWYgYSB1c2VyIGhhcyBhbiBhbW91bnQgdGhleSBjYW4gd2l0aGRyYXdsLgogICAgICAgICovCiAgICAgICAgcmVxdWlyZSgoX2Ftb3VudCA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwogICAgCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBDaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGUgb3duZXIgaGFzIGFsbG93ZWQgdG8gYSBzcGVuZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgICogTWFrZXMgdGhlIGNvaW4gdHJhZGFibGUgYmV0d2VlbiB1c2VycyBjYW5ub3QgYmUgdW5kb25lCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1ha2VUcmFkYWJsZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHRyYWRhYmxlID0gdHJ1ZTsKICAgICAgICBUcmFkYWJsZVRva2VucygpOwogICAgfQogICAgCiAgICAvKioKICAgICogTWludCB0b2tlbnMgdG8gdXNlcnMKICAgICovCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgY2FuTWludCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdG90YWxUb2tlbnMgPSB0b3RhbFRva2Vucy5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIHRva2VucyBpcnJldmVyc2FibGUKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKCi8qKgoqIFRoZSBpbml0aWFsIGNyb3dkc2FsZSBvZiB0aGUgdG9rZW4KKi8KY29udHJhY3QgU2FsZSBpcyBPd25hYmxlIHsKCgogICAgdXNpbmcgUXVpY2tNYWZzIGZvciB1aW50MjU2OwogICAgCiAgICAvKioKICAgICAqIFRoZSBoYXJkIGNhcCBvZiB0aGUgdG9rZW4gc2FsZQogICAgICovCiAgICB1aW50MjU2IGhhcmRDYXA7CiAgICAKICAgIC8qKgogICAgICogVGhlIHNvZnQgY2FwIG9mIHRoZSB0b2tlbiBzYWxlCiAgICAgKi8KICAgIHVpbnQyNTYgc29mdENhcDsKICAgIAogICAgLyoqCiAgICAgKiBUaGUgYm9udXMgY2FwIGZvciB0aGUgdG9rZW4gc2FsZQogICAgICovCiAgICB1aW50MjU2IGJvbnVzQ2FwOwogICAgCiAgICAvKioKICAgICAqIEhvdyBtYW55IHRva2VucyB5b3UgZ2V0IHBlciBFVEgKICAgICAqLwogICAgdWludDI1NiB0b2tlbnNQZXJFVEg7CiAgICAKICAgIC8qKiAKICAgICogLy90aGUgc3RhcnQgdGltZSBvZiB0aGUgc2FsZSAobmV3IERhdGUoIkRlYyAyMiAyMDE3IDE4OjAwOjAwIEdNVCIpLmdldFRpbWUoKSAvIDEwMDApCiAgICAqLwogICAgdWludDI1NiBwdWJsaWMgc3RhcnQgPSAxNTEzOTY1NjAwOwogICAgICAgICAgICAgICAgCiAgICAKICAgIC8qKgogICAgICogVGhlIGVuZCB0aW1lIG9mIHRoZSBzYWxlIChuZXcgRGF0ZSgiSmFuIDIyIDIwMTggMTg6MDA6MDAgR01UIikuZ2V0VGltZSgpIC8gMTAwMCkKICAgICAqLyAKICAgIHVpbnQyNTYgcHVibGljIGVuZCA9IDE1MTY2NDQwMDA7CiAgICAKICAgIC8qKgogICAgICogVHdvIG1vbnRocyBhZnRlciB0aGUgc2FsZSBlbmRzIHVzZWQgdG8gcmV0cmlldmUgdW5jbGFpbWVkIHJlZnVuZHMgKG5ldyBEYXRlKCJNYXIgMjIgMjAxOCAxODowMDowMCBHTVQiKS5nZXRUaW1lKCkgLyAxMDAwKQogICAgICovCiAgICB1aW50MjU2IHB1YmxpYyB0d29Nb250aHNMYXRlciA9IDE1MjE3NDE2MDA7CiAgICAKICAgIC8qKgogICAgKiBUb2tlbiBmb3IgbWludGluZyBwdXJwb3NlcwogICAgKi8KICAgIFRva2VuIHB1YmxpYyB0b2tlbjsKICAgIAogICAgLyoqCiAgICAqIFRoZSBhZGRyZXNzIHRvIHN0b3JlIGV0aCBpbiBkdXJpbmcgc2FsZSAKICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyB2YXVsdDsKICAgIAogICAgCiAgICAvKioKICAgICogSG93IG11Y2ggRVRIIGVhY2ggdXNlciBoYXMgc2VudCB0byB0aGlzIGNvbnRyYWN0LiBGb3Igc29mdGNhcCB1bm1ldCByZWZ1bmRzCiAgICAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGludmVzdG1lbnRzOwogICAgCiAgICAKICAgIC8qKgogICAgKiBFdmVyeSBwdXJjaGFzZSBkdXJpbmcgdGhlIHNhbGUKICAgICovCiAgICBldmVudCBUb2tlblNvbGQoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQyNTYgZXRoZXJBbW91bnQsIHVpbnQyNTYgY3RuQW1vdW50LCBib29sIGJvbnVzKTsKICAgIAogICAgCiAgICAvKioKICAgICogVHJpZ2dlcmVkIHdoZW4gdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZC4KICAgICovCiAgICBldmVudCBQcmljZVVwZGF0ZWQodWludDI1NiBhbW91bnQpOwogICAgCiAgICAvKioKICAgICogT25seSBtYWtlIGNlcnRhaW4gY2hhbmdlcyBiZWZvcmUgdGhlIHNhbGUgc3RhcnRzCiAgICAqLwogICAgbW9kaWZpZXIgaXNQcmVTYWxlKCl7CiAgICAgICAgIHJlcXVpcmUobm93IDwgc3RhcnQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBJcyB0aGUgc2FsZSBzdGlsbCBvbgogICAgKi8KICAgIG1vZGlmaWVyIGlzU2FsZU9uKCkgewogICAgICAgIHJlcXVpcmUobm93ID49IHN0YXJ0ICYmIG5vdyA8PSBlbmQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBIYXMgdGhlIHNhbGUgY29tcGxldGVkCiAgICAqLwogICAgbW9kaWZpZXIgaXNTYWxlRmluaXNoZWQoKSB7CiAgICAgICAgCiAgICAgICAgYm9vbCBoaXRIYXJkQ2FwID0gdG9rZW4udG90YWxTdXBwbHkoKS5zdWIodG9rZW4uYmFzZVN1cHBseSgpKSA+PSBoYXJkQ2FwOwogICAgICAgIHJlcXVpcmUobm93ID4gZW5kIHx8IGhpdEhhcmRDYXApOwogICAgICAgIAogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBIYXMgdGhlIHNhbGUgY29tcGxldGVkCiAgICAqLwogICAgbW9kaWZpZXIgaXNUd29Nb250aHNMYXRlcigpIHsKICAgICAgICByZXF1aXJlKG5vdyA+IHR3b01vbnRoc0xhdGVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKioKICAgICogTWFrZSBzdXJlIHdlIGFyZSB1bmRlciB0aGUgaGFyZGNhcAogICAgKi8KICAgIG1vZGlmaWVyIGlzVW5kZXJIYXJkQ2FwKCkgewogICAgCiAgICAgICAgYm9vbCB1bmRlckhhcmQgPSB0b2tlbi50b3RhbFN1cHBseSgpLnN1Yih0b2tlbi5iYXNlU3VwcGx5KCkpIDw9IGhhcmRDYXA7CiAgICAgICAgcmVxdWlyZSh1bmRlckhhcmQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBNYWtlIHN1cmUgd2UgYXJlIG92ZXIgdGhlIHNvZnQgY2FwCiAgICAqLwogICAgbW9kaWZpZXIgaXNPdmVyU29mdENhcCgpIHsKICAgICAgICBib29sIG92ZXJTb2Z0ID0gdG9rZW4udG90YWxTdXBwbHkoKS5zdWIodG9rZW4uYmFzZVN1cHBseSgpKSA+PSBzb2Z0Q2FwOwogICAgICAgIHJlcXVpcmUob3ZlclNvZnQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBNYWtlIHN1cmUgd2UgYXJlIG92ZXIgdGhlIHNvZnQgY2FwCiAgICAqLwogICAgbW9kaWZpZXIgaXNVbmRlclNvZnRDYXAoKSB7CiAgICAgICAgYm9vbCB1bmRlclNvZnQgPSB0b2tlbi50b3RhbFN1cHBseSgpLnN1Yih0b2tlbi5iYXNlU3VwcGx5KCkpIDwgc29mdENhcDsKICAgICAgICByZXF1aXJlKHVuZGVyU29mdCk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLyoqIAogICAgKiAgIFRoZSB0b2tlbiBzYWxlIGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gU2FsZSgpIHB1YmxpYyB7CiAgICAgICAgaGFyZENhcCA9IDEwNTAwMDAwICogMSBldGhlcjsKICAgICAgICBzb2Z0Q2FwID0gNTAwMDAwICogMSBldGhlcjsKICAgICAgICBib251c0NhcCA9IDIwMDAwMDAgKiAxIGV0aGVyOwogICAgICAgIHRva2Vuc1BlckVUSCA9IDUzNjsgLy9Ub2tlbnMgcGVyIDEgRVRICiAgICAgICAgdG9rZW4gPSBuZXcgVG9rZW4oKTsKICAgICAgICB2YXVsdCA9IDB4NmU3OTRBQUEyZGI1MWZDMjQ2YjE5NzlGQjlBOTg0OWY1MzkxOUQxRTsgCiAgICB9CiAgICAKICAgIC8qKgogICAgKiBGYWxsYmFjayBmdW5jdGlvbiB3aGljaCByZWNlaXZlcyBldGhlciBhbmQgY3JlYXRlZCB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIHRva2VucyBmb3IgdGhlIAogICAgKiBtc2cuc2VuZGVyLgogICAgKi8KICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgY3JlYXRlVG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQogICAgCiAgICAgICAgCiAgICAvKioKICAgICogSWYgdGhlIHNvZnQgY2FwIGhhcyBub3QgYmVlbiByZWFjaGVkIGFuZCB0aGUgc2FsZSBpcyBvdmVyIGludmVzdG9ycyBjYW4gcmVjbGFpbSB0aGVpciBmdW5kcwogICAgKi8gCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBwdWJsaWMgaXNTYWxlRmluaXNoZWQgaXNVbmRlclNvZnRDYXAgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gaW52ZXN0bWVudHNbbXNnLnNlbmRlcl07CiAgICAgICAgaW52ZXN0bWVudHNbbXNnLnNlbmRlcl0gPSBpbnZlc3RtZW50c1ttc2cuc2VuZGVyXS5zdWIoYW1vdW50KTsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudCk7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBXaXRoZHJhd2wgdGhlIGZ1bmRzIGZyb20gdGhlIGNvbnRyYWN0LgogICAgKiBNYWtlIHRoZSB0b2tlbiB0cmFkZWFibGUgYW5kIGZpbmlzaCBtaW50aW5nCiAgICAqLyAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3bCgpIHB1YmxpYyBpc1NhbGVGaW5pc2hlZCBpc092ZXJTb2Z0Q2FwIHsKICAgICAgICB2YXVsdC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICAgIAogICAgICAgIC8vU3RvcCBtaW50aW5nIG9mIHRoZSB0b2tlbiBhbmQgbWFrZSB0aGUgdG9rZW4gdHJhZGVhYmxlCiAgICAgICAgdG9rZW4uZmluaXNoTWludGluZygpOwogICAgICAgIHRva2VuLm1ha2VUcmFkYWJsZSgpOwogICAgfQogICAgCiAgICAvKioKICAgICogVXBkYXRlIHRoZSBFVEggcHJpY2UgZm9yIHRoZSB0b2tlbiBzYWxlCiAgICAqLwogICAgZnVuY3Rpb24gdXBkYXRlUHJpY2UodWludDI1NiBfbmV3UHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgaXNQcmVTYWxlIHsKICAgICAgICB0b2tlbnNQZXJFVEggPSBfbmV3UHJpY2U7CiAgICAgICAgUHJpY2VVcGRhdGVkKF9uZXdQcmljZSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBBbGxvd3MgdXNlciB0byBidXkgY29pbnMgaWYgd2UgYXJlIHVuZGVyIHRoZSBoYXJkY2FwIGFsc28gYWRkcyBhIGJvbnVzIGlmIHVuZGVyIHRoZSBib251cyBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbnMoYWRkcmVzcyByZWNpcGllbnQpIHB1YmxpYyBpc1VuZGVySGFyZENhcCBpc1NhbGVPbiBwYXlhYmxlIHsKICAgIAogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gdG9rZW5zUGVyRVRILm11bChhbW91bnQpOwogICAgICAgIGJvb2wgYm9udXMgPSBmYWxzZTsKICAgICAgICAKICAgICAgICBpZiAodG9rZW4udG90YWxTdXBwbHkoKS5zdWIodG9rZW4uYmFzZVN1cHBseSgpKSA8IGJvbnVzQ2FwKSB7CiAgICAgICAgICAgIGJvbnVzID0gdHJ1ZTsKICAgICAgICAgICAgdG9rZW5zID0gdG9rZW5zLmFkZCh0b2tlbnMuZGl2KDUpKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9BZGQgdGhlIGFtb3VudCB0byB1c2VyIGludmV0bWVudCB0b3RhbAogICAgICAgIGludmVzdG1lbnRzW21zZy5zZW5kZXJdID0gaW52ZXN0bWVudHNbbXNnLnNlbmRlcl0uYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgCiAgICAgICAgdG9rZW4ubWludChyZWNpcGllbnQsIHRva2Vucyk7CiAgICAgICAgCiAgICAgICAgVG9rZW5Tb2xkKHJlY2lwaWVudCwgYW1vdW50LCB0b2tlbnMsIGJvbnVzKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBXaXRoZHJhd2wgdGhlIGZ1bmRzIGZyb20gdGhlIGNvbnRyYWN0LgogICAgICogTWFrZSB0aGUgdG9rZW4gdHJhZGVhYmxlIGFuZCBmaW5pc2ggbWludGluZwogICAgICovIAogICAgZnVuY3Rpb24gY2xlYW51cCgpIHB1YmxpYyBpc1R3b01vbnRoc0xhdGVyIHsKICAgICAgICB2YXVsdC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgICAgICB0b2tlbi5tYWtlVHJhZGFibGUoKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZGVzdHJveSgpIHB1YmxpYyBvbmx5T3duZXIgaXNUd29Nb250aHNMYXRlciB7CiAgICAgICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgICAgICAgdG9rZW4ubWFrZVRyYWRhYmxlKCk7CiAgICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICAgICAgICAgc2VsZmRlc3RydWN0KHZhdWx0KTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBHZXQgdGhlIEVUSCBiYWxhbmNlIG9mIHRoaXMgY29udHJhY3QKICAgICAqLyAKICAgIGZ1bmN0aW9uIGdldEJhbGFuY2UoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbEFtb3VudCkgewogICAgICAgICAgdG90YWxBbW91bnQgPSB0aGlzLmJhbGFuY2U7CiAgICB9Cn0='.
	

]
