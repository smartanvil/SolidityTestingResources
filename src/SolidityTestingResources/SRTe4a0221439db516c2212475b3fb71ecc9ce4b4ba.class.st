Class {
	#name : #SRTe4a0221439db516c2212475b3fb71ecc9ce4b4ba,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe4a0221439db516c2212475b3fb71ecc9ce4b4ba >> base64 [
	^ ''.
	

]
