Class {
	#name : #SRTa6b0412276b2484cfb370890b9d07e0c8f1f7684,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6b0412276b2484cfb370890b9d07e0c8f1f7684 >> base64 [
	^ ''.
	

]
