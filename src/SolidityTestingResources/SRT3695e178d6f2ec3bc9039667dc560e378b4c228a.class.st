Class {
	#name : #SRT3695e178d6f2ec3bc9039667dc560e378b4c228a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3695e178d6f2ec3bc9039667dc560e378b4c228a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuOTsKCgovKioqCiAqIFZJUCBUb2tlbiBhbmQgQ3Jvd2RmdW5kaW5nIGNvbnRyYWN0cy4KICovCgoKLyoqCiAqIEB0aXRsZSBFUkMyMAogKi8KY29udHJhY3QgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBMZWdlbmRzQ3Jvd2RmdW5kCiAqLwpjb250cmFjdCBMZWdlbmRzQ3Jvd2RmdW5kIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwogICAgYWRkcmVzcyBwdWJsaWMgZXhpdEFkZHJlc3M7CgogICAgdWludCBwdWJsaWMgc3RhcnQ7CiAgICB1aW50IHB1YmxpYyBsaW1pdFZJUDsKCiAgICBMZWdlbmRzVG9rZW4gcHVibGljIGxlZ2VuZHNUb2tlbjsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByZWNpcGllbnRFVEg7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByZWNpcGllbnRWSVA7CgogICAgdWludCBwdWJsaWMgdG90YWxFVEg7CiAgICB1aW50IHB1YmxpYyB0b3RhbFZJUDsKCiAgICBldmVudCBWSVBQdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCBhZGRyZXNzIGluZGV4ZWQgcmVjaXBpZW50LCB1aW50IEVUSCwgdWludCBWSVApOwoKICAgIG1vZGlmaWVyIHNhbGVBY3RpdmUoKSB7CiAgICAgICAgaWYgKGFkZHJlc3MobGVnZW5kc1Rva2VuKSA9PSAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZiAoYmxvY2sudGltZXN0YW1wIDwgc3RhcnQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzVmFsdWUoKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHJlY2lwaWVudElzVmFsaWQoYWRkcmVzcyByZWNpcGllbnQpIHsKICAgICAgICBpZiAocmVjaXBpZW50ID09IDAgfHwgcmVjaXBpZW50ID09IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNDcmVhdG9yKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNyZWF0b3IpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdG9rZW5Db250cmFjdE5vdFNldCgpIHsKICAgICAgICBpZiAoYWRkcmVzcyhsZWdlbmRzVG9rZW4pICE9IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENvbnN0cnVjdG9yLgogICAgICogQHBhcmFtIF9leGl0QWRkcmVzcyBBZGRyZXNzIHRoYXQgYWxsIEVUSCBzaG91bGQgYmUgZm9yd2FyZGVkIHRvLgogICAgICogQHBhcmFtIF9zdGFydCBUaW1lc3RhbXAgb2Ygd2hlbiB0aGUgY3Jvd2RzYWxlIHdpbGwgc3RhcnQuCiAgICAgKiBAcGFyYW0gX2xpbWl0VklQIE1heGltdW0gYW1vdW50IG9mIFZJUCB0aGF0IGNhbiBiZSBhbGxvY2F0ZWQgaW4gdG90YWwuIERlbm9taW5hdGVkIGluIHdlaS4KICAgICAqLwogICAgZnVuY3Rpb24gTGVnZW5kc0Nyb3dkZnVuZChhZGRyZXNzIF9leGl0QWRkcmVzcywgdWludCBfc3RhcnQsIHVpbnQgX2xpbWl0VklQKSB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgZXhpdEFkZHJlc3MgPSBfZXhpdEFkZHJlc3M7CiAgICAgICAgc3RhcnQgPSBfc3RhcnQ7CiAgICAgICAgbGltaXRWSVAgPSBfbGltaXRWSVA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFNldCB0aGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QuIE11c3QgYmUgY2FsbGVkIGJ5IGNyZWF0b3Igb2YgdGhpcy4gQ2FuIG9ubHkgYmUgc2V0IG9uY2UuCiAgICAgKiBAcGFyYW0gX2xlZ2VuZHNUb2tlbiBBZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdC4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0VG9rZW5Db250cmFjdChMZWdlbmRzVG9rZW4gX2xlZ2VuZHNUb2tlbikgZXh0ZXJuYWwgaXNDcmVhdG9yIHRva2VuQ29udHJhY3ROb3RTZXQgewogICAgICAgIGxlZ2VuZHNUb2tlbiA9IF9sZWdlbmRzVG9rZW47CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZvcndhcmQgRXRoZXIgdG8gdGhlIGV4aXQgYWRkcmVzcy4gU3RvcmUgYWxsIEVUSCBhbmQgVklQIGluZm9ybWF0aW9uIGluIHB1YmxpYyBzdGF0ZSBhbmQgbG9ncy4KICAgICAqIEBwYXJhbSByZWNpcGllbnQgQWRkcmVzcyB0aGF0IHRva2VucyBzaG91bGQgYmUgYXR0cmlidXRlZCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VNZW1iZXJzaGlwKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHJlY2lwaWVudCkgZXh0ZXJuYWwgcGF5YWJsZSBzYWxlQWN0aXZlIGhhc1ZhbHVlIHJlY2lwaWVudElzVmFsaWQocmVjaXBpZW50KSB7CgogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGFkZHJlc3MobGVnZW5kc1Rva2VuKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgLy8gQXR0ZW1wdCB0byBzZW5kIHRoZSBFVEggdG8gdGhlIGV4aXQgYWRkcmVzcy4KICAgICAgICBpZiAoIWV4aXRBZGRyZXNzLnNlbmQobXNnLnZhbHVlKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIC8vIFVwZGF0ZSBFVEggYW1vdW50cy4KICAgICAgICByZWNpcGllbnRFVEhbcmVjaXBpZW50XSArPSBtc2cudmFsdWU7CiAgICAgICAgdG90YWxFVEggKz0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBDYWxjdWxhdGUgVklQIGFtb3VudC4KICAgICAgICB1aW50IFZJUCA9IG1zZy52YWx1ZSAqIDEwOyAgLy8gJDEgLyBWSVAgYmFzZWQgb24gJDEwIC8gRVRIIHZhbHVlLgoKICAgICAgICAvLyBBcmUgd2UgaW4gdGhlIHByZS1zYWxlPwogICAgICAgIGlmIChibG9jay50aW1lc3RhbXAgLSBzdGFydCA8IDIgd2Vla3MpIHsKICAgICAgICAgICAgVklQID0gKFZJUCAqIDEwKSAvIDk7ICAgLy8gMTAlIGRpc2NvdW50LgogICAgICAgIH0KCiAgICAgICAgLy8gVXBkYXRlIFZJUCBhbW91bnRzLgogICAgICAgIHJlY2lwaWVudFZJUFtyZWNpcGllbnRdICs9IFZJUDsKICAgICAgICB0b3RhbFZJUCArPSBWSVA7CgogICAgICAgIC8vIENoZWNrIHdlIGhhdmUgbm90IGV4Y2VlZGVkIHRoZSBtYXhpbXVtIFZJUC4KICAgICAgICBpZiAodG90YWxWSVAgPiBsaW1pdFZJUCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIC8vIFRlbGwgdGhlIHRva2VuIGNvbnRyYWN0IGFib3V0IHRoZSBpbmNyZWFzZS4KICAgICAgICBsZWdlbmRzVG9rZW4uYWRkVG9rZW5zKHJlY2lwaWVudCwgVklQKTsKCiAgICAgICAgLy8gTG9nIHRoaXMgcHVyY2hhc2UuCiAgICAgICAgVklQUHVyY2hhc2Uoc2VuZGVyLCByZWNpcGllbnQsIG1zZy52YWx1ZSwgVklQKTsKICAgIH0KCn0KCgovKioKICogQHRpdGxlIExlZ2VuZHNUb2tlbgogKi8KY29udHJhY3QgTGVnZW5kc1Rva2VuIGlzIEVSQzIwIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdWSVAnOyAgICAgICAgICAgICAvL1RoZSBUb2tlbidzIG5hbWU6IGUuZy4gRGlnaXhEQU8gVG9rZW5zCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsgICAgICAgICAgICAgLy8gMVRva2VuICYjMTY4Oz0gMSQgKDFFVEggJiMxNjg7PSAxMCQpCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdWSVAnOyAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlLmcuIFJFUAogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ1ZJUF8wLjEnOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgb3duZXJWSVA7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFZJUDsKICAgIHVpbnQgcHVibGljIHN0YXJ0OwoKICAgIGFkZHJlc3MgcHVibGljIGxlZ2VuZHNDcm93ZGZ1bmQ7CgogICAgYm9vbCBwdWJsaWMgdGVzdGluZzsKCiAgICBtb2RpZmllciBmcm9tQ3Jvd2RmdW5kKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGxlZ2VuZHNDcm93ZGZ1bmQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNBY3RpdmUoKSB7CiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IHN0YXJ0KSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzTm90QWN0aXZlKCkgewogICAgICAgIGlmICghdGVzdGluZyAmJiBibG9jay50aW1lc3RhbXAgPj0gc3RhcnQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgcmVjaXBpZW50SXNWYWxpZChhZGRyZXNzIHJlY2lwaWVudCkgewogICAgICAgIGlmIChyZWNpcGllbnQgPT0gMCB8fCByZWNpcGllbnQgPT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBhbGxvd2FuY2VJc1plcm8oYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSB7CiAgICAgICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3NlcyYjMTgwOwogICAgICAgIC8vIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICBpZiAoKHZhbHVlICE9IDApICYmIChhbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdICE9IDApKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDb25zdHJ1Y3Rvci4KICAgICAqIEBwYXJhbSBfbGVnZW5kc0Nyb3dkZnVuZCBBZGRyZXNzIG9mIGNyb3dkZnVuZCBjb250cmFjdC4KICAgICAqIEBwYXJhbSBfcHJlYWxsb2NhdGlvbiBBZGRyZXNzIHRvIHJlY2VpdmUgdGhlIHByZS1hbGxvY2F0aW9uLgogICAgICogQHBhcmFtIF9zdGFydCBUaW1lc3RhbXAgd2hlbiB0aGUgdG9rZW4gYmVjb21lcyBhY3RpdmUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIExlZ2VuZHNUb2tlbihhZGRyZXNzIF9sZWdlbmRzQ3Jvd2RmdW5kLCBhZGRyZXNzIF9wcmVhbGxvY2F0aW9uLCB1aW50IF9zdGFydCwgYm9vbCBfdGVzdGluZykgewogICAgICAgIGxlZ2VuZHNDcm93ZGZ1bmQgPSBfbGVnZW5kc0Nyb3dkZnVuZDsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICB0ZXN0aW5nID0gX3Rlc3Rpbmc7CiAgICAgICAgdG90YWxWSVAgPSBvd25lclZJUFtfcHJlYWxsb2NhdGlvbl0gPSAyNTAwMCBldGhlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWRkIHRvIHRva2VuIGJhbGFuY2Ugb24gYWRkcmVzcy4gTXVzdCBiZSBmcm9tIGNyb3dkZnVuZC4KICAgICAqIEBwYXJhbSByZWNpcGllbnQgQWRkcmVzcyB0byBhZGQgdG9rZW5zIHRvLgogICAgICogQHJldHVybiBWSVAgQW1vdW50IG9mIFZJUCB0byBhZGQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZFRva2VucyhhZGRyZXNzIHJlY2lwaWVudCwgdWludCBWSVApIGV4dGVybmFsIGlzTm90QWN0aXZlIGZyb21Dcm93ZGZ1bmQgewogICAgICAgIG93bmVyVklQW3JlY2lwaWVudF0gKz0gVklQOwogICAgICAgIHRvdGFsVklQICs9IFZJUDsKICAgICAgICBUcmFuc2ZlcigweDAsIHJlY2lwaWVudCwgVklQKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCB0b3RhbFN1cHBseSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxWSVA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEltcGxlbWVudHMgRVJDMjAgYmFsYW5jZU9mKCkKICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBiYWxhbmNlID0gb3duZXJWSVBbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCB0cmFuc2ZlcigpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaXNBY3RpdmUgcmVjaXBpZW50SXNWYWxpZChfdG8pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChvd25lclZJUFttc2cuc2VuZGVyXSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgb3duZXJWSVBbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBvd25lclZJUFtfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbXBsZW1lbnRzIEVSQzIwIHRyYW5zZmVyRnJvbSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlzQWN0aXZlIHJlY2lwaWVudElzVmFsaWQoX3RvKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIG93bmVyVklQW19mcm9tXSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgb3duZXJWSVBbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIG93bmVyVklQW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCBhcHByb3ZlKCkKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXNBY3RpdmUgYWxsb3dhbmNlSXNaZXJvKF9zcGVuZGVyLCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbXBsZW1lbnRzIEVSQzIwIGFsbG93YW5jZSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZW1haW5pbmcgPSBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBEaXJlY3QgQnV5CiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIExlZ2VuZHNDcm93ZGZ1bmQobGVnZW5kc0Nyb3dkZnVuZCkucHVyY2hhc2VNZW1iZXJzaGlwLnZhbHVlKG1zZy52YWx1ZSkobXNnLnNlbmRlciwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFByb3h5IEJ1eQogICAgICovCiAgICBmdW5jdGlvbiBwdXJjaGFzZU1lbWJlcnNoaXAoYWRkcmVzcyByZWNpcGllbnQpIHBheWFibGUgewogICAgICAgIExlZ2VuZHNDcm93ZGZ1bmQobGVnZW5kc0Nyb3dkZnVuZCkucHVyY2hhc2VNZW1iZXJzaGlwLnZhbHVlKG1zZy52YWx1ZSkobXNnLnNlbmRlciwgcmVjaXBpZW50KTsKICAgIH0KCn0='.
	

]
