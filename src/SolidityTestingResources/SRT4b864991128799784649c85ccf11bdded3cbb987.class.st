Class {
	#name : #SRT4b864991128799784649c85ccf11bdded3cbb987,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4b864991128799784649c85ccf11bdded3cbb987 >> base64 [
	^ ''.
	

]
