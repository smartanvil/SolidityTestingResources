Class {
	#name : #SRT85f199deee79e6d6aa5c518057c9fcebd3261035,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT85f199deee79e6d6aa5c518057c9fcebd3261035 >> base64 [
	^ ''.
	

]
