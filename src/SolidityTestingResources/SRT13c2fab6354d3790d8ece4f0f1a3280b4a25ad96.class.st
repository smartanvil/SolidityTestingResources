Class {
	#name : #SRT13c2fab6354d3790d8ece4f0f1a3280b4a25ad96,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13c2fab6354d3790d8ece4f0f1a3280b4a25ad96 >> base64 [
	^ ''.
	

]
