Class {
	#name : #SRTec2bc359460b4421f8a3ca3d6329a9a213861be2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec2bc359460b4421f8a3ca3d6329a9a213861be2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cgp9Cgpjb250cmFjdCBFUkMyMEJhc2ljIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IE93bmVkIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX293bmVyICE9IDApOwogICAgICAgIG5ld093bmVyID0gX293bmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbmZpcm1Pd25lcigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIGRlbGV0ZSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3QgQmxvY2tlZCB7CgogICAgdWludCBwdWJsaWMgYmxvY2tlZFVudGlsOwoKICAgIG1vZGlmaWVyIHVuYmxvY2tlZCB7CiAgICAgICAgcmVxdWlyZShub3cgPiBibG9ja2VkVW50aWwpOwogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYywgQmxvY2tlZCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvLyBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgdW5ibG9ja2VkIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9Cgp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgdW5ibG9ja2VkIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSB1bmJsb2NrZWQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKCiAgICAgICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgb25seVBheWxvYWRTaXplKDIgKiAzMikgdW5ibG9ja2VkIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKfQoKY29udHJhY3QgQnVybmFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHVuYmxvY2tlZCBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIG5vIG5lZWQgdG8gcmVxdWlyZSB2YWx1ZSA8PSB0b3RhbFN1cHBseSwgc2luY2UgdGhhdCB3b3VsZCBpbXBseSB0aGUKICAgICAgICAvLyBzZW5kZXIncyBiYWxhbmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWxTdXBwbHksIHdoaWNoICpzaG91bGQqIGJlIGFuIGFzc2VydGlvbiBmYWlsdXJlCgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tidXJuZXJdID0gYmFsYW5jZXNbYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9Cgpjb250cmFjdCBERVZDb2luIGlzIEJ1cm5hYmxlVG9rZW4sIE93bmVkIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRGV2IENvaW4iOwoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkRFVkMiOwoKICAgIHVpbnQzMiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICBmdW5jdGlvbiBERVZDb2luKHVpbnQyNTYgaW5pdGlhbFN1cHBseSwgdWludCB1bmJsb2NrVGltZSkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gaW5pdGlhbFN1cHBseTsKICAgICAgICBibG9ja2VkVW50aWwgPSB1bmJsb2NrVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYW51YWxUcmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9Cgpjb250cmFjdCBNYW51YWxTZW5kaW5nQ3Jvd2RzYWxlIGlzIE93bmVkIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHN0cnVjdCBBbW91bnREYXRhIHsKICAgICAgICBib29sIGV4aXN0czsKICAgICAgICB1aW50MjU2IHZhbHVlOwogICAgfQoKICAgIG1hcHBpbmcgKHVpbnQgPT4gQW1vdW50RGF0YSkgcHVibGljIGFtb3VudHNCeUN1cnJlbmN5OwoKICAgIGZ1bmN0aW9uIGFkZEN1cnJlbmN5KHVpbnQgY3VycmVuY3kpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYWRkQ3VycmVuY3lJbnRlcm5hbChjdXJyZW5jeSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQ3VycmVuY3lJbnRlcm5hbCh1aW50IGN1cnJlbmN5KSBpbnRlcm5hbCB7CiAgICAgICAgQW1vdW50RGF0YSBzdG9yYWdlIGFtb3VudERhdGEgPSBhbW91bnRzQnlDdXJyZW5jeVtjdXJyZW5jeV07CiAgICAgICAgYW1vdW50RGF0YS5leGlzdHMgPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1hbnVhbFRyYW5zZmVyVG9rZW5zVG9JbnRlcm5hbChhZGRyZXNzIHRvLCB1aW50MjU2IGdpdmVuVG9rZW5zLCB1aW50IGN1cnJlbmN5LCB1aW50MjU2IGFtb3VudCkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIEFtb3VudERhdGEgbWVtb3J5IHRlbXBBbW91bnREYXRhID0gYW1vdW50c0J5Q3VycmVuY3lbY3VycmVuY3ldOwogICAgICAgIHJlcXVpcmUodGVtcEFtb3VudERhdGEuZXhpc3RzKTsKICAgICAgICBBbW91bnREYXRhIHN0b3JhZ2UgYW1vdW50RGF0YSA9IGFtb3VudHNCeUN1cnJlbmN5W2N1cnJlbmN5XTsKICAgICAgICBhbW91bnREYXRhLnZhbHVlID0gYW1vdW50RGF0YS52YWx1ZS5hZGQoYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJhbnNmZXJUb2tlbnNUbyh0bywgZ2l2ZW5Ub2tlbnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW5zVG8oYWRkcmVzcyB0bywgdWludDI1NiBnaXZlblRva2VucykgaW50ZXJuYWwgcmV0dXJucyAodWludDI1Nik7Cn0KCmNvbnRyYWN0IENyb3dkc2FsZSBpcyBNYW51YWxTZW5kaW5nQ3Jvd2RzYWxlIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBlbnVtIFN0YXRlIHsgUFJFX0lDTywgSUNPIH0KCiAgICBTdGF0ZSBwdWJsaWMgc3RhdGUgPSBTdGF0ZS5QUkVfSUNPOwoKICAgIC8vIERhdGUgb2Ygc3RhcnQgcHJlLUlDTyBhbmQgSUNPLgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgcHJlSUNPc3RhcnRUaW1lID0gICAgMTUyMjQ1NDQwMDsgLy8gc3RhcnQgYXQgU2F0dXJkYXksIE1hcmNoIDMxLCAyMDE4IDEyOjAwOjAwIEFNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBwcmVJQ09lbmRUaW1lID0gICAgICAxNTIzNzUwNDAwOyAvLyBlbmQgYXQgU3VuZGF5LCBBcHJpbCAxNSwgMjAxOCAxMjowMDowMCBBTQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgSUNPc3RhcnRUaW1lID0gICAgMTUyNDM1NTIwMDsgLy8gc3RhcnQgYXQgVHVlc2RheSwgTWF5IDIyLCAyMDE4IDEyOjAwOjAwIEFNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJQ09lbmRUaW1lID0gICAgICAxNTI3MDMzNjAwOyAvLyBlbmQgYXQgV2VkbmVzZGF5LCBNYXkgMjMsIDIwMTggMTI6MDA6MDAgQU0KCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBib3VudHlBdmFpbGFiaWxpdHlUaW1lID0gSUNPZW5kVGltZSArIDkwIGRheXM7CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbWF4VG9rZW5BbW91bnQgPSAxMDhlMjQ7IC8vIG1heCBtaW50aW5nICAgKDEwOCwgMDAwLCAwMDAgdG9rZW5zKQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgYm91bnR5VG9rZW5zID0gICAzMjRlMjM7IC8vIGJvdW50eSBhbW91bnQgKCAzMiwgNDAwLCAwMDAgdG9rZW5zKQoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1heFByZUlDT1Rva2VuQW1vdW50ID0gODFlMjM7IC8vIG1heCBudW1iZXIgb2YgdG9rZW5zIG9uIHByZS1JQ08gKDgsIDEwMCwgMDAwIHRva2Vucyk7CgogICAgREVWQ29pbiBwdWJsaWMgdG9rZW47CgogICAgdWludDI1NiBwdWJsaWMgbGVmdFRva2VucyA9IDA7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxBbW91bnQgPSAwOwogICAgdWludCBwdWJsaWMgdHJhbnNhY3Rpb25Db3VudGVyID0gMDsKCiAgICAvKiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogICAgLyoqIEJvbnVzIHBhcnQ6ICovCgogICAgLy8gQW1vdW50IGJvbnVzZXMKICAgIHVpbnQgcHJpdmF0ZSBmaXJzdEFtb3VudEJvbnVzID0gMjA7CiAgICB1aW50MjU2IHByaXZhdGUgZmlyc3RBbW91bnRCb251c0JhcnJpZXIgPSA1MDAgZXRoZXI7CiAgICB1aW50IHByaXZhdGUgc2Vjb25kQW1vdW50Qm9udXMgPSAxNTsKICAgIHVpbnQyNTYgcHJpdmF0ZSBzZWNvbmRBbW91bnRCb251c0JhcnJpZXIgPSAxMDAgZXRoZXI7CiAgICB1aW50IHByaXZhdGUgdGhpcmRBbW91bnRCb251cyA9IDEwOwogICAgdWludDI1NiBwcml2YXRlIHRoaXJkQW1vdW50Qm9udXNCYXJyaWVyID0gNTAgZXRoZXI7CiAgICB1aW50IHByaXZhdGUgZm91cnRoQW1vdW50Qm9udXMgPSA1OwogICAgdWludDI1NiBwcml2YXRlIGZvdXJ0aEFtb3VudEJvbnVzQmFycmllciA9IDIwIGV0aGVyOwoKICAgIC8vIHByZS1JQ08gYm9udXNlcyBieSB0aW1lCiAgICB1aW50IHByaXZhdGUgZmlyc3RQcmVJQ09UaW1lQmFycmllciA9IHByZUlDT3N0YXJ0VGltZSArIDEgZGF5czsKICAgIHVpbnQgcHJpdmF0ZSBmaXJzdFByZUlDT1RpbWVCb251cyA9IDIwOwogICAgdWludCBwcml2YXRlIHNlY29uZFByZUlDT1RpbWVCYXJyaWVyID0gcHJlSUNPc3RhcnRUaW1lICsgNyBkYXlzOwogICAgdWludCBwcml2YXRlIHNlY29uZFByZUlDT1RpbWVCb251cyA9IDEwOwogICAgdWludCBwcml2YXRlIHRoaXJkUHJlSUNPVGltZUJhcnJpZXIgPSBwcmVJQ09zdGFydFRpbWUgKyAxNCBkYXlzOwogICAgdWludCBwcml2YXRlIHRoaXJkUHJlSUNPVGltZUJvbnVzID0gNTsKCiAgICAvLyBJQ08gYm9udXNlcyBieSB0aW1lCiAgICB1aW50IHByaXZhdGUgZmlyc3RJQ09UaW1lQmFycmllciA9IElDT3N0YXJ0VGltZSArIDEgZGF5czsKICAgIHVpbnQgcHJpdmF0ZSBmaXJzdElDT1RpbWVCb251cyA9IDE1OwogICAgdWludCBwcml2YXRlIHNlY29uZElDT1RpbWVCYXJyaWVyID0gSUNPc3RhcnRUaW1lICsgNyBkYXlzOwogICAgdWludCBwcml2YXRlIHNlY29uZElDT1RpbWVCb251cyA9IDc7CiAgICB1aW50IHByaXZhdGUgdGhpcmRJQ09UaW1lQmFycmllciA9IElDT3N0YXJ0VGltZSArIDE0IGRheXM7CiAgICB1aW50IHByaXZhdGUgdGhpcmRJQ09UaW1lQm9udXMgPSA0OwoKICAgIC8qKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCgogICAgYm9vbCBwdWJsaWMgYm9udXNlc1BheWVkID0gZmFsc2U7CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgcmF0ZVRvRXRoZXIgPSA5MDAwOyAvLyByYXRlIHRvIGV0aGVyLCBob3cgbXVjaCB0b2tlbnMgZ2l2ZXMgdG8gMSBldGhlcgoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1pbkFtb3VudEZvckRlYWwgPSAxMCoqMTc7CgogICAgbW9kaWZpZXIgY2FuQnV5KCkgewogICAgICAgIHJlcXVpcmUoIWlzRmluaXNoZWQoKSk7CiAgICAgICAgcmVxdWlyZShpc1ByZUlDTygpIHx8IGlzSUNPKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbWluUGF5bWVudCgpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBtaW5BbW91bnRGb3JEZWFsKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENyb3dkc2FsZSgpIHB1YmxpYyB7CiAgICAgICAgLy9yZXF1aXJlKGN1cnJlbnRUaW1lKCkgPCBwcmVJQ09zdGFydFRpbWUpOwogICAgICAgIHRva2VuID0gbmV3IERFVkNvaW4obWF4VG9rZW5BbW91bnQsIElDT2VuZFRpbWUpOwogICAgICAgIGxlZnRUb2tlbnMgPSBtYXhQcmVJQ09Ub2tlbkFtb3VudDsKICAgICAgICBhZGRDdXJyZW5jeUludGVybmFsKDApOyAvLyBhZGQgQlRDCiAgICB9CgogICAgZnVuY3Rpb24gaXNGaW5pc2hlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lKCkgPiBJQ09lbmRUaW1lIHx8IChsZWZ0VG9rZW5zID09IDAgJiYgc3RhdGUgPT0gU3RhdGUuSUNPKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1ByZUlDTygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUaW1lID0gY3VycmVudFRpbWUoKTsKICAgICAgICByZXR1cm4gY3VyVGltZSA8IHByZUlDT2VuZFRpbWUgJiYgY3VyVGltZSA+IHByZUlDT3N0YXJ0VGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0lDTygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUaW1lID0gY3VycmVudFRpbWUoKTsKICAgICAgICByZXR1cm4gY3VyVGltZSA8IElDT2VuZFRpbWUgJiYgY3VyVGltZSA+IElDT3N0YXJ0VGltZTsKICAgIH0KCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIGNhbkJ1eSBtaW5QYXltZW50IHBheWFibGUgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQgYm9udXMgPSBnZXRCb251cyhhbW91bnQpOwogICAgICAgIHVpbnQyNTYgZ2l2ZW5Ub2tlbnMgPSBhbW91bnQubXVsKHJhdGVUb0V0aGVyKS5kaXYoMTAwKS5tdWwoMTAwICsgYm9udXMpOwogICAgICAgIHVpbnQyNTYgcHJvdmlkZWRUb2tlbnMgPSB0cmFuc2ZlclRva2Vuc1RvKG1zZy5zZW5kZXIsIGdpdmVuVG9rZW5zKTsKCiAgICAgICAgaWYgKGdpdmVuVG9rZW5zID4gcHJvdmlkZWRUb2tlbnMpIHsKICAgICAgICAgICAgdWludDI1NiBuZWVkQW1vdW50ID0gcHJvdmlkZWRUb2tlbnMubXVsKDEwMCkuZGl2KDEwMCArIGJvbnVzKS5kaXYocmF0ZVRvRXRoZXIpOwogICAgICAgICAgICByZXF1aXJlKGFtb3VudCA+IG5lZWRBbW91bnQpOwogICAgICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIuY2FsbC5nYXMoMzAwMDAwMCkudmFsdWUoYW1vdW50IC0gbmVlZEFtb3VudCkoKSk7CiAgICAgICAgICAgIGFtb3VudCA9IG5lZWRBbW91bnQ7CiAgICAgICAgfQogICAgICAgIHRvdGFsQW1vdW50ID0gdG90YWxBbW91bnQuYWRkKGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gbWFudWFsVHJhbnNmZXJUb2tlbnNUb1dpdGhCb251cyhhZGRyZXNzIHRvLCB1aW50MjU2IGdpdmVuVG9rZW5zLCB1aW50IGN1cnJlbmN5LCB1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwgY2FuQnV5IG9ubHlPd25lciByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludCBib251cyA9IGdldEJvbnVzKDApOwogICAgICAgIHVpbnQyNTYgdHJhbnNmZXJlZFRva2VucyA9IGdpdmVuVG9rZW5zLm11bCgxMDAgKyBib251cykuZGl2KDEwMCk7CiAgICAgICAgcmV0dXJuIG1hbnVhbFRyYW5zZmVyVG9rZW5zVG9JbnRlcm5hbCh0bywgdHJhbnNmZXJlZFRva2VucywgY3VycmVuY3ksIGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gbWFudWFsVHJhbnNmZXJUb2tlbnNUbyhhZGRyZXNzIHRvLCB1aW50MjU2IGdpdmVuVG9rZW5zLCB1aW50IGN1cnJlbmN5LCB1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwgb25seU93bmVyIGNhbkJ1eSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIG1hbnVhbFRyYW5zZmVyVG9rZW5zVG9JbnRlcm5hbCh0bywgZ2l2ZW5Ub2tlbnMsIGN1cnJlbmN5LCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJvbnVzKHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYm9udXMgPSAwOwogICAgICAgIGlmIChpc1ByZUlDTygpKSB7CiAgICAgICAgICAgIGJvbnVzID0gZ2V0UHJlSUNPQm9udXMoKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc0lDTygpKSB7CiAgICAgICAgICAgIGJvbnVzID0gZ2V0SUNPQm9udXMoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJvbnVzICsgZ2V0QW1vdW50Qm9udXMoYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBbW91bnRCb251cyh1aW50MjU2IGFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoYW1vdW50ID49IGZpcnN0QW1vdW50Qm9udXNCYXJyaWVyKSB7CiAgICAgICAgICAgIHJldHVybiBmaXJzdEFtb3VudEJvbnVzOwogICAgICAgIH0KICAgICAgICBpZiAoYW1vdW50ID49IHNlY29uZEFtb3VudEJvbnVzQmFycmllcikgewogICAgICAgICAgICByZXR1cm4gc2Vjb25kQW1vdW50Qm9udXM7CiAgICAgICAgfQogICAgICAgIGlmIChhbW91bnQgPj0gdGhpcmRBbW91bnRCb251c0JhcnJpZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXJkQW1vdW50Qm9udXM7CiAgICAgICAgfQogICAgICAgIGlmIChhbW91bnQgPj0gZm91cnRoQW1vdW50Qm9udXNCYXJyaWVyKSB7CiAgICAgICAgICAgIHJldHVybiBmb3VydGhBbW91bnRCb251czsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJlSUNPQm9udXMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgY3VyVGltZSA9IGN1cnJlbnRUaW1lKCk7CiAgICAgICAgaWYgKGN1clRpbWUgPCBmaXJzdFByZUlDT1RpbWVCYXJyaWVyKSB7CiAgICAgICAgICAgIHJldHVybiBmaXJzdFByZUlDT1RpbWVCb251czsKICAgICAgICB9CiAgICAgICAgaWYgKGN1clRpbWUgPCBzZWNvbmRQcmVJQ09UaW1lQmFycmllcikgewogICAgICAgICAgICByZXR1cm4gc2Vjb25kUHJlSUNPVGltZUJvbnVzOwogICAgICAgIH0KICAgICAgICBpZiAoY3VyVGltZSA8IHRoaXJkUHJlSUNPVGltZUJhcnJpZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXJkUHJlSUNPVGltZUJvbnVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRJQ09Cb251cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjdXJUaW1lID0gY3VycmVudFRpbWUoKTsKICAgICAgICBpZiAoY3VyVGltZSA8IGZpcnN0SUNPVGltZUJhcnJpZXIpIHsKICAgICAgICAgICAgcmV0dXJuIGZpcnN0SUNPVGltZUJvbnVzOwogICAgICAgIH0KICAgICAgICBpZiAoY3VyVGltZSA8IHNlY29uZElDT1RpbWVCYXJyaWVyKSB7CiAgICAgICAgICAgIHJldHVybiBzZWNvbmRJQ09UaW1lQm9udXM7CiAgICAgICAgfQogICAgICAgIGlmIChjdXJUaW1lIDwgdGhpcmRJQ09UaW1lQmFycmllcikgewogICAgICAgICAgICByZXR1cm4gdGhpcmRJQ09UaW1lQm9udXM7CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaENyb3dkc2FsZSgpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKGlzRmluaXNoZWQoKSk7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5JQ08pOwogICAgICAgIGlmIChsZWZ0VG9rZW5zID4gMCkgewogICAgICAgICAgICB0b2tlbi5idXJuKGxlZnRUb2tlbnMpOwogICAgICAgICAgICBsZWZ0VG9rZW5zID0gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdGFrZUJvdW50eSgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShpc0ZpbmlzaGVkKCkpOwogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuSUNPKTsKICAgICAgICByZXF1aXJlKG5vdyA+IGJvdW50eUF2YWlsYWJpbGl0eVRpbWUpOwogICAgICAgIHJlcXVpcmUoIWJvbnVzZXNQYXllZCk7CiAgICAgICAgYm9udXNlc1BheWVkID0gdHJ1ZTsKICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGJvdW50eVRva2VucykpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0YXJ0SUNPKCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoY3VycmVudFRpbWUoKSA+IHByZUlDT2VuZFRpbWUpOwogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuUFJFX0lDTyAmJiBsZWZ0VG9rZW5zIDw9IG1heFByZUlDT1Rva2VuQW1vdW50KTsKICAgICAgICBsZWZ0VG9rZW5zID0gbGVmdFRva2Vucy5hZGQobWF4VG9rZW5BbW91bnQpLnN1YihtYXhQcmVJQ09Ub2tlbkFtb3VudCkuc3ViKGJvdW50eVRva2Vucyk7CiAgICAgICAgc3RhdGUgPSBTdGF0ZS5JQ087CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlbnNUbyhhZGRyZXNzIHRvLCB1aW50MjU2IGdpdmVuVG9rZW5zKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBwcm92aWRlZFRva2VucyA9IGdpdmVuVG9rZW5zOwogICAgICAgIGlmIChnaXZlblRva2VucyA+IGxlZnRUb2tlbnMpIHsKICAgICAgICAgICAgcHJvdmlkZWRUb2tlbnMgPSBsZWZ0VG9rZW5zOwogICAgICAgIH0KICAgICAgICBsZWZ0VG9rZW5zID0gbGVmdFRva2Vucy5zdWIocHJvdmlkZWRUb2tlbnMpOwogICAgICAgIHJlcXVpcmUodG9rZW4ubWFudWFsVHJhbnNmZXIodG8sIHByb3ZpZGVkVG9rZW5zKSk7CiAgICAgICAgdHJhbnNhY3Rpb25Db3VudGVyID0gdHJhbnNhY3Rpb25Db3VudGVyICsgMTsKICAgICAgICByZXR1cm4gcHJvdmlkZWRUb2tlbnM7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlci5jYWxsLmdhcygzMDAwMDAwKS52YWx1ZShhZGRyZXNzKHRoaXMpLmJhbGFuY2UpKCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QW1vdW50KHVpbnQyNTYgYW1vdW50KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHVpbnQyNTYgZ2l2ZW5BbW91bnQgPSBhbW91bnQ7CiAgICAgICAgaWYgKGFkZHJlc3ModGhpcykuYmFsYW5jZSA8IGFtb3VudCkgewogICAgICAgICAgICBnaXZlbkFtb3VudCA9IGFkZHJlc3ModGhpcykuYmFsYW5jZTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyLmNhbGwuZ2FzKDMwMDAwMDApLnZhbHVlKGdpdmVuQW1vdW50KSgpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjdXJyZW50VGltZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbm93OwogICAgfQp9'.
	

]
