Class {
	#name : #SRT575cb87ab3c2329a0248c7d70e0ead8e57f3e3f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT575cb87ab3c2329a0248c7d70e0ead8e57f3e3f7 >> base64 [
	^ ''.
	

]
