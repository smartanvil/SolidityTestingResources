Class {
	#name : #SRTa62bdee2f277c2e2c0f46cba96879b263796ee1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa62bdee2f277c2e2c0f46cba96879b263796ee1c >> base64 [
	^ ''.
	

]
