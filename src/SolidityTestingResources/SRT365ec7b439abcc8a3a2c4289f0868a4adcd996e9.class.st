Class {
	#name : #SRT365ec7b439abcc8a3a2c4289f0868a4adcd996e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT365ec7b439abcc8a3a2c4289f0868a4adcd996e9 >> base64 [
	^ ''.
	

]
