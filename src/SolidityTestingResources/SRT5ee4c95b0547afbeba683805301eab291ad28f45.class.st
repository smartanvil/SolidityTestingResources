Class {
	#name : #SRT5ee4c95b0547afbeba683805301eab291ad28f45,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ee4c95b0547afbeba683805301eab291ad28f45 >> base64 [
	^ ''.
	

]
