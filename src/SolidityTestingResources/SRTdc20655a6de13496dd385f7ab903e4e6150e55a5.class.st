Class {
	#name : #SRTdc20655a6de13496dd385f7ab903e4e6150e55a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdc20655a6de13496dd385f7ab903e4e6150e55a5 >> base64 [
	^ ''.
	

]
