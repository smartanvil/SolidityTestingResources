Class {
	#name : #SRTb0bef286a13457b963c710fa7765961d09a27c63,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb0bef286a13457b963c710fa7765961d09a27c63 >> base64 [
	^ ''.
	

]
