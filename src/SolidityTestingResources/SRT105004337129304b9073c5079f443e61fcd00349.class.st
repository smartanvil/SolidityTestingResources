Class {
	#name : #SRT105004337129304b9073c5079f443e61fcd00349,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT105004337129304b9073c5079f443e61fcd00349 >> base64 [
	^ ''.
	

]
