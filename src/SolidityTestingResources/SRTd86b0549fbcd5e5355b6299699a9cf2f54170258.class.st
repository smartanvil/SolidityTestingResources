Class {
	#name : #SRTd86b0549fbcd5e5355b6299699a9cf2f54170258,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd86b0549fbcd5e5355b6299699a9cf2f54170258 >> base64 [
	^ ''.
	

]
