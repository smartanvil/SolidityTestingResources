Class {
	#name : #SRTe07c44a35650e445289cd9fdaaf7fb6a9d734471,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe07c44a35650e445289cd9fdaaf7fb6a9d734471 >> base64 [
	^ ''.
	

]
