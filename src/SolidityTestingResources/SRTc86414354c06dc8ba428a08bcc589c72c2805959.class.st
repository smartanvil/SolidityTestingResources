Class {
	#name : #SRTc86414354c06dc8ba428a08bcc589c72c2805959,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc86414354c06dc8ba428a08bcc589c72c2805959 >> base64 [
	^ ''.
	

]
