Class {
	#name : #SRT3ac6cb00f5a44712022a51fbace4c7497f56ee31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3ac6cb00f5a44712022a51fbace4c7497f56ee31 >> base64 [
	^ ''.
	

]
