Class {
	#name : #SRT925a8d5cc55b0d780b5cab4f21447c4bae0a3b01,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT925a8d5cc55b0d780b5cab4f21447c4bae0a3b01 >> base64 [
	^ ''.
	

]
