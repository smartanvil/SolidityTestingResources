Class {
	#name : #SRTa6858b98e5c14db67ec22c668701b1d33a3de1f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6858b98e5c14db67ec22c668701b1d33a3de1f7 >> base64 [
	^ ''.
	

]
