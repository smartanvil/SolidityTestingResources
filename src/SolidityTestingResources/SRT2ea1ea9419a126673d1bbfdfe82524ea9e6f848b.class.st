Class {
	#name : #SRT2ea1ea9419a126673d1bbfdfe82524ea9e6f848b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ea1ea9419a126673d1bbfdfe82524ea9e6f848b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8vICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gTU9ZVG9rZW4gU3RvcmFnZS4KLy8gQ29udHJhY3QgaW4gYWRkcmVzcyBQb3dlckxpbmVVcFN0b3JhZ2UuZXRoCi8vIFN0b3JhZ2UgZm9yIDMwLDAwMCwwMDAgaW4tcGxhdGZvcm0gTU9ZVG9rZW5zLiAKLy8gVG9rZW5zIG9ubHkgYXZhaWxhYmxlIHRocm91Z2ggbWluaW5nLCBzdGFja2luZyBhbmQgdG91cm5hbWVudHMgaW4tcGxhdGZvcm0gdGhyb3VnaCBzbWFydCBjb250cmFjdHMuCi8vIFByb3llY3QgbXVzdCBoYXZlIGVub3VnaCBmdW5kcyBwcm92aWRlZCBieSBQb3dlckxpbmVVcCBhbmQgcGFydG5lcnMgdG8gcmVhbGVhc2UgdG9rZW5zLiAKLy8gVGhpcyBDb250cmFjdCBzdG9yZXMgdGhlIHRva2VuIGFuZCBrZWVwcyByZWNvcmQgb2Ygb3duIGZ1bmRpbmcgYnkgUG93ZXJMaW5lVXAgYW5kIHBhcnRuZXJzLiAKLy8gRm9yIE9wZW4gRGlzdHJpYnV0aW9uIHJlZmVyIHRvIGNvbnRyYWN0IGF0IHBvd2Nyb3dkc2FsZS5ldGggKHdpbGwgYmUgbGF1bmNoZWQgb25seSBpZiBvd24gZnVuZGluZyBvZiBwcm95ZWN0IHN1Y2NlZWRzIGZpcnN0LikKLy8gQWxsIG9wZXJhdGlvbnMgY2FuIGJlIG1vbml0b3JlZCBhdCBldGhlcnNjYW4uaW8KCi8vICoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IG93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIG93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IHNhZmVNYXRoIHsKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgc2FmZUFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgc2FmZUFzc2VydChiID4gMCk7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHNhZmVBc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBzYWZlQXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgc2FmZUFzc2VydChjPj1hICYmIGM+PWIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlQXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCBwdXJlIHsKICAgIGlmICghYXNzZXJ0aW9uKSByZXZlcnQoKTsKICB9Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgb3duZWQsIHNhZmVNYXRoIHsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IE1veVRva2VuU3RvcmFnZSBpcyBvd25lZCwgc2FmZU1hdGggewogIC8vIG93bmVyL2FkbWluICYgdG9rZW4gcmV3YXJkCiAgYWRkcmVzcyAgICAgICAgcHVibGljIGFkbWluID0gb3duZXI7ICAgLy9hZG1pbiBhZGRyZXNzCiAgU3RhbmRhcmRUb2tlbiAgcHVibGljIHRva2VuUmV3YXJkOyAgICAgLy8gYWRkcmVzcyBvZiBNb2liZVRWIE1PWSBFUkMyMCBTdGFuZGFyZCBUb2tlbi4KCiAgLy8gbG9vcCBjb250cm9sIGFuZCBsaW1pdGVycyBmb3IgZnVuZGluZyBwcm95ZWN0IGFuZCBtaW5lYWJsZSB0b2tlbnMgdGhyb3VnaCBwcmVzYWxlLgoKICBzdHJpbmcgIHB1YmxpYyBDdXJyZW50U3RhdHVzID0gIiI7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IHByZVNhbGUgc3RhdHVzCiAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0YXJ0QmxvY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlU2FsZSBzdGFydCBibG9jayMKICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nRW5kQmxvY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVTYWxlIGVuZCBibG9jayMKICB1aW50MjU2IHB1YmxpYyBzdWNjZXNzQXRCbG9jazsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcHJpdmF0ZSBmdW5kaW5nIHN1Y2NlZWQgYXQgdGhpcyBibG9jay4gQWxsIGluLXBsYXRmb3JtIHRva2VucyBiYWNrZWQuCiAgdWludDI1NiBwdWJsaWMgYW1vdW50UmFpc2VkSW5Vc2Q7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbW91bnQgcmFpc2VkIGluIFVTRCBmb3IgdG9rZW5zIGJhY2tpbmcuIAogIHVpbnQyNTYgcHVibGljIHRva2Vuc1BlckV0aEF0UmVndWxhclByaWNlOyAgICAgICAKICAKCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7IAogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IEJ1eShhZGRyZXNzIGluZGV4ZWQgX3NlbmRlciwgdWludDI1NiBfZXRoLCB1aW50MjU2IF9NT1kpOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlc0FycmF5OwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBmdW5kVmFsdWU7CgogIC8vIGRlZmF1bHQgZnVuY3Rpb24sIG1hcCBhZG1pbgogIGZ1bmN0aW9uIE1veVRva2VuU3RvcmFnZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgYWRtaW4gPSBtc2cuc2VuZGVyOwogICAgQ3VycmVudFN0YXR1cyA9ICJJbi1QbGF0Zm9ybSBQT1cgVG9rZW5zIFN0b3JhZ2UgUmVsZWFzZWQiOwogIH0KCiAgCiAgLy8gc2V0dXAgdGhlIFByZVNhbGUgcGFyYW1ldGVycwogIGZ1bmN0aW9uIHNldHVwU3RvcmFnZSh1aW50MjU2IF9mdW5kaW5nU3RhcnRCbG9jaywgdWludDI1NiBfZnVuZGluZ0VuZEJsb2NrKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJ5dGVzMzIgcmVzcG9uc2UpIHsKICAgICAgCiAgICAgIGlmIChtc2cuc2VuZGVyID09IGFkbWluKQogICAgICB7CiAgICAgICAgICB0b2tlblJld2FyZCA9IFN0YW5kYXJkVG9rZW4oMHgyYTQ3RTNjNjlEZUFBZThkYkRjNWVlMjcyZDFhM0MwZjk4NTNEY0JEKTsgIC8vTU9ZdG9rZW4gU21hcnQgQ29udHJhY3QuCiAgICAgICAgICB0b2tlbnNQZXJFdGhBdFJlZ3VsYXJQcmljZSA9IDEwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vUmVndWxhciBQcmljZSAxIEVUSCA9IDEwMDAgTU9ZIGluLXBsYXRmb3JtLlZhbHVlIHRvIGNhbGN1bGF0ZSBwcm95ZWN0IGZ1bmRpbmcuCiAgICAgICAgICBhbW91bnRSYWlzZWRJblVzZCA9IDA7CgogICAgICAgICAgZnVuZGluZ1N0YXJ0QmxvY2sgPSBfZnVuZGluZ1N0YXJ0QmxvY2s7CiAgICAgICAgICBmdW5kaW5nRW5kQmxvY2sgPSBfZnVuZGluZ0VuZEJsb2NrOwogICAgICAgICAgICAgICAgCiAgICAgICAgICBDdXJyZW50U3RhdHVzID0gIkZ1bmRpbmQgb2YgUHJveWVjdCBpbiBQcm9jZXNzIjsKICAgICAgICAgIC8vUG93ZXJMaW5lVXAgaXMgZnVuZGluZyB0aGUgcHJveWVjdCB0byBiZSBhYmxlIHRvIGxhdW5jaCB0aGUgdG9rZW5zLiAKICAgICAgICAgIAogICAgICAgICAgcmV0dXJuICJTdG9yYWdlIGlzIHNldHVwLiI7CgogICAgICB9IGVsc2UgaWYgKG1zZy5zZW5kZXIgIT0gYWRtaW4pIHsKICAgICAgICAgIHJldHVybiAiTm90IEF1dGhvcml6ZWQiOwogICAgICB9IGVsc2UgIHsKICAgICAgICAgIHJldHVybiAiU2V0dXAgY2Fubm90IGJlIGNoYW5nZWQuIjsKICAgICAgfQogICAgfQoKICAvLyBzZXR1cCBzdWNjZXNzIHBhcmFtZXRlcnMgaWYgcHJveWVjdCBmdW5kaW5nIHN1Y2NlZWQuIAogIGZ1bmN0aW9uIEZ1bmRpbmdDb21wbGV0ZWQodWludDI1NiBfYW1vdW50UmFpc2VkSW5Vc2QsIHVpbnQyNTYgX3N1Y2Nlc3NBdEJsb2NrKSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJ5dGVzMzIgcmVzcG9uc2UpIHsKICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYWRtaW4pCiAgICAgIHsKICAgICAgICAgIC8vIEZ1bmRpbmcgaXMgdGhlIGNhcGl0YWwgaW52ZXN0ZWQgYnkgUG93ZXJMaW5lVXAgYW5kIHBhcnRuZXJzIHRvIGJhY2sgdGhlIHdob2xlIHByb3llY3QgYW5kIHRoZSB0b2tlbnMgcmVsZWFzZWQuCiAgICAgICAgICBhbW91bnRSYWlzZWRJblVzZCA9IF9hbW91bnRSYWlzZWRJblVzZDsgLy9hbW91bnQgcmFpc2VkIGluY2x1ZGVzIGRldmVsb3BtZW50LCBodW1hbiByZXNvdXJjZXMsIGluZnJhZXN0cnVjdHVyZSwgZGVzaWduIGFuZCBtYXJrZXRpbmcgYWNoaWV2ZWQgYnkgdGhlIHByb3llY3QgZm91bmRlcnMgYW5kIHBhcnRuZXJzLgogICAgICAgICAgc3VjY2Vzc0F0QmxvY2sgPSBfc3VjY2Vzc0F0QmxvY2s7ICAgICAgIC8vQmxvY2sgd2hlbiBnb2FsIHJlYWNoZWQuCiAgICAgICAgICAgICAgICAgCiAgICAgICAgICBDdXJyZW50U3RhdHVzID0gIkZ1bmRpbmcgU3VjY2Vzc2Z1bCwgaW4tcGxhdGZvcm0gdG9rZW5zIHJlYWR5IHRvIHVzZS4iOwogICAgICAgICAgCiAgICAgICAgICByZXR1cm4gIkFsbCBpbi1wbGF0Zm9ybSB0b2tlbnMgYmFja2VkLiI7CiAgICAgIH0gZWxzZSBpZiAobXNnLnNlbmRlciAhPSBhZG1pbikgewogICAgICAgICAgcmV0dXJuICJOb3QgQXV0aG9yaXplZCI7CiAgICAgIH0gZWxzZSAgewogICAgICAgICAgcmV0dXJuICJTZXR1cCBjYW5ub3QgYmUgY2hhbmdlZC4iOwogICAgICB9CiAgICB9CgogICAgLy8gZGVmYXVsdCBwYXlhYmxlIGZ1bmN0aW9uIHdoZW4gc2VuZGluZyBldGhlciB0byB0aGlzIGNvbnRyYWN0CiAgICAvLyBvbmx5IG93bmVyIChQb3dlckxpbmVVcCkgY2FuIHNlbmQgZXRoZXIgdG8gdGhpcyBhZGRyZXNzLgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4pOwogICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBtc2cudmFsdWUpOyAKICAgIH0KfQ=='.
	

]
