Class {
	#name : #SRT2437b52C0592C1947e4eB454bfCFfDC5d432166a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2437b52C0592C1947e4eB454bfCFfDC5d432166a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewoJZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CglldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewoJYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoJZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoJLyoqCgkgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKCSAqIGFjY291bnQuCgkgKi8KCWZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewoJCW93bmVyID0gbXNnLnNlbmRlcjsKCX0KCgkvKioKCSAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KCSAqLwoJbW9kaWZpZXIgb25seU93bmVyKCkgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgkJXzsKCX0KCgkvKioKCSAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCgkgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgoJICovCglmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKCQlyZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwoJCWVtaXQgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKCQlvd25lciA9IG5ld093bmVyOwoJfQp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCgkvKioKCSogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCgkqLwoJZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKCQlpZiAoYSA9PSAwKSB7CgkJCXJldHVybiAwOwoJCX0KCQl1aW50MjU2IGMgPSBhICogYjsKCQlhc3NlcnQoYyAvIGEgPT0gYik7CgkJcmV0dXJuIGM7Cgl9CgoJLyoqCgkqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCgkqLwoJZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKCQkvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKCQl1aW50MjU2IGMgPSBhIC8gYjsKCQkvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAoJCXJldHVybiBjOwoJfQoKCS8qKgoJKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KCSovCglmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewoJCWFzc2VydChiIDw9IGEpOwoJCXJldHVybiBhIC0gYjsKCX0KCgkvKioKCSogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCgkqLwoJZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKCQl1aW50MjU2IGMgPSBhICsgYjsKCQlhc3NlcnQoYyA+PSBhKTsKCQlyZXR1cm4gYzsKCX0KfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKCXVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKCW1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCgltb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CgkJYXNzZXJ0KG1zZy5kYXRhLmxlbmd0aCA+PSBzaXplICsgNCk7CgkJXzsKCX0KCQoJdWludDI1NiB0b3RhbFN1cHBseV87CgoJLyoqCgkqIEBkZXYgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBleGlzdGVuY2UKCSovCglmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKCQlyZXR1cm4gdG90YWxTdXBwbHlfOwoJfQoKCS8qKgoJKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCgkqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCgkqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KCSovCglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgkJcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgkJcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKCQkvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKCQliYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKCQllbWl0IFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvKioKCSogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KCSogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCgkqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCgkqLwoJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKCQlyZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKCX0KfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCWV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCgltYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoJLyoqCgkgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKCSAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KCSAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwoJICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCgkgKi8KCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgkJcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgkJcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKCQlyZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgoJCWJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKCQliYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKCQlhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwoJCWVtaXQgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvKioKCSAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgoJICoKCSAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKCSAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKCSAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKCSAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CgkgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCgkgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgoJICovCglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoJCWFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwoJCWVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLyoqCgkgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCgkgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCgkgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KCSAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KCSAqLwoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CgkJcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07Cgl9CgoJLyoqCgkgKiBAZGV2IEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCgkgKgoJICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CgkgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAoJICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQoJICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKCSAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KCSAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgoJICovCglmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgkJYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwoJICAgIGVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvKioKCSAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KCSAqCgkgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBkZWNyZW1lbnQKCSAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCgkgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCgkgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAoJICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgoJICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KCSAqLwoJZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgkJdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwoJCWlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKCQkJYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwoJCX0gZWxzZSB7CgkJCWFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwoJCX0KCQllbWl0IEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CgkJcmV0dXJuIHRydWU7Cgl9Cn0KY29udHJhY3QgVlZEQiBpcyBTdGFuZGFyZFRva2VuIHsKCXN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJWb29yZ2VkcmFhaWRlIHZhbiBkZSBCbHVlIjsKCXN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlZWREIiOwoJdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCXVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluaXRpYWxTdXBwbHkgPSAxMDAwMDAwMDAgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwoJCglmdW5jdGlvbiBWVkRCKGFkZHJlc3MgX293bmVyQWRkcmVzcykgcHVibGljIHsKCQl0b3RhbFN1cHBseV8gPSBpbml0aWFsU3VwcGx5OwoJCS8qYmFsYW5jZXNbX293bmVyQWRkcmVzc10gPSBpbml0aWFsU3VwcGx5OyovCgkJYmFsYW5jZXNbX293bmVyQWRkcmVzc10gPSA4MDAwMDAwMCAqICgxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7CgkJYmFsYW5jZXNbMHhjRDdmNmI1MjhGNTMwMmE5OWU1ZjY5YWVhYTk3NTE2YjExMzZGMTAzXSA9IDIwMDAwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKCX0KfQoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZSwKICogYWxsb3dpbmcgaW52ZXN0b3JzIHRvIHB1cmNoYXNlIHRva2VucyB3aXRoIGV0aGVyLiBUaGlzIGNvbnRyYWN0IGltcGxlbWVudHMKICogc3VjaCBmdW5jdGlvbmFsaXR5IGluIGl0cyBtb3N0IGZ1bmRhbWVudGFsIGZvcm0gYW5kIGNhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGFkZGl0aW9uYWwKICogZnVuY3Rpb25hbGl0eSBhbmQvb3IgY3VzdG9tIGJlaGF2aW9yLgogKiBUaGUgZXh0ZXJuYWwgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIGJhc2ljIGludGVyZmFjZSBmb3IgcHVyY2hhc2luZyB0b2tlbnMsIGFuZCBjb25mb3JtCiAqIHRoZSBiYXNlIGFyY2hpdGVjdHVyZSBmb3IgY3Jvd2RzYWxlcy4gVGhleSBhcmUgKm5vdCogaW50ZW5kZWQgdG8gYmUgbW9kaWZpZWQgLyBvdmVycmlkZW4uCiAqIFRoZSBpbnRlcm5hbCBpbnRlcmZhY2UgY29uZm9ybXMgdGhlIGV4dGVuc2libGUgYW5kIG1vZGlmaWFibGUgc3VyZmFjZSBvZiBjcm93ZHNhbGVzLiBPdmVycmlkZSAKICogdGhlIG1ldGhvZHMgdG8gYWRkIGZ1bmN0aW9uYWxpdHkuIENvbnNpZGVyIHVzaW5nICdzdXBlcicgd2hlcmUgYXBwcm9waWF0ZSB0byBjb25jYXRlbmF0ZQogKiBiZWhhdmlvci4KICovCgpjb250cmFjdCBWVkRCQ3Jvd2RzYWxlIGlzIE93bmFibGUgewoJdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgoJLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKCVZWREIgcHVibGljIHRva2VuOwoKCS8vIEFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAoJYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKCS8vIEhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpIChvciB0b2tlbnMgcGVyIEVUSCkKCXVpbnQyNTYgcHVibGljIHJhdGUgPSA3NjA7CgoJLy8gQW1vdW50IG9mIHdlaSByYWlzZWQKCXVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCQoJdWludDI1NiBwdWJsaWMgcm91bmQxVG9rZW5zUmVtYW5pbmcJPSA2MDAwMDAwICogMSBldGhlcjsKCXVpbnQyNTYgcHVibGljIHJvdW5kMlRva2Vuc1JlbWFuaW5nCT0gNjAwMDAwMCAqIDEgZXRoZXI7Cgl1aW50MjU2IHB1YmxpYyByb3VuZDNUb2tlbnNSZW1hbmluZwk9IDYwMDAwMDAgKiAxIGV0aGVyOwoJdWludDI1NiBwdWJsaWMgcm91bmQ0VG9rZW5zUmVtYW5pbmcJPSA2MDAwMDAwICogMSBldGhlcjsKCXVpbnQyNTYgcHVibGljIHJvdW5kNVRva2Vuc1JlbWFuaW5nCT0gNjAwMDAwMCAqIDEgZXRoZXI7Cgl1aW50MjU2IHB1YmxpYyByb3VuZDZUb2tlbnNSZW1hbmluZwk9IDYwMDAwMDAgKiAxIGV0aGVyOwoJCgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQxQmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQyQmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQzQmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQ0QmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQ1QmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1Nikgcm91bmQ2QmFsYW5jZXM7CgkKCXVpbnQyNTYgcHVibGljIHJvdW5kMVN0YXJ0VGltZSA9IDE1MjI4NjQ4MDA7IC8vMDQvMDQvMjAxOCBAIDY6MDBwbSAoVVRDKQoJdWludDI1NiBwdWJsaWMgcm91bmQyU3RhcnRUaW1lID0gMTUyMjk1MTIwMDsgLy8wNC8wNS8yMDE4IEAgNjowMHBtIChVVEMpCgl1aW50MjU2IHB1YmxpYyByb3VuZDNTdGFydFRpbWUgPSAxNTIzMDM3NjAwOyAvLzA0LzA2LzIwMTggQCA2OjAwcG0gKFVUQykKCXVpbnQyNTYgcHVibGljIHJvdW5kNFN0YXJ0VGltZSA9IDE1MjMxMjQwMDA7IC8vMDQvMDcvMjAxOCBAIDY6MDBwbSAoVVRDKQoJdWludDI1NiBwdWJsaWMgcm91bmQ1U3RhcnRUaW1lID0gMTUyMzIxMDQwMDsgLy8wNC8wOC8yMDE4IEAgNjowMHBtIChVVEMpCgl1aW50MjU2IHB1YmxpYyByb3VuZDZTdGFydFRpbWUgPSAxNTIzMjk2ODAwOyAvLzA0LzA5LzIwMTggQCA2OjAwcG0gKFVUQykKCXVpbnQyNTYgcHVibGljIGljb0VuZFRpbWUgPSAxNTI0NTA2NDAwOyAvLzA0LzIzLzIwMTggQCA2OjAwcG0gKFVUQykKCQkKCS8qKgoJICogRXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKCSAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKCSAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKCSAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCgkgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCgkgKi8KCWV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoJLyoqCgkgKiBFdmVudCBmb3IgcmF0ZSBjaGFuZ2UKCSAqIEBwYXJhbSBvd25lciBvd25lciBvZiBjb250cmFjdAoJICogQHBhcmFtIG9sZFJhdGUgb2xkIHJhdGUKCSAqIEBwYXJhbSBuZXdSYXRlIG5ldyByYXRlCgkgKi8KCWV2ZW50IFJhdGVDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludDI1NiBvbGRSYXRlLCB1aW50MjU2IG5ld1JhdGUpOwoJCgkvKioKCSAqIEBwYXJhbSBfd2FsbGV0IEFkZHJlc3Mgd2hlcmUgY29sbGVjdGVkIGZ1bmRzIHdpbGwgYmUgZm9yd2FyZGVkIHRvCgkgKiBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGJlaW5nIHNvbGQKCSAqLwoJZnVuY3Rpb24gVlZEQkNyb3dkc2FsZShhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfd2FsbGV0KSBwdWJsaWMgewoJCXJlcXVpcmUoX3dhbGxldCAhPSBhZGRyZXNzKDApKTsKCQlyZXF1aXJlKF90b2tlbiAhPSBhZGRyZXNzKDApKTsKCgkJd2FsbGV0ID0gX3dhbGxldDsKCQl0b2tlbiA9IFZWREIoX3Rva2VuKTsKCX0KCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gQ3Jvd2RzYWxlIGV4dGVybmFsIGludGVyZmFjZQoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgkvKioKCSAqIEBkZXYgZmFsbGJhY2sgZnVuY3Rpb24gKioqRE8gTk9UIE9WRVJSSURFKioqCgkgKi8KCWZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewoJCWJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKCX0KCgkvKioKCSAqIEBkZXYgbG93IGxldmVsIHRva2VuIHB1cmNoYXNlICoqKkRPIE5PVCBPVkVSUklERSoqKgoJICogQHBhcmFtIF9iZW5lZmljaWFyeSBBZGRyZXNzIHBlcmZvcm1pbmcgdGhlIHRva2VuIHB1cmNoYXNlCgkgKi8KCWZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIF9iZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewoKCQl1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCQlfcHJlVmFsaWRhdGVQdXJjaGFzZShfYmVuZWZpY2lhcnksIHdlaUFtb3VudCk7CgoJCS8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAoJCXVpbnQyNTYgdG9rZW5zID0gX2dldFRva2VuQW1vdW50KHdlaUFtb3VudCk7CgkJCgkJcmVxdWlyZShjYW5CdXlUb2tlbnModG9rZW5zKSk7CgoJCS8vIHVwZGF0ZSBzdGF0ZQoJCXdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCgkJX3Byb2Nlc3NQdXJjaGFzZShfYmVuZWZpY2lhcnksIHRva2Vucyk7CgoJCXVwZGF0ZVJvdW5kQmFsYW5jZSh0b2tlbnMpOwoKCQllbWl0IFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgX2JlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CgoJCV91cGRhdGVQdXJjaGFzaW5nU3RhdGUoX2JlbmVmaWNpYXJ5LCB3ZWlBbW91bnQpOwoKCQlfZm9yd2FyZEZ1bmRzKCk7CgkJX3Bvc3RWYWxpZGF0ZVB1cmNoYXNlKF9iZW5lZmljaWFyeSwgd2VpQW1vdW50KTsKCX0KCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gSW50ZXJuYWwgaW50ZXJmYWNlIChleHRlbnNpYmxlKQoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQoJZnVuY3Rpb24gY2FuQnV5VG9rZW5zKHVpbnQyNTYgX3Rva2VucykgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgCgl7CgkJdWludDI1NiBjdXJyZW50VGltZSA9IG5vdzsKCQl1aW50MjU2IHB1cmNoYXNlclRva2VuU3VtID0gMDsKCQlpZiAoY3VycmVudFRpbWU8cm91bmQxU3RhcnRUaW1lIHx8IGN1cnJlbnRUaW1lPmljb0VuZFRpbWUpIHJldHVybiBmYWxzZTsKCgkJaWYgKGN1cnJlbnRUaW1lID49IHJvdW5kMVN0YXJ0VGltZSAmJiBjdXJyZW50VGltZSA8IHJvdW5kMlN0YXJ0VGltZSkKCQl7CgkJCXB1cmNoYXNlclRva2VuU3VtID0gX3Rva2VucyArIHJvdW5kMUJhbGFuY2VzW21zZy5zZW5kZXJdOwoJCQlyZXR1cm4gcHVyY2hhc2VyVG9rZW5TdW0gPD0gKDEwMDAwICogKDEwICoqIHVpbnQyNTYoMTgpKSkgJiYgX3Rva2VucyA8PSByb3VuZDFUb2tlbnNSZW1hbmluZzsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDJTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCByb3VuZDNTdGFydFRpbWUpCgkJewoJCQlwdXJjaGFzZXJUb2tlblN1bSA9IF90b2tlbnMgKyByb3VuZDJCYWxhbmNlc1ttc2cuc2VuZGVyXTsKCQkJcmV0dXJuIHB1cmNoYXNlclRva2VuU3VtIDw9ICgyMDAwICogKDEwICoqIHVpbnQyNTYoMTgpKSkgJiYgX3Rva2VucyA8PSByb3VuZDJUb2tlbnNSZW1hbmluZzsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDNTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCByb3VuZDRTdGFydFRpbWUpCgkJewoJCQlwdXJjaGFzZXJUb2tlblN1bSA9IF90b2tlbnMgKyByb3VuZDNCYWxhbmNlc1ttc2cuc2VuZGVyXTsKCQkJcmV0dXJuIHB1cmNoYXNlclRva2VuU3VtIDw9ICgyMDAwICogKDEwICoqIHVpbnQyNTYoMTgpKSkgJiYgX3Rva2VucyA8PSByb3VuZDNUb2tlbnNSZW1hbmluZzsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDRTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCByb3VuZDVTdGFydFRpbWUpCgkJewoJCQlwdXJjaGFzZXJUb2tlblN1bSA9IF90b2tlbnMgKyByb3VuZDRCYWxhbmNlc1ttc2cuc2VuZGVyXTsKCQkJcmV0dXJuIHB1cmNoYXNlclRva2VuU3VtIDw9ICgyMDAwICogKDEwICoqIHVpbnQyNTYoMTgpKSkgJiYgX3Rva2VucyA8PSByb3VuZDRUb2tlbnNSZW1hbmluZzsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDVTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCByb3VuZDZTdGFydFRpbWUpCgkJewoJCQlwdXJjaGFzZXJUb2tlblN1bSA9IF90b2tlbnMgKyByb3VuZDVCYWxhbmNlc1ttc2cuc2VuZGVyXTsKCQkJcmV0dXJuIHB1cmNoYXNlclRva2VuU3VtIDw9ICgyMDAwICogKDEwICoqIHVpbnQyNTYoMTgpKSkgJiYgX3Rva2VucyA8PSByb3VuZDVUb2tlbnNSZW1hbmluZzsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDZTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCBpY29FbmRUaW1lKQoJCXsKCQkJcHVyY2hhc2VyVG9rZW5TdW0gPSBfdG9rZW5zICsgcm91bmQ2QmFsYW5jZXNbbXNnLnNlbmRlcl07CgkJCXJldHVybiBwdXJjaGFzZXJUb2tlblN1bSA8PSAoMjAwMCAqICgxMCAqKiB1aW50MjU2KDE4KSkpICYmIF90b2tlbnMgPD0gcm91bmQ2VG9rZW5zUmVtYW5pbmc7CgkJfQoJfQoJCglmdW5jdGlvbiB1cGRhdGVSb3VuZEJhbGFuY2UodWludDI1NiBfdG9rZW5zKSBpbnRlcm5hbCAKCXsKCQl1aW50MjU2IGN1cnJlbnRUaW1lID0gbm93OwoKCQlpZiAoY3VycmVudFRpbWUgPj0gcm91bmQxU3RhcnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgcm91bmQyU3RhcnRUaW1lKQoJCXsKCQkJcm91bmQxQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSByb3VuZDFCYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQoX3Rva2Vucyk7CgkJCXJvdW5kMVRva2Vuc1JlbWFuaW5nID0gcm91bmQxVG9rZW5zUmVtYW5pbmcuc3ViKF90b2tlbnMpOwoKCQl9IGVsc2UgaWYgKGN1cnJlbnRUaW1lID49IHJvdW5kMlN0YXJ0VGltZSAmJiBjdXJyZW50VGltZSA8IHJvdW5kM1N0YXJ0VGltZSkKCQl7CgkJCXJvdW5kMkJhbGFuY2VzW21zZy5zZW5kZXJdID0gcm91bmQyQmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKF90b2tlbnMpOwoJCQlyb3VuZDJUb2tlbnNSZW1hbmluZyA9IHJvdW5kMlRva2Vuc1JlbWFuaW5nLnN1YihfdG9rZW5zKTsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDNTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCByb3VuZDRTdGFydFRpbWUpCgkJewoJCQlyb3VuZDNCYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHJvdW5kM0JhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChfdG9rZW5zKTsKCQkJcm91bmQzVG9rZW5zUmVtYW5pbmcgPSByb3VuZDNUb2tlbnNSZW1hbmluZy5zdWIoX3Rva2Vucyk7CgoJCX0gZWxzZSBpZiAoY3VycmVudFRpbWUgPj0gcm91bmQ0U3RhcnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgcm91bmQ1U3RhcnRUaW1lKQoJCXsKCQkJcm91bmQ0QmFsYW5jZXNbbXNnLnNlbmRlcl0gPSByb3VuZDRCYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQoX3Rva2Vucyk7CgkJCXJvdW5kNFRva2Vuc1JlbWFuaW5nID0gcm91bmQ0VG9rZW5zUmVtYW5pbmcuc3ViKF90b2tlbnMpOwoKCQl9IGVsc2UgaWYgKGN1cnJlbnRUaW1lID49IHJvdW5kNVN0YXJ0VGltZSAmJiBjdXJyZW50VGltZSA8IHJvdW5kNlN0YXJ0VGltZSkKCQl7CgkJCXJvdW5kNUJhbGFuY2VzW21zZy5zZW5kZXJdID0gcm91bmQ1QmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKF90b2tlbnMpOwoJCQlyb3VuZDVUb2tlbnNSZW1hbmluZyA9IHJvdW5kNVRva2Vuc1JlbWFuaW5nLnN1YihfdG9rZW5zKTsKCgkJfSBlbHNlIGlmIChjdXJyZW50VGltZSA+PSByb3VuZDZTdGFydFRpbWUgJiYgY3VycmVudFRpbWUgPCBpY29FbmRUaW1lKQoJCXsKCQkJcm91bmQ2QmFsYW5jZXNbbXNnLnNlbmRlcl0gPSByb3VuZDZCYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQoX3Rva2Vucyk7CgkJCXJvdW5kNlRva2Vuc1JlbWFuaW5nID0gcm91bmQ2VG9rZW5zUmVtYW5pbmcuc3ViKF90b2tlbnMpOwoJCX0KCX0KCgkvKioKCSAqIEBkZXYgVmFsaWRhdGlvbiBvZiBhbiBpbmNvbWluZyBwdXJjaGFzZS4gVXNlIHJlcXVpcmUgc3RhdGVtZW5zIHRvIHJldmVydCBzdGF0ZSB3aGVuIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFVzZSBzdXBlciB0byBjb25jYXRlbmF0ZSB2YWxpZGF0aW9ucy4KCSAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgQWRkcmVzcyBwZXJmb3JtaW5nIHRoZSB0b2tlbiBwdXJjaGFzZQoJICogQHBhcmFtIF93ZWlBbW91bnQgVmFsdWUgaW4gd2VpIGludm9sdmVkIGluIHRoZSBwdXJjaGFzZQoJICovCglmdW5jdGlvbiBfcHJlVmFsaWRhdGVQdXJjaGFzZShhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfd2VpQW1vdW50KSBpbnRlcm5hbCBwdXJlIHsKCQlyZXF1aXJlKF9iZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKCQlyZXF1aXJlKF93ZWlBbW91bnQgIT0gMCk7Cgl9CgoJLyoqCgkgKiBAZGV2IFZhbGlkYXRpb24gb2YgYW4gZXhlY3V0ZWQgcHVyY2hhc2UuIE9ic2VydmUgc3RhdGUgYW5kIHVzZSByZXZlcnQgc3RhdGVtZW50cyB0byB1bmRvIHJvbGxiYWNrIHdoZW4gdmFsaWQgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4KCSAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgQWRkcmVzcyBwZXJmb3JtaW5nIHRoZSB0b2tlbiBwdXJjaGFzZQoJICogQHBhcmFtIF93ZWlBbW91bnQgVmFsdWUgaW4gd2VpIGludm9sdmVkIGluIHRoZSBwdXJjaGFzZQoJICovCglmdW5jdGlvbiBfcG9zdFZhbGlkYXRlUHVyY2hhc2UoYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX3dlaUFtb3VudCkgaW50ZXJuYWwgcHVyZSB7CgkJcmVxdWlyZShfYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CgkJcmVxdWlyZShfd2VpQW1vdW50ICE9IDApOwoJfQoKCS8qKgoJICogQGRldiBTb3VyY2Ugb2YgdG9rZW5zLiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBtb2RpZnkgdGhlIHdheSBpbiB3aGljaCB0aGUgY3Jvd2RzYWxlIHVsdGltYXRlbHkgZ2V0cyBhbmQgc2VuZHMgaXRzIHRva2Vucy4KCSAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgQWRkcmVzcyBwZXJmb3JtaW5nIHRoZSB0b2tlbiBwdXJjaGFzZQoJICogQHBhcmFtIF90b2tlbkFtb3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIGJlIGVtaXR0ZWQKCSAqLwoJZnVuY3Rpb24gX2RlbGl2ZXJUb2tlbnMoYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX3Rva2VuQW1vdW50KSBpbnRlcm5hbCB7CgkJdG9rZW4udHJhbnNmZXIoX2JlbmVmaWNpYXJ5LCBfdG9rZW5BbW91bnQpOwoJfQoKCS8qKgoJICogQGRldiBFeGVjdXRlZCB3aGVuIGEgcHVyY2hhc2UgaGFzIGJlZW4gdmFsaWRhdGVkIGFuZCBpcyByZWFkeSB0byBiZSBleGVjdXRlZC4gTm90IG5lY2Vzc2FyaWx5IGVtaXRzL3NlbmRzIHRva2Vucy4KCSAqIEBwYXJhbSBfYmVuZWZpY2lhcnkgQWRkcmVzcyByZWNlaXZpbmcgdGhlIHRva2VucwoJICogQHBhcmFtIF90b2tlbkFtb3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIGJlIHB1cmNoYXNlZAoJICovCglmdW5jdGlvbiBfcHJvY2Vzc1B1cmNoYXNlKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50MjU2IF90b2tlbkFtb3VudCkgaW50ZXJuYWwgewoJCV9kZWxpdmVyVG9rZW5zKF9iZW5lZmljaWFyeSwgX3Rva2VuQW1vdW50KTsKCX0KCgkvKioKCSAqIEBkZXYgT3ZlcnJpZGUgZm9yIGV4dGVuc2lvbnMgdGhhdCByZXF1aXJlIGFuIGludGVybmFsIHN0YXRlIHRvIGNoZWNrIGZvciB2YWxpZGl0eSAoY3VycmVudCB1c2VyIGNvbnRyaWJ1dGlvbnMsIGV0Yy4pCgkgKiBAcGFyYW0gX2JlbmVmaWNpYXJ5IEFkZHJlc3MgcmVjZWl2aW5nIHRoZSB0b2tlbnMKCSAqIEBwYXJhbSBfd2VpQW1vdW50IFZhbHVlIGluIHdlaSBpbnZvbHZlZCBpbiB0aGUgcHVyY2hhc2UKCSAqLwoJZnVuY3Rpb24gX3VwZGF0ZVB1cmNoYXNpbmdTdGF0ZShhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfd2VpQW1vdW50KSBpbnRlcm5hbCBwdXJlIHsKCQlyZXF1aXJlKF9iZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKCQlyZXF1aXJlKF93ZWlBbW91bnQgIT0gMCk7Cgl9CgoJLyoqCgkgKiBAZGV2IE92ZXJyaWRlIHRvIGV4dGVuZCB0aGUgd2F5IGluIHdoaWNoIGV0aGVyIGlzIGNvbnZlcnRlZCB0byB0b2tlbnMuCgkgKiBAcGFyYW0gX3dlaUFtb3VudCBWYWx1ZSBpbiB3ZWkgdG8gYmUgY29udmVydGVkIGludG8gdG9rZW5zCgkgKiBAcmV0dXJuIE51bWJlciBvZiB0b2tlbnMgdGhhdCBjYW4gYmUgcHVyY2hhc2VkIHdpdGggdGhlIHNwZWNpZmllZCBfd2VpQW1vdW50CgkgKi8KCWZ1bmN0aW9uIF9nZXRUb2tlbkFtb3VudCh1aW50MjU2IF93ZWlBbW91bnQpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewoJCXJldHVybiBfd2VpQW1vdW50Lm11bChyYXRlKTsKCX0KCgkvKioKCSAqIEBkZXYgRGV0ZXJtaW5lcyBob3cgRVRIIGlzIHN0b3JlZC9mb3J3YXJkZWQgb24gcHVyY2hhc2VzLgoJICovCglmdW5jdGlvbiBfZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewoJCXdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwoJfQoJCglmdW5jdGlvbiB0b2tlbkJhbGFuY2UoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewoJCXJldHVybiB0b2tlbi5iYWxhbmNlT2YodGhpcyk7Cgl9CgkKCS8qKgoJICogQGRldiBDaGFuZ2UgZXhjaGFuZ2UgcmF0ZSBvZiBldGhlciB0byB0b2tlbnMKCSAqIEBwYXJhbSBfcmF0ZSBOdW1iZXIgb2YgdG9rZW5zIHBlciBldGgKCSAqLwoJZnVuY3Rpb24gY2hhbmdlUmF0ZSh1aW50MjU2IF9yYXRlKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKCQllbWl0IFJhdGVDaGFuZ2VkKG1zZy5zZW5kZXIsIHJhdGUsIF9yYXRlKTsKCQlyYXRlID0gX3JhdGU7CgkJcmV0dXJuIHRydWU7Cgl9CgkKCS8qKgoJICogQGRldiBNZXRob2QgdG8gY2hlY2sgY3VycmVudCByYXRlCgkgKiBAcmV0dXJuIFJldHVybnMgdGhlIGN1cnJlbnQgZXhjaGFuZ2UgcmF0ZQoJICovCglmdW5jdGlvbiBnZXRSYXRlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewoJCXJldHVybiByYXRlOwoJfQoKCWZ1bmN0aW9uIHRyYW5zZmVyQmFjayh1aW50MjU2IHRva2Vucykgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CgkJdG9rZW4udHJhbnNmZXIob3duZXIsIHRva2Vucyk7CgkJcmV0dXJuIHRydWU7Cgl9Cn0='.
	

]
