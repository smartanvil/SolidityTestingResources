Class {
	#name : #SRTB340686da996b8B3d486b4D27E38E38500A9E926,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB340686da996b8B3d486b4D27E38E38500A9E926 >> base64 [
	^ ''.
	

]
