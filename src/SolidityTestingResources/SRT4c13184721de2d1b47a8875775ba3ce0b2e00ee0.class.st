Class {
	#name : #SRT4c13184721de2d1b47a8875775ba3ce0b2e00ee0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c13184721de2d1b47a8875775ba3ce0b2e00ee0 >> base64 [
	^ ''.
	

]
