Class {
	#name : #SRT94dc1cf66c8fd62ef3bd7da53f47423862839823,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT94dc1cf66c8fd62ef3bd7da53f47423862839823 >> base64 [
	^ ''.
	

]
