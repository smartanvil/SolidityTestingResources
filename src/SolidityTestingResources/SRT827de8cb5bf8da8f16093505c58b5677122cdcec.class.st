Class {
	#name : #SRT827de8cb5bf8da8f16093505c58b5677122cdcec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT827de8cb5bf8da8f16093505c58b5677122cdcec >> base64 [
	^ 'LyoKVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIENyeXB0YXVyIENvbnRyYWN0LgoKVGhlIENyeXB0YXVyVG9rZW4gQ29udHJhY3QgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCm1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBsZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQKYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4gU2VlIHRoZSBHTlUgbGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKZm9yIG1vcmUgZGV0YWlscy4KCllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBsZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQphbG9uZyB3aXRoIHRoZSBDcnlwdGF1clRva2VuIENvbnRyYWN0LiBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgpAYXV0aG9yIElseWEgU3ZpcmluIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjlhZjNiNGU5ZWNmM2U4ZjNmNGRhZjRmNWU4ZmVmYmVjZjNmNGZlYjRlOGVmIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KRG9uYXRpb24gYWRkcmVzcyAweDNBZDM4RDEwNjBkMWMzNTBhRjI5Njg1QjJiOEVjM2VERTUyNzQ1MkIKKi8KCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCmNvbnRyYWN0IG93bmVkIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgcHVibGljIGNhbmRpZGF0ZTsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHBheWFibGUgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGNhbmRpZGF0ZSA9IF9vd25lcjsKICAgIH0KCiAgICBmdW5jdGlvbiBjb25maXJtT3duZXIoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoY2FuZGlkYXRlID09IG1zZy5zZW5kZXIpOwogICAgICAgIG93bmVyID0gY2FuZGlkYXRlOwogICAgICAgIGRlbGV0ZSBjYW5kaWRhdGU7CiAgICB9Cn0KCmNvbnRyYWN0IENyeXB0YXVyVG9rZW4gaXMgb3duZWQgewoKICAgIGFkZHJlc3MgICAgICAgICAgICAgICAgICAgICAgcHVibGljIGNyeXB0YXVyQmFja2VuZDsKICAgIGJvb2wgICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljIGNyb3dkc2FsZUZpbmlzaGVkOwogICAgdWludCAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogICAgc3RyaW5nICBwdWJsaWMgc3RhbmRhcmQgICAgPSAnVG9rZW4gMC4xJzsKICAgIHN0cmluZyAgcHVibGljIG5hbWUgICAgICAgID0gJ0NyeXB0YXVyJzsKICAgIHN0cmluZyAgcHVibGljIHN5bWJvbCAgICAgID0gIkNQVCI7CiAgICB1aW50OCAgIHB1YmxpYyBkZWNpbWFscyAgICA9IDg7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBwdWJsaWMgYWxsb3dlZDsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBtaW50ZXIsIHVpbnQgdG9rZW5zLCB1aW50OCBvcmlnaW5hbENvaW5UeXBlLCBieXRlczMyIG9yaWdpbmFsVHhIYXNoKTsKCiAgICAvLyBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENyeXB0YXVyVG9rZW4oYWRkcmVzcyBfY3J5cHRhdXJCYWNrZW5kKSBwdWJsaWMgcGF5YWJsZSBvd25lZCgpIHsKICAgICAgICBjcnlwdGF1ckJhY2tlbmQgPSBfY3J5cHRhdXJCYWNrZW5kOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZUJhY2tlbmQoYWRkcmVzcyBfY3J5cHRhdXJCYWNrZW5kKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBjcnlwdGF1ckJhY2tlbmQgPSBfY3J5cHRhdXJCYWNrZW5kOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyBfbWludGVyLCB1aW50IF90b2tlbnMsIHVpbnQ4IF9vcmlnaW5hbENvaW5UeXBlLCBieXRlczMyIF9vcmlnaW5hbFR4SGFzaCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3J5cHRhdXJCYWNrZW5kKTsKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVGaW5pc2hlZCk7CiAgICAgICAgYmFsYW5jZU9mW19taW50ZXJdICs9IF90b2tlbnM7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gX3Rva2VuczsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBfbWludGVyLCBfdG9rZW5zKTsKICAgICAgICBNaW50KF9taW50ZXIsIF90b2tlbnMsIF9vcmlnaW5hbENvaW5UeXBlLCBfb3JpZ2luYWxUeEhhc2gpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaENyb3dkc2FsZSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGNyb3dkc2FsZUZpbmlzaGVkID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZU9mW190b10pOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgICAgIHB1YmxpYyBvbmx5UGF5bG9hZFNpemUoMyAqIDMyKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7IC8vIG92ZXJmbG93CiAgICAgICAgcmVxdWlyZShhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KfQ=='.
	

]
