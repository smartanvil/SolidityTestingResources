Class {
	#name : #SRTc72678b233db51ff01a6725c21a323a98096cfa1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc72678b233db51ff01a6725c21a323a98096cfa1 >> base64 [
	^ ''.
	

]
