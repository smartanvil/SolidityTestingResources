Class {
	#name : #SRT58c3069023ed736f430d585003715058c2e3c671,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT58c3069023ed736f430d585003715058c2e3c671 >> base64 [
	^ ''.
	

]
