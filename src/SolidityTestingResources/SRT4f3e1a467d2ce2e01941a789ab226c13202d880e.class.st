Class {
	#name : #SRT4f3e1a467d2ce2e01941a789ab226c13202d880e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f3e1a467d2ce2e01941a789ab226c13202d880e >> base64 [
	^ ''.
	

]
