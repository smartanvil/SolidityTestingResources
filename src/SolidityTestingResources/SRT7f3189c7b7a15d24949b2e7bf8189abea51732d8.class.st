Class {
	#name : #SRT7f3189c7b7a15d24949b2e7bf8189abea51732d8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f3189c7b7a15d24949b2e7bf8189abea51732d8 >> base64 [
	^ 'Ly8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKcHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qIFRoaXMgaXMgYSBzbGlnaHQgY2hhbmdlIHRvIHRoZSBFUkMyMCBiYXNlIHN0YW5kYXJkLgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBpcyByZXBsYWNlZCB3aXRoOgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgVGhpcyBpcyBtb3ZlZCB0byB0aGUgYmFzZSBjb250cmFjdCBzaW5jZSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9ucyBhcmUgbm90CiAgICBjdXJyZW50bHkgcmVjb2duaXNlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWF0Y2hpbmcgYWJzdHJhY3QKICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAgICovCiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Ci8qCllvdSBzaG91bGQgaW5oZXJpdCBmcm9tIFN0YW5kYXJkVG9rZW4gb3IsIGZvciBhIHRva2VuIGxpa2UgeW91IHdvdWxkIHdhbnQgdG8KZGVwbG95IGluIHNvbWV0aGluZyBsaWtlIE1pc3QsIHNlZSBIdW1hblN0YW5kYXJkVG9rZW4uc29sLgooVGhpcyBpbXBsZW1lbnRzIE9OTFkgdGhlIHN0YW5kYXJkIGZ1bmN0aW9ucyBhbmQgTk9USElORyBlbHNlLgpJZiB5b3UgZGVwbG95IHRoaXMsIHlvdSB3b24ndCBoYXZlIGFueXRoaW5nIHVzZWZ1bC4pCgpJbXBsZW1lbnRzIEVSQyAyMCBUb2tlbiBzdGFuZGFyZDogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi4qLwoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgICAgICAvL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUgZ29lcyBvbiwgeW91IG5lZWQgdG8gY2hlY2sgaWYgaXQgZG9lc24ndCB3cmFwLgogICAgICAgIC8vUmVwbGFjZSB0aGUgaWYgd2l0aCB0aGlzIG9uZSBpbnN0ZWFkLgogICAgICAgIC8vaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4KICAgICAgICAvL2lmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwp9Ci8qCgogIENvbnRyYWN0IHRvIGltcGxlbWVudCBFUkMyMCB0b2tlbnMgZm9yIHRoZSBjcm93ZGZ1bmRpbmcgb2YgdGhlIFJvdWdlIFByb2plY3QgKFJHWCB0b2tlbnMpLgogIFRoZXkgYXJlIGJhc2VkIG9uIFN0YW5kYXJkVG9rZW4gZnJvbSAoaHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9Ub2tlbnMpLgoKICBEaWZmZXJlbmNlcyB3aXRoIHN0YW5kYXJkIEVSQzIwIHRva2VucyA6CgogICAtIFRoZSB0b2tlbnMgY2FuIGJlIGJvdWdodCBieSBzZW5kaW5nIGV0aGVyIHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIChmdW5kaW5nIHByb2NlZHVyZSkuCiAgICAgVGhlIHByaWNlIGlzIGhhcmRjb2RlZDogMSB0b2tlbiA9IDEgZmlubmV5ICgwLjAwMSBldGgpLgogICAgIEEgbWluaW11bSBjb250cmlidXRpb24gY2FuIGJlIHNldCBieSB0aGUgb3duZXIuCgogICAtIFRoZSBmdW5kaW5nIGNhbiBvbmx5IG9jY3VyIGlmIHRoZSBjdXJyZW50IGRhdGUgaXMgc3VwZXJpb3IgdG8gdGhlIHN0YXJ0RnVuZGluZyBwYXJhbWV0ZXIgdGltZXN0YW1wLgogICAgIEF0IGFueXRpbWUsIHRoZSBjcmVhdG9yIGNhbiBjaGFuZ2UgdGhpcyB0b2tlbiBwYXJhbWV0ZXIsIGVmZmVjdGl2ZWx5IGNsb3NpbmcgdGhlIGZ1bmRpbmcuCgogICAtIFRoZSBvd25lciBjYW4gYWxzbyBmcmVlemUgcGFydCBvZiBoaXMgdG9rZW5zIHRvIG5vdCBiZSBwYXJ0IG9mIHRoZSBmdW5kaW5nIHByb2NlZHVyZS4KCiAgIC0gQXQgdGhlIGNyZWF0aW9uLCBhIGRpc2NvdW50TXVsdGlwbGllciBpcyBzYXZlZCB3aGljaCBjYW4gYmUgdXNlZCBsYXRlciBvbiAKICAgICBieSBvdGhlciBjb250cmFjdHMgKGVnIHRvIHVzZSB0aGUgdG9rZW5zIGFzIGEgdm91Y2hlcikuCgoqLwoKCmNvbnRyYWN0IFJHWFRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgCiAgICAvKiBFUkMyMCAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ3YxJzsKICAgIAogICAgLyogUkdYICovCiAgICBhZGRyZXNzIG93bmVyOyAKICAgIHVpbnQgcHVibGljIGZ1bmRpbmdTdGFydDsKICAgIHVpbnQyNTYgcHVibGljIG1pbkNvbnRyaWIgPSAxOwogICAgdWludDI1NiBwdWJsaWMgZnJvemVuU3VwcGx5ID0gMDsKICAgIHVpbnQ4IHB1YmxpYyBkaXNjb3VudE11bHRpcGxpZXI7CiAgICAKICAgIG1vZGlmaWVyIGZ1bmRpbmdPcGVuKCkgewogICAgICAgIHJlcXVpcmUobm93ID49IGZ1bmRpbmdTdGFydCk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seUJ5KGFkZHJlc3MgX2FjY291bnQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gX2FjY291bnQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgZnVuZGluZ09wZW4oKSB7IAoKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gb3duZXIpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgX3ZhbHVlID0gbXNnLnZhbHVlIC8gMSBmaW5uZXk7CgogICAgICAgIHJlcXVpcmUoX3ZhbHVlID49IG1pbkNvbnRyaWIpOyAKICAgICAgICAKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSA+PSAoX3ZhbHVlIC0gZnJvemVuU3VwcGx5KSAmJiBfdmFsdWUgPiAwKTsgCiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbb3duZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIob3duZXIsIG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFJHWFRva2VuICgKICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9zeW1ib2wsCiAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfaW5pdGlhbEFtb3VudCwKICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9mdW5kaW5nU3RhcnQsCiAgICAgICAgICAgICAgICAgICAgICAgdWludDggX2Rpc2NvdW50TXVsdGlwbGllcgogICAgICAgICAgICAgICAgICAgICAgICkgewogICAgICAgIG5hbWUgPSBfbmFtZTsKICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9pbml0aWFsQW1vdW50OyAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgdG90YWxTdXBwbHkgPSBfaW5pdGlhbEFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgZnVuZGluZ1N0YXJ0ID0gX2Z1bmRpbmdTdGFydDsgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lc3RhbXAgYmVmb3JlIG5vIGZ1bmRpbmcgY2FuIG9jY3VyCiAgICAgICAgZGlzY291bnRNdWx0aXBsaWVyID0gX2Rpc2NvdW50TXVsdGlwbGllcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaXNGdW5kaW5nT3BlbigpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgeWVzKSB7CiAgICAgICAgcmV0dXJuIChub3cgPj0gZnVuZGluZ1N0YXJ0KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZnJlZXplU3VwcGx5KHVpbnQyNTYgX3ZhbHVlKSBvbmx5Qnkob3duZXIpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSA+PSBfdmFsdWUpOwogICAgICAgIGZyb3plblN1cHBseSA9IF92YWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0TWluaW11bSh1aW50MjU2IF92YWx1ZSkgb25seUJ5KG93bmVyKSB7CiAgICAgICAgbWluQ29udHJpYiA9IF92YWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdGltZUZ1bmRpbmdTdGFydCh1aW50IF9mdW5kaW5nU3RhcnQpIG9ubHlCeShvd25lcikgewogICAgICAgIGZ1bmRpbmdTdGFydCA9IF9mdW5kaW5nU3RhcnQ7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5Qnkob3duZXIpIHsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGtpbGwoKSBvbmx5Qnkob3duZXIpIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQoKfQ=='.
	

]
