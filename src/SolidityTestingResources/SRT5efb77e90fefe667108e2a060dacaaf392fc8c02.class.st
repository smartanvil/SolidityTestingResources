Class {
	#name : #SRT5efb77e90fefe667108e2a060dacaaf392fc8c02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5efb77e90fefe667108e2a060dacaaf392fc8c02 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7CiAgICBldmVudCByZWNlaXZlZEV0aGVyKGFkZHJlc3Mgc2VuZGVyLCB1aW50IGFtb3VudCk7CiAgICBldmVudCByZWNlaXZlZFRva2VucyhhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOwoKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpewogICAgICAgIFRva2VuIHQgPSBUb2tlbihfdG9rZW4pOwogICAgICAgIHJlcXVpcmUodC50cmFuc2ZlckZyb20oX2Zyb20sIHRoaXMsIF92YWx1ZSkpOwogICAgICAgIHJlY2VpdmVkVG9rZW5zKF9mcm9tLCBfdmFsdWUsIF90b2tlbiwgX2V4dHJhRGF0YSk7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgcmVjZWl2ZWRFdGhlcihtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQp9Cgpjb250cmFjdCBUb2tlbiB7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9Cgpjb250cmFjdCBPcnl6YSBpcyBvd25lZCwgdG9rZW5SZWNpcGllbnQgewoKICAgIHVpbnQgcHVibGljIG1pbmltdW1RdW9ydW07CiAgICB1aW50IHB1YmxpYyBkZWJhdGluZ1BlcmlvZEluTWludXRlczsKICAgIFByb3Bvc2FsW10gcHVibGljIHByb3Bvc2FsczsKICAgIHVpbnQgcHVibGljIG51bVByb3Bvc2FsczsKICAgIFRva2VuIHB1YmxpYyBzaGFyZXNUb2tlbkFkZHJlc3M7CgogICAgZXZlbnQgUHJvcG9zYWxBZGRlZCh1aW50IHByb3Bvc2FsSUQsIGFkZHJlc3MgcmVjaXBpZW50LCB1aW50IGFtb3VudCwgc3RyaW5nIGRlc2NyaXB0aW9uKTsKICAgIGV2ZW50IFZvdGVkKHVpbnQgcHJvcG9zYWxJRCwgYm9vbCBwb3NpdGlvbiwgYWRkcmVzcyB2b3Rlcik7CiAgICBldmVudCBQcm9wb3NhbFRhbGxpZWQodWludCBwcm9wb3NhbElELCB1aW50IHJlc3VsdCwgdWludCBxdW9ydW0sIGJvb2wgYWN0aXZlKTsKICAgIGV2ZW50IENoYW5nZU9mUnVsZXModWludCBuZXdNaW5pbXVtUXVvcnVtLCB1aW50IG5ld0RlYmF0aW5nUGVyaW9kSW5NaW51dGVzLCBhZGRyZXNzIG5ld1NoYXJlc1Rva2VuQWRkcmVzcyk7CgogICAgc3RydWN0IFByb3Bvc2FsIHsKICAgICAgICBhZGRyZXNzIHJlY2lwaWVudDsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICBzdHJpbmcgZGVzY3JpcHRpb247CiAgICAgICAgdWludCB2b3RpbmdEZWFkbGluZTsKICAgICAgICBib29sIGV4ZWN1dGVkOwogICAgICAgIGJvb2wgcHJvcG9zYWxQYXNzZWQ7CiAgICAgICAgdWludCBudW1iZXJPZlZvdGVzOwogICAgICAgIGJ5dGVzMzIgcHJvcG9zYWxIYXNoOwogICAgICAgIFZvdGVbXSB2b3RlczsKICAgICAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHZvdGVkOwogICAgfQoKICAgIHN0cnVjdCBWb3RlIHsKICAgICAgICBib29sIGluU3VwcG9ydDsKICAgICAgICBhZGRyZXNzIHZvdGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlTaGFyZWhvbGRlcnMgewogICAgICAgIHJlcXVpcmUoc2hhcmVzVG9rZW5BZGRyZXNzLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gT3J5emEoVG9rZW4gc2hhcmVzQWRkcmVzcywgdWludCBtaW5pbXVtU2hhcmVzVG9QYXNzQVZvdGUsIHVpbnQgbWludXRlc0ZvckRlYmF0ZSkgcGF5YWJsZSB7CiAgICAgICAgY2hhbmdlVm90aW5nUnVsZXMoc2hhcmVzQWRkcmVzcywgbWluaW11bVNoYXJlc1RvUGFzc0FWb3RlLCBtaW51dGVzRm9yRGViYXRlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VWb3RpbmdSdWxlcyhUb2tlbiBzaGFyZXNBZGRyZXNzLCB1aW50IG1pbmltdW1TaGFyZXNUb1Bhc3NBVm90ZSwgdWludCBtaW51dGVzRm9yRGViYXRlKSBvbmx5T3duZXIgewogICAgICAgIHNoYXJlc1Rva2VuQWRkcmVzcyA9IFRva2VuKHNoYXJlc0FkZHJlc3MpOwogICAgICAgIGlmIChtaW5pbXVtU2hhcmVzVG9QYXNzQVZvdGUgPT0gMCApIG1pbmltdW1TaGFyZXNUb1Bhc3NBVm90ZSA9IDE7CiAgICAgICAgbWluaW11bVF1b3J1bSA9IG1pbmltdW1TaGFyZXNUb1Bhc3NBVm90ZTsKICAgICAgICBkZWJhdGluZ1BlcmlvZEluTWludXRlcyA9IG1pbnV0ZXNGb3JEZWJhdGU7CiAgICAgICAgQ2hhbmdlT2ZSdWxlcyhtaW5pbXVtUXVvcnVtLCBkZWJhdGluZ1BlcmlvZEluTWludXRlcywgc2hhcmVzVG9rZW5BZGRyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBuZXdQcm9wb3NhbCgKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQgd2VpQW1vdW50LAogICAgICAgIHN0cmluZyBqb2JEZXNjcmlwdGlvbiwKICAgICAgICBieXRlcyB0cmFuc2FjdGlvbkJ5dGVjb2RlCiAgICApCiAgICAgICAgb25seVNoYXJlaG9sZGVycwogICAgICAgIHJldHVybnMgKHVpbnQgcHJvcG9zYWxJRCkKICAgIHsKICAgICAgICBwcm9wb3NhbElEID0gcHJvcG9zYWxzLmxlbmd0aCsrOwogICAgICAgIFByb3Bvc2FsIHN0b3JhZ2UgcCA9IHByb3Bvc2Fsc1twcm9wb3NhbElEXTsKICAgICAgICBwLnJlY2lwaWVudCA9IGJlbmVmaWNpYXJ5OwogICAgICAgIHAuYW1vdW50ID0gd2VpQW1vdW50OwogICAgICAgIHAuZGVzY3JpcHRpb24gPSBqb2JEZXNjcmlwdGlvbjsKICAgICAgICBwLnByb3Bvc2FsSGFzaCA9IHNoYTMoYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdHJhbnNhY3Rpb25CeXRlY29kZSk7CiAgICAgICAgcC52b3RpbmdEZWFkbGluZSA9IG5vdyArIGRlYmF0aW5nUGVyaW9kSW5NaW51dGVzICogMSBtaW51dGVzOwogICAgICAgIHAuZXhlY3V0ZWQgPSBmYWxzZTsKICAgICAgICBwLnByb3Bvc2FsUGFzc2VkID0gZmFsc2U7CiAgICAgICAgcC5udW1iZXJPZlZvdGVzID0gMDsKICAgICAgICBQcm9wb3NhbEFkZGVkKHByb3Bvc2FsSUQsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIGpvYkRlc2NyaXB0aW9uKTsKICAgICAgICBudW1Qcm9wb3NhbHMgPSBwcm9wb3NhbElEKzE7CgogICAgICAgIHJldHVybiBwcm9wb3NhbElEOwogICAgfQoKICAgIGZ1bmN0aW9uIG5ld1Byb3Bvc2FsSW5FdGhlcigKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQgZXRoZXJBbW91bnQsCiAgICAgICAgc3RyaW5nIGpvYkRlc2NyaXB0aW9uLAogICAgICAgIGJ5dGVzIHRyYW5zYWN0aW9uQnl0ZWNvZGUKICAgICkKICAgICAgICBvbmx5U2hhcmVob2xkZXJzCiAgICAgICAgcmV0dXJucyAodWludCBwcm9wb3NhbElEKQogICAgewogICAgICAgIHJldHVybiBuZXdQcm9wb3NhbChiZW5lZmljaWFyeSwgZXRoZXJBbW91bnQgKiAxIGV0aGVyLCBqb2JEZXNjcmlwdGlvbiwgdHJhbnNhY3Rpb25CeXRlY29kZSk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tQcm9wb3NhbENvZGUoCiAgICAgICAgdWludCBwcm9wb3NhbE51bWJlciwKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQgd2VpQW1vdW50LAogICAgICAgIGJ5dGVzIHRyYW5zYWN0aW9uQnl0ZWNvZGUKICAgICkKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wgY29kZUNoZWNrc091dCkKICAgIHsKICAgICAgICBQcm9wb3NhbCBzdG9yYWdlIHAgPSBwcm9wb3NhbHNbcHJvcG9zYWxOdW1iZXJdOwogICAgICAgIHJldHVybiBwLnByb3Bvc2FsSGFzaCA9PSBzaGEzKGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRyYW5zYWN0aW9uQnl0ZWNvZGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHZvdGUoCiAgICAgICAgdWludCBwcm9wb3NhbE51bWJlciwKICAgICAgICBib29sIHN1cHBvcnRzUHJvcG9zYWwKICAgICkKICAgICAgICBvbmx5U2hhcmVob2xkZXJzCiAgICAgICAgcmV0dXJucyAodWludCB2b3RlSUQpCiAgICB7CiAgICAgICAgUHJvcG9zYWwgc3RvcmFnZSBwID0gcHJvcG9zYWxzW3Byb3Bvc2FsTnVtYmVyXTsKICAgICAgICByZXF1aXJlKHAudm90ZWRbbXNnLnNlbmRlcl0gIT0gdHJ1ZSk7CgogICAgICAgIHZvdGVJRCA9IHAudm90ZXMubGVuZ3RoKys7CiAgICAgICAgcC52b3Rlc1t2b3RlSURdID0gVm90ZSh7aW5TdXBwb3J0OiBzdXBwb3J0c1Byb3Bvc2FsLCB2b3RlcjogbXNnLnNlbmRlcn0pOwogICAgICAgIHAudm90ZWRbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgIHAubnVtYmVyT2ZWb3RlcyA9IHZvdGVJRCArMTsKICAgICAgICBWb3RlZChwcm9wb3NhbE51bWJlciwgIHN1cHBvcnRzUHJvcG9zYWwsIG1zZy5zZW5kZXIpOwogICAgICAgIHJldHVybiB2b3RlSUQ7CiAgICB9CgogICAgZnVuY3Rpb24gZXhlY3V0ZVByb3Bvc2FsKHVpbnQgcHJvcG9zYWxOdW1iZXIsIGJ5dGVzIHRyYW5zYWN0aW9uQnl0ZWNvZGUpIHsKICAgICAgICBQcm9wb3NhbCBzdG9yYWdlIHAgPSBwcm9wb3NhbHNbcHJvcG9zYWxOdW1iZXJdOwoKICAgICAgICByZXF1aXJlKG5vdyA+IHAudm90aW5nRGVhZGxpbmUgJiYgIXAuZXhlY3V0ZWQgJiYgcC5wcm9wb3NhbEhhc2ggPT0gc2hhMyhwLnJlY2lwaWVudCwgcC5hbW91bnQsIHRyYW5zYWN0aW9uQnl0ZWNvZGUpKTsKCiAgICAgICAgdWludCBxdW9ydW0gPSAwOwogICAgICAgIHVpbnQgeWVhID0gMDsKICAgICAgICB1aW50IG5heSA9IDA7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8ICBwLnZvdGVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIFZvdGUgc3RvcmFnZSB2ID0gcC52b3Rlc1tpXTsKICAgICAgICAgICAgdWludCB2b3RlV2VpZ2h0ID0gc2hhcmVzVG9rZW5BZGRyZXNzLmJhbGFuY2VPZih2LnZvdGVyKTsKICAgICAgICAgICAgcXVvcnVtICs9IHZvdGVXZWlnaHQ7CiAgICAgICAgICAgIGlmICh2LmluU3VwcG9ydCkgewogICAgICAgICAgICAgICAgeWVhICs9IHZvdGVXZWlnaHQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBuYXkgKz0gdm90ZVdlaWdodDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmVxdWlyZShxdW9ydW0gPj0gbWluaW11bVF1b3J1bSk7CgogICAgICAgIGlmICh5ZWEgPiBuYXkgKSB7CiAgICAgICAgICAgIHAuZXhlY3V0ZWQgPSB0cnVlOwogICAgICAgICAgICByZXF1aXJlKHAucmVjaXBpZW50LmNhbGwudmFsdWUocC5hbW91bnQpKHRyYW5zYWN0aW9uQnl0ZWNvZGUpKTsKCiAgICAgICAgICAgIHAucHJvcG9zYWxQYXNzZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHAucHJvcG9zYWxQYXNzZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIFByb3Bvc2FsVGFsbGllZChwcm9wb3NhbE51bWJlciwgeWVhIC0gbmF5LCBxdW9ydW0sIHAucHJvcG9zYWxQYXNzZWQpOwogICAgfQp9'.
	

]
