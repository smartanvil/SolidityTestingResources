Class {
	#name : #SRT63cD1d8D592742F2157513B5e4510d46CA3F1376,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63cD1d8D592742F2157513B5e4510d46CA3F1376 >> base64 [
	^ ''.
	

]
