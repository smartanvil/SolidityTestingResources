Class {
	#name : #SRT15fEcCA27add3D28C55ff5b01644ae46edF15821,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15fEcCA27add3D28C55ff5b01644ae46edF15821 >> base64 [
	^ ''.
	

]
