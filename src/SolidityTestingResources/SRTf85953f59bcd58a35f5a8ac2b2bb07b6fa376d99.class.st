Class {
	#name : #SRTf85953f59bcd58a35f5a8ac2b2bb07b6fa376d99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf85953f59bcd58a35f5a8ac2b2bb07b6fa376d99 >> base64 [
	^ ''.
	

]
