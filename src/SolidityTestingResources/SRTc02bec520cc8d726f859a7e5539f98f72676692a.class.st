Class {
	#name : #SRTc02bec520cc8d726f859a7e5539f98f72676692a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc02bec520cc8d726f859a7e5539f98f72676692a >> base64 [
	^ ''.
	

]
