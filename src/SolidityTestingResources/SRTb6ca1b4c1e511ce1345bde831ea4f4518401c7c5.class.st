Class {
	#name : #SRTb6ca1b4c1e511ce1345bde831ea4f4518401c7c5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb6ca1b4c1e511ce1345bde831ea4f4518401c7c5 >> base64 [
	^ ''.
	

]
