Class {
	#name : #SRTaf55f3b7dc65c8f9577cf00c8c5ca7b6e8cc4433,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf55f3b7dc65c8f9577cf00c8c5ca7b6e8cc4433 >> base64 [
	^ ''.
	

]
