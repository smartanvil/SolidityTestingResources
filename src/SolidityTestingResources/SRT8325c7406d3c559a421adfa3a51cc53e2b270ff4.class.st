Class {
	#name : #SRT8325c7406d3c559a421adfa3a51cc53e2b270ff4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8325c7406d3c559a421adfa3a51cc53e2b270ff4 >> base64 [
	^ ''.
	

]
