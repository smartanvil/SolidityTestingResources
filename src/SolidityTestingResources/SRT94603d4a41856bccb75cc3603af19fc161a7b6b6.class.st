Class {
	#name : #SRT94603d4a41856bccb75cc3603af19fc161a7b6b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT94603d4a41856bccb75cc3603af19fc161a7b6b6 >> base64 [
	^ ''.
	

]
