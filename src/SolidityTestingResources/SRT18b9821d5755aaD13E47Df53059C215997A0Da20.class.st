Class {
	#name : #SRT18b9821d5755aaD13E47Df53059C215997A0Da20,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT18b9821d5755aaD13E47Df53059C215997A0Da20 >> base64 [
	^ ''.
	

]
