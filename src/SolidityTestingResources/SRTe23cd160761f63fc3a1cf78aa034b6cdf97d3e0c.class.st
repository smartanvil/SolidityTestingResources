Class {
	#name : #SRTe23cd160761f63fc3a1cf78aa034b6cdf97d3e0c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe23cd160761f63fc3a1cf78aa034b6cdf97d3e0c >> base64 [
	^ 'LyoKCk1haW5zdHJlZXQgTUlUcyBFeHBsYW5hdG9yeSBMYW5ndWFnZQoKRWFjaCBTdWJzY3JpYmVyIHRvIHRoZSBGdW5kIHdpbGwgZXhlY3V0ZSBhIHN1YnNjcmlwdGlvbiBhZ3JlZW1lbnQgYW5kIGFncmVlIHRoZQp0ZXJtcyBvZiBhIHBhcnRuZXJzaGlwIGFncmVlbWVudCByZWxhdGluZyB0byB0aGUgRnVuZC4gT24gYWNjZXB0YW5jZSBvZiBpdHMKc3Vic2NyaXB0aW9uJiMxNjA7YnkgdGhlIEZ1bmQsIGV4ZWN1dGlvbiBvZiB0aGUgcGFydG5lcnNoaXAgYWdyZWVtZW50IGFuZCBlbnRyeSBvbgp0aGUgRnVuZCdzIGxpbWl0ZWQgcGFydG5lciByZWNvcmRzLCBhIHN1YnNjcmliZXIgd2lsbCBiZWNvbWUgYSBMaW1pdGVkIFBhcnRuZXIKaW4gdGhlIEZ1bmQuCgpFYWNoIExpbWl0ZWQgUGFydG5lciB3aWxsIGJlIGlzc3VlZCB3aXRoIGEgY2VydGFpbiBudW1iZXIgb2YgVG9rZW5zIGJ5IHRoZSBGdW5kCmluIHJldHVybiBmb3IgaXRzIHN1YnNjcmlwdGlvbiBpbiB0aGUgRnVuZC4KCkxpbWl0ZWQgUGFydG5lcnMsIGFzIHBhcnQgb2YgdGhlIHN1YnNjcmlwdGlvbiBwcm9jZXNzLCB3aWxsIGhhdmUgcHJvdmlkZWQgdG8KdGhlIEZ1bmQgYWxsIG5lY2Vzc2FyeSBkdWUgZGlsaWdlbmNlIGFuZCAia25vdyB5b3VyIGNsaWVudCIgaW5mb3JtYXRpb24gdG8KZW5hYmxlIHRoZSBGdW5kIHRvIGRpc2NoYXJnZSBpdHMgcmVndWxhdG9yeSBvYmxpZ2F0aW9ucy4KCkFsdGhvdWdoIHRoZSBUb2tlbnMgaXNzdWVkIHRvIExpbWl0ZWQgUGFydG5lcnMgYXJlIG9wZXJhdGlvbmFsbHkgdHJhbnNmZXJhYmxlLAplaXRoZXIgcGVlci10by1wZWVyIG9yIHRob3VnaCBhIHZhcmlldHkgb2YgQmxvY2tjaGFpbi1lbmFibGVkIGV4Y2hhbmdlcywgaXQgaXMKb25seSB0aGUgYmVuZWZpY2lhbCBlbnRpdGxlbWVudC9vd25lcnNoaXAgb2YgdGhlIFRva2VucyB0aGF0IGlzIGNhcGFibGUgb2YgYmVpbmcKdHJhbnNmZXJyZWQgdXNpbmcgc3VjaCBwZWVyLXRvLXBlZXIgbmV0d29ya3Mgb3IgQmxvY2tjaGFpbiBleGNoYW5nZXMuCgpJdCBpcyBvbmx5IG9uY2UgYSBwZXJzb24gaXMgcmVnaXN0ZXJlZCBhcyBhIExpbWl0ZWQgUGFydG5lciBvZiB0aGUgRnVuZCB0aGF0CnN1Y2ggcGVyc29uIGJlY29tZXMgZnVsbHkgZW50aXRsZWQgdG8gdGhlIHJpZ2h0cyBhc3NvY2lhdGVkIHdpdGggdGhlIFRva2VuIGFuZAp0aGUgcmlnaHRzIG9mIGEgTGltaXRlZCBQYXJ0bmVyIGluIHRoZSBGdW5kLgoKSWYgYSBUcmFuc2ZlcmVlIHdpc2hlcyB0byBwZXJmZWN0IGl0cyBsZWdhbCBvd25lcnNoaXAgYXMgYSBMaW1pdGVkIFBhcnRuZXIgaW4KdGhlIEZ1bmQsIHRoZSBUcmFuc2ZlcmVlIG11c3QgcmVnaXN0ZXIgd2l0aCB0aGUgRnVuZCwgZXhlY3V0ZSBhIHN1YnNjcmlwdGlvbgphZ3JlZW1lbnQgYW5kL29yIHN1Y2ggb3RoZXIgZG9jdW1lbnRhdGlvbiBhcyB0aGUgZ2VuZXJhbCBwYXJ0bmVyIG9mIHRoZSBGdW5kCnNoYWxsIHJlcXVpcmUgYW5kIHByb3ZpZGUgYWxsIG5lY2Vzc2FyeSAia25vdyB5b3VyIGNsaWVudCIgYW5kIGR1ZSBkaWxpZ2VuY2UKaW5mb3JtYXRpb24gdGhhdCB3aWxsIHBlcm1pdCB0aGUgRnVuZCB0byByZWdpc3RlciB0aGUgVHJhbnNmZXJlZSBhcyBhIExpbWl0ZWQKUGFydG5lciBpbiB0aGUgRnVuZCBpbiBzdWJzdGl0dXRpb24gZm9yIHRoZSBUcmFuc2Zlcm9yIG9mIHRoZSBUb2tlbnMuCgpUaGUgcmVnaXN0ZXJlZCBMaW1pdGVkIFBhcnRuZXIgdG8gd2hpY2ggc3VjaCBUb2tlbiB3YXMgb3JpZ2luYWxseSBpc3N1ZWQgcmVtYWlucwp0aGUgbGVnYWwgaG9sZGVyIG9mIHRoZSBMaW1pdGVkIFBhcnRuZXIgaW50ZXJlc3QgaW4gdGhlIEZ1bmQgYW5kIHJldGFpbnMgdGhlCmVudGl0bGVtZW50IHRvIGFsbCBkaXN0cmlidXRpb25zIGFuZCBwcm9maXQgcmVhbGlzYXRpb24gaW4gcmVzcGVjdCBvZiB0aGUgVG9rZW4uJiMxNjA7ClRoZSBhcnJhbmdlbWVudHMgZ292ZXJuaW5nIHRoZSB0cmFuc2ZlciBvZiB0aGUgVG9rZW4gZnJvbSBUcmFuc2Zlcm9yIHRvClRyYW5zZmVyZWUgbWF5IG9ibGlnZSB0aGUgVHJhbnNmZXJvciB0byBhY2NvdW50IGZvciBhbnkgc3VjaCBiZW5lZml0cyB0byB0aGUKVHJhbnNmZXJlZSwgYnV0IHRoZSBGdW5kIGlzIG9ubHkgbGVnYWxseSBvYmxpZ2VkIHRvIGRlYWwgd2l0aCB0aGUgcmVnaXN0ZXJlZApMaW1pdGVkIFBhcnRuZXIgb2YgdGhlIEZ1bmQgdG8gd2hpY2ggdGhlIHJlbGV2YW50IFRva2VucyByZWxhdGUuCgpJdCBpcyB0aGVyZWZvcmUgaW5jdW1iZW50IG9uIGFueSBUcmFuc2ZlcmVlL3B1cmNoYXNlciBvZiBUb2tlbnMgdG8gcmVnaXN0ZXIgd2l0aAp0aGUgRnVuZCBhcyBhIExpbWl0ZWQgUGFydG5lciBhcyBzb29uIGFzIHBvc3NpYmxlLiYjMTYwOyBQbGVhc2UgY29udGFjdCB0aGUgR2VuZXJhbApQYXJ0bmVyIHRvIGRpc2N1c3MgdGhlIHJlcXVpcmVtZW50cyB0byBlZmZlY3Qgc3VjaCByZWdpc3RyYXRpb24uCgoqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuOTsKCmNvbnRyYWN0IEVSQzIwIHsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgTWFpbnN0cmVldFRva2VuCiAqLwpjb250cmFjdCBNYWluc3RyZWV0VG9rZW4gaXMgRVJDMjAgewogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gJ01haW5zdHJlZXQgVG9rZW4nOyAgICAgICAgICAgICAvL1RoZSBUb2tlbidzIG5hbWU6IGUuZy4gRGlnaXhEQU8gVG9rZW5zCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsgICAgICAgICAgICAgLy8gMVRva2VuICYjMTY4Oz0gMSQgKDFFVEggJiMxNjg7PSAxMCQpCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdNSVQnOyAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlLmcuIFJFUAogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ01JVF8wLjEnOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgb3duZXJNSVQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbE1JVDsKICAgIHVpbnQgcHVibGljIHN0YXJ0OwoKICAgIGFkZHJlc3MgcHVibGljIG1haW5zdHJlZXRDcm93ZGZ1bmQ7CgogICAgYWRkcmVzcyBwdWJsaWMgaW50ZWxsaXN5czsKCiAgICBib29sIHB1YmxpYyB0ZXN0aW5nOwoKICAgIG1vZGlmaWVyIGZyb21Dcm93ZGZ1bmQoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gbWFpbnN0cmVldENyb3dkZnVuZCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0FjdGl2ZSgpIHsKICAgICAgICBpZiAoYmxvY2sudGltZXN0YW1wIDwgc3RhcnQpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNOb3RBY3RpdmUoKSB7CiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIGJsb2NrLnRpbWVzdGFtcCA+PSBzdGFydCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciByZWNpcGllbnRJc1ZhbGlkKGFkZHJlc3MgcmVjaXBpZW50KSB7CiAgICAgICAgaWYgKHJlY2lwaWVudCA9PSAwIHx8IHJlY2lwaWVudCA9PSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGFsbG93YW5jZUlzWmVybyhhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHsKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzJiMxODA7CiAgICAgICAgLy8gYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIGlmICgodmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bc3BlbmRlcl0gIT0gMCkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENvbnN0cnVjdG9yLgogICAgICogQHBhcmFtIF9tYWluc3RyZWV0Q3Jvd2RmdW5kIEFkZHJlc3Mgb2YgY3Jvd2RmdW5kIGNvbnRyYWN0LgogICAgICogQHBhcmFtIF9pbnRlbGxpc3lzIEFkZHJlc3MgdG8gcmVjZWl2ZSBpbnRlbGxpc3lzJyB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX3N0YXJ0IFRpbWVzdGFtcCB3aGVuIHRoZSB0b2tlbiBiZWNvbWVzIGFjdGl2ZS4KICAgICAqLwogICAgZnVuY3Rpb24gTWFpbnN0cmVldFRva2VuKGFkZHJlc3MgX21haW5zdHJlZXRDcm93ZGZ1bmQsIGFkZHJlc3MgX2ludGVsbGlzeXMsIHVpbnQgX3N0YXJ0LCBib29sIF90ZXN0aW5nKSB7CiAgICAgICAgbWFpbnN0cmVldENyb3dkZnVuZCA9IF9tYWluc3RyZWV0Q3Jvd2RmdW5kOwogICAgICAgIGludGVsbGlzeXMgPSBfaW50ZWxsaXN5czsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICB0ZXN0aW5nID0gX3Rlc3Rpbmc7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFkZCB0byB0b2tlbiBiYWxhbmNlIG9uIGFkZHJlc3MuIE11c3QgYmUgZnJvbSBjcm93ZGZ1bmQuCiAgICAgKiBAcGFyYW0gcmVjaXBpZW50IEFkZHJlc3MgdG8gYWRkIHRva2VucyB0by4KICAgICAqIEByZXR1cm4gTUlUIEFtb3VudCBvZiBNSVQgdG8gYWRkLgogICAgICovCiAgICBmdW5jdGlvbiBhZGRUb2tlbnMoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgTUlUKSBleHRlcm5hbCBpc05vdEFjdGl2ZSBmcm9tQ3Jvd2RmdW5kIHsKICAgICAgICBvd25lck1JVFtyZWNpcGllbnRdICs9IE1JVDsKICAgICAgICB1aW50IGludGVsbGlzeXNNSVQgPSBNSVQgLyAxMDsKICAgICAgICBvd25lck1JVFtpbnRlbGxpc3lzXSArPSBpbnRlbGxpc3lzTUlUOwogICAgICAgIHRvdGFsTUlUICs9IE1JVCArIGludGVsbGlzeXNNSVQ7CiAgICAgICAgVHJhbnNmZXIoMHgwLCByZWNpcGllbnQsIE1JVCk7CiAgICAgICAgVHJhbnNmZXIoMHgwLCBpbnRlbGxpc3lzLCBpbnRlbGxpc3lzTUlUKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCB0b3RhbFN1cHBseSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxNSVQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEltcGxlbWVudHMgRVJDMjAgYmFsYW5jZU9mKCkKICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBiYWxhbmNlID0gb3duZXJNSVRbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCB0cmFuc2ZlcigpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaXNBY3RpdmUgcmVjaXBpZW50SXNWYWxpZChfdG8pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChvd25lck1JVFttc2cuc2VuZGVyXSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgb3duZXJNSVRbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBvd25lck1JVFtfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbXBsZW1lbnRzIEVSQzIwIHRyYW5zZmVyRnJvbSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlzQWN0aXZlIHJlY2lwaWVudElzVmFsaWQoX3RvKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIG93bmVyTUlUW19mcm9tXSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgb3duZXJNSVRbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIG93bmVyTUlUW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSW1wbGVtZW50cyBFUkMyMCBhcHByb3ZlKCkKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXNBY3RpdmUgYWxsb3dhbmNlSXNaZXJvKF9zcGVuZGVyLCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbXBsZW1lbnRzIEVSQzIwIGFsbG93YW5jZSgpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZW1haW5pbmcgPSBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBNYWluc3RyZWV0Q3Jvd2RmdW5kCiAqLwpjb250cmFjdCBNYWluc3RyZWV0Q3Jvd2RmdW5kIHsKCiAgICB1aW50IHB1YmxpYyBzdGFydDsKICAgIHVpbnQgcHVibGljIGVuZDsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBzZW5kZXJFVEg7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBzZW5kZXJNSVQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByZWNpcGllbnRFVEg7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByZWNpcGllbnRNSVQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByZWNpcGllbnRFeHRyYU1JVDsKCiAgICB1aW50IHB1YmxpYyB0b3RhbEVUSDsKICAgIHVpbnQgcHVibGljIGxpbWl0RVRIOwoKICAgIHVpbnQgcHVibGljIGJvbnVzMVN0YXJ0RVRIOwogICAgdWludCBwdWJsaWMgYm9udXMyU3RhcnRFVEg7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgd2hpdGVsaXN0ZWRBZGRyZXNzZXM7CgogICAgYWRkcmVzcyBwdWJsaWMgZXhpdEFkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwoKICAgIE1haW5zdHJlZXRUb2tlbiBwdWJsaWMgbWFpbnN0cmVldFRva2VuOwoKICAgIGV2ZW50IE1JVFB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgaW5kZXhlZCByZWNpcGllbnQsIHVpbnQgRVRILCB1aW50IE1JVCk7CgogICAgbW9kaWZpZXIgc2FsZUFjdGl2ZSgpIHsKICAgICAgICBpZiAoYWRkcmVzcyhtYWluc3RyZWV0VG9rZW4pID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmIChibG9jay50aW1lc3RhbXAgPCBzdGFydCB8fCBibG9jay50aW1lc3RhbXAgPj0gZW5kKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBpZiAodG90YWxFVEggKyBtc2cudmFsdWUgPiBsaW1pdEVUSCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBoYXNWYWx1ZSgpIHsKICAgICAgICBpZiAobXNnLnZhbHVlID09IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgc2VuZGVySXNXaGl0ZWxpc3RlZCgpIHsKICAgICAgICBpZiAod2hpdGVsaXN0ZWRBZGRyZXNzZXNbbXNnLnNlbmRlcl0gIT0gdHJ1ZSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciByZWNpcGllbnRJc1ZhbGlkKGFkZHJlc3MgcmVjaXBpZW50KSB7CiAgICAgICAgaWYgKHJlY2lwaWVudCA9PSAwIHx8IHJlY2lwaWVudCA9PSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzQ3JlYXRvcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjcmVhdG9yKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRva2VuQ29udHJhY3ROb3RTZXQoKSB7CiAgICAgICAgaWYgKGFkZHJlc3MobWFpbnN0cmVldFRva2VuKSAhPSAwKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDb25zdHJ1Y3Rvci4KICAgICAqIEBwYXJhbSBfc3RhcnQgVGltZXN0YW1wIG9mIHdoZW4gdGhlIGNyb3dkc2FsZSB3aWxsIHN0YXJ0LgogICAgICogQHBhcmFtIF9lbmQgVGltZXN0YW1wIG9mIHdoZW4gdGhlIGNyb3dkc2FsZSB3aWxsIGVuZC4KICAgICAqIEBwYXJhbSBfbGltaXRFVEggTWF4aW11bSBhbW91bnQgb2YgRVRIIHRoYXQgY2FuIGJlIHNlbnQgdG8gdGhlIGNvbnRyYWN0IGluIHRvdGFsLiBEZW5vbWluYXRlZCBpbiB3ZWkuCiAgICAgKiBAcGFyYW0gX2JvbnVzMVN0YXJ0RVRIIEFtb3VudCBvZiBFdGhlciAoZGVub21pbmF0ZWQgaW4gd2VpKSB0aGF0IGlzIHJlcXVpcmVkIHRvIHF1YWxpZnkgZm9yIHRoZSBmaXJzdCBib251cy4KICAgICAqIEBwYXJhbSBfYm9udXMxU3RhcnRFVEggQW1vdW50IG9mIEV0aGVyIChkZW5vbWluYXRlZCBpbiB3ZWkpIHRoYXQgaXMgcmVxdWlyZWQgdG8gcXVhbGlmeSBmb3IgdGhlIHNlY29uZCBib251cy4KICAgICAqIEBwYXJhbSBfZXhpdEFkZHJlc3MgQWRkcmVzcyB0aGF0IGFsbCBFVEggc2hvdWxkIGJlIGZvcndhcmRlZCB0by4KICAgICAqIEBwYXJhbSB3aGl0ZWxpc3QxIEZpcnN0IGFkZHJlc3MgdGhhdCBjYW4gc2VuZCBFVEguCiAgICAgKiBAcGFyYW0gd2hpdGVsaXN0MiBTZWNvbmQgYWRkcmVzcyB0aGF0IGNhbiBzZW5kIEVUSC4KICAgICAqIEBwYXJhbSB3aGl0ZWxpc3QzIFRoaXJkIGFkZHJlc3MgdGhhdCBjYW4gc2VuZCBFVEguCiAgICAgKi8KICAgIGZ1bmN0aW9uIE1haW5zdHJlZXRDcm93ZGZ1bmQodWludCBfc3RhcnQsIHVpbnQgX2VuZCwgdWludCBfbGltaXRFVEgsIHVpbnQgX2JvbnVzMVN0YXJ0RVRILCB1aW50IF9ib251czJTdGFydEVUSCwgYWRkcmVzcyBfZXhpdEFkZHJlc3MsIGFkZHJlc3Mgd2hpdGVsaXN0MSwgYWRkcmVzcyB3aGl0ZWxpc3QyLCBhZGRyZXNzIHdoaXRlbGlzdDMpIHsKICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgICAgICBzdGFydCA9IF9zdGFydDsKICAgICAgICBlbmQgPSBfZW5kOwogICAgICAgIGxpbWl0RVRIID0gX2xpbWl0RVRIOwogICAgICAgIGJvbnVzMVN0YXJ0RVRIID0gX2JvbnVzMVN0YXJ0RVRIOwogICAgICAgIGJvbnVzMlN0YXJ0RVRIID0gX2JvbnVzMlN0YXJ0RVRIOwoKICAgICAgICB3aGl0ZWxpc3RlZEFkZHJlc3Nlc1t3aGl0ZWxpc3QxXSA9IHRydWU7CiAgICAgICAgd2hpdGVsaXN0ZWRBZGRyZXNzZXNbd2hpdGVsaXN0Ml0gPSB0cnVlOwogICAgICAgIHdoaXRlbGlzdGVkQWRkcmVzc2VzW3doaXRlbGlzdDNdID0gdHJ1ZTsKICAgICAgICBleGl0QWRkcmVzcyA9IF9leGl0QWRkcmVzczsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0IHRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdC4gTXVzdCBiZSBjYWxsZWQgYnkgY3JlYXRvciBvZiB0aGlzLiBDYW4gb25seSBiZSBzZXQgb25jZS4KICAgICAqIEBwYXJhbSBfbWFpbnN0cmVldFRva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0LgogICAgICovCiAgICBmdW5jdGlvbiBzZXRUb2tlbkNvbnRyYWN0KE1haW5zdHJlZXRUb2tlbiBfbWFpbnN0cmVldFRva2VuKSBleHRlcm5hbCBpc0NyZWF0b3IgdG9rZW5Db250cmFjdE5vdFNldCB7CiAgICAgICAgbWFpbnN0cmVldFRva2VuID0gX21haW5zdHJlZXRUb2tlbjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRm9yd2FyZCBFdGhlciB0byB0aGUgZXhpdCBhZGRyZXNzLiBTdG9yZSBhbGwgRVRIIGFuZCBNSVQgaW5mb3JtYXRpb24gaW4gcHVibGljIHN0YXRlIGFuZCBsb2dzLgogICAgICogQHBhcmFtIHJlY2lwaWVudCBBZGRyZXNzIHRoYXQgdG9rZW5zIHNob3VsZCBiZSBhdHRyaWJ1dGVkIHRvLgogICAgICogQHJldHVybiBNSVQgQW1vdW50IG9mIE1JVCBwdXJjaGFzZWQuIFRoaXMgZG9lcyBub3QgaW5jbHVkZSB0aGUgcGVyLXJlY2lwaWVudCBxdWFudGl0eSBib251cy4KICAgICAqLwogICAgZnVuY3Rpb24gcHVyY2hhc2VNSVQoYWRkcmVzcyByZWNpcGllbnQpIGV4dGVybmFsIHNlbmRlcklzV2hpdGVsaXN0ZWQgcGF5YWJsZSBzYWxlQWN0aXZlIGhhc1ZhbHVlIHJlY2lwaWVudElzVmFsaWQocmVjaXBpZW50KSByZXR1cm5zICh1aW50IGluY3JlYXNlTUlUKSB7CgogICAgICAgIC8vIEF0dGVtcHQgdG8gc2VuZCB0aGUgRVRIIHRvIHRoZSBleGl0IGFkZHJlc3MuCiAgICAgICAgaWYgKCFleGl0QWRkcmVzcy5zZW5kKG1zZy52YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgRVRIIGFtb3VudHMuCiAgICAgICAgc2VuZGVyRVRIW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsKICAgICAgICByZWNpcGllbnRFVEhbcmVjaXBpZW50XSArPSBtc2cudmFsdWU7CiAgICAgICAgdG90YWxFVEggKz0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBDYWxjdWxhdGUgTUlUIHB1cmNoYXNlZCBkaXJlY3RseSBpbiB0aGlzIHRyYW5zYWN0aW9uLgogICAgICAgIHVpbnQgTUlUID0gbXNnLnZhbHVlICogMTI7ICAgLy8gJDEgLyBNSVQgYmFzZWQgb24gJDEyIC8gRVRIIHZhbHVlCgogICAgICAgIC8vIENhbGN1bGF0ZSB0aW1lLWJhc2VkIGJvbnVzLgogICAgICAgIGlmIChibG9jay50aW1lc3RhbXAgLSBzdGFydCA8IDIgd2Vla3MpIHsKICAgICAgICAgICAgTUlUICs9IE1JVCAvIDEwOyAgICAvLyAxMCUgYm9udXMKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wIC0gc3RhcnQgPCA1IHdlZWtzKSB7CiAgICAgICAgICAgIE1JVCArPSBNSVQgLyAyMDsgICAgLy8gNSUgYm9udXMKICAgICAgICB9CgogICAgICAgIC8vIFJlY29yZCBkaXJlY3RseS1wdXJjaGFzZWQgTUlULgogICAgICAgIHNlbmRlck1JVFttc2cuc2VuZGVyXSArPSBNSVQ7CiAgICAgICAgcmVjaXBpZW50TUlUW3JlY2lwaWVudF0gKz0gTUlUOwoKICAgICAgICAvLyBTdG9yZSBwcmV2aW91cyB2YWx1ZS1iYXNlZCBib251cyBmb3IgdGhpcyBhZGRyZXNzLgogICAgICAgIHVpbnQgb2xkRXh0cmEgPSByZWNpcGllbnRFeHRyYU1JVFtyZWNpcGllbnRdOwoKICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHZhbHVlLWJhc2VkIGJvbnVzLgogICAgICAgIGlmIChyZWNpcGllbnRFVEhbcmVjaXBpZW50XSA+PSBib251czJTdGFydEVUSCkgewogICAgICAgICAgICByZWNpcGllbnRFeHRyYU1JVFtyZWNpcGllbnRdID0gKHJlY2lwaWVudE1JVFtyZWNpcGllbnRdICogNzUpIC8gMTAwMDsgICAgICAvLyA3LjUlIGJvbnVzCiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKHJlY2lwaWVudEVUSFtyZWNpcGllbnRdID49IGJvbnVzMVN0YXJ0RVRIKSB7CiAgICAgICAgICAgIHJlY2lwaWVudEV4dHJhTUlUW3JlY2lwaWVudF0gPSAocmVjaXBpZW50TUlUW3JlY2lwaWVudF0gKiAzNzUpIC8gMTAwMDA7ICAgICAgLy8gMy43NSUgYm9udXMKICAgICAgICB9CgogICAgICAgIC8vIENhbGN1bGF0ZSBNSVQgaW5jcmVhc2UgZm9yIHRoaXMgYWRkcmVzcyBmcm9tIHRoaXMgdHJhbnNhY3Rpb24uCiAgICAgICAgaW5jcmVhc2VNSVQgPSBNSVQgKyAocmVjaXBpZW50RXh0cmFNSVRbcmVjaXBpZW50XSAtIG9sZEV4dHJhKTsKCiAgICAgICAgLy8gVGVsbCB0aGUgdG9rZW4gY29udHJhY3QgYWJvdXQgdGhlIGluY3JlYXNlLgogICAgICAgIG1haW5zdHJlZXRUb2tlbi5hZGRUb2tlbnMocmVjaXBpZW50LCBpbmNyZWFzZU1JVCk7CgogICAgICAgIC8vIExvZyB0aGlzIHB1cmNoYXNlLgogICAgICAgIE1JVFB1cmNoYXNlKG1zZy5zZW5kZXIsIHJlY2lwaWVudCwgbXNnLnZhbHVlLCBpbmNyZWFzZU1JVCk7CiAgICB9Cgp9'.
	

]
