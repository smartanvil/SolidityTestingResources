Class {
	#name : #SRT83b5c924b74e0dc12386fa110c28faa1efedb07b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT83b5c924b74e0dc12386fa110c28faa1efedb07b >> base64 [
	^ ''.
	

]
