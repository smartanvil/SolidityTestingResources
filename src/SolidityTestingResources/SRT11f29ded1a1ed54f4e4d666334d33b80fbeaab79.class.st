Class {
	#name : #SRT11f29ded1a1ed54f4e4d666334d33b80fbeaab79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT11f29ded1a1ed54f4e4d666334d33b80fbeaab79 >> base64 [
	^ ''.
	

]
