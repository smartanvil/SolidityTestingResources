Class {
	#name : #SRT146e59f69a68b645367bdc94f3855df0d8214f4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT146e59f69a68b645367bdc94f3855df0d8214f4d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgoKVGVuWCBCdXllcgo9PT09PT09PT09PT09PT09PT09PT09PT0KCkJ1eXMgVGVuWCB0b2tlbnMgZnJvbSB0aGUgY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLgpBdXRob3I6IC91L0NpbnRpeAoKKi8KCi8vIEVSQzIwIEludGVyZmFjZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi8vIFdlbGwsIGFsbW9zdC4gIFBBWSB0b2tlbnMgdGhyb3cgb24gdHJhbnNmZXIgZmFpbHVyZSBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZS4KY29udHJhY3QgRVJDMjAgewogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOwp9CgovLyBJbnRlcmZhY2UgdG8gVGVuWCBJQ08gQ29udHJhY3QKY29udHJhY3QgTWFpblNhbGUgewogIGFkZHJlc3MgcHVibGljIG11bHRpc2lnVmF1bHQ7CiAgdWludCBwdWJsaWMgYWx0RGVwb3NpdHM7CiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKGFkZHJlc3MgcmVjaXBpZW50KSBwYXlhYmxlOwp9Cgpjb250cmFjdCBUZW5YQnV5ZXIgewogIC8vIFN0b3JlIHRoZSBhbW91bnQgb2YgRVRIIGRlcG9zaXRlZCBieSBlYWNoIGFjY291bnQuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7CiAgLy8gU3RvcmUgd2hldGhlciBvciBub3QgZWFjaCBhY2NvdW50IHdvdWxkIGhhdmUgbWFkZSBpdCBpbnRvIHRoZSBjcm93ZHNhbGUuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgY2hlY2tlZF9pbjsKICAvLyBCb3VudHkgZm9yIGV4ZWN1dGluZyBidXkuCiAgdWludDI1NiBwdWJsaWMgYm91bnR5OwogIC8vIFRyYWNrIHdoZXRoZXIgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2VucyB5ZXQuCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsKICAvLyBSZWNvcmQgdGhlIHRpbWUgdGhlIGNvbnRyYWN0IGJvdWdodCB0aGUgdG9rZW5zLgogIHVpbnQgcHVibGljIHRpbWVfYm91Z2h0OwogIC8vIEVtZXJnZW5jeSBraWxsIHN3aXRjaCBpbiBjYXNlIGEgY3JpdGljYWwgYnVnIGlzIGZvdW5kLgogIGJvb2wgcHVibGljIGtpbGxfc3dpdGNoOwogIAogIC8vIEhhcmQgQ2FwIG9mIFRlblggQ3Jvd2RzYWxlCiAgdWludCBoYXJkY2FwID0gMjAwMDAwIGV0aGVyOwogIC8vIFJhdGlvIG9mIFBBWSB0b2tlbnMgcmVjZWl2ZWQgdG8gRVRIIGNvbnRyaWJ1dGVkICgzNTAgKyAyMCUgZmlyc3QtZGF5IGJvbnVzKQogIHVpbnQgcGF5X3Blcl9ldGggPSA0MjA7CiAgCiAgLy8gVGhlIFRlblggVG9rZW4gU2FsZSBhZGRyZXNzLgogIE1haW5TYWxlIHB1YmxpYyBzYWxlID0gTWFpblNhbGUoMHhkNDNEMDlFYzFiQzVlNTdDOEYzRDBjNjQwMjBkNDAzYjA0YzdmNzgzKTsKICAvLyBUZW5YIFBBWSBUb2tlbiBDb250cmFjdCBhZGRyZXNzLgogIEVSQzIwIHB1YmxpYyB0b2tlbiA9IEVSQzIwKDB4Qjk3MDQ4NjI4REI2QjY2MUQ0QzJhQTgzM2U5NURiZTFBOTA1QjI4MCk7CiAgLy8gVGhlIGRldmVsb3BlciBhZGRyZXNzLgogIGFkZHJlc3MgZGV2ZWxvcGVyID0gMHgwMDBGYjgzNjk2NzdiMzA2NWRFNTgyMWE4NkJjOTU1MWQ1ZTVFQWI5OwogIAogIC8vIEFsbG93cyB0aGUgZGV2ZWxvcGVyIHRvIHNodXQgZG93biBldmVyeXRoaW5nIGV4Y2VwdCB3aXRoZHJhd2FscyBpbiBlbWVyZ2VuY2llcy4KICBmdW5jdGlvbiBhY3RpdmF0ZV9raWxsX3N3aXRjaCgpIHsKICAgIC8vIE9ubHkgYWxsb3cgdGhlIGRldmVsb3BlciB0byBhY3RpdmF0ZSB0aGUga2lsbCBzd2l0Y2guCiAgICBpZiAobXNnLnNlbmRlciAhPSBkZXZlbG9wZXIpIHRocm93OwogICAgLy8gSXJyZXZlcnNpYmx5IGFjdGl2YXRlIHRoZSBraWxsIHN3aXRjaC4KICAgIGtpbGxfc3dpdGNoID0gdHJ1ZTsKICB9CiAgCiAgLy8gV2l0aGRyYXdzIGFsbCBFVEggZGVwb3NpdGVkIG9yIFBBWSBwdXJjaGFzZWQgYnkgdGhlIHNlbmRlci4KICBmdW5jdGlvbiB3aXRoZHJhdygpewogICAgLy8gSWYgY2FsbGVkIGJlZm9yZSB0aGUgSUNPLCBjYW5jZWwgY2FsbGVyJ3MgcGFydGljaXBhdGlvbiBpbiB0aGUgc2FsZS4KICAgIGlmICghYm91Z2h0X3Rva2VucykgewogICAgICAvLyBTdG9yZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gd2l0aGRyYXdhbCBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZS4KICAgICAgdWludCBldGhfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgIC8vIFVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gc2VuZGluZyBFVEggdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAvLyBSZXR1cm4gdGhlIHVzZXIncyBmdW5kcy4gIFRocm93cyBvbiBmYWlsdXJlIHRvIHByZXZlbnQgbG9zcyBvZiBmdW5kcy4KICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhfYW1vdW50KTsKICAgIH0KICAgIC8vIFdpdGhkcmF3IHRoZSBzZW5kZXIncyB0b2tlbnMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IHB1cmNoYXNlZCB0aGVtLgogICAgZWxzZSB7CiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgUEFZIGJhbGFuY2UgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUgKDEgRVRIV2VpIC0+IDQyMCBQQVlXZWkpLgogICAgICB1aW50IHBheV9hbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXSAqIHBheV9wZXJfZXRoOwogICAgICAvLyBVcGRhdGUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHNlbmRpbmcgUEFZIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgICAgLy8gTm8gZmVlIGZvciB3aXRoZHJhd2luZyBpZiB0aGUgdXNlciB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlIGFsb25lLgogICAgICB1aW50IGZlZSA9IDA7CiAgICAgIC8vIDElIGZlZSBpZiB0aGUgdXNlciBkaWRuJ3QgY2hlY2sgaW4gZHVyaW5nIHRoZSBjcm93ZHNhbGUuCiAgICAgIGlmICghY2hlY2tlZF9pblttc2cuc2VuZGVyXSkgewogICAgICAgIGZlZSA9IHBheV9hbW91bnQgLyAxMDA7CiAgICAgIH0KICAgICAgLy8gU2VuZCB0aGUgZnVuZHMuICBUaHJvd3Mgb24gZmFpbHVyZSB0byBwcmV2ZW50IGxvc3Mgb2YgZnVuZHMuCiAgICAgIHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHBheV9hbW91bnQgLSBmZWUpOwogICAgICB0b2tlbi50cmFuc2ZlcihkZXZlbG9wZXIsIGZlZSk7CiAgICB9CiAgfQogIAogIC8vIEFsbG93IGFueW9uZSB0byBjb250cmlidXRlIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4KICBmdW5jdGlvbiBhZGRfdG9fYm91bnR5KCkgcGF5YWJsZSB7CiAgICAvLyBEaXNhbGxvdyBhZGRpbmcgdG8gYm91bnR5IGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4KICAgIGlmIChraWxsX3N3aXRjaCkgdGhyb3c7CiAgICAvLyBEaXNhbGxvdyBhZGRpbmcgdG8gdGhlIGJvdW50eSBpZiBjb250cmFjdCBoYXMgYWxyZWFkeSBib3VnaHQgdGhlIHRva2Vucy4KICAgIGlmIChib3VnaHRfdG9rZW5zKSB0aHJvdzsKICAgIC8vIFVwZGF0ZSBib3VudHkgdG8gaW5jbHVkZSByZWNlaXZlZCBhbW91bnQuCiAgICBib3VudHkgKz0gbXNnLnZhbHVlOwogIH0KICAKICAvLyBCdXlzIHRva2VucyBpbiB0aGUgY3Jvd2RzYWxlIGFuZCByZXdhcmRzIHRoZSBjYWxsZXIsIGNhbGxhYmxlIGJ5IGFueW9uZS4KICBmdW5jdGlvbiBidXkoKXsKICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0b2tlbnMuCiAgICBpZiAoYm91Z2h0X3Rva2VucykgcmV0dXJuOwogICAgLy8gRGlzYWxsb3cgYnV5aW5nIGludG8gdGhlIGNyb3dkc2FsZSBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93OwogICAgLy8gUmVjb3JkIHRoYXQgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2Vucy4KICAgIGJvdWdodF90b2tlbnMgPSB0cnVlOwogICAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4KICAgIHRpbWVfYm91Z2h0ID0gbm93OwogICAgLy8gVHJhbnNmZXIgYWxsIHRoZSBmdW5kcyAobGVzcyB0aGUgYm91bnR5KSB0byB0aGUgVGVuWCBjcm93ZHNhbGUgY29udHJhY3QKICAgIC8vIHRvIGJ1eSB0b2tlbnMuICBUaHJvd3MgaWYgdGhlIGNyb3dkc2FsZSBoYXNuJ3Qgc3RhcnRlZCB5ZXQgb3IgaGFzCiAgICAvLyBhbHJlYWR5IGNvbXBsZXRlZCwgcHJldmVudGluZyBsb3NzIG9mIGZ1bmRzLgogICAgc2FsZS5jcmVhdGVUb2tlbnMudmFsdWUodGhpcy5iYWxhbmNlIC0gYm91bnR5KShhZGRyZXNzKHRoaXMpKTsKICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4KICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYm91bnR5KTsKICB9CiAgCiAgLy8gQSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRoZSBkZWZhdWx0IGZ1bmN0aW9uLCBhbGxvd2luZyBjb250cmFjdHMgdG8gaW50ZXJhY3QuCiAgZnVuY3Rpb24gZGVmYXVsdF9oZWxwZXIoKSBwYXlhYmxlIHsKICAgIC8vIFRyZWF0IDAgRVRIIHRyYW5zYWN0aW9ucyBhcyBjaGVjayBpbnMgYW5kIHdpdGhkcmF3YWwgcmVxdWVzdHMuCiAgICBpZiAobXNnLnZhbHVlID09IDApIHsKICAgICAgLy8gQ2hlY2sgaW4gZHVyaW5nIHRoZSBib251cyBwZXJpb2QuCiAgICAgIGlmIChib3VnaHRfdG9rZW5zICYmIChub3cgPCB0aW1lX2JvdWdodCArIDEgZGF5cykpIHsKICAgICAgICAvLyBPbmx5IGFsbG93IGNoZWNraW5nIGluIGJlZm9yZSB0aGUgY3Jvd2RzYWxlIGhhcyByZWFjaGVkIHRoZSBjYXAuCiAgICAgICAgaWYgKHNhbGUubXVsdGlzaWdWYXVsdCgpLmJhbGFuY2UgKyBzYWxlLmFsdERlcG9zaXRzKCkgPiBoYXJkY2FwKSB0aHJvdzsKICAgICAgICAvLyBNYXJrIHVzZXIgYXMgY2hlY2tlZCBpbiwgbWVhbmluZyB0aGV5IHdvdWxkIGhhdmUgYmVlbiBhYmxlIHRvIGVudGVyIGFsb25lLgogICAgICAgIGNoZWNrZWRfaW5bbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICB9CiAgICAgIC8vIFdpdGhkcmF3IGZ1bmRzIGlmIHRoZSBjcm93ZHNhbGUgaGFzbid0IGJlZ3VuIHlldCBvciBpZiB0aGUgYm9udXMgcGVyaW9kIGlzIG92ZXIuCiAgICAgIGVsc2UgewogICAgICAgIHdpdGhkcmF3KCk7CiAgICAgIH0KICAgIH0KICAgIC8vIERlcG9zaXQgdGhlIHVzZXIncyBmdW5kcyBmb3IgdXNlIGluIHB1cmNoYXNpbmcgdG9rZW5zLgogICAgZWxzZSB7CiAgICAgIC8vIERpc2FsbG93IGRlcG9zaXRzIGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4KICAgICAgaWYgKGtpbGxfc3dpdGNoKSB0aHJvdzsKICAgICAgLy8gT25seSBhbGxvdyBkZXBvc2l0cyBpZiB0aGUgY29udHJhY3QgaGFzbid0IGFscmVhZHkgcHVyY2hhc2VkIHRoZSB0b2tlbnMuCiAgICAgIGlmIChib3VnaHRfdG9rZW5zKSB0aHJvdzsKICAgICAgLy8gVXBkYXRlIHJlY29yZHMgb2YgZGVwb3NpdGVkIEVUSCB0byBpbmNsdWRlIHRoZSByZWNlaXZlZCBhbW91bnQuCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsKICAgIH0KICB9CiAgCiAgLy8gRGVmYXVsdCBmdW5jdGlvbi4gIENhbGxlZCB3aGVuIGEgdXNlciBzZW5kcyBFVEggdG8gdGhlIGNvbnRyYWN0LgogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgLy8gRGVsZWdhdGUgdG8gdGhlIGhlbHBlciBmdW5jdGlvbi4KICAgIGRlZmF1bHRfaGVscGVyKCk7CiAgfQp9'.
	

]
