Class {
	#name : #SRT0d36c772d7b1f5cef410897ca98c07f1be4c810a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d36c772d7b1f5cef410897ca98c07f1be4c810a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBPd25hYmxlIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBhZGRyZXNzIG5ld093bmVyOwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKF9uZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG5ld093bmVyID0gX25ld093bmVyOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBuZXdPd25lcikgewogICAgICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKY29udHJhY3QgRVJDMjAgaXMgT3duYWJsZSB7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZDsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgaW5pdGlhbFN1cHBseTsKICAgIGJvb2wgcHVibGljIGxvY2tlZDsKICAgIHVpbnQyNTYgcHVibGljIGNyZWF0aW9uQmxvY2s7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IG51bXdvcmRzKSB7CiAgICAgICAgYXNzZXJ0KG1zZy5kYXRhLmxlbmd0aCA9PSBudW13b3JkcyAqIDMyICsgNCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIEVSQzIwKAogICAgdWludDI1NiBfaW5pdGlhbFN1cHBseSwKICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICBzdHJpbmcgdG9rZW5TeW1ib2wsCiAgICBib29sIHRyYW5zZmVyQWxsU3VwcGx5VG9Pd25lciwKICAgIGJvb2wgX2xvY2tlZAogICAgKSB7CiAgICAgICAgc3RhbmRhcmQgPSAnRVJDMjAgMC4xJzsKCiAgICAgICAgaW5pdGlhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OwoKICAgICAgICBpZiAodHJhbnNmZXJBbGxTdXBwbHlUb093bmVyKSB7CiAgICAgICAgICAgIHNldEJhbGFuY2UobXNnLnNlbmRlciwgaW5pdGlhbFN1cHBseSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBzZXRCYWxhbmNlKHRoaXMsIGluaXRpYWxTdXBwbHkpOwogICAgICAgIH0KCiAgICAgICAgbmFtZSA9IHRva2VuTmFtZTsKICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsKICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOwogICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGxvY2tlZCA9IF9sb2NrZWQ7CiAgICAgICAgY3JlYXRpb25CbG9jayA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICAvKiBpbnRlcm5hbCBiYWxhbmNlcyAqLwoKICAgIGZ1bmN0aW9uIHNldEJhbGFuY2UoYWRkcmVzcyBob2xkZXIsIHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgYmFsYW5jZXNbaG9sZGVyXSA9IGFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckludGVybmFsKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAodmFsdWUgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPCB2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoYmFsYW5jZXNbX3RvXSArIHZhbHVlIDw9IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgc2V0QmFsYW5jZShfZnJvbSwgYmFsYW5jZXNbX2Zyb21dIC0gdmFsdWUpOwogICAgICAgIHNldEJhbGFuY2UoX3RvLCBiYWxhbmNlc1tfdG9dICsgdmFsdWUpOwoKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCB2YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qIHB1YmxpYyBtZXRob2RzICovCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGluaXRpYWxTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19hZGRyZXNzXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUobG9ja2VkID09IGZhbHNlKTsKCiAgICAgICAgYm9vbCBzdGF0dXMgPSB0cmFuc2ZlckludGVybmFsKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmVxdWlyZShzdGF0dXMgPT0gdHJ1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZihsb2NrZWQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChsb2NrZWQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKCiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChsb2NrZWQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgYm9vbCBfc3VjY2VzcyA9IHRyYW5zZmVySW50ZXJuYWwoX2Zyb20sIF90bywgX3ZhbHVlKTsKCiAgICAgICAgaWYgKF9zdWNjZXNzKSB7CiAgICAgICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9zdWNjZXNzOwogICAgfQoKfQoKY29udHJhY3QgTWludGluZ0VSQzIwIGlzIEVSQzIwIHsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBtaW50ZXJzOwoKICAgIHVpbnQyNTYgcHVibGljIG1heFN1cHBseTsKCiAgICBmdW5jdGlvbiBNaW50aW5nRVJDMjAoCiAgICB1aW50MjU2IF9pbml0aWFsU3VwcGx5LAogICAgdWludDI1NiBfbWF4U3VwcGx5LAogICAgc3RyaW5nIF90b2tlbk5hbWUsCiAgICB1aW50OCBfZGVjaW1hbHMsCiAgICBzdHJpbmcgX3N5bWJvbCwKICAgIGJvb2wgX3RyYW5zZmVyQWxsU3VwcGx5VG9Pd25lciwKICAgIGJvb2wgX2xvY2tlZAogICAgKQogICAgRVJDMjAoX2luaXRpYWxTdXBwbHksIF90b2tlbk5hbWUsIF9kZWNpbWFscywgX3N5bWJvbCwgX3RyYW5zZmVyQWxsU3VwcGx5VG9Pd25lciwgX2xvY2tlZCkKCiAgICB7CiAgICAgICAgc3RhbmRhcmQgPSAiTWludGluZ0VSQzIwIDAuMSI7CiAgICAgICAgbWludGVyc1ttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgICAgbWF4U3VwcGx5ID0gX21heFN1cHBseTsKICAgIH0KCgogICAgZnVuY3Rpb24gYWRkTWludGVyKGFkZHJlc3MgX25ld01pbnRlcikgb25seU93bmVyIHsKICAgICAgICBtaW50ZXJzW19uZXdNaW50ZXJdID0gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gcmVtb3ZlTWludGVyKGFkZHJlc3MgX21pbnRlcikgb25seU93bmVyIHsKICAgICAgICBtaW50ZXJzW19taW50ZXJdID0gZmFsc2U7CiAgICB9CgoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfYWRkciwgdWludDI1NiBfYW1vdW50KSBvbmx5TWludGVycyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGxvY2tlZCA9PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KDApOwogICAgICAgIH0KCiAgICAgICAgaWYgKF9hbW91bnQgPT0gdWludDI1NigwKSkgewogICAgICAgICAgICByZXR1cm4gdWludDI1NigwKTsKICAgICAgICB9CiAgICAgICAgaWYgKGluaXRpYWxTdXBwbHkgKyBfYW1vdW50IDw9IGluaXRpYWxTdXBwbHkpewogICAgICAgICAgICByZXR1cm4gdWludDI1NigwKTsKICAgICAgICB9CiAgICAgICAgaWYgKGluaXRpYWxTdXBwbHkgKyBfYW1vdW50ID4gbWF4U3VwcGx5KSB7CiAgICAgICAgICAgIHJldHVybiB1aW50MjU2KDApOwogICAgICAgIH0KCiAgICAgICAgaW5pdGlhbFN1cHBseSArPSBfYW1vdW50OwogICAgICAgIGJhbGFuY2VzW19hZGRyXSArPSBfYW1vdW50OwogICAgICAgIFRyYW5zZmVyKHRoaXMsIF9hZGRyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gX2Ftb3VudDsKICAgIH0KCgogICAgbW9kaWZpZXIgb25seU1pbnRlcnMgKCkgewogICAgICAgIHJlcXVpcmUodHJ1ZSA9PSBtaW50ZXJzW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQp9Cgpjb250cmFjdCBMYW1kZW4gaXMgTWludGluZ0VSQzIwIHsKCgogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgc3RyaW5nIHB1YmxpYyB0b2tlbk5hbWUgPSAiTGFtZGVuIFRhdSI7CgogICAgc3RyaW5nIHB1YmxpYyB0b2tlblN5bWJvbCA9ICJUQVUiOwoKICAgIHVpbnQyNTYgcHVibGljICBtYXhTdXBwbHkgPSA1MDAgKiAxMCAqKiA2ICogdWludCgxMCkgKiogZGVjaW1hbHM7IC8vIDUwMCwwMDAsMDAwCgogICAgLy8gV2UgYmxvY2sgdG9rZW4gdHJhbnNmZXJzIHRpbGwgSUNPIGVuZC4KICAgIGJvb2wgcHVibGljIHRyYW5zZmVyRnJvemVuID0gdHJ1ZTsKCiAgICBmdW5jdGlvbiBMYW1kZW4oCiAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICBib29sIF9sb2NrZWQKICAgICkgTWludGluZ0VSQzIwKGluaXRpYWxTdXBwbHksIG1heFN1cHBseSwgdG9rZW5OYW1lLCBkZWNpbWFscywgdG9rZW5TeW1ib2wsIGZhbHNlLCBfbG9ja2VkKSB7CiAgICAgICAgc3RhbmRhcmQgPSAnTGFtZGVuIDAuMSc7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TG9ja2VkKGJvb2wgX2xvY2tlZCkgb25seU93bmVyIHsKICAgICAgICBsb2NrZWQgPSBfbG9ja2VkOwogICAgfQoKICAgIC8vIEFsbG93IHRva2VuIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gZnJlZXppbmcoYm9vbCBfdHJhbnNmZXJGcm96ZW4pIG9ubHlPd25lciB7CiAgICAgICAgdHJhbnNmZXJGcm96ZW4gPSBfdHJhbnNmZXJGcm96ZW47CiAgICB9CgogICAgLy8gRVJDMjAgZnVuY3Rpb25zCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZSghdHJhbnNmZXJGcm96ZW4pOwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CgogICAgfQoKICAgIC8vIHNob3VsZCAgbm90IGhhdmUgYXBwcm92ZS90cmFuc2ZlckZyb20KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcywgdWludCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICAgIHJlcXVpcmUoZmFsc2UpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAvLyAgICAgICAgc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzLCB1aW50MjU2LCBieXRlcykgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShmYWxzZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzLCBhZGRyZXNzLCB1aW50KSAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShmYWxzZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIC8vICAgICAgICBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KfQoKY29udHJhY3QgTGFtZGVuVG9rZW5BbGxvY2F0aW9uIGlzIE93bmFibGUgewoKICAgIExhbWRlbiBwdWJsaWMgdGF1OwoKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IExBTURFTl9ERUNJTUFMUyA9IDEwICoqIDE4OwoKICAgIHVpbnQyNTYgYWxsb2NhdGVkVG9rZW5zID0gMDsKCiAgICBBbGxvY2F0aW9uW10gYWxsb2NhdGlvbnM7CgogICAgc3RydWN0IEFsbG9jYXRpb24gewogICAgYWRkcmVzcyBfYWRkcmVzczsKICAgIHVpbnQyNTYgYW1vdW50OwogICAgfQoKCiAgICBmdW5jdGlvbiBMYW1kZW5Ub2tlbkFsbG9jYXRpb24oCiAgICBhZGRyZXNzIF90YXUsCiAgICBhZGRyZXNzW10gYWRkcmVzc2VzCiAgICApewogICAgICAgIHJlcXVpcmUodWludDgoYWRkcmVzc2VzLmxlbmd0aCkgPT0gdWludDgoMTQpKTsKICAgICAgICBhbGxvY2F0aW9ucy5wdXNoKEFsbG9jYXRpb24oYWRkcmVzc2VzWzBdLCAyMDAwMDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAvL1N0dQogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbMV0sIDEyNTAwMDAwICogTEFNREVOX0RFQ0lNQUxTKSk7IC8vTmljawogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbMl0sIDg3NTAwMDAgKiBMQU1ERU5fREVDSU1BTFMpKTsgLy9KYW1lcwogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbM10sIDg3NTAwMDAgKiBMQU1ERU5fREVDSU1BTFMpKTsgLy9NYXJpbwogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbNF0sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgICAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbNV0sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbNl0sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbN10sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbOF0sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbOV0sIDI1MDAwMCAqIExBTURFTl9ERUNJTUFMUykpOyAgLy8gQWR2aXNvcgogICAgICAgIGFsbG9jYXRpb25zLnB1c2goQWxsb2NhdGlvbihhZGRyZXNzZXNbMTBdLCAyNTAwMDAgKiBMQU1ERU5fREVDSU1BTFMpKTsgIC8vIEFkdmlzb3IKICAgICAgICBhbGxvY2F0aW9ucy5wdXNoKEFsbG9jYXRpb24oYWRkcmVzc2VzWzExXSwgMjUwMDAwICogTEFNREVOX0RFQ0lNQUxTKSk7ICAvLyBBZHZpc29yCiAgICAgICAgYWxsb2NhdGlvbnMucHVzaChBbGxvY2F0aW9uKGFkZHJlc3Nlc1sxMl0sIDQ4MDAwMDAwICogTEFNREVOX0RFQ0lNQUxTKSk7ICAvLyBlbnRlcnByaXNlQ2FzZVN0dWRpZXMKICAgICAgICBhbGxvY2F0aW9ucy5wdXNoKEFsbG9jYXRpb24oYWRkcmVzc2VzWzEzXSwgNTAwMDAwMDAgICogTEFNREVOX0RFQ0lNQUxTKSk7ICAvLyBBS0EgSU5OT1ZBVElPTiBGVU5ECiAgICAgICAgdGF1ID0gTGFtZGVuKF90YXUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG9jYXRlVG9rZW5zKCl7CiAgICAgICAgcmVxdWlyZSh1aW50OChhbGxvY2F0aW9ucy5sZW5ndGgpID09IHVpbnQ4KDE0KSk7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKHRhdSkgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKGFsbG9jYXRlZFRva2VucyA9PSAwKTsKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgYWxsb2NhdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgQWxsb2NhdGlvbiBzdG9yYWdlIGFsbG9jYXRpb24gPSBhbGxvY2F0aW9uc1tpXTsKICAgICAgICAgICAgdWludDI1NiBtaW50ZWRBbW91bnQgPSB0YXUubWludChhbGxvY2F0aW9uLl9hZGRyZXNzLCBhbGxvY2F0aW9uLmFtb3VudCk7CiAgICAgICAgICAgIHJlcXVpcmUobWludGVkQW1vdW50ID09IGFsbG9jYXRpb24uYW1vdW50KTsKICAgICAgICAgICAgYWxsb2NhdGVkVG9rZW5zICs9IGFsbG9jYXRpb24uYW1vdW50OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRUYXUoYWRkcmVzcyBfdGF1KSBvbmx5T3duZXIgewogICAgICAgIHRhdSA9IExhbWRlbihfdGF1KTsKICAgIH0KfQ=='.
	

]
