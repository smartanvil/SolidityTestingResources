Class {
	#name : #SRT4318142b71ac84ef8c2c322db236ea99a91daf44,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4318142b71ac84ef8c2c322db236ea99a91daf44 >> base64 [
	^ ''.
	

]
