Class {
	#name : #SRTbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9 >> base64 [
	^ ''.
	

]
