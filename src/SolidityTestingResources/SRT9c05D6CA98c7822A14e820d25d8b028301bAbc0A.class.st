Class {
	#name : #SRT9c05D6CA98c7822A14e820d25d8b028301bAbc0A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9c05D6CA98c7822A14e820d25d8b028301bAbc0A >> base64 [
	^ ''.
	

]
