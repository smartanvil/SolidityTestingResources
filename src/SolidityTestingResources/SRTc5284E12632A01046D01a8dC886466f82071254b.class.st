Class {
	#name : #SRTc5284E12632A01046D01a8dC886466f82071254b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc5284E12632A01046D01a8dC886466f82071254b >> base64 [
	^ ''.
	

]
