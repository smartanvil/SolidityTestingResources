Class {
	#name : #SRT6fa8cd6a1a35542ba289437fe69e8f21ca1fa614,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6fa8cd6a1a35542ba289437fe69e8f21ca1fa614 >> base64 [
	^ ''.
	

]
