Class {
	#name : #SRT4f1adC39f25B67146bA15d8BF453A7F502e58a79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f1adC39f25B67146bA15d8BF453A7F502e58a79 >> base64 [
	^ ''.
	

]
