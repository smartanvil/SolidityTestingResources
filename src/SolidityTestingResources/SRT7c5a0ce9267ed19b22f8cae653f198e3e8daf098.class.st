Class {
	#name : #SRT7c5a0ce9267ed19b22f8cae653f198e3e8daf098,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c5a0ce9267ed19b22f8cae653f198e3e8daf098 >> base64 [
	^ ''.
	

]
