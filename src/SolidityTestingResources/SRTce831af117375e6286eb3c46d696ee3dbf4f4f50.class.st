Class {
	#name : #SRTce831af117375e6286eb3c46d696ee3dbf4f4f50,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTce831af117375e6286eb3c46d696ee3dbf4f4f50 >> base64 [
	^ ''.
	

]
