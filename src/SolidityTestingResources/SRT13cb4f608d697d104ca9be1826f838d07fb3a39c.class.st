Class {
	#name : #SRT13cb4f608d697d104ca9be1826f838d07fb3a39c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13cb4f608d697d104ca9be1826f838d07fb3a39c >> base64 [
	^ ''.
	

]
