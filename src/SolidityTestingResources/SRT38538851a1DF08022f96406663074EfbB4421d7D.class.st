Class {
	#name : #SRT38538851a1DF08022f96406663074EfbB4421d7D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38538851a1DF08022f96406663074EfbB4421d7D >> base64 [
	^ ''.
	

]
