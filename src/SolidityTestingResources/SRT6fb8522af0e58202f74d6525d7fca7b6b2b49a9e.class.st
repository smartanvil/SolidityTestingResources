Class {
	#name : #SRT6fb8522af0e58202f74d6525d7fca7b6b2b49a9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6fb8522af0e58202f74d6525d7fca7b6b2b49a9e >> base64 [
	^ ''.
	

]
