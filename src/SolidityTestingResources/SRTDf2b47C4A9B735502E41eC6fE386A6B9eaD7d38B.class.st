Class {
	#name : #SRTDf2b47C4A9B735502E41eC6fE386A6B9eaD7d38B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTDf2b47C4A9B735502E41eC6fE386A6B9eaD7d38B >> base64 [
	^ ''.
	

]
