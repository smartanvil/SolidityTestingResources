Class {
	#name : #SRT53ce47cbe7f2be0aecd086a70182a98c907d024d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53ce47cbe7f2be0aecd086a70182a98c907d024d >> base64 [
	^ ''.
	

]
