Class {
	#name : #SRT9a794dc1939f1d78fa48613b89b8f9d0a20da00e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a794dc1939f1d78fa48613b89b8f9d0a20da00e >> base64 [
	^ ''.
	

]
