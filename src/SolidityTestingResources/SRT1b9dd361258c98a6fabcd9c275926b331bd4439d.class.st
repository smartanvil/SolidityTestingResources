Class {
	#name : #SRT1b9dd361258c98a6fabcd9c275926b331bd4439d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1b9dd361258c98a6fabcd9c275926b331bd4439d >> base64 [
	^ ''.
	

]
