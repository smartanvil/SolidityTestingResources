Class {
	#name : #SRTbd897c8885b40d014fb7941b3043b21adcc9ca1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd897c8885b40d014fb7941b3043b21adcc9ca1c >> base64 [
	^ ''.
	

]
