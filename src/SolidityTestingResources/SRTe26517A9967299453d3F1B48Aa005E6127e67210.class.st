Class {
	#name : #SRTe26517A9967299453d3F1B48Aa005E6127e67210,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe26517A9967299453d3F1B48Aa005E6127e67210 >> base64 [
	^ ''.
	

]
