Class {
	#name : #SRTe4339c83ead9aa168d3fbfb43384a13b2df7766e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe4339c83ead9aa168d3fbfb43384a13b2df7766e >> base64 [
	^ ''.
	

]
