Class {
	#name : #SRT02c06fb43f418e142666e4a80526d23cd2eae367,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02c06fb43f418e142666e4a80526d23cd2eae367 >> base64 [
	^ ''.
	

]
