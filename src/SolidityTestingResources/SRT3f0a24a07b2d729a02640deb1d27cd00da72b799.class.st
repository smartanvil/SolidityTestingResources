Class {
	#name : #SRT3f0a24a07b2d729a02640deb1d27cd00da72b799,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f0a24a07b2d729a02640deb1d27cd00da72b799 >> base64 [
	^ ''.
	

]
