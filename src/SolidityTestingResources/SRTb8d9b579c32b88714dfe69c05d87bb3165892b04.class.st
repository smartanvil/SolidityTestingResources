Class {
	#name : #SRTb8d9b579c32b88714dfe69c05d87bb3165892b04,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8d9b579c32b88714dfe69c05d87bb3165892b04 >> base64 [
	^ ''.
	

]
