Class {
	#name : #SRTcde86186866ca04a5da9240cbfae4306499a2125,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcde86186866ca04a5da9240cbfae4306499a2125 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQ29udHJhY3QgIk1hdGgiCiAqIFB1cnBvc2U6IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICogU3RhdHVzIDogQ29tcGxldGUKICogCiAqLwpjb250cmFjdCBNYXRoIHsKCiAgICAvKioKICAgICogTXVsdGlwbGljYXRpb24gd2l0aCBzYWZldHkgY2hlY2sKICAgICovCiAgICBmdW5jdGlvbiBNdWwodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICB1aW50IGMgPSBhICogYjsKICAgICAgLy9jaGVjayByZXN1bHQgc2hvdWxkIG5vdCBiZSBvdGhlciB3aXNlIHVudGlsIGE9MAogICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogRGl2aXNpb24gd2l0aCBzYWZldHkgY2hlY2sKICAgICovCiAgICBmdW5jdGlvbiBEaXYodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAvL292ZXJmbG93IGNoZWNrOyBiIG11c3Qgbm90IGJlIDAKICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgdWludCBjID0gYSAvIGI7CiAgICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogU3VidHJhY3Rpb24gd2l0aCBzYWZldHkgY2hlY2sKICAgICovCiAgICBmdW5jdGlvbiBTdWIodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAvL2IgbXVzdCBiZSBncmVhdGVyIHRoYXQgYSBhcyB3ZSBuZWVkIHRvIHN0b3JlIHZhbHVlIGluIHVuc2lnbmVkIGludGVnZXIKICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICogQWRkaXRpb24gd2l0aCBzYWZldHkgY2hlY2sKICAgICovCiAgICBmdW5jdGlvbiBBZGQodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgLy9yZXN1bHQgbXVzdCBiZSBncmVhdGVyIGFzIGEgb3IgYiBjYW4gbm90IGJlIG5lZ2F0aXZlCiAgICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgICByZXR1cm4gYzsKICAgIH0KfQoKICBjb250cmFjdCBFUkMyMCB7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKXB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgdG90YWxfU3VwcGx5KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcilwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKXB1YmxpYyByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSlwdWJsaWMgcmV0dXJucyAoYm9vbCBvayk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSlwdWJsaWMgcmV0dXJucyAoYm9vbCBvayk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCgpjb250cmFjdCBldGhlcmVjYXNoIGlzIEVSQzIwLE1hdGgKewogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJFQ0giOwogICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFdGhlckVjYXNoIjsKICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gTXVsKDM2MDAwMDAwMCwoMTAgKipkZWNpbWFscykpOwogICAgIAogICAgIC8vIE93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAKICAgICAvLyBCYWxhbmNlcyBmb3IgZWFjaCBhY2NvdW50CiAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIAogICAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAKICAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgogICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICB9CiAgICAgICAgIF87CiAgICAgfQogIAogICAgIC8vIENvbnN0cnVjdG9yCiAgICAgZnVuY3Rpb24gZXRoZXJlY2FzaCgpIHB1YmxpYyB7CiAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gX3RvdGFsU3VwcGx5OwogICAgIH0KICAKICAgIC8vIHdoYXQgaXMgdGhlIHRvdGFsIHN1cHBseSBvZiB0aGUgZWNoIHRva2VucwogICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbF9TdXBwbHkpIHsKICAgICAgICAgdG90YWxfU3VwcGx5ID0gX3RvdGFsU3VwcGx5OwogICAgIH0KICAKICAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PwogICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcilwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICAgfQogIAogICAgIC8vIFRyYW5zZmVyIHRoZSBiYWxhbmNlIGZyb20gb3duZXIncyBhY2NvdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAKICAgICAgICAgICAgICYmIF9hbW91bnQgPiAwCiAgICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfYW1vdW50KTsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBBZGQoYmFsYW5jZXNbX3RvXSwgX2Ftb3VudCk7CiAgICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgIH0KICAgICB9CiAgCiAgICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgICAvLyBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAogICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlCiAgICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgIC8vIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCiAgICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOgogICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgIClwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudAogICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gU3ViKGJhbGFuY2VzW19mcm9tXSwgX2Ftb3VudCk7CiAgICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IFN1YihhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSwgX2Ftb3VudCk7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gQWRkKGJhbGFuY2VzW190b10sIF9hbW91bnQpOwogICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogICAgIH0KIAogICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQogIAogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcilwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgfQogICAgIAoKCS8vSW4gY2FzZSB0aGUgb3duZXJzaGlwIG5lZWRzIHRvIGJlIHRyYW5zZmVycmVkCglmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKXB1YmxpYyBvbmx5T3duZXIKCXsKCSAgICBiYWxhbmNlc1tuZXdPd25lcl0gPSBBZGQoYmFsYW5jZXNbbmV3T3duZXJdLGJhbGFuY2VzW293bmVyXSk7CgkgICAgYmFsYW5jZXNbb3duZXJdID0gMDsKCSAgICBvd25lciA9IG5ld093bmVyOwoJfQoKfQ=='.
	

]
