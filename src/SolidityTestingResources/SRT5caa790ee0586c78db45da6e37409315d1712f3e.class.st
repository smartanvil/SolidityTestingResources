Class {
	#name : #SRT5caa790ee0586c78db45da6e37409315d1712f3e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5caa790ee0586c78db45da6e37409315d1712f3e >> base64 [
	^ ''.
	

]
