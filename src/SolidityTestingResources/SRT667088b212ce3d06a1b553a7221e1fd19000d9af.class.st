Class {
	#name : #SRT667088b212ce3d06a1b553a7221e1fd19000d9af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT667088b212ce3d06a1b553a7221e1fd19000d9af >> base64 [
	^ ''.
	

]
