Class {
	#name : #SRT9e17852142b297b7d7919698fa8b7e382c43bebd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e17852142b297b7d7919698fa8b7e382c43bebd >> base64 [
	^ ''.
	

]
