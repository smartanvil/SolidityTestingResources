Class {
	#name : #SRT7d5a7a974ea07bfedddc2a15297189089be071b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7d5a7a974ea07bfedddc2a15297189089be071b6 >> base64 [
	^ ''.
	

]
