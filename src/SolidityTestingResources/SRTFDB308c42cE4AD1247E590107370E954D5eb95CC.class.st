Class {
	#name : #SRTFDB308c42cE4AD1247E590107370E954D5eb95CC,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTFDB308c42cE4AD1247E590107370E954D5eb95CC >> base64 [
	^ ''.
	

]
