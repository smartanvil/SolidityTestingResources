Class {
	#name : #SRT73dd069c299a5d691e9836243bcaec9c8c1d8734,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73dd069c299a5d691e9836243bcaec9c8c1d8734 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgUmVlbnRyYW5jeUd1YXJkIHsKCiAgLyoqCiAgICogQGRldiBXZSB1c2UgYSBzaW5nbGUgbG9jayBmb3IgdGhlIHdob2xlIGNvbnRyYWN0LiAKICAgKi8KICBib29sIHByaXZhdGUgcmVudHJhbmN5X2xvY2sgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBQcmV2ZW50cyBhIGNvbnRyYWN0IGZyb20gY2FsbGluZyBpdHNlbGYsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkuCiAgICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICAgKiBtYXJrIGl0IGBleHRlcm5hbGAuIENhbGxpbmcgb25lIG5vblJlZW50cmFudCBmdW5jdGlvbiBmcm9tCiAgICogYW5vdGhlciBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCB5b3UgY2FuIGltcGxlbWVudCBhCiAgICogYHByaXZhdGVgIGZ1bmN0aW9uIGRvaW5nIHRoZSBhY3R1YWwgd29yaywgYW5kIGEgYGV4dGVybmFsYAogICAqIHdyYXBwZXIgbWFya2VkIGFzIGBub25SZWVudHJhbnRgLgogICAqLwogIG1vZGlmaWVyIG5vblJlZW50cmFudCgpIHsKICAgIHJlcXVpcmUoIXJlbnRyYW5jeV9sb2NrKTsKICAgIHJlbnRyYW5jeV9sb2NrID0gdHJ1ZTsKICAgIF87CiAgICByZW50cmFuY3lfbG9jayA9IGZhbHNlOwogIH0KCn0KCgpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuIAogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICBpZiAoX3ZhbHVlICE9IDApIHJlcXVpcmUoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCk7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCmNvbnRyYWN0IFRyYW5zbXV0YWJsZSB7CiAgZnVuY3Rpb24gdHJhbnNtdXRlKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wsIHVpbnQyNTYpOwogIGV2ZW50IFRyYW5zbXV0ZWQoYWRkcmVzcyBpbmRleGVkIHdobywgYWRkcmVzcyBiYXNlQ29udHJhY3QsIGFkZHJlc3MgdHJhbnNtdXRlZENvbnRyYWN0LCB1aW50MjU2IHNvdXJjZVF1YW50aXR5LCB1aW50MjU2IGRlc3RRdWFudGl0eSk7Cn0KCi8vIENvbnRyYWN0cyB0aGF0IGNhbiBiZSB0cmFuc211dGVkIHRvIHNob3VsZCBpbXBsZW1lbnQgdGhpcwpjb250cmFjdCBUcmFuc211dGFibGVJbnRlcmZhY2UgewogIGZ1bmN0aW9uIHRyYW5zbXV0ZWQodWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wsIHVpbnQyNTYpOwp9CgoKCmNvbnRyYWN0IEVSQzIwTWluZWFibGUgaXMgU3RhbmRhcmRUb2tlbiwgUmVlbnRyYW5jeUd1YXJkICB7CgogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkaXZpc2libGVfdW5pdHMgPSAxMDAwMDAwMDsKICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgaW5pdGlhbF9yZXdhcmQgPSAxMDA7CgogICAvKiogdG90YWxTdXBwbHkgaW4gU3RhbmRhcmRUb2tlbiByZWZlcnMgdG8gY3VycmVudGx5IGF2YWlsYWJsZSBzdXBwbHkKICAgKiBtYXhpbXVtU3VwcGx5IHJlZmVycyB0byB0aGUgY2FwIG9uIG1pbmluZy4KICAgKiBXaGVuIG1pbmluZyBpcyBmaW5pc2hlZCB0b3RhbFN1cHBseSA9PSBtYXhpbXVtU3VwcGx5CiAgICovCiAgIHVpbnQyNTYgcHVibGljIG1heGltdW1TdXBwbHk7CgogICAvLyBDdXJyZW50IG1pbmluZyBkaWZmaWN1bHR5IGluIFdlaQogICB1aW50MjU2IHB1YmxpYyBjdXJyZW50RGlmZmljdWx0eVdlaTsKCiAgIC8vIE1pbmltdW0gZGlmZmljdWx0eQogICB1aW50MjU2IHB1YmxpYyBtaW5pbXVtRGlmZmljdWx0eVRocmVzaG9sZFdlaTsKCiAgIC8qKiBCbG9jayBjcmVhdGlvbiByYXRlIGFzIG51bWJlciBvZiBFdGhlcmV1bSBibG9ja3MgcGVyIG1pbmluZyBjeWNsZQogICAqIDEwIG1pbnV0ZXMgYXQgMTIgc2Vjb25kcyBhIGJsb2NrIHdvdWxkIGJlIGFuIGludGVybmFsIGJsb2NrCiAgICogZ2VuZXJhdGVkIGV2ZXJ5IDUwIEV0aGVyZXVtIGJsb2NrcwogICAqLwogICB1aW50MjU2IHB1YmxpYyBibG9ja0NyZWF0aW9uUmF0ZTsKCiAgIC8qIGRpZmZpY3VsdHlBZGp1c3RtZW50UGVyaW9kIHNob3VsZCBiZSBldmVyeSB0d28gd2Vla3MsIG9yCiAgICogMjAxNiBpbnRlcm5hbCBibG9ja3MuCiAgICovCiAgIHVpbnQyNTYgcHVibGljIGRpZmZpY3VsdHlBZGp1c3RtZW50UGVyaW9kOwoKICAgLyogV2hlbiB3YXMgdGhlIGxhc3QgdGltZSB3ZSBkaWQgYSBkaWZmaWN1bHR5IGFkanVzdG1lbnQuCiAgICogSW4gY2FzZSBtaW5pbmcgY2Vhc2VzIGZvciBpbmRldGVybWluYXRlIGR1cmF0aW9uCiAgICovCiAgIHVpbnQyNTYgcHVibGljIGxhc3REaWZmaWN1bHR5QWRqdXN0bWVudEV0aGVyZXVtQmxvY2s7CgogICAvLyBTY2FsZSBtdWx0aXBsaWVyIGxpbWl0IGZvciBkaWZmaWN1bHR5IGFkanVzdG1lbnQKICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGlmZmljdWx0eVNjYWxlTXVsdGlwbGllckxpbWl0ID0gNDsKCiAgIC8vIFRvdGFsIGJsb2NrcyBtaW5lZCBoZWxwcyB1cyBjYWxjdWxhdGUgdGhlIGN1cnJlbnQgcmV3YXJkCiAgIHVpbnQyNTYgcHVibGljIHRvdGFsQmxvY2tzTWluZWQ7CgogICAvLyBSZXdhcmQgYWRqdXN0bWVudCBwZXJpb2QgaW4gQml0Y29pbmV1bSBuYXRpdmUgYmxvY2tzCgogICB1aW50MjU2IHB1YmxpYyByZXdhcmRBZGp1c3RtZW50UGVyaW9kOyAKCiAgIC8vIFRvdGFsIGFtb3VudCBvZiBXZWkgcHV0IGludG8gbWluaW5nIGR1cmluZyBjdXJyZW50IHBlcmlvZAogICB1aW50MjU2IHB1YmxpYyB0b3RhbFdlaUNvbW1pdHRlZDsKICAgLy8gVG90YWwgYW1vdW50IG9mIFdlaSBleHBlY3RlZCBmb3IgdGhpcyBtaW5pbmcgcGVyaW9kCiAgIHVpbnQyNTYgcHVibGljIHRvdGFsV2VpRXhwZWN0ZWQ7CgogICAvLyBXaGVyZSB0byBidXJuIEV0aGVyCiAgIGFkZHJlc3MgcHVibGljIGJ1cm5BZGRyZXNzOwoKICAgLyoqIEVhY2ggYmxvY2sgaXMgY3JlYXRlZCBvbiBhIG1pbmluZyBhdHRlbXB0IGlmCiAgICogaXQgZG9lcyBub3QgYWxyZWFkeSBleGlzdC4KICAgKiB0aGlzIGtlZXBzIHRyYWNrIG9mIHRoZSB0YXJnZXQgZGlmZmljdWx0eSBhdCB0aGUgdGltZSBvZiBjcmVhdGlvbgogICAqLwoKICAgc3RydWN0IEludGVybmFsQmxvY2sgewogICAgICB1aW50MjU2IHRhcmdldERpZmZpY3VsdHlXZWk7CiAgICAgIHVpbnQyNTYgYmxvY2tOdW1iZXI7CiAgICAgIHVpbnQyNTYgdG90YWxNaW5pbmdXZWk7CiAgICAgIHVpbnQyNTYgdG90YWxNaW5pbmdBdHRlbXB0czsKICAgICAgdWludDI1NiBjdXJyZW50QXR0ZW1wdE9mZnNldDsKICAgICAgYm9vbCBwYXllZDsKICAgICAgYWRkcmVzcyBwYXllZTsKICAgICAgYm9vbCBpc0NyZWF0ZWQ7CiAgIH0KCiAgIC8qKiBNaW5pbmcgYXR0ZW1wdHMgYXJlIGdpdmVuIGEgcHJvamVjdGVkIG9mZnNldCB0byBtaW5pbWl6ZQogICAqIGtleXNwYWNlIG92ZXJsYXAgdG8gaW5jcmVhc2UgZmFpcm5lc3MgYnkgcmVkdWNpbmcgdGhlIHJlZGVtcHRpb24KICAgKiByYWNlIGNvbmRpdGlvbgogICAqIFRoaXMgZG9lcyBub3QgcmVtb3ZlIHRoZSBwb3NzaWJpbGl0eSB0aGF0IHR3byBvciBtb3JlIG1pbmVycyB3aWxsCiAgICogYmUgY29tcGV0aW5nIGZvciB0aGUgc2FtZSBhd2FyZCwgZXNwZWNpYWxseSBpZiBzdWJzZXF1ZW50IGluY3JlYXNlcyBpbgogICAqIHdlaSBmcm9tIGEgc2luZ2xlIG1pbmVyIGluY3JlYXNlIG92ZXJsYXAKICAgKi8KICAgc3RydWN0IE1pbmluZ0F0dGVtcHQgewogICAgICB1aW50MjU2IHByb2plY3RlZE9mZnNldDsKICAgICAgdWludDI1NiB2YWx1ZTsKICAgICAgYm9vbCBpc0NyZWF0ZWQ7CiAgIH0KCiAgIC8vIEVhY2ggZ3Vlc3MgZ2V0cyBhc3NpZ25lZCB0byBhIGJsb2NrCiAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gSW50ZXJuYWxCbG9jaykgcHVibGljIGJsb2NrRGF0YTsKICAgbWFwcGluZyAodWludDI1NiA9PiBtYXBwaW5nIChhZGRyZXNzID0+IE1pbmluZ0F0dGVtcHQpKSBwdWJsaWMgbWluaW5nQXR0ZW1wdHM7CgogICAvLyBVdGlsaXR5IHJlbGF0ZWQKCiAgIGZ1bmN0aW9uIHJlc29sdmVfYmxvY2tfaGFzaCh1aW50MjU2IF9ibG9ja051bSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgIHJldHVybiBibG9jay5ibG9ja2hhc2goX2Jsb2NrTnVtKTsKICAgfQoKICAgZnVuY3Rpb24gY3VycmVudF9leHRlcm5hbF9ibG9jaygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICByZXR1cm4gYmxvY2subnVtYmVyOwogICB9CgogICBmdW5jdGlvbiBleHRlcm5hbF90b19pbnRlcm5hbF9ibG9ja19udW1iZXIodWludDI1NiBfZXh0ZXJuYWxCbG9ja051bSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgLy8gYmxvY2tDcmVhdGlvblJhdGUgaXMgPiAwCiAgICAgIHJldHVybiBfZXh0ZXJuYWxCbG9ja051bSAvIGJsb2NrQ3JlYXRpb25SYXRlOwogICB9CgogICAvLyBGb3IgdGhlIHRlc3QgaGFybmVzcyB2ZXJpZmljYXRpb24KICAgZnVuY3Rpb24gZ2V0X2ludGVybmFsX2Jsb2NrX251bWJlcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgcmV0dXJuIGV4dGVybmFsX3RvX2ludGVybmFsX2Jsb2NrX251bWJlcihjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpOwogICB9CgogICAvLyBJbml0aWFsIHN0YXRlIHJlbGF0ZWQKICAgLyoqIERhcHBzIG5lZWQgdG8gZ3JhYiB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJhY3QKICAgKiBpbiBvcmRlciB0byBwcm9wZXJseSBpbml0aWFsaXplIG1pbmluZyBvciB0cmFja2luZwogICAqIHRoaXMgaXMgYSBzaW5nbGUgYXRvbWljIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHN0YXRlCiAgICogcmF0aGVyIHRoYW4gc2NhdHRlcmluZyBpdCBhY3Jvc3MgbXVsdGlwbGUgcHVibGljIGNhbGxzCiAgICogYWxzbyByZXR1cm5zIHRoZSBjdXJyZW50IGJsb2NrcyBwYXJhbWV0ZXJzCiAgICogb3IgZGVmYXVsdCBwYXJhbXMgaWYgaXQgaGFzbid0IGJlZW4gY3JlYXRlZCB5ZXQKICAgKiBUaGlzIGlzIG9ubHkgY2FsbGVkIGV4dGVybmFsbHkKICAgKi8KCiAgIGZ1bmN0aW9uIGdldENvbnRyYWN0U3RhdGUoKSBleHRlcm5hbCBjb25zdGFudAogICAgIHJldHVybnMgKHVpbnQyNTYsICAvLyBjdXJyZW50RGlmZmljdWx0eVdlaQogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyBtaW5pbXVtRGlmZmljdWx0eVRocmVzaG9sZFdlaQogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyBibG9ja051bWJlcgogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyBibG9ja0NyZWF0aW9uUmF0ZQogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyBkaWZmaWN1bHR5QWRqdXN0bWVudFBlcmlvZAogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyByZXdhcmRBZGp1c3RtZW50UGVyaW9kCiAgICAgICAgICAgICAgdWludDI1NiwgIC8vIGxhc3REaWZmaWN1bHR5QWR1c3RtZW50RXRoZXJldW1CbG9jawogICAgICAgICAgICAgIHVpbnQyNTYsICAvLyB0b3RhbEJsb2Nrc01pbmVkCiAgICAgICAgICAgICAgdWludDI1NiwgIC8vIHRvdGFsV2VpQ29tbWl0dGVkCiAgICAgICAgICAgICAgdWludDI1NiwgIC8vIHRvdGFsV2VpRXhwZWN0ZWQKICAgICAgICAgICAgICB1aW50MjU2LCAgLy8gYi50YXJnZXREaWZmaWN1bHR5V2VpCiAgICAgICAgICAgICAgdWludDI1NiwgIC8vIGIudG90YWxNaW5pbmdXZWkKICAgICAgICAgICAgICB1aW50MjU2ICAvLyBiLmN1cnJlbnRBdHRlbXB0T2Zmc2V0CiAgICAgICAgICAgICAgKSB7CiAgICBJbnRlcm5hbEJsb2NrIG1lbW9yeSBiOwogICAgdWludDI1NiBfYmxvY2tOdW1iZXIgPSBleHRlcm5hbF90b19pbnRlcm5hbF9ibG9ja19udW1iZXIoY3VycmVudF9leHRlcm5hbF9ibG9jaygpKTsKICAgIGlmICghYmxvY2tEYXRhW19ibG9ja051bWJlcl0uaXNDcmVhdGVkKSB7CiAgICAgICAgYiA9IEludGVybmFsQmxvY2soCiAgICAgICAgICAgICAgICAgICAgICAge3RhcmdldERpZmZpY3VsdHlXZWk6IGN1cnJlbnREaWZmaWN1bHR5V2VpLAogICAgICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBfYmxvY2tOdW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNaW5pbmdXZWk6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNaW5pbmdBdHRlbXB0czogMCwKICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXR0ZW1wdE9mZnNldDogMCwKICAgICAgICAgICAgICAgICAgICAgICBwYXllZDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgcGF5ZWU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgaXNDcmVhdGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAgICBiID0gYmxvY2tEYXRhW19ibG9ja051bWJlcl07CiAgICB9CiAgICByZXR1cm4gKGN1cnJlbnREaWZmaWN1bHR5V2VpLAogICAgICAgICAgICBtaW5pbXVtRGlmZmljdWx0eVRocmVzaG9sZFdlaSwKICAgICAgICAgICAgX2Jsb2NrTnVtYmVyLAogICAgICAgICAgICBibG9ja0NyZWF0aW9uUmF0ZSwKICAgICAgICAgICAgZGlmZmljdWx0eUFkanVzdG1lbnRQZXJpb2QsCiAgICAgICAgICAgIHJld2FyZEFkanVzdG1lbnRQZXJpb2QsCiAgICAgICAgICAgIGxhc3REaWZmaWN1bHR5QWRqdXN0bWVudEV0aGVyZXVtQmxvY2ssCiAgICAgICAgICAgIHRvdGFsQmxvY2tzTWluZWQsCiAgICAgICAgICAgIHRvdGFsV2VpQ29tbWl0dGVkLAogICAgICAgICAgICB0b3RhbFdlaUV4cGVjdGVkLAogICAgICAgICAgICBiLnRhcmdldERpZmZpY3VsdHlXZWksCiAgICAgICAgICAgIGIudG90YWxNaW5pbmdXZWksCiAgICAgICAgICAgIGIuY3VycmVudEF0dGVtcHRPZmZzZXQpOwogICB9CgogICBmdW5jdGlvbiBnZXRCbG9ja0RhdGEodWludDI1NiBfYmxvY2tOdW0pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCBib29sLCBhZGRyZXNzLCBib29sKSB7CiAgICBJbnRlcm5hbEJsb2NrIG1lbW9yeSBpQmxvY2sgPSBibG9ja0RhdGFbX2Jsb2NrTnVtXTsKICAgIHJldHVybiAoaUJsb2NrLnRhcmdldERpZmZpY3VsdHlXZWksCiAgICBpQmxvY2suYmxvY2tOdW1iZXIsCiAgICBpQmxvY2sudG90YWxNaW5pbmdXZWksCiAgICBpQmxvY2sudG90YWxNaW5pbmdBdHRlbXB0cywKICAgIGlCbG9jay5jdXJyZW50QXR0ZW1wdE9mZnNldCwKICAgIGlCbG9jay5wYXllZCwKICAgIGlCbG9jay5wYXllZSwKICAgIGlCbG9jay5pc0NyZWF0ZWQpOwogICB9CgogICBmdW5jdGlvbiBnZXRNaW5pbmdBdHRlbXB0KHVpbnQyNTYgX2Jsb2NrTnVtLCBhZGRyZXNzIF93aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2LCBib29sKSB7CiAgICAgaWYgKG1pbmluZ0F0dGVtcHRzW19ibG9ja051bV1bX3dob10uaXNDcmVhdGVkKSB7CiAgICAgICAgcmV0dXJuIChtaW5pbmdBdHRlbXB0c1tfYmxvY2tOdW1dW193aG9dLnByb2plY3RlZE9mZnNldCwKICAgICAgICBtaW5pbmdBdHRlbXB0c1tfYmxvY2tOdW1dW193aG9dLnZhbHVlLAogICAgICAgIG1pbmluZ0F0dGVtcHRzW19ibG9ja051bV1bX3dob10uaXNDcmVhdGVkKTsKICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAoMCwgMCwgZmFsc2UpOwogICAgIH0KICAgfQoKICAgLy8gTWluaW5nIFJlbGF0ZWQKCiAgIG1vZGlmaWVyIGJsb2NrQ3JlYXRlZCh1aW50MjU2IF9ibG9ja051bSkgewogICAgIHJlcXVpcmUoYmxvY2tEYXRhW19ibG9ja051bV0uaXNDcmVhdGVkKTsKICAgICBfOwogICB9CgogICBtb2RpZmllciBibG9ja1JlZGVlbWVkKHVpbnQyNTYgX2Jsb2NrTnVtKSB7CiAgICAgcmVxdWlyZShfYmxvY2tOdW0gIT0gY3VycmVudF9leHRlcm5hbF9ibG9jaygpKTsKICAgICAvKiBTaG91bGQgY2FwdHVyZSBpZiB0aGUgYmxvY2tkYXRhIGlzIHBheWVkCiAgICAgKiAgb3IgaWYgaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGJsb2NrRGF0YSBtYXBwaW5nCiAgICAgKi8KICAgICByZXF1aXJlKGJsb2NrRGF0YVtfYmxvY2tOdW1dLmlzQ3JlYXRlZCk7CiAgICAgcmVxdWlyZSghYmxvY2tEYXRhW19ibG9ja051bV0ucGF5ZWQpOwogICAgIF87CiAgIH0KCiAgIG1vZGlmaWVyIGluaXRCbG9jayh1aW50MjU2IF9ibG9ja051bSkgewogICAgIHJlcXVpcmUoX2Jsb2NrTnVtICE9IGN1cnJlbnRfZXh0ZXJuYWxfYmxvY2soKSk7CgogICAgIGlmICghYmxvY2tEYXRhW19ibG9ja051bV0uaXNDcmVhdGVkKSB7CiAgICAgICAvLyBUaGlzIGlzIGEgbmV3IGJsb2NrLCBhZGp1c3QgZGlmZmljdWx0eQogICAgICAgYWRqdXN0X2RpZmZpY3VsdHkoKTsKCiAgICAgICAvLyBDcmVhdGUgbmV3IGJsb2NrIGZvciB0cmFja2luZwogICAgICAgYmxvY2tEYXRhW19ibG9ja051bV0gPSBJbnRlcm5hbEJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RhcmdldERpZmZpY3VsdHlXZWk6IGN1cnJlbnREaWZmaWN1bHR5V2VpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBfYmxvY2tOdW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNaW5pbmdXZWk6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxNaW5pbmdBdHRlbXB0czogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXR0ZW1wdE9mZnNldDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXllZDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5ZWU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDcmVhdGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgfQogICAgIF87CiAgIH0KCiAgIG1vZGlmaWVyIGlzVmFsaWRBdHRlbXB0KCkgewogICAgIC8qIElmIHRoZSBFdGhlciBmb3IgdGhpcyBtaW5pbmcgYXR0ZW1wdCBpcyBsZXNzIHRoYW4gbWluaW11bQogICAgICogMC4wMDAwMDAxICUgb2YgdG90YWwgZGlmZmljdWx0eQogICAgICovCiAgICAgdWludDI1NiBtaW5pbXVtX3dlaSA9IGN1cnJlbnREaWZmaWN1bHR5V2VpIC8gZGl2aXNpYmxlX3VuaXRzOyAKICAgICByZXF1aXJlIChtc2cudmFsdWUgPj0gbWluaW11bV93ZWkpOwoKICAgICAvKiBMZXQncyBib3VuZCB0aGUgdmFsdWUgdG8gZ3VhcmQgYWdhaW5zdCBwb3RlbnRpYWwgb3ZlcmZsb3cKICAgICAqIGkuZSBtYXggaW50LCBvciBhbiB1bmRlcmZsb3cgYnVnCiAgICAgKiBUaGlzIGlzIGEgc2luZ2xlIGF0dGVtcHQKICAgICAqLwogICAgIHJlcXVpcmUobXNnLnZhbHVlIDw9ICgxMDAwMDAwIGV0aGVyKSk7CiAgICAgXzsKICAgfQoKICAgbW9kaWZpZXIgYWxyZWFkeU1pbmVkKHVpbnQyNTYgYmxvY2tOdW1iZXIsIGFkZHJlc3Mgc2VuZGVyKSB7CiAgICAgcmVxdWlyZShibG9ja051bWJlciAhPSBjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpOyAKICAgIC8qIFdlIGFyZSBvbmx5IGdvaW5nIHRvIGFsbG93IG9uZSBtaW5pbmcgYXR0ZW1wdCBwZXIgYmxvY2sgcGVyIGFjY291bnQKICAgICogIFRoaXMgcHJldmVudHMgc3R1ZmZpbmcgYW5kIG1ha2UgaXQgZWFzaWVyIGZvciB1cyB0byB0cmFjayBib3VuZGFyaWVzCiAgICAqLwogICAgCiAgICAvLyBUaGlzIHVzZXIgYWxyZWFkeSBtYWRlIGEgbWluaW5nIGF0dGVtcHQgZm9yIHRoaXMgYmxvY2sKICAgIHJlcXVpcmUoIWNoZWNrTWluaW5nQXR0ZW1wdChibG9ja051bWJlciwgc2VuZGVyKSk7CiAgICBfOwogICB9CgogICBmdW5jdGlvbiBjaGVja01pbmluZ0FjdGl2ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgIHJldHVybiAodG90YWxTdXBwbHkgPCBtYXhpbXVtU3VwcGx5KTsKICAgfQoKICAgbW9kaWZpZXIgaXNNaW5pbmdBY3RpdmUoKSB7CiAgICAgIHJlcXVpcmUoY2hlY2tNaW5pbmdBY3RpdmUoKSk7CiAgICAgIF87CiAgIH0KCiAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAvKiBXZSBkb24ndCByZWFsbHkgY2FyZSBpZiB0aGUgYnVybiBmYWlscyBmb3Igc29tZQogICAgICAqICB3ZWlyZCByZWFzb24uCiAgICAgICovCiAgICAgIGJvb2wgcmV0ID0gYnVybkFkZHJlc3Muc2VuZCh2YWx1ZSk7CiAgICAgIC8qIElmIHdlIGNhbm5vdCBidXJuIHRoaXMgZXRoZXIsIHRoYW4gdGhlIGNvbnRyYWN0IG1pZ2h0CiAgICAgICogIGJlIHVuZGVyIHNvbWUga2luZCBvZiBzdGFjayBhdHRhY2suCiAgICAgICogIEV2ZW4gdGhvdWdoIGl0IHNob3VsZG4ndCBtYXR0ZXIsIGxldCdzIGVyciBvbiB0aGUgc2lkZSBvZgogICAgICAqICBjYXV0aW9uIGFuZCB0aHJvdyBpbiBjYXNlIHRoZXJlIGlzIHNvbWUgaW52YWxpZCBzdGF0ZS4KICAgICAgKi8KICAgICAgcmVxdWlyZSAocmV0KTsKICAgfQoKICAgZXZlbnQgTWluaW5nQXR0ZW1wdEV2ZW50KAogICAgICAgYWRkcmVzcyBpbmRleGVkIF9mcm9tLAogICAgICAgdWludDI1NiBfdmFsdWUsCiAgICAgICB1aW50MjU2IGluZGV4ZWQgX2Jsb2NrTnVtYmVyLAogICAgICAgdWludDI1NiBfdG90YWxNaW5lZFdlaSwKICAgICAgIHVpbnQyNTYgX3RhcmdldERpZmZpY3VsdHlXZWkKICAgKTsKCiAgIGV2ZW50IExvZ0V2ZW50KAogICAgICAgc3RyaW5nIF9pbmZvCiAgICk7CgogICAvKioKICAgKiBAZGV2IEFkZCBhIG1pbmluZyBhdHRlbXB0IGZvciB0aGUgY3VycmVudCBpbnRlcm5hbCBibG9jawogICAqIEluaXRpYWxpemUgYW4gZW1wdHkgYmxvY2sgaWYgbm90IGNyZWF0ZWQKICAgKiBJbnZhbGlkYXRlIHRoaXMgbWluaW5nIGF0dGVtcHQgaWYgdGhlIGJsb2NrIGhhcyBiZWVuIHBhaWQgb3V0CiAgICovCgogICBmdW5jdGlvbiBtaW5lKCkgZXh0ZXJuYWwgcGF5YWJsZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uUmVlbnRyYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRBdHRlbXB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWluaW5nQWN0aXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRCbG9jayhleHRlcm5hbF90b19pbnRlcm5hbF9ibG9ja19udW1iZXIoY3VycmVudF9leHRlcm5hbF9ibG9jaygpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tSZWRlZW1lZChleHRlcm5hbF90b19pbnRlcm5hbF9ibG9ja19udW1iZXIoY3VycmVudF9leHRlcm5hbF9ibG9jaygpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxyZWFkeU1pbmVkKGV4dGVybmFsX3RvX2ludGVybmFsX2Jsb2NrX251bWJlcihjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpLCBtc2cuc2VuZGVyKSByZXR1cm5zIChib29sKSB7CiAgICAgIC8qIExldCdzIGltbWVkaWF0ZWx5IGFkanVzdCB0aGUgZGlmZmljdWx0eQogICAgICAqICBJbiBjYXNlIGFuIGFibm9ybWFsIHBlcmlvZCBvZiB0aW1lIGhhcyBlbGFwc2VkCiAgICAgICogIG5vYm9keSBoYXMgYmVlbiBtaW5pbmcgZXRjLgogICAgICAqICBXaWxsIGxldCB1cyByZWNvdmVyIHRoZSBuZXR3b3JrIGV2ZW4gaWYgdGhlCiAgICAgICogZGlmZmljdWx0eSBzcGlrZXMgdG8gc29tZSBhYnN1cmQgYW1vdW50CiAgICAgICogdGhpcyBzaG91bGQgb25seSBoYXBwZW4gb24gdGhlIGZpcnN0IGF0dGVtcHQgb24gYSBibG9jawogICAgICAqLwogICAgICB1aW50MjU2IGludGVybmFsQmxvY2tOdW0gPSBleHRlcm5hbF90b19pbnRlcm5hbF9ibG9ja19udW1iZXIoY3VycmVudF9leHRlcm5hbF9ibG9jaygpKTsKICAgICAgbWluaW5nQXR0ZW1wdHNbaW50ZXJuYWxCbG9ja051bV1bbXNnLnNlbmRlcl0gPQogICAgICAgICAgICAgICAgICAgICBNaW5pbmdBdHRlbXB0KHtwcm9qZWN0ZWRPZmZzZXQ6IGJsb2NrRGF0YVtpbnRlcm5hbEJsb2NrTnVtXS5jdXJyZW50QXR0ZW1wdE9mZnNldCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1zZy52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDcmVhdGVkOiB0cnVlfSk7CgogICAgICAvLyBJbmNyZW1lbnQgdGhlIG1pbmluZyBhdHRlbXB0cyBmb3IgdGhpcyBibG9jawogICAgICBibG9ja0RhdGFbaW50ZXJuYWxCbG9ja051bV0udG90YWxNaW5pbmdBdHRlbXB0cyArPSAxOwogICAgICBibG9ja0RhdGFbaW50ZXJuYWxCbG9ja051bV0udG90YWxNaW5pbmdXZWkgKz0gbXNnLnZhbHVlOwogICAgICB0b3RhbFdlaUNvbW1pdHRlZCArPSBtc2cudmFsdWU7CgogICAgICAvKiBXZSBhcmUgdHJ5aW5nIHRvIHN0YWNrIG1pbmluZyBhdHRlbXB0cyBpbnRvIHRoZWlyIHJlbGF0aXZlCiAgICAgICogIHBvc2l0aW9ucyBpbiB0aGUga2V5IHNwYWNlLgogICAgICAqLwogICAgICBibG9ja0RhdGFbaW50ZXJuYWxCbG9ja051bV0uY3VycmVudEF0dGVtcHRPZmZzZXQgKz0gbXNnLnZhbHVlOwogICAgICBNaW5pbmdBdHRlbXB0RXZlbnQobXNnLnNlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgIG1zZy52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsQmxvY2tOdW0sCiAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0RhdGFbaW50ZXJuYWxCbG9ja051bV0udG90YWxNaW5pbmdXZWksCiAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0RhdGFbaW50ZXJuYWxCbG9ja051bV0udGFyZ2V0RGlmZmljdWx0eVdlaQogICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgLy8gQWxsIG1pbmluZyBhdHRlbXB0IEV0aGVyIGlzIGJ1cm5lZAogICAgICBidXJuKG1zZy52YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICB9CgogICAvLyBSZWRlbXB0aW9uIFJlbGF0ZWQKCiAgIG1vZGlmaWVyIHVzZXJNaW5lQXR0ZW1wdGVkKHVpbnQyNTYgX2Jsb2NrTnVtLCBhZGRyZXNzIF91c2VyKSB7CiAgICAgIHJlcXVpcmUoY2hlY2tNaW5pbmdBdHRlbXB0KF9ibG9ja051bSwgX3VzZXIpKTsKICAgICAgXzsKICAgfQogICAKICAgbW9kaWZpZXIgaXNCbG9ja01hdHVyZSh1aW50MjU2IF9ibG9ja051bWJlcikgewogICAgICByZXF1aXJlKF9ibG9ja051bWJlciAhPSBjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpOwogICAgICByZXF1aXJlKGNoZWNrQmxvY2tNYXR1cmUoX2Jsb2NrTnVtYmVyLCBjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpKTsKICAgICAgcmVxdWlyZShjaGVja1JlZGVtcHRpb25XaW5kb3coX2Jsb2NrTnVtYmVyLCBjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpKTsKICAgICAgXzsKICAgfQoKICAgLy8gSnVzdCBpbiBjYXNlIHRoaXMgYmxvY2sgZmFsbHMgb3V0c2lkZSBvZiB0aGUgYXZhaWxhYmxlCiAgIC8vIGJsb2NrIHJhbmdlLCBwb3NzaWJseSBiZWNhdXNlIG9mIGEgY2hhbmdlIGluIG5ldHdvcmsgcGFyYW1zCiAgIG1vZGlmaWVyIGlzQmxvY2tSZWFkYWJsZSh1aW50MjU2IF9ibG9ja051bWJlcikgewogICAgICBJbnRlcm5hbEJsb2NrIG1lbW9yeSBpQmxvY2sgPSBibG9ja0RhdGFbX2Jsb2NrTnVtYmVyXTsKICAgICAgdWludDI1NiB0YXJnZXRCbG9ja051bSA9IHRhcmdldEJsb2NrTnVtYmVyKF9ibG9ja051bWJlcik7CiAgICAgIHJlcXVpcmUocmVzb2x2ZV9ibG9ja19oYXNoKHRhcmdldEJsb2NrTnVtKSAhPSAwKTsKICAgICAgXzsKICAgfQoKICAgZnVuY3Rpb24gY2FsY3VsYXRlX2RpZmZpY3VsdHlfYXR0ZW1wdCh1aW50MjU2IHRhcmdldERpZmZpY3VsdHlXZWksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiB0b3RhbE1pbmluZ1dlaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IHZhbHVlKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAvLyBUaGUgdG90YWwgYW1vdW50IG9mIFdlaSBzZW50IGZvciB0aGlzIG1pbmluZyBhdHRlbXB0IGV4Y2VlZHMgdGhlIGRpZmZpY3VsdHkgbGV2ZWwKICAgICAgLy8gU28gdGhlIGNhbGN1bGF0aW9uIG9mIHBlcmNlbnRhZ2Uga2V5c3BhY2Ugc2hvdWxkIGJlIGRvbmUgb24gdGhlIHRvdGFsIHdlaS4KICAgICAgdWludDI1NiBzZWxlY3RlZERpZmZpY3VsdHlXZWkgPSAwOwogICAgICBpZiAodG90YWxNaW5pbmdXZWkgPiB0YXJnZXREaWZmaWN1bHR5V2VpKSB7CiAgICAgICAgIHNlbGVjdGVkRGlmZmljdWx0eVdlaSA9IHRvdGFsTWluaW5nV2VpOwogICAgICB9IGVsc2UgewogICAgICAgICBzZWxlY3RlZERpZmZpY3VsdHlXZWkgPSB0YXJnZXREaWZmaWN1bHR5V2VpOyAKICAgICAgfQoKICAgICAgLyogbm9ybWFsaXplIHRoZSB2YWx1ZSBhZ2FpbnN0IHRoZSBlbnRpcmUga2V5IHNwYWNlCiAgICAgICAqIE11bHRpcGx5IGl0IG91dCBiZWNhdXNlIHdlIGRvIG5vdCBoYXZlIGZsb2F0aW5nIHBvaW50CiAgICAgICAqIDEwMDAwMDAwIGlzIC4wMDAwMDAxICUgaW5jcmVtZW50cwogICAgICAqLwoKICAgICAgdWludDI1NiBpbnRlcm1lZGlhdGUgPSAoKHZhbHVlICogZGl2aXNpYmxlX3VuaXRzKSAvIHNlbGVjdGVkRGlmZmljdWx0eVdlaSk7CiAgICAgIHVpbnQyNTYgbWF4X2ludCA9IDA7CiAgICAgIC8vIFVuZGVyZmxvdyB0byBtYXhpbnQKICAgICAgbWF4X2ludCA9IG1heF9pbnQgLSAxOwoKICAgICAgaWYgKGludGVybWVkaWF0ZSA+PSBkaXZpc2libGVfdW5pdHMpIHsKICAgICAgICAgcmV0dXJuIG1heF9pbnQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgIHJldHVybiBpbnRlcm1lZGlhdGUgKiAobWF4X2ludCAvIGRpdmlzaWJsZV91bml0cyk7CiAgICAgIH0KICAgfQoKICAgZnVuY3Rpb24gY2FsY3VsYXRlX3JhbmdlX2F0dGVtcHQodWludDI1NiBkaWZmaWN1bHR5LCB1aW50MjU2IG9mZnNldCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYpIHsKICAgICAgIC8qIEJvdGggdGhlIGRpZmZpY3VsdHkgYW5kIG9mZnNldCBzaG91bGQgYmUgbm9ybWFsaXplZAogICAgICAgKiBhZ2FpbnN0IHRoZSBkaWZmaWN1bHR5IHNjYWxlLgogICAgICAgKiBJZiB0aGV5IGFyZSBub3Qgd2UgbWlnaHQgaGF2ZSBhbiBpbnRlZ2VyIG92ZXJmbG93CiAgICAgICAqLwogICAgICAgcmVxdWlyZShvZmZzZXQgKyBkaWZmaWN1bHR5ID49IG9mZnNldCk7CiAgICAgICByZXR1cm4gKG9mZnNldCwgb2Zmc2V0K2RpZmZpY3VsdHkpOwogICB9CgogICAvLyBUb3RhbCBhbGxvY2F0ZWQgcmV3YXJkIGlzIHByb3BvcnRpb25hbCB0byBidXJuIGNvbnRyaWJ1dGlvbiB0byBsaW1pdCBpbmNlbnRpdmUgZm9yCiAgIC8vIGhhc2ggZ3JpbmRpbmcgYXR0YWNrcwogICBmdW5jdGlvbiBjYWxjdWxhdGVfcHJvcG9ydGlvbmFsX3Jld2FyZCh1aW50MjU2IF9iYXNlUmV3YXJkLCB1aW50MjU2IF91c2VyQ29udHJpYnV0aW9uV2VpLCB1aW50MjU2IF90b3RhbENvbW1pdHRlZFdlaSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgcmVxdWlyZShfdXNlckNvbnRyaWJ1dGlvbldlaSA8PSBfdG90YWxDb21taXR0ZWRXZWkpOwogICByZXF1aXJlKF91c2VyQ29udHJpYnV0aW9uV2VpID4gMCk7CiAgIHJlcXVpcmUoX3RvdGFsQ29tbWl0dGVkV2VpID4gMCk7CiAgICAgIHVpbnQyNTYgaW50ZXJtZWRpYXRlID0gKChfdXNlckNvbnRyaWJ1dGlvbldlaSAqIGRpdmlzaWJsZV91bml0cykgLyBfdG90YWxDb21taXR0ZWRXZWkpOwoKICAgICAgaWYgKGludGVybWVkaWF0ZSA+PSBkaXZpc2libGVfdW5pdHMpIHsKICAgICAgICAgcmV0dXJuIF9iYXNlUmV3YXJkOwogICAgICB9IGVsc2UgewogICAgICAgICByZXR1cm4gaW50ZXJtZWRpYXRlICogKF9iYXNlUmV3YXJkIC8gZGl2aXNpYmxlX3VuaXRzKTsKICAgICAgfQogICB9CgogICBmdW5jdGlvbiBjYWxjdWxhdGVfYmFzZV9taW5pbmdfcmV3YXJkKHVpbnQyNTYgX3RvdGFsQmxvY2tzTWluZWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIC8qIEJsb2NrIHJld2FyZHMgc3RhcnRzIGF0IGluaXRpYWxfcmV3YXJkCiAgICAgICogIEV2ZXJ5IDEwIG1pbnV0ZXMKICAgICAgKiAgQmxvY2sgcmV3YXJkIGRlY3JlYXNlcyBieSA1MCUgZXZlcnkgMjEwMDAwIGJsb2NrcwogICAgICAqLwogICAgICB1aW50MjU2IG1pbmVkX2Jsb2NrX3BlcmlvZCA9IDA7CiAgICAgIGlmIChfdG90YWxCbG9ja3NNaW5lZCA8IDIxMDAwMCkgewogICAgICAgICAgIG1pbmVkX2Jsb2NrX3BlcmlvZCA9IDIxMDAwMDsKICAgICAgfSBlbHNlIHsKICAgICAgICAgICBtaW5lZF9ibG9ja19wZXJpb2QgPSBfdG90YWxCbG9ja3NNaW5lZDsKICAgICAgfQoKICAgICAgLy8gQWdhaW4gd2UgaGF2ZSB0byBkbyB0aGlzIGl0ZXJhdGl2ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcKICAgICAgLy8gcG9pbnQgbGltaXRhdGlvbnMgaW4gc29saWRpdHkuCiAgICAgIHVpbnQyNTYgdG90YWxfcmV3YXJkID0gaW5pdGlhbF9yZXdhcmQgKiAoMTAgKiogZGVjaW1hbHMpOyAKICAgICAgdWludDI1NiBpID0gMTsKICAgICAgdWludDI1NiByZXdhcmRwZXJpb2RzID0gbWluZWRfYmxvY2tfcGVyaW9kIC8gMjEwMDAwOwogICAgICBpZiAobWluZWRfYmxvY2tfcGVyaW9kICUgMjEwMDAwID4gMCkgewogICAgICAgICByZXdhcmRwZXJpb2RzICs9IDE7CiAgICAgIH0KICAgICAgZm9yIChpPTE7IGkgPCByZXdhcmRwZXJpb2RzOyBpKyspIHsKICAgICAgICAgIHRvdGFsX3Jld2FyZCA9IHRvdGFsX3Jld2FyZCAvIDI7CiAgICAgIH0KICAgICAgcmV0dXJuIHRvdGFsX3Jld2FyZDsKICAgfQoKICAgLy8gQnJlYWsgb3V0IHRoZSBleHBlY3RlZCB3ZWkgY2FsY3VsYXRpb24KICAgLy8gZm9yIGVhc3kgZXh0ZXJuYWwgdGVzdGluZwogICBmdW5jdGlvbiBjYWxjdWxhdGVfbmV4dF9leHBlY3RlZF93ZWkodWludDI1NiBfdG90YWxXZWlDb21taXR0ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF90b3RhbFdlaUV4cGVjdGVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfbWluaW11bURpZmZpY3VsdHlUaHJlc2hvbGRXZWksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9kaWZmaWN1bHR5U2NhbGVNdWx0aXBsaWVyTGltaXQpIHB1YmxpYyBjb25zdGFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJucyAodWludDI1NikgewogICAgICAgICAgCiAgICAgICAgICAvKiBUaGUgYWRqdXN0bWVudCB3aW5kb3cgaGFzIGJlZW4gZnVsZmlsbGVkCiAgICAgICAgICAqICBUaGUgbmV3IGRpZmZpY3VsdHkgc2hvdWxkIGJlIGJvdW5kZWQgYnkgdGhlIHRvdGFsIHdlaSBhY3R1YWxseSBzcGVudAogICAgICAgICAgKiBjYXBwZWQgYXQgZGlmZmljdWx0eVNjYWxlTXVsdGlwbGllckxpbWl0IHRpbWVzCiAgICAgICAgICAqLwogICAgICAgICAgdWludDI1NiBsb3dlckJvdW5kID0gX3RvdGFsV2VpRXhwZWN0ZWQgLyBfZGlmZmljdWx0eVNjYWxlTXVsdGlwbGllckxpbWl0OwogICAgICAgICAgdWludDI1NiB1cHBlckJvdW5kID0gX3RvdGFsV2VpRXhwZWN0ZWQgKiBfZGlmZmljdWx0eVNjYWxlTXVsdGlwbGllckxpbWl0OwoKICAgICAgICAgIGlmIChfdG90YWxXZWlDb21taXR0ZWQgPCBsb3dlckJvdW5kKSB7CiAgICAgICAgICAgICAgX3RvdGFsV2VpRXhwZWN0ZWQgPSBsb3dlckJvdW5kOwogICAgICAgICAgfSBlbHNlIGlmIChfdG90YWxXZWlDb21taXR0ZWQgPiB1cHBlckJvdW5kKSB7CiAgICAgICAgICAgICAgX3RvdGFsV2VpRXhwZWN0ZWQgPSB1cHBlckJvdW5kOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdG90YWxXZWlFeHBlY3RlZCA9IF90b3RhbFdlaUNvbW1pdHRlZDsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiBJZiBkaWZmaWN1bHR5IGRyb3BzIHRvbyBsb3cgbGV0cyBzZXQgaXQgdG8gb3VyIG1pbmltdW0uCiAgICAgICAgICAqICBUaGlzIG1heSBoYWx0IGNvaW4gY3JlYXRpb24sIGJ1dCBvYnZpb3VzbHkgZG9lcyBub3QgYWZmZWN0CiAgICAgICAgICAqICB0b2tlbiB0cmFuc2FjdGlvbnMuCiAgICAgICAgICAqLwogICAgICAgICAgaWYgKF90b3RhbFdlaUV4cGVjdGVkIDwgX21pbmltdW1EaWZmaWN1bHR5VGhyZXNob2xkV2VpKSB7CiAgICAgICAgICAgICAgX3RvdGFsV2VpRXhwZWN0ZWQgPSBfbWluaW11bURpZmZpY3VsdHlUaHJlc2hvbGRXZWk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIF90b3RhbFdlaUV4cGVjdGVkOwogICAgfQoKICAgZnVuY3Rpb24gYWRqdXN0X2RpZmZpY3VsdHkoKSBpbnRlcm5hbCB7CiAgICAgIC8qIFRvdGFsIGJsb2NrcyBtaW5lZCBtaWdodCBub3QgYmUgaW5jcmVhc2luZyBpZiB0aGUgCiAgICAgICogIGRpZmZpY3VsdHkgaXMgdG9vIGhpZ2guIFNvIHdlIHNob3VsZCBpbnN0ZWFkIGJhc2UgdGhlIGFkanVzdG1lbnQKICAgICAgKiBvbiB0aGUgcHJvZ3Jlc3Npb24gb2YgdGhlIEV0aGVyZXVtIG5ldHdvcmsuCiAgICAgICogU28gdGhhdCB0aGUgZGlmZmljdWx0eSBjYW4gaW5jcmVhc2UvZGVmbGF0ZSByZWdhcmRsZXNzIG9mIHNwYXJzZQogICAgICAqIG1pbmluZyBhdHRlbXB0cwogICAgICAqLwoKICAgICAgaWYgKChjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkgLSBsYXN0RGlmZmljdWx0eUFkanVzdG1lbnRFdGhlcmV1bUJsb2NrKSA+IChkaWZmaWN1bHR5QWRqdXN0bWVudFBlcmlvZCAqIGJsb2NrQ3JlYXRpb25SYXRlKSkgewoKICAgICAgICAgIC8vIEdldCB0aGUgbmV3IHRvdGFsIHdlaSBleHBlY3RlZCB2aWEgc3RhdGljIGZ1bmN0aW9uCiAgICAgICAgICB0b3RhbFdlaUV4cGVjdGVkID0gY2FsY3VsYXRlX25leHRfZXhwZWN0ZWRfd2VpKHRvdGFsV2VpQ29tbWl0dGVkLCB0b3RhbFdlaUV4cGVjdGVkLCBtaW5pbXVtRGlmZmljdWx0eVRocmVzaG9sZFdlaSAqIGRpZmZpY3VsdHlBZGp1c3RtZW50UGVyaW9kLCBkaWZmaWN1bHR5U2NhbGVNdWx0aXBsaWVyTGltaXQpOwoKICAgICAgICAgIGN1cnJlbnREaWZmaWN1bHR5V2VpID0gdG90YWxXZWlFeHBlY3RlZCAvIGRpZmZpY3VsdHlBZGp1c3RtZW50UGVyaW9kOwoKICAgICAgICAgIC8vIFJlZ2FyZGxlc3Mgb2YgZGlmZmljdWx0eSBhZGp1c3RtZW50LCBsZXQgdXMgemVybyB0b3RhbFdlaUNvbW1pdGVkCiAgICAgICAgICB0b3RhbFdlaUNvbW1pdHRlZCA9IDA7CgogICAgICAgICAgLy8gTGV0cyByZXNldCB0aGUgZGlmZmljdWx0eSBhZGp1c3RtZW50IGJsb2NrIHRhcmdldAogICAgICAgICAgbGFzdERpZmZpY3VsdHlBZGp1c3RtZW50RXRoZXJldW1CbG9jayA9IGN1cnJlbnRfZXh0ZXJuYWxfYmxvY2soKTsKCiAgICAgIH0KICAgfQoKICAgZXZlbnQgQmxvY2tDbGFpbWVkRXZlbnQoCiAgICAgICBhZGRyZXNzIGluZGV4ZWQgX2Zyb20sCiAgICAgICBhZGRyZXNzIGluZGV4ZWQgX2ZvckNyZWRpdFRvLAogICAgICAgdWludDI1NiBfcmV3YXJkLAogICAgICAgdWludDI1NiBpbmRleGVkIF9ibG9ja051bWJlcgogICApOwoKICAgbW9kaWZpZXIgb25seVdpbm5lcih1aW50MjU2IF9ibG9ja051bWJlcikgewogICAgICByZXF1aXJlKGNoZWNrV2lubmluZyhfYmxvY2tOdW1iZXIpKTsKICAgICAgXzsKICAgfQoKCiAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBhdm9pZCBzdGFjayBpc3N1ZXMKICAgZnVuY3Rpb24gY2FsY3VsYXRlX3Jld2FyZCh1aW50MjU2IF90b3RhbEJsb2Nrc01pbmVkLCBhZGRyZXNzIF9zZW5kZXIsIHVpbnQyNTYgX2Jsb2NrTnVtYmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICByZXR1cm4gY2FsY3VsYXRlX3Byb3BvcnRpb25hbF9yZXdhcmQoY2FsY3VsYXRlX2Jhc2VfbWluaW5nX3Jld2FyZChfdG90YWxCbG9ja3NNaW5lZCksIG1pbmluZ0F0dGVtcHRzW19ibG9ja051bWJlcl1bX3NlbmRlcl0udmFsdWUsIGJsb2NrRGF0YVtfYmxvY2tOdW1iZXJdLnRvdGFsTWluaW5nV2VpKTsgCiAgIH0KCiAgIC8qKiAKICAgKiBAZGV2IENsYWltIHRoZSBtaW5pbmcgcmV3YXJkIGZvciBhIGdpdmVuIGJsb2NrCiAgICogQHBhcmFtIF9ibG9ja051bWJlciBUaGUgaW50ZXJuYWwgYmxvY2sgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gY2xhaW0KICAgKiBAcGFyYW0gZm9yQ3JlZGl0VG8gV2hlbiB0aGUgbWluZXIgYWNjb3VudCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYWNjb3VudAogICAqIHdoZXJlIHdlIHdhbnQgdG8gZGVsaXZlciB0aGUgcmVkZWVtZWQgQml0Y29pbmV1bS4gSS5lIEhhcmQgd2FsbGV0LgogICAqLwogICBmdW5jdGlvbiBjbGFpbSh1aW50MjU2IF9ibG9ja051bWJlciwgYWRkcmVzcyBmb3JDcmVkaXRUbykKICAgICAgICAgICAgICAgICAgbm9uUmVlbnRyYW50CiAgICAgICAgICAgICAgICAgIGJsb2NrUmVkZWVtZWQoX2Jsb2NrTnVtYmVyKQogICAgICAgICAgICAgICAgICBpc0Jsb2NrTWF0dXJlKF9ibG9ja051bWJlcikKICAgICAgICAgICAgICAgICAgaXNCbG9ja1JlYWRhYmxlKF9ibG9ja051bWJlcikKICAgICAgICAgICAgICAgICAgdXNlck1pbmVBdHRlbXB0ZWQoX2Jsb2NrTnVtYmVyLCBtc2cuc2VuZGVyKQogICAgICAgICAgICAgICAgICBvbmx5V2lubmVyKF9ibG9ja051bWJlcikKICAgICAgICAgICAgICAgICAgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAvKiBJZiBhdHRlbXB0IGlzIHZhbGlkLCBpbnZhbGlkYXRlIHJlZGVtcHRpb24KICAgICAgKiAgRGlmZmljdWx0eSBpcyBhZGp1c3RlZCBoZXJlCiAgICAgICogIGFuZCBvbiBiaWRkaW5nLCBpbiBjYXNlIGJpZGRpbmcgc3RhbGxzIG91dCBmb3Igc29tZQogICAgICAqICB1bnVzdWFsIHBlcmlvZCBvZiB0aW1lLgogICAgICAqICBEbyBldmVyeXRoaW5nLCB0aGVuIGFkanVzdCBzdXBwbHkgYW5kIGJhbGFuY2UKICAgICAgKi8KICAgICAgYmxvY2tEYXRhW19ibG9ja051bWJlcl0ucGF5ZWQgPSB0cnVlOwogICAgICBibG9ja0RhdGFbX2Jsb2NrTnVtYmVyXS5wYXllZSA9IG1zZy5zZW5kZXI7CiAgICAgIHRvdGFsQmxvY2tzTWluZWQgPSB0b3RhbEJsb2Nrc01pbmVkICsgMTsKCiAgICAgIHVpbnQyNTYgcHJvcG9ydGlvbmFsX3Jld2FyZCA9IGNhbGN1bGF0ZV9yZXdhcmQodG90YWxCbG9ja3NNaW5lZCwgbXNnLnNlbmRlciwgX2Jsb2NrTnVtYmVyKTsKICAgICAgYmFsYW5jZXNbZm9yQ3JlZGl0VG9dID0gYmFsYW5jZXNbZm9yQ3JlZGl0VG9dLmFkZChwcm9wb3J0aW9uYWxfcmV3YXJkKTsKICAgICAgdG90YWxTdXBwbHkgKz0gcHJvcG9ydGlvbmFsX3Jld2FyZDsKICAgICAgQmxvY2tDbGFpbWVkRXZlbnQobXNnLnNlbmRlciwgZm9yQ3JlZGl0VG8sCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb25hbF9yZXdhcmQsCiAgICAgICAgICAgICAgICAgICAgICAgIF9ibG9ja051bWJlcik7CiAgICAgIC8vIE1pbmluZyByZXdhcmRzIHNob3VsZCBzaG93IHVwIGFzIEVSQzIwIHRyYW5zZmVyIGV2ZW50cwogICAgICAvLyBTbyB0aGF0IEVSQzIwIHNjYW5uZXJzIHdpbGwgc2VlIHRva2VuIGNyZWF0aW9uLgogICAgICBUcmFuc2Zlcih0aGlzLCBmb3JDcmVkaXRUbywgcHJvcG9ydGlvbmFsX3Jld2FyZCk7CiAgICAgIHJldHVybiB0cnVlOwogICB9CgogICAvKiogCiAgICogQGRldiBDbGFpbSB0aGUgbWluaW5nIHJld2FyZCBmb3IgYSBnaXZlbiBibG9jawogICAqIEBwYXJhbSBfYmxvY2tOdW0gVGhlIGludGVybmFsIGJsb2NrIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIGNsYWltCiAgICovCiAgIGZ1bmN0aW9uIGlzQmxvY2tSZWRlZW1lZCh1aW50MjU2IF9ibG9ja051bSkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICBpZiAoIWJsb2NrRGF0YVtfYmxvY2tOdW1dLmlzQ3JlYXRlZCkgewogICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgfSBlbHNlIHsKICAgICAgICAgcmV0dXJuIGJsb2NrRGF0YVtfYmxvY2tOdW1dLnBheWVkOwogICAgIH0KICAgfQoKICAgLyoqIAogICAqIEBkZXYgR2V0IHRoZSB0YXJnZXQgYmxvY2sgaW4gdGhlIHdpbm5pbmcgZXF1YXRpb24gCiAgICogQHBhcmFtIF9ibG9ja051bSBpcyB0aGUgaW50ZXJuYWwgYmxvY2sgbnVtYmVyIHRvIGdldCB0aGUgdGFyZ2V0IGJsb2NrIGZvcgogICAqLwogICBmdW5jdGlvbiB0YXJnZXRCbG9ja051bWJlcih1aW50MjU2IF9ibG9ja051bSkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgcmV0dXJuICgoX2Jsb2NrTnVtICsgMSkgKiBibG9ja0NyZWF0aW9uUmF0ZSk7CiAgIH0KCiAgIC8qKiAKICAgKiBAZGV2IENoZWNrIHdoZXRoZXIgYSBnaXZlbiBibG9jayBpcyBtYXR1cmUgCiAgICogQHBhcmFtIF9ibG9ja051bSBpcyB0aGUgaW50ZXJuYWwgYmxvY2sgbnVtYmVyIHRvIGNoZWNrIAogICAqLwogICBmdW5jdGlvbiBjaGVja0Jsb2NrTWF0dXJlKHVpbnQyNTYgX2Jsb2NrTnVtLCB1aW50MjU2IF9leHRlcm5hbGJsb2NrKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgIHJldHVybiAoX2V4dGVybmFsYmxvY2sgPj0gdGFyZ2V0QmxvY2tOdW1iZXIoX2Jsb2NrTnVtKSk7CiAgIH0KCiAgIC8qKgogICAqIEBkZXYgQ2hlY2sgdGhlIHJlZGVtcHRpb24gd2luZG93IGZvciBhIGdpdmVuIGJsb2NrCiAgICogQHBhcmFtIF9ibG9ja051bSBpcyB0aGUgaW50ZXJuYWwgYmxvY2sgbnVtYmVyIHRvIGNoZWNrCiAgICovCgogICBmdW5jdGlvbiBjaGVja1JlZGVtcHRpb25XaW5kb3codWludDI1NiBfYmxvY2tOdW0sIHVpbnQyNTYgX2V4dGVybmFsYmxvY2spIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICB1aW50MjU2IF90YXJnZXRibG9jayA9IHRhcmdldEJsb2NrTnVtYmVyKF9ibG9ja051bSk7CiAgICAgICByZXR1cm4gX2V4dGVybmFsYmxvY2sgPj0gX3RhcmdldGJsb2NrICYmIF9leHRlcm5hbGJsb2NrIDwgKF90YXJnZXRibG9jayArIDI1Nik7CiAgIH0KCiAgIC8qKiAKICAgKiBAZGV2IENoZWNrIHdoZXRoZXIgYSBtaW5pbmcgYXR0ZW1wdCB3YXMgbWFkZSBieSBzZW5kZXIgZm9yIHRoaXMgYmxvY2sKICAgKiBAcGFyYW0gX2Jsb2NrTnVtIGlzIHRoZSBpbnRlcm5hbCBibG9jayBudW1iZXIgdG8gY2hlY2sKICAgKi8KICAgZnVuY3Rpb24gY2hlY2tNaW5pbmdBdHRlbXB0KHVpbnQyNTYgX2Jsb2NrTnVtLCBhZGRyZXNzIF9zZW5kZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICByZXR1cm4gbWluaW5nQXR0ZW1wdHNbX2Jsb2NrTnVtXVtfc2VuZGVyXS5pc0NyZWF0ZWQ7CiAgIH0KCiAgIC8qKiAKICAgKiBAZGV2IERpZCB0aGUgdXNlciB3aW4gYSBzcGVjaWZpYyBibG9jayBhbmQgY2FuIGNsYWltIGl0PwogICAqIEBwYXJhbSBfYmxvY2tOdW0gaXMgdGhlIGludGVybmFsIGJsb2NrIG51bWJlciB0byBjaGVjawogICAqLwogICBmdW5jdGlvbiBjaGVja1dpbm5pbmcodWludDI1NiBfYmxvY2tOdW0pIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgaWYgKGNoZWNrTWluaW5nQXR0ZW1wdChfYmxvY2tOdW0sIG1zZy5zZW5kZXIpICYmIGNoZWNrQmxvY2tNYXR1cmUoX2Jsb2NrTnVtLCBjdXJyZW50X2V4dGVybmFsX2Jsb2NrKCkpKSB7CgogICAgICBJbnRlcm5hbEJsb2NrIG1lbW9yeSBpQmxvY2sgPSBibG9ja0RhdGFbX2Jsb2NrTnVtXTsKICAgICAgdWludDI1NiB0YXJnZXRCbG9ja051bSA9IHRhcmdldEJsb2NrTnVtYmVyKGlCbG9jay5ibG9ja051bWJlcik7CiAgICAgIE1pbmluZ0F0dGVtcHQgbWVtb3J5IGF0dGVtcHQgPSBtaW5pbmdBdHRlbXB0c1tfYmxvY2tOdW1dW21zZy5zZW5kZXJdOwoKICAgICAgdWludDI1NiBkaWZmaWN1bHR5QXR0ZW1wdCA9IGNhbGN1bGF0ZV9kaWZmaWN1bHR5X2F0dGVtcHQoaUJsb2NrLnRhcmdldERpZmZpY3VsdHlXZWksIGlCbG9jay50b3RhbE1pbmluZ1dlaSwgYXR0ZW1wdC52YWx1ZSk7CiAgICAgIHVpbnQyNTYgYmVnaW5SYW5nZTsKICAgICAgdWludDI1NiBlbmRSYW5nZTsKICAgICAgdWludDI1NiB0YXJnZXRCbG9ja0hhc2hJbnQ7CgogICAgICAoYmVnaW5SYW5nZSwgZW5kUmFuZ2UpID0gY2FsY3VsYXRlX3JhbmdlX2F0dGVtcHQoZGlmZmljdWx0eUF0dGVtcHQsCiAgICAgICAgICBjYWxjdWxhdGVfZGlmZmljdWx0eV9hdHRlbXB0KGlCbG9jay50YXJnZXREaWZmaWN1bHR5V2VpLCBpQmxvY2sudG90YWxNaW5pbmdXZWksIGF0dGVtcHQucHJvamVjdGVkT2Zmc2V0KSk7IAogICAgICB0YXJnZXRCbG9ja0hhc2hJbnQgPSB1aW50MjU2KGtlY2NhazI1NihyZXNvbHZlX2Jsb2NrX2hhc2godGFyZ2V0QmxvY2tOdW0pKSk7CiAgIAogICAgICAvLyBUaGlzIGlzIHRoZSB3aW5uaW5nIGNvbmRpdGlvbgogICAgICBpZiAoKGJlZ2luUmFuZ2UgPCB0YXJnZXRCbG9ja0hhc2hJbnQpICYmIChlbmRSYW5nZSA+PSB0YXJnZXRCbG9ja0hhc2hJbnQpKQogICAgICB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAKICAgICB9CgogICAgIHJldHVybiBmYWxzZTsKICAgICAKICAgfQoKfQoKCgpjb250cmFjdCBCaXRjb2luZXVtIGlzIEVSQzIwTWluZWFibGUsIFRyYW5zbXV0YWJsZSB7Cgogc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkJpdGNvaW5ldW0iOwogc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiQlRFIjsKIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gODsKIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IElOSVRJQUxfU1VQUExZID0gMDsKCiAvLyAyMSBNaWxsaW9uIGNvaW5zIGF0IDggZGVjaW1hbCBwbGFjZXMKIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE1BWF9TVVBQTFkgPSAyMTAwMDAwMCAqICgxMCoqOCk7CiAKIGZ1bmN0aW9uIEJpdGNvaW5ldW0oKSB7CgogICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgIG1heGltdW1TdXBwbHkgPSBNQVhfU1VQUExZOwoKICAgIC8vIDAuMDAwMSBFdGhlciBwZXIgYmxvY2sKICAgIC8vIERpZmZpY3VsdHkgaXMgc28gbG93IGJlY2F1c2UgaXQgZG9lc24ndCBpbmNsdWRlCiAgICAvLyBnYXMgcHJpY2VzIGZvciBleGVjdXRpb24KICAgIGN1cnJlbnREaWZmaWN1bHR5V2VpID0gMTAwIHN6YWJvOwogICAgbWluaW11bURpZmZpY3VsdHlUaHJlc2hvbGRXZWkgPSAxMDAgc3phYm87CiAgICAKICAgIC8vIEV0aGVyZXVtIGJsb2NrcyB0byBpbnRlcm5hbCBibG9ja3MKICAgIC8vIFJvdWdobHkgMTAgbWludXRlIHdpbmRvd3MKICAgIGJsb2NrQ3JlYXRpb25SYXRlID0gNTA7CgogICAgLy8gQWRqdXN0IGRpZmZpY3VsdHkgeCBjbGFpbWVkIGludGVybmFsIGJsb2NrcwogICAgZGlmZmljdWx0eUFkanVzdG1lbnRQZXJpb2QgPSAyMDE2OwoKICAgIC8vIFJld2FyZCBhZGp1c3RtZW50CgogICAgcmV3YXJkQWRqdXN0bWVudFBlcmlvZCA9IDIxMDAwMDsKCiAgICAvLyBUaGlzIGlzIHRoZSBlZmZlY3RpdmUgYmxvY2sgY291bnRlciwgc2luY2UgYmxvY2sgd2luZG93cyBhcmUgZGlzY29udGludW91cwogICAgdG90YWxCbG9ja3NNaW5lZCA9IDA7CgogICAgdG90YWxXZWlFeHBlY3RlZCA9IGRpZmZpY3VsdHlBZGp1c3RtZW50UGVyaW9kICogY3VycmVudERpZmZpY3VsdHlXZWk7CgogICAgLy8gQmFsYW5jZSBvZiB0aGlzIGFkZHJlc3MgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRvdGFsIGJ1cm5lZCB2YWx1ZQogICAgLy8gbm90IGluY2x1ZGluZyBmZWVzIHNwZW50LgogICAgYnVybkFkZHJlc3MgPSAweGRlYUREZUFEREVhRGRlYURkRUFkZEVBRERFQWREZWFkREVBRERFYUQ7CgogICAgbGFzdERpZmZpY3VsdHlBZGp1c3RtZW50RXRoZXJldW1CbG9jayA9IGJsb2NrLm51bWJlcjsgCiB9CgoKICAgLyoqCiAgICogQGRldiBCaXRjb2luZXVtIGNhbiBleHRlbmQgcHJvb2Ygb2YgYnVybiBpbnRvIGNvbnZlcnRhYmxlIHVuaXRzCiAgICogdGhhdCBoYXZlIHRva2VuIHNwZWNpZmljIHByb3BlcnRpZXMKICAgKiBAcGFyYW0gdG8gaXMgdGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IHRoYXQgQml0Y29pbmV1bSBpcyBjb252ZXJ0aW5nIGludG8KICAgKiBAcGFyYW0gdmFsdWUgaXMgdGhlIHF1YW50aXR5IG9mIEJpdGNvaW5ldW0gdG8gYXR0ZW1wdCB0byBjb252ZXJ0CiAgICovCgogIGZ1bmN0aW9uIHRyYW5zbXV0ZShhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBub25SZWVudHJhbnQgcmV0dXJucyAoYm9vbCwgdWludDI1NikgewogICAgcmVxdWlyZSh2YWx1ZSA+IDApOwogICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB2YWx1ZSk7CiAgICByZXF1aXJlKHRvdGFsU3VwcGx5ID49IHZhbHVlKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKHZhbHVlKTsKICAgIFRyYW5zbXV0YWJsZUludGVyZmFjZSB0YXJnZXQgPSBUcmFuc211dGFibGVJbnRlcmZhY2UodG8pOwogICAgYm9vbCBfcmVzdWx0ID0gZmFsc2U7CiAgICB1aW50MjU2IF90b3RhbCA9IDA7CiAgICAoX3Jlc3VsdCwgX3RvdGFsKSA9IHRhcmdldC50cmFuc211dGVkKHZhbHVlKTsKICAgIHJlcXVpcmUgKF9yZXN1bHQpOwogICAgVHJhbnNtdXRlZChtc2cuc2VuZGVyLCB0aGlzLCB0bywgdmFsdWUsIF90b3RhbCk7CiAgICByZXR1cm4gKF9yZXN1bHQsIF90b3RhbCk7CiAgfQoKIH0='.
	

]
