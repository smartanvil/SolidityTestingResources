Class {
	#name : #SRTF1488F98B930dc7b9eaa47874b3536944A47654b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF1488F98B930dc7b9eaa47874b3536944A47654b >> base64 [
	^ ''.
	

]
