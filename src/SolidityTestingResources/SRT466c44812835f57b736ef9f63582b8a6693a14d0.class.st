Class {
	#name : #SRT466c44812835f57b736ef9f63582b8a6693a14d0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT466c44812835f57b736ef9f63582b8a6693a14d0 >> base64 [
	^ ''.
	

]
