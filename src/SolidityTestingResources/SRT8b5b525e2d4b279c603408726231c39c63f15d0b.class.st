Class {
	#name : #SRT8b5b525e2d4b279c603408726231c39c63f15d0b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b5b525e2d4b279c603408726231c39c63f15d0b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoKCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgRXRoYmV0VG9rZW4KICovCmNvbnRyYWN0IEV0aGJldFRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewoKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRXRoYmV0IjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJFQkVUIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAyOyAvLyBvbmx5IHR3byBkZWNpbWluYWxzLCB0b2tlbiBjYW5ub3QgYmUgZGl2aWRlZCBwYXN0IDEvMTAwdGgKCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxMDAwMDAwMDAwOyAvLyAxMCBtaWxsaW9uICsgMiBkZWNpbWFscwoKICAvKioKICAgKiBAZGV2IENvbnRydWN0b3IgdGhhdCBnaXZlcyBtc2cuc2VuZGVyIGFsbCBvZiBleGlzdGluZyB0b2tlbnMuCiAgICovCiAgZnVuY3Rpb24gRXRoYmV0VG9rZW4oKSB7CiAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBJTklUSUFMX1NVUFBMWTsKICB9Cn0KCgovLyBJbXBvcnQgbmV3ZXIgU2FmZU1hdGggdmVyc2lvbiB1bmRlciBuZXcgbmFtZSB0byBhdm9pZCBjb25mbGljdCB3aXRoIHRoZSB2ZXJzaW9uIGluY2x1ZGVkIGluIEV0aGJldFRva2VuCgovLyBTYWZlTWF0aCBMaWJyYXJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvYmxvYi80OWI0MmU4Njk2M2RmNzE5MmU3MDI0ZTBlNWJkMzBmYTlkN2NjYmVmL2NvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKCmxpYnJhcnkgU2FmZU1hdGgyIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgRXRoYmV0IHsKICB1c2luZyBTYWZlTWF0aDIgZm9yIHVpbnQyNTY7CgogIC8qCiAgKiBFdmVudHMKICAqLwoKICBldmVudCBEZXBvc2l0KGFkZHJlc3MgaW5kZXhlZCB1c2VyLCB1aW50IGFtb3VudCwgdWludCBiYWxhbmNlKTsKCiAgZXZlbnQgV2l0aGRyYXcoYWRkcmVzcyBpbmRleGVkIHVzZXIsIHVpbnQgYW1vdW50LCB1aW50IGJhbGFuY2UpOwoKICBldmVudCBMb2NrZWRCYWxhbmNlKGFkZHJlc3MgaW5kZXhlZCB1c2VyLCB1aW50IGFtb3VudCk7CgogIGV2ZW50IFVubG9ja2VkQmFsYW5jZShhZGRyZXNzIGluZGV4ZWQgdXNlciwgdWludCBhbW91bnQpOwoKICBldmVudCBFeGVjdXRlZEJldChhZGRyZXNzIGluZGV4ZWQgd2lubmVyLCBhZGRyZXNzIGluZGV4ZWQgbG9zZXIsIHVpbnQgYW1vdW50KTsKCiAgZXZlbnQgUmVsYXlBZGRyZXNzQ2hhbmdlZChhZGRyZXNzIHJlbGF5KTsKCgogIC8qCiAgICogU3RvcmFnZQogICAqLwogIGFkZHJlc3MgcHVibGljIHJlbGF5OwoKICBFdGhiZXRUb2tlbiBwdWJsaWMgdG9rZW47CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGxvY2tlZEJhbGFuY2VzOwoKICAvKgogICogTW9kaWZpZXJzCiAgKi8KCiAgbW9kaWZpZXIgaXNSZWxheSgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSByZWxheSk7CiAgICBfOwogIH0KCiAgLyoKICAqIFB1YmxpYyBmdW5jdGlvbnMKICAqLwoKICAvKioKICAqIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IKICAqIEBwYXJhbSBfcmVsYXkgUmVsYXkgQWRkcmVzcwogICogQHBhcmFtIF90b2tlbkFkZHJlc3MgRXRoYmV0IFRva2VuIEFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIEV0aGJldChhZGRyZXNzIF9yZWxheSwgYWRkcmVzcyBfdG9rZW5BZGRyZXNzKSBwdWJsaWMgewogICAgLy8gbWFrZSBzdXJlIHJlbGF5IGFkZHJlc3Mgc2V0CiAgICByZXF1aXJlKF9yZWxheSAhPSBhZGRyZXNzKDApKTsKCiAgICByZWxheSA9IF9yZWxheTsKICAgIHRva2VuID0gRXRoYmV0VG9rZW4oX3Rva2VuQWRkcmVzcyk7CiAgfQoKICAvKioKICAqIEBkZXYgc2V0IHJlbGF5IGFkZHJlc3MKICAqIEBwYXJhbSBfcmVsYXkgUmVsYXkgQWRkcmVzcwogICovCiAgZnVuY3Rpb24gc2V0UmVsYXkoYWRkcmVzcyBfcmVsYXkpIHB1YmxpYyBpc1JlbGF5IHsKICAgIC8vIG1ha2Ugc3VyZSBhZGRyZXNzIG5vdCBudWxsCiAgICByZXF1aXJlKF9yZWxheSAhPSBhZGRyZXNzKDApKTsKCiAgICByZWxheSA9IF9yZWxheTsKCiAgICBSZWxheUFkZHJlc3NDaGFuZ2VkKF9yZWxheSk7CiAgfQoKICAvKioKICAgKiBAZGV2IGRlcG9zaXQgRUJFVCB0b2tlbnMgaW50byB0aGUgY29udHJhY3QKICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgdG8gZGVwb3NpdAogICAqLwogIGZ1bmN0aW9uIGRlcG9zaXQodWludCBfYW1vdW50KSBwdWJsaWMgewogICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CgogICAgLy8gdG9rZW4uYXBwcm92ZSBuZWVkcyB0byBiZSBjYWxsZWQgYmVmb3JlaGFuZAogICAgLy8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIHVzZXIgdG8gdGhlIGNvbnRyYWN0CiAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBfYW1vdW50KSk7CgogICAgLy8gYWRkIHRoZSB0b2tlbnMgdG8gdGhlIHVzZXIncyBiYWxhbmNlCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChfYW1vdW50KTsKCiAgICBEZXBvc2l0KG1zZy5zZW5kZXIsIF9hbW91bnQsIGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICB9CgogIC8qKgogICAqIEBkZXYgd2l0aGRyYXcgRUJFVCB0b2tlbnMgZnJvbSB0aGUgY29udHJhY3QKICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgdG8gd2l0aGRyYXcKICAgKi8KICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IF9hbW91bnQpIHB1YmxpYyB7CiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCk7CgogICAgLy8gc3VidHJhY3QgdGhlIHRva2VucyBmcm9tIHRoZSB1c2VyJ3MgYmFsYW5jZQogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CgogICAgLy8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIGNvbnRyYWN0IHRvIHRoZSB1c2VyCiAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIF9hbW91bnQpKTsKCiAgICBXaXRoZHJhdyhtc2cuc2VuZGVyLCBfYW1vdW50LCBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgfQoKCiAgLyoqCiAgICogQGRldiBMb2NrIHVzZXIgYmFsYW5jZSB0byBiZSB1c2VkIGZvciBiZXQKICAgKiBAcGFyYW0gX3VzZXJBZGRyZXNzIFVzZXIgQWRkcmVzcwogICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byBiZSBsb2NrZWQKICAgKi8KICBmdW5jdGlvbiBsb2NrQmFsYW5jZShhZGRyZXNzIF91c2VyQWRkcmVzcywgdWludCBfYW1vdW50KSBwdWJsaWMgaXNSZWxheSB7CiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgIHJlcXVpcmUoYmFsYW5jZXNbX3VzZXJBZGRyZXNzXSA+PSBfYW1vdW50KTsKCiAgICAvLyBzdWJ0cmFjdCB0aGUgdG9rZW5zIGZyb20gdGhlIHVzZXIncyBiYWxhbmNlCiAgICBiYWxhbmNlc1tfdXNlckFkZHJlc3NdID0gYmFsYW5jZXNbX3VzZXJBZGRyZXNzXS5zdWIoX2Ftb3VudCk7CgogICAgLy8gYWRkIHRoZSB0b2tlbnMgdG8gdGhlIHVzZXIncyBsb2NrZWQgYmFsYW5jZQogICAgbG9ja2VkQmFsYW5jZXNbX3VzZXJBZGRyZXNzXSA9IGxvY2tlZEJhbGFuY2VzW191c2VyQWRkcmVzc10uYWRkKF9hbW91bnQpOwoKICAgIExvY2tlZEJhbGFuY2UoX3VzZXJBZGRyZXNzLCBfYW1vdW50KTsKICB9CgogIC8qKgogICAqIEBkZXYgVW5sb2NrIHVzZXIgYmFsYW5jZQogICAqIEBwYXJhbSBfdXNlckFkZHJlc3MgVXNlciBBZGRyZXNzCiAgICogQHBhcmFtIF9hbW91bnQgQW1vdW50IHRvIGJlIGxvY2tlZAogICAqLwogIGZ1bmN0aW9uIHVubG9ja0JhbGFuY2UoYWRkcmVzcyBfdXNlckFkZHJlc3MsIHVpbnQgX2Ftb3VudCkgcHVibGljIGlzUmVsYXkgewogICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICByZXF1aXJlKGxvY2tlZEJhbGFuY2VzW191c2VyQWRkcmVzc10gPj0gX2Ftb3VudCk7CgogICAgLy8gc3VidHJhY3QgdGhlIHRva2VucyBmcm9tIHRoZSB1c2VyJ3MgbG9ja2VkIGJhbGFuY2UKICAgIGxvY2tlZEJhbGFuY2VzW191c2VyQWRkcmVzc10gPSBsb2NrZWRCYWxhbmNlc1tfdXNlckFkZHJlc3NdLnN1YihfYW1vdW50KTsKCiAgICAvLyBhZGQgdGhlIHRva2VucyB0byB0aGUgdXNlcidzICBiYWxhbmNlCiAgICBiYWxhbmNlc1tfdXNlckFkZHJlc3NdID0gYmFsYW5jZXNbX3VzZXJBZGRyZXNzXS5hZGQoX2Ftb3VudCk7CgogICAgVW5sb2NrZWRCYWxhbmNlKF91c2VyQWRkcmVzcywgX2Ftb3VudCk7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0IHVzZXIgYmFsYW5jZQogICogQHBhcmFtIF91c2VyQWRkcmVzcyBVc2VyIEFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF91c2VyQWRkcmVzcykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfdXNlckFkZHJlc3NdOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldCB1c2VyIGxvY2tlZCBiYWxhbmNlCiAgKiBAcGFyYW0gX3VzZXJBZGRyZXNzIFVzZXIgQWRkcmVzcwogICovCiAgZnVuY3Rpb24gbG9ja2VkQmFsYW5jZU9mKGFkZHJlc3MgX3VzZXJBZGRyZXNzKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIGxvY2tlZEJhbGFuY2VzW191c2VyQWRkcmVzc107CiAgfQoKICAvKioKICAgKiBAZGV2IEV4ZWN1dGUgYmV0CiAgICogQHBhcmFtIF9tYWtlciBNYWtlciBBZGRyZXNzCiAgICogQHBhcmFtIF9jYWxsZXIgQ2FsbGVyIEFkZHJlc3MKICAgKiBAcGFyYW0gX21ha2VyV29uIERpZCB0aGUgbWFrZXIgd2luCiAgICogQHBhcmFtIF9hbW91bnQgYW1vdW50CiAgICovCiAgZnVuY3Rpb24gZXhlY3V0ZUJldChhZGRyZXNzIF9tYWtlciwgYWRkcmVzcyBfY2FsbGVyLCBib29sIF9tYWtlcldvbiwgdWludCBfYW1vdW50KSBpc1JlbGF5IHB1YmxpYyB7CiAgICAvL1RoZSBjYWxsZXIgbXVzdCBoYXZlIGVub3VnaCBiYWxhbmNlCiAgICByZXF1aXJlKGJhbGFuY2VzW19jYWxsZXJdID49IF9hbW91bnQpOwoKICAgIC8vVGhlIG1ha2VyIG11c3QgaGF2ZSBlbm91Z2ggbG9ja2VkIGJhbGFuY2UKICAgIHJlcXVpcmUobG9ja2VkQmFsYW5jZXNbX21ha2VyXSA+PSBfYW1vdW50KTsKCiAgICAvLyB1bmxvY2sgbWFrZXIgYmFsYW5jZQogICAgdW5sb2NrQmFsYW5jZShfbWFrZXIsIF9hbW91bnQpOwoKICAgIHZhciB3aW5uZXIgPSBfbWFrZXJXb24gPyBfbWFrZXIgOiBfY2FsbGVyOwogICAgdmFyIGxvc2VyID0gX21ha2VyV29uID8gX2NhbGxlciA6IF9tYWtlcjsKCiAgICAvLyBhZGQgdGhlIHRva2VucyB0byB0aGUgd2lubmVyJ3MgYmFsYW5jZQogICAgYmFsYW5jZXNbd2lubmVyXSA9IGJhbGFuY2VzW3dpbm5lcl0uYWRkKF9hbW91bnQpOwogICAgLy8gcmVtb3ZlIHRoZSB0b2tlbnMgZnJvbSB0aGUgbG9zZXIncyAgYmFsYW5jZQogICAgYmFsYW5jZXNbbG9zZXJdID0gYmFsYW5jZXNbbG9zZXJdLnN1YihfYW1vdW50KTsKCiAgICAvL0xvZyB0aGUgZXZlbnQKICAgIEV4ZWN1dGVkQmV0KHdpbm5lciwgbG9zZXIsIF9hbW91bnQpOwogIH0KCn0='.
	

]
