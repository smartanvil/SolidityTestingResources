Class {
	#name : #SRT8aed3f09ffaa1e6246e3b4b5790f13e1976f6055,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8aed3f09ffaa1e6246e3b4b5790f13e1976f6055 >> base64 [
	^ ''.
	

]
