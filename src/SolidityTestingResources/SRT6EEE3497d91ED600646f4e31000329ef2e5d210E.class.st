Class {
	#name : #SRT6EEE3497d91ED600646f4e31000329ef2e5d210E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6EEE3497d91ED600646f4e31000329ef2e5d210E >> base64 [
	^ ''.
	

]
