Class {
	#name : #SRT50fd51b624ca86be3dbc640515ebc407a163cd6c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50fd51b624ca86be3dbc640515ebc407a163cd6c >> base64 [
	^ ''.
	

]
