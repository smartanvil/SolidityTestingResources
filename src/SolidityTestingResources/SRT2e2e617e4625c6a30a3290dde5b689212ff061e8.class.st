Class {
	#name : #SRT2e2e617e4625c6a30a3290dde5b689212ff061e8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e2e617e4625c6a30a3290dde5b689212ff061e8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgppbnRlcmZhY2UgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwoKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBPd25lZCBDb250cmFjdAogKiAKICogVGhpcyBpcyBhIGNvbnRyYWN0IHRyYWl0IHRvIGluaGVyaXQgZnJvbS4gQ29udHJhY3RzIHRoYXQgaW5oZXJpdCBmcm9tIE93bmVkIAogKiBhcmUgYWJsZSB0byBtb2RpZnkgZnVuY3Rpb25zIHRvIGJlIG9ubHkgY2FsbGFibGUgYnkgdGhlIG93bmVyIG9mIHRoZQogKiBjb250cmFjdC4KICogCiAqIEJ5IGRlZmF1bHQgaXQgaXMgaW1wb3NzaWJsZSB0byBjaGFuZ2UgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdC4KICovCmNvbnRyYWN0IE93bmVkIHsKICAgIC8qKgogICAgICogQ29udHJhY3Qgb3duZXIuCiAgICAgKiAKICAgICAqIFRoaXMgdmFsdWUgaXMgc2V0IGF0IGNvbnRyYWN0IGNyZWF0aW9uIHRpbWUuCiAgICAgKi8KICAgIGFkZHJlc3Mgb3duZXI7CgogICAgLyoqCiAgICAgKiBDb250cmFjdCBjb25zdHJ1Y3Rvci4KICAgICAqIAogICAgICogVGhpcyBzZXRzIHRoZSBvd25lciBvZiB0aGUgT3duZWQgY29udHJhY3QgYXQgdGhlIHRpbWUgb2YgY29udHJhY3QKICAgICAqIGNyZWF0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogTW9kaWZ5IG1ldGhvZCB0byBvbmx5IGFsbG93IHRoZSBvd25lciB0byBjYWxsIGl0LgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KfQoKLyoqCiAqIEFldGhpYSBDaGkgVG9rZW4gU2FsZQogKiAKICogVGhpcyBjb250cmFjdCByZXByZXNlbnQgdGhlIDUwJSBvZmYgc2FsZSBmb3IgdGhlIGluLWdhbWUgY3VycmVuY3kgb2YgQWV0aGlhLgogKiBUaGUgbm9ybWFsIGV4Y2hhbmdlIHJhdGUgaW4tZ2FtZSBpcyAwLjAwMSBFVEggZm9yIDEgQ0hJLiBEdXJpbmcgdGhlIHNhbGUsIHRoZQogKiBleGNoYW5nZSByYXRlIHdpbGwgYmUgMC4wMDA1IEVUSCBmb3IgMSBDSEkuCiAqIAogKiBUaGUgY29udHJhY3Qgb25seSBleGNoYW5nZXMgd2hvbGUgKGludGVnZXIpIHZhbHVlcyBvZiBDSEkuIElmIHRoZSBzZW5kZXIKICogc2VuZHMgYSB2YWx1ZSBvZiAwLjAwMDUxIEVUSCwgdGhlIHNlbmRlciB3aWxsIGdldCAxIENISSBhbmQgMC4wMDAwMSBFVEggYmFjay4KICogCiAqIEluIHRoZSBjYXNlIG5vdCBlbm91Z2ggQ0hJIHRva2VucyByZW1haW4gdG8gZnVsbHkgZXhjaGFuZ2UgdGhlIHNlbmRlcidzIHZhbHVlCiAqIGZyb20gRVRIIHRvIENISSwgdGhlIHJlbWFpbmluZyBDSEkgd2lsbCBiZSBwYWlkIG91dCwgYW5kIHRoZSByZW1haW5pbmcgRVRICiAqIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIHNlbmRlci4KICovCmNvbnRyYWN0IENoaVNhbGUgaXMgT3duZWQgewogICAgLyoqCiAgICAgKiBUaGUgQ0hJIHRva2VuIGNvbnRyYWN0LgogICAgICovCiAgICBFUkMyMCBjaGlUb2tlbkNvbnRyYWN0OwoKICAgIC8qKgogICAgICogVGhlIHN0YXJ0IGRhdGUgb2YgdGhlIENISSBzYWxlIGluIHNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2guCiAgICAgKiAKICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBGZWJydWFyeSAxN3RoLCAxMjowMDowMCBVVEMuCiAgICAgKi8KICAgIHVpbnQyNTYgY29uc3RhbnQgU1RBUlRfREFURSA9IDE1MTg4Njg4MDA7CgogICAgLyoqCiAgICAgKiBUaGUgZW5kIGRhdGUgb2YgdGhlIENISSBzYWxlIGluIHNlY29uZHMgc2luY2UgdGhlIFVOSVggZXBvY2guCiAgICAgKiAKICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBGZWJydWFyeSAxOXRoLCAxMjowMDowMCBVVEMuCiAgICAgKi8KICAgIHVpbnQyNTYgY29uc3RhbnQgRU5EX0RBVEUgPSAxNTE5MDQxNjAwOwoKICAgIC8qKgogICAgICogVGhlIHByaWNlIHBlciBDSEkgdG9rZW4gaW4gRVRILgogICAgICovCiAgICB1aW50MjU2IHRva2VuUHJpY2UgPSAwLjAwMDUgZXRoZXI7CiAgICAKICAgIC8qKgogICAgICogVGhlIG51bWJlciBvZiBDaGkgdG9rZW5zIGZvciBzYWxlLgogICAgICovCiAgICB1aW50MjU2IHRva2Vuc0ZvclNhbGUgPSAxMDAwMDAwMDsKCiAgICAvKioKICAgICAqIENoaSB0b2tlbiBzYWxlIGV2ZW50LgogICAgICogCiAgICAgKiBGb3IgYXVkaXQgYW5kIGxvZ2dpbmcgcHVycG9zZXMsIGFsbCBjaGkgdG9rZW4gc2FsZXMgYXJlIGxvZ2dlZCBieSAKICAgICAqIGFjcXVpcmVyLgogICAgICovCiAgICBldmVudCBMb2dDaGlTYWxlKGFkZHJlc3MgaW5kZXhlZCBfYWNxdWlyZXIsIHVpbnQyNTYgX2Ftb3VudCk7CgogICAgLyoqCiAgICAgKiBDb250cmFjdCBjb25zdHJ1Y3Rvci4KICAgICAqIAogICAgICogVGhpcyBwYXNzZXMgdGhlIGFkZHJlc3Mgb2YgdGhlIENoaSB0b2tlbiBjb250cmFjdCBhZGRyZXNzIHRvIHRoZQogICAgICogQ2hpIHNhbGUgY29udHJhY3QuIEFkZGl0aW9uYWxseSBpdCBzZXRzIHRoZSBvd25lciB0byB0aGUgY29udHJhY3QgCiAgICAgKiBjcmVhdG9yLgogICAgICovCiAgICBmdW5jdGlvbiBDaGlTYWxlKGFkZHJlc3MgX2NoaVRva2VuQWRkcmVzcykgT3duZWQoKSBwdWJsaWMgewogICAgICAgIGNoaVRva2VuQ29udHJhY3QgPSBFUkMyMChfY2hpVG9rZW5BZGRyZXNzKTsKICAgIH0KCiAgICAvKioKICAgICAqIEJ1eSBDaGkgdG9rZW5zLgogICAgICogCiAgICAgKiBUaGUgY29zdCBvZiBhIENoaSB0b2tlbiBkdXJpbmcgdGhlIHNhbGUgaXMgMC4wMDA1IGV0aGVyIHBlciB0b2tlbi4gVGhpcwogICAgICogY29udHJhY3QgYWNjZXB0cyBhbnkgYW1vdW50IGVxdWFsIHRvIG9yIGFib3ZlIDAuMDAwNSBldGhlci4gSXQgdHJpZXMgdG8KICAgICAqIGV4Y2hhbmdlIGFzIG1hbnkgQ2hpIHRva2VucyBmb3IgdGhlIHNlbnQgdmFsdWUgYXMgcG9zc2libGUuIFRoZSByZW1haW5pbmcKICAgICAqIGV0aGVyIGlzIHNlbnQgYmFjay4KICAgICAqCiAgICAgKiBJbiB0aGUgY2FzZSB3aGVyZSBub3QgZW5vdWdoIENoaSB0b2tlbnMgYXJlIGF2YWlsYWJsZSBmb3IgdGhlIHRvIGV4Y2hhbmdlCiAgICAgKiBmb3IgdGhlIGVudGlyZXR5IG9mIHRoZSBzZW50IHZhbHVlLCBhbiBhdHRlbXB0IHdpbGwgYmUgbWFkZSB0byBleGNoYW5nZQogICAgICogYXMgbXVjaCBhcyBwb3NzaWJsZS4gVGhlIHJlbWFpbmluZyBldGhlciBpcyB0aGVuIHNlbnQgYmFjay4KICAgICAqIAogICAgICogVGhlIHNhbGUgc3RhcnRzIGF0IEZlYnJ1YXJ5IDE3dGgsIDEyOjAwOjAwIFVUQywgYW5kIGVuZHMgYXQgRmVicnVhcnkKICAgICAqIDE5dGgsIDEyOjAwOjAwIFVUQywgbGFzdGluZyBhIHRvdGFsIG9mIDQ4IGhvdXJzLiBUcmFuc2FjdGlvbnMgdGhhdCBvY2N1cgogICAgICogb3V0c2lkZSB0aGlzIHRpbWUgcGVyaW9kIGFyZSByZWplY3RlZC4KICAgICAqLwogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShTVEFSVF9EQVRFIDw9IG5vdyk7CiAgICAgICAgcmVxdWlyZShFTkRfREFURSA+PSBub3cpOwogICAgICAgIHJlcXVpcmUodG9rZW5zRm9yU2FsZSA+IDApOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHRva2VuUHJpY2UpOwoKICAgICAgICB1aW50MjU2IHRva2VucyA9IG1zZy52YWx1ZSAvIHRva2VuUHJpY2U7CiAgICAgICAgdWludDI1NiByZW1haW5kZXI7CgogICAgICAgIC8vIElmIHRoZXJlIGFyZW4ndCBlbm91Z2ggdG9rZW5zIHRvIGV4Y2hhbmdlLCB0cnkgdG8gZXhjaGFuZ2UgYXMgbWFueQogICAgICAgIC8vIGFzIHBvc3NpYmxlLCBhbmQgcGF5IG91dCB0aGUgcmVtYWluZGVyLiBFbHNlLCBpZiB0aGVyZSBhcmUgZW5vdWdoCiAgICAgICAgLy8gdG9rZW5zLCBwYXkgdGhlIHJlbWFpbmluZyBldGhlciB0aGF0IGNvdWxkbid0IGJlIGV4Y2hhbmdlZCBmb3IgdG9rZW5zIAogICAgICAgIC8vIGJhY2sgdG8gdGhlIHNlbmRlci4KICAgICAgICBpZiAodG9rZW5zID4gdG9rZW5zRm9yU2FsZSkgewogICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnNGb3JTYWxlOwoKICAgICAgICAgICAgcmVtYWluZGVyID0gbXNnLnZhbHVlIC0gdG9rZW5zICogdG9rZW5QcmljZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZW1haW5kZXIgPSBtc2cudmFsdWUgJSB0b2tlblByaWNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB0b2tlbnNGb3JTYWxlIC09IHRva2VuczsKCiAgICAgICAgTG9nQ2hpU2FsZShtc2cuc2VuZGVyLCB0b2tlbnMpOwoKICAgICAgICBjaGlUb2tlbkNvbnRyYWN0LnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2Vucyk7CgogICAgICAgIGlmIChyZW1haW5kZXIgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIocmVtYWluZGVyKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBGYWxsYmFjayBwYXlhYmxlIG1ldGhvZC4KICAgICAqCiAgICAgKiBUaGlzIGlzIGluIHRoZSBjYXNlIHNvbWVvbmUgY2FsbHMgdGhlIGNvbnRyYWN0IHdpdGhvdXQgc3BlY2lmeWluZyB0aGUKICAgICAqIGNvcnJlY3QgbWV0aG9kIHRvIGNhbGwuIFRoaXMgbWV0aG9kIHdpbGwgZW5zdXJlIHRoZSBmYWlsdXJlIG9mIGEKICAgICAqIHRyYW5zYWN0aW9uIHRoYXQgd2FzIHdyb25nZnVsbHkgZXhlY3V0ZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgZXh0ZXJuYWwgewogICAgICAgIHJldmVydCgpOwogICAgfQoKICAgIC8qKgogICAgICogV2l0aGRyYXcgYWxsIGZ1bmRzIGZyb20gY29udHJhY3QuCiAgICAgKiAKICAgICAqIEFkZGl0aW9uYWxseSwgdGhpcyBtb3ZlcyBhbGwgcmVtYWluaW5nIENoaSB0b2tlbnMgYmFjayB0byB0aGUgb3JpZ2luYWwKICAgICAqIG93bmVyIHRvIGJlIHVzZWQgZm9yIHJlZGlzdHJpYnV0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICAgICAgdWludDI1NiBjdXJyZW50QmFsYW5jZSA9IGNoaVRva2VuQ29udHJhY3QuYmFsYW5jZU9mKHRoaXMpOwoKICAgICAgICBjaGlUb2tlbkNvbnRyYWN0LnRyYW5zZmVyKG93bmVyLCBjdXJyZW50QmFsYW5jZSk7CgogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1Rva2VucygpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b2tlbnNGb3JTYWxlOwogICAgfQp9'.
	

]
