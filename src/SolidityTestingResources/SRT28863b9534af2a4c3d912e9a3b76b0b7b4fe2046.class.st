Class {
	#name : #SRT28863b9534af2a4c3d912e9a3b76b0b7b4fe2046,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT28863b9534af2a4c3d912e9a3b76b0b7b4fe2046 >> base64 [
	^ ''.
	

]
