Class {
	#name : #SRTf7B54dDFe88AcE53FbF7a9b3D9f8FE9452a78ab4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf7B54dDFe88AcE53FbF7a9b3D9f8FE9452a78ab4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLyoqCiAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgKiBhY2NvdW50LgogICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgfQogICAgfQoKfQoKY29udHJhY3QgRnVuZCBpcyBPd25hYmxlICB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlNsb3QgVG9rZW4iOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMDsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlNMT1QiOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gIjAuNyI7CiAgICAKICAgIHVpbnQ4IGNvbnN0YW50IFRPS0VOUyA9IDA7CiAgICB1aW50OCBjb25zdGFudCBCQUxBTkNFID0gMTsKICAgIAogICAgdWludDI1NiB0b3RhbFdpdGhkcmF3bjsgICAgIC8vIG9mIEV0aGVyCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsgLy8gb2YgVG9rZW5zCiAgICAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2WzJdW10pIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHdpdGhkcmF3YWxzOwogICAgCiAgICBldmVudCBXaXRoZHJhd24oCiAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBpbnZlc3RvciwgCiAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgCiAgICAgICAgICAgIHVpbnQyNTYgd2VpQW1vdW50KTsKICAgIGV2ZW50IE1pbnQoCiAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB0bywgCiAgICAgICAgICAgIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwogICAgZXZlbnQgVHJhbnNmZXIoCiAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBmcm9tLCAKICAgICAgICAgICAgYWRkcmVzcyBpbmRleGVkIHRvLCAKICAgICAgICAgICAgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbCgKICAgICAgICAgICAgYWRkcmVzcyBpbmRleGVkIG93bmVyLCAKICAgICAgICAgICAgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIAogICAgICAgICAgICB1aW50MjU2IHZhbHVlKTsKICAgICAgICAgICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEZ1bmQoKSBwYXlhYmxlIHt9CiAgICBmdW5jdGlvbigpIHBheWFibGUge30KICAgIAogICAgZnVuY3Rpb24gZ2V0RXRoZXJCYWxhbmNlKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkgewogICAgICAgIHVpbnQyNTZbMl1bXSBtZW1vcnkgc25hcHNob3RzID0gYmFsYW5jZXNbX293bmVyXTsKICAgICAgICAKICAgICAgICBpZiAoc25hcHNob3RzLmxlbmd0aCA9PSAwKSB7IHJldHVybiAwOyB9IC8vIG5vIGRhdGEKCiAgICAgICAgdWludDI1NiBiYWxhbmNlID0gMDsKICAgICAgICB1aW50MjU2IHByZXZpb3VzU25hcFRvdGFsU3Rha2UgPSAwOwogICAgICAgIAogICAgICAgIC8vIGFkZCB1cCBhbGwgc25hcHNob3RzCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwIDsgaSA8IHNuYXBzaG90cy5sZW5ndGggOyBpKyspIHsKICAgICAgICAgICAgLy8gZWFjaCBzbmFwc2hvdCBoYXMgYW1vdW50IG9mIHRva2VucyBhbmQgdG90YWxCYWxhbmNlIGF0IHRoZSB0aW1lIGV4Y2VwdCBsYXN0LCB3aGljaCBzaG91bGQgYmUgY2FsY3VsYXRlZCB3aXRoIGN1cnJlbnQgc3Rha2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChpID09IHNuYXBzaG90cy5sZW5ndGgtMSkgewogICAgICAgICAgICAgICAgLy8gYWRkIGN1cnJlbnQgZGF0YQogICAgICAgICAgICAgICAgdWludDI1NiBjdXJyZW50VG9rZW5zID0gc25hcHNob3RzW2ldW1RPS0VOU107CiAgICAgICAgICAgICAgICB1aW50MjU2IGIgPSBjdXJyZW50VG9rZW5zLm11bCggZ2V0VG90YWxTdGFrZSgpLnN1YihwcmV2aW91c1NuYXBUb3RhbFN0YWtlKSApLmRpdih0b3RhbFN1cHBseSk7CiAgICAgICAgICAgICAgICBiYWxhbmNlID0gYmFsYW5jZS5hZGQoYik7CiAgICAgICAgCiAgICAgICAgICAgICAgICAvLyByZWR1Y2Ugd2l0aGRyYXdhbHMKICAgICAgICAgICAgICAgIHJldHVybiBiYWxhbmNlLnN1Yih3aXRoZHJhd2Fsc1tfb3duZXJdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgdWludDI1NiBzbmFwVG90YWxTdGFrZSA9IHNuYXBzaG90c1tpXVtCQUxBTkNFXTsKICAgICAgICAgICAgLy8gaWYgaXQncyB0aGUgZmlyc3QgZWxlbWVudCwgbm90aGluZyBpcyBzdWJzdHJhY3RlZCBmcm9tIHNuYXBzaG90J3MgdG90YWwgc3Rha2UsIGhlbmNlIHByZXZpb3VzIHN0YWtlIHdpbGwgYmUgMAogICAgICAgICAgICB1aW50MjU2IHNwYW5CYWxhbmNlID0gc25hcHNob3RzW2ldW1RPS0VOU10ubXVsKHNuYXBUb3RhbFN0YWtlLnN1YihwcmV2aW91c1NuYXBUb3RhbFN0YWtlKSkuZGl2KHRvdGFsU3VwcGx5KTsKICAgICAgICAgICAgYmFsYW5jZSA9IGJhbGFuY2UuYWRkKHNwYW5CYWxhbmNlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHByZXZpb3VzU25hcFRvdGFsU3Rha2UgPSBwcmV2aW91c1NuYXBUb3RhbFN0YWtlLmFkZChzbmFwVG90YWxTdGFrZSk7IC8vIGZvciB0aGUgbmV4dCBsb29wIGFuZCBuZXh0IGNvZGUsIG5lZWRzIHRvIGJlICs9IAogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHVpbnQyNTZbMl1bXSBtZW1vcnkgc25hcHNob3RzID0gYmFsYW5jZXNbX293bmVyXTsKICAgICAgICBpZiAoc25hcHNob3RzLmxlbmd0aCA9PSAwKSB7IHJldHVybiAwOyB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHNuYXBzaG90c1tzbmFwc2hvdHMubGVuZ3RoLTFdW1RPS0VOU107CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFRvdGFsU3Rha2UoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBfdG90YWxTdGFrZSkgewogICAgICAgIC8vIHRoZSB0b3RhbCBzaXplIG9mIHRoZSBwaWUsIHVuYWZmZWN0ZWQgYnkgd2l0aGRyYXdhbHMKICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlICsgdG90YWxXaXRoZHJhd247CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZShhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShnZXRFdGhlckJhbGFuY2UobXNnLnNlbmRlcikgPj0gX3ZhbHVlKTsKICAgICAgICAKICAgICAgICB3aXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSA9IHdpdGhkcmF3YWxzW21zZy5zZW5kZXJdLmFkZChfdmFsdWUpOwogICAgICAgIHRvdGFsV2l0aGRyYXduID0gdG90YWxXaXRoZHJhd24uYWRkKF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgX3RvLnRyYW5zZmVyKF92YWx1ZSk7CiAgICAgICAgV2l0aGRyYXduKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyRnJvbVByaXZhdGUobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb21Qcml2YXRlKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHJpdmF0ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gX3ZhbHVlKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IGZyb21Ub2tlbnMgPSBiYWxhbmNlT2YobXNnLnNlbmRlcik7CiAgICAgICAgcHVzaFNuYXBzaG90KG1zZy5zZW5kZXIsIGZyb21Ub2tlbnMtX3ZhbHVlKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHRvVG9rZW5zID0gYmFsYW5jZU9mKF90byk7CiAgICAgICAgcHVzaFNuYXBzaG90KF90bywgdG9Ub2tlbnMrX3ZhbHVlKTsKICAgICAgICAKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBwdXNoU25hcHNob3QoYWRkcmVzcyBfYmVuZWZpY2lhcnksIHVpbnQyNTYgX2Ftb3VudCkgcHJpdmF0ZSB7CiAgICAgICAgYmFsYW5jZXNbX2JlbmVmaWNpYXJ5XS5wdXNoKFtfYW1vdW50LCAwXSk7CiAgICAgICAgCiAgICAgICAgaWYgKGJhbGFuY2VzW19iZW5lZmljaWFyeV0ubGVuZ3RoID4gMSkgewogICAgICAgICAgICAvLyB1cGRhdGUgcHJldmlvdXMgc25hcHNob3QgYmFsYW5jZQogICAgICAgICAgICB1aW50MjU2IGxhc3RJbmRleCA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmxlbmd0aC0xOwogICAgICAgICAgICBiYWxhbmNlc1tfYmVuZWZpY2lhcnldW2xhc3RJbmRleC0xXVtCQUxBTkNFXSA9IGdldFRvdGFsU3Rha2UoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seU93bmVyIGNhbk1pbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHB1c2hTbmFwc2hvdChfdG8sIF9hbW91bnQuYWRkKGJhbGFuY2VPZihfdG8pKSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgTWludChfdG8sIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsgLy8gc28gaXQgaXMgZGlzcGxheWVkIHByb3Blcmx5IG9uIEV0aGVyU2NhbgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCgogICAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIHRyYW5zZmVyRnJvbVByaXZhdGUoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKKiBAdGl0bGUgU2xvdENyb3dkc2FsZQoqLwpjb250cmFjdCBTbG90Q3Jvd2RzYWxlIGlzIE93bmFibGUsIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIEZ1bmQgcHVibGljIGZ1bmQ7CgogICAgdWludDI1NiBjb25zdGFudCBFVEhFUl9DQVAgICA9IDQ3MTUgZXRoZXI7ICAgLy8gZXRoZXIKICAgIHVpbnQyNTYgY29uc3RhbnQgVE9LRU5fQ0FQICAgPSAxMDAwMDAwMDsgICAgIC8vIHRva2VucwogICAgdWludDI1NiBjb25zdGFudCBQUklDRSAgICAgICA9IDEgZXRoZXI7ICAgICAgLy8gZXRoZXIKICAgIHVpbnQyNTYgY29uc3RhbnQgQk9VTlRZICAgICAgPSAyNTAwMDA7ICAgICAgIC8vIHRva2VucwogICAgdWludDI1NiBjb25zdGFudCBPV05FUlNfU1RBS0UgPSAzNzUwMDAwOyAgICAgLy8gdG9rZW5zCiAgICB1aW50MjU2IGNvbnN0YW50IE9XTkVSU19MT0NLID0gMjAwMDAwOyAgICAgICAvLyBibG9ja3MKICAgIGFkZHJlc3MgcHVibGljIGJvdW50eVdhbGxldDsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyc1dhbGxldDsKICAgIHVpbnQyNTYgcHVibGljIGxvY2tCZWd1bkF0QmxvY2s7CiAgICAKICAgIGJvb2wgcHVibGljIGJvdW50eURpc3RyaWJ1dGVkID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBvd25lcnNoaXBEaXN0cmlidXRlZCA9IGZhbHNlOwogICAgCiAgICB1aW50MjU2WzEwXSBvdXRjb21lcyA9IFsxMDAwMDAwLCAgICAvLyAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjUwMDAwLCAgICAvLyAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMDAwLCAgICAvLyAyIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDAwMCwgICAgLy8gMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwMCwgICAgLy8gNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDAwMCwgICAgLy8gNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAwMCwgICAgLy8gNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTI1MCwgICAgLy8gNwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMCwgICAgLy8gOAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwMF07ICAgLy8gOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIDAgIDEgICAyICAgMyAgICA0ICAgIDUgICAgNiAgICAgNyAgICAgOCAgICAgOSAgCiAgICB1aW50MTZbMTBdIGNoYW5jZXMgPSAgICAgICAgWzEsIDQsIDEwLCA1MCwgMTAwLCAyNTAsIDUwMCwgIDgwMCwgMTAwMCwgMjAwMF07CiAgICB1aW50MTZbMTBdIGFkZGVkVXBDaGFuY2VzID0gWzEsIDUsIDE1LCA2NSwgMTY1LCA0MTUsIDkxNSwgMTcxNSwgMjcxNSwgNDcxNV07CiAgICAKICAgIGV2ZW50IE93bmVyc2hpcERpc3RyaWJ1dGVkKCk7CiAgICBldmVudCBCb3VudHlEaXN0cmlidXRlZCgpOwoKICAgIGZ1bmN0aW9uIFNsb3RDcm93ZHNhbGUoKSBwYXlhYmxlIHsKICAgICAgICAvLyBmdW5kID0gRnVuZChfZnVuZEFkZHJlc3MpOyAvLyBzdGlsbCBuZWVkIHRvIGNoYW5nZSBvd25lcnNoaXAKICAgICAgICBmdW5kID0gbmV3IEZ1bmQoKTsKICAgICAgICBib3VudHlXYWxsZXQgPSAweDAwZGVGOTM5MjhBM2FBRDU4MUYzOTA0OWEzQmJDYWFCOUJiRTM2Qzg7CiAgICAgICAgb3duZXJzV2FsbGV0ID0gMHgwMDAxNjE5MTUzZDhGRTE1QjNGQTcwNjA1ODU5MjY1Y2IwMDMzYzFhOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gdG8gYnV5IHRpY2tldHMKICAgICAgICBidXlUb2tlbkZvcihtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29ycmVjdGVkSW5kZXgodWludDggX2luZGV4KSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKHVpbnQ4IF9uZXdJbmRleCkgewogICAgICAgIHJlcXVpcmUoX2luZGV4IDwgY2hhbmNlcy5sZW5ndGgpOwogICAgICAgIC8vIGlmIHRoZSBjaGFuY2UgaXMgMCwgcmV0dXJuIHRoZSBuZXh0IGluZGV4CiAgICAgICAgCiAgICAgICAgaWYgKGNoYW5jZXNbX2luZGV4XSAhPSAwKSB7CiAgICAgICAgICAgIHJldHVybiBfaW5kZXg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGNvcnJlY3RlZEluZGV4KHVpbnQ4KChfaW5kZXggKyAxKSAlIGNoYW5jZXMubGVuZ3RoKSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRSYXRlSW5kZXgodWludDI1NiBfcmFuZG9tTnVtYmVyKSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKHVpbnQ4IF9yYXRlSW5kZXgpIHsKICAgICAgICBmb3IgKHVpbnQ4IGkgPSAwIDsgaSA8IHVpbnQ4KGNoYW5jZXMubGVuZ3RoKSA7IGkrKykgewogICAgICAgICAgICBpZiAoX3JhbmRvbU51bWJlciA8IGFkZGVkVXBDaGFuY2VzW2ldKSB7IAogICAgICAgICAgICAgICAgcmV0dXJuIGNvcnJlY3RlZEluZGV4KGkpOyAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbkZvcihhZGRyZXNzIF9iZW5lZmljaWFyeSkgd2hlbk5vdFBhdXNlZCgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoX2JlbmVmaWNpYXJ5ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gUFJJQ0UpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgY2hhbmdlID0gbXNnLnZhbHVlJVBSSUNFOwogICAgICAgIHVpbnQyNTYgbnVtYmVyT2ZUb2tlbnMgPSBtc2cudmFsdWUuc3ViKGNoYW5nZSkuZGl2KFBSSUNFKTsKICAgICAgICAKICAgICAgICBtaW50VG9rZW5zKF9iZW5lZmljaWFyeSwgbnVtYmVyT2ZUb2tlbnMpOwogICAgICAgIAogICAgICAgIC8vIFJldHVybiBjaGFuZ2UgdG8gbXNnLnNlbmRlcgogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2hhbmdlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWludFRva2VucyhhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfbnVtYmVyT2ZUb2tlbnMpIHByaXZhdGUgewogICAgICAgIHVpbnQxNiB0b3RhbENoYW5jZXMgPSBhZGRlZFVwQ2hhbmNlc1s5XTsKCiAgICAgICAgZm9yICh1aW50MTYgaT0xIDsgaSA8PSBfbnVtYmVyT2ZUb2tlbnM7IGkrKykgewogICAgICAgICAgICAKICAgICAgICAgICAgdWludDI1NiByYW5kb21OdW1iZXIgPSB1aW50MjU2KGtlY2NhazI1NihibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSkldG90YWxDaGFuY2VzOwogICAgICAgICAgICB1aW50OCByYXRlSW5kZXggPSBnZXRSYXRlSW5kZXgocmFuZG9tTnVtYmVyKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIHJhdGUgc2hvdWxkbid0IGJlIDAgYmVjYXVzZSBvZiBjb3JyZWN0ZWRJbmRleCBmdW5jdGlvbgogICAgICAgICAgICBhc3NlcnQoY2hhbmNlc1tyYXRlSW5kZXhdICE9IDApOwogICAgICAgICAgICBjaGFuY2VzW3JhdGVJbmRleF0tLTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHVpbnQyNTYgYW1vdW50ID0gb3V0Y29tZXNbcmF0ZUluZGV4XTsKICAgICAgICAgICAgZnVuZC5taW50KF9iZW5lZmljaWFyeSwgYW1vdW50KTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNyb3dkc2FsZUVuZGVkKCkgY29uc3RhbnQgcHJpdmF0ZSByZXR1cm5zIChib29sIGVuZGVkKSB7CiAgICAgICAgaWYgKGZ1bmQudG90YWxTdXBwbHkoKSA+PSBUT0tFTl9DQVApIHsgCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgCiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBsb2NrRW5kZWQoKSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKGJvb2wgZW5kZWQpIHsKICAgICAgICBpZiAoYmxvY2subnVtYmVyLnN1Yihsb2NrQmVndW5BdEJsb2NrKSA+IE9XTkVSU19MT0NLKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOyAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIAogICAgfQogICAgCiAgICAvKiBwdWJsaWMgb25seU93bmVyICovCiAgICAKICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGVCb3VudHkoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFib3VudHlEaXN0cmlidXRlZCk7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVFbmRlZCgpKTsKICAgICAgICAKICAgICAgICBib3VudHlEaXN0cmlidXRlZCA9IHRydWU7CiAgICAgICAgYm91bnR5V2FsbGV0LnRyYW5zZmVyKEJPVU5UWSk7CiAgICAgICAgbG9ja0JlZ3VuQXRCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBCb3VudHlEaXN0cmlidXRlZCgpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlT3duZXJzaGlwKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSghb3duZXJzaGlwRGlzdHJpYnV0ZWQpOwogICAgICAgIHJlcXVpcmUoY3Jvd2RzYWxlRW5kZWQoKSk7CiAgICAgICAgcmVxdWlyZShsb2NrRW5kZWQoKSk7CiAgICAgICAgCiAgICAgICAgb3duZXJzaGlwRGlzdHJpYnV0ZWQgPSB0cnVlOwogICAgICAgIG93bmVyc1dhbGxldC50cmFuc2ZlcihPV05FUlNfU1RBS0UpOwogICAgICAgIAogICAgICAgIE93bmVyc2hpcERpc3RyaWJ1dGVkKCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyc1dhbGxldChhZGRyZXNzIF9uZXdXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX25ld1dhbGxldCAhPSAweDApOwogICAgICAgIG93bmVyc1dhbGxldCA9IF9uZXdXYWxsZXQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUJvdW50eVdhbGxldChhZGRyZXNzIF9uZXdXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX25ld1dhbGxldCAhPSAweDApOwogICAgICAgIGJvdW50eVdhbGxldCA9IF9uZXdXYWxsZXQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUZ1bmRPd25lcihhZGRyZXNzIF9uZXdPd25lcikgewogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IDB4MCk7CiAgICAgICAgZnVuZC50cmFuc2Zlck93bmVyc2hpcChfbmV3T3duZXIpOwogICAgfQoKfQ=='.
	

]
