Class {
	#name : #SRT6d9aeea69207b186e67e24cc8ae05fe3ed1e0fbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6d9aeea69207b186e67e24cc8ae05fe3ed1e0fbb >> base64 [
	^ ''.
	

]
