Class {
	#name : #SRT3f9ef884433bdcbe10e6477e58be727bc4e6731a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f9ef884433bdcbe10e6477e58be727bc4e6731a >> base64 [
	^ ''.
	

]
