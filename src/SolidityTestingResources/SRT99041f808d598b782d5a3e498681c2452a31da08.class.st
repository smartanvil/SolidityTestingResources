Class {
	#name : #SRT99041f808d598b782d5a3e498681c2452a31da08,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99041f808d598b782d5a3e498681c2452a31da08 >> base64 [
	^ ''.
	

]
