Class {
	#name : #SRT6c0a11e254b666b107abe5ecf5003b53bf362eb0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6c0a11e254b666b107abe5ecf5003b53bf362eb0 >> base64 [
	^ ''.
	

]
