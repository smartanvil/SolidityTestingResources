Class {
	#name : #SRTf6b55acbbc49f4524aa48d19281a9a77c54de10f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf6b55acbbc49f4524aa48d19281a9a77c54de10f >> base64 [
	^ ''.
	

]
