Class {
	#name : #SRTd6682db9106e0cfb530b697ca0ecdc8f5597cd15,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6682db9106e0cfb530b697ca0ecdc8f5597cd15 >> base64 [
	^ ''.
	

]
