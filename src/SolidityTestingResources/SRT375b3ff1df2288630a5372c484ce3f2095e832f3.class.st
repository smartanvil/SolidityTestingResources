Class {
	#name : #SRT375b3ff1df2288630a5372c484ce3f2095e832f3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT375b3ff1df2288630a5372c484ce3f2095e832f3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMEJhc2ljLnNvbAoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0Jhc2ljVG9rZW4uc29sCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMC5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9TdGFuZGFyZFRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9NaW50YWJsZVRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9DYXBwZWRUb2tlbi5zb2wKCi8qKgogKiBAdGl0bGUgQ2FwcGVkIHRva2VuCiAqIEBkZXYgTWludGFibGUgdG9rZW4gd2l0aCBhIHRva2VuIGNhcC4KICovCgpjb250cmFjdCBDYXBwZWRUb2tlbiBpcyBNaW50YWJsZVRva2VuIHsKCiAgdWludDI1NiBwdWJsaWMgY2FwOwoKICBmdW5jdGlvbiBDYXBwZWRUb2tlbih1aW50MjU2IF9jYXApIHB1YmxpYyB7CiAgICByZXF1aXJlKF9jYXAgPiAwKTsKICAgIGNhcCA9IF9jYXA7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZSh0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCkgPD0gY2FwKTsKCiAgICByZXR1cm4gc3VwZXIubWludChfdG8sIF9hbW91bnQpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9GS1guc29sCgovKioKICogQHRpdGxlIEZLWAogKi8KY29udHJhY3QgRktYIGlzIENhcHBlZFRva2VuKEZLWC5UT0tFTl9TVVBQTFkpIHsKCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJLbm94c3RlcnRva2VuIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJGS1giOwogIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgdmVyc2lvbiA9ICIxLjAiOwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFRPS0VOX1NVUFBMWSAgPSAxNTAwMDAwMDAgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOyAvLyAxNTAgTWlsbGlvbiBGS1gKCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9GS1hUb2tlblRpbWVMb2NrLnNvbAoKLyoqCiAqIEB0aXRsZSBGS1hUb2tlblRpbWVMb2NrCiAqIEBkZXYgRktYVG9rZW5UaW1lTG9jayBpcyBhIHRva2VuIGhvbGRlciBjb250cmFjdCB0aGF0IHdpbGwgYWxsb3cgbXVsdGlwbGUKICogYmVuZWZpY2lhcmllcyB0byBleHRyYWN0IHRoZSB0b2tlbnMgYWZ0ZXIgYSBnaXZlbiByZWxlYXNlIHRpbWUuIEl0IGlzIGEgbW9kaWZpY2F0aW9uIG9mIHRoZSAgCiAqIE9wZW5aZXBwZW5saW4gVG9rZW5UaW1lTG9jayB0byBhbGxvdyBmb3Igb25lIHRva2VuIGxvY2sgc21hcnQgY29udHJhY3QgZm9yIG1hbnkgYmVuZWZpY2lhcmllcy4gCiAqLwpjb250cmFjdCBGS1hUb2tlblRpbWVMb2NrIGlzIE93bmFibGUgewoKICAvKgogICAqIEFycmF5IHdpdGggYmVuZWZpY2lhcnkgbG9jayBpbmRleGVzLiAKICAgKi8KICBhZGRyZXNzW10gcHVibGljIGxvY2tJbmRleGVzOwoKICAvKioKICAgKiBFbmNhcHN1bGF0ZXMgaW5mb3JtYXRpb24gYWJvdW50IGEgYmVuZWZpY2lhcnkncyB0b2tlbiB0aW1lIGxvY2suCiAgICovCiAgc3RydWN0IFRva2VuVGltZUxvY2tWYXVsdCB7CiAgICAgIC8qKgogICAgICAgKiBBbW91bnQgb2YgbG9ja2VkIHRva2Vucy4KICAgICAgICovCiAgICAgIHVpbnQyNTYgYW1vdW50OwoKICAgICAgLyoqCiAgICAgICAqIFRpbWVzdGFtcCB3aGVuIHRva2VuIHJlbGVhc2UgaXMgZW5hYmxlZC4KICAgICAgICovCiAgICAgIHVpbnQyNTYgcmVsZWFzZVRpbWU7CgogICAgICAvKioKICAgICAgICogTG9jayBhcnJheSBpbmRleC4KICAgICAgICovCiAgICAgIHVpbnQyNTYgYXJyYXlJbmRleDsKICB9CgogIC8vIEVSQzIwIGJhc2ljIHRva2VuIGNvbnRyYWN0IGJlaW5nIGhlbGQuCiAgRktYIHB1YmxpYyB0b2tlbjsKCiAgLy8gQWxsIGJlbmVmaWNpYXJpZXMnIHRva2VuIHRpbWUgbG9ja3MuCiAgbWFwcGluZyhhZGRyZXNzID0+IFRva2VuVGltZUxvY2tWYXVsdCkgcHVibGljIHRva2VuTG9ja3M7CgogIGZ1bmN0aW9uIEZLWFRva2VuVGltZUxvY2soRktYIF90b2tlbikgcHVibGljIHsKICAgIHRva2VuID0gX3Rva2VuOwogIH0KCiAgZnVuY3Rpb24gbG9ja1Rva2VucyhhZGRyZXNzIF9iZW5lZmljaWFyeSwgdWludDI1NiBfcmVsZWFzZVRpbWUsIHVpbnQyNTYgX3Rva2VucykgZXh0ZXJuYWwgb25seU93bmVyICB7CiAgICByZXF1aXJlKF9yZWxlYXNlVGltZSA+IG5vdyk7CiAgICByZXF1aXJlKF90b2tlbnMgPiAwKTsKCiAgICBUb2tlblRpbWVMb2NrVmF1bHQgc3RvcmFnZSBsb2NrID0gdG9rZW5Mb2Nrc1tfYmVuZWZpY2lhcnldOwogICAgbG9jay5hbW91bnQgPSBfdG9rZW5zOwogICAgbG9jay5yZWxlYXNlVGltZSA9IF9yZWxlYXNlVGltZTsKICAgIGxvY2suYXJyYXlJbmRleCA9IGxvY2tJbmRleGVzLmxlbmd0aDsKICAgIGxvY2tJbmRleGVzLnB1c2goX2JlbmVmaWNpYXJ5KTsKCiAgICBMb2NrRXZlbnQoX2JlbmVmaWNpYXJ5LCBfdG9rZW5zLCBfcmVsZWFzZVRpbWUpOwogIH0KCiAgZnVuY3Rpb24gZXhpc3RzKGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSBleHRlcm5hbCBvbmx5T3duZXIgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBUb2tlblRpbWVMb2NrVmF1bHQgbWVtb3J5IGxvY2sgPSB0b2tlbkxvY2tzW19iZW5lZmljaWFyeV07CiAgICByZXR1cm4gbG9jay5hbW91bnQgPiAwOwogIH0KCiAgLyoqCiAgICogQG5vdGljZSBUcmFuc2ZlcnMgdG9rZW5zIGhlbGQgYnkgdGltZWxvY2sgdG8gYmVuZWZpY2lhcnkuCiAgICovCiAgZnVuY3Rpb24gcmVsZWFzZSgpIHB1YmxpYyB7CiAgICBUb2tlblRpbWVMb2NrVmF1bHQgbWVtb3J5IGxvY2sgPSB0b2tlbkxvY2tzW21zZy5zZW5kZXJdOwoKICAgIHJlcXVpcmUobm93ID49IGxvY2sucmVsZWFzZVRpbWUpOwoKICAgIHJlcXVpcmUobG9jay5hbW91bnQgPiAwKTsKCiAgICBkZWxldGUgdG9rZW5Mb2Nrc1ttc2cuc2VuZGVyXTsKCiAgICBsb2NrSW5kZXhlc1tsb2NrLmFycmF5SW5kZXhdID0gMHgwOwoKICAgIFVubG9ja0V2ZW50KG1zZy5zZW5kZXIpOwoKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBsb2NrLmFtb3VudCkpOyAgIAogIH0KCiAgLyoqCiAgICogQG5vdGljZSBUcmFuc2ZlcnMgdG9rZW5zIGhlbGQgYnkgdGltZWxvY2sgdG8gYWxsIGJlbmVmaWNpYXJpZXMuCiAgICogQHBhcmFtIGZyb20gdGhlIHN0YXJ0IGxvY2sgaW5kZXgKICAgKiBAcGFyYW0gdG8gdGhlIGVuZCBsb2NrIGluZGV4CiAgICovCiAgZnVuY3Rpb24gcmVsZWFzZUFsbCh1aW50IGZyb20sIHVpbnQgdG8pIGV4dGVybmFsIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKGZyb20gPj0gMCk7CiAgICByZXF1aXJlKHRvIDw9IGxvY2tJbmRleGVzLmxlbmd0aCk7CiAgICBmb3IgKHVpbnQgaSA9IGZyb207IGkgPCB0bzsgaSsrKSB7CiAgICAgIGFkZHJlc3MgYmVuZWZpY2lhcnkgPSBsb2NrSW5kZXhlc1tpXTsKICAgICAgaWYgKGJlbmVmaWNpYXJ5ID09IDB4MCkgeyAvL1NraXAgYW55IHByZXZpb3VzbHkgcmVtb3ZlZCBsb2NrcwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIAogICAgICBUb2tlblRpbWVMb2NrVmF1bHQgbWVtb3J5IGxvY2sgPSB0b2tlbkxvY2tzW2JlbmVmaWNpYXJ5XTsKICAgICAgCiAgICAgIGlmICghKG5vdyA+PSBsb2NrLnJlbGVhc2VUaW1lICYmIGxvY2suYW1vdW50ID4gMCkpIHsgLy8gU2tpcCBhbnkgbG9ja3MgdGhhdCBhcmUgbm90IGR1ZSB0byBiZSByZWxlYXNlCiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGRlbGV0ZSB0b2tlbkxvY2tzW2JlbmVmaWNpYXJ5XTsKCiAgICAgIGxvY2tJbmRleGVzW2xvY2suYXJyYXlJbmRleF0gPSAweDA7CiAgICAgIAogICAgICBVbmxvY2tFdmVudChiZW5lZmljaWFyeSk7CgogICAgICBhc3NlcnQodG9rZW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIGxvY2suYW1vdW50KSk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VucyB3ZXJlIHRpbWUgbG9ja2VkLgogICAqCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IGJlbmVmaWNpYXJ5IHRvIHJlY2VpdmUgdG9rZW5zIG9uY2UgdGhleSBhcmUgdW5sb2NrZWQKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiBsb2NrZWQgdG9rZW5zCiAgICogQHBhcmFtIHJlbGVhc2VUaW1lIHVubG9jayB0aW1lCiAgICovCiAgZXZlbnQgTG9ja0V2ZW50KGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgcmVsZWFzZVRpbWUpOwoKICAvKioKICAgKiBMb2dnZWQgd2hlbiB0b2tlbnMgd2VyZSB1bmxvY2tlZCBhbmQgc2VudCB0byBiZW5lZmljaWFyeS4KICAgKgogICAqIEBwYXJhbSBiZW5lZmljaWFyeSBiZW5lZmljaWFyeSB0byByZWNlaXZlIHRva2VucyBvbmNlIHRoZXkgYXJlIHVubG9ja2VkCiAgICovCiAgZXZlbnQgVW5sb2NrRXZlbnQoYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5KTsKICAKfQoKLy8gRmlsZTogY29udHJhY3RzL0ZLWFNhbGUuc29sCgovKioKICogQHRpdGxlIEZLWFNhbGUKICogQGRldiBGS1hTYWxlIHNtYXJ0IGNvbnRyYWNhdCB1c2VkIHRvIG1pbnQgYW5kIGRpc3RydWJ1dGUgRktYIHRva2VucyBhbmQgbG9jayB1cCBGS1ggdG9rZW5zIGluIHRoZSBGS1hUb2tlblRpbWVMb2NrIHNtYXJ0IGNvbnRyYWN0LgogKiBJbmhlcml0YW5jZToKICogT3duYWJsZSAtIGxldHMgRktYU2FsZSBiZSBvd25hYmxlCiAqCiAqLwpjb250cmFjdCBGS1hTYWxlIGlzIE93bmFibGUgewoKICBGS1ggcHVibGljIHRva2VuOwoKICBGS1hUb2tlblRpbWVMb2NrIHB1YmxpYyB0b2tlbkxvY2s7CgogIGZ1bmN0aW9uIEZLWFNhbGUoKSBwdWJsaWMgewoKICAgIHRva2VuID0gIG5ldyBGS1goKTsKCiAgICB0b2tlbkxvY2sgPSBuZXcgRktYVG9rZW5UaW1lTG9jayh0b2tlbik7CgogIH0KCiAgLyoqCiAgKiBAZGV2IEZpbmFsaXplcyB0aGUgc2FsZSBhbmQgIHRva2VuIG1pbnRpbmcKICAqLwogIGZ1bmN0aW9uIGZpbmFsaXplKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAvLyBEaXNhYmxlIG1pbnRpbmcgb2YgRktYCiAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgfQoKICAvKioKICAqIEBkZXYgQWxsb2NhdGVzIHRva2VucyBhbmQgYm9udXMgdG9rZW5zIHRvIGVhcmx5LWJpcmQgY29udHJpYnV0b3JzLgogICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdhbGxldAogICogQHBhcmFtIGJhc2VUb2tlbnMgYW1vdW50IG9mIHRva2VucyB0byBiZSByZWNlaXZlZCBieSBiZW5lZmljaWFyeQogICogQHBhcmFtIGJvbnVzVG9rZW5zIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgbG9ja2VkIHVwIHRvIGJlbmVmaWNpYXJ5CiAgKiBAcGFyYW0gcmVsZWFzZVRpbWUgd2hlbiB0byB1bmxvY2sgYm9udXMgdG9rZW5zCiAgKi8KICBmdW5jdGlvbiBtaW50QmFzZUxvY2tlZFRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50MjU2IGJhc2VUb2tlbnMsIHVpbnQyNTYgYm9udXNUb2tlbnMsIHVpbnQyNTYgcmVsZWFzZVRpbWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZShiYXNlVG9rZW5zID4gMCk7CiAgICByZXF1aXJlKGJvbnVzVG9rZW5zID4gMCk7CiAgICByZXF1aXJlKHJlbGVhc2VUaW1lID4gbm93KTsKICAgIHJlcXVpcmUoIXRva2VuTG9jay5leGlzdHMoYmVuZWZpY2lhcnkpKTsKICAgIAogICAgLy8gTWludCBiYXNlIHRva2VucyB0byBiZW5lZmljaWFyeQogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgYmFzZVRva2Vucyk7CgogICAgLy8gTWludCBiZW5lZmljaWFyeSdzIGJvbnVzIHRva2VucyB0byB0aGUgdG9rZW4gdGltZSBsb2NrCiAgICB0b2tlbi5taW50KHRva2VuTG9jaywgYm9udXNUb2tlbnMpOwoKICAgIC8vIFRpbWUgbG9jayB0aGUgdG9rZW5zCiAgICB0b2tlbkxvY2subG9ja1Rva2VucyhiZW5lZmljaWFyeSwgcmVsZWFzZVRpbWUsIGJvbnVzVG9rZW5zKTsKICB9CgogIC8qKgogICogQGRldiBBbGxvY2F0ZXMgYm9udXMgdG9rZW5zIHRvIGFkdmlzb3JzLCBmb3VuZGVycyBhbmQgY29tcGFueS4KICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3YWxsZXQKICAqIEBwYXJhbSB0b2tlbnMgYW1vdW50IG9mIHRva2VucyB0byBiZSBsb2NrZWQgdXAgdG8gYmVuZWZpY2lhcnkKICAqIEBwYXJhbSByZWxlYXNlVGltZSB3aGVuIHRvIHVubG9jayBib251cyB0b2tlbnMKICAqLwogIGZ1bmN0aW9uIG1pbnRMb2NrZWRUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludDI1NiB0b2tlbnMsIHVpbnQyNTYgcmVsZWFzZVRpbWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh0b2tlbnMgPiAwKTsKICAgIHJlcXVpcmUocmVsZWFzZVRpbWUgPiBub3cpOwogICAgcmVxdWlyZSghdG9rZW5Mb2NrLmV4aXN0cyhiZW5lZmljaWFyeSkpOwoKICAgIC8vIE1pbnQgYmVuZWZpY2lhcnkncyBib251cyB0b2tlbnMgdG8gdGhlIHRva2VuIHRpbWUgbG9jawogICAgdG9rZW4ubWludCh0b2tlbkxvY2ssIHRva2Vucyk7CgogICAgLy8gVGltZSBsb2NrIHRoZSB0b2tlbnMKICAgIHRva2VuTG9jay5sb2NrVG9rZW5zKGJlbmVmaWNpYXJ5LCByZWxlYXNlVGltZSwgdG9rZW5zKTsKICB9CgogIC8qKgogICogQGRldiBBbGxvY2F0ZXMgdG9rZW5zIHRvIGJlbmVmaWNpYXJ5LgogICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdhbGxldAogICogQHBhcmFtIHRva2VucyBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHJlY2VpdmVkIGJ5IGJlbmVmaWNpYXJ5CiAgKi8KICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQyNTYgdG9rZW5zKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgIHJlcXVpcmUodG9rZW5zID4gMCk7CiAgICAKICAgIC8vIE1pbnQgdG9rZW5zIHRvIGJlbmVmaWNpYXJ5CiAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogIH0KCiAgLyoqCiAgKiBAZGV2IFJlbGVhc2UgbG9ja2VkIHRva2VucyB0byBhbGwgYmVuZWZpY2lhcmllcyBpZiB0aGV5IGFyZSBkdWUuCiAgKiBAcGFyYW0gZnJvbSB0aGUgc3RhcnQgbG9jayBpbmRleAogICogQHBhcmFtIHRvIHRoZSBlbmQgbG9jayBpbmRleAogICovCiAgZnVuY3Rpb24gcmVsZWFzZUFsbCh1aW50IGZyb20sIHVpbnQgdG8pIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgdG9rZW5Mb2NrLnJlbGVhc2VBbGwoZnJvbSwgdG8pOwoKICAgIHJldHVybiB0cnVlOwogIH0KCgp9'.
	

]
