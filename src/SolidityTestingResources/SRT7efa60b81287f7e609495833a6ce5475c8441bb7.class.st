Class {
	#name : #SRT7efa60b81287f7e609495833a6ce5475c8441bb7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7efa60b81287f7e609495833a6ce5475c8441bb7 >> base64 [
	^ ''.
	

]
