Class {
	#name : #SRTaa3f3485b5a009b34308707aa8e4c6f6c8e4dd49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa3f3485b5a009b34308707aa8e4c6f6c8e4dd49 >> base64 [
	^ ''.
	

]
