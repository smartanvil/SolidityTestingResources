Class {
	#name : #SRTdbe22a77660b1261fb6830e48e0fa84438f7940d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdbe22a77660b1261fb6830e48e0fa84438f7940d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKICAgCiAgIAogICAKICAgCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCmZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIAogICAgcmV0dXJuIGM7CiAgICB9CiAKZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICAgIH0KCmZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogICAgfQp9IAoKY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7Cn0KCgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKCgoKCgpmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgIAogICAgcmVxdWlyZSAoIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICByZXF1aXJlICggYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKICAgIAogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwp9CgoKZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgewogICAgCiAgICByZXF1aXJlICggYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgCiAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7Cn0KCgoKCgoKCmZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKfQoKfQoKCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewogICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgCiAgIAogICAKICAgCiAgIAogICAKICAgCiAgIAogICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwogICAgICAgCiAgICAgICAKICAgICAgIAogICAgICAgCiAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgIH0gCiAgIAoKCgoKCiAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICByZXF1aXJlICggISgoX3ZhbHVlICE9MCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9MCkpKTsKICAgIAogICAgCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwp9CgoKCgoKCgpmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKfQoKfQoKY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCgoKCm1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAKICAgIF87Cn0KCgoKCgoKZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKfQoKY29udHJhY3QgV2FuVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgTWludEZpbmlzaGVkKCk7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiV2FuQ29pbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJXQU4iOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIAogICAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CiAgICAKICAgIAogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIE1pbnRhYmxlVG9rZW4oKSB7CiAgICAgICAgbWludChtc2cuc2VuZGVyLCAyMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApOwogICAgIGZpbmlzaE1pbnRpbmcoKTsgICAKICAgIH0KICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2ZlcigwLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgIAp9Cgpjb250cmFjdCBTd2FwVG9rZW4gaXMgV2FuVG9rZW4gewogICAgV2FuVG9rZW4gQmFzaWNUb2tlbjsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBtaWdyYXRlZDsKICAgIAogICAgZnVuY3Rpb24gU3dhcFRva2VuIChXYW5Ub2tlbiBfYmFzaWNUb2tlbikgewogICAgICAgIEJhc2ljVG9rZW4gPSBfYmFzaWNUb2tlbjsKICAgICAgICB0b3RhbFN1cHBseSA9IDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWlncmF0aW9uIChhZGRyZXNzIF9vd25lcikgaW50ZXJuYWwgewogICAgICAgIGlmICghbWlncmF0ZWRbX293bmVyXSkgewogICAgICAgICAgICBiYWxhbmNlc1tfb3duZXJdID0gYmFsYW5jZXNbX293bmVyXS5hZGQoQmFzaWNUb2tlbi5iYWxhbmNlT2YoX293bmVyKSk7CiAgICAgICAgICAgIG1pZ3JhdGVkW19vd25lcl0gPSB0cnVlOwogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgbWlncmF0aW9uIChtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlICggYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlICggYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgbWlncmF0aW9uIChtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlICggYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIG1pZ3JhdGlvbihfb3duZXIpOwogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKICAgICAgICAKICAgICAgICBtaWdyYXRpb24gKG1zZy5zZW5kZXIpOwogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICAKICAgICAgICBtaWdyYXRpb24gKG1zZy5zZW5kZXIpOwogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIHJlcXVpcmUgKCAhKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICB9CgoKfQoKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIAogICAgV2FuVG9rZW4gcHVibGljIHRva2VuOwogICAgCiAgICAKICAgIHVpbnQyNTYgcHVibGljIGRlYWRsaW5lOwogICAgCiAgICAKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyByYXRlOwogICAgCiAgICAKICAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKICAgIAogICAgCiAgICB1aW50MjU2IHB1YmxpYyB0b2tlbnNTb2xkOwogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CiAgICAKICAgIAogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKFdhblRva2VuIHRva2VuQ29udHJhY3QsIHVpbnQyNTYgZHVyYXRpb25JbldlZWtzLCB1aW50MjU2IF9yYXRlLCBhZGRyZXNzIF93YWxsZXQpIHsKICAgICAgICAKICAgICAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICAgICAgcmVxdWlyZShfd2FsbGV0ICE9IDB4MCk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgdG9rZW4gPSB0b2tlbkNvbnRyYWN0OwogICAgICAgIAogICAgICAgIGRlYWRsaW5lID0gbm93ICsgZHVyYXRpb25JbldlZWtzICogMSB3ZWVrczsKICAgICAgICByYXRlID0gX3JhdGU7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXROZXdUb2tlbk93bmVyKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpOwogICAgfQogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIGludGVybmFsIHJldHVybnMgKFdhblRva2VuKSB7CiAgICAgICAgcmV0dXJuIG5ldyBXYW5Ub2tlbigpOwogICAgfQogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQyNTYgdXBkYXRlZHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKICAgICAgICAKICAgICAgICAKICAgICAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgcmVxdWlyZSAoIHRva2VucyA8PSB0b2tlbi5iYWxhbmNlT2YodGhpcykgKTsKICAgICAgICAKICAgICAgICAKICAgICAgICB3ZWlSYWlzZWQgPSB1cGRhdGVkd2VpUmFpc2VkOwogICAgICAgIAogICAgICAgIAogICAgICAgIHRva2VuLnRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIAogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbnMpOwogICAgICAgIAogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgICAgICAKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgICAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQyNTYgY3VycmVudCA9IGJsb2NrLm51bWJlcjsKICAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA8PSBkZWFkbGluZTsKICAgICAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgICAgIAogICAgICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKCBub3cgPiBkZWFkbGluZSk7CiAgICAgICAgCiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRva2VuUmVzZW5kKCkgb25seU93bmVyIHsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICB0b2tlbi50cmFuc2Zlcihvd25lciwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KICAgIAp9'.
	

]
