Class {
	#name : #SRT982ece330a8e10a2e5fe91dca8af84da193d16c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT982ece330a8e10a2e5fe91dca8af84da193d16c8 >> base64 [
	^ ''.
	

]
