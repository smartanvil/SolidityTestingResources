Class {
	#name : #SRTdd5cec9019ec8449a5d01d0d8175e6519530d276,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd5cec9019ec8449a5d01d0d8175e6519530d276 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIE93bmVyc2hpcCBpbnRlcmZhY2UKICoKICogUGVybWluZW50IG93bmVyc2hpcAogKgogKiAjY3JlYXRlZCAwMS8xMC8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBJT3duZXJzaGlwIHsKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiBgX2FjY291bnRgIGlzIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FjY291bnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIKICAgICAqCiAgICAgKiBAcmV0dXJuIGFkZHJlc3MgVGhlIGN1cnJlbnQgb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T3duZXIoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKTsKfQoKCi8qKgogKiBAdGl0bGUgT3duZXJzaGlwCiAqCiAqIFBlcm1pbmVudCBvd25lcnNoaXAKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgT3duZXJzaGlwIGlzIElPd25lcnNoaXAgewoKICAgIC8vIE93bmVyCiAgICBhZGRyZXNzIGludGVybmFsIG93bmVyOwoKCiAgICAvKioKICAgICAqIFRoZSBwdWJsaXNoZXIgaXMgdGhlIGluaXRhbCBvd25lcgogICAgICovCiAgICBmdW5jdGlvbiBPd25lcnNoaXAoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEFjY2VzcyBpcyByZXN0cmljdGVkIHRvIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlfb3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIFJldHVybnMgdHJ1ZSBpZiBgX2FjY291bnRgIGlzIHRoZSBjdXJyZW50IG93bmVyCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhZGRyZXNzIHRvIHRlc3QgYWdhaW5zdAogICAgICovCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FjY291bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIF9hY2NvdW50ID09IG93bmVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIKICAgICAqCiAgICAgKiBAcmV0dXJuIGFkZHJlc3MgVGhlIGN1cnJlbnQgb3duZXIKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBvd25lcjsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgVHJhbnNmZXJhYmxlIG93bmVyc2hpcCBpbnRlcmZhY2UKICoKICogRW5oYW5jZXMgb3duZXJzaGlwIGJ5IGFsbG93aW5nIHRoZSBjdXJyZW50IG93bmVyIHRvIAogKiB0cmFuc2ZlciBvd25lcnNoaXAgdG8gYSBuZXcgb3duZXIKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgSVRyYW5zZmVyYWJsZU93bmVyc2hpcCB7CiAgICAKCiAgICAvKioKICAgICAqIFRyYW5zZmVyIG93bmVyc2hpcCB0byBgX25ld093bmVyYAogICAgICoKICAgICAqIEBwYXJhbSBfbmV3T3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdGhhdCB3aWxsIGJlY29tZSB0aGUgbmV3IG93bmVyIAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcik7Cn0KCgovKioKICogQHRpdGxlIFRyYW5zZmVyYWJsZSBvd25lcnNoaXAKICoKICogRW5oYW5jZXMgb3duZXJzaGlwIGJ5IGFsbG93aW5nIHRoZSBjdXJyZW50IG93bmVyIHRvIAogKiB0cmFuc2ZlciBvd25lcnNoaXAgdG8gYSBuZXcgb3duZXIKICoKICogI2NyZWF0ZWQgMDEvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgVHJhbnNmZXJhYmxlT3duZXJzaGlwIGlzIElUcmFuc2ZlcmFibGVPd25lcnNoaXAsIE93bmVyc2hpcCB7CgoKICAgIC8qKgogICAgICogVHJhbnNmZXIgb3duZXJzaGlwIHRvIGBfbmV3T3duZXJgCiAgICAgKgogICAgICogQHBhcmFtIF9uZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0aGF0IHdpbGwgYmVjb21lIHRoZSBuZXcgb3duZXIgCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seV9vd25lciB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9Cn0KCgovKioKICogQHRpdGxlIElBdXRoZW50aWNhdG9yIAogKgogKiBBdXRoZW50aWNhdG9yIGludGVyZmFjZQogKgogKiAjY3JlYXRlZCAxNS8xMC8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBJQXV0aGVudGljYXRvciB7CiAgICAKCiAgICAvKioKICAgICAqIEF1dGhlbnRpY2F0ZSAKICAgICAqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYF9hY2NvdW50YCBpcyBhdXRoZW50aWNhdGVkIG9yIG5vdAogICAgICoKICAgICAqIEBwYXJhbSBfYWNjb3VudCBUaGUgYWNjb3VudCB0byBhdXRoZW50aWNhdGUKICAgICAqIEByZXR1cm4gd2hldGhlciBgX2FjY291bnRgIGlzIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZShhZGRyZXNzIF9hY2NvdW50KSBjb25zdGFudCByZXR1cm5zIChib29sKTsKfQoKCi8qKgogKiBAdGl0bGUgSVdoaXRlbGlzdCAKICoKICogV2hpdGVsaXN0IGF1dGhlbnRpY2F0aW9uIGludGVyZmFjZQogKgogKiAjY3JlYXRlZCAwNC8xMC8yMDE3CiAqICNhdXRob3IgRnJhbmsgQm9ubmV0CiAqLwpjb250cmFjdCBJV2hpdGVsaXN0IGlzIElBdXRoZW50aWNhdG9yIHsKICAgIAoKICAgIC8qKgogICAgICogUmV0dXJucyB3aGV0aGVyIGFuIGVudHJ5IGV4aXN0cyBmb3IgYF9hY2NvdW50YAogICAgICoKICAgICAqIEBwYXJhbSBfYWNjb3VudCBUaGUgYWNjb3VudCB0byBjaGVjawogICAgICogQHJldHVybiB3aGV0aGVyIGBfYWNjb3VudGAgaXMgaGFzIGFuIGVudHJ5IGluIHRoZSB3aGl0ZWxpc3QKICAgICAqLwogICAgZnVuY3Rpb24gaGFzRW50cnkoYWRkcmVzcyBfYWNjb3VudCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7CgoKICAgIC8qKgogICAgICogQWRkIGBfYWNjb3VudGAgdG8gdGhlIHdoaXRlbGlzdAogICAgICoKICAgICAqIElmIGFuIGFjY291bnQgaXMgY3VycmVudGx5IGRpc2FibGVkLCB0aGUgYWNjb3VudCBpcyByZWVuYWJsZWQsIG90aGVyd2lzZSAKICAgICAqIGEgbmV3IGVudHJ5IGlzIGNyZWF0ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gX2FjY291bnQgVGhlIGFjY291bnQgdG8gYWRkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZChhZGRyZXNzIF9hY2NvdW50KTsKCgogICAgLyoqCiAgICAgKiBSZW1vdmUgYF9hY2NvdW50YCBmcm9tIHRoZSB3aGl0ZWxpc3QKICAgICAqCiAgICAgKiBXaWxsIG5vdCBhY3R1YWxseSByZW1vdmUgdGhlIGVudHJ5IGJ1dCBkaXNhYmxlIGl0IGJ5IHVwZGF0aW5nCiAgICAgKiB0aGUgYWNjZXB0ZWQgcmVjb3JkCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhY2NvdW50IHRvIHJlbW92ZQogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmUoYWRkcmVzcyBfYWNjb3VudCk7Cn0KCgovKioKICogQHRpdGxlIFdoaXRlbGlzdCAKICoKICogV2hpdGVsaXN0IGF1dGhlbnRpY2F0aW9uIGxpc3QKICoKICogI2NyZWF0ZWQgMDQvMTAvMjAxNwogKiAjYXV0aG9yIEZyYW5rIEJvbm5ldAogKi8KY29udHJhY3QgV2hpdGVsaXN0IGlzIElXaGl0ZWxpc3QsIFRyYW5zZmVyYWJsZU93bmVyc2hpcCB7CgogICAgc3RydWN0IEVudHJ5IHsKICAgICAgICB1aW50IGRhdGV0aW1lOwogICAgICAgIGJvb2wgYWNjZXB0ZWQ7CiAgICAgICAgdWludCBpbmRleDsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEVudHJ5KSBpbnRlcm5hbCBsaXN0OwogICAgYWRkcmVzc1tdIGludGVybmFsIGxpc3RJbmRleDsKCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYW4gZW50cnkgZXhpc3RzIGZvciBgX2FjY291bnRgCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhY2NvdW50IHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuIHdoZXRoZXIgYF9hY2NvdW50YCBpcyBoYXMgYW4gZW50cnkgaW4gdGhlIHdoaXRlbGlzdAogICAgICovCiAgICBmdW5jdGlvbiBoYXNFbnRyeShhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBsaXN0SW5kZXgubGVuZ3RoID4gMCAmJiBfYWNjb3VudCA9PSBsaXN0SW5kZXhbbGlzdFtfYWNjb3VudF0uaW5kZXhdOwogICAgfQoKCiAgICAvKioKICAgICAqIEFkZCBgX2FjY291bnRgIHRvIHRoZSB3aGl0ZWxpc3QKICAgICAqCiAgICAgKiBJZiBhbiBhY2NvdW50IGlzIGN1cnJlbnRseSBkaXNhYmxlZCwgdGhlIGFjY291bnQgaXMgcmVlbmFibGVkLCBvdGhlcndpc2UgCiAgICAgKiBhIG5ldyBlbnRyeSBpcyBjcmVhdGVkCiAgICAgKgogICAgICogQHBhcmFtIF9hY2NvdW50IFRoZSBhY2NvdW50IHRvIGFkZAogICAgICovCiAgICBmdW5jdGlvbiBhZGQoYWRkcmVzcyBfYWNjb3VudCkgcHVibGljIG9ubHlfb3duZXIgewogICAgICAgIGlmICghaGFzRW50cnkoX2FjY291bnQpKSB7CiAgICAgICAgICAgIGxpc3RbX2FjY291bnRdID0gRW50cnkoCiAgICAgICAgICAgICAgICBub3csIHRydWUsIGxpc3RJbmRleC5wdXNoKF9hY2NvdW50KSAtIDEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEVudHJ5IHN0b3JhZ2UgZW50cnkgPSBsaXN0W19hY2NvdW50XTsKICAgICAgICAgICAgaWYgKCFlbnRyeS5hY2NlcHRlZCkgewogICAgICAgICAgICAgICAgZW50cnkuYWNjZXB0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgZW50cnkuZGF0ZXRpbWUgPSBub3c7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogUmVtb3ZlIGBfYWNjb3VudGAgZnJvbSB0aGUgd2hpdGVsaXN0CiAgICAgKgogICAgICogV2lsbCBub3QgYWNjdHVhbGx5IHJlbW92ZSB0aGUgZW50cnkgYnV0IGRpc2FibGUgaXQgYnkgdXBkYXRpbmcKICAgICAqIHRoZSBhY2NlcHRlZCByZWNvcmQKICAgICAqCiAgICAgKiBAcGFyYW0gX2FjY291bnQgVGhlIGFjY291bnQgdG8gcmVtb3ZlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZShhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgb25seV9vd25lciB7CiAgICAgICAgaWYgKGhhc0VudHJ5KF9hY2NvdW50KSkgewogICAgICAgICAgICBFbnRyeSBzdG9yYWdlIGVudHJ5ID0gbGlzdFtfYWNjb3VudF07CiAgICAgICAgICAgIGVudHJ5LmFjY2VwdGVkID0gZmFsc2U7CiAgICAgICAgICAgIGVudHJ5LmRhdGV0aW1lID0gbm93OwogICAgICAgIH0KICAgIH0KCgogICAgLyoqCiAgICAgKiBBdXRoZW50aWNhdGUgCiAgICAgKgogICAgICogUmV0dXJucyB3aGV0aGVyIGBfYWNjb3VudGAgaXMgb24gdGhlIHdoaXRlbGlzdAogICAgICoKICAgICAqIEBwYXJhbSBfYWNjb3VudCBUaGUgYWNjb3VudCB0byBhdXRoZW50aWNhdGUKICAgICAqIEByZXR1cm4gd2hldGhlciBgX2FjY291bnRgIGlzIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZShhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBsaXN0W19hY2NvdW50XS5hY2NlcHRlZDsKICAgIH0KfQ=='.
	

]
