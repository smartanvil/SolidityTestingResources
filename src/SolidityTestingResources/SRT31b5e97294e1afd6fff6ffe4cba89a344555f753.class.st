Class {
	#name : #SRT31b5e97294e1afd6fff6ffe4cba89a344555f753,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31b5e97294e1afd6fff6ffe4cba89a344555f753 >> base64 [
	^ ''.
	

]
