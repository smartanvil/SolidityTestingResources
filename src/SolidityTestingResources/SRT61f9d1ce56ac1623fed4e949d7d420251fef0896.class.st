Class {
	#name : #SRT61f9d1ce56ac1623fed4e949d7d420251fef0896,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT61f9d1ce56ac1623fed4e949d7d420251fef0896 >> base64 [
	^ ''.
	

]
