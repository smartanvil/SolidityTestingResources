Class {
	#name : #SRT44930065acd54457a2286aabb936c1655ee64ce7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT44930065acd54457a2286aabb936c1655ee64ce7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgTGltaXRlZFRyYW5zZmVyVG9rZW4KICogQGRldiBMaW1pdGVkVHJhbnNmZXJUb2tlbiBkZWZpbmVzIHRoZSBnZW5lcmljIGludGVyZmFjZSBhbmQgdGhlIGltcGxlbWVudGF0aW9uIHRvIGxpbWl0IHRva2VuCiAqIHRyYW5zZmVyYWJpbGl0eSBmb3IgZGlmZmVyZW50IGV2ZW50cy4gSXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBhIGJhc2UgY2xhc3MgZm9yIG90aGVyIHRva2VuCiAqIGNvbnRyYWN0cy4KICogTGltaXRlZFRyYW5zZmVyVG9rZW4gaGFzIGJlZW4gZGVzaWduZWQgdG8gYWxsb3cgZm9yIGRpZmZlcmVudCBsaW1pdGluZyBmYWN0b3JzLAogKiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZWN1cnNpdmVseSBjYWxsaW5nIHN1cGVyLnRyYW5zZmVyYWJsZVRva2VucygpIHVudGlsIHRoZSBiYXNlIGNsYXNzIGlzCiAqIGhpdC4gRm9yIGV4YW1wbGU6CiAqICAgICBmdW5jdGlvbiB0cmFuc2ZlcmFibGVUb2tlbnMoYWRkcmVzcyBob2xkZXIsIHVpbnQ2NCB0aW1lKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogKiAgICAgICByZXR1cm4gbWluMjU2KHVubG9ja2VkVG9rZW5zLCBzdXBlci50cmFuc2ZlcmFibGVUb2tlbnMoaG9sZGVyLCB0aW1lKSk7CiAqICAgICB9CiAqIEEgd29ya2luZyBleGFtcGxlIGlzIFZlc3RlZFRva2VuLnNvbDoKICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9ibG9iL21hc3Rlci9jb250cmFjdHMvdG9rZW4vVmVzdGVkVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTGltaXRlZFRyYW5zZmVyVG9rZW4gaXMgRVJDMjAgewoKICAvKioKICAgKiBAZGV2IENoZWNrcyB3aGV0aGVyIGl0IGNhbiB0cmFuc2ZlciBvciBvdGhlcndpc2UgdGhyb3dzLgogICAqLwogIG1vZGlmaWVyIGNhblRyYW5zZmVyKGFkZHJlc3MgX3NlbmRlciwgdWludDI1NiBfdmFsdWUpIHsKICAgcmVxdWlyZShfdmFsdWUgPD0gdHJhbnNmZXJhYmxlVG9rZW5zKF9zZW5kZXIsIHVpbnQ2NChub3cpKSk7CiAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IENoZWNrcyBtb2RpZmllciBhbmQgYWxsb3dzIHRyYW5zZmVyIGlmIHRva2VucyBhcmUgbm90IGxvY2tlZC4KICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSB0b2tlbnMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZC4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGNhblRyYW5zZmVyKG1zZy5zZW5kZXIsIF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAqIEBkZXYgQ2hlY2tzIG1vZGlmaWVyIGFuZCBhbGxvd3MgdHJhbnNmZXIgaWYgdG9rZW5zIGFyZSBub3QgbG9ja2VkLgogICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBzZW5kIHRoZSB0b2tlbnMuCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSB0b2tlbnMuCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20sIF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVmYXVsdCB0cmFuc2ZlcmFibGUgdG9rZW5zIGZ1bmN0aW9uIHJldHVybnMgYWxsIHRva2VucyBmb3IgYSBob2xkZXIgKG5vIGxpbWl0KS4KICAgKiBAZGV2IE92ZXJ3cml0aW5nIHRyYW5zZmVyYWJsZVRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDY0IHRpbWUpIGlzIHRoZSB3YXkgdG8gcHJvdmlkZSB0aGUKICAgKiBzcGVjaWZpYyBsb2dpYyBmb3IgbGltaXRpbmcgdG9rZW4gdHJhbnNmZXJhYmlsaXR5IGZvciBhIGhvbGRlciBvdmVyIHRpbWUuCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJhYmxlVG9rZW5zKGFkZHJlc3MgaG9sZGVyLCB1aW50NjQgdGltZSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBiYWxhbmNlT2YoaG9sZGVyKTsKICB9Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgTWF0aAogKiBAZGV2IEFzc29ydGVkIG1hdGggb3BlcmF0aW9ucwogKi8KCmxpYnJhcnkgTWF0aCB7CiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9Cn0KCi8qKgogKiBAdGl0bGUgVmVzdGVkIHRva2VuCiAqIEBkZXYgVG9rZW5zIHRoYXQgY2FuIGJlIHZlc3RlZCBmb3IgYSBncm91cCBvZiBhZGRyZXNzZXMuCiAqLwpjb250cmFjdCBWZXN0ZWRUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBMaW1pdGVkVHJhbnNmZXJUb2tlbiB7CgogIHVpbnQyNTYgTUFYX0dSQU5UU19QRVJfQUREUkVTUyA9IDIwOwoKICBzdHJ1Y3QgVG9rZW5HcmFudCB7CiAgICBhZGRyZXNzIGdyYW50ZXI7ICAgICAvLyAyMCBieXRlcwogICAgdWludDI1NiB2YWx1ZTsgICAgICAgLy8gMzIgYnl0ZXMKICAgIHVpbnQ2NCBjbGlmZjsKICAgIHVpbnQ2NCB2ZXN0aW5nOwogICAgdWludDY0IHN0YXJ0OyAgICAgICAgLy8gMyAqIDggPSAyNCBieXRlcwogICAgYm9vbCByZXZva2FibGU7CiAgICBib29sIGJ1cm5zT25SZXZva2U7ICAvLyAyICogMSA9IDIgYml0cz8gb3IgMiBieXRlcz8KICB9IC8vIHRvdGFsIDc4IGJ5dGVzID0gMyBzc3RvcmUgcGVyIG9wZXJhdGlvbiAoMzIgcGVyIHNzdG9yZSkKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBUb2tlbkdyYW50W10pIHB1YmxpYyBncmFudHM7CgogIGV2ZW50IE5ld1Rva2VuR3JhbnQoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSwgdWludDI1NiBncmFudElkKTsKCiAgLyoqCiAgICogQGRldiBHcmFudCB0b2tlbnMgdG8gYSBzcGVjaWZpZWQgYWRkcmVzcwogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB0aGUgdG9rZW5zIHdpbGwgYmUgZ3JhbnRlZCB0by4KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgZ3JhbnRlZC4KICAgKiBAcGFyYW0gX3N0YXJ0IHVpbnQ2NCBUaW1lIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGdyYW50LgogICAqIEBwYXJhbSBfY2xpZmYgdWludDY0IFRpbWUgb2YgdGhlIGNsaWZmIHBlcmlvZC4KICAgKiBAcGFyYW0gX3Zlc3RpbmcgdWludDY0IFRoZSB2ZXN0aW5nIHBlcmlvZC4KICAgKi8KICBmdW5jdGlvbiBncmFudFZlc3RlZFRva2VucygKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdmFsdWUsCiAgICB1aW50NjQgX3N0YXJ0LAogICAgdWludDY0IF9jbGlmZiwKICAgIHVpbnQ2NCBfdmVzdGluZywKICAgIGJvb2wgX3Jldm9rYWJsZSwKICAgIGJvb2wgX2J1cm5zT25SZXZva2UKICApIHB1YmxpYyB7CgogICAgLy8gQ2hlY2sgZm9yIGRhdGUgaW5jb25zaXN0ZW5jaWVzIHRoYXQgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3IKICAgIHJlcXVpcmUoX2NsaWZmID49IF9zdGFydCAmJiBfdmVzdGluZyA+PSBfY2xpZmYpOwoKICAgIHJlcXVpcmUodG9rZW5HcmFudHNDb3VudChfdG8pIDwgTUFYX0dSQU5UU19QRVJfQUREUkVTUyk7ICAgLy8gVG8gcHJldmVudCBhIHVzZXIgYmVpbmcgc3BhbW1lZCBhbmQgaGF2ZSBoaXMgYmFsYW5jZSBsb2NrZWQgKG91dCBvZiBnYXMgYXR0YWNrIHdoZW4gY2FsY3VsYXRpbmcgdmVzdGluZykuCgogICAgdWludDI1NiBjb3VudCA9IGdyYW50c1tfdG9dLnB1c2goCiAgICAgICAgICAgICAgICBUb2tlbkdyYW50KAogICAgICAgICAgICAgICAgICBfcmV2b2thYmxlID8gbXNnLnNlbmRlciA6IDAsIC8vIGF2b2lkIHN0b3JpbmcgYW4gZXh0cmEgMjAgYnl0ZXMgd2hlbiBpdCBpcyBub24tcmV2b2thYmxlCiAgICAgICAgICAgICAgICAgIF92YWx1ZSwKICAgICAgICAgICAgICAgICAgX2NsaWZmLAogICAgICAgICAgICAgICAgICBfdmVzdGluZywKICAgICAgICAgICAgICAgICAgX3N0YXJ0LAogICAgICAgICAgICAgICAgICBfcmV2b2thYmxlLAogICAgICAgICAgICAgICAgICBfYnVybnNPblJldm9rZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICk7CgogICAgdHJhbnNmZXIoX3RvLCBfdmFsdWUpOwoKICAgIE5ld1Rva2VuR3JhbnQobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUsIGNvdW50IC0gMSk7CiAgfQoKICAvKioKICAgKiBAZGV2IFJldm9rZSB0aGUgZ3JhbnQgb2YgdG9rZW5zIG9mIGEgc3BlY2lmZWQgYWRkcmVzcy4KICAgKiBAcGFyYW0gX2hvbGRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIGhhdmUgaXRzIHRva2VucyByZXZva2VkLgogICAqIEBwYXJhbSBfZ3JhbnRJZCBUaGUgaWQgb2YgdGhlIHRva2VuIGdyYW50LgogICAqLwogIGZ1bmN0aW9uIHJldm9rZVRva2VuR3JhbnQoYWRkcmVzcyBfaG9sZGVyLCB1aW50MjU2IF9ncmFudElkKSBwdWJsaWMgewogICAgVG9rZW5HcmFudCBzdG9yYWdlIGdyYW50ID0gZ3JhbnRzW19ob2xkZXJdW19ncmFudElkXTsKCiAgICByZXF1aXJlKGdyYW50LnJldm9rYWJsZSk7CiAgICByZXF1aXJlKGdyYW50LmdyYW50ZXIgPT0gbXNnLnNlbmRlcik7IC8vIE9ubHkgZ3JhbnRlciBjYW4gcmV2b2tlIGl0CgogICAgYWRkcmVzcyByZWNlaXZlciA9IGdyYW50LmJ1cm5zT25SZXZva2UgPyAweGRlYWQgOiBtc2cuc2VuZGVyOwoKICAgIHVpbnQyNTYgbm9uVmVzdGVkID0gbm9uVmVzdGVkVG9rZW5zKGdyYW50LCB1aW50NjQobm93KSk7CgogICAgLy8gcmVtb3ZlIGdyYW50IGZyb20gYXJyYXkKICAgIGRlbGV0ZSBncmFudHNbX2hvbGRlcl1bX2dyYW50SWRdOwogICAgZ3JhbnRzW19ob2xkZXJdW19ncmFudElkXSA9IGdyYW50c1tfaG9sZGVyXVtncmFudHNbX2hvbGRlcl0ubGVuZ3RoLnN1YigxKV07CiAgICBncmFudHNbX2hvbGRlcl0ubGVuZ3RoIC09IDE7CgogICAgYmFsYW5jZXNbcmVjZWl2ZXJdID0gYmFsYW5jZXNbcmVjZWl2ZXJdLmFkZChub25WZXN0ZWQpOwogICAgYmFsYW5jZXNbX2hvbGRlcl0gPSBiYWxhbmNlc1tfaG9sZGVyXS5zdWIobm9uVmVzdGVkKTsKCiAgICBUcmFuc2ZlcihfaG9sZGVyLCByZWNlaXZlciwgbm9uVmVzdGVkKTsKICB9CgoKICAvKioKICAgKiBAZGV2IENhbGN1bGF0ZSB0aGUgdG90YWwgYW1vdW50IG9mIHRyYW5zZmVyYWJsZSB0b2tlbnMgb2YgYSBob2xkZXIgYXQgYSBnaXZlbiB0aW1lCiAgICogQHBhcmFtIGhvbGRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBob2xkZXIKICAgKiBAcGFyYW0gdGltZSB1aW50NjQgVGhlIHNwZWNpZmljIHRpbWUuCiAgICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyBhIGhvbGRlcidzIHRvdGFsIGFtb3VudCBvZiB0cmFuc2ZlcmFibGUgdG9rZW5zLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyYWJsZVRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDY0IHRpbWUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGdyYW50SW5kZXggPSB0b2tlbkdyYW50c0NvdW50KGhvbGRlcik7CgogICAgaWYgKGdyYW50SW5kZXggPT0gMCkgcmV0dXJuIHN1cGVyLnRyYW5zZmVyYWJsZVRva2Vucyhob2xkZXIsIHRpbWUpOyAvLyBzaG9ydGN1dCBmb3IgaG9sZGVyIHdpdGhvdXQgZ3JhbnRzCgogICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgZ3JhbnRzIHRoZSBob2xkZXIgaGFzLCBhbmQgYWRkIGFsbCBub24tdmVzdGVkIHRva2VucwogICAgdWludDI1NiBub25WZXN0ZWQgPSAwOwogICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgZ3JhbnRJbmRleDsgaSsrKSB7CiAgICAgIG5vblZlc3RlZCA9IFNhZmVNYXRoLmFkZChub25WZXN0ZWQsIG5vblZlc3RlZFRva2VucyhncmFudHNbaG9sZGVyXVtpXSwgdGltZSkpOwogICAgfQoKICAgIC8vIEJhbGFuY2UgLSB0b3RhbE5vblZlc3RlZCBpcyB0aGUgYW1vdW50IG9mIHRva2VucyBhIGhvbGRlciBjYW4gdHJhbnNmZXIgYXQgYW55IGdpdmVuIHRpbWUKICAgIHVpbnQyNTYgdmVzdGVkVHJhbnNmZXJhYmxlID0gU2FmZU1hdGguc3ViKGJhbGFuY2VPZihob2xkZXIpLCBub25WZXN0ZWQpOwoKICAgIC8vIFJldHVybiB0aGUgbWluaW11bSBvZiBob3cgbWFueSB2ZXN0ZWQgY2FuIHRyYW5zZmVyIGFuZCBvdGhlciB2YWx1ZQogICAgLy8gaW4gY2FzZSB0aGVyZSBhcmUgb3RoZXIgbGltaXRpbmcgdHJhbnNmZXJhYmlsaXR5IGZhY3RvcnMgKGRlZmF1bHQgaXMgYmFsYW5jZU9mKQogICAgcmV0dXJuIE1hdGgubWluMjU2KHZlc3RlZFRyYW5zZmVyYWJsZSwgc3VwZXIudHJhbnNmZXJhYmxlVG9rZW5zKGhvbGRlciwgdGltZSkpOwogIH0KCiAgLyoqCiAgICogQGRldiBDaGVjayB0aGUgYW1vdW50IG9mIGdyYW50cyB0aGF0IGFuIGFkZHJlc3MgaGFzLgogICAqIEBwYXJhbSBfaG9sZGVyIFRoZSBob2xkZXIgb2YgdGhlIGdyYW50cy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiByZXByZXNlbnRpbmcgdGhlIHRvdGFsIGFtb3VudCBvZiBncmFudHMuCiAgICovCiAgZnVuY3Rpb24gdG9rZW5HcmFudHNDb3VudChhZGRyZXNzIF9ob2xkZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGluZGV4KSB7CiAgICByZXR1cm4gZ3JhbnRzW19ob2xkZXJdLmxlbmd0aDsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIGF0IGEgc3BlY2lmaWMgdGltZQogICAqIEBwYXJhbSB0b2tlbnMgdWludDI1NiBUaGUgYW1vdW50IG9mIHRva2VucyBncmFudGVkCiAgICogQHBhcmFtIHRpbWUgdWludDY0IFRoZSB0aW1lIHRvIGJlIGNoZWNrZWQKICAgKiBAcGFyYW0gc3RhcnQgdWludDY0IFRoZSB0aW1lIHJlcHJlc2VudGluZyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBncmFudAogICAqIEBwYXJhbSBjbGlmZiB1aW50NjQgIFRoZSBjbGlmZiBwZXJpb2QsIHRoZSBwZXJpb2QgYmVmb3JlIG5vdGhpbmcgY2FuIGJlIHBhaWQgb3V0CiAgICogQHBhcmFtIHZlc3RpbmcgdWludDY0IFRoZSB2ZXN0aW5nIHBlcmlvZAogICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIG9mIGEgc3BlY2lmaWMgZ3JhbnQKICAgKiAgdHJhbnNmZXJhYmxlVG9rZW5zCiAgICogICB8ICAgICAgICAgICAgICAgICAgICAgICAgIF8vLS0tLS0tLS0gICB2ZXN0ZWRUb2tlbnMgcmVjdAogICAqICAgfCAgICAgICAgICAgICAgICAgICAgICAgXy8KICAgKiAgIHwgICAgICAgICAgICAgICAgICAgICBfLwogICAqICAgfCAgICAgICAgICAgICAgICAgICBfLwogICAqICAgfCAgICAgICAgICAgICAgICAgXy8KICAgKiAgIHwgICAgICAgICAgICAgICAgLwogICAqICAgfCAgICAgICAgICAgICAgLnwKICAgKiAgIHwgICAgICAgICAgICAuICB8CiAgICogICB8ICAgICAgICAgIC4gICAgfAogICAqICAgfCAgICAgICAgLiAgICAgIHwKICAgKiAgIHwgICAgICAuICAgICAgICB8CiAgICogICB8ICAgIC4gICAgICAgICAgfAogICAqICAgKz09PSs9PT09PT09PT09PSstLS0tLS0tLS0rLS0tLS0tLS0tLT4gdGltZQogICAqICAgICAgU3RhcnQgICAgICAgQ2xpZmYgICAgVmVzdGluZwogICAqLwogIGZ1bmN0aW9uIGNhbGN1bGF0ZVZlc3RlZFRva2VucygKICAgIHVpbnQyNTYgdG9rZW5zLAogICAgdWludDI1NiB0aW1lLAogICAgdWludDI1NiBzdGFydCwKICAgIHVpbnQyNTYgY2xpZmYsCiAgICB1aW50MjU2IHZlc3RpbmcpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAvLyBTaG9ydGN1dHMgZm9yIGJlZm9yZSBjbGlmZiBhbmQgYWZ0ZXIgdmVzdGluZyBjYXNlcy4KICAgICAgaWYgKHRpbWUgPCBjbGlmZikgcmV0dXJuIDA7CiAgICAgIGlmICh0aW1lID49IHZlc3RpbmcpIHJldHVybiB0b2tlbnM7CgogICAgICAvLyBJbnRlcnBvbGF0ZSBhbGwgdmVzdGVkIHRva2Vucy4KICAgICAgLy8gQXMgYmVmb3JlIGNsaWZmIHRoZSBzaG9ydGN1dCByZXR1cm5zIDAsIHdlIGNhbiB1c2UganVzdCBjYWxjdWxhdGUgYSB2YWx1ZQogICAgICAvLyBpbiB0aGUgdmVzdGluZyByZWN0IChhcyBzaG93biBpbiBhYm92ZSdzIGZpZ3VyZSkKCiAgICAgIC8vIHZlc3RlZFRva2VucyA9ICh0b2tlbnMgKiAodGltZSAtIHN0YXJ0KSkgLyAodmVzdGluZyAtIHN0YXJ0KQogICAgICB1aW50MjU2IHZlc3RlZFRva2VucyA9IFNhZmVNYXRoLmRpdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2FmZU1hdGgubXVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWZlTWF0aC5zdWIodGltZSwgc3RhcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2FmZU1hdGguc3ViKHZlc3RpbmcsIHN0YXJ0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgcmV0dXJuIHZlc3RlZFRva2VuczsKICB9CgogIC8qKgogICAqIEBkZXYgR2V0IGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGdyYW50LgogICAqIEBwYXJhbSBfaG9sZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgaGF2ZSBpdHMgdG9rZW5zIHJldm9rZWQuCiAgICogQHBhcmFtIF9ncmFudElkIFRoZSBpZCBvZiB0aGUgdG9rZW4gZ3JhbnQuCiAgICogQHJldHVybiBSZXR1cm5zIGFsbCB0aGUgdmFsdWVzIHRoYXQgcmVwcmVzZW50IGEgVG9rZW5HcmFudChhZGRyZXNzLCB2YWx1ZSwgc3RhcnQsIGNsaWZmLAogICAqIHJldm9rYWJpbGl0eSwgYnVybnNPblJldm9rZSwgYW5kIHZlc3RpbmcpIHBsdXMgdGhlIHZlc3RlZCB2YWx1ZSBhdCB0aGUgY3VycmVudCB0aW1lLgogICAqLwogIGZ1bmN0aW9uIHRva2VuR3JhbnQoYWRkcmVzcyBfaG9sZGVyLCB1aW50MjU2IF9ncmFudElkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBncmFudGVyLCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IHZlc3RlZCwgdWludDY0IHN0YXJ0LCB1aW50NjQgY2xpZmYsIHVpbnQ2NCB2ZXN0aW5nLCBib29sIHJldm9rYWJsZSwgYm9vbCBidXJuc09uUmV2b2tlKSB7CiAgICBUb2tlbkdyYW50IHN0b3JhZ2UgZ3JhbnQgPSBncmFudHNbX2hvbGRlcl1bX2dyYW50SWRdOwoKICAgIGdyYW50ZXIgPSBncmFudC5ncmFudGVyOwogICAgdmFsdWUgPSBncmFudC52YWx1ZTsKICAgIHN0YXJ0ID0gZ3JhbnQuc3RhcnQ7CiAgICBjbGlmZiA9IGdyYW50LmNsaWZmOwogICAgdmVzdGluZyA9IGdyYW50LnZlc3Rpbmc7CiAgICByZXZva2FibGUgPSBncmFudC5yZXZva2FibGU7CiAgICBidXJuc09uUmV2b2tlID0gZ3JhbnQuYnVybnNPblJldm9rZTsKCiAgICB2ZXN0ZWQgPSB2ZXN0ZWRUb2tlbnMoZ3JhbnQsIHVpbnQ2NChub3cpKTsKICB9CgogIC8qKgogICAqIEBkZXYgR2V0IHRoZSBhbW91bnQgb2YgdmVzdGVkIHRva2VucyBhdCBhIHNwZWNpZmljIHRpbWUuCiAgICogQHBhcmFtIGdyYW50IFRva2VuR3JhbnQgVGhlIGdyYW50IHRvIGJlIGNoZWNrZWQuCiAgICogQHBhcmFtIHRpbWUgVGhlIHRpbWUgdG8gYmUgY2hlY2tlZAogICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIG9mIGEgc3BlY2lmaWMgZ3JhbnQgYXQgYSBzcGVjaWZpYyB0aW1lLgogICAqLwogIGZ1bmN0aW9uIHZlc3RlZFRva2VucyhUb2tlbkdyYW50IGdyYW50LCB1aW50NjQgdGltZSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gY2FsY3VsYXRlVmVzdGVkVG9rZW5zKAogICAgICBncmFudC52YWx1ZSwKICAgICAgdWludDI1Nih0aW1lKSwKICAgICAgdWludDI1NihncmFudC5zdGFydCksCiAgICAgIHVpbnQyNTYoZ3JhbnQuY2xpZmYpLAogICAgICB1aW50MjU2KGdyYW50LnZlc3RpbmcpCiAgICApOwogIH0KCiAgLyoqCiAgICogQGRldiBDYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBub24gdmVzdGVkIHRva2VucyBhdCBhIHNwZWNpZmljIHRpbWUuCiAgICogQHBhcmFtIGdyYW50IFRva2VuR3JhbnQgVGhlIGdyYW50IHRvIGJlIGNoZWNrZWQuCiAgICogQHBhcmFtIHRpbWUgdWludDY0IFRoZSB0aW1lIHRvIGJlIGNoZWNrZWQKICAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb2Ygbm9uIHZlc3RlZCB0b2tlbnMgb2YgYSBzcGVjaWZpYyBncmFudCBvbiB0aGUKICAgKiBwYXNzZWQgdGltZSBmcmFtZS4KICAgKi8KICBmdW5jdGlvbiBub25WZXN0ZWRUb2tlbnMoVG9rZW5HcmFudCBncmFudCwgdWludDY0IHRpbWUpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGdyYW50LnZhbHVlLnN1Yih2ZXN0ZWRUb2tlbnMoZ3JhbnQsIHRpbWUpKTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlIHRoZSBkYXRlIHdoZW4gdGhlIGhvbGRlciBjYW4gdHJhbnNmZXIgYWxsIGl0cyB0b2tlbnMKICAgKiBAcGFyYW0gaG9sZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGhvbGRlcgogICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGRhdGUgb2YgdGhlIGxhc3QgdHJhbnNmZXJhYmxlIHRva2Vucy4KICAgKi8KICBmdW5jdGlvbiBsYXN0VG9rZW5Jc1RyYW5zZmVyYWJsZURhdGUoYWRkcmVzcyBob2xkZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50NjQgZGF0ZSkgewogICAgZGF0ZSA9IHVpbnQ2NChub3cpOwogICAgdWludDI1NiBncmFudEluZGV4ID0gZ3JhbnRzW2hvbGRlcl0ubGVuZ3RoOwogICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgZ3JhbnRJbmRleDsgaSsrKSB7CiAgICAgIGRhdGUgPSBNYXRoLm1heDY0KGdyYW50c1tob2xkZXJdW2ldLnZlc3RpbmcsIGRhdGUpOwogICAgfQogIH0KfQoKY29udHJhY3QgRnJlZXpvbmVUb2tlbiBpcyBWZXN0ZWRUb2tlbiB7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiRnJlZSBDcnlwdG8gRWNvbm9taWMgWm9uZSI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJGUloiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIElOSVRJQUxfU1VQUExZID0gMTAwMDAwMDAwMCAqICgxMCAqKiBkZWNpbWFscyk7CiAgICAKICAgIHVpbnQ2NCBzdGFydCA9IHVpbnQ2NChub3cpOwogICAgdWludDY0IHZlc3Rpbmc7CiAgICBib29sIHJldm9rYWJsZSA9IGZhbHNlOwogICAgYm9vbCBidXJuc09uUmV2b2tlID0gZmFsc2U7CiAgICAvLyBGQ0VaIHRva2VucyBvd25lciBhZGRyZXNzCiAgICBhZGRyZXNzIG11bHRpc2lnID0gMHg1YzE1NzQxQzdBQmIxYjBFOEZCMEJENDFiNWVkOGMxNzIxOTkyNkExOwogICAgCiAgICBmdW5jdGlvbiBGcmVlem9uZVRva2VuKCkgewogICAgICAgIAogICAgICAgIC8vIGNvbnN0cnVjdG9yCiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwogICAgICAgIAogICAgICAgIC8vIEdyYW50IHZlc3RlZCB0b2tlbnMKICAgICAgICAvLzEuIDEwMG0gdG9rZW5zIGZyb3plbiBmb3IgMTIgbW9udGhzCiAgICAgICAgdmVzdGluZyA9IHVpbnQ2NChzdGFydCArIDEgeWVhcnMpOwogICAgICAgIGdyYW50VmVzdGVkVG9rZW5zKG11bHRpc2lnLDEwMDAwMDAwMCAqICgxMCAqKiBkZWNpbWFscyksc3RhcnQsdmVzdGluZyx2ZXN0aW5nLHJldm9rYWJsZSxidXJuc09uUmV2b2tlKTsKICAgICAgICAvLzIuIDUwbSB0b2tlbnMgZnJvemVuIGZvciAxOCBtb250aHMKICAgICAgICB2ZXN0aW5nID0gdWludDY0KHN0YXJ0ICsgMS41IHllYXJzKTsKICAgICAgICBncmFudFZlc3RlZFRva2VucyhtdWx0aXNpZyw1MDAwMDAwMCAqICgxMCAqKiBkZWNpbWFscyksc3RhcnQsdmVzdGluZyx2ZXN0aW5nLHJldm9rYWJsZSxidXJuc09uUmV2b2tlKTsKICAgICAgICAvLzMuIDUwbSB0b2tlbnMgZnJvemVuIGZvciAyNCBtb250aHMKICAgICAgICB2ZXN0aW5nID0gdWludDY0KHN0YXJ0ICsgMiB5ZWFycyk7CiAgICAgICAgZ3JhbnRWZXN0ZWRUb2tlbnMobXVsdGlzaWcsNTAwMDAwMDAgKiAoMTAgKiogZGVjaW1hbHMpLHN0YXJ0LHZlc3RpbmcsdmVzdGluZyxyZXZva2FibGUsYnVybnNPblJldm9rZSk7CiAgICAgICAgLy80LiA1MG0gdG9rZW5zIGZyb3plbiBmb3IgMzAgbW9udGhzCiAgICAgICAgdmVzdGluZyA9IHVpbnQ2NChzdGFydCArIDIuNSB5ZWFycyk7CiAgICAgICAgZ3JhbnRWZXN0ZWRUb2tlbnMobXVsdGlzaWcsNTAwMDAwMDAgKiAoMTAgKiogZGVjaW1hbHMpLHN0YXJ0LHZlc3RpbmcsdmVzdGluZyxyZXZva2FibGUsYnVybnNPblJldm9rZSk7CiAgICAgICAgLy81LiA1MG0gdG9rZW5zIGZyb3plbiBmb3IgMzYgbW9udGhzCiAgICAgICAgdmVzdGluZyA9IHVpbnQ2NChzdGFydCArIDMgeWVhcnMpOwogICAgICAgIGdyYW50VmVzdGVkVG9rZW5zKG11bHRpc2lnLDUwMDAwMDAwICogKDEwICoqIGRlY2ltYWxzKSxzdGFydCx2ZXN0aW5nLHZlc3RpbmcscmV2b2thYmxlLGJ1cm5zT25SZXZva2UpOwogICAgICAgIAogICAgfQp9'.
	

]
