Class {
	#name : #SRT630692af992c84d59a77990587b15d8b330e084b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT630692af992c84d59a77990587b15d8b330e084b >> base64 [
	^ ''.
	

]
