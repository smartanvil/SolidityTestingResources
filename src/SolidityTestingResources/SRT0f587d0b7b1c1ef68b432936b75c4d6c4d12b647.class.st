Class {
	#name : #SRT0f587d0b7b1c1ef68b432936b75c4d6c4d12b647,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f587d0b7b1c1ef68b432936b75c4d6c4d12b647 >> base64 [
	^ ''.
	

]
