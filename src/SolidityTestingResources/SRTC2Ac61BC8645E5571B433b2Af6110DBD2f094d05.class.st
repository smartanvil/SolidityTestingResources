Class {
	#name : #SRTC2Ac61BC8645E5571B433b2Af6110DBD2f094d05,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC2Ac61BC8645E5571B433b2Af6110DBD2f094d05 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAgICAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAgICAgICAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovKioKICogQHRpdGxlIE93bmFibGUKICAgICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbCAKICAgICAgICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4gCiAgICAgICAgICAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKiAKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAgICAqIGFjY291bnQuCiAgICAgICAgICAgICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4gCiAgICAgICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAgICAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4gCiAgICAgICAgICAgICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICB9Cgp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAgICAqCiAgICAgICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAgICAgICAgICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICAgICAgICAgICAgKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAgICAgICAgICAgICAgICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByZUlDT19hZGRyZXNzOwogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIHVpbnQyNTYgcHVibGljIGVuZERhdGU7CiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICAgICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgICAgICAgICAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoKICAgIGlmKCBwcmVJQ09fYWRkcmVzc1ttc2cuc2VuZGVyXSApIHJlcXVpcmUoIG5vdyA+IGVuZERhdGUgKyAxMjAgZGF5cyApOyAvL0xvY2sgY29pbgogICAgZWxzZSByZXF1aXJlKCBub3cgPiBlbmREYXRlICk7IC8vTG9jayBjb2luCgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuIAogICAgICAgICAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICAgICAgICAgICAgICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgICAgICAgICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgICAgICAgICAgICAgICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBpZiggcHJlSUNPX2FkZHJlc3NbX2Zyb21dICkgcmVxdWlyZSggbm93ID4gZW5kRGF0ZSArIDEyMCBkYXlzICk7IC8vTG9jayBjb2luCiAgICBlbHNlIHJlcXVpcmUoIG5vdyA+IGVuZERhdGUgKTsgLy9Mb2NrIGNvaW4KCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgICAgICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICAgICAgICAgICAgICAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBpZiggcHJlSUNPX2FkZHJlc3NbbXNnLnNlbmRlcl0gKSByZXF1aXJlKCBub3cgPiBlbmREYXRlICsgMTIwIGRheXMgKTsgLy9Mb2NrIGNvaW4KICAgIGVsc2UgcmVxdWlyZSggbm93ID4gZW5kRGF0ZSApOyAvL0xvY2sgY29pbgoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICAgICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgICAgICAgICAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgICAgICAgICAgICAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgICAgICAgICAgICAgICAgICAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCmNvbnRyYWN0IFRCQ29pbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRva2VuIEluZm8uCiAgICBzdHJpbmcgIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlRpbWVCb3ggQ29pbiI7CiAgICBzdHJpbmcgIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVEIiOwogICAgdWludDggICBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICAvLyBTYWxlIHBlcmlvZC4KICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0RGF0ZTsKICAgIC8vIHVpbnQyNTYgcHVibGljIGVuZERhdGU7CgogICAgLy8gVG9rZW4gQ2FwIGZvciBlYWNoIHJvdW5kcwogICAgdWludDI1NiBwdWJsaWMgc2FsZUNhcDsKCiAgICAvLyBBZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQuCiAgICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogICAgLy8gQW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkuCiAgICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogICAgLy8gRXZlbnQKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgdWludDI1NiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgUHJlSUNPVG9rZW5QdXNoZWQoYWRkcmVzcyBpbmRleGVkIGJ1eWVyLCB1aW50MjU2IGFtb3VudCk7CgogICAgLy8gTW9kaWZpZXJzCiAgICBtb2RpZmllciB1bmluaXRpYWxpemVkKCkgewogICAgICAgIHJlcXVpcmUod2FsbGV0ID09IDB4MCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBUQkNvaW4oKSBwdWJsaWN7CiAgICB9Ci8vIAogICAgZnVuY3Rpb24gaW5pdGlhbGl6ZShhZGRyZXNzIF93YWxsZXQsIHVpbnQyNTYgX3N0YXJ0LCB1aW50MjU2IF9lbmQsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX3NhbGVDYXAsIHVpbnQyNTYgX3RvdGFsU3VwcGx5KQogICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgb25seU93bmVyIHVuaW5pdGlhbGl6ZWQgewogICAgICAgIHJlcXVpcmUoX3N0YXJ0ID49IGdldEN1cnJlbnRUaW1lc3RhbXAoKSk7CiAgICAgICAgcmVxdWlyZShfc3RhcnQgPCBfZW5kKTsKICAgICAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF90b3RhbFN1cHBseSA+IF9zYWxlQ2FwKTsKCiAgICAgICAgc3RhcnREYXRlID0gX3N0YXJ0OwogICAgICAgIGVuZERhdGUgPSBfZW5kOwogICAgICAgIHNhbGVDYXAgPSBfc2FsZUNhcDsKICAgICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5OwoKICAgICAgICBiYWxhbmNlc1t3YWxsZXRdID0gX3RvdGFsU3VwcGx5LnN1YihzYWxlQ2FwKTsKICAgICAgICBiYWxhbmNlc1sweGIxXSA9IHNhbGVDYXA7CiAgICB9CgogICAgZnVuY3Rpb24gc3VwcGx5KCkgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzWzB4YjFdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lc3RhbXAoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gbm93OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFJhdGVBdCh1aW50MjU2IGF0KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhdCA8IHN0YXJ0RGF0ZSkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9IGVsc2UgaWYgKGF0IDwgKHN0YXJ0RGF0ZSArIDMgZGF5cykpIHsKICAgICAgICAgICAgcmV0dXJuIDE1MDA7CiAgICAgICAgfSBlbHNlIGlmIChhdCA8IChzdGFydERhdGUgKyA3IGRheXMpKSB7CiAgICAgICAgICAgIHJldHVybiAxNDQwOwogICAgICAgIH0gZWxzZSBpZiAoYXQgPCAoc3RhcnREYXRlICsgMTQgZGF5cykpIHsKICAgICAgICAgICAgcmV0dXJuIDEzODA7CiAgICAgICAgfSBlbHNlIGlmIChhdCA8IChzdGFydERhdGUgKyAyMSBkYXlzKSkgewogICAgICAgICAgICByZXR1cm4gMTMyMDsKICAgICAgICB9IGVsc2UgaWYgKGF0IDwgKHN0YXJ0RGF0ZSArIDI4IGRheXMpKSB7CiAgICAgICAgICAgIHJldHVybiAxMjYwOwogICAgICAgIH0gZWxzZSBpZiAoYXQgPD0gZW5kRGF0ZSkgewogICAgICAgICAgICByZXR1cm4gMTIwMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICB9CgogICAgLy8gRmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIC8vIEZvciBwdXNoaW5nIHByZS1JQ08gcmVjb3JkcwogICAgZnVuY3Rpb24gcHVzaChhZGRyZXNzIGJ1eWVyLCB1aW50MjU2IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7IC8vYjc1M2E5OGMKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW3dhbGxldF0gPj0gYW1vdW50KTsKICAgICAgICByZXF1aXJlKG5vdyA8IHN0YXJ0RGF0ZSk7CiAgICAgICAgcmVxdWlyZShidXllciAhPSB3YWxsZXQpOwoKICAgICAgICBwcmVJQ09fYWRkcmVzc1sgYnV5ZXIgXSA9IHRydWU7CgogICAgICAgIC8vIFRyYW5zZmVyCiAgICAgICAgYmFsYW5jZXNbd2FsbGV0XSA9IGJhbGFuY2VzW3dhbGxldF0uc3ViKGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbYnV5ZXJdID0gYmFsYW5jZXNbYnV5ZXJdLmFkZChhbW91bnQpOwogICAgICAgIFByZUlDT1Rva2VuUHVzaGVkKGJ1eWVyLCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIHNlbmRlciwgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoc2FsZUFjdGl2ZSgpKTsKICAgICAgICByZXF1aXJlKHZhbHVlID49IDAuMiBldGhlcik7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gdmFsdWU7CiAgICAgICAgdWludDI1NiB1cGRhdGVkV2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICAvLyBDYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIHB1cmNoYXNlZAogICAgICAgIHVpbnQyNTYgYWN0dWFsUmF0ZSA9IGdldFJhdGVBdChnZXRDdXJyZW50VGltZXN0YW1wKCkpOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gd2VpQW1vdW50Lm11bChhY3R1YWxSYXRlKTsKCiAgICAgICAgLy8gV2UgaGF2ZSBlbm91Z2ggdG9rZW4gdG8gc2FsZQogICAgICAgIHJlcXVpcmUoc3VwcGx5KCkgPj0gYW1vdW50KTsKCiAgICAgICAgLy8gVHJhbnNmZXIKICAgICAgICBiYWxhbmNlc1sweGIxXSA9IGJhbGFuY2VzWzB4YjFdLnN1YihhbW91bnQpOwogICAgICAgIGJhbGFuY2VzW3NlbmRlcl0gPSBiYWxhbmNlc1tzZW5kZXJdLmFkZChhbW91bnQpOwogICAgICAgIFRva2VuUHVyY2hhc2Uoc2VuZGVyLCB3ZWlBbW91bnQsIGFtb3VudCk7CgogICAgICAgIC8vIFVwZGF0ZSBzdGF0ZS4KICAgICAgICB3ZWlSYWlzZWQgPSB1cGRhdGVkV2VpUmFpc2VkOwoKICAgICAgICAvLyBGb3J3YXJkIHRoZSBmdW5kIHRvIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQuCiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFzYWxlQWN0aXZlKCkpOwoKICAgICAgICAvLyBUcmFuc2ZlciB0aGUgcmVzdCBvZiB0b2tlbiB0byBUQiB0ZWFtCiAgICAgICAgYmFsYW5jZXNbd2FsbGV0XSA9IGJhbGFuY2VzW3dhbGxldF0uYWRkKGJhbGFuY2VzWzB4YjFdKTsKICAgICAgICBiYWxhbmNlc1sweGIxXSA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gc2FsZUFjdGl2ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChnZXRDdXJyZW50VGltZXN0YW1wKCkgPj0gc3RhcnREYXRlICYmCiAgICAgICAgICAgICAgICBnZXRDdXJyZW50VGltZXN0YW1wKCkgPCBlbmREYXRlICYmIHN1cHBseSgpID4gMCk7CiAgICB9CiAgICAKfQ=='.
	

]
