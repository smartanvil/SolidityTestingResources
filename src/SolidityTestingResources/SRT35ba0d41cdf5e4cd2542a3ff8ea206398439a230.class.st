Class {
	#name : #SRT35ba0d41cdf5e4cd2542a3ff8ea206398439a230,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT35ba0d41cdf5e4cd2542a3ff8ea206398439a230 >> base64 [
	^ ''.
	

]
