Class {
	#name : #SRT8862d55fa8e1d766b386f08d869d7fbcf5b96a06,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8862d55fa8e1d766b386f08d869d7fbcf5b96a06 >> base64 [
	^ ''.
	

]
