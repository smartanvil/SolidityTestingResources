Class {
	#name : #SRT36724caf8b66dff61b836b59cc659219346c2c9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36724caf8b66dff61b836b59cc659219346c2c9e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CgogICAgLy8gTGlzdGEgZGVpIE5vdGFpIGF1dG9yaXp6YXRpCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBub3RhaW9BY2NvdW50czsKCiAgICBtb2RpZmllciBvbmx5Tm90YWlvIHsKICAgICAgICAvLyBWZXJpZmljbyBjaGUgbCdlc2VjdXRvcmUgc2lhIHVuIE5vdGFpbyBhdXRvcml6emF0bwogICAgICAgIHJlcXVpcmUoaXNOb3RhaW8obXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBub3RpY2UgTW9zdHJhIGxvIHN0YXRvIGRpIGF1dG9yaXp6YXppb25lIGRlbCBOb3RhaW8KICAgIC8vLyBAcGFyYW0gdGFyZ2V0IGwnaW5kaXJpenpvIGRhIHZlcmlmaWNhcmUgc2UgcHJlc2VudGUgbmVsbGEgbGlzdGEgZGVpIE5vdGFpIGF1dG9yaXp6YXRpCiAgICBmdW5jdGlvbiBpc05vdGFpbyhhZGRyZXNzIHRhcmdldCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBzdGF0dXMpIHsKICAgICAgICByZXR1cm4gbm90YWlvQWNjb3VudHNbdGFyZ2V0XTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBZ2dpdW5nZSB1biBudW92byBOb3RhaW8gYXV0b3JpenphdG8KICAgIC8vLyBAcGFyYW0gdGFyZ2V0IGwnaW5kaXJpenpvIGRhIGFnZ2l1bmdlcmUgbmVsbGEgbGlzdGEgZGVpIE5vdGFpIGF1dG9yaXp6YXRpCiAgICBmdW5jdGlvbiBzZXROb3RhaW8oYWRkcmVzcyB0YXJnZXQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG5vdGFpb0FjY291bnRzW3RhcmdldF0gPSB0cnVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJpbXVvdmUgdW4gdmVjY2hpbyBOb3RhaW8KICAgIC8vLyBAcGFyYW0gdGFyZ2V0IGwnaW5kaXJpenpvIGRhIHJpbXVvdmVyZSBkYWxsYSBsaXN0YSBkZWkgTm90YWkgYXV0b3JpenphdGkKICAgIGZ1bmN0aW9uIHVuc2V0Tm90YWlvKGFkZHJlc3MgdGFyZ2V0KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBub3RhaW9BY2NvdW50c1t0YXJnZXRdID0gZmFsc2U7CiAgICB9Cn0KCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsgfQoKY29udHJhY3QgVG9rZW5FUkMyMCB7CiAgICAvLyBJbmZvcm1hemlvbmkgc3VsIENvaW4KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJSb2NhdGkiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAixqYiOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDUwMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CgogICAgLy8gQmlsYW5jaQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8vIE5vdGlmaWNoZQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEluaXppYWxpenphemlvbmUKICAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5FUkMyMCgpIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgICB9CgogICAgLyoqCiAgICAgKiBGdW56aW9uZSBpbnRlcm5hIGRpIHRyYW5zZmVyLCBpbiB1c28gc29sbyBhbGxvIFNtYXJ0IENvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvLyBDb250cm9sbGkgZGkgc2ljdXJlenphCiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID4gYmFsYW5jZU9mW190b10pOwogICAgICAgIC8vIFNhbHZhIGxvIHN0YXRvIGNvcnJlbnRlIHBlciB2ZXJpZmljYXJsbyBkb3BvIGlsIHRyYXNmZXJpbWVudG8KICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CiAgICAgICAgLy8gVHJhc2ZlcmltZW50byBkZWwgQ29pbiBjb24gbm90aWZpY2EKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAvLyBWZXJpZmljYSBjaGUgbG8gc3RhdG8gY29ycmVudGUgc2lhIGNvZXJlbnRlIGNvbiBxdWVsbG8gcHJlY2VkZW50ZSBhbCB0cmFzZmVyaW1lbnRvCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucwogICAgICoKICAgICAqIEludmlhIGBfdmFsdWVgIENvaW4gZGFsIHByb3ByaW8gYWNjb3VudCBhbGwnaW5kaXJpenpvIGBfdG9gCiAgICAgKgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucyBmcm9tIG90aGVyIGFkZHJlc3MKICAgICAqCiAgICAgKiBJbnZpYSBgX3ZhbHVlYCBDb2luIGRhbGwnYWNjb3VudCBgX2Zyb21gIGFsbCdpbmRpcml6em8gYF90b2AKICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gQ29udHJvbGxpIGRpIHNpY3VyZXp6YQogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIFRyYXNmZXJpbWVudG8gZGVsIENvaW4gY29uIG5vdGlmaWNhCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzCiAgICAgKgogICAgICogQXV0b3JpenphIGBfc3BlbmRlcmAgYSB1c2FyZSBgX3ZhbHVlYCB0dW9pIENvaW4KICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIERlc3Ryb3kgdG9rZW5zCiAgICAgKgogICAgICogRWxpbWluYSBgX3ZhbHVlYCB0dW9pIENvaW4KICAgICAqCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gQ29udHJvbGxpIGRpIHNpY3VyZXp6YQogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgLy8gRWxpbWluYXppb25lIGRlbCBDb2luIGNvbiBub3RpZmljYQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOwogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiAgICAgICAgU01BUlQgQ09OVFJBQ1QgREVMIENPSU4gICAgICAgICovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCmNvbnRyYWN0IFJvY2F0aSBpcyBvd25lZCwgVG9rZW5FUkMyMCB7CiAgICAvKiBJbml6aWFsaXp6YXppb25lICovCiAgICBmdW5jdGlvbiBSb2NhdGkoKSBUb2tlbkVSQzIwKCkgcHVibGljIHt9CgogICAgLy8vIEBub3RpY2UgR2VuZXJhIGBuZXdBbW91bnRgIG51b3ZpIENvaW4gZGEgaW52aWFyZSBhIGB0YXJnZXRgIGNoZSBkZXZlIGVzc2VyZSB1biBOb3RhaW8KICAgIC8vLyBAcGFyYW0gbmV3QW1vdW50IGxhIHF1YW50aXQmIzIyNDsgZGkgbnVvdmkgQ29pbiBkYSBnZW5lcmFyZQogICAgLy8vIEBwYXJhbSB0YXJnZXQgbCdpbmRpcml6em8gY2hlIGEgY3VpIGludmlhcmUgaSBudW92aSBDb2luCiAgICBmdW5jdGlvbiB0cmFuc2Zlck5ld0NvaW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbmV3QW1vdW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICAvLyBDb250cm9sbGkgZGkgc2ljdXJlenphCiAgICAgICAgcmVxdWlyZShpc05vdGFpbyh0YXJnZXQpKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlt0YXJnZXRdICsgbmV3QW1vdW50ID4gYmFsYW5jZU9mW3RhcmdldF0pOwogICAgICAgIC8vIEdlbmVyYXppb25lIGUgdHJhc2ZlcmltZW50byBkZWwgbnVvdm8gQ29pbiBjb24gbm90aWZpY2hlCiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gKz0gbmV3QW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG5ld0Ftb3VudDsKICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCBuZXdBbW91bnQpOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIHRhcmdldCwgbmV3QW1vdW50KTsKICAgIH0KfQ=='.
	

]
