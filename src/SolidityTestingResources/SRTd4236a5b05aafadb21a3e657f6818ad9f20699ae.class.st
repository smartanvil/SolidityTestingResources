Class {
	#name : #SRTd4236a5b05aafadb21a3e657f6818ad9f20699ae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd4236a5b05aafadb21a3e657f6818ad9f20699ae >> base64 [
	^ ''.
	

]
