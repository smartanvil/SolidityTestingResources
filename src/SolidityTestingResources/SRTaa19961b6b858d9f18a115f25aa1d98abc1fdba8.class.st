Class {
	#name : #SRTaa19961b6b858d9f18a115f25aa1d98abc1fdba8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa19961b6b858d9f18a115f25aa1d98abc1fdba8 >> base64 [
	^ ''.
	

]
