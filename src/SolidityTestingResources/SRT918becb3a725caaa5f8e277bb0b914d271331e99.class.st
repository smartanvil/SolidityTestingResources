Class {
	#name : #SRT918becb3a725caaa5f8e277bb0b914d271331e99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT918becb3a725caaa5f8e277bb0b914d271331e99 >> base64 [
	^ ''.
	

]
