Class {
	#name : #SRT96a68a724f1472475d0037202a516451052f26dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96a68a724f1472475d0037202a516451052f26dc >> base64 [
	^ ''.
	

]
