Class {
	#name : #SRT4464c3de9018937e59996510845ce0934033cd4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4464c3de9018937e59996510845ce0934033cd4e >> base64 [
	^ ''.
	

]
