Class {
	#name : #SRT1EB96d45C1f8FfB2c583262cE5E536D0B38F160d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1EB96d45C1f8FfB2c583262cE5E536D0B38F160d >> base64 [
	^ ''.
	

]
