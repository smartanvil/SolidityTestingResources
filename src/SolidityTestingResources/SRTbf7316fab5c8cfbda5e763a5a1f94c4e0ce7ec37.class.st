Class {
	#name : #SRTbf7316fab5c8cfbda5e763a5a1f94c4e0ce7ec37,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf7316fab5c8cfbda5e763a5a1f94c4e0ce7ec37 >> base64 [
	^ 'Ly8gQSBuYW1lIHJlZ2lzdHJ5IGluIEV0aGVyZXVtCgovLyAiUmVhbCIgYXR0ZW1wdHMgdG8gYSBuYW1lIHJlZ2lzdHJ5IHdpdGggRXRoZXJldW06Ci8vIDxodHRwOi8vZXRoZXJpZC5vcmcvPiA8aHR0cHM6Ly9naXRodWIuY29tL3NpbmtpbmctcG9pbnQvZG5zMi8+CgovLyBUT0RPOiB1c2UgdGhlIHJlZ2lzdHJ5IGludGVyZmFjZSBkZXNjcmliZWQgaW4KLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvU3RhbmRhcmRpemVkX0NvbnRyYWN0X0FQSXM+PwoKLy8gU3RhbmRhcmQgc3RyaW5ncyBhcmUgcG9vciwgd2UgbmVlZCBhbiBleHRlbnNpb24gbGlicmFyeSwKLy8gZ2l0aHViLmNvbS9BcmFjaG5pZC9zb2xpZGl0eS1zdHJpbmd1dGlscy9zdHJpbmdzLnNvbCBUT0RPOiB1c2UgaXQgYXMgc29vbiBhcyBodHRwczovL2dpdGh1Yi5jb20vQXJhY2huaWQvc29saWRpdHktc3RyaW5ndXRpbHMvaXNzdWVzLzEgaXMgc29sdmVkLgovLyBpbXBvcnQgInN0cmluZ3Muc29sIjsKCmNvbnRyYWN0IFJlZ2lzdHJ5IHsKCiAgLy8gdXNpbmcgc3RyaW5ncyBmb3IgKjsgLy8gVE9ETyBzZWUgYWJvdmUKCiAgYWRkcmVzcyBwdWJsaWMgbmljOyAvLyBUaGUgTmV0d29yayBJbmZvcm1hdGlvbiBDZW50ZXIKICAKICBzdHJ1Y3QgUmVjb3JkIHsKICAgIHN0cmluZyB2YWx1ZTsgLy8gSVAgYWRkcmVzc2VzLCBlbWFpbHMsIGV0YyBUT0RPIGFjY2VwdCBhbiBhcnJheQoJCSAgICAgLy8gYXMgc29vbiBhcyB3ZSBoYXZlIGEgc3RyaW5ncyBsaWJyYXJ5IHRvCgkJICAgICAvLyBzZXJpYWxpemUvZGVzZXJpYWxpemUuIFRPRE8gdHlwZSB0aGUgdmFsdWVzIHdpdGggYW4gRW51bQogICAgYWRkcmVzcyBob2xkZXI7CiAgICBib29sIGV4aXN0czsgLy8gT3IgYSBtb3JlIGRldGFpbGVkIHN0YXRlLCB3aXRoIGFuIGVudW0/CiAgICB1aW50IGlkeDsKICB9CiAgbWFwcGluZyAoc3RyaW5nID0+IFJlY29yZCkgcmVjb3JkczsKICBtYXBwaW5nICh1aW50ID0+IHN0cmluZykgaW5kZXg7CiAgCiAgLy8gVE9ETyBkZWZpbmUgYWNjZXNzb3JzIGluc3RlYWQKICB1aW50IHB1YmxpYyBtYXhSZWNvcmRzOwogIHVpbnQgcHVibGljIGN1cnJlbnRSZWNvcmRzOwoKICBldmVudCBkZWJ1ZyhzdHJpbmcgaW5kZXhlZCBsYWJlbCwgc3RyaW5nIG1zZyk7CiAgZXZlbnQgY3JlYXRlZChzdHJpbmcgaW5kZXhlZCBsYWJlbCwgc3RyaW5nIGluZGV4ZWQgbmFtZSwgYWRkcmVzcyBob2xkZXIsIHVpbnQgYmxvY2spOwogIGV2ZW50IGRlbGV0ZWQoc3RyaW5nIGluZGV4ZWQgbGFiZWwsIHN0cmluZyBpbmRleGVkIG5hbWUsIGFkZHJlc3MgaG9sZGVyLCB1aW50IGJsb2NrKTsKICAKICAvLyAidmFsdWUiIHNob3VsZCBiZSBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHZhbHVlcy4gU29saWRpdHkKICAvLyBwdWJsaWMgZnVuY3Rpb25zIGNhbm5vdCB1c2UgYXJyYXlzIG9mIHN0cmluZ3MgOi0oIFRPRE86IHNvbHZlIGl0CiAgLy8gd2hlbiB3ZSdsbCBoYXZlIHN0cmluZ3MuCiAgZnVuY3Rpb24gcmVnaXN0ZXIoc3RyaW5nIG5hbWUsIHN0cmluZyB2YWx1ZSkgewogICAgLyogVE9ETzogcGF5IHRoZSBwcmljZSAqLwogICAgdWludCBpOwogICAgaWYgKHJlY29yZHNbbmFtZV0uZXhpc3RzKSB7CiAgICAgIGlmIChtc2cuc2VuZGVyICE9IHJlY29yZHNbbmFtZV0uaG9sZGVyKSB7IC8vIFRPRE86IHVzZSBtb2RpZmllcnMgaW5zdGVhZAoJdGhyb3c7CiAgICAgIH0KICAgICAgZWxzZSB7CglpID0gcmVjb3Jkc1tuYW1lXS5pZHg7CiAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICByZWNvcmRzW25hbWVdLmlkeCA9IG1heFJlY29yZHM7CiAgICAgIGkgPSBtYXhSZWNvcmRzOwogICAgICBtYXhSZWNvcmRzKys7CiAgICB9CiAgICByZWNvcmRzW25hbWVdLnZhbHVlID0gdmFsdWU7CiAgICByZWNvcmRzW25hbWVdLmhvbGRlciA9IG1zZy5zZW5kZXI7CiAgICByZWNvcmRzW25hbWVdLmV4aXN0cyA9IHRydWU7CiAgICBjdXJyZW50UmVjb3JkcysrOwogICAgaW5kZXhbaV0gPSBuYW1lOwogICAgY3JlYXRlZCgiQ1JFQVRJT04iLCBuYW1lLCBtc2cuc2VuZGVyLCBibG9jay5udW1iZXIpOwkgIAogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoc3RyaW5nIG5hbWUsIGFkZHJlc3MgdG8pIHsKICAgIGlmIChyZWNvcmRzW25hbWVdLmV4aXN0cykgewogICAgICBpZiAobXNnLnNlbmRlciAhPSByZWNvcmRzW25hbWVdLmhvbGRlcikgewoJdGhyb3c7CiAgICAgIH0KICAgICAgcmVjb3Jkc1tuYW1lXS5ob2xkZXIgPSB0bzsKICAgIH0KICAgIGVsc2UgewogICAgICB0aHJvdzsKICAgIH0KICB9CiAgCiAgZnVuY3Rpb24gZ2V0KHN0cmluZyBuYW1lKSBjb25zdGFudCByZXR1cm5zKGJvb2wgZXhpc3RzLCBzdHJpbmcgdmFsdWUpIHsKICAgIGlmIChyZWNvcmRzW25hbWVdLmV4aXN0cykgewogICAgICBleGlzdHMgPSB0cnVlOwogICAgICB2YWx1ZSA9IHJlY29yZHNbbmFtZV0udmFsdWU7CiAgICB9IGVsc2UgewogICAgICBleGlzdHMgPSBmYWxzZTsKICAgIH0KICB9CgogIC8vIENvbnN0cnVjdG9yCiAgZnVuY3Rpb24gUmVnaXN0cnkoKSB7CiAgICBuaWMgPSBtc2cuc2VuZGVyOwogICAgY3VycmVudFJlY29yZHMgPSAwOwogICAgbWF4UmVjb3JkcyA9IDA7CiAgICByZWdpc3RlcigiTklDIiwgIkF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSBmb3IgdGhlIHJlZ2lzdHJ5Iik7IC8vIFRPRE8gbWF5IGZhaWwgaWYgbm90CiAgICAvLyBlbm91Z2ggZ2FzIGluIHRoZSBjcmVhdGluZyB0cmFuc2FjdGlvbj8KICB9CiAgCgogIGZ1bmN0aW9uIHdob2lzKHN0cmluZyBuYW1lKSBjb25zdGFudCByZXR1cm5zKGJvb2wgZXhpc3RzLCBzdHJpbmcgdmFsdWUsIGFkZHJlc3MgaG9sZGVyKSB7CiAgICBpZiAocmVjb3Jkc1tuYW1lXS5leGlzdHMpIHsKICAgICAgZXhpc3RzID0gdHJ1ZTsKICAgICAgdmFsdWUgPSByZWNvcmRzW25hbWVdLnZhbHVlOwogICAgICBob2xkZXIgPSByZWNvcmRzW25hbWVdLmhvbGRlcjsKICAgIH0gZWxzZSB7CiAgICAgIGV4aXN0cyA9IGZhbHNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlKHN0cmluZyBuYW1lKSB7CiAgICB1aW50IGk7CiAgICBpZiAocmVjb3Jkc1tuYW1lXS5leGlzdHMpIHsKICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gcmVjb3Jkc1tuYW1lXS5ob2xkZXIpIHsKCXRocm93OwogICAgICB9CiAgICAgIGVsc2UgewoJaSA9IHJlY29yZHNbbmFtZV0uaWR4OwogICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgdGhyb3c7IC8vIDQwNC4gVG9vIGJhZCB3ZSBjYW5ub3QgYWRkIGNvbnRlbnQgdG8gdGhyb3cuCiAgICB9CiAgICByZWNvcmRzW25hbWVdLmV4aXN0cyA9IGZhbHNlOwogICAgY3VycmVudFJlY29yZHMtLTsKICAgIGRlbGV0ZWQoIkRFTEVUSU9OIiwgbmFtZSwgbXNnLnNlbmRlciwgYmxvY2subnVtYmVyKTsJICAKICB9CgogIGZ1bmN0aW9uIGRvd25sb2FkKCkgcmV0dXJucyhzdHJpbmcgYWxsKSB7CiAgICBpZiAobXNnLnNlbmRlciAhPSBuaWMpIHsKCXRocm93OwogICAgICB9CiAgICBhbGwgPSAiTk9UIFlFVCBJTVBMRU1FTlRFRCI7CiAgICAvLyBMb29waW5nIG92ZXIgYWxsIHRoZSByZWNvcmRzIGlzIGVhc3k6CiAgICAvL2ZvciB1aW50IChpID0gMDsgaSA8IG1heFJlY29yZHM7IGkrKykgewogICAgLy8JaWYgKHJlY29yZHNbaW5kZXhbaV1dLmV4aXN0cykgewogICAgCiAgICAvLyBPciB3ZSBjb3VsZCB1c2UgYW4gaXRlcmFibGUgbWFwcGluZyBtYXkKICAgIC8vIGJlIHRoaXMgbGlicmFyeQogICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9kYXBwLWJpbi9ibG9iL21hc3Rlci9saWJyYXJ5L2l0ZXJhYmxlX21hcHBpbmcuc29sPgoKICAgIC8vIFRoZSBkaWZmaWN1bHQgcGFydCBpcyB0byBjb25zdHJ1Y3QgYW4gYW5zd2VyLCBzaW5jZSBTb2xpZGl0eQogICAgLy8gZG9lcyBub3QgcHJvdmlkZSBzdHJpbmcgY29uY2F0ZW5hdGlvbiwgb3IgdGhlIGFiaWxpdHkgdG8gcmV0dXJuCiAgICAvLyBhcnJheXMuCgoJLy8gVE9ETzogcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGFjY2VzcyBvbmUgaXRlbSwgdXNpbmcgaXRzIGluZGV4LAoJLy8gYW5kIHRvIGxldCB0aGUgY2FsbGVyIGxvb3BzIGZyb20gMCB0byBtYXhSZWNvcmRzCgkvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM3NjA2ODM5L2hvdy10by1yZXR1cm4tbWFwcGluZy1saXN0LWluLXNvbGlkaXR5LWV0aGVyZXVtLWNvbnRyYWN0LzM3NjQzOTcyIzM3NjQzOTcyCiAgfQogIAp9'.
	

]
