Class {
	#name : #SRT7c3090e68f9653f91eec674f738957ee6c9e128a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c3090e68f9653f91eec674f738957ee6c9e128a >> base64 [
	^ ''.
	

]
