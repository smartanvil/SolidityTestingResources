Class {
	#name : #SRTe68b7aa92f5a71184bfcb42f2a5ec5711e16afe7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe68b7aa92f5a71184bfcb42f2a5ec5711e16afe7 >> base64 [
	^ ''.
	

]
