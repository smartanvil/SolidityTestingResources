Class {
	#name : #SRT273f5db72b72059c043cad022c446232f3d33085,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT273f5db72b72059c043cad022c446232f3d33085 >> base64 [
	^ 'bGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBwdXJlIGludGVybmFsICByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgcHVyZSBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgcHVyZSBpbnRlcm5hbCAgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIHB1cmUgaW50ZXJuYWwgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qIFRoaXMgaXMgYSBzbGlnaHQgY2hhbmdlIHRvIHRoZSBFUkMyMCBiYXNlIHN0YW5kYXJkLgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBpcyByZXBsYWNlZCB3aXRoOgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgVGhpcyBpcyBtb3ZlZCB0byB0aGUgYmFzZSBjb250cmFjdCBzaW5jZSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9ucyBhcmUgbm90CiAgICBjdXJyZW50bHkgcmVjb2duaXNlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWF0Y2hpbmcgYWJzdHJhY3QKICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAgICovCiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBhZGRyZXNzIHB1YmxpYyBzYWxlOwogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzQWxsb3dlZDsKICAgIAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IERpc2J1cnNlbWVudCB7CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgcmVjZWl2ZXI7CiAgICB1aW50IHB1YmxpYyBkaXNidXJzZW1lbnRQZXJpb2Q7CiAgICB1aW50IHB1YmxpYyBzdGFydERhdGU7CiAgICB1aW50IHB1YmxpYyB3aXRoZHJhd25Ub2tlbnM7CiAgICBUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgLyoKICAgICAqICBNb2RpZmllcnMKICAgICAqLwogICAgbW9kaWZpZXIgaXNPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikKICAgICAgICAgICAgLy8gT25seSBvd25lciBpcyBhbGxvd2VkIHRvIHByb2NlZWQKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc1JlY2VpdmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IHJlY2VpdmVyKQogICAgICAgICAgICAvLyBPbmx5IHJlY2VpdmVyIGlzIGFsbG93ZWQgdG8gcHJvY2VlZAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzU2V0VXAoKSB7CiAgICAgICAgaWYgKGFkZHJlc3ModG9rZW4pID09IDApCiAgICAgICAgICAgIC8vIENvbnRyYWN0IGlzIG5vdCBzZXQgdXAKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKgogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IgZnVuY3Rpb24gc2V0cyBjb250cmFjdCBvd25lcgogICAgLy8vIEBwYXJhbSBfcmVjZWl2ZXIgUmVjZWl2ZXIgb2YgdmVzdGVkIHRva2VucwogICAgLy8vIEBwYXJhbSBfZGlzYnVyc2VtZW50UGVyaW9kIFZlc3RpbmcgcGVyaW9kIGluIHNlY29uZHMKICAgIC8vLyBAcGFyYW0gX3N0YXJ0RGF0ZSBTdGFydCBkYXRlIG9mIGRpc2J1cnNlbWVudCBwZXJpb2QgKGNsaWZmKQogICAgZnVuY3Rpb24gRGlzYnVyc2VtZW50KGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50IF9kaXNidXJzZW1lbnRQZXJpb2QsIHVpbnQgX3N0YXJ0RGF0ZSkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBpZiAoX3JlY2VpdmVyID09IDAgfHwgX2Rpc2J1cnNlbWVudFBlcmlvZCA9PSAwKQogICAgICAgICAgICAvLyBBcmd1bWVudHMgYXJlIG51bGwKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHJlY2VpdmVyID0gX3JlY2VpdmVyOwogICAgICAgIGRpc2J1cnNlbWVudFBlcmlvZCA9IF9kaXNidXJzZW1lbnRQZXJpb2Q7CiAgICAgICAgc3RhcnREYXRlID0gX3N0YXJ0RGF0ZTsKICAgICAgICBpZiAoc3RhcnREYXRlID09IDApCiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5vdzsKICAgIH0KCiAgICAvLy8gQGRldiBTZXR1cCBmdW5jdGlvbiBzZXRzIGV4dGVybmFsIGNvbnRyYWN0cycgYWRkcmVzc2VzCiAgICAvLy8gQHBhcmFtIF90b2tlbiBUb2tlbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXR1cChUb2tlbiBfdG9rZW4pCiAgICAgICAgcHVibGljCiAgICAgICAgaXNPd25lcgogICAgewogICAgICAgIGlmIChhZGRyZXNzKHRva2VuKSAhPSAwIHx8IGFkZHJlc3MoX3Rva2VuKSA9PSAwKQogICAgICAgICAgICAvLyBTZXR1cCB3YXMgZXhlY3V0ZWQgYWxyZWFkeSBvciBhZGRyZXNzIGlzIG51bGwKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgdG9rZW4gPSBfdG9rZW47CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBpc1JlY2VpdmVyCiAgICAgICAgaXNTZXRVcAogICAgewogICAgICAgIHVpbnQgbWF4VG9rZW5zID0gY2FsY01heFdpdGhkcmF3KCk7CiAgICAgICAgaWYgKF92YWx1ZSA+IG1heFRva2VucykKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgd2l0aGRyYXduVG9rZW5zID0gU2FmZU1hdGguYWRkKHdpdGhkcmF3blRva2VucywgX3ZhbHVlKTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdmVzdGVkIHRva2VucwogICAgLy8vIEByZXR1cm4gTnVtYmVyIG9mIHZlc3RlZCB0b2tlbnMgdG8gd2l0aGRyYXcKICAgIGZ1bmN0aW9uIGNhbGNNYXhXaXRoZHJhdygpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHVpbnQgbWF4VG9rZW5zID0gU2FmZU1hdGgubXVsKFNhZmVNYXRoLmFkZCh0b2tlbi5iYWxhbmNlT2YodGhpcyksIHdpdGhkcmF3blRva2VucyksIFNhZmVNYXRoLnN1Yihub3csc3RhcnREYXRlKSkgLyBkaXNidXJzZW1lbnRQZXJpb2Q7CiAgICAgICAgLy91aW50IG1heFRva2VucyA9ICh0b2tlbi5iYWxhbmNlT2YodGhpcykgKyB3aXRoZHJhd25Ub2tlbnMpICogKG5vdyAtIHN0YXJ0RGF0ZSkgLyBkaXNidXJzZW1lbnRQZXJpb2Q7CiAgICAgICAgaWYgKHdpdGhkcmF3blRva2VucyA+PSBtYXhUb2tlbnMgfHwgc3RhcnREYXRlID4gbm93KQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICBpZiAoU2FmZU1hdGguc3ViKG1heFRva2Vucywgd2l0aGRyYXduVG9rZW5zKSA+IHRva2VuLnRvdGFsU3VwcGx5KCkpCiAgICAgICAgICAgIHJldHVybiB0b2tlbi50b3RhbFN1cHBseSgpOwogICAgICAgIHJldHVybiBTYWZlTWF0aC5zdWIobWF4VG9rZW5zLCB3aXRoZHJhd25Ub2tlbnMpOwogICAgfQp9'.
	

]
