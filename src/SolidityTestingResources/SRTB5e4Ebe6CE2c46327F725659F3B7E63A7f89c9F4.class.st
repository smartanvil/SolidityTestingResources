Class {
	#name : #SRTB5e4Ebe6CE2c46327F725659F3B7E63A7f89c9F4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB5e4Ebe6CE2c46327F725659F3B7E63A7f89c9F4 >> base64 [
	^ ''.
	

]
