Class {
	#name : #SRTd6bd97a26232ba02172ff86b055d5d7be789335b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6bd97a26232ba02172ff86b055d5d7be789335b >> base64 [
	^ 'Y29udHJhY3QgVG9rZW5SZWNpcGllbnQgeyAKCWZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsgCn0gCgpjb250cmFjdCBJRVJDMjBUb2tlbiB7ICAgICAKCgkvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zICAgICAKCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7ICAgICAKCgkvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkICAgICAKCS8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlICAgICAKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7fSAgICAgCgoJLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYCAgICAgCgkvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50ICAgICAKCS8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgICAgIAoJLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90ICAgICAKCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fSAgICAgCgoJLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gICAgICAKCS8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlciAgICAgCgkvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50ICAgICAKCS8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgICAgIAoJLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90ICAgICAKCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30gICAgIAoKCS8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX2FkZHJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucyAgICAgCgkvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucyAgICAgCgkvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIgICAgIAoJLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90ICAgICAKCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30gICAgIAoKCS8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMgICAgIAoJLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMgICAgIAoJLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudCAgICAgCglmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7fSAgICAgICAKCglldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsgICAgIAoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7IAp9IAoKY29udHJhY3QgT3JtZUNhc2ggaXMgSUVSQzIwVG9rZW4geyAgICAgICAgIAogIAoJc3RyaW5nIHB1YmxpYyBuYW1lID0gIk9ybWVDYXNoIjsKCXN0cmluZyBwdWJsaWMgc3ltYm9sID0gIk9NQyI7Cgl1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCXVpbnQyNTYgcHVibGljIHRva2VuRnJvemVuVW50aWxCbG9jazsKCWFkZHJlc3MgcHVibGljIG93bmVyOwoJdWludCBwdWJsaWMgbWludGluZ0NhcCA9IDIwMDAwMDAwMDAgKiAxMCoqMTg7CiAgIAoJdWludDI1NiBzdXBwbHkgPSAwOwoJbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCW1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dhbmNlczsKCW1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcmVzdHJpY3RlZEFkZHJlc3NlczsKICAgCglldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCWV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CglldmVudCBUb2tlbkZyb3plbih1aW50MjU2IF9mcm96ZW5VbnRpbEJsb2NrKTsKCgltb2RpZmllciBvbmx5T3duZXIgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgkJXzsKCX0KCglmdW5jdGlvbiBPcm1lQ2FzaCgpIHB1YmxpYyB7CgkJcmVzdHJpY3RlZEFkZHJlc3Nlc1sweDBdID0gdHJ1ZTsKCQlyZXN0cmljdGVkQWRkcmVzc2VzW2FkZHJlc3ModGhpcyldID0gdHJ1ZTsKCQlvd25lciA9IG1zZy5zZW5kZXI7Cgl9ICAgICAgICAgCiAgCglmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7ICAgICAgICAgCgkJcmV0dXJuIHN1cHBseTsgICAgIAoJfSAgICAgICAgIAoKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgeyAgICAgICAgIAoJCXJldHVybiBiYWxhbmNlc1tfb3duZXJdOyAgICAgCgl9ICAgICAKIAoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7ICAgICAJCgkJcmVxdWlyZSAoYmxvY2subnVtYmVyID49IHRva2VuRnJvemVuVW50aWxCbG9jayk7CgkJcmVxdWlyZSAoIXJlc3RyaWN0ZWRBZGRyZXNzZXNbX3RvXSk7CgkJcmVxdWlyZSAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKCQlyZXF1aXJlIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSk7CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwoJCWJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwoJCVRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgCgkJcmV0dXJuIHRydWU7Cgl9CgoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgeyAgICAgCQoJCXJlcXVpcmUgKGJsb2NrLm51bWJlciA+PSB0b2tlbkZyb3plblVudGlsQmxvY2spOwoJCWFsbG93YW5jZXNbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwoJCUFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwoJCXJldHVybiB0cnVlOyAgICAgCgl9ICAgICAKCglmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgeyAgICAgICAgICAgIAoJCVRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSBUb2tlblJlY2lwaWVudChfc3BlbmRlcik7ICAgICAgCgkJYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKCQlzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOyAgICAKCQlyZXR1cm4gdHJ1ZTsgICAgIAoJfSAgICAgCgoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgeyAgICAgCQoJCXJlcXVpcmUgKGJsb2NrLm51bWJlciA+PSB0b2tlbkZyb3plblVudGlsQmxvY2spOwoJCXJlcXVpcmUgKCFyZXN0cmljdGVkQWRkcmVzc2VzW190b10pOwoJCXJlcXVpcmUgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOyAKCQlyZXF1aXJlIChiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VzW190b10pOyAgICAgCgkJcmVxdWlyZSAoX3ZhbHVlIDw9IGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgIAoJCWJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CgkJYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7ICAgIAoJCWFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgCgkJVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsgIAoJCXJldHVybiB0cnVlOwoJfSAgICAgICAgIAoKCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7ICAgICAgICAgCgkJcmV0dXJuIGFsbG93YW5jZXNbX293bmVyXVtfc3BlbmRlcl07ICAgICAKCX0gICAgICAgICAKICAgIAoJZnVuY3Rpb24gbWludFRva2VucyhhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgcHVibGljIHsKCQlyZXF1aXJlICghcmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKTsKCQlyZXF1aXJlIChfYW1vdW50ICE9IDApOwoJCXJlcXVpcmUgKGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSk7CgkJcmVxdWlyZSAobWludGluZ0NhcCA+PSBzdXBwbHkgKyBfYW1vdW50KTsKCQlzdXBwbHkgKz0gX2Ftb3VudDsKCQliYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CgkJTWludChfdG8sIF9hbW91bnQpOwoJCVRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsKCX0KCglmdW5jdGlvbiBidXJuVG9rZW5zKHVpbnQgX2Ftb3VudCkgcHVibGljIHsKCQlyZXF1aXJlKF9hbW91bnQgPD0gYmFsYW5jZU9mKG1zZy5zZW5kZXIpKTsKCQlzdXBwbHkgLT0gX2Ftb3VudDsKCQliYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwoJCVRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX2Ftb3VudCk7CgkJQnVybihtc2cuc2VuZGVyLCBfYW1vdW50KTsKCX0KCglmdW5jdGlvbiBmcmVlemVUcmFuc2ZlcnNVbnRpbCh1aW50MjU2IF9mcm96ZW5VbnRpbEJsb2NrKSBvbmx5T3duZXIgcHVibGljIHsgICAgIAkKCQl0b2tlbkZyb3plblVudGlsQmxvY2sgPSBfZnJvemVuVW50aWxCbG9jazsgICAgIAkKCQlUb2tlbkZyb3plbihfZnJvemVuVW50aWxCbG9jayk7ICAgICAKCX0gICAgIAoKCWZ1bmN0aW9uIGVkaXRSZXN0cmljdGVkQWRkcmVzcyhhZGRyZXNzIF9uZXdSZXN0cmljdGVkQWRkcmVzcykgb25seU93bmVyIHB1YmxpYyB7CgkJcmVzdHJpY3RlZEFkZHJlc3Nlc1tfbmV3UmVzdHJpY3RlZEFkZHJlc3NdID0gIXJlc3RyaWN0ZWRBZGRyZXNzZXNbX25ld1Jlc3RyaWN0ZWRBZGRyZXNzXTsKCX0KCglmdW5jdGlvbiBpc1Jlc3RyaWN0ZWRBZGRyZXNzKGFkZHJlc3MgX3F1ZXJyeUFkZHJlc3MpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sIGFuc3dlcil7CgkJcmV0dXJuIHJlc3RyaWN0ZWRBZGRyZXNzZXNbX3F1ZXJyeUFkZHJlc3NdOwoJfQoKCWZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewoJCW93bmVyID0gbmV3T3duZXI7Cgl9CgoJZnVuY3Rpb24ga2lsbENvbnRyYWN0KCkgb25seU93bmVyIHB1YmxpYyB7CgkJc2VsZmRlc3RydWN0KG1zZy5zZW5kZXIpOwoJfQp9'.
	

]
