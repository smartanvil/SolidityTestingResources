Class {
	#name : #SRTca83bd8c4c7b1c0409b25fbd7e70b1ef57629ff4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca83bd8c4c7b1c0409b25fbd7e70b1ef57629ff4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgT3ZlcmZsb3cgcHJvdGVjdGVkIG1hdGggZnVuY3Rpb25zCiovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIC8qKgogICAgICAgIGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gU2FmZU1hdGgoKSB7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MKCiAgICAgICAgQHBhcmFtIF94ICAgdmFsdWUgMQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDIKCiAgICAgICAgQHJldHVybiBzdW0KICAgICovCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCArIF95OwogICAgICAgIGFzc2VydCh6ID49IF94KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgX3ggbWludXMgX3ksIGFzc2VydHMgaWYgdGhlIHN1YnRyYWN0aW9uIHJlc3VsdHMgaW4gYSBuZWdhdGl2ZSBudW1iZXIKCiAgICAgICAgQHBhcmFtIF94ICAgbWludWVuZAogICAgICAgIEBwYXJhbSBfeSAgIHN1YnRyYWhlbmQKCiAgICAgICAgQHJldHVybiBkaWZmZXJlbmNlCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KF94ID49IF95KTsKICAgICAgICByZXR1cm4gX3ggLSBfeTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICBmYWN0b3IgMQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyCgogICAgICAgIEByZXR1cm4gcHJvZHVjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICogX3k7CiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KfQoKLyoKICAgIE93bmVkIGNvbnRyYWN0IGludGVyZmFjZQoqLwpjb250cmFjdCBJT3duZWQgewogICAgLy8gdGhpcyBmdW5jdGlvbiBpc24ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbAogICAgZnVuY3Rpb24gb3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgeyBvd25lcjsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWM7Cn0KCi8qCiAgICBQcm92aWRlcyBzdXBwb3J0IGFuZCB1dGlsaXRpZXMgZm9yIGNvbnRyYWN0IG93bmVyc2hpcAoqLwpjb250cmFjdCBPd25lZCBpcyBJT3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICBldmVudCBPd25lclVwZGF0ZShhZGRyZXNzIF9wcmV2T3duZXIsIGFkZHJlc3MgX25ld093bmVyKTsKCiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG93bmVyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWQgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKCiAgICAgICAgQHBhcmFtIF9uZXdPd25lciAgICBuZXcgY29udHJhY3Qgb3duZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgcmVxdWlyZShfbmV3T3duZXIgIT0gb3duZXIpOwogICAgICAgIG5ld093bmVyID0gX25ld093bmVyOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYW4gb3duZXJzaGlwIHRyYW5zZmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOwogICAgICAgIE93bmVyVXBkYXRlKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICBuZXdPd25lciA9IDB4MDsKICAgIH0KfQoKLyoKICAgIEVSQzIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZQoqLwpjb250cmFjdCBJRVJDMjBUb2tlbiB7CiAgICAvLyB0aGVzZSBmdW5jdGlvbnMgYXJlbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBuYW1lKSB7IG5hbWU7IH0KICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgc3ltYm9sKSB7IHN5bWJvbDsgfQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDggZGVjaW1hbHMpIHsgZGVjaW1hbHM7IH0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxTdXBwbHkpIHsgdG90YWxTdXBwbHk7IH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgeyBfb3duZXI7IGJhbGFuY2U7IH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7IF9vd25lcjsgX3NwZW5kZXI7IHJlbWFpbmluZzsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9CgovKgogICAgVG9rZW4gSG9sZGVyIGludGVyZmFjZQoqLwpjb250cmFjdCBJVG9rZW5Ib2xkZXIgaXMgSU93bmVkIHsKICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOwp9CgovKgogICAgV2UgY29uc2lkZXIgZXZlcnkgY29udHJhY3QgdG8gYmUgYSAndG9rZW4gaG9sZGVyJyBzaW5jZSBpdCdzIGN1cnJlbnRseSBub3QgcG9zc2libGUKICAgIGZvciBhIGNvbnRyYWN0IHRvIGRlbnkgcmVjZWl2aW5nIHRva2Vucy4KCiAgICBUaGUgVG9rZW5Ib2xkZXIncyBjb250cmFjdCBzb2xlIHB1cnBvc2UgaXMgdG8gcHJvdmlkZSBhIHNhZmV0eSBtZWNoYW5pc20gdGhhdCBhbGxvd3MKICAgIHRoZSBvd25lciB0byBzZW5kIHRva2VucyB0aGF0IHdlcmUgc2VudCB0byB0aGUgY29udHJhY3QgYnkgbWlzdGFrZSBiYWNrIHRvIHRoZWlyIHNlbmRlci4KKi8KY29udHJhY3QgVG9rZW5Ib2xkZXIgaXMgSVRva2VuSG9sZGVyLCBPd25lZCB7CiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5Ib2xkZXIoKSB7CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gMHgwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgaXMgZGlmZmVyZW50IHRoYW4gdGhpcyBjb250cmFjdCBhZGRyZXNzCiAgICBtb2RpZmllciBub3RUaGlzKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB3aXRoZHJhd3MgdG9rZW5zIGhlbGQgYnkgdGhlIGNvbnRyYWN0IGFuZCBzZW5kcyB0aGVtIHRvIGFuIGFjY291bnQKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyCgogICAgICAgIEBwYXJhbSBfdG9rZW4gICBFUkMyMCB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF90byAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudAogICAgICAgIEBwYXJhbSBfYW1vdW50ICBhbW91bnQgdG8gd2l0aGRyYXcKICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQogICAgICAgIG5vdFRoaXMoX3RvKQogICAgewogICAgICAgIGFzc2VydChfdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KSk7CiAgICB9Cn0KCi8qCiAgICBTbWFydCBUb2tlbiBpbnRlcmZhY2UKKi8KY29udHJhY3QgSVNtYXJ0VG9rZW4gaXMgSVRva2VuSG9sZGVyLCBJRVJDMjBUb2tlbiB7CiAgICBmdW5jdGlvbiBkaXNhYmxlVHJhbnNmZXJzKGJvb2wgX2Rpc2FibGUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGRlc3Ryb3koYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfYW1vdW50KSBwdWJsaWM7Cn0KCi8qCiAgICBUaGUgc21hcnQgdG9rZW4gY29udHJvbGxlciBpcyBhbiB1cGdyYWRhYmxlIHBhcnQgb2YgdGhlIHNtYXJ0IHRva2VuIHRoYXQgYWxsb3dzCiAgICBtb3JlIGZ1bmN0aW9uYWxpdHkgYXMgd2VsbCBhcyBmaXhlcyBmb3IgYnVncy9leHBsb2l0cy4KICAgIE9uY2UgaXQgYWNjZXB0cyBvd25lcnNoaXAgb2YgdGhlIHRva2VuLCBpdCBiZWNvbWVzIHRoZSB0b2tlbidzIHNvbGUgY29udHJvbGxlcgogICAgdGhhdCBjYW4gZXhlY3V0ZSBhbnkgb2YgaXRzIGZ1bmN0aW9ucy4KCiAgICBUbyB1cGdyYWRlIHRoZSBjb250cm9sbGVyLCBvd25lcnNoaXAgbXVzdCBiZSB0cmFuc2ZlcnJlZCB0byBhIG5ldyBjb250cm9sbGVyLCBhbG9uZyB3aXRoCiAgICBhbnkgcmVsZXZhbnQgZGF0YS4KCiAgICBUaGUgc21hcnQgdG9rZW4gbXVzdCBiZSBzZXQgb24gY29uc3RydWN0aW9uIGFuZCBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlcndhcmRzLgogICAgV3JhcHBlcnMgYXJlIHByb3ZpZGVkIChhcyBvcHBvc2VkIHRvIGEgc2luZ2xlICdleGVjdXRlJyBmdW5jdGlvbikgZm9yIGVhY2ggb2YgdGhlIHRva2VuJ3MgZnVuY3Rpb25zLCBmb3IgZWFzaWVyIGFjY2Vzcy4KCiAgICBOb3RlIHRoYXQgdGhlIGNvbnRyb2xsZXIgY2FuIHRyYW5zZmVyIHRva2VuIG93bmVyc2hpcCB0byBhIG5ldyBjb250cm9sbGVyIHRoYXQKICAgIGRvZXNuJ3QgYWxsb3cgZXhlY3V0aW5nIGFueSBmdW5jdGlvbiBvbiB0aGUgdG9rZW4sIGZvciBhIHRydXN0bGVzcyBzb2x1dGlvbi4KICAgIERvaW5nIHRoYXQgd2lsbCBhbHNvIHJlbW92ZSB0aGUgb3duZXIncyBhYmlsaXR5IHRvIHVwZ3JhZGUgdGhlIGNvbnRyb2xsZXIuCiovCmNvbnRyYWN0IFNtYXJ0VG9rZW5Db250cm9sbGVyIGlzIFRva2VuSG9sZGVyIHsKICAgIElTbWFydFRva2VuIHB1YmxpYyB0b2tlbjsgICAvLyBzbWFydCB0b2tlbgoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBTbWFydFRva2VuQ29udHJvbGxlcihJU21hcnRUb2tlbiBfdG9rZW4pCiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikKICAgIHsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgIH0KCiAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIGNvbnRyb2xsZXIgaXMgdGhlIHRva2VuJ3Mgb3duZXIKICAgIG1vZGlmaWVyIGFjdGl2ZSgpIHsKICAgICAgICBhc3NlcnQodG9rZW4ub3duZXIoKSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY29udHJvbGxlciBpcyBub3QgdGhlIHRva2VuJ3Mgb3duZXIKICAgIG1vZGlmaWVyIGluYWN0aXZlKCkgewogICAgICAgIGFzc2VydCh0b2tlbi5vd25lcigpICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSB0b2tlbiBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWQgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKCiAgICAgICAgQHBhcmFtIF9uZXdPd25lciAgICBuZXcgdG9rZW4gb3duZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChfbmV3T3duZXIpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYSB0b2tlbiBvd25lcnNoaXAgdHJhbnNmZXIKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0VG9rZW5Pd25lcnNoaXAoKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi5hY2NlcHRPd25lcnNoaXAoKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGRpc2FibGVzL2VuYWJsZXMgdG9rZW4gdHJhbnNmZXJzCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcgoKICAgICAgICBAcGFyYW0gX2Rpc2FibGUgICAgdHJ1ZSB0byBkaXNhYmxlIHRyYW5zZmVycywgZmFsc2UgdG8gZW5hYmxlIHRoZW0KICAgICovCiAgICBmdW5jdGlvbiBkaXNhYmxlVG9rZW5UcmFuc2ZlcnMoYm9vbCBfZGlzYWJsZSkgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgdG9rZW4uZGlzYWJsZVRyYW5zZmVycyhfZGlzYWJsZSk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIGV4ZWN1dGUgdGhlIHRva2VuJ3MgaXNzdWUgZnVuY3Rpb24KCiAgICAgICAgQHBhcmFtIF90byAgICAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudAogICAgICAgIEBwYXJhbSBfYW1vdW50ICAgICBhbW91bnQgdG8gaW5jcmVhc2UgdGhlIHN1cHBseSBieQogICAgKi8KICAgIGZ1bmN0aW9uIGlzc3VlVG9rZW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLmlzc3VlKF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIGV4ZWN1dGUgdGhlIHRva2VuJ3MgZGVzdHJveSBmdW5jdGlvbgoKICAgICAgICBAcGFyYW0gX2Zyb20gICAgICAgYWNjb3VudCB0byByZW1vdmUgdGhlIGFtb3VudCBmcm9tCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBkZWNyZWFzZSB0aGUgc3VwcGx5IGJ5CiAgICAqLwogICAgZnVuY3Rpb24gZGVzdHJveVRva2VucyhhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLmRlc3Ryb3koX2Zyb20sIF9hbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgd2l0aGRyYXdzIHRva2VucyBoZWxkIGJ5IHRoZSB0b2tlbiBhbmQgc2VuZHMgdGhlbSB0byBhbiBhY2NvdW50CiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lcgoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgRVJDMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfdG8gICAgICBhY2NvdW50IHRvIHJlY2VpdmUgdGhlIG5ldyBhbW91bnQKICAgICAgICBAcGFyYW0gX2Ftb3VudCAgYW1vdW50IHRvIHdpdGhkcmF3CiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdGcm9tVG9rZW4oSUVSQzIwVG9rZW4gX3Rva2VuLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi53aXRoZHJhd1Rva2VucyhfdG9rZW4sIF90bywgX2Ftb3VudCk7CiAgICB9Cn0KCi8qCiAgICBCYW5jb3IgRm9ybXVsYSBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUJhbmNvckZvcm11bGEgewogICAgZnVuY3Rpb24gY2FsY3VsYXRlUHVyY2hhc2VSZXR1cm4odWludDI1NiBfc3VwcGx5LCB1aW50MjU2IF9yZXNlcnZlQmFsYW5jZSwgdWludDE2IF9yZXNlcnZlUmF0aW8sIHVpbnQyNTYgX2RlcG9zaXRBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVNhbGVSZXR1cm4odWludDI1NiBfc3VwcGx5LCB1aW50MjU2IF9yZXNlcnZlQmFsYW5jZSwgdWludDE2IF9yZXNlcnZlUmF0aW8sIHVpbnQyNTYgX3NlbGxBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKLyoKICAgIEVJUDIyOCBUb2tlbiBDaGFuZ2VyIGludGVyZmFjZQoqLwpjb250cmFjdCBJVG9rZW5DaGFuZ2VyIHsKICAgIGZ1bmN0aW9uIGNoYW5nZWFibGVUb2tlbkNvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQxNiBjb3VudCk7CiAgICBmdW5jdGlvbiBjaGFuZ2VhYmxlVG9rZW4odWludDE2IF90b2tlbkluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyB0b2tlbkFkZHJlc3MpOwogICAgZnVuY3Rpb24gZ2V0UmV0dXJuKElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGFtb3VudCk7CiAgICBmdW5jdGlvbiBjaGFuZ2UoSUVSQzIwVG9rZW4gX2Zyb21Ub2tlbiwgSUVSQzIwVG9rZW4gX3RvVG9rZW4sIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfbWluUmV0dXJuKSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhbW91bnQpOwp9CgovKgogICAgT3BlbiBpc3N1ZXM6CiAgICAtIEFkZCBtaW5lciBmcm9udC1ydW5uaW5nIGF0dGFjayBwcm90ZWN0aW9uLiBUaGUgaXNzdWUgaXMgc29tZXdoYXQgbWl0aWdhdGVkIGJ5IHRoZSB1c2Ugb2YgX21pblJldHVybiB3aGVuIGNoYW5naW5nCiAgICAtIFBvc3NpYmx5IGFkZCBnZXR0ZXJzIGZvciByZXNlcnZlIGZpZWxkcyBzbyB0aGF0IHRoZSBjbGllbnQgd29uJ3QgbmVlZCB0byByZWx5IG9uIHRoZSBvcmRlciBpbiB0aGUgc3RydWN0CiovCgovKgogICAgQmFuY29yIENoYW5nZXIgdjAuMQoKICAgIFRoZSBCYW5jb3IgdmVyc2lvbiBvZiB0aGUgdG9rZW4gY2hhbmdlciwgYWxsb3dzIGNoYW5naW5nIGJldHdlZW4gYSBzbWFydCB0b2tlbiBhbmQgb3RoZXIgRVJDMjAgdG9rZW5zIGFuZCBiZXR3ZWVuIGRpZmZlcmVudCBFUkMyMCB0b2tlbnMgYW5kIHRoZW1zZWx2ZXMuCgogICAgRVJDMjAgcmVzZXJ2ZSB0b2tlbiBiYWxhbmNlIGNhbiBiZSB2aXJ0dWFsLCBtZWFuaW5nIHRoYXQgdGhlIGNhbGN1bGF0aW9ucyBhcmUgYmFzZWQgb24gdGhlIHZpcnR1YWwgYmFsYW5jZSBpbnN0ZWFkIG9mIHJlbHlpbmcgb24KICAgIHRoZSBhY3R1YWwgcmVzZXJ2ZSBiYWxhbmNlLiBUaGlzIGlzIGEgc2VjdXJpdHkgbWVjaGFuaXNtIHRoYXQgcHJldmVudHMgdGhlIG5lZWQgdG8ga2VlcCBhIHZlcnkgbGFyZ2UgKGFuZCB2YWx1YWJsZSkgYmFsYW5jZSBpbiBhIHNpbmdsZSBjb250cmFjdC4KCiAgICBUaGUgY2hhbmdlciBpcyB1cGdyYWRhYmxlIChqdXN0IGxpa2UgYW55IFNtYXJ0VG9rZW5Db250cm9sbGVyKS4KCiAgICBXQVJOSU5HOiBJdCBpcyBOT1QgUkVDT01NRU5ERUQgdG8gdXNlIHRoZSBjaGFuZ2VyIHdpdGggU21hcnQgVG9rZW5zIHRoYXQgaGF2ZSBsZXNzIHRoYW4gOCBkZWNpbWFsIGRpZ2l0cwogICAgICAgICAgICAgb3Igd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnMgYmVjYXVzZSBvZiBwcmVjaXNpb24gbG9zcwoqLwpjb250cmFjdCBCYW5jb3JDaGFuZ2VyIGlzIElUb2tlbkNoYW5nZXIsIFNtYXJ0VG9rZW5Db250cm9sbGVyLCBTYWZlTWF0aCB7CiAgICBzdHJ1Y3QgUmVzZXJ2ZSB7CiAgICAgICAgdWludDI1NiB2aXJ0dWFsQmFsYW5jZTsgICAgICAgICAvLyB2aXJ0dWFsIGJhbGFuY2UKICAgICAgICB1aW50OCByYXRpbzsgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0YW50IHJlc2VydmUgcmF0aW8gKENSUiksIDEtMTAwCiAgICAgICAgYm9vbCBpc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZDsgICAvLyB0cnVlIGlmIHZpcnR1YWwgYmFsYW5jZSBpcyBlbmFibGVkLCBmYWxzZSBpZiBub3QKICAgICAgICBib29sIGlzUHVyY2hhc2VFbmFibGVkOyAgICAgICAgIC8vIGlzIHB1cmNoYXNlIG9mIHRoZSBzbWFydCB0b2tlbiBlbmFibGVkIHdpdGggdGhlIHJlc2VydmUsIGNhbiBiZSBzZXQgYnkgdGhlIHRva2VuIG93bmVyCiAgICAgICAgYm9vbCBpc1NldDsgICAgICAgICAgICAgICAgICAgICAvLyB1c2VkIHRvIHRlbGwgaWYgdGhlIG1hcHBpbmcgZWxlbWVudCBpcyBkZWZpbmVkCiAgICB9CgogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzAuMSc7CiAgICBzdHJpbmcgcHVibGljIGNoYW5nZXJUeXBlID0gJ2JhbmNvcic7CgogICAgSUJhbmNvckZvcm11bGEgcHVibGljIGZvcm11bGE7ICAgICAgICAgICAgICAgICAgLy8gYmFuY29yIGNhbGN1bGF0aW9uIGZvcm11bGEgY29udHJhY3QKICAgIGFkZHJlc3NbXSBwdWJsaWMgcmVzZXJ2ZVRva2VuczsgICAgICAgICAgICAgICAgIC8vIEVSQzIwIHN0YW5kYXJkIHRva2VuIGFkZHJlc3NlcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBSZXNlcnZlKSBwdWJsaWMgcmVzZXJ2ZXM7ICAgLy8gcmVzZXJ2ZSB0b2tlbiBhZGRyZXNzZXMgLT4gcmVzZXJ2ZSBkYXRhCiAgICB1aW50OCBwcml2YXRlIHRvdGFsUmVzZXJ2ZVJhdGlvID0gMDsgICAgICAgICAgICAvLyB1c2VkIHRvIHByZXZlbnQgaW5jcmVhc2luZyB0aGUgdG90YWwgcmVzZXJ2ZSByYXRpbyBhYm92ZSAxMDAlIGVmZmljaWVudGx5CgogICAgLy8gdHJpZ2dlcmVkIHdoZW4gYSBjaGFuZ2UgYmV0d2VlbiB0d28gdG9rZW5zIG9jY3VycwogICAgZXZlbnQgQ2hhbmdlKGFkZHJlc3MgaW5kZXhlZCBfZnJvbVRva2VuLCBhZGRyZXNzIGluZGV4ZWQgX3RvVG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfdHJhZGVyLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX3JldHVybik7CgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgICAgc21hcnQgdG9rZW4gZ292ZXJuZWQgYnkgdGhlIGNoYW5nZXIKICAgICAgICBAcGFyYW0gX2Zvcm11bGEgICAgYWRkcmVzcyBvZiBhIGJhbmNvciBmb3JtdWxhIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gQmFuY29yQ2hhbmdlcihJU21hcnRUb2tlbiBfdG9rZW4sIElCYW5jb3JGb3JtdWxhIF9mb3JtdWxhLCBJRVJDMjBUb2tlbiBfcmVzZXJ2ZVRva2VuLCB1aW50OCBfcmVzZXJ2ZVJhdGlvKQogICAgICAgIFNtYXJ0VG9rZW5Db250cm9sbGVyKF90b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3MoX2Zvcm11bGEpCiAgICB7CiAgICAgICAgZm9ybXVsYSA9IF9mb3JtdWxhOwoKICAgICAgICBpZiAoYWRkcmVzcyhfcmVzZXJ2ZVRva2VuKSAhPSAweDApCiAgICAgICAgICAgIGFkZFJlc2VydmUoX3Jlc2VydmVUb2tlbiwgX3Jlc2VydmVSYXRpbywgZmFsc2UpOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgYW4gYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICBtb2RpZmllciB2YWxpZEFtb3VudCh1aW50MjU2IF9hbW91bnQpIHsKICAgICAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIHJlc2VydmUgdG9rZW4gYWRkcmVzcyAtIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgYmVsb25ncyB0byBvbmUgb2YgdGhlIHJlc2VydmUgdG9rZW5zCiAgICBtb2RpZmllciB2YWxpZFJlc2VydmUoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUocmVzZXJ2ZXNbX2FkZHJlc3NdLmlzU2V0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIHRva2VuIGFkZHJlc3MgLSB2ZXJpZmllcyB0aGF0IHRoZSBhZGRyZXNzIGJlbG9uZ3MgdG8gb25lIG9mIHRoZSBjaGFuZ2VhYmxlIHRva2VucwogICAgbW9kaWZpZXIgdmFsaWRUb2tlbihhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyA9PSBhZGRyZXNzKHRva2VuKSB8fCByZXNlcnZlc1tfYWRkcmVzc10uaXNTZXQpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIHJlc2VydmUgcmF0aW8gcmFuZ2UKICAgIG1vZGlmaWVyIHZhbGlkUmVzZXJ2ZVJhdGlvKHVpbnQ4IF9yYXRpbykgewogICAgICAgIHJlcXVpcmUoX3JhdGlvID4gMCAmJiBfcmF0aW8gPD0gMTAwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHJlc2VydmUgdG9rZW5zIGRlZmluZWQKCiAgICAgICAgQHJldHVybiBudW1iZXIgb2YgcmVzZXJ2ZSB0b2tlbnMKICAgICovCiAgICBmdW5jdGlvbiByZXNlcnZlVG9rZW5Db3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MTYgY291bnQpIHsKICAgICAgICByZXR1cm4gdWludDE2KHJlc2VydmVUb2tlbnMubGVuZ3RoKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIG51bWJlciBvZiBjaGFuZ2VhYmxlIHRva2VucyBzdXBwb3J0ZWQgYnkgdGhlIGNvbnRyYWN0CiAgICAgICAgbm90ZSB0aGF0IHRoZSBudW1iZXIgb2YgY2hhbmdlYWJsZSB0b2tlbnMgaXMgdGhlIG51bWJlciBvZiByZXNlcnZlIHRva2VuLCBwbHVzIDEgKHRoYXQgcmVwcmVzZW50cyB0aGUgc21hcnQgdG9rZW4pCgogICAgICAgIEByZXR1cm4gbnVtYmVyIG9mIGNoYW5nZWFibGUgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlYWJsZVRva2VuQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDE2IGNvdW50KSB7CiAgICAgICAgcmV0dXJuIHJlc2VydmVUb2tlbkNvdW50KCkgKyAxOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZ2l2ZW4gYSBjaGFuZ2VhYmxlIHRva2VuIGluZGV4LCByZXR1cm5zIHRoZSBjaGFuZ2VhYmxlIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKCiAgICAgICAgQHBhcmFtIF90b2tlbkluZGV4ICBjaGFuZ2VhYmxlIHRva2VuIGluZGV4CgogICAgICAgIEByZXR1cm4gbnVtYmVyIG9mIGNoYW5nZWFibGUgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlYWJsZVRva2VuKHVpbnQxNiBfdG9rZW5JbmRleCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgdG9rZW5BZGRyZXNzKSB7CiAgICAgICAgaWYgKF90b2tlbkluZGV4ID09IDApCiAgICAgICAgICAgIHJldHVybiB0b2tlbjsKICAgICAgICByZXR1cm4gcmVzZXJ2ZVRva2Vuc1tfdG9rZW5JbmRleCAtIDFdOwogICAgfQoKICAgIC8qCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIHVwZGF0ZSB0aGUgZm9ybXVsYSBjb250cmFjdCBhZGRyZXNzCgogICAgICAgIEBwYXJhbSBfZm9ybXVsYSAgICBhZGRyZXNzIG9mIGEgYmFuY29yIGZvcm11bGEgY29udHJhY3QKICAgICovCiAgICBmdW5jdGlvbiBzZXRGb3JtdWxhKElCYW5jb3JGb3JtdWxhIF9mb3JtdWxhKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkQWRkcmVzcyhfZm9ybXVsYSkKICAgICAgICBub3RUaGlzKF9mb3JtdWxhKQogICAgewogICAgICAgIHJlcXVpcmUoX2Zvcm11bGEgIT0gZm9ybXVsYSk7IC8vIHZhbGlkYXRlIGlucHV0CiAgICAgICAgZm9ybXVsYSA9IF9mb3JtdWxhOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZGVmaW5lcyBhIG5ldyByZXNlcnZlIGZvciB0aGUgdG9rZW4KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIHRva2VuIG93bmVyIHdoaWxlIHRoZSBjaGFuZ2VyIGlzIGluYWN0aXZlCgogICAgICAgIEBwYXJhbSBfdG9rZW4gICAgICAgICAgICAgICAgICBhZGRyZXNzIG9mIHRoZSByZXNlcnZlIHRva2VuCiAgICAgICAgQHBhcmFtIF9yYXRpbyAgICAgICAgICAgICAgICAgIGNvbnN0YW50IHJlc2VydmUgcmF0aW8sIDEtMTAwCiAgICAgICAgQHBhcmFtIF9lbmFibGVWaXJ0dWFsQmFsYW5jZSAgIHRydWUgdG8gZW5hYmxlIHZpcnR1YWwgYmFsYW5jZSBmb3IgdGhlIHJlc2VydmUsIGZhbHNlIHRvIGRpc2FibGUgaXQKICAgICovCiAgICBmdW5jdGlvbiBhZGRSZXNlcnZlKElFUkMyMFRva2VuIF90b2tlbiwgdWludDggX3JhdGlvLCBib29sIF9lbmFibGVWaXJ0dWFsQmFsYW5jZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICBpbmFjdGl2ZQogICAgICAgIHZhbGlkQWRkcmVzcyhfdG9rZW4pCiAgICAgICAgbm90VGhpcyhfdG9rZW4pCiAgICAgICAgdmFsaWRSZXNlcnZlUmF0aW8oX3JhdGlvKQogICAgewogICAgICAgIHJlcXVpcmUoX3Rva2VuICE9IGFkZHJlc3ModG9rZW4pICYmICFyZXNlcnZlc1tfdG9rZW5dLmlzU2V0ICYmIHRvdGFsUmVzZXJ2ZVJhdGlvICsgX3JhdGlvIDw9IDEwMCk7IC8vIHZhbGlkYXRlIGlucHV0CgogICAgICAgIHJlc2VydmVzW190b2tlbl0udmlydHVhbEJhbGFuY2UgPSAwOwogICAgICAgIHJlc2VydmVzW190b2tlbl0ucmF0aW8gPSBfcmF0aW87CiAgICAgICAgcmVzZXJ2ZXNbX3Rva2VuXS5pc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZCA9IF9lbmFibGVWaXJ0dWFsQmFsYW5jZTsKICAgICAgICByZXNlcnZlc1tfdG9rZW5dLmlzUHVyY2hhc2VFbmFibGVkID0gdHJ1ZTsKICAgICAgICByZXNlcnZlc1tfdG9rZW5dLmlzU2V0ID0gdHJ1ZTsKICAgICAgICByZXNlcnZlVG9rZW5zLnB1c2goX3Rva2VuKTsKICAgICAgICB0b3RhbFJlc2VydmVSYXRpbyArPSBfcmF0aW87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB1cGRhdGVzIG9uZSBvZiB0aGUgdG9rZW4gcmVzZXJ2ZXMKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIHRva2VuIG93bmVyCgogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVRva2VuICAgICAgICAgICBhZGRyZXNzIG9mIHRoZSByZXNlcnZlIHRva2VuCiAgICAgICAgQHBhcmFtIF9yYXRpbyAgICAgICAgICAgICAgICAgIGNvbnN0YW50IHJlc2VydmUgcmF0aW8sIDEtMTAwCiAgICAgICAgQHBhcmFtIF9lbmFibGVWaXJ0dWFsQmFsYW5jZSAgIHRydWUgdG8gZW5hYmxlIHZpcnR1YWwgYmFsYW5jZSBmb3IgdGhlIHJlc2VydmUsIGZhbHNlIHRvIGRpc2FibGUgaXQKICAgICAgICBAcGFyYW0gX3ZpcnR1YWxCYWxhbmNlICAgICAgICAgbmV3IHJlc2VydmUncyB2aXJ0dWFsIGJhbGFuY2UKICAgICovCiAgICBmdW5jdGlvbiB1cGRhdGVSZXNlcnZlKElFUkMyMFRva2VuIF9yZXNlcnZlVG9rZW4sIHVpbnQ4IF9yYXRpbywgYm9vbCBfZW5hYmxlVmlydHVhbEJhbGFuY2UsIHVpbnQyNTYgX3ZpcnR1YWxCYWxhbmNlKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkUmVzZXJ2ZShfcmVzZXJ2ZVRva2VuKQogICAgICAgIHZhbGlkUmVzZXJ2ZVJhdGlvKF9yYXRpbykKICAgIHsKICAgICAgICBSZXNlcnZlIHJlc2VydmUgPSByZXNlcnZlc1tfcmVzZXJ2ZVRva2VuXTsKICAgICAgICByZXF1aXJlKHRvdGFsUmVzZXJ2ZVJhdGlvIC0gcmVzZXJ2ZS5yYXRpbyArIF9yYXRpbyA8PSAxMDApOyAvLyB2YWxpZGF0ZSBpbnB1dAoKICAgICAgICB0b3RhbFJlc2VydmVSYXRpbyA9IHRvdGFsUmVzZXJ2ZVJhdGlvIC0gcmVzZXJ2ZS5yYXRpbyArIF9yYXRpbzsKICAgICAgICByZXNlcnZlLnJhdGlvID0gX3JhdGlvOwogICAgICAgIHJlc2VydmUuaXNWaXJ0dWFsQmFsYW5jZUVuYWJsZWQgPSBfZW5hYmxlVmlydHVhbEJhbGFuY2U7CiAgICAgICAgcmVzZXJ2ZS52aXJ0dWFsQmFsYW5jZSA9IF92aXJ0dWFsQmFsYW5jZTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGRpc2FibGVzIHB1cmNoYXNpbmcgd2l0aCB0aGUgZ2l2ZW4gcmVzZXJ2ZSB0b2tlbiBpbiBjYXNlIHRoZSByZXNlcnZlIHRva2VuIGdvdCBjb21wcm9taXNlZAogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgdG9rZW4gb3duZXIKICAgICAgICBub3RlIHRoYXQgc2VsbGluZyBpcyBzdGlsbCBlbmFibGVkIHJlZ2FyZGxlc3Mgb2YgdGhpcyBmbGFnIGFuZCBpdCBjYW5ub3QgYmUgZGlzYWJsZWQgYnkgdGhlIHRva2VuIG93bmVyCgogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVRva2VuICAgIHJlc2VydmUgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfZGlzYWJsZSAgICAgICAgIHRydWUgdG8gZGlzYWJsZSB0aGUgdG9rZW4sIGZhbHNlIHRvIHJlLWVuYWJsZSBpdAogICAgKi8KICAgIGZ1bmN0aW9uIGRpc2FibGVSZXNlcnZlUHVyY2hhc2VzKElFUkMyMFRva2VuIF9yZXNlcnZlVG9rZW4sIGJvb2wgX2Rpc2FibGUpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRSZXNlcnZlKF9yZXNlcnZlVG9rZW4pCiAgICB7CiAgICAgICAgcmVzZXJ2ZXNbX3Jlc2VydmVUb2tlbl0uaXNQdXJjaGFzZUVuYWJsZWQgPSAhX2Rpc2FibGU7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSByZXNlcnZlJ3MgdmlydHVhbCBiYWxhbmNlIGlmIG9uZSBpcyBkZWZpbmVkLCBvdGhlcndpc2UgcmV0dXJucyB0aGUgYWN0dWFsIGJhbGFuY2UKCiAgICAgICAgQHBhcmFtIF9yZXNlcnZlVG9rZW4gICAgcmVzZXJ2ZSB0b2tlbiBjb250cmFjdCBhZGRyZXNzCgogICAgICAgIEByZXR1cm4gcmVzZXJ2ZSBiYWxhbmNlCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0UmVzZXJ2ZUJhbGFuY2UoSUVSQzIwVG9rZW4gX3Jlc2VydmVUb2tlbikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHZhbGlkUmVzZXJ2ZShfcmVzZXJ2ZVRva2VuKQogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkKICAgIHsKICAgICAgICBSZXNlcnZlIHJlc2VydmUgPSByZXNlcnZlc1tfcmVzZXJ2ZVRva2VuXTsKICAgICAgICByZXR1cm4gcmVzZXJ2ZS5pc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZCA/IHJlc2VydmUudmlydHVhbEJhbGFuY2UgOiBfcmVzZXJ2ZVRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGV4cGVjdGVkIHJldHVybiBmb3IgY2hhbmdpbmcgYSBzcGVjaWZpYyBhbW91bnQgb2YgX2Zyb21Ub2tlbiB0byBfdG9Ub2tlbgoKICAgICAgICBAcGFyYW0gX2Zyb21Ub2tlbiAgRVJDMjAgdG9rZW4gdG8gY2hhbmdlIGZyb20KICAgICAgICBAcGFyYW0gX3RvVG9rZW4gICAgRVJDMjAgdG9rZW4gdG8gY2hhbmdlIHRvCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBjaGFuZ2UsIGluIGZyb21Ub2tlbgoKICAgICAgICBAcmV0dXJuIGV4cGVjdGVkIGNoYW5nZSByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gZ2V0UmV0dXJuKElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICB2YWxpZFRva2VuKF9mcm9tVG9rZW4pCiAgICAgICAgdmFsaWRUb2tlbihfdG9Ub2tlbikKICAgICAgICByZXR1cm5zICh1aW50MjU2IGFtb3VudCkKICAgIHsKICAgICAgICByZXF1aXJlKF9mcm9tVG9rZW4gIT0gX3RvVG9rZW4pOyAvLyB2YWxpZGF0ZSBpbnB1dAoKICAgICAgICAvLyBjaGFuZ2UgYmV0d2VlbiB0aGUgdG9rZW4gYW5kIG9uZSBvZiBpdHMgcmVzZXJ2ZXMKICAgICAgICBpZiAoX3RvVG9rZW4gPT0gdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBnZXRQdXJjaGFzZVJldHVybihfZnJvbVRva2VuLCBfYW1vdW50KTsKICAgICAgICBlbHNlIGlmIChfZnJvbVRva2VuID09IHRva2VuKQogICAgICAgICAgICByZXR1cm4gZ2V0U2FsZVJldHVybihfdG9Ub2tlbiwgX2Ftb3VudCk7CgogICAgICAgIC8vIGNoYW5nZSBiZXR3ZWVuIDIgcmVzZXJ2ZXMKICAgICAgICB1aW50MjU2IHB1cmNoYXNlUmV0dXJuQW1vdW50ID0gZ2V0UHVyY2hhc2VSZXR1cm4oX2Zyb21Ub2tlbiwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIGdldFNhbGVSZXR1cm4oX3RvVG9rZW4sIHB1cmNoYXNlUmV0dXJuQW1vdW50LCBzYWZlQWRkKHRva2VuLnRvdGFsU3VwcGx5KCksIHB1cmNoYXNlUmV0dXJuQW1vdW50KSk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBleHBlY3RlZCByZXR1cm4gZm9yIGJ1eWluZyB0aGUgdG9rZW4gZm9yIGEgcmVzZXJ2ZSB0b2tlbgoKICAgICAgICBAcGFyYW0gX3Jlc2VydmVUb2tlbiAgIHJlc2VydmUgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfZGVwb3NpdEFtb3VudCAgYW1vdW50IHRvIGRlcG9zaXQgKGluIHRoZSByZXNlcnZlIHRva2VuKQoKICAgICAgICBAcmV0dXJuIGV4cGVjdGVkIHB1cmNoYXNlIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBnZXRQdXJjaGFzZVJldHVybihJRVJDMjBUb2tlbiBfcmVzZXJ2ZVRva2VuLCB1aW50MjU2IF9kZXBvc2l0QW1vdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgYWN0aXZlCiAgICAgICAgdmFsaWRSZXNlcnZlKF9yZXNlcnZlVG9rZW4pCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgUmVzZXJ2ZSByZXNlcnZlID0gcmVzZXJ2ZXNbX3Jlc2VydmVUb2tlbl07CiAgICAgICAgcmVxdWlyZShyZXNlcnZlLmlzUHVyY2hhc2VFbmFibGVkKTsgLy8gdmFsaWRhdGUgaW5wdXQKCiAgICAgICAgdWludDI1NiB0b2tlblN1cHBseSA9IHRva2VuLnRvdGFsU3VwcGx5KCk7CiAgICAgICAgdWludDI1NiByZXNlcnZlQmFsYW5jZSA9IGdldFJlc2VydmVCYWxhbmNlKF9yZXNlcnZlVG9rZW4pOwogICAgICAgIHJldHVybiBmb3JtdWxhLmNhbGN1bGF0ZVB1cmNoYXNlUmV0dXJuKHRva2VuU3VwcGx5LCByZXNlcnZlQmFsYW5jZSwgcmVzZXJ2ZS5yYXRpbywgX2RlcG9zaXRBbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZXhwZWN0ZWQgcmV0dXJuIGZvciBzZWxsaW5nIHRoZSB0b2tlbiBmb3Igb25lIG9mIGl0cyByZXNlcnZlIHRva2VucwoKICAgICAgICBAcGFyYW0gX3Jlc2VydmVUb2tlbiAgIHJlc2VydmUgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfc2VsbEFtb3VudCAgICAgYW1vdW50IHRvIHNlbGwgKGluIHRoZSBzbWFydCB0b2tlbikKCiAgICAgICAgQHJldHVybiBleHBlY3RlZCBzYWxlIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBnZXRTYWxlUmV0dXJuKElFUkMyMFRva2VuIF9yZXNlcnZlVG9rZW4sIHVpbnQyNTYgX3NlbGxBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGFtb3VudCkgewogICAgICAgIHJldHVybiBnZXRTYWxlUmV0dXJuKF9yZXNlcnZlVG9rZW4sIF9zZWxsQW1vdW50LCB0b2tlbi50b3RhbFN1cHBseSgpKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGNoYW5nZXMgYSBzcGVjaWZpYyBhbW91bnQgb2YgX2Zyb21Ub2tlbiB0byBfdG9Ub2tlbgoKICAgICAgICBAcGFyYW0gX2Zyb21Ub2tlbiAgRVJDMjAgdG9rZW4gdG8gY2hhbmdlIGZyb20KICAgICAgICBAcGFyYW0gX3RvVG9rZW4gICAgRVJDMjAgdG9rZW4gdG8gY2hhbmdlIHRvCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBjaGFuZ2UsIGluIGZyb21Ub2tlbgogICAgICAgIEBwYXJhbSBfbWluUmV0dXJuICBpZiB0aGUgY2hhbmdlIHJlc3VsdHMgaW4gYW4gYW1vdW50IHNtYWxsZXIgdGhhbiB0aGUgbWluaW11bSByZXR1cm4gLSBpdCBpcyBjYW5jZWxsZWQsIG11c3QgYmUgbm9uemVybwoKICAgICAgICBAcmV0dXJuIGNoYW5nZSByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlKElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZFRva2VuKF9mcm9tVG9rZW4pCiAgICAgICAgdmFsaWRUb2tlbihfdG9Ub2tlbikKICAgICAgICByZXR1cm5zICh1aW50MjU2IGFtb3VudCkKICAgIHsKICAgICAgICByZXF1aXJlKF9mcm9tVG9rZW4gIT0gX3RvVG9rZW4pOyAvLyB2YWxpZGF0ZSBpbnB1dAoKICAgICAgICAvLyBjaGFuZ2UgYmV0d2VlbiB0aGUgdG9rZW4gYW5kIG9uZSBvZiBpdHMgcmVzZXJ2ZXMKICAgICAgICBpZiAoX3RvVG9rZW4gPT0gdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBidXkoX2Zyb21Ub2tlbiwgX2Ftb3VudCwgX21pblJldHVybik7CiAgICAgICAgZWxzZSBpZiAoX2Zyb21Ub2tlbiA9PSB0b2tlbikKICAgICAgICAgICAgcmV0dXJuIHNlbGwoX3RvVG9rZW4sIF9hbW91bnQsIF9taW5SZXR1cm4pOwoKICAgICAgICAvLyBjaGFuZ2UgYmV0d2VlbiAyIHJlc2VydmVzCiAgICAgICAgdWludDI1NiBwdXJjaGFzZUFtb3VudCA9IGJ1eShfZnJvbVRva2VuLCBfYW1vdW50LCAxKTsKICAgICAgICByZXR1cm4gc2VsbChfdG9Ub2tlbiwgcHVyY2hhc2VBbW91bnQsIF9taW5SZXR1cm4pOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgYnV5cyB0aGUgdG9rZW4gYnkgZGVwb3NpdGluZyBvbmUgb2YgaXRzIHJlc2VydmUgdG9rZW5zCgogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVRva2VuICAgcmVzZXJ2ZSB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF9kZXBvc2l0QW1vdW50ICBhbW91bnQgdG8gZGVwb3NpdCAoaW4gdGhlIHJlc2VydmUgdG9rZW4pCiAgICAgICAgQHBhcmFtIF9taW5SZXR1cm4gICAgICBpZiB0aGUgY2hhbmdlIHJlc3VsdHMgaW4gYW4gYW1vdW50IHNtYWxsZXIgdGhhbiB0aGUgbWluaW11bSByZXR1cm4gLSBpdCBpcyBjYW5jZWxsZWQsIG11c3QgYmUgbm9uemVybwoKICAgICAgICBAcmV0dXJuIGJ1eSByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gYnV5KElFUkMyMFRva2VuIF9yZXNlcnZlVG9rZW4sIHVpbnQyNTYgX2RlcG9zaXRBbW91bnQsIHVpbnQyNTYgX21pblJldHVybikKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZEFtb3VudChfbWluUmV0dXJuKQogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYW1vdW50KSB7CiAgICAgICAgYW1vdW50ID0gZ2V0UHVyY2hhc2VSZXR1cm4oX3Jlc2VydmVUb2tlbiwgX2RlcG9zaXRBbW91bnQpOwogICAgICAgIGFzc2VydChhbW91bnQgIT0gMCAmJiBhbW91bnQgPj0gX21pblJldHVybik7IC8vIGVuc3VyZSB0aGUgdHJhZGUgZ2l2ZXMgc29tZXRoaW5nIGluIHJldHVybiBhbmQgbWVldHMgdGhlIG1pbmltdW0gcmVxdWVzdGVkIGFtb3VudAoKICAgICAgICAvLyB1cGRhdGUgdmlydHVhbCBiYWxhbmNlIGlmIHJlbGV2YW50CiAgICAgICAgUmVzZXJ2ZSByZXNlcnZlID0gcmVzZXJ2ZXNbX3Jlc2VydmVUb2tlbl07CiAgICAgICAgaWYgKHJlc2VydmUuaXNWaXJ0dWFsQmFsYW5jZUVuYWJsZWQpCiAgICAgICAgICAgIHJlc2VydmUudmlydHVhbEJhbGFuY2UgPSBzYWZlQWRkKHJlc2VydmUudmlydHVhbEJhbGFuY2UsIF9kZXBvc2l0QW1vdW50KTsKCiAgICAgICAgYXNzZXJ0KF9yZXNlcnZlVG9rZW4udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIHRoaXMsIF9kZXBvc2l0QW1vdW50KSk7IC8vIHRyYW5zZmVyIF9kZXBvc2l0QW1vdW50IGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbiB0aGUgcmVzZXJ2ZSB0b2tlbgogICAgICAgIHRva2VuLmlzc3VlKG1zZy5zZW5kZXIsIGFtb3VudCk7IC8vIGlzc3VlIG5ldyBmdW5kcyB0byB0aGUgY2FsbGVyIGluIHRoZSBzbWFydCB0b2tlbgoKICAgICAgICBDaGFuZ2UoX3Jlc2VydmVUb2tlbiwgdG9rZW4sIG1zZy5zZW5kZXIsIF9kZXBvc2l0QW1vdW50LCBhbW91bnQpOwogICAgICAgIHJldHVybiBhbW91bnQ7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBzZWxscyB0aGUgdG9rZW4gYnkgd2l0aGRyYXdpbmcgZnJvbSBvbmUgb2YgaXRzIHJlc2VydmUgdG9rZW5zCgogICAgICAgIEBwYXJhbSBfcmVzZXJ2ZVRva2VuICAgcmVzZXJ2ZSB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF9zZWxsQW1vdW50ICAgICBhbW91bnQgdG8gc2VsbCAoaW4gdGhlIHNtYXJ0IHRva2VuKQogICAgICAgIEBwYXJhbSBfbWluUmV0dXJuICAgICAgaWYgdGhlIGNoYW5nZSByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoZSBtaW5pbXVtIHJldHVybiAtIGl0IGlzIGNhbmNlbGxlZCwgbXVzdCBiZSBub256ZXJvCgogICAgICAgIEByZXR1cm4gc2VsbCByZXR1cm4gYW1vdW50CiAgICAqLwogICAgZnVuY3Rpb24gc2VsbChJRVJDMjBUb2tlbiBfcmVzZXJ2ZVRva2VuLCB1aW50MjU2IF9zZWxsQW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4pCiAgICAgICAgcHVibGljCiAgICAgICAgdmFsaWRBbW91bnQoX21pblJldHVybikKICAgICAgICByZXR1cm5zICh1aW50MjU2IGFtb3VudCkgewogICAgICAgIHJlcXVpcmUoX3NlbGxBbW91bnQgPD0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpKTsgLy8gdmFsaWRhdGUgaW5wdXQKCiAgICAgICAgYW1vdW50ID0gZ2V0U2FsZVJldHVybihfcmVzZXJ2ZVRva2VuLCBfc2VsbEFtb3VudCk7CiAgICAgICAgYXNzZXJ0KGFtb3VudCAhPSAwICYmIGFtb3VudCA+PSBfbWluUmV0dXJuKTsgLy8gZW5zdXJlIHRoZSB0cmFkZSBnaXZlcyBzb21ldGhpbmcgaW4gcmV0dXJuIGFuZCBtZWV0cyB0aGUgbWluaW11bSByZXF1ZXN0ZWQgYW1vdW50CgogICAgICAgIHVpbnQyNTYgcmVzZXJ2ZUJhbGFuY2UgPSBnZXRSZXNlcnZlQmFsYW5jZShfcmVzZXJ2ZVRva2VuKTsKICAgICAgICBhc3NlcnQoYW1vdW50IDw9IHJlc2VydmVCYWxhbmNlKTsgLy8gZW5zdXJlIHRoYXQgdGhlIHRyYWRlIHdvbid0IHJlc3VsdCBpbiBuZWdhdGl2ZSByZXNlcnZlCgogICAgICAgIHVpbnQyNTYgdG9rZW5TdXBwbHkgPSB0b2tlbi50b3RhbFN1cHBseSgpOwogICAgICAgIGFzc2VydChhbW91bnQgPCByZXNlcnZlQmFsYW5jZSB8fCBfc2VsbEFtb3VudCA9PSB0b2tlblN1cHBseSk7IC8vIGVuc3VyZSB0aGF0IHRoZSB0cmFkZSB3aWxsIG9ubHkgZGVwbGV0ZSB0aGUgcmVzZXJ2ZSBpZiB0aGUgdG90YWwgc3VwcGx5IGlzIGRlcGxldGVkIGFzIHdlbGwKCiAgICAgICAgLy8gdXBkYXRlIHZpcnR1YWwgYmFsYW5jZSBpZiByZWxldmFudAogICAgICAgIFJlc2VydmUgcmVzZXJ2ZSA9IHJlc2VydmVzW19yZXNlcnZlVG9rZW5dOwogICAgICAgIGlmIChyZXNlcnZlLmlzVmlydHVhbEJhbGFuY2VFbmFibGVkKQogICAgICAgICAgICByZXNlcnZlLnZpcnR1YWxCYWxhbmNlID0gc2FmZVN1YihyZXNlcnZlLnZpcnR1YWxCYWxhbmNlLCBhbW91bnQpOwoKICAgICAgICB0b2tlbi5kZXN0cm95KG1zZy5zZW5kZXIsIF9zZWxsQW1vdW50KTsgLy8gZGVzdHJveSBfc2VsbEFtb3VudCBmcm9tIHRoZSBjYWxsZXIncyBiYWxhbmNlIGluIHRoZSBzbWFydCB0b2tlbgogICAgICAgIGFzc2VydChfcmVzZXJ2ZVRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCkpOyAvLyB0cmFuc2ZlciBmdW5kcyB0byB0aGUgY2FsbGVyIGluIHRoZSByZXNlcnZlIHRva2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdGUgdGhhdCBpdCBtaWdodCBmYWlsIGlmIHRoZSBhY3R1YWwgcmVzZXJ2ZSBiYWxhbmNlIGlzIHNtYWxsZXIgdGhhbiB0aGUgdmlydHVhbCBiYWxhbmNlCiAgICAgICAgQ2hhbmdlKHRva2VuLCBfcmVzZXJ2ZVRva2VuLCBtc2cuc2VuZGVyLCBfc2VsbEFtb3VudCwgYW1vdW50KTsKICAgICAgICByZXR1cm4gYW1vdW50OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXRpbGl0eSwgcmV0dXJucyB0aGUgZXhwZWN0ZWQgcmV0dXJuIGZvciBzZWxsaW5nIHRoZSB0b2tlbiBmb3Igb25lIG9mIGl0cyByZXNlcnZlIHRva2VucywgZ2l2ZW4gYSB0b3RhbCBzdXBwbHkgb3ZlcnJpZGUKCiAgICAgICAgQHBhcmFtIF9yZXNlcnZlVG9rZW4gICByZXNlcnZlIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3NlbGxBbW91bnQgICAgIGFtb3VudCB0byBzZWxsIChpbiB0aGUgc21hcnQgdG9rZW4pCiAgICAgICAgQHBhcmFtIF90b3RhbFN1cHBseSAgICB0b3RhbCB0b2tlbiBzdXBwbHksIG92ZXJyaWRlcyB0aGUgYWN0dWFsIHRva2VuIHRvdGFsIHN1cHBseSB3aGVuIGNhbGN1bGF0aW5nIHRoZSByZXR1cm4KCiAgICAgICAgQHJldHVybiBzYWxlIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBnZXRTYWxlUmV0dXJuKElFUkMyMFRva2VuIF9yZXNlcnZlVG9rZW4sIHVpbnQyNTYgX3NlbGxBbW91bnQsIHVpbnQyNTYgX3RvdGFsU3VwcGx5KQogICAgICAgIHByaXZhdGUKICAgICAgICBjb25zdGFudAogICAgICAgIGFjdGl2ZQogICAgICAgIHZhbGlkUmVzZXJ2ZShfcmVzZXJ2ZVRva2VuKQogICAgICAgIHZhbGlkQW1vdW50KF90b3RhbFN1cHBseSkKICAgICAgICByZXR1cm5zICh1aW50MjU2IGFtb3VudCkKICAgIHsKICAgICAgICBSZXNlcnZlIHJlc2VydmUgPSByZXNlcnZlc1tfcmVzZXJ2ZVRva2VuXTsKICAgICAgICB1aW50MjU2IHJlc2VydmVCYWxhbmNlID0gZ2V0UmVzZXJ2ZUJhbGFuY2UoX3Jlc2VydmVUb2tlbik7CiAgICAgICAgcmV0dXJuIGZvcm11bGEuY2FsY3VsYXRlU2FsZVJldHVybihfdG90YWxTdXBwbHksIHJlc2VydmVCYWxhbmNlLCByZXNlcnZlLnJhdGlvLCBfc2VsbEFtb3VudCk7CiAgICB9Cn0='.
	

]
