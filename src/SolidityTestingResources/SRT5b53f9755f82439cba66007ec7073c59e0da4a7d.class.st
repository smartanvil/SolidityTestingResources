Class {
	#name : #SRT5b53f9755f82439cba66007ec7073c59e0da4a7d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5b53f9755f82439cba66007ec7073c59e0da4a7d >> base64 [
	^ ''.
	

]
