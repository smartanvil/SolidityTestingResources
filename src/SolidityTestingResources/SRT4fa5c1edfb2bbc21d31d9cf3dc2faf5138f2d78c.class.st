Class {
	#name : #SRT4fa5c1edfb2bbc21d31d9cf3dc2faf5138f2d78c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4fa5c1edfb2bbc21d31d9cf3dc2faf5138f2d78c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLy9mdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KICAKICBmdW5jdGlvbiBnZXRPd25lcigpIHZpZXcgcHVibGljIHJldHVybnMgKGFkZHJlc3MpewogICAgcmV0dXJuIG93bmVyOwogIH0KICAKCn0KCgoKY29udHJhY3QgQml0TG9hbmV4IGlzIE93bmFibGUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQml0bG9hbmV4IjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJCVExYIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICB1aW50MjU2IHB1YmxpYyByYXRlOwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IENBUCA9IDEyNjAwMDsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBTVEFSVCA9IDE1MTQxNjAwMDA7CiAgdWludDI1NiBwdWJsaWMgREFZUyA9IDMwOwogIHVpbnQyNTYgcHVibGljIGRheXNfaW50ZXJ2YWwgPSAzOwogIHVpbnRbOV0gcHVibGljIGRlYWRsaW5lcyA9IFtTVEFSVCwgU1RBUlQuYWRkKDEqIGRheXNfaW50ZXJ2YWwgKiAxIGRheXMpLCBTVEFSVC5hZGQoMiogZGF5c19pbnRlcnZhbCAqIDEgZGF5cyksIFNUQVJULmFkZCgzKiBkYXlzX2ludGVydmFsICogMSBkYXlzKSwgU1RBUlQuYWRkKDQqIGRheXNfaW50ZXJ2YWwgKiAxIGRheXMpLCBTVEFSVC5hZGQoNSogZGF5c19pbnRlcnZhbCAqIDEgZGF5cyksIFNUQVJULmFkZCg2KiBkYXlzX2ludGVydmFsICogMSBkYXlzKSwgU1RBUlQuYWRkKDcqIGRheXNfaW50ZXJ2YWwgKiAxIGRheXMpLCBTVEFSVC5hZGQoOCogZGF5c19pbnRlcnZhbCAqIDEgZGF5cykgIF07CiAgdWludFs5XSBwdWJsaWMgcmF0ZXMgPSBbMjAwMCwgMTgwMCwgMTY1MCwgMTU1MCwgMTQ1MCwgMTM1MCwgMTI1MCwgMTE1MCwgMTEwMF07CiAgYm9vbCBwdWJsaWMgaW5pdGlhbGl6ZWQgPSB0cnVlOwogIHVpbnQyNTYgcHVibGljIHJhaXNlZEFtb3VudCA9IDA7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxMDAwMDAwMDAwMDAwMDAwMDsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBhZGRyZXNzW10gcHVibGljIGludmVzdG9yczsKICB1aW50W10gcHVibGljIHRpbWVCb3VnaHQ7CiAgCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBCb3VnaHRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAKICBmdW5jdGlvbiBCaXRMb2FuZXgoKSBwdWJsaWMgewogICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gSU5JVElBTF9TVVBQTFk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgbW9kaWZpZXIgd2hlblNhbGVBY3RpdmUoKSB7CiAgYXNzZXJ0KGlzQWN0aXZlKCkpOwogIF87CiAgfQoKCgogIGZ1bmN0aW9uIGluaXRpYWxpemUoYm9vbCBfdmFsKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgCiAgICBpbml0aWFsaXplZCA9IF92YWw7CgogIH0KCgogIGZ1bmN0aW9uIGlzQWN0aXZlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybigKICAgICAgaW5pdGlhbGl6ZWQgPT0gdHJ1ZSAmJgogICAgICBub3cgPj0gU1RBUlQgJiYKICAgICAgbm93IDw9IFNUQVJULmFkZChEQVlTICogMSBkYXlzKSAmJgogICAgICBnb2FsUmVhY2hlZCgpID09IGZhbHNlCiAgICApOwogIH0KCiAgZnVuY3Rpb24gZ29hbFJlYWNoZWQoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiAocmFpc2VkQW1vdW50ID49IENBUCAqIDEgZXRoZXIpOwogIH0KCiAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewoKICAgIGJ1eVRva2VucygpOwoKICB9CgogIGZ1bmN0aW9uIGJ1eVRva2VucygpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgCiAgICByZXF1aXJlKGluaXRpYWxpemVkICYmIG5vdyA8PSBTVEFSVC5hZGQoREFZUyAqIDEgZGF5cykpOwogICAgCiAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChnZXRSYXRlKCkpOwogICAgCiAgICB0b2tlbnMgPSB0b2tlbnMuZGl2KDEgZXRoZXIpOwogICAgCiAgICBCb3VnaHRUb2tlbnMobXNnLnNlbmRlciwgdG9rZW5zKTsKCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZCh0b2tlbnMpOwogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1Yih0b2tlbnMpOwogICAgdG90YWxTdXBwbHkuc3ViKHRva2Vucyk7CgogICAgdGltZUJvdWdodC5wdXNoKG5vdykgLTE7CiAgICAKICAgIHJhaXNlZEFtb3VudCA9IHJhaXNlZEFtb3VudC5hZGQobXNnLnZhbHVlKTsKICAgIAogICAgaW52ZXN0b3JzLnB1c2gobXNnLnNlbmRlcikgLTE7CiAgICAvL293bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQogIAogIGZ1bmN0aW9uIHRva2VuQm91Z2h0UGVyVGltZSh1aW50IF90aW1lKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50W10pIHsKICAgIHVpbnRbXSB0VGltZTsKICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aW1lQm91Z2h0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgIGlmKF90aW1lPD10aW1lQm91Z2h0W2ldKXsKICAgICAgICAgICAgICB0VGltZS5wdXNoKHRpbWVCb3VnaHRbaV0pIC0xOwogICAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRUaW1lOwogIH0KICAKICBmdW5jdGlvbiBnZXRJbnZlc3RvcnMoKSB2aWV3IHB1YmxpYyByZXR1cm5zIChhZGRyZXNzW10pCiAgewogICAgICByZXR1cm4gaW52ZXN0b3JzOwogIH0KCiAgZnVuY3Rpb24gdG9rZW5BdmFpbGFibGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nil7CiAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogIH0KICAKICBmdW5jdGlvbiBzZXRSYXRlKHVpbnQyNTYgX3JhdGUpIHB1YmxpYyBvbmx5T3duZXIKICB7CiAgICAgIHJhdGUgPSBfcmF0ZTsKICB9CiAgCiAgZnVuY3Rpb24gc2V0SW50ZXJ2YWwodWludDI1NiBfcmF0ZSkgcHVibGljIG9ubHlPd25lcgogIHsKICAgICAgZGF5c19pbnRlcnZhbCA9IF9yYXRlOwogIH0KICAKICBmdW5jdGlvbiBzZXREYXlzKHVpbnQyNTYgX2RheSkgcHVibGljIG9ubHlPd25lcgogIHsKICAgICAgREFZUyA9IF9kYXk7CiAgfQoKICBmdW5jdGlvbiBnZXRSYXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgICAKICAgICAgaWYocmF0ZSA+IDApIHJldHVybiByYXRlOwogICAgICAKICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRlYWRsaW5lcy5sZW5ndGg7IGkrKykKICAgICAgICAgIGlmKG5vdzxkZWFkbGluZXNbaV0pCiAgICAgICAgICAgICAgcmV0dXJuIHJhdGVzW2ktMV07CiAgICAgIHJldHVybiByYXRlc1tyYXRlcy5sZW5ndGgtMV07Ly9zaG91bGQgbmV2ZXIgYmUgcmV0dXJuZWQsIGJ1dCB0byBiZSBzdXJlIHRvIG5vdCBkaXZpZGUgYnkgMAogIH0KICAKICBmdW5jdGlvbiBkZXN0cm95KCkgcHVibGljIG9ubHlPd25lciB7CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCgp9'.
	

]
