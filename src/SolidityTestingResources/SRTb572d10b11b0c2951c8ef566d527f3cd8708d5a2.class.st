Class {
	#name : #SRTb572d10b11b0c2951c8ef566d527f3cd8708d5a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb572d10b11b0c2951c8ef566d527f3cd8708d5a2 >> base64 [
	^ ''.
	

]
