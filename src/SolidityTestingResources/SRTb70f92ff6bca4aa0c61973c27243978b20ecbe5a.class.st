Class {
	#name : #SRTb70f92ff6bca4aa0c61973c27243978b20ecbe5a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb70f92ff6bca4aa0c61973c27243978b20ecbe5a >> base64 [
	^ ''.
	

]
