Class {
	#name : #SRT2f665527b0a8b3710adcde917220de7d6b68d67d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f665527b0a8b3710adcde917220de7d6b68d67d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovL2ltcG9ydCAnLi9saWIvc2FmZU1hdGguc29sJzsKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIGltcG9ydCAnLi9FUkMyMC5zb2wnOwpjb250cmFjdCBFUkMyMCB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIGltcG9ydCAnLi9oZWxwZXJzL0Jhc2ljVG9rZW4uc29sJzsKY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICAKLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKfQoKCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuIAogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCgp9CgovLyBpbXBvcnQgJy4vQmlRVG9rZW4uc29sJzsKY29udHJhY3QgQmlRVG9rZW4gaXMgQmFzaWNUb2tlbiB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQnVyc3RJUSBUb2tlbiI7ICAgICAgICAgICAgICAvL25hbWUgb2YgdGhlIHRva2VuCiAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQmlRIjsgICAgICAgICAgICAgICAgICAgICAgLy8gc3ltYm9sIG9mIHRoZSB0b2tlbgogIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlY2ltYWxzCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAxMDAwMDAwMDAwICogMTAqKjE4OyAgLy8gdG90YWwgc3VwcGx5IG9mIEJpUSBUb2tlbnMKCiAgLy8gdmFyaWFibGVzCiAgdWludDI1NiBwdWJsaWMga2V5RW1wbG95ZWVzQWxsb2NhdGVkRnVuZDsgICAgICAgICAgIC8vIGZ1bmQgYWxsb2NhdGVkIHRvIGtleSBlbXBsb3llZXMKICB1aW50MjU2IHB1YmxpYyBhZHZpc29yc0FsbG9jYXRpb247ICAgICAgICAgICAgICAgICAgLy8gZnVuZCBhbGxvY2F0ZWQgdG8gYWR2aXNvcnMKICB1aW50MjU2IHB1YmxpYyBtYXJrZXRJbmNlbnRpdmVzQWxsb2NhdGlvbjsgICAgICAgICAgLy8gZnVuZCBhbGxvY2F0ZWQgdG8gTWFya2V0CiAgdWludDI1NiBwdWJsaWMgdmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uOyAgICAgICAgICAgIC8vIGZ1bmRzIGFsbG9jYXRlZCB0byBmb3VuZGVycyB0aGF0IGluIHVuZGVyIHZlc3RpbmcgcGVyaW9kCiAgdWludDI1NiBwdWJsaWMgdG90YWxBbGxvY2F0ZWRUb2tlbnM7ICAgICAgICAgICAgICAgIC8vIHZhcmlhYmxlIHRvIGtlZXAgdHJhY2sgb2YgZnVuZHMgYWxsb2NhdGVkCiAgdWludDI1NiBwdWJsaWMgdG9rZW5zQWxsb2NhdGVkVG9Dcm93ZEZ1bmQ7ICAgICAgICAgIC8vIGZ1bmRzIGFsbG9jYXRlZCB0byBjcm93ZGZ1bmQKICB1aW50MjU2IHB1YmxpYyBzYWZ0SW52ZXN0b3JBbGxvY2F0aW9uOyAgICAgICAgICAgICAgLy8gZnVuZHMgYWxsb2NhdGVkIHRvIHByaXZhdGUgcHJlc2FsZXMgYW5kIGluc3RpdHVhdGlvbmFsIGludmVzdG9ycwoKICBib29sIHB1YmxpYyBpc1B1YmxpY1Rva2VuUmVsZWFzZWQgPSBmYWxzZTsgICAgICAgICAgLy8gZmxhZyB0byB0cmFjayB0aGUgcmVsZWFzZSB0aGUgcHVibGljIHRva2VuCgogIC8vIGFkZHJlc3NlcwoKICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyTXVsdGlTaWdBZGRyZXNzOyAgICAgICAgICAgICAgLy8gbXVsdGkgc2lnbiBhZGRyZXNzIG9mIGZvdW5kZXJzIHdoaWNoIGhvbGQKICBhZGRyZXNzIHB1YmxpYyBhZHZpc29yQWRkcmVzczsgICAgICAgICAgICAgICAgICAgICAgLy8gIGFkdmlzb3IgYWRkcmVzcyB3aGljaCBob2xkIGFkdmlzb3JzQWxsb2NhdGlvbiBmdW5kcwogIGFkZHJlc3MgcHVibGljIHZlc3RpbmdGb3VuZGVyQWRkcmVzczsgICAgICAgICAgICAgICAvLyBhZGRyZXNzIG9mIGZvdW5kZXIgdGhhdCBob2xkIHZlc3RpbmdGb3VuZGVyQWxsb2NhdGlvbgogIGFkZHJlc3MgcHVibGljIGNyb3dkRnVuZEFkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAvLyBhZGRyZXNzIG9mIGNyb3dkZnVuZCBjb250cmFjdAoKICAvLyB2ZXN0aW5nIHBlcmlvZAoKICB1aW50MjU2IHB1YmxpYyBwcmVBbGxvY2F0ZWRUb2tlbnNWZXN0aW5nVGltZTsgICAgICAgLy8gY3Jvd2RmdW5kIHN0YXJ0IHRpbWUgKyA2IG1vbnRocwoKICAvL2V2ZW50cwoKICBldmVudCBDaGFuZ2VGb3VuZGVyc1dhbGxldEFkZHJlc3ModWludDI1NiAgX2Jsb2NrVGltZVN0YW1wLCBhZGRyZXNzIGluZGV4ZWQgX2ZvdW5kZXJzV2FsbGV0QWRkcmVzcyk7CiAgZXZlbnQgVHJhbnNmZXJQcmVBbGxvY2F0ZWRGdW5kcyh1aW50MjU2ICBfYmxvY2tUaW1lU3RhbXAgLCBhZGRyZXNzIF90byAsIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBQdWJsaWNUb2tlblJlbGVhc2VkKHVpbnQyNTYgX2Jsb2NrVGltZVN0YW1wKTsKCiAgLy9tb2RpZmllcnMKCiAgbW9kaWZpZXIgb25seUNyb3dkRnVuZEFkZHJlc3MoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RGdW5kQWRkcmVzcyk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbm9uWmVyb0FkZHJlc3MoYWRkcmVzcyBfdG8pIHsKICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUZvdW5kZXJzKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlWZXN0aW5nRm91bmRlckFkZHJlc3MoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdmVzdGluZ0ZvdW5kZXJBZGRyZXNzKTsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5QWR2aXNvckFkZHJlc3MoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWR2aXNvckFkZHJlc3MpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIGlzUHVibGljVG9rZW5Ob3RSZWxlYXNlZCgpIHsKICAgIHJlcXVpcmUoaXNQdWJsaWNUb2tlblJlbGVhc2VkID09IGZhbHNlKTsKICAgIF87CiAgfQoKCiAgLy8gY3JlYXRpb24gb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgZnVuY3Rpb24gQmlRVG9rZW4gKGFkZHJlc3MgX2Nyb3dkRnVuZEFkZHJlc3MsIGFkZHJlc3MgX2ZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MsIGFkZHJlc3MgX2Fkdmlzb3JBZGRyZXNzLCBhZGRyZXNzIF92ZXN0aW5nRm91bmRlckFkZHJlc3MpIHsKICAgIGNyb3dkRnVuZEFkZHJlc3MgPSBfY3Jvd2RGdW5kQWRkcmVzczsKICAgIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MgPSBfZm91bmRlck11bHRpU2lnQWRkcmVzczsKICAgIHZlc3RpbmdGb3VuZGVyQWRkcmVzcyA9IF92ZXN0aW5nRm91bmRlckFkZHJlc3M7CiAgICBhZHZpc29yQWRkcmVzcyA9IF9hZHZpc29yQWRkcmVzczsKCiAgICAvLyBUb2tlbiBEaXN0cmlidXRpb24KICAgIHZlc3RpbmdGb3VuZGVyQWxsb2NhdGlvbiA9IDE4ICogMTAgKiogMjUgOyAgICAgICAgLy8gMTggJSBhbGxvY2F0aW9uIG9mIHRvdGFsU3VwcGx5CiAgICBrZXlFbXBsb3llZXNBbGxvY2F0ZWRGdW5kID0gMiAqIDEwICoqIDI1IDsgICAgICAgIC8vIDIgJSBhbGxvY2F0aW9uIG9mIHRvdGFsU3VwcGx5CiAgICBhZHZpc29yc0FsbG9jYXRpb24gPSA1ICogMTAgKiogMjUgOyAgICAgICAgICAgICAgIC8vIDUgJSBhbGxvY2F0aW9uIG9mIHRvdGFsU3VwcGx5CiAgICB0b2tlbnNBbGxvY2F0ZWRUb0Nyb3dkRnVuZCA9IDYwICogMTAgKiogMjUgOyAgICAgIC8vIDYwICUgYWxsb2NhdGlvbiBvZiB0b3RhbFN1cHBseQogICAgbWFya2V0SW5jZW50aXZlc0FsbG9jYXRpb24gPSA1ICogMTAgKiogMjUgOyAgICAgICAvLyA1ICUgYWxsb2NhdGlvbiBvZiB0b3RhbFN1cHBseQogICAgc2FmdEludmVzdG9yQWxsb2NhdGlvbiA9IDEwICogMTAgKiogMjUgOyAgICAgICAgICAvLyAxMCAlIGFsbG9hY3Rpb24gb2YgdG90YWxTdXBwbHkKCiAgICAvLyBBc3NpZ25lZCBiYWxhbmNlcyB0byByZXNwZWN0aXZlIHN0YWtlaG9sZGVycwogICAgYmFsYW5jZXNbZm91bmRlck11bHRpU2lnQWRkcmVzc10gPSBrZXlFbXBsb3llZXNBbGxvY2F0ZWRGdW5kICsgc2FmdEludmVzdG9yQWxsb2NhdGlvbjsKICAgIGJhbGFuY2VzW2Nyb3dkRnVuZEFkZHJlc3NdID0gdG9rZW5zQWxsb2NhdGVkVG9Dcm93ZEZ1bmQ7CgogICAgdG90YWxBbGxvY2F0ZWRUb2tlbnMgPSBiYWxhbmNlc1tmb3VuZGVyTXVsdGlTaWdBZGRyZXNzXTsKICAgIHByZUFsbG9jYXRlZFRva2Vuc1Zlc3RpbmdUaW1lID0gbm93ICsgMTgwICogMSBkYXlzOyAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgNiBtb250aHMgcGVyaW9kIGZvciB2ZXN0aW5nCiAgfQoKICAvLyBmdW5jdGlvbiB0byBrZWVwIHRyYWNrIG9mIHRoZSB0b3RhbCB0b2tlbiBhbGxvY2F0aW9uCiAgZnVuY3Rpb24gY2hhbmdlVG90YWxTdXBwbHkodWludDI1NiBfYW1vdW50KSBvbmx5Q3Jvd2RGdW5kQWRkcmVzcyB7CiAgICB0b3RhbEFsbG9jYXRlZFRva2VucyA9IHRvdGFsQWxsb2NhdGVkVG9rZW5zLmFkZChfYW1vdW50KTsKICAgIHRva2Vuc0FsbG9jYXRlZFRvQ3Jvd2RGdW5kID0gdG9rZW5zQWxsb2NhdGVkVG9Dcm93ZEZ1bmQuc3ViKF9hbW91bnQpOwogIH0KCiAgLy8gZnVuY3Rpb24gdG8gY2hhbmdlIGZvdW5kZXIgbXVsdGlzaWcgd2FsbGV0IGFkZHJlc3MKICBmdW5jdGlvbiBjaGFuZ2VGb3VuZGVyTXVsdGlTaWdBZGRyZXNzKGFkZHJlc3MgX25ld0ZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpIG9ubHlGb3VuZGVycyBub25aZXJvQWRkcmVzcyhfbmV3Rm91bmRlck11bHRpU2lnQWRkcmVzcykgewogICAgZm91bmRlck11bHRpU2lnQWRkcmVzcyA9IF9uZXdGb3VuZGVyTXVsdGlTaWdBZGRyZXNzOwogICAgQ2hhbmdlRm91bmRlcnNXYWxsZXRBZGRyZXNzKG5vdywgZm91bmRlck11bHRpU2lnQWRkcmVzcyk7CiAgfQoKICAvLyBmdW5jdGlvbiBmb3IgcmVsZWFzaW5nIHRoZSBwdWJsaWMgdG9rZW5zIGNhbGxlZCBvbmNlIGJ5IHRoZSBmb3VuZGVyIG9ubHkKICBmdW5jdGlvbiByZWxlYXNlVG9rZW4oKSBvbmx5Rm91bmRlcnMgaXNQdWJsaWNUb2tlbk5vdFJlbGVhc2VkIHsKICAgIGlzUHVibGljVG9rZW5SZWxlYXNlZCA9ICFpc1B1YmxpY1Rva2VuUmVsZWFzZWQ7CiAgICBQdWJsaWNUb2tlblJlbGVhc2VkKG5vdyk7CiAgfQoKICAvLyBmdW5jdGlvbiB0byB0cmFuc2ZlciBtYXJrZXQgSW5jZW50aXZlcyBmdW5kCiAgZnVuY3Rpb24gdHJhbnNmZXJNYXJrZXRJbmNlbnRpdmVzRnVuZChhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlGb3VuZGVycyBub25aZXJvQWRkcmVzcyhfdG8pICByZXR1cm5zIChib29sKSB7CiAgICBpZiAobWFya2V0SW5jZW50aXZlc0FsbG9jYXRpb24gPj0gX3ZhbHVlKSB7CiAgICAgIG1hcmtldEluY2VudGl2ZXNBbGxvY2F0aW9uID0gbWFya2V0SW5jZW50aXZlc0FsbG9jYXRpb24uc3ViKF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICB0b3RhbEFsbG9jYXRlZFRva2VucyA9IHRvdGFsQWxsb2NhdGVkVG9rZW5zLmFkZChfdmFsdWUpOwogICAgICBUcmFuc2ZlclByZUFsbG9jYXRlZEZ1bmRzKG5vdywgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgoKICAvLyBmdW5kIHRyYW5zZmVycmVkIHRvIHZlc3RpbmcgRm91bmRlcnMgYWRkcmVzcyBhZnRlciA2IG1vbnRocwogIGZ1bmN0aW9uIGdldFZlc3RlZEZvdW5kZXJUb2tlbnMoKSBvbmx5VmVzdGluZ0ZvdW5kZXJBZGRyZXNzIHJldHVybnMgKGJvb2wpIHsKICAgIGlmIChub3cgPj0gcHJlQWxsb2NhdGVkVG9rZW5zVmVzdGluZ1RpbWUgJiYgdmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uID4gMCkgewogICAgICBiYWxhbmNlc1t2ZXN0aW5nRm91bmRlckFkZHJlc3NdID0gYmFsYW5jZXNbdmVzdGluZ0ZvdW5kZXJBZGRyZXNzXS5hZGQodmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uKTsKICAgICAgdG90YWxBbGxvY2F0ZWRUb2tlbnMgPSB0b3RhbEFsbG9jYXRlZFRva2Vucy5hZGQodmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uKTsKICAgICAgdmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uID0gMDsKICAgICAgVHJhbnNmZXJQcmVBbGxvY2F0ZWRGdW5kcyhub3csIHZlc3RpbmdGb3VuZGVyQWRkcmVzcywgdmVzdGluZ0ZvdW5kZXJBbGxvY2F0aW9uKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBmdW5kIHRyYW5zZmVycmVkIHRvIHZlc3RpbmcgYWR2aXNvciBhZGRyZXNzIGFmdGVyIDYgbW9udGhzCiAgZnVuY3Rpb24gZ2V0VmVzdGVkQWR2aXNvclRva2VucygpIG9ubHlBZHZpc29yQWRkcmVzcyByZXR1cm5zIChib29sKSB7CiAgICBpZiAobm93ID49IHByZUFsbG9jYXRlZFRva2Vuc1Zlc3RpbmdUaW1lICYmIGFkdmlzb3JzQWxsb2NhdGlvbiA+IDApIHsKICAgICAgYmFsYW5jZXNbYWR2aXNvckFkZHJlc3NdID0gYmFsYW5jZXNbYWR2aXNvckFkZHJlc3NdLmFkZChhZHZpc29yc0FsbG9jYXRpb24pOwogICAgICB0b3RhbEFsbG9jYXRlZFRva2VucyA9IHRvdGFsQWxsb2NhdGVkVG9rZW5zLmFkZChhZHZpc29yc0FsbG9jYXRpb24pOwogICAgICBhZHZpc29yc0FsbG9jYXRpb24gPSAwOwogICAgICBUcmFuc2ZlclByZUFsbG9jYXRlZEZ1bmRzKG5vdywgYWR2aXNvckFkZHJlc3MsIGFkdmlzb3JzQWxsb2NhdGlvbik7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgLy8gb3ZlcmxvYWRlZCB0cmFuc2ZlciBmdW5jdGlvbiB0byByZXN0cmljdCB0aGUgaW52ZXN0b3IgdG8gdHJhbnNmZXIgdGhlIHRva2VuIGJlZm9yZSB0aGUgSUNPIHNhbGUgZW5kcwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gY3Jvd2RGdW5kQWRkcmVzcykgewogICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLF92YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICBpZiAoaXNQdWJsaWNUb2tlblJlbGVhc2VkKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90byxfdmFsdWUpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIC8vIG92ZXJsb2FkZWQgdHJhbnNmZXJGcm9tIGZ1bmN0aW9uIHRvIHJlc3RyaWN0IHRoZSBpbnZlc3RvciB0byB0cmFuc2ZlciB0aGUgdG9rZW4gYmVmb3JlIHRoZSBJQ08gc2FsZSBlbmRzCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gY3Jvd2RGdW5kQWRkcmVzcykgewogICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICBpZiAoaXNQdWJsaWNUb2tlblJlbGVhc2VkKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlc3RyaWN0IGRpcmVjdCBzZW5kaW5nIG9mIGV0aGVyCiAgZnVuY3Rpb24gKCkgewogICAgcmV2ZXJ0KCk7CiAgfQoKfQoKY29udHJhY3QgQmlRQ3Jvd2RGdW5kIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBCaVFUb2tlbiBwdWJsaWMgdG9rZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG9rZW4gY29udHJhY3QgcmVmZXJlbmNlCgogICAgLy92YXJpYWJsZXMKICAgIHVpbnQyNTYgcHVibGljIGNyb3dkZnVuZFN0YXJ0VGltZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydGluZyB0aW1lIG9mIENyb3dkRnVuZAogICAgdWludDI1NiBwdWJsaWMgY3Jvd2RmdW5kRW5kVGltZTsgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZCB0aW1lIG9mIENyb3dkZnVuZAogICAgdWludDI1NiBwdWJsaWMgdG90YWxXZWlSYWlzZWQgPSAwOyAgICAgICAgICAgICAgICAgICAgIC8vIENvdW50ZXIgdG8gdHJhY2sgdGhlIGFtb3VudCByYWlzZWQKICAgIHVpbnQyNTYgcHVibGljIGV4Y2hhbmdlUmF0ZSA9IDIzMDc7ICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGVkIHVzaW5nIHByaWNlT2ZFdGhlckluVVNEL3ByaWNlT2ZCaVFUb2tlbiBzbyAyNzYuODQvMC4xMgogICAgdWludDI1NiBpbnRlcm5hbCBtaW5BbW91bnQgPSAzNi4xMjE5ICogMTAgKiogMTg7ICAgICAgIC8vIENhbGN1bGF0ZWQgdXNpbmcgMTBrIFVTRCAvIDI3Ni44NCBVU0QKCiAgICBib29sIHB1YmxpYyBpc0Nyb3dkRnVuZEFjdGl2ZSA9IGZhbHNlOyAgICAgICAgICAgICAgICAgLy8gRmxhZyB0byB0cmFjayB0aGUgY3Jvd2RmdW5kIGFjdGl2ZSBvciBub3QKICAgIGJvb2wgaW50ZXJuYWwgaXNUb2tlbkRlcGxveWVkID0gZmFsc2U7ICAgICAgICAgICAgICAgICAvLyBGbGFnIHRvIHRyYWNrIHRoZSB0b2tlbiBkZXBsb3ltZW50IC0tIG9ubHkgY2FuIGJlIHNldCBvbmNlCiAgICBib29sIGludGVybmFsIGhhc0Nyb3dkRnVuZFN0YXJ0ZWQgPSBmYWxzZTsgICAgICAgICAgICAgLy8gRmxhZyB0byB0cmFjayBpZiB0aGUgY3Jvd2RmdW5kIHN0YXJ0ZWQKCiAgICAvLyBhZGRyZXNzZXMKICAgIGFkZHJlc3MgcHVibGljIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3M7ICAgICAgICAgICAgICAgICAvLyBGb3VuZGVycyBtdWx0aXNpZyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyByZW1haW5pbmdUb2tlbkhvbGRlcjsgICAgICAgICAgICAgICAgICAgLy8gQWRkcmVzcyB0byBob2xkIHRoZSByZW1haW5pbmcgdG9rZW5zIGFmdGVyIGNyb3dkZnVuZCBlbmQKICAgIGFkZHJlc3MgcHVibGljIGF1dGhvcml6ZXJBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRyZXNzIG9mIEF1dGhvcml6ZXIgd2hvIHdpbGwgYXV0aG9yaXplIHRoZSBpbnZlc3RvcgoKICAgIC8vIG1hcHBpbmcKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYXV0aDsgICAgICAgICAgICAgICAgICAgICAvLyBLWUMgYXV0aGVudGljYXRpb24KCiAgICBlbnVtIFN0YXRlIHsgUHJlU2FsZSwgQ3Jvd2RGdW5kIH0KCiAgICAvL2V2ZW50cwogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IENyb3dkRnVuZENsb3NlZCh1aW50MjU2IF9ibG9ja1RpbWVTdGFtcCk7CiAgICBldmVudCBDaGFuZ2VGb3VuZGVyc1dhbGxldEFkZHJlc3ModWludDI1NiBfYmxvY2tUaW1lU3RhbXAsIGFkZHJlc3MgaW5kZXhlZCBfZm91bmRlcnNXYWxsZXRBZGRyZXNzKTsKCiAgICAvL01vZGlmaWVycwogICAgbW9kaWZpZXIgdG9rZW5Jc0RlcGxveWVkKCkgewogICAgICAgIHJlcXVpcmUoaXNUb2tlbkRlcGxveWVkID09IHRydWUpOwogICAgICAgIF87CiAgICB9CiAgICAgbW9kaWZpZXIgbm9uWmVyb0V0aCgpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm9uWmVyb0FkZHJlc3MoYWRkcmVzcyBfdG8pIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY2hlY2tDcm93ZEZ1bmRBY3RpdmUoKSB7CiAgICAgICAgcmVxdWlyZShpc0Nyb3dkRnVuZEFjdGl2ZSA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlGb3VuZGVycygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gZm91bmRlck11bHRpU2lnQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5UHVibGljKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBmb3VuZGVyTXVsdGlTaWdBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBdXRob3JpemVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhdXRob3JpemVyQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCgogICAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIHJlcXVpcmUoZ2V0U3RhdGUoKSA9PSBzdGF0ZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDb25zdHJ1Y3RvciB0byBpbml0aWFsaXplIHRoZSBsb2NhbCB2YXJpYWJsZXMKICAgIGZ1bmN0aW9uIEJpUUNyb3dkRnVuZCAoYWRkcmVzcyBfZm91bmRlcldhbGxldEFkZHJlc3MsIGFkZHJlc3MgX3JlbWFpbmluZ1Rva2VuSG9sZGVyLCBhZGRyZXNzIF9hdXRob3JpemVyQWRkcmVzcykgewogICAgICAgIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MgPSBfZm91bmRlcldhbGxldEFkZHJlc3M7CiAgICAgICAgcmVtYWluaW5nVG9rZW5Ib2xkZXIgPSBfcmVtYWluaW5nVG9rZW5Ib2xkZXI7CiAgICAgICAgYXV0aG9yaXplckFkZHJlc3MgPSBfYXV0aG9yaXplckFkZHJlc3M7CiAgICB9CgogICAgLy8gRnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBmb3VuZGVycyBtdWx0aXNpZyBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXRGb3VuZGVyTXVsdGlTaWdBZGRyZXNzKGFkZHJlc3MgX25ld0ZvdW5kZXJBZGRyZXNzKSBvbmx5Rm91bmRlcnMgbm9uWmVyb0FkZHJlc3MoX25ld0ZvdW5kZXJBZGRyZXNzKSB7CiAgICAgICAgZm91bmRlck11bHRpU2lnQWRkcmVzcyA9IF9uZXdGb3VuZGVyQWRkcmVzczsKICAgICAgICBDaGFuZ2VGb3VuZGVyc1dhbGxldEFkZHJlc3Mobm93LCBmb3VuZGVyTXVsdGlTaWdBZGRyZXNzKTsKICAgIH0KCiAgICAgZnVuY3Rpb24gc2V0QXV0aG9yaXplckFkZHJlc3MoYWRkcmVzcyBfbmV3QXV0aG9yaXplckFkZHJlc3MpIG9ubHlGb3VuZGVycyBub25aZXJvQWRkcmVzcyhfbmV3QXV0aG9yaXplckFkZHJlc3MpIHsKICAgICAgICBhdXRob3JpemVyQWRkcmVzcyA9IF9uZXdBdXRob3JpemVyQWRkcmVzczsKICAgIH0KCiAgICAgZnVuY3Rpb24gc2V0UmVtYWluaW5nVG9rZW5Ib2xkZXIoYWRkcmVzcyBfbmV3UmVtYWluaW5nVG9rZW5Ib2xkZXIpIG9ubHlGb3VuZGVycyBub25aZXJvQWRkcmVzcyhfbmV3UmVtYWluaW5nVG9rZW5Ib2xkZXIpIHsKICAgICAgICByZW1haW5pbmdUb2tlbkhvbGRlciA9IF9uZXdSZW1haW5pbmdUb2tlbkhvbGRlcjsKICAgIH0KCiAgICAvLyBBdHRhY2ggdGhlIHRva2VuIGNvbnRyYWN0LCBjYW4gb25seSBiZSBkb25lIG9uY2UKICAgIGZ1bmN0aW9uIHNldFRva2VuQWRkcmVzcyhhZGRyZXNzIF90b2tlbkFkZHJlc3MpIG9ubHlGb3VuZGVycyBub25aZXJvQWRkcmVzcyhfdG9rZW5BZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShpc1Rva2VuRGVwbG95ZWQgPT0gZmFsc2UpOwogICAgICAgIHRva2VuID0gQmlRVG9rZW4oX3Rva2VuQWRkcmVzcyk7CiAgICAgICAgaXNUb2tlbkRlcGxveWVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBjaGFuZ2UgdGhlIHN0YXRlIG9mIGNyb3dkZnVuZAogICAgZnVuY3Rpb24gY2hhbmdlQ3Jvd2RmdW5kU3RhdGUoKSB0b2tlbklzRGVwbG95ZWQgb25seUZvdW5kZXJzIGluU3RhdGUoU3RhdGUuQ3Jvd2RGdW5kKSB7CiAgICAgICAgaXNDcm93ZEZ1bmRBY3RpdmUgPSAhaXNDcm93ZEZ1bmRBY3RpdmU7CiAgICB9CgogICAgLy8gZm9yIEtZQy9BTUwKICAgIGZ1bmN0aW9uIGF1dGhvcml6ZShhZGRyZXNzIF90bywgdWludDI1NiBtYXhfYW1vdW50KSBvbmx5QXV0aG9yaXplciB7CiAgICAgICAgYXV0aFtfdG9dID0gbWF4X2Ftb3VudCAqIDEgZXRoZXI7CiAgICB9CgogICAgLy8gQnV5IHRva2VuIGZ1bmN0aW9uIGNhbGwgb25seSBpbiBkdXJhdGlvbiBvZiBjcm93ZGZ1bmQgYWN0aXZlCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgbm9uWmVyb0V0aCB0b2tlbklzRGVwbG95ZWQgb25seVB1YmxpYyBub25aZXJvQWRkcmVzcyhiZW5lZmljaWFyeSkgcGF5YWJsZSByZXR1cm5zKGJvb2wpIHsKICAgICAgICAvLyBPbmx5IGFsbG93IGEgY2VydGFpbiBhbW91bnQgZm9yIGV2ZXJ5IGludmVzdG9yCiAgICAgICAgaWYgKGF1dGhbYmVuZWZpY2lhcnldIDwgbXNnLnZhbHVlKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBhdXRoW2JlbmVmaWNpYXJ5XSA9IGF1dGhbYmVuZWZpY2lhcnldLnN1Yihtc2cudmFsdWUpOwoKICAgICAgICBpZiAoZ2V0U3RhdGUoKSA9PSBTdGF0ZS5QcmVTYWxlKSB7CiAgICAgICAgICAgIGlmIChidXlQcmVTYWxlVG9rZW5zKGJlbmVmaWNpYXJ5KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVxdWlyZShub3cgPCBjcm93ZGZ1bmRFbmRUaW1lICYmIGlzQ3Jvd2RGdW5kQWN0aXZlKTsKICAgICAgICAgICAgZnVuZFRyYW5zZmVyKG1zZy52YWx1ZSk7CgogICAgICAgICAgICB1aW50MjU2IGFtb3VudCA9IGdldE5vT2ZUb2tlbnMoZXhjaGFuZ2VSYXRlLCBtc2cudmFsdWUpOwoKICAgICAgICAgICAgaWYgKHRva2VuLnRyYW5zZmVyKGJlbmVmaWNpYXJ5LCBhbW91bnQpKSB7CiAgICAgICAgICAgICAgICB0b2tlbi5jaGFuZ2VUb3RhbFN1cHBseShhbW91bnQpOwogICAgICAgICAgICAgICAgdG90YWxXZWlSYWlzZWQgPSB0b3RhbFdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKTsKICAgICAgICAgICAgICAgIFRva2VuUHVyY2hhc2UoYmVuZWZpY2lhcnksIG1zZy52YWx1ZSwgYW1vdW50KTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICB9CgogICAgLy8gZnVuY3Rpb24gdG8gdHJhbnNmZXIgdGhlIGZ1bmRzIHRvIGZvdW5kZXJzIGFjY291bnQKICAgIGZ1bmN0aW9uIGZ1bmRUcmFuc2Zlcih1aW50MjU2IHdlaUFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MudHJhbnNmZXIod2VpQW1vdW50KTsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIENvbnN0YW50IEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gZnVuY3Rpb24gdG8gZ2V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjcm93ZHNhbGUKICAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhTdGF0ZSkgewogICAgICAgIGlmICghaXNDcm93ZEZ1bmRBY3RpdmUgJiYgIWhhc0Nyb3dkRnVuZFN0YXJ0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLlByZVNhbGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBTdGF0ZS5Dcm93ZEZ1bmQ7CiAgIH0KCiAgICAvLyBUbyBnZXQgdGhlIGF1dGhvcml6ZWQgYW1vdW50IGNvcnJlc3BvbmRpbmcgdG8gYW4gYWRkcmVzcwogICBmdW5jdGlvbiBnZXRQcmVBdXRob3JpemVkQW1vdW50KGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBhdXRoW19hZGRyZXNzXTsKICAgfQoKICAgLy8gZ2V0IHRoZSBhbW91bnQgb2YgdG9rZW5zIGEgdXNlciB3b3VsZCByZWNlaXZlIGZvciBhIHNwZWNpZmljIGFtb3VudCBvZiBldGhlcgogICBmdW5jdGlvbiBjYWxjdWxhdGVUb3RhbFRva2VuUGVyQ29udHJpYnV0aW9uKHVpbnQyNTYgX3RvdGFsRVRIQ29udHJpYnV0aW9uKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICBpZiAoZ2V0U3RhdGUoKSA9PSBTdGF0ZS5QcmVTYWxlKSB7CiAgICAgICAgICAgcmV0dXJuIGdldFRva2Vuc0ZvclByZVNhbGUoZXhjaGFuZ2VSYXRlLCBfdG90YWxFVEhDb250cmlidXRpb24gKiAxIGV0aGVyKS5kaXYoMTAgKiogMTgpOwogICAgICAgfQogICAgICAgcmV0dXJuIGdldE5vT2ZUb2tlbnMoZXhjaGFuZ2VSYXRlLCBfdG90YWxFVEhDb250cmlidXRpb24pOwogICB9CgogICAgLy8gcHJvdmlkZXMgdGhlIGJvbnVzICUKICAgIGZ1bmN0aW9uIGN1cnJlbnRCb251cyh1aW50MjU2IF9ldGhDb250cmlidXRpb24pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIGlmIChnZXRTdGF0ZSgpID09IFN0YXRlLlByZVNhbGUpIHsKICAgICAgICAgICAgcmV0dXJuIGdldFByZVNhbGVCb251c1JhdGUoX2V0aENvbnRyaWJ1dGlvbiAqIDEgZXRoZXIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2V0Q3VycmVudEJvbnVzUmF0ZSgpOwogICAgfQoKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gUHJlc2FsZSBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gZnVuY3Rpb24gdG8gYnV5IHRoZSB0b2tlbnMgYXQgcHJlc2FsZSB3aXRoIG1pbmltdW0gaW52ZXN0bWVudCA9IDEwayBVU0QKICAgIGZ1bmN0aW9uIGJ1eVByZVNhbGVUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAvLyBjaGVjayB0aGUgbWluaW11bSBpbnZlc3RtZW50IHNob3VsZCBiZSAxMGsgVVNECiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IG1pbkFtb3VudCkgewogICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZnVuZFRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIHVpbnQyNTYgYW1vdW50ID0gZ2V0VG9rZW5zRm9yUHJlU2FsZShleGNoYW5nZVJhdGUsIG1zZy52YWx1ZSk7CgogICAgICAgICAgICBpZiAodG9rZW4udHJhbnNmZXIoYmVuZWZpY2lhcnksIGFtb3VudCkpIHsKICAgICAgICAgICAgICAgIHRva2VuLmNoYW5nZVRvdGFsU3VwcGx5KGFtb3VudCk7CiAgICAgICAgICAgICAgICB0b3RhbFdlaVJhaXNlZCA9IHRvdGFsV2VpUmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgICAgICAgICAgICAgVG9rZW5QdXJjaGFzZShiZW5lZmljaWFyeSwgbXNnLnZhbHVlLCBhbW91bnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBmdW5jdGlvbiBjYWxjdWxhdGUgdGhlIHRvdGFsIG5vIG9mIHRva2VucyB3aXRoIGJvbnVzIG11bHRpcGxpY2F0aW9uIGluIHRoZSBkdXJhdGlvbiBvZiBwcmVzYWxlCiAgICBmdW5jdGlvbiBnZXRUb2tlbnNGb3JQcmVTYWxlKHVpbnQyNTYgX2V4Y2hhbmdlUmF0ZSwgdWludDI1NiBfYW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBub09mVG9rZW4gPSBfYW1vdW50Lm11bChfZXhjaGFuZ2VSYXRlKTsKICAgICAgICB1aW50MjU2IHByZVNhbGVUb2tlblF1YW50aXR5ID0gKCgxMDAgKyBnZXRQcmVTYWxlQm9udXNSYXRlKF9hbW91bnQpKSAqIG5vT2ZUb2tlbiApLmRpdigxMDApOwogICAgICAgIHJldHVybiBwcmVTYWxlVG9rZW5RdWFudGl0eTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcmVTYWxlQm9udXNSYXRlKHVpbnQyNTYgX2V0aEFtb3VudCkgaW50ZXJuYWwgcmV0dXJucyAodWludDgpIHsKICAgICAgICBpZiAoIF9ldGhBbW91bnQgPj0gbWluQW1vdW50Lm11bCg1KSAmJiBfZXRoQW1vdW50IDwgbWluQW1vdW50Lm11bCgxMCkpIHsKICAgICAgICAgICAgcmV0dXJuIDMwOwogICAgICAgIH0KICAgICAgICBpZiAoX2V0aEFtb3VudCA+PSBtaW5BbW91bnQubXVsKDEwKSkgewogICAgICAgICAgICByZXR1cm4gMzU7CiAgICAgICAgfQogICAgICAgIGlmIChfZXRoQW1vdW50ID49IG1pbkFtb3VudCkgewogICAgICAgICAgICByZXR1cm4gMjU7CiAgICAgICAgfQogICAgfQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIENyb3dkZnVuZCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIFN0YXJ0cyB0aGUgY3Jvd2RmdW5kLCBjYW4gb25seSBiZSBjYWxsZWQgb25jZQogICAgZnVuY3Rpb24gc3RhcnRDcm93ZGZ1bmQodWludDI1NiBfZXhjaGFuZ2VSYXRlKSBvbmx5Rm91bmRlcnMgdG9rZW5Jc0RlcGxveWVkIGluU3RhdGUoU3RhdGUuUHJlU2FsZSkgewogICAgICAgIGlmIChfZXhjaGFuZ2VSYXRlID4gMCAmJiAhaGFzQ3Jvd2RGdW5kU3RhcnRlZCkgewogICAgICAgICAgICBleGNoYW5nZVJhdGUgPSBfZXhjaGFuZ2VSYXRlOwogICAgICAgICAgICBjcm93ZGZ1bmRTdGFydFRpbWUgPSBub3c7CiAgICAgICAgICAgIGNyb3dkZnVuZEVuZFRpbWUgPSBjcm93ZGZ1bmRTdGFydFRpbWUgKyA1ICogMSB3ZWVrczsgLy8gZW5kIGRhdGUgaXMgNSB3ZWVrcyBhZnRlciB0aGUgc3RhcnRpbmcgZGF0ZQogICAgICAgICAgICBpc0Nyb3dkRnVuZEFjdGl2ZSA9ICFpc0Nyb3dkRnVuZEFjdGl2ZTsKICAgICAgICAgICAgaGFzQ3Jvd2RGdW5kU3RhcnRlZCA9ICFoYXNDcm93ZEZ1bmRTdGFydGVkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBmdW5jdGlvbiBjYWxsIGFmdGVyIGNyb3dkRnVuZEVuZFRpbWUuCiAgICAvLyBJdCB0cmFuc2ZlcnMgdGhlIHJlbWFpbmluZyB0b2tlbnMgdG8gcmVtYWluaW5nVG9rZW5Ib2xkZXIgYWRkcmVzcwogICAgZnVuY3Rpb24gZW5kQ3Jvd2RmdW5kKCkgb25seUZvdW5kZXJzIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKG5vdyA+IGNyb3dkZnVuZEVuZFRpbWUpOwogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nVG9rZW4gPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7ICAvLyByZW1haW5pbmcgdG9rZW5zCgogICAgICAgIGlmIChyZW1haW5pbmdUb2tlbiAhPSAwICYmIHRva2VuLnRyYW5zZmVyKHJlbWFpbmluZ1Rva2VuSG9sZGVyLCByZW1haW5pbmdUb2tlbikpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgQ3Jvd2RGdW5kQ2xvc2VkKG5vdyk7CiAgICB9CgogICAvLyBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIHRvdGFsIG5vIG9mIHRva2VucyB3aXRoIGJvbnVzIG11bHRpcGxpY2F0aW9uCiAgICBmdW5jdGlvbiBnZXROb09mVG9rZW5zKHVpbnQyNTYgX2V4Y2hhbmdlUmF0ZSwgdWludDI1NiBfYW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgIHVpbnQyNTYgbm9PZlRva2VuID0gX2Ftb3VudC5tdWwoX2V4Y2hhbmdlUmF0ZSk7CiAgICAgICAgIHVpbnQyNTYgbm9PZlRva2VuV2l0aEJvbnVzID0gKCgxMDAgKyBnZXRDdXJyZW50Qm9udXNSYXRlKCkpICogbm9PZlRva2VuKS5kaXYoMTAwKTsKICAgICAgICAgcmV0dXJuIG5vT2ZUb2tlbldpdGhCb251czsKICAgIH0KCiAgICAvLyBmdW5jdGlvbiBwcm92aWRlIHRoZSBjdXJyZW50IGJvbnVzIHJhdGUKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRCb251c1JhdGUoKSBpbnRlcm5hbCByZXR1cm5zICh1aW50OCkgewogICAgICAgIGlmIChub3cgPiBjcm93ZGZ1bmRTdGFydFRpbWUgKyA0IHdlZWtzKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICBpZiAobm93ID4gY3Jvd2RmdW5kU3RhcnRUaW1lICsgMyB3ZWVrcykgewogICAgICAgICAgICByZXR1cm4gNTsKICAgICAgICB9CiAgICAgICAgaWYgKG5vdyA+IGNyb3dkZnVuZFN0YXJ0VGltZSArIDIgd2Vla3MpIHsKICAgICAgICAgICAgcmV0dXJuIDEwOwogICAgICAgIH0KICAgICAgICBpZiAobm93ID4gY3Jvd2RmdW5kU3RhcnRUaW1lICsgMSB3ZWVrcykgewogICAgICAgICAgICByZXR1cm4gMTU7CiAgICAgICAgfQogICAgICAgIGlmIChub3cgPiBjcm93ZGZ1bmRTdGFydFRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIDIwOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBDcm93ZGZ1bmQgZW50cnkKICAgIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vIFdpdGggYXQgbGVhc3QgMjAwIDAwMCBnYXMKICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
