Class {
	#name : #SRTc72ed4445b3fe9f0863106e344e241530d338906,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc72ed4445b3fe9f0863106e344e241530d338906 >> base64 [
	^ ''.
	

]
