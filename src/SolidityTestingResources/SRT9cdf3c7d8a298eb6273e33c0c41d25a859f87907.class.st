Class {
	#name : #SRT9cdf3c7d8a298eb6273e33c0c41d25a859f87907,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9cdf3c7d8a298eb6273e33c0c41d25a859f87907 >> base64 [
	^ ''.
	

]
