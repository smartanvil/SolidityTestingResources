Class {
	#name : #SRT2ca72c9699b92b47272c9716c664cad6167c80b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ca72c9699b92b47272c9716c664cad6167c80b0 >> base64 [
	^ ''.
	

]
