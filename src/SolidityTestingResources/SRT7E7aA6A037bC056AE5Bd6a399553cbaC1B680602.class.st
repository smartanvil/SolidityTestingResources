Class {
	#name : #SRT7E7aA6A037bC056AE5Bd6a399553cbaC1B680602,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7E7aA6A037bC056AE5Bd6a399553cbaC1B680602 >> base64 [
	^ ''.
	

]
