Class {
	#name : #SRT5f391f8253475bffa27b2f8544994f9717ab310d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5f391f8253475bffa27b2f8544994f9717ab310d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgQ2xhaW1hYmxlVG9rZW5zIGlzIE93bmFibGUgewoKICAgIGFkZHJlc3MgcHVibGljIGNsYWltZWRUb2tlbnNXYWxsZXQ7CgogICAgZnVuY3Rpb24gQ2xhaW1hYmxlVG9rZW5zKGFkZHJlc3MgdGFyZ2V0V2FsbGV0KSB7CiAgICAgICAgY2xhaW1lZFRva2Vuc1dhbGxldCA9IHRhcmdldFdhbGxldDsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIHRva2VuQWRkcmVzcykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSh0b2tlbkFkZHJlc3MgIT0gMHgwKTsKICAgICAgICBFUkMyMCBjbGFpbWVkVG9rZW4gPSBFUkMyMCh0b2tlbkFkZHJlc3MpOwogICAgICAgIHVpbnQgYmFsYW5jZSA9IGNsYWltZWRUb2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgY2xhaW1lZFRva2VuLnRyYW5zZmVyKGNsYWltZWRUb2tlbnNXYWxsZXQsIGJhbGFuY2UpOwogICAgfQp9Cgpjb250cmFjdCBDcm9tVG9rZW4gaXMgT3duYWJsZSwgRVJDMjAsIENsYWltYWJsZVRva2VucyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJDUk9NIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkNST00iOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMDsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IElOSVRJQUxfU1VQUExZID0gMTAgKiogNzsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgaW50ZXJuYWwgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgogICAgZnVuY3Rpb24gQ3JvbVRva2VuKCkgT3duYWJsZSgpIENsYWltYWJsZVRva2Vucyhtc2cuc2VuZGVyKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRvICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW293bmVyXVtzcGVuZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW3dob107CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUodG8gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW2Zyb21dID49IHZhbHVlKTsKICAgICAgICByZXF1aXJlKHZhbHVlIDw9IGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIGJhbGFuY2VzW2Zyb21dID0gYmFsYW5jZXNbZnJvbV0uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCmNvbnRyYWN0IENyb21JY28gaXMgT3duYWJsZSwgQ2xhaW1hYmxlVG9rZW5zIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIENyb21Ub2tlbiBwdWJsaWMgdG9rZW47CgogICAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAgIHVpbnQgcHVibGljIHByZVN0YXJ0VGltZTsKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZTsKICAgIHVpbnQgcHVibGljIGVuZFRpbWU7CgogICAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgICBhZGRyZXNzIHB1YmxpYyB0YXJnZXRXYWxsZXQ7CiAgICBib29sIHB1YmxpYyB0YXJnZXRXYWxsZXRWZXJpZmllZDsKCiAgICAvLyBjYXBzIGRlZmluaXRpb25zCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBTT0ZUX0NBUCA9IDgwMDAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBIQVJEX0NBUCA9IDU2MDAwIGV0aGVyOwoKICAgIC8vIHRva2VuIHByaWNlCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBUT0tFTl9QUklDRSA9IDEwIGZpbm5leTsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBCT05VU19CQVRDSCA9IDIgKiAxMCAqKiA2OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgQk9OVVNfUEVSQ0VOVEFHRSA9IDI1OwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgTUlOSU1BTF9QUkVfSUNPX0lOVkVTVE1FTlQgPSAxMCBldGhlcjsKCiAgICAvLyBJQ08gZHVyYXRpb24KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSRV9EVVJBVElPTiA9IDE0IGRheXM7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBEVVJBVElPTiA9IDE0IGRheXM7CgogICAgLy8gY29udHJpYnV0aW9ucyBwZXIgaW5kaXZpZHVhbAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwoKICAgIC8vIHdhbGxldHMgYWxsb3dlZCB0byB0YWtlIHBhcnQgaW4gdGhlIHByZSBpY28KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHByZUljb01lbWJlcnM7CgogICAgLy8gdG90YWwgYW1vdW50IG9mIGZ1bmRzIHJhaXNlZAogICAgdWludDI1NiBwdWJsaWMgYW1vdW50UmFpc2VkOwoKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGQ7CgogICAgYm9vbCBwdWJsaWMgcGF1c2VkOwoKICAgIGVudW0gU3RhZ2VzIHsKICAgICAgICBXYWxsZXRVbnZlcmlmaWVkLAogICAgICAgIEJlZm9yZUljbywKICAgICAgICBQYXlhYmxlLAogICAgICAgIEFmdGVySWNvCiAgICB9CgogICAgZW51bSBQYXlhYmxlU3RhZ2VzIHsKICAgICAgICBQcmVJY28sCiAgICAgICAgUHVibGljSWNvCiAgICB9CgogICAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIENyb21JY28oYWRkcmVzcyB0b2tlbkFkZHJlc3MsIGFkZHJlc3MgYmVuZWZpY2lhcnlXYWxsZXQpIE93bmFibGUoKSBDbGFpbWFibGVUb2tlbnMoYmVuZWZpY2lhcnlXYWxsZXQpIHsKICAgICAgICB0b2tlbiA9IENyb21Ub2tlbih0b2tlbkFkZHJlc3MpOwogICAgICAgIHByZVN0YXJ0VGltZSA9IDE1MTA5MjAwMDA7CiAgICAgICAgc3RhcnRUaW1lID0gcHJlU3RhcnRUaW1lICsgUFJFX0RVUkFUSU9OOwogICAgICAgIGVuZFRpbWUgPSBzdGFydFRpbWUgKyBEVVJBVElPTjsKICAgICAgICB0YXJnZXRXYWxsZXQgPSBiZW5lZmljaWFyeVdhbGxldDsKICAgICAgICB0YXJnZXRXYWxsZXRWZXJpZmllZCA9IGZhbHNlOwogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQoKICAgIG1vZGlmaWVyIGF0U3RhZ2UoU3RhZ2VzIHN0YWdlKSB7CiAgICAgICAgcmVxdWlyZShzdGFnZSA9PSBnZXRDdXJyZW50U3RhZ2UoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgICBmdW5jdGlvbigpIHBheWFibGUgYXRTdGFnZShTdGFnZXMuUGF5YWJsZSkgewogICAgICAgIGJ1eVRva2VucygpOwogICAgfQoKICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIGJ1eVRva2VucygpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBjYWxjdWxhdGVUb2tlbnNBbW91bnQod2VpQW1vdW50KTsKICAgICAgICByZXF1aXJlKHRva2VucyA+IDApOwogICAgICAgIHJlcXVpcmUodG9rZW4uYmFsYW5jZU9mKHRoaXMpID49IHRva2Vucyk7CgogICAgICAgIGlmIChQYXlhYmxlU3RhZ2VzLlByZUljbyA9PSBnZXRQYXlhYmxlU3RhZ2UoKSkgewogICAgICAgICAgICByZXF1aXJlKHByZUljb01lbWJlcnNbbXNnLnNlbmRlcl0pOwogICAgICAgICAgICByZXF1aXJlKHdlaUFtb3VudC5hZGQoYmFsYW5jZU9mW21zZy5zZW5kZXJdKSA+PSBNSU5JTUFMX1BSRV9JQ09fSU5WRVNUTUVOVCk7CiAgICAgICAgICAgIHJlcXVpcmUodG9rZW5zU29sZC5hZGQodG9rZW5zKSA8PSBCT05VU19CQVRDSCk7CiAgICAgICAgfQoKICAgICAgICBhbW91bnRSYWlzZWQgPSBhbW91bnRSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdLmFkZCh3ZWlBbW91bnQpOwogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbnMpOwogICAgICAgIHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2Vucyk7CgogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgd2VpQW1vdW50LCB0b2tlbnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHZlcmlmeVRhcmdldFdhbGxldCgpIHB1YmxpYyBhdFN0YWdlKFN0YWdlcy5XYWxsZXRVbnZlcmlmaWVkKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHRhcmdldFdhbGxldCk7CiAgICAgICAgdGFyZ2V0V2FsbGV0VmVyaWZpZWQgPSB0cnVlOwogICAgfQoKICAgIC8vIGFkZCBhIGxpc3Qgb2Ygd2FsbGV0cyB0byBiZSBhbGxvd2VkIHRvIHRha2UgcGFydCBpbiBwcmUgaWNvCiAgICBmdW5jdGlvbiBhZGRQcmVJY29NZW1iZXJzKGFkZHJlc3NbXSBtZW1iZXJzKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtZW1iZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHByZUljb01lbWJlcnNbbWVtYmVyc1tpXV0gPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyByZW1vdmUgYSBsaXN0IG9mIHdhbGxldHMgdG8gYmUgYWxsb3dlZCB0byB0YWtlIHBhcnQgaW4gcHJlIGljbwogICAgZnVuY3Rpb24gcmVtb3ZlUHJlSWNvTWVtYmVycyhhZGRyZXNzW10gbWVtYmVycykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbWVtYmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBwcmVJY29NZW1iZXJzW21lbWJlcnNbaV1dID0gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgSUNPIGlzIGluIHByZSBJQ08gcGhhc2UKICAgIGZ1bmN0aW9uIGlzUHJlSWNvQWN0aXZlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIGlzUGF5YWJsZSA9IFN0YWdlcy5QYXlhYmxlID09IGdldEN1cnJlbnRTdGFnZSgpOwogICAgICAgIGJvb2wgaXNQcmVJY28gPSBQYXlhYmxlU3RhZ2VzLlByZUljbyA9PSBnZXRQYXlhYmxlU3RhZ2UoKTsKICAgICAgICByZXR1cm4gaXNQYXlhYmxlICYmIGlzUHJlSWNvOwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgcHVibGljIElDTyBpcyBpbiBwcm9ncmVzcwogICAgZnVuY3Rpb24gaXNQdWJsaWNJY29BY3RpdmUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgaXNQYXlhYmxlID0gU3RhZ2VzLlBheWFibGUgPT0gZ2V0Q3VycmVudFN0YWdlKCk7CiAgICAgICAgYm9vbCBpc1B1YmxpYyA9IFBheWFibGVTdGFnZXMuUHVibGljSWNvID09IGdldFBheWFibGVTdGFnZSgpOwogICAgICAgIHJldHVybiBpc1BheWFibGUgJiYgaXNQdWJsaWM7CiAgICB9CgogICAgLy8gQHJldHVybiB0cnVlIGlmIElDTyBoYXMgZW5kZWQKICAgIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gU3RhZ2VzLkFmdGVySWNvID09IGdldEN1cnJlbnRTdGFnZSgpOwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc29mdCBjYXAgaGFzIGJlZW4gcmVhY2hlZAogICAgZnVuY3Rpb24gc29mdENhcFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBhbW91bnRSYWlzZWQgPj0gU09GVF9DQVA7CiAgICB9CgogICAgLy8gd2l0aGRyYXcgdGhlIGNvbnRyaWJ1dGVkIGZ1bmRzIGlmIHRoZSBJQ08gaGFzCiAgICAvLyBlbmRlZCBhbmQgdGhlIGdvYWwgaGFzIG5vdCBiZWVuIHJlYWNoZWQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RnVuZHMoKSBwdWJsaWMgYXRTdGFnZShTdGFnZXMuQWZ0ZXJJY28pIHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUoIXNvZnRDYXBSZWFjaGVkKCkpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID4gMCk7CgogICAgICAgIHVpbnQyNTYgYmFsYW5jZSA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGJhbGFuY2UpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIHRyYW5zZmVyIHRoZSByYWlzZWQgZnVuZHMgdG8gdGhlIHRhcmdldCB3YWxsZXQgaWYKICAgIC8vIHRoZSBJQ08gaXMgb3ZlciBhbmQgdGhlIGdvYWwgaGFzIGJlZW4gcmVhY2hlZAogICAgZnVuY3Rpb24gZmluYWxpemVJY28oKSBwdWJsaWMgb25seU93bmVyIGF0U3RhZ2UoU3RhZ2VzLkFmdGVySWNvKSB7CiAgICAgICAgcmVxdWlyZShzb2Z0Q2FwUmVhY2hlZCgpKTsKICAgICAgICB0YXJnZXRXYWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Vuc29sZFRva2VucygpIHB1YmxpYyBvbmx5T3duZXIgYXRTdGFnZShTdGFnZXMuQWZ0ZXJJY28pIHsKICAgICAgICB0b2tlbi50cmFuc2Zlcih0YXJnZXRXYWxsZXQsIHRva2VuLmJhbGFuY2VPZih0aGlzKSk7CiAgICB9CgogICAgZnVuY3Rpb24gcGF1c2UoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzdW1lKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShwYXVzZWQpOwogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZVRhcmdldFdhbGxldChhZGRyZXNzIHdhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgdGFyZ2V0V2FsbGV0ID0gd2FsbGV0OwogICAgICAgIHRhcmdldFdhbGxldFZlcmlmaWVkID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zQW1vdW50KHVpbnQyNTYgZnVuZHMpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHRva2VucyA9IGZ1bmRzLmRpdihUT0tFTl9QUklDRSk7CiAgICAgICAgaWYgKHRva2Vuc1NvbGQgPCBCT05VU19CQVRDSCkgewogICAgICAgICAgICBpZiAodG9rZW5zU29sZC5hZGQodG9rZW5zKSA+IEJPTlVTX0JBVENIKSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IGJvbnVzQmFzZVRva2VucyA9IEJPTlVTX0JBVENILm11bCgxMDApLmRpdigxMjUpLnN1Yih0b2tlbnNTb2xkKTsKICAgICAgICAgICAgICAgIHRva2VucyA9IHRva2Vucy5hZGQoYm9udXNCYXNlVG9rZW5zLm11bChCT05VU19QRVJDRU5UQUdFKS5kaXYoMTAwKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMubXVsKEJPTlVTX1BFUkNFTlRBR0UgKyAxMDApLmRpdigxMDApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbnM7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YWdlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoU3RhZ2VzKSB7CiAgICAgICAgaWYgKCF0YXJnZXRXYWxsZXRWZXJpZmllZCkgewogICAgICAgICAgICByZXR1cm4gU3RhZ2VzLldhbGxldFVudmVyaWZpZWQ7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPCBwcmVTdGFydFRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YWdlcy5CZWZvcmVJY287CiAgICAgICAgfSBlbHNlIGlmIChub3cgPCBlbmRUaW1lICYmIGFtb3VudFJhaXNlZCA8IEhBUkRfQ0FQKSB7CiAgICAgICAgICAgIHJldHVybiBTdGFnZXMuUGF5YWJsZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gU3RhZ2VzLkFmdGVySWNvOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQYXlhYmxlU3RhZ2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChQYXlhYmxlU3RhZ2VzKSB7CiAgICAgICAgaWYgKG5vdyA8IHN0YXJ0VGltZSkgewogICAgICAgICAgICByZXR1cm4gUGF5YWJsZVN0YWdlcy5QcmVJY287CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIFBheWFibGVTdGFnZXMuUHVibGljSWNvOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
