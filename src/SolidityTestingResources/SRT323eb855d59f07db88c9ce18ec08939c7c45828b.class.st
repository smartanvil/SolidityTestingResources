Class {
	#name : #SRT323eb855d59f07db88c9ce18ec08939c7c45828b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT323eb855d59f07db88c9ce18ec08939c7c45828b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBFdGhlcmJvYXJkIHsKICAgIC8vIENvbnRyYWN0IG93bmVyCiAgICBhZGRyZXNzIG93bmVyOwogICAgLy8gQmlkIG11c3QgYmUgbXVsdGlwbGVzIG9mIG1pbkJpZAogICAgdWludDI1NiBwdWJsaWMgbWluQmlkOwogICAgLy8gTWF4IG51bSBvZiBsZWFkZXJzIG9uIHRoZSBib2FyZAogICAgdWludCBwdWJsaWMgbWF4TGVhZGVyczsKICAgIAogICAgLy8gTGlua2VkIGxpc3Qgb2YgbGVhZGVycyBvbiB0aGUgYm9hcmQKICAgIHVpbnQgcHVibGljIG51bUxlYWRlcnM7CiAgICBhZGRyZXNzIHB1YmxpYyBoZWFkOwogICAgYWRkcmVzcyBwdWJsaWMgdGFpbDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gTGVhZGVyKSBwdWJsaWMgbGVhZGVyczsKICAgIAogICAgc3RydWN0IExlYWRlciB7CiAgICAgICAgLy8gRGF0YQogICAgICAgIHVpbnQyNTYgYW1vdW50OwogICAgICAgIHN0cmluZyB1cmw7CiAgICAgICAgc3RyaW5nIGltZ191cmw7CiAgICAgICAgCiAgICAgICAgLy8gUG9pbnRlciB0byBuZXh0IGFuZCBwcmV2IGVsZW1lbnQgaW4gbGlua2VkIGxpc3QKICAgICAgICBhZGRyZXNzIG5leHQ7CiAgICAgICAgYWRkcmVzcyBwcmV2aW91czsKICAgIH0KICAgIAogICAgCiAgICAvLyBTZXQgaW5pdGlhbCBwYXJhbWV0ZXJzCiAgICBmdW5jdGlvbiBFdGhlcmJvYXJkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBtaW5CaWQgPSAwLjAwMSBldGhlcjsKICAgICAgICBudW1MZWFkZXJzID0gMDsKICAgICAgICBtYXhMZWFkZXJzID0gMTA7CiAgICB9CiAgICAKICAgIAogICAgLyoKICAgICAgICBEZWZhdWx0IGZ1bmN0aW9uLCBtYWtlIGEgbmV3IGJpZCBvciBhZGQgdG8gYmlkIGJ5IHNlbmRpbmcgRXRoIHRvIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgLy8gQmlkIG11c3QgYmUgbGFyZ2VyIHRoYW4gbWluQmlkCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gbWluQmlkKTsKICAgICAgICAKICAgICAgICAvLyBCaWQgbXVzdCBiZSBtdWx0aXBsZSBvZiBtaW5CaWQuIFJlbWFpbmRlciBpcyBzZW50IGJhY2suCiAgICAgICAgdWludDI1NiByZW1haW5kZXIgID0gbXNnLnZhbHVlICUgbWluQmlkOwogICAgICAgIHVpbnQyNTYgYmlkX2Ftb3VudCA9IG1zZy52YWx1ZSAtIHJlbWFpbmRlcjsKICAgICAgICAKICAgICAgICAvLyBJZiBsZWFkZXJib2FyZCBpcyBmdWxsLCBiaWQgbmVlZHMgdG8gYmUgbGFyZ2VyIHRoYW4gdGhlIGxvd2VzdCBwbGFjZWQgbGVhZGVyCiAgICAgICAgcmVxdWlyZSghKChudW1MZWFkZXJzID09IG1heExlYWRlcnMpICYmIChiaWRfYW1vdW50IDw9IGxlYWRlcnNbdGFpbF0uYW1vdW50KSkpOwogICAgICAgIAogICAgICAgIC8vIEdldCBsZWFkZXIKICAgICAgICBMZWFkZXIgbWVtb3J5IGxlYWRlciA9IHBvcExlYWRlcihtc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICAvLyBBZGQgdG8gbGVhZGVyJ3MgYmlkCiAgICAgICAgbGVhZGVyLmFtb3VudCArPSBiaWRfYW1vdW50OwogICAgICAgIAogICAgICAgIC8vIEluc2VydCBsZWFkZXIgaW4gYXBwcm9wcmlhdGUgcG9zaXRpb24KICAgICAgICBpbnNlcnRMZWFkZXIobGVhZGVyKTsKICAgICAgICAKICAgICAgICAvLyBJZiBsZWFkZXJib2FyZCBpcyBmdWxsLCBkcm9wIGxhc3QgbGVhZGVyCiAgICAgICAgaWYgKG51bUxlYWRlcnMgPiBtYXhMZWFkZXJzKSB7CiAgICAgICAgICAgIGRyb3BMYXN0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFJldHVybiByZW1haW5kZXIgdG8gc2VuZGVyCiAgICAgICAgaWYgKHJlbWFpbmRlciA+IDApIG1zZy5zZW5kZXIudHJhbnNmZXIocmVtYWluZGVyKTsKICAgIH0KICAgIAogICAgCiAgICAvKgogICAgICAgIFNldCB0aGUgdXJscyBmb3IgdGhlIGxpbmsgYW5kIGltYWdlCiAgICAqLwogICAgZnVuY3Rpb24gc2V0VXJscyhzdHJpbmcgdXJsLCBzdHJpbmcgaW1nX3VybCkgewogICAgICAgIHZhciBsZWFkZXIgPSBsZWFkZXJzW21zZy5zZW5kZXJdOwogICAgICAgIAogICAgICAgIHJlcXVpcmUobGVhZGVyLmFtb3VudCA+IDApOwogICAgICAgIAogICAgICAgIC8vIFNldCBsZWFkZXIncyB1cmwgaWYgaXQgaXMgbm90IGFuIGVtcHR5IHN0cmluZwogICAgICAgIGJ5dGVzIG1lbW9yeSB0bXBfdXJsID0gYnl0ZXModXJsKTsKICAgICAgICBpZiAodG1wX3VybC5sZW5ndGggIT0gMCkgewogICAgICAgICAgICAvLyBTZXQgdXJsCiAgICAgICAgICAgIGxlYWRlci51cmwgPSB1cmw7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFNldCBsZWFkZXIncyBpbWdfdXJsIGlmIGl0IGlzIG5vdCBhbiBlbXB0eSBzdHJpbmcKICAgICAgICBieXRlcyBtZW1vcnkgdG1wX2ltZ191cmwgPSBieXRlcyhpbWdfdXJsKTsKICAgICAgICBpZiAodG1wX2ltZ191cmwubGVuZ3RoICE9IDApIHsKICAgICAgICAgICAgLy8gU2V0IGltYWdlIHVybAogICAgICAgICAgICBsZWFkZXIuaW1nX3VybCA9IGltZ191cmw7CiAgICAgICAgfQogICAgfQogICAgCiAgICAKICAgIC8qCiAgICAgICAgQWxsb3cgdXNlciB0byByZXNldCB1cmxzIGlmIGhlIHdhbnRzIG5vdGhpbmcgdG8gc2hvdyBvbiB0aGUgYm9hcmQKICAgICovCiAgICBmdW5jdGlvbiByZXNldFVybHMoYm9vbCB1cmwsIGJvb2wgaW1nX3VybCkgewogICAgICAgIHZhciBsZWFkZXIgPSBsZWFkZXJzW21zZy5zZW5kZXJdOwogICAgICAgIAogICAgICAgIHJlcXVpcmUobGVhZGVyLmFtb3VudCA+IDApOwogICAgICAgIAogICAgICAgIC8vIFJlc2V0IHVybHMKICAgICAgICBpZiAodXJsKSBsZWFkZXIudXJsID0gIiI7CiAgICAgICAgaWYgKGltZ191cmwpIGxlYWRlci5pbWdfdXJsID0gIiI7CiAgICB9CiAgICAKICAgIAogICAgLyoKICAgICAgICBHZXQgYSBsZWFkZXIgYXQgcG9zaXRpb24KICAgICovCiAgICBmdW5jdGlvbiBnZXRMZWFkZXIoYWRkcmVzcyBrZXkpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYW1vdW50LCBzdHJpbmcgdXJsLCBzdHJpbmcgaW1nX3VybCwgYWRkcmVzcyBuZXh0KSB7CiAgICAgICAgYW1vdW50ICA9IGxlYWRlcnNba2V5XS5hbW91bnQ7CiAgICAgICAgdXJsICAgICA9IGxlYWRlcnNba2V5XS51cmw7CiAgICAgICAgaW1nX3VybCA9IGxlYWRlcnNba2V5XS5pbWdfdXJsOwogICAgICAgIG5leHQgICAgPSBsZWFkZXJzW2tleV0ubmV4dDsKICAgIH0KICAgIAogICAgCiAgICAvKgogICAgICAgIFJlbW92ZSBmcm9tIGxlYWRlcmJvYXJkIExMCiAgICAqLwogICAgZnVuY3Rpb24gcG9wTGVhZGVyKGFkZHJlc3Mga2V5KSBpbnRlcm5hbCByZXR1cm5zIChMZWFkZXIgbGVhZGVyKSB7CiAgICAgICAgbGVhZGVyID0gbGVhZGVyc1trZXldOwogICAgICAgIAogICAgICAgIC8vIElmIG5vIGxlYWRlciAtIHJldHVybgogICAgICAgIGlmIChsZWFkZXIuYW1vdW50ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGxlYWRlcjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKG51bUxlYWRlcnMgPT0gMSkgewogICAgICAgICAgICB0YWlsID0gMHgwOwogICAgICAgICAgICBoZWFkID0gMHgwOwogICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGhlYWQpIHsKICAgICAgICAgICAgaGVhZCA9IGxlYWRlci5uZXh0OwogICAgICAgICAgICBsZWFkZXJzW2hlYWRdLnByZXZpb3VzID0gMHgwOwogICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IHRhaWwpIHsKICAgICAgICAgICAgdGFpbCA9IGxlYWRlci5wcmV2aW91czsKICAgICAgICAgICAgbGVhZGVyc1t0YWlsXS5uZXh0ID0gMHgwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxlYWRlcnNbbGVhZGVyLnByZXZpb3VzXS5uZXh0ID0gbGVhZGVyLm5leHQ7CiAgICAgICAgICAgIGxlYWRlcnNbbGVhZGVyLm5leHRdLnByZXZpb3VzID0gbGVhZGVyLnByZXZpb3VzOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBudW1MZWFkZXJzLS07CiAgICAgICAgcmV0dXJuIGxlYWRlcjsKICAgIH0KICAgIAogICAgCiAgICAvKgogICAgICAgIEluc2VydCBpbiBsZWFkZXJib2FyZCBMaW5rZWRMaXN0CiAgICAqLwogICAgZnVuY3Rpb24gaW5zZXJ0TGVhZGVyKExlYWRlciBsZWFkZXIpIGludGVybmFsIHsKICAgICAgICBpZiAobnVtTGVhZGVycyA9PSAwKSB7CiAgICAgICAgICAgIGhlYWQgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICB0YWlsID0gbXNnLnNlbmRlcjsKICAgICAgICB9IGVsc2UgaWYgKGxlYWRlci5hbW91bnQgPD0gbGVhZGVyc1t0YWlsXS5hbW91bnQpIHsKICAgICAgICAgICAgbGVhZGVyc1t0YWlsXS5uZXh0ID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgdGFpbCA9IG1zZy5zZW5kZXI7CiAgICAgICAgfSBlbHNlIGlmIChsZWFkZXIuYW1vdW50ID4gbGVhZGVyc1toZWFkXS5hbW91bnQpIHsKICAgICAgICAgICAgbGVhZGVyLm5leHQgPSBoZWFkOwogICAgICAgICAgICBsZWFkZXJzW2hlYWRdLnByZXZpb3VzID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgaGVhZCA9IG1zZy5zZW5kZXI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnRfYWRkciA9IGhlYWQ7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gbGVhZGVyc1tjdXJyZW50X2FkZHJdOwogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQuYW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgaWYgKGxlYWRlci5hbW91bnQgPiBjdXJyZW50LmFtb3VudCkgewogICAgICAgICAgICAgICAgICAgIGxlYWRlci5uZXh0ID0gY3VycmVudF9hZGRyOwogICAgICAgICAgICAgICAgICAgIGxlYWRlci5wcmV2aW91cyA9IGN1cnJlbnQucHJldmlvdXM7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wcmV2aW91cyA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgICAgICAgICAgbGVhZGVyc1tjdXJyZW50LnByZXZpb3VzXS5uZXh0ID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY3VycmVudF9hZGRyID0gY3VycmVudC5uZXh0OwogICAgICAgICAgICAgICAgY3VycmVudCA9IGxlYWRlcnNbY3VycmVudF9hZGRyXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBsZWFkZXJzW21zZy5zZW5kZXJdID0gbGVhZGVyOwogICAgICAgIG51bUxlYWRlcnMrKzsKICAgIH0KICAgIAogICAgCiAgICAvKgogICAgICAgIERyb3AgbGFzdCBsZWFkZXIgZnJvbSBib2FyZCBhbmQgcmV0dXJuIGhpcy9oZXIgZnVuZHMKICAgICovCiAgICBmdW5jdGlvbiBkcm9wTGFzdCgpIGludGVybmFsIHsKICAgICAgICAvLyBHZXQgbGFzdCBsZWFkZXIKICAgICAgICBhZGRyZXNzIGxlYWRlcl9hZGRyID0gdGFpbDsKICAgICAgICB2YXIgbGVhZGVyID0gcG9wTGVhZGVyKGxlYWRlcl9hZGRyKTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHJlZnVuZF9hbW91bnQgPSBsZWFkZXIuYW1vdW50OwogICAgICAgIAogICAgICAgIC8vIERlbGV0ZSBsZWFkZXIgZnJvbSBib2FyZAogICAgICAgIGRlbGV0ZSBsZWFkZXI7CiAgICAgICAgCiAgICAgICAgLy8gUmV0dXJuIGZ1bmRzIHRvIGxlYWRlcgogICAgICAgIGxlYWRlcl9hZGRyLnRyYW5zZmVyKHJlZnVuZF9hbW91bnQpOwogICAgfQoKICAgIAogICAgLyoKICAgICAgICBNb2RpZmllciB0aGF0IG9ubHkgYWxsb3dzIHRoZSBvd25lciB0byBjYWxsIGNlcnRhaW4gZnVuY3Rpb25zCiAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qCiAgICAgICAgTGV0cyBvd25lciB3aXRoZHJhdyBFdGggZnJvbSB0aGUgY29udHJhY3QuIE93bmVyIGNhbiB3aXRoZHJhdyBhbGwgZnVuZHMsCiAgICAgICAgYmVjYXVzZSBsZWFkZXJzIHdobyBmYWxsIG9mIHRoZSBib2FyZCBjYW4gYWx3YXlzIGJlIHJlZnVuZGVkIHdpdGggdGhlIG5ldwogICAgICAgIGJpZDogKG5ld0JpZCA+IHJlZnVuZCkuCiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIAogICAgLyoKICAgICAgICBTZXQgbmV3IG1heGltdW0gZm9yIGFtb3VudCBvZiBsZWFkZXJzCiAgICAqLwogICAgZnVuY3Rpb24gc2V0TWF4TGVhZGVycyh1aW50IG5ld01heCkgb25seU93bmVyIHsKICAgICAgICBtYXhMZWFkZXJzID0gbmV3TWF4OwogICAgfQp9'.
	

]
