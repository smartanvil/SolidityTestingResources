Class {
	#name : #SRTf8cadbcadbeac3b5192ba29df5007746054102a4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8cadbcadbeac3b5192ba29df5007746054102a4 >> base64 [
	^ ''.
	

]
