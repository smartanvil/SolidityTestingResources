Class {
	#name : #SRTa971afdca01bd1ca1499346e730a3d1dc06a3a9d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa971afdca01bd1ca1499346e730a3d1dc06a3a9d >> base64 [
	^ ''.
	

]
