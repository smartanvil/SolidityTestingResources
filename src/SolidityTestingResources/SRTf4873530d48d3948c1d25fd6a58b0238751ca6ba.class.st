Class {
	#name : #SRTf4873530d48d3948c1d25fd6a58b0238751ca6ba,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4873530d48d3948c1d25fd6a58b0238751ca6ba >> base64 [
	^ ''.
	

]
