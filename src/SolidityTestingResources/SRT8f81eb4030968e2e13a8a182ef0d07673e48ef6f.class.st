Class {
	#name : #SRT8f81eb4030968e2e13a8a182ef0d07673e48ef6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8f81eb4030968e2e13a8a182ef0d07673e48ef6f >> base64 [
	^ ''.
	

]
