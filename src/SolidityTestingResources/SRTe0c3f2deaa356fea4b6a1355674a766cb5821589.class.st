Class {
	#name : #SRTe0c3f2deaa356fea4b6a1355674a766cb5821589,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe0c3f2deaa356fea4b6a1355674a766cb5821589 >> base64 [
	^ 'Ly8gY29tcGlsZXI6IDAuNC4yMStjb21taXQuZGZlMzE5M2MuRW1zY3JpcHRlbi5jbGFuZwpwcmFnbWEgc29saWRpdHkgXjAuNC4yMTsKCi8vIEV0aGVyZXVtIFRva2VuIGNhbGxiYWNrCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7CiAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKCBhZGRyZXNzIGZyb20sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEgKSBleHRlcm5hbDsKfQoKLy8gRVJDMjIzIGNhbGxiYWNrCmludGVyZmFjZSBDb250cmFjdFJlY2VpdmVyIHsKICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKCBhZGRyZXNzIGZyb20sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBleHRlcm5hbDsKfQoKY29udHJhY3Qgb3duZWQgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBmdW5jdGlvbiBjaGFuZ2VPd25lciggYWRkcmVzcyBfbWluZXIgKSBwdWJsaWMgb25seU93bmVyIHsKICAgIG93bmVyID0gX21pbmVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9Cn0KCi8vIEVSQzIwIHRva2VuIHdpdGggYWRkZWQgRVJDMjIzIGFuZCBFdGhlcmV1bS1Ub2tlbiBzdXBwb3J0Ci8vCi8vIEJsZW5kIG9mIG11bHRpcGxlIGludGVyZmFjZXM6Ci8vIC0gaHR0cHM6Ly90aGVldGhlcmV1bS53aWtpL3cvaW5kZXgucGhwL0VSQzIwX1Rva2VuX1N0YW5kYXJkCi8vIC0gaHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL3Rva2VuICh1bmNvbnRyb2xsZWQsIG5vbi1zdGFuZGFyZCkKLy8gLSBodHRwczovL2dpdGh1Yi5jb20vRGV4YXJhbi9FUkMyMy10b2tlbnMvYmxvYi9SZWNvbW1lbmRlZC9FUkMyMjNfVG9rZW4uc29sCgpjb250cmFjdCBNaW5lYWJsZVRva2VuIGlzIG93bmVkIHsKCiAgc3RyaW5nICBwdWJsaWMgbmFtZTsKICBzdHJpbmcgIHB1YmxpYyBzeW1ib2w7CiAgdWludDggICBwdWJsaWMgZGVjaW1hbHM7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogIHVpbnQyNTYgcHVibGljIHN1cHBseUNhcDsKCiAgbWFwcGluZyggYWRkcmVzcyA9PiB1aW50MjU2ICkgYmFsYW5jZXNfOwoKICBtYXBwaW5nKCBhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSApIGFsbG93YW5jZXNfOwoKICAvLyBFUkMyMAogIGV2ZW50IEFwcHJvdmFsKCBhZGRyZXNzIGluZGV4ZWQgb3duZXIsCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLAogICAgICAgICAgICAgICAgICB1aW50IHZhbHVlICk7CgogIC8vIEVSQzIwLWNvbXBhdGlibGUgdmVyc2lvbiBvbmx5LCBicmVha3MgRVJDMjIzIGNvbXBsaWFuY2UgYnV0IGV0aGVyc2NhbgogIC8vIGFuZCBleGNoYW5nZXMgb25seSBzdXBwb3J0IEVSQzIwIHZlcnNpb24uIENhbid0IG92ZXJsb2FkIGV2ZW50cwoKICBldmVudCBUcmFuc2ZlciggYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB0bywKICAgICAgICAgICAgICAgICAgdWludDI1NiB2YWx1ZSApOwogICAgICAgICAgICAgICAgICAvL2J5dGVzICAgIGRhdGEgKTsKCiAgLy8gRXRoZXJldW0gVG9rZW4KICBldmVudCBCdXJuKCBhZGRyZXNzIGluZGV4ZWQgZnJvbSwKICAgICAgICAgICAgICB1aW50MjU2IHZhbHVlICk7CgogIGZ1bmN0aW9uIE1pbmVhYmxlVG9rZW4oKSBwdWJsaWMgewoKICAgIGRlY2ltYWxzID0gdWludDgoMTgpOyAvLyBhdWRpdCByZWNvbW1lbmRlZCAxOCBkZWNpbWFscwogICAgc3VwcGx5Q2FwID0gODMzMzMzMzMzICogMTAqKnVpbnQyNTYoZGVjaW1hbHMpOwoKICAgIG5hbWUgPSAiT1JTVCI7CiAgICBzeW1ib2wgPSAiT1JTIjsKICB9CgogIGZ1bmN0aW9uIG1pbmUoIHVpbnQyNTYgcXR5ICkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlICggICAgKHRvdGFsU3VwcGx5ICsgcXR5KSA+IHRvdGFsU3VwcGx5CiAgICAgICAgICAgICAgJiYgKHRvdGFsU3VwcGx5ICsgcXR5KSA8PSBzdXBwbHlDYXAKICAgICAgICAgICAgKTsKCiAgICB0b3RhbFN1cHBseSArPSBxdHk7CiAgICBiYWxhbmNlc19bb3duZXJdICs9IHF0eTsKICAgIGVtaXQgVHJhbnNmZXIoIGFkZHJlc3MoMCksIG93bmVyLCBxdHkgKTsKICB9CgogIGZ1bmN0aW9uIGNhcCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKICAgIHJldHVybiBzdXBwbHlDYXA7CiAgfQoKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyBvd25lciApIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gYmFsYW5jZXNfW293bmVyXTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gYXBwcm92ZSggYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlICkgcHVibGljCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIC8vIFdBUk5JTkchIFdoZW4gY2hhbmdpbmcgdGhlIGFwcHJvdmFsIGFtb3VudCwgZmlyc3Qgc2V0IGl0IGJhY2sgdG8gemVybwogICAgLy8gQU5EIHdhaXQgdW50aWwgdGhlIHRyYW5zYWN0aW9uIGlzIG1pbmVkLiBPbmx5IGFmdGVyd2FyZHMgc2V0IHRoZSBuZXcKICAgIC8vIGFtb3VudC4gT3RoZXJ3aXNlIHlvdSBtYXkgYmUgcHJvbmUgdG8gYSByYWNlIGNvbmRpdGlvbiBhdHRhY2suCiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CgogICAgYWxsb3dhbmNlc19bbXNnLnNlbmRlcl1bc3BlbmRlcl0gPSB2YWx1ZTsKICAgIGVtaXQgQXBwcm92YWwoIG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAKICAvLyByZWNvbW1lbmRlZCBmaXggZm9yIGtub3duIGF0dGFjayBvbiBhbnkgRVJDMjAKICBmdW5jdGlvbiBzYWZlQXBwcm92ZSggYWRkcmVzcyBfc3BlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfY3VycmVudFZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF92YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICAvLyBJZiBjdXJyZW50IGFsbG93YW5jZSBmb3IgX3NwZW5kZXIgaXMgZXF1YWwgdG8gX2N1cnJlbnRWYWx1ZSwgdGhlbgogICAgLy8gb3ZlcndyaXRlIGl0IHdpdGggX3ZhbHVlIGFuZCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS4KCiAgICBpZiAoYWxsb3dhbmNlc19bbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IF9jdXJyZW50VmFsdWUpCiAgICAgIHJldHVybiBhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgIHJldHVybiBmYWxzZTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gYWxsb3dhbmNlKCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIgKSBwdWJsaWMgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykKICB7CiAgICByZXR1cm4gYWxsb3dhbmNlc19bb3duZXJdW3NwZW5kZXJdOwogIH0KCiAgLy8gRVJDMjAKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMKICB7CiAgICBieXRlcyBtZW1vcnkgZW1wdHk7IC8vIG51bGwKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBlbXB0eSApOwogIH0KCiAgLy8gRVJDMjAKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCB2YWx1ZSA8PSBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSApOwoKICAgIGFsbG93YW5jZXNfW2Zyb21dW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgX3RyYW5zZmVyKCBmcm9tLCB0bywgdmFsdWUsIGVtcHR5ICk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKCBhZGRyZXNzIHNwZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGNvbnRleHQgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgaWYgKCBhcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSApCiAgICB7CiAgICAgIHRva2VuUmVjaXBpZW50IHJlY2lwID0gdG9rZW5SZWNpcGllbnQoIHNwZW5kZXIgKTsKCiAgICAgIGlmIChpc0NvbnRyYWN0KHJlY2lwKSkKICAgICAgICByZWNpcC5yZWNlaXZlQXBwcm92YWwoIG1zZy5zZW5kZXIsIHZhbHVlLCBjb250ZXh0ICk7CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gZmFsc2U7CiAgfSAgICAgICAgCgogIC8vIEV0aGVyZXVtIFRva2VuCiAgZnVuY3Rpb24gYnVybiggdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bbXNnLnNlbmRlcl0gPj0gdmFsdWUgKTsKICAgIGJhbGFuY2VzX1ttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIHRvdGFsU3VwcGx5IC09IHZhbHVlOwoKICAgIGVtaXQgQnVybiggbXNnLnNlbmRlciwgdmFsdWUgKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRXRoZXJldW0gVG9rZW4KICBmdW5jdGlvbiBidXJuRnJvbSggYWRkcmVzcyBmcm9tLCB1aW50MjU2IHZhbHVlICkgcHVibGljCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIHJlcXVpcmUoIGJhbGFuY2VzX1tmcm9tXSA+PSB2YWx1ZSApOwogICAgcmVxdWlyZSggdmFsdWUgPD0gYWxsb3dhbmNlc19bZnJvbV1bbXNnLnNlbmRlcl0gKTsKCiAgICBiYWxhbmNlc19bZnJvbV0gLT0gdmFsdWU7CiAgICBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSAtPSB2YWx1ZTsKICAgIHRvdGFsU3VwcGx5IC09IHZhbHVlOwoKICAgIGVtaXQgQnVybiggZnJvbSwgdmFsdWUgKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIGFuZCBpbnZva2Ugc3BlY2lmaWVkIGNhbGxiYWNrCiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sCiAgICAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBjdXN0b21fZmFsbGJhY2sgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgLy8gdGhyb3dzIGlmIGN1c3RvbV9mYWxsYmFjayBpcyBub3QgYSB2YWxpZCBjb250cmFjdCBjYWxsCiAgICByZXF1aXJlKCBhZGRyZXNzKHRvKS5jYWxsLnZhbHVlKDApKGJ5dGVzNChrZWNjYWsyNTYoY3VzdG9tX2ZhbGxiYWNrKSksCiAgICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgICBkYXRhKSApOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIHRvIGEgY29udHJhY3Qgb3IgZXh0ZXJuYWxseS1vd25lZCBhY2NvdW50CiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgaWYgKGlzQ29udHJhY3QodG8pKSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQ29udHJhY3QoIHRvLCB2YWx1ZSwgZGF0YSApOwogICAgfQoKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBUcmFuc2ZlciB0byBjb250cmFjdCBhbmQgaW52b2tlIHRva2VuRmFsbGJhY2soKSBtZXRob2QKICBmdW5jdGlvbiB0cmFuc2ZlclRvQ29udHJhY3QoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwcml2YXRlCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgQ29udHJhY3RSZWNlaXZlciByeCA9IENvbnRyYWN0UmVjZWl2ZXIodG8pOwoKICAgIGlmIChpc0NvbnRyYWN0KHJ4KSkgewogICAgICByeC50b2tlbkZhbGxiYWNrKCBtc2cuc2VuZGVyLCB2YWx1ZSwgZGF0YSApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBFUkMyMjMgZmV0Y2ggY29udHJhY3Qgc2l6ZSAobXVzdCBiZSBub256ZXJvIHRvIGJlIGEgY29udHJhY3QpCiAgZnVuY3Rpb24gaXNDb250cmFjdCggYWRkcmVzcyBfYWRkciApIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkKICB7CiAgICB1aW50IGxlbmd0aDsKICAgIGFzc2VtYmx5IHsgbGVuZ3RoIDo9IGV4dGNvZGVzaXplKF9hZGRyKSB9CiAgICByZXR1cm4gKGxlbmd0aCA+IDApOwogIH0KCiAgZnVuY3Rpb24gX3RyYW5zZmVyKCBhZGRyZXNzIGZyb20sCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIHRvLAogICAgICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGRhdGEgKSBpbnRlcm5hbAogIHsKICAgIHJlcXVpcmUoIHRvICE9IDB4MCApOwogICAgcmVxdWlyZSggYmFsYW5jZXNfW2Zyb21dID49IHZhbHVlICk7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bdG9dICsgdmFsdWUgPiBiYWxhbmNlc19bdG9dICk7IC8vIGNhdGNoIG92ZXJmbG93CgogICAgLy8gbm8gdHJhbnNmZXJzIGFsbG93ZWQgYmVmb3JlIElDTyBlbmRzIDI2TUFZMjAxOCAwOTAwIENFVAogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHJlcXVpcmUoIG5vdyA+PSAxNTI3MzIxNjAwICk7CgogICAgYmFsYW5jZXNfW2Zyb21dIC09IHZhbHVlOwogICAgYmFsYW5jZXNfW3RvXSArPSB2YWx1ZTsKCiAgICBieXRlcyBtZW1vcnkgaWdub3JlOwogICAgaWdub3JlID0gZGF0YTsgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBjb21waWxlciB3YXJuaW5nCiAgICBlbWl0IFRyYW5zZmVyKCBmcm9tLCB0bywgdmFsdWUgKTsgLy8gaWdub3JlIGRhdGEKICB9Cn0='.
	

]
