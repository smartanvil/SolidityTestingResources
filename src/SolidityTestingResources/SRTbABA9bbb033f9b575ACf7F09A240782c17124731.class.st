Class {
	#name : #SRTbABA9bbb033f9b575ACf7F09A240782c17124731,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbABA9bbb033f9b575ACf7F09A240782c17124731 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBQcm92ZXIgewogICAgLy8gYXR0YWNoIGxpYnJhcnkKICAgIHVzaW5nIFNldHMgZm9yIFNldHMuYWRkcmVzc1NldDsKICAgIHVzaW5nIFNldHMgZm9yIFNldHMuYnl0ZXMzMlNldDsKCiAgICAvLyBzdG9yYWdlIHZhcnMKICAgIGFkZHJlc3Mgb3duZXI7CiAgICBTZXRzLmFkZHJlc3NTZXQgdXNlcnM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gQWNjb3VudCkgaW50ZXJuYWwgYWNjb3VudHM7CgogICAgLy8gc3RydWN0cwogICAgc3RydWN0IEFjY291bnQgewogICAgICAgIFNldHMuYnl0ZXMzMlNldCBlbnRyaWVzOwogICAgICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBFbnRyeSkgdmFsdWVzOwogICAgfQoKICAgIHN0cnVjdCBFbnRyeSB7CiAgICAgICAgdWludCB0aW1lOwogICAgICAgIHVpbnQgc3Rha2VkOwogICAgfQoKCiAgICAvLyBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gUHJvdmVyKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgCiAgICAvLyBmYWxsYmFjazogdW5tYXRjaGVkIHRyYW5zYWN0aW9ucyB3aWxsIGJlIHJldHVybmVkCiAgICBmdW5jdGlvbigpIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCgogICAgLy8gbW9kaWZpZXIgdG8gY2hlY2sgaWYgYSB0YXJnZXQgYWRkcmVzcyBoYXMgYSBwYXJ0aWN1bGFyIGVudHJ5CiAgICBtb2RpZmllciBlbnRyeUV4aXN0cyhhZGRyZXNzIHRhcmdldCwgYnl0ZXMzMiBkYXRhSGFzaCwgYm9vbCBleGlzdHMpIHsKICAgICAgICBhc3NlcnQoYWNjb3VudHNbdGFyZ2V0XS5lbnRyaWVzLmNvbnRhaW5zKGRhdGFIYXNoKSA9PSBleGlzdHMpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vIGV4dGVybmFsIGZ1bmN0aW9ucwogICAgLy8gYWxsb3cgYWNjZXNzIHRvIG91ciBzdHJ1Y3RzIHZpYSBmdW5jdGlvbnMgd2l0aCBjb252ZW5pZW50IHJldHVybiB2YWx1ZXMKICAgIGZ1bmN0aW9uIHJlZ2lzdGVyZWRVc2VycygpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQgbnVtYmVyX3VuaXF1ZV9hZGRyZXNzZXMsIGFkZHJlc3NbXSB1bmlxdWVfYWRkcmVzc2VzKQogICAgewogICAgICAgIHJldHVybiAodXNlcnMubGVuZ3RoKCksIHVzZXJzLm1lbWJlcnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVzZXJFbnRyaWVzKGFkZHJlc3MgdGFyZ2V0KSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChieXRlczMyW10pIHsKICAgICAgICByZXR1cm4gYWNjb3VudHNbdGFyZ2V0XS5lbnRyaWVzLm1lbWJlcnM7CiAgICB9CiAgICAvLyBwcm92aW5nCiAgICBmdW5jdGlvbiBwcm92ZUl0KGFkZHJlc3MgdGFyZ2V0LCBieXRlczMyIGRhdGFIYXNoKSBleHRlcm5hbCBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wgcHJvdmVkLCB1aW50IHRpbWUsIHVpbnQgc3Rha2VkKQogICAgewogICAgICAgIHJldHVybiBzdGF0dXModGFyZ2V0LCBkYXRhSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gcHJvdmVJdChhZGRyZXNzIHRhcmdldCwgc3RyaW5nIGRhdGFTdHJpbmcpIGV4dGVybmFsIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCBwcm92ZWQsIHVpbnQgdGltZSwgdWludCBzdGFrZWQpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXR1cyh0YXJnZXQsIHNoYTMoZGF0YVN0cmluZykpOwogICAgfQoKICAgIAogICAgLy8gcHVibGljIGZ1bmN0aW9ucwogICAgLy8gYWRkaW5nIGVudHJpZXMKICAgIGZ1bmN0aW9uIGFkZEVudHJ5KGJ5dGVzMzIgZGF0YUhhc2gpIHBheWFibGUgewogICAgICAgIF9hZGRFbnRyeShkYXRhSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkRW50cnkoc3RyaW5nIGRhdGFTdHJpbmcpIHBheWFibGUKICAgIHsKICAgICAgICBfYWRkRW50cnkoc2hhMyhkYXRhU3RyaW5nKSk7CiAgICB9CgogICAgLy8gZGVsZXRpbmcgZW50cmllcwogICAgZnVuY3Rpb24gZGVsZXRlRW50cnkoYnl0ZXMzMiBkYXRhSGFzaCkgewogICAgICAgIF9kZWxldGVFbnRyeShkYXRhSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gZGVsZXRlRW50cnkoc3RyaW5nIGRhdGFTdHJpbmcpIHsKICAgICAgICBfZGVsZXRlRW50cnkoc2hhMyhkYXRhU3RyaW5nKSk7CiAgICB9CiAgICAKICAgIC8vIGFsbG93IG93bmVyIHRvIGRlbGV0ZSBjb250cmFjdCBpZiBubyBhY2NvdW50cyBleGlzdAogICAgZnVuY3Rpb24gc2VsZkRlc3RydWN0KCkgewogICAgICAgIGlmICgobXNnLnNlbmRlciA9PSBvd25lcikgJiYgKHVzZXJzLmxlbmd0aCgpID09IDApKSB7CiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICAgICAgfQogICAgfQoKCiAgICAvLyBpbnRlcm5hbCBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIF9hZGRFbnRyeShieXRlczMyIGRhdGFIYXNoKQogICAgICAgIGVudHJ5RXhpc3RzKG1zZy5zZW5kZXIsIGRhdGFIYXNoLCBmYWxzZSkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIHVzZXJzLmluc2VydChtc2cuc2VuZGVyKTsKICAgICAgICBhY2NvdW50c1ttc2cuc2VuZGVyXS5lbnRyaWVzLmluc2VydChkYXRhSGFzaCk7CiAgICAgICAgYWNjb3VudHNbbXNnLnNlbmRlcl0udmFsdWVzW2RhdGFIYXNoXSA9IEVudHJ5KG5vdywgbXNnLnZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfZGVsZXRlRW50cnkoYnl0ZXMzMiBkYXRhSGFzaCkKICAgICAgICBlbnRyeUV4aXN0cyhtc2cuc2VuZGVyLCBkYXRhSGFzaCwgdHJ1ZSkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIHVpbnQgcmViYXRlID0gYWNjb3VudHNbbXNnLnNlbmRlcl0udmFsdWVzW2RhdGFIYXNoXS5zdGFrZWQ7CiAgICAgICAgLy8gdXBkYXRlIHVzZXIgYWNjb3VudAogICAgICAgIGRlbGV0ZSBhY2NvdW50c1ttc2cuc2VuZGVyXS52YWx1ZXNbZGF0YUhhc2hdOwogICAgICAgIGFjY291bnRzW21zZy5zZW5kZXJdLmVudHJpZXMucmVtb3ZlKGRhdGFIYXNoKTsKICAgICAgICAvLyBkZWxldGUgZnJvbSB1c2VycyBpZiB0aGlzIHdhcyB0aGUgdXNlcidzIGxhc3QgZW50cnkKICAgICAgICBpZiAoYWNjb3VudHNbbXNnLnNlbmRlcl0uZW50cmllcy5sZW5ndGgoKSA9PSAwKSB7CiAgICAgICAgICAgIHVzZXJzLnJlbW92ZShtc2cuc2VuZGVyKTsKICAgICAgICB9CiAgICAgICAgLy8gc2VuZCB0aGUgcmViYXRlCiAgICAgICAgaWYgKHJlYmF0ZSA+IDApIG1zZy5zZW5kZXIudHJhbnNmZXIocmViYXRlKTsKICAgIH0KCiAgICAvLyByZXR1cm4gc3RhdHVzIG9mIGFyYml0cmFyeSBhZGRyZXNzIGFuZCBkYXRhSGFzaAogICAgZnVuY3Rpb24gc3RhdHVzKGFkZHJlc3MgdGFyZ2V0LCBieXRlczMyIGRhdGFIYXNoKSBpbnRlcm5hbCBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wgcHJvdmVkLCB1aW50IHRpbWUsIHVpbnQgc3Rha2VkKQogICAgewogICAgICAgIHJldHVybiAoYWNjb3VudHNbbXNnLnNlbmRlcl0uZW50cmllcy5jb250YWlucyhkYXRhSGFzaCksCiAgICAgICAgICAgICAgICBhY2NvdW50c1t0YXJnZXRdLnZhbHVlc1tkYXRhSGFzaF0udGltZSwKICAgICAgICAgICAgICAgIGFjY291bnRzW3RhcmdldF0udmFsdWVzW2RhdGFIYXNoXS5zdGFrZWQpOwogICAgfQp9CgovLyBzZXRzIHN1cHBvcnQgdXAgdG8gMl4yNTYtMiBtZW1iZXJzCi8vIG1lbWJlckluZGljZXMgc3RvcmVzIHRoZSBpbmRleCBvZiBtZW1iZXJzICsgMSwgbm90IHRoZWlyIGFjdHVhbCBpbmRleApsaWJyYXJ5IFNldHMgewogICAgLy8gYWRkcmVzcyBzZXQKICAgIHN0cnVjdCBhZGRyZXNzU2V0IHsKICAgICAgICBhZGRyZXNzW10gbWVtYmVyczsKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgbWVtYmVySW5kaWNlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnQoYWRkcmVzc1NldCBzdG9yYWdlIHNlbGYsIGFkZHJlc3Mgb3RoZXIpIHsKICAgICAgICBpZiAoIWNvbnRhaW5zKHNlbGYsIG90aGVyKSkgewogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPSBsZW5ndGgoc2VsZik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZShhZGRyZXNzU2V0IHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyBvdGhlcikgewogICAgICAgIGlmIChjb250YWlucyhzZWxmLCBvdGhlcikpIHsKICAgICAgICAgICAgdWludCByZXBsYWNlSW5kZXggPSBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdOwogICAgICAgICAgICBhZGRyZXNzIGxhc3RNZW1iZXIgPSBzZWxmLm1lbWJlcnNbbGVuZ3RoKHNlbGYpLTFdOwogICAgICAgICAgICAvLyBvdmVyd3JpdGUgb3RoZXIgd2l0aCB0aGUgbGFzdCBtZW1iZXIgYW5kIHJlbW92ZSBsYXN0IG1lbWJlcgogICAgICAgICAgICBzZWxmLm1lbWJlcnNbcmVwbGFjZUluZGV4LTFdID0gbGFzdE1lbWJlcjsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmxlbmd0aC0tOwogICAgICAgICAgICAvLyByZWZsZWN0IHRoaXMgY2hhbmdlIGluIHRoZSBpbmRpY2VzCiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tsYXN0TWVtYmVyXSA9IHJlcGxhY2VJbmRleDsKICAgICAgICAgICAgZGVsZXRlIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGFkZHJlc3NTZXQgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIG90aGVyKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXSA+IDA7CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKGFkZHJlc3NTZXQgc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICB9CgoKICAgIC8vIHVpbnQgc2V0CiAgICBzdHJ1Y3QgdWludFNldCB7CiAgICAgICAgdWludFtdIG1lbWJlcnM7CiAgICAgICAgbWFwcGluZyh1aW50ID0+IHVpbnQpIG1lbWJlckluZGljZXM7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0KHVpbnRTZXQgc3RvcmFnZSBzZWxmLCB1aW50IG90aGVyKSB7CiAgICAgICAgaWYgKCFjb250YWlucyhzZWxmLCBvdGhlcikpIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLnB1c2gob3RoZXIpOwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdID0gbGVuZ3RoKHNlbGYpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmUodWludFNldCBzdG9yYWdlIHNlbGYsIHVpbnQgb3RoZXIpIHsKICAgICAgICBpZiAoY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHVpbnQgcmVwbGFjZUluZGV4ID0gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICAgICAgdWludCBsYXN0TWVtYmVyID0gc2VsZi5tZW1iZXJzW2xlbmd0aChzZWxmKS0xXTsKICAgICAgICAgICAgLy8gb3ZlcndyaXRlIG90aGVyIHdpdGggdGhlIGxhc3QgbWVtYmVyIGFuZCByZW1vdmUgbGFzdCBtZW1iZXIKICAgICAgICAgICAgc2VsZi5tZW1iZXJzW3JlcGxhY2VJbmRleC0xXSA9IGxhc3RNZW1iZXI7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5sZW5ndGgtLTsKICAgICAgICAgICAgLy8gcmVmbGVjdCB0aGlzIGNoYW5nZSBpbiB0aGUgaW5kaWNlcwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGljZXNbbGFzdE1lbWJlcl0gPSByZXBsYWNlSW5kZXg7CiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb250YWlucyh1aW50U2V0IHN0b3JhZ2Ugc2VsZiwgdWludCBvdGhlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGxlbmd0aCh1aW50U2V0IHN0b3JhZ2Ugc2VsZikgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgfQoKCiAgICAvLyB1aW50OCBzZXQKICAgIHN0cnVjdCB1aW50OFNldCB7CiAgICAgICAgdWludDhbXSBtZW1iZXJzOwogICAgICAgIG1hcHBpbmcodWludDggPT4gdWludCkgbWVtYmVySW5kaWNlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnQodWludDhTZXQgc3RvcmFnZSBzZWxmLCB1aW50OCBvdGhlcikgewogICAgICAgIGlmICghY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5wdXNoKG90aGVyKTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXSA9IGxlbmd0aChzZWxmKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKHVpbnQ4U2V0IHN0b3JhZ2Ugc2VsZiwgdWludDggb3RoZXIpIHsKICAgICAgICBpZiAoY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHVpbnQgcmVwbGFjZUluZGV4ID0gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICAgICAgdWludDggbGFzdE1lbWJlciA9IHNlbGYubWVtYmVyc1tsZW5ndGgoc2VsZiktMV07CiAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSBvdGhlciB3aXRoIHRoZSBsYXN0IG1lbWJlciBhbmQgcmVtb3ZlIGxhc3QgbWVtYmVyCiAgICAgICAgICAgIHNlbGYubWVtYmVyc1tyZXBsYWNlSW5kZXgtMV0gPSBsYXN0TWVtYmVyOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMubGVuZ3RoLS07CiAgICAgICAgICAgIC8vIHJlZmxlY3QgdGhpcyBjaGFuZ2UgaW4gdGhlIGluZGljZXMKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRpY2VzW2xhc3RNZW1iZXJdID0gcmVwbGFjZUluZGV4OwogICAgICAgICAgICBkZWxldGUgc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29udGFpbnModWludDhTZXQgc3RvcmFnZSBzZWxmLCB1aW50OCBvdGhlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGxlbmd0aCh1aW50OFNldCBzdG9yYWdlIHNlbGYpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgIH0KCgogICAgLy8gaW50IHNldAogICAgc3RydWN0IGludFNldCB7CiAgICAgICAgaW50W10gbWVtYmVyczsKICAgICAgICBtYXBwaW5nKGludCA9PiB1aW50KSBtZW1iZXJJbmRpY2VzOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydChpbnRTZXQgc3RvcmFnZSBzZWxmLCBpbnQgb3RoZXIpIHsKICAgICAgICBpZiAoIWNvbnRhaW5zKHNlbGYsIG90aGVyKSkgewogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPSBsZW5ndGgoc2VsZik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZShpbnRTZXQgc3RvcmFnZSBzZWxmLCBpbnQgb3RoZXIpIHsKICAgICAgICBpZiAoY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHVpbnQgcmVwbGFjZUluZGV4ID0gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICAgICAgaW50IGxhc3RNZW1iZXIgPSBzZWxmLm1lbWJlcnNbbGVuZ3RoKHNlbGYpLTFdOwogICAgICAgICAgICAvLyBvdmVyd3JpdGUgb3RoZXIgd2l0aCB0aGUgbGFzdCBtZW1iZXIgYW5kIHJlbW92ZSBsYXN0IG1lbWJlcgogICAgICAgICAgICBzZWxmLm1lbWJlcnNbcmVwbGFjZUluZGV4LTFdID0gbGFzdE1lbWJlcjsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmxlbmd0aC0tOwogICAgICAgICAgICAvLyByZWZsZWN0IHRoaXMgY2hhbmdlIGluIHRoZSBpbmRpY2VzCiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tsYXN0TWVtYmVyXSA9IHJlcGxhY2VJbmRleDsKICAgICAgICAgICAgZGVsZXRlIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGludFNldCBzdG9yYWdlIHNlbGYsIGludCBvdGhlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGxlbmd0aChpbnRTZXQgc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICB9CgoKICAgIC8vIGludDggc2V0CiAgICBzdHJ1Y3QgaW50OFNldCB7CiAgICAgICAgaW50OFtdIG1lbWJlcnM7CiAgICAgICAgbWFwcGluZyhpbnQ4ID0+IHVpbnQpIG1lbWJlckluZGljZXM7CiAgICB9CgogICAgZnVuY3Rpb24gaW5zZXJ0KGludDhTZXQgc3RvcmFnZSBzZWxmLCBpbnQ4IG90aGVyKSB7CiAgICAgICAgaWYgKCFjb250YWlucyhzZWxmLCBvdGhlcikpIHsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLnB1c2gob3RoZXIpOwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdID0gbGVuZ3RoKHNlbGYpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmUoaW50OFNldCBzdG9yYWdlIHNlbGYsIGludDggb3RoZXIpIHsKICAgICAgICBpZiAoY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHVpbnQgcmVwbGFjZUluZGV4ID0gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICAgICAgaW50OCBsYXN0TWVtYmVyID0gc2VsZi5tZW1iZXJzW2xlbmd0aChzZWxmKS0xXTsKICAgICAgICAgICAgLy8gb3ZlcndyaXRlIG90aGVyIHdpdGggdGhlIGxhc3QgbWVtYmVyIGFuZCByZW1vdmUgbGFzdCBtZW1iZXIKICAgICAgICAgICAgc2VsZi5tZW1iZXJzW3JlcGxhY2VJbmRleC0xXSA9IGxhc3RNZW1iZXI7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5sZW5ndGgtLTsKICAgICAgICAgICAgLy8gcmVmbGVjdCB0aGlzIGNoYW5nZSBpbiB0aGUgaW5kaWNlcwogICAgICAgICAgICBzZWxmLm1lbWJlckluZGljZXNbbGFzdE1lbWJlcl0gPSByZXBsYWNlSW5kZXg7CiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb250YWlucyhpbnQ4U2V0IHN0b3JhZ2Ugc2VsZiwgaW50OCBvdGhlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGxlbmd0aChpbnQ4U2V0IHN0b3JhZ2Ugc2VsZikgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlcnMubGVuZ3RoOwogICAgfQoKCiAgICAvLyBieXRlIHNldAogICAgc3RydWN0IGJ5dGVTZXQgewogICAgICAgIGJ5dGVbXSBtZW1iZXJzOwogICAgICAgIG1hcHBpbmcoYnl0ZSA9PiB1aW50KSBtZW1iZXJJbmRpY2VzOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydChieXRlU2V0IHN0b3JhZ2Ugc2VsZiwgYnl0ZSBvdGhlcikgewogICAgICAgIGlmICghY29udGFpbnMoc2VsZiwgb3RoZXIpKSB7CiAgICAgICAgICAgIHNlbGYubWVtYmVycy5wdXNoKG90aGVyKTsKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXSA9IGxlbmd0aChzZWxmKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKGJ5dGVTZXQgc3RvcmFnZSBzZWxmLCBieXRlIG90aGVyKSB7CiAgICAgICAgaWYgKGNvbnRhaW5zKHNlbGYsIG90aGVyKSkgewogICAgICAgICAgICB1aW50IHJlcGxhY2VJbmRleCA9IHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl07CiAgICAgICAgICAgIGJ5dGUgbGFzdE1lbWJlciA9IHNlbGYubWVtYmVyc1tsZW5ndGgoc2VsZiktMV07CiAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSBvdGhlciB3aXRoIHRoZSBsYXN0IG1lbWJlciBhbmQgcmVtb3ZlIGxhc3QgbWVtYmVyCiAgICAgICAgICAgIHNlbGYubWVtYmVyc1tyZXBsYWNlSW5kZXgtMV0gPSBsYXN0TWVtYmVyOwogICAgICAgICAgICBzZWxmLm1lbWJlcnMubGVuZ3RoLS07CiAgICAgICAgICAgIC8vIHJlZmxlY3QgdGhpcyBjaGFuZ2UgaW4gdGhlIGluZGljZXMKICAgICAgICAgICAgc2VsZi5tZW1iZXJJbmRpY2VzW2xhc3RNZW1iZXJdID0gcmVwbGFjZUluZGV4OwogICAgICAgICAgICBkZWxldGUgc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29udGFpbnMoYnl0ZVNldCBzdG9yYWdlIHNlbGYsIGJ5dGUgb3RoZXIpCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdID4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBsZW5ndGgoYnl0ZVNldCBzdG9yYWdlIHNlbGYpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJzLmxlbmd0aDsKICAgIH0KCgogICAgLy8gYnl0ZXMzMiBzZXQKICAgIHN0cnVjdCBieXRlczMyU2V0IHsKICAgICAgICBieXRlczMyW10gbWVtYmVyczsKICAgICAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gdWludCkgbWVtYmVySW5kaWNlczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnNlcnQoYnl0ZXMzMlNldCBzdG9yYWdlIHNlbGYsIGJ5dGVzMzIgb3RoZXIpIHsKICAgICAgICBpZiAoIWNvbnRhaW5zKHNlbGYsIG90aGVyKSkgewogICAgICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChvdGhlcik7CiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl0gPSBsZW5ndGgoc2VsZik7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZShieXRlczMyU2V0IHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiBvdGhlcikgewogICAgICAgIGlmIChjb250YWlucyhzZWxmLCBvdGhlcikpIHsKICAgICAgICAgICAgdWludCByZXBsYWNlSW5kZXggPSBzZWxmLm1lbWJlckluZGljZXNbb3RoZXJdOwogICAgICAgICAgICBieXRlczMyIGxhc3RNZW1iZXIgPSBzZWxmLm1lbWJlcnNbbGVuZ3RoKHNlbGYpLTFdOwogICAgICAgICAgICAvLyBvdmVyd3JpdGUgb3RoZXIgd2l0aCB0aGUgbGFzdCBtZW1iZXIgYW5kIHJlbW92ZSBsYXN0IG1lbWJlcgogICAgICAgICAgICBzZWxmLm1lbWJlcnNbcmVwbGFjZUluZGV4LTFdID0gbGFzdE1lbWJlcjsKICAgICAgICAgICAgc2VsZi5tZW1iZXJzLmxlbmd0aC0tOwogICAgICAgICAgICAvLyByZWZsZWN0IHRoaXMgY2hhbmdlIGluIHRoZSBpbmRpY2VzCiAgICAgICAgICAgIHNlbGYubWVtYmVySW5kaWNlc1tsYXN0TWVtYmVyXSA9IHJlcGxhY2VJbmRleDsKICAgICAgICAgICAgZGVsZXRlIHNlbGYubWVtYmVySW5kaWNlc1tvdGhlcl07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGJ5dGVzMzJTZXQgc3RvcmFnZSBzZWxmLCBieXRlczMyIG90aGVyKQogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZi5tZW1iZXJJbmRpY2VzW290aGVyXSA+IDA7CiAgICB9CgogICAgZnVuY3Rpb24gbGVuZ3RoKGJ5dGVzMzJTZXQgc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHNlbGYubWVtYmVycy5sZW5ndGg7CiAgICB9Cn0='.
	

]
