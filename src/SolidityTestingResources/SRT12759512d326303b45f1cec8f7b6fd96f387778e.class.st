Class {
	#name : #SRT12759512d326303b45f1cec8f7b6fd96f387778e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT12759512d326303b45f1cec8f7b6fd96f387778e >> base64 [
	^ ''.
	

]
