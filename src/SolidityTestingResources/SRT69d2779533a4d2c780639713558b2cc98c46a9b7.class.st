Class {
	#name : #SRT69d2779533a4d2c780639713558b2cc98c46a9b7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69d2779533a4d2c780639713558b2cc98c46a9b7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8qKgogKiBAdGl0bGUgVk5UIFRva2VuIC0gVGhlIE5leHQgR2VuZXJhdGlvbiBWYWx1ZSBUcmFuc2ZlcmluZyBOZXR3b3JrLgogKiBAYXV0aG9yIFdhbmcgWXVueGlhbyAtIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMzg0ZjQxNDAwMTBlMDEwYTBhNzg1ZjU1NTk1MTU0MTY1YjU3NTUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgogKi8KCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZURpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSAmJiBjID49IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBWTlQgaXMgU2FmZU1hdGggewogICAgc3RyaW5nIGNvbnN0YW50IHRva2VuTmFtZSA9ICdWTlRDaGFpbic7CiAgICBzdHJpbmcgY29uc3RhbnQgdG9rZW5TeW1ib2wgPSAnVk5UJzsKICAgIHVpbnQ4IGNvbnN0YW50IGRlY2ltYWxVbml0cyA9IDg7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAxMDAgKiAoMTAqKjgpICogKDEwKio4KTsgLy8gMTAwIHlpCgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSByZXN0cmljdGVkQWRkcmVzc2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBhc3NlcnQob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFZOVCgpIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7ICAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIHRva2VucwogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IGRlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZU9mW190b10pOyAgICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZSghcmVzdHJpY3RlZEFkZHJlc3Nlc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgcmVxdWlyZSghcmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKTsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zYWZlU3ViKGJhbGFuY2VPZlttc2cuc2VuZGVyXSwgX3ZhbHVlKTsgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IFNhZmVNYXRoLnNhZmVBZGQoYmFsYW5jZU9mW190b10sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOyAgICAgICAgICAgIC8vIFNldCBhbGxvd2FuY2UKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsgICAgICAgICAgICAgIC8vIFJhaXNlIEFwcHJvdmFsIGV2ZW50CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZU9mW190b10pOyAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICByZXF1aXJlKCFyZXN0cmljdGVkQWRkcmVzc2VzW19mcm9tXSk7CiAgICAgICAgcmVxdWlyZSghcmVzdHJpY3RlZEFkZHJlc3Nlc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgcmVxdWlyZSghcmVzdHJpY3RlZEFkZHJlc3Nlc1tfdG9dKTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dID0gU2FmZU1hdGguc2FmZVN1YihiYWxhbmNlT2ZbX2Zyb21dLCBfdmFsdWUpOyAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IFNhZmVNYXRoLnNhZmVBZGQoYmFsYW5jZU9mW190b10sIF92YWx1ZSk7ICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zYWZlU3ViKGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IFN1cHBseSkgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCiAgICAvKiBPd25lciBjYW4gYWRkIG5ldyByZXN0cmljdGVkIGFkZHJlc3Mgb3IgcmVtb3ZlcyBvbmUgKi8KICAgIGZ1bmN0aW9uIGVkaXRSZXN0cmljdGVkQWRkcmVzcyhhZGRyZXNzIF9uZXdSZXN0cmljdGVkQWRkcmVzcykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVzdHJpY3RlZEFkZHJlc3Nlc1tfbmV3UmVzdHJpY3RlZEFkZHJlc3NdID0gIXJlc3RyaWN0ZWRBZGRyZXNzZXNbX25ld1Jlc3RyaWN0ZWRBZGRyZXNzXTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1Jlc3RyaWN0ZWRBZGRyZXNzKGFkZHJlc3MgX3F1ZXJyeUFkZHJlc3MpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zIChib29sIGFuc3dlcikgewogICAgICAgIHJldHVybiByZXN0cmljdGVkQWRkcmVzc2VzW19xdWVycnlBZGRyZXNzXTsKICAgIH0KfQ=='.
	

]
