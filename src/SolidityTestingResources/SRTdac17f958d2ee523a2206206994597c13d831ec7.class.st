Class {
	#name : #SRTdac17f958d2ee523a2206206994597c13d831ec7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdac17f958d2ee523a2206206994597c13d831ec7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvKioKICAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAgKiBhY2NvdW50LgogICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cgp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50IHB1YmxpYyBfdG90YWxTdXBwbHk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcHVibGljOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcHVibGljOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgT3duYWJsZSwgRVJDMjBCYXNpYyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwoKICAgIC8vIGFkZGl0aW9uYWwgdmFyaWFibGVzIGZvciB1c2UgaWYgdHJhbnNhY3Rpb24gZmVlcyBldmVyIGJlY2FtZSBuZWNlc3NhcnkKICAgIHVpbnQgcHVibGljIGJhc2lzUG9pbnRzUmF0ZSA9IDA7CiAgICB1aW50IHB1YmxpYyBtYXhpbXVtRmVlID0gMDsKCiAgICAvKioKICAgICogQGRldiBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjay4KICAgICovCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICAgICAgcmVxdWlyZSghKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgb25seVBheWxvYWRTaXplKDIgKiAzMikgewogICAgICAgIHVpbnQgZmVlID0gKF92YWx1ZS5tdWwoYmFzaXNQb2ludHNSYXRlKSkuZGl2KDEwMDAwKTsKICAgICAgICBpZiAoZmVlID4gbWF4aW11bUZlZSkgewogICAgICAgICAgICBmZWUgPSBtYXhpbXVtRmVlOwogICAgICAgIH0KICAgICAgICB1aW50IHNlbmRBbW91bnQgPSBfdmFsdWUuc3ViKGZlZSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoc2VuZEFtb3VudCk7CiAgICAgICAgaWYgKGZlZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLmFkZChmZWUpOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBvd25lciwgZmVlKTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBzZW5kQW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9Cgp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgQmFzaWNUb2tlbiwgRVJDMjAgewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgcHVibGljIGFsbG93ZWQ7CgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX1VJTlQgPSAyKioyNTYgLSAxOwoKICAgIC8qKgogICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgICogQHBhcmFtIF92YWx1ZSB1aW50IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHsKICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgICAgIHVpbnQgZmVlID0gKF92YWx1ZS5tdWwoYmFzaXNQb2ludHNSYXRlKSkuZGl2KDEwMDAwKTsKICAgICAgICBpZiAoZmVlID4gbWF4aW11bUZlZSkgewogICAgICAgICAgICBmZWUgPSBtYXhpbXVtRmVlOwogICAgICAgIH0KICAgICAgICBpZiAoX2FsbG93YW5jZSA8IE1BWF9VSU5UKSB7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgdWludCBzZW5kQW1vdW50ID0gX3ZhbHVlLnN1YihmZWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoc2VuZEFtb3VudCk7CiAgICAgICAgaWYgKGZlZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLmFkZChmZWUpOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgb3duZXIsIGZlZSk7CiAgICAgICAgfQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIHNlbmRBbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSB7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKCEoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhbiBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICogQHJldHVybiBBIHVpbnQgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9Cgpjb250cmFjdCBCbGFja0xpc3QgaXMgT3duYWJsZSwgQmFzaWNUb2tlbiB7CgogICAgLy8vLy8vLyBHZXR0ZXJzIHRvIGFsbG93IHRoZSBzYW1lIGJsYWNrbGlzdCB0byBiZSB1c2VkIGFsc28gYnkgb3RoZXIgY29udHJhY3RzIChpbmNsdWRpbmcgdXBncmFkZWQgVGV0aGVyKSAvLy8vLy8vCiAgICBmdW5jdGlvbiBnZXRCbGFja0xpc3RTdGF0dXMoYWRkcmVzcyBfbWFrZXIpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gaXNCbGFja0xpc3RlZFtfbWFrZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE93bmVyKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBvd25lcjsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc0JsYWNrTGlzdGVkOwogICAgCiAgICBmdW5jdGlvbiBhZGRCbGFja0xpc3QgKGFkZHJlc3MgX2V2aWxVc2VyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBpc0JsYWNrTGlzdGVkW19ldmlsVXNlcl0gPSB0cnVlOwogICAgICAgIEFkZGVkQmxhY2tMaXN0KF9ldmlsVXNlcik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlQmxhY2tMaXN0IChhZGRyZXNzIF9jbGVhcmVkVXNlcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgaXNCbGFja0xpc3RlZFtfY2xlYXJlZFVzZXJdID0gZmFsc2U7CiAgICAgICAgUmVtb3ZlZEJsYWNrTGlzdChfY2xlYXJlZFVzZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3Ryb3lCbGFja0Z1bmRzIChhZGRyZXNzIF9ibGFja0xpc3RlZFVzZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoaXNCbGFja0xpc3RlZFtfYmxhY2tMaXN0ZWRVc2VyXSk7CiAgICAgICAgdWludCBkaXJ0eUZ1bmRzID0gYmFsYW5jZU9mKF9ibGFja0xpc3RlZFVzZXIpOwogICAgICAgIGJhbGFuY2VzW19ibGFja0xpc3RlZFVzZXJdID0gMDsKICAgICAgICBfdG90YWxTdXBwbHkgLT0gZGlydHlGdW5kczsKICAgICAgICBEZXN0cm95ZWRCbGFja0Z1bmRzKF9ibGFja0xpc3RlZFVzZXIsIGRpcnR5RnVuZHMpOwogICAgfQoKICAgIGV2ZW50IERlc3Ryb3llZEJsYWNrRnVuZHMoYWRkcmVzcyBfYmxhY2tMaXN0ZWRVc2VyLCB1aW50IF9iYWxhbmNlKTsKCiAgICBldmVudCBBZGRlZEJsYWNrTGlzdChhZGRyZXNzIF91c2VyKTsKCiAgICBldmVudCBSZW1vdmVkQmxhY2tMaXN0KGFkZHJlc3MgX3VzZXIpOwoKfQoKY29udHJhY3QgVXBncmFkZWRTdGFuZGFyZFRva2VuIGlzIFN0YW5kYXJkVG9rZW57CiAgICAvLyB0aG9zZSBtZXRob2RzIGFyZSBjYWxsZWQgYnkgdGhlIGxlZ2FjeSBjb250cmFjdAogICAgLy8gYW5kIHRoZXkgbXVzdCBlbnN1cmUgbXNnLnNlbmRlciB0byBiZSB0aGUgY29udHJhY3QgYWRkcmVzcwogICAgZnVuY3Rpb24gdHJhbnNmZXJCeUxlZ2FjeShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbUJ5TGVnYWN5KGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIGZyb20sIGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcHVibGljOwogICAgZnVuY3Rpb24gYXBwcm92ZUJ5TGVnYWN5KGFkZHJlc3MgZnJvbSwgYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSBwdWJsaWM7Cn0KCmNvbnRyYWN0IFRldGhlclRva2VuIGlzIFBhdXNhYmxlLCBTdGFuZGFyZFRva2VuLCBCbGFja0xpc3QgewoKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHM7CiAgICBhZGRyZXNzIHB1YmxpYyB1cGdyYWRlZEFkZHJlc3M7CiAgICBib29sIHB1YmxpYyBkZXByZWNhdGVkOwoKICAgIC8vICBUaGUgY29udHJhY3QgY2FuIGJlIGluaXRpYWxpemVkIHdpdGggYSBudW1iZXIgb2YgdG9rZW5zCiAgICAvLyAgQWxsIHRoZSB0b2tlbnMgYXJlIGRlcG9zaXRlZCB0byB0aGUgb3duZXIgYWRkcmVzcwogICAgLy8KICAgIC8vIEBwYXJhbSBfYmFsYW5jZSBJbml0aWFsIHN1cHBseSBvZiB0aGUgY29udHJhY3QKICAgIC8vIEBwYXJhbSBfbmFtZSBUb2tlbiBOYW1lCiAgICAvLyBAcGFyYW0gX3N5bWJvbCBUb2tlbiBzeW1ib2wKICAgIC8vIEBwYXJhbSBfZGVjaW1hbHMgVG9rZW4gZGVjaW1hbHMKICAgIGZ1bmN0aW9uIFRldGhlclRva2VuKHVpbnQgX2luaXRpYWxTdXBwbHksIHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2RlY2ltYWxzKSBwdWJsaWMgewogICAgICAgIF90b3RhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OwogICAgICAgIG5hbWUgPSBfbmFtZTsKICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxzOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF9pbml0aWFsU3VwcGx5OwogICAgICAgIGRlcHJlY2F0ZWQgPSBmYWxzZTsKICAgIH0KCiAgICAvLyBGb3J3YXJkIEVSQzIwIG1ldGhvZHMgdG8gdXBncmFkZWQgY29udHJhY3QgaWYgdGhpcyBvbmUgaXMgZGVwcmVjYXRlZAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZSghaXNCbGFja0xpc3RlZFttc2cuc2VuZGVyXSk7CiAgICAgICAgaWYgKGRlcHJlY2F0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIFVwZ3JhZGVkU3RhbmRhcmRUb2tlbih1cGdyYWRlZEFkZHJlc3MpLnRyYW5zZmVyQnlMZWdhY3kobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEZvcndhcmQgRVJDMjAgbWV0aG9kcyB0byB1cGdyYWRlZCBjb250cmFjdCBpZiB0aGlzIG9uZSBpcyBkZXByZWNhdGVkCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZSghaXNCbGFja0xpc3RlZFtfZnJvbV0pOwogICAgICAgIGlmIChkZXByZWNhdGVkKSB7CiAgICAgICAgICAgIHJldHVybiBVcGdyYWRlZFN0YW5kYXJkVG9rZW4odXBncmFkZWRBZGRyZXNzKS50cmFuc2ZlckZyb21CeUxlZ2FjeShtc2cuc2VuZGVyLCBfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gRm9yd2FyZCBFUkMyMCBtZXRob2RzIHRvIHVwZ3JhZGVkIGNvbnRyYWN0IGlmIHRoaXMgb25lIGlzIGRlcHJlY2F0ZWQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoZGVwcmVjYXRlZCkgewogICAgICAgICAgICByZXR1cm4gVXBncmFkZWRTdGFuZGFyZFRva2VuKHVwZ3JhZGVkQWRkcmVzcykuYmFsYW5jZU9mKHdobyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmJhbGFuY2VPZih3aG8pOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGb3J3YXJkIEVSQzIwIG1ldGhvZHMgdG8gdXBncmFkZWQgY29udHJhY3QgaWYgdGhpcyBvbmUgaXMgZGVwcmVjYXRlZAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgICAgICBpZiAoZGVwcmVjYXRlZCkgewogICAgICAgICAgICByZXR1cm4gVXBncmFkZWRTdGFuZGFyZFRva2VuKHVwZ3JhZGVkQWRkcmVzcykuYXBwcm92ZUJ5TGVnYWN5KG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGb3J3YXJkIEVSQzIwIG1ldGhvZHMgdG8gdXBncmFkZWQgY29udHJhY3QgaWYgdGhpcyBvbmUgaXMgZGVwcmVjYXRlZAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgICAgICBpZiAoZGVwcmVjYXRlZCkgewogICAgICAgICAgICByZXR1cm4gU3RhbmRhcmRUb2tlbih1cGdyYWRlZEFkZHJlc3MpLmFsbG93YW5jZShfb3duZXIsIF9zcGVuZGVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gc3VwZXIuYWxsb3dhbmNlKF9vd25lciwgX3NwZW5kZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBkZXByZWNhdGUgY3VycmVudCBjb250cmFjdCBpbiBmYXZvdXIgb2YgYSBuZXcgb25lCiAgICBmdW5jdGlvbiBkZXByZWNhdGUoYWRkcmVzcyBfdXBncmFkZWRBZGRyZXNzKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBkZXByZWNhdGVkID0gdHJ1ZTsKICAgICAgICB1cGdyYWRlZEFkZHJlc3MgPSBfdXBncmFkZWRBZGRyZXNzOwogICAgICAgIERlcHJlY2F0ZShfdXBncmFkZWRBZGRyZXNzKTsKICAgIH0KCiAgICAvLyBkZXByZWNhdGUgY3VycmVudCBjb250cmFjdCBpZiBmYXZvdXIgb2YgYSBuZXcgb25lCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgaWYgKGRlcHJlY2F0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YW5kYXJkVG9rZW4odXBncmFkZWRBZGRyZXNzKS50b3RhbFN1cHBseSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIElzc3VlIGEgbmV3IGFtb3VudCBvZiB0b2tlbnMKICAgIC8vIHRoZXNlIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIG93bmVyIGFkZHJlc3MKICAgIC8vCiAgICAvLyBAcGFyYW0gX2Ftb3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIGJlIGlzc3VlZAogICAgZnVuY3Rpb24gaXNzdWUodWludCBhbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX3RvdGFsU3VwcGx5ICsgYW1vdW50ID4gX3RvdGFsU3VwcGx5KTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSArIGFtb3VudCA+IGJhbGFuY2VzW293bmVyXSk7CgogICAgICAgIGJhbGFuY2VzW293bmVyXSArPSBhbW91bnQ7CiAgICAgICAgX3RvdGFsU3VwcGx5ICs9IGFtb3VudDsKICAgICAgICBJc3N1ZShhbW91bnQpOwogICAgfQoKICAgIC8vIFJlZGVlbSB0b2tlbnMuCiAgICAvLyBUaGVzZSB0b2tlbnMgYXJlIHdpdGhkcmF3biBmcm9tIHRoZSBvd25lciBhZGRyZXNzCiAgICAvLyBpZiB0aGUgYmFsYW5jZSBtdXN0IGJlIGVub3VnaCB0byBjb3ZlciB0aGUgcmVkZWVtCiAgICAvLyBvciB0aGUgY2FsbCB3aWxsIGZhaWwuCiAgICAvLyBAcGFyYW0gX2Ftb3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIGJlIGlzc3VlZAogICAgZnVuY3Rpb24gcmVkZWVtKHVpbnQgYW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF90b3RhbFN1cHBseSA+PSBhbW91bnQpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbb3duZXJdID49IGFtb3VudCk7CgogICAgICAgIF90b3RhbFN1cHBseSAtPSBhbW91bnQ7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdIC09IGFtb3VudDsKICAgICAgICBSZWRlZW0oYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQYXJhbXModWludCBuZXdCYXNpc1BvaW50cywgdWludCBuZXdNYXhGZWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIC8vIEVuc3VyZSB0cmFuc3BhcmVuY3kgYnkgaGFyZGNvZGluZyBsaW1pdCBiZXlvbmQgd2hpY2ggZmVlcyBjYW4gbmV2ZXIgYmUgYWRkZWQKICAgICAgICByZXF1aXJlKG5ld0Jhc2lzUG9pbnRzIDwgMjApOwogICAgICAgIHJlcXVpcmUobmV3TWF4RmVlIDwgNTApOwoKICAgICAgICBiYXNpc1BvaW50c1JhdGUgPSBuZXdCYXNpc1BvaW50czsKICAgICAgICBtYXhpbXVtRmVlID0gbmV3TWF4RmVlLm11bCgxMCoqZGVjaW1hbHMpOwoKICAgICAgICBQYXJhbXMoYmFzaXNQb2ludHNSYXRlLCBtYXhpbXVtRmVlKTsKICAgIH0KCiAgICAvLyBDYWxsZWQgd2hlbiBuZXcgdG9rZW4gYXJlIGlzc3VlZAogICAgZXZlbnQgSXNzdWUodWludCBhbW91bnQpOwoKICAgIC8vIENhbGxlZCB3aGVuIHRva2VucyBhcmUgcmVkZWVtZWQKICAgIGV2ZW50IFJlZGVlbSh1aW50IGFtb3VudCk7CgogICAgLy8gQ2FsbGVkIHdoZW4gY29udHJhY3QgaXMgZGVwcmVjYXRlZAogICAgZXZlbnQgRGVwcmVjYXRlKGFkZHJlc3MgbmV3QWRkcmVzcyk7CgogICAgLy8gQ2FsbGVkIGlmIGNvbnRyYWN0IGV2ZXIgYWRkcyBmZWVzCiAgICBldmVudCBQYXJhbXModWludCBmZWVCYXNpc1BvaW50cywgdWludCBtYXhGZWUpOwp9'.
	

]
