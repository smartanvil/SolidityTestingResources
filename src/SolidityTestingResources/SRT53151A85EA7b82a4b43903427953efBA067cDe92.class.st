Class {
	#name : #SRT53151A85EA7b82a4b43903427953efBA067cDe92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53151A85EA7b82a4b43903427953efBA067cDe92 >> base64 [
	^ ''.
	

]
