Class {
	#name : #SRT823dbd9b96fba802e4ae04dff989daada5465e84,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT823dbd9b96fba802e4ae04dff989daada5465e84 >> base64 [
	^ ''.
	

]
