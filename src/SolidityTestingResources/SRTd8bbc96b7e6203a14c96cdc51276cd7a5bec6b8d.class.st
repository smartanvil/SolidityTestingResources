Class {
	#name : #SRTd8bbc96b7e6203a14c96cdc51276cd7a5bec6b8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd8bbc96b7e6203a14c96cdc51276cd7a5bec6b8d >> base64 [
	^ ''.
	

]
