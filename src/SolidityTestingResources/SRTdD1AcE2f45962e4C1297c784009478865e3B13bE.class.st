Class {
	#name : #SRTdD1AcE2f45962e4C1297c784009478865e3B13bE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdD1AcE2f45962e4C1297c784009478865e3B13bE >> base64 [
	^ ''.
	

]
