Class {
	#name : #SRT5cfa2f4ff77bbd15d6415e33c16c2c85096cce4a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5cfa2f4ff77bbd15d6415e33c16c2c85096cce4a >> base64 [
	^ ''.
	

]
