Class {
	#name : #SRTa55fc2f935e5decd52685e28c9f1e94528f86c70,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa55fc2f935e5decd52685e28c9f1e94528f86c70 >> base64 [
	^ ''.
	

]
