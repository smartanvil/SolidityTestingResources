Class {
	#name : #SRT76273a63d7c102a61104149f3cc567ec2b4e4257,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76273a63d7c102a61104149f3cc567ec2b4e4257 >> base64 [
	^ ''.
	

]
