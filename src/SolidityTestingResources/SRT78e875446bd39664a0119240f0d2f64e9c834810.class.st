Class {
	#name : #SRT78e875446bd39664a0119240f0d2f64e9c834810,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT78e875446bd39664a0119240f0d2f64e9c834810 >> base64 [
	^ ''.
	

]
