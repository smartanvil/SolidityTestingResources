Class {
	#name : #SRT34f61ff92cd0f49a358a9fdedde62898b9d70901,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT34f61ff92cd0f49a358a9fdedde62898b9d70901 >> base64 [
	^ ''.
	

]
