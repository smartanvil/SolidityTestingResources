Class {
	#name : #SRTd61eaa2d5d7f9a92060d596a49c03be162e760a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd61eaa2d5d7f9a92060d596a49c03be162e760a8 >> base64 [
	^ ''.
	

]
