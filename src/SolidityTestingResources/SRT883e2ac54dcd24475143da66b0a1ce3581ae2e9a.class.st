Class {
	#name : #SRT883e2ac54dcd24475143da66b0a1ce3581ae2e9a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT883e2ac54dcd24475143da66b0a1ce3581ae2e9a >> base64 [
	^ ''.
	

]
