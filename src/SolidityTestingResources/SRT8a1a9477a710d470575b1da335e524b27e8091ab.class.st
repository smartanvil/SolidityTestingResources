Class {
	#name : #SRT8a1a9477a710d470575b1da335e524b27e8091ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a1a9477a710d470575b1da335e524b27e8091ab >> base64 [
	^ ''.
	

]
