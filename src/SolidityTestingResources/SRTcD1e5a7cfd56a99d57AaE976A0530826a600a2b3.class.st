Class {
	#name : #SRTcD1e5a7cfd56a99d57AaE976A0530826a600a2b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcD1e5a7cfd56a99d57AaE976A0530826a600a2b3 >> base64 [
	^ ''.
	

]
