Class {
	#name : #SRT411c6ed835962df75e3b09d644d9982ed4e6f458,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT411c6ed835962df75e3b09d644d9982ed4e6f458 >> base64 [
	^ ''.
	

]
