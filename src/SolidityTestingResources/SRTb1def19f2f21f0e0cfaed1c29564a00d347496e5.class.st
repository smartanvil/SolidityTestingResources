Class {
	#name : #SRTb1def19f2f21f0e0cfaed1c29564a00d347496e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1def19f2f21f0e0cfaed1c29564a00d347496e5 >> base64 [
	^ ''.
	

]
