Class {
	#name : #SRT449ec1e64622a7f84425b6345c9f2741656b78bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT449ec1e64622a7f84425b6345c9f2741656b78bd >> base64 [
	^ ''.
	

]
