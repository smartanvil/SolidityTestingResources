Class {
	#name : #SRT352f1DD3Ac41baE74E307b1F188B5CED72D6ebc8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT352f1DD3Ac41baE74E307b1F188B5CED72D6ebc8 >> base64 [
	^ ''.
	

]
