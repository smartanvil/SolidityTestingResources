Class {
	#name : #SRT0b037f989ae55f747b5134bdf708973460ae4661,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0b037f989ae55f747b5134bdf708973460ae4661 >> base64 [
	^ ''.
	

]
