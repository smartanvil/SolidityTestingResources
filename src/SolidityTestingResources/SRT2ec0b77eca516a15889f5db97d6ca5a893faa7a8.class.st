Class {
	#name : #SRT2ec0b77eca516a15889f5db97d6ca5a893faa7a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ec0b77eca516a15889f5db97d6ca5a893faa7a8 >> base64 [
	^ ''.
	

]
