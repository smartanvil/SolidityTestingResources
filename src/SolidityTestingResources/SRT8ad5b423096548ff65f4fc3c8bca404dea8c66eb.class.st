Class {
	#name : #SRT8ad5b423096548ff65f4fc3c8bca404dea8c66eb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8ad5b423096548ff65f4fc3c8bca404dea8c66eb >> base64 [
	^ ''.
	

]
