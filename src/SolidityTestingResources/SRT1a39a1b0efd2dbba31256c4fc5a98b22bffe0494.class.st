Class {
	#name : #SRT1a39a1b0efd2dbba31256c4fc5a98b22bffe0494,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1a39a1b0efd2dbba31256c4fc5a98b22bffe0494 >> base64 [
	^ ''.
	

]
