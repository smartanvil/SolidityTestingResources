Class {
	#name : #SRT2b0e91a530bac5e0563a7f8d40ea7fb34cfadc3f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2b0e91a530bac5e0563a7f8d40ea7fb34cfadc3f >> base64 [
	^ ''.
	

]
