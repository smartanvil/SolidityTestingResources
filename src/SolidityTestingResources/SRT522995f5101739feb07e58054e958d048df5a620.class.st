Class {
	#name : #SRT522995f5101739feb07e58054e958d048df5a620,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT522995f5101739feb07e58054e958d048df5a620 >> base64 [
	^ ''.
	

]
