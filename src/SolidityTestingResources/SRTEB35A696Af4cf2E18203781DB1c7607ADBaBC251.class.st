Class {
	#name : #SRTEB35A696Af4cf2E18203781DB1c7607ADBaBC251,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTEB35A696Af4cf2E18203781DB1c7607ADBaBC251 >> base64 [
	^ ''.
	

]
