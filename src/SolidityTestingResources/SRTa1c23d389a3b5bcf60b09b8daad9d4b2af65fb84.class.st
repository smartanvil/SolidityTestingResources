Class {
	#name : #SRTa1c23d389a3b5bcf60b09b8daad9d4b2af65fb84,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1c23d389a3b5bcf60b09b8daad9d4b2af65fb84 >> base64 [
	^ ''.
	

]
