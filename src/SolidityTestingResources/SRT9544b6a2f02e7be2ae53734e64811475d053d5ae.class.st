Class {
	#name : #SRT9544b6a2f02e7be2ae53734e64811475d053d5ae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9544b6a2f02e7be2ae53734e64811475d053d5ae >> base64 [
	^ ''.
	

]
