Class {
	#name : #SRT9d5b592b687c887a5a34df5f9207adb2c2db3aec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9d5b592b687c887a5a34df5f9207adb2c2db3aec >> base64 [
	^ ''.
	

]
