Class {
	#name : #SRT2FCe8f99787677B89c0986B17B25CCf8bd9ffFD1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2FCe8f99787677B89c0986B17B25CCf8bd9ffFD1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9SZXN0cmljdGVkLnNvbAoKLyoqIEB0aXRsZSBSZXN0cmljdGVkCiAqICBFeHBvc2VzIG9ubHlNb25ldGhhIG1vZGlmaWVyCiAqLwpjb250cmFjdCBSZXN0cmljdGVkIGlzIE93bmFibGUgewoKICAgIC8vTW9uZXRoYUFkZHJlc3Mgc2V0IGV2ZW50CiAgICBldmVudCBNb25ldGhhQWRkcmVzc1NldCgKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIGJvb2wgX2lzTW9uZXRoYUFkZHJlc3MKICAgICk7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNNb25ldGhhQWRkcmVzczsKCiAgICAvKioKICAgICAqICBSZXN0cmljdCBtZXRob2RzIGluIHN1Y2ggd2F5LCB0aGF0IHRoZXkgY2FuIGJlIGludm9rZWQgb25seSBieSBtb25ldGhhQWRkcmVzcyBhY2NvdW50LgogICAgICovCiAgICBtb2RpZmllciBvbmx5TW9uZXRoYSgpIHsKICAgICAgICByZXF1aXJlKGlzTW9uZXRoYUFkZHJlc3NbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiAgQWxsb3dzIG93bmVyIHRvIHNldCBuZXcgbW9uZXRoYSBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE1vbmV0aGFBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MsIGJvb2wgX2lzTW9uZXRoYUFkZHJlc3MpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlzTW9uZXRoYUFkZHJlc3NbX2FkZHJlc3NdID0gX2lzTW9uZXRoYUFkZHJlc3M7CgogICAgICAgIE1vbmV0aGFBZGRyZXNzU2V0KF9hZGRyZXNzLCBfaXNNb25ldGhhQWRkcmVzcyk7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TYWZlRGVzdHJ1Y3RpYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlRGVzdHJ1Y3RpYmxlCiAqIEJhc2UgY29udHJhY3QgdGhhdCBjYW4gYmUgZGVzdHJveWVkIGJ5IG93bmVyLgogKiBDYW4gYmUgZGVzdHJ1Y3RlZCBpZiB0aGVyZSBhcmUgbm8gZnVuZHMgb24gY29udHJhY3QgYmFsYW5jZS4KICovCmNvbnRyYWN0IFNhZmVEZXN0cnVjdGlibGUgaXMgT3duYWJsZSB7CiAgICBmdW5jdGlvbiBkZXN0cm95KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPT0gMCk7CiAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL2xpZmVjeWNsZS9QYXVzYWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL293bmVyc2hpcC9Db250YWN0YWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgQ29udGFjdGFibGUgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIGEgY29udGFjdGFibGUgY29udHJhY3QsIGFsbG93aW5nIHRoZSBvd25lciB0byBwcm92aWRlIGEgc3RyaW5nIHdpdGggdGhlaXIKICogY29udGFjdCBpbmZvcm1hdGlvbi4KICovCmNvbnRyYWN0IENvbnRhY3RhYmxlIGlzIE93bmFibGV7CgogICAgc3RyaW5nIHB1YmxpYyBjb250YWN0SW5mb3JtYXRpb247CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgb3duZXIgdG8gc2V0IGEgc3RyaW5nIHdpdGggdGhlaXIgY29udGFjdCBpbmZvcm1hdGlvbi4KICAgICAqIEBwYXJhbSBpbmZvIFRoZSBjb250YWN0IGluZm9ybWF0aW9uIHRvIGF0dGFjaCB0byB0aGUgY29udHJhY3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldENvbnRhY3RJbmZvcm1hdGlvbihzdHJpbmcgaW5mbykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgIGNvbnRhY3RJbmZvcm1hdGlvbiA9IGluZm87CiAgICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvTWVyY2hhbnRXYWxsZXQuc29sCgovKioKICogIEB0aXRsZSBNZXJjaGFudFdhbGxldAogKiAgU2VydmVzIGFzIGEgcHVibGljIE1lcmNoYW50IHByb2ZpbGUgd2l0aCBtZXJjaGFudCBwcm9maWxlIGluZm8sIAogKiAgICAgIHBheW1lbnQgc2V0dGluZ3MgYW5kIGxhdGVzdCByZXB1dGF0aW9uIHZhbHVlLgogKiAgQWxzbyBNZXJjaGFudFdhbGxldCBhY2NlcHRzIHBheW1lbnRzIGZvciBvcmRlcnMuCiAqLwoKY29udHJhY3QgTWVyY2hhbnRXYWxsZXQgaXMgUGF1c2FibGUsIFNhZmVEZXN0cnVjdGlibGUsIENvbnRhY3RhYmxlLCBSZXN0cmljdGVkIHsKICAgIAogICAgc3RyaW5nIGNvbnN0YW50IFZFUlNJT04gPSAiMC4zIjsKCiAgICAvLy8gQWRkcmVzcyBvZiBtZXJjaGFudCdzIGFjY291bnQsIHRoYXQgY2FuIHdpdGhkcmF3IGZyb20gd2FsbGV0CiAgICBhZGRyZXNzIHB1YmxpYyBtZXJjaGFudEFjY291bnQ7CiAgICAKICAgIC8vLyBVbmlxdWUgTWVyY2hhbnQgaWRlbnRpZmllciBoYXNoCiAgICBieXRlczMyIHB1YmxpYyBtZXJjaGFudElkSGFzaDsKCiAgICAvLy8gcHJvZmlsZU1hcCBzdG9yZXMgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWVyY2hhbnQKICAgIG1hcHBpbmcgKHN0cmluZz0+c3RyaW5nKSBwcm9maWxlTWFwOwoKICAgIC8vLyBwYXltZW50U2V0dGluZ3NNYXAgc3RvcmVzIHBheW1lbnQgYW5kIG9yZGVyIHNldHRpbmdzIGZvciB0aGUgbWVyY2hhbnQKICAgIG1hcHBpbmcgKHN0cmluZz0+c3RyaW5nKSBwYXltZW50U2V0dGluZ3NNYXA7CgogICAgLy8vIGNvbXBvc2l0ZVJlcHV0YXRpb25NYXAgc3RvcmVzIGNvbXBvc2l0ZSByZXB1dGF0aW9uLCB0aGF0IGNvbXByYWlzZXMgZnJvbSBzZXZlcmFsIG1ldHJpY3MKICAgIG1hcHBpbmcgKHN0cmluZz0+dWludDMyKSBjb21wb3NpdGVSZXB1dGF0aW9uTWFwOwoKICAgIC8vLyBudW1iZXIgb2YgbGFzdCBkaWdpdHMgaW4gY29tcG9zaXRlUmVwdXRhdGlvbiBmb3IgZnJhY3Rpb25hbCBwYXJ0CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgUkVQVVRBVElPTl9ERUNJTUFMUyA9IDQ7CgogICAgbW9kaWZpZXIgb25seU1lcmNoYW50KCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtZXJjaGFudEFjY291bnQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudEFjY291bnQgQWRkcmVzcyBvZiBtZXJjaGFudCdzIGFjY291bnQsIHRoYXQgY2FuIHdpdGhkcmF3IGZyb20gd2FsbGV0CiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudElkIE1lcmNoYW50IGlkZW50aWZpZXIKICAgICAqLwogICAgZnVuY3Rpb24gTWVyY2hhbnRXYWxsZXQoYWRkcmVzcyBfbWVyY2hhbnRBY2NvdW50LCBzdHJpbmcgX21lcmNoYW50SWQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfbWVyY2hhbnRBY2NvdW50ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShieXRlcyhfbWVyY2hhbnRJZCkubGVuZ3RoID4gMCk7CiAgICAgICAgCiAgICAgICAgbWVyY2hhbnRBY2NvdW50ID0gX21lcmNoYW50QWNjb3VudDsKICAgICAgICBtZXJjaGFudElkSGFzaCA9IGtlY2NhazI1NihfbWVyY2hhbnRJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgQWNjZXB0IHBheW1lbnQgZnJvbSBNb25ldGhhR2F0ZXdheQogICAgICovCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgIH0KCiAgICAvKioKICAgICAqICBAcmV0dXJuIHByb2ZpbGUgaW5mbyBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIHByb2ZpbGUoc3RyaW5nIGtleSkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHByb2ZpbGVNYXBba2V5XTsKICAgIH0KCiAgICAvKioKICAgICAqICBAcmV0dXJuIHBheW1lbnQgc2V0dGluZyBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBheW1lbnRTZXR0aW5ncyhzdHJpbmcga2V5KSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gcGF5bWVudFNldHRpbmdzTWFwW2tleV07CiAgICB9CgogICAgLyoqCiAgICAgKiAgQHJldHVybiBjb21wb3NpdGUgcmVwdXRhdGlvbiB2YWx1ZSBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZVJlcHV0YXRpb24oc3RyaW5nIGtleSkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDMyKSB7CiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVJlcHV0YXRpb25NYXBba2V5XTsKICAgIH0KCiAgICAvKioKICAgICAqICBTZXQgcHJvZmlsZSBpbmZvIGJ5IHN0cmluZyBrZXkKICAgICAqLwogICAgZnVuY3Rpb24gc2V0UHJvZmlsZSgKICAgICAgICBzdHJpbmcgcHJvZmlsZUtleSwKICAgICAgICBzdHJpbmcgcHJvZmlsZVZhbHVlLAogICAgICAgIHN0cmluZyByZXBLZXksCiAgICAgICAgdWludDMyIHJlcFZhbHVlCiAgICApIGV4dGVybmFsIG9ubHlPd25lcgogICAgewogICAgICAgIHByb2ZpbGVNYXBbcHJvZmlsZUtleV0gPSBwcm9maWxlVmFsdWU7CiAgICAgICAgCiAgICAgICAgaWYgKGJ5dGVzKHJlcEtleSkubGVuZ3RoICE9IDApIHsKICAgICAgICAgICAgY29tcG9zaXRlUmVwdXRhdGlvbk1hcFtyZXBLZXldID0gcmVwVmFsdWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogIFNldCBwYXltZW50IHNldHRpbmcgYnkgc3RyaW5nIGtleQogICAgICovCiAgICBmdW5jdGlvbiBzZXRQYXltZW50U2V0dGluZ3Moc3RyaW5nIGtleSwgc3RyaW5nIHZhbHVlKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHBheW1lbnRTZXR0aW5nc01hcFtrZXldID0gdmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiAgU2V0IGNvbXBvc2l0ZSByZXB1dGF0aW9uIHZhbHVlIGJ5IHN0cmluZyBrZXkKICAgICAqLwogICAgZnVuY3Rpb24gc2V0Q29tcG9zaXRlUmVwdXRhdGlvbihzdHJpbmcga2V5LCB1aW50MzIgdmFsdWUpIGV4dGVybmFsIG9ubHlNb25ldGhhIHsKICAgICAgICBjb21wb3NpdGVSZXB1dGF0aW9uTWFwW2tleV0gPSB2YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqICBBbGxvd3MgbWVyY2hhbnQgdG8gd2l0aGRyYXcgZnVuZHMgdG8gYmVuZWZpY2lhcnkgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1RvKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQgYW1vdW50KSBwdWJsaWMgb25seU1lcmNoYW50IHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2ZlcihhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBtZXJjaGFudCB0byB3aXRoZHJhdyBmdW5kcyB0byBpdCdzIG93biBhY2NvdW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgYW1vdW50KSBleHRlcm5hbCB7CiAgICAgICAgd2l0aGRyYXdUbyhtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBtZXJjaGFudCB0byBjaGFuZ2UgaXQncyBhY2NvdW50IGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlTWVyY2hhbnRBY2NvdW50KGFkZHJlc3MgbmV3QWNjb3VudCkgZXh0ZXJuYWwgb25seU1lcmNoYW50IHdoZW5Ob3RQYXVzZWQgewogICAgICAgIG1lcmNoYW50QWNjb3VudCA9IG5ld0FjY291bnQ7CiAgICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9saWZlY3ljbGUvRGVzdHJ1Y3RpYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBEZXN0cnVjdGlibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHRoYXQgY2FuIGJlIGRlc3Ryb3llZCBieSBvd25lci4gQWxsIGZ1bmRzIGluIGNvbnRyYWN0IHdpbGwgYmUgc2VudCB0byB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBEZXN0cnVjdGlibGUgaXMgT3duYWJsZSB7CgogIGZ1bmN0aW9uIERlc3RydWN0aWJsZSgpIHBheWFibGUgeyB9CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXJzIHRoZSBjdXJyZW50IGJhbGFuY2UgdG8gdGhlIG93bmVyIGFuZCB0ZXJtaW5hdGVzIHRoZSBjb250cmFjdC4KICAgKi8KICBmdW5jdGlvbiBkZXN0cm95KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCiAgZnVuY3Rpb24gZGVzdHJveUFuZFNlbmQoYWRkcmVzcyBfcmVjaXBpZW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgIHNlbGZkZXN0cnVjdChfcmVjaXBpZW50KTsKICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Nb25ldGhhR2F0ZXdheS5zb2wKCi8qKgogKiAgQHRpdGxlIE1vbmV0aGFHYXRld2F5CiAqCiAqICBNb25ldGhhR2F0ZXdheSBmb3J3YXJkIGZ1bmRzIGZyb20gb3JkZXIgcGF5bWVudCB0byBtZXJjaGFudCdzIHdhbGxldCBhbmQgY29sbGVjdHMgTW9uZXRoYSBmZWUuCiAqLwpjb250cmFjdCBNb25ldGhhR2F0ZXdheSBpcyBQYXVzYWJsZSwgQ29udGFjdGFibGUsIERlc3RydWN0aWJsZSwgUmVzdHJpY3RlZCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIHN0cmluZyBjb25zdGFudCBWRVJTSU9OID0gIjAuNCI7CgogICAgLyoqCiAgICAgKiAgRmVlIHBlcm1pbGxlIG9mIE1vbmV0aGEgZmVlLgogICAgICogIDEgcGVybWlsbGUgKOKAsCkgPSAwLjEgcGVyY2VudCAoJSkKICAgICAqICAxNeKAsCA9IDEuNSUKICAgICAqLwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgRkVFX1BFUk1JTExFID0gMTU7CiAgICAKICAgIC8qKgogICAgICogIEFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdCBmb3IgZmVlIGNvbGxlY3Rpb24KICAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgbW9uZXRoYVZhdWx0OwoKICAgIC8qKgogICAgICogIEFjY291bnQgZm9yIHBlcm1pc3Npb25zIG1hbmFnaW5nCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIGFkbWluOwoKICAgIGV2ZW50IFBheW1lbnRQcm9jZXNzZWQoYWRkcmVzcyBtZXJjaGFudFdhbGxldCwgdWludCBtZXJjaGFudEluY29tZSwgdWludCBtb25ldGhhSW5jb21lKTsKCiAgICAvKioKICAgICAqICBAcGFyYW0gX21vbmV0aGFWYXVsdCBBZGRyZXNzIG9mIE1vbmV0aGEgVmF1bHQKICAgICAqLwogICAgZnVuY3Rpb24gTW9uZXRoYUdhdGV3YXkoYWRkcmVzcyBfbW9uZXRoYVZhdWx0LCBhZGRyZXNzIF9hZG1pbikgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9tb25ldGhhVmF1bHQgIT0gMHgwKTsKICAgICAgICBtb25ldGhhVmF1bHQgPSBfbW9uZXRoYVZhdWx0OwogICAgICAgIAogICAgICAgIHNldEFkbWluKF9hZG1pbik7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogIGFjY2VwdFBheW1lbnQgYWNjZXB0IHBheW1lbnQgZnJvbSBQYXltZW50QWNjZXB0b3IsIGZvcndhcmRzIGl0IHRvIG1lcmNoYW50J3Mgd2FsbGV0CiAgICAgKiAgICAgIGFuZCBjb2xsZWN0cyBNb25ldGhhIGZlZS4KICAgICAqICBAcGFyYW0gX21lcmNoYW50V2FsbGV0IGFkZHJlc3Mgb2YgbWVyY2hhbnQncyB3YWxsZXQgZm9yIGZ1bmQgdHJhbnNmZXIKICAgICAqICBAcGFyYW0gX21vbmV0aGFGZWUgaXMgYSBmZWUgY29sbGVjdGVkIGJ5IE1vbmV0aGEKICAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0UGF5bWVudChhZGRyZXNzIF9tZXJjaGFudFdhbGxldCwgdWludCBfbW9uZXRoYUZlZSkgZXh0ZXJuYWwgcGF5YWJsZSBvbmx5TW9uZXRoYSB3aGVuTm90UGF1c2VkIHsKICAgICAgICByZXF1aXJlKF9tZXJjaGFudFdhbGxldCAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX21vbmV0aGFGZWUgPj0gMCAmJiBfbW9uZXRoYUZlZSA8PSBGRUVfUEVSTUlMTEUubXVsKG1zZy52YWx1ZSkuZGl2KDEwMDApKTsgLy8gTW9uZXRoYSBmZWUgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAxLjUlIG9mIHBheW1lbnQKCiAgICAgICAgdWludCBtZXJjaGFudEluY29tZSA9IG1zZy52YWx1ZS5zdWIoX21vbmV0aGFGZWUpOwoKICAgICAgICBfbWVyY2hhbnRXYWxsZXQudHJhbnNmZXIobWVyY2hhbnRJbmNvbWUpOwogICAgICAgIG1vbmV0aGFWYXVsdC50cmFuc2ZlcihfbW9uZXRoYUZlZSk7CgogICAgICAgIFBheW1lbnRQcm9jZXNzZWQoX21lcmNoYW50V2FsbGV0LCBtZXJjaGFudEluY29tZSwgX21vbmV0aGFGZWUpOwogICAgfQoKICAgIC8qKgogICAgICogIGNoYW5nZU1vbmV0aGFWYXVsdCBhbGxvd3Mgb3duZXIgdG8gY2hhbmdlIGFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdC4KICAgICAqICBAcGFyYW0gbmV3VmF1bHQgTmV3IGFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdAogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VNb25ldGhhVmF1bHQoYWRkcmVzcyBuZXdWYXVsdCkgZXh0ZXJuYWwgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIG1vbmV0aGFWYXVsdCA9IG5ld1ZhdWx0OwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBvdGhlciBtb25ldGhhIGFjY291bnQgb3IgY29udHJhY3QgdG8gc2V0IG5ldyBtb25ldGhhIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TW9uZXRoYUFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcywgYm9vbCBfaXNNb25ldGhhQWRkcmVzcykgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4gfHwgbXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgICAgIGlzTW9uZXRoYUFkZHJlc3NbX2FkZHJlc3NdID0gX2lzTW9uZXRoYUFkZHJlc3M7CgogICAgICAgIE1vbmV0aGFBZGRyZXNzU2V0KF9hZGRyZXNzLCBfaXNNb25ldGhhQWRkcmVzcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgc2V0QWRtaW4gYWxsb3dzIG93bmVyIHRvIGNoYW5nZSBhZGRyZXNzIG9mIGFkbWluLgogICAgICogIEBwYXJhbSBfYWRtaW4gTmV3IGFkZHJlc3Mgb2YgYWRtaW4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QWRtaW4oYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX2FkbWluICE9IDB4MCk7CiAgICAgICAgYWRtaW4gPSBfYWRtaW47CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Qcml2YXRlUGF5bWVudFByb2Nlc3Nvci5zb2wKCmNvbnRyYWN0IFByaXZhdGVQYXltZW50UHJvY2Vzc29yIGlzIFBhdXNhYmxlLCBEZXN0cnVjdGlibGUsIENvbnRhY3RhYmxlLCBSZXN0cmljdGVkIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBzdHJpbmcgY29uc3RhbnQgVkVSU0lPTiA9ICIwLjQiOwoKICAgIC8vIE9yZGVyIHBhaWQgZXZlbnQKICAgIGV2ZW50IE9yZGVyUGFpZCgKICAgICAgICB1aW50IGluZGV4ZWQgX29yZGVySWQsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9vcmlnaW5BZGRyZXNzLAogICAgICAgIHVpbnQgX3ByaWNlLAogICAgICAgIHVpbnQgX21vbmV0aGFGZWUKICAgICk7CgogICAgLy8gUGF5bWVudHMgaGF2ZSBiZWVuIHByb2Nlc3NlZCBldmVudAogICAgZXZlbnQgUGF5bWVudHNQcm9jZXNzZWQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9tZXJjaGFudEFkZHJlc3MsCiAgICAgICAgdWludCBfYW1vdW50LAogICAgICAgIHVpbnQgX2ZlZQogICAgKTsKCiAgICAvLyBQYXltZW50UmVmdW5kaW5nIGlzIGFuIGV2ZW50IHdoZW4gcmVmdW5kaW5nIGluaXRpYWxpemVkCiAgICBldmVudCBQYXltZW50UmVmdW5kaW5nKAogICAgICAgICB1aW50IGluZGV4ZWQgX29yZGVySWQsCiAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfY2xpZW50QWRkcmVzcywKICAgICAgICAgdWludCBfYW1vdW50LAogICAgICAgICBzdHJpbmcgX3JlZnVuZFJlYXNvbik7CgogICAgLy8gUGF5bWVudFdpdGhkcmF3biBldmVudCBpcyBmaXJlZCB3aGVuIHBheW1lbnQgaXMgd2l0aGRyYXduCiAgICBldmVudCBQYXltZW50V2l0aGRyYXduKAogICAgICAgIHVpbnQgaW5kZXhlZCBfb3JkZXJJZCwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgdWludCBhbW91bnQpOwoKICAgIC8vLyBNb25ldGhhR2F0ZXdheSBjb250cmFjdCBmb3IgcGF5bWVudCBwcm9jZXNzaW5nCiAgICBNb25ldGhhR2F0ZXdheSBwdWJsaWMgbW9uZXRoYUdhdGV3YXk7CgogICAgLy8vIEFkZHJlc3Mgb2YgTWVyY2hhbnRXYWxsZXQsIHdoZXJlIG1lcmNoYW50IHJlcHV0YXRpb24gYW5kIGZ1bmRzIGFyZSBzdG9yZWQKICAgIE1lcmNoYW50V2FsbGV0IHB1YmxpYyBtZXJjaGFudFdhbGxldDsKCiAgICAvLy8gTWVyY2hhbnQgaWRlbnRpZmllciBoYXNoLCB0aGF0IGFzc29jaWF0ZXMgd2l0aCB0aGUgYWNjZXB0b3IKICAgIGJ5dGVzMzIgcHVibGljIG1lcmNoYW50SWRIYXNoOwoKICAgIGVudW0gV2l0aGRyYXdTdGF0ZSB7TnVsbCwgUGVuZGluZywgV2l0aGRyYXdufQoKICAgIHN0cnVjdCBXaXRoZHJhdyB7CiAgICAgICAgV2l0aGRyYXdTdGF0ZSBzdGF0ZTsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICBhZGRyZXNzIGNsaWVudEFkZHJlc3M7CiAgICB9CgogICAgbWFwcGluZyAodWludD0+V2l0aGRyYXcpIHB1YmxpYyB3aXRoZHJhd2FsczsKCiAgICAvKioKICAgICAqICBQcml2YXRlIFBheW1lbnQgUHJvY2Vzc29yIHNldHMgTW9uZXRoYSBHYXRld2F5IGFuZCBNZXJjaGFudCBXYWxsZXQuCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudElkIE1lcmNoYW50IG9mIHRoZSBhY2NlcHRvcgogICAgICogIEBwYXJhbSBfbW9uZXRoYUdhdGV3YXkgQWRkcmVzcyBvZiBNb25ldGhhR2F0ZXdheSBjb250cmFjdCBmb3IgcGF5bWVudCBwcm9jZXNzaW5nCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudFdhbGxldCBBZGRyZXNzIG9mIE1lcmNoYW50V2FsbGV0LCB3aGVyZSBtZXJjaGFudCByZXB1dGF0aW9uIGFuZCBmdW5kcyBhcmUgc3RvcmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIFByaXZhdGVQYXltZW50UHJvY2Vzc29yKAogICAgICAgIHN0cmluZyBfbWVyY2hhbnRJZCwKICAgICAgICBNb25ldGhhR2F0ZXdheSBfbW9uZXRoYUdhdGV3YXksCiAgICAgICAgTWVyY2hhbnRXYWxsZXQgX21lcmNoYW50V2FsbGV0CiAgICApIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoYnl0ZXMoX21lcmNoYW50SWQpLmxlbmd0aCA+IDApOwoKICAgICAgICBtZXJjaGFudElkSGFzaCA9IGtlY2NhazI1NihfbWVyY2hhbnRJZCk7CgogICAgICAgIHNldE1vbmV0aGFHYXRld2F5KF9tb25ldGhhR2F0ZXdheSk7CiAgICAgICAgc2V0TWVyY2hhbnRXYWxsZXQoX21lcmNoYW50V2FsbGV0KTsKICAgIH0KCiAgICAvKioKICAgICAqICBwYXlGb3JPcmRlciBpcyB1c2VkIGJ5IG9yZGVyIHdhbGxldC9jbGllbnQgdG8gcGF5IGZvciB0aGUgb3JkZXIKICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiB0aGUgb3JkZXIKICAgICAqICBAcGFyYW0gX29yaWdpbkFkZHJlc3MgYnV5ZXIgYWRkcmVzcwogICAgICogIEBwYXJhbSBfbW9uZXRoYUZlZSBpcyBmZWUgY29sbGVjdGVkIGJ5IE1vbmV0aGEKICAgICAqLwogICAgZnVuY3Rpb24gcGF5Rm9yT3JkZXIoCiAgICAgICAgdWludCBfb3JkZXJJZCwKICAgICAgICBhZGRyZXNzIF9vcmlnaW5BZGRyZXNzLAogICAgICAgIHVpbnQgX21vbmV0aGFGZWUKICAgICkgZXh0ZXJuYWwgcGF5YWJsZSB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgcmVxdWlyZShfb3JkZXJJZCA+IDApOwogICAgICAgIHJlcXVpcmUoX29yaWdpbkFkZHJlc3MgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwoKICAgICAgICBtb25ldGhhR2F0ZXdheS5hY2NlcHRQYXltZW50LnZhbHVlKG1zZy52YWx1ZSkobWVyY2hhbnRXYWxsZXQsIF9tb25ldGhhRmVlKTsKCiAgICAgICAgLy8gbG9nIHBheW1lbnQgZXZlbnQKICAgICAgICBPcmRlclBhaWQoX29yZGVySWQsIF9vcmlnaW5BZGRyZXNzLCBtc2cudmFsdWUsIF9tb25ldGhhRmVlKTsKICAgIH0KCiAgICAvKioKICAgICAqICByZWZ1bmRQYXltZW50IHVzZWQgaW4gY2FzZSBvcmRlciBjYW5ub3QgYmUgcHJvY2Vzc2VkIGFuZCBmdW5kcyBuZWVkIHRvIGJlIHJldHVybmVkCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpbml0aWF0ZSBwcm9jZXNzIG9mIGZ1bmRzIHJlZnVuZGluZyB0byB0aGUgY2xpZW50LgogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIHRoZSBvcmRlcgogICAgICogIEBwYXJhbSBfY2xpZW50QWRkcmVzcyBpcyBhbiBhZGRyZXNzIG9mIGNsaWVudAogICAgICogIEBwYXJhbSBfcmVmdW5kUmVhc29uIE9yZGVyIHJlZnVuZCByZWFzb24KICAgICAqLwogICAgZnVuY3Rpb24gcmVmdW5kUGF5bWVudCgKICAgICAgICB1aW50IF9vcmRlcklkLAogICAgICAgIGFkZHJlc3MgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgc3RyaW5nIF9yZWZ1bmRSZWFzb24KICAgICkgZXh0ZXJuYWwgcGF5YWJsZSBvbmx5TW9uZXRoYSB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgcmVxdWlyZShfb3JkZXJJZCA+IDApOwogICAgICAgIHJlcXVpcmUoX2NsaWVudEFkZHJlc3MgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoV2l0aGRyYXdTdGF0ZS5OdWxsID09IHdpdGhkcmF3YWxzW19vcmRlcklkXS5zdGF0ZSk7CgogICAgICAgIC8vIGNyZWF0ZSB3aXRoZHJhdwogICAgICAgIHdpdGhkcmF3YWxzW19vcmRlcklkXSA9IFdpdGhkcmF3KHsKICAgICAgICAgICAgc3RhdGU6IFdpdGhkcmF3U3RhdGUuUGVuZGluZywKICAgICAgICAgICAgYW1vdW50OiBtc2cudmFsdWUsCiAgICAgICAgICAgIGNsaWVudEFkZHJlc3M6IF9jbGllbnRBZGRyZXNzCiAgICAgICAgICAgIH0pOwoKICAgICAgICAvLyBsb2cgcmVmdW5kaW5nCiAgICAgICAgUGF5bWVudFJlZnVuZGluZyhfb3JkZXJJZCwgX2NsaWVudEFkZHJlc3MsIG1zZy52YWx1ZSwgX3JlZnVuZFJlYXNvbik7CiAgICB9CgogICAgLyoqCiAgICAgKiAgd2l0aGRyYXdSZWZ1bmQgcGVyZm9ybXMgZnVuZCB0cmFuc2ZlciB0byB0aGUgY2xpZW50J3MgYWNjb3VudC4KICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiB0aGUgb3JkZXIKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdSZWZ1bmQodWludCBfb3JkZXJJZCkKICAgIGV4dGVybmFsIHdoZW5Ob3RQYXVzZWQKICAgIHsKICAgICAgICBXaXRoZHJhdyBzdG9yYWdlIHdpdGhkcmF3ID0gd2l0aGRyYXdhbHNbX29yZGVySWRdOwogICAgICAgIHJlcXVpcmUoV2l0aGRyYXdTdGF0ZS5QZW5kaW5nID09IHdpdGhkcmF3LnN0YXRlKTsKCiAgICAgICAgYWRkcmVzcyBjbGllbnRBZGRyZXNzID0gd2l0aGRyYXcuY2xpZW50QWRkcmVzczsKICAgICAgICB1aW50IGFtb3VudCA9IHdpdGhkcmF3LmFtb3VudDsKCiAgICAgICAgLy8gY2hhbmdpbmcgd2l0aGRyYXcgc3RhdGUgYmVmb3JlIHRyYW5zZmVyCiAgICAgICAgd2l0aGRyYXcuc3RhdGUgPSBXaXRoZHJhd1N0YXRlLldpdGhkcmF3bjsKCiAgICAgICAgLy8gdHJhbnNmZXIgZnVuZCB0byBjbGllbnRzIGFjY291bnQKICAgICAgICBjbGllbnRBZGRyZXNzLnRyYW5zZmVyKGFtb3VudCk7CgogICAgICAgIC8vIGxvZyB3aXRoZHJhd24KICAgICAgICBQYXltZW50V2l0aGRyYXduKF9vcmRlcklkLCBjbGllbnRBZGRyZXNzLCBhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogIHNldE1vbmV0aGFHYXRld2F5IGFsbG93cyBvd25lciB0byBjaGFuZ2UgYWRkcmVzcyBvZiBNb25ldGhhR2F0ZXdheS4KICAgICAqICBAcGFyYW0gX25ld0dhdGV3YXkgQWRkcmVzcyBvZiBuZXcgTW9uZXRoYUdhdGV3YXkgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TW9uZXRoYUdhdGV3YXkoTW9uZXRoYUdhdGV3YXkgX25ld0dhdGV3YXkpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoYWRkcmVzcyhfbmV3R2F0ZXdheSkgIT0gMHgwKTsKCiAgICAgICAgbW9uZXRoYUdhdGV3YXkgPSBfbmV3R2F0ZXdheTsKICAgIH0KCiAgICAvKioKICAgICAqICBzZXRNZXJjaGFudFdhbGxldCBhbGxvd3Mgb3duZXIgdG8gY2hhbmdlIGFkZHJlc3Mgb2YgTWVyY2hhbnRXYWxsZXQuCiAgICAgKiAgQHBhcmFtIF9uZXdXYWxsZXQgQWRkcmVzcyBvZiBuZXcgTWVyY2hhbnRXYWxsZXQgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TWVyY2hhbnRXYWxsZXQoTWVyY2hhbnRXYWxsZXQgX25ld1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKF9uZXdXYWxsZXQpICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShfbmV3V2FsbGV0Lm1lcmNoYW50SWRIYXNoKCkgPT0gbWVyY2hhbnRJZEhhc2gpOwoKICAgICAgICBtZXJjaGFudFdhbGxldCA9IF9uZXdXYWxsZXQ7CiAgICB9Cn0='.
	

]
