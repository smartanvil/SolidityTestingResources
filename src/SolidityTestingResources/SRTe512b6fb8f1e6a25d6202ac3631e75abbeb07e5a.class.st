Class {
	#name : #SRTe512b6fb8f1e6a25d6202ac3631e75abbeb07e5a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe512b6fb8f1e6a25d6202ac3631e75abbeb07e5a >> base64 [
	^ ''.
	

]
