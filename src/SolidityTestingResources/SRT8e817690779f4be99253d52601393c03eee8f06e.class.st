Class {
	#name : #SRT8e817690779f4be99253d52601393c03eee8f06e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8e817690779f4be99253d52601393c03eee8f06e >> base64 [
	^ ''.
	

]
