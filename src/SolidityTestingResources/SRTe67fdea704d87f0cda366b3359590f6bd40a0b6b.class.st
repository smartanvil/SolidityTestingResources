Class {
	#name : #SRTe67fdea704d87f0cda366b3359590f6bd40a0b6b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe67fdea704d87f0cda366b3359590f6bd40a0b6b >> base64 [
	^ ''.
	

]
