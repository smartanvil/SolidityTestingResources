Class {
	#name : #SRT0c411ffFc6d3a8E4ca5f81bBC98b5B3EdA8FC3C7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0c411ffFc6d3a8E4ca5f81bBC98b5B3EdA8FC3C7 >> base64 [
	^ ''.
	

]
