Class {
	#name : #SRTc316074c2eb9d7076088da1571ee349186c777ad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc316074c2eb9d7076088da1571ee349186c777ad >> base64 [
	^ ''.
	

]
