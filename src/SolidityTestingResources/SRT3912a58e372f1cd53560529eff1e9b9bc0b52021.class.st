Class {
	#name : #SRT3912a58e372f1cd53560529eff1e9b9bc0b52021,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3912a58e372f1cd53560529eff1e9b9bc0b52021 >> base64 [
	^ ''.
	

]
