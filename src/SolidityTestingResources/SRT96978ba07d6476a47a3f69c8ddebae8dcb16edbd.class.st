Class {
	#name : #SRT96978ba07d6476a47a3f69c8ddebae8dcb16edbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96978ba07d6476a47a3f69c8ddebae8dcb16edbd >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7IC8vIHNvbGhpbnQtZGlzYWJsZS1saW5lCgoKCmNvbnRyYWN0IFBvdFBvdGF0b3sKICAgIGFkZHJlc3MgcHVibGljIGNlb0FkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBob3RQb3RhdG9Ib2xkZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBsYXN0SG90UG90YXRvSG9sZGVyOwogICAgdWludDI1NiBwdWJsaWMgbGFzdEJpZFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBjb250ZXN0U3RhcnRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgbGFzdFBvdDsKCiAgICBQb3RhdG9bXSBwdWJsaWMgcG90YXRvZXM7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIEJBU0VfVElNRV9UT19DT09LPTMwIG1pbnV0ZXM7Ly82MCBzZWNvbmRzOwogICAgdWludDI1NiBwdWJsaWMgVElNRV9NVUxUSVBMSUVSPTUgbWludXRlczsvLzUgc2Vjb25kczsvL3RpbWUgcGVyIGluZGV4IG9mIHBvdGF0bwogICAgdWludDI1NiBwdWJsaWMgVElNRV9UT19DT09LPUJBU0VfVElNRV9UT19DT09LOyAvL3RoaXMgY2hhbmdlcwogICAgdWludDI1NiBwdWJsaWMgTlVNX1BPVEFUT0VTPTEyOwogICAgdWludDI1NiBwdWJsaWMgU1RBUlRfUFJJQ0U9MC4wMDEgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBDT05URVNUX0lOVEVSVkFMPTEgd2Vla3M7Ly80IG1pbnV0ZXM7Ly8xIHdlZWsKICAgIAogICAgLyoqKiBEQVRBVFlQRVMgKioqLwogICAgc3RydWN0IFBvdGF0byB7CiAgICAgICAgYWRkcmVzcyBvd25lcjsKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgfQogICAgCiAgICAvKioqIENPTlNUUlVDVE9SICoqKi8KICAgIGZ1bmN0aW9uIFBvdFBvdGF0bygpIHB1YmxpY3sKICAgICAgICBjZW9BZGRyZXNzPW1zZy5zZW5kZXI7CiAgICAgICAgaG90UG90YXRvSG9sZGVyPTA7CiAgICAgICAgY29udGVzdFN0YXJ0VGltZT0xNTIwNzk5NzU0Oy8vc3VuZGF5IG1hcmNoIDExCiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGk8TlVNX1BPVEFUT0VTOyBpKyspewogICAgICAgICAgICBQb3RhdG8gbWVtb3J5IG5ld3BvdGF0bz1Qb3RhdG8oe293bmVyOmFkZHJlc3ModGhpcykscHJpY2U6IFNUQVJUX1BSSUNFfSk7CiAgICAgICAgICAgIHBvdGF0b2VzLnB1c2gobmV3cG90YXRvKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8qKiogUFVCTElDIEZVTkNUSU9OUyAqKiovCiAgICBmdW5jdGlvbiBidXlQb3RhdG8odWludDI1NiBpbmRleCkgcHVibGljIHBheWFibGV7CiAgICAgICAgcmVxdWlyZShibG9jay50aW1lc3RhbXA+Y29udGVzdFN0YXJ0VGltZSk7CiAgICAgICAgaWYoX2VuZENvbnRlc3RJZk5lZWRlZCgpKXsgCgogICAgICAgIH0KICAgICAgICBlbHNlewogICAgICAgICAgICBQb3RhdG8gc3RvcmFnZSBwb3RhdG89cG90YXRvZXNbaW5kZXhdOwogICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBwb3RhdG8ucHJpY2UpOwogICAgICAgICAgICAvL2FsbG93IGNhbGxpbmcgdHJhbnNmZXIoKSBvbiB0aGVzZSBhZGRyZXNzZXMgd2l0aG91dCByaXNraW5nIHJlLWVudHJhbmN5IGF0dGFja3MKICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IHBvdGF0by5vd25lcik7CiAgICAgICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBjZW9BZGRyZXNzKTsKICAgICAgICAgICAgdWludDI1NiBzZWxsaW5nUHJpY2U9cG90YXRvLnByaWNlOwogICAgICAgICAgICB1aW50MjU2IHB1cmNoYXNlRXhjZXNzID0gU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgc2VsbGluZ1ByaWNlKTsKICAgICAgICAgICAgdWludDI1NiBwYXltZW50ID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgNzYpLCAxMDApKTsKICAgICAgICAgICAgdWludDI1NiBkZXZGZWU9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIDQpLCAxMDApKTsKICAgICAgICAgICAgLy8yMCBwZXJjZW50IHJlbWFpbmluZyBpbiB0aGUgY29udHJhY3QgZ29lcyB0byB0aGUgcG90CiAgICAgICAgICAgIC8vaWYgdGhlIG93bmVyIGlzIHRoZSBjb250cmFjdCwgdGhpcyBpcyB0aGUgZmlyc3QgcHVyY2hhc2UsIGFuZCBwYXltZW50IHNob3VsZCBnbyB0byB0aGUgcG90CiAgICAgICAgICAgIGlmKHBvdGF0by5vd25lciE9YWRkcmVzcyh0aGlzKSl7CiAgICAgICAgICAgICAgICBwb3RhdG8ub3duZXIudHJhbnNmZXIocGF5bWVudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2VvQWRkcmVzcy50cmFuc2ZlcihkZXZGZWUpOwogICAgICAgICAgICBwb3RhdG8ucHJpY2U9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCAxNTApLCA3Nik7CiAgICAgICAgICAgIHBvdGF0by5vd25lcj1tc2cuc2VuZGVyOy8vdHJhbnNmZXIgb3duZXJzaGlwCiAgICAgICAgICAgIGhvdFBvdGF0b0hvbGRlcj1tc2cuc2VuZGVyOy8vYmVjb21lcyBob2xkZXIgd2l0aCBwb3RlbnRpYWwgdG8gd2luIHRoZSBwb3QKICAgICAgICAgICAgbGFzdEJpZFRpbWU9YmxvY2sudGltZXN0YW1wOwogICAgICAgICAgICBUSU1FX1RPX0NPT0s9U2FmZU1hdGguYWRkKEJBU0VfVElNRV9UT19DT09LLFNhZmVNYXRoLm11bChpbmRleCxUSU1FX01VTFRJUExJRVIpKTsgLy9wb3RzIGhhdmUgdGltZXMgdG8gY29vayB2YXJ5aW5nIGZyb20gMzAtODUgbWludXRlcwogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHB1cmNoYXNlRXhjZXNzKTsvL3JldHVybnMgZXhjZXNzIGV0aAogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0QmFsYW5jZSgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NiB2YWx1ZSl7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0KICAgIGZ1bmN0aW9uIHRpbWVQYXNzZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYgdGltZSl7CiAgICAgICAgaWYobGFzdEJpZFRpbWU9PTApewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFNhZmVNYXRoLnN1YihibG9jay50aW1lc3RhbXAsbGFzdEJpZFRpbWUpOwogICAgfQogICAgZnVuY3Rpb24gdGltZUxlZnRUb0NvbnRlc3RTdGFydCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NiB0aW1lKXsKICAgICAgICBpZihibG9jay50aW1lc3RhbXA+Y29udGVzdFN0YXJ0VGltZSl7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gU2FmZU1hdGguc3ViKGNvbnRlc3RTdGFydFRpbWUsYmxvY2sudGltZXN0YW1wKTsKICAgIH0KICAgIGZ1bmN0aW9uIHRpbWVMZWZ0VG9Db29rKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2IHRpbWUpewogICAgICAgIHJldHVybiBTYWZlTWF0aC5zdWIoVElNRV9UT19DT09LLHRpbWVQYXNzZWQoKSk7CiAgICB9CiAgICBmdW5jdGlvbiBjb250ZXN0T3ZlcigpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCl7CiAgICAgICAgcmV0dXJuIHRpbWVQYXNzZWQoKT49VElNRV9UT19DT09LOwogICAgfQogICAgCiAgICAvKioqIFBSSVZBVEUgRlVOQ1RJT05TICoqKi8KICAgIGZ1bmN0aW9uIF9lbmRDb250ZXN0SWZOZWVkZWQoKSBwcml2YXRlIHJldHVybnMoYm9vbCl7CiAgICAgICAgaWYodGltZVBhc3NlZCgpPj1USU1FX1RPX0NPT0spewogICAgICAgICAgICAvL2NvbnRlc3Qgb3ZlciwgcmVmdW5kIGFueXRoaW5nIHBhaWQKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgICAgICBsYXN0UG90PXRoaXMuYmFsYW5jZTsKICAgICAgICAgICAgbGFzdEhvdFBvdGF0b0hvbGRlcj1ob3RQb3RhdG9Ib2xkZXI7CiAgICAgICAgICAgIGhvdFBvdGF0b0hvbGRlci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICAgICAgICBob3RQb3RhdG9Ib2xkZXI9MDsKICAgICAgICAgICAgbGFzdEJpZFRpbWU9MDsKICAgICAgICAgICAgX3Jlc2V0UG90YXRvZXMoKTsKICAgICAgICAgICAgX3NldE5ld1N0YXJ0VGltZSgpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgZnVuY3Rpb24gX3Jlc2V0UG90YXRvZXMoKSBwcml2YXRlewogICAgICAgIGZvcih1aW50IGkgPSAwOyBpPE5VTV9QT1RBVE9FUzsgaSsrKXsKICAgICAgICAgICAgUG90YXRvIG1lbW9yeSBuZXdwb3RhdG89UG90YXRvKHtvd25lcjphZGRyZXNzKHRoaXMpLHByaWNlOiBTVEFSVF9QUklDRX0pOwogICAgICAgICAgICBwb3RhdG9lc1tpXT1uZXdwb3RhdG87CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gX3NldE5ld1N0YXJ0VGltZSgpIHByaXZhdGV7CiAgICAgICAgdWludDI1NiBzdGFydD1jb250ZXN0U3RhcnRUaW1lOwogICAgICAgIHdoaWxlKHN0YXJ0PGJsb2NrLnRpbWVzdGFtcCl7CiAgICAgICAgICAgIHN0YXJ0PVNhZmVNYXRoLmFkZChzdGFydCxDT05URVNUX0lOVEVSVkFMKTsKICAgICAgICB9CiAgICAgICAgY29udGVzdFN0YXJ0VGltZT1zdGFydDsKICAgIH0KfQpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQ=='.
	

]
