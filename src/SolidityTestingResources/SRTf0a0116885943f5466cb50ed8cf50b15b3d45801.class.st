Class {
	#name : #SRTf0a0116885943f5466cb50ed8cf50b15b3d45801,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf0a0116885943f5466cb50ed8cf50b15b3d45801 >> base64 [
	^ ''.
	

]
