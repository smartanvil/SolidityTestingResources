Class {
	#name : #SRTd348e07a2806505b856123045d27aeed90924b50,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd348e07a2806505b856123045d27aeed90924b50 >> base64 [
	^ ''.
	

]
