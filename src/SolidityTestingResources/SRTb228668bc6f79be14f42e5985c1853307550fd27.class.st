Class {
	#name : #SRTb228668bc6f79be14f42e5985c1853307550fd27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb228668bc6f79be14f42e5985c1853307550fd27 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gRVhDUkVURVVNCi8vIFN0YW5kYXJkIEVSQzIwIFRva2VuCi8vIDEyME0gc3VwcGx5IGRpc3RyaWJ1dGVkIGFzIHN1Y2g6IDEwTSBjcmVhdG9ycywgMjBNIG1hcmtldGluZywgOTBNIGljbwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCn0KCi8vIEFzIG9mIDIwMTcKLy8gMTQgMDAwIDAwMCAwMDAgMDAwIFVTIGRvbGxhcnMgZ28gdGhyb3VnaCB0aGUgYmFua2luZyBzeXN0ZW0gZGFpbHkKCi8vIEluIEFtZXJpY2EsIHRoZSB0b3AgMSUgZWFybnMgJDM2MCAwMDAgcGVyIHllYXIKLy8gUm91Z2hseSB0ZW4gdGltZXMgdGhlIGF2ZXJhZ2UgaW5jb21lCi8vIFRoZSB0b3AgMC4wMSUgZWFybnMgJDEwIDAwMCAwMDAgcGVyIHllYXIKLy8gUm91Z2hseSB0aGlydHkgdGltZXMgYXMgbXVjaCBhcyB0aGUgdG9wIDElCgovLyBUaGUgaHVtYW4gYnJhaW4gaGFuZGxlcyBsYXJnZSBudW1iZXJzIHBvb3JseQovLyBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYmlsbGlvbmFpcmUgYW5kIGEgbWlsbGlvbmFpcmUgaXMgcmVtb3RlIHRvIG1vc3QKLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiAxTSwgMTBNIGFuZCAxMDBNIGV2ZW4gbW9yZSBzbwoKY29udHJhY3QgRXhjcmV0ZXVtVG9rZW4gaXMgRVJDMjBJbnRlcmZhY2UgewogICAgCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJTSEVUIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFeGNyZXRldW0iOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gODsKICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gMTIwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8gMS4gRVFVQUxJVFkgSVMgQU4gSUxMVVNJT04KICAgIC8vCiAgICAvLyBQZW9wbGUgYXJlIGJvcm4gd2l0aCB2YXJpZWQgbGV2ZWxzIG9mIGFiaWxpdHkKICAgIC8vIEZ1cnRoZXIgZW5oYW5jZWQgb3IgZGlzY291cmFnZWQgYnkgZW52aXJvbm1lbnRhbCBmYWN0b3JzCiAgICAvLwogICAgLy8gTmF0dXJhbCBzZWxlY3Rpb24gZGVtYW5kcyBjb21wZXRpdGlvbgogICAgLy8gQXR0ZW1wdHMgdG8gZW5mb3JjZSBhIGxldmVsLXBsYXlpbmcgZmllbGQgY2Fubm90IGNoYW5nZSB0aGlzIG5hdHVyZQogICAgLy8gT25seSB0aGUgbmF0dXJlIG9mIHNhaWQgY29tcGV0aXRpb24gZGlmZmVycwoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQogICAgCiAgICAvLyAyLiBDT0RFIENBTk5PVCBCRSBMQVcKICAgIC8vCiAgICAvLyBUZWNobm9sb2d5IGlzIGJleW9uZCB0aGUgaW50dWl0aW9uIG9mIHRoZSBhdmVyYWdlIHBlcnNvbgogICAgLy8gVGhlIGtub3dsZWRnZSBnYXAgd2lkZW5zIHdpdGggZWFjaCBpbm5vdmF0aW9uCiAgICAvLwogICAgLy8gQSBzdWZmaWNpZW50bHkgYWR2YW5jZWQgZGVjZW50cmFsaXplZCBzeXN0ZW0gYmVjb21lcyBkZWZhY3RvIGNlbnRyYWxpemVkCiAgICAvLyBBcyBhY3RvcnMgd2hvIHVuZGVyc3RhbmQgdGhpcyBzeXN0ZW0gYXJlIGluY3JlYXNpbmdseSBzcGFyc2UKICAgIAogICAgZnVuY3Rpb24gRXhjcmV0ZXVtVG9rZW4oKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxTdXBwbHkpIHsKICAgICAgICB0b3RhbFN1cHBseSA9IF90b3RhbFN1cHBseTsKICAgIH0KICAgIAogICAgLy8gMy4gVFJVU1QgSVMgTUFOREFUT1JZCiAgICAvLwogICAgLy8gU29jaWFsIGJyaWRnZXMgYXJlIHJlcXVpcmVkIGV2ZW4gaW4gdHJ1c3RsZXNzIGVudmlyb25tZW50cwogICAgLy8gQ29uZmlkZW5jZSBpcyBidWlsdCBiZXR3ZWVuIHBlb3BsZSByYXRoZXIgdGhhbiBzeXN0ZW1zCiAgICAvLwogICAgLy8gQmVuZXZvbGVudCBkaWN0YXRvcnMgY2FuIGZvc3RlciBwb3NpdGl2ZSBjb21tdW5pdGllcwogICAgLy8gSW4gdGhlIGFic2VuY2Ugb2YgZ3VpZGFuY2UsIG5lZ2F0aXZlIGFjdG9ycyB3aWxsIGZpbGwgdGhhdCBnYXAKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50IAogICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8vIDQuIFRSQU5TUEFSRU5DWSBJUyBTWU5PTllNT1VTIFdJVEggQU5PTllNSVRZCiAgICAvLwogICAgLy8gVHJhbnNwYXJlbmN5IGluIGFjdGlvbiBrZWVwcyBhY3RvcnMgaG9uZXN0CiAgICAvLyBUcmFuc3BhcmVuY3kgaW4gaWRlbnRpdHkgb3BlbnMgdXAgc2luZ2xlIHBvaW50cyBvZiBmYWlsdXJlCiAgICAvLwogICAgLy8gQW4gaW1tdXRhYmxlIGxlZGdlciB3b3JrcyBiZXN0IHdoZW4gbm8gaHVtYW4gdHJhbnNhY3Rpb25zIG9jY3VyIG9mZmNoYWluCiAgICAvLyBBbm9ueW1vdXMgZW50aXRpZXMgY2Fubm90IGJlIHNpbGVuY2VkLCBpbmZsdWVuY2VkIG9yIGRpc3Bvc2VkIG9mCiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gNS4gSU5GT1JNQVRJT04gSVMgUFJJQ0VMRVNTCiAgICAvLwogICAgLy8gTmVpdGhlciBhc3NldHMgbm9yIGN1cnJlbmNpZXMgaGF2ZSBpbmhlcmVudCB3b3J0aAogICAgLy8gQXN5bmNocm9ub3VzIHZhbHVlIGNvbWVzIGZyb20gYXN5bmNocm9ub3VzIGluZm9ybWF0aW9uCiAgICAvLwogICAgLy8gU2hhcmluZyBrbm93bGVkZ2UgYXQgYW55IGxldmVsIG9mIHVuZGVyc3RhbmRpbmcgaGVscCBhY3RvcnMgbWFrZSBjaG9pY2VzCiAgICAvLyBJbmZvcm1hdGlvbiBpcyB1c2VmdWwgcmVnYXJkbGVzcyBvZiB2ZXJhY2l0eQoKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8gNi4gTkFUVVJFIElTIEdPT0QKICAgIC8vCiAgICAvLyBUYWtlIGEgd2FsayBvdXRzaWRlCiAgICAvLyBMZWFybiB0byBidWlsZCBhIGNhbXBmaXJlCiAgICAvLyBQbGFudCBhIHRyZWUgdGhpcyB5ZWFyCiAgICAvLyBXYXRjaCBvdXQgZm9yIGNvdyBkdW5nCiAgICAKfQ=='.
	

]
