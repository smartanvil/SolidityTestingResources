Class {
	#name : #SRT7fd539ef2be3192b6d6bdf095968bac2d74daa6e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7fd539ef2be3192b6d6bdf095968bac2d74daa6e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKgogICAgT3duZWQgY29udHJhY3QgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElPd25lZCB7CiAgICAvLyB0aGlzIGZ1bmN0aW9uIGlzbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHt9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYzsKfQoKCgovKgogICAgUHJvdmlkZXMgc3VwcG9ydCBhbmQgdXRpbGl0aWVzIGZvciBjb250cmFjdCBvd25lcnNoaXAKKi8KY29udHJhY3QgT3duZWQgaXMgSU93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7CgogICAgZXZlbnQgT3duZXJVcGRhdGUoYWRkcmVzcyBpbmRleGVkIF9wcmV2T3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfbmV3T3duZXIpOwoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG93bmVyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWRzIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCgogICAgICAgIEBwYXJhbSBfbmV3T3duZXIgICAgbmV3IGNvbnRyYWN0IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IG93bmVyKTsKICAgICAgICBuZXdPd25lciA9IF9uZXdPd25lcjsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHVzZWQgYnkgYSBuZXcgb3duZXIgdG8gYWNjZXB0IGFuIG93bmVyc2hpcCB0cmFuc2ZlcgogICAgKi8KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsKICAgICAgICBPd25lclVwZGF0ZShvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgbmV3T3duZXIgPSBhZGRyZXNzKDApOwogICAgfQp9CgoKCgovKgogICAgVXRpbGl0aWVzICYgQ29tbW9uIE1vZGlmaWVycwoqLwpjb250cmFjdCBVdGlscyB7CiAgICAvKioKICAgICAgICBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFV0aWxzKCkgcHVibGljIHsKICAgIH0KCiAgICAvLyB2ZXJpZmllcyB0aGF0IGFuIGFtb3VudCBpcyBncmVhdGVyIHRoYW4gemVybwogICAgbW9kaWZpZXIgZ3JlYXRlclRoYW5aZXJvKHVpbnQyNTYgX2Ftb3VudCkgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyB2ZXJpZmllcyB0aGF0IHRoZSBhZGRyZXNzIGlzIGRpZmZlcmVudCB0aGFuIHRoaXMgY29udHJhY3QgYWRkcmVzcwogICAgbW9kaWZpZXIgbm90VGhpcyhhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIE92ZXJmbG93IHByb3RlY3RlZCBtYXRoIGZ1bmN0aW9ucwoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgc3VtIG9mIF94IGFuZCBfeSwgYXNzZXJ0cyBpZiB0aGUgY2FsY3VsYXRpb24gb3ZlcmZsb3dzCgogICAgICAgIEBwYXJhbSBfeCAgIHZhbHVlIDEKICAgICAgICBAcGFyYW0gX3kgICB2YWx1ZSAyCgogICAgICAgIEByZXR1cm4gc3VtCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCArIF95OwogICAgICAgIGFzc2VydCh6ID49IF94KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgX3ggbWludXMgX3ksIGFzc2VydHMgaWYgdGhlIHN1YnRyYWN0aW9uIHJlc3VsdHMgaW4gYSBuZWdhdGl2ZSBudW1iZXIKCiAgICAgICAgQHBhcmFtIF94ICAgbWludWVuZAogICAgICAgIEBwYXJhbSBfeSAgIHN1YnRyYWhlbmQKCiAgICAgICAgQHJldHVybiBkaWZmZXJlbmNlCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoX3ggPj0gX3kpOwogICAgICAgIHJldHVybiBfeCAtIF95OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgcHJvZHVjdCBvZiBtdWx0aXBseWluZyBfeCBieSBfeSwgYXNzZXJ0cyBpZiB0aGUgY2FsY3VsYXRpb24gb3ZlcmZsb3dzCgogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxCiAgICAgICAgQHBhcmFtIF95ICAgZmFjdG9yIDIKCiAgICAgICAgQHJldHVybiBwcm9kdWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCAqIF95OwogICAgICAgIGFzc2VydChfeCA9PSAwIHx8IHogLyBfeCA9PSBfeSk7CiAgICAgICAgcmV0dXJuIHo7CiAgICB9Cn0KCgovKgogICAgQmFuY29yIEdhcyBQcmljZSBMaW1pdCBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUJhbmNvckdhc1ByaWNlTGltaXQgewogICAgZnVuY3Rpb24gZ2FzUHJpY2UoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7fQp9CgoKLyoKICAgIFRoZSBCYW5jb3JHYXNQcmljZUxpbWl0IGNvbnRyYWN0IHNlcnZlcyBhcyBhbiBleHRyYSBmcm9udC1ydW5uaW5nIGF0dGFjayBtaXRpZ2F0aW9uIG1lY2hhbmlzbS4KICAgIEl0IHNldHMgYSBtYXhpbXVtIGdhcyBwcmljZSBvbiBhbGwgYmFuY29yIGNvbnZlcnNpb25zLCB3aGljaCBwcmV2ZW50cyB1c2VycyBmcm9tICJjdXR0aW5nIGluIGxpbmUiCiAgICBpbiBvcmRlciB0byBmcm9udC1ydW4gb3RoZXIgdHJhbnNhY3Rpb25zLgogICAgVGhlIGdhcyBwcmljZSBsaW1pdCBpcyB1bml2ZXJzYWwgdG8gYWxsIGNvbnZlcnRlcnMgYW5kIGl0IGNhbiBiZSB1cGRhdGVkIGJ5IHRoZSBvd25lciB0byBiZSBpbiBsaW5lCiAgICB3aXRoIHRoZSBuZXR3b3JrJ3MgY3VycmVudCBnYXMgcHJpY2UuCiovCmNvbnRyYWN0IEJhbmNvckdhc1ByaWNlTGltaXQgaXMgSUJhbmNvckdhc1ByaWNlTGltaXQsIE93bmVkLCBVdGlscyB7CiAgICB1aW50MjU2IHB1YmxpYyBnYXNQcmljZSA9IDAgd2VpOyAgICAvLyBtYXhpbXVtIGdhcyBwcmljZSBmb3IgYmFuY29yIHRyYW5zYWN0aW9ucwoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKCiAgICAgICAgQHBhcmFtIF9nYXNQcmljZSAgICBnYXMgcHJpY2UgbGltaXQKICAgICovCiAgICBmdW5jdGlvbiBCYW5jb3JHYXNQcmljZUxpbWl0KHVpbnQyNTYgX2dhc1ByaWNlKQogICAgICAgIHB1YmxpYwogICAgICAgIGdyZWF0ZXJUaGFuWmVybyhfZ2FzUHJpY2UpCiAgICB7CiAgICAgICAgZ2FzUHJpY2UgPSBfZ2FzUHJpY2U7CiAgICB9CgogICAgLyoKICAgICAgICBAZGV2IGdhcyBwcmljZSBnZXR0ZXIKCiAgICAgICAgQHJldHVybiB0aGUgY3VycmVudCBnYXMgcHJpY2UKICAgICovCiAgICBmdW5jdGlvbiBnYXNQcmljZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB2YWxpZGF0ZUdhc1ByaWNlKHR4Lmdhc3ByaWNlKTsKICAgICAgICByZXR1cm4gZ2FzUHJpY2U7CiAgICB9CgogICAgLyoKICAgICAgICBAZGV2IGFsbG93cyB0aGUgb3duZXIgdG8gdXBkYXRlIHRoZSBnYXMgcHJpY2UgbGltaXQKCiAgICAgICAgQHBhcmFtIF9nYXNQcmljZSAgICBuZXcgZ2FzIHByaWNlIGxpbWl0CiAgICAqLwogICAgZnVuY3Rpb24gc2V0R2FzUHJpY2UodWludDI1NiBfZ2FzUHJpY2UpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgZ3JlYXRlclRoYW5aZXJvKF9nYXNQcmljZSkKICAgIHsKICAgICAgICBnYXNQcmljZSA9IF9nYXNQcmljZTsKICAgIH0KCiAgICAvKgogICAgICAgIEBkZXYgdmFsaWRhdGUgdGhhdCB0aGUgZ2l2ZW4gZ2FzIHByaWNlIGlzIGVxdWFsIHRvIHRoZSBjdXJyZW50IG5ldHdvcmsgZ2FzIHByaWNlCgogICAgICAgIEBwYXJhbSBfZ2FzUHJpY2UgICAgdGVzdGVkIGdhcyBwcmljZQogICAgKi8KICAgIGZ1bmN0aW9uIHZhbGlkYXRlR2FzUHJpY2UodWludDI1NiBfZ2FzUHJpY2UpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIGdyZWF0ZXJUaGFuWmVybyhfZ2FzUHJpY2UpCiAgICB7CiAgICAgICAgcmVxdWlyZShfZ2FzUHJpY2UgPT0gZ2FzUHJpY2UpOwogICAgfQp9'.
	

]
