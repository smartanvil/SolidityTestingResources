Class {
	#name : #SRTd7e51e35a04db7d9cd28026f281a93134348190b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7e51e35a04db7d9cd28026f281a93134348190b >> base64 [
	^ ''.
	

]
