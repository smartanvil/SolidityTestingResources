Class {
	#name : #SRT90b12b97a52451f38090f49bce8bc2962dde4902,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90b12b97a52451f38090f49bce8bc2962dde4902 >> base64 [
	^ ''.
	

]
