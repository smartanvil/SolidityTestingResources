Class {
	#name : #SRT90fc38eb9592940e6d5bae221313d749ee26369b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90fc38eb9592940e6d5bae221313d749ee26369b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCmNvbnRyYWN0IFdpbk1hdHJpeAogewogICBmdW5jdGlvbiBnZXRDb2VmZih1aW50MTYgbikgZXh0ZXJuYWwgcmV0dXJucyAodWludDI1Nik7CiAgIGZ1bmN0aW9uIGdldEJldHNQcm9jZXNzZWQoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MTYpOwogfQoKY29udHJhY3QgU21hcnRSb3VsZXR0ZVRva2VuCnsKICAgZnVuY3Rpb24gZW1pc3Npb24oYWRkcmVzcyBwbGF5ZXIsIGFkZHJlc3MgcGFydG5lciwgdWludDI1NiB2YWx1ZV9iZXQsIHVpbnQxNiBjb2VmX3BsYXllciwgdWludDE2IGNvZWZfcGFydG5lcikgZXh0ZXJuYWwgcmV0dXJucyh1aW50MjU2KTsKICAgZnVuY3Rpb24gaXNPcGVyYXRpb25CbG9ja2VkKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IFNtYXJ0QWZmaWxpYXRlCnsKICAgZnVuY3Rpb24gcmVnaXN0ZXIoYWRkcmVzcyBwbGF5ZXIsIGFkZHJlc3MgYWZmaWxpYXRlKSBleHRlcm5hbDsKICAgZnVuY3Rpb24gZ2V0QWZmaWxpYXRlSW5mbyhhZGRyZXNzIHBsYXllcikgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzIGFmZmlsaWF0ZSwgdWludDE2IGNvZWZfYWZmaWxpYXRlKTsKfQoKY29udHJhY3QgU21hcnRSb3VsZXR0ZQp7CiAgYWRkcmVzcyBkZXZlbG9wZXI7CiAgYWRkcmVzcyBvcGVyYXRvcjsKCiAgLy8gV2FpdCBCbG9ja0RlbGF5IGJsb2NrcyBiZWZvcmUgc3BpbiB0aGUgd2hlZWwKICB1aW50OCBCbG9ja0RlbGF5OwoKICAvLyBNYXhpbXVtIGJldCB2YWx1ZSBmb3IgZ2FtZQogIHVpbnQyNTYgY3VycmVudE1heEJldDsKCiAgLy8gbWF4aW11bSBnYW1lcyBjb3VudCBwZXIgYmxvY2sKICB1aW50NjQgbWF4R2FtYmxlc1BlckJsb2NrOwoKICAvLyBFbmFibGVcZGlzYWJsZSB0byBwbGFjZSBuZXcgYmV0cwogIGJvb2wgQ29udHJhY3RTdGF0ZTsKCiAgLy8gdGFibGUgd2l0aCB3aW5uZXIgY29lZmZpY2llbnRzCiAgV2luTWF0cml4IHdpbk1hdHJpeDsKCiAgU21hcnRSb3VsZXR0ZVRva2VuIHNtYXJ0VG9rZW47CgogIGFkZHJlc3MgcHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3Q7CgogIFNtYXJ0QWZmaWxpYXRlIHNtYXJ0QWZmaWxpYXRlQ29udHJhY3Q7CgogIHVpbnQxNiBjb25zdGFudCBtYXhUeXBlQmV0cyA9IDE1NzsKCiAgIHVpbnQxNiBjb2VmX3BsYXllcjsKICAgLy8KICAgdWludDggZGVmYXVsdE1pbkNyZWRpdHNPbkJldDsKICAgLy8KICAgbWFwcGluZyAodWludDggPT4gdWludDgpIHByaXZhdGUgbWluQ3JlZGl0c09uQmV0OwoKICAgc3RydWN0IEdhbWVJbmZvCiAgIHsKICAgICAgICBhZGRyZXNzIHBsYXllcjsKICAgICAgICB1aW50MjU2IGJsb2NrTnVtYmVyOwogICAgICAgIHVpbnQ4IHdoZWVsUmVzdWx0OwogICAgICAgIHVpbnQyNTYgYmV0czsKICAgICAgICBieXRlczMyIHZhbHVlczsKICAgICAgICBieXRlczMyIHZhbHVlczI7CiAgIH0KCiAgIEdhbWVJbmZvW10gcHJpdmF0ZSBnYW1ibGVzOwoKICAgZW51bSBHYW1lU3RhdHVzIHtTdWNjZXNzLCBTa2lwcGVkLCBTdG9wfQoKICAgZW51bSBCZXRUeXBlc3tudW1iZXIwLCBudW1iZXIxLG51bWJlcjIsbnVtYmVyMyxudW1iZXI0LG51bWJlcjUsbnVtYmVyNixudW1iZXI3LG51bWJlcjgsbnVtYmVyOSwKICAgICBudW1iZXIxMCxudW1iZXIxMSxudW1iZXIxMixudW1iZXIxMyxudW1iZXIxNCxudW1iZXIxNSxudW1iZXIxNixudW1iZXIxNyxudW1iZXIxOCxudW1iZXIxOSxudW1iZXIyMCxudW1iZXIyMSwKICAgICBudW1iZXIyMixudW1iZXIyMyxudW1iZXIyNCxudW1iZXIyNSxudW1iZXIyNixudW1iZXIyNyxudW1iZXIyOCxudW1iZXIyOSxudW1iZXIzMCxudW1iZXIzMSxudW1iZXIzMixudW1iZXIzMywKICAgICBudW1iZXIzNCxudW1iZXIzNSxudW1iZXIzNiwgcmVkLCBibGFjaywgb2RkLCBldmVuLCBkb3plbjEsZG96ZW4yLGRvemVuMywgY29sdW1uMSxjb2x1bW4yLGNvbHVtbjMsIGxvdyxoaWdoLAogICAgIHBhaXJfMDEsIHBhaXJfMDIsIHBhaXJfMDMsIHBhaXJfMTIsIHBhaXJfMjMsIHBhaXJfMzYsIHBhaXJfMjUsIHBhaXJfMTQsIHBhaXJfNDUsIHBhaXJfNTYsIHBhaXJfNjksIHBhaXJfNTgsIHBhaXJfNDcsCiAgICAgcGFpcl83OCwgcGFpcl84OSwgcGFpcl85MTIsIHBhaXJfODExLCBwYWlyXzcxMCwgcGFpcl8xMDExLCBwYWlyXzExMTIsIHBhaXJfMTIxNSwgcGFpcl8xNTE4LCBwYWlyXzE2MTcsIHBhaXJfMTcxOCwgcGFpcl8xNzIwLAogICAgIHBhaXJfMTYxOSwgcGFpcl8xOTIyLCBwYWlyXzIwMjMsIHBhaXJfMjEyNCwgcGFpcl8yMjIzLCBwYWlyXzIzMjQsIHBhaXJfMjUyOCwgcGFpcl8yNjI5LCBwYWlyXzI3MzAsIHBhaXJfMjgyOSwgcGFpcl8yOTMwLCBwYWlyXzExMTQsCiAgICAgcGFpcl8xMDEzLCBwYWlyXzEzMTQsIHBhaXJfMTQxNSwgcGFpcl8xMzE2LCBwYWlyXzE0MTcsIHBhaXJfMTgyMSwgcGFpcl8xOTIwLCBwYWlyXzIwMjEsIHBhaXJfMjIyNSwgcGFpcl8yMzI2LCBwYWlyXzI0MjcsIHBhaXJfMjUyNiwKICAgICBwYWlyXzI2MjcsIHBhaXJfMjgzMSwgcGFpcl8yOTMyLCBwYWlyXzMwMzMsIHBhaXJfMzEzMiwgcGFpcl8zMjMzLCBwYWlyXzMxMzQsIHBhaXJfMzIzNSwgcGFpcl8zMzM2LCBwYWlyXzM0MzUsIHBhaXJfMzUzNiwgY29ybmVyXzBfMV8yXzMsCiAgICAgY29ybmVyXzFfMl81XzQsIGNvcm5lcl8yXzNfNl81LCBjb3JuZXJfNF81XzhfNywgY29ybmVyXzVfNl85XzgsIGNvcm5lcl83XzhfMTFfMTAsIGNvcm5lcl84XzlfMTJfMTEsIGNvcm5lcl8xMF8xMV8xNF8xMywgY29ybmVyXzExXzEyXzE1XzE0LAogICAgIGNvcm5lcl8xM18xNF8xN18xNiwgY29ybmVyXzE0XzE1XzE4XzE3LCBjb3JuZXJfMTZfMTdfMjBfMTksIGNvcm5lcl8xN18xOF8yMV8yMCwgY29ybmVyXzE5XzIwXzIzXzIyLCBjb3JuZXJfMjBfMjFfMjRfMjMsIGNvcm5lcl8yMl8yM18yNl8yNSwKICAgICBjb3JuZXJfMjNfMjRfMjdfMjYsIGNvcm5lcl8yNV8yNl8yOV8yOCwgY29ybmVyXzI2XzI3XzMwXzI5LCBjb3JuZXJfMjhfMjlfMzJfMzEsIGNvcm5lcl8yOV8zMF8zM18zMiwgY29ybmVyXzMxXzMyXzM1XzM0LCBjb3JuZXJfMzJfMzNfMzZfMzUsCiAgICAgdGhyZWVfMF8yXzMsIHRocmVlXzBfMV8yLCB0aHJlZV8xXzJfMywgdGhyZWVfNF81XzYsIHRocmVlXzdfOF85LCB0aHJlZV8xMF8xMV8xMiwgdGhyZWVfMTNfMTRfMTUsIHRocmVlXzE2XzE3XzE4LCB0aHJlZV8xOV8yMF8yMSwgdGhyZWVfMjJfMjNfMjQsCiAgICAgdGhyZWVfMjVfMjZfMjcsIHRocmVlXzI4XzI5XzMwLCB0aHJlZV8zMV8zMl8zMywgdGhyZWVfMzRfMzVfMzYsIHNpeF8xXzJfM180XzVfNiwgc2l4XzRfNV82XzdfOF85LCBzaXhfN184XzlfMTBfMTFfMTIsIHNpeF8xMF8xMV8xMl8xM18xNF8xNSwKICAgICBzaXhfMTNfMTRfMTVfMTZfMTdfMTgsIHNpeF8xNl8xN18xOF8xOV8yMF8yMSwgc2l4XzE5XzIwXzIxXzIyXzIzXzI0LCBzaXhfMjJfMjNfMjRfMjVfMjZfMjcsIHNpeF8yNV8yNl8yN18yOF8yOV8zMCwgc2l4XzI4XzI5XzMwXzMxXzMyXzMzLAogICAgIHNpeF8zMV8zMl8zM18zNF8zNV8zNn0KCgogICBmdW5jdGlvbiBTbWFydFJvdWxldHRlKCkgaW50ZXJuYWwKICAgewogICAgICAgIGRldmVsb3BlciAgPSBtc2cuc2VuZGVyOwogICAgICAgIG9wZXJhdG9yICAgPSBtc2cuc2VuZGVyOwoKICAgICAgICB3aW5NYXRyaXggPSBXaW5NYXRyaXgoMHgwNzNENjYyMUU5MTUwYkZmOWQxRDQ1MGNhQWQzYzc5MGI2RjA3MUYyKTsKICAgICAgICBpZiAod2luTWF0cml4LmdldEJldHNQcm9jZXNzZWQoKSAhPSBtYXhUeXBlQmV0cykgdGhyb3c7CgogICAgICAgIHNtYXJ0VG9rZW4gPSBTbWFydFJvdWxldHRlVG9rZW4oMHgyYTY1MDM1NmJkODk0MzcwY2MxZDZhYmE3MWIzNmMwYWQ2YjNkYzE4KTsKCiAgICAgICAgY3VycmVudE1heEJldCA9IDI1NjAgZmlubmV5OyAvLyAyLjU2IGV0aGVyCiAgICAgICAgQmxvY2tEZWxheSA9IDE7CiAgICAgICAgbWF4R2FtYmxlc1BlckJsb2NrID0gNTsKICAgICAgICBkZWZhdWx0TWluQ3JlZGl0c09uQmV0ID0gMTsKICAgICAgICBDb250cmFjdFN0YXRlICA9IHRydWU7CiAgICAgICAgYmFua3JvbExpbWl0ID0gMjc3IGV0aGVyOwogICAgICAgIHByb2ZpdExpbWl0ICA9IDUwIGV0aGVyOwogICAgICAgIGNvZWZfcGxheWVyID0gMzAwOwogICB9CgogICBmdW5jdGlvbiBjaGFuZ2VNYXhCZXQodWludDI1NiBuZXdNYXhCZXQpIHB1YmxpYyBvbmx5RGV2ZWxvcGVyCiAgIHsKICAgICAgLy8gcm91bmRzIHRvIDIgZGlndHMKICAgICAgbmV3TWF4QmV0ID0gbmV3TWF4QmV0IC8gMjU2MDAwMDAwMDAwMDAwMDAwMCAqIDI1NjAwMDAwMDAwMDAwMDAwMDA7CiAgICAgIGlmIChuZXdNYXhCZXQgIT0gY3VycmVudE1heEJldCkKICAgICAgewogICAgICAgIGN1cnJlbnRNYXhCZXQgPSBuZXdNYXhCZXQ7CiAgICAgICAgU2V0dGluZ3NDaGFuZ2VkKGN1cnJlbnRNYXhCZXQsIGN1cnJlbnRNYXhCZXQgLyAyNTYsICBkZWZhdWx0TWluQ3JlZGl0c09uQmV0LCBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMubG93KV0sIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5kb3plbjEpXSwgQmxvY2tEZWxheSwgQ29udHJhY3RTdGF0ZSk7CiAgICAgIH0KICAgfQoKICAgdWludDI1NiBiYW5rcm9sTGltaXQ7CiAgIHVpbnQyNTYgcHJvZml0TGltaXQ7CiAgIHVpbnQyNTYgbGFzdERpc3RyaWJ1dGVkUHJvZml0OwogICB1aW50MjU2IGxhc3REYXRlRGlzdHJpYnV0ZWRQcm9maXQ7CgogICBmdW5jdGlvbiBnZXREaXN0cmlidXRlUHJvZml0c0luZm8oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBsYXN0UHJvZml0LCB1aW50MjU2IGxhc3REYXRlKQogICB7CiAgICAgIGxhc3RQcm9maXQgPSBsYXN0RGlzdHJpYnV0ZWRQcm9maXQ7CiAgICAgIGxhc3REYXRlID0gbGFzdERhdGVEaXN0cmlidXRlZFByb2ZpdDsKICAgfQoKICAgZnVuY3Rpb24gc2V0UHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBpZiAocHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPiAwKSB0aHJvdzsKICAgICAgcHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPSBjb250cmFjdEFkZHJlc3M7CiAgIH0KCiAgIGZ1bmN0aW9uIHNldFNtYXJ0QWZmaWxpYXRlQ29udHJhY3QoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBpZiAoYWRkcmVzcyhzbWFydEFmZmlsaWF0ZUNvbnRyYWN0KSA+IDApIHRocm93OwogICAgICBzbWFydEFmZmlsaWF0ZUNvbnRyYWN0ID0gU21hcnRBZmZpbGlhdGUoY29udHJhY3RBZGRyZXNzKTsKICAgfQoKICAgZnVuY3Rpb24gZGlzdHJpYnV0ZVByb2ZpdHModWludDI1NiBnYXNWYWx1ZSkgb25seURldmVsb3Blck9yT3BlcmF0b3IKICAgewogICAgICBpZiAocHJvZml0RGlzdHJpYnV0aW9uQ29udHJhY3QgPiAwICYmIHRoaXMuYmFsYW5jZSA+PSAoYmFua3JvbExpbWl0K3Byb2ZpdExpbWl0KSkKICAgICAgewogICAgICAgICB1aW50MjU2IGRpZmYgPSB0aGlzLmJhbGFuY2UgLSBiYW5rcm9sTGltaXQ7CiAgICAgICAgIGlmIChhZGRyZXNzKHByb2ZpdERpc3RyaWJ1dGlvbkNvbnRyYWN0KS5jYWxsLmdhcyhnYXNWYWx1ZSkudmFsdWUoZGlmZikoKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgIGxhc3REaXN0cmlidXRlZFByb2ZpdCA9IGRpZmY7CiAgICAgICAgIGxhc3REYXRlRGlzdHJpYnV0ZWRQcm9maXQgPSBibG9jay50aW1lc3RhbXA7CiAgICAgIH0KICAgfQoKICAgZnVuY3Rpb24gZ2V0VG9rZW5TZXR0aW5ncygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQxNiBDb2VmX3BsYXllciwgdWludDI1NiBCYW5rcm9sTGltaXQsIHVpbnQyNTYgUHJvZml0TGltaXQpCiAgIHsKICAgICAgQ29lZl9wbGF5ZXIgPSBjb2VmX3BsYXllcjsKICAgICAgQmFua3JvbExpbWl0ID0gYmFua3JvbExpbWl0OwogICAgICBQcm9maXRMaW1pdCA9IHByb2ZpdExpbWl0OwogICB9CgogICBmdW5jdGlvbiBjaGFuZ2VUb2tlblNldHRpbmdzKHVpbnQxNiBuZXdDb2VmX3BsYXllciwgdWludDI1NiBuZXdCYW5rcm9sTGltaXQsIHVpbnQyNTYgbmV3UHJvZml0TGltaXQpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICBjb2VmX3BsYXllciAgPSBuZXdDb2VmX3BsYXllcjsKICAgICAgYmFua3JvbExpbWl0ID0gbmV3QmFua3JvbExpbWl0OwogICAgICBwcm9maXRMaW1pdCAgPSBuZXdQcm9maXRMaW1pdDsKICAgfQoKICAgZnVuY3Rpb24gY2hhbmdlU2V0dGluZ3ModWludDY0IE5ld01heEJldHNQZXJCbG9jaywgdWludDggTmV3QmxvY2tEZWxheSwgdWludDggTWluQ3JlZGl0c09uQmV0NTAsIHVpbnQ4IE1pbkNyZWRpdHNPbkJldDMzLCB1aW50OCBOZXdEZWZhdWx0TWluQ3JlZGl0c09uQmV0KSBvbmx5RGV2ZWxvcGVyCiAgIHsKICAgICAgQmxvY2tEZWxheSA9IE5ld0Jsb2NrRGVsYXk7CgogICAgICBpZiAoTmV3TWF4QmV0c1BlckJsb2NrICE9IDApIG1heEdhbWJsZXNQZXJCbG9jayA9IE5ld01heEJldHNQZXJCbG9jazsKCiAgICAgIGlmIChNaW5DcmVkaXRzT25CZXQ1MCA+IDApCiAgICAgIHsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMubG93KV0gICA9IE1pbkNyZWRpdHNPbkJldDUwOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5oaWdoKV0gID0gTWluQ3JlZGl0c09uQmV0NTA7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLnJlZCldICAgPSBNaW5DcmVkaXRzT25CZXQ1MDsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMuYmxhY2spXSA9IE1pbkNyZWRpdHNPbkJldDUwOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5vZGQpXSAgID0gTWluQ3JlZGl0c09uQmV0NTA7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmV2ZW4pXSAgPSBNaW5DcmVkaXRzT25CZXQ1MDsKICAgICAgfQoKICAgICAgaWYgKE1pbkNyZWRpdHNPbkJldDMzID4gMCkKICAgICAgewogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5kb3plbjEpXSA9IE1pbkNyZWRpdHNPbkJldDMzOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5kb3plbjIpXSA9IE1pbkNyZWRpdHNPbkJldDMzOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5kb3plbjMpXSA9IE1pbkNyZWRpdHNPbkJldDMzOwogICAgICAgIG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5jb2x1bW4xKV0gPSBNaW5DcmVkaXRzT25CZXQzMzsKICAgICAgICBtaW5DcmVkaXRzT25CZXRbdWludDgoQmV0VHlwZXMuY29sdW1uMildID0gTWluQ3JlZGl0c09uQmV0MzM7CiAgICAgICAgbWluQ3JlZGl0c09uQmV0W3VpbnQ4KEJldFR5cGVzLmNvbHVtbjMpXSA9IE1pbkNyZWRpdHNPbkJldDMzOwogICAgICB9CgogICAgICBpZiAoTmV3RGVmYXVsdE1pbkNyZWRpdHNPbkJldCA+IDApIGRlZmF1bHRNaW5DcmVkaXRzT25CZXQgPSBOZXdEZWZhdWx0TWluQ3JlZGl0c09uQmV0OwogICB9CgogICBmdW5jdGlvbiBkZWxldGVDb250cmFjdCgpIG9ubHlEZXZlbG9wZXIKICAgewogICAgICAgIHN1aWNpZGUobXNnLnNlbmRlcik7CiAgIH0KCiAgIC8vIGJpdCBmcm9tIDAgdG8gMjU1CiAgIGZ1bmN0aW9uIGlzQml0U2V0KHVpbnQyNTYgZGF0YSwgdWludDggYml0KSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wgcmV0KQogICB7CiAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHJldCA6PSBpc3plcm8oaXN6ZXJvKGFuZChkYXRhLCBleHAoMixiaXQpKSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQ7CiAgIH0KCiAgIC8vIHVuaXF1ZSBjb21iaW5hdGlvbiBvZiBiZXQgYW5kIHdoZWVsUmVzdWx0LCB1c2VkIGZvciBhY2Nlc3MgdG8gV2luTWF0cml4CiAgIGZ1bmN0aW9uIGdldEluZGV4KHVpbnQxNiBiZXQsIHVpbnQxNiB3aGVlbFJlc3VsdCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MTYpCiAgIHsKICAgICAgcmV0dXJuIChiZXQrMSkqMjU2ICsgKHdoZWVsUmVzdWx0KzEpOwogICB9CgogICAvLyBuIGZvcm0gMSA8PSB0byA8PSAzMgogICBmdW5jdGlvbiBnZXRCZXRWYWx1ZShieXRlczMyIHZhbHVlcywgdWludDggbikgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICB7CiAgICAgICAgLy8gYmV0IGluIGNyZWRpdHMgKDEuLjI1NikKICAgICAgICB1aW50MjU2IGJldCA9IHVpbnQyNTYodmFsdWVzWzMyLW5dKSsxOwoKICAgICAgICAgLy8gY2hlY2sgbWluIGJldAogICAgICAgIHVpbnQ4IG1pbkNyZWRpdHMgPSBtaW5DcmVkaXRzT25CZXRbbl07CiAgICAgICAgaWYgKG1pbkNyZWRpdHMgPT0gMCkgbWluQ3JlZGl0cyA9IGRlZmF1bHRNaW5DcmVkaXRzT25CZXQ7CiAgICAgICAgaWYgKGJldCA8IG1pbkNyZWRpdHMpIHRocm93OwoKICAgICAgICAvLyBiZXQgaW4gd2VpCiAgICAgICAgYmV0ID0gY3VycmVudE1heEJldCpiZXQvMjU2OwogICAgICAgIGlmIChiZXQgPiBjdXJyZW50TWF4QmV0KSB0aHJvdzsKCiAgICAgICAgcmV0dXJuIGJldDsKICAgfQoKICAgZnVuY3Rpb24gZ2V0QmV0VmFsdWVCeUdhbWJsZShHYW1lSW5mbyBtZW1vcnkgZ2FtYmxlLCB1aW50OCBuKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpCiAgIHsKICAgICAgaWYgKG48PTMyKSByZXR1cm4gZ2V0QmV0VmFsdWUoZ2FtYmxlLnZhbHVlcywgbik7CiAgICAgIGlmIChuPD02NCkgcmV0dXJuIGdldEJldFZhbHVlKGdhbWJsZS52YWx1ZXMyLCBuLTMyKTsKICAgICAgLy8gdGhlcmUgYXJlIDY0IG1heGltdW0gdW5pcXVlIGJldHMgKHBvc2l0aW9ucykgaW4gb25lIGdhbWUKICAgICAgdGhyb3c7CiAgIH0KCiAgIGZ1bmN0aW9uIHRvdGFsR2FtZXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICB7CiAgICAgICByZXR1cm4gZ2FtYmxlcy5sZW5ndGg7CiAgIH0KCiAgIGZ1bmN0aW9uIGdldFNldHRpbmdzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IG1heEJldCwgdWludDI1NiBvbmVDcmVkaXQsIHVpbnQ4IE1pbkJldEluQ3JlZGl0cywgdWludDggTWluQmV0SW5DcmVkaXRzXzUwLHVpbnQ4IE1pbkJldEluQ3JlZGl0c18zMywgdWludDggYmxvY2tEZWxheUJlZm9yZVNwaW4sIGJvb2wgY29udHJhY3RTdGF0ZSkKICAgIHsKICAgICAgICBtYXhCZXQgICAgPSBjdXJyZW50TWF4QmV0OwogICAgICAgIG9uZUNyZWRpdCA9IGN1cnJlbnRNYXhCZXQgLyAyNTY7CiAgICAgICAgYmxvY2tEZWxheUJlZm9yZVNwaW4gPSBCbG9ja0RlbGF5OwogICAgICAgIE1pbkJldEluQ3JlZGl0cyAgICAgID0gZGVmYXVsdE1pbkNyZWRpdHNPbkJldDsKICAgICAgICBNaW5CZXRJbkNyZWRpdHNfNTAgICA9IG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5sb3cpXTsKICAgICAgICBNaW5CZXRJbkNyZWRpdHNfMzMgICA9IG1pbkNyZWRpdHNPbkJldFt1aW50OChCZXRUeXBlcy5jb2x1bW4xKV07CiAgICAgICAgY29udHJhY3RTdGF0ZSAgICAgICAgPSBDb250cmFjdFN0YXRlOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlEZXZlbG9wZXIoKQogICAgewogICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyKSB0aHJvdzsKICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seURldmVsb3Blck9yT3BlcmF0b3IoKQogICAgewogICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyICYmIG1zZy5zZW5kZXIgIT0gb3BlcmF0b3IpIHRocm93OwogICAgICAgXzsKICAgIH0KCiAgIGZ1bmN0aW9uIGRpc2FibGVCZXR0aW5nX29ubHlfRGV2KCkKICAgIG9ubHlEZXZlbG9wZXJPck9wZXJhdG9yCiAgICB7CiAgICAgICAgQ29udHJhY3RTdGF0ZT1mYWxzZTsKICAgIH0KCgogICAgZnVuY3Rpb24gY2hhbmdlT3BlcmF0b3IoYWRkcmVzcyBuZXdPcGVyYXRvcikgb25seURldmVsb3BlcgogICAgewogICAgICAgb3BlcmF0b3IgPSBuZXdPcGVyYXRvcjsKICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVCZXR0aW5nX29ubHlfRGV2KCkKICAgIG9ubHlEZXZlbG9wZXJPck9wZXJhdG9yCiAgICB7CiAgICAgICAgQ29udHJhY3RTdGF0ZT10cnVlOwoKICAgIH0KCiAgICBldmVudCBQbGF5ZXJCZXQodWludDI1NiBnYW1ibGVJZCwgdWludDI1NiBwbGF5ZXJUb2tlbnMpOwogICAgZXZlbnQgRW5kR2FtZShhZGRyZXNzIHBsYXllciwgdWludDggcmVzdWx0LCB1aW50MjU2IGdhbWJsZUlkKTsKICAgIGV2ZW50IFNldHRpbmdzQ2hhbmdlZCh1aW50MjU2IG1heEJldCwgdWludDI1NiBvbmVDcmVkaXQsIHVpbnQ4IERlZmF1bHRNaW5CZXRJbkNyZWRpdHMsIHVpbnQ4IE1pbkJldEluQ3JlZGl0czUwLCB1aW50OCBNaW5CZXRJbkNyZWRpdHMzMywgdWludDggYmxvY2tEZWxheUJlZm9yZVNwaW4sIGJvb2wgY29udHJhY3RTdGF0ZSk7CiAgICBldmVudCBFcnJvckxvZyhhZGRyZXNzIHBsYXllciwgc3RyaW5nIG1lc3NhZ2UpOwogICAgZXZlbnQgR2FzTG9nKHN0cmluZyBtc2csIHVpbnQyNTYgbGV2ZWwsIHVpbnQyNTYgZ2FzKTsKCiAgIGZ1bmN0aW9uIHRvdGFsQmV0VmFsdWUoR2FtZUluZm8gbWVtb3J5IGcpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikKICAgewogICAgICAgdWludDI1NiB0b3RhbEJldHNWYWx1ZSA9IDA7CiAgICAgICB1aW50OCBuUGxheWVyQmV0Tm8gPSAwOwogICAgICAgdWludDggYmV0c0NvdW50ID0gdWludDgoYnl0ZXMzMihnLmJldHMpWzBdKTsKCiAgICAgICBmb3IodWludDggaSA9IDA7IGkgPCBtYXhUeXBlQmV0cztpKyspCiAgICAgICAgaWYgKGlzQml0U2V0KGcuYmV0cywgaSkpCiAgICAgICAgewogICAgICAgICAgdG90YWxCZXRzVmFsdWUgKz0gZ2V0QmV0VmFsdWVCeUdhbWJsZShnLCBuUGxheWVyQmV0Tm8rMSk7CiAgICAgICAgICBuUGxheWVyQmV0Tm8rKzsKCiAgICAgICAgICBpZiAoYmV0c0NvdW50ID09IDEpIGJyZWFrOwogICAgICAgICAgYmV0c0NvdW50LS07CiAgICAgICAgfQoKICAgICAgIHJldHVybiB0b3RhbEJldHNWYWx1ZTsKICAgfQoKICAgZnVuY3Rpb24gdG90YWxCZXRDb3VudChHYW1lSW5mbyBtZW1vcnkgZykgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogICB7CiAgICAgICB1aW50MjU2IHRvdGFsQmV0cyA9IDA7CiAgICAgICBmb3IodWludDggaT0wOyBpIDwgbWF4VHlwZUJldHM7aSsrKQogICAgICAgIGlmIChpc0JpdFNldChnLmJldHMsIGkpKSB0b3RhbEJldHMrKzsKICAgICAgIHJldHVybiB0b3RhbEJldHM7CiAgIH0KCiAgIGZ1bmN0aW9uIHBsYWNlQmV0KHVpbnQyNTYgYmV0cywgYnl0ZXMzMiB2YWx1ZXMxLGJ5dGVzMzIgdmFsdWVzMikgcHVibGljIHBheWFibGUKICAgewogICAgICAgaWYgKENvbnRyYWN0U3RhdGUgPT0gZmFsc2UpCiAgICAgICB7CiAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJDb250cmFjdERpc2FibGVkIik7CiAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgIHJldHVybjsKICAgICAgIH0KCiAgICAgICBpZiAoc21hcnRUb2tlbi5pc09wZXJhdGlvbkJsb2NrZWQoKSkKICAgICAgIHsKICAgICAgICAgRXJyb3JMb2cobXNnLnNlbmRlciwgIkVtaXNzaW9uQmxvY2tlZCIpOwogICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSkgPT0gZmFsc2UpIHRocm93OwogICAgICAgICByZXR1cm47CiAgICAgICB9CgogICAgICAgdmFyIGdhbWJsZXNMZW5ndGggPSBnYW1ibGVzLmxlbmd0aDsKCiAgICAgICBpZiAoZ2FtYmxlc0xlbmd0aCA+IDApCiAgICAgICB7CiAgICAgICAgICB1aW50OCBnYW1ibGVzQ291bnRJbkN1cnJlbnRCbG9jayA9IDA7CiAgICAgICAgICBmb3IodmFyIGkgPSBnYW1ibGVzTGVuZ3RoIC0gMTtpID4gMDsgaS0tKQogICAgICAgICAgewogICAgICAgICAgICBpZiAoZ2FtYmxlc1tpXS5ibG9ja051bWJlciA9PSBibG9jay5udW1iZXIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgaWYgKGdhbWJsZXNbaV0ucGxheWVyID09IG1zZy5zZW5kZXIpCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJQbGF5IHR3aWNlIHRoZSBzYW1lIGJsb2NrIik7CiAgICAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSkgPT0gZmFsc2UpIHRocm93OwogICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICBnYW1ibGVzQ291bnRJbkN1cnJlbnRCbG9jaysrOwogICAgICAgICAgICAgICBpZiAoZ2FtYmxlc0NvdW50SW5DdXJyZW50QmxvY2sgPj0gbWF4R2FtYmxlc1BlckJsb2NrKQogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJtYXhHYW1ibGVzUGVyQmxvY2siKTsKICAgICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpID09IGZhbHNlKSB0aHJvdzsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICB9CgogICAgICAgdmFyIF9jdXJyZW50TWF4QmV0ID0gY3VycmVudE1heEJldDsKCiAgICAgICBpZiAobXNnLnZhbHVlIDwgX2N1cnJlbnRNYXhCZXQvMjU2IHx8IGJldHMgPT0gMCkKICAgICAgIHsKICAgICAgICAgIEVycm9yTG9nKG1zZy5zZW5kZXIsICJXcm9uZyBiZXQgdmFsdWUiKTsKICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgICByZXR1cm47CiAgICAgICB9CgogICAgICAgaWYgKG1zZy52YWx1ZSA+IF9jdXJyZW50TWF4QmV0KQogICAgICAgewogICAgICAgICAgRXJyb3JMb2cobXNnLnNlbmRlciwgIkxpbWl0IGZvciB0YWJsZSIpOwogICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpID09IGZhbHNlKSB0aHJvdzsKICAgICAgICAgIHJldHVybjsKICAgICAgIH0KCiAgICAgICBHYW1lSW5mbyBtZW1vcnkgZyA9IEdhbWVJbmZvKG1zZy5zZW5kZXIsIGJsb2NrLm51bWJlciwgMzcsIGJldHMsIHZhbHVlczEsdmFsdWVzMik7CgogICAgICAgaWYgKHRvdGFsQmV0VmFsdWUoZykgIT0gbXNnLnZhbHVlKQogICAgICAgewogICAgICAgICAgRXJyb3JMb2cobXNnLnNlbmRlciwgIldyb25nIGJldCB2YWx1ZSIpOwogICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpID09IGZhbHNlKSB0aHJvdzsKICAgICAgICAgIHJldHVybjsKICAgICAgIH0KCiAgICAgICBnYW1ibGVzLnB1c2goZyk7CgogICAgICAgYWRkcmVzcyBhZmZpbGlhdGUgPSAwOwogICAgICAgdWludDE2IGNvZWZfYWZmaWxpYXRlID0gMDsKICAgICAgIGlmIChhZGRyZXNzKHNtYXJ0QWZmaWxpYXRlQ29udHJhY3QpID4gMCkKICAgICAgIHsKICAgICAgICAgKGFmZmlsaWF0ZSwgY29lZl9hZmZpbGlhdGUpID0gc21hcnRBZmZpbGlhdGVDb250cmFjdC5nZXRBZmZpbGlhdGVJbmZvKG1zZy5zZW5kZXIpOwogICAgICAgfQoKICAgICAgIHVpbnQyNTYgcGxheWVyVG9rZW5zID0gc21hcnRUb2tlbi5lbWlzc2lvbihtc2cuc2VuZGVyLCBhZmZpbGlhdGUsIG1zZy52YWx1ZSwgY29lZl9wbGF5ZXIsIGNvZWZfYWZmaWxpYXRlKTsKCiAgICAgICBQbGF5ZXJCZXQoZ2FtYmxlc0xlbmd0aCwgcGxheWVyVG9rZW5zKTsKICAgfQoKICAgIGZ1bmN0aW9uIEludmVzdCgpIHBheWFibGUgb25seURldmVsb3BlcgogICAgewoKICAgIH0KCiAgICBmdW5jdGlvbiBHZXRHYW1lSW5kZXhlc1RvUHJvY2VzcygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2WzY0XSBnYW1lSW5kZXhlcykKICAgIHsKICAgICAgdWludDggaW5kZXggPSAwOwogICAgICBmb3IoaW50MjU2IGkgPSBpbnQyNTYoZ2FtYmxlcy5sZW5ndGgpIC0gMTtpID49IDA7aS0tKQogICAgICB7CiAgICAgICAgIEdhbWVJbmZvIG1lbW9yeSBnID0gZ2FtYmxlc1t1aW50MjU2KGkpXTsKICAgICAgICAgaWYgKGJsb2NrLm51bWJlciAtIGcuYmxvY2tOdW1iZXIgPj0gMjU2KSBicmVhazsKCiAgICAgICAgIC8vIGlmIGJsb2NrLm51bWJlciA9PSAoZy5ibG9ja051bWJlciArIEJsb2NrRGVsYXkpIHdlIGNhbid0IGdldCBibG9ja2hhc2ggaW4gdGhlIGN1cnJlbnQgYmxvY2ssIAogICAgICAgICAvLyBidXQgd2UgY2FuIGNhbGN1bGF0ZSBwcmVsaW1pbmFyeSBnYW1lIHJlc3VsdCBmb3IgcGxheWVyIGFuZCBzZW5kIHRyYW5zYWN0aW9uICh0aGF0IHdpbGwgYmUgbWluZWQgaW4gdGhlIG5leHQgYmxvY2spICAgICAgICAgCiAgICAgICAgIGlmIChnLndoZWVsUmVzdWx0ID09IDM3ICYmIGJsb2NrLm51bWJlciA+PSBnLmJsb2NrTnVtYmVyICsgQmxvY2tEZWxheSkKICAgICAgICAgewogICAgICAgICAgICBnYW1lSW5kZXhlc1tpbmRleCsrXSA9IHVpbnQyNTYoaSArIDEpOwogICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB1aW50MjU2IGxhc3RCbG9ja0dhbWVzUHJvY2Vzc2VkOwoKICAgIGZ1bmN0aW9uIFByb2Nlc3NHYW1lcyh1aW50MjU2W10gZ2FtZUluZGV4ZXMsIGJvb2wgc2ltdWxhdGUpCiAgICB7CiAgICAgIGlmICghc2ltdWxhdGUpCiAgICAgIHsKICAgICAgICAgaWYgKGxhc3RCbG9ja0dhbWVzUHJvY2Vzc2VkID09IGJsb2NrLm51bWJlcikgIHJldHVybjsKICAgICAgICAgbGFzdEJsb2NrR2FtZXNQcm9jZXNzZWQgPSBibG9jay5udW1iZXI7CiAgICAgIH0KCiAgICAgIHVpbnQ4IGRlbGF5ID0gQmxvY2tEZWxheTsKICAgICAgdWludDI1NiBsZW5ndGggPSBnYW1lSW5kZXhlcy5sZW5ndGg7CiAgICAgIGJvb2wgc3VjY2VzcyA9IGZhbHNlOwogICAgICBmb3IodWludDI1NiBpID0gMDtpIDwgbGVuZ3RoO2krKykKICAgICAgewogICAgICAgICBpZiAoUHJvY2Vzc0dhbWUoZ2FtZUluZGV4ZXNbaV0sIGRlbGF5KSA9PSBHYW1lU3RhdHVzLlN1Y2Nlc3MpIHN1Y2Nlc3MgPSB0cnVlOwogICAgICB9CiAgICAgIGlmIChzaW11bGF0ZSAmJiAhc3VjY2VzcykgdGhyb3c7CiAgICB9CgogICAgZnVuY3Rpb24gUHJvY2Vzc0dhbWVFeHQodWludDI1NiBpbmRleCkgcHVibGljIHJldHVybnMgKEdhbWVTdGF0dXMpCiAgICB7CiAgICAgIHJldHVybiBQcm9jZXNzR2FtZShpbmRleCwgQmxvY2tEZWxheSk7CiAgICB9CgogICAgZnVuY3Rpb24gUHJvY2Vzc0dhbWUodWludDI1NiBpbmRleCwgdWludDI1NiBkZWxheSkgcHJpdmF0ZSByZXR1cm5zIChHYW1lU3RhdHVzKQogICAgewogICAgICBHYW1lSW5mbyBtZW1vcnkgZyA9IGdhbWJsZXNbaW5kZXhdOwogICAgICBpZiAoYmxvY2subnVtYmVyIC0gZy5ibG9ja051bWJlciA+PSAyNTYpIHJldHVybiBHYW1lU3RhdHVzLlN0b3A7CgogICAgICBpZiAoZy53aGVlbFJlc3VsdCA9PSAzNyAmJiBibG9jay5udW1iZXIgPiBnLmJsb2NrTnVtYmVyICsgZGVsYXkpCiAgICAgIHsKICAgICAgICAgZ2FtYmxlc1tpbmRleF0ud2hlZWxSZXN1bHQgPSBnZXRSYW5kb21OdW1iZXIoZy5wbGF5ZXIsIGcuYmxvY2tOdW1iZXIpOwoKICAgICAgICAgdWludDI1NiBwbGF5ZXJXaW5uaW5ncyA9IGdldEdhbWVSZXN1bHQoZ2FtYmxlc1tpbmRleF0pOwogICAgICAgICBpZiAocGxheWVyV2lubmluZ3MgPiAwKQogICAgICAgICB7CiAgICAgICAgICAgIGlmIChnLnBsYXllci5zZW5kKHBsYXllcldpbm5pbmdzKSA9PSBmYWxzZSkgdGhyb3c7CiAgICAgICAgIH0KCiAgICAgICAgIEVuZEdhbWUoZy5wbGF5ZXIsIGdhbWJsZXNbaW5kZXhdLndoZWVsUmVzdWx0LCBpbmRleCk7CiAgICAgICAgIHJldHVybiBHYW1lU3RhdHVzLlN1Y2Nlc3M7CiAgICAgIH0KCiAgICAgIHJldHVybiBHYW1lU3RhdHVzLlNraXBwZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKGFkZHJlc3MgcGxheWVyLCB1aW50MjU2IHBsYXllcmJsb2NrKSBwcml2YXRlIHJldHVybnModWludDggd2hlZWxSZXN1bHQpCiAgICB7CiAgICAgICAgLy8gYmxvY2suYmxvY2toYXNoIC0gaGFzaCBvZiB0aGUgZ2l2ZW4gYmxvY2sgLSBvbmx5IHdvcmtzIGZvciAyNTYgbW9zdCByZWNlbnQgYmxvY2tzIGV4Y2x1ZGluZyBjdXJyZW50CiAgICAgICAgYnl0ZXMzMiBibG9ja0hhc2ggPSBibG9jay5ibG9ja2hhc2gocGxheWVyYmxvY2srQmxvY2tEZWxheSk7CgogICAgICAgIGlmIChibG9ja0hhc2g9PTApCiAgICAgICAgewogICAgICAgICAgRXJyb3JMb2cobXNnLnNlbmRlciwgIkNhbm5vdCBnZW5lcmF0ZSByYW5kb20gbnVtYmVyIik7CiAgICAgICAgICB3aGVlbFJlc3VsdCA9IDIwMDsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgIGJ5dGVzMzIgc2hhUGxheWVyID0gc2hhMyhwbGF5ZXIsIGJsb2NrSGFzaCk7CgogICAgICAgICAgd2hlZWxSZXN1bHQgPSB1aW50OCh1aW50MjU2KHNoYVBsYXllciklMzcpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVSYW5kb21OdW1iZXJCeUJsb2NraGFzaCh1aW50MjU2IGJsb2NrSGFzaCwgYWRkcmVzcyBwbGF5ZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCB3aGVlbFJlc3VsdCkKICAgIHsKICAgICAgICAgIGJ5dGVzMzIgc2hhUGxheWVyID0gc2hhMyhwbGF5ZXIsIGJsb2NrSGFzaCk7CgogICAgICAgICAgd2hlZWxSZXN1bHQgPSB1aW50OCh1aW50MjU2KHNoYVBsYXllciklMzcpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVtZXJnZW5jeUZpeEdhbWVSZXN1bHQodWludDY0IGdhbWJsZUlkLCB1aW50MjU2IGJsb2NrSGFzaCkgb25seURldmVsb3Blck9yT3BlcmF0b3IKICAgIHsKICAgICAgLy8gUHJvYmFibHkgdGhpcyBmdW5jdGlvbiB3aWxsIG5ldmVyIGJlIGNhbGxlZCwgYnV0CiAgICAgIC8vIGlmIGdhbWUgd2FzIG5vdCBzcGlubmVkIGluIDI1NiBibG9ja3MgdGhlbiBibG9jay5ibG9ja2hhc2ggd2lsbCByZXR1cm5zIGFsd2F5cyAwIGFuZAogICAgICAvLyB3ZSBzaG91bGQgZml4IHRoaXMgbWFudWFsbHkgKHlvdSBjYW4gY2hlY2sgcmVzdWx0IHdpdGggcHVibGljIGZ1bmN0aW9uIGNhbGN1bGF0ZVJhbmRvbU51bWJlckJ5QmxvY2toYXNoKQogICAgICBHYW1lSW5mbyBtZW1vcnkgZ2FtYmxlID0gZ2FtYmxlc1tnYW1ibGVJZF07CiAgICAgIGlmIChnYW1ibGUud2hlZWxSZXN1bHQgIT0gMjAwKSB0aHJvdzsKCiAgICAgIGdhbWJsZXNbZ2FtYmxlSWRdLndoZWVsUmVzdWx0ID0gY2FsY3VsYXRlUmFuZG9tTnVtYmVyQnlCbG9ja2hhc2goYmxvY2tIYXNoLCBnYW1ibGUucGxheWVyKTsKCiAgICAgIHVpbnQyNTYgcGxheWVyV2lubmluZ3MgPSBnZXRHYW1lUmVzdWx0KGdhbWJsZXNbZ2FtYmxlSWRdKTsKICAgICAgaWYgKHBsYXllcldpbm5pbmdzID4gMCkKICAgICAgewogICAgICAgIGlmIChnYW1ibGUucGxheWVyLnNlbmQocGxheWVyV2lubmluZ3MpID09IGZhbHNlKSB0aHJvdzsKICAgICAgfQoKICAgICAgRW5kR2FtZShnYW1ibGUucGxheWVyLCBnYW1ibGUud2hlZWxSZXN1bHQsIGdhbWJsZUlkKTsKICAgIH0KCgogICAgZnVuY3Rpb24gcHJlbGltaW5hcnlHYW1lUmVzdWx0KHVpbnQ2NCBnYW1ibGVJbmRleCkgY29uc3RhbnQgcmV0dXJucyAodWludDY0IGdhbWJsZUlkLCBhZGRyZXNzIHBsYXllciwgdWludDI1NiBibG9ja051bWJlciwgdWludDI1NiB0b3RhbFdpbiwgdWludDggd2hlZWxSZXN1bHQsIHVpbnQyNTYgYmV0cywgdWludDI1NiB2YWx1ZXMxLCB1aW50MjU2IHZhbHVlczIsIHVpbnQyNTYgblRvdGFsQmV0VmFsdWUsIHVpbnQyNTYgblRvdGFsQmV0Q291bnQpCiAgICB7CiAgICAgIEdhbWVJbmZvIG1lbW9yeSBnID0gZ2FtYmxlc1t1aW50MjU2KGdhbWJsZUluZGV4KV07CgogICAgICBpZiAoZy53aGVlbFJlc3VsdCA9PSAzNyAmJiBibG9jay5udW1iZXIgPiBnLmJsb2NrTnVtYmVyICsgQmxvY2tEZWxheSkKICAgICAgewogICAgICAgICBnYW1ibGVzW2dhbWJsZUluZGV4XS53aGVlbFJlc3VsdCA9IGdldFJhbmRvbU51bWJlcihnLnBsYXllciwgZy5ibG9ja051bWJlcik7CiAgICAgICAgIHJldHVybiBnZXRHYW1lKGdhbWJsZUluZGV4KTsKICAgICAgfQogICAgICB0aHJvdzsKICAgIH0KCiAgICAvLyBQcmVsaW1pbmFyeSBnYW1lIHJlc3VsdCBiZWZvcmUgcmVhbCB0cmFuc2FjdGlvbiBpcyBtaW5lZAogICAgZnVuY3Rpb24gY2FsY1JhbmRvbU51bWJlckFuZEdldFByZWxpbWluYXJ5R2FtZVJlc3VsdCh1aW50MjU2IGJsb2NrSGFzaCwgdWludDY0IGdhbWJsZUluZGV4KSBjb25zdGFudCByZXR1cm5zICh1aW50NjQgZ2FtYmxlSWQsIGFkZHJlc3MgcGxheWVyLCB1aW50MjU2IGJsb2NrTnVtYmVyLCB1aW50MjU2IHRvdGFsV2luLCB1aW50OCB3aGVlbFJlc3VsdCwgdWludDI1NiBiZXRzLCB1aW50MjU2IHZhbHVlczEsIHVpbnQyNTYgdmFsdWVzMiwgdWludDI1NiBuVG90YWxCZXRWYWx1ZSwgdWludDI1NiBuVG90YWxCZXRDb3VudCkKICAgIHsKICAgICAgR2FtZUluZm8gbWVtb3J5IGcgPSBnYW1ibGVzW3VpbnQyNTYoZ2FtYmxlSW5kZXgpXTsKICAgICAgZy53aGVlbFJlc3VsdCA9IGNhbGN1bGF0ZVJhbmRvbU51bWJlckJ5QmxvY2toYXNoKGJsb2NrSGFzaCwgZy5wbGF5ZXIpOwoKICAgICAgZ2FtYmxlSWQgPSBnYW1ibGVJbmRleDsKICAgICAgcGxheWVyID0gZy5wbGF5ZXI7CiAgICAgIHdoZWVsUmVzdWx0ID0gZy53aGVlbFJlc3VsdDsKICAgICAgdG90YWxXaW4gPSBnZXRHYW1lUmVzdWx0KGcpOwogICAgICBibG9ja051bWJlciA9IGcuYmxvY2tOdW1iZXI7CiAgICAgIG5Ub3RhbEJldFZhbHVlID0gdG90YWxCZXRWYWx1ZShnKTsKICAgICAgblRvdGFsQmV0Q291bnQgPSB0b3RhbEJldENvdW50KGcpOwogICAgICBiZXRzID0gZy5iZXRzOwogICAgICB2YWx1ZXMxID0gdWludDI1NihnLnZhbHVlcyk7CiAgICAgIHZhbHVlczIgPSB1aW50MjU2KGcudmFsdWVzMik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZVJlc3VsdChHYW1lSW5mbyBtZW1vcnkgZ2FtZSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsV2luKQogICAgewogICAgICAgIHRvdGFsV2luID0gMDsKICAgICAgICB1aW50OCBuUGxheWVyQmV0Tm8gPSAwOwogICAgICAgIC8vIHdlIHNlbnQgY291bnQgYmV0cyBhdCBsYXN0IGJ5dGUKICAgICAgICB1aW50OCBiZXRzQ291bnQgPSB1aW50OChieXRlczMyKGdhbWUuYmV0cylbMF0pOwogICAgICAgIGZvcih1aW50OCBpPTA7IGk8bWF4VHlwZUJldHM7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGlmIChpc0JpdFNldChnYW1lLmJldHMsIGkpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdmFyIHdpbk11bCA9IHdpbk1hdHJpeC5nZXRDb2VmZihnZXRJbmRleChpLCBnYW1lLndoZWVsUmVzdWx0KSk7IC8vIGdldCB3aW4gY29lZgogICAgICAgICAgICAgIGlmICh3aW5NdWwgPiAwKSB3aW5NdWwrKzsgLy8gKyByZXR1cm4gcGxheWVyIGJldAogICAgICAgICAgICAgIHRvdGFsV2luICs9IHdpbk11bCAqIGdldEJldFZhbHVlQnlHYW1ibGUoZ2FtZSwgblBsYXllckJldE5vKzEpOwogICAgICAgICAgICAgIG5QbGF5ZXJCZXRObysrOwoKICAgICAgICAgICAgICBpZiAoYmV0c0NvdW50ID09IDEpIGJyZWFrOwogICAgICAgICAgICAgIGJldHNDb3VudC0tOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWUodWludDY0IGluZGV4KSBjb25zdGFudCByZXR1cm5zICh1aW50NjQgZ2FtYmxlSWQsIGFkZHJlc3MgcGxheWVyLCB1aW50MjU2IGJsb2NrTnVtYmVyLCB1aW50MjU2IHRvdGFsV2luLCB1aW50OCB3aGVlbFJlc3VsdCwgdWludDI1NiBiZXRzLCB1aW50MjU2IHZhbHVlczEsIHVpbnQyNTYgdmFsdWVzMiwgdWludDI1NiBuVG90YWxCZXRWYWx1ZSwgdWludDI1NiBuVG90YWxCZXRDb3VudCkKICAgIHsKICAgICAgICBnYW1ibGVJZCA9IGluZGV4OwogICAgICAgIHBsYXllciA9IGdhbWJsZXNbaW5kZXhdLnBsYXllcjsKICAgICAgICB0b3RhbFdpbiA9IGdldEdhbWVSZXN1bHQoZ2FtYmxlc1tpbmRleF0pOwogICAgICAgIGJsb2NrTnVtYmVyID0gZ2FtYmxlc1tpbmRleF0uYmxvY2tOdW1iZXI7CiAgICAgICAgd2hlZWxSZXN1bHQgPSBnYW1ibGVzW2luZGV4XS53aGVlbFJlc3VsdDsKICAgICAgICBuVG90YWxCZXRWYWx1ZSA9IHRvdGFsQmV0VmFsdWUoZ2FtYmxlc1tpbmRleF0pOwogICAgICAgIG5Ub3RhbEJldENvdW50ID0gdG90YWxCZXRDb3VudChnYW1ibGVzW2luZGV4XSk7CiAgICAgICAgYmV0cyA9IGdhbWJsZXNbaW5kZXhdLmJldHM7CiAgICAgICAgdmFsdWVzMSA9IHVpbnQyNTYoZ2FtYmxlc1tpbmRleF0udmFsdWVzKTsKICAgICAgICB2YWx1ZXMyID0gdWludDI1NihnYW1ibGVzW2luZGV4XS52YWx1ZXMyKTsKICAgIH0KCiAgIGZ1bmN0aW9uKCkKICAgewogICAgICB0aHJvdzsKICAgfQoKCn0='.
	

]
