Class {
	#name : #SRTefd66046f08851868cd2e20015bd1437330b395f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTefd66046f08851868cd2e20015bd1437330b395f >> base64 [
	^ 'LyogVGhlIEJ1cm5lciB2MS4wLCBNYWluLU5ldCByZWxlYXNlLgoqICB+YnkgR2x1ZWRvZyAKKiAgLS0tLS0tLS0tLS0KKgoqICBDb21waWxlciB2ZXJzaW9uOiAwLjQuMTkrY29tbWl0LmM0Y2JiYjA1LkVtc2NyaXB0ZW4uY2xhbmcKKgoqIFRoZSBCdXJuZXIgaXMgQmlsbGlvbmFpcmUgVG9rZW4ncyB2ZXJzaW9uIG9mIGEgIkZhdWNldCIgLSBhbiBldmlsLCB0d2lzdGVkIEZhdWNldC4gCiogSnVzdCBsaWtlIGEgRmF1Y2V0LCBwZW9wbGUgY2FuIHVzZSBpdCB0byBnZXQgc29tZSBleHRyYSBjb2lucy4gCiogVW5saWtlIGEgRmF1Y2V0LCB0aGUgQnVybmVyIHdpbGwgYWxzbyBidXJuIGNvaW5zIGFuZCByZWR1Y2UgdGhlIG1heGltdW0gc3VwcGx5IGluIHRoZSBwcm9jZXNzIG9mIGdpdmluZyBwZW9wbGUgZXh0cmEgY29pbnMuCiogVGhlIEJ1cm5lciBpcyBvbmx5IHVzYWJsZSBieSBhZGRyZXNzZXMgd2hvIGhhdmUgYWxzbyBwYXJ0aWNpcGF0ZWQgaW4gdGhlIGxhc3Qgd2VlaydzIFJhZmZsZSByb3VuZC4KKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40Ljg7Cgpjb250cmFjdCBYQkxfRVJDMjBXcmFwcGVyCnsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxfc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJ1cm5Gcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9Cgpjb250cmFjdCBYQkxfUmFmZmxlV3JhcHBlcgp7CiAgICBmdW5jdGlvbiBnZXRMYXN0V2Vla1N0YWtlKGFkZHJlc3MgdXNlcl9hZGRyKSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBsYXN0X3dlZWtfc3Rha2UpOwogICAgZnVuY3Rpb24gcmVkdWNlTGFzdFdlZWtTdGFrZShhZGRyZXNzIHVzZXJfYWRkciwgdWludDI1NiBhbW91bnQpIHB1YmxpYzsKfQoKY29udHJhY3QgVGhlQnVybmVyCnsKICAgIHVpbnQyNTYgREVDSU1BTFMgPSAxMDAwMDAwMDAwMDAwMDAwMDAwOwoKICAgIFhCTF9FUkMyMFdyYXBwZXIgRVJDMjBfQ0FMTFM7CiAgICBYQkxfUmFmZmxlV3JhcHBlciBSQUZGTEVfQ0FMTFM7CgogICAgdWludDggcHVibGljIGV4dHJhX2JvbnVzOyAvKiBUaGUgcGVyY2VudGFnZSBvZiBleHRyYSBjb2lucyB0aGF0IHRoZSBidXJuZXIgd2lsbCByZXdhcmQgcGVvcGxlIGZvci4gKi8KCiAgICBhZGRyZXNzIHB1YmxpYyBidXJuZXJfYWRkcjsKICAgIGFkZHJlc3MgcHVibGljIHJhZmZsZV9hZGRyOwogICAgYWRkcmVzcyBvd25lcl9hZGRyOwogICAgYWRkcmVzcyBYQkxDb250cmFjdF9hZGRyOwoKICAgIGZ1bmN0aW9uIFRoZUJ1cm5lcigpCiAgICB7CiAgICAgICAgWEJMQ29udHJhY3RfYWRkciA9IDB4NDlBZUMwNzUyRTY4RDAyODJEYjU0NEM2NzdmNkJBNDA3QkExN0VENzsKICAgICAgICByYWZmbGVfYWRkciA9IDB4MDsgLyogRG8gd2UgaGF2ZSBhIHJhZmZsZSBhZGRyZXNzPyAqLwogICAgICAgIGV4dHJhX2JvbnVzID0gNTsgLyogNSUgcmV3YXJkIGZvciBidXJuaW5nIHlvdXIgb3duIGNvaW5zLCBwcm92aWRlZCB0aGUgYnVybmVyIGhhcyBlbm91Z2guICovCiAgICAgICAgYnVybmVyX2FkZHIgPSBhZGRyZXNzKHRoaXMpOwogICAgICAgIG93bmVyX2FkZHIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIAogICAgewogICAgICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXJfYWRkcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRSYWZmbGVBZGRyZXNzKGFkZHJlc3MgX3JhZmZsZV9hZGRyKSBwdWJsaWMgb25seU93bmVyCiAgICB7ICAgLyogQWxsb3dzIHRoZSBvd25lciB0byBzZXQgdGhlIHJhZmZsZSBhZGRyZXNzICovCiAgICAgICAgcmFmZmxlX2FkZHIgPSBfcmFmZmxlX2FkZHI7CiAgICAgICAgUkFGRkxFX0NBTExTID0gWEJMX1JhZmZsZVdyYXBwZXIocmFmZmxlX2FkZHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFBlcmNlbnQodWludDggcGVyY2VudCwgdWludDI1NiBudW1iZXIpIHByaXZhdGUgcmV0dXJucyAodWludDI1NiByZXN1bHQpCiAgICB7CiAgICAgICAgcmV0dXJuIG51bWJlciAqIHBlcmNlbnQgLyAxMDA7CiAgICB9CgogICAgZnVuY3Rpb24gcmVnaXN0ZXJCdXJuKHVpbnQyNTYgdXNlcl9pbnB1dCkgcmV0dXJucyAoaW50OCByZWdpc3RlckJ1cm5fU1RBVFVTKQogICAgeyAgIC8qIFRoaXMgZnVuY3Rpb24gd2lsbCB0YWtlIGEgbnVtYmVyIGFzIGlucHV0LCBtYWtlIGl0IDE4IGRlY2ltYWwgZm9ybWF0LCBidXJuIHRoZSB0b2tlbnMsIAogICAgICAgICAgICBhbmQgZ2l2ZSB0aGVtIGJhY2sgdG8gdGhlIHVzZXIgcGx1cyA1JSAtIGlmIGhlIGlzIGVsbGlnaWJsZSBvZiBjb3Vyc2UuCiAgICAgICAgKi8KICAgICAgICB1aW50MjU2IHRva2Vuc19yZWdpc3RlcmVkID0gdXNlcl9pbnB1dCpERUNJTUFMUzsgLyogMTggRGVjaW1hbHMgKi8KICAgICAgICByZXF1aXJlIChFUkMyMF9DQUxMUy5hbGxvd2FuY2UobXNnLnNlbmRlciwgYnVybmVyX2FkZHIpID49IHRva2Vuc19yZWdpc3RlcmVkKTsgLyogRGlkIHRoZSB1c2VyIHByZS1hbGxvdyBlbm91Z2ggdG9rZW5zID8gKi8KICAgICAgICByZXF1aXJlICh0b2tlbnNfcmVnaXN0ZXJlZCA8PSBSQUZGTEVfQ0FMTFMuZ2V0TGFzdFdlZWtTdGFrZShtc2cuc2VuZGVyKSk7IC8qIERpZCB0aGUgdXNlciBoYXZlIGVub3VnaCB0aWNrZXRzIGluIGxhc3Qgd2VlaydzIFJhZmZsZSA/ICovCiAgICAgICAgdWludDI1NiBlbGlnaWJsZV9yZXdhcmQgPSB0b2tlbnNfcmVnaXN0ZXJlZCArIGdldFBlcmNlbnQoZXh0cmFfYm9udXMsIHRva2Vuc19yZWdpc3RlcmVkKTsKICAgICAgICByZXF1aXJlIChlbGlnaWJsZV9yZXdhcmQgPD0gRVJDMjBfQ0FMTFMuYmFsYW5jZU9mKGJ1cm5lcl9hZGRyKSk7IC8qIERvIHdlIGhhdmUgZW5vdWdoIHRva2VucyB0byBnaXZlIG91dD8gKi8KCiAgICAgICAgLyogQnVybiB0aGVpciB0b2tlbnMgYW5kIGdpdmUgdGhlbSB0aGVpciByZXdhcmQgKi8KICAgICAgICBFUkMyMF9DQUxMUy5idXJuRnJvbShtc2cuc2VuZGVyLCB0b2tlbnNfcmVnaXN0ZXJlZCk7CiAgICAgICAgRVJDMjBfQ0FMTFMudHJhbnNmZXIobXNnLnNlbmRlciwgZWxpZ2libGVfcmV3YXJkKTsKCiAgICAgICAgLyogV2UgaGF2ZSB0byByZWR1Y2UgdGhlIHVzZXJzIGxhc3Rfd2Vla19zdGFrZSBzbyB0aGF0IHRoZXkgY2FuJ3QgYnVybiBhbGwgb2YgdGhlIHRva2VucywganVzdCB0aGUgb25lcyB0aGV5IGNvbnRyaWJ1dGVkIHRvIHRoZSBSYWZmbGUuICovCiAgICAgICAgUkFGRkxFX0NBTExTLnJlZHVjZUxhc3RXZWVrU3Rha2UobXNnLnNlbmRlciwgdG9rZW5zX3JlZ2lzdGVyZWQpOwoKICAgICAgICByZXR1cm4gMDsKICAgIH0KCgogICAgLyogPDw8LS0tIERlYnVnIE9OTFkgZnVuY3Rpb25zLiAtLS0+Pj4gKi8KICAgIC8qIDw8PC0tLSBEZWJ1ZyBPTkxZIGZ1bmN0aW9ucy4gLS0tPj4+ICovCiAgICAvKiA8PDwtLS0gRGVidWcgT05MWSBmdW5jdGlvbnMuIC0tLT4+PiAqLwoKICAgIGZ1bmN0aW9uIGRTRVRfWEJMX0FERFJFU1MoYWRkcmVzcyBfWEJMQ29udHJhY3RfYWRkcikgcHVibGljIG9ubHlPd25lcgogICAgey8qIERlYnVnZ2luZyBwdXJwb3Nlcy4gVGhpcyB3aWxsIGJlIGhhcmRjb2RlZCBpbiB0aGUgZGVwbG95YWJsZSB2ZXJzaW9uLiAqLwogICAgICAgIFhCTENvbnRyYWN0X2FkZHIgPSBfWEJMQ29udHJhY3RfYWRkcjsKICAgICAgICBFUkMyMF9DQUxMUyA9IFhCTF9FUkMyMFdyYXBwZXIoWEJMQ29udHJhY3RfYWRkcik7CiAgICB9Cn0='.
	

]
