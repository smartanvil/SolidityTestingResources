Class {
	#name : #SRT5d269f0280ff406c61535623ee37a45cd22f4dd7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d269f0280ff406c61535623ee37a45cd22f4dd7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9Cgpjb250cmFjdCBBdWN0aW9uIGlzIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIGVudW0gU3RhdGVzIHsgU2V0dXAsIEFjY2VwdGluZ0JpZHMsIFBhdXNlZCwgRW5kZWQgfQogIAogIC8vIEN1cnJlbnQgc3RhdGUgb2YgdGhlIGF1Y3Rpb24gd2hpY2ggc3RhcnRzIGF0IFNldHVwLgogIFN0YXRlcyBwdWJsaWMgY3VycmVudFN0YXRlID0gU3RhdGVzLlNldHVwOwoKICAvLyBDdXJyZW50IGhpZ2hlc3QgYmlkIGRhdGEKICBhZGRyZXNzIHB1YmxpYyBoaWdoZXN0QmlkZGVyOwogIHVpbnQyNTYgcHVibGljIGhpZ2hlc3RCaWQ7CgogIC8vIEFsbG93ZWQgd2l0aGRyYXdhbHMgb2YgcHJldmlvdXMgYmlkcwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwZW5kaW5nUmV0dXJuczsKCiAgLy8gRXZlbnRzIHRoYXQgd2lsbCBiZSBmaXJlZCBvbiBjaGFuZ2VzCiAgZXZlbnQgSGlnaGVzdEJpZEluY3JlYXNlZChhZGRyZXNzIGJpZGRlciwgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IEF1Y3Rpb25TdGFydGVkKCk7CiAgZXZlbnQgQXVjdGlvblBhdXNlZCgpOwogIGV2ZW50IEF1Y3Rpb25SZXN1bWVkKCk7CiAgZXZlbnQgQXVjdGlvbkVuZGVkKGFkZHJlc3Mgd2lubmVyLCB1aW50MjU2IGFtb3VudCk7CgogIG1vZGlmaWVyIGF0U3RhdGUoU3RhdGVzIHN0YXRlKSB7CiAgICByZXF1aXJlKGN1cnJlbnRTdGF0ZSA9PSBzdGF0ZSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbm90QXRTdGF0ZShTdGF0ZXMgc3RhdGUpIHsKICAgIHJlcXVpcmUoY3VycmVudFN0YXRlICE9IHN0YXRlKTsKICAgIF87CiAgfQoKICAvLy8gQmlkIG9uIHRoZSBhdWN0aW9uIHdpdGggdGhlIHZhbHVlIHNlbnQgd2l0aCB0aGlzIHRyYW5zYWN0aW9uLgogIC8vLyBUaGUgdmFsdWUgd2lsbCBvbmx5IGJlIHJlZnVuZGVkIGlmIHRoZSBhdWN0aW9uIGlzIG5vdCB3b24uCiAgZnVuY3Rpb24gYmlkKCkgcGF5YWJsZSBhdFN0YXRlKFN0YXRlcy5BY2NlcHRpbmdCaWRzKSB7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+IGhpZ2hlc3RCaWQpOwoKICAgIGlmIChoaWdoZXN0QmlkICE9IDApIHsKICAgICAgcGVuZGluZ1JldHVybnNbaGlnaGVzdEJpZGRlcl0gPSBwZW5kaW5nUmV0dXJuc1toaWdoZXN0QmlkZGVyXS5hZGQoaGlnaGVzdEJpZCk7CiAgICB9CgogICAgaGlnaGVzdEJpZGRlciA9IG1zZy5zZW5kZXI7CiAgICBoaWdoZXN0QmlkID0gbXNnLnZhbHVlOwogICAgSGlnaGVzdEJpZEluY3JlYXNlZChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogIH0KCiAgLy8vIFdpdGhkcmF3IGEgYmlkIHRoYXQgd2FzIG92ZXJiaWQuCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBub3RBdFN0YXRlKFN0YXRlcy5TZXR1cCkgcmV0dXJucyAoYm9vbCkgewogICAgdWludDI1NiBhbW91bnQgPSBwZW5kaW5nUmV0dXJuc1ttc2cuc2VuZGVyXTsKICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgIHBlbmRpbmdSZXR1cm5zW21zZy5zZW5kZXJdID0gMDsKICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoYW1vdW50KSkgewogICAgICAgIHBlbmRpbmdSZXR1cm5zW21zZy5zZW5kZXJdID0gYW1vdW50OwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLy8gU3RhcnQgdGhlIGF1Y3Rpb24gYW5kIGFsbG93IGJpZGRpbmcuCiAgZnVuY3Rpb24gc3RhcnRBdWN0aW9uKCkgb25seU93bmVyIGF0U3RhdGUoU3RhdGVzLlNldHVwKSB7CiAgICBjdXJyZW50U3RhdGUgPSBTdGF0ZXMuQWNjZXB0aW5nQmlkczsKICAgIEF1Y3Rpb25TdGFydGVkKCk7CiAgfQoKICAvLy8gUGF1c2UgdGhlIGF1Y3Rpb24gYW5kIHRlbXBvcmFyaWx5IGRpc2FibGUgYmlkZGluZy4KICBmdW5jdGlvbiBwYXVzZUF1Y3Rpb24oKSBvbmx5T3duZXIgYXRTdGF0ZShTdGF0ZXMuQWNjZXB0aW5nQmlkcykgewogICAgY3VycmVudFN0YXRlID0gU3RhdGVzLlBhdXNlZDsKICAgIEF1Y3Rpb25QYXVzZWQoKTsKICB9CgogIC8vLyBSZXN1bWUgdGhlIGF1Y3Rpb24gYW5kIGFsbG93IGJpZGRpbmcgb25jZSBhZ2Fpbi4KICBmdW5jdGlvbiByZXN1bWVBdWN0aW9uKCkgb25seU93bmVyIGF0U3RhdGUoU3RhdGVzLlBhdXNlZCkgewogICAgY3VycmVudFN0YXRlID0gU3RhdGVzLkFjY2VwdGluZ0JpZHM7CiAgICBBdWN0aW9uUmVzdW1lZCgpOwogIH0KCiAgLy8vIEVuZCB0aGUgYXVjdGlvbiBhbmQgc2VuZCB0aGUgaGlnaGVzdCBiaWQgdG8gdGhlIG93bmVyCiAgZnVuY3Rpb24gZW5kQXVjdGlvbigpIG9ubHlPd25lciBub3RBdFN0YXRlKFN0YXRlcy5FbmRlZCkgewogICAgY3VycmVudFN0YXRlID0gU3RhdGVzLkVuZGVkOwogICAgQXVjdGlvbkVuZGVkKGhpZ2hlc3RCaWRkZXIsIGhpZ2hlc3RCaWQpOwogICAgb3duZXIudHJhbnNmZXIoaGlnaGVzdEJpZCk7CiAgfQp9Cgpjb250cmFjdCBUdWxpcFRva2VuIGlzIEF1Y3Rpb24sIFN0YW5kYXJkVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlR1bGlwVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVExQIjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxOwoKICAgIGZ1bmN0aW9uIFR1bGlwVG9rZW4oKSB7CiAgICAgIHRvdGFsU3VwcGx5ID0gSU5JVElBTF9TVVBQTFk7CiAgICAgIGJhbGFuY2VzW293bmVyXSA9IElOSVRJQUxfU1VQUExZOwogICAgfQoKICAgIC8vLyBPdmVycmlkZSBBdWN0aW9uLmVuZEF1Y3Rpb24gdG8gdHJhbnNmZXIKICAgIC8vLyBUaGUgVHVsaXAgVG9rZW4gaW4gdGhlIHNhbWUgdHJhbnNhY3Rpb24uIAogICAgZnVuY3Rpb24gZW5kQXVjdGlvbigpIHsKICAgICAgdHJhbnNmZXIoaGlnaGVzdEJpZGRlciwgMSk7CiAgICAgIEF1Y3Rpb24uZW5kQXVjdGlvbigpOwogICAgfQp9'.
	

]
