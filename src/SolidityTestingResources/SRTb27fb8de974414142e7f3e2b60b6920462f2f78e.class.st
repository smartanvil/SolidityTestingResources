Class {
	#name : #SRTb27fb8de974414142e7f3e2b60b6920462f2f78e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb27fb8de974414142e7f3e2b60b6920462f2f78e >> base64 [
	^ ''.
	

]
