Class {
	#name : #SRT683c53084d997e6056c555f85f031f8317e26c2b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT683c53084d997e6056c555f85f031f8317e26c2b >> base64 [
	^ ''.
	

]
