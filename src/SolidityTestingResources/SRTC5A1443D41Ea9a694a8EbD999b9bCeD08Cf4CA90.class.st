Class {
	#name : #SRTC5A1443D41Ea9a694a8EbD999b9bCeD08Cf4CA90,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC5A1443D41Ea9a694a8EbD999b9bCeD08Cf4CA90 >> base64 [
	^ ''.
	

]
