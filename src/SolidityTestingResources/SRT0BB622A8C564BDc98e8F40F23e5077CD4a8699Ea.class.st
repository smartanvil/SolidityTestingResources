Class {
	#name : #SRT0BB622A8C564BDc98e8F40F23e5077CD4a8699Ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0BB622A8C564BDc98e8F40F23e5077CD4a8699Ea >> base64 [
	^ ''.
	

]
