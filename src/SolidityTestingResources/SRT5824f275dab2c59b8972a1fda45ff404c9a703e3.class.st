Class {
	#name : #SRT5824f275dab2c59b8972a1fda45ff404c9a703e3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5824f275dab2c59b8972a1fda45ff404c9a703e3 >> base64 [
	^ ''.
	

]
