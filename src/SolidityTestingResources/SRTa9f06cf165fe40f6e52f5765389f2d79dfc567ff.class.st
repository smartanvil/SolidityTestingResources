Class {
	#name : #SRTa9f06cf165fe40f6e52f5765389f2d79dfc567ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9f06cf165fe40f6e52f5765389f2d79dfc567ff >> base64 [
	^ ''.
	

]
