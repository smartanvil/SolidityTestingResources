Class {
	#name : #SRT6260f78a41168fd1edb81dd6f00c4945ac884cfc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6260f78a41168fd1edb81dd6f00c4945ac884cfc >> base64 [
	^ 'LyoqCiAqIEludmVzdG9ycyByZWxhdGlvbnM6IDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZTA5MDgxOTI5NDhlODU5MjkzYTA4MTkyODI4OTk0OTI4MTg3ODk4ZTg3Y2U4MzhmIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPgoqKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGUKICogQGRldiBDcm93ZHNhbGUgaXMgYSBiYXNlIGNvbnRyYWN0IGZvciBtYW5hZ2luZyBhIHRva2VuIGNyb3dkc2FsZS4KICogQ3Jvd2RzYWxlcyBoYXZlIGEgc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzLCB3aGVyZSBpbnZlc3RvcnMgY2FuIG1ha2UKICogdG9rZW4gcHVyY2hhc2VzIGFuZCB0aGUgY3Jvd2RzYWxlIHdpbGwgYXNzaWduIHRoZW0gdG9rZW5zIGJhc2VkCiAqIG9uIGEgdG9rZW4gcGVyIEVUSCByYXRlLiBGdW5kcyBjb2xsZWN0ZWQgYXJlIGZvcndhcmRlZCB0byBhIHdhbGxldAogKiBhcyB0aGV5IGFycml2ZS4KICovCiAKIApsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMFN0YW5kYXJkCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgdG9rZW5Pd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgdG9rZW5Pd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpOwogICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB0b2tlbnMpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHRva2Vucyk7CiAgICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIHRva2VuT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHRva2Vucyk7Cn0KCmludGVyZmFjZSBPbGRYUlBDVG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIHdhbGxldCwgYWRkcmVzcyBidXllciwgdWludDI1NiB0b2tlbkFtb3VudCkgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBzaG93TXlUb2tlbkJhbGFuY2UoYWRkcmVzcyBhZGRyKSBleHRlcm5hbDsKfQpjb250cmFjdCBBUkJJVFJBR0VUb2tlbiBpcyBFUkMyMEludGVyZmFjZSxPd25hYmxlIHsKCiAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgdG9rZW5CYWxhbmNlczsKICAgCiAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJBUkJJVFJBR0UiOwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJBUkIiOwogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxMDAwMDAwMDsKICAgIGFkZHJlc3Mgb3duZXJXYWxsZXQ7CiAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICBldmVudCBEZWJ1ZyhzdHJpbmcgbWVzc2FnZSwgYWRkcmVzcyBhZGRyLCB1aW50MjU2IG51bWJlcik7CgogICAgZnVuY3Rpb24gQVJCSVRSQUdFVG9rZW4oYWRkcmVzcyB3YWxsZXQpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG93bmVyV2FsbGV0PXdhbGxldDsKICAgICAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZICogMTAgKiogMTg7CiAgICAgICAgdG9rZW5CYWxhbmNlc1t3YWxsZXRdID0gSU5JVElBTF9TVVBQTFkgKiAxMCAqKiAxODsgICAvL1NpbmNlIHdlIGRpdmlkZWQgdGhlIHRva2VuIGludG8gMTBeMTggcGFydHMKICAgIH0KIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1ttc2cuc2VuZGVyXT49X3ZhbHVlKTsKICAgIHRva2VuQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b2tlbkJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgdG9rZW5CYWxhbmNlc1tfdG9dID0gdG9rZW5CYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIAogIAogICAgIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSB0b2tlbkJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgdG9rZW5CYWxhbmNlc1tfZnJvbV0gPSB0b2tlbkJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIHRva2VuQmFsYW5jZXNbX3RvXSA9IHRva2VuQmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIAogICAgIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgLy8gVG90YWwgc3VwcGx5CiAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgICByZXR1cm4gdG90YWxTdXBwbHkgIC0gdG9rZW5CYWxhbmNlc1thZGRyZXNzKDApXTsKICAgICB9CiAgICAgCiAgICAKICAgICAKICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgb2YgdG9rZW5zIGFwcHJvdmVkIGJ5IHRoZSBvd25lciB0aGF0IGNhbiBiZQogICAgIC8vIHRyYW5zZmVycmVkIHRvIHRoZSBzcGVuZGVyJ3MgYWNjb3VudAogICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIHRva2VuT3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICAgICAgIHJldHVybiBhbGxvd2VkW3Rva2VuT3duZXJdW3NwZW5kZXJdOwogICAgIH0KICAgICAKICAgICAvKioKICAgKiBAZGV2IEluY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX2FkZGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gaW5jcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBkZWNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3N1YnRyYWN0ZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBkZWNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogICAgIAogICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgIC8vIERvbid0IGFjY2VwdCBFVEgKICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgIHJldmVydCgpOwogICAgIH0KIAoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiB0b2tlbkJhbGFuY2VzW19vd25lcl07CiAgfQoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyB3YWxsZXQsIGFkZHJlc3MgYnV5ZXIsIHVpbnQyNTYgdG9rZW5BbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICByZXF1aXJlKHRva2VuQmFsYW5jZXNbd2FsbGV0XSA+PSB0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICB0b2tlbkJhbGFuY2VzW2J1eWVyXSA9IHRva2VuQmFsYW5jZXNbYnV5ZXJdLmFkZCh0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICB0b2tlbkJhbGFuY2VzW3dhbGxldF0gPSB0b2tlbkJhbGFuY2VzW3dhbGxldF0uc3ViKHRva2VuQW1vdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICBUcmFuc2Zlcih3YWxsZXQsIGJ1eWVyLCB0b2tlbkFtb3VudCk7IAogICAgICB0b3RhbFN1cHBseT10b3RhbFN1cHBseS5zdWIodG9rZW5BbW91bnQpOwogICAgfQogICAgZnVuY3Rpb24gcHVsbEJhY2soYWRkcmVzcyB3YWxsZXQsIGFkZHJlc3MgYnV5ZXIsIHVpbnQyNTYgdG9rZW5BbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1tidXllcl0+PXRva2VuQW1vdW50KTsKICAgICAgICB0b2tlbkJhbGFuY2VzW2J1eWVyXSA9IHRva2VuQmFsYW5jZXNbYnV5ZXJdLnN1Yih0b2tlbkFtb3VudCk7CiAgICAgICAgdG9rZW5CYWxhbmNlc1t3YWxsZXRdID0gdG9rZW5CYWxhbmNlc1t3YWxsZXRdLmFkZCh0b2tlbkFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIoYnV5ZXIsIHdhbGxldCwgdG9rZW5BbW91bnQpOwogICAgICAgIHRvdGFsU3VwcGx5PXRvdGFsU3VwcGx5LmFkZCh0b2tlbkFtb3VudCk7CiAgICAgfQogICAgZnVuY3Rpb24gc2hvd015VG9rZW5CYWxhbmNlKGFkZHJlc3MgYWRkcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCB0b2tlbkJhbGFuY2UpIHsKICAgICAgICB0b2tlbkJhbGFuY2UgPSB0b2tlbkJhbGFuY2VzW2FkZHJdOwogICAgfQp9CmNvbnRyYWN0IEFSQklUUkFHRUNyb3dkc2FsZSB7CiAgICAKICAgIHN0cnVjdCBTdGFrZWhvbGRlcgogICAgewogICAgICAgIGFkZHJlc3Mgc3Rha2Vob2xkZXJBZGRyZXNzOwogICAgICAgIHVpbnQgc3Rha2Vob2xkZXJQZXJjOwogICAgfQogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBBUkJJVFJBR0VUb2tlbiBwdWJsaWMgdG9rZW47CiAgT2xkWFJQQ1Rva2VuIHB1YmxpYyBwcmV2WFJQQ1Rva2VuOwogIAogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogIFN0YWtlaG9sZGVyW10gb3duZXJzTGlzdDsKICAKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAvLyBhZGRyZXNzIHdoZXJlIHRva2VucyBhcmUgZGVwb3NpdGVkIGFuZCBmcm9tIHdoZXJlIHdlIHNlbmQgdG9rZW5zIHRvIGJ1eWVycwogIGFkZHJlc3MgcHVibGljIHdhbGxldE93bmVyOwogIFN0YWtlaG9sZGVyIHN0YWtlaG9sZGVyT2JqOwogIAoKICB1aW50MjU2IHB1YmxpYyBjb2luUGVyY2VudGFnZSA9IDU7CgogICAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHJhdGVQZXJXZWkgPSAxNjU3OwogICAgdWludDI1NiBwdWJsaWMgbWF4QnV5TGltaXQ9MjAwMDsKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGRJblRoaXNSb3VuZD0wOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxUb2tlbnNTb2xkID0gMDsKCiAgICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogICAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKCiAgICBib29sIHB1YmxpYyBpc0Nyb3dkc2FsZVBhdXNlZCA9IGZhbHNlOwogICAgYWRkcmVzcyBwYXJ0bmVySGFuZGxlcjsKICAKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCgogIGZ1bmN0aW9uIEFSQklUUkFHRUNyb3dkc2FsZShhZGRyZXNzIF93YWxsZXRPd25lciwgYWRkcmVzcyBfcGFydG5lckhhbmRsZXIpIHB1YmxpYyB7CiAgICAgIAogICAgICAgIHByZXZYUlBDVG9rZW4gPSBPbGRYUlBDVG9rZW4oMHhBZGI0MUZDRDNERjlGRjY4MTY4MDIwM0EwNzQyNzFEM2IzRGFlNTI2KTsgCiAgICAgICAgCiAgICAgICAgc3RhcnRUaW1lID0gbm93OwogICAgICAgIAogICAgICAgIHJlcXVpcmUoX3dhbGxldE93bmVyICE9IDB4MCk7CiAgICAgICAgd2FsbGV0T3duZXI9X3dhbGxldE93bmVyOwoKICAgICAgICAgc3Rha2Vob2xkZXJPYmogPSBTdGFrZWhvbGRlcih7CiAgICAgICAgIHN0YWtlaG9sZGVyQWRkcmVzczogd2FsbGV0T3duZXIsCiAgICAgICAgIHN0YWtlaG9sZGVyUGVyYyA6IDEwMH0pOwogICAgICAgICAKICAgICAgICAgb3duZXJzTGlzdC5wdXNoKHN0YWtlaG9sZGVyT2JqKTsKICAgICAgICBwYXJ0bmVySGFuZGxlciA9IF9wYXJ0bmVySGFuZGxlcjsKICAgICAgICB0b2tlbiA9IGNyZWF0ZVRva2VuQ29udHJhY3QoX3dhbGxldE93bmVyKTsKICB9CgogIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdChhZGRyZXNzIHdhbGwpIGludGVybmFsIHJldHVybnMgKEFSQklUUkFHRVRva2VuKSB7CiAgICByZXR1cm4gbmV3IEFSQklUUkFHRVRva2VuKHdhbGwpOwogIH0KCgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAKICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUgKGlzQ3Jvd2RzYWxlUGF1c2VkICE9IHRydWUpOwogICAgICAgIAogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZVBlcldlaSk7CiAgICByZXF1aXJlKHRva2Vuc1NvbGRJblRoaXNSb3VuZC5hZGQodG9rZW5zKTw9bWF4QnV5TGltaXQpOwogICAgLy8gdXBkYXRlIHN0YXRlCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgdG9rZW4ubWludCh3YWxsZXRPd25lciwgYmVuZWZpY2lhcnksIHRva2Vucyk7IAogICAgdG9rZW5zU29sZEluVGhpc1JvdW5kPXRva2Vuc1NvbGRJblRoaXNSb3VuZCt0b2tlbnM7CiAgICBUb2tlblB1cmNoYXNlKHdhbGxldE93bmVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwogICAgdG90YWxUb2tlbnNTb2xkID0gdG90YWxUb2tlbnNTb2xkLmFkZCh0b2tlbnMpOwogICAgdWludCBwYXJ0bmVyQ29pbnMgPSB0b2tlbnMubXVsKGNvaW5QZXJjZW50YWdlKTsKICAgIHBhcnRuZXJDb2lucyA9IHBhcnRuZXJDb2lucy5kaXYoMTAwKTsKICAgIGZvcndhcmRGdW5kcyhwYXJ0bmVyQ29pbnMpOwogIH0KCiAgIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQocykKICAgIGZ1bmN0aW9uIGZvcndhcmRGdW5kcyh1aW50MjU2IHBhcnRuZXJUb2tlbkFtb3VudCkgaW50ZXJuYWwgewogICAgICBmb3IgKHVpbnQgaT0wO2k8b3duZXJzTGlzdC5sZW5ndGg7aSsrKQogICAgICB7CiAgICAgICAgIHVpbnQgcGVyY2VudCA9IG93bmVyc0xpc3RbaV0uc3Rha2Vob2xkZXJQZXJjOwogICAgICAgICB1aW50IGFtb3VudFRvQmVTZW50ID0gbXNnLnZhbHVlLm11bChwZXJjZW50KTsKICAgICAgICAgYW1vdW50VG9CZVNlbnQgPSBhbW91bnRUb0JlU2VudC5kaXYoMTAwKTsKICAgICAgICAgb3duZXJzTGlzdFtpXS5zdGFrZWhvbGRlckFkZHJlc3MudHJhbnNmZXIoYW1vdW50VG9CZVNlbnQpOwogICAgICAgICAKICAgICAgICAgaWYgKG93bmVyc0xpc3RbaV0uc3Rha2Vob2xkZXJBZGRyZXNzIT13YWxsZXRPd25lciAmJiAgb3duZXJzTGlzdFtpXS5zdGFrZWhvbGRlclBlcmM+MCkKICAgICAgICAgewogICAgICAgICAgICAgdG9rZW4ubWludCh3YWxsZXRPd25lcixvd25lcnNMaXN0W2ldLnN0YWtlaG9sZGVyQWRkcmVzcyxwYXJ0bmVyVG9rZW5BbW91bnQpOwogICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gdXBkYXRlT3duZXJTaGFyZXMoYWRkcmVzc1tdIHBhcnRuZXJzQWRkcmVzc2VzLCB1aW50W10gcGFydG5lcnNQZXJjZW50YWdlcykgcHVibGljewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09cGFydG5lckhhbmRsZXIpOwogICAgICAgIHJlcXVpcmUocGFydG5lcnNBZGRyZXNzZXMubGVuZ3RoPT1wYXJ0bmVyc1BlcmNlbnRhZ2VzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgdWludCBzdW1QZXJjPTA7CiAgICAgICAgZm9yKHVpbnQgaT0wOyBpPHBhcnRuZXJzUGVyY2VudGFnZXMubGVuZ3RoO2krKykKICAgICAgICB7CiAgICAgICAgICAgIHN1bVBlcmMrPXBhcnRuZXJzUGVyY2VudGFnZXNbaV07CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUoc3VtUGVyYz09MTAwKTsKICAgICAgICAKICAgICAgICBkZWxldGUgb3duZXJzTGlzdDsKICAgICAgICAKICAgICAgICBmb3IodWludCBqPTA7IGo8cGFydG5lcnNBZGRyZXNzZXMubGVuZ3RoO2orKykKICAgICAgICB7CiAgICAgICAgICAgIGRlbGV0ZSBzdGFrZWhvbGRlck9iajsKICAgICAgICAgICAgIHN0YWtlaG9sZGVyT2JqID0gU3Rha2Vob2xkZXIoewogICAgICAgICAgICAgc3Rha2Vob2xkZXJBZGRyZXNzOiBwYXJ0bmVyc0FkZHJlc3Nlc1tqXSwKICAgICAgICAgICAgIHN0YWtlaG9sZGVyUGVyYyA6IHBhcnRuZXJzUGVyY2VudGFnZXNbal19KTsKICAgICAgICAgICAgIG93bmVyc0xpc3QucHVzaChzdGFrZWhvbGRlck9iaik7CiAgICAgICAgfQogICAgfQoKCiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIG5vblplcm9QdXJjaGFzZTsKICB9CgogIAogICBmdW5jdGlvbiBzaG93TXlUb2tlbkJhbGFuY2UoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRva2VuQmFsYW5jZSkgewogICAgICAgIHRva2VuQmFsYW5jZSA9IHRva2VuLnNob3dNeVRva2VuQmFsYW5jZShtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBUaGUgZnVuY3Rpb24gdG8gcHVsbCBiYWNrIHRva2VucyBmcm9tIGEgIG5vdG9yaW91cyB1c2VyCiAgICAgKiBDYW4gb25seSBiZSBjYWxsZWQgZnJvbSBvd25lciB3YWxsZXQKICAgICAqKi8KICAgIGZ1bmN0aW9uIHB1bGxCYWNrKGFkZHJlc3MgYnV5ZXIpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgdWludCBiYWwgPSB0b2tlbi5iYWxhbmNlT2YoYnV5ZXIpOwogICAgICAgIHRva2VuLnB1bGxCYWNrKHdhbGxldE93bmVyLGJ1eWVyLGJhbCk7CiAgICB9CiAgICAKCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIHNldCB0aGUgbmV3IHByaWNlIAogICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gb3duZXIgd2FsbGV0CiAgICAgKiovIAogICAgZnVuY3Rpb24gc2V0UHJpY2VSYXRlKHVpbnQyNTYgbmV3UHJpY2UpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgcmF0ZVBlcldlaSA9IG5ld1ByaWNlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIHNldCB0aGUgbWF4IGJ1eSBsaW1pdCBpbiAxIHRyYW5zYWN0aW9uIAogICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gb3duZXIgd2FsbGV0CiAgICAgKiovIAogICAgCiAgICAgIGZ1bmN0aW9uIHNldE1heEJ1eUxpbWl0KHVpbnQyNTYgbWF4bGltaXQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgbWF4QnV5TGltaXQgPSBtYXhsaW1pdCAqMTAgKiogMTg7CiAgICB9CiAgICAKICAgICAgLyoqCiAgICAgKiBmdW5jdGlvbiB0byBzdGFydCBuZXcgSUNPIHJvdW5kIAogICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gb3duZXIgd2FsbGV0CiAgICAgKiovIAogICAgCiAgICAgIGZ1bmN0aW9uIHN0YXJ0TmV3SUNPUm91bmQodWludDI1NiBtYXhsaW1pdCwgdWludDI1NiBuZXdQcmljZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PXdhbGxldE93bmVyKTsKICAgICAgICBzZXRNYXhCdXlMaW1pdChtYXhsaW1pdCk7CiAgICAgICAgc2V0UHJpY2VSYXRlKG5ld1ByaWNlKTsKICAgICAgICB0b2tlbnNTb2xkSW5UaGlzUm91bmQ9MDsKICAgIH0KICAgIAogICAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIGdldCB0aGlzIHJvdW5kIGluZm9ybWF0aW9uIAogICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gb3duZXIgd2FsbGV0CiAgICAgKiovIAogICAgCiAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRJQ09Sb3VuZEluZm8oKSBwdWJsaWMgdmlldyByZXR1cm5zIAogICAgICAodWludDI1NiBtYXhsaW1pdCwgdWludDI1NiBuZXdQcmljZSwgdWludCB0b2tlbnNTb2xkKSB7CiAgICAgICByZXR1cm4obWF4QnV5TGltaXQscmF0ZVBlcldlaSx0b2tlbnNTb2xkSW5UaGlzUm91bmQpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIHBhdXNlIHRoZSBjcm93ZHNhbGUgCiAgICAgKiBjYW4gb25seSBiZSBjYWxsZWQgZnJvbSBvd25lciB3YWxsZXQKICAgICAqKi8KICAgICAKICAgIGZ1bmN0aW9uIHBhdXNlQ3Jvd2RzYWxlKCkgcHVibGljIHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09d2FsbGV0T3duZXIpOwogICAgICAgIGlzQ3Jvd2RzYWxlUGF1c2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIHJlc3VtZSB0aGUgY3Jvd2RzYWxlIGlmIGl0IGlzIHBhdXNlZAogICAgICogY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gb3duZXIgd2FsbGV0CiAgICAgKiBpZiB0aGUgY3Jvd2RzYWxlIGhhcyBiZWVuIHN0b3BwZWQsIHRoaXMgZnVuY3Rpb24gd291bGQgbm90IHJlc3VtZSBpdAogICAgICoqLyAKICAgIGZ1bmN0aW9uIHJlc3VtZUNyb3dkc2FsZSgpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgaXNDcm93ZHNhbGVQYXVzZWQgPSBmYWxzZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBTaG93cyB0aGUgcmVtYWluaW5nIHRva2VucyBpbiB0aGUgY29udHJhY3QgaS5lLiB0b2tlbnMgcmVtYWluaW5nIGZvciBzYWxlCiAgICAgKiovIAogICAgZnVuY3Rpb24gdG9rZW5zUmVtYWluaW5nRm9yU2FsZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2Yod2FsbGV0T3duZXIpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIHNob3cgdGhlIGVxdWl0eSBwZXJjZW50YWdlIG9mIGFuIG93bmVyIC0gbWFqb3Igb3IgbWlub3IKICAgICAqIGNhbiBvbmx5IGJlIGNhbGxlZCBmcm9tIHRoZSBvd25lciB3YWxsZXQKICAgICAqKi8KICAgIGZ1bmN0aW9uIGNoZWNrT3duZXJTaGFyZSAoYWRkcmVzcyBvd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc2hhcmUpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PXdhbGxldE93bmVyKTsKICAgICAgICAKICAgICAgICBmb3IodWludCBpPTA7aTxvd25lcnNMaXN0Lmxlbmd0aDtpKyspCiAgICAgICAgewogICAgICAgICAgICBpZihvd25lcnNMaXN0W2ldLnN0YWtlaG9sZGVyQWRkcmVzcz09b3duZXIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBvd25lcnNMaXN0W2ldLnN0YWtlaG9sZGVyUGVyYzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgY29pbiBwZXJjZW50YWdlIGF3YXJkZWQgdG8gdGhlIHBhcnRuZXJzCiAgICAgKiBjYW4gb25seSBiZSBjYWxsZWQgZnJvbSB0aGUgb3duZXIgd2FsbGV0CiAgICAgKiovCiAgICBmdW5jdGlvbiBjaGFuZ2VQYXJ0bmVyQ29pblBlcmNlbnRhZ2UodWludCBwZXJjZW50YWdlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09d2FsbGV0T3duZXIpOwogICAgICAgIGNvaW5QZXJjZW50YWdlID0gcGVyY2VudGFnZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBhaXJkcm9wIHRvIG9sZCB0b2tlbiBob2xkZXJzCiAgICAgKiovIAogICAgZnVuY3Rpb24gYWlyRHJvcFRvT2xkVG9rZW5Ib2xkZXJzKGFkZHJlc3NbXSBvbGRUb2tlbkhvbGRlcnMpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGk8b2xkVG9rZW5Ib2xkZXJzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYocHJldlhSUENUb2tlbi5iYWxhbmNlT2Yob2xkVG9rZW5Ib2xkZXJzW2ldKT4wKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbi5taW50KHdhbGxldE93bmVyLG9sZFRva2VuSG9sZGVyc1tpXSxwcmV2WFJQQ1Rva2VuLmJhbGFuY2VPZihvbGRUb2tlbkhvbGRlcnNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlV2FsbGV0T3duZXIoYWRkcmVzcyBuZXdXYWxsZXQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT13YWxsZXRPd25lcik7CiAgICAgICAgd2FsbGV0T3duZXIgPSBuZXdXYWxsZXQ7CiAgICB9Cn0='.
	

]
