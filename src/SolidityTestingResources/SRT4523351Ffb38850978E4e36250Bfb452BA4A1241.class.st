Class {
	#name : #SRT4523351Ffb38850978E4e36250Bfb452BA4A1241,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4523351Ffb38850978E4e36250Bfb452BA4A1241 >> base64 [
	^ ''.
	

]
