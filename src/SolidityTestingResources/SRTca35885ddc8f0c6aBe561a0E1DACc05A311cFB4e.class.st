Class {
	#name : #SRTca35885ddc8f0c6aBe561a0E1DACc05A311cFB4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca35885ddc8f0c6aBe561a0E1DACc05A311cFB4e >> base64 [
	^ ''.
	

]
