Class {
	#name : #SRT04129cff7d79a652256c73b1407f34828e79a4de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT04129cff7d79a652256c73b1407f34828e79a4de >> base64 [
	^ ''.
	

]
