Class {
	#name : #SRT15857a97A82881d79de179865be5292949BD1616,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15857a97A82881d79de179865be5292949BD1616 >> base64 [
	^ ''.
	

]
