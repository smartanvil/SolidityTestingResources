Class {
	#name : #SRT7acbc0b5c51027dc659a19f257bb3e462309b626,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7acbc0b5c51027dc659a19f257bb3e462309b626 >> base64 [
	^ ''.
	

]
