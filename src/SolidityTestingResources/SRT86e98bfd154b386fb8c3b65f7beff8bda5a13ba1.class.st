Class {
	#name : #SRT86e98bfd154b386fb8c3b65f7beff8bda5a13ba1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86e98bfd154b386fb8c3b65f7beff8bda5a13ba1 >> base64 [
	^ ''.
	

]
