Class {
	#name : #SRT662abcad0b7f345ab7ffb1b1fbb9df7894f18e66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT662abcad0b7f345ab7ffb1b1fbb9df7894f18e66 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgdWludCBjb25zdGFudCBEQVlfSU5fU0VDT05EUyA9IDg2NDAwOwogICAgdWludCBjb25zdGFudCBCQVNFID0gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQgY29uc3RhbnQgcHJlSWNvUHJpY2UgPSA0MTAxOwogICAgdWludCBjb25zdGFudCBpY29QcmljZSA9IDIyNTU7CgogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiAhPSAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbXVsQnlGcmFjdGlvbih1aW50MjU2IG51bWJlciwgdWludDI1NiBudW1lcmF0b3IsIHVpbnQyNTYgZGVub21pbmF0b3IpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gZGl2KG11bChudW1iZXIsIG51bWVyYXRvciksIGRlbm9taW5hdG9yKTsKICAgIH0KCiAgICAvLyBwcmVzYWxlIHZvbHVtZSBib251cyBjYWxjdWxhdGlvbiAKICAgIGZ1bmN0aW9uIHByZXNhbGVWb2x1bWVCb251cyh1aW50MjU2IHByaWNlKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CgogICAgICAgIC8vIHByZUNUWCA+IEVUSAogICAgICAgIHVpbnQyNTYgdmFsID0gZGl2KHByaWNlLCBwcmVJY29QcmljZSk7CgogICAgICAgIGlmKHZhbCA+PSAxMDAgKiBCQVNFKSByZXR1cm4gYWRkKHByaWNlLCBwcmljZSAqIDEvMjApOyAvLyA1JQogICAgICAgIGlmKHZhbCA+PSA1MCAqIEJBU0UpIHJldHVybiBhZGQocHJpY2UsIHByaWNlICogMy8xMDApOyAvLyAzJQogICAgICAgIGlmKHZhbCA+PSAyMCAqIEJBU0UpIHJldHVybiBhZGQocHJpY2UsIHByaWNlICogMS81MCk7ICAvLyAyJQoKICAgICAgICByZXR1cm4gcHJpY2U7CiAgICB9CgoJLy8gSUNPIHZvbHVtZSBib251cyBjYWxjdWxhdGlvbiAKICAgIGZ1bmN0aW9uIHZvbHVtZUJvbnVzKHVpbnQyNTYgZXRoZXJWYWx1ZSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewoJCQogICAgICAgIGlmKGV0aGVyVmFsdWUgPj0gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMCkgcmV0dXJuIDE1Oy8vICsxNSUgdG9rZW5zCiAgICAgICAgaWYoZXRoZXJWYWx1ZSA+PSAgNTAwMDAwMDAwMDAwMDAwMDAwMDAwKSByZXR1cm4gMTA7IC8vICsxMCUgdG9rZW5zCiAgICAgICAgaWYoZXRoZXJWYWx1ZSA+PSAgMzAwMDAwMDAwMDAwMDAwMDAwMDAwKSByZXR1cm4gNzsgIC8vICs3JSB0b2tlbnMKICAgICAgICBpZihldGhlclZhbHVlID49ICAxMDAwMDAwMDAwMDAwMDAwMDAwMDApIHJldHVybiA1OyAgLy8gKzUlIHRva2VucwogICAgICAgIGlmKGV0aGVyVmFsdWUgPj0gICA1MDAwMDAwMDAwMDAwMDAwMDAwMCkgcmV0dXJuIDM7ICAgLy8gKzMlIHRva2VucwogICAgICAgIGlmKGV0aGVyVmFsdWUgPj0gICAyMDAwMDAwMDAwMDAwMDAwMDAwMCkgcmV0dXJuIDI7ICAgLy8gKzIlIHRva2VucwoKICAgICAgICByZXR1cm4gMDsKICAgIH0KCgkvLyBJQ08gZGF0ZSBib251cyBjYWxjdWxhdGlvbiAKICAgIGZ1bmN0aW9uIGRhdGVCb251cyh1aW50IHN0YXJ0SWNvKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CgogICAgICAgIC8vIGRheSBmcm9tIElDTyBzdGFydAogICAgICAgIHVpbnQgZGF5c0Zyb21TdGFydCA9IChub3cgLSBzdGFydEljbykgLyBEQVlfSU5fU0VDT05EUyArIDE7CgogICAgICAgIGlmKGRheXNGcm9tU3RhcnQgPT0gMSkgcmV0dXJuIDE1OyAvLyArMTUlIHRva2VucwogICAgICAgIGlmKGRheXNGcm9tU3RhcnQgPT0gMikgcmV0dXJuIDEwOyAvLyArMTAlIHRva2VucwogICAgICAgIGlmKGRheXNGcm9tU3RhcnQgPT0gMykgcmV0dXJuIDEwOyAvLyArMTAlIHRva2VucwogICAgICAgIGlmKGRheXNGcm9tU3RhcnQgPT0gNCkgcmV0dXJuIDU7ICAvLyArNSUgdG9rZW5zCiAgICAgICAgaWYoZGF5c0Zyb21TdGFydCA9PSA1KSByZXR1cm4gNTsgIC8vICs1JSB0b2tlbnMKICAgICAgICBpZihkYXlzRnJvbVN0YXJ0ID09IDYpIHJldHVybiA1OyAgLy8gKzUlIHRva2VucwoKCQkvLyBubyBkaXNjb3VudAogICAgICAgIHJldHVybiAwOwogICAgfQoKfQoKCi8vLyBJbXBsZW1lbnRzIEVSQyAyMCBUb2tlbiBzdGFuZGFyZDogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi8vLyBAdGl0bGUgQWJzdHJhY3QgdG9rZW4gY29udHJhY3QgLSBGdW5jdGlvbnMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgdG9rZW4gY29udHJhY3RzLgoKY29udHJhY3QgQWJzdHJhY3RUb2tlbiB7CiAgICAvLyBUaGlzIGlzIG5vdCBhbiBhYnN0cmFjdCBmdW5jdGlvbiwgYmVjYXVzZSBzb2xjIHdvbid0IHJlY29nbml6ZSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgcHVibGljIHZhcmlhYmxlcyBhcyBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgSXNzdWFuY2UoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBBYnN0cmFjdFRva2VuIHsKICAgIC8qCiAgICAgKiAgRGF0YSBzdHJ1Y3R1cmVzCiAgICAgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIG93bmVyQXBwZW5kZWQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJzOwoKICAgIC8qCiAgICAgKiAgUmVhZCBhbmQgd3JpdGUgc3RvcmFnZSBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHNlbmRlcidzIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGlmKCFvd25lckFwcGVuZGVkW190b10pIHsKICAgICAgICAgICAgICAgIG93bmVyQXBwZW5kZWRbX3RvXSA9IHRydWU7CiAgICAgICAgICAgICAgICBvd25lcnMucHVzaChfdG8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbGxvd2VkIHRoaXJkIHBhcnR5IHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX2Zyb20gQWRkcmVzcyBmcm9tIHdoZXJlIHRva2VucyBhcmUgd2l0aGRyYXduLgogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIHNlbnQuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGlmKCFvd25lckFwcGVuZGVkW190b10pIHsKICAgICAgICAgICAgICAgIG93bmVyQXBwZW5kZWRbX3RvXSA9IHRydWU7CiAgICAgICAgICAgICAgICBvd25lcnMucHVzaChfdG8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8vLyBAZGV2IFNldHMgYXBwcm92ZWQgYW1vdW50IG9mIHRva2VucyBmb3Igc3BlbmRlci4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIGFsbG93ZWQgYWNjb3VudC4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiBhcHByb3ZlZCB0b2tlbnMuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKgogICAgICogUmVhZCBzdG9yYWdlIGZ1bmN0aW9ucwogICAgICovCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiBhbGxvd2VkIHRva2VucyBmb3IgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgdG9rZW4gc3BlbmRlci4KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCn0KCgpjb250cmFjdCBDYXJUYXhpVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgU2FmZU1hdGggewogICAgLyoKICAgICAqIFRva2VuIG1ldGEgZGF0YQogICAgICovCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQ2FyVGF4aSI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJDVFgiOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICAvLyB0b3R0YWwgc3VwcGx5CgogICAgYWRkcmVzcyBwdWJsaWMgaWNvQ29udHJhY3QgPSAweDA7CiAgICAvKgogICAgICogTW9kaWZpZXJzCiAgICAgKi8KCiAgICBtb2RpZmllciBvbmx5SWNvQ29udHJhY3QoKSB7CiAgICAgICAgLy8gb25seSBJQ08gY29udHJhY3QgaXMgYWxsb3dlZCB0byBwcm9jZWVkCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGljb0NvbnRyYWN0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8qCiAgICAgKiBDb250cmFjdCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGlzIG5lZWRlZCBpbiBpY29Db250cmFjdCBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIF9pY29Db250cmFjdCBBZGRyZXNzIG9mIGFjY291bnQgd2hpY2ggd2lsbCBiZSBtaW50IHRva2VucwogICAgZnVuY3Rpb24gQ2FyVGF4aVRva2VuKGFkZHJlc3MgX2ljb0NvbnRyYWN0KSB7CiAgICAgICAgYXNzZXJ0KF9pY29Db250cmFjdCAhPSAweDApOwogICAgICAgIGljb0NvbnRyYWN0ID0gX2ljb0NvbnRyYWN0OwogICAgfQoKICAgIC8vLyBAZGV2IEJ1cm5zIHRva2VucyBmcm9tIGFkZHJlc3MuIEl0J3MgY2FuIGJlIGFwcGxpZWQgYnkgYWNjb3VudCB3aXRoIGFkZHJlc3MgdGhpcy5pY29Db250cmFjdAogICAgLy8vIEBwYXJhbSBfZnJvbSBBZGRyZXNzIG9mIGFjY291bnQsIGZyb20gd2hpY2ggd2lsbCBiZSBidXJuZWQgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zLCB0aGF0IHdpbGwgYmUgYnVybmVkCiAgICBmdW5jdGlvbiBidXJuVG9rZW5zKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlKSBvbmx5SWNvQ29udHJhY3QgewogICAgICAgIGFzc2VydChfZnJvbSAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CgogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQWRkcyB0b2tlbnMgdG8gYWRkcmVzcy4gSXQncyBjYW4gYmUgYXBwbGllZCBieSBhY2NvdW50IHdpdGggYWRkcmVzcyB0aGlzLmljb0NvbnRyYWN0CiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIGFjY291bnQgdG8gd2hpY2ggdGhlIHRva2VucyB3aWxsIHBhc3MKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIGVtaXRUb2tlbnMoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5SWNvQ29udHJhY3QgewogICAgICAgIGFzc2VydChfdG8gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwoKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CgogICAgICAgIGlmKCFvd25lckFwcGVuZGVkW190b10pIHsKICAgICAgICAgICAgb3duZXJBcHBlbmRlZFtfdG9dID0gdHJ1ZTsKICAgICAgICAgICAgb3duZXJzLnB1c2goX3RvKTsKICAgICAgICB9CgogICAgfQoKICAgIGZ1bmN0aW9uIGdldE93bmVyKHVpbnQgaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MsIHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gKG93bmVyc1tpbmRleF0sIGJhbGFuY2VzW293bmVyc1tpbmRleF1dKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRPd25lckNvdW50KCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBvd25lcnMubGVuZ3RoOwogICAgfQoKfQ=='.
	

]
