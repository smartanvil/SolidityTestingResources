Class {
	#name : #SRT41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3 >> base64 [
	^ ''.
	

]
