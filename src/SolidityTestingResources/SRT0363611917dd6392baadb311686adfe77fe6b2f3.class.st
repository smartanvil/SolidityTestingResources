Class {
	#name : #SRT0363611917dd6392baadb311686adfe77fe6b2f3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0363611917dd6392baadb311686adfe77fe6b2f3 >> base64 [
	^ ''.
	

]
