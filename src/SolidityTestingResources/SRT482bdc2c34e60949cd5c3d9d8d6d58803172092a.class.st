Class {
	#name : #SRT482bdc2c34e60949cd5c3d9d8d6d58803172092a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT482bdc2c34e60949cd5c3d9d8d6d58803172092a >> base64 [
	^ ''.
	

]
