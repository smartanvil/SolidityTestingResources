Class {
	#name : #SRT6203188c0dd1a4607614dbc8af409e91ed46def0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6203188c0dd1a4607614dbc8af409e91ed46def0 >> base64 [
	^ ''.
	

]
