Class {
	#name : #SRT91d5e2dfd91db593a953dbd70c540705bb9d9db0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT91d5e2dfd91db593a953dbd70c540705bb9d9db0 >> base64 [
	^ ''.
	

]
