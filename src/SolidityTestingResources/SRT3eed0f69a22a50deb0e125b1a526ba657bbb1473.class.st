Class {
	#name : #SRT3eed0f69a22a50deb0e125b1a526ba657bbb1473,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3eed0f69a22a50deb0e125b1a526ba657bbb1473 >> base64 [
	^ ''.
	

]
