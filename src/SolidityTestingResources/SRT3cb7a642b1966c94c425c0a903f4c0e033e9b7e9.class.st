Class {
	#name : #SRT3cb7a642b1966c94c425c0a903f4c0e033e9b7e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3cb7a642b1966c94c425c0a903f4c0e033e9b7e9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAgIC8qKgogICAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICAgKiBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgoKY29udHJhY3QgVGVtcHVzVG9rZW4gewoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludDI1NiBhbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKfQoKY29udHJhY3QgVGVtcHVzUHJlSWNvIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZSA9IDE1MTIxMTg4MDA7IC8vMSBEZWNlbWJlciAyMDE3IDA5OjAwOjAwIEdNVAogICAgdWludCBwdWJsaWMgZW5kVGltZSA9IDE1MTc1NjIwMDA7IC8vMiBGZWJydWFyeSAyMDE4IDA5OjAwOjAwIEdNVAoKICAgIC8vdG9rZW4gcHJpY2UKICAgIHVpbnQgcHVibGljIHByaWNlID0gMC4wMDUgZXRoZXIgLyAxMDAwOwoKICAgIC8vbWF4IHRva2VucyBjb3VsZCBiZSBzb2xkIGR1cmluZyBwcmVpY28KICAgIHVpbnQgcHVibGljIGhhcmRDYXAgPSA4NjAwMDAwMDA7CiAgICB1aW50IHB1YmxpYyB0b2tlbnNTb2xkID0gMDsKCiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICBhZGRyZXNzIHdpdGhkcmF3QWRkcmVzczE7CiAgICBhZGRyZXNzIHdpdGhkcmF3QWRkcmVzczI7CgogICAgVGVtcHVzVG9rZW4gdG9rZW47CgogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBzZWxsZXJzOwoKICAgIG1vZGlmaWVyIG9ubHlTZWxsZXJzKCkgewogICAgICAgIHJlcXVpcmUoc2VsbGVyc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBUZW1wdXNQcmVJY28gKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCBhZGRyZXNzIF93aXRoZHJhd0FkZHJlc3MxLAogICAgYWRkcmVzcyBfd2l0aGRyYXdBZGRyZXNzMikgcHVibGljIHsKICAgICAgICB0b2tlbiA9IFRlbXB1c1Rva2VuKHRva2VuQWRkcmVzcyk7CiAgICAgICAgd2l0aGRyYXdBZGRyZXNzMSA9IF93aXRoZHJhd0FkZHJlc3MxOwogICAgICAgIHdpdGhkcmF3QWRkcmVzczIgPSBfd2l0aGRyYXdBZGRyZXNzMjsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHByZSBpY28gaXMgYWN0aXZlIG9yIG5vdAogICAgKi8KICAgIGZ1bmN0aW9uIGlzQWN0aXZlKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBhY3RpdmUpIHsKICAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICAgICAgYm9vbCBjYXBJc05vdE1ldCA9IHRva2Vuc1NvbGQgPCBoYXJkQ2FwOwogICAgICAgIHJldHVybiBjYXBJc05vdE1ldCAmJiB3aXRoaW5QZXJpb2QgJiYgIXBhdXNlZDsKICAgIH0KCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGJ1eUZvcihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBMb3ctbGV2ZWwgcHVyY2hhc2UgZnVuY3Rpb24uIFB1cmNoYXNlcyB0b2tlbnMgZm9yIHNwZWNpZmllZCBhZGRyZXNzCiAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSBBZGRyZXNzIHRoYXQgd2lsbCBnZXQgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gYnV5Rm9yKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSAhPSAwKTsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IHRva2VuQW1vdW50ID0gYW1vdW50LmRpdihwcmljZSk7CiAgICAgICAgbWFrZVB1cmNoYXNlKGJlbmVmaWNpYXJ5LCB0b2tlbkFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgYnkgb3VyIHJvYm90IHRvIGFsbG93IHVzZXJzCiAgICAqIHRvIGJ1eSB0b25rZW5zIGZvciB2YXJpb3VzIGNyeXB0b3MuCiAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSBBbiBhZGRyZXNzIHRoYXQgd2lsbCBnZXQgdG9rZW5zCiAgICAqIEBwYXJhbSBhbW91bnQgQW1vdW50IG9mIHRva2VucyB0aGF0IGFkZHJlc3Mgd2lsbCBnZXQKICAgICovCiAgICBmdW5jdGlvbiBleHRlcm5hbFB1cmNoYXNlKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQgYW1vdW50KSBleHRlcm5hbCBvbmx5U2VsbGVycyB7CiAgICAgICAgbWFrZVB1cmNoYXNlKGJlbmVmaWNpYXJ5LCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VQdXJjaGFzZShhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IGFtb3VudCkgcHJpdmF0ZSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgICAgIHJlcXVpcmUoaXNBY3RpdmUoKSk7CiAgICAgICAgdWludCBtaW5pbXVtVG9rZW5zID0gMjAwMDA7CiAgICAgICAgaWYodG9rZW5zU29sZCA8IGhhcmRDYXAuc3ViKG1pbmltdW1Ub2tlbnMpKSB7CiAgICAgICAgICAgIHJlcXVpcmUoYW1vdW50ID49IG1pbmltdW1Ub2tlbnMpOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKGFtb3VudC5hZGQodG9rZW5zU29sZCkgPD0gaGFyZENhcCk7CiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCk7CiAgICAgICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQYXVzZWQoYm9vbCBpc1BhdXNlZCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICBwYXVzZWQgPSBpc1BhdXNlZDsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBTZXRzIGFkZHJlc3Mgb2Ygc2VsbGVyIHJvYm90CiAgICAqIEBwYXJhbSBzZWxsZXIgQWRkcmVzcyBvZiBzZWxsZXIgcm9ib3QgdG8gc2V0CiAgICAqIEBwYXJhbSBpc1NlbGxlciBQYXJhbWV0ZXIgd2hldGhlciBzZXQgYXMgc2VsbGVyIG9yIG5vdAogICAgKi8KICAgIGZ1bmN0aW9uIHNldEFzU2VsbGVyKGFkZHJlc3Mgc2VsbGVyLCBib29sIGlzU2VsbGVyKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHNlbGxlcnNbc2VsbGVyXSA9IGlzU2VsbGVyOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFNldCBzdGFydCB0aW1lIG9mIFByZSBJQ08KICAgICogQHBhcmFtIF9zdGFydFRpbWUgU3RhcnQgb2YgUHJlIElDTyAodW5peCB0aW1lKQogICAgKi8KICAgIGZ1bmN0aW9uIHNldFN0YXJ0VGltZSh1aW50IF9zdGFydFRpbWUpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBTZXRzIGVuZCB0aW1lIG9mIFByZSBJQ08KICAgICogQHBhcmFtIF9lbmRUaW1lIEVuZCB0aW1lIG9mIFByZSBJQ08gKHVuaXQgdGltZSkKICAgICovCiAgICBmdW5jdGlvbiBzZXRFbmRUaW1lKHVpbnQgX2VuZFRpbWUpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGdldCBldGhlciBmcm9tIGNvbnRyYWN0CiAgICAqIEBwYXJhbSBhbW91bnQgQW1vdW50IGluIHdlaSB0byB3aXRoZHJhdwogICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIodWludCBhbW91bnQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgd2l0aGRyYXdBZGRyZXNzMS50cmFuc2ZlcihhbW91bnQgLyAyKTsKICAgICAgICB3aXRoZHJhd0FkZHJlc3MyLnRyYW5zZmVyKGFtb3VudCAvIDIpOwogICAgfQoKfQ=='.
	

]
