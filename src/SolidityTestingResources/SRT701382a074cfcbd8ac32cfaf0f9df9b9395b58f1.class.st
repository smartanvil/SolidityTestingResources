Class {
	#name : #SRT701382a074cfcbd8ac32cfaf0f9df9b9395b58f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT701382a074cfcbd8ac32cfaf0f9df9b9395b58f1 >> base64 [
	^ ''.
	

]
