Class {
	#name : #SRTcc3935479af6703a287d84daaebc18c6b2322a55,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc3935479af6703a287d84daaebc18c6b2322a55 >> base64 [
	^ ''.
	

]
