Class {
	#name : #SRTe3b7fb25d7e61ce01a43c8de9fcdd7bc6568fc5e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe3b7fb25d7e61ce01a43c8de9fcdd7bc6568fc5e >> base64 [
	^ ''.
	

]
