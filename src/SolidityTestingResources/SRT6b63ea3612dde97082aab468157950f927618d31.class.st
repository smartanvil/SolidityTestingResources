Class {
	#name : #SRT6b63ea3612dde97082aab468157950f927618d31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b63ea3612dde97082aab468157950f927618d31 >> base64 [
	^ ''.
	

]
