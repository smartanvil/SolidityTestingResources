Class {
	#name : #SRT7ceb828497922646c2b0bd23ba199d753219f64c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7ceb828497922646c2b0bd23ba199d753219f64c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgLy8gcmVxdWlyZSAoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwoKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBIb1F1VG9rZW4KICogQGRldiBIb1F1LmlvIHRva2VuIGNvbnRyYWN0LgogKi8KY29udHJhY3QgSG9RdVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFBhdXNhYmxlIHsKICAgIAogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkhPUVUgVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiSFFYIjsKICAgIHVpbnQzMiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIAogICAgLyoqCiAgICAgKiBAZGV2IEdpdmUgYWxsIHRva2VucyB0byBtc2cuc2VuZGVyLgogICAgICovCiAgICBmdW5jdGlvbiBIb1F1VG9rZW4odWludCBfdG90YWxTdXBwbHkpIHsKICAgICAgICByZXF1aXJlIChfdG90YWxTdXBwbHkgPiAwKTsKICAgICAgICB0b3RhbFN1cHBseSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdID0gX3RvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgQmFzZUNyb3dkU2FsZQogKiBAdGl0bGUgSG9RdS5pbyBiYXNlIGNyb3dkc2FsZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqLwpjb250cmFjdCBCYXNlQ3Jvd2RzYWxlIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIGFsbCBhY2NlcHRlZCBldGhlcnMgZ28gdG8gdGhpcyBhZGRyZXNzCiAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5QWRkcmVzczsKCiAgICAvLyBhbGwgcmVtYWluIHRva2VucyBhZnRlciBJQ08gc2hvdWxkIGdvIHRvIHRoYXQgYWRkcmVzcwogICAgYWRkcmVzcyBwdWJsaWMgYmFua0FkZHJlc3M7CgogICAgLy8gdG9rZW4gaW5zdGFuY2UKICAgIEhvUXVUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgdWludDI1NiBwdWJsaWMgbWF4VG9rZW5zQW1vdW50OwogICAgdWludDI1NiBwdWJsaWMgaXNzdWVkVG9rZW5zQW1vdW50ID0gMDsKICAgIHVpbnQyNTYgcHVibGljIG1pbkJ1eWFibGVBbW91bnQ7CiAgICB1aW50MjU2IHB1YmxpYyB0b2tlblJhdGU7IC8vIGFtb3VudCBvZiBIUVggcGVyIDEgRVRICiAgICAKICAgIHVpbnQyNTYgZW5kRGF0ZTsKCiAgICBib29sIHB1YmxpYyBpc0ZpbmlzaGVkID0gZmFsc2U7CgogICAgLyoqCiAgICAqIEV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICAqIEBwYXJhbSBidXllciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAgKiBAcGFyYW0gdG9rZW5zIGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICAqIEBwYXJhbSBhbW91bnQgZXRoZXJzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICAqLwogICAgZXZlbnQgVG9rZW5Cb3VnaHQoYWRkcmVzcyBpbmRleGVkIGJ1eWVyLCB1aW50MjU2IHRva2VucywgdWludDI1NiBhbW91bnQpOwoKICAgIG1vZGlmaWVyIGluUHJvZ3Jlc3MoKSB7CiAgICAgICAgcmVxdWlyZSAoIWlzRmluaXNoZWQpOwogICAgICAgIHJlcXVpcmUgKGlzc3VlZFRva2Vuc0Ftb3VudCA8IG1heFRva2Vuc0Ftb3VudCk7CiAgICAgICAgcmVxdWlyZSAobm93IDw9IGVuZERhdGUpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAcGFyYW0gX3Rva2VuQWRkcmVzcyBhZGRyZXNzIG9mIGEgSFFYIHRva2VuIGNvbnRyYWN0CiAgICAqIEBwYXJhbSBfYmFua0FkZHJlc3MgYWRkcmVzcyBmb3IgcmVtYWluIEhRWCB0b2tlbnMgYWNjdW11bGF0aW9uCiAgICAqIEBwYXJhbSBfYmVuZWZpY2lhcnlBZGRyZXNzIGFjY2VwdGVkIEVUSCBnbyB0byB0aGlzIGFkZHJlc3MKICAgICogQHBhcmFtIF90b2tlblJhdGUgcmF0ZSBIUVggcGVyIDEgRVRICiAgICAqIEBwYXJhbSBfbWluQnV5YWJsZUFtb3VudCBtaW4gRVRIIHBlciBlYWNoIGJ1eSBhY3Rpb24gKGluIEVUSCkKICAgICogQHBhcmFtIF9tYXhUb2tlbnNBbW91bnQgSUNPIEhRWCBjYXBhY2l0eSAoaW4gSFFYKQogICAgKiBAcGFyYW0gX2VuZERhdGUgdGhlIGRhdGUgd2hlbiBJQ08gd2lsbCBleHBpcmUKICAgICovCiAgICBmdW5jdGlvbiBCYXNlQ3Jvd2RzYWxlKAogICAgICAgIGFkZHJlc3MgX3Rva2VuQWRkcmVzcywKICAgICAgICBhZGRyZXNzIF9iYW5rQWRkcmVzcywKICAgICAgICBhZGRyZXNzIF9iZW5lZmljaWFyeUFkZHJlc3MsCiAgICAgICAgdWludDI1NiBfdG9rZW5SYXRlLAogICAgICAgIHVpbnQyNTYgX21pbkJ1eWFibGVBbW91bnQsCiAgICAgICAgdWludDI1NiBfbWF4VG9rZW5zQW1vdW50LAogICAgICAgIHVpbnQyNTYgX2VuZERhdGUKICAgICkgewogICAgICAgIHRva2VuID0gSG9RdVRva2VuKF90b2tlbkFkZHJlc3MpOwoKICAgICAgICBiYW5rQWRkcmVzcyA9IF9iYW5rQWRkcmVzczsKICAgICAgICBiZW5lZmljaWFyeUFkZHJlc3MgPSBfYmVuZWZpY2lhcnlBZGRyZXNzOwoKICAgICAgICB0b2tlblJhdGUgPSBfdG9rZW5SYXRlOwogICAgICAgIG1pbkJ1eWFibGVBbW91bnQgPSBfbWluQnV5YWJsZUFtb3VudC5tdWwoMSBldGhlcik7CiAgICAgICAgbWF4VG9rZW5zQW1vdW50ID0gX21heFRva2Vuc0Ftb3VudC5tdWwoMSBldGhlcik7CiAgICAKICAgICAgICBlbmREYXRlID0gX2VuZERhdGU7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU2V0IG5ldyBIb1F1IHRva2VuIGV4Y2hhbmdlIHJhdGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFRva2VuUmF0ZSh1aW50MjU2IF90b2tlblJhdGUpIG9ubHlPd25lciBpblByb2dyZXNzIHsKICAgICAgICByZXF1aXJlIChfdG9rZW5SYXRlID4gMCk7CiAgICAgICAgdG9rZW5SYXRlID0gX3Rva2VuUmF0ZTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBTZXQgbmV3IG1pbmltdW0gYnV5YWJsZSBhbW91bnQgaW4gZXRoZXJzLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRNaW5CdXlhYmxlQW1vdW50KHVpbnQyNTYgX21pbkJ1eWFibGVBbW91bnQpIG9ubHlPd25lciBpblByb2dyZXNzIHsKICAgICAgICByZXF1aXJlIChfbWluQnV5YWJsZUFtb3VudCA+IDApOwogICAgICAgIG1pbkJ1eWFibGVBbW91bnQgPSBfbWluQnV5YWJsZUFtb3VudC5tdWwoMSBldGhlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBCdXkgSFFYLiBDaGVjayBtaW5CdXlhYmxlQW1vdW50IGFuZCB0b2tlblJhdGUuCiAgICAgKiBAZGV2IFBlcmZvcm1zIGFjdHVhbCB0b2tlbiBzYWxlIHByb2Nlc3MuIFNlbmRzIGFsbCBldGhlcnMgdG8gYmVuZWZpY2lhcnkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eVRva2VucygpIHBheWFibGUgaW5Qcm9ncmVzcyB3aGVuTm90UGF1c2VkIHsKICAgICAgICByZXF1aXJlIChtc2cudmFsdWUgPj0gbWluQnV5YWJsZUFtb3VudCk7CiAgICAKICAgICAgICB1aW50MjU2IHBheUFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IHJldHVybkFtb3VudCA9IDA7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgdHJhbnNmZXJlZCB0byBpbnZlc3RvcgogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gdG9rZW5SYXRlLm11bChwYXlBbW91bnQpOwogICAgCiAgICAgICAgaWYgKGlzc3VlZFRva2Vuc0Ftb3VudCArIHRva2VucyA+IG1heFRva2Vuc0Ftb3VudCkgewogICAgICAgICAgICB0b2tlbnMgPSBtYXhUb2tlbnNBbW91bnQuc3ViKGlzc3VlZFRva2Vuc0Ftb3VudCk7CiAgICAgICAgICAgIHBheUFtb3VudCA9IHRva2Vucy5kaXYodG9rZW5SYXRlKTsKICAgICAgICAgICAgcmV0dXJuQW1vdW50ID0gbXNnLnZhbHVlLnN1YihwYXlBbW91bnQpOwogICAgICAgIH0KICAgIAogICAgICAgIGlzc3VlZFRva2Vuc0Ftb3VudCA9IGlzc3VlZFRva2Vuc0Ftb3VudC5hZGQodG9rZW5zKTsKICAgICAgICByZXF1aXJlIChpc3N1ZWRUb2tlbnNBbW91bnQgPD0gbWF4VG9rZW5zQW1vdW50KTsKCiAgICAgICAgLy8gc2VuZCB0b2tlbiB0byBpbnZlc3RvcgogICAgICAgIHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2Vucyk7CiAgICAgICAgLy8gbm90aWZ5IGxpc3RlbmVycyBvbiB0b2tlbiBwdXJjaGFzZQogICAgICAgIFRva2VuQm91Z2h0KG1zZy5zZW5kZXIsIHRva2VucywgcGF5QW1vdW50KTsKCiAgICAgICAgLy8gc2VuZCBldGhlcnMgdG8gc3BlY2lhbCBhZGRyZXNzCiAgICAgICAgYmVuZWZpY2lhcnlBZGRyZXNzLnRyYW5zZmVyKHBheUFtb3VudCk7CiAgICAKICAgICAgICBpZiAocmV0dXJuQW1vdW50ID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJldHVybkFtb3VudCk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogVHJpZ2dlciBlbWVyZ2VuY3kgdG9rZW4gcGF1c2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhdXNlVG9rZW4oKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoIXRva2VuLnBhdXNlZCgpKTsKICAgICAgICB0b2tlbi5wYXVzZSgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogVW5wYXVzZSB0b2tlbi4KICAgICAqLwogICAgZnVuY3Rpb24gdW5wYXVzZVRva2VuKCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKHRva2VuLnBhdXNlZCgpKTsKICAgICAgICB0b2tlbi51bnBhdXNlKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogRmluaXNoIElDTy4KICAgICAqLwogICAgZnVuY3Rpb24gZmluaXNoKCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlIChpc3N1ZWRUb2tlbnNBbW91bnQgPj0gbWF4VG9rZW5zQW1vdW50IHx8IG5vdyA+IGVuZERhdGUpOwogICAgICAgIHJlcXVpcmUgKCFpc0ZpbmlzaGVkKTsKICAgICAgICBpc0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihiYW5rQWRkcmVzcywgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBCdXkgSFFYLiBDaGVjayBtaW5CdXlhYmxlQW1vdW50IGFuZCB0b2tlblJhdGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKCk7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgUHJpdmF0ZVBsYWNlbWVudAogKiBAZGV2IEhvUXUuaW8gUHJpdmF0ZSBUb2tlbiBQbGFjZW1lbnQgY29udHJhY3QKICovCmNvbnRyYWN0IFByaXZhdGVQbGFjZW1lbnQgaXMgQmFzZUNyb3dkc2FsZSB7CgogICAgLy8gaW50ZXJuYWwgYWRkcmVzc2VzIGZvciBIb1F1IHRva2VucyBhbGxvY2F0aW9uCiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyc0FkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBzdXBwb3J0QWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGJvdW50eUFkZHJlc3M7CgogICAgLy8gaW5pdGlhbCBhbW91bnQgZGlzdHJpYnV0aW9uIHZhbHVlcwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG90YWxTdXBwbHkgPSA4ODg4ODgwMDAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbml0aWFsRm91bmRlcnNBbW91bnQgPSAyNjY2NjY0MDAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbml0aWFsU3VwcG9ydEFtb3VudCA9IDg4ODg4ODAgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbml0aWFsQm91bnR5QW1vdW50ID0gMzU1NTU1MjAgZXRoZXI7CgogICAgLy8gd2hldGhlciBpbml0aWFsIHRva2VuIGFsbG9jYXRpb25zIHdhcyBwZXJmb3JtZWQgb3Igbm90CiAgICBib29sIGFsbG9jYXRlZEludGVybmFsV2FsbGV0cyA9IGZhbHNlOwogICAgCiAgICAvKioKICAgICogQHBhcmFtIF9iYW5rQWRkcmVzcyBhZGRyZXNzIGZvciByZW1haW4gSFFYIHRva2VucyBhY2N1bXVsYXRpb24KICAgICogQHBhcmFtIF9mb3VuZGVyc0FkZHJlc3MgZm91bmRlcnMgYWRkcmVzcwogICAgKiBAcGFyYW0gX3N1cHBvcnRBZGRyZXNzIHN1cHBvcnQgYWRkcmVzcwogICAgKiBAcGFyYW0gX2JvdW50eUFkZHJlc3MgYm91bnR5IGFkZHJlc3MKICAgICogQHBhcmFtIF9iZW5lZmljaWFyeUFkZHJlc3MgYWNjZXB0ZWQgRVRIIGdvIHRvIHRoaXMgYWRkcmVzcwogICAgKi8KICAgIGZ1bmN0aW9uIFByaXZhdGVQbGFjZW1lbnQoCiAgICAgICAgYWRkcmVzcyBfYmFua0FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfZm91bmRlcnNBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX3N1cHBvcnRBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX2JvdW50eUFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfYmVuZWZpY2lhcnlBZGRyZXNzCiAgICApIEJhc2VDcm93ZHNhbGUoCiAgICAgICAgY3JlYXRlVG9rZW4odG90YWxTdXBwbHkpLAogICAgICAgIF9iYW5rQWRkcmVzcywKICAgICAgICBfYmVuZWZpY2lhcnlBZGRyZXNzLAogICAgICAgIDEwMDAwLCAvKiByYXRlIEhRWCBwZXIgMSBFVEggKGluY2x1ZGVzIDEwMCUgcHJpdmF0ZSBwbGFjZW1lbnQgYm9udXMpICovCiAgICAgICAgMTAwLCAvKiBtaW4gYW1vdW50IGluIEVUSCAqLwogICAgICAgIDIzMTExMDg4LCAvKiBjYXAgaW4gSFFYICovCiAgICAgICAgMTUwNzkzOTIwMCAvKiBlbmQgMTAvMTQvMjAxNyBAIDEyOjAwYW0gKFVUQykgKi8KICAgICkgewogICAgICAgIGZvdW5kZXJzQWRkcmVzcyA9IF9mb3VuZGVyc0FkZHJlc3M7CiAgICAgICAgc3VwcG9ydEFkZHJlc3MgPSBfc3VwcG9ydEFkZHJlc3M7CiAgICAgICAgYm91bnR5QWRkcmVzcyA9IF9ib3VudHlBZGRyZXNzOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFBlcmZvcm0gaW5pdGlhbCB0b2tlbiBhbGxvY2F0aW9uIGJldHdlZW4gZm91bmRlcnMnIGFkZHJlc3Nlcy4KICAgICAqIElzIG9ubHkgZXhlY3V0ZWQgb25jZSBhZnRlciBwcmVzYWxlIGNvbnRyYWN0IGRlcGxveW1lbnQgYW5kIGlzIGludm9rZWQgbWFudWFsbHkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG9jYXRlSW50ZXJuYWxXYWxsZXRzKCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlICghYWxsb2NhdGVkSW50ZXJuYWxXYWxsZXRzKTsKCiAgICAgICAgYWxsb2NhdGVkSW50ZXJuYWxXYWxsZXRzID0gdHJ1ZTsKCiAgICAgICAgdG9rZW4udHJhbnNmZXIoZm91bmRlcnNBZGRyZXNzLCBpbml0aWFsRm91bmRlcnNBbW91bnQpOwogICAgICAgIHRva2VuLnRyYW5zZmVyKHN1cHBvcnRBZGRyZXNzLCBpbml0aWFsU3VwcG9ydEFtb3VudCk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoYm91bnR5QWRkcmVzcywgaW5pdGlhbEJvdW50eUFtb3VudCk7CiAgICB9CiAgICAKICAgIC8qCiAgICAgKiBAZGV2IEhvUXUgVG9rZW4gZmFjdG9yeS4KICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW4odWludDI1NiBfdG90YWxTdXBwbHkpIGludGVybmFsIHJldHVybnMgKEhvUXVUb2tlbikgewogICAgICAgIHJldHVybiBuZXcgSG9RdVRva2VuKF90b3RhbFN1cHBseSk7CiAgICB9Cn0='.
	

]
