Class {
	#name : #SRTa8a8509a17a5872d01e489fc85b152eb2a0c092e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa8a8509a17a5872d01e489fc85b152eb2a0c092e >> base64 [
	^ ''.
	

]
