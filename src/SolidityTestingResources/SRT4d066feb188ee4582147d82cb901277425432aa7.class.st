Class {
	#name : #SRT4d066feb188ee4582147d82cb901277425432aa7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d066feb188ee4582147d82cb901277425432aa7 >> base64 [
	^ ''.
	

]
