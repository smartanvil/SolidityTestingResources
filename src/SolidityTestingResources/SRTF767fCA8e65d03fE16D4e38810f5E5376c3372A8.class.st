Class {
	#name : #SRTF767fCA8e65d03fE16D4e38810f5E5376c3372A8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF767fCA8e65d03fE16D4e38810f5E5376c3372A8 >> base64 [
	^ 'Y29udHJhY3QgTHVja3lEb3VibGVyIHsKLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCi8vIyMjIyBMdWNreURvdWJsZXI6IEEgZG91YmxlciB3aXRoIHJhbmRvbSBwYXlvdXQgb3JkZXIgIyMjIwovLyMjIyMgRGVwb3NpdCAxIEVUSEVSIHRvIHBhcnRpY2lwYXRlICAgICAgICAgICAgICAgICAgICMjIyMKLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCi8vQ09QWVJJR0hUIDIwMTYgS0FUQVRTVUtJIEFMTCBSSUdIVFMgUkVTRVJWRUQKLy9ObyBwYXJ0IG9mIHRoaXMgc291cmNlIGNvZGUgbWF5IGJlIHJlcHJvZHVjZWQsIGRpc3RyaWJ1dGVkLAovL21vZGlmaWVkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucyB3aXRob3V0Ci8vdGhlIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBvZiB0aGUgY3JlYXRvci4KCiAgICBhZGRyZXNzIHByaXZhdGUgb3duZXI7CiAgICAKICAgIC8vU3RvcmVkIHZhcmlhYmxlcwogICAgdWludCBwcml2YXRlIGJhbGFuY2UgPSAwOwogICAgdWludCBwcml2YXRlIGZlZSA9IDU7CiAgICB1aW50IHByaXZhdGUgbXVsdGlwbGllciA9IDEyNTsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IFVzZXIpIHByaXZhdGUgdXNlcnM7CiAgICBFbnRyeVtdIHByaXZhdGUgZW50cmllczsKICAgIHVpbnRbXSBwcml2YXRlIHVucGFpZEVudHJpZXM7CiAgICAKICAgIC8vU2V0IG93bmVyIG9uIGNvbnRyYWN0IGNyZWF0aW9uCiAgICBmdW5jdGlvbiBMdWNreURvdWJsZXIoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlvd25lciB7IGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBfOyB9ICAgIAogICAgc3RydWN0IFVzZXIgewogICAgICAgIGFkZHJlc3MgaWQ7CiAgICAgICAgdWludCBkZXBvc2l0czsKICAgICAgICB1aW50IHBheW91dHNSZWNlaXZlZDsKICAgIH0KICAgIAogICAgc3RydWN0IEVudHJ5IHsKICAgICAgICBhZGRyZXNzIGVudHJ5QWRkcmVzczsKICAgICAgICB1aW50IGRlcG9zaXQ7CiAgICAgICAgdWludCBwYXlvdXQ7CiAgICAgICAgYm9vbCBwYWlkOwogICAgfQoKICAgIC8vRmFsbGJhY2sgZnVuY3Rpb24KICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGluaXQoKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaW5pdCgpIHByaXZhdGV7CiAgICAgICAgCiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IDEgZXRoZXIpIHsKICAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGpvaW4oKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gam9pbigpIHByaXZhdGUgewogICAgICAgIAogICAgICAgIC8vTGltaXQgZGVwb3NpdHMgdG8gMUVUSAogICAgICAgIHVpbnQgZFZhbHVlID0gMSBldGhlcjsKICAgICAgICAKICAgICAgICBpZiAobXNnLnZhbHVlID4gMSBldGhlcikgewogICAgICAgICAgICAKICAgICAgICAJbXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSAtIDEgZXRoZXIpOwkKICAgICAgICAJZFZhbHVlID0gMSBldGhlcjsKICAgICAgICB9CiAgICAgIAogICAgICAgIC8vQWRkIG5ldyB1c2VycyB0byB0aGUgdXNlcnMgYXJyYXkKICAgICAgICBpZiAodXNlcnNbbXNnLnNlbmRlcl0uaWQgPT0gYWRkcmVzcygwKSkKICAgICAgICB7CiAgICAgICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmlkID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgdXNlcnNbbXNnLnNlbmRlcl0uZGVwb3NpdHMgPSAwOwogICAgICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5wYXlvdXRzUmVjZWl2ZWQgPSAwOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvL0FkZCBuZXcgZW50cnkgdG8gdGhlIGVudHJpZXMgYXJyYXkKICAgICAgICBlbnRyaWVzLnB1c2goRW50cnkobXNnLnNlbmRlciwgZFZhbHVlLCAoZFZhbHVlICogKG11bHRpcGxpZXIpIC8gMTAwKSwgZmFsc2UpKTsKICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5kZXBvc2l0cysrOwogICAgICAgIHVucGFpZEVudHJpZXMucHVzaChlbnRyaWVzLmxlbmd0aCAtMSk7CiAgICAgICAgCiAgICAgICAgLy9Db2xsZWN0IGZlZXMgYW5kIHVwZGF0ZSBjb250cmFjdCBiYWxhbmNlCiAgICAgICAgYmFsYW5jZSArPSAoZFZhbHVlICogKDEwMCAtIGZlZSkpIC8gMTAwOwogICAgICAgIAogICAgICAgIHVpbnQgaW5kZXggPSB1bnBhaWRFbnRyaWVzLmxlbmd0aCA+IDEgPyByYW5kKHVucGFpZEVudHJpZXMubGVuZ3RoKSA6IDA7CiAgICAgICAgRW50cnkgdGhlRW50cnkgPSBlbnRyaWVzW3VucGFpZEVudHJpZXNbaW5kZXhdXTsKICAgICAgICAKICAgICAgICAvL1BheSBwZW5kaW5nIGVudHJpZXMgaWYgdGhlIG5ldyBiYWxhbmNlIGFsbG93cyBmb3IgaXQKICAgICAgICBpZiAoYmFsYW5jZSA+IHRoZUVudHJ5LnBheW91dCkgewogICAgICAgICAgICAKICAgICAgICAgICAgdWludCBwYXlvdXQgPSB0aGVFbnRyeS5wYXlvdXQ7CiAgICAgICAgICAgIAogICAgICAgICAgICB0aGVFbnRyeS5lbnRyeUFkZHJlc3Muc2VuZChwYXlvdXQpOwogICAgICAgICAgICB0aGVFbnRyeS5wYWlkID0gdHJ1ZTsKICAgICAgICAgICAgdXNlcnNbdGhlRW50cnkuZW50cnlBZGRyZXNzXS5wYXlvdXRzUmVjZWl2ZWQrKzsKCiAgICAgICAgICAgIGJhbGFuY2UgLT0gcGF5b3V0OwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGluZGV4IDwgdW5wYWlkRW50cmllcy5sZW5ndGggLSAxKQogICAgICAgICAgICAgICAgdW5wYWlkRW50cmllc1tpbmRleF0gPSB1bnBhaWRFbnRyaWVzW3VucGFpZEVudHJpZXMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgCiAgICAgICAgICAgIHVucGFpZEVudHJpZXMubGVuZ3RoLS07CiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICAvL0NvbGxlY3QgbW9uZXkgZnJvbSBmZWVzIGFuZCBwb3NzaWJsZSBsZWZ0b3ZlcnMgZnJvbSBlcnJvcnMgKGFjdHVhbCBiYWxhbmNlIHVudG91Y2hlZCkKICAgICAgICB1aW50IGZlZXMgPSB0aGlzLmJhbGFuY2UgLSBiYWxhbmNlOwogICAgICAgIGlmIChmZWVzID4gMCkKICAgICAgICB7CiAgICAgICAgICAgICAgICBvd25lci5zZW5kKGZlZXMpOwogICAgICAgIH0gICAgICAKICAgICAgIAogICAgfQogICAgCiAgICAvL0dlbmVyYXRlIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwICYgbWF4CiAgICB1aW50MjU2IGNvbnN0YW50IHByaXZhdGUgRkFDVE9SID0gIDExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTk7CiAgICBmdW5jdGlvbiByYW5kKHVpbnQgbWF4KSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKHVpbnQyNTYgcmVzdWx0KXsKICAgICAgICB1aW50MjU2IGZhY3RvciA9IEZBQ1RPUiAqIDEwMCAvIG1heDsKICAgICAgICB1aW50MjU2IGxhc3RCbG9ja051bWJlciA9IGJsb2NrLm51bWJlciAtIDE7CiAgICAgICAgdWludDI1NiBoYXNoVmFsID0gdWludDI1NihibG9jay5ibG9ja2hhc2gobGFzdEJsb2NrTnVtYmVyKSk7CiAgICAKICAgICAgICByZXR1cm4gdWludDI1NigodWludDI1NihoYXNoVmFsKSAvIGZhY3RvcikpICUgbWF4OwogICAgfQogICAgCiAgICAKICAgIC8vQ29udHJhY3QgbWFuYWdlbWVudAogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seW93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aXBsaWVyKHVpbnQgbXVsdGkpIG9ubHlvd25lciB7CiAgICAgICAgaWYgKG11bHRpIDwgMTEwIHx8IG11bHRpID4gMTUwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBtdWx0aXBsaWVyID0gbXVsdGk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUZlZSh1aW50IG5ld0ZlZSkgb25seW93bmVyIHsKICAgICAgICBpZiAoZmVlID4gNSkgCiAgICAgICAgICAgIHRocm93OwogICAgICAgIGZlZSA9IG5ld0ZlZTsKICAgIH0KICAgIAogICAgCiAgICAvL0pTT04gZnVuY3Rpb25zCiAgICBmdW5jdGlvbiBtdWx0aXBsaWVyRmFjdG9yKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmYWN0b3IsIHN0cmluZyBpbmZvKSB7CiAgICAgICAgZmFjdG9yID0gbXVsdGlwbGllcjsKICAgICAgICBpbmZvID0gJ1RoZSBjdXJyZW50IG11bHRpcGxpZXIgYXBwbGllZCB0byBhbGwgZGVwb3NpdHMuIE1pbiAxMTAlLCBtYXggMTUwJS4nOyAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY3VycmVudEZlZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZmVlUGVyY2VudGFnZSwgc3RyaW5nIGluZm8pIHsKICAgICAgICBmZWVQZXJjZW50YWdlID0gZmVlOwogICAgICAgIGluZm8gPSAnVGhlIGZlZSBwZXJjZW50YWdlIGFwcGxpZWQgdG8gYWxsIGRlcG9zaXRzLiBJdCBjYW4gY2hhbmdlIHRvIHNwZWVkIHBheW91dHMgKG1heCA1JSkuJzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG90YWxFbnRyaWVzKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBjb3VudCwgc3RyaW5nIGluZm8pIHsKICAgICAgICBjb3VudCA9IGVudHJpZXMubGVuZ3RoOwogICAgICAgIGluZm8gPSAnVGhlIG51bWJlciBvZiBkZXBvc2l0cy4nOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1c2VyU3RhdHMoYWRkcmVzcyB1c2VyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGRlcG9zaXRzLCB1aW50IHBheW91dHMsIHN0cmluZyBpbmZvKQogICAgewogICAgICAgIGlmICh1c2Vyc1t1c2VyXS5pZCAhPSBhZGRyZXNzKDB4MCkpCiAgICAgICAgewogICAgICAgICAgICBkZXBvc2l0cyA9IHVzZXJzW3VzZXJdLmRlcG9zaXRzOwogICAgICAgICAgICBwYXlvdXRzID0gdXNlcnNbdXNlcl0ucGF5b3V0c1JlY2VpdmVkOwogICAgICAgICAgICBpbmZvID0gJ1VzZXJzIHN0YXRzOiB0b3RhbCBkZXBvc2l0cywgcGF5b3V0cyByZWNlaXZlZC4nOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gZW50cnlEZXRhaWxzKHVpbnQgaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgdXNlciwgdWludCBwYXlvdXQsIGJvb2wgcGFpZCwgc3RyaW5nIGluZm8pCiAgICB7CiAgICAgICAgaWYgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICAgICAgICAgICAgdXNlciA9IGVudHJpZXNbaW5kZXhdLmVudHJ5QWRkcmVzczsKICAgICAgICAgICAgcGF5b3V0ID0gZW50cmllc1tpbmRleF0ucGF5b3V0IC8gMSBmaW5uZXk7CiAgICAgICAgICAgIHBhaWQgPSBlbnRyaWVzW2luZGV4XS5wYWlkOwogICAgICAgICAgICBpbmZvID0gJ0VudHJ5IGluZm86IHVzZXIgYWRkcmVzcywgZXhwZWN0ZWQgcGF5b3V0IGluIEZpbm5leXMsIHBheW91dCBzdGF0dXMuJzsKICAgICAgICB9CiAgICB9CiAgICAKICAgIAp9'.
	

]
