Class {
	#name : #SRT066e86ed7cf56ee96b7c7d4301bfbb7cbf8515c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT066e86ed7cf56ee96b7c7d4301bfbb7cbf8515c6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAgIC8qKgogICAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICAgKiBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgoKY29udHJhY3QgVGVtcHVzVG9rZW4gewoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludDI1NiBhbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKfQoKY29udHJhY3QgVGVtcHVzSWNvIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lID0gMTUxOTg5NDgwMDsgLy8xIE1hcmNoIDIwMTggMDk6MDA6MDAgR01UCgogICAgLy9pbml0aWFsIHRva2VuIHByaWNlCiAgICB1aW50IHB1YmxpYyBwcmljZTAgPSAwLjAwNSBldGhlciAvIDEwMDA7CiAgICB1aW50IHB1YmxpYyBwcmljZTEgPSBwcmljZTAgKiAyOwogICAgdWludCBwdWJsaWMgcHJpY2UyID0gcHJpY2UxICogMjsKICAgIHVpbnQgcHVibGljIHByaWNlMyA9IHByaWNlMiAqIDI7CiAgICB1aW50IHB1YmxpYyBwcmljZTQgPSBwcmljZTMgKiAyOwoKICAgIC8vbWF4IHRva2VucyBjb3VsZCBiZSBzb2xkIGR1cmluZyBpY28KICAgIHVpbnQgcHVibGljIGhhcmRDYXAgPSAxMDAwMDAwMDAwICogMTAwMDsKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQgPSAwOwogICAgdWludFs1XSBwdWJsaWMgdG9rZW5zU29sZEluUGVyaW9kOwoKICAgIHVpbnQgcHVibGljIHBlcmlvZER1cmF0aW9uID0gMzAgZGF5czsKCiAgICB1aW50IHB1YmxpYyBwZXJpb2QwRW5kID0gc3RhcnRUaW1lICsgcGVyaW9kRHVyYXRpb247CiAgICB1aW50IHB1YmxpYyBwZXJpb2QxRW5kID0gcGVyaW9kMEVuZCArIHBlcmlvZER1cmF0aW9uOwogICAgdWludCBwdWJsaWMgcGVyaW9kMkVuZCA9IHBlcmlvZDFFbmQgKyBwZXJpb2REdXJhdGlvbjsKICAgIHVpbnQgcHVibGljIHBlcmlvZDNFbmQgPSBwZXJpb2QyRW5kICsgcGVyaW9kRHVyYXRpb247CgogICAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgogICAgYWRkcmVzcyB3aXRoZHJhd0FkZHJlc3MxOwogICAgYWRkcmVzcyB3aXRoZHJhd0FkZHJlc3MyOwoKICAgIFRlbXB1c1Rva2VuIHRva2VuOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgc2VsbGVyczsKCiAgICBtb2RpZmllciBvbmx5U2VsbGVycygpIHsKICAgICAgICByZXF1aXJlKHNlbGxlcnNbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gVGVtcHVzSWNvIChhZGRyZXNzIHRva2VuQWRkcmVzcywgYWRkcmVzcyBfd2l0aGRyYXdBZGRyZXNzMSwKICAgIGFkZHJlc3MgX3dpdGhkcmF3QWRkcmVzczIpIHB1YmxpYyB7CiAgICAgICAgdG9rZW4gPSBUZW1wdXNUb2tlbih0b2tlbkFkZHJlc3MpOwogICAgICAgIHdpdGhkcmF3QWRkcmVzczEgPSBfd2l0aGRyYXdBZGRyZXNzMTsKICAgICAgICB3aXRoZHJhd0FkZHJlc3MyID0gX3dpdGhkcmF3QWRkcmVzczI7CiAgICB9CgogICAgZnVuY3Rpb24gcGVyaW9kQnlEYXRlKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBwZXJpb2ROdW0pIHsKICAgICAgICBpZihub3cgPCBwZXJpb2QwRW5kKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICBpZihub3cgPCBwZXJpb2QxRW5kKSB7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgICBpZihub3cgPCBwZXJpb2QyRW5kKSB7CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgIH0KICAgICAgICBpZihub3cgPCBwZXJpb2QzRW5kKSB7CiAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gNDsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmljZUJ5UGVyaW9kKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBwcmljZSkgewogICAgICAgIHVpbnQgcGVyaW9kTnVtID0gcGVyaW9kQnlEYXRlKCk7CiAgICAgICAgaWYocGVyaW9kTnVtID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIHByaWNlMDsKICAgICAgICB9CiAgICAgICAgaWYocGVyaW9kTnVtID09IDEpIHsKICAgICAgICAgICAgcmV0dXJuIHByaWNlMTsKICAgICAgICB9CiAgICAgICAgaWYocGVyaW9kTnVtID09IDIpIHsKICAgICAgICAgICAgcmV0dXJuIHByaWNlMjsKICAgICAgICB9CiAgICAgICAgaWYocGVyaW9kTnVtID09IDMpIHsKICAgICAgICAgICAgcmV0dXJuIHByaWNlMzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHByaWNlNDsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHByZSBpY28gaXMgYWN0aXZlIG9yIG5vdAogICAgKi8KICAgIGZ1bmN0aW9uIGlzQWN0aXZlKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBhY3RpdmUpIHsKICAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWU7CiAgICAgICAgYm9vbCBjYXBJc05vdE1ldCA9IHRva2Vuc1NvbGQgPCBoYXJkQ2FwOwogICAgICAgIHJldHVybiBjYXBJc05vdE1ldCAmJiB3aXRoaW5QZXJpb2QgJiYgIXBhdXNlZDsKICAgIH0KCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGJ1eUZvcihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBMb3ctbGV2ZWwgcHVyY2hhc2UgZnVuY3Rpb24uIFB1cmNoYXNlcyB0b2tlbnMgZm9yIHNwZWNpZmllZCBhZGRyZXNzCiAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSBBZGRyZXNzIHRoYXQgd2lsbCBnZXQgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gYnV5Rm9yKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSAhPSAwKTsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICByZXF1aXJlKGFtb3VudCA+PSAwLjEgZXRoZXIpOwogICAgICAgIHVpbnQgcHJpY2UgPSBwcmljZUJ5UGVyaW9kKCk7CiAgICAgICAgdWludCB0b2tlbkFtb3VudCA9IGFtb3VudC5kaXYocHJpY2UpOwogICAgICAgIG1ha2VQdXJjaGFzZShiZW5lZmljaWFyeSwgdG9rZW5BbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGJ5IG91ciByb2JvdCB0byBhbGxvdyB1c2VycwogICAgKiB0byBidXkgdG9ua2VucyBmb3IgdmFyaW91cyBjcnlwdG9zLgogICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgQW4gYWRkcmVzcyB0aGF0IHdpbGwgZ2V0IHRva2VucwogICAgKiBAcGFyYW0gYW1vdW50IEFtb3VudCBvZiB0b2tlbnMgdGhhdCBhZGRyZXNzIHdpbGwgZ2V0CiAgICAqLwogICAgZnVuY3Rpb24gZXh0ZXJuYWxQdXJjaGFzZShhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IGFtb3VudCkgZXh0ZXJuYWwgb25seVNlbGxlcnMgewogICAgICAgIG1ha2VQdXJjaGFzZShiZW5lZmljaWFyeSwgYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlUHVyY2hhc2UoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCBhbW91bnQpIHByaXZhdGUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKGlzQWN0aXZlKCkpOwogICAgICAgIHVpbnQgbWluaW11bVRva2VucyA9IDEwMDA7CiAgICAgICAgaWYodG9rZW5zU29sZCA8IGhhcmRDYXAuc3ViKG1pbmltdW1Ub2tlbnMpKSB7CiAgICAgICAgICAgIHJlcXVpcmUoYW1vdW50ID49IG1pbmltdW1Ub2tlbnMpOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKGFtb3VudC5hZGQodG9rZW5zU29sZCkgPD0gaGFyZENhcCk7CiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudCk7CiAgICAgICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgYW1vdW50KTsKICAgICAgICB1cGRhdGVQZXJpb2RTdGF0KGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlUGVyaW9kU3RhdCh1aW50IGFtb3VudCkgcHJpdmF0ZSB7CiAgICAgICAgdWludCBwZXJpb2ROdW0gPSBwZXJpb2RCeURhdGUoKTsKICAgICAgICB0b2tlbnNTb2xkSW5QZXJpb2RbcGVyaW9kTnVtXSA9IHRva2Vuc1NvbGRJblBlcmlvZFtwZXJpb2ROdW1dICsgYW1vdW50OwogICAgICAgIGlmKHBlcmlvZE51bSA9PSA1KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdWludCBhbW91bnRPblN0YXJ0ID0gaGFyZENhcCAtIHRva2Vuc1NvbGQgKyB0b2tlbnNTb2xkSW5QZXJpb2RbcGVyaW9kTnVtXTsKICAgICAgICB1aW50IHBlcmNlbnRTb2xkID0gKHRva2Vuc1NvbGRJblBlcmlvZFtwZXJpb2ROdW1dICogMTAwKSAvIGFtb3VudE9uU3RhcnQ7CiAgICAgICAgaWYocGVyY2VudFNvbGQgPj0gMjApIHsKICAgICAgICAgICAgcmVzZXRQZXJpb2REYXRlcyhwZXJpb2ROdW0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZXNldFBlcmlvZERhdGVzKHVpbnQgcGVyaW9kTnVtKSBwcml2YXRlIHsKICAgICAgICBpZihwZXJpb2ROdW0gPT0gMCkgewogICAgICAgICAgICBwZXJpb2QwRW5kID0gbm93OwogICAgICAgICAgICBwZXJpb2QxRW5kID0gcGVyaW9kMEVuZCArIHBlcmlvZER1cmF0aW9uOwogICAgICAgICAgICBwZXJpb2QyRW5kID0gcGVyaW9kMUVuZCArIHBlcmlvZER1cmF0aW9uOwogICAgICAgICAgICBwZXJpb2QzRW5kID0gcGVyaW9kMkVuZCArIHBlcmlvZER1cmF0aW9uOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmKHBlcmlvZE51bSA9PSAxKSB7CiAgICAgICAgICAgIHBlcmlvZDFFbmQgPSBub3c7CiAgICAgICAgICAgIHBlcmlvZDJFbmQgPSBwZXJpb2QxRW5kICsgcGVyaW9kRHVyYXRpb247CiAgICAgICAgICAgIHBlcmlvZDNFbmQgPSBwZXJpb2QyRW5kICsgcGVyaW9kRHVyYXRpb247CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYocGVyaW9kTnVtID09IDIpIHsKICAgICAgICAgICAgcGVyaW9kMkVuZCA9IG5vdzsKICAgICAgICAgICAgcGVyaW9kM0VuZCA9IHBlcmlvZDJFbmQgKyBwZXJpb2REdXJhdGlvbjsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZihwZXJpb2ROdW0gPT0gMykgewogICAgICAgICAgICBwZXJpb2QzRW5kID0gbm93OwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldFBhdXNlZChib29sIGlzUGF1c2VkKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHBhdXNlZCA9IGlzUGF1c2VkOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFNldHMgYWRkcmVzcyBvZiBzZWxsZXIgcm9ib3QKICAgICogQHBhcmFtIHNlbGxlciBBZGRyZXNzIG9mIHNlbGxlciByb2JvdCB0byBzZXQKICAgICogQHBhcmFtIGlzU2VsbGVyIFBhcmFtZXRlciB3aGV0aGVyIHNldCBhcyBzZWxsZXIgb3Igbm90CiAgICAqLwogICAgZnVuY3Rpb24gc2V0QXNTZWxsZXIoYWRkcmVzcyBzZWxsZXIsIGJvb2wgaXNTZWxsZXIpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgc2VsbGVyc1tzZWxsZXJdID0gaXNTZWxsZXI7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgU2V0IHN0YXJ0IHRpbWUgb2YgSUNPCiAgICAqIEBwYXJhbSBfc3RhcnRUaW1lIFN0YXJ0IG9mIElDTyAodW5peCB0aW1lKQogICAgKi8KICAgIGZ1bmN0aW9uIHNldFN0YXJ0VGltZSh1aW50IF9zdGFydFRpbWUpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBGdW5jdGlvbiB0byBnZXQgZXRoZXIgZnJvbSBjb250cmFjdAogICAgKiBAcGFyYW0gYW1vdW50IEFtb3VudCBpbiB3ZWkgdG8gd2l0aGRyYXcKICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKHVpbnQgYW1vdW50KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHdpdGhkcmF3QWRkcmVzczEudHJhbnNmZXIoYW1vdW50IC8gMik7CiAgICAgICAgd2l0aGRyYXdBZGRyZXNzMi50cmFuc2ZlcihhbW91bnQgLyAyKTsKICAgIH0KfQ=='.
	

]
