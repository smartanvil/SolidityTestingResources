Class {
	#name : #SRTE335936435D176E78D8b4D675BAfbc575Fb560ED,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE335936435D176E78D8b4D675BAfbc575Fb560ED >> base64 [
	^ ''.
	

]
