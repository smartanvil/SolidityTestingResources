Class {
	#name : #SRT5ddf3e8cfaa2b1cc1f49a57f78b6c4a982757849,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ddf3e8cfaa2b1cc1f49a57f78b6c4a982757849 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgTW9uZWRhIHsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYnVybigpIHB1YmxpYzsKfQoKY29udHJhY3QgTW9uZWRhSUNPIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgCiAgICBzdHJ1Y3QgRGF0ZVJhdGUgewogICAgICAgIHVpbnQyNTYgZGF0ZTsKICAgICAgICB1aW50MjU2IHJhdGU7CiAgICB9CgogICAgLy8gUHJlSUNPCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBwcmVJQ09MaW1pdCA9IDIwMDAwMDAwZTE4OyAvLyBQcmUtSUNPIGxpbWl0IDUlLCAyMG1pbAogICAgRGF0ZVJhdGUgcHVibGljIHByZUlDTyA9IERhdGVSYXRlKDE1MjUxMzI3OTksIDY3NTApOyAvLyBNb25kYXksIEFwcmlsIDMwLCAyMDE4IDExOjU5OjU5IFBNIC0tLSAzNSUgQm9udXMKICAgIHVpbnQyNTYgcHVibGljIHByZV90b2tlbnNTb2xkID0gMDsKICAgIAogICAgLy8gSUNPCiAgICBEYXRlUmF0ZSBwdWJsaWMgaWNvU3RhcnRzID0gRGF0ZVJhdGUoMTUyNjM0MjQwMCwgNTc1MCk7IC8vIFR1ZXNkYXksIE1heSAxNSwgMjAxOCAxMjowMDowMCBBTSAtLS0gMTUlIEJvbnVzCiAgICBEYXRlUmF0ZSBwdWJsaWMgaWNvRW5kT2ZTdGFnZUEgPSBEYXRlUmF0ZSgxNTI5MDIwODAwLCA1NTAwKTsgLy8gRnJpZGF5LCBKdW5lIDE1LCAyMDE4IDEyOjAwOjAwIEFNIC0tLSAxMCUgQm9udXMKICAgIERhdGVSYXRlIHB1YmxpYyBpY29FbmRPZlN0YWdlQiA9IERhdGVSYXRlKDE1MzAzMTY4MDAsIDUyNTApOyAvLyBTYXR1cmRheSwgSnVuZSAzMCwgMjAxOCAxMjowMDowMCBBTSAtLS0gNSUgQm9udXMKICAgIERhdGVSYXRlIHB1YmxpYyBpY29FbmRzID0gRGF0ZVJhdGUoMTUzMTY5OTE5OSwgNTAwMCk7IC8vIFN1bmRheSwgSnVseSAxNSwgMjAxOCAxMTo1OTo1OSBQTSAtLS0gMCUgQm9udXMKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGljb0xpbWl0ID0gMjUwMDAwMDAwZTE4OyAvLyBJQ08gbGltaXQgNjIuNSUsIDI1MG1pbAogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogICAgLy8gSWYgdGhlIGZ1bmRpbmcgZ29hbCBpcyBub3QgcmVhY2hlZCwgdG9rZW4gaG9sZGVycyBtYXkgd2l0aGRyYXcgdGhlaXIgZnVuZHMKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIGZ1bmRpbmdHb2FsID0gMTAwMDAwMDBlMTg7IC8vIDEwbWlsCiAgICAvLyBIb3cgbXVjaCBoYXMgYmVlbiByYWlzZWQgYnkgY3Jvd2RhbGUgKGluIEVUSCkKICAgIHVpbnQgcHVibGljIGFtb3VudFJhaXNlZDsKICAgIC8vIFRoZSBiYWxhbmNlcyAoaW4gRVRIKSBvZiBhbGwgdG9rZW4gaG9sZGVycwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsKICAgIC8vIEluZGljYXRlcyBpZiB0aGUgY3Jvd2RzYWxlIGhhcyBiZWVuIGVuZGVkIGFscmVhZHkKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUVuZGVkID0gZmFsc2U7CiAgICAvLyBUb2tlbnMgd2lsbCBiZSB0cmFuc2ZlcmVkIGZyb20gdGhpcyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk93bmVyOwogICAgLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgICBNb25lZGEgcHVibGljIHRva2VuUmV3YXJkOwogICAgLy8gVGhlIHdhbGxldCBvbiB3aGljaCB0aGUgZnVuZHMgd2lsbCBiZSBzdG9yZWQKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICAgIC8vIE5vdGlmeWluZyB0cmFuc2ZlcnMgYW5kIHRoZSBzdWNjZXNzIG9mIHRoZSBjcm93ZHNhbGUKICAgIGV2ZW50IEdvYWxSZWFjaGVkKGFkZHJlc3MgdG9rZW5Pd25lciwgdWludCBhbW91bnRSYWlzZWQpOwogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbiwgdWludCBhbW91bnRSYWlzZWQpOwogICAgCiAgICBmdW5jdGlvbiBNb25lZGFJQ08oTW9uZWRhIHRva2VuLCBhZGRyZXNzIHdhbGxldEFkZHIsIGFkZHJlc3MgdG9rZW5Pd25lckFkZHIpIHB1YmxpYyB7CiAgICAgICAgdG9rZW5SZXdhcmQgPSB0b2tlbjsKICAgICAgICB3YWxsZXQgPSB3YWxsZXRBZGRyOwogICAgICAgIHRva2VuT3duZXIgPSB0b2tlbk93bmVyQWRkcjsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gd2FsbGV0KTsKICAgICAgICBleGNoYW5nZShtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBleGNoYW5nZShhZGRyZXNzIHJlY2VpdmVyKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgdWludDI1NiBwcmljZSA9IGdldFJhdGUoKTsKICAgICAgICB1aW50MjU2IG51bVRva2VucyA9IGFtb3VudC5tdWwocHJpY2UpOwogICAgICAgIAogICAgICAgIGJvb2wgaXNQcmVJQ08gPSAobm93IDw9IHByZUlDTy5kYXRlKTsKICAgICAgICBib29sIGlzSUNPID0gKG5vdyA+PSBpY29TdGFydHMuZGF0ZSAmJiBub3cgPD0gaWNvRW5kcy5kYXRlKTsKICAgICAgICAKICAgICAgICByZXF1aXJlKGlzUHJlSUNPIHx8IGlzSUNPKTsKICAgICAgICByZXF1aXJlKG51bVRva2VucyA+IDUwMCk7CiAgICAgICAgCiAgICAgICAgaWYgKGlzUHJlSUNPKSB7CiAgICAgICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUVuZGVkICYmIHByZV90b2tlbnNTb2xkLmFkZChudW1Ub2tlbnMpIDw9IHByZUlDT0xpbWl0KTsKICAgICAgICAgICAgcmVxdWlyZShudW1Ub2tlbnMgPD0gNTAwMDAwMGUxOCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChpc0lDTykgewogICAgICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVFbmRlZCAmJiB0b2tlbnNTb2xkLmFkZChudW1Ub2tlbnMpIDw9IGljb0xpbWl0KTsKICAgICAgICB9CgogICAgICAgIHdhbGxldC50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIGJhbGFuY2VzW3JlY2VpdmVyXSA9IGJhbGFuY2VzW3JlY2VpdmVyXS5hZGQoYW1vdW50KTsKICAgICAgICBhbW91bnRSYWlzZWQgPSBhbW91bnRSYWlzZWQuYWRkKGFtb3VudCk7CgogICAgICAgIGlmIChpc1ByZUlDTykKICAgICAgICAgICAgcHJlX3Rva2Vuc1NvbGQgPSBwcmVfdG9rZW5zU29sZC5hZGQobnVtVG9rZW5zKTsKICAgICAgICBpZiAoaXNJQ08pCiAgICAgICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZChudW1Ub2tlbnMpOwogICAgICAgIAogICAgICAgIGFzc2VydCh0b2tlblJld2FyZC50cmFuc2ZlckZyb20odG9rZW5Pd25lciwgcmVjZWl2ZXIsIG51bVRva2VucykpOwogICAgICAgIGVtaXQgRnVuZFRyYW5zZmVyKHJlY2VpdmVyLCBhbW91bnQsIHRydWUsIGFtb3VudFJhaXNlZCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmF0ZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAobm93IDw9IHByZUlDTy5kYXRlKQogICAgICAgICAgICByZXR1cm4gcHJlSUNPLnJhdGU7CiAgICAgICAgICAgIAogICAgICAgIGlmIChub3cgPCBpY29FbmRPZlN0YWdlQS5kYXRlKQogICAgICAgICAgICByZXR1cm4gaWNvU3RhcnRzLnJhdGU7CiAgICAgICAgICAgIAogICAgICAgIGlmIChub3cgPCBpY29FbmRPZlN0YWdlQi5kYXRlKQogICAgICAgICAgICByZXR1cm4gaWNvRW5kT2ZTdGFnZUEucmF0ZTsKICAgICAgICAgICAgCiAgICAgICAgaWYgKG5vdyA8IGljb0VuZHMuZGF0ZSkKICAgICAgICAgICAgcmV0dXJuIGljb0VuZE9mU3RhZ2VCLnJhdGU7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGljb0VuZHMucmF0ZTsKICAgIH0KICAgIAogICAgLy8gQ2hlY2tzIGlmIHRoZSBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCBhbmQgZW5kcyB0aGUgY2FtcGFpZ24KICAgIGZ1bmN0aW9uIGNoZWNrR29hbFJlYWNoZWQoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobm93ID49IGljb0VuZHMuZGF0ZSk7CiAgICAgICAgaWYgKHByZV90b2tlbnNTb2xkLmFkZCh0b2tlbnNTb2xkKSA+PSBmdW5kaW5nR29hbCl7CiAgICAgICAgICAgIHRva2VuUmV3YXJkLmJ1cm4oKTsgLy8gQnVybiByZW1haW5pbmcgdG9rZW5zIGJ1dCB0aGUgcmVzZXJ2ZWQgb25lcwogICAgICAgICAgICBlbWl0IEdvYWxSZWFjaGVkKHRva2VuT3duZXIsIGFtb3VudFJhaXNlZCk7CiAgICAgICAgfQogICAgICAgIGNyb3dkc2FsZUVuZGVkID0gdHJ1ZTsKICAgIH0KICAgIAogICAgLy8gQWxsb3dzIHRoZSBmdW5kZXJzIHRvIHdpdGhkcmF3IHRoZWlyIGZ1bmRzIGlmIHRoZSBnb2FsIGhhcyBub3QgYmVlbiByZWFjaGVkLgogICAgLy8gT25seSB3b3JrcyBhZnRlciBmdW5kcyBoYXZlIGJlZW4gcmV0dXJuZWQgZnJvbSB0aGUgd2FsbGV0LgogICAgZnVuY3Rpb24gc2FmZVdpdGhkcmF3YWwoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobm93ID49IGljb0VuZHMuZGF0ZSk7CiAgICAgICAgdWludCBhbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICBpZiAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlID49IGFtb3VudCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgICAgICAgICBlbWl0IEZ1bmRUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGZhbHNlLCBhbW91bnRSYWlzZWQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9'.
	

]
