Class {
	#name : #SRTbb0292ddd8101517640224c40edb67233ae72dd6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb0292ddd8101517640224c40edb67233ae72dd6 >> base64 [
	^ ''.
	

]
