Class {
	#name : #SRTfc88a9f06f5fe0de2dac95c5fada7a8b3b3d610d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc88a9f06f5fe0de2dac95c5fada7a8b3b3d610d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgkvLy8vLy8gQ1JZUFRPIFNVUlBSSVNFCgkvLy8vLy8gaHR0cHM6Ly9jcnlwdG9zdXJwcmlzZS5tZQoJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgkKY29udHJhY3QgQ3J5cHRvU3VycHJpc2UKewogICAgdXNpbmcgU2V0TGlicmFyeSBmb3IgU2V0TGlicmFyeS5TZXQ7CiAgICAKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vLy8vIENPTlNUQU5UUwogICAgCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBCQUdfVFJBTlNGRVJfRkVFID0gMC4wNSBldGhlcjsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIEJBR19UUkFOU0ZFUl9NSU5JTVVNX0FNT1VOVF9PRl9CVVlTID0gNDsKICAgIAogICAgCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vLy8vLyBTVEFURSBWQVJJQUJMRVMKICAgIAogICAgc3RydWN0IEJhZ1R5cGUKICAgIHsKICAgICAgICAvLyBDb25zdGFudHMKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICAKICAgICAgICB1aW50MjU2IHN0YXJ0UHJpY2U7CiAgICAgICAgdWludDI1NiBwcmljZU11bHRpcGxpZXJQZXJCdXk7IC8vIEZvciBleGFtcGxlLCAyIDAwMCAwMDAgbWVhbnMgMTAwJSBpbmNyZWFzZS4gKDEwMCUgPSBkb3VibGluZyBldmVyeSBidXkpCiAgICAgICAgCiAgICAgICAgdWludDI1NiBzdGFydENvbW1pc3Npb247IC8vIDAgdG8gMSAwMDAgMDAwLCBmb3IgZXhhbXBsZSAxMDAgMDAwIG1lYW5zIDEwJQogICAgICAgIHVpbnQyNTYgY29tbWlzc2lvbkluY3JlbWVudFBlckJ1eTsKICAgICAgICB1aW50MjU2IG1heGltdW1Db21taXNzaW9uOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgc3VwcGx5SGFyZENhcDsKICAgICAgICAKICAgICAgICAvLyBWYXJpYWJsZXMKICAgICAgICB1aW50MjU2IGN1cnJlbnRTdXBwbHk7CiAgICB9CiAgICAKICAgIHN0cnVjdCBCYWcKICAgIHsKICAgICAgICAvLyBDb25zdGFudHMKICAgICAgICB1aW50MjU2IGJhZ1R5cGVJbmRleDsKICAgICAgICAKICAgICAgICAvLyBWYXJpYWJsZXMKICAgICAgICB1aW50MjU2IGFtb3VudE9mQnV5czsKICAgICAgICBhZGRyZXNzIG93bmVyOwogICAgICAgIHVpbnQyNTYgY29tbWlzc2lvbjsgLy8gMCB0byAxIDAwMCAwMDAsIGZvciBleGFtcGxlIDEwMCAwMDAgbWVhbnMgMTAlCiAgICAgICAgdWludDI1NiBwcmljZTsKICAgICAgICAKICAgICAgICB1aW50MjU2IGF2YWlsYWJsZVRpbWVzdGFtcDsKICAgIH0KICAgIAogICAgLy8gVmFyaWFibGUgdGhhdCByZW1lbWJlcnMgdGhlIGN1cnJlbnQgb3duZXIKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgQmFnVHlwZVtdIHB1YmxpYyBiYWdUeXBlczsKICAgIEJhZ1tdIHB1YmxpYyBiYWdzOwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGFkZHJlc3NUb1RvdGFsRXRoZXJTcGVudDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYWRkcmVzc1RvVG90YWxQdXJjaGFzZXNNYWRlOwogICAgbWFwcGluZyhhZGRyZXNzID0+IFNldExpYnJhcnkuU2V0KSBwcml2YXRlIG93bmVyVG9CYWdJbmRpY2VzOwogICAgYWRkcmVzc1tdIHB1YmxpYyBhbGxQYXJ0aWNpcGFudHM7CiAgICAKICAgIAogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLy8vLy8gUExBWUVSIEZVTkNUSU9OUwogICAgCiAgICBmdW5jdGlvbiBidXlCYWcodWludDI1NiBfYmFnSW5kZXgpIGV4dGVybmFsIHBheWFibGUKICAgIHsKICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgYmFnIGV4aXN0cwogICAgICAgIHJlcXVpcmUoX2JhZ0luZGV4IDwgYmFncy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIC8vIFJlZmVyZW5jZSB0aGUgYmFnIGRhdGEgYW5kIGJhZyB0eXBlIGRhdGEKICAgICAgICBCYWcgc3RvcmFnZSBiYWcgPSBiYWdzW19iYWdJbmRleF07CiAgICAgICAgQmFnVHlwZSBzdG9yYWdlIGJhZ1R5cGUgPSBiYWdUeXBlc1tiYWcuYmFnVHlwZUluZGV4XTsKICAgICAgICAKICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGJhZyBpcyBhbHJlYWR5IGF2YWlsYWJsZQogICAgICAgIHJlcXVpcmUobm93ID49IGJhZy5hdmFpbGFibGVUaW1lc3RhbXApOwogICAgICAgIAogICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY2FsbGVyIHBheWVkIGF0IGxlYXN0IHRoZSBjdXJyZW50IHByaWNlCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gYmFnLnByaWNlKTsKICAgICAgICB1aW50MjU2IHJlZnVuZCA9IG1zZy52YWx1ZSAtIGJhZy5wcmljZTsKICAgICAgICAKICAgICAgICAvLyBSZW1lbWJlciB3aG8gdGhlIHByZXZpb3VzIG93bmVyIHdhcwogICAgICAgIGFkZHJlc3MgcHJldmlvdXNPd25lciA9IGJhZy5vd25lcjsKICAgICAgICAKICAgICAgICAvLyBTZXQgdGhlIGJ1eWVyIGFzIHRoZSBuZXcgb3duZXIKICAgICAgICBiYWcub3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIAogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcHJldmlvdXMgYW5kIG5leHQgcHJpY2UKICAgICAgICB1aW50MjU2IHByZXZpb3VzUHJpY2UgPSBiYWcucHJpY2UgKiAxMDAwMDAwIC8gYmFnVHlwZS5wcmljZU11bHRpcGxpZXJQZXJCdXk7CiAgICAgICAgdWludDI1NiBuZXh0UHJpY2UgPSBiYWcucHJpY2UgKiBiYWdUeXBlLnByaWNlTXVsdGlwbGllclBlckJ1eSAvIDEwMDAwMDA7CiAgICAgICAgCiAgICAgICAgLy8gQ2FsY3VsYXRlIGhvdyBtdWNoIHRoZSBwcmV2aW91cyBvd25lciBzaG91bGQgZ2V0OgogICAgICAgIHVpbnQyNTYgcHJldmlvdXNPd25lclJld2FyZDsKICAgICAgICAKICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBidXk6IHRoZSBmdWxsIGN1cnJlbnQgcHJpY2UKICAgICAgICBpZiAoYmFnLmFtb3VudE9mQnV5cyA9PSAwKQogICAgICAgIHsKICAgICAgICAgICAgcHJldmlvdXNPd25lclJld2FyZCA9IGJhZy5wcmljZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gb3RoZXJ3aXNlOiBwcmV2aW91cyBwcmljZSArIHRoZSBjb21taXNzaW9uCiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgcHJldmlvdXNPd25lclJld2FyZCA9IGJhZy5wcmljZSAqIGJhZy5jb21taXNzaW9uIC8gMTAwMDAwMDsKICAgICAgICAgICAgLy9wcmV2aW91c093bmVyUmV3YXJkID0gcHJldmlvdXNQcmljZSArIHByZXZpb3VzUHJpY2UgKiBiYWcuY29tbWlzc2lvbiAvIDEwMDAwMDA7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgbmV3IHByaWNlIG9mIHRoZSBiYWcKICAgICAgICBiYWcucHJpY2UgPSBuZXh0UHJpY2U7CiAgICAgICAgCiAgICAgICAgLy8gSW5jcmVtZW50IHRoZSBhbW91bnRPZkJ1eXMgY291bnRlcgogICAgICAgIGJhZy5hbW91bnRPZkJ1eXMrKzsKICAgICAgICAKICAgICAgICAvLyBJZiB0aGlzIGlzIE5PVCB0aGUgZmlyc3QgYnV5IG9mIHRoaXMgYmFnOgogICAgICAgIGlmIChiYWcuYW1vdW50T2ZCdXlzID4gMSkKICAgICAgICB7CiAgICAgICAgICAgIC8vIEluY3JlYXNlIHRoZSBjb21taXNzaW9uIHVwIHRvIHRoZSBtYXhpbXVtCiAgICAgICAgICAgIGlmIChiYWcuY29tbWlzc2lvbiA8IGJhZ1R5cGUubWF4aW11bUNvbW1pc3Npb24pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHVpbnQyNTYgbmV3Q29tbWlzc2lvbiA9IGJhZy5jb21taXNzaW9uICsgYmFnVHlwZS5jb21taXNzaW9uSW5jcmVtZW50UGVyQnV5OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAobmV3Q29tbWlzc2lvbiA+PSBiYWdUeXBlLm1heGltdW1Db21taXNzaW9uKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGJhZy5jb21taXNzaW9uID0gYmFnVHlwZS5tYXhpbXVtQ29tbWlzc2lvbjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYmFnLmNvbW1pc3Npb24gPSBuZXdDb21taXNzaW9uOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFJlY29yZCBzdGF0aXN0aWNzCiAgICAgICAgaWYgKGFkZHJlc3NUb1RvdGFsUHVyY2hhc2VzTWFkZVttc2cuc2VuZGVyXSA9PSAwKQogICAgICAgIHsKICAgICAgICAgICAgYWxsUGFydGljaXBhbnRzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgfQogICAgICAgIGFkZHJlc3NUb1RvdGFsRXRoZXJTcGVudFttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7CiAgICAgICAgYWRkcmVzc1RvVG90YWxQdXJjaGFzZXNNYWRlW21zZy5zZW5kZXJdKys7CiAgICAgICAgCiAgICAgICAgLy8gVHJhbnNmZXIgdGhlIHJld2FyZCB0byB0aGUgcHJldmlvdXMgb3duZXIuIElmIHRoZSBwcmV2aW91cyBvd25lciBpcwogICAgICAgIC8vIHRoZSBDcnlwdG9TdXJwcmlzZSBzbWFydCBjb250cmFjdCBpdHNlbGYsIHdlIGRvbid0IG5lZWQgdG8gcGVyZm9ybSBhbnkKICAgICAgICAvLyB0cmFuc2ZlciBiZWNhdXNlIHRoZSBjb250cmFjdCBhbHJlYWR5IGhhcyBpdC4KICAgICAgICBpZiAocHJldmlvdXNPd25lciAhPSBhZGRyZXNzKHRoaXMpKQogICAgICAgIHsKICAgICAgICAgICAgcHJldmlvdXNPd25lci50cmFuc2ZlcihwcmV2aW91c093bmVyUmV3YXJkKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKHJlZnVuZCA+IDApCiAgICAgICAgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlZnVuZCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckJhZyhhZGRyZXNzIF9uZXdPd25lciwgdWludDI1NiBfYmFnSW5kZXgpIHB1YmxpYyBwYXlhYmxlCiAgICB7CiAgICAgICAgLy8gUmVxdWlyZSBwYXltZW50CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gQkFHX1RSQU5TRkVSX0ZFRSk7CiAgICAgICAgCiAgICAgICAgLy8gUGVyZm9ybSB0aGUgdHJhbnNmZXIKICAgICAgICBfdHJhbnNmZXJCYWcobXNnLnNlbmRlciwgX25ld093bmVyLCBfYmFnSW5kZXgpOwogICAgfQogICAgCiAgICAKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vLy8vIE9XTkVSIEZVTkNUSU9OUwogICAgCiAgICAvLyBDb25zdHJ1Y3RvciBmdW5jdGlvbgogICAgZnVuY3Rpb24gQ3J5cHRvU3VycHJpc2UoKSBwdWJsaWMKICAgIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgCiAgICAgICAgYmFnVHlwZXMucHVzaChCYWdUeXBlKHsKICAgICAgICAgICAgbmFtZTogIkJsdWUiLAogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRQcmljZTogMC4wNCBldGhlciwKICAgICAgICAgICAgcHJpY2VNdWx0aXBsaWVyUGVyQnV5OiAxMzAwMDAwLCAvLyAxMzAlCiAgICAgICAgICAgIAogICAgICAgICAgICBzdGFydENvbW1pc3Npb246IDg1MDAwMCwgLy8gODUlCiAgICAgICAgICAgIGNvbW1pc3Npb25JbmNyZW1lbnRQZXJCdXk6IDUwMDAsIC8vIDAuNSAlLXBvaW50CiAgICAgICAgICAgIG1heGltdW1Db21taXNzaW9uOiA5MDAwMDAsIC8vIDkwJQogICAgICAgICAgICAKICAgICAgICAgICAgc3VwcGx5SGFyZENhcDogNjAwLAogICAgICAgICAgICAKICAgICAgICAgICAgY3VycmVudFN1cHBseTogMAogICAgICAgIH0pKTsKCQliYWdUeXBlcy5wdXNoKEJhZ1R5cGUoewogICAgICAgICAgICBuYW1lOiAiUmVkIiwKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0UHJpY2U6IDAuMDMgZXRoZXIsCiAgICAgICAgICAgIHByaWNlTXVsdGlwbGllclBlckJ1eTogMTMzMDAwMCwgLy8gMTMzJQogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRDb21taXNzaW9uOiA4NzAwMDAsIC8vIDg3JQogICAgICAgICAgICBjb21taXNzaW9uSW5jcmVtZW50UGVyQnV5OiA1MDAwLCAvLyAwLjUgJS1wb2ludAogICAgICAgICAgICBtYXhpbXVtQ29tbWlzc2lvbjogOTIwMDAwLCAvLyA5MiUKICAgICAgICAgICAgCiAgICAgICAgICAgIHN1cHBseUhhcmRDYXA6IDMwMCwKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnJlbnRTdXBwbHk6IDAKICAgICAgICB9KSk7CgkJYmFnVHlwZXMucHVzaChCYWdUeXBlKHsKICAgICAgICAgICAgbmFtZTogIkdyZWVuIiwKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0UHJpY2U6IDAuMDIgZXRoZXIsCiAgICAgICAgICAgIHByaWNlTXVsdGlwbGllclBlckJ1eTogMTM2MDAwMCwgLy8gMTM2JQogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRDb21taXNzaW9uOiA4OTAwMDAsIC8vIDg5JQogICAgICAgICAgICBjb21taXNzaW9uSW5jcmVtZW50UGVyQnV5OiA1MDAwLCAvLyAwLjUgJS1wb2ludAogICAgICAgICAgICBtYXhpbXVtQ29tbWlzc2lvbjogOTQwMDAwLCAvLyA5NCUKICAgICAgICAgICAgCiAgICAgICAgICAgIHN1cHBseUhhcmRDYXA6IDE1MCwKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnJlbnRTdXBwbHk6IDAKICAgICAgICB9KSk7CgkJYmFnVHlwZXMucHVzaChCYWdUeXBlKHsKICAgICAgICAgICAgbmFtZTogIkJsYWNrIiwKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0UHJpY2U6IDAuMSBldGhlciwKICAgICAgICAgICAgcHJpY2VNdWx0aXBsaWVyUGVyQnV5OiAxNDUwMDAwLCAvLyAxNDUlCiAgICAgICAgICAgIAogICAgICAgICAgICBzdGFydENvbW1pc3Npb246IDkyMDAwMCwgLy8gOTIlCiAgICAgICAgICAgIGNvbW1pc3Npb25JbmNyZW1lbnRQZXJCdXk6IDEwMDAwLCAvLyAxICUtcG9pbnQKICAgICAgICAgICAgbWF4aW11bUNvbW1pc3Npb246IDk2MDAwMCwgLy8gOTYlCiAgICAgICAgICAgIAogICAgICAgICAgICBzdXBwbHlIYXJkQ2FwOiA1MCwKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnJlbnRTdXBwbHk6IDAKICAgICAgICB9KSk7CgkJYmFnVHlwZXMucHVzaChCYWdUeXBlKHsKICAgICAgICAgICAgbmFtZTogIlBpbmsiLAogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRQcmljZTogMSBldGhlciwKICAgICAgICAgICAgcHJpY2VNdWx0aXBsaWVyUGVyQnV5OiAxNTAwMDAwLCAvLyAxNTAlCiAgICAgICAgICAgIAogICAgICAgICAgICBzdGFydENvbW1pc3Npb246IDk0MDAwMCwgLy8gOTQlCiAgICAgICAgICAgIGNvbW1pc3Npb25JbmNyZW1lbnRQZXJCdXk6IDEwMDAwLCAvLyAxICUtcG9pbnQKICAgICAgICAgICAgbWF4aW11bUNvbW1pc3Npb246IDk4MDAwMCwgLy8gOTglCiAgICAgICAgICAgIAogICAgICAgICAgICBzdXBwbHlIYXJkQ2FwOiAxMCwKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnJlbnRTdXBwbHk6IDAKICAgICAgICB9KSk7CgkJYmFnVHlwZXMucHVzaChCYWdUeXBlKHsKICAgICAgICAgICAgbmFtZTogIldoaXRlIiwKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0UHJpY2U6IDEwIGV0aGVyLAogICAgICAgICAgICBwcmljZU11bHRpcGxpZXJQZXJCdXk6IDE1MDAwMDAsIC8vIDE1MCUKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0Q29tbWlzc2lvbjogOTcwMDAwLCAvLyA5NyUKICAgICAgICAgICAgY29tbWlzc2lvbkluY3JlbWVudFBlckJ1eTogMTAwMDAsIC8vIDEgJS1wb2ludAogICAgICAgICAgICBtYXhpbXVtQ29tbWlzc2lvbjogOTkwMDAwLCAvLyA5OSUKICAgICAgICAgICAgCiAgICAgICAgICAgIHN1cHBseUhhcmRDYXA6IDEsCiAgICAgICAgICAgIAogICAgICAgICAgICBjdXJyZW50U3VwcGx5OiAwCiAgICAgICAgfSkpOwogICAgfQogICAgCiAgICAvLyBGdW5jdGlvbiB0aGF0IGFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBvd25lcnNoaXAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9CiAgICAKICAgIC8vIE9ubHkgdGhlIG93bmVyIGNhbiBkZXBvc2l0IEVUSCBieSBzZW5kaW5nIGl0IGRpcmVjdGx5IHRvIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICB9CiAgICAKICAgIC8vIEZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHdpdGhkcmF3IGFueSBhbW91bnQKICAgIC8vIG9mIEVUSCBmcm9tIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcih1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIG93bmVyLnRyYW5zZmVyKGFtb3VudCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZEJhZyh1aW50MjU2IF9iYWdUeXBlSW5kZXgpIGV4dGVybmFsCiAgICB7CiAgICAgICAgYWRkQmFnQW5kR2lmdChfYmFnVHlwZUluZGV4LCBhZGRyZXNzKHRoaXMpKTsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZEJhZ0RlbGF5ZWQodWludDI1NiBfYmFnVHlwZUluZGV4LCB1aW50MjU2IF9kZWxheVNlY29uZHMpIGV4dGVybmFsCiAgICB7CiAgICAgICAgYWRkQmFnQW5kR2lmdEF0VGltZShfYmFnVHlwZUluZGV4LCBhZGRyZXNzKHRoaXMpLCBub3cgKyBfZGVsYXlTZWNvbmRzKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkQmFnQW5kR2lmdCh1aW50MjU2IF9iYWdUeXBlSW5kZXgsIGFkZHJlc3MgX2ZpcnN0T3duZXIpIHB1YmxpYwogICAgewogICAgICAgIGFkZEJhZ0FuZEdpZnRBdFRpbWUoX2JhZ1R5cGVJbmRleCwgX2ZpcnN0T3duZXIsIG5vdyk7CiAgICB9CiAgICBmdW5jdGlvbiBhZGRCYWdBbmRHaWZ0QXRUaW1lKHVpbnQyNTYgX2JhZ1R5cGVJbmRleCwgYWRkcmVzcyBfZmlyc3RPd25lciwgdWludDI1NiBfdGltZXN0YW1wKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIAogICAgICAgIHJlcXVpcmUoX2JhZ1R5cGVJbmRleCA8IGJhZ1R5cGVzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgQmFnVHlwZSBzdG9yYWdlIGJhZ1R5cGUgPSBiYWdUeXBlc1tfYmFnVHlwZUluZGV4XTsKICAgICAgICAKICAgICAgICByZXF1aXJlKGJhZ1R5cGUuY3VycmVudFN1cHBseSA8IGJhZ1R5cGUuc3VwcGx5SGFyZENhcCk7CiAgICAgICAgCiAgICAgICAgYmFncy5wdXNoKEJhZyh7CiAgICAgICAgICAgIGJhZ1R5cGVJbmRleDogX2JhZ1R5cGVJbmRleCwKICAgICAgICAgICAgCiAgICAgICAgICAgIGFtb3VudE9mQnV5czogMCwKICAgICAgICAgICAgb3duZXI6IF9maXJzdE93bmVyLAogICAgICAgICAgICBjb21taXNzaW9uOiBiYWdUeXBlLnN0YXJ0Q29tbWlzc2lvbiwKICAgICAgICAgICAgcHJpY2U6IGJhZ1R5cGUuc3RhcnRQcmljZSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGF2YWlsYWJsZVRpbWVzdGFtcDogX3RpbWVzdGFtcAogICAgICAgIH0pKTsKICAgICAgICAKICAgICAgICBiYWdUeXBlLmN1cnJlbnRTdXBwbHkrKzsKICAgIH0KICAgIAoKICAgIAogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLy8vLy8gSU5URVJOQUwgRlVOQ1RJT05TCiAgICAKICAgIGZ1bmN0aW9uIF90cmFuc2ZlckJhZyhhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYmFnSW5kZXgpIGludGVybmFsCiAgICB7CiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGJhZyBleGlzdHMKICAgICAgICByZXF1aXJlKF9iYWdJbmRleCA8IGJhZ3MubGVuZ3RoKTsKICAgICAgICAKICAgICAgICAvLyBCYWcgbWF5IG5vdCBiZSB0cmFuc2ZlcnJlZCBiZWZvcmUgaXQgaGFzIGJlZW4gYm91Z2h0IHggdGltZXMKICAgICAgICByZXF1aXJlKGJhZ3NbX2JhZ0luZGV4XS5hbW91bnRPZkJ1eXMgPj0gQkFHX1RSQU5TRkVSX01JTklNVU1fQU1PVU5UX09GX0JVWVMpOwogICAgICAgIAogICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBzZW5kZXIgaXMgdGhlIGN1cnJlbnQgb3duZXIgb2YgdGhlIGJhZwogICAgICAgIHJlcXVpcmUoYmFnc1tfYmFnSW5kZXhdLm93bmVyID09IF9mcm9tKTsKICAgICAgICAKICAgICAgICAvLyBTZXQgdGhlIG5ldyBvd25lcgogICAgICAgIGJhZ3NbX2JhZ0luZGV4XS5vd25lciA9IF90bzsKICAgICAgICBvd25lclRvQmFnSW5kaWNlc1tfZnJvbV0ucmVtb3ZlKF9iYWdJbmRleCk7CiAgICAgICAgb3duZXJUb0JhZ0luZGljZXNbX3RvXS5hZGQoX2JhZ0luZGV4KTsKICAgICAgICAKICAgICAgICAvLyBUcmlnZ2VyIGJsb2NrY2hhaW4gZXZlbnQKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYmFnSW5kZXgpOwogICAgfQogICAgCiAgICAKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vLy8vIFZJRVcgRlVOQ1RJT05TIEZPUiBVU0VSIElOVEVSRkFDRQogICAgCiAgICBmdW5jdGlvbiBhbW91bnRPZkJhZ3MoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIGJhZ3MubGVuZ3RoOwogICAgfQogICAgZnVuY3Rpb24gYW1vdW50T2ZCYWdUeXBlcygpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYmFnVHlwZXMubGVuZ3RoOwogICAgfQogICAgZnVuY3Rpb24gYW1vdW50T2ZQYXJ0aWNpcGFudHMoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIGFsbFBhcnRpY2lwYW50cy5sZW5ndGg7CiAgICB9CiAgICAKICAgIAogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLy8vLy8gRVJDNzIxIE5PTiBGVU5HSUJMRSBUT0tFTiBJTlRFUkZBQ0UKICAgIAogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF90b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwogICAgCiAgICBmdW5jdGlvbiBuYW1lKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuICJCYWdzIjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc3ltYm9sKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuICJCQUciOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYmFncy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBvd25lclRvQmFnSW5kaWNlc1tfb3duZXJdLnNpemUoKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF9iYWdJbmRleCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzKQogICAgewogICAgICAgIHJlcXVpcmUoX2JhZ0luZGV4IDwgYmFncy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIHJldHVybiBiYWdzW19iYWdJbmRleF0ub3duZXI7CiAgICB9CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcodWludDI1NiA9PiBib29sKSkpIHByaXZhdGUgb3duZXJUb0FkZHJlc3NUb0JhZ0luZGV4QWxsb3dlZDsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2JhZ0luZGV4KSBleHRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUoX2JhZ0luZGV4IDwgYmFncy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBiYWdzW19iYWdJbmRleF0ub3duZXIpOwogICAgICAgIAogICAgICAgIG93bmVyVG9BZGRyZXNzVG9CYWdJbmRleEFsbG93ZWRbbXNnLnNlbmRlcl1bX3RvXVtfYmFnSW5kZXhdID0gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF9iYWdJbmRleCkgZXh0ZXJuYWwKICAgIHsKICAgICAgICByZXF1aXJlKF9iYWdJbmRleCA8IGJhZ3MubGVuZ3RoKTsKICAgICAgICAKICAgICAgICBhZGRyZXNzIHByZXZpb3VzT3duZXIgPSBiYWdzW19iYWdJbmRleF0ub3duZXI7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShvd25lclRvQWRkcmVzc1RvQmFnSW5kZXhBbGxvd2VkW3ByZXZpb3VzT3duZXJdW21zZy5zZW5kZXJdW19iYWdJbmRleF0gPT0gdHJ1ZSk7CiAgICAgICAgCiAgICAgICAgb3duZXJUb0FkZHJlc3NUb0JhZ0luZGV4QWxsb3dlZFtwcmV2aW91c093bmVyXVttc2cuc2VuZGVyXVtfYmFnSW5kZXhdID0gZmFsc2U7CiAgICAgICAgCiAgICAgICAgX3RyYW5zZmVyQmFnKHByZXZpb3VzT3duZXIsIG1zZy5zZW5kZXIsIF9iYWdJbmRleCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9iYWdJbmRleCkgZXh0ZXJuYWwKICAgIHsKICAgICAgICB0cmFuc2ZlckJhZyhfdG8sIF9iYWdJbmRleCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRva2VuT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmVxdWlyZShfaW5kZXggPCBvd25lclRvQmFnSW5kaWNlc1tfb3duZXJdLnNpemUoKSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIG93bmVyVG9CYWdJbmRpY2VzW19vd25lcl0udmFsdWVzW19pbmRleF07CiAgICB9Cn0KIApsaWJyYXJ5IFNldExpYnJhcnkKewogICAgc3RydWN0IEFycmF5SW5kZXhBbmRFeGlzdHNGbGFnCiAgICB7CiAgICAgICAgdWludDI1NiBpbmRleDsKICAgICAgICBib29sIGV4aXN0czsKICAgIH0KICAgIHN0cnVjdCBTZXQKICAgIHsKICAgICAgICBtYXBwaW5nKHVpbnQyNTYgPT4gQXJyYXlJbmRleEFuZEV4aXN0c0ZsYWcpIHZhbHVlc01hcHBpbmc7CiAgICAgICAgdWludDI1NltdIHZhbHVlczsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZChTZXQgc3RvcmFnZSBzZWxmLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBhZGRlZCkKICAgIHsKICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYWxyZWFkeSBpbiB0aGUgc2V0LCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nCiAgICAgICAgaWYgKHNlbGYudmFsdWVzTWFwcGluZ1t2YWx1ZV0uZXhpc3RzID09IHRydWUpIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICAvLyBSZW1lbWJlciB0aGF0IHRoZSB2YWx1ZSBpcyBpbiB0aGUgc2V0LCBhbmQgcmVtZW1iZXIgdGhlIHZhbHVlJ3MgYXJyYXkgaW5kZXgKICAgICAgICBzZWxmLnZhbHVlc01hcHBpbmdbdmFsdWVdID0gQXJyYXlJbmRleEFuZEV4aXN0c0ZsYWcoe2luZGV4OiBzZWxmLnZhbHVlcy5sZW5ndGgsIGV4aXN0czogdHJ1ZX0pOwogICAgICAgIAogICAgICAgIC8vIEFkZCB0aGUgdmFsdWUgdG8gdGhlIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMKICAgICAgICBzZWxmLnZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGNvbnRhaW5zKFNldCBzdG9yYWdlIHNlbGYsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wgY29udGFpbmVkKQogICAgewogICAgICAgIHJldHVybiBzZWxmLnZhbHVlc01hcHBpbmdbdmFsdWVdLmV4aXN0czsKICAgIH0KICAgIGZ1bmN0aW9uIHJlbW92ZShTZXQgc3RvcmFnZSBzZWxmLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCByZW1vdmVkKQogICAgewogICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBub3QgaW4gdGhlIHNldCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZwogICAgICAgIGlmIChzZWxmLnZhbHVlc01hcHBpbmdbdmFsdWVdLmV4aXN0cyA9PSBmYWxzZSkgcmV0dXJuIGZhbHNlOwogICAgICAgIAogICAgICAgIC8vIFJlbWVtYmVyIHRoYXQgdGhlIHZhbHVlIGlzIG5vdCBpbiB0aGUgc2V0CiAgICAgICAgc2VsZi52YWx1ZXNNYXBwaW5nW3ZhbHVlXS5leGlzdHMgPSBmYWxzZTsKICAgICAgICAKICAgICAgICAvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgdGhlIHZhbHVlIGZyb20gdGhlIGFycmF5LiBUbyBwcmV2ZW50IGxlYWtpbmcKICAgICAgICAvLyBzdG9yYWdlIHNwYWNlLCB3ZSBtb3ZlIHRoZSBsYXN0IHZhbHVlIGluIHRoZSBhcnJheSBpbnRvIHRoZSBzcG90IHRoYXQKICAgICAgICAvLyBjb250YWlucyB0aGUgZWxlbWVudCB3ZSdyZSByZW1vdmluZy4KICAgICAgICBpZiAoc2VsZi52YWx1ZXNNYXBwaW5nW3ZhbHVlXS5pbmRleCA8IHNlbGYudmFsdWVzLmxlbmd0aC0xKQogICAgICAgIHsKICAgICAgICAgICAgdWludDI1NiB2YWx1ZVRvTW92ZSA9IHNlbGYudmFsdWVzW3NlbGYudmFsdWVzLmxlbmd0aC0xXTsKICAgICAgICAgICAgdWludDI1NiBpbmRleFRvTW92ZUl0VG8gPSBzZWxmLnZhbHVlc01hcHBpbmdbdmFsdWVdLmluZGV4OwogICAgICAgICAgICBzZWxmLnZhbHVlc1tpbmRleFRvTW92ZUl0VG9dID0gdmFsdWVUb01vdmU7CiAgICAgICAgICAgIHNlbGYudmFsdWVzTWFwcGluZ1t2YWx1ZVRvTW92ZV0uaW5kZXggPSBpbmRleFRvTW92ZUl0VG87CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIE5vdyB3ZSByZW1vdmUgdGhlIGxhc3QgZWxlbWVudCBmcm9tIHRoZSBhcnJheSwgYmVjYXVzZSB3ZSBqdXN0IGR1cGxpY2F0ZWQgaXQuCiAgICAgICAgLy8gV2UgZG9uJ3QgZnJlZSB0aGUgc3RvcmFnZSBhbGxvY2F0aW9uIG9mIHRoZSByZW1vdmVkIGxhc3QgZWxlbWVudCwKICAgICAgICAvLyBiZWNhdXNlIGl0IHdpbGwgbW9zdCBsaWtlbHkgYmUgdXNlZCBhZ2FpbiBieSBhIGNhbGwgdG8gYWRkKCkuCiAgICAgICAgLy8gRGUtYWxsb2NhdGluZyBhbmQgcmUtYWxsb2NhdGluZyBzdG9yYWdlIHNwYWNlIGNvc3RzIG1vcmUgZ2FzIHRoYW4KICAgICAgICAvLyBqdXN0IGtlZXBpbmcgaXQgYWxsb2NhdGVkIGFuZCB1bnVzZWQuCiAgICAgICAgCiAgICAgICAgLy8gVW5jb21tZW50IHRoaXMgbGluZSB0byBzYXZlIGdhcyBpZiB5b3VyIHVzZSBjYXNlIGRvZXMgbm90IGNhbGwgYWRkKCkgYWZ0ZXIgcmVtb3ZlKCk6CiAgICAgICAgLy8gZGVsZXRlIHNlbGYudmFsdWVzW3NlbGYudmFsdWVzLmxlbmd0aC0xXTsKICAgICAgICBzZWxmLnZhbHVlcy5sZW5ndGgtLTsKICAgICAgICAKICAgICAgICAvLyBXZSBkbyBmcmVlIHRoZSBzdG9yYWdlIGFsbG9jYXRpb24gaW4gdGhlIG1hcHBpbmcsIGJlY2F1c2UgaXQgaXMKICAgICAgICAvLyBsZXNzIGxpa2VseSB0aGF0IHRoZSBleGFjdCBzYW1lIHZhbHVlIHdpbGwgYWRkZWQgYWdhaW4uCiAgICAgICAgZGVsZXRlIHNlbGYudmFsdWVzTWFwcGluZ1t2YWx1ZV07CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBzaXplKFNldCBzdG9yYWdlIHNlbGYpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYW1vdW50T2ZWYWx1ZXMpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGYudmFsdWVzLmxlbmd0aDsKICAgIH0KICAgIAogICAgLy8gQWxzbyBhY2NlcHQgYWRkcmVzcyBhbmQgYnl0ZXMzMiB0eXBlcywgc28gdGhlIHVzZXIgZG9lc24ndCBoYXZlIHRvIGNhc3QuCiAgICBmdW5jdGlvbiBhZGQoU2V0IHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgYWRkZWQpIHsgcmV0dXJuIGFkZChzZWxmLCB1aW50MjU2KHZhbHVlKSk7IH0KICAgIGZ1bmN0aW9uIGFkZChTZXQgc3RvcmFnZSBzZWxmLCBieXRlczMyIHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBhZGRlZCkgeyByZXR1cm4gYWRkKHNlbGYsIHVpbnQyNTYodmFsdWUpKTsgfQogICAgZnVuY3Rpb24gY29udGFpbnMoU2V0IHN0b3JhZ2Ugc2VsZiwgYWRkcmVzcyB2YWx1ZSkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBjb250YWluZWQpIHsgcmV0dXJuIGNvbnRhaW5zKHNlbGYsIHVpbnQyNTYodmFsdWUpKTsgfQogICAgZnVuY3Rpb24gY29udGFpbnMoU2V0IHN0b3JhZ2Ugc2VsZiwgYnl0ZXMzMiB2YWx1ZSkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBjb250YWluZWQpIHsgcmV0dXJuIGNvbnRhaW5zKHNlbGYsIHVpbnQyNTYodmFsdWUpKTsgfQogICAgZnVuY3Rpb24gcmVtb3ZlKFNldCBzdG9yYWdlIHNlbGYsIGFkZHJlc3MgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHJlbW92ZWQpIHsgcmV0dXJuIHJlbW92ZShzZWxmLCB1aW50MjU2KHZhbHVlKSk7IH0KICAgIGZ1bmN0aW9uIHJlbW92ZShTZXQgc3RvcmFnZSBzZWxmLCBieXRlczMyIHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCByZW1vdmVkKSB7IHJldHVybiByZW1vdmUoc2VsZiwgdWludDI1Nih2YWx1ZSkpOyB9Cn0='.
	

]
