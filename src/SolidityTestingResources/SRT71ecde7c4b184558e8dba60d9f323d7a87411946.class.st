Class {
	#name : #SRT71ecde7c4b184558e8dba60d9f323d7a87411946,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT71ecde7c4b184558e8dba60d9f323d7a87411946 >> base64 [
	^ ''.
	

]
