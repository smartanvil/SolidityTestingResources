Class {
	#name : #SRTd77120A1155cf1B4c7a283970E8AAbe31B8dDE53,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd77120A1155cf1B4c7a283970E8AAbe31B8dDE53 >> base64 [
	^ ''.
	

]
