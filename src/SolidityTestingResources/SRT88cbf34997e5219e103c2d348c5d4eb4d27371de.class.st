Class {
	#name : #SRT88cbf34997e5219e103c2d348c5d4eb4d27371de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88cbf34997e5219e103c2d348c5d4eb4d27371de >> base64 [
	^ ''.
	

]
