Class {
	#name : #SRTd3d72bdd70c2a1dbc3ff6556a8c5f1d0d3a92b7a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3d72bdd70c2a1dbc3ff6556a8c5f1d0d3a92b7a >> base64 [
	^ ''.
	

]
