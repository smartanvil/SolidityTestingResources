Class {
	#name : #SRT0dae5dc78cc470a5e2f7c7c6b63ae7298e65853f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0dae5dc78cc470a5e2f7c7c6b63ae7298e65853f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IENvbnZlcnRTdHJpbmdCeXRlIHsKICBmdW5jdGlvbiBieXRlczMyVG9TdHJpbmcoYnl0ZXMzMiB4KSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgIGJ5dGVzIG1lbW9yeSBieXRlc1N0cmluZyA9IG5ldyBieXRlcygzMik7CiAgICB1aW50IGNoYXJDb3VudCA9IDA7CiAgICBmb3IgKHVpbnQgaiA9IDA7IGogPCAzMjsgaisrKSB7CiAgICAgIGJ5dGUgY2hhciA9IGJ5dGUoYnl0ZXMzMih1aW50KHgpICogMiAqKiAoOCAqIGopKSk7CiAgICAgIGlmIChjaGFyICE9IDApIHsKICAgICAgICAgIGJ5dGVzU3RyaW5nW2NoYXJDb3VudF0gPSBjaGFyOwogICAgICAgICAgY2hhckNvdW50Kys7CiAgICAgIH0KICAgIH0KICAgIGJ5dGVzIG1lbW9yeSBieXRlc1N0cmluZ1RyaW1tZWQgPSBuZXcgYnl0ZXMoY2hhckNvdW50KTsKICAgIGZvciAoaiA9IDA7IGogPCBjaGFyQ291bnQ7IGorKykgewogICAgICBieXRlc1N0cmluZ1RyaW1tZWRbal0gPSBieXRlc1N0cmluZ1tqXTsKICAgIH0KICAgIHJldHVybiBzdHJpbmcoYnl0ZXNTdHJpbmdUcmltbWVkKTsKICB9CgogIGZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMzMihzdHJpbmcgbWVtb3J5IHNvdXJjZSkgcmV0dXJucyAoYnl0ZXMzMiByZXN1bHQpIHsKICAgIGFzc2VtYmx5IHsKICAgICAgcmVzdWx0IDo9IG1sb2FkKGFkZChzb3VyY2UsIDMyKSkKICAgIH0KICB9Cn0KCmxpYnJhcnkgU3RyaW5ncyB7CiAgICBzdHJ1Y3Qgc2xpY2UgewogICAgICAgIHVpbnQgX2xlbjsKICAgICAgICB1aW50IF9wdHI7CiAgICB9CgogICAgZnVuY3Rpb24gbWVtY3B5KHVpbnQgZGVzdCwgdWludCBzcmMsIHVpbnQgbGVuKSBwcml2YXRlIHsKICAgICAgICAvLyBDb3B5IHdvcmQtbGVuZ3RoIGNodW5rcyB3aGlsZSBwb3NzaWJsZQogICAgICAgIGZvcig7IGxlbiA+PSAzMjsgbGVuIC09IDMyKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIG1zdG9yZShkZXN0LCBtbG9hZChzcmMpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlc3QgKz0gMzI7CiAgICAgICAgICAgIHNyYyArPSAzMjsKICAgICAgICB9CgogICAgICAgIC8vIENvcHkgcmVtYWluaW5nIGJ5dGVzCiAgICAgICAgdWludCBtYXNrID0gMjU2ICoqICgzMiAtIGxlbikgLSAxOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IHNyY3BhcnQgOj0gYW5kKG1sb2FkKHNyYyksIG5vdChtYXNrKSkKICAgICAgICAgICAgbGV0IGRlc3RwYXJ0IDo9IGFuZChtbG9hZChkZXN0KSwgbWFzaykKICAgICAgICAgICAgbXN0b3JlKGRlc3QsIG9yKGRlc3RwYXJ0LCBzcmNwYXJ0KSkKICAgICAgICB9CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIHNsaWNlIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc3RyaW5nIHRvIG1ha2UgYSBzbGljZSBmcm9tLgogICAgICogQHJldHVybiBBIG5ld2x5IGFsbG9jYXRlZCBzbGljZSBjb250YWluaW5nIHRoZSBlbnRpcmUgc3RyaW5nLgogICAgICovCiAgICBmdW5jdGlvbiB0b1NsaWNlKHN0cmluZyBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgcHRyIDo9IGFkZChzZWxmLCAweDIwKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2xpY2UoYnl0ZXMoc2VsZikubGVuZ3RoLCBwdHIpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGxlbmd0aCBvZiBhIG51bGwtdGVybWluYXRlZCBieXRlczMyIHN0cmluZy4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSB2YWx1ZSB0byBmaW5kIHRoZSBsZW5ndGggb2YuCiAgICAgKiBAcmV0dXJuIFRoZSBsZW5ndGggb2YgdGhlIHN0cmluZywgZnJvbSAwIHRvIDMyLgogICAgICovCiAgICBmdW5jdGlvbiBsZW4oYnl0ZXMzMiBzZWxmKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCByZXQ7CiAgICAgICAgaWYgKHNlbGYgPT0gMCkKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgaWYgKHNlbGYgJiAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmID09IDApIHsKICAgICAgICAgICAgcmV0ICs9IDE2OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmZmZmZmZmZmZmZmZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSA4OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmICYgMHhmZmZmZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSA0OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSAyOwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmICYgMHhmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMzIgLSByZXQ7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIHNsaWNlIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBieXRlczMyLCBpbnRlcnByZXRlZCBhcyBhCiAgICAgKiAgICAgIG51bGwtdGVybWludGFlZCB1dGYtOCBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgYnl0ZXMzMiB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgc2xpY2UuCiAgICAgKiBAcmV0dXJuIEEgbmV3IHNsaWNlIGNvbnRhaW5pbmcgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBhcmd1bWVudCB1cCB0byB0aGUKICAgICAqICAgICAgICAgZmlyc3QgbnVsbC4KICAgICAqLwogICAgZnVuY3Rpb24gdG9TbGljZUIzMihieXRlczMyIHNlbGYpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHJldCkgewogICAgICAgIC8vIEFsbG9jYXRlIHNwYWNlIGZvciBgc2VsZmAgaW4gbWVtb3J5LCBjb3B5IGl0IHRoZXJlLCBhbmQgcG9pbnQgcmV0IGF0IGl0CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgcHRyIDo9IG1sb2FkKDB4NDApCiAgICAgICAgICAgIG1zdG9yZSgweDQwLCBhZGQocHRyLCAweDIwKSkKICAgICAgICAgICAgbXN0b3JlKHB0ciwgc2VsZikKICAgICAgICAgICAgbXN0b3JlKGFkZChyZXQsIDB4MjApLCBwdHIpCiAgICAgICAgfQogICAgICAgIHJldC5fbGVuID0gbGVuKHNlbGYpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgYSBuZXcgc2xpY2UgY29udGFpbmluZyB0aGUgc2FtZSBkYXRhIGFzIHRoZSBjdXJyZW50IHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIGNvcHkuCiAgICAgKiBAcmV0dXJuIEEgbmV3IHNsaWNlIGNvbnRhaW5pbmcgdGhlIHNhbWUgZGF0YSBhcyBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvcHkoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICByZXR1cm4gc2xpY2Uoc2VsZi5fbGVuLCBzZWxmLl9wdHIpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IENvcGllcyBhIHNsaWNlIHRvIGEgbmV3IHN0cmluZy4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBjb3B5LgogICAgICogQHJldHVybiBBIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgc2xpY2UncyB0ZXh0LgogICAgICovCiAgICBmdW5jdGlvbiB0b1N0cmluZyhzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICB2YXIgcmV0ID0gbmV3IHN0cmluZyhzZWxmLl9sZW4pOwogICAgICAgIHVpbnQgcmV0cHRyOwogICAgICAgIGFzc2VtYmx5IHsgcmV0cHRyIDo9IGFkZChyZXQsIDMyKSB9CgogICAgICAgIG1lbWNweShyZXRwdHIsIHNlbGYuX3B0ciwgc2VsZi5fbGVuKTsKICAgICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGxlbmd0aCBpbiBydW5lcyBvZiB0aGUgc2xpY2UuIE5vdGUgdGhhdCB0aGlzIG9wZXJhdGlvbgogICAgICogICAgICB0YWtlcyB0aW1lIHByb3BvcnRpb25hbCB0byB0aGUgbGVuZ3RoIG9mIHRoZSBzbGljZTsgYXZvaWQgdXNpbmcgaXQKICAgICAqICAgICAgaW4gbG9vcHMsIGFuZCBjYWxsIGBzbGljZS5lbXB0eSgpYCBpZiB5b3Ugb25seSBuZWVkIHRvIGtub3cgd2hldGhlcgogICAgICogICAgICB0aGUgc2xpY2UgaXMgZW1wdHkgb3Igbm90LgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIFRoZSBsZW5ndGggb2YgdGhlIHNsaWNlIGluIHJ1bmVzLgogICAgICovCiAgICBmdW5jdGlvbiBsZW4oc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIC8vIFN0YXJ0aW5nIGF0IHB0ci0zMSBtZWFucyB0aGUgTFNCIHdpbGwgYmUgdGhlIGJ5dGUgd2UgY2FyZSBhYm91dAogICAgICAgIHZhciBwdHIgPSBzZWxmLl9wdHIgLSAzMTsKICAgICAgICB2YXIgZW5kID0gcHRyICsgc2VsZi5fbGVuOwogICAgICAgIGZvciAodWludCBsZW4gPSAwOyBwdHIgPCBlbmQ7IGxlbisrKSB7CiAgICAgICAgICAgIHVpbnQ4IGI7CiAgICAgICAgICAgIGFzc2VtYmx5IHsgYiA6PSBhbmQobWxvYWQocHRyKSwgMHhGRikgfQogICAgICAgICAgICBpZiAoYiA8IDB4ODApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAxOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RTApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAyOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAzOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjgpIHsKICAgICAgICAgICAgICAgIHB0ciArPSA0OwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RkMpIHsKICAgICAgICAgICAgICAgIHB0ciArPSA1OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcHRyICs9IDY7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlbjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIHNsaWNlIGlzIGVtcHR5IChoYXMgYSBsZW5ndGggb2YgMCkuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgc2xpY2UgaXMgZW1wdHksIEZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gZW1wdHkoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLl9sZW4gPT0gMDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIGEgcG9zaXRpdmUgbnVtYmVyIGlmIGBvdGhlcmAgY29tZXMgbGV4aWNvZ3JhcGhpY2FsbHkgYWZ0ZXIKICAgICAqICAgICAgYHNlbGZgLCBhIG5lZ2F0aXZlIG51bWJlciBpZiBpdCBjb21lcyBiZWZvcmUsIG9yIHplcm8gaWYgdGhlCiAgICAgKiAgICAgIGNvbnRlbnRzIG9mIHRoZSB0d28gc2xpY2VzIGFyZSBlcXVhbC4gQ29tcGFyaXNvbiBpcyBkb25lIHBlci1ydW5lLAogICAgICogICAgICBvbiB1bmljb2RlIGNvZGVwb2ludHMuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSBvdGhlciBUaGUgc2Vjb25kIHNsaWNlIHRvIGNvbXBhcmUuCiAgICAgKiBAcmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb24uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBhcmUoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKGludCkgewogICAgICAgIHVpbnQgc2hvcnRlc3QgPSBzZWxmLl9sZW47CiAgICAgICAgaWYgKG90aGVyLl9sZW4gPCBzZWxmLl9sZW4pCiAgICAgICAgICAgIHNob3J0ZXN0ID0gb3RoZXIuX2xlbjsKCiAgICAgICAgdmFyIHNlbGZwdHIgPSBzZWxmLl9wdHI7CiAgICAgICAgdmFyIG90aGVycHRyID0gb3RoZXIuX3B0cjsKICAgICAgICBmb3IgKHVpbnQgaWR4ID0gMDsgaWR4IDwgc2hvcnRlc3Q7IGlkeCArPSAzMikgewogICAgICAgICAgICB1aW50IGE7CiAgICAgICAgICAgIHVpbnQgYjsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgYSA6PSBtbG9hZChzZWxmcHRyKQogICAgICAgICAgICAgICAgYiA6PSBtbG9hZChvdGhlcnB0cikKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYSAhPSBiKSB7CiAgICAgICAgICAgICAgICAvLyBNYXNrIG91dCBpcnJlbGV2YW50IGJ5dGVzIGFuZCBjaGVjayBhZ2FpbgogICAgICAgICAgICAgICAgdWludCBtYXNrID0gfigyICoqICg4ICogKDMyIC0gc2hvcnRlc3QgKyBpZHgpKSAtIDEpOwogICAgICAgICAgICAgICAgdmFyIGRpZmYgPSAoYSAmIG1hc2spIC0gKGIgJiBtYXNrKTsKICAgICAgICAgICAgICAgIGlmIChkaWZmICE9IDApCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChkaWZmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZWxmcHRyICs9IDMyOwogICAgICAgICAgICBvdGhlcnB0ciArPSAzMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGludChzZWxmLl9sZW4pIC0gaW50KG90aGVyLl9sZW4pOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIHNsaWNlcyBjb250YWluIHRoZSBzYW1lIHRleHQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzZWNvbmQgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgc2xpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBlcXVhbHMoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gY29tcGFyZShzZWxmLCBvdGhlcikgPT0gMDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBFeHRyYWN0cyB0aGUgZmlyc3QgcnVuZSBpbiB0aGUgc2xpY2UgaW50byBgcnVuZWAsIGFkdmFuY2luZyB0aGUKICAgICAqICAgICAgc2xpY2UgdG8gcG9pbnQgdG8gdGhlIG5leHQgcnVuZSBhbmQgcmV0dXJuaW5nIGBzZWxmYC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHBhcmFtIHJ1bmUgVGhlIHNsaWNlIHRoYXQgd2lsbCBjb250YWluIHRoZSBmaXJzdCBydW5lLgogICAgICogQHJldHVybiBgcnVuZWAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5leHRSdW5lKHNsaWNlIHNlbGYsIHNsaWNlIHJ1bmUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgcnVuZS5fcHRyID0gc2VsZi5fcHRyOwoKICAgICAgICBpZiAoc2VsZi5fbGVuID09IDApIHsKICAgICAgICAgICAgcnVuZS5fbGVuID0gMDsKICAgICAgICAgICAgcmV0dXJuIHJ1bmU7CiAgICAgICAgfQoKICAgICAgICB1aW50IGxlbjsKICAgICAgICB1aW50IGI7CiAgICAgICAgLy8gTG9hZCB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgcnVuZSBpbnRvIHRoZSBMU0JzIG9mIGIKICAgICAgICBhc3NlbWJseSB7IGIgOj0gYW5kKG1sb2FkKHN1YihtbG9hZChhZGQoc2VsZiwgMzIpKSwgMzEpKSwgMHhGRikgfQogICAgICAgIGlmIChiIDwgMHg4MCkgewogICAgICAgICAgICBsZW4gPSAxOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhFMCkgewogICAgICAgICAgICBsZW4gPSAyOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhGMCkgewogICAgICAgICAgICBsZW4gPSAzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxlbiA9IDQ7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBmb3IgdHJ1bmNhdGVkIGNvZGVwb2ludHMKICAgICAgICBpZiAobGVuID4gc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIHJ1bmUuX2xlbiA9IHNlbGYuX2xlbjsKICAgICAgICAgICAgc2VsZi5fcHRyICs9IHNlbGYuX2xlbjsKICAgICAgICAgICAgc2VsZi5fbGVuID0gMDsKICAgICAgICAgICAgcmV0dXJuIHJ1bmU7CiAgICAgICAgfQoKICAgICAgICBzZWxmLl9wdHIgKz0gbGVuOwogICAgICAgIHNlbGYuX2xlbiAtPSBsZW47CiAgICAgICAgcnVuZS5fbGVuID0gbGVuOwogICAgICAgIHJldHVybiBydW5lOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGZpcnN0IHJ1bmUgaW4gdGhlIHNsaWNlLCBhZHZhbmNpbmcgdGhlIHNsaWNlIHRvIHBvaW50CiAgICAgKiAgICAgIHRvIHRoZSBuZXh0IHJ1bmUuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEByZXR1cm4gQSBzbGljZSBjb250YWluaW5nIG9ubHkgdGhlIGZpcnN0IHJ1bmUgZnJvbSBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5leHRSdW5lKHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHJldCkgewogICAgICAgIG5leHRSdW5lKHNlbGYsIHJldCk7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRoZSBmaXJzdCBjb2RlcG9pbnQgaW4gdGhlIHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIFRoZSBudW1iZXIgb2YgdGhlIGZpcnN0IGNvZGVwb2ludCBpbiB0aGUgc2xpY2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9yZChzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHJldCkgewogICAgICAgIGlmIChzZWxmLl9sZW4gPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIHVpbnQgd29yZDsKICAgICAgICB1aW50IGxlbjsKICAgICAgICB1aW50IGRpdiA9IDIgKiogMjQ4OwoKICAgICAgICAvLyBMb2FkIHRoZSBydW5lIGludG8gdGhlIE1TQnMgb2YgYgogICAgICAgIGFzc2VtYmx5IHsgd29yZDo9IG1sb2FkKG1sb2FkKGFkZChzZWxmLCAzMikpKSB9CiAgICAgICAgdmFyIGIgPSB3b3JkIC8gZGl2OwogICAgICAgIGlmIChiIDwgMHg4MCkgewogICAgICAgICAgICByZXQgPSBiOwogICAgICAgICAgICBsZW4gPSAxOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhFMCkgewogICAgICAgICAgICByZXQgPSBiICYgMHgxRjsKICAgICAgICAgICAgbGVuID0gMjsKICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjApIHsKICAgICAgICAgICAgcmV0ID0gYiAmIDB4MEY7CiAgICAgICAgICAgIGxlbiA9IDM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0ID0gYiAmIDB4MDc7CiAgICAgICAgICAgIGxlbiA9IDQ7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBmb3IgdHJ1bmNhdGVkIGNvZGVwb2ludHMKICAgICAgICBpZiAobGVuID4gc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGkgPSAxOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgZGl2ID0gZGl2IC8gMjU2OwogICAgICAgICAgICBiID0gKHdvcmQgLyBkaXYpICYgMHhGRjsKICAgICAgICAgICAgaWYgKGIgJiAweEMwICE9IDB4ODApIHsKICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVVRGLTggc2VxdWVuY2UKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldCA9IChyZXQgKiA2NCkgfCAoYiAmIDB4M0YpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJldDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBrZWNjYWstMjU2IGhhc2ggb2YgdGhlIHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIGhhc2guCiAgICAgKiBAcmV0dXJuIFRoZSBoYXNoIG9mIHRoZSBzbGljZS4KICAgICAqLwogICAgZnVuY3Rpb24ga2VjY2FrKHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgcmV0KSB7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICByZXQgOj0gc2hhMyhtbG9hZChhZGQoc2VsZiwgMzIpKSwgbWxvYWQoc2VsZikpCiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiBgc2VsZmAgc3RhcnRzIHdpdGggYG5lZWRsZWAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHNsaWNlIHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIHNsaWNlIHN0YXJ0cyB3aXRoIHRoZSBwcm92aWRlZCB0ZXh0LCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHNlbGYuX2xlbiA8IG5lZWRsZS5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmIChzZWxmLl9wdHIgPT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgIGxldCBzZWxmcHRyIDo9IG1sb2FkKGFkZChzZWxmLCAweDIwKSkKICAgICAgICAgICAgbGV0IG5lZWRsZXB0ciA6PSBtbG9hZChhZGQobmVlZGxlLCAweDIwKSkKICAgICAgICAgICAgZXF1YWwgOj0gZXEoc2hhMyhzZWxmcHRyLCBsZW4pLCBzaGEzKG5lZWRsZXB0ciwgbGVuKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVxdWFsOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IElmIGBzZWxmYCBzdGFydHMgd2l0aCBgbmVlZGxlYCwgYG5lZWRsZWAgaXMgcmVtb3ZlZCBmcm9tIHRoZQogICAgICogICAgICBiZWdpbm5pbmcgb2YgYHNlbGZgLiBPdGhlcndpc2UsIGBzZWxmYCBpcyB1bm1vZGlmaWVkLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBgc2VsZmAKICAgICAqLwogICAgZnVuY3Rpb24gYmV5b25kKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuIDwgbmVlZGxlLl9sZW4pIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsID0gdHJ1ZTsKICAgICAgICBpZiAoc2VsZi5fcHRyICE9IG5lZWRsZS5fcHRyKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCBsZW4gOj0gbWxvYWQobmVlZGxlKQogICAgICAgICAgICAgICAgbGV0IHNlbGZwdHIgOj0gbWxvYWQoYWRkKHNlbGYsIDB4MjApKQogICAgICAgICAgICAgICAgbGV0IG5lZWRsZXB0ciA6PSBtbG9hZChhZGQobmVlZGxlLCAweDIwKSkKICAgICAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChlcXVhbCkgewogICAgICAgICAgICBzZWxmLl9sZW4gLT0gbmVlZGxlLl9sZW47CiAgICAgICAgICAgIHNlbGYuX3B0ciArPSBuZWVkbGUuX2xlbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiB0aGUgc2xpY2UgZW5kcyB3aXRoIGBuZWVkbGVgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBzbGljZSBzdGFydHMgd2l0aCB0aGUgcHJvdmlkZWQgdGV4dCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBlbmRzV2l0aChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuIDwgbmVlZGxlLl9sZW4pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHNlbGZwdHIgPSBzZWxmLl9wdHIgKyBzZWxmLl9sZW4gLSBuZWVkbGUuX2xlbjsKCiAgICAgICAgaWYgKHNlbGZwdHIgPT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgIGxldCBuZWVkbGVwdHIgOj0gbWxvYWQoYWRkKG5lZWRsZSwgMHgyMCkpCiAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZXF1YWw7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgSWYgYHNlbGZgIGVuZHMgd2l0aCBgbmVlZGxlYCwgYG5lZWRsZWAgaXMgcmVtb3ZlZCBmcm9tIHRoZQogICAgICogICAgICBlbmQgb2YgYHNlbGZgLiBPdGhlcndpc2UsIGBzZWxmYCBpcyB1bm1vZGlmaWVkLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBgc2VsZmAKICAgICAqLwogICAgZnVuY3Rpb24gdW50aWwoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIGlmIChzZWxmLl9sZW4gPCBuZWVkbGUuX2xlbikgewogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICB9CgogICAgICAgIHZhciBzZWxmcHRyID0gc2VsZi5fcHRyICsgc2VsZi5fbGVuIC0gbmVlZGxlLl9sZW47CiAgICAgICAgYm9vbCBlcXVhbCA9IHRydWU7CiAgICAgICAgaWYgKHNlbGZwdHIgIT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgICAgICBsZXQgbmVlZGxlcHRyIDo9IG1sb2FkKGFkZChuZWVkbGUsIDB4MjApKQogICAgICAgICAgICAgICAgZXF1YWwgOj0gZXEoc2hhMyhzZWxmcHRyLCBsZW4pLCBzaGEzKG5lZWRsZXB0ciwgbGVuKSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGVxdWFsKSB7CiAgICAgICAgICAgIHNlbGYuX2xlbiAtPSBuZWVkbGUuX2xlbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIG1lbW9yeSBhZGRyZXNzIG9mIHRoZSBmaXJzdCBieXRlIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mCiAgICAvLyBgbmVlZGxlYCBpbiBgc2VsZmAsIG9yIHRoZSBmaXJzdCBieXRlIGFmdGVyIGBzZWxmYCBpZiBub3QgZm91bmQuCiAgICBmdW5jdGlvbiBmaW5kUHRyKHVpbnQgc2VsZmxlbiwgdWludCBzZWxmcHRyLCB1aW50IG5lZWRsZWxlbiwgdWludCBuZWVkbGVwdHIpIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgcHRyOwogICAgICAgIHVpbnQgaWR4OwoKICAgICAgICBpZiAobmVlZGxlbGVuIDw9IHNlbGZsZW4pIHsKICAgICAgICAgICAgaWYgKG5lZWRsZWxlbiA8PSAzMikgewogICAgICAgICAgICAgICAgLy8gT3B0aW1pemVkIGFzc2VtYmx5IGZvciA2OCBnYXMgcGVyIGJ5dGUgb24gc2hvcnQgc3RyaW5ncwogICAgICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgICAgIGxldCBtYXNrIDo9IG5vdChzdWIoZXhwKDIsIG11bCg4LCBzdWIoMzIsIG5lZWRsZWxlbikpKSwgMSkpCiAgICAgICAgICAgICAgICAgICAgbGV0IG5lZWRsZWRhdGEgOj0gYW5kKG1sb2FkKG5lZWRsZXB0ciksIG1hc2spCiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZCA6PSBhZGQoc2VsZnB0ciwgc3ViKHNlbGZsZW4sIG5lZWRsZWxlbikpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IHNlbGZwdHIKICAgICAgICAgICAgICAgICAgICBsb29wOgogICAgICAgICAgICAgICAgICAgIGp1bXBpKGV4aXQsIGVxKGFuZChtbG9hZChwdHIpLCBtYXNrKSwgbmVlZGxlZGF0YSkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IGFkZChwdHIsIDEpCiAgICAgICAgICAgICAgICAgICAganVtcGkobG9vcCwgbHQoc3ViKHB0ciwgMSksIGVuZCkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IGFkZChzZWxmcHRyLCBzZWxmbGVuKQogICAgICAgICAgICAgICAgICAgIGV4aXQ6CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRm9yIGxvbmcgbmVlZGxlcywgdXNlIGhhc2hpbmcKICAgICAgICAgICAgICAgIGJ5dGVzMzIgaGFzaDsKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgaGFzaCA6PSBzaGEzKG5lZWRsZXB0ciwgbmVlZGxlbGVuKSB9CiAgICAgICAgICAgICAgICBwdHIgPSBzZWxmcHRyOwogICAgICAgICAgICAgICAgZm9yIChpZHggPSAwOyBpZHggPD0gc2VsZmxlbiAtIG5lZWRsZWxlbjsgaWR4KyspIHsKICAgICAgICAgICAgICAgICAgICBieXRlczMyIHRlc3RIYXNoOwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgdGVzdEhhc2ggOj0gc2hhMyhwdHIsIG5lZWRsZWxlbikgfQogICAgICAgICAgICAgICAgICAgIGlmIChoYXNoID09IHRlc3RIYXNoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICAgICAgICAgIHB0ciArPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmcHRyICsgc2VsZmxlbjsKICAgIH0KCiAgICAvLyBSZXR1cm5zIHRoZSBtZW1vcnkgYWRkcmVzcyBvZiB0aGUgZmlyc3QgYnl0ZSBhZnRlciB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mCiAgICAvLyBgbmVlZGxlYCBpbiBgc2VsZmAsIG9yIHRoZSBhZGRyZXNzIG9mIGBzZWxmYCBpZiBub3QgZm91bmQuCiAgICBmdW5jdGlvbiByZmluZFB0cih1aW50IHNlbGZsZW4sIHVpbnQgc2VsZnB0ciwgdWludCBuZWVkbGVsZW4sIHVpbnQgbmVlZGxlcHRyKSBwcml2YXRlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IHB0cjsKCiAgICAgICAgaWYgKG5lZWRsZWxlbiA8PSBzZWxmbGVuKSB7CiAgICAgICAgICAgIGlmIChuZWVkbGVsZW4gPD0gMzIpIHsKICAgICAgICAgICAgICAgIC8vIE9wdGltaXplZCBhc3NlbWJseSBmb3IgNjkgZ2FzIHBlciBieXRlIG9uIHNob3J0IHN0cmluZ3MKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgICAgICBsZXQgbWFzayA6PSBub3Qoc3ViKGV4cCgyLCBtdWwoOCwgc3ViKDMyLCBuZWVkbGVsZW4pKSksIDEpKQogICAgICAgICAgICAgICAgICAgIGxldCBuZWVkbGVkYXRhIDo9IGFuZChtbG9hZChuZWVkbGVwdHIpLCBtYXNrKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBhZGQoc2VsZnB0ciwgc3ViKHNlbGZsZW4sIG5lZWRsZWxlbikpCiAgICAgICAgICAgICAgICAgICAgbG9vcDoKICAgICAgICAgICAgICAgICAgICBqdW1waShyZXQsIGVxKGFuZChtbG9hZChwdHIpLCBtYXNrKSwgbmVlZGxlZGF0YSkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IHN1YihwdHIsIDEpCiAgICAgICAgICAgICAgICAgICAganVtcGkobG9vcCwgZ3QoYWRkKHB0ciwgMSksIHNlbGZwdHIpKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBzZWxmcHRyCiAgICAgICAgICAgICAgICAgICAganVtcChleGl0KQogICAgICAgICAgICAgICAgICAgIHJldDoKICAgICAgICAgICAgICAgICAgICBwdHIgOj0gYWRkKHB0ciwgbmVlZGxlbGVuKQogICAgICAgICAgICAgICAgICAgIGV4aXQ6CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRm9yIGxvbmcgbmVlZGxlcywgdXNlIGhhc2hpbmcKICAgICAgICAgICAgICAgIGJ5dGVzMzIgaGFzaDsKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgaGFzaCA6PSBzaGEzKG5lZWRsZXB0ciwgbmVlZGxlbGVuKSB9CiAgICAgICAgICAgICAgICBwdHIgPSBzZWxmcHRyICsgKHNlbGZsZW4gLSBuZWVkbGVsZW4pOwogICAgICAgICAgICAgICAgd2hpbGUgKHB0ciA+PSBzZWxmcHRyKSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXMzMiB0ZXN0SGFzaDsKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSB7IHRlc3RIYXNoIDo9IHNoYTMocHRyLCBuZWVkbGVsZW4pIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGFzaCA9PSB0ZXN0SGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB0ciArIG5lZWRsZWxlbjsKICAgICAgICAgICAgICAgICAgICBwdHIgLT0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZnB0cjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBNb2RpZmllcyBgc2VsZmAgdG8gY29udGFpbiBldmVyeXRoaW5nIGZyb20gdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YKICAgICAqICAgICAgYG5lZWRsZWAgdG8gdGhlIGVuZCBvZiB0aGUgc2xpY2UuIGBzZWxmYCBpcyBzZXQgdG8gdGhlIGVtcHR5IHNsaWNlCiAgICAgKiAgICAgIGlmIGBuZWVkbGVgIGlzIG5vdCBmb3VuZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzZWFyY2ggYW5kIG1vZGlmeS4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiBmaW5kKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICB1aW50IHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgc2VsZi5fbGVuIC09IHB0ciAtIHNlbGYuX3B0cjsKICAgICAgICBzZWxmLl9wdHIgPSBwdHI7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgTW9kaWZpZXMgYHNlbGZgIHRvIGNvbnRhaW4gdGhlIHBhcnQgb2YgdGhlIHN0cmluZyBmcm9tIHRoZSBzdGFydCBvZgogICAgICogICAgICBgc2VsZmAgdG8gdGhlIGVuZCBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYC4gSWYgYG5lZWRsZWAKICAgICAqICAgICAgaXMgbm90IGZvdW5kLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzZWFyY2ggYW5kIG1vZGlmeS4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiByZmluZChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgdWludCBwdHIgPSByZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKTsKICAgICAgICBzZWxmLl9sZW4gPSBwdHIgLSBzZWxmLl9wdHI7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU3BsaXRzIHRoZSBzbGljZSwgc2V0dGluZyBgc2VsZmAgdG8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QKICAgICAqICAgICAgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYCwgYW5kIGB0b2tlbmAgdG8gZXZlcnl0aGluZyBiZWZvcmUgaXQuIElmCiAgICAgKiAgICAgIGBuZWVkbGVgIGRvZXMgbm90IG9jY3VyIGluIGBzZWxmYCwgYHNlbGZgIGlzIHNldCB0byB0aGUgZW1wdHkgc2xpY2UsCiAgICAgKiAgICAgIGFuZCBgdG9rZW5gIGlzIHNldCB0byB0aGUgZW50aXJldHkgb2YgYHNlbGZgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNwbGl0LgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEBwYXJhbSB0b2tlbiBBbiBvdXRwdXQgcGFyYW1ldGVyIHRvIHdoaWNoIHRoZSBmaXJzdCB0b2tlbiBpcyB3cml0dGVuLgogICAgICogQHJldHVybiBgdG9rZW5gLgogICAgICovCiAgICBmdW5jdGlvbiBzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUsIHNsaWNlIHRva2VuKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyID0gZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKTsKICAgICAgICB0b2tlbi5fcHRyID0gc2VsZi5fcHRyOwogICAgICAgIHRva2VuLl9sZW4gPSBwdHIgLSBzZWxmLl9wdHI7CiAgICAgICAgaWYgKHB0ciA9PSBzZWxmLl9wdHIgKyBzZWxmLl9sZW4pIHsKICAgICAgICAgICAgLy8gTm90IGZvdW5kCiAgICAgICAgICAgIHNlbGYuX2xlbiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5fbGVuIC09IHRva2VuLl9sZW4gKyBuZWVkbGUuX2xlbjsKICAgICAgICAgICAgc2VsZi5fcHRyID0gcHRyICsgbmVlZGxlLl9sZW47CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBTcGxpdHMgdGhlIHNsaWNlLCBzZXR0aW5nIGBzZWxmYCB0byBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdAogICAgICogICAgICBvY2N1cnJlbmNlIG9mIGBuZWVkbGVgLCBhbmQgcmV0dXJuaW5nIGV2ZXJ5dGhpbmcgYmVmb3JlIGl0LiBJZgogICAgICogICAgICBgbmVlZGxlYCBkb2VzIG5vdCBvY2N1ciBpbiBgc2VsZmAsIGBzZWxmYCBpcyBzZXQgdG8gdGhlIGVtcHR5IHNsaWNlLAogICAgICogICAgICBhbmQgdGhlIGVudGlyZXR5IG9mIGBzZWxmYCBpcyByZXR1cm5lZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzcGxpdC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcmV0dXJuIFRoZSBwYXJ0IG9mIGBzZWxmYCB1cCB0byB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgZGVsaW1gLgogICAgICovCiAgICBmdW5jdGlvbiBzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHRva2VuKSB7CiAgICAgICAgc3BsaXQoc2VsZiwgbmVlZGxlLCB0b2tlbik7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU3BsaXRzIHRoZSBzbGljZSwgc2V0dGluZyBgc2VsZmAgdG8gZXZlcnl0aGluZyBiZWZvcmUgdGhlIGxhc3QKICAgICAqICAgICAgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYCwgYW5kIGB0b2tlbmAgdG8gZXZlcnl0aGluZyBhZnRlciBpdC4gSWYKICAgICAqICAgICAgYG5lZWRsZWAgZG9lcyBub3Qgb2NjdXIgaW4gYHNlbGZgLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZSwKICAgICAqICAgICAgYW5kIGB0b2tlbmAgaXMgc2V0IHRvIHRoZSBlbnRpcmV0eSBvZiBgc2VsZmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc3BsaXQuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHBhcmFtIHRva2VuIEFuIG91dHB1dCBwYXJhbWV0ZXIgdG8gd2hpY2ggdGhlIGZpcnN0IHRva2VuIGlzIHdyaXR0ZW4uCiAgICAgKiBAcmV0dXJuIGB0b2tlbmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUsIHNsaWNlIHRva2VuKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyID0gcmZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgdG9rZW4uX3B0ciA9IHB0cjsKICAgICAgICB0b2tlbi5fbGVuID0gc2VsZi5fbGVuIC0gKHB0ciAtIHNlbGYuX3B0cik7CiAgICAgICAgaWYgKHB0ciA9PSBzZWxmLl9wdHIpIHsKICAgICAgICAgICAgLy8gTm90IGZvdW5kCiAgICAgICAgICAgIHNlbGYuX2xlbiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5fbGVuIC09IHRva2VuLl9sZW4gKyBuZWVkbGUuX2xlbjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRva2VuOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFNwbGl0cyB0aGUgc2xpY2UsIHNldHRpbmcgYHNlbGZgIHRvIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBsYXN0CiAgICAgKiAgICAgIG9jY3VycmVuY2Ugb2YgYG5lZWRsZWAsIGFuZCByZXR1cm5pbmcgZXZlcnl0aGluZyBhZnRlciBpdC4gSWYKICAgICAqICAgICAgYG5lZWRsZWAgZG9lcyBub3Qgb2NjdXIgaW4gYHNlbGZgLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZSwKICAgICAqICAgICAgYW5kIHRoZSBlbnRpcmV0eSBvZiBgc2VsZmAgaXMgcmV0dXJuZWQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc3BsaXQuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHJldHVybiBUaGUgcGFydCBvZiBgc2VsZmAgYWZ0ZXIgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZiBgZGVsaW1gLgogICAgICovCiAgICBmdW5jdGlvbiByc3BsaXQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSB0b2tlbikgewogICAgICAgIHJzcGxpdChzZWxmLCBuZWVkbGUsIHRva2VuKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBDb3VudHMgdGhlIG51bWJlciBvZiBub25vdmVybGFwcGluZyBvY2N1cnJlbmNlcyBvZiBgbmVlZGxlYCBpbiBgc2VsZmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEByZXR1cm4gVGhlIG51bWJlciBvZiBvY2N1cnJlbmNlcyBvZiBgbmVlZGxlYCBmb3VuZCBpbiBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvdW50KHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAodWludCBjb3VudCkgewogICAgICAgIHVpbnQgcHRyID0gZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSArIG5lZWRsZS5fbGVuOwogICAgICAgIHdoaWxlIChwdHIgPD0gc2VsZi5fcHRyICsgc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgIHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuIC0gKHB0ciAtIHNlbGYuX3B0ciksIHB0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSArIG5lZWRsZS5fbGVuOwogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIFRydWUgaWYgYHNlbGZgIGNvbnRhaW5zIGBuZWVkbGVgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgYG5lZWRsZWAgaXMgZm91bmQgaW4gYHNlbGZgLCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRhaW5zKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiByZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSAhPSBzZWxmLl9wdHI7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgY29uY2F0ZW5hdGlvbiBvZgogICAgICogICAgICBgc2VsZmAgYW5kIGBvdGhlcmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29uY2F0ZW5hdGUuCiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIHNlY29uZCBzbGljZSB0byBjb25jYXRlbmF0ZS4KICAgICAqIEByZXR1cm4gVGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlIHR3byBzdHJpbmdzLgogICAgICovCiAgICBmdW5jdGlvbiBjb25jYXQoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHZhciByZXQgPSBuZXcgc3RyaW5nKHNlbGYuX2xlbiArIG90aGVyLl9sZW4pOwogICAgICAgIHVpbnQgcmV0cHRyOwogICAgICAgIGFzc2VtYmx5IHsgcmV0cHRyIDo9IGFkZChyZXQsIDMyKSB9CiAgICAgICAgbWVtY3B5KHJldHB0ciwgc2VsZi5fcHRyLCBzZWxmLl9sZW4pOwogICAgICAgIG1lbWNweShyZXRwdHIgKyBzZWxmLl9sZW4sIG90aGVyLl9wdHIsIG90aGVyLl9sZW4pOwogICAgICAgIHJldHVybiByZXQ7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgSm9pbnMgYW4gYXJyYXkgb2Ygc2xpY2VzLCB1c2luZyBgc2VsZmAgYXMgYSBkZWxpbWl0ZXIsIHJldHVybmluZyBhCiAgICAgKiAgICAgIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZGVsaW1pdGVyIHRvIHVzZS4KICAgICAqIEBwYXJhbSBwYXJ0cyBBIGxpc3Qgb2Ygc2xpY2VzIHRvIGpvaW4uCiAgICAgKiBAcmV0dXJuIEEgbmV3bHkgYWxsb2NhdGVkIHN0cmluZyBjb250YWluaW5nIGFsbCB0aGUgc2xpY2VzIGluIGBwYXJ0c2AsCiAgICAgKiAgICAgICAgIGpvaW5lZCB3aXRoIGBzZWxmYC4KICAgICAqLwogICAgZnVuY3Rpb24gam9pbihzbGljZSBzZWxmLCBzbGljZVtdIHBhcnRzKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IDApCiAgICAgICAgICAgIHJldHVybiAiIjsKCiAgICAgICAgdWludCBsZW4gPSBzZWxmLl9sZW4gKiAocGFydHMubGVuZ3RoIC0gMSk7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgbGVuICs9IHBhcnRzW2ldLl9sZW47CgogICAgICAgIHZhciByZXQgPSBuZXcgc3RyaW5nKGxlbik7CiAgICAgICAgdWludCByZXRwdHI7CiAgICAgICAgYXNzZW1ibHkgeyByZXRwdHIgOj0gYWRkKHJldCwgMzIpIH0KCiAgICAgICAgZm9yKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgbWVtY3B5KHJldHB0ciwgcGFydHNbaV0uX3B0ciwgcGFydHNbaV0uX2xlbik7CiAgICAgICAgICAgIHJldHB0ciArPSBwYXJ0c1tpXS5fbGVuOwogICAgICAgICAgICBpZiAoaSA8IHBhcnRzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICAgIG1lbWNweShyZXRwdHIsIHNlbGYuX3B0ciwgc2VsZi5fbGVuKTsKICAgICAgICAgICAgICAgIHJldHB0ciArPSBzZWxmLl9sZW47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiByZXQ7CiAgICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICB9Cgp9Cgpjb250cmFjdCBQbGF0aW51bSBpcyBPd25hYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICB1c2luZyBTdHJpbmdzIGZvciAqOwoKICAvLyA9PT09PT09PT0g5a6j5ZGKID09PT09PT09PQogIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIwLjAuMSI7CiAgLy8g5Z+65pys5Zau5L2NCiAgc3RyaW5nIHB1YmxpYyB1bml0ID0gIm96IjsKICAvLyDnuL3kvpvntabph48KICB1aW50MjU2IHB1YmxpYyB0b3RhbDsKICAvLyDlrZjosqgKICBzdHJ1Y3QgQnVsbGlvbiB7CiAgICBzdHJpbmcgaW5kZXg7CiAgICBzdHJpbmcgdW5pdDsKICAgIHVpbnQyNTYgYW1vdW50OwogICAgc3RyaW5nIGlwZnM7CiAgfQogIGJ5dGVzMzJbXSBwdWJsaWMgc3RvcmVob3VzZUluZGV4OwogIG1hcHBpbmcgKGJ5dGVzMzIgPT4gQnVsbGlvbikgcHVibGljIHN0b3JlaG91c2U7CiAgLy8g5o6b5Yu+6LKo5bmjCiAgYWRkcmVzcyBwdWJsaWMgdG9rZW47CiAgLy8g5Yyv546HIDHnmb3ph5HvvJrnmb3ph5HluaMKICB1aW50MjU2IHB1YmxpYyByYXRlID0gMTA7CiAgLy8gUGxhdGludW1Ub2tlbiDlr6bkvosKICBQbGF0aW51bVRva2VuIGNvaW47CgoKCgoKICAvLyA9PT09PT09PT0g5Yid5aeL5YyWID09PT09PT09PQogIGZ1bmN0aW9uIFBsYXRpbnVtKCkgewoKICB9CgoKCgogIC8vID09PT09PT09PSBldmVudCA9PT09PT09PT0KICBldmVudCBTdG9jayAoCiAgICBzdHJpbmcgaW5kZXgsCiAgICBzdHJpbmcgdW5pdCwKICAgIHVpbnQyNTYgYW1vdW50LAogICAgc3RyaW5nIGlwZnMsCiAgICB1aW50MjU2IHRvdGFsCiAgKTsKCiAgZXZlbnQgU2hpcCAoCiAgICBzdHJpbmcgaW5kZXgsCiAgICB1aW50MjU2IHRvdGFsCiAgKTsKCiAgZXZlbnQgTWludCAoCiAgICB1aW50MjU2IGFtb3VudCwKICAgIHVpbnQyNTYgdG90YWwKICApOwoKICBldmVudCBBbGNoZW15ICgKICAgIHVpbnQyNTYgYW1vdW50LAogICAgdWludDI1NiB0b3RhbAogICk7CgogIGV2ZW50IEJ1eSAoCiAgICBzdHJpbmcgaW5kZXgsCiAgICBhZGRyZXNzIGZyb20sCiAgICB1aW50MjU2IGZlZSwKICAgIHVpbnQyNTYgcHJpY2UKICApOwoKCgoKCgogIC8vID09PT09PT09PSDmk4HmnInogIXmlrnms5UgPT09PT09PT09CgogIC8qKgogICAqIOaTjeS9nOWtmOiyqC3pgLLosqgKICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOe0gOmMhOaWsOWinueahOeZvemHke+8jOe0gOmMhOizh+ioiu+8mgogICAqICAgIC0gaW5kZXg6IOeZvemHkee3qOiZnwogICAqICAgIC0gdW5pdDog55m96YeR5Zau5L2NCiAgICogICAgLSBhbW91bnQ6IOaVuOmHjwogICAqICAgIC0gaXBmczog55m96YeR6K2J5piOVVJMCiAgICogIC0g5aKe5Yqg55m96YeR57i95bqr5a2Y5pW46YeP77yM6YeP54K6YW1vdW50CiAgICoKICAgKiBSZXF1aXJlczoKICAgKiAgLSDln7fooYzogIXpoIjngrpvd25lcgogICAqICAtIOeZvemHkee3qOiZn2luZGV45LiN6IO96YeN6KSHCiAgICogIC0g5Zau5L2N6aCI562J5pa855uu5YmN5ZCI57SE5omA6Kit5a6a55qE5Zau5L2NCiAgICogIC0g6YePYW1vdW506ZyA5aSn5pa8MAogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDln7fooYzmiJDlip/mmYLvvIzlm57lgrN0cnVlCiAgICoKICAgKiBFdmVudHM6CiAgICogIC0gU3RvY2s6IOWft+ihjOaIkOWKn+aZguinuOeZvAogICAqLwogIGZ1bmN0aW9uIHN0b2NrKHN0cmluZyBfaW5kZXgsIHN0cmluZyBfdW5pdCwgdWludDI1NiBfYW1vdW50LCBzdHJpbmcgX2lwZnMpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICBieXRlczMyIF9iaW5kZXggPSBDb252ZXJ0U3RyaW5nQnl0ZS5zdHJpbmdUb0J5dGVzMzIoX2luZGV4KTsKCiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgIHJlcXVpcmUoX3VuaXQudG9TbGljZSgpLmVxdWFscyh1bml0LnRvU2xpY2UoKSkpOwogICAgcmVxdWlyZSghKHN0b3JlaG91c2VbX2JpbmRleF0uYW1vdW50ID4gMCkpOwoKICAgIEJ1bGxpb24gYnVsbGlvbiA9IHN0b3JlaG91c2VbX2JpbmRleF07CiAgICBidWxsaW9uLmluZGV4ID0gX2luZGV4OwogICAgYnVsbGlvbi51bml0ID0gX3VuaXQ7CiAgICBidWxsaW9uLmFtb3VudCA9IF9hbW91bnQ7CiAgICBidWxsaW9uLmlwZnMgPSBfaXBmczsKCiAgICAvLyDliqDlhaXlgInlhLLnm67pjIQKICAgIHN0b3JlaG91c2VJbmRleC5wdXNoKF9iaW5kZXgpOwogICAgLy8g5Yqg5YWl5YCJ5YSyCiAgICBzdG9yZWhvdXNlW19iaW5kZXhdID0gYnVsbGlvbjsKCiAgICAvLyDlop7liqDnuL3luqvlrZgKICAgIHRvdGFsID0gdG90YWwuYWRkKF9hbW91bnQpOwoKICAgIFN0b2NrKGJ1bGxpb24uaW5kZXgsIGJ1bGxpb24udW5pdCwgYnVsbGlvbi5hbW91bnQsIGJ1bGxpb24uaXBmcywgdG90YWwpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICog5pON5L2c5a2Y6LKoLeWHuuiyqAogICAqCiAgICog5q2k5pa55rOV5Z+36KGM77yaCiAgICogIC0g56e76Zmk55m96YeR5bqr5a2YCiAgICogIC0g5rib5bCR55m96YeR57i95bqr5a2Y6YeP77yM6YeP54K655m96YeR5bqr5a2Y55qE5pW46YePCiAgICoKICAgKiBSZXF1aXJlczoKICAgKiAgLSDln7fooYzogIXngrpvd25lcgogICAqICAtIOeZvemHkee3qOiZn2luZGV46ZyA5a2Y5Zyo5pa857SA6YyE77yI5bey5L2/55Soc3RvY2vmlrnms5XmlrDlop7oqbLluqvlrZjvvIkKICAgKiAgLSDnmb3ph5HnuL3luqvlrZjpnIDotrPlpKDvvIzlpKfmlrzmjIflrprnmb3ph5HluqvlrZjnmoTmlbjph48KICAgKgogICAqIFJldHVybnM6CiAgICogIC0gYm9vbDog5Z+36KGM5oiQ5Yqf5pmC77yM5Zue5YKzdHJ1ZQogICAqCiAgICogRXZlbnRzOgogICAqICAtIFNoaXA6IOWft+ihjOaIkOWKn+aZguinuOeZvAogICAqLwogIGZ1bmN0aW9uIHNoaXAoc3RyaW5nIF9pbmRleCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIGJ5dGVzMzIgX2JpbmRleCA9IENvbnZlcnRTdHJpbmdCeXRlLnN0cmluZ1RvQnl0ZXMzMihfaW5kZXgpOwoKICAgIHJlcXVpcmUoc3RvcmVob3VzZVtfYmluZGV4XS5hbW91bnQgPiAwKTsKICAgIEJ1bGxpb24gYnVsbGlvbiA9IHN0b3JlaG91c2VbX2JpbmRleF07CiAgICByZXF1aXJlKHRvdGFsLnN1YihidWxsaW9uLmFtb3VudCkgPj0gMCk7CgogICAgdWludDI1NiB0bXBBbW91bnQgPSBidWxsaW9uLmFtb3VudDsKCiAgICBmb3IgKHVpbnQyNTYgaW5kZXggPSAwOyBpbmRleCA8IHN0b3JlaG91c2VJbmRleC5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgQnVsbGlvbiBfYnVsbGlvbiA9IHN0b3JlaG91c2Vbc3RvcmVob3VzZUluZGV4W2luZGV4XV07CiAgICAgIGlmIChfYnVsbGlvbi5pbmRleC50b1NsaWNlKCkuZXF1YWxzKF9pbmRleC50b1NsaWNlKCkpKSB7CiAgICAgICAgLy8g5b6e5YCJ5YSy55uu6YyE56e76ZmkCiAgICAgICAgZGVsZXRlIHN0b3JlaG91c2VJbmRleFtpbmRleF07CiAgICAgIH0KICAgIH0KICAgIC8vIOW+nuWAieWEsuenu+mZpAogICAgZGVsZXRlIHN0b3JlaG91c2VbX2JpbmRleF07CiAgICAvLyDmuJvlsJHnuL3luqvlrZgKICAgIHRvdGFsID0gdG90YWwuc3ViKHRtcEFtb3VudCk7CgogICAgU2hpcChidWxsaW9uLmluZGV4LCB0b3RhbCk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiDpkYTluaMKICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOWinuWKoOeZvemHkeS7o+W5o+aVuOmHjwogICAqICAtIOa4m+Wwkee4veeZvemHkeW6q+WtmAogICAqCiAgICogUmVxdWlyZXM6CiAgICogIC0g5Z+36KGM6ICF54K6b3duZXIKICAgKiAgLSDnmb3ph5HnuL3luqvlrZjpnIDotrPlpKDvvIzljbPlpKfmlrznrYnmlrxwdEFtb3VudAogICAqICAtIOeZvemHkeS7o+W5o+WQiOe0hOmcgOW3suioreWumu+8iHNldFRva2VuQWRkcmVzc+aWueazle+8iQogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDln7fooYzmiJDlip/mmYLvvIzlm57lgrN0cnVlCiAgICoKICAgKiBFdmVudHM6CiAgICogIC0gTWludDog5Z+36KGM5oiQ5Yqf5pmC6Ke455m8CiAgICovCiAgZnVuY3Rpb24gbWludCh1aW50MjU2IF9wdEFtb3VudCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMHgwKTsKCiAgICB1aW50MjU2IGFtb3VudCA9IGNvbnZlcnQyUGxhdGludW1Ub2tlbihfcHRBbW91bnQpOwogICAgLy8g55m86YCBdG9rZW7nmoTlop7liqDmtrXlvI8KICAgIGJvb2wgcHJvZHVjZWQgPSBjb2luLnByb2R1Y2UoYW1vdW50KTsKICAgIHJlcXVpcmUocHJvZHVjZWQpOwoKICAgIHRvdGFsID0gdG90YWwuc3ViKF9wdEFtb3VudCk7CgogICAgTWludChfcHRBbW91bnQsIHRvdGFsKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOeFiemHkQogICAqCiAgICog5q2k5pa55rOV5Z+36KGM77yaCiAgICogIC0g5rib5bCR55m96YeR5Luj5bmjCiAgICogIC0g5aKe5Yqg57i955m96YeR5bqr5a2YCiAgICoKICAgKiBSZXF1aXJlczoKICAgKiAgLSDln7fooYzogIXngrpvd25lcgogICAqICAtIOmcgOW3suioreWumueZvemHkeS7o+W5o+WQiOe0hO+8iHNldFRva2VuQWRkcmVzc+aWueazle+8iQogICAqICAtIOeZvemHkeS7o+W5o293bmVy5omA5pOB5pyJ55qE5Luj5bmj6Laz5aSg77yM5Y2zdG9rZW5BbW91bnTlsI/mlrznrYnmlrzku6PluaNvd25lcueahOeZvemHkeS7o+W5o+aVuOmHjwogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDln7fooYzmiJDlip/vvIzlm57lgrN0cnVlCiAgICoKICAgKiBFdmVudHM6CiAgICogIC0gQWxjaGVteTog5Z+36KGM5oiQ5Yqf5pmC6Ke455m8CiAgICovCiAgZnVuY3Rpb24gYWxjaGVteSh1aW50MjU2IF90b2tlbkFtb3VudCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMHgwKTsKCiAgICB1aW50MjU2IGFtb3VudCA9IGNvbnZlcnQyUGxhdGludW0oX3Rva2VuQW1vdW50KTsKICAgIGJvb2wgcmVkdWNlZCA9IGNvaW4ucmVkdWNlKF90b2tlbkFtb3VudCk7CiAgICByZXF1aXJlKHJlZHVjZWQpOwoKICAgIHRvdGFsID0gdG90YWwuYWRkKGFtb3VudCk7CgogICAgQWxjaGVteShhbW91bnQsIHRvdGFsKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOioreWumi3ljK/njocKICAgKgogICAqIOWMr+eOh+imj+WJhzoKICAgKiAgLSDnmb3ph5Hmlbjph48gKiDljK/njocgPSDnmb3ph5Hku6PluaPmlbjph48KICAgKiAgLSDnmb3ph5Hku6PluaPmlbjph48gLyDljK/njocgPSDnmb3ph5Hmlbjph48KICAgKgogICAqIFJlcXVpcmVzOgogICAqICAtIOWft+ihjOiAheeCum93bmVyCiAgICogIC0g5Yyv546HcmF0ZemcgOWkp+aWvDAKICAgKgogICAqIFJldHVybnM6CiAgICogIC0gYm9vbDog5Z+36KGM5oiQ5Yqf77yM5Zue5YKzdHJ1ZQogICAqLwogIGZ1bmN0aW9uIHNldFJhdGUodWludDI1NiBfcmF0ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3JhdGUgPiAwKTsKCiAgICByYXRlID0gX3JhdGU7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOioreWumi1Ub2tlbuWcsOWdgAogICAqCiAgICog6Kit5a6a55m96YeR5ZCI57SE5Zyw5Z2ACiAgICoKICAgKiBSZXF1aXJlczoKICAgKiAgLSDln7fooYzogIXngrpvd25lcgogICAqICAtIOWQiOe0hOWcsOWdgGFkZHJlc3PkuI3ngrowCiAgICoKICAgKiBSZXR1cm5zOgogICAqICAtIGJvb2w6IOWft+ihjOaIkOWKn++8jOWbnuWCs3RydWUKICAgKi8KICBmdW5jdGlvbiBzZXRUb2tlbkFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gMHgwKTsKCiAgICBjb2luID0gUGxhdGludW1Ub2tlbihfYWRkcmVzcyk7CiAgICB0b2tlbiA9IF9hZGRyZXNzOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiDos7zosrfph5Hmop0KICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOaJo+mZpGJ1eWVy55qE55m96YeR5Luj5bmjCiAgICogIC0g56e76Zmk55m96YeR5bqr5a2Y77yM5Luj6KGoYnV5ZXLlt7Llvp7luqvlrZjosrfotbDnmb3ph5EKICAgKgogICAqIFJlcXVpcmVzOgogICAqICAtIOWft+ihjOiAheeCum93bmVyCiAgICogIC0g55m96YeR57eo6JmfaW5kZXjpnIDlrZjlnKjmlrzntIDpjITvvIjlt7Lkvb/nlKhzdG9ja+aWueazleaWsOWinuipsuW6q+WtmO+8iQogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDln7fooYzmiJDlip/vvIzlm57lgrN0cnVlCiAgICoKICAgKiBFdmVudHM6CiAgICogIC0gQnV5OiDln7fooYzmiJDlip/mmYLop7jnmbwKICAgKi8KICBmdW5jdGlvbiBidXkoc3RyaW5nIF9pbmRleCwgYWRkcmVzcyBidXllcikgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUodG9rZW4gIT0gMHgwKTsKICAgIGJ5dGVzMzIgX2JpbmRleCA9IENvbnZlcnRTdHJpbmdCeXRlLnN0cmluZ1RvQnl0ZXMzMihfaW5kZXgpOwogICAgdWludDI1NiBmZWUgPSBjb2luLmZlZSgpOwogICAgcmVxdWlyZShzdG9yZWhvdXNlW19iaW5kZXhdLmFtb3VudCA+IDApOwoKICAgIEJ1bGxpb24gYnVsbGlvbiA9IHN0b3JlaG91c2VbX2JpbmRleF07CiAgICB1aW50MjU2IHRva2VuUHJpY2UgPSBjb252ZXJ0MlBsYXRpbnVtVG9rZW4oYnVsbGlvbi5hbW91bnQpOwogICAgdWludDI1NiB0b2tlblByaWNlRmVlID0gdG9rZW5QcmljZS5hZGQoZmVlKTsKCiAgICAvLyDovYnluLMKICAgIGJvb2wgdHJhbnNmZXJlZCA9IGNvaW4udHJhbnNmZXJGcm9tKGJ1eWVyLCBjb2luLm93bmVyKCksIHRva2VuUHJpY2VGZWUpOwogICAgcmVxdWlyZSh0cmFuc2ZlcmVkKTsKCiAgICAvLyDnm7TmjqXmiorliZvliZvos6Plh7rnmoTlg7nmoLznhYnph5EKICAgIGJvb2wgcmVkdWNlZCA9IGNvaW4ucmVkdWNlKHRva2VuUHJpY2UpOwogICAgcmVxdWlyZShyZWR1Y2VkKTsKCiAgICAvLyDmuJvlsJHluqvlrZgKICAgIGZvciAodWludDI1NiBpbmRleCA9IDA7IGluZGV4IDwgc3RvcmVob3VzZUluZGV4Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICBCdWxsaW9uIF9idWxsaW9uID0gc3RvcmVob3VzZVtzdG9yZWhvdXNlSW5kZXhbaW5kZXhdXTsKICAgICAgaWYgKF9idWxsaW9uLmluZGV4LnRvU2xpY2UoKS5lcXVhbHMoX2luZGV4LnRvU2xpY2UoKSkpIHsKICAgICAgICAvLyDlvp7lgInlhLLnm67pjITnp7vpmaQKICAgICAgICBkZWxldGUgc3RvcmVob3VzZUluZGV4W2luZGV4XTsKICAgICAgfQogICAgfQogICAgLy8g5b6e5YCJ5YSy56e76ZmkCiAgICBkZWxldGUgc3RvcmVob3VzZVtfYmluZGV4XTsKCiAgICBCdXkoX2luZGV4LCBidXllciwgZmVlLCB0b2tlblByaWNlKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKCgoKICAvLyA9PT09PT09PT0g5YWs5YWx5pa55rOVID09PT09PT09PQoKICAvLyDmr5TnjofovYnmj5st55m96YeR5bmj5o+b55m96YeRCiAgZnVuY3Rpb24gY29udmVydDJQbGF0aW51bSh1aW50MjU2IF9hbW91bnQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBfYW1vdW50LmRpdihyYXRlKTsKICB9CgogIC8vIOavlOeOh+i9ieaPmy3nmb3ph5Hmj5vnmb3ph5HluaMKICBmdW5jdGlvbiBjb252ZXJ0MlBsYXRpbnVtVG9rZW4odWludDI1NiBfYW1vdW50KSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gX2Ftb3VudC5tdWwocmF0ZSk7CiAgfQoKICAvLyDph5Hmop3os4foqIoKICBmdW5jdGlvbiBpbmZvKHN0cmluZyBfaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZywgc3RyaW5nLCB1aW50MjU2LCBzdHJpbmcpIHsKICAgIGJ5dGVzMzIgX2JpbmRleCA9IENvbnZlcnRTdHJpbmdCeXRlLnN0cmluZ1RvQnl0ZXMzMihfaW5kZXgpOwogICAgcmVxdWlyZShzdG9yZWhvdXNlW19iaW5kZXhdLmFtb3VudCA+IDApOwoKICAgIEJ1bGxpb24gYnVsbGlvbiA9IHN0b3JlaG91c2VbX2JpbmRleF07CgogICAgcmV0dXJuIChidWxsaW9uLmluZGV4LCBidWxsaW9uLnVuaXQsIGJ1bGxpb24uYW1vdW50LCBidWxsaW9uLmlwZnMpOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmNvbnRyYWN0IFBsYXRpbnVtVG9rZW4gaXMgT3duYWJsZSwgRVJDMjAgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIC8vID09PT09PT09PSDlrqPlkYogPT09PT09PT09CgogIC8vIOeJiOacrAogIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIwLjAuMSI7CiAgLy8g5ZCN56ixCiAgc3RyaW5nIHB1YmxpYyBuYW1lOwogIC8vIOaomeiomAogIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogIC8vIOWwj+aVuOm7nuS9jeaVuAogIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzOwogIC8vIOeZvemHkeWQiOe0hOWcsOWdgAogIGFkZHJlc3MgcHVibGljIHBsYXRpbnVtOwoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIC8vIOe4veS+m+e1pumHjwogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIC8vIOaJi+e6jOiyuwogIHVpbnQyNTYgcHVibGljIGZlZSA9IDEwOwoKICAvLyA9PT09PT09PT0g5Yid5aeL5YyWID09PT09PT09PQogIGZ1bmN0aW9uIFBsYXRpbnVtVG9rZW4oCiAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICApIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsKICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsKICAgIG5hbWUgPSB0b2tlbk5hbWU7CiAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsKICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOwogIH0KCiAgLyoqCiAgICogVHJhbnNmZXIKICAgKgogICAqIOWCs+mAgeS6i+S7tu+8jOeVtuacieeZvemHkeS7o+W5o+eahOaJgOacieasiui9ieenu+aZgu+8jOatpOS6i+S7tuacg+iiq+inuOeZvAogICAqLwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAvLyA9PT09PT09PT0g5qyK6ZmQ5o6n566hID09PT09PT09PQogIG1vZGlmaWVyIGlzUGxhdGludW1Db250cmFjdCgpIHsKICAgIHJlcXVpcmUocGxhdGludW0gIT0gMHgwKTsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBwbGF0aW51bSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgaXNPd25lck9yUGxhdGludW1Db250cmFjdCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApICYmIChtc2cuc2VuZGVyID09IHBsYXRpbnVtIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpKTsKICAgIF87CiAgfQoKICAvKioKICAgKiDlop7nlKIKICAgKgogICAqICDmraTmlrnms5Xln7fooYzvvJoKICAgKiAgICAtIOWinuWKoG93bmVy55qEYmFsYW5jZe+8jOmHj+eCuuaMh+WumueahGFtb3VudAogICAqICAgIC0g5aKe5YqgdG90YWxTdXBwbHnvvIzph4/ngrrmjIflrprnmoRhbW91bnQKICAgKgogICAqICBSZXF1aXJlczoKICAgKiAgICAtIOWft+ihjOiAheeCuueZvemHkeWQiOe0hO+8iOWPr+mAj+mBjnNldFBsYXRpbnVtQWRkcmVzc+aWueazleioreWumu+8iQogICAqICAgIC0gYW1vdW506aCI6Kit5a6a54K6MOS7peS4igogICAqCiAgICogIFJldHVybjoKICAgKiAgICAtIGJvb2w6IOWft+ihjOaIkOWKn+WbnuWCs3RydWUKICAgKi8KICBmdW5jdGlvbiBwcm9kdWNlKHVpbnQyNTYgYW1vdW50KSBpc1BsYXRpbnVtQ29udHJhY3QgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLmFkZChhbW91bnQpOwogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoYW1vdW50KTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKiDmuJvnlKIKICAgKgogICAqICDmraTmlrnms5Xln7fooYzvvJoKICAgKiAgICAtIOa4m+WwkW93bmVy55qEYmFsYW5jZe+8jOmHj+eCuuaMh+WumueahGFtb3VudAogICAqICAgIC0g5rib5bCRdG90YWxTdXBwbHnvvIzph4/ngrrmjIflrprnmoRhbW91bnQKICAgKgogICAqICBSZXF1aXJlczoKICAgKiAgICAtIOWft+ihjOiAheeCuueZvemHkeWQiOe0hO+8iOWPr+mAj+mBjnNldFBsYXRpbnVtQWRkcmVzc+aWueazleioreWumu+8iQogICAqICAgIC0gYW1vdW506aCI6Kit5a6a54K6MOS7peS4igogICAqICAgIC0gb3duZXLnmoRiYWxhbmNl6ZyA5aSn5pa8562J5pa85oyH5a6a55qEYW1vdW50CiAgICogICAgLSB0b3RhbFN1cHBseemcgOWkp+aWvOetieaWvOaMh+WumueahGFtb3VudAogICAqCiAgICogIFJldHVybjoKICAgKiAgICAtIGJvb2w6IOWft+ihjOaIkOWKn+WbnuWCs3RydWUKICAgKi8KICBmdW5jdGlvbiByZWR1Y2UodWludDI1NiBhbW91bnQpIGlzUGxhdGludW1Db250cmFjdCByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXS5zdWIoYW1vdW50KSA+PSAwKTsKICAgIHJlcXVpcmUodG90YWxTdXBwbHkuc3ViKGFtb3VudCkgPj0gMCk7CgogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1YihhbW91bnQpOwogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoYW1vdW50KTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOioreWumi3nmb3ph5HlkIjntITlnLDlnYAKICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOS/ruaUueatpOWQiOe0hOaJgOiqjeitmOeahOeZvemHkeWQiOe0hOWcsOWdgO+8jOatpOWcsOWdgOaxuuWumuiDveWft+ihjHByb2R1Y2XlkoxyZWR1Y2Xmlrnms5XnmoTlkIjntIQKICAgKgogICAqIFJlcXVpcmVzOgogICAqICAtIOWft+ihjOiAhemgiOeCum93bmVyCiAgICogIC0g5Zyw5Z2A5LiN6IO96Kit54K6MAogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDoqK3lrprmiJDlip/mmYLlm57lgrN0cnVlCiAgICovCiAgZnVuY3Rpb24gc2V0UGxhdGludW1BZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF9hZGRyZXNzICE9IDB4MCk7CgogICAgcGxhdGludW0gPSBfYWRkcmVzczsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICog6Kit5a6aLeaJi+e6jOiyuwogICAqCiAgICog5omL57qM6LK76KaP5YmH77yaCiAgICogIC0g6LO86LK36YeR5qKd5pmC77yM5Luj5bmj6YeP57i96YeP5aKe5Yqg5omL57qM6LK754K657i95omj6Zmk5Luj5bmj57i96YePCiAgICoKICAgKiBSZXF1aXJlczoKICAgKiAgLSDln7fooYzogIXngrpvd25lcgogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBib29sOiDln7fooYzmiJDlip/vvIzlm57lgrN0cnVlCiAgICovCiAgZnVuY3Rpb24gc2V0RmVlKHVpbnQyNTYgX2ZlZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX2ZlZSA+PSAwKTsKCiAgICBmZWUgPSBfZmVlOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiDkuqTmmJPvvIzovYnnp7vnmb3ph5Hku6PluaMKICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOa4m+WwkWZyb23nmoTnmb3ph5Hku6PluaPvvIzph4/ngrp2YWx1ZQogICAqICAtIOWinuWKoHRv55qE55m96YeR5Luj5bmj77yM6YeP54K6dmFsdWUKICAgKgogICAqIFJlcXVpcmVzOgogICAqICAtIOWft+ihjOiAheeCum93bmVyCiAgICoKICAgKiBSZXR1cm5zOgogICAqICAtIGJvb2w6IOWft+ihjOaIkOWKn+WbnuWCs3RydWUKICAgKgogICAqIEV2ZW50czoKICAgKiAgLSBUcmFuc2Zlcjog5Z+36KGM5oiQ5Yqf5pmC77yM6Ke455m85q2k5LqL5Lu2CiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CgogICAgVHJhbnNmZXIob3duZXIsIF90bywgX3ZhbHVlKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOafpeipoueZvemHkeS7o+W5o+mkmOmhjQogICAqCiAgICogUmV0dXJuczoKICAgKiAgLSBiYWxhbmNlOiDmjIflrpphZGRyZXNz55qE55m96YeR5Luj5bmj6aSY6aGNCiAgICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgLyoqCiAgICog6L2J5bizCiAgICoKICAgKiDlr6bpmpvlsIdhcHByb3Zl6YGO55qEdG9rZW7mlbjph4/pgLLooYzkuqTmmJMKICAgKgogICAqIOatpOaWueazleWft+ihjO+8mgogICAqICAtIOS6pOaYk+aMh+WumuaVuOmHj+eahOS7o+W5owogICAqCiAgICogUmVxdWlyZXM6CiAgICogIC0g5Lqk5piT55qE5Luj5bmj5pW46YePdmFsdWXpnIDlpKfmlrwwCiAgICogIC0gYWxsb3dlZOeahOS7o+W5o+aVuOmHj+mcgOWkp+aWvHZhbHVl77yIYWxsb3dlZOeahOS7o+W5o+WFiOeUseWRvOWPq2FwcHJvdmXmlrnms5XoqK3lrprvvIkKICAgKgogICAqIFJldHVybnM6CiAgICogIC0gYm9vbDog5Z+36KGM5oiQ5Yqf77yM5Zue5YKzdHJ1ZQogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlzT3duZXJPclBsYXRpbnVtQ29udHJhY3QgcmV0dXJucyAoYm9vbCkgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVtvd25lcl07CgogICAgdWludDI1NiB2YWx1ZVN1YkZlZSA9IF92YWx1ZS5zdWIoZmVlKTsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQodmFsdWVTdWJGZWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLmFkZChmZWUpOwogICAgYWxsb3dlZFtfZnJvbV1bb3duZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIOi9ieW4syAtIOWFgeiosQogICAqCiAgICog5YWB6Kix5LiA5a6a5pW46YeP55qE5Luj5bmj5Y+v5Lul6L2J5biz6Iezb3duZXIKICAgKgogICAqIOassuS/ruaUueWFgeioseWAvO+8jOmcgOWFiOWft+ihjOatpOaWueazleWwh3ZhbHVl6Kit54K6MO+8jOWGjeWft+ihjOS4gOasoeatpOaWueazleWwh3ZhbHVl6Kit54K65oyH5a6a5YC8CiAgICoKICAgKiDmraTmlrnms5Xmk43kvZzvvJoKICAgKiAgLSDkv67mlLlhbGxvd2Vk5YC877yM57SA6YyEc2VuZGVy5YWB6Kix6L2J5bizdmFsdWXmlbjph4/ku6PluaPntaZvd25lcgogICAqICAtIGFsbG93ZWTlgLzmnInoqK3lrprmmYLvvIx2YWx1ZemgiOeCujAKICAgKiAgLSBhbGxvd2Vk5YC85pyq6Kit5a6a5pmC77yMdmFsdWXkuI3ngrowCiAgICoKICAgKiBSZXR1cm5zOgogICAqICAtIGJvb2w6IOWft+ihjOaIkOWKn++8jOWbnuWCs3RydWUKICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX2R1bW15LCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW293bmVyXSA9PSAwKSk7CiAgICAvLyBUT0RPIHdoZXRoZXIgb3Igbm90IHRvIGNoZWNrb3V0IHRoZSBiYWxhbmNlIG9mIHRoZSBzZW5kZXIKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW293bmVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIG93bmVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiDovYnluLMgLSDmn6XoqaLlhYHoqLHlgLwKICAgKgogICAqIFJldHVybnM6CiAgICogIC0gdW5pdDI1Njog5YWB6Kix5YC8CiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQ=='.
	

]
