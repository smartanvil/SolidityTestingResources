Class {
	#name : #SRTfeb49ac4e7e82c409ddff93f351f3dbefbbebffd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfeb49ac4e7e82c409ddff93f351f3dbefbbebffd >> base64 [
	^ ''.
	

]
