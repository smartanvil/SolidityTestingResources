Class {
	#name : #SRTcc0b4f39d9b151dbb6b8bf4bd89bac75f4c091a0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc0b4f39d9b151dbb6b8bf4bd89bac75f4c091a0 >> base64 [
	^ ''.
	

]
