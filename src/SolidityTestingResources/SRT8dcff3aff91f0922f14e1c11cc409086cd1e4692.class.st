Class {
	#name : #SRT8dcff3aff91f0922f14e1c11cc409086cd1e4692,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8dcff3aff91f0922f14e1c11cc409086cd1e4692 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgppbnRlcmZhY2UgSUVSQzIwIHsKCWZ1bmN0aW9uIFRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCB0b3RhbFN1cHBseSk7CglmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpOwoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CglldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKfQoKCi8qKgoqIEB0aXRsZSBTYWZlTWF0aAoqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiovCmxpYnJhcnkgU2FmZU1hdGggewoJZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CgkJdWludDI1NiBjID0gYSAqIGI7CgkJYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKCQlyZXR1cm4gYzsKCX0KCglmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKCQkvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKCQl1aW50MjU2IGMgPSBhIC8gYjsKCQkvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAoJCXJldHVybiBjOwoJfQoKCWZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewoJCWFzc2VydChiIDw9IGEpOwoJCXJldHVybiBhIC0gYjsKCX0KCglmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKCQl1aW50MjU2IGMgPSBhICsgYjsKCQlhc3NlcnQoYyA+PSBhKTsKCQlyZXR1cm4gYzsKCX0KfQoKCgpjb250cmFjdCBDaHJpc0NvaW4gaXMgSUVSQzIwewoJdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgoJdWludDI1NiBwdWJsaWMgX3RvdGFsU3VwcGx5ID0gMDsKCglib29sIHB1YmxpYyBwdXJjaGFzaW5nQWxsb3dlZCA9IHRydWU7Cglib29sIHB1YmxpYyBib251c0FsbG93ZWQgPSB0cnVlOwkKCglzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJDSEMiOy8vU2ltYm9sbyBkZWwgdG9rZW4gZXMuIEVUSAoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkNocmlzQ29pbiI7IC8vTm9tZSBkZWwgdG9rZW4gZXMuIEV0aGVyZXVtCgl1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAvL051bWVybyBkaSBkZWNpbWFsaSBkZWwgdG9rZW4sIGlsIGJpdGNvaW4gbmUgaGEgOCwgZXRoZXJldW0gMTgKCgl1aW50MjU2IHB1YmxpYyBDUkVBVE9SX1RPS0VOID0gMTEwMDAwMDAgKiAxMCoqZGVjaW1hbHM7IC8vTnVtZXJvIG1hc3NpbW8gZGkgdG9rZW4gZGEgZW1ldHRlcmUgCgl1aW50MjU2IHB1YmxpYyBDUkVBVE9SX1RPS0VOX0VORCA9IDYwMDAwMCAqIDEwKipkZWNpbWFsczsJLy9udW1lcm8gZGkgdG9rZW4gcmltYW5lbnRpIGFsIGNyZWF0b3JlIAoJdWludDI1NiBwdWJsaWMgY29uc3RhbnQgUkFURSA9IDQwMDsgLy9RdWFudGkgdG9rZW4gaW52aWFyZSBwZXIgb2duaSBldGhlciByaWNldnV0bwoJdWludCBjb25zdGFudCBMRU5HSFRfQk9OVVMgPSA3ICogMSBkYXlzOwkvL2R1cmF0YSBwZXJpb2RvIGJvbnVzCgl1aW50IGNvbnN0YW50IFBFUkNfQk9OVVMgPSA0MDsgLy9QZXJjZW50dWFsZSB0b2tlbiBib251cwoJdWludCBjb25zdGFudCBMRU5HSFRfQk9OVVMyID0gNyAqIDEgZGF5czsJLy9kdXJhdGEgcGVyaW9kbyBib251cwoJdWludCBjb25zdGFudCBQRVJDX0JPTlVTMiA9IDIwOyAvL1BlcmNlbnR1YWxlIHRva2VuIGJvbnVzCgl1aW50IGNvbnN0YW50IExFTkdIVF9CT05VUzMgPSA3ICogMSBkYXlzOwkvL2R1cmF0YSBwZXJpb2RvIGJvbnVzCgl1aW50IGNvbnN0YW50IFBFUkNfQk9OVVMzID0gMTA7IC8vUGVyY2VudHVhbGUgdG9rZW4gYm9udXMKCXVpbnQgY29uc3RhbnQgTEVOR0hUX0JPTlVTNCA9IDcgKiAxIGRheXM7CS8vZHVyYXRhIHBlcmlvZG8gYm9udXMKCXVpbnQgY29uc3RhbnQgUEVSQ19CT05VUzQgPSA1OyAvL1BlcmNlbnR1YWxlIHRva2VuIGJvbnVzCgkJCglhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgltYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCXVpbnQgc3RhcnQ7Cgl1aW50IGVuZDsKCXVpbnQgZW5kMjsKCXVpbnQgZW5kMzsKCXVpbnQgZW5kNDsKCQoJLy9GdW56aW9uZSBjaGUgcGVybWV0dGUgZGkgcmljZXZlcmUgdG9rZW4gc29sbyBzcGVjaWZpY2FuZG8gbCdpbmRpcml6em8KCWZ1bmN0aW9uKCkgcGF5YWJsZXsKCQlyZXF1aXJlKHB1cmNoYXNpbmdBbGxvd2VkKTsJCQoJCWNyZWF0ZVRva2VucygpOwoJfQogICAKCS8vU2FsdmlhbW8gbCdpbmRpcml6em8gZGVsIGNyZWF0b3JlIGRlbCBjb250cmF0dG8gcGVyIGludmlhcmUgZ2xpIGV0aGVyIHJpY2V2dXRpCglmdW5jdGlvbiBDaHJpc0NvaW4oKXsKCQlvd25lciA9IG1zZy5zZW5kZXI7CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBDUkVBVE9SX1RPS0VOOwoJCXN0YXJ0ID0gbm93OwoJCWVuZCA9IG5vdy5hZGQoTEVOR0hUX0JPTlVTKTsJLy9maW5lIHBlcmlvZG8gYm9udXMKCQllbmQyID0gZW5kLmFkZChMRU5HSFRfQk9OVVMyKTsJLy9maW5lIHBlcmlvZG8gYm9udXMKCQllbmQzID0gZW5kMi5hZGQoTEVOR0hUX0JPTlVTMyk7CS8vZmluZSBwZXJpb2RvIGJvbnVzCgkJZW5kNCA9IGVuZDMuYWRkKExFTkdIVF9CT05VUzQpOwkvL2ZpbmUgcGVyaW9kbyBib251cwoJfQogICAKCS8vQ3JlYXppb25lIGRlaSB0b2tlbgoJZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgcGF5YWJsZXsKCQlyZXF1aXJlKG1zZy52YWx1ZSA+PSAwKTsKCQl1aW50MjU2IHRva2VucyA9IG1zZy52YWx1ZS5tdWwoMTAgKiogZGVjaW1hbHMpOwoJCXRva2VucyA9IHRva2Vucy5tdWwoUkFURSk7CgkJdG9rZW5zID0gdG9rZW5zLmRpdigxMCAqKiAxOCk7CgkJaWYgKGJvbnVzQWxsb3dlZCkKCQl7CgkJCWlmIChub3cgPj0gc3RhcnQgJiYgbm93IDwgZW5kKQoJCQl7CgkJCXRva2VucyArPSB0b2tlbnMubXVsKFBFUkNfQk9OVVMpLmRpdigxMDApOwoJCQl9CgkJCWlmIChub3cgPj0gZW5kICYmIG5vdyA8IGVuZDIpCgkJCXsKCQkJdG9rZW5zICs9IHRva2Vucy5tdWwoUEVSQ19CT05VUzIpLmRpdigxMDApOwoJCQl9CgkJCWlmIChub3cgPj0gZW5kMiAmJiBub3cgPCBlbmQzKQoJCQl7CgkJCXRva2VucyArPSB0b2tlbnMubXVsKFBFUkNfQk9OVVMzKS5kaXYoMTAwKTsKCQkJfQoJCQlpZiAobm93ID49IGVuZDMgJiYgbm93IDwgZW5kNCkKCQkJewoJCQl0b2tlbnMgKz0gdG9rZW5zLm11bChQRVJDX0JPTlVTNCkuZGl2KDEwMCk7CgkJCX0KCQl9CgkJdWludDI1NiBzdW0yID0gYmFsYW5jZXNbb3duZXJdLnN1Yih0b2tlbnMpOwkJCgkJcmVxdWlyZShzdW0yID49IENSRUFUT1JfVE9LRU5fRU5EKTsKCQl1aW50MjU2IHN1bSA9IF90b3RhbFN1cHBseS5hZGQodG9rZW5zKTsJCQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHRva2Vucyk7CgkJYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1Yih0b2tlbnMpOwoJCV90b3RhbFN1cHBseSA9IHN1bTsKCQlvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOwoJCVRyYW5zZmVyKG93bmVyLCBtc2cuc2VuZGVyLCB0b2tlbnMpOwoJfQogICAKCS8vUml0b3JuYSBpbCBudW1lcm8gdG90YWxlIGRpIHRva2VuCglmdW5jdGlvbiBUb3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG90YWxTdXBwbHkpewoJCXJldHVybiBfdG90YWxTdXBwbHk7Cgl9CiAgIAoJLy9SaXRvcm5hIGlsIGJpbGFuY2lvIGRlbGwndXRlbnRlIGRpIHVuIGluZGlyaXp6bwoJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpewoJCXJldHVybiBiYWxhbmNlc1tfb3duZXJdOwoJfQoJCgkvL0FiaWxpdGEgbCdhY3F1aXN0byBkaSB0b2tlbgoJZnVuY3Rpb24gZW5hYmxlUHVyY2hhc2luZygpIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOyAKCQlwdXJjaGFzaW5nQWxsb3dlZCA9IHRydWU7Cgl9CgkKCS8vRGlzYWJpbGl0YSBsJ2FjcXVpc3RvIGRpIHRva2VuCglmdW5jdGlvbiBkaXNhYmxlUHVyY2hhc2luZygpIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoJCXB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7Cgl9ICAgCgkKCS8vQWJpbGl0YSBsYSBkaXN0cmlidXppb25lIGRpIGJvbnVzCglmdW5jdGlvbiBlbmFibGVCb251cygpIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOyAKCQlib251c0FsbG93ZWQgPSB0cnVlOwoJfQoJCgkvL0Rpc2FiaWxpdGEgbGEgZGlzdHJpYnV6aW9uZSBkaSBib251cwoJZnVuY3Rpb24gZGlzYWJsZUJvbnVzKCkgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgkJYm9udXNBbGxvd2VkID0gZmFsc2U7Cgl9ICAgCgoJLy9QZXIgaW52aWFyZSBpIFRva2VuCglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CgkJcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUJJiYgX3ZhbHVlID4gMCk7CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKCQliYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKCQlUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CgkJcmV0dXJuIHRydWU7Cgl9CiAgIAoJLy9JbnZpbyBkZWkgdG9rZW4gY29uIGRlbGVnYQoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKCQlyZXF1aXJlKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUJJiYgX3ZhbHVlID4gMCk7CgkJYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwoJCWJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwoJCWFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CgkJVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KICAgCgkvL0RlbGVnYXJlIHF1YWxjdW5vIGFsbCdpbnZpbyBkaSB0b2tlbgoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKCQlhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKCQlBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KICAgCgkvL1JpdG9ybmEgaWwgbnVtZXJvIGRpIHRva2VuIGNoZSB1biBkZWxlZ2F0byBwdSYjMjQyOyBhbmNvcmEgaW52aWFyZQoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZyl7CgkJcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07Cgl9CgkKCS8vYnJ1Y2lhIHR1dHRpIGkgdG9rZW4gcmltYW5lbnRpCglmdW5jdGlvbiBidXJuQWxsKCkgcHVibGljIHsJCQoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgkJYWRkcmVzcyBidXJuZXIgPSBtc2cuc2VuZGVyOwoJCXVpbnQyNTYgdG90YWwgPSBiYWxhbmNlc1tidXJuZXJdOwoJCWlmICh0b3RhbCA+IENSRUFUT1JfVE9LRU5fRU5EKSB7CgkJCXRvdGFsID0gdG90YWwuc3ViKENSRUFUT1JfVE9LRU5fRU5EKTsKCQkJYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKHRvdGFsKTsKCQkJaWYgKF90b3RhbFN1cHBseSA+PSB0b3RhbCl7CgkJCQlfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHkuc3ViKHRvdGFsKTsKCQkJfQoJCQlCdXJuKGJ1cm5lciwgdG90YWwpOwoJCX0KCX0KCQoJLy9icnVjaWEgbGEgcXVhbnRpdGEnIF92YWx1ZSBkaSB0b2tlbgoJZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoJCV92YWx1ZSA9IF92YWx1ZS5tdWwoMTAgKiogZGVjaW1hbHMpOwogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKCQl1aW50IHQgPSBiYWxhbmNlc1tidXJuZXJdLnN1YihfdmFsdWUpOwoJCXJlcXVpcmUodCA+PSBDUkVBVE9SX1RPS0VOX0VORCk7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgaWYgKF90b3RhbFN1cHBseSA+PSBfdmFsdWUpewoJCQlfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CgkJfQogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwoJfQoJCglldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKCWV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwoJZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsJICAgCn0='.
	

]
