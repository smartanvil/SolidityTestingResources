Class {
	#name : #SRT4c688949578b4fd0cb8f8993a0ec608659e05cf1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c688949578b4fd0cb8f8993a0ec608659e05cf1 >> base64 [
	^ ''.
	

]
