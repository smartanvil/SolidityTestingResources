Class {
	#name : #SRTda43120e633a1c7d2109a825b493a8ded27a9d1f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTda43120e633a1c7d2109a825b493a8ded27a9d1f >> base64 [
	^ ''.
	

]
