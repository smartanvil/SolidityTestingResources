Class {
	#name : #SRTbcff2d15c698d3874bc29aa170c89fd7a6146a4b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbcff2d15c698d3874bc29aa170c89fd7a6146a4b >> base64 [
	^ ''.
	

]
