Class {
	#name : #SRT9a6ad871e40e3ad74c55d94495e0207bce77c762,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a6ad871e40e3ad74c55d94495e0207bce77c762 >> base64 [
	^ ''.
	

]
