Class {
	#name : #SRT86789b2DE83B9A93F89F8C2Cb14d622CD73515e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86789b2DE83B9A93F89F8C2Cb14d622CD73515e9 >> base64 [
	^ ''.
	

]
