Class {
	#name : #SRT3dc460aca540d0add6debf147a06dc3f34e86eb0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3dc460aca540d0add6debf147a06dc3f34e86eb0 >> base64 [
	^ ''.
	

]
