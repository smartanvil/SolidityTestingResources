Class {
	#name : #SRTe522ec8a3455ba8845f7af8dcc308658a97aa867,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe522ec8a3455ba8845f7af8dcc308658a97aa867 >> base64 [
	^ ''.
	

]
