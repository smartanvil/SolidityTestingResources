Class {
	#name : #SRTe61cde6755f9d6ae7225b7990ae20aafc0af0336,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe61cde6755f9d6ae7225b7990ae20aafc0af0336 >> base64 [
	^ 'Y29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgQ29udHJhY3QgZm9yIG9iamVjdCB0aGF0IGhhdmUgYW4gb3duZXIKICovCmNvbnRyYWN0IE93bmVkIHsKICAgIC8qKgogICAgICogQ29udHJhY3Qgb3duZXIgYWRkcmVzcwogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvKioKICAgICAqIEBkZXYgRGVsZWdhdGUgY29udHJhY3QgdG8gYW5vdGhlciBwZXJzb24KICAgICAqIEBwYXJhbSBfb3duZXIgTmV3IG93bmVyIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHlPd25lcgogICAgeyBvd25lciA9IF9vd25lcjsgfQoKICAgIC8qKgogICAgICogQGRldiBPd25lciBjaGVjayBtb2RpZmllcgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIgeyBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7IF87IH0KfQoKY29udHJhY3QgVFJNQ3Jvd2RzYWxlIGlzIE93bmVkIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIGV2ZW50IFByaW50KHN0cmluZyBfbWVzc2FnZSwgYWRkcmVzcyBfbXNnU2VuZGVyKTsKCiAgICB1aW50IHB1YmxpYyBFVEhVU0QgPSAxMDAwMDA7IC8vaW4gY2VudAogICAgYWRkcmVzcyBtYW5hZ2VyID0gMHhmNWM3MjNCN0NjOTBlYUEzYkVlYzdCMDVENmJiZUJDZDlBRkFBNjlhOwogICAgYWRkcmVzcyBFVEhVU0RkZW1vbjsKICAgIGFkZHJlc3MgcHVibGljIG11bHRpc2lnID0gMHhjMkNEY0UxOGRlRWNDMWQ1Mjc0RDg4MmFFZDBGQjA4MkI4MTNGRkU4OwogICAgYWRkcmVzcyBwdWJsaWMgYWRkcmVzc09mRVJDMjBUb2tlbiA9IDB4OEJlRjAxNDFlOEQwNzg3OTM0NTZDNGI3NGY3RTYwNjQwZjYxODU5NDsKICAgIEVSQzIwIHB1YmxpYyB0b2tlbjsKCiAgICB1aW50IHB1YmxpYyBzdGFydElDTyA9IG5vdzsKICAgIHVpbnQgcHVibGljIGVuZElDTyA9IDE1MTk3NzYwMDA7IC8vIFdlZCwgMjggRmViIDIwMTggMDA6MDA6MDAgR01UCiAgICB1aW50IHB1YmxpYyBlbmRQb3N0SUNPID0gMTUyMjQ1NDQwMDsgLy8gIFNhdCwgMzEgTWFyIDIwMTggMDA6MDA6MDAgR01UCgogICAgdWludCBwdWJsaWMgdG9rZW5JY29Vc2RDZW50UHJpY2UgPSA1NTA7CiAgICB1aW50IHB1YmxpYyB0b2tlblBvc3RJY29Vc2RDZW50UHJpY2UgPSA2NTA7CgogICAgdWludCBwdWJsaWMgYm9udXNXZWlBbW91bnQgPSAyOTkwMDAwMDAwMDAwMDAwMDAwMDsgLy8yOS45IEVUSAogICAgdWludCBwdWJsaWMgc21hbGxCb251c1BlcmNlbnQgPSAyNzsKICAgIHVpbnQgcHVibGljIGJpZ0JvbnVzUGVyY2VudCA9IDM3OwoKCiAgICBmdW5jdGlvbiBUUk1Dcm93ZHNhbGUoKXsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG9rZW4gPSBFUkMyMChhZGRyZXNzT2ZFUkMyMFRva2VuKTsKICAgICAgICBFVEhVU0RkZW1vbiA9IG1zZy5zZW5kZXI7CgogICAgfQoKICAgIGZ1bmN0aW9uIHRva2VuQmFsYW5jZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgfQoKIAogICAgZnVuY3Rpb24gc2V0QWRkcmVzc09mRVJDMjBUb2tlbihhZGRyZXNzIF9hZGRyZXNzT2ZFUkMyMFRva2VuKSBvbmx5T3duZXIgewogICAgICAgIGFkZHJlc3NPZkVSQzIwVG9rZW4gPSBfYWRkcmVzc09mRVJDMjBUb2tlbjsKICAgICAgICB0b2tlbiA9IEVSQzIwKGFkZHJlc3NPZkVSQzIwVG9rZW4pOwoKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtYW5hZ2VyKTsKICAgICAgICByZXR1cm4gdG9rZW4udHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgZG9QdXJjaGFzZSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRvUHVyY2hhc2UoKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG5vdyA+PSBzdGFydElDTyAmJiBub3cgPCBlbmRQb3N0SUNPKTsKCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKCiAgICAgICAgdWludCBzdW0gPSBtc2cudmFsdWU7CgogICAgICAgIHVpbnQgdG9rZW5zQW1vdW50OwoKICAgICAgICBpZihub3cgPCBlbmRJQ08pewogICAgICAgICAgICB0b2tlbnNBbW91bnQgPSBzdW0ubXVsKEVUSFVTRCkuZGl2KHRva2VuSWNvVXNkQ2VudFByaWNlKS5kaXYoMTAwMDAwMDAwMDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRva2Vuc0Ftb3VudCA9IHN1bS5tdWwoRVRIVVNEKS5kaXYodG9rZW5Qb3N0SWNvVXNkQ2VudFByaWNlKS5kaXYoMTAwMDAwMDAwMDApOwogICAgICAgIH0KCgogICAgICAgIC8vQm9udXMKICAgICAgICBpZihzdW0gPCBib251c1dlaUFtb3VudCl7CiAgICAgICAgICAgdG9rZW5zQW1vdW50ID0gdG9rZW5zQW1vdW50Lm11bCgxMDArc21hbGxCb251c1BlcmNlbnQpLmRpdigxMDApOwogICAgICAgIH0gZWxzZXsKICAgICAgICAgICB0b2tlbnNBbW91bnQgPSB0b2tlbnNBbW91bnQubXVsKDEwMCtiaWdCb251c1BlcmNlbnQpLmRpdigxMDApOwogICAgICAgIH0KCiAgICAgICAgaWYodG9rZW5CYWxhbmNlKCkgPiB0b2tlbnNBbW91bnQpewogICAgICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2Vuc0Ftb3VudCkpOwogICAgICAgICAgICBtdWx0aXNpZy50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1hbmFnZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICAgICAgUHJpbnQoIlRva2VucyB3aWxsIGJlIHJlbGVhc2VkIG1hbnVhbGx5IiwgbXNnLnNlbmRlcik7CiAgICAgICAgfQoKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0RVRIVVNEKCB1aW50MjU2IF9uZXdQcmljZSApIHsKICAgICAgICByZXF1aXJlKChtc2cuc2VuZGVyID09IEVUSFVTRGRlbW9uKXx8KG1zZy5zZW5kZXIgPT0gbWFuYWdlcikpOwogICAgICAgIEVUSFVTRCA9IF9uZXdQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRCb251cyggdWludDI1NiBfYm9udXNXZWlBbW91bnQsIHVpbnQyNTYgX3NtYWxsQm9udXNQZXJjZW50LCB1aW50MjU2IF9iaWdCb251c1BlcmNlbnQgKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1hbmFnZXIpOwoKICAgICAgICBib251c1dlaUFtb3VudCA9IF9ib251c1dlaUFtb3VudDsKICAgICAgICBzbWFsbEJvbnVzUGVyY2VudCA9IF9zbWFsbEJvbnVzUGVyY2VudDsKICAgICAgICBiaWdCb251c1BlcmNlbnQgPSBfYmlnQm9udXNQZXJjZW50OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRFVEhVU0RkZW1vbihhZGRyZXNzIF9FVEhVU0RkZW1vbikgCiAgICB7IAogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtYW5hZ2VyKTsKICAgICAgICBFVEhVU0RkZW1vbiA9IF9FVEhVU0RkZW1vbjsgCiAgICAgICAgCiAgICB9Cgp9'.
	

]
