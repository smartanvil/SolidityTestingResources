Class {
	#name : #SRT6334c4ad28d3a175365d7e7a1c4b08c887f00634,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6334c4ad28d3a175365d7e7a1c4b08c887f00634 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8qKgoqIEB0aXRsZSBJQ08gQ09OVFJBQ1QKKiBAZGV2IEVSQy0yMCBUb2tlbiBTdGFuZGFyZCBDb21wbGlhbnQKKiBAYXV0aG9yIEZhcmVzIEEuIEFrZWwgQy4KKi8KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGggYnkgT3BlblplcHBlbGluCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKfQoKY29udHJhY3QgdG9rZW4gewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgfQoKY29udHJhY3QgSUNPIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgLy9UaGlzIGljbyBoYXZlIDIgc3RhZ2VzCiAgICBlbnVtIFN0YXRlIHsKICAgICAgICBPbmdvaW4sCiAgICAgICAgU3VjY2Vzc2Z1bAogICAgfQogICAgLy9wdWJsaWMgdmFyaWFibGVzCiAgICBTdGF0ZSBwdWJsaWMgc3RhdGUgPSBTdGF0ZS5PbmdvaW47IC8vU2V0IGluaXRpYWwgc3RhZ2UKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IG5vdzsgLy9ibG9jay10aW1lIHdoZW4gaXQgd2FzIGRlcGxveWVkCiAgICAvL0xpc3Qgb2YgcHJpY2VzLCBhcyBib3RoLCBldGggYW5kIHRva2VuIGhhdmUgMTggZGVjaW1hbCwgaXRzIGEgZGlyZWN0IGZhY3RvcgogICAgdWludDI1NiBwdWJsaWMgcHJpY2UgPSAxNTAwOyAvLzE1MDAgdG9rZW5zIHBlciBldGggZml4ZWQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmFpc2VkOyAvL2V0aCBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRGlzdHJpYnV0ZWQ7IC8vdG9rZW5zIHdpdGggZGVjaW1hbHMKICAgIHVpbnQyNTYgcHVibGljIElDT2RlYWRsaW5lOyAvL2RlYWRsaW5lCiAgICB1aW50MjU2IHB1YmxpYyBjbG9zZWRBdDsgLy90aW1lIHdoZW4gaXQgZmluaXNoZWQKICAgIHRva2VuIHB1YmxpYyB0b2tlblJld2FyZDsgLy90b2tlbiBhZGRyZXNzIHVzZWQgYXMgcmV3YXJkCiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOyAvL2NyZWF0b3Igb2YgdGhlIGNvbnRyYWN0CiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsgLy9iZW5lZmljaWFyeSBvZiB0aGUgY29udHJhY3QKICAgIHN0cmluZyBwdWJsaWMgY2FtcGFpZ25Vcmw7IC8vVVJMIG9mIHRoZSBjYW1wYWluZwogICAgdWludDggY29uc3RhbnQgdmVyc2lvbiA9IDE7CgogICAgLy9ldmVudHMgZm9yIGxvZwogICAgZXZlbnQgTG9nRnVuZGluZ1JlY2VpdmVkKGFkZHJlc3MgX2FkZHIsIHVpbnQgX2Ftb3VudCwgdWludCBfY3VycmVudFRvdGFsKTsKICAgIGV2ZW50IExvZ0JlbmVmaWNpYXJ5UGFpZChhZGRyZXNzIF9iZW5lZmljaWFyeUFkZHJlc3MpOwogICAgZXZlbnQgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodWludCBfdG90YWxSYWlzZWQpOwogICAgZXZlbnQgTG9nRnVuZGVySW5pdGlhbGl6ZWQoCiAgICAgICAgYWRkcmVzcyBfY3JlYXRvciwKICAgICAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwKICAgICAgICBzdHJpbmcgX3VybCwKICAgICAgICB1aW50MjU2IF9JQ09kZWFkbGluZSk7CiAgICBldmVudCBMb2dDb250cmlidXRvcnNQYXlvdXQoYWRkcmVzcyBfYWRkciwgdWludCBfYW1vdW50KTsKCiAgICBtb2RpZmllciBub3RGaW5pc2hlZCgpIHsKICAgICAgICByZXF1aXJlKHN0YXRlICE9IFN0YXRlLlN1Y2Nlc3NmdWwpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgSUNPIGNvbnN0cnVjdG9yCiAgICAqIEBwYXJhbSBfY2FtcGFpZ25VcmwgaXMgdGhlIElDTyBfdXJsCiAgICAqIEBwYXJhbSBfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQgaXMgdGhlIHRva2VuIGRpc3RyaWJ1dGVkCiAgICAqIEBwYXJhbSBfdGltZUluRGF5c0ZvcklDTyBpcyB0aGUgZGF5cyB0aGUgY2FtcGFpbmcgd2lsbCBsYXN0CiAgICAqLwogICAgZnVuY3Rpb24gSUNPIChzdHJpbmcgX2NhbXBhaWduVXJsLCB0b2tlbiBfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQsIHVpbnQyNTYgX3RpbWVJbkRheXNGb3JJQ08pIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7IC8vY3JlYXRvciB3YWxsZXQgYWRkcmVzcwogICAgICAgIGJlbmVmaWNpYXJ5ID0gbXNnLnNlbmRlcjsgLy9iZW5lZmljaWFyeSB3YWxsZXQgYWRkcmVzcwogICAgICAgIGNhbXBhaWduVXJsID0gX2NhbXBhaWduVXJsOyAvL1VSTCBvZiB0aGUgY2FtcGFpbmcKICAgICAgICB0b2tlblJld2FyZCA9IHRva2VuKF9hZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCk7IC8vdG9rZW4gdXNlZCBhcyByZXdhcmQKICAgICAgICBJQ09kZWFkbGluZSA9IHN0YXJ0VGltZSArIF90aW1lSW5EYXlzRm9ySUNPICogMSBkYXlzOyAvL2RlYWRsaW5lIGlzIF90aW1lSW5EYXlzRm9ySUNPIGRheXMgZnJvbSBub3cKCiAgICAgICAgLy9sb2dzCiAgICAgICAgTG9nRnVuZGVySW5pdGlhbGl6ZWQoCiAgICAgICAgICAgIGNyZWF0b3IsCiAgICAgICAgICAgIGJlbmVmaWNpYXJ5LAogICAgICAgICAgICBjYW1wYWlnblVybCwKICAgICAgICAgICAgSUNPZGVhZGxpbmUpOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIGNvbnRyaWJ1dGlvbiBoYW5kbGVyCiAgICAqIEBkZXYgdXNlciBtdXN0IHByb3ZpZGUgZW5vdWdoIGdhcwogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRyaWJ1dGUoKSBwdWJsaWMgbm90RmluaXNoZWQgcGF5YWJsZSB7CgogICAgICAgIHVpbnQyNTYgdG9rZW5Cb3VnaHQ7CiAgICAgICAgdG90YWxSYWlzZWQgPSB0b3RhbFJhaXNlZC5hZGQobXNnLnZhbHVlKTsgLy9pbmNyZWFzZSByYWlzZWQgY291bnRlcgogICAgICAgIHRva2VuQm91Z2h0ID0gbXNnLnZhbHVlLm11bChwcmljZSk7IC8vY2FsY3VsYXRlIGhvdyBtdWNoIHRva2VucyB3aWxsIGJlIHNlbnQKICAgICAgICB0b3RhbERpc3RyaWJ1dGVkID0gdG90YWxEaXN0cmlidXRlZC5hZGQodG9rZW5Cb3VnaHQpOyAvL2luY3JlYXNlIGRpc3RyaWJ1dGVkIHRva2VuIGNvdW50ZXIKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5LnNlbmQobXNnLnZhbHVlKSk7IC8vdHJhbnNmZXIgZnVuZHMKICAgICAgICB0b2tlblJld2FyZC50cmFuc2Zlcihtc2cuc2VuZGVyLHRva2VuQm91Z2h0KTsgLy90cmFuc2ZlciB0b2tlbnMKICAgICAgICAKICAgICAgICAvL2xvZ3MKICAgICAgICBMb2dGdW5kaW5nUmVjZWl2ZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCB0b3RhbFJhaXNlZCk7CiAgICAgICAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KG1zZy5zZW5kZXIsIHRva2VuQm91Z2h0KTsKICAgICAgICBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCk7CgogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIGNoZWNrIHN0YXR1cwogICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrSWZGdW5kaW5nQ29tcGxldGVPckV4cGlyZWQoKSBwdWJsaWMgewogICAgICAgIAogICAgICAgIGlmKG5vdyA+IElDT2RlYWRsaW5lICYmIHN0YXRlIT1TdGF0ZS5TdWNjZXNzZnVsICkgeyAvL2lmIHdlIHJlYWNoIGljbyBkZWFkbGluZSBhbmQgaXRzIG5vdCBTdWNjZXNzZnVsIHlldAogICAgICAgICAgICBzdGF0ZSA9IFN0YXRlLlN1Y2Nlc3NmdWw7IC8vaWNvIGJlY29tZXMgU3VjY2Vzc2Z1bAogICAgICAgICAgICBjbG9zZWRBdCA9IG5vdzsgLy93ZSBjb21wbGV0ZSBub3cKICAgICAgICAgICAgCiAgICAgICAgICAgIExvZ0Z1bmRpbmdTdWNjZXNzZnVsKHRvdGFsUmFpc2VkKTsgLy93ZSBsb2cgdGhlIGZpbmlzaAogICAgICAgICAgICBmaW5pc2hlZCgpOyAvL2FuZCBleGVjdXRlIGNsb3N1cmUKICAgICAgICB9CiAgICB9CgogICAvKioKICAgICogQG5vdGljZSBjbG9zdXJlIGhhbmRsZXIKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hlZCgpIHB1YmxpYyB7IC8vV2hlbiBmaW5pc2hlZCBldGggYW5kIHRva2VucyByZW1haW5pbmcgYXJlIHRyYW5zZmVyZWQgdG8gYmVuZWZpY2lhcnkKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLlN1Y2Nlc3NmdWwpOyAvL29ubHkgd2hlbiBTdWNjZXNzZnVsCiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeS5zZW5kKHRoaXMuYmFsYW5jZSkpOyAvL3dlIHJlcXVpcmUgdGhlIHRyYW5zZmVyIGhhcyBiZWVuIHNlbnQKCiAgICAgICAgdWludDI1NiByZW1haW5pbmcgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YodGhpcyk7IC8vZ2V0IHRoZSB0b3RhbCB0b2tlbnMgcmVtYWluaW5nCiAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIoYmVuZWZpY2lhcnkscmVtYWluaW5nKTsgLy90cmFuc2ZlciByZW1haW5pbmcgdG9rZW5zIHRvIHRoZSBiZW5lZmljaWFyeQoKICAgICAgICBMb2dCZW5lZmljaWFyeVBhaWQoYmVuZWZpY2lhcnkpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHVzZXIgbXVzdCBwcm92aWRlIGVub3VnaCBnYXMKICAgICovCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgY29udHJpYnV0ZSgpOyAvL3RoaXMgZnVuY3Rpb24gcmVxdWlyZSBtb3JlIGdhcyB0aGFuIGEgbm9ybWFsIGNhbGxiYWNrIGZ1bmN0aW9uLCBzZW5kZXIgbXVzdCBwcm92aWRlIGl0CiAgICB9Cn0='.
	

]
