Class {
	#name : #SRTd10996aeea66f21e1018d422d589dabe600f3960,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd10996aeea66f21e1018d422d589dabe600f3960 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8qKgoqIEB0aXRsZSBJQ08gQ09OVFJBQ1QKKiBAZGV2IEVSQy0yMCBUb2tlbiBTdGFuZGFyZCBDb21wbGlhbnQKKiBAYXV0aG9yIEZhcmVzIEEuIEFrZWwgQy4gPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIxNTczM2I3NDdiNjE3YTdiN2M3YTNiNzQ3ZTcwNzk1NTcyNzg3NDdjNzkzYjc2N2E3OCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KKi8KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGggYnkgT3BlblplcHBlbGluCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCB0b2tlbiB7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIH0KCmNvbnRyYWN0IElDTyB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIC8vVGhpcyBpY28gaGF2ZSA1IHN0YXRlcwogICAgZW51bSBTdGF0ZSB7CiAgICAgICAgcHJlaWNvLAogICAgICAgIHdlZWsxLAogICAgICAgIHdlZWsyLAogICAgICAgIHdlZWszLAogICAgICAgIHdlZWs0LAogICAgICAgIHdlZWs1LAogICAgICAgIHdlZWs2LAogICAgICAgIHdlZWs3LAogICAgICAgIFN1Y2Nlc3NmdWwKICAgIH0KICAgIC8vcHVibGljIHZhcmlhYmxlcwogICAgU3RhdGUgcHVibGljIHN0YXRlID0gU3RhdGUucHJlaWNvOyAvL1NldCBpbml0aWFsIHN0YWdlCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSBub3c7IC8vYmxvY2stdGltZSB3aGVuIGl0IHdhcyBkZXBsb3llZAogICAgdWludDI1NiBwdWJsaWMgcmF0ZTsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmFpc2VkOyAvL2V0aCBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRGlzdHJpYnV0ZWQ7IC8vdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbENvbnRyaWJ1dG9yczsKICAgIHVpbnQyNTYgcHVibGljIElDT2RlYWRsaW5lOwogICAgdWludDI1NiBwdWJsaWMgY29tcGxldGVkQXQ7CiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOwogICAgc3RyaW5nIHB1YmxpYyBjYW1wYWlnblVybDsKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICcxJzsKCiAgICAvL2V2ZW50cyBmb3IgbG9nCiAgICBldmVudCBMb2dGdW5kaW5nUmVjZWl2ZWQoYWRkcmVzcyBfYWRkciwgdWludCBfYW1vdW50LCB1aW50IF9jdXJyZW50VG90YWwpOwogICAgZXZlbnQgTG9nQmVuZWZpY2lhcnlQYWlkKGFkZHJlc3MgX2JlbmVmaWNpYXJ5QWRkcmVzcyk7CiAgICBldmVudCBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh1aW50IF90b3RhbFJhaXNlZCk7CiAgICBldmVudCBMb2dGdW5kZXJJbml0aWFsaXplZCgKICAgICAgICBhZGRyZXNzIF9jcmVhdG9yLAogICAgICAgIHN0cmluZyBfdXJsLAogICAgICAgIHVpbnQyNTYgX0lDT2RlYWRsaW5lKTsKICAgIGV2ZW50IExvZ0NvbnRyaWJ1dG9yc1BheW91dChhZGRyZXNzIF9hZGRyLCB1aW50IF9hbW91bnQpOwoKICAgIG1vZGlmaWVyIG5vdEZpbmlzaGVkKCkgewogICAgICAgIHJlcXVpcmUoc3RhdGUgIT0gU3RhdGUuU3VjY2Vzc2Z1bCk7CiAgICAgICAgXzsKICAgIH0KICAgIC8qKgogICAgKiBAbm90aWNlIElDTyBjb25zdHJ1Y3RvcgogICAgKiBAcGFyYW0gX2NhbXBhaWduVXJsIGlzIHRoZSBJQ08gX3VybAogICAgKiBAcGFyYW0gX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkIGlzIHRoZSB0b2tlbiB0b3RhbERpc3RyaWJ1dGVkCiAgICAqLwogICAgZnVuY3Rpb24gSUNPICgKICAgICAgICBzdHJpbmcgX2NhbXBhaWduVXJsLAogICAgICAgIHRva2VuIF9hZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCE9YWRkcmVzcygwKSk7CgogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGNhbXBhaWduVXJsID0gX2NhbXBhaWduVXJsOwogICAgICAgIHRva2VuUmV3YXJkID0gX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkOwogICAgICAgIHJhdGUgPSAzMjE0OwogICAgICAgIElDT2RlYWRsaW5lID0gc3RhcnRUaW1lLmFkZCg2NCBkYXlzKTsgLy85IHdlZWtzCgogICAgICAgIExvZ0Z1bmRlckluaXRpYWxpemVkKAogICAgICAgICAgICBjcmVhdG9yLAogICAgICAgICAgICBjYW1wYWlnblVybCwKICAgICAgICAgICAgSUNPZGVhZGxpbmUpOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIGNvbnRyaWJ1dGlvbiBoYW5kbGVyCiAgICAqLwogICAgZnVuY3Rpb24gY29udHJpYnV0ZSgpIHB1YmxpYyBub3RGaW5pc2hlZCBwYXlhYmxlIHsKCiAgICAgICAgdWludDI1NiB0b2tlbkJvdWdodCA9IDA7CgogICAgICAgIHRvdGFsUmFpc2VkID0gdG90YWxSYWlzZWQuYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgdG90YWxDb250cmlidXRvcnMgPSB0b3RhbENvbnRyaWJ1dG9ycy5hZGQoMSk7CgogICAgICAgIHRva2VuQm91Z2h0ID0gbXNnLnZhbHVlLm11bChyYXRlKTsKCiAgICAgICAgLy9SYXRlIG9mIGV4Y2hhbmdlIGRlcGVuZHMgb24gc3RhZ2UKICAgICAgICBpZiAoc3RhdGUgPT0gU3RhdGUucHJlaWNvKXsKCiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDE0KTsKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5tdWwoMTApOyAvLzE0LzEwID0gMS40ID0gMTQwJQogICAgICAgIAogICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gU3RhdGUud2VlazEpewoKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5tdWwoMTMpOwogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMCk7IC8vMTMvMTAgPSAxLjMgPSAxMzAlCgogICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gU3RhdGUud2VlazIpewoKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5tdWwoMTI1KTsKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5tdWwoMTAwKTsgLy8xMjUvMTAwID0gMS4yNSA9IDEyNSUKCiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS53ZWVrMyl7CgogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMik7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDEwKTsgLy8xMi8xMCA9IDEuMiA9IDEyMCUKCiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS53ZWVrNCl7CgogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMTUpOwogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMDApOyAvLzExNS8xMDAgPSAxLjE1ID0gMTE1JQoKICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFN0YXRlLndlZWs1KXsKCiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDExKTsKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5tdWwoMTApOyAvLzExLzEwID0gMS4xMCA9IDExMCUKCiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS53ZWVrNil7CgogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMDUpOwogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxMDApOyAvLzEwNS8xMDAgPSAxLjA1ID0gMTA1JQoKICAgICAgICB9CgogICAgICAgIHRvdGFsRGlzdHJpYnV0ZWQgPSB0b3RhbERpc3RyaWJ1dGVkLmFkZCh0b2tlbkJvdWdodCk7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShjcmVhdG9yLnNlbmQobXNnLnZhbHVlKSk7CiAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5Cb3VnaHQpOwoKICAgICAgICBMb2dGdW5kaW5nUmVjZWl2ZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCB0b3RhbFJhaXNlZCk7CiAgICAgICAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KG1zZy5zZW5kZXIsIHRva2VuQm91Z2h0KTsKICAgICAgICAKICAgICAgICBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgY2hlY2sgc3RhdHVzCiAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tJZkZ1bmRpbmdDb21wbGV0ZU9yRXhwaXJlZCgpIHB1YmxpYyB7CgogICAgICAgIGlmKHN0YXRlID09IFN0YXRlLnByZWljbyAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDE1IGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazE7CgogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrMSAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDIyIGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazI7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrMiAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDI5IGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazM7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrMyAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDM2IGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazQ7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrNCAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDQzIGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazU7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrNSAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDUwIGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2VlazY7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS53ZWVrNiAmJiBub3cgPiBzdGFydFRpbWUuYWRkKDU3IGRheXMpKXsKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUud2Vlazc7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihub3cgPiBJQ09kZWFkbGluZSAmJiBzdGF0ZSE9U3RhdGUuU3VjY2Vzc2Z1bCApIHsgLy9pZiB3ZSByZWFjaCBpY28gZGVhZGxpbmUgYW5kIGl0cyBub3QgU3VjY2Vzc2Z1bCB5ZXQKCiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuU3VjY2Vzc2Z1bDsgLy9pY28gYmVjb21lcyBTdWNjZXNzZnVsCiAgICAgICAgICAgIGNvbXBsZXRlZEF0ID0gbm93OyAvL0lDTyBpcyBjb21wbGV0ZQoKICAgICAgICAgICAgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodG90YWxSYWlzZWQpOyAvL3dlIGxvZyB0aGUgZmluaXNoCiAgICAgICAgICAgIGZpbmlzaGVkKCk7IC8vYW5kIGV4ZWN1dGUgY2xvc3VyZQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBjbG9zdXJlIGhhbmRsZXIKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hlZCgpIHB1YmxpYyB7IC8vV2hlbiBmaW5pc2hlZCBldGggYXJlIHRyYW5zZmVyZWQgdG8gY3JlYXRvcgoKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLlN1Y2Nlc3NmdWwpOwogICAgICAgIHVpbnQyNTYgcmVtYW5lbnQgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YodGhpcyk7CgogICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKGNyZWF0b3IscmVtYW5lbnQpOwoKICAgICAgICBMb2dCZW5lZmljaWFyeVBhaWQoY3JlYXRvcik7CiAgICAgICAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KGNyZWF0b3IsIHJlbWFuZW50KTsKCiAgICB9CgogICAgLyoKICAgICogQGRldiBEaXJlY3QgcGF5bWVudHMgaGFuZGxlCiAgICAqLwoKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICAKICAgICAgICBjb250cmlidXRlKCk7CgogICAgfQp9'.
	

]
