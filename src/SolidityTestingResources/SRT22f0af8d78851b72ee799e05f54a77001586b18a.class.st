Class {
	#name : #SRT22f0af8d78851b72ee799e05f54a77001586b18a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22f0af8d78851b72ee799e05f54a77001586b18a >> base64 [
	^ ''.
	

]
