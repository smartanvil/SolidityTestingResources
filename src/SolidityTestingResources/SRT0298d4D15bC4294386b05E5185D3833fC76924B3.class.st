Class {
	#name : #SRT0298d4D15bC4294386b05E5185D3833fC76924B3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0298d4D15bC4294386b05E5185D3833fC76924B3 >> base64 [
	^ ''.
	

]
