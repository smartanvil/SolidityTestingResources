Class {
	#name : #SRT42a8e4d6a899a3095c32381d30bef5a0a9214ea4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42a8e4d6a899a3095c32381d30bef5a0a9214ea4 >> base64 [
	^ ''.
	

]
