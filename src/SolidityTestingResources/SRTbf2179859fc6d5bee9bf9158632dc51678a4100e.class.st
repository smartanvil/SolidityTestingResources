Class {
	#name : #SRTbf2179859fc6d5bee9bf9158632dc51678a4100e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf2179859fc6d5bee9bf9158632dc51678a4100e >> base64 [
	^ ''.
	

]
