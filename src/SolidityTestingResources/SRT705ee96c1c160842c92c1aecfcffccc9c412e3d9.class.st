Class {
	#name : #SRT705ee96c1c160842c92c1aecfcffccc9c412e3d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT705ee96c1c160842c92c1aecfcffccc9c412e3d9 >> base64 [
	^ ''.
	

]
