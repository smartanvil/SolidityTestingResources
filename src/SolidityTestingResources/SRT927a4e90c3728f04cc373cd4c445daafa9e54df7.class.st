Class {
	#name : #SRT927a4e90c3728f04cc373cd4c445daafa9e54df7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT927a4e90c3728f04cc373cd4c445daafa9e54df7 >> base64 [
	^ ''.
	

]
