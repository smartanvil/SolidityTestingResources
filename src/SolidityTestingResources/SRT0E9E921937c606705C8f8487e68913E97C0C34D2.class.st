Class {
	#name : #SRT0E9E921937c606705C8f8487e68913E97C0C34D2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0E9E921937c606705C8f8487e68913E97C0C34D2 >> base64 [
	^ ''.
	

]
