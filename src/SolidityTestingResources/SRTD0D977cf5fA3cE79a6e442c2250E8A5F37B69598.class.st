Class {
	#name : #SRTD0D977cf5fA3cE79a6e442c2250E8A5F37B69598,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTD0D977cf5fA3cE79a6e442c2250E8A5F37B69598 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCmNvbnRyYWN0IEV0aHJhZmZsZSB7CiAgICAvLyBTdHJ1Y3RzCiAgICBzdHJ1Y3QgQ29udGVzdGFudCB7CiAgICAgICAgYWRkcmVzcyBhZGRyOwogICAgICAgIHVpbnQgcmFmZmxlSWQ7CiAgICB9CgogICAgLy8gRXZlbnRzCiAgICBldmVudCBSYWZmbGVSZXN1bHQoCiAgICAgICAgdWludCByYWZmbGVJZCwKICAgICAgICB1aW50IHdpbm5pbmdOdW1iZXIsCiAgICAgICAgYWRkcmVzcyB3aW5uaW5nQWRkcmVzcywKICAgICAgICB1aW50IGJsb2NrVGltZXN0YW1wLAogICAgICAgIHVpbnQgYmxvY2tOdW1iZXIsCiAgICAgICAgdWludCBnYXNMaW1pdCwKICAgICAgICB1aW50IGRpZmZpY3VsdHksCiAgICAgICAgdWludCBnYXMsCiAgICAgICAgdWludCB2YWx1ZSwKICAgICAgICBhZGRyZXNzIG1zZ1NlbmRlciwKICAgICAgICBhZGRyZXNzIGJsb2NrQ29pbmJhc2UsCiAgICAgICAgYnl0ZXMzMiBzaGEKICAgICk7CgogICAgZXZlbnQgVGlja2V0UHVyY2hhc2UoCiAgICAgICAgdWludCByYWZmbGVJZCwKICAgICAgICBhZGRyZXNzIGNvbnRlc3RhbnQsCiAgICAgICAgdWludCBudW1iZXIKICAgICk7CgogICAgZXZlbnQgVGlja2V0UmVmdW5kKAogICAgICAgIHVpbnQgcmFmZmxlSWQsCiAgICAgICAgYWRkcmVzcyBjb250ZXN0YW50LAogICAgICAgIHVpbnQgbnVtYmVyCiAgICApOwoKICAgIC8vIENvbnN0YW50cwogICAgYWRkcmVzcyBwdWJsaWMgY3JlYXRvckFkZHJlc3M7CiAgICBhZGRyZXNzIGNvbnN0YW50IHB1YmxpYyByYWtlQWRkcmVzcyA9IDB4MTU4ODcxMDBmM2IzY0EwYjY0NUYwMDdjNkFBMTEzNDg2NjVjNjllNTsKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIHByaXplID0gMC4xIGV0aGVyOwogICAgdWludCBjb25zdGFudCBwdWJsaWMgcmFrZSA9IDAuMDIgZXRoZXI7CiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyB0b3RhbFRpY2tldHMgPSA2OwogICAgdWludCBjb25zdGFudCBwdWJsaWMgcHJpY2VQZXJUaWNrZXQgPSAocHJpemUgKyByYWtlKSAvIHRvdGFsVGlja2V0czsKCiAgICAvLyBWYXJpYWJsZXMKICAgIHVpbnQgcHVibGljIHJhZmZsZUlkID0gMDsKICAgIHVpbnQgcHVibGljIG5leHRUaWNrZXQgPSAwOwogICAgbWFwcGluZyAodWludCA9PiBDb250ZXN0YW50KSBwdWJsaWMgY29udGVzdGFudHM7CiAgICB1aW50W10gcHVibGljIGdhcHM7CgogICAgLy8gSW5pdGlhbGl6YXRpb24KICAgIGZ1bmN0aW9uIEV0aHJhZmZsZSgpIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHJlc2V0UmFmZmxlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXRSYWZmbGUoKSBwcml2YXRlIHsKICAgICAgICByYWZmbGVJZCsrOwogICAgICAgIG5leHRUaWNrZXQgPSAxOwogICAgfQoKICAgIC8vIENhbGwgYnV5VGlja2V0cygpIHdoZW4gcmVjZWl2aW5nIEV0aGVyIG91dHNpZGUgYSBmdW5jdGlvbgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIGJ1eVRpY2tldHMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUaWNrZXRzKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIHVpbnQgbW9uZXlTZW50ID0gbXNnLnZhbHVlOwoKICAgICAgICB3aGlsZSAobW9uZXlTZW50ID49IHByaWNlUGVyVGlja2V0ICYmIG5leHRUaWNrZXQgPD0gdG90YWxUaWNrZXRzKSB7CiAgICAgICAgICAgIHVpbnQgY3VyclRpY2tldCA9IDA7CiAgICAgICAgICAgIGlmIChnYXBzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGN1cnJUaWNrZXQgPSBnYXBzW2dhcHMubGVuZ3RoLTFdOwogICAgICAgICAgICAgICAgZ2Fwcy5sZW5ndGgtLTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1cnJUaWNrZXQgPSBuZXh0VGlja2V0Kys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRlc3RhbnRzW2N1cnJUaWNrZXRdID0gQ29udGVzdGFudChtc2cuc2VuZGVyLCByYWZmbGVJZCk7CiAgICAgICAgICAgIFRpY2tldFB1cmNoYXNlKHJhZmZsZUlkLCBtc2cuc2VuZGVyLCBjdXJyVGlja2V0KTsKICAgICAgICAgICAgbW9uZXlTZW50IC09IHByaWNlUGVyVGlja2V0OwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hvb3NlIHdpbm5lciBpZiB3ZSBzb2xkIGFsbCB0aGUgdGlja2V0cwogICAgICAgIGlmIChuZXh0VGlja2V0ID4gdG90YWxUaWNrZXRzKSB7CiAgICAgICAgICAgIGNob29zZVdpbm5lcigpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2VuZCBiYWNrIGxlZnRvdmVyIG1vbmV5CiAgICAgICAgaWYgKG1vbmV5U2VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtb25leVNlbnQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaG9vc2VXaW5uZXIoKSBwcml2YXRlIHsKICAgICAgICB1aW50IGxhc3RXaW5uaW5nTnVtYmVyID0gZ2V0UmFuZG9tKCk7CiAgICAgICAgYWRkcmVzcyB3aW5uaW5nQWRkcmVzcyA9IGNvbnRlc3RhbnRzW2xhc3RXaW5uaW5nTnVtYmVyXS5hZGRyOwogICAgICAgIFJhZmZsZVJlc3VsdCgKICAgICAgICAgICAgcmFmZmxlSWQsIGxhc3RXaW5uaW5nTnVtYmVyLCB3aW5uaW5nQWRkcmVzcywgYmxvY2sudGltZXN0YW1wLAogICAgICAgICAgICBibG9jay5udW1iZXIsIGJsb2NrLmdhc2xpbWl0LCBibG9jay5kaWZmaWN1bHR5LCBtc2cuZ2FzLAogICAgICAgICAgICBtc2cudmFsdWUsIG1zZy5zZW5kZXIsIGJsb2NrLmNvaW5iYXNlLCBnZXRTaGEoKQogICAgICAgICk7CiAgICAgICAgcmVzZXRSYWZmbGUoKTsKICAgICAgICB3aW5uaW5nQWRkcmVzcy50cmFuc2Zlcihwcml6ZSk7CiAgICAgICAgcmFrZUFkZHJlc3MudHJhbnNmZXIocmFrZSk7CiAgICB9CgogICAgLy8gQ2hvb3NlIGEgcmFuZG9tIGludCBiZXR3ZWVuIDEgYW5kIHRvdGFsVGlja2V0cwogICAgZnVuY3Rpb24gZ2V0UmFuZG9tKCkgcHJpdmF0ZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuICh1aW50KGdldFNoYSgpKSAlIHRvdGFsVGlja2V0cykgKyAxOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFNoYSgpIHByaXZhdGUgcmV0dXJucyAoYnl0ZXMzMikgewogICAgICAgIHJldHVybiBzaGEzKAogICAgICAgICAgICBibG9jay50aW1lc3RhbXAgKwogICAgICAgICAgICBibG9jay5udW1iZXIgKwogICAgICAgICAgICBibG9jay5nYXNsaW1pdCArCiAgICAgICAgICAgIGJsb2NrLmRpZmZpY3VsdHkgKwogICAgICAgICAgICBtc2cuZ2FzICsKICAgICAgICAgICAgbXNnLnZhbHVlICsKICAgICAgICAgICAgdWludChtc2cuc2VuZGVyKSArCiAgICAgICAgICAgIHVpbnQoYmxvY2suY29pbmJhc2UpCiAgICAgICAgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKSBwdWJsaWMgewogICAgICAgIHVpbnQgcmVmdW5kcyA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAxOyBpIDw9IHRvdGFsVGlja2V0czsgaSsrKSB7CiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNvbnRlc3RhbnRzW2ldLmFkZHIgJiYgcmFmZmxlSWQgPT0gY29udGVzdGFudHNbaV0ucmFmZmxlSWQpIHsKICAgICAgICAgICAgICAgIHJlZnVuZHMrKzsKICAgICAgICAgICAgICAgIGNvbnRlc3RhbnRzW2ldID0gQ29udGVzdGFudChhZGRyZXNzKDApLCAwKTsKICAgICAgICAgICAgICAgIGdhcHMucHVzaChpKTsKICAgICAgICAgICAgICAgIFRpY2tldFJlZnVuZChyYWZmbGVJZCwgbXNnLnNlbmRlciwgaSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChyZWZ1bmRzID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlZnVuZHMgKiBwcmljZVBlclRpY2tldCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGtpbGwoKSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNyZWF0b3JBZGRyZXNzKSB7CiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChjcmVhdG9yQWRkcmVzcyk7CiAgICAgICAgfQogICAgfQp9'.
	

]
