Class {
	#name : #SRT10ec03b714a2660581040c1a0329d88e381ca603,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT10ec03b714a2660581040c1a0329d88e381ca603 >> base64 [
	^ ''.
	

]
