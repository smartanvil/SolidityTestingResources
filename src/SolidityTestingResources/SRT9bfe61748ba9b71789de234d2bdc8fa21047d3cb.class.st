Class {
	#name : #SRT9bfe61748ba9b71789de234d2bdc8fa21047d3cb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9bfe61748ba9b71789de234d2bdc8fa21047d3cb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKLy9UaGlzIHByb2plY3QgaXMgYmV0YSBzdGFnZSBhbmQgbWlnaHQgY29udGFpbiB1bmtub3duIGJ1Z3MuCi8vSSBhbSBub3QgcmVzcG9uc2libGUgZm9yIGFueSBjb25zZXF1ZW5jZXMgb2YgYW55IHVzZSBvZiB0aGUgY29kZSBvciBwcm90b2NvbCB0aGF0IGlzIHN1Z2dlc3RlZCBoZXJlLgpjb250cmFjdCBTaW1wbGVNaXhlciB7CiAgICAKICAgIHN0cnVjdCBEZWFsewogICAgICAgIG1hcHBpbmcoYWRkcmVzcz0+dWludCkgZGVwb3NpdDsKICAgICAgICB1aW50ICAgICAgICAgICAgICAgICAgIGRlcG9zaXRTdW07CiAgICAgICAgbWFwcGluZyhhZGRyZXNzPT5ib29sKSBjbGFpbXM7CgkgICAgdWludCAJCSAgICAgICAgICAgbnVtQ2xhaW1zOwogICAgICAgIHVpbnQgICAgICAgICAgICAgICAgICAgY2xhaW1TdW07CgogICAgICAgIHVpbnQgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOwogICAgICAgIHVpbnQgICAgICAgICAgICAgICAgICAgZGVwb3NpdER1cmF0aW9uSW5TZWM7CiAgICAgICAgdWludCAgICAgICAgICAgICAgICAgICBjbGFpbUR1cmF0aW9uSW5TZWM7CiAgICAgICAgdWludCAgICAgICAgICAgICAgICAgICBjbGFpbURlcG9zaXRJbldlaTsKICAgICAgICB1aW50ICAgICAgICAgICAgICAgICAgIGNsYWltVmFsdWVJbldlaTsKICAgICAJdWludCAgICAgICAgICAgICAgICAgICBtaW5OdW1DbGFpbXM7CiAgICAgICAgCiAgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICBhY3RpdmU7CiAgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICBmdWxseUZ1bmRlZDsKICAgIH0KICAgIAogICAgRGVhbFtdICBfZGVhbHM7CiAgICAgCiAgICBldmVudCBOZXdEZWFsKCBhZGRyZXNzIGluZGV4ZWQgdXNlciwgdWludCBpbmRleGVkIF9kZWFsSWQsIHVpbnQgX3N0YXJ0VGltZSwgdWludCBfZGVwb3NpdER1cmF0aW9uSW5Ib3VycywgdWludCBfY2xhaW1EdXJhdGlvbkluSG91cnMsIHVpbnQgX2NsYWltVW5pdFZhbHVlSW5XZWksIHVpbnQgX2NsYWltRGVwb3NpdEluV2VpLCB1aW50IF9taW5OdW1DbGFpbXMsIGJvb2wgX3N1Y2Nlc3MsIHN0cmluZyBfZXJyICk7CiAgICBldmVudCBDbGFpbSggYWRkcmVzcyBpbmRleGVkIF9jbGFpbWVyLCB1aW50IGluZGV4ZWQgX2RlYWxJZCwgYm9vbCBfc3VjY2Vzcywgc3RyaW5nIF9lcnIgKTsKICAgIGV2ZW50IERlcG9zaXQoIGFkZHJlc3MgaW5kZXhlZCBfZGVwb3NpdG9yLCB1aW50IGluZGV4ZWQgX2RlYWxJZCwgdWludCBfdmFsdWUsIGJvb2wgX3N1Y2Nlc3MsIHN0cmluZyBfZXJyICk7CiAgICBldmVudCBXaXRoZHJhdyggYWRkcmVzcyBpbmRleGVkIF93aXRoZHJhd2VyLCB1aW50IGluZGV4ZWQgX2RlYWxJZCwgdWludCBfdmFsdWUsIGJvb2wgX3B1YmxpYywgYm9vbCBfc3VjY2Vzcywgc3RyaW5nIF9lcnIgKTsKCiAgICBldmVudCBFbm91Z2hDbGFpbXMoIHVpbnQgaW5kZXhlZCBfZGVhbElkICk7CiAgICBldmVudCBEZWFsRnVsbHlGdW5kZWQoIHVpbnQgaW5kZXhlZCBfZGVhbElkICk7CiAgICAKICAgIGVudW0gUmV0dXJuVmFsdWUgeyBPaywgRXJyb3IgfQoKICAgIGZ1bmN0aW9uIFNpbXBsZU1peGVyKCl7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG5ld0RlYWwoIHVpbnQgX2RlcG9zaXREdXJhdGlvbkluSG91cnMsIHVpbnQgX2NsYWltRHVyYXRpb25JbkhvdXJzLCB1aW50IF9jbGFpbVVuaXRWYWx1ZUluV2VpLCB1aW50IF9jbGFpbURlcG9zaXRJbldlaSwgdWludCBfbWluTnVtQ2xhaW1zICkgcmV0dXJucyhSZXR1cm5WYWx1ZSl7CiAgICAgICAgdWludCBkZWFsSWQgPSBfZGVhbHMubGVuZ3RoOyAgICAgICAgCiAgICAgICAgaWYoIF9kZXBvc2l0RHVyYXRpb25JbkhvdXJzID09IDAgfHwgX2NsYWltRHVyYXRpb25JbkhvdXJzID09IDAgKXsKICAgICAgICAJTmV3RGVhbCggbXNnLnNlbmRlciwKICAgICAgICAJICAgICAgICAgZGVhbElkLAogICAgICAgIAkgICAgICAgICBub3csCiAgICAgICAgCSAgICAgICAgIF9kZXBvc2l0RHVyYXRpb25JbkhvdXJzLAogICAgICAgIAkgICAgICAgICBfY2xhaW1EdXJhdGlvbkluSG91cnMsCiAgICAgICAgCSAgICAgICAgIF9jbGFpbVVuaXRWYWx1ZUluV2VpLAogICAgICAgIAkgICAgICAgICBfY2xhaW1EZXBvc2l0SW5XZWksCiAgICAgICAgCSAgICAgICAgIF9taW5OdW1DbGFpbXMsCiAgICAgICAgCSAgICAgICAgIGZhbHNlLAogICAgICAgIAkgICAgICAgICAiX2RlcG9zaXREdXJhdGlvbkluSG91cnMgYW5kIF9jbGFpbUR1cmF0aW9uSW5Ib3VycyBtdXN0IGJlIHBvc2l0aXZlIiApOwogICAgICAgICAgICByZXR1cm4gUmV0dXJuVmFsdWUuRXJyb3I7CiAgICAgICAgfQogICAgICAgIF9kZWFscy5sZW5ndGgrKzsKICAgICAgICBfZGVhbHNbZGVhbElkXS5kZXBvc2l0U3VtID0gMDsKCSAgICBfZGVhbHNbZGVhbElkXS5udW1DbGFpbXMgPSAwOwogICAgICAgIF9kZWFsc1tkZWFsSWRdLmNsYWltU3VtID0gMDsKICAgICAgICBfZGVhbHNbZGVhbElkXS5zdGFydFRpbWUgPSBub3c7CiAgICAgICAgX2RlYWxzW2RlYWxJZF0uZGVwb3NpdER1cmF0aW9uSW5TZWMgPSBfZGVwb3NpdER1cmF0aW9uSW5Ib3VycyAqIDEgaG91cnM7CiAgICAgICAgX2RlYWxzW2RlYWxJZF0uY2xhaW1EdXJhdGlvbkluU2VjID0gX2NsYWltRHVyYXRpb25JbkhvdXJzICogMSBob3VyczsKICAgICAgICBfZGVhbHNbZGVhbElkXS5jbGFpbURlcG9zaXRJbldlaSA9IF9jbGFpbURlcG9zaXRJbldlaTsKICAgICAgICBfZGVhbHNbZGVhbElkXS5jbGFpbVZhbHVlSW5XZWkgPSBfY2xhaW1Vbml0VmFsdWVJbldlaTsKCSAgICBfZGVhbHNbZGVhbElkXS5taW5OdW1DbGFpbXMgPSBfbWluTnVtQ2xhaW1zOwogICAgICAgIF9kZWFsc1tkZWFsSWRdLmZ1bGx5RnVuZGVkID0gZmFsc2U7CiAgICAgICAgX2RlYWxzW2RlYWxJZF0uYWN0aXZlID0gdHJ1ZTsKICAgIAlOZXdEZWFsKCBtc2cuc2VuZGVyLAogICAgCSAgICAgICAgIGRlYWxJZCwKICAgIAkgICAgICAgICBub3csCiAgICAJICAgICAgICAgX2RlcG9zaXREdXJhdGlvbkluSG91cnMsCiAgICAJICAgICAgICAgX2NsYWltRHVyYXRpb25JbkhvdXJzLAogICAgCSAgICAgICAgIF9jbGFpbVVuaXRWYWx1ZUluV2VpLAogICAgCSAgICAgICAgIF9jbGFpbURlcG9zaXRJbldlaSwKICAgIAkgICAgICAgICBfbWluTnVtQ2xhaW1zLAogICAgCSAgICAgICAgIHRydWUsCiAgICAJICAgICAgICAgImFsbCBnb29kIiApOwogICAgICAgIHJldHVybiBSZXR1cm5WYWx1ZS5PazsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWFrZUNsYWltKCB1aW50IGRlYWxJZCApIHBheWFibGUgcmV0dXJucyhSZXR1cm5WYWx1ZSl7CiAgICAgICAgRGVhbCBkZWFsID0gX2RlYWxzW2RlYWxJZF07ICAgICAgICAKICAgICAgICBib29sIGVycm9yRGV0ZWN0ZWQgPSBmYWxzZTsKICAgICAgICBzdHJpbmcgbWVtb3J5IGVycm9yOwogICAgCS8vIHZhbGlkYXRpb25zCiAgICAJaWYoICFfZGVhbHNbZGVhbElkXS5hY3RpdmUgKXsKICAgIAkgICAgZXJyb3IgPSAiZGVhbCBpcyBub3QgYWN0aXZlIjsKICAgIAkgICAgLy9FcnJvckxvZyggbXNnLnNlbmRlciwgZGVhbElkLCAibWFrZUNsYWltOiBkZWFsIGlzIG5vdCBhY3RpdmUiKTsKICAgIAkgICAgZXJyb3JEZXRlY3RlZCA9IHRydWU7CiAgICAJfQogICAgICAgIGlmKCBkZWFsLnN0YXJ0VGltZSArIGRlYWwuY2xhaW1EdXJhdGlvbkluU2VjIDwgbm93ICl7CiAgICAgICAgICAgIGVycm9yID0gImNsYWltIHBoYXNlIGFscmVhZHkgZW5kZWQiOyAgICAgICAgICAgIAogICAgICAgICAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJtYWtlQ2xhaW06IGNsYWltIHBoYXNlIGFscmVhZHkgZW5kZWQiICk7CiAgICAgICAgICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiggbXNnLnZhbHVlICE9IGRlYWwuY2xhaW1EZXBvc2l0SW5XZWkgKXsKICAgICAgICAgICAgZXJyb3IgPSAibXNnLnZhbHVlIG11c3QgYmUgZXF1YWwgdG8gY2xhaW0gZGVwb3NpdCB1bml0IjsgICAgICAgICAgICAKICAgICAgICAgICAgLy9FcnJvckxvZyggbXNnLnNlbmRlciwgZGVhbElkLCAibWFrZUNsYWltOiBtc2cudmFsdWUgbXVzdCBiZSBlcXVhbCB0byBjbGFpbSBkZXBvc2l0IHVuaXQiICk7CiAgICAgICAgICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgIAlpZiggZGVhbC5jbGFpbXNbbXNnLnNlbmRlcl0gKXsKICAgIAkgICAgZXJyb3IgPSAiY2Fubm90IGNsYWltIHR3aWNlIHdpdGggdGhlIHNhbWUgYWRkcmVzcyI7CiAgICAgICAgICAgIC8vRXJyb3JMb2coIG1zZy5zZW5kZXIsIGRlYWxJZCwgIm1ha2VDbGFpbTogY2Fubm90IGNsYWltIHR3aWNlIHdpdGggdGhlIHNhbWUgYWRkcmVzcyIgKTsKICAgICAgICAgICAgZXJyb3JEZXRlY3RlZCA9IHRydWU7CiAgICAJfQogICAgCQogICAgCWlmKCBlcnJvckRldGVjdGVkICl7CiAgICAJICAgIENsYWltKCBtc2cuc2VuZGVyLCBkZWFsSWQsIGZhbHNlLCBlcnJvciApOwogICAgCSAgICBpZiggISBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSApIHRocm93OyAvLyBzZW5kIG1vbmV5IGJhY2sKICAgIAkgICAgcmV0dXJuIFJldHVyblZhbHVlLkVycm9yOwogICAgCX0KCgkgICAgLy8gYWN0dWFsIGNsYWltCiAgICAgICAgZGVhbC5jbGFpbVN1bSArPSBkZWFsLmNsYWltVmFsdWVJbldlaTsKICAgICAgICBkZWFsLmNsYWltc1ttc2cuc2VuZGVyXSA9IHRydWU7CgkgICAgZGVhbC5udW1DbGFpbXMrKzsKCgkgICAgQ2xhaW0oIG1zZy5zZW5kZXIsIGRlYWxJZCwgdHJ1ZSwgImFsbCBnb29kIiApOwoJICAgIAoJICAgIGlmKCBkZWFsLm51bUNsYWltcyA9PSBkZWFsLm1pbk51bUNsYWltcyApIEVub3VnaENsYWltcyggZGVhbElkICk7CgkgICAgCiAgICAJcmV0dXJuIFJldHVyblZhbHVlLk9rOwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VEZXBvc2l0KCB1aW50IGRlYWxJZCApIHBheWFibGUgcmV0dXJucyhSZXR1cm5WYWx1ZSl7CiAgICAgICAgYm9vbCBlcnJvckRldGVjdGVkID0gZmFsc2U7CiAgICAgICAgc3RyaW5nIG1lbW9yeSBlcnJvcjsKICAgIAkvLyB2YWxpZGF0aW9ucwogICAgICAgIGlmKCBtc2cudmFsdWUgPT0gMCApewogICAgICAgICAgICBlcnJvciA9ICJkZXBvc2l0IHZhbHVlIG11c3QgYmUgcG9zaXRpdmUiOwogICAgICAgICAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJtYWtlRGVwb3NpdDogZGVwb3NpdCB2YWx1ZSBtdXN0IGJlIHBvc2l0aXZlIik7CiAgICAgICAgICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgIAlpZiggIV9kZWFsc1tkZWFsSWRdLmFjdGl2ZSApewogICAgCSAgICBlcnJvciA9ICJkZWFsIGlzIG5vdCBhY3RpdmUiOwogICAgCSAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJtYWtlRGVwb3NpdDogZGVhbCBpcyBub3QgYWN0aXZlIik7CiAgICAJICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgCX0KICAgICAgICBEZWFsIGRlYWwgPSBfZGVhbHNbZGVhbElkXTsKICAgICAgICBpZiggZGVhbC5zdGFydFRpbWUgKyBkZWFsLmNsYWltRHVyYXRpb25JblNlYyA+IG5vdyApewogICAgICAgICAgICBlcnJvciA9ICJjb250cmFjdCBpcyBzdGlsbCBpbiBjbGFpbSBwaGFzZSI7CiAgICAJICAgIC8vRXJyb3JMb2coIG1zZy5zZW5kZXIsIGRlYWxJZCwgIm1ha2VEZXBvc2l0OiBjb250cmFjdCBpcyBzdGlsbCBpbiBjbGFpbSBwaGFzZSIpOwogICAgCSAgICBlcnJvckRldGVjdGVkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYoIGRlYWwuc3RhcnRUaW1lICsgZGVhbC5jbGFpbUR1cmF0aW9uSW5TZWMgKyBkZWFsLmRlcG9zaXREdXJhdGlvbkluU2VjIDwgbm93ICl7CiAgICAgICAgICAgIGVycm9yID0gImRlcG9zaXQgcGhhc2UgaXMgb3ZlciI7CiAgICAJICAgIC8vRXJyb3JMb2coIG1zZy5zZW5kZXIsIGRlYWxJZCwgIm1ha2VEZXBvc2l0OiBkZXBvc2l0IHBoYXNlIGlzIG92ZXIiKTsKICAgIAkgICAgZXJyb3JEZXRlY3RlZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmKCAoIG1zZy52YWx1ZSAlIGRlYWwuY2xhaW1WYWx1ZUluV2VpICkgPiAwICl7CiAgICAgICAgICAgIGVycm9yID0gImRlcG9zaXQgdmFsdWUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIGNsYWltIHZhbHVlIjsKICAgIAkgICAgLy9FcnJvckxvZyggbXNnLnNlbmRlciwgZGVhbElkLCAibWFrZURlcG9zaXQ6IGRlcG9zaXQgdmFsdWUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIGNsYWltIHZhbHVlIik7CiAgICAJICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgIAlpZiggZGVhbC5kZXBvc2l0W21zZy5zZW5kZXJdID4gMCApewogICAgCSAgICBlcnJvciA9ICJjYW5ub3QgZGVwb3NpdCB0d2ljZSB3aXRoIHRoZSBzYW1lIGFkZHJlc3MiOwogICAgCSAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJtYWtlRGVwb3NpdDogY2Fubm90IGRlcG9zaXQgdHdpY2Ugd2l0aCB0aGUgc2FtZSBhZGRyZXNzIik7CiAgICAJICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgCX0KICAgIAlpZiggZGVhbC5udW1DbGFpbXMgPCBkZWFsLm1pbk51bUNsYWltcyApewogICAgCSAgICBlcnJvciA9ICJkZWFsIGlzIG9mZiBhcyB0aGVyZSBhcmUgbm90IGVub3VnaCBjbGFpbXMuIENhbGwgd2l0aGRyYXcgd2l0aCB5b3UgY2xhaW1lciBhZGRyZXNzIjsKICAgIAkgICAgLypFcnJvckxvZyggbXNnLnNlbmRlciwKICAgIAkgICAgICAgICAgICAgIGRlYWxJZCwKICAgIAkgICAgICAgICAgICAgICJtYWtlRGVwb3NpdDogZGVhbCBpcyBvZmYgYXMgdGhlcmUgYXJlIG5vdCBlbm91Z2ggY2xhaW1zLiBDYWxsIHdpdGhkcmF3IHdpdGggeW91IGNsYWltZXIgYWRkcmVzcyIpOyovCiAgICAJICAgIGVycm9yRGV0ZWN0ZWQgPSB0cnVlOwogICAgCX0KICAgIAkKICAgIAlpZiggZXJyb3JEZXRlY3RlZCApewogICAgCSAgICBEZXBvc2l0KCBtc2cuc2VuZGVyLCBkZWFsSWQsIG1zZy52YWx1ZSwgZmFsc2UsIGVycm9yICk7CiAgICAJICAgIGlmKCAhIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpICkgdGhyb3c7IC8vIHNlbmQgbW9uZXkgYmFjawogICAgCSAgICByZXR1cm4gUmV0dXJuVmFsdWUuRXJyb3I7CiAgICAJfQogICAgICAgIAoJICAgIC8vIGFjdHVhbCBkZXBvc2l0CiAgICAgICAgZGVhbC5kZXBvc2l0U3VtICs9IG1zZy52YWx1ZTsKICAgICAgICBkZWFsLmRlcG9zaXRbbXNnLnNlbmRlcl0gPSBtc2cudmFsdWU7CgogICAgCWlmKCBkZWFsLmRlcG9zaXRTdW0gPj0gZGVhbC5jbGFpbVN1bSApewogICAgCSAgICBkZWFsLmZ1bGx5RnVuZGVkID0gdHJ1ZTsKICAgIAkgICAgRGVhbEZ1bGx5RnVuZGVkKCBkZWFsSWQgKTsKICAgIAl9CiAgICAKICAgIAlEZXBvc2l0KCBtc2cuc2VuZGVyLCBkZWFsSWQsIG1zZy52YWx1ZSwgdHJ1ZSwgImFsbCBnb29kIiApOwoJICAgIHJldHVybiBSZXR1cm5WYWx1ZS5PazsgICAgCQogICAgfQogICAgICAgIAogICAgZnVuY3Rpb24gd2l0aGRyYXcoIHVpbnQgZGVhbElkICkgcmV0dXJucyhSZXR1cm5WYWx1ZSl7CiAgICAJLy8gdmFsaWRhdGlvbgogICAgICAgIGJvb2wgZXJyb3JEZXRlY3RlZCA9IGZhbHNlOwogICAgICAgIHN0cmluZyBtZW1vcnkgZXJyb3I7CiAgICAgICAgRGVhbCBkZWFsID0gX2RlYWxzW2RlYWxJZF07CiAgICAJYm9vbCBlbm91Z2hDbGFpbXMgPSBkZWFsLm51bUNsYWltcyA+PSBkZWFsLm1pbk51bUNsYWltczsKICAgIAlpZiggISBlbm91Z2hDbGFpbXMgKXsKICAgIAkgICAgaWYoIGRlYWwuc3RhcnRUaW1lICsgZGVhbC5jbGFpbUR1cmF0aW9uSW5TZWMgPiBub3cgKXsKICAgIAkgICAgICAgIGVycm9yID0gImNsYWltIHBoYXNlIG5vdCBvdmVyIHlldCI7CiAgICAJICAgICAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJ3aXRoZHJhdzogY2xhaW0gcGhhc2Ugbm90IG92ZXIgeWV0Iik7CiAgICAJICAgICAgICBlcnJvckRldGVjdGVkID0gdHJ1ZTsKICAgIAkgICAgfQogICAgCX0KICAgIAllbHNlewogICAgCSAgICBpZiggZGVhbC5zdGFydFRpbWUgKyBkZWFsLmRlcG9zaXREdXJhdGlvbkluU2VjICsgZGVhbC5jbGFpbUR1cmF0aW9uSW5TZWMgPiBub3cgKXsKICAgIAkgICAgICAgIGVycm9yID0gImRlcG9zaXQgcGhhc2Ugbm90IG92ZXIgeWV0IjsKICAgIAkgICAgICAgIC8vRXJyb3JMb2coIG1zZy5zZW5kZXIsIGRlYWxJZCwgIndpdGhkcmF3OiBkZXBvc2l0IHBoYXNlIG5vdCBvdmVyIHlldCIpOwogICAgCSAgICAgICAgZXJyb3JEZXRlY3RlZCA9IHRydWU7CiAgICAJICAgIH0KICAgIAl9CiAgICAJCiAgICAJaWYoIGVycm9yRGV0ZWN0ZWQgKXsKICAgIAkgICAgV2l0aGRyYXcoIG1zZy5zZW5kZXIsIGRlYWxJZCwgMCwgZmFsc2UsIGZhbHNlLCBlcnJvciApOwogICAgICAgIAlyZXR1cm4gUmV0dXJuVmFsdWUuRXJyb3I7IC8vIG5vdGUgdGhhdCBmdW5jdGlvbiBpcyBub3QgcGF5YWJsZSAgICAJICAgIAogICAgCX0KCgoJICAgIC8vIGFjdHVhbCB3aXRoZHJhdwoJICAgIGJvb2wgcHVibGljV2l0aGRyYXc7CiAgICAJdWludCB3aXRoZHJhd2VkVmFsdWUgPSAwOwogICAgICAgIGlmKCAoISBkZWFsLmZ1bGx5RnVuZGVkKSAmJiBlbm91Z2hDbGFpbXMgKXsKCSAgICAgICAgcHVibGljV2l0aGRyYXcgPSB0cnVlOwogICAgICAgICAgICB1aW50IGRlcG9zaXRWYWx1ZSA9IGRlYWwuZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgICAgICAgaWYoIGRlcG9zaXRWYWx1ZSA9PSAwICl7CiAgICAgICAgICAgICAgICBXaXRoZHJhdyggbXNnLnNlbmRlciwgZGVhbElkLCAwLCBwdWJsaWNXaXRoZHJhdywgZmFsc2UsICJhZGRyZXNzIG1hZGUgbm8gZGVwb3NpdC4gTm90ZSB0aGF0IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBwdWJsaWMgYWRkcmVzcyIgKTsKICAgIAkgICAgICAgIC8vRXJyb3JMb2coIG1zZy5zZW5kZXIsIGRlYWxJZCwgIndpdGhkcmF3OiBhZGRyZXNzIG1hZGUgbm8gZGVwb3NpdC4gTm90ZSB0aGF0IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBwdWJsaWMgYWRkcmVzcyIpOwogICAgCSAgICAgICAgcmV0dXJuIFJldHVyblZhbHVlLkVycm9yOyAvLyBmdW5jdGlvbiBub24gcGF5YWJsZQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB1aW50IGVmZmVjdGl2ZU51bURlcG9zaXRzID0gZGVhbC5kZXBvc2l0U3VtIC8gZGVhbC5jbGFpbVZhbHVlSW5XZWk7CiAgICAgICAgICAgIHVpbnQgdXNlckVmZmVjdGl2ZU51bURlcG9zaXRzID0gZGVwb3NpdFZhbHVlIC8gZGVhbC5jbGFpbVZhbHVlSW5XZWk7CiAgICAgICAgICAgIHVpbnQgZXh0cmFCYWxhbmNlID0gKCBkZWFsLm51bUNsYWltcyAtIGVmZmVjdGl2ZU51bURlcG9zaXRzICkgKiBkZWFsLmNsYWltRGVwb3NpdEluV2VpOwogICAgICAgICAgICB1aW50IHVzZXJFeHRyYUJhbGFuY2UgPSB1c2VyRWZmZWN0aXZlTnVtRGVwb3NpdHMgKiBleHRyYUJhbGFuY2UgLyBlZmZlY3RpdmVOdW1EZXBvc2l0czsKCiAgICAgICAgICAgIGRlYWwuZGVwb3NpdFttc2cuc2VuZGVyXSA9IDA7IC8vIGludmFsaWRhdGUgdXNlcgogICAgICAgICAgICAvLyBnaXZlIG9ubHkgaGFsZiBvZiBleHRyYSBiYWxhbmNlLiBvdGhlcndpc2UgZGlzaG9uZXN0IHBhcnR5IGNvdWxkIG9idGFpbiA5OSUgb2YgdGhlIGV4dHJhIGJhbGFuY2UgYW5kIGxvc2UgYWxtb3N0IG5vdGhpbmcKCSAgICAgICAgd2l0aGRyYXdlZFZhbHVlID0gZGVwb3NpdFZhbHVlICsgZGVhbC5jbGFpbURlcG9zaXRJbldlaSAqIHVzZXJFZmZlY3RpdmVOdW1EZXBvc2l0cyArICggdXNlckV4dHJhQmFsYW5jZSAvIDIgKTsKICAgICAgICAgICAgaWYoICEgbXNnLnNlbmRlci5zZW5kKHdpdGhkcmF3ZWRWYWx1ZSkgKSB0aHJvdzsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgIAkgICAgcHVibGljV2l0aGRyYXcgPSBmYWxzZTsKICAgICAgICAgICAgaWYoICEgZGVhbC5jbGFpbXNbbXNnLnNlbmRlcl0gKXsKICAgICAgICAgICAgICAgIFdpdGhkcmF3KCBtc2cuc2VuZGVyLCBkZWFsSWQsIDAsIHB1YmxpY1dpdGhkcmF3LCBmYWxzZSwgImFkZHJlc3MgbWFkZSBubyBjbGFpbXMuIE5vdGUgdGhhdCB0aGlzIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgc2VjcmV0IGFkZHJlc3MiICk7CiAgICAJICAgICAgICAvL0Vycm9yTG9nKCBtc2cuc2VuZGVyLCBkZWFsSWQsICJ3aXRoZHJhdzogYWRkcmVzcyBtYWRlIG5vIGNsYWltcy4gTm90ZSB0aGF0IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBzZWNyZXQgYWRkcmVzcyIpOwogICAgCSAgICAgICAgcmV0dXJuIFJldHVyblZhbHVlLkVycm9yOyAvLyBmdW5jdGlvbiBub24gcGF5YWJsZQogICAgICAgICAgICB9CgkgICAgICAgIGlmKCBlbm91Z2hDbGFpbXMgKSB3aXRoZHJhd2VkVmFsdWUgPSBkZWFsLmNsYWltRGVwb3NpdEluV2VpICsgZGVhbC5jbGFpbVZhbHVlSW5XZWk7CgkgICAgICAgIGVsc2Ugd2l0aGRyYXdlZFZhbHVlID0gZGVhbC5jbGFpbURlcG9zaXRJbldlaTsKCQkKICAgICAgICAgICAgZGVhbC5jbGFpbXNbbXNnLnNlbmRlcl0gPSBmYWxzZTsgLy8gaW52YWxpZGF0ZSBjbGFpbQogICAgICAgICAgICBpZiggISBtc2cuc2VuZGVyLnNlbmQod2l0aGRyYXdlZFZhbHVlKSApIHRocm93OwogICAgICAgIH0KCSAgICAKICAgICAgICBXaXRoZHJhdyggbXNnLnNlbmRlciwgZGVhbElkLCB3aXRoZHJhd2VkVmFsdWUsIHB1YmxpY1dpdGhkcmF3LCB0cnVlLCAiYWxsIGdvb2QiICk7CiAgICAgICAgcmV0dXJuIFJldHVyblZhbHVlLk9rOwogICAgfSAgICAKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAKICAgIGZ1bmN0aW9uIGRlYWxTdGF0dXModWludCBfZGVhbElkKSBjb25zdGFudCByZXR1cm5zKHVpbnRbNF0pewogICAgICAgIC8vIHJldHVybnMgKGFjdGl2ZSwgbnVtIGNsYWltcywgY2xhaW0gc3VtLCBkZXBvc2l0IHN1bSkgYWxsIGFzIGludGVnZXJzCiAgICAgICAgdWludCBhY3RpdmUgPSBfZGVhbHNbX2RlYWxJZF0uYWN0aXZlID8gMSA6IDA7CiAgICAgICAgdWludCBudW1DbGFpbXMgPSBfZGVhbHNbX2RlYWxJZF0ubnVtQ2xhaW1zOwogICAgICAgIHVpbnQgY2xhaW1TdW0gPSBfZGVhbHNbX2RlYWxJZF0uY2xhaW1TdW07CgkgICAgdWludCBkZXBvc2l0U3VtID0gX2RlYWxzW19kZWFsSWRdLmRlcG9zaXRTdW07CiAgICAgICAgCiAgICAgICAgcmV0dXJuIFthY3RpdmUsIG51bUNsYWltcywgY2xhaW1TdW0sIGRlcG9zaXRTdW1dOwogICAgfQoKfQ=='.
	

]
