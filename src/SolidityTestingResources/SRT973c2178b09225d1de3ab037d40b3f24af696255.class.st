Class {
	#name : #SRT973c2178b09225d1de3ab037d40b3f24af696255,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT973c2178b09225d1de3ab037d40b3f24af696255 >> base64 [
	^ 'Y29udHJhY3QgU0hBM181MTIgewogICBmdW5jdGlvbiBoYXNoKHVpbnQ2NFs4XSkgcHVyZSBwdWJsaWMgcmV0dXJucyh1aW50MzJbMTZdKSB7fQp9Cgpjb250cmFjdCBUZWlraG9zQm91bnR5IHsKCiAgICBhZGRyZXNzIHB1YmxpYyBiaXBlZGFsam9lID0gMHg0YzVEMjRBN0NhOTcyYWVBOTBDYzA0MERBNjc3MEExM0ZjN0Q0ZDlBOyAvLyBJbiBjYXNlIG5vIG9uZSBzdWJtaXRzIHRoZSBjb3JyZWN0IHNvbHV0aW9uLCB0aGUgYm91bnR5IGlzIHNlbnQgdG8gbWUKCiAgICBTSEEzXzUxMiBwdWJsaWMgc2hhM181MTIgPSBTSEEzXzUxMigweGJENjM2MWNDNDJmRDExM0VEOUE5ZmRiRURGN2VlYTI3YjMyNWEyMjIpOyAvLyBNYWlubmV0OiAweGJENjM2MWNDNDJmRDExM0VEOUE5ZmRiRURGN2VlYTI3YjMyNWEyMjIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmlua2VieTogMHgyNTEzQ0Y5OUUwNTFEZTIyY0VCNmNmNWYyRWFGMGRjNDA2NWM4RjFmCgogICAgc3RydWN0IENvbW1pdCB7CiAgICAgICAgdWludCB0aW1lc3RhbXA7CiAgICAgICAgYnl0ZXMgc2lnbmF0dXJlOwogICAgfSAgICAKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gQ29tbWl0KSBwdWJsaWMgY29tbWl0bWVudDsKCiAgICBzdHJ1Y3QgU29sdXRpb24gewogICAgICAgIHVpbnQgdGltZXN0YW1wOwogICAgICAgIGJ5dGVzIHB1YmxpY0tleTsgLy8gVGhlIGtleSB0aGF0IHNvbHZlcyB0aGUgYm91bnR5LCBlbXB0eSB1bnRpbCB0aGUgY29ycmVjdCBrZXkgaGFzIGJlZW4gc3VibWl0dGVkIHdpdGggYXV0aGVudGljYXRlKCkKICAgICAgICBieXRlczMyIG1zZ0hhc2g7CiAgICB9ICAgIAoKICAgIFNvbHV0aW9uIHB1YmxpYyBpc1NvbHZlZDsKICAgIAogICAgc3RydWN0IFdpbm5lciB7CiAgICAgICAgdWludCB0aW1lc3RhbXA7CiAgICAgICAgYWRkcmVzcyB3aW5uZXI7CiAgICB9CgogICAgV2lubmVyIHB1YmxpYyB3aW5uZXI7CgogICAgZW51bSBTdGF0ZSB7IENvbW1pdCwgUmV2ZWFsLCBQYXlvdXQgfQogICAgCiAgICBtb2RpZmllciBpblN0YXRlKFN0YXRlIF9zdGF0ZSkKICAgIHsKICAgICAgICBpZihfc3RhdGUgPT0gU3RhdGUuQ29tbWl0KSB7IHJlcXVpcmUoaXNTb2x2ZWQudGltZXN0YW1wID09IDApOyB9CiAgICAgICAgaWYoX3N0YXRlID09IFN0YXRlLlJldmVhbCkgeyByZXF1aXJlKGlzU29sdmVkLnRpbWVzdGFtcCAhPSAwICYmIG5vdyA8IGlzU29sdmVkLnRpbWVzdGFtcCArIDcgZGF5cyk7IH0KICAgICAgICBpZihfc3RhdGUgPT0gU3RhdGUuUGF5b3V0KSB7IHJlcXVpcmUoaXNTb2x2ZWQudGltZXN0YW1wICE9IDAgJiYgbm93ID4gaXNTb2x2ZWQudGltZXN0YW1wICsgNyBkYXlzKTsgfQogICAgICAgIF87CiAgICB9CgogICAgLy8gUHJvb2Ytb2YtcHVibGljLWtleSBpbiBmb3JtYXQgMnhieXRlczMyLCB0byBzdXBwb3J0IHhvciBvcGVyYXRvciBhbmQgZWNyZWNvdmVyIHIsIHMgdiBmb3JtYXQKICAgIGJ5dGVzMzIgcHVibGljIHByb29mX29mX3B1YmxpY19rZXkxID0gaGV4IjdiNWY4ZGRkMzRkZjUwZDI0ZTQ5MmJiZWUxYTg4ODEyMmMxNTc5ZTg5OGVhZWI2ZTA2NzMxNTZhMWI5N2MyNGIiOwogICAgYnl0ZXMzMiBwdWJsaWMgcHJvb2Zfb2ZfcHVibGljX2tleTIgPSBoZXgiMjZkNjRhMzQ3NTZiZDY4NDc2NmRjZTNlNmE4ZTg2OTVhMTRhMmIxNmQwMDE1NTlmNGFlM2EwODQ5YWMxMjdmZSI7CgogICAgZnVuY3Rpb24gY29tbWl0KGJ5dGVzIF9zaWduYXR1cmUpIHB1YmxpYyBpblN0YXRlKFN0YXRlLkNvbW1pdCkgewogICAgICAgIHJlcXVpcmUoY29tbWl0bWVudFttc2cuc2VuZGVyXS50aW1lc3RhbXAgPT0gMCk7CiAgICAgICAgY29tbWl0bWVudFttc2cuc2VuZGVyXS5zaWduYXR1cmUgPSBfc2lnbmF0dXJlOwogICAgICAgIGNvbW1pdG1lbnRbbXNnLnNlbmRlcl0udGltZXN0YW1wID0gbm93OwogICAgfQoKICAgIGZ1bmN0aW9uIHJldmVhbCgpIHB1YmxpYyBpblN0YXRlKFN0YXRlLlJldmVhbCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWduYXR1cmUgPSBjb21taXRtZW50W21zZy5zZW5kZXJdLnNpZ25hdHVyZTsKICAgICAgICByZXF1aXJlKHNpZ25hdHVyZS5sZW5ndGggIT0gMCk7CgogICAgICAgIGJ5dGVzMzIgcjsKICAgICAgICBieXRlczMyIHM7CiAgICAgICAgdWludDggdjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZ25hdHVyZSwweDIwKSkKICAgICAgICBzIDo9IG1sb2FkKGFkZChzaWduYXR1cmUsMHg0MCkpCiAgICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWduYXR1cmUsIDk2KSkpCiAgICAgICAgfQoKICAgICAgICBpZiAodiA8IDI3KSB2ICs9IDI3OwoKICAgICAgICBpZihlY3JlY292ZXIoaXNTb2x2ZWQubXNnSGFzaCwgdiwgciwgcykgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICBpZih3aW5uZXIudGltZXN0YW1wID09IDAgfHwgY29tbWl0bWVudFttc2cuc2VuZGVyXS50aW1lc3RhbXAgPCB3aW5uZXIudGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICB3aW5uZXIud2lubmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgICAgIHdpbm5lci50aW1lc3RhbXAgPSBjb21taXRtZW50W21zZy5zZW5kZXJdLnRpbWVzdGFtcDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBkZWxldGUgY29tbWl0bWVudFttc2cuc2VuZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiByZXdhcmQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5QYXlvdXQpIHsKICAgICAgICBpZih3aW5uZXIud2lubmVyICE9IDApIHNlbGZkZXN0cnVjdCh3aW5uZXIud2lubmVyKTsKICAgICAgICBlbHNlIHNlbGZkZXN0cnVjdChiaXBlZGFsam9lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGUoYnl0ZXMgX3B1YmxpY0tleSkgcHVibGljIGluU3RhdGUoU3RhdGUuQ29tbWl0KSB7CiAgICAgICAgCiAgICAgICAgLy8gUmVtaW5kIHBlb3BsZSB0byBjb21taXQgYmVmb3JlIHN1Ym1pdHRpbmcgdGhlIHNvbHV0aW9uCiAgICAgICAgcmVxdWlyZShjb21taXRtZW50W21zZy5zZW5kZXJdLnRpbWVzdGFtcCAhPSAwKTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkga2V5SGFzaCA9IGdldEhhc2goX3B1YmxpY0tleSk7CiAgICAgICAgIAogICAgICAgIC8vIFNwbGl0IGhhc2ggb2YgcHVibGljIGtleSBpbiAyeGJ5dGVzMzIsIHRvIHN1cHBvcnQgeG9yIG9wZXJhdG9yIGFuZCBlY3JlY292ZXIgciwgcyB2IGZvcm1hdAoKICAgICAgICBieXRlczMyIGhhc2gxOwogICAgICAgIGJ5dGVzMzIgaGFzaDI7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICBoYXNoMSA6PSBtbG9hZChhZGQoa2V5SGFzaCwweDIwKSkKICAgICAgICBoYXNoMiA6PSBtbG9hZChhZGQoa2V5SGFzaCwweDQwKSkKICAgICAgICB9CgogICAgICAgIC8vIFVzZSB4b3IgKHJldmVyc2UgY2lwaGVyKSB0byBnZXQgc2lnbmF0dXJlIGluIHIsIHMgdiBmb3JtYXQKICAgICAgICBieXRlczMyIHIgPSBwcm9vZl9vZl9wdWJsaWNfa2V5MSBeIGhhc2gxOwogICAgICAgIGJ5dGVzMzIgcyA9IHByb29mX29mX3B1YmxpY19rZXkyIF4gaGFzaDI7CgogICAgICAgIC8vIEdldCBtc2dIYXNoIGZvciB1c2Ugd2l0aCBlY3JlY292ZXIKICAgICAgICBieXRlczMyIG1zZ0hhc2ggPSBrZWNjYWsyNTYoIlx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcbjY0IiwgX3B1YmxpY0tleSk7CgogICAgICAgIC8vIEdldCBhZGRyZXNzIGZyb20gcHVibGljIGtleQogICAgICAgIGFkZHJlc3Mgc2lnbmVyID0gYWRkcmVzcyhrZWNjYWsyNTYoX3B1YmxpY0tleSkpOwoKICAgICAgICAvLyBUaGUgdmFsdWUgdiBpcyBub3Qga25vd24sIHRyeSBib3RoIDI3IGFuZCAyOAogICAgICAgIGlmKGVjcmVjb3Zlcihtc2dIYXNoLCAyNywgciwgcykgPT0gc2lnbmVyIHx8IGVjcmVjb3Zlcihtc2dIYXNoLCAyOCwgciwgcykgPT0gc2lnbmVyICkgewogICAgICAgICAgICBpc1NvbHZlZC50aW1lc3RhbXAgPSBub3c7CiAgICAgICAgICAgIGlzU29sdmVkLnB1YmxpY0tleSA9IF9wdWJsaWNLZXk7IAogICAgICAgICAgICBpc1NvbHZlZC5tc2dIYXNoID0gbXNnSGFzaDsKICAgICAgICB9CiAgICB9CgogICAvLyBBIHNlcGFyYXRlIG1ldGhvZCBnZXRIYXNoKCkgZm9yIGNvbnZlcnRpbmcgYnl0ZXMgdG8gdWludDY0WzhdLCB3aGljaCBpcyBkb25lIHNpbmNlIHRoZSBFVk0gY2Fubm90IHBhc3MgYnl0ZXMgYmV0d2VlbiBjb250cmFjdHMKICAgLy8gVGhlIFNIQTNfNTEyIGxvZ2ljIGlzIGluIGEgc2VwYXJhdGUgY29udHJhY3QgdG8gbWFrZSBpdCBlYXNpZXIgdG8gcmVhZCwgdGhhdCBjb250cmFjdCBjb3VsZCBiZSBhdWRpdGVkIG9uIGl0cyBvd24sIGFuZCBzbyBvbgoKICAgZnVuY3Rpb24gZ2V0SGFzaChieXRlcyBfbWVzc2FnZSkgdmlldyBpbnRlcm5hbCByZXR1cm5zIChieXRlcyBtZXNzYWdlSGFzaCkgewoKICAgICAgICAvLyBVc2UgU0hBM181MTIgbGlicmFyeSB0byBnZXQgYSBzaGEzXzUxMiBoYXNoIG9mIHB1YmxpYyBrZXkKCiAgICAgICAgdWludDY0WzhdIG1lbW9yeSBpbnB1dDsKCiAgICAgICAgLy8gVGhlIGV2bSBpcyBiaWcgZW5kaWFuLCBoYXZlIHRvIHJldmVyc2UgdGhlIGJ5dGVzCgogICAgICAgIGJ5dGVzIG1lbW9yeSByZXZlcnNlZCA9IG5ldyBieXRlcyg2NCk7CgogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgNjQ7IGkrKykgewogICAgICAgICAgICByZXZlcnNlZFtpXSA9IF9tZXNzYWdlWzYzIC0gaV07CiAgICAgICAgfQoKICAgICAgICBmb3IoaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAgICAgYnl0ZXM4IG9uZUVpZ3RoOwogICAgICAgICAgICAvLyBMb2FkIDggYnl0ZSBmcm9tIHJldmVyc2VkIHB1YmxpYyBrZXkgYXQgcG9zaXRpb24gMzIgKyBpICogOAogICAgICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgICAgICBvbmVFaWd0aCA6PSBtbG9hZChhZGQocmV2ZXJzZWQsIGFkZCgzMiwgbXVsKGksIDgpKSkpIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlucHV0WzcgLSBpXSA9IHVpbnQ2NChvbmVFaWd0aCk7CiAgICAgICAgfQoKICAgICAgICB1aW50MzJbMTZdIG1lbW9yeSBvdXRwdXQgPSBzaGEzXzUxMi5oYXNoKGlucHV0KTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgdG9CeXRlcyA9IG5ldyBieXRlcyg2NCk7CiAgICAgICAgCiAgICAgICAgZm9yKGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICBieXRlczQgb25lU2l4dGVlbnRoID0gYnl0ZXM0KG91dHB1dFsxNSAtIGldKTsKICAgICAgICAgICAgLy8gU3RvcmUgNCBieXRlIGluIGtleUhhc2ggYXQgcG9zaXRpb24gMzIgKyBpICogNAogICAgICAgICAgICBhc3NlbWJseSB7IG1zdG9yZShhZGQodG9CeXRlcywgYWRkKDMyLCBtdWwoaSwgNCkpKSwgb25lU2l4dGVlbnRoKSB9CiAgICAgICAgfQoKICAgICAgICBtZXNzYWdlSGFzaCA9IG5ldyBieXRlcyg2NCk7CgogICAgICAgIGZvcihpID0gMDsgaSA8IDY0OyBpKyspIHsKICAgICAgICAgICAgbWVzc2FnZUhhc2hbaV0gPSB0b0J5dGVzWzYzIC0gaV07CiAgICAgICAgfSAgIAogICB9CiAgIAogICAvLyBNYWtlIGl0IHBvc3NpYmxlIHRvIHNlbmQgRVRIIHRvIHRoZSBjb250cmFjdCB3aXRoICJwYXlhYmxlIiBvbiB0aGUgZmFsbGJhY2sgZnVuY3Rpb24KICAgCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHt9Cgp9'.
	

]
