Class {
	#name : #SRTa06c318e59237f6ba20411ca7bccefd7e5357896,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa06c318e59237f6ba20411ca7bccefd7e5357896 >> base64 [
	^ ''.
	

]
