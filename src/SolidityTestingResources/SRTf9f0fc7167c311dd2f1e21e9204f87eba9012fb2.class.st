Class {
	#name : #SRTf9f0fc7167c311dd2f1e21e9204f87eba9012fb2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf9f0fc7167c311dd2f1e21e9204f87eba9012fb2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKY29udHJhY3QgUGFyZW50VG9rZW4gewoKICAgICAvKiBsaWJyYXJ5IHVzZWQgZm9yIGNhbGN1bGF0aW9ucyAqLwogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7IAoKICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3M9PnVpbnQpKSBhbGxvd2FuY2U7ICAgICAgICAKCgoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gUGFyZW50VG9rZW4odWludDI1NiBjdXJyZW50U3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbCl7CiAgICAgICAgICAgIAogICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAgY3VycmVudFN1cHBseTsgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMgIAogICAgICAgdG90YWxTdXBwbHkgPSBjdXJyZW50U3VwcGx5OyAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseSAKICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgLy8gRGVjaW1hbHMgZm9yIHRoZSB0b2tlbnMKICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOwkJCQkJLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMJCiAgICB9CiAgICAKICAgIAoKICAgLy8vQG5vdGljZSBUcmFuc2ZlciB0b2tlbnMgdG8gdGhlIGJlbmVmaWNpYXJ5IGFjY291bnQKICAgLy8vQHBhcmFtICB0byBUaGUgYmVuZWZpY2lhcnkgYWNjb3VudAogICAvLy9AcGFyYW0gIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQgIAogICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKAogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB2YWx1ZSAKICAgICAgICAgICAgJiYgdmFsdWUgPiAwIAogICAgICAgICAgICApOwogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7ICAgIAogICAgICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKCS8vL0Bub3RpY2UgQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZgoJLy8vQHBhcmFtICBzcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQgCgkvLy9AcGFyYW0gIHZhbHVlIFRoZSBhbW91bnQgdG8gYmUgYXBwcm92ZWQgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bc3BlbmRlcl0gPSB2YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy9Abm90aWNlIEFwcHJvdmUgYW5kIHRoZW4gY29tbXVuaWNhdGUgdGhlIGFwcHJvdmVkIGNvbnRyYWN0IGluIGEgc2luZ2xlIHR4CgkvLy9AcGFyYW0gIHNwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZCAKCS8vL0BwYXJhbSAgdmFsdWUgVGhlIGFtb3VudCB0byBiZSBhcHByb3ZlZCAKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSwgYnl0ZXMgZXh0cmFEYXRhKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgeyAgICAKICAgICAgICB0b2tlblJlY2lwaWVudCByZWNTcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoc3BlbmRlciwgdmFsdWUpKSB7CiAgICAgICAgICAgIHJlY1NwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIHZhbHVlLCB0aGlzLCBleHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgoKCiAgIC8vL0Bub3RpY2UgVHJhbnNmZXIgdG9rZW5zIGJldHdlZW4gYWNjb3VudHMKICAgLy8vQHBhcmFtICBmcm9tIFRoZSBiZW5lZmFjdG9yL3NlbmRlciBhY2NvdW50LgogICAvLy9AcGFyYW0gIHRvIFRoZSBiZW5lZmljaWFyeSBhY2NvdW50CiAgIC8vL0BwYXJhbSAgdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcmVkICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgYWxsb3dhbmNlW2Zyb21dW21zZy5zZW5kZXJdID49IHZhbHVlCiAgICAgICAgICAgICYmYmFsYW5jZXNbZnJvbV0gPj0gdmFsdWUKICAgICAgICAgICAgJiYgdmFsdWUgPiAwCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICAgICAgICAgIGJhbGFuY2VzW3RvXSA9ICBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICAgICAgYWxsb3dhbmNlW2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dhbmNlW2Zyb21dW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICAKfQoKCmNvbnRyYWN0IEVhc3lIb21lcyBpcyBvd25lZCxQYXJlbnRUb2tlbnsKCiAgICAgLyogbGlicmFyeSB1c2VkIGZvciBjYWxjdWxhdGlvbnMgKi8KICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OyAKCiAgICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnVG9rZW4gMC4xJzsgIAogICAgdWludDI1NiBwdWJsaWMgY3VycmVudFN1cHBseT0gMTAwMDAwMDAwMDAwMDAwMDAwOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRUhUIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgdG9rZW5OYW1lID0gIkVhc3lIb21lcyI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICAgIAoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CgoKICAvLy9Abm90aWNlIERlZmF1bHQgZnVuY3Rpb24gdXNlZCBmb3IgYW55IHBheW1lbnRzIG1hZGUuCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgICAgICBhY2NlcHRQYXltZW50KCk7ICAgIAogICAgfQogICAKCiAgIC8vL0Bub3RpY2UgQWNjZXB0IHBheW1lbnQgYW5kIHRyYW5zZmVyIHRvIG93bmVyIGFjY291bnQuIAogICAgZnVuY3Rpb24gYWNjZXB0UGF5bWVudCgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlPjApOwogICAgICAgIAogICAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgoKCiAgICBmdW5jdGlvbiBFYXN5SG9tZXMoKVBhcmVudFRva2VuKGN1cnJlbnRTdXBwbHksdG9rZW5OYW1lLGRlY2ltYWxzLHN5bWJvbCl7fQoKCiAgIC8vL0Bub3RpY2UgUHJvdmlkZXMgYmFsYW5jZSBvZiB0aGUgYWNjb3VudCByZXF1ZXN0ZWQgCiAgIC8vL0BwYXJhbSAgYWRkIEFkZHJlc3Mgb2YgdGhlIGFjY291bnQgZm9yIHdoaWNoIGJhbGFuY2UgaXMgYmVpbmcgZW5xdWlyZWQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIGFkZCkgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKXsKICAgICAgIHJldHVybiBiYWxhbmNlc1thZGRdOwogICAgfQogICAgCiAgICAKICAgIAogICAvLy9Abm90aWNlIFRyYW5zZmVyIHRva2VucyB0byB0aGUgYmVuZWZpY2lhcnkgYWNjb3VudAogICAvLy9AcGFyYW0gIHRvIFRoZSBiZW5lZmljaWFyeSBhY2NvdW50CiAgIC8vL0BwYXJhbSAgdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZCAKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlIAogICAgICAgICAgICAmJiB2YWx1ZSA+IDAgCiAgICAgICAgICAgICYmICghZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgCQkJCQkJCQkJCS8vIEFsbG93IHRyYW5zZmVyIG9ubHkgaWYgYWNjb3VudCBpcyBub3QgZnJvemVuCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBiYWxhbmNlIG9mIGJlbmVmaWNpYXJ5IGFjY291bnQKCQkJVHJhbnNmZXIobXNnLnNlbmRlcix0byx2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAKCiAgIC8vL0Bub3RpY2UgVHJhbnNmZXIgdG9rZW5zIGJldHdlZW4gYWNjb3VudHMKICAgLy8vQHBhcmFtICBmcm9tIFRoZSBiZW5lZmFjdG9yL3NlbmRlciBhY2NvdW50LgogICAvLy9AcGFyYW0gIHRvIFRoZSBiZW5lZmljaWFyeSBhY2NvdW50CiAgIC8vL0BwYXJhbSAgdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcmVkICAKICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAgIAogICAgICAgICAgICByZXF1aXJlKAogICAgICAgICAgICBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0gPj0gdmFsdWUKICAgICAgICAgICAgJiZiYWxhbmNlc1tmcm9tXSA+PSB2YWx1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIHRoZSBiZW5lZmFjdG9yIGhhcyBzdWZmaWNpZW50IGJhbGFuY2UKICAgICAgICAgICAgJiYgdmFsdWUgPiAwIAogICAgICAgICAgICAmJiAoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHRyYW5zZmVyIG9ubHkgaWYgYWNjb3VudCBpcyBub3QgZnJvemVuCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIAogICAgICAgICAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZHVjdCBmcm9tIHRoZSBiZW5lZmFjdG9yIGFjY291bnQKICAgICAgICAgICAgYmFsYW5jZXNbdG9dID0gIGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGJhbGFuY2Ugb2YgYmVuZWZpY2lhcnkgYWNjb3VudAogICAgICAgICAgICBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgICAgICAgICAgVHJhbnNmZXIoZnJvbSx0byx2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICAKICAgIAoKICAgLy8vQG5vdGljZSBJbmNyZWFzZSB0aGUgbnVtYmVyIG9mIGNvaW5zCiAgIC8vL0BwYXJhbSAgdGFyZ2V0IFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHdoZXJlIHRoZSBjb2lucyB3b3VsZCBiZSBhZGRlZC4KICAgLy8vQHBhcmFtICBtaW50ZWRBbW91bnQgVGhlIGFtb3VudCBvZiBjb2lucyB0byBiZSBhZGRlZAogICAgICAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgYmFsYW5jZXNbdGFyZ2V0XSA9IGJhbGFuY2VzW3RhcmdldF0uYWRkKG1pbnRlZEFtb3VudCk7ICAgICAgLy9BZGQgdGhlIGFtb3VudCBvZiBjb2lucyB0byBiZSBpbmNyZWFzZWQgdG8gdGhlIGJhbGFuY2UKICAgICAgICBjdXJyZW50U3VwcGx5ID0gY3VycmVudFN1cHBseS5hZGQobWludGVkQW1vdW50KTsgICAgICAgICAgICAvL0FkZCB0aGUgYW1vdW50IG9mIGNvaW5zIHRvIGJlIGluY3JlYXNlZCB0byB0aGUgc3VwcGx5CiAgICAgICAgVHJhbnNmZXIoMCwgdGhpcywgbWludGVkQW1vdW50KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7CiAgICB9CgogICAvLy9Abm90aWNlIEZyZWV6ZSB0aGUgYWNjb3VudCBhdCB0aGUgdGFyZ2V0IGFkZHJlc3MKICAgLy8vQHBhcmFtICB0YXJnZXQgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gYmUgZnJvemVuCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGZyZWV6ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9DaGVjayBpZiBhY2NvdW50IGhhcyB0byBiZSBmcmVlemVkCiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRnJlZXplIHRoZSBhY2NvdW50ICAKICAgICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7CiAgICB9CgoKICAgLy8vIEBub3RpY2UgUmVtb3ZlIHRva2VucyBmcm9tIHRoZSBzeXN0ZW0gaXJyZXZlcnNpYmx5CiAgICAvLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IHZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICAgIHJlcXVpcmUgKGJhbGFuY2VzW21zZy5zZW5kZXJdID4gdmFsdWUgJiYgdmFsdWU+MCk7ICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIGJhbGFuY2UKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7ICAgICAgIC8vIERlZHVjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBjdXJyZW50U3VwcGx5ID0gY3VycmVudFN1cHBseS5zdWIodmFsdWUpOyAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50U3VwcGx5CiAgICAgICAgQnVybihtc2cuc2VuZGVyLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBmcm9tLCB1aW50MjU2IHZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tmcm9tXSA+PSB2YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0ZWQgYmFsYW5jZSBpcyBlbm91Z2gKICAgICAgICByZXF1aXJlKHZhbHVlIDw9IGFsbG93YW5jZVtmcm9tXVttc2cuc2VuZGVyXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGJhbGFuY2VzW2Zyb21dID0gYmFsYW5jZXNbZnJvbV0uc3ViKHZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVkdWN0IGZyb20gdGhlIHRhcmdldGVkIGJhbGFuY2UKICAgICAgICBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2FuY2VbZnJvbV1bbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsgICAgIC8vIERlZHVjdCBmcm9tIHRoZSBzZW5kZXIncyBhbGxvd2FuY2UKICAgICAgICBjdXJyZW50U3VwcGx5ID0gY3VycmVudFN1cHBseS5zdWIodmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50U3VwcGx5CiAgICAgICAgQnVybihmcm9tLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKCiAgLyogVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgdHJhbnNmZXJlZCAqLwoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLHVpbnQyNTYgX3ZhbHVlKTsgICAgIAoKICAvKiBUaGlzIG5vdGlmaWVzIGNsaWVudHMgYWJvdXQgdGhlIGFtb3VudCBhcHByb3ZlZCAqLwoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLHVpbnQyNTYgX3ZhbHVlKTsKCiAgLyogVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhY2NvdW50IGZyZWV6ZSAqLwoJZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsKICAgIAogIC8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50ICovCiAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKfQ=='.
	

]
