Class {
	#name : #SRT05da6b1d4ccc5c9e13926c5405f3a4b88892dee7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT05da6b1d4ccc5c9e13926c5405f3a4b88892dee7 >> base64 [
	^ ''.
	

]
