Class {
	#name : #SRTfe52320b68ee964c889bdcc2f076e44f144fad14,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfe52320b68ee964c889bdcc2f076e44f144fad14 >> base64 [
	^ ''.
	

]
