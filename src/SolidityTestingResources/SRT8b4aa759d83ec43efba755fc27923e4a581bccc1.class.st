Class {
	#name : #SRT8b4aa759d83ec43efba755fc27923e4a581bccc1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b4aa759d83ec43efba755fc27923e4a581bccc1 >> base64 [
	^ 'Y29udHJhY3QgQmxvY2tDaGFpbkNoYWxsZW5nZSB7CiAgICAKICBhZGRyZXNzIGFkbWluOwogIGFkZHJlc3MgbGVhZGVyOwogIGJ5dGVzMzIgbGVhZGVySGFzaDsKICBieXRlczMyIGRpZmZpY3VsdHk7CiAgYnl0ZXMzMiBkaWZmaWN1bHR5V29ybGRSZWNvcmQ7CiAgdWludCBmYWxsZW5MZWFkZXJzOwogIHVpbnQgc3RhcnRpbmdUaW1lOwogIHVpbnQgZ2FtZUxlbmd0aDsKICBzdHJpbmcgbGVhZGVyTWVzc2FnZTsKICBzdHJpbmcgZGVmYXVsdExlYWRlck1lc3NhZ2U7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSB3aW5uZXJzOwogIAogIGV2ZW50IEJlZ2luKHN0cmluZyBsb2cpOwogIGV2ZW50IExlYWRlcihzdHJpbmcgbG9nLCBhZGRyZXNzIG5ld0xlYWRlciwgYnl0ZXMzMiBuZXdIYXNoKTsKICBldmVudCBHYW1lT3ZlcihzdHJpbmcgbG9nKTsKICBldmVudCBXaW5uZXIgKHN0cmluZyBsb2csIGFkZHJlc3Mgd2lubmVyKTsKICBldmVudCBOb1dpbm5lciAoc3RyaW5nIGxvZyk7CiAgZXZlbnQgV29ybGRSZWNvcmQgKHN0cmluZyBsb2csIGJ5dGVzMzIgRGlmZmljdWx0eVJlY29yZCwgYWRkcmVzcyBSZWNvcmRIb2xkZXIpOwogIAogIGZ1bmN0aW9uIEJsb2NrQ2hhaW5DaGFsbGVuZ2UoKXsgCiAgICAgIAogICAgLy9BZG1pbiBCYWNrZG9vcgogICAgYWRtaW4gPSBtc2cuc2VuZGVyOwoKICAgIC8vU3RhcnRpbmcgVGltZQogICAgc3RhcnRpbmdUaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgCiAgICAvL0dhbWUgTGVuZ3RoIChUT0RPOiBDaGFuZ2UgdG8gMSB3ZWVrcykKICAgIGdhbWVMZW5ndGggPSAxIHdlZWtzOwoKICAgIC8vSW5pdGlhbCBzZWVkIGZvciB0aGUgZmlyc3QgY2hhbGxlbmdlLiBUaGlzIHNob3VsZCBhbHdheXMgYmUgaW4gcm90YXRpb24gYWZ0ZXJ3YXJkLgogICAgbGVhZGVySGFzaCA9IHNoYTMoIjA5RjkxMTAyOUQ3NEUzNUJEODQxNTZDNTYzNTY4OEMwIik7CgogICAgLy9GaXJzdCBsZWFkZXIgaXMgdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0CiAgICBsZWFkZXIgPSBtc2cuc2VuZGVyOwoKICAgIC8vVGhlIHBsYWNlaG9sZGVyIGxlYWRlciBtZXNzYWdlCiAgICBkZWZhdWx0TGVhZGVyTWVzc2FnZSA9ICJJZiB5b3UncmUgdGhpcyB3ZWVrcyBsZWFkZXIsIHlvdSBvd24gdGhpcyBmaWVsZC4gV3JpdGUgYSBtZXNzYWdlIGhlcmUuIjsKICAgIGxlYWRlck1lc3NhZ2UgPSBkZWZhdWx0TGVhZGVyTWVzc2FnZTsKICAgIAogICAgLy9UaGlzIGRpZmZpY3VsdHkgc3RhcnRzIGFzIGVhc3kgYXMgcG9zc2libGUuIEFueSBYT1Igd2lsbCBiZSBsZXNzLCB0byBzdGFydC4KICAgIGRpZmZpY3VsdHkgPSBsZWFkZXJIYXNoOwogICAgCiAgICAvL1NlZWQgdGhlIHdvcmxkIHJlY29yZAogICAgZGlmZmljdWx0eVdvcmxkUmVjb3JkID0gbGVhZGVySGFzaDsKICAgIAogICAgLy9Db3VudGVyIGZvciBzdWNjZXNzZnVsIGNvbGxpc2lvbnMgdGhpcyB3ZWVrLgogICAgZmFsbGVuTGVhZGVycyA9IDA7CgogICAgQmVnaW4oIkNvbGxpZGUgdGhlIG1vc3QgYml0cyBvZiB0aGUgbGVhZGVyJ3MgaGFzaCB0byByZXBsYWNlIHRoZSBsZWFkZXIuIExlYWRlciB3aWxsIHdpbiBhbnkgYm91bnR5IGF0IHRoZSBlbmQgb2YgdGhlIHdlZWsuIik7CgogIH0KICAKICBmdW5jdGlvbiByZXNldCgpIHByaXZhdGV7CiAgICAgIAogICAgICAvL01ha2UgdGhlIGhhc2ggdW5wcmVkaWN0YWJsZS4KICAgICAgbGVhZGVySGFzaCA9IHNoYTMoYmxvY2sudGltZXN0YW1wKTsKICAgICAgCiAgICAgIC8vUmVzZXQgdGhlIGxlYWRlciBtZXNzYWdlCiAgICAgIGxlYWRlck1lc3NhZ2UgPSBkZWZhdWx0TGVhZGVyTWVzc2FnZTsKICAgICAgZGlmZmljdWx0eSA9IGxlYWRlckhhc2g7CiAgICAgIGxlYWRlciA9IGFkbWluOwogICAgICBmYWxsZW5MZWFkZXJzID0gMDsKICB9CiAgCiAgZnVuY3Rpb24gY2hlY2tEYXRlKCkgcHJpdmF0ZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgCiAgICAgIC8vQXJlIHdlIG9uZSB3ZWVrIGJleW9uZCB0aGUgbGFzdCBnYW1lPyBUT0RPIGNoYW5nZSB0aW1lIGZvciBtYWlubmV0CiAgICAgIGlmIChibG9jay50aW1lc3RhbXAgPiAoc3RhcnRpbmdUaW1lICsgZ2FtZUxlbmd0aCkpIHsKICAgICAgICAgIAogICAgICAgICAgLy9JZiBzbywgbG9nIHdpbm5lci4gSWYgdGhlIGFkbWluICJ3aW5zIiwgaXQncyBiZWNhdXNlIG5vIG9uZSBlbHNlIHdvbi4KICAgICAgICAgIGlmKGxlYWRlciAhPSBhZG1pbil7CiAgICAgICAgICAgIFdpbm5lcigiVmljdG9yeSEgR2FtZSB3aWxsIGJlIHJlc2V0IHRvIGVuZCBpbiAxIHdlZWsgKGluIGJsb2NrIHRpbWUpLiIsIGxlYWRlcik7CiAgICAgICAgICAgIGxlYWRlci5zZW5kKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgICB9ZWxzZSBOb1dpbm5lcigiTm8gd2lubmVyISBHYW1lIHdpbGwgYmUgcmVzZXQgdG8gZW5kIGluIDEgd2VlayAoaW4gYmxvY2sgdGltZSkuIik7CgogICAgICAgICAgc3RhcnRpbmdUaW1lID0gYmxvY2sudGltZXN0YW1wOwoKICAgICAgICAgIC8vUmVzZXQKICAgICAgICAgIHJlc2V0KCk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBvdmVydGhyb3coc3RyaW5nIGNoYWxsZW5nZURhdGEpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgCiAgICAgICAgLy9DcmVhdGUgaGFzaCBmcm9tIHBsYXllciBkYXRhIHNlbnQgdG8gY29udHJhY3QKICAgICAgICB2YXIgY2hhbGxlbmdlSGFzaCA9IHNoYTMoY2hhbGxlbmdlRGF0YSk7CgogICAgICAgIC8vQ2hlY2sgT25lOiBTdWJtaXNzaW9uIHRvbyBsYXRlLCByZXNldCBnYW1lIHcvIG5ldyBoYXNoCiAgICAgICAgaWYoY2hlY2tEYXRlKCkpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICAvL0NoZWNrIFR3bzogQ2hlYXRpbmcgLSBvZiBjb3Vyc2UgbGFzdCBoYXNoIHdpbGwgY29sbGlkZSEKICAgICAgICBpZihjaGFsbGVuZ2VIYXNoID09IGxlYWRlckhhc2gpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy9DaGVjayBUaHJlZTogQ29yZSBnYW1pbmcgbG9naWMgZmF2b3JpbmcgY29sbGlzaW9ucyBvZiBNU0IKICAgICAgICBpZigoY2hhbGxlbmdlSGFzaCBeIGxlYWRlckhhc2gpID4gZGlmZmljdWx0eSkKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy9JZiBwbGF5ZXIgc3Vydml2ZWQgdGhlIGNoZWNrcywgdGhleSd2ZSBvdmVyY29tZSBkaWZmaWN1bHR5IGxldmVsIGFuZCBiZWF0IHRoZSBsZWFkZXIuCiAgICAgICAgLy9VcGRhdGUgdGhlIGRpZmZpY3VsdHkuIFRoaXMgbWFrZXMgdGhlIGdhbWUgcHJvZ3Jlc3NpdmVseSBoYXJkZXIgdGhyb3VnaCB0aGUgd2Vlay4KICAgICAgICBkaWZmaWN1bHR5ID0gKGNoYWxsZW5nZUhhc2ggXiBsZWFkZXJIYXNoKTsKICAgICAgICAKICAgICAgICAvL0RpZCB0aGV5IHNldCBhIHJlY29yZD8KICAgICAgICBjaGFsbGVuZ2VXb3JsZFJlY29yZChkaWZmaWN1bHR5KTsKICAgICAgICAKICAgICAgICAvL1dlIGhhdmUgYSBuZXcgTGVhZGVyCiAgICAgICAgbGVhZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAgICAgICAvL1RoZSB3aW5uaW5nIGhhc2ggaXMgb3VyIG5ldyBoYXNoLiBUaGlzIHVuZG9lcyBhbnkgd29yayBiZWluZyBkb25lIGJ5IGNvbXBldGl0aW9uIQogICAgICAgIGxlYWRlckhhc2ggPSBjaGFsbGVuZ2VIYXNoOwogICAgICAgIAogICAgICAgIC8vQW5ub3VuY2Ugb3VyIG5ldyB2aWN0b3IuIENvbmdyYXR1bGF0aW9ucyEgICAgCiAgICAgICAgTGVhZGVyKCJOZXcgbGVhZGVyISBUaGlzIGlzIHRoZWlyIGFkZHJlc3MsIGFuZCB0aGUgbmV3IGhhc2ggdG8gY29sbGlkZS4iLCBsZWFkZXIsIGxlYWRlckhhc2gpOwogICAgICAgIAogICAgICAgIC8vQWRkIHRvIGhpc3RvcmljYWwgV2lubmVycwogICAgICAgIHdpbm5lcnNbbXNnLnNlbmRlcl0rKzsKICAgICAgICAKICAgICAgICAvL0tlZXAgdHJhY2sgb2YgaG93IG1hbnkgbmV3IGxlYWRlcnMgd2UndmUgaGFkIHRoaXMgd2Vlay4KICAgICAgICBmYWxsZW5MZWFkZXJzKys7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgfQogIAogIGZ1bmN0aW9uIGNoYWxsZW5nZVdvcmxkUmVjb3JkIChieXRlczMyIGRpZmZpY3VsdHlDaGFsbGVuZ2UpIHByaXZhdGUgewogICAgICBpZihkaWZmaWN1bHR5Q2hhbGxlbmdlIDwgZGlmZmljdWx0eVdvcmxkUmVjb3JkKSB7CiAgICAgICAgZGlmZmljdWx0eVdvcmxkUmVjb3JkID0gZGlmZmljdWx0eUNoYWxsZW5nZTsKICAgICAgICBXb3JsZFJlY29yZCgiQSByZWNvcmQgc2V0dGluZyBjb2xsaXNpb24gb2NjY3VyZWQhIiwgZGlmZmljdWx0eVdvcmxkUmVjb3JkLCBtc2cuc2VuZGVyKTsKICAgICAgfQogIH0KICAKICBmdW5jdGlvbiBjaGFuZ2VMZWFkZXJNZXNzYWdlKHN0cmluZyBuZXdNZXNzYWdlKXsKICAgICAgICAvL1RoZSBsZWFkZXIgZ2V0cyB0byB0YWxrIGFsbCBraW5kcyBvZiBzaGl0LiBJZiBhYnVzZSwgbWlnaHQgcmVtb3ZlLgogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gbGVhZGVyKQogICAgICAgICAgICBsZWFkZXJNZXNzYWdlID0gbmV3TWVzc2FnZTsKICB9CiAgCiAgLy9UaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBkZXNpZ25lZCBmb3IgbWlzdCBVSQogIGZ1bmN0aW9uIGN1cnJlbnRMZWFkZXIoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIEN1cnJlbnRMZWFkZXJBZGRyZXNzKXsKICAgICAgcmV0dXJuIGxlYWRlcjsKICB9CiAgZnVuY3Rpb24gRGlmZmljdWx0eSgpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgWG9yTXVzdEJlTGVzc1RoYW4pewogICAgICByZXR1cm4gZGlmZmljdWx0eTsKICB9CiAgZnVuY3Rpb24gVGFyZ2V0SGFzaCgpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgbGVhZGluZ0hhc2gpewogICAgICByZXR1cm4gbGVhZGVySGFzaDsKICB9CiAgZnVuY3Rpb24gTGVhZGVyTWVzc2FnZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBNZXNzYWdlT2ZUaGVEYXkpewogICAgICByZXR1cm4gbGVhZGVyTWVzc2FnZTsKICB9CiAgZnVuY3Rpb24gRmFsbGVuTGVhZGVycygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgVmljdG9ycyl7CiAgICAgIHJldHVybiBmYWxsZW5MZWFkZXJzOwogIH0KICBmdW5jdGlvbiBHYW1lRW5kcygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgRW5kaW5nVGltZSl7CiAgICAgIHJldHVybiBzdGFydGluZ1RpbWUgKyBnYW1lTGVuZ3RoOwogIH0KICBmdW5jdGlvbiBnZXRXaW5zKGFkZHJlc3MgY2hlY2spIGNvbnN0YW50IHJldHVybnMgKHVpbnQgd2lucyl7CiAgICAgIHJldHVybiB3aW5uZXJzW2NoZWNrXTsKICB9CgogIGZ1bmN0aW9uIGtpbGwoKXsKICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYWRtaW4pewogICAgICAgIEdhbWVPdmVyKCJUaGUgY2hhbGxlbmdlIGhhcyBlbmRlZC4iKTsKICAgICAgICBzZWxmZGVzdHJ1Y3QoYWRtaW4pOwogICAgICB9CiAgfQp9'.
	

]
