Class {
	#name : #SRT94c654fef85b8b0a982909a6ca45b66bb2384236,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT94c654fef85b8b0a982909a6ca45b66bb2384236 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgVXRpbGl0aWVzICYgQ29tbW9uIE1vZGlmaWVycwoqLwpjb250cmFjdCBVdGlscyB7CiAgICAvKioKICAgICAgICBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFV0aWxzKCkgewogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgYW4gYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICBtb2RpZmllciBncmVhdGVyVGhhblplcm8odWludDI1NiBfYW1vdW50KSB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyB2YWxpZGF0ZXMgYW4gYWRkcmVzcyAtIGN1cnJlbnRseSBvbmx5IGNoZWNrcyB0aGF0IGl0IGlzbid0IG51bGwKICAgIG1vZGlmaWVyIHZhbGlkQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSAweDApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmVyaWZpZXMgdGhhdCB0aGUgYWRkcmVzcyBpcyBkaWZmZXJlbnQgdGhhbiB0aGlzIGNvbnRyYWN0IGFkZHJlc3MKICAgIG1vZGlmaWVyIG5vdFRoaXMoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBPdmVyZmxvdyBwcm90ZWN0ZWQgbWF0aCBmdW5jdGlvbnMKCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHN1bSBvZiBfeCBhbmQgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICB2YWx1ZSAxCiAgICAgICAgQHBhcmFtIF95ICAgdmFsdWUgMgoKICAgICAgICBAcmV0dXJuIHN1bQogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICsgX3k7CiAgICAgICAgYXNzZXJ0KHogPj0gX3gpOwogICAgICAgIHJldHVybiB6OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiBfeCBtaW51cyBfeSwgYXNzZXJ0cyBpZiB0aGUgc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlIG51bWJlcgoKICAgICAgICBAcGFyYW0gX3ggICBtaW51ZW5kCiAgICAgICAgQHBhcmFtIF95ICAgc3VidHJhaGVuZAoKICAgICAgICBAcmV0dXJuIGRpZmZlcmVuY2UKICAgICovCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoX3ggPj0gX3kpOwogICAgICAgIHJldHVybiBfeCAtIF95OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgcHJvZHVjdCBvZiBtdWx0aXBseWluZyBfeCBieSBfeSwgYXNzZXJ0cyBpZiB0aGUgY2FsY3VsYXRpb24gb3ZlcmZsb3dzCgogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxCiAgICAgICAgQHBhcmFtIF95ICAgZmFjdG9yIDIKCiAgICAgICAgQHJldHVybiBwcm9kdWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB6ID0gX3ggKiBfeTsKICAgICAgICBhc3NlcnQoX3ggPT0gMCB8fCB6IC8gX3ggPT0gX3kpOwogICAgICAgIHJldHVybiB6OwogICAgfQp9CgovKgogICAgRVJDMjAgU3RhbmRhcmQgVG9rZW4gaW50ZXJmYWNlCiovCmNvbnRyYWN0IElFUkMyMFRva2VuIHsKICAgIC8vIHRoZXNlIGZ1bmN0aW9ucyBhcmVuJ3QgYWJzdHJhY3Qgc2luY2UgdGhlIGNvbXBpbGVyIGVtaXRzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGdldHRlciBmdW5jdGlvbnMgYXMgZXh0ZXJuYWwKICAgIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7fQogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykge30KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4KSB7fQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgX293bmVyOyB9CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IF9vd25lcjsgX3NwZW5kZXI7IH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKLyoKICAgIE93bmVkIGNvbnRyYWN0IGludGVyZmFjZQoqLwpjb250cmFjdCBJT3duZWQgewogICAgLy8gdGhpcyBmdW5jdGlvbiBpc24ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbAogICAgZnVuY3Rpb24gb3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykge30KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljOwogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljOwp9CgovKgogICAgUHJvdmlkZXMgc3VwcG9ydCBhbmQgdXRpbGl0aWVzIGZvciBjb250cmFjdCBvd25lcnNoaXAKKi8KY29udHJhY3QgT3duZWQgaXMgSU93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7CgogICAgZXZlbnQgT3duZXJVcGRhdGUoYWRkcmVzcyBfcHJldk93bmVyLCBhZGRyZXNzIF9uZXdPd25lcik7CgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIE93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLyBhbGxvd3MgZXhlY3V0aW9uIGJ5IHRoZSBvd25lciBvbmx5CiAgICBtb2RpZmllciBvd25lck9ubHkgewogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgYWxsb3dzIHRyYW5zZmVycmluZyB0aGUgY29udHJhY3Qgb3duZXJzaGlwCiAgICAgICAgdGhlIG5ldyBvd25lciBzdGlsbCBuZWVkcyB0byBhY2NlcHQgdGhlIHRyYW5zZmVyCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcgoKICAgICAgICBAcGFyYW0gX25ld093bmVyICAgIG5ldyBjb250cmFjdCBvd25lcgogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICByZXF1aXJlKF9uZXdPd25lciAhPSBvd25lcik7CiAgICAgICAgbmV3T3duZXIgPSBfbmV3T3duZXI7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB1c2VkIGJ5IGEgbmV3IG93bmVyIHRvIGFjY2VwdCBhbiBvd25lcnNoaXAgdHJhbnNmZXIKICAgICovCiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBuZXdPd25lcik7CiAgICAgICAgT3duZXJVcGRhdGUob3duZXIsIG5ld093bmVyKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIG5ld093bmVyID0gMHgwOwogICAgfQp9CgovKgogICAgUHJvdmlkZXMgc3VwcG9ydCBhbmQgdXRpbGl0aWVzIGZvciBjb250cmFjdCBtYW5hZ2VtZW50CiovCmNvbnRyYWN0IE1hbmFnZWQgewogICAgYWRkcmVzcyBwdWJsaWMgbWFuYWdlcjsKICAgIGFkZHJlc3MgcHVibGljIG5ld01hbmFnZXI7CgogICAgZXZlbnQgTWFuYWdlclVwZGF0ZShhZGRyZXNzIF9wcmV2TWFuYWdlciwgYWRkcmVzcyBfbmV3TWFuYWdlcik7CgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIE1hbmFnZWQoKSB7CiAgICAgICAgbWFuYWdlciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8gYWxsb3dzIGV4ZWN1dGlvbiBieSB0aGUgbWFuYWdlciBvbmx5CiAgICBtb2RpZmllciBtYW5hZ2VyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gbWFuYWdlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGFsbG93cyB0cmFuc2ZlcnJpbmcgdGhlIGNvbnRyYWN0IG1hbmFnZW1lbnQKICAgICAgICB0aGUgbmV3IG1hbmFnZXIgc3RpbGwgbmVlZHMgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3QgbWFuYWdlcgoKICAgICAgICBAcGFyYW0gX25ld01hbmFnZXIgICAgbmV3IGNvbnRyYWN0IG1hbmFnZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck1hbmFnZW1lbnQoYWRkcmVzcyBfbmV3TWFuYWdlcikgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgICAgICByZXF1aXJlKF9uZXdNYW5hZ2VyICE9IG1hbmFnZXIpOwogICAgICAgIG5ld01hbmFnZXIgPSBfbmV3TWFuYWdlcjsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHVzZWQgYnkgYSBuZXcgbWFuYWdlciB0byBhY2NlcHQgYSBtYW5hZ2VtZW50IHRyYW5zZmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0TWFuYWdlbWVudCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld01hbmFnZXIpOwogICAgICAgIE1hbmFnZXJVcGRhdGUobWFuYWdlciwgbmV3TWFuYWdlcik7CiAgICAgICAgbWFuYWdlciA9IG5ld01hbmFnZXI7CiAgICAgICAgbmV3TWFuYWdlciA9IDB4MDsKICAgIH0KfQoKLyoKICAgIFRva2VuIEhvbGRlciBpbnRlcmZhY2UKKi8KY29udHJhY3QgSVRva2VuSG9sZGVyIGlzIElPd25lZCB7CiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsKfQoKLyoKICAgIEVJUDIyOCBUb2tlbiBDb252ZXJ0ZXIgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElUb2tlbkNvbnZlcnRlciB7CiAgICBmdW5jdGlvbiBjb252ZXJ0aWJsZVRva2VuQ291bnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDE2KTsKICAgIGZ1bmN0aW9uIGNvbnZlcnRpYmxlVG9rZW4odWludDE2IF90b2tlbkluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBnZXRSZXR1cm4oSUVSQzIwVG9rZW4gX2Zyb21Ub2tlbiwgSUVSQzIwVG9rZW4gX3RvVG9rZW4sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gY29udmVydChJRVJDMjBUb2tlbiBfZnJvbVRva2VuLCBJRVJDMjBUb2tlbiBfdG9Ub2tlbiwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4pIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KTsKICAgIC8vIGRlcHJlY2F0ZWQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkKICAgIGZ1bmN0aW9uIGNoYW5nZShJRVJDMjBUb2tlbiBfZnJvbVRva2VuLCBJRVJDMjBUb2tlbiBfdG9Ub2tlbiwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4pIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KTsKfQoKLyoKICAgIFdlIGNvbnNpZGVyIGV2ZXJ5IGNvbnRyYWN0IHRvIGJlIGEgJ3Rva2VuIGhvbGRlcicgc2luY2UgaXQncyBjdXJyZW50bHkgbm90IHBvc3NpYmxlCiAgICBmb3IgYSBjb250cmFjdCB0byBkZW55IHJlY2VpdmluZyB0b2tlbnMuCgogICAgVGhlIFRva2VuSG9sZGVyJ3MgY29udHJhY3Qgc29sZSBwdXJwb3NlIGlzIHRvIHByb3ZpZGUgYSBzYWZldHkgbWVjaGFuaXNtIHRoYXQgYWxsb3dzCiAgICB0aGUgb3duZXIgdG8gc2VuZCB0b2tlbnMgdGhhdCB3ZXJlIHNlbnQgdG8gdGhlIGNvbnRyYWN0IGJ5IG1pc3Rha2UgYmFjayB0byB0aGVpciBzZW5kZXIuCiovCmNvbnRyYWN0IFRva2VuSG9sZGVyIGlzIElUb2tlbkhvbGRlciwgT3duZWQsIFV0aWxzIHsKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBUb2tlbkhvbGRlcigpIHsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHdpdGhkcmF3cyB0b2tlbnMgaGVsZCBieSB0aGUgY29udHJhY3QgYW5kIHNlbmRzIHRoZW0gdG8gYW4gYWNjb3VudAogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIKCiAgICAgICAgQHBhcmFtIF90b2tlbiAgIEVSQzIwIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3RvICAgICAgYWNjb3VudCB0byByZWNlaXZlIHRoZSBuZXcgYW1vdW50CiAgICAgICAgQHBhcmFtIF9hbW91bnQgIGFtb3VudCB0byB3aXRoZHJhdwogICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICB2YWxpZEFkZHJlc3MoX3Rva2VuKQogICAgICAgIHZhbGlkQWRkcmVzcyhfdG8pCiAgICAgICAgbm90VGhpcyhfdG8pCiAgICB7CiAgICAgICAgYXNzZXJ0KF90b2tlbi50cmFuc2ZlcihfdG8sIF9hbW91bnQpKTsKICAgIH0KfQoKLyoKICAgIFNtYXJ0IFRva2VuIGludGVyZmFjZQoqLwpjb250cmFjdCBJU21hcnRUb2tlbiBpcyBJT3duZWQsIElFUkMyMFRva2VuIHsKICAgIGZ1bmN0aW9uIGRpc2FibGVUcmFuc2ZlcnMoYm9vbCBfZGlzYWJsZSkgcHVibGljOwogICAgZnVuY3Rpb24gaXNzdWUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOwogICAgZnVuY3Rpb24gZGVzdHJveShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsKfQoKLyoKICAgIEJhbmNvciBGb3JtdWxhIGludGVyZmFjZQoqLwpjb250cmFjdCBJQmFuY29yRm9ybXVsYSB7CiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQdXJjaGFzZVJldHVybih1aW50MjU2IF9zdXBwbHksIHVpbnQyNTYgX2Nvbm5lY3RvckJhbGFuY2UsIHVpbnQzMiBfY29ubmVjdG9yV2VpZ2h0LCB1aW50MjU2IF9kZXBvc2l0QW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBjYWxjdWxhdGVTYWxlUmV0dXJuKHVpbnQyNTYgX3N1cHBseSwgdWludDI1NiBfY29ubmVjdG9yQmFsYW5jZSwgdWludDMyIF9jb25uZWN0b3JXZWlnaHQsIHVpbnQyNTYgX3NlbGxBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKLyoKICAgIEJhbmNvciBHYXMgUHJpY2UgTGltaXQgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElCYW5jb3JHYXNQcmljZUxpbWl0IHsKICAgIGZ1bmN0aW9uIGdhc1ByaWNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHt9Cn0KCi8qCiAgICBCYW5jb3IgUXVpY2sgQ29udmVydGVyIGludGVyZmFjZQoqLwpjb250cmFjdCBJQmFuY29yUXVpY2tDb252ZXJ0ZXIgewogICAgZnVuY3Rpb24gY29udmVydChJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikgcHVibGljIHBheWFibGUgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBjb252ZXJ0Rm9yKElFUkMyMFRva2VuW10gX3BhdGgsIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfbWluUmV0dXJuLCBhZGRyZXNzIF9mb3IpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQyNTYpOwp9CgovKgogICAgQmFuY29yIENvbnZlcnRlciBFeHRlbnNpb25zIGludGVyZmFjZQoqLwpjb250cmFjdCBJQmFuY29yQ29udmVydGVyRXh0ZW5zaW9ucyB7CiAgICBmdW5jdGlvbiBmb3JtdWxhKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKElCYW5jb3JGb3JtdWxhKSB7fQogICAgZnVuY3Rpb24gZ2FzUHJpY2VMaW1pdCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChJQmFuY29yR2FzUHJpY2VMaW1pdCkge30KICAgIGZ1bmN0aW9uIHF1aWNrQ29udmVydGVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKElCYW5jb3JRdWlja0NvbnZlcnRlcikge30KfQoKLyoKICAgIFRoZSBzbWFydCB0b2tlbiBjb250cm9sbGVyIGlzIGFuIHVwZ3JhZGFibGUgcGFydCBvZiB0aGUgc21hcnQgdG9rZW4gdGhhdCBhbGxvd3MKICAgIG1vcmUgZnVuY3Rpb25hbGl0eSBhcyB3ZWxsIGFzIGZpeGVzIGZvciBidWdzL2V4cGxvaXRzLgogICAgT25jZSBpdCBhY2NlcHRzIG93bmVyc2hpcCBvZiB0aGUgdG9rZW4sIGl0IGJlY29tZXMgdGhlIHRva2VuJ3Mgc29sZSBjb250cm9sbGVyCiAgICB0aGF0IGNhbiBleGVjdXRlIGFueSBvZiBpdHMgZnVuY3Rpb25zLgoKICAgIFRvIHVwZ3JhZGUgdGhlIGNvbnRyb2xsZXIsIG93bmVyc2hpcCBtdXN0IGJlIHRyYW5zZmVycmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIsIGFsb25nIHdpdGgKICAgIGFueSByZWxldmFudCBkYXRhLgoKICAgIFRoZSBzbWFydCB0b2tlbiBtdXN0IGJlIHNldCBvbiBjb25zdHJ1Y3Rpb24gYW5kIGNhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyd2FyZHMuCiAgICBXcmFwcGVycyBhcmUgcHJvdmlkZWQgKGFzIG9wcG9zZWQgdG8gYSBzaW5nbGUgJ2V4ZWN1dGUnIGZ1bmN0aW9uKSBmb3IgZWFjaCBvZiB0aGUgdG9rZW4ncyBmdW5jdGlvbnMsIGZvciBlYXNpZXIgYWNjZXNzLgoKICAgIE5vdGUgdGhhdCB0aGUgY29udHJvbGxlciBjYW4gdHJhbnNmZXIgdG9rZW4gb3duZXJzaGlwIHRvIGEgbmV3IGNvbnRyb2xsZXIgdGhhdAogICAgZG9lc24ndCBhbGxvdyBleGVjdXRpbmcgYW55IGZ1bmN0aW9uIG9uIHRoZSB0b2tlbiwgZm9yIGEgdHJ1c3RsZXNzIHNvbHV0aW9uLgogICAgRG9pbmcgdGhhdCB3aWxsIGFsc28gcmVtb3ZlIHRoZSBvd25lcidzIGFiaWxpdHkgdG8gdXBncmFkZSB0aGUgY29udHJvbGxlci4KKi8KY29udHJhY3QgU21hcnRUb2tlbkNvbnRyb2xsZXIgaXMgVG9rZW5Ib2xkZXIgewogICAgSVNtYXJ0VG9rZW4gcHVibGljIHRva2VuOyAgIC8vIHNtYXJ0IHRva2VuCgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFNtYXJ0VG9rZW5Db250cm9sbGVyKElTbWFydFRva2VuIF90b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3MoX3Rva2VuKQogICAgewogICAgICAgIHRva2VuID0gX3Rva2VuOwogICAgfQoKICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY29udHJvbGxlciBpcyB0aGUgdG9rZW4ncyBvd25lcgogICAgbW9kaWZpZXIgYWN0aXZlKCkgewogICAgICAgIGFzc2VydCh0b2tlbi5vd25lcigpID09IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gZW5zdXJlcyB0aGF0IHRoZSBjb250cm9sbGVyIGlzIG5vdCB0aGUgdG9rZW4ncyBvd25lcgogICAgbW9kaWZpZXIgaW5hY3RpdmUoKSB7CiAgICAgICAgYXNzZXJ0KHRva2VuLm93bmVyKCkgIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGFsbG93cyB0cmFuc2ZlcnJpbmcgdGhlIHRva2VuIG93bmVyc2hpcAogICAgICAgIHRoZSBuZXcgb3duZXIgc3RpbGwgbmVlZCB0byBhY2NlcHQgdGhlIHRyYW5zZmVyCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcgoKICAgICAgICBAcGFyYW0gX25ld093bmVyICAgIG5ldyB0b2tlbiBvd25lcgogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW5Pd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKF9uZXdPd25lcik7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB1c2VkIGJ5IGEgbmV3IG93bmVyIHRvIGFjY2VwdCBhIHRva2VuIG93bmVyc2hpcCB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKICAgICovCiAgICBmdW5jdGlvbiBhY2NlcHRUb2tlbk93bmVyc2hpcCgpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLmFjY2VwdE93bmVyc2hpcCgpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZGlzYWJsZXMvZW5hYmxlcyB0b2tlbiB0cmFuc2ZlcnMKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCgogICAgICAgIEBwYXJhbSBfZGlzYWJsZSAgICB0cnVlIHRvIGRpc2FibGUgdHJhbnNmZXJzLCBmYWxzZSB0byBlbmFibGUgdGhlbQogICAgKi8KICAgIGZ1bmN0aW9uIGRpc2FibGVUb2tlblRyYW5zZmVycyhib29sIF9kaXNhYmxlKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi5kaXNhYmxlVHJhbnNmZXJzKF9kaXNhYmxlKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHdpdGhkcmF3cyB0b2tlbnMgaGVsZCBieSB0aGUgdG9rZW4gYW5kIHNlbmRzIHRoZW0gdG8gYW4gYWNjb3VudAogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIKCiAgICAgICAgQHBhcmFtIF90b2tlbiAgIEVSQzIwIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3RvICAgICAgYWNjb3VudCB0byByZWNlaXZlIHRoZSBuZXcgYW1vdW50CiAgICAgICAgQHBhcmFtIF9hbW91bnQgIGFtb3VudCB0byB3aXRoZHJhdwogICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RnJvbVRva2VuKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgSVRva2VuSG9sZGVyKHRva2VuKS53aXRoZHJhd1Rva2VucyhfdG9rZW4sIF90bywgX2Ftb3VudCk7CiAgICB9Cn0KCi8qCiAgICBCYW5jb3IgQ29udmVydGVyIHYwLjYKCiAgICBUaGUgQmFuY29yIHZlcnNpb24gb2YgdGhlIHRva2VuIGNvbnZlcnRlciwgYWxsb3dzIGNvbnZlcnNpb24gYmV0d2VlbiBhIHNtYXJ0IHRva2VuIGFuZCBvdGhlciBFUkMyMCB0b2tlbnMgYW5kIGJldHdlZW4gZGlmZmVyZW50IEVSQzIwIHRva2VucyBhbmQgdGhlbXNlbHZlcy4KCiAgICBFUkMyMCBjb25uZWN0b3IgYmFsYW5jZSBjYW4gYmUgdmlydHVhbCwgbWVhbmluZyB0aGF0IHRoZSBjYWxjdWxhdGlvbnMgYXJlIGJhc2VkIG9uIHRoZSB2aXJ0dWFsIGJhbGFuY2UgaW5zdGVhZCBvZiByZWx5aW5nIG9uCiAgICB0aGUgYWN0dWFsIGNvbm5lY3RvciBiYWxhbmNlLiBUaGlzIGlzIGEgc2VjdXJpdHkgbWVjaGFuaXNtIHRoYXQgcHJldmVudHMgdGhlIG5lZWQgdG8ga2VlcCBhIHZlcnkgbGFyZ2UgKGFuZCB2YWx1YWJsZSkgYmFsYW5jZSBpbiBhIHNpbmdsZSBjb250cmFjdC4KCiAgICBUaGUgY29udmVydGVyIGlzIHVwZ3JhZGFibGUgKGp1c3QgbGlrZSBhbnkgU21hcnRUb2tlbkNvbnRyb2xsZXIpLgoKICAgIFdBUk5JTkc6IEl0IGlzIE5PVCBSRUNPTU1FTkRFRCB0byB1c2UgdGhlIGNvbnZlcnRlciB3aXRoIFNtYXJ0IFRva2VucyB0aGF0IGhhdmUgbGVzcyB0aGFuIDggZGVjaW1hbCBkaWdpdHMKICAgICAgICAgICAgIG9yIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzIGJlY2F1c2Ugb2YgcHJlY2lzaW9uIGxvc3MKCgogICAgT3BlbiBpc3N1ZXM6CiAgICAtIEZyb250LXJ1bm5pbmcgYXR0YWNrcyBhcmUgY3VycmVudGx5IG1pdGlnYXRlZCBieSB0aGUgZm9sbG93aW5nIG1lY2hhbmlzbXM6CiAgICAgICAgLSBtaW5pbXVtIHJldHVybiBhcmd1bWVudCBmb3IgZWFjaCBjb252ZXJzaW9uIHByb3ZpZGVzIGEgd2F5IHRvIGRlZmluZSBhIG1pbmltdW0vbWF4aW11bSBwcmljZSBmb3IgdGhlIHRyYW5zYWN0aW9uCiAgICAgICAgLSBnYXMgcHJpY2UgbGltaXQgcHJldmVudHMgdXNlcnMgZnJvbSBoYXZpbmcgY29udHJvbCBvdmVyIHRoZSBvcmRlciBvZiBleGVjdXRpb24KICAgICAgT3RoZXIgcG90ZW50aWFsIHNvbHV0aW9ucyBtaWdodCBpbmNsdWRlIGEgY29tbWl0L3JldmVhbCBiYXNlZCBzY2hlbWVzCiAgICAtIFBvc3NpYmx5IGFkZCBnZXR0ZXJzIGZvciB0aGUgY29ubmVjdG9yIGZpZWxkcyBzbyB0aGF0IHRoZSBjbGllbnQgd29uJ3QgbmVlZCB0byByZWx5IG9uIHRoZSBvcmRlciBpbiB0aGUgc3RydWN0CiovCmNvbnRyYWN0IEJhbmNvckNvbnZlcnRlciBpcyBJVG9rZW5Db252ZXJ0ZXIsIFNtYXJ0VG9rZW5Db250cm9sbGVyLCBNYW5hZ2VkIHsKICAgIHVpbnQzMiBwcml2YXRlIGNvbnN0YW50IE1BWF9XRUlHSFQgPSAxMDAwMDAwOwogICAgdWludDMyIHByaXZhdGUgY29uc3RhbnQgTUFYX0NPTlZFUlNJT05fRkVFID0gMTAwMDAwMDsKCiAgICBzdHJ1Y3QgQ29ubmVjdG9yIHsKICAgICAgICB1aW50MjU2IHZpcnR1YWxCYWxhbmNlOyAgICAgICAgIC8vIGNvbm5lY3RvciB2aXJ0dWFsIGJhbGFuY2UKICAgICAgICB1aW50MzIgd2VpZ2h0OyAgICAgICAgICAgICAgICAgIC8vIGNvbm5lY3RvciB3ZWlnaHQsIHJlcHJlc2VudGVkIGluIHBwbSwgMS0xMDAwMDAwCiAgICAgICAgYm9vbCBpc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZDsgICAvLyB0cnVlIGlmIHZpcnR1YWwgYmFsYW5jZSBpcyBlbmFibGVkLCBmYWxzZSBpZiBub3QKICAgICAgICBib29sIGlzUHVyY2hhc2VFbmFibGVkOyAgICAgICAgIC8vIGlzIHB1cmNoYXNlIG9mIHRoZSBzbWFydCB0b2tlbiBlbmFibGVkIHdpdGggdGhlIGNvbm5lY3RvciwgY2FuIGJlIHNldCBieSB0aGUgb3duZXIKICAgICAgICBib29sIGlzU2V0OyAgICAgICAgICAgICAgICAgICAgIC8vIHVzZWQgdG8gdGVsbCBpZiB0aGUgbWFwcGluZyBlbGVtZW50IGlzIGRlZmluZWQKICAgIH0KCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnMC42JzsKICAgIHN0cmluZyBwdWJsaWMgY29udmVydGVyVHlwZSA9ICdiYW5jb3InOwoKICAgIElCYW5jb3JDb252ZXJ0ZXJFeHRlbnNpb25zIHB1YmxpYyBleHRlbnNpb25zOyAgICAgICAvLyBiYW5jb3IgY29udmVydGVyIGV4dGVuc2lvbnMgY29udHJhY3QKICAgIElFUkMyMFRva2VuW10gcHVibGljIGNvbm5lY3RvclRva2VuczsgICAgICAgICAgICAgICAvLyBFUkMyMCBzdGFuZGFyZCB0b2tlbiBhZGRyZXNzZXMKICAgIElFUkMyMFRva2VuW10gcHVibGljIHF1aWNrQnV5UGF0aDsgICAgICAgICAgICAgICAgICAvLyBjb252ZXJzaW9uIHBhdGggdGhhdCdzIHVzZWQgaW4gb3JkZXIgdG8gYnV5IHRoZSB0b2tlbiB3aXRoIEVUSAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBDb25uZWN0b3IpIHB1YmxpYyBjb25uZWN0b3JzOyAgIC8vIGNvbm5lY3RvciB0b2tlbiBhZGRyZXNzZXMgLT4gY29ubmVjdG9yIGRhdGEKICAgIHVpbnQzMiBwcml2YXRlIHRvdGFsQ29ubmVjdG9yV2VpZ2h0ID0gMDsgICAgICAgICAgICAvLyB1c2VkIHRvIGVmZmljaWVudGx5IHByZXZlbnQgaW5jcmVhc2luZyB0aGUgdG90YWwgY29ubmVjdG9yIHdlaWdodCBhYm92ZSAxMDAlCiAgICB1aW50MzIgcHVibGljIG1heENvbnZlcnNpb25GZWUgPSAwOyAgICAgICAgICAgICAgICAgLy8gbWF4aW11bSBjb252ZXJzaW9uIGZlZSBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb250cmFjdCwgcmVwcmVzZW50ZWQgaW4gcHBtLCAwLi4uMTAwMDAwMCAoMCA9IG5vIGZlZSwgMTAwID0gMC4wMSUsIDEwMDAwMDAgPSAxMDAlKQogICAgdWludDMyIHB1YmxpYyBjb252ZXJzaW9uRmVlID0gMDsgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgY29udmVyc2lvbiBmZWUsIHJlcHJlc2VudGVkIGluIHBwbSwgMC4uLm1heENvbnZlcnNpb25GZWUKICAgIGJvb2wgcHVibGljIGNvbnZlcnNpb25zRW5hYmxlZCA9IHRydWU7ICAgICAgICAgICAgICAvLyB0cnVlIGlmIHRva2VuIGNvbnZlcnNpb25zIGlzIGVuYWJsZWQsIGZhbHNlIGlmIG5vdAoKICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgY29udmVyc2lvbiBiZXR3ZWVuIHR3byB0b2tlbnMgb2NjdXJzIChUb2tlbkNvbnZlcnRlciBldmVudCkKICAgIGV2ZW50IENvbnZlcnNpb24oYWRkcmVzcyBpbmRleGVkIF9mcm9tVG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfdG9Ub2tlbiwgYWRkcmVzcyBpbmRleGVkIF90cmFkZXIsIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfcmV0dXJuLAogICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9jdXJyZW50UHJpY2VOLCB1aW50MjU2IF9jdXJyZW50UHJpY2VEKTsKICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSBjb252ZXJzaW9uIGZlZSBpcyB1cGRhdGVkCiAgICBldmVudCBDb252ZXJzaW9uRmVlVXBkYXRlKHVpbnQzMiBfcHJldkZlZSwgdWludDMyIF9uZXdGZWUpOwoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKCiAgICAgICAgQHBhcmFtICBfdG9rZW4gICAgICAgICAgICAgIHNtYXJ0IHRva2VuIGdvdmVybmVkIGJ5IHRoZSBjb252ZXJ0ZXIKICAgICAgICBAcGFyYW0gIF9leHRlbnNpb25zICAgICAgICAgYWRkcmVzcyBvZiBhIGJhbmNvciBjb252ZXJ0ZXIgZXh0ZW5zaW9ucyBjb250cmFjdAogICAgICAgIEBwYXJhbSAgX21heENvbnZlcnNpb25GZWUgICBtYXhpbXVtIGNvbnZlcnNpb24gZmVlLCByZXByZXNlbnRlZCBpbiBwcG0KICAgICAgICBAcGFyYW0gIF9jb25uZWN0b3JUb2tlbiAgICAgb3B0aW9uYWwsIGluaXRpYWwgY29ubmVjdG9yLCBhbGxvd3MgZGVmaW5pbmcgdGhlIGZpcnN0IGNvbm5lY3RvciBhdCBkZXBsb3ltZW50IHRpbWUKICAgICAgICBAcGFyYW0gIF9jb25uZWN0b3JXZWlnaHQgICAgb3B0aW9uYWwsIHdlaWdodCBmb3IgdGhlIGluaXRpYWwgY29ubmVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gQmFuY29yQ29udmVydGVyKElTbWFydFRva2VuIF90b2tlbiwgSUJhbmNvckNvbnZlcnRlckV4dGVuc2lvbnMgX2V4dGVuc2lvbnMsIHVpbnQzMiBfbWF4Q29udmVyc2lvbkZlZSwgSUVSQzIwVG9rZW4gX2Nvbm5lY3RvclRva2VuLCB1aW50MzIgX2Nvbm5lY3RvcldlaWdodCkKICAgICAgICBTbWFydFRva2VuQ29udHJvbGxlcihfdG9rZW4pCiAgICAgICAgdmFsaWRBZGRyZXNzKF9leHRlbnNpb25zKQogICAgICAgIHZhbGlkTWF4Q29udmVyc2lvbkZlZShfbWF4Q29udmVyc2lvbkZlZSkKICAgIHsKICAgICAgICBleHRlbnNpb25zID0gX2V4dGVuc2lvbnM7CiAgICAgICAgbWF4Q29udmVyc2lvbkZlZSA9IF9tYXhDb252ZXJzaW9uRmVlOwoKICAgICAgICBpZiAoYWRkcmVzcyhfY29ubmVjdG9yVG9rZW4pICE9IDB4MCkKICAgICAgICAgICAgYWRkQ29ubmVjdG9yKF9jb25uZWN0b3JUb2tlbiwgX2Nvbm5lY3RvcldlaWdodCwgZmFsc2UpOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIGNvbm5lY3RvciB0b2tlbiBhZGRyZXNzIC0gdmVyaWZpZXMgdGhhdCB0aGUgYWRkcmVzcyBiZWxvbmdzIHRvIG9uZSBvZiB0aGUgY29ubmVjdG9yIHRva2VucwogICAgbW9kaWZpZXIgdmFsaWRDb25uZWN0b3IoSUVSQzIwVG9rZW4gX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKGNvbm5lY3RvcnNbX2FkZHJlc3NdLmlzU2V0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIHRva2VuIGFkZHJlc3MgLSB2ZXJpZmllcyB0aGF0IHRoZSBhZGRyZXNzIGJlbG9uZ3MgdG8gb25lIG9mIHRoZSBjb252ZXJ0aWJsZSB0b2tlbnMKICAgIG1vZGlmaWVyIHZhbGlkVG9rZW4oSUVSQzIwVG9rZW4gX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzID09IHRva2VuIHx8IGNvbm5lY3RvcnNbX2FkZHJlc3NdLmlzU2V0KTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGdhcyBwcmljZSBpcyBsb3dlciB0aGFuIHRoZSB1bml2ZXJzYWwgbGltaXQKICAgIG1vZGlmaWVyIHZhbGlkR2FzUHJpY2UoKSB7CiAgICAgICAgYXNzZXJ0KHR4Lmdhc3ByaWNlIDw9IGV4dGVuc2lvbnMuZ2FzUHJpY2VMaW1pdCgpLmdhc1ByaWNlKCkpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIG1heGltdW0gY29udmVyc2lvbiBmZWUKICAgIG1vZGlmaWVyIHZhbGlkTWF4Q29udmVyc2lvbkZlZSh1aW50MzIgX2NvbnZlcnNpb25GZWUpIHsKICAgICAgICByZXF1aXJlKF9jb252ZXJzaW9uRmVlID49IDAgJiYgX2NvbnZlcnNpb25GZWUgPD0gTUFYX0NPTlZFUlNJT05fRkVFKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBjb252ZXJzaW9uIGZlZQogICAgbW9kaWZpZXIgdmFsaWRDb252ZXJzaW9uRmVlKHVpbnQzMiBfY29udmVyc2lvbkZlZSkgewogICAgICAgIHJlcXVpcmUoX2NvbnZlcnNpb25GZWUgPj0gMCAmJiBfY29udmVyc2lvbkZlZSA8PSBtYXhDb252ZXJzaW9uRmVlKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBjb25uZWN0b3Igd2VpZ2h0IHJhbmdlCiAgICBtb2RpZmllciB2YWxpZENvbm5lY3RvcldlaWdodCh1aW50MzIgX3dlaWdodCkgewogICAgICAgIHJlcXVpcmUoX3dlaWdodCA+IDAgJiYgX3dlaWdodCA8PSBNQVhfV0VJR0hUKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZhbGlkYXRlcyBhIGNvbnZlcnNpb24gcGF0aCAtIHZlcmlmaWVzIHRoYXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpcyBvZGQgYW5kIHRoYXQgbWF4aW11bSBudW1iZXIgb2YgJ2hvcHMnIGlzIDEwCiAgICBtb2RpZmllciB2YWxpZENvbnZlcnNpb25QYXRoKElFUkMyMFRva2VuW10gX3BhdGgpIHsKICAgICAgICByZXF1aXJlKF9wYXRoLmxlbmd0aCA+IDIgJiYgX3BhdGgubGVuZ3RoIDw9ICgxICsgMiAqIDEwKSAmJiBfcGF0aC5sZW5ndGggJSAyID09IDEpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gYWxsb3dzIGV4ZWN1dGlvbiBvbmx5IHdoZW4gY29udmVyc2lvbnMgYXJlbid0IGRpc2FibGVkCiAgICBtb2RpZmllciBjb252ZXJzaW9uc0FsbG93ZWQgewogICAgICAgIGFzc2VydChjb252ZXJzaW9uc0VuYWJsZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBudW1iZXIgb2YgY29ubmVjdG9yIHRva2VucyBkZWZpbmVkCgogICAgICAgIEByZXR1cm4gbnVtYmVyIG9mIGNvbm5lY3RvciB0b2tlbnMKICAgICovCiAgICBmdW5jdGlvbiBjb25uZWN0b3JUb2tlbkNvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQxNikgewogICAgICAgIHJldHVybiB1aW50MTYoY29ubmVjdG9yVG9rZW5zLmxlbmd0aCk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBudW1iZXIgb2YgY29udmVydGlibGUgdG9rZW5zIHN1cHBvcnRlZCBieSB0aGUgY29udHJhY3QKICAgICAgICBub3RlIHRoYXQgdGhlIG51bWJlciBvZiBjb252ZXJ0aWJsZSB0b2tlbnMgaXMgdGhlIG51bWJlciBvZiBjb25uZWN0b3IgdG9rZW4sIHBsdXMgMSAodGhhdCByZXByZXNlbnRzIHRoZSBzbWFydCB0b2tlbikKCiAgICAgICAgQHJldHVybiBudW1iZXIgb2YgY29udmVydGlibGUgdG9rZW5zCiAgICAqLwogICAgZnVuY3Rpb24gY29udmVydGlibGVUb2tlbkNvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQxNikgewogICAgICAgIHJldHVybiBjb25uZWN0b3JUb2tlbkNvdW50KCkgKyAxOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZ2l2ZW4gYSBjb252ZXJ0aWJsZSB0b2tlbiBpbmRleCwgcmV0dXJucyBpdHMgY29udHJhY3QgYWRkcmVzcwoKICAgICAgICBAcGFyYW0gX3Rva2VuSW5kZXggIGNvbnZlcnRpYmxlIHRva2VuIGluZGV4CgogICAgICAgIEByZXR1cm4gY29udmVydGlibGUgdG9rZW4gYWRkcmVzcwogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnZlcnRpYmxlVG9rZW4odWludDE2IF90b2tlbkluZGV4KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIGlmIChfdG9rZW5JbmRleCA9PSAwKQogICAgICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgICAgcmV0dXJuIGNvbm5lY3RvclRva2Vuc1tfdG9rZW5JbmRleCAtIDFdOwogICAgfQoKICAgIC8qCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIHVwZGF0ZSB0aGUgZXh0ZW5zaW9ucyBjb250cmFjdCBhZGRyZXNzCgogICAgICAgIEBwYXJhbSBfZXh0ZW5zaW9ucyAgICBhZGRyZXNzIG9mIGEgYmFuY29yIGNvbnZlcnRlciBleHRlbnNpb25zIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2V0RXh0ZW5zaW9ucyhJQmFuY29yQ29udmVydGVyRXh0ZW5zaW9ucyBfZXh0ZW5zaW9ucykKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICB2YWxpZEFkZHJlc3MoX2V4dGVuc2lvbnMpCiAgICAgICAgbm90VGhpcyhfZXh0ZW5zaW9ucykKICAgIHsKICAgICAgICBleHRlbnNpb25zID0gX2V4dGVuc2lvbnM7CiAgICB9CgogICAgLyoKICAgICAgICBAZGV2IGFsbG93cyB0aGUgbWFuYWdlciB0byB1cGRhdGUgdGhlIHF1aWNrIGJ1eSBwYXRoCgogICAgICAgIEBwYXJhbSBfcGF0aCAgICBuZXcgcXVpY2sgYnV5IHBhdGgsIHNlZSBjb252ZXJzaW9uIHBhdGggZm9ybWF0IGluIHRoZSBCYW5jb3JRdWlja0NvbnZlcnRlciBjb250cmFjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNldFF1aWNrQnV5UGF0aChJRVJDMjBUb2tlbltdIF9wYXRoKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkQ29udmVyc2lvblBhdGgoX3BhdGgpCiAgICB7CiAgICAgICAgcXVpY2tCdXlQYXRoID0gX3BhdGg7CiAgICB9CgogICAgLyoKICAgICAgICBAZGV2IGFsbG93cyB0aGUgbWFuYWdlciB0byBjbGVhciB0aGUgcXVpY2sgYnV5IHBhdGgKICAgICovCiAgICBmdW5jdGlvbiBjbGVhclF1aWNrQnV5UGF0aCgpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHF1aWNrQnV5UGF0aC5sZW5ndGggPSAwOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBxdWljayBidXkgcGF0aCBhcnJheQoKICAgICAgICBAcmV0dXJuIHF1aWNrIGJ1eSBwYXRoIGxlbmd0aAogICAgKi8KICAgIGZ1bmN0aW9uIGdldFF1aWNrQnV5UGF0aExlbmd0aCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHF1aWNrQnV5UGF0aC5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBkaXNhYmxlcyB0aGUgZW50aXJlIGNvbnZlcnNpb24gZnVuY3Rpb25hbGl0eQogICAgICAgIHRoaXMgaXMgYSBzYWZldHkgbWVjaGFuaXNtIGluIGNhc2Ugb2YgYSBlbWVyZ2VuY3kKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG1hbmFnZXIKCiAgICAgICAgQHBhcmFtIF9kaXNhYmxlIHRydWUgdG8gZGlzYWJsZSBjb252ZXJzaW9ucywgZmFsc2UgdG8gcmUtZW5hYmxlIHRoZW0KICAgICovCiAgICBmdW5jdGlvbiBkaXNhYmxlQ29udmVyc2lvbnMoYm9vbCBfZGlzYWJsZSkgcHVibGljIG1hbmFnZXJPbmx5IHsKICAgICAgICBjb252ZXJzaW9uc0VuYWJsZWQgPSAhX2Rpc2FibGU7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB1cGRhdGVzIHRoZSBjdXJyZW50IGNvbnZlcnNpb24gZmVlCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBtYW5hZ2VyCgogICAgICAgIEBwYXJhbSBfY29udmVyc2lvbkZlZSBuZXcgY29udmVyc2lvbiBmZWUsIHJlcHJlc2VudGVkIGluIHBwbQogICAgKi8KICAgIGZ1bmN0aW9uIHNldENvbnZlcnNpb25GZWUodWludDMyIF9jb252ZXJzaW9uRmVlKQogICAgICAgIHB1YmxpYwogICAgICAgIG1hbmFnZXJPbmx5CiAgICAgICAgdmFsaWRDb252ZXJzaW9uRmVlKF9jb252ZXJzaW9uRmVlKQogICAgewogICAgICAgIENvbnZlcnNpb25GZWVVcGRhdGUoY29udmVyc2lvbkZlZSwgX2NvbnZlcnNpb25GZWUpOwogICAgICAgIGNvbnZlcnNpb25GZWUgPSBfY29udmVyc2lvbkZlZTsKICAgIH0KCiAgICAvKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgY29udmVyc2lvbiBmZWUgYW1vdW50IGZvciBhIGdpdmVuIHJldHVybiBhbW91bnQKCiAgICAgICAgQHJldHVybiBjb252ZXJzaW9uIGZlZSBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBnZXRDb252ZXJzaW9uRmVlQW1vdW50KHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2FmZU11bChfYW1vdW50LCBjb252ZXJzaW9uRmVlKSAvIE1BWF9DT05WRVJTSU9OX0ZFRTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGRlZmluZXMgYSBuZXcgY29ubmVjdG9yIGZvciB0aGUgdG9rZW4KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIHdoaWxlIHRoZSBjb252ZXJ0ZXIgaXMgaW5hY3RpdmUKCiAgICAgICAgQHBhcmFtIF90b2tlbiAgICAgICAgICAgICAgICAgIGFkZHJlc3Mgb2YgdGhlIGNvbm5lY3RvciB0b2tlbgogICAgICAgIEBwYXJhbSBfd2VpZ2h0ICAgICAgICAgICAgICAgICBjb25zdGFudCBjb25uZWN0b3Igd2VpZ2h0LCByZXByZXNlbnRlZCBpbiBwcG0sIDEtMTAwMDAwMAogICAgICAgIEBwYXJhbSBfZW5hYmxlVmlydHVhbEJhbGFuY2UgICB0cnVlIHRvIGVuYWJsZSB2aXJ0dWFsIGJhbGFuY2UgZm9yIHRoZSBjb25uZWN0b3IsIGZhbHNlIHRvIGRpc2FibGUgaXQKICAgICovCiAgICBmdW5jdGlvbiBhZGRDb25uZWN0b3IoSUVSQzIwVG9rZW4gX3Rva2VuLCB1aW50MzIgX3dlaWdodCwgYm9vbCBfZW5hYmxlVmlydHVhbEJhbGFuY2UpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgaW5hY3RpdmUKICAgICAgICB2YWxpZEFkZHJlc3MoX3Rva2VuKQogICAgICAgIG5vdFRoaXMoX3Rva2VuKQogICAgICAgIHZhbGlkQ29ubmVjdG9yV2VpZ2h0KF93ZWlnaHQpCiAgICB7CiAgICAgICAgcmVxdWlyZShfdG9rZW4gIT0gdG9rZW4gJiYgIWNvbm5lY3RvcnNbX3Rva2VuXS5pc1NldCAmJiB0b3RhbENvbm5lY3RvcldlaWdodCArIF93ZWlnaHQgPD0gTUFYX1dFSUdIVCk7IC8vIHZhbGlkYXRlIGlucHV0CgogICAgICAgIGNvbm5lY3RvcnNbX3Rva2VuXS52aXJ0dWFsQmFsYW5jZSA9IDA7CiAgICAgICAgY29ubmVjdG9yc1tfdG9rZW5dLndlaWdodCA9IF93ZWlnaHQ7CiAgICAgICAgY29ubmVjdG9yc1tfdG9rZW5dLmlzVmlydHVhbEJhbGFuY2VFbmFibGVkID0gX2VuYWJsZVZpcnR1YWxCYWxhbmNlOwogICAgICAgIGNvbm5lY3RvcnNbX3Rva2VuXS5pc1B1cmNoYXNlRW5hYmxlZCA9IHRydWU7CiAgICAgICAgY29ubmVjdG9yc1tfdG9rZW5dLmlzU2V0ID0gdHJ1ZTsKICAgICAgICBjb25uZWN0b3JUb2tlbnMucHVzaChfdG9rZW4pOwogICAgICAgIHRvdGFsQ29ubmVjdG9yV2VpZ2h0ICs9IF93ZWlnaHQ7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB1cGRhdGVzIG9uZSBvZiB0aGUgdG9rZW4gY29ubmVjdG9ycwogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgICAgICAgIGFkZHJlc3Mgb2YgdGhlIGNvbm5lY3RvciB0b2tlbgogICAgICAgIEBwYXJhbSBfd2VpZ2h0ICAgICAgICAgICAgICAgICBjb25zdGFudCBjb25uZWN0b3Igd2VpZ2h0LCByZXByZXNlbnRlZCBpbiBwcG0sIDEtMTAwMDAwMAogICAgICAgIEBwYXJhbSBfZW5hYmxlVmlydHVhbEJhbGFuY2UgICB0cnVlIHRvIGVuYWJsZSB2aXJ0dWFsIGJhbGFuY2UgZm9yIHRoZSBjb25uZWN0b3IsIGZhbHNlIHRvIGRpc2FibGUgaXQKICAgICAgICBAcGFyYW0gX3ZpcnR1YWxCYWxhbmNlICAgICAgICAgbmV3IGNvbm5lY3RvcidzIHZpcnR1YWwgYmFsYW5jZQogICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbm5lY3RvcihJRVJDMjBUb2tlbiBfY29ubmVjdG9yVG9rZW4sIHVpbnQzMiBfd2VpZ2h0LCBib29sIF9lbmFibGVWaXJ0dWFsQmFsYW5jZSwgdWludDI1NiBfdmlydHVhbEJhbGFuY2UpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRDb25uZWN0b3IoX2Nvbm5lY3RvclRva2VuKQogICAgICAgIHZhbGlkQ29ubmVjdG9yV2VpZ2h0KF93ZWlnaHQpCiAgICB7CiAgICAgICAgQ29ubmVjdG9yIHN0b3JhZ2UgY29ubmVjdG9yID0gY29ubmVjdG9yc1tfY29ubmVjdG9yVG9rZW5dOwogICAgICAgIHJlcXVpcmUodG90YWxDb25uZWN0b3JXZWlnaHQgLSBjb25uZWN0b3Iud2VpZ2h0ICsgX3dlaWdodCA8PSBNQVhfV0VJR0hUKTsgLy8gdmFsaWRhdGUgaW5wdXQKCiAgICAgICAgdG90YWxDb25uZWN0b3JXZWlnaHQgPSB0b3RhbENvbm5lY3RvcldlaWdodCAtIGNvbm5lY3Rvci53ZWlnaHQgKyBfd2VpZ2h0OwogICAgICAgIGNvbm5lY3Rvci53ZWlnaHQgPSBfd2VpZ2h0OwogICAgICAgIGNvbm5lY3Rvci5pc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZCA9IF9lbmFibGVWaXJ0dWFsQmFsYW5jZTsKICAgICAgICBjb25uZWN0b3IudmlydHVhbEJhbGFuY2UgPSBfdmlydHVhbEJhbGFuY2U7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBkaXNhYmxlcyBwdXJjaGFzaW5nIHdpdGggdGhlIGdpdmVuIGNvbm5lY3RvciB0b2tlbiBpbiBjYXNlIHRoZSBjb25uZWN0b3IgdG9rZW4gZ290IGNvbXByb21pc2VkCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lcgogICAgICAgIG5vdGUgdGhhdCBzZWxsaW5nIGlzIHN0aWxsIGVuYWJsZWQgcmVnYXJkbGVzcyBvZiB0aGlzIGZsYWcgYW5kIGl0IGNhbm5vdCBiZSBkaXNhYmxlZCBieSB0aGUgb3duZXIKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX2Rpc2FibGUgICAgICAgICB0cnVlIHRvIGRpc2FibGUgdGhlIHRva2VuLCBmYWxzZSB0byByZS1lbmFibGUgaXQKICAgICovCiAgICBmdW5jdGlvbiBkaXNhYmxlQ29ubmVjdG9yUHVyY2hhc2VzKElFUkMyMFRva2VuIF9jb25uZWN0b3JUb2tlbiwgYm9vbCBfZGlzYWJsZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICB2YWxpZENvbm5lY3RvcihfY29ubmVjdG9yVG9rZW4pCiAgICB7CiAgICAgICAgY29ubmVjdG9yc1tfY29ubmVjdG9yVG9rZW5dLmlzUHVyY2hhc2VFbmFibGVkID0gIV9kaXNhYmxlOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgY29ubmVjdG9yJ3MgdmlydHVhbCBiYWxhbmNlIGlmIG9uZSBpcyBkZWZpbmVkLCBvdGhlcndpc2UgcmV0dXJucyB0aGUgYWN0dWFsIGJhbGFuY2UKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKCiAgICAgICAgQHJldHVybiBjb25uZWN0b3IgYmFsYW5jZQogICAgKi8KICAgIGZ1bmN0aW9uIGdldENvbm5lY3RvckJhbGFuY2UoSUVSQzIwVG9rZW4gX2Nvbm5lY3RvclRva2VuKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgdmFsaWRDb25uZWN0b3IoX2Nvbm5lY3RvclRva2VuKQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgQ29ubmVjdG9yIHN0b3JhZ2UgY29ubmVjdG9yID0gY29ubmVjdG9yc1tfY29ubmVjdG9yVG9rZW5dOwogICAgICAgIHJldHVybiBjb25uZWN0b3IuaXNWaXJ0dWFsQmFsYW5jZUVuYWJsZWQgPyBjb25uZWN0b3IudmlydHVhbEJhbGFuY2UgOiBfY29ubmVjdG9yVG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZXhwZWN0ZWQgcmV0dXJuIGZvciBjb252ZXJ0aW5nIGEgc3BlY2lmaWMgYW1vdW50IG9mIF9mcm9tVG9rZW4gdG8gX3RvVG9rZW4KCiAgICAgICAgQHBhcmFtIF9mcm9tVG9rZW4gIEVSQzIwIHRva2VuIHRvIGNvbnZlcnQgZnJvbQogICAgICAgIEBwYXJhbSBfdG9Ub2tlbiAgICBFUkMyMCB0b2tlbiB0byBjb252ZXJ0IHRvCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBjb252ZXJ0LCBpbiBmcm9tVG9rZW4KCiAgICAgICAgQHJldHVybiBleHBlY3RlZCBjb252ZXJzaW9uIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBnZXRSZXR1cm4oSUVSQzIwVG9rZW4gX2Zyb21Ub2tlbiwgSUVSQzIwVG9rZW4gX3RvVG9rZW4sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXF1aXJlKF9mcm9tVG9rZW4gIT0gX3RvVG9rZW4pOyAvLyB2YWxpZGF0ZSBpbnB1dAoKICAgICAgICAvLyBjb252ZXJzaW9uIGJldHdlZW4gdGhlIHRva2VuIGFuZCBvbmUgb2YgaXRzIGNvbm5lY3RvcnMKICAgICAgICBpZiAoX3RvVG9rZW4gPT0gdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBnZXRQdXJjaGFzZVJldHVybihfZnJvbVRva2VuLCBfYW1vdW50KTsKICAgICAgICBlbHNlIGlmIChfZnJvbVRva2VuID09IHRva2VuKQogICAgICAgICAgICByZXR1cm4gZ2V0U2FsZVJldHVybihfdG9Ub2tlbiwgX2Ftb3VudCk7CgogICAgICAgIC8vIGNvbnZlcnNpb24gYmV0d2VlbiAyIGNvbm5lY3RvcnMKICAgICAgICB1aW50MjU2IHB1cmNoYXNlUmV0dXJuQW1vdW50ID0gZ2V0UHVyY2hhc2VSZXR1cm4oX2Zyb21Ub2tlbiwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIGdldFNhbGVSZXR1cm4oX3RvVG9rZW4sIHB1cmNoYXNlUmV0dXJuQW1vdW50LCBzYWZlQWRkKHRva2VuLnRvdGFsU3VwcGx5KCksIHB1cmNoYXNlUmV0dXJuQW1vdW50KSk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBleHBlY3RlZCByZXR1cm4gZm9yIGJ1eWluZyB0aGUgdG9rZW4gZm9yIGEgY29ubmVjdG9yIHRva2VuCgogICAgICAgIEBwYXJhbSBfY29ubmVjdG9yVG9rZW4gIGNvbm5lY3RvciB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF9kZXBvc2l0QW1vdW50ICAgYW1vdW50IHRvIGRlcG9zaXQgKGluIHRoZSBjb25uZWN0b3IgdG9rZW4pCgogICAgICAgIEByZXR1cm4gZXhwZWN0ZWQgcHVyY2hhc2UgcmV0dXJuIGFtb3VudAogICAgKi8KICAgIGZ1bmN0aW9uIGdldFB1cmNoYXNlUmV0dXJuKElFUkMyMFRva2VuIF9jb25uZWN0b3JUb2tlbiwgdWludDI1NiBfZGVwb3NpdEFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIGFjdGl2ZQogICAgICAgIHZhbGlkQ29ubmVjdG9yKF9jb25uZWN0b3JUb2tlbikKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIENvbm5lY3RvciBzdG9yYWdlIGNvbm5lY3RvciA9IGNvbm5lY3RvcnNbX2Nvbm5lY3RvclRva2VuXTsKICAgICAgICByZXF1aXJlKGNvbm5lY3Rvci5pc1B1cmNoYXNlRW5hYmxlZCk7IC8vIHZhbGlkYXRlIGlucHV0CgogICAgICAgIHVpbnQyNTYgdG9rZW5TdXBwbHkgPSB0b2tlbi50b3RhbFN1cHBseSgpOwogICAgICAgIHVpbnQyNTYgY29ubmVjdG9yQmFsYW5jZSA9IGdldENvbm5lY3RvckJhbGFuY2UoX2Nvbm5lY3RvclRva2VuKTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGV4dGVuc2lvbnMuZm9ybXVsYSgpLmNhbGN1bGF0ZVB1cmNoYXNlUmV0dXJuKHRva2VuU3VwcGx5LCBjb25uZWN0b3JCYWxhbmNlLCBjb25uZWN0b3Iud2VpZ2h0LCBfZGVwb3NpdEFtb3VudCk7CgogICAgICAgIC8vIGRlZHVjdCB0aGUgZmVlIGZyb20gdGhlIHJldHVybiBhbW91bnQKICAgICAgICB1aW50MjU2IGZlZUFtb3VudCA9IGdldENvbnZlcnNpb25GZWVBbW91bnQoYW1vdW50KTsKICAgICAgICByZXR1cm4gc2FmZVN1YihhbW91bnQsIGZlZUFtb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBleHBlY3RlZCByZXR1cm4gZm9yIHNlbGxpbmcgdGhlIHRva2VuIGZvciBvbmUgb2YgaXRzIGNvbm5lY3RvciB0b2tlbnMKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3NlbGxBbW91bnQgICAgICBhbW91bnQgdG8gc2VsbCAoaW4gdGhlIHNtYXJ0IHRva2VuKQoKICAgICAgICBAcmV0dXJuIGV4cGVjdGVkIHNhbGUgcmV0dXJuIGFtb3VudAogICAgKi8KICAgIGZ1bmN0aW9uIGdldFNhbGVSZXR1cm4oSUVSQzIwVG9rZW4gX2Nvbm5lY3RvclRva2VuLCB1aW50MjU2IF9zZWxsQW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBnZXRTYWxlUmV0dXJuKF9jb25uZWN0b3JUb2tlbiwgX3NlbGxBbW91bnQsIHRva2VuLnRvdGFsU3VwcGx5KCkpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgY29udmVydHMgYSBzcGVjaWZpYyBhbW91bnQgb2YgX2Zyb21Ub2tlbiB0byBfdG9Ub2tlbgoKICAgICAgICBAcGFyYW0gX2Zyb21Ub2tlbiAgRVJDMjAgdG9rZW4gdG8gY29udmVydCBmcm9tCiAgICAgICAgQHBhcmFtIF90b1Rva2VuICAgIEVSQzIwIHRva2VuIHRvIGNvbnZlcnQgdG8KICAgICAgICBAcGFyYW0gX2Ftb3VudCAgICAgYW1vdW50IHRvIGNvbnZlcnQsIGluIGZyb21Ub2tlbgogICAgICAgIEBwYXJhbSBfbWluUmV0dXJuICBpZiB0aGUgY29udmVyc2lvbiByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiBjb252ZXJzaW9uIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBjb252ZXJ0KElFUkMyMFRva2VuIF9mcm9tVG9rZW4sIElFUkMyMFRva2VuIF90b1Rva2VuLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXF1aXJlKF9mcm9tVG9rZW4gIT0gX3RvVG9rZW4pOyAvLyB2YWxpZGF0ZSBpbnB1dAoKICAgICAgICAvLyBjb252ZXJzaW9uIGJldHdlZW4gdGhlIHRva2VuIGFuZCBvbmUgb2YgaXRzIGNvbm5lY3RvcnMKICAgICAgICBpZiAoX3RvVG9rZW4gPT0gdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBidXkoX2Zyb21Ub2tlbiwgX2Ftb3VudCwgX21pblJldHVybik7CiAgICAgICAgZWxzZSBpZiAoX2Zyb21Ub2tlbiA9PSB0b2tlbikKICAgICAgICAgICAgcmV0dXJuIHNlbGwoX3RvVG9rZW4sIF9hbW91bnQsIF9taW5SZXR1cm4pOwoKICAgICAgICAvLyBjb252ZXJzaW9uIGJldHdlZW4gMiBjb25uZWN0b3JzCiAgICAgICAgdWludDI1NiBwdXJjaGFzZUFtb3VudCA9IGJ1eShfZnJvbVRva2VuLCBfYW1vdW50LCAxKTsKICAgICAgICByZXR1cm4gc2VsbChfdG9Ub2tlbiwgcHVyY2hhc2VBbW91bnQsIF9taW5SZXR1cm4pOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgYnV5cyB0aGUgdG9rZW4gYnkgZGVwb3NpdGluZyBvbmUgb2YgaXRzIGNvbm5lY3RvciB0b2tlbnMKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX2RlcG9zaXRBbW91bnQgICBhbW91bnQgdG8gZGVwb3NpdCAoaW4gdGhlIGNvbm5lY3RvciB0b2tlbikKICAgICAgICBAcGFyYW0gX21pblJldHVybiAgICAgICBpZiB0aGUgY29udmVyc2lvbiByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiBidXkgcmV0dXJuIGFtb3VudAogICAgKi8KICAgIGZ1bmN0aW9uIGJ1eShJRVJDMjBUb2tlbiBfY29ubmVjdG9yVG9rZW4sIHVpbnQyNTYgX2RlcG9zaXRBbW91bnQsIHVpbnQyNTYgX21pblJldHVybikKICAgICAgICBwdWJsaWMKICAgICAgICBjb252ZXJzaW9uc0FsbG93ZWQKICAgICAgICB2YWxpZEdhc1ByaWNlCiAgICAgICAgZ3JlYXRlclRoYW5aZXJvKF9taW5SZXR1cm4pCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IGdldFB1cmNoYXNlUmV0dXJuKF9jb25uZWN0b3JUb2tlbiwgX2RlcG9zaXRBbW91bnQpOwogICAgICAgIGFzc2VydChhbW91bnQgIT0gMCAmJiBhbW91bnQgPj0gX21pblJldHVybik7IC8vIGVuc3VyZSB0aGUgdHJhZGUgZ2l2ZXMgc29tZXRoaW5nIGluIHJldHVybiBhbmQgbWVldHMgdGhlIG1pbmltdW0gcmVxdWVzdGVkIGFtb3VudAoKICAgICAgICAvLyB1cGRhdGUgdmlydHVhbCBiYWxhbmNlIGlmIHJlbGV2YW50CiAgICAgICAgQ29ubmVjdG9yIHN0b3JhZ2UgY29ubmVjdG9yID0gY29ubmVjdG9yc1tfY29ubmVjdG9yVG9rZW5dOwogICAgICAgIGlmIChjb25uZWN0b3IuaXNWaXJ0dWFsQmFsYW5jZUVuYWJsZWQpCiAgICAgICAgICAgIGNvbm5lY3Rvci52aXJ0dWFsQmFsYW5jZSA9IHNhZmVBZGQoY29ubmVjdG9yLnZpcnR1YWxCYWxhbmNlLCBfZGVwb3NpdEFtb3VudCk7CgogICAgICAgIC8vIHRyYW5zZmVyIF9kZXBvc2l0QW1vdW50IGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbiB0aGUgY29ubmVjdG9yIHRva2VuCiAgICAgICAgYXNzZXJ0KF9jb25uZWN0b3JUb2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgX2RlcG9zaXRBbW91bnQpKTsKICAgICAgICAvLyBpc3N1ZSBuZXcgZnVuZHMgdG8gdGhlIGNhbGxlciBpbiB0aGUgc21hcnQgdG9rZW4KICAgICAgICB0b2tlbi5pc3N1ZShtc2cuc2VuZGVyLCBhbW91bnQpOwoKICAgICAgICBkaXNwYXRjaENvbnZlcnNpb25FdmVudChfY29ubmVjdG9yVG9rZW4sIF9kZXBvc2l0QW1vdW50LCBhbW91bnQsIHRydWUpOwogICAgICAgIHJldHVybiBhbW91bnQ7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBzZWxscyB0aGUgdG9rZW4gYnkgd2l0aGRyYXdpbmcgZnJvbSBvbmUgb2YgaXRzIGNvbm5lY3RvciB0b2tlbnMKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3NlbGxBbW91bnQgICAgICBhbW91bnQgdG8gc2VsbCAoaW4gdGhlIHNtYXJ0IHRva2VuKQogICAgICAgIEBwYXJhbSBfbWluUmV0dXJuICAgICAgIGlmIHRoZSBjb252ZXJzaW9uIHJlc3VsdHMgaW4gYW4gYW1vdW50IHNtYWxsZXIgdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiBzZWxsIHJldHVybiBhbW91bnQKICAgICovCiAgICBmdW5jdGlvbiBzZWxsKElFUkMyMFRva2VuIF9jb25uZWN0b3JUb2tlbiwgdWludDI1NiBfc2VsbEFtb3VudCwgdWludDI1NiBfbWluUmV0dXJuKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnZlcnNpb25zQWxsb3dlZAogICAgICAgIHZhbGlkR2FzUHJpY2UKICAgICAgICBncmVhdGVyVGhhblplcm8oX21pblJldHVybikKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJlcXVpcmUoX3NlbGxBbW91bnQgPD0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpKTsgLy8gdmFsaWRhdGUgaW5wdXQKCiAgICAgICAgdWludDI1NiBhbW91bnQgPSBnZXRTYWxlUmV0dXJuKF9jb25uZWN0b3JUb2tlbiwgX3NlbGxBbW91bnQpOwogICAgICAgIGFzc2VydChhbW91bnQgIT0gMCAmJiBhbW91bnQgPj0gX21pblJldHVybik7IC8vIGVuc3VyZSB0aGUgdHJhZGUgZ2l2ZXMgc29tZXRoaW5nIGluIHJldHVybiBhbmQgbWVldHMgdGhlIG1pbmltdW0gcmVxdWVzdGVkIGFtb3VudAoKICAgICAgICB1aW50MjU2IHRva2VuU3VwcGx5ID0gdG9rZW4udG90YWxTdXBwbHkoKTsKICAgICAgICB1aW50MjU2IGNvbm5lY3RvckJhbGFuY2UgPSBnZXRDb25uZWN0b3JCYWxhbmNlKF9jb25uZWN0b3JUb2tlbik7CiAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIHRyYWRlIHdpbGwgb25seSBkZXBsZXRlIHRoZSBjb25uZWN0b3IgaWYgdGhlIHRvdGFsIHN1cHBseSBpcyBkZXBsZXRlZCBhcyB3ZWxsCiAgICAgICAgYXNzZXJ0KGFtb3VudCA8IGNvbm5lY3RvckJhbGFuY2UgfHwgKGFtb3VudCA9PSBjb25uZWN0b3JCYWxhbmNlICYmIF9zZWxsQW1vdW50ID09IHRva2VuU3VwcGx5KSk7CgogICAgICAgIC8vIHVwZGF0ZSB2aXJ0dWFsIGJhbGFuY2UgaWYgcmVsZXZhbnQKICAgICAgICBDb25uZWN0b3Igc3RvcmFnZSBjb25uZWN0b3IgPSBjb25uZWN0b3JzW19jb25uZWN0b3JUb2tlbl07CiAgICAgICAgaWYgKGNvbm5lY3Rvci5pc1ZpcnR1YWxCYWxhbmNlRW5hYmxlZCkKICAgICAgICAgICAgY29ubmVjdG9yLnZpcnR1YWxCYWxhbmNlID0gc2FmZVN1Yihjb25uZWN0b3IudmlydHVhbEJhbGFuY2UsIGFtb3VudCk7CgogICAgICAgIC8vIGRlc3Ryb3kgX3NlbGxBbW91bnQgZnJvbSB0aGUgY2FsbGVyJ3MgYmFsYW5jZSBpbiB0aGUgc21hcnQgdG9rZW4KICAgICAgICB0b2tlbi5kZXN0cm95KG1zZy5zZW5kZXIsIF9zZWxsQW1vdW50KTsKICAgICAgICAvLyB0cmFuc2ZlciBmdW5kcyB0byB0aGUgY2FsbGVyIGluIHRoZSBjb25uZWN0b3IgdG9rZW4KICAgICAgICAvLyB0aGUgdHJhbnNmZXIgbWlnaHQgZmFpbCBpZiB0aGUgYWN0dWFsIGNvbm5lY3RvciBiYWxhbmNlIGlzIHNtYWxsZXIgdGhhbiB0aGUgdmlydHVhbCBiYWxhbmNlCiAgICAgICAgYXNzZXJ0KF9jb25uZWN0b3JUb2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQpKTsKCiAgICAgICAgZGlzcGF0Y2hDb252ZXJzaW9uRXZlbnQoX2Nvbm5lY3RvclRva2VuLCBfc2VsbEFtb3VudCwgYW1vdW50LCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIGFtb3VudDsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGNvbnZlcnRzIHRoZSB0b2tlbiB0byBhbnkgb3RoZXIgdG9rZW4gaW4gdGhlIGJhbmNvciBuZXR3b3JrIGJ5IGZvbGxvd2luZyBhIHByZWRlZmluZWQgY29udmVyc2lvbiBwYXRoCiAgICAgICAgbm90ZSB0aGF0IHdoZW4gY29udmVydGluZyBmcm9tIGFuIEVSQzIwIHRva2VuIChhcyBvcHBvc2VkIHRvIGEgc21hcnQgdG9rZW4pLCBhbGxvd2FuY2UgbXVzdCBiZSBzZXQgYmVmb3JlaGFuZAoKICAgICAgICBAcGFyYW0gX3BhdGggICAgICAgIGNvbnZlcnNpb24gcGF0aCwgc2VlIGNvbnZlcnNpb24gcGF0aCBmb3JtYXQgaW4gdGhlIEJhbmNvclF1aWNrQ29udmVydGVyIGNvbnRyYWN0CiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgICBhbW91bnQgdG8gY29udmVydCBmcm9tIChpbiB0aGUgaW5pdGlhbCBzb3VyY2UgdG9rZW4pCiAgICAgICAgQHBhcmFtIF9taW5SZXR1cm4gICBpZiB0aGUgY29udmVyc2lvbiByZXN1bHRzIGluIGFuIGFtb3VudCBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gcmV0dXJuIC0gaXQgaXMgY2FuY2VsbGVkLCBtdXN0IGJlIG5vbnplcm8KCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIHF1aWNrQ29udmVydChJRVJDMjBUb2tlbltdIF9wYXRoLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX21pblJldHVybikKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgdmFsaWRDb252ZXJzaW9uUGF0aChfcGF0aCkKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIElFUkMyMFRva2VuIGZyb21Ub2tlbiA9IF9wYXRoWzBdOwogICAgICAgIElCYW5jb3JRdWlja0NvbnZlcnRlciBxdWlja0NvbnZlcnRlciA9IGV4dGVuc2lvbnMucXVpY2tDb252ZXJ0ZXIoKTsKCiAgICAgICAgLy8gd2UgbmVlZCB0byB0cmFuc2ZlciB0aGUgc291cmNlIHRva2VucyBmcm9tIHRoZSBjYWxsZXIgdG8gdGhlIHF1aWNrIGNvbnZlcnRlciwKICAgICAgICAvLyBzbyBpdCBjYW4gZXhlY3V0ZSB0aGUgY29udmVyc2lvbiBvbiBiZWhhbGYgb2YgdGhlIGNhbGxlcgogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgewogICAgICAgICAgICAvLyBub3QgRVRILCBzZW5kIHRoZSBzb3VyY2UgdG9rZW5zIHRvIHRoZSBxdWljayBjb252ZXJ0ZXIKICAgICAgICAgICAgLy8gaWYgdGhlIHRva2VuIGlzIHRoZSBzbWFydCB0b2tlbiwgbm8gYWxsb3dhbmNlIGlzIHJlcXVpcmVkIC0gZGVzdHJveSB0aGUgdG9rZW5zIGZyb20gdGhlIGNhbGxlciBhbmQgaXNzdWUgdGhlbSB0byB0aGUgcXVpY2sgY29udmVydGVyCiAgICAgICAgICAgIGlmIChmcm9tVG9rZW4gPT0gdG9rZW4pIHsKICAgICAgICAgICAgICAgIHRva2VuLmRlc3Ryb3kobXNnLnNlbmRlciwgX2Ftb3VudCk7IC8vIGRlc3Ryb3kgX2Ftb3VudCB0b2tlbnMgZnJvbSB0aGUgY2FsbGVyJ3MgYmFsYW5jZSBpbiB0aGUgc21hcnQgdG9rZW4KICAgICAgICAgICAgICAgIHRva2VuLmlzc3VlKHF1aWNrQ29udmVydGVyLCBfYW1vdW50KTsgLy8gaXNzdWUgX2Ftb3VudCBuZXcgdG9rZW5zIHRvIHRoZSBxdWljayBjb252ZXJ0ZXIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgd2UgYXNzdW1lIHdlIGFscmVhZHkgaGF2ZSBhbGxvd2FuY2UsIHRyYW5zZmVyIHRoZSB0b2tlbnMgZGlyZWN0bHkgdG8gdGhlIHF1aWNrIGNvbnZlcnRlcgogICAgICAgICAgICAgICAgYXNzZXJ0KGZyb21Ub2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgcXVpY2tDb252ZXJ0ZXIsIF9hbW91bnQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gZXhlY3V0ZSB0aGUgY29udmVyc2lvbiBhbmQgcGFzcyBvbiB0aGUgRVRIIHdpdGggdGhlIGNhbGwKICAgICAgICByZXR1cm4gcXVpY2tDb252ZXJ0ZXIuY29udmVydEZvci52YWx1ZShtc2cudmFsdWUpKF9wYXRoLCBfYW1vdW50LCBfbWluUmV0dXJuLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLyBkZXByZWNhdGVkLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CiAgICBmdW5jdGlvbiBjaGFuZ2UoSUVSQzIwVG9rZW4gX2Zyb21Ub2tlbiwgSUVSQzIwVG9rZW4gX3RvVG9rZW4sIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfbWluUmV0dXJuKSBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBjb252ZXJ0KF9mcm9tVG9rZW4sIF90b1Rva2VuLCBfYW1vdW50LCBfbWluUmV0dXJuKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHV0aWxpdHksIHJldHVybnMgdGhlIGV4cGVjdGVkIHJldHVybiBmb3Igc2VsbGluZyB0aGUgdG9rZW4gZm9yIG9uZSBvZiBpdHMgY29ubmVjdG9yIHRva2VucywgZ2l2ZW4gYSB0b3RhbCBzdXBwbHkgb3ZlcnJpZGUKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX3NlbGxBbW91bnQgICAgICBhbW91bnQgdG8gc2VsbCAoaW4gdGhlIHNtYXJ0IHRva2VuKQogICAgICAgIEBwYXJhbSBfdG90YWxTdXBwbHkgICAgIHRvdGFsIHRva2VuIHN1cHBseSwgb3ZlcnJpZGVzIHRoZSBhY3R1YWwgdG9rZW4gdG90YWwgc3VwcGx5IHdoZW4gY2FsY3VsYXRpbmcgdGhlIHJldHVybgoKICAgICAgICBAcmV0dXJuIHNhbGUgcmV0dXJuIGFtb3VudAogICAgKi8KICAgIGZ1bmN0aW9uIGdldFNhbGVSZXR1cm4oSUVSQzIwVG9rZW4gX2Nvbm5lY3RvclRva2VuLCB1aW50MjU2IF9zZWxsQW1vdW50LCB1aW50MjU2IF90b3RhbFN1cHBseSkKICAgICAgICBwcml2YXRlCiAgICAgICAgY29uc3RhbnQKICAgICAgICBhY3RpdmUKICAgICAgICB2YWxpZENvbm5lY3RvcihfY29ubmVjdG9yVG9rZW4pCiAgICAgICAgZ3JlYXRlclRoYW5aZXJvKF90b3RhbFN1cHBseSkKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIENvbm5lY3RvciBzdG9yYWdlIGNvbm5lY3RvciA9IGNvbm5lY3RvcnNbX2Nvbm5lY3RvclRva2VuXTsKICAgICAgICB1aW50MjU2IGNvbm5lY3RvckJhbGFuY2UgPSBnZXRDb25uZWN0b3JCYWxhbmNlKF9jb25uZWN0b3JUb2tlbik7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBleHRlbnNpb25zLmZvcm11bGEoKS5jYWxjdWxhdGVTYWxlUmV0dXJuKF90b3RhbFN1cHBseSwgY29ubmVjdG9yQmFsYW5jZSwgY29ubmVjdG9yLndlaWdodCwgX3NlbGxBbW91bnQpOwoKICAgICAgICAvLyBkZWR1Y3QgdGhlIGZlZSBmcm9tIHRoZSByZXR1cm4gYW1vdW50CiAgICAgICAgdWludDI1NiBmZWVBbW91bnQgPSBnZXRDb252ZXJzaW9uRmVlQW1vdW50KGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHNhZmVTdWIoYW1vdW50LCBmZWVBbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgaGVscGVyLCBkaXNwYXRjaGVzIHRoZSBDb252ZXJzaW9uIGV2ZW50CiAgICAgICAgVGhlIGZ1bmN0aW9uIGFsc28gdGFrZXMgdGhlIHRva2VucycgZGVjaW1hbHMgaW50byBhY2NvdW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGN1cnJlbnQgcHJpY2UKCiAgICAgICAgQHBhcmFtIF9jb25uZWN0b3JUb2tlbiAgY29ubmVjdG9yIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBAcGFyYW0gX2Ftb3VudCAgICAgICAgICBhbW91bnQgcHVyY2hhc2VkL3NvbGQgKGluIHRoZSBzb3VyY2UgdG9rZW4pCiAgICAgICAgQHBhcmFtIF9yZXR1cm5BbW91bnQgICAgYW1vdW50IHJldHVybmVkIChpbiB0aGUgdGFyZ2V0IHRva2VuKQogICAgICAgIEBwYXJhbSBpc1B1cmNoYXNlICAgICAgIHRydWUgaWYgaXQncyBhIHB1cmNoYXNlLCBmYWxzZSBpZiBpdCdzIGEgc2FsZQogICAgKi8KICAgIGZ1bmN0aW9uIGRpc3BhdGNoQ29udmVyc2lvbkV2ZW50KElFUkMyMFRva2VuIF9jb25uZWN0b3JUb2tlbiwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9yZXR1cm5BbW91bnQsIGJvb2wgaXNQdXJjaGFzZSkgcHJpdmF0ZSB7CiAgICAgICAgQ29ubmVjdG9yIHN0b3JhZ2UgY29ubmVjdG9yID0gY29ubmVjdG9yc1tfY29ubmVjdG9yVG9rZW5dOwoKICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG5ldyBwcmljZSB1c2luZyB0aGUgc2ltcGxlIHByaWNlIGZvcm11bGEKICAgICAgICAvLyBwcmljZSA9IGNvbm5lY3RvciBiYWxhbmNlIC8gKHN1cHBseSAqIHdlaWdodCkKICAgICAgICAvLyB3ZWlnaHQgaXMgcmVwcmVzZW50ZWQgaW4gcHBtLCBzbyBtdWx0aXBseWluZyBieSAxMDAwMDAwCiAgICAgICAgdWludDI1NiBjb25uZWN0b3JBbW91bnQgPSBzYWZlTXVsKGdldENvbm5lY3RvckJhbGFuY2UoX2Nvbm5lY3RvclRva2VuKSwgTUFYX1dFSUdIVCk7CiAgICAgICAgdWludDI1NiB0b2tlbkFtb3VudCA9IHNhZmVNdWwodG9rZW4udG90YWxTdXBwbHkoKSwgY29ubmVjdG9yLndlaWdodCk7CgogICAgICAgIC8vIG5vcm1hbGl6ZSB2YWx1ZXMKICAgICAgICB1aW50OCB0b2tlbkRlY2ltYWxzID0gdG9rZW4uZGVjaW1hbHMoKTsKICAgICAgICB1aW50OCBjb25uZWN0b3JUb2tlbkRlY2ltYWxzID0gX2Nvbm5lY3RvclRva2VuLmRlY2ltYWxzKCk7CiAgICAgICAgaWYgKHRva2VuRGVjaW1hbHMgIT0gY29ubmVjdG9yVG9rZW5EZWNpbWFscykgewogICAgICAgICAgICBpZiAodG9rZW5EZWNpbWFscyA+IGNvbm5lY3RvclRva2VuRGVjaW1hbHMpCiAgICAgICAgICAgICAgICBjb25uZWN0b3JBbW91bnQgPSBzYWZlTXVsKGNvbm5lY3RvckFtb3VudCwgMTAgKiogdWludDI1Nih0b2tlbkRlY2ltYWxzIC0gY29ubmVjdG9yVG9rZW5EZWNpbWFscykpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB0b2tlbkFtb3VudCA9IHNhZmVNdWwodG9rZW5BbW91bnQsIDEwICoqIHVpbnQyNTYoY29ubmVjdG9yVG9rZW5EZWNpbWFscyAtIHRva2VuRGVjaW1hbHMpKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc1B1cmNoYXNlKQogICAgICAgICAgICBDb252ZXJzaW9uKF9jb25uZWN0b3JUb2tlbiwgdG9rZW4sIG1zZy5zZW5kZXIsIF9hbW91bnQsIF9yZXR1cm5BbW91bnQsIGNvbm5lY3RvckFtb3VudCwgdG9rZW5BbW91bnQpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgQ29udmVyc2lvbih0b2tlbiwgX2Nvbm5lY3RvclRva2VuLCBtc2cuc2VuZGVyLCBfYW1vdW50LCBfcmV0dXJuQW1vdW50LCB0b2tlbkFtb3VudCwgY29ubmVjdG9yQW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGZhbGxiYWNrLCBidXlzIHRoZSBzbWFydCB0b2tlbiB3aXRoIEVUSAogICAgICAgIG5vdGUgdGhhdCB0aGUgcHVyY2hhc2Ugd2lsbCB1c2UgdGhlIHByaWNlIGF0IHRoZSB0aW1lIG9mIHRoZSBwdXJjaGFzZQogICAgKi8KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgcXVpY2tDb252ZXJ0KHF1aWNrQnV5UGF0aCwgbXNnLnZhbHVlLCAxKTsKICAgIH0KfQ=='.
	

]
