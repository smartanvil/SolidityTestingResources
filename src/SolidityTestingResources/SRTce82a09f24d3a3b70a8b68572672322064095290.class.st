Class {
	#name : #SRTce82a09f24d3a3b70a8b68572672322064095290,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTce82a09f24d3a3b70a8b68572672322064095290 >> base64 [
	^ ''.
	

]
