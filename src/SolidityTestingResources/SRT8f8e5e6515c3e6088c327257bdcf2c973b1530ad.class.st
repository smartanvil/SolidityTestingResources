Class {
	#name : #SRT8f8e5e6515c3e6088c327257bdcf2c973b1530ad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8f8e5e6515c3e6088c327257bdcf2c973b1530ad >> base64 [
	^ ''.
	

]
