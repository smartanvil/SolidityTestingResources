Class {
	#name : #SRTf6962cfe3b9618374097d51bc6691efb3974d06f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf6962cfe3b9618374097d51bc6691efb3974d06f >> base64 [
	^ ''.
	

]
