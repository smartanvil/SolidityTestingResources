Class {
	#name : #SRTa1c9b3d6bd4bc341d904a25d517d31e109c2f2c7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1c9b3d6bd4bc341d904a25d517d31e109c2f2c7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE3OwoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCgogICAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBwdXJlIGludGVybmFsIHJldHVybnModWludCkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSAmJiBjID49IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMCB7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnModWludCk7CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcHVibGljIHJldHVybnMoYm9vbCBvayk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKfQoKCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSAKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCiAgICBmdW5jdGlvbiBraWxsKCkgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgCiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKQogICAgICAgICAgICBfOwogICAgfQp9Cgpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICAgIGJvb2wgcHVibGljIHN0b3BwZWQ7CgogICAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgICAgICBpZiAoc3RvcHBlZCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5SW5FbWVyZ2VuY3kgewogICAgICAgIGlmICghc3RvcHBlZCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDYWxsZWQgYnkgdGhlIG93bmVyIGluIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAgZnVuY3Rpb24gZW1lcmdlbmN5U3RvcCgpIGV4dGVybmFsIG9ubHlPd25lcigpIHsKICAgICAgICBzdG9wcGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBDYWxsZWQgYnkgdGhlIG93bmVyIHRvIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICBmdW5jdGlvbiByZWxlYXNlKCkgZXh0ZXJuYWwgb25seU93bmVyKCkgb25seUluRW1lcmdlbmN5IHsKICAgICAgICBzdG9wcGVkID0gZmFsc2U7CiAgICB9Cn0KCgoKCi8vIENyb3dkc2FsZSBTbWFydCBDb250cmFjdAovLyBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvbGxlY3RzIEVUSCBhbmQgaW4gcmV0dXJuIHNlbmRzIHRva2VucyB0byBjb250cmlidXRvcnMKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIFBhdXNhYmxlIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICBzdHJ1Y3QgQmFja2VyIHsKICAgICAgICB1aW50IHdlaVJlY2VpdmVkOyAvLyBhbW91bnQgb2YgRVRIIGNvbnRyaWJ1dGVkCiAgICAgICAgdWludCB0b2tlbnNTZW50OyAvLyBhbW91bnQgb2YgdG9rZW5zICBzZW50ICAKICAgICAgICBib29sIHJlZnVuZGVkOyAvLyB0cnVlIGlmIHVzZXIgaGFzIGJlZW4gcmVmdW5kZWQgICAgICAgCiAgICB9CgogICAgVG9rZW4gcHVibGljIHRva2VuOyAvLyBUb2tlbiBjb250cmFjdCByZWZlcmVuY2UgICAKICAgIGFkZHJlc3MgcHVibGljIG11bHRpc2lnOyAvLyBNdWx0aXNpZyBjb250cmFjdCB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgRVRIICAgIAogICAgYWRkcmVzcyBwdWJsaWMgdGVhbTsgLy8gQWRkcmVzcyBhdCB3aGljaCB0aGUgdGVhbSB0b2tlbnMgd2lsbCBiZSBzZW50ICAgICAgICAKICAgIHVpbnQgcHVibGljIGV0aFJlY2VpdmVkUHJlc2FsZTsgLy8gTnVtYmVyIG9mIEVUSCByZWNlaXZlZCBpbiBwcmVzYWxlCiAgICB1aW50IHB1YmxpYyBldGhSZWNlaXZlZE1haW47IC8vIE51bWJlciBvZiBFVEggcmVjZWl2ZWQgaW4gcHVibGljIHNhbGUKICAgIHVpbnQgcHVibGljIHRvdGFsVG9rZW5zU2VudDsgLy8gTnVtYmVyIG9mIHRva2VucyBzZW50IHRvIEVUSCBjb250cmlidXRvcnMKICAgIHVpbnQgcHVibGljIHN0YXJ0QmxvY2s7IC8vIENyb3dkc2FsZSBzdGFydCBibG9jawogICAgdWludCBwdWJsaWMgZW5kQmxvY2s7IC8vIENyb3dkc2FsZSBlbmQgYmxvY2sKICAgIHVpbnQgcHVibGljIG1heENhcDsgLy8gTWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIHNlbGwKICAgIHVpbnQgcHVibGljIG1pbkNhcDsgLy8gTWluaW11bSBudW1iZXIgb2YgRVRIIHRvIHJhaXNlCiAgICB1aW50IHB1YmxpYyBtaW5JbnZlc3RFVEg7IC8vIE1pbmltdW0gYW1vdW50IHRvIGludmVzdCAgIAogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlQ2xvc2VkOyAvLyBJcyBjcm93ZHNhbGUgc3RpbGwgaW4gcHJvZ3Jlc3MKICAgIFN0ZXAgcHVibGljIGN1cnJlbnRTdGVwOyAgLy8gdG8gYWxsb3cgZm9yIGNvbnRyb2xlZCBzdGVwcyBvZiB0aGUgY2FtcGFpZ24gCiAgICB1aW50IHB1YmxpYyByZWZ1bmRDb3VudDsgIC8vIG51bWJlciBvZiByZWZ1bmRzCiAgICB1aW50IHB1YmxpYyB0b3RhbFJlZnVuZGVkOyAvLyB0b3RhbCBhbW91bnQgb2YgcmVmdW5kcyAgICAKICAgIHVpbnQgcHVibGljIHRva2VuUHJpY2VXZWk7ICAvLyBwcmljZSBvZiB0b2tlbiBpbiB3ZWkKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gQmFja2VyKSBwdWJsaWMgYmFja2VyczsgLy9iYWNrZXIgbGlzdAogICAgYWRkcmVzc1tdIHB1YmxpYyBiYWNrZXJzSW5kZXg7IC8vIHRvIGJlIGFibGUgdG8gaXRhcmF0ZSB0aHJvdWdoIGJhY2tlcnMgZm9yIHZlcmlmaWNhdGlvbi4gIAoKCiAgICAvLyBAbnRpY2Ugb3Zld3JpdGUgdG8gZW5zdXJlIHRoYXQgaWYgYW55IG1vbmV5IGFyZSBsZWZ0LCB0aGV5IGdvIAogICAgLy8gdG8gbXVsdGlzaWcgd2FsbGV0CiAgICBmdW5jdGlvbiBraWxsKCkgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgCiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChtdWx0aXNpZyk7CiAgICB9CgogICAgLy8gQG5vdGljZSB0byB2ZXJpZnkgaWYgYWN0aW9uIGlzIG5vdCBwZXJmb3JtZWQgb3V0IG9mIHRoZSBjYW1wYWluZyByYW5nZQogICAgbW9kaWZpZXIgcmVzcGVjdFRpbWVGcmFtZSgpIHsKICAgICAgICBpZiAoKGJsb2NrLm51bWJlciA8IHN0YXJ0QmxvY2spIHx8IChibG9jay5udW1iZXIgPiBlbmRCbG9jaykpIAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBAbm90aWNlIHRvIHNldCBhbmQgZGV0ZXJtaW5lIHN0ZXBzIG9mIGNyb3dkc2FsZQogICAgZW51bSBTdGVwIHsKICAgICAgICBVbmtub3duLAogICAgICAgIEZ1bmRpbmdQcmVTYWxlLCAgICAgLy8gcHJlc2FsZSBtb2RlCiAgICAgICAgRnVuZGluZ1B1YmxpY1NhbGUsICAvLyBwdWJsaWMgbW9kZQogICAgICAgIFJlZnVuZGluZyAgLy8gaW4gY2FzZSBjYW1wYWlnbiBmYWlsZWQgZHVyaW5nIHRoaXMgc3RlcCBjb250cmlidXRvcnMgd2lsbCBiZSBhYmxlIHRvIHJlY2VpdmUgcmVmdW5kcwogICAgfQoKCiAgICAvLyBFdmVudHMKICAgIGV2ZW50IFJlY2VpdmVkRVRIKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgdWludCB0b2tlbkFtb3VudCk7CiAgICBldmVudCBSZWZ1bmRFVEgoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50KTsKCgogICAgLy8gQ3Jvd2RzYWxlICB7Y29uc3RydWN0b3J9CiAgICAvLyBAbm90aWNlIGZpcmVkIHdoZW4gY29udHJhY3QgaXMgY3JhdGVkLiBJbml0aWxpemVzIGFsbCBjb25zdG5hdCBhbmQgaW5pdGlhbCB2YWx1ZXMuCiAgICBmdW5jdGlvbiBDcm93ZHNhbGUoKSBwdWJsaWMgewogICAgICAgIG11bHRpc2lnID0gMHhjMTU0NjQ0MjBhQzAyNTA3N0JhMjgwY0JEZTUxOTQ3RmMxMjU4M0Q2OyAvL1RPRE86IFJlcGxhY2UgYWRkcmVzcyB3aXRoIGNvcnJlY3Qgb25lCiAgICAgICAgdGVhbSA9IDB4YzE1NDY0NDIwYUMwMjUwNzdCYTI4MGNCRGU1MTk0N0ZjMTI1ODNENjsgLy9UT0RPOiBSZXBsYWNlIGFkZHJlc3Mgd2l0aCBjb3JyZWN0IG9uZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBtaW5JbnZlc3RFVEggPSAzIGV0aGVyOwogICAgICAgIHN0YXJ0QmxvY2sgPSAwOyAvLyBTaG91bGQgd2FpdCBmb3IgdGhlIGNhbGwgb2YgdGhlIGZ1bmN0aW9uIHN0YXJ0CiAgICAgICAgZW5kQmxvY2sgPSAwOyAvLyBTaG91bGQgd2FpdCBmb3IgdGhlIGNhbGwgb2YgdGhlIGZ1bmN0aW9uIHN0YXJ0ICAgICAgICAgICAgICAgICAgCiAgICAgICAgdG9rZW5QcmljZVdlaSA9IDEgZXRoZXIvMjAwMDsKICAgICAgICBtYXhDYXAgPSAzMDYwMDAwMGUxODsgICAgICAgICAKICAgICAgICBtaW5DYXAgPSAxMDAwIGV0aGVyOyAgICAgICAgCiAgICAgICAgc2V0U3RlcChTdGVwLkZ1bmRpbmdQcmVTYWxlKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIHRvIHBvcHVsYXRlIHdlYnNpdGUgd2l0aCBzdGF0dXMgb2YgdGhlIHNhbGUgCiAgICBmdW5jdGlvbiByZXR1cm5XZWJzaXRlRGF0YSgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyh1aW50LCB1aW50LCB1aW50LCB1aW50LCB1aW50LCB1aW50LCB1aW50LCB1aW50LCBTdGVwLCBib29sLCBib29sKSB7ICAgICAgICAgICAgCiAgICAKICAgICAgICByZXR1cm4gKHN0YXJ0QmxvY2ssIGVuZEJsb2NrLCBiYWNrZXJzSW5kZXgubGVuZ3RoLCBldGhSZWNlaXZlZFByZXNhbGUuYWRkKGV0aFJlY2VpdmVkTWFpbiksIG1heENhcCwgbWluQ2FwLCB0b3RhbFRva2Vuc1NlbnQsICB0b2tlblByaWNlV2VpLCBjdXJyZW50U3RlcCwgc3RvcHBlZCwgY3Jvd2RzYWxlQ2xvc2VkKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIGluIGNhc2UgcmVmdW5kcyBhcmUgbmVlZGVkLCBtb25leSBjYW4gYmUgcmV0dXJuZWQgdG8gdGhlIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBmdW5kQ29udHJhY3QoKSBleHRlcm5hbCBwYXlhYmxlIG9ubHlPd25lcigpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLy8gQG5vdGljZSBTcGVjaWZ5IGFkZHJlc3Mgb2YgdG9rZW4gY29udHJhY3QKICAgIC8vIEBwYXJhbSBfdG9rZW5BZGRyZXNzIHthZGRyZXNzfSBhZGRyZXNzIG9mIHRva2VuIGNvbnRyYWN0CiAgICAvLyBAcmV0dXJuIHJlcyB7Ym9vbH0KICAgIGZ1bmN0aW9uIHVwZGF0ZVRva2VuQWRkcmVzcyhUb2tlbiBfdG9rZW5BZGRyZXNzKSBleHRlcm5hbCBvbmx5T3duZXIoKSByZXR1cm5zKGJvb2wgcmVzKSB7CiAgICAgICAgdG9rZW4gPSBfdG9rZW5BZGRyZXNzOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvLyBAbm90aWNlIHNldCB0aGUgc3RlcCBvZiB0aGUgY2FtcGFpZ24gCiAgICAvLyBAcGFyYW0gX3N0ZXAge1N0ZXB9CiAgICBmdW5jdGlvbiBzZXRTdGVwKFN0ZXAgX3N0ZXApIHB1YmxpYyBvbmx5T3duZXIoKSB7CiAgICAgICAgY3VycmVudFN0ZXAgPSBfc3RlcDsKICAgICAgICAKICAgICAgICBpZiAoY3VycmVudFN0ZXAgPT0gU3RlcC5GdW5kaW5nUHJlU2FsZSkgeyAgLy8gZm9yIHByZXNhbGUgCiAgICAgICAgICAgIHRva2VuUHJpY2VXZWkgPSA1MDAwMDAwMDAwMDAwMDA7ICAgICAKICAgICAgICAgICAgbWluSW52ZXN0RVRIID0gMyBldGhlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIH1lbHNlIGlmIChjdXJyZW50U3RlcCA9PSBTdGVwLkZ1bmRpbmdQdWJsaWNTYWxlKSB7IC8vIGZvciBwdWJsaWMgc2FsZQogICAgICAgICAgICB0b2tlblByaWNlV2VpID0gODMzMzMzMDAwMDAwMDAwOyAgIAogICAgICAgICAgICBtaW5JbnZlc3RFVEggPSAwOyAgICAgICAgICAgICAgIAogICAgICAgIH0gICAgICAgICAgICAKICAgIH0KCgogICAgLy8gQG5vdGljZSByZXR1cm4gbnVtYmVyIG9mIGNvbnRyaWJ1dG9ycwogICAgLy8gQHJldHVybiAge3VpbnR9IG51bWJlciBvZiBjb250cmlidXRvcnMgICAKICAgIGZ1bmN0aW9uIG51bWJlck9mQmFja2VycygpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBiYWNrZXJzSW5kZXgubGVuZ3RoOwogICAgfQoKCiAgICAvLyB7ZmFsbGJhY2sgZnVuY3Rpb259CiAgICAvLyBAbm90aWNlIEl0IHdpbGwgY2FsbCBpbnRlcm5hbCBmdW5jdGlvbiB3aGljaCBoYW5kZWxzIGFsbG9jYXRpb24gb2YgRXRoZXIgYW5kIGNhbGN1bGF0ZXMgdG9rZW5zLgogICAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7ICAgICAgICAgICAKICAgICAgICBjb250cmlidXRlKG1zZy5zZW5kZXIpOwogICAgfQoKCiAgICAvLyBAbm90aWNlIEl0IHdpbGwgYmUgY2FsbGVkIGJ5IG93bmVyIHRvIHN0YXJ0IHRoZSBzYWxlICAgIAogICAgZnVuY3Rpb24gc3RhcnQodWludCBfYmxvY2spIGV4dGVybmFsIG9ubHlPd25lcigpIHsgICAKCiAgICAgICAgcmVxdWlyZShfYmxvY2sgPCAyMTYwMDApOyAgLy8gMi41KjYwKjI0KjYwIGRheXMgPSAyMTYwMDAgICAgIAogICAgICAgIHN0YXJ0QmxvY2sgPSBibG9jay5udW1iZXI7CiAgICAgICAgZW5kQmxvY2sgPSBzdGFydEJsb2NrLmFkZChfYmxvY2spOyAKICAgIH0KCiAgICAvLyBAbm90aWNlIER1ZSB0byBjaGFuZ2luZyBhdmVyYWdlIG9mIGJsb2NrIHRpbWUKICAgIC8vIHRoaXMgZnVuY3Rpb24gd2lsbCBhbGxvdyBvbiBhZGp1c3RpbmcgZHVyYXRpb24gb2YgY2FtcGFpZ24gY2xvc2VyIHRvIHRoZSBlbmQgCiAgICBmdW5jdGlvbiBhZGp1c3REdXJhdGlvbih1aW50IF9ibG9jaykgZXh0ZXJuYWwgb25seU93bmVyKCkgewoKICAgICAgICByZXF1aXJlKF9ibG9jayA8IDI4ODAwMCk7ICAvLyAyLjUqNjAqMjQqODAgZGF5cyA9IDI4ODAwMCAgICAgCiAgICAgICAgcmVxdWlyZShfYmxvY2sgPiBibG9jay5udW1iZXIuc3ViKHN0YXJ0QmxvY2spKTsgLy8gZW5zdXJlIHRoYXQgZW5kQmxvY2sgaXMgbm90IHNldCBpbiB0aGUgcGFzdAogICAgICAgIGVuZEJsb2NrID0gc3RhcnRCbG9jay5hZGQoX2Jsb2NrKTsgCiAgICB9CgogICAgLy8gQG5vdGljZSBJdCB3aWxsIGJlIGNhbGxlZCBieSBmYWxsYmFjayBmdW5jdGlvbiB3aGVuZXZlciBldGhlciBpcyBzZW50IHRvIGl0CiAgICAvLyBAcGFyYW0gIF9iYWNrZXIge2FkZHJlc3N9IGFkZHJlc3MgY29udHJpYnV0b3IKICAgIC8vIEByZXR1cm4gcmVzIHtib29sfSB0cnVlIGlmIHRyYW5zYWN0aW9uIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBjb250cmlidXRlKGFkZHJlc3MgX2JhY2tlcikgaW50ZXJuYWwgc3RvcEluRW1lcmdlbmN5IHJlc3BlY3RUaW1lRnJhbWUgcmV0dXJucyhib29sIHJlcykgewogICAgCiAgICAgICAgcmVxdWlyZShjdXJyZW50U3RlcCA9PSBTdGVwLkZ1bmRpbmdQcmVTYWxlIHx8IGN1cnJlbnRTdGVwID09IFN0ZXAuRnVuZGluZ1B1YmxpY1NhbGUpOyAvLyBlbnN1cmUgdGhhdCB0aGlzIGlzIGNvcnJlY3Qgc3RlcCAgCiAgICAgICAgcmVxdWlyZSAobXNnLnZhbHVlID49IG1pbkludmVzdEVUSCk7ICAgLy8gZW5zdXJlIHRoYXQgbWluIGNvbnRyaWJ1dGlvbnMgYW1vdW50IGlzIG1ldAogICAgICAgICAgCiAgICAgICAgdWludCB0b2tlbnNUb1NlbmQgPSBtc2cudmFsdWUubXVsKDFlMTgpIC8gdG9rZW5QcmljZVdlaTsgLy8gY2FsY3VsYXRlIGFtb3VudCBvZiB0b2tlbnMgdG8gc2VuZCAgKGFkZCAxOCAwcyBmaXJzdCkgICAgIAogICAgICAgIHJlcXVpcmUodG90YWxUb2tlbnNTZW50LmFkZCh0b2tlbnNUb1NlbmQpIDwgbWF4Q2FwKTsgLy8gRW5zdXJlIHRoYXQgbWF4IGNhcCBoYXNuJ3QgYmVlbiByZWFjaGVkICAKICAgICAgICAgICAgCiAgICAgICAgQmFja2VyIHN0b3JhZ2UgYmFja2VyID0gYmFja2Vyc1tfYmFja2VyXTsKICAgIAogICAgICAgICBpZiAoYmFja2VyLndlaVJlY2VpdmVkID09IDApICAgICAgCiAgICAgICAgICAgIGJhY2tlcnNJbmRleC5wdXNoKF9iYWNrZXIpOwogICAgCiAgICAgICAgaWYgKCF0b2tlbi50cmFuc2ZlcihfYmFja2VyLCB0b2tlbnNUb1NlbmQpKSAKICAgICAgICAgICAgcmV2ZXJ0KCk7IC8vIFRyYW5zZmVyIHRva2VucwogICAgICAgIGJhY2tlci50b2tlbnNTZW50ID0gYmFja2VyLnRva2Vuc1NlbnQuYWRkKHRva2Vuc1RvU2VuZCk7IC8vIHNhdmUgY29udHJpYnV0b3JzIHRva2VucyB0byBiZSBzZW50CiAgICAgICAgYmFja2VyLndlaVJlY2VpdmVkID0gYmFja2VyLndlaVJlY2VpdmVkLmFkZChtc2cudmFsdWUpOyAgLy8gc2F2ZSBob3cgbXVjaCB3YXMgdGhlIGNvbnRyaWJ1dGlvbgogICAgICAgIHRvdGFsVG9rZW5zU2VudCA9IHRvdGFsVG9rZW5zU2VudC5hZGQodG9rZW5zVG9TZW5kKTsgICAgIC8vIHVwZGF0ZSB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBzZW50CiAgICAKICAgICAgICBpZiAoU3RlcC5GdW5kaW5nUHVibGljU2FsZSA9PSBjdXJyZW50U3RlcCkgIC8vIFVwZGF0ZSB0aGUgdG90YWwgRXRoZXIgcmVjaXZlZAogICAgICAgICAgICAgICAgZXRoUmVjZWl2ZWRNYWluID0gZXRoUmVjZWl2ZWRNYWluLmFkZChtc2cudmFsdWUpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGV0aFJlY2VpdmVkUHJlc2FsZSA9IGV0aFJlY2VpdmVkUHJlc2FsZS5hZGQobXNnLnZhbHVlKTsgICAgICAgIAogICAgCiAgICAgICAgbXVsdGlzaWcudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsgICAvLyB0cmFuc2ZlciBmdW5kcyB0byBtdWx0aXNpZ25hdHVyZSB3YWxsZXQgICAgICAgICAgICAgCiAgICAKICAgICAgICBSZWNlaXZlZEVUSChfYmFja2VyLCBtc2cudmFsdWUsIHRva2Vuc1RvU2VuZCk7IC8vIFJlZ2lzdGVyIGV2ZW50CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogIAoKICAgIC8vIEBub3RpY2UgVGhpcyBmdW5jdGlvbiB3aWxsIGZpbmFsaXplIHRoZSBzYWxlLgogICAgLy8gSXQgd2lsbCBvbmx5IGV4ZWN1dGUgaWYgcHJlZGV0ZXJtaW5lZCBzYWxlIHRpbWUgcGFzc2VkIG9yIGFsbCB0b2tlbnMgYXJlIHNvbGQuCiAgICAvLyBpdCB3aWxsIGZhaWwgaWYgbWluaW11bSBjYXAgaXMgbm90IHJlYWNoZWQKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgZXh0ZXJuYWwgb25seU93bmVyKCkgewoKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVDbG9zZWQpOyAgICAgICAgCiAgICAgICAgLy8gcHVyY2hhc2luZyBwcmVjaXNlIG51bWJlciBvZiB0b2tlbnMgbWlnaHQgYmUgaW1wcmFjdGljYWwsIHRodXMgc3VidHJhY3QgMTAwIHRva2VucyBzbyBmaW5hbGl6aXRpb24gaXMgcG9zc2libGUKICAgICAgICAvLyBuZWFyIHRoZSBlbmQgCiAgICAgICAgcmVxdWlyZSAoYmxvY2subnVtYmVyID49IGVuZEJsb2NrIHx8IHRvdGFsVG9rZW5zU2VudCA+PSBtYXhDYXAuc3ViKDEwMCkpOyAKICAgICAgICAKICAgICAgICB1aW50IHRvdGFsRXRoZXJSZWNlaXZlZCA9IGV0aFJlY2VpdmVkUHJlc2FsZS5hZGQoZXRoUmVjZWl2ZWRNYWluKTsKICAgICAgICByZXF1aXJlKHRvdGFsRXRoZXJSZWNlaXZlZCA+PSBtaW5DYXApOyAgLy8gZW5zdXJlIHRoYXQgbWluaW11bSB3YXMgcmVhY2hlZAogICAgICAgIAogICAgICAgIGlmICghdG9rZW4udHJhbnNmZXIodGVhbSwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKSkgLy8gdHJhbnNmZXIgYWxsIHJlbWFpbmcgdG9rZW5zIHRvIHRlYW0gYWRkcmVzcwogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIHRva2VuLnVubG9jaygpOwogICAgICAgIAogICAgICAgIGNyb3dkc2FsZUNsb3NlZCA9IHRydWU7ICAgICAgICAKICAgIH0KCgogICAgLy8gQG5vdGljZSBGYWlsc2FmZSBkcmFpbgogICAgZnVuY3Rpb24gZHJhaW4oKSBleHRlcm5hbCBvbmx5T3duZXIoKSB7CiAgICAgICAgbXVsdGlzaWcudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsgICAgICAgICAgICAgICAKICAgIH0KCgoKICAgIC8vIEBub3RpY2UgRmFpbHNhZmUgdG9rZW4gdHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRva2VuRHJpYW4oKSBleHRlcm5hbCBvbmx5T3duZXIoKSB7CiAgICBpZiAoYmxvY2subnVtYmVyID4gZW5kQmxvY2spIHsKICAgICAgICBpZiAoIXRva2VuLnRyYW5zZmVyKHRlYW0sIHRva2VuLmJhbGFuY2VPZih0aGlzKSkpIAogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQogICAgCgogICAgLy8gQG5vdGljZSBpdCB3aWxsIGFsbG93IGNvbnRyaWJ1dG9ycyB0byBnZXQgcmVmdW5kIGluIGNhc2UgY2FtcGFpZ24gZmFpbGVkCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbCBzdG9wSW5FbWVyZ2VuY3kgcmV0dXJucyAoYm9vbCkgewoKICAgICAgICByZXF1aXJlKGN1cnJlbnRTdGVwID09IFN0ZXAuUmVmdW5kaW5nKTsgCiAgICAgICAgCiAgICAgICAgdWludCB0b3RhbEV0aGVyUmVjZWl2ZWQgPSBldGhSZWNlaXZlZFByZXNhbGUuYWRkKGV0aFJlY2VpdmVkTWFpbik7CgogICAgICAgIHJlcXVpcmUodG90YWxFdGhlclJlY2VpdmVkIDwgbWluQ2FwKTsgIC8vIGVuc3VyZSB0aGF0IGNhbXBhaW5nIGZhaWxlZAogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID4gMCk7ICAvLyBjb250cmFjdCB3aWxsIGhvbGQgMCBldGhlciBhdCB0aGUgZW5kIG9mIGNhbXBhaWduLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udHJhY3QgbmVlZHMgdG8gYmUgZnVuZGVkIHRocm91Z2ggZnVuZENvbnRyYWN0KCkgCgogICAgICAgIEJhY2tlciBzdG9yYWdlIGJhY2tlciA9IGJhY2tlcnNbbXNnLnNlbmRlcl07CgogICAgICAgIHJlcXVpcmUgKGJhY2tlci53ZWlSZWNlaXZlZCA+IDApOyAgLy8gZXNudXJlIHRoYXQgdXNlciBoYXMgc2VudCBjb250cmlidXRpb24KICAgICAgICByZXF1aXJlKCFiYWNrZXIucmVmdW5kZWQpOyAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHVzZXIgaGFzbid0IGJlZW4gcmVmdW5kZWQgeWV0CgogICAgICAgIGlmICghdG9rZW4uYnVybihtc2cuc2VuZGVyLCBiYWNrZXIudG9rZW5zU2VudCkpIC8vIGJ1cm4gdG9rZW5zCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIGJhY2tlci5yZWZ1bmRlZCA9IHRydWU7ICAvLyBzYXZlIHJlZnVuZCBzdGF0dXMgdG8gdHJ1ZQogICAgCiAgICAgICAgcmVmdW5kQ291bnQgKys7CiAgICAgICAgdG90YWxSZWZ1bmRlZCA9IHRvdGFsUmVmdW5kZWQuYWRkKGJhY2tlci53ZWlSZWNlaXZlZCk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihiYWNrZXIud2VpUmVjZWl2ZWQpOyAgLy8gc2VuZCBiYWNrIHRoZSBjb250cmlidXRpb24gCiAgICAgICAgUmVmdW5kRVRIKG1zZy5zZW5kZXIsIGJhY2tlci53ZWlSZWNlaXZlZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8vIFRoZSB0b2tlbgpjb250cmFjdCBUb2tlbiBpcyBFUkMyMCwgIE93bmFibGUgewoKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogICAgLy8gUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzOyAvLyBIb3cgbWFueSBkZWNpbWFscyB0byBzaG93LgogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gInYwLjEiOyAgICAgICAKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgYm9vbCBwdWJsaWMgbG9ja2VkOwogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RTYWxlQWRkcmVzczsKICAgIAoKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwoKICAgIC8vIHRva2VucyBhcmUgbG9ja2VkIGR1cmluZyB0aGUgSUNPLiBBbGxvdyB0cmFuc2ZlciBvZiB0b2tlbnMgYWZ0ZXIgSUNPLiAKICAgIG1vZGlmaWVyIG9ubHlVbmxvY2tlZCgpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjcm93ZFNhbGVBZGRyZXNzICYmIGxvY2tlZCkgCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vIGFsbG93IGJ1cm5pbmcgb2YgdG9rZW5zIG9ubHkgYnkgYXV0aG9yaXplZCB1c2VycyAKICAgIG1vZGlmaWVyIG9ubHlBdXRob3JpemVkKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyICYmIG1zZy5zZW5kZXIgIT0gY3Jvd2RTYWxlQWRkcmVzcyApIAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBUaGUgVG9rZW4gCiAgICBmdW5jdGlvbiBUb2tlbihhZGRyZXNzIF9jcm93ZFNhbGVBZGRyZXNzKSBwdWJsaWMgewogICAgICAgIAogICAgICAgIGxvY2tlZCA9IHRydWU7ICAvLyBMb2NrIHRoZSBDcm93ZHNhbGUgZnVuY3Rpb24gZHVyaW5nIHRoZSBjcm93ZHNhbGUKICAgICAgICB0b3RhbFN1cHBseSA9IDYwMDAwMDAwZTE4OyAKICAgICAgICBuYW1lID0gIlJlcXVpdGl4IjsgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gIlJRWCI7IC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSAxODsgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgY3Jvd2RTYWxlQWRkcmVzcyA9IF9jcm93ZFNhbGVBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBiYWxhbmNlc1tjcm93ZFNhbGVBZGRyZXNzXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIHVubG9jaygpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgbG9ja2VkID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gbG9jaygpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKICAgIH0KICAgIAoKICAgIGZ1bmN0aW9uIGJ1cm4oIGFkZHJlc3MgX21lbWJlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCByZXR1cm5zKGJvb2wpIHsKICAgICAgICBiYWxhbmNlc1tfbWVtYmVyXSA9IGJhbGFuY2VzW19tZW1iZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX21lbWJlciwgMHgwLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIG9ubHlVbmxvY2tlZCByZXR1cm5zKGJvb2wpIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5VW5sb2NrZWQgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlKTsgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIHJlcXVpcmUgKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7IC8vIENoZWNrIGlmIGFsbG93ZWQgaXMgZ3JlYXRlciBvciBlcXVhbCAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKCiAgICAvKioKICAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAqCiAgICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8qKgogICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAgKi8KICAgIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICAgICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgICAgIH0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQ=='.
	

]
