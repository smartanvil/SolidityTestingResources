Class {
	#name : #SRTa15bfc50d59d01e3da0e634ef31bc8f1f1bef58a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa15bfc50d59d01e3da0e634ef31bc8f1f1bef58a >> base64 [
	^ ''.
	

]
