Class {
	#name : #SRTc212aad6e325fb55a96757ff28a201ad128fa795,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc212aad6e325fb55a96757ff28a201ad128fa795 >> base64 [
	^ ''.
	

]
