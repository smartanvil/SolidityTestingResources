Class {
	#name : #SRTe464af04c151a345db70087eec4b604bddbeea08,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe464af04c151a345db70087eec4b604bddbeea08 >> base64 [
	^ ''.
	

]
