Class {
	#name : #SRTa46aaf1b1f69e78d67fcb6c343e1701f835292e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa46aaf1b1f69e78d67fcb6c343e1701f835292e4 >> base64 [
	^ ''.
	

]
