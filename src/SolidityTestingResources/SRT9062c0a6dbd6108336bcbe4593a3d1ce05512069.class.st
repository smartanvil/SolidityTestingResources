Class {
	#name : #SRT9062c0a6dbd6108336bcbe4593a3d1ce05512069,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9062c0a6dbd6108336bcbe4593a3d1ce05512069 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBBYnN0cmFjdEVOUyB7CiAgICBmdW5jdGlvbiBvd25lcihieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiByZXNvbHZlcihieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiB0dGwoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zKHVpbnQ2NCk7CiAgICBmdW5jdGlvbiBzZXRPd25lcihieXRlczMyIG5vZGUsIGFkZHJlc3Mgb3duZXIpOwogICAgZnVuY3Rpb24gc2V0U3Vibm9kZU93bmVyKGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiBsYWJlbCwgYWRkcmVzcyBvd25lcik7CiAgICBmdW5jdGlvbiBzZXRSZXNvbHZlcihieXRlczMyIG5vZGUsIGFkZHJlc3MgcmVzb2x2ZXIpOwogICAgZnVuY3Rpb24gc2V0VFRMKGJ5dGVzMzIgbm9kZSwgdWludDY0IHR0bCk7Cn0KCmNvbnRyYWN0IFJlc29sdmVyIHsKICAgIGZ1bmN0aW9uIHNldE5hbWUoYnl0ZXMzMiBub2RlLCBzdHJpbmcgbmFtZSkgcHVibGljOwp9CgovKioKICogQGRldiBQcm92aWRlcyBhIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYSByZXNvbHZlciBmb3IgcmV2ZXJzZSByZWNvcmRzLAogKiB3aGljaCBwZXJtaXRzIG9ubHkgdGhlIG93bmVyIHRvIHVwZGF0ZSBpdC4KICovCmNvbnRyYWN0IERlZmF1bHRSZXZlcnNlUmVzb2x2ZXIgaXMgUmVzb2x2ZXIgewogICAgLy8gbmFtZWhhc2goJ2FkZHIucmV2ZXJzZScpCiAgICBieXRlczMyIGNvbnN0YW50IEFERFJfUkVWRVJTRV9OT0RFID0gMHg5MWQxNzc3NzgxODg0ZDAzYTY3NTdhODAzOTk2ZTM4ZGUyYTQyOTY3ZmIzN2VlYWNhNzI3MjkyNzEwMjVhOWUyOwoKICAgIEFic3RyYWN0RU5TIHB1YmxpYyBlbnM7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PnN0cmluZykgcHVibGljIG5hbWU7CiAgICAKICAgIC8qKgogICAgICogQGRldiBDb25zdHJ1Y3RvcgogICAgICogQHBhcmFtIGVuc0FkZHIgVGhlIGFkZHJlc3Mgb2YgdGhlIEVOUyByZWdpc3RyeS4KICAgICAqLwogICAgZnVuY3Rpb24gRGVmYXVsdFJldmVyc2VSZXNvbHZlcihBYnN0cmFjdEVOUyBlbnNBZGRyKSB7CiAgICAgICAgZW5zID0gZW5zQWRkcjsKCiAgICAgICAgLy8gQXNzaWduIG93bmVyc2hpcCBvZiB0aGUgcmV2ZXJzZSByZWNvcmQgdG8gb3VyIGRlcGxveWVyCiAgICAgICAgdmFyIHJlZ2lzdHJhciA9IFJldmVyc2VSZWdpc3RyYXIoZW5zLm93bmVyKEFERFJfUkVWRVJTRV9OT0RFKSk7CiAgICAgICAgaWYoYWRkcmVzcyhyZWdpc3RyYXIpICE9IDApIHsKICAgICAgICAgICAgcmVnaXN0cmFyLmNsYWltKG1zZy5zZW5kZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgT25seSBwZXJtaXRzIGNhbGxzIGJ5IHRoZSByZXZlcnNlIHJlZ2lzdHJhci4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHBlcm1pc3Npb24gaXMgcmVxdWlyZWQgZm9yLgogICAgICovCiAgICBtb2RpZmllciBvd25lcl9vbmx5KGJ5dGVzMzIgbm9kZSkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBlbnMub3duZXIobm9kZSkpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFNldHMgdGhlIG5hbWUgZm9yIGEgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSBfbmFtZSBUaGUgbmFtZSB0byBzZXQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE5hbWUoYnl0ZXMzMiBub2RlLCBzdHJpbmcgX25hbWUpIHB1YmxpYyBvd25lcl9vbmx5KG5vZGUpIHsKICAgICAgICBuYW1lW25vZGVdID0gX25hbWU7CiAgICB9Cn0KCmNvbnRyYWN0IFJldmVyc2VSZWdpc3RyYXIgewogICAgLy8gbmFtZWhhc2goJ2FkZHIucmV2ZXJzZScpCiAgICBieXRlczMyIGNvbnN0YW50IEFERFJfUkVWRVJTRV9OT0RFID0gMHg5MWQxNzc3NzgxODg0ZDAzYTY3NTdhODAzOTk2ZTM4ZGUyYTQyOTY3ZmIzN2VlYWNhNzI3MjkyNzEwMjVhOWUyOwoKICAgIEFic3RyYWN0RU5TIHB1YmxpYyBlbnM7CiAgICBSZXNvbHZlciBwdWJsaWMgZGVmYXVsdFJlc29sdmVyOwoKICAgIC8qKgogICAgICogQGRldiBDb25zdHJ1Y3RvcgogICAgICogQHBhcmFtIGVuc0FkZHIgVGhlIGFkZHJlc3Mgb2YgdGhlIEVOUyByZWdpc3RyeS4KICAgICAqIEBwYXJhbSByZXNvbHZlckFkZHIgVGhlIGFkZHJlc3Mgb2YgdGhlIGRlZmF1bHQgcmV2ZXJzZSByZXNvbHZlci4KICAgICAqLwogICAgZnVuY3Rpb24gUmV2ZXJzZVJlZ2lzdHJhcihBYnN0cmFjdEVOUyBlbnNBZGRyLCBSZXNvbHZlciByZXNvbHZlckFkZHIpIHsKICAgICAgICBlbnMgPSBlbnNBZGRyOwogICAgICAgIGRlZmF1bHRSZXNvbHZlciA9IHJlc29sdmVyQWRkcjsKCiAgICAgICAgLy8gQXNzaWduIG93bmVyc2hpcCBvZiB0aGUgcmV2ZXJzZSByZWNvcmQgdG8gb3VyIGRlcGxveWVyCiAgICAgICAgdmFyIG9sZFJlZ2lzdHJhciA9IFJldmVyc2VSZWdpc3RyYXIoZW5zLm93bmVyKEFERFJfUkVWRVJTRV9OT0RFKSk7CiAgICAgICAgaWYoYWRkcmVzcyhvbGRSZWdpc3RyYXIpICE9IDApIHsKICAgICAgICAgICAgb2xkUmVnaXN0cmFyLmNsYWltKG1zZy5zZW5kZXIpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVycyBvd25lcnNoaXAgb2YgdGhlIHJldmVyc2UgRU5TIHJlY29yZCBhc3NvY2lhdGVkIHdpdGggdGhlCiAgICAgKiAgICAgIGNhbGxpbmcgYWNjb3VudC4KICAgICAqIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyB0byBzZXQgYXMgdGhlIG93bmVyIG9mIHRoZSByZXZlcnNlIHJlY29yZCBpbiBFTlMuCiAgICAgKiBAcmV0dXJuIFRoZSBFTlMgbm9kZSBoYXNoIG9mIHRoZSByZXZlcnNlIHJlY29yZC4KICAgICAqLwogICAgZnVuY3Rpb24gY2xhaW0oYWRkcmVzcyBvd25lcikgcmV0dXJucyAoYnl0ZXMzMiBub2RlKSB7CiAgICAgICAgcmV0dXJuIGNsYWltV2l0aFJlc29sdmVyKG93bmVyLCAwKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgcmV2ZXJzZSBFTlMgcmVjb3JkIGFzc29jaWF0ZWQgd2l0aCB0aGUKICAgICAqICAgICAgY2FsbGluZyBhY2NvdW50LgogICAgICogQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIHRvIHNldCBhcyB0aGUgb3duZXIgb2YgdGhlIHJldmVyc2UgcmVjb3JkIGluIEVOUy4KICAgICAqIEBwYXJhbSByZXNvbHZlciBUaGUgYWRkcmVzcyBvZiB0aGUgcmVzb2x2ZXIgdG8gc2V0OyAwIHRvIGxlYXZlIHVuY2hhbmdlZC4KICAgICAqIEByZXR1cm4gVGhlIEVOUyBub2RlIGhhc2ggb2YgdGhlIHJldmVyc2UgcmVjb3JkLgogICAgICovCiAgICBmdW5jdGlvbiBjbGFpbVdpdGhSZXNvbHZlcihhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHJlc29sdmVyKSByZXR1cm5zIChieXRlczMyIG5vZGUpIHsKICAgICAgICB2YXIgbGFiZWwgPSBzaGEzSGV4QWRkcmVzcyhtc2cuc2VuZGVyKTsKICAgICAgICBub2RlID0gc2hhMyhBRERSX1JFVkVSU0VfTk9ERSwgbGFiZWwpOwogICAgICAgIHZhciBjdXJyZW50T3duZXIgPSBlbnMub3duZXIobm9kZSk7CgogICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVzb2x2ZXIgaWYgcmVxdWlyZWQKICAgICAgICBpZihyZXNvbHZlciAhPSAwICYmIHJlc29sdmVyICE9IGVucy5yZXNvbHZlcihub2RlKSkgewogICAgICAgICAgICAvLyBUcmFuc2ZlciB0aGUgbmFtZSB0byB1cyBmaXJzdCBpZiBpdCdzIG5vdCBhbHJlYWR5CiAgICAgICAgICAgIGlmKGN1cnJlbnRPd25lciAhPSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgICAgICBlbnMuc2V0U3Vibm9kZU93bmVyKEFERFJfUkVWRVJTRV9OT0RFLCBsYWJlbCwgdGhpcyk7CiAgICAgICAgICAgICAgICBjdXJyZW50T3duZXIgPSBhZGRyZXNzKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVucy5zZXRSZXNvbHZlcihub2RlLCByZXNvbHZlcik7CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgdGhlIG93bmVyIGlmIHJlcXVpcmVkCiAgICAgICAgaWYoY3VycmVudE93bmVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIGVucy5zZXRTdWJub2RlT3duZXIoQUREUl9SRVZFUlNFX05PREUsIGxhYmVsLCBvd25lcik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbm9kZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0cyB0aGUgYG5hbWUoKWAgcmVjb3JkIGZvciB0aGUgcmV2ZXJzZSBFTlMgcmVjb3JkIGFzc29jaWF0ZWQgd2l0aAogICAgICogdGhlIGNhbGxpbmcgYWNjb3VudC4gRmlyc3QgdXBkYXRlcyB0aGUgcmVzb2x2ZXIgdG8gdGhlIGRlZmF1bHQgcmV2ZXJzZQogICAgICogcmVzb2x2ZXIgaWYgbmVjZXNzYXJ5LgogICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdG8gc2V0IGZvciB0aGlzIGFkZHJlc3MuCiAgICAgKiBAcmV0dXJuIFRoZSBFTlMgbm9kZSBoYXNoIG9mIHRoZSByZXZlcnNlIHJlY29yZC4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0TmFtZShzdHJpbmcgbmFtZSkgcmV0dXJucyAoYnl0ZXMzMiBub2RlKSB7CiAgICAgICAgbm9kZSA9IGNsYWltV2l0aFJlc29sdmVyKHRoaXMsIGRlZmF1bHRSZXNvbHZlcik7CiAgICAgICAgZGVmYXVsdFJlc29sdmVyLnNldE5hbWUobm9kZSwgbmFtZSk7CiAgICAgICAgcmV0dXJuIG5vZGU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIG5vZGUgaGFzaCBmb3IgYSBnaXZlbiBhY2NvdW50J3MgcmV2ZXJzZSByZWNvcmRzLgogICAgICogQHBhcmFtIGFkZHIgVGhlIGFkZHJlc3MgdG8gaGFzaAogICAgICogQHJldHVybiBUaGUgRU5TIG5vZGUgaGFzaC4KICAgICAqLwogICAgZnVuY3Rpb24gbm9kZShhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgcmV0KSB7CiAgICAgICAgcmV0dXJuIHNoYTMoQUREUl9SRVZFUlNFX05PREUsIHNoYTNIZXhBZGRyZXNzKGFkZHIpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQW4gb3B0aW1pc2VkIGZ1bmN0aW9uIHRvIGNvbXB1dGUgdGhlIHNoYTMgb2YgdGhlIGxvd2VyLWNhc2UKICAgICAqICAgICAgaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgYW4gRXRoZXJldW0gYWRkcmVzcy4KICAgICAqIEBwYXJhbSBhZGRyIFRoZSBhZGRyZXNzIHRvIGhhc2gKICAgICAqIEByZXR1cm4gVGhlIFNIQTMgaGFzaCBvZiB0aGUgbG93ZXItY2FzZSBoZXhhZGVjaW1hbCBlbmNvZGluZyBvZiB0aGUKICAgICAqICAgICAgICAgaW5wdXQgYWRkcmVzcy4KICAgICAqLwogICAgZnVuY3Rpb24gc2hhM0hleEFkZHJlc3MoYWRkcmVzcyBhZGRyKSBwcml2YXRlIHJldHVybnMgKGJ5dGVzMzIgcmV0KSB7CiAgICAgICAgYWRkcjsgcmV0OyAvLyBTdG9wIHdhcm5pbmcgdXMgYWJvdXQgdW51c2VkIHZhcmlhYmxlcwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IGxvb2t1cCA6PSAweDMwMzEzMjMzMzQzNTM2MzczODM5NjE2MjYzNjQ2NTY2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgICAgICAgICAgbGV0IGkgOj0gNDAKICAgICAgICBsb29wOgogICAgICAgICAgICBpIDo9IHN1YihpLCAxKQogICAgICAgICAgICBtc3RvcmU4KGksIGJ5dGUoYW5kKGFkZHIsIDB4ZiksIGxvb2t1cCkpCiAgICAgICAgICAgIGFkZHIgOj0gZGl2KGFkZHIsIDB4MTApCiAgICAgICAgICAgIGkgOj0gc3ViKGksIDEpCiAgICAgICAgICAgIG1zdG9yZTgoaSwgYnl0ZShhbmQoYWRkciwgMHhmKSwgbG9va3VwKSkKICAgICAgICAgICAgYWRkciA6PSBkaXYoYWRkciwgMHgxMCkKICAgICAgICAgICAganVtcGkobG9vcCwgaSkKICAgICAgICAgICAgcmV0IDo9IHNoYTMoMCwgNDApCiAgICAgICAgfQogICAgfQp9'.
	

]
