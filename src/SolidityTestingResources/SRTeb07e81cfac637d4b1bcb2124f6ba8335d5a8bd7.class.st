Class {
	#name : #SRTeb07e81cfac637d4b1bcb2124f6ba8335d5a8bd7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb07e81cfac637d4b1bcb2124f6ba8335d5a8bd7 >> base64 [
	^ ''.
	

]
