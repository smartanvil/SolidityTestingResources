Class {
	#name : #SRT7A46C781b593068d5e987b191e9c2f7413E22aEE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7A46C781b593068d5e987b191e9c2f7413E22aEE >> base64 [
	^ ''.
	

]
