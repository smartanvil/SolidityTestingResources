Class {
	#name : #SRT62cdfb9c8e0eb4318de999d5c9aa31ca25b56603,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT62cdfb9c8e0eb4318de999d5c9aa31ca25b56603 >> base64 [
	^ ''.
	

]
