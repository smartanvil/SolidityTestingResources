Class {
	#name : #SRTe9aec9c2a03d06243fffb907f6ce377e3c5c8936,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe9aec9c2a03d06243fffb907f6ce377e3c5c8936 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CiAgICAKICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAvLyBEZXZlbG9wZXIgTmVjaGVzb3YgQW5kcmV5OiBGYWNlYm9vay5jb20vTmVjaGVzb3YgICAKICAgLy8gRW5qb3kuIChjKSBQUkNSLm9yZyBJQ08gUGxhdGZvcm0gMjAxNy4gVGhlIFBSQ1IgTGljZW5jZS4KICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgCiAgIC8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlCiAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogIGNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKICAgICAgLy8gR2V0IHRoZSB0b3RhbCB0b2tlbiBzdXBwbHkKICAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsKICAgCiAgICAgIC8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCiAgICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgCiAgICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgdG8gYWRkcmVzcyBfdG8KICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAKICAgICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgCiAgICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgICAvLyB0aGlzIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGZvciBzb21lIERFWCBmdW5jdGlvbmFsaXR5CiAgICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgIAogICAgICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgd2hpY2ggX3NwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lcgogICAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKICAgCiAgICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAKICAgICAgLy8gVHJpZ2dlcmVkIHdoZW5ldmVyIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIGlzIGNhbGxlZC4KICAgICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CiAgfSAgCiAgIAogIGNvbnRyYWN0IENlbnRyYVRva2VuIGlzIEVSQzIwSW50ZXJmYWNlIHsKCiAgICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkNlbnRyYSI7CiAgICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJDZW50cmEgdG9rZW4iOwogICAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsgCiAgICAgICAgICAgCiAgICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1heFRva2VucyA9IDEwMDAwMDAwMCoxMCoqMTg7IAogICAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBvd25lclN1cHBseSA9IG1heFRva2VucyozMi8xMDA7CiAgICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gb3duZXJTdXBwbHk7ICAKCiAgICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuX3ByaWNlID0gMS80MDAqMTAqKjE4OyAKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgaWNvX3N0YXJ0ID0gMTUwMTg5MTIwMDsKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgaWNvX2ZpbmlzaCA9IDE1MDcyNDgwMDA7IAogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtaW5WYWx1ZVByZSA9IDEwMCoxMCoqMTg7IAogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBtaW5WYWx1ZSA9IDEqMTAqKjE4OyAKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgbWF4VmFsdWUgPSAzMDAwKjEwKioxODsgICAgICAgCgogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBjYXJkX2dvbGRfbWluYW1vdW50ICA9IDMwKjEwKioxODsKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgY2FyZF9nb2xkX2ZpcnN0ID0gMTAwMDsKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGNhcmRzX2dvbGRfY2hlY2s7IAogICAgICBhZGRyZXNzW10gcHVibGljIGNhcmRzX2dvbGQ7CgogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBjYXJkX2JsYWNrX21pbmFtb3VudCA9IDEwMCoxMCoqMTg7CiAgICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGNhcmRfYmxhY2tfZmlyc3QgPSA1MDA7CiAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgY2FyZHNfYmxhY2tfY2hlY2s7IAogICAgICBhZGRyZXNzW10gcHVibGljIGNhcmRzX2JsYWNrOwoKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgY2FyZF90aXRhbml1bV9taW5hbW91bnQgID0gNTAwKjEwKioxODsKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgY2FyZF90aXRhbml1bV9maXJzdCA9IDIwMDsKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGNhcmRzX3RpdGFuaXVtX2NoZWNrOyAKICAgICAgYWRkcmVzc1tdIHB1YmxpYyBjYXJkc190aXRhbml1bTsKCiAgICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGNhcmRfYmx1ZV9taW5hbW91bnQgID0gNS8xMCoxMCoqMTg7CiAgICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGNhcmRfYmx1ZV9maXJzdCA9IDEwMDAwMDAwMDsKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGNhcmRzX2JsdWVfY2hlY2s7IAogICAgICBhZGRyZXNzW10gcHVibGljIGNhcmRzX2JsdWU7CgogICAgICB1aW50IHB1YmxpYyBjb25zdGFudCBjYXJkX3N0YXJ0X21pbmFtb3VudCAgPSAxLzEwKjEwKioxODsKICAgICAgdWludCBwdWJsaWMgY29uc3RhbnQgY2FyZF9zdGFydF9maXJzdCA9IDEwMDAwMDAwMDsKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGNhcmRzX3N0YXJ0X2NoZWNrOyAKICAgICAgYWRkcmVzc1tdIHB1YmxpYyBjYXJkc19zdGFydDsKCiAgICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OyAgICAgIAogICAgICAKICAgICAgLy8gT3duZXIgb2YgdGhpcyBjb250cmFjdAogICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgCiAgICAgIC8vIEJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQKICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAKICAgICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgCiAgICAgIC8vIEZ1bmN0aW9ucyB3aXRoIHRoaXMgbW9kaWZpZXIgY2FuIG9ubHkgYmUgZXhlY3V0ZWQgYnkgdGhlIG93bmVyCiAgICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICB9CiAgICAgICAgICBfOwogICAgICB9ICAgICAgCiAgIAogICAgICAvLyBDb25zdHJ1Y3RvcgogICAgICBmdW5jdGlvbiBDZW50cmFUb2tlbigpIHsKICAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgIGJhbGFuY2VzW293bmVyXSA9IG93bmVyU3VwcGx5OwogICAgICB9CiAgICAgIAogICAgICAvL2RlZmF1bHQgZnVuY3Rpb24gZm9yIGJ1eSB0b2tlbnMgICAgICAKICAgICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsgICAgICAgIAogICAgICAgICAgdG9rZW5zX2J1eSgpOyAgICAgICAgCiAgICAgIH0KICAgICAgCiAgICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgIH0KCiAgICAgIC8vV2l0aGRyYXcgbW9uZXkgZnJvbSBjb250cmFjdCBiYWxhbmNlIHRvIG93bmVyCiAgICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgcmVzdWx0KSB7CiAgICAgICAgICBvd25lci5zZW5kKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAKICAgICAgLy8gV2hhdCBpcyB0aGUgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudD8KICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgICB9CiAgIAogICAgICAvLyBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgICAgaWYobm93IDwgaWNvX3N0YXJ0KSB0aHJvdzsKCiAgICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAKICAgICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgfQogICAKICAgICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgICAgLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgICAvLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQogICAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgICBpZihub3cgPCBpY29fc3RhcnQpIHRocm93OwoKICAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICB9CiAgICAgfQogIAogICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQogIAogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICAgfQogICAgIC8vZ2V0IHRvdGFsIGJsYWNrIGNhcmRzCiAgICBmdW5jdGlvbiBjYXJkc19ibGFja190b3RhbCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsgCiAgICAgIHJldHVybiBjYXJkc19ibGFjay5sZW5ndGg7CiAgICB9CiAgICAvL2dldCB0b3RhbCBnb2xkIGNhcmRzCiAgICBmdW5jdGlvbiBjYXJkc19nb2xkX3RvdGFsKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgeyAKICAgICAgcmV0dXJuIGNhcmRzX2dvbGQubGVuZ3RoOwogICAgfSAgICAKICAgIC8vZ2V0IHRvdGFsIHRpdGFuaXVtIGNhcmRzCiAgICBmdW5jdGlvbiBjYXJkc190aXRhbml1bV90b3RhbCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsgCiAgICAgIHJldHVybiBjYXJkc190aXRhbml1bS5sZW5ndGg7CiAgICB9CiAgICAvL2dldCB0b3RhbCBibHVlIGNhcmRzCiAgICBmdW5jdGlvbiBjYXJkc19ibHVlX3RvdGFsKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgeyAKICAgICAgcmV0dXJuIGNhcmRzX2JsdWUubGVuZ3RoOwogICAgfQoKICAgIC8vZ2V0IHRvdGFsIHN0YXJ0IGNhcmRzCiAgICBmdW5jdGlvbiBjYXJkc19zdGFydF90b3RhbCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsgCiAgICAgIHJldHVybiBjYXJkc19zdGFydC5sZW5ndGg7CiAgICB9CgogICAgICAvKioKICAgICAgKiBCdXkgdG9rZW5zIHByZS1zYWxlIGFuZCBzYWxlIAogICAgICAqLwogICAgICBmdW5jdGlvbiB0b2tlbnNfYnV5KCkgcGF5YWJsZSByZXR1cm5zIChib29sKSB7IAoKICAgICAgICB1aW50IHRub3cgPSBub3c7CiAgICAgICAgCiAgICAgICAgaWYodG5vdyA+IGljb19maW5pc2gpIHRocm93OyAgICAgICAgCiAgICAgICAgaWYoX3RvdGFsU3VwcGx5ID49IG1heFRva2VucykgdGhyb3c7CiAgICAgICAgaWYoIShtc2cudmFsdWUgPj0gdG9rZW5fcHJpY2UpKSB0aHJvdzsKICAgICAgICBpZighKG1zZy52YWx1ZSA+PSBtaW5WYWx1ZSkpIHRocm93OwogICAgICAgIGlmKG1zZy52YWx1ZSA+IG1heFZhbHVlKSB0aHJvdzsKCiAgICAgICAgdWludCB0b2tlbnNfYnV5ID0gbXNnLnZhbHVlL3Rva2VuX3ByaWNlKjEwKioxODsKCiAgICAgICAgaWYoISh0b2tlbnNfYnV5ID4gMCkpIHRocm93OyAgIAoKICAgICAgICBpZih0bm93IDwgaWNvX3N0YXJ0KXsKICAgICAgICAgIGlmKCEobXNnLnZhbHVlID49IG1pblZhbHVlUHJlKSkgdGhyb3c7CiAgICAgICAgICB0b2tlbnNfYnV5ID0gdG9rZW5zX2J1eSoxMjUvMTAwOwogICAgICAgIH0gCiAgICAgICAgaWYoKGljb19zdGFydCArIDg2NDAwKjAgPD0gdG5vdykmJih0bm93IDwgaWNvX3N0YXJ0ICsgODY0MDAqMikpewogICAgICAgICAgdG9rZW5zX2J1eSA9IHRva2Vuc19idXkqMTIwLzEwMDsKICAgICAgICB9IAogICAgICAgIGlmKChpY29fc3RhcnQgKyA4NjQwMCoyIDw9IHRub3cpJiYodG5vdyA8IGljb19zdGFydCArIDg2NDAwKjcpKXsKICAgICAgICAgIHRva2Vuc19idXkgPSB0b2tlbnNfYnV5KjExMC8xMDA7ICAgICAgICAKICAgICAgICB9IAogICAgICAgIGlmKChpY29fc3RhcnQgKyA4NjQwMCo3IDw9IHRub3cpJiYodG5vdyA8IGljb19zdGFydCArIDg2NDAwKjE0KSl7CiAgICAgICAgICB0b2tlbnNfYnV5ID0gdG9rZW5zX2J1eSoxMDUvMTAwOyAgICAgICAgCiAgICAgICAgfSAgICAgICAgIAoKICAgICAgICBpZihfdG90YWxTdXBwbHkuYWRkKHRva2Vuc19idXkpID4gbWF4VG9rZW5zKSB0aHJvdzsKICAgICAgICBfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHkuYWRkKHRva2Vuc19idXkpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHRva2Vuc19idXkpOyAKCiAgICAgICAgaWYoKG1zZy52YWx1ZSA+PSBjYXJkX2dvbGRfbWluYW1vdW50KQogICAgICAgICAgJiYobXNnLnZhbHVlIDwgY2FyZF9ibGFja19taW5hbW91bnQpCiAgICAgICAgICAmJihjYXJkc19nb2xkLmxlbmd0aCA8IGNhcmRfZ29sZF9maXJzdCkKICAgICAgICAgICYmKGNhcmRzX2dvbGRfY2hlY2tbbXNnLnNlbmRlcl0gIT0gMSkKICAgICAgICAgICkgewogICAgICAgICAgY2FyZHNfZ29sZC5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgY2FyZHNfZ29sZF9jaGVja1ttc2cuc2VuZGVyXSA9IDE7CiAgICAgICAgfSAgICAgICAKCiAgICAgICAgaWYoKG1zZy52YWx1ZSA+PSBjYXJkX2JsYWNrX21pbmFtb3VudCkKICAgICAgICAgICYmKG1zZy52YWx1ZSA8IGNhcmRfdGl0YW5pdW1fbWluYW1vdW50KQogICAgICAgICAgJiYoY2FyZHNfYmxhY2subGVuZ3RoIDwgY2FyZF9ibGFja19maXJzdCkKICAgICAgICAgICYmKGNhcmRzX2JsYWNrX2NoZWNrW21zZy5zZW5kZXJdICE9IDEpCiAgICAgICAgICApIHsKICAgICAgICAgIGNhcmRzX2JsYWNrLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICBjYXJkc19ibGFja19jaGVja1ttc2cuc2VuZGVyXSA9IDE7CiAgICAgICAgfSAgICAgICAgCgogICAgICAgIGlmKChtc2cudmFsdWUgPj0gY2FyZF90aXRhbml1bV9taW5hbW91bnQpCiAgICAgICAgICAmJihjYXJkc190aXRhbml1bS5sZW5ndGggPCBjYXJkX3RpdGFuaXVtX2ZpcnN0KQogICAgICAgICAgJiYoY2FyZHNfdGl0YW5pdW1fY2hlY2tbbXNnLnNlbmRlcl0gIT0gMSkKICAgICAgICAgICkgewogICAgICAgICAgY2FyZHNfdGl0YW5pdW0ucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgIGNhcmRzX3RpdGFuaXVtX2NoZWNrW21zZy5zZW5kZXJdID0gMTsKICAgICAgICB9CgogICAgICAgIGlmKChtc2cudmFsdWUgPj0gY2FyZF9ibHVlX21pbmFtb3VudCkKICAgICAgICAgICYmKG1zZy52YWx1ZSA8IGNhcmRfZ29sZF9taW5hbW91bnQpCiAgICAgICAgICAmJihjYXJkc19ibHVlLmxlbmd0aCA8IGNhcmRfYmx1ZV9maXJzdCkKICAgICAgICAgICYmKGNhcmRzX2JsdWVfY2hlY2tbbXNnLnNlbmRlcl0gIT0gMSkKICAgICAgICAgICkgewogICAgICAgICAgY2FyZHNfYmx1ZS5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgY2FyZHNfYmx1ZV9jaGVja1ttc2cuc2VuZGVyXSA9IDE7CiAgICAgICAgfQoKICAgICAgICBpZigobXNnLnZhbHVlID49IGNhcmRfc3RhcnRfbWluYW1vdW50KQogICAgICAgICAgJiYobXNnLnZhbHVlIDwgY2FyZF9ibHVlX21pbmFtb3VudCkKICAgICAgICAgICYmKGNhcmRzX3N0YXJ0Lmxlbmd0aCA8IGNhcmRfc3RhcnRfZmlyc3QpCiAgICAgICAgICAmJihjYXJkc19zdGFydF9jaGVja1ttc2cuc2VuZGVyXSAhPSAxKQogICAgICAgICAgKSB7CiAgICAgICAgICBjYXJkc19zdGFydC5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgICAgY2FyZHNfc3RhcnRfY2hlY2tbbXNnLnNlbmRlcl0gPSAxOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgCiB9CgogLyoqCiAgICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogICAqLwogIGxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgdWludCBjID0gYSArIGI7CiAgICAgIGFzc2VydChjID49IGEpOwogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgICAgdGhyb3c7CiAgICAgIH0KICAgIH0KICB9'.
	

]
