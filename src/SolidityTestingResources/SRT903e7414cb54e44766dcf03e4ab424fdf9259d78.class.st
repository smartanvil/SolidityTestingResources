Class {
	#name : #SRT903e7414cb54e44766dcf03e4ab424fdf9259d78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT903e7414cb54e44766dcf03e4ab424fdf9259d78 >> base64 [
	^ ''.
	

]
