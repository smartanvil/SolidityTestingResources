Class {
	#name : #SRT60cd862c9c687a9de49aecdc3a99b74a4fc54ab6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT60cd862c9c687a9de49aecdc3a99b74a4fc54ab6 >> base64 [
	^ ''.
	

]
