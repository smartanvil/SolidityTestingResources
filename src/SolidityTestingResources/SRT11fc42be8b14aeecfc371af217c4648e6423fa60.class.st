Class {
	#name : #SRT11fc42be8b14aeecfc371af217c4648e6423fa60,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT11fc42be8b14aeecfc371af217c4648e6423fa60 >> base64 [
	^ ''.
	

]
