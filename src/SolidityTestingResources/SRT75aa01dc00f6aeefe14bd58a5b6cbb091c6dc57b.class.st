Class {
	#name : #SRT75aa01dc00f6aeefe14bd58a5b6cbb091c6dc57b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT75aa01dc00f6aeefe14bd58a5b6cbb091c6dc57b >> base64 [
	^ ''.
	

]
