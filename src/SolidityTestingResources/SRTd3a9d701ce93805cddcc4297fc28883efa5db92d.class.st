Class {
	#name : #SRTd3a9d701ce93805cddcc4297fc28883efa5db92d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3a9d701ce93805cddcc4297fc28883efa5db92d >> base64 [
	^ 'Y29udHJhY3QgRmxpZ2h0RGVsYXlDb250cm9sbGVySW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX2FkZHIpIHJldHVybnMgKGJvb2wgX2lzT3duZXIpOwoKICAgIGZ1bmN0aW9uIHNlbGZSZWdpc3RlcihieXRlczMyIF9pZCkgcmV0dXJucyAoYm9vbCByZXN1bHQpOwoKICAgIGZ1bmN0aW9uIGdldENvbnRyYWN0KGJ5dGVzMzIgX2lkKSByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsKfQpjb250cmFjdCBGbGlnaHREZWxheURhdGFiYXNlTW9kZWwgewoKICAgIC8vIExlZGdlciBhY2NvdW50cy4KICAgIGVudW0gQWNjIHsKICAgICAgICBQcmVtaXVtLCAgICAgIC8vIDAKICAgICAgICBSaXNrRnVuZCwgICAgIC8vIDEKICAgICAgICBQYXlvdXQsICAgICAgIC8vIDIKICAgICAgICBCYWxhbmNlLCAgICAgIC8vIDMKICAgICAgICBSZXdhcmQsICAgICAgIC8vIDQKICAgICAgICBPcmFjbGl6ZUNvc3RzIC8vIDUKICAgIH0KCiAgICAvLyBwb2xpY3kgU3RhdHVzIENvZGVzIGFuZCBtZWFuaW5nOgogICAgLy8KICAgIC8vIDAwID0gQXBwbGllZDoJICB0aGUgY3VzdG9tZXIgaGFzIHBheWVkIGEgcHJlbWl1bSwgYnV0IHRoZSBvcmFjbGUgaGFzCiAgICAvLwkJCQkJICAgICAgICBub3QgeWV0IGNoZWNrZWQgYW5kIGNvbmZpcm1lZC4KICAgIC8vCQkJCQkgICAgICAgIFRoZSBjdXN0b21lciBjYW4gc3RpbGwgcmV2b2tlIHRoZSBwb2xpY3kuCiAgICAvLyAwMSA9IEFjY2VwdGVkOgkgIHRoZSBvcmFjbGUgaGFzIGNoZWNrZWQgYW5kIGNvbmZpcm1lZC4KICAgIC8vCQkJCQkgICAgICAgIFRoZSBjdXN0b21lciBjYW4gc3RpbGwgcmV2b2tlIHRoZSBwb2xpY3kuCiAgICAvLyAwMiA9IFJldm9rZWQ6CSAgVGhlIGN1c3RvbWVyIGhhcyByZXZva2VkIHRoZSBwb2xpY3kuCiAgICAvLwkJCQkJICAgICAgICBUaGUgcHJlbWl1bSBtaW51cyBjYW5jZWxsYXRpb24gZmVlIGlzIHBheWVkIGJhY2sgdG8gdGhlCiAgICAvLwkJCQkJICAgICAgICBjdXN0b21lciBieSB0aGUgb3JhY2xlLgogICAgLy8gMDMgPSBQYWlkT3V0OgkgIFRoZSBmbGlnaHQgaGFzIGVuZGVkIHdpdGggZGVsYXkuCiAgICAvLwkJCQkJICAgICAgICBUaGUgb3JhY2xlIGhhcyBjaGVja2VkIGFuZCBwYXllZCBvdXQuCiAgICAvLyAwNCA9IEV4cGlyZWQ6CSAgVGhlIGZsaWdodCBoYXMgZW5kZXQgd2l0aCA8MTVtaW4uIGRlbGF5LgogICAgLy8JCQkJCSAgICAgICAgTm8gcGF5b3V0LgogICAgLy8gMDUgPSBEZWNsaW5lZDoJICBUaGUgYXBwbGljYXRpb24gd2FzIGludmFsaWQuCiAgICAvLwkJCQkJICAgICAgICBUaGUgcHJlbWl1bSBtaW51cyBjYW5jZWxsYXRpb24gZmVlIGlzIHBheWVkIGJhY2sgdG8gdGhlCiAgICAvLwkJCQkJICAgICAgICBjdXN0b21lciBieSB0aGUgb3JhY2xlLgogICAgLy8gMDYgPSBTZW5kRmFpbGVkOglEdXJpbmcgUmV2b2tlLCBEZWNsaW5lIG9yIFBheW91dCwgc2VuZGluZyBldGhlciBmYWlsZWQKICAgIC8vCQkJCQkgICAgICAgIGZvciB1bmtub3duIHJlYXNvbnMuCiAgICAvLwkJCQkJICAgICAgICBUaGUgZnVuZHMgcmVtYWluIGluIHRoZSBjb250cmFjdHMgUmlza0Z1bmQuCgoKICAgIC8vICAgICAgICAgICAgICAgICAgIDAwICAgICAgIDAxICAgICAgICAwMiAgICAgICAwMyAgICAgICAgMDQgICAgICAwNSAgICAgICAgICAgMDYKICAgIGVudW0gcG9saWN5U3RhdGUgeyBBcHBsaWVkLCBBY2NlcHRlZCwgUmV2b2tlZCwgUGFpZE91dCwgRXhwaXJlZCwgRGVjbGluZWQsIFNlbmRGYWlsZWQgfQoKICAgIC8vIG9yYWNsaXplIGNhbGxiYWNrIHR5cGVzOgogICAgZW51bSBvcmFjbGl6ZVN0YXRlIHsgRm9yVW5kZXJ3cml0aW5nLCBGb3JQYXlvdXQgfQoKICAgIC8vICAgICAgICAgICAgICAgMDAgICAwMSAgIDAyICAgMDMKICAgIGVudW0gQ3VycmVuY3kgeyBFVEgsIEVVUiwgVVNELCBHQlAgfQoKICAgIC8vIHRoZSBwb2xpY3kgc3RydWN0dXJlOiB0aGlzIHN0cnVjdHVyZSBrZWVwcyB0cmFjayBvZiB0aGUgaW5kaXZpZHVhbCBwYXJhbWV0ZXJzIG9mIGEgcG9saWN5LgogICAgLy8gdHlwaWNhbGx5IGN1c3RvbWVyIGFkZHJlc3MsIHByZW1pdW0gYW5kIHNvbWUgc3RhdHVzIGluZm9ybWF0aW9uLgogICAgc3RydWN0IFBvbGljeSB7CiAgICAgICAgLy8gMCAtIHRoZSBjdXN0b21lcgogICAgICAgIGFkZHJlc3MgY3VzdG9tZXI7CgogICAgICAgIC8vIDEgLSBwcmVtaXVtCiAgICAgICAgdWludCBwcmVtaXVtOwogICAgICAgIC8vIHJpc2sgc3BlY2lmaWMgcGFyYW1ldGVyczoKICAgICAgICAvLyAyIC0gcG9pbnRlciB0byB0aGUgcmlzayBpbiB0aGUgcmlza3MgbWFwcGluZwogICAgICAgIGJ5dGVzMzIgcmlza0lkOwogICAgICAgIC8vIGN1c3RvbSBwYXlvdXQgcGF0dGVybgogICAgICAgIC8vIGluIGZ1dHVyZSB2ZXJzaW9ucywgY3VzdG9tZXIgd2lsbCBiZSBhYmxlIHRvIHRhbXBlciB3aXRoIHRoaXMgYXJyYXkuCiAgICAgICAgLy8gdG8ga2VlcCB0aGluZ3Mgc2ltcGxlLCB3ZSBoYXZlIGRlY2lkZWQgdG8gaGFyZC1jb2RlIHRoZSBhcnJheSBmb3IgYWxsIHBvbGljaWVzLgogICAgICAgIC8vIHVpbnQ4WzVdIHBhdHRlcm47CiAgICAgICAgLy8gMyAtIHByb2JhYmlsaXR5IHdlaWdodC4gdGhpcyBpcyB0aGUgY2VudHJhbCBwYXJhbWV0ZXIKICAgICAgICB1aW50IHdlaWdodDsKICAgICAgICAvLyA0IC0gY2FsY3VsYXRlZCBQYXlvdXQKICAgICAgICB1aW50IGNhbGN1bGF0ZWRQYXlvdXQ7CiAgICAgICAgLy8gNSAtIGFjdHVhbCBQYXlvdXQKICAgICAgICB1aW50IGFjdHVhbFBheW91dDsKCiAgICAgICAgLy8gc3RhdHVzIGZpZWxkczoKICAgICAgICAvLyA2IC0gdGhlIHN0YXRlIG9mIHRoZSBwb2xpY3kKICAgICAgICBwb2xpY3lTdGF0ZSBzdGF0ZTsKICAgICAgICAvLyA3IC0gdGltZSBvZiBsYXN0IHN0YXRlIGNoYW5nZQogICAgICAgIHVpbnQgc3RhdGVUaW1lOwogICAgICAgIC8vIDggLSBzdGF0ZSBjaGFuZ2UgbWVzc2FnZS9yZWFzb24KICAgICAgICBieXRlczMyIHN0YXRlTWVzc2FnZTsKICAgICAgICAvLyA5IC0gVExTTm90YXJ5IFByb29mCiAgICAgICAgYnl0ZXMgcHJvb2Y7CiAgICAgICAgLy8gMTAgLSBDdXJyZW5jeQogICAgICAgIEN1cnJlbmN5IGN1cnJlbmN5OwogICAgICAgIC8vIDEwIC0gRXh0ZXJuYWwgY3VzdG9tZXIgaWQKICAgICAgICBieXRlczMyIGN1c3RvbWVyRXh0ZXJuYWxJZDsKICAgIH0KCiAgICAvLyB0aGUgcmlzayBzdHJ1Y3R1cmU7IHRoaXMgc3RydWN0dXJlIGtlZXBzIHRyYWNrIG9mIHRoZSByaXNrLQogICAgLy8gc3BlY2lmaWMgcGFyYW1ldGVycy4KICAgIC8vIHNldmVyYWwgcG9saWNpZXMgY2FuIHNoYXJlIHRoZSBzYW1lIHJpc2sgc3RydWN0dXJlICh0eXBpY2FsbHkKICAgIC8vIHNvbWUgcGVvcGxlIGZseWluZyB3aXRoIHRoZSBzYW1lIHBsYW5lKQogICAgc3RydWN0IFJpc2sgewogICAgICAgIC8vIDAgLSBBaXJsaW5lIENvZGUgKyBGbGlnaHROdW1iZXIKICAgICAgICBieXRlczMyIGNhcnJpZXJGbGlnaHROdW1iZXI7CiAgICAgICAgLy8gMSAtIHNjaGVkdWxlZCBkZXBhcnR1cmUgYW5kIGFycml2YWwgdGltZSBpbiB0aGUgZm9ybWF0IC9kZXAvWVlZWS9NTS9ERAogICAgICAgIGJ5dGVzMzIgZGVwYXJ0dXJlWWVhck1vbnRoRGF5OwogICAgICAgIC8vIDIgLSB0aGUgaW5pdGFsIGFycml2YWwgdGltZQogICAgICAgIHVpbnQgYXJyaXZhbFRpbWU7CiAgICAgICAgLy8gMyAtIHRoZSBmaW5hbCBkZWxheSBpbiBtaW51dGVzCiAgICAgICAgdWludCBkZWxheUluTWludXRlczsKICAgICAgICAvLyA0IC0gdGhlIGRldGVybWluZWQgZGVsYXkgY2F0ZWdvcnkgKDAtNSkKICAgICAgICB1aW50OCBkZWxheTsKICAgICAgICAvLyA1IC0gd2UgbGltaXQgdGhlIGN1bXVsYXRlZCB3ZWlnaHRlZCBwcmVtaXVtIHRvIGF2b2lkIGNsdXN0ZXIgcmlza3MKICAgICAgICB1aW50IGN1bXVsYXRlZFdlaWdodGVkUHJlbWl1bTsKICAgICAgICAvLyA2IC0gbWF4IGN1bXVsYXRlZCBQYXlvdXQgZm9yIHRoaXMgcmlzawogICAgICAgIHVpbnQgcHJlbWl1bU11bHRpcGxpZXI7CiAgICB9CgogICAgLy8gdGhlIG9yYWNsaXplIGNhbGxiYWNrIHN0cnVjdHVyZTogd2UgdXNlIHNldmVyYWwgb3JhY2xpemUgY2FsbHMuCiAgICAvLyBhbGwgb3JhY2xpemUgY2FsbHMgd2lsbCByZXN1bHQgaW4gYSBjb21tb24gY2FsbGJhY2sgdG8gX19jYWxsYmFjayguLi4pLgogICAgLy8gdG8ga2VlcCB0cmFjayBvZiB0aGUgZGlmZmVyZW50IHF1ZXJ5cyB3ZSBoYXZlIHRvIGludHJvZHVjZSB0aGlzIHN0cnVjdC4KICAgIHN0cnVjdCBPcmFjbGl6ZUNhbGxiYWNrIHsKICAgICAgICAvLyBmb3Igd2hpY2ggcG9saWN5IGhhdmUgd2UgY2FsbGVkPwogICAgICAgIHVpbnQgcG9saWN5SWQ7CiAgICAgICAgLy8gZm9yIHdoaWNoIHB1cnBvc2UgZGlkIHdlIGNhbGw/IHtGb3JVbmRlcndyaXRlIHwgRm9yUGF5b3V0fQogICAgICAgIG9yYWNsaXplU3RhdGUgb1N0YXRlOwogICAgICAgIC8vIHRpbWUKICAgICAgICB1aW50IG9yYWNsaXplVGltZTsKICAgIH0KCiAgICBzdHJ1Y3QgQ3VzdG9tZXIgewogICAgICAgIGJ5dGVzMzIgY3VzdG9tZXJFeHRlcm5hbElkOwogICAgICAgIGJvb2wgaWRlbnRpdHlDb25maXJtZWQ7CiAgICB9Cn0KCmNvbnRyYWN0IEZsaWdodERlbGF5Q29udHJvbGxlZENvbnRyYWN0IGlzIEZsaWdodERlbGF5RGF0YWJhc2VNb2RlbCB7CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKICAgIEZsaWdodERlbGF5Q29udHJvbGxlckludGVyZmFjZSBGRF9DSTsKCiAgICBtb2RpZmllciBvbmx5Q29udHJvbGxlcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29udHJvbGxlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVyKGFkZHJlc3MgX2NvbnRyb2xsZXIpIGludGVybmFsIHJldHVybnMgKGJvb2wgX3Jlc3VsdCkgewogICAgICAgIGNvbnRyb2xsZXIgPSBfY29udHJvbGxlcjsKICAgICAgICBGRF9DSSA9IEZsaWdodERlbGF5Q29udHJvbGxlckludGVyZmFjZShfY29udHJvbGxlcik7CiAgICAgICAgX3Jlc3VsdCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZGVzdHJ1Y3QoKSBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgc2VsZmRlc3RydWN0KGNvbnRyb2xsZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENvbnRyYWN0cygpIG9ubHlDb250cm9sbGVyIHt9CgogICAgZnVuY3Rpb24gZ2V0Q29udHJhY3QoYnl0ZXMzMiBfaWQpIGludGVybmFsIHJldHVybnMgKGFkZHJlc3MgX2FkZHIpIHsKICAgICAgICBfYWRkciA9IEZEX0NJLmdldENvbnRyYWN0KF9pZCk7CiAgICB9Cn0KCmNvbnRyYWN0IEZsaWdodERlbGF5RGF0YWJhc2VJbnRlcmZhY2UgaXMgRmxpZ2h0RGVsYXlEYXRhYmFzZU1vZGVsIHsKCiAgICBmdW5jdGlvbiBzZXRBY2Nlc3NDb250cm9sKGFkZHJlc3MgX2NvbnRyYWN0LCBhZGRyZXNzIF9jYWxsZXIsIHVpbnQ4IF9wZXJtKTsKCiAgICBmdW5jdGlvbiBzZXRBY2Nlc3NDb250cm9sKAogICAgICAgIGFkZHJlc3MgX2NvbnRyYWN0LAogICAgICAgIGFkZHJlc3MgX2NhbGxlciwKICAgICAgICB1aW50OCBfcGVybSwKICAgICAgICBib29sIF9hY2Nlc3MKICAgICk7CgogICAgZnVuY3Rpb24gZ2V0QWNjZXNzQ29udHJvbChhZGRyZXNzIF9jb250cmFjdCwgYWRkcmVzcyBfY2FsbGVyLCB1aW50OCBfcGVybSkgcmV0dXJucyAoYm9vbCBfYWxsb3dlZCk7CgogICAgZnVuY3Rpb24gc2V0TGVkZ2VyKHVpbnQ4IF9pbmRleCwgaW50IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gZ2V0TGVkZ2VyKHVpbnQ4IF9pbmRleCkgcmV0dXJucyAoaW50IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gZ2V0Q3VzdG9tZXJQcmVtaXVtKHVpbnQgX3BvbGljeUlkKSByZXR1cm5zIChhZGRyZXNzIF9jdXN0b21lciwgdWludCBfcHJlbWl1bSk7CgogICAgZnVuY3Rpb24gZ2V0UG9saWN5RGF0YSh1aW50IF9wb2xpY3lJZCkgcmV0dXJucyAoYWRkcmVzcyBfY3VzdG9tZXIsIHVpbnQgX3ByZW1pdW0sIHVpbnQgX3dlaWdodCk7CgogICAgZnVuY3Rpb24gZ2V0UG9saWN5U3RhdGUodWludCBfcG9saWN5SWQpIHJldHVybnMgKHBvbGljeVN0YXRlIF9zdGF0ZSk7CgogICAgZnVuY3Rpb24gZ2V0Umlza0lkKHVpbnQgX3BvbGljeUlkKSByZXR1cm5zIChieXRlczMyIF9yaXNrSWQpOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeShhZGRyZXNzIF9jdXN0b21lciwgdWludCBfcHJlbWl1bSwgQ3VycmVuY3kgX2N1cnJlbmN5LCBieXRlczMyIF9jdXN0b21lckV4dGVybmFsSWQsIGJ5dGVzMzIgX3Jpc2tJZCkgcmV0dXJucyAodWludCBfcG9saWN5SWQpOwoKICAgIGZ1bmN0aW9uIHNldFN0YXRlKAogICAgICAgIHVpbnQgX3BvbGljeUlkLAogICAgICAgIHBvbGljeVN0YXRlIF9zdGF0ZSwKICAgICAgICB1aW50IF9zdGF0ZVRpbWUsCiAgICAgICAgYnl0ZXMzMiBfc3RhdGVNZXNzYWdlCiAgICApOwoKICAgIGZ1bmN0aW9uIHNldFdlaWdodCh1aW50IF9wb2xpY3lJZCwgdWludCBfd2VpZ2h0LCBieXRlcyBfcHJvb2YpOwoKICAgIGZ1bmN0aW9uIHNldFBheW91dHModWludCBfcG9saWN5SWQsIHVpbnQgX2NhbGN1bGF0ZWRQYXlvdXQsIHVpbnQgX2FjdHVhbFBheW91dCk7CgogICAgZnVuY3Rpb24gc2V0RGVsYXkodWludCBfcG9saWN5SWQsIHVpbnQ4IF9kZWxheSwgdWludCBfZGVsYXlJbk1pbnV0ZXMpOwoKICAgIGZ1bmN0aW9uIGdldFJpc2tQYXJhbWV0ZXJzKGJ5dGVzMzIgX3Jpc2tJZCkKICAgICAgICByZXR1cm5zIChieXRlczMyIF9jYXJyaWVyRmxpZ2h0TnVtYmVyLCBieXRlczMyIF9kZXBhcnR1cmVZZWFyTW9udGhEYXksIHVpbnQgX2Fycml2YWxUaW1lKTsKCiAgICBmdW5jdGlvbiBnZXRQcmVtaXVtRmFjdG9ycyhieXRlczMyIF9yaXNrSWQpCiAgICAgICAgcmV0dXJucyAodWludCBfY3VtdWxhdGVkV2VpZ2h0ZWRQcmVtaXVtLCB1aW50IF9wcmVtaXVtTXVsdGlwbGllcik7CgogICAgZnVuY3Rpb24gY3JlYXRlVXBkYXRlUmlzayhieXRlczMyIF9jYXJyaWVyRmxpZ2h0TnVtYmVyLCBieXRlczMyIF9kZXBhcnR1cmVZZWFyTW9udGhEYXksIHVpbnQgX2Fycml2YWxUaW1lKQogICAgICAgIHJldHVybnMgKGJ5dGVzMzIgX3Jpc2tJZCk7CgogICAgZnVuY3Rpb24gc2V0UHJlbWl1bUZhY3RvcnMoYnl0ZXMzMiBfcmlza0lkLCB1aW50IF9jdW11bGF0ZWRXZWlnaHRlZFByZW1pdW0sIHVpbnQgX3ByZW1pdW1NdWx0aXBsaWVyKTsKCiAgICBmdW5jdGlvbiBnZXRPcmFjbGl6ZUNhbGxiYWNrKGJ5dGVzMzIgX3F1ZXJ5SWQpCiAgICAgICAgcmV0dXJucyAodWludCBfcG9saWN5SWQsIHVpbnQgX2Fycml2YWxUaW1lKTsKCiAgICBmdW5jdGlvbiBnZXRPcmFjbGl6ZVBvbGljeUlkKGJ5dGVzMzIgX3F1ZXJ5SWQpCiAgICByZXR1cm5zICh1aW50IF9wb2xpY3lJZCk7CgogICAgZnVuY3Rpb24gY3JlYXRlT3JhY2xpemVDYWxsYmFjaygKICAgICAgICBieXRlczMyIF9xdWVyeUlkLAogICAgICAgIHVpbnQgX3BvbGljeUlkLAogICAgICAgIG9yYWNsaXplU3RhdGUgX29yYWNsaXplU3RhdGUsCiAgICAgICAgdWludCBfb3JhY2xpemVUaW1lCiAgICApOwoKICAgIGZ1bmN0aW9uIGNoZWNrVGltZShieXRlczMyIF9xdWVyeUlkLCBieXRlczMyIF9yaXNrSWQsIHVpbnQgX29mZnNldCkKICAgICAgICByZXR1cm5zIChib29sIF9yZXN1bHQpOwp9CmNvbnRyYWN0IEZsaWdodERlbGF5Q29uc3RhbnRzIHsKCiAgICAvKgogICAgKiBHZW5lcmFsIGV2ZW50cwogICAgKi8KCi8vIC0tPiB0ZXN0LW1vZGUKLy8gICAgICAgIGV2ZW50IExvZ1VpbnQoc3RyaW5nIF9tZXNzYWdlLCB1aW50IF91aW50KTsKLy8gICAgICAgIGV2ZW50IExvZ1VpbnRFdGgoc3RyaW5nIF9tZXNzYWdlLCB1aW50IGV0aFVpbnQpOwovLyAgICAgICAgZXZlbnQgTG9nVWludFRpbWUoc3RyaW5nIF9tZXNzYWdlLCB1aW50IHRpbWVVaW50KTsKLy8gICAgICAgIGV2ZW50IExvZ0ludChzdHJpbmcgX21lc3NhZ2UsIGludCBfaW50KTsKLy8gICAgICAgIGV2ZW50IExvZ0FkZHJlc3Moc3RyaW5nIF9tZXNzYWdlLCBhZGRyZXNzIF9hZGRyZXNzKTsKLy8gICAgICAgIGV2ZW50IExvZ0J5dGVzMzIoc3RyaW5nIF9tZXNzYWdlLCBieXRlczMyIGhleEJ5dGVzMzIpOwovLyAgICAgICAgZXZlbnQgTG9nQnl0ZXMoc3RyaW5nIF9tZXNzYWdlLCBieXRlcyBoZXhCeXRlcyk7Ci8vICAgICAgICBldmVudCBMb2dCeXRlczMyU3RyKHN0cmluZyBfbWVzc2FnZSwgYnl0ZXMzMiBzdHJCeXRlczMyKTsKLy8gICAgICAgIGV2ZW50IExvZ1N0cmluZyhzdHJpbmcgX21lc3NhZ2UsIHN0cmluZyBfc3RyaW5nKTsKLy8gICAgICAgIGV2ZW50IExvZ0Jvb2woc3RyaW5nIF9tZXNzYWdlLCBib29sIF9ib29sKTsKLy8gICAgICAgIGV2ZW50IExvZyhhZGRyZXNzKTsKLy8gPC0tIHRlc3QtbW9kZQoKICAgIGV2ZW50IExvZ1BvbGljeUFwcGxpZWQoCiAgICAgICAgdWludCBfcG9saWN5SWQsCiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXIsCiAgICAgICAgYnl0ZXMzMiBzdHJDYXJyaWVyRmxpZ2h0TnVtYmVyLAogICAgICAgIHVpbnQgZXRoUHJlbWl1bQogICAgKTsKICAgIGV2ZW50IExvZ1BvbGljeUFjY2VwdGVkKAogICAgICAgIHVpbnQgX3BvbGljeUlkLAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3MwLAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3MxLAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3MyLAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3MzLAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3M0LAogICAgICAgIHVpbnQgX3N0YXRpc3RpY3M1CiAgICApOwogICAgZXZlbnQgTG9nUG9saWN5UGFpZE91dCgKICAgICAgICB1aW50IF9wb2xpY3lJZCwKICAgICAgICB1aW50IGV0aEFtb3VudAogICAgKTsKICAgIGV2ZW50IExvZ1BvbGljeUV4cGlyZWQoCiAgICAgICAgdWludCBfcG9saWN5SWQKICAgICk7CiAgICBldmVudCBMb2dQb2xpY3lEZWNsaW5lZCgKICAgICAgICB1aW50IF9wb2xpY3lJZCwKICAgICAgICBieXRlczMyIHN0clJlYXNvbgogICAgKTsKICAgIGV2ZW50IExvZ1BvbGljeU1hbnVhbFBheW91dCgKICAgICAgICB1aW50IF9wb2xpY3lJZCwKICAgICAgICBieXRlczMyIHN0clJlYXNvbgogICAgKTsKICAgIGV2ZW50IExvZ1NlbmRGdW5kcygKICAgICAgICBhZGRyZXNzIF9yZWNpcGllbnQsCiAgICAgICAgdWludDggX2Zyb20sCiAgICAgICAgdWludCBldGhBbW91bnQKICAgICk7CiAgICBldmVudCBMb2dSZWNlaXZlRnVuZHMoCiAgICAgICAgYWRkcmVzcyBfc2VuZGVyLAogICAgICAgIHVpbnQ4IF90bywKICAgICAgICB1aW50IGV0aEFtb3VudAogICAgKTsKICAgIGV2ZW50IExvZ1NlbmRGYWlsKAogICAgICAgIHVpbnQgX3BvbGljeUlkLAogICAgICAgIGJ5dGVzMzIgc3RyUmVhc29uCiAgICApOwogICAgZXZlbnQgTG9nT3JhY2xpemVDYWxsKAogICAgICAgIHVpbnQgX3BvbGljeUlkLAogICAgICAgIGJ5dGVzMzIgaGV4UXVlcnlJZCwKICAgICAgICBzdHJpbmcgX29yYWNsaXplVXJsLAogICAgICAgIHVpbnQyNTYgX29yYWNsaXplVGltZQogICAgKTsKICAgIGV2ZW50IExvZ09yYWNsaXplQ2FsbGJhY2soCiAgICAgICAgdWludCBfcG9saWN5SWQsCiAgICAgICAgYnl0ZXMzMiBoZXhRdWVyeUlkLAogICAgICAgIHN0cmluZyBfcmVzdWx0LAogICAgICAgIGJ5dGVzIGhleFByb29mCiAgICApOwogICAgZXZlbnQgTG9nU2V0U3RhdGUoCiAgICAgICAgdWludCBfcG9saWN5SWQsCiAgICAgICAgdWludDggX3BvbGljeVN0YXRlLAogICAgICAgIHVpbnQgX3N0YXRlVGltZSwKICAgICAgICBieXRlczMyIF9zdGF0ZU1lc3NhZ2UKICAgICk7CiAgICBldmVudCBMb2dFeHRlcm5hbCgKICAgICAgICB1aW50MjU2IF9wb2xpY3lJZCwKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIGJ5dGVzMzIgX2V4dGVybmFsSWQKICAgICk7CgogICAgLyoKICAgICogR2VuZXJhbCBjb25zdGFudHMKICAgICovCgogICAgLy8gbWluaW11bSBvYnNlcnZhdGlvbnMgZm9yIHZhbGlkIHByZWRpY3Rpb24KICAgIHVpbnQgY29uc3RhbnQgTUlOX09CU0VSVkFUSU9OUyA9IDEwOwogICAgLy8gbWluaW11bSBwcmVtaXVtIHRvIGNvdmVyIGNvc3RzCiAgICB1aW50IGNvbnN0YW50IE1JTl9QUkVNSVVNID0gNTAgZmlubmV5OwogICAgLy8gbWF4aW11bSBwcmVtaXVtCiAgICB1aW50IGNvbnN0YW50IE1BWF9QUkVNSVVNID0gMSBldGhlcjsKICAgIC8vIG1heGltdW0gcGF5b3V0CiAgICB1aW50IGNvbnN0YW50IE1BWF9QQVlPVVQgPSAxMTAwIGZpbm5leTsKCiAgICB1aW50IGNvbnN0YW50IE1JTl9QUkVNSVVNX0VVUiA9IDE1MDAgd2VpOwogICAgdWludCBjb25zdGFudCBNQVhfUFJFTUlVTV9FVVIgPSAyOTAwMCB3ZWk7CiAgICB1aW50IGNvbnN0YW50IE1BWF9QQVlPVVRfRVVSID0gMzAwMDAgd2VpOwoKICAgIHVpbnQgY29uc3RhbnQgTUlOX1BSRU1JVU1fVVNEID0gMTcwMCB3ZWk7CiAgICB1aW50IGNvbnN0YW50IE1BWF9QUkVNSVVNX1VTRCA9IDM0MDAwIHdlaTsKICAgIHVpbnQgY29uc3RhbnQgTUFYX1BBWU9VVF9VU0QgPSAzNTAwMCB3ZWk7CgogICAgdWludCBjb25zdGFudCBNSU5fUFJFTUlVTV9HQlAgPSAxMzAwIHdlaTsKICAgIHVpbnQgY29uc3RhbnQgTUFYX1BSRU1JVU1fR0JQID0gMjUwMDAgd2VpOwogICAgdWludCBjb25zdGFudCBNQVhfUEFZT1VUX0dCUCA9IDI3MCB3ZWk7CgogICAgLy8gbWF4aW11bSBjdW11bGF0ZWQgd2VpZ2h0ZWQgcHJlbWl1bSBwZXIgcmlzawogICAgdWludCBjb25zdGFudCBNQVhfQ1VNVUxBVEVEX1dFSUdIVEVEX1BSRU1JVU0gPSA2MCBldGhlcjsKICAgIC8vIDEgcGVyY2VudCBmb3IgREFPLCAxIHBlcmNlbnQgZm9yIG1haW50YWluZXIKICAgIHVpbnQ4IGNvbnN0YW50IFJFV0FSRF9QRVJDRU5UID0gMjsKICAgIC8vIHJlc2VydmUgZm9yIHRhaWwgcmlza3MKICAgIHVpbnQ4IGNvbnN0YW50IFJFU0VSVkVfUEVSQ0VOVCA9IDE7CiAgICAvLyB0aGUgd2VpZ2h0IHBhdHRlcm47IGluIGZ1dHVyZSB2ZXJzaW9ucyB0aGlzIG1heSBiZWNvbWUgcGFydCBvZiB0aGUgcG9saWN5IHN0cnVjdC4KICAgIC8vIGN1cnJlbnRseSBjYW4ndCBiZSBjb25zdGFudCBiZWNhdXNlIG9mIGNvbXBpbGVyIHJlc3RyaWN0aW9ucwogICAgLy8gV0VJR0hUX1BBVFRFUk5bMF0gaXMgbm90IHVzZWQsIGp1c3QgdG8gYmUgY29uc2lzdGVudAogICAgdWludDhbNl0gV0VJR0hUX1BBVFRFUk4gPSBbCiAgICAgICAgMCwKICAgICAgICAxMCwKICAgICAgICAyMCwKICAgICAgICAzMCwKICAgICAgICA1MCwKICAgICAgICA1MAogICAgXTsKCi8vIC0tPiBwcm9kLW1vZGUKICAgIC8vIERFRklOSVRJT05TIEZPUiBST1BTVEVOIEFORCBNQUlOTkVUCiAgICAvLyBtaW5pbXVtIHRpbWUgYmVmb3JlIGRlcGFydHVyZSBmb3IgYXBwbHlpbmcKICAgIHVpbnQgY29uc3RhbnQgTUlOX1RJTUVfQkVGT1JFX0RFUEFSVFVSRQk9IDI0IGhvdXJzOyAvLyBmb3IgcHJvZHVjdGlvbgogICAgLy8gY2hlY2sgZm9yIGRlbGF5IGFmdGVyIC4uIG1pbnV0ZXMgYWZ0ZXIgc2NoZWR1bGVkIGFycml2YWwKICAgIHVpbnQgY29uc3RhbnQgQ0hFQ0tfUEFZT1VUX09GRlNFVCA9IDE1IG1pbnV0ZXM7IC8vIGZvciBwcm9kdWN0aW9uCi8vIDwtLSBwcm9kLW1vZGUKCi8vIC0tPiB0ZXN0LW1vZGUKLy8gICAgICAgIC8vIERFRklOSVRJT05TIEZPUiBMT0NBTCBURVNUTkVUCi8vICAgICAgICAvLyBtaW5pbXVtIHRpbWUgYmVmb3JlIGRlcGFydHVyZSBmb3IgYXBwbHlpbmcKLy8gICAgICAgIHVpbnQgY29uc3RhbnQgTUlOX1RJTUVfQkVGT1JFX0RFUEFSVFVSRSA9IDEgc2Vjb25kczsgLy8gZm9yIHRlc3RpbmcKLy8gICAgICAgIC8vIGNoZWNrIGZvciBkZWxheSBhZnRlciAuLiBtaW51dGVzIGFmdGVyIHNjaGVkdWxlZCBhcnJpdmFsCi8vICAgICAgICB1aW50IGNvbnN0YW50IENIRUNLX1BBWU9VVF9PRkZTRVQgPSAxIHNlY29uZHM7IC8vIGZvciB0ZXN0aW5nCi8vIDwtLSB0ZXN0LW1vZGUKCiAgICAvLyBtYXhpbXVtIGR1cmF0aW9uIG9mIGZsaWdodAogICAgdWludCBjb25zdGFudCBNQVhfRkxJR0hUX0RVUkFUSU9OID0gMiBkYXlzOwogICAgLy8gRGVhZGxpbmUgZm9yIGFjY2VwdGFuY2Ugb2YgcG9saWNpZXM6IDMxLjEyLjIwMzAgKFRlc3RuZXQpCiAgICB1aW50IGNvbnN0YW50IENPTlRSQUNUX0RFQURfTElORSA9IDE5MjIzOTYzOTk7CgogICAgdWludCBjb25zdGFudCBNSU5fREVQQVJUVVJFX0xJTSA9IDE1MDgxOTg0MDA7CgogICAgdWludCBjb25zdGFudCBNQVhfREVQQVJUVVJFX0xJTSA9IDE1MDk4NDAwMDA7CgogICAgLy8gZ2FzIENvbnN0YW50cyBmb3Igb3JhY2xpemUKICAgIHVpbnQgY29uc3RhbnQgT1JBQ0xJWkVfR0FTID0gMTAwMDAwMDsKCgogICAgLyoKICAgICogVVJMcyBhbmQgcXVlcnkgc3RyaW5ncyBmb3Igb3JhY2xpemUKICAgICovCgovLyAtLT4gcHJvZC1tb2RlCiAgICAvLyBERUZJTklUSU9OUyBGT1IgUk9QU1RFTiBBTkQgTUFJTk5FVAogICAgc3RyaW5nIGNvbnN0YW50IE9SQUNMSVpFX1JBVElOR1NfQkFTRV9VUkwgPQogICAgICAgIC8vIHJhdGluZ3MgYXBpIGlzIHYxLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZmxpZ2h0c3RhdHMuY29tL2FwaS1kb2NzL3JhdGluZ3MvdjEKICAgICAgICAiW1VSTF0ganNvbihodHRwczovL2FwaS5mbGlnaHRzdGF0cy5jb20vZmxleC9yYXRpbmdzL3Jlc3QvdjEvanNvbi9mbGlnaHQvIjsKICAgIHN0cmluZyBjb25zdGFudCBPUkFDTElaRV9SQVRJTkdTX1FVRVJZID0KICAgICAgICAiPyR7W2RlY3J5cHRdIDwhLS1QVVQgRU5DUllQVEVEX1FVRVJZIEhFUkUtLT4gfSkucmF0aW5nc1swXVsnb2JzZXJ2YXRpb25zJywnbGF0ZTE1JywnbGF0ZTMwJywnbGF0ZTQ1JywnY2FuY2VsbGVkJywnZGl2ZXJ0ZWQnLCdhcnJpdmFsQWlycG9ydEZzQ29kZSddIjsKICAgIHN0cmluZyBjb25zdGFudCBPUkFDTElaRV9TVEFUVVNfQkFTRV9VUkwgPQogICAgICAgIC8vIGZsaWdodCBzdGF0dXMgYXBpIGlzIHYyLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZmxpZ2h0c3RhdHMuY29tL2FwaS1kb2NzL2ZsaWdodHN0YXR1cy92Mi9mbGlnaHQKICAgICAgICAiW1VSTF0ganNvbihodHRwczovL2FwaS5mbGlnaHRzdGF0cy5jb20vZmxleC9mbGlnaHRzdGF0dXMvcmVzdC92Mi9qc29uL2ZsaWdodC9zdGF0dXMvIjsKICAgIHN0cmluZyBjb25zdGFudCBPUkFDTElaRV9TVEFUVVNfUVVFUlkgPQogICAgICAgIC8vIHBhdHRlcm46CiAgICAgICAgIj8ke1tkZWNyeXB0XSA8IS0tUFVUIEVOQ1JZUFRFRF9RVUVSWSBIRVJFLS0+IH0mdXRjPXRydWUpLmZsaWdodFN0YXR1c2VzWzBdWydzdGF0dXMnLCdkZWxheXMnLCdvcGVyYXRpb25hbFRpbWVzJ10iOwovLyA8LS0gcHJvZC1tb2RlCgovLyAtLT4gdGVzdC1tb2RlCi8vICAgICAgICAvLyBERUZJTklUSU9OUyBGT1IgTE9DQUwgVEVTVE5FVAovLyAgICAgICAgc3RyaW5nIGNvbnN0YW50IE9SQUNMSVpFX1JBVElOR1NfQkFTRV9VUkwgPQovLyAgICAgICAgICAgIC8vIHJhdGluZ3MgYXBpIGlzIHYxLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZmxpZ2h0c3RhdHMuY29tL2FwaS1kb2NzL3JhdGluZ3MvdjEKLy8gICAgICAgICAgICAiW1VSTF0ganNvbihodHRwczovL2FwaS10ZXN0LmV0aGVyaXNjLmNvbS9mbGV4L3JhdGluZ3MvcmVzdC92MS9qc29uL2ZsaWdodC8iOwovLyAgICAgICAgc3RyaW5nIGNvbnN0YW50IE9SQUNMSVpFX1JBVElOR1NfUVVFUlkgPQovLyAgICAgICAgICAgIC8vIGZvciB0ZXN0cnBjOgovLyAgICAgICAgICAgICIpLnJhdGluZ3NbMF1bJ29ic2VydmF0aW9ucycsJ2xhdGUxNScsJ2xhdGUzMCcsJ2xhdGU0NScsJ2NhbmNlbGxlZCcsJ2RpdmVydGVkJywnYXJyaXZhbEFpcnBvcnRGc0NvZGUnXSI7Ci8vICAgICAgICBzdHJpbmcgY29uc3RhbnQgT1JBQ0xJWkVfU1RBVFVTX0JBU0VfVVJMID0KLy8gICAgICAgICAgICAvLyBmbGlnaHQgc3RhdHVzIGFwaSBpcyB2Miwgc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmZsaWdodHN0YXRzLmNvbS9hcGktZG9jcy9mbGlnaHRzdGF0dXMvdjIvZmxpZ2h0Ci8vICAgICAgICAgICAgIltVUkxdIGpzb24oaHR0cHM6Ly9hcGktdGVzdC5ldGhlcmlzYy5jb20vZmxleC9mbGlnaHRzdGF0dXMvcmVzdC92Mi9qc29uL2ZsaWdodC9zdGF0dXMvIjsKLy8gICAgICAgIHN0cmluZyBjb25zdGFudCBPUkFDTElaRV9TVEFUVVNfUVVFUlkgPQovLyAgICAgICAgICAgIC8vIGZvciB0ZXN0cnBjOgovLyAgICAgICAgICAgICI/dXRjPXRydWUpLmZsaWdodFN0YXR1c2VzWzBdWydzdGF0dXMnLCdkZWxheXMnLCdvcGVyYXRpb25hbFRpbWVzJ10iOwovLyA8LS0gdGVzdC1tb2RlCn0KCmNvbnRyYWN0IEZsaWdodERlbGF5QWNjZXNzQ29udHJvbGxlciBpcyBGbGlnaHREZWxheUNvbnRyb2xsZWRDb250cmFjdCwgRmxpZ2h0RGVsYXlDb25zdGFudHMgewoKICAgIEZsaWdodERlbGF5RGF0YWJhc2VJbnRlcmZhY2UgRkRfREI7CgogICAgZnVuY3Rpb24gRmxpZ2h0RGVsYXlBY2Nlc3NDb250cm9sbGVyKGFkZHJlc3MgX2NvbnRyb2xsZXIpIHsKICAgICAgICBzZXRDb250cm9sbGVyKF9jb250cm9sbGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDb250cmFjdHMoKSBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgRkRfREIgPSBGbGlnaHREZWxheURhdGFiYXNlSW50ZXJmYWNlKGdldENvbnRyYWN0KCJGRC5EYXRhYmFzZSIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQZXJtaXNzaW9uQnlJZCh1aW50OCBfcGVybSwgYnl0ZXMzMiBfaWQpIHsKICAgICAgICBGRF9EQi5zZXRBY2Nlc3NDb250cm9sKG1zZy5zZW5kZXIsIEZEX0NJLmdldENvbnRyYWN0KF9pZCksIF9wZXJtKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQZXJtaXNzaW9uQnlJZCh1aW50OCBfcGVybSwgYnl0ZXMzMiBfaWQsIGJvb2wgX2FjY2VzcykgewogICAgICAgIEZEX0RCLnNldEFjY2Vzc0NvbnRyb2woCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIEZEX0NJLmdldENvbnRyYWN0KF9pZCksCiAgICAgICAgICAgIF9wZXJtLAogICAgICAgICAgICBfYWNjZXNzCiAgICAgICAgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQZXJtaXNzaW9uQnlBZGRyZXNzKHVpbnQ4IF9wZXJtLCBhZGRyZXNzIF9hZGRyKSB7CiAgICAgICAgRkRfREIuc2V0QWNjZXNzQ29udHJvbChtc2cuc2VuZGVyLCBfYWRkciwgX3Blcm0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFBlcm1pc3Npb25CeUFkZHJlc3ModWludDggX3Blcm0sIGFkZHJlc3MgX2FkZHIsIGJvb2wgX2FjY2VzcykgewogICAgICAgIEZEX0RCLnNldEFjY2Vzc0NvbnRyb2woCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIF9hZGRyLAogICAgICAgICAgICBfcGVybSwKICAgICAgICAgICAgX2FjY2VzcwogICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tQZXJtaXNzaW9uKHVpbnQ4IF9wZXJtLCBhZGRyZXNzIF9hZGRyKSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7Ci8vIC0tPiBkZWJ1Zy1tb2RlCi8vICAgICAgICAgICAgLy8gTG9nVWludCgiX3Blcm0iLCBfcGVybSk7Ci8vICAgICAgICAgICAgLy8gTG9nQWRkcmVzcygiX2FkZHIiLCBfYWRkcik7Ci8vICAgICAgICAgICAgLy8gTG9nQWRkcmVzcygibXNnLnNlbmRlciIsIG1zZy5zZW5kZXIpOwovLyAgICAgICAgICAgIC8vIExvZ0Jvb2woImdldEFjY2Vzc0NvbnRyb2wiLCBGRF9EQi5nZXRBY2Nlc3NDb250cm9sKG1zZy5zZW5kZXIsIF9hZGRyLCBfcGVybSkpOwovLyA8LS0gZGVidWctbW9kZQogICAgICAgIF9zdWNjZXNzID0gRkRfREIuZ2V0QWNjZXNzQ29udHJvbChtc2cuc2VuZGVyLCBfYWRkciwgX3Blcm0pOwogICAgfQp9'.
	

]
