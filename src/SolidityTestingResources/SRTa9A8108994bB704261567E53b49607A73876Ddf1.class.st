Class {
	#name : #SRTa9A8108994bB704261567E53b49607A73876Ddf1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9A8108994bB704261567E53b49607A73876Ddf1 >> base64 [
	^ ''.
	

]
