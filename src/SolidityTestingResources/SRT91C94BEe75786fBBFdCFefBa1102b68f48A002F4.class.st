Class {
	#name : #SRT91C94BEe75786fBBFdCFefBa1102b68f48A002F4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT91C94BEe75786fBBFdCFefBa1102b68f48A002F4 >> base64 [
	^ ''.
	

]
