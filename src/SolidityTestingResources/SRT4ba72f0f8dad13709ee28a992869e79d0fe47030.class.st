Class {
	#name : #SRT4ba72f0f8dad13709ee28a992869e79d0fe47030,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ba72f0f8dad13709ee28a992869e79d0fe47030 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovLyBjb3B5cmlnaHQgPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJkNmI1YjliOGEyYjdiNWEyOTY5M2EyYmViM2E0YjNiYmI5YjhmOGI1YjliYiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICAvKiBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsgKi8KICAgIC8qICAgaWYgKCFhc3NlcnRpb24pIHsgKi8KICAgIC8qICAgICB0aHJvdzsgKi8KICAgIC8qICAgfSAqLwogICAgLyogfSAgICAgIC8vIGFzc2VydCBubyBsb25nZXIgbmVlZGVkIG9uY2Ugc29saWRpdHkgaXMgb24gMC40LjEwICovCgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KHggPj0geSk7CiAgICAgIHVpbnQyNTYgeiA9IHggLSB5OwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKfQoKY29udHJhY3QgQmFzaWNBY2Nlc3NDb250cm9sIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgLy8gYWRkcmVzc1tdIHB1YmxpYyBtb2RlcmF0b3JzOwogICAgdWludDE2IHB1YmxpYyB0b3RhbE1vZGVyYXRvcnMgPSAwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgbW9kZXJhdG9yczsKICAgIGJvb2wgcHVibGljIGlzTWFpbnRhaW5pbmcgPSB0cnVlOwoKICAgIGZ1bmN0aW9uIEJhc2ljQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlNb2RlcmF0b3JzKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBtb2RlcmF0b3JzW21zZy5zZW5kZXJdID09IHRydWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNBY3RpdmUgewogICAgICAgIHJlcXVpcmUoIWlzTWFpbnRhaW5pbmcpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChfbmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIEFkZE1vZGVyYXRvcihhZGRyZXNzIF9uZXdNb2RlcmF0b3IpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChtb2RlcmF0b3JzW19uZXdNb2RlcmF0b3JdID09IGZhbHNlKSB7CiAgICAgICAgICAgIG1vZGVyYXRvcnNbX25ld01vZGVyYXRvcl0gPSB0cnVlOwogICAgICAgICAgICB0b3RhbE1vZGVyYXRvcnMgKz0gMTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFJlbW92ZU1vZGVyYXRvcihhZGRyZXNzIF9vbGRNb2RlcmF0b3IpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChtb2RlcmF0b3JzW19vbGRNb2RlcmF0b3JdID09IHRydWUpIHsKICAgICAgICAgICAgbW9kZXJhdG9yc1tfb2xkTW9kZXJhdG9yXSA9IGZhbHNlOwogICAgICAgICAgICB0b3RhbE1vZGVyYXRvcnMgLT0gMTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gVXBkYXRlTWFpbnRhaW5pbmcoYm9vbCBfaXNNYWludGFpbmluZykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgaXNNYWludGFpbmluZyA9IF9pc01haW50YWluaW5nOwogICAgfQp9Cgpjb250cmFjdCBFdGhlcmVtb25FbnVtIHsKCiAgICBlbnVtIFJlc3VsdENvZGUgewogICAgICAgIFNVQ0NFU1MsCiAgICAgICAgRVJST1JfQ0xBU1NfTk9UX0ZPVU5ELAogICAgICAgIEVSUk9SX0xPV19CQUxBTkNFLAogICAgICAgIEVSUk9SX1NFTkRfRkFJTCwKICAgICAgICBFUlJPUl9OT1RfVFJBSU5FUiwKICAgICAgICBFUlJPUl9OT1RfRU5PVUdIX01PTkVZLAogICAgICAgIEVSUk9SX0lOVkFMSURfQU1PVU5ULAogICAgICAgIEVSUk9SX09CSl9OT1RfRk9VTkQsCiAgICAgICAgRVJST1JfT0JKX0lOVkFMSURfT1dORVJTSElQCiAgICB9CiAgICAKICAgIGVudW0gQXJyYXlUeXBlIHsKICAgICAgICBDTEFTU19UWVBFLAogICAgICAgIFNUQVRfU1RFUCwKICAgICAgICBTVEFUX1NUQVJULAogICAgICAgIFNUQVRfQkFTRSwKICAgICAgICBPQkpfU0tJTEwKICAgIH0KfQoKY29udHJhY3QgRXRoZXJlbW9uRGF0YUJhc2UgaXMgRXRoZXJlbW9uRW51bSwgQmFzaWNBY2Nlc3NDb250cm9sLCBTYWZlTWF0aCB7CiAgICAKICAgIHVpbnQ2NCBwdWJsaWMgdG90YWxNb25zdGVyOwogICAgdWludDMyIHB1YmxpYyB0b3RhbENsYXNzOwogICAgCiAgICAvLyB3cml0ZQogICAgZnVuY3Rpb24gYWRkRWxlbWVudFRvQXJyYXlUeXBlKEFycmF5VHlwZSBfdHlwZSwgdWludDY0IF9pZCwgdWludDggX3ZhbHVlKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50KTsKICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnRPZkFycmF5VHlwZShBcnJheVR5cGUgX3R5cGUsIHVpbnQ2NCBfaWQsIHVpbnQ4IF92YWx1ZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludCk7CiAgICBmdW5jdGlvbiBzZXRNb25zdGVyQ2xhc3ModWludDMyIF9jbGFzc0lkLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfcmV0dXJuUHJpY2UsIGJvb2wgX2NhdGNoYWJsZSkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDMyKTsKICAgIGZ1bmN0aW9uIGFkZE1vbnN0ZXJPYmoodWludDMyIF9jbGFzc0lkLCBhZGRyZXNzIF90cmFpbmVyLCBzdHJpbmcgX25hbWUpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyByZXR1cm5zKHVpbnQ2NCk7CiAgICBmdW5jdGlvbiBzZXRNb25zdGVyT2JqKHVpbnQ2NCBfb2JqSWQsIHN0cmluZyBfbmFtZSwgdWludDMyIF9leHAsIHVpbnQzMiBfY3JlYXRlSW5kZXgsIHVpbnQzMiBfbGFzdENsYWltSW5kZXgpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGluY3JlYXNlTW9uc3RlckV4cCh1aW50NjQgX29iaklkLCB1aW50MzIgYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWM7CiAgICBmdW5jdGlvbiBkZWNyZWFzZU1vbnN0ZXJFeHAodWludDY0IF9vYmpJZCwgdWludDMyIGFtb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljOwogICAgZnVuY3Rpb24gcmVtb3ZlTW9uc3RlcklkTWFwcGluZyhhZGRyZXNzIF90cmFpbmVyLCB1aW50NjQgX21vbnN0ZXJJZCkgb25seU1vZGVyYXRvcnMgcHVibGljOwogICAgZnVuY3Rpb24gYWRkTW9uc3RlcklkTWFwcGluZyhhZGRyZXNzIF90cmFpbmVyLCB1aW50NjQgX21vbnN0ZXJJZCkgb25seU1vZGVyYXRvcnMgcHVibGljOwogICAgZnVuY3Rpb24gY2xlYXJNb25zdGVyUmV0dXJuQmFsYW5jZSh1aW50NjQgX21vbnN0ZXJJZCkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDI1NiBhbW91bnQpOwogICAgZnVuY3Rpb24gY29sbGVjdEFsbFJldHVybkJhbGFuY2UoYWRkcmVzcyBfdHJhaW5lcikgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnModWludDI1NiBhbW91bnQpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJNb25zdGVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50NjQgX21vbnN0ZXJJZCkgb25seU1vZGVyYXRvcnMgcHVibGljIHJldHVybnMoUmVzdWx0Q29kZSk7CiAgICBmdW5jdGlvbiBhZGRFeHRyYUJhbGFuY2UoYWRkcmVzcyBfdHJhaW5lciwgdWludDI1NiBfYW1vdW50KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgcmV0dXJucyh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGRlZHVjdEV4dHJhQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyLCB1aW50MjU2IF9hbW91bnQpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gc2V0RXh0cmFCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQyNTYgX2Ftb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljOwogICAgCiAgICAvLyByZWFkCiAgICBmdW5jdGlvbiBnZXRTaXplQXJyYXlUeXBlKEFycmF5VHlwZSBfdHlwZSwgdWludDY0IF9pZCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludCk7CiAgICBmdW5jdGlvbiBnZXRFbGVtZW50SW5BcnJheVR5cGUoQXJyYXlUeXBlIF90eXBlLCB1aW50NjQgX2lkLCB1aW50IF9pbmRleCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDgpOwogICAgZnVuY3Rpb24gZ2V0TW9uc3RlckNsYXNzKHVpbnQzMiBfY2xhc3NJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDMyIGNsYXNzSWQsIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgcmV0dXJuUHJpY2UsIHVpbnQzMiB0b3RhbCwgYm9vbCBjYXRjaGFibGUpOwogICAgZnVuY3Rpb24gZ2V0TW9uc3Rlck9iaih1aW50NjQgX29iaklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50NjQgb2JqSWQsIHVpbnQzMiBjbGFzc0lkLCBhZGRyZXNzIHRyYWluZXIsIHVpbnQzMiBleHAsIHVpbnQzMiBjcmVhdGVJbmRleCwgdWludDMyIGxhc3RDbGFpbUluZGV4LCB1aW50IGNyZWF0ZVRpbWUpOwogICAgZnVuY3Rpb24gZ2V0TW9uc3Rlck5hbWUodWludDY0IF9vYmpJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMoc3RyaW5nIG5hbWUpOwogICAgZnVuY3Rpb24gZ2V0RXh0cmFCYWxhbmNlKGFkZHJlc3MgX3RyYWluZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gZ2V0TW9uc3RlckRleFNpemUoYWRkcmVzcyBfdHJhaW5lcikgY29uc3RhbnQgcHVibGljIHJldHVybnModWludCk7CiAgICBmdW5jdGlvbiBnZXRNb25zdGVyT2JqSWQoYWRkcmVzcyBfdHJhaW5lciwgdWludCBpbmRleCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDY0KTsKICAgIGZ1bmN0aW9uIGdldEV4cGVjdGVkQmFsYW5jZShhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGdldE1vbnN0ZXJSZXR1cm4odWludDY0IF9vYmpJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDI1NiBjdXJyZW50LCB1aW50MjU2IHRvdGFsKTsKfQoKaW50ZXJmYWNlIEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBpc09uQmF0dGxlKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnMoYm9vbCkgOwogICAgZnVuY3Rpb24gZ2V0TW9uc3RlckNQKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludDY0KTsKfQoKY29udHJhY3QgRXRoZXJlbW9uVHJhZGUgaXMgRXRoZXJlbW9uRW51bSwgQmFzaWNBY2Nlc3NDb250cm9sLCBTYWZlTWF0aCB7CiAgICAKICAgIHVpbnQ4IGNvbnN0YW50IHB1YmxpYyBHRU4wX05PID0gMjQ7CgogICAgc3RydWN0IE1vbnN0ZXJDbGFzc0FjYyB7CiAgICAgICAgdWludDMyIGNsYXNzSWQ7CiAgICAgICAgdWludDI1NiBwcmljZTsKICAgICAgICB1aW50MjU2IHJldHVyblByaWNlOwogICAgICAgIHVpbnQzMiB0b3RhbDsKICAgICAgICBib29sIGNhdGNoYWJsZTsKICAgIH0KCiAgICBzdHJ1Y3QgTW9uc3Rlck9iakFjYyB7CiAgICAgICAgdWludDY0IG1vbnN0ZXJJZDsKICAgICAgICB1aW50MzIgY2xhc3NJZDsKICAgICAgICBhZGRyZXNzIHRyYWluZXI7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgdWludDMyIGV4cDsKICAgICAgICB1aW50MzIgY3JlYXRlSW5kZXg7CiAgICAgICAgdWludDMyIGxhc3RDbGFpbUluZGV4OwogICAgICAgIHVpbnQgY3JlYXRlVGltZTsKICAgIH0KICAgIAogICAgLy8gR2VuMCBoYXMgcmV0dXJuIHByaWNlICYgbm8gbG9uZ2VyIGNhbiBiZSBjYXVnaHQgd2hlbiB0aGlzIGNvbnRyYWN0IGlzIGRlcGxveWVkCiAgICBzdHJ1Y3QgR2VuMENvbmZpZyB7CiAgICAgICAgdWludDMyIGNsYXNzSWQ7CiAgICAgICAgdWludDI1NiBvcmlnaW5hbFByaWNlOwogICAgICAgIHVpbnQyNTYgcmV0dXJuUHJpY2U7CiAgICAgICAgdWludDMyIHRvdGFsOyAvLyB0b3RhbCBjYXVnaHQgKG5vdCBjb3VudCB0aG9zZSBmcm9tIGVnZ3MpCiAgICB9CiAgICAKICAgIHN0cnVjdCBCb3Jyb3dJdGVtIHsKICAgICAgICB1aW50IGluZGV4OwogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgYWRkcmVzcyBib3Jyb3dlcjsKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgICAgIGJvb2wgbGVudDsKICAgICAgICB1aW50IHJlbGVhc2VUaW1lOwogICAgfQogICAgCiAgICBzdHJ1Y3QgU2VsbGluZ0l0ZW0gewogICAgICAgIHVpbnQgaW5kZXg7CiAgICAgICAgdWludDI1NiBwcmljZTsKICAgIH0KICAgIAogICAgc3RydWN0IFNvbGRJdGVtIHsKICAgICAgICB1aW50NjQgb2JqSWQ7CiAgICAgICAgdWludDI1NiBwcmljZTsKICAgICAgICB1aW50IHRpbWU7CiAgICB9CiAgICAKICAgIC8vIGRhdGEgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIGRhdGFDb250cmFjdDsKICAgIGFkZHJlc3MgcHVibGljIGJhdHRsZUNvbnRyYWN0OwogICAgbWFwcGluZyh1aW50MzIgPT4gR2VuMENvbmZpZykgcHVibGljIGdlbjBDb25maWc7CiAgICAKICAgIC8vIGZvciBzZWxsaW5nCiAgICBtYXBwaW5nKHVpbnQ2NCA9PiBTZWxsaW5nSXRlbSkgcHVibGljIHNlbGxpbmdEaWN0OwogICAgdWludDMyIHB1YmxpYyB0b3RhbFNlbGxpbmdJdGVtOwogICAgdWludDY0W10gcHVibGljIHNlbGxpbmdMaXN0OwogICAgCiAgICAvLyBmb3IgYm9ycm93aW5nCiAgICBtYXBwaW5nKHVpbnQ2NCA9PiBCb3Jyb3dJdGVtKSBwdWJsaWMgYm9ycm93aW5nRGljdDsKICAgIHVpbnQzMiBwdWJsaWMgdG90YWxCb3Jyb3dpbmdJdGVtOwogICAgdWludDY0W10gcHVibGljIGJvcnJvd2luZ0xpc3Q7CiAgICAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50NjRbXSkgcHVibGljIGxlbmRpbmdMaXN0OwogICAgbWFwcGluZyhhZGRyZXNzID0+IFNvbGRJdGVtW10pIHB1YmxpYyBzb2xkTGlzdDsKICAgIAogICAgLy8gdHJhZGluZyBmZWUKICAgIHVpbnQxNiBwdWJsaWMgdHJhZGluZ0ZlZVBlcmNlbnRhZ2UgPSAxOwogICAgdWludDggcHVibGljIG1heExlbmRpbmdJdGVtID0gMTA7CiAgICAKICAgIG1vZGlmaWVyIHJlcXVpcmVEYXRhQ29udHJhY3QgewogICAgICAgIHJlcXVpcmUoZGF0YUNvbnRyYWN0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIHJlcXVpcmVCYXR0bGVDb250cmFjdCB7CiAgICAgICAgcmVxdWlyZShiYXR0bGVDb250cmFjdCAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvLyBldmVudAogICAgZXZlbnQgRXZlbnRQbGFjZVNlbGxPcmRlcihhZGRyZXNzIGluZGV4ZWQgc2VsbGVyLCB1aW50NjQgb2JqSWQpOwogICAgZXZlbnQgRXZlbnRCdXlJdGVtKGFkZHJlc3MgaW5kZXhlZCBidXllciwgdWludDY0IG9iaklkKTsKICAgIGV2ZW50IEV2ZW50T2ZmZXJCb3Jyb3dpbmdJdGVtKGFkZHJlc3MgaW5kZXhlZCBsZW5kZXIsIHVpbnQ2NCBvYmpJZCk7CiAgICBldmVudCBFdmVudEFjY2VwdEJvcnJvd0l0ZW0oYWRkcmVzcyBpbmRleGVkIGJvcnJvd2VyLCB1aW50NjQgb2JqSWQpOwogICAgZXZlbnQgRXZlbnRHZXRCYWNrSXRlbShhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQ2NCBvYmpJZCk7CiAgICBldmVudCBFdmVudEZyZWVUcmFuc2Zlckl0ZW0oYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgYWRkcmVzcyBpbmRleGVkIHJlY2VpdmVyLCB1aW50NjQgb2JqSWQpOwogICAgZXZlbnQgRXZlbnRSZWxlYXNlKGFkZHJlc3MgaW5kZXhlZCB0cmFpbmVyLCB1aW50NjQgb2JqSWQpOwogICAgCiAgICAvLyBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gRXRoZXJlbW9uVHJhZGUoYWRkcmVzcyBfZGF0YUNvbnRyYWN0LCBhZGRyZXNzIF9iYXR0bGVDb250cmFjdCkgcHVibGljIHsKICAgICAgICBkYXRhQ29udHJhY3QgPSBfZGF0YUNvbnRyYWN0OwogICAgICAgIGJhdHRsZUNvbnRyYWN0ID0gX2JhdHRsZUNvbnRyYWN0OwogICAgfQogICAgCiAgICAgLy8gYWRtaW4gJiBtb2RlcmF0b3JzCiAgICBmdW5jdGlvbiBzZXRPcmlnaW5hbFByaWNlR2VuMCgpIG9ubHlNb2RlcmF0b3JzIHB1YmxpYyB7CiAgICAgICAgZ2VuMENvbmZpZ1sxXSA9IEdlbjBDb25maWcoMSwgMC4zIGV0aGVyLCAwLjAwMyBldGhlciwgMzc0KTsKICAgICAgICBnZW4wQ29uZmlnWzJdID0gR2VuMENvbmZpZygyLCAwLjMgZXRoZXIsIDAuMDAzIGV0aGVyLCA0MDgpOwogICAgICAgIGdlbjBDb25maWdbM10gPSBHZW4wQ29uZmlnKDMsIDAuMyBldGhlciwgMC4wMDMgZXRoZXIsIDM3Myk7CiAgICAgICAgZ2VuMENvbmZpZ1s0XSA9IEdlbjBDb25maWcoNCwgMC4yIGV0aGVyLCAwLjAwMiBldGhlciwgNDM3KTsKICAgICAgICBnZW4wQ29uZmlnWzVdID0gR2VuMENvbmZpZyg1LCAwLjEgZXRoZXIsIDAuMDAxIGV0aGVyLCA0OTcpOwogICAgICAgIGdlbjBDb25maWdbNl0gPSBHZW4wQ29uZmlnKDYsIDAuMyBldGhlciwgMC4wMDMgZXRoZXIsIDM4MCk7IAogICAgICAgIGdlbjBDb25maWdbN10gPSBHZW4wQ29uZmlnKDcsIDAuMiBldGhlciwgMC4wMDIgZXRoZXIsIDM0NSk7CiAgICAgICAgZ2VuMENvbmZpZ1s4XSA9IEdlbjBDb25maWcoOCwgMC4xIGV0aGVyLCAwLjAwMSBldGhlciwgNTE4KTsgCiAgICAgICAgZ2VuMENvbmZpZ1s5XSA9IEdlbjBDb25maWcoOSwgMC4xIGV0aGVyLCAwLjAwMSBldGhlciwgNDQ3KTsKICAgICAgICBnZW4wQ29uZmlnWzEwXSA9IEdlbjBDb25maWcoMTAsIDAuMiBldGhlciwgMC4wMDIgZXRoZXIsIDM4MCk7IAogICAgICAgIGdlbjBDb25maWdbMTFdID0gR2VuMENvbmZpZygxMSwgMC4yIGV0aGVyLCAwLjAwMiBldGhlciwgMzU0KTsKICAgICAgICBnZW4wQ29uZmlnWzEyXSA9IEdlbjBDb25maWcoMTIsIDAuMiBldGhlciwgMC4wMDIgZXRoZXIsIDM0Nik7CiAgICAgICAgZ2VuMENvbmZpZ1sxM10gPSBHZW4wQ29uZmlnKDEzLCAwLjIgZXRoZXIsIDAuMDAyIGV0aGVyLCAzNTEpOyAKICAgICAgICBnZW4wQ29uZmlnWzE0XSA9IEdlbjBDb25maWcoMTQsIDAuMiBldGhlciwgMC4wMDIgZXRoZXIsIDMzOCk7CiAgICAgICAgZ2VuMENvbmZpZ1sxNV0gPSBHZW4wQ29uZmlnKDE1LCAwLjIgZXRoZXIsIDAuMDAyIGV0aGVyLCAzNDEpOwogICAgICAgIGdlbjBDb25maWdbMTZdID0gR2VuMENvbmZpZygxNiwgMC4zNSBldGhlciwgMC4wMDM1IGV0aGVyLCAzODQpOwogICAgICAgIGdlbjBDb25maWdbMTddID0gR2VuMENvbmZpZygxNywgMSBldGhlciwgMC4wMSBldGhlciwgMzA1KTsgCiAgICAgICAgZ2VuMENvbmZpZ1sxOF0gPSBHZW4wQ29uZmlnKDE4LCAwLjEgZXRoZXIsIDAuMDAxIGV0aGVyLCA0MjcpOwogICAgICAgIGdlbjBDb25maWdbMTldID0gR2VuMENvbmZpZygxOSwgMSBldGhlciwgMC4wMSBldGhlciwgMzA0KTsKICAgICAgICBnZW4wQ29uZmlnWzIwXSA9IEdlbjBDb25maWcoMjAsIDAuNCBldGhlciwgMC4wNSBldGhlciwgODIpOwogICAgICAgIGdlbjBDb25maWdbMjFdID0gR2VuMENvbmZpZygyMSwgMSwgMSwgMTIzKTsKICAgICAgICBnZW4wQ29uZmlnWzIyXSA9IEdlbjBDb25maWcoMjIsIDAuMiBldGhlciwgMC4wMDEgZXRoZXIsIDQ2OCk7CiAgICAgICAgZ2VuMENvbmZpZ1syM10gPSBHZW4wQ29uZmlnKDIzLCAwLjUgZXRoZXIsIDAuMDAyNSBldGhlciwgMzAyKTsKICAgICAgICBnZW4wQ29uZmlnWzI0XSA9IEdlbjBDb25maWcoMjQsIDEgZXRoZXIsIDAuMDA1IGV0aGVyLCAxOTUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRDb250cmFjdChhZGRyZXNzIF9kYXRhQ29udHJhY3QsIGFkZHJlc3MgX2JhdHRsZUNvbnRyYWN0KSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgewogICAgICAgIGRhdGFDb250cmFjdCA9IF9kYXRhQ29udHJhY3Q7CiAgICAgICAgYmF0dGxlQ29udHJhY3QgPSBfYmF0dGxlQ29udHJhY3Q7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyh1aW50MTYgX2ZlZSwgdWludDggX21heExlbmRpbmdJdGVtKSBvbmx5TW9kZXJhdG9ycyBwdWJsaWMgewogICAgICAgIHRyYWRpbmdGZWVQZXJjZW50YWdlID0gX2ZlZTsKICAgICAgICBtYXhMZW5kaW5nSXRlbSA9IF9tYXhMZW5kaW5nSXRlbTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcihhZGRyZXNzIF9zZW5kVG8sIHVpbnQgX2Ftb3VudCkgb25seU1vZGVyYXRvcnMgcHVibGljIHsKICAgICAgICAvLyBubyB1c2VyIG1vbmV5IGlzIGtlcHQgaW4gdGhpcyBjb250cmFjdCwgb25seSB0cmFzYWN0aW9uIGZlZQogICAgICAgIGlmIChfYW1vdW50ID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfc2VuZFRvLnRyYW5zZmVyKF9hbW91bnQpOwogICAgfQogICAgCiAgICAKICAgIC8vIGhlbHBlcgogICAgZnVuY3Rpb24gcmVtb3ZlU2VsbGluZ0l0ZW0odWludDY0IF9pdGVtSWQpIHByaXZhdGUgewogICAgICAgIFNlbGxpbmdJdGVtIHN0b3JhZ2UgaXRlbSA9IHNlbGxpbmdEaWN0W19pdGVtSWRdOwogICAgICAgIGlmIChpdGVtLmluZGV4ID09IDApCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAKICAgICAgICBpZiAoaXRlbS5pbmRleCA8PSBzZWxsaW5nTGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgLy8gTW92ZSBhbiBleGlzdGluZyBlbGVtZW50IGludG8gdGhlIHZhY2F0ZWQga2V5IHNsb3QuCiAgICAgICAgICAgIHNlbGxpbmdEaWN0W3NlbGxpbmdMaXN0W3NlbGxpbmdMaXN0Lmxlbmd0aC0xXV0uaW5kZXggPSBpdGVtLmluZGV4OwogICAgICAgICAgICBzZWxsaW5nTGlzdFtpdGVtLmluZGV4LTFdID0gc2VsbGluZ0xpc3Rbc2VsbGluZ0xpc3QubGVuZ3RoLTFdOwogICAgICAgICAgICBzZWxsaW5nTGlzdC5sZW5ndGggLT0gMTsKICAgICAgICAgICAgZGVsZXRlIHNlbGxpbmdEaWN0W19pdGVtSWRdOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkU2VsbGluZ0l0ZW0odWludDY0IF9pdGVtSWQsIHVpbnQyNTYgX3ByaWNlKSBwcml2YXRlIHsKICAgICAgICBTZWxsaW5nSXRlbSBzdG9yYWdlIGl0ZW0gPSBzZWxsaW5nRGljdFtfaXRlbUlkXTsKICAgICAgICBpdGVtLnByaWNlID0gX3ByaWNlOwogICAgICAgIAogICAgICAgIGlmIChpdGVtLmluZGV4ID09IDApIHsKICAgICAgICAgICAgaXRlbS5pbmRleCA9ICsrc2VsbGluZ0xpc3QubGVuZ3RoOwogICAgICAgICAgICBzZWxsaW5nTGlzdFtpdGVtLmluZGV4IC0gMV0gPSBfaXRlbUlkOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVCb3Jyb3dpbmdJdGVtKHVpbnQ2NCBfaXRlbUlkKSBwcml2YXRlIHsKICAgICAgICBCb3Jyb3dJdGVtIHN0b3JhZ2UgaXRlbSA9IGJvcnJvd2luZ0RpY3RbX2l0ZW1JZF07CiAgICAgICAgaWYgKGl0ZW0uaW5kZXggPT0gMCkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIAogICAgICAgIGlmIChpdGVtLmluZGV4IDw9IGJvcnJvd2luZ0xpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgIC8vIE1vdmUgYW4gZXhpc3RpbmcgZWxlbWVudCBpbnRvIHRoZSB2YWNhdGVkIGtleSBzbG90LgogICAgICAgICAgICBib3Jyb3dpbmdEaWN0W2JvcnJvd2luZ0xpc3RbYm9ycm93aW5nTGlzdC5sZW5ndGgtMV1dLmluZGV4ID0gaXRlbS5pbmRleDsKICAgICAgICAgICAgYm9ycm93aW5nTGlzdFtpdGVtLmluZGV4LTFdID0gYm9ycm93aW5nTGlzdFtib3Jyb3dpbmdMaXN0Lmxlbmd0aC0xXTsKICAgICAgICAgICAgYm9ycm93aW5nTGlzdC5sZW5ndGggLT0gMTsKICAgICAgICAgICAgZGVsZXRlIGJvcnJvd2luZ0RpY3RbX2l0ZW1JZF07CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFkZEJvcnJvd2luZ0l0ZW0oYWRkcmVzcyBfb3duZXIsIHVpbnQ2NCBfaXRlbUlkLCB1aW50MjU2IF9wcmljZSwgdWludCBfcmVsZWFzZVRpbWUpIHByaXZhdGUgewogICAgICAgIEJvcnJvd0l0ZW0gc3RvcmFnZSBpdGVtID0gYm9ycm93aW5nRGljdFtfaXRlbUlkXTsKICAgICAgICBpdGVtLm93bmVyID0gX293bmVyOwogICAgICAgIGl0ZW0uYm9ycm93ZXIgPSBhZGRyZXNzKDApOwogICAgICAgIGl0ZW0ucHJpY2UgPSBfcHJpY2U7CiAgICAgICAgaXRlbS5sZW50ID0gZmFsc2U7CiAgICAgICAgaXRlbS5yZWxlYXNlVGltZSA9IF9yZWxlYXNlVGltZTsKICAgICAgICAKICAgICAgICBpZiAoaXRlbS5pbmRleCA9PSAwKSB7CiAgICAgICAgICAgIGl0ZW0uaW5kZXggPSArK2JvcnJvd2luZ0xpc3QubGVuZ3RoOwogICAgICAgICAgICBib3Jyb3dpbmdMaXN0W2l0ZW0uaW5kZXggLSAxXSA9IF9pdGVtSWQ7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2Zlck1vbnN0ZXIoYWRkcmVzcyBfdG8sIHVpbnQ2NCBfb2JqSWQpIHByaXZhdGUgewogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwoKICAgICAgICBNb25zdGVyT2JqQWNjIG1lbW9yeSBvYmo7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgb2JqLmNyZWF0ZUluZGV4LCBvYmoubGFzdENsYWltSW5kZXgsIG9iai5jcmVhdGVUaW1lKSA9IGRhdGEuZ2V0TW9uc3Rlck9iaihfb2JqSWQpOwoKICAgICAgICAvLyBjbGVhciBiYWxhbmNlIGZvciBnZW4gMAogICAgICAgIGlmIChvYmouY2xhc3NJZCA8PSBHRU4wX05PKSB7CiAgICAgICAgICAgIEdlbjBDb25maWcgc3RvcmFnZSBnZW4wID0gZ2VuMENvbmZpZ1tvYmouY2xhc3NJZF07CiAgICAgICAgICAgIGlmIChnZW4wLmNsYXNzSWQgPT0gb2JqLmNsYXNzSWQpIHsKICAgICAgICAgICAgICAgIGlmIChvYmoubGFzdENsYWltSW5kZXggPCBnZW4wLnRvdGFsKSB7CiAgICAgICAgICAgICAgICAgICAgdWludDMyIGdhcCA9IHVpbnQzMihzYWZlU3VidHJhY3QoZ2VuMC50b3RhbCwgb2JqLmxhc3RDbGFpbUluZGV4KSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGdhcCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hZGRFeHRyYUJhbGFuY2Uob2JqLnRyYWluZXIsIHNhZmVNdWx0KGdhcCwgZ2VuMC5yZXR1cm5QcmljZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB0b3RhbCAoYWNjZXB0IG5hbWUgaXMgY2xlYXJlZCA6KCApCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0TW9uc3Rlck9iaihvYmoubW9uc3RlcklkLCAiIG5hbWUgbWUgIiwgb2JqLmV4cCwgb2JqLmNyZWF0ZUluZGV4LCBnZW4wLnRvdGFsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gdHJhbnNmZXIgb3duZXIKICAgICAgICBkYXRhLnJlbW92ZU1vbnN0ZXJJZE1hcHBpbmcob2JqLnRyYWluZXIsIF9vYmpJZCk7CiAgICAgICAgZGF0YS5hZGRNb25zdGVySWRNYXBwaW5nKF90bywgX29iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkSXRlbUxlbmRpbmdMaXN0KGFkZHJlc3MgX3RyYWluZXIsIHVpbnQ2NCBfb2JqSWQpIHByaXZhdGUgewogICAgICAgIGlmIChfdHJhaW5lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIHVpbnQ2NFtdIHN0b3JhZ2Ugb2JqTGlzdCA9IGxlbmRpbmdMaXN0W190cmFpbmVyXTsKICAgICAgICAgICAgZm9yICh1aW50IGluZGV4ID0gMDsgaW5kZXggPCBvYmpMaXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgaWYgKG9iakxpc3RbaW5kZXhdID09IF9vYmpJZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBvYmpMaXN0LnB1c2goX29iaklkKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZUl0ZW1MZW5kaW5nTGlzdChhZGRyZXNzIF90cmFpbmVyLCB1aW50NjQgX29iaklkKSBwcml2YXRlIHsKICAgICAgICB1aW50IGZvdW5kSW5kZXggPSAwOwogICAgICAgIHVpbnQ2NFtdIHN0b3JhZ2Ugb2JqTGlzdCA9IGxlbmRpbmdMaXN0W190cmFpbmVyXTsKICAgICAgICBmb3IgKDsgZm91bmRJbmRleCA8IG9iakxpc3QubGVuZ3RoOyBmb3VuZEluZGV4KyspIHsKICAgICAgICAgICAgaWYgKG9iakxpc3RbZm91bmRJbmRleF0gPT0gX29iaklkKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZm91bmRJbmRleCA8IG9iakxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgIG9iakxpc3RbZm91bmRJbmRleF0gPSBvYmpMaXN0W29iakxpc3QubGVuZ3RoLTFdOwogICAgICAgICAgICBkZWxldGUgb2JqTGlzdFtvYmpMaXN0Lmxlbmd0aC0xXTsKICAgICAgICAgICAgb2JqTGlzdC5sZW5ndGgtLTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vIHB1YmxpYwogICAgZnVuY3Rpb24gcGxhY2VTZWxsT3JkZXIodWludDY0IF9vYmpJZCwgdWludDI1NiBfcHJpY2UpIHJlcXVpcmVEYXRhQ29udHJhY3QgcmVxdWlyZUJhdHRsZUNvbnRyYWN0IGlzQWN0aXZlIGV4dGVybmFsIHsKICAgICAgICBpZiAoX3ByaWNlID09IDApCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIC8vIG5vdCBvbiBib3Jyb3dpbmcKICAgICAgICBCb3Jyb3dJdGVtIHN0b3JhZ2UgaXRlbSA9IGJvcnJvd2luZ0RpY3RbX29iaklkXTsKICAgICAgICBpZiAoaXRlbS5pbmRleCA+IDApCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIC8vIG5vdCBvbiBiYXR0bGUgCiAgICAgICAgRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlIGJhdHRsZSA9IEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZShiYXR0bGVDb250cmFjdCk7CiAgICAgICAgaWYgKGJhdHRsZS5pc09uQmF0dGxlKF9vYmpJZCkpCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIAogICAgICAgIC8vIGNoZWNrIG93bmVyc2hpcAogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwogICAgICAgIE1vbnN0ZXJPYmpBY2MgbWVtb3J5IG9iajsKICAgICAgICB1aW50MzIgXyA9IDA7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgXywgXywgb2JqLmNyZWF0ZVRpbWUpID0gZGF0YS5nZXRNb25zdGVyT2JqKF9vYmpJZCk7CiAgICAgICAgCiAgICAgICAgaWYgKG9iai5tb25zdGVySWQgIT0gX29iaklkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAob2JqLnRyYWluZXIgIT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gb24gc2VsbGluZywgdGhlbiBqdXN0IHVwZGF0ZSBwcmljZQogICAgICAgIGlmIChzZWxsaW5nRGljdFtfb2JqSWRdLmluZGV4ID4gMCl7CiAgICAgICAgICAgIHNlbGxpbmdEaWN0W19vYmpJZF0ucHJpY2UgPSBfcHJpY2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWRkU2VsbGluZ0l0ZW0oX29iaklkLCBfcHJpY2UpOwogICAgICAgIH0KICAgICAgICBFdmVudFBsYWNlU2VsbE9yZGVyKG1zZy5zZW5kZXIsIF9vYmpJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZVNlbGxPcmRlcih1aW50NjQgX29iaklkKSByZXF1aXJlRGF0YUNvbnRyYWN0IHJlcXVpcmVCYXR0bGVDb250cmFjdCBpc0FjdGl2ZSBleHRlcm5hbCB7CiAgICAgICAgaWYgKHNlbGxpbmdEaWN0W19vYmpJZF0uaW5kZXggPT0gMCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgLy8gY2hlY2sgb3duZXJzaGlwCiAgICAgICAgRXRoZXJlbW9uRGF0YUJhc2UgZGF0YSA9IEV0aGVyZW1vbkRhdGFCYXNlKGRhdGFDb250cmFjdCk7CiAgICAgICAgTW9uc3Rlck9iakFjYyBtZW1vcnkgb2JqOwogICAgICAgIHVpbnQzMiBfID0gMDsKICAgICAgICAob2JqLm1vbnN0ZXJJZCwgb2JqLmNsYXNzSWQsIG9iai50cmFpbmVyLCBvYmouZXhwLCBfLCBfLCBvYmouY3JlYXRlVGltZSkgPSBkYXRhLmdldE1vbnN0ZXJPYmooX29iaklkKTsKICAgICAgICAKICAgICAgICBpZiAob2JqLm1vbnN0ZXJJZCAhPSBfb2JqSWQpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChvYmoudHJhaW5lciAhPSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZW1vdmVTZWxsaW5nSXRlbShfb2JqSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXlJdGVtKHVpbnQ2NCBfb2JqSWQpIHJlcXVpcmVEYXRhQ29udHJhY3QgcmVxdWlyZUJhdHRsZUNvbnRyYWN0IGlzQWN0aXZlIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIC8vIGNoZWNrIGl0ZW0gaXMgdmFsaWQgdG8gc2VsbCAKICAgICAgICB1aW50MjU2IHJlcXVlc3RQcmljZSA9IHNlbGxpbmdEaWN0W19vYmpJZF0ucHJpY2U7CiAgICAgICAgaWYgKHJlcXVlc3RQcmljZSA9PSAwIHx8IG1zZy52YWx1ZSAhPSByZXF1ZXN0UHJpY2UpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIGNoZWNrIG9iagogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwogICAgICAgIE1vbnN0ZXJPYmpBY2MgbWVtb3J5IG9iajsKICAgICAgICB1aW50MzIgXyA9IDA7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgXywgXywgb2JqLmNyZWF0ZVRpbWUpID0gZGF0YS5nZXRNb25zdGVyT2JqKF9vYmpJZCk7CiAgICAgICAgaWYgKG9iai5tb25zdGVySWQgIT0gX29iaklkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAvLyBjYW4gbm90IGJ1eSBmcm9tIHlvdXJzZWxmCiAgICAgICAgaWYgKG9iai50cmFpbmVyID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGFkZHJlc3Mgb2xkVHJhaW5lciA9IG9iai50cmFpbmVyOwogICAgICAgIHVpbnQyNTYgZmVlID0gcmVxdWVzdFByaWNlICogdHJhZGluZ0ZlZVBlcmNlbnRhZ2UgLyAxMDA7CiAgICAgICAgcmVtb3ZlU2VsbGluZ0l0ZW0oX29iaklkKTsKICAgICAgICB0cmFuc2Zlck1vbnN0ZXIobXNnLnNlbmRlciwgX29iaklkKTsKICAgICAgICBvbGRUcmFpbmVyLnRyYW5zZmVyKHNhZmVTdWJ0cmFjdChyZXF1ZXN0UHJpY2UsIGZlZSkpOwogICAgICAgIAogICAgICAgIFNvbGRJdGVtIG1lbW9yeSBzb2xkSXRlbSA9IFNvbGRJdGVtKF9vYmpJZCwgcmVxdWVzdFByaWNlLCBibG9jay50aW1lc3RhbXApOwogICAgICAgIHNvbGRMaXN0W29sZFRyYWluZXJdLnB1c2goc29sZEl0ZW0pOwogICAgICAgIEV2ZW50QnV5SXRlbShtc2cuc2VuZGVyLCBfb2JqSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvZmZlckJvcnJvd2luZ0l0ZW0odWludDY0IF9vYmpJZCwgdWludDI1NiBfcHJpY2UsIHVpbnQgX3JlbGVhc2VUaW1lKSByZXF1aXJlRGF0YUNvbnRyYWN0IHJlcXVpcmVCYXR0bGVDb250cmFjdCBpc0FjdGl2ZSBleHRlcm5hbCB7CiAgICAgICAgLy8gbWFrZSBzdXJlIGl0IGlzIG5vdCBvbiBzYWxlIAogICAgICAgIGlmIChzZWxsaW5nRGljdFtfb2JqSWRdLnByaWNlID4gMCB8fCBfcHJpY2UgPT0gMCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgLy8gbm90IG9uIGxlbnQKICAgICAgICBCb3Jyb3dJdGVtIHN0b3JhZ2UgaXRlbSA9IGJvcnJvd2luZ0RpY3RbX29iaklkXTsKICAgICAgICBpZiAoaXRlbS5sZW50ID09IHRydWUpCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIC8vIG5vdCBvbiBiYXR0bGUgCiAgICAgICAgRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlIGJhdHRsZSA9IEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZShiYXR0bGVDb250cmFjdCk7CiAgICAgICAgaWYgKGJhdHRsZS5pc09uQmF0dGxlKF9vYmpJZCkpCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIAogICAgICAgIAogICAgICAgIC8vIGNoZWNrIG93bmVyc2hpcAogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwogICAgICAgIE1vbnN0ZXJPYmpBY2MgbWVtb3J5IG9iajsKICAgICAgICB1aW50MzIgXyA9IDA7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgXywgXywgb2JqLmNyZWF0ZVRpbWUpID0gZGF0YS5nZXRNb25zdGVyT2JqKF9vYmpJZCk7CiAgICAgICAgCiAgICAgICAgaWYgKG9iai5tb25zdGVySWQgIT0gX29iaklkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAob2JqLnRyYWluZXIgIT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKGl0ZW0uaW5kZXggPiAwKSB7CiAgICAgICAgICAgIC8vIHVwZGF0ZSBpbmZvIAogICAgICAgICAgICBpdGVtLnByaWNlID0gX3ByaWNlOwogICAgICAgICAgICBpdGVtLnJlbGVhc2VUaW1lID0gX3JlbGVhc2VUaW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZEJvcnJvd2luZ0l0ZW0obXNnLnNlbmRlciwgX29iaklkLCBfcHJpY2UsIF9yZWxlYXNlVGltZSk7CiAgICAgICAgfQogICAgICAgIEV2ZW50T2ZmZXJCb3Jyb3dpbmdJdGVtKG1zZy5zZW5kZXIsIF9vYmpJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZUJvcnJvd2luZ09mZmVySXRlbSh1aW50NjQgX29iaklkKSByZXF1aXJlRGF0YUNvbnRyYWN0IHJlcXVpcmVCYXR0bGVDb250cmFjdCBpc0FjdGl2ZSBleHRlcm5hbCB7CiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W19vYmpJZF07CiAgICAgICAgaWYgKGl0ZW0uaW5kZXggPT0gMCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgaWYgKGl0ZW0ub3duZXIgIT0gbXNnLnNlbmRlcikKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKGl0ZW0ubGVudCA9PSB0cnVlKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAKICAgICAgICByZW1vdmVCb3Jyb3dpbmdJdGVtKF9vYmpJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJvcnJvd0l0ZW0odWludDY0IF9vYmpJZCkgcmVxdWlyZURhdGFDb250cmFjdCByZXF1aXJlQmF0dGxlQ29udHJhY3QgaXNBY3RpdmUgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W19vYmpJZF07CiAgICAgICAgaWYgKGl0ZW0uaW5kZXggPT0gMCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKGl0ZW0ubGVudCA9PSB0cnVlKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB1aW50MjU2IGl0ZW1QcmljZSA9IGl0ZW0ucHJpY2U7CiAgICAgICAgaWYgKGl0ZW1QcmljZSAhPSBtc2cudmFsdWUpCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIAoKICAgICAgICAvLyBjaGVjayBvYmoKICAgICAgICBFdGhlcmVtb25EYXRhQmFzZSBkYXRhID0gRXRoZXJlbW9uRGF0YUJhc2UoZGF0YUNvbnRyYWN0KTsKICAgICAgICBNb25zdGVyT2JqQWNjIG1lbW9yeSBvYmo7CiAgICAgICAgdWludDMyIF8gPSAwOwogICAgICAgIChvYmoubW9uc3RlcklkLCBvYmouY2xhc3NJZCwgb2JqLnRyYWluZXIsIG9iai5leHAsIF8sIF8sIG9iai5jcmVhdGVUaW1lKSA9IGRhdGEuZ2V0TW9uc3Rlck9iaihfb2JqSWQpOwogICAgICAgIGlmIChvYmoubW9uc3RlcklkICE9IF9vYmpJZCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgLy8gY2FuIG5vdCBib3Jyb3cgZnJvbSB5b3Vyc2VsZgogICAgICAgIGlmIChvYmoudHJhaW5lciA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50MjU2IGZlZSA9IGl0ZW1QcmljZSAqIHRyYWRpbmdGZWVQZXJjZW50YWdlIC8gMTAwOwogICAgICAgIGl0ZW0uYm9ycm93ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGl0ZW0ucmVsZWFzZVRpbWUgKz0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGl0ZW0ubGVudCA9IHRydWU7CiAgICAgICAgYWRkcmVzcyBvbGRPd25lciA9IG9iai50cmFpbmVyOwogICAgICAgIHRyYW5zZmVyTW9uc3Rlcihtc2cuc2VuZGVyLCBfb2JqSWQpOwogICAgICAgIG9sZE93bmVyLnRyYW5zZmVyKHNhZmVTdWJ0cmFjdChpdGVtUHJpY2UsIGZlZSkpOwogICAgICAgIGFkZEl0ZW1MZW5kaW5nTGlzdChvbGRPd25lciwgX29iaklkKTsKICAgICAgICBFdmVudEFjY2VwdEJvcnJvd0l0ZW0obXNnLnNlbmRlciwgX29iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0QmFja0xlbmRpbmdJdGVtKHVpbnQ2NCBfb2JqSWQpIHJlcXVpcmVEYXRhQ29udHJhY3QgcmVxdWlyZUJhdHRsZUNvbnRyYWN0IGlzQWN0aXZlIGV4dGVybmFsIHsKICAgICAgICBCb3Jyb3dJdGVtIHN0b3JhZ2UgaXRlbSA9IGJvcnJvd2luZ0RpY3RbX29iaklkXTsKICAgICAgICBpZiAoaXRlbS5pbmRleCA9PSAwKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBpZiAoaXRlbS5sZW50ID09IGZhbHNlKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBpZiAoaXRlbS5yZWxlYXNlVGltZSA+IGJsb2NrLnRpbWVzdGFtcCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gaXRlbS5vd25lcikKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgcmVtb3ZlQm9ycm93aW5nSXRlbShfb2JqSWQpOwogICAgICAgIHRyYW5zZmVyTW9uc3Rlcihtc2cuc2VuZGVyLCBfb2JqSWQpOwogICAgICAgIHJlbW92ZUl0ZW1MZW5kaW5nTGlzdChtc2cuc2VuZGVyLCBfb2JqSWQpOwogICAgICAgIEV2ZW50R2V0QmFja0l0ZW0obXNnLnNlbmRlciwgX29iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZnJlZVRyYW5zZmVySXRlbSh1aW50NjQgX29iaklkLCBhZGRyZXNzIF9yZWNlaXZlcikgcmVxdWlyZURhdGFDb250cmFjdCByZXF1aXJlQmF0dGxlQ29udHJhY3QgZXh0ZXJuYWwgewogICAgICAgIC8vIG1ha2Ugc3VyZSBpdCBpcyBub3Qgb24gc2FsZSAKICAgICAgICBpZiAoc2VsbGluZ0RpY3RbX29iaklkXS5wcmljZSA+IDApCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIC8vIG5vdCBvbiBib3Jyb3dpbmcKICAgICAgICBCb3Jyb3dJdGVtIHN0b3JhZ2UgaXRlbSA9IGJvcnJvd2luZ0RpY3RbX29iaklkXTsKICAgICAgICBpZiAoaXRlbS5pbmRleCA+IDApCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIC8vIG5vdCBvbiBiYXR0bGUgCiAgICAgICAgRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlIGJhdHRsZSA9IEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZShiYXR0bGVDb250cmFjdCk7CiAgICAgICAgaWYgKGJhdHRsZS5pc09uQmF0dGxlKF9vYmpJZCkpCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIAogICAgICAgIC8vIGNoZWNrIG93bmVyc2hpcAogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwogICAgICAgIE1vbnN0ZXJPYmpBY2MgbWVtb3J5IG9iajsKICAgICAgICB1aW50MzIgXyA9IDA7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgXywgXywgb2JqLmNyZWF0ZVRpbWUpID0gZGF0YS5nZXRNb25zdGVyT2JqKF9vYmpJZCk7CiAgICAgICAgCiAgICAgICAgaWYgKG9iai5tb25zdGVySWQgIT0gX29iaklkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAob2JqLnRyYWluZXIgIT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdHJhbnNmZXJNb25zdGVyKF9yZWNlaXZlciwgX29iaklkKTsKICAgICAgICBFdmVudEZyZWVUcmFuc2Zlckl0ZW0obXNnLnNlbmRlciwgX3JlY2VpdmVyLCBfb2JqSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiByZWxlYXNlKHVpbnQ2NCBfb2JqSWQpIHJlcXVpcmVEYXRhQ29udHJhY3QgcmVxdWlyZUJhdHRsZUNvbnRyYWN0IGV4dGVybmFsIHsKICAgICAgICAvLyBtYWtlIHN1cmUgaXQgaXMgbm90IG9uIHNhbGUgCiAgICAgICAgaWYgKHNlbGxpbmdEaWN0W19vYmpJZF0ucHJpY2UgPiAwKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAvLyBub3Qgb24gYm9ycm93aW5nCiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W19vYmpJZF07CiAgICAgICAgaWYgKGl0ZW0uaW5kZXggPiAwKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAvLyBub3Qgb24gYmF0dGxlIAogICAgICAgIEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZSBiYXR0bGUgPSBFdGhlcmVtb25CYXR0bGVJbnRlcmZhY2UoYmF0dGxlQ29udHJhY3QpOwogICAgICAgIGlmIChiYXR0bGUuaXNPbkJhdHRsZShfb2JqSWQpKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAKICAgICAgICAvLyBjaGVjayBvd25lcnNoaXAKICAgICAgICBFdGhlcmVtb25EYXRhQmFzZSBkYXRhID0gRXRoZXJlbW9uRGF0YUJhc2UoZGF0YUNvbnRyYWN0KTsKICAgICAgICBNb25zdGVyT2JqQWNjIG1lbW9yeSBvYmo7CiAgICAgICAgdWludDMyIF8gPSAwOwogICAgICAgIChvYmoubW9uc3RlcklkLCBvYmouY2xhc3NJZCwgb2JqLnRyYWluZXIsIG9iai5leHAsIF8sIF8sIG9iai5jcmVhdGVUaW1lKSA9IGRhdGEuZ2V0TW9uc3Rlck9iaihfb2JqSWQpOwogICAgICAgIAogICAgICAgIC8vIGNhbiBub3QgcmVsZWFzZSBnZW4gMAogICAgICAgIGlmIChvYmouY2xhc3NJZCA8PSBHRU4wX05PKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAob2JqLm1vbnN0ZXJJZCAhPSBfb2JqSWQpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChvYmoudHJhaW5lciAhPSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBkYXRhLnJlbW92ZU1vbnN0ZXJJZE1hcHBpbmcobXNnLnNlbmRlciwgX29iaklkKTsKICAgICAgICBFdmVudFJlbGVhc2UobXNnLnNlbmRlciwgX29iaklkKTsKICAgIH0KICAgIAogICAgLy8gcmVhZCBhY2Nlc3MKICAgIAogICAgZnVuY3Rpb24gZ2V0QmFzaWNPYmpJbmZvKHVpbnQ2NCBfb2JqSWQpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQzMiwgYWRkcmVzcywgdWludDMyLCB1aW50MzIpewogICAgICAgIEV0aGVyZW1vbkRhdGFCYXNlIGRhdGEgPSBFdGhlcmVtb25EYXRhQmFzZShkYXRhQ29udHJhY3QpOwogICAgICAgIE1vbnN0ZXJPYmpBY2MgbWVtb3J5IG9iajsKICAgICAgICAob2JqLm1vbnN0ZXJJZCwgb2JqLmNsYXNzSWQsIG9iai50cmFpbmVyLCBvYmouZXhwLCBvYmouY3JlYXRlSW5kZXgsIG9iai5sYXN0Q2xhaW1JbmRleCwgb2JqLmNyZWF0ZVRpbWUpID0gZGF0YS5nZXRNb25zdGVyT2JqKF9vYmpJZCk7CiAgICAgICAgcmV0dXJuIChvYmouY2xhc3NJZCwgb2JqLnRyYWluZXIsIG9iai5leHAsIG9iai5jcmVhdGVJbmRleCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEJhc2ljT2JqSW5mb1dpdGhCcCh1aW50NjQgX29iaklkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MzIsIHVpbnQzMiwgdWludDMyLCB1aW50NjQpIHsKICAgICAgICBFdGhlcmVtb25EYXRhQmFzZSBkYXRhID0gRXRoZXJlbW9uRGF0YUJhc2UoZGF0YUNvbnRyYWN0KTsKICAgICAgICBNb25zdGVyT2JqQWNjIG1lbW9yeSBvYmo7CiAgICAgICAgKG9iai5tb25zdGVySWQsIG9iai5jbGFzc0lkLCBvYmoudHJhaW5lciwgb2JqLmV4cCwgb2JqLmNyZWF0ZUluZGV4LCBvYmoubGFzdENsYWltSW5kZXgsIG9iai5jcmVhdGVUaW1lKSA9IGRhdGEuZ2V0TW9uc3Rlck9iaihfb2JqSWQpOwogICAgICAgIEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZSBiYXR0bGUgPSBFdGhlcmVtb25CYXR0bGVJbnRlcmZhY2UoYmF0dGxlQ29udHJhY3QpOwogICAgICAgIHVpbnQ2NCBicCA9IGJhdHRsZS5nZXRNb25zdGVyQ1AoX29iaklkKTsKICAgICAgICByZXR1cm4gKG9iai5jbGFzc0lkLCBvYmouZXhwLCBvYmouY3JlYXRlSW5kZXgsIGJwKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0VG90YWxTZWxsaW5nSXRlbSgpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBzZWxsaW5nTGlzdC5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U2VsbGluZ0l0ZW0odWludCBfaW5kZXgpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludDY0IG9iaklkLCB1aW50MzIgY2xhc3NJZCwgdWludDMyIGV4cCwgdWludDY0IGJwLCBhZGRyZXNzIHRyYWluZXIsIHVpbnQgY3JlYXRlSW5kZXgsIHVpbnQyNTYgcHJpY2UpIHsKICAgICAgICBvYmpJZCA9IHNlbGxpbmdMaXN0W19pbmRleF07CiAgICAgICAgaWYgKG9iaklkID4gMCkgewogICAgICAgICAgICAoY2xhc3NJZCwgdHJhaW5lciwgZXhwLCBjcmVhdGVJbmRleCkgPSBnZXRCYXNpY09iakluZm8ob2JqSWQpOwogICAgICAgICAgICBFdGhlcmVtb25CYXR0bGVJbnRlcmZhY2UgYmF0dGxlID0gRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlKGJhdHRsZUNvbnRyYWN0KTsKICAgICAgICAgICAgYnAgPSBiYXR0bGUuZ2V0TW9uc3RlckNQKG9iaklkKTsKICAgICAgICAgICAgcHJpY2UgPSBzZWxsaW5nRGljdFtvYmpJZF0ucHJpY2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRTZWxsaW5nSXRlbUJ5T2JqSWQodWludDY0IF9vYmpJZCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyh1aW50MzIgY2xhc3NJZCwgdWludDMyIGV4cCwgdWludDY0IGJwLCBhZGRyZXNzIHRyYWluZXIsIHVpbnQgY3JlYXRlSW5kZXgsIHVpbnQyNTYgcHJpY2UpIHsKICAgICAgICBwcmljZSA9IHNlbGxpbmdEaWN0W19vYmpJZF0ucHJpY2U7CiAgICAgICAgaWYgKHByaWNlID4gMCkgewogICAgICAgICAgICAoY2xhc3NJZCwgdHJhaW5lciwgZXhwLCBjcmVhdGVJbmRleCkgPSBnZXRCYXNpY09iakluZm8oX29iaklkKTsKICAgICAgICAgICAgRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlIGJhdHRsZSA9IEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZShiYXR0bGVDb250cmFjdCk7CiAgICAgICAgICAgIGJwID0gYmF0dGxlLmdldE1vbnN0ZXJDUChfb2JqSWQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb3RhbEJvcnJvd2luZ0l0ZW0oKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gYm9ycm93aW5nTGlzdC5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Qm9ycm93aW5nSXRlbSh1aW50IF9pbmRleCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyh1aW50NjQgb2JqSWQsIGFkZHJlc3Mgb3duZXIsIGFkZHJlc3MgYm9ycm93ZXIsIAogICAgICAgIHVpbnQyNTYgcHJpY2UsIGJvb2wgbGVudCwgdWludCByZWxlYXNlVGltZSwgdWludDMyIGNsYXNzSWQsIHVpbnQzMiBleHAsIHVpbnQzMiBjcmVhdGVJbmRleCwgdWludDY0IGJwKSB7CiAgICAgICAgb2JqSWQgPSBib3Jyb3dpbmdMaXN0W19pbmRleF07CiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W29iaklkXTsKICAgICAgICBvd25lciA9IGl0ZW0ub3duZXI7CiAgICAgICAgYm9ycm93ZXIgPSBpdGVtLmJvcnJvd2VyOwogICAgICAgIHByaWNlID0gaXRlbS5wcmljZTsKICAgICAgICBsZW50ID0gaXRlbS5sZW50OwogICAgICAgIHJlbGVhc2VUaW1lID0gaXRlbS5yZWxlYXNlVGltZTsKICAgICAgICAKICAgICAgICAoY2xhc3NJZCwgZXhwLCBjcmVhdGVJbmRleCwgYnApID0gZ2V0QmFzaWNPYmpJbmZvV2l0aEJwKG9iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0Qm9ycm93aW5nSXRlbUJ5T2JqSWQodWludDY0IF9vYmpJZCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyh1aW50IGluZGV4LCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGJvcnJvd2VyLCAKICAgICAgICB1aW50MjU2IHByaWNlLCBib29sIGxlbnQsIHVpbnQgcmVsZWFzZVRpbWUsIHVpbnQzMiBjbGFzc0lkLCB1aW50MzIgZXhwLCB1aW50MzIgY3JlYXRlSW5kZXgsIHVpbnQ2NCBicCkgewogICAgICAgIEJvcnJvd0l0ZW0gc3RvcmFnZSBpdGVtID0gYm9ycm93aW5nRGljdFtfb2JqSWRdOwogICAgICAgIGluZGV4ID0gaXRlbS5pbmRleDsKICAgICAgICBvd25lciA9IGl0ZW0ub3duZXI7CiAgICAgICAgYm9ycm93ZXIgPSBpdGVtLmJvcnJvd2VyOwogICAgICAgIHByaWNlID0gaXRlbS5wcmljZTsKICAgICAgICBsZW50ID0gaXRlbS5sZW50OwogICAgICAgIHJlbGVhc2VUaW1lID0gaXRlbS5yZWxlYXNlVGltZTsKICAgICAgICAKICAgICAgICAoY2xhc3NJZCwgZXhwLCBjcmVhdGVJbmRleCwgYnApID0gZ2V0QmFzaWNPYmpJbmZvV2l0aEJwKF9vYmpJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFNvbGRJdGVtTGVuZ3RoKGFkZHJlc3MgX3RyYWluZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBzb2xkTGlzdFtfdHJhaW5lcl0ubGVuZ3RoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRTb2xkSXRlbShhZGRyZXNzIF90cmFpbmVyLCB1aW50IF9pbmRleCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyh1aW50NjQgb2JqSWQsIHVpbnQzMiBjbGFzc0lkLCB1aW50MzIgZXhwLCB1aW50NjQgYnAsIGFkZHJlc3MgY3VycmVudE93bmVyLCAKICAgICAgICB1aW50IGNyZWF0ZUluZGV4LCB1aW50MjU2IHByaWNlLCB1aW50IHRpbWUpIHsKICAgICAgICBpZiAoX2luZGV4ID4gc29sZExpc3RbX3RyYWluZXJdLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIFNvbGRJdGVtIG1lbW9yeSBzb2xkSXRlbSA9IHNvbGRMaXN0W190cmFpbmVyXVtfaW5kZXhdOwogICAgICAgIG9iaklkID0gc29sZEl0ZW0ub2JqSWQ7CiAgICAgICAgcHJpY2UgPSBzb2xkSXRlbS5wcmljZTsKICAgICAgICB0aW1lID0gc29sZEl0ZW0udGltZTsKICAgICAgICBpZiAob2JqSWQgPiAwKSB7CiAgICAgICAgICAgIChjbGFzc0lkLCBjdXJyZW50T3duZXIsIGV4cCwgY3JlYXRlSW5kZXgpID0gZ2V0QmFzaWNPYmpJbmZvKG9iaklkKTsKICAgICAgICAgICAgRXRoZXJlbW9uQmF0dGxlSW50ZXJmYWNlIGJhdHRsZSA9IEV0aGVyZW1vbkJhdHRsZUludGVyZmFjZShiYXR0bGVDb250cmFjdCk7CiAgICAgICAgICAgIGJwID0gYmF0dGxlLmdldE1vbnN0ZXJDUChvYmpJZCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRMZW5kaW5nSXRlbUxlbmd0aChhZGRyZXNzIF90cmFpbmVyKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gbGVuZGluZ0xpc3RbX3RyYWluZXJdLmxlbmd0aDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0TGVuZGluZ0l0ZW1JbmZvKGFkZHJlc3MgX3RyYWluZXIsIHVpbnQgX2luZGV4KSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQ2NCBvYmpJZCwgYWRkcmVzcyBvd25lciwgYWRkcmVzcyBib3Jyb3dlciwgCiAgICAgICAgdWludDI1NiBwcmljZSwgYm9vbCBsZW50LCB1aW50IHJlbGVhc2VUaW1lLCB1aW50MzIgY2xhc3NJZCwgdWludDMyIGV4cCwgdWludDMyIGNyZWF0ZUluZGV4LCB1aW50NjQgYnApIHsKICAgICAgICBpZiAoX2luZGV4ID4gbGVuZGluZ0xpc3RbX3RyYWluZXJdLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIG9iaklkID0gbGVuZGluZ0xpc3RbX3RyYWluZXJdW19pbmRleF07CiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W29iaklkXTsKICAgICAgICBvd25lciA9IGl0ZW0ub3duZXI7CiAgICAgICAgYm9ycm93ZXIgPSBpdGVtLmJvcnJvd2VyOwogICAgICAgIHByaWNlID0gaXRlbS5wcmljZTsKICAgICAgICBsZW50ID0gaXRlbS5sZW50OwogICAgICAgIHJlbGVhc2VUaW1lID0gaXRlbS5yZWxlYXNlVGltZTsKICAgICAgICAKICAgICAgICAoY2xhc3NJZCwgZXhwLCBjcmVhdGVJbmRleCwgYnApID0gZ2V0QmFzaWNPYmpJbmZvV2l0aEJwKG9iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0VHJhZGluZ0luZm8odWludDY0IF9vYmpJZCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyh1aW50MjU2IHNlbGxpbmdQcmljZSwgdWludDI1NiBsZW5kaW5nUHJpY2UsIGJvb2wgbGVudCwgdWludCByZWxlYXNlVGltZSkgewogICAgICAgIHNlbGxpbmdQcmljZSA9IHNlbGxpbmdEaWN0W19vYmpJZF0ucHJpY2U7CiAgICAgICAgQm9ycm93SXRlbSBzdG9yYWdlIGl0ZW0gPSBib3Jyb3dpbmdEaWN0W19vYmpJZF07CiAgICAgICAgbGVuZGluZ1ByaWNlID0gaXRlbS5wcmljZTsKICAgICAgICBsZW50ID0gaXRlbS5sZW50OwogICAgICAgIHJlbGVhc2VUaW1lID0gaXRlbS5yZWxlYXNlVGltZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaXNPblRyYWRpbmcodWludDY0IF9vYmpJZCkgY29uc3RhbnQgZXh0ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIChzZWxsaW5nRGljdFtfb2JqSWRdLnByaWNlID4gMCB8fCBib3Jyb3dpbmdEaWN0W19vYmpJZF0ub3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICB9Cn0='.
	

]
