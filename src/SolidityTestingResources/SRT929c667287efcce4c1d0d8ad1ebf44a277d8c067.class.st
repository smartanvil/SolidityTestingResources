Class {
	#name : #SRT929c667287efcce4c1d0d8ad1ebf44a277d8c067,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT929c667287efcce4c1d0d8ad1ebf44a277d8c067 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8qKgoqIEBub3RpY2UgQU5DSVhDSEFJTiBUT0tFTiBDT05UUkFDVAoqIEBkZXYgRVJDLTIwIFRva2VuIFN0YW5kYXIgQ29tcGxpYW50CiogQGF1dGhvciBGYXJlcyBBLiBBa2VsIEMuIDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI0MDI2NmUyMTJlMzQyZjJlMjkyZjZlMjEyYjI1MmMwMDI3MmQyMTI5MmM2ZTIzMmYyZCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4KKi8KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGggYnkgT3BlblplcHBlbGluCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogICAgfQoKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMFRva2VuSW50ZXJmYWNlCiAqIEBkZXYgVG9rZW4gY29udHJhY3QgaW50ZXJmYWNlIGZvciBleHRlcm5hbCB1c2UKICovCmNvbnRyYWN0IEVSQzIwVG9rZW5JbnRlcmZhY2UgewoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICB9CgoKLyoqCiogQHRpdGxlIEVSQzIwVG9rZW4KKiBAbm90aWNlIFRva2VuIGRlZmluaXRpb24gY29udHJhY3QKKi8KY29udHJhY3QgRVJDMjBUb2tlbiBpcyBFUkMyMFRva2VuSW50ZXJmYWNlIHsgLy9TdGFuZGFyIGRlZmluaXRpb24gb2YgYW4gRVJDMjBUb2tlbgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7IC8vU2FmZU1hdGggaXMgdXNlZCBmb3IgdWludDI1NiBvcGVyYXRpb25zCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOyAvL0EgbWFwcGluZyBvZiBhbGwgYmFsYW5jZXMgcGVyIGFkZHJlc3MKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsgLy9BIG1hcHBpbmcgb2YgYWxsIGFsbG93YW5jZXMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgCiAgICAvKioKICAgICogQG5vdGljZSBHZXQgdGhlIGJhbGFuY2Ugb2YgYW4gX293bmVyIGFkZHJlc3MuCiAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gYmUgcXVlcnkuCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIHRyYW5zZmVyIF92YWx1ZSB0b2tlbnMgdG8gYWRkcmVzcyBfdG8KICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUgaWYgZG9uZQogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOyAvL0lmIHlvdSBkb250IHdhbnQgdGhhdCBwZW9wbGUgZGVzdHJveSB0b2tlbgogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBUcmFuc2ZlciBfdmFsdWUgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90byB1c2luZyBhbGxvd2FuY2UgbXNnLnNlbmRlciBhbGxvd2FuY2Ugb24gX2Zyb20KICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHdoZXJlIHRva2VucyBjb21lcy4KICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUgaWYgZG9uZQogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsgLy9JZiB5b3UgZG9udCB3YW50IHRoYXQgcGVvcGxlIGRlc3Ryb3kgdG9rZW4KICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIEFzc2lnbiBhbGxvd2FuY2UgX3ZhbHVlIHRvIF9zcGVuZGVyIGFkZHJlc3MgdG8gdXNlIHRoZSBtc2cuc2VuZGVyIGJhbGFuY2UKICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHRvIGJlIGFsbG93ZWQgdG8gc3BlbmQuCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSBhbGxvd2VkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUKICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIEdldCB0aGUgYWxsb3dhbmNlIG9mIGFuIHNwZWNpZmllZCBhZGRyZXNzIHRvIHVzZSBhbm90aGVyIGFkZHJlc3MgYmFsYW5jZS4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgb3duZXIgb2YgdGhlIHRva2Vucy4KICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhbGxvd2VkIHNwZW5kZXIuCiAgICAqIEByZXR1cm4gcmVtYWluaW5nIHdpdGggdGhlIGFsbG93YW5jZSB2YWx1ZQogICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBMb2cgRXZlbnRzCiAgICAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCn0KCi8qKgoqIEB0aXRsZSBBc3NldAoqIEBub3RpY2UgVG9rZW4gY3JlYXRpb24uCiogQGRldiBBbiBFUkMyMCBUb2tlbgoqLwpjb250cmFjdCBBc3NldCBpcyBFUkMyMFRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdBTkNJWENIQUlOJzsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdBSVgnOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzEnOwogICAgCiAgICAvKioKICAgICogQG5vdGljZSB0b2tlbiBjb250cnVjdG9yLgogICAgKi8KICAgIGZ1bmN0aW9uIEFzc2V0KCkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IDIwMDAwMDAwMCAqICgxMCAqKiBkZWNpbWFscyk7IC8vVG9rZW5zIGluaXRpYWwgc3VwcGx5OwogICAgICAgIGJhbGFuY2VzWzB4RkFCNjM2OGIwRjdiZTYwYzU3M2E2NTYyZDgyNDY5QjVFRDllN2VFNl0gPSB0b3RhbFN1cHBseS5kaXYoMTAwMCk7IC8vMC4xJSBmaXhlZCBmb3IgY29udHJhY3Qgd3JpdGVyCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseS5zdWIoYmFsYW5jZXNbMHhGQUI2MzY4YjBGN2JlNjBjNTczYTY1NjJkODI0NjlCNUVEOWU3ZUU2XSk7CiAgICAgICAgVHJhbnNmZXIoMCwgdGhpcywgdG90YWxTdXBwbHkpOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCAweEZBQjYzNjhiMEY3YmU2MGM1NzNhNjU2MmQ4MjQ2OUI1RUQ5ZTdlRTYsIGJhbGFuY2VzWzB4RkFCNjM2OGIwRjdiZTYwYzU3M2E2NTYyZDgyNDY5QjVFRDllN2VFNl0pOyAgICAgICAgCiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAbm90aWNlIHRoaXMgY29udHJhY3Qgd2lsbCByZXZlcnQgb24gZGlyZWN0IG5vbi1mdW5jdGlvbiBjYWxscwogICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGhhbmRsZSBjYWxsYmFjayBjYWxscwogICAgKi8KICAgIGZ1bmN0aW9uKCkgcHVibGljIHsKICAgICAgICByZXZlcnQoKTsKICAgIH0KCn0='.
	

]
