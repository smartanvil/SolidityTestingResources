Class {
	#name : #SRTb3d5b5cea80ac61083ec9948b4b507a0f22df71a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb3d5b5cea80ac61083ec9948b4b507a0f22df71a >> base64 [
	^ ''.
	

]
