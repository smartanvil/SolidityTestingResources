Class {
	#name : #SRT3c97676ec12e37ca91cc31f03ea6c17d7bbd52ad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c97676ec12e37ca91cc31f03ea6c17d7bbd52ad >> base64 [
	^ ''.
	

]
