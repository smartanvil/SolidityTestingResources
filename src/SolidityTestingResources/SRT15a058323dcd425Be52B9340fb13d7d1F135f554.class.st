Class {
	#name : #SRT15a058323dcd425Be52B9340fb13d7d1F135f554,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15a058323dcd425Be52B9340fb13d7d1F135f554 >> base64 [
	^ ''.
	

]
