Class {
	#name : #SRT0f170120733474c6ec7daf6ae6aeeeb8b645e92c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f170120733474c6ec7daf6ae6aeeeb8b645e92c >> base64 [
	^ ''.
	

]
