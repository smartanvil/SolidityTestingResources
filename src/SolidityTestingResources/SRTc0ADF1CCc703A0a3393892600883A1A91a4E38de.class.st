Class {
	#name : #SRTc0ADF1CCc703A0a3393892600883A1A91a4E38de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0ADF1CCc703A0a3393892600883A1A91a4E38de >> base64 [
	^ ''.
	

]
