Class {
	#name : #SRT044dd17bbbcbf1cf65f543918561bf8cf8130e7b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT044dd17bbbcbf1cf65f543918561bf8cf8130e7b >> base64 [
	^ ''.
	

]
