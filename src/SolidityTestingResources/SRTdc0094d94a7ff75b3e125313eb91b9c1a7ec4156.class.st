Class {
	#name : #SRTdc0094d94a7ff75b3e125313eb91b9c1a7ec4156,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdc0094d94a7ff75b3e125313eb91b9c1a7ec4156 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSB0b2tlbkJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKHRva2VuQmFsYW5jZXNbbXNnLnNlbmRlcl0+PV92YWx1ZSk7CiAgICB0b2tlbkJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG9rZW5CYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIHRva2VuQmFsYW5jZXNbX3RvXSA9IHRva2VuQmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gdG9rZW5CYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KY29udHJhY3QgRVJQIGlzIEJhc2ljVG9rZW4sT3duYWJsZSB7CgogICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgCiAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFUlAiOwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJFUlAiOwogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAgCiAgIGFkZHJlc3MgcHVibGljIGV0aFN0b3JlID0gMHhEY2JGRThkNDFENDU1OWIzRUFEMzE3OWZhN0JiM2FkNzdFYURhNTY0OwogICB1aW50MjU2IHB1YmxpYyBSRU1BSU5JTkdfU1VQUExZID0gMTAwMDAwMDAwMDAwICAqICgxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7CiAgIGV2ZW50IERlYnVnKHN0cmluZyBtZXNzYWdlLCBhZGRyZXNzIGFkZHIsIHVpbnQyNTYgbnVtYmVyKTsKICAgZXZlbnQgTWVzc2FnZShzdHJpbmcgbWVzc2FnZSk7CiAgICBzdHJpbmcgYnV5TWVzc2FnZTsKICAKICBhZGRyZXNzIHdhbGxldDsKICAgLyoqCiAgICogQGRldiBDb250cnVjdG9yIHRoYXQgZ2l2ZXMgbXNnLnNlbmRlciBhbGwgb2YgZXhpc3RpbmcgdG9rZW5zLgogICAqLwogICAgZnVuY3Rpb24gRVJQKGFkZHJlc3MgX3dhbGxldCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG90YWxTdXBwbHkgPSBSRU1BSU5JTkdfU1VQUExZOwogICAgICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICAgICAgdG9rZW5CYWxhbmNlc1t3YWxsZXRdID0gdG90YWxTdXBwbHk7ICAgLy9TaW5jZSB3ZSBkaXZpZGVkIHRoZSB0b2tlbiBpbnRvIDEwXjE4IHBhcnRzCiAgICB9CiAgICAKICAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB0b2tlbkFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1tmcm9tXSA+PSB0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICB0b2tlbkJhbGFuY2VzW3RvXSA9IHRva2VuQmFsYW5jZXNbdG9dLmFkZCh0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICB0b2tlbkJhbGFuY2VzW2Zyb21dID0gdG9rZW5CYWxhbmNlc1tmcm9tXS5zdWIodG9rZW5BbW91bnQpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgIFJFTUFJTklOR19TVVBQTFkgPSB0b2tlbkJhbGFuY2VzW3dhbGxldF07CiAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB0b2tlbkFtb3VudCk7IAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRUb2tlbkJhbGFuY2UoYWRkcmVzcyB1c2VyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBiYWxhbmNlID0gdG9rZW5CYWxhbmNlc1t1c2VyXTsgLy8gc2hvdyB0b2tlbiBiYWxhbmNlIGluIGZ1bGwgdG9rZW5zIG5vdCBwYXJ0CiAgICAgICAgcmV0dXJuIGJhbGFuY2U7CiAgICB9Cn0='.
	

]
