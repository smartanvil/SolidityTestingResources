Class {
	#name : #SRT0d49b24f068a9a3ef60576c7a915ffd6844d6fdd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d49b24f068a9a3ef60576c7a915ffd6844d6fdd >> base64 [
	^ ''.
	

]
