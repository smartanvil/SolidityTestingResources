Class {
	#name : #SRTd836715f1c6a249237feb47fa4d4186591da0f22,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd836715f1c6a249237feb47fa4d4186591da0f22 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgppbnRlcmZhY2UgQ29udmVyc2lvblJhdGVzSW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiByZWNvcmRJbWJhbGFuY2UoCiAgICAgICAgRVJDMjAgdG9rZW4sCiAgICAgICAgaW50IGJ1eUFtb3VudCwKICAgICAgICB1aW50IHJhdGVVcGRhdGVCbG9jaywKICAgICAgICB1aW50IGN1cnJlbnRCbG9jawogICAgKQogICAgICAgIHB1YmxpYzsKCiAgICBmdW5jdGlvbiBnZXRSYXRlKEVSQzIwIHRva2VuLCB1aW50IGN1cnJlbnRCbG9ja051bWJlciwgYm9vbCBidXksIHVpbnQgcXR5KSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQpOwp9Cgpjb250cmFjdCBQZXJtaXNzaW9uR3JvdXBzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKICAgIGFkZHJlc3MgcHVibGljIHBlbmRpbmdBZG1pbjsKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgaW50ZXJuYWwgb3BlcmF0b3JzOwogICAgbWFwcGluZyhhZGRyZXNzPT5ib29sKSBpbnRlcm5hbCBhbGVydGVyczsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBvcGVyYXRvcnNHcm91cDsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBhbGVydGVyc0dyb3VwOwoKICAgIGZ1bmN0aW9uIFBlcm1pc3Npb25Hcm91cHMoKSBwdWJsaWMgewogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRvcigpIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWxlcnRlcigpIHsKICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE9wZXJhdG9ycyAoKSBleHRlcm5hbCB2aWV3IHJldHVybnMoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIG9wZXJhdG9yc0dyb3VwOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFsZXJ0ZXJzICgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gYWxlcnRlcnNHcm91cDsKICAgIH0KCiAgICBldmVudCBUcmFuc2ZlckFkbWluUGVuZGluZyhhZGRyZXNzIHBlbmRpbmdBZG1pbik7CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzLgogICAgICogQHBhcmFtIG5ld0FkbWluIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG5ld0FkbWluICE9IGFkZHJlc3MoMCkpOwogICAgICAgIFRyYW5zZmVyQWRtaW5QZW5kaW5nKHBlbmRpbmdBZG1pbik7CiAgICAgICAgcGVuZGluZ0FkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgZXZlbnQgQWRtaW5DbGFpbWVkKCBhZGRyZXNzIG5ld0FkbWluLCBhZGRyZXNzIHByZXZpb3VzQWRtaW4pOwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzIHRvIGZpbmFsaXplIHRoZSBjaGFuZ2UgYWRtaW4gcHJvY2Vzcy4KICAgICAqLwogICAgZnVuY3Rpb24gY2xhaW1BZG1pbigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShwZW5kaW5nQWRtaW4gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgQWRtaW5DbGFpbWVkKHBlbmRpbmdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gcGVuZGluZ0FkbWluOwogICAgICAgIHBlbmRpbmdBZG1pbiA9IGFkZHJlc3MoMCk7CiAgICB9CgogICAgZXZlbnQgQWxlcnRlckFkZGVkIChhZGRyZXNzIG5ld0FsZXJ0ZXIsIGJvb2wgaXNBZGQpOwoKICAgIGZ1bmN0aW9uIGFkZEFsZXJ0ZXIoYWRkcmVzcyBuZXdBbGVydGVyKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFhbGVydGVyc1tuZXdBbGVydGVyXSk7IC8vIHByZXZlbnQgZHVwbGljYXRlcy4KICAgICAgICBBbGVydGVyQWRkZWQobmV3QWxlcnRlciwgdHJ1ZSk7CiAgICAgICAgYWxlcnRlcnNbbmV3QWxlcnRlcl0gPSB0cnVlOwogICAgICAgIGFsZXJ0ZXJzR3JvdXAucHVzaChuZXdBbGVydGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVBbGVydGVyIChhZGRyZXNzIGFsZXJ0ZXIpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoYWxlcnRlcnNbYWxlcnRlcl0pOwogICAgICAgIGFsZXJ0ZXJzW2FsZXJ0ZXJdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsZXJ0ZXJzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGFsZXJ0ZXJzR3JvdXBbaV0gPT0gYWxlcnRlcikgewogICAgICAgICAgICAgICAgYWxlcnRlcnNHcm91cFtpXSA9IGFsZXJ0ZXJzR3JvdXBbYWxlcnRlcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGFsZXJ0ZXJzR3JvdXAubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBBbGVydGVyQWRkZWQoYWxlcnRlciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZXZlbnQgT3BlcmF0b3JBZGRlZChhZGRyZXNzIG5ld09wZXJhdG9yLCBib29sIGlzQWRkKTsKCiAgICBmdW5jdGlvbiBhZGRPcGVyYXRvcihhZGRyZXNzIG5ld09wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFvcGVyYXRvcnNbbmV3T3BlcmF0b3JdKTsgLy8gcHJldmVudCBkdXBsaWNhdGVzLgogICAgICAgIE9wZXJhdG9yQWRkZWQobmV3T3BlcmF0b3IsIHRydWUpOwogICAgICAgIG9wZXJhdG9yc1tuZXdPcGVyYXRvcl0gPSB0cnVlOwogICAgICAgIG9wZXJhdG9yc0dyb3VwLnB1c2gobmV3T3BlcmF0b3IpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZU9wZXJhdG9yIChhZGRyZXNzIG9wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1tvcGVyYXRvcl0pOwogICAgICAgIG9wZXJhdG9yc1tvcGVyYXRvcl0gPSBmYWxzZTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb3BlcmF0b3JzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKG9wZXJhdG9yc0dyb3VwW2ldID09IG9wZXJhdG9yKSB7CiAgICAgICAgICAgICAgICBvcGVyYXRvcnNHcm91cFtpXSA9IG9wZXJhdG9yc0dyb3VwW29wZXJhdG9yc0dyb3VwLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgb3BlcmF0b3JzR3JvdXAubGVuZ3RoIC09IDE7CiAgICAgICAgICAgICAgICBPcGVyYXRvckFkZGVkKG9wZXJhdG9yLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKaW50ZXJmYWNlIEt5YmVyUmVzZXJ2ZUludGVyZmFjZSB7CgogICAgZnVuY3Rpb24gdHJhZGUoCiAgICAgICAgRVJDMjAgc3JjVG9rZW4sCiAgICAgICAgdWludCBzcmNBbW91bnQsCiAgICAgICAgRVJDMjAgZGVzdFRva2VuLAogICAgICAgIGFkZHJlc3MgZGVzdEFkZHJlc3MsCiAgICAgICAgdWludCBjb252ZXJzaW9uUmF0ZSwKICAgICAgICBib29sIHZhbGlkYXRlCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgICAgIHJldHVybnMoYm9vbCk7CgogICAgZnVuY3Rpb24gZ2V0Q29udmVyc2lvblJhdGUoRVJDMjAgc3JjLCBFUkMyMCBkZXN0LCB1aW50IHNyY1F0eSwgdWludCBibG9ja051bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KTsKfQoKY29udHJhY3QgVXRpbHMgewoKICAgIEVSQzIwIGNvbnN0YW50IGludGVybmFsIEVUSF9UT0tFTl9BRERSRVNTID0gRVJDMjAoMHgwMGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUpOwogICAgdWludCAgY29uc3RhbnQgaW50ZXJuYWwgUFJFQ0lTSU9OID0gKDEwKioxOCk7CiAgICB1aW50ICBjb25zdGFudCBpbnRlcm5hbCBNQVhfUVRZICAgPSAoMTAqKjI4KTsgLy8gMTBCIHRva2VucwogICAgdWludCAgY29uc3RhbnQgaW50ZXJuYWwgTUFYX1JBVEUgID0gKFBSRUNJU0lPTiAqIDEwKio2KTsgLy8gdXAgdG8gMU0gdG9rZW5zIHBlciBFVEgKICAgIHVpbnQgIGNvbnN0YW50IGludGVybmFsIE1BWF9ERUNJTUFMUyA9IDE4OwogICAgdWludCAgY29uc3RhbnQgaW50ZXJuYWwgRVRIX0RFQ0lNQUxTID0gMTg7CiAgICBtYXBwaW5nKGFkZHJlc3M9PnVpbnQpIGludGVybmFsIGRlY2ltYWxzOwoKICAgIGZ1bmN0aW9uIHNldERlY2ltYWxzKEVSQzIwIHRva2VuKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHRva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKSBkZWNpbWFsc1t0b2tlbl0gPSBFVEhfREVDSU1BTFM7CiAgICAgICAgZWxzZSBkZWNpbWFsc1t0b2tlbl0gPSB0b2tlbi5kZWNpbWFscygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldERlY2ltYWxzKEVSQzIwIHRva2VuKSBpbnRlcm5hbCB2aWV3IHJldHVybnModWludCkgewogICAgICAgIGlmICh0b2tlbiA9PSBFVEhfVE9LRU5fQUREUkVTUykgcmV0dXJuIEVUSF9ERUNJTUFMUzsgLy8gc2F2ZSBzdG9yYWdlIGFjY2VzcwogICAgICAgIHVpbnQgdG9rZW5EZWNpbWFscyA9IGRlY2ltYWxzW3Rva2VuXTsKICAgICAgICAvLyB0ZWNobmljYWxseSwgdGhlcmUgbWlnaHQgYmUgdG9rZW4gd2l0aCBkZWNpbWFscyAwCiAgICAgICAgLy8gbW9yZW92ZXIsIHZlcnkgcG9zc2libGUgdGhhdCBvbGQgdG9rZW5zIGhhdmUgZGVjaW1hbHMgMAogICAgICAgIC8vIHRoZXNlIHRva2VucyB3aWxsIGp1c3QgaGF2ZSBoaWdoZXIgZ2FzIGZlZXMuCiAgICAgICAgaWYodG9rZW5EZWNpbWFscyA9PSAwKSByZXR1cm4gdG9rZW4uZGVjaW1hbHMoKTsKCiAgICAgICAgcmV0dXJuIHRva2VuRGVjaW1hbHM7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY0RzdFF0eSh1aW50IHNyY1F0eSwgdWludCBzcmNEZWNpbWFscywgdWludCBkc3REZWNpbWFscywgdWludCByYXRlKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludCkgewogICAgICAgIHJlcXVpcmUoc3JjUXR5IDw9IE1BWF9RVFkpOwogICAgICAgIHJlcXVpcmUocmF0ZSA8PSBNQVhfUkFURSk7CgogICAgICAgIGlmIChkc3REZWNpbWFscyA+PSBzcmNEZWNpbWFscykgewogICAgICAgICAgICByZXF1aXJlKChkc3REZWNpbWFscyAtIHNyY0RlY2ltYWxzKSA8PSBNQVhfREVDSU1BTFMpOwogICAgICAgICAgICByZXR1cm4gKHNyY1F0eSAqIHJhdGUgKiAoMTAqKihkc3REZWNpbWFscyAtIHNyY0RlY2ltYWxzKSkpIC8gUFJFQ0lTSU9OOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlcXVpcmUoKHNyY0RlY2ltYWxzIC0gZHN0RGVjaW1hbHMpIDw9IE1BWF9ERUNJTUFMUyk7CiAgICAgICAgICAgIHJldHVybiAoc3JjUXR5ICogcmF0ZSkgLyAoUFJFQ0lTSU9OICogKDEwKiooc3JjRGVjaW1hbHMgLSBkc3REZWNpbWFscykpKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY1NyY1F0eSh1aW50IGRzdFF0eSwgdWludCBzcmNEZWNpbWFscywgdWludCBkc3REZWNpbWFscywgdWludCByYXRlKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludCkgewogICAgICAgIHJlcXVpcmUoZHN0UXR5IDw9IE1BWF9RVFkpOwogICAgICAgIHJlcXVpcmUocmF0ZSA8PSBNQVhfUkFURSk7CgogICAgICAgIC8vc291cmNlIHF1YW50aXR5IGlzIHJvdW5kZWQgdXAuIHRvIGF2b2lkIGRlc3QgcXVhbnRpdHkgYmVpbmcgdG9vIGxvdy4KICAgICAgICB1aW50IG51bWVyYXRvcjsKICAgICAgICB1aW50IGRlbm9taW5hdG9yOwogICAgICAgIGlmIChzcmNEZWNpbWFscyA+PSBkc3REZWNpbWFscykgewogICAgICAgICAgICByZXF1aXJlKChzcmNEZWNpbWFscyAtIGRzdERlY2ltYWxzKSA8PSBNQVhfREVDSU1BTFMpOwogICAgICAgICAgICBudW1lcmF0b3IgPSAoUFJFQ0lTSU9OICogZHN0UXR5ICogKDEwKiooc3JjRGVjaW1hbHMgLSBkc3REZWNpbWFscykpKTsKICAgICAgICAgICAgZGVub21pbmF0b3IgPSByYXRlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlcXVpcmUoKGRzdERlY2ltYWxzIC0gc3JjRGVjaW1hbHMpIDw9IE1BWF9ERUNJTUFMUyk7CiAgICAgICAgICAgIG51bWVyYXRvciA9IChQUkVDSVNJT04gKiBkc3RRdHkpOwogICAgICAgICAgICBkZW5vbWluYXRvciA9IChyYXRlICogKDEwKiooZHN0RGVjaW1hbHMgLSBzcmNEZWNpbWFscykpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChudW1lcmF0b3IgKyBkZW5vbWluYXRvciAtIDEpIC8gZGVub21pbmF0b3I7IC8vYXZvaWQgcm91bmRpbmcgZG93biBlcnJvcnMKICAgIH0KfQoKaW50ZXJmYWNlIFNhbml0eVJhdGVzSW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIGdldFNhbml0eVJhdGUoRVJDMjAgc3JjLCBFUkMyMCBkZXN0KSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQpOwp9Cgpjb250cmFjdCBXaXRoZHJhd2FibGUgaXMgUGVybWlzc2lvbkdyb3VwcyB7CgogICAgZXZlbnQgVG9rZW5XaXRoZHJhdyhFUkMyMCB0b2tlbiwgdWludCBhbW91bnQsIGFkZHJlc3Mgc2VuZFRvKTsKCiAgICAvKioKICAgICAqIEBkZXYgV2l0aGRyYXcgYWxsIEVSQzIwIGNvbXBhdGlibGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gdG9rZW4gRVJDMjAgVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW4oRVJDMjAgdG9rZW4sIHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbykgZXh0ZXJuYWwgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKHNlbmRUbywgYW1vdW50KSk7CiAgICAgICAgVG9rZW5XaXRoZHJhdyh0b2tlbiwgYW1vdW50LCBzZW5kVG8pOwogICAgfQoKICAgIGV2ZW50IEV0aGVyV2l0aGRyYXcodWludCBhbW91bnQsIGFkZHJlc3Mgc2VuZFRvKTsKCiAgICAvKioKICAgICAqIEBkZXYgV2l0aGRyYXcgRXRoZXJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIodWludCBhbW91bnQsIGFkZHJlc3Mgc2VuZFRvKSBleHRlcm5hbCBvbmx5QWRtaW4gewogICAgICAgIHNlbmRUby50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIEV0aGVyV2l0aGRyYXcoYW1vdW50LCBzZW5kVG8pOwogICAgfQp9Cgpjb250cmFjdCBLeWJlclJlc2VydmUgaXMgS3liZXJSZXNlcnZlSW50ZXJmYWNlLCBXaXRoZHJhd2FibGUsIFV0aWxzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBreWJlck5ldHdvcms7CiAgICBib29sIHB1YmxpYyB0cmFkZUVuYWJsZWQ7CiAgICBDb252ZXJzaW9uUmF0ZXNJbnRlcmZhY2UgcHVibGljIGNvbnZlcnNpb25SYXRlc0NvbnRyYWN0OwogICAgU2FuaXR5UmF0ZXNJbnRlcmZhY2UgcHVibGljIHNhbml0eVJhdGVzQ29udHJhY3Q7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJvb2wpIHB1YmxpYyBhcHByb3ZlZFdpdGhkcmF3QWRkcmVzc2VzOyAvLyBzaGEzKHRva2VuLGFkZHJlc3MpPT5ib29sCgogICAgZnVuY3Rpb24gS3liZXJSZXNlcnZlKGFkZHJlc3MgX2t5YmVyTmV0d29yaywgQ29udmVyc2lvblJhdGVzSW50ZXJmYWNlIF9yYXRlc0NvbnRyYWN0LCBhZGRyZXNzIF9hZG1pbikgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9hZG1pbiAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9yYXRlc0NvbnRyYWN0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX2t5YmVyTmV0d29yayAhPSBhZGRyZXNzKDApKTsKICAgICAgICBreWJlck5ldHdvcmsgPSBfa3liZXJOZXR3b3JrOwogICAgICAgIGNvbnZlcnNpb25SYXRlc0NvbnRyYWN0ID0gX3JhdGVzQ29udHJhY3Q7CiAgICAgICAgYWRtaW4gPSBfYWRtaW47CiAgICAgICAgdHJhZGVFbmFibGVkID0gdHJ1ZTsKICAgIH0KCiAgICBldmVudCBEZXBvc2l0VG9rZW4oRVJDMjAgdG9rZW4sIHVpbnQgYW1vdW50KTsKCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBEZXBvc2l0VG9rZW4oRVRIX1RPS0VOX0FERFJFU1MsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgZXZlbnQgVHJhZGVFeGVjdXRlKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBvcmlnaW4sCiAgICAgICAgYWRkcmVzcyBzcmMsCiAgICAgICAgdWludCBzcmNBbW91bnQsCiAgICAgICAgYWRkcmVzcyBkZXN0VG9rZW4sCiAgICAgICAgdWludCBkZXN0QW1vdW50LAogICAgICAgIGFkZHJlc3MgZGVzdEFkZHJlc3MKICAgICk7CgogICAgZnVuY3Rpb24gdHJhZGUoCiAgICAgICAgRVJDMjAgc3JjVG9rZW4sCiAgICAgICAgdWludCBzcmNBbW91bnQsCiAgICAgICAgRVJDMjAgZGVzdFRva2VuLAogICAgICAgIGFkZHJlc3MgZGVzdEFkZHJlc3MsCiAgICAgICAgdWludCBjb252ZXJzaW9uUmF0ZSwKICAgICAgICBib29sIHZhbGlkYXRlCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKHRyYWRlRW5hYmxlZCk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGt5YmVyTmV0d29yayk7CgogICAgICAgIHJlcXVpcmUoZG9UcmFkZShzcmNUb2tlbiwgc3JjQW1vdW50LCBkZXN0VG9rZW4sIGRlc3RBZGRyZXNzLCBjb252ZXJzaW9uUmF0ZSwgdmFsaWRhdGUpKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZXZlbnQgVHJhZGVFbmFibGVkKGJvb2wgZW5hYmxlKTsKCiAgICBmdW5jdGlvbiBlbmFibGVUcmFkZSgpIHB1YmxpYyBvbmx5QWRtaW4gcmV0dXJucyhib29sKSB7CiAgICAgICAgdHJhZGVFbmFibGVkID0gdHJ1ZTsKICAgICAgICBUcmFkZUVuYWJsZWQodHJ1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpc2FibGVUcmFkZSgpIHB1YmxpYyBvbmx5QWxlcnRlciByZXR1cm5zKGJvb2wpIHsKICAgICAgICB0cmFkZUVuYWJsZWQgPSBmYWxzZTsKICAgICAgICBUcmFkZUVuYWJsZWQoZmFsc2UpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBldmVudCBXaXRoZHJhd0FkZHJlc3NBcHByb3ZlZChFUkMyMCB0b2tlbiwgYWRkcmVzcyBhZGRyLCBib29sIGFwcHJvdmUpOwoKICAgIGZ1bmN0aW9uIGFwcHJvdmVXaXRoZHJhd0FkZHJlc3MoRVJDMjAgdG9rZW4sIGFkZHJlc3MgYWRkciwgYm9vbCBhcHByb3ZlKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICBhcHByb3ZlZFdpdGhkcmF3QWRkcmVzc2VzW2tlY2NhazI1Nih0b2tlbiwgYWRkcildID0gYXBwcm92ZTsKICAgICAgICBXaXRoZHJhd0FkZHJlc3NBcHByb3ZlZCh0b2tlbiwgYWRkciwgYXBwcm92ZSk7CgogICAgICAgIHNldERlY2ltYWxzKHRva2VuKTsKICAgIH0KCiAgICBldmVudCBXaXRoZHJhd0Z1bmRzKEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCwgYWRkcmVzcyBkZXN0aW5hdGlvbik7CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoRVJDMjAgdG9rZW4sIHVpbnQgYW1vdW50LCBhZGRyZXNzIGRlc3RpbmF0aW9uKSBwdWJsaWMgb25seU9wZXJhdG9yIHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUoYXBwcm92ZWRXaXRoZHJhd0FkZHJlc3Nlc1trZWNjYWsyNTYodG9rZW4sIGRlc3RpbmF0aW9uKV0pOwoKICAgICAgICBpZiAodG9rZW4gPT0gRVRIX1RPS0VOX0FERFJFU1MpIHsKICAgICAgICAgICAgZGVzdGluYXRpb24udHJhbnNmZXIoYW1vdW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKGRlc3RpbmF0aW9uLCBhbW91bnQpKTsKICAgICAgICB9CgogICAgICAgIFdpdGhkcmF3RnVuZHModG9rZW4sIGFtb3VudCwgZGVzdGluYXRpb24pOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBldmVudCBTZXRDb250cmFjdEFkZHJlc3NlcyhhZGRyZXNzIG5ldHdvcmssIGFkZHJlc3MgcmF0ZSwgYWRkcmVzcyBzYW5pdHkpOwoKICAgIGZ1bmN0aW9uIHNldENvbnRyYWN0cyhhZGRyZXNzIF9reWJlck5ldHdvcmssIENvbnZlcnNpb25SYXRlc0ludGVyZmFjZSBfY29udmVyc2lvblJhdGVzLCBTYW5pdHlSYXRlc0ludGVyZmFjZSBfc2FuaXR5UmF0ZXMpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUFkbWluCiAgICB7CiAgICAgICAgcmVxdWlyZShfa3liZXJOZXR3b3JrICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX2NvbnZlcnNpb25SYXRlcyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAga3liZXJOZXR3b3JrID0gX2t5YmVyTmV0d29yazsKICAgICAgICBjb252ZXJzaW9uUmF0ZXNDb250cmFjdCA9IF9jb252ZXJzaW9uUmF0ZXM7CiAgICAgICAgc2FuaXR5UmF0ZXNDb250cmFjdCA9IF9zYW5pdHlSYXRlczsKCiAgICAgICAgU2V0Q29udHJhY3RBZGRyZXNzZXMoa3liZXJOZXR3b3JrLCBjb252ZXJzaW9uUmF0ZXNDb250cmFjdCwgc2FuaXR5UmF0ZXNDb250cmFjdCk7CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vIHN0YXR1cyBmdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgZnVuY3Rpb24gZ2V0QmFsYW5jZShFUkMyMCB0b2tlbikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgaWYgKHRva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKQogICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlOwogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXREZXN0UXR5KEVSQzIwIHNyYywgRVJDMjAgZGVzdCwgdWludCBzcmNRdHksIHVpbnQgcmF0ZSkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBkc3REZWNpbWFscyA9IGdldERlY2ltYWxzKGRlc3QpOwogICAgICAgIHVpbnQgc3JjRGVjaW1hbHMgPSBnZXREZWNpbWFscyhzcmMpOwoKICAgICAgICByZXR1cm4gY2FsY0RzdFF0eShzcmNRdHksIHNyY0RlY2ltYWxzLCBkc3REZWNpbWFscywgcmF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U3JjUXR5KEVSQzIwIHNyYywgRVJDMjAgZGVzdCwgdWludCBkc3RRdHksIHVpbnQgcmF0ZSkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBkc3REZWNpbWFscyA9IGdldERlY2ltYWxzKGRlc3QpOwogICAgICAgIHVpbnQgc3JjRGVjaW1hbHMgPSBnZXREZWNpbWFscyhzcmMpOwoKICAgICAgICByZXR1cm4gY2FsY1NyY1F0eShkc3RRdHksIHNyY0RlY2ltYWxzLCBkc3REZWNpbWFscywgcmF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29udmVyc2lvblJhdGUoRVJDMjAgc3JjLCBFUkMyMCBkZXN0LCB1aW50IHNyY1F0eSwgdWludCBibG9ja051bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgRVJDMjAgdG9rZW47CiAgICAgICAgYm9vbCAgYnV5OwoKICAgICAgICBpZiAoIXRyYWRlRW5hYmxlZCkgcmV0dXJuIDA7CgogICAgICAgIGlmIChFVEhfVE9LRU5fQUREUkVTUyA9PSBzcmMpIHsKICAgICAgICAgICAgYnV5ID0gdHJ1ZTsKICAgICAgICAgICAgdG9rZW4gPSBkZXN0OwogICAgICAgIH0gZWxzZSBpZiAoRVRIX1RPS0VOX0FERFJFU1MgPT0gZGVzdCkgewogICAgICAgICAgICBidXkgPSBmYWxzZTsKICAgICAgICAgICAgdG9rZW4gPSBzcmM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHBhaXIgaXMgbm90IGxpc3RlZAogICAgICAgIH0KCiAgICAgICAgdWludCByYXRlID0gY29udmVyc2lvblJhdGVzQ29udHJhY3QuZ2V0UmF0ZSh0b2tlbiwgYmxvY2tOdW1iZXIsIGJ1eSwgc3JjUXR5KTsKICAgICAgICB1aW50IGRlc3RRdHkgPSBnZXREZXN0UXR5KHNyYywgZGVzdCwgc3JjUXR5LCByYXRlKTsKCiAgICAgICAgaWYgKGdldEJhbGFuY2UoZGVzdCkgPCBkZXN0UXR5KSByZXR1cm4gMDsKCiAgICAgICAgaWYgKHNhbml0eVJhdGVzQ29udHJhY3QgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICB1aW50IHNhbml0eVJhdGUgPSBzYW5pdHlSYXRlc0NvbnRyYWN0LmdldFNhbml0eVJhdGUoc3JjLCBkZXN0KTsKICAgICAgICAgICAgaWYgKHJhdGUgPiBzYW5pdHlSYXRlKSByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIHJldHVybiByYXRlOwogICAgfQoKICAgIC8vLyBAZGV2IGRvIGEgdHJhZGUKICAgIC8vLyBAcGFyYW0gc3JjVG9rZW4gU3JjIHRva2VuCiAgICAvLy8gQHBhcmFtIHNyY0Ftb3VudCBBbW91bnQgb2Ygc3JjIHRva2VuCiAgICAvLy8gQHBhcmFtIGRlc3RUb2tlbiBEZXN0aW5hdGlvbiB0b2tlbgogICAgLy8vIEBwYXJhbSBkZXN0QWRkcmVzcyBEZXN0aW5hdGlvbiBhZGRyZXNzIHRvIHNlbmQgdG9rZW5zIHRvCiAgICAvLy8gQHBhcmFtIHZhbGlkYXRlIElmIHRydWUsIGFkZGl0aW9uYWwgdmFsaWRhdGlvbnMgYXJlIGFwcGxpY2FibGUKICAgIC8vLyBAcmV0dXJuIHRydWUgaWZmIHRyYWRlIGlzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGRvVHJhZGUoCiAgICAgICAgRVJDMjAgc3JjVG9rZW4sCiAgICAgICAgdWludCBzcmNBbW91bnQsCiAgICAgICAgRVJDMjAgZGVzdFRva2VuLAogICAgICAgIGFkZHJlc3MgZGVzdEFkZHJlc3MsCiAgICAgICAgdWludCBjb252ZXJzaW9uUmF0ZSwKICAgICAgICBib29sIHZhbGlkYXRlCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zKGJvb2wpCiAgICB7CiAgICAgICAgLy8gY2FuIHNraXAgdmFsaWRhdGlvbiBpZiBkb25lIGF0IGt5YmVyIG5ldHdvcmsgbGV2ZWwKICAgICAgICBpZiAodmFsaWRhdGUpIHsKICAgICAgICAgICAgcmVxdWlyZShjb252ZXJzaW9uUmF0ZSA+IDApOwogICAgICAgICAgICBpZiAoc3JjVG9rZW4gPT0gRVRIX1RPS0VOX0FERFJFU1MpCiAgICAgICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA9PSBzcmNBbW91bnQpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA9PSAwKTsKICAgICAgICB9CgogICAgICAgIHVpbnQgZGVzdEFtb3VudCA9IGdldERlc3RRdHkoc3JjVG9rZW4sIGRlc3RUb2tlbiwgc3JjQW1vdW50LCBjb252ZXJzaW9uUmF0ZSk7CiAgICAgICAgLy8gc2FuaXR5IGNoZWNrCiAgICAgICAgcmVxdWlyZShkZXN0QW1vdW50ID4gMCk7CgogICAgICAgIC8vIGFkZCB0byBpbWJhbGFuY2UKICAgICAgICBFUkMyMCB0b2tlbjsKICAgICAgICBpbnQgYnV5OwogICAgICAgIGlmIChzcmNUb2tlbiA9PSBFVEhfVE9LRU5fQUREUkVTUykgewogICAgICAgICAgICBidXkgPSBpbnQoZGVzdEFtb3VudCk7CiAgICAgICAgICAgIHRva2VuID0gZGVzdFRva2VuOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJ1eSA9IC0xICogaW50KHNyY0Ftb3VudCk7CiAgICAgICAgICAgIHRva2VuID0gc3JjVG9rZW47CiAgICAgICAgfQoKICAgICAgICBjb252ZXJzaW9uUmF0ZXNDb250cmFjdC5yZWNvcmRJbWJhbGFuY2UoCiAgICAgICAgICAgIHRva2VuLAogICAgICAgICAgICBidXksCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIGJsb2NrLm51bWJlcgogICAgICAgICk7CgogICAgICAgIC8vIGNvbGxlY3Qgc3JjIHRva2VucwogICAgICAgIGlmIChzcmNUb2tlbiAhPSBFVEhfVE9LRU5fQUREUkVTUykgewogICAgICAgICAgICByZXF1aXJlKHNyY1Rva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBzcmNBbW91bnQpKTsKICAgICAgICB9CgogICAgICAgIC8vIHNlbmQgZGVzdCB0b2tlbnMKICAgICAgICBpZiAoZGVzdFRva2VuID09IEVUSF9UT0tFTl9BRERSRVNTKSB7CiAgICAgICAgICAgIGRlc3RBZGRyZXNzLnRyYW5zZmVyKGRlc3RBbW91bnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlcXVpcmUoZGVzdFRva2VuLnRyYW5zZmVyKGRlc3RBZGRyZXNzLCBkZXN0QW1vdW50KSk7CiAgICAgICAgfQoKICAgICAgICBUcmFkZUV4ZWN1dGUobXNnLnNlbmRlciwgc3JjVG9rZW4sIHNyY0Ftb3VudCwgZGVzdFRva2VuLCBkZXN0QW1vdW50LCBkZXN0QWRkcmVzcyk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CgppbnRlcmZhY2UgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCByZW1haW5pbmcpOwogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQgZGlnaXRzKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwp9'.
	

]
