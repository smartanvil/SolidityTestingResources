Class {
	#name : #SRT489ddc201d1f9c0c527cebe928946ceb7a09baad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT489ddc201d1f9c0c527cebe928946ceb7a09baad >> base64 [
	^ ''.
	

]
