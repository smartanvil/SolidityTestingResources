Class {
	#name : #SRTBbc79794599b19274850492394004087cBf89710,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTBbc79794599b19274850492394004087cBf89710 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgT3ZlcmZsb3cgcHJvdGVjdGVkIG1hdGggZnVuY3Rpb25zCiovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIC8qKgogICAgICAgIGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gU2FmZU1hdGgoKSB7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MKCiAgICAgICAgQHBhcmFtIF94ICAgdmFsdWUgMQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDIKCiAgICAgICAgQHJldHVybiBzdW0KICAgICovCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHogPSBfeCArIF95OwogICAgICAgIGFzc2VydCh6ID49IF94KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgX3ggbWludXMgX3ksIGFzc2VydHMgaWYgdGhlIHN1YnRyYWN0aW9uIHJlc3VsdHMgaW4gYSBuZWdhdGl2ZSBudW1iZXIKCiAgICAgICAgQHBhcmFtIF94ICAgbWludWVuZAogICAgICAgIEBwYXJhbSBfeSAgIHN1YnRyYWhlbmQKCiAgICAgICAgQHJldHVybiBkaWZmZXJlbmNlCiAgICAqLwogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KF94ID49IF95KTsKICAgICAgICByZXR1cm4gX3ggLSBfeTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICBmYWN0b3IgMQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyCgogICAgICAgIEByZXR1cm4gcHJvZHVjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICogX3k7CiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsKICAgICAgICByZXR1cm4gejsKICAgIH0KfQoKLyoKICAgIE93bmVkIGNvbnRyYWN0IGludGVyZmFjZQoqLwpjb250cmFjdCBJT3duZWQgewogICAgLy8gdGhpcyBmdW5jdGlvbiBpc24ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbAogICAgZnVuY3Rpb24gb3duZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgeyBvd25lcjsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWM7Cn0KCi8qCiAgICBQcm92aWRlcyBzdXBwb3J0IGFuZCB1dGlsaXRpZXMgZm9yIGNvbnRyYWN0IG93bmVyc2hpcAoqLwpjb250cmFjdCBPd25lZCBpcyBJT3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICBldmVudCBPd25lclVwZGF0ZShhZGRyZXNzIF9wcmV2T3duZXIsIGFkZHJlc3MgX25ld093bmVyKTsKCiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG93bmVyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWQgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKCiAgICAgICAgQHBhcmFtIF9uZXdPd25lciAgICBuZXcgY29udHJhY3Qgb3duZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgcmVxdWlyZShfbmV3T3duZXIgIT0gb3duZXIpOwogICAgICAgIG5ld093bmVyID0gX25ld093bmVyOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYW4gb3duZXJzaGlwIHRyYW5zZmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOwogICAgICAgIE93bmVyVXBkYXRlKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICBuZXdPd25lciA9IDB4MDsKICAgIH0KfQoKLyoKICAgIEVSQzIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZQoqLwpjb250cmFjdCBJRVJDMjBUb2tlbiB7CiAgICAvLyB0aGVzZSBmdW5jdGlvbnMgYXJlbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBuYW1lKSB7IG5hbWU7IH0KICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgc3ltYm9sKSB7IHN5bWJvbDsgfQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDggZGVjaW1hbHMpIHsgZGVjaW1hbHM7IH0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxTdXBwbHkpIHsgdG90YWxTdXBwbHk7IH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgeyBfb3duZXI7IGJhbGFuY2U7IH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7IF9vd25lcjsgX3NwZW5kZXI7IHJlbWFpbmluZzsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9CgovKgogICAgVG9rZW4gSG9sZGVyIGludGVyZmFjZQoqLwpjb250cmFjdCBJVG9rZW5Ib2xkZXIgaXMgSU93bmVkIHsKICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOwp9CgovKgogICAgV2UgY29uc2lkZXIgZXZlcnkgY29udHJhY3QgdG8gYmUgYSAndG9rZW4gaG9sZGVyJyBzaW5jZSBpdCdzIGN1cnJlbnRseSBub3QgcG9zc2libGUKICAgIGZvciBhIGNvbnRyYWN0IHRvIGRlbnkgcmVjZWl2aW5nIHRva2Vucy4KCiAgICBUaGUgVG9rZW5Ib2xkZXIncyBjb250cmFjdCBzb2xlIHB1cnBvc2UgaXMgdG8gcHJvdmlkZSBhIHNhZmV0eSBtZWNoYW5pc20gdGhhdCBhbGxvd3MKICAgIHRoZSBvd25lciB0byBzZW5kIHRva2VucyB0aGF0IHdlcmUgc2VudCB0byB0aGUgY29udHJhY3QgYnkgbWlzdGFrZSBiYWNrIHRvIHRoZWlyIHNlbmRlci4KKi8KY29udHJhY3QgVG9rZW5Ib2xkZXIgaXMgSVRva2VuSG9sZGVyLCBPd25lZCB7CiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5Ib2xkZXIoKSB7CiAgICB9CgogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gMHgwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgaXMgZGlmZmVyZW50IHRoYW4gdGhpcyBjb250cmFjdCBhZGRyZXNzCiAgICBtb2RpZmllciBub3RUaGlzKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB3aXRoZHJhd3MgdG9rZW5zIGhlbGQgYnkgdGhlIGNvbnRyYWN0IGFuZCBzZW5kcyB0aGVtIHRvIGFuIGFjY291bnQKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyCgogICAgICAgIEBwYXJhbSBfdG9rZW4gICBFUkMyMCB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF90byAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudAogICAgICAgIEBwYXJhbSBfYW1vdW50ICBhbW91bnQgdG8gd2l0aGRyYXcKICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQogICAgICAgIG5vdFRoaXMoX3RvKQogICAgewogICAgICAgIGFzc2VydChfdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KSk7CiAgICB9Cn0KCi8qCiAgICBTbWFydCBUb2tlbiBpbnRlcmZhY2UKKi8KY29udHJhY3QgSVNtYXJ0VG9rZW4gaXMgSVRva2VuSG9sZGVyLCBJRVJDMjBUb2tlbiB7CiAgICBmdW5jdGlvbiBkaXNhYmxlVHJhbnNmZXJzKGJvb2wgX2Rpc2FibGUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGRlc3Ryb3koYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfYW1vdW50KSBwdWJsaWM7Cn0KCi8qCiAgICBUaGUgc21hcnQgdG9rZW4gY29udHJvbGxlciBpcyBhbiB1cGdyYWRhYmxlIHBhcnQgb2YgdGhlIHNtYXJ0IHRva2VuIHRoYXQgYWxsb3dzCiAgICBtb3JlIGZ1bmN0aW9uYWxpdHkgYXMgd2VsbCBhcyBmaXhlcyBmb3IgYnVncy9leHBsb2l0cy4KICAgIE9uY2UgaXQgYWNjZXB0cyBvd25lcnNoaXAgb2YgdGhlIHRva2VuLCBpdCBiZWNvbWVzIHRoZSB0b2tlbidzIHNvbGUgY29udHJvbGxlcgogICAgdGhhdCBjYW4gZXhlY3V0ZSBhbnkgb2YgaXRzIGZ1bmN0aW9ucy4KCiAgICBUbyB1cGdyYWRlIHRoZSBjb250cm9sbGVyLCBvd25lcnNoaXAgbXVzdCBiZSB0cmFuc2ZlcnJlZCB0byBhIG5ldyBjb250cm9sbGVyLCBhbG9uZyB3aXRoCiAgICBhbnkgcmVsZXZhbnQgZGF0YS4KCiAgICBUaGUgc21hcnQgdG9rZW4gbXVzdCBiZSBzZXQgb24gY29uc3RydWN0aW9uIGFuZCBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlcndhcmRzLgogICAgV3JhcHBlcnMgYXJlIHByb3ZpZGVkIChhcyBvcHBvc2VkIHRvIGEgc2luZ2xlICdleGVjdXRlJyBmdW5jdGlvbikgZm9yIGVhY2ggb2YgdGhlIHRva2VuJ3MgZnVuY3Rpb25zLCBmb3IgZWFzaWVyIGFjY2Vzcy4KCiAgICBOb3RlIHRoYXQgdGhlIGNvbnRyb2xsZXIgY2FuIHRyYW5zZmVyIHRva2VuIG93bmVyc2hpcCB0byBhIG5ldyBjb250cm9sbGVyIHRoYXQKICAgIGRvZXNuJ3QgYWxsb3cgZXhlY3V0aW5nIGFueSBmdW5jdGlvbiBvbiB0aGUgdG9rZW4sIGZvciBhIHRydXN0bGVzcyBzb2x1dGlvbi4KICAgIERvaW5nIHRoYXQgd2lsbCBhbHNvIHJlbW92ZSB0aGUgb3duZXIncyBhYmlsaXR5IHRvIHVwZ3JhZGUgdGhlIGNvbnRyb2xsZXIuCiovCmNvbnRyYWN0IFNtYXJ0VG9rZW5Db250cm9sbGVyIGlzIFRva2VuSG9sZGVyIHsKICAgIElTbWFydFRva2VuIHB1YmxpYyB0b2tlbjsgICAvLyBzbWFydCB0b2tlbgoKICAgIC8qKgogICAgICAgIEBkZXYgY29uc3RydWN0b3IKICAgICovCiAgICBmdW5jdGlvbiBTbWFydFRva2VuQ29udHJvbGxlcihJU21hcnRUb2tlbiBfdG9rZW4pCiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikKICAgIHsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgIH0KCiAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIGNvbnRyb2xsZXIgaXMgdGhlIHRva2VuJ3Mgb3duZXIKICAgIG1vZGlmaWVyIGFjdGl2ZSgpIHsKICAgICAgICBhc3NlcnQodG9rZW4ub3duZXIoKSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY29udHJvbGxlciBpcyBub3QgdGhlIHRva2VuJ3Mgb3duZXIKICAgIG1vZGlmaWVyIGluYWN0aXZlKCkgewogICAgICAgIGFzc2VydCh0b2tlbi5vd25lcigpICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSB0b2tlbiBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWQgdG8gYWNjZXB0IHRoZSB0cmFuc2ZlcgogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIKCiAgICAgICAgQHBhcmFtIF9uZXdPd25lciAgICBuZXcgdG9rZW4gb3duZXIKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChfbmV3T3duZXIpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYSB0b2tlbiBvd25lcnNoaXAgdHJhbnNmZXIKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0VG9rZW5Pd25lcnNoaXAoKSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi5hY2NlcHRPd25lcnNoaXAoKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGRpc2FibGVzL2VuYWJsZXMgdG9rZW4gdHJhbnNmZXJzCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcgoKICAgICAgICBAcGFyYW0gX2Rpc2FibGUgICAgdHJ1ZSB0byBkaXNhYmxlIHRyYW5zZmVycywgZmFsc2UgdG8gZW5hYmxlIHRoZW0KICAgICovCiAgICBmdW5jdGlvbiBkaXNhYmxlVG9rZW5UcmFuc2ZlcnMoYm9vbCBfZGlzYWJsZSkgcHVibGljIG93bmVyT25seSB7CiAgICAgICAgdG9rZW4uZGlzYWJsZVRyYW5zZmVycyhfZGlzYWJsZSk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIGV4ZWN1dGUgdGhlIHRva2VuJ3MgaXNzdWUgZnVuY3Rpb24KCiAgICAgICAgQHBhcmFtIF90byAgICAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudAogICAgICAgIEBwYXJhbSBfYW1vdW50ICAgICBhbW91bnQgdG8gaW5jcmVhc2UgdGhlIHN1cHBseSBieQogICAgKi8KICAgIGZ1bmN0aW9uIGlzc3VlVG9rZW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLmlzc3VlKF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIGV4ZWN1dGUgdGhlIHRva2VuJ3MgZGVzdHJveSBmdW5jdGlvbgoKICAgICAgICBAcGFyYW0gX2Zyb20gICAgICAgYWNjb3VudCB0byByZW1vdmUgdGhlIGFtb3VudCBmcm9tCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBkZWNyZWFzZSB0aGUgc3VwcGx5IGJ5CiAgICAqLwogICAgZnVuY3Rpb24gZGVzdHJveVRva2VucyhhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHRva2VuLmRlc3Ryb3koX2Zyb20sIF9hbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgd2l0aGRyYXdzIHRva2VucyBoZWxkIGJ5IHRoZSB0b2tlbiBhbmQgc2VuZHMgdGhlbSB0byBhbiBhY2NvdW50CiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lcgoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgRVJDMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzcwogICAgICAgIEBwYXJhbSBfdG8gICAgICBhY2NvdW50IHRvIHJlY2VpdmUgdGhlIG5ldyBhbW91bnQKICAgICAgICBAcGFyYW0gX2Ftb3VudCAgYW1vdW50IHRvIHdpdGhkcmF3CiAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdGcm9tVG9rZW4oSUVSQzIwVG9rZW4gX3Rva2VuLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb3duZXJPbmx5IHsKICAgICAgICB0b2tlbi53aXRoZHJhd1Rva2VucyhfdG9rZW4sIF90bywgX2Ftb3VudCk7CiAgICB9Cn0KCi8qCiAgICBDcm93ZHNhbGUgdjAuMQoKICAgIFRoZSBjcm93ZHNhbGUgdmVyc2lvbiBvZiB0aGUgc21hcnQgdG9rZW4gY29udHJvbGxlciwgYWxsb3dzIGNvbnRyaWJ1dGluZyBldGhlciBpbiBleGNoYW5nZSBmb3IgQmFuY29yIHRva2VucwogICAgVGhlIHByaWNlIHJlbWFpbnMgZml4ZWQgZm9yIHRoZSBlbnRpcmUgZHVyYXRpb24gb2YgdGhlIGNyb3dkc2FsZQogICAgTm90ZSB0aGF0IDIwJSBvZiB0aGUgY29udHJpYnV0aW9ucyBhcmUgdGhlIEJhbmNvciB0b2tlbidzIHJlc2VydmUKKi8KY29udHJhY3QgQ3Jvd2RzYWxlQ29udHJvbGxlciBpcyBTbWFydFRva2VuQ29udHJvbGxlciwgU2FmZU1hdGggewogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgRFVSQVRJT04gPSAxNCBkYXlzOyAgICAgICAgICAgICAgICAgLy8gY3Jvd2RzYWxlIGR1cmF0aW9uCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBUT0tFTl9QUklDRV9OID0gMTsgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsIHByaWNlIGluIHdlaSAobnVtZXJhdG9yKQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9LRU5fUFJJQ0VfRCA9IDEwMDsgICAgICAgICAgICAgICAgLy8gaW5pdGlhbCBwcmljZSBpbiB3ZWkgKGRlbm9taW5hdG9yKQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQlRDU19FVEhFUl9DQVAgPSA1MDAwMCBldGhlcjsgICAgICAgLy8gbWF4aW11bSBiaXRjb2luIHN1aXNzZSBldGhlciBjb250cmlidXRpb24KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE1BWF9HQVNfUFJJQ0UgPSA1MDAwMDAwMDAwMCB3ZWk7ICAgIC8vIG1heGltdW0gZ2FzIHByaWNlIGZvciBjb250cmlidXRpb24gdHJhbnNhY3Rpb25zCgogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzAuMSc7CgogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lID0gMDsgICAgICAgICAgICAgICAgICAgLy8gY3Jvd2RzYWxlIHN0YXJ0IHRpbWUgKGluIHNlY29uZHMpCiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lID0gMDsgICAgICAgICAgICAgICAgICAgICAvLyBjcm93ZHNhbGUgZW5kIHRpbWUgKGluIHNlY29uZHMpCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aGVyQ2FwID0gMTAwMDAwMCBldGhlcjsgICAvLyBjdXJyZW50IGV0aGVyIGNvbnRyaWJ1dGlvbiBjYXAsIGluaXRpYWxpemVkIHdpdGggYSB0ZW1wIHZhbHVlIGFzIGEgc2FmZXR5IG1lY2hhbmlzbSB1bnRpbCB0aGUgcmVhbCBjYXAgaXMgcmV2ZWFsZWQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRXRoZXJDb250cmlidXRlZCA9IDA7ICAgICAgIC8vIGV0aGVyIGNvbnRyaWJ1dGVkIHNvIGZhcgogICAgYnl0ZXMzMiBwdWJsaWMgcmVhbEV0aGVyQ2FwSGFzaDsgICAgICAgICAgICAgICAgLy8gZW5zdXJlcyB0aGF0IHRoZSByZWFsIGNhcCBpcyBwcmVkZWZpbmVkIG9uIGRlcGxveW1lbnQgYW5kIGNhbm5vdCBiZSBjaGFuZ2VkIGxhdGVyCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeSA9IDB4MDsgICAgICAgICAgICAgICAvLyBhZGRyZXNzIHRvIHJlY2VpdmUgYWxsIGV0aGVyIGNvbnRyaWJ1dGlvbnMKICAgIGFkZHJlc3MgcHVibGljIGJ0Y3MgPSAweDA7ICAgICAgICAgICAgICAgICAgICAgIC8vIGJpdGNvaW4gc3Vpc3NlIGFkZHJlc3MKCiAgICAvLyB0cmlnZ2VyZWQgb24gZWFjaCBjb250cmlidXRpb24KICAgIGV2ZW50IENvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgX2NvbnRyaWJ1dG9yLCB1aW50MjU2IF9hbW91bnQsIHVpbnQyNTYgX3JldHVybik7CgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgoKICAgICAgICBAcGFyYW0gX3Rva2VuICAgICAgICAgIHNtYXJ0IHRva2VuIHRoZSBjcm93ZHNhbGUgaXMgZm9yCiAgICAgICAgQHBhcmFtIF9zdGFydFRpbWUgICAgICBjcm93ZHNhbGUgc3RhcnQgdGltZQogICAgICAgIEBwYXJhbSBfYmVuZWZpY2lhcnkgICAgYWRkcmVzcyB0byByZWNlaXZlIGFsbCBldGhlciBjb250cmlidXRpb25zCiAgICAgICAgQHBhcmFtIF9idGNzICAgICAgICAgICBiaXRjb2luIHN1aXNzZSBhZGRyZXNzCiAgICAqLwogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlQ29udHJvbGxlcihJU21hcnRUb2tlbiBfdG9rZW4sIHVpbnQyNTYgX3N0YXJ0VGltZSwgYWRkcmVzcyBfYmVuZWZpY2lhcnksIGFkZHJlc3MgX2J0Y3MsIGJ5dGVzMzIgX3JlYWxFdGhlckNhcEhhc2gpCiAgICAgICAgU21hcnRUb2tlbkNvbnRyb2xsZXIoX3Rva2VuKQogICAgICAgIHZhbGlkQWRkcmVzcyhfYmVuZWZpY2lhcnkpCiAgICAgICAgdmFsaWRBZGRyZXNzKF9idGNzKQogICAgICAgIGVhcmxpZXJUaGFuKF9zdGFydFRpbWUpCiAgICAgICAgdmFsaWRBbW91bnQodWludDI1NihfcmVhbEV0aGVyQ2FwSGFzaCkpCiAgICB7CiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gc3RhcnRUaW1lICsgRFVSQVRJT047CiAgICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CiAgICAgICAgYnRjcyA9IF9idGNzOwogICAgICAgIHJlYWxFdGhlckNhcEhhc2ggPSBfcmVhbEV0aGVyQ2FwSGFzaDsKICAgIH0KCiAgICAvLyB2ZXJpZmllcyB0aGF0IGFuIGFtb3VudCBpcyBncmVhdGVyIHRoYW4gemVybwogICAgbW9kaWZpZXIgdmFsaWRBbW91bnQodWludDI1NiBfYW1vdW50KSB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyB2ZXJpZmllcyB0aGF0IHRoZSBnYXMgcHJpY2UgaXMgbG93ZXIgdGhhbiA1MCBnd2VpCiAgICBtb2RpZmllciB2YWxpZEdhc1ByaWNlKCkgewogICAgICAgIGFzc2VydCh0eC5nYXNwcmljZSA8PSBNQVhfR0FTX1BSSUNFKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGV0aGVyIGNhcCBpcyB2YWxpZCBiYXNlZCBvbiB0aGUga2V5IHByb3ZpZGVkCiAgICBtb2RpZmllciB2YWxpZEV0aGVyQ2FwKHVpbnQyNTYgX2NhcCwgdWludDI1NiBfa2V5KSB7CiAgICAgICAgcmVxdWlyZShjb21wdXRlUmVhbENhcChfY2FwLCBfa2V5KSA9PSByZWFsRXRoZXJDYXBIYXNoKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIGVuc3VyZXMgdGhhdCBpdCdzIGVhcmxpZXIgdGhhbiB0aGUgZ2l2ZW4gdGltZQogICAgbW9kaWZpZXIgZWFybGllclRoYW4odWludDI1NiBfdGltZSkgewogICAgICAgIGFzc2VydChub3cgPCBfdGltZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIGN1cnJlbnQgdGltZSBpcyBiZXR3ZWVuIF9zdGFydFRpbWUgKGluY2x1c2l2ZSkgYW5kIF9lbmRUaW1lIChleGNsdXNpdmUpCiAgICBtb2RpZmllciBiZXR3ZWVuKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSkgewogICAgICAgIGFzc2VydChub3cgPj0gX3N0YXJ0VGltZSAmJiBub3cgPCBfZW5kVGltZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIHNlbmRlciBpcyBiaXRjb2luIHN1aXNzZQogICAgbW9kaWZpZXIgYnRjc09ubHkoKSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gYnRjcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBlbnN1cmVzIHRoYXQgd2UgZGlkbid0IHJlYWNoIHRoZSBldGhlciBjYXAKICAgIG1vZGlmaWVyIGV0aGVyQ2FwTm90UmVhY2hlZCh1aW50MjU2IF9jb250cmlidXRpb24pIHsKICAgICAgICBhc3NlcnQoc2FmZUFkZCh0b3RhbEV0aGVyQ29udHJpYnV0ZWQsIF9jb250cmlidXRpb24pIDw9IHRvdGFsRXRoZXJDYXApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gZW5zdXJlcyB0aGF0IHdlIGRpZG4ndCByZWFjaCB0aGUgYml0Y29pbiBzdWlzc2UgZXRoZXIgY2FwCiAgICBtb2RpZmllciBidGNzRXRoZXJDYXBOb3RSZWFjaGVkKHVpbnQyNTYgX2V0aENvbnRyaWJ1dGlvbikgewogICAgICAgIGFzc2VydChzYWZlQWRkKHRvdGFsRXRoZXJDb250cmlidXRlZCwgX2V0aENvbnRyaWJ1dGlvbikgPD0gQlRDU19FVEhFUl9DQVApOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBjb21wdXRlcyB0aGUgcmVhbCBjYXAgYmFzZWQgb24gdGhlIGdpdmVuIGNhcCAmIGtleQoKICAgICAgICBAcGFyYW0gX2NhcCAgICBjYXAKICAgICAgICBAcGFyYW0gX2tleSAgICBrZXkgdXNlZCB0byBjb21wdXRlIHRoZSBjYXAgaGFzaAoKICAgICAgICBAcmV0dXJuIGNvbXB1dGVkIHJlYWwgY2FwIGhhc2gKICAgICovCiAgICBmdW5jdGlvbiBjb21wdXRlUmVhbENhcCh1aW50MjU2IF9jYXAsIHVpbnQyNTYgX2tleSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4ga2VjY2FrMjU2KF9jYXAsIF9rZXkpOwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgZW5hYmxlcyB0aGUgcmVhbCBjYXAgZGVmaW5lZCBvbiBkZXBsb3ltZW50CgogICAgICAgIEBwYXJhbSBfY2FwICAgIHByZWRlZmluZWQgY2FwCiAgICAgICAgQHBhcmFtIF9rZXkgICAga2V5IHVzZWQgdG8gY29tcHV0ZSB0aGUgY2FwIGhhc2gKICAgICovCiAgICBmdW5jdGlvbiBlbmFibGVSZWFsQ2FwKHVpbnQyNTYgX2NhcCwgdWludDI1NiBfa2V5KQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIGFjdGl2ZQogICAgICAgIGJldHdlZW4oc3RhcnRUaW1lLCBlbmRUaW1lKQogICAgICAgIHZhbGlkRXRoZXJDYXAoX2NhcCwgX2tleSkKICAgIHsKICAgICAgICByZXF1aXJlKF9jYXAgPCB0b3RhbEV0aGVyQ2FwKTsgLy8gdmFsaWRhdGUgaW5wdXQKICAgICAgICB0b3RhbEV0aGVyQ2FwID0gX2NhcDsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGNvbXB1dGVzIHRoZSBudW1iZXIgb2YgdG9rZW5zIHRoYXQgc2hvdWxkIGJlIGlzc3VlZCBmb3IgYSBnaXZlbiBjb250cmlidXRpb24KCiAgICAgICAgQHBhcmFtIF9jb250cmlidXRpb24gICAgY29udHJpYnV0aW9uIGFtb3VudAoKICAgICAgICBAcmV0dXJuIGNvbXB1dGVkIG51bWJlciBvZiB0b2tlbnMKICAgICovCiAgICBmdW5jdGlvbiBjb21wdXRlUmV0dXJuKHVpbnQyNTYgX2NvbnRyaWJ1dGlvbikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc2FmZU11bChfY29udHJpYnV0aW9uLCBUT0tFTl9QUklDRV9EKSAvIFRPS0VOX1BSSUNFX047CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBFVEggY29udHJpYnV0aW9uCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGR1cmluZyB0aGUgY3Jvd2RzYWxlCgogICAgICAgIEByZXR1cm4gdG9rZW5zIGlzc3VlZCBpbiByZXR1cm4KICAgICovCiAgICBmdW5jdGlvbiBjb250cmlidXRlRVRIKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgYmV0d2VlbihzdGFydFRpbWUsIGVuZFRpbWUpCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHByb2Nlc3NDb250cmlidXRpb24oKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IENvbnRyaWJ1dGlvbiB0aHJvdWdoIEJUQ3MgKEJpdGNvaW4gU3Vpc3NlIG9ubHkpCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSB0aGUgY3Jvd2RzYWxlIHN0YXJ0ZWQKCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRyaWJ1dGVCVENzKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgYnRjc09ubHkKICAgICAgICBidGNzRXRoZXJDYXBOb3RSZWFjaGVkKG1zZy52YWx1ZSkKICAgICAgICBlYXJsaWVyVGhhbihzdGFydFRpbWUpCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHByb2Nlc3NDb250cmlidXRpb24oKTsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IGhhbmRsZXMgY29udHJpYnV0aW9uIGxvZ2ljCiAgICAgICAgbm90ZSB0aGF0IHRoZSBDb250cmlidXRpb24gZXZlbnQgaXMgdHJpZ2dlcmVkIHVzaW5nIHRoZSBzZW5kZXIgYXMgdGhlIGNvbnRyaWJ1dG9yLCByZWdhcmRsZXNzIG9mIHRoZSBhY3R1YWwgY29udHJpYnV0b3IKCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybgogICAgKi8KICAgIGZ1bmN0aW9uIHByb2Nlc3NDb250cmlidXRpb24oKSBwcml2YXRlCiAgICAgICAgYWN0aXZlCiAgICAgICAgZXRoZXJDYXBOb3RSZWFjaGVkKG1zZy52YWx1ZSkKICAgICAgICB2YWxpZEdhc1ByaWNlCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpCiAgICB7CiAgICAgICAgdWludDI1NiB0b2tlbkFtb3VudCA9IGNvbXB1dGVSZXR1cm4obXNnLnZhbHVlKTsKICAgICAgICBhc3NlcnQoYmVuZWZpY2lhcnkuc2VuZChtc2cudmFsdWUpKTsgLy8gdHJhbnNmZXIgdGhlIGV0aGVyIHRvIHRoZSBiZW5lZmljaWFyeSBhY2NvdW50CiAgICAgICAgdG90YWxFdGhlckNvbnRyaWJ1dGVkID0gc2FmZUFkZCh0b3RhbEV0aGVyQ29udHJpYnV0ZWQsIG1zZy52YWx1ZSk7IC8vIHVwZGF0ZSB0aGUgdG90YWwgY29udHJpYnV0aW9uIGFtb3VudAogICAgICAgIHRva2VuLmlzc3VlKG1zZy5zZW5kZXIsIHRva2VuQW1vdW50KTsgLy8gaXNzdWUgbmV3IGZ1bmRzIHRvIHRoZSBjb250cmlidXRvciBpbiB0aGUgc21hcnQgdG9rZW4KICAgICAgICB0b2tlbi5pc3N1ZShiZW5lZmljaWFyeSwgdG9rZW5BbW91bnQpOyAvLyBpc3N1ZSB0b2tlbnMgdG8gdGhlIGJlbmVmaWNpYXJ5CgogICAgICAgIENvbnRyaWJ1dGlvbihtc2cuc2VuZGVyLCBtc2cudmFsdWUsIHRva2VuQW1vdW50KTsKICAgICAgICByZXR1cm4gdG9rZW5BbW91bnQ7CiAgICB9CgogICAgLy8gZmFsbGJhY2sKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgY29udHJpYnV0ZUVUSCgpOwogICAgfQp9'.
	

]
