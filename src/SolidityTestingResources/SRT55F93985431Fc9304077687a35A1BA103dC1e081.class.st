Class {
	#name : #SRT55F93985431Fc9304077687a35A1BA103dC1e081,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55F93985431Fc9304077687a35A1BA103dC1e081 >> base64 [
	^ ''.
	

]
