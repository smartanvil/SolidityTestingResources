Class {
	#name : #SRTc3788c1d348aef1a314bca5085c8285acc269030,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc3788c1d348aef1a314bca5085c8285acc269030 >> base64 [
	^ 'LyoqCiAqIE92ZXJmbG93IGF3YXJlIHVpbnQgbWF0aCBmdW5jdGlvbnMuCiAqCiAqIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9NYWtlckRBTy9tYWtlci1vdGMvYmxvYi9tYXN0ZXIvY29udHJhY3RzL3NpbXBsZV9tYXJrZXQuc29sCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CiAgLy9pbnRlcm5hbHMKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgdGhyb3c7CiAgfQp9CgovKioKICogRVJDIDIwIHRva2VuCiAqCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgVG9rZW4gewoKICAgIC8vLyBAcmV0dXJuIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7fQoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX2FkZHJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2Ygd2VpIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHt9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCn0KCi8qKgogKiBFUkMgMjAgdG9rZW4KICoKICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICAvKioKICAgICAqIFJldmlld2VkOgogICAgICogLSBJbnRlcmdlciBvdmVyZmxvdyA9IE9LLCBjaGVja2VkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy9EZWZhdWx0IGFzc3VtZXMgdG90YWxTdXBwbHkgY2FuJ3QgYmUgb3ZlciBtYXggKDJeMjU2IC0gMSkuCiAgICAgICAgLy9JZiB5b3VyIHRva2VuIGxlYXZlcyBvdXQgdG90YWxTdXBwbHkgYW5kIGNhbiBpc3N1ZSBtb3JlIHRva2VucyBhcyB0aW1lIGdvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgLy9pZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL3NhbWUgYXMgYWJvdmUuIFJlcGxhY2UgdGhpcyBsaW5lIHdpdGggdGhlIGZvbGxvd2luZyBpZiB5b3Ugd2FudCB0byBwcm90ZWN0IGFnYWluc3Qgd3JhcHBpbmcgdWludHMuCiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgLy9pZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKfQoKY29udHJhY3QgTmFwb2xlb25YVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgU2FmZU1hdGggewogICAgLy8gQ29uc3RhbnQgdG9rZW4gc3BlY2lmaWMgZmllbGRzCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiTmFwb2xlb25YIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIk5QWCI7CiAgICAvLyBubyBkZWNpbWFscyBhbGxvd2VkCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAyOwogICAgdWludCBwdWJsaWMgSU5JVElBTF9TVVBQTFkgPSA5NTAwMDAwMDsKICAgIAogICAgLyogdGhpcyBuYXBvbGVvblhBZG1pbmlzdHJhdG9yIGFkZHJlc3MgaXMgd2hlcmUgdG9rZW4ubmFwb2xlb254LmV0aCByZXNvbHZlcyB0byAqLwogICAgYWRkcmVzcyBuYXBvbGVvblhBZG1pbmlzdHJhdG9yOwogICAgCiAgICAvKiBJQ08gZW5kIHRpbWUgaW4gc2Vjb25kcyAxNCBtYXJzIDIwMTggKi8KICAgIHVpbnQgcHVibGljIGVuZFRpbWU7CiAgICAKICAgIGV2ZW50IFRva2VuQWxsb2NhdGVkKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgdG9rZW5BbW91bnQpOwogICAgLy8gTU9ESUZJRVJTCiAgICBtb2RpZmllciBvbmx5X25hcG9sZW9uWEFkbWluaXN0cmF0b3IgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBuYXBvbGVvblhBZG1pbmlzdHJhdG9yKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzX25vdF9lYXJsaWVyX3RoYW4odWludCB4KSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0geCk7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIGlzX2VhcmxpZXJfdGhhbih1aW50IHgpIHsKICAgICAgICByZXF1aXJlKG5vdyA8IHgpOwogICAgICAgIF87CiAgICB9CiAgICBmdW5jdGlvbiBpc0VxdWFsTGVuZ3RoKGFkZHJlc3NbXSB4LCB1aW50W10geSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgeyByZXR1cm4geC5sZW5ndGggPT0geS5sZW5ndGg7IH0KICAgIG1vZGlmaWVyIG9ubHlTYW1lTGVuZ3RoQXJyYXkoYWRkcmVzc1tdIHgsIHVpbnRbXSB5KSB7CiAgICAgICAgcmVxdWlyZShpc0VxdWFsTGVuZ3RoKHgseSkpOwogICAgICAgIF87CiAgICB9CgkKICAgIGZ1bmN0aW9uIE5hcG9sZW9uWFRva2VuKHVpbnQgc2V0RW5kVGltZSkgewogICAgICAgIG5hcG9sZW9uWEFkbWluaXN0cmF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGVuZFRpbWUgPSBzZXRFbmRUaW1lOwogICAgfQoJCiAgICAvLyB3ZSBoZXJlIHJlcG9wdWxhdGUgdGhlIGdyZWVubGlzdCB1c2luZyB0aGUgaGlzdG9yaWMgY29tbWl0bWVudHMgZnJvbSB3d3cubmFwb2xlb254LmFpIHdlYnNpdGUKICAgIGZ1bmN0aW9uIHBvcHVsYXRlV2hpdGVsaXN0ZWQoYWRkcmVzc1tdIHdoaXRlbGlzdGVkLCB1aW50W10gdG9rZW5BbW91bnQpIG9ubHlfbmFwb2xlb25YQWRtaW5pc3RyYXRvciBvbmx5U2FtZUxlbmd0aEFycmF5KHdoaXRlbGlzdGVkLCB0b2tlbkFtb3VudCkgaXNfZWFybGllcl90aGFuKGVuZFRpbWUpIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB3aGl0ZWxpc3RlZC5sZW5ndGg7IGkrKykgewoJCQl1aW50IHByZXZpb3VzQW1vdW50ID0gYmFsYW5jZXNbd2hpdGVsaXN0ZWRbaV1dOwoJCQliYWxhbmNlc1t3aGl0ZWxpc3RlZFtpXV0gPSB0b2tlbkFtb3VudFtpXTsKCQkJdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS1wcmV2aW91c0Ftb3VudCt0b2tlbkFtb3VudFtpXTsKICAgICAgICAgICAgVG9rZW5BbGxvY2F0ZWQod2hpdGVsaXN0ZWRbaV0sIHRva2VuQW1vdW50W2ldKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUZvdW5kZXIoYWRkcmVzcyBuZXdBZG1pbmlzdHJhdG9yKSBvbmx5X25hcG9sZW9uWEFkbWluaXN0cmF0b3IgewogICAgICAgIG5hcG9sZW9uWEFkbWluaXN0cmF0b3IgPSBuZXdBZG1pbmlzdHJhdG9yOwogICAgfQogCiAgICBmdW5jdGlvbiBnZXRJQ09TdGFnZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHN0cmluZykgewogICAgICAgICBpZiAobm93IDwgZW5kVGltZSl7CiAgICAgICAgICAgIHJldHVybiAiUHJlc2FsZSBlbmRlZCwgc3RhbmRhcmQgSUNPIHJ1bm5pbmciOwogICAgICAgICB9CiAgICAgICAgIGlmIChub3cgPj0gZW5kVGltZSl7CiAgICAgICAgICAgIHJldHVybiAiSUNPIGZpbmlzaGVkIjsKICAgICAgICAgfQogICAgfQp9'.
	

]
