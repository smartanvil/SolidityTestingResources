Class {
	#name : #SRT8b34fbc553db3462ad4909f2e5577cc22f63c216,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b34fbc553db3462ad4909f2e5577cc22f63c216 >> base64 [
	^ ''.
	

]
