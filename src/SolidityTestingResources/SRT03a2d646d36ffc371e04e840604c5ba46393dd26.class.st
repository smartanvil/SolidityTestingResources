Class {
	#name : #SRT03a2d646d36ffc371e04e840604c5ba46393dd26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT03a2d646d36ffc371e04e840604c5ba46393dd26 >> base64 [
	^ ''.
	

]
