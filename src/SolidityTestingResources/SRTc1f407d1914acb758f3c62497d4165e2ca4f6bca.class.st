Class {
	#name : #SRTc1f407d1914acb758f3c62497d4165e2ca4f6bca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc1f407d1914acb758f3c62497d4165e2ca4f6bca >> base64 [
	^ ''.
	

]
