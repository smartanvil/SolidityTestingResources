Class {
	#name : #SRTc4fa0ac077a69934d2db0a37654c31395a05b8c9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4fa0ac077a69934d2db0a37654c31395a05b8c9 >> base64 [
	^ ''.
	

]
