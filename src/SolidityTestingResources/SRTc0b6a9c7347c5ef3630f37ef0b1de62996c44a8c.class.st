Class {
	#name : #SRTc0b6a9c7347c5ef3630f37ef0b1de62996c44a8c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0b6a9c7347c5ef3630f37ef0b1de62996c44a8c >> base64 [
	^ ''.
	

]
