Class {
	#name : #SRT57ad67acf9bf015e4820fbd66ea1a21bed8852ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT57ad67acf9bf015e4820fbd66ea1a21bed8852ec >> base64 [
	^ ''.
	

]
