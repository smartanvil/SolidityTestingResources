Class {
	#name : #SRT1c7675d1224e5ff1ffe6eed18b7e8eece5d9e491,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c7675d1224e5ff1ffe6eed18b7e8eece5d9e491 >> base64 [
	^ ''.
	

]
