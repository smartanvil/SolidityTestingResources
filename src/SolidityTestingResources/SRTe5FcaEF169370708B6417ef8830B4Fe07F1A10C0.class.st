Class {
	#name : #SRTe5FcaEF169370708B6417ef8830B4Fe07F1A10C0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe5FcaEF169370708B6417ef8830B4Fe07F1A10C0 >> base64 [
	^ ''.
	

]
