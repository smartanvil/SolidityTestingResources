Class {
	#name : #SRT659e51a74fd86f9b63dff638b5a91b09e3b96e1e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT659e51a74fd86f9b63dff638b5a91b09e3b96e1e >> base64 [
	^ ''.
	

]
