Class {
	#name : #SRT59061b6f26BB4A9cE5828A19d35CFD5A4B80F056,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT59061b6f26BB4A9cE5828A19d35CFD5A4B80F056 >> base64 [
	^ ''.
	

]
