Class {
	#name : #SRT927b1c94345c8d1c01eb014f57be84f5c794b021,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT927b1c94345c8d1c01eb014f57be84f5c794b021 >> base64 [
	^ ''.
	

]
