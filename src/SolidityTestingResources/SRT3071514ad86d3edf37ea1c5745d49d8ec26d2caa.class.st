Class {
	#name : #SRT3071514ad86d3edf37ea1c5745d49d8ec26d2caa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3071514ad86d3edf37ea1c5745d49d8ec26d2caa >> base64 [
	^ ''.
	

]
