Class {
	#name : #SRTe52dc28df14d370436c25148b16e78d41b195e99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe52dc28df14d370436c25148b16e78d41b195e99 >> base64 [
	^ ''.
	

]
