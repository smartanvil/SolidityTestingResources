Class {
	#name : #SRTfbf8ecb34acbc2c4d2d4cdc645c9a76efcbe2cff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfbf8ecb34acbc2c4d2d4cdc645c9a76efcbe2cff >> base64 [
	^ ''.
	

]
