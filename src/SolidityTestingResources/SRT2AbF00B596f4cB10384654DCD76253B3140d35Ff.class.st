Class {
	#name : #SRT2AbF00B596f4cB10384654DCD76253B3140d35Ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2AbF00B596f4cB10384654DCD76253B3140d35Ff >> base64 [
	^ ''.
	

]
