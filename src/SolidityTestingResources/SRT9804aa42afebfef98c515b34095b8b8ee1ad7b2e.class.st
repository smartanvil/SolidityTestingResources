Class {
	#name : #SRT9804aa42afebfef98c515b34095b8b8ee1ad7b2e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9804aa42afebfef98c515b34095b8b8ee1ad7b2e >> base64 [
	^ ''.
	

]
