Class {
	#name : #SRTb57e2ec276460a993393ca1bb2bdae6c8170c73a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb57e2ec276460a993393ca1bb2bdae6c8170c73a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7IApjb250cmFjdCBvd25lZCB7IAogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBmcm9tLCB1aW50MjU2IHZhbHVlLCBhZGRyZXNzIHRva2VuLCBieXRlcyBleHRyYURhdGEpOyB9Cgpjb250cmFjdCB0b2tlbiB7IAogICAgLy8gUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gLyAKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdDVEInOyAKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsgCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogIC8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50ICovCiAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7CgogIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogIGZ1bmN0aW9uIHRva2VuKAogICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgIHVpbnQ4IGRlY2ltYWxVbml0cywKICAgICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICAgICkgewogICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgbmFtZSA9IHRva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogIH0KCiAgLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICByZXF1aXJlIChfdG8gIT0gMHgwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgIHJlcXVpcmUgKGJhbGFuY2VPZltfZnJvbV0gPiBfdmFsdWUpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvLy8gQG5vdGljZSBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIHlvdXIgYWNjb3VudAogIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8vLyBAbm90aWNlIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlIChfdmFsdWUgPCBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZgogIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogIC8vLyBAcGFyYW0gX2V4dHJhRGF0YSBzb21lIGV4dHJhIGluZm9ybWF0aW9uIHRvIHNlbmQgdG8gdGhlIGFwcHJvdmVkIGNvbnRyYWN0CiAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgfSAgICAgICAgCgogIC8vLyBAbm90aWNlIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseQogIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPiBfdmFsdWUpOyAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlcyB0b3RhbFN1cHBseQogICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRhcmdldGVkIGJhbGFuY2UgaXMgZW5vdWdoCiAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHRhcmdldGVkIGJhbGFuY2UKICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcidzIGFsbG93YW5jZQogICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsU3VwcGx5CiAgICAgIEJ1cm4oX2Zyb20sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCn0KCmNvbnRyYWN0IENUQiBpcyBvd25lZCwgdG9rZW4gewoKICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7CiAgdWludDI1NiBwdWJsaWMgYnV5UHJpY2U7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CgogIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7CgogIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogIGZ1bmN0aW9uIENUQigKICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICAgIHN0cmluZyB0b2tlblN5bWJvbAogICkgdG9rZW4gKGluaXRpYWxTdXBwbHksIHRva2VuTmFtZSwgZGVjaW1hbFVuaXRzLCB0b2tlblN5bWJvbCkge30KCiAgLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICByZXF1aXJlIChfdG8gIT0gMHgwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgIHJlcXVpcmUgKGJhbGFuY2VPZltfZnJvbV0gPiBfdmFsdWUpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOyAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHNlbmRlciBpcyBmcm96ZW4KICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfdG9dKTsgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHJlY2lwaWVudCBpcyBmcm96ZW4KICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIC8vLyBAbm90aWNlIENyZWF0ZSBgbWludGVkQW1vdW50YCB0b2tlbnMgYW5kIHNlbmQgaXQgdG8gYHRhcmdldGAKICAvLy8gQHBhcmFtIHRhcmdldCBBZGRyZXNzIHRvIHJlY2VpdmUgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gbWludGVkQW1vdW50IHRoZSBhbW91bnQgb2YgdG9rZW5zIGl0IHdpbGwgcmVjZWl2ZQogIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlPd25lciB7CiAgICAgIGJhbGFuY2VPZlt0YXJnZXRdICs9IG1pbnRlZEFtb3VudDsKICAgICAgdG90YWxTdXBwbHkgKz0gbWludGVkQW1vdW50OwogICAgICBUcmFuc2ZlcigwLCB0aGlzLCBtaW50ZWRBbW91bnQpOwogICAgICBUcmFuc2Zlcih0aGlzLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7CiAgfQoKICAvLy8gQG5vdGljZSBgZnJlZXplPyBQcmV2ZW50IHwgQWxsb3dgIGB0YXJnZXRgIGZyb20gc2VuZGluZyAmIHJlY2VpdmluZyB0b2tlbnMKICAvLy8gQHBhcmFtIHRhcmdldCBBZGRyZXNzIHRvIGJlIGZyb3plbgogIC8vLyBAcGFyYW0gZnJlZXplIGVpdGhlciB0byBmcmVlemUgaXQgb3Igbm90CiAgZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIG9ubHlPd25lciB7CiAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsKICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogIH0KCiAgLy8vIEBub3RpY2UgQWxsb3cgdXNlcnMgdG8gYnV5IHRva2VucyBmb3IgYG5ld0J1eVByaWNlYCBldGggYW5kIHNlbGwgdG9rZW5zIGZvciBgbmV3U2VsbFByaWNlYCBldGgKICAvLy8gQHBhcmFtIG5ld1NlbGxQcmljZSBQcmljZSB0aGUgdXNlcnMgY2FuIHNlbGwgdG8gdGhlIGNvbnRyYWN0CiAgLy8vIEBwYXJhbSBuZXdCdXlQcmljZSBQcmljZSB1c2VycyBjYW4gYnV5IGZyb20gdGhlIGNvbnRyYWN0CiAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3U2VsbFByaWNlLCB1aW50MjU2IG5ld0J1eVByaWNlKSBvbmx5T3duZXIgewogICAgICBzZWxsUHJpY2UgPSBuZXdTZWxsUHJpY2U7CiAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgfQoKICAvLy8gQG5vdGljZSBCdXkgdG9rZW5zIGZyb20gY29udHJhY3QgYnkgc2VuZGluZyBldGhlcgogIGZ1bmN0aW9uIGJ1eSgpIHBheWFibGUgewogICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIGFtb3VudAogICAgICBfdHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgIC8vIG1ha2VzIHRoZSB0cmFuc2ZlcnMKICB9CgogIC8vLyBAbm90aWNlIFNlbGwgYGFtb3VudGAgdG9rZW5zIHRvIGNvbnRyYWN0CiAgLy8vIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyB0byBiZSBzb2xkCiAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IGFtb3VudCkgewogICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBhbW91bnQgKiBzZWxsUHJpY2UpOyAgICAgIC8vIGNoZWNrcyBpZiB0aGUgY29udHJhY3QgaGFzIGVub3VnaCBldGhlciB0byBidXkKICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7ICAgICAgICAgICAgICAvLyBtYWtlcyB0aGUgdHJhbnNmZXJzCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYW1vdW50ICogc2VsbFByaWNlKTsgICAgICAgICAgLy8gc2VuZHMgZXRoZXIgdG8gdGhlIHNlbGxlci4gSXQncyBpbXBvcnRhbnQgdG8gZG8gdGhpcyBsYXN0IHRvIGF2b2lkIHJlY3Vyc2lvbiBhdHRhY2tzCiAgfQoKfQ=='.
	

]
