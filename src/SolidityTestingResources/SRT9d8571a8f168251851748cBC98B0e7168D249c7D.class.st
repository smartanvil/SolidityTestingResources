Class {
	#name : #SRT9d8571a8f168251851748cBC98B0e7168D249c7D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9d8571a8f168251851748cBC98B0e7168D249c7D >> base64 [
	^ ''.
	

]
