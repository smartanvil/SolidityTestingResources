Class {
	#name : #SRT2FF9c09beCD301bCf7d5FA057e01c39A370985CB,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2FF9c09beCD301bCf7d5FA057e01c39A370985CB >> base64 [
	^ ''.
	

]
