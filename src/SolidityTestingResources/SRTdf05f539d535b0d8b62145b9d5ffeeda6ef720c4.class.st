Class {
	#name : #SRTdf05f539d535b0d8b62145b9d5ffeeda6ef720c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdf05f539d535b0d8b62145b9d5ffeeda6ef720c4 >> base64 [
	^ ''.
	

]
