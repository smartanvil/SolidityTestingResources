Class {
	#name : #SRT37aa63c4cbd06a57f1ea35bceee4e46f0a7ce924,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT37aa63c4cbd06a57f1ea35bceee4e46f0a7ce924 >> base64 [
	^ ''.
	

]
