Class {
	#name : #SRT8e5870f8841376238558afad7091fc570f9bfaed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8e5870f8841376238558afad7091fc570f9bfaed >> base64 [
	^ ''.
	

]
