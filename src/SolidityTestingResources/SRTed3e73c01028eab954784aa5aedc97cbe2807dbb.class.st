Class {
	#name : #SRTed3e73c01028eab954784aa5aedc97cbe2807dbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed3e73c01028eab954784aa5aedc97cbe2807dbb >> base64 [
	^ ''.
	

]
