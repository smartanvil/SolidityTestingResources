Class {
	#name : #SRT2b25741c1e8bc08cfffc7286a88604a6d800dcb1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2b25741c1e8bc08cfffc7286a88604a6d800dcb1 >> base64 [
	^ 'LyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICB1aW50MjU2IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCmNvbnRyYWN0IEFic3RyYWN0U3RhcmJhc2VDcm93ZHNhbGUgewogICAgZnVuY3Rpb24gc3RhcnREYXRlKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGVuZGVkQXQoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gaXNFbmRlZCgpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdG90YWxSYWlzZWRBbW91bnRJbkNueSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gbnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkNzQnkoYWRkcmVzcyBwdXJjaGFzZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gbnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkVwQnkoYWRkcmVzcyBwdXJjaGFzZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9Cgpjb250cmFjdCBBYnN0cmFjdFN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24ge30KCi8vLyBAdGl0bGUgVG9rZW4gY29udHJhY3QgLSBFUkMyMCBjb21wYXRpYmxlIFN0YXJiYXNlIHRva2VuIGNvbnRyYWN0LgovLy8gQGF1dGhvciBTdGFyYmFzZSBQVEUuIExURC4gLSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjEyN2I3Yzc0N2Q1MjYxNjY3MzYwNzA3MzYxNzczYzcxN2QiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+Pgpjb250cmFjdCBTdGFyYmFzZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgLyoKICAgICAqICBFdmVudHMKICAgICAqLwogICAgZXZlbnQgUHVibGljT2ZmZXJpbmdQbGFuRGVjbGFyZWQodWludDI1NiB0b2tlbkNvdW50LCB1aW50MjU2IHVubG9ja0NvbXBhbnlzVG9rZW5zQXQpOwogICAgZXZlbnQgTXZwTGF1bmNoZWQodWludDI1NiBsYXVuY2hlZEF0KTsKICAgIGV2ZW50IExvZ05ld0Z1bmRyYWlzZXIgKGFkZHJlc3MgaW5kZXhlZCBmdW5kcmFpc2VyQWRkcmVzcywgYm9vbCBpc0JvbmFGaWRlKTsKICAgIGV2ZW50IExvZ1VwZGF0ZUZ1bmRyYWlzZXIoYWRkcmVzcyBpbmRleGVkIGZ1bmRyYWlzZXJBZGRyZXNzLCBib29sIGlzQm9uYUZpZGUpOwoKICAgIC8qCiAgICAgKiAgVHlwZXMKICAgICAqLwogICAgc3RydWN0IFB1YmxpY09mZmVyaW5nUGxhbiB7CiAgICAgICAgdWludDI1NiB0b2tlbkNvdW50OwogICAgICAgIHVpbnQyNTYgdW5sb2NrQ29tcGFueXNUb2tlbnNBdDsKICAgICAgICB1aW50MjU2IGRlY2xhcmVkQXQ7CiAgICB9CgogICAgLyoKICAgICAqICBFeHRlcm5hbCBjb250cmFjdHMKICAgICAqLwogICAgQWJzdHJhY3RTdGFyYmFzZUNyb3dkc2FsZSBwdWJsaWMgc3RhcmJhc2VDcm93ZHNhbGU7CiAgICBBYnN0cmFjdFN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24gcHVibGljIHN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ247CgogICAgLyoKICAgICAqICBTdG9yYWdlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIGNvbXBhbnk7CiAgICBQdWJsaWNPZmZlcmluZ1BsYW5bXSBwdWJsaWMgcHVibGljT2ZmZXJpbmdQbGFuczsgIC8vIGZ1cnRoZXIgY3Jvd2RzYWxlcwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBpbml0aWFsRWNUb2tlbkFsbG9jYXRpb247ICAgIC8vIEluaXRpYWwgdG9rZW4gYWxsb2NhdGlvbnMgZm9yIEVhcmx5IENvbnRyaWJ1dG9ycwogICAgdWludDI1NiBwdWJsaWMgbXZwTGF1bmNoZWRBdDsgIC8vIDAgdW50aWwgYSBNVlAgb2YgU3RhcmJhc2UgUGxhdGZvcm0gbGF1bmNoZXMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwcml2YXRlIGZ1bmRyYWlzZXJzOyAvLyBGdW5kcmFpc2VycyBhcmUgdmV0dGVkIGFkZHJlc3NlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGV4ZWN1dGUgZnVuY3Rpb25zIHdpdGhpbiB0aGUgY29udHJhY3QKCiAgICAvKgogICAgICogIENvbnN0YW50cyAvIFRva2VuIG1ldGEgZGF0YQogICAgICovCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIG5hbWUgPSAiVEVTVEVSIjsgIC8vIFRva2VuIG5hbWUKICAgIHN0cmluZyBjb25zdGFudCBwdWJsaWMgc3ltYm9sID0gIlRFU1RBUiI7ICAvLyBUb2tlbiBzeW1ib2wKICAgIHVpbnQ4IGNvbnN0YW50IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgaW5pdGlhbFN1cHBseSA9IDEwMDAwMDAwMDBlMTg7IC8vIDFCIFNUQVIgdG9rZW5zCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBpbml0aWFsQ29tcGFueXNUb2tlbkFsbG9jYXRpb24gPSA3NTAwMDAwMDBlMTg7ICAvLyA3NTBNCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBpbml0aWFsQmFsYW5jZUZvckNyb3dkc2FsZSA9IDE3NTAwMDAwMGUxODsgIC8vIENTKDEyNU0pK0VQKDUwTSkKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGluaXRpYWxCYWxhbmNlRm9yTWFya2V0aW5nQ2FtcGFpZ24gPSAxMjUwMDAwMGUxODsgICAvLyAxMi41TQoKICAgIC8qCiAgICAgKiAgTW9kaWZpZXJzCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVDb250cmFjdCgpIHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5TWFya2V0aW5nQ2FtcGFpZ25Db250cmFjdCgpIHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBhZGRyZXNzKHN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24pKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlGdW5kcmFpc2VyKCkgewogICAgICAgIC8vIE9ubHkgcmlnaHRmdWwgZnVuZHJhaXNlciBpcyBwZXJtaXR0ZWQuCiAgICAgICAgYXNzZXJ0KGlzRnVuZHJhaXNlcihtc2cuc2VuZGVyKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QmVmb3JlQ3Jvd2RzYWxlKCkgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VDcm93ZHNhbGUuc3RhcnREYXRlKCkgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWZ0ZXJDcm93ZHNhbGUoKSB7CiAgICAgICAgcmVxdWlyZShzdGFyYmFzZUNyb3dkc2FsZS5pc0VuZGVkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIGFzc2VydChtc2cuZGF0YS5sZW5ndGggPT0gc2l6ZSArIDQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoKICAgICAqICBDb250cmFjdCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBmdW5jdGlvbgogICAgICogQHBhcmFtIHN0YXJiYXNlQ29tcGFueUFkZHIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGhvbGRzIHVudHJhbnNmZXJyYWJsZSB0b2tlbnMKICAgICAqIEBwYXJhbSBzdGFyYmFzZUNyb3dkc2FsZUFkZHIgQWRkcmVzcyBvZiB0aGUgY3Jvd2RzYWxlIGNvbnRyYWN0CiAgICAgKiBAcGFyYW0gc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIgVGhlIGFkZHJlc3Mgb2YgdGhlIG1hcmtldGluZyBjYW1wYWlnbiBjb250cmFjdAogICAgICovCgogICAgZnVuY3Rpb24gU3RhcmJhc2VUb2tlbigKICAgICAgICBhZGRyZXNzIHN0YXJiYXNlQ29tcGFueUFkZHIsCiAgICAgICAgYWRkcmVzcyBzdGFyYmFzZUNyb3dkc2FsZUFkZHIsCiAgICAgICAgYWRkcmVzcyBzdGFyYmFzZU1hcmtldGluZ0NhbXBhaWduQWRkcgogICAgKSB7CiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICBzdGFyYmFzZUNvbXBhbnlBZGRyICE9IDAgJiYKICAgICAgICAgICAgc3RhcmJhc2VDcm93ZHNhbGVBZGRyICE9IDAgJiYKICAgICAgICAgICAgc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIgIT0gMCk7CgogICAgICAgIHN0YXJiYXNlQ3Jvd2RzYWxlID0gQWJzdHJhY3RTdGFyYmFzZUNyb3dkc2FsZShzdGFyYmFzZUNyb3dkc2FsZUFkZHIpOwogICAgICAgIHN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24gPSBBYnN0cmFjdFN0YXJiYXNlTWFya2V0aW5nQ2FtcGFpZ24oc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIpOwogICAgICAgIGNvbXBhbnkgPSBzdGFyYmFzZUNvbXBhbnlBZGRyOwoKICAgICAgICAvLyBtc2cuc2VuZGVyIGJlY29tZXMgZmlyc3QgZnVuZHJhaXNlcgogICAgICAgIGZ1bmRyYWlzZXJzW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBMb2dOZXdGdW5kcmFpc2VyKG1zZy5zZW5kZXIsIHRydWUpOwoKICAgICAgICAvLyBUb2tlbnMgZm9yIGNyb3dkc2FsZSBhbmQgZWFybHkgcHVyY2hhc2VycwogICAgICAgIGJhbGFuY2VzW2FkZHJlc3Moc3RhcmJhc2VDcm93ZHNhbGUpXSA9IGluaXRpYWxCYWxhbmNlRm9yQ3Jvd2RzYWxlOwoKICAgICAgICAvLyBUb2tlbnMgZm9yIG1hcmtldGluZyBjYW1wYWlnbiBzdXBwb3J0ZXJzCiAgICAgICAgYmFsYW5jZXNbYWRkcmVzcyhzdGFyYmFzZU1hcmtldGluZ0NhbXBhaWduKV0gPSBpbml0aWFsQmFsYW5jZUZvck1hcmtldGluZ0NhbXBhaWduOwoKICAgICAgICAvLyBUb2tlbnMgZm9yIGVhcmx5IGNvbnRyaWJ1dG9ycywgc2hvdWxkIGJlIGFsbG9jYXRlZCBieSBmdW5jdGlvbgogICAgICAgIGJhbGFuY2VzWzBdID0gNjI1MDAwMDBlMTg7IC8vIDYyLjVNCgogICAgICAgIC8vIFN0YXJiYXNlIGNvbXBhbnkgaG9sZHMgdW50cmFuc2ZlcnJhYmxlIHRva2VucyBpbml0aWFsbHkKICAgICAgICBiYWxhbmNlc1tzdGFyYmFzZUNvbXBhbnlBZGRyXSA9IGluaXRpYWxDb21wYW55c1Rva2VuQWxsb2NhdGlvbjsgLy8gNzUwTQoKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7ICAgIC8vIDFCCiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFNldHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3RzJyBhZGRyZXNzZXMKICAgICAqIEBwYXJhbSBzdGFyYmFzZUNyb3dkc2FsZUFkZHIgQ3Jvd2RzYWxlIGNvbnRyYWN0IGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIgTWFya2V0aW5nIGNhbXBhaWduIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gc2V0dXAoYWRkcmVzcyBzdGFyYmFzZUNyb3dkc2FsZUFkZHIsIGFkZHJlc3Mgc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5RnVuZHJhaXNlcgogICAgICAgIG9ubHlCZWZvcmVDcm93ZHNhbGUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoc3RhcmJhc2VDcm93ZHNhbGVBZGRyICE9IDAgJiYgc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHIgIT0gMCk7CiAgICAgICAgYXNzZXJ0KGJhbGFuY2VzW2FkZHJlc3Moc3RhcmJhc2VDcm93ZHNhbGUpXSA9PSBpbml0aWFsQmFsYW5jZUZvckNyb3dkc2FsZSk7CiAgICAgICAgYXNzZXJ0KGJhbGFuY2VzW2FkZHJlc3Moc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbildID09IGluaXRpYWxCYWxhbmNlRm9yTWFya2V0aW5nQ2FtcGFpZ24pOwoKICAgICAgICAvLyBNb3ZlIHRoZSBiYWxhbmNlcyB0byB0aGUgbmV3IG9uZXMKICAgICAgICBiYWxhbmNlc1thZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKV0gPSAwOwogICAgICAgIGJhbGFuY2VzW2FkZHJlc3Moc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbildID0gMDsKICAgICAgICBiYWxhbmNlc1tzdGFyYmFzZUNyb3dkc2FsZUFkZHJdID0gaW5pdGlhbEJhbGFuY2VGb3JDcm93ZHNhbGU7CiAgICAgICAgYmFsYW5jZXNbc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbkFkZHJdID0gaW5pdGlhbEJhbGFuY2VGb3JNYXJrZXRpbmdDYW1wYWlnbjsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSByZWZlcmVuY2VzCiAgICAgICAgc3RhcmJhc2VDcm93ZHNhbGUgPSBBYnN0cmFjdFN0YXJiYXNlQ3Jvd2RzYWxlKHN0YXJiYXNlQ3Jvd2RzYWxlQWRkcik7CiAgICAgICAgc3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbiA9IEFic3RyYWN0U3RhcmJhc2VNYXJrZXRpbmdDYW1wYWlnbihzdGFyYmFzZU1hcmtldGluZ0NhbXBhaWduQWRkcik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoKICAgICAqICBFeHRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIG51bWJlciBvZiBkZWNsYXJlZCBwdWJsaWMgb2ZmZXJpbmcgcGxhbnMKICAgICAqLwogICAgZnVuY3Rpb24gbnVtT2ZEZWNsYXJlZFB1YmxpY09mZmVyaW5nUGxhbnMoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBwdWJsaWNPZmZlcmluZ1BsYW5zLmxlbmd0aDsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRGVjbGFyZXMgYSBwdWJsaWMgb2ZmZXJpbmcgcGxhbiB0byBtYWtlIGNvbXBhbnkncyB0b2tlbnMgdHJhbnNmZXJhYmxlCiAgICAgKiBAcGFyYW0gdG9rZW5Db3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgICogQHBhcmFtIHVubG9ja0NvbXBhbnlzVG9rZW5zQXQgVGltZSBvZiB0aGUgdG9rZW5zIHdpbGwgYmUgdW5sb2NrZWQKICAgICAqLwogICAgZnVuY3Rpb24gZGVjbGFyZVB1YmxpY09mZmVyaW5nUGxhbih1aW50MjU2IHRva2VuQ291bnQsIHVpbnQyNTYgdW5sb2NrQ29tcGFueXNUb2tlbnNBdCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlGdW5kcmFpc2VyCiAgICAgICAgb25seUFmdGVyQ3Jvd2RzYWxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhc3NlcnQodG9rZW5Db3VudCA8PSAxMDAwMDAwMDBlMTgpOyAgICAvLyBzaGFsbCBub3QgZXhjZWVkIDEwME0gdG9rZW5zCiAgICAgICAgYXNzZXJ0KFNhZmVNYXRoLnN1Yihub3csIHN0YXJiYXNlQ3Jvd2RzYWxlLmVuZGVkQXQoKSkgPj0gMTgwIGRheXMpOyAgIC8vIHNoYWxsIG5vdCBiZSBkZWNsYXJlZCBmb3IgNiBtb250aHMgYWZ0ZXIgdGhlIGNyb3dkc2FsZSBlbmRlZAogICAgICAgIGFzc2VydChTYWZlTWF0aC5zdWIodW5sb2NrQ29tcGFueXNUb2tlbnNBdCwgbm93KSA+PSA2MCBkYXlzKTsgICAvLyB0b2tlbnMgbXVzdCBiZSB1bnRyYW5zZmVyYWJsZSBhdCBsZWFzdCBmb3IgMiBtb250aHMKCiAgICAgICAgLy8gY2hlY2sgaWYgbGFzdCBkZWNsYXJhdGlvbiB3YXMgbW9yZSB0aGFuIDYgbW9udGhzIGFnbwogICAgICAgIGlmIChwdWJsaWNPZmZlcmluZ1BsYW5zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdWludDI1NiBsYXN0RGVjbGFyZWRBdCA9CiAgICAgICAgICAgICAgICBwdWJsaWNPZmZlcmluZ1BsYW5zW3B1YmxpY09mZmVyaW5nUGxhbnMubGVuZ3RoIC0gMV0uZGVjbGFyZWRBdDsKICAgICAgICAgICAgYXNzZXJ0KFNhZmVNYXRoLnN1Yihub3csIGxhc3REZWNsYXJlZEF0KSA+PSAxODAgZGF5cyk7CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHRvdGFsRGVjbGFyZWRUb2tlbkNvdW50ID0gdG9rZW5Db3VudDsKICAgICAgICBmb3IgKHVpbnQ4IGk7IGkgPCBwdWJsaWNPZmZlcmluZ1BsYW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRvdGFsRGVjbGFyZWRUb2tlbkNvdW50ID0gU2FmZU1hdGguYWRkKHRvdGFsRGVjbGFyZWRUb2tlbkNvdW50LCBwdWJsaWNPZmZlcmluZ1BsYW5zW2ldLnRva2VuQ291bnQpOwogICAgICAgIH0KICAgICAgICBhc3NlcnQodG90YWxEZWNsYXJlZFRva2VuQ291bnQgPD0gaW5pdGlhbENvbXBhbnlzVG9rZW5BbGxvY2F0aW9uKTsgICAvLyBzaGFsbCBub3QgZXhjZWVkIHRoZSBpbml0aWFsIHRva2VuIGFsbG9jYXRpb24KCiAgICAgICAgcHVibGljT2ZmZXJpbmdQbGFucy5wdXNoKAogICAgICAgICAgICBQdWJsaWNPZmZlcmluZ1BsYW4odG9rZW5Db3VudCwgdW5sb2NrQ29tcGFueXNUb2tlbnNBdCwgbm93KSk7CgogICAgICAgIFB1YmxpY09mZmVyaW5nUGxhbkRlY2xhcmVkKHRva2VuQ291bnQsIHVubG9ja0NvbXBhbnlzVG9rZW5zQXQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvY2F0ZSB0b2tlbnMgdG8gYSBtYXJrZXRpbmcgc3VwcG9ydGVyIGZyb20gdGhlIG1hcmtldGluZyBjYW1wYWlnbiBzaGFyZQogICAgICogQHBhcmFtIHRvIEFkZHJlc3MgdG8gd2hlcmUgdG9rZW5zIGFyZSBhbGxvY2F0ZWQKICAgICAqIEBwYXJhbSB2YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG9jYXRlVG9NYXJrZXRpbmdTdXBwb3J0ZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlNYXJrZXRpbmdDYW1wYWlnbkNvbnRyYWN0CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKHRvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJldHVybiBhbGxvY2F0ZUZyb20oYWRkcmVzcyhzdGFyYmFzZU1hcmtldGluZ0NhbXBhaWduKSwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb2NhdGUgdG9rZW5zIHRvIGFuIGVhcmx5IGNvbnRyaWJ1dG9yIGZyb20gdGhlIGVhcmx5IGNvbnRyaWJ1dG9yIHNoYXJlCiAgICAgKiBAcGFyYW0gdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIGFsbG9jYXRlZAogICAgICogQHBhcmFtIHZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIKICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVUb0Vhcmx5Q29udHJpYnV0b3IoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlGdW5kcmFpc2VyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKHRvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIGluaXRpYWxFY1Rva2VuQWxsb2NhdGlvblt0b10gPQogICAgICAgICAgICBTYWZlTWF0aC5hZGQoaW5pdGlhbEVjVG9rZW5BbGxvY2F0aW9uW3RvXSwgdmFsdWUpOwogICAgICAgIHJldHVybiBhbGxvY2F0ZUZyb20oMCwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSXNzdWUgbmV3IHRva2VucyBhY2NvcmRpbmcgdG8gdGhlIFNUQVIgdG9rZW4gaW5mbGF0aW9uIGxpbWl0cwogICAgICogQHBhcmFtIF9mb3IgQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIGFsbG9jYXRlZAogICAgICogQHBhcmFtIHZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gaXNzdWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfZm9yLCB1aW50MjU2IHZhbHVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUZ1bmRyYWlzZXIKICAgICAgICBvbmx5QWZ0ZXJDcm93ZHNhbGUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoX2ZvciAhPSBhZGRyZXNzKDApKTsKICAgICAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWUgdW5kZXIgdGhlIGxpbWl0cwogICAgICAgIGFzc2VydCh2YWx1ZSA8PSBudW1PZkluZmxhdGFibGVUb2tlbnMoKSk7CgogICAgICAgIHRvdGFsU3VwcGx5ID0gU2FmZU1hdGguYWRkKHRvdGFsU3VwcGx5LCB2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zvcl0gPSBTYWZlTWF0aC5hZGQoYmFsYW5jZXNbX2Zvcl0sIHZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRGVjbGFyZXMgU3RhcmJhc2UgTVZQIGhhcyBiZWVuIGxhdW5jaGVkCiAgICAgKiBAcGFyYW0gbGF1bmNoZWRBdCBXaGVuIHRoZSBNVlAgbGF1bmNoZWQgKHRpbWVzdGFtcCkKICAgICAqLwogICAgZnVuY3Rpb24gZGVjbGFyZU12cExhdW5jaGVkKHVpbnQyNTYgbGF1bmNoZWRBdCkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlGdW5kcmFpc2VyCiAgICAgICAgb25seUFmdGVyQ3Jvd2RzYWxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKG12cExhdW5jaGVkQXQgPT0gMCk7IC8vIG92ZXJ3cml0aW5nIHRoZSBsYXVuY2ggZGF0ZSBpcyBub3QgcGVybWl0dGVkCiAgICAgICAgcmVxdWlyZShsYXVuY2hlZEF0IDw9IG5vdyk7CiAgICAgICAgcmVxdWlyZShzdGFyYmFzZUNyb3dkc2FsZS5pc0VuZGVkKCkpOwoKICAgICAgICBtdnBMYXVuY2hlZEF0ID0gbGF1bmNoZWRBdDsKICAgICAgICBNdnBMYXVuY2hlZChsYXVuY2hlZEF0KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb2NhdGUgdG9rZW5zIHRvIGEgY3Jvd2RzYWxlIG9yIGVhcmx5IHB1cmNoYXNlciBmcm9tIHRoZSBjcm93ZHNhbGUgc2hhcmUKICAgICAqIEBwYXJhbSB0byBBZGRyZXNzIHRvIHdoZXJlIHRva2VucyBhcmUgYWxsb2NhdGVkCiAgICAgKiBAcGFyYW0gdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlcgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRvQ3Jvd2RzYWxlUHVyY2hhc2VyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5Q3Jvd2RzYWxlQ29udHJhY3QKICAgICAgICBvbmx5QWZ0ZXJDcm93ZHNhbGUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmV0dXJuIGFsbG9jYXRlRnJvbShhZGRyZXNzKHN0YXJiYXNlQ3Jvd2RzYWxlKSwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvKgogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8qKgogICAgICogQGRldiBUcmFuc2ZlcnMgc2VuZGVyJ3MgdG9rZW5zIHRvIGEgZ2l2ZW4gYWRkcmVzcy4gUmV0dXJucyBzdWNjZXNzLgogICAgICogQHBhcmFtIHRvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIuCiAgICAgKiBAcGFyYW0gdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgyKjMyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYXNzZXJ0KGlzVHJhbnNmZXJhYmxlKG1zZy5zZW5kZXIsIHZhbHVlKSk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGlyZCBwYXJ0eSB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAgKiBAcGFyYW0gZnJvbSBBZGRyZXNzIGZyb20gd2hlcmUgdG9rZW5zIGFyZSB3aXRoZHJhd24uCiAgICAgKiBAcGFyYW0gdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIHNlbnQuCiAgICAgKiBAcGFyYW0gdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlQYXlsb2FkU2l6ZSgzKjMyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYXNzZXJ0KGlzVHJhbnNmZXJhYmxlKGZyb20sIHZhbHVlKSk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBZGRzIGZ1bmRyYWlzZXIuIE9ubHkgY2FsbGVkIGJ5IGFub3RoZXIgZnVuZHJhaXNlci4KICAgICAqIEBwYXJhbSBmdW5kcmFpc2VyQWRkcmVzcyBUaGUgYWRkcmVzcyBpbiBjaGVjawogICAgICovCiAgICBmdW5jdGlvbiBhZGRGdW5kcmFpc2VyKGFkZHJlc3MgZnVuZHJhaXNlckFkZHJlc3MpIHB1YmxpYyBvbmx5RnVuZHJhaXNlciB7CiAgICAgICAgcmVxdWlyZShmdW5kcmFpc2VyQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICBhc3NlcnQoIWlzRnVuZHJhaXNlcihmdW5kcmFpc2VyQWRkcmVzcykpOwoKICAgICAgICBmdW5kcmFpc2Vyc1tmdW5kcmFpc2VyQWRkcmVzc10gPSB0cnVlOwogICAgICAgIExvZ05ld0Z1bmRyYWlzZXIoZnVuZHJhaXNlckFkZHJlc3MsIHRydWUpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBVcGRhdGUgZnVuZHJhaXNlciBhZGRyZXNzIHJpZ2h0cy4KICAgICAqIEBwYXJhbSBmdW5kcmFpc2VyQWRkcmVzcyBUaGUgYWRkcmVzcyB0byB1cGRhdGUKICAgICAqIEBwYXJhbSBpc0JvbmFGaWRlIEJvb2xlYW4gdGhhdCBkZW5vdGVzIHdoZXRoZXIgZnVuZHJhaXNlciBpcyBhY3RpdmUgb3Igbm90LgogICAgICovCiAgICBmdW5jdGlvbiB1cGRhdGVGdW5kcmFpc2VyKGFkZHJlc3MgZnVuZHJhaXNlckFkZHJlc3MsIGJvb2wgaXNCb25hRmlkZSkKICAgICAgIHB1YmxpYwogICAgICAgb25seUZ1bmRyYWlzZXIKICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICBhc3NlcnQoaXNGdW5kcmFpc2VyKGZ1bmRyYWlzZXJBZGRyZXNzKSk7CgogICAgICAgIGZ1bmRyYWlzZXJzW2Z1bmRyYWlzZXJBZGRyZXNzXSA9IGlzQm9uYUZpZGU7CiAgICAgICAgTG9nVXBkYXRlRnVuZHJhaXNlcihmdW5kcmFpc2VyQWRkcmVzcywgaXNCb25hRmlkZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgd2hldGhlciBmdW5kcmFpc2VyIGFkZHJlc3MgaGFzIHJpZ2h0cy4KICAgICAqIEBwYXJhbSBmdW5kcmFpc2VyQWRkcmVzcyBUaGUgYWRkcmVzcyBpbiBjaGVjawogICAgICovCiAgICBmdW5jdGlvbiBpc0Z1bmRyYWlzZXIoYWRkcmVzcyBmdW5kcmFpc2VyQWRkcmVzcykgY29uc3RhbnQgcHVibGljIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBmdW5kcmFpc2Vyc1tmdW5kcmFpc2VyQWRkcmVzc107CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFJldHVybnMgd2hldGhlciB0aGUgdHJhbnNmZXJyaW5nIG9mIHRva2VucyBpcyBhdmFpbGFibGUgZnVuZHJhaXNlci4KICAgICAqIEBwYXJhbSBmcm9tIEFkZHJlc3Mgb2YgdG9rZW4gc2VuZGVyCiAgICAgKiBAcGFyYW0gdG9rZW5Db3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgICovCiAgICBmdW5jdGlvbiBpc1RyYW5zZmVyYWJsZShhZGRyZXNzIGZyb20sIHVpbnQyNTYgdG9rZW5Db3VudCkKICAgICAgICBjb25zdGFudAogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYgKHRva2VuQ291bnQgPT0gMCB8fCBiYWxhbmNlc1tmcm9tXSA8IHRva2VuQ291bnQpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gY29tcGFueSdzIHRva2VucyBtYXkgYmUgbG9ja2VkIHVwCiAgICAgICAgaWYgKGZyb20gPT0gY29tcGFueSkgewogICAgICAgICAgICBpZiAodG9rZW5Db3VudCA+IG51bU9mVHJhbnNmZXJhYmxlQ29tcGFueXNUb2tlbnMoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHVudHJhbnNmZXJhYmxlVG9rZW5Db3VudCA9IDA7CgogICAgICAgIC8vIGVhcmx5IGNvbnRyaWJ1dG9yJ3MgdG9rZW5zIG1heSBiZSBsb2NrZWQgdXAKICAgICAgICBpZiAoaW5pdGlhbEVjVG9rZW5BbGxvY2F0aW9uW2Zyb21dID4gMCkgewogICAgICAgICAgICB1bnRyYW5zZmVyYWJsZVRva2VuQ291bnQgPSBTYWZlTWF0aC5hZGQoCiAgICAgICAgICAgICAgICB1bnRyYW5zZmVyYWJsZVRva2VuQ291bnQsCiAgICAgICAgICAgICAgICBudW1PZlVudHJhbnNmZXJhYmxlRWNUb2tlbnMoZnJvbSkpOwogICAgICAgIH0KCiAgICAgICAgLy8gRVAgYW5kIENTIHB1cmNoYXNlcnMnIHRva2VucyBzaG91bGQgYmUgdW50cmFuc2ZlcmFibGUgaW5pdGlhbGx5CiAgICAgICAgaWYgKHN0YXJiYXNlQ3Jvd2RzYWxlLmlzRW5kZWQoKSkgewogICAgICAgICAgICB1aW50MjU2IHBhc3NlZERheXMgPQogICAgICAgICAgICAgICAgU2FmZU1hdGguc3ViKG5vdywgc3RhcmJhc2VDcm93ZHNhbGUuZW5kZWRBdCgpKSAvIDg2NDAwOyAvLyAxZCA9IDg2NDAwcwogICAgICAgICAgICBpZiAocGFzc2VkRGF5cyA8IDcpIHsgIC8vIHdpdGhpbiBhIHdlZWsKICAgICAgICAgICAgICAgIC8vIGNyb3dkc2FsZSBwdXJjaGFzZXJzIGNhbm5vdCB0cmFuc2ZlciB0aGVpciB0b2tlbnMgZm9yIGEgd2VlawogICAgICAgICAgICAgICAgdW50cmFuc2ZlcmFibGVUb2tlbkNvdW50ID0gU2FmZU1hdGguYWRkKAogICAgICAgICAgICAgICAgICAgIHVudHJhbnNmZXJhYmxlVG9rZW5Db3VudCwKICAgICAgICAgICAgICAgICAgICBzdGFyYmFzZUNyb3dkc2FsZS5udW1PZlB1cmNoYXNlZFRva2Vuc09uQ3NCeShmcm9tKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBhc3NlZERheXMgPCAxNCkgeyAgLy8gd2l0aGluIHR3byB3ZWVrcwogICAgICAgICAgICAgICAgLy8gZWFybHkgcHVyY2hhc2VycyBjYW5ub3QgdHJhbnNmZXIgdGhlaXIgdG9rZW5zIGZvciB0d28gd2Vla3MKICAgICAgICAgICAgICAgIHVudHJhbnNmZXJhYmxlVG9rZW5Db3VudCA9IFNhZmVNYXRoLmFkZCgKICAgICAgICAgICAgICAgICAgICB1bnRyYW5zZmVyYWJsZVRva2VuQ291bnQsCiAgICAgICAgICAgICAgICAgICAgc3RhcmJhc2VDcm93ZHNhbGUubnVtT2ZQdXJjaGFzZWRUb2tlbnNPbkVwQnkoZnJvbSkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHRyYW5zZmVyYWJsZVRva2VuQ291bnQgPQogICAgICAgICAgICBTYWZlTWF0aC5zdWIoYmFsYW5jZXNbZnJvbV0sIHVudHJhbnNmZXJhYmxlVG9rZW5Db3VudCk7CgogICAgICAgIGlmICh0cmFuc2ZlcmFibGVUb2tlbkNvdW50IDwgdG9rZW5Db3VudCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdHJhbnNmZXJhYmxlIGNvbXBhbnkncyB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gbnVtT2ZUcmFuc2ZlcmFibGVDb21wYW55c1Rva2VucygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB1bmxvY2tlZFRva2VucyA9IDA7CiAgICAgICAgZm9yICh1aW50OCBpOyBpIDwgcHVibGljT2ZmZXJpbmdQbGFucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBQdWJsaWNPZmZlcmluZ1BsYW4gbWVtb3J5IHBsYW4gPSBwdWJsaWNPZmZlcmluZ1BsYW5zW2ldOwogICAgICAgICAgICBpZiAocGxhbi51bmxvY2tDb21wYW55c1Rva2Vuc0F0IDw9IG5vdykgewogICAgICAgICAgICAgICAgdW5sb2NrZWRUb2tlbnMgPSBTYWZlTWF0aC5hZGQodW5sb2NrZWRUb2tlbnMsIHBsYW4udG9rZW5Db3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIFNhZmVNYXRoLnN1YigKICAgICAgICAgICAgYmFsYW5jZXNbY29tcGFueV0sCiAgICAgICAgICAgIGluaXRpYWxDb21wYW55c1Rva2VuQWxsb2NhdGlvbiAtIHVubG9ja2VkVG9rZW5zKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgbnVtYmVyIG9mIHVudHJhbnNmZXJhYmxlIHRva2VucyBvZiB0aGUgZWFybHkgY29udHJpYnV0b3IKICAgICAqIEBwYXJhbSBfZm9yIEFkZHJlc3Mgb2YgZWFybHkgY29udHJpYnV0b3IgdG8gY2hlY2sKICAgICAqLwogICAgZnVuY3Rpb24gbnVtT2ZVbnRyYW5zZmVyYWJsZUVjVG9rZW5zKGFkZHJlc3MgX2ZvcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGluaXRpYWxDb3VudCA9IGluaXRpYWxFY1Rva2VuQWxsb2NhdGlvbltfZm9yXTsKICAgICAgICBpZiAobXZwTGF1bmNoZWRBdCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBpbml0aWFsQ291bnQ7CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHBhc3NlZFdlZWtzID0gU2FmZU1hdGguc3ViKG5vdywgbXZwTGF1bmNoZWRBdCkgLyA3IGRheXM7CiAgICAgICAgaWYgKHBhc3NlZFdlZWtzIDw9IDUyKSB7ICAgIC8vIGEgeWVhciDiiYggNTIgd2Vla3MKICAgICAgICAgICAgLy8gYWxsIHRva2VucyBzaG91bGQgYmUgbG9ja2VkIHVwIGZvciBhIHllYXIKICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxDb3VudDsKICAgICAgICB9CgogICAgICAgIC8vIHVubG9jayAxLzUyIHRva2VucyBldmVyeSB3ZWVrcyBhZnRlciBhIHllYXIKICAgICAgICB1aW50MjU2IHRyYW5zZmVyYWJsZVRva2VuQ291bnQgPSBpbml0aWFsQ291bnQgLyA1MiAqIChwYXNzZWRXZWVrcyAtIDUyKTsKICAgICAgICBpZiAodHJhbnNmZXJhYmxlVG9rZW5Db3VudCA+PSBpbml0aWFsQ291bnQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIFNhZmVNYXRoLnN1Yihpbml0aWFsQ291bnQsIHRyYW5zZmVyYWJsZVRva2VuQ291bnQpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIHdoaWNoIGNhbiBiZSBpc3N1ZWQgYWNjb3JkaW5nIHRvIHRoZSBpbmZsYXRpb24gcnVsZXMKICAgICAqLwogICAgZnVuY3Rpb24gbnVtT2ZJbmZsYXRhYmxlVG9rZW5zKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoc3RhcmJhc2VDcm93ZHNhbGUuZW5kZWRBdCgpID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgcGFzc2VkRGF5cyA9IFNhZmVNYXRoLnN1Yihub3csIHN0YXJiYXNlQ3Jvd2RzYWxlLmVuZGVkQXQoKSkgLyA4NjQwMDsgIC8vIDFkID0gNjBzICogNjBtICogMjRoID0gODY0MDBzCiAgICAgICAgdWludDI1NiBwYXNzZWRZZWFycyA9IHBhc3NlZERheXMgKiAxMDAgLyAzNjUyNTsgICAgLy8gYWJvdXQgMzY1LjI1IGRheXMgaW4gYSB5ZWFyCiAgICAgICAgdWludDI1NiBpbmZsYXRlZFN1cHBseSA9IGluaXRpYWxTdXBwbHk7CiAgICAgICAgZm9yICh1aW50MjU2IGk7IGkgPCBwYXNzZWRZZWFyczsgaSsrKSB7CiAgICAgICAgICAgIGluZmxhdGVkU3VwcGx5ID0gU2FmZU1hdGguYWRkKGluZmxhdGVkU3VwcGx5LCBTYWZlTWF0aC5tdWwoaW5mbGF0ZWRTdXBwbHksIDI1KSAvIDEwMDApOyAvLyAyLjUlL3kgPSAwLjAyNS95CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHJlbWFpbmRlcmVkRGF5cyA9IHBhc3NlZERheXMgKiAxMDAgJSAzNjUyNSAvIDEwMDsKICAgICAgICBpZiAocmVtYWluZGVyZWREYXlzID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGluZmxhdGFibGVUb2tlbnNPZk5leHRZZWFyID0KICAgICAgICAgICAgICAgIFNhZmVNYXRoLm11bChpbmZsYXRlZFN1cHBseSwgMjUpIC8gMTAwMDsKICAgICAgICAgICAgaW5mbGF0ZWRTdXBwbHkgPSBTYWZlTWF0aC5hZGQoaW5mbGF0ZWRTdXBwbHksIFNhZmVNYXRoLm11bCgKICAgICAgICAgICAgICAgIGluZmxhdGFibGVUb2tlbnNPZk5leHRZZWFyLCByZW1haW5kZXJlZERheXMgKiAxMDApIC8gMzY1MjUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFNhZmVNYXRoLnN1YihpbmZsYXRlZFN1cHBseSwgdG90YWxTdXBwbHkpOwogICAgfQoKICAgIC8qCiAgICAgKiAgSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb2NhdGUgdG9rZW5zIHZhbHVlIGZyb20gYW4gYWRkcmVzcyB0byBhbm90aGVyIG9uZS4gVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpbnRlcm5hbGx5LgogICAgICogQHBhcmFtIGZyb20gQWRkcmVzcyBmcm9tIHdoZXJlIHRva2VucyBjb21lCiAgICAgKiBAcGFyYW0gdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIGFsbG9jYXRlZAogICAgICogQHBhcmFtIHZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIKICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGFzc2VydCh2YWx1ZSA+IDAgJiYgYmFsYW5jZXNbZnJvbV0gPj0gdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW2Zyb21dID0gU2FmZU1hdGguc3ViKGJhbGFuY2VzW2Zyb21dLCB2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gU2FmZU1hdGguYWRkKGJhbGFuY2VzW3RvXSwgdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
