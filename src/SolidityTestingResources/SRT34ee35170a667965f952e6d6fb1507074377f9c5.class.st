Class {
	#name : #SRT34ee35170a667965f952e6d6fb1507074377f9c5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT34ee35170a667965f952e6d6fb1507074377f9c5 >> base64 [
	^ ''.
	

]
