Class {
	#name : #SRT598ab825d607ace3b00d8714c0a141c7ae2e6822,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT598ab825d607ace3b00d8714c0a141c7ae2e6822 >> base64 [
	^ ''.
	

]
