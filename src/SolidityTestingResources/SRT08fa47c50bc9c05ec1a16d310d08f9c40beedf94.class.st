Class {
	#name : #SRT08fa47c50bc9c05ec1a16d310d08f9c40beedf94,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08fa47c50bc9c05ec1a16d310d08f9c40beedf94 >> base64 [
	^ ''.
	

]
