Class {
	#name : #SRTe2458F579D48b666E00A1c7F38918FD39ab21628,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe2458F579D48b666E00A1c7F38918FD39ab21628 >> base64 [
	^ ''.
	

]
