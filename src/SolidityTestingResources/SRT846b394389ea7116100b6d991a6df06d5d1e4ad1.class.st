Class {
	#name : #SRT846b394389ea7116100b6d991a6df06d5d1e4ad1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT846b394389ea7116100b6d991a6df06d5d1e4ad1 >> base64 [
	^ ''.
	

]
