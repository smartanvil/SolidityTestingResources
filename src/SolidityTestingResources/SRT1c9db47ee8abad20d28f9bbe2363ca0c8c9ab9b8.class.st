Class {
	#name : #SRT1c9db47ee8abad20d28f9bbe2363ca0c8c9ab9b8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c9db47ee8abad20d28f9bbe2363ca0c8c9ab9b8 >> base64 [
	^ ''.
	

]
