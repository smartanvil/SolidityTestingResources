Class {
	#name : #SRTa6dba1f11ce9091682a443277a4d951bba39c723,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6dba1f11ce9091682a443277a4d951bba39c723 >> base64 [
	^ ''.
	

]
