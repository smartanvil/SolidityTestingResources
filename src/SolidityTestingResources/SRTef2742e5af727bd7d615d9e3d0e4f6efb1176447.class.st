Class {
	#name : #SRTef2742e5af727bd7d615d9e3d0e4f6efb1176447,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTef2742e5af727bd7d615d9e3d0e4f6efb1176447 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBPd25hYmxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCn0KCmNvbnRyYWN0IERuYU1peGVyIHsKICAgIGZ1bmN0aW9uIG1peERuYSh1aW50MjU2IGRuYTEsIHVpbnQyNTYgZG5hMiwgdWludDI1NiBzZWVkKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50MjU2KTsKfQoKCmNvbnRyYWN0IENwRGF0YSBpcyBPd25hYmxlIHsKCiAgICBzdHJ1Y3QgR2lybCB7CiAgICAgICAgdWludDI1NiBkbmE7CiAgICAgICAgdWludDY0IGNyZWF0aW9uVGltZTsKICAgICAgICB1aW50MzIgc291cmNlR2lybDE7CiAgICAgICAgdWludDMyIHNvdXJjZUdpcmwyOwogICAgICAgIHVpbnQxNiBnZW47CiAgICAgICAgdWludDggY29tYmluZXNMZWZ0OwogICAgICAgIHVpbnQ2NCBjb21iaW5lQ29vbGVkRG93bjsKICAgIH0KCiAgICBzdHJ1Y3QgQXVjdGlvbiB7CiAgICAgICAgYWRkcmVzcyBzZWxsZXI7CiAgICAgICAgdWludDEyOCBzdGFydGluZ1ByaWNlV2VpOwogICAgICAgIHVpbnQxMjggZW5kaW5nUHJpY2VXZWk7CiAgICAgICAgdWludDY0IGR1cmF0aW9uOwogICAgICAgIHVpbnQ2NCBjcmVhdGlvblRpbWU7CiAgICAgICAgYm9vbCBpc0NvbWJpbmU7CiAgICB9CgogICAgZXZlbnQgTmV3R2lybChhZGRyZXNzIG93bmVyLCB1aW50MjU2IGdpcmxJZCwgdWludDI1NiBzb3VyY2VHaXJsMSwgdWludDI1NiBzb3VyY2VHaXJsMiwgdWludDI1NiBkbmEpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IGdpcmxJZCk7CiAgICBldmVudCBBdWN0aW9uQ3JlYXRlZCh1aW50MjU2IGdpcmxJZCwgdWludDI1NiBzdGFydGluZ1ByaWNlV2VpLCB1aW50MjU2IGVuZGluZ1ByaWNlV2VpLCB1aW50MjU2IGR1cmF0aW9uLCBib29sIGlzQ29tYmluZSk7CiAgICBldmVudCBBdWN0aW9uQ29tcGxldGVkKHVpbnQyNTYgZ2lybElkLCB1aW50MjU2IHByaWNlV2VpLCBhZGRyZXNzIHdpbm5lcik7CiAgICBldmVudCBBdWN0aW9uQ2FuY2VsbGVkKHVpbnQyNTYgZ2lybElkKTsKCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBPV05FUlNfQVVDVElPTl9DVVQgPSAzNTA7CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgTUFYX1BST01PX0dJUkxTID0gNjAwMDsKICAgIHVpbnQyNTYgcHVibGljIHByb21vQ3JlYXRlZENvdW50OwogICAgCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBNQVhfR0VOMF9HSVJMUyA9IDMwMDAwOwogICAgdWludDI1NiBwdWJsaWMgZ2VuMENyZWF0ZWRDb3VudDsKICAgICAgICAKICAgIERuYU1peGVyIHB1YmxpYyBkbmFNaXhlcjsKCiAgICBHaXJsW10gZ2lybHM7CgogICAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgZ2lybElkVG9Pd25lcjsKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gQXVjdGlvbikgcHVibGljIGdpcmxJZFRvQXVjdGlvbjsKICAgIAp9CgoKY29udHJhY3QgQ3BJbnRlcm5hbHMgaXMgQ3BEYXRhIHsKCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2dpcmxJZCkgaW50ZXJuYWwgewogICAgICAgIGdpcmxJZFRvT3duZXJbX2dpcmxJZF0gPSBfdG87ICAgICAgICAKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfZ2lybElkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfY3JlYXRlR2lybCh1aW50MjU2IF9zb3VyY2VHaXJsSWQxLCB1aW50MjU2IF9zb3VyY2VHaXJsSWQyLCB1aW50MjU2IF9nZW4sIHVpbnQyNTYgX2RuYSwgYWRkcmVzcyBfb3duZXIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXF1aXJlKF9zb3VyY2VHaXJsSWQxIDwgZ2lybHMubGVuZ3RoIHx8IF9zb3VyY2VHaXJsSWQxID09IDApOwogICAgICAgIHJlcXVpcmUoX3NvdXJjZUdpcmxJZDIgPCBnaXJscy5sZW5ndGggfHwgX3NvdXJjZUdpcmxJZDIgPT0gMCk7CiAgICAgICAgcmVxdWlyZShfZ2VuIDwgNjU1MzUpOwoKICAgICAgICBHaXJsIG1lbW9yeSBfZ2lybCA9IEdpcmwoewogICAgICAgICAgICBkbmE6IF9kbmEsCiAgICAgICAgICAgIHNvdXJjZUdpcmwxOiB1aW50MzIoX3NvdXJjZUdpcmxJZDEpLAogICAgICAgICAgICBzb3VyY2VHaXJsMjogdWludDMyKF9zb3VyY2VHaXJsSWQyKSwKICAgICAgICAgICAgZ2VuOiB1aW50MTYoX2dlbiksCiAgICAgICAgICAgIGNyZWF0aW9uVGltZTogdWludDY0KG5vdyksCiAgICAgICAgICAgIGNvbWJpbmVzTGVmdDogMTAsCiAgICAgICAgICAgIGNvbWJpbmVDb29sZWREb3duOiAwCiAgICAgICAgfSk7CgogICAgICAgIHVpbnQyNTYgbmV3R2lybElkID0gZ2lybHMucHVzaChfZ2lybCkgLSAxOwogICAgICAgIE5ld0dpcmwoX293bmVyLCBuZXdHaXJsSWQsIF9zb3VyY2VHaXJsSWQxLCBfc291cmNlR2lybElkMiwgX2dpcmwuZG5hKTsKICAgICAgICBfdHJhbnNmZXIoMCwgX293bmVyLCBuZXdHaXJsSWQpOwoKICAgICAgICByZXR1cm4gbmV3R2lybElkOwogICAgfQoKICAgICBmdW5jdGlvbiBfY29tYmluZUdpcmxzKEdpcmwgc3RvcmFnZSBfc291cmNlR2lybDEsIEdpcmwgc3RvcmFnZSBfc291cmNlR2lybDIsIHVpbnQyNTYgX2dpcmwxSWQsIHVpbnQyNTYgX2dpcmwySWQsIGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MTYgbWF4R2VuID0gX3NvdXJjZUdpcmwxLmdlbjsKCiAgICAgICAgaWYgKF9zb3VyY2VHaXJsMi5nZW4gPiBfc291cmNlR2lybDEuZ2VuKSB7CiAgICAgICAgICAgIG1heEdlbiA9IF9zb3VyY2VHaXJsMi5nZW47CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHNlZWQgPSBibG9jay5udW1iZXIgKyBtYXhHZW4gKyBibG9jay50aW1lc3RhbXA7CiAgICAgICAgdWludDI1NiBuZXdEbmEgPSBkbmFNaXhlci5taXhEbmEoX3NvdXJjZUdpcmwxLmRuYSwgX3NvdXJjZUdpcmwyLmRuYSwgc2VlZCk7CgogICAgICAgIF9zb3VyY2VHaXJsMS5jb21iaW5lc0xlZnQgLT0gMTsKICAgICAgICBfc291cmNlR2lybDIuY29tYmluZXNMZWZ0IC09IDE7CiAgICAgICAgX3NvdXJjZUdpcmwxLmNvbWJpbmVDb29sZWREb3duID0gdWludDY0KG5vdykgKyA2IGhvdXJzOwogICAgICAgIF9zb3VyY2VHaXJsMi5jb21iaW5lQ29vbGVkRG93biA9IHVpbnQ2NChub3cpICsgNiBob3VyczsKCiAgICAgICAgcmV0dXJuIF9jcmVhdGVHaXJsKF9naXJsMUlkLCBfZ2lybDJJZCwgbWF4R2VuICsgMSwgbmV3RG5hLCBfb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9nZXRBdWN0aW9uUHJpY2UoQXVjdGlvbiBzdG9yYWdlIF9hdWN0aW9uKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHNlY29uZHNQYXNzZWQgPSAwOwoKICAgICAgICBpZiAobm93ID4gX2F1Y3Rpb24uY3JlYXRpb25UaW1lKSB7CiAgICAgICAgICAgIHNlY29uZHNQYXNzZWQgPSBub3cgLSBfYXVjdGlvbi5jcmVhdGlvblRpbWU7CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHByaWNlID0gX2F1Y3Rpb24uZW5kaW5nUHJpY2VXZWk7CgogICAgICAgIGlmIChzZWNvbmRzUGFzc2VkIDwgX2F1Y3Rpb24uZHVyYXRpb24pIHsKICAgICAgICAgICAgdWludDI1NiBwcmljZVNwcmVhZCA9IF9hdWN0aW9uLnN0YXJ0aW5nUHJpY2VXZWkgLSBfYXVjdGlvbi5lbmRpbmdQcmljZVdlaTsKICAgICAgICAgICAgdWludDI1NiBkZWx0YVByaWNlID0gcHJpY2VTcHJlYWQgKiBzZWNvbmRzUGFzc2VkIC8gX2F1Y3Rpb24uZHVyYXRpb247CiAgICAgICAgICAgIHByaWNlID0gX2F1Y3Rpb24uc3RhcnRpbmdQcmljZVdlaSAtIGRlbHRhUHJpY2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcHJpY2U7CiAgICB9Cgp9CgoKY29udHJhY3QgQ3BBcGlzIGlzIENwSW50ZXJuYWxzIHsKCiAgICBmdW5jdGlvbiBnZXRHaXJsKHVpbnQyNTYgX2lkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgZG5hLCB1aW50MjU2IHNvdXJjZUdpcmxJZDEsIHVpbnQyNTYgc291cmNlR2lybElkMiwgdWludDI1NiBnZW4sIHVpbnQyNTYgY3JlYXRpb25UaW1lLCB1aW50OCBjb21iaW5lc0xlZnQsIHVpbnQ2NCBjb21iaW5lQ29vbGVkRG93bikgewogICAgICAgIEdpcmwgc3RvcmFnZSBnaXJsID0gZ2lybHNbX2lkXTsKICAgICAgICBkbmEgPSBnaXJsLmRuYTsKICAgICAgICBzb3VyY2VHaXJsSWQxID0gZ2lybC5zb3VyY2VHaXJsMTsKICAgICAgICBzb3VyY2VHaXJsSWQyID0gZ2lybC5zb3VyY2VHaXJsMjsKICAgICAgICBnZW4gPSBnaXJsLmdlbjsKICAgICAgICBjcmVhdGlvblRpbWUgPSBnaXJsLmNyZWF0aW9uVGltZTsKICAgICAgICBjb21iaW5lc0xlZnQgPSBnaXJsLmNvbWJpbmVzTGVmdDsKICAgICAgICBjb21iaW5lQ29vbGVkRG93biA9IGdpcmwuY29tYmluZUNvb2xlZERvd247CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlUHJvbW9HaXJsKHVpbnQyNTYgX2RuYSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKHByb21vQ3JlYXRlZENvdW50IDwgTUFYX1BST01PX0dJUkxTKTsKCiAgICAgICAgcHJvbW9DcmVhdGVkQ291bnQrKzsKICAgICAgICBfY3JlYXRlR2lybCgwLCAwLCAwLCBfZG5hLCBvd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlR2VuMCh1aW50MjU2IF9kbmEpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShnZW4wQ3JlYXRlZENvdW50IDwgTUFYX0dFTjBfR0lSTFMpOwoKICAgICAgICBnZW4wQ3JlYXRlZENvdW50Kys7CiAgICAgICAgX2NyZWF0ZUdpcmwoMCwgMCwgMCwgX2RuYSwgb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldERuYU1peGVyQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGRuYU1peGVyID0gRG5hTWl4ZXIoX2FkZHJlc3MpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfZ2lybElkKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmVxdWlyZShnaXJsSWRUb093bmVyW19naXJsSWRdID09IG1zZy5zZW5kZXIpOwogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gZ2lybElkVG9BdWN0aW9uW19naXJsSWRdOwogICAgICAgIHJlcXVpcmUoYXVjdGlvbi5jcmVhdGlvblRpbWUgPT0gMCk7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2dpcmxJZCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF9naXJsSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgewogICAgICAgIG93bmVyID0gZ2lybElkVG9Pd25lcltfZ2lybElkXTsKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjcmVhdGVBdWN0aW9uKHVpbnQyNTYgX2dpcmxJZCwgdWludDI1NiBfc3RhcnRpbmdQcmljZVdlaSwgdWludDI1NiBfZW5kaW5nUHJpY2VXZWksIHVpbnQyNTYgX2R1cmF0aW9uLCBib29sIF9pc0NvbWJpbmUpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKF9zdGFydGluZ1ByaWNlV2VpID4gX2VuZGluZ1ByaWNlV2VpKTsKICAgICAgICByZXF1aXJlKF9zdGFydGluZ1ByaWNlV2VpID4gMCk7CiAgICAgICAgcmVxdWlyZShfc3RhcnRpbmdQcmljZVdlaSA9PSB1aW50MjU2KHVpbnQxMjgoX3N0YXJ0aW5nUHJpY2VXZWkpKSk7CiAgICAgICAgcmVxdWlyZShfZW5kaW5nUHJpY2VXZWkgPT0gdWludDI1Nih1aW50MTI4KF9lbmRpbmdQcmljZVdlaSkpKTsKICAgICAgICByZXF1aXJlKF9kdXJhdGlvbiA9PSB1aW50MjU2KHVpbnQ2NChfZHVyYXRpb24pKSk7CiAgICAgICAgcmVxdWlyZShnaXJsSWRUb093bmVyW19naXJsSWRdID09IG1zZy5zZW5kZXIpOwoKICAgICAgICBpZiAoX2lzQ29tYmluZSkgewogICAgICAgICAgICBHaXJsIHN0b3JhZ2UgZ2lybCA9IGdpcmxzW19naXJsSWRdOwogICAgICAgICAgICByZXF1aXJlKGdpcmwuY29tYmluZXNMZWZ0ID4gMCk7CiAgICAgICAgICAgIHJlcXVpcmUoZ2lybC5jb21iaW5lQ29vbGVkRG93biA8IG5vdyk7CiAgICAgICAgfQoKICAgICAgICBBdWN0aW9uIG1lbW9yeSBhdWN0aW9uID0gQXVjdGlvbigKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgdWludDEyOChfc3RhcnRpbmdQcmljZVdlaSksCiAgICAgICAgICAgIHVpbnQxMjgoX2VuZGluZ1ByaWNlV2VpKSwKICAgICAgICAgICAgdWludDY0KF9kdXJhdGlvbiksCiAgICAgICAgICAgIHVpbnQ2NChub3cpLAogICAgICAgICAgICBfaXNDb21iaW5lCiAgICAgICAgKTsKCiAgICAgICAgZ2lybElkVG9BdWN0aW9uW19naXJsSWRdID0gYXVjdGlvbjsKCiAgICAgICAgQXVjdGlvbkNyZWF0ZWQoX2dpcmxJZCwgX3N0YXJ0aW5nUHJpY2VXZWksIF9lbmRpbmdQcmljZVdlaSwgX2R1cmF0aW9uLCBfaXNDb21iaW5lKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYmlkKHVpbnQyNTYgX2dpcmxJZCwgdWludDI1NiBfbXlHaXJsKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICBBdWN0aW9uIHN0b3JhZ2UgYXVjdGlvbiA9IGdpcmxJZFRvQXVjdGlvbltfZ2lybElkXTsKCiAgICAgICAgcmVxdWlyZShhdWN0aW9uLnN0YXJ0aW5nUHJpY2VXZWkgPiAwKTsKICAgICAgICByZXF1aXJlKCFhdWN0aW9uLmlzQ29tYmluZSB8fCAoYXVjdGlvbi5pc0NvbWJpbmUgJiYgX2dpcmxJZCA+IDApKTsKCiAgICAgICAgdWludDI1NiBwcmljZSA9IF9nZXRBdWN0aW9uUHJpY2UoYXVjdGlvbik7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gcHJpY2UpOwogICAgICAgIGJvb2wgaXNDb21iaW5lID0gYXVjdGlvbi5pc0NvbWJpbmU7CgogICAgICAgIGlmIChpc0NvbWJpbmUpIHsKICAgICAgICAgICAgR2lybCBzdG9yYWdlIHNvdXJjZUdpcmwxID0gZ2lybHNbX2dpcmxJZF07CiAgICAgICAgICAgIEdpcmwgc3RvcmFnZSBzb3VyY2VHaXJsMiA9IGdpcmxzW19teUdpcmxdOwogICAgCiAgICAgICAgICAgIHJlcXVpcmUoc291cmNlR2lybDEuY29tYmluZXNMZWZ0ID4gMCk7CiAgICAgICAgICAgIHJlcXVpcmUoc291cmNlR2lybDIuY29tYmluZXNMZWZ0ID4gMCk7CiAgICAgICAgICAgIHJlcXVpcmUoc291cmNlR2lybDEuY29tYmluZUNvb2xlZERvd24gPCBub3cpOwogICAgICAgICAgICByZXF1aXJlKHNvdXJjZUdpcmwyLmNvbWJpbmVDb29sZWREb3duIDwgbm93KTsKICAgICAgICB9CgogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gYXVjdGlvbi5zZWxsZXI7CiAgICAgICAgZGVsZXRlIGdpcmxJZFRvQXVjdGlvbltfZ2lybElkXTsKCiAgICAgICAgaWYgKHByaWNlID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGN1dCA9IHByaWNlICogKE9XTkVSU19BVUNUSU9OX0NVVCAvIDEwMDAwKTsKICAgICAgICAgICAgc2VsbGVyLnRyYW5zZmVyKHByaWNlIC0gY3V0KTsKICAgICAgICB9CgogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlIC0gcHJpY2UpOwoKICAgICAgICBpZiAoaXNDb21iaW5lKSB7CiAgICAgICAgICAgIF9jb21iaW5lR2lybHMoc291cmNlR2lybDEsIHNvdXJjZUdpcmwyLCBfZ2lybElkLCBfbXlHaXJsLCBtc2cuc2VuZGVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdHJhbnNmZXIoc2VsbGVyLCBtc2cuc2VuZGVyLCBfZ2lybElkKTsKICAgICAgICB9CgogICAgICAgIEF1Y3Rpb25Db21wbGV0ZWQoX2dpcmxJZCwgcHJpY2UsIG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbWJpbmVNeUdpcmxzKHVpbnQyNTYgX2dpcmxJZDEsIHVpbnQyNTYgX2dpcmxJZDIpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoX2dpcmxJZDEgIT0gX2dpcmxJZDIpOwogICAgICAgIHJlcXVpcmUoZ2lybElkVG9Pd25lcltfZ2lybElkMV0gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZShnaXJsSWRUb093bmVyW19naXJsSWQyXSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgR2lybCBzdG9yYWdlIHNvdXJjZUdpcmwxID0gZ2lybHNbX2dpcmxJZDFdOwogICAgICAgIEdpcmwgc3RvcmFnZSBzb3VyY2VHaXJsMiA9IGdpcmxzW19naXJsSWQyXTsKCiAgICAgICAgcmVxdWlyZShzb3VyY2VHaXJsMS5jb21iaW5lc0xlZnQgPiAwKTsKICAgICAgICByZXF1aXJlKHNvdXJjZUdpcmwyLmNvbWJpbmVzTGVmdCA+IDApOwogICAgICAgIHJlcXVpcmUoc291cmNlR2lybDEuY29tYmluZUNvb2xlZERvd24gPCBub3cpOwogICAgICAgIHJlcXVpcmUoc291cmNlR2lybDIuY29tYmluZUNvb2xlZERvd24gPCBub3cpOwoKICAgICAgICBfY29tYmluZUdpcmxzKHNvdXJjZUdpcmwxLCBzb3VyY2VHaXJsMiwgX2dpcmxJZDEsIF9naXJsSWQyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYW5jZWxBdWN0aW9uKHVpbnQyNTYgX2dpcmxJZCkgZXh0ZXJuYWwgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gZ2lybElkVG9BdWN0aW9uW19naXJsSWRdOwogICAgICAgIHJlcXVpcmUoYXVjdGlvbi5zdGFydGluZ1ByaWNlV2VpID4gMCk7CgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhdWN0aW9uLnNlbGxlcik7CiAgICAgICAgZGVsZXRlIGdpcmxJZFRvQXVjdGlvbltfZ2lybElkXTsKICAgICAgICBBdWN0aW9uQ2FuY2VsbGVkKF9naXJsSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRBdWN0aW9uKHVpbnQyNTYgX2dpcmxJZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKGFkZHJlc3Mgc2VsbGVyLCB1aW50MjU2IHN0YXJ0aW5nUHJpY2VXZWksIHVpbnQyNTYgZW5kaW5nUHJpY2VXZWksIHVpbnQyNTYgZHVyYXRpb24sIHVpbnQyNTYgc3RhcnRlZEF0LCBib29sIGlzQ29tYmluZSkgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gZ2lybElkVG9BdWN0aW9uW19naXJsSWRdOwogICAgICAgIHJlcXVpcmUoYXVjdGlvbi5zdGFydGluZ1ByaWNlV2VpID4gMCk7CgogICAgICAgIHJldHVybiAoYXVjdGlvbi5zZWxsZXIsIGF1Y3Rpb24uc3RhcnRpbmdQcmljZVdlaSwgYXVjdGlvbi5lbmRpbmdQcmljZVdlaSwgYXVjdGlvbi5kdXJhdGlvbiwgYXVjdGlvbi5jcmVhdGlvblRpbWUsIGF1Y3Rpb24uaXNDb21iaW5lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHaXJsc0F1Y3Rpb25QcmljZSh1aW50MjU2IF9naXJsSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gZ2lybElkVG9BdWN0aW9uW19naXJsSWRdOwogICAgICAgIHJlcXVpcmUoYXVjdGlvbi5zdGFydGluZ1ByaWNlV2VpID4gMCk7CgogICAgICAgIHJldHVybiBfZ2V0QXVjdGlvblByaWNlKGF1Y3Rpb24pOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KfQoKCmNvbnRyYWN0IENyeXB0b1B1c3N5TWFpbiBpcyBDcEFwaXMgewoKICAgIGZ1bmN0aW9uIENyeXB0b1B1c3N5TWFpbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgX2NyZWF0ZUdpcmwoMCwgMCwgMCwgdWludDI1NigtMSksIG93bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKDApKTsKICAgIH0KfQ=='.
	

]
