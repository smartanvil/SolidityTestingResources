Class {
	#name : #SRT417f0b9133a8388fdb4ffa14e0c41638db7b6185,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT417f0b9133a8388fdb4ffa14e0c41638db7b6185 >> base64 [
	^ ''.
	

]
