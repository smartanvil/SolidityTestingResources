Class {
	#name : #SRT975e718da88b619738fbc548a258d1639498d32e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT975e718da88b619738fbc548a258d1639498d32e >> base64 [
	^ ''.
	

]
