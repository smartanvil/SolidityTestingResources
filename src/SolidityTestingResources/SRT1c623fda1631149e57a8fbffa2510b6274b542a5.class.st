Class {
	#name : #SRT1c623fda1631149e57a8fbffa2510b6274b542a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c623fda1631149e57a8fbffa2510b6274b542a5 >> base64 [
	^ ''.
	

]
