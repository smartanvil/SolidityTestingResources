Class {
	#name : #SRTa62a63e1b51c30feff1116df3a33ec151453bb95,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa62a63e1b51c30feff1116df3a33ec151453bb95 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgeyAKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsKfQoKaW50ZXJmYWNlIHRva2VuIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBwdWJsaWM7Cn0KCmNvbnRyYWN0IFRva2VuRVJDMjAgaXMgdG9rZW4gewogICAgLy8gUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7IC8vIDE4IGRlY2ltYWxzIGlzIHRoZSBzdHJvbmdseSBzdWdnZXN0ZWQgZGVmYXVsdCwgYXZvaWQgY2hhbmdpbmcgaXQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvLyBOb3RpZmllcyBjbGllbnRzIGFib3V0IHRva2VuIHRyYW5zZmVycwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgLy8gTm90aWZpZXMgY2xpZW50cyBhYm91dCBzcGVuZGluZyBhcHByb3ZhbAogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgLy8gVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgYnVybnQKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24KICAgICAqCiAgICAgKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5FUkMyMCgKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICkgcHVibGljIHsKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHkgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkgd2l0aCB0aGUgZGVjaW1hbCBhbW91bnQKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsgICAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgLyoqCiAgICAgKiBJbnRlcm5hbCB0cmFuc2Zlciwgb25seSBjYW4gYmUgY2FsbGVkIGJ5IHRoaXMgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gU2F2ZSB0aGlzIGZvciBhbiBhc3NlcnRpb24gaW4gdGhlIGZ1dHVyZQogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXTsKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20geW91ciBhY2NvdW50CiAgICAgKgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucyBmcm9tIG90aGVyIGFkZHJlc3MKICAgICAqCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBpbiBiZWhhbGYgb2YgYF9mcm9tYAogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsgICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF9zcGVuZGVyICE9IDB4MCk7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MgYW5kIG5vdGlmeQogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYsIGFuZCB0aGVuIHBpbmcgdGhlIGNvbnRyYWN0IGFib3V0IGl0CiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgICAqIEBwYXJhbSBfZXh0cmFEYXRhIHNvbWUgZXh0cmEgaW5mb3JtYXRpb24gdG8gc2VuZCB0byB0aGUgYXBwcm92ZWQgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9Cn0KCmNvbnRyYWN0IG93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIG93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKCgoKY29udHJhY3QgUHJlc2FsZSBpcyBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvcGVyYXRpb25zOwoKICAgIFRva2VuRVJDMjAgcHVibGljIG15VG9rZW47CiAgICB1aW50MjU2IHB1YmxpYyBkaXN0cmlidXRpb25TdXBwbHk7CiAgICB1aW50MjU2IHB1YmxpYyBwcmljZU9mVG9rZW47CiAgICB1aW50MjU2IGZhY3RvcjsKICAgIHVpbnQgcHVibGljIHN0YXJ0QmxvY2s7CiAgICB1aW50IHB1YmxpYyBlbmRCbG9jazsKCiAgICB1aW50MjU2IGRlZmF1bHRBdXRob3JpemVkRVRIOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYXV0aG9yaXplZEVUSDsKCiAgICB1aW50MjU2IHB1YmxpYyBkaXN0cmlidXRpb25SZWFsaXplZDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHJlYWxpemVkRVRIOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgcmVhbGl6ZWRUb2tlbkJhbGFuY2U7CgogICAgLyoqCiAgICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbgogICAgICoKICAgICAqIEluaXRpYWxpemVzIHRoZSBwcmVzYWxlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBQcmVzYWxlKCkgcHVibGljIHsKICAgICAgICBvcGVyYXRpb25zID0gMHgyNDlhQWI2ODBiQUY3ZWQ4NGUwZWJFNTVjRDA3ODY1MEExNzE2MkNhOwogICAgICAgIG15VG9rZW4gPSBUb2tlbkVSQzIwKDB4ZWFBYTM1ODVmZkRDYzk3M2EyMjkyOUQwOTE3OWRDMDZENTE3Yjg0ZCk7CiAgICAgICAgdWludDI1NiBkZWNpbWFscyA9IHVpbnQyNTYobXlUb2tlbi5kZWNpbWFscygpKTsKICAgICAgICBkaXN0cmlidXRpb25TdXBwbHkgPSAxMCAqKiBkZWNpbWFscyAqIDYwMDAwMDsKICAgICAgICBwcmljZU9mVG9rZW4gPSAzOTgwODkxNzE5NzQ1MjIyOwogICAgICAgIHN0YXJ0QmxvY2sgPSA0OTA5MDAwOwogICAgICAgIGVuZEJsb2NrICAgPSA0OTY2NzAwOwogICAgICAgIGRlZmF1bHRBdXRob3JpemVkRVRIID0gOCBldGhlcjsKICAgICAgICBmYWN0b3IgPSAxMCAqKiBkZWNpbWFscyAqIDMgLyAyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRpb25zIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3BlcmF0aW9ucyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck9wZXJhdGlvbnNGdW5jdGlvbihhZGRyZXNzIF9vcGVyYXRpb25zKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBvcGVyYXRpb25zID0gX29wZXJhdGlvbnM7CiAgICB9CgogICAgZnVuY3Rpb24gYXV0aG9yaXplQW1vdW50KGFkZHJlc3MgX2FjY291bnQsIHVpbnQzMiBfdmFsdWVFVEgpIG9ubHlPcGVyYXRpb25zIHB1YmxpYyB7CiAgICAgICAgYXV0aG9yaXplZEVUSFtfYWNjb3VudF0gPSB1aW50MjU2KF92YWx1ZUVUSCkgKiAxIGV0aGVyOwogICAgfQoKICAgIC8qKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24KICAgICAqCiAgICAgKiBUaGUgZnVuY3Rpb24gd2l0aG91dCBuYW1lIGlzIHRoZSBkZWZhdWx0IGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIGFueW9uZSBzZW5kcyBmdW5kcyB0byBhIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikKICAgICAgICB7CiAgICAgICAgICAgIHJlcXVpcmUoc3RhcnRCbG9jayA8PSBibG9jay5udW1iZXIgJiYgYmxvY2subnVtYmVyIDw9IGVuZEJsb2NrKTsKCiAgICAgICAgICAgIHVpbnQyNTYgc2VuZGVyQXV0aG9yaXplZEVUSCA9IGF1dGhvcml6ZWRFVEhbbXNnLnNlbmRlcl07CiAgICAgICAgICAgIHVpbnQyNTYgZWZmZWN0aXZlQXV0aG9yaXplZEVUSCA9IChzZW5kZXJBdXRob3JpemVkRVRIID4gMCk/IHNlbmRlckF1dGhvcml6ZWRFVEg6IGRlZmF1bHRBdXRob3JpemVkRVRIOwogICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSArIHJlYWxpemVkRVRIW21zZy5zZW5kZXJdIDw9IGVmZmVjdGl2ZUF1dGhvcml6ZWRFVEgpOwoKICAgICAgICAgICAgdWludDI1NiBhbW91bnRFVEggPSBtc2cudmFsdWU7CiAgICAgICAgICAgIHVpbnQyNTYgYW1vdW50VG9rZW4gPSBhbW91bnRFVEggLyBwcmljZU9mVG9rZW4gKiBmYWN0b3I7CiAgICAgICAgICAgIGRpc3RyaWJ1dGlvblJlYWxpemVkICs9IGFtb3VudFRva2VuOwogICAgICAgICAgICByZWFsaXplZEVUSFttc2cuc2VuZGVyXSArPSBhbW91bnRFVEg7CiAgICAgICAgICAgIHJlcXVpcmUoZGlzdHJpYnV0aW9uUmVhbGl6ZWQgPD0gZGlzdHJpYnV0aW9uU3VwcGx5KTsKCiAgICAgICAgICAgIGlmIChzZW5kZXJBdXRob3JpemVkRVRIID4gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbXlUb2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnRUb2tlbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZWFsaXplZFRva2VuQmFsYW5jZVttc2cuc2VuZGVyXSArPSBhbW91bnRUb2tlbjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckJhbGFuY2UoYWRkcmVzcyBfYWNjb3VudCkgb25seU9wZXJhdGlvbnMgcHVibGljIHsKICAgICAgICB1aW50MjU2IGFtb3VudFRva2VuID0gcmVhbGl6ZWRUb2tlbkJhbGFuY2VbX2FjY291bnRdOwoJaWYgKGFtb3VudFRva2VuID4gMCkKICAgICAgICB7CiAgICAgICAgICAgIHJlYWxpemVkVG9rZW5CYWxhbmNlW19hY2NvdW50XSA9IDA7CiAgICAgICAgICAgIG15VG9rZW4udHJhbnNmZXIoX2FjY291bnQsIGFtb3VudFRva2VuKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmV0cmlldmVUb2tlbigpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG15VG9rZW4udHJhbnNmZXIob3duZXIsIG15VG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZXRyaWV2ZUVUSCh1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyLnRyYW5zZmVyKF9hbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEJsb2Nrcyh1aW50IF9zdGFydEJsb2NrLCB1aW50IF9lbmRCbG9jaykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoX2VuZEJsb2NrID4gX3N0YXJ0QmxvY2spOwogICAgICAgIHN0YXJ0QmxvY2sgPSBfc3RhcnRCbG9jazsKICAgICAgICBlbmRCbG9jayA9IF9lbmRCbG9jazsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQcmljZSh1aW50MjU2IF9wcmljZU9mVG9rZW4pIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUgKF9wcmljZU9mVG9rZW4gPiAwKTsKICAgICAgICBwcmljZU9mVG9rZW4gPSBfcHJpY2VPZlRva2VuOwogICAgfQp9'.
	

]
