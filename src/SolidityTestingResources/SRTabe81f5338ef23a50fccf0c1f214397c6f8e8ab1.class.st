Class {
	#name : #SRTabe81f5338ef23a50fccf0c1f214397c6f8e8ab1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTabe81f5338ef23a50fccf0c1f214397c6f8e8ab1 >> base64 [
	^ ''.
	

]
