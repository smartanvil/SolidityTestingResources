Class {
	#name : #SRTf7ceaf2ee0a1e237e624e0e5c8b7cc0d28f01088,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf7ceaf2ee0a1e237e624e0e5c8b7cc0d28f01088 >> base64 [
	^ ''.
	

]
