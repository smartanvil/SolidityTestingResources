Class {
	#name : #SRT240a5f36ac5f5037d5a02863d1ee39a21da6d9a3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT240a5f36ac5f5037d5a02863d1ee39a21da6d9a3 >> base64 [
	^ ''.
	

]
