Class {
	#name : #SRT588047365df5ba589f923604aac23d673555c623,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT588047365df5ba589f923604aac23d673555c623 >> base64 [
	^ ''.
	

]
