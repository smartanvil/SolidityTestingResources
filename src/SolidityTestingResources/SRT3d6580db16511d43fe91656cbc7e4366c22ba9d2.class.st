Class {
	#name : #SRT3d6580db16511d43fe91656cbc7e4366c22ba9d2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3d6580db16511d43fe91656cbc7e4366c22ba9d2 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbGlmZWN5Y2xlL1BhdXNhYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMEJhc2ljLnNvbAoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0Jhc2ljVG9rZW4uc29sCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9FUkMyMC5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9TdGFuZGFyZFRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgSW5jcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGRlY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy90b2tlbi9QYXVzYWJsZVRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZSB0b2tlbgogKgogKiBAZGV2IFN0YW5kYXJkVG9rZW4gbW9kaWZpZWQgd2l0aCBwYXVzYWJsZSB0cmFuc2ZlcnMuCiAqKi8KCmNvbnRyYWN0IFBhdXNhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgUGF1c2FibGUgewoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICByZXR1cm4gc3VwZXIuaW5jcmVhc2VBcHByb3ZhbChfc3BlbmRlciwgX2FkZGVkVmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmV0dXJuIHN1cGVyLmRlY3JlYXNlQXBwcm92YWwoX3NwZW5kZXIsIF9zdWJ0cmFjdGVkVmFsdWUpOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL1NlZWxlVG9rZW4uc29sCgovLy8gQHRpdGxlIFNlZWxlVG9rZW4gQ29udHJhY3QKLy8vIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgdG9rZW4gc2FsZSwgcGxlYXNlIHZpc2l0IGh0dHBzOi8vc2VlbGUucHJvCi8vLyBAYXV0aG9yIHJlZWRob25nCmNvbnRyYWN0IFNlZWxlVG9rZW4gaXMgUGF1c2FibGVUb2tlbiB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICAvLy8gQ29uc3RhbnQgdG9rZW4gc3BlY2lmaWMgZmllbGRzCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiU2VlbGVUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJTZWVsZSI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgIC8vLyBzZWVsZSB0b3RhbCB0b2tlbnMgc3VwcGx5CiAgICB1aW50IHB1YmxpYyBjdXJyZW50U3VwcGx5OwoKICAgIC8vLyBGaWVsZHMgdGhhdCBhcmUgb25seSBjaGFuZ2VkIGluIGNvbnN0cnVjdG9yCiAgICAvLy8gc2VlbGUgc2FsZSAgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIG1pbnRlcjsgCgogICAgLy8vIEZpZWxkcyB0aGF0IGNhbiBiZSBjaGFuZ2VkIGJ5IGZ1bmN0aW9ucwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgbG9ja2VkQmFsYW5jZXM7CgogICAgLy8vIGNsYWltIGZsYWcKICAgIGJvb2wgcHVibGljIGNsYWltZWRGbGFnOyAgCgogICAgLyoKICAgICAqIE1PRElGSUVSUwogICAgICovCiAgICBtb2RpZmllciBvbmx5TWludGVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWludGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNhbkNsYWltZWQgewogICAgICAgIHJlcXVpcmUoY2xhaW1lZEZsYWcgPT0gdHJ1ZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBtYXhUb2tlbkFtb3VudE5vdFJlYWNoZWQgKHVpbnQgYW1vdW50KXsKICAgICAgICByZXF1aXJlKGN1cnJlbnRTdXBwbHkuYWRkKGFtb3VudCkgPD0gdG90YWxTdXBwbHkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRBZGRyZXNzKCBhZGRyZXNzIGFkZHIgKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMHgwKSk7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDT05TVFJVQ1RPUiAKICAgICAqIAogICAgICogQGRldiBJbml0aWFsaXplIHRoZSBTZWVsZSBUb2tlbgogICAgICogQHBhcmFtIF9taW50ZXIgVGhlIFNlZWxlQ3Jvd2RTYWxlIENvbnRyYWN0IAogICAgICogQHBhcmFtIF9tYXhUb3RhbFN1cHBseSB0b3RhbCBzdXBwbHkgdG9rZW4gICAgCiAgICAgKi8KICAgIGZ1bmN0aW9uIFNlZWxlVG9rZW4oYWRkcmVzcyBfbWludGVyLCBhZGRyZXNzIF9hZG1pbiwgdWludCBfbWF4VG90YWxTdXBwbHkpIAogICAgICAgIHB1YmxpYyAKICAgICAgICB2YWxpZEFkZHJlc3MoX2FkbWluKQogICAgICAgIHZhbGlkQWRkcmVzcyhfbWludGVyKQogICAgICAgIHsKICAgICAgICBtaW50ZXIgPSBfbWludGVyOwogICAgICAgIHRvdGFsU3VwcGx5ID0gX21heFRvdGFsU3VwcGx5OwogICAgICAgIGNsYWltZWRGbGFnID0gZmFsc2U7CiAgICAgICAgdHJhbnNmZXJPd25lcnNoaXAoX2FkbWluKTsKICAgIH0KCiAgICAvKioKICAgICAqIEVYVEVSTkFMIEZVTkNUSU9OIAogICAgICogCiAgICAgKiBAZGV2IFNlZWxlQ3Jvd2RTYWxlIGNvbnRyYWN0IGluc3RhbmNlIG1pbnQgdG9rZW4KICAgICAqIEBwYXJhbSByZWNlaXBlbnQgVGhlIGRlc3RpbmF0aW9uIGFjY291bnQgb3duZWQgbWludCB0b2tlbnMgICAgCiAgICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgbWludCB0b2tlbgogICAgICogQHBhcmFtIGlzTG9jayBMb2NrIHRva2VuIGZsYWcKICAgICAqIGJlIHNlbnQgdG8gdGhpcyBhZGRyZXNzLgogICAgICovCgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIHJlY2VpcGVudCwgdWludCBhbW91bnQsIGJvb2wgaXNMb2NrKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU1pbnRlcgogICAgICAgIG1heFRva2VuQW1vdW50Tm90UmVhY2hlZChhbW91bnQpCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBpZiAoaXNMb2NrICkgewogICAgICAgICAgICBsb2NrZWRCYWxhbmNlc1tyZWNlaXBlbnRdID0gbG9ja2VkQmFsYW5jZXNbcmVjZWlwZW50XS5hZGQoYW1vdW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBiYWxhbmNlc1tyZWNlaXBlbnRdID0gYmFsYW5jZXNbcmVjZWlwZW50XS5hZGQoYW1vdW50KTsKICAgICAgICB9CiAgICAgICAgY3VycmVudFN1cHBseSA9IGN1cnJlbnRTdXBwbHkuYWRkKGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHNldENsYWltZWRGbGFnKGJvb2wgZmxhZykgCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyIAogICAgewogICAgICAgIGNsYWltZWRGbGFnID0gZmxhZzsKICAgIH0KCiAgICAgLyoKICAgICAqIFBVQkxJQyBGVU5DVElPTlMKICAgICAqLwoKICAgIC8vLyBAZGV2IExvY2tpbmcgcGVyaW9kIGhhcyBwYXNzZWQgLSBMb2NrZWQgdG9rZW5zIGhhdmUgdHVybmVkIGludG8gdHJhZGVhYmxlCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzW10gcmVjZWlwZW50cykKICAgICAgICBwdWJsaWMKICAgICAgICBjYW5DbGFpbWVkCiAgICB7ICAgICAgICAKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCByZWNlaXBlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFkZHJlc3MgcmVjZWlwZW50ID0gcmVjZWlwZW50c1tpXTsKICAgICAgICAgICAgYmFsYW5jZXNbcmVjZWlwZW50XSA9IGJhbGFuY2VzW3JlY2VpcGVudF0uYWRkKGxvY2tlZEJhbGFuY2VzW3JlY2VpcGVudF0pOwogICAgICAgICAgICBsb2NrZWRCYWxhbmNlc1tyZWNlaXBlbnRdID0gMDsKICAgICAgICB9CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TZWVsZUNyb3dkU2FsZS5zb2wKCi8vLyBAdGl0bGUgU2VlbGVDcm93ZFNhbGUgQ29udHJhY3QKLy8vIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgdG9rZW4gc2FsZSwgcGxlYXNlIHZpc2l0IGh0dHBzOi8vc2VlbGUucHJvCi8vLyBAYXV0aG9yIHJlZWRob25nCmNvbnRyYWN0IFNlZWxlQ3Jvd2RTYWxlIGlzIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIC8vLyBDb25zdGFudCBmaWVsZHMKICAgIC8vLyBzZWVsZSB0b3RhbCB0b2tlbnMgc3VwcGx5CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTRUVMRV9UT1RBTF9TVVBQTFkgPSAxMDAwMDAwMDAwIGV0aGVyOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX1NBTEVfRFVSQVRJT04gPSA0IGRheXM7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTVEFHRV8xX1RJTUUgPSAgNiBob3VyczsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFNUQUdFXzJfVElNRSA9IDEyIGhvdXJzOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0xJTUlUID0gMC4xIGV0aGVyOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX1NUQUdFXzFfTElNSVQgPSAxIGV0aGVyOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX1NUQUdFXzJfTElNSVQgPSAyIGV0aGVyOwoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFNUQUdFXzEgPSAxOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgU1RBR0VfMiA9IDI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTVEFHRV8zID0gMzsKCgogICAgLy8vIEV4Y2hhbmdlIHJhdGVzCiAgICB1aW50IHB1YmxpYyAgZXhjaGFuZ2VSYXRlID0gMTI1MDA7CgoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1JTkVSX1NUQUtFID0gMzAwMDsgICAgLy8gZm9yIG1pbnRlcgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgT1BFTl9TQUxFX1NUQUtFID0gNjI1OyAvLyBmb3IgcHVibGljCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBPVEhFUl9TVEFLRSA9IDYzNzU7ICAgIC8vIGZvciBvdGhlcnMKCiAgICAKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERJVklTT1JfU1RBS0UgPSAxMDAwMDsKCiAgICAvLyBtYXggb3BlbiBzYWxlIHRva2VucwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUFYX09QRU5fU09MRCA9IFNFRUxFX1RPVEFMX1NVUFBMWSAqIE9QRU5fU0FMRV9TVEFLRSAvIERJVklTT1JfU1RBS0U7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTVEFLRV9NVUxUSVBMSUVSID0gU0VFTEVfVE9UQUxfU1VQUExZIC8gRElWSVNPUl9TVEFLRTsKCiAgICAvLy8gQWxsIGRlcG9zaXRlZCBFVEggd2lsbCBiZSBpbnN0YW50bHkgZm9yd2FyZGVkIHRvIHRoaXMgYWRkcmVzcy4KICAgIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICAgIGFkZHJlc3MgcHVibGljIG1pbmVyQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIG90aGVyQWRkcmVzczsKCiAgICAvLy8gQ29udHJpYnV0aW9uIHN0YXJ0IHRpbWUKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZTsKICAgIC8vLyBDb250cmlidXRpb24gZW5kIHRpbWUKICAgIHVpbnQgcHVibGljIGVuZFRpbWU7CgogICAgLy8vIEZpZWxkcyB0aGF0IGNhbiBiZSBjaGFuZ2VkIGJ5IGZ1bmN0aW9ucwogICAgLy8vIEFjY3VtdWxhdG9yIGZvciBvcGVuIHNvbGQgdG9rZW5zCiAgICB1aW50IHB1YmxpYyBvcGVuU29sZFRva2VuczsKICAgIC8vLyBFUkMyMCBjb21waWxhbnQgc2VlbGUgdG9rZW4gY29udGFjdCBpbnN0YW5jZQogICAgU2VlbGVUb2tlbiBwdWJsaWMgc2VlbGVUb2tlbjsgCgogICAgLy8vIHRhZ3Mgc2hvdyBhZGRyZXNzIGNhbiBqb2luIGluIG9wZW4gc2FsZQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnVsbFdoaXRlTGlzdDsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBmaXJzdFN0YWdlRnVuZDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHNlY29uZFN0YWdlRnVuZDsKCiAgICAvKgogICAgICogRVZFTlRTCiAgICAgKi8KICAgIGV2ZW50IE5ld1NhbGUoYWRkcmVzcyBpbmRleGVkIGRlc3RBZGRyZXNzLCB1aW50IGV0aENvc3QsIHVpbnQgZ290VG9rZW5zKTsKICAgIGV2ZW50IE5ld1dhbGxldChhZGRyZXNzIG9ud2VyLCBhZGRyZXNzIG9sZFdhbGxldCwgYWRkcmVzcyBuZXdXYWxsZXQpOwoKICAgIG1vZGlmaWVyIG5vdEVhcmxpZXJUaGFuKHVpbnQgeCkgewogICAgICAgIHJlcXVpcmUobm93ID49IHgpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgZWFybGllclRoYW4odWludCB4KSB7CiAgICAgICAgcmVxdWlyZShub3cgPCB4KTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNlaWxpbmdOb3RSZWFjaGVkKCkgewogICAgICAgIHJlcXVpcmUob3BlblNvbGRUb2tlbnMgPCBNQVhfT1BFTl9TT0xEKTsKICAgICAgICBfOwogICAgfSAgCgogICAgbW9kaWZpZXIgaXNTYWxlRW5kZWQoKSB7CiAgICAgICAgcmVxdWlyZShub3cgPiBlbmRUaW1lIHx8IG9wZW5Tb2xkVG9rZW5zID49IE1BWF9PUEVOX1NPTEQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRBZGRyZXNzKCBhZGRyZXNzIGFkZHIgKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMHgwKSk7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gU2VlbGVDcm93ZFNhbGUgKAogICAgICAgIGFkZHJlc3MgX3dhbGxldCwgCiAgICAgICAgYWRkcmVzcyBfbWluZXJBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX290aGVyQWRkcmVzcwogICAgICAgICkgcHVibGljIAogICAgICAgIHZhbGlkQWRkcmVzcyhfd2FsbGV0KSAKICAgICAgICB2YWxpZEFkZHJlc3MoX21pbmVyQWRkcmVzcykgCiAgICAgICAgdmFsaWRBZGRyZXNzKF9vdGhlckFkZHJlc3MpIAogICAgICAgIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOyAgCiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKICAgICAgICBtaW5lckFkZHJlc3MgPSBfbWluZXJBZGRyZXNzOwogICAgICAgIG90aGVyQWRkcmVzcyA9IF9vdGhlckFkZHJlc3M7ICAgICAKCiAgICAgICAgb3BlblNvbGRUb2tlbnMgPSAwOwogICAgICAgIC8vLyBDcmVhdGUgc2VlbGUgdG9rZW4gY29udHJhY3QgaW5zdGFuY2UKICAgICAgICBzZWVsZVRva2VuID0gbmV3IFNlZWxlVG9rZW4odGhpcywgbXNnLnNlbmRlciwgU0VFTEVfVE9UQUxfU1VQUExZKTsKCiAgICAgICAgc2VlbGVUb2tlbi5taW50KG1pbmVyQWRkcmVzcywgTUlORVJfU1RBS0UgKiBTVEFLRV9NVUxUSVBMSUVSLCBmYWxzZSk7CiAgICAgICAgc2VlbGVUb2tlbi5taW50KG90aGVyQWRkcmVzcywgT1RIRVJfU1RBS0UgKiBTVEFLRV9NVUxUSVBMSUVSLCBmYWxzZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RXhjaGFuZ2VSYXRlKHVpbnQyNTYgcmF0ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgICAgICBlYXJsaWVyVGhhbihlbmRUaW1lKQogICAgewogICAgICAgIGV4Y2hhbmdlUmF0ZSA9IHJhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U3RhcnRUaW1lKHVpbnQgX3N0YXJ0VGltZSApCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gc3RhcnRUaW1lICsgTUFYX1NBTEVfRFVSQVRJT047CiAgICB9CgogICAgLy8vIEBkZXYgYmF0Y2ggc2V0IHF1b3RhIGZvciB1c2VyIGFkbWluCiAgICAvLy8gaWYgb3BlblRhZyA8PTAsIHJlbW92ZWQgCiAgICBmdW5jdGlvbiBzZXRXaGl0ZUxpc3QoYWRkcmVzc1tdIHVzZXJzLCBib29sIG9wZW5UYWcpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgICAgICBlYXJsaWVyVGhhbihlbmRUaW1lKQogICAgewogICAgICAgIHJlcXVpcmUoc2FsZU5vdEVuZCgpKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB1c2Vycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBmdWxsV2hpdGVMaXN0W3VzZXJzW2ldXSA9IG9wZW5UYWc7CiAgICAgICAgfQogICAgfQoKCiAgICAvLy8gQGRldiBiYXRjaCBzZXQgcXVvdGEgZm9yIGVhcmx5IHVzZXIgcXVvdGEKICAgIC8vLyBpZiBvcGVuVGFnIDw9MCwgcmVtb3ZlZCAKICAgIGZ1bmN0aW9uIGFkZFdoaXRlTGlzdChhZGRyZXNzIHVzZXIsIGJvb2wgb3BlblRhZykKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIGVhcmxpZXJUaGFuKGVuZFRpbWUpCiAgICB7CiAgICAgICAgcmVxdWlyZShzYWxlTm90RW5kKCkpOwogICAgICAgIGZ1bGxXaGl0ZUxpc3RbdXNlcl0gPSBvcGVuVGFnOwoKICAgIH0KCiAgICAvLy8gQGRldiBFbWVyZ2VuY3kgc2l0dWF0aW9uCiAgICBmdW5jdGlvbiBzZXRXYWxsZXQoYWRkcmVzcyBuZXdBZGRyZXNzKSAgZXh0ZXJuYWwgb25seU93bmVyIHsgCiAgICAgICAgTmV3V2FsbGV0KG93bmVyLCB3YWxsZXQsIG5ld0FkZHJlc3MpOwogICAgICAgIHdhbGxldCA9IG5ld0FkZHJlc3M7IAogICAgfQoKICAgIC8vLyBAcmV0dXJuIHRydWUgaWYgc2FsZSBub3QgZW5kZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgIGZ1bmN0aW9uIHNhbGVOb3RFbmQoKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG5vdyA8IGVuZFRpbWUgJiYgb3BlblNvbGRUb2tlbnMgPCBNQVhfT1BFTl9TT0xEOwogICAgfQoKICAgIC8qKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gCiAgICAgKiAKICAgICAqIEBkZXYgSWYgYW55Ym9keSBzZW5kcyBFdGhlciBkaXJlY3RseSB0byB0aGlzICBjb250cmFjdCwgY29uc2lkZXIgaGUgaXMgZ2V0dGluZyBzZWVsZSB0b2tlbgogICAgICovCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnV5U2VlbGUobXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoKICAgICAqIFBVQkxJQyBGVU5DVElPTlMKICAgICAqLwogICAgLy8vIEBkZXYgRXhjaGFuZ2UgbXNnLnZhbHVlIGV0aGVyIHRvIFNlZWxlIGZvciBhY2NvdW50IHJlY2VwaWVudAogICAgLy8vIEBwYXJhbSByZWNlaXBpZW50IFNlZWxlIHRva2VucyByZWNlaXZlcgogICAgZnVuY3Rpb24gYnV5U2VlbGUoYWRkcmVzcyByZWNlaXBpZW50KSAKICAgICAgICBpbnRlcm5hbCAKICAgICAgICB3aGVuTm90UGF1c2VkICAKICAgICAgICBjZWlsaW5nTm90UmVhY2hlZCAKICAgICAgICBub3RFYXJsaWVyVGhhbihzdGFydFRpbWUpCiAgICAgICAgZWFybGllclRoYW4oZW5kVGltZSkKICAgICAgICB2YWxpZEFkZHJlc3MocmVjZWlwaWVudCkKICAgICAgICByZXR1cm5zIChib29sKSAKICAgIHsKICAgICAgICAvLyBEbyBub3QgYWxsb3cgY29udHJhY3RzIHRvIGdhbWUgdGhlIHN5c3RlbQogICAgICAgIHJlcXVpcmUoIWlzQ29udHJhY3QobXNnLnNlbmRlcikpOyAgICAKICAgICAgICByZXF1aXJlKHR4Lmdhc3ByaWNlIDw9IDEwMDAwMDAwMDAwMCB3ZWkpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IE1JTl9MSU1JVCk7CgogICAgICAgIGJvb2wgaW5XaGl0ZUxpc3RUYWcgPSBmdWxsV2hpdGVMaXN0W3JlY2VpcGllbnRdOyAgICAgICAKICAgICAgICByZXF1aXJlKGluV2hpdGVMaXN0VGFnID09IHRydWUpOwoKICAgICAgICB1aW50IHN0YWdlID0gU1RBR0VfMzsKICAgICAgICBpZiAoIHN0YXJ0VGltZSA8PSBub3cgJiYgbm93IDwgc3RhcnRUaW1lICsgU1RBR0VfMV9USU1FICkgewogICAgICAgICAgICBzdGFnZSA9IFNUQUdFXzE7CiAgICAgICAgICAgIHJlcXVpcmUobXNnLnZhbHVlIDw9IE1BWF9TVEFHRV8xX0xJTUlUKTsKICAgICAgICAgICAgdWludCBmdW5kMSA9IGZpcnN0U3RhZ2VGdW5kW3JlY2VpcGllbnRdOwogICAgICAgICAgICByZXF1aXJlIChmdW5kMSA8IE1BWF9TVEFHRV8xX0xJTUlUICk7CiAgICAgICAgfWVsc2UgaWYgKCBzdGFydFRpbWUgKyBTVEFHRV8xX1RJTUUgPD0gbm93ICYmIG5vdyA8IHN0YXJ0VGltZSArIFNUQUdFXzJfVElNRSApIHsKICAgICAgICAgICAgc3RhZ2UgPSBTVEFHRV8yOwogICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA8PSBNQVhfU1RBR0VfMl9MSU1JVCk7CiAgICAgICAgICAgIHVpbnQgZnVuZDIgPSBzZWNvbmRTdGFnZUZ1bmRbcmVjZWlwaWVudF07CiAgICAgICAgICAgIHJlcXVpcmUgKGZ1bmQyIDwgTUFYX1NUQUdFXzJfTElNSVQgKTsKICAgICAgICB9CgogICAgICAgIGRvQnV5KHJlY2VpcGllbnQsIHN0YWdlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8vLyBAZGV2IEJ1eSBzZWVsZSB0b2tlbiBub3JtYWxseQogICAgZnVuY3Rpb24gZG9CdXkoYWRkcmVzcyByZWNlaXBpZW50LCB1aW50IHN0YWdlKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gcHJvdGVjdCBwYXJ0bmVyIHF1b3RhIGluIHN0YWdlIG9uZQogICAgICAgIHVpbnQgdmFsdWUgPSBtc2cudmFsdWU7CgogICAgICAgIGlmICggc3RhZ2UgPT0gU1RBR0VfMSApIHsKICAgICAgICAgICAgdWludCBmdW5kMSA9IGZpcnN0U3RhZ2VGdW5kW3JlY2VpcGllbnRdOwogICAgICAgICAgICBmdW5kMSA9IGZ1bmQxLmFkZCh2YWx1ZSk7CiAgICAgICAgICAgIGlmIChmdW5kMSA+IE1BWF9TVEFHRV8xX0xJTUlUICkgewogICAgICAgICAgICAgICAgdWludCByZWZ1bmQxID0gZnVuZDEuc3ViKE1BWF9TVEFHRV8xX0xJTUlUKTsKICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3ViKHJlZnVuZDEpOwogICAgICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZWZ1bmQxKTsKICAgICAgICAgICAgfQogICAgICAgIH1lbHNlIGlmICggc3RhZ2UgPT0gU1RBR0VfMiApIHsKICAgICAgICAgICAgdWludCBmdW5kMiA9IHNlY29uZFN0YWdlRnVuZFtyZWNlaXBpZW50XTsKICAgICAgICAgICAgZnVuZDIgPSBmdW5kMi5hZGQodmFsdWUpOwogICAgICAgICAgICBpZiAoZnVuZDIgPiBNQVhfU1RBR0VfMl9MSU1JVCkgewogICAgICAgICAgICAgICAgdWludCByZWZ1bmQyID0gZnVuZDIuc3ViKE1BWF9TVEFHRV8yX0xJTUlUKTsKICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3ViKHJlZnVuZDIpOwogICAgICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZWZ1bmQyKTsKICAgICAgICAgICAgfSAgICAgICAgICAgIAogICAgICAgIH0KCiAgICAgICAgdWludCB0b2tlbkF2YWlsYWJsZSA9IE1BWF9PUEVOX1NPTEQuc3ViKG9wZW5Tb2xkVG9rZW5zKTsKICAgICAgICByZXF1aXJlKHRva2VuQXZhaWxhYmxlID4gMCk7CiAgICAgICAgdWludCB0b0Z1bmQ7CiAgICAgICAgdWludCB0b0NvbGxlY3Q7CiAgICAgICAgKHRvRnVuZCwgdG9Db2xsZWN0KSA9IGNvc3RBbmRCdXlUb2tlbnModG9rZW5BdmFpbGFibGUsIHZhbHVlKTsKICAgICAgICBpZiAodG9GdW5kID4gMCkgewogICAgICAgICAgICByZXF1aXJlKHNlZWxlVG9rZW4ubWludChyZWNlaXBpZW50LCB0b0NvbGxlY3QsdHJ1ZSkpOyAgICAgICAgIAogICAgICAgICAgICB3YWxsZXQudHJhbnNmZXIodG9GdW5kKTsKICAgICAgICAgICAgb3BlblNvbGRUb2tlbnMgPSBvcGVuU29sZFRva2Vucy5hZGQodG9Db2xsZWN0KTsKICAgICAgICAgICAgTmV3U2FsZShyZWNlaXBpZW50LCB0b0Z1bmQsIHRvQ29sbGVjdCk7ICAgICAgICAgICAgIAogICAgICAgIH0KCiAgICAgICAgLy8gbm90IGVub3VnaCB0b2tlbiBzYWxlLCBqdXN0IHJldHVybiBldGgKICAgICAgICB1aW50IHRvUmV0dXJuID0gdmFsdWUuc3ViKHRvRnVuZCk7CiAgICAgICAgaWYgKHRvUmV0dXJuID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRvUmV0dXJuKTsKICAgICAgICB9CgogICAgICAgIGlmICggc3RhZ2UgPT0gU1RBR0VfMSApIHsKICAgICAgICAgICAgZmlyc3RTdGFnZUZ1bmRbcmVjZWlwaWVudF0gPSBmaXJzdFN0YWdlRnVuZFtyZWNlaXBpZW50XS5hZGQodG9GdW5kKTsKICAgICAgICB9ZWxzZSBpZiAoIHN0YWdlID09IFNUQUdFXzIgKSB7CiAgICAgICAgICAgIHNlY29uZFN0YWdlRnVuZFtyZWNlaXBpZW50XSA9IHNlY29uZFN0YWdlRnVuZFtyZWNlaXBpZW50XS5hZGQodG9GdW5kKTsgICAgICAgICAgCiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGNhbGN1bGF0ZSBhdmFpbGFibGUgdG9rZW5zIGFuZCBjb3N0IGV0aGVycwogICAgZnVuY3Rpb24gY29zdEFuZEJ1eVRva2Vucyh1aW50IGF2YWlsYWJsZVRva2VuLCB1aW50IHZhbHVlKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50IGNvc3RWYWx1ZSwgdWludCBnZXRUb2tlbnMpIHsKICAgICAgICAvLyBhbGwgY29uZGl0aW9ucyBoYXMgY2hlY2tlZCBpbiB0aGUgY2FsbGVyIGZ1bmN0aW9ucwogICAgICAgIGdldFRva2VucyA9IGV4Y2hhbmdlUmF0ZSAqIHZhbHVlOwoKICAgICAgICBpZiAoYXZhaWxhYmxlVG9rZW4gPj0gZ2V0VG9rZW5zKSB7CiAgICAgICAgICAgIGNvc3RWYWx1ZSA9IHZhbHVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvc3RWYWx1ZSA9IGF2YWlsYWJsZVRva2VuIC8gZXhjaGFuZ2VSYXRlOwogICAgICAgICAgICBnZXRUb2tlbnMgPSBhdmFpbGFibGVUb2tlbjsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGFkZHJlc3MgaXMgYSBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfYWRkciBUaGUgYWRkcmVzcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIGBfYWRkcmAgaXMgYSBjb250cmFjdAogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgICAgICB1aW50IHNpemU7CiAgICAgICAgaWYgKF9hZGRyID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2l6ZSA+IDA7CiAgICB9Cn0='.
	

]
