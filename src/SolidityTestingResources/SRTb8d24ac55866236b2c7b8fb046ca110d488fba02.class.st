Class {
	#name : #SRTb8d24ac55866236b2c7b8fb046ca110d488fba02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8d24ac55866236b2c7b8fb046ca110d488fba02 >> base64 [
	^ ''.
	

]
