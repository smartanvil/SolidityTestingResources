Class {
	#name : #SRTf3e014fe81267870624132ef3a646b8e83853a96,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf3e014fe81267870624132ef3a646b8e83853a96 >> base64 [
	^ ''.
	

]
