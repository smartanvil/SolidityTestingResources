Class {
	#name : #SRTcbc2fb817bc0e434978e16f96950d84c38c77bde,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcbc2fb817bc0e434978e16f96950d84c38c77bde >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgQWNjZXNzQ29udHJvbCB7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yQWRkcmVzczsKICAgIHVpbnQxNiBwdWJsaWMgdG90YWxTZXJhcGhpbXMgPSAwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgc2VyYXBoaW1zOwoKICAgIGJvb2wgcHVibGljIGlzTWFpbnRlbmFuY2VNb2RlID0gdHJ1ZTsKIAogICAgbW9kaWZpZXIgb25seUNSRUFUT1IoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyZWF0b3JBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlTRVJBUEhJTSgpIHsKICAgICAgICByZXF1aXJlKHNlcmFwaGltc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBpc0NvbnRyYWN0QWN0aXZlIHsKICAgICAgICByZXF1aXJlKCFpc01haW50ZW5hbmNlTW9kZSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEFjY2Vzc0NvbnRyb2woKSBwdWJsaWMgewogICAgICAgIGNyZWF0b3JBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAoKICAgIGZ1bmN0aW9uIGFkZFNFUkFQSElNKGFkZHJlc3MgX25ld1NlcmFwaGltKSBvbmx5Q1JFQVRPUiBwdWJsaWMgewogICAgICAgIGlmIChzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9PSBmYWxzZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9IHRydWU7CiAgICAgICAgICAgIHRvdGFsU2VyYXBoaW1zICs9IDE7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVTRVJBUEhJTShhZGRyZXNzIF9vbGRTZXJhcGhpbSkgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpZiAoc2VyYXBoaW1zW19vbGRTZXJhcGhpbV0gPT0gdHJ1ZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX29sZFNlcmFwaGltXSA9IGZhbHNlOwogICAgICAgICAgICB0b3RhbFNlcmFwaGltcyAtPSAxOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVNYWludGVuYW5jZU1vZGUoYm9vbCBfaXNNYWludGFpbmluZykgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpc01haW50ZW5hbmNlTW9kZSA9IF9pc01haW50YWluaW5nOwogICAgfQoKICAKfSAKCgoKLyoqCiAqIEB0aXRsZSBFUkM3MjEgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9laXBzL2lzc3Vlcy83MjEKICovCmNvbnRyYWN0IEVSQzcyMSB7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF90b2tlbklkKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX2FwcHJvdmVkLCB1aW50MjU2IF90b2tlbklkKTsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKTsKICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKfQoKCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIHVpbnQgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIHVpbnQgeiA9IHggKiB5OwogICAgICBhc3NlcnQoKHggPT0gMCl8fCh6L3ggPT0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIodWludDE2IG1heFJhbmRvbSwgdWludDggbWluLCBhZGRyZXNzIHByaXZhdGVBZGRyZXNzKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50OCkgewogICAgICAgIHVpbnQyNTYgZ2VuTnVtID0gdWludDI1NihibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSArIHVpbnQyNTYocHJpdmF0ZUFkZHJlc3MpOwogICAgICAgIHJldHVybiB1aW50OChnZW5OdW0gJSAobWF4UmFuZG9tIC0gbWluICsgMSkrbWluKTsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDNzIxVG9rZW4KICogR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHJlcXVpcmVkIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVSQzcyMSBzdGFuZGFyZAogKi8KY29udHJhY3QgTWVkYWxEYXRhIGlzIEVSQzcyMSwgQWNjZXNzQ29udHJvbCwgU2FmZU1hdGggewogIAogIC8vIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICB1aW50MjU2IHByaXZhdGUgdG90YWxUb2tlbnM7CgogIC8vIE1hcHBpbmcgZnJvbSB0b2tlbiBJRCB0byBvd25lcgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHRva2VuT3duZXI7CgovLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gbWVkYWwgdHlwZQogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDgpIHB1YmxpYyBtZWRhbFR5cGU7CiAgCiAgLy8gTWFwcGluZyBmcm9tIHRva2VuIElEIHRvIGFwcHJvdmVkIGFkZHJlc3MKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgdG9rZW5BcHByb3ZhbHM7CgogIC8vIE1hcHBpbmcgZnJvbSBvd25lciB0byBsaXN0IG9mIG93bmVkIHRva2VuIElEcwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NltdKSBwcml2YXRlIG93bmVkVG9rZW5zOwoKICAvLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gaW5kZXggb2YgdGhlIG93bmVyIHRva2VucyBsaXN0CiAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZWRUb2tlbnNJbmRleDsKICAKICB1aW50MzJbMTJdIHB1YmxpYyBjdXJyZW50VG9rZW5OdW1iZXJzOwogIAogIHVpbnQzMlsxMl0gcHVibGljIG1heFRva2VuTnVtYmVyczsKCgoKCgogIC8qKgogICogQGRldiBHdWFyYW50ZWVzIG1zZy5zZW5kZXIgaXMgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuCiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gdmFsaWRhdGUgaXRzIG93bmVyc2hpcCBiZWxvbmdzIHRvIG1zZy5zZW5kZXIKICAqLwogIG1vZGlmaWVyIG9ubHlPd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgc3RvcmVkIGJ5IHRoZSBjb250cmFjdAogICogQHJldHVybiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucwogICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdG90YWxUb2tlbnM7CiAgfQogIAogIGZ1bmN0aW9uIHNldE1heFRva2VuTnVtYmVycygpIGV4dGVybmFsIG9ubHlDUkVBVE9SIHsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzBdID0gNTAwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzFdID0gNTAwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzJdID0gNTAwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzNdID0gNTAwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzRdID0gNTAwOwogICAgICBtYXhUb2tlbk51bWJlcnNbNV0gPSA1MDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1s2XSA9IDIwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzddID0gMjAwOwogICAgICBtYXhUb2tlbk51bWJlcnNbOF0gPSAyMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1s5XSA9IDEwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzEwXSA9IDEwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzExXSA9IDUwOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gcXVlcnkgdGhlIGJhbGFuY2Ugb2YKICAqIEByZXR1cm4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MKICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIG93bmVkVG9rZW5zW19vd25lcl0ubGVuZ3RoOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGxpc3Qgb2YgdG9rZW5zIG93bmVkIGJ5IGEgZ2l2ZW4gYWRkcmVzcwogICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0b2tlbnMgb2YKICAqIEByZXR1cm4gdWludDI1NltdIHJlcHJlc2VudGluZyB0aGUgbGlzdCBvZiB0b2tlbnMgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiB0b2tlbnNPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NltdKSB7CiAgICByZXR1cm4gb3duZWRUb2tlbnNbX293bmVyXTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBvd25lciBvZiB0aGUgc3BlY2lmaWVkIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gcXVlcnkgdGhlIG93bmVyIG9mCiAgKiBAcmV0dXJuIG93bmVyIGFkZHJlc3MgY3VycmVudGx5IG1hcmtlZCBhcyB0aGUgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKi8KICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIGFkZHJlc3Mgb3duZXIgPSB0b2tlbk93bmVyW190b2tlbklkXTsKICAgIHJlcXVpcmUob3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICByZXR1cm4gb3duZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IEdldHMgdGhlIGFwcHJvdmVkIGFkZHJlc3MgdG8gdGFrZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRAogICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBxdWVyeSB0aGUgYXBwcm92YWwgb2YKICAgKiBAcmV0dXJuIGFkZHJlc3MgY3VycmVudGx5IGFwcHJvdmVkIHRvIHRha2Ugb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmVkRm9yKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIHJldHVybiB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF07CiAgfQoKICAvKioKICAqIEBkZXYgVHJhbnNmZXJzIHRoZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRCB0byBhbm90aGVyIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byByZWNlaXZlIHRoZSBvd25lcnNoaXAgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU93bmVyT2YoX3Rva2VuSWQpIHsKICAgIGNsZWFyQXBwcm92YWxBbmRUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBBcHByb3ZlcyBhbm90aGVyIGFkZHJlc3MgdG8gY2xhaW0gZm9yIHRoZSBvd25lcnNoaXAgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gYmUgYXBwcm92ZWQgZm9yIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIGFwcHJvdmVkCiAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU93bmVyT2YoX3Rva2VuSWQpIHsKICAgIGFkZHJlc3Mgb3duZXIgPSBvd25lck9mKF90b2tlbklkKTsKICAgIHJlcXVpcmUoX3RvICE9IG93bmVyKTsKICAgIGlmIChhcHByb3ZlZEZvcihfdG9rZW5JZCkgIT0gMCB8fCBfdG8gIT0gMCkgewogICAgICB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF0gPSBfdG87CiAgICAgIEFwcHJvdmFsKG93bmVyLCBfdG8sIF90b2tlbklkKTsKICAgIH0KICB9CgogIC8qKgogICogQGRldiBDbGFpbXMgdGhlIG93bmVyc2hpcCBvZiBhIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gYmVpbmcgY2xhaW1lZCBieSB0aGUgbXNnLnNlbmRlcgogICovCiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogICAgcmVxdWlyZShpc0FwcHJvdmVkRm9yKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICBjbGVhckFwcHJvdmFsQW5kVHJhbnNmZXIob3duZXJPZihfdG9rZW5JZCksIG1zZy5zZW5kZXIsIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBNaW50IHRva2VuIGZ1bmN0aW9uCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBvd24gdGhlIG1pbnRlZCB0b2tlbgogICovCiAgCiAgZnVuY3Rpb24gX2NyZWF0ZU1lZGFsKGFkZHJlc3MgX3RvLCB1aW50OCBfc2VyaWVzSUQpIHB1YmxpYyBvbmx5U0VSQVBISU0gewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgIGlmIChjdXJyZW50VG9rZW5OdW1iZXJzW19zZXJpZXNJRF0gPD0gbWF4VG9rZW5OdW1iZXJzW19zZXJpZXNJRF0pIHsKICAgIG1lZGFsVHlwZVt0b3RhbFRva2Vuc10gPSBfc2VyaWVzSUQ7CiAgICBjdXJyZW50VG9rZW5OdW1iZXJzW19zZXJpZXNJRF09IGN1cnJlbnRUb2tlbk51bWJlcnNbX3Nlcmllc0lEXSsxOwogICAgYWRkVG9rZW4oX3RvLCB0b3RhbFRva2Vucyk7CiAgICBUcmFuc2ZlcigweDAsIF90bywgdG90YWxUb2tlbnMpOwogIH0KICB9CgoKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRUb2tlbnNCeVR5cGUodWludDMyIF9zZXJpZXNJRCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQzMikgewogICAgICAgIHJldHVybiBjdXJyZW50VG9rZW5OdW1iZXJzW19zZXJpZXNJRF07CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWVkYWxUeXBlICh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICByZXR1cm4gbWVkYWxUeXBlW190b2tlbklkXTsKICAgIH0KICAvKioKICAqIEBkZXYgQnVybnMgYSBzcGVjaWZpYyB0b2tlbgogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIGJlaW5nIGJ1cm5lZCBieSB0aGUgbXNnLnNlbmRlcgogICovCiAgZnVuY3Rpb24gX2J1cm4odWludDI1NiBfdG9rZW5JZCkgb25seU93bmVyT2YoX3Rva2VuSWQpIGV4dGVybmFsIHsKICAgIGlmIChhcHByb3ZlZEZvcihfdG9rZW5JZCkgIT0gMCkgewogICAgICBjbGVhckFwcHJvdmFsKG1zZy5zZW5kZXIsIF90b2tlbklkKTsKICAgIH0KICAgIHJlbW92ZVRva2VuKG1zZy5zZW5kZXIsIF90b2tlbklkKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDB4MCwgX3Rva2VuSWQpOwogIH0KCiAgLyoqCiAgICogQGRldiBUZWxscyB3aGV0aGVyIHRoZSBtc2cuc2VuZGVyIGlzIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQgb3Igbm90CiAgICogVGhpcyBmdW5jdGlvbiBpcyBub3QgcHJpdmF0ZSBzbyBpdCBjYW4gYmUgZXh0ZW5kZWQgaW4gZnVydGhlciBpbXBsZW1lbnRhdGlvbnMgbGlrZSB0aGUgb3BlcmF0YWJsZSBFUkM3MjEKICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3Mgb2YgdGhlIG93bmVyIHRvIHF1ZXJ5IHRoZSBhcHByb3ZhbCBvZgogICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBxdWVyeSB0aGUgYXBwcm92YWwgb2YKICAgKiBAcmV0dXJuIGJvb2wgd2hldGhlciB0aGUgbXNnLnNlbmRlciBpcyBhcHByb3ZlZCBmb3IgdGhlIGdpdmVuIHRva2VuIElEIG9yIG5vdAogICAqLwogIGZ1bmN0aW9uIGlzQXBwcm92ZWRGb3IoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGFwcHJvdmVkRm9yKF90b2tlbklkKSA9PSBfb3duZXI7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2xlYXIgY3VycmVudCBhcHByb3ZhbCBhbmQgdHJhbnNmZXIgdGhlIG93bmVyc2hpcCBvZiBhIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdGhlIHRva2VuIHRvCiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAqLwogIGZ1bmN0aW9uIGNsZWFyQXBwcm92YWxBbmRUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF90byAhPSBvd25lck9mKF90b2tlbklkKSk7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9mcm9tKTsKCiAgICBjbGVhckFwcHJvdmFsKF9mcm9tLCBfdG9rZW5JZCk7CiAgICByZW1vdmVUb2tlbihfZnJvbSwgX3Rva2VuSWQpOwogICAgYWRkVG9rZW4oX3RvLCBfdG9rZW5JZCk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2xlYXIgY3VycmVudCBhcHByb3ZhbCBvZiBhIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAqLwogIGZ1bmN0aW9uIGNsZWFyQXBwcm92YWwoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgewogICAgcmVxdWlyZShvd25lck9mKF90b2tlbklkKSA9PSBfb3duZXIpOwogICAgdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdID0gMDsKICAgIEFwcHJvdmFsKF9vd25lciwgMCwgX3Rva2VuSWQpOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGFkZCBhIHRva2VuIElEIHRvIHRoZSBsaXN0IG9mIGEgZ2l2ZW4gYWRkcmVzcwogICogQHBhcmFtIF90byBhZGRyZXNzIHJlcHJlc2VudGluZyB0aGUgbmV3IG93bmVyIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIGFkZGVkIHRvIHRoZSB0b2tlbnMgbGlzdCBvZiB0aGUgZ2l2ZW4gYWRkcmVzcwogICovCiAgZnVuY3Rpb24gYWRkVG9rZW4oYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgewogICAgcmVxdWlyZSh0b2tlbk93bmVyW190b2tlbklkXSA9PSBhZGRyZXNzKDApKTsKICAgIHRva2VuT3duZXJbX3Rva2VuSWRdID0gX3RvOwogICAgdWludDI1NiBsZW5ndGggPSBiYWxhbmNlT2YoX3RvKTsKICAgIG93bmVkVG9rZW5zW190b10ucHVzaChfdG9rZW5JZCk7CiAgICBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXSA9IGxlbmd0aDsKICAgIHRvdGFsVG9rZW5zID0gc2FmZUFkZCh0b3RhbFRva2VucywgMSk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gcmVtb3ZlIGEgdG9rZW4gSUQgZnJvbSB0aGUgbGlzdCBvZiBhIGdpdmVuIGFkZHJlc3MKICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHJlcHJlc2VudGluZyB0aGUgcHJldmlvdXMgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSB0b2tlbnMgbGlzdCBvZiB0aGUgZ2l2ZW4gYWRkcmVzcwogICovCiAgZnVuY3Rpb24gcmVtb3ZlVG9rZW4oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9mcm9tKTsKCiAgICB1aW50MjU2IHRva2VuSW5kZXggPSBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXTsKICAgIHVpbnQyNTYgbGFzdFRva2VuSW5kZXggPSBzYWZlU3VidHJhY3QoYmFsYW5jZU9mKF9mcm9tKSwxKTsKICAgIHVpbnQyNTYgbGFzdFRva2VuID0gb3duZWRUb2tlbnNbX2Zyb21dW2xhc3RUb2tlbkluZGV4XTsKCiAgICB0b2tlbk93bmVyW190b2tlbklkXSA9IDA7CiAgICBvd25lZFRva2Vuc1tfZnJvbV1bdG9rZW5JbmRleF0gPSBsYXN0VG9rZW47CiAgICBvd25lZFRva2Vuc1tfZnJvbV1bbGFzdFRva2VuSW5kZXhdID0gMDsKICAgIC8vIE5vdGUgdGhhdCB0aGlzIHdpbGwgaGFuZGxlIHNpbmdsZS1lbGVtZW50IGFycmF5cy4gSW4gdGhhdCBjYXNlLCBib3RoIHRva2VuSW5kZXggYW5kIGxhc3RUb2tlbkluZGV4IGFyZSBnb2luZyB0bwogICAgLy8gYmUgemVyby4gVGhlbiB3ZSBjYW4gbWFrZSBzdXJlIHRoYXQgd2Ugd2lsbCByZW1vdmUgX3Rva2VuSWQgZnJvbSB0aGUgb3duZWRUb2tlbnMgbGlzdCBzaW5jZSB3ZSBhcmUgZmlyc3Qgc3dhcHBpbmcKICAgIC8vIHRoZSBsYXN0VG9rZW4gdG8gdGhlIGZpcnN0IHBvc2l0aW9uLCBhbmQgdGhlbiBkcm9wcGluZyB0aGUgZWxlbWVudCBwbGFjZWQgaW4gdGhlIGxhc3QgcG9zaXRpb24gb2YgdGhlIGxpc3QKCiAgICBvd25lZFRva2Vuc1tfZnJvbV0ubGVuZ3RoLS07CiAgICBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXSA9IDA7CiAgICBvd25lZFRva2Vuc0luZGV4W2xhc3RUb2tlbl0gPSB0b2tlbkluZGV4OwogICAgdG90YWxUb2tlbnMgPSBzYWZlU3VidHJhY3QodG90YWxUb2tlbnMsMSk7CiAgfQp9'.
	

]
