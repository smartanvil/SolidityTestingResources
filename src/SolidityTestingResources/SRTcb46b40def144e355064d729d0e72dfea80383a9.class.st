Class {
	#name : #SRTcb46b40def144e355064d729d0e72dfea80383a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb46b40def144e355064d729d0e72dfea80383a9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBQZXJtaXNzaW9uR3JvdXBzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKICAgIGFkZHJlc3MgcHVibGljIHBlbmRpbmdBZG1pbjsKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgaW50ZXJuYWwgb3BlcmF0b3JzOwogICAgbWFwcGluZyhhZGRyZXNzPT5ib29sKSBpbnRlcm5hbCBhbGVydGVyczsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBvcGVyYXRvcnNHcm91cDsKICAgIGFkZHJlc3NbXSBpbnRlcm5hbCBhbGVydGVyc0dyb3VwOwoKICAgIGZ1bmN0aW9uIFBlcm1pc3Npb25Hcm91cHMoKSBwdWJsaWMgewogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPcGVyYXRvcigpIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5QWxlcnRlcigpIHsKICAgICAgICByZXF1aXJlKGFsZXJ0ZXJzW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE9wZXJhdG9ycyAoKSBleHRlcm5hbCB2aWV3IHJldHVybnMoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIG9wZXJhdG9yc0dyb3VwOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFsZXJ0ZXJzICgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gYWxlcnRlcnNHcm91cDsKICAgIH0KCiAgICBldmVudCBUcmFuc2ZlckFkbWluUGVuZGluZyhhZGRyZXNzIHBlbmRpbmdBZG1pbik7CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzLgogICAgICogQHBhcmFtIG5ld0FkbWluIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJBZG1pbihhZGRyZXNzIG5ld0FkbWluKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG5ld0FkbWluICE9IGFkZHJlc3MoMCkpOwogICAgICAgIFRyYW5zZmVyQWRtaW5QZW5kaW5nKHBlbmRpbmdBZG1pbik7CiAgICAgICAgcGVuZGluZ0FkbWluID0gbmV3QWRtaW47CiAgICB9CgogICAgZXZlbnQgQWRtaW5DbGFpbWVkKCBhZGRyZXNzIG5ld0FkbWluLCBhZGRyZXNzIHByZXZpb3VzQWRtaW4pOwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIHBlbmRpbmdBZG1pbiBhZGRyZXNzIHRvIGZpbmFsaXplIHRoZSBjaGFuZ2UgYWRtaW4gcHJvY2Vzcy4KICAgICAqLwogICAgZnVuY3Rpb24gY2xhaW1BZG1pbigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShwZW5kaW5nQWRtaW4gPT0gbXNnLnNlbmRlcik7CiAgICAgICAgQWRtaW5DbGFpbWVkKHBlbmRpbmdBZG1pbiwgYWRtaW4pOwogICAgICAgIGFkbWluID0gcGVuZGluZ0FkbWluOwogICAgICAgIHBlbmRpbmdBZG1pbiA9IGFkZHJlc3MoMCk7CiAgICB9CgogICAgZXZlbnQgQWxlcnRlckFkZGVkIChhZGRyZXNzIG5ld0FsZXJ0ZXIsIGJvb2wgaXNBZGQpOwoKICAgIGZ1bmN0aW9uIGFkZEFsZXJ0ZXIoYWRkcmVzcyBuZXdBbGVydGVyKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFhbGVydGVyc1tuZXdBbGVydGVyXSk7IC8vIHByZXZlbnQgZHVwbGljYXRlcy4KICAgICAgICBBbGVydGVyQWRkZWQobmV3QWxlcnRlciwgdHJ1ZSk7CiAgICAgICAgYWxlcnRlcnNbbmV3QWxlcnRlcl0gPSB0cnVlOwogICAgICAgIGFsZXJ0ZXJzR3JvdXAucHVzaChuZXdBbGVydGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVBbGVydGVyIChhZGRyZXNzIGFsZXJ0ZXIpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICAgIHJlcXVpcmUoYWxlcnRlcnNbYWxlcnRlcl0pOwogICAgICAgIGFsZXJ0ZXJzW2FsZXJ0ZXJdID0gZmFsc2U7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsZXJ0ZXJzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGFsZXJ0ZXJzR3JvdXBbaV0gPT0gYWxlcnRlcikgewogICAgICAgICAgICAgICAgYWxlcnRlcnNHcm91cFtpXSA9IGFsZXJ0ZXJzR3JvdXBbYWxlcnRlcnNHcm91cC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIGFsZXJ0ZXJzR3JvdXAubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBBbGVydGVyQWRkZWQoYWxlcnRlciwgZmFsc2UpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZXZlbnQgT3BlcmF0b3JBZGRlZChhZGRyZXNzIG5ld09wZXJhdG9yLCBib29sIGlzQWRkKTsKCiAgICBmdW5jdGlvbiBhZGRPcGVyYXRvcihhZGRyZXNzIG5ld09wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKCFvcGVyYXRvcnNbbmV3T3BlcmF0b3JdKTsgLy8gcHJldmVudCBkdXBsaWNhdGVzLgogICAgICAgIE9wZXJhdG9yQWRkZWQobmV3T3BlcmF0b3IsIHRydWUpOwogICAgICAgIG9wZXJhdG9yc1tuZXdPcGVyYXRvcl0gPSB0cnVlOwogICAgICAgIG9wZXJhdG9yc0dyb3VwLnB1c2gobmV3T3BlcmF0b3IpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZU9wZXJhdG9yIChhZGRyZXNzIG9wZXJhdG9yKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgICByZXF1aXJlKG9wZXJhdG9yc1tvcGVyYXRvcl0pOwogICAgICAgIG9wZXJhdG9yc1tvcGVyYXRvcl0gPSBmYWxzZTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgb3BlcmF0b3JzR3JvdXAubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKG9wZXJhdG9yc0dyb3VwW2ldID09IG9wZXJhdG9yKSB7CiAgICAgICAgICAgICAgICBvcGVyYXRvcnNHcm91cFtpXSA9IG9wZXJhdG9yc0dyb3VwW29wZXJhdG9yc0dyb3VwLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgb3BlcmF0b3JzR3JvdXAubGVuZ3RoIC09IDE7CiAgICAgICAgICAgICAgICBPcGVyYXRvckFkZGVkKG9wZXJhdG9yLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKaW50ZXJmYWNlIEVSQzIwIHsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBzdXBwbHkpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKTsKICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50IGRpZ2l0cyk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKfQoKY29udHJhY3QgV2l0aGRyYXdhYmxlIGlzIFBlcm1pc3Npb25Hcm91cHMgewoKICAgIGV2ZW50IFRva2VuV2l0aGRyYXcoRVJDMjAgdG9rZW4sIHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbyk7CgogICAgLyoqCiAgICAgKiBAZGV2IFdpdGhkcmF3IGFsbCBFUkMyMCBjb21wYXRpYmxlIHRva2VucwogICAgICogQHBhcmFtIHRva2VuIEVSQzIwIFRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCwgYWRkcmVzcyBzZW5kVG8pIGV4dGVybmFsIG9ubHlBZG1pbiB7CiAgICAgICAgcmVxdWlyZSh0b2tlbi50cmFuc2ZlcihzZW5kVG8sIGFtb3VudCkpOwogICAgICAgIFRva2VuV2l0aGRyYXcodG9rZW4sIGFtb3VudCwgc2VuZFRvKTsKICAgIH0KCiAgICBldmVudCBFdGhlcldpdGhkcmF3KHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbyk7CgogICAgLyoqCiAgICAgKiBAZGV2IFdpdGhkcmF3IEV0aGVycwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKHVpbnQgYW1vdW50LCBhZGRyZXNzIHNlbmRUbykgZXh0ZXJuYWwgb25seUFkbWluIHsKICAgICAgICBzZW5kVG8udHJhbnNmZXIoYW1vdW50KTsKICAgICAgICBFdGhlcldpdGhkcmF3KGFtb3VudCwgc2VuZFRvKTsKICAgIH0KfQoKY29udHJhY3QgV2hpdGVMaXN0IGlzIFdpdGhkcmF3YWJsZSB7CgogICAgdWludCBwdWJsaWMgd2VpUGVyU2dkOyAvLyBhbW91bnQgb2Ygd2VpcyBpbiAxIHNpbmdhcG9yZSBkb2xsYXIKICAgIG1hcHBpbmcgKGFkZHJlc3M9PnVpbnQpIHB1YmxpYyB1c2VyQ2F0ZWdvcnk7IC8vIGVhY2ggdXNlciBoYXMgYSBjYXRlZ29yeSBkZWZpbmluZyBjYXAgb24gdHJhZGUuIDAgZm9yIHN0YW5kYXJkLgogICAgbWFwcGluZyAodWludD0+dWludCkgICAgcHVibGljIGNhdGVnb3J5Q2FwOyAgLy8gd2lsbCBkZWZpbmUgY2FwIG9uIHRyYWRlIGFtb3VudCBwZXIgY2F0ZWdvcnkgaW4gc2luZ2Fwb3JlIERvbGxhci4KCiAgICBmdW5jdGlvbiBXaGl0ZUxpc3QoYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfYWRtaW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgYWRtaW4gPSBfYWRtaW47CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VXNlckNhcEluV2VpKGFkZHJlc3MgdXNlcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50IHVzZXJDYXBXZWkpIHsKICAgICAgICB1aW50IGNhdGVnb3J5ID0gdXNlckNhdGVnb3J5W3VzZXJdOwogICAgICAgIHJldHVybiAoY2F0ZWdvcnlDYXBbY2F0ZWdvcnldICogd2VpUGVyU2dkKTsKICAgIH0KCiAgICBldmVudCBVc2VyQ2F0ZWdvcnlTZXQoYWRkcmVzcyB1c2VyLCB1aW50IGNhdGVnb3J5KTsKCiAgICBmdW5jdGlvbiBzZXRVc2VyQ2F0ZWdvcnkoYWRkcmVzcyB1c2VyLCB1aW50IGNhdGVnb3J5KSBwdWJsaWMgb25seU9wZXJhdG9yIHsKICAgICAgICB1c2VyQ2F0ZWdvcnlbdXNlcl0gPSBjYXRlZ29yeTsKICAgICAgICBVc2VyQ2F0ZWdvcnlTZXQodXNlciwgY2F0ZWdvcnkpOwogICAgfQoKICAgIGV2ZW50IENhdGVnb3J5Q2FwU2V0ICh1aW50IGNhdGVnb3J5LCB1aW50IHNnZENhcCk7CgogICAgZnVuY3Rpb24gc2V0Q2F0ZWdvcnlDYXAodWludCBjYXRlZ29yeSwgdWludCBzZ2RDYXApIHB1YmxpYyBvbmx5T3BlcmF0b3IgewogICAgICAgIGNhdGVnb3J5Q2FwW2NhdGVnb3J5XSA9IHNnZENhcDsKICAgICAgICBDYXRlZ29yeUNhcFNldChjYXRlZ29yeSwgc2dkQ2FwKTsKICAgIH0KCiAgICBldmVudCBTZ2RUb1dlaVJhdGVTZXQgKHVpbnQgcmF0ZSk7CgogICAgZnVuY3Rpb24gc2V0U2dkVG9FdGhSYXRlKHVpbnQgX3NnZFRvV2VpUmF0ZSkgcHVibGljIG9ubHlPcGVyYXRvciB7CiAgICAgICAgd2VpUGVyU2dkID0gX3NnZFRvV2VpUmF0ZTsKICAgICAgICBTZ2RUb1dlaVJhdGVTZXQoX3NnZFRvV2VpUmF0ZSk7CiAgICB9Cn0='.
	

]
