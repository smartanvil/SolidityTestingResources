Class {
	#name : #SRT6e5f94d66846e05eb8a5f83c9c9691ee72fd5e9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e5f94d66846e05eb8a5f83c9c9691ee72fd5e9e >> base64 [
	^ ''.
	

]
