Class {
	#name : #SRTde8faf11e8cabcfeea67270cdec67489383f38ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTde8faf11e8cabcfeea67270cdec67489383f38ee >> base64 [
	^ ''.
	

]
