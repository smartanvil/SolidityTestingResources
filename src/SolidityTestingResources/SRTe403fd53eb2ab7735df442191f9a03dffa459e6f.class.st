Class {
	#name : #SRTe403fd53eb2ab7735df442191f9a03dffa459e6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe403fd53eb2ab7735df442191f9a03dffa459e6f >> base64 [
	^ ''.
	

]
