Class {
	#name : #SRTea38eaa3c86c8f9b751533ba2e562deb9acded40,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea38eaa3c86c8f9b751533ba2e562deb9acded40 >> base64 [
	^ ''.
	

]
