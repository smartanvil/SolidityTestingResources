Class {
	#name : #SRTc7c5d612536d167627b217d08b9ff05da1db75f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc7c5d612536d167627b217d08b9ff05da1db75f7 >> base64 [
	^ 'Y29udHJhY3QgQ2hyb25vQmFua0Fzc2V0SW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UsIGFkZHJlc3MgX3NlbmRlcikgcmV0dXJucyhib29sKTsKICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIHJldHVybnMoYm9vbCk7CiAgICBmdW5jdGlvbiBfX2FwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUsIGFkZHJlc3MgX3NlbmRlcikgcmV0dXJucyhib29sKTsKICAgIGZ1bmN0aW9uIF9fcHJvY2VzcyhieXRlcyBfZGF0YSwgYWRkcmVzcyBfc2VuZGVyKSBwYXlhYmxlIHsKICAgICAgICB0aHJvdzsKICAgIH0KfQoKY29udHJhY3QgQ2hyb25vQmFua0Fzc2V0UHJveHkgewogICAgZnVuY3Rpb24gX190cmFuc2ZlcldpdGhSZWZlcmVuY2UoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSwgYWRkcmVzcyBfc2VuZGVyKSByZXR1cm5zKGJvb2wpOwogICAgZnVuY3Rpb24gX190cmFuc2ZlckZyb21XaXRoUmVmZXJlbmNlKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UsIGFkZHJlc3MgX3NlbmRlcikgcmV0dXJucyhib29sKTsKICAgIGZ1bmN0aW9uIF9fYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBfc2VuZGVyKSByZXR1cm5zKGJvb2wpOyAgICAKfQoKY29udHJhY3QgQ2hyb25vQmFua0Fzc2V0IGlzIENocm9ub0JhbmtBc3NldEludGVyZmFjZSB7CiAgICAvLyBBc3NpZ25lZCBhc3NldCBwcm94eSBjb250cmFjdCwgaW1tdXRhYmxlLgogICAgQ2hyb25vQmFua0Fzc2V0UHJveHkgcHVibGljIHByb3h5OwoKICAgIC8qKgogICAgICogT25seSBhc3NpZ25lZCBwcm94eSBpcyBhbGxvd2VkIHRvIGNhbGwuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQcm94eSgpIHsKICAgICAgICBpZiAocHJveHkgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICBfOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNldHMgYXNzZXQgcHJveHkgYWRkcmVzcy4KICAgICAqCiAgICAgKiBDYW4gYmUgc2V0IG9ubHkgb25jZS4KICAgICAqCiAgICAgKiBAcGFyYW0gX3Byb3h5IGFzc2V0IHByb3h5IGNvbnRyYWN0IGFkZHJlc3MuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyBmaW5hbCwgYW5kIG11c3Qgbm90IGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGluaXQoQ2hyb25vQmFua0Fzc2V0UHJveHkgX3Byb3h5KSByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZiAoYWRkcmVzcyhwcm94eSkgIT0gMHgwKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcHJveHkgPSBfcHJveHk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBQYXNzZXMgZXhlY3V0aW9uIGludG8gdmlydHVhbCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBDYW4gb25seSBiZSBjYWxsZWQgYnkgYXNzaWduZWQgYXNzZXQgcHJveHkuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyBmaW5hbCwgYW5kIG11c3Qgbm90IGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UsIGFkZHJlc3MgX3NlbmRlcikgb25seVByb3h5KCkgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIF90cmFuc2ZlcldpdGhSZWZlcmVuY2UoX3RvLCBfdmFsdWUsIF9yZWZlcmVuY2UsIF9zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsbHMgYmFjayB3aXRob3V0IG1vZGlmaWNhdGlvbnMuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyB2aXJ0dWFsLCBhbmQgbWVhbnQgdG8gYmUgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIGludGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBwcm94eS5fX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShfdG8sIF92YWx1ZSwgX3JlZmVyZW5jZSwgX3NlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBQYXNzZXMgZXhlY3V0aW9uIGludG8gdmlydHVhbCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBDYW4gb25seSBiZSBjYWxsZWQgYnkgYXNzaWduZWQgYXNzZXQgcHJveHkuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyBmaW5hbCwgYW5kIG11c3Qgbm90IGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlLCBhZGRyZXNzIF9zZW5kZXIpIG9ubHlQcm94eSgpIHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBfdHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShfZnJvbSwgX3RvLCBfdmFsdWUsIF9yZWZlcmVuY2UsIF9zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsbHMgYmFjayB3aXRob3V0IG1vZGlmaWNhdGlvbnMuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyB2aXJ0dWFsLCBhbmQgbWVhbnQgdG8gYmUgb3ZlcnJpZGRlbi4KICAgICAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyRnJvbVdpdGhSZWZlcmVuY2UoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSwgYWRkcmVzcyBfc2VuZGVyKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gcHJveHkuX190cmFuc2ZlckZyb21XaXRoUmVmZXJlbmNlKF9mcm9tLCBfdG8sIF92YWx1ZSwgX3JlZmVyZW5jZSwgX3NlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBQYXNzZXMgZXhlY3V0aW9uIGludG8gdmlydHVhbCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBDYW4gb25seSBiZSBjYWxsZWQgYnkgYXNzaWduZWQgYXNzZXQgcHJveHkuCiAgICAgKgogICAgICogQHJldHVybiBzdWNjZXNzLgogICAgICogQGRldiBmdW5jdGlvbiBpcyBmaW5hbCwgYW5kIG11c3Qgbm90IGJlIG92ZXJyaWRkZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIF9fYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBfc2VuZGVyKSBvbmx5UHJveHkoKSByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gX2FwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSwgX3NlbmRlcik7CiAgICB9CgogICAgLyoqCiAgICAgKiBDYWxscyBiYWNrIHdpdGhvdXQgbW9kaWZpY2F0aW9ucy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHN1Y2Nlc3MuCiAgICAgKiBAZGV2IGZ1bmN0aW9uIGlzIHZpcnR1YWwsIGFuZCBtZWFudCB0byBiZSBvdmVycmlkZGVuLgogICAgICovCiAgICBmdW5jdGlvbiBfYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBfc2VuZGVyKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gcHJveHkuX19hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUsIF9zZW5kZXIpOwogICAgfQp9'.
	

]
