Class {
	#name : #SRT700620683311f2d150974b4f262bacfcf7ff5d8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT700620683311f2d150974b4f262bacfcf7ff5d8d >> base64 [
	^ ''.
	

]
