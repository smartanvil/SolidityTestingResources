Class {
	#name : #SRT24d91950de5d72740adfdf1f21828d11df146124,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT24d91950de5d72740adfdf1f21828d11df146124 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IAogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljOyAKfQoKY29udHJhY3QgVG9rZW5FUkMyMCB7CiAgICAvLyBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIC8vIDE4IGRlY2ltYWxzIGlzIHRoZSBzdHJvbmdseSBzdWdnZXN0ZWQgZGVmYXVsdCwgYXZvaWQgY2hhbmdpbmcgaXQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8vIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgoKICAgIC8qKgogICAgICogQ29uc3RyY3RvciBmdW5jdGlvbgogICAgICoKICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBUb2tlbkVSQzIwKAogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwKICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbAogICAgKSBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseSAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOyAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseSB3aXRoIHRoZSBkZWNpbWFsIGFtb3VudAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSB0b2tlblN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KCiAgICAvKioKICAgICAqIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKICAgICAgICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VPZltfdG9dKTsKICAgICAgICAvLyBTYXZlIHRoaXMgZm9yIGFuIGFzc2VydGlvbiBpbiB0aGUgZnV0dXJlCiAgICAgICAgdWludCBwcmV2aW91c0JhbGFuY2VzID0gYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgLy8gQXNzZXJ0cyBhcmUgdXNlZCB0byB1c2Ugc3RhdGljIGFuYWx5c2lzIHRvIGZpbmQgYnVncyBpbiB5b3VyIGNvZGUuIFRoZXkgc2hvdWxkIG5ldmVyIGZhaWwKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGluIGJlaGFsZiBvZiBgX2Zyb21gCiAgICAgKgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzCiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZgogICAgICoKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzIGFuZCBub3RpZnkKICAgICAqCiAgICAgKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmLCBhbmQgdGhlbiBwaW5nIHRoZSBjb250cmFjdCBhYm91dCBpdAogICAgICoKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICAgKiBAcGFyYW0gX2V4dHJhRGF0YSBzb21lIGV4dHJhIGluZm9ybWF0aW9uIHRvIHNlbmQgdG8gdGhlIGFwcHJvdmVkIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQp9CgoKY29udHJhY3QgRWNsaXBzZSBpcyBvd25lZCwgVG9rZW5FUkMyMCB7CgogICAgdWludDI1NiBwdWJsaWMgIHVuaXRzT25lRXRoQ2FuQnV5OwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gRWNsaXBzZSgpIAogICAgVG9rZW5FUkMyMCgxMDAwMDAwMDAwLCAnRWNsaXBzZScsICdFQ1AnKSBwdWJsaWMgewogICAgICAgICB1bml0c09uZUV0aENhbkJ1eSA9IDE4OTM7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXJXaXRoVG9rZW5zKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltvd25lcl0gKyBiYWxhbmNlT2ZbbmV3T3duZXJdOwogICAgICAgIGJhbGFuY2VPZltuZXdPd25lcl0gKz0gYmFsYW5jZU9mW293bmVyXTsKICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gMDsKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW293bmVyXSArIGJhbGFuY2VPZltuZXdPd25lcl0gPT0gcHJldmlvdXNCYWxhbmNlcyk7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VQcmljZSh1aW50MjU2IF9uZXdBbW91bnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHVuaXRzT25lRXRoQ2FuQnV5ID0gX25ld0Ftb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZSAqIHVuaXRzT25lRXRoQ2FuQnV5OwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW293bmVyXSA+PSBhbW91bnQpOwogICAgICAgIF90cmFuc2Zlcihvd25lciwgbXNnLnNlbmRlciwgYW1vdW50KTsKICAgICAgICAvL1RyYW5zZmVyIGV0aGVyIHRvIGZ1bmRzV2FsbGV0CiAgICAgICAgb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KfQ=='.
	

]
