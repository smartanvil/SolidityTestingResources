Class {
	#name : #SRTe8ce207631f9ac80688587cae05a159bd5356e78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8ce207631f9ac80688587cae05a159bd5356e78 >> base64 [
	^ 'LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogVGhpcyBjb250cmFjdCBoYXMgYmVlbiBtZXJnZWQgd2l0aCBzb2xpZGlmeQogKiBodHRwczovL2dpdGh1Yi5jb20vdGllc25ldHdvcmsvc29saWRpZnkKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHByYWdtYSBzb2xpZGl0eSBeMC40LjE1OwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL1NUUVByZUlDT0Jhc2Uuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL2Nyb3dkc2FsZS9TaW1wbGVDcm93ZHNhbGVCYXNlLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi4vc2VjdXJpdHkvQXJndW1lbnRzQ2hlY2tlci5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLy8vIEB0aXRsZSB1dGlsaXR5IG1ldGhvZHMgYW5kIG1vZGlmaWVycyBvZiBhcmd1bWVudHMgdmFsaWRhdGlvbgpjb250cmFjdCBBcmd1bWVudHNDaGVja2VyIHsKCiAgICAvLy8gQGRldiBjaGVjayB3aGljaCBwcmV2ZW50cyBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgcGF5bG9hZFNpemVJcyh1aW50IHNpemUpIHsKICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0IC8qIGZ1bmN0aW9uIHNlbGVjdG9yICovKTsKICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgY2hlY2sgdGhhdCBhZGRyZXNzIGlzIHZhbGlkCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBhZGRyKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuLi9zZWN1cml0eS9Bcmd1bWVudHNDaGVja2VyLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi4vdG9rZW4vTWludGFibGVNdWx0aW93bmVkVG9rZW4uc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuLi9vd25lcnNoaXAvTXVsdGlvd25lZENvbnRyb2xsZWQuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL211bHRpb3duZWQuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLy8vIENvZGUgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZGFwcC1iaW4vYmxvYi9tYXN0ZXIvd2FsbGV0L3dhbGxldC5zb2wKLy8gQXVkaXQsIHJlZmFjdG9yaW5nIGFuZCBpbXByb3ZlbWVudHMgYnkgZ2l0aHViLmNvbS9FZW5hZQoKLy8gQGF1dGhvcnM6Ci8vIEdhdiBXb29kIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMjU0MjY1NDA1MTRkNDE0MDUzMGI0NjRhNDgiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgovLyBpbmhlcml0YWJsZSAicHJvcGVydHkiIGNvbnRyYWN0IHRoYXQgZW5hYmxlcyBtZXRob2RzIHRvIGJlIHByb3RlY3RlZCBieSByZXF1aXJpbmcgdGhlIGFjcXVpZXNjZW5jZSBvZiBlaXRoZXIgYQovLyBzaW5nbGUsIG9yLCBjcnVjaWFsbHksIGVhY2ggb2YgYSBudW1iZXIgb2YsIGRlc2lnbmF0ZWQgb3duZXJzLgovLyB1c2FnZToKLy8gdXNlIG1vZGlmaWVycyBvbmx5b3duZXIgKGp1c3Qgb3duIG93bmVkKSBvciBvbmx5bWFueW93bmVycyhoYXNoKSwgd2hlcmVieSB0aGUgc2FtZSBoYXNoIG11c3QgYmUgcHJvdmlkZWQgYnkKLy8gc29tZSBudW1iZXIgKHNwZWNpZmllZCBpbiBjb25zdHJ1Y3Rvcikgb2YgdGhlIHNldCBvZiBvd25lcnMgKHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3IsIG1vZGlmaWFibGUpIGJlZm9yZSB0aGUKLy8gaW50ZXJpb3IgaXMgZXhlY3V0ZWQuCgoKCgovLy8gbm90ZTogZHVyaW5nIGFueSBvd25lcnNoaXAgY2hhbmdlcyBhbGwgcGVuZGluZyBvcGVyYXRpb25zICh3YWl0aW5nIGZvciBtb3JlIHNpZ25hdHVyZXMpIGFyZSBjYW5jZWxsZWQKLy8gVE9ETyBhY2NlcHRPd25lcnNoaXAKY29udHJhY3QgbXVsdGlvd25lZCB7CgoJLy8gVFlQRVMKCiAgICAvLyBzdHJ1Y3QgZm9yIHRoZSBzdGF0dXMgb2YgYSBwZW5kaW5nIG9wZXJhdGlvbi4KICAgIHN0cnVjdCBNdWx0aU93bmVkT3BlcmF0aW9uUGVuZGluZ1N0YXRlIHsKICAgICAgICAvLyBjb3VudCBvZiBjb25maXJtYXRpb25zIG5lZWRlZAogICAgICAgIHVpbnQgeWV0TmVlZGVkOwoKICAgICAgICAvLyBiaXRtYXAgb2YgY29uZmlybWF0aW9ucyB3aGVyZSBvd25lciAjb3duZXJJbmRleCdzIGRlY2lzaW9uIGNvcnJlc3BvbmRzIHRvIDIqKm93bmVySW5kZXggYml0CiAgICAgICAgdWludCBvd25lcnNEb25lOwoKICAgICAgICAvLyBwb3NpdGlvbiBvZiB0aGlzIG9wZXJhdGlvbiBrZXkgaW4gbV9tdWx0aU93bmVkUGVuZGluZ0luZGV4CiAgICAgICAgdWludCBpbmRleDsKICAgIH0KCgkvLyBFVkVOVFMKCiAgICBldmVudCBDb25maXJtYXRpb24oYWRkcmVzcyBvd25lciwgYnl0ZXMzMiBvcGVyYXRpb24pOwogICAgZXZlbnQgUmV2b2tlKGFkZHJlc3Mgb3duZXIsIGJ5dGVzMzIgb3BlcmF0aW9uKTsKICAgIGV2ZW50IEZpbmFsQ29uZmlybWF0aW9uKGFkZHJlc3Mgb3duZXIsIGJ5dGVzMzIgb3BlcmF0aW9uKTsKCiAgICAvLyBzb21lIG90aGVycyBhcmUgaW4gdGhlIGNhc2Ugb2YgYW4gb3duZXIgY2hhbmdpbmcuCiAgICBldmVudCBPd25lckNoYW5nZWQoYWRkcmVzcyBvbGRPd25lciwgYWRkcmVzcyBuZXdPd25lcik7CiAgICBldmVudCBPd25lckFkZGVkKGFkZHJlc3MgbmV3T3duZXIpOwogICAgZXZlbnQgT3duZXJSZW1vdmVkKGFkZHJlc3Mgb2xkT3duZXIpOwoKICAgIC8vIHRoZSBsYXN0IG9uZSBpcyBlbWl0dGVkIGlmIHRoZSByZXF1aXJlZCBzaWduYXR1cmVzIGNoYW5nZQogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2VkKHVpbnQgbmV3UmVxdWlyZW1lbnQpOwoKCS8vIE1PRElGSUVSUwoKICAgIC8vIHNpbXBsZSBzaW5nbGUtc2lnIGZ1bmN0aW9uIG1vZGlmaWVyLgogICAgbW9kaWZpZXIgb25seW93bmVyIHsKICAgICAgICByZXF1aXJlKGlzT3duZXIobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CiAgICAvLyBtdWx0aS1zaWcgZnVuY3Rpb24gbW9kaWZpZXI6IHRoZSBvcGVyYXRpb24gbXVzdCBoYXZlIGFuIGludHJpbnNpYyBoYXNoIGluIG9yZGVyCiAgICAvLyB0aGF0IGxhdGVyIGF0dGVtcHRzIGNhbiBiZSByZWFsaXNlZCBhcyB0aGUgc2FtZSB1bmRlcmx5aW5nIG9wZXJhdGlvbiBhbmQKICAgIC8vIHRodXMgY291bnQgYXMgY29uZmlybWF0aW9ucy4KICAgIG1vZGlmaWVyIG9ubHltYW55b3duZXJzKGJ5dGVzMzIgX29wZXJhdGlvbikgewogICAgICAgIGlmIChjb25maXJtQW5kQ2hlY2soX29wZXJhdGlvbikpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9CiAgICAgICAgLy8gRXZlbiBpZiByZXF1aXJlZCBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBoYXMndCBiZWVuIGNvbGxlY3RlZCB5ZXQsCiAgICAgICAgLy8gd2UgY2FuJ3QgdGhyb3cgaGVyZSAtIGJlY2F1c2UgY2hhbmdlcyB0byB0aGUgc3RhdGUgaGF2ZSB0byBiZSBwcmVzZXJ2ZWQuCiAgICAgICAgLy8gQnV0LCBjb25maXJtQW5kQ2hlY2sgaXRzZWxmIHdpbGwgdGhyb3cgaW4gY2FzZSBzZW5kZXIgaXMgbm90IGFuIG93bmVyLgogICAgfQoKICAgIG1vZGlmaWVyIHZhbGlkTnVtT3duZXJzKHVpbnQgX251bU93bmVycykgewogICAgICAgIHJlcXVpcmUoX251bU93bmVycyA+IDAgJiYgX251bU93bmVycyA8PSBjX21heE93bmVycyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBtdWx0aU93bmVkVmFsaWRSZXF1aXJlbWVudCh1aW50IF9yZXF1aXJlZCwgdWludCBfbnVtT3duZXJzKSB7CiAgICAgICAgcmVxdWlyZShfcmVxdWlyZWQgPiAwICYmIF9yZXF1aXJlZCA8PSBfbnVtT3duZXJzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyRXhpc3RzKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKGlzT3duZXIoX2FkZHJlc3MpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyRG9lc05vdEV4aXN0KGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKCFpc093bmVyKF9hZGRyZXNzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBtdWx0aU93bmVkT3BlcmF0aW9uSXNBY3RpdmUoYnl0ZXMzMiBfb3BlcmF0aW9uKSB7CiAgICAgICAgcmVxdWlyZShpc09wZXJhdGlvbkFjdGl2ZShfb3BlcmF0aW9uKSk7CiAgICAgICAgXzsKICAgIH0KCgkvLyBNRVRIT0RTCgogICAgLy8gY29uc3RydWN0b3IgaXMgZ2l2ZW4gbnVtYmVyIG9mIHNpZ3MgcmVxdWlyZWQgdG8gZG8gcHJvdGVjdGVkICJvbmx5bWFueW93bmVycyIgdHJhbnNhY3Rpb25zCiAgICAvLyBhcyB3ZWxsIGFzIHRoZSBzZWxlY3Rpb24gb2YgYWRkcmVzc2VzIGNhcGFibGUgb2YgY29uZmlybWluZyB0aGVtIChtc2cuc2VuZGVyIGlzIG5vdCBhZGRlZCB0byB0aGUgb3duZXJzISkuCiAgICBmdW5jdGlvbiBtdWx0aW93bmVkKGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9yZXF1aXJlZCkKICAgICAgICB2YWxpZE51bU93bmVycyhfb3duZXJzLmxlbmd0aCkKICAgICAgICBtdWx0aU93bmVkVmFsaWRSZXF1aXJlbWVudChfcmVxdWlyZWQsIF9vd25lcnMubGVuZ3RoKQogICAgewogICAgICAgIGFzc2VydChjX21heE93bmVycyA8PSAyNTUpOwoKICAgICAgICBtX251bU93bmVycyA9IF9vd25lcnMubGVuZ3RoOwogICAgICAgIG1fbXVsdGlPd25lZFJlcXVpcmVkID0gX3JlcXVpcmVkOwoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfb3duZXJzLmxlbmd0aDsgKytpKQogICAgICAgIHsKICAgICAgICAgICAgYWRkcmVzcyBvd25lciA9IF9vd25lcnNbaV07CiAgICAgICAgICAgIC8vIGludmFsaWQgYW5kIGR1cGxpY2F0ZSBhZGRyZXNzZXMgYXJlIG5vdCBhbGxvd2VkCiAgICAgICAgICAgIHJlcXVpcmUoMCAhPSBvd25lciAmJiAhaXNPd25lcihvd25lcikgLyogbm90IGlzT3duZXIgeWV0ISAqLyk7CgogICAgICAgICAgICB1aW50IGN1cnJlbnRPd25lckluZGV4ID0gY2hlY2tPd25lckluZGV4KGkgKyAxIC8qIGZpcnN0IHNsb3QgaXMgdW51c2VkICovKTsKICAgICAgICAgICAgbV9vd25lcnNbY3VycmVudE93bmVySW5kZXhdID0gb3duZXI7CiAgICAgICAgICAgIG1fb3duZXJJbmRleFtvd25lcl0gPSBjdXJyZW50T3duZXJJbmRleDsKICAgICAgICB9CgogICAgICAgIGFzc2VydE93bmVyc0FyZUNvbnNpc3RlbnQoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSByZXBsYWNlcyBhbiBvd25lciBgX2Zyb21gIHdpdGggYW5vdGhlciBgX3RvYC4KICAgIC8vLyBAcGFyYW0gX2Zyb20gYWRkcmVzcyBvZiBvd25lciB0byByZXBsYWNlCiAgICAvLy8gQHBhcmFtIF90byBhZGRyZXNzIG9mIG5ldyBvd25lcgogICAgLy8gQWxsIHBlbmRpbmcgb3BlcmF0aW9ucyB3aWxsIGJlIGNhbmNlbGVkIQogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvd25lckV4aXN0cyhfZnJvbSkKICAgICAgICBvd25lckRvZXNOb3RFeGlzdChfdG8pCiAgICAgICAgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpCiAgICB7CiAgICAgICAgYXNzZXJ0T3duZXJzQXJlQ29uc2lzdGVudCgpOwoKICAgICAgICBjbGVhclBlbmRpbmcoKTsKICAgICAgICB1aW50IG93bmVySW5kZXggPSBjaGVja093bmVySW5kZXgobV9vd25lckluZGV4W19mcm9tXSk7CiAgICAgICAgbV9vd25lcnNbb3duZXJJbmRleF0gPSBfdG87CiAgICAgICAgbV9vd25lckluZGV4W19mcm9tXSA9IDA7CiAgICAgICAgbV9vd25lckluZGV4W190b10gPSBvd25lckluZGV4OwoKICAgICAgICBhc3NlcnRPd25lcnNBcmVDb25zaXN0ZW50KCk7CiAgICAgICAgT3duZXJDaGFuZ2VkKF9mcm9tLCBfdG8pOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGFkZHMgYW4gb3duZXIKICAgIC8vLyBAcGFyYW0gX293bmVyIGFkZHJlc3Mgb2YgbmV3IG93bmVyCiAgICAvLyBBbGwgcGVuZGluZyBvcGVyYXRpb25zIHdpbGwgYmUgY2FuY2VsZWQhCiAgICBmdW5jdGlvbiBhZGRPd25lcihhZGRyZXNzIF9vd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIG93bmVyRG9lc05vdEV4aXN0KF9vd25lcikKICAgICAgICB2YWxpZE51bU93bmVycyhtX251bU93bmVycyArIDEpCiAgICAgICAgb25seW1hbnlvd25lcnMoc2hhMyhtc2cuZGF0YSkpCiAgICB7CiAgICAgICAgYXNzZXJ0T3duZXJzQXJlQ29uc2lzdGVudCgpOwoKICAgICAgICBjbGVhclBlbmRpbmcoKTsKICAgICAgICBtX251bU93bmVycysrOwogICAgICAgIG1fb3duZXJzW21fbnVtT3duZXJzXSA9IF9vd25lcjsKICAgICAgICBtX293bmVySW5kZXhbX293bmVyXSA9IGNoZWNrT3duZXJJbmRleChtX251bU93bmVycyk7CgogICAgICAgIGFzc2VydE93bmVyc0FyZUNvbnNpc3RlbnQoKTsKICAgICAgICBPd25lckFkZGVkKF9vd25lcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgcmVtb3ZlcyBhbiBvd25lcgogICAgLy8vIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBvZiBvd25lciB0byByZW1vdmUKICAgIC8vIEFsbCBwZW5kaW5nIG9wZXJhdGlvbnMgd2lsbCBiZSBjYW5jZWxlZCEKICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3MgX293bmVyKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb3duZXJFeGlzdHMoX293bmVyKQogICAgICAgIHZhbGlkTnVtT3duZXJzKG1fbnVtT3duZXJzIC0gMSkKICAgICAgICBtdWx0aU93bmVkVmFsaWRSZXF1aXJlbWVudChtX211bHRpT3duZWRSZXF1aXJlZCwgbV9udW1Pd25lcnMgLSAxKQogICAgICAgIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKQogICAgewogICAgICAgIGFzc2VydE93bmVyc0FyZUNvbnNpc3RlbnQoKTsKCiAgICAgICAgY2xlYXJQZW5kaW5nKCk7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gY2hlY2tPd25lckluZGV4KG1fb3duZXJJbmRleFtfb3duZXJdKTsKICAgICAgICBtX293bmVyc1tvd25lckluZGV4XSA9IDA7CiAgICAgICAgbV9vd25lckluZGV4W19vd25lcl0gPSAwOwogICAgICAgIC8vbWFrZSBzdXJlIG1fbnVtT3duZXJzIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2Ygb3duZXJzIGFuZCBhbHdheXMgcG9pbnRzIHRvIHRoZSBsYXN0IG93bmVyCiAgICAgICAgcmVvcmdhbml6ZU93bmVycygpOwoKICAgICAgICBhc3NlcnRPd25lcnNBcmVDb25zaXN0ZW50KCk7CiAgICAgICAgT3duZXJSZW1vdmVkKF9vd25lcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgY2hhbmdlcyB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIG93bmVyIHNpZ25hdHVyZXMKICAgIC8vLyBAcGFyYW0gX25ld1JlcXVpcmVkIG5ldyBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZAogICAgLy8gQWxsIHBlbmRpbmcgb3BlcmF0aW9ucyB3aWxsIGJlIGNhbmNlbGVkIQogICAgZnVuY3Rpb24gY2hhbmdlUmVxdWlyZW1lbnQodWludCBfbmV3UmVxdWlyZWQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBtdWx0aU93bmVkVmFsaWRSZXF1aXJlbWVudChfbmV3UmVxdWlyZWQsIG1fbnVtT3duZXJzKQogICAgICAgIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKQogICAgewogICAgICAgIG1fbXVsdGlPd25lZFJlcXVpcmVkID0gX25ld1JlcXVpcmVkOwogICAgICAgIGNsZWFyUGVuZGluZygpOwogICAgICAgIFJlcXVpcmVtZW50Q2hhbmdlZChfbmV3UmVxdWlyZWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEdldHMgYW4gb3duZXIgYnkgMC1pbmRleGVkIHBvc2l0aW9uCiAgICAvLy8gQHBhcmFtIG93bmVySW5kZXggMC1pbmRleGVkIG93bmVyIHBvc2l0aW9uCiAgICBmdW5jdGlvbiBnZXRPd25lcih1aW50IG93bmVySW5kZXgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIG1fb3duZXJzW293bmVySW5kZXggKyAxXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBHZXRzIG93bmVycwogICAgLy8vIEByZXR1cm4gbWVtb3J5IGFycmF5IG9mIG93bmVycwogICAgZnVuY3Rpb24gZ2V0T3duZXJzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3NbXSkgewogICAgICAgIGFkZHJlc3NbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IGFkZHJlc3NbXShtX251bU93bmVycyk7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbV9udW1Pd25lcnM7IGkrKykKICAgICAgICAgICAgcmVzdWx0W2ldID0gZ2V0T3duZXIoaSk7CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLy8vIEBub3RpY2UgY2hlY2tzIGlmIHByb3ZpZGVkIGFkZHJlc3MgaXMgYW4gb3duZXIgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfYWRkciBhZGRyZXNzIHRvIGNoZWNrCiAgICAvLy8gQHJldHVybiB0cnVlIGlmIGl0J3MgYW4gb3duZXIKICAgIGZ1bmN0aW9uIGlzT3duZXIoYWRkcmVzcyBfYWRkcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gbV9vd25lckluZGV4W19hZGRyXSA+IDA7CiAgICB9CgogICAgLy8vIEBub3RpY2UgVGVzdHMgb3duZXJzaGlwIG9mIHRoZSBjdXJyZW50IGNhbGxlci4KICAgIC8vLyBAcmV0dXJuIHRydWUgaWYgaXQncyBhbiBvd25lcgogICAgLy8gSXQncyBhZHZpc2FibGUgdG8gY2FsbCBpdCBieSBuZXcgb3duZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHNhbWUgZXJyb25lb3VzIGFkZHJlc3MgaXMgbm90IGNvcHktcGFzdGVkIHRvCiAgICAvLyBhZGRPd25lci9jaGFuZ2VPd25lciBhbmQgdG8gaXNPd25lci4KICAgIGZ1bmN0aW9uIGFtSU93bmVyKCkgZXh0ZXJuYWwgY29uc3RhbnQgb25seW93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXZva2VzIGEgcHJpb3IgY29uZmlybWF0aW9uIG9mIHRoZSBnaXZlbiBvcGVyYXRpb24KICAgIC8vLyBAcGFyYW0gX29wZXJhdGlvbiBvcGVyYXRpb24gdmFsdWUsIHR5cGljYWxseSBzaGEzKG1zZy5kYXRhKQogICAgZnVuY3Rpb24gcmV2b2tlKGJ5dGVzMzIgX29wZXJhdGlvbikKICAgICAgICBleHRlcm5hbAogICAgICAgIG11bHRpT3duZWRPcGVyYXRpb25Jc0FjdGl2ZShfb3BlcmF0aW9uKQogICAgICAgIG9ubHlvd25lcgogICAgewogICAgICAgIHVpbnQgb3duZXJJbmRleEJpdCA9IG1ha2VPd25lckJpdG1hcEJpdChtc2cuc2VuZGVyKTsKICAgICAgICB2YXIgcGVuZGluZyA9IG1fbXVsdGlPd25lZFBlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgcmVxdWlyZShwZW5kaW5nLm93bmVyc0RvbmUgJiBvd25lckluZGV4Qml0ID4gMCk7CgogICAgICAgIGFzc2VydE9wZXJhdGlvbklzQ29uc2lzdGVudChfb3BlcmF0aW9uKTsKCiAgICAgICAgcGVuZGluZy55ZXROZWVkZWQrKzsKICAgICAgICBwZW5kaW5nLm93bmVyc0RvbmUgLT0gb3duZXJJbmRleEJpdDsKCiAgICAgICAgYXNzZXJ0T3BlcmF0aW9uSXNDb25zaXN0ZW50KF9vcGVyYXRpb24pOwogICAgICAgIFJldm9rZShtc2cuc2VuZGVyLCBfb3BlcmF0aW9uKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDaGVja3MgaWYgb3duZXIgY29uZmlybWVkIGdpdmVuIG9wZXJhdGlvbgogICAgLy8vIEBwYXJhbSBfb3BlcmF0aW9uIG9wZXJhdGlvbiB2YWx1ZSwgdHlwaWNhbGx5IHNoYTMobXNnLmRhdGEpCiAgICAvLy8gQHBhcmFtIF9vd25lciBhbiBvd25lciBhZGRyZXNzCiAgICBmdW5jdGlvbiBoYXNDb25maXJtZWQoYnl0ZXMzMiBfb3BlcmF0aW9uLCBhZGRyZXNzIF9vd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgbXVsdGlPd25lZE9wZXJhdGlvbklzQWN0aXZlKF9vcGVyYXRpb24pCiAgICAgICAgb3duZXJFeGlzdHMoX293bmVyKQogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuICEobV9tdWx0aU93bmVkUGVuZGluZ1tfb3BlcmF0aW9uXS5vd25lcnNEb25lICYgbWFrZU93bmVyQml0bWFwQml0KF9vd25lcikgPT0gMCk7CiAgICB9CgogICAgLy8gSU5URVJOQUwgTUVUSE9EUwoKICAgIGZ1bmN0aW9uIGNvbmZpcm1BbmRDaGVjayhieXRlczMyIF9vcGVyYXRpb24pCiAgICAgICAgcHJpdmF0ZQogICAgICAgIG9ubHlvd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYgKDUxMiA9PSBtX211bHRpT3duZWRQZW5kaW5nSW5kZXgubGVuZ3RoKQogICAgICAgICAgICAvLyBJbiBjYXNlIG1fbXVsdGlPd25lZFBlbmRpbmdJbmRleCBncm93cyB0b28gbXVjaCB3ZSBoYXZlIHRvIHNocmluayBpdDogb3RoZXJ3aXNlIGF0IHNvbWUgcG9pbnQKICAgICAgICAgICAgLy8gd2Ugd29uJ3QgYmUgYWJsZSB0byBkbyBpdCBiZWNhdXNlIG9mIGJsb2NrIGdhcyBsaW1pdC4KICAgICAgICAgICAgLy8gWWVzLCBwZW5kaW5nIGNvbmZpcm1hdGlvbnMgd2lsbCBiZSBsb3N0LiBEb250IHNlZSBhbnkgc2VjdXJpdHkgb3Igc3RhYmlsaXR5IGltcGxpY2F0aW9ucy4KICAgICAgICAgICAgLy8gVE9ETyB1c2UgbW9yZSBncmFjZWZ1bCBhcHByb2FjaCBsaWtlIGNvbXBhY3Qgb3IgcmVtb3ZhbCBvZiBjbGVhclBlbmRpbmcgY29tcGxldGVseQogICAgICAgICAgICBjbGVhclBlbmRpbmcoKTsKCiAgICAgICAgdmFyIHBlbmRpbmcgPSBtX211bHRpT3duZWRQZW5kaW5nW19vcGVyYXRpb25dOwoKICAgICAgICAvLyBpZiB3ZSdyZSBub3QgeWV0IHdvcmtpbmcgb24gdGhpcyBvcGVyYXRpb24sIHN3aXRjaCBvdmVyIGFuZCByZXNldCB0aGUgY29uZmlybWF0aW9uIHN0YXR1cy4KICAgICAgICBpZiAoISBpc09wZXJhdGlvbkFjdGl2ZShfb3BlcmF0aW9uKSkgewogICAgICAgICAgICAvLyByZXNldCBjb3VudCBvZiBjb25maXJtYXRpb25zIG5lZWRlZC4KICAgICAgICAgICAgcGVuZGluZy55ZXROZWVkZWQgPSBtX211bHRpT3duZWRSZXF1aXJlZDsKICAgICAgICAgICAgLy8gcmVzZXQgd2hpY2ggb3duZXJzIGhhdmUgY29uZmlybWVkIChub25lKSAtIHNldCBvdXIgYml0bWFwIHRvIDAuCiAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSA9IDA7CiAgICAgICAgICAgIHBlbmRpbmcuaW5kZXggPSBtX211bHRpT3duZWRQZW5kaW5nSW5kZXgubGVuZ3RoKys7CiAgICAgICAgICAgIG1fbXVsdGlPd25lZFBlbmRpbmdJbmRleFtwZW5kaW5nLmluZGV4XSA9IF9vcGVyYXRpb247CiAgICAgICAgICAgIGFzc2VydE9wZXJhdGlvbklzQ29uc2lzdGVudChfb3BlcmF0aW9uKTsKICAgICAgICB9CgogICAgICAgIC8vIGRldGVybWluZSB0aGUgYml0IHRvIHNldCBmb3IgdGhpcyBvd25lci4KICAgICAgICB1aW50IG93bmVySW5kZXhCaXQgPSBtYWtlT3duZXJCaXRtYXBCaXQobXNnLnNlbmRlcik7CiAgICAgICAgLy8gbWFrZSBzdXJlIHdlICh0aGUgbWVzc2FnZSBzZW5kZXIpIGhhdmVuJ3QgY29uZmlybWVkIHRoaXMgb3BlcmF0aW9uIHByZXZpb3VzbHkuCiAgICAgICAgaWYgKHBlbmRpbmcub3duZXJzRG9uZSAmIG93bmVySW5kZXhCaXQgPT0gMCkgewogICAgICAgICAgICAvLyBvayAtIGNoZWNrIGlmIGNvdW50IGlzIGVub3VnaCB0byBnbyBhaGVhZC4KICAgICAgICAgICAgYXNzZXJ0KHBlbmRpbmcueWV0TmVlZGVkID4gMCk7CiAgICAgICAgICAgIGlmIChwZW5kaW5nLnlldE5lZWRlZCA9PSAxKSB7CiAgICAgICAgICAgICAgICAvLyBlbm91Z2ggY29uZmlybWF0aW9uczogcmVzZXQgYW5kIHJ1biBpbnRlcmlvci4KICAgICAgICAgICAgICAgIGRlbGV0ZSBtX211bHRpT3duZWRQZW5kaW5nSW5kZXhbbV9tdWx0aU93bmVkUGVuZGluZ1tfb3BlcmF0aW9uXS5pbmRleF07CiAgICAgICAgICAgICAgICBkZWxldGUgbV9tdWx0aU93bmVkUGVuZGluZ1tfb3BlcmF0aW9uXTsKICAgICAgICAgICAgICAgIEZpbmFsQ29uZmlybWF0aW9uKG1zZy5zZW5kZXIsIF9vcGVyYXRpb24pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBub3QgZW5vdWdoOiByZWNvcmQgdGhhdCB0aGlzIG93bmVyIGluIHBhcnRpY3VsYXIgY29uZmlybWVkLgogICAgICAgICAgICAgICAgcGVuZGluZy55ZXROZWVkZWQtLTsKICAgICAgICAgICAgICAgIHBlbmRpbmcub3duZXJzRG9uZSB8PSBvd25lckluZGV4Qml0OwogICAgICAgICAgICAgICAgYXNzZXJ0T3BlcmF0aW9uSXNDb25zaXN0ZW50KF9vcGVyYXRpb24pOwogICAgICAgICAgICAgICAgQ29uZmlybWF0aW9uKG1zZy5zZW5kZXIsIF9vcGVyYXRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vIFJlY2xhaW1zIGZyZWUgc2xvdHMgYmV0d2VlbiB2YWxpZCBvd25lcnMgaW4gbV9vd25lcnMuCiAgICAvLyBUT0RPIGdpdmVuIHRoYXQgaXRzIGNhbGxlZCBhZnRlciBlYWNoIHJlbW92YWwsIGl0IGNvdWxkIGJlIHNpbXBsaWZpZWQuCiAgICBmdW5jdGlvbiByZW9yZ2FuaXplT3duZXJzKCkgcHJpdmF0ZSB7CiAgICAgICAgdWludCBmcmVlID0gMTsKICAgICAgICB3aGlsZSAoZnJlZSA8IG1fbnVtT3duZXJzKQogICAgICAgIHsKICAgICAgICAgICAgLy8gaXRlcmF0aW5nIHRvIHRoZSBmaXJzdCBmcmVlIHNsb3QgZnJvbSB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgIHdoaWxlIChmcmVlIDwgbV9udW1Pd25lcnMgJiYgbV9vd25lcnNbZnJlZV0gIT0gMCkgZnJlZSsrOwoKICAgICAgICAgICAgLy8gaXRlcmF0aW5nIHRvIHRoZSBmaXJzdCBvY2N1cGllZCBzbG90IGZyb20gdGhlIGVuZAogICAgICAgICAgICB3aGlsZSAobV9udW1Pd25lcnMgPiAxICYmIG1fb3duZXJzW21fbnVtT3duZXJzXSA9PSAwKSBtX251bU93bmVycy0tOwoKICAgICAgICAgICAgLy8gc3dhcCwgaWYgcG9zc2libGUsIHNvIGZyZWUgc2xvdCBpcyBsb2NhdGVkIGF0IHRoZSBlbmQgYWZ0ZXIgdGhlIHN3YXAKICAgICAgICAgICAgaWYgKGZyZWUgPCBtX251bU93bmVycyAmJiBtX293bmVyc1ttX251bU93bmVyc10gIT0gMCAmJiBtX293bmVyc1tmcmVlXSA9PSAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBvd25lcnMgYmV0d2VlbiBzd2FwcGVkIHNsb3RzIHNob3VsZCd0IGJlIHJlbnVtYmVyZWQgLSB0aGF0IHNhdmVzIGEgbG90IG9mIGdhcwogICAgICAgICAgICAgICAgbV9vd25lcnNbZnJlZV0gPSBtX293bmVyc1ttX251bU93bmVyc107CiAgICAgICAgICAgICAgICBtX293bmVySW5kZXhbbV9vd25lcnNbZnJlZV1dID0gZnJlZTsKICAgICAgICAgICAgICAgIG1fb3duZXJzW21fbnVtT3duZXJzXSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJQZW5kaW5nKCkgcHJpdmF0ZSBvbmx5b3duZXIgewogICAgICAgIHVpbnQgbGVuZ3RoID0gbV9tdWx0aU93bmVkUGVuZGluZ0luZGV4Lmxlbmd0aDsKICAgICAgICAvLyBUT0RPIGJsb2NrIGdhcyBsaW1pdAogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChtX211bHRpT3duZWRQZW5kaW5nSW5kZXhbaV0gIT0gMCkKICAgICAgICAgICAgICAgIGRlbGV0ZSBtX211bHRpT3duZWRQZW5kaW5nW21fbXVsdGlPd25lZFBlbmRpbmdJbmRleFtpXV07CiAgICAgICAgfQogICAgICAgIGRlbGV0ZSBtX211bHRpT3duZWRQZW5kaW5nSW5kZXg7CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tPd25lckluZGV4KHVpbnQgb3duZXJJbmRleCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYXNzZXJ0KDAgIT0gb3duZXJJbmRleCAmJiBvd25lckluZGV4IDw9IGNfbWF4T3duZXJzKTsKICAgICAgICByZXR1cm4gb3duZXJJbmRleDsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlT3duZXJCaXRtYXBCaXQoYWRkcmVzcyBvd25lcikgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBvd25lckluZGV4ID0gY2hlY2tPd25lckluZGV4KG1fb3duZXJJbmRleFtvd25lcl0pOwogICAgICAgIHJldHVybiAyICoqIG93bmVySW5kZXg7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPcGVyYXRpb25BY3RpdmUoYnl0ZXMzMiBfb3BlcmF0aW9uKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gMCAhPSBtX211bHRpT3duZWRQZW5kaW5nW19vcGVyYXRpb25dLnlldE5lZWRlZDsKICAgIH0KCgogICAgZnVuY3Rpb24gYXNzZXJ0T3duZXJzQXJlQ29uc2lzdGVudCgpIHByaXZhdGUgY29uc3RhbnQgewogICAgICAgIGFzc2VydChtX251bU93bmVycyA+IDApOwogICAgICAgIGFzc2VydChtX251bU93bmVycyA8PSBjX21heE93bmVycyk7CiAgICAgICAgYXNzZXJ0KG1fb3duZXJzWzBdID09IDApOwogICAgICAgIGFzc2VydCgwICE9IG1fbXVsdGlPd25lZFJlcXVpcmVkICYmIG1fbXVsdGlPd25lZFJlcXVpcmVkIDw9IG1fbnVtT3duZXJzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnRPcGVyYXRpb25Jc0NvbnNpc3RlbnQoYnl0ZXMzMiBfb3BlcmF0aW9uKSBwcml2YXRlIGNvbnN0YW50IHsKICAgICAgICB2YXIgcGVuZGluZyA9IG1fbXVsdGlPd25lZFBlbmRpbmdbX29wZXJhdGlvbl07CiAgICAgICAgYXNzZXJ0KDAgIT0gcGVuZGluZy55ZXROZWVkZWQpOwogICAgICAgIGFzc2VydChtX211bHRpT3duZWRQZW5kaW5nSW5kZXhbcGVuZGluZy5pbmRleF0gPT0gX29wZXJhdGlvbik7CiAgICAgICAgYXNzZXJ0KHBlbmRpbmcueWV0TmVlZGVkIDw9IG1fbXVsdGlPd25lZFJlcXVpcmVkKTsKICAgIH0KCgogICAJLy8gRklFTERTCgogICAgdWludCBjb25zdGFudCBjX21heE93bmVycyA9IDI1MDsKCiAgICAvLyB0aGUgbnVtYmVyIG9mIG93bmVycyB0aGF0IG11c3QgY29uZmlybSB0aGUgc2FtZSBvcGVyYXRpb24gYmVmb3JlIGl0IGlzIHJ1bi4KICAgIHVpbnQgcHVibGljIG1fbXVsdGlPd25lZFJlcXVpcmVkOwoKCiAgICAvLyBwb2ludGVyIHVzZWQgdG8gZmluZCBhIGZyZWUgc2xvdCBpbiBtX293bmVycwogICAgdWludCBwdWJsaWMgbV9udW1Pd25lcnM7CgogICAgLy8gbGlzdCBvZiBvd25lcnMgKGFkZHJlc3NlcyksCiAgICAvLyBzbG90IDAgaXMgdW51c2VkIHNvIHRoZXJlIGFyZSBubyBvd25lciB3aGljaCBpbmRleCBpcyAwLgogICAgLy8gVE9ETyBjb3VsZCB3ZSBzYXZlIHNwYWNlIGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5IGZvciB0aGUgY29tbW9uIGNhc2Ugb2YgPDEwIG93bmVycz8gYW5kIHNob3VsZCB3ZT8KICAgIGFkZHJlc3NbMjU2XSBpbnRlcm5hbCBtX293bmVyczsKCiAgICAvLyBpbmRleCBvbiB0aGUgbGlzdCBvZiBvd25lcnMgdG8gYWxsb3cgcmV2ZXJzZSBsb29rdXA6IG93bmVyIGFkZHJlc3MgPT4gaW5kZXggaW4gbV9vd25lcnMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBpbnRlcm5hbCBtX293bmVySW5kZXg7CgoKICAgIC8vIHRoZSBvbmdvaW5nIG9wZXJhdGlvbnMuCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gTXVsdGlPd25lZE9wZXJhdGlvblBlbmRpbmdTdGF0ZSkgaW50ZXJuYWwgbV9tdWx0aU93bmVkUGVuZGluZzsKICAgIGJ5dGVzMzJbXSBpbnRlcm5hbCBtX211bHRpT3duZWRQZW5kaW5nSW5kZXg7Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL211bHRpb3duZWQuc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovKioKICogQHRpdGxlIENvbnRyYWN0IHdoaWNoIGlzIG93bmVkIGJ5IG93bmVycyBhbmQgb3BlcmF0ZWQgYnkgY29udHJvbGxlci4KICoKICogQG5vdGljZSBQcm92aWRlcyBhIHdheSB0byBzZXQgdXAgYW4gZW50aXR5ICh0eXBpY2FsbHkgb3RoZXIgY29udHJhY3QpIGVudGl0bGVkIHRvIGNvbnRyb2wgYWN0aW9ucyBvZiB0aGlzIGNvbnRyYWN0LgogKiBDb250cm9sbGVyIGlzIHNldCB1cCBieSBvd25lcnMgb3IgZHVyaW5nIGNvbnN0cnVjdGlvbi4KICoKICogQGRldiBjb250cm9sbGVyIGNoZWNrIGlzIHBlcmZvcm1lZCBieSBvbmx5Q29udHJvbGxlciBtb2RpZmllci4KICovCmNvbnRyYWN0IE11bHRpb3duZWRDb250cm9sbGVkIGlzIG11bHRpb3duZWQgewoKICAgIGV2ZW50IENvbnRyb2xsZXJTZXQoYWRkcmVzcyBjb250cm9sbGVyKTsKICAgIGV2ZW50IENvbnRyb2xsZXJSZXRpcmVkKGFkZHJlc3Mgd2FzKTsKCgogICAgbW9kaWZpZXIgb25seUNvbnRyb2xsZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtX2NvbnRyb2xsZXIpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vIFBVQkxJQyBpbnRlcmZhY2UKCiAgICBmdW5jdGlvbiBNdWx0aW93bmVkQ29udHJvbGxlZChhZGRyZXNzW10gX293bmVycywgdWludCBfc2lnbmF0dXJlc1JlcXVpcmVkLCBhZGRyZXNzIF9jb250cm9sbGVyKQogICAgICAgIG11bHRpb3duZWQoX293bmVycywgX3NpZ25hdHVyZXNSZXF1aXJlZCkKICAgIHsKICAgICAgICBtX2NvbnRyb2xsZXIgPSBfY29udHJvbGxlcjsKICAgICAgICBDb250cm9sbGVyU2V0KG1fY29udHJvbGxlcik7CiAgICB9CgogICAgLy8vIEBkZXYgc2V0cyB0aGUgY29udHJvbGxlcgogICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlcihhZGRyZXNzIF9jb250cm9sbGVyKSBleHRlcm5hbCBvbmx5bWFueW93bmVycyhzaGEzKG1zZy5kYXRhKSkgewogICAgICAgIG1fY29udHJvbGxlciA9IF9jb250cm9sbGVyOwogICAgICAgIENvbnRyb2xsZXJTZXQobV9jb250cm9sbGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBhYmlsaXR5IGZvciBjb250cm9sbGVyIHRvIHN0ZXAgZG93bgogICAgZnVuY3Rpb24gZGV0YWNoQ29udHJvbGxlcigpIGV4dGVybmFsIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBhZGRyZXNzIHdhcyA9IG1fY29udHJvbGxlcjsKICAgICAgICBtX2NvbnRyb2xsZXIgPSBhZGRyZXNzKDApOwogICAgICAgIENvbnRyb2xsZXJSZXRpcmVkKHdhcyk7CiAgICB9CgoKICAgIC8vIEZJRUxEUwoKICAgIC8vLyBAbm90aWNlIGFkZHJlc3Mgb2YgZW50aXR5IGVudGl0bGVkIHRvIG1pbnQgbmV3IHRva2VucwogICAgYWRkcmVzcyBwdWJsaWMgbV9jb250cm9sbGVyOwp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi4vb3duZXJzaGlwL011bHRpb3duZWRDb250cm9sbGVkLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL1N0YW5kYXJkVG9rZW4uc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9CYXNpY1Rva2VuLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vRVJDMjBCYXNpYy5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9FUkMyMEJhc2ljLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi4vbWF0aC9TYWZlTWF0aC5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuLi9tYXRoL1NhZmVNYXRoLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLiAKICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vQmFzaWNUb2tlbi5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vRVJDMjAuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCgoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9FUkMyMC5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL1N0YW5kYXJkVG9rZW4uc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovLy8gQHRpdGxlIFN0YW5kYXJkVG9rZW4gd2hpY2ggY2FuIGJlIG1pbnRlZCBieSBhbm90aGVyIGNvbnRyYWN0Lgpjb250cmFjdCBNaW50YWJsZU11bHRpb3duZWRUb2tlbiBpcyBNdWx0aW93bmVkQ29udHJvbGxlZCwgU3RhbmRhcmRUb2tlbiB7CgogICAgLy8vIEBkZXYgcGFyYW1ldGVycyBvZiBhbiBleHRyYSB0b2tlbiBlbWlzc2lvbgogICAgc3RydWN0IEVtaXNzaW9uSW5mbyB7CiAgICAgICAgLy8gdG9rZW5zIGNyZWF0ZWQKICAgICAgICB1aW50MjU2IGNyZWF0ZWQ7CgogICAgICAgIC8vIHRvdGFsU3VwcGx5IGF0IHRoZSBtb21lbnQgb2YgZW1pc3Npb24gKGV4Y2x1ZGluZyBjcmVhdGVkIHRva2VucykKICAgICAgICB1aW50MjU2IHRvdGFsU3VwcGx5V2FzOwogICAgfQoKICAgIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBFbWlzc2lvbih1aW50MjU2IHRva2Vuc0NyZWF0ZWQsIHVpbnQyNTYgdG90YWxTdXBwbHlXYXMsIHVpbnQyNTYgdGltZSk7CiAgICBldmVudCBEaXZpZGVuZChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKCgogICAgLy8gUFVCTElDIGludGVyZmFjZQoKICAgIGZ1bmN0aW9uIE1pbnRhYmxlTXVsdGlvd25lZFRva2VuKGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9zaWduYXR1cmVzUmVxdWlyZWQsIGFkZHJlc3MgX21pbnRlcikKICAgICAgICBNdWx0aW93bmVkQ29udHJvbGxlZChfb3duZXJzLCBfc2lnbmF0dXJlc1JlcXVpcmVkLCBfbWludGVyKQogICAgewogICAgICAgIGRpdmlkZW5kc1Bvb2wgPSB0aGlzOyAgIC8vIG9yIGFueSBvdGhlciBzcGVjaWFsIHVuZm9yZ2VhYmxlIHZhbHVlLCBhY3R1YWxseQoKICAgICAgICAvLyBlbWlzc2lvbiAjMCBpcyBhIGR1bW15OiBiZWNhdXNlIG9mIGRlZmF1bHQgdmFsdWUgMCBpbiBtX2xhc3RBY2NvdW50RW1pc3Npb24KICAgICAgICBtX2VtaXNzaW9ucy5wdXNoKEVtaXNzaW9uSW5mbyh7Y3JlYXRlZDogMCwgdG90YWxTdXBwbHlXYXM6IDB9KSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmVxdWVzdCBkaXZpZGVuZHMgZm9yIGN1cnJlbnQgYWNjb3VudC4KICAgIGZ1bmN0aW9uIHJlcXVlc3REaXZpZGVuZHMoKSBleHRlcm5hbCB7CiAgICAgICAgcGF5RGl2aWRlbmRzVG8obXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgaG9vayBvbiBzdGFuZGFyZCBFUkMyMCN0cmFuc2ZlciB0byBwYXkgZGl2aWRlbmRzCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBwYXlEaXZpZGVuZHNUbyhtc2cuc2VuZGVyKTsKICAgICAgICBwYXlEaXZpZGVuZHNUbyhfdG8pOwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgaG9vayBvbiBzdGFuZGFyZCBFUkMyMCN0cmFuc2ZlckZyb20gdG8gcGF5IGRpdmlkZW5kcwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHBheURpdmlkZW5kc1RvKF9mcm9tKTsKICAgICAgICBwYXlEaXZpZGVuZHNUbyhfdG8pOwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvLyBEaXNhYmxlZDogdGhpcyBjb3VsZCBiZSB1bmRlc2lyYWJsZSBiZWNhdXNlIHN1bSBvZiAoYmFsYW5jZU9mKCkgZm9yIGVhY2ggdG9rZW4gb3duZXIpICE9IHRvdGFsU3VwcGx5CiAgICAvLyAoYnV0OiBzdW0gb2YgKGJhbGFuY2VzW293bmVyXSBmb3IgZWFjaCB0b2tlbiBvd25lcikgPT0gdG90YWxTdXBwbHkhKS4KICAgIC8vCiAgICAvLyBAbm90aWNlIGhvb2sgb24gc3RhbmRhcmQgRVJDMjAjYmFsYW5jZU9mIHRvIHRha2UgZGl2aWRlbmRzIGludG8gY29uc2lkZXJhdGlvbgogICAgLy8gZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyAgICAgdmFyIChoYXNOZXdEaXZpZGVuZHMsIGRpdmlkZW5kcykgPSBjYWxjdWxhdGVEaXZpZGVuZHNGb3IoX293bmVyKTsKICAgIC8vICAgICByZXR1cm4gaGFzTmV3RGl2aWRlbmRzID8gc3VwZXIuYmFsYW5jZU9mKF9vd25lcikuYWRkKGRpdmlkZW5kcykgOiBzdXBlci5iYWxhbmNlT2YoX293bmVyKTsKICAgIC8vIH0KCgogICAgLy8vIEBkZXYgbWludHMgbmV3IHRva2VucwogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBleHRlcm5hbCBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgcmVxdWlyZShtX2V4dGVybmFsTWludGluZ0VuYWJsZWQpOwogICAgICAgIHBheURpdmlkZW5kc1RvKF90byk7CiAgICAgICAgbWludEludGVybmFsKF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBkZXYgZGlzYWJsZXMgbWludCgpLCBpcnJldmVyc2libGUhCiAgICBmdW5jdGlvbiBkaXNhYmxlTWludGluZygpIGV4dGVybmFsIG9ubHlDb250cm9sbGVyIHsKICAgICAgICByZXF1aXJlKG1fZXh0ZXJuYWxNaW50aW5nRW5hYmxlZCk7CiAgICAgICAgbV9leHRlcm5hbE1pbnRpbmdFbmFibGVkID0gZmFsc2U7CiAgICB9CgoKICAgIC8vIElOVEVSTkFMIGZ1bmN0aW9ucwoKICAgIC8qKgogICAgICogQG5vdGljZSBTdGFydHMgbmV3IHRva2VuIGVtaXNzaW9uCiAgICAgKiBAcGFyYW0gX3Rva2Vuc0NyZWF0ZWQgQW1vdW50IG9mIHRva2VucyB0byBjcmVhdGUKICAgICAqIEBkZXYgRGl2aWRlbmRzIGFyZSBub3QgZGlzdHJpYnV0ZWQgaW1tZWRpYXRlbHkgYXMgaXQgY291bGQgcmVxdWlyZSBiaWxsaW9ucyBvZiBnYXMsCiAgICAgKiBpbnN0ZWFkIHRoZXkgYXJlIGBwdWxsZWRgIGJ5IGEgaG9sZGVyIGZyb20gZGl2aWRlbmRzIHBvb2wgYWNjb3VudCBiZWZvcmUgYW55IHVwZGF0ZSB0byB0aGUgaG9sZGVyIGFjY291bnQgb2NjdXJzLgogICAgICovCiAgICBmdW5jdGlvbiBlbWlzc2lvbkludGVybmFsKHVpbnQyNTYgX3Rva2Vuc0NyZWF0ZWQpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKDAgIT0gX3Rva2Vuc0NyZWF0ZWQpOwogICAgICAgIHJlcXVpcmUoX3Rva2Vuc0NyZWF0ZWQgPCB0b3RhbFN1cHBseSAvIDIpOyAgLy8gb3RoZXJ3aXNlIGl0IGxvb2tzIGxpa2UgYW4gZXJyb3IKCiAgICAgICAgdWludDI1NiB0b3RhbFN1cHBseVdhcyA9IHRvdGFsU3VwcGx5OwoKICAgICAgICBtX2VtaXNzaW9ucy5wdXNoKEVtaXNzaW9uSW5mbyh7Y3JlYXRlZDogX3Rva2Vuc0NyZWF0ZWQsIHRvdGFsU3VwcGx5V2FzOiB0b3RhbFN1cHBseVdhc30pKTsKICAgICAgICBtaW50SW50ZXJuYWwoZGl2aWRlbmRzUG9vbCwgX3Rva2Vuc0NyZWF0ZWQpOwoKICAgICAgICBFbWlzc2lvbihfdG9rZW5zQ3JlYXRlZCwgdG90YWxTdXBwbHlXYXMsIG5vdyk7CiAgICB9CgogICAgZnVuY3Rpb24gbWludEludGVybmFsKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIGludGVybmFsIHsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgX3RvLCBfYW1vdW50KTsKICAgICAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBkZXYgYWRkcyBkaXZpZGVuZHMgdG8gdGhlIGFjY291bnQgX3RvCiAgICBmdW5jdGlvbiBwYXlEaXZpZGVuZHNUbyhhZGRyZXNzIF90bykgaW50ZXJuYWwgewogICAgICAgIHZhciAoaGFzTmV3RGl2aWRlbmRzLCBkaXZpZGVuZHMpID0gY2FsY3VsYXRlRGl2aWRlbmRzRm9yKF90byk7CiAgICAgICAgaWYgKCFoYXNOZXdEaXZpZGVuZHMpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgaWYgKDAgIT0gZGl2aWRlbmRzKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW2RpdmlkZW5kc1Bvb2xdID0gYmFsYW5jZXNbZGl2aWRlbmRzUG9vbF0uc3ViKGRpdmlkZW5kcyk7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChkaXZpZGVuZHMpOwogICAgICAgICAgICBUcmFuc2ZlcihkaXZpZGVuZHNQb29sLCBfdG8sIGRpdmlkZW5kcyk7CiAgICAgICAgfQogICAgICAgIG1fbGFzdEFjY291bnRFbWlzc2lvbltfdG9dID0gZ2V0TGFzdEVtaXNzaW9uTnVtKCk7CiAgICB9CgogICAgLy8vIEBkZXYgY2FsY3VsYXRlcyBkaXZpZGVuZHMgZm9yIHRoZSBhY2NvdW50IF9mb3IKICAgIC8vLyBAcmV0dXJuICh0cnVlIGlmIHN0YXRlIGhhcyB0byBiZSB1cGRhdGVkLCBkaXZpZGVuZCBhbW91bnQgKGNvdWxkIGJlIDAhKSkKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpdmlkZW5kc0ZvcihhZGRyZXNzIF9mb3IpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGJvb2wgaGFzTmV3RGl2aWRlbmRzLCB1aW50IGRpdmlkZW5kcykgewogICAgICAgIGFzc2VydChfZm9yICE9IGRpdmlkZW5kc1Bvb2wpOyAgLy8gbm8gZGl2aWRlbmRzIGZvciB0aGUgcG9vbCEKCiAgICAgICAgdWludDI1NiBsYXN0RW1pc3Npb25OdW0gPSBnZXRMYXN0RW1pc3Npb25OdW0oKTsKICAgICAgICB1aW50MjU2IGxhc3RBY2NvdW50RW1pc3Npb25OdW0gPSBtX2xhc3RBY2NvdW50RW1pc3Npb25bX2Zvcl07CiAgICAgICAgYXNzZXJ0KGxhc3RBY2NvdW50RW1pc3Npb25OdW0gPD0gbGFzdEVtaXNzaW9uTnVtKTsKICAgICAgICBpZiAobGFzdEFjY291bnRFbWlzc2lvbk51bSA9PSBsYXN0RW1pc3Npb25OdW0pCiAgICAgICAgICAgIHJldHVybiAoZmFsc2UsIDApOwoKICAgICAgICB1aW50MjU2IGluaXRpYWxCYWxhbmNlID0gYmFsYW5jZXNbX2Zvcl07ICAgIC8vIGJld2FyZSBvZiByZWN1cnNpb24hCiAgICAgICAgaWYgKDAgPT0gaW5pdGlhbEJhbGFuY2UpCiAgICAgICAgICAgIHJldHVybiAodHJ1ZSwgMCk7CgogICAgICAgIHVpbnQyNTYgYmFsYW5jZSA9IGluaXRpYWxCYWxhbmNlOwogICAgICAgIGZvciAodWludDI1NiBlbWlzc2lvblRvUHJvY2VzcyA9IGxhc3RBY2NvdW50RW1pc3Npb25OdW0gKyAxOyBlbWlzc2lvblRvUHJvY2VzcyA8PSBsYXN0RW1pc3Npb25OdW07IGVtaXNzaW9uVG9Qcm9jZXNzKyspIHsKICAgICAgICAgICAgRW1pc3Npb25JbmZvIHN0b3JhZ2UgZW1pc3Npb24gPSBtX2VtaXNzaW9uc1tlbWlzc2lvblRvUHJvY2Vzc107CiAgICAgICAgICAgIGFzc2VydCgwICE9IGVtaXNzaW9uLmNyZWF0ZWQgJiYgMCAhPSBlbWlzc2lvbi50b3RhbFN1cHBseVdhcyk7CgogICAgICAgICAgICB1aW50MjU2IGRpdmlkZW5kID0gYmFsYW5jZS5tdWwoZW1pc3Npb24uY3JlYXRlZCkuZGl2KGVtaXNzaW9uLnRvdGFsU3VwcGx5V2FzKTsKICAgICAgICAgICAgRGl2aWRlbmQoX2ZvciwgZGl2aWRlbmQpOwoKICAgICAgICAgICAgYmFsYW5jZSA9IGJhbGFuY2UuYWRkKGRpdmlkZW5kKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAodHJ1ZSwgYmFsYW5jZS5zdWIoaW5pdGlhbEJhbGFuY2UpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRMYXN0RW1pc3Npb25OdW0oKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gbV9lbWlzc2lvbnMubGVuZ3RoIC0gMTsKICAgIH0KCgogICAgLy8gRklFTERTCgogICAgLy8vIEBub3RpY2UgaWYgdGhpcyB0cnVlIHRoZW4gdG9rZW4gaXMgc3RpbGwgZXh0ZXJuYWxseSBtaW50YWJsZSAoYnV0IHRoaXMgZmxhZyBkb2VzJ3QgYWZmZWN0IGVtaXNzaW9ucyEpCiAgICBib29sIHB1YmxpYyBtX2V4dGVybmFsTWludGluZ0VuYWJsZWQgPSB0cnVlOwoKICAgIC8vLyBAZGV2IGludGVybmFsIGFkZHJlc3Mgb2YgZGl2aWRlbmRzIGluIGJhbGFuY2VzIG1hcHBpbmcuCiAgICBhZGRyZXNzIGRpdmlkZW5kc1Bvb2w7CgogICAgLy8vIEBub3RpY2UgcmVjb3JkIG9mIGlzc3VlZCBkaXZpZGVuZCBlbWlzc2lvbnMKICAgIEVtaXNzaW9uSW5mb1tdIHB1YmxpYyBtX2VtaXNzaW9uczsKCiAgICAvLy8gQGRldiBmb3IgZWFjaCB0b2tlbiBob2xkZXI6IGxhc3QgZW1pc3Npb24gKGluZGV4IGluIG1fZW1pc3Npb25zKSB3aGljaCB3YXMgcHJvY2Vzc2VkIGZvciB0aGlzIGhvbGRlcgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIG1fbGFzdEFjY291bnRFbWlzc2lvbjsKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4uL3Rva2VuL01pbnRhYmxlTXVsdGlvd25lZFRva2VuLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9JSW52ZXN0bWVudHNXYWxsZXRDb25uZWN0b3Iuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqCiAqIEB0aXRsZSBJbnRlcmZhY2UgZm9yIGNvZGUgd2hpY2ggcHJvY2Vzc2VzIGFuZCBzdG9yZXMgaW52ZXN0bWVudHMuCiAqIEBhdXRob3IgRWVuYWUKICovCmNvbnRyYWN0IElJbnZlc3RtZW50c1dhbGxldENvbm5lY3RvciB7CiAgICAvLy8gQGRldiBwcm9jZXNzIGFuZCBmb3J3YXJkIGludmVzdG1lbnQKICAgIGZ1bmN0aW9uIHN0b3JlSW52ZXN0bWVudChhZGRyZXNzIGludmVzdG9yLCB1aW50IHBheW1lbnQpIGludGVybmFsOwoKICAgIC8vLyBAZGV2IHRvdGFsIGludmVzdG1lbnRzIGFtb3VudCBzdG9yZWQgdXNpbmcgc3RvcmVJbnZlc3RtZW50KCkKICAgIGZ1bmN0aW9uIGdldFRvdGFsSW52ZXN0bWVudHNTdG9yZWQoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQGRldiBjYWxsZWQgaW4gY2FzZSBjcm93ZHNhbGUgc3VjY2VlZGVkCiAgICBmdW5jdGlvbiB3Y09uQ3Jvd2RzYWxlU3VjY2VzcygpIGludGVybmFsOwoKICAgIC8vLyBAZGV2IGNhbGxlZCBpbiBjYXNlIGNyb3dkc2FsZSBmYWlsZWQKICAgIGZ1bmN0aW9uIHdjT25Dcm93ZHNhbGVGYWlsdXJlKCkgaW50ZXJuYWw7Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL0lJbnZlc3RtZW50c1dhbGxldENvbm5lY3Rvci5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vSUNyb3dkc2FsZVN0YXQuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqCiAqIEB0aXRsZSBCYXNpYyBjcm93ZHNhbGUgc3RhdAogKiBAYXV0aG9yIEVlbmFlCiAqLwpjb250cmFjdCBJQ3Jvd2RzYWxlU3RhdCB7CgogICAgLy8vIEBub3RpY2UgYW1vdW50IG9mIGZ1bmRzIGNvbGxlY3RlZCBpbiB3ZWkKICAgIGZ1bmN0aW9uIGdldFdlaUNvbGxlY3RlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQG5vdGljZSBhbW91bnQgb2YgdG9rZW5zIG1pbnRlZCAoTk9UIGVxdWFsIHRvIHRvdGFsU3VwcGx5KCkgaW4gY2FzZSB0b2tlbiBpcyByZXVzZWQhKQogICAgZnVuY3Rpb24gZ2V0VG9rZW5NaW50ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL0lDcm93ZHNhbGVTdGF0LnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL1JlZW50cmFuY3lHdWFyZC5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovKioKICogQHRpdGxlIEhlbHBzIGNvbnRyYWN0cyBndWFyZCBhZ2FpbnMgcmVudHJhbmN5IGF0dGFja3MuCiAqIEBhdXRob3IgUmVtY28gQmxvZW1lbiA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImE4ZGFjZGM1Y2JjN2U4OWEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+z4AuY29tPgogKiBAbm90aWNlIElmIHlvdSBtYXJrIGEgZnVuY3Rpb24gYG5vblJlZW50cmFudGAsIHlvdSBzaG91bGQgYWxzbwogKiBtYXJrIGl0IGBleHRlcm5hbGAuCiAqLwpjb250cmFjdCBSZWVudHJhbmN5R3VhcmQgewoKICAvKioKICAgKiBAZGV2IFdlIHVzZSBhIHNpbmdsZSBsb2NrIGZvciB0aGUgd2hvbGUgY29udHJhY3QuCiAgICovCiAgYm9vbCBwcml2YXRlIHJlbnRyYW5jeV9sb2NrID0gZmFsc2U7CgogIC8qKgogICAqIEBkZXYgUHJldmVudHMgYSBjb250cmFjdCBmcm9tIGNhbGxpbmcgaXRzZWxmLCBkaXJlY3RseSBvciBpbmRpcmVjdGx5LgogICAqIEBub3RpY2UgSWYgeW91IG1hcmsgYSBmdW5jdGlvbiBgbm9uUmVlbnRyYW50YCwgeW91IHNob3VsZCBhbHNvCiAgICogbWFyayBpdCBgZXh0ZXJuYWxgLiBDYWxsaW5nIG9uZSBub25SZWVudHJhbnQgZnVuY3Rpb24gZnJvbQogICAqIGFub3RoZXIgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgeW91IGNhbiBpbXBsZW1lbnQgYQogICAqIGBwcml2YXRlYCBmdW5jdGlvbiBkb2luZyB0aGUgYWN0dWFsIHdvcmssIGFuZCBhIGBleHRlcm5hbGAKICAgKiB3cmFwcGVyIG1hcmtlZCBhcyBgbm9uUmVlbnRyYW50YC4KICAgKi8KICBtb2RpZmllciBub25SZWVudHJhbnQoKSB7CiAgICByZXF1aXJlKCFyZW50cmFuY3lfbG9jayk7CiAgICByZW50cmFuY3lfbG9jayA9IHRydWU7CiAgICBfOwogICAgcmVudHJhbmN5X2xvY2sgPSBmYWxzZTsKICB9Cgp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL1JlZW50cmFuY3lHdWFyZC5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCgovLy8gQHRpdGxlIEJhc2UgY29udHJhY3QgZm9yIHNpbXBsZSBjcm93ZHNhbGVzCmNvbnRyYWN0IFNpbXBsZUNyb3dkc2FsZUJhc2UgaXMgQXJndW1lbnRzQ2hlY2tlciwgUmVlbnRyYW5jeUd1YXJkLCBJSW52ZXN0bWVudHNXYWxsZXRDb25uZWN0b3IsIElDcm93ZHNhbGVTdGF0IHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGV2ZW50IEZ1bmRUcmFuc2ZlcihhZGRyZXNzIGJhY2tlciwgdWludCBhbW91bnQsIGJvb2wgaXNDb250cmlidXRpb24pOwoKICAgIGZ1bmN0aW9uIFNpbXBsZUNyb3dkc2FsZUJhc2UoYWRkcmVzcyB0b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3ModG9rZW4pCiAgICB7CiAgICAgICAgbV90b2tlbiA9IE1pbnRhYmxlTXVsdGlvd25lZFRva2VuKHRva2VuKTsKICAgIH0KCgogICAgLy8gUFVCTElDIGludGVyZmFjZTogcGF5bWVudHMKCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbiBhcyBhIHNob3J0Y3V0CiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoMCA9PSBtc2cuZGF0YS5sZW5ndGgpOwogICAgICAgIGJ1eSgpOyAgLy8gb25seSBpbnRlcm5hbCBjYWxsIGhlcmUhCiAgICB9CgogICAgLy8vIEBub3RpY2UgY3Jvd2RzYWxlIHBhcnRpY2lwYXRpb24KICAgIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHsgICAgIC8vIGRvbnQgbWFyayBhcyBleHRlcm5hbCEKICAgICAgICBidXlJbnRlcm5hbChtc2cuc2VuZGVyLCBtc2cudmFsdWUsIDApOwogICAgfQoKCiAgICAvLyBJTlRFUk5BTAoKICAgIC8vLyBAZGV2IHBheW1lbnQgcHJvY2Vzc2luZwogICAgZnVuY3Rpb24gYnV5SW50ZXJuYWwoYWRkcmVzcyBpbnZlc3RvciwgdWludCBwYXltZW50LCB1aW50IGV4dHJhQm9udXNlcykKICAgICAgICBpbnRlcm5hbAogICAgICAgIG5vblJlZW50cmFudAogICAgewogICAgICAgIHJlcXVpcmUocGF5bWVudCA+PSBnZXRNaW5JbnZlc3RtZW50KCkpOwogICAgICAgIHJlcXVpcmUoZ2V0Q3VycmVudFRpbWUoKSA+PSBnZXRTdGFydFRpbWUoKSB8fCAhIG11c3RBcHBseVRpbWVDaGVjayhpbnZlc3RvciwgcGF5bWVudCkgLyogZm9yIGZpbmFsIGNoZWNrICovKTsKICAgICAgICBpZiAoZ2V0Q3VycmVudFRpbWUoKSA+PSBnZXRFbmRUaW1lKCkpCiAgICAgICAgICAgIGZpbmlzaCgpOwoKICAgICAgICBpZiAobV9maW5pc2hlZCkgewogICAgICAgICAgICAvLyBzYXZpbmcgcHJvdmlkZWQgZ2FzCiAgICAgICAgICAgIGludmVzdG9yLnRyYW5zZmVyKHBheW1lbnQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB1aW50IHN0YXJ0aW5nV2VpQ29sbGVjdGVkID0gZ2V0V2VpQ29sbGVjdGVkKCk7CiAgICAgICAgdWludCBzdGFydGluZ0ludmFyaWFudCA9IHRoaXMuYmFsYW5jZS5hZGQoc3RhcnRpbmdXZWlDb2xsZWN0ZWQpOwoKICAgICAgICAvLyByZXR1cm4gb3IgdXBkYXRlIHBheW1lbnQgaWYgbmVlZGVkCiAgICAgICAgdWludCBwYXltZW50QWxsb3dlZCA9IGdldE1heGltdW1GdW5kcygpLnN1YihnZXRXZWlDb2xsZWN0ZWQoKSk7CiAgICAgICAgYXNzZXJ0KDAgIT0gcGF5bWVudEFsbG93ZWQpOwoKICAgICAgICB1aW50IGNoYW5nZTsKICAgICAgICBpZiAocGF5bWVudEFsbG93ZWQgPCBwYXltZW50KSB7CiAgICAgICAgICAgIGNoYW5nZSA9IHBheW1lbnQuc3ViKHBheW1lbnRBbGxvd2VkKTsKICAgICAgICAgICAgcGF5bWVudCA9IHBheW1lbnRBbGxvd2VkOwogICAgICAgIH0KCiAgICAgICAgLy8gaXNzdWUgdG9rZW5zCiAgICAgICAgdWludCB0b2tlbnMgPSBjYWxjdWxhdGVUb2tlbnMoaW52ZXN0b3IsIHBheW1lbnQsIGV4dHJhQm9udXNlcyk7CiAgICAgICAgbV90b2tlbi5taW50KGludmVzdG9yLCB0b2tlbnMpOwogICAgICAgIG1fdG9rZW5zTWludGVkICs9IHRva2VuczsKCiAgICAgICAgLy8gcmVjb3JkIHBheW1lbnQKICAgICAgICBzdG9yZUludmVzdG1lbnQoaW52ZXN0b3IsIHBheW1lbnQpOwogICAgICAgIGFzc2VydChnZXRXZWlDb2xsZWN0ZWQoKSA8PSBnZXRNYXhpbXVtRnVuZHMoKSAmJiBnZXRXZWlDb2xsZWN0ZWQoKSA+IHN0YXJ0aW5nV2VpQ29sbGVjdGVkKTsKICAgICAgICBGdW5kVHJhbnNmZXIoaW52ZXN0b3IsIHBheW1lbnQsIHRydWUpOwoKICAgICAgICBpZiAoZ2V0V2VpQ29sbGVjdGVkKCkgPT0gZ2V0TWF4aW11bUZ1bmRzKCkpCiAgICAgICAgICAgIGZpbmlzaCgpOwoKICAgICAgICBpZiAoY2hhbmdlID4gMCkKICAgICAgICAgICAgaW52ZXN0b3IudHJhbnNmZXIoY2hhbmdlKTsKCiAgICAgICAgYXNzZXJ0KHN0YXJ0aW5nSW52YXJpYW50ID09IHRoaXMuYmFsYW5jZS5hZGQoZ2V0V2VpQ29sbGVjdGVkKCkpLmFkZChjaGFuZ2UpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmaW5pc2goKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKG1fZmluaXNoZWQpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgaWYgKGdldFdlaUNvbGxlY3RlZCgpID49IGdldE1pbmltdW1GdW5kcygpKQogICAgICAgICAgICB3Y09uQ3Jvd2RzYWxlU3VjY2VzcygpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgd2NPbkNyb3dkc2FsZUZhaWx1cmUoKTsKCiAgICAgICAgbV9maW5pc2hlZCA9IHRydWU7CiAgICB9CgoKICAgIC8vIE90aGVyIHBsdWdnYWJsZXMKCiAgICAvLy8gQGRldiBzYXlzIGlmIGNyb3dkc2FsZSB0aW1lIGJvdW5kcyBtdXN0IGJlIGNoZWNrZWQKICAgIGZ1bmN0aW9uIG11c3RBcHBseVRpbWVDaGVjayhhZGRyZXNzIC8qaW52ZXN0b3IqLywgdWludCAvKnBheW1lbnQqLykgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IHRvIGJlIG92ZXJyaWRkZW4gaW4gdGVzdHMKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBub3c7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbWF4aW11bSBpbnZlc3RtZW50cyB0byBiZSBhY2NlcHRlZCBkdXJpbmcgcHJlLUlDTwogICAgZnVuY3Rpb24gZ2V0TWF4aW11bUZ1bmRzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgLy8vIEBub3RpY2UgbWluaW11bSBhbW91bnQgb2YgZnVuZGluZyB0byBjb25zaWRlciBjcm93ZHNhbGUgYXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gZ2V0TWluaW11bUZ1bmRzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgLy8vIEBub3RpY2Ugc3RhcnQgdGltZSBvZiB0aGUgcHJlLUlDTwogICAgZnVuY3Rpb24gZ2V0U3RhcnRUaW1lKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgLy8vIEBub3RpY2UgZW5kIHRpbWUgb2YgdGhlIHByZS1JQ08KICAgIGZ1bmN0aW9uIGdldEVuZFRpbWUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQG5vdGljZSBtaW5pbWFsIGFtb3VudCBvZiBpbnZlc3RtZW50CiAgICBmdW5jdGlvbiBnZXRNaW5JbnZlc3RtZW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gMTAgZmlubmV5OwogICAgfQoKICAgIC8vLyBAZGV2IGNhbGN1bGF0ZXMgdG9rZW4gYW1vdW50IGZvciBnaXZlbiBpbnZlc3RtZW50CiAgICBmdW5jdGlvbiBjYWxjdWxhdGVUb2tlbnMoYWRkcmVzcyBpbnZlc3RvciwgdWludCBwYXltZW50LCB1aW50IGV4dHJhQm9udXNlcykgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgoKICAgIC8vIElDcm93ZHNhbGVTdGF0CgogICAgZnVuY3Rpb24gZ2V0V2VpQ29sbGVjdGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZ2V0VG90YWxJbnZlc3RtZW50c1N0b3JlZCgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGFtb3VudCBvZiB0b2tlbnMgbWludGVkIChOT1QgZXF1YWwgdG8gdG90YWxTdXBwbHkoKSBpbiBjYXNlIHRva2VuIGlzIHJldXNlZCEpCiAgICBmdW5jdGlvbiBnZXRUb2tlbk1pbnRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG1fdG9rZW5zTWludGVkOwogICAgfQoKCiAgICAvLyBGSUVMRFMKCiAgICAvLy8gQGRldiBjb250cmFjdCByZXNwb25zaWJsZSBmb3IgdG9rZW4gYWNjb3VudGluZwogICAgTWludGFibGVNdWx0aW93bmVkVG9rZW4gcHVibGljIG1fdG9rZW47CgogICAgdWludCBtX3Rva2Vuc01pbnRlZDsKCiAgICBib29sIG1fZmluaXNoZWQgPSBmYWxzZTsKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vY3Jvd2RzYWxlL1NpbXBsZUNyb3dkc2FsZUJhc2Uuc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL2Nyb3dkc2FsZS9JbnZlc3RtZW50QW5hbHl0aWNzLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgoKCi8qCiAqIEB0aXRsZSBUaGlzIGlzIHByb3h5IGZvciBhbmFseXRpY3MuIFRhcmdldCBjb250cmFjdCBjYW4gYmUgZm91bmQgYXQgZmllbGQgbV9hbmFseXRpY3MgKHNlZSAicmVhZCBjb250cmFjdCIpLgogKiBAYXV0aG9yIEVlbmFlCgogKiBGSVhNRSBhZnRlciBmaXggb2YgdHJ1ZmZsZSBpc3N1ZSAjNTYwOiByZWZhY3RvciB0byBhIHNlcGFyYXRlIGNvbnRyYWN0IGZpbGUgd2hpY2ggdXNlcyBJbnZlc3RtZW50QW5hbHl0aWNzIGludGVyZmFjZQogKi8KY29udHJhY3QgQW5hbHl0aWNQcm94eSB7CgogICAgZnVuY3Rpb24gQW5hbHl0aWNQcm94eSgpIHsKICAgICAgICBtX2FuYWx5dGljcyA9IEludmVzdG1lbnRBbmFseXRpY3MobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgZm9yd2FyZCBwYXltZW50IHRvIGFuYWx5dGljcy1jYXBhYmxlIGNvbnRyYWN0CiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIG1fYW5hbHl0aWNzLmlhSW52ZXN0ZWRCeS52YWx1ZShtc2cudmFsdWUpKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIEludmVzdG1lbnRBbmFseXRpY3MgcHVibGljIG1fYW5hbHl0aWNzOwp9CgoKLyoKICogQHRpdGxlIE1peGluIGNvbnRyYWN0IHdoaWNoIHN1cHBvcnRzIGRpZmZlcmVudCBwYXltZW50IGNoYW5uZWxzIGFuZCBwcm92aWRlcyBhbmFseXRpY2FsIHBlci1jaGFubmVsIGRhdGEuCiAqIEBhdXRob3IgRWVuYWUKICovCmNvbnRyYWN0IEludmVzdG1lbnRBbmFseXRpY3MgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZnVuY3Rpb24gSW52ZXN0bWVudEFuYWx5dGljcygpewogICAgfQoKICAgIC8vLyBAZGV2IGNyZWF0ZXMgbW9yZSBwYXltZW50IGNoYW5uZWxzLCB1cCB0byB0aGUgbGltaXQgYnV0IG5vdCBleGNlZWRpbmcgZ2FzIHN0aXBlbmQKICAgIGZ1bmN0aW9uIGNyZWF0ZU1vcmVQYXltZW50Q2hhbm5lbHNJbnRlcm5hbCh1aW50IGxpbWl0KSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBwYXltZW50Q2hhbm5lbHNDcmVhdGVkOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGxpbWl0OyBpKyspIHsKICAgICAgICAgICAgdWludCBzdGFydGluZ0dhcyA9IG1zZy5nYXM7CiAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAqIH4xNzBrIG9mIGdhcyBwZXIgcGF5bWVudENoYW5uZWwsCiAgICAgICAgICAgICAqIHVzaW5nIGdhcyBwcmljZSA9IDRHd2VpIDJrIHBheW1lbnRDaGFubmVscyB3aWxsIGNvc3QgfjEuNCBFVEguCiAgICAgICAgICAgICAqLwoKICAgICAgICAgICAgYWRkcmVzcyBwYXltZW50Q2hhbm5lbCA9IG5ldyBBbmFseXRpY1Byb3h5KCk7CiAgICAgICAgICAgIG1fdmFsaWRQYXltZW50Q2hhbm5lbHNbcGF5bWVudENoYW5uZWxdID0gdHJ1ZTsKICAgICAgICAgICAgbV9wYXltZW50Q2hhbm5lbHMucHVzaChwYXltZW50Q2hhbm5lbCk7CiAgICAgICAgICAgIHBheW1lbnRDaGFubmVsc0NyZWF0ZWQrKzsKCiAgICAgICAgICAgIC8vIGNvc3Qgb2YgY3JlYXRpbmcgb25lIGNoYW5uZWwKICAgICAgICAgICAgdWludCBnYXNQZXJDaGFubmVsID0gc3RhcnRpbmdHYXMuc3ViKG1zZy5nYXMpOwogICAgICAgICAgICBpZiAoZ2FzUGVyQ2hhbm5lbC5hZGQoNTAwMDApID4gbXNnLmdhcykKICAgICAgICAgICAgICAgIGJyZWFrOyAgLy8gZW5vdWdoIHByb3hpZXMgZm9yIHRoaXMgY2FsbAogICAgICAgIH0KICAgICAgICByZXR1cm4gcGF5bWVudENoYW5uZWxzQ3JlYXRlZDsKICAgIH0KCgogICAgLy8vIEBkZXYgcHJvY2VzcyBwYXltZW50cyAtIHJlY29yZCBhbmFseXRpY3MgYW5kIHBhc3MgY29udHJvbCB0byBpYU9uSW52ZXN0ZWQgY2FsbGJhY2sKICAgIGZ1bmN0aW9uIGlhSW52ZXN0ZWRCeShhZGRyZXNzIGludmVzdG9yKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICBhZGRyZXNzIHBheW1lbnRDaGFubmVsID0gbXNnLnNlbmRlcjsKICAgICAgICBpZiAobV92YWxpZFBheW1lbnRDaGFubmVsc1twYXltZW50Q2hhbm5lbF0pIHsKICAgICAgICAgICAgLy8gcGF5bWVudCByZWNlaXZlZCBieSBvbmUgb2Ygb3VyIGNoYW5uZWxzCiAgICAgICAgICAgIHVpbnQgdmFsdWUgPSBtc2cudmFsdWU7CiAgICAgICAgICAgIG1faW52ZXN0bWVudHNCeVBheW1lbnRDaGFubmVsW3BheW1lbnRDaGFubmVsXSA9IG1faW52ZXN0bWVudHNCeVBheW1lbnRDaGFubmVsW3BheW1lbnRDaGFubmVsXS5hZGQodmFsdWUpOwogICAgICAgICAgICAvLyBXZSBrbm93IGZvciBzdXJlIHRoYXQgaW52ZXN0bWVudCBjYW1lIGZyb20gc3BlY2lmaWVkIGludmVzdG9yIChzZWUgQW5hbHl0aWNQcm94eSkuCiAgICAgICAgICAgIGlhT25JbnZlc3RlZChpbnZlc3RvciwgdmFsdWUsIHRydWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIExvb2tzIGxpa2Ugc29tZSB1c2VyIGhhcyBwYWlkIHRvIHRoaXMgbWV0aG9kLCB0aGlzIHBheW1lbnQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhbmFseXRpY3MsCiAgICAgICAgICAgIC8vIGJ1dCwgb2YgY291cnNlLCBwcm9jZXNzZWQuCiAgICAgICAgICAgIGlhT25JbnZlc3RlZChtc2cuc2VuZGVyLCBtc2cudmFsdWUsIGZhbHNlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgY2FsbGJhY2sKICAgIGZ1bmN0aW9uIGlhT25JbnZlc3RlZChhZGRyZXNzIC8qaW52ZXN0b3IqLywgdWludCAvKnBheW1lbnQqLywgYm9vbCAvKnVzaW5nUGF5bWVudENoYW5uZWwqLykgaW50ZXJuYWwgewogICAgfQoKCiAgICBmdW5jdGlvbiBwYXltZW50Q2hhbm5lbHNDb3VudCgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbV9wYXltZW50Q2hhbm5lbHMubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlYWRBbmFseXRpY3NNYXAoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzW10sIHVpbnRbXSkgewogICAgICAgIGFkZHJlc3NbXSBtZW1vcnkga2V5cyA9IG5ldyBhZGRyZXNzW10obV9wYXltZW50Q2hhbm5lbHMubGVuZ3RoKTsKICAgICAgICB1aW50W10gbWVtb3J5IHZhbHVlcyA9IG5ldyB1aW50W10obV9wYXltZW50Q2hhbm5lbHMubGVuZ3RoKTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbV9wYXltZW50Q2hhbm5lbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYWRkcmVzcyBrZXkgPSBtX3BheW1lbnRDaGFubmVsc1tpXTsKICAgICAgICAgICAga2V5c1tpXSA9IGtleTsKICAgICAgICAgICAgdmFsdWVzW2ldID0gbV9pbnZlc3RtZW50c0J5UGF5bWVudENoYW5uZWxba2V5XTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoa2V5cywgdmFsdWVzKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZWFkUGF5bWVudENoYW5uZWxzKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIG1fcGF5bWVudENoYW5uZWxzOwogICAgfQoKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIG1faW52ZXN0bWVudHNCeVBheW1lbnRDaGFubmVsOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIG1fdmFsaWRQYXltZW50Q2hhbm5lbHM7CgogICAgYWRkcmVzc1tdIHB1YmxpYyBtX3BheW1lbnRDaGFubmVsczsKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vY3Jvd2RzYWxlL0ludmVzdG1lbnRBbmFseXRpY3Muc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICJ6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICJ6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovLy8gQHRpdGxlIEJhc2UgY29udHJhY3QgZm9yIFN0b3JpcWEgcHJlLUlDTwpjb250cmFjdCBTVFFQcmVJQ09CYXNlIGlzIFNpbXBsZUNyb3dkc2FsZUJhc2UsIE93bmFibGUsIEludmVzdG1lbnRBbmFseXRpY3MgewoKICAgIGZ1bmN0aW9uIFNUUVByZUlDT0Jhc2UoYWRkcmVzcyB0b2tlbikKICAgICAgICBTaW1wbGVDcm93ZHNhbGVCYXNlKHRva2VuKQogICAgewogICAgfQoKCiAgICAvLyBQVUJMSUMgaW50ZXJmYWNlOiBtYWludGVuYW5jZQoKICAgIGZ1bmN0aW9uIGNyZWF0ZU1vcmVQYXltZW50Q2hhbm5lbHModWludCBsaW1pdCkgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gY3JlYXRlTW9yZVBheW1lbnRDaGFubmVsc0ludGVybmFsKGxpbWl0KTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUZXN0cyBvd25lcnNoaXAgb2YgdGhlIGN1cnJlbnQgY2FsbGVyLgogICAgLy8vIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIGFuIG93bmVyCiAgICAvLyBJdCdzIGFkdmlzYWJsZSB0byBjYWxsIGl0IGJ5IG5ldyBvd25lciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgc2FtZSBlcnJvbmVvdXMgYWRkcmVzcyBpcyBub3QgY29weS1wYXN0ZWQgdG8KICAgIC8vIGFkZE93bmVyL2NoYW5nZU93bmVyIGFuZCB0byBpc093bmVyLgogICAgZnVuY3Rpb24gYW1JT3duZXIoKSBleHRlcm5hbCBjb25zdGFudCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvLyBJTlRFUk5BTAoKICAgIC8vLyBAZGV2IHBheW1lbnQgY2FsbGJhY2sKICAgIGZ1bmN0aW9uIGlhT25JbnZlc3RlZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHBheW1lbnQsIGJvb2wgdXNpbmdQYXltZW50Q2hhbm5lbCkgaW50ZXJuYWwgewogICAgICAgIGJ1eUludGVybmFsKGludmVzdG9yLCBwYXltZW50LCB1c2luZ1BheW1lbnRDaGFubmVsID8gY19wYXltZW50Q2hhbm5lbEJvbnVzUGVyY2VudCA6IDApOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2VucyhhZGRyZXNzIC8qaW52ZXN0b3IqLywgdWludCBwYXltZW50LCB1aW50IGV4dHJhQm9udXNlcykgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYm9udXNQZXJjZW50ID0gZ2V0UHJlSUNPQm9udXMoKS5hZGQoZ2V0TGFyZ2VQYXltZW50Qm9udXMocGF5bWVudCkpLmFkZChleHRyYUJvbnVzZXMpOwogICAgICAgIHVpbnQgcmF0ZSA9IGNfU1RRcGVyRVRILm11bChib251c1BlcmNlbnQuYWRkKDEwMCkpLmRpdigxMDApOwoKICAgICAgICByZXR1cm4gcGF5bWVudC5tdWwocmF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TGFyZ2VQYXltZW50Qm9udXModWludCBwYXltZW50KSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAocGF5bWVudCA+IDEwMDAgZXRoZXIpIHJldHVybiAxMDsKICAgICAgICBpZiAocGF5bWVudCA+IDgwMCBldGhlcikgcmV0dXJuIDg7CiAgICAgICAgaWYgKHBheW1lbnQgPiA1MDAgZXRoZXIpIHJldHVybiA1OwogICAgICAgIGlmIChwYXltZW50ID4gMjAwIGV0aGVyKSByZXR1cm4gMjsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBtdXN0QXBwbHlUaW1lQ2hlY2soYWRkcmVzcyBpbnZlc3RvciwgdWludCAvKnBheW1lbnQqLykgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBpbnZlc3RvciAhPSBvd25lcjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBwcmUtSUNPIGJvbnVzCiAgICBmdW5jdGlvbiBnZXRQcmVJQ09Cb251cygpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKCiAgICAvLyBGSUVMRFMKCiAgICAvLy8gQG5vdGljZSBzdGFydGluZyBleGNoYW5nZSByYXRlIG9mIFNUUQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgY19TVFFwZXJFVEggPSAxMDAwMDA7CgogICAgLy8vIEBub3RpY2UgYXV0aG9yaXNlZCBwYXltZW50IGJvbnVzCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBjX3BheW1lbnRDaGFubmVsQm9udXNQZXJjZW50ID0gMjsKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vU1RRUHJlSUNPQmFzZS5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vY3Jvd2RzYWxlL0Z1bmRzUmVnaXN0cnlXYWxsZXRDb25uZWN0b3Iuc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9GdW5kc1JlZ2lzdHJ5LnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgoKCgoKCi8vLyBAdGl0bGUgcmVnaXN0cnkgb2YgZnVuZHMgc2VudCBieSBpbnZlc3RvcnMKY29udHJhY3QgRnVuZHNSZWdpc3RyeSBpcyBBcmd1bWVudHNDaGVja2VyLCBNdWx0aW93bmVkQ29udHJvbGxlZCwgUmVlbnRyYW5jeUd1YXJkIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGVudW0gU3RhdGUgewogICAgICAgIC8vIGdhdGhlcmluZyBmdW5kcwogICAgICAgIEdBVEhFUklORywKICAgICAgICAvLyByZXR1cm5pbmcgZnVuZHMgdG8gaW52ZXN0b3JzCiAgICAgICAgUkVGVU5ESU5HLAogICAgICAgIC8vIGZ1bmRzIGNhbiBiZSBwdWxsZWQgYnkgb3duZXJzCiAgICAgICAgU1VDQ0VFREVECiAgICB9CgogICAgZXZlbnQgU3RhdGVDaGFuZ2VkKFN0YXRlIF9zdGF0ZSk7CiAgICBldmVudCBJbnZlc3RlZChhZGRyZXNzIGluZGV4ZWQgaW52ZXN0b3IsIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IEV0aGVyU2VudChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgUmVmdW5kU2VudChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwoKCiAgICBtb2RpZmllciByZXF1aXJlc1N0YXRlKFN0YXRlIF9zdGF0ZSkgewogICAgICAgIHJlcXVpcmUobV9zdGF0ZSA9PSBfc3RhdGUpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vIFBVQkxJQyBpbnRlcmZhY2UKCiAgICBmdW5jdGlvbiBGdW5kc1JlZ2lzdHJ5KGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9zaWduYXR1cmVzUmVxdWlyZWQsIGFkZHJlc3MgX2NvbnRyb2xsZXIpCiAgICAgICAgTXVsdGlvd25lZENvbnRyb2xsZWQoX293bmVycywgX3NpZ25hdHVyZXNSZXF1aXJlZCwgX2NvbnRyb2xsZXIpCiAgICB7CiAgICB9CgogICAgLy8vIEBkZXYgcGVyZm9ybXMgb25seSBhbGxvd2VkIHN0YXRlIHRyYW5zaXRpb25zCiAgICBmdW5jdGlvbiBjaGFuZ2VTdGF0ZShTdGF0ZSBfbmV3U3RhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5Q29udHJvbGxlcgogICAgewogICAgICAgIGFzc2VydChtX3N0YXRlICE9IF9uZXdTdGF0ZSk7CgogICAgICAgIGlmIChTdGF0ZS5HQVRIRVJJTkcgPT0gbV9zdGF0ZSkgeyAgIGFzc2VydChTdGF0ZS5SRUZVTkRJTkcgPT0gX25ld1N0YXRlIHx8IFN0YXRlLlNVQ0NFRURFRCA9PSBfbmV3U3RhdGUpOyB9CiAgICAgICAgZWxzZSBhc3NlcnQoZmFsc2UpOwoKICAgICAgICBtX3N0YXRlID0gX25ld1N0YXRlOwogICAgICAgIFN0YXRlQ2hhbmdlZChtX3N0YXRlKTsKICAgIH0KCiAgICAvLy8gQGRldiByZWNvcmRzIGFuIGludmVzdG1lbnQKICAgIGZ1bmN0aW9uIGludmVzdGVkKGFkZHJlc3MgX2ludmVzdG9yKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcGF5YWJsZQogICAgICAgIG9ubHlDb250cm9sbGVyCiAgICAgICAgcmVxdWlyZXNTdGF0ZShTdGF0ZS5HQVRIRVJJTkcpCiAgICB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgcmVxdWlyZSgwICE9IGFtb3VudCk7CiAgICAgICAgYXNzZXJ0KF9pbnZlc3RvciAhPSBtX2NvbnRyb2xsZXIpOwoKICAgICAgICAvLyByZWdpc3RlciBpbnZlc3RvcgogICAgICAgIGlmICgwID09IG1fd2VpQmFsYW5jZXNbX2ludmVzdG9yXSkKICAgICAgICAgICAgbV9pbnZlc3RvcnMucHVzaChfaW52ZXN0b3IpOwoKICAgICAgICAvLyByZWdpc3RlciBwYXltZW50CiAgICAgICAgdG90YWxJbnZlc3RlZCA9IHRvdGFsSW52ZXN0ZWQuYWRkKGFtb3VudCk7CiAgICAgICAgbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdID0gbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdLmFkZChhbW91bnQpOwoKICAgICAgICBJbnZlc3RlZChfaW52ZXN0b3IsIGFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2Ugb3duZXJzOiBzZW5kIGB2YWx1ZWAgb2YgZXRoZXIgdG8gYWRkcmVzcyBgdG9gLCBjYW4gYmUgY2FsbGVkIGlmIGNyb3dkc2FsZSBzdWNjZWVkZWQKICAgIC8vLyBAcGFyYW0gdG8gd2hlcmUgdG8gc2VuZCBldGhlcgogICAgLy8vIEBwYXJhbSB2YWx1ZSBhbW91bnQgb2Ygd2VpIHRvIHNlbmQKICAgIGZ1bmN0aW9uIHNlbmRFdGhlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgdmFsaWRBZGRyZXNzKHRvKQogICAgICAgIG9ubHltYW55b3duZXJzKHNoYTMobXNnLmRhdGEpKQogICAgICAgIHJlcXVpcmVzU3RhdGUoU3RhdGUuU1VDQ0VFREVEKQogICAgewogICAgICAgIHJlcXVpcmUodmFsdWUgPiAwICYmIHRoaXMuYmFsYW5jZSA+PSB2YWx1ZSk7CiAgICAgICAgdG8udHJhbnNmZXIodmFsdWUpOwogICAgICAgIEV0aGVyU2VudCh0bywgdmFsdWUpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHdpdGhkcmF3IGFjY3VtdWxhdGVkIGJhbGFuY2UsIGNhbGxlZCBieSBwYXllZSBpbiBjYXNlIGNyb3dkc2FsZSBmYWlsZWQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3UGF5bWVudHMoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgbm9uUmVlbnRyYW50CiAgICAgICAgcmVxdWlyZXNTdGF0ZShTdGF0ZS5SRUZVTkRJTkcpCiAgICB7CiAgICAgICAgYWRkcmVzcyBwYXllZSA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludDI1NiBwYXltZW50ID0gbV93ZWlCYWxhbmNlc1twYXllZV07CgogICAgICAgIHJlcXVpcmUocGF5bWVudCAhPSAwKTsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBwYXltZW50KTsKCiAgICAgICAgdG90YWxJbnZlc3RlZCA9IHRvdGFsSW52ZXN0ZWQuc3ViKHBheW1lbnQpOwogICAgICAgIG1fd2VpQmFsYW5jZXNbcGF5ZWVdID0gMDsKCiAgICAgICAgcGF5ZWUudHJhbnNmZXIocGF5bWVudCk7CiAgICAgICAgUmVmdW5kU2VudChwYXllZSwgcGF5bWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0SW52ZXN0b3JzQ291bnQoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7IHJldHVybiBtX2ludmVzdG9ycy5sZW5ndGg7IH0KCgogICAgLy8gRklFTERTCgogICAgLy8vIEBub3RpY2UgdG90YWwgYW1vdW50IG9mIGludmVzdG1lbnRzIGluIHdlaQogICAgdWludDI1NiBwdWJsaWMgdG90YWxJbnZlc3RlZDsKCiAgICAvLy8gQG5vdGljZSBzdGF0ZSBvZiB0aGUgcmVnaXN0cnkKICAgIFN0YXRlIHB1YmxpYyBtX3N0YXRlID0gU3RhdGUuR0FUSEVSSU5HOwoKICAgIC8vLyBAZGV2IGJhbGFuY2VzIG9mIGludmVzdG9ycyBpbiB3ZWkKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgbV93ZWlCYWxhbmNlczsKCiAgICAvLy8gQGRldiBsaXN0IG9mIHVuaXF1ZSBpbnZlc3RvcnMKICAgIGFkZHJlc3NbXSBwdWJsaWMgbV9pbnZlc3RvcnM7Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL0Z1bmRzUmVnaXN0cnkuc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovKioKICogQHRpdGxlIFN0b3JlcyBpbnZlc3RtZW50cyBpbiBGdW5kc1JlZ2lzdHJ5LgogKiBAYXV0aG9yIEVlbmFlCiAqLwpjb250cmFjdCBGdW5kc1JlZ2lzdHJ5V2FsbGV0Q29ubmVjdG9yIGlzIElJbnZlc3RtZW50c1dhbGxldENvbm5lY3RvciB7CgogICAgZnVuY3Rpb24gRnVuZHNSZWdpc3RyeVdhbGxldENvbm5lY3RvcihhZGRyZXNzW10gZnVuZE93bmVycywgdWludCBvd25lcnNTaWduYXR1cmVzKQogICAgewogICAgICAgIG1fZnVuZHNBZGRyZXNzID0gbmV3IEZ1bmRzUmVnaXN0cnkoZnVuZE93bmVycywgb3duZXJzU2lnbmF0dXJlcywgdGhpcyk7CiAgICB9CgogICAgLy8vIEBkZXYgcHJvY2VzcyBhbmQgZm9yd2FyZCBpbnZlc3RtZW50CiAgICBmdW5jdGlvbiBzdG9yZUludmVzdG1lbnQoYWRkcmVzcyBpbnZlc3RvciwgdWludCBwYXltZW50KSBpbnRlcm5hbAogICAgewogICAgICAgIG1fZnVuZHNBZGRyZXNzLmludmVzdGVkLnZhbHVlKHBheW1lbnQpKGludmVzdG9yKTsKICAgIH0KCiAgICAvLy8gQGRldiB0b3RhbCBpbnZlc3RtZW50cyBhbW91bnQgc3RvcmVkIHVzaW5nIHN0b3JlSW52ZXN0bWVudCgpCiAgICBmdW5jdGlvbiBnZXRUb3RhbEludmVzdG1lbnRzU3RvcmVkKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gbV9mdW5kc0FkZHJlc3MudG90YWxJbnZlc3RlZCgpOwogICAgfQoKICAgIC8vLyBAZGV2IGNhbGxlZCBpbiBjYXNlIGNyb3dkc2FsZSBzdWNjZWVkZWQKICAgIGZ1bmN0aW9uIHdjT25Dcm93ZHNhbGVTdWNjZXNzKCkgaW50ZXJuYWwgewogICAgICAgIG1fZnVuZHNBZGRyZXNzLmNoYW5nZVN0YXRlKEZ1bmRzUmVnaXN0cnkuU3RhdGUuU1VDQ0VFREVEKTsKICAgICAgICBtX2Z1bmRzQWRkcmVzcy5kZXRhY2hDb250cm9sbGVyKCk7CiAgICB9CgogICAgLy8vIEBkZXYgY2FsbGVkIGluIGNhc2UgY3Jvd2RzYWxlIGZhaWxlZAogICAgZnVuY3Rpb24gd2NPbkNyb3dkc2FsZUZhaWx1cmUoKSBpbnRlcm5hbCB7CiAgICAgICAgbV9mdW5kc0FkZHJlc3MuY2hhbmdlU3RhdGUoRnVuZHNSZWdpc3RyeS5TdGF0ZS5SRUZVTkRJTkcpOwogICAgICAgIG1fZnVuZHNBZGRyZXNzLmRldGFjaENvbnRyb2xsZXIoKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBhZGRyZXNzIG9mIHdhbGxldCB3aGljaCBzdG9yZXMgZnVuZHMKICAgIEZ1bmRzUmVnaXN0cnkgcHVibGljIG1fZnVuZHNBZGRyZXNzOwp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9jcm93ZHNhbGUvRnVuZHNSZWdpc3RyeVdhbGxldENvbm5lY3Rvci5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8vLyBAdGl0bGUgU3RvcmlxYSBwcmUtSUNPIGNvbnRyYWN0CmNvbnRyYWN0IFNUUVByZUlDTzIgaXMgU1RRUHJlSUNPQmFzZSwgRnVuZHNSZWdpc3RyeVdhbGxldENvbm5lY3RvciB7CgogICAgZnVuY3Rpb24gU1RRUHJlSUNPMihhZGRyZXNzIHRva2VuLCBhZGRyZXNzW10gZnVuZE93bmVycykKICAgICAgICBTVFFQcmVJQ09CYXNlKHRva2VuKQogICAgICAgIEZ1bmRzUmVnaXN0cnlXYWxsZXRDb25uZWN0b3IoZnVuZE93bmVycywgMikKICAgIHsKICAgICAgICByZXF1aXJlKDMgPT0gZnVuZE93bmVycy5sZW5ndGgpOwogICAgfQoKCiAgICAvLyBJTlRFUk5BTAoKICAgIGZ1bmN0aW9uIGdldFdlaUNvbGxlY3RlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGdldFRvdGFsSW52ZXN0bWVudHNTdG9yZWQoKS5hZGQoMjQwMSBldGhlciAvKiBwcmV2aW91cyBjcm93ZHNhbGVzICovKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBtaW5pbXVtIGFtb3VudCBvZiBmdW5kaW5nIHRvIGNvbnNpZGVyIGNyb3dkc2FsZSBhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBnZXRNaW5pbXVtRnVuZHMoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDM1MDAgZXRoZXI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbWF4aW11bSBpbnZlc3RtZW50cyB0byBiZSBhY2NlcHRlZCBkdXJpbmcgcHJlLUlDTwogICAgZnVuY3Rpb24gZ2V0TWF4aW11bUZ1bmRzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiA4NTAwIGV0aGVyOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHN0YXJ0IHRpbWUgb2YgdGhlIHByZS1JQ08KICAgIGZ1bmN0aW9uIGdldFN0YXJ0VGltZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gMTUwODM0NjAwMDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBlbmQgdGltZSBvZiB0aGUgcHJlLUlDTwogICAgZnVuY3Rpb24gZ2V0RW5kVGltZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZ2V0U3RhcnRUaW1lKCkgKyAoNSBkYXlzKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBwcmUtSUNPIGJvbnVzCiAgICBmdW5jdGlvbiBnZXRQcmVJQ09Cb251cygpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gMzU7CiAgICB9Cn0='.
	

]
