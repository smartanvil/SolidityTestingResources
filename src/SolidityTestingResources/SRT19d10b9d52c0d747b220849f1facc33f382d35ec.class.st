Class {
	#name : #SRT19d10b9d52c0d747b220849f1facc33f382d35ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT19d10b9d52c0d747b220849f1facc33f382d35ec >> base64 [
	^ ''.
	

]
