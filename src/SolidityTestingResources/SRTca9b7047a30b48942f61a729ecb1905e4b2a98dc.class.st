Class {
	#name : #SRTca9b7047a30b48942f61a729ecb1905e4b2a98dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca9b7047a30b48942f61a729ecb1905e4b2a98dc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBUaWxlcyB7CgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTlVNX1RJTEVTID0gNjQ7CiAgICB1aW50IGNvbnN0YW50IFNJREVfTEVOR1RIID0gODsKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBTVEFSVElOR19HQU1FX05VTUJFUiA9IDE7CiAgICB1aW50IHB1YmxpYyBERUZBVUxUX0dBTUVfQ09TVCA9IDUwMDAwMDAwMDAwMDAwMDA7CgogICAgYWRkcmVzcyBwcml2YXRlIG93bmVyOwoKICAgIHVpbnQgcHVibGljIGN1cnJlbnRHYW1lTnVtYmVyOwogICAgdWludCBwdWJsaWMgY3VycmVudEdhbWVCYWxhbmNlOwogICAgdWludCBwdWJsaWMgbnVtVGlsZXNDbGFpbWVkOwogICAgVGlsZVs4XVs4XSBwdWJsaWMgdGlsZXM7CiAgICBib29sIHB1YmxpYyBnYW1lU3RvcHBlZDsKICAgIHVpbnQgcHVibGljIGdhbWVFYXJuaW5nczsKICAgIGJvb2wgcHVibGljIHdpbGxDaGFuZ2VDb3N0OwogICAgdWludCBwdWJsaWMgY3VycmVudEdhbWVDb3N0OwogICAgdWludCBwdWJsaWMgbmV4dEdhbWVDb3N0OwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHBlbmRpbmdXaXRoZHJhd2FsczsKICAgIG1hcHBpbmcgKHVpbnQgPT4gYWRkcmVzcykgcHVibGljIGdhbWVUb1dpbm5lcjsKCiAgICBzdHJ1Y3QgVGlsZSB7CiAgICAgICAgdWludCBnYW1lQ2xhaW1lZDsKICAgICAgICBhZGRyZXNzIGNsYWltZWRCeTsKICAgIH0KCiAgICBldmVudCBHYW1lV29uKHVpbnQgaW5kZXhlZCBnYW1lTnVtYmVyLCBhZGRyZXNzIGluZGV4ZWQgd2lubmVyKTsKICAgIGV2ZW50IFRpbGVDbGFpbWVkKHVpbnQgaW5kZXhlZCBnYW1lTnVtYmVyLCB1aW50IGluZGV4ZWQgeENvb3JkLCB1aW50IGluZGV4ZWQgeUNvb3JkLCBhZGRyZXNzIGNsYWltZWRCeSk7CiAgICBldmVudCBXaW5uaW5nc0NsYWltZWQoYWRkcmVzcyBpbmRleGVkIGNsYWltZWRCeSwgdWludCBpbmRleGVkIGFtb3VudENsYWltZWQpOwogICAgZXZlbnQgRmFpbGVkVG9DbGFpbShhZGRyZXNzIGluZGV4ZWQgY2xhaW1lZEJ5LCB1aW50IGluZGV4ZWQgYW1vdW50VG9DbGFpbSk7CiAgICBldmVudCBQcmludFdpbm5pbmdJbmZvKGJ5dGVzMzIgaGFzaCwgdWludCB4Q29vcmQsIHVpbnQgeUNvb3JkKTsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGdhbWVSdW5uaW5nKCkgewogICAgICAgIHJlcXVpcmUoIWdhbWVTdG9wcGVkKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGdhbWVOb3RSdW5uaW5nKCkgewogICAgICAgIHJlcXVpcmUoZ2FtZVN0b3BwZWQgPT0gdHJ1ZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBUaWxlcygpIHBheWFibGUgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBjdXJyZW50R2FtZU51bWJlciA9IFNUQVJUSU5HX0dBTUVfTlVNQkVSOwogICAgICAgIGN1cnJlbnRHYW1lQ29zdCA9IERFRkFVTFRfR0FNRV9DT1NUOwogICAgICAgIG51bVRpbGVzQ2xhaW1lZCA9IDA7CiAgICAgICAgZ2FtZVN0b3BwZWQgPSBmYWxzZTsKICAgICAgICBnYW1lRWFybmluZ3MgPSAwOwogICAgICAgIHdpbGxDaGFuZ2VDb3N0ID0gZmFsc2U7CiAgICAgICAgbmV4dEdhbWVDb3N0ID0gREVGQVVMVF9HQU1FX0NPU1Q7CiAgICB9CgogICAgZnVuY3Rpb24gY2FuY2VsQ29udHJhY3QoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGdhbWVTdG9wcGVkID0gdHJ1ZTsKICAgICAgICByZWZ1bmRUaWxlcygpOwogICAgICAgIHJlZnVuZFdpbm5pbmdzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmlnaHRDb29yZGluYXRlKGJ5dGUgaW5wdXQpIHJldHVybnModWludCkgewogICAgICAgIGJ5dGUgdmFsID0gaW5wdXQgJiBieXRlKDE1KTsKICAgICAgICByZXR1cm4gdWludCh2YWwpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldExlZnRDb29yZGluYXRlKGJ5dGUgaW5wdXQpIHJldHVybnModWludCkgewogICAgICAgIGJ5dGUgdmFsID0gaW5wdXQgPj4gNDsKICAgICAgICByZXR1cm4gdWludCh2YWwpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRldGVybWluZVdpbm5lcigpIHByaXZhdGUgewogICAgICAgIGJ5dGVzMzIgd2lubmluZ0hhc2ggPSBibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gMSk7CiAgICAgICAgYnl0ZSB3aW5uaW5nUGFpciA9IHdpbm5pbmdIYXNoWzMxXTsKICAgICAgICB1aW50MjU2IHdpbm5pbmdYID0gZ2V0UmlnaHRDb29yZGluYXRlKHdpbm5pbmdQYWlyKSAlIDg7CiAgICAgICAgdWludDI1NiB3aW5uaW5nWSA9IGdldExlZnRDb29yZGluYXRlKHdpbm5pbmdQYWlyKSAlIDg7CiAgICAgICAgYWRkcmVzcyB3aW5uZXIgPSB0aWxlc1t3aW5uaW5nWF1bd2lubmluZ1ldLmNsYWltZWRCeTsKICAgICAgICBQcmludFdpbm5pbmdJbmZvKHdpbm5pbmdIYXNoLCB3aW5uaW5nWCwgd2lubmluZ1kpOwogICAgICAgIEdhbWVXb24oY3VycmVudEdhbWVOdW1iZXIsIHdpbm5lcik7CiAgICAgICAgcmVzZXRHYW1lKHdpbm5lcik7CiAgICB9CgogICAgZnVuY3Rpb24gY2xhaW1UaWxlKHVpbnQgeENvb3JkLCB1aW50IHlDb29yZCwgdWludCBnYW1lTnVtYmVyKSBnYW1lUnVubmluZyBwYXlhYmxlIHsKICAgICAgICBpZiAoZ2FtZU51bWJlciAhPSBjdXJyZW50R2FtZU51bWJlciB8fCB0aWxlc1t4Q29vcmRdW3lDb29yZF0uZ2FtZUNsYWltZWQgPT0gY3VycmVudEdhbWVOdW1iZXIpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID09IGN1cnJlbnRHYW1lQ29zdCk7CgogICAgICAgIGN1cnJlbnRHYW1lQmFsYW5jZSArPSBtc2cudmFsdWU7CiAgICAgICAgdGlsZXNbeENvb3JkXVt5Q29vcmRdID0gVGlsZShjdXJyZW50R2FtZU51bWJlciwgbXNnLnNlbmRlcik7CiAgICAgICAgVGlsZUNsYWltZWQoY3VycmVudEdhbWVOdW1iZXIsIHhDb29yZCwgeUNvb3JkLCBtc2cuc2VuZGVyKTsKICAgICAgICBudW1UaWxlc0NsYWltZWQgKz0gMTsKICAgICAgICBpZiAobnVtVGlsZXNDbGFpbWVkID09IE5VTV9USUxFUykgewogICAgICAgICAgICBkZXRlcm1pbmVXaW5uZXIoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXRHYW1lKGFkZHJlc3Mgd2lubmVyKSBwcml2YXRlIHsKICAgICAgICB1aW50IHdpbm5pbmdBbW91bnQgPSB1aW50KGN1cnJlbnRHYW1lQmFsYW5jZSkgKiB1aW50KDkpIC8gdWludCgxMCk7CiAgICAgICAgdWludCByZW1haW5kZXIgPSBjdXJyZW50R2FtZUJhbGFuY2UgLSB3aW5uaW5nQW1vdW50OwogICAgICAgIGN1cnJlbnRHYW1lQmFsYW5jZSA9IDA7CgogICAgICAgIGdhbWVUb1dpbm5lcltjdXJyZW50R2FtZU51bWJlcl0gPSB3aW5uZXI7CiAgICAgICAgY3VycmVudEdhbWVOdW1iZXIrKzsKICAgICAgICBudW1UaWxlc0NsYWltZWQgPSAwOwoKICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbd2lubmVyXSArPSB3aW5uaW5nQW1vdW50OwogICAgICAgIGdhbWVFYXJuaW5ncyArPSByZW1haW5kZXI7CgogICAgICAgIGlmICh3aWxsQ2hhbmdlQ29zdCkgewogICAgICAgICAgICBjdXJyZW50R2FtZUNvc3QgPSBuZXh0R2FtZUNvc3Q7CiAgICAgICAgICAgIHdpbGxDaGFuZ2VDb3N0ID0gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZFRpbGVzKCkgcHJpdmF0ZSB7CiAgICAgICAgVGlsZSBtZW1vcnkgY3VyclRpbGU7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgU0lERV9MRU5HVEg7IGkrKykgewogICAgICAgICAgICBmb3IgKHVpbnQgaiA9IDA7IGogPCBTSURFX0xFTkdUSDsgaisrKSB7CiAgICAgICAgICAgICAgICBjdXJyVGlsZSA9IHRpbGVzW2ldW2pdOwogICAgICAgICAgICAgICAgaWYgKGN1cnJUaWxlLmdhbWVDbGFpbWVkID09IGN1cnJlbnRHYW1lTnVtYmVyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJUaWxlLmNsYWltZWRCeS5zZW5kKGN1cnJlbnRHYW1lQ29zdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGlsZXNbaV1bal0gPSBUaWxlKDAsIDB4MCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZFdpbm5pbmdzKCkgcHJpdmF0ZSB7CiAgICAgICAgYWRkcmVzcyBjdXJyQWRkcmVzczsKICAgICAgICB1aW50IGN1cnJBbW91bnQ7CiAgICAgICAgZm9yICh1aW50IGkgPSBTVEFSVElOR19HQU1FX05VTUJFUjsgaSA8IGN1cnJlbnRHYW1lTnVtYmVyOyBpKyspIHsKICAgICAgICAgICAgY3VyckFkZHJlc3MgPSBnYW1lVG9XaW5uZXJbaV07CiAgICAgICAgICAgIGN1cnJBbW91bnQgPSBwZW5kaW5nV2l0aGRyYXdhbHNbY3VyckFkZHJlc3NdOwogICAgICAgICAgICBpZiAoY3VyckFtb3VudCAhPSAwKSB7CiAgICAgICAgICAgICAgICBpZiAoY3VyckFkZHJlc3Muc2VuZChjdXJyQW1vdW50KSkgewogICAgICAgICAgICAgICAgICAgIHBlbmRpbmdXaXRoZHJhd2Fsc1tjdXJyQWRkcmVzc10gPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNsYWltV2lubmluZ3MoKSB7CiAgICAgICAgaWYgKHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSAhPSAwKSB7CiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQocGVuZGluZ1dpdGhkcmF3YWxzW21zZy5zZW5kZXJdKSkgewogICAgICAgICAgICAgICAgV2lubmluZ3NDbGFpbWVkKG1zZy5zZW5kZXIsIHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgRmFpbGVkVG9DbGFpbShtc2cuc2VuZGVyLCBwZW5kaW5nV2l0aGRyYXdhbHNbbXNnLnNlbmRlcl0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUdhbWVDb3N0KHVpbnQgbmV3R2FtZUNvc3QpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG5ld0dhbWVDb3N0ID4gMCkgewogICAgICAgICAgICBuZXh0R2FtZUNvc3QgPSBuZXdHYW1lQ29zdDsKICAgICAgICAgICAgd2lsbENoYW5nZUNvc3QgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbU93bmVyc0Vhcm5pbmdzKCkgb25seU93bmVyIHsKICAgICAgICBpZiAoZ2FtZUVhcm5pbmdzICE9IDApIHsKICAgICAgICAgICAgaWYgKG93bmVyLnNlbmQoZ2FtZUVhcm5pbmdzKSkgewogICAgICAgICAgICAgICAgZ2FtZUVhcm5pbmdzID0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ=='.
	

]
