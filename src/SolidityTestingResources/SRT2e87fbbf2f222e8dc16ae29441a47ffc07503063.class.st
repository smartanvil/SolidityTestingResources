Class {
	#name : #SRT2e87fbbf2f222e8dc16ae29441a47ffc07503063,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e87fbbf2f222e8dc16ae29441a47ffc07503063 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXAoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlNVLlNRVUFSRVMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5CbG9ja2NoYWluLnJlbnRhYmxlLmFkdmVydGlzaW5nLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgoqIEZpcnN0LCBJIGp1c3Qgd2FudCB0byBzYXkgd2UgYXJlIHNvIGV4Y2l0ZWQgYW5kIGh1bWJsZWQgdG8gZ2V0IHRoaXMgZmFyIGFuZCAgKgoqIHRoYXQgeW91J3JlIGV2ZW4gcmVhZGluZyB0aGlzLiBTbyB0aGFuayB5b3UhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqIFRoaXMgZmlsZSBpcyBvcmdhbml6ZWQgaW50byBtdWx0aXBsZSBjb250cmFjdHMgdGhhdCBzZXBhcmF0ZSBmdW5jdGlvbmFsaXR5ICAgKgoqIGludG8gbG9naWNhbCBwYXJ0cy4gVGhlIGRlcGxveWVkIGNvbnRyYWN0LCBTdU1haW4sIGlzIGF0IHRoZSBib3R0b20gYW5kICAgICAgKgoqIGluY2x1ZGVzIHRoZSByZXN0IG9mIHRoZSBmaWxlIHVzaW5nIGluaGVyaXRhbmNlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAtIEVSQzE2NSwgRVJDNzIxOiBUaGVzZSBpbnRlcmZhY2VzIGZvbGxvdyB0aGUgb2ZmaWNpYWwgRUlQcyAgICAgICAgICAgICAgICAgKgoqICAtIEFjY2Vzc0NvbnRyb2w6IEEgcmV1c2FibGUgQ0VPL0NGTy9DT08gYWNjZXNzIG1vZGVsICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAtIFB1Ymxpc2hJbnRlcmZhY2VzOiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBFUkMxNjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAtIFN1TkZUOiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBFUkM3MjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqICAtIFN1T3BlcmF0aW9uOiBUaGUgYWN0dWFsIHNxdWFyZSBkYXRhIGFuZCB0aGUgcGVyc29uYWxpemUgZnVuY3Rpb24gICAgICAgICAgKgoqICAtIFN1UHJvbW8sIFN1VmVuZGluZzogSG93IHdlIHNlbGwgb3IgZ3JhbnQgc3F1YXJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgKgoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlN1LiYuV2lsbGlhbS5FbnRyaWtlbi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgoqLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4oYykgMjAxOC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKgpcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyogQWNjZXNzQ29udHJvbC5zb2wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8vLyBAdGl0bGUgUmV1c2FibGUgdGhyZWUtcm9sZSBhY2Nlc3MgY29udHJvbCBpbnNwaXJlZCBieSBDcnlwdG9LaXR0aWVzCi8vLyBAYXV0aG9yIFdpbGxpYW0gRW50cmlrZW4gKGh0dHBzOi8vcGhvci5uZXQpCi8vLyBAZGV2IEtlZXAgdGhlIENFTyB3YWxsZXQgc3RvcmVkIG9mZmxpbmUsIEkgd2FybmVkIHlvdQpjb250cmFjdCBBY2Nlc3NDb250cm9sIHsKICAgIC8vLyBAbm90aWNlIFRoZSBhY2NvdW50IHRoYXQgY2FuIG9ubHkgcmVhc3NpZ24gZXhlY3V0aXZlIGFjY291bnRzCiAgICBhZGRyZXNzIHB1YmxpYyBleGVjdXRpdmVPZmZpY2VyQWRkcmVzczsKCiAgICAvLy8gQG5vdGljZSBUaGUgYWNjb3VudCB0aGF0IGNhbiBjb2xsZWN0IGZ1bmRzIGZyb20gdGhpcyBjb250cmFjdAogICAgYWRkcmVzcyBwdWJsaWMgZmluYW5jaWFsT2ZmaWNlckFkZHJlc3M7CgogICAgLy8vIEBub3RpY2UgVGhlIGFjY291bnQgd2l0aCBhZG1pbmlzdHJhdGl2ZSBjb250cm9sIG9mIHRoaXMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIG9wZXJhdGluZ09mZmljZXJBZGRyZXNzOwoKICAgIGZ1bmN0aW9uIEFjY2Vzc0NvbnRyb2woKSBpbnRlcm5hbCB7CiAgICAgICAgZXhlY3V0aXZlT2ZmaWNlckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vLyBAZGV2IE9ubHkgYWxsb3dlZCBieSBleGVjdXRpdmUgb2ZmaWNlcgogICAgbW9kaWZpZXIgb25seUV4ZWN1dGl2ZU9mZmljZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGV4ZWN1dGl2ZU9mZmljZXJBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IE9ubHkgYWxsb3dlZCBieSBmaW5hbmNpYWwgb2ZmaWNlcgogICAgbW9kaWZpZXIgb25seUZpbmFuY2lhbE9mZmljZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZpbmFuY2lhbE9mZmljZXJBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IE9ubHkgYWxsb3dlZCBieSBvcGVyYXRpbmcgb2ZmaWNlcgogICAgbW9kaWZpZXIgb25seU9wZXJhdGluZ09mZmljZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG9wZXJhdGluZ09mZmljZXJBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlYXNzaWduIHRoZSBleGVjdXRpdmUgb2ZmaWNlciByb2xlCiAgICAvLy8gQHBhcmFtIF9leGVjdXRpdmVPZmZpY2VyQWRkcmVzcyBuZXcgb2ZmaWNlciBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXRFeGVjdXRpdmVPZmZpY2VyKGFkZHJlc3MgX2V4ZWN1dGl2ZU9mZmljZXJBZGRyZXNzKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seUV4ZWN1dGl2ZU9mZmljZXIKICAgIHsKICAgICAgICByZXF1aXJlKF9leGVjdXRpdmVPZmZpY2VyQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICBleGVjdXRpdmVPZmZpY2VyQWRkcmVzcyA9IF9leGVjdXRpdmVPZmZpY2VyQWRkcmVzczsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZWFzc2lnbiB0aGUgZmluYW5jaWFsIG9mZmljZXIgcm9sZQogICAgLy8vIEBwYXJhbSBfZmluYW5jaWFsT2ZmaWNlckFkZHJlc3MgbmV3IG9mZmljZXIgYWRkcmVzcwogICAgZnVuY3Rpb24gc2V0RmluYW5jaWFsT2ZmaWNlcihhZGRyZXNzIF9maW5hbmNpYWxPZmZpY2VyQWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlFeGVjdXRpdmVPZmZpY2VyCiAgICB7CiAgICAgICAgcmVxdWlyZShfZmluYW5jaWFsT2ZmaWNlckFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgZmluYW5jaWFsT2ZmaWNlckFkZHJlc3MgPSBfZmluYW5jaWFsT2ZmaWNlckFkZHJlc3M7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmVhc3NpZ24gdGhlIG9wZXJhdGluZyBvZmZpY2VyIHJvbGUKICAgIC8vLyBAcGFyYW0gX29wZXJhdGluZ09mZmljZXJBZGRyZXNzIG5ldyBvZmZpY2VyIGFkZHJlc3MKICAgIGZ1bmN0aW9uIHNldE9wZXJhdGluZ09mZmljZXIoYWRkcmVzcyBfb3BlcmF0aW5nT2ZmaWNlckFkZHJlc3MpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5RXhlY3V0aXZlT2ZmaWNlcgogICAgewogICAgICAgIHJlcXVpcmUoX29wZXJhdGluZ09mZmljZXJBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIG9wZXJhdGluZ09mZmljZXJBZGRyZXNzID0gX29wZXJhdGluZ09mZmljZXJBZGRyZXNzOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENvbGxlY3QgZnVuZHMgZnJvbSB0aGlzIGNvbnRyYWN0CiAgICBmdW5jdGlvbiB3aXRoZHJhd0JhbGFuY2UoKSBleHRlcm5hbCBvbmx5RmluYW5jaWFsT2ZmaWNlciB7CiAgICAgICAgZmluYW5jaWFsT2ZmaWNlckFkZHJlc3MudHJhbnNmZXIoYWRkcmVzcyh0aGlzKS5iYWxhbmNlKTsKICAgIH0KfQoKLyogRVJDMTY1LnNvbCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8vLyBAdGl0bGUgRVJDLTE2NSBTdGFuZGFyZCBJbnRlcmZhY2UgRGV0ZWN0aW9uCi8vLyBAZGV2IFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9ibG9iL21hc3Rlci9FSVBTL2VpcC0xNjUubWQKaW50ZXJmYWNlIEVSQzE2NSB7CiAgICBmdW5jdGlvbiBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgaW50ZXJmYWNlSUQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCk7Cn0KCi8qIEVSQzcyMS5zb2wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIEVSQy03MjEgTm9uLUZ1bmdpYmxlIFRva2VuIFN0YW5kYXJkCi8vLyBAZGV2IFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9ibG9iL21hc3Rlci9FSVBTL2VpcC03MjEubWQKY29udHJhY3QgRVJDNzIxIGlzIEVSQzE2NSB7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9hcHByb3ZlZCwgdWludDI1NiBfdG9rZW5JZCk7CiAgICBldmVudCBBcHByb3ZhbEZvckFsbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX29wZXJhdG9yLCBib29sIF9hcHByb3ZlZCk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkLCBieXRlcyBkYXRhKSBleHRlcm5hbCBwYXlhYmxlOwogICAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgcGF5YWJsZTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgcGF5YWJsZTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHBheWFibGU7CiAgICBmdW5jdGlvbiBzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzIF9vcGVyYXRvciwgYm9vbCBfYXBwcm92ZWQpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gZ2V0QXBwcm92ZWQodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzKTsKICAgIGZ1bmN0aW9uIGlzQXBwcm92ZWRGb3JBbGwoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX29wZXJhdG9yKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpOwp9CgovLy8gQHRpdGxlIEVSQy03MjEgTm9uLUZ1bmdpYmxlIFRva2VuIFN0YW5kYXJkCmludGVyZmFjZSBFUkM3MjFUb2tlblJlY2VpdmVyIHsKCWZ1bmN0aW9uIG9uRVJDNzIxUmVjZWl2ZWQoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdG9rZW5JZCwgYnl0ZXMgZGF0YSkgZXh0ZXJuYWwgcmV0dXJucyhieXRlczQpOwp9CgovLy8gQHRpdGxlIEVSQy03MjEgTm9uLUZ1bmdpYmxlIFRva2VuIFN0YW5kYXJkLCBvcHRpb25hbCBtZXRhZGF0YSBleHRlbnNpb24KaW50ZXJmYWNlIEVSQzcyMU1ldGFkYXRhIC8qIGlzIEVSQzcyMSAqLyB7CiAgICBmdW5jdGlvbiBuYW1lKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcgX25hbWUpOwogICAgZnVuY3Rpb24gc3ltYm9sKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCk7CiAgICBmdW5jdGlvbiB0b2tlblVSSSh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHN0cmluZyk7Cn0KCi8vLyBAdGl0bGUgRVJDLTcyMSBOb24tRnVuZ2libGUgVG9rZW4gU3RhbmRhcmQsIG9wdGlvbmFsIGVudW1lcmF0aW9uIGV4dGVuc2lvbgppbnRlcmZhY2UgRVJDNzIxRW51bWVyYWJsZSAvKiBpcyBFUkM3MjEgKi8gewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdG9rZW5CeUluZGV4KHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdG9rZW5PZk93bmVyQnlJbmRleChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfaW5kZXgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1Nik7Cn0KCi8qIFB1Ymxpc2hJbnRlcmZhY2VzLnNvbCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIEEgcmV1c2FibGUgY29udHJhY3QgdG8gY29tcGx5IHdpdGggRVJDLTE2NQovLy8gQGF1dGhvciBXaWxsaWFtIEVudHJpa2VuIChodHRwczovL3Bob3IubmV0KQpjb250cmFjdCBQdWJsaXNoSW50ZXJmYWNlcyBpcyBFUkMxNjUgewogICAgLy8vIEBkZXYgRXZlcnkgaW50ZXJmYWNlIHRoYXQgd2Ugc3VwcG9ydAogICAgbWFwcGluZyhieXRlczQgPT4gYm9vbCkgaW50ZXJuYWwgc3VwcG9ydGVkSW50ZXJmYWNlczsKCiAgICBmdW5jdGlvbiBQdWJsaXNoSW50ZXJmYWNlcygpIGludGVybmFsIHsKICAgICAgICBzdXBwb3J0ZWRJbnRlcmZhY2VzWzB4MDFmZmM5YTddID0gdHJ1ZTsgLy8gRVJDMTY1CiAgICB9CgogICAgLy8vIEBub3RpY2UgUXVlcnkgaWYgYSBjb250cmFjdCBpbXBsZW1lbnRzIGFuIGludGVyZmFjZQogICAgLy8vIEBwYXJhbSBpbnRlcmZhY2VJRCBUaGUgaW50ZXJmYWNlIGlkZW50aWZpZXIsIGFzIHNwZWNpZmllZCBpbiBFUkMtMTY1CiAgICAvLy8gQGRldiBJbnRlcmZhY2UgaWRlbnRpZmljYXRpb24gaXMgc3BlY2lmaWVkIGluIEVSQy0xNjUuIFRoaXMgZnVuY3Rpb24KICAgIC8vLyAgdXNlcyBsZXNzIHRoYW4gMzAsMDAwIGdhcy4KICAgIC8vLyBAcmV0dXJuIGB0cnVlYCBpZiB0aGUgY29udHJhY3QgaW1wbGVtZW50cyBgaW50ZXJmYWNlSURgIGFuZAogICAgLy8vICBgaW50ZXJmYWNlSURgIGlzIG5vdCAweGZmZmZmZmZmLCBgZmFsc2VgIG90aGVyd2lzZQogICAgZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IGludGVyZmFjZUlEKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwcG9ydGVkSW50ZXJmYWNlc1tpbnRlcmZhY2VJRF0gJiYgKGludGVyZmFjZUlEICE9IDB4ZmZmZmZmZmYpOwogICAgfQp9CgovKiBTdU5GVC5zb2wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLy8vIEB0aXRsZSBDb21wbGlhbmNlIHdpdGggRVJDLTcyMSBmb3IgU3UgU3F1YXJlcwovLy8gQGRldiBUaGlzIGltcGxlbWVudGF0aW9uIGFzc3VtZXM6Ci8vLyAgLSBBIGZpeGVkIHN1cHBseSBvZiBORlRzLCBjYW5ub3QgbWludCBvciBidXJuCi8vLyAgLSBpZHMgYXJlIG51bWJlcmVkIHNlcXVlbnRpYWxseSBzdGFydGluZyBhdCAxLgovLy8gIC0gTkZUcyBhcmUgaW5pdGlhbGx5IGFzc2lnbmVkIHRvIHRoaXMgY29udHJhY3QKLy8vICAtIFRoaXMgY29udHJhY3QgZG9lcyBub3QgZXh0ZXJuYWxseSBjYWxsIGl0cyBvd24gZnVuY3Rpb25zCi8vLyBAYXV0aG9yIFdpbGxpYW0gRW50cmlrZW4gKGh0dHBzOi8vcGhvci5uZXQpCmNvbnRyYWN0IFN1TkZUIGlzIEVSQzE2NSwgRVJDNzIxLCBFUkM3MjFNZXRhZGF0YSwgRVJDNzIxRW51bWVyYWJsZSwgUHVibGlzaEludGVyZmFjZXMgewogICAgLy8vIEBkZXYgVGhlIGF1dGhvcml6ZWQgYWRkcmVzcyBmb3IgZWFjaCBORlQKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgaW50ZXJuYWwgdG9rZW5BcHByb3ZhbHM7CgogICAgLy8vIEBkZXYgVGhlIGF1dGhvcml6ZWQgb3BlcmF0b3JzIGZvciBlYWNoIGFkZHJlc3MKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSkgaW50ZXJuYWwgb3BlcmF0b3JBcHByb3ZhbHM7CgogICAgLy8vIEBkZXYgR3VhcmFudGVlcyBtc2cuc2VuZGVyIGlzIHRoZSBvd25lciBvZiBfdG9rZW5JZAogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgdG9rZW4gdG8gdmFsaWRhdGUgYmVsb25ncyB0byBtc2cuc2VuZGVyCiAgICBtb2RpZmllciBvbmx5T3duZXJPZih1aW50MjU2IF90b2tlbklkKSB7CiAgICAgICAgYWRkcmVzcyBvd25lciA9IF90b2tlbk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbX3Rva2VuSWRdOwogICAgICAgIC8vIGFzc2VydChtc2cuc2VuZGVyICE9IGFkZHJlc3ModGhpcykpCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBtdXN0QmVPd25lZEJ5VGhpc0NvbnRyYWN0KHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgICAgICByZXF1aXJlKF90b2tlbklkID49IDEgJiYgX3Rva2VuSWQgPD0gVE9UQUxfU1VQUExZKTsKICAgICAgICBhZGRyZXNzIG93bmVyID0gX3Rva2VuT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShvd25lciA9PSBhZGRyZXNzKDApIHx8IG93bmVyID09IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIGNhbk9wZXJhdGUodWludDI1NiBfdG9rZW5JZCkgewogICAgICAgIC8vIGFzc2VydChtc2cuc2VuZGVyICE9IGFkZHJlc3ModGhpcykpCiAgICAgICAgYWRkcmVzcyBvd25lciA9IF90b2tlbk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbX3Rva2VuSWRdOwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBvcGVyYXRvckFwcHJvdmFsc1tvd25lcl1bbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIGNhblRyYW5zZmVyKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgICAgICAvLyBhc3NlcnQobXNnLnNlbmRlciAhPSBhZGRyZXNzKHRoaXMpKQogICAgICAgIGFkZHJlc3Mgb3duZXIgPSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgCiAgICAgICAgICBtc2cuc2VuZGVyID09IHRva2VuQXBwcm92YWxzW190b2tlbklkXSB8fCAKICAgICAgICAgIG9wZXJhdG9yQXBwcm92YWxzW21zZy5zZW5kZXJdW21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBtdXN0QmVWYWxpZFRva2VuKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgICAgICByZXF1aXJlKF90b2tlbklkID49IDEgJiYgX3Rva2VuSWQgPD0gVE9UQUxfU1VQUExZKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvLy8gQGRldiBUaGlzIGVtaXRzIHdoZW4gb3duZXJzaGlwIG9mIGFueSBORlQgY2hhbmdlcyBieSBhbnkgbWVjaGFuaXNtLgogICAgLy8vICBUaGlzIGV2ZW50IGVtaXRzIHdoZW4gTkZUcyBhcmUgY3JlYXRlZCAoYGZyb21gID09IDApIGFuZCBkZXN0cm95ZWQKICAgIC8vLyAgKGB0b2AgPT0gMCkuIEV4Y2VwdGlvbjogZHVyaW5nIGNvbnRyYWN0IGNyZWF0aW9uLCBhbnkgbnVtYmVyIG9mIE5GVHMKICAgIC8vLyAgbWF5IGJlIGNyZWF0ZWQgYW5kIGFzc2lnbmVkIHdpdGhvdXQgZW1pdHRpbmcgVHJhbnNmZXIuIEF0IHRoZSB0aW1lIG9mCiAgICAvLy8gIGFueSB0cmFuc2ZlciwgdGhlIGFwcHJvdmVkIGFkZHJlc3MgZm9yIHRoYXQgTkZUIChpZiBhbnkpIGlzIHJlc2V0IHRvIG5vbmUuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpOwoKICAgIC8vLyBAZGV2IFRoaXMgZW1pdHMgd2hlbiB0aGUgYXBwcm92ZWQgYWRkcmVzcyBmb3IgYW4gTkZUIGlzIGNoYW5nZWQgb3IKICAgIC8vLyAgcmVhZmZpcm1lZC4gVGhlIHplcm8gYWRkcmVzcyBpbmRpY2F0ZXMgdGhlcmUgaXMgbm8gYXBwcm92ZWQgYWRkcmVzcy4KICAgIC8vLyAgV2hlbiBhIFRyYW5zZmVyIGV2ZW50IGVtaXRzLCB0aGlzIGFsc28gaW5kaWNhdGVzIHRoYXQgdGhlIGFwcHJvdmVkCiAgICAvLy8gIGFkZHJlc3MgZm9yIHRoYXQgTkZUIChpZiBhbnkpIGlzIHJlc2V0IHRvIG5vbmUuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX2FwcHJvdmVkLCB1aW50MjU2IF90b2tlbklkKTsKCiAgICAvLy8gQGRldiBUaGlzIGVtaXRzIHdoZW4gYW4gb3BlcmF0b3IgaXMgZW5hYmxlZCBvciBkaXNhYmxlZCBmb3IgYW4gb3duZXIuCiAgICAvLy8gIFRoZSBvcGVyYXRvciBjYW4gbWFuYWdlIGFsbCBORlRzIG9mIHRoZSBvd25lci4KICAgIGV2ZW50IEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfb3BlcmF0b3IsIGJvb2wgX2FwcHJvdmVkKTsKCiAgICAvLy8gQG5vdGljZSBDb3VudCBhbGwgTkZUcyBhc3NpZ25lZCB0byBhbiBvd25lcgogICAgLy8vIEBkZXYgTkZUcyBhc3NpZ25lZCB0byB0aGUgemVybyBhZGRyZXNzIGFyZSBjb25zaWRlcmVkIGludmFsaWQsIGFuZCB0aGlzCiAgICAvLy8gIGZ1bmN0aW9uIHRocm93cyBmb3IgcXVlcmllcyBhYm91dCB0aGUgemVybyBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQW4gYWRkcmVzcyBmb3Igd2hvbSB0byBxdWVyeSB0aGUgYmFsYW5jZQogICAgLy8vIEByZXR1cm4gVGhlIG51bWJlciBvZiBORlRzIG93bmVkIGJ5IGBfb3duZXJgLCBwb3NzaWJseSB6ZXJvCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJlcXVpcmUoX293bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJldHVybiBfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW19vd25lcl0ubGVuZ3RoOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEZpbmQgdGhlIG93bmVyIG9mIGFuIE5GVAogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgaWRlbnRpZmllciBmb3IgYW4gTkZUCiAgICAvLy8gQGRldiBORlRzIGFzc2lnbmVkIHRvIHplcm8gYWRkcmVzcyBhcmUgY29uc2lkZXJlZCBpbnZhbGlkLCBhbmQgcXVlcmllcwogICAgLy8vICBhYm91dCB0aGVtIGRvIHRocm93LgogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIHRoZSBORlQKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICB2aWV3CiAgICAgICAgbXVzdEJlVmFsaWRUb2tlbihfdG9rZW5JZCkKICAgICAgICByZXR1cm5zIChhZGRyZXNzIF9vd25lcikKICAgIHsKICAgICAgICBfb3duZXIgPSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXTsKICAgICAgICAvLyBIYW5kbGUgc3Vic3RpdHV0aW9ucwogICAgICAgIGlmIChfb3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBfb3duZXIgPSBhZGRyZXNzKHRoaXMpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiBhbiBORlQgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyIGFkZHJlc3MKICAgIC8vLyBAZGV2IFRocm93cyB1bmxlc3MgYG1zZy5zZW5kZXJgIGlzIHRoZSBjdXJyZW50IG93bmVyLCBhbiBhdXRob3JpemVkCiAgICAvLy8gIG9wZXJhdG9yLCBvciB0aGUgYXBwcm92ZWQgYWRkcmVzcyBmb3IgdGhpcyBORlQuIFRocm93cyBpZiBgX2Zyb21gIGlzCiAgICAvLy8gIG5vdCB0aGUgY3VycmVudCBvd25lci4gVGhyb3dzIGlmIGBfdG9gIGlzIHRoZSB6ZXJvIGFkZHJlc3MuIFRocm93cyBpZgogICAgLy8vICBgX3Rva2VuSWRgIGlzIG5vdCBhIHZhbGlkIE5GVC4gV2hlbiB0cmFuc2ZlciBpcyBjb21wbGV0ZSwgdGhpcyBmdW5jdGlvbgogICAgLy8vICBjaGVja3MgaWYgYF90b2AgaXMgYSBzbWFydCBjb250cmFjdCAoY29kZSBzaXplID4gMCkuIElmIHNvLCBpdCBjYWxscwogICAgLy8vICBgb25FUkM3MjFSZWNlaXZlZGAgb24gYF90b2AgYW5kIHRocm93cyBpZiB0aGUgcmV0dXJuIHZhbHVlIGlzIG5vdAogICAgLy8vICBgYnl0ZXM0KGtlY2NhazI1Nigib25FUkM3MjFSZWNlaXZlZChhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpIikpYC4KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGN1cnJlbnQgb3duZXIgb2YgdGhlIE5GVAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIG5ldyBvd25lcgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgTkZUIHRvIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIGRhdGEgQWRkaXRpb25hbCBkYXRhIHdpdGggbm8gc3BlY2lmaWVkIGZvcm1hdCwgc2VudCBpbiBjYWxsIHRvIGBfdG9gCiAgICBmdW5jdGlvbiBzYWZlVHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkLCBieXRlcyBkYXRhKSBleHRlcm5hbCBwYXlhYmxlCiAgICB7CiAgICAgICAgX3NhZmVUcmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3Rva2VuSWQsIGRhdGEpOwogICAgfQoJCiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiBhbiBORlQgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyIGFkZHJlc3MKICAgIC8vLyBAZGV2IFRoaXMgd29ya3MgaWRlbnRpY2FsbHkgdG8gdGhlIG90aGVyIGZ1bmN0aW9uIHdpdGggYW4gZXh0cmEgZGF0YSBwYXJhbWV0ZXIsCiAgICAvLy8gIGV4Y2VwdCB0aGlzIGZ1bmN0aW9uIGp1c3Qgc2V0cyBkYXRhIHRvICIiCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBjdXJyZW50IG93bmVyIG9mIHRoZSBORlQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBuZXcgb3duZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIE5GVCB0byB0cmFuc2ZlcgogICAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgcGF5YWJsZQogICAgewogICAgICAgIF9zYWZlVHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF90b2tlbklkLCAiIik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgVHJhbnNmZXIgb3duZXJzaGlwIG9mIGFuIE5GVCAtLSBUSEUgQ0FMTEVSIElTIFJFU1BPTlNJQkxFCiAgICAvLy8gIFRPIENPTkZJUk0gVEhBVCBgX3RvYCBJUyBDQVBBQkxFIE9GIFJFQ0VJVklORyBORlRTIE9SIEVMU0UKICAgIC8vLyAgVEhFWSBNQVkgQkUgUEVSTUFORU5UTFkgTE9TVAogICAgLy8vIEBkZXYgVGhyb3dzIHVubGVzcyBgbXNnLnNlbmRlcmAgaXMgdGhlIGN1cnJlbnQgb3duZXIsIGFuIGF1dGhvcml6ZWQKICAgIC8vLyAgb3BlcmF0b3IsIG9yIHRoZSBhcHByb3ZlZCBhZGRyZXNzIGZvciB0aGlzIE5GVC4gVGhyb3dzIGlmIGBfZnJvbWAgaXMKICAgIC8vLyAgbm90IHRoZSBjdXJyZW50IG93bmVyLiBUaHJvd3MgaWYgYF90b2AgaXMgdGhlIHplcm8gYWRkcmVzcy4gVGhyb3dzIGlmCiAgICAvLy8gIGBfdG9rZW5JZGAgaXMgbm90IGEgdmFsaWQgTkZULgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgY3VycmVudCBvd25lciBvZiB0aGUgTkZUCiAgICAvLy8gQHBhcmFtIF90byBUaGUgbmV3IG93bmVyCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBORlQgdG8gdHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkKICAgICAgICBleHRlcm5hbAogICAgICAgIHBheWFibGUKICAgICAgICBtdXN0QmVWYWxpZFRva2VuKF90b2tlbklkKQogICAgICAgIGNhblRyYW5zZmVyKF90b2tlbklkKQogICAgewogICAgICAgIGFkZHJlc3Mgb3duZXIgPSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXTsKICAgICAgICAvLyBIYW5kbGUgc3Vic3RpdHV0aW9ucwogICAgICAgIGlmIChvd25lciA9PSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG93bmVyID0gYWRkcmVzcyh0aGlzKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShvd25lciA9PSBfZnJvbSk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgX3RyYW5zZmVyKF90b2tlbklkLCBfdG8pOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNldCBvciByZWFmZmlybSB0aGUgYXBwcm92ZWQgYWRkcmVzcyBmb3IgYW4gTkZUCiAgICAvLy8gQGRldiBUaGUgemVybyBhZGRyZXNzIGluZGljYXRlcyB0aGVyZSBpcyBubyBhcHByb3ZlZCBhZGRyZXNzLgogICAgLy8vIEBkZXYgVGhyb3dzIHVubGVzcyBgbXNnLnNlbmRlcmAgaXMgdGhlIGN1cnJlbnQgTkZUIG93bmVyLCBvciBhbiBhdXRob3JpemVkCiAgICAvLy8gIG9wZXJhdG9yIG9mIHRoZSBjdXJyZW50IG93bmVyLgogICAgLy8vIEBwYXJhbSBfYXBwcm92ZWQgVGhlIG5ldyBhcHByb3ZlZCBORlQgY29udHJvbGxlcgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgTkZUIHRvIGFwcHJvdmUKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBwYXlhYmxlCiAgICAgICAgLy8gYXNzZXJ0KG11c3RCZVZhbGlkVG9rZW4oX3Rva2VuSWQpKQogICAgICAgIGNhbk9wZXJhdGUoX3Rva2VuSWQpCiAgICB7CiAgICAgICAgYWRkcmVzcyBfb3duZXIgPSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXTsKICAgICAgICAvLyBIYW5kbGUgc3Vic3RpdHV0aW9ucwogICAgICAgIGlmIChfb3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBfb3duZXIgPSBhZGRyZXNzKHRoaXMpOwogICAgICAgIH0KICAgICAgICB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF0gPSBfYXBwcm92ZWQ7CiAgICAgICAgZW1pdCBBcHByb3ZhbChfb3duZXIsIF9hcHByb3ZlZCwgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEVuYWJsZSBvciBkaXNhYmxlIGFwcHJvdmFsIGZvciBhIHRoaXJkIHBhcnR5ICgib3BlcmF0b3IiKSB0byBtYW5hZ2UKICAgIC8vLyAgYWxsIHlvdXIgYXNzZXQuCiAgICAvLy8gQGRldiBFbWl0cyB0aGUgQXBwcm92YWxGb3JBbGwgZXZlbnQKICAgIC8vLyBAcGFyYW0gX29wZXJhdG9yIEFkZHJlc3MgdG8gYWRkIHRvIHRoZSBzZXQgb2YgYXV0aG9yaXplZCBvcGVyYXRvcnMuCiAgICAvLy8gQHBhcmFtIF9hcHByb3ZlZCBUcnVlIGlmIHRoZSBvcGVyYXRvcnMgaXMgYXBwcm92ZWQsIGZhbHNlIHRvIHJldm9rZSBhcHByb3ZhbAogICAgZnVuY3Rpb24gc2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyBfb3BlcmF0b3IsIGJvb2wgX2FwcHJvdmVkKSBleHRlcm5hbCB7CiAgICAgICAgb3BlcmF0b3JBcHByb3ZhbHNbbXNnLnNlbmRlcl1bX29wZXJhdG9yXSA9IF9hcHByb3ZlZDsKICAgICAgICBlbWl0IEFwcHJvdmFsRm9yQWxsKG1zZy5zZW5kZXIsIF9vcGVyYXRvciwgX2FwcHJvdmVkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBHZXQgdGhlIGFwcHJvdmVkIGFkZHJlc3MgZm9yIGEgc2luZ2xlIE5GVAogICAgLy8vIEBkZXYgVGhyb3dzIGlmIGBfdG9rZW5JZGAgaXMgbm90IGEgdmFsaWQgTkZUCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBORlQgdG8gZmluZCB0aGUgYXBwcm92ZWQgYWRkcmVzcyBmb3IKICAgIC8vLyBAcmV0dXJuIFRoZSBhcHByb3ZlZCBhZGRyZXNzIGZvciB0aGlzIE5GVCwgb3IgdGhlIHplcm8gYWRkcmVzcyBpZiB0aGVyZSBpcyBub25lCiAgICBmdW5jdGlvbiBnZXRBcHByb3ZlZCh1aW50MjU2IF90b2tlbklkKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgdmlldwogICAgICAgIG11c3RCZVZhbGlkVG9rZW4oX3Rva2VuSWQpCiAgICAgICAgcmV0dXJucyAoYWRkcmVzcykKICAgIHsKICAgICAgICByZXR1cm4gdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdOyAgICAgICAgCiAgICB9CgogICAgLy8vIEBub3RpY2UgUXVlcnkgaWYgYW4gYWRkcmVzcyBpcyBhbiBhdXRob3JpemVkIG9wZXJhdG9yIGZvciBhbm90aGVyIGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGUgTkZUcwogICAgLy8vIEBwYXJhbSBfb3BlcmF0b3IgVGhlIGFkZHJlc3MgdGhhdCBhY3RzIG9uIGJlaGFsZiBvZiB0aGUgb3duZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgYF9vcGVyYXRvcmAgaXMgYW4gYXBwcm92ZWQgb3BlcmF0b3IgZm9yIGBfb3duZXJgLCBmYWxzZSBvdGhlcndpc2UKICAgIGZ1bmN0aW9uIGlzQXBwcm92ZWRGb3JBbGwoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX29wZXJhdG9yKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gb3BlcmF0b3JBcHByb3ZhbHNbX293bmVyXVtfb3BlcmF0b3JdOwogICAgfQogICAgCiAgICAvLyBDT01QTElBTkNFIFdJVEggRVJDNzIxTWV0YWRhdGEgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQSBkZXNjcmlwdGl2ZSBuYW1lIGZvciBhIGNvbGxlY3Rpb24gb2YgTkZUcyBpbiB0aGlzIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBuYW1lKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gIlN1IFNxdWFyZXMiOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEFuIGFiYnJldmlhdGVkIG5hbWUgZm9yIE5GVHMgaW4gdGhpcyBjb250cmFjdAogICAgZnVuY3Rpb24gc3ltYm9sKCkgZXh0ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gIlNVIjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBIGRpc3RpbmN0IFVuaWZvcm0gUmVzb3VyY2UgSWRlbnRpZmllciAoVVJJKSBmb3IgYSBnaXZlbiBhc3NldC4KICAgIC8vLyBAZGV2IFRocm93cyBpZiBgX3Rva2VuSWRgIGlzIG5vdCBhIHZhbGlkIE5GVC4gVVJJcyBhcmUgZGVmaW5lZCBpbiBSRkMKICAgIC8vLyAgMzk4Ni4gVGhlIFVSSSBtYXkgcG9pbnQgdG8gYSBKU09OIGZpbGUgdGhhdCBjb25mb3JtcyB0byB0aGUgIkVSQzcyMQogICAgLy8vICBNZXRhZGF0YSBKU09OIFNjaGVtYSIuCiAgICBmdW5jdGlvbiB0b2tlblVSSSh1aW50MjU2IF90b2tlbklkKSAKICAgICAgICBleHRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICBtdXN0QmVWYWxpZFRva2VuKF90b2tlbklkKQogICAgICAgIHJldHVybnMgKHN0cmluZyBfdG9rZW5VUkkpCiAgICB7CiAgICAgICAgX3Rva2VuVVJJID0gImh0dHBzOi8vdGVudGhvdXNhbmRzdS5jb20vZXJjNzIxLzAwMDAwLmpzb24iOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfdG9rZW5VUklCeXRlcyA9IGJ5dGVzKF90b2tlblVSSSk7CiAgICAgICAgX3Rva2VuVVJJQnl0ZXNbMzNdID0gYnl0ZSg0OCsoX3Rva2VuSWQgLyAxMDAwMCkgJSAxMCk7CiAgICAgICAgX3Rva2VuVVJJQnl0ZXNbMzRdID0gYnl0ZSg0OCsoX3Rva2VuSWQgLyAxMDAwKSAlIDEwKTsKICAgICAgICBfdG9rZW5VUklCeXRlc1szNV0gPSBieXRlKDQ4KyhfdG9rZW5JZCAvIDEwMCkgJSAxMCk7CiAgICAgICAgX3Rva2VuVVJJQnl0ZXNbMzZdID0gYnl0ZSg0OCsoX3Rva2VuSWQgLyAxMCkgJSAxMCk7CiAgICAgICAgX3Rva2VuVVJJQnl0ZXNbMzddID0gYnl0ZSg0OCsoX3Rva2VuSWQgLyAxKSAlIDEwKTsKICAgICAgICAKICAgIH0KCiAgICAvLyBDT01QTElBTkNFIFdJVEggRVJDNzIxRW51bWVyYWJsZSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ291bnQgTkZUcyB0cmFja2VkIGJ5IHRoaXMgY29udHJhY3QKICAgIC8vLyBAcmV0dXJuIEEgY291bnQgb2YgdmFsaWQgTkZUcyB0cmFja2VkIGJ5IHRoaXMgY29udHJhY3QsIHdoZXJlIGVhY2ggb25lIG9mCiAgICAvLy8gIHRoZW0gaGFzIGFuIGFzc2lnbmVkIGFuZCBxdWVyeWFibGUgb3duZXIgbm90IGVxdWFsIHRvIHRoZSB6ZXJvIGFkZHJlc3MKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIFRPVEFMX1NVUFBMWTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBFbnVtZXJhdGUgdmFsaWQgTkZUcwogICAgLy8vIEBkZXYgVGhyb3dzIGlmIGBfaW5kZXhgID49IGB0b3RhbFN1cHBseSgpYC4KICAgIC8vLyBAcGFyYW0gX2luZGV4IEEgY291bnRlciBsZXNzIHRoYW4gYHRvdGFsU3VwcGx5KClgCiAgICAvLy8gQHJldHVybiBUaGUgdG9rZW4gaWRlbnRpZmllciBmb3IgdGhlIGBfaW5kZXhgdGggTkZULAogICAgLy8vICAoc29ydCBvcmRlciBub3Qgc3BlY2lmaWVkKQogICAgZnVuY3Rpb24gdG9rZW5CeUluZGV4KHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXF1aXJlKF9pbmRleCA8IFRPVEFMX1NVUFBMWSk7CiAgICAgICAgcmV0dXJuIF9pbmRleCArIDE7CiAgICB9CgogICAgLy8vIEBub3RpY2UgRW51bWVyYXRlIE5GVHMgYXNzaWduZWQgdG8gYW4gb3duZXIKICAgIC8vLyBAZGV2IFRocm93cyBpZiBgX2luZGV4YCA+PSBgYmFsYW5jZU9mKF9vd25lcilgIG9yIGlmCiAgICAvLy8gIGBfb3duZXJgIGlzIHRoZSB6ZXJvIGFkZHJlc3MsIHJlcHJlc2VudGluZyBpbnZhbGlkIE5GVHMuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBbiBhZGRyZXNzIHdoZXJlIHdlIGFyZSBpbnRlcmVzdGVkIGluIE5GVHMgb3duZWQgYnkgdGhlbQogICAgLy8vIEBwYXJhbSBfaW5kZXggQSBjb3VudGVyIGxlc3MgdGhhbiBgYmFsYW5jZU9mKF9vd25lcilgCiAgICAvLy8gQHJldHVybiBUaGUgdG9rZW4gaWRlbnRpZmllciBmb3IgdGhlIGBfaW5kZXhgdGggTkZUIGFzc2lnbmVkIHRvIGBfb3duZXJgLAogICAgLy8vICAgKHNvcnQgb3JkZXIgbm90IHNwZWNpZmllZCkKICAgIGZ1bmN0aW9uIHRva2VuT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgICAgICByZXF1aXJlKF9vd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9pbmRleCA8IF90b2tlbnNPZk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbX293bmVyXS5sZW5ndGgpOwogICAgICAgIF90b2tlbklkID0gX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tfb3duZXJdW19pbmRleF07CiAgICAgICAgLy8gSGFuZGxlIHN1YnN0aXR1dGlvbnMKICAgICAgICBpZiAoX293bmVyID09IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgaWYgKF90b2tlbklkID09IDApIHsKICAgICAgICAgICAgICAgIF90b2tlbklkID0gX2luZGV4ICsgMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBJTlRFUk5BTCBJTlRFUkZBQ0UgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgQWN0dWFsbHkgZG8gYSB0cmFuc2ZlciwgZG9lcyBOTyBwcmVjb25kaXRpb24gY2hlY2tpbmcKICAgIGZ1bmN0aW9uIF90cmFuc2Zlcih1aW50MjU2IF90b2tlbklkLCBhZGRyZXNzIF90bykgaW50ZXJuYWwgewogICAgICAgIC8vIEhlcmUgYXJlIHRoZSBwcmVjb25kaXRpb25zIHdlIGFyZSBub3QgY2hlY2tpbmc6CiAgICAgICAgLy8gYXNzZXJ0KGNhblRyYW5zZmVyKF90b2tlbklkKSkKICAgICAgICAvLyBhc3NlcnQobXVzdEJlVmFsaWRUb2tlbihfdG9rZW5JZCkpCiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIC8vIEZpbmQgdGhlIEZST00gYWRkcmVzcwogICAgICAgIGFkZHJlc3MgZnJvbVdpdGhTdWJzdGl0dXRpb24gPSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXTsKICAgICAgICBhZGRyZXNzIGZyb20gPSBmcm9tV2l0aFN1YnN0aXR1dGlvbjsKICAgICAgICBpZiAoZnJvbVdpdGhTdWJzdGl0dXRpb24gPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBmcm9tID0gYWRkcmVzcyh0aGlzKTsKICAgICAgICB9CgogICAgICAgIC8vIFRha2UgYXdheSBmcm9tIHRoZSBGUk9NIGFkZHJlc3MKICAgICAgICAvLyBUaGUgRW50cmlrZW4gYWxnb3JpdGhtIGZvciBkZWxldGluZyBmcm9tIGFuIGluZGV4ZWQsIHVuc29ydGVkIGFycmF5CiAgICAgICAgdWludDI1NiBpbmRleFRvRGVsZXRlV2l0aFN1YnN0aXR1dGlvbiA9IF9vd25lZFRva2Vuc0luZGV4V2l0aFN1YnN0aXR1dGlvbnNbX3Rva2VuSWRdOwogICAgICAgIHVpbnQyNTYgaW5kZXhUb0RlbGV0ZTsKICAgICAgICBpZiAoaW5kZXhUb0RlbGV0ZVdpdGhTdWJzdGl0dXRpb24gPT0gMCkgewogICAgICAgICAgICBpbmRleFRvRGVsZXRlID0gX3Rva2VuSWQgLSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGluZGV4VG9EZWxldGUgPSBpbmRleFRvRGVsZXRlV2l0aFN1YnN0aXR1dGlvbiAtIDE7CiAgICAgICAgfQogICAgICAgIGlmIChpbmRleFRvRGVsZXRlICE9IF90b2tlbnNPZk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbZnJvbV0ubGVuZ3RoIC0gMSkgewogICAgICAgICAgICB1aW50MjU2IGxhc3ROZnRXaXRoU3Vic3RpdHV0aW9uID0gX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tmcm9tXVtfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW2Zyb21dLmxlbmd0aCAtIDFdOwogICAgICAgICAgICB1aW50MjU2IGxhc3ROZnQgPSBsYXN0TmZ0V2l0aFN1YnN0aXR1dGlvbjsKICAgICAgICAgICAgaWYgKGxhc3ROZnRXaXRoU3Vic3RpdHV0aW9uID09IDApIHsKICAgICAgICAgICAgICAgIC8vIGFzc2VydChmcm9tID09ICBhZGRyZXNzKDApIHx8IGZyb20gPT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgICAgICAgICBsYXN0TmZ0ID0gX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tmcm9tXS5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tmcm9tXVtpbmRleFRvRGVsZXRlXSA9IGxhc3ROZnQ7CiAgICAgICAgICAgIF9vd25lZFRva2Vuc0luZGV4V2l0aFN1YnN0aXR1dGlvbnNbbGFzdE5mdF0gPSBpbmRleFRvRGVsZXRlICsgMTsKICAgICAgICB9CiAgICAgICAgZGVsZXRlIF90b2tlbnNPZk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbZnJvbV1bX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tmcm9tXS5sZW5ndGggLSAxXTsgLy8gZ2V0IGdhcyBiYWNrCiAgICAgICAgX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tmcm9tXS5sZW5ndGgtLTsKICAgICAgICAvLyBSaWdodCBub3cgX293bmVkVG9rZW5zSW5kZXhXaXRoU3Vic3RpdHV0aW9uc1tfdG9rZW5JZF0gaXMgaW52YWxpZCwgc2V0IGl0IGJlbG93IGJhc2VkIG9uIHRoZSBuZXcgb3duZXIKCiAgICAgICAgLy8gR2l2ZSB0byB0aGUgVE8gYWRkcmVzcwogICAgICAgIF90b2tlbnNPZk93bmVyV2l0aFN1YnN0aXR1dGlvbnNbX3RvXS5wdXNoKF90b2tlbklkKTsKICAgICAgICBfb3duZWRUb2tlbnNJbmRleFdpdGhTdWJzdGl0dXRpb25zW190b2tlbklkXSA9IChfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW190b10ubGVuZ3RoIC0gMSkgKyAxOwoKICAgICAgICAvLyBFeHRlcm5hbCBwcm9jZXNzaW5nCiAgICAgICAgX3Rva2VuT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tfdG9rZW5JZF0gPSBfdG87CiAgICAgICAgdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdID0gYWRkcmVzcygwKTsKICAgICAgICBlbWl0IFRyYW5zZmVyKGZyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQogICAgCiAgICAvLyBQUklWQVRFIFNUT1JBR0UgQU5EIEZVTkNUSU9OUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IFRPVEFMX1NVUFBMWSA9IDEwMDAwOyAvLyBTT0xJRElUWSBJU1NVRSAjMzM1NiBtYWtlIHRoaXMgaW1tdXRhYmxlCgogICAgYnl0ZXM0IHByaXZhdGUgY29uc3RhbnQgRVJDNzIxX1JFQ0VJVkVEID0gYnl0ZXM0KGtlY2NhazI1Nigib25FUkM3MjFSZWNlaXZlZChhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpIikpOwogICAgCiAgICAvLy8gQGRldiBUaGUgb3duZXIgb2YgZWFjaCBORlQKICAgIC8vLyAgSWYgdmFsdWUgPT0gYWRkcmVzcygwKSwgTkZUIGlzIG93bmVkIGJ5IGFkZHJlc3ModGhpcykKICAgIC8vLyAgSWYgdmFsdWUgIT0gYWRkcmVzcygwKSwgTkZUIGlzIG93bmVkIGJ5IHZhbHVlCiAgICAvLy8gIGFzc2VydChUaGlzIGNvbnRyYWN0IG5ldmVyIGFzc2lnbnMgYXduZXJoaXAgdG8gYWRkcmVzcygwKSBvciBkZXN0cm95cyBORlRzKQogICAgLy8vICBTZWUgY29tbWVudGVkIG91dCBjb2RlIGluIGNvbnN0cnVjdG9yLCBzYXZlcyBoZWxsYSBnYXMKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHJpdmF0ZSBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zOwoKICAgIC8vLyBAZGV2IFRoZSBsaXN0IG9mIE5GVHMgb3duZWQgYnkgZWFjaCBhZGRyZXNzCiAgICAvLy8gIE5vbWVuY2xhdHVyZTogdGhpc1trZXldW2luZGV4XSA9IHZhbHVlCiAgICAvLy8gIElmIGtleSAhPSBhZGRyZXNzKHRoaXMpIG9yIHZhbHVlICE9IDAsIHRoZW4gdmFsdWUgcmVwcmVzZW50cyBhbiBORlQKICAgIC8vLyAgSWYga2V5ID09IGFkZHJlc3ModGhpcykgYW5kIHZhbHVlID09IDAsIHRoZW4gaW5kZXggKyAxIGlzIHRoZSBORlQKICAgIC8vLyAgYXNzZXJ0KDAgaXMgbm90IGEgdmFsaWQgTkZUKQogICAgLy8vICBTZWUgY29tbWVudGVkIG91dCBjb2RlIGluIGNvbnN0cnVjdG9yLCBzYXZlcyBoZWxsYSBnYXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NltdKSBwcml2YXRlIF90b2tlbnNPZk93bmVyV2l0aFN1YnN0aXR1dGlvbnM7CiAgICAKICAgIC8vLyBAZGV2IChMb2NhdGlvbiArIDEpIG9mIGVhY2ggTkZUIGluIGl0cyBvd25lcidzIGxpc3QKICAgIC8vLyAgTm9tZW5jbGF0dXJlOiB0aGlzW2tleV0gPSB2YWx1ZQogICAgLy8vICBJZiB2YWx1ZSAhPSAwLCBfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW293bmVyXVt2YWx1ZSAtIDFdID0gbmZ0SWQKICAgIC8vLyAgSWYgdmFsdWUgPT0gMCwgX3Rva2Vuc09mT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tvd25lcl1ba2V5IC0gMV0gPSBuZnRJZAogICAgLy8vICBhc3NlcnQoMioqMjU2LTEgaXMgbm90IGEgdmFsaWQgTkZUKQogICAgLy8vICBTZWUgY29tbWVudGVkIG91dCBjb2RlIGluIGNvbnN0cnVjdG9yLCBzYXZlcyBoZWxsYSBnYXMKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBfb3duZWRUb2tlbnNJbmRleFdpdGhTdWJzdGl0dXRpb25zOwoKICAgIC8vIER1ZSB0byBpbXBsZW1lbnRhdGlvbiBjaG9pY2VzIChubyBtaW50LCBubyBidXJuLCBjb250aWd1b3VzIE5GVCBpZHMpLCBpdAogICAgLy8gaXMgbm90IG5lY2Vzc2FyeSB0byBrZWVwIGFuIGFycmF5IG9mIE5GVCBpZHMgbm9yIHdoZXJlIGVhY2ggTkZUIGlkIGlzCiAgICAvLyBsb2NhdGVkIGluIHRoYXQgYXJyYXkuCiAgICAvLyBhZGRyZXNzW10gcHJpdmF0ZSBuZnRJZHM7CiAgICAvLyBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgbmZ0SW5kZXhPZklkOwogICAgCiAgICBmdW5jdGlvbiBTdU5GVCgpIGludGVybmFsIHsKICAgICAgICAvLyBQdWJsaXNoIGludGVyZmFjZXMgd2l0aCBFUkMtMTY1CiAgICAgICAgc3VwcG9ydGVkSW50ZXJmYWNlc1sweDY0NjYzNTNjXSA9IHRydWU7IC8vIEVSQzcyMQogICAgICAgIHN1cHBvcnRlZEludGVyZmFjZXNbMHg1YjVlMTM5Zl0gPSB0cnVlOyAvLyBFUkM3MjFNZXRhZGF0YQogICAgICAgIHN1cHBvcnRlZEludGVyZmFjZXNbMHg3ODBlOWQ2M10gPSB0cnVlOyAvLyBFUkM3MjFFbnVtZXJhYmxlCiAgICAgICAgCiAgICAgICAgLy8gVGhlIGVmZmVjdCBvZiBzdWJzdGl0dXRpb24gbWFrZXMgc3RvcmluZyBhZGRyZXNzKHRoaXMpLCBhZGRyZXNzKHRoaXMpCiAgICAgICAgLy8gLi4uLCBhZGRyZXNzKHRoaXMpIGZvciBhIHRvdGFsIG9mIFRPVEFMX1NVUFBMWSB0aW1lcyB1bm5lY2Vzc2FyeSBhdAogICAgICAgIC8vIGRlcGxveW1lbnQgdGltZQogICAgICAgIC8vIGZvciAodWludDI1NiBpID0gMTsgaSA8PSBUT1RBTF9TVVBQTFk7IGkrKykgewogICAgICAgIC8vICAgICBfdG9rZW5Pd25lcldpdGhTdWJzdGl0dXRpb25zW2ldID0gYWRkcmVzcyh0aGlzKTsKICAgICAgICAvLyB9CgogICAgICAgIC8vIFRoZSBlZmZlY3Qgb2Ygc3Vic3RpdHV0aW9uIG1ha2VzIHN0b3JpbmcgMSwgMiwgLi4uLCBUT1RBTF9TVVBQTFkKICAgICAgICAvLyB1bm5lY2Vzc2FyeSBhdCBkZXBsb3ltZW50IHRpbWUKICAgICAgICBfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW2FkZHJlc3ModGhpcyldLmxlbmd0aCA9IFRPVEFMX1NVUFBMWTsKICAgICAgICAvLyBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBUT1RBTF9TVVBQTFk7IGkrKykgewogICAgICAgIC8vICAgICBfdG9rZW5zT2ZPd25lcldpdGhTdWJzdGl0dXRpb25zW2FkZHJlc3ModGhpcyldW2ldID0gaSArIDE7CiAgICAgICAgLy8gfQogICAgICAgIC8vIGZvciAodWludDI1NiBpID0gMTsgaSA8PSBUT1RBTF9TVVBQTFk7IGkrKykgewogICAgICAgIC8vICAgICBfb3duZWRUb2tlbnNJbmRleFdpdGhTdWJzdGl0dXRpb25zW2ldID0gaSAtIDE7CiAgICAgICAgLy8gfQogICAgfQogICAgCiAgICAvLy8gQGRldiBBY3R1YWxseSBwZXJmb3JtIHRoZSBzYWZlVHJhbnNmZXJGcm9tCiAgICBmdW5jdGlvbiBfc2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCwgYnl0ZXMgZGF0YSkKICAgICAgICBwcml2YXRlCiAgICAgICAgbXVzdEJlVmFsaWRUb2tlbihfdG9rZW5JZCkKICAgICAgICBjYW5UcmFuc2ZlcihfdG9rZW5JZCkKICAgIHsKICAgICAgICBhZGRyZXNzIG93bmVyID0gX3Rva2VuT3duZXJXaXRoU3Vic3RpdHV0aW9uc1tfdG9rZW5JZF07CiAgICAgICAgLy8gSGFuZGxlIHN1YnN0aXR1dGlvbnMKICAgICAgICBpZiAob3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IGFkZHJlc3ModGhpcyk7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUob3duZXIgPT0gX2Zyb20pOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF90cmFuc2ZlcihfdG9rZW5JZCwgX3RvKTsKICAgICAgICAKICAgICAgICAvLyBEbyB0aGUgY2FsbGJhY2sgYWZ0ZXIgZXZlcnl0aGluZyBpcyBkb25lIHRvIGF2b2lkIHJlZW50cmFuY3kgYXR0YWNrCiAgICAgICAgdWludDI1NiBjb2RlU2l6ZTsKICAgICAgICBhc3NlbWJseSB7IGNvZGVTaXplIDo9IGV4dGNvZGVzaXplKF90bykgfQogICAgICAgIGlmIChjb2RlU2l6ZSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgYnl0ZXM0IHJldHZhbCA9IEVSQzcyMVRva2VuUmVjZWl2ZXIoX3RvKS5vbkVSQzcyMVJlY2VpdmVkKF9mcm9tLCBfdG9rZW5JZCwgZGF0YSk7CiAgICAgICAgcmVxdWlyZShyZXR2YWwgPT0gRVJDNzIxX1JFQ0VJVkVEKTsKICAgIH0gICAgCn0KCi8qIFN1T3BlcmF0aW9uLnNvbCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIFRoZSBmZWF0dXJlcyB0aGF0IHNxdWFyZSBvd25lcnMgY2FuIHVzZQovLy8gQGF1dGhvciBXaWxsaWFtIEVudHJpa2VuIChodHRwczovL3Bob3IubmV0KQovLy8gQGRldiBTZWUgU3VNYWluIGNvbnRyYWN0IGRvY3VtZW50YXRpb24gZm9yIGRldGFpbCBvbiBob3cgY29udHJhY3RzIGludGVyYWN0Lgpjb250cmFjdCBTdU9wZXJhdGlvbiBpcyBTdU5GVCB7CiAgICAvLy8gQGRldiBUaGUgcGVyc29uYWxpemF0aW9uIG9mIGEgc3F1YXJlIGhhcyBjaGFuZ2VkCiAgICBldmVudCBQZXJzb25hbGl6ZWQodWludDI1NiBfbmZ0SWQpOwogICAgCiAgICAvLy8gQGRldiBUaGUgbWFpbiBTdVNxdWFyZSBzdHJ1Y3QuIFRoZSBvd25lciBtYXkgc2V0IHRoZXNlIHByb3BlcnRpZXMsIHN1YmplY3QKICAgIC8vLyAgc3ViamVjdCB0byBjZXJ0YWluIHJ1bGVzLiBUaGUgYWN0dWFsIDEweDEwIGltYWdlIGlzIHJlbmRlcmVkIG9uIG91cgogICAgLy8vICB3ZWJzaXRlIHVzaW5nIHRoaXMgZGF0YS4KICAgIHN0cnVjdCBTdVNxdWFyZSB7CiAgICAgICAgLy8vIEBkZXYgVGhpcyBpbmNyZW1lbnRzIG9uIGVhY2ggdXBkYXRlCiAgICAgICAgdWludDI1NiB2ZXJzaW9uOwogICAgICAgIAogICAgICAgIC8vLyBAZGV2IEEgMTB4MTAgcGl4ZWwgaW1hZ2UsIHN0b3JlZCA4LWJpdCBSR0IgdmFsdWVzIGZyb20gbGVmdC10by1yaWdodAogICAgICAgIC8vLyAgYW5kIHRvcC10by1ib3R0b20gb3JkZXIgKG5vcm1hbCBFbmdsaXNoIHJlYWRpbmcgb3JkZXIpLiBTbyBpdCBpcwogICAgICAgIC8vLyAgZXhhY3RseSAzMDAgYnl0ZXMuIE9yIGl0IGlzIGFuIGVtcHR5IGFycmF5LgogICAgICAgIC8vLyAgU28gdGhlIGZpcnN0IGJ5dGUgaXMgdGhlIHJlZCBjaGFubmVsIGZvciB0aGUgdG9wLWxlZnQgcGl4ZWwsIHRoZW4KICAgICAgICAvLy8gIHRoZSBibHVlLCB0aGVuIHRoZSBncmVlbiwgYW5kIHRoZW4gbmV4dCBpcyB0aGUgcmVkIGNoYW5uZWwgZm9yIHRoZQogICAgICAgIC8vLyAgcGl4ZWwgdG8gdGhlIHJpZ2h0IG9mIHRoZSBmaXJzdCBwaXhlbC4KICAgICAgICBieXRlcyByZ2JEYXRhOwoKICAgICAgICAvLy8gQGRldiBUaGUgdGl0bGUgb2YgdGhpcyBzcXVhcmUsIGF0IG1vc3QgNjQgYnl0ZXMsCiAgICAgICAgc3RyaW5nIHRpdGxlOwoKICAgICAgICAvLy8gQGRldiBUaGUgVVJMIG9mIHRoaXMgc3F1YXJlLCBhdCBtb3N0IDEwMCBieXRlcywgb3IgZW1wdHkgc3RyaW5nCiAgICAgICAgc3RyaW5nIGhyZWY7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsIHRoZSBTdSBTcXVhcmVzIHRoYXQgZXZlciBleGlzdCBvciB3aWxsIGV4aXN0LiBFYWNoIFN1IFNxdWFyZQogICAgLy8vICByZXByZXNlbnRzIGEgc3F1YXJlIG9uIG91ciB3ZWJwYWdlIGluIGEgMTAweDEwMCBncmlkLiBUaGUgc3F1YXJlcyBhcmUKICAgIC8vLyAgYXJyYW5nZWQgaW4gbGVmdC10by1yaWdodCwgdG9wLXRvLWJvdHRvbSBvcmRlci4gSW4gb3RoZXIgd29yZHMsIG5vcm1hbAogICAgLy8vICBFbmdsaXNoIHJlYWRpbmcgb3JkZXIuIFNvIHN1U3F1YXJlc1sxXSBpcyB0aGUgdG9wLWxlZnQgbG9jYXRpb24gYW5kCiAgICAvLy8gIHN1U3F1YXJlc1sxMDBdIGlzIHRoZSB0b3AtcmlnaHQgbG9jYXRpb24uIEFuZCBzdVNxdWFyZXNbMTAxXSBpcwogICAgLy8vICBkaXJlY3RseSBiZWxvdyBzdVNxdWFyZXNbMV0uIAogICAgLy8vIEBkZXYgVGhlcmUgaXMgbm8gc3VTcXVhcmVzWzBdIC0tIHRoYXQgaXMgYW4gdW51c2VkIGFycmF5IGluZGV4LgogICAgU3VTcXVhcmVbMTAwMDFdIHB1YmxpYyBzdVNxdWFyZXM7CiAgICAKICAgIC8vLyBAbm90aWNlIFVwZGF0ZSB0aGUgY29udGVudHMgb2YgeW91ciBzcXVhcmUsIHRoZSBmaXJzdCAzIHBlcnNvbmFsaXphdGlvbnMKICAgIC8vLyAgZm9yIGEgc3F1YXJlIGFyZSBmcmVlIHRoZW4gY29zdCAxMCBmaW5uZXkgKDAuMDEgZXRoZXIpIGVhY2gKICAgIC8vLyBAcGFyYW0gX3NxdWFyZUlkIFRoZSB0b3AtbGVmdCBpcyAxLCB0byBpdHMgcmlnaHQgaXMgMiwgLi4uLCB0b3AtcmlnaHQgaXMKICAgIC8vLyAgMTAwIGFuZCB0aGVuIDEwMSBpcyBiZWxvdyAxLi4uIHRoZSBsYXN0IG9uZSBhdCBib3R0b20tcmlnaHQgaXMgMTAwMDAKICAgIC8vLyBAcGFyYW0gX3NxdWFyZUlkIEEgMTB4MTAgaW1hZ2UgZm9yIHlvdXIgc3F1YXJlLCBpbiA4LWJpdCBSR0Igd29yZHMKICAgIC8vLyAgb3JkZXJlZCBsaWtlIHRoZSBzcXVhcmVzIGFyZSBvcmRlcmVkLiBTZWUgSW1hZ2VtYWdpY2sncyBjb21tYW5kCiAgICAvLy8gIGNvbnZlcnQgLXNpemUgMTB4MTAgLWRlcHRoIDggaW4ucmdiIG91dC5wbmcKICAgIC8vLyBAcGFyYW0gX3RpdGxlIEEgZGVzY3JpcHRpb24gb2YgeW91ciBzcXVhcmUgKG1heCA2NCBieXRlcyBVVEYtOCkKICAgIC8vLyBAcGFyYW0gX2hyZWYgQSBoeXBlcmxpbmsgZm9yIHlvdXIgc3F1YXJlIChtYXggOTYgYnl0ZXMpCiAgICBmdW5jdGlvbiBwZXJzb25hbGl6ZVNxdWFyZSgKICAgICAgICB1aW50MjU2IF9zcXVhcmVJZCwKICAgICAgICBieXRlcyBfcmdiRGF0YSwKICAgICAgICBzdHJpbmcgX3RpdGxlLAogICAgICAgIHN0cmluZyBfaHJlZgogICAgKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyT2YoX3NxdWFyZUlkKQogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICByZXF1aXJlKGJ5dGVzKF90aXRsZSkubGVuZ3RoIDw9IDY0KTsKICAgICAgICByZXF1aXJlKGJ5dGVzKF9ocmVmKS5sZW5ndGggPD0gOTYpOwogICAgICAgIHJlcXVpcmUoX3JnYkRhdGEubGVuZ3RoID09IDMwMCk7CiAgICAgICAgc3VTcXVhcmVzW19zcXVhcmVJZF0udmVyc2lvbisrOwogICAgICAgIHN1U3F1YXJlc1tfc3F1YXJlSWRdLnJnYkRhdGEgPSBfcmdiRGF0YTsKICAgICAgICBzdVNxdWFyZXNbX3NxdWFyZUlkXS50aXRsZSA9IF90aXRsZTsKICAgICAgICBzdVNxdWFyZXNbX3NxdWFyZUlkXS5ocmVmID0gX2hyZWY7CiAgICAgICAgaWYgKHN1U3F1YXJlc1tfc3F1YXJlSWRdLnZlcnNpb24gPiAzKSB7CiAgICAgICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID09IDEwIGZpbm5leSk7CiAgICAgICAgfQogICAgICAgIGVtaXQgUGVyc29uYWxpemVkKF9zcXVhcmVJZCk7CiAgICB9Cn0KCi8qIFN1UHJvbW8uc29sICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIEEgbGltaXRlZCBwcmUtc2FsZSBhbmQgcHJvbW90aW9uYWwgZ2l2ZWF3YXkuCi8vLyBAYXV0aG9yIFdpbGxpYW0gRW50cmlrZW4gKGh0dHBzOi8vcGhvci5uZXQpCi8vLyBAZGV2IFNlZSBTdU1haW4gY29udHJhY3QgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlsIG9uIGhvdyBjb250cmFjdHMgaW50ZXJhY3QuCmNvbnRyYWN0IFN1UHJvbW8gaXMgQWNjZXNzQ29udHJvbCwgU3VORlQgewogICAgdWludDI1NiBjb25zdGFudCBQUk9NT19DUkVBVElPTl9MSU1JVCA9IDUwMDA7CgogICAgLy8vIEBub3RpY2UgSG93IG1hbnkgcHJvbW8gc3F1YXJlcyB3ZXJlIGdyYW50ZWQKICAgIHVpbnQyNTYgcHVibGljIHByb21vQ3JlYXRlZENvdW50OwoKICAgIC8vLyBAbm90aWNlIEJFV0FSRSwgdGhpcyBkb2VzIG5vdCB1c2UgYSBzYWZlIHRyYW5zZmVyIG1lY2hhbmlzbSEKICAgIC8vLyAgWW91IG11c3QgbWFudWFsbHkgY2hlY2sgdGhlIHJlY2VpdmVyIGNhbiBhY2NlcHQgTkZUcwogICAgZnVuY3Rpb24gZ3JhbnRUb2tlbih1aW50MjU2IF90b2tlbklkLCBhZGRyZXNzIF9uZXdPd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPcGVyYXRpbmdPZmZpY2VyCiAgICAgICAgbXVzdEJlVmFsaWRUb2tlbihfdG9rZW5JZCkKICAgICAgICBtdXN0QmVPd25lZEJ5VGhpc0NvbnRyYWN0KF90b2tlbklkKQogICAgewogICAgICAgIHJlcXVpcmUocHJvbW9DcmVhdGVkQ291bnQgPCBQUk9NT19DUkVBVElPTl9MSU1JVCk7CiAgICAgICAgcHJvbW9DcmVhdGVkQ291bnQrKzsKICAgICAgICBfdHJhbnNmZXIoX3Rva2VuSWQsIF9uZXdPd25lcik7CiAgICB9Cn0KCi8qIFN1VmVuZGluZy5zb2wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIEEgdG9rZW4gdmVuZGluZyBtYWNoaW5lCi8vLyBAYXV0aG9yIFdpbGxpYW0gRW50cmlrZW4gKGh0dHBzOi8vcGhvci5uZXQpCi8vLyBAZGV2IFNlZSBTdU1haW4gY29udHJhY3QgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlsIG9uIGhvdyBjb250cmFjdHMgaW50ZXJhY3QuCmNvbnRyYWN0IFN1VmVuZGluZyBpcyBTdU5GVCB7CiAgICB1aW50MjU2IGNvbnN0YW50IFNBTEVfUFJJQ0UgPSA1MDAgZmlubmV5OyAvLyAwLjUgZXRoZXIKCiAgICAvLy8gQG5vdGljZSBUaGUgcHJpY2UgaXMgYWx3YXlzIDAuNSBldGhlciwgYW5kIHlvdSBjYW4gYnV5IGFueSBhdmFpbGFibGUgc3F1YXJlCiAgICAvLy8gIEJlIHN1cmUgeW91IGFyZSBjYWxsaW5nIHRoaXMgZnJvbSBhIHJlZ3VsYXIgYWNjb3VudCAobm90IGEgc21hcnQgY29udHJhY3QpCiAgICAvLy8gIG9yIGlmIHlvdSBhcmUgY2FsbGluZyBmcm9tIGEgc21hcnQgY29udHJhY3QsIG1ha2Ugc3VyZSBpdCBjYW4gdXNlCiAgICAvLy8gIEVSQy03MjEgbm9uLWZ1bmdpYmxlIHRva2VucwogICAgZnVuY3Rpb24gcHVyY2hhc2UodWludDI1NiBfbmZ0SWQpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBwYXlhYmxlCiAgICAgICAgbXVzdEJlVmFsaWRUb2tlbihfbmZ0SWQpCiAgICAgICAgbXVzdEJlT3duZWRCeVRoaXNDb250cmFjdChfbmZ0SWQpCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gU0FMRV9QUklDRSk7CiAgICAgICAgX3RyYW5zZmVyKF9uZnRJZCwgbXNnLnNlbmRlcik7CiAgICB9Cn0KCi8qIFN1TWFpbi5zb2wgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovLy8gQHRpdGxlIFRoZSBmZWF0dXJlcyB0aGF0IGRlZWQgb3duZXJzIGNhbiB1c2UKLy8vIEBhdXRob3IgV2lsbGlhbSBFbnRyaWtlbiAoaHR0cHM6Ly9waG9yLm5ldCkKLy8vIEBkZXYgU2VlIFN1TWFpbiBjb250cmFjdCBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWwgb24gaG93IGNvbnRyYWN0cyBpbnRlcmFjdC4KY29udHJhY3QgU3VNYWluIGlzIEFjY2Vzc0NvbnRyb2wsIFN1TkZULCBTdU9wZXJhdGlvbiwgU3VWZW5kaW5nLCBTdVByb21vIHsKICAgIGZ1bmN0aW9uIFN1TWFpbigpIHB1YmxpYyB7CiAgICB9Cn0='.
	

]
