Class {
	#name : #SRT1eb0d4794d4067ed004c9d55ff6eb50620b27c58,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1eb0d4794d4067ed004c9d55ff6eb50620b27c58 >> base64 [
	^ ''.
	

]
