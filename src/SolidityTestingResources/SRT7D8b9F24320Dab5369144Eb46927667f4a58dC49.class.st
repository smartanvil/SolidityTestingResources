Class {
	#name : #SRT7D8b9F24320Dab5369144Eb46927667f4a58dC49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7D8b9F24320Dab5369144Eb46927667f4a58dC49 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE4OwoKLyoqCiAqIEB0aXRsZSBPd25lZAogKiBAZGV2IFRoZSBPd25lZCBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKi8KY29udHJhY3QgT3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgIAogICAgLypTZXQgb3duZXIgb2YgdGhlIGNvbnRyYWN0Ki8KICAgIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLypvbmx5IG93bmVyIGNhbiBiZSBtb2RpZmllciovCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25lZCB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBwdWJsaWMgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlPd25lciB3aGVuUGF1c2VkIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICAvKioKICAgICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgICovCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAgICAqLwogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAgICAqLwogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgICovCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cgp9CgovKkVSQzIwKi8KY29udHJhY3QgVG9rZW5FUkMyMCBpcyBQYXVzYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIC8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTlJDIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlIiOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMDsKICAgIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgICB1aW50MjU2IHB1YmxpYyByYXRlID0gNTAwMDA7CiAgICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldCA9IDB4ZDNDODMyNjA2NDA0NGMzNkI3MzA0M2IwMDkxNTVhNTllOTI0NzdEMDsKICAgIC8vIGNvbnRyaWJ1dG9ycyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBjb250cmlidXRvcnNBZGRyZXNzID0gMHhhN2RiNTNDQjczREJlNjQwRGJENDgwYTkyOGREMDZmMDNFMmFFN0JkOwogICAgLy8gY29tcGFueSBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBjb21wYW55QWRkcmVzcyA9IDB4OWM5NDliNTFmMkNhZkMzQTVlZmM0Mjc2MjEyOTU0ODlCNjNEODYxRDsKICAgIC8vIG1hcmtldCBBZGRyZXNzIAogICAgYWRkcmVzcyBwdWJsaWMgbWFya2V0QWRkcmVzcyA9IDB4MTk5RWNkRmFDMjU1NjdlYjREMjFDOTk1QjgxNzIzMDA1MGQ0NThkOTsKICAgIC8vIHNoYXJlIG9mIGFsbCB0b2tlbiAKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBJQ09fU0hBUkUgPSAyMDsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBDT05UUklCVVRPUlNfU0hBUkUgPSAzMDsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBDT01QQU5ZX1NIQVJFID0gMjA7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgTUFSS0VUX1NIQVJFID0gMzA7CiAgICAvLyB1bmZyb256ZW4gcGVyaW9kcyAKICAgIHVpbnQ4IGNvbnN0YW50IENPTVBBTllfUEVSSU9EUyA9IDEwOwogICAgdWludDggY29uc3RhbnQgQ09OVFJJQlVUT1JTX1BFUklPRFMgPSAzOwogICAgLy8gdG9rZW4gdG90YWxzdXBwbHkgYW1vdW50CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBUT1RBTF9TVVBQTFkgPSA4MDAwMDAwMDAwMDsKICAgIC8vIGljbyB0b2tlbiBhbW91bnQKICAgIHVpbnQyNTYgcHVibGljIGljb1RvdGFsQW1vdW50ID0gMTYwMDAwMDAwMDA7CiAgICB1aW50MjU2IHB1YmxpYyBjb21wYW55UGVyaW9kc0VsYXBzZWQ7CiAgICB1aW50MjU2IHB1YmxpYyBjb250cmlidXRvcnNQZXJpb2RzRWxhcHNlZDsKICAgIC8vIHRva2VuIGZyb3plbmVkIGFtb3VudAogICAgdWludDI1NiBwdWJsaWMgZnJvemVuU3VwcGx5OwogICAgdWludDI1NiBwdWJsaWMgaW5pdERhdGU7CiAgICB1aW50OCBwdWJsaWMgY29udHJpYnV0b3JzQ3VycmVudFBlcmlvZDsKICAgIHVpbnQ4IHB1YmxpYyBjb21wYW55Q3VycmVudFBlcmlvZDsKICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CgogICAgLy8gVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEluaXRpYWxUb2tlbihzdHJpbmcgZGVzYywgYWRkcmVzcyBpbmRleGVkIHRhcmdldCwgdWludDI1NiB2YWx1ZSk7ICAgIAogICAgCiAgICAvKioKICAgICAqIENvbnN0cmN0b3IgZnVuY3Rpb24KICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBUb2tlbkVSQzIwKAogICAgKSBwdWJsaWMgewogICAgICAgIC8vIGNvbnRyaWJ1dG9ycyBzaGFyZSAzMCUgb2YgdG90YWxTdXBwbHksYnV0IGdldCBhbGwgYnkgMyB5ZWFycwogICAgICAgIHVpbnQyNTYgdGVtcENvbnRyaWJ1dG9ycyA9IFRPVEFMX1NVUFBMWS5tdWwoQ09OVFJJQlVUT1JTX1NIQVJFKS5kaXYoMTAwKS5kaXYoQ09OVFJJQlVUT1JTX1BFUklPRFMpOwogICAgICAgIGNvbnRyaWJ1dG9yc1BlcmlvZHNFbGFwc2VkID0gdGVtcENvbnRyaWJ1dG9yczsKICAgICAgICBiYWxhbmNlT2ZbY29udHJpYnV0b3JzQWRkcmVzc10gPSB0ZW1wQ29udHJpYnV0b3JzOwogICAgICAgIEluaXRpYWxUb2tlbigiY29udHJpYnV0b3JzIiwgY29udHJpYnV0b3JzQWRkcmVzcywgdGVtcENvbnRyaWJ1dG9ycyk7CiAgICAgICAgCiAgICAgICAgLy8gY29tcGFueSBzaGFyZXMgMjAlIG9mIHRvdGFsU3VwcGx5LGJ1dCBnZXQgYWxsIGJ5IDEwIHllYXJzCiAgICAgICAgdWludDI1NiB0ZW1wQ29tcGFueSA9IFRPVEFMX1NVUFBMWS5tdWwoQ09NUEFOWV9TSEFSRSkuZGl2KDEwMCkuZGl2KENPTVBBTllfUEVSSU9EUyk7CiAgICAgICAgY29tcGFueVBlcmlvZHNFbGFwc2VkID0gdGVtcENvbXBhbnk7CiAgICAgICAgYmFsYW5jZU9mW2NvbXBhbnlBZGRyZXNzXSA9IHRlbXBDb21wYW55OwogICAgICAgIEluaXRpYWxUb2tlbigiY29tcGFueSIsIGNvbXBhbnlBZGRyZXNzLCB0ZW1wQ29tcGFueSk7CgogICAgICAgIC8vIGljbyB0YWtlcyAyMCUgb2YgdG90YWxTdXBwbHkKICAgICAgICB1aW50MjU2IHRlbXBJY28gPSBUT1RBTF9TVVBQTFkubXVsKElDT19TSEFSRSkuZGl2KDEwMCk7CiAgICAgICAgaWNvVG90YWxBbW91bnQgPSB0ZW1wSWNvOwoKICAgICAgICAvLyBleHBhbmQgdGhlIG1hcmtldCBjb3N0IDMwJSBvZiB0b3RhbFN1cHBseQogICAgICAgIHVpbnQyNTYgdGVtcE1hcmtldCA9IFRPVEFMX1NVUFBMWS5tdWwoTUFSS0VUX1NIQVJFKS5kaXYoMTAwKTsKICAgICAgICBiYWxhbmNlT2ZbbWFya2V0QWRkcmVzc10gPSB0ZW1wTWFya2V0OwogICAgICAgIEluaXRpYWxUb2tlbigibWFya2V0IiwgbWFya2V0QWRkcmVzcywgdGVtcE1hcmtldCk7CgogICAgICAgIC8vIGZyb3plblN1cHBseSB3YWl0dGluZyBmb3IgYmVpbmcgdW5mcm96ZW4KICAgICAgICB1aW50MjU2IHRlbXBGcm96ZW5TdXBwbHkgPSBUT1RBTF9TVVBQTFkuc3ViKHRlbXBDb250cmlidXRvcnMpLnN1Yih0ZW1wSWNvKS5zdWIodGVtcENvbXBhbnkpLnN1Yih0ZW1wTWFya2V0KTsKICAgICAgICBmcm96ZW5TdXBwbHkgPSB0ZW1wRnJvemVuU3VwcGx5OwogICAgICAgIGluaXREYXRlID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGNvbnRyaWJ1dG9yc0N1cnJlbnRQZXJpb2QgPSAxOwogICAgICAgIGNvbXBhbnlDdXJyZW50UGVyaW9kID0gMTsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpID4gYmFsYW5jZU9mW190b10pOwogICAgICAgIC8vIFNhdmUgdGhpcyBmb3IgYW4gYXNzZXJ0aW9uIGluIHRoZSBmdXR1cmUKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dLmFkZChiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSA9IGJhbGFuY2VPZltfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgLy8gQXNzZXJ0cyBhcmUgdXNlZCB0byB1c2Ugc3RhdGljIGFuYWx5c2lzIHRvIGZpbmQgYnVncyBpbiB5b3VyIGNvZGUuIFRoZXkgc2hvdWxkIG5ldmVyIGZhaWwKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW19mcm9tXS5hZGQoYmFsYW5jZU9mW190b10pID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgfQoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qICAgICAgIE5SQ1Rva2VuIFNUQVJUUyBIRVJFICAgICAgICovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgpjb250cmFjdCBOUkNUb2tlbiBpcyBPd25lZCwgVG9rZW5FUkMyMCB7CiAgICB1aW50MjU2IHByaXZhdGUgZXRoZXJDaGFuZ2VSYXRlID0gMTAgKiogMTg7CiAgICB1aW50MjU2IHByaXZhdGUgbWludXRlc09uZVllYXIgPSAzNjUqMjQqNjAgbWludXRlczsKICAgIGJvb2wgcHVibGljICB0b2tlblNhbGVBY3RpdmUgPSB0cnVlOwogICAgLy8gdG9rZW4gaGF2ZSBiZWVuIHNvbGQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU29sZFRva2VuOwogICAgLy8gYWxsIGZyb3plbkFjY291bnQgYWRkcmVzc2VzCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CgogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgbG9nIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgTG9nRnJvemVuQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwogICAgZXZlbnQgTG9nVW5mcm96ZW5Ub2tlbnMoc3RyaW5nIGRlc2MsIGFkZHJlc3MgaW5kZXhlZCB0YXJnZXRhZGRyZXNzLCB1aW50MjU2IHVuZnJvemVuVG9rZW5zQW1vdW50KTsKICAgIGV2ZW50IExvZ1NldFRva2VuUHJpY2UodWludDI1NiB0b2tlblByaWNlKTsKICAgIGV2ZW50IFRpbWVQYXNzQnkoc3RyaW5nIGRlc2MsIHVpbnQyNTYgdGltZXMgKTsKICAgIC8qKgogICAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSB2YWx1ZSBlaHRlciBwYWlkIGZvciBwdXJjaGFzZQogICAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAgICovCiAgICBldmVudCBMb2dUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKICAgIC8vIElDTyBmaW5pc2hlZCBFdmVudAogICAgZXZlbnQgVG9rZW5TYWxlRmluaXNoZWQoc3RyaW5nIGRlc2MsIGFkZHJlc3MgaW5kZXhlZCBjb250cmlidXRvcnMsIHVpbnQyNTYgaWNvVG90YWxBbW91bnQsIHVpbnQyNTYgdG90YWxTb2xkVG9rZW4sIHVpbnQyNTYgbGVmdEFtb3VudCk7CiAgICAKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gTlJDVG9rZW4oKSBUb2tlbkVSQzIwKCkgcHVibGljIHt9CgogICAgLyogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfZnJvbSAhPSBfdG8pOwogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7IC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOyAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpID4gYmFsYW5jZU9mW190b10pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOyAvLyBDaGVjayBpZiBzZW5kZXIgaXMgZnJvemVuCiAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfdG9dKTsgLy8gQ2hlY2sgaWYgcmVjaXBpZW50IGlzIGZyb3plbgogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gPSBiYWxhbmNlT2ZbX2Zyb21dLnN1YihfdmFsdWUpOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOyAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAgICAvKioKICAgICAqIFRyYW5zZmVyIHRva2VucwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20geW91ciBhY2NvdW50CiAgICAgKgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgZnJlZXplPyBQcmV2ZW50IHwgQWxsb3dgIGB0YXJnZXRgIGZyb20gc2VuZGluZyAmIHJlY2VpdmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gdGFyZ2V0IEFkZHJlc3MgdG8gYmUgZnJvemVuCiAgICAvLy8gQHBhcmFtIGZyZWV6ZSBlaXRoZXIgdG8gZnJlZXplIGl0IG9yIG5vdAogICAgZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIHB1YmxpYyBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZSh0YXJnZXQgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKHRhcmdldCAhPSBvd25lcik7CiAgICAgICAgcmVxdWlyZShmcm96ZW5BY2NvdW50W3RhcmdldF0gIT0gZnJlZXplKTsKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgTG9nRnJvemVuQWNjb3VudCh0YXJnZXQsIGZyZWV6ZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3cgdXNlcnMgdG8gYnV5IHRva2VucyBmb3IgYG5ld1Rva2VuUmF0ZWAgZXRoCiAgICAvLy8gQHBhcmFtIG5ld1Rva2VuUmF0ZSBQcmljZSB1c2VycyBjYW4gYnV5IGZyb20gdGhlIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBzZXRQcmljZXModWludDI1NiBuZXdUb2tlblJhdGUpIHB1YmxpYyBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShuZXdUb2tlblJhdGUgPiAwKTsKICAgICAgICByZXF1aXJlKG5ld1Rva2VuUmF0ZSA8PSBpY29Ub3RhbEFtb3VudCk7CiAgICAgICAgcmVxdWlyZSh0b2tlblNhbGVBY3RpdmUpOwogICAgICAgIHJhdGUgPSBuZXdUb2tlblJhdGU7CiAgICAgICAgTG9nU2V0VG9rZW5QcmljZShuZXdUb2tlblJhdGUpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEJ1eSB0b2tlbnMgZnJvbSBjb250cmFjdCBieSBzZW5kaW5nIGV0aGVyCiAgICBmdW5jdGlvbiBidXkoKSBwdWJsaWMgcGF5YWJsZSB3aGVuTm90UGF1c2VkIHsKICAgICAgICAvLyBpZiBJQ08gZmluaXNoZWQgLGNhbiBub3QgYnV5IGFueSBtb3JlIQogICAgICAgIHJlcXVpcmUoIWZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pOyAKICAgICAgICByZXF1aXJlKHRva2VuU2FsZUFjdGl2ZSk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgICAgIHVpbnQgdG9rZW5zID0gZ2V0VG9rZW5BbW91bnQobXNnLnZhbHVlKTsgLy8gY2FsY3VsYXRlcyB0aGUgYW1vdW50CiAgICAgICAgcmVxdWlyZSghdmFsaWRTb2xkT3V0KHRva2VucykpOwogICAgICAgIExvZ1Rva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgbXNnLnZhbHVlLCB0b2tlbnMpOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKICAgICAgICBjYWxjVG90YWxTb2xkVG9rZW4odG9rZW5zKTsKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KCiAgICAvLyBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBoYXZlIGEgd2F5IHRvIGFkZCBidXNpbmVzcyBsb2dpYyB0byB5b3VyIGNyb3dkc2FsZSB3aGVuIGJ1eWluZwogICAgZnVuY3Rpb24gZ2V0VG9rZW5BbW91bnQodWludDI1NiBldGhlckFtb3VudCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHRlbXAgPSBldGhlckFtb3VudC5tdWwocmF0ZSk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0ZW1wLmRpdihldGhlckNoYW5nZVJhdGUpOwogICAgICAgIHJldHVybiBhbW91bnQ7CiAgICB9CgogICAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZGVyIHdhbGxldAogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgfQoKICAgIC8vIGNhbGMgdG90YWxTb2xkVG9rZW4KICAgIGZ1bmN0aW9uIGNhbGNUb3RhbFNvbGRUb2tlbih1aW50MjU2IHNvbGRBbW91bnQpIGludGVybmFsIHsKICAgICAgICB0b3RhbFNvbGRUb2tlbiA9IHRvdGFsU29sZFRva2VuLmFkZChzb2xkQW1vdW50KTsKICAgICAgICBpZiAodG90YWxTb2xkVG9rZW4gPj0gaWNvVG90YWxBbW91bnQpIHsgCiAgICAgICAgICAgIHRva2VuU2FsZUFjdGl2ZSA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICBib29sIGxpbWl0UHVyY2hhc2UgPSBtc2cudmFsdWUgPj0gMSBldGhlcjsKICAgICAgICBib29sIGlzTm90VGhlT3duZXIgPSBtc2cuc2VuZGVyICE9IG93bmVyOwogICAgICAgIGJvb2wgaXNOb3RUaGVDb21wYW55ID0gbXNnLnNlbmRlciAhPSBjb21wYW55QWRkcmVzczsKICAgICAgICBib29sIGlzTm90V2FsbGV0ID0gbXNnLnNlbmRlciAhPSB3YWxsZXQ7CiAgICAgICAgYm9vbCBpc05vdENvbnRyaWJ1dG9ycyA9IG1zZy5zZW5kZXIgIT0gY29udHJpYnV0b3JzQWRkcmVzczsKICAgICAgICBib29sIGlzTm90TWFya2V0ID0gbXNnLnNlbmRlciAhPSBtYXJrZXRBZGRyZXNzOwogICAgICAgIHJldHVybiBsaW1pdFB1cmNoYXNlICYmIGlzTm90VGhlT3duZXIgJiYgaXNOb3RUaGVDb21wYW55ICYmIGlzTm90V2FsbGV0ICYmIGlzTm90Q29udHJpYnV0b3JzICYmIGlzTm90TWFya2V0OwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgSUNPIGlzIGluIHByb2dyZXNzLgogICAgZnVuY3Rpb24gdmFsaWRTb2xkT3V0KHVpbnQyNTYgc29sZEFtb3VudCkgaW50ZXJuYWwgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gdG90YWxTb2xkVG9rZW4uYWRkKHNvbGRBbW91bnQpID4gaWNvVG90YWxBbW91bnQ7CiAgICB9CiAgICAvLyBAcmV0dXJuIGN1cnJlbnQgdGltZXN0YW1wCiAgICBmdW5jdGlvbiB0aW1lKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBibG9jay50aW1lc3RhbXA7CiAgICB9CgogICAgLy8vIEBkZXYgc2VuZCB0aGUgcmVzdCBvZiB0aGUgdG9rZW5zIGFmdGVyIHRoZSBjcm93ZHNhbGUgZW5kIGFuZAogICAgLy8vIHNlbmQgdG8gY29udHJpYnV0b3JzIGFkZHJlc3MKICAgIGZ1bmN0aW9uIGZpbmFsaXNlSUNPKCkgcHVibGljIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHsKICAgICAgICByZXF1aXJlKHRva2VuU2FsZUFjdGl2ZSA9PSB0cnVlKTsgICAgICAgIAogICAgICAgIHVpbnQyNTYgdG9rZW5zTGVmdCA9IGljb1RvdGFsQW1vdW50LnN1Yih0b3RhbFNvbGRUb2tlbik7CiAgICAgICAgdG9rZW5TYWxlQWN0aXZlID0gZmFsc2U7CiAgICAgICAgcmVxdWlyZSh0b2tlbnNMZWZ0ID4gMCk7CiAgICAgICAgYmFsYW5jZU9mW2NvbnRyaWJ1dG9yc0FkZHJlc3NdID0gYmFsYW5jZU9mW2NvbnRyaWJ1dG9yc0FkZHJlc3NdLmFkZCh0b2tlbnNMZWZ0KTsKICAgICAgICBUb2tlblNhbGVGaW5pc2hlZCgiZmluYWxpc2VJQ08iLCBjb250cmlidXRvcnNBZGRyZXNzLCBpY29Ub3RhbEFtb3VudCwgdG90YWxTb2xkVG9rZW4sIHRva2Vuc0xlZnQpOwogICAgICAgIHRvdGFsU29sZFRva2VuID0gaWNvVG90YWxBbW91bnQ7CiAgICB9CgoKICAgIC8vLyBAbm90aWNlIGZyZWV6ZSB1bmZyb3plbkFtb3VudAogICAgZnVuY3Rpb24gdW5mcm96ZW5Ub2tlbnMoKSBwdWJsaWMgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHJlcXVpcmUoZnJvemVuU3VwcGx5ID49IDApOwogICAgICAgIGlmIChjb250cmlidXRvcnNDdXJyZW50UGVyaW9kIDwgQ09OVFJJQlVUT1JTX1BFUklPRFMpIHsKICAgICAgICAgICAgdW5mcm96ZW5Db250cmlidXRvcnNUb2tlbnMoKTsKICAgICAgICAgICAgdW5mcm96ZW5Db21wYW55VG9rZW5zKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdW5mcm96ZW5Db21wYW55VG9rZW5zKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIHVuZnJvemVuIGNvbnRyaWJ1dG9ycyB0b2tlbiB5ZWFyIGJ5IHllYXIKICAgIGZ1bmN0aW9uIHVuZnJvemVuQ29udHJpYnV0b3JzVG9rZW5zKCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoY29udHJpYnV0b3JzQ3VycmVudFBlcmlvZCA8IENPTlRSSUJVVE9SU19QRVJJT0RTKTsKICAgICAgICB1aW50MjU2IGNvbnRyaWJ1dG9ydGltZVNob3VsZFBhc3NCeSA9IGNvbnRyaWJ1dG9yc0N1cnJlbnRQZXJpb2QgKiAobWludXRlc09uZVllYXIpOwogICAgICAgIFRpbWVQYXNzQnkoImNvbnRyaWJ1dG9ydGltZVNob3VsZFBhc3NCeSIsIGNvbnRyaWJ1dG9ydGltZVNob3VsZFBhc3NCeSk7CiAgICAgICAgdWludDI1NiBjb250cmlidXRvcnNUaW1lUGFzc0J5ID0gdGltZSgpIC0gaW5pdERhdGU7CiAgICAgICAgVGltZVBhc3NCeSgiY29udHJpYnV0b3J0aW1lUGFzc0J5IiwgY29udHJpYnV0b3JzVGltZVBhc3NCeSk7CgogICAgICAgIGNvbnRyaWJ1dG9yc0N1cnJlbnRQZXJpb2QgPSBjb250cmlidXRvcnNDdXJyZW50UGVyaW9kICsgMTsKICAgICAgICByZXF1aXJlKGNvbnRyaWJ1dG9yc1RpbWVQYXNzQnkgPj0gY29udHJpYnV0b3J0aW1lU2hvdWxkUGFzc0J5KTsKICAgICAgICBmcm96ZW5TdXBwbHkgPSBmcm96ZW5TdXBwbHkuc3ViKGNvbnRyaWJ1dG9yc1BlcmlvZHNFbGFwc2VkKTsKICAgICAgICBiYWxhbmNlT2ZbY29udHJpYnV0b3JzQWRkcmVzc10gPSBiYWxhbmNlT2ZbY29udHJpYnV0b3JzQWRkcmVzc10uYWRkKGNvbnRyaWJ1dG9yc1BlcmlvZHNFbGFwc2VkKTsKICAgICAgICBMb2dVbmZyb3plblRva2VucygiY29udHJpYnV0b3JzIiwgY29udHJpYnV0b3JzQWRkcmVzcywgY29udHJpYnV0b3JzUGVyaW9kc0VsYXBzZWQpOwogICAgfQoKICAgIC8vIHVuZnJvemVuIGNvbXBhbnkgdG9rZW4geWVhciBieSB5ZWFyCiAgICBmdW5jdGlvbiB1bmZyb3plbkNvbXBhbnlUb2tlbnMoKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShjb21wYW55Q3VycmVudFBlcmlvZCA8IENPTVBBTllfUEVSSU9EUyk7CiAgICAgICAgdWludDI1NiBjb21wYW55dGltZVNob3VsZFBhc3NCeSA9IGNvbXBhbnlDdXJyZW50UGVyaW9kICogKG1pbnV0ZXNPbmVZZWFyKTsKICAgICAgICBUaW1lUGFzc0J5KCJDb21wYW55dGltZVNob3VsZFBhc3NCeSIsIGNvbXBhbnl0aW1lU2hvdWxkUGFzc0J5KTsKICAgICAgICB1aW50MjU2IGNvbXBhbnl0aW1lUGFzc0J5ID0gdGltZSgpIC0gaW5pdERhdGU7CiAgICAgICAgVGltZVBhc3NCeSgiQ29tcGFueXRpbWVQYXNzQnkiLCBjb21wYW55dGltZVBhc3NCeSk7CgogICAgICAgIHJlcXVpcmUoY29tcGFueXRpbWVQYXNzQnkgPj0gY29tcGFueXRpbWVTaG91bGRQYXNzQnkpOwogICAgICAgIGNvbXBhbnlDdXJyZW50UGVyaW9kID0gY29tcGFueUN1cnJlbnRQZXJpb2QgKyAxOwogICAgICAgIGZyb3plblN1cHBseSA9IGZyb3plblN1cHBseS5zdWIoY29tcGFueVBlcmlvZHNFbGFwc2VkKTsKICAgICAgICBiYWxhbmNlT2ZbY29tcGFueUFkZHJlc3NdID0gYmFsYW5jZU9mW2NvbXBhbnlBZGRyZXNzXS5hZGQoY29tcGFueVBlcmlvZHNFbGFwc2VkKTsKICAgICAgICBMb2dVbmZyb3plblRva2VucygiY29tcGFueSIsIGNvbXBhbnlBZGRyZXNzLCBjb21wYW55UGVyaW9kc0VsYXBzZWQpOwogICAgfQoKICAgIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIC0gZG8gbm90IGFsbG93IGFueSBldGggdHJhbnNmZXJzIHRvIHRoaXMgY29udHJhY3QKICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgewogICAgICAgIHJldmVydCgpOwogICAgfQoKfQ=='.
	

]
