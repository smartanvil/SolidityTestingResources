Class {
	#name : #SRT558aac46e98bccd0362301e24fd8d18433444fab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT558aac46e98bccd0362301e24fd8d18433444fab >> base64 [
	^ ''.
	

]
