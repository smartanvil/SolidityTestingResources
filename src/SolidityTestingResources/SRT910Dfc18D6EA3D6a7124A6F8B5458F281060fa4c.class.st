Class {
	#name : #SRT910Dfc18D6EA3D6a7124A6F8B5458F281060fa4c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT910Dfc18D6EA3D6a7124A6F8B5458F281060fa4c >> base64 [
	^ ''.
	

]
