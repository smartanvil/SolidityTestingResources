Class {
	#name : #SRTa07B5Dc6925dFe87B6BAAC492080Ed90A3C9368d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa07B5Dc6925dFe87B6BAAC492080Ed90A3C9368d >> base64 [
	^ ''.
	

]
