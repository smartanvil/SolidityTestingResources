Class {
	#name : #SRT584af734a101538cad9b9522d1b9c87f1c08f9c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT584af734a101538cad9b9522d1b9c87f1c08f9c4 >> base64 [
	^ ''.
	

]
