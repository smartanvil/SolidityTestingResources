Class {
	#name : #SRT74a492720Ab2Cf59261B14bC89E78f8147A96F61,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT74a492720Ab2Cf59261B14bC89E78f8147A96F61 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKfQoKLyoKICogT3duYWJsZQogKgogKiBCYXNlIGNvbnRyYWN0IHdpdGggYW4gb3duZXIuCiAqIFByb3ZpZGVzIG9ubHlPd25lciBtb2RpZmllciwgd2hpY2ggcHJldmVudHMgZnVuY3Rpb24gZnJvbSBydW5uaW5nIGlmIGl0IGlzIGNhbGxlZCBieSBhbnlvbmUgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgICogQGRldiBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjay4KICAgKi8KICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludDI1NiBzaXplKSB7CiAgICAgcmVxdWlyZShtc2cuZGF0YS5sZW5ndGggPj0gc2l6ZSArIDQpOwogICAgIF87CiAgfQoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtYW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJ0IHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEJhc2ljVG9rZW4sIEVSQzIwIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMyAqIDMyKSB7CiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgLy8gaWYgKF92YWx1ZSA+IF9hbGxvd2FuY2UpIHRocm93OwoKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgovLy8gQHRpdGxlIE1pZ3JhdGlvbiBBZ2VudCBpbnRlcmZhY2UKY29udHJhY3QgTWlncmF0aW9uQWdlbnQgewogIGZ1bmN0aW9uIG1pZ3JhdGVGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLy8vIEB0aXRsZSBWb3RlcyBQbGF0Zm9ybSBUb2tlbgpjb250cmFjdCBWb3Rlc1BsYXRmb3JtVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CgogIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJWb3RlcyBQbGF0Zm9ybSBUb2tlbiI7CiAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiVk9URVMiOwogIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMjsKICB1aW50MjU2IHB1YmxpYyBJTklUSUFMX1NVUFBMWSA9IDEwMDAwMDAwMCAqIDEwMDsKCiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHJlZnVuZEFsbG93ZWQ7CgogIGFkZHJlc3MgcHVibGljIG1pZ3JhdGlvbkFnZW50OwogIHVpbnQyNTYgcHVibGljIHRvdGFsTWlncmF0ZWQ7CgogIC8qKgogICAqIEBkZXYgQ29udHJ1Y3RvciB0aGF0IGdpdmVzIG1zZy5zZW5kZXIgYWxsIG9mIGV4aXN0aW5nIHRva2Vucy4KICAgKi8KICBmdW5jdGlvbiBWb3Rlc1BsYXRmb3JtVG9rZW4oKSB7CiAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBJTklUSUFMX1NVUFBMWTsKICB9CgogIC8qKgogICAqIEFsbG93IHJlZnVuZCBmcm9tIGdpdmVuIHByZXNhbGUgY29udHJhY3QgYWRkcmVzcy4KICAgKiBPbmx5IHRva2VuIG93bmVyIG1heSBkbyB0aGF0LgogICAqLwogIGZ1bmN0aW9uIGFsbG93UmVmdW5kKGFkZHJlc3MgX2NvbnRyYWN0QWRkcmVzcykgb25seU93bmVyIHsKICAgIHJlZnVuZEFsbG93ZWRbX2NvbnRyYWN0QWRkcmVzc10gPSB0cnVlOwogIH0KCiAgLyoqCiAgICogUmVmdW5kIF9jb3VudCBwcmVzYWxlIHRva2VucyBmcm9tIF9mcm9tIHRvIG1zZy5zZW5kZXIuCiAgICogbXNnLnNlbmRlciBtdXN0IGJlIGEgdHJ1c3RlZCBwcmVzYWxlIGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIHJlZnVuZFByZXNhbGUoYWRkcmVzcyBfZnJvbSwgdWludCBfY291bnQpIHsKICAgIHJlcXVpcmUocmVmdW5kQWxsb3dlZFttc2cuc2VuZGVyXSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9jb3VudCk7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChfY291bnQpOwogIH0KCiAgZnVuY3Rpb24gc2V0TWlncmF0aW9uQWdlbnQoYWRkcmVzcyBfYWdlbnQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICBtaWdyYXRpb25BZ2VudCA9IF9hZ2VudDsKICB9CgogIGZ1bmN0aW9uIG1pZ3JhdGUodWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHsKICAgIC8vIEFib3J0IGlmIG5vdCBpbiBPcGVyYXRpb25hbCBNaWdyYXRpb24gc3RhdGUuCiAgICByZXF1aXJlKG1pZ3JhdGlvbkFnZW50ICE9IDApOwoKICAgIC8vIFZhbGlkYXRlIGlucHV0IHZhbHVlLgogICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICB0b3RhbE1pZ3JhdGVkICs9IF92YWx1ZTsKICAgIE1pZ3JhdGlvbkFnZW50KG1pZ3JhdGlvbkFnZW50KS5taWdyYXRlRnJvbShtc2cuc2VuZGVyLCBfdmFsdWUpOwogIH0KfQoKLyoqCiAqIFdvcmtmbG93OgogKiAxKSBvd25lcjogY3JlYXRlIHRva2VuIGNvbnRyYWN0CiAqIDIpIG93bmVyOiBjcmVhdGUgcHJlc2FsZSBjb250cmFjdAogKiAzKSBvd25lcjogdHJhbnNmZXIgcmVxdWlyZWQgYW1vdW50IG9mIHRva2VucyB0byBwcmVzYWxlIGNvbnRyYWN0CiAqIDQpIG93bmVyOiBhbGxvdyByZWZ1bmQgZnJvbSBwcmVzYWxlIGNvbnRyYWN0IGJ5IGNhbGxpbmcgdG9rZW4uYWxsb3dSZWZ1bmQKICogNSkgPHdhaXQgZm9yIHN0YXJ0IHRpbWU+CiAqIDYpIGV2ZXJ5b25lIHNlbmRzIGV0aGVyIHRvIHRoZSBwcmVzYWxlIGNvbnRyYWN0IGFuZCByZWNlaXZlcyB0b2tlbnMgaW4gZXhjaGFuZ2UKICogNykgPHdhaXQgdW50aWwgZW5kIHRpbWUgb3IgdW50aWwgaGFyZCBjYXAgaXMgcmVhY2hlZD4KICogOCkgaWYgc29mdCBjYXAgaXMgcmVhY2hlZDoKICogOC4xKSBiZW5lZmljaWFyeSBjYWxscyB3aXRoZHJhdygpIGFuZCByZWNlaXZlcwogKiA4LjIpIGJlbmVmaWNpYXJ5IGNhbGxzIHdpdGhkcmF3VG9rZW5zKCkgYW5kIHJlY2VpdmVzIHRoZSByZXN0IG9mIG5vbi1zb2xkIHRva2VucwogKiA5KSBpZiBzb2Z0IGNhcCBpcyBub3QgcmVhY2hlZDoKICogOS4xKSBldmVyeW9uZSBjYWxscyByZWZ1bmQoKSBhbmQgcmVjZWl2ZXMgdGhlaXIgZXRoZXIgYmFjayBpbiBleGNoYW5nZSBmb3IgdG9rZW5zCiAqIDkuMikgb3duZXIgY2FsbHMgd2l0aGRyYXdUb2tlbnMoKSBhbmQgcmVjZWl2ZXMgdGhlIHJlZnVuZGVkIHRva2VucwogKi8KY29udHJhY3QgVm90ZXNQbGF0Zm9ybVRva2VuUHJlU2FsZSBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJWb3RlcyBQbGF0Zm9ybSBUb2tlbiBJQ08iOwoKICAgIFZvdGVzUGxhdGZvcm1Ub2tlbiBwdWJsaWMgdG9rZW47CiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgICB1aW50IHB1YmxpYyBoYXJkQ2FwOwogICAgdWludCBwdWJsaWMgc29mdENhcDsKICAgIHVpbnQgcHVibGljIHRva2VuUHJpY2U7CiAgICB1aW50IHB1YmxpYyBwdXJjaGFzZUxpbWl0OwoKICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQgPSAwOwogICAgdWludCBwdWJsaWMgd2VpUmFpc2VkID0gMDsKICAgIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQgPSAwOwogICAgdWludCBwdWJsaWMgd2VpUmVmdW5kZWQgPSAwOwoKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZTsKICAgIHVpbnQgcHVibGljIGVuZFRpbWU7CgogICAgYm9vbCBwdWJsaWMgc29mdENhcFJlYWNoZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUZpbmlzaGVkID0gZmFsc2U7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHNvbGQ7CgogICAgZXZlbnQgR29hbFJlYWNoZWQodWludCBhbW91bnRSYWlzZWQpOwogICAgZXZlbnQgU29mdENhcFJlYWNoZWQodWludCBzb2Z0Q2FwMSk7CiAgICBldmVudCBOZXdDb250cmlidXRpb24oYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludDI1NiB0b2tlbkFtb3VudCwgdWludDI1NiBldGhlckFtb3VudCk7CiAgICBldmVudCBSZWZ1bmRlZChhZGRyZXNzIGluZGV4ZWQgaG9sZGVyLCB1aW50MjU2IGFtb3VudCk7CgogICAgbW9kaWZpZXIgb25seUFmdGVyKHVpbnQgdGltZSkgewogICAgICAgIHJlcXVpcmUobm93ID49IHRpbWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUJlZm9yZSh1aW50IHRpbWUpIHsKICAgICAgICByZXF1aXJlKG5vdyA8PSB0aW1lKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIFZvdGVzUGxhdGZvcm1Ub2tlblByZVNhbGUoCiAgICAgICAgdWludCBfaGFyZENhcFVTRCwgICAgICAgLy8gbWF4aW11bSBhbGxvd2VkIGZ1bmRyYWlzaW5nIGluIFVTRAogICAgICAgIHVpbnQgX3NvZnRDYXBVU0QsICAgICAgIC8vIG1pbmltdW0gYW1vdW50IGluIFVTRCByZXF1aXJlZCBmb3Igd2l0aGRyYXdhbCBieSBiZW5lZmljaWFyeQogICAgICAgIGFkZHJlc3MgX3Rva2VuLCAgICAgICAgIC8vIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwgICAvLyBiZW5lZmljaWFyeSBhZGRyZXNzCiAgICAgICAgdWludCBfdG90YWxUb2tlbnMsICAgICAgLy8gaW4gdG9rZW4td2VpLiBpLmUuIG51bWJlciBvZiBwcmVzYWxlIHRva2VucyAqIDEwXjE4CiAgICAgICAgdWludCBfcHJpY2VFVEgsICAgICAgICAgLy8gZXRoZXIgcHJpY2UgaW4gVVNECiAgICAgICAgdWludCBfcHVyY2hhc2VMaW1pdFVTRCwgLy8gcHVyY2hhc2UgbGltaXQgaW4gVVNECiAgICAgICAgdWludCBfc3RhcnRUaW1lLCAgICAgICAgLy8gc3RhcnQgdGltZSAodW5peCB0aW1lLCBpbiBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDEpCiAgICAgICAgdWludCBfZHVyYXRpb24gICAgICAgICAgLy8gcHJlc2FsZSBkdXJhdGlvbiBpbiBob3VycwogICAgKSB7CiAgICAgICAgaGFyZENhcCA9IF9oYXJkQ2FwVVNEICogMSBldGhlciAvIF9wcmljZUVUSDsKICAgICAgICBzb2Z0Q2FwID0gX3NvZnRDYXBVU0QgKiAxIGV0aGVyIC8gX3ByaWNlRVRIOwogICAgICAgIHRva2VuUHJpY2UgPSBoYXJkQ2FwIC8gX3RvdGFsVG9rZW5zOwoKICAgICAgICBwdXJjaGFzZUxpbWl0ID0gX3B1cmNoYXNlTGltaXRVU0QgKiAxIGV0aGVyIC8gX3ByaWNlRVRIIC8gdG9rZW5QcmljZTsKICAgICAgICB0b2tlbiA9IFZvdGVzUGxhdGZvcm1Ub2tlbihfdG9rZW4pOwogICAgICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmaWNpYXJ5OwoKICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgICAgIGVuZFRpbWUgPSBfc3RhcnRUaW1lICsgX2R1cmF0aW9uICogMSBob3VyczsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSAvIHRva2VuUHJpY2UgPiAwKTsKICAgICAgICBkb1B1cmNoYXNlKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZCgpIGV4dGVybmFsIG9ubHlBZnRlcihlbmRUaW1lKSB7CiAgICAgICAgcmVxdWlyZSghc29mdENhcFJlYWNoZWQpOwogICAgICAgIHVpbnQgYmFsYW5jZSA9IHNvbGRbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShiYWxhbmNlID4gMCk7CiAgICAgICAgdWludCByZWZ1bmQgPSBiYWxhbmNlICogdG9rZW5QcmljZTsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlZnVuZCk7CiAgICAgICAgZGVsZXRlIHNvbGRbbXNnLnNlbmRlcl07CiAgICAgICAgd2VpUmVmdW5kZWQgPSB3ZWlSZWZ1bmRlZC5hZGQocmVmdW5kKTsKICAgICAgICB0b2tlbi5yZWZ1bmRQcmVzYWxlKG1zZy5zZW5kZXIsIGJhbGFuY2UpOwogICAgICAgIFJlZnVuZGVkKG1zZy5zZW5kZXIsIHJlZnVuZCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoKSBvbmx5T3duZXIgb25seUFmdGVyKGVuZFRpbWUpIHsKICAgICAgICB0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShzb2Z0Q2FwUmVhY2hlZCk7CiAgICAgICAgYmVuZWZpY2lhcnkudHJhbnNmZXIod2VpUmFpc2VkKTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgICAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZG9QdXJjaGFzZShhZGRyZXNzIF90bykgcHJpdmF0ZSBvbmx5QWZ0ZXIoc3RhcnRUaW1lKSBvbmx5QmVmb3JlKGVuZFRpbWUpIHsKICAgICAgICBhc3NlcnQoY3Jvd2RzYWxlRmluaXNoZWQgPT0gZmFsc2UpOwoKICAgICAgICByZXF1aXJlKHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA8PSBoYXJkQ2FwKTsKCiAgICAgICAgaWYgKCFzb2Z0Q2FwUmVhY2hlZCAmJiB3ZWlSYWlzZWQgPCBzb2Z0Q2FwICYmIHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA+PSBzb2Z0Q2FwKSB7CiAgICAgICAgICAgIHNvZnRDYXBSZWFjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgU29mdENhcFJlYWNoZWQoc29mdENhcCk7CiAgICAgICAgfQoKICAgICAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZSAvIHRva2VuUHJpY2U7CiAgICAgICAgcmVxdWlyZSh0b2tlbi5iYWxhbmNlT2YoX3RvKSArIHRva2VucyA8PSBwdXJjaGFzZUxpbWl0KTsKCiAgICAgICAgaWYgKHNvbGRbX3RvXSA9PSAwKQogICAgICAgICAgICBpbnZlc3RvckNvdW50Kys7CgogICAgICAgIHRva2VuLnRyYW5zZmVyKF90bywgdG9rZW5zKTsKICAgICAgICBzb2xkW190b10gKz0gdG9rZW5zOwogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbnMpOwoKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKG1zZy52YWx1ZSk7CgogICAgICAgIE5ld0NvbnRyaWJ1dGlvbihfdG8sIHRva2VucywgbXNnLnZhbHVlKTsKCiAgICAgICAgaWYgKHdlaVJhaXNlZCA9PSBoYXJkQ2FwKSB7CiAgICAgICAgICAgIEdvYWxSZWFjaGVkKGhhcmRDYXApOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
