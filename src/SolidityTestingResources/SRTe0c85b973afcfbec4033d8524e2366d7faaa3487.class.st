Class {
	#name : #SRTe0c85b973afcfbec4033d8524e2366d7faaa3487,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe0c85b973afcfbec4033d8524e2366d7faaa3487 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCgovLyAiUHJvb2Ygb2YgQ29tbWl0bWVudCIgZnVuIHByZS1sYXVuY2ggY29tcGV0aXRpb24gZm9yIEdvbyEKCi8vICBHb28gaXMgYW4gYWRkaWN0aXZlIGZyZWVtaXVtIGdhbWUgYnV0IHlvdSBjYW4gZ2V0IGFoZWFkIG9mCi8vICBvdGhlciBwbGF5ZXJzIChhbmQgZWFybiBtb3JlIGRpdnMpIGJ5IHBsYXlpbmcgd2l0aCBldGgKCi8vICBGdWxsIGRldGFpbHMgYW5kIGdhbWUgc21hcnQgY29udHJhY3Qgd2lsbCBzaG9ydGx5IGJlIGFibGU6Ci8vICB+fiBodHRwczovL2V0aGVyZ29vLmlvIH5+CgovLyAgVGhpcyBjb250ZXN0IHdpbGwgYXdhcmQgc29tZSBvZiB0aGUga2VlbiBHb28gcGxheWVycwovLyAgYW5kIHRob3NlIGxvb2tpbmcgdG8gcmVmZXIgY2FuIGFsc28gZnJlZSB3aW4gcHJpemVzIHRvbyEKCgovLyAgQUxMIEVUSEVSIERFUE9TSVRFRCBJTlRPIFRISVMgUFJPTU8gQ0FOIEJFIFdJVEhEUkFXTiBCWSBQTEFZRVIgQVQgQU5ZCi8vICBUSU1FIEJVVCBQUklaRVMgV0lMTCBCRSBEUkFXTjogRlJJREFZIDMwVEggTUFSQ0ggKExBVU5DSCkKLy8gIEFUIFdISUNIIFBPSU5UIEFMTCBFVEhFUiBXSUxMIEFMU08gQkUgUkVGVU5ERUQgVE8gUExBWUVSUwoKCi8vICBQUklaRVM6Ci8vICAwLjUgZXRoZXIgKHRvcCBldGggZGVwb3NpdCkKLy8gIDAuMyBldGhlciAoMSByYW5kb20gZGVwb3NpdCkKLy8gIDAuMiBldGhlciAoMSByYW5kb20gZGVwb3NpdCkKLy8gICszIHByaXplcyBvZiAwLjI1LCAwLjIsICYgMC4xNSBmb3IgbW9zdCByZWZlcmFscyAod2hpY2ggd2lsbCBhd2FyZGVkIG9mZi1jb250cmFjdCkgYXMgd2lubmVycyBtYW51YWxseSBjaGVja2VkIHRoZXJlIHdhcyBubyBib3QvYWJ1c2UKCgpjb250cmFjdCBHb29MYXVuY2hQcm9tb3Rpb24gewogICAgCiAgICAvLyBGaXJzdCBHb28gUGxheWVycyEKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZGVwb3NpdHM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgZGVwb3NpdG9yQWxyZWFkeVN0b3JlZDsKICAgIGFkZHJlc3NbXSBwdWJsaWMgZGVwb3NpdG9yczsKICAgIAogICAgLy8gUmVmZXJlcnMgY29udGVzdAogICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3NbXSkgcmVmZXJlcmFsczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSByZWZlcmVyQWxyZWFkeVN0b3JlZDsKICAgIGFkZHJlc3NbXSBwdWJsaWMgdW5pcXVlUmVmZXJlcnM7CiAgICAKICAgIC8vIFRvIHRyaWdnZXIgY29udGVzdCBlbmQgb25seQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXJBZGRyZXNzOwogICAgCiAgICAvLyBGbGFnIHNvIGNhbiBvbmx5IGJlIGF3YXJkZWQgb25jZQogICAgYm9vbCBwdWJsaWMgcHJpemVzQXdhcmRlZDsKICAgIAogICAgLy8gRXRoZXIgdG8gYmUgcmV0dXJuZWQgdG8gZGVwb3NpdG9yIG9uIGxhdW5jaAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgTEFVTkNIX0RBVEUgPSAxNTIyNDM2NDAwOyAvLyBGcmlkYXksIDMwIE1hcmNoIDIwMTggMTk6MDA6MDAgKHNlY29uZHMpCiAgICAKICAgIC8vIFByb29mIG9mIENvbW1pdG1lbnQgY29udGVzdCBwcml6ZXMKICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBUT1BfREVQT1NJVF9QUklaRSA9IDAuNSBldGhlcjsKICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBSQU5ET01fREVQT1NJVF9QUklaRTEgPSAwLjMgZXRoZXI7CiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgUkFORE9NX0RFUE9TSVRfUFJJWkUyID0gMC4yIGV0aGVyOwogICAgCiAgICBmdW5jdGlvbiBHb29MYXVuY2hQcm9tb3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gMSBldGhlcik7IC8vIE93bmVyIG11c3QgcHJvdmlkZSBlbm91Z2ggZm9yIHByaXplcwogICAgICAgIG93bmVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIAogICAgZnVuY3Rpb24gZGVwb3NpdChhZGRyZXNzIHJlZmVyZXIpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIHVpbnQyNTYgZXhpc3RpbmcgPSBkZXBvc2l0c1ttc2cuc2VuZGVyXTsKICAgICAgICAKICAgICAgICAvLyBTYWZlbHkgc3RvcmUgdGhlIGV0aGVyIHNlbnQKICAgICAgICBkZXBvc2l0c1ttc2cuc2VuZGVyXSA9IFNhZmVNYXRoLmFkZChtc2cudmFsdWUsIGV4aXN0aW5nKTsKICAgICAgICAKICAgICAgICAvLyBGaW5hbGx5IHN0b3JlIGNvbnRlc3QgZGV0YWlscwogICAgICAgIGlmIChtc2cudmFsdWUgPj0gMC4wMSBldGhlciAmJiAhZGVwb3NpdG9yQWxyZWFkeVN0b3JlZFttc2cuc2VuZGVyXSkgewogICAgICAgICAgICBkZXBvc2l0b3JzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgICAgIGRlcG9zaXRvckFscmVhZHlTdG9yZWRbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQ3JlZGl0IHJlZmVyYWwKICAgICAgICAgICAgaWYgKHJlZmVyZXIgIT0gYWRkcmVzcygwKSAmJiByZWZlcmVyICE9IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgICAgIHJlZmVyZXJhbHNbcmVmZXJlcl0ucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgICAgIGlmICghcmVmZXJlckFscmVhZHlTdG9yZWRbcmVmZXJlcl0pIHsKICAgICAgICAgICAgICAgICAgICByZWZlcmVyQWxyZWFkeVN0b3JlZFtyZWZlcmVyXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgdW5pcXVlUmVmZXJlcnMucHVzaChyZWZlcmVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVmdW5kKCkgZXh0ZXJuYWwgewogICAgICAgIC8vIFNhZmVseSB0cmFuc2ZlciBwbGF5ZXJzIGRlcG9zaXQgYmFjawogICAgICAgIHVpbnQyNTYgZGVwb3NpdEFtb3VudCA9IGRlcG9zaXRzW21zZy5zZW5kZXJdOwogICAgICAgIGRlcG9zaXRzW21zZy5zZW5kZXJdID0gMDsgLy8gQ2FuJ3Qgd2l0aGRyYXcgdHdpY2Ugb2J2aW91c2x5CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihkZXBvc2l0QW1vdW50KTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiByZWZ1bmRQbGF5ZXIoYWRkcmVzcyBkZXBvc2l0b3IpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXJBZGRyZXNzKTsKICAgICAgICAKICAgICAgICAvLyBTYWZlbHkgdHJhbnNmZXIgYmFjayB0byBwbGF5ZXIKICAgICAgICB1aW50MjU2IGRlcG9zaXRBbW91bnQgPSBkZXBvc2l0c1tkZXBvc2l0b3JdOwogICAgICAgIGRlcG9zaXRzW2RlcG9zaXRvcl0gPSAwOyAvLyBDYW4ndCB3aXRoZHJhdyB0d2ljZSBvYnZpb3VzbHkKICAgICAgICAKICAgICAgICAvLyBTZW5kcyBiYWNrIHRvIGNvcnJlY3QgZGVwb3NpdG9yCiAgICAgICAgZGVwb3NpdG9yLnRyYW5zZmVyKGRlcG9zaXRBbW91bnQpOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIGF3YXJkUHJpemVzKCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lckFkZHJlc3MpOwogICAgICAgIHJlcXVpcmUobm93ID49IExBVU5DSF9EQVRFKTsKICAgICAgICByZXF1aXJlKCFwcml6ZXNBd2FyZGVkKTsKICAgICAgICAKICAgICAgICAvLyBFbnN1cmUgb25seSByYW4gb25jZQogICAgICAgIHByaXplc0F3YXJkZWQgPSB0cnVlOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgaGlnaGVzdERlcG9zaXQ7CiAgICAgICAgYWRkcmVzcyBoaWdoZXN0RGVwb3NpdFdpbm5lcjsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBkZXBvc2l0b3JzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFkZHJlc3MgZGVwb3NpdG9yID0gZGVwb3NpdG9yc1tpXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIE5vIHRpZSBhbGxvd2VkIQogICAgICAgICAgICBpZiAoZGVwb3NpdHNbZGVwb3NpdG9yXSA+IGhpZ2hlc3REZXBvc2l0KSB7CiAgICAgICAgICAgICAgICBoaWdoZXN0RGVwb3NpdCA9IGRlcG9zaXRzW2RlcG9zaXRvcl07CiAgICAgICAgICAgICAgICBoaWdoZXN0RGVwb3NpdFdpbm5lciA9IGRlcG9zaXRvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50MjU2IG51bUNvbnRlc3RhbnRzID0gZGVwb3NpdG9ycy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBzZWVkMSA9IG51bUNvbnRlc3RhbnRzICsgYmxvY2sudGltZXN0YW1wOwogICAgICAgIHVpbnQyNTYgc2VlZDIgPSBzZWVkMSArIHVuaXF1ZVJlZmVyZXJzLmxlbmd0aDsKICAgICAgICAKICAgICAgICBhZGRyZXNzIHJhbmRvbURlcG9zaXRXaW5uZXIxID0gZGVwb3NpdG9yc1tyYW5kb21Db250ZXN0YW50KG51bUNvbnRlc3RhbnRzLCBzZWVkMSldOwogICAgICAgIGFkZHJlc3MgcmFuZG9tRGVwb3NpdFdpbm5lcjIgPSBkZXBvc2l0b3JzW3JhbmRvbUNvbnRlc3RhbnQobnVtQ29udGVzdGFudHMsIHNlZWQyKV07CiAgICAgICAgCiAgICAgICAgLy8gSnVzdCBpbmNhc2UKICAgICAgICB3aGlsZShyYW5kb21EZXBvc2l0V2lubmVyMiA9PSByYW5kb21EZXBvc2l0V2lubmVyMSkgewogICAgICAgICAgICBzZWVkMisrOwogICAgICAgICAgICByYW5kb21EZXBvc2l0V2lubmVyMiA9IGRlcG9zaXRvcnNbcmFuZG9tQ29udGVzdGFudChudW1Db250ZXN0YW50cywgc2VlZDIpXTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaGlnaGVzdERlcG9zaXRXaW5uZXIudHJhbnNmZXIoVE9QX0RFUE9TSVRfUFJJWkUpOwogICAgICAgIHJhbmRvbURlcG9zaXRXaW5uZXIxLnRyYW5zZmVyKFJBTkRPTV9ERVBPU0lUX1BSSVpFMSk7CiAgICAgICAgcmFuZG9tRGVwb3NpdFdpbm5lcjIudHJhbnNmZXIoUkFORE9NX0RFUE9TSVRfUFJJWkUyKTsKICAgIH0KICAgIAogICAgCiAgICAvLyBSYW5kb20gZW5vdWdoIGZvciBzbWFsbCBjb250ZXN0CiAgICBmdW5jdGlvbiByYW5kb21Db250ZXN0YW50KHVpbnQyNTYgY29udGVzdGFudHMsIHVpbnQyNTYgc2VlZCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiByZXN1bHQpewogICAgICAgIHJldHVybiBhZGRtb2QodWludDI1NihibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSwgc2VlZCwgY29udGVzdGFudHMpOyAgIAogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIG15UmVmZXJyYWxzKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIHJlZmVyZXJhbHNbbXNnLnNlbmRlcl07CiAgICB9CiAgICAKfQoKbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0='.
	

]
