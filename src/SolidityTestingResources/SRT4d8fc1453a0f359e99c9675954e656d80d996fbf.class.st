Class {
	#name : #SRT4d8fc1453a0f359e99c9675954e656d80d996fbf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d8fc1453a0f359e99c9675954e656d80d996fbf >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBCdXJuYWJsZSBUb2tlbgogKiBAZGV2IFRva2VuIHRoYXQgY2FuIGJlIGlycmV2ZXJzaWJseSBidXJuZWQgKGRlc3Ryb3llZCkuCiAqLwpjb250cmFjdCBCdXJuYWJsZVRva2VuIGlzIEJhc2ljVG9rZW4gewoKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGJ1cm5lciwgdWludDI1NiB2YWx1ZSk7CgogICAgLyoqCiAgICAgKiBAZGV2IEJ1cm5zIGEgc3BlY2lmaWMgYW1vdW50IG9mIHRva2Vucy4KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSBidXJuZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIG5vIG5lZWQgdG8gcmVxdWlyZSB2YWx1ZSA8PSB0b3RhbFN1cHBseSwgc2luY2UgdGhhdCB3b3VsZCBpbXBseSB0aGUKICAgICAgICAvLyBzZW5kZXIncyBiYWxhbmNlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWxTdXBwbHksIHdoaWNoICpzaG91bGQqIGJlIGFuIGFzc2VydGlvbiBmYWlsdXJlCgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tidXJuZXJdID0gYmFsYW5jZXNbYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgSW5jcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGRlY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKgogKiBCZWVUb2tlbiBpcyBhIHN0YW5kYXJkIEVSQzIwIHRva2VuIHdpdGggc29tZSBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdGllczoKICogLSBUcmFuc2ZlcnMgYXJlIG9ubHkgZW5hYmxlZCBhZnRlciBjb250cmFjdCBvd25lciBlbmFibGVzIGl0IChhZnRlciB0aGUgSUNPKQogKiAtIENvbnRyYWN0IHNldHMgMzAlIG9mIHRoZSB0b3RhbCBzdXBwbHkgYXMgYWxsb3dhbmNlIGZvciBJQ08gY29udHJhY3QKICoKICogTm90ZTogVG9rZW4gT2ZmZXJpbmcgPT0gSW5pdGlhbCBDb2luIE9mZmVyaW5nKElDTykKICovCgpjb250cmFjdCBCZWVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBCdXJuYWJsZVRva2VuLCBPd25hYmxlIHsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkJFRSI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQmVlIFRva2VuIjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSA1MDAwMDAwMDAgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9LRU5fT0ZGRVJJTkdfQUxMT1dBTkNFID0gMTUwMDAwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IEFETUlOX0FMTE9XQU5DRSA9IElOSVRJQUxfU1VQUExZIC0gVE9LRU5fT0ZGRVJJTkdfQUxMT1dBTkNFOwogICAgCiAgICAvLyBBZGRyZXNzIG9mIHRva2VuIGFkbWluCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbkFkZHI7CiAgICAvLyBBZGRyZXNzIG9mIHRva2VuIG9mZmVyaW5nCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk9mZmVyaW5nQWRkcjsKICAgIC8vIEVuYWJsZSB0cmFuc2ZlcnMgYWZ0ZXIgY29uY2x1c2lvbiBvZiB0b2tlbiBvZmZlcmluZwogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJFbmFibGVkID0gZmFsc2U7CiAgICAKICAgIC8qKgogICAgICogQ2hlY2sgaWYgdHJhbnNmZXIgaXMgYWxsb3dlZAogICAgICoKICAgICAqIFBlcm1pc3Npb25zOgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXIgICAgQWRtaW4gICAgT2ZmZWlybmdDb250cmFjdCAgICBPdGhlcnMKICAgICAqIHRyYW5zZmVyIChiZWZvcmUgdHJhbnNmZXJFbmFibGVkIGlzIHRydWUpICAgICAgICAgICAgICAgeCAgICAgICAgeCAgICAgICAgICAgIHggICAgICAgICAgICAgICB4CiAgICAgKiB0cmFuc2ZlckZyb20gKGJlZm9yZSB0cmFuc2ZlckVuYWJsZWQgaXMgdHJ1ZSkgICAgICAgICAgIHggICAgICAgIHYgICAgICAgICAgICB2ICAgICAgICAgICAgICAgeAogICAgICogdHJhbnNmZXIvdHJhbnNmZXJGcm9tIGFmdGVyIHRyYW5zZmVyRW5hYmxlZCBpcyB0cnVlICAgICB2ICAgICAgICB4ICAgICAgICAgICAgeCAgICAgICAgICAgICAgIHYKICAgICAqLwogICAgbW9kaWZpZXIgb25seVdoZW5UcmFuc2ZlckFsbG93ZWQoKSB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlckVuYWJsZWQgfHwgbXNnLnNlbmRlciA9PSBhZG1pbkFkZHIgfHwgbXNnLnNlbmRlciA9PSB0b2tlbk9mZmVyaW5nQWRkcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrIGlmIHRva2VuIG9mZmVyaW5nIGFkZHJlc3MgaXMgc2V0IG9yIG5vdAogICAgICovCiAgICBtb2RpZmllciBvbmx5VG9rZW5PZmZlcmluZ0FkZHJOb3RTZXQoKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlbk9mZmVyaW5nQWRkciA9PSBhZGRyZXNzKDB4MCkpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBhZGRyZXNzIGlzIGEgdmFsaWQgZGVzdGluYXRpb24gdG8gdHJhbnNmZXIgdG9rZW5zIHRvCiAgICAgKiAtIG11c3Qgbm90IGJlIHplcm8gYWRkcmVzcwogICAgICogLSBtdXN0IG5vdCBiZSB0aGUgdG9rZW4gYWRkcmVzcwogICAgICogLSBtdXN0IG5vdCBiZSB0aGUgb3duZXIncyBhZGRyZXNzCiAgICAgKiAtIG11c3Qgbm90IGJlIHRoZSBhZG1pbidzIGFkZHJlc3MKICAgICAqIC0gbXVzdCBub3QgYmUgdGhlIHRva2VuIG9mZmVyaW5nIGNvbnRyYWN0IGFkZHJlc3MKICAgICAqLwogICAgbW9kaWZpZXIgdmFsaWREZXN0aW5hdGlvbihhZGRyZXNzIHRvKSB7CiAgICAgICAgcmVxdWlyZSh0byAhPSBhZGRyZXNzKDB4MCkpOwogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmVxdWlyZSh0byAhPSBvd25lcik7CiAgICAgICAgcmVxdWlyZSh0byAhPSBhZGRyZXNzKGFkbWluQWRkcikpOwogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcyh0b2tlbk9mZmVyaW5nQWRkcikpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgICogVG9rZW4gY29udHJhY3QgY29uc3RydWN0b3IKICAgICAqCiAgICAgKiBAcGFyYW0gYWRtaW4gQWRkcmVzcyBvZiBhZG1pbiBhY2NvdW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIEJlZVRva2VuKGFkZHJlc3MgYWRtaW4pIHB1YmxpYyB7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICAKICAgICAgICAvLyBNaW50IHRva2VucwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcygweDApLCBtc2cuc2VuZGVyLCB0b3RhbFN1cHBseSk7CgogICAgICAgIC8vIEFwcHJvdmUgYWxsb3dhbmNlIGZvciBhZG1pbiBhY2NvdW50CiAgICAgICAgYWRtaW5BZGRyID0gYWRtaW47CiAgICAgICAgYXBwcm92ZShhZG1pbkFkZHIsIEFETUlOX0FMTE9XQU5DRSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgdG9rZW4gb2ZmZXJpbmcgdG8gYXBwcm92ZSBhbGxvd2FuY2UgZm9yIG9mZmVyaW5nIGNvbnRyYWN0IHRvIGRpc3RyaWJ1dGUgdG9rZW5zCiAgICAgKgogICAgICogQHBhcmFtIG9mZmVyaW5nQWRkciBBZGRyZXNzIG9mIHRva2VuIG9mZmVybmcgY29udHJhY3QKICAgICAqIEBwYXJhbSBhbW91bnRGb3JTYWxlIEFtb3VudCBvZiB0b2tlbnMgZm9yIHNhbGUsIHNldCAwIHRvIG1heCBvdXQKICAgICAqLwogICAgZnVuY3Rpb24gc2V0VG9rZW5PZmZlcmluZyhhZGRyZXNzIG9mZmVyaW5nQWRkciwgdWludDI1NiBhbW91bnRGb3JTYWxlKSBleHRlcm5hbCBvbmx5T3duZXIgb25seVRva2VuT2ZmZXJpbmdBZGRyTm90U2V0IHsKICAgICAgICByZXF1aXJlKCF0cmFuc2ZlckVuYWJsZWQpOwoKICAgICAgICB1aW50MjU2IGFtb3VudCA9IChhbW91bnRGb3JTYWxlID09IDApID8gVE9LRU5fT0ZGRVJJTkdfQUxMT1dBTkNFIDogYW1vdW50Rm9yU2FsZTsKICAgICAgICByZXF1aXJlKGFtb3VudCA8PSBUT0tFTl9PRkZFUklOR19BTExPV0FOQ0UpOwoKICAgICAgICBhcHByb3ZlKG9mZmVyaW5nQWRkciwgYW1vdW50KTsKICAgICAgICB0b2tlbk9mZmVyaW5nQWRkciA9IG9mZmVyaW5nQWRkcjsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBFbmFibGUgdHJhbnNmZXJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVyKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICB0cmFuc2ZlckVuYWJsZWQgPSB0cnVlOwoKICAgICAgICAvLyBFbmQgdGhlIG9mZmVyaW5nCiAgICAgICAgYXBwcm92ZSh0b2tlbk9mZmVyaW5nQWRkciwgMCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciBmcm9tIHNlbmRlciB0byBhbm90aGVyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gdG8gRGVzdGluYXRpb24gYWRkcmVzcwogICAgICogQHBhcmFtIHZhbHVlIEFtb3VudCBvZiBiZWV0b2tlbnMgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgb25seVdoZW5UcmFuc2ZlckFsbG93ZWQgdmFsaWREZXN0aW5hdGlvbih0bykgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2Zlcih0bywgdmFsdWUpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFRyYW5zZmVyIGZyb20gYGZyb21gIGFjY291bnQgdG8gYHRvYCBhY2NvdW50IHVzaW5nIGFsbG93YW5jZSBpbiBgZnJvbWAgYWNjb3VudCB0byB0aGUgc2VuZGVyCiAgICAgKgogICAgICogQHBhcmFtIGZyb20gT3JpZ2luIGFkZHJlc3MKICAgICAqIEBwYXJhbSB0byBEZXN0aW5hdGlvbiBhZGRyZXNzCiAgICAgKiBAcGFyYW0gdmFsdWUgQW1vdW50IG9mIGJlZXRva2VucyB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBvbmx5V2hlblRyYW5zZmVyQWxsb3dlZCB2YWxpZERlc3RpbmF0aW9uKHRvKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEJ1cm4gdG9rZW4sIG9ubHkgb3duZXIgaXMgYWxsb3dlZCB0byBkbyB0aGlzCiAgICAgKgogICAgICogQHBhcmFtIHZhbHVlIEFtb3VudCBvZiB0b2tlbnMgdG8gYnVybgogICAgICovCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlckVuYWJsZWQgfHwgbXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgc3VwZXIuYnVybih2YWx1ZSk7CiAgICB9Cn0KCmNvbnRyYWN0IEJlZVRva2VuT2ZmZXJpbmcgaXMgUGF1c2FibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLy8gU3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGNvbnRyaWJ1dGlvbnMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgZW5kVGltZTsKCiAgICAvLyBBZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwoKICAgIC8vIFRva2VuIHRvIGJlIHNvbGQKICAgIEJlZVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgICAvLyBQcmljZSBvZiB0aGUgdG9rZW5zIGFzIGluIHRva2VucyBwZXIgZXRoZXIKICAgIHVpbnQyNTYgcHVibGljIHJhdGU7CgogICAgLy8gQW1vdW50IG9mIHJhaXNlZCBpbiBXZWkgKDEgZXRoZXIpCiAgICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogICAgLy8gVGltZWxpbmVzIGZvciBkaWZmZXJlbnQgY29udHJpYnV0aW9uIGxpbWl0IHBvbGljeQogICAgdWludDI1NiBwdWJsaWMgY2FwRG91YmxpbmdUaW1lc3RhbXA7CiAgICB1aW50MjU2IHB1YmxpYyBjYXBSZWxlYXNlVGltZXN0YW1wOwoKICAgIC8vIEluZGl2aWR1YWwgY29udHJpYnV0aW9uIGxpbWl0cyBpbiBXZWkgcGVyIHRpZXIKICAgIHVpbnQyNTZbM10gcHVibGljIHRpZXJDYXBzOwoKICAgIC8vIFdoaXRlbGlzdHMgb2YgcGFydGljaXBhbnQgYWRkcmVzcyBmb3IgZWFjaCB0aWVyCiAgICBtYXBwaW5nKHVpbnQ4ID0+IG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSkgcHVibGljIHdoaXRlbGlzdHM7CgogICAgLy8gQ29udHJpYnV0aW9ucyBpbiBXZWkgZm9yIGVhY2ggcGFydGljaXBhbnQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgY29udHJpYnV0aW9uczsKCiAgICAvLyBGdW5kaW5nIGNhcCBpbiBFVEguIENoYW5nZSB0byBlcXVhbCAkNU0gYXQgdGltZSBvZiB0b2tlbiBvZmZlcmluZwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgRlVORElOR19FVEhfSEFSRF9DQVAgPSA1MDAwICogMSBldGhlcjsKCiAgICAvLyBUaGUgY3VycmVudCBzdGFnZSBvZiB0aGUgb2ZmZXJpbmcKICAgIFN0YWdlcyBwdWJsaWMgc3RhZ2U7CgogICAgZW51bSBTdGFnZXMgeyAKICAgICAgICBTZXR1cCwKICAgICAgICBPZmZlcmluZ1N0YXJ0ZWQsCiAgICAgICAgT2ZmZXJpbmdFbmRlZAogICAgfQoKICAgIGV2ZW50IE9mZmVyaW5nT3BlbnModWludDI1NiBzdGFydFRpbWUsIHVpbnQyNTYgZW5kVGltZSk7CiAgICBldmVudCBPZmZlcmluZ0Nsb3Nlcyh1aW50MjU2IGVuZFRpbWUsIHVpbnQyNTYgdG90YWxXZWlSYWlzZWQpOwogICAgLyoqCiAgICAgKiBFdmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAgICoKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgV2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSB2YWx1ZSBXZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICAgKiBAcmV0dXJuIGFtb3VudCBBbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAgICovCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgICAvKioKICAgICAqIE1vZGlmaWVyIHRoYXQgcmVxdWlyZXMgY2VydGFpbiBzdGFnZSBiZWZvcmUgZXhlY3V0aW5nIHRoZSBtYWluIGZ1bmN0aW9uIGJvZHkKICAgICAqCiAgICAgKiBAcGFyYW0gZXhwZWN0ZWRTdGFnZSBWYWx1ZSB0aGF0IHRoZSBjdXJyZW50IHN0YWdlIGlzIHJlcXVpcmVkIHRvIG1hdGNoCiAgICAgKi8KICAgIG1vZGlmaWVyIGF0U3RhZ2UoU3RhZ2VzIGV4cGVjdGVkU3RhZ2UpIHsKICAgICAgICByZXF1aXJlKHN0YWdlID09IGV4cGVjdGVkU3RhZ2UpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBNb2RpZmllciB0aGF0IHZhbGlkYXRlcyBhIHB1cmNoYXNlIGF0IGEgdGllcgogICAgICogQWxsIHRoZSBmb2xsb3dpbmcgaGFzIHRvIGJlIG1ldDoKICAgICAqIC0gY3VycmVudCB0aW1lIHdpdGhpbiB0aGUgb2ZmZXJpbmcgcGVyaW9kCiAgICAgKiAtIHZhbGlkIHNlbmRlciBhZGRyZXNzIGFuZCBldGhlciB2YWx1ZSBncmVhdGVyIHRoYW4gMC4xCiAgICAgKiAtIHRvdGFsIFdlaSByYWlzZWQgbm90IGdyZWF0ZXIgdGhhbiBGVU5ESU5HX0VUSF9IQVJEX0NBUAogICAgICogLSBjb250cmlidXRpb24gcGVyIHBlcnRpY2lwYW50IHdpdGhpbiBjb250cmlidXRpb24gbGltaXQKICAgICAqCiAgICAgKiBAcGFyYW0gdGllciBJbmRleCBvZiB0aGUgdGllcgogICAgICovCiAgICBtb2RpZmllciB2YWxpZFB1cmNoYXNlKHVpbnQ4IHRpZXIpIHsKICAgICAgICByZXF1aXJlKHRpZXIgPCB0aWVyQ2Fwcy5sZW5ndGgpOwogICAgICAgIHJlcXVpcmUobm93ID49IHN0YXJ0VGltZSAmJiBub3cgPD0gZW5kVGltZSAmJiBzdGFnZSA9PSBTdGFnZXMuT2ZmZXJpbmdTdGFydGVkKTsKCiAgICAgICAgdWludDI1NiBjb250cmlidXRpb25JbldlaSA9IG1zZy52YWx1ZTsKICAgICAgICBhZGRyZXNzIHBhcnRpY2lwYW50ID0gbXNnLnNlbmRlcjsKICAgICAgICByZXF1aXJlKHBhcnRpY2lwYW50ICE9IGFkZHJlc3MoMCkgJiYgY29udHJpYnV0aW9uSW5XZWkgPiAxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgICAgIHJlcXVpcmUod2VpUmFpc2VkLmFkZChjb250cmlidXRpb25JbldlaSkgPD0gRlVORElOR19FVEhfSEFSRF9DQVApOwoKICAgICAgICB1aW50MjU2IGluaXRpYWxDYXBJbldlaSA9IHRpZXJDYXBzW3RpZXJdOwogICAgICAgIAogICAgICAgIGlmIChub3cgPCBjYXBEb3VibGluZ1RpbWVzdGFtcCkgewogICAgICAgICAgICByZXF1aXJlKGNvbnRyaWJ1dGlvbnNbcGFydGljaXBhbnRdLmFkZChjb250cmlidXRpb25JbldlaSkgPD0gaW5pdGlhbENhcEluV2VpKTsKICAgICAgICB9IGVsc2UgaWYgKG5vdyA8IGNhcFJlbGVhc2VUaW1lc3RhbXApIHsKICAgICAgICAgICAgcmVxdWlyZShjb250cmlidXRpb25zW3BhcnRpY2lwYW50XS5hZGQoY29udHJpYnV0aW9uSW5XZWkpIDw9IGluaXRpYWxDYXBJbldlaS5tdWwoMikpOwogICAgICAgIH0KCiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgY29udHJhY3QuCiAgICAgKiBOb3RlOiB0aWVyQ2Fwc1t0aWVyXSBkZWZpbmUgdGhlIGluZGl2aWR1YWwgY29udHJpYnV0aW9uIGxpbWl0cyBpbiBXZWkgb2YgZWFjaCBhZGRyZXNzCiAgICAgKiBwZXIgdGllciB3aXRoaW4gdGhlIGZpcnN0IHRyYW5jaGUgb2YgdGhlIHNhbGUgKHNhbGUgc3RhcnQgfiBjYXBEb3VibGluZ1RpbWVzdGFtcCkKICAgICAqIHRoZXNlIGxpbWl0cyBhcmUgZG91YmxlZCBiZXR3ZWVuIGNhcERvdWJsaW5nVGltZXN0YW1wIH4gY2FwUmVsZWFzZVRpbWVzdGFtcAogICAgICogYW5kIGFyZSBsaWZ0ZWQgY29tcGxldGVseSBiZXR3ZWVuIGNhcFJlbGVhc2VUaW1lc3RhbXAgfiBlbmQgdGltZQogICAgICogIAogICAgICogQHBhcmFtIGJlZVRvRXRoZXJSYXRlIE51bWJlciBvZiBiZWV0b2tlbnMgcGVyIGV0aGVyCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnlBZGRyIEFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgICogQHBhcmFtIGJhc2VDb250cmlidXRpb25DYXBJbldlaSBCYXNlIGNvbnRyaWJ1dGlvbiBsaW1pdCBpbiBXZWkgcGVyIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gQmVlVG9rZW5PZmZlcmluZygKICAgICAgICB1aW50MjU2IGJlZVRvRXRoZXJSYXRlLCAKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5QWRkciwgCiAgICAgICAgdWludDI1NiBiYXNlQ29udHJpYnV0aW9uQ2FwSW5XZWksCiAgICAgICAgYWRkcmVzcyB0b2tlbkFkZHJlc3MKICAgICkgcHVibGljIHsKICAgICAgICByZXF1aXJlKGJlZVRvRXRoZXJSYXRlID4gMCk7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeUFkZHIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh0b2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHRva2VuID0gQmVlVG9rZW4odG9rZW5BZGRyZXNzKTsKICAgICAgICByYXRlID0gYmVlVG9FdGhlclJhdGU7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBiZW5lZmljaWFyeUFkZHI7CiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuU2V0dXA7CgogICAgICAgIC8vIENvbnRyaWJ1dGlvbiBjYXAgcGVyIHRpZXIgaW4gV2VpCiAgICAgICAgdGllckNhcHNbMF0gPSBiYXNlQ29udHJpYnV0aW9uQ2FwSW5XZWkubXVsKDMpOwogICAgICAgIHRpZXJDYXBzWzFdID0gYmFzZUNvbnRyaWJ1dGlvbkNhcEluV2VpLm11bCgyKTsKICAgICAgICB0aWVyQ2Fwc1syXSA9IGJhc2VDb250cmlidXRpb25DYXBJbldlaTsKICAgIH0KCiAgICAvKioKICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGJ1eSgpOwogICAgfQoKICAgIC8qKgogICAgICogV2l0aGRyYXcgYXZhaWxhYmxlIGV0aGVycyBpbnRvIGJlbmVmaWNpYXJ5IGFjY291bnQsIHNlcnZlcyBhcyBhIHNhZmV0eSwgc2hvdWxkIG5ldmVyIGJlIG5lZWRlZAogICAgICovCiAgICBmdW5jdGlvbiBvd25lclNhZmVXaXRoZHJhd2FsKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVJhdGUodWludDI1NiBiZWVUb0V0aGVyUmF0ZSkgcHVibGljIG9ubHlPd25lciBhdFN0YWdlKFN0YWdlcy5TZXR1cCkgewogICAgICAgIHJhdGUgPSBiZWVUb0V0aGVyUmF0ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFdoaXRlbGlzdCBwYXJ0aWNpcGFudCBhZGRyZXNzIHBlciB0aWVyCiAgICAgKiAKICAgICAqIEBwYXJhbSB0aWVycyBBcnJheSBvZiBpbmRpY2VzIG9mIHRpZXIsIGVhY2ggdmFsdWUgc2hvdWxkIGJlIGxlc3MgdGhhbiB0aWVyQ2Fwcy5sZW5ndGgKICAgICAqIEBwYXJhbSB1c2VycyBBcnJheSBvZiBhZGRyZXNzZXMgdG8gYmUgd2hpdGVsaXN0ZWQKICAgICAqLwogICAgZnVuY3Rpb24gd2hpdGVsaXN0KHVpbnQ4W10gdGllcnMsIGFkZHJlc3NbXSB1c2VycykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSh0aWVycy5sZW5ndGggPT0gdXNlcnMubGVuZ3RoKTsKICAgICAgICBmb3IgKHVpbnQzMiBpID0gMDsgaSA8IHVzZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHJlcXVpcmUodGllcnNbaV0gPCB0aWVyQ2Fwcy5sZW5ndGgpOwogICAgICAgICAgICB3aGl0ZWxpc3RzW3RpZXJzW2ldXVt1c2Vyc1tpXV0gPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFN0YXJ0IHRoZSBvZmZlcmluZwogICAgICoKICAgICAqIEBwYXJhbSBkdXJhdGlvbkluU2Vjb25kcyBFeHRyYSBkdXJhdGlvbiBvZiB0aGUgb2ZmZXJpbmcgb24gdG9wIG9mIHRoZSBtaW5pbXVtIDQ4IGhvdXJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHN0YXJ0T2ZmZXJpbmcodWludDI1NiBkdXJhdGlvbkluU2Vjb25kcykgcHVibGljIG9ubHlPd25lciBhdFN0YWdlKFN0YWdlcy5TZXR1cCkgewogICAgICAgIHN0YWdlID0gU3RhZ2VzLk9mZmVyaW5nU3RhcnRlZDsKICAgICAgICBzdGFydFRpbWUgPSBub3c7CiAgICAgICAgY2FwRG91YmxpbmdUaW1lc3RhbXAgPSBzdGFydFRpbWUgKyAyNCBob3VyczsKICAgICAgICBjYXBSZWxlYXNlVGltZXN0YW1wID0gc3RhcnRUaW1lICsgNDggaG91cnM7CiAgICAgICAgZW5kVGltZSA9IGNhcFJlbGVhc2VUaW1lc3RhbXAuYWRkKGR1cmF0aW9uSW5TZWNvbmRzKTsKICAgICAgICBPZmZlcmluZ09wZW5zKHN0YXJ0VGltZSwgZW5kVGltZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBFbmQgdGhlIG9mZmVyaW5nCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuZE9mZmVyaW5nKCkgcHVibGljIG9ubHlPd25lciBhdFN0YWdlKFN0YWdlcy5PZmZlcmluZ1N0YXJ0ZWQpIHsKICAgICAgICBlbmRPZmZlcmluZ0ltcGwoKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBGdW5jdGlvbiB0byBpbnZlc3QgZXRoZXIgdG8gYnV5IHRva2VucywgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBvciBjYWxsZWQgYnkgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uCiAgICAgKiBPbmx5IHdoaXRlbGlzdGVkIHVzZXJzIGNhbiBidXkgdG9rZW5zLgogICAgICoKICAgICAqIEByZXR1cm4gYm9vbCBSZXR1cm4gdHJ1ZSBpZiBwdXJjaGFzZSBzdWNjZWVkcywgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgYXRTdGFnZShTdGFnZXMuT2ZmZXJpbmdTdGFydGVkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgZm9yICh1aW50OCBpID0gMDsgaSA8IHRpZXJDYXBzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmICh3aGl0ZWxpc3RzW2ldW21zZy5zZW5kZXJdKSB7CiAgICAgICAgICAgICAgICBidXlUb2tlbnNUaWVyKGkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBvZmZlcmluZyBoYXMgZW5kZWQKICAgICAqIAogICAgICogQHJldHVybiBib29sIFJldHVybiB0cnVlIGlmIHRva2VuIG9mZmVyaW5nIGhhcyBlbmRlZAogICAgICovCiAgICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gbm93ID4gZW5kVGltZSB8fCBzdGFnZSA9PSBTdGFnZXMuT2ZmZXJpbmdFbmRlZDsKICAgIH0KCiAgICAvKioKICAgICAqIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgYnV5cyB0b2tlbiBwZXIgdGllcgogICAgICogCiAgICAgKiBJbnZlc3RpbWVudCBsaW1pdCBjaGFuZ2VzIG92ZXIgdGltZToKICAgICAqIDEpIFtvZmZlcmluZyBzdGFydHMgfiBjYXBEb3VibGluZ1RpbWVzdGFtcF06ICAgICAxeCBvZiBjb250cmlidXRpb24gbGltaXQgcGVyIHRpZXIgKDEgKiB0aWVyQ2Fwc1t0aWVyXSkKICAgICAqIDIpIFtjYXBEb3VibGluZ1RpbWVzdGFtcCB+IGNhcFJlbGVhc2VUaW1lc3RhbXBdOiBsaW1pdCBwZXIgcGFydGljaXBhbnQgaXMgcmFpc2VkIHRvIDJ4IG9mIGNvbnRyaWJ1dGlvbiBsaW1pdCBwZXIgdGllciAoMiAqIHRpZXJDYXBzW3RpZXJdKQogICAgICogMykgW2NhcFJlbGVhc2VUaW1lc3RhbXAgfiBvZmZlcmluZyBlbmRzXTogICAgICAgIG5vIGxpbWl0IHBlciBwYXJ0aWNpcGFudCBhcyBhbG9uZyBhcyB0b3RhbCBXZWkgcmFpc2VkIGlzIHdpdGhpbiBGVU5ESU5HX0VUSF9IQVJEX0NBUAogICAgICoKICAgICAqIEBwYXJhbSB0aWVyIEluZGV4IG9mIHRpZXIgb2Ygd2hpdGVsaXN0ZWQgcGFydGljaXBhbnQKICAgICAqLwogICAgZnVuY3Rpb24gYnV5VG9rZW5zVGllcih1aW50OCB0aWVyKSBpbnRlcm5hbCB2YWxpZFB1cmNoYXNlKHRpZXIpIHsKICAgICAgICBhZGRyZXNzIHBhcnRpY2lwYW50ID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IGNvbnRyaWJ1dGlvbkluV2VpID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBDYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGRpc3RyaWJ1dGVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBjb250cmlidXRpb25JbldlaS5tdWwocmF0ZSk7CiAgICAgICAgCiAgICAgICAgaWYgKCF0b2tlbi50cmFuc2ZlckZyb20odG9rZW4ub3duZXIoKSwgcGFydGljaXBhbnQsIHRva2VucykpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKGNvbnRyaWJ1dGlvbkluV2VpKTsKICAgICAgICBjb250cmlidXRpb25zW3BhcnRpY2lwYW50XSA9IGNvbnRyaWJ1dGlvbnNbcGFydGljaXBhbnRdLmFkZChjb250cmlidXRpb25JbldlaSk7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZ1bmRpbmcgY2FwIGhhcyBiZWVuIHJlYWNoZWQsIGVuZCB0aGUgb2ZmZXJpbmcgaWYgc28KICAgICAgICBpZiAod2VpUmFpc2VkID49IEZVTkRJTkdfRVRIX0hBUkRfQ0FQKSB7CiAgICAgICAgICAgIGVuZE9mZmVyaW5nSW1wbCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBUcmFuc2ZlciBmdW5kcyB0byBiZW5lZmljaWFyeQogICAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKGNvbnRyaWJ1dGlvbkluV2VpKTsKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGNvbnRyaWJ1dGlvbkluV2VpLCB0b2tlbnMpOyAgICAgICAKICAgIH0KCiAgICAvKioKICAgICAqIEVuZCB0b2tlbiBvZmZlcmluZyBieSBzZXQgdGhlIHN0YWdlIGFuZCBlbmRUaW1lCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVuZE9mZmVyaW5nSW1wbCgpIGludGVybmFsIHsKICAgICAgICBlbmRUaW1lID0gbm93OwogICAgICAgIHN0YWdlID0gU3RhZ2VzLk9mZmVyaW5nRW5kZWQ7CiAgICAgICAgT2ZmZXJpbmdDbG9zZXMoZW5kVGltZSwgd2VpUmFpc2VkKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFsbG9jYXRlIHRva2VucyBmb3IgcHJlc2FsZSBwYXJ0aWNpcGFudHMgYmVmb3JlIHB1YmxpYyBvZmZlcmluZywgY2FuIG9ubHkgYmUgZXhlY3V0ZWQgYXQgU3RhZ2VzLlNldHVwIHN0YWdlLgogICAgICoKICAgICAqIEBwYXJhbSB0byBQYXJ0aWNpcGFudCBhZGRyZXNzIHRvIHNlbmQgYmVldG9rZW5zIHRvCiAgICAgKiBAcGFyYW0gdG9rZW5zIEFtb3VudCBvZiBiZWV0b2tlbnMgdG8gYmUgc2VudCB0byBwYXJjaXRpcGFudCAKICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVUb2tlbnNCZWZvcmVPZmZlcmluZyhhZGRyZXNzIHRvLCB1aW50MjU2IHRva2VucykKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgICAgICBhdFN0YWdlKFN0YWdlcy5TZXR1cCkKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmICghdG9rZW4udHJhbnNmZXJGcm9tKHRva2VuLm93bmVyKCksIHRvLCB0b2tlbnMpKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBCdWxrIHZlcnNpb24gb2YgYWxsb2NhdGVUb2tlbnNCZWZvcmVPZmZlcmluZwogICAgICovCiAgICBmdW5jdGlvbiBiYXRjaEFsbG9jYXRlVG9rZW5zQmVmb3JlT2ZmZXJpbmcoYWRkcmVzc1tdIHRvTGlzdCwgdWludDI1NltdIHRva2Vuc0xpc3QpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgICAgICBhdFN0YWdlKFN0YWdlcy5TZXR1cCkKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUodG9MaXN0Lmxlbmd0aCA9PSB0b2tlbnNMaXN0Lmxlbmd0aCk7CgogICAgICAgIGZvciAodWludDMyIGkgPSAwOyBpIDwgdG9MaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFsbG9jYXRlVG9rZW5zQmVmb3JlT2ZmZXJpbmcodG9MaXN0W2ldLCB0b2tlbnNMaXN0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cgp9'.
	

]
