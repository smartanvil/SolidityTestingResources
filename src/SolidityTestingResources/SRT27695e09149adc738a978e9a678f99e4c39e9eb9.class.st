Class {
	#name : #SRT27695e09149adc738a978e9a678f99e4c39e9eb9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT27695e09149adc738a978e9a678f99e4c39e9eb9 >> base64 [
	^ ''.
	

]
