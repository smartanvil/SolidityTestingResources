Class {
	#name : #SRT014b50466590340d41307cc54dcee990c8d58aa8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT014b50466590340d41307cc54dcee990c8d58aa8 >> base64 [
	^ 'LyoKICogSUNPUyBUb2tlbiBTbWFydCBDb250cmFjdC4gIENvcHlyaWdodCAmIzE2OTsgMjAxNyBieSBBQkRLIENvbnN1bHRpbmcuCiAqIEF1dGhvcjogTWlraGFpbCBWbGFkaW1pcm92IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjVmMzIzNjM0MzczZTM2MzM3MTI5MzMzZTNiMzYzMjM2MmQzMDI5MWYzOCI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj5tYWlsLmNvbT4KICovCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCmNvbnRyYWN0IFRva2VuIHsKICAvKioKICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbi4KICAgKgogICAqIEByZXR1cm4gdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbgogICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKCiAgLyoqCiAgICogR2V0IG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGJlbG9uZ2luZyB0byBnaXZlbiBvd25lci4KICAgKgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZQogICAqICAgICAgICBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4KICAgKiAgICAgICAgcmVjaXBpZW50CiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLyoqCiAgICogQWxsb3cgZ2l2ZW4gc3BlbmRlciB0byB0cmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBhbGxvdyB0aGUgb3duZXIgb2YgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20KICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYWxsb3cgdG8gdHJhbnNmZXIKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW4gdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWxseSBhcHByb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogIC8qKgogICAqIFRlbGwgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbQogICAqIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIHRvIGJlIHRyYW5zZmVycmVkCiAgICogICAgICAgIGJ5IHRoZSBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBnaXZlbiBzcGVuZGVyIGlzIGN1cnJlbnRseSBhbGxvd2VkIHRvIHRyYW5zZmVyCiAgICogICAgICAgICBmcm9tIGdpdmVuIG93bmVyCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlIChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIGZyb20gb25lIG93bmVyIHRvIGFub3RoZXIuCiAgICoKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBvZiB0aGUgb3duZXIsIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3Mgb2YgdGhlIG93bmVyLCB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCB0bwogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0cmFuc2ZlcnJlZAogICAqLwogIGV2ZW50IFRyYW5zZmVyIChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgLyoqCiAgICogTG9nZ2VkIHdoZW4gb3duZXIgYXBwcm92ZWQgaGlzIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZCBieSBzb21lIHNwZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX293bmVyIG93bmVyIHdobyBhcHByb3ZlZCBoaXMgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICogQHBhcmFtIF9zcGVuZGVyIHNwZW5kZXIgd2hvIHdlcmUgYWxsb3dlZCB0byB0cmFuc2ZlciB0aGUgdG9rZW5zIGJlbG9uZ2luZwogICAqICAgICAgICB0byB0aGUgb3duZXIKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgYmVsb25naW5nIHRvIHRoZSBvd25lciwgYXBwcm92ZWQgdG8gYmUKICAgKiAgICAgICAgdHJhbnNmZXJyZWQgYnkgdGhlIHNwZW5kZXIKICAgKi8KICBldmVudCBBcHByb3ZhbCAoCiAgICBhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQovKgogKiBTYWZlIE1hdGggU21hcnQgQ29udHJhY3QuICBDb3B5cmlnaHQgJiMxNjk7IDIwMTbigJMyMDE3IGJ5IEFCREsgQ29uc3VsdGluZy4KICogQXV0aG9yOiBNaWtoYWlsIFZsYWRpbWlyb3YgPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iMzQ1OTVkNWY1YzU1NWQ1ODFhNDI1ODU1NTA1ZDU5NWQ0NjViNDI3NDUzNTk1NTVkNTgxYTU3NWI1OSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+CiAqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCi8qKgogKiBQcm92aWRlcyBtZXRob2RzIHRvIHNhZmVseSBhZGQsIHN1YnRyYWN0IGFuZCBtdWx0aXBseSB1aW50MjU2IG51bWJlcnMuCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CiAgdWludDI1NiBjb25zdGFudCBwcml2YXRlIE1BWF9VSU5UMjU2ID0KICAgIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgLyoqCiAgICogQWRkIHR3byB1aW50MjU2IHZhbHVlcywgdGhyb3cgaW4gY2FzZSBvZiBvdmVyZmxvdy4KICAgKgogICAqIEBwYXJhbSB4IGZpcnN0IHZhbHVlIHRvIGFkZAogICAqIEBwYXJhbSB5IHNlY29uZCB2YWx1ZSB0byBhZGQKICAgKiBAcmV0dXJuIHggKyB5CiAgICovCiAgZnVuY3Rpb24gc2FmZUFkZCAodWludDI1NiB4LCB1aW50MjU2IHkpCiAgY29uc3RhbnQgaW50ZXJuYWwKICByZXR1cm5zICh1aW50MjU2IHopIHsKICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLSB5KSB0aHJvdzsKICAgIHJldHVybiB4ICsgeTsKICB9CgogIC8qKgogICAqIFN1YnRyYWN0IG9uZSB1aW50MjU2IHZhbHVlIGZyb20gYW5vdGhlciwgdGhyb3cgaW4gY2FzZSBvZiB1bmRlcmZsb3cuCiAgICoKICAgKiBAcGFyYW0geCB2YWx1ZSB0byBzdWJ0cmFjdCBmcm9tCiAgICogQHBhcmFtIHkgdmFsdWUgdG8gc3VidHJhY3QKICAgKiBAcmV0dXJuIHggLSB5CiAgICovCiAgZnVuY3Rpb24gc2FmZVN1YiAodWludDI1NiB4LCB1aW50MjU2IHkpCiAgY29uc3RhbnQgaW50ZXJuYWwKICByZXR1cm5zICh1aW50MjU2IHopIHsKICAgIGlmICh4IDwgeSkgdGhyb3c7CiAgICByZXR1cm4geCAtIHk7CiAgfQoKICAvKioKICAgKiBNdWx0aXBseSB0d28gdWludDI1NiB2YWx1ZXMsIHRocm93IGluIGNhc2Ugb2Ygb3ZlcmZsb3cuCiAgICoKICAgKiBAcGFyYW0geCBmaXJzdCB2YWx1ZSB0byBtdWx0aXBseQogICAqIEBwYXJhbSB5IHNlY29uZCB2YWx1ZSB0byBtdWx0aXBseQogICAqIEByZXR1cm4geCAqIHkKICAgKi8KICBmdW5jdGlvbiBzYWZlTXVsICh1aW50MjU2IHgsIHVpbnQyNTYgeSkKICBjb25zdGFudCBpbnRlcm5hbAogIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgaWYgKHkgPT0gMCkgcmV0dXJuIDA7IC8vIFByZXZlbnQgZGl2aXNpb24gYnkgemVybyBhdCB0aGUgbmV4dCBsaW5lCiAgICBpZiAoeCA+IE1BWF9VSU5UMjU2IC8geSkgdGhyb3c7CiAgICByZXR1cm4geCAqIHk7CiAgfQp9Ci8qKgogKiBBYnN0cmFjdCBUb2tlbiBTbWFydCBDb250cmFjdCB0aGF0IGNvdWxkIGJlIHVzZWQgYXMgYSBiYXNlIGNvbnRyYWN0IGZvcgogKiBFUkMtMjAgdG9rZW4gY29udHJhY3RzLgogKi8KY29udHJhY3QgQWJzdHJhY3RUb2tlbiBpcyBUb2tlbiwgU2FmZU1hdGggewogIC8qKgogICAqIENyZWF0ZSBuZXcgQWJzdHJhY3QgVG9rZW4gY29udHJhY3QuCiAgICovCiAgZnVuY3Rpb24gQWJzdHJhY3RUb2tlbiAoKSB7CiAgICAvLyBEbyBub3RoaW5nCiAgfQoKICAvKioKICAgKiBHZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlCiAgICogICAgICAgIG93bmVyIG9mCiAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YgKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBhY2NvdW50cyBbX293bmVyXTsKICB9CgogIC8qKgogICAqIFRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBtZXNzYWdlIHNlbmRlciB0byBnaXZlbiByZWNpcGllbnQuCiAgICoKICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIHRvIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlciB0byB0aGUgb3duZXIgb2YgZ2l2ZW4gYWRkcmVzcwogICAqIEByZXR1cm4gdHJ1ZSBpZiB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyIChhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGFjY291bnRzIFttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOwogICAgaWYgKF92YWx1ZSA+IDAgJiYgbXNnLnNlbmRlciAhPSBfdG8pIHsKICAgICAgYWNjb3VudHMgW21zZy5zZW5kZXJdID0gc2FmZVN1YiAoYWNjb3VudHMgW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICBhY2NvdW50cyBbX3RvXSA9IHNhZmVBZGQgKGFjY291bnRzIFtfdG9dLCBfdmFsdWUpOwogICAgICBUcmFuc2ZlciAobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbgogICAqICAgICAgICByZWNpcGllbnQKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20gKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChhbGxvd2FuY2VzIFtfZnJvbV1bbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHJldHVybiBmYWxzZTsKICAgIGlmIChhY2NvdW50cyBbX2Zyb21dIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7CgogICAgYWxsb3dhbmNlcyBbX2Zyb21dW21zZy5zZW5kZXJdID0KICAgICAgc2FmZVN1YiAoYWxsb3dhbmNlcyBbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOwoKICAgIGlmIChfdmFsdWUgPiAwICYmIF9mcm9tICE9IF90bykgewogICAgICBhY2NvdW50cyBbX2Zyb21dID0gc2FmZVN1YiAoYWNjb3VudHMgW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgYWNjb3VudHMgW190b10gPSBzYWZlQWRkIChhY2NvdW50cyBbX3RvXSwgX3ZhbHVlKTsKICAgICAgVHJhbnNmZXIgKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEFsbG93IGdpdmVuIHNwZW5kZXIgdG8gdHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyLgogICAqCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgdG8gYWxsb3cgdGhlIG93bmVyIG9mIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tCiAgICogICAgICAgIG1lc3NhZ2Ugc2VuZGVyCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIGFsbG93IHRvIHRyYW5zZmVyCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VuIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsbHkgYXBwcm92ZWQsIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93YW5jZXMgW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsIChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIFRlbGwgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbQogICAqIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIHRvIGJlIHRyYW5zZmVycmVkCiAgICogICAgICAgIGJ5IHRoZSBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBnaXZlbiBzcGVuZGVyIGlzIGN1cnJlbnRseSBhbGxvd2VkIHRvIHRyYW5zZmVyCiAgICogICAgICAgICBmcm9tIGdpdmVuIG93bmVyCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlIChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93YW5jZXMgW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogTWFwcGluZyBmcm9tIGFkZHJlc3NlcyBvZiB0b2tlbiBob2xkZXJzIHRvIHRoZSBudW1iZXJzIG9mIHRva2VucyBiZWxvbmdpbmcKICAgKiB0byB0aGVzZSB0b2tlbiBob2xkZXJzLgogICAqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYWNjb3VudHM7CgogIC8qKgogICAqIE1hcHBpbmcgZnJvbSBhZGRyZXNzZXMgb2YgdG9rZW4gaG9sZGVycyB0byB0aGUgbWFwcGluZyBvZiBhZGRyZXNzZXMgb2YKICAgKiBzcGVuZGVycyB0byB0aGUgYWxsb3dhbmNlcyBzZXQgYnkgdGhlc2UgdG9rZW4gaG9sZGVycyB0byB0aGVzZSBzcGVuZGVycy4KICAgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHByaXZhdGUgYWxsb3dhbmNlczsKfQoKCmNvbnRyYWN0IElDT1NUb2tlbiBpcyBBYnN0cmFjdFRva2VuIHsKICAvKioKICAgKiBBZGRyZXNzIG9mIHRoZSBvd25lciBvZiB0aGlzIHNtYXJ0IGNvbnRyYWN0LgogICAqLwogIGFkZHJlc3Mgb3duZXI7CgogIC8qKgogICAqIFRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW5zIGNpcmN1bGF0aW9uLgogICAqLwogIHVpbnQyNTYgdG9rZW5zQ291bnQ7CgogIC8qKgogICAqIFRydWUgaWYgdG9rZW5zIHRyYW5zZmVycyBhcmUgY3VycmVudGx5IGZyb3plbiwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqLwogIGJvb2wgZnJvemVuID0gZmFsc2U7CgogIC8qKgogICAqIENyZWF0ZSBuZXcgSUNPUyBUb2tlbiBTbWFydCBDb250cmFjdCwgbWFrZSBtZXNzYWdlIHNlbmRlciB0byBiZSB0aGUgb3duZXIKICAgKiBvZiBzbWFydCBjb250cmFjdCwgaXNzdWUgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBhbmQgZ2l2ZSB0aGVtIHRvIG1lc3NhZ2UKICAgKiBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3Rva2Vuc0NvdW50IG51bWJlciBvZiB0b2tlbnMgdG8gaXNzdWUgYW5kIGdpdmUgdG8gbWVzc2FnZSBzZW5kZXIKICAgKi8KICBmdW5jdGlvbiBJQ09TVG9rZW4gKHVpbnQyNTYgX3Rva2Vuc0NvdW50KSB7CiAgICB0b2tlbnNDb3VudCA9IF90b2tlbnNDb3VudDsKICAgIGFjY291bnRzIFttc2cuc2VuZGVyXSA9IF90b2tlbnNDb3VudDsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKgogICAqIEdldCBuYW1lIG9mIHRoaXMgdG9rZW4uCiAgICoKICAgKiBAcmV0dXJuIG5hbWUgb2YgdGhpcyB0b2tlbgogICAqLwogIGZ1bmN0aW9uIG5hbWUgKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIG5hbWUpIHsKICAgIHJldHVybiAiSUNPUyI7CiAgfQoKICAvKioKICAgKiBHZXQgbnVtYmVyIG9mIGRlY2ltYWxzIGZvciB0aGlzIHRva2VuLgogICAqCiAgICogQHJldHVybiBudW1iZXIgb2YgZGVjaW1hbHMgZm9yIHRoaXMgdG9rZW4KICAgKi8KICBmdW5jdGlvbiBkZWNpbWFscyAoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCBkZWNpbWFscykgewogICAgcmV0dXJuIDY7CiAgfQoKICAvKioKICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbi4KICAgKgogICAqIEByZXR1cm4gdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbgogICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KSB7CiAgICByZXR1cm4gdG9rZW5zQ291bnQ7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlciAoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChmcm96ZW4pIHJldHVybiBmYWxzZTsKICAgIGVsc2UgcmV0dXJuIEFic3RyYWN0VG9rZW4udHJhbnNmZXIgKF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICAqIFRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbiByZWNpcGllbnQuCiAgICoKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIHRvIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlciBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuCiAgICogICAgICAgIHJlY2lwaWVudAogICAqIEByZXR1cm4gdHJ1ZSBpZiB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSAoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGZyb3plbikgcmV0dXJuIGZhbHNlOwogICAgZWxzZSByZXR1cm4gQWJzdHJhY3RUb2tlbi50cmFuc2ZlckZyb20gKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBDaGFuZ2UgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tIG1lc3NhZ2UKICAgKiBzcGVuZGVyLiAgSW4gb3JkZXIgdG8gcHJldmVudCBkb3VibGUgc3BlbmRpbmcgb2YgYWxsb3dhbmNlLCB0aGlzIG1ldGhvZAogICAqIHJlY2VpdmVzIGFzc3VtZWQgY3VycmVudCBhbGxvd2FuY2UgdmFsdWUgYXMgYW4gYXJndW1lbnQuICBJZiBhY3R1YWwKICAgKiBhbGxvd2FuY2UgZGlmZmVycyBmcm9tIGFuIGFzc3VtZWQgb25lLCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgZmFsc2UuCiAgICoKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBhbGxvdyB0aGUgb3duZXIgb2YgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20KICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgKiBAcGFyYW0gX2N1cnJlbnRWYWx1ZSBhc3N1bWVkIG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGFsbG93ZWQgdG8gYmUKICAgKiAgICAgICAgdHJhbnNmZXJyZWQKICAgKiBAcGFyYW0gX25ld1ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYWxsb3cgdG8gdHJhbnNmZXIKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW4gdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWxseSBhcHByb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfY3VycmVudFZhbHVlLCB1aW50MjU2IF9uZXdWYWx1ZSkKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChhbGxvd2FuY2UgKG1zZy5zZW5kZXIsIF9zcGVuZGVyKSA9PSBfY3VycmVudFZhbHVlKQogICAgICByZXR1cm4gYXBwcm92ZSAoX3NwZW5kZXIsIF9uZXdWYWx1ZSk7CiAgICBlbHNlIHJldHVybiBmYWxzZTsKICB9CgogIC8qKgogICAqIEJ1cm4gZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBiZWxvbmdpbmcgdG8gbWVzc2FnZSBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYnVybgogICAqIEByZXR1cm4gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBlcnJvcgogICAqLwogIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMgKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChfdmFsdWUgPiBhY2NvdW50cyBbbXNnLnNlbmRlcl0pIHJldHVybiBmYWxzZTsKICAgIGVsc2UgaWYgKF92YWx1ZSA+IDApIHsKICAgICAgYWNjb3VudHMgW21zZy5zZW5kZXJdID0gc2FmZVN1YiAoYWNjb3VudHMgW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICB0b2tlbnNDb3VudCA9IHNhZmVTdWIgKHRva2Vuc0NvdW50LCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIFNldCBuZXcgb3duZXIgZm9yIHRoZSBzbWFydCBjb250cmFjdC4KICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgc21hcnQgY29udHJhY3Qgb3duZXIuCiAgICoKICAgKiBAcGFyYW0gX25ld093bmVyIGFkZHJlc3Mgb2YgbmV3IG93bmVyIG9mIHRoZSBzbWFydCBjb250cmFjdAogICAqLwogIGZ1bmN0aW9uIHNldE93bmVyIChhZGRyZXNzIF9uZXdPd25lcikgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwoKICAgIG93bmVyID0gX25ld093bmVyOwogIH0KCiAgLyoqCiAgICogRnJlZXplIHRva2VuIHRyYW5zZmVycy4KICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgc21hcnQgY29udHJhY3Qgb3duZXIuCiAgICovCiAgZnVuY3Rpb24gZnJlZXplVHJhbnNmZXJzICgpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKCiAgICBpZiAoIWZyb3plbikgewogICAgICBmcm96ZW4gPSB0cnVlOwogICAgICBGcmVlemUgKCk7CiAgICB9CiAgfQoKICAvKioKICAgKiBVbmZyZWV6ZSB0b2tlbiB0cmFuc2ZlcnMuCiAgICogTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHNtYXJ0IGNvbnRyYWN0IG93bmVyLgogICAqLwogIGZ1bmN0aW9uIHVuZnJlZXplVHJhbnNmZXJzICgpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKCiAgICBpZiAoZnJvemVuKSB7CiAgICAgIGZyb3plbiA9IGZhbHNlOwogICAgICBVbmZyZWV6ZSAoKTsKICAgIH0KICB9CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VuIHRyYW5zZmVycyB3ZXJlIGZyb3plbi4KICAgKi8KICBldmVudCBGcmVlemUgKCk7CgogIC8qKgogICAqIExvZ2dlZCB3aGVuIHRva2VuIHRyYW5zZmVycyB3ZXJlIHVuZnJvemVuLgogICAqLwogIGV2ZW50IFVuZnJlZXplICgpOwp9'.
	

]
