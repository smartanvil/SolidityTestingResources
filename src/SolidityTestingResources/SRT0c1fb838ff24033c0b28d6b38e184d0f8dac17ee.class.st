Class {
	#name : #SRT0c1fb838ff24033c0b28d6b38e184d0f8dac17ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0c1fb838ff24033c0b28d6b38e184d0f8dac17ee >> base64 [
	^ ''.
	

]
