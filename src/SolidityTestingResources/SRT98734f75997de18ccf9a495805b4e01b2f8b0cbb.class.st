Class {
	#name : #SRT98734f75997de18ccf9a495805b4e01b2f8b0cbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT98734f75997de18ccf9a495805b4e01b2f8b0cbb >> base64 [
	^ ''.
	

]
