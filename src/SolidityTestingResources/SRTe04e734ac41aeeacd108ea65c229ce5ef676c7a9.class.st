Class {
	#name : #SRTe04e734ac41aeeacd108ea65c229ce5ef676c7a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe04e734ac41aeeacd108ea65c229ce5ef676c7a9 >> base64 [
	^ ''.
	

]
