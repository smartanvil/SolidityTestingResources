Class {
	#name : #SRT2Fb3C22230c39496eDc13c16d09F34368346Ac1D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2Fb3C22230c39496eDc13c16d09F34368346Ac1D >> base64 [
	^ ''.
	

]
