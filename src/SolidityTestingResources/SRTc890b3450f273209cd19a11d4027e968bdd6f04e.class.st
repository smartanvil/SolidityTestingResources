Class {
	#name : #SRTc890b3450f273209cd19a11d4027e968bdd6f04e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc890b3450f273209cd19a11d4027e968bdd6f04e >> base64 [
	^ ''.
	

]
