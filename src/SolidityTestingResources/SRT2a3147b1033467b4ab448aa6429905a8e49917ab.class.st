Class {
	#name : #SRT2a3147b1033467b4ab448aa6429905a8e49917ab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2a3147b1033467b4ab448aa6429905a8e49917ab >> base64 [
	^ ''.
	

]
