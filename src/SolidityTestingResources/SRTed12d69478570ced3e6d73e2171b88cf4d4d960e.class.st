Class {
	#name : #SRTed12d69478570ced3e6d73e2171b88cf4d4d960e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed12d69478570ced3e6d73e2171b88cf4d4d960e >> base64 [
	^ ''.
	

]
