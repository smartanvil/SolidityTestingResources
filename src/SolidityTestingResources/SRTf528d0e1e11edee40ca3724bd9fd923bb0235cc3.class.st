Class {
	#name : #SRTf528d0e1e11edee40ca3724bd9fd923bb0235cc3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf528d0e1e11edee40ca3724bd9fd923bb0235cc3 >> base64 [
	^ ''.
	

]
