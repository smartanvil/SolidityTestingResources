Class {
	#name : #SRT9F8Bf604AbeB04D32B0FFAE9c3A083be5858CF96,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9F8Bf604AbeB04D32B0FFAE9c3A083be5858CF96 >> base64 [
	^ ''.
	

]
