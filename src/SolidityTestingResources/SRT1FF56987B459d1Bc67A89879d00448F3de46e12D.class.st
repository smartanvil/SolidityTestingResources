Class {
	#name : #SRT1FF56987B459d1Bc67A89879d00448F3de46e12D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1FF56987B459d1Bc67A89879d00448F3de46e12D >> base64 [
	^ ''.
	

]
