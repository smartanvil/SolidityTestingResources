Class {
	#name : #SRT1748255382157bc5d4ed7e70c56afc5c97bddf07,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1748255382157bc5d4ed7e70c56afc5c97bddf07 >> base64 [
	^ ''.
	

]
