Class {
	#name : #SRT3c6ce03a4ae39d56da53fbb045cedd2d750e4531,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c6ce03a4ae39d56da53fbb045cedd2d750e4531 >> base64 [
	^ ''.
	

]
