Class {
	#name : #SRTaa63c8683647ef91b3fdab4b4989ee9588da297b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa63c8683647ef91b3fdab4b4989ee9588da297b >> base64 [
	^ ''.
	

]
