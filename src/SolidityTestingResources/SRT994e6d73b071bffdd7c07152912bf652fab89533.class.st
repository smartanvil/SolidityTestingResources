Class {
	#name : #SRT994e6d73b071bffdd7c07152912bf652fab89533,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT994e6d73b071bffdd7c07152912bf652fab89533 >> base64 [
	^ ''.
	

]
