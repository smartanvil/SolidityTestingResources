Class {
	#name : #SRTb5bd412b76816f9d65c8f21a4c780fc00201f4c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb5bd412b76816f9d65c8f21a4c780fc00201f4c4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KfQoKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgTk9UIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgLy8gcmVxdWlyZSAoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwoKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKCi8qKgogKiBQYXVzYWJsZSB0b2tlbgogKgogKiBTaW1wbGUgRVJDMjAgVG9rZW4gZXhhbXBsZSwgd2l0aCBwYXVzYWJsZSB0b2tlbiBjcmVhdGlvbgogKiovCmNvbnRyYWN0IFBhdXNhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgUGF1c2FibGUgewoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KfQoKCi8vIEB0aXRsZSBUaGUgUGFsbHlDb2luCi8vLyBAYXV0aG9yIE1hbm9qIFBhdGlkYXIKY29udHJhY3QgUGFsbHlDb2luIGlzIFBhdXNhYmxlVG9rZW4gewogICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICdQYWxseUNvaW4nOwoKICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAnUExMJzsKCiAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgdWludDI1NiBwdWJsaWMgIHRvdGFsU3VwcGx5ID0gMTAwZTI0OyAvLyAxMDBNIHRva2VucyB3aXRoIDE4IGRlY2ltYWxzCgogICBib29sIHB1YmxpYyByZW1haW5pbmdUb2tlbkJ1cm50ID0gZmFsc2U7CgogICAvLyBUaGUgdG9rZW5zIGFscmVhZHkgdXNlZCBmb3IgdGhlIHByZXNhbGUgYnV5ZXJzCiAgIHVpbnQyNTYgcHVibGljIHRva2Vuc0Rpc3RyaWJ1dGVkUHJlc2FsZSA9IDA7CgogICAvLyBUaGUgdG9rZW5zIGFscmVhZHkgdXNlZCBmb3IgdGhlIElDTyBidXllcnMKICAgdWludDI1NiBwdWJsaWMgdG9rZW5zRGlzdHJpYnV0ZWRDcm93ZHNhbGUgPSAwOwoKICAgLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIGNyb3dkc2FsZQogICBhZGRyZXNzIHB1YmxpYyBjcm93ZHNhbGU7CgogICAvLyBUaGUgaW5pdGlhbCBzdXBwbHkgdXNlZCBmb3IgcGxhdGZvcm0gYW5kIGRldmVsb3BtZW50IGFzIHNwZWNpZmllZCBpbiB0aGUgd2hpdGVwYXBlcgogICB1aW50MjU2IHB1YmxpYyBpbml0aWFsU3VwcGx5ID0gNDBlMjQ7CgogICAvLyBUaGUgbWF4aW11bSBhbW91bnQgb2YgdG9rZW5zIGZvciB0aGUgcHJlc2FsZSBpbnZlc3RvcnMKICAgdWludDI1NiBwdWJsaWMgbGltaXRQcmVzYWxlID0gMTBlMjQ7CgogICAvLyBUaGUgbWF4aW11bSBhbW91bnQgb2YgdG9rZW5zIHNvbGQgaW4gdGhlIGNyb3dkc2FsZQogICB1aW50MjU2IHB1YmxpYyBsaW1pdENyb3dkc2FsZSA9IDUwZTI0OwoKICAgLy8vIEBub3RpY2UgT25seSBhbGxvd3MgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb24gaWYgaXQncyBjb21taW5nIGZyb20gY3Jvd2RzYWxlCiAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGUoKSB7CiAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcm93ZHNhbGUpOwogICAgICBfOwogICB9CgogICAvLyBXaGVuIHNvbWVvbmUgcmVmdW5kcyB0b2tlbnMKICAgZXZlbnQgUmVmdW5kZWRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHVzZXIsIHVpbnQyNTYgdG9rZW5zKTsKCiAgIC8vLyBAbm90aWNlIENvbnN0cnVjdG9yIHVzZWQgdG8gc2V0IHRoZSBwbGF0Zm9ybSAmIGRldmVsb3BtZW50IHRva2Vucy4gVGhpcyBpcwogICAvLy8gVGhlIDIwJSArIDIwJSBvZiB0aGUgMTAwIE0gdG9rZW5zIHVzZWQgZm9yIHBsYXRmb3JtIGFuZCBkZXZlbG9wbWVudCB0ZWFtLgogICAvLy8gVGhlIG93bmVyLCBtc2cuc2VuZGVyLCBpcyBhYmxlIHRvIGRvIGFsbG93YW5jZSBmb3Igb3RoZXIgY29udHJhY3RzLiBSZW1lbWJlcgogICAvLy8gdG8gdXNlIGB0cmFuc2ZlckZyb20oKWAgaWYgeW91J3JlIGFsbG93ZWQKICAgZnVuY3Rpb24gUGFsbHlDb2luKCkgewogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7IC8vIDQwTSB0b2tlbnMgd2VpCiAgIH0KCiAgIC8vLyBAbm90aWNlIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3Jvd2RzYWxlIHNtYXJ0IGNvbnRyYWN0J3MgYWRkcmVzcyBvbmx5IGJ5IHRoZSBvd25lciBvZiB0aGlzIHRva2VuCiAgIC8vLyBAcGFyYW0gX2Nyb3dkc2FsZSBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgYmUgdXNlZAogICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVBZGRyZXNzKGFkZHJlc3MgX2Nyb3dkc2FsZSkgZXh0ZXJuYWwgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICByZXF1aXJlKF9jcm93ZHNhbGUgIT0gYWRkcmVzcygwKSk7CgogICAgICBjcm93ZHNhbGUgPSBfY3Jvd2RzYWxlOwogICB9CgogICAvLy8gQG5vdGljZSBEaXN0cmlidXRlcyB0aGUgcHJlc2FsZSB0b2tlbnMuIE9ubHkgdGhlIG93bmVyIGNhbiBkbyB0aGlzCiAgIC8vLyBAcGFyYW0gX2J1eWVyIFRoZSBhZGRyZXNzIG9mIHRoZSBidXllcgogICAvLy8gQHBhcmFtIHRva2VucyBUaGUgYW1vdW50IG9mIHRva2VucyBjb3JyZXNwb25kaW5nIHRvIHRoYXQgYnV5ZXIKICAgZnVuY3Rpb24gZGlzdHJpYnV0ZVByZXNhbGVUb2tlbnMoYWRkcmVzcyBfYnV5ZXIsIHVpbnQgdG9rZW5zKSBleHRlcm5hbCBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CiAgICAgIHJlcXVpcmUoX2J1eWVyICE9IGFkZHJlc3MoMCkpOwogICAgICByZXF1aXJlKHRva2VucyA+IDAgJiYgdG9rZW5zIDw9IGxpbWl0UHJlc2FsZSk7CgogICAgICAvLyBDaGVjayB0aGF0IHRoZSBsaW1pdCBvZiAxME0gcHJlc2FsZSB0b2tlbnMgaGFzbid0IGJlZW4gbWV0IHlldAogICAgICByZXF1aXJlKHRva2Vuc0Rpc3RyaWJ1dGVkUHJlc2FsZSA8IGxpbWl0UHJlc2FsZSk7CiAgICAgIHJlcXVpcmUodG9rZW5zRGlzdHJpYnV0ZWRQcmVzYWxlLmFkZCh0b2tlbnMpIDwgbGltaXRQcmVzYWxlKTsKCiAgICAgIHRva2Vuc0Rpc3RyaWJ1dGVkUHJlc2FsZSA9IHRva2Vuc0Rpc3RyaWJ1dGVkUHJlc2FsZS5hZGQodG9rZW5zKTsKICAgICAgYmFsYW5jZXNbX2J1eWVyXSA9IGJhbGFuY2VzW19idXllcl0uYWRkKHRva2Vucyk7CiAgIH0KCiAgIC8vLyBAbm90aWNlIERpc3RyaWJ1dGVzIHRoZSBJQ08gdG9rZW5zLiBPbmx5IHRoZSBjcm93ZHNhbGUgYWRkcmVzcyBjYW4gZXhlY3V0ZSB0aGlzCiAgIC8vLyBAcGFyYW0gX2J1eWVyIFRoZSBidXllciBhZGRyZXNzCiAgIC8vLyBAcGFyYW0gdG9rZW5zIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIHNlbmQgdG8gdGhhdCBhZGRyZXNzCiAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGVJQ09Ub2tlbnMoYWRkcmVzcyBfYnV5ZXIsIHVpbnQgdG9rZW5zKSBleHRlcm5hbCBvbmx5Q3Jvd2RzYWxlIHdoZW5Ob3RQYXVzZWQgewogICAgICByZXF1aXJlKF9idXllciAhPSBhZGRyZXNzKDApKTsKICAgICAgcmVxdWlyZSh0b2tlbnMgPiAwKTsKCiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGxpbWl0IG9mIDUwTSBJQ08gdG9rZW5zIGhhc24ndCBiZWVuIG1ldCB5ZXQKICAgICAgcmVxdWlyZSh0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZSA8IGxpbWl0Q3Jvd2RzYWxlKTsKICAgICAgcmVxdWlyZSh0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZS5hZGQodG9rZW5zKSA8PSBsaW1pdENyb3dkc2FsZSk7CgogICAgICB0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZSA9IHRva2Vuc0Rpc3RyaWJ1dGVkQ3Jvd2RzYWxlLmFkZCh0b2tlbnMpOwogICAgICBiYWxhbmNlc1tfYnV5ZXJdID0gYmFsYW5jZXNbX2J1eWVyXS5hZGQodG9rZW5zKTsKICAgfQoKICAgLy8vIEBub3RpY2UgRGVsZXRlcyB0aGUgYW1vdW50IG9mIHRva2VucyByZWZ1bmRlZCBmcm9tIHRoYXQgYnV5ZXIgYmFsYW5jZQogICAvLy8gQHBhcmFtIF9idXllciBUaGUgYnV5ZXIgdGhhdCB3YW50cyB0aGUgcmVmdW5kCiAgIC8vLyBAcGFyYW0gdG9rZW5zIFRoZSB0b2tlbnMgdG8gcmV0dXJuCiAgIGZ1bmN0aW9uIHJlZnVuZFRva2VucyhhZGRyZXNzIF9idXllciwgdWludDI1NiB0b2tlbnMpIGV4dGVybmFsIG9ubHlDcm93ZHNhbGUgd2hlbk5vdFBhdXNlZCB7CiAgICAgIHJlcXVpcmUoX2J1eWVyICE9IGFkZHJlc3MoMCkpOwogICAgICByZXF1aXJlKHRva2VucyA+IDApOwogICAgICByZXF1aXJlKGJhbGFuY2VzW19idXllcl0gPj0gdG9rZW5zKTsKCiAgICAgIGJhbGFuY2VzW19idXllcl0gPSBiYWxhbmNlc1tfYnV5ZXJdLnN1Yih0b2tlbnMpOwogICAgICBSZWZ1bmRlZFRva2VucyhfYnV5ZXIsIHRva2Vucyk7CiAgIH0KCiAgIC8vLyBAbm90aWNlIEJ1cm4gdGhlIGFtb3VudCBvZiB0b2tlbnMgcmVtYWluaW5nIGFmdGVyIElDTyBlbmRzCiAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoKSBleHRlcm5hbCBvbmx5Q3Jvd2RzYWxlIHdoZW5Ob3RQYXVzZWQgewogICAgICAKICAgICAgdWludDI1NiByZW1haW5pbmdJQ09Ub2tlbiA9IGxpbWl0Q3Jvd2RzYWxlLnN1Yih0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZSk7CiAgICAgIGlmKHJlbWFpbmluZ0lDT1Rva2VuID4gMCAmJiAhcmVtYWluaW5nVG9rZW5CdXJudCkgewogICAgICByZW1haW5pbmdUb2tlbkJ1cm50ID0gdHJ1ZTsgICAgCiAgICAgIGxpbWl0Q3Jvd2RzYWxlID0gbGltaXRDcm93ZHNhbGUuc3ViKHJlbWFpbmluZ0lDT1Rva2VuKTsgIAogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihyZW1haW5pbmdJQ09Ub2tlbik7CiAgICAgIH0KICAgfQp9'.
	

]
