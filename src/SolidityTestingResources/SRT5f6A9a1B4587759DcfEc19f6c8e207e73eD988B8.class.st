Class {
	#name : #SRT5f6A9a1B4587759DcfEc19f6c8e207e73eD988B8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5f6A9a1B4587759DcfEc19f6c8e207e73eD988B8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLyA9PT09PT09PT09PT09PT09PSBPd25hYmxlIENvbnRyYWN0IHN0YXJ0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8qCiAqIE93bmFibGUKICoKICogQmFzZSBjb250cmFjdCB3aXRoIGFuIG93bmVyLgogKiBQcm92aWRlcyBvbmx5T3duZXIgbW9kaWZpZXIsIHdoaWNoIHByZXZlbnRzIGZ1bmN0aW9uIGZyb20gcnVubmluZyBpZiBpdCBpcyBjYWxsZWQgYnkgYW55b25lIG90aGVyIHRoYW4gdGhlIG93bmVyLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgCiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQp9Ci8vID09PT09PT09PT09PT09PT09IE93bmFibGUgQ29udHJhY3QgZW5kID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCi8vID09PT09PT09PT09PT09PT09IFNhZmVtYXRoIENvbnRyYWN0IHN0YXJ0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLyogdGFraW5nIGlkZWFzIGZyb20gRmlyc3RCbG9vZCB0b2tlbiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQp9Ci8vID09PT09PT09PT09PT09PT09IFNhZmVtYXRoIENvbnRyYWN0IGVuZCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCi8vID09PT09PT09PT09PT09PT09IEVSQzIwIFRva2VuIENvbnRyYWN0IHN0YXJ0ID09PT09PT09PT09PT09PT09PT09PT09PT0KLyoKICogRVJDMjAgaW50ZXJmYWNlCiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KLy8gPT09PT09PT09PT09PT09PT0gRVJDMjAgVG9rZW4gQ29udHJhY3QgZW5kID09PT09PT09PT09PT09PT09PT09PT09PT09PQoKLy8gPT09PT09PT09PT09PT09PT0gU3RhbmRhcmQgVG9rZW4gQ29udHJhY3Qgc3RhcnQgPT09PT09PT09PT09PT09PT09PT09PQpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBTYWZlTWF0aCB7CgogIC8qKgogICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICovCiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KSA7CiAgICAgXzsKICB9CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWJ0cmFjdChiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc2FmZVN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWJ0cmFjdChiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWJ0cmFjdChfYWxsb3dhbmNlLCBfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cn0KLy8gPT09PT09PT09PT09PT09PT0gU3RhbmRhcmQgVG9rZW4gQ29udHJhY3QgZW5kID09PT09PT09PT09PT09PT09PT09PT09PQoKLy8gPT09PT09PT09PT09PT09PT0gUGF1c2FibGUgVG9rZW4gQ29udHJhY3Qgc3RhcnQgPT09PT09PT09PT09PT09PT09PT09PQovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlICghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlIChwYXVzZWQpIDsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KLy8gPT09PT09PT09PT09PT09PT0gUGF1c2FibGUgVG9rZW4gQ29udHJhY3QgZW5kID09PT09PT09PT09PT09PT09PT09PT09PQoKLy8gPT09PT09PT09PT09PT09PT0gSW5kb3JzZSBUb2tlbiBDb250cmFjdCBzdGFydCA9PT09PT09PT09PT09PT09PT09PT09PQpjb250cmFjdCBJbmRvcnNlVG9rZW4gaXMgU2FmZU1hdGgsIFN0YW5kYXJkVG9rZW4sIFBhdXNhYmxlIHsKICAgIC8vIG1ldGFkYXRhCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiSW5kb3JzZSBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJJTkQiOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIxLjAiOwoKICAgIC8vIGNvbnRyYWN0cwogICAgYWRkcmVzcyBwdWJsaWMgaW5kU2FsZURlcG9zaXQgICAgICAgID0gMHgwMDUzQjkxRTM4QjIwN0M5N0NCZmYwNmY0OGEwZjdBYjJEZDgxNDQ5OyAgICAgIC8vIGRlcG9zaXQgYWRkcmVzcyBmb3IgSW5kb3JzZSBTYWxlIGNvbnRyYWN0CiAgICBhZGRyZXNzIHB1YmxpYyBpbmRTZWVkRGVwb3NpdCAgICAgICAgPSAweDAwODNmZEZCMzI4ZkM4RDA3RTJhNzkzM2UzMDEzZTE4MUY5Nzk4QWQ7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIFNlZWQgQ29udHJpYnV0b3JzCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRQcmVzYWxlRGVwb3NpdCAgICAgPSAweDAwN0FCOTlGQmYwMjNDYjQxYjUwQUU3RDI0NjIxNzI5Mjk1RWRCRkE7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIFByZXNhbGUgQ29udHJpYnV0b3JzCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRWZXN0aW5nRGVwb3NpdCAgICAgPSAweDAwMTEzNDlmNzE1Y2Y1OUY3NUYwQTAwMTg1ZTdCMWMzNmY1NUMzYWI7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIFZlc3RpbmcgZm9yIHRlYW0gYW5kIGFkdmlzb3JzCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRDb21tdW5pdHlEZXBvc2l0ICAgPSAweDAwOTdlYzg4NDBFNjgyZDA1OGIyNEU2ZTE5RTY4MzU4ZDk3QTZFNUM7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIE1hcmtldGluZywgZXRjCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRGdXR1cmVEZXBvc2l0ICAgICAgPSAweDAwZDFiQ2JDREU5Q2E0MzFmNmRkOTIwNzdkRmFFOThmOTRlNDQ2ZTQ7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIEZ1dHVyZSB0b2tlbiBzYWxlCiAgICBhZGRyZXNzIHB1YmxpYyBpbmRJbmZsYXRpb25EZXBvc2l0ICAgPSAweDAwRDMxMjA2RTYyNUYxZjMwMDM5ZDFGYTQ3MjMwM0U3MTMxNzg3MEE7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIEluZmxhdGlvbiBwb29sCiAgICAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluZFNhbGUgICAgICA9IDMxNjAzNzg1ICogMTAqKmRlY2ltYWxzOyAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluZFNlZWQgICAgICA9IDM1NjYzNDEgICogMTAqKmRlY2ltYWxzOyAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluZFByZVNhbGUgICA9IDIyOTk1MjcwICogMTAqKmRlY2ltYWxzOyAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbmRWZXN0aW5nICAgPSAyODA3OTUxNCAqIDEwKipkZWNpbWFsczsgIAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgaW5kQ29tbXVuaXR5ID0gMTA5MTk4MTEgKiAxMCoqZGVjaW1hbHM7ICAKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluZEZ1dHVyZSAgICA9IDU4ODMyNTc5ICogMTAqKmRlY2ltYWxzOyAgCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbmRJbmZsYXRpb24gPSAxNDYyNDc0NyAqIDEwKipkZWNpbWFsczsgIAogICAKICAgIC8vIGNvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBJbmRvcnNlVG9rZW4oKQogICAgewogICAgICBiYWxhbmNlc1tpbmRTYWxlRGVwb3NpdF0gICAgICAgICAgID0gaW5kU2FsZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlcG9zaXQgSU5EIHNoYXJlCiAgICAgIGJhbGFuY2VzW2luZFNlZWREZXBvc2l0XSAgICAgICAgICAgPSBpbmRTZWVkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVwb3NpdCBJTkQgc2hhcmUKICAgICAgYmFsYW5jZXNbaW5kUHJlc2FsZURlcG9zaXRdICAgICAgICA9IGluZFByZVNhbGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IElORCBmdXR1cmUgc2hhcmUKICAgICAgYmFsYW5jZXNbaW5kVmVzdGluZ0RlcG9zaXRdICAgICAgICA9IGluZFZlc3Rpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IElORCBmdXR1cmUgc2hhcmUKICAgICAgYmFsYW5jZXNbaW5kQ29tbXVuaXR5RGVwb3NpdF0gICAgICA9IGluZENvbW11bml0eTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IElORCBmdXR1cmUgc2hhcmUKICAgICAgYmFsYW5jZXNbaW5kRnV0dXJlRGVwb3NpdF0gICAgICAgICA9IGluZEZ1dHVyZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IElORCBmdXR1cmUgc2hhcmUKICAgICAgYmFsYW5jZXNbaW5kSW5mbGF0aW9uRGVwb3NpdF0gICAgICA9IGluZEluZmxhdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IGZvciBpbmZsYXRpb24KCiAgICAgIHRvdGFsU3VwcGx5ID0gaW5kU2FsZSArIGluZFNlZWQgKyBpbmRQcmVTYWxlICsgaW5kVmVzdGluZyArIGluZENvbW11bml0eSArIGluZEZ1dHVyZSArIGluZEluZmxhdGlvbjsKCiAgICAgIFRyYW5zZmVyKDB4MCxpbmRTYWxlRGVwb3NpdCxpbmRTYWxlKTsKICAgICAgVHJhbnNmZXIoMHgwLGluZFNlZWREZXBvc2l0LGluZFNlZWQpOwogICAgICBUcmFuc2ZlcigweDAsaW5kUHJlc2FsZURlcG9zaXQsaW5kUHJlU2FsZSk7CiAgICAgIFRyYW5zZmVyKDB4MCxpbmRWZXN0aW5nRGVwb3NpdCxpbmRWZXN0aW5nKTsKICAgICAgVHJhbnNmZXIoMHgwLGluZENvbW11bml0eURlcG9zaXQsaW5kQ29tbXVuaXR5KTsKICAgICAgVHJhbnNmZXIoMHgwLGluZEZ1dHVyZURlcG9zaXQsaW5kRnV0dXJlKTsKICAgICAgVHJhbnNmZXIoMHgwLGluZEluZmxhdGlvbkRlcG9zaXQsaW5kSW5mbGF0aW9uKTsKICAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90byxfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sIHN1Y2Nlc3MpICB7CiAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlcixfdmFsdWUpOwogIH0KfQovLyA9PT09PT09PT09PT09PT09PSBJbmRvcnNlIFRva2VuIENvbnRyYWN0IGVuZCA9PT09PT09PT09PT09PT09PT09PT09PQoKLy8gPT09PT09PT09PT09PT09PT0gQWN0dWFsIFNhbGUgQ29udHJhY3QgU3RhcnQgPT09PT09PT09PT09PT09PT09PT0KY29udHJhY3QgSW5kb3JzZVNhbGVDb250cmFjdCBpcyAgT3duYWJsZSxTYWZlTWF0aCxQYXVzYWJsZSB7CiAgICBJbmRvcnNlVG9rZW4gICAgaW5kOwoKICAgIC8vIGNyb3dkc2FsZSBwYXJhbWV0ZXJzCiAgICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nU3RhcnRUaW1lID0gMTUwMjE5MzYwMDsKICAgIHVpbnQyNTYgcHVibGljIGZ1bmRpbmdFbmRUaW1lICAgPSAxNTA0Nzg1NjAwOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBhZGRyZXNzIHB1YmxpYyBldGhGdW5kRGVwb3NpdCAgID0gMHgyNjk2NzIwMWQ0RDFlMWFBOTc1NTQ4MzhkRWZBNGZDNGQwMTBGRjZGOyAgICAgIC8vIGRlcG9zaXQgYWRkcmVzcyBmb3IgRVRIIGZvciBJbmRvcnNlIEZ1bmQKICAgIGFkZHJlc3MgcHVibGljIGluZEZ1bmREZXBvc2l0ICAgPSAweDAwNTNCOTFFMzhCMjA3Qzk3Q0JmZjA2ZjQ4YTBmN0FiMkRkODE0NDk7ICAgICAgLy8gZGVwb3NpdCBhZGRyZXNzIGZvciBJbmRvcnNlIHJlc2VydmUKICAgIGFkZHJlc3MgcHVibGljIGluZEFkZHJlc3MgICAgICAgPSAweGY4ZTM4NkVEYTg1NzQ4NGY1YTEyZTRCNURBYTk5ODRFMDZFNzM3MDU7CgogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3dpdGNoZWQgdG8gdHJ1ZSBpbiBvcGVyYXRpb25hbCBzdGF0ZQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gI2RwIGluIEluZG9yc2UgY29udHJhY3QKICAgIHVpbnQyNTYgcHVibGljIHRva2VuQ3JlYXRpb25DYXA7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkV4Y2hhbmdlUmF0ZSA9IDEwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxMDAwIElORCB0b2tlbnMgcGVyIDEgRVRICiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBtaW5Db250cmlidXRpb24gPSAwLjA1IGV0aGVyOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbWF4VG9rZW5zID0gMSAqICgxMCAqKiA2KSAqIDEwKipkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE1BWF9HQVNfUFJJQ0UgPSA1MDAwMDAwMDAwMCB3ZWk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1heGltdW0gZ2FzIHByaWNlIGZvciBjb250cmlidXRpb24gdHJhbnNhY3Rpb25zCiAKICAgIGZ1bmN0aW9uIEluZG9yc2VTYWxlQ29udHJhY3QoKSB7CiAgICAgICAgaW5kID0gSW5kb3JzZVRva2VuKGluZEFkZHJlc3MpOwogICAgICAgIHRva2VuQ3JlYXRpb25DYXAgPSBpbmQuYmFsYW5jZU9mKGluZEZ1bmREZXBvc2l0KTsKICAgICAgICBpc0ZpbmFsaXplZCA9IGZhbHNlOwogICAgfQoKICAgIGV2ZW50IE1pbnRJTkQoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbCk7CiAgICBldmVudCBMb2dSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIGZ1bmN0aW9uIENyZWF0ZUlORChhZGRyZXNzIHRvLCB1aW50MjU2IHZhbCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICBNaW50SU5EKGluZEZ1bmREZXBvc2l0LHRvLHZhbCk7CiAgICAgICAgcmV0dXJuIGluZC50cmFuc2ZlckZyb20oaW5kRnVuZERlcG9zaXQsdG8sdmFsKTsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsgICAgCiAgICAgICAgY3JlYXRlVG9rZW5zKG1zZy5zZW5kZXIsbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBBY2NlcHRzIGV0aGVyIGFuZCBjcmVhdGVzIG5ldyBJTkQgdG9rZW5zLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKGFkZHJlc3MgX2JlbmVmaWNpYXJ5LCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgd2hlbk5vdFBhdXNlZCB7CiAgICAgIHJlcXVpcmUgKHRva2VuQ3JlYXRpb25DYXAgPiB0b3RhbFN1cHBseSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDQVAgcmVhY2hlZCBubyBtb3JlIHBsZWFzZQogICAgICByZXF1aXJlIChub3cgPj0gZnVuZGluZ1N0YXJ0VGltZSk7CiAgICAgIHJlcXVpcmUgKG5vdyA8PSBmdW5kaW5nRW5kVGltZSk7CiAgICAgIHJlcXVpcmUgKF92YWx1ZSA+PSBtaW5Db250cmlidXRpb24pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUbyBhdm9pZCBzcGFtIHRyYW5zYWN0aW9ucyBvbiB0aGUgbmV0d29yayAgICAKICAgICAgcmVxdWlyZSAoIWlzRmluYWxpemVkKTsKICAgICAgcmVxdWlyZSAodHguZ2FzcHJpY2UgPD0gTUFYX0dBU19QUklDRSk7CgogICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KF92YWx1ZSwgdG9rZW5FeGNoYW5nZVJhdGUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhhdCB3ZSdyZSBub3Qgb3ZlciB0b3RhbHMKICAgICAgdWludDI1NiBjaGVja2VkU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKCiAgICAgIHJlcXVpcmUgKGluZC5iYWxhbmNlT2YobXNnLnNlbmRlcikgKyB0b2tlbnMgPD0gbWF4VG9rZW5zKTsKICAgICAgCiAgICAgIC8vIERBIDgvNi8yMDE3IHRvIGZhaXJseSBhbGxvY2F0ZSB0aGUgbGFzdCBmZXcgdG9rZW5zCiAgICAgIGlmICh0b2tlbkNyZWF0aW9uQ2FwIDwgY2hlY2tlZFN1cHBseSkgeyAgICAgICAgCiAgICAgICAgdWludDI1NiB0b2tlbnNUb0FsbG9jYXRlID0gc2FmZVN1YnRyYWN0KHRva2VuQ3JlYXRpb25DYXAsdG90YWxTdXBwbHkpOwogICAgICAgIHVpbnQyNTYgdG9rZW5zVG9SZWZ1bmQgICA9IHNhZmVTdWJ0cmFjdCh0b2tlbnMsdG9rZW5zVG9BbGxvY2F0ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b2tlbkNyZWF0aW9uQ2FwOwogICAgICAgIHVpbnQyNTYgZXRoZXJUb1JlZnVuZCA9IHRva2Vuc1RvUmVmdW5kIC8gdG9rZW5FeGNoYW5nZVJhdGU7CgogICAgICAgIHJlcXVpcmUoQ3JlYXRlSU5EKF9iZW5lZmljaWFyeSx0b2tlbnNUb0FsbG9jYXRlKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIElORAogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoZXJUb1JlZnVuZCk7CiAgICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsZXRoZXJUb1JlZnVuZCk7CiAgICAgICAgZXRoRnVuZERlcG9zaXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgLy8gREEgOC82LzIwMTcgZW5kIG9mIGZhaXIgYWxsb2NhdGlvbiBjb2RlCgogICAgICB0b3RhbFN1cHBseSA9IGNoZWNrZWRTdXBwbHk7CiAgICAgIHJlcXVpcmUoQ3JlYXRlSU5EKF9iZW5lZmljaWFyeSwgdG9rZW5zKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2dzIHRva2VuIGNyZWF0aW9uCiAgICAgIGV0aEZ1bmREZXBvc2l0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEVuZHMgdGhlIGZ1bmRpbmcgcGVyaW9kIGFuZCBzZW5kcyB0aGUgRVRIIGhvbWUKICAgIGZ1bmN0aW9uIGZpbmFsaXplKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgcmVxdWlyZSAoIWlzRmluYWxpemVkKTsKICAgICAgLy8gbW92ZSB0byBvcGVyYXRpb25hbAogICAgICBpc0ZpbmFsaXplZCA9IHRydWU7CiAgICAgIGV0aEZ1bmREZXBvc2l0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIHRoZSBldGggdG8gSW5kb3JzZSBtdWx0aS1zaWcKICAgIH0KfQ=='.
	

]
