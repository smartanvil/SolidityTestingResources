Class {
	#name : #SRT613011F70721573965515dC19360bff13C2cD5C3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT613011F70721573965515dC19360bff13C2cD5C3 >> base64 [
	^ ''.
	

]
