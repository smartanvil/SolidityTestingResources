Class {
	#name : #SRTAc709FcB44a43c35F0DA4e3163b117A17F3770f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTAc709FcB44a43c35F0DA4e3163b117A17F3770f5 >> base64 [
	^ ''.
	

]
