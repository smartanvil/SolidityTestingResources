Class {
	#name : #SRTf2b8e10e7b230cc55040a7a90be75c933719c507,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf2b8e10e7b230cc55040a7a90be75c933719c507 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCmNvbnRyYWN0IHRva2VuIHsgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpeyAgfSB9Cgpjb250cmFjdCBDcm93ZHNhbGUgewogICAgLyogaWYgc3VjY2Vzc2Z1bCwgdGhlIGZ1bmRzIHdpbGwgYmUgcmV0cmlldmFibGUgYnkgdGhpcyBhZGRyZXNzICovCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeSA9IDB4MDAzMjMwYmJlNjRlY2NkNjZmNjI5MTM2NzljODk2NmNmOWY0MTE2NjsgCiAgICAvKiBpZiB0aGUgZnVuZGluZyBnb2FsIGlzIG5vdCByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzICovCiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbCA9IDUwMDAwMDAwOwogICAgLyogdGhlIG1heGltdW0gYW1vdW50IG9mIHRva2VucyB0byBiZSBzb2xkICovCiAgICB1aW50IHB1YmxpYyBtYXhHb2FsID0gMzk0MjQwMDAwOyAKICAgIC8qIGhvdyBtdWNoIGhhcyBiZWVuIHJhaXNlZCBieSBjcm93ZGFsZSAoaW4gRVRIKSAqLwogICAgdWludCBwdWJsaWMgYW1vdW50UmFpc2VkOyAKICAgIC8qIHRoZSBzdGFydCBkYXRlIG9mIHRoZSBjcm93ZHNhbGUgKi8KICAgIHVpbnQgcHVibGljIHN0YXJ0ID0gMTQ4NzI1NzIwMDsgCiAgICAvKiB0aGUgbnVtYmVyIG9mIHRva2VucyBhbHJlYWR5IHNvbGQgKi8KICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQ7IAogICAgLyogdGhlcmUgYXJlIGRpZmZlcmVudCBwcmljZXMgaW4gZGlmZmVyZW50IHRpbWUgaW50ZXJ2YWxzICovCiAgICB1aW50WzRdIHB1YmxpYyBkZWFkbGluZXMgPSBbMTQ4NzI2MDgwMCwgMTQ4Nzg2NTYwMCwgMTQ4ODQ3MDQwMCwxNDg5MDc1MjAwXTsKICAgIHVpbnRbNF0gcHVibGljIHByaWNlcyA9IFs4MzMzMzMzMzMzMzMzMzMsIDkwOTA5MDkwOTA5MDkwOSw5NTIzODA5NTIzODA5NTIsIDEwMDAwMDAwMDAwMDAwMDBdOwogICAgLyogdGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0ICovCiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7CiAgICAvKiB0aGUgYmFsYW5jZXMgKGluIEVUSCkgb2YgYWxsIGludmVzdG9ycyAqLwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBib29sIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOwogICAgYm9vbCBjcm93ZHNhbGVDbG9zZWQgPSBmYWxzZTsKICAgIC8qIG5vdGlmeWluZyB0cmFuc2ZlcnMgYW5kIHRoZSBzdWNjZXNzIG9mIHRoZSBjcm93ZHNhbGUqLwogICAgZXZlbnQgR29hbFJlYWNoZWQoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCBhbW91bnRSYWlzZWQpOwogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CiAgICAKCiAgICAvKiAgaW5pdGlhbGl6YXRpb24sIHNldCB0aGUgdG9rZW4gYWRkcmVzcyAqLwogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKCApIHsKICAgICAgICB0b2tlblJld2FyZCA9IHRva2VuKDB4YzM3OGI3ZTJmODhmOTQ1YmUxMjFkODBlZGNiYzMxYmM3MjU5YTk4Myk7CiAgICB9CgogICAgLyogd2hlbmV2ZXIgYW55b25lIHNlbmRzIGZ1bmRzIHRvIGEgY29udHJhY3QsIHRoZSBjb3JyZXNwb25kaW5nIGFtb3VudCBvZiB0b2tlbnMgaXMgdHJhbnNmZXJlZCBpZiB0aGUgY3Jvd2RzYWxlIHN0YXJ0ZWQgYW5kIGhhc24ndCBiZWVuCiAgICAgICAgY2xvc2VkIGFscmVhZHkgYW5kIHRoZSBtYXhHb2FsIHdhc24ndCByZWFjaGVkIHlldC4qLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZXsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IG51bVRva2VucyA9IGFtb3VudCAvIGdldFByaWNlKCk7CiAgICAgICAgaWYgKGNyb3dkc2FsZUNsb3NlZHx8bm93PHN0YXJ0fHx0b2tlbnNTb2xkK251bVRva2Vucz5tYXhHb2FsKSB0aHJvdzsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBhbW91bnQ7CiAgICAgICAgYW1vdW50UmFpc2VkICs9IGFtb3VudDsKICAgICAgICB0b2tlbnNTb2xkKz1udW1Ub2tlbnM7CiAgICAgICAgaWYoIXRva2VuUmV3YXJkLnRyYW5zZmVyRnJvbShiZW5lZmljaWFyeSwgbXNnLnNlbmRlciwgbnVtVG9rZW5zKSkgdGhyb3c7CiAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CiAgICB9CiAgICAKICAgIC8qIGxvb2tzIHVwIHRoZSBjdXJyZW50IHRva2VuIHByaWNlICovCiAgICBmdW5jdGlvbiBnZXRQcmljZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcHJpY2UpewogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkZWFkbGluZXMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmKG5vdzxkZWFkbGluZXNbaV0pCiAgICAgICAgICAgICAgICByZXR1cm4gcHJpY2VzW2ldOwogICAgICAgIHJldHVybiBwcmljZXNbcHJpY2VzLmxlbmd0aC0xXTsvL3Nob3VsZCBuZXZlciBiZSByZXR1cm5lZCwgYnV0IHRvIGJlIHN1cmUgdG8gbm90IGRpdmlkZSBieSAwCiAgICB9CgogICAgbW9kaWZpZXIgYWZ0ZXJEZWFkbGluZSgpIHsgaWYgKG5vdyA+PSBkZWFkbGluZXNbZGVhZGxpbmVzLmxlbmd0aC0xXSkgXzsgfQoKICAgIC8qIGNoZWNrcyBpZiB0aGUgZ29hbCBvciB0aW1lIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQgYW5kIGVuZHMgdGhlIGNhbXBhaWduICovCiAgICBmdW5jdGlvbiBjaGVja0dvYWxSZWFjaGVkKCkgYWZ0ZXJEZWFkbGluZSB7CiAgICAgICAgaWYgKHRva2Vuc1NvbGQgPj0gZnVuZGluZ0dvYWwpewogICAgICAgICAgICBmdW5kaW5nR29hbFJlYWNoZWQgPSB0cnVlOwogICAgICAgICAgICBHb2FsUmVhY2hlZChiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkKTsKICAgICAgICB9CiAgICAgICAgY3Jvd2RzYWxlQ2xvc2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvKiBhbGxvd3MgdGhlIGJlbmVmaWNpYXJ5IGFuZC9vciB0aGUgZnVuZGVycyB0byB3aXRoZHJhdyB0aGVpciBmdW5kcyAqLwogICAgZnVuY3Rpb24gc2FmZVdpdGhkcmF3YWwoKSBhZnRlckRlYWRsaW5lIHsKICAgICAgICAvLyBpZiB0aGUgZ29hbCBoYXNuJ3QgYmVlbiByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzCiAgICAgICAgaWYgKCFmdW5kaW5nR29hbFJlYWNoZWQpIHsKICAgICAgICAgICAgdWludCBhbW91bnQgPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgICAgIGlmIChhbW91bnQgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kKGFtb3VudCkpIHsKICAgICAgICAgICAgICAgICAgICBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGFtb3VudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvL2lmIHRoZSBnb2FsIGhhcyBiZW5uIHJlYWNoZWQgYW5kIHRoZSBiZW5lZmljaWFyeSBoaW1zZWxmIGlzIHRoZSBzZW5kZXIsIGhlIG1heSB3aXRoZHJhdyBldmVyeXRoaW5nCiAgICAgICAgaWYgKGZ1bmRpbmdHb2FsUmVhY2hlZCAmJiBiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIGlmIChiZW5lZmljaWFyeS5zZW5kKGFtb3VudFJhaXNlZCkpIHsKICAgICAgICAgICAgICAgIEZ1bmRUcmFuc2ZlcihiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvL0lmIHdlIGZhaWwgdG8gc2VuZCB0aGUgZnVuZHMgdG8gYmVuZWZpY2lhcnksIHVubG9jayBmdW5kZXJzIGJhbGFuY2UKICAgICAgICAgICAgICAgIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9'.
	

]
