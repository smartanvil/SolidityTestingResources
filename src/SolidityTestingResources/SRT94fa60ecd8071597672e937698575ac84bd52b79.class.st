Class {
	#name : #SRT94fa60ecd8071597672e937698575ac84bd52b79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT94fa60ecd8071597672e937698575ac84bd52b79 >> base64 [
	^ ''.
	

]
