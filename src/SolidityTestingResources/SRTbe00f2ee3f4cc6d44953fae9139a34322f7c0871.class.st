Class {
	#name : #SRTbe00f2ee3f4cc6d44953fae9139a34322f7c0871,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbe00f2ee3f4cc6d44953fae9139a34322f7c0871 >> base64 [
	^ ''.
	

]
