Class {
	#name : #SRT6F4DcBB16F72853c7382e7100A0713a68e53d9be,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6F4DcBB16F72853c7382e7100A0713a68e53d9be >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgR3JvdXBCdXlDb250cmFjdCB7CiAgLyoqKiBDT05TVEFOVFMgKioqLwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE1BWF9DT05UUklCVVRJT05fU0xPVFMgPSAyMDsKICB1aW50MjU2IHByaXZhdGUgZmlyc3RTdGVwTGltaXQgPSAgMC4wNTM2MTMgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIHNlY29uZFN0ZXBMaW1pdCA9IDAuNTY0OTU3IGV0aGVyOwoKICAvKioqIERBVEFUWVBFUyAqKiovCiAgLy8gQGRldiBBIEdyb3VwIGlzIGNyZWF0ZWQgZm9yIGFsbCB0aGUgY29udHJpYnV0b3JzIHdobyB3YW50IHRvIGNvbnRyaWJ1dGUKICAvLyAgdG8gdGhlIHB1cmNoYXNlIG9mIGEgcGFydGljdWxhciB0b2tlbi4KICBzdHJ1Y3QgR3JvdXAgewogICAgLy8gQXJyYXkgb2YgYWRkcmVzc2VzIG9mIGNvbnRyaWJ1dG9ycyBpbiBncm91cAogICAgYWRkcmVzc1tdIGNvbnRyaWJ1dG9yQXJyOwogICAgLy8gTWFwcyBhZGRyZXNzIHRvIGFuIGFkZHJlc3MncyBwb3NpdGlvbiAoKyAxKSBpbiB0aGUgY29udHJpYnV0b3JBcnI7CiAgICAvLyAxIGlzIGFkZGVkIHRvIHRoZSBwb3NpdGlvbiBiZWNhdXNlIHplcm8gaXMgdGhlIGRlZmF1bHQgdmFsdWUgaW4gdGhlIG1hcHBpbmcKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBhZGRyZXNzVG9Db250cmlidXRvckFyckluZGV4OwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGFkZHJlc3NUb0NvbnRyaWJ1dGlvbjsgLy8gdXNlciBhZGRyZXNzIHRvIGFtb3VudCBjb250cmlidXRlZAogICAgYm9vbCBleGlzdHM7IC8vIEZvciB0cmFja2luZyB3aGV0aGVyIGEgZ3JvdXAgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgb3Igbm90CiAgICB1aW50MjU2IGNvbnRyaWJ1dGVkQmFsYW5jZTsgLy8gVG90YWwgYW1vdW50IGNvbnRyaWJ1dGVkCiAgICB1aW50MjU2IHB1cmNoYXNlUHJpY2U7IC8vIFByaWNlIG9mIHB1cmNoYXNlZCB0b2tlbgogIH0KCiAgLy8gQGRldiBBIENvbnRyaWJ1dG9yIHJlY29yZCBpcyBjcmVhdGVkIGZvciBlYWNoIHVzZXIgcGFydGljaXBhdGluZyBpbgogIC8vICB0aGlzIGdyb3VwIGJ1eSBjb250cmFjdC4gSXQgc3RvcmVzIHRoZSBncm91cCBpZHMgdGhlIHVzZXIgY29udHJpYnV0ZWQgdG8KICAvLyAgYW5kIGEgcmVjb3JkIG9mIHRoZWlyIHNhbGUgcHJvY2VlZHMuCiAgc3RydWN0IENvbnRyaWJ1dG9yIHsKICAgIC8vIE1hcHMgdG9rZW5JZCB0byBhbiB0b2tlbklkJ3MgcG9zaXRpb24gKCsgMSkgaW4gdGhlIGdyb3VwQXJyOwogICAgLy8gMSBpcyBhZGRlZCB0byB0aGUgcG9zaXRpb24gYmVjYXVzZSB6ZXJvIGlzIHRoZSBkZWZhdWx0IHZhbHVlIGluIHRoZSBtYXBwaW5nCiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gdWludCkgdG9rZW5JZFRvR3JvdXBBcnJJbmRleDsKICAgIC8vIEFycmF5IG9mIHRva2VuSWRzIGNvbnRyaWJ1dGVkIHRvIGJ5IGEgY29udHJpYnV0b3IKICAgIHVpbnQyNTZbXSBncm91cEFycjsKICAgIGJvb2wgZXhpc3RzOwogICAgLy8gTGVkZ2VyIGZvciB3aXRoZHJhd2FibGUgYmFsYW5jZSBmb3IgdGhpcyB1c2VyLgogICAgLy8gIEZ1bmRzIGNhbiBjb21lIGZyb20gZXhjZXNzIHBhaWQgaW50byBhIGdyb3VwQnV5LAogICAgLy8gIG9yIGZyb20gd2l0aGRyYXdpbmcgZnJvbSBhIGdyb3VwLCBvciBmcm9tCiAgICAvLyAgc2FsZSBwcm9jZWVkcyBmcm9tIGEgdG9rZW4uCiAgICB1aW50MjU2IHdpdGhkcmF3YWJsZUJhbGFuY2U7CiAgfQoKICAvKioqIEVWRU5UUyAqKiovCiAgLy8vIEFkbWluIEV2ZW50cwogIC8vIEBkZXYgRXZlbnQgbm90aW5nIGNvbW1pc3Npb24gcGFpZCB0byBjb250cmFjdAogIGV2ZW50IENvbW1pc3Npb24odWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBhbW91bnQpOwoKICAvLy8gQ29udHJhY3QgRXZlbnRzCiAgLy8gQGRldiBFdmVudCBzaWduaWZpeWluZyB0aGF0IGNvbnRyYWN0IHJlY2VpdmVkIGZ1bmRzIHZpYSBmYWxsYmFjayBmbgogIGV2ZW50IEZ1bmRzUmVjZWl2ZWQoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBhbW91bnQpOwoKICAvLy8gVXNlciBFdmVudHMKICAvLyBAZGV2IEV2ZW50IG1hcmtpbmcgZnVuZHMgZGVwb3NpdGVkIGludG8gdXNlciBfdG8ncyBhY2NvdW50CiAgZXZlbnQgRnVuZHNEZXBvc2l0ZWQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KTsKCiAgLy8gQGRldiBFdmVudCBtYXJraW5nIGEgd2l0aGRyYXdhbCBvZiBhbW91bnQgYnkgdXNlciBfdG8KICBldmVudCBGdW5kc1dpdGhkcmF3bihhZGRyZXNzIF90bywgdWludDI1NiBhbW91bnQpOwoKICAvLyBAZGV2IEV2ZW50IG5vdGluZyBhbiBpbnRlcmVzdCBkaXN0cmlidXRpb24gZm9yIHVzZXIgX3RvIGZvciB0b2tlbiBfdG9rZW5JZC4KICAvLyAgVG9rZW4gR3JvdXAgd2lsbCBub3QgYmUgZGlzYmFuZGVkCiAgZXZlbnQgSW50ZXJlc3REZXBvc2l0ZWQodWludDI1NiBfdG9rZW5JZCwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KTsKCiAgLy8gQGRldiBFdmVudCBmb3Igd2hlbiBhIGNvbnRyaWJ1dG9yIGpvaW5zIGEgdG9rZW4gZ3JvdXAgX3Rva2VuSWQKICBldmVudCBKb2luR3JvdXAoCiAgICB1aW50MjU2IF90b2tlbklkLAogICAgYWRkcmVzcyBjb250cmlidXRvciwKICAgIHVpbnQyNTYgZ3JvdXBCYWxhbmNlLAogICAgdWludDI1NiBjb250cmlidXRpb25BZGRlZAogICk7CgogIC8vIEBkZXYgRXZlbnQgZm9yIHdoZW4gYSBjb250cmlidXRvciBsZWF2ZXMgYSB0b2tlbiBncm91cAogIGV2ZW50IExlYXZlR3JvdXAoCiAgICB1aW50MjU2IF90b2tlbklkLAogICAgYWRkcmVzcyBjb250cmlidXRvciwKICAgIHVpbnQyNTYgZ3JvdXBCYWxhbmNlLAogICAgdWludDI1NiBjb250cmlidXRpb25TdWJ0cmFjdGVkCiAgKTsKCiAgLy8gQGRldiBFdmVudCBub3Rpbmcgc2FsZXMgcHJvY2VlZHMgZGlzdHJpYnV0aW9uIGZvciB1c2VyIF90byBmcm9tIHNhbGUgb2YgdG9rZW4gX3Rva2VuSWQKICBldmVudCBQcm9jZWVkc0RlcG9zaXRlZCh1aW50MjU2IF90b2tlbklkLCBhZGRyZXNzIF90bywgdWludDI1NiBhbW91bnQpOwoKICAvLyBAZGV2IEV2ZW50IGZvciB3aGVuIGEgdG9rZW4gZ3JvdXAgcHVyY2hhc2VzIGEgdG9rZW4KICBldmVudCBUb2tlblB1cmNoYXNlZCh1aW50MjU2IF90b2tlbklkLCB1aW50MjU2IGJhbGFuY2UpOwoKICAvKioqIFNUT1JBR0UgKioqLwogIC8vIFRoZSBhZGRyZXNzZXMgb2YgdGhlIGFjY291bnRzIChvciBjb250cmFjdHMpIHRoYXQgY2FuIGV4ZWN1dGUgYWN0aW9ucyB3aXRoaW4gZWFjaCByb2xlcy4KICBhZGRyZXNzIHB1YmxpYyBjZW9BZGRyZXNzOwogIGFkZHJlc3MgcHVibGljIGNmb0FkZHJlc3M7CiAgYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczE7CiAgYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczI7CiAgYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczM7CgogIC8vIEBkZXYgS2VlcHMgdHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaXMgcGF1c2VkLiBXaGVuIHRoYXQgaXMgdHJ1ZSwgbW9zdCBhY3Rpb25zIGFyZSBibG9ja2VkCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CiAgYm9vbCBwdWJsaWMgZm9ya2luZyA9IGZhbHNlOwoKICB1aW50MjU2IHB1YmxpYyBhY3RpdmVHcm91cHM7CiAgdWludDI1NiBwdWJsaWMgY29tbWlzc2lvbkJhbGFuY2U7CiAgdWludDI1NiBwcml2YXRlIGRpc3RyaWJ1dGlvbk51bWVyYXRvcjsKICB1aW50MjU2IHByaXZhdGUgZGlzdHJpYnV0aW9uRGVub21pbmF0b3I7CgogIENlbGVicml0eVRva2VuIHB1YmxpYyBsaW5rZWRDb250cmFjdDsKCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gdG9rZW4gSURzIHRvIHRoZSBncm91cCBhc3NvY2lhdGVkIHdpdGggdGhhdCB0b2tlbi4KICBtYXBwaW5nKHVpbnQyNTYgPT4gR3JvdXApIHByaXZhdGUgdG9rZW5JbmRleFRvR3JvdXA7CgogIC8vIEBkZXYgQSBtYXBwaW5nIGZyb20gb3duZXIgYWRkcmVzcyB0byBhdmFpbGFibGUgYmFsYW5jZSBub3QgaGVsZCBieSBhIEdyb3VwLgogIG1hcHBpbmcoYWRkcmVzcyA9PiBDb250cmlidXRvcikgcHJpdmF0ZSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3I7CgogIC8qKiogQUNDRVNTIE1PRElGSUVSUyAqKiovCiAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRU8tb25seSBmdW5jdGlvbmFsaXR5CiAgbW9kaWZpZXIgb25seUNFTygpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIENGTy1vbmx5IGZ1bmN0aW9uYWxpdHkKICBtb2RpZmllciBvbmx5Q0ZPKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNmb0FkZHJlc3MpOwogICAgXzsKICB9CgogIC8vLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ09PLW9ubHkgZnVuY3Rpb25hbGl0eQogIG1vZGlmaWVyIG9ubHlDT08oKSB7CiAgICByZXF1aXJlKAogICAgICBtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MxIHx8CiAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzczIgfHwKICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzMwogICAgKTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIGNvbnRyYWN0IG1hbmFnZXJzIG9ubHkgZnVuY3Rpb25hbGl0eQogIG1vZGlmaWVyIG9ubHlDTGV2ZWwoKSB7CiAgICByZXF1aXJlKAogICAgICBtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MgfHwKICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzMSB8fAogICAgICBtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MyIHx8CiAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzczMgfHwKICAgICAgbXNnLnNlbmRlciA9PSBjZm9BZGRyZXNzCiAgICApOwogICAgXzsKICB9CgogIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLy8vIEBkZXYgTW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogIG1vZGlmaWVyIHdoZW5QYXVzZWQgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgaW4gZm9ya2luZyBtb2RlCiAgbW9kaWZpZXIgd2hlbk5vdEZvcmtpbmcoKSB7CiAgICByZXF1aXJlKCFmb3JraW5nKTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBNb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgaW4gZm9ya2luZyBtb2RlCiAgbW9kaWZpZXIgd2hlbkZvcmtpbmcgewogICAgcmVxdWlyZShmb3JraW5nKTsKICAgIF87CiAgfQoKICAvKioqIENPTlNUUlVDVE9SICoqKi8KICBmdW5jdGlvbiBHcm91cEJ1eUNvbnRyYWN0KGFkZHJlc3MgY29udHJhY3RBZGRyZXNzLCB1aW50MjU2IG51bWVyYXRvciwgdWludDI1NiBkZW5vbWluYXRvcikgcHVibGljIHsKICAgIGNlb0FkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgY29vQWRkcmVzczEgPSBtc2cuc2VuZGVyOwogICAgY29vQWRkcmVzczIgPSBtc2cuc2VuZGVyOwogICAgY29vQWRkcmVzczMgPSBtc2cuc2VuZGVyOwogICAgY2ZvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICBkaXN0cmlidXRpb25OdW1lcmF0b3IgPSBudW1lcmF0b3I7CiAgICBkaXN0cmlidXRpb25EZW5vbWluYXRvciA9IGRlbm9taW5hdG9yOwogICAgbGlua2VkQ29udHJhY3QgPSBDZWxlYnJpdHlUb2tlbihjb250cmFjdEFkZHJlc3MpOwogIH0KCiAgLyoqKiBQVUJMSUMgRlVOQ1RJT05TICoqKi8KICAvLy8gQG5vdGljZSBGYWxsYmFjayBmbiBmb3IgcmVjZWl2aW5nIGV0aGVyCiAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgIEZ1bmRzUmVjZWl2ZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICB9CgogIC8qKiBBY3Rpb24gRm5zICoqLwogIC8vLyBAbm90aWNlIEJhY2t1cCBmdW5jdGlvbiBmb3IgYWN0aXZhdGluZyB0b2tlbiBwdXJjaGFzZQogIC8vLyAgcmVxdWlyZXMgc2VuZGVyIHRvIGJlIGEgbWVtYmVyIG9mIHRoZSBncm91cCBvciBDTGV2ZWwKICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gZ3JvdXAKICBmdW5jdGlvbiBhY3RpdmF0ZVB1cmNoYXNlKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHdoZW5Ob3RQYXVzZWQgewogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwogICAgcmVxdWlyZShncm91cC5hZGRyZXNzVG9Db250cmlidXRpb25bbXNnLnNlbmRlcl0gPiAwIHx8CiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MxIHx8CiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzczIgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzMyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGNmb0FkZHJlc3MpOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0aGF0IGVub3VnaCBtb25leSBoYXMgYmVlbiBjb250cmlidXRlZCB0byBncm91cAogICAgdmFyIHByaWNlID0gbGlua2VkQ29udHJhY3QucHJpY2VPZihfdG9rZW5JZCk7CiAgICByZXF1aXJlKGdyb3VwLmNvbnRyaWJ1dGVkQmFsYW5jZSA+PSBwcmljZSk7CgogICAgLy8gU2FmZXR5IGNoZWNrIHRoYXQgdG9rZW4gaGFkIG5vdCBiZSBwdXJjaGFzZWQgeWV0CiAgICByZXF1aXJlKGdyb3VwLnB1cmNoYXNlUHJpY2UgPT0gMCk7CgogICAgX3B1cmNoYXNlKF90b2tlbklkLCBwcmljZSk7CiAgfQoKICAvLy8gQG5vdGljZSBBbGxvdyB1c2VyIHRvIGNvbnRyaWJ1dGUgdG8gX3Rva2VuSWQgdG9rZW4gZ3JvdXAKICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgdG9rZW4gZ3JvdXAgdG8gYmUgam9pbmVkCiAgZnVuY3Rpb24gY29udHJpYnV0ZVRvVG9rZW5Hcm91cCh1aW50MjU2IF90b2tlbklkKQogIGV4dGVybmFsIHBheWFibGUgd2hlbk5vdEZvcmtpbmcgd2hlbk5vdFBhdXNlZCB7CiAgICBhZGRyZXNzIHVzZXJBZGQgPSBtc2cuc2VuZGVyOwogICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1biAgZXhwZWN0ZWQgMHgwIGRlZmF1bHQuCiAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbCh1c2VyQWRkKSk7CgogICAgLy8vIFNhZmV0eSBjaGVjayB0byBtYWtlIHN1cmUgY29udHJpYnV0b3IgaGFzIG5vdCBhbHJlYWR5IGpvaW5lZCB0aGlzIGdyb3VwCiAgICB2YXIgZ3JvdXAgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF07CiAgICB2YXIgY29udHJpYnV0b3IgPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF07CiAgICBpZiAoIWdyb3VwLmV4aXN0cykgeyAvLyBDcmVhdGUgZ3JvdXAgaWYgbm90IGV4aXN0cwogICAgICBncm91cC5leGlzdHMgPSB0cnVlOwogICAgICBhY3RpdmVHcm91cHMgKz0gMTsKICAgIH0gZWxzZSB7CiAgICAgIHJlcXVpcmUoZ3JvdXAuYWRkcmVzc1RvQ29udHJpYnV0b3JBcnJJbmRleFt1c2VyQWRkXSA9PSAwKTsKICAgIH0KCiAgICBpZiAoIWNvbnRyaWJ1dG9yLmV4aXN0cykgeyAvLyBDcmVhdGUgY29udHJpYnV0b3IgaWYgbm90IGV4aXN0cwogICAgICB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF0uZXhpc3RzID0gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJlcXVpcmUoY29udHJpYnV0b3IudG9rZW5JZFRvR3JvdXBBcnJJbmRleFtfdG9rZW5JZF0gPT0gMCk7CiAgICB9CgogICAgLy8gU2FmZXR5IGNoZWNrIHRvIG1ha2Ugc3VyZSBncm91cCBpc24ndCBjdXJyZW50bHkgaG9sZGluZyBvbnRvIHRva2VuCiAgICAvLyAgb3IgaGFzIGEgZ3JvdXAgcmVjb3JkIHN0b3JlZCAoZm9yIHNhbGVzIHByb2NlZWRzIGRpc3RyaWJ1dGlvbikKICAgIHJlcXVpcmUoZ3JvdXAucHVyY2hhc2VQcmljZSA9PSAwKTsKCiAgICAvLy8gU2FmZXR5IGNoZWNrIHRvIGVuc3VyZSBhbW91bnQgY29udHJpYnV0ZWQgaXMgaGlnaGVyIHRoYW4gbWluIHJlcXVpcmVkIHBlcmNlbnRhZ2UKICAgIC8vLyAgb2YgcHVyY2hhc2UgcHJpY2UKICAgIHVpbnQyNTYgdG9rZW5QcmljZSA9IGxpbmtlZENvbnRyYWN0LnByaWNlT2YoX3Rva2VuSWQpOwogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gdWludDI1NihTYWZlTWF0aC5kaXYodG9rZW5QcmljZSwgTUFYX0NPTlRSSUJVVElPTl9TTE9UUykpKTsKCiAgICAvLyBJbmRleCBzYXZlZCBpcyAxICsgdGhlIGFycmF5J3MgaW5kZXgsIGIvYyAwIGlzIHRoZSBkZWZhdWx0IHZhbHVlIGluIGEgbWFwcGluZywKICAgIC8vICBzbyBhcyBzdG9yZWQgb24gdGhlIG1hcHBpbmcsIGFycmF5IGluZGV4IHdpbGwgYmVnaW4gYXQgMQogICAgdWludDI1NiBjSW5kZXggPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0b3JBcnIucHVzaCh1c2VyQWRkKTsKICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5hZGRyZXNzVG9Db250cmlidXRvckFyckluZGV4W3VzZXJBZGRdID0gY0luZGV4OwoKICAgIHVpbnQyNTYgYW1vdW50TmVlZGVkID0gU2FmZU1hdGguc3ViKHRva2VuUHJpY2UsIGdyb3VwLmNvbnRyaWJ1dGVkQmFsYW5jZSk7CiAgICBpZiAobXNnLnZhbHVlID4gYW1vdW50TmVlZGVkKSB7CiAgICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5hZGRyZXNzVG9Db250cmlidXRpb25bdXNlckFkZF0gPSBhbW91bnROZWVkZWQ7CiAgICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRlZEJhbGFuY2UgKz0gYW1vdW50TmVlZGVkOwogICAgICAvLyByZWZ1bmQgZXhjZXNzIHBhaWQKICAgICAgdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdLndpdGhkcmF3YWJsZUJhbGFuY2UgKz0gU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgYW1vdW50TmVlZGVkKTsKICAgICAgRnVuZHNEZXBvc2l0ZWQodXNlckFkZCwgU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgYW1vdW50TmVlZGVkKSk7CiAgICB9IGVsc2UgewogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uYWRkcmVzc1RvQ29udHJpYnV0aW9uW3VzZXJBZGRdID0gbXNnLnZhbHVlOwogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0ZWRCYWxhbmNlICs9IG1zZy52YWx1ZTsKICAgIH0KCiAgICAvLyBJbmRleCBzYXZlZCBpcyAxICsgdGhlIGFycmF5J3MgaW5kZXgsIGIvYyAwIGlzIHRoZSBkZWZhdWx0IHZhbHVlIGluIGEgbWFwcGluZywKICAgIC8vICBzbyBhcyBzdG9yZWQgb24gdGhlIG1hcHBpbmcsIGFycmF5IGluZGV4IHdpbGwgYmVnaW4gYXQgMQogICAgdWludDI1NiBnSW5kZXggPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF0uZ3JvdXBBcnIucHVzaChfdG9rZW5JZCk7CiAgICB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF0udG9rZW5JZFRvR3JvdXBBcnJJbmRleFtfdG9rZW5JZF0gPSBnSW5kZXg7CgogICAgSm9pbkdyb3VwKAogICAgICBfdG9rZW5JZCwKICAgICAgdXNlckFkZCwKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmNvbnRyaWJ1dGVkQmFsYW5jZSwKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dGlvblt1c2VyQWRkXQogICAgKTsKCiAgICAvLyBQdXJjaGFzZSB0b2tlbiBpZiBlbm91Z2ggZnVuZHMgY29udHJpYnV0ZWQKICAgIGlmICh0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0ZWRCYWxhbmNlID49IHRva2VuUHJpY2UpIHsKICAgICAgX3B1cmNoYXNlKF90b2tlbklkLCB0b2tlblByaWNlKTsKICAgIH0KICB9CgogIC8vLyBAbm90aWNlIEFsbG93IHVzZXIgdG8gbGVhdmUgcHVyY2hhc2UgZ3JvdXA7IG5vdGUgdGhhdCB0aGVpciBjb250cmlidXRpb24KICAvLy8gIHdpbGwgYmUgYWRkZWQgdG8gdGhlaXIgd2l0aGRyYXdhYmxlIGJhbGFuY2UsIGFuZCBub3QgZGlyZWN0bHkgcmVmdW5kZWQuCiAgLy8vICBVc2VyIGNhbiBjYWxsIHdpdGhkcmF3QmFsYW5jZSB0byByZXRyaWV2ZSBmdW5kcy4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gcHVyY2hhc2UgZ3JvdXAgdG8gYmUgbGVmdAogIGZ1bmN0aW9uIGxlYXZlVG9rZW5Hcm91cCh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB3aGVuTm90UGF1c2VkIHsKICAgIGFkZHJlc3MgdXNlckFkZCA9IG1zZy5zZW5kZXI7CgogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwogICAgdmFyIGNvbnRyaWJ1dG9yID0gdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKHVzZXJBZGQpKTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGV4aXN0czsKICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGhhc24ndCBwdXJjaGFzZWQgdG9rZW4gYWxyZWFkeQogICAgcmVxdWlyZShncm91cC5wdXJjaGFzZVByaWNlID09IDApOwoKICAgIC8vIFNhZmV0eSBjaGVja3MgdG8gZW5zdXJlIGNvbnRyaWJ1dG9yIGhhcyBjb250cmlidXRlZCB0byBncm91cAogICAgcmVxdWlyZShncm91cC5hZGRyZXNzVG9Db250cmlidXRvckFyckluZGV4W3VzZXJBZGRdID4gMCk7CiAgICByZXF1aXJlKGNvbnRyaWJ1dG9yLnRva2VuSWRUb0dyb3VwQXJySW5kZXhbX3Rva2VuSWRdID4gMCk7CgogICAgdWludCByZWZ1bmRCYWxhbmNlID0gX2NsZWFyQ29udHJpYnV0b3JSZWNvcmRJbkdyb3VwKF90b2tlbklkLCB1c2VyQWRkKTsKICAgIF9jbGVhckdyb3VwUmVjb3JkSW5Db250cmlidXRvcihfdG9rZW5JZCwgdXNlckFkZCk7CgogICAgdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdLndpdGhkcmF3YWJsZUJhbGFuY2UgKz0gcmVmdW5kQmFsYW5jZTsKICAgIEZ1bmRzRGVwb3NpdGVkKHVzZXJBZGQsIHJlZnVuZEJhbGFuY2UpOwoKICAgIExlYXZlR3JvdXAoCiAgICAgIF90b2tlbklkLAogICAgICB1c2VyQWRkLAogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0ZWRCYWxhbmNlLAogICAgICByZWZ1bmRCYWxhbmNlCiAgICApOwogIH0KCiAgLy8vIEBub3RpY2UgQWxsb3cgdXNlciB0byBsZWF2ZSBwdXJjaGFzZSBncm91cDsgbm90ZSB0aGF0IHRoZWlyIGNvbnRyaWJ1dGlvbgogIC8vLyAgYW5kIGFueSBmdW5kcyB0aGV5IGhhdmUgaW4gdGhlaXIgd2l0aGRyYXdhYmxlQmFsYW5jZSB3aWxsIHRyYW5zZmVyZWQgdG8gdGhlbS4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gcHVyY2hhc2UgZ3JvdXAgdG8gYmUgbGVmdAogIGZ1bmN0aW9uIGxlYXZlVG9rZW5Hcm91cEFuZFdpdGhkcmF3QmFsYW5jZSh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB3aGVuTm90UGF1c2VkIHsKICAgIGFkZHJlc3MgdXNlckFkZCA9IG1zZy5zZW5kZXI7CgogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwogICAgdmFyIGNvbnRyaWJ1dG9yID0gdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKHVzZXJBZGQpKTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGV4aXN0czsKICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGhhc24ndCBwdXJjaGFzZWQgdG9rZW4gYWxyZWFkeQogICAgcmVxdWlyZShncm91cC5wdXJjaGFzZVByaWNlID09IDApOwoKICAgIC8vIFNhZmV0eSBjaGVja3MgdG8gZW5zdXJlIGNvbnRyaWJ1dG9yIGhhcyBjb250cmlidXRlZCB0byBncm91cAogICAgcmVxdWlyZShncm91cC5hZGRyZXNzVG9Db250cmlidXRvckFyckluZGV4W3VzZXJBZGRdID4gMCk7CiAgICByZXF1aXJlKGNvbnRyaWJ1dG9yLnRva2VuSWRUb0dyb3VwQXJySW5kZXhbX3Rva2VuSWRdID4gMCk7CgogICAgdWludCByZWZ1bmRCYWxhbmNlID0gX2NsZWFyQ29udHJpYnV0b3JSZWNvcmRJbkdyb3VwKF90b2tlbklkLCB1c2VyQWRkKTsKICAgIF9jbGVhckdyb3VwUmVjb3JkSW5Db250cmlidXRvcihfdG9rZW5JZCwgdXNlckFkZCk7CgogICAgdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdLndpdGhkcmF3YWJsZUJhbGFuY2UgKz0gcmVmdW5kQmFsYW5jZTsKICAgIEZ1bmRzRGVwb3NpdGVkKHVzZXJBZGQsIHJlZnVuZEJhbGFuY2UpOwoKICAgIF93aXRoZHJhd1VzZXJGdW5kcyh1c2VyQWRkKTsKCiAgICBMZWF2ZUdyb3VwKAogICAgICBfdG9rZW5JZCwKICAgICAgdXNlckFkZCwKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmNvbnRyaWJ1dGVkQmFsYW5jZSwKICAgICAgcmVmdW5kQmFsYW5jZQogICAgKTsKICB9CgogIC8vLyBAZGV2IFdpdGhkcmF3IGJhbGFuY2UgZnJvbSBvd24gYWNjb3VudAogIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIGV4dGVybmFsIHdoZW5Ob3RQYXVzZWQgewogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobXNnLnNlbmRlcikpOwogICAgcmVxdWlyZSh1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbbXNnLnNlbmRlcl0uZXhpc3RzKTsKCiAgICBfd2l0aGRyYXdVc2VyRnVuZHMobXNnLnNlbmRlcik7CiAgfQoKICAvKiogQWRtaW4gRm5zICoqLwogIC8vLyBAbm90aWNlIEZuIGZvciBhZGp1c3RpbmcgY29tbWlzc2lvbiByYXRlCiAgLy8vIEBwYXJhbSBudW1lcmF0b3IgTnVtZXJhdG9yIGZvciBjYWxjdWxhdGluZyBmdW5kcyBkaXN0cmlidXRlZAogIC8vLyBAcGFyYW0gZGVub21pbmF0b3IgRGVub21pbmF0b3IgZm9yIGNhbGN1bGF0aW5nIGZ1bmRzIGRpc3RyaWJ1dGVkCiAgZnVuY3Rpb24gYWRqdXN0Q29tbWlzc2lvbih1aW50MjU2IG51bWVyYXRvciwgdWludDI1NiBkZW5vbWluYXRvcikgZXh0ZXJuYWwgb25seUNMZXZlbCB7CiAgICByZXF1aXJlKG51bWVyYXRvciA8PSBkZW5vbWluYXRvcik7CiAgICBkaXN0cmlidXRpb25OdW1lcmF0b3IgPSBudW1lcmF0b3I7CiAgICBkaXN0cmlidXRpb25EZW5vbWluYXRvciA9IGRlbm9taW5hdG9yOwogIH0KCiAgLy8vIEBkZXYgSW4gdGhlIGV2ZW50IG9mIG5lZWRpbmcgYSBmb3JrLCB0aGlzIGZ1bmN0aW9uIG1vdmVzIGFsbAogIC8vLyAgb2YgYSBncm91cCdzIGNvbnRyaWJ1dG9ycycgY29udHJpYnV0aW9ucyBpbnRvIHRoZWlyIHdpdGhkcmF3YWJsZSBiYWxhbmNlLgogIC8vLyBAbm90aWNlIEdyb3VwIGlzIGRpc3NvbHZlZCBhZnRlciBmbiBjYWxsCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHB1cmNoYXNlIGdyb3VwCiAgZnVuY3Rpb24gZGlzc29sdmVUb2tlbkdyb3VwKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIG9ubHlDT08gd2hlbkZvcmtpbmcgewogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBtYWtlIHN1cmUgZ3JvdXAgZXhpc3RzIGFuZCBoYWQgbm90IHB1cmNoYXNlZCBhIHRva2VuCiAgICByZXF1aXJlKGdyb3VwLmV4aXN0cyk7CiAgICByZXF1aXJlKGdyb3VwLnB1cmNoYXNlUHJpY2UgPT0gMCk7CgogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmNvbnRyaWJ1dG9yQXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFkZHJlc3MgdXNlckFkZCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRvckFycltpXTsKCiAgICAgIHZhciB1c2VyQ29udHJpYnV0aW9uID0gZ3JvdXAuYWRkcmVzc1RvQ29udHJpYnV0aW9uW3VzZXJBZGRdOwoKICAgICAgX2NsZWFyR3JvdXBSZWNvcmRJbkNvbnRyaWJ1dG9yKF90b2tlbklkLCB1c2VyQWRkKTsKCiAgICAgIC8vIGNsZWFyIGNvbnRyaWJ1dG9yIHJlY29yZCBvbiBncm91cAogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uYWRkcmVzc1RvQ29udHJpYnV0aW9uW3VzZXJBZGRdID0gMDsKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dG9yQXJySW5kZXhbdXNlckFkZF0gPSAwOwoKICAgICAgLy8gbW92ZSBjb250cmlidXRvcidzIGNvbnRyaWJ1dGlvbiB0byB0aGVpciB3aXRoZHJhd2FibGUgYmFsYW5jZQogICAgICB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF0ud2l0aGRyYXdhYmxlQmFsYW5jZSArPSB1c2VyQ29udHJpYnV0aW9uOwogICAgICBQcm9jZWVkc0RlcG9zaXRlZChfdG9rZW5JZCwgdXNlckFkZCwgdXNlckNvbnRyaWJ1dGlvbik7CiAgICB9CiAgICBhY3RpdmVHcm91cHMgLT0gMTsKICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5leGlzdHMgPSBmYWxzZTsKICB9CgogIC8vLyBAZGV2IEJhY2t1cCBmbiB0byBhbGxvdyBkaXN0cmlidXRpb24gb2YgZnVuZHMgYWZ0ZXIgc2FsZSwKICAvLy8gIGZvciB0aGUgc3BlY2lhbCBzY2VuYXJpbyB3aGVyZSBhbiBhbHRlcm5hdGUgc2FsZSBwbGF0Zm9ybSBpcyB1c2VkOwogIC8vLyBAbm90aWNlIEdyb3VwIGlzIGRpc3NvbHZlZCBhZnRlciBmbiBjYWxsCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHB1cmNoYXNlIGdyb3VwCiAgLy8vIEBwYXJhbSBfYW1vdW50IEZ1bmRzIHRvIGJlIGRpc3RyaWJ1dGVkCiAgZnVuY3Rpb24gZGlzdHJpYnV0ZUN1c3RvbVNhbGVQcm9jZWVkcyh1aW50MjU2IF90b2tlbklkLCB1aW50MjU2IF9hbW91bnQpIGV4dGVybmFsIG9ubHlDT08gewogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBtYWtlIHN1cmUgZ3JvdXAgZXhpc3RzIGFuZCBoYWQgcHVyY2hhc2VkIHRoZSB0b2tlbgogICAgcmVxdWlyZShncm91cC5leGlzdHMpOwogICAgcmVxdWlyZShncm91cC5wdXJjaGFzZVByaWNlID4gMCk7CiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKCiAgICBfZGlzdHJpYnV0ZVByb2NlZWRzKF90b2tlbklkLCBfYW1vdW50KTsKICB9CgogIC8qIC8vLyBAZGV2IEFsbG93IGRpc3RyaWJ1dGlvbiBvZiBpbnRlcmVzdCBwYXltZW50LAogIC8vLyAgR3JvdXAgaXMgaW50YWN0IGFmdGVyIGZuIGNhbGwKICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gcHVyY2hhc2UgZ3JvdXAKICBmdW5jdGlvbiBkaXN0cmlidXRlSW50ZXJlc3QodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgb25seUNPTyBwYXlhYmxlIHsKICAgIHZhciBncm91cCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXTsKICAgIHZhciBhbW91bnQgPSBtc2cudmFsdWU7CiAgICB2YXIgZXhjZXNzID0gYW1vdW50OwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBtYWtlIHN1cmUgZ3JvdXAgZXhpc3RzIGFuZCBoYWQgcHVyY2hhc2VkIHRoZSB0b2tlbgogICAgcmVxdWlyZShncm91cC5leGlzdHMpOwogICAgcmVxdWlyZShncm91cC5wdXJjaGFzZVByaWNlID4gMCk7CiAgICByZXF1aXJlKGFtb3VudCA+IDApOwoKICAgIGZvciAodWludCBpID0gMDsgaSA8IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRvckFyci5sZW5ndGg7IGkrKykgewogICAgICBhZGRyZXNzIHVzZXJBZGQgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0b3JBcnJbaV07CgogICAgICAvLyBjYWxjdWxhdGUgY29udHJpYnV0b3IncyBpbnRlcmVzdCBwcm9jZWVkcyBhbmQgYWRkIHRvIHRoZWlyIHdpdGhkcmF3YWJsZSBiYWxhbmNlCiAgICAgIHVpbnQyNTYgdXNlclByb2NlZWRzID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKGFtb3VudCwKICAgICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uYWRkcmVzc1RvQ29udHJpYnV0aW9uW3VzZXJBZGRdKSwKICAgICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0ZWRCYWxhbmNlKSk7CiAgICAgIHVzZXJBZGRyZXNzVG9Db250cmlidXRvclt1c2VyQWRkXS53aXRoZHJhd2FibGVCYWxhbmNlICs9IHVzZXJQcm9jZWVkczsKCiAgICAgIGV4Y2VzcyAtPSB1c2VyUHJvY2VlZHM7CgogICAgICBJbnRlcmVzdERlcG9zaXRlZChfdG9rZW5JZCwgdXNlckFkZCwgdXNlclByb2NlZWRzKTsKICAgIH0KICAgIGNvbW1pc3Npb25CYWxhbmNlICs9IGV4Y2VzczsKICAgIENvbW1pc3Npb24oX3Rva2VuSWQsIGV4Y2Vzcyk7CiAgfSAqLwoKICAvLy8gQGRldiBEaXN0cmlidXRlIGZ1bmRzIGFmdGVyIGEgdG9rZW4gaXMgc29sZC4KICAvLy8gIEdyb3VwIGlzIGRpc3NvbHZlZCBhZnRlciBmbiBjYWxsCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHB1cmNoYXNlIGdyb3VwCiAgZnVuY3Rpb24gZGlzdHJpYnV0ZVNhbGVQcm9jZWVkcyh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCBvbmx5Q09PIHsKICAgIHZhciBncm91cCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGV4aXN0cyBhbmQgaGFkIHB1cmNoYXNlZCB0aGUgdG9rZW4KICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKICAgIHJlcXVpcmUoZ3JvdXAucHVyY2hhc2VQcmljZSA+IDApOwoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBtYWtlIHN1cmUgdG9rZW4gaGFkIGJlZW4gc29sZAogICAgdWludDI1NiBjdXJyUHJpY2UgPSBsaW5rZWRDb250cmFjdC5wcmljZU9mKF90b2tlbklkKTsKICAgIHVpbnQyNTYgc29sZFByaWNlID0gX25ld1ByaWNlKGdyb3VwLnB1cmNoYXNlUHJpY2UpOwogICAgcmVxdWlyZShjdXJyUHJpY2UgPiBzb2xkUHJpY2UpOwoKICAgIHVpbnQyNTYgcGF5bWVudEludG9Db250cmFjdCA9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzb2xkUHJpY2UsIDk0KSwgMTAwKSk7CiAgICBfZGlzdHJpYnV0ZVByb2NlZWRzKF90b2tlbklkLCBwYXltZW50SW50b0NvbnRyYWN0KTsKICB9CgogIC8vLyBAZGV2IENhbGxlZCBieSBhbnkgIkMtbGV2ZWwiIHJvbGUgdG8gcGF1c2UgdGhlIGNvbnRyYWN0LiBVc2VkIG9ubHkgd2hlbgogIC8vLyAgYSBidWcgb3IgZXhwbG9pdCBpcyBkZXRlY3RlZCBhbmQgd2UgbmVlZCB0byBsaW1pdCBkYW1hZ2UuCiAgZnVuY3Rpb24gcGF1c2UoKSBleHRlcm5hbCBvbmx5Q0xldmVsIHdoZW5Ob3RQYXVzZWQgewogICAgcGF1c2VkID0gdHJ1ZTsKICB9CgogIC8vLyBAZGV2IFVucGF1c2VzIHRoZSBzbWFydCBjb250cmFjdC4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBDRU8sIHNpbmNlCiAgLy8vICBvbmUgcmVhc29uIHdlIG1heSBwYXVzZSB0aGUgY29udHJhY3QgaXMgd2hlbiBDRk8gb3IgQ09PIGFjY291bnRzIGFyZQogIC8vLyAgY29tcHJvbWlzZWQuCiAgZnVuY3Rpb24gdW5wYXVzZSgpIGV4dGVybmFsIG9ubHlDRU8gd2hlblBhdXNlZCB7CiAgICAvLyBjYW4ndCB1bnBhdXNlIGlmIGNvbnRyYWN0IHdhcyB1cGdyYWRlZAogICAgcGF1c2VkID0gZmFsc2U7CiAgfQoKICAvLy8gQGRldiBDYWxsZWQgYnkgYW55ICJDLWxldmVsIiByb2xlIHRvIHNldCB0aGUgY29udHJhY3QgdG8gLiBVc2VkIG9ubHkgd2hlbgogIC8vLyAgYSBidWcgb3IgZXhwbG9pdCBpcyBkZXRlY3RlZCBhbmQgd2UgbmVlZCB0byBsaW1pdCBkYW1hZ2UuCiAgZnVuY3Rpb24gc2V0VG9Gb3JraW5nKCkgZXh0ZXJuYWwgb25seUNMZXZlbCB3aGVuTm90Rm9ya2luZyB7CiAgICBmb3JraW5nID0gdHJ1ZTsKICB9CgogIC8vLyBAZGV2IFVucGF1c2VzIHRoZSBzbWFydCBjb250cmFjdC4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBDRU8sIHNpbmNlCiAgLy8vICBvbmUgcmVhc29uIHdlIG1heSBwYXVzZSB0aGUgY29udHJhY3QgaXMgd2hlbiBDRk8gb3IgQ09PIGFjY291bnRzIGFyZQogIC8vLyAgY29tcHJvbWlzZWQuCiAgZnVuY3Rpb24gc2V0VG9Ob3RGb3JraW5nKCkgZXh0ZXJuYWwgb25seUNFTyB3aGVuRm9ya2luZyB7CiAgICAvLyBjYW4ndCB1bnBhdXNlIGlmIGNvbnRyYWN0IHdhcyB1cGdyYWRlZAogICAgZm9ya2luZyA9IGZhbHNlOwogIH0KCiAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ0VPLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDRU8uCiAgLy8vIEBwYXJhbSBfbmV3Q0VPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0VPCiAgZnVuY3Rpb24gc2V0Q0VPKGFkZHJlc3MgX25ld0NFTykgZXh0ZXJuYWwgb25seUNFTyB7CiAgICByZXF1aXJlKF9uZXdDRU8gIT0gYWRkcmVzcygwKSk7CgogICAgY2VvQWRkcmVzcyA9IF9uZXdDRU87CiAgfQoKICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDRk8uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IENFTy4KICAvLy8gQHBhcmFtIF9uZXdDRk8gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBDRk8KICBmdW5jdGlvbiBzZXRDRk8oYWRkcmVzcyBfbmV3Q0ZPKSBleHRlcm5hbCBvbmx5Q0VPIHsKICAgIHJlcXVpcmUoX25ld0NGTyAhPSBhZGRyZXNzKDApKTsKCiAgICBjZm9BZGRyZXNzID0gX25ld0NGTzsKICB9CgogIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENPTzEuIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IENFTy4KICAvLy8gQHBhcmFtIF9uZXdDT08xIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ09PMQogIGZ1bmN0aW9uIHNldENPTzEoYWRkcmVzcyBfbmV3Q09PMSkgZXh0ZXJuYWwgb25seUNFTyB7CiAgICByZXF1aXJlKF9uZXdDT08xICE9IGFkZHJlc3MoMCkpOwoKICAgIGNvb0FkZHJlc3MxID0gX25ld0NPTzE7CiAgfQoKICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDT08yLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDRU8uCiAgLy8vIEBwYXJhbSBfbmV3Q09PMiBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENPTzIKICBmdW5jdGlvbiBzZXRDT08yKGFkZHJlc3MgX25ld0NPTzIpIGV4dGVybmFsIG9ubHlDRU8gewogICAgcmVxdWlyZShfbmV3Q09PMiAhPSBhZGRyZXNzKDApKTsKCiAgICBjb29BZGRyZXNzMiA9IF9uZXdDT08yOwogIH0KCiAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ09PMy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ0VPLgogIC8vLyBAcGFyYW0gX25ld0NPTzMgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBDT08zCiAgZnVuY3Rpb24gc2V0Q09PMyhhZGRyZXNzIF9uZXdDT08zKSBleHRlcm5hbCBvbmx5Q0VPIHsKICAgIHJlcXVpcmUoX25ld0NPTzMgIT0gYWRkcmVzcygwKSk7CgogICAgY29vQWRkcmVzczMgPSBfbmV3Q09PMzsKICB9CgogIC8vLyBAZGV2IEJhY2t1cCBmbiB0byBhbGxvdyB0cmFuc2ZlciBvZiB0b2tlbiBvdXQgb2YKICAvLy8gIGNvbnRyYWN0LCBmb3IgdXNlIHdoZXJlIGEgcHVyY2hhc2UgZ3JvdXAgd2FudHMgdG8gdXNlIGFuIGFsdGVybmF0ZQogIC8vLyAgc2VsbGluZyBwbGF0Zm9ybQogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiBwdXJjaGFzZSBncm91cAogIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW4gdG8KICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgX3RvKSBleHRlcm5hbCBvbmx5Q09PIHsKICAgIHZhciBncm91cCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXTsKCiAgICAvLyBTYWZldHkgY2hlY2sgdG8gbWFrZSBzdXJlIGdyb3VwIGV4aXN0cyBhbmQgaGFkIHB1cmNoYXNlZCB0aGUgdG9rZW4KICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKICAgIHJlcXVpcmUoZ3JvdXAucHVyY2hhc2VQcmljZSA+IDApOwoKICAgIGxpbmtlZENvbnRyYWN0LnRyYW5zZmVyKF90bywgX3Rva2VuSWQpOwogIH0KCiAgLy8vIEBkZXYgV2l0aGRyYXdzIHNhbGUgY29tbWlzc2lvbiwgQ0ZPLW9ubHkgZnVuY3Rpb25hbGl0eQogIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3MgZm9yIGNvbW1pc3Npb24gdG8gYmUgc2VudCB0bwogIGZ1bmN0aW9uIHdpdGhkcmF3Q29tbWlzc2lvbihhZGRyZXNzIF90bykgZXh0ZXJuYWwgb25seUNGTyB7CiAgICB1aW50MjU2IGJhbGFuY2UgPSBjb21taXNzaW9uQmFsYW5jZTsKICAgIGFkZHJlc3MgdHJhbnNmZXJlZSA9IChfdG8gPT0gYWRkcmVzcygwKSkgPyBjZm9BZGRyZXNzIDogX3RvOwogICAgY29tbWlzc2lvbkJhbGFuY2UgPSAwOwogICAgaWYgKGJhbGFuY2UgPiAwKSB7CiAgICAgIHRyYW5zZmVyZWUudHJhbnNmZXIoYmFsYW5jZSk7CiAgICB9CiAgICBGdW5kc1dpdGhkcmF3bih0cmFuc2ZlcmVlLCBiYWxhbmNlKTsKICB9CgogIC8qKiBJbmZvcm1hdGlvbiBRdWVyeSBGbnMgKiovCiAgLy8vIEBkZXYgR2V0IGNvbnRyaWJ1dGVkIGJhbGFuY2UgaW4gX3Rva2VuSWQgdG9rZW4gZ3JvdXAgZm9yIHVzZXIKICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgcXVlcmllZAogIGZ1bmN0aW9uIGdldENvbnRyaWJ1dGlvbkJhbGFuY2VGb3JUb2tlbkdyb3VwKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgdXNlckFkZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgIHZhciBncm91cCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXTsKICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKICAgIGJhbGFuY2UgPSBncm91cC5hZGRyZXNzVG9Db250cmlidXRpb25bdXNlckFkZF07CiAgfQoKICAvLy8gQGRldiBHZXQgY29udHJpYnV0ZWQgYmFsYW5jZSBpbiBfdG9rZW5JZCB0b2tlbiBncm91cCBmb3IgdXNlcgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSB0b2tlbiB0byBiZSBxdWVyaWVkCiAgZnVuY3Rpb24gZ2V0U2VsZkNvbnRyaWJ1dGlvbkJhbGFuY2VGb3JUb2tlbkdyb3VwKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICB2YXIgZ3JvdXAgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF07CiAgICByZXF1aXJlKGdyb3VwLmV4aXN0cyk7CiAgICBiYWxhbmNlID0gZ3JvdXAuYWRkcmVzc1RvQ29udHJpYnV0aW9uW21zZy5zZW5kZXJdOwogIH0KCiAgLy8vIEBkZXYgR2V0IGFycmF5IG9mIGNvbnRyaWJ1dG9ycycgYWRkcmVzc2VzIGluIF90b2tlbklkIHRva2VuIGdyb3VwCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHF1ZXJpZWQKICBmdW5jdGlvbiBnZXRDb250cmlidXRvcnNJblRva2VuR3JvdXAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzW10gY29udHJpYkFkZHIpIHsKICAgIHZhciBncm91cCA9IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXTsKICAgIHJlcXVpcmUoZ3JvdXAuZXhpc3RzKTsKICAgIGNvbnRyaWJBZGRyID0gZ3JvdXAuY29udHJpYnV0b3JBcnI7CiAgfQoKICAvLy8gQGRldiBHZXQgbm8uIG9mIGNvbnRyaWJ1dG9ycyBpbiBfdG9rZW5JZCB0b2tlbiBncm91cAogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSB0b2tlbiB0byBiZSBxdWVyaWVkCiAgZnVuY3Rpb24gZ2V0Q29udHJpYnV0b3JzSW5Ub2tlbkdyb3VwQ291bnQodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50IGNvdW50KSB7CiAgICB2YXIgZ3JvdXAgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF07CiAgICByZXF1aXJlKGdyb3VwLmV4aXN0cyk7CiAgICBjb3VudCA9IGdyb3VwLmNvbnRyaWJ1dG9yQXJyLmxlbmd0aDsKICB9CgogIC8vLyBAZGV2IEdldCBsaXN0IG9mIHRva2VuSWRzIG9mIHRva2VuIGdyb3VwcyBhIHVzZXIgY29udHJpYnV0ZWQgdG8KICBmdW5jdGlvbiBnZXRHcm91cHNDb250cmlidXRlZFRvKGFkZHJlc3MgdXNlckFkZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2W10gZ3JvdXBJZHMpIHsKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKHVzZXJBZGQpKTsKCiAgICB2YXIgY29udHJpYnV0b3IgPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbdXNlckFkZF07CiAgICByZXF1aXJlKGNvbnRyaWJ1dG9yLmV4aXN0cyk7CgogICAgZ3JvdXBJZHMgPSBjb250cmlidXRvci5ncm91cEFycjsKICB9CgogIC8vLyBAZGV2IEdldCBsaXN0IG9mIHRva2VuSWRzIG9mIHRva2VuIGdyb3VwcyB0aGUgdXNlciBjb250cmlidXRlZCB0bwogIGZ1bmN0aW9uIGdldFNlbGZHcm91cHNDb250cmlidXRlZFRvKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2W10gZ3JvdXBJZHMpIHsKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKG1zZy5zZW5kZXIpKTsKCiAgICB2YXIgY29udHJpYnV0b3IgPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbbXNnLnNlbmRlcl07CiAgICByZXF1aXJlKGNvbnRyaWJ1dG9yLmV4aXN0cyk7CgogICAgZ3JvdXBJZHMgPSBjb250cmlidXRvci5ncm91cEFycjsKICB9CgogIC8vLyBAZGV2IEdldCBwcmljZSBhdCB3aGljaCB0b2tlbiBncm91cCBwdXJjaGFzZWQgX3Rva2VuSWQgdG9rZW4KICBmdW5jdGlvbiBnZXRHcm91cFB1cmNoYXNlZFByaWNlKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBwcmljZSkgewogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwogICAgcmVxdWlyZShncm91cC5leGlzdHMpOwogICAgcmVxdWlyZShncm91cC5wdXJjaGFzZVByaWNlID4gMCk7CiAgICBwcmljZSA9IGdyb3VwLnB1cmNoYXNlUHJpY2U7CiAgfQoKICAvLy8gQGRldiBHZXQgd2l0aGRyYXdhYmxlIGJhbGFuY2UgZnJvbSBzYWxlIHByb2NlZWRzIGZvciBhIHVzZXIKICBmdW5jdGlvbiBnZXRXaXRoZHJhd2FibGVCYWxhbmNlKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUoX2FkZHJlc3NOb3ROdWxsKG1zZy5zZW5kZXIpKTsKCiAgICB2YXIgY29udHJpYnV0b3IgPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbbXNnLnNlbmRlcl07CiAgICByZXF1aXJlKGNvbnRyaWJ1dG9yLmV4aXN0cyk7CgogICAgYmFsYW5jZSA9IGNvbnRyaWJ1dG9yLndpdGhkcmF3YWJsZUJhbGFuY2U7CiAgfQoKICAvLy8gQGRldiBHZXQgdG90YWwgY29udHJpYnV0ZWQgYmFsYW5jZSBpbiBfdG9rZW5JZCB0b2tlbiBncm91cAogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSB0b2tlbiBncm91cCB0byBiZSBxdWVyaWVkCiAgZnVuY3Rpb24gZ2V0VG9rZW5Hcm91cFRvdGFsQmFsYW5jZSh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgdmFyIGdyb3VwID0gdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdOwogICAgcmVxdWlyZShncm91cC5leGlzdHMpOwogICAgYmFsYW5jZSA9IGdyb3VwLmNvbnRyaWJ1dGVkQmFsYW5jZTsKICB9CgogIC8qKiogUFJJVkFURSBGVU5DVElPTlMgKioqLwogIC8vLyBAZGV2IFNhZmV0eSBjaGVjayBvbiBfdG8gYWRkcmVzcyB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIHRvIGJlIGNoZWNrZWQKICBmdW5jdGlvbiBfYWRkcmVzc05vdE51bGwoYWRkcmVzcyBfdG8pIHByaXZhdGUgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gX3RvICE9IGFkZHJlc3MoMCk7CiAgfQoKICAvLy8gQGRldiBDbGVhcnMgcmVjb3JkIG9mIGEgQ29udHJpYnV0b3IgZnJvbSBhIEdyb3VwJ3MgcmVjb3JkCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUb2tlbiBJRCBvZiBHcm91cCB0byBiZSBjbGVhcmVkCiAgLy8vIEBwYXJhbSBfdXNlckFkZCBBZGRyZXNzIG9mIENvbnRyaWJ1dG9yCiAgZnVuY3Rpb24gX2NsZWFyQ29udHJpYnV0b3JSZWNvcmRJbkdyb3VwKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgX3VzZXJBZGQpIHByaXZhdGUgcmV0dXJucyAodWludDI1NiByZWZ1bmRCYWxhbmNlKSB7CiAgICB2YXIgZ3JvdXAgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF07CgogICAgLy8gSW5kZXggd2FzIHNhdmVkIGlzIDEgKyB0aGUgYXJyYXkncyBpbmRleCwgYi9jIDAgaXMgdGhlIGRlZmF1bHQgdmFsdWUKICAgIC8vICBpbiBhIG1hcHBpbmcuCiAgICB1aW50IGNJbmRleCA9IGdyb3VwLmFkZHJlc3NUb0NvbnRyaWJ1dG9yQXJySW5kZXhbX3VzZXJBZGRdIC0gMTsKICAgIHVpbnQgbGFzdENJbmRleCA9IGdyb3VwLmNvbnRyaWJ1dG9yQXJyLmxlbmd0aCAtIDE7CiAgICByZWZ1bmRCYWxhbmNlID0gZ3JvdXAuYWRkcmVzc1RvQ29udHJpYnV0aW9uW191c2VyQWRkXTsKCiAgICAvLyBjbGVhciBjb250cmlidXRpb24gcmVjb3JkIGluIGdyb3VwCiAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uYWRkcmVzc1RvQ29udHJpYnV0b3JBcnJJbmRleFtfdXNlckFkZF0gPSAwOwogICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dGlvbltfdXNlckFkZF0gPSAwOwoKICAgIC8vIG1vdmUgYWRkcmVzcyBpbiBsYXN0IHBvc2l0aW9uIHRvIGRlbGV0ZWQgY29udHJpYnV0b3IncyBzcG90CiAgICBpZiAobGFzdENJbmRleCA+IDApIHsKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dG9yQXJySW5kZXhbZ3JvdXAuY29udHJpYnV0b3JBcnJbbGFzdENJbmRleF1dID0gY0luZGV4OwogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0b3JBcnJbY0luZGV4XSA9IGdyb3VwLmNvbnRyaWJ1dG9yQXJyW2xhc3RDSW5kZXhdOwogICAgfQoKICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRvckFyci5sZW5ndGggLT0gMTsKICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRlZEJhbGFuY2UgLT0gcmVmdW5kQmFsYW5jZTsKICB9CgogIC8vLyBAZGV2IENsZWFycyByZWNvcmQgb2YgYSBHcm91cCBmcm9tIGEgQ29udHJpYnV0b3IncyByZWNvcmQKICAvLy8gQHBhcmFtIF90b2tlbklkIFRva2VuIElEIG9mIEdyb3VwIHRvIGJlIGNsZWFyZWQKICAvLy8gQHBhcmFtIF91c2VyQWRkIEFkZHJlc3Mgb2YgQ29udHJpYnV0b3IKICBmdW5jdGlvbiBfY2xlYXJHcm91cFJlY29yZEluQ29udHJpYnV0b3IodWludDI1NiBfdG9rZW5JZCwgYWRkcmVzcyBfdXNlckFkZCkgcHJpdmF0ZSB7CiAgICAvLyBJbmRleCBzYXZlZCBpcyAxICsgdGhlIGFycmF5J3MgaW5kZXgsIGIvYyAwIGlzIHRoZSBkZWZhdWx0IHZhbHVlCiAgICAvLyAgaW4gYSBtYXBwaW5nLgogICAgdWludCBnSW5kZXggPSB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbX3VzZXJBZGRdLnRva2VuSWRUb0dyb3VwQXJySW5kZXhbX3Rva2VuSWRdIC0gMTsKICAgIHVpbnQgbGFzdEdJbmRleCA9IHVzZXJBZGRyZXNzVG9Db250cmlidXRvcltfdXNlckFkZF0uZ3JvdXBBcnIubGVuZ3RoIC0gMTsKCiAgICAvLyBjbGVhciBHcm91cCByZWNvcmQgaW4gQ29udHJpYnV0b3IKICAgIHVzZXJBZGRyZXNzVG9Db250cmlidXRvcltfdXNlckFkZF0udG9rZW5JZFRvR3JvdXBBcnJJbmRleFtfdG9rZW5JZF0gPSAwOwoKICAgIC8vIG1vdmUgdG9rZW5JZCBmcm9tIGVuZCBvZiBhcnJheSB0byBkZWxldGVkIEdyb3VwIHJlY29yZCdzIHNwb3QKICAgIGlmIChsYXN0R0luZGV4ID4gMCkgewogICAgICB1c2VyQWRkcmVzc1RvQ29udHJpYnV0b3JbX3VzZXJBZGRdLnRva2VuSWRUb0dyb3VwQXJySW5kZXhbdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW191c2VyQWRkXS5ncm91cEFycltsYXN0R0luZGV4XV0gPSBnSW5kZXg7CiAgICAgIHVzZXJBZGRyZXNzVG9Db250cmlidXRvcltfdXNlckFkZF0uZ3JvdXBBcnJbZ0luZGV4XSA9IHVzZXJBZGRyZXNzVG9Db250cmlidXRvcltfdXNlckFkZF0uZ3JvdXBBcnJbbGFzdEdJbmRleF07CiAgICB9CgogICAgdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW191c2VyQWRkXS5ncm91cEFyci5sZW5ndGggLT0gMTsKICB9CgogIC8vLyBAZGV2IFJlZGlzdHJpYnV0ZSBwcm9jZWVkcyBmcm9tIHRva2VuIHB1cmNoYXNlCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUb2tlbiBJRCBvZiB0b2tlbiB0byBiZSBwdXJjaGFzZWQKICAvLy8gQHBhcmFtIF9hbW91bnQgQW1vdW50IHBhaWQgaW50byBjb250cmFjdCBmb3IgdG9rZW4KICBmdW5jdGlvbiBfZGlzdHJpYnV0ZVByb2NlZWRzKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQyNTYgX2Ftb3VudCkgcHJpdmF0ZSB7CiAgICB1aW50MjU2IGZ1bmRzRm9yRGlzdHJpYnV0aW9uID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKF9hbW91bnQsCiAgICAgIGRpc3RyaWJ1dGlvbk51bWVyYXRvciksIGRpc3RyaWJ1dGlvbkRlbm9taW5hdG9yKSk7CiAgICB1aW50MjU2IGNvbW1pc3Npb24gPSBfYW1vdW50OwoKICAgIGZvciAodWludCBpID0gMDsgaSA8IHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5jb250cmlidXRvckFyci5sZW5ndGg7IGkrKykgewogICAgICBhZGRyZXNzIHVzZXJBZGQgPSB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0b3JBcnJbaV07CgogICAgICAvLyBjYWxjdWxhdGUgY29udHJpYnV0b3IncyBzYWxlIHByb2NlZWRzIGFuZCBhZGQgdG8gdGhlaXIgd2l0aGRyYXdhYmxlIGJhbGFuY2UKICAgICAgdWludDI1NiB1c2VyUHJvY2VlZHMgPSB1aW50MjU2KFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoZnVuZHNGb3JEaXN0cmlidXRpb24sCiAgICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dGlvblt1c2VyQWRkXSksCiAgICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmNvbnRyaWJ1dGVkQmFsYW5jZSkpOwoKICAgICAgX2NsZWFyR3JvdXBSZWNvcmRJbkNvbnRyaWJ1dG9yKF90b2tlbklkLCB1c2VyQWRkKTsKCiAgICAgIC8vIGNsZWFyIGNvbnRyaWJ1dG9yIHJlY29yZCBvbiBncm91cAogICAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uYWRkcmVzc1RvQ29udHJpYnV0aW9uW3VzZXJBZGRdID0gMDsKICAgICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmFkZHJlc3NUb0NvbnRyaWJ1dG9yQXJySW5kZXhbdXNlckFkZF0gPSAwOwoKICAgICAgY29tbWlzc2lvbiAtPSB1c2VyUHJvY2VlZHM7CiAgICAgIHVzZXJBZGRyZXNzVG9Db250cmlidXRvclt1c2VyQWRkXS53aXRoZHJhd2FibGVCYWxhbmNlICs9IHVzZXJQcm9jZWVkczsKICAgICAgUHJvY2VlZHNEZXBvc2l0ZWQoX3Rva2VuSWQsIHVzZXJBZGQsIHVzZXJQcm9jZWVkcyk7CiAgICB9CgogICAgY29tbWlzc2lvbkJhbGFuY2UgKz0gY29tbWlzc2lvbjsKICAgIENvbW1pc3Npb24oX3Rva2VuSWQsIGNvbW1pc3Npb24pOwoKICAgIGFjdGl2ZUdyb3VwcyAtPSAxOwogICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmV4aXN0cyA9IGZhbHNlOwogICAgdG9rZW5JbmRleFRvR3JvdXBbX3Rva2VuSWRdLmNvbnRyaWJ1dG9yQXJyLmxlbmd0aCA9IDA7CiAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0uY29udHJpYnV0ZWRCYWxhbmNlID0gMDsKICAgIHRva2VuSW5kZXhUb0dyb3VwW190b2tlbklkXS5wdXJjaGFzZVByaWNlID0gMDsKICB9CgogIC8vLyBAZGV2IENhbGN1bGF0ZXMgbmV4dCBwcmljZSBvZiBjZWxlYnJpdHkgdG9rZW4KICAvLy8gQHBhcmFtIF9vbGRQcmljZSBQcmV2aW91cyBwcmljZQogIGZ1bmN0aW9uIF9uZXdQcmljZSh1aW50MjU2IF9vbGRQcmljZSkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKHVpbnQyNTYgbmV3UHJpY2UpIHsKICAgIGlmIChfb2xkUHJpY2UgPCBmaXJzdFN0ZXBMaW1pdCkgewogICAgICAvLyBmaXJzdCBzdGFnZQogICAgICBuZXdQcmljZSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoX29sZFByaWNlLCAyMDApLCA5NCk7CiAgICB9IGVsc2UgaWYgKF9vbGRQcmljZSA8IHNlY29uZFN0ZXBMaW1pdCkgewogICAgICAvLyBzZWNvbmQgc3RhZ2UKICAgICAgbmV3UHJpY2UgPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKF9vbGRQcmljZSwgMTIwKSwgOTQpOwogICAgfSBlbHNlIHsKICAgICAgLy8gdGhpcmQgc3RhZ2UKICAgICAgbmV3UHJpY2UgPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKF9vbGRQcmljZSwgMTE1KSwgOTQpOwogICAgfQogIH0KCiAgLy8vIEBkZXYgQ2FsbHMgQ2VsZWJyaXR5VG9rZW4gcHVyY2hhc2UgZm4gYW5kIHVwZGF0ZXMgcmVjb3JkcwogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVG9rZW4gSUQgb2YgdG9rZW4gdG8gYmUgcHVyY2hhc2VkCiAgLy8vIEBwYXJhbSBfYW1vdW50IEFtb3VudCB0byBiZSBwYWlkIHRvIENlbGVicml0eVRva2VuCiAgZnVuY3Rpb24gX3B1cmNoYXNlKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQyNTYgX2Ftb3VudCkgcHJpdmF0ZSB7CiAgICB0b2tlbkluZGV4VG9Hcm91cFtfdG9rZW5JZF0ucHVyY2hhc2VQcmljZSA9IF9hbW91bnQ7CiAgICBsaW5rZWRDb250cmFjdC5wdXJjaGFzZS52YWx1ZShfYW1vdW50KShfdG9rZW5JZCk7CiAgICBUb2tlblB1cmNoYXNlZChfdG9rZW5JZCwgX2Ftb3VudCk7CiAgfQoKICBmdW5jdGlvbiBfd2l0aGRyYXdVc2VyRnVuZHMoYWRkcmVzcyB1c2VyQWRkKSBwcml2YXRlIHsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHVzZXJBZGRyZXNzVG9Db250cmlidXRvclt1c2VyQWRkXS53aXRoZHJhd2FibGVCYWxhbmNlOwogICAgdXNlckFkZHJlc3NUb0NvbnRyaWJ1dG9yW3VzZXJBZGRdLndpdGhkcmF3YWJsZUJhbGFuY2UgPSAwOwoKICAgIGlmIChiYWxhbmNlID4gMCkgewogICAgICBGdW5kc1dpdGhkcmF3bih1c2VyQWRkLCBiYWxhbmNlKTsKICAgICAgdXNlckFkZC50cmFuc2ZlcihiYWxhbmNlKTsKICAgIH0KICB9Cn0KCgovLy8gQHRpdGxlIEludGVyZmFjZSBmb3IgY29udHJhY3RzIGNvbmZvcm1pbmcgdG8gRVJDLTcyMTogTm9uLUZ1bmdpYmxlIFRva2VucwovLy8gQGF1dGhvciBEaWV0ZXIgU2hpcmxleSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjA5NmQ2YzdkNmM0OTY4NzE2MDY2NjQ3MzZjNjcyNzZhNjYiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PiAoaHR0cHM6Ly9naXRodWIuY29tL2RldGUpCmNvbnRyYWN0IEVSQzcyMSB7CiAgLy8gUmVxdWlyZWQgbWV0aG9kcwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBhZGRyKTsKICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgYXBwcm92ZWQsIHVpbnQyNTYgdG9rZW5JZCk7CgogIC8vIE9wdGlvbmFsCiAgLy8gZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBuYW1lKTsKICAvLyBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgc3ltYm9sKTsKICAvLyBmdW5jdGlvbiB0b2tlbk9mT3duZXJCeUluZGV4KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9pbmRleCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IHRva2VuSWQpOwogIC8vIGZ1bmN0aW9uIHRva2VuTWV0YWRhdGEodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIGluZm9VcmwpOwp9CgoKY29udHJhY3QgQ2VsZWJyaXR5VG9rZW4gaXMgRVJDNzIxIHsKCiAgLyoqKiBFVkVOVFMgKioqLwoKICAvLy8gQGRldiBUaGUgQmlydGggZXZlbnQgaXMgZmlyZWQgd2hlbmV2ZXIgYSBuZXcgcGVyc29uIGNvbWVzIGludG8gZXhpc3RlbmNlLgogIGV2ZW50IEJpcnRoKHVpbnQyNTYgdG9rZW5JZCwgc3RyaW5nIG5hbWUsIGFkZHJlc3Mgb3duZXIpOwoKICAvLy8gQGRldiBUaGUgVG9rZW5Tb2xkIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgdG9rZW4gaXMgc29sZC4KICBldmVudCBUb2tlblNvbGQodWludDI1NiB0b2tlbklkLCB1aW50MjU2IG9sZFByaWNlLCB1aW50MjU2IG5ld1ByaWNlLCBhZGRyZXNzIHByZXZPd25lciwgYWRkcmVzcyB3aW5uZXIsIHN0cmluZyBuYW1lKTsKCiAgLy8vIEBkZXYgVHJhbnNmZXIgZXZlbnQgYXMgZGVmaW5lZCBpbiBjdXJyZW50IGRyYWZ0IG9mIEVSQzcyMS4KICAvLy8gIG93bmVyc2hpcCBpcyBhc3NpZ25lZCwgaW5jbHVkaW5nIGJpcnRocy4KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CgogIC8qKiogQ09OU1RBTlRTICoqKi8KCiAgLy8vIEBub3RpY2UgTmFtZSBhbmQgc3ltYm9sIG9mIHRoZSBub24gZnVuZ2libGUgdG9rZW4sIGFzIGRlZmluZWQgaW4gRVJDNzIxLgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgTkFNRSA9ICJDcnlwdG9DZWxlYnJpdGllcyI7IC8vIHNvbGhpbnQtZGlzYWJsZS1saW5lCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiQ2VsZWJyaXR5VG9rZW4iOyAvLyBzb2xoaW50LWRpc2FibGUtbGluZQoKICBhZGRyZXNzIHB1YmxpYyBjZW9BZGRyZXNzOwogIGFkZHJlc3MgcHVibGljIGNvb0FkZHJlc3M7CgogIHVpbnQyNTYgcHVibGljIHByb21vQ3JlYXRlZENvdW50OwoKICAvKioqIERBVEFUWVBFUyAqKiovCiAgc3RydWN0IFBlcnNvbiB7CiAgICBzdHJpbmcgbmFtZTsKICB9CgogIC8qKiogQ09OU1RSVUNUT1IgKioqLwogIGZ1bmN0aW9uIENlbGVicml0eVRva2VuKCkgcHVibGljIHsKICAgIGNlb0FkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioqIFBVQkxJQyBGVU5DVElPTlMgKioqLwogIC8vLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgdG9rZW4gdmlhIHRha2VPd25lcnNoaXAoKSBhbmQgdHJhbnNmZXJGcm9tKCkuCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gYmUgZ3JhbnRlZCB0cmFuc2ZlciBhcHByb3ZhbC4gUGFzcyBhZGRyZXNzKDApIHRvCiAgLy8vICBjbGVhciBhbGwgYXBwcm92YWxzLgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBhcHByb3ZlKAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF90b2tlbklkCiAgKSBwdWJsaWM7CgogIC8vLyBGb3IgcXVlcnlpbmcgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudAogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZvciBiYWxhbmNlIHF1ZXJ5CiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgcHJvbW8gUGVyc29uIHdpdGggdGhlIGdpdmVuIG5hbWUsIHdpdGggZ2l2ZW4gX3ByaWNlIGFuZCBhc3NpZ25lcyBpdCB0byBhbiBhZGRyZXNzLgogIGZ1bmN0aW9uIGNyZWF0ZVByb21vUGVyc29uKGFkZHJlc3MgX293bmVyLCBzdHJpbmcgX25hbWUsIHVpbnQyNTYgX3ByaWNlKSBwdWJsaWM7CgogIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgUGVyc29uIHdpdGggdGhlIGdpdmVuIG5hbWUuCiAgZnVuY3Rpb24gY3JlYXRlQ29udHJhY3RQZXJzb24oc3RyaW5nIF9uYW1lKSBwdWJsaWM7CgogIC8vLyBAbm90aWNlIFJldHVybnMgYWxsIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIHBlcnNvbi4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbklkIG9mIHRoZSBwZXJzb24gb2YgaW50ZXJlc3QuCiAgZnVuY3Rpb24gZ2V0UGVyc29uKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKAogICAgc3RyaW5nIHBlcnNvbk5hbWUsCiAgICB1aW50MjU2IHNlbGxpbmdQcmljZSwKICAgIGFkZHJlc3Mgb3duZXIKICApOwoKICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZyk7CgogIC8vLyBGb3IgcXVlcnlpbmcgb3duZXIgb2YgdG9rZW4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbklEIGZvciBvd25lciBpbnF1aXJ5CiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBwdWJsaWMKICAgIHZpZXcKICAgIHJldHVybnMgKGFkZHJlc3Mgb3duZXIpOwogICAgCiAgZnVuY3Rpb24gcGF5b3V0KGFkZHJlc3MgX3RvKSBwdWJsaWM7CgogIC8vIEFsbG93cyBzb21lb25lIHRvIHNlbmQgZXRoZXIgYW5kIG9idGFpbiB0aGUgdG9rZW4KICBmdW5jdGlvbiBwdXJjaGFzZSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcGF5YWJsZTsKCiAgZnVuY3Rpb24gcHJpY2VPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHByaWNlKTsKICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDRU8uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IENFTy4KICAvLy8gQHBhcmFtIF9uZXdDRU8gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBDRU8KICBmdW5jdGlvbiBzZXRDRU8oYWRkcmVzcyBfbmV3Q0VPKSBwdWJsaWM7CgogIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENPTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ09PLgogIC8vLyBAcGFyYW0gX25ld0NPTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENPTwogIGZ1bmN0aW9uIHNldENPTyhhZGRyZXNzIF9uZXdDT08pIHB1YmxpYzsKCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpOwogIC8vLyBAbm90aWNlIEFsbG93IHByZS1hcHByb3ZlZCB1c2VyIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgdG9rZW4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogIC8vLyBAcGFyYW0gX293bmVyIFRoZSBvd25lciB3aG9zZSBjZWxlYnJpdHkgdG9rZW5zIHdlIGFyZSBpbnRlcmVzdGVkIGluLgogIC8vLyBAZGV2IFRoaXMgbWV0aG9kIE1VU1QgTkVWRVIgYmUgY2FsbGVkIGJ5IHNtYXJ0IGNvbnRyYWN0IGNvZGUuIEZpcnN0LCBpdCdzIGZhaXJseQogIC8vLyAgZXhwZW5zaXZlIChpdCB3YWxrcyB0aGUgZW50aXJlIFBlcnNvbnMgYXJyYXkgbG9va2luZyBmb3IgcGVyc29ucyBiZWxvbmdpbmcgdG8gb3duZXIpLAogIC8vLyAgYnV0IGl0IGFsc28gcmV0dXJucyBhIGR5bmFtaWMgYXJyYXksIHdoaWNoIGlzIG9ubHkgc3VwcG9ydGVkIGZvciB3ZWIzIGNhbGxzLCBhbmQKICAvLy8gIG5vdCBjb250cmFjdC10by1jb250cmFjdCBjYWxscy4KICBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTZbXSBvd25lclRva2Vucyk7CgogIC8vLyBGb3IgcXVlcnlpbmcgdG90YWxTdXBwbHkgb2YgdG9rZW4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CgogIC8vLyBPd25lciBpbml0YXRlcyB0aGUgdHJhbnNmZXIgb2YgdGhlIHRva2VuIHRvIGFub3RoZXIgYWNjb3VudAogIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgdG8uCiAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHRyYW5zZmVyKAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF90b2tlbklkCiAgKSBwdWJsaWM7CgogIC8vLyBUaGlyZC1wYXJ0eSBpbml0aWF0ZXMgdHJhbnNmZXIgb2YgdG9rZW4gZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIGZyb20uCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZCB0by4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgYWRkcmVzcyBfZnJvbSwKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdG9rZW5JZAogICkgcHVibGljOwoKICAvKioqIFBSSVZBVEUgRlVOQ1RJT05TICoqKi8KICAvLy8gU2FmZXR5IGNoZWNrIG9uIF90byBhZGRyZXNzIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogIGZ1bmN0aW9uIF9hZGRyZXNzTm90TnVsbChhZGRyZXNzIF90bykgcHJpdmF0ZSBwdXJlIHJldHVybnMgKGJvb2wpOwoKICAvLy8gRm9yIGNoZWNraW5nIGFwcHJvdmFsIG9mIHRyYW5zZmVyIGZvciBhZGRyZXNzIF90bwogIGZ1bmN0aW9uIF9hcHByb3ZlZChhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpOwoKICAvLy8gRm9yIGNyZWF0aW5nIFBlcnNvbgogIGZ1bmN0aW9uIF9jcmVhdGVQZXJzb24oc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UpIHByaXZhdGU7CgogIC8vLyBDaGVjayBmb3IgdG9rZW4gb3duZXJzaGlwCiAgZnVuY3Rpb24gX293bnMoYWRkcmVzcyBjbGFpbWFudCwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpOwoKICAvLy8gRm9yIHBheWluZyBvdXQgYmFsYW5jZSBvbiBjb250cmFjdAogIGZ1bmN0aW9uIF9wYXlvdXQoYWRkcmVzcyBfdG8pIHByaXZhdGU7CgogIC8vLyBAZGV2IEFzc2lnbnMgb3duZXJzaGlwIG9mIGEgc3BlY2lmaWMgUGVyc29uIHRvIGFuIGFkZHJlc3MuCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlOwp9CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQ=='.
	

]
