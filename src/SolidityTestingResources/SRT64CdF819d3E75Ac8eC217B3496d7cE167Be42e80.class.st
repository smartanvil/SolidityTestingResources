Class {
	#name : #SRT64CdF819d3E75Ac8eC217B3496d7cE167Be42e80,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT64CdF819d3E75Ac8eC217B3496d7cE167Be42e80 >> base64 [
	^ ''.
	

]
