Class {
	#name : #SRT7c9d1395d34bab13d734a78a2ed2476c3dfb038d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c9d1395d34bab13d734a78a2ed2476c3dfb038d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIC8qKgogICAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICAgKiBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQoKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgUGFzc2l2ZVRva2VuU3RhbmRhcmQKICogQGRldiB0aGUgaW50ZXJmYWNlIG9mIFBhc3NpdmVUb2tlblN0YW5kYXJkCiAqLwpjb250cmFjdCBQYXNzaXZlVG9rZW5TdGFuZGFyZCB7CiAgICB1aW50MjU2IHB1YmxpYyBzdGFrZVN0YXJ0VGltZTsKICAgIHVpbnQyNTYgcHVibGljIHN0YWtlTWluQWdlOwogICAgdWludDI1NiBwdWJsaWMgc3Rha2VNYXhBZ2U7CiAgICBmdW5jdGlvbiBtaW50KCkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBjb2luQWdlKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBhbm51YWxJbnRlcmVzdCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgX2FkZHJlc3MsIHVpbnQgX3Jld2FyZCk7Cn0KCgpjb250cmFjdCBQYXNzaXZlVG9rZW4gaXMgRVJDMjAsUGFzc2l2ZVRva2VuU3RhbmRhcmQsT3duYWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiUGFzc2l2ZVRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlBBVCI7CiAgICB1aW50IHB1YmxpYyBkZWNpbWFscyA9IDE4OwoKICAgIHVpbnQgcHVibGljIGNoYWluU3RhcnRUaW1lOyAvL2NoYWluIHN0YXJ0IHRpbWUKICAgIHVpbnQgcHVibGljIGNoYWluU3RhcnRCbG9ja051bWJlcjsgLy9jaGFpbiBzdGFydCBibG9jayBudW1iZXIKICAgIHVpbnQgcHVibGljIHN0YWtlU3RhcnRUaW1lOyAvL3N0YWtlIHN0YXJ0IHRpbWUKICAgIHVpbnQgcHVibGljIHN0YWtlTWluQWdlID0gMSBkYXlzOyAvLyBtaW5pbXVtIGFnZSBmb3IgY29pbiBhZ2U6IDFECiAgICB1aW50IHB1YmxpYyBzdGFrZU1heEFnZSA9IDM2NSBkYXlzOyAvLyBzdGFrZSBhZ2Ugb2YgZnVsbCB3ZWlnaHQ6IDM2NUQKICAgIHVpbnQgcHVibGljIG1heE1pbnRQcm9vZk9mU3Rha2UgPSAxMCoqMTc7IC8vIGRlZmF1bHQgMTAlIGFubnVhbCBpbnRlcmVzdAoKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgdWludCBwdWJsaWMgbWF4VG90YWxTdXBwbHk7CiAgICB1aW50IHB1YmxpYyB0b3RhbEluaXRpYWxTdXBwbHk7CgogICAgc3RydWN0IHRyYW5zZmVySW5TdHJ1Y3R7CiAgICB1aW50MTI4IGFtb3VudDsKICAgIHVpbnQ2NCB0aW1lOwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHRyYW5zZmVySW5TdHJ1Y3RbXSkgdHJhbnNmZXJJbnM7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICAgICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSBzaXplICsgNCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBjYW5QYXNzaXZlTWludCgpIHsKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5IDwgbWF4VG90YWxTdXBwbHkpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gUGFzc2l2ZVRva2VuKCkgewogICAgICAgIG1heFRvdGFsU3VwcGx5ID0gMTAqKjI1OyAvLyAxMCBNaWwuCiAgICAgICAgdG90YWxJbml0aWFsU3VwcGx5ID0gMTAqKjI0OyAvLyAxIE1pbC4KCiAgICAgICAgY2hhaW5TdGFydFRpbWUgPSBub3c7CiAgICAgICAgY2hhaW5TdGFydEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsSW5pdGlhbFN1cHBseTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsSW5pdGlhbFN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZihtc2cuc2VuZGVyID09IF90bykgcmV0dXJuIG1pbnQoKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICBpZih0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl07CiAgICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgICB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksX25vdykpOwogICAgICAgIHRyYW5zZmVySW5zW190b10ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoX3ZhbHVlKSxfbm93KSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMyAqIDMyKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIGlmKHRyYW5zZmVySW5zW19mcm9tXS5sZW5ndGggPiAwKSBkZWxldGUgdHJhbnNmZXJJbnNbX2Zyb21dOwogICAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgICAgdHJhbnNmZXJJbnNbX2Zyb21dLnB1c2godHJhbnNmZXJJblN0cnVjdCh1aW50MTI4KGJhbGFuY2VzW19mcm9tXSksX25vdykpOwogICAgICAgIHRyYW5zZmVySW5zW190b10ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoX3ZhbHVlKSxfbm93KSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gbWludCgpIGNhblBhc3NpdmVNaW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZihiYWxhbmNlc1ttc2cuc2VuZGVyXSA8PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYodHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ubGVuZ3RoIDw9IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgdWludCByZXdhcmQgPSBnZXRQcm9vZk9mU3Rha2VSZXdhcmQobXNnLnNlbmRlcik7CiAgICAgICAgaWYocmV3YXJkIDw9IDApIHJldHVybiBmYWxzZTsKCiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQocmV3YXJkKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChyZXdhcmQpOwogICAgICAgIGRlbGV0ZSB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXTsKICAgICAgICB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksdWludDY0KG5vdykpKTsKCiAgICAgICAgTWludChtc2cuc2VuZGVyLCByZXdhcmQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJsb2NrTnVtYmVyKCkgcmV0dXJucyAodWludCBibG9ja051bWJlcikgewogICAgICAgIGJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyLnN1YihjaGFpblN0YXJ0QmxvY2tOdW1iZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvaW5BZ2UoKSBjb25zdGFudCByZXR1cm5zICh1aW50IG15Q29pbkFnZSkgewogICAgICAgIG15Q29pbkFnZSA9IGdldENvaW5BZ2UobXNnLnNlbmRlcixub3cpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFubnVhbEludGVyZXN0KCkgY29uc3RhbnQgcmV0dXJucyh1aW50IGludGVyZXN0KSB7CiAgICAgICAgdWludCBfbm93ID0gbm93OwogICAgICAgIGludGVyZXN0ID0gbWF4TWludFByb29mT2ZTdGFrZTsKICAgICAgICBpZigoX25vdy5zdWIoc3Rha2VTdGFydFRpbWUpKS5kaXYoOTkgeWVhcnMpID09IDApIHsKICAgICAgICAgICAgaW50ZXJlc3QgPSAoMzY1MCAqIG1heE1pbnRQcm9vZk9mU3Rha2UpLmRpdigxMDApOwogICAgICAgIH0gZWxzZSBpZigoX25vdy5zdWIoc3Rha2VTdGFydFRpbWUpKS5kaXYoOTkgeWVhcnMpID09IDEpewogICAgICAgICAgICBpbnRlcmVzdCA9ICgzNjQwICogbWF4TWludFByb29mT2ZTdGFrZSkuZGl2KDEwMCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldFByb29mT2ZTdGFrZVJld2FyZChhZGRyZXNzIF9hZGRyZXNzKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmVxdWlyZSggKG5vdyA+PSBzdGFrZVN0YXJ0VGltZSkgJiYgKHN0YWtlU3RhcnRUaW1lID4gMCkgKTsKCiAgICAgICAgdWludCBfbm93ID0gbm93OwogICAgICAgIHVpbnQgX2NvaW5BZ2UgPSBnZXRDb2luQWdlKF9hZGRyZXNzLCBfbm93KTsKICAgICAgICBpZihfY29pbkFnZSA8PSAwKSByZXR1cm4gMDsKCiAgICAgICAgdWludCBpbnRlcmVzdCA9IG1heE1pbnRQcm9vZk9mU3Rha2U7CiAgICAgICAgaWYoKF9ub3cuc3ViKHN0YWtlU3RhcnRUaW1lKSkuZGl2KDk5IHllYXJzKSA9PSAwKSB7CiAgICAgICAgICAgIC8vIGZpcnN0IDk5IHllYXJzIDM2NSUgUE9TIGludGVyZXN0CiAgICAgICAgICAgIGludGVyZXN0ID0gKDM2NTAgKiBtYXhNaW50UHJvb2ZPZlN0YWtlKS5kaXYoMTAwKTsKICAgICAgICB9IGVsc2UgaWYoKF9ub3cuc3ViKHN0YWtlU3RhcnRUaW1lKSkuZGl2KDk5IHllYXJzKSA9PSAxKXsKICAgICAgICAgICAgLy8gMm5kIDk5IFllYXJzIDM2NCUgUE9TIElOVEVSRVNUCiAgICAgICAgICAgIGludGVyZXN0ID0gKDM2NDAgKiBtYXhNaW50UHJvb2ZPZlN0YWtlKS5kaXYoMTAwKTsKICAgICAgICB9CgkJCS8vYWZ0ZXIgMTk4IHllYXJzIDEwJSBQT1MgSU5URVJFU1QKICAgICAgICByZXR1cm4gKF9jb2luQWdlICogaW50ZXJlc3QpLmRpdigzNjUgKiAoMTAqKmRlY2ltYWxzKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29pbkFnZShhZGRyZXNzIF9hZGRyZXNzLCB1aW50IF9ub3cpIGludGVybmFsIHJldHVybnMgKHVpbnQgX2NvaW5BZ2UpIHsKICAgICAgICBpZih0cmFuc2Zlckluc1tfYWRkcmVzc10ubGVuZ3RoIDw9IDApIHJldHVybiAwOwoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0cmFuc2Zlckluc1tfYWRkcmVzc10ubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiggX25vdyA8IHVpbnQodHJhbnNmZXJJbnNbX2FkZHJlc3NdW2ldLnRpbWUpLmFkZChzdGFrZU1pbkFnZSkgKSBjb250aW51ZTsKCiAgICAgICAgICAgIHVpbnQgbkNvaW5TZWNvbmRzID0gX25vdy5zdWIodWludCh0cmFuc2Zlckluc1tfYWRkcmVzc11baV0udGltZSkpOwogICAgICAgICAgICBpZiggbkNvaW5TZWNvbmRzID4gc3Rha2VNYXhBZ2UgKSBuQ29pblNlY29uZHMgPSBzdGFrZU1heEFnZTsKCiAgICAgICAgICAgIF9jb2luQWdlID0gX2NvaW5BZ2UuYWRkKHVpbnQodHJhbnNmZXJJbnNbX2FkZHJlc3NdW2ldLmFtb3VudCkgKiBuQ29pblNlY29uZHMuZGl2KDEgZGF5cykpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvd25lclNldFN0YWtlU3RhcnRUaW1lKHVpbnQgdGltZXN0YW1wKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoKHN0YWtlU3RhcnRUaW1lIDw9IDApICYmICh0aW1lc3RhbXAgPj0gY2hhaW5TdGFydFRpbWUpKTsKICAgICAgICBzdGFrZVN0YXJ0VGltZSA9IHRpbWVzdGFtcDsKICAgIH0KCiAgICBmdW5jdGlvbiBvd25lckJ1cm5Ub2tlbih1aW50IF92YWx1ZSkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGRlbGV0ZSB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXTsKICAgICAgICB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksdWludDY0KG5vdykpKTsKCiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbEluaXRpYWxTdXBwbHkgPSB0b3RhbEluaXRpYWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgbWF4VG90YWxTdXBwbHkgPSBtYXhUb3RhbFN1cHBseS5zdWIoX3ZhbHVlKjEwKTsKCiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQoKICAgIC8qIEJhdGNoIHRva2VuIHRyYW5zZmVyLiBVc2VkIGJ5IGNvbnRyYWN0IGNyZWF0b3IgdG8gZGlzdHJpYnV0ZSBpbml0aWFsIHRva2VucyB0byBob2xkZXJzICovCiAgICBmdW5jdGlvbiBiYXRjaFRyYW5zZmVyKGFkZHJlc3NbXSBfcmVjaXBpZW50cywgdWludFtdIF92YWx1ZXMpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZSggX3JlY2lwaWVudHMubGVuZ3RoID4gMCAmJiBfcmVjaXBpZW50cy5sZW5ndGggPT0gX3ZhbHVlcy5sZW5ndGgpOwoKICAgICAgICB1aW50IHRvdGFsID0gMDsKICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IF92YWx1ZXMubGVuZ3RoOyBpKyspewogICAgICAgICAgICB0b3RhbCA9IHRvdGFsLmFkZChfdmFsdWVzW2ldKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZSh0b3RhbCA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgICAgZm9yKHVpbnQgaiA9IDA7IGogPCBfcmVjaXBpZW50cy5sZW5ndGg7IGorKyl7CiAgICAgICAgICAgIGJhbGFuY2VzW19yZWNpcGllbnRzW2pdXSA9IGJhbGFuY2VzW19yZWNpcGllbnRzW2pdXS5hZGQoX3ZhbHVlc1tqXSk7CiAgICAgICAgICAgIHRyYW5zZmVySW5zW19yZWNpcGllbnRzW2pdXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChfdmFsdWVzW2pdKSxfbm93KSk7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF9yZWNpcGllbnRzW2pdLCBfdmFsdWVzW2pdKTsKICAgICAgICB9CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHRvdGFsKTsKICAgICAgICBpZih0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl07CiAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAwKSB0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksX25vdykpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
