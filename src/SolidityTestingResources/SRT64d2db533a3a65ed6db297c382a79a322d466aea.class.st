Class {
	#name : #SRT64d2db533a3a65ed6db297c382a79a322d466aea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT64d2db533a3a65ed6db297c382a79a322d466aea >> base64 [
	^ ''.
	

]
