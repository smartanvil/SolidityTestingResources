Class {
	#name : #SRT4469ff660a532af026939689199685d1ed61d8c4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4469ff660a532af026939689199685d1ed61d8c4 >> base64 [
	^ ''.
	

]
