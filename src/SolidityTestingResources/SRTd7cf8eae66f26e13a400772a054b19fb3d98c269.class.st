Class {
	#name : #SRTd7cf8eae66f26e13a400772a054b19fb3d98c269,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7cf8eae66f26e13a400772a054b19fb3d98c269 >> base64 [
	^ ''.
	

]
