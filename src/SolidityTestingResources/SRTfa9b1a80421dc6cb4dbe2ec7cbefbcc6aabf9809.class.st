Class {
	#name : #SRTfa9b1a80421dc6cb4dbe2ec7cbefbcc6aabf9809,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa9b1a80421dc6cb4dbe2ec7cbefbcc6aabf9809 >> base64 [
	^ ''.
	

]
