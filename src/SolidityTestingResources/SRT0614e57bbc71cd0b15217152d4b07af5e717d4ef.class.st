Class {
	#name : #SRT0614e57bbc71cd0b15217152d4b07af5e717d4ef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0614e57bbc71cd0b15217152d4b07af5e717d4ef >> base64 [
	^ ''.
	

]
