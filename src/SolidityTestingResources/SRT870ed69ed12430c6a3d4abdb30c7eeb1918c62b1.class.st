Class {
	#name : #SRT870ed69ed12430c6a3d4abdb30c7eeb1918c62b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT870ed69ed12430c6a3d4abdb30c7eeb1918c62b1 >> base64 [
	^ ''.
	

]
