Class {
	#name : #SRTad7e9b5b9d15f2b26464ecbe76065f033b126a6c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad7e9b5b9d15f2b26464ecbe76065f033b126a6c >> base64 [
	^ ''.
	

]
