Class {
	#name : #SRTb5F4651540ae4AD3a5c2a89B0D14eB06df886745,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb5F4651540ae4AD3a5c2a89B0D14eB06df886745 >> base64 [
	^ ''.
	

]
