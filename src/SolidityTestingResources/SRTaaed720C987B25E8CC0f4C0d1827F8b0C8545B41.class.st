Class {
	#name : #SRTaaed720C987B25E8CC0f4C0d1827F8b0C8545B41,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaaed720C987B25E8CC0f4C0d1827F8b0C8545B41 >> base64 [
	^ ''.
	

]
