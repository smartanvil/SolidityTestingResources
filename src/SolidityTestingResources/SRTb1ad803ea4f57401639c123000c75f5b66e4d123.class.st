Class {
	#name : #SRTb1ad803ea4f57401639c123000c75f5b66e4d123,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1ad803ea4f57401639c123000c75f5b66e4d123 >> base64 [
	^ ''.
	

]
