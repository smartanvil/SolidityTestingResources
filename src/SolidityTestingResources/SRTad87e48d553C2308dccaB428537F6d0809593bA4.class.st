Class {
	#name : #SRTad87e48d553C2308dccaB428537F6d0809593bA4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTad87e48d553C2308dccaB428537F6d0809593bA4 >> base64 [
	^ 'Y29udHJhY3QgR2FtZVJlZ2lzdHJ5IHsKCiAgICAvLyBUaGlzIHN0cnVjdCBrZWVwcyBhbGwgZGF0YSBmb3IgYSBSZWNvcmQuCiAgICBzdHJ1Y3QgUmVjb3JkIHsKICAgICAgICAvLyBLZWVwcyB0aGUgYWRkcmVzcyBvZiB0aGlzIHJlY29yZCBjcmVhdG9yLgogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgLy8gS2VlcHMgdGhlIHRpbWUgd2hlbiB0aGlzIHJlY29yZCB3YXMgY3JlYXRlZC4KICAgICAgICB1aW50IHRpbWU7CiAgICAgICAgLy8gS2VlcHMgdGhlIGluZGV4IG9mIHRoZSBrZXlzIGFycmF5IGZvciBmYXN0IGxvb2t1cAogICAgICAgIHVpbnQga2V5c0luZGV4OwogICAgICAgIHN0cmluZyBkZXNjcmlwdGlvbjsKICAgICAgICBzdHJpbmcgdXJsOwogICAgfQoKICAgIC8vIFRoaXMgbWFwcGluZyBrZWVwcyB0aGUgcmVjb3JkcyBvZiB0aGlzIFJlZ2lzdHJ5LgogICAgbWFwcGluZyhhZGRyZXNzID0+IFJlY29yZCkgcHJpdmF0ZSByZWNvcmRzOwoKICAgIC8vIEtlZXBzIHRoZSB0b3RhbCBudW1iZXJzIG9mIHJlY29yZHMgaW4gdGhpcyBSZWdpc3RyeS4KICAgIHVpbnQgcHJpdmF0ZSBudW1SZWNvcmRzOwoKICAgIC8vIEtlZXBzIGEgbGlzdCBvZiBhbGwga2V5cyB0byBpbnRlcmF0ZSB0aGUgcmVjb3JlZHMuCiAgICBhZGRyZXNzW10gcHJpdmF0ZSBrZXlzOwoKICAgIC8vIFRoZSBvd25lciBvZiB0aGlzIHJlZ2lzdHJ5LgogICAgYWRkcmVzcyBwcml2YXRlIG93bmVyOwoKICAgIHVpbnQgcHJpdmF0ZSBLRVlfSE9MREVSX1NIQVJFICA9IDUwOwogICAgdWludCBwcml2YXRlIFJFR0lTVFJBVElPTl9DT1NUID0gNTAwIGZpbm5leTsKICAgIHVpbnQgcHJpdmF0ZSBUUkFOU0ZFUl9DT1NUICAgICA9IDA7CgogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEdhbWVSZWdpc3RyeSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIC8vIHB1YmxpYyBpbnRlcmZhY2UgdG8gdGhlIGRpcmVjdG9yeSBvZiBnYW1lcwogICAgZnVuY3Rpb24gdGhlR2FtZXModWludCByaW5kZXgpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyBjb250cmFjdEFkZHJlc3MsIHN0cmluZyBkZXNjcmlwdGlvbiwgc3RyaW5nIHVybCwgYWRkcmVzcyBzdWJtaXR0ZWRCeSwgdWludCB0aW1lKSB7CiAgICAgICAgUmVjb3JkIHJlY29yZCA9IHJlY29yZHNba2V5c1tyaW5kZXhdXTsKICAgICAgICBjb250cmFjdEFkZHJlc3MgPSBrZXlzW3JpbmRleF07CiAgICAgICAgZGVzY3JpcHRpb24gPSByZWNvcmQuZGVzY3JpcHRpb247CiAgICAgICAgdXJsID0gcmVjb3JkLnVybDsKICAgICAgICBzdWJtaXR0ZWRCeSA9IHJlY29yZC5vd25lcjsKICAgICAgICB0aW1lID0gcmVjb3JkLnRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0dGluZ3MoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50IHJlZ2lzdHJhdGlvbkNvc3QsIHVpbnQgcGVyY2VudFNoYXJlZFdpdGhLZXlIb2xkZXJzKSB7CiAgICAgICAgcmVnaXN0cmF0aW9uQ29zdCAgICAgICAgICAgID0gUkVHSVNUUkFUSU9OX0NPU1QgLyAxIGZpbm5leTsKICAgICAgICBwZXJjZW50U2hhcmVkV2l0aEtleUhvbGRlcnMgPSBLRVlfSE9MREVSX1NIQVJFOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGVWYWx1ZSgpIHByaXZhdGUgewogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIC8vIHNoYXJlIHZhbHVlIHdpdGggYWxsIGtleSBob2xkZXJzCiAgICAgICAgdWludCBvd25lclBlcmNlbnRhZ2UgID0gMTAwIC0gS0VZX0hPTERFUl9TSEFSRTsKICAgICAgICB1aW50IHZhbHVlRm9yUmVnT3duZXIgPSAob3duZXJQZXJjZW50YWdlICogbXNnLnZhbHVlKSAvIDEwMDsKICAgICAgICBvd25lci5zZW5kKHZhbHVlRm9yUmVnT3duZXIpOwogICAgICAgIHVpbnQgdmFsdWVGb3JFYWNoT3duZXIgPSAobXNnLnZhbHVlIC0gdmFsdWVGb3JSZWdPd25lcikgLyBudW1SZWNvcmRzOwogICAgICAgIGlmICh2YWx1ZUZvckVhY2hPd25lciA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZm9yICh1aW50IGsgPSAwOyBrIDwgbnVtUmVjb3JkczsgaysrKSB7CiAgICAgICAgICAgIHJlY29yZHNba2V5c1trXV0ub3duZXIuc2VuZCh2YWx1ZUZvckVhY2hPd25lcik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgYWN0dWFsbHkgaW5zZXJ0cyBhIHJlY29yZC4gCiAgICBmdW5jdGlvbiBhZGRHYW1lKGFkZHJlc3Mga2V5LCBzdHJpbmcgZGVzY3JpcHRpb24sIHN0cmluZyB1cmwpIHsKICAgICAgICAvLyBPbmx5IGFsbG93IHJlZ2lzdHJhdGlvbiBpZiByZWNlaXZlZCB2YWx1ZSA+PSBSRUdJU1RSQVRJT05fQ09TVAogICAgICAgIGlmIChtc2cudmFsdWUgPCBSRUdJU1RSQVRJT05fQ09TVCkgewogICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWUgYmFjayB0byBzZW5kZXIuCiAgICAgICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB7CiAgICAgICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGRpc3RyaWJ1dGVWYWx1ZSgpOwogICAgICAgIGlmIChyZWNvcmRzW2tleV0udGltZSA9PSAwKSB7CiAgICAgICAgICAgIHJlY29yZHNba2V5XS50aW1lID0gbm93OwogICAgICAgICAgICByZWNvcmRzW2tleV0ub3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICAgICByZWNvcmRzW2tleV0ua2V5c0luZGV4ID0ga2V5cy5sZW5ndGg7CiAgICAgICAgICAgIGtleXMubGVuZ3RoKys7CiAgICAgICAgICAgIGtleXNba2V5cy5sZW5ndGggLSAxXSA9IGtleTsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247CiAgICAgICAgICAgIHJlY29yZHNba2V5XS51cmwgPSB1cmw7CgogICAgICAgICAgICBudW1SZWNvcmRzKys7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uICgpIHsgZGlzdHJpYnV0ZVZhbHVlKCk7IH0KCiAgICAvLyBVcGRhdGVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHJlY29yZC4KICAgIGZ1bmN0aW9uIHVwZGF0ZShhZGRyZXNzIGtleSwgc3RyaW5nIGRlc2NyaXB0aW9uLCBzdHJpbmcgdXJsKSB7CiAgICAgICAgLy8gT25seSB0aGUgb3duZXIgY2FuIHVwZGF0ZSBoaXMgcmVjb3JkLgogICAgICAgIGlmIChyZWNvcmRzW2tleV0ub3duZXIgPT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZWNvcmRzW2tleV0uZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsKICAgICAgICAgICAgcmVjb3Jkc1trZXldLnVybCA9IHVybDsKICAgICAgICB9CiAgICB9CgovKgogICAgLy8gVHJhbnNmZXIgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gcmVjb3JkLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBrZXksIGFkZHJlc3MgbmV3T3duZXIpIHsKICAgICAgICAvLyBPbmx5IGFsbG93IHRyYW5zZmVyIGlmIHJlY2VpdmVkIHZhbHVlID49IFRSQU5TRkVSX0NPU1QKICAgICAgICBpZiAobXNnLnZhbHVlIDwgVFJBTlNGRVJfQ09TVCkgewogICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWUgYmFjayB0byBzZW5kZXIKICAgICAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZGlzdHJpYnV0ZVZhbHVlKCk7CiAgICAgICAgaWYgKHJlY29yZHNba2V5XS5vd25lciA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIHJlY29yZHNba2V5XS5vd25lciA9IG5ld093bmVyOwogICAgICAgIH0KICAgIH0KKi8KCiAgICAvLyBUZWxscyB3aGV0aGVyIGEgZ2l2ZW4ga2V5IGlzIHJlZ2lzdGVyZWQuCiAgICBmdW5jdGlvbiBpc1JlZ2lzdGVyZWQoYWRkcmVzcyBrZXkpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNba2V5XS50aW1lICE9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmVjb3JkKGFkZHJlc3Mga2V5KSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyBvd25lciwgdWludCB0aW1lLCBzdHJpbmcgZGVzY3JpcHRpb24sIHN0cmluZyB1cmwpIHsKICAgICAgICBSZWNvcmQgcmVjb3JkID0gcmVjb3Jkc1trZXldOwogICAgICAgIG93bmVyID0gcmVjb3JkLm93bmVyOwogICAgICAgIHRpbWUgPSByZWNvcmQudGltZTsKICAgICAgICBkZXNjcmlwdGlvbiA9IHJlY29yZC5kZXNjcmlwdGlvbjsKICAgICAgICB1cmwgPSByZWNvcmQudXJsOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIG93bmVyIG9mIHRoZSBnaXZlbiByZWNvcmQuIFRoZSBvd25lciBjb3VsZCBhbHNvIGJlIGdldAogICAgLy8gYnkgdXNpbmcgdGhlIGZ1bmN0aW9uIGdldFJlY29yZCBidXQgaW4gdGhhdCBjYXNlIGFsbCByZWNvcmQgYXR0cmlidXRlcyAKICAgIC8vIGFyZSByZXR1cm5lZC4KICAgIGZ1bmN0aW9uIGdldE93bmVyKGFkZHJlc3Mga2V5KSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcykgewogICAgICAgIHJldHVybiByZWNvcmRzW2tleV0ub3duZXI7CiAgICB9CgogICAgLy8gUmV0dXJucyB0aGUgcmVnaXN0cmF0aW9uIHRpbWUgb2YgdGhlIGdpdmVuIHJlY29yZC4gVGhlIHRpbWUgY291bGQgYWxzbwogICAgLy8gYmUgZ2V0IGJ5IHVzaW5nIHRoZSBmdW5jdGlvbiBnZXRSZWNvcmQgYnV0IGluIHRoYXQgY2FzZSBhbGwgcmVjb3JkIGF0dHJpYnV0ZXMKICAgIC8vIGFyZSByZXR1cm5lZC4KICAgIGZ1bmN0aW9uIGdldFRpbWUoYWRkcmVzcyBrZXkpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIHJlY29yZHNba2V5XS50aW1lOwogICAgfQoKICAgIC8vIFJlZ2lzdHJ5IG93bmVyIGNhbiB1c2UgdGhpcyBmdW5jdGlvbiB0byB3aXRoZHJhdyBhbnkgc3VycGx1cyB2YWx1ZSBvd25lZCBieQogICAgLy8gdGhlIHJlZ2lzdHJ5LgogICAgZnVuY3Rpb24gbWFpbnRhaW4odWludCB2YWx1ZSwgdWludCBjb3N0KSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKHZhbHVlKTsKICAgICAgICAgICAgUkVHSVNUUkFUSU9OX0NPU1QgPSBjb3N0OwogICAgICAgIH0KICAgIH0KCiAgICAvLyBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgcmVjb3JkcyBpbiB0aGlzIHJlZ2lzdHJ5LgogICAgZnVuY3Rpb24gZ2V0VG90YWxSZWNvcmRzKCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gbnVtUmVjb3JkczsKICAgIH0KCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgc3ViY29udHJhY3RzIHdoZW4gYW4gZXJyb3IgaXMgZGV0ZWN0ZWQgYW5kCiAgICAvLyB0aGUgdmFsdWUgbmVlZHMgdG8gYmUgcmV0dXJuZWQgdG8gdGhlIHRyYW5zYWN0aW9uIG9yaWdpbmF0b3IuCiAgICBmdW5jdGlvbiByZXR1cm5WYWx1ZSgpIGludGVybmFsIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKTsKICAgICAgICB9CiAgICB9Cgp9'.
	

]
