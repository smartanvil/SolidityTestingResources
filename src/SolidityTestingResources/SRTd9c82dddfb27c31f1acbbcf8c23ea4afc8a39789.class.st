Class {
	#name : #SRTd9c82dddfb27c31f1acbbcf8c23ea4afc8a39789,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd9c82dddfb27c31f1acbbcf8c23ea4afc8a39789 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKiAKICogSUdOSVRFIFJBVElOR1MgIlNPRlQgQ0FQIiBDUk9XRFNBTEUgQ09OVFJBQ1QuIENPUFlSSUdIVCAyMDE4IFRSVVNUSUMgSE9MRElORyBJTkMuIEF1dGhvciAtIERhbW9uIEJhcm5hcmQgKDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNjEwNTAwMGMwZTBmMjEwODA2MGYwODE1MDQxMzAwMTUwODBmMDYxMjRmMDIwZTBjIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPikKICogQ09OVFJBQ1QgSU5JVElBVEVTIEEgTElNSVRFRCBTVVBQTFkgU09GVCBDQVAgUEVSSU9EIEZPUiBUSEUgRklSU1QgMjQgSE9VUlMsIE9SIFVOVElMIFRPVEFMIFNPRlQgQ0FQIFRPS0VOIFNVUFBMWSBJUyBSRUFDSEVELCBXSElDSEVWRVIgSVMgU09PTkVSLgogKi8KCmludGVyZmFjZSB0b2tlbiB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgcHVibGljOwp9CgovKgogKiBDb250cmFjdCBwZXJtaXRzIElnbml0ZSB0byByZWNsYWltIHVuc29sZCBJR05UIHRvIHBhc3MgdG8gdGhlIG1haW4gY3Jvd2RzYWxlIGNvbnRyYWN0CiAqLwpjb250cmFjdCB3aXRoZHJhd1Rva2VuIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKTsKfQoKLyoKICogU2FmZU1hdGggLSBtYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qCiAqIENyb3dkc2FsZSBjb250cmFjdCBjb25zdHJ1Y3RvcgogKi8KY29udHJhY3QgQ3Jvd2RzYWxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOyAvKiBDT05UUkFDVCBPV05FUiAqLwogICAgYWRkcmVzcyBwdWJsaWMgb3BlcmF0aW9uczsgLyogT1BFUkFUSU9OUyBNVUxUSVNJRyBXQUxMRVQgKi8KICAgIGFkZHJlc3MgcHVibGljIGluZGV4OyAvKiBJR05JVEUgSU5ERVggV0FMTEVUICovCiAgICB1aW50MjU2IHB1YmxpYyBhbW91bnRSYWlzZWQ7IC8qIFRPVEFMIEVUSCBDT05UUklCVVRJT05TKi8KICAgIHVpbnQyNTYgcHVibGljIGFtb3VudFJhaXNlZFBoYXNlOyAvKiBFVEggQ09OVFJJQlVUSU9OUyBTSU5DRSBMQVNUIFdJVEhEUkFXQUwgRVZFTlQgKi8KICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGQ7IC8qIFRPVEFMIFRPS0VOUyBTT0xEICovCiAgICB1aW50MjU2IHB1YmxpYyBzb2Z0Q2FwOyAvKiBOVU1CRVIgT0YgVE9LRU5TIEFWQUlMQUJMRSBEVVJJTkcgVEhFIFNPRlQgQ0FQIFBFUklPRCAqLwogICAgdWludDI1NiBwdWJsaWMgc29mdENhcExpbWl0OyAvKiBNQVhJTVVNIEFNT1VOVCBPRiBFVEggVE8gQkUgUkFJU0VEIERVUklORyBTT0ZUIENBUCBQRVJJT0QgKi8KICAgIHVpbnQyNTYgcHVibGljIGRpc2NvdW50UHJpY2U7IC8qIFNPRlQgQ0FQIFBFUklPRCBUT0tFTiBQUklDRSAqLwogICAgdWludDI1NiBwdWJsaWMgZnVsbFByaWNlOyAvKiBTVEFOREFSRCBUT0tFTiBQUklDRSAqLwogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOyAvKiBDUk9XRFNBTEUgU1RBUlQgVElNRSAqLwogICAgdG9rZW4gcHVibGljIHRva2VuUmV3YXJkOyAvKiBJR05UICovCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGNvbnRyaWJ1dGlvbkJ5QWRkcmVzczsKCiAgICBldmVudCBGdW5kVHJhbnNmZXIoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50LCBib29sIGlzQ29udHJpYnV0aW9uKTsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIENyb3dkc2FsZSgKICAgICAgICB1aW50IHNhbGVTdGFydFRpbWUsCiAgICAgICAgYWRkcmVzcyBvd25lckFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBvcGVyYXRpb25zQWRkcmVzcywKICAgICAgICBhZGRyZXNzIGluZGV4QWRkcmVzcywKICAgICAgICBhZGRyZXNzIHJld2FyZFRva2VuQWRkcmVzcwoKICAgICkgcHVibGljIHsKICAgICAgICBzdGFydFRpbWUgPSBzYWxlU3RhcnRUaW1lOyAvKiBTRVRTIFNUQVJUIFRJTUUgKi8KICAgICAgICBvd25lciA9IG93bmVyQWRkcmVzczsgLyogU0VUUyBPV05FUiAqLwogICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zQWRkcmVzczsgLyogU0VUUyBPUEVSQVRJT05TIE1VTFRJU0lHIFdBTExFVCAqLwogICAgICAgIGluZGV4ID0gaW5kZXhBZGRyZXNzOyAvKiBTRVRTIElHTklURSBJTkRFWCBXQUxMRVQgKi8KICAgICAgICBzb2Z0Q2FwID0gNzUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOyAvKiBTRVRTIE5VTUJFUiBPRiBUT0tFTlMgQVZBSUxBQkxFIEFUIERJU0NPVU5UIFBSSUNFIERVUklORyBTT0ZUIENBUCBQRVJJT0QgKi8KICAgICAgICBzb2Z0Q2FwTGltaXQgPSA0NTAwIGV0aGVyOyAvKiBTRVRTIEZVTkRJTkcgVEFSR0VUIEZPUiBTT0ZUIENBUCBQRVJJT0QgKi8KICAgICAgICBkaXNjb3VudFByaWNlID0gMC4wMDYgZXRoZXI7IC8qIFNFVFMgRElTQ09VTlRFRCBTT0ZUIENBUCBUT0tFTiBQUklDRSAqLwogICAgICAgIGZ1bGxQcmljZSA9IDAuMDA2NjcgZXRoZXI7IC8qIFNFVFMgU1RBTkRBUkQgVE9LRU4gUFJJQ0UgKi8KICAgICAgICB0b2tlblJld2FyZCA9IHRva2VuKHJld2FyZFRva2VuQWRkcmVzcyk7IC8qIFNFVFMgSUdOVCBBUyBDT05UUkFDVCBSRVdBUkQgKi8KICAgIH0KCiAgICAvKgogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gZm9yIEVUSCBjb250cmlidXRpb25zCiAgICAgKi8KICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICByZXF1aXJlKG5vdyA+IHN0YXJ0VGltZSk7CgogICAgICAgIGlmKG5vdyA8IHN0YXJ0VGltZS5hZGQoMjQgaG91cnMpICYmIGFtb3VudFJhaXNlZCA8IHNvZnRDYXBMaW1pdCkgeyAvKiBDSEVDS1MgSUYgU09GVCBDQVAgUEVSSU9EIFNUSUxMIElOIEVGRkVDVCAqLwogICAgICAgICAgICByZXF1aXJlKGFtb3VudC5hZGQoY29udHJpYnV0aW9uQnlBZGRyZXNzW21zZy5zZW5kZXJdKSA+IDEgZXRoZXIgJiYgYW1vdW50LmFkZChjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0pIDw9IDUgZXRoZXIpOyAvKiBTT0ZUIENBUCBNSU5JTVVNIENPTlRSSUJVVElPTiBJUyAxIEVUSCwgTUFYSU1VTSBDT05UUklCVVRJT04gSVMgNSBFVEggUEVSIENPTlRSSUJVVE9SICovCiAgICAgICAgICAgIHJlcXVpcmUoYW1vdW50Lm11bCgxMCoqMTgpLmRpdihkaXNjb3VudFByaWNlKSA8PSBzb2Z0Q2FwLnN1Yih0b2tlbnNTb2xkKSk7IC8qIFJFUVVJUkVTIFNVRkZJQ0lFTlQgRElTQ09VTlQgVE9LRU5TIFJFTUFJTklORyBUTyBDT01QTEVURSBQVVJDSEFTRSAqLwogICAgICAgICAgICBjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0gPSBjb250cmlidXRpb25CeUFkZHJlc3NbbXNnLnNlbmRlcl0uYWRkKGFtb3VudCk7CiAgICAgICAgICAgIGFtb3VudFJhaXNlZCA9IGFtb3VudFJhaXNlZC5hZGQoYW1vdW50KTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkUGhhc2UgPSBhbW91bnRSYWlzZWRQaGFzZS5hZGQoYW1vdW50KTsKICAgICAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKGFtb3VudC5tdWwoMTAqKjE4KS5kaXYoZGlzY291bnRQcmljZSkpOwogICAgICAgICAgICB0b2tlblJld2FyZC50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQubXVsKDEwKioxOCkuZGl2KGRpc2NvdW50UHJpY2UpKTsKICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CgogICAgICAgIH0KCiAgICAgICAgZWxzZSB7IC8qIElNUE9TRVMgREVGQVVMVCBDUk9XRFNBTEUgVEVSTVMgSUYgU09GVCBDQVAgUEVSSU9EIE5PIExPTkdFUiBJTiBFRkZFQ1QgKi8KICAgICAgICAgICAgcmVxdWlyZShhbW91bnQgPD0gMTAwMCBldGhlcik7CiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbkJ5QWRkcmVzc1ttc2cuc2VuZGVyXSA9IGNvbnRyaWJ1dGlvbkJ5QWRkcmVzc1ttc2cuc2VuZGVyXS5hZGQoYW1vdW50KTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkID0gYW1vdW50UmFpc2VkLmFkZChhbW91bnQpOwogICAgICAgICAgICBhbW91bnRSYWlzZWRQaGFzZSA9IGFtb3VudFJhaXNlZFBoYXNlLmFkZChhbW91bnQpOwogICAgICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQoYW1vdW50Lm11bCgxMCoqMTgpLmRpdihmdWxsUHJpY2UpKTsKICAgICAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50Lm11bCgxMCoqMTgpLmRpdihmdWxsUHJpY2UpKTsKICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7CiAgICAgICAgfQoKICAgIH0KCiAgICAvKgogICAgICogQUxMT1cgSUdOSVRFIFRPIFJFQ0xBSU0gVU5TT0xEIElHTlQKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoYWRkcmVzcyB0b2tlbkNvbnRyYWN0KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHdpdGhkcmF3VG9rZW4gdGMgPSB3aXRoZHJhd1Rva2VuKHRva2VuQ29udHJhY3QpOwoKICAgICAgICB0Yy50cmFuc2Zlcihvd25lciwgdGMuYmFsYW5jZU9mKHRoaXMpKTsKICAgIH0KICAgIAogICAgLyoKICAgICAqIEFMTE9XIElHTklURSBUTyBXSVRIRFJBVyBDUk9XRFNBTEUgUFJPQ0VFRFMgVE8gT1BFUkFUSU9OUyBBTkQgSU5ERVggV0FMTEVUUwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICB1aW50MjU2IHRvdGFsID0gdGhpcy5iYWxhbmNlOwogICAgICAgIHVpbnQyNTYgb3BlcmF0aW9uc1NwbGl0ID0gNDA7CiAgICAgICAgdWludDI1NiBpbmRleFNwbGl0ID0gNjA7CiAgICAgICAgb3BlcmF0aW9ucy50cmFuc2Zlcih0b3RhbCAqIG9wZXJhdGlvbnNTcGxpdCAvIDEwMCk7CiAgICAgICAgaW5kZXgudHJhbnNmZXIodG90YWwgKiBpbmRleFNwbGl0IC8gMTAwKTsKICAgIH0KfQ=='.
	

]
