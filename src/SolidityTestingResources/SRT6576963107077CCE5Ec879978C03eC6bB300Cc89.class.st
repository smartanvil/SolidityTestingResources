Class {
	#name : #SRT6576963107077CCE5Ec879978C03eC6bB300Cc89,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6576963107077CCE5Ec879978C03eC6bB300Cc89 >> base64 [
	^ ''.
	

]
