Class {
	#name : #SRT6b922dd2243de553ce56857d70c9d7622c70aef6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b922dd2243de553ce56857d70c9d7622c70aef6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vICBSIFNwbGl0IENvbnRyYWN0Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmNvbnRyYWN0IFJTUExUX0YgewogICAgICAgIGV2ZW50IFN0YXRFdmVudChzdHJpbmcgbXNnKTsKICAgICAgICBldmVudCBTdGF0RXZlbnRJKHN0cmluZyBtc2csIHVpbnQgdmFsKTsKCiAgICAgICAgZW51bSBTZXR0aW5nU3RhdGVWYWx1ZSAge2RlYnVnLCBsb2NrZWR9CgogICAgICAgIHN0cnVjdCBwYXJ0bmVyQWNjb3VudCB7CiAgICAgICAgICAgICAgICB1aW50IGNyZWRpdGVkOyAgLy8gdG90YWwgZnVuZHMgY3JlZGl0ZWQgdG8gdGhpcyBhY2NvdW50CiAgICAgICAgICAgICAgICB1aW50IGJhbGFuY2U7ICAgLy8gY3VycmVudCBiYWxhbmNlID0gY3JlZGl0ZWQgLSBhbW91bnQgd2l0aGRyYXduCiAgICAgICAgICAgICAgICB1aW50IHBjdHgxMDsgICAgIC8vIHBlcmNlbnQgYWxsb2NhdGlvbiB0aW1lcyB0ZW4KICAgICAgICAgICAgICAgIGFkZHJlc3MgYWRkcjsgICAvLyBwYXlvdXQgYWRkciBvZiB0aGlzIGFjY3QKICAgICAgICAgICAgICAgIGJvb2wgZXZlblN0YXJ0OyAvLyBldmVuIHNwbGl0IHVwIHRvIGV2ZW5EaXN0VGhyZXNoCiAgICAgICAgfQoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gIGRhdGEgc3RvcmFnZQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXBsb3llciBleGVjdXRvcgogICAgICAgIG1hcHBpbmcgKHVpbnQgPT4gcGFydG5lckFjY291bnQpIHBhcnRuZXJBY2NvdW50czsgICAgLy8gYWNjb3VudHMgYnkgaW5kZXgKICAgICAgICB1aW50IHB1YmxpYyBudW1BY2NvdW50czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhvdyBtYW55IGFjY291bnRzIGV4aXN0CiAgICAgICAgdWludCBwdWJsaWMgaG9sZG92ZXJCYWxhbmNlOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbW91bnQgeWV0IHRvIGJlIGRpc3RyaWJ1dGVkCiAgICAgICAgdWludCBwdWJsaWMgdG90YWxGdW5kc1JlY2VpdmVkOyAgICAgICAgICAgICAgICAgICAgICAvLyBhbW91bnQgcmVjZWl2ZWQgc2luY2UgYmVnaW4gb2YgdGltZQogICAgICAgIHVpbnQgcHVibGljIHRvdGFsRnVuZHNEaXN0cmlidXRlZDsgICAgICAgICAgICAgICAgICAgLy8gYW1vdW50IGRpc3RyaWJ1dGVkIHNpbmNlIGJlZ2luIG9mIHRpbWUKICAgICAgICB1aW50IHB1YmxpYyB0b3RhbEZ1bmRzV2l0aGRyYXduOyAgICAgICAgICAgICAgICAgICAgIC8vIGFtb3VudCB3aXRoZHJhd24gc2luY2UgYmVnaW4gb2YgdGltZQogICAgICAgIHVpbnQgcHVibGljIGV2ZW5EaXN0VGhyZXNoOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzdHJpYnV0ZSBldmVubHkgdW50aWwgdGhpcyBhbW91bnQgKHRvdGFsKQogICAgICAgIHVpbnQgcHVibGljIHdpdGhkcmF3R2FzID0gMzUwMDA7ICAgICAgICAgICAgICAgICAgICAgLy8gZ2FzIGZvciB3aXRoZHJhd2FscwogICAgICAgIHVpbnQgY29uc3RhbnQgVEVOSFVORFdFSSA9IDEwMDA7ICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCBndC4gMTAwMCB3ZWkgdG8gZG8gcGF5b3V0CiAgICAgICAgdWludCBjb25zdGFudCBNQVhfQUNDT1VOVFMgPSA1OyAgICAgICAgICAgICAgICAgICAgICAvLyBtYXggYWNjb3VudHMgdGhpcyBjb250cmFjdCBjYW4gaGFuZGxlCiAgICAgICAgU2V0dGluZ1N0YXRlVmFsdWUgcHVibGljIHNldHRpbmdzU3RhdGUgPSBTZXR0aW5nU3RhdGVWYWx1ZS5kZWJ1ZzsgCgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIC8vIGNvbnRyYWN0IGNvbnN0cnVjdG9yCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBSU1BMVF9GKCkgewogICAgICAgICAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIH0KCgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gbG9jawogICAgICAgIC8vIGxvY2sgdGhlIGNvbnRyYWN0LiBhZnRlciBjYWxsaW5nIHRoaXMgeW91IHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IGFjY291bnRzOgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgZnVuY3Rpb24gbG9jaygpIHsKICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBub3Qgb3duZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBsb2NrZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2V0dGluZ3NTdGF0ZSA9IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZDsKICAgICAgICAgICAgICAgIFN0YXRFdmVudCgib2s6IGNvbnRyYWN0IGxvY2tlZCIpOwogICAgICAgIH0KCgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gcmVzZXQKICAgICAgICAvLyByZXNldCBhbGwgYWNjb3VudHMKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJlcnI6IG5vdCBvd25lciIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3NTdGF0ZSA9PSBTZXR0aW5nU3RhdGVWYWx1ZS5sb2NrZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJlcnI6IGxvY2tlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBudW1BY2NvdW50cyA9IDA7CiAgICAgICAgICAgICAgICBob2xkb3ZlckJhbGFuY2UgPSAwOwogICAgICAgICAgICAgICAgdG90YWxGdW5kc1JlY2VpdmVkID0gMDsKICAgICAgICAgICAgICAgIHRvdGFsRnVuZHNEaXN0cmlidXRlZCA9IDA7CiAgICAgICAgICAgICAgICB0b3RhbEZ1bmRzV2l0aGRyYXduID0gMDsKICAgICAgICAgICAgICAgIFN0YXRFdmVudCgib2s6IGFsbCBhY2N0cyByZXNldCIpOwogICAgICAgIH0KCgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gc2V0IGV2ZW4gZGlzdHJpYnV0aW9uIHRocmVzaG9sZAogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbkRpc3RUaHJlc2godWludDI1NiBfdGhyZXNoKSB7CiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoImVycjogbm90IG93bmVyIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZCkgewogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoImVycjogbG9ja2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV2ZW5EaXN0VGhyZXNoID0gKF90aHJlc2ggLyBURU5IVU5EV0VJKSAqIFRFTkhVTkRXRUk7CiAgICAgICAgICAgICAgICBTdGF0RXZlbnRJKCJvazogdGhyZXNob2xkIHNldCIsIGV2ZW5EaXN0VGhyZXNoKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIC8vIHNldCBldmVuIGRpc3RyaWJ1dGlvbiB0aHJlc2hvbGQKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGZ1bmN0aW9uIHNldFdpdGRyYXdHYXModWludDI1NiBfd2l0aGRyYXdHYXMpIHsKICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBub3Qgb3duZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2l0aGRyYXdHYXMgPSBfd2l0aGRyYXdHYXM7CiAgICAgICAgICAgICAgICBTdGF0RXZlbnRJKCJvazogd2l0aGRyYXcgZ2FzIHNldCIsIHdpdGhkcmF3R2FzKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAvLyBhZGQgYSBuZXcgYWNjb3VudAogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGZ1bmN0aW9uIGFkZEFjY291bnQoYWRkcmVzcyBfYWRkciwgdWludDI1NiBfcGN0eDEwLCBib29sIF9ldmVuU3RhcnQpIHsKICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBub3Qgb3duZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBsb2NrZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG51bUFjY291bnRzID49IE1BWF9BQ0NPVU5UUykgewogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoImVycjogbWF4IGFjY291bnRzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcnRuZXJBY2NvdW50c1tudW1BY2NvdW50c10uYWRkciA9IF9hZGRyOwogICAgICAgICAgICAgICAgcGFydG5lckFjY291bnRzW251bUFjY291bnRzXS5wY3R4MTAgPSBfcGN0eDEwOwogICAgICAgICAgICAgICAgcGFydG5lckFjY291bnRzW251bUFjY291bnRzXS5ldmVuU3RhcnQgPSBfZXZlblN0YXJ0OwogICAgICAgICAgICAgICAgcGFydG5lckFjY291bnRzW251bUFjY291bnRzXS5jcmVkaXRlZCA9IDA7CiAgICAgICAgICAgICAgICBwYXJ0bmVyQWNjb3VudHNbbnVtQWNjb3VudHNdLmJhbGFuY2UgPSAwOwogICAgICAgICAgICAgICAgKytudW1BY2NvdW50czsKICAgICAgICAgICAgICAgIFN0YXRFdmVudCgib2s6IGFjY3QgYWRkZWQiKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gZ2V0IGFjY3QgaW5mbwogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBnZXRBY2NvdW50SW5mbyhhZGRyZXNzIF9hZGRyKSBjb25zdGFudCByZXR1cm5zKHVpbnQgX2lkeCwgdWludCBfcGN0eDEwLCBib29sIF9ldmVuU3RhcnQsIHVpbnQgX2NyZWRpdGVkLCB1aW50IF9iYWxhbmNlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1BY2NvdW50czsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIGFkZHIgPSBwYXJ0bmVyQWNjb3VudHNbaV0uYWRkcjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIgPT0gX2FkZHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaWR4ID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGN0eDEwID0gcGFydG5lckFjY291bnRzW2ldLnBjdHgxMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZXZlblN0YXJ0ID0gcGFydG5lckFjY291bnRzW2ldLmV2ZW5TdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY3JlZGl0ZWQgPSBwYXJ0bmVyQWNjb3VudHNbaV0uY3JlZGl0ZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2JhbGFuY2UgPSBwYXJ0bmVyQWNjb3VudHNbaV0uYmFsYW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIm9rOiBmb3VuZCBhY2N0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBTdGF0RXZlbnQoImVycjogYWNjdCBub3QgZm91bmQiKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gZ2V0IHRvdGFsIHBlcmNlbnRhZ2VzIHgxMAogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBnZXRUb3RhbFBjdHgxMCgpIGNvbnN0YW50IHJldHVybnModWludCBfdG90YWxQY3R4MTApIHsKICAgICAgICAgICAgICAgIF90b3RhbFBjdHgxMCA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1BY2NvdW50czsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBfdG90YWxQY3R4MTAgKz0gcGFydG5lckFjY291bnRzW2ldLnBjdHgxMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFN0YXRFdmVudEkoIm9rOiB0b3RhbCBwY3R4MTAiLCBfdG90YWxQY3R4MTApOwogICAgICAgIH0KCgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAvLyBnZXQgbm8uIGFjY3RzIHRoYXQgYXJlIHNldCBmb3IgZXZlbiBzcGxpdAogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBnZXROdW1FdmVuU3BsaXRzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50IF9udW1FdmVuU3BsaXRzKSB7CiAgICAgICAgICAgICAgICBfbnVtRXZlblNwbGl0cyA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1BY2NvdW50czsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydG5lckFjY291bnRzW2ldLmV2ZW5TdGFydCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrX251bUV2ZW5TcGxpdHM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFN0YXRFdmVudEkoIm9rOiBldmVuIHNwbGl0cyIsIF9udW1FdmVuU3BsaXRzKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gZGVmYXVsdCBwYXlhYmxlIGZ1bmN0aW9uLgogICAgICAgIC8vIGNhbGwgdXMgd2l0aCBwbGVudHkgb2YgZ2FzLCBvciBjYXRhc3Ryb3BoZSB3aWxsIGVuc3VlCiAgICAgICAgLy8gbm90ZTogeW91IGNhbiBjYWxsIHRoaXMgZmNuIHdpdGggYW1vdW50IG9mIHplcm8gdG8gZm9yY2UgZGlzdHJpYnV0aW9uCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgICAgICAgICAgdG90YWxGdW5kc1JlY2VpdmVkICs9IG1zZy52YWx1ZTsKICAgICAgICAgICAgICAgIGhvbGRvdmVyQmFsYW5jZSArPSBtc2cudmFsdWU7CiAgICAgICAgICAgICAgICBTdGF0RXZlbnRJKCJvazogaW5jb21pbmciLCBtc2cudmFsdWUpOwogICAgICAgIH0KCgogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAvLyBkaXN0cmlidXRlIGZ1bmRzIHRvIGFsbCBwYXJ0bmVycwogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBkaXN0cmlidXRlKCkgewogICAgICAgICAgICAgICAgLy9vbmx5IHBheW91dCBpZiB3ZSBoYXZlIG1vcmUgdGhhbiAxMDAwIHdlaQogICAgICAgICAgICAgICAgaWYgKGhvbGRvdmVyQmFsYW5jZSA8IFRFTkhVTkRXRUkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9maXJzdCBwYXkgYWNjb3VudHMgdGhhdCBhcmUgbm90IGNvbnN0cmFpbmVkIGJ5IGV2ZW4gZGlzdHJpYnV0aW9uCiAgICAgICAgICAgICAgICAvL2VhY2ggYWNjb3VudCBnZXRzIHRoZWlyIHByZXNjcmliZWQgcGVyY2VudGFnZSBvZiB0aGlzIGhvbGRvdmVyLgogICAgICAgICAgICAgICAgdWludCBpOwogICAgICAgICAgICAgICAgdWludCBwY3R4MTA7CiAgICAgICAgICAgICAgICB1aW50IGFjY3REaXN0OwogICAgICAgICAgICAgICAgdWludCBtYXhBY2N0RGlzdDsKICAgICAgICAgICAgICAgIHVpbnQgbnVtRXZlblNwbGl0cyA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQWNjb3VudHM7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5ldmVuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK251bUV2ZW5TcGxpdHM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGN0eDEwID0gcGFydG5lckFjY291bnRzW2ldLnBjdHgxMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N0RGlzdCA9IGhvbGRvdmVyQmFsYW5jZSAqIHBjdHgxMCAvIFRFTkhVTkRXRUk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy93ZSBhbHNvIGRvdWJsZSBjaGVjayB0byBlbnN1cmUgdGhhdCB0aGUgYW1vdW50IGF3YXJkZWQgY2Fubm90IGV4Y2VlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RvdGFsIGFtb3VudCBkdWUgdG8gdGhpcyBhY2N0LiBub3RlOiB0aGlzIGNoZWNrIGlzIG5lY2Vzc2FyeSwgY3V6IGhlcmUgd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21pZ2h0IG5vdCBkaXN0cmlidXRlIHRoZSBmdWxsIGhvbGRvdmVyIGFtb3VudCBkdXJpbmcgZWFjaCBwYXNzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEFjY3REaXN0ID0gdG90YWxGdW5kc1JlY2VpdmVkICogcGN0eDEwIC8gVEVOSFVORFdFSTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydG5lckFjY291bnRzW2ldLmNyZWRpdGVkID49IG1heEFjY3REaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N0RGlzdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0bmVyQWNjb3VudHNbaV0uY3JlZGl0ZWQgKyBhY2N0RGlzdCA+IG1heEFjY3REaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N0RGlzdCA9IG1heEFjY3REaXN0IC0gcGFydG5lckFjY291bnRzW2ldLmNyZWRpdGVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0bmVyQWNjb3VudHNbaV0uY3JlZGl0ZWQgKz0gYWNjdERpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydG5lckFjY291bnRzW2ldLmJhbGFuY2UgKz0gYWNjdERpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxGdW5kc0Rpc3RyaWJ1dGVkICs9IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRvdmVyQmFsYW5jZSAtPSBhY2N0RGlzdDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9ub3cgcGF5IGFjY291bnRzIHRoYXQgYXJlIGNvbnN0cmFpbmVkIGJ5IGV2ZW4gZGlzdHJpYnV0aW9uLiB3ZSBzcGxpdCB3aGF0ZXZlciBpcwogICAgICAgICAgICAgICAgLy9sZWZ0IG9mIHRoZSBob2xkb3ZlciBldmVubHkuCiAgICAgICAgICAgICAgICB1aW50IGRpc3RBbW91bnQgPSBob2xkb3ZlckJhbGFuY2U7CiAgICAgICAgICAgICAgICBpZiAodG90YWxGdW5kc0Rpc3RyaWJ1dGVkIDwgZXZlbkRpc3RUaHJlc2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUFjY291bnRzOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5ldmVuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3REaXN0ID0gZGlzdEFtb3VudCAvIG51bUV2ZW5TcGxpdHM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3dlIGFsc28gZG91YmxlIGNoZWNrIHRvIGVuc3VyZSB0aGF0IHRoZSBhbW91bnQgYXdhcmRlZCBjYW5ub3QgZXhjZWVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90b3RhbCBhbW91bnQgZHVlIHRvIHRoaXMgYWNjdC4gbm90ZTogdGhpcyBjaGVjayBpcyBuZWNlc3NhcnksIGN1eiBoZXJlIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21pZ2h0IG5vdCBkaXN0cmlidXRlIHRoZSBmdWxsIGhvbGRvdmVyIGFtb3VudCBkdXJpbmcgZWFjaCBwYXNzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludCBmdW5kTGltaXQgPSB0b3RhbEZ1bmRzUmVjZWl2ZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVuZExpbWl0ID4gZXZlbkRpc3RUaHJlc2gpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmRMaW1pdCA9IGV2ZW5EaXN0VGhyZXNoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4QWNjdERpc3QgPSBmdW5kTGltaXQgLyBudW1FdmVuU3BsaXRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCA+PSBtYXhBY2N0RGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N0RGlzdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCArIGFjY3REaXN0ID4gbWF4QWNjdERpc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdERpc3QgPSBtYXhBY2N0RGlzdCAtIHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCArPSBhY2N0RGlzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRuZXJBY2NvdW50c1tpXS5iYWxhbmNlICs9IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxGdW5kc0Rpc3RyaWJ1dGVkICs9IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlIC09IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9ub3csIGlmIHRoZXJlIGFyZSBhbnkgZnVuZHMgbGVmdCAoYmVjYXVzZSBvZiBhIHJlbWFpbmRlciBpbiB0aGUgZXZlbiBzcGxpdCksIHRoZW4gZGlzdHJpYnV0ZSB0aGVtCiAgICAgICAgICAgICAgICAvL2FjY29yZGluZyB0byBwZXJjZW50YWdlcy4gbm90ZSB0aGF0IHRoaXMgbXVzdCBiZSBkb25lIGhlcmUsIGV2ZW4gaWYgd2UgaGF2ZW4ndCBwYXNzZWQgdGhlIGV2ZW4gZGlzdHJpYnV0aW9uCiAgICAgICAgICAgICAgICAvL3RocmVzaG9sZCwgdG8gZW5zdXJlIHRoYXQgd2UgZG9uJ3QgZ2V0IHN0dWNrIHdpdGggYSByZW1haW5kZXIgYW1vdW50IHRoYXQgY2Fubm90IGJlIGRpc3RyaWJ1dGVkLgogICAgICAgICAgICAgICAgZGlzdEFtb3VudCA9IGhvbGRvdmVyQmFsYW5jZTsKICAgICAgICAgICAgICAgIGlmIChkaXN0QW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQWNjb3VudHM7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydG5lckFjY291bnRzW2ldLmV2ZW5TdGFydCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGN0eDEwID0gcGFydG5lckFjY291bnRzW2ldLnBjdHgxMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3REaXN0ID0gZGlzdEFtb3VudCAqIHBjdHgxMCAvIFRFTkhVTkRXRUk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3dlIGFsc28gZG91YmxlIGNoZWNrIHRvIGVuc3VyZSB0aGF0IHRoZSBhbW91bnQgYXdhcmRlZCBjYW5ub3QgZXhjZWVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90b3RhbCBhbW91bnQgZHVlIHRvIHRoaXMgYWNjdC4gbm90ZTogdGhpcyBjaGVjayBpcyBuZWNlc3NhcnksIGN1eiBoZXJlIHdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21pZ2h0IG5vdCBkaXN0cmlidXRlIHRoZSBmdWxsIGhvbGRvdmVyIGFtb3VudCBkdXJpbmcgZWFjaCBwYXNzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4QWNjdERpc3QgPSB0b3RhbEZ1bmRzUmVjZWl2ZWQgKiBwY3R4MTAgLyBURU5IVU5EV0VJOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCA+PSBtYXhBY2N0RGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N0RGlzdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCArIGFjY3REaXN0ID4gbWF4QWNjdERpc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdERpc3QgPSBtYXhBY2N0RGlzdCAtIHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRuZXJBY2NvdW50c1tpXS5jcmVkaXRlZCArPSBhY2N0RGlzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRuZXJBY2NvdW50c1tpXS5iYWxhbmNlICs9IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxGdW5kc0Rpc3RyaWJ1dGVkICs9IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlIC09IGFjY3REaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJvazogZGlzdHJpYnV0ZWQgZnVuZHMiKTsKICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gd2l0aGRyYXcgYWNjb3VudCBiYWxhbmNlCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgewogICAgICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbnVtQWNjb3VudHM7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBhZGRyID0gcGFydG5lckFjY291bnRzW2ldLmFkZHI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRyID09IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50IGFtb3VudCA9IHBhcnRuZXJBY2NvdW50c1tpXS5iYWxhbmNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbW91bnQgPT0gMCkgeyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBiYWxhbmNlIGlzIHplcm8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydG5lckFjY291bnRzW2ldLmJhbGFuY2UgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxGdW5kc1dpdGhkcmF3biArPSBhbW91bnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1zZy5zZW5kZXIuY2FsbC5nYXMod2l0aGRyYXdHYXMpLnZhbHVlKGFtb3VudCkoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnRJKCJvazogcmV3YXJkcyBwYWlkIiwgYW1vdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgLy8gc3VpY2lkZQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBmdW5jdGlvbiBoYXJpS2FyaSgpIHsKICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBub3Qgb3duZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiZXJyOiBsb2NrZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3VpY2lkZShvd25lcik7CiAgICAgICAgfQoKfQ=='.
	

]
