Class {
	#name : #SRT385f9016fcb55cc7f31293025726ca221e6dfb85,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT385f9016fcb55cc7f31293025726ca221e6dfb85 >> base64 [
	^ ''.
	

]
