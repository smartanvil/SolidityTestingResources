Class {
	#name : #SRT697beac28b09e122c4332d163985e8a73121b97f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT697beac28b09e122c4332d163985e8a73121b97f >> base64 [
	^ ''.
	

]
