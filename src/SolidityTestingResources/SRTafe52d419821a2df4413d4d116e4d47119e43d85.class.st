Class {
	#name : #SRTafe52d419821a2df4413d4d116e4d47119e43d85,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTafe52d419821a2df4413d4d116e4d47119e43d85 >> base64 [
	^ ''.
	

]
