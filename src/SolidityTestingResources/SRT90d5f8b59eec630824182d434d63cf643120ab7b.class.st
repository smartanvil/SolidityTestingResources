Class {
	#name : #SRT90d5f8b59eec630824182d434d63cf643120ab7b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT90d5f8b59eec630824182d434d63cf643120ab7b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoKICogT3duYWJsZQogKgogKiBCYXNlIGNvbnRyYWN0IHdpdGggYW4gb3duZXIuCiAqIFByb3ZpZGVzIG9ubHlPd25lciBtb2RpZmllciwgd2hpY2ggcHJldmVudHMgZnVuY3Rpb24gZnJvbSBydW5uaW5nIGlmIGl0IGlzIGNhbGxlZCBieSBhbnlvbmUgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KCn0KCi8qIHRha2luZyBpZGVhcyBmcm9tIEZpcnN0Qmxvb2QgdG9rZW4gKi8KY29udHJhY3QgU2FmZU1hdGggewoKICAgIC8qIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgeyAqLwogICAgLyogICBpZiAoIWFzc2VydGlvbikgeyAqLwogICAgLyogICAgIHRocm93OyAqLwogICAgLyogICB9ICovCiAgICAvKiB9ICAgICAgLy8gYXNzZXJ0IG5vIGxvbmdlciBuZWVkZWQgb25jZSBzb2xpZGl0eSBpcyBvbiAwLjQuMTAgKi8KCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50MjU2IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9Cgpjb250cmFjdCBUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgoKLyogIEVSQyAyMCB0b2tlbiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KSB7CiAgICAgICB0aHJvdzsKICAgICB9CiAgICAgXzsKICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKY29udHJhY3Qgc3BsaXR0ZXJDb250cmFjdCBpcyBPd25hYmxlewoKICAgIGV2ZW50IGV2KHN0cmluZyBtc2csIGFkZHJlc3Mgd2hvbSwgdWludDI1NiB2YWwpOwoKICAgIHN0cnVjdCB4UmVjIHsKICAgICAgICBib29sIGluTGlzdDsKICAgICAgICBhZGRyZXNzIG5leHQ7CiAgICAgICAgYWRkcmVzcyBwcmV2OwogICAgICAgIHVpbnQyNTYgdmFsOwogICAgfQoKICAgIHN0cnVjdCBsOHIgewogICAgICAgIGFkZHJlc3Mgd2hvbTsKICAgICAgICB1aW50MjU2IHZhbDsKICAgIH0KICAgIGFkZHJlc3MgcHVibGljIG15QWRkcmVzcyA9IHRoaXM7CiAgICBhZGRyZXNzIHB1YmxpYyBmaXJzdDsKICAgIGFkZHJlc3MgcHVibGljIGxhc3Q7CiAgICBhZGRyZXNzIHB1YmxpYyBkZGY7CiAgICBib29sICAgIHB1YmxpYyB0aGlua01vZGU7CiAgICB1aW50MjU2IHB1YmxpYyBwb3M7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB4UmVjKSBwdWJsaWMgdGhlTGlzdDsKCiAgICBsOHJbXSAgYWZ0ZXJQYXJ0eTsKCiAgICBtb2RpZmllciBvbmx5TWVPckRERigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBkZGYgfHwgbXNnLnNlbmRlciA9PSBteUFkZHJlc3MgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgewogICAgICAgICAgICBfOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldERERihhZGRyZXNzIGRkZl8pIG9ubHlPd25lciB7CiAgICAgICAgZGRmID0gZGRmXzsKICAgIH0KCiAgICBmdW5jdGlvbiBzcGxpdHRlckNvbnRyYWN0KGFkZHJlc3Mgc2VlZCwgdWludDI1NiBzZWVkVmFsKSB7CiAgICAgICAgZmlyc3QgPSBzZWVkOwogICAgICAgIGxhc3QgPSBzZWVkOwogICAgICAgIHRoZUxpc3Rbc2VlZF0gPSB4UmVjKHRydWUsMHgwLDB4MCxzZWVkVmFsKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdGFydFRoaW5raW5nKCkgb25seU93bmVyIHsKICAgICAgICB0aGlua01vZGUgPSB0cnVlOwogICAgICAgIHBvcyA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gc3RvcFRoaW5raW5nKHVpbnQyNTYgbnVtKSBvbmx5T3duZXIgewogICAgICAgIHRoaW5rTW9kZSA9IGZhbHNlOwogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IG51bTsgaSsrKSB7CiAgICAgICAgICAgIGlmIChwb3MgPj0gYWZ0ZXJQYXJ0eS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBhZnRlclBhcnR5OwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVwZGF0ZShhZnRlclBhcnR5W3Bvc10ud2hvbSxhZnRlclBhcnR5W3Bvc10udmFsKTsKICAgICAgICAgICAgcG9zKys7CiAgICAgICAgfQogICAgICAgIHRoaW5rTW9kZSA9IHRydWU7CiAgICB9IAoKICAgIGZ1bmN0aW9uIHRoaW5rTGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhZnRlclBhcnR5Lmxlbmd0aDsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRSZWM0TDhSKGFkZHJlc3Mgd2hvbSwgdWludDI1NiB2YWwpIGludGVybmFsIHsKICAgICAgICBhZnRlclBhcnR5LnB1c2gobDhyKHdob20sdmFsKSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKGFkZHJlc3Mgd2hvbSwgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHRoZUxpc3Rbd2hvbV0gPSB4UmVjKHRydWUsMHgwLGxhc3QsdmFsdWUpOwogICAgICAgIHRoZUxpc3RbbGFzdF0ubmV4dCA9IHdob207CiAgICAgICAgbGFzdCA9IHdob207CiAgICAgICAgZXYoImFkZCIsd2hvbSx2YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKGFkZHJlc3Mgd2hvbSkgaW50ZXJuYWwgewogICAgICAgIGlmIChmaXJzdCA9PSB3aG9tKSB7CiAgICAgICAgICAgIGZpcnN0ID0gdGhlTGlzdFt3aG9tXS5uZXh0OwogICAgICAgICAgICB0aGVMaXN0W3dob21dID0geFJlYyhmYWxzZSwweDAsMHgwLDApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGFkZHJlc3MgbmV4dCA9IHRoZUxpc3Rbd2hvbV0ubmV4dDsKICAgICAgICBhZGRyZXNzIHByZXYgPSB0aGVMaXN0W3dob21dLnByZXY7CiAgICAgICAgaWYgKHByZXYgIT0gMHgwKSB7CiAgICAgICAgICAgIHRoZUxpc3RbcHJldl0ubmV4dCA9IG5leHQ7CiAgICAgICAgfQogICAgICAgIGlmIChuZXh0ICE9IDB4MCkgewogICAgICAgICAgICB0aGVMaXN0W25leHRdLnByZXYgPSBwcmV2OwogICAgICAgIH0KICAgICAgICB0aGVMaXN0W3dob21dID0geFJlYyhmYWxzZSwweDAsMHgwLDApOwogICAgICAgIGV2KCJyZW1vdmUiLHdob20sMCk7CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlKGFkZHJlc3Mgd2hvbSwgdWludDI1NiB2YWx1ZSkgb25seU1lT3JEREYgewogICAgICAgIGlmICh0aGlua01vZGUpIHsKICAgICAgICAgICAgYWRkUmVjNEw4Uih3aG9tLHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodmFsdWUgIT0gMCkgewogICAgICAgICAgICBpZiAoIXRoZUxpc3Rbd2hvbV0uaW5MaXN0KSB7CiAgICAgICAgICAgICAgICBhZGQod2hvbSx2YWx1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGVMaXN0W3dob21dLnZhbCA9IHZhbHVlOwogICAgICAgICAgICAgICAgZXYoInVwZGF0ZSIsd2hvbSx2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodGhlTGlzdFt3aG9tXS5pbkxpc3QpIHsKICAgICAgICAgICAgICAgIHJlbW92ZSh3aG9tKTsKICAgICAgICB9CiAgICB9Cgp9CgoKCmNvbnRyYWN0IERERlRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsKCiAgICAvLyBtZXRhZGF0YQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkRpZ2l0YWwgRGV2ZWxvcGVycyBGdW5kIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkRERiI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gIjEuMCI7CgogICAgLy8gY29udHJhY3RzCiAgICBhZGRyZXNzIHB1YmxpYyBldGhGdW5kRGVwb3NpdDsgICAgICAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIEVUSCBmb3IgRG9tYWluIERldmVsb3BtZW50IEZ1bmQKICAgIGFkZHJlc3MgcHVibGljIGRkZnRGdW5kRGVwb3NpdDsgICAgIC8vIGRlcG9zaXQgYWRkcmVzcyBmb3IgRG9tYWluIERldmVsb3BtZW50IEZ1bmQgcmVzZXJ2ZQogICAgYWRkcmVzcyBwdWJsaWMgc3BsaXR0ZXI7ICAgICAgICAgIC8vIERBIDgvNi8yMDE3IC0gc3BsaXR0ZXIgY29udHJhY3QKCiAgICAvLyBjcm93ZHNhbGUgcGFyYW1ldGVycwogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQ7ICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byB0cnVlIGluIG9wZXJhdGlvbmFsIHN0YXRlCiAgICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nU3RhcnRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ0VuZFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZGZ0RnVuZCA9IDEgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOyAgIC8vIDFtIERERlQgcmVzZXJ2ZWQgZm9yIERERiB1c2UKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuRXhjaGFuZ2VSYXRlID0gMTAwMDsgICAgICAgICAgICAgICAvLyAxMDAwIERERlQgdG9rZW5zIHBlciAxIEVUSAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkNhcCA9ICAyNTAgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbk1pbiA9ICAxICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsKCgogICAgLy8gZXZlbnRzCiAgICBldmVudCBMb2dSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQ3JlYXRlRERGVChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgLy8gY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIERERlRva2VuKAogICAgICAgIGFkZHJlc3MgX2V0aEZ1bmREZXBvc2l0LAogICAgICAgIGFkZHJlc3MgX2RkZnRGdW5kRGVwb3NpdCwKICAgICAgICBhZGRyZXNzIF9zcGxpdHRlciwgLy8gREEgOC82LzIwMTcKICAgICAgICB1aW50MjU2IF9mdW5kaW5nU3RhcnRUaW1lLAogICAgICAgIHVpbnQyNTYgZHVyYXRpb24pCiAgICB7CiAgICAgIGlzRmluYWxpemVkID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgIC8vY29udHJvbHMgcHJlIHRocm91Z2ggY3Jvd2RzYWxlIHN0YXRlCiAgICAgIGV0aEZ1bmREZXBvc2l0ID0gX2V0aEZ1bmREZXBvc2l0OwogICAgICBkZGZ0RnVuZERlcG9zaXQgPSBfZGRmdEZ1bmREZXBvc2l0OwogICAgICBzcGxpdHRlciA9ICBfc3BsaXR0ZXIgOyAgICAgICAgICAgICAgICAgIC8vIERBIDgvNi8yMDE3CiAgICAgIGZ1bmRpbmdTdGFydFRpbWUgPSBfZnVuZGluZ1N0YXJ0VGltZTsKICAgICAgZnVuZGluZ0VuZFRpbWUgPSBmdW5kaW5nU3RhcnRUaW1lICsgZHVyYXRpb24gKiAxIGRheXM7CiAgICAgIHRvdGFsU3VwcGx5ID0gZGRmdEZ1bmQ7CiAgICAgIGJhbGFuY2VzW2RkZnRGdW5kRGVwb3NpdF0gPSBkZGZ0RnVuZDsgICAgLy8gRGVwb3NpdCBEREYgc2hhcmUKICAgICAgQ3JlYXRlRERGVChkZGZ0RnVuZERlcG9zaXQsIGRkZnRGdW5kKTsgIC8vIGxvZ3MgRERGIGZ1bmQKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsgICAgICAgICAgIC8vIERBIDgvNi8yMDE3IHByZWZlciB0byB1c2UgZmFsbGJhY2sgZnVuY3Rpb24KICAgICAgY3JlYXRlVG9rZW5zKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQWNjZXB0cyBldGhlciBhbmQgY3JlYXRlcyBuZXcgRERGVCB0b2tlbnMuCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbnModWludDI1NiBfdmFsdWUpICBpbnRlcm5hbCB7CiAgICAgIGlmIChpc0ZpbmFsaXplZCkgdGhyb3c7CiAgICAgIGlmIChub3cgPCBmdW5kaW5nU3RhcnRUaW1lKSB0aHJvdzsKICAgICAgaWYgKG5vdyA+IGZ1bmRpbmdFbmRUaW1lKSB0aHJvdzsKICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB0aHJvdzsKCiAgICAgIHVpbnQyNTYgdG9rZW5zID0gc2FmZU11bHQoX3ZhbHVlLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7IC8vIGNoZWNrIHRoYXQgd2UncmUgbm90IG92ZXIgdG90YWxzCiAgICAgIHVpbnQyNTYgY2hlY2tlZFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CgogICAgICAvLyBEQSA4LzYvMjAxNyB0byBmYWlybHkgYWxsb2NhdGUgdGhlIGxhc3QgZmV3IHRva2VucwogICAgICBpZiAodG9rZW5DcmVhdGlvbkNhcCA8IGNoZWNrZWRTdXBwbHkpIHsKICAgICAgICBpZiAodG9rZW5DcmVhdGlvbkNhcCA8PSB0b3RhbFN1cHBseSkgdGhyb3c7ICAvLyBDQVAgcmVhY2hlZCBubyBtb3JlIHBsZWFzZQogICAgICAgIHVpbnQyNTYgdG9rZW5zVG9BbGxvY2F0ZSA9IHNhZmVTdWJ0cmFjdCh0b2tlbkNyZWF0aW9uQ2FwLHRvdGFsU3VwcGx5KTsKICAgICAgICB1aW50MjU2IHRva2Vuc1RvUmVmdW5kICAgPSBzYWZlU3VidHJhY3QodG9rZW5zLHRva2Vuc1RvQWxsb2NhdGUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG9rZW5DcmVhdGlvbkNhcDsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNUb0FsbG9jYXRlOyAgLy8gc2FmZUFkZCBub3QgbmVlZGVkOyBiYWQgc2VtYW50aWNzIHRvIHVzZSBoZXJlCiAgICAgICAgdWludDI1NiBldGhlclRvUmVmdW5kID0gdG9rZW5zVG9SZWZ1bmQgLyB0b2tlbkV4Y2hhbmdlUmF0ZTsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV0aGVyVG9SZWZ1bmQpOwogICAgICAgIENyZWF0ZURERlQobXNnLnNlbmRlciwgdG9rZW5zVG9BbGxvY2F0ZSk7ICAvLyBsb2dzIHRva2VuIGNyZWF0aW9uCiAgICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsZXRoZXJUb1JlZnVuZCk7CiAgICAgICAgc3BsaXR0ZXJDb250cmFjdChzcGxpdHRlcikudXBkYXRlKG1zZy5zZW5kZXIsYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAvLyBEQSA4LzYvMjAxNyBlbmQgb2YgZmFpciBhbGxvY2F0aW9uIGNvZGUKICAgICAgdG90YWxTdXBwbHkgPSBjaGVja2VkU3VwcGx5OwogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnM7ICAvLyBzYWZlQWRkIG5vdCBuZWVkZWQ7IGJhZCBzZW1hbnRpY3MgdG8gdXNlIGhlcmUKICAgICAgQ3JlYXRlRERGVChtc2cuc2VuZGVyLCB0b2tlbnMpOyAgLy8gbG9ncyB0b2tlbiBjcmVhdGlvbgogICAgICBzcGxpdHRlckNvbnRyYWN0KHNwbGl0dGVyKS51cGRhdGUobXNnLnNlbmRlcixiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgICB9CgogICAgLy8vIEBkZXYgRW5kcyB0aGUgZnVuZGluZyBwZXJpb2QgYW5kIHNlbmRzIHRoZSBFVEggaG9tZQogICAgZnVuY3Rpb24gZmluYWxpemUoKSBleHRlcm5hbCB7CiAgICAgIGlmIChpc0ZpbmFsaXplZCkgdGhyb3c7CiAgICAgIGlmIChtc2cuc2VuZGVyICE9IGV0aEZ1bmREZXBvc2l0KSB0aHJvdzsgLy8gbG9ja3MgZmluYWxpemUgdG8gdGhlIHVsdGltYXRlIEVUSCBvd25lcgogICAgICBpZih0b3RhbFN1cHBseSA8IHRva2VuQ3JlYXRpb25NaW4gKyBkZGZ0RnVuZCkgdGhyb3c7ICAgICAgLy8gaGF2ZSB0byBzZWxsIG1pbmltdW0gdG8gbW92ZSB0byBvcGVyYXRpb25hbAogICAgICBpZihub3cgPD0gZnVuZGluZ0VuZFRpbWUgJiYgdG90YWxTdXBwbHkgIT0gdG9rZW5DcmVhdGlvbkNhcCkgdGhyb3c7CiAgICAgIC8vIG1vdmUgdG8gb3BlcmF0aW9uYWwKICAgICAgaXNGaW5hbGl6ZWQgPSB0cnVlOwogICAgICAvLyBEQSA4LzYvMjAxNyBjaGFuZ2Ugc2VuZC90aHJvdyB0byB0cmFuc2ZlcgogICAgICBldGhGdW5kRGVwb3NpdC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOyAgLy8gc2VuZCB0aGUgZXRoIHRvIERERgogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBjb250cmlidXRvcnMgdG8gcmVjb3ZlciB0aGVpciBldGhlciBpbiB0aGUgY2FzZSBvZiBhIGZhaWxlZCBmdW5kaW5nIGNhbXBhaWduLgogICAgZnVuY3Rpb24gcmVmdW5kKCkgZXh0ZXJuYWwgewogICAgICBpZihpc0ZpbmFsaXplZCkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2ZW50cyByZWZ1bmQgaWYgb3BlcmF0aW9uYWwKICAgICAgaWYgKG5vdyA8PSBmdW5kaW5nRW5kVGltZSkgdGhyb3c7IC8vIHByZXZlbnRzIHJlZnVuZCB1bnRpbCBzYWxlIHBlcmlvZCBpcyBvdmVyCiAgICAgIGlmKHRvdGFsU3VwcGx5ID49IHRva2VuQ3JlYXRpb25NaW4gKyBkZGZ0RnVuZCkgdGhyb3c7ICAvLyBubyByZWZ1bmRzIGlmIHdlIHNvbGQgZW5vdWdoCiAgICAgIGlmKG1zZy5zZW5kZXIgPT0gZGRmdEZ1bmREZXBvc2l0KSB0aHJvdzsgICAgLy8gRERGIG5vdCBlbnRpdGxlZCB0byBhIHJlZnVuZAogICAgICB1aW50MjU2IGRkZnRWYWwgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgaWYgKGRkZnRWYWwgPT0gMCkgdGhyb3c7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3VidHJhY3QodG90YWxTdXBwbHksIGRkZnRWYWwpOyAvLyBleHRyYSBzYWZlCiAgICAgIHVpbnQyNTYgZXRoVmFsID0gZGRmdFZhbCAvIHRva2VuRXhjaGFuZ2VSYXRlOyAgICAgLy8gc2hvdWxkIGJlIHNhZmU7IHByZXZpb3VzIHRocm93cyBjb3ZlcnMgZWRnZXMKICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsIGV0aFZhbCk7ICAgICAgICAgICAgICAgLy8gbG9nIGl0IAogICAgICAvLyBEQSA4LzYvMjAxNyBjaGFuZ2Ugc2VuZC90aHJvdyB0byB0cmFuc2ZlcgogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV0aFZhbCk7ICAgICAgICAgICAgICAgICAvLyBpZiB5b3UncmUgdXNpbmcgYSBjb250cmFjdDsgbWFrZSBzdXJlIGl0IHdvcmtzIHdpdGggLnNlbmQgZ2FzIGxpbWl0cwogICAgfQoKICAgIC8vIERBIDgvNi8yMDE3CiAgICAvLy8gQGRldiBVcGRhdGVzIHNwbGl0dGVyIGNvbnRyYWN0IHdpdGggb3duZXJzaGlwIGNoYW5nZXMKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICBzdWNjZXNzID0gc3VwZXIudHJhbnNmZXIoX3RvLF92YWx1ZSk7CiAgICAgIHNwbGl0dGVyQ29udHJhY3Qgc2MgPSBzcGxpdHRlckNvbnRyYWN0KHNwbGl0dGVyKTsKICAgICAgc2MudXBkYXRlKG1zZy5zZW5kZXIsYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICBzYy51cGRhdGUoX3RvLGJhbGFuY2VzW190b10pOwogICAgICByZXR1cm47CiAgICB9Cgp9'.
	

]
