Class {
	#name : #SRTc5de7ac5ea11651f25c0738efa176010553bc323,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc5de7ac5ea11651f25c0738efa176010553bc323 >> base64 [
	^ ''.
	

]
