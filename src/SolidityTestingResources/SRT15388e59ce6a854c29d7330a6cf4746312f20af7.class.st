Class {
	#name : #SRT15388e59ce6a854c29d7330a6cf4746312f20af7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15388e59ce6a854c29d7330a6cf4746312f20af7 >> base64 [
	^ ''.
	

]
