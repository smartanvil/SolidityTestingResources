Class {
	#name : #SRT8e0f8adfb17c48f5837228018ace3c711168458d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8e0f8adfb17c48f5837228018ace3c711168458d >> base64 [
	^ ''.
	

]
