Class {
	#name : #SRT7450f90f3e020e964829187697fcbc6d82735644,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7450f90f3e020e964829187697fcbc6d82735644 >> base64 [
	^ ''.
	

]
