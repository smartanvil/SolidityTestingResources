Class {
	#name : #SRT3a92bd396aef82af98ebc0aa9030d25a23b11c6b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3a92bd396aef82af98ebc0aa9030d25a23b11c6b >> base64 [
	^ ''.
	

]
