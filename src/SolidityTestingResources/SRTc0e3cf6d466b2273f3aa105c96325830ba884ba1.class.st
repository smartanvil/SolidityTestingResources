Class {
	#name : #SRTc0e3cf6d466b2273f3aa105c96325830ba884ba1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0e3cf6d466b2273f3aa105c96325830ba884ba1 >> base64 [
	^ 'Ly8KLy8gY29tcGlsZXI6IHNvbGNqcyAtbyAuLi9idWlsZC9jb250cmFjdHMgLS1vcHRpbWl6ZSAtLWFiaSAtLWJpbiBPWF9UT0tFTi5zb2wKLy8gIHZlcnNpb246IDAuNC4xMStjb21taXQuNjhlZjU4MTAuRW1zY3JpcHRlbi5jbGFuZwovLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCmNvbnRyYWN0IG93bmVkIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZnVuY3Rpb24gb3duZWQoKSB7IG93bmVyID0gbXNnLnNlbmRlcjsgfQoKICBtb2RpZmllciBvbmx5T3duZXIgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgdGhyb3c7IH0KICAgIF87CiAgfQogIGZ1bmN0aW9uIGNoYW5nZU93bmVyKCBhZGRyZXNzIG5ld293bmVyICkgb25seU93bmVyIHsKICAgIG93bmVyID0gbmV3b3duZXI7CiAgfQp9Cgpjb250cmFjdCBPWF9UT0tFTiBpcyBvd25lZCB7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJPWCI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRklYRUQiOwoKICBldmVudCBUcmFuc2ZlciggYWRkcmVzcyBpbmRleGVkIF9mcm9tLAogICAgICAgICAgICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX3RvLAogICAgICAgICAgICAgICAgICAgdWludDI1NiBfdmFsdWUgKTsKCiAgZXZlbnQgQXBwcm92YWwoIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwKICAgICAgICAgICAgICAgICAgdWludDI1NiBfdmFsdWUpOwoKICBldmVudCBSZWNlaXB0KCBhZGRyZXNzIGluZGV4ZWQgX3RvLAogICAgICAgICAgICAgICAgIHVpbnQgX294ZW4sCiAgICAgICAgICAgICAgICAgdWludCBfcGF5bWVudHdlaSApOwoKICB1aW50IHB1YmxpYyBzdGFydHRpbWU7CiAgdWludCBwdWJsaWMgaW5DaXJjdWxhdGlvbjsKICBtYXBwaW5nKCBhZGRyZXNzID0+IHVpbnQgKSBwdWJsaWMgb3hlbjsKICBtYXBwaW5nKCBhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgKSBhbGxvd2VkOwoKICBmdW5jdGlvbiBPWF9UT0tFTigpIHsKICAgIHN0YXJ0dGltZSA9IDA7CiAgICBpbkNpcmN1bGF0aW9uID0gMDsKICB9CgogIGZ1bmN0aW9uIGNsb3NlZG93bigpIG9ubHlPd25lciB7CiAgICBzZWxmZGVzdHJ1Y3QoIG93bmVyICk7CiAgfQoKICBmdW5jdGlvbigpIHBheWFibGUgewogICAgYnV5T3goKTsgLy8gZm9yd2FyZHMgdmFsdWUsIGdhcwogIH0KCiAgZnVuY3Rpb24gd2l0aGRyYXcoIHVpbnQgYW1vdW50ICkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGFtb3VudCA8PSB0aGlzLmJhbGFuY2UpCiAgICAgIHN1Y2Nlc3MgPSBvd25lci5zZW5kKCBhbW91bnQgKTsKICAgIGVsc2UKICAgICAgc3VjY2VzcyA9IGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gc3RhcnRTYWxlKCkgb25seU93bmVyIHsKICAgIGlmIChzdGFydHRpbWUgIT0gMCkgcmV0dXJuOwoKICAgIHN0YXJ0dGltZSA9IG5vdzsgLy8gbm93IGlzIGJsb2NrIHRpbWVzdGFtcCBpbiB1bml4LXNlY29uZHMKICAgIGluQ2lyY3VsYXRpb24gPSA1MDAwMDAwMDA7IC8vIHJlc2VydmUgZm9yIG9yZwogICAgb3hlbltvd25lcl0gPSBpbkNpcmN1bGF0aW9uOwogICAgVHJhbnNmZXIoIGFkZHJlc3ModGhpcyksIG93bmVyLCBpbkNpcmN1bGF0aW9uICk7CiAgfQoKICBmdW5jdGlvbiBidXlPeCgpIHBheWFibGUgewoKICAgIC8vIG1pbiBwdXJjaGFzZSAuMSBFID0gMTAqKjE3IHdlaQogICAgaWYgKCFzYWxlT24oKSB8fCBtc2cudmFsdWUgPCAxMDAgZmlubmV5KSB7CiAgICAgIHRocm93OyAvLyByZXR1cm5zIGNhbGxlcidzIEV0aGVyIGFuZCB1bnVzZWQgZ2FzCiAgICB9CgogICAgLy8gcmF0ZTogMSBldGggPD09PiAzMDAwIG94CiAgICAvLyB0byBidXk6IG1zZy52YWx1ZSAqIDMwMDAgKiAoMTAwICsgYm9udXMpCiAgICAvLyAgICAgICAgIC0tLS0tLS0tLSAgICAgICAgICAtLS0tLS0tLS0tLS0tCiAgICAvLyAgICAgICAgICAxMCoqMTggICAgICAgICAgICAgICAgIDEwMAogICAgdWludCBveCA9IGRpdiggbXVsKG11bChtc2cudmFsdWUsMyksIDEwMCArIGJvbnVzKCkpLCAxMCoqMTcgKTsKCiAgICBpZiAoaW5DaXJjdWxhdGlvbiArIG94ID4gMTAwMDAwMDAwMCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBpbkNpcmN1bGF0aW9uICs9IG94OwogICAgb3hlblttc2cuc2VuZGVyXSArPSBveDsKICAgIFJlY2VpcHQoIG1zZy5zZW5kZXIsIG94LCBtc2cudmFsdWUgKTsKICB9CgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgcmV0dXJuIGluQ2lyY3VsYXRpb247CiAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgYmFsYW5jZSA9IG94ZW5bX293bmVyXTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChzYWxlT24oKSkgcmV0dXJuIGZhbHNlOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zCiAgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIHRvLCB1aW50IG94ICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoIG94ID4gb3hlblttc2cuc2VuZGVyXSB8fCBzYWxlT24oKSApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIG94ZW5bbXNnLnNlbmRlcl0gLT0gb3g7CiAgICBveGVuW3RvXSArPSBveDsKICAgIFRyYW5zZmVyKCBtc2cuc2VuZGVyLCB0bywgb3ggKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoICAgIG94ZW5bX2Zyb21dID49IF9hbW91bnQKICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAogICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAmJiBveGVuW190b10gKyBfYW1vdW50ID4gb3hlbltfdG9dCiAgICAgICApCiAgICB7CiAgICAgIG94ZW5bX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgIG94ZW5bX3RvXSArPSBfYW1vdW50OwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgc3VjY2VzcyA9IHRydWU7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgIHN1Y2Nlc3MgPSBmYWxzZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHNhbGVPbigpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgcmV0dXJuIG5vdyAtIHN0YXJ0dGltZSA8IDMxIGRheXM7CiAgfQoKICBmdW5jdGlvbiBib251cygpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgdWludCBlbGFwc2VkID0gbm93IC0gc3RhcnR0aW1lOwoKICAgIGlmIChlbGFwc2VkIDwgMSBkYXlzKSByZXR1cm4gMjU7CiAgICBpZiAoZWxhcHNlZCA8IDEgd2Vla3MpIHJldHVybiAyMDsKICAgIGlmIChlbGFwc2VkIDwgMiB3ZWVrcykgcmV0dXJuIDE1OwogICAgaWYgKGVsYXBzZWQgPCAzIHdlZWtzKSByZXR1cm4gMTA7CiAgICBpZiAoZWxhcHNlZCA8IDQgd2Vla3MpIHJldHVybiA1OwogICAgcmV0dXJuIDA7CiAgfQoKICAvLyByZWY6CiAgLy8gZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvCiAgLy8gYmxvYi9tYXN0ZXIvY29udHJhY3RzL1NhZmVNYXRoLnNvbAogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBpZiAoYSA9PSAwIHx8IGMgLyBhID09IGIpCiAgICByZXR1cm4gYzsKICAgIGVsc2UgdGhyb3c7CiAgfQogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICByZXR1cm4gYzsKICB9CgogIGFkZHJlc3MgcHVibGljIGNvbnN0YW50IEFVVEhPUiA9IDB4MDA4ZTkzNDJlYjc2OWM0MDM5YWFmMzNkYTczOWZiMmZjOGFmOWFmZGMxOwp9'.
	

]
