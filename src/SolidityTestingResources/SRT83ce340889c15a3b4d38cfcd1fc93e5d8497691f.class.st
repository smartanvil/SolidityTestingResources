Class {
	#name : #SRT83ce340889c15a3b4d38cfcd1fc93e5d8497691f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT83ce340889c15a3b4d38cfcd1fc93e5d8497691f >> base64 [
	^ ''.
	

]
