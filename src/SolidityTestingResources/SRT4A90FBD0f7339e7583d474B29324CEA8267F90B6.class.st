Class {
	#name : #SRT4A90FBD0f7339e7583d474B29324CEA8267F90B6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4A90FBD0f7339e7583d474B29324CEA8267F90B6 >> base64 [
	^ ''.
	

]
