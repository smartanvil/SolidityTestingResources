Class {
	#name : #SRT007a422fd7e5b47dd2cb078f250388b406548cd4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT007a422fd7e5b47dd2cb078f250388b406548cd4 >> base64 [
	^ ''.
	

]
