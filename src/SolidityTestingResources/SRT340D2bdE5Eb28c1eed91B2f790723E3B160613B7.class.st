Class {
	#name : #SRT340D2bdE5Eb28c1eed91B2f790723E3B160613B7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT340D2bdE5Eb28c1eed91B2f790723E3B160613B7 >> base64 [
	^ ''.
	

]
