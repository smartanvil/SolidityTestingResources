Class {
	#name : #SRT3618516f45cd3c913f81f9987af41077932bc40d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3618516f45cd3c913f81f9987af41077932bc40d >> base64 [
	^ ''.
	

]
