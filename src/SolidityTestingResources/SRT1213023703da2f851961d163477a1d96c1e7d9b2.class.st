Class {
	#name : #SRT1213023703da2f851961d163477a1d96c1e7d9b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1213023703da2f851961d163477a1d96c1e7d9b2 >> base64 [
	^ ''.
	

]
