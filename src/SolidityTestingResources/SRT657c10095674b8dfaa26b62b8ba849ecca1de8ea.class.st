Class {
	#name : #SRT657c10095674b8dfaa26b62b8ba849ecca1de8ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT657c10095674b8dfaa26b62b8ba849ecca1de8ea >> base64 [
	^ ''.
	

]
