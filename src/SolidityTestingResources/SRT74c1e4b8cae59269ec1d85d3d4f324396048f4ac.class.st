Class {
	#name : #SRT74c1e4b8cae59269ec1d85d3d4f324396048f4ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT74c1e4b8cae59269ec1d85d3d4f324396048f4ac >> base64 [
	^ ''.
	

]
