Class {
	#name : #SRT6fd570c64568a05b9cf3afcd7d31aa5e3c9b8350,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6fd570c64568a05b9cf3afcd7d31aa5e3c9b8350 >> base64 [
	^ ''.
	

]
