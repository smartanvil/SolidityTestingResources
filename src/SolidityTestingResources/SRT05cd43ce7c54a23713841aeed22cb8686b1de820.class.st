Class {
	#name : #SRT05cd43ce7c54a23713841aeed22cb8686b1de820,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT05cd43ce7c54a23713841aeed22cb8686b1de820 >> base64 [
	^ ''.
	

]
