Class {
	#name : #SRTa9b2d2be17f3472f9dfb626531f3821080c00159,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9b2d2be17f3472f9dfb626531f3821080c00159 >> base64 [
	^ ''.
	

]
