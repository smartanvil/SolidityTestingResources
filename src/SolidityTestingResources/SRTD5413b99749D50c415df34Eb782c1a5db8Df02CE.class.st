Class {
	#name : #SRTD5413b99749D50c415df34Eb782c1a5db8Df02CE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTD5413b99749D50c415df34Eb782c1a5db8Df02CE >> base64 [
	^ ''.
	

]
