Class {
	#name : #SRT911ce7a305ed6411191d134af8d835cf7bde22c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT911ce7a305ed6411191d134af8d835cf7bde22c6 >> base64 [
	^ ''.
	

]
