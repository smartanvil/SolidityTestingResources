Class {
	#name : #SRT066eee2be6388f8c19983185906ed89724c7b4cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT066eee2be6388f8c19983185906ed89724c7b4cd >> base64 [
	^ ''.
	

]
