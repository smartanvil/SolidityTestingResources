Class {
	#name : #SRTa8517a3f019263dabcfb013b4f7f59079630fafc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa8517a3f019263dabcfb013b4f7f59079630fafc >> base64 [
	^ ''.
	

]
