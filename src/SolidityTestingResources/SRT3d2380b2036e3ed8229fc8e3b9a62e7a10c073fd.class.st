Class {
	#name : #SRT3d2380b2036e3ed8229fc8e3b9a62e7a10c073fd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3d2380b2036e3ed8229fc8e3b9a62e7a10c073fd >> base64 [
	^ ''.
	

]
