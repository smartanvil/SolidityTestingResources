Class {
	#name : #SRT02dbe2f315e059743376abcd22ab4908ea9fb02d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02dbe2f315e059743376abcd22ab4908ea9fb02d >> base64 [
	^ ''.
	

]
