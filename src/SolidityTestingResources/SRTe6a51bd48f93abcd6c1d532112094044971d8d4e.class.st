Class {
	#name : #SRTe6a51bd48f93abcd6c1d532112094044971d8d4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe6a51bd48f93abcd6c1d532112094044971d8d4e >> base64 [
	^ ''.
	

]
