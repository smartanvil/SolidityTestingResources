Class {
	#name : #SRT5736889fd9702ba127555b745457ea152476e93e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5736889fd9702ba127555b745457ea152476e93e >> base64 [
	^ ''.
	

]
