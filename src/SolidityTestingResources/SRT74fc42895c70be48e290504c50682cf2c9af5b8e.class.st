Class {
	#name : #SRT74fc42895c70be48e290504c50682cf2c9af5b8e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT74fc42895c70be48e290504c50682cf2c9af5b8e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOyBfOyB9CgogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICBldmVudCBQYXVzZSgpOwogICAgZXZlbnQgVW5wYXVzZSgpOwoKICAgIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7IHJlcXVpcmUoIXBhdXNlZCk7IF87IH0KICAgIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7IHJlcXVpcmUocGF1c2VkKTsgXzsgfQoKICAgIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgUGF1c2UoKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgICAgICBVbnBhdXNlKCk7CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CgogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CgogICAgICAgIGlmKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICAgICAgfQoKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9Cgpjb250cmFjdCBCdXJuYWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CgogICAgICAgIGFkZHJlc3MgYnVybmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tidXJuZXJdID0gYmFsYW5jZXNbYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIEJ1cm4oYnVybmVyLCBfdmFsdWUpOwogICAgfQp9CgovKgogICAgSUNPINCR0LvRjdC6LdGA0L7QugogICAgLSDQrdC80LjRgdGB0LjRjyDRgtC+0LrQtdC90L7QsiDQvtCz0YDQsNC90LjRh9C10L3QsCAo0LLRgdC10LPQviAxMCAwMDAgMDAwINGC0L7QutC10L3QvtCyLCDRgtC+0LrQtdC90Ysg0L3QtSDRgdCz0L7RgNCw0Y7RgikKICAgIC0g0KbQtdC90LAg0YLQvtC60LXQvdCwINGE0LjQutGB0LjRgNC+0LLQsNC90L3QsNGPOiAxIEVUSCA9IDMwMDAg0YLQvtC60LXQvdC+0LIKICAgIC0g0JzQuNC90LjQvNCw0LvRjNC90LDRjyDQuCDQvNCw0LrRgdC40LzQsNC70YzQvdCw0Y8g0YHRg9C80LzQsCDQv9C+0LrRg9C/0LrQuDogMC4wMDEgRVRIINC4IDEwMCBFVEgKICAgIC0g0KLQvtC60LXQvdC+0LIg0L3QsCDQv9GA0L7QtNCw0LbRgyDQvdCwIFByZUlDTyAyIDAwMCAwMDAKICAgIC0g0KHRgNC10LTRgdGC0LLQsCDQvtGCINC/0L7QutGD0L/QutC4INGC0L7QutC10L3QvtCyINC70LXQttCw0YIg0L3QsCDQutC+0L3RgtGA0LDQutGC0LUKICAgIC0gQ3Jvd2RzYWxlINC+0LPRgNCw0L3QuNGH0LXQvSDQv9C+INCy0YDQtdC80LXQvdC4CiAgICAtINCX0LDQutGA0YvRgtC40LUgQ3Jvd2RzYWxlINC/0YDQvtC40YHRhdC+0LTQuNGCINGBINC/0L7QvNC+0YnRjNGOINGE0YPQvdC60YbQuNC4IGB3aXRoZHJhdygpYAogICAgLSBgd2l0aGRyYXcoZmFsc2UpYCDRg9GB0L/QtdGI0L3QvtC1INC30LDQstC10YDRiNC10L3QuNC1INC60L7QvNC/0LDQvdC40Lg6INGD0L/RgNCw0LLQu9C10L3QuNC1INGC0L7QutC10L3QvtC8LCDQvdC1INGA0LDRgdC60YPQv9C70LXQvdC90YvQtSDRgtC+0LrQtdC90Ysg0Lgg0YHRgNC10LTRgdGC0LLQsCDQvdCwINC60L7QvdGC0YDQsNC60YLQtSDQv9C10YDQtdC00LDRjtGC0YHRjyDQsdC10L3QtdGE0LjRhtC40LDRgNGDCiAgICAtIGB3aXRoZHJhdyh0cnVlKWAg0LrQvtC80L/QsNC90LjRjyDQt9Cw0LLQtdGA0YjQuNC70LDRgdGMINC90LXRg9C00LDRh9C10Lk6INGD0L/RgNCw0LLQu9C10L3QuNC1INGC0L7QutC10L3QvtC8INC4INC90LUg0YDQsNGB0LrRg9C/0LvQtdC90L3Ri9C1INGC0L7QutC10L3RiyDQv9C10YDQtdC00LDRjtGC0YHRjyDQsdC10L3QtdGE0LjRhtC40LDRgNGDLCDQvtGC0LrRgNGL0LLQsNC10YLRgdGPINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0LfQsNCx0YDQsNGC0Ywg0LLQu9C+0LbQtdC90L3Ri9C1INGB0YDQtdC00YHRgtCy0LAgYHJlZnVuZCgpYAogICAgLSDQktC60LvQsNC00YfQuNC6INC80L7QttC10YIg0LfQsNCx0YDQsNGC0Ywg0YHQstC+0Lgg0YHRgNC10LTRgdGC0LLQsCDQstGL0LfQvtCy0L7QvCDRhNGD0L3QutGG0LjQuCBgcmVmdW5kKClgINC/0L7RgdC70LUg0L3QtdGD0LTQsNGH0L3QvtCz0L4g0LfQsNCy0LXRgNGI0LXQvdC40LUg0LrQvtC80L/QsNC90LjQuCBgd2l0aGRyYXcodHJ1ZSlgCiovCmNvbnRyYWN0IFRva2VuIGlzIEJ1cm5hYmxlVG9rZW4sIE93bmFibGUgewogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlJlYWxTdGFydCBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJSU1QiOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIAogICAgdWludDI1NiBwdWJsaWMgSU5JVElBTF9TVVBQTFkgPSAxMDAwMDAwMCAqIDEgZXRoZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgdG9rZW5zCgogICAgZnVuY3Rpb24gVG9rZW4oKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwogICAgfQp9Cgpjb250cmFjdCBDcm93ZHNhbGUgaXMgUGF1c2FibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgVG9rZW4gcHVibGljIHRva2VuOwogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnkgPSAweGU5N2JlMjYwYkIyNWQ4NDg2MDU5MjUyNEU1MDg2QzA3YzNjYjNDMGM7ICAgICAgICAvLyBCZW5lZmljaWFyeQoKICAgIHVpbnQgcHVibGljIGNvbGxlY3RlZFdlaTsKICAgIHVpbnQgcHVibGljIHJlZnVuZGVkV2VpOwogICAgdWludCBwdWJsaWMgdG9rZW5zU29sZDsKCiAgICB1aW50IHB1YmxpYyB0b2tlbnNGb3JTYWxlID0gMjAwMDAwMCAqIDEgZXRoZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IHRva2VucyBmb3Igc2FsZQogICAgdWludCBwdWJsaWMgcHJpY2VUb2tlbldlaSA9IDEgZXRoZXIgLyAyMDAwOwogICAgdWludCBwdWJsaWMgcHJpY2VUb2tlbldlaVByZUlDTyA9IDMzMzMzMzMzMzMzMzMzMzsgLy8gMSBldGhlciAvIDMwMDA7CgogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lID0gMTUxMzI5OTYwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIHVpbnQgcHVibGljIGVuZFRpbWUgPSAxNTE3MzYwMzk5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICBib29sIHB1YmxpYyBjcm93ZHNhbGVGaW5pc2hlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgcmVmdW5kT3BlbiA9IGZhbHNlOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBzYWxlQmFsYW5jZXM7IAoKICAgIGV2ZW50IE5ld0NvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgaG9sZGVyLCB1aW50MjU2IHRva2VuQW1vdW50LCB1aW50MjU2IGV0aGVyQW1vdW50KTsKICAgIGV2ZW50IFJlZnVuZGVkKGFkZHJlc3MgaW5kZXhlZCBob2xkZXIsIHVpbnQyNTYgZXRoZXJBbW91bnQpOwogICAgZXZlbnQgV2l0aGRyYXcoKTsKCiAgICBmdW5jdGlvbiBDcm93ZHNhbGUoKSB7CiAgICAgICAgdG9rZW4gPSBuZXcgVG9rZW4oKTsKICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIHB1cmNoYXNlKCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFRlc3QgcHVyY2hhc2U6IG5ldyBDcm93ZHNhbGUoKTsgJDAucHVyY2hhc2UoKSgxMCk7IG5ldyAkMC50b2tlbi5Ub2tlbigpOyAkMi5iYWxhbmNlT2YoQDApID09IDJlKzIyCiAgICAvLy8gQGRldiBUZXN0IG1pbiBwdXJjaGFzZTogbmV3IENyb3dkc2FsZSgpOyAhJDAucHVyY2hhc2UoKSgwLjAwMDkpOyAkMC5wdXJjaGFzZSgpKDAuMDAxKQogICAgLy8vIEBkZXYgVGVzdCBtYXggcHVyY2hhc2U6IG5ldyBDcm93ZHNhbGUoKTsgISQwLnB1cmNoYXNlKCkoMTAwMDEpOyAkMC5wdXJjaGFzZSgpKDEwMDAwKQogICAgZnVuY3Rpb24gcHVyY2hhc2UoKSB3aGVuTm90UGF1c2VkIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICByZXF1aXJlKG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDwgZW5kVGltZSk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnNTb2xkIDwgdG9rZW5zRm9yU2FsZSk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gMC4wMDEgKiAxIGV0aGVyICYmIG1zZy52YWx1ZSA8PSAxMDAgKiAxIGV0aGVyKTsKCiAgICAgICAgdWludCBzdW0gPSBtc2cudmFsdWU7CiAgICAgICAgdWludCBhbW91bnQgPSBzdW0uZGl2KHByaWNlVG9rZW5XZWlQcmVJQ08pLm11bCgxIGV0aGVyKTsKICAgICAgICB1aW50IHJldFN1bSA9IDA7CiAgICAgICAgCiAgICAgICAgaWYodG9rZW5zU29sZC5hZGQoYW1vdW50KSA+IHRva2Vuc0ZvclNhbGUpIHsKICAgICAgICAgICAgdWludCByZXRBbW91bnQgPSB0b2tlbnNTb2xkLmFkZChhbW91bnQpLnN1Yih0b2tlbnNGb3JTYWxlKTsKICAgICAgICAgICAgcmV0U3VtID0gcmV0QW1vdW50Lm11bChwcmljZVRva2VuV2VpUHJlSUNPKS5kaXYoMSBldGhlcik7CgogICAgICAgICAgICBhbW91bnQgPSBhbW91bnQuc3ViKHJldEFtb3VudCk7CiAgICAgICAgICAgIHN1bSA9IHN1bS5zdWIocmV0U3VtKTsKICAgICAgICB9CgogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZChhbW91bnQpOwogICAgICAgIGNvbGxlY3RlZFdlaSA9IGNvbGxlY3RlZFdlaS5hZGQoc3VtKTsKICAgICAgICBzYWxlQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWxlQmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHN1bSk7CgogICAgICAgIHRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCk7CgogICAgICAgIGlmKHJldFN1bSA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZXRTdW0pOwogICAgICAgIH0KCiAgICAgICAgTmV3Q29udHJpYnV0aW9uKG1zZy5zZW5kZXIsIGFtb3VudCwgc3VtKTsKICAgIH0KCiAgICAvLy8gQGRldiBUZXN0IHdpdGhkcmF3OiBuZXcgQ3Jvd2RzYWxlKCk7ICQwLnB1cmNoYXNlKCkoMTAwMCk7ICQwLnB1cmNoYXNlKCkoMTAwMClbMV07ICQwLndpdGhkcmF3KGZhbHNlKTsgbmV3ICQwLnRva2VuLlRva2VuKCk7ICQ0Lm93bmVyKCkgPT0gQDUKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KGJvb2wgcmVmdW5kKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUZpbmlzaGVkKTsKCiAgICAgICAgaWYodG9rZW4uYmFsYW5jZU9mKHRoaXMpID4gMCkgewogICAgICAgICAgICB0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgICAgICB9CgogICAgICAgIGlmKHJlZnVuZCAmJiB0b2tlbnNTb2xkIDwgdG9rZW5zRm9yU2FsZSkgewogICAgICAgICAgICByZWZ1bmRPcGVuID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKGJlbmVmaWNpYXJ5KTsKICAgICAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CgogICAgICAgIFdpdGhkcmF3KCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlZnVuZCgpIHsKICAgICAgICByZXF1aXJlKGNyb3dkc2FsZUZpbmlzaGVkKTsKICAgICAgICByZXF1aXJlKHJlZnVuZE9wZW4pOwogICAgICAgIHJlcXVpcmUoc2FsZUJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCk7CgogICAgICAgIHVpbnQgc3VtID0gc2FsZUJhbGFuY2VzW21zZy5zZW5kZXJdOwoKICAgICAgICBzYWxlQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIHJlZnVuZGVkV2VpID0gcmVmdW5kZWRXZWkuYWRkKHN1bSk7CgogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoc3VtKTsKICAgICAgICAKICAgICAgICBSZWZ1bmRlZChtc2cuc2VuZGVyLCBzdW0pOwogICAgfQp9'.
	

]
