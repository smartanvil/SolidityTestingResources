Class {
	#name : #SRTE347C064D8535b2f7D7C0f7bc5d6763125FC2Dc6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE347C064D8535b2f7D7C0f7bc5d6763125FC2Dc6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIC8vIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBhIC8gYjsKICB9CgogIC8qKgogICogQGRldiBTdWJ0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgZW1pdCBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9Ci8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CmxpYnJhcnkgU2FmZUVSQzIwIHsKICBmdW5jdGlvbiBzYWZlVHJhbnNmZXIoRVJDMjBCYXNpYyB0b2tlbiwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyKHRvLCB2YWx1ZSkpOwogIH0KCiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyRnJvbSgKICAgIEVSQzIwIHRva2VuLAogICAgYWRkcmVzcyBmcm9tLAogICAgYWRkcmVzcyB0bywKICAgIHVpbnQyNTYgdmFsdWUKICApCiAgICBpbnRlcm5hbAogIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKSk7CiAgfQoKICBmdW5jdGlvbiBzYWZlQXBwcm92ZShFUkMyMCB0b2tlbiwgYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQodG9rZW4uYXBwcm92ZShzcGVuZGVyLCB2YWx1ZSkpOwogIH0KfQovKioKICogQHRpdGxlIFRva2VuVmVzdGluZwogKiBAZGV2IEEgdG9rZW4gaG9sZGVyIGNvbnRyYWN0IHRoYXQgY2FuIHJlbGVhc2UgaXRzIHRva2VuIGJhbGFuY2UgZ3JhZHVhbGx5IGxpa2UgYQogKiB0eXBpY2FsIHZlc3Rpbmcgc2NoZW1lLCB3aXRoIGEgY2xpZmYgYW5kIHZlc3RpbmcgcGVyaW9kLiBPcHRpb25hbGx5IHJldm9jYWJsZSBieSB0aGUKICogb3duZXIuCiAqLwpjb250cmFjdCBUb2tlblZlc3RpbmcgaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwoKICBldmVudCBSZWxlYXNlZCh1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgUmV2b2tlZCgpOwoKICAvLyBiZW5lZmljaWFyeSBvZiB0b2tlbnMgYWZ0ZXIgdGhleSBhcmUgcmVsZWFzZWQKICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKICAKICBFUkMyMEJhc2ljIHB1YmxpYyB0b2tlbjsKICBhZGRyZXNzIHB1YmxpYyBhZGRyZXNzVG9rZW47IAogIHVpbnQyNTYgcHVibGljIGNsaWZmOwogIHVpbnQyNTYgcHVibGljIHN0YXJ0OwogIHVpbnQyNTYgcHVibGljIGR1cmF0aW9uOwoKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyByZWxlYXNlZDsKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyByZXZva2VkOwoKICAvKioKICAgKiBAZGV2IENyZWF0ZXMgYSB2ZXN0aW5nIGNvbnRyYWN0IHRoYXQgdmVzdHMgaXRzIGJhbGFuY2Ugb2YgYW55IEVSQzIwIHRva2VuIHRvIHRoZQogICAqIF9iZW5lZmljaWFyeSwgZ3JhZHVhbGx5IGluIGEgbGluZWFyIGZhc2hpb24gdW50aWwgX3N0YXJ0ICsgX2R1cmF0aW9uLiBCeSB0aGVuIGFsbAogICAqIG9mIHRoZSBiYWxhbmNlIHdpbGwgaGF2ZSB2ZXN0ZWQuCiAgICovCiAgZnVuY3Rpb24gVG9rZW5WZXN0aW5nKCkgcHVibGljCiAgeyAKICAgIC8vYWRkcmVzcyBvZiB0aGUgYmVuZWZpY2lhcnkgdG8gd2hvbSB2ZXN0ZWQgdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZAogICAgYmVuZWZpY2lhcnkgPSAweEVkYzYyNTcyMjA4QzgxOWVlNDEzYTJlMTlhMDM3QmJDM2VBMUY5Yzg7IC8vYWRkcmVzcyBvZiB0ZWFtCiAgICAvL2R1cmF0aW9uIGluIHNlY29uZHMgb2YgdGhlIHBlcmlvZCBpbiB3aGljaCB0aGUgdG9rZW5zIHdpbGwgdmVzdAogICAgZHVyYXRpb24gPSAyNCAqIDMxICogMjQgKiA2MCAqIDYwOyAKICAgIC8vZGF0ZSBvZiBzdGFydAogICAgc3RhcnQgPSAxNTIzMjc1MjAwOyAvLzA5IEFwciAyMDE4IDEyOjAwOjAwIAogICAgY2xpZmYgPSBzdGFydDsKICB9CgogIGZ1bmN0aW9uIHNldFRva2VuKGFkZHJlc3MgX2FkZHJlc3NUb2tlbikgcHVibGljIG9ubHlPd25lcnsKICAgIHJlcXVpcmUoX2FkZHJlc3NUb2tlbiAhPSBhZGRyZXNzKDApKTsgIAogICAgYWRkcmVzc1Rva2VuID0gX2FkZHJlc3NUb2tlbjsgIAogICAgdG9rZW4gPSBFUkMyMEJhc2ljKF9hZGRyZXNzVG9rZW4pOyAgCiAgfQogCiAgZnVuY3Rpb24gcmVsZWFzZSgpIHB1YmxpYyB7CiAgICB1aW50MjU2IHVucmVsZWFzZWQgPSByZWxlYXNhYmxlQW1vdW50KCk7CiAgICByZXF1aXJlKGFkZHJlc3NUb2tlbiAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUodW5yZWxlYXNlZCA+IDApOwoKICAgIHJlbGVhc2VkW3Rva2VuXSA9IHJlbGVhc2VkW3Rva2VuXS5hZGQodW5yZWxlYXNlZCk7CgogICAgdG9rZW4uc2FmZVRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB1bnJlbGVhc2VkKTsKCiAgICBlbWl0IFJlbGVhc2VkKHVucmVsZWFzZWQpOwogIH0KCgogIC8qKgogICAqIENhbGN1bGF0ZXMgdGhlIGFtb3VudCB0aGF0IGhhcyBhbHJlYWR5IHZlc3RlZCBidXQgaGFzbid0IGJlZW4gcmVsZWFzZWQgeWV0LgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2FibGVBbW91bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdmVzdGVkQW1vdW50KCkuc3ViKHJlbGVhc2VkW3Rva2VuXSk7CiAgfQoKICAvKioKICAgKiBDYWxjdWxhdGVzIHRoZSBhbW91bnQgdGhhdCBoYXMgYWxyZWFkeSB2ZXN0ZWQuCiAgICovCiAgZnVuY3Rpb24gdmVzdGVkQW1vdW50KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjdXJyZW50QmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHVpbnQyNTYgdG90YWxCYWxhbmNlID0gY3VycmVudEJhbGFuY2UuYWRkKHJlbGVhc2VkW3Rva2VuXSk7CgogICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IGNsaWZmKSB7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPj0gc3RhcnQuYWRkKGR1cmF0aW9uKSB8fCByZXZva2VkW3Rva2VuXSkgewogICAgICByZXR1cm4gdG90YWxCYWxhbmNlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRvdGFsQmFsYW5jZS5tdWwoYmxvY2sudGltZXN0YW1wLnN1YihzdGFydCkpLmRpdihkdXJhdGlvbik7CiAgICB9CiAgfQp9'.
	

]
