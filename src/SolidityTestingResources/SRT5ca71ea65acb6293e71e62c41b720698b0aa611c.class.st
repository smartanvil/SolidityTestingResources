Class {
	#name : #SRT5ca71ea65acb6293e71e62c41b720698b0aa611c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ca71ea65acb6293e71e62c41b720698b0aa611c >> base64 [
	^ ''.
	

]
