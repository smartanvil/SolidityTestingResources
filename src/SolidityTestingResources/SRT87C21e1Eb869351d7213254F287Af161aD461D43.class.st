Class {
	#name : #SRT87C21e1Eb869351d7213254F287Af161aD461D43,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87C21e1Eb869351d7213254F287Af161aD461D43 >> base64 [
	^ ''.
	

]
