Class {
	#name : #SRT88b36B3cE66E0855e9862FBe418675F30729D706,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88b36B3cE66E0855e9862FBe418675F30729D706 >> base64 [
	^ ''.
	

]
