Class {
	#name : #SRTc22e162db0b8b55486160c35064f91e418cc2221,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc22e162db0b8b55486160c35064f91e418cc2221 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKCiAqLwoKY29udHJhY3QgQmFzZVNhZmVNYXRoIHsKCgogICAgLyoKCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucwoKICAgICAqLwoKCgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBpbnRlcm5hbAoKICAgIHJldHVybnMgKHVpbnQyNTYpIHsKCiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CgogICAgICAgIGFzc2VydChjID49IGEpOwoKICAgICAgICByZXR1cm4gYzsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50MjU2KSB7CgogICAgICAgIGFzc2VydChiIDw9IGEpOwoKICAgICAgICByZXR1cm4gYSAtIGI7CgogICAgfQoKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDI1NikgewoKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKCiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKCiAgICAgICAgcmV0dXJuIGM7CgogICAgfQoKCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDI1NikgewoKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKCiAgICAgICAgcmV0dXJuIGM7CgogICAgfQoKCiAgICBmdW5jdGlvbiBtaW4odWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDI1NiB6KSB7CgogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIG1heCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50MjU2IHopIHsKCiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5OwoKICAgIH0KCgoKICAgIC8qCgogICAgdWludDEyOCBmdW5jdGlvbnMKCiAgICAgKi8KCgoKICAgIGZ1bmN0aW9uIG1hZGQodWludDEyOCBhLCB1aW50MTI4IGIpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDEyOCkgewoKICAgICAgICB1aW50MTI4IGMgPSBhICsgYjsKCiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CgogICAgICAgIHJldHVybiBjOwoKICAgIH0KCgogICAgZnVuY3Rpb24gbXN1Yih1aW50MTI4IGEsIHVpbnQxMjggYikgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50MTI4KSB7CgogICAgICAgIGFzc2VydChiIDw9IGEpOwoKICAgICAgICByZXR1cm4gYSAtIGI7CgogICAgfQoKCiAgICBmdW5jdGlvbiBtbXVsKHVpbnQxMjggYSwgdWludDEyOCBiKSBjb25zdGFudCBpbnRlcm5hbAoKICAgIHJldHVybnMgKHVpbnQxMjgpIHsKCiAgICAgICAgdWludDEyOCBjID0gYSAqIGI7CgogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CgogICAgICAgIHJldHVybiBjOwoKICAgIH0KCgogICAgZnVuY3Rpb24gbWRpdih1aW50MTI4IGEsIHVpbnQxMjggYikgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50MTI4KSB7CgogICAgICAgIHVpbnQxMjggYyA9IGEgLyBiOwoKICAgICAgICByZXR1cm4gYzsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIG1taW4odWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDEyOCB6KSB7CgogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIG1tYXgodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDEyOCB6KSB7CgogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKCiAgICB9CgoKCiAgICAvKgoKICAgIHVpbnQ2NCBmdW5jdGlvbnMKCiAgICAgKi8KCgoKICAgIGZ1bmN0aW9uIG1pYWRkKHVpbnQ2NCBhLCB1aW50NjQgYikgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50NjQpIHsKCiAgICAgICAgdWludDY0IGMgPSBhICsgYjsKCiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CgogICAgICAgIHJldHVybiBjOwoKICAgIH0KCgogICAgZnVuY3Rpb24gbWlzdWIodWludDY0IGEsIHVpbnQ2NCBiKSBjb25zdGFudCBpbnRlcm5hbAoKICAgIHJldHVybnMgKHVpbnQ2NCkgewoKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKCiAgICAgICAgcmV0dXJuIGEgLSBiOwoKICAgIH0KCgogICAgZnVuY3Rpb24gbWltdWwodWludDY0IGEsIHVpbnQ2NCBiKSBjb25zdGFudCBpbnRlcm5hbAoKICAgIHJldHVybnMgKHVpbnQ2NCkgewoKICAgICAgICB1aW50NjQgYyA9IGEgKiBiOwoKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwoKICAgICAgICByZXR1cm4gYzsKCiAgICB9CgoKICAgIGZ1bmN0aW9uIG1pZGl2KHVpbnQ2NCBhLCB1aW50NjQgYikgY29uc3RhbnQgaW50ZXJuYWwKCiAgICByZXR1cm5zICh1aW50NjQpIHsKCiAgICAgICAgdWludDY0IGMgPSBhIC8gYjsKCiAgICAgICAgcmV0dXJuIGM7CgogICAgfQoKCiAgICBmdW5jdGlvbiBtaW1pbih1aW50NjQgeCwgdWludDY0IHkpIGNvbnN0YW50IGludGVybmFsCgogICAgcmV0dXJucyAodWludDY0IHopIHsKCiAgICAgICAgcmV0dXJuIHggPD0geSA/IHggOiB5OwoKICAgIH0KCgogICAgZnVuY3Rpb24gbWltYXgodWludDY0IHgsIHVpbnQ2NCB5KSBjb25zdGFudCBpbnRlcm5hbAoKICAgIHJldHVybnMgKHVpbnQ2NCB6KSB7CgogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsKCiAgICB9CgoKfQoKCi8vIEFic3RyYWN0IGNvbnRyYWN0IGZvciB0aGUgZnVsbCBFUkMgMjAgVG9rZW4gc3RhbmRhcmQKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoKCgpjb250cmFjdCBCYXNlRVJDMjAgewoKICAgIC8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIC8vIDE4IGRlY2ltYWxzIGlzIHRoZSBzdHJvbmdseSBzdWdnZXN0ZWQgZGVmYXVsdCwgYXZvaWQgY2hhbmdpbmcgaXQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8vIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgLy8gVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgYnVybnQKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qKgogICAgICogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsOwoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwoKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcwogICAgICoKICAgICAqIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIG9uIGJlaGFsZiBvZiBgX2Zyb21gCiAgICAgKgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLyoqCiAgICAgKiBTZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzCiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBvbiB5b3VyIGJlaGFsZgogICAgICoKICAgICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBhdXRob3JpemVkIHRvIHNwZW5kCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgbm90aWZ5CiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICogQHBhcmFtIF9leHRyYURhdGEgc29tZSBleHRyYSBpbmZvcm1hdGlvbiB0byBzZW5kIHRvIHRoZSBhcHByb3ZlZCBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLyoqCiAgICAgKiBEZXN0cm95IHRva2VucwogICAgICoKICAgICAqIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseQogICAgICoKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCBvZiBtb25leSB0byBidXJuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8qKgogICAgICogRGVzdHJveSB0b2tlbnMgZnJvbSBvdGhlciBhY2NvdW50CiAgICAgKgogICAgICogUmVtb3ZlIGBfdmFsdWVgIHRva2VucyBmcm9tIHRoZSBzeXN0ZW0gaXJyZXZlcnNpYmx5IG9uIGJlaGFsZiBvZiBgX2Zyb21gLgogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSB0aGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgbW9uZXkgdG8gYnVybgogICAgICovCiAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cgp9CgoKLyoqCgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KCiAqCgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCgogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCgogKi8KCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7ZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljO30KCmNvbnRyYWN0IExvY2tVdGlscyB7CgogICAgYWRkcmVzcyBkZXZlbG9wZXIgPSAweDA7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsvLyDnsr7luqbkuLoxOAogICAgdWludDI1NiBwdWJsaWMgY3JlYXRlVGltZSA9IG5vdzsvLyDliJvlu7rml7bpl7QKCiAgICBmdW5jdGlvbiBMb2NrVXRpbHMoYWRkcmVzcyBkZXZlbG9wKSBwdWJsaWMgewogICAgICAgIGRldmVsb3BlciA9IGRldmVsb3A7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TG9ja1dGZWUoKSBwdWJsaWMgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICBpZiAobm93IDwgY3JlYXRlVGltZSArIDMwIG1pbnV0ZXMpIHsKICAgICAgICAgICAgcmV0dXJuIDE0MDAwMDAwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICB9IGVsc2UgaWYgKG5vdyA8IGNyZWF0ZVRpbWUgKyAyIHllYXJzKSB7CiAgICAgICAgICAgIHJldHVybiAxNTAwMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPCBjcmVhdGVUaW1lICsgMiB5ZWFycyArIDYgKiAzMCBkYXlzKSB7CiAgICAgICAgICAgIHJldHVybiAxMTI1MDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPCBjcmVhdGVUaW1lICsgMyB5ZWFycykgewogICAgICAgICAgICByZXR1cm4gNzUwMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPCBjcmVhdGVUaW1lICsgMyB5ZWFycyArIDYgKiAzMCBkYXlzKSB7CiAgICAgICAgICAgIHJldHVybiAzNzUwMDAwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICB9Cgp9Cgpjb250cmFjdCBXRmVlIGlzIEJhc2VFUkMyMCwgQmFzZVNhZmVNYXRoIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJXRmVlIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIldGRUUiOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7Ly8g57K+5bqm5Li6MTgKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Oy8vIDEwMOS6vyDmnoTpgKDmlrnms5XliJ3lp4vljJYKICAgIExvY2tVdGlscyBsb2NrVXRpbHM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBXRmVlKCkgcHVibGljIHsKICAgICAgICBsb2NrVXRpbHMgPSBMb2NrVXRpbHMobXNnLnNlbmRlcik7CiAgICAgICAgdG90YWxTdXBwbHkgPSAxMDAwMDAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OwogICAgICAgIC8vICAgICAgICAvLyAzMCUg5Z+655+z5ZKM56eB5YufCiAgICAgICAgLy8gICAgICAgIHRyYW5zZmVyKDB4MDliZGUzMjE2MDZmYjBkNzM1ZTA1ZjRmNWJjNDY4MzQ2MGE5YWE2MSwgMzAwMDAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKICAgICAgICAvLyAgICAgICAgLy8gMzUlIOeUn+aAgea/gOWKsQogICAgICAgIC8vICAgICAgICB0cmFuc2ZlcigweDA5YmRlMzIxNjA2ZmIwZDczNWUwNWY0ZjViYzQ2ODM0NjBhOWFhNjIsIDM1MDAwMDAwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7CiAgICAgICAgLy8gICAgICAgIC8vIDEwJSDln7rnoYDorr7mlr3lu7rorr4KICAgICAgICAvLyAgICAgICAgdHJhbnNmZXIoMHgwOWJkZTMyMTYwNmZiMGQ3MzVlMDVmNGY1YmM0NjgzNDYwYTlhYTYzLCAxMDAwMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscykpOwogICAgICAgIC8vICAgICAgICAvLyAxMCUg5Z+66YeR5Lya55qE5Y+R5bGV5aSH55So6YeRCiAgICAgICAgLy8gICAgICAgIHRyYW5zZmVyKDB4MDliZGUzMjE2MDZmYjBkNzM1ZTA1ZjRmNWJjNDY4MzQ2MGE5YWE2NCwgMTAwMDAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKICAgICAgICAvLyAgICAgICAgLy8g5Ymp5L2Z55qEIDE1JSDliJvlp4vlm6LpmJ/lpZblirHliIblj5EKICAgIH0KCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICAvLyDovazotKblv4XnlLHkuYvot6/vvIzplIHlrprnmoTpkrHkuI3lj6/liqgKICAgICAgICByZXF1aXJlKChiYWxhbmNlT2ZbX2Zyb21dIC0gbG9ja1V0aWxzLmdldExvY2tXRmVlKCkpID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gU2F2ZSB0aGlzIGZvciBhbiBhc3NlcnRpb24gaW4gdGhlIGZ1dHVyZQogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXTsKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgcHVibGljCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsKICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm5Gcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRhcmdldGVkIGJhbGFuY2UgaXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgdGFyZ2V0ZWQgYmFsYW5jZQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcidzIGFsbG93YW5jZQogICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsKICAgICAgICAvLyBVcGRhdGUgdG90YWxTdXBwbHkKICAgICAgICBCdXJuKF9mcm9tLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQ=='.
	

]
