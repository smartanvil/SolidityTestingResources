Class {
	#name : #SRT950e255c4362c7d7824c63911331ba0c3b090a52,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT950e255c4362c7d7824c63911331ba0c3b090a52 >> base64 [
	^ ''.
	

]
