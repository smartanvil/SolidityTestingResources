Class {
	#name : #SRTdd1bd98403f24a6dff1c948cfdec509bfc244fc8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd1bd98403f24a6dff1c948cfdec509bfc244fc8 >> base64 [
	^ ''.
	

]
