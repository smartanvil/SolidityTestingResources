Class {
	#name : #SRTfeae95fd8555d22abed64640c21820b50022aed5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfeae95fd8555d22abed64640c21820b50022aed5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgppbnRlcmZhY2UgVG9rZW4gewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2KTsKICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gc3RhcnRUcmFkaW5nKCkgZXh0ZXJuYWw7Cn0KCmNvbnRyYWN0IE93bmVkIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCmludGVyZmFjZSBBcXVhUHJpY2VPcmFjbGUgewogIGZ1bmN0aW9uIGdldEF1ZENlbnRXZWlQcmljZSgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGdldEFxdWFUb2tlbkF1ZENlbnRzUHJpY2UoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBldmVudCBOZXdQcmljZSh1aW50IF9hdWRDZW50V2VpUHJpY2UsIHVpbnQgX2FxdWFUb2tlbkF1ZENlbnRzUHJpY2UpOwp9CgoKLy8vQHRpdGxlIEFxdWEgU2FsZSBTbWFydCBjb250cmFjdApjb250cmFjdCBBcXVhU2FsZSBpcyBPd25lZCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgdWludDI1NiBjb25zdGFudCBPTkVfSFVORFJFRCA9IDEwMDsKCiAgICAvL0ludGVybmFsIHN0YXRlCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIGludGVybmFsIGJ1eWVyQmFsYW5jZXM7CiAgICAKICAgIC8vUHVibGljIGludGVyZmFjZQogICAgCiAgICAvLy9UZWFtIHRydXN0IGFjY291bnQgYWRkcmVzcwogICAgYWRkcmVzcyBwdWJsaWMgdGVhbVRydXN0QWNjb3VudDsKICAgIAogICAgLy8vVGVhbSBzaGFyZSBvZiB0b3RhbCB0b2tlbiBzdXBwbHkgYWZ0ZXIgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIHRoZSAKICAgIC8vL2Nyb3dkc2FsZSBleHByZXNzZWQgYXMgd2hvbGUgcGVyY2VudGFnZSBudW1iZXIgKDAtMTAwKQogICAgdWludCBwdWJsaWMgdGVhbVNoYXJlUGVyY2VudDsKICAgIAogICAgLy8vTG93IGZ1bmRpbmcgZ29hbCAoU29mdCBDYXApIGluIG51bWJlciBvZiB0b2tlbnMKICAgIHVpbnQgcHVibGljIGxvd1Rva2Vuc1RvU2VsbEdvYWw7CiAgICAKICAgIC8vL0hpZ2ggZnVuZGluZyBnb2FsIChIYXJkIENhcCkgaW4gbnVtYmVyIG9mIHRva2VucwogICAgdWludCBwdWJsaWMgaGlnaFRva2Vuc1RvU2VsbEdvYWw7CiAgICAKICAgIC8vL051bWJlciBvZiB0b2tlbnMgc29sZAogICAgdWludCBwdWJsaWMgc29sZFRva2VuczsKICAgIAogICAgLy8vQ3Jvd2RzYWxlIHN0YXJ0IHRpbWUgKGluIHNlY29uZHMgc2luY2UgdW5peCBlcG9jaCkKICAgIHVpbnQgcHVibGljIHN0YXJ0VGltZTsKICAgIAogICAgLy8vQ3Jvd2RzYWxlIGVuZCB0aW1lIChpbiBzZWNvbmRzIHNpbmNlIHVuaXggZXBvY2gpCiAgICB1aW50IHB1YmxpYyBkZWFkbGluZTsKCiAgICAvLy9BZGRyZXNzIG9mIEFxdWEgVG9rZW4gdXNlZCBhcyBhIHJld2FyZCBmb3IgRXRoZXIgY29udHJpYnV0aW9ucwogICAgVG9rZW4gcHVibGljIHRva2VuUmV3YXJkOwogICAgCiAgICAvLy9BcXVhIFRva2VuIHByaWNlIG9yYWNsZSBjb250cmFjdCBhZGRyZXNzCiAgICBBcXVhUHJpY2VPcmFjbGUgcHVibGljIHRva2VuUHJpY2VPcmFjbGU7CiAgICAKCiAgICAvLy9JbmRpY2F0ZXMgaWYgZnVuZGluZyBnb2FsIGlzIHJlYWNoZWQgKGNyb3dkc2FsZSBpcyBzdWNjZXNzZnVsKQogICAgYm9vbCBwdWJsaWMgZnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7CiAgICAKICAgIC8vL0luZGljYXRlcyBpZiBoaWdoIGZ1bmRpbmcgZ29hbCAoSGFyZCBDYXApIGlzIHJlYWNoZWQuCiAgICBib29sIHB1YmxpYyBoaWdoRnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7CgogICAgLy8vRXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gZnVuZGluZyBnb2FsIGlzIHJlYWNoZWQKICAgIC8vL0BwYXJhbSBhbW50UmFpc2VkV2VpIEFtb3VudCByYWlzZWQgaW4gV2VpCiAgICAvLy9AcGFyYW0gaXNIaWdoZXJHb2FsIFRydWUgaWYgSGFyZCBDYXAgaXMgcmVhY2hlZC4gRmFsc2UgaWYgU29mdCBDYXAgaXMgcmVhY2hlZAogICAgZXZlbnQgR29hbFJlYWNoZWQodWludCBhbW50UmFpc2VkV2VpLCBib29sIGlzSGlnaGVyR29hbCk7CiAgICAKICAgIC8vL0V2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIGNyb3dkc2FsZSBjb250cmFjdCBwcm9jZXNzZXMgZnVuZHMgdHJhbnNmZXIKICAgIC8vLyhjb250cmlidXRpb24gb3Igd2l0aGRyYXdhbCkKICAgIC8vL0BwYXJhbSBiYWNrZXIgQWNjb3VudCBhZGRyZXNzIHRoYXQgc2VuZHMgKGluIGNhc2Ugb2YgY29udHJpYnV0aW9uKSBvciByZWNlaXZlcyAoaW4gY2FzZSBvZiByZWZ1bmQgb3Igd2l0aGRyYXdhbCkgZnVuZHMKICAgIC8vL0BwYXJhbSBpc0NvbnRyaWJ1dGlvbiBUcnVlIGluIGNhc2UgZnVuZHMgdHJhbnNmZXIgaXMgYSBjb250cmlidXRpb24uIEZhbHNlIGluIGNhc2UgZnVuZHMgdHJhbnNmZXIgaXMgYSByZWZ1bmQgb3IgYSB3aXRoZHJhd2FsLgogICAgZXZlbnQgRnVuZHNUcmFuc2ZlcihhZGRyZXNzIGJhY2tlciwgdWludCBhbW91bnQsIGJvb2wgaXNDb250cmlidXRpb24pOwoKICAgIC8vL0NvbnN0cnVjdG9yIGluaXRpYWxpemVzIEFxdWEgU2FsZSBjb250cmFjdAogICAgLy8vQHBhcmFtIGlmU3VjY2Vzc2Z1bFNlbmRUbyBCZW5lZmljaWFyeSBhZGRyZXNzIOKAkyBhY2NvdW50IGFkZHJlc3MgdGhhdCBjYW4gd2l0aGRyYXcgcmFpc2VkIGZ1bmRzIGluIGNhc2UgY3Jvd2RzYWxlIHN1Y2NlZWRzCiAgICAvLy9AcGFyYW0gX2xvd1Rva2Vuc1RvU2VsbEdvYWwgTG93IGZ1bmRpbmcgZ29hbCAoU29mdCBDYXApIGFzIG51bWJlciBvZiB0b2tlbnMgdG8gc2VsbAogICAgLy8vQHBhcmFtIF9oaWdoVG9rZW5zVG9TZWxsR29hbCBIaWdoIGZ1bmRpbmcgZ29hbCAoSGFyZCBDYXApIGFzIG51bWJlciBvZiB0b2tlbnMgdG8gc2VsbAogICAgLy8vQHBhcmFtIHN0YXJ0QWZ0ZXJNaW51dGVzIENyb3dkc2FsZSBzdGFydCB0aW1lIGFzIHRoZSBudW1iZXIgb2YgbWludXRlcyBzaW5jZSBjb250cmFjdCBkZXBsb3ltZW50IHRpbWUKICAgIC8vL0BwYXJhbSBkdXJhdGlvbkluTWludXRlcyBEdXJhdGlvbiBvZiB0aGUgY3Jvd2RzYWxlIGluIG1pbnV0ZXMKICAgIC8vL0BwYXJhbSBhZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCBBcXVhIFRva2VuIHNtYXJ0IGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vL0BwYXJhbSBhZGRyZXNzT2ZUb2tlblByaWNlT3JhY2xlIEFxdWEgUHJpY2Ugb3JhY2xlIHNtYXJ0IGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vL0BwYXJhbSBhZGRyZXNzT2ZUZWFtVHJ1c0FjY291bnQgQWNjb3VudCBhZGRyZXNzIHRoYXQgcmVjZWl2ZXMgdGVhbSBzaGFyZSBvZiB0b2tlbnMgdXBvbiBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgY3Jvd2RzYWxlCiAgICAvLy9AcGFyYW0gX3RlYW1TaGFyZVBlcmNlbnQgVGVhbSBzaGFyZSBvZiB0b3RhbCB0b2tlbiBzdXBwbHkgYWZ0ZXIgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIHRoZSBjcm93ZHNhbGUgZXhwcmVzc2VkIGFzIHdob2xlIHBlcmNlbnRhZ2UgbnVtYmVyICgwLTEwMCkKICAgIGZ1bmN0aW9uIEFxdWFTYWxlKAogICAgICAgIGFkZHJlc3MgaWZTdWNjZXNzZnVsU2VuZFRvLAogICAgICAgIHVpbnQgX2xvd1Rva2Vuc1RvU2VsbEdvYWwsCiAgICAgICAgdWludCBfaGlnaFRva2Vuc1RvU2VsbEdvYWwsCiAgICAgICAgdWludCBzdGFydEFmdGVyTWludXRlcywKICAgICAgICB1aW50IGR1cmF0aW9uSW5NaW51dGVzLAogICAgICAgIGFkZHJlc3MgYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQsCiAgICAgICAgYWRkcmVzcyBhZGRyZXNzT2ZUb2tlblByaWNlT3JhY2xlLAogICAgICAgIGFkZHJlc3MgYWRkcmVzc09mVGVhbVRydXNBY2NvdW50LAogICAgICAgIHVpbnQgX3RlYW1TaGFyZVBlcmNlbnQKICAgICkgcHVibGljIHsKICAgICAgICBvd25lciA9IGlmU3VjY2Vzc2Z1bFNlbmRUbzsKICAgICAgICBsb3dUb2tlbnNUb1NlbGxHb2FsID0gX2xvd1Rva2Vuc1RvU2VsbEdvYWw7CiAgICAgICAgaGlnaFRva2Vuc1RvU2VsbEdvYWwgPSBfaGlnaFRva2Vuc1RvU2VsbEdvYWw7CiAgICAgICAgc3RhcnRUaW1lID0gbm93LmFkZChzdGFydEFmdGVyTWludXRlcy5tdWwoMSBtaW51dGVzKSk7CiAgICAgICAgZGVhZGxpbmUgPSBzdGFydFRpbWUuYWRkKGR1cmF0aW9uSW5NaW51dGVzLm11bCgxIG1pbnV0ZXMpKTsKICAgICAgICB0b2tlblJld2FyZCA9IFRva2VuKGFkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkKTsKICAgICAgICB0b2tlblByaWNlT3JhY2xlID0gQXF1YVByaWNlT3JhY2xlKGFkZHJlc3NPZlRva2VuUHJpY2VPcmFjbGUpOwogICAgICAgIHRlYW1UcnVzdEFjY291bnQgPSBhZGRyZXNzT2ZUZWFtVHJ1c0FjY291bnQ7CiAgICAgICAgdGVhbVNoYXJlUGVyY2VudCA9IF90ZWFtU2hhcmVQZXJjZW50OwogICAgfQogICAgCiAgICAvLy9SZXR1cm5zIGJhbGFuY2Ugb2YgdGhlIGJ1eWVyCiAgICAvLy9AcGFyYW0gX2J1eWVyIGFkZHJlc3Mgb2YgY3Jvd2RzYWxlIHBhcnRpY2lwYW50CiAgICAvLy9AcmV0dXJuIEJ1eWVyIGJhbGFuY2UgaW4gd2VpCiAgICBmdW5jdGlvbiBidXllckJhbGFuY2UoYWRkcmVzcyBfYnV5ZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gYnV5ZXJCYWxhbmNlc1tfYnV5ZXJdOwogICAgfQoKICAgIC8vL0ZhbGxiYWNrIGZ1bmN0aW9uIGV4cGVjdHMgdGhhdCB0aGUgc2VudCBhbW91bnQgaXMgcGF5bWVudCBmb3IgdG9rZW5zCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcHVyY2hhc2VUb2tlbnMoKTsKICAgIH0KICAgIAogICAgLy8vZnVuY3Rpb24gYWNjZXB0cyBFdGhlciBhbmQgYWxsb2NhdGVzIEFxdWEgVG9rZW5zIHRvIHRoZSBzZW5kZXIKICAgIGZ1bmN0aW9uIHB1cmNoYXNlVG9rZW5zKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoIWhpZ2hGdW5kaW5nR29hbFJlYWNoZWQgJiYgbm93ID49IHN0YXJ0VGltZSApOwogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQgbm9Ub2tlbnMgPSBhbW91bnQuZGl2KAogICAgICAgICAgICB0b2tlblByaWNlT3JhY2xlLmdldEFxdWFUb2tlbkF1ZENlbnRzUHJpY2UoKS5tdWwodG9rZW5QcmljZU9yYWNsZS5nZXRBdWRDZW50V2VpUHJpY2UoKSkKICAgICAgICAgICAgKTsKICAgICAgICBidXllckJhbGFuY2VzW21zZy5zZW5kZXJdID0gYnV5ZXJCYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQoYW1vdW50KTsKICAgICAgICBzb2xkVG9rZW5zID0gc29sZFRva2Vucy5hZGQobm9Ub2tlbnMpOwogICAgICAgIGNoZWNrR29hbHNSZWFjaGVkKCk7CgogICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKG1zZy5zZW5kZXIsIG5vVG9rZW5zKTsKCiAgICAgICAgRnVuZHNUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIHRydWUpOwogICAgfQogICAgCiAgICAvLy9JbnZlc3RvcnMgc2hvdWxkIGNhbGwgdGhpcyBmdW5jdGlvbiBpbiBvcmRlciB0byByZWNlaXZlIHJlZnVuZCBpbiAKICAgIC8vL2Nhc2UgY3Jvd2RzYWxlIGlzIG5vdCBzdWNjZXNzZnVsLgogICAgLy8vVGhlIHNlbmRpbmcgYWRkcmVzcyBzaG91bGQgYmUgdGhlIHNhbWUgYWRkcmVzcyB0aGF0IHdhcyB1c2VkIHRvCiAgICAvLy9wYXJ0aWNpcGF0ZSBpbiBjcm93ZHNhbGUuIFRoZSBhbW91bnQgd2lsbCBiZSByZWZ1bmRlZCB0byB0aGlzIGFkZHJlc3MKICAgIGZ1bmN0aW9uIHJlZnVuZCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSghZnVuZGluZ0dvYWxSZWFjaGVkICYmIGJ1eWVyQmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAwCiAgICAgICAgICAgICAgICAmJiBub3cgPj0gZGVhZGxpbmUpOwogICAgICAgIHVpbnQgYW1vdW50ID0gYnV5ZXJCYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICBidXllckJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgRnVuZHNUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGZhbHNlKTsKICAgIH0KCiAgICAvLy9pQXF1YSBhdXRob3JpemVkIHN0dGFmZiB3aWxsIGNhbGwgdGhpcyBmdW5jdGlvbiB0byB3aXRoZHJhdyBjb250cmlidXRlZCAKICAgIC8vL2Ftb3VudCAob25seSBpbiBjYXNlIGNyb3dkc2FsZSBpcyBzdWNjZXNzZnVsKQogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKCAoZnVuZGluZ0dvYWxSZWFjaGVkICYmIG5vdyA+PSBkZWFkbGluZSkgfHwgaGlnaEZ1bmRpbmdHb2FsUmVhY2hlZCApOwogICAgICAgIHVpbnQgcmFpc2VkRnVuZHMgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgdWludCB0ZWFtVG9rZW5zID0gc29sZFRva2Vucy5tdWwodGVhbVNoYXJlUGVyY2VudCkuZGl2KE9ORV9IVU5EUkVELnN1Yih0ZWFtU2hhcmVQZXJjZW50KSk7CiAgICAgICAgdWludCB0b3RhbFRva2VucyA9IHRva2VuUmV3YXJkLnRvdGFsU3VwcGx5KCk7CiAgICAgICAgaWYgKHRvdGFsVG9rZW5zIDwgdGVhbVRva2Vucy5hZGQoc29sZFRva2VucykpIHsKICAgICAgICAgICAgdGVhbVRva2VucyA9IHRvdGFsVG9rZW5zLnN1Yihzb2xkVG9rZW5zKTsKICAgICAgICB9CiAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXIodGVhbVRydXN0QWNjb3VudCwgdGVhbVRva2Vucyk7CiAgICAgICAgdWludCBkaXN0cmlidXRlZFRva2VucyA9IHRlYW1Ub2tlbnMuYWRkKHNvbGRUb2tlbnMpOwogICAgICAgIGlmICh0b3RhbFRva2VucyA+IGRpc3RyaWJ1dGVkVG9rZW5zKSB7CiAgICAgICAgICAgIHRva2VuUmV3YXJkLmJ1cm4odG90YWxUb2tlbnMuc3ViKGRpc3RyaWJ1dGVkVG9rZW5zKSk7CiAgICAgICAgfQogICAgICAgIHRva2VuUmV3YXJkLnN0YXJ0VHJhZGluZygpOwogICAgICAgIE93bmVkKGFkZHJlc3ModG9rZW5SZXdhcmQpKS50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgICAgICAgb3duZXIudHJhbnNmZXIocmFpc2VkRnVuZHMpOwogICAgICAgIEZ1bmRzVHJhbnNmZXIob3duZXIsIHJhaXNlZEZ1bmRzLCBmYWxzZSk7CiAgICB9CiAgICAKICAgIC8vSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAKICAgIGZ1bmN0aW9uIGNoZWNrR29hbHNSZWFjaGVkKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChmdW5kaW5nR29hbFJlYWNoZWQpIHsKICAgICAgICAgICAgaWYgKGhpZ2hGdW5kaW5nR29hbFJlYWNoZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc29sZFRva2VucyA+PSBoaWdoVG9rZW5zVG9TZWxsR29hbCkgewogICAgICAgICAgICAgICAgaGlnaEZ1bmRpbmdHb2FsUmVhY2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBHb2FsUmVhY2hlZCh0aGlzLmJhbGFuY2UsIHRydWUpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoc29sZFRva2VucyA+PSBsb3dUb2tlbnNUb1NlbGxHb2FsKSB7CiAgICAgICAgICAgICAgICBmdW5kaW5nR29hbFJlYWNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgR29hbFJlYWNoZWQodGhpcy5iYWxhbmNlLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNvbGRUb2tlbnMgPj0gaGlnaFRva2Vuc1RvU2VsbEdvYWwpIHsKICAgICAgICAgICAgICAgIGhpZ2hGdW5kaW5nR29hbFJlYWNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgR29hbFJlYWNoZWQodGhpcy5iYWxhbmNlLCB0cnVlKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAp9'.
	

]
