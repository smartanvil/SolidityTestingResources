Class {
	#name : #SRT162774441fb7f8a1bde335dc7f5accd51aac0d91,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT162774441fb7f8a1bde335dc7f5accd51aac0d91 >> base64 [
	^ ''.
	

]
