Class {
	#name : #SRTc83355ef25a104938275b46cffd94bf9917d0691,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc83355ef25a104938275b46cffd94bf9917d0691 >> base64 [
	^ ''.
	

]
