Class {
	#name : #SRT5a2a454675c1b659caa58b5675ee759b992b84b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a2a454675c1b659caa58b5675ee759b992b84b1 >> base64 [
	^ ''.
	

]
