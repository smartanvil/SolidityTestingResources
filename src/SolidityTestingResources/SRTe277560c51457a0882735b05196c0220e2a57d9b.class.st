Class {
	#name : #SRTe277560c51457a0882735b05196c0220e2a57d9b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe277560c51457a0882735b05196c0220e2a57d9b >> base64 [
	^ ''.
	

]
