Class {
	#name : #SRT7f57292bf494a8c9342d37395d1378a65d59c499,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f57292bf494a8c9342d37395d1378a65d59c499 >> base64 [
	^ ''.
	

]
