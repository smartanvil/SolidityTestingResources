Class {
	#name : #SRT2d4b1cc9a2d7417a9689bbcfefb224876cda7923,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2d4b1cc9a2d7417a9689bbcfefb224876cda7923 >> base64 [
	^ ''.
	

]
