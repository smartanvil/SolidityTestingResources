Class {
	#name : #SRTa899495d47b6a575c830ffc330bc83318df46a44,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa899495d47b6a575c830ffc330bc83318df46a44 >> base64 [
	^ ''.
	

]
