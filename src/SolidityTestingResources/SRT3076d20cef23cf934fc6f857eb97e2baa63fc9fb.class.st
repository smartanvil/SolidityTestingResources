Class {
	#name : #SRT3076d20cef23cf934fc6f857eb97e2baa63fc9fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3076d20cef23cf934fc6f857eb97e2baa63fc9fb >> base64 [
	^ ''.
	

]
