Class {
	#name : #SRTcba46f2c1d9b3f3b1d2b7f9660af7d48984e4e46,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcba46f2c1d9b3f3b1d2b7f9660af7d48984e4e46 >> base64 [
	^ ''.
	

]
