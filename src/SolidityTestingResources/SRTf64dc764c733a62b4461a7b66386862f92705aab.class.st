Class {
	#name : #SRTf64dc764c733a62b4461a7b66386862f92705aab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf64dc764c733a62b4461a7b66386862f92705aab >> base64 [
	^ ''.
	

]
