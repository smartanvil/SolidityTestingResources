Class {
	#name : #SRT068a37f2b086f1909a65c195fa084006acd6a79f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT068a37f2b086f1909a65c195fa084006acd6a79f >> base64 [
	^ ''.
	

]
