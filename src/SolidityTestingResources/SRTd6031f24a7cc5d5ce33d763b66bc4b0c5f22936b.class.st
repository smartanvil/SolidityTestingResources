Class {
	#name : #SRTd6031f24a7cc5d5ce33d763b66bc4b0c5f22936b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6031f24a7cc5d5ce33d763b66bc4b0c5f22936b >> base64 [
	^ ''.
	

]
