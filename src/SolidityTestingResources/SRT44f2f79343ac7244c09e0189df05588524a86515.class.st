Class {
	#name : #SRT44f2f79343ac7244c09e0189df05588524a86515,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT44f2f79343ac7244c09e0189df05588524a86515 >> base64 [
	^ ''.
	

]
