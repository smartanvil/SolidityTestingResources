Class {
	#name : #SRT707bd951c676c5f7a957df363d6ce1b2af4b636d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT707bd951c676c5f7a957df363d6ce1b2af4b636d >> base64 [
	^ ''.
	

]
