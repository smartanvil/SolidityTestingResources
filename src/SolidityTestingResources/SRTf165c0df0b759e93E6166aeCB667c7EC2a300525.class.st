Class {
	#name : #SRTf165c0df0b759e93E6166aeCB667c7EC2a300525,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf165c0df0b759e93E6166aeCB667c7EC2a300525 >> base64 [
	^ ''.
	

]
