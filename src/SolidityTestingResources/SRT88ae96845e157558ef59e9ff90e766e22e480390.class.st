Class {
	#name : #SRT88ae96845e157558ef59e9ff90e766e22e480390,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88ae96845e157558ef59e9ff90e766e22e480390 >> base64 [
	^ 'Ly8gICAgICBJS0IgVE9LRU4KLy8gICAgICBCeSBNaXRjaGVsbCBGLiBDaGFuCgoKLyoKT1ZFUlZJRVc6CiAgICBUaGlzIGNvbnRyYWN0IG1hbmFnZXMgdGhlIHB1cmNoYXNlIGFuZCB0cmFuc2ZlcnJhbCBvZiBEaWdpdGFsIFpvbmVzIG9mIEltbWF0ZXJpYWwgUGljdG9yaWFsIFNlbnNpYmlsaXR5LgogICAgSXQgcmVwcm9kdWNlcyB0aGUgcnVsZXMgb3JpZ2luYWxseSBjcmVhdGVkIGJ5IFl2ZXMgS2xlaW4gd2hpY2ggZ292ZXJuZWQgdGhlIHRyYW5zZmVycmFsIG9mIGhpcyBvcmlnaW5hbCBab25lcyBvZiBJbW1hdGVyaWFsIFBpY3RvcmlhbCBTZW5zaWJpbGl0eS4KCiAgICBUaGUgcHJvamVjdCBpcyBkZXNjcmliZWQgaW4gZnVsbCBpbiB0aGUgQmx1ZSBQYXBlciBpbmNsdWRlZCBpbiB0aGlzIHJlcG9zaXRvcnkuCiovCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xNTsKCi8vIGludGVyZmFjZSBmb3IgRVJDMjAgc3RhbmRhcmQgdG9rZW4KY29udHJhY3QgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGN1cnJlbnRTdXBwbHkpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgovLyAgdG9rZW4gYm9pbGVycGxhdGUKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKLy8gbGlicmFyeSBmb3IgbWF0aCB0byBwcmV2ZW50IHVuZGVyZmxvd3MgYW5kIG92ZXJmbG93cwpjb250cmFjdCBTYWZlTWF0aCB7CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICsgeTsKICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogIH0KCiAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApIHx8ICh6IC8geCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogIH0KfQoKY29udHJhY3QgS2xlaW4gaXMgRVJDMjAsIG93bmVkLCBTYWZlTWF0aCB7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAodWludDI1NiA9PiBib29sKSkpIHNwZWNpZmljQWxsb3dlZDsKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBTd2FybSBhZGRyZXNzIG9mIHRoZSBhcnR3b3JrIGlzIHNhdmVkIGhlcmUgZm9yIHJlZmVyZW5jZSBhbmQgcG9zdGVyaXR5CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHpvbmVzU3dhcm1BZGRyZXNzID0gIjBhNTJmMjY1ZDhkNjBhODlkZTQxYTY1MDY5ZmE0NzJhYzNiMTMwYzI2OWI0Nzg4ODExMjIwYjY1NDY3ODQ5MjAiOwogICAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgdGhlUml2ZXIgPSAweDhhREU5YkNkQTg0Nzg1MkRFNzBiYWRBNjlCQmM5MzU4QzFjN0I3NDc7ICAgICAgICAgICAgICAgICAgICAgIC8vIFJPUFNURU4gUkVWSVZBTCBhZGRyZXNzCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRGlnaXRhbCBab25lIG9mIEltbWF0ZXJpYWwgUGljdG9yaWFsIFNlbnNpYmlsaXR5IjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIklLQiI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyBtYXhTdXBwbHlQb3NzaWJsZTsKICAgIHVpbnQyNTYgcHVibGljIGluaXRpYWxQcmljZSA9IDEwKioxNzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGQgZXF1YWwgMC4xIEVUSAogICAgdWludDI1NiBwdWJsaWMgY3VycmVudFNlcmllczsgICAgCiAgICB1aW50MjU2IHB1YmxpYyBpc3N1ZWRUb0RhdGU7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFNvbGQ7CiAgICB1aW50MjU2IHB1YmxpYyBidXJuZWRUb0RhdGU7CiAgICBib29sIGZpcnN0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJS0IgYXJlIGlzc3VlZCBpbiB0cmFuY2hlcywgb3Igc2VyaWVzIG9mIGVkaXRpb25zLiBUaGVyZSB3aWxsIGJlIDggdG90YWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIElCS1NlcmllcyByZXByZXNlbnRzIG9uZSBvZiBLbGVpbidzIHJlY2VpcHQgYm9va3MsIG9yIGEgc2VyaWVzIG9mIGlzc3VlZCB0b2tlbnMuCiAgICBzdHJ1Y3QgSUtCU2VyaWVzIHsKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgICAgIHVpbnQyNTYgc2VyaWVzU3VwcGx5OwogICAgfQoKICAgIElLQlNlcmllc1s4XSBwdWJsaWMgc2VyaWVzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbiBhcnJheSBvZiBhbGwgOCBzZXJpZXMKCiAgICBzdHJ1Y3QgcmVjb3JkIHsKICAgICAgICBhZGRyZXNzIGFkZHI7CiAgICAgICAgdWludDI1NiBwcmljZTsKICAgICAgICBib29sIGJ1cm5lZDsKICAgIH0KCiAgICByZWNvcmRbMTAxXSBwdWJsaWMgcmVjb3JkczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW4gYXJyYXkgb2YgYWxsIDEwMSByZWNvcmRzCiAgICAKICAgIGV2ZW50IFVwZGF0ZVJlY29yZCh1aW50IGluZGV4ZWQgSUtCZWRpdGlvbiwgYWRkcmVzcyBob2xkZXJBZGRyZXNzLCB1aW50MjU2IHByaWNlLCBib29sIGJ1cm5lZCk7CiAgICBldmVudCBTZXJpZXNDcmVhdGVkKHVpbnQgaW5kZXhlZCBzZXJpZXNOdW0pOwogICAgZXZlbnQgU3BlY2lmaWNBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IGluZGV4ZWQgZWRpdGlvbik7CiAgICAKICAgIGZ1bmN0aW9uIEtsZWluKCkgewogICAgICAgIGN1cnJlbnRTZXJpZXMgPSAwOwogICAgICAgIHNlcmllc1swXSA9IElLQlNlcmllcyhpbml0aWFsUHJpY2UsIDMxKTsgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBzZXJpZXMgaGFzIHVuaXF1ZSB2YWx1ZXMuLi4KICAgIAogICAgICAgIGZvcih1aW50MjU2IGkgPSAxOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKXsgICAgICAgICAgICAgICAgICAgIC8vIC4uLndoaWxlIHRoZSBuZXh0IDcgY2FuIGJlIGRlZmluZWQgaW4gYSBmb3IgbG9vcAogICAgICAgICAgICBzZXJpZXNbaV0gPSBJS0JTZXJpZXMoc2VyaWVzW2ktMV0ucHJpY2UqMiwgMTApOwogICAgICAgIH0gICAgIAogICAgICAgIAogICAgICAgIG1heFN1cHBseVBvc3NpYmxlID0gMTAxOwogICAgfQogICAgCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIGJ1eSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNwZWNpZmljQXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9lZGl0aW9uKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBzcGVjaWZpY0FsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdW19lZGl0aW9uXSA9IHRydWU7CiAgICAgICAgU3BlY2lmaWNBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2VkaXRpb24pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8gTkVXOiBJIHRob3VnaHQgaXQgd2FzIG1vcmUgaW4ga2VlcGluZyB3aXRoIHdoYXQgdG90YWxTdXBwbHkoKSBpcyBzdXBwb3NlZCB0byBiZSBhYm91dCB0byByZXR1cm4gaG93IG1hbnkgdG9rZW5zIGFyZSBjdXJyZW50bHkgaW4gY2lyY3VsYXRpb24KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBfY3VycmVudFN1cHBseSkgewogICAgICByZXR1cm4gKGlzc3VlZFRvRGF0ZSAtIGJ1cm5lZFRvRGF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNzdWVOZXdTZXJpZXMoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW3RoaXNdIDw9IDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NhbiBvbmx5IGlzc3VlIGEgbmV3IHNlcmllcyBpZiB5b3UndmUgc29sZCBhbGwgdGhlIG9sZCBvbmVzCiAgICAgICAgcmVxdWlyZShjdXJyZW50U2VyaWVzIDwgNyk7CiAgICAgICAgCiAgICAgICAgaWYoIWZpcnN0KXsKICAgICAgICAgICAgY3VycmVudFNlcmllcysrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgdGltZSB3ZSBydW4gdGhpcyBmdW5jdGlvbiwgZG9uJ3QgcnVuIHVwIHRoZSBjdXJyZW50U2VyaWVzIGNvdW50ZXIuIEtlZXAgaXQgYXQgMAogICAgICAgIH0gZWxzZSBpZiAoZmlyc3QpewogICAgICAgICAgICBmaXJzdD1mYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uLmJ1dCBvbmx5IGxldCB0aGlzIHdvcmsgb25jZS4KICAgICAgICB9IAogICAgICAgICAKICAgICAgICBiYWxhbmNlc1t0aGlzXSA9IHNhZmVBZGQoYmFsYW5jZXNbdGhpc10sIHNlcmllc1tjdXJyZW50U2VyaWVzXS5zZXJpZXNTdXBwbHkpOwogICAgICAgIGlzc3VlZFRvRGF0ZSA9IHNhZmVBZGQoaXNzdWVkVG9EYXRlLCBzZXJpZXNbY3VycmVudFNlcmllc10uc2VyaWVzU3VwcGx5KTsKICAgICAgICBTZXJpZXNDcmVhdGVkKGN1cnJlbnRTZXJpZXMpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1t0aGlzXSA+IDApOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHNlcmllc1tjdXJyZW50U2VyaWVzXS5wcmljZSk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWUgLyBzZXJpZXNbY3VycmVudFNlcmllc10ucHJpY2U7ICAgICAgLy8gY2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIHRva2VucyB0aGUgc2VuZGVyIHdpbGwgYnV5CiAgICAgICAgdWludDI1NiByZWNlaXZhYmxlID0gbXNnLnZhbHVlOwogICAgICAgIGlmIChiYWxhbmNlc1t0aGlzXSA8IGFtb3VudCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgc2VjdGlvbiBoYW5kbGVzIHdoYXQgaGFwcGVucyBpZiBzb21lb25lIHRyaWVzIHRvIGJ1eSBtb3JlIHRoYW4gdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgc3VwcGx5CiAgICAgICAgICAgIHJlY2VpdmFibGUgPSBzYWZlTXVsdChiYWxhbmNlc1t0aGlzXSwgc2VyaWVzW2N1cnJlbnRTZXJpZXNdLnByaWNlKTsKICAgICAgICAgICAgdWludDI1NiByZXR1cm5hYmxlID0gc2FmZVN1YnRyYWN0KG1zZy52YWx1ZSwgcmVjZWl2YWJsZSk7CiAgICAgICAgICAgIGFtb3VudCA9IGJhbGFuY2VzW3RoaXNdOwogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJldHVybmFibGUpOyAgICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKHJlY2VpdmFibGUgJSBzZXJpZXNbY3VycmVudFNlcmllc10ucHJpY2UgPiAwKSBhc3NlcnQocmV0dXJuQ2hhbmdlKHJlY2VpdmFibGUpKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIGFtb3VudCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRzIHRoZSBhbW91bnQgdG8gYnV5ZXIncyBiYWxhbmNlCiAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBzYWZlU3VidHJhY3QoYmFsYW5jZXNbdGhpc10sIGFtb3VudCk7ICAgICAgLy8gc3VidHJhY3RzIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UKICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQoKICAgICAgICBmb3IodWludCBrID0gMDsgayA8IGFtb3VudDsgaysrKXsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3cgbGV0J3MgbWFrZSBhIHJlY29yZCBvZiBldmVyeSBzYWxlCiAgICAgICAgICAgIHJlY29yZHNbdG90YWxTb2xkXSA9IHJlY29yZChtc2cuc2VuZGVyLCBzZXJpZXNbY3VycmVudFNlcmllc10ucHJpY2UsIGZhbHNlKTsKICAgICAgICAgICAgdG90YWxTb2xkKys7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kcyBmdW5jdGlvbiBhbmQgcmV0dXJucwogICAgfQoKICAgIGZ1bmN0aW9uIHJldHVybkNoYW5nZSh1aW50MjU2IF9yZWNlaXZhYmxlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAgIHVpbnQyNTYgY2hhbmdlID0gX3JlY2VpdmFibGUgJSBzZXJpZXNbY3VycmVudFNlcmllc10ucHJpY2U7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihjaGFuZ2UpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQsIHRoZSBjYWxsZXIgaXMgdHJhbnNmZXJyaW5nIGFueSBudW1iZXIgb2YgdG9rZW5zLiBUaGUgZnVuY3Rpb24gYXV0b21hdGljYWxseSBjaG9vc2VzIHRoZSB0b2tlbnMgd2l0aCB0aGUgTE9XRVNUIGluZGV4IHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsgCiAgICAgICAgdWludDI1NiByZWNvcmRzQ2hhbmdlZCA9IDA7CgogICAgICAgIGZvcih1aW50IGsgPSAwOyBrIDwgcmVjb3Jkcy5sZW5ndGg7IGsrKyl7ICAgICAgICAgICAgICAgICAvLyBnbyB0aHJvdWdoIGV2ZXJ5IHJlY29yZAogICAgICAgICAgICBpZihyZWNvcmRzW2tdLmFkZHIgPT0gbXNnLnNlbmRlciAmJiByZWNvcmRzQ2hhbmdlZCA8IF92YWx1ZSkgewogICAgICAgICAgICAgICAgcmVjb3Jkc1trXS5hZGRyID0gX3RvOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcmVjb3JkCiAgICAgICAgICAgICAgICByZWNvcmRzQ2hhbmdlZCsrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgcmVjb3JkcyB5b3UndmUgY2hhbmdlZCBpbiB0aGlzIHRyYW5zZmVyLiBBZnRlciB5b3UndmUgY2hhbmdlZCBhcyBtYW55IHJlY29yZHMgYXMgdGhlcmUgYXJlIHRva2VucyBiZWluZyB0cmFuc2ZlcnJlZCwgY29uZGl0aW9ucyBvZiB0aGlzIGxvb3Agd2lsbCBjZWFzZSB0byBiZSB0cnVlLgogICAgICAgICAgICAgICAgVXBkYXRlUmVjb3JkKGssIF90bywgcmVjb3Jkc1trXS5wcmljZSwgcmVjb3Jkc1trXS5idXJuZWQpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWJ0cmFjdChiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlKTsgCiAgICAgICAgcmVxdWlyZShhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOyAKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHVpbnQyNTYgcmVjb3Jkc0NoYW5nZWQgPSAwOwogICAgICAgIAogICAgICAgIGZvcih1aW50MjU2IGsgPSAwOyBrIDwgcmVjb3Jkcy5sZW5ndGg7IGsrKyl7ICAgICAgICAgICAgICAgICAvLyBnbyB0aHJvdWdoIGV2ZXJ5IHJlY29yZAogICAgICAgICAgICBpZihyZWNvcmRzW2tdLmFkZHIgPT0gX2Zyb20gJiYgcmVjb3Jkc0NoYW5nZWQgPCBfdmFsdWUpIHsKICAgICAgICAgICAgICAgIHJlY29yZHNba10uYWRkciA9IF90bzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJlY29yZAogICAgICAgICAgICAgICAgcmVjb3Jkc0NoYW5nZWQrKzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IHJlY29yZHMgeW91J3ZlIGNoYW5nZWQgaW4gdGhpcyB0cmFuc2Zlci4gQWZ0ZXIgeW91J3ZlIGNoYW5nZWQgYXMgbWFueSByZWNvcmRzIGFzIHRoZXJlIGFyZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQsIGNvbmRpdGlvbnMgb2YgdGhpcyBsb29wIHdpbGwgY2Vhc2UgdG8gYmUgdHJ1ZS4KICAgICAgICAgICAgICAgIFVwZGF0ZVJlY29yZChrLCBfdG8sIHJlY29yZHNba10ucHJpY2UsIHJlY29yZHNba10uYnVybmVkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3VidHJhY3QoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YnRyYWN0KGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7IAogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7ICAgICAKICAgIH0gICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgY2FsbGVyIGlzIHRyYW5zZmVycmluZyBvbmx5IDEgSUtCIHRvIGFub3RoZXIgYWNjb3VudCwgYW5kIHNwZWNpZnlpbmcgZXhhY3RseSB3aGljaCB0b2tlbiB0aGV5IHdvdWxkIGxpa2UgdG8gdHJhbnNmZXIuCiAgICBmdW5jdGlvbiBzcGVjaWZpY1RyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF9lZGl0aW9uKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCk7CiAgICAgICAgcmVxdWlyZShyZWNvcmRzW19lZGl0aW9uXS5hZGRyID09IG1zZy5zZW5kZXIpOyAKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWJ0cmFjdChiYWxhbmNlc1ttc2cuc2VuZGVyXSwgMSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgMSk7CiAgICAgICAgcmVjb3Jkc1tfZWRpdGlvbl0uYWRkciA9IF90bzsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHJlY29yZHMgc28gdGhhdCB0aGUgcmVjb3JkIHNob3dzIHRoaXMgcGVyc29uIG93bnMgdGhlIAogICAgICAgIAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgMSk7CiAgICAgICAgVXBkYXRlUmVjb3JkKF9lZGl0aW9uLCBfdG8sIHJlY29yZHNbX2VkaXRpb25dLnByaWNlLCByZWNvcmRzW19lZGl0aW9uXS5idXJuZWQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzcGVjaWZpY1RyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfZWRpdGlvbikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+IDApOwogICAgICAgIHJlcXVpcmUocmVjb3Jkc1tfZWRpdGlvbl0uYWRkciA9PSBfZnJvbSk7CiAgICAgICAgcmVxdWlyZShzcGVjaWZpY0FsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdW19lZGl0aW9uXSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YnRyYWN0KGJhbGFuY2VzW19mcm9tXSwgMSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgMSk7CiAgICAgICAgc3BlY2lmaWNBbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXVtfZWRpdGlvbl0gPSBmYWxzZTsKICAgICAgICByZWNvcmRzW19lZGl0aW9uXS5hZGRyID0gX3RvOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcmVjb3JkcyBzbyB0aGF0IHRoZSByZWNvcmQgc2hvd3MgdGhpcyBwZXJzb24gb3ducyB0aGUgCiAgICAgICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCAxKTsKICAgICAgICBVcGRhdGVSZWNvcmQoX2VkaXRpb24sIF90bywgcmVjb3Jkc1tfZWRpdGlvbl0ucHJpY2UsIHJlY29yZHNbX2VkaXRpb25dLmJ1cm5lZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBxdWljayB3YXkgdG8gZmlndXJlIG91dCB3aG8gaG9sZHMgYSBzcGVjaWZpYyB0b2tlbiB3aXRob3V0IHF1ZXJ5aW5nIHRoZSB3aG9sZSByZWNvcmQuIFRoaXMgbWlnaHQgYWN0dWFsbHkgYmUgcmVkdW5kYW50LgogICAgZnVuY3Rpb24gZ2V0VG9rZW5Ib2xkZXIodWludCBzZWFyY2hlZFJlY29yZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyl7CiAgICAgICAgcmV0dXJuIHJlY29yZHNbc2VhcmNoZWRSZWNvcmRdLmFkZHI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEhvbGRlckVkaXRpb25zKGFkZHJlc3MgX2hvbGRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTZbXSBfZWRpdGlvbnMpIHsKICAgICAgICB1aW50MjU2W10gbWVtb3J5IGVkaXRpb25zT3duZWQgPSBuZXcgdWludDI1NltdKGJhbGFuY2VzW19ob2xkZXJdKTsKICAgICAgICB1aW50MjU2IGluZGV4OwogICAgICAgIGZvcih1aW50MjU2IGsgPSAwOyBrIDwgcmVjb3Jkcy5sZW5ndGg7IGsrKykgewogICAgICAgICAgICBpZihyZWNvcmRzW2tdLmFkZHIgPT0gX2hvbGRlcikgewogICAgICAgICAgICAgICAgZWRpdGlvbnNPd25lZFtpbmRleF0gPSBrOwogICAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZWRpdGlvbnNPd25lZDsKICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGxvd3MgdGhlIGFydGlzdCB0byB3aXRoZHJhdyBldGhlciBmcm9tIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gcmVkZWVtRXRoZXIoKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbG93cyB0aGUgYXJ0aXN0IHRvIHB1dCBldGhlciBiYWNrIGluIHRoZSBjb250cmFjdCBzbyB0aGF0IGhvbGRlcnMgY2FuIGV4ZWN1dGUgdGhlIHJpdHVhbCBmdW5jdGlvbgogICAgZnVuY3Rpb24gZnVuZCgpIHBheWFibGUgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiByaXR1YWwodWludDI1NiBfZWRpdGlvbikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKHJlY29yZHNbX2VkaXRpb25dLmFkZHIgPT0gbXNnLnNlbmRlcik7IAogICAgICAgIHJlcXVpcmUoIXJlY29yZHNbX2VkaXRpb25dLmJ1cm5lZCk7CiAgICAgICAgdWludDI1NiBoYWxmVGhlR29sZCA9IHJlY29yZHNbX2VkaXRpb25dLnByaWNlIC8gMjsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBoYWxmVGhlR29sZCk7CiAgICAgICAgCiAgICAgICAgcmVjb3Jkc1tfZWRpdGlvbl0uYWRkciA9IDB4ZGVhZDsKICAgICAgICByZWNvcmRzW19lZGl0aW9uXS5idXJuZWQgPSB0cnVlOwogICAgICAgIGJ1cm5lZFRvRGF0ZSsrOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YnRyYWN0KGJhbGFuY2VzW21zZy5zZW5kZXJdLCAxKTsKICAgICAgICB0aGVSaXZlci50cmFuc2ZlcihoYWxmVGhlR29sZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHNob3VsZCBmYWlsIGlmIHRoaXMgY29udHJhY3QgaXNuJ3QgaG9sZGluZyBlbm91Z2ggRVRICiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
