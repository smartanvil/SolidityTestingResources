Class {
	#name : #SRT711a1836b306d2eac12129c0b97da8931ee80fe2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT711a1836b306d2eac12129c0b97da8931ee80fe2 >> base64 [
	^ ''.
	

]
