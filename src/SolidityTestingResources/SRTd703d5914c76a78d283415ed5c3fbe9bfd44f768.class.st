Class {
	#name : #SRTd703d5914c76a78d283415ed5c3fbe9bfd44f768,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd703d5914c76a78d283415ed5c3fbe9bfd44f768 >> base64 [
	^ ''.
	

]
