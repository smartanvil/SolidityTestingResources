Class {
	#name : #SRTb1bd1bbe4104ae6ccef15039ad938026e622a5e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1bd1bbe4104ae6ccef15039ad938026e622a5e5 >> base64 [
	^ ''.
	

]
