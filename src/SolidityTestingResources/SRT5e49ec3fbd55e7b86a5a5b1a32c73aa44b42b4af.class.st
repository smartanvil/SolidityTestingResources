Class {
	#name : #SRT5e49ec3fbd55e7b86a5a5b1a32c73aa44b42b4af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e49ec3fbd55e7b86a5a5b1a32c73aa44b42b4af >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMzsKCmNvbnRyYWN0IEF2YXRhcnMgewogICAgCiAgICB1aW50IGF2YXRhcnNDb3VudCA9IDA7CgogICAgc3RydWN0IEF2YXRhciB7CiAgICAgICAgdWludCBpZDsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBBdmF0YXIncyBvd25lci4KICAgICAgICAgKi8gCiAgICAgICAgYWRkcmVzcyBvd25lcjsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBGaXJzdCBieXRlIGlzIGdlbmRlciwgMSAvIDAgZm9yIG1hbGUgLyBmZW1hbGUuIAogICAgICAgICAqIFRoZW4gZXZlcnkgYnl0ZSBkZXNjcmliZSBjaG9vc2VuIGF2YXRhciBwYXJ0LiAKICAgICAgICAgKiBUaGUgb3JkZXIgaXMgOiBiYWNrcywgY2xvdGhlcywgZWFycywgZXllYnJvd3MsIGV5ZXNmcm9udCwgZXllc2lyaXMsIGZhY2VzaGFwZSwgZ2xhc3NlcywgaGFpciwgbW91dGgsIG5vc2UsIGJlYXJkLCBtdXN0YWNoZS4gCiAgICAgICAgICovIAogICAgICAgIGJ5dGVzMzIgc2hhcGVzOwogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIEVhY2ggMyBieXRlcyBkZXNjcmliZSBjb2xvciBmb3IgNSBmaXJzdCBzaGFwZXMuCiAgICAgICAgICovCiAgICAgICAgYnl0ZXMzMiBjb2xvcnNQcmltYXJ5OwogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIEVhY2ggMyBieXRlcyBkZXNjcmliZSBjb2xvciBmb3IgOCBsYXN0IHNoYXBlcy4KICAgICAgICAgKi8KICAgICAgICBieXRlczMyIGNvbG9yc1NlY29uZGFyeTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBFYWNoIGJ5dGUgZGVzY3JpYmVzIHVwL2Rvd24gcG9zaXRpb24gZm9yIGV2ZXJ5IHNoYXBlLiAKICAgICAgICAgKiBIaWdoIG5pYmJsZSBkZXBpY3RzIHRoZSBzaWduIG9mIG51bWJlciwgMSAtIHVwLCAwIC0gZG93bi4KICAgICAgICAgKiBMb3cgbmliYmxlIHNob3dzIG51bWJlciBvZiBzdGVwcyB0byBtb3ZlIHRoZSBzaGFwZSBpbiBzZWxlY3RlZCBkaXJlY3Rpb24uCiAgICAgICAgICogCiAgICAgICAgICovCiAgICAgICAgYnl0ZXMzMiBwb3NpdGlvbnM7CiAgICB9CiAgICAKICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBBdmF0YXIpIGF2YXRhcnM7CiAgICAKICAgIC8qKgogICAgICogU3RvcmVzIGFuIGF2YXRhciBvbiB0aGUgYmxvY2tjaGFpbi4KICAgICAqIFRocm93cyBpZiBhdmF0YXIgd2l0aCBzdWNoIHNoYXBlcyBjb21iaW5hdGlvbiBpcyBhbHJlYWR5IGV4aXN0cy4KICAgICAqIAogICAgICogQHBhcmFtIHNoYXBlcyAtIGhleCBzdHJpbmcsIGRlcGljdHMgZ2VuZGVyIGFuZCBjb21iaW5hdGlvbnMgb2Ygc2hhcGVzLgogICAgICogQHBhcmFtIGNvbG9yc1ByaW1hcnkgLSBoZXggc3RyaW5nLCBjb2xvcnMgb2YgdGhlIGZpcnN0IDUgc2hhcGVzLgogICAgICogQHBhcmFtIGNvbG9yc1NlY29uZGFyeSAtIGhleCBzdHJpbmcsIGNvbG9ycyBvZiB0aGUgbGFzdCA4IHNoYXBlcy4KICAgICAqIEBwYXJhbSBwb3NpdGlvbnMgLSBoZXggc3RyaW5nLCB1cC9kb3duIHBvc2l0aW9ucyBvZiBhbGwgc2hhcGVzCiAgICAgKiAKICAgICAqIEByZXR1cm4gSGFzaCBvZiB0aGUgYXZhdGFyLgogICAgICovCiAgICBmdW5jdGlvbiByZWdpc3RlcihzdHJpbmcgc2hhcGVzLCBzdHJpbmcgY29sb3JzUHJpbWFyeSwgc3RyaW5nIGNvbG9yc1NlY29uZGFyeSwgc3RyaW5nIHBvc2l0aW9ucykgcmV0dXJucyAoYnl0ZXMzMiBhdmF0YXJIYXNoKSB7CiAgICAgICAgYnl0ZXMzMiBzaGFwZXNCeXRlcyA9IHN0clRvQnl0ZXMoc2hhcGVzKTsKICAgICAgICBieXRlczMyIGNvbG9yc1ByaW1hcnlCeXRlcyA9IHN0clRvQnl0ZXMoY29sb3JzUHJpbWFyeSk7CiAgICAgICAgYnl0ZXMzMiBjb2xvcnNTZWNvbmRhcnlCeXRlcyA9IHN0clRvQnl0ZXMoY29sb3JzU2Vjb25kYXJ5KTsKICAgICAgICBieXRlczMyIHBvc2l0aW9uc0J5dGVzID0gc3RyVG9CeXRlcyhwb3NpdGlvbnMpOwoKICAgICAgICAvLyB1bmlxdWUgYnkgc2hhcGVzIGNvbXBvc2l0aW9uCiAgICAgICAgYnl0ZXMzMiBoYXNoID0gc2hhMyhzaGFwZXMpOwoKICAgICAgICBBdmF0YXIgbWVtb3J5IGV4aXN0aW5nQXZhdGFyID0gYXZhdGFyc1toYXNoXTsKICAgICAgICBpZiAoZXhpc3RpbmdBdmF0YXIuaWQgIT0gMCkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgCiAgICAgICAgQXZhdGFyIG1lbW9yeSBhdmF0YXIgPSBBdmF0YXIoKythdmF0YXJzQ291bnQsIG1zZy5zZW5kZXIsIAogICAgICAgICAgICBzaGFwZXNCeXRlcywKICAgICAgICAgICAgY29sb3JzUHJpbWFyeUJ5dGVzLAogICAgICAgICAgICBjb2xvcnNTZWNvbmRhcnlCeXRlcywKICAgICAgICAgICAgcG9zaXRpb25zQnl0ZXMpOwoKICAgICAgICBhdmF0YXJzW2hhc2hdID0gYXZhdGFyOwogICAgICAgIHJldHVybiBoYXNoOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHVybnMgYW4gYXZhdGFyIGJ5IGl0J3MgaGFzaC4KICAgICAqIFRocm93cyBpZiBhdmF0YXIgaXMgbm90IGV4aXN0cy4KICAgICAqLyAKICAgIGZ1bmN0aW9uIGdldChieXRlczMyIGF2YXRhckhhc2gpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgc2hhcGVzLCBieXRlczMyIGNvbG9yc1ByaW1hcnksIGJ5dGVzMzIgY29sb3JzU2Vjb25kYXJ5LCBieXRlczMyIHBvc2l0aW9ucykgewogICAgICAgIEF2YXRhciBtZW1vcnkgYXZhdGFyID0gZ2V0QXZhdGFyKGF2YXRhckhhc2gpOwogICAgICAgIAogICAgICAgIHNoYXBlcyA9IGF2YXRhci5zaGFwZXM7CiAgICAgICAgY29sb3JzUHJpbWFyeSA9IGF2YXRhci5jb2xvcnNQcmltYXJ5OwogICAgICAgIGNvbG9yc1NlY29uZGFyeSA9IGF2YXRhci5jb2xvcnNTZWNvbmRhcnk7CiAgICAgICAgcG9zaXRpb25zID0gYXZhdGFyLnBvc2l0aW9uczsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBSZXR1cm5zIGFuIGF2YXRhciBvd25lciBhZGRyZXNzIGJ5IGF2YXRhcidzIGhhc2guCiAgICAgKiBUaHJvd3MgaWYgYXZhdGFyIGlzIG5vdCBleGlzdHMuCiAgICAgKi8gCiAgICBmdW5jdGlvbiBnZXRPd25lcihieXRlczMyIGF2YXRhckhhc2gpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICBBdmF0YXIgbWVtb3J5IGF2YXRhciA9IGdldEF2YXRhcihhdmF0YXJIYXNoKTsKICAgICAgICByZXR1cm4gYXZhdGFyLm93bmVyOwogICAgfQogICAgCiAgICAgICAgCiAgICAvKioKICAgICAqIFJldHVybnMgaWYgYXZhdGFyIG9mIHRoZSBnaXZlbiBoYXNoIGV4aXN0cy4KICAgICAqLyAKICAgIGZ1bmN0aW9uIGlzRXhpc3RzKGJ5dGVzMzIgYXZhdGFySGFzaCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIEF2YXRhciBtZW1vcnkgYXZhdGFyID0gYXZhdGFyc1thdmF0YXJIYXNoXTsKICAgICAgICBpZiAoYXZhdGFyLmlkID09IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBhdmF0YXIgYnkgaXQncyBoYXNoLgogICAgICogVGhyb3dzIGlmIGF2YXRhciBpcyBub3QgZXhpc3RzLgogICAgICovIAogICAgZnVuY3Rpb24gZ2V0QXZhdGFyKGJ5dGVzMzIgYXZhdGFySGFzaCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChBdmF0YXIpIHsKICAgICAgICBBdmF0YXIgbWVtb3J5IGF2YXRhciA9IGF2YXRhcnNbYXZhdGFySGFzaF07CiAgICAgICAgaWYgKGF2YXRhci5pZCA9PSAwKQogICAgICAgICAgIHRocm93OwogICAgICAgICAgIAogICAgICAgIHJldHVybiBhdmF0YXI7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQGRldiBMb3cgbGV2ZWwgZnVuY3Rpb24uCiAgICAgKiBDb252ZXJ0cyBzdHJpbmcgdG8gYnl0ZXMzMiBhcnJheS4KICAgICAqIFRocm93cyBpZiBzdHJpbmcgbGVuZ3RoIGlzIG1vcmUgdGhhbiAzMiBieXRlcwogICAgICogCiAgICAgKiBAcGFyYW0gc3RyIHN0cmluZwogICAgICogQHJldHVybiBieXRlczMyIHJlcHJlc2VudGF0aW9uIG9mIHN0cgogICAgICovCiAgICBmdW5jdGlvbiBzdHJUb0J5dGVzKHN0cmluZyBzdHIpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAoYnl0ZXMzMiByZXQpIHsKICAgICAgICAvLyB2YXIgZyA9IGJ5dGVzKHN0cikubGVuZ3RoOwogICAgICAgIC8vIGlmIChieXRlcyhzdHIpLmxlbmd0aCA+IDMyKSB0aHJvdzsKICAgICAgICAKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHJldCA6PSBtbG9hZChhZGQoc3RyLCAzMikpCiAgICAgICAgfQogICAgfSAKfQ=='.
	

]
