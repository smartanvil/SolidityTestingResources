Class {
	#name : #SRT4a6058666cf1057eac3cd3a5a614620547559fc9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4a6058666cf1057eac3cd3a5a614620547559fc9 >> base64 [
	^ ''.
	

]
