Class {
	#name : #SRT8a98cf91fd2ea825a187e4ceaf3490c8a71d8d73,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a98cf91fd2ea825a187e4ceaf3490c8a71d8d73 >> base64 [
	^ ''.
	

]
