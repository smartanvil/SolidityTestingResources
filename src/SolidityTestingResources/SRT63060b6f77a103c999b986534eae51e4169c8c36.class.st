Class {
	#name : #SRT63060b6f77a103c999b986534eae51e4169c8c36,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63060b6f77a103c999b986534eae51e4169c8c36 >> base64 [
	^ ''.
	

]
