Class {
	#name : #SRT5d41106d9088f968f6fdc376bec83451420c356f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d41106d9088f968f6fdc376bec83451420c356f >> base64 [
	^ ''.
	

]
