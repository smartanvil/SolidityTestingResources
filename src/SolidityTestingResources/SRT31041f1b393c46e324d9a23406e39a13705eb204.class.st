Class {
	#name : #SRT31041f1b393c46e324d9a23406e39a13705eb204,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31041f1b393c46e324d9a23406e39a13705eb204 >> base64 [
	^ ''.
	

]
