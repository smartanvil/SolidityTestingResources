Class {
	#name : #SRT6F7e6b48d610b903F28AAcAB271Bdad8B7612495,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6F7e6b48d610b903F28AAcAB271Bdad8B7612495 >> base64 [
	^ ''.
	

]
