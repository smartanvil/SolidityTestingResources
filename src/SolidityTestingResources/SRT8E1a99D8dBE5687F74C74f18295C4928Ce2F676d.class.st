Class {
	#name : #SRT8E1a99D8dBE5687F74C74f18295C4928Ce2F676d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8E1a99D8dBE5687F74C74f18295C4928Ce2F676d >> base64 [
	^ ''.
	

]
