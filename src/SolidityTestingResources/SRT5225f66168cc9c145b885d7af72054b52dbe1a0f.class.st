Class {
	#name : #SRT5225f66168cc9c145b885d7af72054b52dbe1a0f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5225f66168cc9c145b885d7af72054b52dbe1a0f >> base64 [
	^ ''.
	

]
