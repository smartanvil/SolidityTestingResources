Class {
	#name : #SRT55d81054e6cdcc5ace262f99c2d85ac705fdc992,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55d81054e6cdcc5ace262f99c2d85ac705fdc992 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgovKgoKU28gbXVjaCB3b3chIGdldCBtb25pZXoKKi8KCgpjb250cmFjdCBET0dFIHsKICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICA9ICAgICAgICAgICAgTU9ESUZJRVJTICAgICAgICAgICAgPQogICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgIC8vIG9ubHkgcGVvcGxlIHdpdGggdG9rZW5zCiAgICBtb2RpZmllciBvbmx5QmFnaG9sZGVycygpIHsKICAgICAgICByZXF1aXJlKG15VG9rZW5zKCkgPiAwKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvLyBvbmx5IHBlb3BsZSB3aXRoIHByb2ZpdHMKICAgIG1vZGlmaWVyIG9ubHlTdHJvbmdoYW5kcygpIHsKICAgICAgICByZXF1aXJlKG15RGl2aWRlbmRzKHRydWUpID4gMCk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLy8gYWRtaW5pc3RyYXRvcnMgY2FuOgogICAgLy8gLT4gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSBjb250cmFjdAogICAgLy8gLT4gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSB0b2tlbgogICAgLy8gLT4gY2hhbmdlIHRoZSBQb1MgZGlmZmljdWx0eSAoSG93IG1hbnkgdG9rZW5zIGl0IGNvc3RzIHRvIGhvbGQgYSBtYXN0ZXJub2RlLCBpbiBjYXNlIGl0IGdldHMgY3JhenkgaGlnaCBsYXRlcikKICAgIC8vIHRoZXkgQ0FOTk9UOgogICAgLy8gLT4gdGFrZSBmdW5kcwogICAgLy8gLT4gZGlzYWJsZSB3aXRoZHJhd2FscwogICAgLy8gLT4ga2lsbCB0aGUgY29udHJhY3QKICAgIC8vIC0+IGNoYW5nZSB0aGUgcHJpY2Ugb2YgdG9rZW5zCiAgICBtb2RpZmllciBvbmx5QWRtaW5pc3RyYXRvcigpewogICAgICAgIGFkZHJlc3MgX2N1c3RvbWVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgcmVxdWlyZShhZG1pbmlzdHJhdG9yc1tfY3VzdG9tZXJBZGRyZXNzXSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgT25seU9wZW4oKXsKICAgICAgICByZXF1aXJlKElzT3BlbiB8fCBhZG1pbmlzdHJhdG9yc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAKICAgIAogICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgID0gICAgICAgICAgICBFVkVOVFMgICAgICAgICAgICA9CiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwogICAgZXZlbnQgb25Ub2tlblB1cmNoYXNlKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBjdXN0b21lckFkZHJlc3MsCiAgICAgICAgdWludDI1NiBpbmNvbWluZ0V0aGVyZXVtLAogICAgICAgIHVpbnQyNTYgdG9rZW5zTWludGVkLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCByZWZlcnJlZEJ5CiAgICApOwogICAgCiAgICBldmVudCBvblRva2VuU2VsbCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgY3VzdG9tZXJBZGRyZXNzLAogICAgICAgIHVpbnQyNTYgdG9rZW5zQnVybmVkLAogICAgICAgIHVpbnQyNTYgZXRoZXJldW1FYXJuZWQKICAgICk7CiAgICAKICAgIGV2ZW50IG9uUmVpbnZlc3RtZW50KAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBjdXN0b21lckFkZHJlc3MsCiAgICAgICAgdWludDI1NiBldGhlcmV1bVJlaW52ZXN0ZWQsCiAgICAgICAgdWludDI1NiB0b2tlbnNNaW50ZWQKICAgICk7CiAgICAKICAgIGV2ZW50IG9uV2l0aGRyYXcoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGN1c3RvbWVyQWRkcmVzcywKICAgICAgICB1aW50MjU2IGV0aGVyZXVtV2l0aGRyYXduCiAgICApOwogICAgCiAgICAvLyBFUkMyMAogICAgZXZlbnQgVHJhbnNmZXIoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHRvLAogICAgICAgIHVpbnQyNTYgdG9rZW5zCiAgICApOwogICAgCiAgICAKICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgPSAgICAgICAgICAgIENPTkZJR1VSQUJMRVMgICAgICAgICAgICA9CiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJET0dFIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkRPR0UiOwogICAgdWludDggY29uc3RhbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICB1aW50OCBjb25zdGFudCBpbnRlcm5hbCBkaXZpZGVuZEZlZV8gPSAzOyAKICAgIHVpbnQyNTYgY29uc3RhbnQgaW50ZXJuYWwgdG9rZW5QcmljZUluaXRpYWxfID0gMC4wMDAwMDAxIGV0aGVyOwogICAgdWludDI1NiBjb25zdGFudCBpbnRlcm5hbCB0b2tlblByaWNlSW5jcmVtZW50YWxfID0gMC4wMDAwMDAwMSBldGhlcjsKICAgIHVpbnQyNTYgY29uc3RhbnQgaW50ZXJuYWwgbWFnbml0dWRlID0gMioqNjQ7CiAgICAKICAgIC8vIHByb29mIG9mIHN0YWtlIChkZWZhdWx0cyBhdCAxMDAgdG9rZW5zKQogICAgdWludDI1NiBwdWJsaWMgc3Rha2luZ1JlcXVpcmVtZW50ID0gMTAwZTE4OwogICAgCiAgICAvLyBhbWJhc3NhZG9yIHByb2dyYW0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBpbnRlcm5hbCBhbWJhc3NhZG9yc187CiAgICB1aW50MjU2IGNvbnN0YW50IGludGVybmFsIGFtYmFzc2Fkb3JNYXhQdXJjaGFzZV8gPSAxIGV0aGVyOwogICAgdWludDI1NiBjb25zdGFudCBpbnRlcm5hbCBhbWJhc3NhZG9yUXVvdGFfID0gMjAgZXRoZXI7CiAgICAKICAgIAogICAgCiAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgID0gICAgICAgICAgICBEQVRBU0VUUyAgICAgICAgICAgID0KICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgIC8vIGFtb3VudCBvZiBzaGFyZXMgZm9yIGVhY2ggYWRkcmVzcyAoc2NhbGVkIG51bWJlcikKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBpbnRlcm5hbCB0b2tlbkJhbGFuY2VMZWRnZXJfOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGludGVybmFsIHJlZmVycmFsQmFsYW5jZV87CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gaW50MjU2KSBpbnRlcm5hbCBwYXlvdXRzVG9fOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGludGVybmFsIGFtYmFzc2Fkb3JBY2N1bXVsYXRlZFF1b3RhXzsKICAgIHVpbnQyNTYgaW50ZXJuYWwgdG9rZW5TdXBwbHlfID0gMDsKICAgIHVpbnQyNTYgaW50ZXJuYWwgcHJvZml0UGVyU2hhcmVfOwogICAgCiAgICAvLyBhZG1pbmlzdHJhdG9yIGxpc3QgKHNlZSBhYm92ZSBvbiB3aGF0IHRoZXkgY2FuIGRvKQogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBhZG1pbmlzdHJhdG9yczsKCiAgICBib29sIElzT3BlbiA9IGZhbHNlOwogICAgCiAgICAKICAgIAoKCiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgPSAgICAgICAgICAgIFBVQkxJQyBGVU5DVElPTlMgICAgICAgICAgICA9CiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwogICAgLyoKICAgICogLS0gQVBQTElDQVRJT04gRU5UUlkgUE9JTlRTIC0tICAKICAgICovCiAgICBmdW5jdGlvbiBET0dFKCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICAvLyBhZGQgYWRtaW5pc3RyYXRvcnMgaGVyZQoKICAgICAgICBhZG1pbmlzdHJhdG9yc1sweEQyRTZCM0JGRTk5MGZkZWRlMjM4MDg4NWQ5ZDgzQ2E5MzY0RTcxN0VdID0gdHJ1ZTsKICAgICAgICAvL2FkbWluaXN0cmF0b3JzW21zZy5zZW5kZXJdPXRydWU7CiAgICB9CiAgICAKICAgICAKICAgIC8qKgogICAgICogQ29udmVydHMgYWxsIGluY29taW5nIGV0aGVyZXVtIHRvIHRva2VucyBmb3IgdGhlIGNhbGxlciwgYW5kIHBhc3NlcyBkb3duIHRoZSByZWZlcnJhbCBhZGR5IChpZiBhbnkpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJ1eShhZGRyZXNzIF9yZWZlcnJlZEJ5KQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICBPbmx5T3BlbigpCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHB1cmNoYXNlVG9rZW5zKG1zZy52YWx1ZSwgX3JlZmVycmVkQnkpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uIHRvIGhhbmRsZSBldGhlcmV1bSB0aGF0IHdhcyBzZW5kIHN0cmFpZ2h0IHRvIHRoZSBjb250cmFjdAogICAgICogVW5mb3J0dW5hdGVseSB3ZSBjYW5ub3QgdXNlIGEgcmVmZXJyYWwgYWRkcmVzcyB0aGlzIHdheS4KICAgICAqLwogICAgZnVuY3Rpb24oKQogICAgICAgIHBheWFibGUKICAgICAgICBwdWJsaWMKICAgICAgICBPbmx5T3BlbigpCiAgICB7CiAgICAgICAgcHVyY2hhc2VUb2tlbnMobXNnLnZhbHVlLCAweDApOwogICAgfQogICAgCiAgICAvKioKICAgICAqIENvbnZlcnRzIGFsbCBvZiBjYWxsZXIncyBkaXZpZGVuZHMgdG8gdG9rZW5zLgogICAgKi8KICAgIGZ1bmN0aW9uIHJlaW52ZXN0KCkKICAgICAgICBvbmx5U3Ryb25naGFuZHMoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIC8vIGZldGNoIGRpdmlkZW5kcwogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IG15RGl2aWRlbmRzKGZhbHNlKTsgLy8gcmV0cmlldmUgcmVmLiBib251cyBsYXRlciBpbiB0aGUgY29kZQogICAgICAgIAogICAgICAgIC8vIHBheSBvdXQgdGhlIGRpdmlkZW5kcyB2aXJ0dWFsbHkKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHBheW91dHNUb19bX2N1c3RvbWVyQWRkcmVzc10gKz0gIChpbnQyNTYpIChfZGl2aWRlbmRzICogbWFnbml0dWRlKTsKICAgICAgICAKICAgICAgICAvLyByZXRyaWV2ZSByZWYuIGJvbnVzCiAgICAgICAgX2RpdmlkZW5kcyArPSByZWZlcnJhbEJhbGFuY2VfW19jdXN0b21lckFkZHJlc3NdOwogICAgICAgIHJlZmVycmFsQmFsYW5jZV9bX2N1c3RvbWVyQWRkcmVzc10gPSAwOwogICAgICAgIAogICAgICAgIC8vIGRpc3BhdGNoIGEgYnV5IG9yZGVyIHdpdGggdGhlIHZpcnR1YWxpemVkICJ3aXRoZHJhd24gZGl2aWRlbmRzIgogICAgICAgIHVpbnQyNTYgX3Rva2VucyA9IHB1cmNoYXNlVG9rZW5zKF9kaXZpZGVuZHMsIDB4MCk7CiAgICAgICAgCiAgICAgICAgLy8gZmlyZSBldmVudAogICAgICAgIG9uUmVpbnZlc3RtZW50KF9jdXN0b21lckFkZHJlc3MsIF9kaXZpZGVuZHMsIF90b2tlbnMpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEFsaWFzIG9mIHNlbGwoKSBhbmQgd2l0aGRyYXcoKS4KICAgICAqLwogICAgZnVuY3Rpb24gZXhpdCgpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgLy8gZ2V0IHRva2VuIGNvdW50IGZvciBjYWxsZXIgJiBzZWxsIHRoZW0gYWxsCiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICB1aW50MjU2IF90b2tlbnMgPSB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdOwogICAgICAgIGlmKF90b2tlbnMgPiAwKSBzZWxsKF90b2tlbnMpOwogICAgICAgIAogICAgICAgIC8vIGxhbWJvIGRlbGl2ZXJ5IHNlcnZpY2UKICAgICAgICB3aXRoZHJhdygpOwogICAgfQoKICAgIC8qKgogICAgICogV2l0aGRyYXdzIGFsbCBvZiB0aGUgY2FsbGVycyBlYXJuaW5ncy4KICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXcoKQogICAgICAgIG9ubHlTdHJvbmdoYW5kcygpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgLy8gc2V0dXAgZGF0YQogICAgICAgIGFkZHJlc3MgX2N1c3RvbWVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludDI1NiBfZGl2aWRlbmRzID0gbXlEaXZpZGVuZHMoZmFsc2UpOyAvLyBnZXQgcmVmLiBib251cyBsYXRlciBpbiB0aGUgY29kZQogICAgICAgIAogICAgICAgIC8vIHVwZGF0ZSBkaXZpZGVuZCB0cmFja2VyCiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSArPSAgKGludDI1NikgKF9kaXZpZGVuZHMgKiBtYWduaXR1ZGUpOwogICAgICAgIAogICAgICAgIC8vIGFkZCByZWYuIGJvbnVzCiAgICAgICAgX2RpdmlkZW5kcyArPSByZWZlcnJhbEJhbGFuY2VfW19jdXN0b21lckFkZHJlc3NdOwogICAgICAgIHJlZmVycmFsQmFsYW5jZV9bX2N1c3RvbWVyQWRkcmVzc10gPSAwOwogICAgICAgIAogICAgICAgIC8vIGxhbWJvIGRlbGl2ZXJ5IHNlcnZpY2UKICAgICAgICBfY3VzdG9tZXJBZGRyZXNzLnRyYW5zZmVyKF9kaXZpZGVuZHMpOwogICAgICAgIAogICAgICAgIC8vIGZpcmUgZXZlbnQKICAgICAgICBvbldpdGhkcmF3KF9jdXN0b21lckFkZHJlc3MsIF9kaXZpZGVuZHMpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIExpcXVpZmllcyB0b2tlbnMgdG8gZXRoZXJldW0uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbGwodWludDI1NiBfYW1vdW50T2ZUb2tlbnMpCiAgICAgICAgb25seUJhZ2hvbGRlcnMoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIC8vIHNldHVwIGRhdGEKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIC8vIHJ1c3NpYW4gaGFja2VycyBCVEZPCiAgICAgICAgcmVxdWlyZShfYW1vdW50T2ZUb2tlbnMgPD0gdG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSk7CiAgICAgICAgdWludDI1NiBfdG9rZW5zID0gX2Ftb3VudE9mVG9rZW5zOwogICAgICAgIHVpbnQyNTYgX2V0aGVyZXVtID0gdG9rZW5zVG9FdGhlcmV1bV8oX3Rva2Vucyk7CiAgICAgICAgdWludDI1NiBfZGl2aWRlbmRzID0gU2FmZU1hdGguZGl2KF9ldGhlcmV1bSwgZGl2aWRlbmRGZWVfKTsKICAgICAgICB1aW50MjU2IF90YXhlZEV0aGVyZXVtID0gU2FmZU1hdGguc3ViKF9ldGhlcmV1bSwgX2RpdmlkZW5kcyk7CiAgICAgICAgCiAgICAgICAgLy8gYnVybiB0aGUgc29sZCB0b2tlbnMKICAgICAgICB0b2tlblN1cHBseV8gPSBTYWZlTWF0aC5zdWIodG9rZW5TdXBwbHlfLCBfdG9rZW5zKTsKICAgICAgICB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdID0gU2FmZU1hdGguc3ViKHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10sIF90b2tlbnMpOwogICAgICAgIAogICAgICAgIC8vIHVwZGF0ZSBkaXZpZGVuZHMgdHJhY2tlcgogICAgICAgIGludDI1NiBfdXBkYXRlZFBheW91dHMgPSAoaW50MjU2KSAocHJvZml0UGVyU2hhcmVfICogX3Rva2VucyArIChfdGF4ZWRFdGhlcmV1bSAqIG1hZ25pdHVkZSkpOwogICAgICAgIHBheW91dHNUb19bX2N1c3RvbWVyQWRkcmVzc10gLT0gX3VwZGF0ZWRQYXlvdXRzOyAgICAgICAKICAgICAgICAKICAgICAgICAvLyBkaXZpZGluZyBieSB6ZXJvIGlzIGEgYmFkIGlkZWEKICAgICAgICBpZiAodG9rZW5TdXBwbHlfID4gMCkgewogICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGFtb3VudCBvZiBkaXZpZGVuZHMgcGVyIHRva2VuCiAgICAgICAgICAgIHByb2ZpdFBlclNoYXJlXyA9IFNhZmVNYXRoLmFkZChwcm9maXRQZXJTaGFyZV8sIChfZGl2aWRlbmRzICogbWFnbml0dWRlKSAvIHRva2VuU3VwcGx5Xyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIGZpcmUgZXZlbnQKICAgICAgICBvblRva2VuU2VsbChfY3VzdG9tZXJBZGRyZXNzLCBfdG9rZW5zLCBfdGF4ZWRFdGhlcmV1bSk7CiAgICB9CiAgICAKICAgIAogICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMgZnJvbSB0aGUgY2FsbGVyIHRvIGEgbmV3IGhvbGRlci4KICAgICAqIFJlbWVtYmVyLCB0aGVyZSdzIGEgMTAlIGZlZSBoZXJlIGFzIHdlbGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvQWRkcmVzcywgdWludDI1NiBfYW1vdW50T2ZUb2tlbnMpCiAgICAgICAgb25seUJhZ2hvbGRlcnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICAvLyBzZXR1cAogICAgICAgIGFkZHJlc3MgX2N1c3RvbWVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgCiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGhhdmUgdGhlIHJlcXVlc3RlZCB0b2tlbnMKICAgICAgICAvLyBhbHNvIGRpc2FibGVzIHRyYW5zZmVycyB1bnRpbCBhbWJhc3NhZG9yIHBoYXNlIGlzIG92ZXIKICAgICAgICAvLyAoIHdlIGRvbnQgd2FudCB3aGFsZSBwcmVtaW5lcyApCiAgICAgICAgcmVxdWlyZSggX2Ftb3VudE9mVG9rZW5zIDw9IHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10pOwogICAgICAgIAogICAgICAgIC8vIHdpdGhkcmF3IGFsbCBvdXRzdGFuZGluZyBkaXZpZGVuZHMgZmlyc3QKICAgICAgICBpZihteURpdmlkZW5kcyh0cnVlKSA+IDApIHdpdGhkcmF3KCk7CiAgICAgICAgCiAgICAgICAgLy8gbGlxdWlmeSAxMCUgb2YgdGhlIHRva2VucyB0aGF0IGFyZSB0cmFuc2ZlcmVkCiAgICAgICAgLy8gdGhlc2UgYXJlIGRpc3BlcnNlZCB0byBzaGFyZWhvbGRlcnMKICAgICAgICB1aW50MjU2IF90b2tlbkZlZSA9IFNhZmVNYXRoLmRpdihfYW1vdW50T2ZUb2tlbnMsIGRpdmlkZW5kRmVlXyk7CiAgICAgICAgdWludDI1NiBfdGF4ZWRUb2tlbnMgPSBTYWZlTWF0aC5zdWIoX2Ftb3VudE9mVG9rZW5zLCBfdG9rZW5GZWUpOwogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IHRva2Vuc1RvRXRoZXJldW1fKF90b2tlbkZlZSk7CiAgCiAgICAgICAgLy8gYnVybiB0aGUgZmVlIHRva2VucwogICAgICAgIHRva2VuU3VwcGx5XyA9IFNhZmVNYXRoLnN1Yih0b2tlblN1cHBseV8sIF90b2tlbkZlZSk7CgogICAgICAgIC8vIGV4Y2hhbmdlIHRva2VucwogICAgICAgIHRva2VuQmFsYW5jZUxlZGdlcl9bX2N1c3RvbWVyQWRkcmVzc10gPSBTYWZlTWF0aC5zdWIodG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSwgX2Ftb3VudE9mVG9rZW5zKTsKICAgICAgICB0b2tlbkJhbGFuY2VMZWRnZXJfW190b0FkZHJlc3NdID0gU2FmZU1hdGguYWRkKHRva2VuQmFsYW5jZUxlZGdlcl9bX3RvQWRkcmVzc10sIF90YXhlZFRva2Vucyk7CiAgICAgICAgCiAgICAgICAgLy8gdXBkYXRlIGRpdmlkZW5kIHRyYWNrZXJzCiAgICAgICAgcGF5b3V0c1RvX1tfY3VzdG9tZXJBZGRyZXNzXSAtPSAoaW50MjU2KSAocHJvZml0UGVyU2hhcmVfICogX2Ftb3VudE9mVG9rZW5zKTsKICAgICAgICBwYXlvdXRzVG9fW190b0FkZHJlc3NdICs9IChpbnQyNTYpIChwcm9maXRQZXJTaGFyZV8gKiBfdGF4ZWRUb2tlbnMpOwogICAgICAgIAogICAgICAgIC8vIGRpc3BlcnNlIGRpdmlkZW5kcyBhbW9uZyBob2xkZXJzCiAgICAgICAgcHJvZml0UGVyU2hhcmVfID0gU2FmZU1hdGguYWRkKHByb2ZpdFBlclNoYXJlXywgKF9kaXZpZGVuZHMgKiBtYWduaXR1ZGUpIC8gdG9rZW5TdXBwbHlfKTsKICAgICAgICAKICAgICAgICAvLyBmaXJlIGV2ZW50CiAgICAgICAgVHJhbnNmZXIoX2N1c3RvbWVyQWRkcmVzcywgX3RvQWRkcmVzcywgX3RheGVkVG9rZW5zKTsKICAgICAgICAKICAgICAgICAvLyBFUkMyMAogICAgICAgIHJldHVybiB0cnVlOwogICAgICAgCiAgICB9CiAgICAKICAgIC8qLS0tLS0tLS0tLSAgQURNSU5JU1RSQVRPUiBPTkxZIEZVTkNUSU9OUyAgLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBJbiBjYXNlIG9uZSBvZiB1cyBkaWVzLCB3ZSBuZWVkIHRvIHJlcGxhY2Ugb3Vyc2VsdmVzLgogICAgICovCgogICAgLy8gbm8geW91IG1lbWVycyBPbmx5T3BlbiBhbHNvIGNoZWNrcyBpZiBhZG1pbiBjYWxscyBpdAogICAgZnVuY3Rpb24gT3BlbkNvbnRyYWN0KCkgcHVibGljIE9ubHlPcGVuKCkgewogICAgICAgIElzT3Blbj10cnVlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFByZWNhdXRpb25hcnkgbWVhc3VyZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgbWFzdGVybm9kZSByYXRlLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRTdGFraW5nUmVxdWlyZW1lbnQodWludDI1NiBfYW1vdW50T2ZUb2tlbnMpCiAgICAgICAgb25seUFkbWluaXN0cmF0b3IoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHN0YWtpbmdSZXF1aXJlbWVudCA9IF9hbW91bnRPZlRva2VuczsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBJZiB3ZSB3YW50IHRvIHJlYnJhbmQsIHdlIGNhbi4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0TmFtZShzdHJpbmcgX25hbWUpCiAgICAgICAgb25seUFkbWluaXN0cmF0b3IoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIG5hbWUgPSBfbmFtZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBJZiB3ZSB3YW50IHRvIHJlYnJhbmQsIHdlIGNhbi4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0U3ltYm9sKHN0cmluZyBfc3ltYm9sKQogICAgICAgIG9ubHlBZG1pbmlzdHJhdG9yKCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOwogICAgfQoKICAgIAogICAgLyotLS0tLS0tLS0tICBIRUxQRVJTIEFORCBDQUxDVUxBVE9SUyAgLS0tLS0tLS0tLSovCiAgICAvKioKICAgICAqIE1ldGhvZCB0byB2aWV3IHRoZSBjdXJyZW50IEV0aGVyZXVtIHN0b3JlZCBpbiB0aGUgY29udHJhY3QKICAgICAqIEV4YW1wbGU6IHRvdGFsRXRoZXJldW1CYWxhbmNlKCkKICAgICAqLwogICAgZnVuY3Rpb24gdG90YWxFdGhlcmV1bUJhbGFuY2UoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBSZXRyaWV2ZSB0aGUgdG90YWwgdG9rZW4gc3VwcGx5LgogICAgICovCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gdG9rZW5TdXBwbHlfOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHJpZXZlIHRoZSB0b2tlbnMgb3duZWQgYnkgdGhlIGNhbGxlci4KICAgICAqLwogICAgZnVuY3Rpb24gbXlUb2tlbnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mKF9jdXN0b21lckFkZHJlc3MpOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHJpZXZlIHRoZSBkaXZpZGVuZHMgb3duZWQgYnkgdGhlIGNhbGxlci4KICAgICAqIElmIGBfaW5jbHVkZVJlZmVycmFsQm9udXNgIGlzIHRvIHRvIDEvdHJ1ZSwgdGhlIHJlZmVycmFsIGJvbnVzIHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIGNhbGN1bGF0aW9ucy4KICAgICAqIFRoZSByZWFzb24gZm9yIHRoaXMsIGlzIHRoYXQgaW4gdGhlIGZyb250ZW5kLCB3ZSB3aWxsIHdhbnQgdG8gZ2V0IHRoZSB0b3RhbCBkaXZzIChnbG9iYWwgKyByZWYpCiAgICAgKiBCdXQgaW4gdGhlIGludGVybmFsIGNhbGN1bGF0aW9ucywgd2Ugd2FudCB0aGVtIHNlcGFyYXRlLiAKICAgICAqLyAKICAgIGZ1bmN0aW9uIG15RGl2aWRlbmRzKGJvb2wgX2luY2x1ZGVSZWZlcnJhbEJvbnVzKSAKICAgICAgICBwdWJsaWMgCiAgICAgICAgdmlldyAKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICByZXR1cm4gX2luY2x1ZGVSZWZlcnJhbEJvbnVzID8gZGl2aWRlbmRzT2YoX2N1c3RvbWVyQWRkcmVzcykgKyByZWZlcnJhbEJhbGFuY2VfW19jdXN0b21lckFkZHJlc3NdIDogZGl2aWRlbmRzT2YoX2N1c3RvbWVyQWRkcmVzcykgOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHJpZXZlIHRoZSB0b2tlbiBiYWxhbmNlIG9mIGFueSBzaW5nbGUgYWRkcmVzcy4KICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2N1c3RvbWVyQWRkcmVzcykKICAgICAgICB2aWV3CiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiB0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFJldHJpZXZlIHRoZSBkaXZpZGVuZCBiYWxhbmNlIG9mIGFueSBzaW5nbGUgYWRkcmVzcy4KICAgICAqLwogICAgZnVuY3Rpb24gZGl2aWRlbmRzT2YoYWRkcmVzcyBfY3VzdG9tZXJBZGRyZXNzKQogICAgICAgIHZpZXcKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuICh1aW50MjU2KSAoKGludDI1NikocHJvZml0UGVyU2hhcmVfICogdG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSkgLSBwYXlvdXRzVG9fW19jdXN0b21lckFkZHJlc3NdKSAvIG1hZ25pdHVkZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIGJ1eSBwcmljZSBvZiAxIGluZGl2aWR1YWwgdG9rZW4uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbGxQcmljZSgpIAogICAgICAgIHB1YmxpYyAKICAgICAgICB2aWV3IAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICAvLyBvdXIgY2FsY3VsYXRpb24gcmVsaWVzIG9uIHRoZSB0b2tlbiBzdXBwbHksIHNvIHdlIG5lZWQgc3VwcGx5LiBEb2guCiAgICAgICAgaWYodG9rZW5TdXBwbHlfID09IDApewogICAgICAgICAgICByZXR1cm4gdG9rZW5QcmljZUluaXRpYWxfIC0gdG9rZW5QcmljZUluY3JlbWVudGFsXzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50MjU2IF9ldGhlcmV1bSA9IHRva2Vuc1RvRXRoZXJldW1fKDFlMTgpOwogICAgICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBTYWZlTWF0aC5kaXYoX2V0aGVyZXVtLCBkaXZpZGVuZEZlZV8gICk7CiAgICAgICAgICAgIHVpbnQyNTYgX3RheGVkRXRoZXJldW0gPSBTYWZlTWF0aC5zdWIoX2V0aGVyZXVtLCBfZGl2aWRlbmRzKTsKICAgICAgICAgICAgcmV0dXJuIF90YXhlZEV0aGVyZXVtOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIHNlbGwgcHJpY2Ugb2YgMSBpbmRpdmlkdWFsIHRva2VuLgogICAgICovCiAgICBmdW5jdGlvbiBidXlQcmljZSgpIAogICAgICAgIHB1YmxpYyAKICAgICAgICB2aWV3IAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICAvLyBvdXIgY2FsY3VsYXRpb24gcmVsaWVzIG9uIHRoZSB0b2tlbiBzdXBwbHksIHNvIHdlIG5lZWQgc3VwcGx5LiBEb2guCiAgICAgICAgaWYodG9rZW5TdXBwbHlfID09IDApewogICAgICAgICAgICByZXR1cm4gdG9rZW5QcmljZUluaXRpYWxfICsgdG9rZW5QcmljZUluY3JlbWVudGFsXzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50MjU2IF9ldGhlcmV1bSA9IHRva2Vuc1RvRXRoZXJldW1fKDFlMTgpOwogICAgICAgICAgICB1aW50MjU2IF9kaXZpZGVuZHMgPSBTYWZlTWF0aC5kaXYoX2V0aGVyZXVtLCBkaXZpZGVuZEZlZV8gICk7CiAgICAgICAgICAgIHVpbnQyNTYgX3RheGVkRXRoZXJldW0gPSBTYWZlTWF0aC5hZGQoX2V0aGVyZXVtLCBfZGl2aWRlbmRzKTsKICAgICAgICAgICAgcmV0dXJuIF90YXhlZEV0aGVyZXVtOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBGdW5jdGlvbiBmb3IgdGhlIGZyb250ZW5kIHRvIGR5bmFtaWNhbGx5IHJldHJpZXZlIHRoZSBwcmljZSBzY2FsaW5nIG9mIGJ1eSBvcmRlcnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2Vuc1JlY2VpdmVkKHVpbnQyNTYgX2V0aGVyZXVtVG9TcGVuZCkgCiAgICAgICAgcHVibGljIAogICAgICAgIHZpZXcgCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLmRpdihfZXRoZXJldW1Ub1NwZW5kLCBkaXZpZGVuZEZlZV8pOwogICAgICAgIHVpbnQyNTYgX3RheGVkRXRoZXJldW0gPSBTYWZlTWF0aC5zdWIoX2V0aGVyZXVtVG9TcGVuZCwgX2RpdmlkZW5kcyk7CiAgICAgICAgdWludDI1NiBfYW1vdW50T2ZUb2tlbnMgPSBldGhlcmV1bVRvVG9rZW5zXyhfdGF4ZWRFdGhlcmV1bSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIF9hbW91bnRPZlRva2VuczsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBGdW5jdGlvbiBmb3IgdGhlIGZyb250ZW5kIHRvIGR5bmFtaWNhbGx5IHJldHJpZXZlIHRoZSBwcmljZSBzY2FsaW5nIG9mIHNlbGwgb3JkZXJzLgogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVFdGhlcmV1bVJlY2VpdmVkKHVpbnQyNTYgX3Rva2Vuc1RvU2VsbCkgCiAgICAgICAgcHVibGljIAogICAgICAgIHZpZXcgCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHJlcXVpcmUoX3Rva2Vuc1RvU2VsbCA8PSB0b2tlblN1cHBseV8pOwogICAgICAgIHVpbnQyNTYgX2V0aGVyZXVtID0gdG9rZW5zVG9FdGhlcmV1bV8oX3Rva2Vuc1RvU2VsbCk7CiAgICAgICAgdWludDI1NiBfZGl2aWRlbmRzID0gU2FmZU1hdGguZGl2KF9ldGhlcmV1bSwgZGl2aWRlbmRGZWVfKTsKICAgICAgICB1aW50MjU2IF90YXhlZEV0aGVyZXVtID0gU2FmZU1hdGguc3ViKF9ldGhlcmV1bSwgX2RpdmlkZW5kcyk7CiAgICAgICAgcmV0dXJuIF90YXhlZEV0aGVyZXVtOwogICAgfQogICAgCiAgICAKICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICA9ICAgICAgICAgICAgSU5URVJOQUwgRlVOQ1RJT05TICAgICAgICAgICAgPQogICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KICAgIGZ1bmN0aW9uIHB1cmNoYXNlVG9rZW5zKHVpbnQyNTYgX2luY29taW5nRXRoZXJldW0sIGFkZHJlc3MgX3JlZmVycmVkQnkpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBPbmx5T3BlbigpCiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIC8vIGRhdGEgc2V0dXAKICAgICAgICBhZGRyZXNzIF9jdXN0b21lckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHVpbnQyNTYgX3VuZGl2aWRlZERpdmlkZW5kcyA9IFNhZmVNYXRoLmRpdihfaW5jb21pbmdFdGhlcmV1bSwgZGl2aWRlbmRGZWVfKTsKICAgICAgICB1aW50MjU2IF9yZWZlcnJhbEJvbnVzID0gU2FmZU1hdGguZGl2KF91bmRpdmlkZWREaXZpZGVuZHMsIDMpOwogICAgICAgIHVpbnQyNTYgX2RpdmlkZW5kcyA9IFNhZmVNYXRoLnN1YihfdW5kaXZpZGVkRGl2aWRlbmRzLCBfcmVmZXJyYWxCb251cyk7CiAgICAgICAgdWludDI1NiBfdGF4ZWRFdGhlcmV1bSA9IFNhZmVNYXRoLnN1YihfaW5jb21pbmdFdGhlcmV1bSwgX3VuZGl2aWRlZERpdmlkZW5kcyk7CiAgICAgICAgdWludDI1NiBfYW1vdW50T2ZUb2tlbnMgPSBldGhlcmV1bVRvVG9rZW5zXyhfdGF4ZWRFdGhlcmV1bSk7CiAgICAgICAgdWludDI1NiBfZmVlID0gX2RpdmlkZW5kcyAqIG1hZ25pdHVkZTsKIAogICAgICAgIC8vIG5vIHBvaW50IGluIGNvbnRpbnVpbmcgZXhlY3V0aW9uIGlmIE9QIGlzIGEgcG9vcmZhZyBydXNzaWFuIGhhY2tlcgogICAgICAgIC8vIHByZXZlbnRzIG92ZXJmbG93IGluIHRoZSBjYXNlIHRoYXQgdGhlIHB5cmFtaWQgc29tZWhvdyBtYWdpY2FsbHkgc3RhcnRzIGJlaW5nIHVzZWQgYnkgZXZlcnlvbmUgaW4gdGhlIHdvcmxkCiAgICAgICAgLy8gKG9yIGhhY2tlcnMpCiAgICAgICAgLy8gYW5kIHllcyB3ZSBrbm93IHRoYXQgdGhlIHNhZmVtYXRoIGZ1bmN0aW9uIGF1dG9tYXRpY2FsbHkgcnVsZXMgb3V0IHRoZSAiZ3JlYXRlciB0aGVuIiBlcXVhc2lvbi4KICAgICAgICByZXF1aXJlKF9hbW91bnRPZlRva2VucyA+IDAgJiYgKFNhZmVNYXRoLmFkZChfYW1vdW50T2ZUb2tlbnMsdG9rZW5TdXBwbHlfKSA+IHRva2VuU3VwcGx5XykpOwogICAgICAgIAogICAgICAgIC8vIGlzIHRoZSB1c2VyIHJlZmVycmVkIGJ5IGEgbWFzdGVybm9kZT8KICAgICAgICBpZigKICAgICAgICAgICAgLy8gaXMgdGhpcyBhIHJlZmVycmVkIHB1cmNoYXNlPwogICAgICAgICAgICBfcmVmZXJyZWRCeSAhPSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAgJiYKCiAgICAgICAgICAgIC8vIG5vIGNoZWF0aW5nIQogICAgICAgICAgICBfcmVmZXJyZWRCeSAhPSBfY3VzdG9tZXJBZGRyZXNzICYmCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBkb2VzIHRoZSByZWZlcnJlciBoYXZlIGF0IGxlYXN0IFggd2hvbGUgdG9rZW5zPwogICAgICAgICAgICAvLyBpLmUgaXMgdGhlIHJlZmVycmVyIGEgZ29kbHkgY2hhZCBtYXN0ZXJub2RlCiAgICAgICAgICAgIHRva2VuQmFsYW5jZUxlZGdlcl9bX3JlZmVycmVkQnldID49IHN0YWtpbmdSZXF1aXJlbWVudAogICAgICAgICl7CiAgICAgICAgICAgIC8vIHdlYWx0aCByZWRpc3RyaWJ1dGlvbgogICAgICAgICAgICByZWZlcnJhbEJhbGFuY2VfW19yZWZlcnJlZEJ5XSA9IFNhZmVNYXRoLmFkZChyZWZlcnJhbEJhbGFuY2VfW19yZWZlcnJlZEJ5XSwgX3JlZmVycmFsQm9udXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIG5vIHJlZiBwdXJjaGFzZQogICAgICAgICAgICAvLyBhZGQgdGhlIHJlZmVycmFsIGJvbnVzIGJhY2sgdG8gdGhlIGdsb2JhbCBkaXZpZGVuZHMgY2FrZQogICAgICAgICAgICBfZGl2aWRlbmRzID0gU2FmZU1hdGguYWRkKF9kaXZpZGVuZHMsIF9yZWZlcnJhbEJvbnVzKTsKICAgICAgICAgICAgX2ZlZSA9IF9kaXZpZGVuZHMgKiBtYWduaXR1ZGU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIHdlIGNhbid0IGdpdmUgcGVvcGxlIGluZmluaXRlIGV0aGVyZXVtCiAgICAgICAgaWYodG9rZW5TdXBwbHlfID4gMCl7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBhZGQgdG9rZW5zIHRvIHRoZSBwb29sCiAgICAgICAgICAgIHRva2VuU3VwcGx5XyA9IFNhZmVNYXRoLmFkZCh0b2tlblN1cHBseV8sIF9hbW91bnRPZlRva2Vucyk7CiAKICAgICAgICAgICAgLy8gdGFrZSB0aGUgYW1vdW50IG9mIGRpdmlkZW5kcyBnYWluZWQgdGhyb3VnaCB0aGlzIHRyYW5zYWN0aW9uLCBhbmQgYWxsb2NhdGVzIHRoZW0gZXZlbmx5IHRvIGVhY2ggc2hhcmVob2xkZXIKICAgICAgICAgICAgcHJvZml0UGVyU2hhcmVfICs9IChfZGl2aWRlbmRzICogbWFnbml0dWRlIC8gKHRva2VuU3VwcGx5XykpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoZSBjdXN0b21lciByZWNlaXZlcyBvdmVyIGhpcyBwdXJjaGFzZSAKICAgICAgICAgICAgX2ZlZSA9IF9mZWUgLSAoX2ZlZS0oX2Ftb3VudE9mVG9rZW5zICogKF9kaXZpZGVuZHMgKiBtYWduaXR1ZGUgLyAodG9rZW5TdXBwbHlfKSkpKTsKICAgICAgICAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBhZGQgdG9rZW5zIHRvIHRoZSBwb29sCiAgICAgICAgICAgIHRva2VuU3VwcGx5XyA9IF9hbW91bnRPZlRva2VuczsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gdXBkYXRlIGNpcmN1bGF0aW5nIHN1cHBseSAmIHRoZSBsZWRnZXIgYWRkcmVzcyBmb3IgdGhlIGN1c3RvbWVyCiAgICAgICAgdG9rZW5CYWxhbmNlTGVkZ2VyX1tfY3VzdG9tZXJBZGRyZXNzXSA9IFNhZmVNYXRoLmFkZCh0b2tlbkJhbGFuY2VMZWRnZXJfW19jdXN0b21lckFkZHJlc3NdLCBfYW1vdW50T2ZUb2tlbnMpOwogICAgICAgIAogICAgICAgIC8vIFRlbGxzIHRoZSBjb250cmFjdCB0aGF0IHRoZSBidXllciBkb2Vzbid0IGRlc2VydmUgZGl2aWRlbmRzIGZvciB0aGUgdG9rZW5zIGJlZm9yZSB0aGV5IG93bmVkIHRoZW07CiAgICAgICAgLy9yZWFsbHkgaSBrbm93IHlvdSB0aGluayB5b3UgZG8gYnV0IHlvdSBkb24ndAogICAgICAgIGludDI1NiBfdXBkYXRlZFBheW91dHMgPSAoaW50MjU2KSAoKHByb2ZpdFBlclNoYXJlXyAqIF9hbW91bnRPZlRva2VucykgLSBfZmVlKTsKICAgICAgICBwYXlvdXRzVG9fW19jdXN0b21lckFkZHJlc3NdICs9IF91cGRhdGVkUGF5b3V0czsKICAgICAgICAKICAgICAgICAvLyBmaXJlIGV2ZW50CiAgICAgICAgb25Ub2tlblB1cmNoYXNlKF9jdXN0b21lckFkZHJlc3MsIF9pbmNvbWluZ0V0aGVyZXVtLCBfYW1vdW50T2ZUb2tlbnMsIF9yZWZlcnJlZEJ5KTsKICAgICAgICAKICAgICAgICByZXR1cm4gX2Ftb3VudE9mVG9rZW5zOwogICAgfQoKICAgIC8qKgogICAgICogQ2FsY3VsYXRlIFRva2VuIHByaWNlIGJhc2VkIG9uIGFuIGFtb3VudCBvZiBpbmNvbWluZyBldGhlcmV1bQogICAgICogSXQncyBhbiBhbGdvcml0aG0sIGhvcGVmdWxseSB3ZSBnYXZlIHlvdSB0aGUgd2hpdGVwYXBlciB3aXRoIGl0IGluIHNjaWVudGlmaWMgbm90YXRpb247CiAgICAgKiBTb21lIGNvbnZlcnNpb25zIG9jY3VycmVkIHRvIHByZXZlbnQgZGVjaW1hbCBlcnJvcnMgb3IgdW5kZXJmbG93cyAvIG92ZXJmbG93cyBpbiBzb2xpZGl0eSBjb2RlLgogICAgICovCiAgICBmdW5jdGlvbiBldGhlcmV1bVRvVG9rZW5zXyh1aW50MjU2IF9ldGhlcmV1bSkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBfdG9rZW5QcmljZUluaXRpYWwgPSB0b2tlblByaWNlSW5pdGlhbF8gKiAxZTE4OwogICAgICAgIHVpbnQyNTYgX3Rva2Vuc1JlY2VpdmVkID0gCiAgICAgICAgICgKICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgLy8gdW5kZXJmbG93IGF0dGVtcHRzIEJURk8KICAgICAgICAgICAgICAgIFNhZmVNYXRoLnN1YigKICAgICAgICAgICAgICAgICAgICAoc3FydAogICAgICAgICAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX3Rva2VuUHJpY2VJbml0aWFsKioyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDIqKHRva2VuUHJpY2VJbmNyZW1lbnRhbF8gKiAxZTE4KSooX2V0aGVyZXVtICogMWUxOCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKCh0b2tlblByaWNlSW5jcmVtZW50YWxfKSoqMikqKHRva2VuU3VwcGx5XyoqMikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMioodG9rZW5QcmljZUluY3JlbWVudGFsXykqX3Rva2VuUHJpY2VJbml0aWFsKnRva2VuU3VwcGx5XykKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICksIF90b2tlblByaWNlSW5pdGlhbAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApLyh0b2tlblByaWNlSW5jcmVtZW50YWxfKQogICAgICAgICktKHRva2VuU3VwcGx5XykKICAgICAgICA7CiAgCiAgICAgICAgcmV0dXJuIF90b2tlbnNSZWNlaXZlZDsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBDYWxjdWxhdGUgdG9rZW4gc2VsbCB2YWx1ZS4KICAgICAqIEl0J3MgYW4gYWxnb3JpdGhtLCBob3BlZnVsbHkgd2UgZ2F2ZSB5b3UgdGhlIHdoaXRlcGFwZXIgd2l0aCBpdCBpbiBzY2llbnRpZmljIG5vdGF0aW9uOwogICAgICogU29tZSBjb252ZXJzaW9ucyBvY2N1cnJlZCB0byBwcmV2ZW50IGRlY2ltYWwgZXJyb3JzIG9yIHVuZGVyZmxvd3MgLyBvdmVyZmxvd3MgaW4gc29saWRpdHkgY29kZS4KICAgICAqLwogICAgIGZ1bmN0aW9uIHRva2Vuc1RvRXRoZXJldW1fKHVpbnQyNTYgX3Rva2VucykKICAgICAgICBpbnRlcm5hbAogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CgogICAgICAgIHVpbnQyNTYgdG9rZW5zXyA9IChfdG9rZW5zICsgMWUxOCk7CiAgICAgICAgdWludDI1NiBfdG9rZW5TdXBwbHkgPSAodG9rZW5TdXBwbHlfICsgMWUxOCk7CiAgICAgICAgdWludDI1NiBfZXRoZXJSZWNlaXZlZCA9CiAgICAgICAgKAogICAgICAgICAgICAvLyB1bmRlcmZsb3cgYXR0ZW1wdHMgQlRGTwogICAgICAgICAgICBTYWZlTWF0aC5zdWIoCiAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlblByaWNlSW5pdGlhbF8gKyh0b2tlblByaWNlSW5jcmVtZW50YWxfICogKF90b2tlblN1cHBseS8xZTE4KSkKICAgICAgICAgICAgICAgICAgICAgICAgKS10b2tlblByaWNlSW5jcmVtZW50YWxfCiAgICAgICAgICAgICAgICAgICAgKSoodG9rZW5zXyAtIDFlMTgpCiAgICAgICAgICAgICAgICApLCh0b2tlblByaWNlSW5jcmVtZW50YWxfKigodG9rZW5zXyoqMi10b2tlbnNfKS8xZTE4KSkvMgogICAgICAgICAgICApCiAgICAgICAgLzFlMTgpOwogICAgICAgIHJldHVybiBfZXRoZXJSZWNlaXZlZDsKICAgIH0KICAgIAogICAgCiAgICAvL1RoaXMgaXMgd2hlcmUgYWxsIHlvdXIgZ2FzIGdvZXMsIHNvcnJ5CiAgICAvL05vdCBzb3JyeSwgeW91IHByb2JhYmx5IG9ubHkgcGFpZCAxIGd3ZWkKICAgIGZ1bmN0aW9uIHNxcnQodWludCB4KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeSkgewogICAgICAgIHVpbnQgeiA9ICh4ICsgMSkgLyAyOwogICAgICAgIHkgPSB4OwogICAgICAgIHdoaWxlICh6IDwgeSkgewogICAgICAgICAgICB5ID0gejsKICAgICAgICAgICAgeiA9ICh4IC8geiArIHopIC8gMjsKICAgICAgICB9CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIC8qKgogICAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAgICovCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICAgKi8KICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9'.
	

]
