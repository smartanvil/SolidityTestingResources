Class {
	#name : #SRTb70f62853d7a56f58339a9e850bd7e91f3adfac8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb70f62853d7a56f58339a9e850bd7e91f3adfac8 >> base64 [
	^ 'Ly8gcHJveHkuc29sIC0gZXhlY3V0ZSBhY3Rpb25zIGF0b21pY2FsbHkgdGhyb3VnaCB0aGUgcHJveHkncyBpZGVudGl0eQoKLy8gQ29weXJpZ2h0IChDKSAyMDE3ICBEYXBwSHViLCBMTEMKCi8vIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5Ci8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5Ci8vIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgovLyBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKLy8gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKLy8gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKLy8gYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xMzsKCmNvbnRyYWN0IERTQXV0aG9yaXR5IHsKICAgIGZ1bmN0aW9uIGNhbkNhbGwoCiAgICAgICAgYWRkcmVzcyBzcmMsIGFkZHJlc3MgZHN0LCBieXRlczQgc2lnCiAgICApIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBEU0F1dGhFdmVudHMgewogICAgZXZlbnQgTG9nU2V0QXV0aG9yaXR5IChhZGRyZXNzIGluZGV4ZWQgYXV0aG9yaXR5KTsKICAgIGV2ZW50IExvZ1NldE93bmVyICAgICAoYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKfQoKY29udHJhY3QgRFNBdXRoIGlzIERTQXV0aEV2ZW50cyB7CiAgICBEU0F1dGhvcml0eSAgcHVibGljICBhdXRob3JpdHk7CiAgICBhZGRyZXNzICAgICAgcHVibGljICBvd25lcjsKCiAgICBmdW5jdGlvbiBEU0F1dGgoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBMb2dTZXRPd25lcihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRPd25lcihhZGRyZXNzIG93bmVyXykKICAgICAgICBwdWJsaWMKICAgICAgICBhdXRoCiAgICB7CiAgICAgICAgb3duZXIgPSBvd25lcl87CiAgICAgICAgTG9nU2V0T3duZXIob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEF1dGhvcml0eShEU0F1dGhvcml0eSBhdXRob3JpdHlfKQogICAgICAgIHB1YmxpYwogICAgICAgIGF1dGgKICAgIHsKICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHlfOwogICAgICAgIExvZ1NldEF1dGhvcml0eShhdXRob3JpdHkpOwogICAgfQoKICAgIG1vZGlmaWVyIGF1dGggewogICAgICAgIHJlcXVpcmUoaXNBdXRob3JpemVkKG1zZy5zZW5kZXIsIG1zZy5zaWcpKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChhZGRyZXNzIHNyYywgYnl0ZXM0IHNpZykgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHNyYyA9PSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoc3JjID09IG93bmVyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoYXV0aG9yaXR5ID09IERTQXV0aG9yaXR5KDApKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gYXV0aG9yaXR5LmNhbkNhbGwoc3JjLCB0aGlzLCBzaWcpOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgRFNOb3RlIHsKICAgIGV2ZW50IExvZ05vdGUoCiAgICAgICAgYnl0ZXM0ICAgaW5kZXhlZCAgc2lnLAogICAgICAgIGFkZHJlc3MgIGluZGV4ZWQgIGd1eSwKICAgICAgICBieXRlczMyICBpbmRleGVkICBmb28sCiAgICAgICAgYnl0ZXMzMiAgaW5kZXhlZCAgYmFyLAogICAgICAgIHVpbnQgICAgICAgICAgICAgIHdhZCwKICAgICAgICBieXRlcyAgICAgICAgICAgICBmYXgKICAgICkgYW5vbnltb3VzOwoKICAgIG1vZGlmaWVyIG5vdGUgewogICAgICAgIGJ5dGVzMzIgZm9vOwogICAgICAgIGJ5dGVzMzIgYmFyOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGZvbyA6PSBjYWxsZGF0YWxvYWQoNCkKICAgICAgICAgICAgYmFyIDo9IGNhbGxkYXRhbG9hZCgzNikKICAgICAgICB9CgogICAgICAgIExvZ05vdGUobXNnLnNpZywgbXNnLnNlbmRlciwgZm9vLCBiYXIsIG1zZy52YWx1ZSwgbXNnLmRhdGEpOwoKICAgICAgICBfOwogICAgfQp9CgovLyBEU1Byb3h5Ci8vIEFsbG93cyBjb2RlIGV4ZWN1dGlvbiB1c2luZyBhIHBlcnNpc3RhbnQgaWRlbnRpdHkgVGhpcyBjYW4gYmUgdmVyeQovLyB1c2VmdWwgdG8gZXhlY3V0ZSBhIHNlcXVlbmNlIG9mIGF0b21pYyBhY3Rpb25zLiBTaW5jZSB0aGUgb3duZXIgb2YKLy8gdGhlIHByb3h5IGNhbiBiZSBjaGFuZ2VkLCB0aGlzIGFsbG93cyBmb3IgZHluYW1pYyBvd25lcnNoaXAgbW9kZWxzCi8vIGkuZS4gYSBtdWx0aXNpZwpjb250cmFjdCBEU1Byb3h5IGlzIERTQXV0aCwgRFNOb3RlIHsKICAgIERTUHJveHlDYWNoZSBwdWJsaWMgY2FjaGU7ICAvLyBnbG9iYWwgY2FjaGUgZm9yIGNvbnRyYWN0cwoKICAgIGZ1bmN0aW9uIERTUHJveHkoYWRkcmVzcyBfY2FjaGVBZGRyKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoc2V0Q2FjaGUoX2NhY2hlQWRkcikpOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgfQoKICAgIC8vIHVzZSB0aGUgcHJveHkgdG8gZXhlY3V0ZSBjYWxsZGF0YSBfZGF0YSBvbiBjb250cmFjdCBfY29kZQogICAgZnVuY3Rpb24gZXhlY3V0ZShieXRlcyBfY29kZSwgYnl0ZXMgX2RhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgcGF5YWJsZQogICAgICAgIHJldHVybnMgKGFkZHJlc3MgdGFyZ2V0LCBieXRlczMyIHJlc3BvbnNlKQogICAgewogICAgICAgIHRhcmdldCA9IGNhY2hlLnJlYWQoX2NvZGUpOwogICAgICAgIGlmICh0YXJnZXQgPT0gMHgwKSB7CiAgICAgICAgICAgIC8vIGRlcGxveSBjb250cmFjdCAmIHN0b3JlIGl0cyBhZGRyZXNzIGluIGNhY2hlCiAgICAgICAgICAgIHRhcmdldCA9IGNhY2hlLndyaXRlKF9jb2RlKTsKICAgICAgICB9CgogICAgICAgIHJlc3BvbnNlID0gZXhlY3V0ZSh0YXJnZXQsIF9kYXRhKTsKICAgIH0KCiAgICBmdW5jdGlvbiBleGVjdXRlKGFkZHJlc3MgX3RhcmdldCwgYnl0ZXMgX2RhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgYXV0aAogICAgICAgIG5vdGUKICAgICAgICBwYXlhYmxlCiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMiByZXNwb25zZSkKICAgIHsKICAgICAgICByZXF1aXJlKF90YXJnZXQgIT0gMHgwKTsKCiAgICAgICAgLy8gY2FsbCBjb250cmFjdCBpbiBjdXJyZW50IGNvbnRleHQKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBzdWNjZWVkZWQgOj0gZGVsZWdhdGVjYWxsKHN1YihnYXMsIDUwMDApLCBfdGFyZ2V0LCBhZGQoX2RhdGEsIDB4MjApLCBtbG9hZChfZGF0YSksIDAsIDMyKQogICAgICAgICAgICByZXNwb25zZSA6PSBtbG9hZCgwKSAgICAgIC8vIGxvYWQgZGVsZWdhdGVjYWxsIG91dHB1dAogICAgICAgICAgICBzd2l0Y2ggaXN6ZXJvKHN1Y2NlZWRlZCkKICAgICAgICAgICAgY2FzZSAxIHsKICAgICAgICAgICAgICAgIC8vIHRocm93IGlmIGRlbGVnYXRlY2FsbCBmYWlsZWQKICAgICAgICAgICAgICAgIHJldmVydCgwLCAwKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vc2V0IG5ldyBjYWNoZQogICAgZnVuY3Rpb24gc2V0Q2FjaGUoYWRkcmVzcyBfY2FjaGVBZGRyKQogICAgICAgIHB1YmxpYwogICAgICAgIGF1dGgKICAgICAgICBub3RlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKF9jYWNoZUFkZHIgIT0gMHgwKTsgICAgICAgIC8vIGludmFsaWQgY2FjaGUgYWRkcmVzcwogICAgICAgIGNhY2hlID0gRFNQcm94eUNhY2hlKF9jYWNoZUFkZHIpOyAgLy8gb3ZlcndyaXRlIGNhY2hlCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8vIERTUHJveHlDYWNoZQovLyBUaGlzIGdsb2JhbCBjYWNoZSBzdG9yZXMgYWRkcmVzc2VzIG9mIGNvbnRyYWN0cyBwcmV2aW91c2x5IGRlcGxveWVkCi8vIGJ5IGEgcHJveHkuIFRoaXMgc2F2ZXMgZ2FzIGZyb20gcmVwZWF0IGRlcGxveW1lbnQgb2YgdGhlIHNhbWUKLy8gY29udHJhY3RzIGFuZCBlbGltaW5hdGVzIGJsb2NrY2hhaW4gYmxvYXQuCgovLyBCeSBkZWZhdWx0LCBhbGwgcHJveGllcyBkZXBsb3llZCBmcm9tIHRoZSBzYW1lIGZhY3Rvcnkgc3RvcmUKLy8gY29udHJhY3RzIGluIHRoZSBzYW1lIGNhY2hlLiBUaGUgY2FjaGUgYSBwcm94eSBpbnN0YW5jZSB1c2VzIGNhbiBiZQovLyBjaGFuZ2VkLiAgVGhlIGNhY2hlIHVzZXMgdGhlIHNoYTMgaGFzaCBvZiBhIGNvbnRyYWN0J3MgYnl0ZWNvZGUgdG8KLy8gbG9va3VwIHRoZSBhZGRyZXNzCmNvbnRyYWN0IERTUHJveHlDYWNoZSB7CiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYWRkcmVzcykgY2FjaGU7CgogICAgZnVuY3Rpb24gcmVhZChieXRlcyBfY29kZSkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIGJ5dGVzMzIgaGFzaCA9IGtlY2NhazI1NihfY29kZSk7CiAgICAgICAgcmV0dXJuIGNhY2hlW2hhc2hdOwogICAgfQoKICAgIGZ1bmN0aW9uIHdyaXRlKGJ5dGVzIF9jb2RlKSBwdWJsaWMgcmV0dXJucyAoYWRkcmVzcyB0YXJnZXQpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHRhcmdldCA6PSBjcmVhdGUoMCwgYWRkKF9jb2RlLCAweDIwKSwgbWxvYWQoX2NvZGUpKQogICAgICAgICAgICBzd2l0Y2ggaXN6ZXJvKGV4dGNvZGVzaXplKHRhcmdldCkpCiAgICAgICAgICAgIGNhc2UgMSB7CiAgICAgICAgICAgICAgICAvLyB0aHJvdyBpZiBjb250cmFjdCBmYWlsZWQgdG8gZGVwbG95CiAgICAgICAgICAgICAgICByZXZlcnQoMCwgMCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBieXRlczMyIGhhc2ggPSBrZWNjYWsyNTYoX2NvZGUpOwogICAgICAgIGNhY2hlW2hhc2hdID0gdGFyZ2V0OwogICAgfQp9'.
	

]
