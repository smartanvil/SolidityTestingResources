Class {
	#name : #SRT73e5451bcf4f7c47946abe89c772f3e6576909c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT73e5451bcf4f7c47946abe89c772f3e6576909c3 >> base64 [
	^ ''.
	

]
