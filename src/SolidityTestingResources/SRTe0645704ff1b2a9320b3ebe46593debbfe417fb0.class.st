Class {
	#name : #SRTe0645704ff1b2a9320b3ebe46593debbfe417fb0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe0645704ff1b2a9320b3ebe46593debbfe417fb0 >> base64 [
	^ ''.
	

]
