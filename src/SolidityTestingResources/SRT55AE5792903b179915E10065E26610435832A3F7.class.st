Class {
	#name : #SRT55AE5792903b179915E10065E26610435832A3F7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55AE5792903b179915E10065E26610435832A3F7 >> base64 [
	^ ''.
	

]
