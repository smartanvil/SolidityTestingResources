Class {
	#name : #SRT47423b0fdb181ecab813c908307e9795c0272db7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47423b0fdb181ecab813c908307e9795c0272db7 >> base64 [
	^ ''.
	

]
