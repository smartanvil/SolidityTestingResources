Class {
	#name : #SRT1D9E61248F88DC60889BB269FCf2244827f3A682,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1D9E61248F88DC60889BB269FCf2244827f3A682 >> base64 [
	^ ''.
	

]
