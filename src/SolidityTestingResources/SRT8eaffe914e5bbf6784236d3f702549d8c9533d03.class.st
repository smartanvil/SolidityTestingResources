Class {
	#name : #SRT8eaffe914e5bbf6784236d3f702549d8c9533d03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8eaffe914e5bbf6784236d3f702549d8c9533d03 >> base64 [
	^ ''.
	

]
