Class {
	#name : #SRT8a6aa2091c68287d4c37e486e89850fd0e79633f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a6aa2091c68287d4c37e486e89850fd0e79633f >> base64 [
	^ ''.
	

]
