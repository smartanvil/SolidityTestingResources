Class {
	#name : #SRT57c555591b18cff058e6fabfc57a6b7c7f37c8e8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT57c555591b18cff058e6fabfc57a6b7c7f37c8e8 >> base64 [
	^ ''.
	

]
