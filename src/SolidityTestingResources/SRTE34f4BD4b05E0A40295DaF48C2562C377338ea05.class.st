Class {
	#name : #SRTE34f4BD4b05E0A40295DaF48C2562C377338ea05,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE34f4BD4b05E0A40295DaF48C2562C377338ea05 >> base64 [
	^ 'Y29udHJhY3QgUmFuZG9tSW50ZXJmYWNlIHsKCWZ1bmN0aW9uIGdldFJhbmRvbSgpIHJldHVybnMgKGJ5dGVzMzIgaGFzaCkge30KfQpjb250cmFjdCBXaW5uZXJEQkludGVyZmFjZSB7CglmdW5jdGlvbiBXaW5uZXJzKHVpbnQgaWQpIGNvbnN0YW50IHJldHVybnModWludCBkYXRlLCBhZGRyZXNzIGFkZHIsIHVpbnQgdmFsdWUsIHVpbnQgcmF0ZSwgdWludCBiZXQpICB7fQoJZnVuY3Rpb24gbmV3V2lubmVyKHVpbnQgZGF0ZSwgYWRkcmVzcyBhZGRyLCB1aW50IHZhbHVlLCB1aW50IHJhdGUsIHVpbnQgYmV0KSBleHRlcm5hbCByZXR1cm5zIChib29sKSB7fQp9CmNvbnRyYWN0IGRFdGhlcmV1bWxvdHRlcnlOZXQgewoJLyoKCQlkRXRoZXJldW1sb3R0ZXJ5TmV0CgkJQ29kZWQgYnk6IGlGQQoJCWh0dHA6Ly9kLmV0aGVyZXVtbG90dGVyeS5uZXQKCQl2ZXI6IDIuMi4xCgkqLwoJCgkvKgoJCVZhcnMKCSovCglhZGRyZXNzIHByaXZhdGUgb3duZXI7CglhZGRyZXNzIHByaXZhdGUgd2lubmVyc0RCOwoJYWRkcmVzcyBwcml2YXRlIHJhbmRvbUFkZHI7Cgl1aW50IHByaXZhdGUgY29uc3RhbnQgZmVlID0gNTsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBpbnZlc3RvckZlZSA9IDcwOwoJdWludCBwcml2YXRlIGNvbnN0YW50IHByZXBhcmVCbG9ja0RlbGF5ID0gNDsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCByb2xsTG9zc0Jsb2NrRGVsYXkgPSAzMDsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBpbnZlc3RVbml0ID0gMSBldGhlcjsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBleHRyYVJhdGUgPSAxMzA7Cgl1aW50IHByaXZhdGUgY29uc3RhbnQgbWluaW11bVJvbGxQcmljZSA9IDEwIGZpbm5leTsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBpbnZlc3RNaW5EdXJhdGlvbiA9IDEgZGF5czsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBCZXN0Um9sbFJhdGUgPSAxMDA7CgkKICAgIGJvb2wgcHVibGljIENvbnRyYWN0RW5hYmxlZCA9IHRydWU7Cgl1aW50IHB1YmxpYyBKYWNrcG90OwoJdWludCBwdWJsaWMgUm9sbENvdW50OwoJdWludCBwdWJsaWMgSmFja3BvdEhpdHM7CgkKCXVpbnQgcHJpdmF0ZSBDb250cmFjdERpc2FibGVkQmxvY2s7Cgl1aW50IHByaXZhdGUgamFja3BvdF87Cgl1aW50IHByaXZhdGUgZXh0cmFKYWNrcG90XzsKCXVpbnQgcHJpdmF0ZSBmZWVWYWx1ZTsKCXVpbnQgcHJpdmF0ZSBwbGF5ZXJzUG90OwoJCglzdHJ1Y3Qgcm9sbHNfcyB7CgkJdWludCBibG9ja051bWJlcjsKCQlieXRlczMyIGV4dHJhSGFzaDsKCQlib29sIHZhbGlkOwoJCXVpbnQgdmFsdWU7CgkJdWludCBnYW1lOwoJCXVpbnQgaWQ7CgkJdWludCBzdW1JbnZlc3Q7Cgl9CgkKCW1hcHBpbmcoYWRkcmVzcyA9PiByb2xsc19zW10pIHByaXZhdGUgcGxheWVyczsKCQoJc3RydWN0IGludmVzdG9yc19zIHsKCQlhZGRyZXNzIG93bmVyOwoJCXVpbnQgdmFsdWU7CgkJdWludCBiYWxhbmNlOwoJCWJvb2wgbGl2ZTsKCQlib29sIHZhbGlkOwoJCXVpbnQgdGltZXN0YW1wOwoJfQoJCglpbnZlc3RvcnNfc1tdIHByaXZhdGUgaW52ZXN0b3JzOwoJCglzdHJpbmcgY29uc3RhbnQgcHVibGljIEluZm9ybWF0aW9uID0gImh0dHA6Ly9kLmV0aGVyZXVtbG90dGVyeS5uZXQiOwoJCgkvKgoJCURlcGxveQoJKi8KCWZ1bmN0aW9uIGRFdGhlcmV1bWxvdHRlcnlOZXQoYWRkcmVzcyBfd2lubmVyc0RCLCBhZGRyZXNzIF9vbGRjb250cmFjdCwgYWRkcmVzcyBfcmFuZG9tQWRkcikgewoJCW93bmVyID0gbXNnLnNlbmRlcjsKCQlpbnZlc3RvcnMubGVuZ3RoKys7CgkJd2lubmVyc0RCID0gX3dpbm5lcnNEQjsKCQlyYW5kb21BZGRyID0gX3JhbmRvbUFkZHI7CgkJaWYgKF9vbGRjb250cmFjdCAhPSAweDApIHsKCQkJUm9sbENvdW50ID0gZEV0aGVyZXVtbG90dGVyeU5ldCggX29sZGNvbnRyYWN0ICkuUm9sbENvdW50KCk7CgkJCUphY2twb3RIaXRzID0gZEV0aGVyZXVtbG90dGVyeU5ldCggX29sZGNvbnRyYWN0ICkuSmFja3BvdEhpdHMoKTsKCQl9Cgl9CgkKCS8qIAoJCUNvbnN0YW5zIGZ1bmN0aW9ucwoJKi8KCWZ1bmN0aW9uIENoYW5jZU9mV2lubmluZyh1aW50IFZhbHVlKSBjb25zdGFudCByZXR1cm5zKHVpbnQgUmF0ZSwgdWludCBCZXQpIHsKCSAgICBpZiAoamFja3BvdF8gPT0gMCkgewoJICAgICAgICBSYXRlID0gMDsKCSAgICAgICAgQmV0ID0gMDsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCQlpZiAoVmFsdWUgPCBtaW5pbXVtUm9sbFByaWNlKSB7CgkJCVZhbHVlID0gbWluaW11bVJvbGxQcmljZTsKCQl9CgkJUmF0ZSA9IGdldFJhdGUoVmFsdWUpOwoJCUJldCA9IGdldFJlYWxCZXQoUmF0ZSk7CgkJd2hpbGUgKFZhbHVlIDwgQmV0KSB7CgkJICAgIFJhdGUrKzsKCQkgICAgQmV0ID0gZ2V0UmVhbEJldChSYXRlKTsKCQl9CgkJaWYgKFJhdGUgPCBCZXN0Um9sbFJhdGUpIHsgCgkJICAgIFJhdGUgPSBCZXN0Um9sbFJhdGU7CgkJICAgIEJldCA9IGdldFJlYWxCZXQoUmF0ZSk7CiAgICAgICAgfQoJfQoJZnVuY3Rpb24gQmV0UHJpY2VMaW1pdCgpIGNvbnN0YW50IHJldHVybnModWludCBtaW4sdWludCBtYXgpIHsKCQltaW4gPSBtaW5pbXVtUm9sbFByaWNlOwoJCW1heCA9IGdldFJlYWxCZXQoQmVzdFJvbGxSYXRlKTsKCX0KCWZ1bmN0aW9uIEludmVzdG9ycyhhZGRyZXNzIEFkZHJlc3MpIGNvbnN0YW50IHJldHVybnModWludCBJbnZlc3RtZW50LCB1aW50IEJhbGFuY2UsIGJvb2wgTGl2ZSkgewoJCXVpbnQgSW52ZXN0b3JJRCA9IGdldEludmVzdG9yQnlBZGRyZXNzKEFkZHJlc3MpOwoJCWlmIChJbnZlc3RvcklEID09IDAgfHwgISBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsaWQpIHsKCQkJSW52ZXN0bWVudCA9IDA7CgkJCUJhbGFuY2UgPSAwOwoJCQlMaXZlID0gZmFsc2U7CgkJfQoJCUludmVzdG1lbnQgPSBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsdWU7CgkJQmFsYW5jZSA9IGludmVzdG9yc1tJbnZlc3RvcklEXS5iYWxhbmNlOwoJCUxpdmUgPSBpbnZlc3RvcnNbSW52ZXN0b3JJRF0ubGl2ZTsKCX0KCWZ1bmN0aW9uIFdpbm5lcnModWludCBpZCkgY29uc3RhbnQgcmV0dXJucyh1aW50IGRhdGUsIGFkZHJlc3MgYWRkciwgdWludCB2YWx1ZSwgdWludCByYXRlLCB1aW50IGJldCkgIHsKCQlyZXR1cm4gV2lubmVyREJJbnRlcmZhY2Uod2lubmVyc0RCKS5XaW5uZXJzKGlkKTsKCX0KCQoJLyoKCQlFeHRlcm5hbCBmdW5jdGlvbnMKCSovCgkvKiBGYWxsYmFjayAqLwoJZnVuY3Rpb24gKCkgewoJCVByZXBhcmVSb2xsKDApOwoJfQoJLyogRm9yIEludmVzdG9ycyAqLwoJZnVuY3Rpb24gSW52ZXN0KCkgZXh0ZXJuYWwgT25seUVuYWJsZWQgbm9Db250cmFjdCB7CgkJdWludCB2YWx1ZV8gPSBtc2cudmFsdWU7CgkJaWYgKHZhbHVlXyA8IGludmVzdFVuaXQpIHsgdGhyb3c7IH0KCQlpZiAodmFsdWVfICUgaW52ZXN0VW5pdCA+IDApIHsgCgkJCWlmICggISBtc2cuc2VuZGVyLnNlbmQodmFsdWVfICUgaW52ZXN0VW5pdCkpIHsgdGhyb3c7IH0gCgkJCXZhbHVlXyA9IHZhbHVlXyAtICh2YWx1ZV8gJSBpbnZlc3RVbml0KTsKCQl9CgkJdWludCBJbnZlc3RvcklEID0gZ2V0SW52ZXN0b3JCeUFkZHJlc3MobXNnLnNlbmRlcik7CgkJaWYgKEludmVzdG9ySUQgPT0gMCkgewoJCQlJbnZlc3RvcklEID0gaW52ZXN0b3JzLmxlbmd0aDsKCQkJaW52ZXN0b3JzLmxlbmd0aCsrOwoJCX0KCQlpZiAoaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbGlkICYmIGludmVzdG9yc1tJbnZlc3RvcklEXS5saXZlKSB7CgkJCWludmVzdG9yc1tJbnZlc3RvcklEXS52YWx1ZSArPSB2YWx1ZV87CgkJfSBlbHNlIHsKCQkJaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbHVlID0gdmFsdWVfOwoJCX0KCQlpbnZlc3RvcnNbSW52ZXN0b3JJRF0udGltZXN0YW1wID0gbm93ICsgaW52ZXN0TWluRHVyYXRpb247CgkJaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbGlkID0gdHJ1ZTsKCQlpbnZlc3RvcnNbSW52ZXN0b3JJRF0ubGl2ZSA9IHRydWU7CgkJaW52ZXN0b3JzW0ludmVzdG9ySURdLm93bmVyID0gbXNnLnNlbmRlcjsKCQlqYWNrcG90XyArPSB2YWx1ZV87CgkJc2V0SmFja3BvdCgpOwoJfQoJZnVuY3Rpb24gR2V0TXlJbnZlc3RtZW50QmFsYW5jZSgpIGV4dGVybmFsIG5vRXRoZXIgewoJCXVpbnQgSW52ZXN0b3JJRCA9IGdldEludmVzdG9yQnlBZGRyZXNzKG1zZy5zZW5kZXIpOwoJCWlmIChJbnZlc3RvcklEID09IDApIHsgdGhyb3c7IH0KCQlpZiAoICEgaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbGlkKSB7IHRocm93OyB9CgkJaWYgKGludmVzdG9yc1tJbnZlc3RvcklEXS5iYWxhbmNlID09IDApIHsgdGhyb3c7IH0KCQlpZiAoICEgbXNnLnNlbmRlci5zZW5kKCBpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmFsYW5jZSApKSB7IHRocm93OyB9CgkJaW52ZXN0b3JzW0ludmVzdG9ySURdLmJhbGFuY2UgPSAwOwoJfQoJZnVuY3Rpb24gQ2FuY2VsTXlJbnZlc3RtZW50KCkgZXh0ZXJuYWwgbm9FdGhlciB7CgkJdWludCBJbnZlc3RvcklEID0gZ2V0SW52ZXN0b3JCeUFkZHJlc3MobXNnLnNlbmRlcik7CgkJaWYgKEludmVzdG9ySUQgPT0gMCkgeyB0aHJvdzsgfQoJCWlmICggISBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsaWQpIHsgdGhyb3c7IH0KCQlpZiAoaW52ZXN0b3JzW0ludmVzdG9ySURdLnRpbWVzdGFtcCA+IG5vdyAmJiBDb250cmFjdEVuYWJsZWQpIHsgdGhyb3c7IH0KCQl1aW50IGJhbGFuY2VfOwoJCWlmIChpbnZlc3RvcnNbSW52ZXN0b3JJRF0ubGl2ZSkgewoJCQlqYWNrcG90XyAtPSBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsdWU7CgkJCWJhbGFuY2VfID0gaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbHVlOwoJCQlzZXRKYWNrcG90KCk7CgkJfQoJCWlmIChpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmFsYW5jZSA+IDApIHsKCQkJYmFsYW5jZV8gKz0gaW52ZXN0b3JzW0ludmVzdG9ySURdLmJhbGFuY2U7CgkJfQoJCWlmICggISBtc2cuc2VuZGVyLnNlbmQoIGJhbGFuY2VfICkpIHsgdGhyb3c7IH0KCQlkZWxldGUgaW52ZXN0b3JzW0ludmVzdG9ySURdOwoJfQoJLyogRm9yIFBsYXllcnMgKi8KCWZ1bmN0aW9uIERvUm9sbCgpIGV4dGVybmFsIG5vRXRoZXIgbm9Db250cmFjdCB7CgkJdWludCB2YWx1ZV87CgkJYm9vbCBmb3VuZDsKCQlmb3IgKCB1aW50IGE9MCA7IGEgPCBwbGF5ZXJzW21zZy5zZW5kZXJdLmxlbmd0aCA7IGErKyApIHsKCQkJaWYgKHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsaWQpIHsKCQkJICAgIGlmIChwbGF5ZXJzW21zZy5zZW5kZXJdW2FdLmJsb2NrTnVtYmVyK3JvbGxMb3NzQmxvY2tEZWxheSA8PSBibG9jay5udW1iZXIpIHsKCQkJICAgICAgICB1aW50IGZlZVZhbHVlXyA9IHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsdWUvMjsKCQkJICAgICAgICBmZWVWYWx1ZSArPSBmZWVWYWx1ZV87CgkJCSAgICAgICAgaW52ZXN0b3JBZGRGZWUocGxheWVyc1ttc2cuc2VuZGVyXVthXS52YWx1ZSAtIGZlZVZhbHVlXyk7CgkJCQkJcGxheWVyc1BvdCAtPSBwbGF5ZXJzW21zZy5zZW5kZXJdW2FdLnZhbHVlOwoJCQkJCURvUm9sbEV2ZW50KG1zZy5zZW5kZXIsIHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsdWUsIHBsYXllcnNbbXNnLnNlbmRlcl1bYV0uaWQsIGZhbHNlLCB0cnVlLCBmYWxzZSwgZmFsc2UsIDAsIDAsIDApOwoJCQkJCWRlbGV0ZSBwbGF5ZXJzW21zZy5zZW5kZXJdW2FdOwoJCQkJCWZvdW5kID0gdHJ1ZTsKCQkJCQljb250aW51ZTsKCQkJICAgIH0KCQkJCWlmICggISBDb250cmFjdEVuYWJsZWQgfHwgcGxheWVyc1ttc2cuc2VuZGVyXVthXS5zdW1JbnZlc3QgIT0gamFja3BvdF8gfHwgcGxheWVyc1ttc2cuc2VuZGVyXVthXS5nYW1lICE9IEphY2twb3RIaXRzKSB7CgkJCQkJdmFsdWVfICs9IHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsdWU7CgkJCQkJcGxheWVyc1BvdCAtPSBwbGF5ZXJzW21zZy5zZW5kZXJdW2FdLnZhbHVlOwoJCQkJCURvUm9sbEV2ZW50KG1zZy5zZW5kZXIsIHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsdWUsIHBsYXllcnNbbXNnLnNlbmRlcl1bYV0uaWQsIHRydWUsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIDAsIDApOwoJCQkJCWRlbGV0ZSBwbGF5ZXJzW21zZy5zZW5kZXJdW2FdOwoJCQkJCWZvdW5kID0gdHJ1ZTsKCQkJCQljb250aW51ZTsKCQkJCX0KCQkJCWlmIChwbGF5ZXJzW21zZy5zZW5kZXJdW2FdLmJsb2NrTnVtYmVyIDwgYmxvY2subnVtYmVyKSB7CgkJCQkJdmFsdWVfICs9IG1ha2VSb2xsKGEpOwoJCQkJCXBsYXllcnNQb3QgLT0gcGxheWVyc1ttc2cuc2VuZGVyXVthXS52YWx1ZTsKCQkJCQlkZWxldGUgcGxheWVyc1ttc2cuc2VuZGVyXVthXTsKCQkJCQlmb3VuZCA9IHRydWU7CgkJCQkJY29udGludWU7CgkJCQl9CgkJCX0KCQl9CgkJaWYgKCAhIGZvdW5kKSB7IHRocm93OyB9CgkJaWYgKHZhbHVlXyA+IDApIHsgaWYgKCAhIG1zZy5zZW5kZXIuc2VuZCh2YWx1ZV8pKSB7IHRocm93OyB9IH0KCX0KCWZ1bmN0aW9uIFByZXBhcmVSb2xsKHVpbnQgc2VlZCkgT25seUVuYWJsZWQgewoJCWlmIChtc2cudmFsdWUgPCBtaW5pbXVtUm9sbFByaWNlKSB7IHRocm93OyB9CgkJaWYgKGphY2twb3RfID09IDApIHsgdGhyb3c7IH0KCQl1aW50IF9yYXRlOwoJCXVpbnQgX3JlYWxCZXQ7CgkJKF9yYXRlLCBfcmVhbEJldCkgPSBDaGFuY2VPZldpbm5pbmcobXNnLnZhbHVlKTsKCQlpZiAoX3JlYWxCZXQgPiBtc2cudmFsdWUpIHsgdGhyb3c7IH0KCQlpZiAobXNnLnZhbHVlLV9yZWFsQmV0ID4gMCkgewoJCQlpZiAoICEgbXNnLnNlbmRlci5zZW5kKCBtc2cudmFsdWUtX3JlYWxCZXQgKSkgeyB0aHJvdzsgfQoJCX0KCQlmb3IgKHVpbnQgYSA9IDAgOyBhIDwgcGxheWVyc1ttc2cuc2VuZGVyXS5sZW5ndGggOyBhKyspIHsKCQkJaWYgKCAhIHBsYXllcnNbbXNnLnNlbmRlcl1bYV0udmFsaWQpIHsKCQkJCXByZXBhcmVSb2xsKCBhLCBfcmVhbEJldCwgc2VlZCApOwoJCQkJcmV0dXJuOwoJCQl9CgkJfQoJCXBsYXllcnNbbXNnLnNlbmRlcl0ubGVuZ3RoKys7CgkJcHJlcGFyZVJvbGwoIHBsYXllcnNbbXNnLnNlbmRlcl0ubGVuZ3RoLTEsIF9yZWFsQmV0LCBzZWVkICk7Cgl9CgkvKiBGb3IgT3duZXIgKi8KCWZ1bmN0aW9uIE93bmVyQ2xvc2VDb250cmFjdCgpIGV4dGVybmFsIE9ubHlPd25lciBub0V0aGVyIHsKCQlpZiAoICEgQ29udHJhY3RFbmFibGVkKSB7CgkJICAgIGlmIChDb250cmFjdERpc2FibGVkQmxvY2sgPCBibG9jay5udW1iZXIpIHsKCQkJCWlmIChwbGF5ZXJzUG90ID09IDApIHsgdGhyb3c7IH0KCQkJCWlmICggISBtc2cuc2VuZGVyLnNlbmQoIHBsYXllcnNQb3QgKSkgeyB0aHJvdzsgfQoJCQkJcGxheWVyc1BvdCA9IDA7CgkJICAgIH0KCQl9IGVsc2UgewogICAgCQlDb250cmFjdEVuYWJsZWQgPSBmYWxzZTsKICAgIAkJQ29udHJhY3REaXNhYmxlZEJsb2NrID0gYmxvY2subnVtYmVyK3JvbGxMb3NzQmxvY2tEZWxheTsKCQkJQ29udHJhY3REaXNhYmxlZChDb250cmFjdERpc2FibGVkQmxvY2spOwogICAgCQlmZWVWYWx1ZSArPSBleHRyYUphY2twb3RfOwogICAgCQlleHRyYUphY2twb3RfID0gMDsKCQl9Cgl9CglmdW5jdGlvbiBPd25lckdldEZlZSgpIGV4dGVybmFsIE9ubHlPd25lciBub0V0aGVyIHsKCQlpZiAoZmVlVmFsdWUgPT0gMCkgeyB0aHJvdzsgfQoJCWlmICggISBvd25lci5zZW5kKGZlZVZhbHVlKSkgeyB0aHJvdzsgfQoJCWZlZVZhbHVlID0gMDsKCX0KCQoJLyoKCQlQcml2YXRlIGZ1bmN0aW9ucwoJKi8KCWZ1bmN0aW9uIHNldEphY2twb3QoKSBwcml2YXRlIHsKCQlKYWNrcG90ID0gZXh0cmFKYWNrcG90XyArIGphY2twb3RfOwoJfQoJZnVuY3Rpb24gbWFrZVJvbGwodWludCBpZCkgcHJpdmF0ZSByZXR1cm5zKHVpbnQgd2luKSB7CgkJdWludCBmZWVWYWx1ZV8gPSBwbGF5ZXJzW21zZy5zZW5kZXJdW2lkXS52YWx1ZSAqIGZlZSAvIDEwMCA7CgkJZmVlVmFsdWUgKz0gZmVlVmFsdWVfOwoJCXVpbnQgaW52ZXN0b3JGZWVfID0gcGxheWVyc1ttc2cuc2VuZGVyXVtpZF0udmFsdWUgKiBpbnZlc3RvckZlZSAvIDEwMDsKCQlpbnZlc3RvckFkZEZlZShpbnZlc3RvckZlZV8pOwoJCWV4dHJhSmFja3BvdF8gKz0gcGxheWVyc1ttc2cuc2VuZGVyXVtpZF0udmFsdWUgLSBmZWVWYWx1ZV8gLSBpbnZlc3RvckZlZV87CgkJc2V0SmFja3BvdCgpOwoJCWJ5dGVzMzIgaGFzaF8gPSBwbGF5ZXJzW21zZy5zZW5kZXJdW2lkXS5leHRyYUhhc2g7CgkJZm9yICggdWludCBhID0gMSA7IGEgPD0gcHJlcGFyZUJsb2NrRGVsYXkgOyBhKysgKSB7CgkJCWhhc2hfID0gc2hhMyhoYXNoXywgYmxvY2suYmxvY2toYXNoKHBsYXllcnNbbXNnLnNlbmRlcl1baWRdLmJsb2NrTnVtYmVyIC0gcHJlcGFyZUJsb2NrRGVsYXkrYSkpOwoJCX0KCQl1aW50IF9yYXRlID0gZ2V0UmF0ZShwbGF5ZXJzW21zZy5zZW5kZXJdW2lkXS52YWx1ZSk7CgkJdWludCBiaWdOdW1iZXIgPSB1aW50NjQoaGFzaF8pOwoJCWlmIChiaWdOdW1iZXIgPT0gMCB8fCBfcmF0ZSA9PSAwKSB7IHJldHVybjsgfQoJCWlmIChiaWdOdW1iZXIgJSBfcmF0ZSA9PSAwICkgewoJCQl3aW4gPSBKYWNrcG90OwoJCQlmb3IgKCBhPTEgOyBhIDwgaW52ZXN0b3JzLmxlbmd0aCA7IGErKyApIHsKCQkJCWludmVzdG9yc1thXS5saXZlID0gZmFsc2U7CgkJCX0KCQkJSmFja3BvdEhpdHMrKzsKCQkJZXh0cmFKYWNrcG90XyA9IDA7CgkJCWphY2twb3RfID0gMDsKCQkJSmFja3BvdCA9IDA7CgkJCVdpbm5lckRCSW50ZXJmYWNlKCB3aW5uZXJzREIgKS5uZXdXaW5uZXIobm93LCBtc2cuc2VuZGVyLCB3aW4sIF9yYXRlLCBwbGF5ZXJzW21zZy5zZW5kZXJdW2lkXS52YWx1ZSk7CgkJCURvUm9sbEV2ZW50KG1zZy5zZW5kZXIsIHdpbiwgcGxheWVyc1ttc2cuc2VuZGVyXVtpZF0uaWQsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRydWUsIGJpZ051bWJlciwgX3JhdGUsIGJpZ051bWJlciAlIF9yYXRlKTsKCQl9IGVsc2UgewoJCQlEb1JvbGxFdmVudChtc2cuc2VuZGVyLCBwbGF5ZXJzW21zZy5zZW5kZXJdW2lkXS52YWx1ZSwgcGxheWVyc1ttc2cuc2VuZGVyXVtpZF0uaWQsIGZhbHNlLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIGJpZ051bWJlciwgX3JhdGUsIGJpZ051bWJlciAlIF9yYXRlKTsKCQl9Cgl9CglmdW5jdGlvbiBpbnZlc3RvckFkZEZlZSh1aW50IHZhbHVlKSBwcml2YXRlIHsKCQlib29sIGRvbmU7CgkJZm9yICggdWludCBhPTEgOyBhIDwgaW52ZXN0b3JzLmxlbmd0aCA7IGErKyApIHsKCQkJaWYgKGludmVzdG9yc1thXS5saXZlICYmIGludmVzdG9yc1thXS52YWxpZCkgewoJCQkJaW52ZXN0b3JzW2FdLmJhbGFuY2UgKz0gdmFsdWUgKiBpbnZlc3RvcnNbYV0udmFsdWUgLyBqYWNrcG90XzsKCQkJCWRvbmUgPSB0cnVlOwoJCQl9CgkJfQoJCWlmICggISBkb25lKSB7CgkJCWZlZVZhbHVlICs9IHZhbHVlOwoJCX0KCX0KCWZ1bmN0aW9uIHByZXBhcmVSb2xsKHVpbnQgcm9sbElELCB1aW50IGJldCwgdWludCBzZWVkKSBwcml2YXRlIHsKCQlSb2xsQ291bnQrKzsKCQlwbGF5ZXJzW21zZy5zZW5kZXJdW3JvbGxJRF0uYmxvY2tOdW1iZXIgPSBibG9jay5udW1iZXIgKyBwcmVwYXJlQmxvY2tEZWxheTsKCQlwbGF5ZXJzW21zZy5zZW5kZXJdW3JvbGxJRF0uZXh0cmFIYXNoID0gc2hhMyhSb2xsQ291bnQsIG5vdywgc2VlZCwgUmFuZG9tSW50ZXJmYWNlKHJhbmRvbUFkZHIpLmdldFJhbmRvbSgpLCBhZGRyZXNzKHNlZWQpLmJhbGFuY2UpOwoJCXBsYXllcnNbbXNnLnNlbmRlcl1bcm9sbElEXS52YWxpZCA9IHRydWU7CgkJcGxheWVyc1ttc2cuc2VuZGVyXVtyb2xsSURdLnZhbHVlID0gYmV0OwoJCXBsYXllcnNbbXNnLnNlbmRlcl1bcm9sbElEXS5nYW1lID0gSmFja3BvdEhpdHM7CgkJcGxheWVyc1ttc2cuc2VuZGVyXVtyb2xsSURdLmlkID0gUm9sbENvdW50OwoJCXBsYXllcnNbbXNnLnNlbmRlcl1bcm9sbElEXS5zdW1JbnZlc3QgPSBqYWNrcG90XzsJCgkJcGxheWVyc1BvdCArPSBiZXQ7CgkJUHJlcGFyZVJvbGxFdmVudChtc2cuc2VuZGVyLCBwbGF5ZXJzW21zZy5zZW5kZXJdW3JvbGxJRF0uYmxvY2tOdW1iZXIsIHBsYXllcnNbbXNnLnNlbmRlcl1bcm9sbElEXS52YWx1ZSwgcGxheWVyc1ttc2cuc2VuZGVyXVtyb2xsSURdLmlkKTsKCX0KCQoJLyoKCQlJbnRlcm5hbCBmdW5jdGlvbnMKCSovCQoJZnVuY3Rpb24gZ2V0UmF0ZSh1aW50IHZhbHVlKSBpbnRlcm5hbCByZXR1cm5zKHVpbnQpewoJCXJldHVybiBqYWNrcG90XyAqIDEgZXRoZXIgLyB2YWx1ZSAqIDEwMCAvIGludmVzdG9yRmVlICogZXh0cmFSYXRlIC8gMTAwIC8gMSBldGhlcjsKCX0KCWZ1bmN0aW9uIGdldFJlYWxCZXQodWludCByYXRlKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CgkJcmV0dXJuIGphY2twb3RfICogMSBldGhlciAvICggcmF0ZSAqIDEgZXRoZXIgKiBpbnZlc3RvckZlZSAvIGV4dHJhUmF0ZSk7Cgl9CglmdW5jdGlvbiBnZXRJbnZlc3RvckJ5QWRkcmVzcyhhZGRyZXNzIEFkZHJlc3MpIGludGVybmFsIHJldHVybnMgKHVpbnQgaWQpIHsKCQlmb3IgKCBpZD0xIDsgaWQgPCBpbnZlc3RvcnMubGVuZ3RoIDsgaWQrKyApIHsKCQkJaWYgKGludmVzdG9yc1tpZF0ub3duZXIgPT0gQWRkcmVzcykgewoJCQkJcmV0dXJuOwoJCQl9CgkJfQoJCXJldHVybiAwOwoJfQoJCgkvKgoJCUV2ZW50cwoJKi8JCglldmVudCBEb1JvbGxFdmVudChhZGRyZXNzIFBsYXllciwgdWludCBWYWx1ZSwgdWludCBSb2xsSUQsIGJvb2wgUmVmdW5kLCBib29sIExvc3RCZXQsIGJvb2wgTG9zc1JvbGwsIGJvb2wgV2luUm9sbCwgdWludCBCaWdOdW1iZXIsIHVpbnQgUmF0ZSwgdWludCBSb2xsUmVzdWx0KTsKCWV2ZW50IFByZXBhcmVSb2xsRXZlbnQoYWRkcmVzcyBQbGF5ZXIsIHVpbnQgQmxvY2ssIHVpbnQgQmV0LCB1aW50IFJvbGxJRCk7CglldmVudCBDb250cmFjdERpc2FibGVkKHVpbnQgTG9zc0FsbEJldEJsb2NrTnVtYmVyKTsKCQoJLyoKCQlNb2RpZmllcnMKCSovCgltb2RpZmllciBub0NvbnRyYWN0KCkge2lmICh0eC5vcmlnaW4gIT0gbXNnLnNlbmRlcikgeyB0aHJvdzsgfSBfOyB9CW1vZGlmaWVyIG5vRXRoZXIoKSB7IGlmIChtc2cudmFsdWUgPiAwKSB7IHRocm93OyB9IF87IH0JbW9kaWZpZXIgT25seU93bmVyKCkgeyBpZiAob3duZXIgIT0gbXNnLnNlbmRlcikgeyB0aHJvdzsgfSBfOyB9CW1vZGlmaWVyIE9ubHlFbmFibGVkKCkgeyBpZiAoICEgQ29udHJhY3RFbmFibGVkKSB7IHRocm93OyB9IF87IH19'.
	

]
