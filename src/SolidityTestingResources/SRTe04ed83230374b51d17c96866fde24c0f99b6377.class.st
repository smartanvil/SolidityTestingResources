Class {
	#name : #SRTe04ed83230374b51d17c96866fde24c0f99b6377,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe04ed83230374b51d17c96866fde24c0f99b6377 >> base64 [
	^ ''.
	

]
