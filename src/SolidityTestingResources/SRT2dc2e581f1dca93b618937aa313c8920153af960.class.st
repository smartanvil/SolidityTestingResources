Class {
	#name : #SRT2dc2e581f1dca93b618937aa313c8920153af960,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2dc2e581f1dca93b618937aa313c8920153af960 >> base64 [
	^ ''.
	

]
