Class {
	#name : #SRT4E82fEA639245Ea0Bc3E5aC921e589014976ae1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4E82fEA639245Ea0Bc3E5aC921e589014976ae1c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWM7IH0KCmNvbnRyYWN0IE10dW1Ub2tlbiB7CiAgICAKICAgIHN0cmluZyBwdWJsaWMgdGVhbSAgICAgPSAiRm94T25lIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sICAgPSAiTVRVTSI7CiAgICB1aW50OCAgcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICAKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8gVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CgogICAgLy8gVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IENoYW5nZU93bmVyKGFkZHJlc3MgaW5kZXhlZCBfb2xkLCBhZGRyZXNzIGluZGV4ZWQgX25ldywgdWludDI1NiB2YWx1ZSk7CgogCiAgICBmdW5jdGlvbiBNdHVtVG9rZW4oKSBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ID0gMTAgKiAxMDAwMDAwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkgd2l0aCB0aGUgZGVjaW1hbCBhbW91bnQKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBpc093bmVyKCkgIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsgXzsgfQoKICAgIC8vLyBAZGV2IHNldCBhIG5ldyBvd25lci4KICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX25ld093bmVyKSBpc093bmVyIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKF9uZXdPd25lciAhPSBhZGRyZXNzKDB4MCkpOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdOwogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfbmV3T3duZXIsIGFtb3VudCk7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICAgICAgQ2hhbmdlT3duZXIobXNnLnNlbmRlciwgX25ld093bmVyLCBhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICAgKi8KICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID4gYmFsYW5jZU9mW190b10pOwogICAgICAgIC8vIFNhdmUgdGhpcyBmb3IgYW4gYXNzZXJ0aW9uIGluIHRoZSBmdXR1cmUKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CiAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAvLyBBc3NlcnRzIGFyZSB1c2VkIHRvIHVzZSBzdGF0aWMgYW5hbHlzaXMgdG8gZmluZCBidWdzIGluIHlvdXIgY29kZS4gVGhleSBzaG91bGQgbmV2ZXIgZmFpbAogICAgICAgIGFzc2VydChiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b10gPT0gcHJldmlvdXNCYWxhbmNlcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMKICAgICAqCiAgICAgKiBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIHlvdXIgYWNjb3VudAogICAgICoKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgewogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvdGhlciBhZGRyZXNzCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgaW4gYmVoYWxmIG9mIGBfZnJvbWAKICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MKICAgICAqCiAgICAgKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmCiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MgYW5kIG5vdGlmeQogICAgICoKICAgICAqIEFsbG93cyBgX3NwZW5kZXJgIHRvIHNwZW5kIG5vIG1vcmUgdGhhbiBgX3ZhbHVlYCB0b2tlbnMgaW4geW91ciBiZWhhbGYsIGFuZCB0aGVuIHBpbmcgdGhlIGNvbnRyYWN0IGFib3V0IGl0CiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgICAqIEBwYXJhbSBfZXh0cmFEYXRhIHNvbWUgZXh0cmEgaW5mb3JtYXRpb24gdG8gc2VuZCB0byB0aGUgYXBwcm92ZWQgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
