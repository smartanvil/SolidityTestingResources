Class {
	#name : #SRTC0Eb85285d83217CD7c891702bcbC0FC401E2D9D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC0Eb85285d83217CD7c891702bcbC0FC401E2D9D >> base64 [
	^ ''.
	

]
