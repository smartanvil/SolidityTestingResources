Class {
	#name : #SRTceaa5b1899c49f8d70d9b0fd017ff2a74861bc9b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTceaa5b1899c49f8d70d9b0fd017ff2a74861bc9b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgRVJDMjAgewoJLy9TZXRzIGV2ZW50cyBhbmQgZnVuY3Rpb25zIGZvciBFUkMyMCB0b2tlbgoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7CglldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKCQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7CglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKCmNvbnRyYWN0IE93bmVkIHsKCS8vUHVibGljIHZhcmlhYmxlCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgkvL1NldHMgY29udHJhY3QgY3JlYXRvciBhcyB0aGUgb3duZXIKICAgIGZ1bmN0aW9uIE93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCQoJLy9TZXRzIG9ubHlPd25lciBtb2RpZmllciBmb3Igc3BlY2lmaWVkIGZ1bmN0aW9ucwogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgoJLy9BbGxvd3MgZm9yIHRyYW5zZmVyIG9mIGNvbnRyYWN0IG93bmVyc2hpcAogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0gIAoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KfQoKCmNvbnRyYWN0IEJhc2VUb2tlbiBpcyBFUkMyMCwgT3duZWQgewogICAgLy9BcHBsaWVzIFNhZmVNYXRoIGxpYnJhcnkgdG8gdWludDI1NiBvcGVyYXRpb25zIAogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgoJLy9QdWJsaWMgdmFyaWFibGVzCglzdHJpbmcgcHVibGljIG5hbWU7IAoJc3RyaW5nIHB1YmxpYyBzeW1ib2w7IAoJdWludDI1NiBwdWJsaWMgZGVjaW1hbHM7ICAKICAgIHVpbnQyNTYgcHVibGljIGluaXRpYWxUb2tlbnM7IAoJdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7IAoJc3RyaW5nIHB1YmxpYyB2ZXJzaW9uOwoKCS8vQ3JlYXRlcyBhcnJheXMgZm9yIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoJLy9Db25zdHJ1Y3RvcgoJZnVuY3Rpb24gQmFzZVRva2VuKHN0cmluZyB0b2tlbk5hbWUsIHN0cmluZyB0b2tlblN5bWJvbCwgdWludDggZGVjaW1hbFVuaXRzLCB1aW50MjU2IGluaXRpYWxBbW91bnQsIHN0cmluZyB0b2tlblZlcnNpb24pIHsKCQluYW1lID0gdG9rZW5OYW1lOyAKCQlzeW1ib2wgPSB0b2tlblN5bWJvbDsgCgkJZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7IAogICAgICAgIGluaXRpYWxUb2tlbnMgPSBpbml0aWFsQW1vdW50OyAKCQl2ZXJzaW9uID0gdG9rZW5WZXJzaW9uOwoJfQoJCgkvL1Byb3ZpZGVzIHRoZSByZW1haW5pbmcgYmFsYW5jZSBvZiBhcHByb3ZlZCB0b2tlbnMgZnJvbSBmdW5jdGlvbiBhcHByb3ZlIAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCgkvL0FsbG93cyBmb3IgYSBjZXJ0YWluIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQgb24gYmVoYWxmIG9mIHRoZSBhY2NvdW50IG93bmVyCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsgCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoJLy9SZXR1cm5zIHRoZSBhY2NvdW50IGJhbGFuY2UgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nQmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlW19vd25lcl07CiAgICB9CgoJLy9TZW5kcyB0b2tlbnMgZnJvbSBzZW5kZXIncyBhY2NvdW50CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmICgoYmFsYW5jZVttc2cuc2VuZGVyXSA+PSBfdmFsdWUpICYmIChiYWxhbmNlW190b10gKyBfdmFsdWUgPiBiYWxhbmNlW190b10pKSB7CiAgICAgICAgICAgIGJhbGFuY2VbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IAoJCQlyZXR1cm4gZmFsc2U7IAoJCX0KICAgIH0KCQoJLy9UcmFuc2ZlcnMgdG9rZW5zIGZyb20gYW4gYXBwcm92ZWQgYWNjb3VudCAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmICgoYmFsYW5jZVtfZnJvbV0gPj0gX3ZhbHVlKSAmJiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKSAmJiAoYmFsYW5jZVtfdG9dICsgX3ZhbHVlID4gYmFsYW5jZVtfdG9dKSkgewogICAgICAgICAgICBiYWxhbmNlW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgCgkJCXJldHVybiBmYWxzZTsgCgkJfQogICAgfQogICAgCn0KCmNvbnRyYWN0IEFzc3BhY2VUb2tlbiBpcyBPd25lZCwgQmFzZVRva2VuIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHVpbnQyNTYgcHVibGljIGFtb3VudFJhaXNlZDsgCiAgICB1aW50MjU2IHB1YmxpYyBkZWFkbGluZTsgCiAgICB1aW50MjU2IHB1YmxpYyBwcmljZTsgICAgICAgIAogICAgdWludDI1NiBwdWJsaWMgbWF4UHJlSWNvQW1vdW50ID0gODAwMDAwMDsgIAoJYm9vbCBwcmVJY28gPSB0cnVlOwogICAgCglmdW5jdGlvbiBBc3NwYWNlVG9rZW4oKSAKCQlCYXNlVG9rZW4oIkFTU1BBQ0UgVG9rZW4gRGV2IiwgIkFTUEQiLCAwLCAxMDAwMDAwMDAwMDAsICIxLjAiKSB7CiAgICAgICAgICAgIGJhbGFuY2VbbXNnLnNlbmRlcl0gPSBpbml0aWFsVG9rZW5zOyAgICAKICAgICAgICAgICAgc2V0UHJpY2UoMjUwMDAwMCk7CiAgICAgICAgICAgIGRlYWRsaW5lID0gbm93IC0gMSBkYXlzOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoKG5vdyA8IGRlYWRsaW5lKSAmJiAKICAgICAgICAgICAgICAgICAobXNnLnZhbHVlLmRpdigxIGZpbm5leSkgPj0gMTAwKSAmJgogICAgICAgICAgICAgICAgKChwcmVJY28gJiYgYW1vdW50UmFpc2VkLmFkZChtc2cudmFsdWUuZGl2KDEgZmlubmV5KSkgPD0gbWF4UHJlSWNvQW1vdW50KSB8fCAhcHJlSWNvKSk7IAoKICAgICAgICBhZGRyZXNzIHJlY2lwaWVudCA9IG1zZy5zZW5kZXI7IAogICAgICAgIGFtb3VudFJhaXNlZCA9IGFtb3VudFJhaXNlZC5hZGQobXNnLnZhbHVlLmRpdigxIGZpbm5leSkpOyAKICAgICAgICB1aW50MjU2IHRva2VucyA9IG1zZy52YWx1ZS5tdWwoZ2V0UHJpY2UoKSkuZGl2KDEgZXRoZXIpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKHRva2Vucyk7CiAgICAgICAgYmFsYW5jZVtyZWNpcGllbnRdID0gYmFsYW5jZVtyZWNpcGllbnRdLmFkZCh0b2tlbnMpOwoJCWJhbGFuY2Vbb3duZXJdID0gYmFsYW5jZVtvd25lcl0uc3ViKHRva2Vucyk7CgkJCiAgICAgICAgcmVxdWlyZShvd25lci5zZW5kKG1zZy52YWx1ZSkpOyAKCQkKICAgICAgICBUcmFuc2ZlcigwLCByZWNpcGllbnQsIHRva2Vucyk7CiAgICB9ICAgCgogICAgZnVuY3Rpb24gc2V0UHJpY2UodWludDI1NiBuZXdQcmljZXBlcikgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld1ByaWNlcGVyID4gMCk7IAogICAgICAgIAogICAgICAgIHByaWNlID0gbmV3UHJpY2VwZXI7IAogICAgfQoJCglmdW5jdGlvbiBnZXRQcmljZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKCQlyZXR1cm4gcHJpY2U7Cgl9CgkJCiAgICBmdW5jdGlvbiBzdGFydFNhbGUodWludDI1NiBsZW5ndGhPZlNhbGUsIGJvb2wgaXNQcmVJY28pIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShsZW5ndGhPZlNhbGUgPiAwKTsgCiAgICAgICAgCiAgICAgICAgcHJlSWNvID0gaXNQcmVJY287CiAgICAgICAgZGVhZGxpbmUgPSBub3cgKyBsZW5ndGhPZlNhbGUgKiAxIGRheXM7IAogICAgfQoKICAgIGZ1bmN0aW9uIHN0b3BTYWxlKCkgb25seU93bmVyIHsKICAgICAgICBkZWFkbGluZSA9IG5vdzsKICAgIH0KICAgIAp9'.
	

]
