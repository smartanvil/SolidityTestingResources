Class {
	#name : #SRTc4785a90e3d8d3191625ccf82623cb4daf5d6b0d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4785a90e3d8d3191625ccf82623cb4daf5d6b0d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7Ci8qKgoqIEB0aXRsZSBJQ08gU0FMRSBDT05UUkFDVAoqIEBkZXYgRVJDLTIwIFRva2VuIFN0YW5kYXJkIENvbXBsaWFudAoqLwoKLyoqCiogQHRpdGxlIFNhZmVNYXRoIGJ5IE9wZW5aZXBwZWxpbgoqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiovCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQp9CgovKioKKiBAdGl0bGUgRmlhdCBjdXJyZW5jeSBjb250cmFjdAoqIEBkZXYgVGhpcyBjb250cmFjdCB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgMC4wMSQgRVRIIGluIHdlaQoqLwpjb250cmFjdCBGaWF0Q29udHJhY3QgewogCiAgZnVuY3Rpb24gRVVSKHVpbnQgX2lkKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7Cgp9CgovKioKKiBAdGl0bGUgRGF0ZVRpbWUgY29udHJhY3QKKiBAZGV2IFRoaXMgY29udHJhY3Qgd2lsbCByZXR1cm4gdGhlIHVuaXggdmFsdWUgb2YgYW55IGRhdGUKKi8KY29udHJhY3QgRGF0ZVRpbWVBUEkgewogICAgICAgIAogICAgZnVuY3Rpb24gdG9UaW1lc3RhbXAodWludDE2IHllYXIsIHVpbnQ4IG1vbnRoLCB1aW50OCBkYXksIHVpbnQ4IGhvdXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50IHRpbWVzdGFtcCk7Cgp9CgovKioKKiBAdGl0bGUgRVJDMjAgVG9rZW4gaW50ZXJmYWNlCiovCmNvbnRyYWN0IHRva2VuIHsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCn0KCi8qKgoqIEB0aXRsZSBORVRSaWNvIHNhbGUgbWFpbiBjb250cmFjdAoqLwpjb250cmFjdCBORVRSaWNvIHsKCiAgICBGaWF0Q29udHJhY3QgcHJpY2UgPSBGaWF0Q29udHJhY3QoMHg4MDU1ZDA1MDQ2NjZlMkI2OTQyQmVCOEQ2MDE0Yzk2NDY1OENhNTkxKTsgLy8gTUFJTk5FVCBBRERSRVNTCgogICAgRGF0ZVRpbWVBUEkgZGF0ZVRpbWVDb250cmFjdCA9IERhdGVUaW1lQVBJKDB4MWE2MTg0Q0Q0QzVCZWE2MkIwMTE2ZGU3OTYyRUU3MzE1QjdiY0JjZSk7Ly9NYWluCgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAvL1RoaXMgc2FsZSBoYXZlIDUgc3RhZ2VzCiAgICBlbnVtIFN0YXRlIHsKICAgICAgICBTdGFnZTEsCiAgICAgICAgU3RhZ2UyLAogICAgICAgIFN0YWdlMywKICAgICAgICBTdGFnZTQsCiAgICAgICAgU3VjY2Vzc2Z1bAogICAgfQogICAgLy9wdWJsaWMgdmFyaWFibGVzCiAgICBTdGF0ZSBwdWJsaWMgc3RhdGUgPSBTdGF0ZS5TdGFnZTE7IC8vU2V0IGluaXRpYWwgc3RhZ2UKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IGRhdGVUaW1lQ29udHJhY3QudG9UaW1lc3RhbXAoMjAxOCw0LDEsMCk7IC8vRnJvbSBBcHIgMSAyMDE4IDAwOjAwCiAgICB1aW50MjU2IHB1YmxpYyBkZWFkbGluZSA9IGRhdGVUaW1lQ29udHJhY3QudG9UaW1lc3RhbXAoMjAxOSwzLDI3LDApOyAvL1N0b3AgTWFyIDI3IDIwMTkgMDA6MDAKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmFpc2VkOyAvL2V0aCBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRGlzdHJpYnV0ZWQ7IC8vdG9rZW5zIGRpc3RyaWJ1dGVkCiAgICB1aW50MjU2IHB1YmxpYyBjb21wbGV0ZWRBdDsgLy9UaW1lIHN0YW1wIHdoZW4gdGhlIHNhbGUgZmluaXNoCiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7IC8vQWRkcmVzcyBvZiB0aGUgdmFsaWQgdG9rZW4gdXNlZCBhcyByZXdhcmQKICAgIGFkZHJlc3MgcHVibGljIGNyZWF0b3I7IC8vQWRkcmVzcyBvZiB0aGUgY29udHJhY3QgZGVwbG95ZXIKICAgIHN0cmluZyBwdWJsaWMgY2FtcGFpZ25Vcmw7IC8vV2ViIHNpdGUgb2YgdGhlIGNhbXBhaWduCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnMic7CgogICAgLy9ldmVudHMgZm9yIGxvZwogICAgZXZlbnQgTG9nRnVuZGluZ1JlY2VpdmVkKGFkZHJlc3MgX2FkZHIsIHVpbnQgX2Ftb3VudCwgdWludCBfY3VycmVudFRvdGFsKTsKICAgIGV2ZW50IExvZ0JlbmVmaWNpYXJ5UGFpZChhZGRyZXNzIF9iZW5lZmljaWFyeUFkZHJlc3MpOwogICAgZXZlbnQgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodWludCBfdG90YWxSYWlzZWQpOwogICAgZXZlbnQgTG9nRnVuZGVySW5pdGlhbGl6ZWQoCiAgICAgICAgYWRkcmVzcyBfY3JlYXRvciwKICAgICAgICBzdHJpbmcgX3VybCk7CiAgICBldmVudCBMb2dDb250cmlidXRvcnNQYXlvdXQoYWRkcmVzcyBfYWRkciwgdWludCBfYW1vdW50KTsKCiAgICBtb2RpZmllciBub3RGaW5pc2hlZCgpIHsKICAgICAgICByZXF1aXJlKHN0YXRlICE9IFN0YXRlLlN1Y2Nlc3NmdWwpOwogICAgICAgIF87CiAgICB9CiAgICAvKioKICAgICogQG5vdGljZSBORVRSaWNvIGNvbnN0cnVjdG9yCiAgICAqIEBwYXJhbSBfY2FtcGFpZ25VcmwgaXMgdGhlIElDTyBfdXJsCiAgICAqIEBwYXJhbSBfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQgaXMgdGhlIHRva2VuIHRvdGFsRGlzdHJpYnV0ZWQKICAgICovCiAgICBmdW5jdGlvbiBORVRSaWNvIChzdHJpbmcgX2NhbXBhaWduVXJsLCB0b2tlbiBfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQpIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvciA9IDB4Qjk4N0I0NjNjNzU3M2YwQjdiNmVEN2NjOEU1RmFiOTA0MjI3MjA2NTsKICAgICAgICAvL2NyZWF0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGNhbXBhaWduVXJsID0gX2NhbXBhaWduVXJsOwogICAgICAgIHRva2VuUmV3YXJkID0gdG9rZW4oX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkKTsKCiAgICAgICAgZW1pdCBMb2dGdW5kZXJJbml0aWFsaXplZCgKICAgICAgICAgICAgY3JlYXRvciwKICAgICAgICAgICAgY2FtcGFpZ25VcmwKICAgICAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBjb250cmlidXRpb24gaGFuZGxlcgogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRyaWJ1dGUoKSBwdWJsaWMgbm90RmluaXNoZWQgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShub3cgPj0gc3RhcnRUaW1lKTsKCiAgICAgICAgdWludDI1NiB0b2tlbkJvdWdodDsgLy9WYXJpYWJsZSB0byBzdG9yZSBhbW91bnQgb2YgdG9rZW5zIGJvdWdodAogICAgICAgIHVpbnQyNTYgdG9rZW5QcmljZSA9IHByaWNlLkVVUigwKTsgLy8xIGNlbnQgdmFsdWUgaW4gd2VpCgogICAgICAgIHRvdGFsUmFpc2VkID0gdG90YWxSYWlzZWQuYWRkKG1zZy52YWx1ZSk7IC8vU2F2ZSB0aGUgdG90YWwgZXRoIHRvdGFsUmFpc2VkIChpbiB3ZWkpCgogICAgICAgIHRva2VuUHJpY2UgPSB0b2tlblByaWNlLm11bCgyKTsgLy8wLjAyJCBFVVIgdmFsdWUgaW4gd2VpIAogICAgICAgIHRva2VuUHJpY2UgPSB0b2tlblByaWNlLmRpdigxMCAqKiA4KTsgLy9DaGFuZ2UgYmFzZSAxOCB0byAxMAoKICAgICAgICB0b2tlbkJvdWdodCA9IG1zZy52YWx1ZS5kaXYodG9rZW5QcmljZSk7IC8vQmFzZSAxOC8gQmFzZSAxMCA9IEJhc2UgOAogICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDEwICoqIDEwKTsgLy9CYXNlIDggdG8gQmFzZSAxOAoKICAgICAgICByZXF1aXJlKHRva2VuQm91Z2h0ID49IDEwMCAqIDEwICoqIDE4KTsgLy9NaW5pbXVtIDEwMCBiYXNlIHRva2VucyAKICAgICAgICAKICAgICAgICAvL0JvbnVzIGNhbGN1bGF0aW9uCiAgICAgICAgaWYgKHN0YXRlID09IFN0YXRlLlN0YWdlMSl7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDIpOyAvLysxMDAlCiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS5TdGFnZTIpewogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0Lm11bCgxNzUpOwogICAgICAgICAgICB0b2tlbkJvdWdodCA9IHRva2VuQm91Z2h0LmRpdigxMDApOyAvLys3NSUKICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFN0YXRlLlN0YWdlMyl7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDE1KTsKICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSB0b2tlbkJvdWdodC5kaXYoMTApOyAvLys1MCUKICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFN0YXRlLlN0YWdlNCl7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQubXVsKDEyNSk7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gdG9rZW5Cb3VnaHQuZGl2KDEwMCk7IC8vKzI1JQogICAgICAgIH0KCiAgICAgICAgdG90YWxEaXN0cmlidXRlZCA9IHRvdGFsRGlzdHJpYnV0ZWQuYWRkKHRva2VuQm91Z2h0KTsgLy9TYXZlIHRvIHRvdGFsIHRva2VucyBkaXN0cmlidXRlZAogICAgICAgIAogICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKG1zZy5zZW5kZXIsdG9rZW5Cb3VnaHQpOyAvL1NlbmQgVG9rZW5zCiAgICAgICAgCiAgICAgICAgY3JlYXRvci50cmFuc2Zlcihtc2cudmFsdWUpOyAvLyBTZW5kIEVUSCB0byBjcmVhdG9yCiAgICAgICAgZW1pdCBMb2dCZW5lZmljaWFyeVBhaWQoY3JlYXRvcik7CiAgICAgICAgCiAgICAgICAgLy9MT0dTCiAgICAgICAgZW1pdCBMb2dGdW5kaW5nUmVjZWl2ZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCB0b3RhbFJhaXNlZCk7CiAgICAgICAgZW1pdCAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KG1zZy5zZW5kZXIsdG9rZW5Cb3VnaHQpOwoKICAgICAgICBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgY2hlY2sgc3RhdHVzCiAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tJZkZ1bmRpbmdDb21wbGV0ZU9yRXhwaXJlZCgpIHB1YmxpYyB7CgogICAgICAgIGlmKG5vdyA+IGRlYWRsaW5lICYmIHN0YXRlICE9IFN0YXRlLlN1Y2Nlc3NmdWwpewoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdWNjZXNzZnVsOyAvL1NhbGUgYmVjb21lcyBTdWNjZXNzZnVsCiAgICAgICAgICAgIGNvbXBsZXRlZEF0ID0gbm93OyAvL0lDTyBmaW5pc2hlZAoKICAgICAgICAgICAgZW1pdCBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh0b3RhbFJhaXNlZCk7IC8vd2UgbG9nIHRoZSBmaW5pc2gKCiAgICAgICAgICAgIGZpbmlzaGVkKCk7CiAgICAgICAgfSBlbHNlIGlmKHN0YXRlID09IFN0YXRlLlN0YWdlMyAmJiBub3cgPiBkYXRlVGltZUNvbnRyYWN0LnRvVGltZXN0YW1wKDIwMTgsMTIsMjcsMCkpewoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdGFnZTQ7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS5TdGFnZTIgJiYgbm93ID4gZGF0ZVRpbWVDb250cmFjdC50b1RpbWVzdGFtcCgyMDE4LDksMjgsMCkpewoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdGFnZTM7CiAgICAgICAgICAgIAogICAgICAgIH0gZWxzZSBpZihzdGF0ZSA9PSBTdGF0ZS5TdGFnZTEgJiYgbm93ID4gZGF0ZVRpbWVDb250cmFjdC50b1RpbWVzdGFtcCgyMDE4LDYsMzAsMCkpewoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdGFnZTI7CgogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBGdW5jdGlvbiBmb3IgY2xvc3VyZSBoYW5kbGUKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hlZCgpIHB1YmxpYyB7IC8vV2hlbiBmaW5pc2hlZCBldGggYXJlIHRyYW5zZmVyZWQgdG8gY3JlYXRvcgogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuU3VjY2Vzc2Z1bCk7IC8vT25seSB3aGVuIHNhbGUgZmluaXNoCiAgICAgICAgCiAgICAgICAgdWludDI1NiByZW1haW5kZXIgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YodGhpcyk7IC8vUmVtYWluaW5nIHRva2VucyBvbiBjb250cmFjdAogICAgICAgIC8vRnVuZHMgc2VuZCB0byBjcmVhdG9yIGlmIGFueQogICAgICAgIGlmKGFkZHJlc3ModGhpcykuYmFsYW5jZSA+IDApIHsKICAgICAgICAgICAgY3JlYXRvci50cmFuc2ZlcihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgICAgICAgICBlbWl0IExvZ0JlbmVmaWNpYXJ5UGFpZChjcmVhdG9yKTsKICAgICAgICB9CiAKICAgICAgICB0b2tlblJld2FyZC50cmFuc2ZlcihjcmVhdG9yLHJlbWFpbmRlcik7IC8vcmVtYWluZGVyIHRva2VucyBzZW5kIHRvIGNyZWF0b3IKICAgICAgICBlbWl0IExvZ0NvbnRyaWJ1dG9yc1BheW91dChjcmVhdG9yLCByZW1haW5kZXIpOwoKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBGdW5jdGlvbiB0byBjbGFpbSBhbnkgdG9rZW4gc3R1Y2sgb24gY29udHJhY3QKICAgICovCiAgICBmdW5jdGlvbiBjbGFpbVRva2Vucyh0b2tlbiBfYWRkcmVzcykgcHVibGljewogICAgICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuU3VjY2Vzc2Z1bCk7IC8vT25seSB3aGVuIHNhbGUgZmluaXNoCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyZWF0b3IpOwoKICAgICAgICB1aW50MjU2IHJlbWFpbmRlciA9IF9hZGRyZXNzLmJhbGFuY2VPZih0aGlzKTsgLy9DaGVjayByZW1haW5kZXIgdG9rZW5zCiAgICAgICAgX2FkZHJlc3MudHJhbnNmZXIoY3JlYXRvcixyZW1haW5kZXIpOyAvL1RyYW5zZmVyIHRva2VucyB0byBjcmVhdG9yCiAgICAgICAgCiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgRnVuY3Rpb24gdG8gaGFuZGxlIGV0aCB0cmFuc2ZlcnMKICAgICogQGRldiBCRVdBUkU6IGlmIGEgY2FsbCB0byB0aGlzIGZ1bmN0aW9ucyBkb2Vzbid0IGhhdmUKICAgICogZW5vdWdodCBnYXMsIHRyYW5zYWN0aW9uIGNvdWxkIG5vdCBiZSBmaW5pc2hlZAogICAgKi8KICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGNvbnRyaWJ1dGUoKTsKICAgIH0KICAgIAp9'.
	

]
