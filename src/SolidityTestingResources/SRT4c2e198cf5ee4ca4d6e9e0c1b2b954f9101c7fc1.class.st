Class {
	#name : #SRT4c2e198cf5ee4ca4d6e9e0c1b2b954f9101c7fc1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4c2e198cf5ee4ca4d6e9e0c1b2b954f9101c7fc1 >> base64 [
	^ ''.
	

]
