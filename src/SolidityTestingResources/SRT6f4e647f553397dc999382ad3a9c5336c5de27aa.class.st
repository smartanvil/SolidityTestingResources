Class {
	#name : #SRT6f4e647f553397dc999382ad3a9c5336c5de27aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6f4e647f553397dc999382ad3a9c5336c5de27aa >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IE93bmVkIHsKICAvLyBUaGUgYWRkcmVzc2VzIG9mIHRoZSBhY2NvdW50cyAob3IgY29udHJhY3RzKSB0aGF0IGNhbiBleGVjdXRlIGFjdGlvbnMgd2l0aGluIGVhY2ggcm9sZXMuCiAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICBhZGRyZXNzIHB1YmxpYyBjb29BZGRyZXNzOwogIGFkZHJlc3MgcHJpdmF0ZSBuZXdDZW9BZGRyZXNzOwogIGFkZHJlc3MgcHJpdmF0ZSBuZXdDb29BZGRyZXNzOwoKICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgIGNlb0FkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICBjb29BZGRyZXNzID0gbXNnLnNlbmRlcjsKICB9CgogIC8qKiogQUNDRVNTIE1PRElGSUVSUyAqKiovCiAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRU8tb25seSBmdW5jdGlvbmFsaXR5CiAgbW9kaWZpZXIgb25seUNFTygpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIENPTy1vbmx5IGZ1bmN0aW9uYWxpdHkKICBtb2RpZmllciBvbmx5Q09PKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MpOwogICAgXzsKICB9CgogIC8vLyBBY2Nlc3MgbW9kaWZpZXIgZm9yIGNvbnRyYWN0IG93bmVyIG9ubHkgZnVuY3Rpb25hbGl0eQogIG1vZGlmaWVyIG9ubHlDTGV2ZWwoKSB7CiAgICByZXF1aXJlKAogICAgICBtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MgfHwKICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzCiAgICApOwogICAgXzsKICB9CgogIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENFTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ0VPLgogIC8vLyBAcGFyYW0gX25ld0NFTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENFTwogIGZ1bmN0aW9uIHNldENFTyhhZGRyZXNzIF9uZXdDRU8pIHB1YmxpYyBvbmx5Q0VPIHsKICAgIHJlcXVpcmUoX25ld0NFTyAhPSBhZGRyZXNzKDApKTsKICAgIG5ld0Nlb0FkZHJlc3MgPSBfbmV3Q0VPOwogIH0KCiAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ09PLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDT08uCiAgLy8vIEBwYXJhbSBfbmV3Q09PIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ09PCiAgZnVuY3Rpb24gc2V0Q09PKGFkZHJlc3MgX25ld0NPTykgcHVibGljIG9ubHlDRU8gewogICAgcmVxdWlyZShfbmV3Q09PICE9IGFkZHJlc3MoMCkpOwogICAgbmV3Q29vQWRkcmVzcyA9IF9uZXdDT087CiAgfQoKICBmdW5jdGlvbiBhY2NlcHRDZW9Pd25lcnNoaXAoKSBwdWJsaWMgewogICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3Q2VvQWRkcmVzcyk7CiAgICAgIHJlcXVpcmUoYWRkcmVzcygwKSAhPSBuZXdDZW9BZGRyZXNzKTsKICAgICAgY2VvQWRkcmVzcyA9IG5ld0Nlb0FkZHJlc3M7CiAgICAgIG5ld0Nlb0FkZHJlc3MgPSBhZGRyZXNzKDApOwogIH0KCiAgZnVuY3Rpb24gYWNjZXB0Q29vT3duZXJzaGlwKCkgcHVibGljIHsKICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld0Nvb0FkZHJlc3MpOwogICAgICByZXF1aXJlKGFkZHJlc3MoMCkgIT0gbmV3Q29vQWRkcmVzcyk7CiAgICAgIGNvb0FkZHJlc3MgPSBuZXdDb29BZGRyZXNzOwogICAgICBuZXdDb29BZGRyZXNzID0gYWRkcmVzcygwKTsKICB9Cgp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db25zZW5TeXMvVG9rZW5zL2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9laXAyMC9FSVAyMC5zb2wKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpjb250cmFjdCBZb3VDb2xsZWN0QmFzZSBpcyBPd25lZCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIC8qKiogQ09OU1RBTlRTICoqKi8KICBzdHJpbmcgcHVibGljIGNvbnN0YW50IE5BTUUgPSAiQ3J5cHRvIC0gWW91Q29sbGVjdCI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiQ1lDIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgREVDSU1BTFMgPSAxODsgIAoKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICB1aW50MjU2IGNvbnN0YW50IHByaXZhdGUgTUFYX1VJTlQyNTYgPSAyKioyNTYgLSAxOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VzOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWQ7CgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOyAKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy0yMCBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgIHJldHVybiBOQU1FOwogIH0KCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy0yMCBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIFNZTUJPTDsKICB9CiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy0yMCBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgIHJldHVybiBERUNJTUFMUzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIHVpbnQyNTYgYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2FuY2UgPj0gX3ZhbHVlKTsKICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgIGlmIChhbGxvd2FuY2UgPCBNQVhfVUlOVDI1NikgewogICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICB9CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CgogICAgICByZXF1aXJlKF9zcGVuZGVyLmNhbGwoYnl0ZXM0KGJ5dGVzMzIoc2hhMygicmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MsdWludDI1NixhZGRyZXNzLGJ5dGVzKSIpKSksIG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfSAgIAoKCiAgLy8gUGF5b3V0CiAgZnVuY3Rpb24gcGF5b3V0KGFkZHJlc3MgX3RvKSBwdWJsaWMgb25seUNMZXZlbCB7CiAgICBfcGF5b3V0KF90bywgdGhpcy5iYWxhbmNlKTsKICB9CiAgZnVuY3Rpb24gcGF5b3V0KGFkZHJlc3MgX3RvLCB1aW50IGFtb3VudCkgcHVibGljIG9ubHlDTGV2ZWwgewogICAgaWYgKGFtb3VudD50aGlzLmJhbGFuY2UpCiAgICAgIGFtb3VudCA9IHRoaXMuYmFsYW5jZTsKICAgIF9wYXlvdXQoX3RvLCBhbW91bnQpOwogIH0KICBmdW5jdGlvbiBfcGF5b3V0KGFkZHJlc3MgX3RvLCB1aW50IGFtb3VudCkgcHJpdmF0ZSB7CiAgICBpZiAoX3RvID09IGFkZHJlc3MoMCkpIHsKICAgICAgY2VvQWRkcmVzcy50cmFuc2ZlcihhbW91bnQpOwogICAgfSBlbHNlIHsKICAgICAgX3RvLnRyYW5zZmVyKGFtb3VudCk7CiAgICB9CiAgfQp9Cgpjb250cmFjdCBFUkM3MjFZQyBpcyBZb3VDb2xsZWN0QmFzZSB7CiAgLyoqKiBTVE9SQUdFICoqKi8KICB1aW50MjU2W10gcHVibGljIHRva2VuczsKICBtYXBwaW5nICh1aW50ID0+IGJvb2wpIHB1YmxpYyB1bmxvY2tlZDsKCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gY29sbGVjdGlibGUgSURzIHRvIHRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGVtLiBBbGwgY29sbGVjdGlibGVzIGhhdmUKICAvLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyB0b2tlbkluZGV4VG9Pd25lcjsKCiAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gQ29sbGVjdGlibGVJRHMgdG8gYW4gYWRkcmVzcyB0aGF0IGhhcyBiZWVuIGFwcHJvdmVkIHRvIGNhbGwKICAvLy8gIHRyYW5zZmVyRnJvbSgpLiBFYWNoIENvbGxlY3RpYmxlIGNhbiBvbmx5IGhhdmUgb25lIGFwcHJvdmVkIGFkZHJlc3MgZm9yIHRyYW5zZmVyCiAgLy8vICBhdCBhbnkgdGltZS4gQSB6ZXJvIHZhbHVlIG1lYW5zIG5vIGFwcHJvdmFsIGlzIG91dHN0YW5kaW5nLgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHRva2VuSW5kZXhUb0FwcHJvdmVkOwoKICAvLyBAZGV2IEEgbWFwcGluZyBmcm9tIENvbGxlY3RpYmxlSURzIHRvIHRoZSBwcmljZSBvZiB0aGUgdG9rZW4uCiAgbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSBwdWJsaWMgdG9rZW5JbmRleFRvUHJpY2U7CgogIC8qKiogRVZFTlRTICoqKi8KICAvLy8gQGRldiBUaGUgQmlydGggZXZlbnQgaXMgZmlyZWQgd2hlbmV2ZXIgYSBuZXcgY29sbGVjdGlibGUgY29tZXMgaW50byBleGlzdGVuY2UuCiAgZXZlbnQgQmlydGgodWludDI1NiB0b2tlbklkLCB1aW50MjU2IHN0YXJ0UHJpY2UpOwogIC8vLyBAZGV2IFRoZSBUb2tlblNvbGQgZXZlbnQgaXMgZmlyZWQgd2hlbmV2ZXIgYSB0b2tlbiBpcyBzb2xkLgogIGV2ZW50IFRva2VuU29sZCh1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCwgdWludDI1NiBwcmljZSwgYWRkcmVzcyBwcmV2T3duZXIsIGFkZHJlc3Mgd2lubmVyKTsKICAvLyBFUkM3MjEgVHJhbnNmZXIKICBldmVudCBUcmFuc2ZlclRva2VuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CiAgLy8gRVJDNzIxIEFwcHJvdmFsCiAgZXZlbnQgQXBwcm92YWxUb2tlbihhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBhcHByb3ZlZCwgdWludDI1NiB0b2tlbklkKTsKCiAgLyoqKiBQVUJMSUMgRlVOQ1RJT05TICoqKi8KICAvLy8gQG5vdGljZSBHcmFudCBhbm90aGVyIGFkZHJlc3MgdGhlIHJpZ2h0IHRvIHRyYW5zZmVyIHRva2VuIHZpYSB0YWtlT3duZXJzaGlwKCkgYW5kIHRyYW5zZmVyRnJvbSgpLgogIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogIC8vLyAgY2xlYXIgYWxsIGFwcHJvdmFscy4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gYXBwcm92ZVRva2VuKAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF90b2tlbklkCiAgKSBwdWJsaWMgewogICAgLy8gQ2FsbGVyIG11c3Qgb3duIHRva2VuLgogICAgcmVxdWlyZShfb3duc1Rva2VuKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgdG9rZW5JbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdID0gX3RvOwoKICAgIEFwcHJvdmFsVG9rZW4obXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKCiAgZnVuY3Rpb24gZ2V0VG90YWxUb2tlblN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiB0b2tlbnMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMVlDKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKCiAgLy8vIEZvciBxdWVyeWluZyBvd25lciBvZiB0b2tlbgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIHRva2VuSUQgZm9yIG93bmVyIGlucXVpcnkKICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkKICAgIHB1YmxpYwogICAgdmlldwogICAgcmV0dXJucyAoYWRkcmVzcyBvd25lcikKICB7CiAgICBvd25lciA9IHRva2VuSW5kZXhUb093bmVyW190b2tlbklkXTsKICB9CgoKICBmdW5jdGlvbiBwcmljZU9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcHJpY2UpIHsKICAgIHByaWNlID0gdG9rZW5JbmRleFRvUHJpY2VbX3Rva2VuSWRdOwogICAgaWYgKHByaWNlID09IDApCiAgICAgIHByaWNlID0gZ2V0SW5pdGlhbFByaWNlT2ZUb2tlbihfdG9rZW5JZCk7CiAgfQoKCiAgLy8vIEBub3RpY2UgQWxsb3cgcHJlLWFwcHJvdmVkIHVzZXIgdG8gdGFrZSBvd25lcnNoaXAgb2YgYSB0b2tlbgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB7CiAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgIGFkZHJlc3Mgb2xkT3duZXIgPSB0b2tlbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CgogICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAvLyBNYWtpbmcgc3VyZSB0cmFuc2ZlciBpcyBhcHByb3ZlZAogICAgcmVxdWlyZShfYXBwcm92ZWQobmV3T3duZXIsIF90b2tlbklkKSk7CgogICAgX3RyYW5zZmVyVG9rZW4ob2xkT3duZXIsIG5ld093bmVyLCBfdG9rZW5JZCk7CiAgfQoKICAvLy8gT3duZXIgaW5pdGF0ZXMgdGhlIHRyYW5zZmVyIG9mIHRoZSB0b2tlbiB0byBhbm90aGVyIGFjY291bnQKICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIHRvLgogIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuKAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF90b2tlbklkCiAgKSBwdWJsaWMgewogICAgcmVxdWlyZShfb3duc1Rva2VuKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKCiAgICBfdHJhbnNmZXJUb2tlbihtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8vLyBUaGlyZC1wYXJ0eSBpbml0aWF0ZXMgdHJhbnNmZXIgb2YgdG9rZW4gZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIGZyb20uCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZCB0by4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlbkZyb20oCiAgICBhZGRyZXNzIF9mcm9tLAogICAgYWRkcmVzcyBfdG8sCiAgICB1aW50MjU2IF90b2tlbklkCiAgKSBwdWJsaWMgewogICAgcmVxdWlyZShfb3duc1Rva2VuKF9mcm9tLCBfdG9rZW5JZCkpOwogICAgcmVxdWlyZShfYXBwcm92ZWQoX3RvLCBfdG9rZW5JZCkpOwogICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwoX3RvKSk7CgogICAgX3RyYW5zZmVyVG9rZW4oX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIH0KCiAgLyoqKiBQUklWQVRFIEZVTkNUSU9OUyAqKiovCiAgLy8vIFNhZmV0eSBjaGVjayBvbiBfdG8gYWRkcmVzcyB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICBmdW5jdGlvbiBfYWRkcmVzc05vdE51bGwoYWRkcmVzcyBfdG8pIHByaXZhdGUgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gX3RvICE9IGFkZHJlc3MoMCk7CiAgfQoKICAvLy8gRm9yIGNoZWNraW5nIGFwcHJvdmFsIG9mIHRyYW5zZmVyIGZvciBhZGRyZXNzIF90bwogIGZ1bmN0aW9uIF9hcHByb3ZlZChhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB0b2tlbkluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPT0gX3RvOwogIH0KCiAgLy8vIEZvciBjcmVhdGluZyBDb2xsZWN0aWJsZQogIGZ1bmN0aW9uIF9jcmVhdGVDb2xsZWN0aWJsZSh1aW50MjU2IHRva2VuSWQsIHVpbnQyNTYgX3ByaWNlKSBpbnRlcm5hbCB7CiAgICB0b2tlbkluZGV4VG9QcmljZVt0b2tlbklkXSA9IF9wcmljZTsKICAgIEJpcnRoKHRva2VuSWQsIF9wcmljZSk7CiAgICB0b2tlbnMucHVzaCh0b2tlbklkKTsKICAgIHVubG9ja2VkW3Rva2VuSWRdID0gdHJ1ZTsKICB9CgogIC8vLyBDaGVjayBmb3IgdG9rZW4gb3duZXJzaGlwCiAgZnVuY3Rpb24gX293bnNUb2tlbihhZGRyZXNzIGNsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gY2xhaW1hbnQgPT0gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdOwogIH0KCgogIC8vIGFsbG93cyBvd25lcnMgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBwcmljZSBvZiB0aGVtIG9yIGlmIHRoZXJlIGlzIG5vIG93bmVyIHRoZSBjb28gY2FuIGRvIGl0CiAgYm9vbCBpc1Rva2VuQ2hhbmdlUHJpY2VMb2NrZWQgPSB0cnVlOwogIGZ1bmN0aW9uIGNoYW5nZVRva2VuUHJpY2UodWludDI1NiBuZXdQcmljZSwgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIHJlcXVpcmUoKF9vd25zVG9rZW4obXNnLnNlbmRlciwgX3Rva2VuSWQpICYmICFpc1Rva2VuQ2hhbmdlUHJpY2VMb2NrZWQpIHx8IChfb3duc1Rva2VuKGFkZHJlc3MoMCksIF90b2tlbklkKSAmJiBtc2cuc2VuZGVyID09IGNvb0FkZHJlc3MpKTsKICAgIHJlcXVpcmUobmV3UHJpY2U8dG9rZW5JbmRleFRvUHJpY2VbX3Rva2VuSWRdKTsKICAgIHRva2VuSW5kZXhUb1ByaWNlW190b2tlbklkXSA9IG5ld1ByaWNlOwogIH0KICBmdW5jdGlvbiB1bmxvY2tUb2tlbih1aW50IHRva2VuSWQpIHB1YmxpYyBvbmx5Q09PIHsKICAgIHVubG9ja2VkW3Rva2VuSWRdID0gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdW5sb2NrVG9rZW5QcmljZUNoYW5nZSgpIHB1YmxpYyBvbmx5Q09PIHsKICAgIGlzVG9rZW5DaGFuZ2VQcmljZUxvY2tlZCA9IGZhbHNlOwogIH0KICBmdW5jdGlvbiBpc0NoYW5nZVByaWNlTG9ja2VkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGlzVG9rZW5DaGFuZ2VQcmljZUxvY2tlZDsKICB9CgoKICAvLy8gY3JlYXRlIFRva2VucyBmb3IgVG9rZW4gT3duZXJzIGluIGFscGhhIEdhbWUKICBmdW5jdGlvbiBjcmVhdGVQcm9tb0NvbGxlY3RpYmxlKHVpbnQyNTYgdG9rZW5JZCwgYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3ByaWNlKSBwdWJsaWMgb25seUNPTyB7CiAgICByZXF1aXJlKHRva2VuSW5kZXhUb093bmVyW3Rva2VuSWRdPT1hZGRyZXNzKDApKTsKCiAgICBhZGRyZXNzIGNvbGxlY3RpYmxlT3duZXIgPSBfb3duZXI7CiAgICBpZiAoY29sbGVjdGlibGVPd25lciA9PSBhZGRyZXNzKDApKSB7CiAgICAgIGNvbGxlY3RpYmxlT3duZXIgPSBjb29BZGRyZXNzOwogICAgfQoKICAgIGlmIChfcHJpY2UgPD0gMCkgewogICAgICBfcHJpY2UgPSBnZXRJbml0aWFsUHJpY2VPZlRva2VuKHRva2VuSWQpOwogICAgfQoKICAgIF9jcmVhdGVDb2xsZWN0aWJsZSh0b2tlbklkLCBfcHJpY2UpOwogICAgLy8gVGhpcyB3aWxsIGFzc2lnbiBvd25lcnNoaXAsIGFuZCBhbHNvIGVtaXQgdGhlIFRyYW5zZmVyIGV2ZW50IGFzCiAgICAvLyBwZXIgRVJDNzIxIGRyYWZ0CiAgICBfdHJhbnNmZXJUb2tlbihhZGRyZXNzKDApLCBjb2xsZWN0aWJsZU93bmVyLCB0b2tlbklkKTsKCiAgfQoKCiAgLy8vIEZvciBxdWVyeWluZyBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50CiAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZm9yIGJhbGFuY2UgcXVlcnkKICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIGZ1bmN0aW9uIHRva2VuQmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlc3VsdCkgewogICAgICB1aW50MjU2IHRvdGFsVG9rZW5zID0gdG9rZW5zLmxlbmd0aDsKICAgICAgdWludDI1NiB0b2tlbkluZGV4OwogICAgICB1aW50MjU2IHRva2VuSWQ7CiAgICAgIHJlc3VsdCA9IDA7CiAgICAgIGZvciAodG9rZW5JbmRleCA9IDA7IHRva2VuSW5kZXggPCB0b3RhbFRva2VuczsgdG9rZW5JbmRleCsrKSB7CiAgICAgICAgdG9rZW5JZCA9IHRva2Vuc1t0b2tlbkluZGV4XTsKICAgICAgICBpZiAodG9rZW5JbmRleFRvT3duZXJbdG9rZW5JZF0gPT0gX293bmVyKSB7CiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuYWRkKDEpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgLy8vIEBkZXYgQXNzaWducyBvd25lcnNoaXAgb2YgYSBzcGVjaWZpYyBDb2xsZWN0aWJsZSB0byBhbiBhZGRyZXNzLgogIGZ1bmN0aW9uIF90cmFuc2ZlclRva2VuKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAvL3RyYW5zZmVyIG93bmVyc2hpcAogICAgdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdID0gX3RvOwoKICAgIC8vIFdoZW4gY3JlYXRpbmcgbmV3IGNvbGxlY3RpYmxlcyBfZnJvbSBpcyAweDAsIGJ1dCB3ZSBjYW4ndCBhY2NvdW50IHRoYXQgYWRkcmVzcy4KICAgIGlmIChfZnJvbSAhPSBhZGRyZXNzKDApKSB7CiAgICAgIC8vIGNsZWFyIGFueSBwcmV2aW91c2x5IGFwcHJvdmVkIG93bmVyc2hpcCBleGNoYW5nZQogICAgICBkZWxldGUgdG9rZW5JbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdOwogICAgfQoKICAgIC8vIEVtaXQgdGhlIHRyYW5zZmVyIGV2ZW50LgogICAgVHJhbnNmZXJUb2tlbihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKCiAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBvd25lciB3aG9zZSBjZWxlYnJpdHkgdG9rZW5zIHdlIGFyZSBpbnRlcmVzdGVkIGluLgogIC8vLyBAZGV2IFRoaXMgbWV0aG9kIE1VU1QgTkVWRVIgYmUgY2FsbGVkIGJ5IHNtYXJ0IGNvbnRyYWN0IGNvZGUuIEZpcnN0LCBpdCdzIGZhaXJseQogIC8vLyAgZXhwZW5zaXZlIChpdCB3YWxrcyB0aGUgZW50aXJlIHRva2VucyBhcnJheSBsb29raW5nIGZvciB0b2tlbnMgYmVsb25naW5nIHRvIG93bmVyKSwKICAvLy8gIGJ1dCBpdCBhbHNvIHJldHVybnMgYSBkeW5hbWljIGFycmF5LCB3aGljaCBpcyBvbmx5IHN1cHBvcnRlZCBmb3Igd2ViMyBjYWxscywgYW5kCiAgLy8vICBub3QgY29udHJhY3QtdG8tY29udHJhY3QgY2FsbHMuCiAgZnVuY3Rpb24gdG9rZW5zT2ZPd25lcihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2W10gb3duZXJUb2tlbnMpIHsKICAgIHVpbnQyNTYgdG9rZW5Db3VudCA9IGJhbGFuY2VPZihfb3duZXIpOwogICAgaWYgKHRva2VuQ291bnQgPT0gMCkgewogICAgICAgIC8vIFJldHVybiBhbiBlbXB0eSBhcnJheQogICAgICByZXR1cm4gbmV3IHVpbnQyNTZbXSgwKTsKICAgIH0gZWxzZSB7CiAgICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnQyNTZbXSh0b2tlbkNvdW50KTsKICAgICAgdWludDI1NiB0b3RhbFRva2VucyA9IGdldFRvdGFsVG9rZW5TdXBwbHkoKTsKICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICB1aW50MjU2IHRva2VuSW5kZXg7CiAgICAgIHVpbnQyNTYgdG9rZW5JZDsKICAgICAgZm9yICh0b2tlbkluZGV4ID0gMDsgdG9rZW5JbmRleCA8IHRvdGFsVG9rZW5zOyB0b2tlbkluZGV4KyspIHsKICAgICAgICB0b2tlbklkID0gdG9rZW5zW3Rva2VuSW5kZXhdOwogICAgICAgIGlmICh0b2tlbkluZGV4VG9Pd25lclt0b2tlbklkXSA9PSBfb3duZXIpIHsKICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleF0gPSB0b2tlbklkOwogICAgICAgICAgcmVzdWx0SW5kZXggPSByZXN1bHRJbmRleC5hZGQoMSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfQoKICAvLy8gQGRldiByZXR1cm5zIGFuIGFycmF5IHdpdGggYWxsIHRva2VuIGlkcwogIGZ1bmN0aW9uIGdldFRva2VuSWRzKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2W10pIHsKICAgIHJldHVybiB0b2tlbnM7CiAgfQoKICBmdW5jdGlvbiBnZXRJbml0aWFsUHJpY2VPZlRva2VuKHVpbnQgdG9rZW5JZCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCk7Cn0KCmNvbnRyYWN0IENvbGxlY3RpYmxlVG9rZW4gaXMgRVJDNzIxWUMgewoKICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgU1RBUlRJTkdfUFJJQ0UgPSAwLjAwMSBldGhlcjsKCiAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IEZJUlNUX1NURVBfTElNSVQgPSAgMC4wNTM2MTMgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IFNFQ09ORF9TVEVQX0xJTUlUID0gMC41NjQ5NTcgZXRoZXI7CgogIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVNURVJfVE9LRU5fSUQgPSAwOwoKICBmdW5jdGlvbiBDb2xsZWN0aWJsZVRva2VuKCkgcHVibGljIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMTAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICB0b3RhbFN1cHBseSA9IDEwMDAwMDAwMDAwMDAwMDAwMDAwOwoKICB9CgogIGZ1bmN0aW9uIGdldEluaXRpYWxQcmljZU9mVG9rZW4odWludCBfdG9rZW5JZCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCkgewogICAgaWYgKF90b2tlbklkID4gMCkKICAgICAgcmV0dXJuIFNUQVJUSU5HX1BSSUNFOwogICAgcmV0dXJuIDEwIGV0aGVyOwogIH0KCgogIGZ1bmN0aW9uIGdldE5leHRQcmljZSh1aW50IHNlbGxpbmdQcmljZSkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCkgewogICAgaWYgKHNlbGxpbmdQcmljZSA8IEZJUlNUX1NURVBfTElNSVQpIHsKICAgICAgcmV0dXJuIHNlbGxpbmdQcmljZS5tdWwoMjAwKS5kaXYoOTMpOwogICAgfSBlbHNlIGlmIChzZWxsaW5nUHJpY2UgPCBTRUNPTkRfU1RFUF9MSU1JVCkgewogICAgICByZXR1cm4gc2VsbGluZ1ByaWNlLm11bCgxMjApLmRpdig5Myk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gc2VsbGluZ1ByaWNlLm11bCgxMTUpLmRpdig5Myk7CiAgICB9CiAgfQoKICAvLy8gQG5vdGljZSBSZXR1cm5zIGFsbCB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBjb2xsZWN0aWJsZS4KICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbklkIG9mIHRoZSBjb2xsZWN0aWJsZSBvZiBpbnRlcmVzdC4KICBmdW5jdGlvbiBnZXRDb2xsZWN0aWJsZSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRva2VuSWQsCiAgICB1aW50MjU2IHNlbGxpbmdQcmljZSwKICAgIGFkZHJlc3Mgb3duZXIsCiAgICB1aW50MjU2IG5leHRTZWxsaW5nUHJpY2UKICApIHsKICAgIHRva2VuSWQgPSBfdG9rZW5JZDsKICAgIHNlbGxpbmdQcmljZSA9IHRva2VuSW5kZXhUb1ByaWNlW190b2tlbklkXTsKICAgIG93bmVyID0gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdOwoKICAgIGlmIChzZWxsaW5nUHJpY2UgPT0gMCkKICAgICAgc2VsbGluZ1ByaWNlID0gZ2V0SW5pdGlhbFByaWNlT2ZUb2tlbihfdG9rZW5JZCk7CgogICAgbmV4dFNlbGxpbmdQcmljZSA9IGdldE5leHRQcmljZShzZWxsaW5nUHJpY2UpOwogIH0KCiAgLy8gQWxsb3dzIHNvbWVvbmUgdG8gc2VuZCBldGhlciBhbmQgb2J0YWluIHRoZSB0b2tlbgogIGZ1bmN0aW9uIHB1cmNoYXNlKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGFkZHJlc3Mgb2xkT3duZXIgPSB0b2tlbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgICB1aW50MjU2IHNlbGxpbmdQcmljZSA9IHRva2VuSW5kZXhUb1ByaWNlW190b2tlbklkXTsKICAgIHJlcXVpcmUob2xkT3duZXIhPW1zZy5zZW5kZXIgfHwgc2VsbGluZ1ByaWNlID4gMSBldGhlcik7CgogICAgaWYgKHNlbGxpbmdQcmljZSA9PSAwKSB7CiAgICAgIHNlbGxpbmdQcmljZSA9IGdldEluaXRpYWxQcmljZU9mVG9rZW4oX3Rva2VuSWQpOwogICAgfQoKICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsKCiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBzZWxsaW5nUHJpY2UpOwogICAgdWludDI1NiBwdXJjaGFzZUV4Y2VzcyA9IG1zZy52YWx1ZS5zdWIoc2VsbGluZ1ByaWNlKTsKCiAgICB1aW50MjU2IHBheW1lbnQgPSBzZWxsaW5nUHJpY2UubXVsKDkzKS5kaXYoMTAwKTsKICAgIHVpbnQyNTYgZmVlT25jZSA9IHNlbGxpbmdQcmljZS5zdWIocGF5bWVudCkuZGl2KDcpOwoKICAgIHRva2VuSW5kZXhUb1ByaWNlW190b2tlbklkXSA9IGdldE5leHRQcmljZShzZWxsaW5nUHJpY2UpOwoKICAgIC8vIFRyYW5zZmVycyB0aGUgVG9rZW4KICAgIHRva2VuSW5kZXhUb093bmVyW190b2tlbklkXSA9IG1zZy5zZW5kZXI7CiAgICBUb2tlblNvbGQoX3Rva2VuSWQsIHNlbGxpbmdQcmljZSwgb2xkT3duZXIsIG1zZy5zZW5kZXIpOwogICAgVHJhbnNmZXJUb2tlbihvbGRPd25lciwgbXNnLnNlbmRlciwgX3Rva2VuSWQpOwoKICAgIGlmIChvbGRPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIC8vIGNsZWFyIGFueSBwcmV2aW91c2x5IGFwcHJvdmVkIG93bmVyc2hpcCBleGNoYW5nZQogICAgICBkZWxldGUgdG9rZW5JbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdOwogICAgICAvLyBQYXltZW50IGZvciBvbGQgb3duZXIgYW5kIG5ldyBvd25lcgogICAgICBfcGF5b3V0TWluaW5nKF90b2tlbklkLCBvbGRPd25lciwgbXNnLnNlbmRlcik7CiAgICAgIGlmIChzZWxsaW5nUHJpY2UgPiAzIGV0aGVyKQogICAgICAgIGxldmVsVXBNaW5pbmcoX3Rva2VuSWQpOwogICAgICBvbGRPd25lci50cmFuc2ZlcihwYXltZW50KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlcXVpcmUodW5sb2NrZWRbX3Rva2VuSWRdKTsKICAgICAgQmlydGgoX3Rva2VuSWQsIHNlbGxpbmdQcmljZSk7CiAgICAgIHRva2Vucy5wdXNoKF90b2tlbklkKTsKICAgICAgY3JlYXRlTWluZUZvclRva2VuKF90b2tlbklkKTsKICAgIH0KCiAgICBpZiAoX3Rva2VuSWQgPiAwICYmIHRva2VuSW5kZXhUb093bmVyW01BU1RFUl9UT0tFTl9JRF0hPWFkZHJlc3MoMCkpIHsKICAgICAgLy8gVGF4ZXMgZm9yIFlvdUNvbGxlY3QtVG9rZW4gb3duZXIKICAgICAgdG9rZW5JbmRleFRvT3duZXJbTUFTVEVSX1RPS0VOX0lEXS50cmFuc2ZlcihmZWVPbmNlKTsKICAgIH0KICAgIC8vIHJlZnVuZCB3aGVuIHBhaWQgdG9vIG11Y2gKICAgIGlmIChwdXJjaGFzZUV4Y2Vzcz4wKQogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHB1cmNoYXNlRXhjZXNzKTsKICB9CiAgCiAgCiAgLy8KICAvLyAgTWluaW5nCiAgLy8KICAgIGV2ZW50IE1pbmluZ1VwZ3JhZGUoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCBpbmRleGVkIHRva2VuLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBNaW5pbmdMZXZlbHVwKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgaW5kZXhlZCB0b2tlbiwgdWludCBwb3dlcik7CiAgICBldmVudCBNaW5pbmdQYXlvdXQoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCBpbmRleGVkIHRva2VuLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBNaW5pbmdTdG9sZW5QYXlvdXQoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgYWRkcmVzcyBpbmRleGVkIG9sZE93bmVyLCB1aW50IGluZGV4ZWQgdG9rZW4sIHVpbnQgYW1vdW50KTsKCiAgICBtYXBwaW5nICh1aW50ID0+IHVpbnQpIG1pbmluZ1Bvd2VyOwogICAgbWFwcGluZyAodWludCA9PiB1aW50KSBtaW5pbmdQdXNoZWQ7CiAgICBtYXBwaW5nICh1aW50ID0+IHVpbnQpIG1pbmluZ05leHRMZXZlbEJyZWFrOwogICAgbWFwcGluZyAodWludCA9PiB1aW50KSBtaW5pbmdMYXN0UGF5b3V0QmxvY2s7CgogICAgdWludCBlYXJuaW5nc0VhY2hCbG9jayA9IDE3MzYxMTExMTExMTExMTsKICAgIHVpbnQgRklSU1RfTUlOSU5HX0xFVkVMX0NPU1QgPSAxMzMzMzMzMzMzMzMzMzMzMzMzOwoKICAgIGZ1bmN0aW9uIGNoYW5nZUVhcm5pbmdzKHVpbnQgYW1vdW50KSBwdWJsaWMgb25seUNPTyB7CiAgICAgIGVhcm5pbmdzRWFjaEJsb2NrID0gYW1vdW50OwogICAgICByZXF1aXJlKGVhcm5pbmdzRWFjaEJsb2NrPjApOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZU1pbmVGb3JUb2tlbih1aW50IHRva2VuSWQpIHByaXZhdGUgewogICAgICBtaW5pbmdQb3dlclt0b2tlbklkXSA9IDE7CiAgICAgIG1pbmluZ05leHRMZXZlbEJyZWFrW3Rva2VuSWRdID0gRklSU1RfTUlOSU5HX0xFVkVMX0NPU1Q7CiAgICAgIG1pbmluZ0xhc3RQYXlvdXRCbG9ja1t0b2tlbklkXSA9IGJsb2NrLm51bWJlcjsKICAgIH0KICAgIGZ1bmN0aW9uIGNyZWF0ZU1pbmVGb3JUb2tlbih1aW50IHRva2VuSWQsIHVpbnQgcG93ZXIsIHVpbnQgeHAsIHVpbnQgbmV4dExldmVsQnJlYWspIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgbWluaW5nUG93ZXJbdG9rZW5JZF0gPSBwb3dlcjsKICAgICAgbWluaW5nUHVzaGVkW3Rva2VuSWRdID0geHA7CiAgICAgIG1pbmluZ05leHRMZXZlbEJyZWFrW3Rva2VuSWRdID0gbmV4dExldmVsQnJlYWs7CiAgICAgIG1pbmluZ0xhc3RQYXlvdXRCbG9ja1t0b2tlbklkXSA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGdyYWRlTWluaW5nKHVpbnQgdG9rZW5JZCwgdWludCBjb2lucykgcHVibGljIHsKICAgICAgcmVxdWlyZShiYWxhbmNlT2YobXNnLnNlbmRlcik+PWNvaW5zKTsKICAgICAgdWludCBuZXh0TGV2ZWxCcmVhayA9IG1pbmluZ05leHRMZXZlbEJyZWFrW3Rva2VuSWRdOwogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBjb2luczsKICAgICAgdWludCB4cCA9IG1pbmluZ1B1c2hlZFt0b2tlbklkXStjb2luczsKICAgICAgaWYgKHhwPm5leHRMZXZlbEJyZWFrKSB7CiAgICAgICAgdWludCBwb3dlciA9IG1pbmluZ1Bvd2VyW3Rva2VuSWRdOwogICAgICAgIGlmIChtaW5pbmdMYXN0UGF5b3V0QmxvY2tbdG9rZW5JZF0gPCBibG9jay5udW1iZXIpIHsKICAgICAgICAgIF9wYXlvdXRNaW5pbmcodG9rZW5JZCwgb3duZXJPZih0b2tlbklkKSk7CiAgICAgICAgfQogICAgICAgIHdoaWxlICh4cD5uZXh0TGV2ZWxCcmVhaykgewogICAgICAgICAgbmV4dExldmVsQnJlYWsgPSBuZXh0TGV2ZWxCcmVhay5tdWwoMTMpLmRpdig0KTsKICAgICAgICAgIHBvd2VyID0gcG93ZXIubXVsKDIpOwogICAgICAgICAgTWluaW5nTGV2ZWx1cChtc2cuc2VuZGVyLCB0b2tlbklkLCBwb3dlcik7CiAgICAgICAgfQogICAgICAgIG1pbmluZ05leHRMZXZlbEJyZWFrW3Rva2VuSWRdID0gbmV4dExldmVsQnJlYWs7CiAgICAgICAgbWluaW5nUG93ZXJbdG9rZW5JZF0gPSBwb3dlcjsKICAgICAgfQogICAgICBtaW5pbmdQdXNoZWRbdG9rZW5JZF0gPSB4cDsKICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgY29pbnMpOwogICAgICBNaW5pbmdVcGdyYWRlKG1zZy5zZW5kZXIsIHRva2VuSWQsIGNvaW5zKTsKICAgIH0KCiAgICBmdW5jdGlvbiBsZXZlbFVwTWluaW5nKHVpbnQgdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICAgIHVpbnQgZGlmZlRvTmV4dExldmVsID0gZ2V0Q29zdFRvTmV4dExldmVsKHRva2VuSWQpOwogICAgICBtaW5pbmdOZXh0TGV2ZWxCcmVha1t0b2tlbklkXSA9IG1pbmluZ05leHRMZXZlbEJyZWFrW3Rva2VuSWRdLm11bCgxMykuZGl2KDQpOwogICAgICBtaW5pbmdQdXNoZWRbdG9rZW5JZF0gPSBtaW5pbmdOZXh0TGV2ZWxCcmVha1t0b2tlbklkXS5zdWIoZGlmZlRvTmV4dExldmVsKTsKICAgICAgbWluaW5nUG93ZXJbdG9rZW5JZF0gPSBtaW5pbmdQb3dlclt0b2tlbklkXS5tdWwoMik7CiAgICAgIE1pbmluZ0xldmVsdXAobXNnLnNlbmRlciwgdG9rZW5JZCwgbWluaW5nUG93ZXJbdG9rZW5JZF0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHBheW91dE1pbmluZyh1aW50IHRva2VuSWQpIHB1YmxpYyB7CiAgICAgIHJlcXVpcmUoX293bnNUb2tlbihtc2cuc2VuZGVyLCB0b2tlbklkKSk7CiAgICAgIHJlcXVpcmUobWluaW5nTGFzdFBheW91dEJsb2NrW3Rva2VuSWRdIDwgYmxvY2subnVtYmVyKTsKICAgICAgX3BheW91dE1pbmluZyh0b2tlbklkLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfcGF5b3V0TWluaW5nKHVpbnQgdG9rZW5JZCwgYWRkcmVzcyBvd25lcikgcHJpdmF0ZSB7CiAgICAgIHVpbnQgY29pbnNNaW5lZCA9IGJsb2NrLm51bWJlci5zdWIobWluaW5nTGFzdFBheW91dEJsb2NrW3Rva2VuSWRdKS5tdWwoZWFybmluZ3NFYWNoQmxvY2spLm11bChtaW5pbmdQb3dlclt0b2tlbklkXSk7CiAgICAgIG1pbmluZ0xhc3RQYXlvdXRCbG9ja1t0b2tlbklkXSA9IGJsb2NrLm51bWJlcjsKICAgICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLmFkZChjb2luc01pbmVkKTsKICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoY29pbnNNaW5lZCk7CiAgICAgIE1pbmluZ1BheW91dChvd25lciwgdG9rZW5JZCwgY29pbnNNaW5lZCk7CiAgICB9CiAgICBmdW5jdGlvbiBfcGF5b3V0TWluaW5nKHVpbnQgdG9rZW5JZCwgYWRkcmVzcyBvd25lciwgYWRkcmVzcyBuZXdPd25lcikgcHJpdmF0ZSB7CiAgICAgIHVpbnQgY29pbnNNaW5lZEhhbGYgPSBibG9jay5udW1iZXIuc3ViKG1pbmluZ0xhc3RQYXlvdXRCbG9ja1t0b2tlbklkXSkubXVsKGVhcm5pbmdzRWFjaEJsb2NrKS5tdWwobWluaW5nUG93ZXJbdG9rZW5JZF0pLmRpdigyKTsKICAgICAgbWluaW5nTGFzdFBheW91dEJsb2NrW3Rva2VuSWRdID0gYmxvY2subnVtYmVyOwogICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uYWRkKGNvaW5zTWluZWRIYWxmKTsKICAgICAgYmFsYW5jZXNbbmV3T3duZXJdID0gYmFsYW5jZXNbbmV3T3duZXJdLmFkZChjb2luc01pbmVkSGFsZik7CiAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKGNvaW5zTWluZWRIYWxmLm11bCgyKSk7CiAgICAgIE1pbmluZ1N0b2xlblBheW91dChuZXdPd25lciwgb3duZXIsIHRva2VuSWQsIGNvaW5zTWluZWRIYWxmKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb3N0VG9OZXh0TGV2ZWwodWludCB0b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgIHJldHVybiBtaW5pbmdOZXh0TGV2ZWxCcmVha1t0b2tlbklkXS1taW5pbmdQdXNoZWRbdG9rZW5JZF07CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWluaW5nTWV0YSh1aW50IHRva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgZWFybkVhY2hCbG9jaywgdWludCBtaW5lZCwgdWludCB4cCwgdWludCBuZXh0TGV2ZWxVcCwgdWludCBsYXN0UGF5b3V0QmxvY2ssIHVpbnQgcG93ZXIpIHsKICAgICAgZWFybkVhY2hCbG9jayA9IG1pbmluZ1Bvd2VyW3Rva2VuSWRdLm11bChlYXJuaW5nc0VhY2hCbG9jayk7CiAgICAgIG1pbmVkID0gYmxvY2subnVtYmVyLnN1YihtaW5pbmdMYXN0UGF5b3V0QmxvY2tbdG9rZW5JZF0pLm11bChlYXJuaW5nc0VhY2hCbG9jaykubXVsKG1pbmluZ1Bvd2VyW3Rva2VuSWRdKTsKICAgICAgeHAgPSBtaW5pbmdQdXNoZWRbdG9rZW5JZF07CiAgICAgIG5leHRMZXZlbFVwID0gbWluaW5nTmV4dExldmVsQnJlYWtbdG9rZW5JZF07CiAgICAgIGxhc3RQYXlvdXRCbG9jayA9IG1pbmluZ0xhc3RQYXlvdXRCbG9ja1t0b2tlbklkXTsKICAgICAgcG93ZXIgPSBtaW5pbmdQb3dlclt0b2tlbklkXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb2xsZWN0aWJsZVdpdGhNZXRhKHVpbnQyNTYgdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBzZWxsaW5nUHJpY2UsIGFkZHJlc3Mgb3duZXIsIHVpbnQyNTYgbmV4dFNlbGxpbmdQcmljZSwgdWludCBlYXJuRWFjaEJsb2NrLCB1aW50IG1pbmVkLCB1aW50IHhwLCB1aW50IG5leHRMZXZlbFVwLCB1aW50IGxhc3RQYXlvdXRCbG9jaywgdWludCBwb3dlcikgewogICAgICBfdG9rZW5JZCA9IHRva2VuSWQ7CiAgICAgIHNlbGxpbmdQcmljZSA9IHRva2VuSW5kZXhUb1ByaWNlW3Rva2VuSWRdOwogICAgICBvd25lciA9IHRva2VuSW5kZXhUb093bmVyW3Rva2VuSWRdOwogICAgICBpZiAoc2VsbGluZ1ByaWNlID09IDApCiAgICAgICAgc2VsbGluZ1ByaWNlID0gZ2V0SW5pdGlhbFByaWNlT2ZUb2tlbih0b2tlbklkKTsKCiAgICAgIG5leHRTZWxsaW5nUHJpY2UgPSBnZXROZXh0UHJpY2Uoc2VsbGluZ1ByaWNlKTsKICAgICAgZWFybkVhY2hCbG9jayA9IG1pbmluZ1Bvd2VyW3Rva2VuSWRdLm11bChlYXJuaW5nc0VhY2hCbG9jayk7CiAgICAgIHVpbnQgbGFzdE1pbmVkQmxvY2sgPSBtaW5pbmdMYXN0UGF5b3V0QmxvY2tbdG9rZW5JZF07CiAgICAgIG1pbmVkID0gYmxvY2subnVtYmVyLnN1YihsYXN0TWluZWRCbG9jaykubXVsKGVhcm5pbmdzRWFjaEJsb2NrKS5tdWwobWluaW5nUG93ZXJbdG9rZW5JZF0pOwogICAgICB4cCA9IG1pbmluZ1B1c2hlZFt0b2tlbklkXTsKICAgICAgbmV4dExldmVsVXAgPSBtaW5pbmdOZXh0TGV2ZWxCcmVha1t0b2tlbklkXTsKICAgICAgbGFzdFBheW91dEJsb2NrID0gbWluaW5nTGFzdFBheW91dEJsb2NrW3Rva2VuSWRdOwogICAgICBwb3dlciA9IG1pbmluZ1Bvd2VyW3Rva2VuSWRdOwogICAgfQogICAgZnVuY3Rpb24gZ2V0RWFybkVhY2hCbG9jaygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgcmV0dXJuIGVhcm5pbmdzRWFjaEJsb2NrOwogICAgfQoKICAgIC8vLyBjcmVhdGUgVG9rZW5zIGZvciBUb2tlbiBPd25lcnMgaW4gYWxwaGEgR2FtZQogICAgZnVuY3Rpb24gY3JlYXRlUHJvbW9Db2xsZWN0aWJsZVdpdGhNaW5pbmcodWludDI1NiB0b2tlbklkLCBhZGRyZXNzIF9vd25lciwgdWludDI1NiBfcHJpY2UsIHVpbnQyNTYgcG93ZXIsIHVpbnQyNTYgeHAsIHVpbnQyNTYgbmV4dExldmVsQnJlYWspIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgcmVxdWlyZSh0b2tlbkluZGV4VG9Pd25lclt0b2tlbklkXT09YWRkcmVzcygwKSk7CgogICAgICBhZGRyZXNzIGNvbGxlY3RpYmxlT3duZXIgPSBfb3duZXI7CiAgICAgIGlmIChjb2xsZWN0aWJsZU93bmVyID09IGFkZHJlc3MoMCkpIHsKICAgICAgICBjb2xsZWN0aWJsZU93bmVyID0gY29vQWRkcmVzczsKICAgICAgfQoKICAgICAgaWYgKF9wcmljZSA8PSAwKSB7CiAgICAgICAgX3ByaWNlID0gZ2V0SW5pdGlhbFByaWNlT2ZUb2tlbih0b2tlbklkKTsKICAgICAgfQoKICAgICAgX2NyZWF0ZUNvbGxlY3RpYmxlKHRva2VuSWQsIF9wcmljZSk7CiAgICAgIGNyZWF0ZU1pbmVGb3JUb2tlbih0b2tlbklkLCBwb3dlciwgeHAsIG5leHRMZXZlbEJyZWFrKTsKICAgICAgLy8gVGhpcyB3aWxsIGFzc2lnbiBvd25lcnNoaXAsIGFuZCBhbHNvIGVtaXQgdGhlIFRyYW5zZmVyIGV2ZW50IGFzCiAgICAgIC8vIHBlciBFUkM3MjEgZHJhZnQKICAgICAgX3RyYW5zZmVyVG9rZW4oYWRkcmVzcygwKSwgY29sbGVjdGlibGVPd25lciwgdG9rZW5JZCk7CgogICAgfQoKICAgIC8vLyBjcmVhdGUgVG9rZW5zIGZvciBUb2tlbiBPd25lcnMgaW4gYWxwaGEgR2FtZQogICAgZnVuY3Rpb24gY3JlYXRlUHJvbW9Db2xsZWN0aWJsZXNXaXRoTWluaW5nKHVpbnQyNTZbXSB0b2tlbklkLCBhZGRyZXNzW10gX293bmVyLCB1aW50MjU2W10gX3ByaWNlLCB1aW50MjU2W10gcG93ZXIsIHVpbnQyNTZbXSB4cCwgdWludDI1NltdIG5leHRMZXZlbEJyZWFrKSBwdWJsaWMgb25seUNPTyB7CiAgICAgIGFkZHJlc3MgY29sbGVjdGlibGVPd25lcjsKICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdG9rZW5JZC5sZW5ndGg7IGkrKykgewogICAgICAgIHJlcXVpcmUodG9rZW5JbmRleFRvT3duZXJbdG9rZW5JZFtpXV09PWFkZHJlc3MoMCkpOwoKICAgICAgICBjb2xsZWN0aWJsZU93bmVyID0gX293bmVyW2ldOwogICAgICAgIGlmIChjb2xsZWN0aWJsZU93bmVyID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgIGNvbGxlY3RpYmxlT3duZXIgPSBjb29BZGRyZXNzOwogICAgICAgIH0KCiAgICAgICAgaWYgKF9wcmljZVtpXSA8PSAwKSB7CiAgICAgICAgICBfY3JlYXRlQ29sbGVjdGlibGUodG9rZW5JZFtpXSwgZ2V0SW5pdGlhbFByaWNlT2ZUb2tlbih0b2tlbklkW2ldKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9jcmVhdGVDb2xsZWN0aWJsZSh0b2tlbklkW2ldLCBfcHJpY2VbaV0pOwogICAgICAgIH0KCiAgICAgICAgY3JlYXRlTWluZUZvclRva2VuKHRva2VuSWRbaV0sIHBvd2VyW2ldLCB4cFtpXSwgbmV4dExldmVsQnJlYWtbaV0pOwogICAgICAgIC8vIFRoaXMgd2lsbCBhc3NpZ24gb3duZXJzaGlwLCBhbmQgYWxzbyBlbWl0IHRoZSBUcmFuc2ZlciBldmVudCBhcwogICAgICAgIC8vIHBlciBFUkM3MjEgZHJhZnQKICAgICAgICBfdHJhbnNmZXJUb2tlbihhZGRyZXNzKDApLCBjb2xsZWN0aWJsZU93bmVyLCB0b2tlbklkW2ldKTsKICAgICAgfQoKICAgIH0KICAvLwogIC8vICBNaW5pbmcgZW5kCiAgLy8KfQ=='.
	

]
