Class {
	#name : #SRT3a3cbb3b2ebfc8bc93a18adc5e4df810f2b698d8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3a3cbb3b2ebfc8bc93a18adc5e4df810f2b698d8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovLwovLyBCVVpaIGlzIGEgdm91Y2hlciB1c2VkIGFzIHBheW1lbnQgd2l0aGluIEJ1enouaW0gd2Vic2l0ZS4gCi8vIFlvdSBjYW4gdXNlIHRoaXMgdG9rZW4gdG8gcGF5IGZvciBhZHZlcnRpc2luZyBvbiB0aGUgbmV0d29yay4KLy8gT2Zjb3Vyc2UgeW91IGNhbiBhbHNvIHVzZSBGaWF0IGN1cnJlbmNpZXMgYW5kIHBheSB3aXRoIGNyZWRpdAovLyBjYXJkLCBidXQgdGhlIGFtb3VudCBvZiBCdXp6IGNyZWRpdGVkIHRvIHlvdXIgYWNjb3VudCB3aWxsIGJlCi8vIGNvbnZlcnRlZCBhY2NvcmRpbmcgdG8gY3VycmVudCBleGNoYW5nZSByYXRlIG9uIGRlY2V0cmFsaXplZAovLyBleGNoYW5nZXMuCi8vCgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CmNvbnRyYWN0IEJhc2UgewogICAgbW9kaWZpZXIgb25seShhZGRyZXNzIGFsbG93ZWQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWxsb3dlZCk7CiAgICAgICAgXzsKICAgIH0KfQoKY29udHJhY3QgT3duZWQgaXMgQmFzZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgbmV3T3duZXI7CiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHkob3duZXIpIHB1YmxpYyB7CiAgICAgICAgbmV3T3duZXIgPSBfbmV3T3duZXI7CiAgICB9CiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBvbmx5KG5ld093bmVyKSBwdWJsaWMgewogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICAgIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90byk7Cn0KCmNvbnRyYWN0IEVSQzIwIGlzIE93bmVkIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaXNTdGFydGVkT25seSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGlzU3RhcnRlZE9ubHkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIGZ1bmN0aW9uIGFwcHJvdmVfZml4ZWQoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfY3VycmVudFZhbHVlLCB1aW50IF92YWx1ZSkgaXNTdGFydGVkT25seSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gX2N1cnJlbnRWYWx1ZSl7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIGlzU3RhcnRlZE9ubHkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGJvb2wgICAgcHVibGljIGlzU3RhcnRlZCA9IGZhbHNlOwogICAgbW9kaWZpZXIgaXNTdGFydGVkT25seSgpIHsKICAgICAgICByZXF1aXJlKGlzU3RhcnRlZCk7CiAgICAgICAgXzsKICAgIH0KCn0KCmNvbnRyYWN0IEJVWlogaXMgRVJDMjAgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQnV6ei5pbSI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJCVVpaIjsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgbW9kaWZpZXIgaXNOb3RTdGFydGVkT25seSgpIHsKICAgICAgICByZXF1aXJlKCFpc1N0YXJ0ZWQpOwogICAgICAgIF87CiAgICB9CiAgICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpCiAgICBwdWJsaWMKICAgIGNvbnN0YW50CiAgICByZXR1cm5zKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogICAgfQogICAgCiAgICAvLyBCb290c3RyYXAgdGhlIGNvbnRyYWN0IGFuZCBtYWtlIHRoZSB0b2tlbnMKICAgIC8vIHRyYW5zZmVycmFibGUuIE5vIG1vcmUgbWludGluZyB3aWxsIGJlIHBvc3NpYmxlLgogICAgZnVuY3Rpb24gc3RhcnQoKQogICAgcHVibGljCiAgICBvbmx5KG93bmVyKQogICAgaXNOb3RTdGFydGVkT25seQogICAgewogICAgICAgIGlzU3RhcnRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gbXVsdGlUcmFuc2ZlcihhZGRyZXNzW10gZGVzdHMsIHVpbnRbXSB2YWx1ZXMpIHB1YmxpYwogICAgb25seShvd25lcikKICAgIGlzU3RhcnRlZE9ubHkKICAgIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgZGVzdHMubGVuZ3RoKSB7CiAgICAgICAgICAgdHJhbnNmZXIoZGVzdHNbaV0sIHZhbHVlc1tpXSk7CiAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4oaSk7CiAgICB9CgogICAgLy8KICAgIC8vIGJlZm9yZSBzdGFydDoKICAgIC8vIAogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludCBfYW1vdW50KSBwdWJsaWMKICAgIG9ubHkob3duZXIpCiAgICBpc05vdFN0YXJ0ZWRPbmx5CiAgICByZXR1cm5zKGJvb2wpCiAgICB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
