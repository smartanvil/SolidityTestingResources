Class {
	#name : #SRTd482c677db5a44b23ba6eed7f4a355a6b1465619,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd482c677db5a44b23ba6eed7f4a355a6b1465619 >> base64 [
	^ ''.
	

]
