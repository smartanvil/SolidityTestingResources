Class {
	#name : #SRTfad572db566e5234ac9fc3d570c4edc0050eaa92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfad572db566e5234ac9fc3d570c4edc0050eaa92 >> base64 [
	^ ''.
	

]
