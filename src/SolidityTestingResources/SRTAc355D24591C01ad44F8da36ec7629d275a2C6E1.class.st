Class {
	#name : #SRTAc355D24591C01ad44F8da36ec7629d275a2C6E1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTAc355D24591C01ad44F8da36ec7629d275a2C6E1 >> base64 [
	^ ''.
	

]
