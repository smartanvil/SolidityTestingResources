Class {
	#name : #SRT3d3ed0a4f0af930955806b34367e7c64a0e1c84a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3d3ed0a4f0af930955806b34367e7c64a0e1c84a >> base64 [
	^ ''.
	

]
