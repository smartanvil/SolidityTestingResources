Class {
	#name : #SRT1a6061e9bf511cfdc21e8a2f4b2bda8fa4ff8994,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1a6061e9bf511cfdc21e8a2f4b2bda8fa4ff8994 >> base64 [
	^ ''.
	

]
