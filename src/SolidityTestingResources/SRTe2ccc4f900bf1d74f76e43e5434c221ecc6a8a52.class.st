Class {
	#name : #SRTe2ccc4f900bf1d74f76e43e5434c221ecc6a8a52,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe2ccc4f900bf1d74f76e43e5434c221ecc6a8a52 >> base64 [
	^ ''.
	

]
