Class {
	#name : #SRT4a53e0f5144adcbb606087615bf78078c2097f02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4a53e0f5144adcbb606087615bf78078c2097f02 >> base64 [
	^ ''.
	

]
