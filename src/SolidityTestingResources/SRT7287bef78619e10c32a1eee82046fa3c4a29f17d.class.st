Class {
	#name : #SRT7287bef78619e10c32a1eee82046fa3c4a29f17d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7287bef78619e10c32a1eee82046fa3c4a29f17d >> base64 [
	^ ''.
	

]
