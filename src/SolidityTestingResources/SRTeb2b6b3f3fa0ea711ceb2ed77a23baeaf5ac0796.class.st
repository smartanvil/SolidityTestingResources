Class {
	#name : #SRTeb2b6b3f3fa0ea711ceb2ed77a23baeaf5ac0796,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb2b6b3f3fa0ea711ceb2ed77a23baeaf5ac0796 >> base64 [
	^ ''.
	

]
