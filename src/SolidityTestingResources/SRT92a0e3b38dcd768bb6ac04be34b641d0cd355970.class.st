Class {
	#name : #SRT92a0e3b38dcd768bb6ac04be34b641d0cd355970,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92a0e3b38dcd768bb6ac04be34b641d0cd355970 >> base64 [
	^ ''.
	

]
