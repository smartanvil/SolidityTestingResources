Class {
	#name : #SRT0bee5ca8dda2c0b8edd1c4369f7cc35d243e547f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0bee5ca8dda2c0b8edd1c4369f7cc35d243e547f >> base64 [
	^ ''.
	

]
