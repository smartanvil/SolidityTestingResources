Class {
	#name : #SRTe9e649c379a64a489da84783431bc79547044342,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe9e649c379a64a489da84783431bc79547044342 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgovKioKICogQHRpdGxlIEJ1cm5hYmxlIFRva2VuCiAqIEBkZXYgVG9rZW4gdGhhdCBjYW4gYmUgaXJyZXZlcnNpYmx5IGJ1cm5lZCAoZGVzdHJveWVkKS4KICovCmNvbnRyYWN0IEJ1cm5hYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgQnVybnMgYSBzcGVjaWZpYyBhbW91bnQgb2YgdG9rZW5zLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIGJ1cm5lZC4KICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlLCBCdXJuYWJsZVRva2VuIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKiBAZGV2IENyb3dkc2FsZSBpcyBhIGJhc2UgY29udHJhY3QgZm9yIG1hbmFnaW5nIGEgdG9rZW4gY3Jvd2RzYWxlLgogKiBDcm93ZHNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KY29udHJhY3QgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBNaW50YWJsZVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgdWludDI1NiBwdWJsaWMgZW5kVGltZTsKCiAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogIHVpbnQyNTYgcHVibGljIHJhdGU7CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCgogIGZ1bmN0aW9uIENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3JhdGUsIGFkZHJlc3MgX3dhbGxldCkgewogICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyk7CiAgICByZXF1aXJlKF9lbmRUaW1lID49IF9zdGFydFRpbWUpOwogICAgcmVxdWlyZShfcmF0ZSA+IDApOwogICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwoKICAgIHRva2VuID0gY3JlYXRlVG9rZW5Db250cmFjdCgpOwogICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIHJhdGUgPSBfcmF0ZTsKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgfQoKICAvLyBjcmVhdGVzIHRoZSB0b2tlbiB0byBiZSBzb2xkLgogIC8vIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGhhdmUgY3Jvd2RzYWxlIG9mIGEgc3BlY2lmaWMgbWludGFibGUgdG9rZW4uCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIGludGVybmFsIHJldHVybnMgKE1pbnRhYmxlVG9rZW4pIHsKICAgIHJldHVybiBuZXcgTWludGFibGVUb2tlbigpOwogIH0KCgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICB9CgogIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CgogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQoKICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2U7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogIH0KCgp9CgoKY29udHJhY3QgS2ltZXJhVG9rZW5Dcm93ZHNhbGUgaXMgT3duYWJsZSwgQ3Jvd2RzYWxlIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAKICAgIC8vb3BlcmF0aW9uYWwKICAgIGJvb2wgcHVibGljIExvY2t1cFRva2Vuc1dpdGhkcmF3biA9IGZhbHNlOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9EZWMgPSAxMCoqMTg7CiAgICB1aW50MjU2IHB1YmxpYyB0b2tlbnNMZWZ0ID0gMTAwMDAwMDAwMCp0b0RlYzsKICAgIAogICAgZW51bSBTdGF0ZSB7IEJlZm9yZVNhbGUsIHByZVNhbGUsIE5vcm1hbFNhbGUsIFNob3VsZEZpbmFsaXplLCBMb2NrdXAsIFNhbGVPdmVyIH0KICAgIFN0YXRlIHB1YmxpYyBzdGF0ZSA9IFN0YXRlLkJlZm9yZVNhbGU7CiAgICB1aW50MjU2IHB1YmxpYyBhY2N1bXVsYXRlZCA9IDA7CgoKIC8qIC0tLSBXYWxsZXRzIC0tLSAqLwoKICAgIGFkZHJlc3NbN10gcHVibGljIHdhbGxldHM7CgogICAgdWludDI1NiBwdWJsaWMgYWRtaW5TdW0gPSA0NzAwMDAwMDAqdG9EZWM7IC8vIDAgLSAyMy41JQogICAgdWludDI1NiBwdWJsaWMgTmlnZWxGdW5kU3VtID0gNDAwMDAwMDAwKnRvRGVjOyAvLyAxIC0gMjAlCiAgICB1aW50MjU2IHB1YmxpYyB0ZWFtU3VtID0gMTAwMDAwMDAwKnRvRGVjOyAvLyAyIC0gNSUKICAgIHVpbnQyNTYgcHVibGljIGFkdmlzb3IxU3VtID0gMTIwMDAwMDAqdG9EZWM7IC8vIDMgLSAwLjYlCiAgICB1aW50MjU2IHB1YmxpYyBhZHZpc29yMlN1bSA9IDEyMDAwMDAwKnRvRGVjOyAvLyA0IC0gMC42JQogICAgdWludDI1NiBwdWJsaWMgYWR2aXNvcjNTdW0gPSA2MDAwMDAwKnRvRGVjOyAvLyA1IC0gMC4zJQoKICAgIC8vIC8qIC0tLSBUaW1lIHBlcmlvZHMgLS0tICovCgogICAgdWludDI1NiBwdWJsaWMgbG9ja3VwUGVyaW9kID0gMzYwICogMSBkYXlzOyAvLyAzNjAgZGF5cyAtIDE1NTUyMDAwCgogICAgdWludDI1NiBwdWJsaWMgcHJlc2FsZUVuZHRpbWUgPSAxNTI5MDIwODAwOwogICAgdWludDI1NiBwdWJsaWMgSUNPRW5kVGltZSA9IDE1MzE2MTI4MDA7CgoKCiAgICBldmVudCBMb2NrZWRVcFRva2Vuc1dpdGhkcmF3bigpOwogICAgZXZlbnQgRmluYWxpemVkKCk7CgogICAgbW9kaWZpZXIgY2FuV2l0aGRyYXdMb2NrdXAoKSB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5Mb2NrdXApOwogICAgICAgIHJlcXVpcmUoZW5kVGltZS5hZGQobG9ja3VwUGVyaW9kKSA8IGJsb2NrLnRpbWVzdGFtcCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBLaW1lcmFUb2tlbkNyb3dkc2FsZSgKICAgICAgICBhZGRyZXNzIF9hZG1pbiwgLyp1c2VkIGFzIHRoZSB3YWxsZXQgZm9yIGNvbGxlY3RpbmcgS2ltZXJhcyovCiAgICAgICAgYWRkcmVzcyBfTmlnZWxGdW5kLAogICAgICAgIGFkZHJlc3MgX3RlYW0sCiAgICAgICAgYWRkcmVzcyBfYWR2aXNvcjEsCiAgICAgICAgYWRkcmVzcyBfYWR2aXNvcjIsCiAgICAgICAgYWRkcmVzcyBfYWR2aXNvcjMsCiAgICAgICAgYWRkcmVzcyBfdW5zb2xkKQogICAgQ3Jvd2RzYWxlKAogICAgICAgIG5vdyArIDUsIC8vIDIwMTgtMDEtMjVUMTI6MDA6MDArMDA6MDAgLSAxNTE2ODgxNjAwCiAgICAgICAgSUNPRW5kVGltZSwvLyAyMDE4LTAyLTI1VDEyOjAwOjAwKzAwOjAwIC0gMTUxOTU2MDAwMCAKICAgICAgICAzMzMzLC8qIHN0YXJ0IHJhdGUgLSAzMzMzICovCiAgICAgICAgX2FkbWluCiAgICApICAKICAgIHB1YmxpYyAKICAgIHsgICAgICAKICAgICAgICB3YWxsZXRzWzBdID0gX2FkbWluOwogICAgICAgIHdhbGxldHNbMV0gPSBfTmlnZWxGdW5kOwogICAgICAgIHdhbGxldHNbMl0gPSBfdGVhbTsKICAgICAgICB3YWxsZXRzWzNdID0gX2Fkdmlzb3IxOwogICAgICAgIHdhbGxldHNbNF0gPSBfYWR2aXNvcjI7CiAgICAgICAgd2FsbGV0c1s1XSA9IF9hZHZpc29yMzsKICAgICAgICB3YWxsZXRzWzZdID0gX3Vuc29sZDsKICAgICAgICBvd25lciA9IF9hZG1pbjsKICAgICAgICB0b2tlbi5taW50KHdhbGxldHNbMF0sIGFkbWluU3VtKTsKICAgICAgICB0b2tlbi5taW50KHdhbGxldHNbMV0sIE5pZ2VsRnVuZFN1bSk7CiAgICAgICAgdG9rZW4ubWludCh3YWxsZXRzWzNdLCBhZHZpc29yMVN1bSk7CiAgICAgICAgdG9rZW4ubWludCh3YWxsZXRzWzRdLCBhZHZpc29yMlN1bSk7CiAgICAgICAgdG9rZW4ubWludCh3YWxsZXRzWzVdLCBhZHZpc29yM1N1bSk7CiAgICB9CgogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgICAgIGZvcndhcmRGdW5kc0Ftb3VudChtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZvcndhcmRGdW5kc0Ftb3VudCh1aW50MjU2IGFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIHZhciBoYWxmUGVyY2VudCA9IGFtb3VudC5kaXYoMjAwKTsKICAgICAgICB2YXIgYWRtaW5BbW91bnQgPSBoYWxmUGVyY2VudC5tdWwoMTk3KTsKICAgICAgICB2YXIgYWR2aXNvckFtb3VudCA9IGhhbGZQZXJjZW50Lm11bCgzKTsKICAgICAgICB3YWxsZXRzWzBdLnRyYW5zZmVyKGFkbWluQW1vdW50KTsKICAgICAgICB3YWxsZXRzWzNdLnRyYW5zZmVyKGFkdmlzb3JBbW91bnQpOwogICAgICAgIHZhciBsZWZ0ID0gYW1vdW50LnN1YihhZG1pbkFtb3VudCkuc3ViKGFkdmlzb3JBbW91bnQpOwogICAgICAgIGFjY3VtdWxhdGVkID0gYWNjdW11bGF0ZWQuYWRkKGxlZnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZEFtb3VudCh1aW50MjU2IGFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYW1vdW50KTsKICAgIH0KCgogICAgZnVuY3Rpb24gZml4QWRkcmVzcyhhZGRyZXNzIG5ld0FkZHJlc3MsIHVpbnQyNTYgd2FsbGV0SW5kZXgpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHdhbGxldHNbd2FsbGV0SW5kZXhdID0gbmV3QWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50UmF0ZShTdGF0ZSBzdGF0KSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHN0YXQgPT0gU3RhdGUuTm9ybWFsU2FsZSkgewogICAgICAgICAgICByYXRlID0gMTY2NjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zVXBkYXRlU3RhdGUoKSBpbnRlcm5hbCB7CiAgICAgICAgdmFyIHRlbXAgPSBzdGF0ZTsKICAgICAgICBpZih0ZW1wID09IFN0YXRlLkJlZm9yZVNhbGUgJiYgbm93ID49IHN0YXJ0VGltZSkgeyB0ZW1wID0gU3RhdGUucHJlU2FsZTsgfQogICAgICAgIGlmKHRlbXAgPT0gU3RhdGUucHJlU2FsZSAmJiBub3cgPj0gcHJlc2FsZUVuZHRpbWUpIHsgdGVtcCA9IFN0YXRlLk5vcm1hbFNhbGU7IH0KICAgICAgICBpZigodGVtcCA9PSBTdGF0ZS5wcmVTYWxlIHx8IHRlbXAgPT0gU3RhdGUuQmVmb3JlU2FsZSkgJiYgdG9rZW5zTGVmdCA8PSAyNTAwMDAwMDAqdG9EZWMpIHsgdGVtcCA9IFN0YXRlLk5vcm1hbFNhbGU7IH0KICAgICAgICBjYWxjdWxhdGVDdXJyZW50UmF0ZSh0ZW1wKTsKICAgICAgICByZXF1aXJlKHRlbXAgIT0gU3RhdGUuU2hvdWxkRmluYWxpemUgJiYgdGVtcCAhPSBTdGF0ZS5Mb2NrdXAgJiYgdGVtcCAhPSBTdGF0ZS5TYWxlT3ZlciAmJiBtc2cudmFsdWUgPj0gdG9EZWMuZGl2KDIpKTsKICAgICAgICBpZihtc2cudmFsdWUubXVsKHJhdGUpID49IHRva2Vuc0xlZnQpIHsgdGVtcCA9IFN0YXRlLlNob3VsZEZpbmFsaXplOyB9CiAgICAgICAgc3RhdGUgPSB0ZW1wOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zVXBkYXRlU3RhdGUoKTsKICAgICAgICB2YXIgbnVtVG9rZW5zID0gbXNnLnZhbHVlLm11bChyYXRlKTsKICAgICAgICBpZihzdGF0ZSA9PSBTdGF0ZS5TaG91bGRGaW5hbGl6ZSkgewogICAgICAgICAgICBsYXN0VG9rZW5zKGJlbmVmaWNpYXJ5KTsKICAgICAgICAgICAgbnVtVG9rZW5zID0gdG9rZW5zTGVmdDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHN1cGVyLmJ1eVRva2VucyhiZW5lZmljaWFyeSk7CiAgICAgICAgfQogICAgICAgIHRva2Vuc0xlZnQgPSB0b2tlbnNMZWZ0LnN1YihudW1Ub2tlbnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGxhc3RUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgICAgICB1aW50MjU2IHRva2Vuc0ZvckZ1bGxCdXkgPSB3ZWlBbW91bnQubXVsKHJhdGUpOy8vIG11c3QgYmUgYmlnZ2VyIG9yIGVxdWFsIHRvIHRva2Vuc0xlZnQgdG8gZ2V0IGhlcmUKICAgICAgICB1aW50MjU2IHRva2Vuc1RvUmVLaW1lcmFGb3IgPSB0b2tlbnNGb3JGdWxsQnV5LnN1Yih0b2tlbnNMZWZ0KTsKICAgICAgICB1aW50MjU2IHRva2Vuc1JlbWFpbmluZyA9IHRva2Vuc0ZvckZ1bGxCdXkuc3ViKHRva2Vuc1RvUmVLaW1lcmFGb3IpOwogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50VG9SZUtpbWVyYSA9IHRva2Vuc1RvUmVLaW1lcmFGb3IuZGl2KHJhdGUpOwogICAgICAgIHVpbnQyNTYgd2VpUmVtYWluaW5nID0gd2VpQW1vdW50LnN1Yih3ZWlBbW91bnRUb1JlS2ltZXJhKTsKICAgICAgICAKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaVJlbWFpbmluZyk7CgogICAgICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vuc1JlbWFpbmluZyk7CgogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaVJlbWFpbmluZywgdG9rZW5zUmVtYWluaW5nKTsKICAgICAgICBmb3J3YXJkRnVuZHNBbW91bnQod2VpUmVtYWluaW5nKTsKICAgICAgICByZWZ1bmRBbW91bnQod2VpQW1vdW50VG9SZUtpbWVyYSk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdMb2NrdXBUb2tlbnMoKSBjYW5XaXRoZHJhd0xvY2t1cCBwdWJsaWMgewogICAgICAgIHRva2VuLm1pbnQod2FsbGV0c1syXSwgdGVhbVN1bSk7CiAgICAgICAgCiAgICAgICAgdG9rZW4uZmluaXNoTWludGluZygpOwogICAgICAgIExvY2t1cFRva2Vuc1dpdGhkcmF3biA9IHRydWU7CiAgICAgICAgTG9ja2VkVXBUb2tlbnNXaXRoZHJhd24oKTsKICAgICAgICBzdGF0ZSA9IFN0YXRlLlNhbGVPdmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXplVXBkYXRlU3RhdGUoKSBpbnRlcm5hbCB7CiAgICAgICAgaWYobm93ID4gZW5kVGltZSkgeyBzdGF0ZSA9IFN0YXRlLlNob3VsZEZpbmFsaXplOyB9CiAgICAgICAgaWYodG9rZW5zTGVmdCA9PSAwKSB7IHN0YXRlID0gU3RhdGUuU2hvdWxkRmluYWxpemU7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHB1YmxpYyB7CiAgICAgICAgZmluYWxpemVVcGRhdGVTdGF0ZSgpOwogICAgICAgIHJlcXVpcmUgKHN0YXRlID09IFN0YXRlLlNob3VsZEZpbmFsaXplKTsKCiAgICAgICAgZmluYWxpemF0aW9uKCk7CiAgICAgICAgRmluYWxpemVkKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemF0aW9uKCkgaW50ZXJuYWwgewogICAgICAgIGVuZFRpbWUgPSBibG9jay50aW1lc3RhbXA7IC8vIHVwZGF0ZSB0byBzdGFydCBsb2NrdXAKICAgICAgICB0b2tlbi5taW50KHdhbGxldHNbNl0sIHRva2Vuc0xlZnQpOyAvLyBtaW50IHVuc29sZCB0b2tlbnMKICAgICAgICBzdGF0ZSA9IFN0YXRlLkxvY2t1cDsKICAgIH0KICAgIAp9'.
	

]
