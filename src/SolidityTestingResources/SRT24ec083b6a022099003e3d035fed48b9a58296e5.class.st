Class {
	#name : #SRT24ec083b6a022099003e3d035fed48b9a58296e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT24ec083b6a022099003e3d035fed48b9a58296e5 >> base64 [
	^ 'Y29udHJhY3QgVG9tZWthIHsKCiAgICAvL0RlY2xhcmUgdmFyaWFibGVzIGZvciBzdG9yYWdlIGNyaXRpY2FsIHRvIGNvbnRyYWN0CiAgICB1aW50IHByaXZhdGUgYmFsYW5jZSA9IDA7CiAgICB1aW50IHByaXZhdGUgY29sbGVjdGVkRmVlcyA9IDA7CiAgICB1aW50IHByaXZhdGUgZmVlUGVyY2VudCA9IDEwOwogICAgdWludCBwcml2YXRlIHB5cmFtaWRNdWx0aXBsaWVyID0gMzAwOwogICAgdWludCBwcml2YXRlIHBheW91dE9yZGVyID0gMDsKCiAgICBhZGRyZXNzIHByaXZhdGUgY3JlYXRvcjsKICAgIAogICAgLy9TZXRzIGNyZWF0b3IKICAgIGZ1bmN0aW9uIFRvbWVrYSgpIHsKICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5b3duZXIgeyBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yKSBfOyB9ICAgIAogICAgc3RydWN0IFBhcnRpY2lwYW50IHsKICAgICAgICBhZGRyZXNzIGV0aGVyQWRkcmVzczsKICAgICAgICB1aW50IHBheW91dDsKICAgIH0KCiAgICBQYXJ0aWNpcGFudFtdIHByaXZhdGUgcGFydGljaXBhbnRzOwoKICAgIC8vRmFsbGJhY2sgZnVuY3Rpb24KICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGluaXQoKTsKICAgIH0KICAgIAogICAgLy9pbml0IGZ1bmN0aW9uIHJ1biBvbiBmYWxsYmFjawogICAgZnVuY3Rpb24gaW5pdCgpIHByaXZhdGV7CiAgICAgICAgLy9FbnN1cmVzIG9ubHkgdHggd2l0aCB2YWx1ZSBvZiAxIGV0aGVyIG9yIGdyZWF0ZXIgYXJlIHByb2Nlc3NlZCBhbmQgYWRkZWQgdG8gcHlyYW1pZAogICAgICAgIGlmIChtc2cudmFsdWUgPCAxIGV0aGVyKSB7CiAgICAgICAgICAgIGNvbGxlY3RlZEZlZXMgKz0gbXNnLnZhbHVlOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHVpbnQgX2ZlZSA9IGZlZVBlcmNlbnQ7CiAgICAgICAgLy81MCUgZmVlIHJlYmF0ZSBvbiBhbnkgZXRoZXIgdmFsdWUgb2YgNTAgb3IgZ3JlYXRlcgogICAgICAgIGlmIChtc2cudmFsdWUgPj0gNTAgZXRoZXIpIF9mZWUgLz0gMjsKICAgICAgICAKICAgICAgICBhZGRQYXlvdXQoX2ZlZSk7CiAgICB9CiAgICAKICAgIC8vRnVuY3Rpb24gY2FsbGVkIGZvciB2YWxpZCB0eCB0byB0aGUgY29udHJhY3QgCiAgICBmdW5jdGlvbiBhZGRQYXlvdXQodWludCBfZmVlKSBwcml2YXRlIHsKICAgICAgICAvL0FkZHMgbmV3IGFkZHJlc3MgdG8gcGFydGljaXBhbnQgYXJyYXkKICAgICAgICBwYXJ0aWNpcGFudHMucHVzaChQYXJ0aWNpcGFudChtc2cuc2VuZGVyLCAobXNnLnZhbHVlICogcHlyYW1pZE11bHRpcGxpZXIpIC8gMTAwKSk7CiAgICAgICAgCiAgICAgICAgLy9UaGVzZSBzdGF0ZW1lbnRzIGVuc3VyZSBhIHF1aWNrZXIgcGF5b3V0IHN5c3RlbSB0byBsYXRlciBweXJhbWlkIGVudHJhbnRzLCBzbyB0aGUgcHlyYW1pZCBoYXMgYSBsb25nZXIgbGlmZXNwYW4KICAgICAgICBpZiAocGFydGljaXBhbnRzLmxlbmd0aCA9PSAxMCkgIHB5cmFtaWRNdWx0aXBsaWVyID0gMjAwOwogICAgICAgIGVsc2UgaWYgKHBhcnRpY2lwYW50cy5sZW5ndGggPT0gMjUpICBweXJhbWlkTXVsdGlwbGllciA9IDE1MDsKICAgICAgICAKICAgICAgICAvLyBjb2xsZWN0IGZlZXMgYW5kIHVwZGF0ZSBjb250cmFjdCBiYWxhbmNlCiAgICAgICAgYmFsYW5jZSArPSAobXNnLnZhbHVlICogKDEwMCAtIF9mZWUpKS8xMDA7CiAgICAgICAgY29sbGVjdGVkRmVlcyArPSAobXNnLnZhbHVlICogX2ZlZSkvMTAwOwogICAgICAgIAoJLy9QYXlzIGVhcmxpZXIgcGFydGljaXBpYW50cyBpZiBiYWxhbmNlIHN1ZmZpY2llbnQKICAgICAgICB3aGlsZSAoYmFsYW5jZSA+IHBhcnRpY2lwYW50c1twYXlvdXRPcmRlcl0ucGF5b3V0KSB7CiAgICAgICAgICAgIHVpbnQgcGF5b3V0VG9TZW5kID0gcGFydGljaXBhbnRzW3BheW91dE9yZGVyXS5wYXlvdXQ7CiAgICAgICAgICAgIHBhcnRpY2lwYW50c1twYXlvdXRPcmRlcl0uZXRoZXJBZGRyZXNzLnNlbmQocGF5b3V0VG9TZW5kKTsKCiAgICAgICAgICAgIGJhbGFuY2UgLT0gcGFydGljaXBhbnRzW3BheW91dE9yZGVyXS5wYXlvdXQ7CiAgICAgICAgICAgIHBheW91dE9yZGVyICs9IDE7CiAgICAgICAgfQogICAgfQoKICAgIC8vRmVlIGZ1bmN0aW9ucyBmb3IgY3JlYXRvcgogICAgZnVuY3Rpb24gY29sbGVjdEFsbEZlZXMoKSBvbmx5b3duZXIgewogICAgICAgIGlmIChjb2xsZWN0ZWRGZWVzID09IDApIHRocm93OwoKICAgICAgICBjcmVhdG9yLnNlbmQoY29sbGVjdGVkRmVlcyk7CiAgICAgICAgY29sbGVjdGVkRmVlcyA9IDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNvbGxlY3RGZWVzSW5FdGhlcih1aW50IF9hbXQpIG9ubHlvd25lciB7CiAgICAgICAgX2FtdCAqPSAxIGV0aGVyOwogICAgICAgIGlmIChfYW10ID4gY29sbGVjdGVkRmVlcykgY29sbGVjdEFsbEZlZXMoKTsKICAgICAgICAKICAgICAgICBpZiAoY29sbGVjdGVkRmVlcyA9PSAwKSB0aHJvdzsKCiAgICAgICAgY3JlYXRvci5zZW5kKF9hbXQpOwogICAgICAgIGNvbGxlY3RlZEZlZXMgLT0gX2FtdDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29sbGVjdFBlcmNlbnRPZkZlZXModWludCBfcGNlbnQpIG9ubHlvd25lciB7CiAgICAgICAgaWYgKGNvbGxlY3RlZEZlZXMgPT0gMCB8fCBfcGNlbnQgPiAxMDApIHRocm93OwogICAgICAgIAogICAgICAgIHVpbnQgZmVlc1RvQ29sbGVjdCA9IGNvbGxlY3RlZEZlZXMgLyAxMDAgKiBfcGNlbnQ7CiAgICAgICAgY3JlYXRvci5zZW5kKGZlZXNUb0NvbGxlY3QpOwogICAgICAgIGNvbGxlY3RlZEZlZXMgLT0gZmVlc1RvQ29sbGVjdDsKICAgIH0KCiAgICAvL0Z1bmN0aW9ucyBmb3IgY2hhbmdpbmcgdmFyaWFibGVzIHJlbGF0ZWQgdG8gdGhlIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9vd25lcikgb25seW93bmVyIHsKICAgICAgICBjcmVhdG9yID0gX293bmVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aXBsaWVyKHVpbnQgX211bHQpIG9ubHlvd25lciB7CiAgICAgICAgaWYgKF9tdWx0ID4gMzAwIHx8IF9tdWx0IDwgMTIwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBweXJhbWlkTXVsdGlwbGllciA9IF9tdWx0OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VGZWVQZXJjZW50YWdlKHVpbnQgX2ZlZSkgb25seW93bmVyIHsKICAgICAgICBpZiAoX2ZlZSA+IDEwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBmZWVQZXJjZW50ID0gX2ZlZTsKICAgIH0KICAgIAogICAgLy9GdW5jdGlvbnMgdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiB0byBlbmQtdXNlciB1c2luZyBKU09OIGludGVyZmFjZSBvciBvdGhlciBpbnRlcmZhY2VzCiAgICBmdW5jdGlvbiBjdXJyZW50TXVsdGlwbGllcigpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgbXVsdGlwbGllciwgc3RyaW5nIGluZm8pIHsKICAgICAgICBtdWx0aXBsaWVyID0gcHlyYW1pZE11bHRpcGxpZXI7CiAgICAgICAgaW5mbyA9ICdUaGlzIG11bHRpcGxpZXIgYXBwbGllcyB0byB5b3UgYXMgc29vbiBhcyB0cmFuc2FjdGlvbiBpcyByZWNlaXZlZCwgbWF5IGJlIGxvd2VyZWQgdG8gaGFzdGVuIHBheW91dHMgb3IgaW5jcmVhc2VkIGlmIHBheW91dHMgYXJlIGZhc3QgZW5vdWdoLiBEdWUgdG8gbm8gZmxvYXQgb3IgZGVjaW1hbHMsIG11bHRpcGxpZXIgaXMgeDEwMCBmb3IgYSBmcmFjdGlvbmFsIG11bHRpcGxpZXIgZS5nLiAyNTAgaXMgYWN0dWFsbHkgYSAyLjV4IG11bHRpcGxpZXIuIENhcHBlZCBhdCAzeCBtYXggYW5kIDEuMnggbWluLic7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGN1cnJlbnRGZWVQZXJjZW50YWdlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmZWUsIHN0cmluZyBpbmZvKSB7CiAgICAgICAgZmVlID0gZmVlUGVyY2VudDsKICAgICAgICBpbmZvID0gJ1Nob3duIGluICUgZm9ybS4gRmVlIGlzIGhhbHZlZCg1MCUpIGZvciBhbW91bnRzIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiA1MCBldGhlcnMuIChGZWUgbWF5IGNoYW5nZSwgYnV0IGlzIGNhcHBlZCB0byBhIG1heGltdW0gb2YgMTAlKSc7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGN1cnJlbnRQeXJhbWlkQmFsYW5jZUFwcHJveGltYXRlbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50IHB5cmFtaWRCYWxhbmNlLCBzdHJpbmcgaW5mbykgewogICAgICAgIHB5cmFtaWRCYWxhbmNlID0gYmFsYW5jZSAvIDEgZXRoZXI7CiAgICAgICAgaW5mbyA9ICdBbGwgYmFsYW5jZSB2YWx1ZXMgYXJlIG1lYXN1cmVkIGluIEV0aGVycywgbm90ZSB0aGF0IGR1ZSB0byBubyBkZWNpbWFsIHBsYWNpbmcsIHRoZXNlIHZhbHVlcyBzaG93IHVwIGFzIGludGVnZXJzIG9ubHksIHdpdGhpbiB0aGUgY29udHJhY3QgaXRzZWxmIHlvdSB3aWxsIGdldCB0aGUgZXhhY3QgZGVjaW1hbCB2YWx1ZSB5b3UgYXJlIHN1cHBvc2VkIHRvJzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbmV4dFBheW91dFdoZW5QeXJhbWlkQmFsYW5jZVRvdGFsc0FwcHJveGltYXRlbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2VQYXlvdXQpIHsKICAgICAgICAgICAgYmFsYW5jZVBheW91dCA9IHBhcnRpY2lwYW50c1twYXlvdXRPcmRlcl0ucGF5b3V0IC8gMSBldGhlcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZmVlc1NlcGVyYXRlRnJvbUJhbGFuY2VBcHByb3hpbWF0ZWx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmZWVzKSB7CiAgICAgICAgZmVlcyA9IGNvbGxlY3RlZEZlZXMgLyAxIGV0aGVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b3RhbFBhcnRpY2lwYW50cygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgY291bnQpIHsKICAgICAgICBjb3VudCA9IHBhcnRpY2lwYW50cy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG51bWJlck9mUGFydGljaXBhbnRzV2FpdGluZ0ZvclBheW91dCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgY291bnQpIHsKICAgICAgICBjb3VudCA9IHBhcnRpY2lwYW50cy5sZW5ndGggLSBwYXlvdXRPcmRlcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcGFydGljaXBhbnREZXRhaWxzKHVpbnQgb3JkZXJJblB5cmFtaWQpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgQWRkcmVzcywgdWludCBQYXlvdXQpCiAgICB7CiAgICAgICAgaWYgKG9yZGVySW5QeXJhbWlkIDw9IHBhcnRpY2lwYW50cy5sZW5ndGgpIHsKICAgICAgICAgICAgQWRkcmVzcyA9IHBhcnRpY2lwYW50c1tvcmRlckluUHlyYW1pZF0uZXRoZXJBZGRyZXNzOwogICAgICAgICAgICBQYXlvdXQgPSBwYXJ0aWNpcGFudHNbb3JkZXJJblB5cmFtaWRdLnBheW91dCAvIDEgZXRoZXI7CiAgICAgICAgfQogICAgfQp9'.
	

]
