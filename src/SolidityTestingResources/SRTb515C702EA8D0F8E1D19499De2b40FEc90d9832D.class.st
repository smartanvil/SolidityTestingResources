Class {
	#name : #SRTb515C702EA8D0F8E1D19499De2b40FEc90d9832D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb515C702EA8D0F8E1D19499De2b40FEc90d9832D >> base64 [
	^ ''.
	

]
