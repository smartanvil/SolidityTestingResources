Class {
	#name : #SRT86fb872ff061f7d47d7c8154e6030731695ed1fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86fb872ff061f7d47d7c8154e6030731695ed1fe >> base64 [
	^ ''.
	

]
