Class {
	#name : #SRT457ca82795ae2e64337fea3196b237f54f3d9d17,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT457ca82795ae2e64337fea3196b237f54f3d9d17 >> base64 [
	^ ''.
	

]
