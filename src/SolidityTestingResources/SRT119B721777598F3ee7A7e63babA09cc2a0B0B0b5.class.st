Class {
	#name : #SRT119B721777598F3ee7A7e63babA09cc2a0B0B0b5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT119B721777598F3ee7A7e63babA09cc2a0B0B0b5 >> base64 [
	^ ''.
	

]
