Class {
	#name : #SRT9fff4bc5166f50eae026e6a57972a149e4fd140f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9fff4bc5166f50eae026e6a57972a149e4fd140f >> base64 [
	^ ''.
	

]
