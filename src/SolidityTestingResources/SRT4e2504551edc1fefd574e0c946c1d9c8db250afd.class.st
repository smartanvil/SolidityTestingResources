Class {
	#name : #SRT4e2504551edc1fefd574e0c946c1d9c8db250afd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e2504551edc1fefd574e0c946c1d9c8db250afd >> base64 [
	^ ''.
	

]
