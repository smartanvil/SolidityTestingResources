Class {
	#name : #SRT92023ec96a788cac18f1472743da5c56839c8683,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92023ec96a788cac18f1472743da5c56839c8683 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL293bmVyc2hpcC9DbGFpbWFibGUuc29sCgovKioKICogQHRpdGxlIENsYWltYWJsZQogKiBAZGV2IEV4dGVuc2lvbiBmb3IgdGhlIE93bmFibGUgY29udHJhY3QsIHdoZXJlIHRoZSBvd25lcnNoaXAgbmVlZHMgdG8gYmUgY2xhaW1lZC4KICogVGhpcyBhbGxvd3MgdGhlIG5ldyBvd25lciB0byBhY2NlcHQgdGhlIHRyYW5zZmVyLgogKi8KY29udHJhY3QgQ2xhaW1hYmxlIGlzIE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIHBlbmRpbmdPd25lcjsKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0aHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIHBlbmRpbmdPd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5UGVuZGluZ093bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHBlbmRpbmdPd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gc2V0IHRoZSBwZW5kaW5nT3duZXIgYWRkcmVzcy4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcGVuZGluZ093bmVyID0gbmV3T3duZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgcGVuZGluZ093bmVyIGFkZHJlc3MgdG8gZmluYWxpemUgdGhlIHRyYW5zZmVyLgogICAqLwogIGZ1bmN0aW9uIGNsYWltT3duZXJzaGlwKCkgb25seVBlbmRpbmdPd25lciBwdWJsaWMgewogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIHBlbmRpbmdPd25lcik7CiAgICBvd25lciA9IHBlbmRpbmdPd25lcjsKICAgIHBlbmRpbmdPd25lciA9IGFkZHJlc3MoMCk7CiAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjAvRVJDMjBCYXNpYy5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL3Rva2VuL0VSQzIwL0VSQzIwLnNvbAoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogY29udHJhY3RzL1dpdGhkcmF3YWxzLnNvbAoKY29udHJhY3QgV2l0aGRyYXdhbHMgaXMgQ2xhaW1hYmxlIHsKICAgIAogICAgLyoqCiAgICAqIEBkZXYgcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgd2l0aGRyYXcgZnVuY3Rpb24KICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyB3aXRoZHJhd0NyZWF0b3I7CgogICAgLyoqCiAgICAqIEBkZXYgaWYgaXQncyB0b2tlbiB0cmFuc2ZlciB0aGUgdG9rZW5BZGRyZXNzIHdpbGwgYmUgMHgwMDAwLi4uIAogICAgKiBAcGFyYW0gX2Rlc3RpbmF0aW9uIHJlY2VpdmVyIG9mIHRva2VuIG9yIGV0aAogICAgKiBAcGFyYW0gX2Ftb3VudCBhbW91bnQgb2YgRVRIIG9yIFRva2VucwogICAgKiBAcGFyYW0gX3Rva2VuQWRkcmVzcyBhY3R1YWwgdG9rZW4gYWRkcmVzcyBvciAweDAwMC4uIGluIGNhc2Ugb2YgZXRoIHRyYW5zZmVyCiAgICAqLwogICAgZXZlbnQgQW1vdW50V2l0aGRyYXdFdmVudCgKICAgIGFkZHJlc3MgX2Rlc3RpbmF0aW9uLCAKICAgIHVpbnQgX2Ftb3VudCwgCiAgICBhZGRyZXNzIF90b2tlbkFkZHJlc3MgCiAgICApOwoKICAgIC8qKgogICAgKiBAZGV2IGZhbGxiYWNrIGZ1bmN0aW9uIG9ubHkgdG8gZW5hYmxlIEVUSCB0cmFuc2ZlcgogICAgKi8KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewoKICAgIH0KCiAgICAvKioKICAgICogQGRldiBzZXR0ZXIgZm9yIHRoZSB3aXRoZHJhdyBjcmVhdG9yIChyZXNwb25zaWJsZSBmb3IgY2FsbGluZyB3aXRoZHJhdyBmdW5jdGlvbikKICAgICovCiAgICBmdW5jdGlvbiBzZXRXaXRoZHJhd0NyZWF0b3IoYWRkcmVzcyBfd2l0aGRyYXdDcmVhdG9yKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICB3aXRoZHJhd0NyZWF0b3IgPSBfd2l0aGRyYXdDcmVhdG9yOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHdpdGhkcmF3IGZ1bmN0aW9uIHRvIHNlbmQgdG9rZW4gYWRkcmVzc2VzIG9yIGV0aCBhbW91bnRzIHRvIGEgbGlzdCBvZiByZWNlaXZlcnMKICAgICogQHBhcmFtIF9kZXN0aW5hdGlvbnMgYmF0Y2ggbGlzdCBvZiB0b2tlbiBvciBldGggcmVjZWl2ZXJzCiAgICAqIEBwYXJhbSBfYW1vdW50cyBiYXRjaCBsaXN0IG9mIHZhbHVlcyBvZiBldGggb3IgdG9rZW5zCiAgICAqIEBwYXJhbSBfdG9rZW5BZGRyZXNzZXMgd2hhdCB0b2tlbiB0byBiZSB0cmFuc2ZlcmVkIGluIGNhc2Ugb2YgZXRoIGp1c3QgbGVhdmUgdGhlIDB4IGFkZHJlc3MKICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhdyhhZGRyZXNzW10gX2Rlc3RpbmF0aW9ucywgdWludFtdIF9hbW91bnRzLCBhZGRyZXNzW10gX3Rva2VuQWRkcmVzc2VzKSBwdWJsaWMgb25seU93bmVyT3JXaXRoZHJhd0NyZWF0b3IgewogICAgICAgIHJlcXVpcmUoX2Rlc3RpbmF0aW9ucy5sZW5ndGggPT0gX2Ftb3VudHMubGVuZ3RoICYmIF9hbW91bnRzLmxlbmd0aCA9PSBfdG9rZW5BZGRyZXNzZXMubGVuZ3RoKTsKICAgICAgICAvLyBpdHRlcmF0ZSBpbiByZWNlaXZlcnMKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfZGVzdGluYXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFkZHJlc3MgdG9rZW5BZGRyZXNzID0gX3Rva2VuQWRkcmVzc2VzW2ldOwogICAgICAgICAgICB1aW50IGFtb3VudCA9IF9hbW91bnRzW2ldOwogICAgICAgICAgICBhZGRyZXNzIGRlc3RpbmF0aW9uID0gX2Rlc3RpbmF0aW9uc1tpXTsKICAgICAgICAgICAgLy8gZXRoIHRyYW5zZmVyCiAgICAgICAgICAgIGlmICh0b2tlbkFkZHJlc3MgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA8IGFtb3VudCkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbi5jYWxsLmdhcyg3MDAwMCkudmFsdWUoYW1vdW50KSgpKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfWVsc2UgewogICAgICAgICAgICAvLyBlcmMgMjAgdHJhbnNmZXIKICAgICAgICAgICAgICAgIGlmIChFUkMyMCh0b2tlbkFkZHJlc3MpLmJhbGFuY2VPZih0aGlzKSA8IGFtb3VudCkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgRVJDMjAodG9rZW5BZGRyZXNzKS50cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBlbWl0IGV2ZW50IGluIGJvdGggY2FzZXMKICAgICAgICAgICAgZW1pdCBBbW91bnRXaXRoZHJhd0V2ZW50KGRlc3RpbmF0aW9uLCBhbW91bnQsIHRva2VuQWRkcmVzcyk7ICAgICAgICAgICAgICAgIAogICAgICAgIH0KCiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyT3JXaXRoZHJhd0NyZWF0b3IoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHdpdGhkcmF3Q3JlYXRvciB8fCBtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKfQ=='.
	

]
