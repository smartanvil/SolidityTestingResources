Class {
	#name : #SRT005aae78c0de67642c728504dc9d264ecb9bb312,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT005aae78c0de67642c728504dc9d264ecb9bb312 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCmNvbnRyYWN0IEVDIHsKCiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBneCA9IDB4NzlCRTY2N0VGOURDQkJBQzU1QTA2Mjk1Q0U4NzBCMDcwMjlCRkNEQjJEQ0UyOEQ5NTlGMjgxNUIxNkY4MTc5ODsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGd5ID0gMHg0ODNBREE3NzI2QTNDNDY1NURBNEZCRkMwRTExMDhBOEZEMTdCNDQ4QTY4NTU0MTk5QzQ3RDA4RkZCMTBENEI4OwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgbiA9IDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRjsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGEgPSAwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgYiA9IDc7CiAgICB1aW50MjU2W10gcHVibGljIGd4czsKICAgIHVpbnQyNTZbXSBwdWJsaWMgZ3lzOwogICAgdWludDI1NltdIHB1YmxpYyBnenM7CgogICAgZnVuY3Rpb24gRUMoKSBwdWJsaWMKICAgIHsKICAgICAgICBneHMucHVzaChneCk7CiAgICAgICAgZ3lzLnB1c2goZ3kpOwogICAgICAgIGd6cy5wdXNoKDEpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBwcmVwYXJlKHVpbnQgY291bnQpIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoZ3hzLmxlbmd0aCA8IDI1Nik7CiAgICAgICAgdWludDI1NiB4ID0gZ3hzW2d4cy5sZW5ndGggLSAxXTsKICAgICAgICB1aW50MjU2IHkgPSBneXNbZ3lzLmxlbmd0aCAtIDFdOwogICAgICAgIHVpbnQyNTYgeiA9IGd6c1tnenMubGVuZ3RoIC0gMV07CiAgICAgICAgZm9yICh1aW50IGogPSAwOyBqIDwgY291bnQgJiYgZ3hzLmxlbmd0aCA8IDI1NjsgaisrKSB7CiAgICAgICAgICAgICh4LHkseikgPSBfZWNEb3VibGUoeCx5LHopOwogICAgICAgICAgICBneHMucHVzaCh4KTsKICAgICAgICAgICAgZ3lzLnB1c2goeSk7CiAgICAgICAgICAgIGd6cy5wdXNoKHopOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBfakFkZCggdWludDI1NiB4MSx1aW50MjU2IHoxLAogICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgeDIsdWludDI1NiB6MikgcHVibGljIHB1cmUKICAgICAgICByZXR1cm5zKHVpbnQyNTYgeDMsdWludDI1NiB6MykKICAgIHsKICAgICAgICAoeDMsIHozKSA9ICggIGFkZG1vZCggbXVsbW9kKHoyLCB4MSAsIG4pICwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsbW9kKHgyLCB6MSAsIG4pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuKSwKICAgICAgICAgICAgICAgICAgICAgIG11bG1vZCh6MSwgejIgLCBuKQogICAgICAgICAgICAgICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gX2pTdWIoIHVpbnQyNTYgeDEsdWludDI1NiB6MSwKICAgICAgICAgICAgICAgICAgICB1aW50MjU2IHgyLHVpbnQyNTYgejIpIHB1YmxpYyBwdXJlCiAgICAgICAgcmV0dXJucyh1aW50MjU2IHgzLHVpbnQyNTYgejMpCiAgICB7CiAgICAgICAgKHgzLCB6MykgPSAoICBhZGRtb2QoIG11bG1vZCh6MiwgeDEsIG4pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWxtb2QobiAtIHgyLCB6MSwgbiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4pLAogICAgICAgICAgICAgICAgICAgICAgbXVsbW9kKHoxLCB6MiAsIG4pCiAgICAgICAgICAgICAgICAgICAgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfak11bCggdWludDI1NiB4MSx1aW50MjU2IHoxLAogICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgeDIsdWludDI1NiB6MikgcHVibGljIHB1cmUKICAgICAgICByZXR1cm5zKHVpbnQyNTYgeDMsdWludDI1NiB6MykKICAgIHsKICAgICAgICAoeDMsIHozKSA9ICggIG11bG1vZCh4MSwgeDIgLCBuKSwgbXVsbW9kKHoxLCB6MiAsIG4pKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfakRpdiggdWludDI1NiB4MSx1aW50MjU2IHoxLAogICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgeDIsdWludDI1NiB6MikgcHVibGljIHB1cmUKICAgICAgICByZXR1cm5zKHVpbnQyNTYgeDMsdWludDI1NiB6MykKICAgIHsKICAgICAgICAoeDMsIHozKSA9ICggIG11bG1vZCh4MSwgejIgLCBuKSwgbXVsbW9kKHoxICwgeDIgLCBuKSk7CiAgICB9CgogICAgZnVuY3Rpb24gX2ludmVyc2UoIHVpbnQyNTYgdmFsKSBwdWJsaWMgcHVyZQogICAgICAgIHJldHVybnModWludDI1NiBpbnZWYWwpCiAgICB7CiAgICAgICAgdWludDI1NiB0PTA7CiAgICAgICAgdWludDI1NiBuZXdUPTE7CiAgICAgICAgdWludDI1NiByPW47CiAgICAgICAgdWludDI1NiBuZXdSPXZhbDsKICAgICAgICB1aW50MjU2IHE7CiAgICAgICAgd2hpbGUgKG5ld1IgIT0gMCkgewogICAgICAgICAgICBxID0gciAvIG5ld1I7CgogICAgICAgICAgICAodCwgbmV3VCkgPSAobmV3VCwgYWRkbW9kKHQgLCAobiAtIG11bG1vZChxLCBuZXdULG4pKSAsIG4pKTsKICAgICAgICAgICAgKHIsIG5ld1IpID0gKG5ld1IsIHIgLSBxICogbmV3UiApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHQ7CiAgICB9CgoKICAgIGZ1bmN0aW9uIF9lY0FkZCggdWludDI1NiB4MSx1aW50MjU2IHkxLHVpbnQyNTYgejEsCiAgICAgICAgICAgICAgICAgICAgdWludDI1NiB4Mix1aW50MjU2IHkyLHVpbnQyNTYgejIpIHB1YmxpYyBwdXJlCiAgICAgICAgcmV0dXJucyh1aW50MjU2IHgzLHVpbnQyNTYgeTMsdWludDI1NiB6MykKICAgIHsKICAgICAgICB1aW50MjU2IGw7CiAgICAgICAgdWludDI1NiBsejsKICAgICAgICB1aW50MjU2IGRhOwogICAgICAgIHVpbnQyNTYgZGI7CgogICAgICAgIGlmICgoeDE9PTApJiYoeTE9PTApKSB7CiAgICAgICAgICAgIHJldHVybiAoeDIseTIsejIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCh4Mj09MCkmJih5Mj09MCkpIHsKICAgICAgICAgICAgcmV0dXJuICh4MSx5MSx6MSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoKHgxPT14MikmJih5MT09eTIpKSB7CiAgICAgICAgICAgIChsLGx6KSA9IF9qTXVsKHgxLCB6MSwgeDEsIHoxKTsKICAgICAgICAgICAgKGwsbHopID0gX2pNdWwobCwgbHosIDMsIDEpOwogICAgICAgICAgICAobCxseikgPSBfakFkZChsLCBseiwgYSwgMSk7CgogICAgICAgICAgICAoZGEsZGIpID0gX2pNdWwoeTEsIHoxLCAyLCAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAobCxseikgPSBfalN1Yih5MiwgejIsIHkxLCB6MSk7CiAgICAgICAgICAgIChkYSxkYikgID0gX2pTdWIoeDIsIHoyLCB4MSwgejEpOwogICAgICAgIH0KCiAgICAgICAgKGwsIGx6KSA9IF9qRGl2KGwsIGx6LCBkYSwgZGIpOwoKCiAgICAgICAgKHgzLCBkYSkgPSBfak11bChsLCBseiwgbCwgbHopOwogICAgICAgICh4MywgZGEpID0gX2pTdWIoeDMsIGRhLCB4MSwgejEpOwogICAgICAgICh4MywgZGEpID0gX2pTdWIoeDMsIGRhLCB4MiwgejIpOwoKICAgICAgICAoeTMsIGRiKSA9IF9qU3ViKHgxLCB6MSwgeDMsIGRhKTsKICAgICAgICAoeTMsIGRiKSA9IF9qTXVsKHkzLCBkYiwgbCwgbHogKTsKICAgICAgICAoeTMsIGRiKSA9IF9qU3ViKHkzLCBkYiwgeTEsIHoxICk7CgoKICAgICAgICBpZiAoZGEgIT0gZGIpIHsKICAgICAgICAgICAgeDMgPSBtdWxtb2QoeDMsIGRiLCBuKTsKICAgICAgICAgICAgeTMgPSBtdWxtb2QoeTMsIGRhLCBuKTsKICAgICAgICAgICAgejMgPSBtdWxtb2QoZGEsIGRiLCBuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB6MyA9IGRhOwogICAgICAgIH0KCiAgICB9CgogICAgZnVuY3Rpb24gX2VjRG91YmxlKHVpbnQyNTYgeDEsdWludDI1NiB5MSx1aW50MjU2IHoxKSBwdWJsaWMgcHVyZQogICAgICAgIHJldHVybnModWludDI1NiB4Myx1aW50MjU2IHkzLHVpbnQyNTYgejMpCiAgICB7CiAgICAgICAgKHgzLHkzLHozKSA9IF9lY0FkZCh4MSx5MSx6MSx4MSx5MSx6MSk7CiAgICB9CgoKCiAgICBmdW5jdGlvbiBfZWNNdWwodWludDI1NiBkLCB1aW50MjU2IHgxLHVpbnQyNTYgeTEsdWludDI1NiB6MSkgcHVibGljIHB1cmUKICAgICAgICByZXR1cm5zKHVpbnQyNTYgeDMsdWludDI1NiB5Myx1aW50MjU2IHozKQogICAgewogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nID0gZDsKICAgICAgICB1aW50MjU2IHB4ID0geDE7CiAgICAgICAgdWludDI1NiBweSA9IHkxOwogICAgICAgIHVpbnQyNTYgcHogPSB6MTsKICAgICAgICB1aW50MjU2IGFjeCA9IDA7CiAgICAgICAgdWludDI1NiBhY3kgPSAwOwogICAgICAgIHVpbnQyNTYgYWN6ID0gMTsKCiAgICAgICAgaWYgKGQ9PTApIHsKICAgICAgICAgICAgcmV0dXJuICgwLDAsMSk7CiAgICAgICAgfQoKICAgICAgICB3aGlsZSAocmVtYWluaW5nICE9IDApIHsKICAgICAgICAgICAgaWYgKChyZW1haW5pbmcgJiAxKSAhPSAwKSB7CiAgICAgICAgICAgICAgICAoYWN4LGFjeSxhY3opID0gX2VjQWRkKGFjeCxhY3ksYWN6LCBweCxweSxweik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVtYWluaW5nID0gcmVtYWluaW5nIC8gMjsKICAgICAgICAgICAgKHB4LHB5LHB6KSA9IF9lY0RvdWJsZShweCxweSxweik7CiAgICAgICAgfQoKICAgICAgICAoeDMseTMsejMpID0gKGFjeCxhY3ksYWN6KTsKICAgIH0KCiAgICBmdW5jdGlvbiBwdWJsaWNLZXkodWludDI1NiBwcml2S2V5KSBwdWJsaWMgY29uc3RhbnQKICAgICAgICByZXR1cm5zKHVpbnQyNTYgcXgsIHVpbnQyNTYgcXkpCiAgICB7CiAgICAgICAgdWludDI1NiBhY3ggPSAwOwogICAgICAgIHVpbnQyNTYgYWN5ID0gMDsKICAgICAgICB1aW50MjU2IGFjeiA9IDE7CgogICAgICAgIGlmIChwcml2S2V5ID09IDApIHsKICAgICAgICAgICAgcmV0dXJuICgwLDApOwogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICAgICAgICAgICAgaWYgKCgocHJpdktleSA+PiBpKSAmIDEpICE9IDApIHsKICAgICAgICAgICAgICAgIChhY3gsYWN5LGFjeikgPSBfZWNBZGQoYWN4LGFjeSxhY3osIGd4c1tpXSxneXNbaV0sZ3pzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBhY3ogPSBfaW52ZXJzZShhY3opOwogICAgICAgIChxeCxxeSkgPSAobXVsbW9kKGFjeCxhY3osbiksbXVsbW9kKGFjeSxhY3osbikpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlcml2ZUtleSh1aW50MjU2IHByaXZLZXksIHVpbnQyNTYgcHViWCwgdWludDI1NiBwdWJZKSBwdWJsaWMgcHVyZQogICAgICAgIHJldHVybnModWludDI1NiBxeCwgdWludDI1NiBxeSkKICAgIHsKICAgICAgICB1aW50MjU2IHg7CiAgICAgICAgdWludDI1NiB5OwogICAgICAgIHVpbnQyNTYgejsKICAgICAgICAoeCx5LHopID0gX2VjTXVsKHByaXZLZXksIHB1YlgsIHB1YlksIDEpOwogICAgICAgIHogPSBfaW52ZXJzZSh6KTsKICAgICAgICBxeCA9IG11bG1vZCh4ICwgeiAsbik7CiAgICAgICAgcXkgPSBtdWxtb2QoeSAsIHogLG4pOwogICAgfQoKfQ=='.
	

]
