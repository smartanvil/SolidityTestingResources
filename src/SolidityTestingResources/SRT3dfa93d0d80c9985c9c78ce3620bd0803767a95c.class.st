Class {
	#name : #SRT3dfa93d0d80c9985c9c78ce3620bd0803767a95c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3dfa93d0d80c9985c9c78ce3620bd0803767a95c >> base64 [
	^ ''.
	

]
