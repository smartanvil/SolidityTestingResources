Class {
	#name : #SRT1014613e2b3cbc4d575054d4982e580d9b99d7b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1014613e2b3cbc4d575054d4982e580d9b99d7b1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vQml0IENhcGl0YWwgVmVuZG9yIGJ5IEJpdENWIEZvdW5kYXRpb24uCi8vIEFuIEVSQzIwIHN0YW5kYXJkCi8vCi8vIGF1dGhvcjogQml0Q1YgRm91bmRhdGlvbiBUZWFtCgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF90b3RhbFN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBCQ1YgaXMgRVJDMjBJbnRlcmZhY2UgewogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkJDViI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQml0Q2FwaXRhbFZlbmRvclRva2VuIjsKCiAgICB1aW50MjU2IHB1YmxpYyBfdG90YWxTdXBwbHkgPSAxMjAwMDAwMDAwMDAwMDAwMDA7IC8vIHRvdGFsIHN1cHBseSBpcyAxLjIgYmlsbGlvbgoKICAgIC8vIE93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIEJhbGFuY2VzIEFBQyBmb3IgZWFjaCBhY2NvdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlczsKCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHJpdmF0ZSBhbGxvd2VkOwoKICAgIC8vIExpc3Qgb2YgYXBwcm92ZWQgaW52ZXN0b3JzCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHJpdmF0ZSBhcHByb3ZlZEludmVzdG9yTGlzdDsKCiAgICAvLyBkZXBvc2l0CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBkZXBvc2l0OwoKCiAgICAvLyB0b3RhbFRva2VuU29sZAogICAgdWludDI1NiBwdWJsaWMgdG90YWxUb2tlblNvbGQgPSAwOwoKCiAgICAvKioKICAgICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpIHsKICAgICAgICByZXZlcnQoKTsKICAgICAgfQogICAgICBfOwogICAgfQoKCgogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEJDVigpCiAgICAgICAgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gX3RvdGFsU3VwcGx5OwogICAgfQoKICAgIC8vLyBAZGV2IEdldHMgdG90YWxTdXBwbHkKICAgIC8vLyBAcmV0dXJuIFRvdGFsIHN1cHBseQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICB9CgoKCgoKICAgIC8vLyBAZGV2IEdldHMgYWNjb3VudCdzIGJhbGFuY2UKICAgIC8vLyBAcGFyYW0gX2FkZHIgQWRkcmVzcyBvZiB0aGUgYWNjb3VudAogICAgLy8vIEByZXR1cm4gQWNjb3VudCBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfYWRkcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX2FkZHJdOwogICAgfQoKICAgIC8vLyBAZGV2IGNoZWNrIGFkZHJlc3MgaXMgYXBwcm92ZWQgaW52ZXN0b3IKICAgIC8vLyBAcGFyYW0gX2FkZHIgYWRkcmVzcwogICAgZnVuY3Rpb24gaXNBcHByb3ZlZEludmVzdG9yKGFkZHJlc3MgX2FkZHIpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFwcHJvdmVkSW52ZXN0b3JMaXN0W19hZGRyXTsKICAgIH0KCiAgICAvLy8gQGRldiBnZXQgRVRIIGRlcG9zaXQKICAgIC8vLyBAcGFyYW0gX2FkZHIgYWRkcmVzcyBnZXQgZGVwb3NpdAogICAgLy8vIEByZXR1cm4gYW1vdW50IGRlcG9zaXQgb2YgYW4gYnV5ZXIKICAgIGZ1bmN0aW9uIGdldERlcG9zaXQoYWRkcmVzcyBfYWRkcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1Nil7CiAgICAgICAgcmV0dXJuIGRlcG9zaXRbX2FkZHJdOwp9CgoKICAgIC8vLyBAZGV2IFRyYW5zZmVycyB0aGUgYmFsYW5jZSBmcm9tIG1zZy5zZW5kZXIgdG8gYW4gYWNjb3VudAogICAgLy8vIEBwYXJhbSBfdG8gUmVjaXBpZW50IGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUcmFuc2ZlcmVkIGFtb3VudCBpbiB1bml0CiAgICAvLy8gQHJldHVybiBUcmFuc2ZlciBzdGF0dXMKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCgogICAgICAgIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBpZiBzZW5kZXIncyBiYWxhbmNlIGhhcyBlbm91Z2ggdW5pdCBhbmQgYW1vdW50ID49IDAsCiAgICAgICAgLy8gICAgICBhbmQgdGhlIHN1bSBpcyBub3Qgb3ZlcmZsb3csCiAgICAgICAgLy8gdGhlbiBkbyB0cmFuc2ZlcgogICAgICAgIGlmICggKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF9hbW91bnQpICYmCiAgICAgICAgICAgICAoX2Ftb3VudCA+PSAwKSAmJgogICAgICAgICAgICAgKGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgKSB7CgogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kCiAgICAvLyB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQogICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UKICAgIC8vIHRoZXNlIHN0YW5kYXJkaXplZCBBUElzIGZvciBhcHByb3ZhbDoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgKQogICAgcHVibGljCgogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQpIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCgogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIGdldCBhbGxvd2FuY2UKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGV7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cgp9'.
	

]
