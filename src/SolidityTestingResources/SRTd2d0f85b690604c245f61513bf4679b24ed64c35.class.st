Class {
	#name : #SRTd2d0f85b690604c245f61513bf4679b24ed64c35,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd2d0f85b690604c245f61513bf4679b24ed64c35 >> base64 [
	^ ''.
	

]
