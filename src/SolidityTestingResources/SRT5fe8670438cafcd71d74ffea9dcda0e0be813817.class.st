Class {
	#name : #SRT5fe8670438cafcd71d74ffea9dcda0e0be813817,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5fe8670438cafcd71d74ffea9dcda0e0be813817 >> base64 [
	^ ''.
	

]
