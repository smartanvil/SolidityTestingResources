Class {
	#name : #SRTbd3696b01a487b012ba99628b06a1a7859f5ca23,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd3696b01a487b012ba99628b06a1a7859f5ca23 >> base64 [
	^ ''.
	

]
