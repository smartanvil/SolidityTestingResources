Class {
	#name : #SRTdf6ef343350780bf8c3410bf062e0c015b1dd671,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdf6ef343350780bf8c3410bf062e0c015b1dd671 >> base64 [
	^ ''.
	

]
