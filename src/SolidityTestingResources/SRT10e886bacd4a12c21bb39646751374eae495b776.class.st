Class {
	#name : #SRT10e886bacd4a12c21bb39646751374eae495b776,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT10e886bacd4a12c21bb39646751374eae495b776 >> base64 [
	^ ''.
	

]
