Class {
	#name : #SRTa1a9733966c709172f7b13a644e69005f9466409,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1a9733966c709172f7b13a644e69005f9466409 >> base64 [
	^ ''.
	

]
