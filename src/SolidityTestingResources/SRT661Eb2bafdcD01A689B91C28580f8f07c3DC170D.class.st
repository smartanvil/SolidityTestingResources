Class {
	#name : #SRT661Eb2bafdcD01A689B91C28580f8f07c3DC170D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT661Eb2bafdcD01A689B91C28580f8f07c3DC170D >> base64 [
	^ ''.
	

]
