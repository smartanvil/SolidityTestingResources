Class {
	#name : #SRTA674f3cF4b74DD13536c3a75cc2CB6Ec64Adf56a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA674f3cF4b74DD13536c3a75cc2CB6Ec64Adf56a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9SZXN0cmljdGVkLnNvbAoKLyoqIEB0aXRsZSBSZXN0cmljdGVkCiAqICBFeHBvc2VzIG9ubHlNb25ldGhhIG1vZGlmaWVyCiAqLwpjb250cmFjdCBSZXN0cmljdGVkIGlzIE93bmFibGUgewoKICAgIC8vTW9uZXRoYUFkZHJlc3Mgc2V0IGV2ZW50CiAgICBldmVudCBNb25ldGhhQWRkcmVzc1NldCgKICAgICAgICBhZGRyZXNzIF9hZGRyZXNzLAogICAgICAgIGJvb2wgX2lzTW9uZXRoYUFkZHJlc3MKICAgICk7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNNb25ldGhhQWRkcmVzczsKCiAgICAvKioKICAgICAqICBSZXN0cmljdCBtZXRob2RzIGluIHN1Y2ggd2F5LCB0aGF0IHRoZXkgY2FuIGJlIGludm9rZWQgb25seSBieSBtb25ldGhhQWRkcmVzcyBhY2NvdW50LgogICAgICovCiAgICBtb2RpZmllciBvbmx5TW9uZXRoYSgpIHsKICAgICAgICByZXF1aXJlKGlzTW9uZXRoYUFkZHJlc3NbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiAgQWxsb3dzIG93bmVyIHRvIHNldCBuZXcgbW9uZXRoYSBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE1vbmV0aGFBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MsIGJvb2wgX2lzTW9uZXRoYUFkZHJlc3MpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlzTW9uZXRoYUFkZHJlc3NbX2FkZHJlc3NdID0gX2lzTW9uZXRoYUFkZHJlc3M7CgogICAgICAgIE1vbmV0aGFBZGRyZXNzU2V0KF9hZGRyZXNzLCBfaXNNb25ldGhhQWRkcmVzcyk7CiAgICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9vd25lcnNoaXAvQ29udGFjdGFibGUuc29sCgovKioKICogQHRpdGxlIENvbnRhY3RhYmxlIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBhIGNvbnRhY3RhYmxlIGNvbnRyYWN0LCBhbGxvd2luZyB0aGUgb3duZXIgdG8gcHJvdmlkZSBhIHN0cmluZyB3aXRoIHRoZWlyCiAqIGNvbnRhY3QgaW5mb3JtYXRpb24uCiAqLwpjb250cmFjdCBDb250YWN0YWJsZSBpcyBPd25hYmxlewoKICAgIHN0cmluZyBwdWJsaWMgY29udGFjdEluZm9ybWF0aW9uOwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIG93bmVyIHRvIHNldCBhIHN0cmluZyB3aXRoIHRoZWlyIGNvbnRhY3QgaW5mb3JtYXRpb24uCiAgICAgKiBAcGFyYW0gaW5mbyBUaGUgY29udGFjdCBpbmZvcm1hdGlvbiB0byBhdHRhY2ggdG8gdGhlIGNvbnRyYWN0LgogICAgICovCiAgICBmdW5jdGlvbiBzZXRDb250YWN0SW5mb3JtYXRpb24oc3RyaW5nIGluZm8pIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgICBjb250YWN0SW5mb3JtYXRpb24gPSBpbmZvOwogICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL01lcmNoYW50RGVhbHNIaXN0b3J5LnNvbAoKLyoqCiAqICBAdGl0bGUgTWVyY2hhbnREZWFsc0hpc3RvcnkKICogIENvbnRyYWN0IHN0b3JlcyBoYXNoIG9mIERlYWxzIGNvbmRpdGlvbnMgdG9nZXRoZXIgd2l0aCBwYXJ0aWVzIHJlcHV0YXRpb24gZm9yIGVhY2ggZGVhbAogKiAgVGhpcyBoaXN0b3J5IGVuYWJsZXMgdG8gc2VlIGV2b2x1dGlvbiBvZiB0cnVzdCByYXRpbmcgZm9yIGJvdGggcGFydGllcwogKi8KY29udHJhY3QgTWVyY2hhbnREZWFsc0hpc3RvcnkgaXMgQ29udGFjdGFibGUsIFJlc3RyaWN0ZWQgewoKICAgIHN0cmluZyBjb25zdGFudCBWRVJTSU9OID0gIjAuMyI7CgogICAgLy8vICBNZXJjaGFudCBpZGVudGlmaWVyIGhhc2gKICAgIGJ5dGVzMzIgcHVibGljIG1lcmNoYW50SWRIYXNoOwogICAgCiAgICAvL0RlYWwgZXZlbnQKICAgIGV2ZW50IERlYWxDb21wbGV0ZWQoCiAgICAgICAgdWludCBvcmRlcklkLAogICAgICAgIGFkZHJlc3MgY2xpZW50QWRkcmVzcywKICAgICAgICB1aW50MzIgY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50MzIgbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIGJvb2wgc3VjY2Vzc2Z1bCwKICAgICAgICB1aW50IGRlYWxIYXNoCiAgICApOwoKICAgIC8vRGVhbCBjYW5jZWxsYXRpb24gZXZlbnQKICAgIGV2ZW50IERlYWxDYW5jZWxhdGlvblJlYXNvbigKICAgICAgICB1aW50IG9yZGVySWQsCiAgICAgICAgYWRkcmVzcyBjbGllbnRBZGRyZXNzLAogICAgICAgIHVpbnQzMiBjbGllbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQzMiBtZXJjaGFudFJlcHV0YXRpb24sCiAgICAgICAgdWludCBkZWFsSGFzaCwKICAgICAgICBzdHJpbmcgY2FuY2VsUmVhc29uCiAgICApOwoKICAgIC8vRGVhbCByZWZ1bmQgZXZlbnQKICAgIGV2ZW50IERlYWxSZWZ1bmRSZWFzb24oCiAgICAgICAgdWludCBvcmRlcklkLAogICAgICAgIGFkZHJlc3MgY2xpZW50QWRkcmVzcywKICAgICAgICB1aW50MzIgY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50MzIgbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQgZGVhbEhhc2gsCiAgICAgICAgc3RyaW5nIHJlZnVuZFJlYXNvbgogICAgKTsKCiAgICAvKioKICAgICAqICBAcGFyYW0gX21lcmNoYW50SWQgTWVyY2hhbnQgb2YgdGhlIGFjY2VwdG9yCiAgICAgKi8KICAgIGZ1bmN0aW9uIE1lcmNoYW50RGVhbHNIaXN0b3J5KHN0cmluZyBfbWVyY2hhbnRJZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKGJ5dGVzKF9tZXJjaGFudElkKS5sZW5ndGggPiAwKTsKICAgICAgICBtZXJjaGFudElkSGFzaCA9IGtlY2NhazI1NihfbWVyY2hhbnRJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgcmVjb3JkRGVhbCBjcmVhdGVzIGFuIGV2ZW50IG9mIGNvbXBsZXRlZCBkZWFsCiAgICAgKiAgQHBhcmFtIF9vcmRlcklkIElkZW50aWZpZXIgb2YgZGVhbCdzIG9yZGVyCiAgICAgKiAgQHBhcmFtIF9jbGllbnRBZGRyZXNzIEFkZHJlc3Mgb2YgY2xpZW50J3MgYWNjb3VudAogICAgICogIEBwYXJhbSBfY2xpZW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIGNsaWVudAogICAgICogIEBwYXJhbSBfbWVyY2hhbnRSZXB1dGF0aW9uIFVwZGF0ZWQgcmVwdXRhdGlvbiBvZiB0aGUgbWVyY2hhbnQKICAgICAqICBAcGFyYW0gX2lzU3VjY2VzcyBJZGVudGlmaWVzIHdoZXRoZXIgZGVhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgICAqICBAcGFyYW0gX2RlYWxIYXNoIEhhc2hjb2RlIG9mIHRoZSBkZWFsLCBkZXNjcmliaW5nIHRoZSBvcmRlciAodXNlZCBmb3IgZGVhbCB2ZXJpZmljYXRpb24pCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlY29yZERlYWwoCiAgICAgICAgdWludCBfb3JkZXJJZCwKICAgICAgICBhZGRyZXNzIF9jbGllbnRBZGRyZXNzLAogICAgICAgIHVpbnQzMiBfY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50MzIgX21lcmNoYW50UmVwdXRhdGlvbiwKICAgICAgICBib29sIF9pc1N1Y2Nlc3MsCiAgICAgICAgdWludCBfZGVhbEhhc2gpCiAgICAgICAgZXh0ZXJuYWwgb25seU1vbmV0aGEKICAgIHsKICAgICAgICBEZWFsQ29tcGxldGVkKAogICAgICAgICAgICBfb3JkZXJJZCwKICAgICAgICAgICAgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgICAgIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfaXNTdWNjZXNzLAogICAgICAgICAgICBfZGVhbEhhc2gKICAgICAgICApOwogICAgfQoKICAgIC8qKgogICAgICogIHJlY29yZERlYWxDYW5jZWxSZWFzb24gY3JlYXRlcyBhbiBldmVudCBvZiBub3QgcGFpZCBkZWFsIHRoYXQgd2FzIGNhbmNlbGxlZCAKICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiBkZWFsJ3Mgb3JkZXIKICAgICAqICBAcGFyYW0gX2NsaWVudEFkZHJlc3MgQWRkcmVzcyBvZiBjbGllbnQncyBhY2NvdW50CiAgICAgKiAgQHBhcmFtIF9jbGllbnRSZXB1dGF0aW9uIFVwZGF0ZWQgcmVwdXRhdGlvbiBvZiB0aGUgY2xpZW50CiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudFJlcHV0YXRpb24gVXBkYXRlZCByZXB1dGF0aW9uIG9mIHRoZSBtZXJjaGFudAogICAgICogIEBwYXJhbSBfZGVhbEhhc2ggSGFzaGNvZGUgb2YgdGhlIGRlYWwsIGRlc2NyaWJpbmcgdGhlIG9yZGVyICh1c2VkIGZvciBkZWFsIHZlcmlmaWNhdGlvbikKICAgICAqICBAcGFyYW0gX2NhbmNlbFJlYXNvbiBkZWFsIGNhbmNlbGF0aW9uIHJlYXNvbiAodGV4dCkKICAgICAqLwogICAgZnVuY3Rpb24gcmVjb3JkRGVhbENhbmNlbFJlYXNvbigKICAgICAgICB1aW50IF9vcmRlcklkLAogICAgICAgIGFkZHJlc3MgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgdWludDMyIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQzMiBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQgX2RlYWxIYXNoLAogICAgICAgIHN0cmluZyBfY2FuY2VsUmVhc29uKQogICAgICAgIGV4dGVybmFsIG9ubHlNb25ldGhhCiAgICB7CiAgICAgICAgRGVhbENhbmNlbGF0aW9uUmVhc29uKAogICAgICAgICAgICBfb3JkZXJJZCwKICAgICAgICAgICAgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgICAgIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfZGVhbEhhc2gsCiAgICAgICAgICAgIF9jYW5jZWxSZWFzb24KICAgICAgICApOwogICAgfQoKLyoqCiAgICAgKiAgcmVjb3JkRGVhbFJlZnVuZFJlYXNvbiBjcmVhdGVzIGFuIGV2ZW50IG9mIG5vdCBwYWlkIGRlYWwgdGhhdCB3YXMgY2FuY2VsbGVkIAogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIGRlYWwncyBvcmRlcgogICAgICogIEBwYXJhbSBfY2xpZW50QWRkcmVzcyBBZGRyZXNzIG9mIGNsaWVudCdzIGFjY291bnQKICAgICAqICBAcGFyYW0gX2NsaWVudFJlcHV0YXRpb24gVXBkYXRlZCByZXB1dGF0aW9uIG9mIHRoZSBjbGllbnQKICAgICAqICBAcGFyYW0gX21lcmNoYW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIG1lcmNoYW50CiAgICAgKiAgQHBhcmFtIF9kZWFsSGFzaCBIYXNoY29kZSBvZiB0aGUgZGVhbCwgZGVzY3JpYmluZyB0aGUgb3JkZXIgKHVzZWQgZm9yIGRlYWwgdmVyaWZpY2F0aW9uKQogICAgICogIEBwYXJhbSBfcmVmdW5kUmVhc29uIGRlYWwgcmVmdW5kIHJlYXNvbiAodGV4dCkKICAgICAqLwogICAgZnVuY3Rpb24gcmVjb3JkRGVhbFJlZnVuZFJlYXNvbigKICAgICAgICB1aW50IF9vcmRlcklkLAogICAgICAgIGFkZHJlc3MgX2NsaWVudEFkZHJlc3MsCiAgICAgICAgdWludDMyIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQzMiBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQgX2RlYWxIYXNoLAogICAgICAgIHN0cmluZyBfcmVmdW5kUmVhc29uKQogICAgICAgIGV4dGVybmFsIG9ubHlNb25ldGhhCiAgICB7CiAgICAgICAgRGVhbFJlZnVuZFJlYXNvbigKICAgICAgICAgICAgX29yZGVySWQsCiAgICAgICAgICAgIF9jbGllbnRBZGRyZXNzLAogICAgICAgICAgICBfY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICAgICAgX21lcmNoYW50UmVwdXRhdGlvbiwKICAgICAgICAgICAgX2RlYWxIYXNoLAogICAgICAgICAgICBfcmVmdW5kUmVhc29uCiAgICAgICAgKTsKICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL1NhZmVEZXN0cnVjdGlibGUuc29sCgovKioKICogQHRpdGxlIFNhZmVEZXN0cnVjdGlibGUKICogQmFzZSBjb250cmFjdCB0aGF0IGNhbiBiZSBkZXN0cm95ZWQgYnkgb3duZXIuCiAqIENhbiBiZSBkZXN0cnVjdGVkIGlmIHRoZXJlIGFyZSBubyBmdW5kcyBvbiBjb250cmFjdCBiYWxhbmNlLgogKi8KY29udHJhY3QgU2FmZURlc3RydWN0aWJsZSBpcyBPd25hYmxlIHsKICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA9PSAwKTsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbGlmZWN5Y2xlL1BhdXNhYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvTWVyY2hhbnRXYWxsZXQuc29sCgovKioKICogIEB0aXRsZSBNZXJjaGFudFdhbGxldAogKiAgU2VydmVzIGFzIGEgcHVibGljIE1lcmNoYW50IHByb2ZpbGUgd2l0aCBtZXJjaGFudCBwcm9maWxlIGluZm8sIAogKiAgICAgIHBheW1lbnQgc2V0dGluZ3MgYW5kIGxhdGVzdCByZXB1dGF0aW9uIHZhbHVlLgogKiAgQWxzbyBNZXJjaGFudFdhbGxldCBhY2NlcHRzIHBheW1lbnRzIGZvciBvcmRlcnMuCiAqLwoKY29udHJhY3QgTWVyY2hhbnRXYWxsZXQgaXMgUGF1c2FibGUsIFNhZmVEZXN0cnVjdGlibGUsIENvbnRhY3RhYmxlLCBSZXN0cmljdGVkIHsKICAgIAogICAgc3RyaW5nIGNvbnN0YW50IFZFUlNJT04gPSAiMC4zIjsKCiAgICAvLy8gQWRkcmVzcyBvZiBtZXJjaGFudCdzIGFjY291bnQsIHRoYXQgY2FuIHdpdGhkcmF3IGZyb20gd2FsbGV0CiAgICBhZGRyZXNzIHB1YmxpYyBtZXJjaGFudEFjY291bnQ7CiAgICAKICAgIC8vLyBVbmlxdWUgTWVyY2hhbnQgaWRlbnRpZmllciBoYXNoCiAgICBieXRlczMyIHB1YmxpYyBtZXJjaGFudElkSGFzaDsKCiAgICAvLy8gcHJvZmlsZU1hcCBzdG9yZXMgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWVyY2hhbnQKICAgIG1hcHBpbmcgKHN0cmluZz0+c3RyaW5nKSBwcm9maWxlTWFwOwoKICAgIC8vLyBwYXltZW50U2V0dGluZ3NNYXAgc3RvcmVzIHBheW1lbnQgYW5kIG9yZGVyIHNldHRpbmdzIGZvciB0aGUgbWVyY2hhbnQKICAgIG1hcHBpbmcgKHN0cmluZz0+c3RyaW5nKSBwYXltZW50U2V0dGluZ3NNYXA7CgogICAgLy8vIGNvbXBvc2l0ZVJlcHV0YXRpb25NYXAgc3RvcmVzIGNvbXBvc2l0ZSByZXB1dGF0aW9uLCB0aGF0IGNvbXByYWlzZXMgZnJvbSBzZXZlcmFsIG1ldHJpY3MKICAgIG1hcHBpbmcgKHN0cmluZz0+dWludDMyKSBjb21wb3NpdGVSZXB1dGF0aW9uTWFwOwoKICAgIC8vLyBudW1iZXIgb2YgbGFzdCBkaWdpdHMgaW4gY29tcG9zaXRlUmVwdXRhdGlvbiBmb3IgZnJhY3Rpb25hbCBwYXJ0CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgUkVQVVRBVElPTl9ERUNJTUFMUyA9IDQ7CgogICAgbW9kaWZpZXIgb25seU1lcmNoYW50KCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtZXJjaGFudEFjY291bnQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudEFjY291bnQgQWRkcmVzcyBvZiBtZXJjaGFudCdzIGFjY291bnQsIHRoYXQgY2FuIHdpdGhkcmF3IGZyb20gd2FsbGV0CiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudElkIE1lcmNoYW50IGlkZW50aWZpZXIKICAgICAqLwogICAgZnVuY3Rpb24gTWVyY2hhbnRXYWxsZXQoYWRkcmVzcyBfbWVyY2hhbnRBY2NvdW50LCBzdHJpbmcgX21lcmNoYW50SWQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfbWVyY2hhbnRBY2NvdW50ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShieXRlcyhfbWVyY2hhbnRJZCkubGVuZ3RoID4gMCk7CiAgICAgICAgCiAgICAgICAgbWVyY2hhbnRBY2NvdW50ID0gX21lcmNoYW50QWNjb3VudDsKICAgICAgICBtZXJjaGFudElkSGFzaCA9IGtlY2NhazI1NihfbWVyY2hhbnRJZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgQWNjZXB0IHBheW1lbnQgZnJvbSBNb25ldGhhR2F0ZXdheQogICAgICovCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgIH0KCiAgICAvKioKICAgICAqICBAcmV0dXJuIHByb2ZpbGUgaW5mbyBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIHByb2ZpbGUoc3RyaW5nIGtleSkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHByb2ZpbGVNYXBba2V5XTsKICAgIH0KCiAgICAvKioKICAgICAqICBAcmV0dXJuIHBheW1lbnQgc2V0dGluZyBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBheW1lbnRTZXR0aW5ncyhzdHJpbmcga2V5KSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gcGF5bWVudFNldHRpbmdzTWFwW2tleV07CiAgICB9CgogICAgLyoqCiAgICAgKiAgQHJldHVybiBjb21wb3NpdGUgcmVwdXRhdGlvbiB2YWx1ZSBieSBzdHJpbmcga2V5CiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZVJlcHV0YXRpb24oc3RyaW5nIGtleSkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDMyKSB7CiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVJlcHV0YXRpb25NYXBba2V5XTsKICAgIH0KCiAgICAvKioKICAgICAqICBTZXQgcHJvZmlsZSBpbmZvIGJ5IHN0cmluZyBrZXkKICAgICAqLwogICAgZnVuY3Rpb24gc2V0UHJvZmlsZSgKICAgICAgICBzdHJpbmcgcHJvZmlsZUtleSwKICAgICAgICBzdHJpbmcgcHJvZmlsZVZhbHVlLAogICAgICAgIHN0cmluZyByZXBLZXksCiAgICAgICAgdWludDMyIHJlcFZhbHVlCiAgICApIGV4dGVybmFsIG9ubHlPd25lcgogICAgewogICAgICAgIHByb2ZpbGVNYXBbcHJvZmlsZUtleV0gPSBwcm9maWxlVmFsdWU7CiAgICAgICAgCiAgICAgICAgaWYgKGJ5dGVzKHJlcEtleSkubGVuZ3RoICE9IDApIHsKICAgICAgICAgICAgY29tcG9zaXRlUmVwdXRhdGlvbk1hcFtyZXBLZXldID0gcmVwVmFsdWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogIFNldCBwYXltZW50IHNldHRpbmcgYnkgc3RyaW5nIGtleQogICAgICovCiAgICBmdW5jdGlvbiBzZXRQYXltZW50U2V0dGluZ3Moc3RyaW5nIGtleSwgc3RyaW5nIHZhbHVlKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHBheW1lbnRTZXR0aW5nc01hcFtrZXldID0gdmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiAgU2V0IGNvbXBvc2l0ZSByZXB1dGF0aW9uIHZhbHVlIGJ5IHN0cmluZyBrZXkKICAgICAqLwogICAgZnVuY3Rpb24gc2V0Q29tcG9zaXRlUmVwdXRhdGlvbihzdHJpbmcga2V5LCB1aW50MzIgdmFsdWUpIGV4dGVybmFsIG9ubHlNb25ldGhhIHsKICAgICAgICBjb21wb3NpdGVSZXB1dGF0aW9uTWFwW2tleV0gPSB2YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqICBBbGxvd3MgbWVyY2hhbnQgdG8gd2l0aGRyYXcgZnVuZHMgdG8gYmVuZWZpY2lhcnkgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1RvKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQgYW1vdW50KSBwdWJsaWMgb25seU1lcmNoYW50IHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2ZlcihhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBtZXJjaGFudCB0byB3aXRoZHJhdyBmdW5kcyB0byBpdCdzIG93biBhY2NvdW50CiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgYW1vdW50KSBleHRlcm5hbCB7CiAgICAgICAgd2l0aGRyYXdUbyhtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBtZXJjaGFudCB0byBjaGFuZ2UgaXQncyBhY2NvdW50IGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlTWVyY2hhbnRBY2NvdW50KGFkZHJlc3MgbmV3QWNjb3VudCkgZXh0ZXJuYWwgb25seU1lcmNoYW50IHdoZW5Ob3RQYXVzZWQgewogICAgICAgIG1lcmNoYW50QWNjb3VudCA9IG5ld0FjY291bnQ7CiAgICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9saWZlY3ljbGUvRGVzdHJ1Y3RpYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBEZXN0cnVjdGlibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHRoYXQgY2FuIGJlIGRlc3Ryb3llZCBieSBvd25lci4gQWxsIGZ1bmRzIGluIGNvbnRyYWN0IHdpbGwgYmUgc2VudCB0byB0aGUgb3duZXIuCiAqLwpjb250cmFjdCBEZXN0cnVjdGlibGUgaXMgT3duYWJsZSB7CgogIGZ1bmN0aW9uIERlc3RydWN0aWJsZSgpIHBheWFibGUgeyB9CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXJzIHRoZSBjdXJyZW50IGJhbGFuY2UgdG8gdGhlIG93bmVyIGFuZCB0ZXJtaW5hdGVzIHRoZSBjb250cmFjdC4KICAgKi8KICBmdW5jdGlvbiBkZXN0cm95KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCiAgZnVuY3Rpb24gZGVzdHJveUFuZFNlbmQoYWRkcmVzcyBfcmVjaXBpZW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgIHNlbGZkZXN0cnVjdChfcmVjaXBpZW50KTsKICB9Cn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Nb25ldGhhR2F0ZXdheS5zb2wKCi8qKgogKiAgQHRpdGxlIE1vbmV0aGFHYXRld2F5CiAqCiAqICBNb25ldGhhR2F0ZXdheSBmb3J3YXJkIGZ1bmRzIGZyb20gb3JkZXIgcGF5bWVudCB0byBtZXJjaGFudCdzIHdhbGxldCBhbmQgY29sbGVjdHMgTW9uZXRoYSBmZWUuCiAqLwpjb250cmFjdCBNb25ldGhhR2F0ZXdheSBpcyBQYXVzYWJsZSwgQ29udGFjdGFibGUsIERlc3RydWN0aWJsZSwgUmVzdHJpY3RlZCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIHN0cmluZyBjb25zdGFudCBWRVJTSU9OID0gIjAuNCI7CgogICAgLyoqCiAgICAgKiAgRmVlIHBlcm1pbGxlIG9mIE1vbmV0aGEgZmVlLgogICAgICogIDEgcGVybWlsbGUgKOKAsCkgPSAwLjEgcGVyY2VudCAoJSkKICAgICAqICAxNeKAsCA9IDEuNSUKICAgICAqLwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgRkVFX1BFUk1JTExFID0gMTU7CiAgICAKICAgIC8qKgogICAgICogIEFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdCBmb3IgZmVlIGNvbGxlY3Rpb24KICAgICAqLwogICAgYWRkcmVzcyBwdWJsaWMgbW9uZXRoYVZhdWx0OwoKICAgIC8qKgogICAgICogIEFjY291bnQgZm9yIHBlcm1pc3Npb25zIG1hbmFnaW5nCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIGFkbWluOwoKICAgIGV2ZW50IFBheW1lbnRQcm9jZXNzZWQoYWRkcmVzcyBtZXJjaGFudFdhbGxldCwgdWludCBtZXJjaGFudEluY29tZSwgdWludCBtb25ldGhhSW5jb21lKTsKCiAgICAvKioKICAgICAqICBAcGFyYW0gX21vbmV0aGFWYXVsdCBBZGRyZXNzIG9mIE1vbmV0aGEgVmF1bHQKICAgICAqLwogICAgZnVuY3Rpb24gTW9uZXRoYUdhdGV3YXkoYWRkcmVzcyBfbW9uZXRoYVZhdWx0LCBhZGRyZXNzIF9hZG1pbikgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9tb25ldGhhVmF1bHQgIT0gMHgwKTsKICAgICAgICBtb25ldGhhVmF1bHQgPSBfbW9uZXRoYVZhdWx0OwogICAgICAgIAogICAgICAgIHNldEFkbWluKF9hZG1pbik7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogIGFjY2VwdFBheW1lbnQgYWNjZXB0IHBheW1lbnQgZnJvbSBQYXltZW50QWNjZXB0b3IsIGZvcndhcmRzIGl0IHRvIG1lcmNoYW50J3Mgd2FsbGV0CiAgICAgKiAgICAgIGFuZCBjb2xsZWN0cyBNb25ldGhhIGZlZS4KICAgICAqICBAcGFyYW0gX21lcmNoYW50V2FsbGV0IGFkZHJlc3Mgb2YgbWVyY2hhbnQncyB3YWxsZXQgZm9yIGZ1bmQgdHJhbnNmZXIKICAgICAqICBAcGFyYW0gX21vbmV0aGFGZWUgaXMgYSBmZWUgY29sbGVjdGVkIGJ5IE1vbmV0aGEKICAgICAqLwogICAgZnVuY3Rpb24gYWNjZXB0UGF5bWVudChhZGRyZXNzIF9tZXJjaGFudFdhbGxldCwgdWludCBfbW9uZXRoYUZlZSkgZXh0ZXJuYWwgcGF5YWJsZSBvbmx5TW9uZXRoYSB3aGVuTm90UGF1c2VkIHsKICAgICAgICByZXF1aXJlKF9tZXJjaGFudFdhbGxldCAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX21vbmV0aGFGZWUgPj0gMCAmJiBfbW9uZXRoYUZlZSA8PSBGRUVfUEVSTUlMTEUubXVsKG1zZy52YWx1ZSkuZGl2KDEwMDApKTsgLy8gTW9uZXRoYSBmZWUgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAxLjUlIG9mIHBheW1lbnQKCiAgICAgICAgdWludCBtZXJjaGFudEluY29tZSA9IG1zZy52YWx1ZS5zdWIoX21vbmV0aGFGZWUpOwoKICAgICAgICBfbWVyY2hhbnRXYWxsZXQudHJhbnNmZXIobWVyY2hhbnRJbmNvbWUpOwogICAgICAgIG1vbmV0aGFWYXVsdC50cmFuc2ZlcihfbW9uZXRoYUZlZSk7CgogICAgICAgIFBheW1lbnRQcm9jZXNzZWQoX21lcmNoYW50V2FsbGV0LCBtZXJjaGFudEluY29tZSwgX21vbmV0aGFGZWUpOwogICAgfQoKICAgIC8qKgogICAgICogIGNoYW5nZU1vbmV0aGFWYXVsdCBhbGxvd3Mgb3duZXIgdG8gY2hhbmdlIGFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdC4KICAgICAqICBAcGFyYW0gbmV3VmF1bHQgTmV3IGFkZHJlc3Mgb2YgTW9uZXRoYSBWYXVsdAogICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VNb25ldGhhVmF1bHQoYWRkcmVzcyBuZXdWYXVsdCkgZXh0ZXJuYWwgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIG1vbmV0aGFWYXVsdCA9IG5ld1ZhdWx0OwogICAgfQoKICAgIC8qKgogICAgICogIEFsbG93cyBvdGhlciBtb25ldGhhIGFjY291bnQgb3IgY29udHJhY3QgdG8gc2V0IG5ldyBtb25ldGhhIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TW9uZXRoYUFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcywgYm9vbCBfaXNNb25ldGhhQWRkcmVzcykgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4gfHwgbXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgICAgIGlzTW9uZXRoYUFkZHJlc3NbX2FkZHJlc3NdID0gX2lzTW9uZXRoYUFkZHJlc3M7CgogICAgICAgIE1vbmV0aGFBZGRyZXNzU2V0KF9hZGRyZXNzLCBfaXNNb25ldGhhQWRkcmVzcyk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgc2V0QWRtaW4gYWxsb3dzIG93bmVyIHRvIGNoYW5nZSBhZGRyZXNzIG9mIGFkbWluLgogICAgICogIEBwYXJhbSBfYWRtaW4gTmV3IGFkZHJlc3Mgb2YgYWRtaW4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0QWRtaW4oYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX2FkbWluICE9IDB4MCk7CiAgICAgICAgYWRtaW4gPSBfYWRtaW47CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9QYXltZW50UHJvY2Vzc29yLnNvbAoKLyoqCiAqICBAdGl0bGUgUGF5bWVudFByb2Nlc3NvcgogKiAgRWFjaCBNZXJjaGFudCBoYXMgb25lIFBheW1lbnRQcm9jZXNzb3IgdGhhdCBlbnN1cmUgcGF5bWVudCBhbmQgb3JkZXIgcHJvY2Vzc2luZyB3aXRoIFRydXN0IGFuZCBSZXB1dGF0aW9uCiAqCiAqICBQYXltZW50IFByb2Nlc3NvciBTdGF0ZSBUcmFuc2l0aW9uczoKICogIE51bGwgLShhZGRPcmRlcikgLT4gQ3JlYXRlZAogKiAgQ3JlYXRlZCAtKHNlY3VyZVBheSkgLT4gUGFpZAogKiAgQ3JlYXRlZCAtKGNhbmNlbE9yZGVyKSAtPiBDYW5jZWxsZWQKICogIFBhaWQgLShyZWZ1bmRQYXltZW50KSAtPiBSZWZ1bmRpbmcKICogIFBhaWQgLShwcm9jZXNzUGF5bWVudCkgLT4gRmluYWxpemVkCiAqICBSZWZ1bmRpbmcgLSh3aXRoZHJhd1JlZnVuZCkgLT4gUmVmdW5kZWQKICovCgoKY29udHJhY3QgUGF5bWVudFByb2Nlc3NvciBpcyBQYXVzYWJsZSwgRGVzdHJ1Y3RpYmxlLCBDb250YWN0YWJsZSwgUmVzdHJpY3RlZCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgc3RyaW5nIGNvbnN0YW50IFZFUlNJT04gPSAiMC40IjsKCiAgICAvKioKICAgICAqICBGZWUgcGVybWlsbGUgb2YgTW9uZXRoYSBmZWUuCiAgICAgKiAgMSBwZXJtaWxsZSA9IDAuMSAlCiAgICAgKiAgMTUgcGVybWlsbGUgPSAxLjUlCiAgICAgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEZFRV9QRVJNSUxMRSA9IDE1OwoKICAgIC8vLyBNb25ldGhhR2F0ZXdheSBjb250cmFjdCBmb3IgcGF5bWVudCBwcm9jZXNzaW5nCiAgICBNb25ldGhhR2F0ZXdheSBwdWJsaWMgbW9uZXRoYUdhdGV3YXk7CgogICAgLy8vIE1lcmNoYW50RGVhbHNIaXN0b3J5IGNvbnRyYWN0IG9mIGFjY2VwdG9yJ3MgbWVyY2hhbnQKICAgIE1lcmNoYW50RGVhbHNIaXN0b3J5IHB1YmxpYyBtZXJjaGFudEhpc3Rvcnk7CgogICAgLy8vIEFkZHJlc3Mgb2YgTWVyY2hhbnRXYWxsZXQsIHdoZXJlIG1lcmNoYW50IHJlcHV0YXRpb24gYW5kIGZ1bmRzIGFyZSBzdG9yZWQKICAgIE1lcmNoYW50V2FsbGV0IHB1YmxpYyBtZXJjaGFudFdhbGxldDsKCiAgICAvLy8gTWVyY2hhbnQgaWRlbnRpZmllciBoYXNoLCB0aGF0IGFzc29jaWF0ZXMgd2l0aCB0aGUgYWNjZXB0b3IKICAgIGJ5dGVzMzIgcHVibGljIG1lcmNoYW50SWRIYXNoOwoKICAgIG1hcHBpbmcgKHVpbnQ9Pk9yZGVyKSBwdWJsaWMgb3JkZXJzOwoKICAgIGVudW0gU3RhdGUge051bGwsIENyZWF0ZWQsIFBhaWQsIEZpbmFsaXplZCwgUmVmdW5kaW5nLCBSZWZ1bmRlZCwgQ2FuY2VsbGVkfQoKICAgIHN0cnVjdCBPcmRlciB7CiAgICAgICAgU3RhdGUgc3RhdGU7CiAgICAgICAgdWludCBwcmljZTsKICAgICAgICB1aW50IGZlZTsKICAgICAgICBhZGRyZXNzIHBheW1lbnRBY2NlcHRvcjsKICAgICAgICBhZGRyZXNzIG9yaWdpbkFkZHJlc3M7CiAgICB9CgogICAgLyoqCiAgICAgKiAgQXNzZXJ0cyBjdXJyZW50IHN0YXRlLgogICAgICogIEBwYXJhbSBfc3RhdGUgRXhwZWN0ZWQgc3RhdGUKICAgICAqICBAcGFyYW0gX29yZGVySWQgT3JkZXIgSWQKICAgICAqLwogICAgbW9kaWZpZXIgYXRTdGF0ZSh1aW50IF9vcmRlcklkLCBTdGF0ZSBfc3RhdGUpIHsKICAgICAgICByZXF1aXJlKF9zdGF0ZSA9PSBvcmRlcnNbX29yZGVySWRdLnN0YXRlKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogIFBlcmZvcm1zIGEgdHJhbnNpdGlvbiBhZnRlciBmdW5jdGlvbiBleGVjdXRpb24uCiAgICAgKiAgQHBhcmFtIF9zdGF0ZSBOZXh0IHN0YXRlCiAgICAgKiAgQHBhcmFtIF9vcmRlcklkIE9yZGVyIElkCiAgICAgKi8KICAgIG1vZGlmaWVyIHRyYW5zaXRpb24odWludCBfb3JkZXJJZCwgU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgXzsKICAgICAgICBvcmRlcnNbX29yZGVySWRdLnN0YXRlID0gX3N0YXRlOwogICAgfQoKICAgIC8qKgogICAgICogIHBheW1lbnQgUHJvY2Vzc29yIHNldHMgTW9uZXRoYSBHYXRld2F5CiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudElkIE1lcmNoYW50IG9mIHRoZSBhY2NlcHRvcgogICAgICogIEBwYXJhbSBfbWVyY2hhbnRIaXN0b3J5IEFkZHJlc3Mgb2YgTWVyY2hhbnREZWFsc0hpc3RvcnkgY29udHJhY3Qgb2YgYWNjZXB0b3IncyBtZXJjaGFudAogICAgICogIEBwYXJhbSBfbW9uZXRoYUdhdGV3YXkgQWRkcmVzcyBvZiBNb25ldGhhR2F0ZXdheSBjb250cmFjdCBmb3IgcGF5bWVudCBwcm9jZXNzaW5nCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudFdhbGxldCBBZGRyZXNzIG9mIE1lcmNoYW50V2FsbGV0LCB3aGVyZSBtZXJjaGFudCByZXB1dGF0aW9uIGFuZCBmdW5kcyBhcmUgc3RvcmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIFBheW1lbnRQcm9jZXNzb3IoCiAgICAgICAgc3RyaW5nIF9tZXJjaGFudElkLAogICAgICAgIE1lcmNoYW50RGVhbHNIaXN0b3J5IF9tZXJjaGFudEhpc3RvcnksCiAgICAgICAgTW9uZXRoYUdhdGV3YXkgX21vbmV0aGFHYXRld2F5LAogICAgICAgIE1lcmNoYW50V2FsbGV0IF9tZXJjaGFudFdhbGxldAogICAgKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKGJ5dGVzKF9tZXJjaGFudElkKS5sZW5ndGggPiAwKTsKCiAgICAgICAgbWVyY2hhbnRJZEhhc2ggPSBrZWNjYWsyNTYoX21lcmNoYW50SWQpOwoKICAgICAgICBzZXRNb25ldGhhR2F0ZXdheShfbW9uZXRoYUdhdGV3YXkpOwogICAgICAgIHNldE1lcmNoYW50V2FsbGV0KF9tZXJjaGFudFdhbGxldCk7CiAgICAgICAgc2V0TWVyY2hhbnREZWFsc0hpc3RvcnkoX21lcmNoYW50SGlzdG9yeSk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgQXNzaWducyB0aGUgYWNjZXB0b3IgdG8gdGhlIG9yZGVyICh3aGVuIGNsaWVudCBpbml0aWF0ZXMgb3JkZXIpLgogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIHRoZSBvcmRlcgogICAgICogIEBwYXJhbSBfcHJpY2UgUHJpY2Ugb2YgdGhlIG9yZGVyIAogICAgICogIEBwYXJhbSBfcGF5bWVudEFjY2VwdG9yIG9yZGVyIHBheW1lbnQgYWNjZXB0b3IKICAgICAqICBAcGFyYW0gX29yaWdpbkFkZHJlc3MgYnV5ZXIgYWRkcmVzcwogICAgICogIEBwYXJhbSBfZmVlIE1vbmV0aGEgZmVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZE9yZGVyKAogICAgICAgIHVpbnQgX29yZGVySWQsCiAgICAgICAgdWludCBfcHJpY2UsCiAgICAgICAgYWRkcmVzcyBfcGF5bWVudEFjY2VwdG9yLAogICAgICAgIGFkZHJlc3MgX29yaWdpbkFkZHJlc3MsCiAgICAgICAgdWludCBfZmVlCiAgICApIGV4dGVybmFsIG9ubHlNb25ldGhhIHdoZW5Ob3RQYXVzZWQgYXRTdGF0ZShfb3JkZXJJZCwgU3RhdGUuTnVsbCkKICAgIHsKICAgICAgICByZXF1aXJlKF9vcmRlcklkID4gMCk7CiAgICAgICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgICAgICByZXF1aXJlKF9mZWUgPj0gMCAmJiBfZmVlIDw9IEZFRV9QRVJNSUxMRS5tdWwoX3ByaWNlKS5kaXYoMTAwMCkpOyAvLyBNb25ldGhhIGZlZSBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIDEuNSUgb2YgcHJpY2UKCiAgICAgICAgb3JkZXJzW19vcmRlcklkXSA9IE9yZGVyKHsKICAgICAgICAgICAgc3RhdGU6IFN0YXRlLkNyZWF0ZWQsCiAgICAgICAgICAgIHByaWNlOiBfcHJpY2UsCiAgICAgICAgICAgIGZlZTogX2ZlZSwKICAgICAgICAgICAgcGF5bWVudEFjY2VwdG9yOiBfcGF5bWVudEFjY2VwdG9yLAogICAgICAgICAgICBvcmlnaW5BZGRyZXNzOiBfb3JpZ2luQWRkcmVzcwogICAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogIHNlY3VyZVBheSBjYW4gYmUgdXNlZCBieSBjbGllbnQgaWYgaGUgd2FudHMgdG8gc2VjdXJlbHkgc2V0IGNsaWVudCBhZGRyZXNzIGZvciByZWZ1bmQgdG9nZXRoZXIgd2l0aCBwYXltZW50LgogICAgICogIFRoaXMgZnVuY3Rpb24gcmVxdWlyZSBtb3JlIGdhcywgdGhlbiBmYWxsYmFjayBmdW5jdGlvbi4KICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiB0aGUgb3JkZXIKICAgICAqLwogICAgZnVuY3Rpb24gc2VjdXJlUGF5KHVpbnQgX29yZGVySWQpCiAgICAgICAgZXh0ZXJuYWwgcGF5YWJsZSB3aGVuTm90UGF1c2VkCiAgICAgICAgYXRTdGF0ZShfb3JkZXJJZCwgU3RhdGUuQ3JlYXRlZCkgdHJhbnNpdGlvbihfb3JkZXJJZCwgU3RhdGUuUGFpZCkKICAgIHsKICAgICAgICBPcmRlciBzdG9yYWdlIG9yZGVyID0gb3JkZXJzW19vcmRlcklkXTsKCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG9yZGVyLnBheW1lbnRBY2NlcHRvcik7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gb3JkZXIucHJpY2UpOwogICAgfQoKICAgIC8qKgogICAgICogIGNhbmNlbE9yZGVyIGlzIHVzZWQgd2hlbiBjbGllbnQgZG9lc24ndCBwYXkgYW5kIG9yZGVyIG5lZWQgdG8gYmUgY2FuY2VsbGVkLgogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIHRoZSBvcmRlcgogICAgICogIEBwYXJhbSBfY2xpZW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIGNsaWVudAogICAgICogIEBwYXJhbSBfbWVyY2hhbnRSZXB1dGF0aW9uIFVwZGF0ZWQgcmVwdXRhdGlvbiBvZiB0aGUgbWVyY2hhbnQKICAgICAqICBAcGFyYW0gX2RlYWxIYXNoIEhhc2hjb2RlIG9mIHRoZSBkZWFsLCBkZXNjcmliaW5nIHRoZSBvcmRlciAodXNlZCBmb3IgZGVhbCB2ZXJpZmljYXRpb24pCiAgICAgKiAgQHBhcmFtIF9jYW5jZWxSZWFzb24gT3JkZXIgY2FuY2VsIHJlYXNvbgogICAgICovCiAgICBmdW5jdGlvbiBjYW5jZWxPcmRlcigKICAgICAgICB1aW50IF9vcmRlcklkLAogICAgICAgIHVpbnQzMiBfY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50MzIgX21lcmNoYW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50IF9kZWFsSGFzaCwKICAgICAgICBzdHJpbmcgX2NhbmNlbFJlYXNvbgogICAgKQogICAgICAgIGV4dGVybmFsIG9ubHlNb25ldGhhIHdoZW5Ob3RQYXVzZWQKICAgICAgICBhdFN0YXRlKF9vcmRlcklkLCBTdGF0ZS5DcmVhdGVkKSB0cmFuc2l0aW9uKF9vcmRlcklkLCBTdGF0ZS5DYW5jZWxsZWQpCiAgICB7CiAgICAgICAgcmVxdWlyZShieXRlcyhfY2FuY2VsUmVhc29uKS5sZW5ndGggPiAwKTsKCiAgICAgICAgT3JkZXIgc3RvcmFnZSBvcmRlciA9IG9yZGVyc1tfb3JkZXJJZF07CgogICAgICAgIHVwZGF0ZURlYWxDb25kaXRpb25zKAogICAgICAgICAgICBfb3JkZXJJZCwKICAgICAgICAgICAgX2NsaWVudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9tZXJjaGFudFJlcHV0YXRpb24sCiAgICAgICAgICAgIGZhbHNlLAogICAgICAgICAgICBfZGVhbEhhc2gKICAgICAgICApOwoKICAgICAgICBtZXJjaGFudEhpc3RvcnkucmVjb3JkRGVhbENhbmNlbFJlYXNvbigKICAgICAgICAgICAgX29yZGVySWQsCiAgICAgICAgICAgIG9yZGVyLm9yaWdpbkFkZHJlc3MsCiAgICAgICAgICAgIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgICAgICBfZGVhbEhhc2gsCiAgICAgICAgICAgIF9jYW5jZWxSZWFzb24KICAgICAgICApOwogICAgfQoKICAgIC8qKgogICAgICogIHJlZnVuZFBheW1lbnQgdXNlZCBpbiBjYXNlIG9yZGVyIGNhbm5vdCBiZSBwcm9jZXNzZWQuCiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpbml0aWF0ZSBwcm9jZXNzIG9mIGZ1bmRzIHJlZnVuZGluZyB0byB0aGUgY2xpZW50LgogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIHRoZSBvcmRlcgogICAgICogIEBwYXJhbSBfY2xpZW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIGNsaWVudAogICAgICogIEBwYXJhbSBfbWVyY2hhbnRSZXB1dGF0aW9uIFVwZGF0ZWQgcmVwdXRhdGlvbiBvZiB0aGUgbWVyY2hhbnQKICAgICAqICBAcGFyYW0gX2RlYWxIYXNoIEhhc2hjb2RlIG9mIHRoZSBkZWFsLCBkZXNjcmliaW5nIHRoZSBvcmRlciAodXNlZCBmb3IgZGVhbCB2ZXJpZmljYXRpb24pCiAgICAgKiAgQHBhcmFtIF9yZWZ1bmRSZWFzb24gT3JkZXIgcmVmdW5kIHJlYXNvbiwgb3JkZXIgd2lsbCBiZSBtb3ZlZCB0byBTdGF0ZSBDYW5jZWxsZWQgYWZ0ZXIgQ2xpZW50IHdpdGhkcmF3cyBtb25leQogICAgICovCiAgICBmdW5jdGlvbiByZWZ1bmRQYXltZW50KAogICAgICAgIHVpbnQgX29yZGVySWQsCiAgICAgICAgdWludDMyIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQzMiBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQgX2RlYWxIYXNoLAogICAgICAgIHN0cmluZyBfcmVmdW5kUmVhc29uCiAgICApICAgCiAgICAgICAgZXh0ZXJuYWwgb25seU1vbmV0aGEgd2hlbk5vdFBhdXNlZAogICAgICAgIGF0U3RhdGUoX29yZGVySWQsIFN0YXRlLlBhaWQpIHRyYW5zaXRpb24oX29yZGVySWQsIFN0YXRlLlJlZnVuZGluZykKICAgIHsKICAgICAgICByZXF1aXJlKGJ5dGVzKF9yZWZ1bmRSZWFzb24pLmxlbmd0aCA+IDApOwoKICAgICAgICBPcmRlciBzdG9yYWdlIG9yZGVyID0gb3JkZXJzW19vcmRlcklkXTsKCiAgICAgICAgdXBkYXRlRGVhbENvbmRpdGlvbnMoCiAgICAgICAgICAgIF9vcmRlcklkLAogICAgICAgICAgICBfY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICAgICAgX21lcmNoYW50UmVwdXRhdGlvbiwKICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgIF9kZWFsSGFzaAogICAgICAgICk7CgogICAgICAgIG1lcmNoYW50SGlzdG9yeS5yZWNvcmREZWFsUmVmdW5kUmVhc29uKAogICAgICAgICAgICBfb3JkZXJJZCwKICAgICAgICAgICAgb3JkZXIub3JpZ2luQWRkcmVzcywKICAgICAgICAgICAgX2NsaWVudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9tZXJjaGFudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9kZWFsSGFzaCwKICAgICAgICAgICAgX3JlZnVuZFJlYXNvbgogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgd2l0aGRyYXdSZWZ1bmQgcGVyZm9ybXMgZnVuZCB0cmFuc2ZlciB0byB0aGUgY2xpZW50J3MgYWNjb3VudC4KICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiB0aGUgb3JkZXIKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdSZWZ1bmQodWludCBfb3JkZXJJZCkgCiAgICAgICAgZXh0ZXJuYWwgd2hlbk5vdFBhdXNlZAogICAgICAgIGF0U3RhdGUoX29yZGVySWQsIFN0YXRlLlJlZnVuZGluZykgdHJhbnNpdGlvbihfb3JkZXJJZCwgU3RhdGUuUmVmdW5kZWQpIAogICAgewogICAgICAgIE9yZGVyIHN0b3JhZ2Ugb3JkZXIgPSBvcmRlcnNbX29yZGVySWRdOwogICAgICAgIG9yZGVyLm9yaWdpbkFkZHJlc3MudHJhbnNmZXIob3JkZXIucHJpY2UpOwogICAgfQoKICAgIC8qKgogICAgICogIHByb2Nlc3NQYXltZW50IHRyYW5zZmVyIGZ1bmRzIHRvIE1vbmV0aGFHYXRld2F5IGFuZCBjb21wbGV0ZXMgdGhlIG9yZGVyLgogICAgICogIEBwYXJhbSBfb3JkZXJJZCBJZGVudGlmaWVyIG9mIHRoZSBvcmRlcgogICAgICogIEBwYXJhbSBfY2xpZW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIGNsaWVudAogICAgICogIEBwYXJhbSBfbWVyY2hhbnRSZXB1dGF0aW9uIFVwZGF0ZWQgcmVwdXRhdGlvbiBvZiB0aGUgbWVyY2hhbnQKICAgICAqICBAcGFyYW0gX2RlYWxIYXNoIEhhc2hjb2RlIG9mIHRoZSBkZWFsLCBkZXNjcmliaW5nIHRoZSBvcmRlciAodXNlZCBmb3IgZGVhbCB2ZXJpZmljYXRpb24pCiAgICAgKi8KICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXltZW50KAogICAgICAgIHVpbnQgX29yZGVySWQsCiAgICAgICAgdWludDMyIF9jbGllbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQzMiBfbWVyY2hhbnRSZXB1dGF0aW9uLAogICAgICAgIHVpbnQgX2RlYWxIYXNoCiAgICApCiAgICAgICAgZXh0ZXJuYWwgb25seU1vbmV0aGEgd2hlbk5vdFBhdXNlZAogICAgICAgIGF0U3RhdGUoX29yZGVySWQsIFN0YXRlLlBhaWQpIHRyYW5zaXRpb24oX29yZGVySWQsIFN0YXRlLkZpbmFsaXplZCkKICAgIHsKICAgICAgICBtb25ldGhhR2F0ZXdheS5hY2NlcHRQYXltZW50LnZhbHVlKG9yZGVyc1tfb3JkZXJJZF0ucHJpY2UpKG1lcmNoYW50V2FsbGV0LCBvcmRlcnNbX29yZGVySWRdLmZlZSk7CgogICAgICAgIHVwZGF0ZURlYWxDb25kaXRpb25zKAogICAgICAgICAgICBfb3JkZXJJZCwKICAgICAgICAgICAgX2NsaWVudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9tZXJjaGFudFJlcHV0YXRpb24sCiAgICAgICAgICAgIHRydWUsCiAgICAgICAgICAgIF9kZWFsSGFzaAogICAgICAgICk7CiAgICB9CgogICAgLyoqCiAgICAgKiAgc2V0TW9uZXRoYUdhdGV3YXkgYWxsb3dzIG93bmVyIHRvIGNoYW5nZSBhZGRyZXNzIG9mIE1vbmV0aGFHYXRld2F5LgogICAgICogIEBwYXJhbSBfbmV3R2F0ZXdheSBBZGRyZXNzIG9mIG5ldyBNb25ldGhhR2F0ZXdheSBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBzZXRNb25ldGhhR2F0ZXdheShNb25ldGhhR2F0ZXdheSBfbmV3R2F0ZXdheSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKF9uZXdHYXRld2F5KSAhPSAweDApOwoKICAgICAgICBtb25ldGhhR2F0ZXdheSA9IF9uZXdHYXRld2F5OwogICAgfQoKICAgIC8qKgogICAgICogIHNldE1lcmNoYW50V2FsbGV0IGFsbG93cyBvd25lciB0byBjaGFuZ2UgYWRkcmVzcyBvZiBNZXJjaGFudFdhbGxldC4KICAgICAqICBAcGFyYW0gX25ld1dhbGxldCBBZGRyZXNzIG9mIG5ldyBNZXJjaGFudFdhbGxldCBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBzZXRNZXJjaGFudFdhbGxldChNZXJjaGFudFdhbGxldCBfbmV3V2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoX25ld1dhbGxldCkgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF9uZXdXYWxsZXQubWVyY2hhbnRJZEhhc2goKSA9PSBtZXJjaGFudElkSGFzaCk7CgogICAgICAgIG1lcmNoYW50V2FsbGV0ID0gX25ld1dhbGxldDsKICAgIH0KCiAgICAvKioKICAgICAqICBzZXRNZXJjaGFudERlYWxzSGlzdG9yeSBhbGxvd3Mgb3duZXIgdG8gY2hhbmdlIGFkZHJlc3Mgb2YgTWVyY2hhbnREZWFsc0hpc3RvcnkuCiAgICAgKiAgQHBhcmFtIF9tZXJjaGFudEhpc3RvcnkgQWRkcmVzcyBvZiBuZXcgTWVyY2hhbnREZWFsc0hpc3RvcnkgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TWVyY2hhbnREZWFsc0hpc3RvcnkoTWVyY2hhbnREZWFsc0hpc3RvcnkgX21lcmNoYW50SGlzdG9yeSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKF9tZXJjaGFudEhpc3RvcnkpICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShfbWVyY2hhbnRIaXN0b3J5Lm1lcmNoYW50SWRIYXNoKCkgPT0gbWVyY2hhbnRJZEhhc2gpOwoKICAgICAgICBtZXJjaGFudEhpc3RvcnkgPSBfbWVyY2hhbnRIaXN0b3J5OwogICAgfQoKICAgIC8qKgogICAgICogIHVwZGF0ZURlYWxDb25kaXRpb25zIHJlY29yZCBmaW5hbGl6ZWQgZGVhbCBhbmQgdXBkYXRlcyBtZXJjaGFudCByZXB1dGF0aW9uCiAgICAgKiAgaW4gZnV0dXJlOiB1cGRhdGUgQ2xpZW50IHJlcHV0YXRpb24KICAgICAqICBAcGFyYW0gX29yZGVySWQgSWRlbnRpZmllciBvZiB0aGUgb3JkZXIKICAgICAqICBAcGFyYW0gX2NsaWVudFJlcHV0YXRpb24gVXBkYXRlZCByZXB1dGF0aW9uIG9mIHRoZSBjbGllbnQKICAgICAqICBAcGFyYW0gX21lcmNoYW50UmVwdXRhdGlvbiBVcGRhdGVkIHJlcHV0YXRpb24gb2YgdGhlIG1lcmNoYW50CiAgICAgKiAgQHBhcmFtIF9pc1N1Y2Nlc3MgSWRlbnRpZmllcyB3aGV0aGVyIGRlYWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICAgKiAgQHBhcmFtIF9kZWFsSGFzaCBIYXNoY29kZSBvZiB0aGUgZGVhbCwgZGVzY3JpYmluZyB0aGUgb3JkZXIgKHVzZWQgZm9yIGRlYWwgdmVyaWZpY2F0aW9uKQogICAgICovCiAgICBmdW5jdGlvbiB1cGRhdGVEZWFsQ29uZGl0aW9ucygKICAgICAgICB1aW50IF9vcmRlcklkLAogICAgICAgIHVpbnQzMiBfY2xpZW50UmVwdXRhdGlvbiwKICAgICAgICB1aW50MzIgX21lcmNoYW50UmVwdXRhdGlvbiwKICAgICAgICBib29sIF9pc1N1Y2Nlc3MsCiAgICAgICAgdWludCBfZGVhbEhhc2gKICAgICkgaW50ZXJuYWwKICAgIHsKICAgICAgICBtZXJjaGFudEhpc3RvcnkucmVjb3JkRGVhbCgKICAgICAgICAgICAgX29yZGVySWQsCiAgICAgICAgICAgIG9yZGVyc1tfb3JkZXJJZF0ub3JpZ2luQWRkcmVzcywKICAgICAgICAgICAgX2NsaWVudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9tZXJjaGFudFJlcHV0YXRpb24sCiAgICAgICAgICAgIF9pc1N1Y2Nlc3MsCiAgICAgICAgICAgIF9kZWFsSGFzaAogICAgICAgICk7CgogICAgICAgIC8vdXBkYXRlIHBhcnRpZXMgUmVwdXRhdGlvbgogICAgICAgIG1lcmNoYW50V2FsbGV0LnNldENvbXBvc2l0ZVJlcHV0YXRpb24oInRvdGFsIiwgX21lcmNoYW50UmVwdXRhdGlvbik7CiAgICB9Cn0='.
	

]
