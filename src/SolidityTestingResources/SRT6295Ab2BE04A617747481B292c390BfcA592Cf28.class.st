Class {
	#name : #SRT6295Ab2BE04A617747481B292c390BfcA592Cf28,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6295Ab2BE04A617747481B292c390BfcA592Cf28 >> base64 [
	^ ''.
	

]
