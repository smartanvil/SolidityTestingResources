Class {
	#name : #SRT1fe7a92013b295ff98da0954b7a08e603754a1bf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1fe7a92013b295ff98da0954b7a08e603754a1bf >> base64 [
	^ ''.
	

]
