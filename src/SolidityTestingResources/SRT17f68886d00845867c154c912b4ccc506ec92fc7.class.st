Class {
	#name : #SRT17f68886d00845867c154c912b4ccc506ec92fc7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT17f68886d00845867c154c912b4ccc506ec92fc7 >> base64 [
	^ ''.
	

]
