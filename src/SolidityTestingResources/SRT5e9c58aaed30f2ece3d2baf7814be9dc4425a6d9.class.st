Class {
	#name : #SRT5e9c58aaed30f2ece3d2baf7814be9dc4425a6d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e9c58aaed30f2ece3d2baf7814be9dc4425a6d9 >> base64 [
	^ ''.
	

]
