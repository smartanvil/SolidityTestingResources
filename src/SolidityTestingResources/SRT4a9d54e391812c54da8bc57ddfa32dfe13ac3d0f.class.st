Class {
	#name : #SRT4a9d54e391812c54da8bc57ddfa32dfe13ac3d0f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4a9d54e391812c54da8bc57ddfa32dfe13ac3d0f >> base64 [
	^ ''.
	

]
