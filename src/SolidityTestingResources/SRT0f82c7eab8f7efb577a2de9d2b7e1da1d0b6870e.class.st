Class {
	#name : #SRT0f82c7eab8f7efb577a2de9d2b7e1da1d0b6870e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f82c7eab8f7efb577a2de9d2b7e1da1d0b6870e >> base64 [
	^ ''.
	

]
