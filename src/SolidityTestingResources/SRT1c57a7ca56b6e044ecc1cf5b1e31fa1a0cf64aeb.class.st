Class {
	#name : #SRT1c57a7ca56b6e044ecc1cf5b1e31fa1a0cf64aeb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c57a7ca56b6e044ecc1cf5b1e31fa1a0cf64aeb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5ID49MC40LjExOwoKY29udHJhY3QgT3duZWQgewogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIFRoaXMgY29udHJhY3Qgb25seSBkZWZpbmVzIGEgbW9kaWZpZXIgYW5kIGEgZmV3IHVzZWZ1bCBmdW5jdGlvbnMKICAgIC8vIFRoZSBmdW5jdGlvbiBib2R5IGlzIGluc2VydGVkIHdoZXJlIHRoZSBzcGVjaWFsIHN5bWJvbCAiXyIgaW4gdGhlCiAgICAvLyBkZWZpbml0aW9uIG9mIGEgbW9kaWZpZXIgYXBwZWFycy4KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7IGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBfOyB9CgogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICB9CgogICAgLy8gVGhpcyBpcyBhIGdlbmVyYWwgc2FmdHkgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdGhlIG93bmVyIHRvIGRvIGEgbG90CiAgICAvLyAgb2YgdGhpbmdzIGluIHRoZSB1bmxpa2VseSBldmVudCB0aGF0IHNvbWV0aGluZyBnb2VzIHdyb25nCiAgICAvLyBfZHN0IGlzIHRoZSBjb250cmFjdCBiZWluZyBjYWxsZWQgbWFraW5nIHRoaXMgbGlrZSBhIDEvMSBtdWx0aXNpZwogICAgZnVuY3Rpb24gZXhlY3V0ZShhZGRyZXNzIF9kc3QsIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgb25seU93bmVyIHsKICAgICAgICBfZHN0LmNhbGwudmFsdWUoX3ZhbHVlKShfZGF0YSk7CiAgICB9Cn0KLy8gdG8gZ2V0IHRoZSBuZWVkZWQgdG9rZW4gZnVuY3Rpb25zIGluIHRoZSBjb250cmFjdApjb250cmFjdCBUb2tlbiB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzLCB1aW50KSByZXR1cm5zKGJvb2wpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwp9Cgpjb250cmFjdCBUb2tlblNlbmRlciBpcyBPd25lZCB7CiAgICBUb2tlbiBwdWJsaWMgdG9rZW47IC8vIHRoZSB0b2tlbiB3ZSBhcmUgd29ya2luZyB3aXRoCiAgICB1aW50IHB1YmxpYyB0b3RhbFRvRGlzdHJpYnV0ZTsKCiAgICB1aW50IHB1YmxpYyBuZXh0OwoKCiAgICBzdHJ1Y3QgVHJhbnNmZXIgewogICAgICAgIGFkZHJlc3MgYWRkcjsKICAgICAgICB1aW50IGFtb3VudDsKICAgIH0KCiAgICBUcmFuc2ZlcltdIHB1YmxpYyB0cmFuc2ZlcnM7CgogICAgZnVuY3Rpb24gVG9rZW5TZW5kZXIoYWRkcmVzcyBfdG9rZW4pIHsKICAgICAgICB0b2tlbiA9IFRva2VuKF90b2tlbik7CiAgICB9CgogICAgLy8gdGhpcyBpcyBhIHVzZWQgdG8gc2F2ZSBnYXMKICAgIHVpbnQgY29uc3RhbnQgRDE2MCA9IDB4MDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKCiAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IG1ha2VzIHRoZSBsaXN0IG9mIHRyYW5zZmVycyBhbmQgdmFyaW91cwogICAgLy8gIGNoZWNrcyBhcm91bmQgdGhhdCBsaXN0LCBpdCBpcyBhIGxpdHRsZSB0cmlja3ksIHRoZSBkYXRhIGlucHV0IGlzCiAgICAvLyAgc3RydWN0dXJlZCB3aXRoIHRoZSBgYW1vdW50YCBhbmQgdGhlIChyZWNlaXZpbmcpIGBhZGRyYCBjb21iaW5lZCBhcyBvbmUKICAgIC8vICBsb25nIG51bWJlciBhbmQgdGhlbiB0aGlzIG51bWJlciBpcyBkZWNvbnN0cnVjdGVkIGluIHRoaXMgZnVuY3Rpb24gdG8KICAgIC8vICBzYXZlIGdhcyBhbmQgcmVkdWNlIHRoZSBudW1iZXIgb2YgYDBgJ3MgdGhhdCBhcmUgbmVlZGVkIHRvIGJlIHN0b3JlZAogICAgLy8gICBvbiB0aGUgYmxvY2tjaGFpbgogICAgZnVuY3Rpb24gZmlsbCh1aW50W10gZGF0YSkgb25seU93bmVyIHsKCiAgICAgICAgLy8gSWYgdGhlIHNlbmQgaGFzIHN0YXJ0ZWQgdGhlbiB3ZSBqdXN0IHRocm93CiAgICAgICAgaWYgKG5leHQ+MCkgdGhyb3c7CgogICAgICAgIHVpbnQgYWNjOwogICAgICAgIHVpbnQgb2Zmc2V0ID0gdHJhbnNmZXJzLmxlbmd0aDsKICAgICAgICB0cmFuc2ZlcnMubGVuZ3RoID0gdHJhbnNmZXJzLmxlbmd0aCArIGRhdGEubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIGFkZHJlc3MgYWRkciA9IGFkZHJlc3MoIGRhdGFbaV0gJiAoRDE2MC0xKSApOwogICAgICAgICAgICB1aW50IGFtb3VudCA9IGRhdGFbaV0gLyBEMTYwOwoKICAgICAgICAgICAgdHJhbnNmZXJzW29mZnNldCArIGldLmFkZHIgPSBhZGRyOwogICAgICAgICAgICB0cmFuc2ZlcnNbb2Zmc2V0ICsgaV0uYW1vdW50ID0gYW1vdW50OwogICAgICAgICAgICBhY2MgKz0gYW1vdW50OwogICAgICAgIH0KICAgICAgICB0b3RhbFRvRGlzdHJpYnV0ZSArPSBhY2M7CiAgICB9CiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFjdHVhbGx5IG1ha2VzIHRoZSBzZW5kcyBhbmQgdHJhY2tzIHRoZSBhbW91bnQgb2YgZ2FzIHVzZWQKICAgIC8vICBpZiBpdCB0YWtlcyBtb3JlIGdhcyB0aGFuIHdhcyBzZW50IHdpdGggdGhlIHRyYW5zYWN0aW9uIHRoZW4gdGhpcwogICAgLy8gIGZ1bmN0aW9uIHdpbGwgbmVlZCB0byBiZSBjYWxsZWQgYSBmZXcgdGltZXMgdW50aWwKICAgIGZ1bmN0aW9uIHJ1bigpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKHRyYW5zZmVycy5sZW5ndGggPT0gMCkgcmV0dXJuOwoKICAgICAgICAvLyBLZWVwIG5leHQgaW4gdGhlIHN0YWNrIHZhciBtTmV4dCB0byBzYXZlIGdhcwogICAgICAgIHVpbnQgbU5leHQgPSBuZXh0OwoKICAgICAgICAvLyBTZXQgdGhlIGNvbnRyYWN0IGFzIGZpbmFsaXplZCB0byBhdm9pZCByZWVudHJhbmNlCiAgICAgICAgbmV4dCA9IHRyYW5zZmVycy5sZW5ndGg7CgogICAgICAgIGlmICgobU5leHQgPT0gMCApICYmICggdG9rZW4uYmFsYW5jZU9mKHRoaXMpICE9IHRvdGFsVG9EaXN0cmlidXRlKSkgdGhyb3c7CgogICAgICAgIHdoaWxlICgobU5leHQ8dHJhbnNmZXJzLmxlbmd0aCkgJiYgKCBnYXMoKSA+IDE1MDAwMCApKSB7CiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gdHJhbnNmZXJzW21OZXh0XS5hbW91bnQ7CiAgICAgICAgICAgIGFkZHJlc3MgYWRkciA9IHRyYW5zZmVyc1ttTmV4dF0uYWRkcjsKICAgICAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgICAgIGlmICghdG9rZW4udHJhbnNmZXIoYWRkciwgdHJhbnNmZXJzW21OZXh0XS5hbW91bnQpKSB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgICAgICBtTmV4dCArKzsKICAgICAgICB9CgogICAgICAgIC8vIFNldCB0aGUgbmV4dCB0byB0aGUgYWN0dWFsIHN0YXRlLgogICAgICAgIG5leHQgPSBtTmV4dDsKICAgIH0KCgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEhlbHBlciBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gaGFzVGVybWluYXRlZCgpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAodHJhbnNmZXJzLmxlbmd0aCA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYgKG5leHQgPCB0cmFuc2ZlcnMubGVuZ3RoKSByZXR1cm4gZmFsc2U7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gblRyYW5zZmVycygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gdHJhbnNmZXJzLmxlbmd0aDsKICAgIH0KCiAgICBmdW5jdGlvbiBnYXMoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50IF9nYXMpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIF9nYXM6PSBnYXMKICAgICAgICB9CiAgICB9Cgp9'.
	

]
