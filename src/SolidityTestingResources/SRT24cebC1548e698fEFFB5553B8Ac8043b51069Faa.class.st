Class {
	#name : #SRT24cebC1548e698fEFFB5553B8Ac8043b51069Faa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT24cebC1548e698fEFFB5553B8Ac8043b51069Faa >> base64 [
	^ ''.
	

]
