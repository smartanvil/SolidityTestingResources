Class {
	#name : #SRT737290dc60f7079123f96a59ba1c48188a94a108,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT737290dc60f7079123f96a59ba1c48188a94a108 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KLy8vIEB0aXRsZSBJbnRlcmZhY2UgZm9yIGNvbnRyYWN0cyBjb25mb3JtaW5nIHRvIEVSQy03MjE6IE5vbi1GdW5naWJsZSBUb2tlbnMKLy8vIEBhdXRob3IgRGlldGVyIFNoaXJsZXkgPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIxNTcxNzA2MTcwNTU3NDZkN2M3YTc4NmY3MDdiM2I3NjdhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4gKGh0dHBzOi8vZ2l0aHViLmNvbS9kZXRlKQpjb250cmFjdCBFUkM3MjEgewogICAgLy8gUmVxdWlyZWQgbWV0aG9kcwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbDsKICAgIC8vIEV2ZW50cwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHRva2VuSWQpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBhcHByb3ZlZCwgdWludDI1NiB0b2tlbklkKTsKCiAgICAvLyBPcHRpb25hbAogICAgLy8gZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBuYW1lKTsKICAgIC8vIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyBzeW1ib2wpOwogICAgLy8gZnVuY3Rpb24gdG9rZW5zT2ZPd25lcihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2W10gdG9rZW5JZHMpOwogICAgLy8gZnVuY3Rpb24gdG9rZW5NZXRhZGF0YSh1aW50MjU2IF90b2tlbklkLCBzdHJpbmcgX3ByZWZlcnJlZFRyYW5zcG9ydCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIGluZm9VcmwpOwogICAgLy8gRVJDLTE2NSBDb21wYXRpYmlsaXR5IChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTY1KQogICAgZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IF9pbnRlcmZhY2VJRCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChib29sKTsKfQoKCgogIAoKCgpjb250cmFjdCBFeGNoYW5nZSBpcyBPd25hYmxlIHsKCiAgICAKICAgIC8vYmV0d2VlbiAwLTEwMDAwCiAgICAvL0RlZmF1bHQgMAogICAgdWludDI1NiBwdWJsaWMgdHJhbnNGZWVDdXQgPSAgMDsKCiAgICBlbnVtIEVycm9ycyB7CiAgICAgICAgT1JERVJfRVhQSVJFRCwKICAgICAgICBPUkRFUl9GSUxMRUQsCiAgICAgICAgT1JERVJfQ0FDRUxELAogICAgICAgIElOU1VGRklDSUVOVF9CQUxBTkNFX09SX0FMTE9XQU5DRQogICAgfQoKCiAgICBzdHJ1Y3QgT3JkZXIgewogICAgICAgIGFkZHJlc3MgbWFrZXI7IC8v5Lmw5pa5CiAgICAgICAgYWRkcmVzcyB0YWtlcjsvL+WNluaWuQogICAgICAgIGFkZHJlc3MgY29udHJhY3RBZGRyOyAvL+S5sOaIv+WVhuWTgeWQiOe6puWcsOWdgAogICAgICAgIHVpbnQyNTYgbmZ0VG9rZW5JZDsvL+S5sOaIv+WVhuWTgUlECiAgICAgICAgdWludDI1NiB0b2tlbkFtb3VudDsvL+S7t+agvAogICAgICAgIHVpbnQgZXhwaXJhdGlvblRpbWVzdGFtcEluU2VjOyAvL+WIsOacn+aXtumXtAogICAgICAgIGJ5dGVzMzIgb3JkZXJIYXNoOwogICAgfQoKICAgIGV2ZW50IExvZ0ZpbGwoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIG1ha2VyLAogICAgICAgIGFkZHJlc3MgdGFrZXIsCiAgICAgICAgYWRkcmVzcyBjb250cmFjdEFkZHIsCiAgICAgICAgdWludDI1NiBuZnRUb2tlbklkLAogICAgICAgIHVpbnQgdG9rZW5BbW91bnQsCiAgICAgICAgYnl0ZXMzMiBpbmRleGVkIHRva2VucywgLy8ga2VjY2FrMjU2KG1ha2VyVG9rZW4sIHRha2VyVG9rZW4pLCBhbGxvd3Mgc3Vic2NyaWJpbmcgdG8gYSB0b2tlbiBwYWlyCiAgICAgICAgYnl0ZXMzMiBvcmRlckhhc2gKICAgICk7CgogICAgZXZlbnQgTG9nRXJyb3IodWludDggaW5kZXhlZCBlcnJvcklkLCBieXRlczMyIGluZGV4ZWQgb3JkZXJIYXNoKTsKCiAgICBmdW5jdGlvbiBnZXRPcmRlckhhc2goYWRkcmVzc1szXSBvcmRlckFkZHJlc3NlcywgdWludFs0XSBvcmRlclZhbHVlcykKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJ5dGVzMzIpCiAgICB7CiAgICAgICAgcmV0dXJuIGtlY2NhazI1NigKICAgICAgICAgICAgYWRkcmVzcyh0aGlzKSwKICAgICAgICAgICAgb3JkZXJBZGRyZXNzZXNbMF0sIC8vIG1ha2VyCiAgICAgICAgICAgIG9yZGVyQWRkcmVzc2VzWzFdLCAvLyB0YWtlcgogICAgICAgICAgICBvcmRlckFkZHJlc3Nlc1syXSwgLy8gY29udHJhY3RBZGRyCiAgICAgICAgICAgIG9yZGVyVmFsdWVzWzBdLCAgICAvLyBuZnRUb2tlbklkCiAgICAgICAgICAgIG9yZGVyVmFsdWVzWzFdLCAgICAvLyB0b2tlbkFtb3VudAogICAgICAgICAgICBvcmRlclZhbHVlc1syXSwgICAgLy8gZXhwaXJhdGlvblRpbWVzdGFtcEluU2VjCiAgICAgICAgICAgIG9yZGVyVmFsdWVzWzNdICAgIC8vIHNhbHQKICAgICAgICApOwogICAgfQoKCgogICAgZnVuY3Rpb24gaXNWYWxpZFNpZ25hdHVyZSgKICAgICAgICBhZGRyZXNzIHNpZ25lciwKICAgICAgICBieXRlczMyIGhhc2gsCiAgICAgICAgdWludDggdiwKICAgICAgICBieXRlczMyIHIsCiAgICAgICAgYnl0ZXMzMiBzKQogICAgICAgIHB1YmxpYwogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiBzaWduZXIgPT0gZWNyZWNvdmVyKAogICAgICAgICAgICBrZWNjYWsyNTYoIlx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcbjMyIiwgaGFzaCksCiAgICAgICAgICAgIHYsCiAgICAgICAgICAgIHIsCiAgICAgICAgICAgIHMKICAgICAgICApOwogICAgfQoKCgogICAgZnVuY3Rpb24gZmlsbE9yZGVyKAogICAgICAgICAgYWRkcmVzc1szXSBvcmRlckFkZHJlc3NlcywKICAgICAgICAgIHVpbnRbNF0gb3JkZXJWYWx1ZXMsCiAgICAgICAgICB1aW50OCB2LAogICAgICAgICAgYnl0ZXMzMiByLAogICAgICAgICAgYnl0ZXMzMiBzKQogICAgICAgICAgcHVibGljCiAgICAgICAgICBwYXlhYmxlCiAgICB7CgogICAgICAgIE9yZGVyIG1lbW9yeSBvcmRlciA9IE9yZGVyKHsKICAgICAgICAgICAgbWFrZXI6IG9yZGVyQWRkcmVzc2VzWzBdLAogICAgICAgICAgICB0YWtlcjogb3JkZXJBZGRyZXNzZXNbMV0sCiAgICAgICAgICAgIGNvbnRyYWN0QWRkcjogb3JkZXJBZGRyZXNzZXNbMl0sCiAgICAgICAgICAgIG5mdFRva2VuSWQ6IG9yZGVyVmFsdWVzWzBdLAogICAgICAgICAgICB0b2tlbkFtb3VudCA6IG9yZGVyVmFsdWVzWzFdLAogICAgICAgICAgICBleHBpcmF0aW9uVGltZXN0YW1wSW5TZWM6IG9yZGVyVmFsdWVzWzJdLAogICAgICAgICAgICBvcmRlckhhc2g6IGdldE9yZGVySGFzaChvcmRlckFkZHJlc3Nlcywgb3JkZXJWYWx1ZXMpCiAgICAgICAgfSk7CgoKICAgICAgICBpZiAobXNnLnZhbHVlIDwgb3JkZXIudG9rZW5BbW91bnQpIHsKICAgICAgICAgICAgTG9nRXJyb3IodWludDgoRXJyb3JzLklOU1VGRklDSUVOVF9CQUxBTkNFX09SX0FMTE9XQU5DRSksIG9yZGVyLm9yZGVySGFzaCk7CiAgICAgICAgICAgIHJldHVybiA7CiAgICAgICAgfQoKCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gb3JkZXIudG9rZW5BbW91bnQpOwogICAgICAgIHJlcXVpcmUob3JkZXIudGFrZXIgPT0gYWRkcmVzcygwKSB8fCBvcmRlci50YWtlciA9PSBtc2cuc2VuZGVyKTsKCgogICAgICAgIHJlcXVpcmUob3JkZXIudG9rZW5BbW91bnQgPiAwICk7CiAgICAgICAgcmVxdWlyZShpc1ZhbGlkU2lnbmF0dXJlKAogICAgICAgICAgICBvcmRlci5tYWtlciwKICAgICAgICAgICAgb3JkZXIub3JkZXJIYXNoLAogICAgICAgICAgICB2LAogICAgICAgICAgICByLAogICAgICAgICAgICBzCiAgICAgICAgKSk7CgogICAgICAgIGlmIChibG9jay50aW1lc3RhbXAgPj0gb3JkZXIuZXhwaXJhdGlvblRpbWVzdGFtcEluU2VjKSB7CiAgICAgICAgICAgIExvZ0Vycm9yKHVpbnQ4KEVycm9ycy5PUkRFUl9FWFBJUkVEKSwgb3JkZXIub3JkZXJIYXNoKTsKICAgICAgICAgICAgcmV0dXJuIDsKICAgICAgICB9CgoKICAgICAgICByZXF1aXJlKCB0cmFuc2ZlclZpYVByb3h5ICggb3JkZXIuY29udHJhY3RBZGRyICwgb3JkZXIubWFrZXIsbXNnLnNlbmRlciAsIG9yZGVyLm5mdFRva2VuSWQgKSAgKTsKCiAgICAgICAgdWludDI1NiB0cmFuc0N1dCA9IF9jb21wdXRlQ3V0KG9yZGVyLnRva2VuQW1vdW50KTsKICAgICAgICBvcmRlci5tYWtlci50cmFuc2ZlcihvcmRlci50b2tlbkFtb3VudCAtIHRyYW5zQ3V0KTsKICAgICAgICB1aW50MjU2IGJpZEV4Y2VzcyA9IG1zZy52YWx1ZSAtIG9yZGVyLnRva2VuQW1vdW50OwogICAgICAgIC8vcmV0dXJuCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihiaWRFeGNlc3MpOwogICAgICAgIExvZ0ZpbGwob3JkZXIubWFrZXIsbXNnLnNlbmRlcixvcmRlci5jb250cmFjdEFkZHIsb3JkZXIubmZ0VG9rZW5JZCxvcmRlci50b2tlbkFtb3VudCwga2VjY2FrMjU2KG9yZGVyLmNvbnRyYWN0QWRkciksb3JkZXIub3JkZXJIYXNoICk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVmlhUHJveHkoIGFkZHJlc3MgbmZ0QWRkciwgYWRkcmVzcyBtYWtlciAsYWRkcmVzcyB0YWtlciAsIHVpbnQyNTYgbmZ0SWQgKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIAogICAgewogICAgCiAgICAgICBFUkM3MjEobmZ0QWRkcikudHJhbnNmZXJGcm9tKCBtYWtlciwgdGFrZXIgLCBuZnRJZCApIDsKICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIGV4dGVybmFsIG9ubHlPd25lcnsKICAgICAgICB1aW50MjU2IGJhbGFuY2UgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgb3duZXIudHJhbnNmZXIoYmFsYW5jZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0VHJhbnNGZWVDdXQodWludDI1NiB2YWwpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSh2YWwgPD0gMTAwMDApOwogICAgICAgIHRyYW5zRmVlQ3V0ID0gdmFsOwogICAgfQoKICAgIGZ1bmN0aW9uIF9jb21wdXRlQ3V0KHVpbnQyNTYgX3ByaWNlKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3ByaWNlICogdHJhbnNGZWVDdXQgLyAxMDAwMDsKICAgIH0KCn0='.
	

]
