Class {
	#name : #SRT4eec479f6ca38cf69e04b875a28fbbb65754e0dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4eec479f6ca38cf69e04b875a28fbbb65754e0dc >> base64 [
	^ 'bGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICBpZihtc2cuc2VuZGVyID09IG93bmVyKXsKICAgICAgXzsKICAgIH0KICAgIGVsc2V7CiAgICAgIHJldmVydCgpOwogICAgfQogIH0KCn0KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuIAogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgLy8gcmVxdWlyZSAoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwoKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICBpZighbWludGluZ0ZpbmlzaGVkKXsKICAgICAgXzsKICAgIH0KICAgIGVsc2V7CiAgICAgIHJldmVydCgpOwogICAgfQogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2lldmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgY2FuTWludCBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksX3RvLF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKCmNvbnRyYWN0IE1PTiBpcyBNaW50YWJsZVRva2VuewogICAgCiAgICBldmVudCBCdXlTdGF0dXModWludDI1NiBzdGF0dXMpOwogICAgc3RydWN0IEJ1eXsKICAgICAgICB1aW50MjU2IGFtb3VudE9mRXRoOwogICAgICAgIHVpbnQyNTYgc3RhZ2U7CiAgICB9CiAgICAKCXN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNaWxsaW9uQ29pbiI7CglzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJNT04iOwoJdWludDI1NiBwdWJsaWMgY29uc3RhbnQgREVDSU1BTFMgPSA4OwoJdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoJYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnkgOwogICAgdWludDI1NiBwcml2YXRlIGFscmVhZHlSdW5uZWQgCT0gMDsKICAgIHVpbnQyNTYgcHJpdmF0ZSBfbm93ID0wOwogICAgdWludDI1NiBwdWJsaWMgc3RhZ2VJbmRleCA9IDA7CiAgICB1aW50MjU2W10gcHVibGljIHN0YWdlU3VtOwogICAgdWludDI1NltdIHB1YmxpYyBzdGFnZUN1cnJlbnRTdW07CiAgICB1aW50MjU2W10gcHVibGljIHN0YWdlUHJpY2U7CiAgICB1aW50MjU2W10gcHVibGljIHN0YWdlRW5kOwogICAgdWludDI1NiBwdWJsaWMgcGVyaW9kID0gMzYwMCoyNDsgLy8xIGRheQogICAgdWludDI1NiBwdWJsaWMgc3RhcnQgPSAwOwogICAgdWludDI1NiBwdWJsaWMgc3VtTXVsdGlwbGF5ZXIgPSAxMDAwMDA7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gQnV5KSBzdGFnZUJ1eXM7CiAKIG1vZGlmaWVyIHJ1bk9uY2UodWludDI1NiBiaXQpewogICAgIGlmKChhbHJlYWR5UnVubmVkICYgYml0KT09MCl7CiAgICAgICAgYWxyZWFkeVJ1bm5lZCA9IGFscmVhZHlSdW5uZWQgfCBiaXQ7ICAgCiAgICAgICAgIF87ICAgCiAgICAgfQogICAgIGVsc2V7CiAgICAgICAgIHJldmVydCgpOwogICAgIH0KIH0KIAogCiBmdW5jdGlvbiBNT04oYWRkcmVzcyBfYmVuZWYsdWludDI1NiBfc3RhcnQsdWludDI1NiBfc3VtTXVsLHVpbnQyNTYgX3BlcmlvZCkgcHVibGljewogICAgIGJlbmVmaWNpYXJ5ID0gX2JlbmVmOwogICAgIHN0YXJ0ID0gX3N0YXJ0OwogICAgIGlmKF9wZXJpb2QhPTApewogICAgICAgICBwZXJpb2QgPSBfcGVyaW9kOwogICAgIH0KICAgICBpZihfc3VtTXVsIT0wKXsKICAgICAgICAgc3VtTXVsdGlwbGF5ZXIgPSBfc3VtTXVsOwogICAgIH0KICAgICBzdGFnZVN1bS5wdXNoKDUwKnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVN1bS5wdXNoKDYwKnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVN1bS5wdXNoKDUwKnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVN1bS5wdXNoKDYwKnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVN1bS5wdXNoKDY1KnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVN1bS5wdXNoKDU1KnN1bU11bHRpcGxheWVyKTsKICAgICBzdGFnZVByaWNlLnB1c2goNTAwMCk7CiAgICAgc3RhZ2VQcmljZS5wdXNoKDMwMDApOwogICAgIHN0YWdlUHJpY2UucHVzaCgxNjY2KTsKICAgICBzdGFnZVByaWNlLnB1c2goMTUwMCk7CiAgICAgc3RhZ2VQcmljZS5wdXNoKDE0NDQpOwogICAgIHN0YWdlUHJpY2UucHVzaCgxMDAwKTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqMTUxKTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqMjQzKTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqMzM0KTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqNDU1KTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqNTQ4KTsKICAgICBzdGFnZUVuZC5wdXNoKF9zdGFydCtwZXJpb2QqNjQxKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICBzdGFnZUN1cnJlbnRTdW0ucHVzaCgwKTsKICAgICAKIH0KIAogCiBmdW5jdGlvbiBHZXRNYXhTdGFnZUV0aEFtb3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpewogICAgIAogICAgIHJldHVybiAoc3RhZ2VTdW1bc3RhZ2VJbmRleF0ubXVsKDEwKioxOCkpLmRpdihzdGFnZVByaWNlW3N0YWdlSW5kZXhdKTsKIH0KIAogCiBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgdWludDI1NiAgc3RhdHVzID0gMDsKICAgICBzdGF0dXMgPSAwOwogICAgIGJvb2wgdHJhbnNmZXJUb0JlbmVmID0gZmFsc2U7CiAgICAgdWludDI1NiAgYW1vdW50T2ZFdGhCZWZvcmVCdXkgPSAwOwogICAgIHVpbnQyNTYgIHN0YWdlTWF4RXRoQW1vdW50ID0gMDsKICAgICBpZihHZXROb3coKTxzdGFydCl7CiAgICAgICAgIHJldmVydCgpOwogICAgIH0KICAgICBpZih0aGlzLmJhbGFuY2UgPG1zZy52YWx1ZSl7CiAgICAgICAgYW1vdW50T2ZFdGhCZWZvcmVCdXkgPTAgOwogICAgIH0KICAgICBlbHNlewogICAgICAgIGFtb3VudE9mRXRoQmVmb3JlQnV5ID0gdGhpcy5iYWxhbmNlIC0gbXNnLnZhbHVlOwogICAgIH0KICAgICBzdGFnZU1heEV0aEFtb3VudCA9IChzdGFnZVN1bVtzdGFnZUluZGV4XS5tdWwoMTAqKjE4KSkuZGl2KHN0YWdlUHJpY2Vbc3RhZ2VJbmRleF0pOwogICAgICAgICB1aW50MjU2IGFtb3VudFRvUmV0dXJuID0wOwogICAgICAgICB1aW50MjU2IGFtb3VudFRvTWludCA9MDsKICAgICAgICAgQnV5IGIgPSBzdGFnZUJ1eXNbbXNnLnNlbmRlcl07CiAgICAgaWYoc3RhZ2VFbmRbc3RhZ2VJbmRleF08R2V0Tm93KCkgJiYgYW1vdW50T2ZFdGhCZWZvcmVCdXk8c3RhZ2VNYXhFdGhBbW91bnQpewogICAgICAgICBzdGF0dXMgPSAxOwogICAgICAgICAvL2N1cnJlbnQgc3RhZ2UgaXMgdW5zdWNjZXNzZnVsIG1vbmV5IHNlbmQgaW4gdHJhbnNhY3Rpb24gc2hvdWxkIGJlIHJldHVybmVkIHBsdXMgCiAgICAgICAgIC8vIGFsbCBtb25leSBzcGVudCBpbiBjdXJyZW50IHJvdW5kIAogICAgICAgICBhbW91bnRUb1JldHVybiA9IG1zZy52YWx1ZTsKICAgICAgICAgaWYoYi5zdGFnZT09c3RhZ2VJbmRleCl7CiAgICAgICAgICAgICBhbW91bnRUb1JldHVybiA9IGFtb3VudFRvUmV0dXJuLmFkZChiLmFtb3VudE9mRXRoKTsKICAgICAgICAgICAgIGJ1cm4obXNnLnNlbmRlcixiLmFtb3VudE9mRXRoLm11bChzdGFnZVByaWNlW3N0YWdlSW5kZXhdKSk7CiAgICAgICAgIH0KICAgICAgICAgc3RhZ2VCdXlzW21zZy5zZW5kZXJdLmFtb3VudE9mRXRoPTA7CiAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYW1vdW50VG9SZXR1cm4pOwogICAgIH0KICAgICBlbHNlewogICAgICAgICBzdGF0dXMgPSAyOwogICAgICAgICAKICAgICAgICAgaWYoYi5zdGFnZSE9c3RhZ2VJbmRleCl7CiAgICAgICAgICAgICBiLnN0YWdlID0gc3RhZ2VJbmRleDsKICAgICAgICAgICAgIGIuYW1vdW50T2ZFdGggPSAwOwogICAgICAgICAgICAgc3RhdHVzID0gc3RhdHVzKjEwKzM7CiAgICAgICAgIH0KICAgICAgICAgCiAgICAgICAgIGlmKHN0YWdlRW5kW3N0YWdlSW5kZXhdPm5vdyAmJiAgdGhpcy5iYWxhbmNlIDwgc3RhZ2VNYXhFdGhBbW91bnQpewogICAgICAgICAgICAvL25vdGhpbmcgc3BlY2lhbCBub3JtYWwgYnV5IAogICAgICAgICAgICAgYi5hbW91bnRPZkV0aCA9IGIuYW1vdW50T2ZFdGguYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIGFtb3VudFRvTWludCA9IG1zZy52YWx1ZS5tdWwoc3RhZ2VQcmljZVtzdGFnZUluZGV4XSk7CiAgICAgICAgICAgIHN0YXR1cyA9IHN0YXR1cyoxMCs0OwogICAgICAgICAgICBtaW50Q29pbnMobXNnLnNlbmRlcixhbW91bnRUb01pbnQpOwogICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgIGlmKCB0aGlzLmJhbGFuY2UgPj1zdGFnZU1heEV0aEFtb3VudCl7CiAgICAgICAgICAgICAgICAgLy93ZSBleGNlZWRlZCBzdGFnZSBsaW1pdAogICAgICAgICAgICAgICAgc3RhdHVzID0gc3RhdHVzKjEwKzU7CiAgICAgICAgICAgICAgICAgdHJhbnNmZXJUb0JlbmVmID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGFtb3VudFRvTWludCA9ICgoc3RhZ2VNYXhFdGhBbW91bnQgLSBhbW91bnRPZkV0aEJlZm9yZUJ1eSkubXVsKHN0YWdlUHJpY2Vbc3RhZ2VJbmRleF0pKTsKICAgICAgICAgICAgICAgIG1pbnRDb2lucyhtc2cuc2VuZGVyLGFtb3VudFRvTWludCk7CiAgICAgICAgICAgICAgICBzdGFnZUluZGV4ID0gc3RhZ2VJbmRleCsxOwogICAgICAgICAgICAgICAgaWYoc3RhZ2VJbmRleDw1KXsKICAgICAgICAgICAgICAgICAvLyAgIHN0YXR1cyA9IHN0YXR1cyoxMCs3OwogICAgICAgICAgICAgICAgICAgIC8vYnV5cyBmb3IgcmVzdCBvZiBldGggdG9rZW5zIGluIG5ldyBwcmljZXMKICAgICAgICAgICAgICAgICAgICBhbW91bnRUb01pbnQgPSAoKHRoaXMuYmFsYW5jZS5zdWIoc3RhZ2VNYXhFdGhBbW91bnQpKS5tdWwoc3RhZ2VQcmljZVtzdGFnZUluZGV4XSkpOwogICAgICAgICAgICAgICAgICAgIGIuc3RhZ2UgPSBzdGFnZUluZGV4OwogICAgICAgICAgICAgICAgICAgIGIuYW1vdW50T2ZFdGggPSh0aGlzLmJhbGFuY2Uuc3ViKHN0YWdlTWF4RXRoQW1vdW50KSk7CiAgICAgICAgICAgICAgICAgICAgbWludENvaW5zKG1zZy5zZW5kZXIsYW1vdW50VG9NaW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gc3RhdHVzKjEwKzg7CiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm5zIHJlc3Qgb2YgbW9uZXkgaWYgZHVyaW5nIGJ1eSBoYXJkY2FwIGlzIHJlYWNoZWQKICAgICAgICAgICAgICAgICAgICBhbW91bnRUb1JldHVybiA9ICh0aGlzLmJhbGFuY2Uuc3ViKHN0YWdlTWF4RXRoQW1vdW50KSk7CiAgICAgICAgICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnRUb1JldHVybik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIHN0YXR1cyA9IHN0YXR1cyoxMCs2OwogICAgICAgICAgIC8vICAgICByZXZlcnQoKSA7Ly8gbm90IGltcGxlbWVudGVkLCBzaG91bGQgbm90IGhhcHBlbmQKICAgICAgICAgICAgIH0KICAgICAgICAgfQogICAgICAgICAKICAgICB9CiAgICAgaWYodHJhbnNmZXJUb0JlbmVmKXsKICAgICAgICBiZW5lZmljaWFyeS50cmFuc2ZlcihzdGFnZU1heEV0aEFtb3VudCk7CiAgICAgfQogICAgIEJ1eVN0YXR1cyhzdGF0dXMpOwogfQogCiBmdW5jdGlvbiBHZXROb3coKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KXsKICAgIHJldHVybiBub3c7IAogfQogCiBmdW5jdGlvbiBHZXRCYWxhbmNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1Nil7CiAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKIH0KCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbWF4VG9rZW5TdXBwbHkgPSAoMTAqKigxOC1ERUNJTUFMUykpKigxMCoqNikqMzQgOyAgCiAgCiAgZnVuY3Rpb24gYnVybihhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIHByaXZhdGUgcmV0dXJucyAoYm9vbCl7CiAgICAgIF9hbW91bnQgPSBfYW1vdW50LmRpdigxMCoqMTApOwogICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfYW1vdW50KTsKICAgICAgVHJhbnNmZXIoX2Zyb20sYWRkcmVzcygwKSxfYW1vdW50KTsKICB9CiAgCiAgZnVuY3Rpb24gR2V0U3RhdHMoKXB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2LHVpbnQyNTYsdWludDI1Nix1aW50MjU2KXsKICAgICAgdWludDI1NiB0aW1lVG9FbmQgPSAwOwogICAgICB1aW50MjU2IHJvdW5kID0wOwogICAgICBpZihHZXROb3coKT5zdGFydCl7CiAgICAgICAgcm91bmQgPSBzdGFnZUluZGV4KzE7CiAgICAgICAgdGltZVRvRW5kID0gc3RhZ2VFbmRbc3RhZ2VJbmRleF0tR2V0Tm93KCk7CiAgICAgIH0KICAgICAgZWxzZXsKICAgICAgICB0aW1lVG9FbmQgPSBzdGFydC1HZXROb3coKTsKICAgICAgfQogICAgICByZXR1cm4odGltZVRvRW5kLAogICAgICAgcm91bmQsCiAgICAgICBzdGFnZVN1bVtzdGFnZUluZGV4XS5kaXYoc3RhZ2VQcmljZVtzdGFnZUluZGV4XSkubXVsKDEwMDApLAogICAgICAgR2V0TWF4U3RhZ2VFdGhBbW91bnQoKS5kaXYoMTAqKjE1KSk7CiAgfQogIAogIGZ1bmN0aW9uIG1pbnRDb2lucyhhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSAgY2FuTWludCBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgIAogICAgX2Ftb3VudCA9IF9hbW91bnQuZGl2KDEwKioxMCk7CiAgCWlmKHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTxtYXhUb2tlblN1cHBseSl7CiAgCSAgc3VwZXIubWludChfdG8sX2Ftb3VudCk7CiAgCSAgc3VwZXIubWludChhZGRyZXNzKGJlbmVmaWNpYXJ5KSwoX2Ftb3VudC5tdWwoMjApKS5kaXYoODApKTsKICAJICAKICAJICByZXR1cm4gdHJ1ZTsKICAJfQogIAllbHNlewogIAkJcmV0dXJuIGZhbHNlOyAKICAJfQogIAkKICAJcmV0dXJuIHRydWU7CiAgfQogIAogIAp9'.
	

]
