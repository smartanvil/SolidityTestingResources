Class {
	#name : #SRT0235fe624e044a05eed7a43e16e3083bc8a4287a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0235fe624e044a05eed7a43e16e3083bc8a4287a >> base64 [
	^ ''.
	

]
