Class {
	#name : #SRTce16dfc1db5f9c8edc89be5653f6f45551dc8277,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTce16dfc1db5f9c8edc89be5653f6f45551dc8277 >> base64 [
	^ ''.
	

]
