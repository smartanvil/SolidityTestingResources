Class {
	#name : #SRT3b1f334c7003d55591cbbff548ffb522b72f557c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b1f334c7003d55591cbbff548ffb522b72f557c >> base64 [
	^ ''.
	

]
