Class {
	#name : #SRT2dcd224a4c61489ff68717af79cc5553589ae74a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2dcd224a4c61489ff68717af79cc5553589ae74a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7IC8vIHNvbGhpbnQtZGlzYWJsZS1saW5lCgoKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBOb24tRnVuZ2libGUgVG9rZW5zCi8vLyBAYXV0aG9yIERpZXRlciBTaGlybGV5IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImVlOGE4YjlhOGJhZThmOTY4NzgxODM5NDhiODBjMDhkODEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PiAoaHR0cHM6Ly9naXRodWIuY29tL2RldGUpCmNvbnRyYWN0IEVSQzcyMSB7CiAgICAvLyBSZXF1aXJlZCBtZXRob2RzCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgYWRkcik7CiAgICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB0b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwoKICAgIC8vIE9wdGlvbmFsCiAgICAvLyBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIG5hbWUpOwogICAgLy8gZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIHN5bWJvbCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk9mT3duZXJCeUluZGV4KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9pbmRleCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IHRva2VuSWQpOwogICAgLy8gZnVuY3Rpb24gdG9rZW5NZXRhZGF0YSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgaW5mb1VybCk7Cn0KCgpjb250cmFjdCBTcG9ydFN0YXJUb2tlbiBpcyBFUkM3MjEgewoKICAgIC8vICoqKioqIEVWRU5UUwoKICAgIC8vIEBkZXYgVHJhbnNmZXIgZXZlbnQgYXMgZGVmaW5lZCBpbiBjdXJyZW50IGRyYWZ0IG9mIEVSQzcyMS4KICAgIC8vICBvd25lcnNoaXAgaXMgYXNzaWduZWQsIGluY2x1ZGluZyBiaXJ0aHMuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CgoKCiAgICAvLyAqKioqKiBTVE9SQUdFCgogICAgLy8gQGRldiBBIG1hcHBpbmcgZnJvbSB0b2tlbiBJRHMgdG8gdGhlIGFkZHJlc3MgdGhhdCBvd25zIHRoZW0uIEFsbCB0b2tlbnMgaGF2ZQogICAgLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHRva2VuSW5kZXhUb093bmVyOwoKICAgIC8vIEBkZXYgQSBtYXBwaW5nIGZyb20gb3duZXIgYWRkcmVzcyB0byBjb3VudCBvZiB0b2tlbnMgdGhhdCBhZGRyZXNzIG93bnMuCiAgICAvLyAgVXNlZCBpbnRlcm5hbGx5IGluc2lkZSBiYWxhbmNlT2YoKSB0byByZXNvbHZlIG93bmVyc2hpcCBjb3VudC4KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBvd25lcnNoaXBUb2tlbkNvdW50OwoKICAgIC8vIEBkZXYgQSBtYXBwaW5nIGZyb20gVG9rZW5JRHMgdG8gYW4gYWRkcmVzcyB0aGF0IGhhcyBiZWVuIGFwcHJvdmVkIHRvIGNhbGwKICAgIC8vICB0cmFuc2ZlckZyb20oKS4gRWFjaCBUb2tlbiBjYW4gb25seSBoYXZlIG9uZSBhcHByb3ZlZCBhZGRyZXNzIGZvciB0cmFuc2ZlcgogICAgLy8gIGF0IGFueSB0aW1lLiBBIHplcm8gdmFsdWUgbWVhbnMgbm8gYXBwcm92YWwgaXMgb3V0c3RhbmRpbmcuCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyB0b2tlbkluZGV4VG9BcHByb3ZlZDsKCiAgICAvLyBBZGRpdGlvbmFsIHRva2VuIGRhdGEKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYnl0ZXMzMikgcHVibGljIHRva2VuSW5kZXhUb0RhdGE7CgogICAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIG1hc3RlckNvbnRyYWN0QWRkcmVzczsKCiAgICB1aW50MjU2IHB1YmxpYyBwcm9tb0NyZWF0ZWRDb3VudDsKCgoKICAgIC8vICoqKioqIERBVEFUWVBFUwoKICAgIHN0cnVjdCBUb2tlbiB7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICB9CgogICAgVG9rZW5bXSBwcml2YXRlIHRva2VuczsKCgoKICAgIC8vICoqKioqIEFDQ0VTUyBNT0RJRklFUlMKCiAgICBtb2RpZmllciBvbmx5Q0VPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlNYXN0ZXJDb250cmFjdCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWFzdGVyQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKCgogICAgLy8gKioqKiogQ09OU1RSVUNUT1IKCiAgICBmdW5jdGlvbiBTcG9ydFN0YXJUb2tlbigpIHB1YmxpYyB7CiAgICAgICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgoKCiAgICAvLyAqKioqKiBQUklWSUxFR0VTIFNFVFRJTkcgRlVOQ1RJT05TCgogICAgZnVuY3Rpb24gc2V0Q0VPKGFkZHJlc3MgX25ld0NFTykgcHVibGljIG9ubHlDRU8gewogICAgICAgIHJlcXVpcmUoX25ld0NFTyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgY2VvQWRkcmVzcyA9IF9uZXdDRU87CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWFzdGVyQ29udHJhY3QoYWRkcmVzcyBfbmV3TWFzdGVyQ29udHJhY3QpIHB1YmxpYyBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdNYXN0ZXJDb250cmFjdCAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgbWFzdGVyQ29udHJhY3RBZGRyZXNzID0gX25ld01hc3RlckNvbnRyYWN0OwogICAgfQoKCgogICAgLy8gKioqKiogUFVCTElDIEZVTkNUSU9OUwoKICAgIC8vIEBub3RpY2UgUmV0dXJucyBhbGwgdGhlIHJlbGV2YW50IGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgdG9rZW4uCiAgICAvLyBAcGFyYW0gX3Rva2VuSWQgVGhlIHRva2VuSWQgb2YgdGhlIHRva2VuIG9mIGludGVyZXN0LgogICAgZnVuY3Rpb24gZ2V0VG9rZW4odWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICBhZGRyZXNzIG93bmVyCiAgICApIHsKICAgICAgICBUb2tlbiBzdG9yYWdlIHRva2VuID0gdG9rZW5zW190b2tlbklkXTsKICAgICAgICB0b2tlbk5hbWUgPSB0b2tlbi5uYW1lOwogICAgICAgIG93bmVyID0gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdOwogICAgfQoKICAgIC8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIHdob3NlIHNwb3J0IHN0YXIgdG9rZW5zIHdlIGFyZSBpbnRlcmVzdGVkIGluLgogICAgLy8gQGRldiBUaGlzIG1ldGhvZCBNVVNUIE5FVkVSIGJlIGNhbGxlZCBieSBzbWFydCBjb250cmFjdCBjb2RlLiBGaXJzdCwgaXQncyBmYWlybHkKICAgIC8vICBleHBlbnNpdmUgKGl0IHdhbGtzIHRoZSBlbnRpcmUgVG9rZW5zIGFycmF5IGxvb2tpbmcgZm9yIHRva2VucyBiZWxvbmdpbmcgdG8gb3duZXIpLAogICAgLy8gIGJ1dCBpdCBhbHNvIHJldHVybnMgYSBkeW5hbWljIGFycmF5LCB3aGljaCBpcyBvbmx5IHN1cHBvcnRlZCBmb3Igd2ViMyBjYWxscywgYW5kCiAgICAvLyAgbm90IGNvbnRyYWN0LXRvLWNvbnRyYWN0IGNhbGxzLgogICAgZnVuY3Rpb24gdG9rZW5zT2ZPd25lcihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NltdIG93bmVyVG9rZW5zKSB7CiAgICAgICAgdWludDI1NiB0b2tlbkNvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgaWYgKHRva2VuQ291bnQgPT0gMCkgewogICAgICAgICAgICAvLyBSZXR1cm4gYW4gZW1wdHkgYXJyYXkKICAgICAgICAgICAgcmV0dXJuIG5ldyB1aW50MjU2W10oMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdWludDI1NltdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludDI1NltdKHRva2VuQ291bnQpOwogICAgICAgICAgICB1aW50MjU2IHRvdGFsVG9rZW5zID0gdG90YWxTdXBwbHkoKTsKICAgICAgICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICAgICAgICB1aW50MjU2IHRva2VuSWQ7CiAgICAgICAgICAgIGZvciAodG9rZW5JZCA9IDA7IHRva2VuSWQgPD0gdG90YWxUb2tlbnM7IHRva2VuSWQrKykgewogICAgICAgICAgICAgICAgaWYgKHRva2VuSW5kZXhUb093bmVyW3Rva2VuSWRdID09IF9vd25lcikgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleF0gPSB0b2tlbklkOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdEluZGV4Kys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9rZW5EYXRhKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJ5dGVzMzIgdG9rZW5EYXRhKSB7CiAgICAgICAgcmV0dXJuIHRva2VuSW5kZXhUb0RhdGFbX3Rva2VuSWRdOwogICAgfQoKCgogICAgLy8gKioqKiogRVJDLTcyMSBGVU5DVElPTlMKCiAgICAvLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgdG9rZW4gdmlhIHRha2VPd25lcnNoaXAoKSBhbmQgdHJhbnNmZXJGcm9tKCkuCiAgICAvLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogICAgLy8gIGNsZWFyIGFsbCBhcHByb3ZhbHMuCiAgICAvLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogICAgICAgIC8vIENhbGxlciBtdXN0IG93biB0b2tlbi4KICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIHRva2VuSW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9IF90bzsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8gRm9yIHF1ZXJ5aW5nIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQKICAgIC8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZm9yIGJhbGFuY2UgcXVlcnkKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIG93bmVyc2hpcFRva2VuQ291bnRbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuICJDcnlwdG9TcG9ydFN0YXJzIjsKICAgIH0KCiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gIlNwb3J0U3RhclRva2VuIjsKICAgIH0KCiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIEZvciBxdWVyeWluZyBvd25lciBvZiB0b2tlbgogICAgLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbklEIGZvciBvd25lciBpbnF1aXJ5CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpCiAgICB7CiAgICAgICAgb3duZXIgPSB0b2tlbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShvd25lciAhPSBhZGRyZXNzKDApKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIEFsbG93IHByZS1hcHByb3ZlZCB1c2VyIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgdG9rZW4KICAgIC8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAgIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgICAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBhZGRyZXNzIG9sZE93bmVyID0gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdOwoKICAgICAgICAvLyBTYWZldHkgY2hlY2sgdG8gcHJldmVudCBhZ2FpbnN0IGFuIHVuZXhwZWN0ZWQgMHgwIGRlZmF1bHQuCiAgICAgICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAgICAgLy8gTWFraW5nIHN1cmUgdHJhbnNmZXIgaXMgYXBwcm92ZWQKICAgICAgICByZXF1aXJlKF9hcHByb3ZlZChuZXdPd25lciwgX3Rva2VuSWQpKTsKCiAgICAgICAgX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vIEZvciBxdWVyeWluZyB0b3RhbFN1cHBseSBvZiB0b2tlbgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsKSB7CiAgICAgICAgcmV0dXJuIHRva2Vucy5sZW5ndGg7CiAgICB9CgogICAgLy8gT3duZXIgaW5pdGF0ZXMgdGhlIHRyYW5zZmVyIG9mIHRoZSB0b2tlbiB0byBhbm90aGVyIGFjY291bnQKICAgIC8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZCB0by4KICAgIC8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKCiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vIFRoaXJkLXBhcnR5IGluaXRpYXRlcyB0cmFuc2ZlciBvZiB0b2tlbiBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgIC8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIGZyb20uCiAgICAvLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgdG8uCiAgICAvLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfb3ducyhfZnJvbSwgX3Rva2VuSWQpKTsKICAgICAgICByZXF1aXJlKF9hcHByb3ZlZChfdG8sIF90b2tlbklkKSk7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzc05vdE51bGwoX3RvKSk7CgogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgoKCiAgICAvLyBPTkxZIE1BU1RFUiBDT05UUkFDVCBGVU5DVElPTlMKCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbihzdHJpbmcgX25hbWUsIGFkZHJlc3MgX293bmVyKSBwdWJsaWMgb25seU1hc3RlckNvbnRyYWN0IHJldHVybnMgKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgICAgICByZXR1cm4gX2NyZWF0ZVRva2VuKF9uYW1lLCBfb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZU93bmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU1hc3RlckNvbnRyYWN0IHsKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFRva2VuRGF0YSh1aW50MjU2IF90b2tlbklkLCBieXRlczMyIHRva2VuRGF0YSkgcHVibGljIG9ubHlNYXN0ZXJDb250cmFjdCB7CiAgICAgICAgdG9rZW5JbmRleFRvRGF0YVtfdG9rZW5JZF0gPSB0b2tlbkRhdGE7CiAgICB9CgoKCiAgICAvLyBQUklWQVRFIEZVTkNUSU9OUwoKICAgIC8vIFNhZmV0eSBjaGVjayBvbiBfdG8gYWRkcmVzcyB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIGZ1bmN0aW9uIF9hZGRyZXNzTm90TnVsbChhZGRyZXNzIF90bykgcHJpdmF0ZSBwdXJlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gX3RvICE9IGFkZHJlc3MoMCk7CiAgICB9CgogICAgLy8gRm9yIGNoZWNraW5nIGFwcHJvdmFsIG9mIHRyYW5zZmVyIGZvciBhZGRyZXNzIF90bwogICAgZnVuY3Rpb24gX2FwcHJvdmVkKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b2tlbkluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPT0gX3RvOwogICAgfQoKICAgIC8vIEZvciBjcmVhdGluZyBUb2tlbgogICAgZnVuY3Rpb24gX2NyZWF0ZVRva2VuKHN0cmluZyBfbmFtZSwgYWRkcmVzcyBfb3duZXIpIHByaXZhdGUgcmV0dXJucyAodWludDI1NiBfdG9rZW5JZCkgewogICAgICAgIFRva2VuIG1lbW9yeSBfdG9rZW4gPSBUb2tlbih7CiAgICAgICAgICAgIG5hbWU6IF9uYW1lCiAgICAgICAgICAgIH0pOwogICAgICAgIHVpbnQyNTYgbmV3VG9rZW5JZCA9IHRva2Vucy5wdXNoKF90b2tlbikgLSAxOwoKICAgICAgICAvLyBJdCdzIHByb2JhYmx5IG5ldmVyIGdvaW5nIHRvIGhhcHBlbiwgNCBiaWxsaW9uIHRva2VucyBhcmUgQSBMT1QsIGJ1dAogICAgICAgIC8vIGxldCdzIGp1c3QgYmUgMTAwJSBzdXJlIHdlIG5ldmVyIGxldCB0aGlzIGhhcHBlbi4KICAgICAgICByZXF1aXJlKG5ld1Rva2VuSWQgPT0gdWludDI1Nih1aW50MzIobmV3VG9rZW5JZCkpKTsKCiAgICAgICAgLy8gVGhpcyB3aWxsIGFzc2lnbiBvd25lcnNoaXAsIGFuZCBhbHNvIGVtaXQgdGhlIFRyYW5zZmVyIGV2ZW50IGFzCiAgICAgICAgLy8gcGVyIEVSQzcyMSBkcmFmdAogICAgICAgIF90cmFuc2ZlcihhZGRyZXNzKDApLCBfb3duZXIsIG5ld1Rva2VuSWQpOwoKICAgICAgICByZXR1cm4gbmV3VG9rZW5JZDsKICAgIH0KCiAgICAvLyBDaGVjayBmb3IgdG9rZW4gb3duZXJzaGlwCiAgICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIGNsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBjbGFpbWFudCA9PSB0b2tlbkluZGV4VG9Pd25lcltfdG9rZW5JZF07CiAgICB9CgogICAgLy8gQGRldiBBc3NpZ25zIG93bmVyc2hpcCBvZiBhIHNwZWNpZmljIFRva2VuIHRvIGFuIGFkZHJlc3MuCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgewogICAgICAgIC8vIFNpbmNlIHRoZSBudW1iZXIgb2YgdG9rZW5zIGlzIGNhcHBlZCB0byAyXjMyIHdlIGNhbid0IG92ZXJmbG93IHRoaXMKICAgICAgICBvd25lcnNoaXBUb2tlbkNvdW50W190b10rKzsKICAgICAgICAvL3RyYW5zZmVyIG93bmVyc2hpcAogICAgICAgIHRva2VuSW5kZXhUb093bmVyW190b2tlbklkXSA9IF90bzsKCiAgICAgICAgLy8gV2hlbiBjcmVhdGluZyBuZXcgdG9rZW5zIF9mcm9tIGlzIDB4MCwgYnV0IHdlIGNhbid0IGFjY291bnQgdGhhdCBhZGRyZXNzLgogICAgICAgIGlmIChfZnJvbSAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG93bmVyc2hpcFRva2VuQ291bnRbX2Zyb21dLS07CiAgICAgICAgICAgIC8vIGNsZWFyIGFueSBwcmV2aW91c2x5IGFwcHJvdmVkIG93bmVyc2hpcCBleGNoYW5nZQogICAgICAgICAgICBkZWxldGUgdG9rZW5JbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdOwogICAgICAgIH0KCiAgICAgICAgLy8gRW1pdCB0aGUgdHJhbnNmZXIgZXZlbnQuCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQp9'.
	

]
