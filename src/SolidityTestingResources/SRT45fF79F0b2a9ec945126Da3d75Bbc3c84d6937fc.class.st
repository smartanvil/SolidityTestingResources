Class {
	#name : #SRT45fF79F0b2a9ec945126Da3d75Bbc3c84d6937fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT45fF79F0b2a9ec945126Da3d75Bbc3c84d6937fc >> base64 [
	^ ''.
	

]
