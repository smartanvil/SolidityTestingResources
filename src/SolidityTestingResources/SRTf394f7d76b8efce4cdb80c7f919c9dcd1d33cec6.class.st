Class {
	#name : #SRTf394f7d76b8efce4cdb80c7f919c9dcd1d33cec6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf394f7d76b8efce4cdb80c7f919c9dcd1d33cec6 >> base64 [
	^ ''.
	

]
