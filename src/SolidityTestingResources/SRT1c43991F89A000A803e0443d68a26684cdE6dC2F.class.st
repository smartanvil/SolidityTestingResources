Class {
	#name : #SRT1c43991F89A000A803e0443d68a26684cdE6dC2F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c43991F89A000A803e0443d68a26684cdE6dC2F >> base64 [
	^ ''.
	

]
