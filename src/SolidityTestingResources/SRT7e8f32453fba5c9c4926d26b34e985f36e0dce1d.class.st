Class {
	#name : #SRT7e8f32453fba5c9c4926d26b34e985f36e0dce1d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e8f32453fba5c9c4926d26b34e985f36e0dce1d >> base64 [
	^ ''.
	

]
