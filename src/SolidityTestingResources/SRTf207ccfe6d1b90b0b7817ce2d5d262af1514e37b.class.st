Class {
	#name : #SRTf207ccfe6d1b90b0b7817ce2d5d262af1514e37b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf207ccfe6d1b90b0b7817ce2d5d262af1514e37b >> base64 [
	^ ''.
	

]
