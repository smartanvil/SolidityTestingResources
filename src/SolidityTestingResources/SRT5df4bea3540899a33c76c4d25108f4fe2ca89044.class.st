Class {
	#name : #SRT5df4bea3540899a33c76c4d25108f4fe2ca89044,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5df4bea3540899a33c76c4d25108f4fe2ca89044 >> base64 [
	^ ''.
	

]
