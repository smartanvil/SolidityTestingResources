Class {
	#name : #SRT72D32ac1c5E66BfC5b08806271f8eEF915545164,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT72D32ac1c5E66BfC5b08806271f8eEF915545164 >> base64 [
	^ ''.
	

]
