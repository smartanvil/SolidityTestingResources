Class {
	#name : #SRT790284cc4910343fd936277c002791ed620238d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT790284cc4910343fd936277c002791ed620238d9 >> base64 [
	^ ''.
	

]
