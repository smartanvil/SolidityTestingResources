Class {
	#name : #SRT809faaf63ee61b9133102b4fbe560219b534b6e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT809faaf63ee61b9133102b4fbe560219b534b6e4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8qCkF1dGhvcjogICAgIHd3dy5wdXJwbGV0aHJvbmUuY29tCkVtYWlsOiAgICAgIDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iOTFmMGViZjhlYmQxZTFlNGUzZTFmZGY0ZTVmOWUzZmVmZmY0YmZmMmZlZmMiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+CgoKKi8KLy8gTWF0aCBjb250cmFjdCB0byBhdm9pZCBvdmVyZmxvdyBhbmQgdW5kZXJmbG93IG9mIHZhcmlhYmxlcwpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKfQovLyBBYnN0cmFjY3Qgb2YgRVJDMjAgVG9rZW4KY29udHJhY3QgVG9rZW4gewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKCi8qICBJbXBsZW1lbnRhdGlvbiBvZiBFUkMyMCB0b2tlbiBzdGFuZGFyZCBmdW5jdGlvbnMgKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCi8qKgoqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgoqIGFjY291bnQuCiovCmZ1bmN0aW9uIE93bmFibGUoKSB7CiAgb3duZXIgPSBtc2cuc2VuZGVyOwp9Ci8qKgoqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KKi8KbW9kaWZpZXIgb25seU93bmVyKCkgewogIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7Cl87Cn0KLyoqCiogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgoqLwpmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQp9Cgp9CgoKY29udHJhY3QgUFBDVG9rZW4gaXMgU3RhbmRhcmRUb2tlbixPd25hYmxlLCBTYWZlTWF0aCB7CgogICAgLy8gY3Jvd2RzYWxlIHBhcmFtZXRlcnMKICAgIHN0cmluZyAgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiUHVycGxlQ29pbiI7CiAgICBzdHJpbmcgIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiUFBDIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgIHB1YmxpYyB2ZXJzaW9uID0gIjEuMCI7CiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBldGhGdW5kRGVwb3NpdD0gMHgyMEQ5MDUzZDNmN2ZjY0MwNjljOWE4ZTdkREVmNTM3NENEMjJiNkM4OyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBvc2l0IGFkZHJlc3MgZm9yIEVUSAogICAgYm9vbCBwdWJsaWMgZW1lcmdlbmN5RmxhZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBTd2l0Y2hlZCB0byB0cnVlIGluICBjcm93bnNhbGUgZW5kICBzdGF0ZQogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0YXJ0QmxvY2s7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBTdGFydGluZyBibG9ja251bWJlcgogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ0VuZEJsb2NrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBFbmRpbmcgYmxvY2tudW1iZXIKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1pblRva2VuUHVyY2hhc2VBbW91bnQ9IC4wMDggZXRoZXI7ICAvLyAgICAgTWluaW11bSBwdXJjaGFzZQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5QcmVTYWxlUmF0ZT04MDA7ICAgIC8vIFBQQ0NvaW4gcGVyIDEgRVRIIGR1cmluZyBwcmVzYWxlCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyb3dkc2FsZVJhdGU9NTAwOyAvLyAgUFBDQ29pbiBwZXIgMSBFVEggZHVyaW5nIGNyb3dkc2FsZQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvblByZVNhbGVDYXAgPSAgMTAgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOy8vIDEwIG1pbGxpb24gdG9rZW4gY2FwIGZvciBwcmVzYWxlCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gIDEwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7ICAgICAgLy8gIDEwMCBtaWxsaW9uIHRva2VuIGdlbmVyYXRlZAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgcHJlU2FsZUJsb2NrTnVtYmVyID0gMTY5NDU3OwogICAgdWludDI1NiBwdWJsaWMgZmluYWxCbG9ja051bWJlciA9MzcwNzExOwoKCiAgICAvLyBldmVudHMKICAgIGV2ZW50IENyZWF0ZVBQQyhhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7Ly8gUmV0dXJuIGFkZHJlc3Mgb2YgYnV5ZXIgYW5kIHB1cmNoYXNlIHRva2VuCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBfdG8sdWludDI1NiBfdmFsdWUpOyAgICAgLy8gIFJldXRuIGFkZHJlc3MgdG8gd2hpY2ggd2Ugc2VuZCB0aGUgbWludCB0b2tlbiBhbmQgdG9rZW4gYXNzaWduZWQuCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gUFBDVG9rZW4oKXsKICAgICAgZW1lcmdlbmN5RmxhZyA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFsc2UgYXQgaW5pdGlhbGl6YXRpb24gd2lsbCBiZSBmYWxzZSBkdXJpbmcgSUNPCiAgICAgIGZ1bmRpbmdTdGFydEJsb2NrID0gYmxvY2subnVtYmVyOyAgICAgICAgICAgICAgICAgLy8gIEN1cnJlbnQgZGVwbG95aW5nIGJsb2NrIG51bWJlciBpcyB0aGUgc3RhcnRpbmcgYmxvY2sgbnVtYmVyIGZvciBJQ08KICAgICAgZnVuZGluZ0VuZEJsb2NrPXNhZmVBZGQoZnVuZGluZ1N0YXJ0QmxvY2ssZmluYWxCbG9ja051bWJlcik7ICAvLyAgIEVuZGluZyB0aW1lIGRlcGVuZGluZyB1cG9uIHRoZSBibG9jayBudW1iZXIKICAgIH0KCiAgICAvKioKICAgICogQGRldiBjcmVhdGVzIG5ldyBQUEMgdG9rZW5zCiAgICAqICAgICAgSXQgaXMgYSBpbnRlcm5hbCBmdW5jdGlvbiBpdCB3aWxsIGJlIGNhbGxlZCBieSBmYWxsYmFjayBmdW5jdGlvbiBvciBidXlUb2tlbiBmdW5jdGlvbnMuCiAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgaW50ZXJuYWwgIHsKICAgICAgaWYgKGVtZXJnZW5jeUZsYWcpIHJldmVydCgpOyAgICAgICAgICAgICAgICAgICAgIC8vICBSZXZlcnQgd2hlbiB0aGUgc2FsZSBpcyBvdmVyIGJlZm9yZSB0aW1lIGFuZCBlbWVyZ2VuY3lGbGFnIGlzIHRydWUuCiAgICAgIGlmIChibG9jay5udW1iZXIgPiBmdW5kaW5nRW5kQmxvY2spIHJldmVydCgpOyAgIC8vICAgSWYgdGhlIGJsb2NrbnVtYmVyIGV4Y2VlZCB0aGUgZW5kaW5nIGJsb2NrIGl0IHdpbGwgcmV2ZXJ0CiAgICAgIGlmIChtc2cudmFsdWU8bWluVG9rZW5QdXJjaGFzZUFtb3VudClyZXZlcnQoKTsgIC8vICAgIElmIHNvbWVvbmUgc2VuZCAwLjA4IGV0aGVyIGl0IHdpbGwgZmFpbAogICAgICB1aW50MjU2IHRva2VuRXhjaGFuZ2VSYXRlPXRva2VuUmF0ZSgpOyAgICAgICAgLy8gICAgIEl0IHdpbGwgZ2V0IHZhbHVlIGRlcGVuZGluZyB1cG9uIGJsb2NrIG51bWJlciBhbmQgcHJlc2FsZSBjYXAKICAgICAgdWludDI1NiB0b2tlbnMgPSBzYWZlTXVsdChtc2cudmFsdWUsIHRva2VuRXhjaGFuZ2VSYXRlKTsvLyAgQ2FsY3VsYXRpbmcgbnVtYmVyIG9mIHRva2VuIGZvciBzZW5kZXIKICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCB0b2tlbnMpOyAgICAgICAgICAgIC8vICAgQWRkIHRva2VuIHRvIHRvdGFsIHN1cHBseQogICAgICBpZih0b3RhbFN1cHBseT50b2tlbkNyZWF0aW9uQ2FwKXJldmVydCgpOyAgICAgICAgICAgICAvLyAgICBDaGVjayB0aGUgdG90YWwgc3VwcGx5IGlmIGl0IGlzIG1vcmUgdGhlbiBoYXJkY2FwIGl0IHdpbGwgdGhyb3cKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zOyAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgQWRkaW5nIHRva2VuIHRvIHNlbmRlciBhY2NvdW50CiAgICAgIGZvcndhcmRmdW5kcygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgIGZvcndhcmRmdW5kcyB0byB0aGUgb3duZXIKICAgICAgQ3JlYXRlUFBDKG1zZy5zZW5kZXIsIHRva2Vucyk7ICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgTG9ncyBzZW5kZXIgYWRkcmVzcyBhbmQgIHRva2VuIGNyZWF0aW9uCiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgcGVvcGxlIGNhbiBhY2Nlc3MgY29udHJhY3QgYW5kIGNob29zZSBidXlUb2tlbiBmdW5jdGlvbiB0byBnZXQgdG9rZW4KICAgICpJdCBpcyB1c2VkIGJ5IHVzaW5nIG15ZXRoZXJ3YWxsZXQKICAgICpJdCBpcyBhIHBheWFibGUgZnVuY3Rpb24gaXQgd2lsbCBiZSBjYWxsZWQgYnkgc2VuZGVyLgogICAgKi8KICAgIGZ1bmN0aW9uIGJ1eVRva2VuKCkgcGF5YWJsZSBleHRlcm5hbHsKICAgICAgY3JlYXRlVG9rZW5zKCk7ICAgLy8gVGhpcyB3aWxsIGNhbGwgdGhlIGludGVybmFsIGNyZWF0ZVRva2VuIGZ1bmN0aW9uIHRvIGdldCB0b2tlbgogICAgfQoKICAgIC8qKgogICAgKiBAZGV2ICAgICAgaXQgaXMgYSBpbnRlcm5hbCBmdW5jdGlvbiBjYWxsZWQgYnkgY3JlYXRlIGZ1bmN0aW9uIHRvIGdldCB0aGUgYW1vdW50IGFjY29yZGluZyB0byB0aGUgYmxvY2tudW1iZXIuCiAgICAqIEByZXR1cm4gICBJdCB3aWxsIHJldHVybiB0aGUgdG9rZW4gcHJpY2UgYXQgYSBwYXJ0aWN1bGFyIHRpbWUuCiAgICAqLwogICAgZnVuY3Rpb24gdG9rZW5SYXRlKCkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiBfdG9rZW5QcmljZSl7CiAgICAgIC8vIEl0IGlzIGEgcHJlc2FsZSBpdCB3aWxsIHJldHVybiBwcmljZSBmb3IgcHJlc2FsZQogICAgICBpZihibG9jay5udW1iZXI8c2FmZUFkZChmdW5kaW5nU3RhcnRCbG9jayxwcmVTYWxlQmxvY2tOdW1iZXIpJiYodG90YWxTdXBwbHk8dG9rZW5DcmVhdGlvblByZVNhbGVDYXApKXsKICAgICAgICAgIHJldHVybiB0b2tlblByZVNhbGVSYXRlOwogICAgICAgIH1lbHNlCiAgICAgICAgICAgIHJldHVybiB0b2tlbkNyb3dkc2FsZVJhdGU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgICAgIGl0IHdpbGwgIGFzc2lnbiB0b2tlbiB0byBhIHBhcnRpY3VsYXIgYWRkcmVzcyBieSBvd25lciBvbmx5CiAgICAqIEBwYXJhbSAgIF90byB0aGUgYWRkcmVzcyB3aG9tIHlvdSB3YW50IHRvIHNlbmQgdG9rZW4gdG8KICAgICogQHBhcmFtICAgX2Ftb3VudCB0aGUgYW1vdW50IHlvdSB3YW50IHRvIHNlbmQKICAgICogQHJldHVybiAgSXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiBzdWNjZXNzLgogICAgKi8KICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgaWYgKGVtZXJnZW5jeUZsYWcpIHJldmVydCgpOwogICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksX2Ftb3VudCk7Ly8gQWRkIHRoZSBtaW50ZWQgdG9rZW4gdG8gdG90YWwgc3VwcHkKICAgICAgaWYodG90YWxTdXBwbHk+dG9rZW5DcmVhdGlvbkNhcClyZXZlcnQoKTsKICAgICAgYmFsYW5jZXNbX3RvXSArPV9hbW91bnQ7ICAgICAgICAgICAgICAgICAvLyAgIEFkZGluZyB0b2tlbiB0byB0aGUgaW5wdXQgYWRkcmVzcwogICAgICBNaW50KF90bywgX2Ftb3VudCk7ICAgICAgICAgICAgICAgICAgICAgLy8gICAgTG9nIHRoZSBtaW50IHdpdGggYWRkcmVzcyBhbmQgdG9rZW4gZ2l2ZW4gdG8gcGFydGljdWxhciBhZGRyZXNzCiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2ICAgICBpdCB3aWxsIGNoYW5nZSB0aGUgZW5kaW5nIGRhdGUgb2YgaWNvIGFuZCBhY2Nlc3MgYnkgb3duZXIgb25seQogICAgKiBAcGFyYW0gICBfbmV3QmxvY2sgZW50ZXIgdGhlIGZ1dHVyZSBibG9ja251bWJlcgogICAgKiBAcmV0dXJuICBJdCB3aWxsIHJldHVybiB0aGUgYmxvY2tudW1iZXIKICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VFbmRCbG9jayh1aW50MjU2IF9uZXdCbG9jaykgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKHVpbnQyNTYgX2VuZGJsb2NrICkKICAgIHsgICAvLyB3ZSBhcmUgZXhwZWN0aW5nIHRoYXQgb3duZXIgd2lsbCBpbnB1dCBudW1iZXIgZ3JlYXRlciB0aGFuIGN1cnJlbnQgYmxvY2suCiAgICAgICAgcmVxdWlyZShfbmV3QmxvY2sgPiBmdW5kaW5nU3RhcnRCbG9jayk7CiAgICAgICAgZnVuZGluZ0VuZEJsb2NrID0gX25ld0Jsb2NrOyAgICAgICAgIC8vIE5ldyBibG9jayBpcyBhc3NpZ25lZCB0byBleHRlbmQgdGhlIENyb3dkIFNhbGUgdGltZQogICAgICAgIHJldHVybiBmdW5kaW5nRW5kQmxvY2s7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgICBpdCB3aWxsIGxldCBPd25lciB3aXRoZHJhd24gZXRoZXIgYXQgYW55IHRpbWUgZHVyaW5nIHRoZSBJQ08KICAgICoqLwogICAgZnVuY3Rpb24gZHJhaW4oKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGlmICghZXRoRnVuZERlcG9zaXQuc2VuZCh0aGlzLmJhbGFuY2UpKSByZXZlcnQoKTsvLyBJdCB3aWxsIHJldmVydCBpZiB0cmFuc2ZlciBmYWlscy4KICAgIH0KCiAgICAKICAgIAogICAgLy8gQXV0b21hdGUgdGhlIEVUSCBkcmFpbgogICAgCiAgICBmdW5jdGlvbiBmb3J3YXJkZnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgIGlmICghZXRoRnVuZERlcG9zaXQuc2VuZCh0aGlzLmJhbGFuY2UpKSByZXZlcnQoKTsgLy8gSXQgd2lsbCByZXZlcnQgaWYgdHJhbnNmZXIgZmFpbHMuCiAgICAgICAgCiAgICAgICAgCiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2ICBpdCB3aWxsIGxldCBPd25lciBTdG9wIHRoZSBjcm93ZHNhbGUgYW5kIG1pbnQgZnVuY3Rpb24gdG8gd29yay4KICAgICoKICAgICovCiAgICAKICAgIGZ1bmN0aW9uIGVtZXJnZW5jeVRvZ2dsZSgpIGV4dGVybmFsIG9ubHlPd25lcnsKICAgICAgZW1lcmdlbmN5RmxhZyA9ICFlbWVyZ2VuY3lGbGFnOwogICAgfQoKICAgIC8vIEZhbGxiYWNrIGZ1bmN0aW9uIGxldCB1c2VyIHNlbmQgZXRoZXIgd2l0aG91dCBjYWxsaW5nIHRoZSBidXkgZnVuY3Rpb24uCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICBjcmVhdGVUb2tlbnMoKTsKCiAgICB9CgoKfQ=='.
	

]
