Class {
	#name : #SRT849c2ea2a8f0ed0fe6d28b17fa0f779d6a45dff1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT849c2ea2a8f0ed0fe6d28b17fa0f779d6a45dff1 >> base64 [
	^ 'bGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cn0KCgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCmNvbnRyYWN0IENlcnRpZmllciB7CiAgICBldmVudCBDb25maXJtZWQoYWRkcmVzcyBpbmRleGVkIHdobyk7CiAgICBldmVudCBSZXZva2VkKGFkZHJlc3MgaW5kZXhlZCB3aG8pOwogICAgZnVuY3Rpb24gY2VydGlmaWVkKGFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGdldChhZGRyZXNzLCBzdHJpbmcpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChieXRlczMyKTsKICAgIGZ1bmN0aW9uIGdldEFkZHJlc3MoYWRkcmVzcywgc3RyaW5nKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiBnZXRVaW50KGFkZHJlc3MsIHN0cmluZykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwp9Cgpjb250cmFjdCBFRFVUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBDZXJ0aWZpZXIgcHVibGljIGNlcnRpZmllcjsKCiAgICAvLyBFVkVOVFMKICAgIGV2ZW50IENyZWF0ZWRFRFUoYWRkcmVzcyBpbmRleGVkIF9jcmVhdG9yLCB1aW50MjU2IF9hbW91bnRPZkVEVSk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwoKICAgIC8vIEdFTkVSQUwgSU5GT1JNQVRJT04gQUJPVVQgVEhFIFRPS0VOCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRURVIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkVEVSI7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDQ7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wIjsKCiAgICAvLyBDT05TVEFOVFMKICAgIC8vIFB1cmNoYXNlIGxpbWl0cwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVG90YWxFRFVTdXBwbHkgPSA0ODAwMDAwMCoxMDAwMDsgICAgICAgICAgICAgICAgICAgIC8vIE1BWCBUT1RBTCBFRFUgVE9LRU5TIDQ4IG1pbGxpb24KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1heEVhcmx5UHJlc2FsZUVEVVN1cHBseSA9IDI2MDE2MDAqMTAwMDA7ICAgICAgICAgICAvLyBNYXhpbXVtIEVEVSB0b2tlbnMgZWFybHkgcHJlc2FsZSBzdXBwbHkgKFByZXNhbGUgU3RhZ2UgMSkKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1heFByZXNhbGVFRFVTdXBwbHkgPSAyMTk4NDAwKjEwMDAwOyAgICAgICAgICAgICAgICAvLyBNYXhpbXVtIEVEVSB0b2tlbnMgcHJlc2FsZSBzdXBwbHkgKFByZXNhbGUgU3RhZ2UgMikKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IE9TVW5pRURVU3VwcGx5ID0gODQwMDAwMCoxMDAwMDsgICAgICAgICAgICAgICAgICAgICAvLyBPcGVuIFNvdXJjZSBVbml2ZXJzaXR5IEVEVSB0b2tlbnMgc3VwcGx5CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBTYWxlRURVU3VwcGx5ID0gMzAwMDAwMDAqMTAwMDA7ICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb2NhdGVkIEVEVSB0b2tlbnMgZm9yIGNyb3dkc2FsZQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgc2lnVGVhbUFuZEFkdmlzZXJzRURVU3VwcGx5ID0gMzg0MDAwMCoxMDAwMDsgICAgICAgIC8vIEVEVSB0b2tlbnMgc3VwcGx5IGFsbG9jYXRlZCBmb3IgdGVhbSBhbmQgYWR2aXNlcnMKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHNpZ0JvdW50eVByb2dyYW1FRFVTdXBwbHkgPSA5NjAwMDAqMTAwMDA7ICAgICAgICAgICAvLyBFRFUgdG9rZW5zIHN1cHBseSBhbGxvY2F0ZWQgZm9yIGJvdW50eSBwcm9ncmFtCgogICAgLy9BU1NJR05FRCBJTiBJTklUSUFMSVpBVElPTgogICAgLy8gVGltZSBsaW1pdHMKICAgIHVpbnQyNTYgcHVibGljIHByZVNhbGVTdGFydFRpbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCBwcmVzYWxlIHRpbWUKICAgIHVpbnQyNTYgcHVibGljIHByZVNhbGVFbmRUaW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmQgcHJlc2FsZSB0aW1lCiAgICB1aW50MjU2IHB1YmxpYyBzYWxlU3RhcnRUaW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgc2FsZSB0aW1lIChzdGFydCBjcm93ZHNhbGUpCiAgICB1aW50MjU2IHB1YmxpYyBzYWxlRW5kVGltZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5kIGNyb3dkc2FsZQoKICAgIC8vIFB1cmNoYXNlIGxpbWl0cwogICAgdWludDI1NiBwdWJsaWMgZWFybHlQcmVzYWxlRURVU3VwcGx5OwogICAgdWludDI1NiBwdWJsaWMgUHJlc2FsZUVEVVN1cHBseTsKCiAgICAvLyBSZWZ1bmQgaW4gRURVIHRva2VucyBiZWNhdXNlIG9mIHRoZSBLWUMgcHJvY2VkdXJlCiAgICB1aW50MjU2IHB1YmxpYyBFRFVfS1lDX0JPTlVTID0gNTAqMTAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm9udXMgNTAgRURVIHRva2VucyBmb3IgdGhlIEtZQyBwcm9jZWR1cmUKCiAgICAvLyBMb2NrIEVEVSB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIExvY2tFRFVUZWFtOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb2NrIEVEVSB0b2tlbnMgcmVsb2NhdGVkIGZvciB0aGUgdGVhbQoKICAgIC8vIFRva2VuIGJvbnVzZXMKICAgIHVpbnQyNTYgcHVibGljIEVEVV9QRVJfRVRIX0VBUkxZX1BSRV9TQUxFID0gMTM1MDsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxMzUwIEVEVSA9IDEgRVRIICBwcmVzYWxlIHN0YWdlIDEgIHVudGlsIHRoZSBxdWFudGl0aWVzIGFyZSBleGhhdXN0ZWQKICAgIHVpbnQyNTYgcHVibGljIEVEVV9QRVJfRVRIX1BSRV9TQUxFID0gMTIwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxMjAwIEVEVSA9IDEgRVRIICBwcmVzYWxlIHN0YWdlIDIKCiAgICAvLyBUb2tlbiBzYWxlCiAgICB1aW50MjU2IHB1YmxpYyBFRFVfUEVSX0VUSF9TQUxFOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3Jvd2RzYWxlIHByaWNlIHdoaWNoIHdpbGwgYmUgYW5hdW5jZWQgYWZ0ZXIgdGhlIGFscGhhIHZlcnNpb24gb2YgdGhlIE9TVW5pIHBsYXRmb3JtCgogICAgLy8gQWRkcmVzc2VzCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lckFkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkcmVzcyB1c2VkIGJ5IE9wZW4gU291cmNlIFVuaXZlcnNpdHkKICAgIGFkZHJlc3MgcHVibGljIHByZXNhbGVBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRyZXNzIHVzZWQgaW4gdGhlIHByZXNhbGUgcGVyaW9kCiAgICBhZGRyZXNzIHB1YmxpYyBzYWxlQWRkcmVzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkcmVzcyB1c2VkIGluIHRoZSBjcm93ZHNhbGUgcGVyaW9kCiAgICBhZGRyZXNzIHB1YmxpYyBzaWdUZWFtQW5kQWR2aXNlcnNBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRURVIHRva2VucyBmb3IgdGhlIHRlYW0gYW5kIGFkdmlzZXJzCiAgICBhZGRyZXNzIHB1YmxpYyBzaWdCb3VudHlQcm9ncmFtQWRkcmVzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRURVIHRva2VucyBib3VudHkgcHJvZ3JhbQogICAgYWRkcmVzcyBwdWJsaWMgY29udHJpYnV0aW9uc0FkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZHJlc3MgdXNlZCBmb3IgY29udHJpYnV0aW9ucwoKICAgIC8vIENvbnRyaWJ1dGlvbiBpbmRpY2F0b3IKICAgIGJvb2wgcHVibGljIGFsbG93Q29udHJpYnV0aW9uID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGbGFnIHRvIGNoYW5nZSBpZiB0cmFuc2ZlcmluZyBpcyBhbGxvd2VkCgogICAgLy8gUnVubmluZyB0b3RhbHMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsV0VJSW52ZXN0ZWQgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBXRUkgaW52ZXN0ZWQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRURVU0xlZnQgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBFRFUgbGVmdAogICAgdWludDI1NiBwdWJsaWMgdG90YWxFRFVTQWxsb2NhdGVkID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvdGFsIEVEVSBhbGxvY2F0ZWQKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIFdFSUNvbnRyaWJ1dGVkOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBXRUkgUGVyIEFjY291bnQKCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lciBvZiBmb2xsb3dpbmcgc21hcnQgY29udHJhY3QKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lckFkZHJlc3MpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLy8gTWluaW1hbCBjb250cmlidXRpb24gd2hpY2ggd2lsbCBiZSBwcm9jZXNzZWQgaXMgMC41IEVUSAogICAgbW9kaWZpZXIgbWluaW1hbENvbnRyaWJ1dGlvbigpIHsKICAgICAgICByZXF1aXJlKDUwMDAwMDAwMDAwMDAwMDAwMCA8PSBtc2cudmFsdWUpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gRnJlZXplIGFsbCBFRFUgdG9rZW4gdHJhbnNmZXJzIGR1cmluZyBzYWxlIHBlcmlvZAogICAgbW9kaWZpZXIgZnJlZXplRHVyaW5nRURVdG9rZW5TYWxlKCkgewogICAgICAgIGlmICggKG1zZy5zZW5kZXIgPT0gb3duZXJBZGRyZXNzKSB8fAogICAgICAgICAgICAgKG1zZy5zZW5kZXIgPT0gY29udHJpYnV0aW9uc0FkZHJlc3MpIHx8CiAgICAgICAgICAgICAobXNnLnNlbmRlciA9PSBwcmVzYWxlQWRkcmVzcykgfHwKICAgICAgICAgICAgIChtc2cuc2VuZGVyID09IHNhbGVBZGRyZXNzKSB8fAogICAgICAgICAgICAgKG1zZy5zZW5kZXIgPT0gc2lnQm91bnR5UHJvZ3JhbUFkZHJlc3MpICkgewogICAgICAgICAgICBfOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKChibG9jay50aW1lc3RhbXAgPiBwcmVTYWxlU3RhcnRUaW1lICYmIGJsb2NrLnRpbWVzdGFtcCA8IHByZVNhbGVFbmRUaW1lKSB8fCAoYmxvY2sudGltZXN0YW1wID4gc2FsZVN0YXJ0VGltZSAmJiBibG9jay50aW1lc3RhbXAgPCBzYWxlRW5kVGltZSkpIHsKICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgXzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBGcmVlemUgRURVIHRva2VucyBmb3IgVGVhbUFuZEFkdmlzZXJzIGZvciAxIHllYXIgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgcHJlc2FsZQogICAgbW9kaWZpZXIgZnJlZXplVGVhbUFuZEFkdmlzZXJzRURVVG9rZW5zKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICBpZiAoX2FkZHJlc3MgPT0gc2lnVGVhbUFuZEFkdmlzZXJzQWRkcmVzcykgewogICAgICAgICAgICBpZiAoTG9ja0VEVVRlYW0gPiBibG9jay50aW1lc3RhbXApIHsgcmV2ZXJ0KCk7IH0KICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBJTklUSUFMSVpBVElPTlMgRlVOQ1RJT04KICAgIGZ1bmN0aW9uIEVEVVRva2VuKAogICAgICAgIGFkZHJlc3MgX3ByZXNhbGVBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX3NhbGVBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX3NpZ1RlYW1BbmRBZHZpc2Vyc0FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfc2lnQm91bnR5UHJvZ3JhbUFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfY29udHJpYnV0aW9uc0FkZHJlc3MKICAgICkgewogICAgICAgIGNlcnRpZmllciA9IENlcnRpZmllcigweDFlMkYwNThDNDNhYzg5NjU5MzhGNmU5Q0EyODY2ODVBM0U2M0YyNEUpOwogICAgICAgIG93bmVyQWRkcmVzcyA9IG1zZy5zZW5kZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgb3duZXJzIGFkZHJlc3MKICAgICAgICBwcmVzYWxlQWRkcmVzcyA9IF9wcmVzYWxlQWRkcmVzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIHByZXNhbGUgYWRkcmVzcwogICAgICAgIHNhbGVBZGRyZXNzID0gX3NhbGVBZGRyZXNzOwogICAgICAgIHNpZ1RlYW1BbmRBZHZpc2Vyc0FkZHJlc3MgPSBfc2lnVGVhbUFuZEFkdmlzZXJzQWRkcmVzczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgc2FsZSBhZGRyZXNzCiAgICAgICAgc2lnQm91bnR5UHJvZ3JhbUFkZHJlc3MgPSBfc2lnQm91bnR5UHJvZ3JhbUFkZHJlc3M7CiAgICAgICAgY29udHJpYnV0aW9uc0FkZHJlc3MgPSBfY29udHJpYnV0aW9uc0FkZHJlc3M7CgogICAgICAgIHByZVNhbGVTdGFydFRpbWUgPSAxNTExMTc5MjAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgb2YgcHJlc2FsZSByaWdodCBhZnRlciBlbmQgb2YgZWFybHkgcHJlc2FsZSBwZXJpb2QKICAgICAgICBwcmVTYWxlRW5kVGltZSA9IDE1MTQ3NjQ3OTk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZCBvZiB0aGUgcHJlc2FsZSBwZXJpb2QgMSB3ZWVrIGFmdGVyIGVuZCBvZiBlYXJseSBwcmVzYWxlCiAgICAgICAgTG9ja0VEVVRlYW0gPSBwcmVTYWxlRW5kVGltZSArIDEgeWVhcnM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFRFUgdG9rZW5zIGFsbG9jYXRlZCBmb3IgdGhlIHRlYW0gd2lsbCBiZSBmcmVlemVkIGZvciBvbmUgeWVhcgoKICAgICAgICBlYXJseVByZXNhbGVFRFVTdXBwbHkgPSBtYXhFYXJseVByZXNhbGVFRFVTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1BWCBUT1RBTCBEVVJJTkcgRUFSTFkgUFJFU0FMRSAoMiA2MDEgNjAwIEVEVSBUb2tlbnMpCiAgICAgICAgUHJlc2FsZUVEVVN1cHBseSA9IG1heFByZXNhbGVFRFVTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNQVggVE9UQUwgRFVSSU5HIFBSRVNBTEUgKDIgMTk4IDQwMCBFRFUgVG9rZW5zKQoKICAgICAgICBiYWxhbmNlc1tjb250cmlidXRpb25zQWRkcmVzc10gPSBPU1VuaUVEVVN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG9jYXRpbmcgRURVIHRva2VucyBmb3IgT3BlbiBTb3VyY2UgVW5pdmVyc2l0eSAgICAgICAgICAgICAvLyBBbGxvY2F0aW5nIEVEVSB0b2tlbnMgZm9yIGVhcmx5IHByZXNhbGUKICAgICAgICBiYWxhbmNlc1twcmVzYWxlQWRkcmVzc10gPSBTYWZlTWF0aC5hZGQobWF4UHJlc2FsZUVEVVN1cHBseSwgbWF4RWFybHlQcmVzYWxlRURVU3VwcGx5KTsgIC8vIEFsbG9jYXRpbmcgRURVIHRva2VucyBmb3IgcHJlc2FsZQogICAgICAgIGJhbGFuY2VzW3NhbGVBZGRyZXNzXSA9IFNhbGVFRFVTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb2NhdGluZyBFRFUgdG9rZW5zIGZvciBzYWxlCiAgICAgICAgYmFsYW5jZXNbc2lnVGVhbUFuZEFkdmlzZXJzQWRkcmVzc10gPSBzaWdUZWFtQW5kQWR2aXNlcnNFRFVTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvY2F0aW5nIEVEVSB0b2tlbnMgZm9yIHRlYW0gYW5kIGFkdmlzZXJzCiAgICAgICAgYmFsYW5jZXNbc2lnQm91bnR5UHJvZ3JhbUFkZHJlc3NdID0gc2lnQm91bnR5UHJvZ3JhbUVEVVN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCb3VudHkgcHJvZ3JhbSBhZGRyZXNzCgoKICAgICAgICB0b3RhbEVEVVNBbGxvY2F0ZWQgPSBPU1VuaUVEVVN1cHBseSArIHNpZ1RlYW1BbmRBZHZpc2Vyc0VEVVN1cHBseSArIHNpZ0JvdW50eVByb2dyYW1FRFVTdXBwbHk7CiAgICAgICAgdG90YWxFRFVTTGVmdCA9IFNhZmVNYXRoLnN1YihUb3RhbEVEVVN1cHBseSwgdG90YWxFRFVTQWxsb2NhdGVkKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBFRFUgVG9rZW5zIGxlZnQgZm9yIHNhbGUKCiAgICAgICAgdG90YWxTdXBwbHkgPSBUb3RhbEVEVVN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBFRFUgVG9rZW4gc3VwcGx5CiAgICB9CgogICAgLy8gRkFMTCBCQUNLIEZVTkNUSU9OIFRPIEFMTE9XIEVUSEVSIENPTlRSSUJVVElPTlMKICAgIGZ1bmN0aW9uKCkKICAgICAgICBwYXlhYmxlCiAgICAgICAgbWluaW1hbENvbnRyaWJ1dGlvbgogICAgewogICAgICAgIHJlcXVpcmUoYWxsb3dDb250cmlidXRpb24pOwoKICAgICAgICAvLyBPbmx5IFBJQ09QUyBjZXJ0aWZpZWQgYWRkcmVzc2VzIHdpbGwgYmUgYWxsb3dlZCB0byBwYXJ0aWNpcGF0ZQogICAgICAgIGlmICghY2VydGlmaWVyLmNlcnRpZmllZChtc2cuc2VuZGVyKSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIC8vIFRyYW5zYWN0aW9uIHZhbHVlIGluIFdlaQogICAgICAgIHVpbnQyNTYgYW1vdW50SW5XZWkgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIEluaXRpYWwgYW1vdW50cwogICAgICAgIHVpbnQyNTYgYW1vdW50T2ZFRFUgPSAwOwoKICAgICAgICBpZiAoYmxvY2sudGltZXN0YW1wID4gcHJlU2FsZVN0YXJ0VGltZSAmJiBibG9jay50aW1lc3RhbXAgPCBwcmVTYWxlRW5kVGltZSkgewogICAgICAgICAgICBhbW91bnRPZkVEVSA9IGFtb3VudEluV2VpLm11bChFRFVfUEVSX0VUSF9FQVJMWV9QUkVfU0FMRSkuZGl2KDEwMDAwMDAwMDAwMDAwMCk7CiAgICAgICAgICAgIGlmKCEoV0VJQ29udHJpYnV0ZWRbbXNnLnNlbmRlcl0gPiAwKSkgewogICAgICAgICAgICAgICAgYW1vdW50T2ZFRFUgKz0gRURVX0tZQ19CT05VUzsgIC8vIEJvbnVzIGZvciBLWUMgcHJvY2VkdXJlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVhcmx5UHJlc2FsZUVEVVN1cHBseSA+IDAgJiYgZWFybHlQcmVzYWxlRURVU3VwcGx5ID49IGFtb3VudE9mRURVKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKHVwZGF0ZUVEVUJhbGFuY2VGdW5jKHByZXNhbGVBZGRyZXNzLCBhbW91bnRPZkVEVSkpOwogICAgICAgICAgICAgICAgZWFybHlQcmVzYWxlRURVU3VwcGx5ID0gZWFybHlQcmVzYWxlRURVU3VwcGx5LnN1YihhbW91bnRPZkVEVSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoUHJlc2FsZUVEVVN1cHBseSA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChlYXJseVByZXNhbGVFRFVTdXBwbHkgIT0gMCkgewogICAgICAgICAgICAgICAgICAgIFByZXNhbGVFRFVTdXBwbHkgPSBQcmVzYWxlRURVU3VwcGx5LmFkZChlYXJseVByZXNhbGVFRFVTdXBwbHkpOwogICAgICAgICAgICAgICAgICAgIGVhcmx5UHJlc2FsZUVEVVN1cHBseSA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbW91bnRPZkVEVSA9IGFtb3VudEluV2VpLm11bChFRFVfUEVSX0VUSF9QUkVfU0FMRSkuZGl2KDEwMDAwMDAwMDAwMDAwMCk7CiAgICAgICAgICAgICAgICBpZighKFdFSUNvbnRyaWJ1dGVkW21zZy5zZW5kZXJdID4gMCkpIHsKICAgICAgICAgICAgICAgICAgICBhbW91bnRPZkVEVSArPSBFRFVfS1lDX0JPTlVTOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVxdWlyZShQcmVzYWxlRURVU3VwcGx5ID49IGFtb3VudE9mRURVKTsKICAgICAgICAgICAgICAgIHJlcXVpcmUodXBkYXRlRURVQmFsYW5jZUZ1bmMocHJlc2FsZUFkZHJlc3MsIGFtb3VudE9mRURVKSk7CiAgICAgICAgICAgICAgICBQcmVzYWxlRURVU3VwcGx5ID0gUHJlc2FsZUVEVVN1cHBseS5zdWIoYW1vdW50T2ZFRFUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGJsb2NrLnRpbWVzdGFtcCA+IHNhbGVTdGFydFRpbWUgJiYgYmxvY2sudGltZXN0YW1wIDwgc2FsZUVuZFRpbWUpIHsKICAgICAgICAgICAgLy8gU2FsZSBwZXJpb2QKICAgICAgICAgICAgYW1vdW50T2ZFRFUgPSBhbW91bnRJbldlaS5tdWwoRURVX1BFUl9FVEhfU0FMRSkuZGl2KDEwMDAwMDAwMDAwMDAwMCk7CiAgICAgICAgICAgIHJlcXVpcmUodG90YWxFRFVTTGVmdCA+PSBhbW91bnRPZkVEVSk7CiAgICAgICAgICAgIHJlcXVpcmUodXBkYXRlRURVQmFsYW5jZUZ1bmMoc2FsZUFkZHJlc3MsIGFtb3VudE9mRURVKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gT3V0c2lkZSBjb250cmlidXRpb24gcGVyaW9kCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgLy8gVXBkYXRlIHRvdGFsIFdFSSBJbnZlc3RlZAogICAgICAgIHRvdGFsV0VJSW52ZXN0ZWQgPSB0b3RhbFdFSUludmVzdGVkLmFkZChhbW91bnRJbldlaSk7CiAgICAgICAgYXNzZXJ0KHRvdGFsV0VJSW52ZXN0ZWQgPiAwKTsKICAgICAgICAvLyBVcGRhdGUgdG90YWwgV0VJIEludmVzdGVkIGJ5IGFjY291bnQKICAgICAgICB1aW50MjU2IGNvbnRyaWJ1dGVkU2FmZSA9IFdFSUNvbnRyaWJ1dGVkW21zZy5zZW5kZXJdLmFkZChhbW91bnRJbldlaSk7CiAgICAgICAgYXNzZXJ0KGNvbnRyaWJ1dGVkU2FmZSA+IDApOwogICAgICAgIFdFSUNvbnRyaWJ1dGVkW21zZy5zZW5kZXJdID0gY29udHJpYnV0ZWRTYWZlOwoKICAgICAgICAvLyBUcmFuc2ZlciBjb250cmlidXRpb25zIHRvIE9wZW4gU291cmNlIFVuaXZlcnNpdHkKICAgICAgICBjb250cmlidXRpb25zQWRkcmVzcy50cmFuc2ZlcihhbW91bnRJbldlaSk7CgogICAgICAgIC8vIENSRUFURSBFVkVOVCBGT1IgU0VOREVSCiAgICAgICAgQ3JlYXRlZEVEVShtc2cuc2VuZGVyLCBhbW91bnRPZkVEVSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIGZvciB1cGRhdGluZyB0aGUgYmFsYW5jZSBhbmQgZG91YmxlIGNoZWNrcyBhbGxvY2F0ZWQgRURVIHRva2VucwogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBzZW5kIEVEVSB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX2Ftb3VudE9mRURVIFRoZSBhbW91bnQgb2YgdG9rZW5zIHdoaWNoIHdpbGwgYmUgc2VuZCB0byBjb250cmlidXRvci4KICAgICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZUVEVUJhbGFuY2VGdW5jKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudE9mRURVKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgLy8gVXBkYXRlIHRvdGFsIEVEVSBiYWxhbmNlCiAgICAgICAgdG90YWxFRFVTTGVmdCA9IHRvdGFsRURVU0xlZnQuc3ViKF9hbW91bnRPZkVEVSk7CiAgICAgICAgdG90YWxFRFVTQWxsb2NhdGVkICs9IF9hbW91bnRPZkVEVTsKCiAgICAgICAgLy8gVmFsaWRhdGUgRURVIGFsbG9jYXRpb24KICAgICAgICBpZiAodG90YWxFRFVTQWxsb2NhdGVkIDw9IFRvdGFsRURVU3VwcGx5ICYmIHRvdGFsRURVU0FsbG9jYXRlZCA+IDApIHsKICAgICAgICAgICAgLy8gVXBkYXRlIHVzZXIgRURVIGJhbGFuY2UKICAgICAgICAgICAgdWludDI1NiBiYWxhbmNlU2FmZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChfYW1vdW50T2ZFRFUpOwogICAgICAgICAgICBhc3NlcnQoYmFsYW5jZVNhZmUgPiAwKTsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlU2FmZTsKICAgICAgICAgICAgdWludDI1NiBiYWxhbmNlRGl2ID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50T2ZFRFUpOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlRGl2OwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b3RhbEVEVVNMZWZ0ID0gdG90YWxFRFVTTGVmdC5hZGQoX2Ftb3VudE9mRURVKTsKICAgICAgICAgICAgdG90YWxFRFVTQWxsb2NhdGVkIC09IF9hbW91bnRPZkVEVTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0IGNvbnRyaWJ1dGlvbiBmbGFnIHN0YXR1cwogICAgICogQHBhcmFtIF9hbGxvd0NvbnRyaWJ1dGlvbiBUaGlzIGlzIGFkZGl0aW9uYWwgcGFybWl0aW9uIGZvciB0aGUgY29udHJpYnV0ZXJzCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRBbGxvd0NvbnRyaWJ1dGlvbkZsYWcoYm9vbCBfYWxsb3dDb250cmlidXRpb24pIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXJBZGRyZXNzKTsKICAgICAgICBhbGxvd0NvbnRyaWJ1dGlvbiA9IF9hbGxvd0NvbnRyaWJ1dGlvbjsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgU2V0IHRoZSBzYWxlIHBlcmlvZAogICAgICogQHBhcmFtIF9zYWxlU3RhcnRUaW1lIFNldHMgdGhlIHN0YXJ0aW5nIHRpbWUgb2YgdGhlIHNhbGUgcGVyaW9kCiAgICAgKiBAcGFyYW0gX3NhbGVFbmRUaW1lIFNldHMgdGhlIGVuZCB0aW1lIG9mIHRoZSBzYWxlIHBlcmlvZAogICAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0U2FsZVRpbWVzKHVpbnQyNTYgX3NhbGVTdGFydFRpbWUsIHVpbnQyNTYgX3NhbGVFbmRUaW1lKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyQWRkcmVzcyk7CiAgICAgICAgc2FsZVN0YXJ0VGltZSA9IF9zYWxlU3RhcnRUaW1lOwogICAgICAgIHNhbGVFbmRUaW1lID0gX3NhbGVFbmRUaW1lOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTZXQgY2hhbmdlIHRoZSBwcmVzYWxlIHBlcmlvZCBpZiBuZWNlc3NhcnkKICAgICAqIEBwYXJhbSBfcHJlU2FsZVN0YXJ0VGltZSBTZXRzIHRoZSBzdGFydGluZyB0aW1lIG9mIHRoZSBwcmVzYWxlIHBlcmlvZAogICAgICogQHBhcmFtIF9wcmVTYWxlRW5kVGltZSBTZXRzIHRoZSBlbmQgdGltZSBvZiB0aGUgcHJlc2FsZSBwZXJpb2QKICAgICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFByZXNhbGVUaW1lKHVpbnQyNTYgX3ByZVNhbGVTdGFydFRpbWUsIHVpbnQyNTYgX3ByZVNhbGVFbmRUaW1lKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyQWRkcmVzcyk7CiAgICAgICAgcHJlU2FsZVN0YXJ0VGltZSA9IF9wcmVTYWxlU3RhcnRUaW1lOwogICAgICAgIHByZVNhbGVFbmRUaW1lID0gX3ByZVNhbGVFbmRUaW1lOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEVEVVByaWNlKAogICAgICAgIHVpbnQyNTYgX3ZhbEVhcmx5UHJlc2FsZSwKICAgICAgICB1aW50MjU2IF92YWxQcmVzYWxlLAogICAgICAgIHVpbnQyNTYgX3ZhbFNhbGUKICAgICkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lckFkZHJlc3MpOwogICAgICAgIEVEVV9QRVJfRVRIX0VBUkxZX1BSRV9TQUxFID0gX3ZhbEVhcmx5UHJlc2FsZTsKICAgICAgICBFRFVfUEVSX0VUSF9QUkVfU0FMRSA9IF92YWxQcmVzYWxlOwogICAgICAgIEVEVV9QRVJfRVRIX1NBTEUgPSBfdmFsU2FsZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVDZXJ0aWZpZXIoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGNlcnRpZmllciA9IENlcnRpZmllcihfYWRkcmVzcyk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8gQmFsYW5jZSBvZiBhIHNwZWNpZmljIGFjY291bnQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBmcmVlemVEdXJpbmdFRFV0b2tlblNhbGUgZnJlZXplVGVhbUFuZEFkdmlzZXJzRURVVG9rZW5zKG1zZy5zZW5kZXIpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kCiAgICAvLyB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQogICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcwogICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UKICAgIC8vIHRoZXNlIHN0YW5kYXJkaXplZCBBUElzIGZvciBhcHByb3ZhbDoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBmcmVlemVEdXJpbmdFRFV0b2tlblNhbGUgZnJlZXplVGVhbUFuZEFkdmlzZXJzRURVVG9rZW5zKF9mcm9tKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKICAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQKICAgICAgICAgICAgICYmIF9hbW91bnQgPiAwCiAgICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIGZyZWV6ZUR1cmluZ0VEVXRva2VuU2FsZSBmcmVlemVUZWFtQW5kQWR2aXNlcnNFRFVUb2tlbnMobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cgp9'.
	

]
