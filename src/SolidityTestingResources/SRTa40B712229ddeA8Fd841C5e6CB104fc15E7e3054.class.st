Class {
	#name : #SRTa40B712229ddeA8Fd841C5e6CB104fc15E7e3054,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa40B712229ddeA8Fd841C5e6CB104fc15E7e3054 >> base64 [
	^ ''.
	

]
