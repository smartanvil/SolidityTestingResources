Class {
	#name : #SRT123ab195dd38b1b40510d467a6a359b201af056f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT123ab195dd38b1b40510d467a6a359b201af056f >> base64 [
	^ ''.
	

]
