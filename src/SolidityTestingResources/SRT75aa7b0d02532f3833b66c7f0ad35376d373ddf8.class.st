Class {
	#name : #SRT75aa7b0d02532f3833b66c7f0ad35376d373ddf8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT75aa7b0d02532f3833b66c7f0ad35376d373ddf8 >> base64 [
	^ ''.
	

]
