Class {
	#name : #SRT07c7a91a4d0baf16df99764d7b19c5129ecc6533,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT07c7a91a4d0baf16df99764d7b19c5129ecc6533 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBFUkM3MjEgewogICAgLy8gRVJDMjAgY29tcGF0aWJsZSBmdW5jdGlvbnMKICAgIC8vIHVzZSB2YXJpYWJsZSBnZXR0ZXIKICAgIC8vIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgbmFtZSk7CiAgICAvLyBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgc3ltYm9sKTsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIDsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG9rZW5JZCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CiAgICAKICAgIC8vIE9wdGlvbmFsCiAgICAvLyBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyA7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk9mT3duZXJCeUluZGV4KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9pbmRleCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCB0b2tlbklkKTsKICAgIC8vIGZ1bmN0aW9uIHRva2VuTWV0YWRhdGEodWludDI1NiBfdG9rZW5JZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBpbmZvVXJsKTsKICAgIAogICAgLy8gRXZlbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwp9Cgpjb250cmFjdCBFUkMyMCB7CiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfdG90YWxTdXBwbHkpOwogCiAgICAvLyBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBvZiBhbm90aGVyIGFjY291bnQgd2l0aCBhZGRyZXNzIF9vd25lcgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKIAogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIAogICAgLy8gdHJhbnNmZXIgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbiBhcHByb3ZlZCBieSBhZGRyZXNzIF9mcm9tCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIAogICAgLy8gYXBwcm92ZSBhbiBhZGRyZXNzIHdpdGggX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vIGdldCByZW1haW5pbmcgdG9rZW4gYXBwcm92ZWQgYnkgX293bmVyIHRvIF9zcGVuZGVyCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgCiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgU3BlY2lhbEdpZnQgaXMgRVJDNzIxIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJWaXJ0dWFsR2lmdCI7ICAgICAgICAgICAgIAogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMDsgICAgICAgICAgICAgICAgCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJWVEciOyAgICAgICAgICAgICAgICAgCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wIjsgIAoKICAgIGFkZHJlc3MgcHJpdmF0ZSBkZWZhdWx0R2lmdE93bmVyOwogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgYWxsb3dQZXJtaXNzaW9uOwoKICAgIEVSQzIwIHByaXZhdGUgR2lmdG8gPSBFUkMyMCgweDAwQzViQmFFNTA3ODFCZTE2NjkzMDZiOWUwMDFFRkY1N2EyOTU3YjA5ZCk7CiAgICAKICAgIGV2ZW50IENyZWF0aW9uKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgaW5kZXhlZCB0b2tlbklkKTsKICAgIC8vR2lmdCB0b2tlbiBzdG9yYWdlLgogICAgR2lmdFRva2VuW10gZ2lmdFN0b3JhZ2VBcnJ5OwogICAgLy9HaWZ0IHRlbXBsYXRlIHN0b3JhZ2UuCiAgICBHaWZ0VGVtcGxhdGVUb2tlbltdIGdpZnRUZW1wbGF0ZVN0b3JhZ2VBcnJ5OwogICAgLy9tYXBwaW5nIGFkZHJlc3MgdG8gaXQncyBnaWZ0IHN1bQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgYmFsYW5jZXM7CiAgICAvL21hcHBpbmcgZ2lmdCBpZCB0byBvd25lcgogICAgbWFwcGluZyh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgZ2lmdEluZGV4VG9Pd25lcnM7CiAgICAvL3RlbGxzIHRoZSBnaWZ0IGlzIGV4aXN0ZWQgYnkgZ2lmdCBpZAogICAgbWFwcGluZyh1aW50MjU2ID0+IGJvb2wpIHByaXZhdGUgZ2lmdEV4aXN0czsKICAgIC8vbWFwcGluZyBjdXJyZW50IG93bmVyIHRvIGFwcHJvdmVkIG93bmVycyB0byBnaWZ0CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHJpdmF0ZSBvd25lclRvQXBwcm92ZWRBZGRzVG9HaWZJZHM7CiAgICAvL21hcHBpbmcgZ2lmdCB0ZW1wbGF0ZSBpZCB0byBnaWZ0IGlkcwogICAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTZbXSkgcHJpdmF0ZSBnaWZ0VGVtcGxhdGVJZFRvR2lmdGlkczsKICAgIC8vbWFwcGluZyBhZGRyZXNzIHRvIGFsbHJlYWR5IGJvdWdodCBzdW0uCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpKSBwcml2YXRlIGFkZHJlc3NUb0JvdWdodFN1bTsKICAgIC8vTWFwcGluZyBnaWZ0IHR5cGUgdG8gZ2lmdCBsaW1pdC4KICAgIG1hcHBpbmcodWludDI1NiA9PiB1aW50MjU2KSBwcml2YXRlIGdpZnRUeXBlVG9HaWZ0TGltaXQ7CiAgICAvL1NpbmdsZSBhZGRyZXNzIGNhbiBsaW1pdGF0aW9uLgogICAgdWludDI1NiBjb25zdGFudCBOT19MSU1JVCA9IDA7CiAgICB1aW50MjU2IHByaXZhdGUgc2luZ2xlQWRkcmVzc0J1eUxpbWl0ID0gMTsKICAgIAogICAgLy9tYXBwaW5nIGdpZnQgdGVtcGxhdGUgdG8gZ2lmdCBzZWxsZWQgc3VtLgogICAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgZ2lmdFR5cGVUb1NlbGxlZFN1bTsKCiAgICAvL0dpZnQgdGVtcGxhdGUga25vd24gYXMgMCBnZW5lcmF0aW9uIGdpZnQKICAgIHN0cnVjdCBHaWZ0VGVtcGxhdGVUb2tlbiB7CiAgICAgICAgdWludDI1NiBnaWZ0UHJpY2U7CiAgICAgICAgdWludDI1NiBnaWZ0TGltaXQ7CiAgICAgICAgLy9naWZ0IGltYWdlIHVybAogICAgICAgIHN0cmluZyBnaWZ0SW1nVXJsOwogICAgICAgIC8vZ2lmdCBhbmltYXRpb24gdXJsCiAgICAgICAgc3RyaW5nIGdpZnROYW1lOwogICAgfQogICAgLy9TcGVjaWFsIGdpZnQgdG9rZW4KICAgIHN0cnVjdCBHaWZ0VG9rZW4gewogICAgICAgIHVpbnQyNTYgZ2lmdFByaWNlOwogICAgICAgIHVpbnQyNTYgZ2lmdFR5cGU7CiAgICAgICAgLy9naWZ0IGltYWdlIHVybAogICAgICAgIHN0cmluZyBnaWZ0SW1nVXJsOwogICAgICAgIC8vZ2lmdCBhbmltYXRpb24gdXJsCiAgICAgICAgc3RyaW5nIGdpZnROYW1lOwogICAgfSAgICAgCgogICAgbW9kaWZpZXIgb25seUhhdmVQZXJtaXNzaW9uKCl7CiAgICAgICAgcmVxdWlyZShhbGxvd1Blcm1pc3Npb25bbXNnLnNlbmRlcl0gPT0gdHJ1ZSB8fCBtc2cuc2VuZGVyID09IGRlZmF1bHRHaWZ0T3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyKCl7CiAgICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBkZWZhdWx0R2lmdE93bmVyKTsKICAgICAgICAgXzsKICAgIH0KCiAgICAvL0BkZXYgQ29uc3RydWN0b3IgCiAgICBmdW5jdGlvbiBTcGVjaWFsR2lmdCgpIHB1YmxpYyB7CgogICAgICAgIGRlZmF1bHRHaWZ0T3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIAogICAgICAgIEdpZnRUb2tlbiBtZW1vcnkgbmV3R2lmdCA9IEdpZnRUb2tlbih7CiAgICAgICAgICAgIGdpZnRQcmljZTogMCwKICAgICAgICAgICAgZ2lmdFR5cGU6IDAsCiAgICAgICAgICAgIGdpZnRJbWdVcmw6ICIiLAogICAgICAgICAgICBnaWZ0TmFtZTogIiIKICAgICAgICB9KTsKCiAgICAgICAgIEdpZnRUZW1wbGF0ZVRva2VuIG1lbW9yeSBuZXdHaWZ0VGVtcGxhdGUgPSBHaWZ0VGVtcGxhdGVUb2tlbih7CiAgICAgICAgICAgICAgICBnaWZ0UHJpY2U6IDAsCiAgICAgICAgICAgICAgICBnaWZ0TGltaXQ6IDAsCiAgICAgICAgICAgICAgICBnaWZ0SW1nVXJsOiAiIiwKICAgICAgICAgICAgICAgIGdpZnROYW1lOiAiIgogICAgICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBnaWZ0U3RvcmFnZUFycnkucHVzaChuZXdHaWZ0KTsgLy8gaWQgPSAwCiAgICAgICAgZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnkucHVzaChuZXdHaWZ0VGVtcGxhdGUpOwogICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gYWRkUGVybWlzc2lvbihhZGRyZXNzIF9hZGRyKSAKICAgIHB1YmxpYyAKICAgIG9ubHlPd25lcnsKICAgICAgICBhbGxvd1Blcm1pc3Npb25bX2FkZHJdID0gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmVtb3ZlUGVybWlzc2lvbihhZGRyZXNzIF9hZGRyKSAKICAgIHB1YmxpYyAKICAgIG9ubHlPd25lcnsKICAgICAgICBhbGxvd1Blcm1pc3Npb25bX2FkZHJdID0gZmFsc2U7CiAgICB9CgoKICAgICAvLy9AZGV2IEJ1eSBhIGdpZnQgd2hpbGUgY3JlYXRlIGEgbmV3IGdpZnQgYmFzZWQgb24gZ2lmdCB0ZW1wbGF0ZS4KICAgICAvLy9NYWtlIHN1cmUgdG8gY2FsbCBHaWZ0by5hcHByb3ZlKCkgZmlzdCwgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbgogICAgZnVuY3Rpb24gc2VuZEdpZnQodWludDI1NiBfdHlwZSwgCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIHJlY2lwaWVudCkKICAgICAgICAgICAgICAgICAgICAgcHVibGljIAogICAgICAgICAgICAgICAgICAgICBvbmx5SGF2ZVBlcm1pc3Npb24KICAgICAgICAgICAgICAgICAgICAgcmV0dXJucyh1aW50MjU2IF9naWZ0SWQpCiAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAvL0NoZWNrIGlmIHRoZXJlIGlzIGEgYnV5IExpbWl0IGZvciBidXllciBhZGRyZXNzCiAgICAgICAgcmVxdWlyZShhZGRyZXNzVG9Cb3VnaHRTdW1bcmVjaXBpZW50XVtfdHlwZV0gPCBzaW5nbGVBZGRyZXNzQnV5TGltaXQpOwogICAgICAgIC8vQ2hlY2sgaWYgdGhlIGNyZWF0ZWQgZ2lmdHMgc3VtIDwgIGdpZnQgTGltaXQKICAgICAgICByZXF1aXJlKGdpZnRUeXBlVG9TZWxsZWRTdW1bX3R5cGVdIDwgZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnlbX3R5cGVdLmdpZnRMaW1pdCk7CiAgICAgICAgIC8vX3R5cGUgbXVzdCBiZSBhIHZhbGlkIHZhbHVlCiAgICAgICAgcmVxdWlyZShfdHlwZSA+IDAgJiYgX3R5cGUgPCBnaWZ0VGVtcGxhdGVTdG9yYWdlQXJyeS5sZW5ndGgpOwogICAgICAgIC8vTWludCBhIHNwZWNpYWwgZ2lmdC4KICAgICAgICBfZ2lmdElkID0gX21pbnRHaWZ0KF90eXBlLCByZWNpcGllbnQpOwogICAgICAgIGdpZnRUeXBlVG9TZWxsZWRTdW1bX3R5cGVdKys7CiAgICAgICAgYWRkcmVzc1RvQm91Z2h0U3VtW3JlY2lwaWVudF1bX3R5cGVdKys7CiAgICAgICAgcmV0dXJuIF9naWZ0SWQ7CiAgICB9CgogICAgLy8vIEBkZXYgTWludCBnaWZ0LgogICAgZnVuY3Rpb24gX21pbnRHaWZ0KHVpbnQyNTYgX3R5cGUsIAogICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgcmVjaXBpZW50KQogICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSAKICAgICAgICAgICAgICAgICAgICAgewoKICAgICAgICBHaWZ0VG9rZW4gbWVtb3J5IG5ld0dpZnQgPSBHaWZ0VG9rZW4oewogICAgICAgICAgICBnaWZ0UHJpY2U6IGdpZnRUZW1wbGF0ZVN0b3JhZ2VBcnJ5W190eXBlXS5naWZ0UHJpY2UsCiAgICAgICAgICAgIGdpZnRUeXBlOiBfdHlwZSwKICAgICAgICAgICAgZ2lmdEltZ1VybDogZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnlbX3R5cGVdLmdpZnRJbWdVcmwsCiAgICAgICAgICAgIGdpZnROYW1lOiBnaWZ0VGVtcGxhdGVTdG9yYWdlQXJyeVtfdHlwZV0uZ2lmdE5hbWUKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICB1aW50MjU2IGdpZnRJZCA9IGdpZnRTdG9yYWdlQXJyeS5wdXNoKG5ld0dpZnQpIC0gMTsKICAgICAgICAvL0FkZCBnaWZ0aWQgdG8gZ2lmdCB0ZW1wbGF0ZSBtYXBwaW5nIAogICAgICAgIGdpZnRUZW1wbGF0ZUlkVG9HaWZ0aWRzW190eXBlXS5wdXNoKGdpZnRJZCk7CiAgICAgICAgZ2lmdEV4aXN0c1tnaWZ0SWRdID0gdHJ1ZTsKICAgICAgICAvL1JlYXNzaWduIE93bmVyc2hpcCBmb3IgbmV3IG93bmVyCiAgICAgICAgX3RyYW5zZmVyKDAsIHJlY2lwaWVudCwgZ2lmdElkKTsKICAgICAgICAvL1RyaWdnZXIgRXRoZXJldW0gRXZlbnQKICAgICAgICBDcmVhdGlvbihtc2cuc2VuZGVyLCBnaWZ0SWQpOwogICAgICAgIHJldHVybiBnaWZ0SWQ7CiAgICB9CgogICAgLy8vIEBkZXYgSW5pdGlhdGUgZ2lmdCB0ZW1wbGF0ZS4KICAgIC8vLyBBIGdpZnQgdGVtcGxhdGUgbWVhbnMgYSBnaWZ0IG9mICIwIiBnZW5lcmF0aW9uJ3MKICAgIGZ1bmN0aW9uIGNyZWF0ZUdpZnRUZW1wbGF0ZSh1aW50MjU2IF9wcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2xpbWl0LCAKICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBfaW1nVXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9naWZ0TmFtZSkgCiAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgb25seUhhdmVQZXJtaXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5zICh1aW50MjU2IGdpZnRUZW1wbGF0ZUlkKQogICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgIC8vQ2hlY2sgdGhlc2UgdmFyaWFibGVzCiAgICAgICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgICAgICBieXRlcyBtZW1vcnkgaW1nVXJsU3RyaW5nVGVzdCA9IGJ5dGVzKF9pbWdVcmwpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBnaWZ0TmFtZVN0cmluZ1Rlc3QgPSBieXRlcyhfZ2lmdE5hbWUpOwogICAgICAgIHJlcXVpcmUoaW1nVXJsU3RyaW5nVGVzdC5sZW5ndGggPiAwKTsKICAgICAgICByZXF1aXJlKGdpZnROYW1lU3RyaW5nVGVzdC5sZW5ndGggPiAwKTsKICAgICAgICByZXF1aXJlKF9saW1pdCA+IDApOwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsKICAgICAgICAvL0NyZWF0ZSBHaWZ0VGVtcGxhdGVUb2tlbgogICAgICAgIEdpZnRUZW1wbGF0ZVRva2VuIG1lbW9yeSBuZXdHaWZ0VGVtcGxhdGUgPSBHaWZ0VGVtcGxhdGVUb2tlbih7CiAgICAgICAgICAgICAgICBnaWZ0UHJpY2U6IF9wcmljZSwKICAgICAgICAgICAgICAgIGdpZnRMaW1pdDogX2xpbWl0LAogICAgICAgICAgICAgICAgZ2lmdEltZ1VybDogX2ltZ1VybCwKICAgICAgICAgICAgICAgIGdpZnROYW1lOiBfZ2lmdE5hbWUKICAgICAgICB9KTsKICAgICAgICAvL1B1c2ggR2lmdFRlbXBsYXRlIGludG8gc3RvcmFnZS4KICAgICAgICBnaWZ0VGVtcGxhdGVJZCA9IGdpZnRUZW1wbGF0ZVN0b3JhZ2VBcnJ5LnB1c2gobmV3R2lmdFRlbXBsYXRlKSAtIDE7CiAgICAgICAgZ2lmdFR5cGVUb0dpZnRMaW1pdFtnaWZ0VGVtcGxhdGVJZF0gPSBfbGltaXQ7CiAgICAgICAgcmV0dXJuIGdpZnRUZW1wbGF0ZUlkOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVUZW1wbGF0ZSh1aW50MjU2IHRlbXBsYXRlSWQsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfbmV3UHJpY2UsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfbmV3bGltaXQsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9uZXdVcmwsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9uZXdOYW1lKQogICAgcHVibGljCiAgICBvbmx5T3duZXIgewogICAgICAgIGdpZnRUZW1wbGF0ZVN0b3JhZ2VBcnJ5W3RlbXBsYXRlSWRdLmdpZnRQcmljZSA9IF9uZXdQcmljZTsKICAgICAgICBnaWZ0VGVtcGxhdGVTdG9yYWdlQXJyeVt0ZW1wbGF0ZUlkXS5naWZ0TGltaXQgPSBfbmV3bGltaXQ7CiAgICAgICAgZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnlbdGVtcGxhdGVJZF0uZ2lmdEltZ1VybCA9IF9uZXdVcmw7CiAgICAgICAgZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnlbdGVtcGxhdGVJZF0uZ2lmdE5hbWUgPSBfbmV3TmFtZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0R2lmdFNvbGRGcm9tVHlwZSh1aW50MjU2IGdpZnRUeXBlKQogICAgcHVibGljCiAgICBjb25zdGFudAogICAgcmV0dXJucyh1aW50MjU2KXsKICAgICAgICByZXR1cm4gZ2lmdFR5cGVUb1NlbGxlZFN1bVtnaWZ0VHlwZV07CiAgICB9CgogICAgLy9AZGV2IFJldHJpZXZpbmcgZ2lmdHMgYnkgdGVtcGxhdGUuCiAgICBmdW5jdGlvbiBnZXRHaWZ0c0J5VGVtcGxhdGVJZCh1aW50MjU2IHRlbXBsYXRlSWQpIAogICAgcHVibGljIAogICAgY29uc3RhbnQgCiAgICByZXR1cm5zKHVpbnQyNTZbXSBnaWZ0c0lkKSB7CiAgICAgICAgcmV0dXJuIGdpZnRUZW1wbGF0ZUlkVG9HaWZ0aWRzW3RlbXBsYXRlSWRdOwogICAgfQogCiAgICAvL0BkZXYgUmV0cmlldmluZ3MgYWxsIGdpZnQgdGVtcGxhdGUgaWRzCiAgICBmdW5jdGlvbiBnZXRBbGxHaWZ0VGVtcGxhdGVJZHMoKSAKICAgIHB1YmxpYyAKICAgIGNvbnN0YW50IAogICAgcmV0dXJucyh1aW50MjU2W10pIHsKICAgICAgICAKICAgICAgICBpZiAoZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnkubGVuZ3RoID4gMSkgewogICAgICAgICAgICB1aW50MjU2IHRoZUxlbmd0aCA9IGdpZnRUZW1wbGF0ZVN0b3JhZ2VBcnJ5Lmxlbmd0aCAtIDE7CiAgICAgICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0VGVtcElkcyA9IG5ldyB1aW50MjU2W10odGhlTGVuZ3RoKTsKICAgICAgICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CiAgICAgICAgICAgCiAgICAgICAgICAgIGZvciAodWludDI1NiBpID0gMTsgaSA8PSB0aGVMZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcmVzdWx0VGVtcElkc1tyZXN1bHRJbmRleF0gPSBpOwogICAgICAgICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFRlbXBJZHM7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUoZ2lmdFRlbXBsYXRlU3RvcmFnZUFycnkubGVuZ3RoID4gMSk7CiAgICAgICAKICAgIH0KCiAgICAvL0BkZXYgUmV0cmlldmluZyBnaWZ0IHRlbXBsYXRlIGJ5IGl0J3MgaWQKICAgIGZ1bmN0aW9uIGdldEdpZnRUZW1wbGF0ZUJ5SWQodWludDI1NiB0ZW1wbGF0ZUlkKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3RhbnQgcmV0dXJucygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9wcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9saW1pdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgX2ltZ1VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgX2dpZnROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKXsKICAgICAgICByZXF1aXJlKHRlbXBsYXRlSWQgPiAwKTsKICAgICAgICByZXF1aXJlKHRlbXBsYXRlSWQgPCBnaWZ0VGVtcGxhdGVTdG9yYWdlQXJyeS5sZW5ndGgpOwogICAgICAgIEdpZnRUZW1wbGF0ZVRva2VuIG1lbW9yeSBnaWZ0VGVtcGxhdGUgPSBnaWZ0VGVtcGxhdGVTdG9yYWdlQXJyeVt0ZW1wbGF0ZUlkXTsKICAgICAgICBfcHJpY2UgPSBnaWZ0VGVtcGxhdGUuZ2lmdFByaWNlOwogICAgICAgIF9saW1pdCA9IGdpZnRUZW1wbGF0ZS5naWZ0TGltaXQ7CiAgICAgICAgX2ltZ1VybCA9IGdpZnRUZW1wbGF0ZS5naWZ0SW1nVXJsOwogICAgICAgIF9naWZ0TmFtZSA9IGdpZnRUZW1wbGF0ZS5naWZ0TmFtZTsKICAgICAgICByZXR1cm4gKF9wcmljZSwgX2xpbWl0LCBfaW1nVXJsLCBfZ2lmdE5hbWUpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHJpZXZpbmcgZ2lmdCBpbmZvIGJ5IGdpZnQgaWQuCiAgICBmdW5jdGlvbiBnZXRHaWZ0KHVpbnQyNTYgX2dpZnRJZCkgCiAgICAgICAgICAgICAgICAgICAgcHVibGljIGNvbnN0YW50IHJldHVybnMgKAogICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgZ2lmdFR5cGUsCiAgICAgICAgICAgICAgICAgICAgdWludDI1NiBnaWZ0UHJpY2UsCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGltZ1VybCwKICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZ2lmdE5hbWUKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICByZXF1aXJlKF9naWZ0SWQgPCBnaWZ0U3RvcmFnZUFycnkubGVuZ3RoKTsKICAgICAgICBHaWZ0VG9rZW4gbWVtb3J5IGdUb2tlbiA9IGdpZnRTdG9yYWdlQXJyeVtfZ2lmdElkXTsKICAgICAgICBnaWZ0VHlwZSA9IGdUb2tlbi5naWZ0VHlwZTsKICAgICAgICBnaWZ0UHJpY2UgPSBnVG9rZW4uZ2lmdFByaWNlOwogICAgICAgIGltZ1VybCA9IGdUb2tlbi5naWZ0SW1nVXJsOwogICAgICAgIGdpZnROYW1lID0gZ1Rva2VuLmdpZnROYW1lOwogICAgICAgIHJldHVybiAoZ2lmdFR5cGUsIGdpZnRQcmljZSwgaW1nVXJsLCBnaWZ0TmFtZSk7CiAgICB9CgogICAgLy8vIEBkZXYgdHJhbnNmZXIgZ2lmdCB0byBhIG5ldyBvd25lci4KICAgIC8vLyBAcGFyYW0gX3RvIDogCiAgICAvLy8gQHBhcmFtIF9naWZ0SWQgOgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2dpZnRJZCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICByZXF1aXJlKGdpZnRFeGlzdHNbX2dpZnRJZF0pOwogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IF90byk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyT2YoX2dpZnRJZCkpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9naWZ0SWQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IGNoYW5nZSBHaWZ0byBjb250cmFjdCdzIGFkZHJlc3Mgb3IgYW5vdGhlciB0eXBlIG9mIHRva2VuLCBsaWtlIEV0aGVyLgogICAgLy8vIEBwYXJhbSBuZXdBZGRyZXNzIEdpZnRvIGNvbnRyYWN0IGFkZHJlc3MKICAgIGZ1bmN0aW9uIHNldEdpZnRvQWRkcmVzcyhhZGRyZXNzIG5ld0FkZHJlc3MpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIEdpZnRvID0gRVJDMjAobmV3QWRkcmVzcyk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFJldHJpZXZpbmcgR2lmdG8gY29udHJhY3QgYWRyZXNzCiAgICBmdW5jdGlvbiBnZXRHaWZ0b0FkZHJlc3MoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBnaWZ0b0FkZHJlc3MpIHsKICAgICAgICByZXR1cm4gYWRkcmVzcyhHaWZ0byk7CiAgICB9CgogICAgLy8vIEBkZXYgcmV0dXJucyB0b3RhbCBzdXBwbHkgZm9yIHRoaXMgdG9rZW4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljICBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KXsKICAgICAgICByZXR1cm4gZ2lmdFN0b3JhZ2VBcnJ5Lmxlbmd0aCAtIDE7CiAgICB9CiAgICAKICAgIC8vQGRldiAKICAgIC8vQHBhcmFtIF9vd25lciAKICAgIC8vQHJldHVybiAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgIHB1YmxpYyAgY29uc3RhbnQgIHJldHVybnMgKHVpbnQyNTYgZ2lmdFN1bSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQogICAgCiAgICAvLy8gQGRldiAKICAgIC8vLyBAcmV0dXJuIG93bmVyCiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX2dpZnRJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgX293bmVyKSB7CiAgICAgICAgcmVxdWlyZShnaWZ0RXhpc3RzW19naWZ0SWRdKTsKICAgICAgICByZXR1cm4gZ2lmdEluZGV4VG9Pd25lcnNbX2dpZnRJZF07CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IGFwcHJvdmVkIG93bmVyIAogICAgLy8vIEBwYXJhbSBfdG8gOgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfZ2lmdElkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lck9mKF9naWZ0SWQpKTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gX3RvKTsKICAgICAgICAKICAgICAgICBvd25lclRvQXBwcm92ZWRBZGRzVG9HaWZJZHNbbXNnLnNlbmRlcl1bX3RvXSA9IF9naWZ0SWQ7CiAgICAgICAgLy9FdGhlcmV1bSBFdmVudAogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX2dpZnRJZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IAogICAgLy8vIEBwYXJhbSBfb3duZXIgOiAKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgOgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBnaWZ0SWQpIHsKICAgICAgICByZXR1cm4gb3duZXJUb0FwcHJvdmVkQWRkc1RvR2lmSWRzW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQogICAgCiAgICAvLy8gQGRldiAKICAgIC8vLyBAcGFyYW0gX2dpZnRJZCA6CiAgICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX2dpZnRJZCkgcHVibGljIHsKICAgICAgICAvL0NoZWNrIGlmIGV4aXRzCiAgICAgICAgcmVxdWlyZShnaWZ0RXhpc3RzW19naWZ0SWRdKTsKICAgICAgICAKICAgICAgICBhZGRyZXNzIG9sZE93bmVyID0gb3duZXJPZihfZ2lmdElkKTsKICAgICAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IG9sZE93bmVyKTsKICAgICAgICAvL05ldyBvd25lciBoYXMgdG8gYmUgYXBwcm92ZWQgYnkgb2xkb3duZXIuCiAgICAgICAgcmVxdWlyZShvd25lclRvQXBwcm92ZWRBZGRzVG9HaWZJZHNbb2xkT3duZXJdW25ld093bmVyXSA9PSBfZ2lmdElkKTsKCiAgICAgICAgLy90cmFuc2ZlciBnaWZ0IGZvciBuZXcgb3duZXIKICAgICAgICBfdHJhbnNmZXIob2xkT3duZXIsIG5ld093bmVyLCBfZ2lmdElkKTsKICAgICAgICBkZWxldGUgb3duZXJUb0FwcHJvdmVkQWRkc1RvR2lmSWRzW29sZE93bmVyXVtuZXdPd25lcl07CiAgICAgICAgLy9FdGhlcmV1bSBFdmVudAogICAgICAgIFRyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX2dpZnRJZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IHRyYW5zZmVyIGdpZnQgZm9yIG5ldyBvd25lciAiX3RvIgogICAgLy8vIEBwYXJhbSBfZnJvbSA6IAogICAgLy8vIEBwYXJhbSBfdG8gOiAKICAgIC8vLyBAcGFyYW0gX2dpZnRJZCA6CiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2dpZnRJZCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIDEgPiBiYWxhbmNlc1tfdG9dKTsKICAgICAgICBiYWxhbmNlc1tfdG9dKys7CiAgICAgICAgZ2lmdEluZGV4VG9Pd25lcnNbX2dpZnRJZF0gPSBfdG87CiAgIAogICAgICAgIGlmIChfZnJvbSAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXS0tOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvL0V0aGVyZXVtIGV2ZW50LgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9naWZ0SWQpOwogICAgfQogICAgCiAgICAvLy8gQGRldiB0cmFuc2ZlciBHaWZ0IGZvciBuZXcgb3duZXIoX3RvKSB3aGljaCBpcyBhcHByb3ZlZC4KICAgIC8vLyBAcGFyYW0gX2Zyb20gOiBhZGRyZXNzIG9mIG93bmVyIG9mIGdpZnQKICAgIC8vLyBAcGFyYW0gX3RvIDogcmVjaXBpZW50IGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gX2dpZnRJZCA6IGdpZnQgaWQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfZ2lmdElkKSBleHRlcm5hbCB7CgogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIC8vQ2hlY2sgaWYgdGhpcyBzcGVuZGVyKF90bykgaXMgYXBwcm92ZWQgdG8gdGhlIGdpZnQuCiAgICAgICAgcmVxdWlyZShvd25lclRvQXBwcm92ZWRBZGRzVG9HaWZJZHNbX2Zyb21dW190b10gPT0gX2dpZnRJZCk7CiAgICAgICAgcmVxdWlyZShfZnJvbSA9PSBvd25lck9mKF9naWZ0SWQpKTsKCiAgICAgICAgLy9AZGV2IHJlYXNzaWduIG93bmVyc2hpcCBvZiB0aGUgZ2lmdC4gCiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF9naWZ0SWQpOwogICAgICAgIC8vRGVsZXRlIGFwcHJvdmVkIHNwZW5kZXIKICAgICAgICBkZWxldGUgb3duZXJUb0FwcHJvdmVkQWRkc1RvR2lmSWRzW19mcm9tXVtfdG9dOwogICAgfQogICAgCiAgICAvLy8gQGRldiBSZXRyaWV2aW5nIGdpZnRzIGJ5IGFkZHJlc3MgX293bmVyCiAgICBmdW5jdGlvbiBnaWZ0c09mT3duZXIoYWRkcmVzcyBfb3duZXIpICBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2W10gb3duZXJHaWZ0cykgewogICAgICAgIAogICAgICAgIHVpbnQyNTYgZ2lmdENvdW50ID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgaWYgKGdpZnRDb3VudCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdWludDI1NltdKDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnQyNTZbXShnaWZ0Q291bnQpOwogICAgICAgICAgICB1aW50MjU2IHRvdGFsID0gdG90YWxTdXBwbHkoKTsKICAgICAgICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICAgICAgICB1aW50MjU2IGdpZnRJZDsKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciAoZ2lmdElkID0gMDsgZ2lmdElkIDw9IHRvdGFsOyBnaWZ0SWQrKykgewogICAgICAgICAgICAgICAgaWYgKGdpZnRJbmRleFRvT3duZXJzW2dpZnRJZF0gPT0gX293bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4XSA9IGdpZnRJZDsKICAgICAgICAgICAgICAgICAgICByZXN1bHRJbmRleCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KICAgICAKICAgIC8vLyBAZGV2IHdpdGhkcmF3IEdUTyBhbmQgRVRIIGluIHRoaXMgY29udHJhY3QgCiAgICBmdW5jdGlvbiB3aXRoZHJhd0dUTygpIAogICAgb25seU93bmVyIAogICAgcHVibGljIHsgCiAgICAgICAgR2lmdG8udHJhbnNmZXIoZGVmYXVsdEdpZnRPd25lciwgR2lmdG8uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpKTsgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkKICAgIG9ubHlPd25lcgogICAgcHVibGljCiAgICByZXR1cm5zIChib29sKXsKICAgICAgICByZXR1cm4gZGVmYXVsdEdpZnRPd25lci5zZW5kKHRoaXMuYmFsYW5jZSk7CiAgICB9Cn0='.
	

]
