Class {
	#name : #SRTfcd674a2f572ffddc0b51bf87b60d8440427b95f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfcd674a2f572ffddc0b51bf87b60d8440427b95f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KfSAgICAKCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsgfQoKY29udHJhY3QgeDMyMzIzIGlzIG93bmVkewoKLy/oqK3lrprliJ3lp4vlgLwvLwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIGluaXRpYWxpemVkOwoKICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seU93bmVyIHsKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgfQoKICAgIC8vIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDI7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIHVpbnQyNTYgcHVibGljIG1heFN1cHBseSA9IDIzMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICB1aW50MjU2IGFpcmRyb3BBbW91bnQgPSAyMDAwMDAwICogMTAgKiogdWludDI1NihkZWNpbWFscyk7CiAgICB1aW50MjU2IGJvbmlzID0gMTAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwogICAgdWludDI1NiB0b3RhbGFpcmRyb3AgPSAgODAwMDAwMCAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpOwoKLy/liJ3lp4vljJYvLwoKICAgIGZ1bmN0aW9uIFRva2VuRVJDMjAoCiAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICApIHB1YmxpYyB7Cglpbml0aWFsU3VwcGx5ID0gbWF4U3VwcGx5IC0gdG90YWxhaXJkcm9wOwogICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsKICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsKCWluaXRpYWxpemVkW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBuYW1lID0gIua4rOippjE0IjsKICAgICAgICBzeW1ib2wgPSAi5ris6KmmMTQiOyAgICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoYWRkcmVzcyBfYWRkcmVzcykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIGlmICh0b3RhbFN1cHBseSA8PSAobWF4U3VwcGx5IC0gYWlyZHJvcEFtb3VudCkgJiYgIWluaXRpYWxpemVkW19hZGRyZXNzXSkgewogICAgICAgICAgICBpbml0aWFsaXplZFtfYWRkcmVzc10gPSB0cnVlIDsKICAgICAgICAgICAgYmFsYW5jZU9mW19hZGRyZXNzXSArPSBhaXJkcm9wQW1vdW50OwogICAgICAgICAgICB0b3RhbFN1cHBseSArPSBhaXJkcm9wQW1vdW50OwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmV3YXJkKGFkZHJlc3MgX2FkZHJlc3MpIGludGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoJaWYgKHRvdGFsU3VwcGx5IDwgbWF4U3VwcGx5KSB7CiAgICAgICAgCWJhbGFuY2VPZltfYWRkcmVzc10gKz0gYWlyZHJvcEFtb3VudDsKICAgICAgICAJdG90YWxTdXBwbHkgKz0gYWlyZHJvcEFtb3VudDsKICAgICAgICAJcmV0dXJuIHRydWU7Cgl9CiAgICB9Ci8v5Lqk5piTLy8KCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CglyZXF1aXJlKCFmcm96ZW5BY2NvdW50W19mcm9tXSk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7CgkKCWluaXRpYWxpemUoX2Zyb20pOwoJcmV3YXJkKF9mcm9tKTsKCWluaXRpYWxpemUoX3RvKTsKCiAgICAgICAgLy91aW50IHByZXZpb3VzQmFsYW5jZXMgPSBiYWxhbmNlT2ZbX2Zyb21dICsgYmFsYW5jZU9mW190b107CgkgICAKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgLy9hc3NlcnQoYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgICAgIAogICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICAKCWlmKG1zZy5zZW5kZXIuYmFsYW5jZSA8IG1pbkJhbGFuY2VGb3JBY2NvdW50cykKICAgICAgICAgICAgc2VsbCgobWluQmFsYW5jZUZvckFjY291bnRzIC0gbXNnLnNlbmRlci5iYWxhbmNlKSAvIHNlbGxQcmljZSk7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KCgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCi8v6LKp5ZSuLy8KCiAgICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7CiAgICB1aW50MjU2IHB1YmxpYyBidXlQcmljZTsKCiAgICBmdW5jdGlvbiBzZXRQcmljZXModWludDI1NiBuZXdTZWxsUHJpY2UsIHVpbnQyNTYgbmV3QnV5UHJpY2UpIG9ubHlPd25lciB7CiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlOwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSByZXR1cm5zICh1aW50IGFtb3VudCl7CiAgICAgICAgYW1vdW50ID0gbXNnLnZhbHVlIC8gYnV5UHJpY2U7ICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVzIHRoZSBhbW91bnQKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlt0aGlzXSA+PSBhbW91bnQpOyAgICAgICAgICAgICAgIC8vIGNoZWNrcyBpZiBpdCBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OyAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgICAvLyBleGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQogICAgICAgIHJldHVybiBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kcyBmdW5jdGlvbiBhbmQgcmV0dXJucwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbGwodWludCBhbW91bnQpIHJldHVybnMgKHVpbnQgcmV2ZW51ZSl7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gYW1vdW50KTsgICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gKz0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBvd25lcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyB0aGUgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIHJldmVudWUgPSBhbW91bnQgKiBzZWxsUHJpY2U7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZXZlbnVlKTsgICAgICAgICAgICAgICAgICAgICAvLyBzZW5kcyBldGhlciB0byB0aGUgc2VsbGVyOiBpdCdzIGltcG9ydGFudCB0byBkbyB0aGlzIGxhc3QgdG8gcHJldmVudCByZWN1cnNpb24gYXR0YWNrcwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7ICAgICAgICAgICAgICAgLy8gZXhlY3V0ZXMgYW4gZXZlbnQgcmVmbGVjdGluZyBvbiB0aGUgY2hhbmdlCiAgICAgICAgcmV0dXJuIHJldmVudWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmRzIGZ1bmN0aW9uIGFuZCByZXR1cm5zCiAgICB9CgoKICAgIHVpbnQgbWluQmFsYW5jZUZvckFjY291bnRzOwogICAgCiAgICBmdW5jdGlvbiBzZXRNaW5CYWxhbmNlKHVpbnQgbWluaW11bUJhbGFuY2VJbkZpbm5leSkgb25seU93bmVyIHsKICAgICAgICAgbWluQmFsYW5jZUZvckFjY291bnRzID0gbWluaW11bUJhbGFuY2VJbkZpbm5leSAqIDEgZmlubmV5OwogICAgfQoKfQ=='.
	

]
