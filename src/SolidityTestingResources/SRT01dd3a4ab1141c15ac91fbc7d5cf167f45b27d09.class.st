Class {
	#name : #SRT01dd3a4ab1141c15ac91fbc7d5cf167f45b27d09,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT01dd3a4ab1141c15ac91fbc7d5cf167f45b27d09 >> base64 [
	^ ''.
	

]
