Class {
	#name : #SRT925B8C327d0065827977D08f8009Dba33ad9f450,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT925B8C327d0065827977D08f8009Dba33ad9f450 >> base64 [
	^ ''.
	

]
