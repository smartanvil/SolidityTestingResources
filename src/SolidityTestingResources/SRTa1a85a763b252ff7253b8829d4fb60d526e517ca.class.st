Class {
	#name : #SRTa1a85a763b252ff7253b8829d4fb60d526e517ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1a85a763b252ff7253b8829d4fb60d526e517ca >> base64 [
	^ ''.
	

]
