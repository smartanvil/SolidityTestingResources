Class {
	#name : #SRT5cb5d4a198a253e21212c72c27b51558d19e3a57,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5cb5d4a198a253e21212c72c27b51558d19e3a57 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovLy8gQHRpdGxlIHByb3ZpZGVzIHN1YmplY3QgdG8gcm9sZSBjaGVja2luZyBsb2dpYwpjb250cmFjdCBJQWNjZXNzUG9saWN5IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFdlIGRvbid0IG1ha2UgdGhpcyBmdW5jdGlvbiBjb25zdGFudCB0byBhbGxvdyBmb3Igc3RhdGUtdXBkYXRpbmcgYWNjZXNzIGNvbnRyb2xzIHN1Y2ggYXMgcmF0ZSBsaW1pdGluZy4KICAgIC8vLyBAZGV2IGNoZWNrcyBpZiBzdWJqZWN0IGJlbG9uZ3MgdG8gcmVxdWVzdGVkIHJvbGUgZm9yIHBhcnRpY3VsYXIgb2JqZWN0CiAgICAvLy8gQHBhcmFtIHN1YmplY3QgYWRkcmVzcyB0byBiZSBjaGVja2VkIGFnYWluc3Qgcm9sZSwgdHlwaWNhbGx5IG1zZy5zZW5kZXIKICAgIC8vLyBAcGFyYW0gcm9sZSBpZGVudGlmaWVyIG9mIHJlcXVpcmVkIHJvbGUKICAgIC8vLyBAcGFyYW0gb2JqZWN0IGNvbnRyYWN0IGluc3RhbmNlIGNvbnRleHQgZm9yIHJvbGUgY2hlY2tpbmcsIHR5cGljYWxseSBjb250cmFjdCByZXF1ZXN0aW5nIHRoZSBjaGVjawogICAgLy8vIEBwYXJhbSB2ZXJiIGFkZGl0aW9uYWwgZGF0YSwgaW4gY3VycmVudCBBY2Nlc3NDb250cm9sbCBpbXBsZW1lbnRhdGlvbiBtc2cuc2lnCiAgICAvLy8gQHJldHVybiBpZiBzdWJqZWN0IGJlbG9uZ3MgdG8gYSByb2xlCiAgICBmdW5jdGlvbiBhbGxvd2VkKAogICAgICAgIGFkZHJlc3Mgc3ViamVjdCwKICAgICAgICBieXRlczMyIHJvbGUsCiAgICAgICAgYWRkcmVzcyBvYmplY3QsCiAgICAgICAgYnl0ZXM0IHZlcmIKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKTsKfQoKLy8vIEB0aXRsZSBlbmFibGVzIGFjY2VzcyBjb250cm9sIGluIGltcGxlbWVudGluZyBjb250cmFjdAovLy8gQGRldiBzZWUgQWNjZXNzQ29udHJvbGxlZCBmb3IgaW1wbGVtZW50YXRpb24KY29udHJhY3QgSUFjY2Vzc0NvbnRyb2xsZWQgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gRXZlbnRzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBtdXN0IGxvZyBvbiBhY2Nlc3MgcG9saWN5IGNoYW5nZQogICAgZXZlbnQgTG9nQWNjZXNzUG9saWN5Q2hhbmdlZCgKICAgICAgICBhZGRyZXNzIGNvbnRyb2xsZXIsCiAgICAgICAgSUFjY2Vzc1BvbGljeSBvbGRQb2xpY3ksCiAgICAgICAgSUFjY2Vzc1BvbGljeSBuZXdQb2xpY3kKICAgICk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBhbGxvd3MgdG8gY2hhbmdlIGFjY2VzcyBjb250cm9sIG1lY2hhbmlzbSBmb3IgdGhpcyBjb250cmFjdAogICAgLy8vICAgICB0aGlzIG1ldGhvZCBtdXN0IGJlIGl0c2VsZiBhY2Nlc3MgY29udHJvbGxlZCwgc2VlIEFjY2Vzc0NvbnRyb2xsZWQgaW1wbGVtZW50YXRpb24gYW5kIG5vdGljZSBiZWxvdwogICAgLy8vIEBub3RpY2UgaXQgaXMgYSBodWdlIGlzc3VlIGZvciBTb2xpZGl0eSB0aGF0IG1vZGlmaWVycyBhcmUgbm90IHBhcnQgb2YgZnVuY3Rpb24gc2lnbmF0dXJlCiAgICAvLy8gICAgIHRoZW4gaW50ZXJmYWNlcyBjb3VsZCBiZSB1c2VkIGZvciBleGFtcGxlIHRvIGNvbnRyb2wgYWNjZXNzIHNlbWFudGljcwogICAgLy8vIEBwYXJhbSBuZXdQb2xpY3kgbmV3IGFjY2VzcyBwb2xpY3kgdG8gY29udHJvbGwgdGhpcyBjb250cmFjdAogICAgLy8vIEBwYXJhbSBuZXdBY2Nlc3NDb250cm9sbGVyIGFkZHJlc3Mgb2YgUk9MRV9BQ0NFU1NfQ09OVFJPTExFUiBvZiBuZXcgcG9saWN5IHRoYXQgY2FuIHNldCBhY2Nlc3MgdG8gdGhpcyBjb250cmFjdAogICAgZnVuY3Rpb24gc2V0QWNjZXNzUG9saWN5KElBY2Nlc3NQb2xpY3kgbmV3UG9saWN5LCBhZGRyZXNzIG5ld0FjY2Vzc0NvbnRyb2xsZXIpCiAgICAgICAgcHVibGljOwoKICAgIGZ1bmN0aW9uIGFjY2Vzc1BvbGljeSgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChJQWNjZXNzUG9saWN5KTsKCn0KCmNvbnRyYWN0IFN0YW5kYXJkUm9sZXMgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gQ29uc3RhbnRzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBAbm90aWNlIFNvbGRpdHkgc29tZWhvdyBkb2Vzbid0IGV2YWx1YXRlIHRoaXMgY29tcGlsZSB0aW1lCiAgICAvLyBAZGV2IHJvbGUgd2hpY2ggaGFzIHJpZ2h0cyB0byBjaGFuZ2UgcGVybWlzc2lvbnMgYW5kIHNldCBuZXcgcG9saWN5IGluIGNvbnRyYWN0LCBrZWNjYWsyNTYoIkFjY2Vzc0NvbnRyb2xsZXIiKQogICAgYnl0ZXMzMiBpbnRlcm5hbCBjb25zdGFudCBST0xFX0FDQ0VTU19DT05UUk9MTEVSID0gMHhhYzQyZjhiZWIxNzk3NWVkMDYyZGNiODBjNjNlNmQyMDNlZjFjMmMzMzVjZWQxNDlkYzU2NjRjYzY3MWNiN2RhOwp9CgovLy8gQHRpdGxlIEdyYW51bGFyIGNvZGUgZXhlY3V0aW9uIHBlcm1pc3Npb25zCi8vLyBAbm90aWNlIEludGVuZGVkIHRvIHJlcGxhY2UgZXhpc3RpbmcgT3duYWJsZSBwYXR0ZXJuIHdpdGggbW9yZSBncmFudWxhciBwZXJtaXNzaW9ucyBzZXQgdG8gZXhlY3V0ZSBzbWFydCBjb250cmFjdCBmdW5jdGlvbnMKLy8vICAgICBmb3IgZWFjaCBmdW5jdGlvbiB3aGVyZSAnb25seScgbW9kaWZpZXIgaXMgYXBwbGllZCwgSUFjY2Vzc1BvbGljeSBpbXBsZW1lbnRhdGlvbiBpcyBjYWxsZWQgdG8gZXZhbHVhdGUgaWYgbXNnLnNlbmRlciBiZWxvbmdzIHRvIHJlcXVpcmVkIHJvbGUgZm9yIGNvbnRyYWN0IGJlaW5nIGNhbGxlZC4KLy8vICAgICBBY2Nlc3MgZXZhbHVhdGlvbiBzcGVjaWZpYyBiZWxvbmcgdG8gSUFjY2Vzc1BvbGljeSBpbXBsZW1lbnRhdGlvbiwgc2VlIFJvbGVCYXNlZEFjY2Vzc1BvbGljeSBmb3IgZGV0YWlscy4KLy8vIEBkZXYgU2hvdWxkIGJlIGluaGVyaXRlZCBieSBhIGNvbnRyYWN0IHJlcXVpcmluZyBzdWNoIHBlcm1pc3Npb25zIGNvbnRyb2xsLiBJQWNjZXNzUG9saWN5IG11c3QgYmUgcHJvdmlkZWQgaW4gY29uc3RydWN0b3IuIEFjY2VzcyBwb2xpY3kgbWF5IGJlIHJlcGxhY2VkIHRvIGEgZGlmZmVyZW50IG9uZQovLy8gICAgIGJ5IG1zZy5zZW5kZXIgd2l0aCBST0xFX0FDQ0VTU19DT05UUk9MTEVSIHJvbGUKY29udHJhY3QgQWNjZXNzQ29udHJvbGxlZCBpcyBJQWNjZXNzQ29udHJvbGxlZCwgU3RhbmRhcmRSb2xlcyB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBJQWNjZXNzUG9saWN5IHByaXZhdGUgX2FjY2Vzc1BvbGljeTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE1vZGlmaWVycwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgbGltaXRzIGZ1bmN0aW9uIGV4ZWN1dGlvbiBvbmx5IHRvIHNlbmRlcnMgYXNzaWduZWQgdG8gcmVxdWlyZWQgJ3JvbGUnCiAgICBtb2RpZmllciBvbmx5KGJ5dGVzMzIgcm9sZSkgewogICAgICAgIHJlcXVpcmUoX2FjY2Vzc1BvbGljeS5hbGxvd2VkKG1zZy5zZW5kZXIsIHJvbGUsIHRoaXMsIG1zZy5zaWcpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gQ29uc3RydWN0b3IKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIEFjY2Vzc0NvbnRyb2xsZWQoSUFjY2Vzc1BvbGljeSBwb2xpY3kpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3MocG9saWN5KSAhPSAweDApOwogICAgICAgIF9hY2Nlc3NQb2xpY3kgPSBwb2xpY3k7CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBJQWNjZXNzQ29udHJvbGxlZAogICAgLy8KCiAgICBmdW5jdGlvbiBzZXRBY2Nlc3NQb2xpY3koSUFjY2Vzc1BvbGljeSBuZXdQb2xpY3ksIGFkZHJlc3MgbmV3QWNjZXNzQ29udHJvbGxlcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5KFJPTEVfQUNDRVNTX0NPTlRST0xMRVIpCiAgICB7CiAgICAgICAgLy8gUk9MRV9BQ0NFU1NfQ09OVFJPTExFUiBtdXN0IGJlIHByZXNlbnQKICAgICAgICAvLyB1bmRlciB0aGUgbmV3IHBvbGljeS4gVGhpcyBwcm92aWRlcyBzb21lCiAgICAgICAgLy8gcHJvdGVjdGlvbiBhZ2FpbnN0IGxvY2tpbmcgeW91cnNlbGYgb3V0LgogICAgICAgIHJlcXVpcmUobmV3UG9saWN5LmFsbG93ZWQobmV3QWNjZXNzQ29udHJvbGxlciwgUk9MRV9BQ0NFU1NfQ09OVFJPTExFUiwgdGhpcywgbXNnLnNpZykpOwoKICAgICAgICAvLyBXZSBjYW4gbm93IHNhZmVseSBzZXQgdGhlIG5ldyBwb2xpY3kgd2l0aG91dCBmb290IHNob290aW5nLgogICAgICAgIElBY2Nlc3NQb2xpY3kgb2xkUG9saWN5ID0gX2FjY2Vzc1BvbGljeTsKICAgICAgICBfYWNjZXNzUG9saWN5ID0gbmV3UG9saWN5OwoKICAgICAgICAvLyBMb2cgZXZlbnQKICAgICAgICBMb2dBY2Nlc3NQb2xpY3lDaGFuZ2VkKG1zZy5zZW5kZXIsIG9sZFBvbGljeSwgbmV3UG9saWN5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBhY2Nlc3NQb2xpY3koKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoSUFjY2Vzc1BvbGljeSkKICAgIHsKICAgICAgICByZXR1cm4gX2FjY2Vzc1BvbGljeTsKICAgIH0KfQoKY29udHJhY3QgQWNjZXNzUm9sZXMgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gQ29uc3RhbnRzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBOT1RFOiBBbGwgcm9sZXMgYXJlIHNldCB0byB0aGUga2VjY2FrMjU2IGhhc2ggb2YgdGhlCiAgICAvLyBDYW1lbENhc2VkIHJvbGUgbmFtZSwgaS5lLgogICAgLy8gUk9MRV9MT0NLRURfQUNDT1VOVF9BRE1JTiA9IGtlY2NhazI1NigiTG9ja2VkQWNjb3VudEFkbWluIikKCiAgICAvLyBtYXkgc2V0dXAgTG9ja2VkQWNjb3VudCwgY2hhbmdlIGRpc2J1cnNhbCBtZWNoYW5pc20gYW5kIHNldCBtaWdyYXRpb24KICAgIGJ5dGVzMzIgaW50ZXJuYWwgY29uc3RhbnQgUk9MRV9MT0NLRURfQUNDT1VOVF9BRE1JTiA9IDB4NDY3NWRhNTQ2ZDJkOTJjNWI4NmM0ZjcyNmE5ZTYxMDEwZGNlOTFjY2NjMjQ5MWNlNjAxOWU3OGIwOWQyNTcyZTsKCiAgICAvLyBtYXkgc2V0dXAgd2hpdGVsaXN0cyBhbmQgYWJvcnQgd2hpdGVsaXN0aW5nIGNvbnRyYWN0IHdpdGggY3VydmUgcm9sbGJhY2sKICAgIGJ5dGVzMzIgaW50ZXJuYWwgY29uc3RhbnQgUk9MRV9XSElURUxJU1RfQURNSU4gPSAweGFlZjQ1NmU3Yzg2NDQxOGUxZDJhNDBkOTk2Y2E0ZmViZjNhN2UzMTdmZTNhZjVhN2VhNGRkYTU5MDMzYmJlNWM7CgogICAgLy8gTWF5IGlzc3VlIChnZW5lcmF0ZSkgTmV1bWFya3MKICAgIGJ5dGVzMzIgaW50ZXJuYWwgY29uc3RhbnQgUk9MRV9ORVVNQVJLX0lTU1VFUiA9IDB4OTIxYzNhZmExZjFmZmY3MDdhNzg1Zjk1M2ExZTE5N2JkMjhjOWM1MGUzMDA0MjRlMDE1OTUzY2JmMTIwYzA2YzsKCiAgICAvLyBNYXkgYnVybiBOZXVtYXJrcyBpdCBvd25zCiAgICBieXRlczMyIGludGVybmFsIGNvbnN0YW50IFJPTEVfTkVVTUFSS19CVVJORVIgPSAweDE5Y2UzMzEyODVmNDE3MzljZDMzNjJhM2VjMTc2ZWRmZmUwMTQzMTFjMGY4MDc1ODM0ZmRkMTlkNjcxOGU2OWY7CgogICAgLy8gTWF5IGNyZWF0ZSBuZXcgc25hcHNob3RzIG9uIE5ldW1hcmsKICAgIGJ5dGVzMzIgaW50ZXJuYWwgY29uc3RhbnQgUk9MRV9TTkFQU0hPVF9DUkVBVE9SID0gMHgwOGMxNzg1YWZjNTdmOTMzNTIzYmM1MjU4M2E3MmNlOWUxOWIyMjQxMzU0ZTA0ZGQ4NmY0MWY4ODdlM2Q4MTc0OwoKICAgIC8vIE1heSBlbmFibGUvZGlzYWJsZSB0cmFuc2ZlcnMgb24gTmV1bWFyawogICAgYnl0ZXMzMiBpbnRlcm5hbCBjb25zdGFudCBST0xFX1RSQU5TRkVSX0FETUlOID0gMHhiNjUyN2U5NDRjYWNhM2QxNTFiMWY5NGU0OWFjNWUyMjMxNDI2OTQ4NjA3NDNlNjYxNjQ3MjBlMDM0ZWM5YjE5OwoKICAgIC8vIG1heSByZWNsYWltIHRva2Vucy9ldGhlciBmcm9tIGNvbnRyYWN0cyBzdXBwb3J0aW5nIElSZWNsYWltYWJsZSBpbnRlcmZhY2UKICAgIGJ5dGVzMzIgaW50ZXJuYWwgY29uc3RhbnQgUk9MRV9SRUNMQUlNRVIgPSAweDA1NDJiYmQwYzY3MjU3ODk2NmRjYzUyNWIzMGFhMTY3MjNiYjA0MjY3NTU1NGFjNWIwMzYyZjg2YjZlOTdkYzU7CgogICAgLy8gcmVwcmVzZW50cyBsZWdhbGx5IHBsYXRmb3JtIG9wZXJhdG9yIGluIGNhc2Ugb2YgZm9ya3MgYW5kIGNvbnRyYWN0cyB3aXRoIGxlZ2FsIGFncmVlbWVudCBhdHRhY2hlZC4ga2VjY2FrMjU2KCJQbGF0Zm9ybU9wZXJhdG9yUmVwcmVzZW50YXRpdmUiKQogICAgYnl0ZXMzMiBpbnRlcm5hbCBjb25zdGFudCBST0xFX1BMQVRGT1JNX09QRVJBVE9SX1JFUFJFU0VOVEFUSVZFID0gMHhiMmIzMjEzNzc2NTNmNjU1MjA2ZjcxNTE0ZmY5ZjE1MGQwODIyZDA2MmE1YWJjZjIyMGQ1NDllMWRhNzk5OWYwOwoKICAgIC8vIGFsbG93cyB0byBkZXBvc2l0IEVVUi1UIGFuZCBhbGxvdyBhZGRyZXNzZXMgdG8gc2VuZCBhbmQgcmVjZWl2ZSBFVVItVC4ga2VjY2FrMjU2KCJFdXJ0RGVwb3NpdE1hbmFnZXIiKQogICAgYnl0ZXMzMiBpbnRlcm5hbCBjb25zdGFudCBST0xFX0VVUlRfREVQT1NJVF9NQU5BR0VSID0gMHg3YzhlY2RjYmE4MGNlODc4NDhkMTZhZDc3ZWY1N2NjMTk2YzIwOGZjOTVjNTYzOGU0YTQ4YzY4MWEzNGQ0ZmU3Owp9Cgpjb250cmFjdCBJc0NvbnRyYWN0IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEludGVybmFsIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludDI1NiBzaXplOwogICAgICAgIC8vIHRha2VzIDcwMCBnYXMKICAgICAgICBhc3NlbWJseSB7IHNpemUgOj0gZXh0Y29kZXNpemUoYWRkcikgfQogICAgICAgIHJldHVybiBzaXplID4gMDsKICAgIH0KfQoKY29udHJhY3QgSUJhc2ljVG9rZW4gewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gRXZlbnRzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBldmVudCBUcmFuc2ZlcigKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgZnJvbSwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgdG8sCiAgICAgICAgdWludDI1NiBhbW91bnQpOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucwogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpOwoKICAgIC8vLyBAcGFyYW0gb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBvZiBgb3duZXJgIGF0IHRoZSBjdXJyZW50IGJsb2NrCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBvd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2UgU2VuZCBgYW1vdW50YCB0b2tlbnMgdG8gYHRvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKfQoKLy8vIEB0aXRsZSBhbGxvd3MgZGVyaXZpbmcgY29udHJhY3QgdG8gcmVjb3ZlciBhbnkgdG9rZW4gb3IgZXRoZXIgdGhhdCBpdCBoYXMgYmFsYW5jZSBvZgovLy8gQG5vdGljZSBub3RlIHRoYXQgdGhpcyBvcGVucyB5b3VyIGNvbnRyYWN0cyB0byBjbGFpbXMgZnJvbSB2YXJpb3VzIHBlb3BsZSBzYXlpbmcgdGhleSBsb3N0IHRva2VucyBhbmQgdGhleSB3YW50IHRoZW0gYmFjawovLy8gICAgIGJlIHJlYWR5IHRvIGhhbmRsZSBzdWNoIGNsYWltcwovLy8gQGRldiB1c2Ugd2l0aCBjYXJlIQovLy8gICAgIDEuIFJPTEVfUkVDTEFJTUVSIGlzIGFsbG93ZWQgdG8gY2xhaW0gdG9rZW5zLCBpdCdzIG5vdCByZXR1cm5pbmcgdG9rZW5zIHRvIG9yaWdpbmFsIG93bmVyCi8vLyAgICAgMi4gaW4gZGVyaXZlZCBjb250cmFjdCB0aGF0IGhvbGRzIGFueSB0b2tlbiBieSBkZXNpZ24geW91IG11c3Qgb3ZlcnJpZGUgYHJlY2xhaW1gIGFuZCBibG9jayBzdWNoIHBvc3NpYmlsaXR5LgovLy8gICAgICAgICBzZWUgTG9ja2VkQWNjb3VudCBhcyBhbiBleGFtcGxlCmNvbnRyYWN0IFJlY2xhaW1hYmxlIGlzIEFjY2Vzc0NvbnRyb2xsZWQsIEFjY2Vzc1JvbGVzIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIENvbnN0YW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgSUJhc2ljVG9rZW4gY29uc3RhbnQgaW50ZXJuYWwgUkVDTEFJTV9FVEhFUiA9IElCYXNpY1Rva2VuKDB4MCk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiByZWNsYWltKElCYXNpY1Rva2VuIHRva2VuKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHkoUk9MRV9SRUNMQUlNRVIpCiAgICB7CiAgICAgICAgYWRkcmVzcyByZWNsYWltZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGlmKHRva2VuID09IFJFQ0xBSU1fRVRIRVIpIHsKICAgICAgICAgICAgcmVjbGFpbWVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdWludDI1NiBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKHRoaXMpOwogICAgICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKHJlY2xhaW1lciwgYmFsYW5jZSkpOwogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgSVRva2VuTWV0YWRhdGEgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gc3ltYm9sKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHN0cmluZyk7CgogICAgZnVuY3Rpb24gbmFtZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChzdHJpbmcpOwoKICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQ4KTsKfQoKLy8vIEB0aXRsZSBhZGRzIHRva2VuIG1ldGFkYXRhIHRvIHRva2VuIGNvbnRyYWN0Ci8vLyBAZGV2IHNlZSBOZXVtYXJrIGZvciBleGFtcGxlIGltcGxlbWVudGF0aW9uCmNvbnRyYWN0IFRva2VuTWV0YWRhdGEgaXMgSVRva2VuTWV0YWRhdGEgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW1tdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBUaGUgVG9rZW4ncyBuYW1lOiBlLmcuIERpZ2l4REFPIFRva2VucwogICAgc3RyaW5nIHByaXZhdGUgTkFNRTsKCiAgICAvLyBBbiBpZGVudGlmaWVyOiBlLmcuIFJFUAogICAgc3RyaW5nIHByaXZhdGUgU1lNQk9MOwoKICAgIC8vIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgdWludDggcHJpdmF0ZSBERUNJTUFMUzsKCiAgICAvLyBBbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUKICAgIHN0cmluZyBwcml2YXRlIFZFUlNJT047CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IgdG8gc2V0IG1ldGFkYXRhCiAgICAvLy8gQHBhcmFtIHRva2VuTmFtZSBOYW1lIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIHRva2VuU3ltYm9sIFRva2VuIFN5bWJvbCBmb3IgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSB2ZXJzaW9uIFRva2VuIHZlcnNpb24gaWUuIHdoZW4gY2xvbmluZyBpcyB1c2VkCiAgICBmdW5jdGlvbiBUb2tlbk1ldGFkYXRhKAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbCwKICAgICAgICBzdHJpbmcgdmVyc2lvbgogICAgKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIE5BTUUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lCiAgICAgICAgU1lNQk9MID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbAogICAgICAgIERFQ0lNQUxTID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkZWNpbWFscwogICAgICAgIFZFUlNJT04gPSB2ZXJzaW9uOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gbmFtZSgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIE5BTUU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHN0cmluZykKICAgIHsKICAgICAgICByZXR1cm4gU1lNQk9MOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQ4KQogICAgewogICAgICAgIHJldHVybiBERUNJTUFMUzsKICAgIH0KCiAgICBmdW5jdGlvbiB2ZXJzaW9uKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHN0cmluZykKICAgIHsKICAgICAgICByZXR1cm4gVkVSU0lPTjsKICAgIH0KfQoKY29udHJhY3QgSUVSQzIyM0NhbGxiYWNrIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIG9uVG9rZW5UcmFuc2ZlcigKICAgICAgICBhZGRyZXNzIGZyb20sCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgYnl0ZXMgZGF0YQogICAgKQogICAgICAgIHB1YmxpYzsKCn0KCmNvbnRyYWN0IElFUkMyMjNUb2tlbiBpcyBJQmFzaWNUb2tlbiB7CgogICAgLy8vIEBkZXYgRGVwYXJ0dXJlOiBXZSBkbyBub3QgbG9nIGRhdGEsIGl0IGhhcyBubyBhZHZhbnRhZ2Ugb3ZlciBhIHN0YW5kYXJkCiAgICAvLy8gICAgIGxvZyBldmVudC4gQnkgc3RpY2tpbmcgdG8gdGhlIHN0YW5kYXJkIGxvZyBldmVudCB3ZQogICAgLy8vICAgICBzdGF5IGNvbXBhdGlibGUgd2l0aCBjb25zdHJhY3RzIHRoYXQgZXhwZWN0IGFuZCBFUkMyMCB0b2tlbi4KCiAgICAvLyBldmVudCBUcmFuc2ZlcigKICAgIC8vICAgIGFkZHJlc3MgaW5kZXhlZCBmcm9tLAogICAgLy8gICAgYWRkcmVzcyBpbmRleGVkIHRvLAogICAgLy8gICAgdWludDI1NiBhbW91bnQsCiAgICAvLyAgICBieXRlcyBkYXRhKTsKCgogICAgLy8vIEBkZXYgRGVwYXJ0dXJlOiBXZSBkbyBub3QgdXNlIHRoZSBjYWxsYmFjayBvbiByZWd1bGFyIHRyYW5zZmVyIGNhbGxzIHRvCiAgICAvLy8gICAgIHN0YXkgY29tcGF0aWJsZSB3aXRoIGNvbnN0cmFjdHMgdGhhdCBleHBlY3QgYW5kIEVSQzIwIHRva2VuLgoKICAgIC8vIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KQogICAgLy8gICAgIHB1YmxpYwogICAgLy8gICAgIHJldHVybnMgKGJvb2wpOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQsIGJ5dGVzIGRhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IElFUkMyMEFsbG93YW5jZSB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBFdmVudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGV2ZW50IEFwcHJvdmFsKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBvd25lciwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwKICAgICAgICB1aW50MjU2IGFtb3VudCk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc3kgdG8gcmVhZCB0aGUgYGFsbG93ZWRbXWAgbWFwCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGUgdG9rZW4KICAgIC8vLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIG9mIG93bmVyIHRoYXQgc3BlbmRlciBpcyBhbGxvd2VkCiAgICAvLy8gIHRvIHNwZW5kCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgc3BlbmRlcmAgdG8gc3BlbmQgYGFtb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYuIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBFUkMyMCBhcHByb3ZlIGZ1bmN0aW9uCiAgICAvLy8gIHRvIGJlIGEgbGl0dGxlIGJpdCBzYWZlcgogICAgLy8vIEBwYXJhbSBzcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgYW1vdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2UgU2VuZCBgYW1vdW50YCB0b2tlbnMgdG8gYHRvYCBmcm9tIGBmcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBmcm9tYAogICAgLy8vIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIHRva2VucyBiZWluZyB0cmFuc2ZlcnJlZAogICAgLy8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cgp9Cgpjb250cmFjdCBJRVJDMjBUb2tlbiBpcyBJQmFzaWNUb2tlbiwgSUVSQzIwQWxsb3dhbmNlIHsKCn0KCmNvbnRyYWN0IElFUkM2NzdDYWxsYmFjayB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBOT1RFOiBUaGlzIGNhbGwgY2FuIGJlIGluaXRpYXRlZCBieSBhbnlvbmUuIFlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0CiAgICAvLyBpdCBpcyBzZW5kIGJ5IHRoZSB0b2tlbiAoYHJlcXVpcmUobXNnLnNlbmRlciA9PSB0b2tlbilgKSBvciBtYWtlIHN1cmUKICAgIC8vIGFtb3VudCBpcyB2YWxpZCAoYHJlcXVpcmUodG9rZW4uYWxsb3dhbmNlKHRoaXMpID49IGFtb3VudClgKS4KICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbCgKICAgICAgICBhZGRyZXNzIGZyb20sCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgYWRkcmVzcyB0b2tlbiwgLy8gSUVSQzY2N1Rva2VuCiAgICAgICAgYnl0ZXMgZGF0YQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cgp9Cgpjb250cmFjdCBJRVJDNjc3QWxsb3dhbmNlIGlzIElFUkMyMEFsbG93YW5jZSB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYHNwZW5kZXJgIHRvIHNlbmQgYGFtb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYsIGFuZCB0aGVuIGEgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzCiAgICAvLy8gIGJlaW5nIGFwcHJvdmVkLCBgc3BlbmRlcmAuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIHVzZSB0aGVpciB0b2tlbnMgdG8KICAgIC8vLyAgaW50ZXJhY3Qgd2l0aCBjb250cmFjdHMgaW4gb25lIGZ1bmN0aW9uIGNhbGwgaW5zdGVhZCBvZiB0d28KICAgIC8vLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3QgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGZ1bmN0aW9uIGNhbGwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiBhbW91bnQsIGJ5dGVzIGV4dHJhRGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKfQoKY29udHJhY3QgSUVSQzY3N1Rva2VuIGlzIElFUkMyMFRva2VuLCBJRVJDNjc3QWxsb3dhbmNlIHsKfQoKY29udHJhY3QgTWF0aCB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIGFic29sdXRlIGRpZmZlcmVuY2U6IHx2MSAtIHYyfAogICAgZnVuY3Rpb24gYWJzRGlmZih1aW50MjU2IHYxLCB1aW50MjU2IHYyKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIHYxID4gdjIgPyB2MSAtIHYyIDogdjIgLSB2MTsKICAgIH0KCiAgICAvLyBkaXZpZGUgdiBieSBkLCByb3VuZCB1cCBpZiByZW1haW5kZXIgaXMgMC41IG9yIG1vcmUKICAgIGZ1bmN0aW9uIGRpdlJvdW5kKHVpbnQyNTYgdiwgdWludDI1NiBkKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIGFkZCh2LCBkLzIpIC8gZDsKICAgIH0KCiAgICAvLyBjb21wdXRlcyBkZWNpbWFsIGRlY2ltYWxGcmFjdGlvbiAnZnJhYycgb2YgJ2Ftb3VudCcgd2l0aCBtYXhpbXVtIHByZWNpc2lvbiAobXVsdGlwbGljYXRpb24gZmlyc3QpCiAgICAvLyBib3RoIGFtb3VudCBhbmQgZGVjaW1hbEZyYWN0aW9uIG11c3QgaGF2ZSAxOCBkZWNpbWFscyBwcmVjaXNpb24sIGZyYWMgMTAqKjE4IHJlcHJlc2VudHMgYSB3aG9sZSAoMTAwJSBvZikgYW1vdW50CiAgICAvLyBtaW5kIGxvc3Mgb2YgcHJlY2lzaW9uIGFzIGRlY2ltYWwgZnJhY3Rpb25zIGRvIG5vdCBoYXZlIGZpbml0ZSBiaW5hcnkgZXhwYW5zaW9uCiAgICAvLyBkbyBub3QgdXNlIGluc3RlYWQgb2YgZGl2aXNpb24KICAgIGZ1bmN0aW9uIGRlY2ltYWxGcmFjdGlvbih1aW50MjU2IGFtb3VudCwgdWludDI1NiBmcmFjKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gaXQncyBsaWtlIDEgZXRoZXIgaXMgMTAwJSBwcm9wb3J0aW9uCiAgICAgICAgcmV0dXJuIHByb3BvcnRpb24oYW1vdW50LCBmcmFjLCAxMCoqMTgpOwogICAgfQoKICAgIC8vIGNvbXB1dGVzIHBhcnQvdG90YWwgb2YgYW1vdW50IHdpdGggbWF4aW11bSBwcmVjaXNpb24gKG11bHRpcGxpY2F0aW9uIGZpcnN0KQogICAgLy8gcGFydCBhbmQgdG90YWwgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXRzCiAgICBmdW5jdGlvbiBwcm9wb3J0aW9uKHVpbnQyNTYgYW1vdW50LCB1aW50MjU2IHBhcnQsIHVpbnQyNTYgdG90YWwpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gZGl2Um91bmQobXVsKGFtb3VudCwgcGFydCksIHRvdGFsKTsKICAgIH0KCiAgICAvLwogICAgLy8gT3BlbiBaZXBwZWxpbiBNYXRoIGxpYnJhcnkgYmVsb3cKICAgIC8vCgogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gbWluKHVpbnQyNTYgYSwgdWludDI1NiBiKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heCh1aW50MjU2IGEsIHVpbnQyNTYgYikKICAgICAgICBpbnRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYSA+IGIgPyBhIDogYjsKICAgIH0KfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBJQmFzaWNUb2tlbiwgTWF0aCB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgaW50ZXJuYWwgX2JhbGFuY2VzOwoKICAgIHVpbnQyNTYgaW50ZXJuYWwgX3RvdGFsU3VwcGx5OwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLyoqCiAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICogQHBhcmFtIHRvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICB0cmFuc2ZlckludGVybmFsKG1zZy5zZW5kZXIsIHRvLCBhbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZnVuY3Rpb24gbWFrZXMgaXQgZWFzeSB0byBnZXQgdGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAqIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgb3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpCiAgICB7CiAgICAgICAgcmV0dXJuIF9iYWxhbmNlc1tvd25lcl07CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIGFjdHVhbCB0cmFuc2ZlciBmdW5jdGlvbiBjYWxsZWQgYnkgYWxsIHB1YmxpYyB2YXJpYW50cwogICAgZnVuY3Rpb24gdHJhbnNmZXJJbnRlcm5hbChhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgcmVxdWlyZSh0byAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgX2JhbGFuY2VzW2Zyb21dID0gc3ViKF9iYWxhbmNlc1tmcm9tXSwgYW1vdW50KTsKICAgICAgICBfYmFsYW5jZXNbdG9dID0gYWRkKF9iYWxhbmNlc1t0b10sIGFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIoZnJvbSwgdG8sIGFtb3VudCk7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMKICAgIElFUkMyMFRva2VuLAogICAgQmFzaWNUb2tlbiwKICAgIElFUkM2NzdUb2tlbgp7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHByaXZhdGUgX2FsbG93ZWQ7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBFUkMyMAogICAgLy8KCiAgICAvKioKICAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICAqIEBwYXJhbSBmcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgKiBAcGFyYW0gdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgKiBAcGFyYW0gYW1vdW50IHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIC8vIGNoZWNrIGFuZCByZXNldCBhbGxvd2FuY2UKICAgICAgICB2YXIgYWxsb3dhbmNlID0gX2FsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgICAgX2FsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPSBzdWIoYWxsb3dhbmNlLCBhbW91bnQpOwogICAgICAgIC8vIGRvIHRoZSB0cmFuc2ZlcgogICAgICAgIHRyYW5zZmVySW50ZXJuYWwoZnJvbSwgdG8sIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAqIEBwYXJhbSBzcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewoKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgICAgcmVxdWlyZSgoYW1vdW50ID09IDApIHx8IChfYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9PSAwKSk7CgogICAgICAgIF9hbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICogQHBhcmFtIG93bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICAqIEBwYXJhbSBzcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIF9hbGxvd2VkW293bmVyXVtzcGVuZGVyXTsKICAgIH0KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBJRVJDNjc3VG9rZW4KICAgIC8vCgogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoCiAgICAgICAgYWRkcmVzcyBzcGVuZGVyLAogICAgICAgIHVpbnQyNTYgYW1vdW50LAogICAgICAgIGJ5dGVzIGV4dHJhRGF0YQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZShhcHByb3ZlKHNwZW5kZXIsIGFtb3VudCkpOwoKICAgICAgICAvLyBpbiBjYXNlIG9mIHJlLWVudHJ5IDEuIGFwcHJvdmFsIGlzIGRvbmUgMi4gbXNnLnNlbmRlciBpcyBkaWZmZXJlbnQKICAgICAgICBib29sIHN1Y2Nlc3MgPSBJRVJDNjc3Q2FsbGJhY2soc3BlbmRlcikucmVjZWl2ZUFwcHJvdmFsKAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBhbW91bnQsCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIGV4dHJhRGF0YQogICAgICAgICk7CiAgICAgICAgcmVxdWlyZShzdWNjZXNzKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCmNvbnRyYWN0IEV0aGVyVG9rZW4gaXMKICAgIElzQ29udHJhY3QsCiAgICBBY2Nlc3NDb250cm9sbGVkLAogICAgU3RhbmRhcmRUb2tlbiwKICAgIFRva2VuTWV0YWRhdGEsCiAgICBSZWNsYWltYWJsZQp7CiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIENvbnN0YW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgc3RyaW5nIHByaXZhdGUgY29uc3RhbnQgTkFNRSA9ICJFdGhlciBUb2tlbiI7CgogICAgc3RyaW5nIHByaXZhdGUgY29uc3RhbnQgU1lNQk9MID0gIkVUSC1UIjsKCiAgICB1aW50OCBwcml2YXRlIGNvbnN0YW50IERFQ0lNQUxTID0gMTg7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBFdmVudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGV2ZW50IExvZ0RlcG9zaXQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHRvLAogICAgICAgIHVpbnQyNTYgYW1vdW50CiAgICApOwoKICAgIGV2ZW50IExvZ1dpdGhkcmF3YWwoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgdWludDI1NiBhbW91bnQKICAgICk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gRXRoZXJUb2tlbihJQWNjZXNzUG9saWN5IGFjY2Vzc1BvbGljeSkKICAgICAgICBBY2Nlc3NDb250cm9sbGVkKGFjY2Vzc1BvbGljeSkKICAgICAgICBTdGFuZGFyZFRva2VuKCkKICAgICAgICBUb2tlbk1ldGFkYXRhKE5BTUUsIERFQ0lNQUxTLCBTWU1CT0wsICIiKQogICAgICAgIFJlY2xhaW1hYmxlKCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBkZXBvc2l0IG1zZy52YWx1ZSBvZiBFdGhlciB0byBtc2cuc2VuZGVyIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGRlcG9zaXQoKQogICAgICAgIHBheWFibGUKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBhZGQoX2JhbGFuY2VzW21zZy5zZW5kZXJdLCBtc2cudmFsdWUpOwogICAgICAgIF90b3RhbFN1cHBseSA9IGFkZChfdG90YWxTdXBwbHksIG1zZy52YWx1ZSk7CiAgICAgICAgTG9nRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIHdpdGhkcmF3cyBhbmQgc2VuZHMgJ2Ftb3VudCcgb2YgZXRoZXIgdG8gbXNnLnNlbmRlcgogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBhbW91bnQpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgcmVxdWlyZShfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gYW1vdW50KTsKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWIoX2JhbGFuY2VzW21zZy5zZW5kZXJdLCBhbW91bnQpOwogICAgICAgIF90b3RhbFN1cHBseSA9IHN1YihfdG90YWxTdXBwbHksIGFtb3VudCk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIExvZ1dpdGhkcmF3YWwobXNnLnNlbmRlciwgYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBhZGRyZXNzKDApLCBhbW91bnQpOwogICAgfQoKICAgIC8vCiAgICAvLyBJbXBsZW1lbnRzIElFUkMyMjNUb2tlbgogICAgLy8KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IGFtb3VudCwgYnl0ZXMgZGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHRyYW5zZmVySW50ZXJuYWwobXNnLnNlbmRlciwgdG8sIGFtb3VudCk7CgogICAgICAgIC8vIE5vdGlmeSB0aGUgcmVjZWl2aW5nIGNvbnRyYWN0LgogICAgICAgIGlmIChpc0NvbnRyYWN0KHRvKSkgewogICAgICAgICAgICAvLyBpbiBjYXNlIG9mIHJlLWVudHJ5ICgxKSB0cmFuc2ZlciBpcyBkb25lICgyKSBtc2cuc2VuZGVyIGlzIGRpZmZlcmVudAogICAgICAgICAgICBJRVJDMjIzQ2FsbGJhY2sodG8pLm9uVG9rZW5UcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGRhdGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLwogICAgLy8gT3ZlcnJpZGVzIFJlY2xhaW1hYmxlCiAgICAvLwoKICAgIC8vLyBAbm90aWNlIGFsbG93cyBFdGhlclRva2VuIHRvIHJlY2xhaW0gdG9rZW5zIHdyb25nbHkgc2VudCB0byBpdHMgYWRkcmVzcwogICAgLy8vIEBkZXYgYXMgRXRoZXJUb2tlbiBieSBkZXNpZ24gaGFzIGJhbGFuY2Ugb2YgRXRoZXIgKG5hdGl2ZSBFdGhlcmV1bSB0b2tlbikKICAgIC8vLyAgICAgc3VjaCByZWNsYW1hdGlvbiBpcyBub3QgYWxsb3dlZAogICAgZnVuY3Rpb24gcmVjbGFpbShJQmFzaWNUb2tlbiB0b2tlbikKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICAvLyBmb3JiaWQgcmVjbGFpbWluZyBFVEggaG9sZCBpbiB0aGlzIGNvbnRyYWN0LgogICAgICAgIHJlcXVpcmUodG9rZW4gIT0gUkVDTEFJTV9FVEhFUik7CiAgICAgICAgUmVjbGFpbWFibGUucmVjbGFpbSh0b2tlbik7CiAgICB9Cn0KCi8vLyBAbm90aWNlIGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzIHRoZSB0YXJnZXQgb2Ygc3RhdGUgbWlncmF0aW9uCi8vLyBAZGV2IGltcGxlbWVudGF0aW9uIG11c3QgcHJvdmlkZSBhY3R1YWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBieSBzb3VyY2UgdG8gbWlncmF0ZSBzdGF0ZQpjb250cmFjdCBJTWlncmF0aW9uVGFyZ2V0IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIHNob3VsZCByZXR1cm4gbWlncmF0aW9uIHNvdXJjZSBhZGRyZXNzCiAgICBmdW5jdGlvbiBjdXJyZW50TWlncmF0aW9uU291cmNlKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGFkZHJlc3MpOwp9CgovLy8gQG5vdGljZSBtaXhpbiB0aGF0IGVuYWJsZXMgY29udHJhY3QgdG8gcmVjZWl2ZSBtaWdyYXRpb24KLy8vIEBkZXYgd2hlbiBkZXJpdmVkIGZyb20KY29udHJhY3QgTWlncmF0aW9uVGFyZ2V0IGlzCiAgICBJTWlncmF0aW9uVGFyZ2V0CnsKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gTW9kaWZpZXJzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBpbnRlbmRlZCB0byBiZSBhcHBsaWVkIG9uIG1pZ3JhdGlvbiByZWNlaXZpbmcgZnVuY3Rpb24KICAgIG1vZGlmaWVyIG9ubHlNaWdyYXRpb25Tb3VyY2UoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGN1cnJlbnRNaWdyYXRpb25Tb3VyY2UoKSk7CiAgICAgICAgXzsKICAgIH0KfQoKLy8vIEBub3RpY2UgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0IHRoYXQgaXMgdGhlIHRhcmdldCBvZiBMb2NrZWRBY2NvdW50IG1pZ3JhdGlvbgovLy8gIG1pZ3JhdGlvbiBwcm9jZXNzIGlzIHJlbW92aW5nIGludmVzdG9ycyBiYWxhbmNlIGZyb20gc291cmNlIExvY2tlZEFjY291bnQgZnVsbHkKLy8vICB0YXJnZXQgc2hvdWxkIHJlLWNyZWF0ZSBpbnZlc3RvciB3aXRoIHRoZSBzYW1lIGJhbGFuY2UsIHRvdGFsTG9ja2VkQW1vdW50IGFuZCB0b3RhbEludmVzdG9ycyBhcmUgaW52YXJpYW50IGR1cmluZyBtaWdyYXRpb24KY29udHJhY3QgTG9ja2VkQWNjb3VudE1pZ3JhdGlvbiBpcwogICAgTWlncmF0aW9uVGFyZ2V0CnsKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gaW1wbGVtZW50ZWQgaW4gbWlncmF0aW9uIHRhcmdldCwgeWVzIG1vZGlmaWVycyBhcmUgaW5oZXJpdGVkIGZyb20gYmFzZSBjbGFzcwogICAgZnVuY3Rpb24gbWlncmF0ZUludmVzdG9yKAogICAgICAgIGFkZHJlc3MgaW52ZXN0b3IsCiAgICAgICAgdWludDI1NiBiYWxhbmNlLAogICAgICAgIHVpbnQyNTYgbmV1bWFya3NEdWUsCiAgICAgICAgdWludDI1NiB1bmxvY2tEYXRlCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU1pZ3JhdGlvblNvdXJjZSgpOwp9CgovLy8gQG5vdGljZSBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QgdGhhdCBzdG9yZXMgc3RhdGUgdG8gYmUgbWlncmF0ZWQKLy8vIEBub3RpY2UgY29udHJhY3QgaXMgY2FsbGVkIG1pZ3JhdGlvbiBzb3VyY2UKLy8vIEBkZXYgbWlncmF0aW9uIHRhcmdldCBpbXBsZW1lbnRzIElNaWdyYXRpb25UYXJnZXQgaW50ZXJmYWNlLCB3aGVuIGl0IGlzIHBhc3NlZCBpbiAnZW5hYmxlTWlncmF0aW9uJyBmdW5jdGlvbgovLy8gQGRldiAnbWlncmF0ZScgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCB0byBtaWdyYXRlIHBhcnQgb2Ygc3RhdGUgb3duZWQgYnkgbXNnLnNlbmRlcgovLy8gQGRldiBpbiBsZWdhbCB0ZXJtcyB0aGlzIGNvcnJlc3BvbmRzIHRvIGFtZW5kaW5nL2NoYW5naW5nIGFncmVlbWVudCB0ZXJtcyBieSBjby1zaWduYXR1cmUgb2YgcGFydGllcwpjb250cmFjdCBJTWlncmF0aW9uU291cmNlIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEV2ZW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZXZlbnQgTG9nTWlncmF0aW9uRW5hYmxlZCgKICAgICAgICBhZGRyZXNzIHRhcmdldAogICAgKTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIHNob3VsZCBtaWdyYXRlIHN0YXRlIG93bmVkIGJ5IG1zZy5zZW5kZXIKICAgIC8vLyBAZGV2IGludGVuZGVkIGZsb3cgaXMgdG86IHJlYWQgc291cmNlIHN0YXRlLCBjbGVhciBzb3VyY2Ugc3RhdGUsIGNhbGwgbWlncmF0ZSBmdW5jdGlvbiBvbiB0YXJnZXQsIGxvZyBzdWNjZXNzIGV2ZW50CiAgICBmdW5jdGlvbiBtaWdyYXRlKCkKICAgICAgICBwdWJsaWM7CgogICAgLy8vIEBub3RpY2Ugc2hvdWxkIGVuYWJsZSBtaWdyYXRpb24gdG8gbWlncmF0aW9uIHRhcmdldAogICAgLy8vIEBkZXYgc2hvdWxkIGxpbWl0IGFjY2VzcyB0byBzcGVjaWZpYyByb2xlIGluIGltcGxlbWVudGF0aW9uCiAgICBmdW5jdGlvbiBlbmFibGVNaWdyYXRpb24oSU1pZ3JhdGlvblRhcmdldCBtaWdyYXRpb24pCiAgICAgICAgcHVibGljOwoKICAgIC8vLyBAbm90aWNlIHJldHVybnMgY3VycmVudCBtaWdyYXRpb24gdGFyZ2V0CiAgICBmdW5jdGlvbiBjdXJyZW50TWlncmF0aW9uVGFyZ2V0KCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKElNaWdyYXRpb25UYXJnZXQpOwp9CgovLy8gQG5vdGljZSBtaXhpbiB0aGF0IGVuYWJsZXMgbWlncmF0aW9uIHBhdHRlcm4gZm9yIGEgY29udHJhY3QKLy8vIEBkZXYgd2hlbiBkZXJpdmVkIGZyb20KY29udHJhY3QgTWlncmF0aW9uU291cmNlIGlzCiAgICBJTWlncmF0aW9uU291cmNlLAogICAgQWNjZXNzQ29udHJvbGxlZAp7CiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEltbXV0YWJsZSBzdGF0ZQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIHN0b3JlcyByb2xlIGhhc2ggdGhhdCBjYW4gZW5hYmxlIG1pZ3JhdGlvbgogICAgYnl0ZXMzMiBwcml2YXRlIE1JR1JBVElPTl9BRE1JTjsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE11dGFibGUgc3RhdGUKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIG1pZ3JhdGlvbiB0YXJnZXQgY29udHJhY3QKICAgIElNaWdyYXRpb25UYXJnZXQgaW50ZXJuYWwgX21pZ3JhdGlvbjsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE1vZGlmaWVycwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgYWRkIHRvIGVuYWJsZU1pZ3JhdGlvbiBmdW5jdGlvbiB0byBwcmV2ZW50IGNoYW5naW5nIG9mIG1pZ3JhdGlvbgogICAgLy8vICAgICB0YXJnZXQgb25jZSBzZXQKICAgIG1vZGlmaWVyIG9ubHlNaWdyYXRpb25FbmFibGVkT25jZSgpIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoX21pZ3JhdGlvbikgPT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5TWlncmF0aW9uRW5hYmxlZCgpIHsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoX21pZ3JhdGlvbikgIT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIENvbnN0cnVjdG9yCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiBNaWdyYXRpb25Tb3VyY2UoCiAgICAgICAgSUFjY2Vzc1BvbGljeSBwb2xpY3ksCiAgICAgICAgYnl0ZXMzMiBtaWdyYXRpb25BZG1pblJvbGUKICAgICkKICAgICAgICBBY2Nlc3NDb250cm9sbGVkKHBvbGljeSkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIE1JR1JBVElPTl9BRE1JTiA9IG1pZ3JhdGlvbkFkbWluUm9sZTsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIHNob3VsZCBtaWdyYXRlIHN0YXRlIHRoYXQgYmVsb25ncyB0byBtc2cuc2VuZGVyCiAgICAvLy8gQGRldiBkbyBub3QgZm9yZ2V0IHRvIGFkZCBhY2Nlc3NvciBtb2RpZmllciBpbiBpbXBsZW1lbnRhdGlvbgogICAgZnVuY3Rpb24gbWlncmF0ZSgpCiAgICAgICAgb25seU1pZ3JhdGlvbkVuYWJsZWQoKQogICAgICAgIHB1YmxpYzsKCiAgICAvLy8gQG5vdGljZSBzaG91bGQgZW5hYmxlIG1pZ3JhdGlvbiB0byBtaWdyYXRpb24gdGFyZ2V0CiAgICAvLy8gQGRldiBkbyBub3QgZm9yZ2V0IHRvIGFkZCBhY2Nlc3NvciBtb2RpZmllciBpbiBvdmVycmlkZQogICAgZnVuY3Rpb24gZW5hYmxlTWlncmF0aW9uKElNaWdyYXRpb25UYXJnZXQgbWlncmF0aW9uKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlNaWdyYXRpb25FbmFibGVkT25jZSgpCiAgICAgICAgb25seShNSUdSQVRJT05fQURNSU4pCiAgICB7CiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIHRoZSBzb3VyY2UKICAgICAgICByZXF1aXJlKG1pZ3JhdGlvbi5jdXJyZW50TWlncmF0aW9uU291cmNlKCkgPT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgX21pZ3JhdGlvbiA9IG1pZ3JhdGlvbjsKICAgICAgICBMb2dNaWdyYXRpb25FbmFibGVkKF9taWdyYXRpb24pOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHJldHVybnMgY3VycmVudCBtaWdyYXRpb24gdGFyZ2V0CiAgICBmdW5jdGlvbiBjdXJyZW50TWlncmF0aW9uVGFyZ2V0KCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKElNaWdyYXRpb25UYXJnZXQpCiAgICB7CiAgICAgICAgcmV0dXJuIF9taWdyYXRpb247CiAgICB9Cn0KCmNvbnRyYWN0IElFdGhlcmV1bUZvcmtBcmJpdGVyIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEV2ZW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZXZlbnQgTG9nRm9ya0Fubm91bmNlZCgKICAgICAgICBzdHJpbmcgbmFtZSwKICAgICAgICBzdHJpbmcgdXJsLAogICAgICAgIHVpbnQyNTYgYmxvY2tOdW1iZXIKICAgICk7CgogICAgZXZlbnQgTG9nRm9ya1NpZ25lZCgKICAgICAgICB1aW50MjU2IGJsb2NrTnVtYmVyLAogICAgICAgIGJ5dGVzMzIgYmxvY2tIYXNoCiAgICApOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gbmV4dEZvcmtOYW1lKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHN0cmluZyk7CgogICAgZnVuY3Rpb24gbmV4dEZvcmtVcmwoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoc3RyaW5nKTsKCiAgICBmdW5jdGlvbiBuZXh0Rm9ya0Jsb2NrTnVtYmVyKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIGxhc3RTaWduZWRCbG9ja051bWJlcigpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KTsKCiAgICBmdW5jdGlvbiBsYXN0U2lnbmVkQmxvY2tIYXNoKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJ5dGVzMzIpOwoKICAgIGZ1bmN0aW9uIGxhc3RTaWduZWRUaW1lc3RhbXAoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1Nik7Cgp9CgovKioKICogQHRpdGxlIGxlZ2FsbHkgYmluZGluZyBzbWFydCBjb250cmFjdAogKiBAZGV2IEdlbmVyYWwgYXBwcm9hY2ggdG8gcGFyaW5nIGxlZ2FsIGFuZCBzbWFydCBjb250cmFjdHM6CiAqIDEuIEFsbCB0ZXJtcyBhbmQgYWdyZWVtZW50IGFyZSBiZXR3ZWVuIHR3byBwYXJ0aWVzOiBoZXJlIGJldHdlZW4gbGVnYWwgcmVwcmVzZW50YXRpb24gb2YgcGxhdGZvcm0gb3BlcmF0b3IgcmVwcmVzZW50YXRpdmUgYW5kIHBsYXRmb3JtIGludmVzdG9yLgogKiAyLiBQYXJ0aWVzIGFyZSByZXByZXNlbnRlZCBieSBwdWJsaWMgRXRoZXJldW0gYWRkcmVzc2VzLiBQbGF0Zm9ybSBpbnZlc3RvciBpcyBhbmQgYWRkcmVzcyB0aGF0IGhvbGRzIGFuZCBjb250cm9scyBmdW5kcyBhbmQgcmVjZWl2ZXMgYW5kIGNvbnRyb2xzIE5ldW1hcmsgdG9rZW4KICogMy4gTGVnYWwgYWdyZWVtZW50IGhhcyBpbW11dGFibGUgcGFydCB0aGF0IGNvcnJlc3BvbmRzIHRvIHNtYXJ0IGNvbnRyYWN0IGNvZGUgYW5kIG11dGFibGUgcGFydCB0aGF0IG1heSBjaGFuZ2UgZm9yIGV4YW1wbGUgZHVlIHRvIGNoYW5naW5nIHJlZ3VsYXRpb25zIG9yIG90aGVyIGV4dGVybmFsaXRpZXMgdGhhdCBzbWFydCBjb250cmFjdCBkb2VzIG5vdCBjb250cm9sLgogKiA0LiBUaGVyZSBzaG91bGQgYmUgYSBwcm92aXNpb24gaW4gbGVnYWwgZG9jdW1lbnQgdGhhdCBmdXR1cmUgY2hhbmdlcyBpbiBtdXRhYmxlIHBhcnQgY2Fubm90IGNoYW5nZSB0ZXJtcyBvZiBpbW11dGFibGUgcGFydC4KICogNS4gSW1tdXRhYmxlIHBhcnQgbGlua3MgdG8gY29ycmVzcG9uZGluZyBzbWFydCBjb250cmFjdCB2aWEgaXRzIGFkZHJlc3MuCiAqIDYuIEFkZGl0aW9uYWwgcHJvdmlzaW9uIHNob3VsZCBiZSBhZGRlZCBpZiBzbWFydCBjb250cmFjdCBzdXBwb3J0cyBpdAogKiAgYS4gRm9yayBwcm92aXNpb24KICogIGIuIEJ1Z2ZpeGluZyBwcm92aXNpb24gKHVuaWxhdGVyYWwgY29kZSB1cGRhdGUgbWVjaGFuaXNtKQogKiAgYy4gTWlncmF0aW9uIHByb3Zpc2lvbiAoYmlsYXRlcmFsIGNvZGUgdXBkYXRlIG1lY2hhbmlzbSkKICoKICogRGV0YWlscyBvbiBBZ3JlZW1lbnQgYmFzZSBjbGFzczoKICogMS4gV2UgYmluZCBzbWFydCBjb250cmFjdCB0byBsZWdhbCBjb250cmFjdCBieSBzdG9yaW5nIHVyaSAocHJlZmVyYWJseSBpcGZzIG9yIGhhc2gpIG9mIHRoZSBsZWdhbCBjb250cmFjdCBpbiB0aGUgc21hcnQgY29udHJhY3QuIEl0IGlzIGhvd2V2ZXIgY3J1Y2lhbCB0aGF0IHN1Y2ggYmluZGluZyBpcyBkb25lIGJ5IHBsYXRmb3JtIG9wZXJhdG9yIHJlcHJlc2VudGF0aW9uIHNvIHRyYW5zYWN0aW9uIGVzdGFibGlzaGluZyB0aGUgbGluayBtdXN0IGJlIHNpZ25lZCBieSByZXNwZWN0aXZlIHdhbGxldCAoJ2FtZW5kQWdyZWVtZW50JykKICogMi4gTXV0YWJsZSBwYXJ0IG9mIGFncmVlbWVudCBtYXkgY2hhbmdlLiBXZSBzaG91bGQgYmUgYWJsZSB0byBhbWVuZCB0aGUgdXJpIGxhdGVyLiBQcmV2aW91cyBhbWVuZG1lbnRzIHNob3VsZCBub3QgYmUgbG9zdCBhbmQgc2hvdWxkIGJlIHJldHJpZXZhYmxlIChgYW1lbmRBZ3JlZW1lbnRgIGFuZCAncGFzdEFncmVlbWVudCcgZnVuY3Rpb25zKS4KICogMy4gSXQgaXMgdXAgdG8gZGVyaXZpbmcgY29udHJhY3QgdG8gZGVjaWRlIHdoZXJlIHRvIHB1dCAnYWNjZXB0QWdyZWVtZW50JyBtb2RpZmllci4gSG93ZXZlciBzaXR1YXRpb24gd2hlcmUgdGhlcmUgaXMgbm8gY3J5cHRvZ3JhcGhpYyBwcm9vZiB0aGF0IGdpdmVuIGFkZHJlc3Mgd2FzIHJlYWxseSBhY3RpbmcgaW4gdGhlIHRyYW5zYWN0aW9uIHNob3VsZCBiZSBhdm9pZGVkLCBzaW1wbGVzdCBleGFtcGxlIGJlaW5nICd0bycgYWRkcmVzcyBpbiBgdHJhbnNmZXJgIGZ1bmN0aW9uIG9mIEVSQzIwLgogKgoqKi8KY29udHJhY3QgQWdyZWVtZW50IGlzCiAgICBBY2Nlc3NDb250cm9sbGVkLAogICAgQWNjZXNzUm9sZXMKewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gVHlwZSBkZWNsYXJhdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIGFncmVlbWVudCB3aXRoIHNpZ25hdHVyZSBvZiB0aGUgcGxhdGZvcm0gb3BlcmF0b3IgcmVwcmVzZW50YXRpdmUKICAgIHN0cnVjdCBTaWduZWRBZ3JlZW1lbnQgewogICAgICAgIGFkZHJlc3MgcGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlOwogICAgICAgIHVpbnQyNTYgc2lnbmVkQmxvY2tUaW1lc3RhbXA7CiAgICAgICAgc3RyaW5nIGFncmVlbWVudFVyaTsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEltbXV0YWJsZSBzdGF0ZQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgSUV0aGVyZXVtRm9ya0FyYml0ZXIgcHJpdmF0ZSBFVEhFUkVVTV9GT1JLX0FSQklURVI7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBzdG9yZXMgYWxsIGFtZW5kbWVudHMgdG8gdGhlIGFncmVlbWVudCwgZmlyc3QgYW1lbmRtZW50IGlzIHRoZSBvcmlnaW5hbAogICAgU2lnbmVkQWdyZWVtZW50W10gcHJpdmF0ZSBfYW1lbmRtZW50czsKCiAgICAvLyBzdG9yZXMgYmxvY2sgbnVtYmVycyBvZiBhbGwgYWRkcmVzc2VzIHRoYXQgc2lnbmVkIHRoZSBhZ3JlZW1lbnQgKHNpZ25hdG9yeSA9PiBibG9jayBudW1iZXIpCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBfc2lnbmF0b3JpZXM7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBFdmVudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGV2ZW50IExvZ0FncmVlbWVudEFjY2VwdGVkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBhY2NlcHRlcgogICAgKTsKCiAgICBldmVudCBMb2dBZ3JlZW1lbnRBbWVuZGVkKAogICAgICAgIGFkZHJlc3MgcGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlLAogICAgICAgIHN0cmluZyBhZ3JlZW1lbnRVcmkKICAgICk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNb2RpZmllcnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIGxvZ3MgdGhhdCBhZ3JlZW1lbnQgd2FzIGFjY2VwdGVkIGJ5IHBsYXRmb3JtIHVzZXIKICAgIC8vLyBAZGV2IGludGVuZGVkIHRvIGJlIGFkZGVkIHRvIGZ1bmN0aW9ucyB0aGF0IGlmIHVzZWQgbWFrZSAnYWNjZXB0ZXInIG9yaWdpbiB0byBlbnRlciBsZWdhbGx5IGJpbmRpbmcgYWdyZWVtZW50CiAgICBtb2RpZmllciBhY2NlcHRBZ3JlZW1lbnQoYWRkcmVzcyBhY2NlcHRlcikgewogICAgICAgIGlmKF9zaWduYXRvcmllc1thY2NlcHRlcl0gPT0gMCkgewogICAgICAgICAgICByZXF1aXJlKF9hbWVuZG1lbnRzLmxlbmd0aCA+IDApOwogICAgICAgICAgICBfc2lnbmF0b3JpZXNbYWNjZXB0ZXJdID0gYmxvY2subnVtYmVyOwogICAgICAgICAgICBMb2dBZ3JlZW1lbnRBY2NlcHRlZChhY2NlcHRlcik7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gQWdyZWVtZW50KElBY2Nlc3NQb2xpY3kgYWNjZXNzUG9saWN5LCBJRXRoZXJldW1Gb3JrQXJiaXRlciBmb3JrQXJiaXRlcikKICAgICAgICBBY2Nlc3NDb250cm9sbGVkKGFjY2Vzc1BvbGljeSkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUoZm9ya0FyYml0ZXIgIT0gSUV0aGVyZXVtRm9ya0FyYml0ZXIoMHgwKSk7CiAgICAgICAgRVRIRVJFVU1fRk9SS19BUkJJVEVSID0gZm9ya0FyYml0ZXI7CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiBhbWVuZEFncmVlbWVudChzdHJpbmcgYWdyZWVtZW50VXJpKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHkoUk9MRV9QTEFURk9STV9PUEVSQVRPUl9SRVBSRVNFTlRBVElWRSkKICAgIHsKICAgICAgICBTaWduZWRBZ3JlZW1lbnQgbWVtb3J5IGFtZW5kbWVudCA9IFNpZ25lZEFncmVlbWVudCh7CiAgICAgICAgICAgIHBsYXRmb3JtT3BlcmF0b3JSZXByZXNlbnRhdGl2ZTogbXNnLnNlbmRlciwKICAgICAgICAgICAgc2lnbmVkQmxvY2tUaW1lc3RhbXA6IGJsb2NrLnRpbWVzdGFtcCwKICAgICAgICAgICAgYWdyZWVtZW50VXJpOiBhZ3JlZW1lbnRVcmkKICAgICAgICB9KTsKICAgICAgICBfYW1lbmRtZW50cy5wdXNoKGFtZW5kbWVudCk7CiAgICAgICAgTG9nQWdyZWVtZW50QW1lbmRlZChtc2cuc2VuZGVyLCBhZ3JlZW1lbnRVcmkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGV0aGVyZXVtRm9ya0FyYml0ZXIoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoSUV0aGVyZXVtRm9ya0FyYml0ZXIpCiAgICB7CiAgICAgICAgcmV0dXJuIEVUSEVSRVVNX0ZPUktfQVJCSVRFUjsKICAgIH0KCiAgICBmdW5jdGlvbiBjdXJyZW50QWdyZWVtZW50KCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMKICAgICAgICAoCiAgICAgICAgICAgIGFkZHJlc3MgcGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlLAogICAgICAgICAgICB1aW50MjU2IHNpZ25lZEJsb2NrVGltZXN0YW1wLAogICAgICAgICAgICBzdHJpbmcgYWdyZWVtZW50VXJpLAogICAgICAgICAgICB1aW50MjU2IGluZGV4CiAgICAgICAgKQogICAgewogICAgICAgIHJlcXVpcmUoX2FtZW5kbWVudHMubGVuZ3RoID4gMCk7CiAgICAgICAgdWludDI1NiBsYXN0ID0gX2FtZW5kbWVudHMubGVuZ3RoIC0gMTsKICAgICAgICBTaWduZWRBZ3JlZW1lbnQgc3RvcmFnZSBhbWVuZG1lbnQgPSBfYW1lbmRtZW50c1tsYXN0XTsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICBhbWVuZG1lbnQucGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlLAogICAgICAgICAgICBhbWVuZG1lbnQuc2lnbmVkQmxvY2tUaW1lc3RhbXAsCiAgICAgICAgICAgIGFtZW5kbWVudC5hZ3JlZW1lbnRVcmksCiAgICAgICAgICAgIGxhc3QKICAgICAgICApOwogICAgfQoKICAgIGZ1bmN0aW9uIHBhc3RBZ3JlZW1lbnQodWludDI1NiBhbWVuZG1lbnRJbmRleCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMKICAgICAgICAoCiAgICAgICAgICAgIGFkZHJlc3MgcGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlLAogICAgICAgICAgICB1aW50MjU2IHNpZ25lZEJsb2NrVGltZXN0YW1wLAogICAgICAgICAgICBzdHJpbmcgYWdyZWVtZW50VXJpLAogICAgICAgICAgICB1aW50MjU2IGluZGV4CiAgICAgICAgKQogICAgewogICAgICAgIFNpZ25lZEFncmVlbWVudCBzdG9yYWdlIGFtZW5kbWVudCA9IF9hbWVuZG1lbnRzW2FtZW5kbWVudEluZGV4XTsKICAgICAgICByZXR1cm4gKAogICAgICAgICAgICBhbWVuZG1lbnQucGxhdGZvcm1PcGVyYXRvclJlcHJlc2VudGF0aXZlLAogICAgICAgICAgICBhbWVuZG1lbnQuc2lnbmVkQmxvY2tUaW1lc3RhbXAsCiAgICAgICAgICAgIGFtZW5kbWVudC5hZ3JlZW1lbnRVcmksCiAgICAgICAgICAgIGFtZW5kbWVudEluZGV4CiAgICAgICAgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZ3JlZW1lbnRTaWduZWRBdEJsb2NrKGFkZHJlc3Mgc2lnbmF0b3J5KQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gX3NpZ25hdG9yaWVzW3NpZ25hdG9yeV07CiAgICB9Cn0KCmNvbnRyYWN0IE5ldW1hcmtJc3N1YW5jZUN1cnZlIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIENvbnN0YW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gbWF4aW11bSBudW1iZXIgb2YgbmV1bWFya3MgdGhhdCBtYXkgYmUgY3JlYXRlZAogICAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IE5FVU1BUktfQ0FQID0gMTUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKCiAgICAvLyBpbml0aWFsIG5ldW1hcmsgcmV3YXJkIGZyYWN0aW9uIChjb250cm9scyBjdXJ2ZSBzdGVlcG5lc3MpCiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgSU5JVElBTF9SRVdBUkRfRlJBQ1RJT04gPSA2NTAwMDAwMDAwMDAwMDAwMDAwOwoKICAgIC8vIHN0b3AgaXNzdWluZyBuZXcgTmV1bWFya3MgYWJvdmUgdGhpcyBFdXJvIHZhbHVlIChhcyBpdCBnb2VzIHF1aWNrbHkgdG8gemVybykKICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBJU1NVQU5DRV9MSU1JVF9FVVJfVUxQUyA9IDgzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8gYXBwcm94aW1hdGUgY3VydmUgbGluZWFybHkgYWJvdmUgdGhpcyBFdXJvIHZhbHVlCiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgTElORUFSX0FQUFJPWF9MSU1JVF9FVVJfVUxQUyA9IDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgTkVVTUFSS1NfQVRfTElORUFSX0xJTUlUX1VMUFMgPSAxNDk5ODMyNTAxMjg3MjY0ODI3ODk2NTM5ODcxOwoKICAgIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCBUT1RfTElORUFSX05FVU1BUktTX1VMUFMgPSBORVVNQVJLX0NBUCAtIE5FVU1BUktTX0FUX0xJTkVBUl9MSU1JVF9VTFBTOwogICAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IFRPVF9MSU5FQVJfRVVSX1VMUFMgPSBJU1NVQU5DRV9MSU1JVF9FVVJfVUxQUyAtIExJTkVBUl9BUFBST1hfTElNSVRfRVVSX1VMUFM7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSByZXR1cm5zIGFkZGl0aW9uYWwgYW1vdW50IG9mIG5ldW1hcmtzIGlzc3VlZCBmb3IgZXVyb1VscHMgYXQgdG90YWxFdXJvVWxwcwogICAgLy8vIEBwYXJhbSB0b3RhbEV1cm9VbHBzIGFjdHVhbCBjdXJ2ZSBwb3NpdGlvbiBmcm9tIHdoaWNoIG5ldW1hcmtzIHdpbGwgYmUgaXNzdWVkCiAgICAvLy8gQHBhcmFtIGV1cm9VbHBzIGFtb3VudCBhZ2FpbnN0IHdoaWNoIG5ldW1hcmtzIHdpbGwgYmUgaXNzdWVkCiAgICBmdW5jdGlvbiBpbmNyZW1lbnRhbCh1aW50MjU2IHRvdGFsRXVyb1VscHMsIHVpbnQyNTYgZXVyb1VscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IG5ldW1hcmtVbHBzKQogICAgewogICAgICAgIHJlcXVpcmUodG90YWxFdXJvVWxwcyArIGV1cm9VbHBzID49IHRvdGFsRXVyb1VscHMpOwogICAgICAgIHVpbnQyNTYgZnJvbSA9IGN1bXVsYXRpdmUodG90YWxFdXJvVWxwcyk7CiAgICAgICAgdWludDI1NiB0byA9IGN1bXVsYXRpdmUodG90YWxFdXJvVWxwcyArIGV1cm9VbHBzKTsKICAgICAgICAvLyBhcyBleHBhbnNpb24gaXMgbm90IG1vbm90b25pYyBmb3IgbGFyZ2UgdG90YWxFdXJvVWxwcywgYXNzZXJ0IGJlbG93IG1heSBmYWlsCiAgICAgICAgLy8gZXhhbXBsZTogdG90YWxFdXJvVWxwcz0xLjk5OTk5OTk5OTk5OTk5OTk5OTk5OTAwMDAwMGUrMjcgYW5kIGV1cm9VbHBzPTUwCiAgICAgICAgYXNzZXJ0KHRvID49IGZyb20pOwogICAgICAgIHJldHVybiB0byAtIGZyb207CiAgICB9CgogICAgLy8vIEBub3RpY2UgcmV0dXJucyBhbW91bnQgb2YgZXVybyBjb3JyZXNwb25kaW5nIHRvIGJ1cm5lZCBuZXVtYXJrcwogICAgLy8vIEBwYXJhbSB0b3RhbEV1cm9VbHBzIGFjdHVhbCBjdXJ2ZSBwb3NpdGlvbiBmcm9tIHdoaWNoIG5ldW1hcmtzIHdpbGwgYmUgYnVybmVkCiAgICAvLy8gQHBhcmFtIGJ1cm5OZXVtYXJrVWxwcyBhbW91bnQgb2YgbmV1bWFya3MgdG8gYnVybgogICAgZnVuY3Rpb24gaW5jcmVtZW50YWxJbnZlcnNlKHVpbnQyNTYgdG90YWxFdXJvVWxwcywgdWludDI1NiBidXJuTmV1bWFya1VscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IGV1cm9VbHBzKQogICAgewogICAgICAgIHVpbnQyNTYgdG90YWxOZXVtYXJrVWxwcyA9IGN1bXVsYXRpdmUodG90YWxFdXJvVWxwcyk7CiAgICAgICAgcmVxdWlyZSh0b3RhbE5ldW1hcmtVbHBzID49IGJ1cm5OZXVtYXJrVWxwcyk7CiAgICAgICAgdWludDI1NiBmcm9tTm1rID0gdG90YWxOZXVtYXJrVWxwcyAtIGJ1cm5OZXVtYXJrVWxwczsKICAgICAgICB1aW50IG5ld1RvdGFsRXVyb1VscHMgPSBjdW11bGF0aXZlSW52ZXJzZShmcm9tTm1rLCAwLCB0b3RhbEV1cm9VbHBzKTsKICAgICAgICAvLyB5ZXMsIHRoaXMgbWF5IG92ZXJmbG93IGR1ZSB0byBub24gbW9ub3RvbmljIGludmVyc2UgZnVuY3Rpb24KICAgICAgICBhc3NlcnQodG90YWxFdXJvVWxwcyA+PSBuZXdUb3RhbEV1cm9VbHBzKTsKICAgICAgICByZXR1cm4gdG90YWxFdXJvVWxwcyAtIG5ld1RvdGFsRXVyb1VscHM7CiAgICB9CgogICAgLy8vIEBub3RpY2UgcmV0dXJucyBhbW91bnQgb2YgZXVybyBjb3JyZXNwb25kaW5nIHRvIGJ1cm5lZCBuZXVtYXJrcwogICAgLy8vIEBwYXJhbSB0b3RhbEV1cm9VbHBzIGFjdHVhbCBjdXJ2ZSBwb3NpdGlvbiBmcm9tIHdoaWNoIG5ldW1hcmtzIHdpbGwgYmUgYnVybmVkCiAgICAvLy8gQHBhcmFtIGJ1cm5OZXVtYXJrVWxwcyBhbW91bnQgb2YgbmV1bWFya3MgdG8gYnVybgogICAgLy8vIEBwYXJhbSBtaW5FdXJVbHBzIGV1cm8gYW1vdW50IHRvIHN0YXJ0IGludmVyc2Ugc2VhcmNoIGZyb20sIGluY2x1c2l2ZQogICAgLy8vIEBwYXJhbSBtYXhFdXJVbHBzIGV1cm8gYW1vdW50IHRvIGVuZCBpbnZlcnNlIHNlYXJjaCB0bywgaW5jbHVzaXZlCiAgICBmdW5jdGlvbiBpbmNyZW1lbnRhbEludmVyc2UodWludDI1NiB0b3RhbEV1cm9VbHBzLCB1aW50MjU2IGJ1cm5OZXVtYXJrVWxwcywgdWludDI1NiBtaW5FdXJVbHBzLCB1aW50MjU2IG1heEV1clVscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IGV1cm9VbHBzKQogICAgewogICAgICAgIHVpbnQyNTYgdG90YWxOZXVtYXJrVWxwcyA9IGN1bXVsYXRpdmUodG90YWxFdXJvVWxwcyk7CiAgICAgICAgcmVxdWlyZSh0b3RhbE5ldW1hcmtVbHBzID49IGJ1cm5OZXVtYXJrVWxwcyk7CiAgICAgICAgdWludDI1NiBmcm9tTm1rID0gdG90YWxOZXVtYXJrVWxwcyAtIGJ1cm5OZXVtYXJrVWxwczsKICAgICAgICB1aW50IG5ld1RvdGFsRXVyb1VscHMgPSBjdW11bGF0aXZlSW52ZXJzZShmcm9tTm1rLCBtaW5FdXJVbHBzLCBtYXhFdXJVbHBzKTsKICAgICAgICAvLyB5ZXMsIHRoaXMgbWF5IG92ZXJmbG93IGR1ZSB0byBub24gbW9ub3RvbmljIGludmVyc2UgZnVuY3Rpb24KICAgICAgICBhc3NlcnQodG90YWxFdXJvVWxwcyA+PSBuZXdUb3RhbEV1cm9VbHBzKTsKICAgICAgICByZXR1cm4gdG90YWxFdXJvVWxwcyAtIG5ld1RvdGFsRXVyb1VscHM7CiAgICB9CgogICAgLy8vIEBub3RpY2UgZmluZHMgdG90YWwgYW1vdW50IG9mIG5ldW1hcmtzIGlzc3VlZCBmb3IgZ2l2ZW4gYW1vdW50IG9mIEV1cm8KICAgIC8vLyBAZGV2IGJpbm9taWFsIGV4cGFuc2lvbiBkb2VzIG5vdCBndWFyYW50ZWUgbW9ub3RvbmljaXR5IG9uIHVpbnQyNTYgcHJlY2lzaW9uIGZvciBsYXJnZSBldXJvVWxwcwogICAgLy8vICAgICBmdW5jdGlvbiBiZWxvdyBpcyBub3QgbW9ub3RvbmljCiAgICBmdW5jdGlvbiBjdW11bGF0aXZlKHVpbnQyNTYgZXVyb1VscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zKHVpbnQyNTYgbmV1bWFya1VscHMpCiAgICB7CiAgICAgICAgLy8gUmV0dXJuIHRoZSBjYXAgaWYgZXVyb1VscHMgaXMgYWJvdmUgdGhlIGxpbWl0LgogICAgICAgIGlmIChldXJvVWxwcyA+PSBJU1NVQU5DRV9MSU1JVF9FVVJfVUxQUykgewogICAgICAgICAgICByZXR1cm4gTkVVTUFSS19DQVA7CiAgICAgICAgfQogICAgICAgIC8vIHVzZSBsaW5lYXIgYXBwcm94aW1hdGlvbiBhYm92ZSBsaW1pdCBiZWxvdwogICAgICAgIC8vIGJpbm9taWFsIGV4cGFuc2lvbiBkb2VzIG5vdCBndWFyYW50ZWUgbW9ub3RvbmljaXR5IG9uIHVpbnQyNTYgcHJlY2lzaW9uIGZvciBsYXJnZSBldXJvVWxwcwogICAgICAgIGlmIChldXJvVWxwcyA+PSBMSU5FQVJfQVBQUk9YX0xJTUlUX0VVUl9VTFBTKSB7CiAgICAgICAgICAgIC8vIChldXJvVWxwcyAtIExJTkVBUl9BUFBST1hfTElNSVRfRVVSX1VMUFMpIGlzIHNtYWxsIHNvIGV4cHJlc3Npb24gZG9lcyBub3Qgb3ZlcmZsb3cKICAgICAgICAgICAgcmV0dXJuIE5FVU1BUktTX0FUX0xJTkVBUl9MSU1JVF9VTFBTICsgKFRPVF9MSU5FQVJfTkVVTUFSS1NfVUxQUyAqIChldXJvVWxwcyAtIExJTkVBUl9BUFBST1hfTElNSVRfRVVSX1VMUFMpKSAvIFRPVF9MSU5FQVJfRVVSX1VMUFM7CiAgICAgICAgfQoKICAgICAgICAvLyBBcHByb3hpbWF0ZSBjYXAtY2FwJiMxODM7KDEtMS9EKV5uIHVzaW5nIHRoZSBCaW5vbWlhbCBleHBhbnNpb24KICAgICAgICAvLyBodHRwOi8vZ2FsaWxlby5waHlzLnZpcmdpbmlhLmVkdS9jbGFzc2VzLzE1Mi5tZjFpLnNwcmluZzAyL0V4cG9uZW50aWFsX0Z1bmN0aW9uLmh0bQogICAgICAgIC8vIEZ1bmN0aW9uW2ltYXgsIC1DQVAqU3VtWygtSVIqRVVSL0NBUCleaS9GYWN0b3JpYWxbaV0sIHtpLCBpbWF4fV1dCiAgICAgICAgLy8gd2hpY2ggbWF5IGJlIHNpbXBsaWZpZWQgdG8KICAgICAgICAvLyBGdW5jdGlvbltpbWF4LCAtQ0FQKlN1bVsoRVVSKV5pLyhGYWN0b3JpYWxbaV0qKC1kKV5pKSwge2ksIDEsIGltYXh9XV0KICAgICAgICAvLyB3aGVyZSBkID0gY2FwL2luaXRpYWxfcmV3YXJkCiAgICAgICAgdWludDI1NiBkID0gMjMwNzY5MjMwNzY5MjMwNzY5MjMwNzY5MjMxOyAvLyBORVVNQVJLX0NBUCAvIElOSVRJQUxfUkVXQVJEX0ZSQUNUSU9OCiAgICAgICAgdWludDI1NiB0ZXJtID0gTkVVTUFSS19DQVA7CiAgICAgICAgdWludDI1NiBzdW0gPSAwOwogICAgICAgIHVpbnQyNTYgZGVub20gPSBkOwogICAgICAgIGRvIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy8gV2UgdXNlIGFzc2VtYmxlciBwcmltYXJpbHkgdG8gYXZvaWQgdGhlIGV4cGVuc2l2ZQogICAgICAgICAgICAvLyBkaXZpZGUtYnktemVybyBjaGVjayBzb2xjIGluc2VydHMgZm9yIHRoZSAvIG9wZXJhdG9yLgogICAgICAgICAgICB0ZXJtICA6PSBkaXYobXVsKHRlcm0sIGV1cm9VbHBzKSwgZGVub20pCiAgICAgICAgICAgIHN1bSAgIDo9IGFkZChzdW0sIHRlcm0pCiAgICAgICAgICAgIGRlbm9tIDo9IGFkZChkZW5vbSwgZCkKICAgICAgICAgICAgLy8gc3ViIG5leHQgdGVybSBhcyB3ZSBoYXZlIHBvd2VyIG9mIG5lZ2F0aXZlIHZhbHVlIGluIHRoZSBiaW5vbWlhbCBleHBhbnNpb24KICAgICAgICAgICAgdGVybSAgOj0gZGl2KG11bCh0ZXJtLCBldXJvVWxwcyksIGRlbm9tKQogICAgICAgICAgICBzdW0gICA6PSBzdWIoc3VtLCB0ZXJtKQogICAgICAgICAgICBkZW5vbSA6PSBhZGQoZGVub20sIGQpCiAgICAgICAgfSB3aGlsZSAodGVybSAhPSAwKTsKICAgICAgICByZXR1cm4gc3VtOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGZpbmQgaXNzdWFuY2UgY3VydmUgaW52ZXJzZSBieSBiaW5hcnkgc2VhcmNoCiAgICAvLy8gQHBhcmFtIG5ldW1hcmtVbHBzIG5ldW1hcmsgYW1vdW50IHRvIGNvbXB1dGUgaW52ZXJzZSBmb3IKICAgIC8vLyBAcGFyYW0gbWluRXVyVWxwcyBtaW5pbXVtIHNlYXJjaCByYW5nZSBmb3IgdGhlIGludmVyc2UsIGluY2x1c2l2ZQogICAgLy8vIEBwYXJhbSBtYXhFdXJVbHBzIG1heGl1bSBzZWFyY2ggcmFuZ2UgZm9yIHRoZSBpbnZlcnNlLCBpbmNsdXNpdmUKICAgIC8vLyBAZGV2IGluIGNhc2Ugb2YgYXBwcm94aW1hdGUgc2VhcmNoIChubyBleGFjdCBpbnZlcnNlKSB1cHBlciBlbGVtZW50IG9mIG1pbmltYWwgc2VhcmNoIHJhbmdlIGlzIHJldHVybmVkCiAgICAvLy8gQGRldiBpbiBjYXNlIG9mIG1hbnkgcG9zc2libGUgaW52ZXJzZXMsIHRoZSBsb3dlc3Qgb25lIHdpbGwgYmUgdXNlZCAoaWYgcmFuZ2UgcGVybWl0cykKICAgIC8vLyBAZGV2IGNvcnJlc3BvbmRzIHRvIGEgbGluZWFyIHNlYXJjaCB0aGF0IHJldHVybnMgZmlyc3QgZXVyb1VscCB2YWx1ZSB0aGF0IGhhcyBjdW11bGF0aXZlKCkgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIG5ldW1hcmtVbHBzCiAgICBmdW5jdGlvbiBjdW11bGF0aXZlSW52ZXJzZSh1aW50MjU2IG5ldW1hcmtVbHBzLCB1aW50MjU2IG1pbkV1clVscHMsIHVpbnQyNTYgbWF4RXVyVWxwcykKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgZXVyb1VscHMpCiAgICB7CiAgICAgICAgcmVxdWlyZShtYXhFdXJVbHBzID49IG1pbkV1clVscHMpOwogICAgICAgIHJlcXVpcmUoY3VtdWxhdGl2ZShtaW5FdXJVbHBzKSA8PSBuZXVtYXJrVWxwcyk7CiAgICAgICAgcmVxdWlyZShjdW11bGF0aXZlKG1heEV1clVscHMpID49IG5ldW1hcmtVbHBzKTsKICAgICAgICB1aW50MjU2IG1pbiA9IG1pbkV1clVscHM7CiAgICAgICAgdWludDI1NiBtYXggPSBtYXhFdXJVbHBzOwoKICAgICAgICAvLyBCaW5hcnkgc2VhcmNoCiAgICAgICAgd2hpbGUgKG1heCA+IG1pbikgewogICAgICAgICAgICB1aW50MjU2IG1pZCA9IChtYXggKyBtaW4pIC8gMjsKICAgICAgICAgICAgdWludDI1NiB2YWwgPSBjdW11bGF0aXZlKG1pZCk7CiAgICAgICAgICAgIC8vIGV4YWN0IHNvbHV0aW9uIHNob3VsZCBub3QgYmUgdXNlZCwgYSBsYXRlIHBvaW50cyBvZiB0aGUgY3VydmUgd2hlbiBtYW55IGV1cm9VbHBzIGFyZSBuZWVkZWQgdG8KICAgICAgICAgICAgLy8gaW5jcmVhc2UgYnkgb25lIG5ta1VscCB0aGlzIHdpbGwgbGVhZCB0byAgImluZGV0ZXJtaW5pc3RpYyIgaW52ZXJzZSB2YWx1ZXMgdGhhdCBkZXBlbmQgb24gdGhlIGluaXRpYWwgbWluIGFuZCBtYXgKICAgICAgICAgICAgLy8gYW5kIGZ1cnRoZXIgYmluYXJ5IGRpdmlzaW9uIC0+IHlvdSBjYW4gbGFuZCBhdCBhbnkgb2YgdGhlIGV1cm8gdmFsdWUgdGhhdCBpcyBtYXBwZWQgdG8gdGhlIHNhbWUgbm1rIHZhbHVlCiAgICAgICAgICAgIC8vIHdpdGggY29uZGl0aW9uIGJlbG93IHJlbW92ZWQsIGJpbmFyeSBzZWFyY2ggd2lsbCBwb2ludCB0byB0aGUgbG93ZXN0IGV1ciB2YWx1ZSBwb3NzaWJsZSB3aGljaCBpcyBnb29kIGJlY2F1c2UgaXQgY2Fubm90IGJlIGV4cGxvaXRlZCBldmVuIHdpdGggMCBnYXMgY29zdHMKICAgICAgICAgICAgLyogaWYgKHZhbCA9PSBuZXVtYXJrVWxwcykgewogICAgICAgICAgICAgICAgcmV0dXJuIG1pZDsKICAgICAgICAgICAgfSovCiAgICAgICAgICAgIC8vIE5PVEU6IGFwcHJveGltYXRlIHNlYXJjaCAobm8gaW52ZXJzZSkgbXVzdCByZXR1cm4gdXBwZXIgZWxlbWVudCBvZiB0aGUgZmluYWwgcmFuZ2UKICAgICAgICAgICAgLy8gIGxhc3Qgc3RlcCBvZiBhcHByb3hpbWF0ZSBzZWFyY2ggaXMgYWx3YXlzIChtaW4sIG1pbisxKSBzbyBuZXcgbWlkIGlzICgyKm1pbisxKS8yID0+IG1pbgogICAgICAgICAgICAvLyAgc28gbmV3IG1pbiA9IG1pZCArIDEgPSBtYXggd2hpY2ggd2FzIHVwcGVyIHJhbmdlLiBhbmQgdGhhdCBlbmRzIHRoZSBzZWFyY2gKICAgICAgICAgICAgLy8gTk9URTogd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgaW52ZXJzZXMgZm9yIHRoZSBzYW1lIG5ldW1hcmtVbHBzLCB0aGUgYG1heGAgd2lsbCBiZSBkcmFnZ2VkIGRvd24KICAgICAgICAgICAgLy8gIGJ5IGBtYXggPSBtaWRgIGV4cHJlc3Npb24gdG8gdGhlIGxvd2VzdCBldXIgdmFsdWUgb2YgaW52ZXJzZS4gd29ya3Mgb25seSBmb3IgcmFuZ2VzIHRoYXQgY292ZXIgYWxsIHBvaW50cyBvZiBtdWx0aXBsZSBpbnZlcnNlCiAgICAgICAgICAgIGlmICh2YWwgPCBuZXVtYXJrVWxwcykgewogICAgICAgICAgICAgICAgbWluID0gbWlkICsgMTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG1heCA9IG1pZDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBOT1RFOiBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZXJlIGlzIG5vIGludmVyc2UKICAgICAgICAvLyAgZm9yIGV4YW1wbGUgY3VydmUoMCkgPSAwIGFuZCBjdXJ2ZSgxKSA9IDYsIHNvCiAgICAgICAgLy8gIHRoZXJlIGlzIG5vIHZhbHVlIHkgc3VjaCB0aGF0IGN1cnZlKHkpID0gNS4KICAgICAgICAvLyAgV2hlbiB0aGVyZSBpcyBubyBpbnZlcnNlLCB3ZSBtdXN0IHJldHVybiB1cHBlciBlbGVtZW50IG9mIGxhc3Qgc2VhcmNoIHJhbmdlLgogICAgICAgIC8vICBUaGlzIGhhcyB0aGUgZWZmZWN0IG9mIHJldmVyc2luZyB0aGUgY3VydmUgbGVzcyB3aGVuCiAgICAgICAgLy8gIGJ1cm5pbmcgTmV1bWFya3MuIFRoaXMgZW5zdXJlcyB0aGF0IE5ldW1hcmtzIGNhbiBhbHdheXMKICAgICAgICAvLyAgYmUgYnVybmVkLiBJdCBhbHNvIGVuc3VyZSB0aGF0IHRoZSB0b3RhbCBzdXBwbHkgb2YgTmV1bWFya3MKICAgICAgICAvLyAgcmVtYWlucyBiZWxvdyB0aGUgY2FwLgogICAgICAgIHJldHVybiBtYXg7CiAgICB9CgogICAgZnVuY3Rpb24gbmV1bWFya0NhcCgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBORVVNQVJLX0NBUDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbml0aWFsUmV3YXJkRnJhY3Rpb24oKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gSU5JVElBTF9SRVdBUkRfRlJBQ1RJT047CiAgICB9Cn0KCi8vLyBAdGl0bGUgYWR2YW5jZXMgc25hcHNob3QgaWQgb24gZGVtYW5kCi8vLyBAZGV2IHNlZSBTbmFwc2hvdCBmb2xkZXIgZm9yIGltcGxlbWVudGF0aW9uIGV4YW1wbGVzIGllLiBEYWlseUFuZFNuYXBzaG90YWJsZSBjb250cmFjdApjb250cmFjdCBJU25hcHNob3RhYmxlIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEV2ZW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgc2hvdWxkIGxvZyBlYWNoIG5ldyBzbmFwc2hvdCBpZCBjcmVhdGVkLCBpbmNsdWRpbmcgc25hcHNob3RzIGNyZWF0ZWQgYXV0b21hdGljYWxseSB2aWEgTVNuYXBzaG90UG9saWN5CiAgICBldmVudCBMb2dTbmFwc2hvdENyZWF0ZWQodWludDI1NiBzbmFwc2hvdElkKTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBhbHdheXMgY3JlYXRlcyBuZXcgc25hcHNob3QgaWQgd2hpY2ggZ2V0cyByZXR1cm5lZAogICAgLy8vIGhvd2V2ZXIsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGFueSBzbmFwc2hvdCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCB0aGlzIGlkLCB0aGlzIGRlcGVuZHMgb24gdGhlIGltcGxlbWVudGF0aW9uIG9mIE1TbmFwaG90UG9saWN5CiAgICBmdW5jdGlvbiBjcmVhdGVTbmFwc2hvdCgpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludDI1Nik7CgogICAgLy8vIHVwcGVyIGJvdW5kIG9mIHNlcmllcyBzbmFwc2hvdElkcyBmb3Igd2hpY2ggdGhlcmUncyBhIHZhbHVlCiAgICBmdW5jdGlvbiBjdXJyZW50U25hcHNob3RJZCgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KTsKfQoKLy8vIEB0aXRsZSBBYnN0cmFjdHMgc25hcHNob3QgaWQgY3JlYXRpb24gbG9naWNzCi8vLyBAZGV2IE1peGluIChpbnRlcm5hbCBpbnRlcmZhY2UpIG9mIHRoZSBzbmFwc2hvdCBwb2xpY3kgd2hpY2ggYWJzdHJhY3RzIHNuYXBzaG90IGlkIGNyZWF0aW9uIGxvZ2ljcyBmcm9tIFNuYXBzaG90IGNvbnRyYWN0Ci8vLyBAZGV2IHRvIGJlIGltcGxlbWVudGVkIGFuZCBzdWNoIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBtaXhlZCB3aXRoIFNuYXBzaG90LWRlcml2ZWQgY29udHJhY3QsIHNlZSBFdmVyeUJsb2NrIGZvciBzaW1wbGVzdCBleGFtcGxlIG9mIGltcGxlbWVudGF0aW9uIGFuZCBTdGFuZGFyZFNuYXBzaG90VG9rZW4KY29udHJhY3QgTVNuYXBzaG90UG9saWN5IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEludGVybmFsIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gVGhlIHNuYXBzaG90IElkcyBuZWVkIHRvIGJlIHN0cmljdGx5IGluY3JlYXNpbmcuCiAgICAvLyBXaGVuZXZlciB0aGUgc25hc3BzaG90IGlkIGNoYW5nZXMsIGEgbmV3IHNuYXBzaG90IHdpbGwgYmUgY3JlYXRlZC4KICAgIC8vIEFzIGxvbmcgYXMgdGhlIHNhbWUgc25hcHNob3QgaWQgaXMgYmVpbmcgcmV0dXJuZWQsIGxhc3Qgc25hcHNob3Qgd2lsbCBiZSB1cGRhdGVkIGFzIHRoaXMgaW5kaWNhdGVzIHRoYXQgc25hcHNob3QgaWQgZGlkbid0IGNoYW5nZQogICAgLy8KICAgIC8vIFZhbHVlcyBwYXNzZWQgdG8gYGhhc1ZhbHVlQXRgIGFuZCBgdmFsdXRlQXRgIGFyZSByZXF1aXJlZAogICAgLy8gdG8gYmUgbGVzcyBvciBlcXVhbCB0byBgbUN1cnJlbnRTbmFwc2hvdElkKClgLgogICAgZnVuY3Rpb24gbUN1cnJlbnRTbmFwc2hvdElkKCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpOwp9CgovLy8gQHRpdGxlIGNyZWF0ZXMgc25hcHNob3QgaWQgb24gZWFjaCBkYXkgYm91bmRhcnkgYW5kIGFsbG93cyB0byBjcmVhdGUgYWRkaXRpb25hbCBzbmFwc2hvdHMgd2l0aGluIGEgZ2l2ZW4gZGF5Ci8vLyBAZGV2IHNuYXBzaG90cyBhcmUgZW5jb2RlZCBpbiBzaW5nbGUgdWludDI1Niwgd2hlcmUgaGlnaCAxMjggYml0cyByZXByZXNlbnRzIGEgZGF5IG51bWJlciAoZnJvbSB1bml4IGVwb2NoKSBhbmQgbG93IDEyOCBiaXRzIHJlcHJlc2VudHMgYWRkaXRpb25hbCBzbmFwc2hvdHMgd2l0aGluIGdpdmVuIGRheSBjcmVhdGUgdmlhIElTbmFwc2hvdGFibGUKY29udHJhY3QgRGFpbHlBbmRTbmFwc2hvdGFibGUgaXMKICAgIE1TbmFwc2hvdFBvbGljeSwKICAgIElTbmFwc2hvdGFibGUKewogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdGFudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIEZsb29yWzIqKjEyOCAvIDEgZGF5c10KICAgIHVpbnQyNTYgcHJpdmF0ZSBNQVhfVElNRVNUQU1QID0gMzkzODQ1MzMyMDg0NDE5NTE3ODk3NDI0MzE0MTU3MTM5MTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE11dGFibGUgc3RhdGUKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIHVpbnQyNTYgcHJpdmF0ZSBfY3VycmVudFNuYXBzaG90SWQ7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBwYXJhbSBzdGFydCBzbmFwc2hvdElkIGZyb20gd2hpY2ggdG8gc3RhcnQgZ2VuZXJhdGluZyB2YWx1ZXMKICAgIC8vLyBAZGV2IHN0YXJ0IG11c3QgYmUgZm9yIHRoZSBzYW1lIGRheSBvciAwLCByZXF1aXJlZCBmb3IgdG9rZW4gY2xvbmluZwogICAgZnVuY3Rpb24gRGFpbHlBbmRTbmFwc2hvdGFibGUodWludDI1NiBzdGFydCkgaW50ZXJuYWwgewogICAgICAgIC8vIDAgaXMgaW52YWxpZCB2YWx1ZSBhcyB3ZSBhcmUgcGFzdCB1bml4IGVwb2NoCiAgICAgICAgaWYgKHN0YXJ0ID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGRheUJhc2UgPSBzbmFwc2hvdEF0KGJsb2NrLnRpbWVzdGFtcCk7CiAgICAgICAgICAgIHJlcXVpcmUoc3RhcnQgPj0gZGF5QmFzZSk7CiAgICAgICAgICAgIC8vIGRheUJhc2UgKyAyKioxMjggd2lsbCBub3Qgb3ZlcmZsb3cgYXMgaXQgaXMgYmFzZWQgb24gYmxvY2sudGltZXN0YW1wCiAgICAgICAgICAgIHJlcXVpcmUoc3RhcnQgPCBkYXlCYXNlICsgMioqMTI4KTsKICAgICAgICAgICAgX2N1cnJlbnRTbmFwc2hvdElkID0gc3RhcnQ7CiAgICAgICAgfQogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZnVuY3Rpb24gc25hcHNob3RBdCh1aW50MjU2IHRpbWVzdGFtcCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmVxdWlyZSh0aW1lc3RhbXAgPCBNQVhfVElNRVNUQU1QKTsKCiAgICAgICAgdWludDI1NiBkYXlCYXNlID0gMioqMTI4ICogKHRpbWVzdGFtcCAvIDEgZGF5cyk7CiAgICAgICAgcmV0dXJuIGRheUJhc2U7CiAgICB9CgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgSVNuYXBzaG90YWJsZQogICAgLy8KCiAgICBmdW5jdGlvbiBjcmVhdGVTbmFwc2hvdCgpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICB1aW50MjU2IGRheUJhc2UgPSAyKioxMjggKiAoYmxvY2sudGltZXN0YW1wIC8gMSBkYXlzKTsKCiAgICAgICAgaWYgKGRheUJhc2UgPiBfY3VycmVudFNuYXBzaG90SWQpIHsKICAgICAgICAgICAgLy8gTmV3IGRheSBoYXMgc3RhcnRlZCwgY3JlYXRlIHNuYXBzaG90IGZvciBtaWRuaWdodAogICAgICAgICAgICBfY3VycmVudFNuYXBzaG90SWQgPSBkYXlCYXNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHdpdGhpbiBzaW5nbGUgZGF5LCBpbmNyZWFzZSBjb3VudGVyIChhc3N1bWUgMioqMTI4IHdpbGwgbm90IGJlIGNyb3NzZWQpCiAgICAgICAgICAgIF9jdXJyZW50U25hcHNob3RJZCArPSAxOwogICAgICAgIH0KCiAgICAgICAgLy8gTG9nIGFuZCByZXR1cm4KICAgICAgICBMb2dTbmFwc2hvdENyZWF0ZWQoX2N1cnJlbnRTbmFwc2hvdElkKTsKICAgICAgICByZXR1cm4gX2N1cnJlbnRTbmFwc2hvdElkOwogICAgfQoKICAgIGZ1bmN0aW9uIGN1cnJlbnRTbmFwc2hvdElkKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIG1DdXJyZW50U25hcHNob3RJZCgpOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBNU25hcHNob3RQb2xpY3kKICAgIC8vCgogICAgZnVuY3Rpb24gbUN1cnJlbnRTbmFwc2hvdElkKCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBkYXlCYXNlID0gMioqMTI4ICogKGJsb2NrLnRpbWVzdGFtcCAvIDEgZGF5cyk7CgogICAgICAgIC8vIE5ldyBkYXkgaGFzIHN0YXJ0ZWQKICAgICAgICBpZiAoZGF5QmFzZSA+IF9jdXJyZW50U25hcHNob3RJZCkgewogICAgICAgICAgICBfY3VycmVudFNuYXBzaG90SWQgPSBkYXlCYXNlOwogICAgICAgICAgICBMb2dTbmFwc2hvdENyZWF0ZWQoZGF5QmFzZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gX2N1cnJlbnRTbmFwc2hvdElkOwogICAgfQp9CgovLy8gQHRpdGxlIGNvbnRyb2xzIHNwZW5kaW5nIGFwcHJvdmFscwovLy8gQGRldiBUb2tlbkFsbG93YW5jZSBvYnNlcnZlcyB0aGlzIGludGVyZmFjZSwgTmV1bWFyayBjb250cmFjdCBpbXBsZW1lbnRzIGl0CmNvbnRyYWN0IE1Ub2tlbkFsbG93YW5jZUNvbnRyb2xsZXIgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBOb3RpZmllcyB0aGUgY29udHJvbGxlciBhYm91dCBhbiBhcHByb3ZhbCBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIHRoYXQgY2FsbHMgYGFwcHJvdmUoKWAKICAgIC8vLyBAcGFyYW0gc3BlbmRlciBUaGUgc3BlbmRlciBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBhcHByb3ZhbAogICAgZnVuY3Rpb24gbU9uQXBwcm92ZSgKICAgICAgICBhZGRyZXNzIG93bmVyLAogICAgICAgIGFkZHJlc3Mgc3BlbmRlciwKICAgICAgICB1aW50MjU2IGFtb3VudAogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAoYm9vbCBhbGxvdyk7Cgp9CgovLy8gQHRpdGxlIGNvbnRyb2xzIHRva2VuIHRyYW5zZmVycwovLy8gQGRldiBCYXNpY1NuYXBzaG90VG9rZW4gb2JzZXJ2ZXMgdGhpcyBpbnRlcmZhY2UsIE5ldW1hcmsgY29udHJhY3QgaW1wbGVtZW50cyBpdApjb250cmFjdCBNVG9rZW5UcmFuc2ZlckNvbnRyb2xsZXIgewoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBOb3RpZmllcyB0aGUgY29udHJvbGxlciBhYm91dCBhIHRva2VuIHRyYW5zZmVyIGFsbG93aW5nIHRoZQogICAgLy8vICBjb250cm9sbGVyIHRvIHJlYWN0IGlmIGRlc2lyZWQKICAgIC8vLyBAcGFyYW0gZnJvbSBUaGUgb3JpZ2luIG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSB0byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSB0cmFuc2ZlcgogICAgZnVuY3Rpb24gbU9uVHJhbnNmZXIoCiAgICAgICAgYWRkcmVzcyBmcm9tLAogICAgICAgIGFkZHJlc3MgdG8sCiAgICAgICAgdWludDI1NiBhbW91bnQKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKGJvb2wgYWxsb3cpOwoKfQoKLy8vIEB0aXRsZSBjb250cm9scyBhcHByb3ZhbHMgYW5kIHRyYW5zZmVycwovLy8gQGRldiBUaGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCBtdXN0IGltcGxlbWVudCB0aGVzZSBmdW5jdGlvbnMsIHNlZSBOZXVtYXJrIGFzIGV4YW1wbGUKLy8vIEBkZXYgcGxlYXNlIG5vdGUgdGhhdCBjb250cm9sbGVyIG1heSBiZSBhIHNlcGFyYXRlIGNvbnRyYWN0IHRoYXQgaXMgY2FsbGVkIGZyb20gbU9uVHJhbnNmZXIgYW5kIG1PbkFwcHJvdmUgZnVuY3Rpb25zCmNvbnRyYWN0IE1Ub2tlbkNvbnRyb2xsZXIgaXMgTVRva2VuVHJhbnNmZXJDb250cm9sbGVyLCBNVG9rZW5BbGxvd2FuY2VDb250cm9sbGVyIHsKfQoKLy8vIEB0aXRsZSBpbnRlcm5hbCB0b2tlbiB0cmFuc2ZlciBmdW5jdGlvbgovLy8gQGRldiBzZWUgQmFzaWNTbmFwc2hvdFRva2VuIGZvciBpbXBsZW1lbnRhdGlvbgpjb250cmFjdCBNVG9rZW5UcmFuc2ZlciB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IFRoaXMgaXMgdGhlIGFjdHVhbCB0cmFuc2ZlciBmdW5jdGlvbiBpbiB0aGUgdG9rZW4gY29udHJhY3QsIGl0IGNhbgogICAgLy8vICBvbmx5IGJlIGNhbGxlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhpcyBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIC8vLyBAcGFyYW0gdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAZGV2ICByZXZlcnRzIGlmIHRyYW5zZmVyIHdhcyBub3Qgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gbVRyYW5zZmVyKAogICAgICAgIGFkZHJlc3MgZnJvbSwKICAgICAgICBhZGRyZXNzIHRvLAogICAgICAgIHVpbnQyNTYgYW1vdW50CiAgICApCiAgICAgICAgaW50ZXJuYWw7Cn0KCi8vLyBAdGl0bGUgdG9rZW4gc3BlbmRpbmcgYXBwcm92YWwgYW5kIHRyYW5zZmVyCi8vLyBAZGV2IGltcGxlbWVudHMgdG9rZW4gYXBwcm92YWwgYW5kIHRyYW5zZmVycyBhbmQgZXhwb3NlcyByZWxldmFudCBwYXJ0IG9mIEVSQzIwIGFuZCBFUkM2NzcgYXBwcm92ZUFuZENhbGwKLy8vICAgICBtYXkgYmUgbWl4ZWQgaW4gd2l0aCBhbnkgYmFzaWMgdG9rZW4gKGltcGxlbWVudGluZyBtVHJhbnNmZXIpIGxpa2UgQmFzaWNTbmFwc2hvdFRva2VuIG9yIE1pbnRhYmxlU25hcHNob3RUb2tlbiB0byBhZGQgYXBwcm92YWwgbWVjaGFuaXNtCi8vLyAgICAgb2JzZXJ2ZXMgTVRva2VuQWxsb3dhbmNlQ29udHJvbGxlciBpbnRlcmZhY2UKLy8vICAgICBvYnNlcnZlcyBNVG9rZW5UcmFuc2Zlcgpjb250cmFjdCBUb2tlbkFsbG93YW5jZSBpcwogICAgTVRva2VuVHJhbnNmZXIsCiAgICBNVG9rZW5BbGxvd2FuY2VDb250cm9sbGVyLAogICAgSUVSQzIwQWxsb3dhbmNlLAogICAgSUVSQzY3N1Rva2VuCnsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE11dGFibGUgc3RhdGUKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIGBhbGxvd2VkYCB0cmFja3MgcmlnaHRzIHRvIHNwZW5kcyBvdGhlcnMgdG9rZW5zIGFzIHBlciBFUkMyMAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwcml2YXRlIF9hbGxvd2VkOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gQ29uc3RydWN0b3IKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIFRva2VuQWxsb3dhbmNlKCkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgSUVSQzIwVG9rZW4KICAgIC8vCgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIHJlYWQgdGhlIGBhbGxvd2VkW11gIG1hcAogICAgLy8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0aGF0IG93bnMgdGhlIHRva2VuCiAgICAvLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBvZiBfb3duZXIgdGhhdCBfc3BlbmRlciBpcyBhbGxvd2VkCiAgICAvLy8gIHRvIHNwZW5kCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIF9hbGxvd2VkW293bmVyXVtzcGVuZGVyXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYuIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBFUkMyMCBhcHByb3ZlIGZ1bmN0aW9uCiAgICAvLy8gIHdoZXJlIGFsbG93YW5jZSBwZXIgc3BlbmRlciBtdXN0IGJlIDAgdG8gYWxsb3cgY2hhbmdlIG9mIHN1Y2ggYWxsb3dhbmNlCiAgICAvLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgb3IgcmV2ZXJ0cywgRmFsc2UgaXMgbmV2ZXIgcmV0dXJuZWQKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSBhcHByb3ZlIGZ1bmN0aW9uIGNhbGwKICAgICAgICByZXF1aXJlKG1PbkFwcHJvdmUobXNnLnNlbmRlciwgc3BlbmRlciwgYW1vdW50KSk7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoKGFtb3VudCA9PSAwKSB8fCAoX2FsbG93ZWRbbXNnLnNlbmRlcl1bc3BlbmRlcl0gPT0gMCkpOwoKICAgICAgICBfYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IGFtb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBzcGVuZGVyLCBhbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF9hbW91bnRgIHRva2VucyB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdAogICAgLy8vICBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIGZyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIHRvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCwgcmV2ZXJ0cyBpbiBhbnkgb3RoZXIgY2FzZQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIC8vIFRoZSBzdGFuZGFyZCBFUkMgMjAgdHJhbnNmZXJGcm9tIGZ1bmN0aW9uYWxpdHkKICAgICAgICBib29sIGFtb3VudEFwcHJvdmVkID0gX2FsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPj0gYW1vdW50OwogICAgICAgIHJlcXVpcmUoYW1vdW50QXBwcm92ZWQpOwoKICAgICAgICBfYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSAtPSBhbW91bnQ7CiAgICAgICAgbVRyYW5zZmVyKGZyb20sIHRvLCBhbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBJRVJDNjc3VG9rZW4KICAgIC8vCgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc2VuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYsIGFuZCB0aGVuIGEgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzCiAgICAvLy8gIGJlaW5nIGFwcHJvdmVkLCBgX3NwZW5kZXJgLiBUaGlzIGFsbG93cyB1c2VycyB0byB1c2UgdGhlaXIgdG9rZW5zIHRvCiAgICAvLy8gIGludGVyYWN0IHdpdGggY29udHJhY3RzIGluIG9uZSBmdW5jdGlvbiBjYWxsIGluc3RlYWQgb2YgdHdvCiAgICAvLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBUcnVlIG9yIHJldmVydHMsIEZhbHNlIGlzIG5ldmVyIHJldHVybmVkCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbCgKICAgICAgICBhZGRyZXNzIHNwZW5kZXIsCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgYnl0ZXMgZXh0cmFEYXRhCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIHJlcXVpcmUoYXBwcm92ZShzcGVuZGVyLCBhbW91bnQpKTsKCiAgICAgICAgc3VjY2VzcyA9IElFUkM2NzdDYWxsYmFjayhzcGVuZGVyKS5yZWNlaXZlQXBwcm92YWwoCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIGFtb3VudCwKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgZXh0cmFEYXRhCiAgICAgICAgKTsKICAgICAgICByZXF1aXJlKHN1Y2Nlc3MpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKLy8vIEB0aXRsZSBSZWFkcyBhbmQgd3JpdGVzIHNuYXBzaG90cwovLy8gQGRldiBNYW5hZ2VzIHJlYWRpbmcgYW5kIHdyaXRpbmcgYSBzZXJpZXMgb2YgdmFsdWVzLCB3aGVyZSBlYWNoIHZhbHVlIGhhcyBhc3NpZ25lZCBhIHNuYXBzaG90IGlkIGZvciBhY2Nlc3MgdG8gaGlzdG9yaWNhbCBkYXRhCi8vLyBAZGV2IG1heSBiZSBhZGRlZCB0byBhbnkgY29udHJhY3QgdG8gcHJvdmlkZSBzbmFwc2hvdHRpbmcgbWVjaGFuaXNtLiBzaG91bGQgYmUgbWl4ZWQgaW4gd2l0aCBhbnkgb2YgTVNuYXBzaG90UG9saWN5IGltcGxlbWVudGF0aW9ucyB0byBjdXN0b21pemUgc25hcHNob3QgY3JlYXRpb24gbWVjaGFuaWNzCi8vLyAgICAgb2JzZXJ2ZXMgTVNuYXBzaG90UG9saWN5Ci8vLyBiYXNlZCBvbiBNaW5pTWUgdG9rZW4KY29udHJhY3QgU25hcHNob3QgaXMgTVNuYXBzaG90UG9saWN5IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFR5cGVzCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBgVmFsdWVzYCBpcyB0aGUgc3RydWN0dXJlIHRoYXQgYXR0YWNoZXMgYSBzbmFwc2hvdCBpZCB0byBhCiAgICAvLy8gIGdpdmVuIHZhbHVlLCB0aGUgc25hcHNob3QgaWQgYXR0YWNoZWQgaXMgdGhlIG9uZSB0aGF0IGxhc3QgY2hhbmdlZCB0aGUKICAgIC8vLyAgdmFsdWUKICAgIHN0cnVjdCBWYWx1ZXMgewoKICAgICAgICAvLyBgc25hcHNob3RJZGAgaXMgdGhlIHNuYXBzaG90IGlkIHRoYXQgdGhlIHZhbHVlIHdhcyBnZW5lcmF0ZWQgYXQKICAgICAgICB1aW50MjU2IHNuYXBzaG90SWQ7CgogICAgICAgIC8vIGB2YWx1ZWAgYXQgYSBzcGVjaWZpYyBzbmFwc2hvdCBpZAogICAgICAgIHVpbnQyNTYgdmFsdWU7CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIGhhc1ZhbHVlKAogICAgICAgIFZhbHVlc1tdIHN0b3JhZ2UgdmFsdWVzCiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHZhbHVlcy5sZW5ndGggPiAwOwogICAgfQoKICAgIC8vLyBAZGV2IG1ha2VzIHN1cmUgdGhhdCAnc25hcHNob3RJZCcgYmV0d2VlbiBjdXJyZW50IHNuYXBzaG90IGlkIChtQ3VycmVudFNuYXBzaG90SWQpIGFuZCBmaXJzdCBzbmFwc2hvdCBpZC4gdGhpcyBndWFyYW50ZWVzIHRoYXQgZ2V0VmFsdWVBdCByZXR1cm5zIHZhbHVlIGZyb20gb25lIG9mIHRoZSBzbmFwc2hvdHMuCiAgICBmdW5jdGlvbiBoYXNWYWx1ZUF0KAogICAgICAgIFZhbHVlc1tdIHN0b3JhZ2UgdmFsdWVzLAogICAgICAgIHVpbnQyNTYgc25hcHNob3RJZAogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoc25hcHNob3RJZCA8PSBtQ3VycmVudFNuYXBzaG90SWQoKSk7CiAgICAgICAgcmV0dXJuIHZhbHVlcy5sZW5ndGggPiAwICYmIHZhbHVlc1swXS5zbmFwc2hvdElkIDw9IHNuYXBzaG90SWQ7CiAgICB9CgogICAgLy8vIGdldHMgbGFzdCB2YWx1ZSBpbiB0aGUgc2VyaWVzCiAgICBmdW5jdGlvbiBnZXRWYWx1ZSgKICAgICAgICBWYWx1ZXNbXSBzdG9yYWdlIHZhbHVlcywKICAgICAgICB1aW50MjU2IGRlZmF1bHRWYWx1ZQogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50MjU2IGxhc3QgPSB2YWx1ZXMubGVuZ3RoIC0gMTsKICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tsYXN0XS52YWx1ZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgYGdldFZhbHVlQXRgIHJldHJpZXZlcyB2YWx1ZSBhdCBhIGdpdmVuIHNuYXBzaG90IGlkCiAgICAvLy8gQHBhcmFtIHZhbHVlcyBUaGUgc2VyaWVzIG9mIHZhbHVlcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHBhcmFtIHNuYXBzaG90SWQgU25hcHNob3QgaWQgdG8gcmV0cmlldmUgdGhlIHZhbHVlIGF0CiAgICAvLy8gQHJldHVybiBWYWx1ZSBpbiBzZXJpZXMgYmVpbmcgcXVlcmllZAogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdCgKICAgICAgICBWYWx1ZXNbXSBzdG9yYWdlIHZhbHVlcywKICAgICAgICB1aW50MjU2IHNuYXBzaG90SWQsCiAgICAgICAgdWludDI1NiBkZWZhdWx0VmFsdWUKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXF1aXJlKHNuYXBzaG90SWQgPD0gbUN1cnJlbnRTbmFwc2hvdElkKCkpOwoKICAgICAgICAvLyBFbXB0eSB2YWx1ZQogICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICAgICAgICB9CgogICAgICAgIC8vIFNob3J0Y3V0IGZvciB0aGUgb3V0IG9mIGJvdW5kcyBzbmFwc2hvdHMKICAgICAgICB1aW50MjU2IGxhc3QgPSB2YWx1ZXMubGVuZ3RoIC0gMTsKICAgICAgICB1aW50MjU2IGxhc3RTbmFwc2hvdCA9IHZhbHVlc1tsYXN0XS5zbmFwc2hvdElkOwogICAgICAgIGlmIChzbmFwc2hvdElkID49IGxhc3RTbmFwc2hvdCkgewogICAgICAgICAgICByZXR1cm4gdmFsdWVzW2xhc3RdLnZhbHVlOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGZpcnN0U25hcHNob3QgPSB2YWx1ZXNbMF0uc25hcHNob3RJZDsKICAgICAgICBpZiAoc25hcHNob3RJZCA8IGZpcnN0U25hcHNob3QpIHsKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKICAgICAgICB9CiAgICAgICAgLy8gQmluYXJ5IHNlYXJjaCBvZiB0aGUgdmFsdWUgaW4gdGhlIGFycmF5CiAgICAgICAgdWludDI1NiBtaW4gPSAwOwogICAgICAgIHVpbnQyNTYgbWF4ID0gbGFzdDsKICAgICAgICB3aGlsZSAobWF4ID4gbWluKSB7CiAgICAgICAgICAgIHVpbnQyNTYgbWlkID0gKG1heCArIG1pbiArIDEpIC8gMjsKICAgICAgICAgICAgLy8gbXVzdCBhbHdheXMgcmV0dXJuIGxvd2VyIGluZGljZSBmb3IgYXBwcm94aW1hdGUgc2VhcmNoZXMKICAgICAgICAgICAgaWYgKHZhbHVlc1ttaWRdLnNuYXBzaG90SWQgPD0gc25hcHNob3RJZCkgewogICAgICAgICAgICAgICAgbWluID0gbWlkOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWF4ID0gbWlkIC0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWVzW21pbl0udmFsdWU7CiAgICB9CgogICAgLy8vIEBkZXYgYHNldFZhbHVlYCB1c2VkIHRvIHVwZGF0ZSBzZXF1ZW5jZSBhdCBuZXh0IHNuYXBzaG90CiAgICAvLy8gQHBhcmFtIHZhbHVlcyBUaGUgc2VxdWVuY2UgYmVpbmcgdXBkYXRlZAogICAgLy8vIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IGxhc3QgdmFsdWUgb2Ygc2VxdWVuY2UKICAgIGZ1bmN0aW9uIHNldFZhbHVlKAogICAgICAgIFZhbHVlc1tdIHN0b3JhZ2UgdmFsdWVzLAogICAgICAgIHVpbnQyNTYgdmFsdWUKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIC8vIFRPRE86IHNpbXBsaWZ5IG9yIGJyZWFrIGludG8gc21hbGxlciBmdW5jdGlvbnMKCiAgICAgICAgdWludDI1NiBjdXJyZW50U25hcHNob3RJZCA9IG1DdXJyZW50U25hcHNob3RJZCgpOwogICAgICAgIC8vIEFsd2F5cyBjcmVhdGUgYSBuZXcgZW50cnkgaWYgdGhlcmUgY3VycmVudGx5IGlzIG5vIHZhbHVlCiAgICAgICAgYm9vbCBlbXB0eSA9IHZhbHVlcy5sZW5ndGggPT0gMDsKICAgICAgICBpZiAoZW1wdHkpIHsKICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGVudHJ5CiAgICAgICAgICAgIHZhbHVlcy5wdXNoKAogICAgICAgICAgICAgICAgVmFsdWVzKHsKICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdElkOiBjdXJyZW50U25hcHNob3RJZCwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHVpbnQyNTYgbGFzdCA9IHZhbHVlcy5sZW5ndGggLSAxOwogICAgICAgIGJvb2wgaGFzTmV3U25hcHNob3QgPSB2YWx1ZXNbbGFzdF0uc25hcHNob3RJZCA8IGN1cnJlbnRTbmFwc2hvdElkOwogICAgICAgIGlmIChoYXNOZXdTbmFwc2hvdCkgewoKICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0aGUgdmFsdWUgd2FzIG5vdCBtb2RpZmllZAogICAgICAgICAgICBib29sIHVubW9kaWZpZWQgPSB2YWx1ZXNbbGFzdF0udmFsdWUgPT0gdmFsdWU7CiAgICAgICAgICAgIGlmICh1bm1vZGlmaWVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgZW50cnkKICAgICAgICAgICAgdmFsdWVzLnB1c2goCiAgICAgICAgICAgICAgICBWYWx1ZXMoewogICAgICAgICAgICAgICAgICAgIHNuYXBzaG90SWQ6IGN1cnJlbnRTbmFwc2hvdElkLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgLy8gV2UgYXJlIHVwZGF0aW5nIHRoZSBjdXJyZW50U25hcHNob3RJZAogICAgICAgICAgICBib29sIHByZXZpb3VzVW5tb2RpZmllZCA9IGxhc3QgPiAwICYmIHZhbHVlc1tsYXN0IC0gMV0udmFsdWUgPT0gdmFsdWU7CiAgICAgICAgICAgIGlmIChwcmV2aW91c1VubW9kaWZpZWQpIHsKICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJyZW50IHNuYXBzaG90IGlmIGN1cnJlbnQgdmFsdWUgd2FzIHNldCB0byBwcmV2aW91cyB2YWx1ZQogICAgICAgICAgICAgICAgZGVsZXRlIHZhbHVlc1tsYXN0XTsKICAgICAgICAgICAgICAgIHZhbHVlcy5sZW5ndGgtLTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gT3ZlcndyaXRlIG5leHQgc25hcHNob3QgZW50cnkKICAgICAgICAgICAgdmFsdWVzW2xhc3RdLnZhbHVlID0gdmFsdWU7CiAgICAgICAgfQogICAgfQp9CgovLy8gQHRpdGxlIGFjY2VzcyB0byBzbmFwc2hvdHMgb2YgYSB0b2tlbgovLy8gQG5vdGljZSBhbGxvd3MgdG8gaW1wbGVtZW50IGNvbXBsZXggdG9rZW4gaG9sZGVyIHJpZ2h0cyBsaWtlIHJldmVudWUgZGlzYnVyc2FsIG9yIHZvdGluZwovLy8gQG5vdGljZSBzbmFwc2hvdHMgYXJlIHNlcmllcyBvZiB2YWx1ZXMgd2l0aCBhc3NpZ25lZCBpZHMuIGlkcyBpbmNyZWFzZSBzdHJpY3RseS4gcGFydGljdWxhciBpZCBtZWNoYW5pc20gaXMgbm90IGFzc3VtZWQKY29udHJhY3QgSVRva2VuU25hcHNob3RzIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBgc25hcHNob3RJZGAuCiAgICAvLy8gQHBhcmFtIHNuYXBzaG90SWQgb2Ygc25hcHNob3QgYXQgd2hpY2ggdG90YWxTdXBwbHkgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYHNuYXBzaG90SWRgCiAgICAvLy8gQGRldiByZXZlcnRzIG9uIHNuYXBzaG90SWRzIGdyZWF0ZXIgdGhhbiBjdXJyZW50U25hcHNob3RJZCgpCiAgICAvLy8gQGRldiByZXR1cm5zIDAgZm9yIHNuYXBzaG90SWRzIGxlc3MgdGhhbiBzbmFwc2hvdElkIG9mIGZpcnN0IHZhbHVlCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseUF0KHVpbnQyNTYgc25hcHNob3RJZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnModWludDI1Nik7CgogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgb3duZXJgIGF0IGEgc3BlY2lmaWMgYHNuYXBzaG90SWRgCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcGFyYW0gc25hcHNob3RJZCBvZiBzbmFwc2hvdCBhdCB3aGljaCB0aGUgYmFsYW5jZSBpcyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBhdCBgc25hcHNob3RJZGAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3Mgb3duZXIsIHVpbnQyNTYgc25hcHNob3RJZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpOwoKICAgIC8vLyBAbm90aWNlIHVwcGVyIGJvdW5kIG9mIHNlcmllcyBvZiBzbmFwc2hvdElkcyBmb3Igd2hpY2ggdGhlcmUncyBhIHZhbHVlIGluIHNlcmllcwogICAgLy8vIEByZXR1cm4gc25hcHNob3RJZAogICAgZnVuY3Rpb24gY3VycmVudFNuYXBzaG90SWQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1Nik7Cn0KCi8vLyBAdGl0bGUgcmVwcmVzZW50cyBsaW5rIGJldHdlZW4gY2xvbmVkIGFuZCBwYXJlbnQgdG9rZW4KLy8vIEBkZXYgd2hlbiB0b2tlbiBpcyBjbG9uZSBmcm9tIG90aGVyIHRva2VuLCBpbml0aWFsIGJhbGFuY2VzIG9mIHRoZSBjbG9uZWQgdG9rZW4KLy8vICAgICBjb3JyZXNwb25kIHRvIGJhbGFuY2VzIG9mIHBhcmVudCB0b2tlbiBhdCB0aGUgbW9tZW50IG9mIHBhcmVudCBzbmFwc2hvdCBpZCBzcGVjaWZpZWQKLy8vIEBub3RpY2UgcGxlYXNlIG5vdGUgdGhhdCBvdGhlciB0b2tlbnMgYmVzaWRlIHNuYXBzaG90IHRva2VuIG1heSBiZSBjbG9uZWQKY29udHJhY3QgSUNsb25lZFRva2VuUGFyZW50IGlzIElUb2tlblNuYXBzaG90cyB7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgogICAgLy8vIEByZXR1cm4gYWRkcmVzcyBvZiBwYXJlbnQgdG9rZW4sIGFkZHJlc3MoMCkgaWYgcm9vdAogICAgLy8vIEBkZXYgcGFyZW50IHRva2VuIGRvZXMgbm90IG5lZWQgdG8gY2xvbmFibGUsIG5vciBzbmFwc2hvdHRhYmxlLCBqdXN0IGEgbm9ybWFsIHRva2VuCiAgICBmdW5jdGlvbiBwYXJlbnRUb2tlbigpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zKElDbG9uZWRUb2tlblBhcmVudCBwYXJlbnQpOwoKICAgIC8vLyBAcmV0dXJuIHNuYXBzaG90IGF0IHdjaGljaCBpbml0aWFsIHRva2VuIGRpc3RyaWJ1dGlvbiB3YXMgdGFrZW4KICAgIGZ1bmN0aW9uIHBhcmVudFNuYXBzaG90SWQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2IHNuYXBzaG90SWQpOwp9CgovLy8gQHRpdGxlIHRva2VuIHdpdGggc25hcHNob3RzIGFuZCB0cmFuc2ZlciBmdW5jdGlvbmFsaXR5Ci8vLyBAZGV2IG9ic2VydmVzIE1Ub2tlblRyYW5zZmVyQ29udHJvbGxlciBpbnRlcmZhY2UKLy8vICAgICBvYnNlcnZlcyBJU25hcHNob3RUb2tlbiBpbnRlcmZhY2UKLy8vICAgICBpbXBsZW1lbnRlcyBNVG9rZW5UcmFuc2ZlciBpbnRlcmZhY2UKY29udHJhY3QgQmFzaWNTbmFwc2hvdFRva2VuIGlzCiAgICBNVG9rZW5UcmFuc2ZlciwKICAgIE1Ub2tlblRyYW5zZmVyQ29udHJvbGxlciwKICAgIElCYXNpY1Rva2VuLAogICAgSUNsb25lZFRva2VuUGFyZW50LAogICAgU25hcHNob3QKewogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBJbW11dGFibGUgc3RhdGUKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIGBQQVJFTlRfVE9LRU5gIGlzIHRoZSBUb2tlbiBhZGRyZXNzIHRoYXQgd2FzIGNsb25lZCB0byBwcm9kdWNlIHRoaXMgdG9rZW47CiAgICAvLyAgaXQgd2lsbCBiZSAweDAgZm9yIGEgdG9rZW4gdGhhdCB3YXMgbm90IGNsb25lZAogICAgSUNsb25lZFRva2VuUGFyZW50IHByaXZhdGUgUEFSRU5UX1RPS0VOOwoKICAgIC8vIGBQQVJFTlRfU05BUFNIT1RfSURgIGlzIHRoZSBzbmFwc2hvdCBpZCBmcm9tIHRoZSBQYXJlbnQgVG9rZW4gdGhhdCB3YXMKICAgIC8vICB1c2VkIHRvIGRldGVybWluZSB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIGNsb25lZCB0b2tlbgogICAgdWludDI1NiBwcml2YXRlIFBBUkVOVF9TTkFQU0hPVF9JRDsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIE11dGFibGUgc3RhdGUKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vIGBiYWxhbmNlc2AgaXMgdGhlIG1hcCB0aGF0IHRyYWNrcyB0aGUgYmFsYW5jZSBvZiBlYWNoIGFkZHJlc3MsIGluIHRoaXMKICAgIC8vICBjb250cmFjdCB3aGVuIHRoZSBiYWxhbmNlIGNoYW5nZXMgdGhlIHNuYXBzaG90IGlkIHRoYXQgdGhlIGNoYW5nZQogICAgLy8gIG9jY3VycmVkIGlzIGFsc28gaW5jbHVkZWQgaW4gdGhlIG1hcAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBWYWx1ZXNbXSkgaW50ZXJuYWwgX2JhbGFuY2VzOwoKICAgIC8vIFRyYWNrcyB0aGUgaGlzdG9yeSBvZiB0aGUgYHRvdGFsU3VwcGx5YCBvZiB0aGUgdG9rZW4KICAgIFZhbHVlc1tdIGludGVybmFsIF90b3RhbFN1cHBseVZhbHVlczsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIENvbnN0cnVjdG9yCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBDb25zdHJ1Y3RvciB0byBjcmVhdGUgc25hcHNob3QgdG9rZW4KICAgIC8vLyBAcGFyYW0gcGFyZW50VG9rZW4gQWRkcmVzcyBvZiB0aGUgcGFyZW50IHRva2VuLCBzZXQgdG8gMHgwIGlmIGl0IGlzIGEKICAgIC8vLyAgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIHBhcmVudFNuYXBzaG90SWQgYXQgd2hpY2ggc25hcHNob3QgaWQgY2xvbmUgd2FzIGNyZWF0ZWQsIHNldCB0byAwIHRvIGNsb25lIGF0IHVwcGVyIGJvdW5kCiAgICAvLy8gQGRldiBwbGVhc2Ugbm90IHRoYXQgYXMgbG9uZyBhcyBjbG9uZWQgdG9rZW4gZG9lcyBub3Qgb3ZlcndyaXRlIHZhbHVlIGF0IGN1cnJlbnQgc25hcHNob3QgaWQsIGl0IHdpbGwgcmVmZXIKICAgIC8vLyAgICAgdG8gcGFyZW50IHRva2VuIGF0IHdoaWNoIHRoaXMgc25hcHNob3Qgc3RpbGwgbWF5IGNoYW5nZSB1bnRpbCBzbmFwc2hvdCBpZCBpbmNyZWFzZXMuIGZvciB0aGF0IHRpbWUgdG9rZW5zIGFyZSBjb3VwbGVkCiAgICAvLy8gICAgIHRoaXMgaXMgcHJldmVudGVkIGJ5IHBhcmVudFNuYXBzaG90SWQgdmFsdWUgb2YgcGFyZW50VG9rZW4uY3VycmVudFNuYXBzaG90SWQoKSAtIDEgYmVpbmcgdGhlIG1heGl1bXVtCiAgICAvLy8gICAgIHNlZSBTbmFwc2hvdFRva2VuLmpzIHRlc3QgdG8gbGVhcm4gY29uc2VxdWVuY2VzIGNvdXBsaW5nIGhhcy4KICAgIGZ1bmN0aW9uIEJhc2ljU25hcHNob3RUb2tlbigKICAgICAgICBJQ2xvbmVkVG9rZW5QYXJlbnQgcGFyZW50VG9rZW4sCiAgICAgICAgdWludDI1NiBwYXJlbnRTbmFwc2hvdElkCiAgICApCiAgICAgICAgU25hcHNob3QoKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgUEFSRU5UX1RPS0VOID0gcGFyZW50VG9rZW47CiAgICAgICAgaWYgKHBhcmVudFRva2VuID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgcmVxdWlyZShwYXJlbnRTbmFwc2hvdElkID09IDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChwYXJlbnRTbmFwc2hvdElkID09IDApIHsKICAgICAgICAgICAgICAgIHJlcXVpcmUocGFyZW50VG9rZW4uY3VycmVudFNuYXBzaG90SWQoKSA+IDApOwogICAgICAgICAgICAgICAgUEFSRU5UX1NOQVBTSE9UX0lEID0gcGFyZW50VG9rZW4uY3VycmVudFNuYXBzaG90SWQoKSAtIDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBQQVJFTlRfU05BUFNIT1RfSUQgPSBwYXJlbnRTbmFwc2hvdElkOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgSUJhc2ljVG9rZW4KICAgIC8vCgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucwogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5QXRJbnRlcm5hbChtQ3VycmVudFNuYXBzaG90SWQoKSk7CiAgICB9CgogICAgLy8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyB0aGF0J3MgYmFsYW5jZSBpcyBiZWluZyByZXF1ZXN0ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIG9mIGBvd25lcmAgYXQgdGhlIGN1cnJlbnQgYmxvY2sKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKQogICAgewogICAgICAgIHJldHVybiBiYWxhbmNlT2ZBdEludGVybmFsKG93bmVyLCBtQ3VycmVudFNuYXBzaG90SWQoKSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgYW1vdW50YCB0b2tlbnMgdG8gYHRvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwsIHJldmVydHMgaW4gYW55IG90aGVyIGNhc2UKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBtVHJhbnNmZXIobXNnLnNlbmRlciwgdG8sIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgSVRva2VuU25hcHNob3RzCiAgICAvLwoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5QXQodWludDI1NiBzbmFwc2hvdElkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseUF0SW50ZXJuYWwoc25hcHNob3RJZCk7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mQXQoYWRkcmVzcyBvd25lciwgdWludDI1NiBzbmFwc2hvdElkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mQXRJbnRlcm5hbChvd25lciwgc25hcHNob3RJZCk7CiAgICB9CgogICAgZnVuY3Rpb24gY3VycmVudFNuYXBzaG90SWQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gbUN1cnJlbnRTbmFwc2hvdElkKCk7CiAgICB9CgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgSUNsb25lZFRva2VuUGFyZW50CiAgICAvLwoKICAgIGZ1bmN0aW9uIHBhcmVudFRva2VuKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMoSUNsb25lZFRva2VuUGFyZW50IHBhcmVudCkKICAgIHsKICAgICAgICByZXR1cm4gUEFSRU5UX1RPS0VOOwogICAgfQoKICAgIC8vLyBAcmV0dXJuIHNuYXBzaG90IGF0IHdjaGljaCBpbml0aWFsIHRva2VuIGRpc3RyaWJ1dGlvbiB3YXMgdGFrZW4KICAgIGZ1bmN0aW9uIHBhcmVudFNuYXBzaG90SWQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2IHNuYXBzaG90SWQpCiAgICB7CiAgICAgICAgcmV0dXJuIFBBUkVOVF9TTkFQU0hPVF9JRDsKICAgIH0KCiAgICAvLwogICAgLy8gT3RoZXIgcHVibGljIGZ1bmN0aW9ucwogICAgLy8KCiAgICAvLy8gQG5vdGljZSBnZXRzIGFsbCB0b2tlbiBiYWxhbmNlcyBvZiAnb3duZXInCiAgICAvLy8gQGRldiBpbnRlbmRlZCB0byBiZSBjYWxsZWQgdmlhIGV0aF9jYWxsIHdoZXJlIGdhcyBsaW1pdCBpcyBub3QgYW4gaXNzdWUKICAgIGZ1bmN0aW9uIGFsbEJhbGFuY2VzT2YoYWRkcmVzcyBvd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NlsyXVtdKQogICAgewogICAgICAgIC8qIHZlcnkgbmljZSBhbmQgd29ya2luZyBpbXBsZW1lbnRhdGlvbiBiZWxvdywKICAgICAgICAvLyBjb3B5IHRvIG1lbW9yeQogICAgICAgIFZhbHVlc1tdIG1lbW9yeSB2YWx1ZXMgPSBfYmFsYW5jZXNbb3duZXJdOwogICAgICAgIGRvIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy8gaW4gbWVtb3J5IHN0cnVjdHMgaGF2ZSBzaW1wbGUgbGF5b3V0IHdoZXJlIGV2ZXJ5IGl0ZW0gb2NjdXBpZXMgdWludDI1NgogICAgICAgICAgICBiYWxhbmNlcyA6PSB2YWx1ZXMKICAgICAgICB9IHdoaWxlIChmYWxzZSk7Ki8KCiAgICAgICAgVmFsdWVzW10gc3RvcmFnZSB2YWx1ZXMgPSBfYmFsYW5jZXNbb3duZXJdOwogICAgICAgIHVpbnQyNTZbMl1bXSBtZW1vcnkgYmFsYW5jZXMgPSBuZXcgdWludDI1NlsyXVtdKHZhbHVlcy5sZW5ndGgpOwogICAgICAgIGZvcih1aW50MjU2IGlpID0gMDsgaWkgPCB2YWx1ZXMubGVuZ3RoOyArK2lpKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW2lpXSA9IFt2YWx1ZXNbaWldLnNuYXBzaG90SWQsIHZhbHVlc1tpaV0udmFsdWVdOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseUF0SW50ZXJuYWwodWludDI1NiBzbmFwc2hvdElkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2KQogICAgewogICAgICAgIFZhbHVlc1tdIHN0b3JhZ2UgdmFsdWVzID0gX3RvdGFsU3VwcGx5VmFsdWVzOwoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHZhbHVlLCByZXR1cm4gaXQsIHJldmVydHMgaWYgdmFsdWUgaXMgaW4gdGhlIGZ1dHVyZQogICAgICAgIGlmIChoYXNWYWx1ZUF0KHZhbHVlcywgc25hcHNob3RJZCkpIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQodmFsdWVzLCBzbmFwc2hvdElkLCAwKTsKICAgICAgICB9CgogICAgICAgIC8vIFRyeSBwYXJlbnQgY29udHJhY3QgYXQgb3IgYmVmb3JlIHRoZSBmb3JrCiAgICAgICAgaWYgKGFkZHJlc3MoUEFSRU5UX1RPS0VOKSAhPSAwKSB7CiAgICAgICAgICAgIHVpbnQyNTYgZWFybGllclNuYXBzaG90SWQgPSBQQVJFTlRfU05BUFNIT1RfSUQgPiBzbmFwc2hvdElkID8gc25hcHNob3RJZCA6IFBBUkVOVF9TTkFQU0hPVF9JRDsKICAgICAgICAgICAgcmV0dXJuIFBBUkVOVF9UT0tFTi50b3RhbFN1cHBseUF0KGVhcmxpZXJTbmFwc2hvdElkKTsKICAgICAgICB9CgogICAgICAgIC8vIERlZmF1bHQgdG8gYW4gZW1wdHkgYmFsYW5jZQogICAgICAgIHJldHVybiAwOwogICAgfQoKICAgIC8vIGdldCBiYWxhbmNlIGF0IHNuYXBzaG90IGlmIHdpdGggY29udGludWF0aW9uIGluIHBhcmVudCB0b2tlbgogICAgZnVuY3Rpb24gYmFsYW5jZU9mQXRJbnRlcm5hbChhZGRyZXNzIG93bmVyLCB1aW50MjU2IHNuYXBzaG90SWQpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgVmFsdWVzW10gc3RvcmFnZSB2YWx1ZXMgPSBfYmFsYW5jZXNbb3duZXJdOwoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHZhbHVlLCByZXR1cm4gaXQsIHJldmVydHMgaWYgdmFsdWUgaXMgaW4gdGhlIGZ1dHVyZQogICAgICAgIGlmIChoYXNWYWx1ZUF0KHZhbHVlcywgc25hcHNob3RJZCkpIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQodmFsdWVzLCBzbmFwc2hvdElkLCAwKTsKICAgICAgICB9CgogICAgICAgIC8vIFRyeSBwYXJlbnQgY29udHJhY3QgYXQgb3IgYmVmb3JlIHRoZSBmb3JrCiAgICAgICAgaWYgKFBBUkVOVF9UT0tFTiAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIHVpbnQyNTYgZWFybGllclNuYXBzaG90SWQgPSBQQVJFTlRfU05BUFNIT1RfSUQgPiBzbmFwc2hvdElkID8gc25hcHNob3RJZCA6IFBBUkVOVF9TTkFQU0hPVF9JRDsKICAgICAgICAgICAgcmV0dXJuIFBBUkVOVF9UT0tFTi5iYWxhbmNlT2ZBdChvd25lciwgZWFybGllclNuYXBzaG90SWQpOwogICAgICAgIH0KCiAgICAgICAgLy8gRGVmYXVsdCB0byBhbiBlbXB0eSBiYWxhbmNlCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLy8KICAgIC8vIEltcGxlbWVudHMgTVRva2VuVHJhbnNmZXIKICAgIC8vCgogICAgLy8vIEBkZXYgVGhpcyBpcyB0aGUgYWN0dWFsIHRyYW5zZmVyIGZ1bmN0aW9uIGluIHRoZSB0b2tlbiBjb250cmFjdCwgaXQgY2FuCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIHRva2VucyBiZWluZyB0cmFuc2ZlcnJlZAogICAgLy8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwsIHJldmVydHMgaW4gYW55IG90aGVyIGNhc2UKICAgIGZ1bmN0aW9uIG1UcmFuc2ZlcigKICAgICAgICBhZGRyZXNzIGZyb20sCiAgICAgICAgYWRkcmVzcyB0bywKICAgICAgICB1aW50MjU2IGFtb3VudAogICAgKQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgLy8gbmV2ZXIgc2VuZCB0byBhZGRyZXNzIDAKICAgICAgICByZXF1aXJlKHRvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIC8vIGJsb2NrIHRyYW5zZmVycyBpbiBjbG9uZSB0aGF0IHBvaW50cyB0byBmdXR1cmUvY3VycmVudCBzbmFwc2hvdHMgb2YgcGF0ZW50IHRva2VuCiAgICAgICAgcmVxdWlyZShwYXJlbnRUb2tlbigpID09IGFkZHJlc3MoMCkgfHwgcGFyZW50U25hcHNob3RJZCgpIDwgcGFyZW50VG9rZW4oKS5jdXJyZW50U25hcHNob3RJZCgpKTsKICAgICAgICAvLyBBbGVydHMgdGhlIHRva2VuIGNvbnRyb2xsZXIgb2YgdGhlIHRyYW5zZmVyCiAgICAgICAgcmVxdWlyZShtT25UcmFuc2Zlcihmcm9tLCB0bywgYW1vdW50KSk7CgogICAgICAgIC8vIElmIHRoZSBhbW91bnQgYmVpbmcgdHJhbnNmZXJlZCBpcyBtb3JlIHRoYW4gdGhlIGJhbGFuY2Ugb2YgdGhlCiAgICAgICAgLy8gIGFjY291bnQgdGhlIHRyYW5zZmVyIHJldmVydHMKICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlRnJvbSA9IGJhbGFuY2VPZihmcm9tKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZUZyb20gPj0gYW1vdW50KTsKCiAgICAgICAgLy8gRmlyc3QgdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MKICAgICAgICAvLyAgc2VuZGluZyB0aGUgdG9rZW5zCiAgICAgICAgdWludDI1NiBuZXdCYWxhbmNlRnJvbSA9IHByZXZpb3VzQmFsYW5jZUZyb20gLSBhbW91bnQ7CiAgICAgICAgc2V0VmFsdWUoX2JhbGFuY2VzW2Zyb21dLCBuZXdCYWxhbmNlRnJvbSk7CgogICAgICAgIC8vIFRoZW4gdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MKICAgICAgICAvLyAgcmVjZWl2aW5nIHRoZSB0b2tlbnMKICAgICAgICB1aW50MjU2IHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mKHRvKTsKICAgICAgICB1aW50MjU2IG5ld0JhbGFuY2VUbyA9IHByZXZpb3VzQmFsYW5jZVRvICsgYW1vdW50OwogICAgICAgIGFzc2VydChuZXdCYWxhbmNlVG8gPj0gcHJldmlvdXNCYWxhbmNlVG8pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKICAgICAgICBzZXRWYWx1ZShfYmFsYW5jZXNbdG9dLCBuZXdCYWxhbmNlVG8pOwoKICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICBUcmFuc2Zlcihmcm9tLCB0bywgYW1vdW50KTsKICAgIH0KfQoKLy8vIEB0aXRsZSB0b2tlbiBnZW5lcmF0aW9uIGFuZCBkZXN0cnVjdGlvbgovLy8gQGRldiBpbnRlcm5hbCBpbnRlcmZhY2UgcHJvdmlkaW5nIHRva2VuIGdlbmVyYXRpb24gYW5kIGRlc3RydWN0aW9uLCBzZWUgTWludGFibGVTbmFwc2hvdFRva2VuIGZvciBpbXBsZW1lbnRhdGlvbgpjb250cmFjdCBNVG9rZW5NaW50IHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEludGVybmFsIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgR2VuZXJhdGVzIGBhbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgb3duZXJgCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2VucwogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyBnZW5lcmF0ZWQKICAgIC8vLyBAZGV2IHJldmVydHMgaWYgdG9rZW5zIGNvdWxkIG5vdCBiZSBnZW5lcmF0ZWQKICAgIGZ1bmN0aW9uIG1HZW5lcmF0ZVRva2VucyhhZGRyZXNzIG93bmVyLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBpbnRlcm5hbDsKCiAgICAvLy8gQG5vdGljZSBCdXJucyBgYW1vdW50YCB0b2tlbnMgZnJvbSBgb3duZXJgCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBsb3NlIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgdG8gYnVybgogICAgLy8vIEBkZXYgcmV2ZXJ0cyBpZiB0b2tlbnMgY291bGQgbm90IGJlIGRlc3Ryb3llZAogICAgZnVuY3Rpb24gbURlc3Ryb3lUb2tlbnMoYWRkcmVzcyBvd25lciwgdWludDI1NiBhbW91bnQpCiAgICAgICAgaW50ZXJuYWw7Cn0KCi8vLyBAdGl0bGUgYmFzaWMgc25hcHNob3QgdG9rZW4gd2l0aCBmYWNpdGlsaXRlcyB0byBnZW5lcmF0ZSBhbmQgZGVzdHJveSB0b2tlbnMKLy8vIEBkZXYgaW1wbGVtZW50ZXMgTVRva2VuTWludCwgZG9lcyBub3QgZXhwb3NlIGFueSBwdWJsaWMgZnVuY3Rpb25zIHRoYXQgY3JlYXRlL2Rlc3Ryb3kgdG9rZW5zCmNvbnRyYWN0IE1pbnRhYmxlU25hcHNob3RUb2tlbiBpcwogICAgQmFzaWNTbmFwc2hvdFRva2VuLAogICAgTVRva2VuTWludAp7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgTWludGFibGVTbmFwc2hvdFRva2VuCiAgICAvLy8gQHBhcmFtIHBhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHBhcmVudCB0b2tlbiwgc2V0IHRvIDB4MCBpZiBpdCBpcyBhCiAgICAvLy8gIG5ldyB0b2tlbgogICAgZnVuY3Rpb24gTWludGFibGVTbmFwc2hvdFRva2VuKAogICAgICAgIElDbG9uZWRUb2tlblBhcmVudCBwYXJlbnRUb2tlbiwKICAgICAgICB1aW50MjU2IHBhcmVudFNuYXBzaG90SWQKICAgICkKICAgICAgICBCYXNpY1NuYXBzaG90VG9rZW4ocGFyZW50VG9rZW4sIHBhcmVudFNuYXBzaG90SWQpCiAgICAgICAgaW50ZXJuYWwKICAgIHt9CgogICAgLy8vIEBub3RpY2UgR2VuZXJhdGVzIGBhbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgb3duZXJgCiAgICAvLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2VucwogICAgLy8vIEBwYXJhbSBhbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyBnZW5lcmF0ZWQKICAgIGZ1bmN0aW9uIG1HZW5lcmF0ZVRva2VucyhhZGRyZXNzIG93bmVyLCB1aW50MjU2IGFtb3VudCkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIC8vIG5ldmVyIGNyZWF0ZSBmb3IgYWRkcmVzcyAwCiAgICAgICAgcmVxdWlyZShvd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICAvLyBibG9jayBjaGFuZ2VzIGluIGNsb25lIHRoYXQgcG9pbnRzIHRvIGZ1dHVyZS9jdXJyZW50IHNuYXBzaG90cyBvZiBwYXRlbnQgdG9rZW4KICAgICAgICByZXF1aXJlKHBhcmVudFRva2VuKCkgPT0gYWRkcmVzcygwKSB8fCBwYXJlbnRTbmFwc2hvdElkKCkgPCBwYXJlbnRUb2tlbigpLmN1cnJlbnRTbmFwc2hvdElkKCkpOwoKICAgICAgICB1aW50MjU2IGN1clRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkoKTsKICAgICAgICB1aW50MjU2IG5ld1RvdGFsU3VwcGx5ID0gY3VyVG90YWxTdXBwbHkgKyBhbW91bnQ7CiAgICAgICAgcmVxdWlyZShuZXdUb3RhbFN1cHBseSA+PSBjdXJUb3RhbFN1cHBseSk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwoKICAgICAgICB1aW50MjU2IHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mKG93bmVyKTsKICAgICAgICB1aW50MjU2IG5ld0JhbGFuY2VUbyA9IHByZXZpb3VzQmFsYW5jZVRvICsgYW1vdW50OwogICAgICAgIGFzc2VydChuZXdCYWxhbmNlVG8gPj0gcHJldmlvdXNCYWxhbmNlVG8pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKCiAgICAgICAgc2V0VmFsdWUoX3RvdGFsU3VwcGx5VmFsdWVzLCBuZXdUb3RhbFN1cHBseSk7CiAgICAgICAgc2V0VmFsdWUoX2JhbGFuY2VzW293bmVyXSwgbmV3QmFsYW5jZVRvKTsKCiAgICAgICAgVHJhbnNmZXIoMCwgb3duZXIsIGFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQnVybnMgYGFtb3VudGAgdG9rZW5zIGZyb20gYG93bmVyYAogICAgLy8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgbG9zZSB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgcXVhbnRpdHkgb2YgdG9rZW5zIHRvIGJ1cm4KICAgIGZ1bmN0aW9uIG1EZXN0cm95VG9rZW5zKGFkZHJlc3Mgb3duZXIsIHVpbnQyNTYgYW1vdW50KQogICAgICAgIGludGVybmFsCiAgICB7CiAgICAgICAgLy8gYmxvY2sgY2hhbmdlcyBpbiBjbG9uZSB0aGF0IHBvaW50cyB0byBmdXR1cmUvY3VycmVudCBzbmFwc2hvdHMgb2YgcGF0ZW50IHRva2VuCiAgICAgICAgcmVxdWlyZShwYXJlbnRUb2tlbigpID09IGFkZHJlc3MoMCkgfHwgcGFyZW50U25hcHNob3RJZCgpIDwgcGFyZW50VG9rZW4oKS5jdXJyZW50U25hcHNob3RJZCgpKTsKCiAgICAgICAgdWludDI1NiBjdXJUb3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgcmVxdWlyZShjdXJUb3RhbFN1cHBseSA+PSBhbW91bnQpOwoKICAgICAgICB1aW50MjU2IHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2Yob3duZXIpOwogICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlRnJvbSA+PSBhbW91bnQpOwoKICAgICAgICB1aW50MjU2IG5ld1RvdGFsU3VwcGx5ID0gY3VyVG90YWxTdXBwbHkgLSBhbW91bnQ7CiAgICAgICAgdWludDI1NiBuZXdCYWxhbmNlRnJvbSA9IHByZXZpb3VzQmFsYW5jZUZyb20gLSBhbW91bnQ7CiAgICAgICAgc2V0VmFsdWUoX3RvdGFsU3VwcGx5VmFsdWVzLCBuZXdUb3RhbFN1cHBseSk7CiAgICAgICAgc2V0VmFsdWUoX2JhbGFuY2VzW293bmVyXSwgbmV3QmFsYW5jZUZyb20pOwoKICAgICAgICBUcmFuc2Zlcihvd25lciwgMCwgYW1vdW50KTsKICAgIH0KfQoKLyoKICAgIENvcHlyaWdodCAyMDE2LCBKb3JkaSBCYXlsaW5hCiAgICBDb3B5cmlnaHQgMjAxNywgUmVtY28gQmxvZW1lbiwgTWFyY2luIFJ1ZG9sZgoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCiAqLwovLy8gQHRpdGxlIFN0YW5kYXJkU25hcHNob3RUb2tlbiBDb250cmFjdAovLy8gQGF1dGhvciBKb3JkaSBCYXlsaW5hLCBSZW1jbyBCbG9lbWVuLCBNYXJjaW4gUnVkb2xmCi8vLyBAZGV2IFRoaXMgdG9rZW4gY29udHJhY3QncyBnb2FsIGlzIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIGNsb25lIHRoaXMKLy8vICB0b2tlbiB1c2luZyB0aGUgdG9rZW4gZGlzdHJpYnV0aW9uIGF0IGEgZ2l2ZW4gYmxvY2ssIHRoaXMgd2lsbCBhbGxvdyBEQU8ncwovLy8gIGFuZCBEQXBwcyB0byB1cGdyYWRlIHRoZWlyIGZlYXR1cmVzIGluIGEgZGVjZW50cmFsaXplZCBtYW5uZXIgd2l0aG91dAovLy8gIGFmZmVjdGluZyB0aGUgb3JpZ2luYWwgdG9rZW4KLy8vIEBkZXYgSXQgaXMgRVJDMjAgY29tcGxpYW50LCBidXQgc3RpbGwgbmVlZHMgdG8gdW5kZXIgZ28gZnVydGhlciB0ZXN0aW5nLgovLy8gQGRldiBWYXJpb3VzIGNvbnRyYWN0cyBhcmUgY29tcG9zZWQgdG8gcHJvdmlkZSByZXF1aXJlZCBmdW5jdGlvbmFsaXR5IG9mIHRoaXMgdG9rZW4sIGRpZmZlcmVudCBjb21wb3NpdGlvbnMgYXJlIHBvc3NpYmxlCi8vLyAgICAgTWludGFibGVTbmFwc2hvdFRva2VuIHByb3ZpZGVzIHRyYW5zZmVyLCBtaW5pdGluZyBhbmQgc25hcHNob3R0aW5nIGZ1bmN0aW9ucwovLy8gICAgIFRva2VuQWxsb3dhbmNlIHByb3ZpZGVzIGFwcHJvdmUvdHJhbnNmZXJGcm9tIGZ1bmN0aW9ucwovLy8gICAgIFRva2VuTWV0YWRhdGEgYWRkcyBuYW1lLCBzeW1ib2wgYW5kIG90aGVyIHRva2VuIG1ldGFkYXRhCi8vLyBAZGV2IFRoaXMgdG9rZW4gaXMgc3RpbGwgYWJzdHJhY3QsIFNuYXBzaG90LCBCYXNpY1NuYXBzaG90VG9rZW4gYW5kIFRva2VuQWxsb3dhbmNlIG9ic2VydmUgaW50ZXJmYWNlcyB0aGF0IG11c3QgYmUgaW1wbGVtZW50ZWQKLy8vICAgICBNU25hcHNob3RQb2xpY3kgLSBwYXJ0aWN1bGFyIHNuYXBzaG90IGlkIGNyZWF0aW9uIG1lY2hhbmlzbQovLy8gICAgIE1Ub2tlbkNvbnRyb2xsZXIgLSBjb250cm9sbHMgYXBwcm92YWxzIGFuZCB0cmFuc2ZlcnMKLy8vICAgICBzZWUgTmV1bWFyayBhcyBhbiBleGFtcGxlCi8vLyBAZGV2IGltcGxlbWVudHMgRVJDMjIzIHRva2VuIHRyYW5zZmVyCmNvbnRyYWN0IFN0YW5kYXJkU25hcHNob3RUb2tlbiBpcwogICAgSUVSQzIwVG9rZW4sCiAgICBNaW50YWJsZVNuYXBzaG90VG9rZW4sCiAgICBUb2tlbkFsbG93YW5jZSwKICAgIElFUkMyMjNUb2tlbiwKICAgIElzQ29udHJhY3QKewogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgTWluaU1lVG9rZW4KICAgIC8vLyAgaXMgYSBuZXcgdG9rZW4KICAgIC8vLyBwYXJhbSB0b2tlbk5hbWUgTmFtZSBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gcGFyYW0gZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gcGFyYW0gdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuCiAgICBmdW5jdGlvbiBTdGFuZGFyZFNuYXBzaG90VG9rZW4oCiAgICAgICAgSUNsb25lZFRva2VuUGFyZW50IHBhcmVudFRva2VuLAogICAgICAgIHVpbnQyNTYgcGFyZW50U25hcHNob3RJZAogICAgKQogICAgICAgIE1pbnRhYmxlU25hcHNob3RUb2tlbihwYXJlbnRUb2tlbiwgcGFyZW50U25hcHNob3RJZCkKICAgICAgICBUb2tlbkFsbG93YW5jZSgpCiAgICAgICAgaW50ZXJuYWwKICAgIHt9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBJRVJDMjIzVG9rZW4KICAgIC8vCgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQsIGJ5dGVzIGRhdGEpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICAvLyBpdCBpcyBuZWNlc3NhcnkgdG8gcG9pbnQgb3V0IGltcGxlbWVudGF0aW9uIHRvIGJlIGNhbGxlZAogICAgICAgIEJhc2ljU25hcHNob3RUb2tlbi5tVHJhbnNmZXIobXNnLnNlbmRlciwgdG8sIGFtb3VudCk7CgogICAgICAgIC8vIE5vdGlmeSB0aGUgcmVjZWl2aW5nIGNvbnRyYWN0LgogICAgICAgIGlmIChpc0NvbnRyYWN0KHRvKSkgewogICAgICAgICAgICBJRVJDMjIzQ2FsbGJhY2sodG8pLm9uVG9rZW5UcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGRhdGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgTmV1bWFyayBpcwogICAgQWNjZXNzQ29udHJvbGxlZCwKICAgIEFjY2Vzc1JvbGVzLAogICAgQWdyZWVtZW50LAogICAgRGFpbHlBbmRTbmFwc2hvdGFibGUsCiAgICBTdGFuZGFyZFNuYXBzaG90VG9rZW4sCiAgICBUb2tlbk1ldGFkYXRhLAogICAgTmV1bWFya0lzc3VhbmNlQ3VydmUsCiAgICBSZWNsYWltYWJsZQp7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdGFudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIHN0cmluZyBwcml2YXRlIGNvbnN0YW50IFRPS0VOX05BTUUgPSAiTmV1bWFyayI7CgogICAgdWludDggIHByaXZhdGUgY29uc3RhbnQgVE9LRU5fREVDSU1BTFMgPSAxODsKCiAgICBzdHJpbmcgcHJpdmF0ZSBjb25zdGFudCBUT0tFTl9TWU1CT0wgPSAiTkVVIjsKCiAgICBzdHJpbmcgcHJpdmF0ZSBjb25zdGFudCBWRVJTSU9OID0gIk5NS18xLjAiOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gTXV0YWJsZSBzdGF0ZQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gZGlzYWJsZSB0cmFuc2ZlcnMgd2hlbiBOZXVtYXJrIGlzIGNyZWF0ZWQKICAgIGJvb2wgcHJpdmF0ZSBfdHJhbnNmZXJFbmFibGVkID0gZmFsc2U7CgogICAgLy8gYXQgd2hpY2ggcG9pbnQgb24gY3VydmUgbmV3IE5ldW1hcmtzIHdpbGwgYmUgY3JlYXRlZCwgc2VlIE5ldW1hcmtJc3N1YW5jZUN1cnZlIGNvbnRyYWN0CiAgICAvLyBkbyBub3QgdXNlIHRvIGdldCB0b3RhbCBpbnZlc3RlZCBmdW5kcy4gc2VlIGJ1cm4oKS4gdGhpcyBpcyBqdXN0IGEgY2FjaGUgZm9yIGV4cGVuc2l2ZSBpbnZlcnNlIGZ1bmN0aW9uCiAgICB1aW50MjU2IHByaXZhdGUgX3RvdGFsRXVyVWxwczsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEV2ZW50cwogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgZXZlbnQgTG9nTmV1bWFya3NJc3N1ZWQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIG93bmVyLAogICAgICAgIHVpbnQyNTYgZXVyb1VscHMsCiAgICAgICAgdWludDI1NiBuZXVtYXJrVWxwcwogICAgKTsKCiAgICBldmVudCBMb2dOZXVtYXJrc0J1cm5lZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgb3duZXIsCiAgICAgICAgdWludDI1NiBldXJvVWxwcywKICAgICAgICB1aW50MjU2IG5ldW1hcmtVbHBzCiAgICApOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gQ29uc3RydWN0b3IKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIE5ldW1hcmsoCiAgICAgICAgSUFjY2Vzc1BvbGljeSBhY2Nlc3NQb2xpY3ksCiAgICAgICAgSUV0aGVyZXVtRm9ya0FyYml0ZXIgZm9ya0FyYml0ZXIKICAgICkKICAgICAgICBBY2Nlc3NDb250cm9sbGVkKGFjY2Vzc1BvbGljeSkKICAgICAgICBBY2Nlc3NSb2xlcygpCiAgICAgICAgQWdyZWVtZW50KGFjY2Vzc1BvbGljeSwgZm9ya0FyYml0ZXIpCiAgICAgICAgU3RhbmRhcmRTbmFwc2hvdFRva2VuKAogICAgICAgICAgICBJQ2xvbmVkVG9rZW5QYXJlbnQoMHgwKSwKICAgICAgICAgICAgMAogICAgICAgICkKICAgICAgICBUb2tlbk1ldGFkYXRhKAogICAgICAgICAgICBUT0tFTl9OQU1FLAogICAgICAgICAgICBUT0tFTl9ERUNJTUFMUywKICAgICAgICAgICAgVE9LRU5fU1lNQk9MLAogICAgICAgICAgICBWRVJTSU9OCiAgICAgICAgKQogICAgICAgIERhaWx5QW5kU25hcHNob3RhYmxlKDApCiAgICAgICAgTmV1bWFya0lzc3VhbmNlQ3VydmUoKQogICAgICAgIFJlY2xhaW1hYmxlKCkKICAgICAgICBwdWJsaWMKICAgIHt9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBpc3N1ZXMgbmV3IE5ldW1hcmtzIHRvIG1zZy5zZW5kZXIgd2l0aCByZXdhcmQgYXQgY3VycmVudCBjdXJ2ZSBwb3NpdGlvbgogICAgLy8vICAgICBtb3ZlcyBjdXJ2ZSBwb3NpdGlvbiBieSBldXJvVWxwcwogICAgLy8vICAgICBjYWxsYWJsZSBvbmx5IGJ5IFJPTEVfTkVVTUFSS19JU1NVRVIKICAgIGZ1bmN0aW9uIGlzc3VlRm9yRXVybyh1aW50MjU2IGV1cm9VbHBzKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHkoUk9MRV9ORVVNQVJLX0lTU1VFUikKICAgICAgICBhY2NlcHRBZ3JlZW1lbnQobXNnLnNlbmRlcikKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJlcXVpcmUoX3RvdGFsRXVyVWxwcyArIGV1cm9VbHBzID49IF90b3RhbEV1clVscHMpOwogICAgICAgIHVpbnQyNTYgbmV1bWFya1VscHMgPSBpbmNyZW1lbnRhbChfdG90YWxFdXJVbHBzLCBldXJvVWxwcyk7CiAgICAgICAgX3RvdGFsRXVyVWxwcyArPSBldXJvVWxwczsKICAgICAgICBtR2VuZXJhdGVUb2tlbnMobXNnLnNlbmRlciwgbmV1bWFya1VscHMpOwogICAgICAgIExvZ05ldW1hcmtzSXNzdWVkKG1zZy5zZW5kZXIsIGV1cm9VbHBzLCBuZXVtYXJrVWxwcyk7CiAgICAgICAgcmV0dXJuIG5ldW1hcmtVbHBzOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHVzZWQgYnkgUk9MRV9ORVVNQVJLX0lTU1VFUiB0byB0cmFuc2VyIG5ld2x5IGlzc3VlZCBuZXVtYXJrcwogICAgLy8vICAgICB0eXBpY2FsbHkgdG8gdGhlIGludmVzdG9yIGFuZCBwbGF0Zm9ybSBvcGVyYXRvcgogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZShhZGRyZXNzIHRvLCB1aW50MjU2IG5ldW1hcmtVbHBzKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHkoUk9MRV9ORVVNQVJLX0lTU1VFUikKICAgICAgICBhY2NlcHRBZ3JlZW1lbnQodG8pCiAgICB7CiAgICAgICAgbVRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCBuZXVtYXJrVWxwcyk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbXNnLnNlbmRlciBjYW4gYnVybiB0aGVpciBOZXVtYXJrcywgY3VydmUgaXMgcm9sbGVkIGJhY2sgdXNpbmcgaW52ZXJzZQogICAgLy8vICAgICBjdXJ2ZS4gYXMgYSByZXN1bHQgY29zdCBvZiBOZXVtYXJrIGdldHMgbG93ZXIgKHJld2FyZCBpcyBoaWdoZXIpCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgbmV1bWFya1VscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seShST0xFX05FVU1BUktfQlVSTkVSKQogICAgewogICAgICAgIGJ1cm5Qcml2YXRlKG5ldW1hcmtVbHBzLCAwLCBfdG90YWxFdXJVbHBzKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBleGVjdXRlcyBhcyBmdW5jdGlvbiBhYm92ZSBidXQgYWxsb3dzIHRvIHByb3ZpZGUgc2VhcmNoIHJhbmdlIGZvciBsb3cgZ2FzIGJ1cm5pbmcKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBuZXVtYXJrVWxwcywgdWludDI1NiBtaW5FdXJVbHBzLCB1aW50MjU2IG1heEV1clVscHMpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seShST0xFX05FVU1BUktfQlVSTkVSKQogICAgewogICAgICAgIGJ1cm5Qcml2YXRlKG5ldW1hcmtVbHBzLCBtaW5FdXJVbHBzLCBtYXhFdXJVbHBzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2Zlcihib29sIGVuYWJsZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seShST0xFX1RSQU5TRkVSX0FETUlOKQogICAgewogICAgICAgIF90cmFuc2ZlckVuYWJsZWQgPSBlbmFibGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNuYXBzaG90KCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5KFJPTEVfU05BUFNIT1RfQ1JFQVRPUikKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBEYWlseUFuZFNuYXBzaG90YWJsZS5jcmVhdGVTbmFwc2hvdCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRW5hYmxlZCgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiBfdHJhbnNmZXJFbmFibGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsRXVyb1VscHMoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gX3RvdGFsRXVyVWxwczsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmNyZW1lbnRhbCh1aW50MjU2IGV1cm9VbHBzKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiBuZXVtYXJrVWxwcykKICAgIHsKICAgICAgICByZXR1cm4gaW5jcmVtZW50YWwoX3RvdGFsRXVyVWxwcywgZXVyb1VscHMpOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLwogICAgLy8gSW1wbGVtZW50cyBNVG9rZW5Db250cm9sbGVyCiAgICAvLwoKICAgIGZ1bmN0aW9uIG1PblRyYW5zZmVyKAogICAgICAgIGFkZHJlc3MgZnJvbSwKICAgICAgICBhZGRyZXNzLCAvLyB0bwogICAgICAgIHVpbnQyNTYgLy8gYW1vdW50CiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBhY2NlcHRBZ3JlZW1lbnQoZnJvbSkKICAgICAgICByZXR1cm5zIChib29sIGFsbG93KQogICAgewogICAgICAgIC8vIG11c3QgaGF2ZSB0cmFuc2ZlciBlbmFibGVkIG9yIG1zZy5zZW5kZXIgaXMgTmV1bWFyayBpc3N1ZXIKICAgICAgICByZXR1cm4gX3RyYW5zZmVyRW5hYmxlZCB8fCBhY2Nlc3NQb2xpY3koKS5hbGxvd2VkKG1zZy5zZW5kZXIsIFJPTEVfTkVVTUFSS19JU1NVRVIsIHRoaXMsIG1zZy5zaWcpOwogICAgfQoKICAgIGZ1bmN0aW9uIG1PbkFwcHJvdmUoCiAgICAgICAgYWRkcmVzcyBvd25lciwKICAgICAgICBhZGRyZXNzLCAvLyBzcGVuZGVyLAogICAgICAgIHVpbnQyNTYgLy8gYW1vdW50CiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBhY2NlcHRBZ3JlZW1lbnQob3duZXIpCiAgICAgICAgcmV0dXJucyAoYm9vbCBhbGxvdykKICAgIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiBidXJuUHJpdmF0ZSh1aW50MjU2IGJ1cm5OZXVtYXJrVWxwcywgdWludDI1NiBtaW5FdXJVbHBzLCB1aW50MjU2IG1heEV1clVscHMpCiAgICAgICAgcHJpdmF0ZQogICAgewogICAgICAgIHVpbnQyNTYgcHJldkV1cm9VbHBzID0gX3RvdGFsRXVyVWxwczsKICAgICAgICAvLyBidXJuIGZpcnN0IGluIHRoZSB0b2tlbiB0byBtYWtlIHN1cmUgYmFsYW5jZS90b3RhbFN1cHBseSBpcyBub3QgY3Jvc3NlZAogICAgICAgIG1EZXN0cm95VG9rZW5zKG1zZy5zZW5kZXIsIGJ1cm5OZXVtYXJrVWxwcyk7CiAgICAgICAgX3RvdGFsRXVyVWxwcyA9IGN1bXVsYXRpdmVJbnZlcnNlKHRvdGFsU3VwcGx5KCksIG1pbkV1clVscHMsIG1heEV1clVscHMpOwogICAgICAgIC8vIGFjdHVhbGx5IG1heSBvdmVyZmxvdyBvbiBub24tbW9ub3RvbmljIGludmVyc2UKICAgICAgICBhc3NlcnQocHJldkV1cm9VbHBzID49IF90b3RhbEV1clVscHMpOwogICAgICAgIHVpbnQyNTYgZXVyb1VscHMgPSBwcmV2RXVyb1VscHMgLSBfdG90YWxFdXJVbHBzOwogICAgICAgIExvZ05ldW1hcmtzQnVybmVkKG1zZy5zZW5kZXIsIGV1cm9VbHBzLCBidXJuTmV1bWFya1VscHMpOwogICAgfQp9Cgpjb250cmFjdCBUaW1lU291cmNlIHsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIGN1cnJlbnRUaW1lKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBibG9jay50aW1lc3RhbXA7CiAgICB9Cn0KCmNvbnRyYWN0IExvY2tlZEFjY291bnQgaXMKICAgIEFjY2Vzc0NvbnRyb2xsZWQsCiAgICBBY2Nlc3NSb2xlcywKICAgIFRpbWVTb3VyY2UsCiAgICBNYXRoLAogICAgSXNDb250cmFjdCwKICAgIE1pZ3JhdGlvblNvdXJjZSwKICAgIElFUkM2NzdDYWxsYmFjaywKICAgIFJlY2xhaW1hYmxlCnsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFR5cGUgZGVjbGFyYXRpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBzdGF0ZSBzcGFjZSBvZiBMb2NrZWRBY2NvdW50CiAgICBlbnVtIExvY2tTdGF0ZSB7CiAgICAgICAgLy8gY29udHJvbGxlciBpcyBub3QgeWV0IHNldAogICAgICAgIFVuY29udHJvbGxlZCwKICAgICAgICAvLyBuZXcgZnVuZHMgbG9ja2QgYXJlIGFjY2VwdGVkIGZyb20gaW52ZXN0b3JzCiAgICAgICAgQWNjZXB0aW5nTG9ja3MsCiAgICAgICAgLy8gZnVuZHMgbWF5IGJlIHVubG9ja2VkIGJ5IGludmVzdG9ycywgZmluYWwgc3RhdGUKICAgICAgICBBY2NlcHRpbmdVbmxvY2tzLAogICAgICAgIC8vIGZ1bmRzIG1heSBiZSB1bmxvY2tlZCBieSBpbnZlc3RvcnMsIHdpdGhvdXQgYW55IGNvbnN0cmFpbnRzLCBmaW5hbCBzdGF0ZQogICAgICAgIFJlbGVhc2VBbGwKICAgIH0KCiAgICAvLyByZXByZXNlbnRzIGxvY2tlZCBhY2NvdW50IG9mIHRoZSBpbnZlc3RvcgogICAgc3RydWN0IEFjY291bnQgewogICAgICAgIC8vIGZ1bmRzIGxvY2tlZCBpbiB0aGUgYWNjb3VudAogICAgICAgIHVpbnQyNTYgYmFsYW5jZTsKICAgICAgICAvLyBuZXVtYXJrIGFtb3VudCB0aGF0IG11c3QgYmUgcmV0dXJuZWQgdG8gdW5sb2NrCiAgICAgICAgdWludDI1NiBuZXVtYXJrc0R1ZTsKICAgICAgICAvLyBkYXRlIHdpdGggd2hpY2ggdW5sb2NrIG1heSBoYXBwZW4gd2l0aG91dCBwZW5hbHR5CiAgICAgICAgdWludDI1NiB1bmxvY2tEYXRlOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW1tdXRhYmxlIHN0YXRlCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLyBhIHRva2VuIGNvbnRyb2xsZWQgYnkgTG9ja2VkQWNjb3VudCwgcmVhZCBFUkMyMCArIGV4dGVuc2lvbnMgdG8gcmVhZCB3aGF0CiAgICAvLyB0b2tlbiBpcyBpdCAoRVRIL0VVUiBldGMuKQogICAgSUVSQzY3N1Rva2VuIHByaXZhdGUgQVNTRVRfVE9LRU47CgogICAgTmV1bWFyayBwcml2YXRlIE5FVU1BUks7CgogICAgLy8gbG9uZ3N0b3AgcGVyaW9kIGluIHNlY29uZHMKICAgIHVpbnQyNTYgcHJpdmF0ZSBMT0NLX1BFUklPRDsKCiAgICAvLyBwZW5hbHR5OiBkZWNpbWFsRnJhY3Rpb24gb2Ygc3RvcmVkIGFtb3VudCBvbiBlc2NhcGUgaGF0Y2gKICAgIHVpbnQyNTYgcHJpdmF0ZSBQRU5BTFRZX0ZSQUNUSU9OOwoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gTXV0YWJsZSBzdGF0ZQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8gdG90YWwgYW1vdW50IG9mIHRva2VucyBsb2NrZWQKICAgIHVpbnQyNTYgcHJpdmF0ZSBfdG90YWxMb2NrZWRBbW91bnQ7CgogICAgLy8gdG90YWwgbnVtYmVyIG9mIGxvY2tlZCBpbnZlc3RvcnMKICAgIHVpbnQyNTYgaW50ZXJuYWwgX3RvdGFsSW52ZXN0b3JzOwoKICAgIC8vIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxvY2tpbmcgY29udHJhY3QKICAgIExvY2tTdGF0ZSBwcml2YXRlIF9sb2NrU3RhdGU7CgogICAgLy8gY29udHJvbGxpbmcgY29udHJhY3QgdGhhdCBtYXkgbG9jayBtb25leSBvciB1bmxvY2sgYWxsIGFjY291bnQgaWYgZmFpbHMKICAgIGFkZHJlc3MgcHJpdmF0ZSBfY29udHJvbGxlcjsKCiAgICAvLyBmZWUgZGlzdHJpYnV0aW9uIHBvb2wKICAgIGFkZHJlc3MgcHJpdmF0ZSBfcGVuYWx0eURpc2J1cnNhbEFkZHJlc3M7CgogICAgLy8gTG9ja2VkQWNjb3VudE1pZ3JhdGlvbiBwcml2YXRlIG1pZ3JhdGlvbjsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBBY2NvdW50KSBpbnRlcm5hbCBfYWNjb3VudHM7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBFdmVudHMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIGxvZ2dlZCB3aGVuIGZ1bmRzIGFyZSBsb2NrZWQgYnkgaW52ZXN0b3IKICAgIC8vLyBAcGFyYW0gaW52ZXN0b3IgYWRkcmVzcyBvZiBpbnZlc3RvciBsb2NraW5nIGZ1bmRzCiAgICAvLy8gQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgbmV3bHkgbG9ja2VkIGZ1bmRzCiAgICAvLy8gQHBhcmFtIGFtb3VudCBvZiBuZXVtYXJrcyB0aGF0IG11c3QgYmUgcmV0dXJuZWQgdG8gdW5sb2NrIGZ1bmRzCiAgICBldmVudCBMb2dGdW5kc0xvY2tlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgaW52ZXN0b3IsCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgdWludDI1NiBuZXVtYXJrcwogICAgKTsKCiAgICAvLy8gQG5vdGljZSBsb2dnZWQgd2hlbiBpbnZlc3RvciB1bmxvY2tzIGZ1bmRzCiAgICAvLy8gQHBhcmFtIGludmVzdG9yIGFkZHJlc3Mgb2YgaW52ZXN0b3IgdW5sb2NraW5nIGZ1bmRzCiAgICAvLy8gQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdW5sb2NrZWQgZnVuZHMKICAgIC8vLyBAcGFyYW0gbmV1bWFya3MgYW1vdW50IG9mIE5ldW1hcmtzIHRoYXQgd2FzIGJ1cm5lZAogICAgZXZlbnQgTG9nRnVuZHNVbmxvY2tlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgaW52ZXN0b3IsCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgdWludDI1NiBuZXVtYXJrcwogICAgKTsKCiAgICAvLy8gQG5vdGljZSBsb2dnZWQgd2hlbiB1bmxvY2sgcGVuYWx0eSBpcyBkaXNidXJzZWQgdG8gTmV1bWFyayBob2xkZXJzCiAgICAvLy8gQHBhcmFtIGRpc2J1cnNhbFBvb2xBZGRyZXNzIGFkZHJlc3Mgb2YgZGlzYnVyc2FsIHBvb2wgcmVjZWl2aW5nIHBlbmFsdHkKICAgIC8vLyBAcGFyYW0gYW1vdW50IHBlbmFsdHkgYW1vdW50CiAgICAvLy8gQHBhcmFtIGFzc2V0VG9rZW4gYWRkcmVzcyBvZiB0b2tlbiBjb250cmFjdCBwZW5hbHR5IHdhcyBwYWlkIHdpdGgKICAgIC8vLyBAcGFyYW0gaW52ZXN0b3IgYWRkcmVzIG9mIGludmVzdG9yIHBheWluZyBwZW5hbHR5CiAgICAvLy8gQGRldiBhc3NldFRva2VuIGFuZCBpbnZlc3RvciBwYXJhbWV0ZXJzIGFyZSBhZGRlZCBmb3IgcXVpY2sgdGFsbHlpbmcgcGVuYWx0eSBwYXlvdXRzCiAgICBldmVudCBMb2dQZW5hbHR5RGlzYnVyc2VkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBkaXNidXJzYWxQb29sQWRkcmVzcywKICAgICAgICB1aW50MjU2IGFtb3VudCwKICAgICAgICBhZGRyZXNzIGFzc2V0VG9rZW4sCiAgICAgICAgYWRkcmVzcyBpbnZlc3RvcgogICAgKTsKCiAgICAvLy8gQG5vdGljZSBsb2dzIExvY2tlZCBBY2NvdW50IHN0YXRlIHRyYW5zaXRpb25zCiAgICBldmVudCBMb2dMb2NrU3RhdGVUcmFuc2l0aW9uKAogICAgICAgIExvY2tTdGF0ZSBvbGRTdGF0ZSwKICAgICAgICBMb2NrU3RhdGUgbmV3U3RhdGUKICAgICk7CgogICAgZXZlbnQgTG9nSW52ZXN0b3JNaWdyYXRlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgaW52ZXN0b3IsCiAgICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgICAgdWludDI1NiBuZXVtYXJrcywKICAgICAgICB1aW50MjU2IHVubG9ja0RhdGUKICAgICk7CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBNb2RpZmllcnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKF9jb250cm9sbGVyKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5U3RhdGUoTG9ja1N0YXRlIHN0YXRlKSB7CiAgICAgICAgcmVxdWlyZShfbG9ja1N0YXRlID09IHN0YXRlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlTdGF0ZXMoTG9ja1N0YXRlIHN0YXRlMSwgTG9ja1N0YXRlIHN0YXRlMikgewogICAgICAgIHJlcXVpcmUoX2xvY2tTdGF0ZSA9PSBzdGF0ZTEgfHwgX2xvY2tTdGF0ZSA9PSBzdGF0ZTIpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgY3JlYXRlcyBuZXcgTG9ja2VkQWNjb3VudCBpbnN0YW5jZQogICAgLy8vIEBwYXJhbSBwb2xpY3kgZ292ZXJucyBleGVjdXRpb24gcGVybWlzc2lvbnMgdG8gYWRtaW4gZnVuY3Rpb25zCiAgICAvLy8gQHBhcmFtIGFzc2V0VG9rZW4gdG9rZW4gY29udHJhY3QgcmVwcmVzZW50aW5nIGZ1bmRzIGxvY2tlZAogICAgLy8vIEBwYXJhbSBuZXVtYXJrIE5ldW1hcmsgdG9rZW4gY29udHJhY3QKICAgIC8vLyBAcGFyYW0gcGVuYWx0eURpc2J1cnNhbEFkZHJlc3MgYWRkcmVzcyBvZiBkaXNidXJzYWwgY29udHJhY3QgZm9yIHBlbmFsdHkgZmVlcwogICAgLy8vIEBwYXJhbSBsb2NrUGVyaW9kIHBlcmlvZCBmb3Igd2hpY2ggZnVuZHMgYXJlIGxvY2tlZCwgaW4gc2Vjb25kcwogICAgLy8vIEBwYXJhbSBwZW5hbHR5RnJhY3Rpb24gZGVjaW1hbCBmcmFjdGlvbiBvZiB1bmxvY2tlZCBhbW91bnQgcGFpZCBhcyBwZW5hbHR5LAogICAgLy8vICAgICBpZiB1bmxvY2tlZCBiZWZvcmUgbG9ja1BlcmlvZCBpcyBvdmVyCiAgICAvLy8gQGRldiB0aGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IGFsbG93IHNwZW5kaW5nIGZ1bmRzIG9uIElDT3MgYnV0IHByb3ZpZGVzCiAgICAvLy8gICAgIGEgbWlncmF0aW9uIG1lY2hhbmlzbSB0byBmaW5hbCBMb2NrZWRBY2NvdW50IHdpdGggc3VjaCBmdW5jdGlvbmFsaXR5CiAgICBmdW5jdGlvbiBMb2NrZWRBY2NvdW50KAogICAgICAgIElBY2Nlc3NQb2xpY3kgcG9saWN5LAogICAgICAgIElFUkM2NzdUb2tlbiBhc3NldFRva2VuLAogICAgICAgIE5ldW1hcmsgbmV1bWFyaywKICAgICAgICBhZGRyZXNzIHBlbmFsdHlEaXNidXJzYWxBZGRyZXNzLAogICAgICAgIHVpbnQyNTYgbG9ja1BlcmlvZCwKICAgICAgICB1aW50MjU2IHBlbmFsdHlGcmFjdGlvbgogICAgKQogICAgICAgIEFjY2Vzc0NvbnRyb2xsZWQocG9saWN5KQogICAgICAgIE1pZ3JhdGlvblNvdXJjZShwb2xpY3ksIFJPTEVfTE9DS0VEX0FDQ09VTlRfQURNSU4pCiAgICAgICAgUmVjbGFpbWFibGUoKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIEFTU0VUX1RPS0VOID0gYXNzZXRUb2tlbjsKICAgICAgICBORVVNQVJLID0gbmV1bWFyazsKICAgICAgICBMT0NLX1BFUklPRCA9IGxvY2tQZXJpb2Q7CiAgICAgICAgUEVOQUxUWV9GUkFDVElPTiA9IHBlbmFsdHlGcmFjdGlvbjsKICAgICAgICBfcGVuYWx0eURpc2J1cnNhbEFkZHJlc3MgPSBwZW5hbHR5RGlzYnVyc2FsQWRkcmVzczsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIGxvY2tzIGZ1bmRzIG9mIGludmVzdG9ycyBmb3IgYSBwZXJpb2Qgb2YgdGltZQogICAgLy8vIEBwYXJhbSBpbnZlc3RvciBmdW5kcyBvd25lcgogICAgLy8vIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIGZ1bmRzIGxvY2tlZAogICAgLy8vIEBwYXJhbSBuZXVtYXJrcyBhbW91bnQgb2YgbmV1bWFya3MgdGhhdCBuZWVkcyB0byBiZSByZXR1cm5lZCBieSBpbnZlc3RvciB0byB1bmxvY2sgZnVuZHMKICAgIC8vLyBAZGV2IGNhbGxhYmxlIG9ubHkgZnJvbSBjb250cm9sbGVyIChDb21taXRtZW50KSBjb250cmFjdAogICAgZnVuY3Rpb24gbG9jayhhZGRyZXNzIGludmVzdG9yLCB1aW50MjU2IGFtb3VudCwgdWludDI1NiBuZXVtYXJrcykKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5U3RhdGUoTG9ja1N0YXRlLkFjY2VwdGluZ0xvY2tzKQogICAgICAgIG9ubHlDb250cm9sbGVyKCkKICAgIHsKICAgICAgICByZXF1aXJlKGFtb3VudCA+IDApOwogICAgICAgIC8vIHRyYW5zZmVyIHRvIGl0c2VsZiBmcm9tIENvbW1pdG1lbnQgY29udHJhY3QgYWxsb3dhbmNlCiAgICAgICAgYXNzZXJ0KEFTU0VUX1RPS0VOLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCBhZGRyZXNzKHRoaXMpLCBhbW91bnQpKTsKCiAgICAgICAgQWNjb3VudCBzdG9yYWdlIGFjY291bnQgPSBfYWNjb3VudHNbaW52ZXN0b3JdOwogICAgICAgIGFjY291bnQuYmFsYW5jZSA9IGFkZEJhbGFuY2UoYWNjb3VudC5iYWxhbmNlLCBhbW91bnQpOwogICAgICAgIGFjY291bnQubmV1bWFya3NEdWUgPSBhZGQoYWNjb3VudC5uZXVtYXJrc0R1ZSwgbmV1bWFya3MpOwoKICAgICAgICBpZiAoYWNjb3VudC51bmxvY2tEYXRlID09IDApIHsKICAgICAgICAgICAgLy8gdGhpcyBpcyBuZXcgYWNjb3VudCAtIHVubG9ja0RhdGUgYWx3YXlzID4gMAogICAgICAgICAgICBfdG90YWxJbnZlc3RvcnMgKz0gMTsKICAgICAgICAgICAgYWNjb3VudC51bmxvY2tEYXRlID0gY3VycmVudFRpbWUoKSArIExPQ0tfUEVSSU9EOwogICAgICAgIH0KICAgICAgICBMb2dGdW5kc0xvY2tlZChpbnZlc3RvciwgYW1vdW50LCBuZXVtYXJrcyk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgdW5sb2NrcyBpbnZlc3RvcnMgZnVuZHMsIHNlZSB1bmxvY2tJbnZlc3RvciBmb3IgZGV0YWlscwogICAgLy8vIEBkZXYgZnVuY3Rpb24gcmVxdWlyZXMgdGhhdCBwcm9wZXIgYWxsb3dhbmNlIG9uIE5ldW1hcmsgaXMgbWFkZSB0byBMb2NrZWRBY2NvdW50IGJ5IG1zZy5zZW5kZXIKICAgIC8vLyAgICAgZXhjZXB0IGluIFJlbGVhc2VBbGwgc3RhdGUgd2hpY2ggZG9lcyBub3QgYnVybiBOZXVtYXJrCiAgICBmdW5jdGlvbiB1bmxvY2soKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlTdGF0ZXMoTG9ja1N0YXRlLkFjY2VwdGluZ1VubG9ja3MsIExvY2tTdGF0ZS5SZWxlYXNlQWxsKQogICAgewogICAgICAgIHVubG9ja0ludmVzdG9yKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHVubG9ja3MgaW52ZXN0b3JzIGZ1bmRzLCBzZWUgdW5sb2NrSW52ZXN0b3IgZm9yIGRldGFpbHMKICAgIC8vLyBAZGV2IHRoaXMgRVJDNjY3IGNhbGxiYWNrIGJ5IE5ldW1hcmsgY29udHJhY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBhcHByb3ZlCiAgICAvLy8gICAgIGFsbG93cyB0byB1bmxvY2sgYW5kIGFsbG93IG5ldW1hcmtzIHRvIGJlIGJ1cm5lZCBpbiBvbmUgdHJhbnNhY3Rpb24KICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbCgKICAgICAgICBhZGRyZXNzIGZyb20sCiAgICAgICAgdWludDI1NiwgLy8gX2Ftb3VudCwKICAgICAgICBhZGRyZXNzIF90b2tlbiwKICAgICAgICBieXRlcyBfZGF0YQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlTdGF0ZShMb2NrU3RhdGUuQWNjZXB0aW5nVW5sb2NrcykKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBfdG9rZW4pOwogICAgICAgIHJlcXVpcmUoX2RhdGEubGVuZ3RoID09IDApOwoKICAgICAgICAvLyBvbmx5IGZyb20gbmV1bWFya3MKICAgICAgICByZXF1aXJlKF90b2tlbiA9PSBhZGRyZXNzKE5FVU1BUkspKTsKCiAgICAgICAgLy8gdGhpcyB3aWxsIGNoZWNrIGlmIGFsbG93YW5jZSB3YXMgbWFkZSBhbmQgaWYgX2Ftb3VudCBpcyBlbm91Z2ggdG8KICAgICAgICAvLyAgdW5sb2NrLCByZXZlcnRzIG9uIGFueSBlcnJvciBjb25kaXRpb24KICAgICAgICB1bmxvY2tJbnZlc3Rvcihmcm9tKTsKCiAgICAgICAgLy8gd2UgYXNzdW1lIGV4dGVybmFsIGNhbGwgc28gcmV0dXJuIHZhbHVlIHdpbGwgYmUgbG9zdCB0byBjbGllbnRzCiAgICAgICAgLy8gdGhhdCdzIHdoeSB3ZSB0aHJvdyBhYm92ZQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBhbGxvd3MgdG8gYW55b25lIHRvIHJlbGVhc2UgYWxsIGZ1bmRzIHdpdGhvdXQgYnVybmluZyBOZXVtYXJrcyBhbmQgYW55CiAgICAvLy8gb3RoZXIgcGVuYWx0aWVzCiAgICBmdW5jdGlvbiBjb250cm9sbGVyRmFpbGVkKCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5U3RhdGUoTG9ja1N0YXRlLkFjY2VwdGluZ0xvY2tzKQogICAgICAgIG9ubHlDb250cm9sbGVyKCkKICAgIHsKICAgICAgICBjaGFuZ2VTdGF0ZShMb2NrU3RhdGUuUmVsZWFzZUFsbCk7CiAgICB9CgogICAgLy8vIGFsbG93cyBhbnlvbmUgdG8gdXNlIGVzY2FwZSBoYXRjaAogICAgZnVuY3Rpb24gY29udHJvbGxlclN1Y2NlZWRlZCgpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVN0YXRlKExvY2tTdGF0ZS5BY2NlcHRpbmdMb2NrcykKICAgICAgICBvbmx5Q29udHJvbGxlcigpCiAgICB7CiAgICAgICAgY2hhbmdlU3RhdGUoTG9ja1N0YXRlLkFjY2VwdGluZ1VubG9ja3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZXIoYWRkcmVzcyBjb250cm9sbGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHkoUk9MRV9MT0NLRURfQUNDT1VOVF9BRE1JTikKICAgICAgICBvbmx5U3RhdGUoTG9ja1N0YXRlLlVuY29udHJvbGxlZCkKICAgIHsKICAgICAgICBfY29udHJvbGxlciA9IGNvbnRyb2xsZXI7CiAgICAgICAgY2hhbmdlU3RhdGUoTG9ja1N0YXRlLkFjY2VwdGluZ0xvY2tzKTsKICAgIH0KCiAgICAvLy8gc2V0cyBhZGRyZXNzIHRvIHdoaWNoIHRva2VucyBmcm9tIHVubG9jayBwZW5hbHR5IGFyZSBzZW50CiAgICAvLy8gYm90aCBzaW1wbGUgYWRkcmVzc2VzIGFuZCBjb250cmFjdHMgYXJlIGFsbG93ZWQKICAgIC8vLyBjb250cmFjdCBuZWVkcyB0byBpbXBsZW1lbnQgQXBwcm92ZUFuZENhbGxDYWxsYmFjayBpbnRlcmZhY2UKICAgIGZ1bmN0aW9uIHNldFBlbmFsdHlEaXNidXJzYWwoYWRkcmVzcyBwZW5hbHR5RGlzYnVyc2FsQWRkcmVzcykKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5KFJPTEVfTE9DS0VEX0FDQ09VTlRfQURNSU4pCiAgICB7CiAgICAgICAgcmVxdWlyZShwZW5hbHR5RGlzYnVyc2FsQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgLy8gY2FuIGJlIGNoYW5nZWQgYXQgYW55IG1vbWVudCBieSBhZG1pbgogICAgICAgIF9wZW5hbHR5RGlzYnVyc2FsQWRkcmVzcyA9IHBlbmFsdHlEaXNidXJzYWxBZGRyZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2V0VG9rZW4oKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoSUVSQzY3N1Rva2VuKQogICAgewogICAgICAgIHJldHVybiBBU1NFVF9UT0tFTjsKICAgIH0KCiAgICBmdW5jdGlvbiBuZXVtYXJrKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKE5ldW1hcmspCiAgICB7CiAgICAgICAgcmV0dXJuIE5FVU1BUks7CiAgICB9CgogICAgZnVuY3Rpb24gbG9ja1BlcmlvZCgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBMT0NLX1BFUklPRDsKICAgIH0KCiAgICBmdW5jdGlvbiBwZW5hbHR5RnJhY3Rpb24oKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gUEVOQUxUWV9GUkFDVElPTjsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBpbnZlc3RvcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYpCiAgICB7CiAgICAgICAgQWNjb3VudCBzdG9yYWdlIGFjY291bnQgPSBfYWNjb3VudHNbaW52ZXN0b3JdOwogICAgICAgIHJldHVybiAoYWNjb3VudC5iYWxhbmNlLCBhY2NvdW50Lm5ldW1hcmtzRHVlLCBhY2NvdW50LnVubG9ja0RhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYWRkcmVzcykKICAgIHsKICAgICAgICByZXR1cm4gX2NvbnRyb2xsZXI7CiAgICB9CgogICAgZnVuY3Rpb24gbG9ja1N0YXRlKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKExvY2tTdGF0ZSkKICAgIHsKICAgICAgICByZXR1cm4gX2xvY2tTdGF0ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbExvY2tlZEFtb3VudCgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIHJldHVybiBfdG90YWxMb2NrZWRBbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxJbnZlc3RvcnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gX3RvdGFsSW52ZXN0b3JzOwogICAgfQoKICAgIGZ1bmN0aW9uIHBlbmFsdHlEaXNidXJzYWxBZGRyZXNzKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGFkZHJlc3MpCiAgICB7CiAgICAgICAgcmV0dXJuIF9wZW5hbHR5RGlzYnVyc2FsQWRkcmVzczsKICAgIH0KCiAgICAvLwogICAgLy8gT3ZlcnJpZGVzIG1pZ3JhdGlvbiBzb3VyY2UKICAgIC8vCgogICAgLy8vIGVuYWJsZXMgbWlncmF0aW9uIHRvIG5ldyBMb2NrZWRBY2NvdW50IGluc3RhbmNlCiAgICAvLy8gaXQgY2FuIGJlIHNldCBvbmx5IG9uY2UgdG8gcHJldmVudCBzZXR0aW5nIHRlbXBvcmFyeSBtaWdyYXRpb25zIHRoYXQgbGV0CiAgICAvLy8ganVzdCBvbmUgaW52ZXN0b3Igb3V0CiAgICAvLy8gbWF5IGJlIHNldCBpbiBBY2NlcHRpbmdMb2NrcyBzdGF0ZSAoaW4gdW5saWtlbHkgZXZlbnQgdGhhdCBjb250cm9sbGVyCiAgICAvLy8gZmFpbHMgd2UgbGV0IGludmVzdG9ycyBvdXQpCiAgICAvLy8gYW5kIEFjY2VwdGluZ1VubG9ja3MgLSB3aGljaCBpcyBub3JtYWwgb3BlcmF0aW9uYWwgbW9kZQogICAgZnVuY3Rpb24gZW5hYmxlTWlncmF0aW9uKElNaWdyYXRpb25UYXJnZXQgbWlncmF0aW9uKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlTdGF0ZXMoTG9ja1N0YXRlLkFjY2VwdGluZ0xvY2tzLCBMb2NrU3RhdGUuQWNjZXB0aW5nVW5sb2NrcykKICAgIHsKICAgICAgICAvLyB3aWxsIGVuZm9yY2Ugb3RoZXIgYWNjZXNzIGNvbnRyb2xzCiAgICAgICAgTWlncmF0aW9uU291cmNlLmVuYWJsZU1pZ3JhdGlvbihtaWdyYXRpb24pOwogICAgfQoKICAgIC8vLyBtaWdyYXRlcyBzaW5nbGUgaW52ZXN0b3IKICAgIGZ1bmN0aW9uIG1pZ3JhdGUoKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlNaWdyYXRpb25FbmFibGVkKCkKICAgIHsKICAgICAgICAvLyBtaWdyYXRlcwogICAgICAgIEFjY291bnQgbWVtb3J5IGFjY291bnQgPSBfYWNjb3VudHNbbXNnLnNlbmRlcl07CgogICAgICAgIC8vIHJldHVybiBvbiBub24gZXhpc3RpbmcgYWNjb3VudHMgc2lsZW50bHkKICAgICAgICBpZiAoYWNjb3VudC5iYWxhbmNlID09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8gdGhpcyB3aWxsIGNsZWFyIGludmVzdG9yIHN0b3JhZ2UKICAgICAgICByZW1vdmVJbnZlc3Rvcihtc2cuc2VuZGVyLCBhY2NvdW50LmJhbGFuY2UpOwoKICAgICAgICAvLyBsZXQgbWlncmF0aW9uIHRhcmdldCB0byBvd24gYXNzZXQgYmFsYW5jZSB0aGF0IGJlbG9uZ3MgdG8gaW52ZXN0b3IKICAgICAgICBhc3NlcnQoQVNTRVRfVE9LRU4uYXBwcm92ZShhZGRyZXNzKF9taWdyYXRpb24pLCBhY2NvdW50LmJhbGFuY2UpKTsKICAgICAgICBMb2NrZWRBY2NvdW50TWlncmF0aW9uKF9taWdyYXRpb24pLm1pZ3JhdGVJbnZlc3RvcigKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgYWNjb3VudC5iYWxhbmNlLAogICAgICAgICAgICBhY2NvdW50Lm5ldW1hcmtzRHVlLAogICAgICAgICAgICBhY2NvdW50LnVubG9ja0RhdGUKICAgICAgICApOwogICAgICAgIExvZ0ludmVzdG9yTWlncmF0ZWQobXNnLnNlbmRlciwgYWNjb3VudC5iYWxhbmNlLCBhY2NvdW50Lm5ldW1hcmtzRHVlLCBhY2NvdW50LnVubG9ja0RhdGUpOwogICAgfQoKICAgIC8vCiAgICAvLyBPdmVycmlkZXMgUmVjbGFpbWFibGUKICAgIC8vCgogICAgLy8vIEBub3RpY2UgYWxsb3dzIExvY2tlZEFjY291bnQgdG8gcmVjbGFpbSB0b2tlbnMgd3JvbmdseSBzZW50IHRvIGl0cyBhZGRyZXNzCiAgICAvLy8gQGRldiBhcyBMb2NrZWRBY2NvdW50IGJ5IGRlc2lnbiBoYXMgYmFsYW5jZSBvZiBhc3NldFRva2VuIChpbiB0aGUgbmFtZSBvZiBpbnZlc3RvcnMpCiAgICAvLy8gICAgIHN1Y2ggcmVjbGFtYXRpb24gaXMgbm90IGFsbG93ZWQKICAgIGZ1bmN0aW9uIHJlY2xhaW0oSUJhc2ljVG9rZW4gdG9rZW4pCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgLy8gZm9yYmlkIHJlY2xhaW1pbmcgbG9ja2VkIHRva2VucwogICAgICAgIHJlcXVpcmUodG9rZW4gIT0gQVNTRVRfVE9LRU4pOwogICAgICAgIFJlY2xhaW1hYmxlLnJlY2xhaW0odG9rZW4pOwogICAgfQoKICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gSW50ZXJuYWwgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiBhZGRCYWxhbmNlKHVpbnQyNTYgYmFsYW5jZSwgdWludDI1NiBhbW91bnQpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIF90b3RhbExvY2tlZEFtb3VudCA9IGFkZChfdG90YWxMb2NrZWRBbW91bnQsIGFtb3VudCk7CiAgICAgICAgdWludDI1NiBuZXdCYWxhbmNlID0gYmFsYW5jZSArIGFtb3VudDsKICAgICAgICByZXR1cm4gbmV3QmFsYW5jZTsKICAgIH0KCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICBmdW5jdGlvbiBzdWJCYWxhbmNlKHVpbnQyNTYgYmFsYW5jZSwgdWludDI1NiBhbW91bnQpCiAgICAgICAgcHJpdmF0ZQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgX3RvdGFsTG9ja2VkQW1vdW50IC09IGFtb3VudDsKICAgICAgICByZXR1cm4gYmFsYW5jZSAtIGFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVJbnZlc3RvcihhZGRyZXNzIGludmVzdG9yLCB1aW50MjU2IGJhbGFuY2UpCiAgICAgICAgcHJpdmF0ZQogICAgewogICAgICAgIHN1YkJhbGFuY2UoYmFsYW5jZSwgYmFsYW5jZSk7CiAgICAgICAgX3RvdGFsSW52ZXN0b3JzIC09IDE7CiAgICAgICAgZGVsZXRlIF9hY2NvdW50c1tpbnZlc3Rvcl07CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlU3RhdGUoTG9ja1N0YXRlIG5ld1N0YXRlKQogICAgICAgIHByaXZhdGUKICAgIHsKICAgICAgICBhc3NlcnQobmV3U3RhdGUgIT0gX2xvY2tTdGF0ZSk7CiAgICAgICAgTG9nTG9ja1N0YXRlVHJhbnNpdGlvbihfbG9ja1N0YXRlLCBuZXdTdGF0ZSk7CiAgICAgICAgX2xvY2tTdGF0ZSA9IG5ld1N0YXRlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHVubG9ja3MgJ2ludmVzdG9yJyB0b2tlbnMgYnkgbWFraW5nIHRoZW0gd2l0aGRyYXdhYmxlIGZyb20gYXNzZXRUb2tlbgogICAgLy8vIEBkZXYgZXhwZWN0cyBudW1iZXIgb2YgbmV1bWFya3MgdGhhdCBpcyBkdWUgb24gaW52ZXN0b3IncyBhY2NvdW50IHRvIGJlIGFwcHJvdmVkIGZvciBMb2NrZWRBY2NvdW50IGZvciB0cmFuc2ZlcgogICAgLy8vIEBkZXYgdGhlcmUgYXJlIDMgdW5sb2NrIG1vZGVzIGRlcGVuZGluZyBvbiBjb250cmFjdCBhbmQgaW52ZXN0b3Igc3RhdGUKICAgIC8vLyAgICAgaW4gJ0FjY2VwdGluZ1VubG9ja3MnIHN0YXRlIE5ldW1hcmtzIGR1ZSB3aWxsIGJlIGJ1cm5lZCBhbmQgZnVuZHMgdHJhbnNmZXJyZWQgdG8gaW52ZXN0b3JzIGFkZHJlc3MgaW4gYXNzZXRUb2tlbiwKICAgIC8vLyAgICAgICAgIGJlZm9yZSB1bmxvY2tEYXRlLCBwZW5hbHR5IGlzIGRlZHVjZWQgYW5kIGRpc3RyaWJ1dGVkCiAgICAvLy8gICAgIGluICdSZWxlYXNlQWxsJyBuZXVtYXJrcyBhcmUgbm90IGJ1cm5lZCBhbmQgdW5sb2NrRGF0ZSBpcyBub3Qgb2JzZXJ2ZWQsIGZ1bmRzIGFyZSB1bmxvY2tlZCB1bmNvbmRpdGlvbmFsbHkKICAgIGZ1bmN0aW9uIHVubG9ja0ludmVzdG9yKGFkZHJlc3MgaW52ZXN0b3IpCiAgICAgICAgcHJpdmF0ZQogICAgewogICAgICAgIC8vIHVzZSBtZW1vcnkgc3RvcmFnZSB0byBvYnRhaW4gY29weSBhbmQgYmUgYWJsZSB0byBlcmFzZSBzdG9yYWdlCiAgICAgICAgQWNjb3VudCBtZW1vcnkgYWNjb3VudEluTWVtID0gX2FjY291bnRzW2ludmVzdG9yXTsKCiAgICAgICAgLy8gc2lsZW50bHkgcmV0dXJuIG9uIG5vbi1leGlzdGluZyBhY2NvdW50cwogICAgICAgIGlmIChhY2NvdW50SW5NZW0uYmFsYW5jZSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8gcmVtb3ZlIGludmVzdG9yIGFjY291bnQgYmVmb3JlIGV4dGVybmFsIGNhbGxzCiAgICAgICAgcmVtb3ZlSW52ZXN0b3IoaW52ZXN0b3IsIGFjY291bnRJbk1lbS5iYWxhbmNlKTsKCiAgICAgICAgLy8gTmV1bWFyayBidXJuaW5nIGFuZCBwZW5hbHR5IHByb2Nlc3Npbmcgb25seSBpbiBBY2NlcHRpbmdVbmxvY2tzIHN0YXRlCiAgICAgICAgaWYgKF9sb2NrU3RhdGUgPT0gTG9ja1N0YXRlLkFjY2VwdGluZ1VubG9ja3MpIHsKICAgICAgICAgICAgLy8gdHJhbnNmZXIgTmV1bWFya3MgdG8gYmUgYnVybmVkIHRvIGl0c2VsZiB2aWEgYWxsb3dhbmNlIG1lY2hhbmlzbQogICAgICAgICAgICAvLyAgbm90IGVub3VnaCBhbGxvd2FuY2UgcmVzdWx0cyBpbiByZXZlcnQgd2hpY2ggaXMgYWNjZXB0YWJsZSBzdGF0ZSBzbyAncmVxdWlyZScgaXMgdXNlZAogICAgICAgICAgICByZXF1aXJlKE5FVU1BUksudHJhbnNmZXJGcm9tKGludmVzdG9yLCBhZGRyZXNzKHRoaXMpLCBhY2NvdW50SW5NZW0ubmV1bWFya3NEdWUpKTsKCiAgICAgICAgICAgIC8vIGJ1cm4gbmV1bWFya3MgY29ycmVzcG9uZGluZyB0byB1bnNwZW50IGZ1bmRzCiAgICAgICAgICAgIE5FVU1BUksuYnVybihhY2NvdW50SW5NZW0ubmV1bWFya3NEdWUpOwoKICAgICAgICAgICAgLy8gdGFrZSB0aGUgcGVuYWx0eSBpZiBiZWZvcmUgdW5sb2NrRGF0ZQogICAgICAgICAgICBpZiAoY3VycmVudFRpbWUoKSA8IGFjY291bnRJbk1lbS51bmxvY2tEYXRlKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKF9wZW5hbHR5RGlzYnVyc2FsQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICAgICAgICAgIHVpbnQyNTYgcGVuYWx0eSA9IGRlY2ltYWxGcmFjdGlvbihhY2NvdW50SW5NZW0uYmFsYW5jZSwgUEVOQUxUWV9GUkFDVElPTik7CgogICAgICAgICAgICAgICAgLy8gZGlzdHJpYnV0ZSBwZW5hbHR5CiAgICAgICAgICAgICAgICBpZiAoaXNDb250cmFjdChfcGVuYWx0eURpc2J1cnNhbEFkZHJlc3MpKSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgICAgICAgICAgICAgQVNTRVRfVE9LRU4uYXBwcm92ZUFuZENhbGwoX3BlbmFsdHlEaXNidXJzYWxBZGRyZXNzLHBlbmFsdHksICIiKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRvIHNpbXBsZSBhZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KEFTU0VUX1RPS0VOLnRyYW5zZmVyKF9wZW5hbHR5RGlzYnVyc2FsQWRkcmVzcywgcGVuYWx0eSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgTG9nUGVuYWx0eURpc2J1cnNlZChfcGVuYWx0eURpc2J1cnNhbEFkZHJlc3MsIHBlbmFsdHksIEFTU0VUX1RPS0VOLCBpbnZlc3Rvcik7CiAgICAgICAgICAgICAgICBhY2NvdW50SW5NZW0uYmFsYW5jZSAtPSBwZW5hbHR5OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChfbG9ja1N0YXRlID09IExvY2tTdGF0ZS5SZWxlYXNlQWxsKSB7CiAgICAgICAgICAgIGFjY291bnRJbk1lbS5uZXVtYXJrc0R1ZSA9IDA7CiAgICAgICAgfQogICAgICAgIC8vIHRyYW5zZmVyIGFtb3VudCBiYWNrIHRvIGludmVzdG9yIC0gbm93IGl0IGNhbiB3aXRoZHJhdwogICAgICAgIGFzc2VydChBU1NFVF9UT0tFTi50cmFuc2ZlcihpbnZlc3RvciwgYWNjb3VudEluTWVtLmJhbGFuY2UpKTsKICAgICAgICBMb2dGdW5kc1VubG9ja2VkKGludmVzdG9yLCBhY2NvdW50SW5NZW0uYmFsYW5jZSwgYWNjb3VudEluTWVtLm5ldW1hcmtzRHVlKTsKICAgIH0KfQ=='.
	

]
