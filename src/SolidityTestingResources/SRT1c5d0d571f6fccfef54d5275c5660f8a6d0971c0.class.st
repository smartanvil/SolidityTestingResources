Class {
	#name : #SRT1c5d0d571f6fccfef54d5275c5660f8a6d0971c0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c5d0d571f6fccfef54d5275c5660f8a6d0971c0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovKioKICogUG9yblRva2VuVjIgREFPCiAqLwoKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSAgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyICBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsKICAgIGV2ZW50IHJlY2VpdmVkRXRoZXIoYWRkcmVzcyBzZW5kZXIsIHVpbnQgYW1vdW50KTsKICAgIGV2ZW50IHJlY2VpdmVkVG9rZW5zKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7CgogICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHsKICAgICAgICBQb3JuVG9rZW5WMiB0ID0gUG9yblRva2VuVjIoX3Rva2VuKTsKICAgICAgICByZXF1aXJlKHQudHJhbnNmZXJGcm9tKF9mcm9tLCB0aGlzLCBfdmFsdWUpKTsKICAgICAgICByZWNlaXZlZFRva2VucyhfZnJvbSwgX3ZhbHVlLCBfdG9rZW4sIF9leHRyYURhdGEpOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgIHB1YmxpYyB7CiAgICAgICAgcmVjZWl2ZWRFdGhlcihtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQp9CgppbnRlcmZhY2UgUG9yblRva2VuVjIgewogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0KCmNvbnRyYWN0IENvbmdyZXNzIGlzIG93bmVkLCB0b2tlblJlY2lwaWVudCB7CiAgICAvLyBDb250cmFjdCBWYXJpYWJsZXMgYW5kIGV2ZW50cwogICAgdWludCBwdWJsaWMgbWluaW11bVF1b3J1bTsKICAgIHVpbnQgcHVibGljIGRlYmF0aW5nUGVyaW9kSW5NaW51dGVzOwogICAgaW50IHB1YmxpYyBtYWpvcml0eU1hcmdpbjsKICAgIFByb3Bvc2FsW10gcHVibGljIHByb3Bvc2FsczsKICAgIHVpbnQgcHVibGljIG51bVByb3Bvc2FsczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIG1lbWJlcklkOwogICAgTWVtYmVyW10gcHVibGljIG1lbWJlcnM7CgogICAgZXZlbnQgUHJvcG9zYWxBZGRlZCh1aW50IHByb3Bvc2FsSUQsIGFkZHJlc3MgcmVjaXBpZW50LCB1aW50IGFtb3VudCwgc3RyaW5nIGRlc2NyaXB0aW9uKTsKICAgIGV2ZW50IFZvdGVkKHVpbnQgcHJvcG9zYWxJRCwgYm9vbCBwb3NpdGlvbiwgYWRkcmVzcyB2b3Rlciwgc3RyaW5nIGp1c3RpZmljYXRpb24pOwogICAgZXZlbnQgUHJvcG9zYWxUYWxsaWVkKHVpbnQgcHJvcG9zYWxJRCwgaW50IHJlc3VsdCwgdWludCBxdW9ydW0sIGJvb2wgYWN0aXZlKTsKICAgIGV2ZW50IE1lbWJlcnNoaXBDaGFuZ2VkKGFkZHJlc3MgbWVtYmVyLCBib29sIGlzTWVtYmVyKTsKICAgIGV2ZW50IENoYW5nZU9mUnVsZXModWludCBuZXdNaW5pbXVtUXVvcnVtLCB1aW50IG5ld0RlYmF0aW5nUGVyaW9kSW5NaW51dGVzLCBpbnQgbmV3TWFqb3JpdHlNYXJnaW4pOwoKICAgIHN0cnVjdCBQcm9wb3NhbCB7CiAgICAgICAgYWRkcmVzcyByZWNpcGllbnQ7CiAgICAgICAgdWludCBhbW91bnQ7CiAgICAgICAgc3RyaW5nIGRlc2NyaXB0aW9uOwogICAgICAgIHVpbnQgdm90aW5nRGVhZGxpbmU7CiAgICAgICAgYm9vbCBleGVjdXRlZDsKICAgICAgICBib29sIHByb3Bvc2FsUGFzc2VkOwogICAgICAgIHVpbnQgbnVtYmVyT2ZWb3RlczsKICAgICAgICBpbnQgY3VycmVudFJlc3VsdDsKICAgICAgICBieXRlczMyIHByb3Bvc2FsSGFzaDsKICAgICAgICBWb3RlW10gdm90ZXM7CiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSB2b3RlZDsKICAgIH0KCiAgICBzdHJ1Y3QgTWVtYmVyIHsKICAgICAgICBhZGRyZXNzIG1lbWJlcjsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50IG1lbWJlclNpbmNlOwogICAgfQoKICAgIHN0cnVjdCBWb3RlIHsKICAgICAgICBib29sIGluU3VwcG9ydDsKICAgICAgICBhZGRyZXNzIHZvdGVyOwogICAgICAgIHN0cmluZyBqdXN0aWZpY2F0aW9uOwogICAgfQoKICAgIC8vIE1vZGlmaWVyIHRoYXQgYWxsb3dzIG9ubHkgc2hhcmVob2xkZXJzIHRvIHZvdGUgYW5kIGNyZWF0ZSBuZXcgcHJvcG9zYWxzCiAgICBtb2RpZmllciBvbmx5TWVtYmVycyB7CiAgICAgICAgcmVxdWlyZShtZW1iZXJJZFttc2cuc2VuZGVyXSAhPSAwKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24KICAgICAqLwogICAgZnVuY3Rpb24gQ29uZ3Jlc3MgKAogICAgICAgIHVpbnQgbWluaW11bVF1b3J1bUZvclByb3Bvc2FscywKICAgICAgICB1aW50IG1pbnV0ZXNGb3JEZWJhdGUsCiAgICAgICAgaW50IG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eQogICAgKSAgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIGNoYW5nZVZvdGluZ1J1bGVzKG1pbmltdW1RdW9ydW1Gb3JQcm9wb3NhbHMsIG1pbnV0ZXNGb3JEZWJhdGUsIG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eSk7CiAgICAgICAgLy8gSXTigJlzIG5lY2Vzc2FyeSB0byBhZGQgYW4gZW1wdHkgZmlyc3QgbWVtYmVyCiAgICAgICAgYWRkTWVtYmVyKDAsICIiKTsKICAgICAgICAvLyBhbmQgbGV0J3MgYWRkIHRoZSBmb3VuZGVyLCB0byBzYXZlIGEgc3RlcCBsYXRlcgogICAgICAgIGFkZE1lbWJlcihvd25lciwgJ2ZvdW5kZXInKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZCBtZW1iZXIKICAgICAqCiAgICAgKiBNYWtlIGB0YXJnZXRNZW1iZXJgIGEgbWVtYmVyIG5hbWVkIGBtZW1iZXJOYW1lYAogICAgICoKICAgICAqIEBwYXJhbSB0YXJnZXRNZW1iZXIgZXRoZXJldW0gYWRkcmVzcyB0byBiZSBhZGRlZAogICAgICogQHBhcmFtIG1lbWJlck5hbWUgcHVibGljIG5hbWUgZm9yIHRoYXQgbWVtYmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZE1lbWJlcihhZGRyZXNzIHRhcmdldE1lbWJlciwgc3RyaW5nIG1lbWJlck5hbWUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHVpbnQgaWQgPSBtZW1iZXJJZFt0YXJnZXRNZW1iZXJdOwogICAgICAgIGlmIChpZCA9PSAwKSB7CiAgICAgICAgICAgIG1lbWJlcklkW3RhcmdldE1lbWJlcl0gPSBtZW1iZXJzLmxlbmd0aDsKICAgICAgICAgICAgaWQgPSBtZW1iZXJzLmxlbmd0aCsrOwogICAgICAgIH0KCiAgICAgICAgbWVtYmVyc1tpZF0gPSBNZW1iZXIoe21lbWJlcjogdGFyZ2V0TWVtYmVyLCBtZW1iZXJTaW5jZTogbm93LCBuYW1lOiBtZW1iZXJOYW1lfSk7CiAgICAgICAgTWVtYmVyc2hpcENoYW5nZWQodGFyZ2V0TWVtYmVyLCB0cnVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBtZW1iZXIKICAgICAqCiAgICAgKiBAbm90aWNlIFJlbW92ZSBtZW1iZXJzaGlwIGZyb20gYHRhcmdldE1lbWJlcmAKICAgICAqCiAgICAgKiBAcGFyYW0gdGFyZ2V0TWVtYmVyIGV0aGVyZXVtIGFkZHJlc3MgdG8gYmUgcmVtb3ZlZAogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmVNZW1iZXIoYWRkcmVzcyB0YXJnZXRNZW1iZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobWVtYmVySWRbdGFyZ2V0TWVtYmVyXSAhPSAwKTsKCiAgICAgICAgZm9yICh1aW50IGkgPSBtZW1iZXJJZFt0YXJnZXRNZW1iZXJdOyBpPG1lbWJlcnMubGVuZ3RoLTE7IGkrKyl7CiAgICAgICAgICAgIG1lbWJlcnNbaV0gPSBtZW1iZXJzW2krMV07CiAgICAgICAgfQogICAgICAgIGRlbGV0ZSBtZW1iZXJzW21lbWJlcnMubGVuZ3RoLTFdOwogICAgICAgIG1lbWJlcnMubGVuZ3RoLS07CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGFuZ2Ugdm90aW5nIHJ1bGVzCiAgICAgKgogICAgICogTWFrZSBzbyB0aGF0IHByb3Bvc2FscyBuZWVkIHRvYmUgZGlzY3Vzc2VkIGZvciBhdCBsZWFzdCBgbWludXRlc0ZvckRlYmF0ZS82MGAgaG91cnMsCiAgICAgKiBoYXZlIGF0IGxlYXN0IGBtaW5pbXVtUXVvcnVtRm9yUHJvcG9zYWxzYCB2b3RlcywgYW5kIGhhdmUgNTAlICsgYG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eWAgdm90ZXMgdG8gYmUgZXhlY3V0ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gbWluaW11bVF1b3J1bUZvclByb3Bvc2FscyBob3cgbWFueSBtZW1iZXJzIG11c3Qgdm90ZSBvbiBhIHByb3Bvc2FsIGZvciBpdCB0byBiZSBleGVjdXRlZAogICAgICogQHBhcmFtIG1pbnV0ZXNGb3JEZWJhdGUgdGhlIG1pbmltdW0gYW1vdW50IG9mIGRlbGF5IGJldHdlZW4gd2hlbiBhIHByb3Bvc2FsIGlzIG1hZGUgYW5kIHdoZW4gaXQgY2FuIGJlIGV4ZWN1dGVkCiAgICAgKiBAcGFyYW0gbWFyZ2luT2ZWb3Rlc0Zvck1ham9yaXR5IHRoZSBwcm9wb3NhbCBuZWVkcyB0byBoYXZlIDUwJSBwbHVzIHRoaXMgbnVtYmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoYW5nZVZvdGluZ1J1bGVzKAogICAgICAgIHVpbnQgbWluaW11bVF1b3J1bUZvclByb3Bvc2FscywKICAgICAgICB1aW50IG1pbnV0ZXNGb3JEZWJhdGUsCiAgICAgICAgaW50IG1hcmdpbk9mVm90ZXNGb3JNYWpvcml0eQogICAgKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBtaW5pbXVtUXVvcnVtID0gbWluaW11bVF1b3J1bUZvclByb3Bvc2FsczsKICAgICAgICBkZWJhdGluZ1BlcmlvZEluTWludXRlcyA9IG1pbnV0ZXNGb3JEZWJhdGU7CiAgICAgICAgbWFqb3JpdHlNYXJnaW4gPSBtYXJnaW5PZlZvdGVzRm9yTWFqb3JpdHk7CgogICAgICAgIENoYW5nZU9mUnVsZXMobWluaW11bVF1b3J1bSwgZGViYXRpbmdQZXJpb2RJbk1pbnV0ZXMsIG1ham9yaXR5TWFyZ2luKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZCBQcm9wb3NhbAogICAgICoKICAgICAqIFByb3Bvc2UgdG8gc2VuZCBgd2VpQW1vdW50IC8gMWUxOGAgZXRoZXIgdG8gYGJlbmVmaWNpYXJ5YCBmb3IgYGpvYkRlc2NyaXB0aW9uYC4gYHRyYW5zYWN0aW9uQnl0ZWNvZGUgPyBDb250YWlucyA6IERvZXMgbm90IGNvbnRhaW5gIGNvZGUuCiAgICAgKgogICAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyB0byBzZW5kIHRoZSBldGhlciB0bwogICAgICogQHBhcmFtIHdlaUFtb3VudCBhbW91bnQgb2YgZXRoZXIgdG8gc2VuZCwgaW4gd2VpCiAgICAgKiBAcGFyYW0gam9iRGVzY3JpcHRpb24gRGVzY3JpcHRpb24gb2Ygam9iCiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25CeXRlY29kZSBieXRlY29kZSBvZiB0cmFuc2FjdGlvbgogICAgICovCiAgICBmdW5jdGlvbiBuZXdQcm9wb3NhbCgKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQgd2VpQW1vdW50LAogICAgICAgIHN0cmluZyBqb2JEZXNjcmlwdGlvbiwKICAgICAgICBieXRlcyB0cmFuc2FjdGlvbkJ5dGVjb2RlCiAgICApCiAgICAgICAgb25seU1lbWJlcnMgcHVibGljCiAgICAgICAgcmV0dXJucyAodWludCBwcm9wb3NhbElEKQogICAgewogICAgICAgIHByb3Bvc2FsSUQgPSBwcm9wb3NhbHMubGVuZ3RoKys7CiAgICAgICAgUHJvcG9zYWwgc3RvcmFnZSBwID0gcHJvcG9zYWxzW3Byb3Bvc2FsSURdOwogICAgICAgIHAucmVjaXBpZW50ID0gYmVuZWZpY2lhcnk7CiAgICAgICAgcC5hbW91bnQgPSB3ZWlBbW91bnQ7CiAgICAgICAgcC5kZXNjcmlwdGlvbiA9IGpvYkRlc2NyaXB0aW9uOwogICAgICAgIHAucHJvcG9zYWxIYXNoID0ga2VjY2FrMjU2KGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRyYW5zYWN0aW9uQnl0ZWNvZGUpOwogICAgICAgIHAudm90aW5nRGVhZGxpbmUgPSBub3cgKyBkZWJhdGluZ1BlcmlvZEluTWludXRlcyAqIDEgbWludXRlczsKICAgICAgICBwLmV4ZWN1dGVkID0gZmFsc2U7CiAgICAgICAgcC5wcm9wb3NhbFBhc3NlZCA9IGZhbHNlOwogICAgICAgIHAubnVtYmVyT2ZWb3RlcyA9IDA7CiAgICAgICAgUHJvcG9zYWxBZGRlZChwcm9wb3NhbElELCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCBqb2JEZXNjcmlwdGlvbik7CiAgICAgICAgbnVtUHJvcG9zYWxzID0gcHJvcG9zYWxJRCsxOwoKICAgICAgICByZXR1cm4gcHJvcG9zYWxJRDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZCBwcm9wb3NhbCBpbiBFdGhlcgogICAgICoKICAgICAqIFByb3Bvc2UgdG8gc2VuZCBgZXRoZXJBbW91bnRgIGV0aGVyIHRvIGBiZW5lZmljaWFyeWAgZm9yIGBqb2JEZXNjcmlwdGlvbmAuIGB0cmFuc2FjdGlvbkJ5dGVjb2RlID8gQ29udGFpbnMgOiBEb2VzIG5vdCBjb250YWluYCBjb2RlLgogICAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHVzZSBpZiB0aGUgYW1vdW50IHRvIGJlIGdpdmVuIGlzIGluIHJvdW5kIG51bWJlciBvZiBldGhlciB1bml0cy4KICAgICAqCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIHRvIHNlbmQgdGhlIGV0aGVyIHRvCiAgICAgKiBAcGFyYW0gZXRoZXJBbW91bnQgYW1vdW50IG9mIGV0aGVyIHRvIHNlbmQKICAgICAqIEBwYXJhbSBqb2JEZXNjcmlwdGlvbiBEZXNjcmlwdGlvbiBvZiBqb2IKICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbkJ5dGVjb2RlIGJ5dGVjb2RlIG9mIHRyYW5zYWN0aW9uCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5ld1Byb3Bvc2FsSW5FdGhlcigKICAgICAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5LAogICAgICAgIHVpbnQgZXRoZXJBbW91bnQsCiAgICAgICAgc3RyaW5nIGpvYkRlc2NyaXB0aW9uLAogICAgICAgIGJ5dGVzIHRyYW5zYWN0aW9uQnl0ZWNvZGUKICAgICkKICAgICAgICBvbmx5TWVtYmVycyBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50IHByb3Bvc2FsSUQpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ld1Byb3Bvc2FsKGJlbmVmaWNpYXJ5LCBldGhlckFtb3VudCAqIDEgZXRoZXIsIGpvYkRlc2NyaXB0aW9uLCB0cmFuc2FjdGlvbkJ5dGVjb2RlKTsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrIGlmIGEgcHJvcG9zYWwgY29kZSBtYXRjaGVzCiAgICAgKgogICAgICogQHBhcmFtIHByb3Bvc2FsTnVtYmVyIElEIG51bWJlciBvZiB0aGUgcHJvcG9zYWwgdG8gcXVlcnkKICAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gdG8gc2VuZCB0aGUgZXRoZXIgdG8KICAgICAqIEBwYXJhbSB3ZWlBbW91bnQgYW1vdW50IG9mIGV0aGVyIHRvIHNlbmQKICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbkJ5dGVjb2RlIGJ5dGVjb2RlIG9mIHRyYW5zYWN0aW9uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrUHJvcG9zYWxDb2RlKAogICAgICAgIHVpbnQgcHJvcG9zYWxOdW1iZXIsCiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeSwKICAgICAgICB1aW50IHdlaUFtb3VudCwKICAgICAgICBieXRlcyB0cmFuc2FjdGlvbkJ5dGVjb2RlCiAgICApCiAgICAgICAgY29uc3RhbnQgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBjb2RlQ2hlY2tzT3V0KQogICAgewogICAgICAgIFByb3Bvc2FsIHN0b3JhZ2UgcCA9IHByb3Bvc2Fsc1twcm9wb3NhbE51bWJlcl07CiAgICAgICAgcmV0dXJuIHAucHJvcG9zYWxIYXNoID09IGtlY2NhazI1NihiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0cmFuc2FjdGlvbkJ5dGVjb2RlKTsKICAgIH0KCiAgICAvKioKICAgICAqIExvZyBhIHZvdGUgZm9yIGEgcHJvcG9zYWwKICAgICAqCiAgICAgKiBWb3RlIGBzdXBwb3J0c1Byb3Bvc2FsPyBpbiBzdXBwb3J0IG9mIDogYWdhaW5zdGAgcHJvcG9zYWwgI2Bwcm9wb3NhbE51bWJlcmAKICAgICAqCiAgICAgKiBAcGFyYW0gcHJvcG9zYWxOdW1iZXIgbnVtYmVyIG9mIHByb3Bvc2FsCiAgICAgKiBAcGFyYW0gc3VwcG9ydHNQcm9wb3NhbCBlaXRoZXIgaW4gZmF2b3Igb3IgYWdhaW5zdCBpdAogICAgICogQHBhcmFtIGp1c3RpZmljYXRpb25UZXh0IG9wdGlvbmFsIGp1c3RpZmljYXRpb24gdGV4dAogICAgICovCiAgICBmdW5jdGlvbiB2b3RlKAogICAgICAgIHVpbnQgcHJvcG9zYWxOdW1iZXIsCiAgICAgICAgYm9vbCBzdXBwb3J0c1Byb3Bvc2FsLAogICAgICAgIHN0cmluZyBqdXN0aWZpY2F0aW9uVGV4dAogICAgKQogICAgICAgIG9ubHlNZW1iZXJzIHB1YmxpYwogICAgICAgIHJldHVybnMgKHVpbnQgdm90ZUlEKQogICAgewogICAgICAgIFByb3Bvc2FsIHN0b3JhZ2UgcCA9IHByb3Bvc2Fsc1twcm9wb3NhbE51bWJlcl07ICAgICAgICAgLy8gR2V0IHRoZSBwcm9wb3NhbAogICAgICAgIHJlcXVpcmUoIXAudm90ZWRbbXNnLnNlbmRlcl0pOyAgICAgICAgIC8vIElmIGhhcyBhbHJlYWR5IHZvdGVkLCBjYW5jZWwKICAgICAgICBwLnZvdGVkW21zZy5zZW5kZXJdID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhpcyB2b3RlciBhcyBoYXZpbmcgdm90ZWQKICAgICAgICBwLm51bWJlck9mVm90ZXMrKzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZWFzZSB0aGUgbnVtYmVyIG9mIHZvdGVzCiAgICAgICAgaWYgKHN1cHBvcnRzUHJvcG9zYWwpIHsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhleSBzdXBwb3J0IHRoZSBwcm9wb3NhbAogICAgICAgICAgICBwLmN1cnJlbnRSZXN1bHQrKzsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIHNjb3JlCiAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhleSBkb24ndAogICAgICAgICAgICBwLmN1cnJlbnRSZXN1bHQtLTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlY3JlYXNlIHRoZSBzY29yZQogICAgICAgIH0KCiAgICAgICAgLy8gQ3JlYXRlIGEgbG9nIG9mIHRoaXMgZXZlbnQKICAgICAgICBWb3RlZChwcm9wb3NhbE51bWJlciwgIHN1cHBvcnRzUHJvcG9zYWwsIG1zZy5zZW5kZXIsIGp1c3RpZmljYXRpb25UZXh0KTsKICAgICAgICByZXR1cm4gcC5udW1iZXJPZlZvdGVzOwogICAgfQoKICAgIC8qKgogICAgICogRmluaXNoIHZvdGUKICAgICAqCiAgICAgKiBDb3VudCB0aGUgdm90ZXMgcHJvcG9zYWwgI2Bwcm9wb3NhbE51bWJlcmAgYW5kIGV4ZWN1dGUgaXQgaWYgYXBwcm92ZWQKICAgICAqCiAgICAgKiBAcGFyYW0gcHJvcG9zYWxOdW1iZXIgcHJvcG9zYWwgbnVtYmVyCiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25CeXRlY29kZSBvcHRpb25hbDogaWYgdGhlIHRyYW5zYWN0aW9uIGNvbnRhaW5lZCBhIGJ5dGVjb2RlLCB5b3UgbmVlZCB0byBzZW5kIGl0CiAgICAgKi8KICAgIGZ1bmN0aW9uIGV4ZWN1dGVQcm9wb3NhbCh1aW50IHByb3Bvc2FsTnVtYmVyLCBieXRlcyB0cmFuc2FjdGlvbkJ5dGVjb2RlKSBwdWJsaWMgewogICAgICAgIFByb3Bvc2FsIHN0b3JhZ2UgcCA9IHByb3Bvc2Fsc1twcm9wb3NhbE51bWJlcl07CgogICAgICAgIHJlcXVpcmUobm93ID4gcC52b3RpbmdEZWFkbGluZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgaXMgcGFzdCB0aGUgdm90aW5nIGRlYWRsaW5lCiAgICAgICAgICAgICYmICFwLmV4ZWN1dGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuIGV4ZWN1dGVkCiAgICAgICAgICAgICYmIHAucHJvcG9zYWxIYXNoID09IGtlY2NhazI1NihwLnJlY2lwaWVudCwgcC5hbW91bnQsIHRyYW5zYWN0aW9uQnl0ZWNvZGUpICAvLyBhbmQgdGhlIHN1cHBsaWVkIGNvZGUgbWF0Y2hlcyB0aGUgcHJvcG9zYWwKICAgICAgICAgICAgJiYgcC5udW1iZXJPZlZvdGVzID49IG1pbmltdW1RdW9ydW0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYSBtaW5pbXVtIHF1b3J1bSBoYXMgYmVlbiByZWFjaGVkLi4uCgogICAgICAgIC8vIC4uLnRoZW4gZXhlY3V0ZSByZXN1bHQKCiAgICAgICAgaWYgKHAuY3VycmVudFJlc3VsdCA+IG1ham9yaXR5TWFyZ2luKSB7CiAgICAgICAgICAgIC8vIFByb3Bvc2FsIHBhc3NlZDsgZXhlY3V0ZSB0aGUgdHJhbnNhY3Rpb24KCiAgICAgICAgICAgIHAuZXhlY3V0ZWQgPSB0cnVlOyAvLyBBdm9pZCByZWN1cnNpdmUgY2FsbGluZwogICAgICAgICAgICByZXF1aXJlKHAucmVjaXBpZW50LmNhbGwudmFsdWUocC5hbW91bnQpKHRyYW5zYWN0aW9uQnl0ZWNvZGUpKTsKCiAgICAgICAgICAgIHAucHJvcG9zYWxQYXNzZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFByb3Bvc2FsIGZhaWxlZAogICAgICAgICAgICBwLnByb3Bvc2FsUGFzc2VkID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyBGaXJlIEV2ZW50cwogICAgICAgIFByb3Bvc2FsVGFsbGllZChwcm9wb3NhbE51bWJlciwgcC5jdXJyZW50UmVzdWx0LCBwLm51bWJlck9mVm90ZXMsIHAucHJvcG9zYWxQYXNzZWQpOwogICAgfQp9'.
	

]
