Class {
	#name : #SRTae6079d4D0b582E115aA72F17b146d870AF67b25,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTae6079d4D0b582E115aA72F17b146d870AF67b25 >> base64 [
	^ ''.
	

]
