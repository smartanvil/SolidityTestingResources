Class {
	#name : #SRT3238db085a2853442e3d74ad47e73ef63bfbc507,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3238db085a2853442e3d74ad47e73ef63bfbc507 >> base64 [
	^ ''.
	

]
