Class {
	#name : #SRT9d22c3bf2b51213a3572e865ecf78fab0294e75b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9d22c3bf2b51213a3572e865ecf78fab0294e75b >> base64 [
	^ ''.
	

]
