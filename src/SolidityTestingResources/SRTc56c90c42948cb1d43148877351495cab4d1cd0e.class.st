Class {
	#name : #SRTc56c90c42948cb1d43148877351495cab4d1cd0e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc56c90c42948cb1d43148877351495cab4d1cd0e >> base64 [
	^ ''.
	

]
