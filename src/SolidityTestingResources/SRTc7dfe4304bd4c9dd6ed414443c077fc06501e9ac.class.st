Class {
	#name : #SRTc7dfe4304bd4c9dd6ed414443c077fc06501e9ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc7dfe4304bd4c9dd6ed414443c077fc06501e9ac >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vaHR0cHM6Ly9naXRodWIuY29tL25leHVzZGV2L2VyYzIwL2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9lcmMyMC5zb2wKCmNvbnRyYWN0IEVSQzIwQ29uc3RhbnQgewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKCBhZGRyZXNzIHdobyApIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdmFsdWUpOwp9CmNvbnRyYWN0IEVSQzIwU3RhdGVmdWwgewogICAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwp9CmNvbnRyYWN0IEVSQzIwRXZlbnRzIHsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwp9CmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQ29uc3RhbnQsIEVSQzIwU3RhdGVmdWwsIEVSQzIwRXZlbnRzIHt9Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCi8vIGNvbnRyYWN0IGNhbiBzZWxsIHRva2VucyBmb3IgRVRICi8vIHByaWNlcyBhcmUgaW4gYW1vdW50IG9mIHdlaSBwZXIgYmF0Y2ggb2YgdG9rZW4gdW5pdHMKCmNvbnRyYWN0IFRva2VuVHJhZGVyIGlzIG93bmVkIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhc3NldDsgICAgICAgLy8gYWRkcmVzcyBvZiB0b2tlbgogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOyAgIC8vIGNvbnRyYWN0IHNlbGxzIGxvdHMgb2YgdG9rZW5zIGF0IHRoaXMgcHJpY2UKICAgIHVpbnQyNTYgcHVibGljIHVuaXRzOyAgICAgICAvLyBsb3Qgc2l6ZSAodG9rZW4td2VpKQoKICAgIGJvb2wgcHVibGljIHNlbGxzVG9rZW5zOyAgICAvLyBpcyBjb250cmFjdCBzZWxsaW5nCgogICAgZXZlbnQgQWN0aXZhdGVkRXZlbnQoYm9vbCBzZWxscyk7CiAgICBldmVudCBVcGRhdGVFdmVudCgpOwoKICAgIGZ1bmN0aW9uIFRva2VuVHJhZGVyICgKICAgICAgICBhZGRyZXNzIF9hc3NldCwgCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLCAKICAgICAgICB1aW50MjU2IF91bml0cywKICAgICAgICBib29sICAgIF9zZWxsc1Rva2VucwogICAgICAgICkKICAgIHsKICAgICAgICAgIGFzc2V0ICAgICAgICAgPSBfYXNzZXQ7IAogICAgICAgICAgc2VsbFByaWNlICAgID0gX3NlbGxQcmljZTsKICAgICAgICAgIHVuaXRzICAgICAgICAgPSBfdW5pdHM7IAogICAgICAgICAgc2VsbHNUb2tlbnMgICA9IF9zZWxsc1Rva2VuczsKCiAgICAgICAgICBBY3RpdmF0ZWRFdmVudChzZWxsc1Rva2Vucyk7CiAgICB9CgogICAgLy8gbW9kaWZ5IHRyYWRpbmcgYmVoYXZpb3IKICAgIGZ1bmN0aW9uIGFjdGl2YXRlICgKICAgICAgICBib29sICAgIF9zZWxsc1Rva2VucwogICAgICAgICkgb25seU93bmVyCiAgICB7CiAgICAgICAgICBzZWxsc1Rva2VucyAgID0gX3NlbGxzVG9rZW5zOwoKICAgICAgICAgIEFjdGl2YXRlZEV2ZW50KHNlbGxzVG9rZW5zKTsKICAgIH0KCiAgICAvLyBhbGxvdyBvd25lciB0byByZW1vdmUgdHJhZGUgdG9rZW4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3QXNzZXQodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQogICAgewogICAgICAgIHJldHVybiBFUkMyMChhc3NldCkudHJhbnNmZXIob3duZXIsX3ZhbHVlKTsKICAgICAgICBVcGRhdGVFdmVudCgpOwogICAgfQoKICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSBhcmJpdHJhcnkgdG9rZW5zCiAgICAvLyBpbmNsdWRlZCBqdXN0IGluIGNhc2UgY29udHJhY3QgcmVjZWl2ZXMgd3JvbmcgdG9rZW4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW4oYWRkcmVzcyBfdG9rZW4sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykKICAgIHsKICAgICAgICByZXR1cm4gRVJDMjAoX3Rva2VuKS50cmFuc2Zlcihvd25lcixfdmFsdWUpOwogICAgICAgIFVwZGF0ZUV2ZW50KCk7CiAgICB9CgogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIEVUSAogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQogICAgewogICAgICAgIGlmKHRoaXMuYmFsYW5jZSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIG93bmVyLnNlbmQoX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgVXBkYXRlRXZlbnQoKTsKICAgIH0KCiAgICAvL3VzZXIgYnV5cyB0b2tlbiB3aXRoIEVUSAogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7CiAgICAgICAgaWYoc2VsbHNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgCiAgICAgICAgewogICAgICAgICAgICB1aW50IG9yZGVyICAgPSBtc2cudmFsdWUgLyBzZWxsUHJpY2U7IAogICAgICAgICAgICB1aW50IGNhbl9zZWxsID0gRVJDMjAoYXNzZXQpLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAvIHVuaXRzOwoKICAgICAgICAgICAgaWYob3JkZXIgPiBjYW5fc2VsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdWludDI1NiBjaGFuZ2UgPSBtc2cudmFsdWUgLSAoY2FuX3NlbGwgKiBzZWxsUHJpY2UpOwogICAgICAgICAgICAgICAgb3JkZXIgPSBjYW5fc2VsbDsKICAgICAgICAgICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQoY2hhbmdlKSkgdGhyb3c7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG9yZGVyID4gMCkgewogICAgICAgICAgICAgICAgaWYoIUVSQzIwKGFzc2V0KS50cmFuc2Zlcihtc2cuc2VuZGVyLG9yZGVyICogdW5pdHMpKSB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgICAgICBVcGRhdGVFdmVudCgpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKCFtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSkgdGhyb3c7ICAvLyByZXR1cm4gdXNlciBmdW5kcyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHNlbGxpbmcKICAgIH0KCiAgICAvLyBzZW5kaW5nIEVUSCB0byBjb250cmFjdCBzZWxscyBHTlQgdG8gdXNlcgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5KCk7CiAgICB9Cn0KCi8vIFRoaXMgY29udHJhY3QgZGVwbG95cyBUb2tlblRyYWRlciBjb250cmFjdHMgYW5kIGxvZ3MgdGhlIGV2ZW50Ci8vIHRyYWRlIHBhaXJzIGFyZSBpZGVudGlmaWVkIHdpdGggc2hhMyhhc3NldCx1bml0cykKCmNvbnRyYWN0IFRva2VuVHJhZGVyRmFjdG9yeSB7CgogICAgZXZlbnQgVHJhZGVMaXN0aW5nKGJ5dGVzMzIgYm9va2lkLCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGFkZHIpOwogICAgZXZlbnQgTmV3Qm9vayhieXRlczMyIGJvb2tpZCwgYWRkcmVzcyBhc3NldCwgdWludDI1NiB1bml0cyk7CgogICAgbWFwcGluZyggYWRkcmVzcyA9PiBib29sICkgX3ZlcmlmeTsKICAgIG1hcHBpbmcoIGJ5dGVzMzIgPT4gYm9vbCApIHBhaXJFeGl0czsKCiAgICBmdW5jdGlvbiB2ZXJpZnkoYWRkcmVzcyB0cmFkZUNvbnRyYWN0KSAgY29uc3RhbnQgcmV0dXJucyAoCiAgICAgICAgYm9vbCB2YWxpZCwKICAgICAgICBhZGRyZXNzIGFzc2V0LCAKICAgICAgICB1aW50MjU2IHNlbGxQcmljZSwgCiAgICAgICAgdWludDI1NiB1bml0cywKICAgICAgICBib29sICAgIHNlbGxzVG9rZW5zCiAgICAgICAgKSB7CgogICAgICAgICAgICB2YWxpZCA9IF92ZXJpZnlbdHJhZGVDb250cmFjdF07CgogICAgICAgICAgICBpZih2YWxpZCkgewogICAgICAgICAgICAgICAgVG9rZW5UcmFkZXIgdCA9IFRva2VuVHJhZGVyKHRyYWRlQ29udHJhY3QpOwoKICAgICAgICAgICAgICAgIGFzc2V0ID0gdC5hc3NldCgpOwogICAgICAgICAgICAgICAgc2VsbFByaWNlID0gdC5zZWxsUHJpY2UoKTsKICAgICAgICAgICAgICAgIHVuaXRzID0gdC51bml0cygpOwogICAgICAgICAgICAgICAgc2VsbHNUb2tlbnMgPSB0LnNlbGxzVG9rZW5zKCk7CiAgICAgICAgICAgIH0KCiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlVHJhZGVDb250cmFjdCggICAgICAgCiAgICAgICAgYWRkcmVzcyBfYXNzZXQsIAogICAgICAgIHVpbnQyNTYgX3NlbGxQcmljZSwgCiAgICAgICAgdWludDI1NiBfdW5pdHMsCiAgICAgICAgYm9vbCAgICBfc2VsbHNUb2tlbnMKICAgICAgICApIHJldHVybnMgKGFkZHJlc3MpIAogICAgewogICAgICAgIGlmKF91bml0cyA9PSAwKSB0aHJvdzsgICAgICAgICAgICAgIC8vIGNhbid0IHNlbGwgemVybyB1bml0cwoKICAgICAgICBhZGRyZXNzIHRyYWRlciA9IG5ldyBUb2tlblRyYWRlciAoCiAgICAgICAgICAgICAgICAgICAgIF9hc3NldCwgCiAgICAgICAgICAgICAgICAgICAgIF9zZWxsUHJpY2UsIAogICAgICAgICAgICAgICAgICAgICBfdW5pdHMsCiAgICAgICAgICAgICAgICAgICAgIF9zZWxsc1Rva2Vucyk7CgogICAgICAgIHZhciBib29raWQgPSBzaGEzKF9hc3NldCxfdW5pdHMpOwoKICAgICAgICBfdmVyaWZ5W3RyYWRlcl0gPSB0cnVlOyAvLyByZWNvcmQgdGhhdCB0aGlzIGZhY3RvcnkgY3JlYXRlZCB0aGUgdHJhZGVyCgogICAgICAgIFRva2VuVHJhZGVyKHRyYWRlcikudHJhbnNmZXJPd25lcnNoaXAobXNnLnNlbmRlcik7IC8vIHNldCB0aGUgb3duZXIgdG8gd2hvZXZlciBjYWxsZWQgdGhlIGZ1bmN0aW9uCgogICAgICAgIGlmKHBhaXJFeGl0c1tib29raWRdID09IGZhbHNlKSB7CiAgICAgICAgICAgIHBhaXJFeGl0c1tib29raWRdID0gdHJ1ZTsKICAgICAgICAgICAgTmV3Qm9vayhib29raWQsIF9hc3NldCwgX3VuaXRzKTsKICAgICAgICB9CgogICAgICAgIFRyYWRlTGlzdGluZyhib29raWQsbXNnLnNlbmRlcix0cmFkZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdzsgICAgIC8vIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlciB0byB0aGUgZmFjdG9yeQogICAgfQp9'.
	

]
