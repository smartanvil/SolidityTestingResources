Class {
	#name : #SRTa828476505d3b4db07aca0b69726eca39e5dea50,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa828476505d3b4db07aca0b69726eca39e5dea50 >> base64 [
	^ ''.
	

]
