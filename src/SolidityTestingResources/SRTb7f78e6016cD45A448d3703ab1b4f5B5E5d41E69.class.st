Class {
	#name : #SRTb7f78e6016cD45A448d3703ab1b4f5B5E5d41E69,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7f78e6016cD45A448d3703ab1b4f5B5E5d41E69 >> base64 [
	^ ''.
	

]
