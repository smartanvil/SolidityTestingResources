Class {
	#name : #SRT0f690a76ad438222ce694d84b2902b0ee2270e69,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0f690a76ad438222ce694d84b2902b0ee2270e69 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKiogCiAqIEJsYWNrQm94IC0gU2VjdXJlIEV0aGVyIFN0b3JhZ2UKICogUHJvb2YgT2YgQ29uY2VwdCAtIExvY2sgZXRoZXIgd2l0aCBhIHByb29mIHNldCBkZXJpdmVkIG9mZi1jaGFpbi4gIFRoZSBwcm9vZgogKiBlbmNvZGVzIGEgYmxpbmRlZCByZWNlaXZlciB0byBhY2NlcHQgZnVuZHMgb25jZSB0aGUgY29ycmVjdCBjYWxsZXIgZXhlY3V0ZXMgCiAqIHRoZSB1bmxvY2tBbW91bnQoKSBmdW5jdGlvbiB3aXRoIHRoZSBjb3JyZWN0IHNlZWQuCiovIAoKY29udHJhY3QgU2VjdXJlIHsKICAgIGVudW0gQWxnb3JpdGhtIHsgc2hhLCBrZWNjYWsgfQoKICAgIC8vIGZ1bmN0aW9uIGZvciBvZmYtY2hhaW4gcHJvb2YgZGVyaXZhdGlvbi4gIFVzZSB0aGUgcmV0dXJuIHZhbHVlcyBhcyBpbnB1dCBmb3IgdGhlIAogICAgLy8gbG9ja0Ftb3VudCgpIGZ1bmN0aW9uLiAgRXhlY3V0ZSB1bmxvY2tBbW91bnQoKSB3aXRoIHRoZSBjb3JyZWN0IGNhbGxlciAKICAgIC8vIGFuZCBzZWVkIHRvIHRyYW5zZmVyIGZ1bmRzIHRvIGFuIGVuY29kZWQgcmVjaXBpZW50LgogICAgZnVuY3Rpb24gZ2VuZXJhdGVQcm9vZigKICAgICAgICBzdHJpbmcgc2VlZCwKICAgICAgICBhZGRyZXNzIGNhbGxlciwgCiAgICAgICAgYWRkcmVzcyByZWNlaXZlciwKICAgICAgICBBbGdvcml0aG0gYWxnb3JpdGhtCiAgICApIHB1cmUgcHVibGljIHJldHVybnMoYnl0ZXMzMiBoYXNoLCBieXRlczMyIG9wZXJhdG9yLCBieXRlczMyIGNoZWNrLCBhZGRyZXNzIGNoZWNrX3JlY2VpdmVyLCBib29sIHZhbGlkKSB7CiAgICAgICAgKGhhc2gsIG9wZXJhdG9yLCBjaGVjaykgPSBfZXNjcm93KHNlZWQsIGNhbGxlciwgcmVjZWl2ZXIsIGFsZ29yaXRobSk7CiAgICAgICAgY2hlY2tfcmVjZWl2ZXIgPSBhZGRyZXNzKGhhc2hfZGF0YShoYXNoX3NlZWQoc2VlZCwgYWxnb3JpdGhtKSwgYWxnb3JpdGhtKV5vcGVyYXRvcik7CiAgICAgICAgdmFsaWQgPSAocmVjZWl2ZXIgPT0gY2hlY2tfcmVjZWl2ZXIpOwogICAgICAgIGlmIChjaGVja19yZWNlaXZlciA9PSAwKSBjaGVja19yZWNlaXZlciA9IGNhbGxlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBfZXNjcm93KAogICAgICAgIHN0cmluZyBzZWVkLCAKICAgICAgICBhZGRyZXNzIGNhbGxlciwgCiAgICAgICAgYWRkcmVzcyByZWNlaXZlciwKICAgICAgICBBbGdvcml0aG0gYWxnb3JpdGhtCiAgICApIHB1cmUgaW50ZXJuYWwgcmV0dXJucyhieXRlczMyIGluZGV4LCBieXRlczMyIG9wZXJhdG9yLCBieXRlczMyIGNoZWNrKSB7CiAgICAgICAgcmVxdWlyZShjYWxsZXIgIT0gcmVjZWl2ZXIgJiYgY2FsbGVyICE9IDApOwogICAgICAgIGJ5dGVzMzIgeCA9IGhhc2hfc2VlZChzZWVkLCBhbGdvcml0aG0pOwogICAgICAgIGlmIChhbGdvcml0aG0gPT0gQWxnb3JpdGhtLnNoYSkgewogICAgICAgICAgICBpbmRleCA9IHNoYTI1Nih4LCBjYWxsZXIpOwogICAgICAgICAgICBvcGVyYXRvciA9IHNoYTI1Nih4KV5ieXRlczMyKHJlY2VpdmVyKTsKICAgICAgICAgICAgY2hlY2sgPSB4XnNoYTI1NihyZWNlaXZlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5kZXggPSBrZWNjYWsyNTYoeCwgY2FsbGVyKTsKICAgICAgICAgICAgb3BlcmF0b3IgPSBrZWNjYWsyNTYoeCleYnl0ZXMzMihyZWNlaXZlcik7CiAgICAgICAgICAgIGNoZWNrID0geF5rZWNjYWsyNTYocmVjZWl2ZXIpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGhhc2hpbmcgdGhlIHNlZWQKICAgIGZ1bmN0aW9uIGhhc2hfc2VlZCgKICAgICAgICBzdHJpbmcgc2VlZCwgCiAgICAgICAgQWxnb3JpdGhtIGFsZ29yaXRobQogICAgKSBwdXJlIGludGVybmFsIHJldHVybnMoYnl0ZXMzMikgewogICAgICAgIGlmIChhbGdvcml0aG0gPT0gQWxnb3JpdGhtLnNoYSkgewogICAgICAgICAgICByZXR1cm4gc2hhMjU2KHNlZWQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBrZWNjYWsyNTYoc2VlZCk7CiAgICAgICAgfQogICAgfQogICAgCiAgIC8vIGludGVybmFsIGZ1bmN0aW9uIGZvciBoYXNoaW5nIGJ5dGVzCiAgICBmdW5jdGlvbiBoYXNoX2RhdGEoCiAgICAgICAgYnl0ZXMzMiBrZXksIAogICAgICAgIEFsZ29yaXRobSBhbGdvcml0aG0KICAgICkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKGJ5dGVzMzIpIHsKICAgICAgICBpZiAoYWxnb3JpdGhtID09IEFsZ29yaXRobS5zaGEpIHsKICAgICAgICAgICAgcmV0dXJuIHNoYTI1NihrZXkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBrZWNjYWsyNTYoa2V5KTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vIGludGVybmFsIGZ1bmN0aW9uIGZvciBoYXNoaW5nIGFuIGFkZHJlc3MKICAgIGZ1bmN0aW9uIGJsaW5kKAogICAgICAgIGFkZHJlc3MgYWRkciwKICAgICAgICBBbGdvcml0aG0gYWxnb3JpdGhtCiAgICApIHB1cmUgaW50ZXJuYWwgcmV0dXJucyhieXRlczMyKSB7CiAgICAgICAgaWYgKGFsZ29yaXRobSA9PSBBbGdvcml0aG0uc2hhKSB7CiAgICAgICAgICAgIHJldHVybiBzaGEyNTYoYWRkcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGtlY2NhazI1NihhZGRyKTsKICAgICAgICB9CiAgICB9CiAgICAKfQoKCmNvbnRyYWN0IEJsYWNrQm94IGlzIFNlY3VyZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvLyBzdG9yZWQgcHJvb2YgaW5mbwogICAgc3RydWN0IFByb29mIHsKICAgICAgICB1aW50MjU2IGJhbGFuY2U7CiAgICAgICAgYnl0ZXMzMiBvcGVyYXRvcjsKICAgICAgICBieXRlczMyIGNoZWNrOwogICAgfQogICAgCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gUHJvb2YpIHB1YmxpYyBwcm9vZnM7CiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYm9vbCkgcHVibGljIHVzZWQ7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBkb25hdGlvbnM7CgogICAgLy8gZXZlbnRzIGZvciBhdWRpdCBwdXJwb3NlcwogICAgZXZlbnQgVW5sb2NrZWQoc3RyaW5nIF9rZXksIGJ5dGVzMzIgX2hhc2gsIGFkZHJlc3MgX3JlY2VpdmVyKTsKICAgIGV2ZW50IExvY2tlZChieXRlczMyIF9oYXNoLCBieXRlczMyIF9vcGVyYXRvciwgYnl0ZXMzMiBfY2hlY2spOwogICAgZXZlbnQgRG9uYXRpb24oYWRkcmVzcyBfZnJvbSwgdWludDI1NiB2YWx1ZSk7CiAgICAKICAgIGZ1bmN0aW9uIEJsYWNrQm94KCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBkZXYgbG9ja0Ftb3VudCAtIExvY2sgZXRoZXIgd2l0aCBhIHByb29mCiAgICAvLy8gQHBhcmFtIGhhc2ggSGFzaCBLZXkgdXNlZCB0byBpbmRleCB0aGUgcHJvb2YKICAgIC8vLyBAcGFyYW0gb3BlcmF0b3IgQSBkZXJpdmVkIG9wZXJhdG9yIHRvIGVuY29kZSB0aGUgaW50ZW5kZWQgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIGNoZWNrIEEgZGVyaXZlZCBvcGVyYXRvciB0byBjaGVjayB0aGUgb3BlcmF0aW9uCiAgICBmdW5jdGlvbiBsb2NrQW1vdW50KAogICAgICAgIGJ5dGVzMzIgaGFzaCwKICAgICAgICBieXRlczMyIG9wZXJhdG9yLAogICAgICAgIGJ5dGVzMzIgY2hlY2sKICAgICkgcHVibGljIHBheWFibGUgewogICAgICAgIC8vIHByb3RlY3QgaW52YWxpZCBlbnRyaWVzIG9uIHZhbHVlIHRyYW5zZmVyCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgcmVxdWlyZShoYXNoICE9IDAgJiYgb3BlcmF0b3IgIT0gMCAmJiBjaGVjayAhPSAwKTsKICAgICAgICB9CiAgICAgICAgLy8gY2hlY2sgZXhpc3RlbmNlCiAgICAgICAgcmVxdWlyZSghdXNlZFtoYXNoXSk7CiAgICAgICAgLy8gbG9jayB0aGUgZXRoZXIKICAgICAgICBwcm9vZnNbaGFzaF0uYmFsYW5jZSA9IG1zZy52YWx1ZTsKICAgICAgICBwcm9vZnNbaGFzaF0ub3BlcmF0b3IgPSBvcGVyYXRvcjsKICAgICAgICBwcm9vZnNbaGFzaF0uY2hlY2sgPSBjaGVjazsKICAgICAgICAvLyB0cmFjayB1bmlxdWUga2V5cwogICAgICAgIHVzZWRbaGFzaF0gPSB0cnVlOwogICAgICAgIExvY2tlZChoYXNoLCBvcGVyYXRvciwgY2hlY2spOwogICAgfQoKICAgIC8vLyBAZGV2IHVubG9ja0Ftb3VudCAtIFZlcmlmeSBhIHByb29mIHRvIHRyYW5zZmVyIHRoZSBsb2NrZWQgZnVuZHMKICAgIC8vLyBAcGFyYW0gc2VlZCBTZWNyZXQgdXNlZCB0byBkZXJpdmUgdGhlIHByb29mIHNldAogICAgLy8vIEBwYXJhbSBhbGdvcml0aG0gSGFzaCBhbGdvcml0aG0gdHlwZQogICAgZnVuY3Rpb24gdW5sb2NrQW1vdW50KAogICAgICAgIHN0cmluZyBzZWVkLAogICAgICAgIEFsZ29yaXRobSBhbGdvcml0aG0KICAgICkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID09IDApOwogICAgICAgIGJ5dGVzMzIgaGFzaCA9IDB4MDsKICAgICAgICBieXRlczMyIG9wZXJhdG9yID0gMHgwOwogICAgICAgIGJ5dGVzMzIgY2hlY2sgPSAweDA7CiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBwcm9vZgogICAgICAgIChoYXNoLCBvcGVyYXRvciwgY2hlY2spID0gX2VzY3JvdyhzZWVkLCBtc2cuc2VuZGVyLCAwLCBhbGdvcml0aG0pOwogICAgICAgIC8vIGNoZWNrIGV4aXN0ZW5jZQogICAgICAgIHJlcXVpcmUodXNlZFtoYXNoXSk7CiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSByZWNlaXZlciBhbmQgdHJhbnNmZXIKICAgICAgICBhZGRyZXNzIHJlY2VpdmVyID0gYWRkcmVzcyhwcm9vZnNbaGFzaF0ub3BlcmF0b3Jeb3BlcmF0b3IpOwogICAgICAgIC8vIHZlcmlmeSBpbnRlZ3JpdHkgb2Ygb3BlcmF0aW9uCiAgICAgICAgcmVxdWlyZShwcm9vZnNbaGFzaF0uY2hlY2teaGFzaF9zZWVkKHNlZWQsIGFsZ29yaXRobSkgPT0gYmxpbmQocmVjZWl2ZXIsIGFsZ29yaXRobSkpOwogICAgICAgIC8vIGNoZWNrIGZvciB2YWxpZCB0cmFuc2ZlcgogICAgICAgIGlmIChyZWNlaXZlciA9PSBhZGRyZXNzKHRoaXMpIHx8IHJlY2VpdmVyID09IDApIHJlY2VpdmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAvLyBnZXQgbG9ja2VkIGJhbGFuY2UgdG8gYXZvaWQgcmVjdXJzaXZlIGF0dGFja3MKICAgICAgICB1aW50IGJhbCA9IHByb29mc1toYXNoXS5iYWxhbmNlOwogICAgICAgIC8vIG93bmVyIGNvbGxlY3RpbmcgZG9uYXRpb25zCiAgICAgICAgaWYgKGRvbmF0aW9uc1ttc2cuc2VuZGVyXSA+IDApIHsKICAgICAgICAgICAgYmFsICs9IGRvbmF0aW9uc1ttc2cuc2VuZGVyXTsKICAgICAgICAgICAgZGVsZXRlIGRvbmF0aW9uc1ttc2cuc2VuZGVyXTsKICAgICAgICB9CiAgICAgICAgLy8gZGVsZXRlIHRoZSBlbnRyeSB0byBmcmVlIHVwIG1lbW9yeQogICAgICAgIGRlbGV0ZSBwcm9vZnNbaGFzaF07CiAgICAgICAgLy8gY2hlY2sgdGhlIGJhbGFuY2UgdG8gc2VuZCB0byB0aGUgcmVjZWl2ZXIKICAgICAgICBpZiAoYmFsIDw9IHRoaXMuYmFsYW5jZSAmJiBiYWwgPiAwKSB7CiAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRvIHJlY2VpdmVyIAogICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGZhaWwgaWYgcmVjZWl2ZXIgaXMgYW5vdGhlciBjb250cmFjdCwgc28gZmFsbGJhY2sKICAgICAgICAgICAgaWYoIXJlY2VpdmVyLnNlbmQoYmFsKSl7CiAgICAgICAgICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIuc2VuZChiYWwpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBVbmxvY2tlZChzZWVkLCBoYXNoLCByZWNlaXZlcik7CiAgICB9CiAgICAKICAgIC8vIGRlcG9zaXRzIGdldCBzdG9yZWQgZm9yIHRoZSBvd25lcgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICBkb25hdGlvbnNbb3duZXJdICs9IG1zZy52YWx1ZTsKICAgICAgICBEb25hdGlvbihtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQogICAgCn0='.
	

]
