Class {
	#name : #SRT0710714a1e30c70aea2dc1254e24292bea7943f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0710714a1e30c70aea2dc1254e24292bea7943f4 >> base64 [
	^ ''.
	

]
