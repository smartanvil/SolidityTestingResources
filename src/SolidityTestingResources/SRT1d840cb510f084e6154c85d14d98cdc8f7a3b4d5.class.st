Class {
	#name : #SRT1d840cb510f084e6154c85d14d98cdc8f7a3b4d5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d840cb510f084e6154c85d14d98cdc8f7a3b4d5 >> base64 [
	^ ''.
	

]
