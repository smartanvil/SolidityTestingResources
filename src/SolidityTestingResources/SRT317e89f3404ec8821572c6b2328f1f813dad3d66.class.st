Class {
	#name : #SRT317e89f3404ec8821572c6b2328f1f813dad3d66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT317e89f3404ec8821572c6b2328f1f813dad3d66 >> base64 [
	^ ''.
	

]
