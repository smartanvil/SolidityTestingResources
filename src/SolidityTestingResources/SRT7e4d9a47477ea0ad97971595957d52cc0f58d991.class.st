Class {
	#name : #SRT7e4d9a47477ea0ad97971595957d52cc0f58d991,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e4d9a47477ea0ad97971595957d52cc0f58d991 >> base64 [
	^ ''.
	

]
