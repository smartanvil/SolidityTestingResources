Class {
	#name : #SRTaf7d69fc8a14eb37ae07ddef4b209d157cbe4738,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf7d69fc8a14eb37ae07ddef4b209d157cbe4738 >> base64 [
	^ ''.
	

]
