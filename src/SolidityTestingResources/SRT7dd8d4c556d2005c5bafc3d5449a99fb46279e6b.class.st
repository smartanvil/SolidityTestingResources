Class {
	#name : #SRT7dd8d4c556d2005c5bafc3d5449a99fb46279e6b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7dd8d4c556d2005c5bafc3d5449a99fb46279e6b >> base64 [
	^ ''.
	

]
