Class {
	#name : #SRT3aa927a97594c3ab7d7bf0d47c71c3877d1de4a1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3aa927a97594c3ab7d7bf0d47c71c3877d1de4a1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBFUkMyMCB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyB3aG8gKSBjb25zdGFudCByZXR1cm5zICh1aW50IHZhbHVlKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZSggYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyICkgY29uc3RhbnQgcmV0dXJucyAodWludCBfYWxsb3dhbmNlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUgKSByZXR1cm5zIChib29sIG9rKTsKCiAgICBldmVudCBUcmFuc2ZlciggYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbCggYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCmNvbnRyYWN0IERTTWF0aCB7CiAgICAKICAgIC8qCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucwogICAgICovCgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4IC0geSkgPD0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICB6ID0geCAqIHk7CiAgICAgICAgYXNzZXJ0KHggPT0gMCB8fCB6IC8geCA9PSB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHogPSB4IC8geTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW4odWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIG1heCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5OwogICAgfQoKICAgIC8qCiAgICB1aW50MTI4IGZ1bmN0aW9ucyAoaCBpcyBmb3IgaGFsZikKICAgICAqLwoKCiAgICBmdW5jdGlvbiBoYWRkKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gaHN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCAtIHkpIDw9IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSB4ICogeTsKICAgICAgICBhc3NlcnQoeCA9PSAwIHx8IHogLyB4ID09IHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSB4IC8geTsKICAgIH0KCiAgICBmdW5jdGlvbiBobWluKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICByZXR1cm4geCA8PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBobWF4KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CgoKICAgIC8qCiAgICBpbnQyNTYgZnVuY3Rpb25zCiAgICAgKi8KCiAgICBmdW5jdGlvbiBpbWluKGludDI1NiB4LCBpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoaW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA8PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBpbWF4KGludDI1NiB4LCBpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoaW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CgogICAgLyoKICAgIFdBRCBtYXRoCiAgICAgKi8KCiAgICB1aW50MTI4IGNvbnN0YW50IFdBRCA9IDEwICoqIDE4OwoKICAgIGZ1bmN0aW9uIHdhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3c3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhzdWIoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gd211bCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiB5ICsgV0FEIC8gMikgLyBXQUQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogV0FEICsgeSAvIDIpIC8geSk7CiAgICB9CgogICAgZnVuY3Rpb24gd21pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWluKHgsIHkpOwogICAgfQogICAgZnVuY3Rpb24gd21heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWF4KHgsIHkpOwogICAgfQoKICAgIC8qCiAgICBSQVkgbWF0aAogICAgICovCgogICAgdWludDEyOCBjb25zdGFudCBSQVkgPSAxMCAqKiAyNzsKCiAgICBmdW5jdGlvbiByYWRkKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhhZGQoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gcnN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogeSArIFJBWSAvIDIpIC8gUkFZKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZGl2KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIFJBWSArIHkgLyAyKSAvIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJwb3codWludDEyOCB4LCB1aW50NjQgbikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgLy8gVGhpcyBmYW1vdXMgYWxnb3JpdGhtIGlzIGNhbGxlZCAiZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmciCiAgICAgICAgLy8gYW5kIGNhbGN1bGF0ZXMgeF5uIHdpdGggeCBhcyBmaXhlZC1wb2ludCBhbmQgbiBhcyByZWd1bGFyIHVuc2lnbmVkLgogICAgICAgIC8vCiAgICAgICAgLy8gSXQncyBPKGxvZyBuKSwgaW5zdGVhZCBvZiBPKG4pIGZvciBuYWl2ZSByZXBlYXRlZCBtdWx0aXBsaWNhdGlvbi4KICAgICAgICAvLwogICAgICAgIC8vIFRoZXNlIGZhY3RzIGFyZSB3aHkgaXQgd29ya3M6CiAgICAgICAgLy8KICAgICAgICAvLyAgSWYgbiBpcyBldmVuLCB0aGVuIHhebiA9ICh4XjIpXihuLzIpLgogICAgICAgIC8vICBJZiBuIGlzIG9kZCwgIHRoZW4geF5uID0geCAqIHheKG4tMSksCiAgICAgICAgLy8gICBhbmQgYXBwbHlpbmcgdGhlIGVxdWF0aW9uIGZvciBldmVuIHggZ2l2ZXMKICAgICAgICAvLyAgICB4Xm4gPSB4ICogKHheMileKChuLTEpIC8gMikuCiAgICAgICAgLy8KICAgICAgICAvLyAgQWxzbywgRVZNIGRpdmlzaW9uIGlzIGZsb29yaW5nIGFuZAogICAgICAgIC8vICAgIGZsb29yWyhuLTEpIC8gMl0gPSBmbG9vcltuIC8gMl0uCgogICAgICAgIHogPSBuICUgMiAhPSAwID8geCA6IFJBWTsKCiAgICAgICAgZm9yIChuIC89IDI7IG4gIT0gMDsgbiAvPSAyKSB7CiAgICAgICAgICAgIHggPSBybXVsKHgsIHgpOwoKICAgICAgICAgICAgaWYgKG4gJSAyICE9IDApIHsKICAgICAgICAgICAgICAgIHogPSBybXVsKHosIHgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJtaW4odWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsKICAgIH0KICAgIGZ1bmN0aW9uIHJtYXgodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYXN0KHVpbnQyNTYgeCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0gdWludDEyOCh4KSkgPT0geCk7CiAgICB9Cgp9Cgpjb250cmFjdCBEU05vdGUgewogICAgZXZlbnQgTG9nTm90ZSgKICAgICAgICBieXRlczQgICBpbmRleGVkICBzaWcsCiAgICAgICAgYWRkcmVzcyAgaW5kZXhlZCAgZ3V5LAogICAgICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGZvbywKICAgICAgICBieXRlczMyICBpbmRleGVkICBiYXIsCiAgICAgICAgdWludCAgICAgICAgICAgICAgd2FkLAogICAgICAgIGJ5dGVzICAgICAgICAgICAgIGZheAogICAgKSBhbm9ueW1vdXM7CgogICAgbW9kaWZpZXIgbm90ZSB7CiAgICAgICAgYnl0ZXMzMiBmb287CiAgICAgICAgYnl0ZXMzMiBiYXI7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgZm9vIDo9IGNhbGxkYXRhbG9hZCg0KQogICAgICAgICAgICBiYXIgOj0gY2FsbGRhdGFsb2FkKDM2KQogICAgICAgIH0KCiAgICAgICAgTG9nTm90ZShtc2cuc2lnLCBtc2cuc2VuZGVyLCBmb28sIGJhciwgbXNnLnZhbHVlLCBtc2cuZGF0YSk7CgogICAgICAgIF87CiAgICB9Cn0KCmNvbnRyYWN0IERTQXV0aG9yaXR5IHsKICAgIGZ1bmN0aW9uIGNhbkNhbGwoCiAgICAgICAgYWRkcmVzcyBzcmMsIGFkZHJlc3MgZHN0LCBieXRlczQgc2lnCiAgICApIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBEU0F1dGhFdmVudHMgewogICAgZXZlbnQgTG9nU2V0QXV0aG9yaXR5IChhZGRyZXNzIGluZGV4ZWQgYXV0aG9yaXR5KTsKICAgIGV2ZW50IExvZ1NldE93bmVyICAgICAoYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKfQoKY29udHJhY3QgRFNBdXRoIGlzIERTQXV0aEV2ZW50cyB7CiAgICBEU0F1dGhvcml0eSAgcHVibGljICBhdXRob3JpdHk7CiAgICBhZGRyZXNzICAgICAgcHVibGljICBvd25lcjsKCiAgICBmdW5jdGlvbiBEU0F1dGgoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIExvZ1NldE93bmVyKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3Mgb3duZXJfKQogICAgICAgIGF1dGgKICAgIHsKICAgICAgICBvd25lciA9IG93bmVyXzsKICAgICAgICBMb2dTZXRPd25lcihvd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QXV0aG9yaXR5KERTQXV0aG9yaXR5IGF1dGhvcml0eV8pCiAgICAgICAgYXV0aAogICAgewogICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eV87CiAgICAgICAgTG9nU2V0QXV0aG9yaXR5KGF1dGhvcml0eSk7CiAgICB9CgogICAgbW9kaWZpZXIgYXV0aCB7CiAgICAgICAgYXNzZXJ0KGlzQXV0aG9yaXplZChtc2cuc2VuZGVyLCBtc2cuc2lnKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0F1dGhvcml6ZWQoYWRkcmVzcyBzcmMsIGJ5dGVzNCBzaWcpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoc3JjID09IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChzcmMgPT0gb3duZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChhdXRob3JpdHkgPT0gRFNBdXRob3JpdHkoMCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBhdXRob3JpdHkuY2FuQ2FsbChzcmMsIHRoaXMsIHNpZyk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFzc2VydChib29sIHgpIGludGVybmFsIHsKICAgICAgICBpZiAoIXgpIHJldmVydCgpOwogICAgfQp9Cgpjb250cmFjdCBFdmVudGZ1bE1hcmtldCB7CiAgICBldmVudCBMb2dJdGVtVXBkYXRlKHVpbnQgaWQpOwogICAgZXZlbnQgTG9nVHJhZGUodWludCBwYXlfYW10LCBhZGRyZXNzIGluZGV4ZWQgcGF5X2dlbSwKICAgICAgICAgICAgICAgICAgIHVpbnQgYnV5X2FtdCwgYWRkcmVzcyBpbmRleGVkIGJ1eV9nZW0pOwoKICAgIGV2ZW50IExvZ01ha2UoCiAgICAgICAgYnl0ZXMzMiAgaW5kZXhlZCAgaWQsCiAgICAgICAgYnl0ZXMzMiAgaW5kZXhlZCAgcGFpciwKICAgICAgICBhZGRyZXNzICBpbmRleGVkICBtYWtlciwKICAgICAgICBFUkMyMCAgICAgICAgICAgICBwYXlfZ2VtLAogICAgICAgIEVSQzIwICAgICAgICAgICAgIGJ1eV9nZW0sCiAgICAgICAgdWludDEyOCAgICAgICAgICAgcGF5X2FtdCwKICAgICAgICB1aW50MTI4ICAgICAgICAgICBidXlfYW10LAogICAgICAgIHVpbnQ2NCAgICAgICAgICAgIHRpbWVzdGFtcAogICAgKTsKCiAgICBldmVudCBMb2dCdW1wKAogICAgICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGlkLAogICAgICAgIGJ5dGVzMzIgIGluZGV4ZWQgIHBhaXIsCiAgICAgICAgYWRkcmVzcyAgaW5kZXhlZCAgbWFrZXIsCiAgICAgICAgRVJDMjAgICAgICAgICAgICAgcGF5X2dlbSwKICAgICAgICBFUkMyMCAgICAgICAgICAgICBidXlfZ2VtLAogICAgICAgIHVpbnQxMjggICAgICAgICAgIHBheV9hbXQsCiAgICAgICAgdWludDEyOCAgICAgICAgICAgYnV5X2FtdCwKICAgICAgICB1aW50NjQgICAgICAgICAgICB0aW1lc3RhbXAKICAgICk7CgogICAgZXZlbnQgTG9nVGFrZSgKICAgICAgICBieXRlczMyICAgICAgICAgICBpZCwKICAgICAgICBieXRlczMyICBpbmRleGVkICBwYWlyLAogICAgICAgIGFkZHJlc3MgIGluZGV4ZWQgIG1ha2VyLAogICAgICAgIEVSQzIwICAgICAgICAgICAgIHBheV9nZW0sCiAgICAgICAgRVJDMjAgICAgICAgICAgICAgYnV5X2dlbSwKICAgICAgICBhZGRyZXNzICBpbmRleGVkICB0YWtlciwKICAgICAgICB1aW50MTI4ICAgICAgICAgICB0YWtlX2FtdCwKICAgICAgICB1aW50MTI4ICAgICAgICAgICBnaXZlX2FtdCwKICAgICAgICB1aW50NjQgICAgICAgICAgICB0aW1lc3RhbXAKICAgICk7CgogICAgZXZlbnQgTG9nS2lsbCgKICAgICAgICBieXRlczMyICBpbmRleGVkICBpZCwKICAgICAgICBieXRlczMyICBpbmRleGVkICBwYWlyLAogICAgICAgIGFkZHJlc3MgIGluZGV4ZWQgIG1ha2VyLAogICAgICAgIEVSQzIwICAgICAgICAgICAgIHBheV9nZW0sCiAgICAgICAgRVJDMjAgICAgICAgICAgICAgYnV5X2dlbSwKICAgICAgICB1aW50MTI4ICAgICAgICAgICBwYXlfYW10LAogICAgICAgIHVpbnQxMjggICAgICAgICAgIGJ1eV9hbXQsCiAgICAgICAgdWludDY0ICAgICAgICAgICAgdGltZXN0YW1wCiAgICApOwp9Cgpjb250cmFjdCBTaW1wbGVNYXJrZXQgaXMgRXZlbnRmdWxNYXJrZXQsIERTTWF0aCB7CgogICAgdWludCBwdWJsaWMgbGFzdF9vZmZlcl9pZDsKCiAgICBtYXBwaW5nICh1aW50ID0+IE9mZmVySW5mbykgcHVibGljIG9mZmVyczsKCiAgICBib29sIGxvY2tlZDsKCiAgICBzdHJ1Y3QgT2ZmZXJJbmZvIHsKICAgICAgICB1aW50ICAgICBwYXlfYW10OwogICAgICAgIEVSQzIwICAgIHBheV9nZW07CiAgICAgICAgdWludCAgICAgYnV5X2FtdDsKICAgICAgICBFUkMyMCAgICBidXlfZ2VtOwogICAgICAgIGFkZHJlc3MgIG93bmVyOwogICAgICAgIGJvb2wgICAgIGFjdGl2ZTsKICAgICAgICB1aW50NjQgICB0aW1lc3RhbXA7CiAgICB9CgogICAgbW9kaWZpZXIgY2FuX2J1eSh1aW50IGlkKSB7CiAgICAgICAgcmVxdWlyZShpc0FjdGl2ZShpZCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY2FuX2NhbmNlbCh1aW50IGlkKSB7CiAgICAgICAgcmVxdWlyZShpc0FjdGl2ZShpZCkpOwogICAgICAgIHJlcXVpcmUoZ2V0T3duZXIoaWQpID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY2FuX29mZmVyIHsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHN5bmNocm9uaXplZCB7CiAgICAgICAgYXNzZXJ0KCFsb2NrZWQpOwogICAgICAgIGxvY2tlZCA9IHRydWU7CiAgICAgICAgXzsKICAgICAgICBsb2NrZWQgPSBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0FjdGl2ZSh1aW50IGlkKSBjb25zdGFudCByZXR1cm5zIChib29sIGFjdGl2ZSkgewogICAgICAgIHJldHVybiBvZmZlcnNbaWRdLmFjdGl2ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRPd25lcih1aW50IGlkKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgcmV0dXJuIG9mZmVyc1tpZF0ub3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0T2ZmZXIodWludCBpZCkgY29uc3RhbnQgcmV0dXJucyAodWludCwgRVJDMjAsIHVpbnQsIEVSQzIwKSB7CiAgICAgIHZhciBvZmZlciA9IG9mZmVyc1tpZF07CiAgICAgIHJldHVybiAob2ZmZXIucGF5X2FtdCwgb2ZmZXIucGF5X2dlbSwKICAgICAgICAgICAgICBvZmZlci5idXlfYW10LCBvZmZlci5idXlfZ2VtKTsKICAgIH0KCiAgICAvLyAtLS0tIFB1YmxpYyBlbnRyeXBvaW50cyAtLS0tIC8vCgogICAgZnVuY3Rpb24gYnVtcChieXRlczMyIGlkXykKICAgICAgICBjYW5fYnV5KHVpbnQyNTYoaWRfKSkKICAgIHsKICAgICAgICB2YXIgaWQgPSB1aW50MjU2KGlkXyk7CiAgICAgICAgTG9nQnVtcCgKICAgICAgICAgICAgaWRfLAogICAgICAgICAgICBzaGEzKG9mZmVyc1tpZF0ucGF5X2dlbSwgb2ZmZXJzW2lkXS5idXlfZ2VtKSwKICAgICAgICAgICAgb2ZmZXJzW2lkXS5vd25lciwKICAgICAgICAgICAgb2ZmZXJzW2lkXS5wYXlfZ2VtLAogICAgICAgICAgICBvZmZlcnNbaWRdLmJ1eV9nZW0sCiAgICAgICAgICAgIHVpbnQxMjgob2ZmZXJzW2lkXS5wYXlfYW10KSwKICAgICAgICAgICAgdWludDEyOChvZmZlcnNbaWRdLmJ1eV9hbXQpLAogICAgICAgICAgICBvZmZlcnNbaWRdLnRpbWVzdGFtcAogICAgICAgICk7CiAgICB9CgogICAgLy8gQWNjZXB0IGdpdmVuIGBxdWFudGl0eWAgb2YgYW4gb2ZmZXIuIFRyYW5zZmVycyBmdW5kcyBmcm9tIGNhbGxlciB0bwogICAgLy8gb2ZmZXIgbWFrZXIsIGFuZCBmcm9tIG1hcmtldCB0byBjYWxsZXIuCiAgICBmdW5jdGlvbiBidXkodWludCBpZCwgdWludCBxdWFudGl0eSkKICAgICAgICBjYW5fYnV5KGlkKQogICAgICAgIHN5bmNocm9uaXplZAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgT2ZmZXJJbmZvIG1lbW9yeSBvZmZlciA9IG9mZmVyc1tpZF07CiAgICAgICAgdWludCBzcGVuZCA9IG11bChxdWFudGl0eSwgb2ZmZXIuYnV5X2FtdCkgLyBvZmZlci5wYXlfYW10OwoKICAgICAgICByZXF1aXJlKHVpbnQxMjgoc3BlbmQpID09IHNwZW5kKTsKICAgICAgICByZXF1aXJlKHVpbnQxMjgocXVhbnRpdHkpID09IHF1YW50aXR5KTsKCiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBzZW1hbnRpYyBjb21wYXRpYmlsaXR5LgogICAgICAgIGlmIChxdWFudGl0eSA9PSAwIHx8IHNwZW5kID09IDAgfHwKICAgICAgICAgICAgcXVhbnRpdHkgPiBvZmZlci5wYXlfYW10IHx8IHNwZW5kID4gb2ZmZXIuYnV5X2FtdCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIG9mZmVyc1tpZF0ucGF5X2FtdCA9IHN1YihvZmZlci5wYXlfYW10LCBxdWFudGl0eSk7CiAgICAgICAgb2ZmZXJzW2lkXS5idXlfYW10ID0gc3ViKG9mZmVyLmJ1eV9hbXQsIHNwZW5kKTsKICAgICAgICBhc3NlcnQoIG9mZmVyLmJ1eV9nZW0udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIG9mZmVyLm93bmVyLCBzcGVuZCkgKTsKICAgICAgICBhc3NlcnQoIG9mZmVyLnBheV9nZW0udHJhbnNmZXIobXNnLnNlbmRlciwgcXVhbnRpdHkpICk7CgogICAgICAgIExvZ0l0ZW1VcGRhdGUoaWQpOwogICAgICAgIExvZ1Rha2UoCiAgICAgICAgICAgIGJ5dGVzMzIoaWQpLAogICAgICAgICAgICBzaGEzKG9mZmVyLnBheV9nZW0sIG9mZmVyLmJ1eV9nZW0pLAogICAgICAgICAgICBvZmZlci5vd25lciwKICAgICAgICAgICAgb2ZmZXIucGF5X2dlbSwKICAgICAgICAgICAgb2ZmZXIuYnV5X2dlbSwKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgdWludDEyOChxdWFudGl0eSksCiAgICAgICAgICAgIHVpbnQxMjgoc3BlbmQpLAogICAgICAgICAgICB1aW50NjQobm93KQogICAgICAgICk7CiAgICAgICAgTG9nVHJhZGUocXVhbnRpdHksIG9mZmVyLnBheV9nZW0sIHNwZW5kLCBvZmZlci5idXlfZ2VtKTsKCiAgICAgICAgaWYgKG9mZmVyc1tpZF0ucGF5X2FtdCA9PSAwKSB7CiAgICAgICAgICBkZWxldGUgb2ZmZXJzW2lkXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIENhbmNlbCBhbiBvZmZlci4gUmVmdW5kcyBvZmZlciBtYWtlci4KICAgIGZ1bmN0aW9uIGNhbmNlbCh1aW50IGlkKQogICAgICAgIGNhbl9jYW5jZWwoaWQpCiAgICAgICAgc3luY2hyb25pemVkCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIC8vIHJlYWQtb25seSBvZmZlci4gTW9kaWZ5IGFuIG9mZmVyIGJ5IGRpcmVjdGx5IGFjY2Vzc2luZyBvZmZlcnNbaWRdCiAgICAgICAgT2ZmZXJJbmZvIG1lbW9yeSBvZmZlciA9IG9mZmVyc1tpZF07CiAgICAgICAgZGVsZXRlIG9mZmVyc1tpZF07CgogICAgICAgIGFzc2VydCggb2ZmZXIucGF5X2dlbS50cmFuc2ZlcihvZmZlci5vd25lciwgb2ZmZXIucGF5X2FtdCkgKTsKCiAgICAgICAgTG9nSXRlbVVwZGF0ZShpZCk7CiAgICAgICAgTG9nS2lsbCgKICAgICAgICAgICAgYnl0ZXMzMihpZCksCiAgICAgICAgICAgIHNoYTMob2ZmZXIucGF5X2dlbSwgb2ZmZXIuYnV5X2dlbSksCiAgICAgICAgICAgIG9mZmVyLm93bmVyLAogICAgICAgICAgICBvZmZlci5wYXlfZ2VtLAogICAgICAgICAgICBvZmZlci5idXlfZ2VtLAogICAgICAgICAgICB1aW50MTI4KG9mZmVyLnBheV9hbXQpLAogICAgICAgICAgICB1aW50MTI4KG9mZmVyLmJ1eV9hbXQpLAogICAgICAgICAgICB1aW50NjQobm93KQogICAgICAgICk7CgogICAgICAgIHN1Y2Nlc3MgPSB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGtpbGwoYnl0ZXMzMiBpZCkgewogICAgICAgIGFzc2VydChjYW5jZWwodWludDI1NihpZCkpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlKAogICAgICAgIEVSQzIwICAgIHBheV9nZW0sCiAgICAgICAgRVJDMjAgICAgYnV5X2dlbSwKICAgICAgICB1aW50MTI4ICBwYXlfYW10LAogICAgICAgIHVpbnQxMjggIGJ1eV9hbXQKICAgICkgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHJldHVybiBieXRlczMyKG9mZmVyKHBheV9hbXQsIHBheV9nZW0sIGJ1eV9hbXQsIGJ1eV9nZW0pKTsKICAgIH0KCiAgICAvLyBNYWtlIGEgbmV3IG9mZmVyLiBUYWtlcyBmdW5kcyBmcm9tIHRoZSBjYWxsZXIgaW50byBtYXJrZXQgZXNjcm93LgogICAgZnVuY3Rpb24gb2ZmZXIodWludCBwYXlfYW10LCBFUkMyMCBwYXlfZ2VtLCB1aW50IGJ1eV9hbXQsIEVSQzIwIGJ1eV9nZW0pCiAgICAgICAgY2FuX29mZmVyCiAgICAgICAgc3luY2hyb25pemVkCiAgICAgICAgcmV0dXJucyAodWludCBpZCkKICAgIHsKICAgICAgICByZXF1aXJlKHVpbnQxMjgocGF5X2FtdCkgPT0gcGF5X2FtdCk7CiAgICAgICAgcmVxdWlyZSh1aW50MTI4KGJ1eV9hbXQpID09IGJ1eV9hbXQpOwogICAgICAgIHJlcXVpcmUocGF5X2FtdCA+IDApOwogICAgICAgIHJlcXVpcmUocGF5X2dlbSAhPSBFUkMyMCgweDApKTsKICAgICAgICByZXF1aXJlKGJ1eV9hbXQgPiAwKTsKICAgICAgICByZXF1aXJlKGJ1eV9nZW0gIT0gRVJDMjAoMHgwKSk7CiAgICAgICAgcmVxdWlyZShwYXlfZ2VtICE9IGJ1eV9nZW0pOwoKICAgICAgICBPZmZlckluZm8gbWVtb3J5IGluZm87CiAgICAgICAgaW5mby5wYXlfYW10ID0gcGF5X2FtdDsKICAgICAgICBpbmZvLnBheV9nZW0gPSBwYXlfZ2VtOwogICAgICAgIGluZm8uYnV5X2FtdCA9IGJ1eV9hbXQ7CiAgICAgICAgaW5mby5idXlfZ2VtID0gYnV5X2dlbTsKICAgICAgICBpbmZvLm93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBpbmZvLmFjdGl2ZSA9IHRydWU7CiAgICAgICAgaW5mby50aW1lc3RhbXAgPSB1aW50NjQobm93KTsKICAgICAgICBpZCA9IF9uZXh0X2lkKCk7CiAgICAgICAgb2ZmZXJzW2lkXSA9IGluZm87CgogICAgICAgIGFzc2VydCggcGF5X2dlbS50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgcGF5X2FtdCkgKTsKCiAgICAgICAgTG9nSXRlbVVwZGF0ZShpZCk7CiAgICAgICAgTG9nTWFrZSgKICAgICAgICAgICAgYnl0ZXMzMihpZCksCiAgICAgICAgICAgIHNoYTMocGF5X2dlbSwgYnV5X2dlbSksCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIHBheV9nZW0sCiAgICAgICAgICAgIGJ1eV9nZW0sCiAgICAgICAgICAgIHVpbnQxMjgocGF5X2FtdCksCiAgICAgICAgICAgIHVpbnQxMjgoYnV5X2FtdCksCiAgICAgICAgICAgIHVpbnQ2NChub3cpCiAgICAgICAgKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0YWtlKGJ5dGVzMzIgaWQsIHVpbnQxMjggbWF4VGFrZUFtb3VudCkgewogICAgICAgIGFzc2VydChidXkodWludDI1NihpZCksIG1heFRha2VBbW91bnQpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfbmV4dF9pZCgpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBsYXN0X29mZmVyX2lkKys7IHJldHVybiBsYXN0X29mZmVyX2lkOwogICAgfQp9CgovLyBTaW1wbGUgTWFya2V0IHdpdGggYSBtYXJrZXQgbGlmZXRpbWUuIFdoZW4gdGhlIGNsb3NlX3RpbWUgaGFzIGJlZW4gcmVhY2hlZCwKLy8gb2ZmZXJzIGNhbiBvbmx5IGJlIGNhbmNlbGxlZCAob2ZmZXIgYW5kIGJ1eSB3aWxsIHRocm93KS4KY29udHJhY3QgRXhwaXJpbmdNYXJrZXQgaXMgRFNBdXRoLCBTaW1wbGVNYXJrZXQgewogICAgdWludDY0IHB1YmxpYyBjbG9zZV90aW1lOwogICAgYm9vbCBwdWJsaWMgc3RvcHBlZDsKCiAgICAvLyBhZnRlciBjbG9zZV90aW1lIGhhcyBiZWVuIHJlYWNoZWQsIG5vIG5ldyBvZmZlcnMgYXJlIGFsbG93ZWQKICAgIG1vZGlmaWVyIGNhbl9vZmZlciB7CiAgICAgICAgYXNzZXJ0KCFpc0Nsb3NlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIGFmdGVyIGNsb3NlLCBubyBuZXcgYnV5cyBhcmUgYWxsb3dlZAogICAgbW9kaWZpZXIgY2FuX2J1eSh1aW50IGlkKSB7CiAgICAgICAgcmVxdWlyZShpc0FjdGl2ZShpZCkpOwogICAgICAgIHJlcXVpcmUoIWlzQ2xvc2VkKCkpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gYWZ0ZXIgY2xvc2UsIGFueW9uZSBjYW4gY2FuY2VsIGFuIG9mZmVyCiAgICBtb2RpZmllciBjYW5fY2FuY2VsKHVpbnQgaWQpIHsKICAgICAgICByZXF1aXJlKGlzQWN0aXZlKGlkKSk7CiAgICAgICAgcmVxdWlyZShpc0Nsb3NlZCgpIHx8IChtc2cuc2VuZGVyID09IGdldE93bmVyKGlkKSkpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gRXhwaXJpbmdNYXJrZXQodWludDY0IF9jbG9zZV90aW1lKSB7CiAgICAgICAgY2xvc2VfdGltZSA9IF9jbG9zZV90aW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQ2xvc2VkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBjbG9zZWQpIHsKICAgICAgICByZXR1cm4gc3RvcHBlZCB8fCBnZXRUaW1lKCkgPiBjbG9zZV90aW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFRpbWUoKSByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gdWludDY0KG5vdyk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RvcCgpIGF1dGggewogICAgICAgIHN0b3BwZWQgPSB0cnVlOwogICAgfQp9Cgpjb250cmFjdCBNYXRjaGluZ0V2ZW50cyB7CiAgICBldmVudCBMb2dCdXlFbmFibGVkKGJvb2wgaXNFbmFibGVkKTsKICAgIGV2ZW50IExvZ01pblNlbGwoYWRkcmVzcyBwYXlfZ2VtLCB1aW50IG1pbl9hbW91bnQpOwogICAgZXZlbnQgTG9nTWF0Y2hpbmdFbmFibGVkKGJvb2wgaXNFbmFibGVkKTsKICAgIGV2ZW50IExvZ1Vuc29ydGVkT2ZmZXIodWludCBpZCk7CiAgICBldmVudCBMb2dTb3J0ZWRPZmZlcih1aW50IGlkKTsKICAgIGV2ZW50IExvZ0FkZFRva2VuUGFpcldoaXRlbGlzdChFUkMyMCBiYXNlVG9rZW4sIEVSQzIwIHF1b3RlVG9rZW4pOwogICAgZXZlbnQgTG9nUmVtVG9rZW5QYWlyV2hpdGVsaXN0KEVSQzIwIGJhc2VUb2tlbiwgRVJDMjAgcXVvdGVUb2tlbik7Cn0KCmNvbnRyYWN0IE1hdGNoaW5nTWFya2V0IGlzIE1hdGNoaW5nRXZlbnRzLCBFeHBpcmluZ01hcmtldCwgRFNOb3RlIHsKICAgIGJvb2wgcHVibGljIGJ1eUVuYWJsZWQgPSB0cnVlOyAgICAgIC8vYnV5IGVuYWJsZWQKICAgIGJvb2wgcHVibGljIG1hdGNoaW5nRW5hYmxlZCA9IHRydWU7IC8vdHJ1ZTogZW5hYmxlIG1hdGNoaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmFsc2U6IHJldmVydCB0byBleHBpcmluZyBtYXJrZXQKICAgIHN0cnVjdCBzb3J0SW5mbyB7CiAgICAgICAgdWludCBuZXh0OyAgLy9wb2ludHMgdG8gaWQgb2YgbmV4dCBoaWdoZXIgb2ZmZXIKICAgICAgICB1aW50IHByZXY7ICAvL3BvaW50cyB0byBpZCBvZiBwcmV2aW91cyBsb3dlciBvZmZlcgogICAgfQogICAgbWFwcGluZyh1aW50ID0+IHNvcnRJbmZvKSBwdWJsaWMgX3Jhbms7ICAgICAgICAgICAgICAgICAgICAgLy9kb3VibHkgbGlua2VkIGxpc3RzIG9mIHNvcnRlZCBvZmZlciBpZHMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkpIHB1YmxpYyBfYmVzdDsgIC8vaWQgb2YgdGhlIGhpZ2hlc3Qgb2ZmZXIgZm9yIGEgdG9rZW4gcGFpcgogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSkgcHVibGljIF9zcGFuOyAgLy9udW1iZXIgb2Ygb2ZmZXJzIHN0b3JlZCBmb3IgdG9rZW4gcGFpciBpbiBzb3J0ZWQgb3JkZXJib29rCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIF9kdXN0OyAgICAgICAgICAgICAgICAgICAgICAvL21pbmltdW0gc2VsbCBhbW91bnQgZm9yIGEgdG9rZW4gdG8gYXZvaWQgZHVzdCBvZmZlcnMKICAgIG1hcHBpbmcodWludCA9PiB1aW50KSBwdWJsaWMgX25lYXI7ICAgICAgICAgLy9uZXh0IHVuc29ydGVkIG9mZmVyIGlkCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYm9vbCkgcHVibGljIF9tZW51OyAgICAgIC8vd2hpdGVsaXN0IHRyYWNraW5nIHdoaWNoIHRva2VuIHBhaXJzIGNhbiBiZSB0cmFkZWQKICAgIHVpbnQgX2hlYWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJzdCB1bnNvcnRlZCBvZmZlciBpZAoKICAgIC8vY2hlY2sgaWYgdG9rZW4gcGFpciBpcyBlbmFibGVkCiAgICBtb2RpZmllciBpc1doaXRlbGlzdChFUkMyMCBidXlfZ2VtLCBFUkMyMCBwYXlfZ2VtKSB7CiAgICAgICAgcmVxdWlyZShfbWVudVtzaGEzKGJ1eV9nZW0sIHBheV9nZW0pXSB8fCBfbWVudVtzaGEzKHBheV9nZW0sIGJ1eV9nZW0pXSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBNYXRjaGluZ01hcmtldCh1aW50NjQgY2xvc2VfdGltZSkgRXhwaXJpbmdNYXJrZXQoY2xvc2VfdGltZSkgewogICAgfQoKICAgIC8vIC0tLS0gUHVibGljIGVudHJ5cG9pbnRzIC0tLS0gLy8KCiAgICBmdW5jdGlvbiBtYWtlKAogICAgICAgIEVSQzIwICAgIHBheV9nZW0sCiAgICAgICAgRVJDMjAgICAgYnV5X2dlbSwKICAgICAgICB1aW50MTI4ICBwYXlfYW10LAogICAgICAgIHVpbnQxMjggIGJ1eV9hbXQKICAgICkKICAgIHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4gYnl0ZXMzMihvZmZlcihwYXlfYW10LCBwYXlfZ2VtLCBidXlfYW10LCBidXlfZ2VtKSk7CiAgICB9CgogICAgZnVuY3Rpb24gdGFrZShieXRlczMyIGlkLCB1aW50MTI4IG1heFRha2VBbW91bnQpIHsKICAgICAgICBhc3NlcnQoYnV5KHVpbnQyNTYoaWQpLCBtYXhUYWtlQW1vdW50KSk7CiAgICB9CgogICAgZnVuY3Rpb24ga2lsbChieXRlczMyIGlkKSB7CiAgICAgICAgYXNzZXJ0KGNhbmNlbCh1aW50MjU2KGlkKSkpOwogICAgfQoKICAgIC8vIE1ha2UgYSBuZXcgb2ZmZXIuIFRha2VzIGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbnRvIG1hcmtldCBlc2Nyb3cuCiAgICAvLwogICAgLy8gSWYgbWF0Y2hpbmcgaXMgZW5hYmxlZDoKICAgIC8vICAgICAqIGNyZWF0ZXMgbmV3IG9mZmVyIHdpdGhvdXQgcHV0dGluZyBpdCBpbgogICAgLy8gICAgICAgdGhlIHNvcnRlZCBsaXN0LgogICAgLy8gICAgICogYXZhaWxhYmxlIHRvIGF1dGhvcml6ZWQgY29udHJhY3RzIG9ubHkhCiAgICAvLyAgICAgKiBrZWVwZXJzIHNob3VsZCBjYWxsIGluc2VydChpZCxwb3MpCiAgICAvLyAgICAgICB0byBwdXQgb2ZmZXIgaW4gdGhlIHNvcnRlZCBsaXN0LgogICAgLy8KICAgIC8vIElmIG1hdGNoaW5nIGlzIGRpc2FibGVkOgogICAgLy8gICAgICogY2FsbHMgZXhwaXJpbmcgbWFya2V0J3Mgb2ZmZXIoKS4KICAgIC8vICAgICAqIGF2YWlsYWJsZSB0byBldmVyeW9uZSB3aXRob3V0IGF1dGhvcml6YXRpb24uCiAgICAvLyAgICAgKiBubyBzb3J0aW5nIGlzIGRvbmUuCiAgICAvLwogICAgZnVuY3Rpb24gb2ZmZXIoCiAgICAgICAgdWludCBwYXlfYW10LCAgICAvL21ha2VyIChhc2spIHNlbGwgaG93IG11Y2gKICAgICAgICBFUkMyMCBwYXlfZ2VtLCAgIC8vbWFrZXIgKGFzaykgc2VsbCB3aGljaCB0b2tlbgogICAgICAgIHVpbnQgYnV5X2FtdCwgICAgLy90YWtlciAoYXNrKSBidXkgaG93IG11Y2gKICAgICAgICBFUkMyMCBidXlfZ2VtICAgIC8vdGFrZXIgKGFzaykgYnV5IHdoaWNoIHRva2VuCiAgICApCiAgICBpc1doaXRlbGlzdChwYXlfZ2VtLCBidXlfZ2VtKQogICAgLyogTk9UIHN5bmNocm9uaXplZCEhISAqLwogICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICB2YXIgZm4gPSBtYXRjaGluZ0VuYWJsZWQgPyBfb2ZmZXJ1IDogc3VwZXIub2ZmZXI7CiAgICAgICAgcmV0dXJuIGZuKHBheV9hbXQsIHBheV9nZW0sIGJ1eV9hbXQsIGJ1eV9nZW0pOwogICAgfQoKICAgIC8vIE1ha2UgYSBuZXcgb2ZmZXIuIFRha2VzIGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbnRvIG1hcmtldCBlc2Nyb3cuCiAgICBmdW5jdGlvbiBvZmZlcigKICAgICAgICB1aW50IHBheV9hbXQsICAgIC8vbWFrZXIgKGFzaykgc2VsbCBob3cgbXVjaAogICAgICAgIEVSQzIwIHBheV9nZW0sICAgLy9tYWtlciAoYXNrKSBzZWxsIHdoaWNoIHRva2VuCiAgICAgICAgdWludCBidXlfYW10LCAgICAvL21ha2VyIChhc2spIGJ1eSBob3cgbXVjaAogICAgICAgIEVSQzIwIGJ1eV9nZW0sICAgLy9tYWtlciAoYXNrKSBidXkgd2hpY2ggdG9rZW4KICAgICAgICB1aW50IHBvcyAgICAgICAgIC8vcG9zaXRpb24gdG8gaW5zZXJ0IG9mZmVyLCAwIHNob3VsZCBiZSB1c2VkIGlmIHVua25vd24KICAgICkKICAgIGlzV2hpdGVsaXN0KHBheV9nZW0sIGJ1eV9nZW0pCiAgICAvKk5PVCBzeW5jaHJvbml6ZWQhISEgKi8KICAgIGNhbl9vZmZlcgogICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gb2ZmZXIocGF5X2FtdCwgcGF5X2dlbSwgYnV5X2FtdCwgYnV5X2dlbSwgcG9zLCBmYWxzZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb2ZmZXIoCiAgICAgICAgdWludCBwYXlfYW10LCAgICAvL21ha2VyIChhc2spIHNlbGwgaG93IG11Y2gKICAgICAgICBFUkMyMCBwYXlfZ2VtLCAgIC8vbWFrZXIgKGFzaykgc2VsbCB3aGljaCB0b2tlbgogICAgICAgIHVpbnQgYnV5X2FtdCwgICAgLy9tYWtlciAoYXNrKSBidXkgaG93IG11Y2gKICAgICAgICBFUkMyMCBidXlfZ2VtLCAgIC8vbWFrZXIgKGFzaykgYnV5IHdoaWNoIHRva2VuCiAgICAgICAgdWludCBwb3MsICAgICAgICAvL3Bvc2l0aW9uIHRvIGluc2VydCBvZmZlciwgMCBzaG91bGQgYmUgdXNlZCBpZiB1bmtub3duCiAgICAgICAgYm9vbCByb3VuZGluZyAgICAvL21hdGNoICJjbG9zZSBlbm91Z2giIG9yZGVycz8KICAgICkKICAgIGlzV2hpdGVsaXN0KHBheV9nZW0sIGJ1eV9nZW0pCiAgICAvKk5PVCBzeW5jaHJvbml6ZWQhISEgKi8KICAgIGNhbl9vZmZlcgogICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXF1aXJlKF9kdXN0W3BheV9nZW1dIDw9IHBheV9hbXQpOwoKICAgICAgICBpZiAobWF0Y2hpbmdFbmFibGVkKSB7CiAgICAgICAgICByZXR1cm4gX21hdGNobyhwYXlfYW10LCBwYXlfZ2VtLCBidXlfYW10LCBidXlfZ2VtLCBwb3MsIHJvdW5kaW5nKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1cGVyLm9mZmVyKHBheV9hbXQsIHBheV9nZW0sIGJ1eV9hbXQsIGJ1eV9nZW0pOwogICAgfQoKICAgIC8vVHJhbnNmZXJzIGZ1bmRzIGZyb20gY2FsbGVyIHRvIG9mZmVyIG1ha2VyLCBhbmQgZnJvbSBtYXJrZXQgdG8gY2FsbGVyLgogICAgZnVuY3Rpb24gYnV5KHVpbnQgaWQsIHVpbnQgYW1vdW50KQogICAgLypOT1Qgc3luY2hyb25pemVkISEhICovCiAgICBjYW5fYnV5KGlkKQogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICB2YXIgZm4gPSBtYXRjaGluZ0VuYWJsZWQgPyBfYnV5cyA6IHN1cGVyLmJ1eTsKICAgICAgICByZXR1cm4gZm4oaWQsIGFtb3VudCk7CiAgICB9CgogICAgLy8gQ2FuY2VsIGFuIG9mZmVyLiBSZWZ1bmRzIG9mZmVyIG1ha2VyLgogICAgZnVuY3Rpb24gY2FuY2VsKHVpbnQgaWQpCiAgICAvKk5PVCBzeW5jaHJvbml6ZWQhISEgKi8KICAgIGNhbl9jYW5jZWwoaWQpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgaWYgKG1hdGNoaW5nRW5hYmxlZCkgewogICAgICAgICAgICBpZiAoaXNPZmZlclNvcnRlZChpZCkpIHsKICAgICAgICAgICAgICAgIGFzc2VydChfdW5zb3J0KGlkKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhc3NlcnQoX2hpZGUoaWQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VwZXIuY2FuY2VsKGlkKTsgICAgLy9kZWxldGUgdGhlIG9mZmVyLgogICAgfQoKICAgIC8vaW5zZXJ0IG9mZmVyIGludG8gdGhlIHNvcnRlZCBsaXN0CiAgICAvL2tlZXBlcnMgbmVlZCB0byB1c2UgdGhpcyBmdW5jdGlvbgogICAgZnVuY3Rpb24gaW5zZXJ0KAogICAgICAgIHVpbnQgaWQsICAgLy9tYWtlciAoYXNrKSBpZAogICAgICAgIHVpbnQgcG9zICAgLy9wb3NpdGlvbiB0byBpbnNlcnQgaW50bwogICAgKQogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhZGRyZXNzIGJ1eV9nZW0gPSBhZGRyZXNzKG9mZmVyc1tpZF0uYnV5X2dlbSk7CiAgICAgICAgYWRkcmVzcyBwYXlfZ2VtID0gYWRkcmVzcyhvZmZlcnNbaWRdLnBheV9nZW0pOwoKICAgICAgICByZXF1aXJlKCFpc09mZmVyU29ydGVkKGlkKSk7ICAgIC8vbWFrZSBzdXJlIG9mZmVyc1tpZF0gaXMgbm90IHlldCBzb3J0ZWQKICAgICAgICByZXF1aXJlKGlzQWN0aXZlKGlkKSk7ICAgICAgICAgIC8vbWFrZSBzdXJlIG9mZmVyc1tpZF0gaXMgYWN0aXZlCiAgICAgICAgcmVxdWlyZShwb3MgPT0gMCB8fCBpc0FjdGl2ZShwb3MpKTsKCiAgICAgICAgcmVxdWlyZShfaGlkZShpZCkpOyAgICAgICAgICAgICAvL3JlbW92ZSBvZmZlciBmcm9tIHVuc29ydGVkIG9mZmVycyBsaXN0CiAgICAgICAgX3NvcnQoaWQsIHBvcyk7ICAgICAgICAgICAgICAgICAvL3B1dCBvZmZlciBpbnRvIHRoZSBzb3J0ZWQgb2ZmZXJzIGxpc3QKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL3JldHVybnMgdHJ1ZSBpZiB0b2tlbiBpcyBzdWNjZXNmdWxseSBhZGRlZCB0byB3aGl0ZWxpc3QKICAgIC8vICBGdW5jdGlvbiBpcyB1c2VkIHRvIGFkZCBhIHRva2VuIHBhaXIgdG8gdGhlIHdoaXRlbGlzdAogICAgLy8gIEFsbCBpbmNvbWluZyBvZmZlcnMgYXJlIGNoZWNrZWQgYWdhaW5zdCB0aGUgd2hpdGVsaXN0LgogICAgZnVuY3Rpb24gYWRkVG9rZW5QYWlyV2hpdGVsaXN0KAogICAgICAgIEVSQzIwIGJhc2VUb2tlbiwKICAgICAgICBFUkMyMCBxdW90ZVRva2VuCiAgICApCiAgICBwdWJsaWMKICAgIGF1dGgKICAgIG5vdGUKICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZSghaXNUb2tlblBhaXJXaGl0ZWxpc3RlZChiYXNlVG9rZW4sIHF1b3RlVG9rZW4pKTsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoYmFzZVRva2VuKSAhPSAweDAgJiYgYWRkcmVzcyhxdW90ZVRva2VuKSAhPSAweDApOwoKICAgICAgICBfbWVudVtzaGEzKGJhc2VUb2tlbiwgcXVvdGVUb2tlbildID0gdHJ1ZTsKICAgICAgICBMb2dBZGRUb2tlblBhaXJXaGl0ZWxpc3QoYmFzZVRva2VuLCBxdW90ZVRva2VuKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL3JldHVybnMgdHJ1ZSBpZiB0b2tlbiBpcyBzdWNjZXNzZnVsbHkgcmVtb3ZlZCBmcm9tIHdoaXRlbGlzdAogICAgLy8gIEZ1bmN0aW9uIGlzIHVzZWQgdG8gcmVtb3ZlIGEgdG9rZW4gcGFpciBmcm9tIHRoZSB3aGl0ZWxpc3QuCiAgICAvLyAgQWxsIGluY29taW5nIG9mZmVycyBhcmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSB3aGl0ZWxpc3QuCiAgICBmdW5jdGlvbiByZW1Ub2tlblBhaXJXaGl0ZWxpc3QoCiAgICAgICAgRVJDMjAgYmFzZVRva2VuLAogICAgICAgIEVSQzIwIHF1b3RlVG9rZW4KICAgICkKICAgIHB1YmxpYwogICAgYXV0aAogICAgbm90ZQogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKGlzVG9rZW5QYWlyV2hpdGVsaXN0ZWQoYmFzZVRva2VuLCBxdW90ZVRva2VuKSk7CgogICAgICAgIGRlbGV0ZSBfbWVudVtzaGEzKGJhc2VUb2tlbiwgcXVvdGVUb2tlbildOwogICAgICAgIGRlbGV0ZSBfbWVudVtzaGEzKHF1b3RlVG9rZW4sIGJhc2VUb2tlbildOwogICAgICAgIExvZ1JlbVRva2VuUGFpcldoaXRlbGlzdChiYXNlVG9rZW4sIHF1b3RlVG9rZW4pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzVG9rZW5QYWlyV2hpdGVsaXN0ZWQoCiAgICAgICAgRVJDMjAgYmFzZVRva2VuLAogICAgICAgIEVSQzIwIHF1b3RlVG9rZW4KICAgICkKICAgIHB1YmxpYwogICAgY29uc3RhbnQKICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIChfbWVudVtzaGEzKGJhc2VUb2tlbiwgcXVvdGVUb2tlbildIHx8IF9tZW51W3NoYTMocXVvdGVUb2tlbiwgYmFzZVRva2VuKV0pOwogICAgfQoKICAgIC8vc2V0IHRoZSBtaW5pbXVtIHNlbGwgYW1vdW50IGZvciBhIHRva2VuCiAgICAvLyAgICBGdW5jdGlvbiBpcyB1c2VkIHRvIGF2b2lkICJkdXN0IG9mZmVycyIgdGhhdCBoYXZlCiAgICAvLyAgICB2ZXJ5IHNtYWxsIGFtb3VudCBvZiB0b2tlbnMgdG8gc2VsbCwgYW5kIGl0IHdvdWxkCiAgICAvLyAgICBjb3N0IG1vcmUgZ2FzIHRvIGFjY2VwdCB0aGUgb2ZmZXIsIHRoYW4gdGhlIHZhbHVlCiAgICAvLyAgICBvZiB0b2tlbnMgcmVjZWl2ZWQuCiAgICBmdW5jdGlvbiBzZXRNaW5TZWxsKAogICAgICAgIEVSQzIwIHBheV9nZW0sICAgICAvL3Rva2VuIHRvIGFzc2lnbiBtaW5pbXVtIHNlbGwgYW1vdW50IHRvCiAgICAgICAgdWludCBkdXN0ICAgICAgICAgIC8vbWFrZXIgKGFzaykgbWluaW11bSBzZWxsIGFtb3VudAogICAgKQogICAgYXV0aAogICAgbm90ZQogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBfZHVzdFtwYXlfZ2VtXSA9IGR1c3Q7CiAgICAgICAgTG9nTWluU2VsbChwYXlfZ2VtLCBkdXN0KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL3JldHVybnMgdGhlIG1pbmltdW0gc2VsbCBhbW91bnQgZm9yIGFuIG9mZmVyCiAgICBmdW5jdGlvbiBnZXRNaW5TZWxsKAogICAgICAgIEVSQzIwIHBheV9nZW0gICAgICAvL3Rva2VuIGZvciB3aGljaCBtaW5pbXVtIHNlbGwgYW1vdW50IGlzIHF1ZXJpZWQKICAgICkKICAgIGNvbnN0YW50CiAgICByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9kdXN0W3BheV9nZW1dOwogICAgfQoKICAgIC8vc2V0IGJ1eSBmdW5jdGlvbmFsaXR5IGVuYWJsZWQvZGlzYWJsZWQKICAgIGZ1bmN0aW9uIHNldEJ1eUVuYWJsZWQoYm9vbCBidXlFbmFibGVkXykgYXV0aCAgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJ1eUVuYWJsZWQgPSBidXlFbmFibGVkXzsKICAgICAgICBMb2dCdXlFbmFibGVkKGJ1eUVuYWJsZWQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vc2V0IG1hdGNoaW5nIGVuYWJsZWQvZGlzYWJsZWQKICAgIC8vICAgIElmIG1hdGNoaW5nRW5hYmxlZCB0cnVlKGRlZmF1bHQpLCB0aGVuIGluc2VydGVkIG9mZmVycyBhcmUgbWF0Y2hlZC4KICAgIC8vICAgIEV4Y2VwdCB0aGUgb25lcyBpbnNlcnRlZCBieSBjb250cmFjdHMsIGJlY2F1c2UgdGhvc2UgZW5kIHVwCiAgICAvLyAgICBpbiB0aGUgdW5zb3J0ZWQgbGlzdCBvZiBvZmZlcnMsIHRoYXQgbXVzdCBiZSBsYXRlciBzb3J0ZWQgYnkKICAgIC8vICAgIGtlZXBlcnMgdXNpbmcgaW5zZXJ0KCkuCiAgICAvLyAgICBJZiBtYXRjaGluZ0VuYWJsZWQgaXMgZmFsc2UgdGhlbiBNYXRjaGluZ01hcmtldCBpcyByZXZlcnRlZCB0byBFeHBpcmluZ01hcmtldCwKICAgIC8vICAgIGFuZCBtYXRjaGluZyBpcyBub3QgZG9uZSwgYW5kIHNvcnRlZCBsaXN0cyBhcmUgZGlzYWJsZWQuCiAgICBmdW5jdGlvbiBzZXRNYXRjaGluZ0VuYWJsZWQoYm9vbCBtYXRjaGluZ0VuYWJsZWRfKSBhdXRoICByZXR1cm5zIChib29sKSB7CiAgICAgICAgbWF0Y2hpbmdFbmFibGVkID0gbWF0Y2hpbmdFbmFibGVkXzsKICAgICAgICBMb2dNYXRjaGluZ0VuYWJsZWQobWF0Y2hpbmdFbmFibGVkKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL3JldHVybiB0aGUgYmVzdCBvZmZlciBmb3IgYSB0b2tlbiBwYWlyCiAgICAvLyAgICAgIHRoZSBiZXN0IG9mZmVyIGlzIHRoZSBsb3dlc3Qgb25lIGlmIGl0J3MgYW4gYXNrLAogICAgLy8gICAgICBhbmQgaGlnaGVzdCBvbmUgaWYgaXQncyBhIGJpZCBvZmZlcgogICAgZnVuY3Rpb24gZ2V0QmVzdE9mZmVyKEVSQzIwIHNlbGxfZ2VtLCBFUkMyMCBidXlfZ2VtKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gX2Jlc3Rbc2VsbF9nZW1dW2J1eV9nZW1dOwogICAgfQoKICAgIC8vcmV0dXJuIHRoZSBuZXh0IHdvcnNlIG9mZmVyIGluIHRoZSBzb3J0ZWQgbGlzdAogICAgLy8gICAgICB0aGUgd29yc2Ugb2ZmZXIgaXMgdGhlIGhpZ2hlciBvbmUgaWYgaXRzIGFuIGFzaywKICAgIC8vICAgICAgYW5kIGxvd2VyIG9uZSBpZiBpdHMgYSBiaWQgb2ZmZXIKICAgIGZ1bmN0aW9uIGdldFdvcnNlT2ZmZXIodWludCBpZCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9yYW5rW2lkXS5wcmV2OwogICAgfQoKICAgIC8vcmV0dXJuIHRoZSBuZXh0IGJldHRlciBvZmZlciBpbiB0aGUgc29ydGVkIGxpc3QKICAgIC8vICAgICAgdGhlIGJldHRlciBvZmZlciBpcyBpbiB0aGUgbG93ZXIgcHJpY2VkIG9uZSBpZiBpdHMgYW4gYXNrLAogICAgLy8gICAgICBhbmQgbmV4dCBoaWdoZXIgcHJpY2VkIG9uZSBpZiBpdHMgYSBiaWQgb2ZmZXIKICAgIGZ1bmN0aW9uIGdldEJldHRlck9mZmVyKHVpbnQgaWQpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBfcmFua1tpZF0ubmV4dDsKICAgIH0KCiAgICAvL3JldHVybiB0aGUgYW1vdW50IG9mIGJldHRlciBvZmZlcnMgZm9yIGEgdG9rZW4gcGFpcgogICAgZnVuY3Rpb24gZ2V0T2ZmZXJDb3VudChFUkMyMCBzZWxsX2dlbSwgRVJDMjAgYnV5X2dlbSkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9zcGFuW3NlbGxfZ2VtXVtidXlfZ2VtXTsKICAgIH0KCiAgICAvL2dldCB0aGUgZmlyc3QgdW5zb3J0ZWQgb2ZmZXIgdGhhdCB3YXMgaW5zZXJ0ZWQgYnkgYSBjb250cmFjdAogICAgLy8gICAgICBDb250cmFjdHMgY2FuJ3QgY2FsY3VsYXRlIHRoZSBpbnNlcnRpb24gcG9zaXRpb24gb2YgdGhlaXIgb2ZmZXIgYmVjYXVzZSBpdCBpcyBub3QgYW4gTygxKSBvcGVyYXRpb24uCiAgICAvLyAgICAgIFRoZWlyIG9mZmVycyBnZXQgcHV0IGluIHRoZSB1bnNvcnRlZCBsaXN0IG9mIG9mZmVycy4KICAgIC8vICAgICAgS2VlcGVycyBjYW4gY2FsY3VsYXRlIHRoZSBpbnNlcnRpb24gcG9zaXRpb24gb2ZmY2hhaW4gYW5kIHBhc3MgaXQgdG8gdGhlIGluc2VydCgpIGZ1bmN0aW9uIHRvIGluc2VydAogICAgLy8gICAgICB0aGUgdW5zb3J0ZWQgb2ZmZXIgaW50byB0aGUgc29ydGVkIGxpc3QuIFVuc29ydGVkIG9mZmVycyB3aWxsIG5vdCBiZSBtYXRjaGVkLCBidXQgY2FuIGJlIGJvdWdodCB3aXRoIGJ1eSgpLgogICAgZnVuY3Rpb24gZ2V0Rmlyc3RVbnNvcnRlZE9mZmVyKCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9oZWFkOwogICAgfQoKICAgIC8vZ2V0IHRoZSBuZXh0IHVuc29ydGVkIG9mZmVyCiAgICAvLyAgICAgIENhbiBiZSB1c2VkIHRvIGN5Y2xlIHRocm91Z2ggYWxsIHRoZSB1bnNvcnRlZCBvZmZlcnMuCiAgICBmdW5jdGlvbiBnZXROZXh0VW5zb3J0ZWRPZmZlcih1aW50IGlkKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gX25lYXJbaWRdOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzT2ZmZXJTb3J0ZWQodWludCBpZCkgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgICAgYWRkcmVzcyBidXlfZ2VtID0gYWRkcmVzcyhvZmZlcnNbaWRdLmJ1eV9nZW0pOwogICAgICAgIGFkZHJlc3MgcGF5X2dlbSA9IGFkZHJlc3Mob2ZmZXJzW2lkXS5wYXlfZ2VtKTsKICAgICAgICByZXR1cm4gKF9yYW5rW2lkXS5uZXh0ICE9IDAgfHwgX3JhbmtbaWRdLnByZXYgIT0gMCB8fCBfYmVzdFtwYXlfZ2VtXVtidXlfZ2VtXSA9PSBpZCkgPyB0cnVlIDogZmFsc2U7CiAgICB9CgoKICAgIC8vIC0tLS0gSW50ZXJuYWwgRnVuY3Rpb25zIC0tLS0gLy8KCgogICAgZnVuY3Rpb24gX2J1eXModWludCBpZCwgdWludCBhbW91bnQpCiAgICBpbnRlcm5hbAogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKGJ1eUVuYWJsZWQpOwoKICAgICAgICBpZiAoYW1vdW50ID09IG9mZmVyc1tpZF0ucGF5X2FtdCAmJiBpc09mZmVyU29ydGVkKGlkKSkgewogICAgICAgICAgICAvL29mZmVyc1tpZF0gbXVzdCBiZSByZW1vdmVkIGZyb20gc29ydGVkIGxpc3QgYmVjYXVzZSBhbGwgb2YgaXQgaXMgYm91Z2h0CiAgICAgICAgICAgIF91bnNvcnQoaWQpOwogICAgICAgIH0KICAgICAgICBhc3NlcnQoc3VwZXIuYnV5KGlkLCBhbW91bnQpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL2ZpbmQgdGhlIGlkIG9mIHRoZSBuZXh0IGhpZ2hlciBvZmZlciBhZnRlciBvZmZlcnNbaWRdCiAgICBmdW5jdGlvbiBfZmluZCh1aW50IGlkKQogICAgaW50ZXJuYWwKICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmVxdWlyZSggaWQgPiAwICk7CgogICAgICAgIGFkZHJlc3MgYnV5X2dlbSA9IGFkZHJlc3Mob2ZmZXJzW2lkXS5idXlfZ2VtKTsKICAgICAgICBhZGRyZXNzIHBheV9nZW0gPSBhZGRyZXNzKG9mZmVyc1tpZF0ucGF5X2dlbSk7CiAgICAgICAgdWludCB0b3AgPSBfYmVzdFtwYXlfZ2VtXVtidXlfZ2VtXTsKICAgICAgICB1aW50IG9sZF90b3AgPSAwOwoKICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXItdGhhbi1pZCBvcmRlciB3aG9zZSBzdWNjZXNzb3IgaXMgbGVzcy10aGFuLWlkLgogICAgICAgIHdoaWxlICh0b3AgIT0gMCAmJiBfaXNMdE9yRXEoaWQsIHRvcCkpIHsKICAgICAgICAgICAgb2xkX3RvcCA9IHRvcDsKICAgICAgICAgICAgdG9wID0gX3JhbmtbdG9wXS5wcmV2OwogICAgICAgIH0KICAgICAgICByZXR1cm4gb2xkX3RvcDsKICAgIH0KCiAgICAvL3JldHVybiB0cnVlIGlmIG9mZmVyc1tsb3ddIHByaWNlZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gb2ZmZXJzW2hpZ2hdCiAgICBmdW5jdGlvbiBfaXNMdE9yRXEoCiAgICAgICAgdWludCBsb3csICAgLy9sb3dlciBwcmljZWQgb2ZmZXIncyBpZAogICAgICAgIHVpbnQgaGlnaCAgIC8vaGlnaGVyIHByaWNlZCBvZmZlcidzIGlkCiAgICApCiAgICBpbnRlcm5hbAogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gbXVsKG9mZmVyc1tsb3ddLmJ1eV9hbXQsIG9mZmVyc1toaWdoXS5wYXlfYW10KQogICAgICAgICAgPj0gbXVsKG9mZmVyc1toaWdoXS5idXlfYW10LCBvZmZlcnNbbG93XS5wYXlfYW10KTsKICAgIH0KCiAgICAvL3RoZXNlIHZhcmlhYmxlcyBhcmUgZ2xvYmFsIG9ubHkgYmVjYXVzZSBvZiBzb2xpZGl0eSBsb2NhbCB2YXJpYWJsZSBsaW1pdAoKICAgIC8vbWF0Y2ggb2ZmZXJzIHdpdGggdGFrZXIgb2ZmZXIsIGFuZCBleGVjdXRlIHRva2VuIHRyYW5zYWN0aW9ucwogICAgZnVuY3Rpb24gX21hdGNobygKICAgICAgICB1aW50IHRfcGF5X2FtdCwgICAgLy90YWtlciBzZWxsIGhvdyBtdWNoCiAgICAgICAgRVJDMjAgdF9wYXlfZ2VtLCAgIC8vdGFrZXIgc2VsbCB3aGljaCB0b2tlbgogICAgICAgIHVpbnQgdF9idXlfYW10LCAgICAvL3Rha2VyIGJ1eSBob3cgbXVjaAogICAgICAgIEVSQzIwIHRfYnV5X2dlbSwgICAvL3Rha2VyIGJ1eSB3aGljaCB0b2tlbgogICAgICAgIHVpbnQgcG9zLCAgICAgICAgICAvL3Bvc2l0aW9uIGlkCiAgICAgICAgYm9vbCByb3VuZGluZyAgICAgIC8vbWF0Y2ggImNsb3NlIGVub3VnaCIgb3JkZXJzPwogICAgKQogICAgaW50ZXJuYWwKICAgIHJldHVybnMgKHVpbnQgaWQpCiAgICB7CiAgICAgICAgdWludCBiZXN0X21ha2VyX2lkOyAgICAvL2hpZ2hlc3QgbWFrZXIgaWQKICAgICAgICB1aW50IHRfYnV5X2FtdF9vbGQ7ICAgICAgICAgICAgICAvL3Rha2VyIGJ1eSBob3cgbXVjaCBzYXZlZAogICAgICAgIHVpbnQgbV9idXlfYW10OyAgICAgICAgLy9tYWtlciBvZmZlciB3YW50cyB0byBidXkgdGhpcyBtdWNoIHRva2VuCiAgICAgICAgdWludCBtX3BheV9hbXQ7ICAgICAgICAvL21ha2VyIG9mZmVyIHdhbnRzIHRvIHNlbGwgdGhpcyBtdWNoIHRva2VuCgogICAgICAgIHJlcXVpcmUocG9zID09IDAKICAgICAgICAgICAgICAgfHwgIWlzQWN0aXZlKHBvcykKICAgICAgICAgICAgICAgfHwgdF9idXlfZ2VtID09IG9mZmVyc1twb3NdLmJ1eV9nZW0KICAgICAgICAgICAgICAgICAgJiYgdF9wYXlfZ2VtID09IG9mZmVyc1twb3NdLnBheV9nZW0pOwoKICAgICAgICAvLyB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgb2ZmZXIgc3RvcmVkIGZvciB0b2tlbiBwYWlyCiAgICAgICAgd2hpbGUgKF9iZXN0W3RfYnV5X2dlbV1bdF9wYXlfZ2VtXSA+IDApIHsKICAgICAgICAgICAgYmVzdF9tYWtlcl9pZCA9IF9iZXN0W3RfYnV5X2dlbV1bdF9wYXlfZ2VtXTsKICAgICAgICAgICAgbV9idXlfYW10ID0gb2ZmZXJzW2Jlc3RfbWFrZXJfaWRdLmJ1eV9hbXQ7CiAgICAgICAgICAgIG1fcGF5X2FtdCA9IG9mZmVyc1tiZXN0X21ha2VyX2lkXS5wYXlfYW10OwoKICAgICAgICAgICAgLy8gVWdseSBoYWNrIHRvIHdvcmsgYXJvdW5kIHJvdW5kaW5nIGVycm9ycy4gQmFzZWQgb24gdGhlIGlkZWEgdGhhdAogICAgICAgICAgICAvLyB0aGUgZnVydGhlc3QgdGhlIGFtb3VudHMgY2FuIHN0cmF5IGZyb20gdGhlaXIgInRydWUiIHZhbHVlcyBpcyAxLgogICAgICAgICAgICAvLyBFcmdvIHRoZSB3b3JzdCBjYXNlIGhhcyB0X3BheV9hbXQgYW5kIG1fcGF5X2FtdCBhdCArMSBhd2F5IGZyb20KICAgICAgICAgICAgLy8gdGhlaXIgImNvcnJlY3QiIHZhbHVlcyBhbmQgbV9idXlfYW10IGFuZCB0X2J1eV9hbXQgYXQgLTEuCiAgICAgICAgICAgIC8vIFNpbmNlIChjIC0gMSkgKiAoZCAtIDEpID4gKGEgKyAxKSAqIChiICsgMSkgaXMgZXF1aXZhbGVudCB0bwogICAgICAgICAgICAvLyBjICogZCA+IGEgKiBiICsgYSArIGIgKyBjICsgZCwgd2Ugd3JpdGUuLi4KICAgICAgICAgICAgaWYgKG11bChtX2J1eV9hbXQsIHRfYnV5X2FtdCkgPiBtdWwodF9wYXlfYW10LCBtX3BheV9hbXQpICsKICAgICAgICAgICAgICAgIChyb3VuZGluZyA/IG1fYnV5X2FtdCArIHRfYnV5X2FtdCArIHRfcGF5X2FtdCArIG1fcGF5X2FtdCA6IDApKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBeIFRoZSBgcm91bmRpbmdgIHBhcmFtZXRlciBpcyBhIGNvbXByb21pc2UgYm9ybmUgb2YgYSBjb3VwbGUgZGF5cwogICAgICAgICAgICAvLyBvZiBkaXNjdXNzaW9uLgoKICAgICAgICAgICAgYnV5KGJlc3RfbWFrZXJfaWQsIG1pbihtX3BheV9hbXQsIHRfYnV5X2FtdCkpOwogICAgICAgICAgICB0X2J1eV9hbXRfb2xkID0gdF9idXlfYW10OwogICAgICAgICAgICB0X2J1eV9hbXQgPSBzdWIodF9idXlfYW10LCBtaW4obV9wYXlfYW10LCB0X2J1eV9hbXQpKTsKICAgICAgICAgICAgdF9wYXlfYW10ID0gbXVsKHRfYnV5X2FtdCwgdF9wYXlfYW10KSAvIHRfYnV5X2FtdF9vbGQ7CgogICAgICAgICAgICBpZiAodF9wYXlfYW10ID09IDAgfHwgdF9idXlfYW10ID09IDApIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodF9idXlfYW10ID4gMCAmJiB0X3BheV9hbXQgPiAwKSB7CiAgICAgICAgICAgIC8vbmV3IG9mZmVyIHNob3VsZCBiZSBjcmVhdGVkCiAgICAgICAgICAgIGlkID0gc3VwZXIub2ZmZXIodF9wYXlfYW10LCB0X3BheV9nZW0sIHRfYnV5X2FtdCwgdF9idXlfZ2VtKTsKICAgICAgICAgICAgLy9pbnNlcnQgb2ZmZXIgaW50byB0aGUgc29ydGVkIGxpc3QKICAgICAgICAgICAgX3NvcnQoaWQsIHBvcyk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIE1ha2UgYSBuZXcgb2ZmZXIgd2l0aG91dCBwdXR0aW5nIGl0IGluIHRoZSBzb3J0ZWQgbGlzdC4KICAgIC8vIFRha2VzIGZ1bmRzIGZyb20gdGhlIGNhbGxlciBpbnRvIG1hcmtldCBlc2Nyb3cuCiAgICAvLyAqKioqQXZhaWxhYmxlIHRvIGF1dGhvcml6ZWQgY29udHJhY3RzIG9ubHkhKioqKioqKioqKgogICAgLy8gS2VlcGVycyBzaG91bGQgY2FsbCBpbnNlcnQoaWQscG9zKSB0byBwdXQgb2ZmZXIgaW4gdGhlIHNvcnRlZCBsaXN0LgogICAgZnVuY3Rpb24gX29mZmVydSgKICAgICAgICB1aW50IHBheV9hbXQsICAgICAgLy9tYWtlciAoYXNrKSBzZWxsIGhvdyBtdWNoCiAgICAgICAgRVJDMjAgcGF5X2dlbSwgICAgIC8vbWFrZXIgKGFzaykgc2VsbCB3aGljaCB0b2tlbgogICAgICAgIHVpbnQgYnV5X2FtdCwgICAgICAvL21ha2VyIChhc2spIGJ1eSBob3cgbXVjaAogICAgICAgIEVSQzIwIGJ1eV9nZW0gICAgICAvL21ha2VyIChhc2spIGJ1eSB3aGljaCB0b2tlbgogICAgKQogICAgaW50ZXJuYWwKICAgIC8qTk9UIHN5bmNocm9uaXplZCEhISAqLwogICAgcmV0dXJucyAodWludCBpZCkKICAgIHsKICAgICAgICBpZCA9IHN1cGVyLm9mZmVyKHBheV9hbXQsIHBheV9nZW0sIGJ1eV9hbXQsIGJ1eV9nZW0pOwogICAgICAgIF9uZWFyW2lkXSA9IF9oZWFkOwogICAgICAgIF9oZWFkID0gaWQ7CiAgICAgICAgTG9nVW5zb3J0ZWRPZmZlcihpZCk7CiAgICB9CgogICAgLy9wdXQgb2ZmZXIgaW50byB0aGUgc29ydGVkIGxpc3QKICAgIGZ1bmN0aW9uIF9zb3J0KAogICAgICAgIHVpbnQgaWQsICAgIC8vbWFrZXIgKGFzaykgaWQKICAgICAgICB1aW50IHBvcyAgICAvL3Bvc2l0aW9uIHRvIGluc2VydCBpbnRvCiAgICApCiAgICBpbnRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUoaXNBY3RpdmUoaWQpKTsKCiAgICAgICAgYWRkcmVzcyBidXlfZ2VtID0gYWRkcmVzcyhvZmZlcnNbaWRdLmJ1eV9nZW0pOwogICAgICAgIGFkZHJlc3MgcGF5X2dlbSA9IGFkZHJlc3Mob2ZmZXJzW2lkXS5wYXlfZ2VtKTsKICAgICAgICB1aW50IHByZXZfaWQ7IC8vbWFrZXIgKGFzaykgaWQKCiAgICAgICAgaWYgKHBvcyA9PSAwCiAgICAgICAgICAgIHx8ICFpc0FjdGl2ZShwb3MpCiAgICAgICAgICAgIHx8ICFfaXNMdE9yRXEoaWQsIHBvcykKICAgICAgICAgICAgfHwgKF9yYW5rW3Bvc10ucHJldiAhPSAwICYmIF9pc0x0T3JFcShpZCwgX3JhbmtbcG9zXS5wcmV2KSkKICAgICAgICApIHsKICAgICAgICAgICAgLy9jbGllbnQgZGlkIG5vdCBwcm92aWRlIHZhbGlkIHBvc2l0aW9uLCBzbyB3ZSBoYXZlIHRvIGZpbmQgaXQKICAgICAgICAgICAgcG9zID0gX2ZpbmQoaWQpOwogICAgICAgIH0KCiAgICAgICAgLy9hc3NlcnQgYHBvc2AgaXMgaW4gdGhlIHNvcnRlZCBsaXN0IG9yIGlzIDAKICAgICAgICByZXF1aXJlKHBvcyA9PSAwIHx8IF9yYW5rW3Bvc10ubmV4dCAhPSAwIHx8IF9yYW5rW3Bvc10ucHJldiAhPSAwIHx8IF9iZXN0W3BheV9nZW1dW2J1eV9nZW1dID09IHBvcyk7CgogICAgICAgIGlmIChwb3MgIT0gMCkgewogICAgICAgICAgICAvL29mZmVyc1tpZF0gaXMgbm90IHRoZSBoaWdoZXN0IG9mZmVyCiAgICAgICAgICAgIHJlcXVpcmUoX2lzTHRPckVxKGlkLCBwb3MpKTsKICAgICAgICAgICAgcHJldl9pZCA9IF9yYW5rW3Bvc10ucHJldjsKICAgICAgICAgICAgX3JhbmtbcG9zXS5wcmV2ID0gaWQ7CiAgICAgICAgICAgIF9yYW5rW2lkXS5uZXh0ID0gcG9zOwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL29mZmVyc1tpZF0gaXMgdGhlIGhpZ2hlc3Qgb2ZmZXIKICAgICAgICAgICAgcHJldl9pZCA9IF9iZXN0W3BheV9nZW1dW2J1eV9nZW1dOwogICAgICAgICAgICBfYmVzdFtwYXlfZ2VtXVtidXlfZ2VtXSA9IGlkOwogICAgICAgIH0KCiAgICAgICAgcmVxdWlyZShwcmV2X2lkID09IDAgfHwgb2ZmZXJzW3ByZXZfaWRdLnBheV9nZW0gPT0gb2ZmZXJzW2lkXS5wYXlfZ2VtKTsKICAgICAgICByZXF1aXJlKHByZXZfaWQgPT0gMCB8fCBvZmZlcnNbcHJldl9pZF0uYnV5X2dlbSA9PSBvZmZlcnNbaWRdLmJ1eV9nZW0pOwoKICAgICAgICBpZiAocHJldl9pZCAhPSAwKSB7CiAgICAgICAgICAgIC8vaWYgbG93ZXIgb2ZmZXIgZG9lcyBleGlzdAogICAgICAgICAgICByZXF1aXJlKCFfaXNMdE9yRXEoaWQsIHByZXZfaWQpKTsKICAgICAgICAgICAgX3JhbmtbcHJldl9pZF0ubmV4dCA9IGlkOwogICAgICAgICAgICBfcmFua1tpZF0ucHJldiA9IHByZXZfaWQ7CiAgICAgICAgfQoKICAgICAgICBfc3BhbltwYXlfZ2VtXVtidXlfZ2VtXSsrOwogICAgICAgIExvZ1NvcnRlZE9mZmVyKGlkKTsKICAgIH0KCiAgICAvLyBSZW1vdmUgb2ZmZXIgZnJvbSB0aGUgc29ydGVkIGxpc3QgKGRvZXMgbm90IGNhbmNlbCBvZmZlcikKICAgIGZ1bmN0aW9uIF91bnNvcnQoCiAgICAgICAgdWludCBpZCAgICAvL2lkIG9mIG1ha2VyIChhc2spIG9mZmVyIHRvIHJlbW92ZSBmcm9tIHNvcnRlZCBsaXN0CiAgICApCiAgICBpbnRlcm5hbAogICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICBhZGRyZXNzIGJ1eV9nZW0gPSBhZGRyZXNzKG9mZmVyc1tpZF0uYnV5X2dlbSk7CiAgICAgICAgYWRkcmVzcyBwYXlfZ2VtID0gYWRkcmVzcyhvZmZlcnNbaWRdLnBheV9nZW0pOwogICAgICAgIHJlcXVpcmUoX3NwYW5bcGF5X2dlbV1bYnV5X2dlbV0gPiAwKTsKCiAgICAgICAgLy9hc3NlcnQgaWQgaXMgaW4gdGhlIHNvcnRlZCBsaXN0CiAgICAgICAgcmVxdWlyZShfcmFua1tpZF0ubmV4dCAhPSAwIHx8IF9yYW5rW2lkXS5wcmV2ICE9IDAgfHwgX2Jlc3RbcGF5X2dlbV1bYnV5X2dlbV0gPT0gaWQpOwoKICAgICAgICBpZiAoaWQgIT0gX2Jlc3RbcGF5X2dlbV1bYnV5X2dlbV0pIHsKICAgICAgICAgICAgLy8gb2ZmZXJzW2lkXSBpcyBub3QgdGhlIGhpZ2hlc3Qgb2ZmZXIKICAgICAgICAgICAgX3JhbmtbX3JhbmtbaWRdLm5leHRdLnByZXYgPSBfcmFua1tpZF0ucHJldjsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9vZmZlcnNbaWRdIGlzIHRoZSBoaWdoZXN0IG9mZmVyCiAgICAgICAgICAgIF9iZXN0W3BheV9nZW1dW2J1eV9nZW1dID0gX3JhbmtbaWRdLnByZXY7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3JhbmtbaWRdLnByZXYgIT0gMCkgewogICAgICAgICAgICAvL29mZmVyc1tpZF0gaXMgbm90IHRoZSBsb3dlc3Qgb2ZmZXIKICAgICAgICAgICAgX3JhbmtbX3JhbmtbaWRdLnByZXZdLm5leHQgPSBfcmFua1tpZF0ubmV4dDsKICAgICAgICB9CgogICAgICAgIF9zcGFuW3BheV9nZW1dW2J1eV9nZW1dLS07CiAgICAgICAgZGVsZXRlIF9yYW5rW2lkXTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8vSGlkZSBvZmZlciBmcm9tIHRoZSB1bnNvcnRlZCBvcmRlciBib29rIChkb2VzIG5vdCBjYW5jZWwgb2ZmZXIpCiAgICBmdW5jdGlvbiBfaGlkZSgKICAgICAgICB1aW50IGlkICAgICAvL2lkIG9mIG1ha2VyIG9mZmVyIHRvIHJlbW92ZSBmcm9tIHVuc29ydGVkIGxpc3QKICAgICkKICAgIGludGVybmFsCiAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHVpbnQgdWlkID0gX2hlYWQ7ICAgICAgICAgICAgICAgLy9pZCBvZiBhbiBvZmZlciBpbiB1bnNvcnRlZCBvZmZlcnMgbGlzdCAKICAgICAgICB1aW50IHByZSA9IHVpZDsgICAgICAgICAgICAgICAgIC8vaWQgb2YgcHJldmlvdXMgb2ZmZXIgaW4gdW5zb3J0ZWQgb2ZmZXJzIGxpc3QKCiAgICAgICAgcmVxdWlyZSghaXNPZmZlclNvcnRlZChpZCkpOyAgICAvL21ha2Ugc3VyZSBvZmZlciBpZCBpcyBub3QgaW4gc29ydGVkIG9mZmVycyBsaXN0CgogICAgICAgIGlmIChfaGVhZCA9PSBpZCkgeyAgICAgICAgICAgICAgLy9jaGVjayBpZiBvZmZlciBpcyBmaXJzdCBvZmZlciBpbiB1bnNvcnRlZCBvZmZlcnMgbGlzdAogICAgICAgICAgICBfaGVhZCA9IF9uZWFyW2lkXTsgICAgICAgICAgLy9zZXQgaGVhZCB0byBuZXcgZmlyc3QgdW5zb3J0ZWQgb2ZmZXIKICAgICAgICAgICAgX25lYXJbaWRdID0gMDsgICAgICAgICAgICAgIC8vZGVsZXRlIG9yZGVyIGZyb20gdW5zb3J0ZWQgb3JkZXIgbGlzdAogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKHVpZCA+IDAgJiYgdWlkICE9IGlkKSB7ICAvL2ZpbmQgb2ZmZXIgaW4gdW5zb3J0ZWQgb3JkZXIgbGlzdAogICAgICAgICAgICBwcmUgPSB1aWQ7CiAgICAgICAgICAgIHVpZCA9IF9uZWFyW3VpZF07CiAgICAgICAgfQogICAgICAgIGlmICh1aWQgIT0gaWQpIHsgICAgICAgICAgICAgICAgLy9kaWQgbm90IGZpbmQgb2ZmZXIgaWQgaW4gdW5zb3J0ZWQgb2ZmZXJzIGxpc3QKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBfbmVhcltwcmVdID0gX25lYXJbaWRdOyAgICAgICAgIC8vc2V0IHByZXZpb3VzIHVuc29ydGVkIG9mZmVyIHRvIHBvaW50IHRvIG9mZmVyIGFmdGVyIG9mZmVyIGlkCiAgICAgICAgX25lYXJbaWRdID0gMDsgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSBvcmRlciBmcm9tIHVuc29ydGVkIG9yZGVyIGxpc3QKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
