Class {
	#name : #SRT2a3967d9b88c11612503d45411c7d07a13554250,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2a3967d9b88c11612503d45411c7d07a13554250 >> base64 [
	^ 'Y29udHJhY3QgTWFya2V0IHsKCiAgc3RydWN0IE9wdGlvbiB7CiAgICBpbnQgc3RyaWtlOwogIH0KICBzdHJ1Y3QgUG9zaXRpb24gewogICAgbWFwcGluZyh1aW50ID0+IGludCkgcG9zaXRpb25zOwogICAgaW50IGNhc2g7CiAgICBib29sIGV4cGlyZWQ7CiAgICBib29sIGhhc1Bvc2l0aW9uOwogIH0KICBzdHJ1Y3QgT3B0aW9uQ2hhaW4gewogICAgdWludCBleHBpcmF0aW9uOwogICAgc3RyaW5nIHVuZGVybHlpbmc7CiAgICB1aW50IG1hcmdpbjsKICAgIHVpbnQgcmVhbGl0eUlEOwogICAgYnl0ZXMzMiBmYWN0SGFzaDsKICAgIGFkZHJlc3MgZXRoQWRkcjsKICAgIG1hcHBpbmcodWludCA9PiBPcHRpb24pIG9wdGlvbnM7CiAgICB1aW50IG51bU9wdGlvbnM7CiAgICBib29sIGV4cGlyZWQ7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gUG9zaXRpb24pIHBvc2l0aW9uczsKICAgIHVpbnQgbnVtUG9zaXRpb25zOwogICAgdWludCBudW1Qb3NpdGlvbnNFeHBpcmVkOwogIH0KICBtYXBwaW5nKHVpbnQgPT4gT3B0aW9uQ2hhaW4pIG9wdGlvbkNoYWluczsKICB1aW50IG51bU9wdGlvbkNoYWluczsKICBzdHJ1Y3QgQWNjb3VudCB7CiAgICBhZGRyZXNzIHVzZXI7CiAgICBpbnQgY2FwaXRhbDsKICB9CiAgbWFwcGluZyhieXRlczMyID0+IGludCkgb3JkZXJGaWxsczsgLy9rZWVwcyB0cmFjayBvZiBjdW11bGF0aXZlIG9yZGVyIGZpbGxzCiAgc3RydWN0IE1hcmtldE1ha2VyIHsKICAgIGFkZHJlc3MgdXNlcjsKICAgIHN0cmluZyBzZXJ2ZXI7CiAgfQogIG1hcHBpbmcodWludCA9PiBNYXJrZXRNYWtlcikgbWFya2V0TWFrZXJzOyAvL3N0YXJ0cyBhdCAxCiAgdWludCBwdWJsaWMgbnVtTWFya2V0TWFrZXJzID0gMDsKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgbWFya2V0TWFrZXJJRHM7CiAgbWFwcGluZyh1aW50ID0+IEFjY291bnQpIGFjY291bnRzOwogIHVpbnQgbnVtQWNjb3VudHM7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGFjY291bnRJRHM7IC8vc3RhcnRzIGF0IDEKCiAgZnVuY3Rpb24gTWFya2V0KCkgewogIH0KCiAgZnVuY3Rpb24gYWRkRnVuZHMoKSB7CiAgICBpZiAoYWNjb3VudElEc1ttc2cuc2VuZGVyXT4wKSB7CiAgICAgIGFjY291bnRzW2FjY291bnRJRHNbbXNnLnNlbmRlcl1dLmNhcGl0YWwgKz0gaW50KG1zZy52YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICB1aW50IGFjY291bnRJRCA9ICsrbnVtQWNjb3VudHM7CiAgICAgIGFjY291bnRzW2FjY291bnRJRF0udXNlciA9IG1zZy5zZW5kZXI7CiAgICAgIGFjY291bnRzW2FjY291bnRJRF0uY2FwaXRhbCArPSBpbnQobXNnLnZhbHVlKTsKICAgICAgYWNjb3VudElEc1ttc2cuc2VuZGVyXSA9IGFjY291bnRJRDsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHdpdGhkcmF3RnVuZHModWludCBhbW91bnQpIHsKICAgIGlmIChhY2NvdW50SURzW21zZy5zZW5kZXJdPjApIHsKICAgICAgaWYgKGludChhbW91bnQpPD1nZXRGdW5kcyhtc2cuc2VuZGVyLCB0cnVlKSAmJiBpbnQoYW1vdW50KT4wKSB7CiAgICAgICAgYWNjb3VudHNbYWNjb3VudElEc1ttc2cuc2VuZGVyXV0uY2FwaXRhbCAtPSBpbnQoYW1vdW50KTsKICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYW1vdW50KTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2V0RnVuZHMoYWRkcmVzcyB1c2VyLCBib29sIG9ubHlBdmFpbGFibGUpIGNvbnN0YW50IHJldHVybnMoaW50KSB7CiAgICBpZiAoYWNjb3VudElEc1t1c2VyXT4wKSB7CiAgICAgIGlmIChvbmx5QXZhaWxhYmxlID09IGZhbHNlKSB7CiAgICAgICAgcmV0dXJuIGFjY291bnRzW2FjY291bnRJRHNbdXNlcl1dLmNhcGl0YWw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGFjY291bnRzW2FjY291bnRJRHNbdXNlcl1dLmNhcGl0YWwgKyBnZXRNYXhMb3NzQWZ0ZXJUcmFkZSh1c2VyLCAwLCAwLCAwLCAwKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRGdW5kc0FuZEF2YWlsYWJsZShhZGRyZXNzIHVzZXIpIGNvbnN0YW50IHJldHVybnMoaW50LCBpbnQpIHsKICAgIHJldHVybiAoZ2V0RnVuZHModXNlciwgZmFsc2UpLCBnZXRGdW5kcyh1c2VyLCB0cnVlKSk7CiAgfQoKICBmdW5jdGlvbiBtYXJrZXRNYWtlcihzdHJpbmcgc2VydmVyKSB7CiAgICBpZiAobXNnLnZhbHVlPjApIHRocm93OwogICAgaWYgKG1hcmtldE1ha2VySURzW21zZy5zZW5kZXJdPjApIHsKICAgICAgbWFya2V0TWFrZXJzW21hcmtldE1ha2VySURzW21zZy5zZW5kZXJdXS5zZXJ2ZXIgPSBzZXJ2ZXI7CiAgICB9IGVsc2UgewogICAgICBpbnQgZnVuZHMgPSBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpOwogICAgICB1aW50IG1hcmtldE1ha2VySUQgPSAwOwogICAgICBpZiAobnVtTWFya2V0TWFrZXJzPDYpIHsKICAgICAgICBtYXJrZXRNYWtlcklEID0gKytudW1NYXJrZXRNYWtlcnM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yICh1aW50IGk9MjsgaTw9bnVtTWFya2V0TWFrZXJzOyBpKyspIHsKICAgICAgICAgIGlmIChnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpPD1mdW5kcyAmJiAobWFya2V0TWFrZXJJRD09MCB8fCBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpPGdldEZ1bmRzKG1hcmtldE1ha2Vyc1ttYXJrZXRNYWtlcklEXS51c2VyLCBmYWxzZSkpKSB7CiAgICAgICAgICAgIG1hcmtldE1ha2VySUQgPSBpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAobWFya2V0TWFrZXJJRD4wKSB7CiAgICAgICAgbWFya2V0TWFrZXJJRHNbbWFya2V0TWFrZXJzW21hcmtldE1ha2VySURdLnVzZXJdID0gMDsKICAgICAgICBtYXJrZXRNYWtlcnNbbWFya2V0TWFrZXJJRF0udXNlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgbWFya2V0TWFrZXJzW21hcmtldE1ha2VySURdLnNlcnZlciA9IHNlcnZlcjsKICAgICAgICBtYXJrZXRNYWtlcklEc1ttc2cuc2VuZGVyXSA9IG1hcmtldE1ha2VySUQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3c7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldE1hcmtldE1ha2VycygpIGNvbnN0YW50IHJldHVybnMoc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZykgewogICAgc3RyaW5nW10gbWVtb3J5IHNlcnZlcnMgPSBuZXcgc3RyaW5nW10oNik7CiAgICBmb3IgKHVpbnQgaT0xOyBpPD1udW1NYXJrZXRNYWtlcnM7IGkrKykgewogICAgICBzZXJ2ZXJzW2ktMV0gPSBtYXJrZXRNYWtlcnNbaV0uc2VydmVyOwogICAgfQogICAgcmV0dXJuIChzZXJ2ZXJzWzBdLCBzZXJ2ZXJzWzFdLCBzZXJ2ZXJzWzJdLCBzZXJ2ZXJzWzNdLCBzZXJ2ZXJzWzRdLCBzZXJ2ZXJzWzVdKTsKICB9CgogIGZ1bmN0aW9uIGdldE1hcmtldE1ha2VyRnVuZHMoKSBjb25zdGFudCByZXR1cm5zKGludCwgaW50LCBpbnQsIGludCwgaW50LCBpbnQpIHsKICAgIGludFtdIG1lbW9yeSBmdW5kcyA9IG5ldyBpbnRbXSg2KTsKICAgIGZvciAodWludCBpPTE7IGk8PW51bU1hcmtldE1ha2VyczsgaSsrKSB7CiAgICAgIGZ1bmRzW2ktMV0gPSBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpOwogICAgfQogICAgcmV0dXJuIChmdW5kc1swXSwgZnVuZHNbMV0sIGZ1bmRzWzJdLCBmdW5kc1szXSwgZnVuZHNbNF0sIGZ1bmRzWzVdKTsKICB9CgogIGZ1bmN0aW9uIGdldE9wdGlvbkNoYWluKHVpbnQgb3B0aW9uQ2hhaW5JRCkgY29uc3RhbnQgcmV0dXJucyAodWludCwgc3RyaW5nLCB1aW50LCB1aW50LCBieXRlczMyLCBhZGRyZXNzKSB7CiAgICByZXR1cm4gKG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5leHBpcmF0aW9uLCBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0udW5kZXJseWluZywgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLm1hcmdpbiwgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLnJlYWxpdHlJRCwgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLmZhY3RIYXNoLCBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0uZXRoQWRkcik7CiAgfQoKICBmdW5jdGlvbiBnZXRNYXJrZXQoYWRkcmVzcyB1c2VyKSBjb25zdGFudCByZXR1cm5zKHVpbnRbXSwgaW50W10sIGludFtdLCBpbnRbXSkgewogICAgdWludFtdIG1lbW9yeSBvcHRpb25JRHMgPSBuZXcgdWludFtdKDYwKTsKICAgIGludFtdIG1lbW9yeSBzdHJpa2VzID0gbmV3IGludFtdKDYwKTsKICAgIGludFtdIG1lbW9yeSBwb3NpdGlvbnMgPSBuZXcgaW50W10oNjApOwogICAgaW50W10gbWVtb3J5IGNhc2hlcyA9IG5ldyBpbnRbXSg2MCk7CiAgICB1aW50IHogPSAwOwogICAgZm9yIChpbnQgb3B0aW9uQ2hhaW5JRD1pbnQobnVtT3B0aW9uQ2hhaW5zKS0xOyBvcHRpb25DaGFpbklEPj0wICYmIHo8NjA7IG9wdGlvbkNoYWluSUQtLSkgewogICAgICBpZiAob3B0aW9uQ2hhaW5zW3VpbnQob3B0aW9uQ2hhaW5JRCldLmV4cGlyZWQgPT0gZmFsc2UpIHsKICAgICAgICBmb3IgKHVpbnQgb3B0aW9uSUQ9MDsgb3B0aW9uSUQ8b3B0aW9uQ2hhaW5zW3VpbnQob3B0aW9uQ2hhaW5JRCldLm51bU9wdGlvbnM7IG9wdGlvbklEKyspIHsKICAgICAgICAgIG9wdGlvbklEc1t6XSA9IHVpbnQob3B0aW9uQ2hhaW5JRCkqMTAwMCArIG9wdGlvbklEOwogICAgICAgICAgc3RyaWtlc1t6XSA9IG9wdGlvbkNoYWluc1t1aW50KG9wdGlvbkNoYWluSUQpXS5vcHRpb25zW29wdGlvbklEXS5zdHJpa2U7CiAgICAgICAgICBwb3NpdGlvbnNbel0gPSBvcHRpb25DaGFpbnNbdWludChvcHRpb25DaGFpbklEKV0ucG9zaXRpb25zW3VzZXJdLnBvc2l0aW9uc1tvcHRpb25JRF07CiAgICAgICAgICBjYXNoZXNbel0gPSBvcHRpb25DaGFpbnNbdWludChvcHRpb25DaGFpbklEKV0ucG9zaXRpb25zW3VzZXJdLmNhc2g7CiAgICAgICAgICB6Kys7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gKG9wdGlvbklEcywgc3RyaWtlcywgcG9zaXRpb25zLCBjYXNoZXMpOwogIH0KCiAgZnVuY3Rpb24gZXhwaXJlKHVpbnQgYWNjb3VudElELCB1aW50IG9wdGlvbkNoYWluSUQsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzLCBieXRlczMyIHZhbHVlKSB7CiAgICBpZiAob3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLmV4cGlyZWQgPT0gZmFsc2UpIHsKICAgICAgaWYgKGVjcmVjb3ZlcihzaGEzKG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5mYWN0SGFzaCwgdmFsdWUpLCB2LCByLCBzKSA9PSBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0uZXRoQWRkcikgewogICAgICAgIHVpbnQgbGFzdEFjY291bnQgPSBudW1BY2NvdW50czsKICAgICAgICBpZiAoYWNjb3VudElEPT0wKSB7CiAgICAgICAgICBhY2NvdW50SUQgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsYXN0QWNjb3VudCA9IGFjY291bnRJRDsKICAgICAgICB9CiAgICAgICAgZm9yIChhY2NvdW50SUQ9YWNjb3VudElEOyBhY2NvdW50SUQ8PWxhc3RBY2NvdW50OyBhY2NvdW50SUQrKykgewogICAgICAgICAgaWYgKG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5wb3NpdGlvbnNbYWNjb3VudHNbYWNjb3VudElEXS51c2VyXS5leHBpcmVkID09IGZhbHNlKSB7CiAgICAgICAgICAgIGludCByZXN1bHQgPSBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucG9zaXRpb25zW2FjY291bnRzW2FjY291bnRJRF0udXNlcl0uY2FzaCAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICAgIGZvciAodWludCBvcHRpb25JRD0wOyBvcHRpb25JRDxvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtT3B0aW9uczsgb3B0aW9uSUQrKykgewogICAgICAgICAgICAgIGludCBtb25leW5lc3MgPSBnZXRNb25leW5lc3Mob3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLm9wdGlvbnNbb3B0aW9uSURdLnN0cmlrZSwgdWludCh2YWx1ZSksIG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5tYXJnaW4pOwogICAgICAgICAgICAgIHJlc3VsdCArPSBtb25leW5lc3MgKiBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucG9zaXRpb25zW2FjY291bnRzW2FjY291bnRJRF0udXNlcl0ucG9zaXRpb25zW29wdGlvbklEXSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWNjb3VudHNbYWNjb3VudElEXS5jYXBpdGFsID0gYWNjb3VudHNbYWNjb3VudElEXS5jYXBpdGFsICsgcmVzdWx0OwogICAgICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucG9zaXRpb25zW2FjY291bnRzW2FjY291bnRJRF0udXNlcl0uZXhwaXJlZCA9IHRydWU7CiAgICAgICAgICAgIG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5udW1Qb3NpdGlvbnNFeHBpcmVkKys7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtUG9zaXRpb25zRXhwaXJlZCA9PSBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtUG9zaXRpb25zKSB7CiAgICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0uZXhwaXJlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRNb25leW5lc3MoaW50IHN0cmlrZSwgdWludCBzZXR0bGVtZW50LCB1aW50IG1hcmdpbikgY29uc3RhbnQgcmV0dXJucyhpbnQpIHsKICAgIGlmIChzdHJpa2U+PTApIHsgLy9jYWxsCiAgICAgIGlmIChzZXR0bGVtZW50PnVpbnQoc3RyaWtlKSkgewogICAgICAgIGlmIChzZXR0bGVtZW50LXVpbnQoc3RyaWtlKTxtYXJnaW4pIHsKICAgICAgICAgIHJldHVybiBpbnQoc2V0dGxlbWVudC11aW50KHN0cmlrZSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gaW50KG1hcmdpbik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAwOwogICAgICB9CiAgICB9IGVsc2UgeyAvL3B1dAogICAgICBpZiAoc2V0dGxlbWVudDx1aW50KC1zdHJpa2UpKSB7CiAgICAgICAgaWYgKHVpbnQoLXN0cmlrZSktc2V0dGxlbWVudDxtYXJnaW4pIHsKICAgICAgICAgIHJldHVybiBpbnQodWludCgtc3RyaWtlKS1zZXR0bGVtZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGludChtYXJnaW4pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gYWRkT3B0aW9uQ2hhaW4odWludCBleHBpcmF0aW9uLCBzdHJpbmcgdW5kZXJseWluZywgdWludCBtYXJnaW4sIHVpbnQgcmVhbGl0eUlELCBieXRlczMyIGZhY3RIYXNoLCBhZGRyZXNzIGV0aEFkZHIsIGludFtdIHN0cmlrZXMpIHsKICAgIHVpbnQgb3B0aW9uQ2hhaW5JRCA9IDY7CiAgICBpZiAobnVtT3B0aW9uQ2hhaW5zPDYpIHsKICAgICAgb3B0aW9uQ2hhaW5JRCA9IG51bU9wdGlvbkNoYWlucysrOwogICAgfSBlbHNlIHsKICAgICAgZm9yICh1aW50IGk9MDsgaSA8IG51bU9wdGlvbkNoYWlucyAmJiBvcHRpb25DaGFpbklEPj02OyBpKyspIHsKICAgICAgICBpZiAob3B0aW9uQ2hhaW5zW2ldLmV4cGlyZWQ9PXRydWUgfHwgb3B0aW9uQ2hhaW5zW2ldLm51bVBvc2l0aW9ucz09MCB8fCBvcHRpb25DaGFpbnNbaV0ubnVtT3B0aW9ucz09MCkgewogICAgICAgICAgb3B0aW9uQ2hhaW5JRCA9IGk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAob3B0aW9uQ2hhaW5JRDw2KSB7CiAgICAgIGRlbGV0ZSBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF07CiAgICAgIG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5leHBpcmF0aW9uID0gZXhwaXJhdGlvbjsKICAgICAgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLnVuZGVybHlpbmcgPSB1bmRlcmx5aW5nOwogICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubWFyZ2luID0gbWFyZ2luOwogICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucmVhbGl0eUlEID0gcmVhbGl0eUlEOwogICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0uZmFjdEhhc2ggPSBmYWN0SGFzaDsKICAgICAgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLmV0aEFkZHIgPSBldGhBZGRyOwogICAgICBmb3IgKGk9MDsgaSA8IHN0cmlrZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAob3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLm51bU9wdGlvbnM8MTApIHsKICAgICAgICAgIHVpbnQgb3B0aW9uSUQgPSBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtT3B0aW9ucysrOwogICAgICAgICAgT3B0aW9uIG9wdGlvbiA9IG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5vcHRpb25zW2ldOwogICAgICAgICAgb3B0aW9uLnN0cmlrZSA9IHN0cmlrZXNbaV07CiAgICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ub3B0aW9uc1tpXSA9IG9wdGlvbjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIG9yZGVyTWF0Y2hUZXN0KHVpbnQgb3B0aW9uQ2hhaW5JRCwgdWludCBvcHRpb25JRCwgdWludCBwcmljZSwgaW50IHNpemUsIHVpbnQgb3JkZXJJRCwgdWludCBibG9ja0V4cGlyZXMsIGFkZHJlc3MgYWRkciwgYWRkcmVzcyBzZW5kZXIsIGludCBtYXRjaFNpemUpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgaWYgKGJsb2NrLm51bWJlcjw9YmxvY2tFeHBpcmVzICYmICgoc2l6ZT4wICYmIG1hdGNoU2l6ZTwwICYmIG9yZGVyRmlsbHNbc2hhMyhvcHRpb25DaGFpbklELCBvcHRpb25JRCwgcHJpY2UsIHNpemUsIG9yZGVySUQsIGJsb2NrRXhwaXJlcyldLW1hdGNoU2l6ZTw9c2l6ZSkgfHwgKHNpemU8MCAmJiBtYXRjaFNpemU+MCAmJiBvcmRlckZpbGxzW3NoYTMob3B0aW9uQ2hhaW5JRCwgb3B0aW9uSUQsIHByaWNlLCBzaXplLCBvcmRlcklELCBibG9ja0V4cGlyZXMpXS1tYXRjaFNpemU+PXNpemUpKSAmJiBnZXRGdW5kcyhhZGRyLCBmYWxzZSkrZ2V0TWF4TG9zc0FmdGVyVHJhZGUoYWRkciwgb3B0aW9uQ2hhaW5JRCwgb3B0aW9uSUQsIC1tYXRjaFNpemUsIG1hdGNoU2l6ZSAqIGludChwcmljZSkpPjAgJiYgZ2V0RnVuZHMoc2VuZGVyLCBmYWxzZSkrZ2V0TWF4TG9zc0FmdGVyVHJhZGUoc2VuZGVyLCBvcHRpb25DaGFpbklELCBvcHRpb25JRCwgbWF0Y2hTaXplLCAtbWF0Y2hTaXplICogaW50KHByaWNlKSk+MCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIG9yZGVyTWF0Y2godWludCBvcHRpb25DaGFpbklELCB1aW50IG9wdGlvbklELCB1aW50IHByaWNlLCBpbnQgc2l6ZSwgdWludCBvcmRlcklELCB1aW50IGJsb2NrRXhwaXJlcywgYWRkcmVzcyBhZGRyLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcywgaW50IG1hdGNoU2l6ZSkgewogICAgYnl0ZXMzMiBoYXNoID0gc2hhMjU2KG9wdGlvbkNoYWluSUQsIG9wdGlvbklELCBwcmljZSwgc2l6ZSwgb3JkZXJJRCwgYmxvY2tFeHBpcmVzKTsKICAgIGlmIChlY3JlY292ZXIoaGFzaCwgdiwgciwgcykgPT0gYWRkciAmJiBibG9jay5udW1iZXI8PWJsb2NrRXhwaXJlcyAmJiAoKHNpemU+MCAmJiBtYXRjaFNpemU8MCAmJiBvcmRlckZpbGxzW2hhc2hdLW1hdGNoU2l6ZTw9c2l6ZSkgfHwgKHNpemU8MCAmJiBtYXRjaFNpemU+MCAmJiBvcmRlckZpbGxzW2hhc2hdLW1hdGNoU2l6ZT49c2l6ZSkpICYmIGdldEZ1bmRzKGFkZHIsIGZhbHNlKStnZXRNYXhMb3NzQWZ0ZXJUcmFkZShhZGRyLCBvcHRpb25DaGFpbklELCBvcHRpb25JRCwgLW1hdGNoU2l6ZSwgbWF0Y2hTaXplICogaW50KHByaWNlKSk+MCAmJiBnZXRGdW5kcyhtc2cuc2VuZGVyLCBmYWxzZSkrZ2V0TWF4TG9zc0FmdGVyVHJhZGUobXNnLnNlbmRlciwgb3B0aW9uQ2hhaW5JRCwgb3B0aW9uSUQsIG1hdGNoU2l6ZSwgLW1hdGNoU2l6ZSAqIGludChwcmljZSkpPjApIHsKICAgICAgaWYgKG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5wb3NpdGlvbnNbbXNnLnNlbmRlcl0uaGFzUG9zaXRpb24gPT0gZmFsc2UpIHsKICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucG9zaXRpb25zW21zZy5zZW5kZXJdLmhhc1Bvc2l0aW9uID0gdHJ1ZTsKICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtUG9zaXRpb25zKys7CiAgICAgIH0KICAgICAgaWYgKG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5wb3NpdGlvbnNbYWRkcl0uaGFzUG9zaXRpb24gPT0gZmFsc2UpIHsKICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ucG9zaXRpb25zW2FkZHJdLmhhc1Bvc2l0aW9uID0gdHJ1ZTsKICAgICAgICBvcHRpb25DaGFpbnNbb3B0aW9uQ2hhaW5JRF0ubnVtUG9zaXRpb25zKys7CiAgICAgIH0KICAgICAgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLnBvc2l0aW9uc1ttc2cuc2VuZGVyXS5wb3NpdGlvbnNbb3B0aW9uSURdICs9IG1hdGNoU2l6ZTsKICAgICAgb3B0aW9uQ2hhaW5zW29wdGlvbkNoYWluSURdLnBvc2l0aW9uc1ttc2cuc2VuZGVyXS5jYXNoIC09IG1hdGNoU2l6ZSAqIGludChwcmljZSk7CiAgICAgIG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5wb3NpdGlvbnNbYWRkcl0ucG9zaXRpb25zW29wdGlvbklEXSAtPSBtYXRjaFNpemU7CiAgICAgIG9wdGlvbkNoYWluc1tvcHRpb25DaGFpbklEXS5wb3NpdGlvbnNbYWRkcl0uY2FzaCArPSBtYXRjaFNpemUgKiBpbnQocHJpY2UpOwogICAgICBvcmRlckZpbGxzW2hhc2hdIC09IG1hdGNoU2l6ZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldE1heExvc3NBZnRlclRyYWRlKGFkZHJlc3MgdXNlciwgdWludCBvcHRpb25DaGFpbklELCB1aW50IG9wdGlvbklELCBpbnQgcG9zaXRpb25DaGFuZ2UsIGludCBjYXNoQ2hhbmdlKSBjb25zdGFudCByZXR1cm5zKGludCkgewogICAgaW50IHRvdGFsTWF4TG9zcyA9IDA7CiAgICBmb3IgKHVpbnQgaT0wOyBpPG51bU9wdGlvbkNoYWluczsgaSsrKSB7CiAgICAgIGlmIChvcHRpb25DaGFpbnNbaV0ucG9zaXRpb25zW3VzZXJdLmV4cGlyZWQgPT0gZmFsc2UgJiYgb3B0aW9uQ2hhaW5zW2ldLm51bU9wdGlvbnM+MCkgewogICAgICAgIGJvb2wgbWF4TG9zc0luaXRpYWxpemVkID0gZmFsc2U7CiAgICAgICAgaW50IG1heExvc3MgPSAwOwogICAgICAgIGZvciAodWludCBzPTA7IHM8b3B0aW9uQ2hhaW5zW2ldLm51bU9wdGlvbnM7IHMrKykgewogICAgICAgICAgaW50IHBubCA9IG9wdGlvbkNoYWluc1tpXS5wb3NpdGlvbnNbdXNlcl0uY2FzaCAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICBpZiAoaT09b3B0aW9uQ2hhaW5JRCkgewogICAgICAgICAgICBwbmwgKz0gY2FzaENoYW5nZSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICB1aW50IHNldHRsZW1lbnQgPSAwOwogICAgICAgICAgaWYgKG9wdGlvbkNoYWluc1tpXS5vcHRpb25zW3NdLnN0cmlrZTwwKSB7CiAgICAgICAgICAgIHNldHRsZW1lbnQgPSB1aW50KC1vcHRpb25DaGFpbnNbaV0ub3B0aW9uc1tzXS5zdHJpa2UpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2V0dGxlbWVudCA9IHVpbnQob3B0aW9uQ2hhaW5zW2ldLm9wdGlvbnNbc10uc3RyaWtlKTsKICAgICAgICAgIH0KICAgICAgICAgIHBubCArPSBtb25leVN1bUF0U2V0dGxlbWVudCh1c2VyLCBvcHRpb25DaGFpbklELCBvcHRpb25JRCwgcG9zaXRpb25DaGFuZ2UsIGksIHNldHRsZW1lbnQpOwogICAgICAgICAgaWYgKHBubDxtYXhMb3NzIHx8IG1heExvc3NJbml0aWFsaXplZD09ZmFsc2UpIHsKICAgICAgICAgICAgbWF4TG9zc0luaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgbWF4TG9zcyA9IHBubDsKICAgICAgICAgIH0KICAgICAgICAgIHBubCA9IG9wdGlvbkNoYWluc1tpXS5wb3NpdGlvbnNbdXNlcl0uY2FzaCAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICBpZiAoaT09b3B0aW9uQ2hhaW5JRCkgewogICAgICAgICAgICBwbmwgKz0gY2FzaENoYW5nZSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICB9CiAgICAgICAgICBzZXR0bGVtZW50ID0gMDsKICAgICAgICAgIGlmIChvcHRpb25DaGFpbnNbaV0ub3B0aW9uc1tzXS5zdHJpa2U8MCkgewogICAgICAgICAgICBpZiAodWludCgtb3B0aW9uQ2hhaW5zW2ldLm9wdGlvbnNbc10uc3RyaWtlKT5vcHRpb25DaGFpbnNbaV0ubWFyZ2luKSB7CiAgICAgICAgICAgICAgc2V0dGxlbWVudCA9IHVpbnQoLW9wdGlvbkNoYWluc1tpXS5vcHRpb25zW3NdLnN0cmlrZSktb3B0aW9uQ2hhaW5zW2ldLm1hcmdpbjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZXR0bGVtZW50ID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2V0dGxlbWVudCA9IHVpbnQob3B0aW9uQ2hhaW5zW2ldLm9wdGlvbnNbc10uc3RyaWtlKStvcHRpb25DaGFpbnNbaV0ubWFyZ2luOwogICAgICAgICAgfQogICAgICAgICAgcG5sICs9IG1vbmV5U3VtQXRTZXR0bGVtZW50KHVzZXIsIG9wdGlvbkNoYWluSUQsIG9wdGlvbklELCBwb3NpdGlvbkNoYW5nZSwgaSwgc2V0dGxlbWVudCk7CiAgICAgICAgICBpZiAocG5sPG1heExvc3MpIHsKICAgICAgICAgICAgbWF4TG9zcyA9IHBubDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdG90YWxNYXhMb3NzICs9IG1heExvc3M7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0b3RhbE1heExvc3M7CiAgfQoKICBmdW5jdGlvbiBtb25leVN1bUF0U2V0dGxlbWVudChhZGRyZXNzIHVzZXIsIHVpbnQgb3B0aW9uQ2hhaW5JRCwgdWludCBvcHRpb25JRCwgaW50IHBvc2l0aW9uQ2hhbmdlLCB1aW50IGksIHVpbnQgc2V0dGxlbWVudCkgaW50ZXJuYWwgcmV0dXJucyhpbnQpIHsKICAgIGludCBwbmwgPSAwOwogICAgZm9yICh1aW50IGo9MDsgajxvcHRpb25DaGFpbnNbaV0ubnVtT3B0aW9uczsgaisrKSB7CiAgICAgIHBubCArPSBvcHRpb25DaGFpbnNbaV0ucG9zaXRpb25zW3VzZXJdLnBvc2l0aW9uc1tqXSAqIGdldE1vbmV5bmVzcyhvcHRpb25DaGFpbnNbaV0ub3B0aW9uc1tqXS5zdHJpa2UsIHNldHRsZW1lbnQsIG9wdGlvbkNoYWluc1tpXS5tYXJnaW4pIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgICAgaWYgKGk9PW9wdGlvbkNoYWluSUQgJiYgaj09b3B0aW9uSUQpIHsKICAgICAgICBwbmwgKz0gcG9zaXRpb25DaGFuZ2UgKiBnZXRNb25leW5lc3Mob3B0aW9uQ2hhaW5zW2ldLm9wdGlvbnNbal0uc3RyaWtlLCBzZXR0bGVtZW50LCBvcHRpb25DaGFpbnNbaV0ubWFyZ2luKSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwbmw7CiAgfQoKICBmdW5jdGlvbiBtaW4odWludCBhLCB1aW50IGIpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgaWYgKGE8YikgewogICAgICByZXR1cm4gYTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBiOwogICAgfQogIH0KfQ=='.
	

]
