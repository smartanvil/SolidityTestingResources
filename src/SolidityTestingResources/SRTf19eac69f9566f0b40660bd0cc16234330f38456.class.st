Class {
	#name : #SRTf19eac69f9566f0b40660bd0cc16234330f38456,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf19eac69f9566f0b40660bd0cc16234330f38456 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogICAgLyoqCiAgICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgICAqIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKCiAgICAvKioKICAgICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgICAqLwogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBDcmFmdFJTdGFuZGFyZAogKiBAZGV2IHRoZSBpbnRlcmZhY2Ugb2YgQ3JhZnRSU3RhbmRhcmQKICovCmNvbnRyYWN0IENyYWZ0UlN0YW5kYXJkIHsKICAgIHVpbnQyNTYgcHVibGljIHN0YWtlU3RhcnRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgc3Rha2VNaW5BZ2U7CiAgICB1aW50MjU2IHB1YmxpYyBzdGFrZU1heEFnZTsKICAgIGZ1bmN0aW9uIHBvcygpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gY29pbkFnZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gYW5udWFsUG9zKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBfYWRkcmVzcywgdWludCBfcmV3YXJkKTsKfQoKCmNvbnRyYWN0IENyYWZ0UiBpcyBFUkMyMCxDcmFmdFJTdGFuZGFyZCxPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJDcmFmdFIiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQ1JBRlRSIjsKICAgIHVpbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludCBwdWJsaWMgY2hhaW5TdGFydFRpbWU7IC8vY2hhaW4gc3RhcnQgdGltZQogICAgdWludCBwdWJsaWMgY2hhaW5TdGFydEJsb2NrTnVtYmVyOyAvL2NoYWluIHN0YXJ0IGJsb2NrIG51bWJlcgogICAgdWludCBwdWJsaWMgc3Rha2VTdGFydFRpbWU7IC8vc3Rha2Ugc3RhcnQgdGltZQogICAgdWludCBwdWJsaWMgc3Rha2VNaW5BZ2UgPSAxIGRheXM7IC8vIG1pbmltdW0gYWdlIGZvciBjb2luIGFnZTogMUQKICAgIHVpbnQgcHVibGljIHN0YWtlTWF4QWdlID0gOTAgZGF5czsgLy8gc3Rha2UgYWdlIG9mIGZ1bGwgd2VpZ2h0OiA5MEQKICAgIHVpbnQgcHVibGljIG1heE1pbnRQcm9vZk9mU3Rha2UgPSAxMCoqMTc7IC8vIGRlZmF1bHQgMTAlIGFubnVhbCBpbnRlcmVzdAoKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgdWludCBwdWJsaWMgbWF4VG90YWxTdXBwbHk7CiAgICB1aW50IHB1YmxpYyB0b3RhbEluaXRpYWxTdXBwbHk7CgogICAgc3RydWN0IHRyYW5zZmVySW5TdHJ1Y3R7CiAgICB1aW50MTI4IGFtb3VudDsKICAgIHVpbnQ2NCB0aW1lOwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHRyYW5zZmVySW5TdHJ1Y3RbXSkgdHJhbnNmZXJJbnM7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICAgICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSBzaXplICsgNCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBjYW5Qb1NNaW50KCkgewogICAgICAgIHJlcXVpcmUodG90YWxTdXBwbHkgPCBtYXhUb3RhbFN1cHBseSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBDcmFmdFIoKSB7CiAgICAgICAgbWF4VG90YWxTdXBwbHkgPSAxMDAqMTAqKjI0OyAvLyAxMDAgTWlsLgogICAgICAgIHRvdGFsSW5pdGlhbFN1cHBseSA9IDMzMyoxMCoqMjM7IC8vIDMzLjMgTWlsLiAoMzAlKQoKICAgICAgICBjaGFpblN0YXJ0VGltZSA9IG5vdzsKICAgICAgICBjaGFpblN0YXJ0QmxvY2tOdW1iZXIgPSBibG9jay5udW1iZXI7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxJbml0aWFsU3VwcGx5OwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxJbml0aWFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gX3RvKSByZXR1cm4gcG9zKCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgaWYodHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ubGVuZ3RoID4gMCkgZGVsZXRlIHRyYW5zZmVySW5zW21zZy5zZW5kZXJdOwogICAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgICAgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoYmFsYW5jZXNbbXNnLnNlbmRlcl0pLF9ub3cpKTsKICAgICAgICB0cmFuc2Zlckluc1tfdG9dLnB1c2godHJhbnNmZXJJblN0cnVjdCh1aW50MTI4KF92YWx1ZSksX25vdykpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICBpZih0cmFuc2Zlckluc1tfZnJvbV0ubGVuZ3RoID4gMCkgZGVsZXRlIHRyYW5zZmVySW5zW19mcm9tXTsKICAgICAgICB1aW50NjQgX25vdyA9IHVpbnQ2NChub3cpOwogICAgICAgIHRyYW5zZmVySW5zW19mcm9tXS5wdXNoKHRyYW5zZmVySW5TdHJ1Y3QodWludDEyOChiYWxhbmNlc1tfZnJvbV0pLF9ub3cpKTsKICAgICAgICB0cmFuc2Zlckluc1tfdG9dLnB1c2godHJhbnNmZXJJblN0cnVjdCh1aW50MTI4KF92YWx1ZSksX25vdykpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHBvcygpIGNhblBvU01pbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmKGJhbGFuY2VzW21zZy5zZW5kZXJdIDw9IDApIHJldHVybiBmYWxzZTsKICAgICAgICBpZih0cmFuc2Zlckluc1ttc2cuc2VuZGVyXS5sZW5ndGggPD0gMCkgcmV0dXJuIGZhbHNlOwoKICAgICAgICB1aW50IHJld2FyZCA9IGdldFBvc1Jld2FyZChtc2cuc2VuZGVyKTsKICAgICAgICBpZihyZXdhcmQgPD0gMCkgcmV0dXJuIGZhbHNlOwoKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChyZXdhcmQpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHJld2FyZCk7CiAgICAgICAgZGVsZXRlIHRyYW5zZmVySW5zW21zZy5zZW5kZXJdOwogICAgICAgIHRyYW5zZmVySW5zW21zZy5zZW5kZXJdLnB1c2godHJhbnNmZXJJblN0cnVjdCh1aW50MTI4KGJhbGFuY2VzW21zZy5zZW5kZXJdKSx1aW50NjQobm93KSkpOwoKICAgICAgICBNaW50KG1zZy5zZW5kZXIsIHJld2FyZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QmxvY2tOdW1iZXIoKSByZXR1cm5zICh1aW50IGJsb2NrTnVtYmVyKSB7CiAgICAgICAgYmxvY2tOdW1iZXIgPSBibG9jay5udW1iZXIuc3ViKGNoYWluU3RhcnRCbG9ja051bWJlcik7CiAgICB9CgogICAgZnVuY3Rpb24gY29pbkFnZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgbXlDb2luQWdlKSB7CiAgICAgICAgbXlDb2luQWdlID0gZ2V0Q29pbkFnZShtc2cuc2VuZGVyLG5vdyk7CiAgICB9CgogICAgZnVuY3Rpb24gYW5udWFsUG9zKCkgY29uc3RhbnQgcmV0dXJucyh1aW50IGludGVyZXN0KSB7CiAgICAgICAgdWludCBfbm93ID0gbm93OwogICAgICAgIGludGVyZXN0ID0gbWF4TWludFByb29mT2ZTdGFrZTsKICAgICAgICBpZigoX25vdy5zdWIoc3Rha2VTdGFydFRpbWUpKS5kaXYoMSB5ZWFycykgPT0gMCkgewogICAgICAgICAgICBpbnRlcmVzdCA9ICg3NzAgKiBtYXhNaW50UHJvb2ZPZlN0YWtlKS5kaXYoMTAwKTsKICAgICAgICB9IGVsc2UgaWYoKF9ub3cuc3ViKHN0YWtlU3RhcnRUaW1lKSkuZGl2KDEgeWVhcnMpID09IDEpewogICAgICAgICAgICBpbnRlcmVzdCA9ICg0MzUgKiBtYXhNaW50UHJvb2ZPZlN0YWtlKS5kaXYoMTAwKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UG9zUmV3YXJkKGFkZHJlc3MgX2FkZHJlc3MpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXF1aXJlKCAobm93ID49IHN0YWtlU3RhcnRUaW1lKSAmJiAoc3Rha2VTdGFydFRpbWUgPiAwKSApOwoKICAgICAgICB1aW50IF9ub3cgPSBub3c7CiAgICAgICAgdWludCBfY29pbkFnZSA9IGdldENvaW5BZ2UoX2FkZHJlc3MsIF9ub3cpOwogICAgICAgIGlmKF9jb2luQWdlIDw9IDApIHJldHVybiAwOwoKICAgICAgICB1aW50IGludGVyZXN0ID0gbWF4TWludFByb29mT2ZTdGFrZTsKICAgICAgICAvLyBEdWUgdG8gdGhlIGhpZ2ggaW50ZXJlc3QgcmF0ZSBmb3IgdGhlIGZpcnN0IHR3byB5ZWFycywgY29tcG91bmRpbmcgc2hvdWxkIGJlIHRha2VuIGludG8gYWNjb3VudC4KICAgICAgICAvLyBFZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUgPSAoMSArIChub21pbmFsIHJhdGUgLyBudW1iZXIgb2YgY29tcG91bmRpbmcgcGVyaW9kcykpIF4gKG51bWJlciBvZiBjb21wb3VuZGluZyBwZXJpb2RzKSAtIDEKICAgICAgICBpZigoX25vdy5zdWIoc3Rha2VTdGFydFRpbWUpKS5kaXYoMSB5ZWFycykgPT0gMCkgewogICAgICAgICAgICAvLyAxc3QgeWVhciBlZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUgaXMgMTAwJSB3aGVuIHdlIHNlbGVjdCB0aGUgc3Rha2VNYXhBZ2UgKDkwIGRheXMpIGFzIHRoZSBjb21wb3VuZGluZyBwZXJpb2QuCiAgICAgICAgICAgIGludGVyZXN0ID0gKDc3MCAqIG1heE1pbnRQcm9vZk9mU3Rha2UpLmRpdigxMDApOwogICAgICAgIH0gZWxzZSBpZigoX25vdy5zdWIoc3Rha2VTdGFydFRpbWUpKS5kaXYoMSB5ZWFycykgPT0gMSl7CiAgICAgICAgICAgIC8vIDJuZCB5ZWFyIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSBpcyA1MCUKICAgICAgICAgICAgaW50ZXJlc3QgPSAoNDM1ICogbWF4TWludFByb29mT2ZTdGFrZSkuZGl2KDEwMCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9jb2luQWdlICogaW50ZXJlc3QpLmRpdigzNjUgKiAoMTAqKmRlY2ltYWxzKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29pbkFnZShhZGRyZXNzIF9hZGRyZXNzLCB1aW50IF9ub3cpIGludGVybmFsIHJldHVybnMgKHVpbnQgX2NvaW5BZ2UpIHsKICAgICAgICBpZih0cmFuc2Zlckluc1tfYWRkcmVzc10ubGVuZ3RoIDw9IDApIHJldHVybiAwOwoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0cmFuc2Zlckluc1tfYWRkcmVzc10ubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiggX25vdyA8IHVpbnQodHJhbnNmZXJJbnNbX2FkZHJlc3NdW2ldLnRpbWUpLmFkZChzdGFrZU1pbkFnZSkgKSBjb250aW51ZTsKCiAgICAgICAgICAgIHVpbnQgbkNvaW5TZWNvbmRzID0gX25vdy5zdWIodWludCh0cmFuc2Zlckluc1tfYWRkcmVzc11baV0udGltZSkpOwogICAgICAgICAgICBpZiggbkNvaW5TZWNvbmRzID4gc3Rha2VNYXhBZ2UgKSBuQ29pblNlY29uZHMgPSBzdGFrZU1heEFnZTsKCiAgICAgICAgICAgIF9jb2luQWdlID0gX2NvaW5BZ2UuYWRkKHVpbnQodHJhbnNmZXJJbnNbX2FkZHJlc3NdW2ldLmFtb3VudCkgKiBuQ29pblNlY29uZHMuZGl2KDEgZGF5cykpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvd25lclNldFN0YWtlU3RhcnRUaW1lKHVpbnQgdGltZXN0YW1wKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoKHN0YWtlU3RhcnRUaW1lIDw9IDApICYmICh0aW1lc3RhbXAgPj0gY2hhaW5TdGFydFRpbWUpKTsKICAgICAgICBzdGFrZVN0YXJ0VGltZSA9IHRpbWVzdGFtcDsKICAgIH0KCiAgICBmdW5jdGlvbiBidXJuVG9rZW4odWludCBfdmFsdWUpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBkZWxldGUgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl07CiAgICAgICAgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoYmFsYW5jZXNbbXNnLnNlbmRlcl0pLHVpbnQ2NChub3cpKSk7CgogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxJbml0aWFsU3VwcGx5ID0gdG90YWxJbml0aWFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgIG1heFRvdGFsU3VwcGx5ID0gbWF4VG90YWxTdXBwbHkuc3ViKF92YWx1ZSoxMCk7CgogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgIH0KCiAgICAvKiBCYXRjaCB0b2tlbiB0cmFuc2Zlci4gVXNlZCBieSBjb250cmFjdCBjcmVhdG9yIHRvIGRpc3RyaWJ1dGUgaW5pdGlhbCB0b2tlbnMgdG8gaG9sZGVycyAqLwogICAgZnVuY3Rpb24gYmF0Y2hUcmFuc2ZlcihhZGRyZXNzW10gX3JlY2lwaWVudHMsIHVpbnRbXSBfdmFsdWVzKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoIF9yZWNpcGllbnRzLmxlbmd0aCA+IDAgJiYgX3JlY2lwaWVudHMubGVuZ3RoID09IF92YWx1ZXMubGVuZ3RoKTsKCiAgICAgICAgdWludCB0b3RhbCA9IDA7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBfdmFsdWVzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgdG90YWwgPSB0b3RhbC5hZGQoX3ZhbHVlc1tpXSk7CiAgICAgICAgfQogICAgICAgIHJlcXVpcmUodG90YWwgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgICAgICB1aW50NjQgX25vdyA9IHVpbnQ2NChub3cpOwogICAgICAgIGZvcih1aW50IGogPSAwOyBqIDwgX3JlY2lwaWVudHMubGVuZ3RoOyBqKyspewogICAgICAgICAgICBiYWxhbmNlc1tfcmVjaXBpZW50c1tqXV0gPSBiYWxhbmNlc1tfcmVjaXBpZW50c1tqXV0uYWRkKF92YWx1ZXNbal0pOwogICAgICAgICAgICB0cmFuc2Zlckluc1tfcmVjaXBpZW50c1tqXV0ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoX3ZhbHVlc1tqXSksX25vdykpOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfcmVjaXBpZW50c1tqXSwgX3ZhbHVlc1tqXSk7CiAgICAgICAgfQoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1Yih0b3RhbCk7CiAgICAgICAgaWYodHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ubGVuZ3RoID4gMCkgZGVsZXRlIHRyYW5zZmVySW5zW21zZy5zZW5kZXJdOwogICAgICAgIGlmKGJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCkgdHJhbnNmZXJJbnNbbXNnLnNlbmRlcl0ucHVzaCh0cmFuc2ZlckluU3RydWN0KHVpbnQxMjgoYmFsYW5jZXNbbXNnLnNlbmRlcl0pLF9ub3cpKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
