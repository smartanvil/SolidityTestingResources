Class {
	#name : #SRT5CeA483f2936B3F724b23682e11946Dcb225c8E5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5CeA483f2936B3F724b23682e11946Dcb225c8E5 >> base64 [
	^ ''.
	

]
