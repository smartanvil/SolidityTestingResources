Class {
	#name : #SRT5fdca7a3d3ec979dd5b2bfec2ecc6ad0fb0a87bb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5fdca7a3d3ec979dd5b2bfec2ecc6ad0fb0a87bb >> base64 [
	^ ''.
	

]
