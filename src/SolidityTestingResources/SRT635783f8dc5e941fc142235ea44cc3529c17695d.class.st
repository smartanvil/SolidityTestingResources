Class {
	#name : #SRT635783f8dc5e941fc142235ea44cc3529c17695d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT635783f8dc5e941fc142235ea44cc3529c17695d >> base64 [
	^ ''.
	

]
