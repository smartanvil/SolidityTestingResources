Class {
	#name : #SRT1fb181d0bae620c696ed0d2e2bbb532cb3f845b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1fb181d0bae620c696ed0d2e2bbb532cb3f845b6 >> base64 [
	^ ''.
	

]
