Class {
	#name : #SRTeb90dca0adfabfe9571012bc1f6cecd663098962,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb90dca0adfabfe9571012bc1f6cecd663098962 >> base64 [
	^ 'Ly8gUm95YWwgS2luZ2RvbSBDb2luIFRva2VuCi8vIHd3dy5yb3lhbGtpbmdkb21jb2luLmNvbQovLwovLyBSS0MgdG9rZW4gaXMgYSB2aXJ0dWFsIHRva2VuLCBnb3Zlcm5lZCBieSBFUkMyMC1jb21wYXRpYmxlIEV0aGVyZXVtIFNtYXJ0IENvbnRyYWN0IGFuZCBzZWN1cmVkIGJ5IEV0aGVyZXVtIEJsb2NrY2hhaW4KLy8gVGhlIG9mZmljaWFsIHdlYnNpdGUgaXMgaHR0cHM6Ly93d3cucm95YWxraW5nZG9tY29pbi5jb20vCi8vCi8vIFRoZSB1aW50cyBhcmUgYWxsIGluIHdlaSBhbmQgYXR0byB0b2tlbnMgKCoxMF4tMTgpCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCi8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9CgoKLyoKICogRVJDMjBCYXNpYwogKiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7Cn0KCgoKCi8qCiAqIEJhc2ljIHRva2VuCiAqIEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogIC8qCiAgICogRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sgIAogICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkgewogICAgICAgdGhyb3c7CiAgICAgfQogICAgIF87CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CiAgCn0KCgoKCi8qCiAqIEVSQzIwIGludGVyZmFjZQogKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCgoKCi8qKgogKiBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOgogKiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgQmFzaWNUb2tlbiwgRVJDMjAgewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCgovKgogKiBPd25hYmxlCiAqCiAqIEJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lci4KICogUHJvdmlkZXMgb25seU93bmVyIG1vZGlmaWVyLCB3aGljaCBwcmV2ZW50cyBmdW5jdGlvbiBmcm9tIHJ1bm5pbmcgaWYgaXQgaXMgY2FsbGVkIGJ5IGFueW9uZSBvdGhlciB0aGFuIHRoZSBvd25lci4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCmNvbnRyYWN0IFJLQ1Rva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgLy8tLS0tLS0tLS0tLS0tLSAgIEluZm8gZm9yIEVSQzIwIGV4cGxvcmVycyAgLS0tLS0tLS0tLS0tLS0tLS0vLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlJveWFsIEtpbmdkb20gQ29pbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJSS0MiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgIENvbnN0YW50cyAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCiAgICBib29sIHB1YmxpYyBjb25zdGFudCBURVNUX01PREUgPSBmYWxzZTsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGF0dG8gPSAxMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxNTAwMDAwMCAqIGF0dG87IC8vIDE1IG1sbiBSS0MuIEltcG9zc2libGUgdG8gbWludCBtb3JlIHRoYW4gdGhpcwogICAgYWRkcmVzcyBwdWJsaWMgdGVhbVdhbGxldCA9IDB4Yjc5Rjk2M2YyMDBmODVEMGUzZEQ2MEM4MkFCQjhGODBiNTg2OUNCOTsKICAgIC8vIE1hZGUgdXAgSUNPIGFkZHJlc3MgKGRlc2lnbmF0aW5nIHRoZSB0b2tlbiBwb29sIHJlc2VydmVkIGZvciBJQ08sIG5vIG9uZSBoYXMgYWNjZXNzIHRvIGl0KQogICAgYWRkcmVzcyBwdWJsaWMgaWNvX2FkZHJlc3MgPSAweDFjMDFDMDFDMDFDMDFjMDFDMDFjMDFjMDFjMDFDMDFjMDFjMDFjMDE7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJQ09fU1RBUlRfVElNRSA9IDE0OTk4MTA0MDA7CgogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBWYXJpYWJsZXMgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLwogICAgdWludCBwdWJsaWMgY3VycmVudF9zdXBwbHkgPSAwOyAvLyBIb2xkaW5nIHRoZSBudW1iZXIgb2YgYWxsIHRoZSBjb2lucyBpbiBleGlzdGVuY2UKICAgIHVpbnQgcHVibGljIGljb19zdGFydGluZ19zdXBwbHkgPSAwOyAvLyBIb3cgbWFueSBhdHRvIHRva2VucyAqd2VyZSogYXZhaWxhYmxlIGZvciBzYWxlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIElDTwogICAgdWludCBwdWJsaWMgY3VycmVudF9wcmljZV9hdHRvX3Rva2Vuc19wZXJfd2VpID0gMDsgLy8gSG9sZGluZyBjdXJyZW50IHByaWNlIChkZXRlcm1pbmVkIGJ5IHRoZSBhbGdvcml0aG0gaW4gYnV5KCkpCgogICAgLy8tLS0tLS0tLS0tLS0tICAgRmxhZ3MgZGVzY3JpYmluZyBJQ08gc3RhZ2VzICAgLS0tLS0tLS0tLS0tLS0vLwogICAgYm9vbCBwdWJsaWMgcHJlU29sZFNoYXJlc0Rpc3RyaWJ1dGVkID0gZmFsc2U7IC8vIFByZXZlbnRzIGFjY2lkZW50YWwgcmUtZGlzdHJpYnV0aW9uIG9mIHNoYXJlcwogICAgYm9vbCBwdWJsaWMgaXNJQ09PcGVuZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIGlzSUNPQ2xvc2VkID0gZmFsc2U7CiAgICAvLyAzIHN0YWdlczoKICAgIC8vIENvbnRyYWN0IGhhcyBqdXN0IGJlZW4gZGVwbG95ZWQgYW5kIGluaXRpYWxpemVkLiBpc0lDT09wZW5lZCA9PSBmYWxzZSwgaXNJQ09DbG9zZWQgPT0gZmFsc2UKICAgIC8vIElDTyBoYXMgc3RhcnRlZCwgbm93IGFueWJvZHkgY2FuIGJ1eSgpLiBpc0lDT09wZW5lZCA9PSB0cnVlLCBpc0lDT0Nsb3NlZCA9PSBmYWxzZQogICAgLy8gSUNPIGhhcyBmaW5pc2hlZCwgbm93IHRoZSB0ZWFtIGNhbiByZWNlaXZlIHRoZSBldGhlci4gaXNJQ09PcGVuZWQgPT0gZmFsc2UsIGlzSUNPQ2xvc2VkID09IHRydWUKCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgIFByZW1pdW1zICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCiAgICB1aW50W10gcHVibGljIHByZW1pdW1QYWNrczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwcmVtaXVtUGFja3NQYWlkOwoKICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgIEV2ZW50cyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KICAgIGV2ZW50IElDT09wZW5lZCgpOwogICAgZXZlbnQgSUNPQ2xvc2VkKCk7CiAgICBldmVudCBQcmljZUNoYW5nZWQodWludCBvbGRfcHJpY2UsIHVpbnQgbmV3X3ByaWNlKTsKICAgIGV2ZW50IFN1cHBseUNoYW5nZWQodWludCBzdXBwbHksIHVpbnQgb2xkX3N1cHBseSk7CiAgICBldmVudCBSS0NBY3F1aXJlZChhZGRyZXNzIGFjY291bnQsIHVpbnQgYW1vdW50X2luX3dlaSwgdWludCBhbW91bnRfaW5fcmtjKTsKCiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICAvLyBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gUktDVG9rZW4oKSB7CiAgICAgICAgLy8gU29tZSBwZXJjZW50YWdlIG9mIHRoZSB0b2tlbnMgaXMgYWxyZWFkeSByZXNlcnZlZCBieSBlYXJseSBlbXBsb3llZXMgYW5kIGludmVzdG9ycwogICAgICAgIC8vIEhlcmUgd2UncmUgaW5pdGlhbGl6aW5nIHRoZWlyIGJhbGFuY2VzCiAgICAgICAgZGlzdHJpYnV0ZVByZVNvbGRTaGFyZXMoKTsKCiAgICAgICAgLy8gU3RhcnRpbmcgcHJpY2UKICAgICAgICBjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWkgPSBjYWxjdWxhdGVDdXJyZW50UHJpY2UoMSk7CgogICAgICAgIC8vIFNvbWUgb3RoZXIgaW5pdGlhbGl6YXRpb25zCiAgICAgICAgcHJlbWl1bVBhY2tzLmxlbmd0aCA9IDA7CiAgICB9CgogICAgLy8gU2VuZGluZyBldGhlciBkaXJlY3RseSB0byB0aGUgY29udHJhY3QgaW52b2tlcyBidXkoKSBhbmQgYXNzaWducyB0b2tlbnMgdG8gdGhlIHNlbmRlcgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5KCk7CiAgICB9CgogICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgogICAgLy8gQnV5IHRva2VuIGJ5IHNlbmRpbmcgZXRoZXIgaGVyZQogICAgLy8KICAgIC8vIFByaWNlIGlzIGJlaW5nIGRldGVybWluZWQgYnkgdGhlIGFsZ29yaXRobSBpbiByZWNhbGN1bGF0ZVByaWNlKCkKICAgIC8vIFlvdSBjYW4gYWxzbyBzZW5kIHRoZSBldGhlciBkaXJlY3RseSB0byB0aGUgY29udHJhY3QgYWRkcmVzcwogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB0aHJvdzsgLy8gbm8gdG9rZW5zIGZvciB5b3UKCiAgICAgICAgLy8gT25seSB3b3JrcyBpbiB0aGUgSUNPIHN0YWdlLCBhZnRlciB0aGF0IHRoZSB0b2tlbiBpcyBnb2luZyB0byBiZSB0cmFkZWQgb24gdGhlIGV4Y2hhbmdlcwogICAgICAgIGlmICghaXNJQ09PcGVuZWQpIHRocm93OwogICAgICAgIGlmIChpc0lDT0Nsb3NlZCkgdGhyb3c7CgogICAgICAgIC8vIERlY2lkaW5nIGhvdyBtYW55IHRva2VucyBjYW4gYmUgYm91Z2h0IHdpdGggdGhlIGV0aGVyIHJlY2VpdmVkCiAgICAgICAgdWludCB0b2tlbnMgPSBnZXRBdHRvVG9rZW5zQW1vdW50UGVyV2VpSW50ZXJuYWwobXNnLnZhbHVlKTsKCiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgdG8gYnV5IG1vcmUgdGhhbiAxJSBwZXIgdHJhbnNhY3Rpb24gKHNlY3VyZXMgZnJvbSBodWdlIGludmVzdG9ycyBzd2FsbGluZyB0aGUgd2hvbGUgdGhpbmcgaW4gMSBzZWNvbmQpCiAgICAgICAgdWludCBhbGxvd2VkSW5PbmVUcmFuc2FjdGlvbiA9IGN1cnJlbnRfc3VwcGx5IC8gMTAwOwogICAgICAgIGlmICh0b2tlbnMgPiBhbGxvd2VkSW5PbmVUcmFuc2FjdGlvbikgdGhyb3c7CgogICAgICAgIC8vIEp1c3QgaW4gY2FzZQogICAgICAgIGlmICh0b2tlbnMgPiBiYWxhbmNlc1tpY29fYWRkcmVzc10pIHRocm93OwoKICAgICAgICAvLyBUcmFuc2ZlciBmcm9tIHRoZSBJQ08gcG9vbAogICAgICAgIGJhbGFuY2VzW2ljb19hZGRyZXNzXSA9IGJhbGFuY2VzW2ljb19hZGRyZXNzXS5zdWIodG9rZW5zKTsgLy8gaWYgbm90IGVub3VnaCwgd2lsbCB0aHJvdwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKHRva2Vucyk7CgogICAgICAgIC8vIEtpY2sgdGhlIHByaWNlIGNoYW5naW5nIGFsZ28KICAgICAgICB1aW50IG9sZF9wcmljZSA9IGN1cnJlbnRfcHJpY2VfYXR0b190b2tlbnNfcGVyX3dlaTsKICAgICAgICBjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWkgPSBjYWxjdWxhdGVDdXJyZW50UHJpY2UoZ2V0QXR0b1Rva2Vuc0JvdWdodEluSUNPKCkpOwogICAgICAgIGlmIChjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWkgPT0gMCkgY3VycmVudF9wcmljZV9hdHRvX3Rva2Vuc19wZXJfd2VpID0gMTsgLy8gaW4gY2FzZSBpdCBpcyB0b28gc21hbGwgdGhhdCBpdCBnZXRzIHJvdW5kZWQgdG8gemVybwogICAgICAgIGlmIChjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWkgPiBvbGRfcHJpY2UpIGN1cnJlbnRfcHJpY2VfYXR0b190b2tlbnNfcGVyX3dlaSA9IG9sZF9wcmljZTsgLy8gaW4gY2FzZSBzb21lIHdlaXJkIG92ZXJmbG93IGhhcHBlbnMKCiAgICAgICAgLy8gQnJvYWRjYXN0aW5nIHByaWNlIGNoYW5nZSBldmVudAogICAgICAgIGlmIChvbGRfcHJpY2UgIT0gY3VycmVudF9wcmljZV9hdHRvX3Rva2Vuc19wZXJfd2VpKSBQcmljZUNoYW5nZWQob2xkX3ByaWNlLCBjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWkpOwoKICAgICAgICAvLyBCcm9hZGNhc3RpbmcgdGhlIGJ1eWluZyBldmVudAogICAgICAgIFJLQ0FjcXVpcmVkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgdG9rZW5zKTsKICAgIH0KCiAgICAvLyBGb3JtdWxhIGZvciB0aGUgZHluYW1pYyBwcmljZSBjaGFuZ2UgYWxnb3JpdGhtCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50UHJpY2UodWludCBhdHRvVG9rZW5zQm91Z2h0KSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlc3VsdCkgewogICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9Zih4KSslM0QrMzk1NTAwMDAwKyUyRisoeCslMkIrMTUwMDAwKSstKzEzNgogICAgICAgIHJldHVybiAoMzk1NTAwMDAwIC8gKChhdHRvVG9rZW5zQm91Z2h0IC8gYXR0bykgKyAxNTAwMDApKS5zdWIoMTM2KTsgLy8gbWl4aW5nIHNhZmUgYW5kIHVzdWFsIG1hdGggaGVyZSBiZWNhdXNlIHRoZSBkaXZpc2lvbiB3aWxsIHRocm93IG9uIGluY29uc2lzdGVuY3kKICAgIH0KCiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICAvLyBGdW5jdGlvbnMgZm9yIHRoZSBjb250cmFjdCBvd25lcgoKICAgIGZ1bmN0aW9uIG9wZW5JQ08oKSBvbmx5T3duZXIgewogICAgICAgIGlmIChpc0lDT09wZW5lZCkgdGhyb3c7CiAgICAgICAgaWYgKGlzSUNPQ2xvc2VkKSB0aHJvdzsKICAgICAgICBpc0lDT09wZW5lZCA9IHRydWU7CgogICAgICAgIElDT09wZW5lZCgpOwogICAgfQogICAgZnVuY3Rpb24gY2xvc2VJQ08oKSBvbmx5T3duZXIgewogICAgICAgIGlmIChpc0lDT0Nsb3NlZCkgdGhyb3c7CiAgICAgICAgaWYgKCFpc0lDT09wZW5lZCkgdGhyb3c7CgogICAgICAgIGlzSUNPT3BlbmVkID0gZmFsc2U7CiAgICAgICAgaXNJQ09DbG9zZWQgPSB0cnVlOwoKICAgICAgICAvLyBSZWRpc3RyaWJ1dGUgSUNPIFRva2VucyB0aGF0IHdlcmUgbm90IGJvdWdodCBhcyB0aGUgZmlyc3QgcHJlbWl1bXMKICAgICAgICBwcmVtaXVtUGFja3MubGVuZ3RoID0gMTsKICAgICAgICBwcmVtaXVtUGFja3NbMF0gPSBiYWxhbmNlc1tpY29fYWRkcmVzc107CiAgICAgICAgYmFsYW5jZXNbaWNvX2FkZHJlc3NdID0gMDsKCiAgICAgICAgSUNPQ2xvc2VkKCk7CiAgICB9CiAgICBmdW5jdGlvbiBwdWxsRXRoZXJGcm9tQ29udHJhY3QoKSBvbmx5T3duZXIgewogICAgICAgIC8vIE9ubHkgd2hlbiBJQ08gaXMgY2xvc2VkCiAgICAgICAgaWYgKCFpc0lDT0Nsb3NlZCkgdGhyb3c7CgogICAgICAgIGlmICghdGVhbVdhbGxldC5zZW5kKHRoaXMuYmFsYW5jZSkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKICAgIC8vIFNvbWUgcGVyY2VudGFnZSBvZiB0aGUgdG9rZW5zIGlzIGFscmVhZHkgcmVzZXJ2ZWQgYnkgZWFybHkgZW1wbG95ZWVzIGFuZCBpbnZlc3RvcnMKICAgIC8vIEhlcmUgd2UncmUgaW5pdGlhbGl6aW5nIHRoZWlyIGJhbGFuY2VzCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlUHJlU29sZFNoYXJlcygpIG9ubHlPd25lciB7CiAgICAgICAgLy8gTWFraW5nIGl0IGltcG9zc2libGUgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHR3aWNlCiAgICAgICAgaWYgKHByZVNvbGRTaGFyZXNEaXN0cmlidXRlZCkgdGhyb3c7CiAgICAgICAgcHJlU29sZFNoYXJlc0Rpc3RyaWJ1dGVkID0gdHJ1ZTsKCiAgICAgICAgLy8gVmFsdWVzIGFyZSBpbiBhdHRvIHRva2VucwogICAgICAgIGJhbGFuY2VzWzB4N0EzYzg2OTYwM0UyOGIwMjQyYzEyOTQ0MGM5ZEQ5N0Y4QTViRWU4MF0gPSA3NTA4ODExICogYXR0bzsKICAgICAgICBiYWxhbmNlc1sweDI0YTU0MWRFQWUwRmM4N0M5OTBBMjA4REUyOGEyOTNmYjJBOTgyZDldID0gNDAyNTcxMiAqIGF0dG87CiAgICAgICAgYmFsYW5jZXNbMHhFY0Y4NDM0NThlNzYwNTJFNjM2M2ZGYjc4Qzc1MzVDZDg3QUEzQUIyXSA9IDMwMDI3NSAqIGF0dG87CiAgICAgICAgYmFsYW5jZXNbMHg5NDc5NjNFRDJkYTc1MGEwNzEyQUUwQkY5NkUwOEM3OTg4MTNGMjc3XSA9IDE1MDAwMCAqIGF0dG87CiAgICAgICAgYmFsYW5jZXNbMHg4MkJjODQ1MkFiNzZmQkE0NDZlMTZiNTdDMDgwRjUyNThGNTU3NzM0XSA9IDE1MDAwMCAqIGF0dG87CiAgICAgICAgYmFsYW5jZXNbMHgwOTU5RWQ0OGQ1NWU1ODBCQjU4ZGY2RTVlZTAxQkFhNzg3ZDgwODQ4XSA9IDkwMDAwICogYXR0bzsKICAgICAgICBiYWxhbmNlc1sweDUzMEE4MDE2ZkI1QjNkN0EwRjkyOTEwYjQ4MTRlMzgzODM1QmQ1MUVdID0gNzUwMDAgKiBhdHRvOwogICAgICAgIGJhbGFuY2VzWzB4QzNlOTM0RDNBREUwQWI5RjYxRjgyNGE5YTgyNDQ2MmM3OTBlNDdCMF0gPSAyMDIgKiBhdHRvOwogICAgICAgIGN1cnJlbnRfc3VwcGx5ID0gKDc1MDg4MTEgKyA0MDI1NzEyICsgMzAwMjc1ICsgMTUwMDAwICsgMTUwMDAwICsgOTAwMDAgKyA3NTAwMCArIDIwMikgKiBhdHRvOwoKICAgICAgICAvLyBTZW5kaW5nIHRoZSByZXN0IHRvIElDTyBwb29sCiAgICAgICAgYmFsYW5jZXNbaWNvX2FkZHJlc3NdID0gSU5JVElBTF9TVVBQTFkuc3ViKGN1cnJlbnRfc3VwcGx5KTsKCiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIHRoZSBzdXBwbHkgdmFyaWFibGVzCiAgICAgICAgaWNvX3N0YXJ0aW5nX3N1cHBseSA9IGJhbGFuY2VzW2ljb19hZGRyZXNzXTsKICAgICAgICBjdXJyZW50X3N1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgICAgIFN1cHBseUNoYW5nZWQoMCwgY3VycmVudF9zdXBwbHkpOwogICAgfQoKICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKICAgIC8vIFNvbWUgdXNlZnVsIGdldHRlcnMgKGFsdGhvdWdoIHlvdSBjYW4ganVzdCBxdWVyeSB0aGUgcHVibGljIHZhcmlhYmxlcykKCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50UHJpY2VBdHRvVG9rZW5zUGVyV2VpKCkgY29uc3RhbnQgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gY3VycmVudF9wcmljZV9hdHRvX3Rva2Vuc19wZXJfd2VpOwogICAgfQogICAgZnVuY3Rpb24gZ2V0QXR0b1Rva2Vuc0Ftb3VudFBlcldlaUludGVybmFsKHVpbnQgdmFsdWUpIHBheWFibGUgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gdmFsdWUgKiBjdXJyZW50X3ByaWNlX2F0dG9fdG9rZW5zX3Blcl93ZWk7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRBdHRvVG9rZW5zQW1vdW50UGVyV2VpKHVpbnQgdmFsdWUpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHZhbHVlICogY3VycmVudF9wcmljZV9hdHRvX3Rva2Vuc19wZXJfd2VpOwogICAgfQogICAgZnVuY3Rpb24gZ2V0U3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gY3VycmVudF9zdXBwbHk7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRBdHRvVG9rZW5zTGVmdEZvcklDTygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW2ljb19hZGRyZXNzXTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldEF0dG9Ub2tlbnNCb3VnaHRJbklDTygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIGljb19zdGFydGluZ19zdXBwbHkgLSBnZXRBdHRvVG9rZW5zTGVmdEZvcklDTygpOwogICAgfQogICAgZnVuY3Rpb24gZ2V0QmFsYW5jZShhZGRyZXNzIGFkZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1thZGRyXTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldFByZW1pdW1QYWNrKHVpbnQgaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcHJlbWl1bSkgewogICAgICAgIHJldHVybiBwcmVtaXVtUGFja3NbaW5kZXhdOwogICAgfQogICAgZnVuY3Rpb24gZ2V0UHJlbWl1bUNvdW50KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBsZW5ndGgpIHsKICAgICAgICByZXR1cm4gcHJlbWl1bVBhY2tzLmxlbmd0aDsKICAgIH0KICAgIGZ1bmN0aW9uIGdldEJhbGFuY2VQcmVtaXVtc1BhaWQoYWRkcmVzcyBhY2NvdW50KSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlc3VsdCkgewogICAgICAgIHJldHVybiBwcmVtaXVtUGFja3NQYWlkW2FjY291bnRdOwogICAgfQoKICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKICAgIC8vIFByZW1pdW1zCgogICAgZnVuY3Rpb24gc2VuZFByZW1pdW1QYWNrKHVpbnQgYW1vdW50KSBvbmx5T3duZXIgYWxsb3dlZFBheW1lbnRzKG1zZy5zZW5kZXIsIGFtb3VudCkgewogICAgICAgIHByZW1pdW1QYWNrcy5sZW5ndGggKz0gMTsKICAgICAgICBwcmVtaXVtUGFja3NbcHJlbWl1bVBhY2tzLmxlbmd0aC0xXSA9IGFtb3VudDsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihhbW91bnQpOyAvLyB3aWxsIHRocm93IGFuZCByZXZlcnQgdGhlIHdob2xlIHRoaW5nIGlmIGRvZXNuJ3QgaGF2ZSB0aGlzIGFtb3VudAogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVByZW1pdW1zKGFkZHJlc3MgYWNjb3VudCkgcHJpdmF0ZSB7CiAgICAgICAgaWYgKHByZW1pdW1QYWNrcy5sZW5ndGggPiBwcmVtaXVtUGFja3NQYWlkW2FjY291bnRdKSB7CiAgICAgICAgICAgIHVpbnQgc3RhcnRQYWNrSW5kZXggPSBwcmVtaXVtUGFja3NQYWlkW2FjY291bnRdOwogICAgICAgICAgICB1aW50IGZpbmlzaFBhY2tJbmRleCA9IHByZW1pdW1QYWNrcy5sZW5ndGggLSAxOwogICAgICAgICAgICBmb3IodWludCBpID0gc3RhcnRQYWNrSW5kZXg7IGkgPD0gZmluaXNoUGFja0luZGV4OyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X3N1cHBseSAhPSAwKSB7IC8vIGp1c3QgaW4gY2FzZQogICAgICAgICAgICAgICAgICAgIHVpbnQgb3dpbmcgPSBiYWxhbmNlc1thY2NvdW50XSAqIHByZW1pdW1QYWNrc1tpXSAvIGN1cnJlbnRfc3VwcGx5OwogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW2FjY291bnRdID0gYmFsYW5jZXNbYWNjb3VudF0uYWRkKG93aW5nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwcmVtaXVtUGFja3NQYWlkW2FjY291bnRdID0gcHJlbWl1bVBhY2tzLmxlbmd0aDsKICAgICAgICB9CiAgICB9CgogICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgogICAgLy8gT3ZlcnJpZGluZyBwYXltZW50IGZ1bmN0aW9ucyB0byB0YWtlIGNvbnRyb2wgb3ZlciB0aGUgbG9naWMKCiAgICBtb2RpZmllciBhbGxvd2VkUGF5bWVudHMoYWRkcmVzcyBwYXllciwgdWludCB2YWx1ZSkgewogICAgICAgIC8vIERvbid0IGFsbG93IHRvIHRyYW5zZmVyIGNvaW5zIHVudGlsIHRoZSBJQ08gZW5kcwogICAgICAgIGlmIChpc0lDT09wZW5lZCkgdGhyb3c7CiAgICAgICAgaWYgKCFpc0lDT0Nsb3NlZCkgdGhyb3c7CgogICAgICAgIC8vIExpbWl0IHRoZSBxdWljayBkdW1wIHBvc3NpYmlsaXR5CiAgICAgICAgdWludCBkaWZmID0gMDsKICAgICAgICB1aW50IGFsbG93ZWQgPSAwOwogICAgICAgIGlmIChiYWxhbmNlc1twYXllcl0gPiBjdXJyZW50X3N1cHBseSAvIDEwMCkgeyAvLyBmb3IgYmFsYW5jZXMgPiAxJSBvZiB0b3RhbCBzdXBwbHkKICAgICAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA+IElDT19TVEFSVF9USU1FKSB7CiAgICAgICAgICAgICAgICBkaWZmID0gYmxvY2sudGltZXN0YW1wIC0gSUNPX1NUQVJUX1RJTUU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkaWZmID0gSUNPX1NUQVJUX1RJTUUgLSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFsbG93ZWQgPSAoY3VycmVudF9zdXBwbHkgLyAyMCkgKiAoZGlmZiAvICg2MCAqIDYwICogMjQgKiAzMCkpOyAvLyA1JSB1bmxvY2tlZCBldmVyeSBtb250aAoKICAgICAgICAgICAgaWYgKHZhbHVlID4gYWxsb3dlZCkgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGFsbG93ZWRQYXltZW50cyhfZnJvbSwgX3ZhbHVlKSB7CiAgICAgICAgdXBkYXRlUHJlbWl1bXMoX2Zyb20pOwogICAgICAgIHVwZGF0ZVByZW1pdW1zKF90byk7CiAgICAgICAgc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIGFsbG93ZWRQYXltZW50cyhtc2cuc2VuZGVyLCBfdmFsdWUpIHsKICAgICAgICB1cGRhdGVQcmVtaXVtcyhtc2cuc2VuZGVyKTsKICAgICAgICB1cGRhdGVQcmVtaXVtcyhfdG8pOwogICAgICAgIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCn0='.
	

]
