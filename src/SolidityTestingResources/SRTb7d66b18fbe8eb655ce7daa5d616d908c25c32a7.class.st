Class {
	#name : #SRTb7d66b18fbe8eb655ce7daa5d616d908c25c32a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7d66b18fbe8eb655ce7daa5d616d908c25c32a7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBjb250cm9sbGVyOwogICAgbW9kaWZpZXIgb25seUNvbnRyb2xsZXIoKSB7CiAgICAgICAgcmVxdWlyZShpc0NvbnRyb2xsZXIobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ29udHJvbGxlZCgpIHsgY29udHJvbGxlciA9IG1zZy5zZW5kZXI7IH0KCiAgICBmdW5jdGlvbiBpc0NvbnRyb2xsZXIoYWRkcmVzcyBhZGRyKSBwdWJsaWMgcmV0dXJucyhib29sKSB7IHJldHVybiBhZGRyID09IGNvbnRyb2xsZXI7IH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VDb250cm9sbGVyKGFkZHJlc3MgbmV3Q29udHJvbGxlcikgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBpZiAobmV3Q29udHJvbGxlciAhPSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBuZXdDb250cm9sbGVyOwogICAgICAgIH0KICAgIH0KfQoKCmNvbnRyYWN0IFByb3h5IGlzIENvbnRyb2xsZWQgewogICAgZXZlbnQgTG9nRm9yd2FyZGVkIChhZGRyZXNzIGluZGV4ZWQgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpOwogICAgZXZlbnQgTG9nUmVjZWl2ZWQgKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgdmFsdWUpOwoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgeyBMb2dSZWNlaXZlZChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOyB9CgogICAgZnVuY3Rpb24gZm9yd2FyZChhZGRyZXNzIGRlc3RpbmF0aW9uLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgICAgIHJlcXVpcmUoZGVzdGluYXRpb24uY2FsbC52YWx1ZSh2YWx1ZSkoZGF0YSkpOwogICAgICAgIExvZ0ZvcndhcmRlZChkZXN0aW5hdGlvbiwgdmFsdWUsIGRhdGEpOwogICAgfQp9CgoKY29udHJhY3QgSWRlbnRpdHlNYW5hZ2VyIHsKICAgIHVpbnQgYWRtaW5UaW1lTG9jazsKICAgIHVpbnQgdXNlclRpbWVMb2NrOwogICAgdWludCBhZG1pblJhdGU7CgogICAgZXZlbnQgTG9nSWRlbnRpdHlDcmVhdGVkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBpZGVudGl0eSwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgY3JlYXRvciwKICAgICAgICBhZGRyZXNzIG93bmVyLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCByZWNvdmVyeUtleSk7CgogICAgZXZlbnQgTG9nT3duZXJBZGRlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgaWRlbnRpdHksCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIG93bmVyLAogICAgICAgIGFkZHJlc3MgaW5zdGlnYXRvcik7CgogICAgZXZlbnQgTG9nT3duZXJSZW1vdmVkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBpZGVudGl0eSwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgb3duZXIsCiAgICAgICAgYWRkcmVzcyBpbnN0aWdhdG9yKTsKCiAgICBldmVudCBMb2dSZWNvdmVyeUNoYW5nZWQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGlkZW50aXR5LAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCByZWNvdmVyeUtleSwKICAgICAgICBhZGRyZXNzIGluc3RpZ2F0b3IpOwoKICAgIGV2ZW50IExvZ01pZ3JhdGlvbkluaXRpYXRlZCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgaWRlbnRpdHksCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIG5ld0lkTWFuYWdlciwKICAgICAgICBhZGRyZXNzIGluc3RpZ2F0b3IpOwoKICAgIGV2ZW50IExvZ01pZ3JhdGlvbkNhbmNlbGVkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBpZGVudGl0eSwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgbmV3SWRNYW5hZ2VyLAogICAgICAgIGFkZHJlc3MgaW5zdGlnYXRvcik7CgogICAgZXZlbnQgTG9nTWlncmF0aW9uRmluYWxpemVkKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBpZGVudGl0eSwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgbmV3SWRNYW5hZ2VyLAogICAgICAgIGFkZHJlc3MgaW5zdGlnYXRvcik7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSkgb3duZXJzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3MpIHJlY292ZXJ5S2V5czsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkpIGxpbWl0ZXI7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIG1pZ3JhdGlvbkluaXRpYXRlZDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBhZGRyZXNzKSBwdWJsaWMgbWlncmF0aW9uTmV3QWRkcmVzczsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoYWRkcmVzcyBpZGVudGl0eSkgewogICAgICAgIHJlcXVpcmUoaXNPd25lcihpZGVudGl0eSwgbXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seU9sZGVyT3duZXIoYWRkcmVzcyBpZGVudGl0eSkgewogICAgICAgIHJlcXVpcmUoaXNPbGRlck93bmVyKGlkZW50aXR5LCBtc2cuc2VuZGVyKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5UmVjb3ZlcnkoYWRkcmVzcyBpZGVudGl0eSkgewogICAgICAgIHJlcXVpcmUocmVjb3ZlcnlLZXlzW2lkZW50aXR5XSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHJhdGVMaW1pdGVkKGFkZHJlc3MgaWRlbnRpdHkpIHsKICAgICAgICByZXF1aXJlKGxpbWl0ZXJbaWRlbnRpdHldW21zZy5zZW5kZXJdIDwgKG5vdyAtIGFkbWluUmF0ZSkpOwogICAgICAgIGxpbWl0ZXJbaWRlbnRpdHldW21zZy5zZW5kZXJdID0gbm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRBZGRyZXNzKGFkZHJlc3MgYWRkcikgeyAvL3Byb3RlY3RzIGFnYWluc3Qgc29tZSB3ZWlyZCBhdHRhY2tzCiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3Igc2V0cyBpbml0aWFsIHRpbWVsb2NrIGxpbWl0cwogICAgLy8vIEBwYXJhbSBfdXNlclRpbWVMb2NrIFRpbWUgYmVmb3JlIG5ldyBvd25lciBhZGRlZCBieSByZWNvdmVyeSBjYW4gY29udHJvbCBwcm94eQogICAgLy8vIEBwYXJhbSBfYWRtaW5UaW1lTG9jayBUaW1lIGJlZm9yZSBuZXcgb3duZXIgY2FuIGFkZC9yZW1vdmUgb3duZXJzCiAgICAvLy8gQHBhcmFtIF9hZG1pblJhdGUgVGltZSBwZXJpb2QgdXNlZCBmb3IgcmF0ZSBsaW1pdGluZyBhIGdpdmVuIGtleSBmb3IgYWRtaW4gZnVuY3Rpb25hbGl0eQogICAgZnVuY3Rpb24gSWRlbnRpdHlNYW5hZ2VyKHVpbnQgX3VzZXJUaW1lTG9jaywgdWludCBfYWRtaW5UaW1lTG9jaywgdWludCBfYWRtaW5SYXRlKSB7CiAgICAgICAgcmVxdWlyZShfYWRtaW5UaW1lTG9jayA+PSBfdXNlclRpbWVMb2NrKTsKICAgICAgICBhZG1pblRpbWVMb2NrID0gX2FkbWluVGltZUxvY2s7CiAgICAgICAgdXNlclRpbWVMb2NrID0gX3VzZXJUaW1lTG9jazsKICAgICAgICBhZG1pblJhdGUgPSBfYWRtaW5SYXRlOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgcHJveHkgY29udHJhY3QgZm9yIGFuIG93bmVyIGFuZCByZWNvdmVyeQogICAgLy8vIEBwYXJhbSBvd25lciBLZXkgd2hvIGNhbiB1c2UgdGhpcyBjb250cmFjdCB0byBjb250cm9sIHByb3h5LiBHaXZlbiBmdWxsIHBvd2VyCiAgICAvLy8gQHBhcmFtIHJlY292ZXJ5S2V5IEtleSBvZiByZWNvdmVyeSBuZXR3b3JrIG9yIGFkZHJlc3MgZnJvbSBzZWVkIHRvIHJlY292ZXJ5IHByb3h5CiAgICAvLy8gR2FzIGNvc3Qgb2YgMjg5LDMxMQogICAgZnVuY3Rpb24gY3JlYXRlSWRlbnRpdHkoYWRkcmVzcyBvd25lciwgYWRkcmVzcyByZWNvdmVyeUtleSkgcHVibGljIHZhbGlkQWRkcmVzcyhyZWNvdmVyeUtleSkgewogICAgICAgIFByb3h5IGlkZW50aXR5ID0gbmV3IFByb3h5KCk7CiAgICAgICAgb3duZXJzW2lkZW50aXR5XVtvd25lcl0gPSBub3cgLSBhZG1pblRpbWVMb2NrOyAvLyBUaGlzIGlzIHRvIGVuc3VyZSBvcmlnaW5hbCBvd25lciBoYXMgZnVsbCBwb3dlciBmcm9tIGRheSBvbmUKICAgICAgICByZWNvdmVyeUtleXNbaWRlbnRpdHldID0gcmVjb3ZlcnlLZXk7CiAgICAgICAgTG9nSWRlbnRpdHlDcmVhdGVkKGlkZW50aXR5LCBtc2cuc2VuZGVyLCBvd25lciwgIHJlY292ZXJ5S2V5KTsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGVzIGEgbmV3IHByb3h5IGNvbnRyYWN0IGZvciBhbiBvd25lciBhbmQgcmVjb3ZlcnkgYW5kIGFsbG93cyBhbiBpbml0aWFsIGZvcndhcmQgY2FsbCB3aGljaCB3b3VsZCBiZSB0byBzZXQgdGhlIHJlZ2lzdHJ5IGluIG91ciBjYXNlCiAgICAvLy8gQHBhcmFtIG93bmVyIEtleSB3aG8gY2FuIHVzZSB0aGlzIGNvbnRyYWN0IHRvIGNvbnRyb2wgcHJveHkuIEdpdmVuIGZ1bGwgcG93ZXIKICAgIC8vLyBAcGFyYW0gcmVjb3ZlcnlLZXkgS2V5IG9mIHJlY292ZXJ5IG5ldHdvcmsgb3IgYWRkcmVzcyBmcm9tIHNlZWQgdG8gcmVjb3ZlcnkgcHJveHkKICAgIC8vLyBAcGFyYW0gZGVzdGluYXRpb24gQWRkcmVzcyBvZiBjb250cmFjdCB0byBiZSBjYWxsZWQgYWZ0ZXIgcHJveHkgaXMgY3JlYXRlZAogICAgLy8vIEBwYXJhbSBkYXRhIG9mIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCB0aGUgZGVzdGluYXRpb24gY29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUlkZW50aXR5V2l0aENhbGwoYWRkcmVzcyBvd25lciwgYWRkcmVzcyByZWNvdmVyeUtleSwgYWRkcmVzcyBkZXN0aW5hdGlvbiwgYnl0ZXMgZGF0YSkgcHVibGljIHZhbGlkQWRkcmVzcyhyZWNvdmVyeUtleSkgewogICAgICAgIFByb3h5IGlkZW50aXR5ID0gbmV3IFByb3h5KCk7CiAgICAgICAgb3duZXJzW2lkZW50aXR5XVtvd25lcl0gPSBub3cgLSBhZG1pblRpbWVMb2NrOyAvLyBUaGlzIGlzIHRvIGVuc3VyZSBvcmlnaW5hbCBvd25lciBoYXMgZnVsbCBwb3dlciBmcm9tIGRheSBvbmUKICAgICAgICByZWNvdmVyeUtleXNbaWRlbnRpdHldID0gcmVjb3ZlcnlLZXk7CiAgICAgICAgTG9nSWRlbnRpdHlDcmVhdGVkKGlkZW50aXR5LCBtc2cuc2VuZGVyLCBvd25lciwgIHJlY292ZXJ5S2V5KTsKICAgICAgICBpZGVudGl0eS5mb3J3YXJkKGRlc3RpbmF0aW9uLCAwLCBkYXRhKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYSB1c2VyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgZXhpc3RpbmcgcHJveHkgdG8gdGhpcyBjb250cmFjdC4gTXVzdCBjb21lIHRocm91Z2ggcHJveHkKICAgIC8vLyBAcGFyYW0gb3duZXIgS2V5IHdobyBjYW4gdXNlIHRoaXMgY29udHJhY3QgdG8gY29udHJvbCBwcm94eS4gR2l2ZW4gZnVsbCBwb3dlcgogICAgLy8vIEBwYXJhbSByZWNvdmVyeUtleSBLZXkgb2YgcmVjb3ZlcnkgbmV0d29yayBvciBhZGRyZXNzIGZyb20gc2VlZCB0byByZWNvdmVyeSBwcm94eQogICAgLy8vIE5vdGU6IFVzZXIgbXVzdCBjaGFuZ2Ugb3duZXIgb2YgcHJveHkgdG8gdGhpcyBjb250cmFjdCBhZnRlciBjYWxsaW5nIHRoaXMKICAgIGZ1bmN0aW9uIHJlZ2lzdGVySWRlbnRpdHkoYWRkcmVzcyBvd25lciwgYWRkcmVzcyByZWNvdmVyeUtleSkgcHVibGljIHZhbGlkQWRkcmVzcyhyZWNvdmVyeUtleSkgewogICAgICAgIHJlcXVpcmUocmVjb3ZlcnlLZXlzW21zZy5zZW5kZXJdID09IDApOyAvLyBEZW55IGFueSBmdW5ueSBidXNpbmVzcwogICAgICAgIG93bmVyc1ttc2cuc2VuZGVyXVtvd25lcl0gPSBub3cgLSBhZG1pblRpbWVMb2NrOyAvLyBUaGlzIGlzIHRvIGVuc3VyZSBvcmlnaW5hbCBvd25lciBoYXMgZnVsbCBwb3dlciBmcm9tIGRheSBvbmUKICAgICAgICByZWNvdmVyeUtleXNbbXNnLnNlbmRlcl0gPSByZWNvdmVyeUtleTsKICAgICAgICBMb2dJZGVudGl0eUNyZWF0ZWQobXNnLnNlbmRlciwgbXNnLnNlbmRlciwgb3duZXIsIHJlY292ZXJ5S2V5KTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYSB1c2VyIHRvIGZvcndhcmQgYSBjYWxsIHRocm91Z2ggdGhlaXIgcHJveHkuCiAgICBmdW5jdGlvbiBmb3J3YXJkVG8oUHJveHkgaWRlbnRpdHksIGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyBvbmx5T3duZXIoaWRlbnRpdHkpIHsKICAgICAgICBpZGVudGl0eS5mb3J3YXJkKGRlc3RpbmF0aW9uLCB2YWx1ZSwgZGF0YSk7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGFuIG9sZGVyT3duZXIgdG8gYWRkIGEgbmV3IG93bmVyIGluc3RhbnRseQogICAgZnVuY3Rpb24gYWRkT3duZXIoUHJveHkgaWRlbnRpdHksIGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T2xkZXJPd25lcihpZGVudGl0eSkgcmF0ZUxpbWl0ZWQoaWRlbnRpdHkpIHsKICAgICAgICByZXF1aXJlKCFpc093bmVyKGlkZW50aXR5LCBuZXdPd25lcikpOwogICAgICAgIG93bmVyc1tpZGVudGl0eV1bbmV3T3duZXJdID0gbm93IC0gdXNlclRpbWVMb2NrOwogICAgICAgIExvZ093bmVyQWRkZWQoaWRlbnRpdHksIG5ld093bmVyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYSByZWNvdmVyeUtleSB0byBhZGQgYSBuZXcgb3duZXIgd2l0aCB1c2VyVGltZUxvY2sgd2FpdGluZyB0aW1lCiAgICBmdW5jdGlvbiBhZGRPd25lckZyb21SZWNvdmVyeShQcm94eSBpZGVudGl0eSwgYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlSZWNvdmVyeShpZGVudGl0eSkgcmF0ZUxpbWl0ZWQoaWRlbnRpdHkpIHsKICAgICAgICByZXF1aXJlKCFpc093bmVyKGlkZW50aXR5LCBuZXdPd25lcikpOwogICAgICAgIG93bmVyc1tpZGVudGl0eV1bbmV3T3duZXJdID0gbm93OwogICAgICAgIExvZ093bmVyQWRkZWQoaWRlbnRpdHksIG5ld093bmVyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gcmVtb3ZlIGFub3RoZXIgb3duZXIgaW5zdGFudGx5CiAgICBmdW5jdGlvbiByZW1vdmVPd25lcihQcm94eSBpZGVudGl0eSwgYWRkcmVzcyBvd25lcikgcHVibGljIG9ubHlPbGRlck93bmVyKGlkZW50aXR5KSByYXRlTGltaXRlZChpZGVudGl0eSkgewogICAgICAgIC8vIGFuIG93bmVyIHNob3VsZCBub3QgYmUgYWxsb3dlZCB0byByZW1vdmUgaXRzZWxmCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IG93bmVyKTsKICAgICAgICBkZWxldGUgb3duZXJzW2lkZW50aXR5XVtvd25lcl07CiAgICAgICAgTG9nT3duZXJSZW1vdmVkKGlkZW50aXR5LCBvd25lciwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGFuIG93bmVyIHRvIGNoYW5nZSB0aGUgcmVjb3ZlcnlLZXkgaW5zdGFudGx5CiAgICBmdW5jdGlvbiBjaGFuZ2VSZWNvdmVyeShQcm94eSBpZGVudGl0eSwgYWRkcmVzcyByZWNvdmVyeUtleSkgcHVibGljCiAgICAgICAgb25seU9sZGVyT3duZXIoaWRlbnRpdHkpCiAgICAgICAgcmF0ZUxpbWl0ZWQoaWRlbnRpdHkpCiAgICAgICAgdmFsaWRBZGRyZXNzKHJlY292ZXJ5S2V5KQogICAgewogICAgICAgIHJlY292ZXJ5S2V5c1tpZGVudGl0eV0gPSByZWNvdmVyeUtleTsKICAgICAgICBMb2dSZWNvdmVyeUNoYW5nZWQoaWRlbnRpdHksIHJlY292ZXJ5S2V5LCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gYmVnaW4gcHJvY2VzcyBvZiB0cmFuc2ZlcmluZyBwcm94eSB0byBuZXcgSWRlbnRpdHlNYW5hZ2VyCiAgICBmdW5jdGlvbiBpbml0aWF0ZU1pZ3JhdGlvbihQcm94eSBpZGVudGl0eSwgYWRkcmVzcyBuZXdJZE1hbmFnZXIpIHB1YmxpYwogICAgICAgIG9ubHlPbGRlck93bmVyKGlkZW50aXR5KQogICAgICAgIHZhbGlkQWRkcmVzcyhuZXdJZE1hbmFnZXIpCiAgICB7CiAgICAgICAgbWlncmF0aW9uSW5pdGlhdGVkW2lkZW50aXR5XSA9IG5vdzsKICAgICAgICBtaWdyYXRpb25OZXdBZGRyZXNzW2lkZW50aXR5XSA9IG5ld0lkTWFuYWdlcjsKICAgICAgICBMb2dNaWdyYXRpb25Jbml0aWF0ZWQoaWRlbnRpdHksIG5ld0lkTWFuYWdlciwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGFuIG93bmVyIHRvIGNhbmNlbCB0aGUgcHJvY2VzcyBvZiB0cmFuc2ZlcmluZyBwcm94eSB0byBuZXcgSWRlbnRpdHlNYW5hZ2VyCiAgICBmdW5jdGlvbiBjYW5jZWxNaWdyYXRpb24oUHJveHkgaWRlbnRpdHkpIHB1YmxpYyBvbmx5T3duZXIoaWRlbnRpdHkpIHsKICAgICAgICBhZGRyZXNzIGNhbmNlbGVkTWFuYWdlciA9IG1pZ3JhdGlvbk5ld0FkZHJlc3NbaWRlbnRpdHldOwogICAgICAgIGRlbGV0ZSBtaWdyYXRpb25Jbml0aWF0ZWRbaWRlbnRpdHldOwogICAgICAgIGRlbGV0ZSBtaWdyYXRpb25OZXdBZGRyZXNzW2lkZW50aXR5XTsKICAgICAgICBMb2dNaWdyYXRpb25DYW5jZWxlZChpZGVudGl0eSwgY2FuY2VsZWRNYW5hZ2VyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gZmluYWxpemUgbWlncmF0aW9uIG9uY2UgYWRtaW5UaW1lTG9jayB0aW1lIGhhcyBwYXNzZWQKICAgIC8vLyBXQVJOSU5HOiBiZWZvcmUgdHJhbnNmZXJpbmcgdG8gYSBuZXcgYWRkcmVzcywgbWFrZSBzdXJlIHRoaXMgYWRkcmVzcyBpcyAicmVhZHkgdG8gcmVjaWV2ZSIgdGhlIHByb3h5LgogICAgLy8vIE5vdCBkb2luZyBzbyByaXNrcyB0aGUgcHJveHkgYmVjb21pbmcgc3R1Y2suCiAgICBmdW5jdGlvbiBmaW5hbGl6ZU1pZ3JhdGlvbihQcm94eSBpZGVudGl0eSkgcHVibGljIG9ubHlPbGRlck93bmVyKGlkZW50aXR5KSB7CiAgICAgICAgcmVxdWlyZShtaWdyYXRpb25Jbml0aWF0ZWRbaWRlbnRpdHldICE9IDAgJiYgbWlncmF0aW9uSW5pdGlhdGVkW2lkZW50aXR5XSArIGFkbWluVGltZUxvY2sgPCBub3cpOwogICAgICAgIGFkZHJlc3MgbmV3SWRNYW5hZ2VyID0gbWlncmF0aW9uTmV3QWRkcmVzc1tpZGVudGl0eV07CiAgICAgICAgZGVsZXRlIG1pZ3JhdGlvbkluaXRpYXRlZFtpZGVudGl0eV07CiAgICAgICAgZGVsZXRlIG1pZ3JhdGlvbk5ld0FkZHJlc3NbaWRlbnRpdHldOwogICAgICAgIGlkZW50aXR5LmNoYW5nZUNvbnRyb2xsZXIobmV3SWRNYW5hZ2VyKTsKICAgICAgICBkZWxldGUgcmVjb3ZlcnlLZXlzW2lkZW50aXR5XTsKICAgICAgICAvLyBXZSBjYW4gb25seSBkZWxldGUgdGhlIG93bmVyIHRoYXQgd2Uga25vdyBvZi4gQWxsIG90aGVyIG93bmVycwogICAgICAgIC8vIG5lZWRzIHRvIGJlIHJlbW92ZWQgYmVmb3JlIGEgY2FsbCB0byB0aGlzIG1ldGhvZC4KICAgICAgICBkZWxldGUgb3duZXJzW2lkZW50aXR5XVttc2cuc2VuZGVyXTsKICAgICAgICBMb2dNaWdyYXRpb25GaW5hbGl6ZWQoaWRlbnRpdHksIG5ld0lkTWFuYWdlciwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPd25lcihhZGRyZXNzIGlkZW50aXR5LCBhZGRyZXNzIG93bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAob3duZXJzW2lkZW50aXR5XVtvd25lcl0gPiAwICYmIChvd25lcnNbaWRlbnRpdHldW293bmVyXSArIHVzZXJUaW1lTG9jaykgPD0gbm93KTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc09sZGVyT3duZXIoYWRkcmVzcyBpZGVudGl0eSwgYWRkcmVzcyBvd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKG93bmVyc1tpZGVudGl0eV1bb3duZXJdID4gMCAmJiAob3duZXJzW2lkZW50aXR5XVtvd25lcl0gKyBhZG1pblRpbWVMb2NrKSA8PSBub3cpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmVjb3ZlcnkoYWRkcmVzcyBpZGVudGl0eSwgYWRkcmVzcyByZWNvdmVyeUtleSkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gcmVjb3ZlcnlLZXlzW2lkZW50aXR5XSA9PSByZWNvdmVyeUtleTsKICAgIH0KfQ=='.
	

]
