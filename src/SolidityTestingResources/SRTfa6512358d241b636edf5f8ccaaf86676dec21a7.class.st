Class {
	#name : #SRTfa6512358d241b636edf5f8ccaaf86676dec21a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfa6512358d241b636edf5f8ccaaf86676dec21a7 >> base64 [
	^ ''.
	

]
