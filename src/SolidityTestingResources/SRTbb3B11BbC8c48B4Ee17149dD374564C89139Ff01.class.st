Class {
	#name : #SRTbb3B11BbC8c48B4Ee17149dD374564C89139Ff01,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb3B11BbC8c48B4Ee17149dD374564C89139Ff01 >> base64 [
	^ ''.
	

]
