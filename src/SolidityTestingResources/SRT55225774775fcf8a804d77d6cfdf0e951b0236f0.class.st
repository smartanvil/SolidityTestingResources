Class {
	#name : #SRT55225774775fcf8a804d77d6cfdf0e951b0236f0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55225774775fcf8a804d77d6cfdf0e951b0236f0 >> base64 [
	^ ''.
	

]
