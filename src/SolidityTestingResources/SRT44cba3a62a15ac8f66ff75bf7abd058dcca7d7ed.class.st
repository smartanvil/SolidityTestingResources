Class {
	#name : #SRT44cba3a62a15ac8f66ff75bf7abd058dcca7d7ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT44cba3a62a15ac8f66ff75bf7abd058dcca7d7ed >> base64 [
	^ ''.
	

]
