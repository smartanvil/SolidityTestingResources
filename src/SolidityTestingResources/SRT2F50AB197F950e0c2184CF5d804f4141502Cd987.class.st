Class {
	#name : #SRT2F50AB197F950e0c2184CF5d804f4141502Cd987,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2F50AB197F950e0c2184CF5d804f4141502Cd987 >> base64 [
	^ ''.
	

]
