Class {
	#name : #SRT919c9b9621b3da0809431b213c431a796cb8fa1f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT919c9b9621b3da0809431b213c431a796cb8fa1f >> base64 [
	^ 'LyoKICogIENyb3dkc2FsZSBmb3IgTHltcG8gVG9rZW5zLgogKiAgUmFpc2VkIEV0aGVyIHdpbGwgYmUgc3RvcmVkIHNhZmVseSBhdCB0aGUgd2FsbGV0IGFuZCByZXR1cm5lZCB0byB0aGUgSUNPIGluIGNhc2UgdGhlIGZ1bmRpbmcKICogIGdvYWwgaXMgbm90IHJlYWNoZWQsIGFsbG93aW5nIHRoZSB0b2tlbiBob2xkZXJzIHRvIHdpdGhkcmF3IHRoZWlyIGZ1bmRzLgogKiAgQXV0aG9yOiBKdXN0YXMgS3JlZ8W+ZMSXCiAqLwogCnByYWdtYSBzb2xpZGl0eSBeMC40LjE5OwoKY29udHJhY3QgdG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHt9CiAgICBmdW5jdGlvbiBidXJuKCkge30KfQoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhICYmIGMgPj0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IEx5bXBvSUNPIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIC8vIHByZS1JQ08KICAgIC8vIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc29sZCBkdXJpbmcgcHJlLUlDTwogICAgdWludCBjb25zdGFudCBwdWJsaWMgcHJlX21heEdvYWwgPSAyNjUwMDAwMDBlMTg7IC8vIDI2NSBNaWxsaW9uIExZTSBUb2tlbnMKICAgIC8vIFRoZXJlIGFyZSBkaWZmZXJlbnQgcHJpY2VzIGFuZCBhbW91bnQgYXZhaWxhYmxlIGluIGVhY2ggcGVyaW9kCiAgICB1aW50WzJdIHB1YmxpYyBwcmVfcHJpY2VzID0gWzYwMDAwLCA1MDAwMF07CiAgICB1aW50WzFdIHB1YmxpYyBwcmVfYW1vdW50X3N0YWdlcyA9IFs5MDAwMDAwMGUxOF07IC8vIHRoZSBhbW91bnQgYXZhaWxhYmxlIGluIGVhY2ggc3RhZ2UKICAgIC8vIFRoZSBzdGFydCBkYXRlIG9mIHRoZSBwcmUtSUNPIGNyb3dkc2FsZQogICAgdWludCBjb25zdGFudCBwdWJsaWMgcHJlX3N0YXJ0ID0gMTUxNjYxODgwMDsgLy8gTW9uZGF5LCAyMiBKYW51YXJ5IDIwMTggMTE6MDA6MDAgR01UCiAgICAvLyBUaGUgZW5kIGRhdGUgb2YgdGhlIHByZS1JQ08gY3Jvd2RzYWxlCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBwcmVfZW5kID0gMTUxNzY1NTYwMDsgLy8gU2F0dXJkYXksIDMgRmVicnVhcnkgMjAxOCAxMTowMDowMCBHTVQKICAgIC8vIFRoZSBudW1iZXIgb2YgdG9rZW5zIGFscmVhZHkgc29sZCBkdXJpbmcgcHJlLUlDTwogICAgdWludCBwdWJsaWMgcHJlX3Rva2Vuc1NvbGQgPSAwOwoKICAgIC8vIElDTwogICAgLy8gVGhlIG1heGltdW0gYW1vdW50IG9mIHRva2VucyB0byBiZSBzb2xkCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBtYXhHb2FsID0gMzg1MDAwMDAwZTE4OyAvLyAzODUgTWlsbGlvbiBMWU0gVG9rZW5zCiAgICAvLyBUaGVyZSBhcmUgZGlmZmVyZW50IHByaWNlcyBhbmQgYW1vdW50IGF2YWlsYWJsZSBpbiBlYWNoIHBlcmlvZAogICAgdWludFsxXSBwdWJsaWMgcHJpY2VzID0gWzQwMDAwXTsKICAgIC8vIFRoZSBzdGFydCBkYXRlIG9mIHRoZSBjcm93ZHNhbGUKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIHN0YXJ0ID0gMTUxODg2NTIwMDsgLy8gU2F0dXJkYXksIDE3IEZlYnJ1YXJ5IDIwMTggMTE6MDA6MDAgR01UCiAgICAvLyBUaGUgZW5kIGRhdGUgb2YgdGhlIGNyb3dkc2FsZQogICAgdWludCBjb25zdGFudCBwdWJsaWMgZW5kID0gMTUxOTgxNTYwMDsgLy8gV2VkbmVzZGF5LCAyOCBGZWJydWFyeSAyMDE4IDExOjAwOjAwIEdNVAogICAgLy8gVGhlIG51bWJlciBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkIGR1cmluZyBJQ08KICAgIHVpbnQgcHVibGljIHRva2Vuc1NvbGQgPSAwOwoKICAgIC8vIElmIHRoZSBmdW5kaW5nIGdvYWwgaXMgbm90IHJlYWNoZWQsIHRva2VuIGhvbGRlcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBmdW5kaW5nR29hbCA9IDE1MDAwMDAwMGUxODsgLy8gMTUlCiAgICAvLyBIb3cgbXVjaCBoYXMgYmVlbiByYWlzZWQgYnkgY3Jvd2RhbGUgKGluIEVUSCkKICAgIHVpbnQgcHVibGljIGFtb3VudFJhaXNlZDsKICAgIC8vIFRoZSBiYWxhbmNlcyAoaW4gRVRIKSBvZiBhbGwgdG9rZW4gaG9sZGVycwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsKICAgIC8vIEluZGljYXRlcyBpZiB0aGUgY3Jvd2RzYWxlIGhhcyBiZWVuIGVuZGVkIGFscmVhZHkKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUVuZGVkID0gZmFsc2U7CiAgICAvLyBUb2tlbnMgd2lsbCBiZSB0cmFuc2ZlcmVkIGZyb20gdGhpcyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk93bmVyOwogICAgLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0CiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7CiAgICAvLyBUaGUgd2FsbGV0IG9uIHdoaWNoIHRoZSBmdW5kcyB3aWxsIGJlIHN0b3JlZAogICAgYWRkcmVzcyB3YWxsZXQ7CiAgICAvLyBOb3RpZnlpbmcgdHJhbnNmZXJzIGFuZCB0aGUgc3VjY2VzcyBvZiB0aGUgY3Jvd2RzYWxlCiAgICBldmVudCBHb2FsUmVhY2hlZChhZGRyZXNzIF90b2tlbk93bmVyLCB1aW50IF9hbW91bnRSYWlzZWQpOwogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbiwgdWludCBfYW1vdW50UmFpc2VkKTsKCiAgICAvLyBDb25zdHJ1Y3Rvci9pbml0aWFsaXphdGlvbgogICAgZnVuY3Rpb24gTHltcG9JQ08oYWRkcmVzcyB0b2tlbkFkZHIsIGFkZHJlc3Mgd2FsbGV0QWRkciwgYWRkcmVzcyB0b2tlbk93bmVyQWRkcikgewogICAgICAgIHRva2VuUmV3YXJkID0gdG9rZW4odG9rZW5BZGRyKTsKICAgICAgICB3YWxsZXQgPSB3YWxsZXRBZGRyOwogICAgICAgIHRva2VuT3duZXIgPSB0b2tlbk93bmVyQWRkcjsKICAgIH0KICAgIAogICAgLy8gRXhjaGFuZ2UgYnkgc2VuZGluZyBldGhlciB0byB0aGUgY29udHJhY3QuCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IHdhbGxldCkgLy8gRG8gbm90IHRyaWdnZXIgZXhjaGFuZ2UgaWYgdGhlIHdhbGxldCBpcyByZXR1cm5pbmcgdGhlIGZ1bmRzCiAgICAgICAgICAgIGV4Y2hhbmdlKG1zZy5zZW5kZXIpOwogICAgfQogICAgCiAgICAvLyBNYWtlIGFuIGV4Y2hhbmVnbWVudC4gT25seSBjYWxsYWJsZSBpZiB0aGUgY3Jvd2RzYWxlIHN0YXJ0ZWQgYW5kIGhhc24ndCBiZWVuIGVuZGVkLCBhbHNvIHRoZSBtYXhHb2FsIHdhc24ndCByZWFjaGVkIHlldC4KICAgIC8vIFRoZSBjdXJyZW50IHRva2VuIHByaWNlIGlzIGxvb2tlZCB1cCBieSBhdmFpbGFibGUgYW1vdW50LiBCb3VnaHQgdG9rZW5zIGlzIHRyYW5zZmVyZWQgdG8gdGhlIHJlY2VpdmVyLgogICAgLy8gVGhlIHNlbnQgdmFsdWUgaXMgZGlyZWN0bHkgZm9yd2FyZGVkIHRvIGEgc2FmZSB3YWxsZXQuCiAgICBmdW5jdGlvbiBleGNoYW5nZShhZGRyZXNzIHJlY2VpdmVyKSBwYXlhYmxlIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50IHByaWNlID0gZ2V0UHJpY2UoKTsKICAgICAgICB1aW50IG51bVRva2VucyA9IGFtb3VudC5tdWwocHJpY2UpOwoKICAgICAgICBib29sIGlzUHJlSUNPID0gKG5vdyA+PSBwcmVfc3RhcnQgJiYgbm93IDw9IHByZV9lbmQpOwogICAgICAgIGJvb2wgaXNJQ08gPSAobm93ID49IHN0YXJ0ICYmIG5vdyA8PSBlbmQpOwoKICAgICAgICByZXF1aXJlKGlzUHJlSUNPIHx8IGlzSUNPKTsKICAgICAgICByZXF1aXJlKG51bVRva2VucyA+IDApOwogICAgICAgIGlmIChpc1ByZUlDTykKICAgICAgICB7CiAgICAgICAgICAgIHJlcXVpcmUoIWNyb3dkc2FsZUVuZGVkICYmIHByZV90b2tlbnNTb2xkLmFkZChudW1Ub2tlbnMpIDw9IHByZV9tYXhHb2FsKTsKICAgICAgICAgICAgaWYgKHByZV90b2tlbnNTb2xkIDwgcHJlX2Ftb3VudF9zdGFnZXNbMF0pCiAgICAgICAgICAgICAgICByZXF1aXJlKG51bVRva2VucyA8PSA2MDAwMDAwZTE4KTsgLy8gbWF4IHRocmVzaG9sZCBmb3IgcHJlLUlDTzogNm1pbCBMWU0gdG9rZW5zIGZvciBzdGFnZS1JCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJlcXVpcmUobnVtVG9rZW5zIDw9IDEyNTAwMDAwZTE4KTsgLy8gbWF4IHRocmVzaG9sZCBmb3IgcHJlLUlDTzogMTIuNW1pbCBMWU0gdG9rZW5zIGZvciBzdGFnZS1JSQogICAgICAgIH0KICAgICAgICBpZiAoaXNJQ08pCiAgICAgICAgewogICAgICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVFbmRlZCAmJiB0b2tlbnNTb2xkLmFkZChudW1Ub2tlbnMpIDw9IG1heEdvYWwpOwogICAgICAgIH0KCiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKGFtb3VudCk7CiAgICAgICAgYmFsYW5jZXNbcmVjZWl2ZXJdID0gYmFsYW5jZXNbcmVjZWl2ZXJdLmFkZChhbW91bnQpOwogICAgICAgIAogICAgICAgIC8vIENhbGN1bGF0ZSBob3cgbXVjaCByYWlzZWQgYW5kIHRva2VucyBzb2xkCiAgICAgICAgYW1vdW50UmFpc2VkID0gYW1vdW50UmFpc2VkLmFkZChhbW91bnQpOwoKICAgICAgICBpZiAoaXNQcmVJQ08pCiAgICAgICAgICAgIHByZV90b2tlbnNTb2xkID0gcHJlX3Rva2Vuc1NvbGQuYWRkKG51bVRva2Vucyk7CiAgICAgICAgaWYgKGlzSUNPKQogICAgICAgICAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5hZGQobnVtVG9rZW5zKTsKCiAgICAgICAgYXNzZXJ0KHRva2VuUmV3YXJkLnRyYW5zZmVyRnJvbSh0b2tlbk93bmVyLCByZWNlaXZlciwgbnVtVG9rZW5zKSk7CiAgICAgICAgRnVuZFRyYW5zZmVyKHJlY2VpdmVyLCBhbW91bnQsIHRydWUsIGFtb3VudFJhaXNlZCk7CiAgICB9CgogICAgLy8gTG9va3MgdXAgdGhlIGN1cnJlbnQgdG9rZW4gcHJpY2UKICAgIGZ1bmN0aW9uIGdldFByaWNlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBwcmljZSkgewogICAgICAgIC8vIHByZS1JQ08gcHJpY2VzCiAgICAgICAgaWYgKG5vdyA+PSBwcmVfc3RhcnQgJiYgbm93IDw9IHByZV9lbmQpCiAgICAgICAgewogICAgICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IHByZV9hbW91bnRfc3RhZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZihwcmVfdG9rZW5zU29sZCA8IHByZV9hbW91bnRfc3RhZ2VzW2ldKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVfcHJpY2VzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwcmVfcHJpY2VzW3ByZV9wcmljZXMubGVuZ3RoLTFdOwogICAgICAgIH0KICAgICAgICAvLyBJQ08gcHJpY2VzCiAgICAgICAgcmV0dXJuIHByaWNlc1twcmljZXMubGVuZ3RoLTFdOwogICAgfQoKICAgIG1vZGlmaWVyIGFmdGVyRGVhZGxpbmUoKSB7IGlmIChub3cgPj0gZW5kKSBfOyB9CgogICAgLy8gQ2hlY2tzIGlmIHRoZSBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCBhbmQgZW5kcyB0aGUgY2FtcGFpZ24KICAgIGZ1bmN0aW9uIGNoZWNrR29hbFJlYWNoZWQoKSBhZnRlckRlYWRsaW5lIHsKICAgICAgICBpZiAocHJlX3Rva2Vuc1NvbGQuYWRkKHRva2Vuc1NvbGQpID49IGZ1bmRpbmdHb2FsKXsKICAgICAgICAgICAgdG9rZW5SZXdhcmQuYnVybigpOyAvLyBCdXJuIHJlbWFpbmluZyB0b2tlbnMgYnV0IHRoZSByZXNlcnZlZCBvbmVzCiAgICAgICAgICAgIEdvYWxSZWFjaGVkKHRva2VuT3duZXIsIGFtb3VudFJhaXNlZCk7CiAgICAgICAgfQogICAgICAgIGNyb3dkc2FsZUVuZGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBBbGxvd3MgdGhlIGZ1bmRlcnMgdG8gd2l0aGRyYXcgdGhlaXIgZnVuZHMgaWYgdGhlIGdvYWwgaGFzIG5vdCBiZWVuIHJlYWNoZWQuCiAgICAvLyBPbmx5IHdvcmtzIGFmdGVyIGZ1bmRzIGhhdmUgYmVlbiByZXR1cm5lZCBmcm9tIHRoZSB3YWxsZXQuCiAgICBmdW5jdGlvbiBzYWZlV2l0aGRyYXdhbCgpIGFmdGVyRGVhZGxpbmUgewogICAgICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGFkZHJlc3ModGhpcykuYmFsYW5jZSA+PSBhbW91bnQpIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkgewogICAgICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgZmFsc2UsIGFtb3VudFJhaXNlZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0='.
	

]
