Class {
	#name : #SRT376961967198f0db0817f29942b88b2354077fab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT376961967198f0db0817f29942b88b2354077fab >> base64 [
	^ ''.
	

]
