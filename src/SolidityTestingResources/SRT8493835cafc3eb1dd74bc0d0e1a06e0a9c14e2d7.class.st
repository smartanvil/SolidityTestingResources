Class {
	#name : #SRT8493835cafc3eb1dd74bc0d0e1a06e0a9c14e2d7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8493835cafc3eb1dd74bc0d0e1a06e0a9c14e2d7 >> base64 [
	^ ''.
	

]
