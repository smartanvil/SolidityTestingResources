Class {
	#name : #SRT3080630ecdedb43dec42f19bed68965a45414902,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3080630ecdedb43dec42f19bed68965a45414902 >> base64 [
	^ ''.
	

]
