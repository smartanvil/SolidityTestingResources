Class {
	#name : #SRTf15666603540fb9218b85567ee833455cb586dc0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf15666603540fb9218b85567ee833455cb586dc0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBDYXJkIHsgCgogICAgLy8gdGhlIGVyYzcyMSBzdGFuZGFyZCBvZiBhbiBFdGhlciBTY3JvbGxzIGNhcmQKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgaW5kZXhlZCB0b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50IGluZGV4ZWQgdG9rZW5JZCk7CiAgICBldmVudCBDYXJkQ3JlYXRlZChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgY2FyZE51bWJlciwgdWludCBjcmFmdGVkRnJvbUxlZnQsIHVpbnQgY3JhZnRlZEZyb21SaWdodCk7CiAgICBldmVudCBHaWZ0KHVpbnQgY2FyZElkLCBhZGRyZXNzIHNlbmRlciwgYWRkcmVzcyByZWNpZXZlcik7CgogICAgYWRkcmVzcyBwdWJsaWMgbWFzdGVyQWRkcmVzczE7CiAgICBhZGRyZXNzIHB1YmxpYyBtYXN0ZXJBZGRyZXNzMjsKICAgIGFkZHJlc3MgcHVibGljIHdpdGhkcmF3QWRkcmVzczsKCiAgICBzdHJ1Y3QgQ2FyZFN0cnVjdHVyZSB7CiAgICAgICAgdWludDE2WzE2XSBydW5lczsKICAgICAgICB1aW50MTZbMTZdIHBvd2VyczsKICAgICAgICB1aW50NjQgY3JlYXRlZEF0OwogICAgICAgIHVpbnQ2NCBjYW5DcmFmdEF0OwogICAgICAgIHVpbnQzMiBjcmFmdGVkRnJvbUxlZnQ7CiAgICAgICAgdWludDMyIGNyYWZ0ZWRGcm9tUmlnaHQ7CiAgICAgICAgdWludCBkaWZmaWN1bHR5OwogICAgICAgIHVpbnQxNiBnZW5lcmF0aW9uOwogICAgfQoKICAgIENhcmRTdHJ1Y3R1cmVbXSBhbGxDYXJkczsKCiAgICAvLyBlcmM3MjEgdXNlZCB0byBpZCBvd25lcgogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgaW5kZXhUb093bmVyOyAKCiAgICAvLyBwYXJ0IG9mIGVyYzcyMS4gdXNlZCBmb3IgYmFsYW5jZU9mCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIG93bmVyc2hpcENvdW50OwoKICAgIC8vIHBhcnQgb2YgZXJjNzIxIHVzZWQgZm9yIGFwcHJvdmFsCiAgICBtYXBwaW5nICh1aW50ID0+IGFkZHJlc3MpIHB1YmxpYyBpbmRleFRvQXBwcm92ZWQ7CgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgCiAgICAgICAgb3duZXJzaGlwQ291bnRbX3RvXSsrOwogICAgICAgIGluZGV4VG9Pd25lcltfdG9rZW5JZF0gPSBfdG87CiAgICAgICAgLy8gZG9udCByZWNvcmQgYW55IHRyYW5zZmVycyBmcm9tIHRoZSBjb250cmFjdCBpdHNlbGYKICAgICAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICBvd25lcnNoaXBDb3VudFtfZnJvbV0tLTsKICAgICAgICB9CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQogCiAgICBtb2RpZmllciBtYXN0ZXJSZXN0cmljdGVkKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtYXN0ZXJBZGRyZXNzMSB8fCBtc2cuc2VuZGVyID09IG1hc3RlckFkZHJlc3MyKTsKICAgICAgICBfOwogICAgfQoKICAgZnVuY3Rpb24gZ2V0Q2FyZCh1aW50IF9pZCkgcHVibGljIHZpZXcgcmV0dXJucyAoIHVpbnQgZGlmZmljdWx0eSwgdWludCBjYW5DcmFmdEF0LCAKICAgdWludCBjcmVhdGVkQXQsIHVpbnQgY3JhZnRlZEZyb21MZWZ0LCB1aW50IGNyYWZ0ZWRGcm9tUmlnaHQsIHVpbnQgZ2VuZXJhdGlvbiwgdWludDE2WzE2XSBydW5lcywgdWludDE2WzE2XSBwb3dlcnMsCiAgIGFkZHJlc3Mgb3duZXIpIHsKICAgICAgQ2FyZFN0cnVjdHVyZSBzdG9yYWdlIGNhcmQgPSBhbGxDYXJkc1tfaWRdOwogICAgICBkaWZmaWN1bHR5ID0gdWludChjYXJkLmRpZmZpY3VsdHkpOwogICAgICBjYW5DcmFmdEF0ID0gdWludChjYXJkLmNhbkNyYWZ0QXQpOwogICAgICBjcmVhdGVkQXQgPSB1aW50KGNhcmQuY3JlYXRlZEF0KTsKICAgICAgY3JhZnRlZEZyb21MZWZ0ID0gdWludChjYXJkLmNyYWZ0ZWRGcm9tTGVmdCk7CiAgICAgIGNyYWZ0ZWRGcm9tUmlnaHQgPSB1aW50KGNhcmQuY3JhZnRlZEZyb21SaWdodCk7CiAgICAgIGdlbmVyYXRpb24gPSB1aW50KGNhcmQuZ2VuZXJhdGlvbik7CiAgICAgIHJ1bmVzID0gY2FyZC5ydW5lczsKICAgICAgcG93ZXJzID0gdWludDE2WzE2XShjYXJkLnBvd2Vycyk7CiAgICAgIG93bmVyID0gYWRkcmVzcyhpbmRleFRvT3duZXJbX2lkXSk7CiAgICB9CgogICAgZnVuY3Rpb24gX2NyZWF0ZUNhcmQodWludDE2WzE2XSBfcnVuZXMsIHVpbnQxNlsxNl0gX3Bvd2VycywgdWludCBfY3JhZnRlZEZyb21MZWZ0LCB1aW50IF9jcmFmdGVkRnJvbVJpZ2h0LCB1aW50IF9nZW5lcmF0aW9uLCAKICAgIGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CgogICAgICAgIENhcmRTdHJ1Y3R1cmUgbWVtb3J5IGNhcmQgPSBDYXJkU3RydWN0dXJlKHsKICAgICAgICAgICAgcnVuZXM6IHVpbnQxNlsxNl0oX3J1bmVzKSwKICAgICAgICAgICAgcG93ZXJzOiB1aW50MTZbMTZdKF9wb3dlcnMpLAogICAgICAgICAgICBjcmVhdGVkQXQ6IHVpbnQ2NChub3cpLAogICAgICAgICAgICBjYW5DcmFmdEF0OiAwLAogICAgICAgICAgICBjcmFmdGVkRnJvbUxlZnQ6IHVpbnQzMihfY3JhZnRlZEZyb21MZWZ0KSwKICAgICAgICAgICAgY3JhZnRlZEZyb21SaWdodDogdWludDMyKF9jcmFmdGVkRnJvbVJpZ2h0KSwKICAgICAgICAgICAgZGlmZmljdWx0eTogMCwKICAgICAgICAgICAgZ2VuZXJhdGlvbjogdWludDE2KF9nZW5lcmF0aW9uKQogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHVpbnQgY2FyZE51bWJlciA9IGFsbENhcmRzLnB1c2goY2FyZCkgLSAxOwoKICAgICAgICBDYXJkQ3JlYXRlZChfb3duZXIsIGNhcmROdW1iZXIsIHVpbnQoY2FyZC5jcmFmdGVkRnJvbUxlZnQpLCB1aW50KGNhcmQuY3JhZnRlZEZyb21SaWdodCkpOwogICAgICAgIF90cmFuc2Zlcih0aGlzLCBfb3duZXIsIGNhcmROdW1iZXIpOwogICAgICAgIHJldHVybiBjYXJkTnVtYmVyOwogICAgfQoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJFdGhlclNjcm9sbHMiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiRVMiOwoKICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gX293bnMoYWRkcmVzcyBfY2xhaW1hbnQsIHVpbnQgX3Rva2VuSWQpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBpbmRleFRvT3duZXJbX3Rva2VuSWRdID09IF9jbGFpbWFudDsKICAgIH0KCiAgICBmdW5jdGlvbiBoYXNCZWVuQXBwcm92ZWQoYWRkcmVzcyBfY2xhaW1hbnQsIHVpbnQgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gaW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9PSBfY2xhaW1hbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gX2FwcHJvdmUodWludCBfdG9rZW5JZCwgYWRkcmVzcyBfYXBwcm92ZWQpIGludGVybmFsIHsKICAgICAgICBpbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdID0gX2FwcHJvdmVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBjb3VudCkgewogICAgICAgIHJldHVybiBvd25lcnNoaXBDb3VudFtfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF90b2tlbklkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludCBfdG9rZW5JZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICAgICAgX2FwcHJvdmUoX3Rva2VuSWQsIF90byk7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF90b2tlbklkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX293bnMoX2Zyb20sIF90b2tlbklkKSk7ICAgIAogICAgICAgIHJlcXVpcmUoaGFzQmVlbkFwcHJvdmVkKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYWxsQ2FyZHMubGVuZ3RoIC0gMTsKICAgIH0KCiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICBhZGRyZXNzIG93bmVyID0gaW5kZXhUb093bmVyW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJldHVybiBvd25lcjsKICAgIH0KfQoKY29udHJhY3QgQ3JhZnRpbmdJbnRlcmZhY2UgewogICAgZnVuY3Rpb24gY3JhZnQodWludDE2WzE2XSBsZWZ0UGFyZW50UnVuZXMsIHVpbnQxNlsxNl0gbGVmdFBhcmVudFBvd2VycywgdWludDE2WzE2XSByaWdodFBhcmVudFJ1bmVzLCB1aW50MTZbMTZdIHJpZ2h0UGFyZW50UG93ZXJzKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MTZbMTZdLCB1aW50MTZbMTZdKTsKfQoKY29udHJhY3QgRHV0Y2hBdWN0aW9uSW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIER1dGNoQXVjdGlvbihhZGRyZXNzIGV0aGVyU2Nyb2xsc0FkZHJlc3Nlc3MsIGFkZHJlc3MgX21hc3RlcjEsIGFkZHJlc3MgX21hc3RlcjIpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHBheU1hc3RlcnMoKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIGlzRm9yQXVjdGlvbih1aW50IGNhcmQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFByaWNlKHVpbnQgY2FyZE51bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiBpc1ZhbGlkQXVjdGlvbih1aW50IGNhcmQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gZ2V0QXVjdGlvbih1aW50IGNhcmROdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludCBzdGFydGluZ1ByaWNlLCB1aW50IGVuZGluZ1ByaWNlLCB1aW50IGR1cmF0aW9uLCBhZGRyZXNzIHNlbGxlcix1aW50IHN0YXJ0ZWRBdCApOwogICAgZnVuY3Rpb24gZ2V0U2VsbGVyT2ZUb2tlbih1aW50IGNhcmROdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpOwp9Cgpjb250cmFjdCBEdXRjaEF1Y3Rpb25Ub0J1eUludGVyZmFjZSBpcyBEdXRjaEF1Y3Rpb25JbnRlcmZhY2UgewogICAgZnVuY3Rpb24gRHV0Y2hBdWN0aW9uVG9CdXkoYWRkcmVzcyBldGhlclNjcm9sbHNBZGRyZXNzLCBhZGRyZXNzIG1hc3RlcjEsIGFkZHJlc3MgbWFzdGVyMikgcHVibGljOy8vIER1dGNoQXVjdGlvbkludGVyZmFjZShldGhlclNjcm9sbHNBZGRyZXNzLCBtYXN0ZXIxLCBtYXN0ZXIyKTsKICAgIGZ1bmN0aW9uIHN0YXJ0QXVjdGlvbih1aW50IGNhcmROdW1iZXIsIHVpbnQgc3RhcnRQcmljZSwgdWludCBlbmRQcmljZSwgdWludCBkdXJhdGlvbiwgYWRkcmVzcyBzZWxsZXIpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHByaWNlT2ZPZmZpY2FsQ2FyZFNvbGQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KTsKICAgIGZ1bmN0aW9uIGJpZEZyb21FdGhlclNjcm9sbHModWludCBjYXJkTnVtYmVyLCBhZGRyZXNzIGJ1eWVyKSBwdWJsaWMgcGF5YWJsZTsKICAgIGZ1bmN0aW9uIGNhbmNlbEJ1eUF1Y3Rpb24odWludCBjYXJkTnVtYmVyLCBhZGRyZXNzIHJlcXVlc3RvcikgcHVibGljOwp9Cgpjb250cmFjdCBEdXRjaEF1Y3Rpb25Ub0NyYWZ0SW50ZXJmYWNlIGlzIER1dGNoQXVjdGlvbkludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBEdXRjaEF1Y3Rpb25Ub0NyYWZ0KGFkZHJlc3MgZXRoZXJTY3JvbGxzQWRkcmVzcywgYWRkcmVzcyBtYXN0ZXIxLCBhZGRyZXNzIG1hc3RlcjIpIHB1YmxpYzsvLyBEdXRjaEF1Y3Rpb25JbnRlcmZhY2UoZXRoZXJTY3JvbGxzQWRkcmVzcywgbWFzdGVyMSwgbWFzdGVyMik7CiAgICBmdW5jdGlvbiBzdGFydEF1Y3Rpb24odWludCBjYXJkTnVtYmVyLCB1aW50IHN0YXJ0UHJpY2UsIHVpbnQgZW5kUHJpY2UsIHVpbnQgZHVyYXRpb24sIGFkZHJlc3Mgc2VsbGVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBwcmljZU9mT2ZmaWNhbENhcmRTb2xkKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiBwbGFjZUJpZEZyb21FdGhlclNjcm9sbHModWludCBfdG9rZW5JZCkgcHVibGljIHBheWFibGU7CiAgICBmdW5jdGlvbiBjYW5jZWxDcmFmdEF1Y3Rpb24odWludCBjYXJkTnVtYmVyLCBhZGRyZXNzIHJlcXVlc3RvcikgcHVibGljOwp9Cgpjb250cmFjdCBDYXJkTWFya2V0IGlzIENhcmQgeyAKCiAgICBtYXBwaW5nICh1aW50ID0+IHVpbnQpIHB1YmxpYyBudW1iZXJPZkJhc2VzU29sZDsKICAgIG1hcHBpbmcgKHVpbnQgPT4gdWludCkgcHVibGljIG51bWJlck9mQWJpbGl0aWVzU29sZDsKICAgIHVpbnQxNiBsYXN0QWJpbGl0eVRvQmVBZGRlZFRvQ2lyY3VsYXRpb247CiAgICB1aW50MTYgbGFzdEJhc2VUb0JlQWRkZWRUb0NpcmN1bGF0aW9uOwogICAgdWludDE2W10gYXJyYXlPZlBvc3NpYmxlQmFzZXM7CiAgICB1aW50MTZbXSBhcnJheU9mUG9zc2libGVBYmlsaXRpZXM7CiAgICBDcmFmdGluZ0ludGVyZmFjZSBwdWJsaWMgY3JhZnRpbmc7CiAgICB1aW50IG1heFJ1bmVzOwogICAgdWludCBudW1iZXJPZlNwZWNpYWxDYXJkc0NyZWF0ZWQ7CiAgICAgCiAgICBEdXRjaEF1Y3Rpb25Ub0J1eUludGVyZmFjZSBwdWJsaWMgZHV0Y2hBdWN0aW9uVG9CdXk7CiAgICBEdXRjaEF1Y3Rpb25Ub0NyYWZ0SW50ZXJmYWNlIHB1YmxpYyBkdXRjaEF1Y3Rpb25Ub0NyYWZ0OwoKICAgIGZ1bmN0aW9uIENhcmRNYXJrZXQoYWRkcmVzcyBtYXN0ZXIxLCBhZGRyZXNzIG1hc3RlcjIsIGFkZHJlc3MgaW5wdXRXaXRoZHJhd0FkZHJlc3MpIHB1YmxpYyB7CiAgICAgICAgCiAgICAgICAgbWFzdGVyQWRkcmVzczEgPSBtYXN0ZXIxOwogICAgICAgIG1hc3RlckFkZHJlc3MyID0gbWFzdGVyMjsKICAgICAgICB3aXRoZHJhd0FkZHJlc3MgPSBpbnB1dFdpdGhkcmF3QWRkcmVzczsKCiAgICAgICAgdWludDE2WzE2XSBtZW1vcnkgZmlyc3RDYXJkOwoKICAgICAgICBfY3JlYXRlQ2FyZChmaXJzdENhcmQsIGZpcnN0Q2FyZCwgMCwgMCwgMCwgbWFzdGVyMSk7CgogICAgICAgIG1heFJ1bmVzID0gMzAwOwoKICAgICAgICBhcnJheU9mUG9zc2libGVCYXNlcyA9IFt1aW50MTYoMCksdWludDE2KDEpLHVpbnQxNigyKSx1aW50MTYoMyksdWludDE2KDQpLHVpbnQxNig1KSwKICAgICAgICB1aW50MTYoNiksdWludDE2KDcpLHVpbnQxNig4KSx1aW50MTYoOSksdWludDE2KDEwKSx1aW50MTYoMTEpLHVpbnQxNigxMiksdWludDE2KDEzKSwKICAgICAgICB1aW50MTYoMTQpLHVpbnQxNigxNSksdWludDE2KDE2KSx1aW50MTYoMTcpLHVpbnQxNigxOCksdWludDE2KDE5KV07CgogICAgICAgIGxhc3RCYXNlVG9CZUFkZGVkVG9DaXJjdWxhdGlvbiA9IDE5OwoKICAgICAgICBhcnJheU9mUG9zc2libGVBYmlsaXRpZXMgPSBbdWludDE2KDApLHVpbnQxNigxKSx1aW50MTYoMiksdWludDE2KDMpLHVpbnQxNig0KSx1aW50MTYoNSksCiAgICAgICAgdWludDE2KDYpLHVpbnQxNig3KSx1aW50MTYoOCksdWludDE2KDkpLHVpbnQxNigxMCksdWludDE2KDExKSx1aW50MTYoMTIpLHVpbnQxNigxMyksCiAgICAgICAgdWludDE2KDE0KSx1aW50MTYoMTUpLHVpbnQxNigxNiksdWludDE2KDE3KSx1aW50MTYoMTgpLHVpbnQxNigxOSldOwoKICAgICAgICBsYXN0QWJpbGl0eVRvQmVBZGRlZFRvQ2lyY3VsYXRpb24gPSAxOTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCYXNlcygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQxNltdKSB7CiAgICAgICAgcmV0dXJuIGFycmF5T2ZQb3NzaWJsZUJhc2VzOwogICAgfQoKICAgICBmdW5jdGlvbiBnZXRBYmlsaXRpZXMoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MTZbXSkgewogICAgICAgIHJldHVybiBhcnJheU9mUG9zc2libGVBYmlsaXRpZXM7CiAgICB9CgogICAgLy8gb25seSBhIG1heCBvZiAyNTAgSW5pdGlhbCBjYXJkcyBjYW4gZXZlciBiZSBjcmVhdGVkCiAgICBmdW5jdGlvbiBjcmVhdGVJbml0aWFsQ2FyZHModWludDMyIGNvdW50LCB1aW50MTYgYmFzZSwgdWludDE2IGFiaWxpdHkpIHB1YmxpYyBtYXN0ZXJSZXN0cmljdGVkIHsKCiAgICAgICAgdWludDE2WzE2XSBtZW1vcnkgYmFzZXMgPSBbdWludDE2KDApLCB1aW50MTYoMSksIHVpbnQxNigyKSwgdWludDE2KDMpLCB1aW50MTYoNCksIHVpbnQxNig1KSx1aW50MTYoNiksIHVpbnQxNigwKSwKICAgICAgICB1aW50MTYoMSksIHVpbnQxNigyKSwgdWludDE2KDMpLHVpbnQxNig0KSwgdWludDE2KDUpLHVpbnQxNig2KSwgYmFzZSwgYWJpbGl0eV07CiAgICAgICAgdWludDE2WzE2XSBtZW1vcnkgcG93ZXJzID0gW3VpbnQxNigzNSksIHVpbnQxNigyMCksIHVpbnQxNigxMCksIHVpbnQxNig1KSwgdWludDE2KDUpLCB1aW50MTYoNSksIHVpbnQxNigxKSwgdWludDE2KDM1KSwKICAgICAgICB1aW50MTYoMjEpLCB1aW50MTYoMTQpLCB1aW50MTYoMTApLHVpbnQxNig5KSwgdWludDE2KDgpLCB1aW50MTYoMyksIHVpbnQxNig5KSwgdWludDE2KDcpXTsKICAgICAgCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICAgICAgIAogICAgICAgICAgICBpZiAoYmFzZSA9PSAwKSB7CiAgICAgICAgICAgICAgICBiYXNlc1sxNF0gPSB1aW50MTYoKHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIGkgLSAxKSkgJSAyMCkpOwogICAgICAgICAgICAgICAgYmFzZXNbMTVdID0gdWludDE2KCh1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpIC0gMikpICUgMjApKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb3dlcnNbMTRdID0gdWludDE2KCh1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpIC0gMykpICUgOSkgKyAxKTsKICAgICAgICAgICAgcG93ZXJzWzE1XSA9IHVpbnQxNigodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSAtIDQpKSAlIDkpICsgMSk7CgogICAgICAgICAgICBpZiAobnVtYmVyT2ZTcGVjaWFsQ2FyZHNDcmVhdGVkIDwgMjUwKSB7CiAgICAgICAgICAgICAgICBfY3JlYXRlQ2FyZChiYXNlcywgcG93ZXJzLCAwLCAwLCAwLCBtc2cuc2VuZGVyKTsKICAgICAgICAgICAgICAgIG51bWJlck9mU3BlY2lhbENhcmRzQ3JlYXRlZCsrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWFzdGVyQWRkcmVzczEgfHwgbXNnLnNlbmRlciA9PSBtYXN0ZXJBZGRyZXNzMiB8fCBtc2cuc2VuZGVyID09IHdpdGhkcmF3QWRkcmVzcyk7CiAgICAgICAgZHV0Y2hBdWN0aW9uVG9CdXkucGF5TWFzdGVycygpOwogICAgICAgIGR1dGNoQXVjdGlvblRvQ3JhZnQucGF5TWFzdGVycygpOwogICAgICAgIHVpbnQgaGFsZk9mRnVuZHMgPSB0aGlzLmJhbGFuY2UgLyAyOwogICAgICAgIG1hc3RlckFkZHJlc3MxLnRyYW5zZmVyKGhhbGZPZkZ1bmRzKTsKICAgICAgICBtYXN0ZXJBZGRyZXNzMi50cmFuc2ZlcihoYWxmT2ZGdW5kcyk7CiAgICB9ICAgCgogICAgZnVuY3Rpb24gc2V0QnV5QXVjdGlvbkFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG1hc3RlclJlc3RyaWN0ZWQgewogICAgICAgIGR1dGNoQXVjdGlvblRvQnV5ID0gRHV0Y2hBdWN0aW9uVG9CdXlJbnRlcmZhY2UoX2FkZHJlc3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENyYWZ0QXVjdGlvbkFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG1hc3RlclJlc3RyaWN0ZWQgewogICAgICAgIGR1dGNoQXVjdGlvblRvQ3JhZnQgPSBEdXRjaEF1Y3Rpb25Ub0NyYWZ0SW50ZXJmYWNlKF9hZGRyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNYXN0ZXJBZGRyZXNzMShhZGRyZXNzIF9uZXdNYXN0ZXIpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1hc3RlckFkZHJlc3MxKTsKICAgICAgICBtYXN0ZXJBZGRyZXNzMSA9IF9uZXdNYXN0ZXI7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWFzdGVyQWRkcmVzczIoYWRkcmVzcyBfbmV3TWFzdGVyKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtYXN0ZXJBZGRyZXNzMik7CiAgICAgICAgbWFzdGVyQWRkcmVzczIgPSBfbmV3TWFzdGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbmNlbEF1Y3Rpb25Ub0J1eSh1aW50IGNhcmRJZCkgcHVibGljIHsKICAgICAgICBkdXRjaEF1Y3Rpb25Ub0J1eS5jYW5jZWxCdXlBdWN0aW9uKGNhcmRJZCwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gY2FuY2VsQ3JhZnRpbmdBdWN0aW9uKHVpbnQgY2FyZElkKSBwdWJsaWMgewogICAgICAgIGR1dGNoQXVjdGlvblRvQ3JhZnQuY2FuY2VsQ3JhZnRBdWN0aW9uKGNhcmRJZCwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlRHV0Y2hBdWN0aW9uVG9CdXkodWludCBfY2FyZE51bWJlciwgdWludCBzdGFydFByaWNlLCAKICAgIHVpbnQgZW5kUHJpY2UsIHVpbnQgX2xlbnRnaE9mVGltZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9sZW50Z2hPZlRpbWUgPj0gMTAgbWludXRlcyk7CiAgICAgICAgcmVxdWlyZShkdXRjaEF1Y3Rpb25Ub0J1eS5pc0ZvckF1Y3Rpb24oX2NhcmROdW1iZXIpID09IGZhbHNlKTsKICAgICAgICByZXF1aXJlKGR1dGNoQXVjdGlvblRvQ3JhZnQuaXNGb3JBdWN0aW9uKF9jYXJkTnVtYmVyKSA9PSBmYWxzZSk7CiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfY2FyZE51bWJlcikpOwogICAgICAgIF9hcHByb3ZlKF9jYXJkTnVtYmVyLCBkdXRjaEF1Y3Rpb25Ub0J1eSk7CiAgICAgICAgZHV0Y2hBdWN0aW9uVG9CdXkuc3RhcnRBdWN0aW9uKF9jYXJkTnVtYmVyLCBzdGFydFByaWNlLCBlbmRQcmljZSwgX2xlbnRnaE9mVGltZSwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RhcnRDcmFmdGluZ0F1Y3Rpb24odWludCBfY2FyZE51bWJlciwgdWludCBzdGFydFByaWNlLCB1aW50IGVuZFByaWNlLAogICAgdWludCBfbGVudGdoT2ZUaW1lKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX2xlbnRnaE9mVGltZSA+PSAxIG1pbnV0ZXMpOwogICAgICAgIHJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX2NhcmROdW1iZXIpKTsKICAgICAgICBDYXJkU3RydWN0dXJlIHN0b3JhZ2UgY2FyZCA9IGFsbENhcmRzW19jYXJkTnVtYmVyXTsKICAgICAgICByZXF1aXJlKGNhcmQuY2FuQ3JhZnRBdCA8PSBub3cpOwogICAgICAgIHJlcXVpcmUoZHV0Y2hBdWN0aW9uVG9CdXkuaXNGb3JBdWN0aW9uKF9jYXJkTnVtYmVyKSA9PSBmYWxzZSk7CiAgICAgICAgcmVxdWlyZShkdXRjaEF1Y3Rpb25Ub0NyYWZ0LmlzRm9yQXVjdGlvbihfY2FyZE51bWJlcikgPT0gZmFsc2UpOwogICAgICAgIF9hcHByb3ZlKF9jYXJkTnVtYmVyLCBkdXRjaEF1Y3Rpb25Ub0NyYWZ0KTsKICAgICAgICBkdXRjaEF1Y3Rpb25Ub0NyYWZ0LnN0YXJ0QXVjdGlvbihfY2FyZE51bWJlciwgc3RhcnRQcmljZSwgZW5kUHJpY2UsIF9sZW50Z2hPZlRpbWUsIG1zZy5zZW5kZXIpOwogICAgfQoKICAgICAgLy8gY3JhZnQgdHdvIGNhcmRzLiB5b3Ugd2lsbCBnZXQgYSBuZXcgY2FyZC4gCiAgICBmdW5jdGlvbiBjcmFmdFR3b0NhcmRzKHVpbnQgX2NyYWZ0ZWRGcm9tTGVmdCwgdWludCBfY3JhZnRlZEZyb21SaWdodCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF9jcmFmdGVkRnJvbUxlZnQpKTsKICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF9jcmFmdGVkRnJvbVJpZ2h0KSk7CiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGNhcmQgdGhhdCB3aWxsIHByb2R1Y2UgYSBuZXcgY2FyZCBpcyBub3QgdXAgZm9yIGF1Y3Rpb24KICAgICAgICByZXF1aXJlKChpc09uQXVjdGlvblRvQnV5KF9jcmFmdGVkRnJvbUxlZnQpID09IGZhbHNlKSAmJiAoaXNPbkNyYWZ0aW5nQXVjdGlvbihfY3JhZnRlZEZyb21MZWZ0KSA9PSBmYWxzZSkpOwogICAgICAgIHJlcXVpcmUoX2NyYWZ0ZWRGcm9tTGVmdCAhPSBfY3JhZnRlZEZyb21SaWdodCk7CiAgICAgICAgQ2FyZFN0cnVjdHVyZSBzdG9yYWdlIGxlZnRDYXJkID0gYWxsQ2FyZHNbX2NyYWZ0ZWRGcm9tTGVmdF07CiAgICAgICAgQ2FyZFN0cnVjdHVyZSBzdG9yYWdlIHJpZ2h0Q2FyZCA9IGFsbENhcmRzW19jcmFmdGVkRnJvbVJpZ2h0XTsKICAgICAgICByZXF1aXJlKGxlZnRDYXJkLmNhbkNyYWZ0QXQgPD0gbm93KTsKICAgICAgICByZXF1aXJlKHJpZ2h0Q2FyZC5jYW5DcmFmdEF0IDw9IG5vdyk7CiAgICAgICAgc3Bhd25DYXJkKF9jcmFmdGVkRnJvbUxlZnQsIF9jcmFmdGVkRnJvbVJpZ2h0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc09uQ3JhZnRpbmdBdWN0aW9uKHVpbnQgY2FyZE51bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoZHV0Y2hBdWN0aW9uVG9DcmFmdC5pc0ZvckF1Y3Rpb24oY2FyZE51bWJlcikgJiYgZHV0Y2hBdWN0aW9uVG9DcmFmdC5pc1ZhbGlkQXVjdGlvbihjYXJkTnVtYmVyKSk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNPbkF1Y3Rpb25Ub0J1eSh1aW50IGNhcmROdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKGR1dGNoQXVjdGlvblRvQnV5LmlzRm9yQXVjdGlvbihjYXJkTnVtYmVyKSAmJiBkdXRjaEF1Y3Rpb25Ub0J1eS5pc1ZhbGlkQXVjdGlvbihjYXJkTnVtYmVyKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q2FyZEJ1eUF1Y3Rpb24odWludCBjYXJkTnVtYmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKCB1aW50IHN0YXJ0aW5nUHJpY2UsIHVpbnQgZW5kUHJpY2UsIHVpbnQgZHVyYXRpb24sIGFkZHJlc3Mgc2VsbGVyLAogICAgdWludCBzdGFydGVkQXQgKSB7CiAgICAgICAgcmV0dXJuIGR1dGNoQXVjdGlvblRvQnV5LmdldEF1Y3Rpb24oY2FyZE51bWJlcik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q3JhZnRpbmdBdWN0aW9uKHVpbnQgY2FyZE51bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50IHN0YXJ0aW5nUHJpY2UsIHVpbnQgZW5kUHJpY2UsIHVpbnQgZHVyYXRpb24sIGFkZHJlc3Mgc2VsbGVyLCAKICAgIHVpbnQgc3RhcnRlZEF0ICkgewogICAgICAgIHJldHVybiBkdXRjaEF1Y3Rpb25Ub0NyYWZ0LmdldEF1Y3Rpb24oY2FyZE51bWJlcik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEFjdHVhbFByaWNlT2ZDYXJkT25CdXlBdWN0aW9uICh1aW50IGNhcmROdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZHV0Y2hBdWN0aW9uVG9CdXkuZ2V0Q3VycmVudFByaWNlKGNhcmROdW1iZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEFjdHVhbFByaWNlT2ZDYXJkT25DcmFmdEF1Y3Rpb24gKHVpbnQgY2FyZE51bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkdXRjaEF1Y3Rpb25Ub0NyYWZ0LmdldEN1cnJlbnRQcmljZShjYXJkTnVtYmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDcmFmdGluZ0FkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG1hc3RlclJlc3RyaWN0ZWQgewogICAgICAgIENyYWZ0aW5nSW50ZXJmYWNlIGNhbmRpZGF0ZUNvbnRyYWN0ID0gQ3JhZnRpbmdJbnRlcmZhY2UoX2FkZHJlc3MpOwogICAgICAgIGNyYWZ0aW5nID0gY2FuZGlkYXRlQ29udHJhY3Q7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RHV0Y2hBdWN0aW9uVG9DcmFmdEFkZHJlc3MoKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoZHV0Y2hBdWN0aW9uVG9DcmFmdCk7CiAgICB9CgogICAgIGZ1bmN0aW9uIGdldER1dGNoQXVjdGlvblRvQnV5QWRkcmVzcygpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gYWRkcmVzcyhkdXRjaEF1Y3Rpb25Ub0J1eSk7CiAgICB9CgogICAgZnVuY3Rpb24gX3N0YXJ0Q3JhZnRSZWNvdmVyeShDYXJkU3RydWN0dXJlIHN0b3JhZ2UgY2FyZCkgaW50ZXJuYWwgewoKICAgICAgICB1aW50IGJhc2UgPSBjYXJkLmdlbmVyYXRpb24gKyBjYXJkLmRpZmZpY3VsdHkgKyAxOwogICAgICAgIGlmIChiYXNlIDwgNikgewogICAgICAgICAgICBiYXNlID0gYmFzZSAqICgxIG1pbnV0ZXMpOwogICAgICAgIH0gZWxzZSBpZiAoIGJhc2UgPCAxMSkgewogICAgICAgICAgICBiYXNlID0gKGJhc2UgLSA1KSAqICgxIGhvdXJzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBiYXNlID0gKGJhc2UgLSAxMCkgKiAoMSBkYXlzKTsKICAgICAgICB9CiAgICAgICAgYmFzZSA9IGJhc2UgKiAyOwogICAgICAgIAogICAgICAgIGNhcmQuY2FuQ3JhZnRBdCA9IHVpbnQ2NChub3cgKyBiYXNlKTsKCiAgICAgICAgaWYgKGNhcmQuZGlmZmljdWx0eSA8IDE1KSB7CiAgICAgICAgICAgIGNhcmQuZGlmZmljdWx0eSsrOwogICAgICAgIH0KICAgIH0KCiAgICAgZnVuY3Rpb24gYmlkT25DcmFmdEF1Y3Rpb24odWludCBjYXJkSWRUb0JpZE9uLCB1aW50IGNhcmRJZFRvQ3JhZnRXaXRoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBjYXJkSWRUb0NyYWZ0V2l0aCkpOwogICAgICAgIENhcmRTdHJ1Y3R1cmUgc3RvcmFnZSBjYXJkVG9CaWRPbiA9IGFsbENhcmRzW2NhcmRJZFRvQmlkT25dOwogICAgICAgIENhcmRTdHJ1Y3R1cmUgc3RvcmFnZSBjYXJkVG9DcmFmdFdpdGggPSBhbGxDYXJkc1tjYXJkSWRUb0NyYWZ0V2l0aF07CiAgICAgICAgcmVxdWlyZShjYXJkVG9DcmFmdFdpdGguY2FuQ3JhZnRBdCA8PSBub3cpOwogICAgICAgIHJlcXVpcmUoY2FyZFRvQmlkT24uY2FuQ3JhZnRBdCA8PSBub3cpOwogICAgICAgIHJlcXVpcmUoY2FyZElkVG9CaWRPbiAhPSBjYXJkSWRUb0NyYWZ0V2l0aCk7CiAgICAgICAgdWludCBiaWRBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgLy8gdGhlIGJpZCBmdW5jaXRvbiBlbnN1cmVzIHRoYXQgdGhlIHNlbGxlciBhY3V0YWxseSBvd25zIHRoZSBjYXJkIGJlaW5nIHNvbGQKICAgICAgICBkdXRjaEF1Y3Rpb25Ub0NyYWZ0LnBsYWNlQmlkRnJvbUV0aGVyU2Nyb2xscy52YWx1ZShiaWRBbW91bnQpKGNhcmRJZFRvQmlkT24pOwogICAgICAgIHNwYXduQ2FyZChjYXJkSWRUb0NyYWZ0V2l0aCwgY2FyZElkVG9CaWRPbik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNwYXduQ2FyZCh1aW50IF9jcmFmdGVkRnJvbUxlZnQsIHVpbnQgX2NyYWZ0ZWRGcm9tUmlnaHQpIGludGVybmFsIHJldHVybnModWludCkgewogICAgICAgIENhcmRTdHJ1Y3R1cmUgc3RvcmFnZSBsZWZ0Q2FyZCA9IGFsbENhcmRzW19jcmFmdGVkRnJvbUxlZnRdOwogICAgICAgIENhcmRTdHJ1Y3R1cmUgc3RvcmFnZSByaWdodENhcmQgPSBhbGxDYXJkc1tfY3JhZnRlZEZyb21SaWdodF07CgogICAgICAgIF9zdGFydENyYWZ0UmVjb3ZlcnkocmlnaHRDYXJkKTsKICAgICAgICBfc3RhcnRDcmFmdFJlY292ZXJ5KGxlZnRDYXJkKTsKCiAgICAgICAgdWludDE2IHBhcmVudEdlbiA9IGxlZnRDYXJkLmdlbmVyYXRpb247CiAgICAgICAgaWYgKHJpZ2h0Q2FyZC5nZW5lcmF0aW9uID4gbGVmdENhcmQuZ2VuZXJhdGlvbikgewogICAgICAgICAgICBwYXJlbnRHZW4gPSByaWdodENhcmQuZ2VuZXJhdGlvbjsKICAgICAgICB9CgogICAgICAgIHBhcmVudEdlbiArPSAxOwogICAgICAgIGlmIChwYXJlbnRHZW4gPiAxOCkgewogICAgICAgICAgICBwYXJlbnRHZW4gPSAxODsKICAgICAgICB9CgogICAgICAgIHVpbnQxNlsxNl0gbWVtb3J5IHJ1bmVzOwogICAgICAgIHVpbnQxNlsxNl0gbWVtb3J5IHBvd2VyczsKCiAgICAgICAgKHJ1bmVzLCBwb3dlcnMpID0gY3JhZnRpbmcuY3JhZnQobGVmdENhcmQucnVuZXMsIGxlZnRDYXJkLnBvd2VycywgcmlnaHRDYXJkLnJ1bmVzLCByaWdodENhcmQucG93ZXJzKTsKICAgICAgICBhZGRyZXNzIG93bmVyID0gaW5kZXhUb093bmVyW19jcmFmdGVkRnJvbUxlZnRdOwogICAgICAKICAgICAgICByZXR1cm4gX2NyZWF0ZUNhcmQocnVuZXMsIHBvd2VycywgX2NyYWZ0ZWRGcm9tTGVmdCwgX2NyYWZ0ZWRGcm9tUmlnaHQsIHBhcmVudEdlbiwgb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgcGF5YWJsZSB7fQoKICAgIGZ1bmN0aW9uIGJpZE9uQXVjdGlvblRvQnV5KHVpbnQgY2FyZE51bWJlcikgcHVibGljIHBheWFibGUgewogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gZHV0Y2hBdWN0aW9uVG9CdXkuZ2V0U2VsbGVyT2ZUb2tlbihjYXJkTnVtYmVyKTsKICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgc2VsbGVyIHN0aWxsIG93bnMgdGhlIGNhcmQKICAgICAgICB1aW50IGJpZEFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICBkdXRjaEF1Y3Rpb25Ub0J1eS5iaWRGcm9tRXRoZXJTY3JvbGxzLnZhbHVlKGJpZEFtb3VudCkoY2FyZE51bWJlciwgbXNnLnNlbmRlcik7CiAgICAgICAgLy8gaWYgYSB6ZXJvIGdlbmVyYXRpb24gY2FyZCB3YXMganVzdCBib3VnaHQKICAgICAgICBpZiAoc2VsbGVyID09IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgc3Bhd25OZXdaZXJvQ2FyZEludGVybmFsKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIDI1MCBpcyB0aGUgbWF4IG51bWJlciBvZiBjYXJkcyB0aGF0IHRoZSBkZXZlbG9wZXJzIGFyZSBhbGxvd2VkIHRvIHByaW50IHRoZW1zZWx2ZXMKICAgIGZ1bmN0aW9uIHNwYXduTmV3WmVyb0NhcmQoKSBwdWJsaWMgbWFzdGVyUmVzdHJpY3RlZCB7CiAgICAgICAgaWYgKG51bWJlck9mU3BlY2lhbENhcmRzQ3JlYXRlZCA8IDI1MCkgewogICAgICAgICAgICBzcGF3bk5ld1plcm9DYXJkSW50ZXJuYWwoKTsKICAgICAgICAgICAgbnVtYmVyT2ZTcGVjaWFsQ2FyZHNDcmVhdGVkKys7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNwYXduTmV3WmVyb0NhcmRJbnRlcm5hbCgpIGludGVybmFsIHsKCiAgICAgICAgdWludDE2WzE2XSBtZW1vcnkgcnVuZXMgPSBnZW5lcmF0ZVJ1bmVzKCk7CiAgICAgICAgdWludDE2IHggPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gMSkpICUgOSkgKyAxOwogICAgICAgIHVpbnQxNiB5ID0gdWludDE2KHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDIpKSAlIDkpICsgMTsKICAgIAogICAgICAgIHVpbnQxNlsxNl0gbWVtb3J5IHBvd2VycyA9IFt1aW50MTYoMjUpLCB1aW50MTYoMTApLCB1aW50MTYoNSksIHVpbnQxNigwKSwgdWludDE2KDApLCB1aW50MTYoMCksIHVpbnQxNigwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MTYoMjUpLCB1aW50MTYoMTApLCB1aW50MTYoNSksIHVpbnQxNigwKSwgdWludDE2KDApLCB1aW50MTYoMCksIHVpbnQxNigwKSwgeCwgeV07CiAgICAgICAgCiAgICAgICAgdWludCBjYXJkTnVtYmVyID0gX2NyZWF0ZUNhcmQocnVuZXMsIHBvd2VycywgMCwgMCwgMCwgYWRkcmVzcyh0aGlzKSk7CgogICAgICAgIF9hcHByb3ZlKGNhcmROdW1iZXIsIGR1dGNoQXVjdGlvblRvQnV5KTsKCiAgICAgICAgdWludCBwcmljZSA9IGR1dGNoQXVjdGlvblRvQnV5LnByaWNlT2ZPZmZpY2FsQ2FyZFNvbGQoKSAqIDI7CiAgICAgICAgLy8gMTEwMDAwMDAwMDAwMDAwMDAgd2VpIGlzIC4wMTEgZXRoCiAgICAgICAgaWYgKHByaWNlIDwgMTEwMDAwMDAwMDAwMDAwMDAgKSB7CiAgICAgICAgICAgIHByaWNlID0gMTEwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgfQoKICAgICAgICBkdXRjaEF1Y3Rpb25Ub0J1eS5zdGFydEF1Y3Rpb24oY2FyZE51bWJlciwgcHJpY2UsIDAsIDIgZGF5cywgYWRkcmVzcyh0aGlzKSk7CgogICAgfQoKICAgIGZ1bmN0aW9uIGdpZnRDYXJkKHVpbnQgY2FyZElkLCBhZGRyZXNzIHJlY2lldmVyKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoKGlzT25BdWN0aW9uVG9CdXkoY2FyZElkKSA9PSBmYWxzZSkgJiYgKGlzT25DcmFmdGluZ0F1Y3Rpb24oY2FyZElkKSA9PSBmYWxzZSkpOwogICAgICAgIHJlcXVpcmUob3duZXJPZihjYXJkSWQpID09IG1zZy5zZW5kZXIpOwogICAgICAgIHRyYW5zZmVyKHJlY2lldmVyLCBjYXJkSWQpOwogICAgICAgIEdpZnQoY2FyZElkLCBtc2cuc2VuZGVyLCByZWNpZXZlcik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2VuZXJhdGVSdW5lcygpIGludGVybmFsIHJldHVybnMgKHVpbnQxNlsxNl0pIHsKICAgICAgICAKICAgICAgICB1aW50IGkgPSAxOwogICAgICAgIHVpbnQgbGFzdEJhc2VJbmRleCA9IGFycmF5T2ZQb3NzaWJsZUJhc2VzLmxlbmd0aDsKICAgICAgICB1aW50MTYgYmFzZTEgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEJhc2VJbmRleCk7IAogICAgICAgIGkrKzsKICAgICAgICB1aW50MTYgYmFzZTIgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEJhc2VJbmRleCk7CiAgICAgICAgaSsrOwogICAgICAgIHVpbnQxNiBiYXNlMyA9IHVpbnQxNih1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpKSkgJSBsYXN0QmFzZUluZGV4KTsKICAgICAgICBpKys7CiAgICAgICAgCiAgICAgICAgLy8gZW5zdXJlIHRoYXQgZWFjaCBydW5lIGlzIGRpc3RpbmN0CiAgICAgICAgd2hpbGUgKGJhc2UxID09IGJhc2UyIHx8IGJhc2UyID09IGJhc2UzIHx8IGJhc2UzID09IGJhc2UxKSB7CiAgICAgICAgICAgIGJhc2UxID0gdWludDE2KHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIGkpKSAlIGxhc3RCYXNlSW5kZXgpOwogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIGJhc2UyID0gdWludDE2KHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIGkpKSAlIGxhc3RCYXNlSW5kZXgpOwogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIGJhc2UzID0gdWludDE2KHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIGkpKSAlIGxhc3RCYXNlSW5kZXgpOwogICAgICAgICAgICBpKys7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGJhc2UxID0gYXJyYXlPZlBvc3NpYmxlQmFzZXNbYmFzZTFdOwogICAgICAgIGJhc2UyID0gYXJyYXlPZlBvc3NpYmxlQmFzZXNbYmFzZTJdOwogICAgICAgIGJhc2UzID0gYXJyYXlPZlBvc3NpYmxlQmFzZXNbYmFzZTNdOwoKICAgICAgICB1aW50IGxhc3RBYmlsaXR5SW5kZXggPSBhcnJheU9mUG9zc2libGVBYmlsaXRpZXMubGVuZ3RoOwogICAgICAgIHVpbnQxNiBhYmlsaXR5MSA9IHVpbnQxNih1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpKSkgJSBsYXN0QWJpbGl0eUluZGV4KTsKICAgICAgICBpKys7CiAgICAgICAgdWludDE2IGFiaWxpdHkyID0gdWludDE2KHVpbnQoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIGkpKSAlIGxhc3RBYmlsaXR5SW5kZXgpOwogICAgICAgIGkrKzsKICAgICAgICB1aW50MTYgYWJpbGl0eTMgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEFiaWxpdHlJbmRleCk7CiAgICAgICAgaSsrOwoKICAgICAgICAvLyBlbnN1cmUgdGhhdCBlYWNoIHJ1bmUgaXMgZGlzdGluY3QKICAgICAgICB3aGlsZSAoYWJpbGl0eTEgPT0gYWJpbGl0eTIgfHwgYWJpbGl0eTIgPT0gYWJpbGl0eTMgfHwgYWJpbGl0eTMgPT0gYWJpbGl0eTEpIHsKICAgICAgICAgICAgYWJpbGl0eTEgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEFiaWxpdHlJbmRleCk7CiAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgYWJpbGl0eTIgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEFiaWxpdHlJbmRleCk7CiAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgYWJpbGl0eTMgPSB1aW50MTYodWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gaSkpICUgbGFzdEFiaWxpdHlJbmRleCk7CiAgICAgICAgICAgIGkrKzsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYWJpbGl0eTEgPSBhcnJheU9mUG9zc2libGVBYmlsaXRpZXNbYWJpbGl0eTFdOwogICAgICAgIGFiaWxpdHkyID0gYXJyYXlPZlBvc3NpYmxlQWJpbGl0aWVzW2FiaWxpdHkyXTsKICAgICAgICBhYmlsaXR5MyA9IGFycmF5T2ZQb3NzaWJsZUFiaWxpdGllc1thYmlsaXR5M107CgogICAgICAgIG51bWJlck9mQmFzZXNTb2xkW2Jhc2UxXSsrOwogICAgICAgIG51bWJlck9mQWJpbGl0aWVzU29sZFthYmlsaXR5MV0rKzsKCiAgICAgICAgLy8gaWYgd2UgaGF2ZSByZWFjaGVkIHRoZSBtYXggbnVtYmVyIG9mIHJ1bmVzCiAgICAgICAgaWYgKG51bWJlck9mQmFzZXNTb2xkW2Jhc2UxXSA+IG1heFJ1bmVzKSB7CiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgcnVuZSBmcm9tIHRoZSBsaXN0IG9mIHBvc3NpYmxlIHJ1bmVzCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJheU9mUG9zc2libGVCYXNlcy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgIGlmIChhcnJheU9mUG9zc2libGVCYXNlc1tpXSA9PSBiYXNlMSkgewogICAgICAgICAgICAgICAgLy8gYWRkIGEgbmV3IHJ1bmUgdG8gdGhlIGxpc3QKICAgICAgICAgICAgICAgIC8vIHdlIGRvbnQgbmVlZCBhIGNoZWNrIGhlcmUgdG8gc2VlIGlmIGxhc3RCYXNlQ2FyZFRvQmVBZGRlZFRvQ2lyY3VsYXRpb24gb3ZlcmZsb3dzIGJlY2F1c2UKICAgICAgICAgICAgICAgIC8vIHRoZSA1MGsgbWF4IGNhcmQgbGltaXQgd2lsbCBleHBpcmUgd2VsbCBiZWZvcmUgdGhpcyBsaW1pdCBpcyByZWFjaGVkCiAgICAgICAgICAgICAgICBsYXN0QmFzZVRvQmVBZGRlZFRvQ2lyY3VsYXRpb24rKzsKICAgICAgICAgICAgICAgIGFycmF5T2ZQb3NzaWJsZUJhc2VzW2ldID0gbGFzdEJhc2VUb0JlQWRkZWRUb0NpcmN1bGF0aW9uOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChudW1iZXJPZkFiaWxpdGllc1NvbGRbYWJpbGl0eTFdID4gbWF4UnVuZXMpIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBydW5lIGZyb20gdGhlIGxpc3Qgb2YgcG9zc2libGUgcnVuZXMKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmF5T2ZQb3NzaWJsZUFiaWxpdGllcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKGFycmF5T2ZQb3NzaWJsZUFiaWxpdGllc1tpXSA9PSBhYmlsaXR5MSkgewogICAgICAgICAgICAgICAgLy8gd2UgZG9udCBuZWVkIHRvIGNoZWNrIGZvciBvdmVyZmxvdyBoZXJlIGJlY2F1c2Ugb2YgdGhlIDMwMCBydW5lIGxpbWl0cwogICAgICAgICAgICAgICAgbGFzdEFiaWxpdHlUb0JlQWRkZWRUb0NpcmN1bGF0aW9uKys7CiAgICAgICAgICAgICAgICBhcnJheU9mUG9zc2libGVBYmlsaXRpZXNbaV0gPSBsYXN0QWJpbGl0eVRvQmVBZGRlZFRvQ2lyY3VsYXRpb247CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFtiYXNlMSwgYmFzZTIsIGJhc2UzLCB1aW50MTYoMCksIHVpbnQxNigwKSwgdWludDE2KDApLCB1aW50MTYoMCksIAogICAgICAgICAgICAgICAgYWJpbGl0eTEsIGFiaWxpdHkyLCBhYmlsaXR5MywgdWludDE2KDApLCB1aW50MTYoMCksIHVpbnQxNigwKSwgdWludDE2KDApLCAgYmFzZTEsIGFiaWxpdHkxXTsKICAgIH0KfQoKY29udHJhY3QgRXRoZXJTY3JvbGxzIGlzIENhcmRNYXJrZXQgewogICAgCiAgICBmdW5jdGlvbiBFdGhlclNjcm9sbHMoYWRkcmVzcyBtYXN0ZXIxLCBhZGRyZXNzIG1hc3RlcjIsIGFkZHJlc3Mgd2l0aGRyYXdBZGRyZXNzKSBwdWJsaWMgQ2FyZE1hcmtldChtYXN0ZXIxLCBtYXN0ZXIyLCB3aXRoZHJhd0FkZHJlc3MpIHt9Cgp9'.
	

]
