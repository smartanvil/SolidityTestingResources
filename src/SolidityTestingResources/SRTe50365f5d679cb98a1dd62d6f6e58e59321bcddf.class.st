Class {
	#name : #SRTe50365f5d679cb98a1dd62d6f6e58e59321bcddf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe50365f5d679cb98a1dd62d6f6e58e59321bcddf >> base64 [
	^ ''.
	

]
