Class {
	#name : #SRT5fcf7d4634f385a90cb790ab2a7632b252bbbc08,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5fcf7d4634f385a90cb790ab2a7632b252bbbc08 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBFdGhlclJhY2luZyBpcyBPd25hYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIHN0cnVjdCBDdXN0b21lciB7CiAgICAgICAgYnl0ZXMzMiBuYW1lOwogICAgICAgIHVpbnQyNTYgZWFybmVkOwogICAgICAgIHVpbnQxNiBjX251bTsKICAgICAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQxNikgZ2FyYWdlOwogICAgICAgIHVpbnQyNTZbXSBnYXJhZ2VfaWR4OwogICAgfQoKICAgIHN0cnVjdCBDYXIgewogICAgICB1aW50MjU2IGlkOwogICAgICBieXRlczMyIG5hbWU7CiAgICAgIHVpbnQyNTYgc19wcmljZTsKICAgICAgdWludDI1NiBjX3ByaWNlOwogICAgICB1aW50MjU2IGVhcm5pbmc7CiAgICAgIHVpbnQyNTYgb19lYXJuaW5nOwogICAgICB1aW50MTYgc19jb3VudDsKICAgICAgdWludDE2IGJyYW5kOwogICAgICB1aW50OCBjdHlwZTsKICAgICAgdWludDggc3BkOwogICAgICB1aW50OCBhY2M7CiAgICAgIHVpbnQ4IGR1cjsKICAgICAgdWludDggaG5kbDsKICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MTYpIGNfb3duZXJzOwogICAgfQoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICdDYXJUb2tlbic7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICdDQVInOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBJTklUSUFMX1NVUFBMWSA9IDEwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKCiAgICB1aW50MjU2IHByaXZhdGUgc3RvcmVfYmFsYW5jZTsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEN1c3RvbWVyKSBwcml2YXRlIGN1c3RvbWVyczsKICAgIC8vbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwZW5kaW5nV2l0aGRyYXdhbHM7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IENhcikgcHVibGljIGNhcnM7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3NbXSkgcHVibGljIHllc0J1eWVyOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIHVpbnQyNTZbXSBwdWJsaWMgY2FyQWNjdHM7CgogICAgLyogU3RvcmUgRXZlbnRzICovCgogICAgZXZlbnQgQ2FyUmVnaXN0ZXJlZCh1aW50MjU2IGNhcklkKTsKICAgIGV2ZW50IENhclVwZGF0ZWQodWludDI1NiBjYXJJZCk7CiAgICBldmVudCBDYXJEZXJlZ2lzdGVyZWQodWludDI1NiBjYXJJZCk7CiAgICBldmVudCBDYXJSZWdpc3RyYXRpb25GYWlsZWQodWludDI1NiBjYXJJZCk7CiAgICBldmVudCBDYXJEZXJlZ2lzdHJhdGlvbkZhbGVkKHVpbnQyNTYgY2FySWQpOwoKICAgIGV2ZW50IEJ1eUNhckNvbXBsZXRlZChhZGRyZXNzIGN1c3RvbWVyLCB1aW50MjU2IHBheW1lbnRTdW0pOwogICAgZXZlbnQgQnV5Q2FyRmFpbGVkKGFkZHJlc3MgY3VzdG9tZXIsIHVpbnQyNTYgY3VzdG9tZXJCYWxhbmNlLCB1aW50MjU2IHBheW1lbnRTdW0pOwogICAgZXZlbnQgRXZlbnRDYXNoT3V0IChhZGRyZXNzIGluZGV4ZWQgcGxheWVyLHVpbnQyNTYgYW1vdW50KTsKCiAgICBmdW5jdGlvbiBFdGhlclJhY2luZygpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBzdG9yZV9iYWxhbmNlID0gMDsKICAgICAgICBiYWxhbmNlc1t0eC5vcmlnaW5dID0gSU5JVElBTF9TVVBQTFk7CiAgICB9CgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CgogICAgfQoKICAgIGZ1bmN0aW9uIHNldEluc2VydENhcihieXRlczMyIF9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX3NfcHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfZWFybmluZywKICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF9vX2Vhcm5pbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDE2IF9icmFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfY3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDggX3NwZCwKICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfYWNjLAogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4IF9kdXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDggX2huZGwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdmFyIF9pZCA9IGNhckFjY3RzLmxlbmd0aCArIDE7CiAgICAgICAgdmFyIGNhciA9IENhcihfaWQsIF9uYW1lLCBfc19wcmljZSwgX3NfcHJpY2UsIF9lYXJuaW5nLCBfb19lYXJuaW5nLAogICAgICAgICAgICAgICAgICAgICAgMCwgX2JyYW5kLCBfY3R5cGUsIF9zcGQsIF9hY2MsIF9kdXIsIF9obmRsKTsKICAgICAgICBjYXJzW19pZF0gPSBjYXI7CiAgICAgICAgY2FyQWNjdHMucHVzaChfaWQpOwogICAgICAgIENhclJlZ2lzdGVyZWQoX2lkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVDYXIodWludDI1NiBfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzMzIgX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX3NfcHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2Vhcm5pbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX29fZWFybmluZywKICAgICAgICAgICAgICAgICAgICAgICAgdWludDE2IF9icmFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDggX2N0eXBlLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfc3BkLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfYWNjLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfZHVyLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBfaG5kbCkKICAgICAgICAgICAgICAgICAgICAgICAgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgQ2FyIHN0b3JhZ2UgY2FyID0gY2Fyc1tfaWRdOwogICAgICAgIGNhci5uYW1lID0gX25hbWU7CiAgICAgICAgY2FyLnNfcHJpY2UgPSBfc19wcmljZTsKICAgICAgICBjYXIuZWFybmluZyA9IF9lYXJuaW5nOwogICAgICAgIGNhci5vX2Vhcm5pbmcgPSBfb19lYXJuaW5nOwogICAgICAgIGNhci5icmFuZCA9IF9icmFuZDsKICAgICAgICBjYXIuY3R5cGUgPSBfY3R5cGU7CiAgICAgICAgY2FyLnNwZCA9IF9zcGQ7CiAgICAgICAgY2FyLmFjYyA9IF9hY2M7CiAgICAgICAgY2FyLmR1ciA9IF9kdXI7CiAgICAgICAgY2FyLmhuZGwgPSBfaG5kbDsKICAgICAgICBDYXJVcGRhdGVkKF9pZCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q2FyKHVpbnQyNTYgX2lkKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50MjU2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlczMyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MTYpIHsKICAgICAgICBDYXIgc3RvcmFnZSBjYXIgPSBjYXJzW19pZF07CiAgICAgICAgcmV0dXJuIChjYXIuaWQsIGNhci5uYW1lLCBjYXIuc19wcmljZSwgY2FyLmNfcHJpY2UsIGNhci5lYXJuaW5nLCBjYXIub19lYXJuaW5nLCBjYXIuc19jb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q2FycygpIHZpZXcgcHVibGljIHJldHVybnModWludDI1NltdKSB7CiAgICAgICAgcmV0dXJuIGNhckFjY3RzOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENhck5hbWUodWludDI1NiBfaWQpIHZpZXcgcHVibGljIHJldHVybnMgKGJ5dGVzMzIpewogICAgICByZXR1cm4gY2Fyc1tfaWRdLm5hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gY291bnRDYXJzKCkgdmlldyBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBjYXJBY2N0cy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZGVsZXRlQ2FyKHVpbnQyNTYgX2lkKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBDYXIgc3RvcmFnZSBjYXIgPSBjYXJzW19pZF07CiAgICAgIGlmIChjYXIuaWQgPT0gX2lkKSB7CiAgICAgICAgZGVsZXRlIGNhcnNbX2lkXTsKICAgICAgICBDYXJEZXJlZ2lzdGVyZWQoX2lkKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBDYXJEZXJlZ2lzdHJhdGlvbkZhbGVkKF9pZCk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlDYXIodWludDI1NiBfaWQpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX2lkID4gMCk7CiAgICAgICAgcmVxdWlyZShjYXJzW19pZF0uY19wcmljZSA+IDAgJiYgKG1zZy52YWx1ZSArIGJhbGFuY2VzW21zZy5zZW5kZXJdKSA+IDApOwogICAgICAgIHJlcXVpcmUoKG1zZy52YWx1ZSArIGJhbGFuY2VzW21zZy5zZW5kZXJdKSA+PSBjYXJzW19pZF0uY19wcmljZSk7CiAgICAgICAgQ3VzdG9tZXIgc3RvcmFnZSBjdXN0b21lciA9IGN1c3RvbWVyc1ttc2cuc2VuZGVyXTsKICAgICAgICBjdXN0b21lci5nYXJhZ2VbX2lkXSArPSAxOwogICAgICAgIGN1c3RvbWVyLmdhcmFnZV9pZHgucHVzaChfaWQpOwogICAgICAgIGN1c3RvbWVyLmNfbnVtICs9IDE7CiAgICAgICAgY2Fyc1tfaWRdLnNfY291bnQgKz0gMTsKCiAgICAgICAgaWYgKChtc2cudmFsdWUgKyBiYWxhbmNlc1ttc2cuc2VuZGVyXSkgPiBjYXJzW19pZF0uY19wcmljZSkKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlIC0gY2Fyc1tfaWRdLmNfcHJpY2U7CgogICAgICAgIHVpbnQyNTYgZl9wcmljZSA9IGNhcnNbX2lkXS5lYXJuaW5nICogY2Fyc1tfaWRdLnNfY291bnQgKyBjYXJzW19pZF0ub19lYXJuaW5nOwogICAgICAgIGlmKGZfcHJpY2UgPiBjYXJzW19pZF0uc19wcmljZSl7CiAgICAgICAgICBjYXJzW19pZF0uY19wcmljZSA9IGZfcHJpY2U7CiAgICAgICAgfQogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHllc0J1eWVyW19pZF0ubGVuZ3RoOyArK2kpewogICAgICAgICAgICBhZGRyZXNzIGJ1eWVyID0geWVzQnV5ZXJbX2lkXVtpXTsKICAgICAgICAgICAgdWludDE2IGJ1eV9jb3VudCA9IGNhcnNbX2lkXS5jX293bmVyc1tidXllcl07CiAgICAgICAgICAgIHVpbnQyNTYgZWFybmVkID0gY2Fyc1tfaWRdLmVhcm5pbmcgKiBidXlfY291bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW2J1eWVyXSArPSBlYXJuZWQ7CiAgICAgICAgICAgIGN1c3RvbWVyc1tidXllcl0uZWFybmVkICs9IGVhcm5lZDsKCiAgICAgICAgfQogICAgICAgIGJhbGFuY2VzW293bmVyXSArPSBjYXJzW19pZF0uY19wcmljZSAtIGNhcnNbX2lkXS5lYXJuaW5nICogY2Fyc1tfaWRdLnNfY291bnQ7CiAgICAgICAgY2Fyc1tfaWRdLmNfb3duZXJzW21zZy5zZW5kZXJdICs9MTsKICAgICAgICBpZihjYXJzW19pZF0uY19vd25lcnNbbXNnLnNlbmRlcl0gPT0gMSl7CiAgICAgICAgICB5ZXNCdXllcltfaWRdLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgfQogICAgICAgIEJ1eUNhckNvbXBsZXRlZChtc2cuc2VuZGVyLCBjYXJzW19pZF0uY19wcmljZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TXlDYXJzSWR4KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NltdKXsKICAgICAgICBDdXN0b21lciBzdG9yYWdlIGN1c3RvbWVyID0gY3VzdG9tZXJzW21zZy5zZW5kZXJdOwogICAgICAgIHJldHVybiBjdXN0b21lci5nYXJhZ2VfaWR4OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE15Q2Fyc0lkeENvdW50KHVpbnQyNTYgX2lkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MTYpewogICAgICAgIEN1c3RvbWVyIHN0b3JhZ2UgY3VzdG9tZXIgPSBjdXN0b21lcnNbbXNnLnNlbmRlcl07CiAgICAgICAgcmV0dXJuIGN1c3RvbWVyLmdhcmFnZVtfaWRdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEN1c3RvbWVyKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYnl0ZXMzMiBfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfYmFsYW5jZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfZWFybmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MTYgX2NfbnVtKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBfbmFtZSA9IGN1c3RvbWVyc1ttc2cuc2VuZGVyXS5uYW1lOwogICAgICAgICAgICBfYmFsYW5jZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgICAgICBfZWFybmVkID0gY3VzdG9tZXJzW21zZy5zZW5kZXJdLmVhcm5lZDsKICAgICAgICAgICAgX2NfbnVtID0gY3VzdG9tZXJzW21zZy5zZW5kZXJdLmNfbnVtOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKF9uYW1lLCBfYmFsYW5jZSwgX2Vhcm5lZCwgX2NfbnVtKTsKICAgIH0KCiAgICBmdW5jdGlvbiBlYXJuZWRPZihhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGN1c3RvbWVyc1tfYWRkcmVzc10uZWFybmVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhcm51bU9mKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQxNikgewogICAgICAgIHJldHVybiBjdXN0b21lcnNbX2FkZHJlc3NdLmNfbnVtOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJhbGFuY2VJbkV0aChhZGRyZXNzIGFkZHIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAJCXJldHVybiBjb252ZXJ0KGdldEJhbGFuY2UoYWRkciksMik7CiAgCX0KCiAgCWZ1bmN0aW9uIGdldEJhbGFuY2UoYWRkcmVzcyBhZGRyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAJCXJldHVybiBiYWxhbmNlc1thZGRyXTsKICAJfQoKICAgIGZ1bmN0aW9uIGdldFN0b3JlQmFsYW5jZSgpIG9ubHlPd25lciBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0aGlzLmJhbGFuY2U7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoKICAgICAgICByZXF1aXJlKF9hbW91bnQgPj0gMCk7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID09IHVpbnQyNTYodWludDEyOChfYW1vdW50KSkpOwogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IF9hbW91bnQpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCk7CgogICAgICAgIGlmIChfYW1vdW50ID09IDApCiAgICAgICAgICAgIF9hbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKCiAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoX2Ftb3VudCkpCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IF9hbW91bnQ7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgRXZlbnRDYXNoT3V0KG1zZy5zZW5kZXIsIF9hbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnZlcnQodWludDI1NiBhbW91bnQsdWludDI1NiBjb252ZXJzaW9uUmF0ZSkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDI1NiBjb252ZXJ0ZWRBbW91bnQpCiAgICB7CiAgICAgIHJldHVybiBhbW91bnQgKiBjb252ZXJzaW9uUmF0ZTsKICAgIH0KCgp9'.
	

]
