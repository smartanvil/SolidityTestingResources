Class {
	#name : #SRTc316f2596a41db5bd29b502b338bccf43f76d504,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc316f2596a41db5bd29b502b338bccf43f76d504 >> base64 [
	^ ''.
	

]
