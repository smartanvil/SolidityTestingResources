Class {
	#name : #SRT4f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf >> base64 [
	^ ''.
	

]
