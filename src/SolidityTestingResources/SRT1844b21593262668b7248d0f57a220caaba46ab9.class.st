Class {
	#name : #SRT1844b21593262668b7248d0f57a220caaba46ab9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1844b21593262668b7248d0f57a220caaba46ab9 >> base64 [
	^ ''.
	

]
