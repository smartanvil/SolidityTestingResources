Class {
	#name : #SRTbfa4d71a51b9e0968be4bc299f8ba6cbb2f86789,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbfa4d71a51b9e0968be4bc299f8ba6cbb2f86789 >> base64 [
	^ ''.
	

]
