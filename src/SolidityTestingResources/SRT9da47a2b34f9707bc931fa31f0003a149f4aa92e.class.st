Class {
	#name : #SRT9da47a2b34f9707bc931fa31f0003a149f4aa92e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9da47a2b34f9707bc931fa31f0003a149f4aa92e >> base64 [
	^ ''.
	

]
