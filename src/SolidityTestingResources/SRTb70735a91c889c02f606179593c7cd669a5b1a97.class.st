Class {
	#name : #SRTb70735a91c889c02f606179593c7cd669a5b1a97,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb70735a91c889c02f606179593c7cd669a5b1a97 >> base64 [
	^ ''.
	

]
