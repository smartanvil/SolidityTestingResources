Class {
	#name : #SRT23f47686c26aaf2cc3227b1cf7e19b6c8760ed4b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23f47686c26aaf2cc3227b1cf7e19b6c8760ed4b >> base64 [
	^ ''.
	

]
