Class {
	#name : #SRT436a89084fee7b3b5696c76caf36ae7f0aa45d9e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT436a89084fee7b3b5696c76caf36ae7f0aa45d9e >> base64 [
	^ 'Ly8gQ29weXJpZ2h0IChjKSAyMDE2IENocm9uaWNsZWQsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KLy8gaHR0cDovL2V4cGxvcmVyLmNocm9uaWNsZWQub3JnCi8vIGh0dHA6Ly9kZW1vLmNocm9uaWNsZWQub3JnCi8vIGh0dHA6Ly9jaHJvbmljbGVkLm9yZwoKY29udHJhY3QgUmVnaXN0cmFyIHsKICAgIGFkZHJlc3MgcHVibGljIHJlZ2lzdHJhcjsKCiAgICAvKioKCiAgICAqIENyZWF0ZWQgZXZlbnQsIGdldHMgdHJpZ2dlcmVkIHdoZW4gYSBuZXcgcmVnaXN0cmFudCBnZXRzIGNyZWF0ZWQKICAgICogZXZlbnQKICAgICogQHBhcmFtIHJlZ2lzdHJhbnQgLSBUaGUgcmVnaXN0cmFudCBhZGRyZXNzLgogICAgKiBAcGFyYW0gcmVnaXN0cmFyIC0gVGhlIHJlZ2lzdHJhciBhZGRyZXNzLgogICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIG9mIHRoZSByZWdpc3RyYW50LgogICAgKi8KICAgIGV2ZW50IENyZWF0ZWQoYWRkcmVzcyBpbmRleGVkIHJlZ2lzdHJhbnQsIGFkZHJlc3MgcmVnaXN0cmFyLCBieXRlcyBkYXRhKTsKCiAgICAvKioKICAgICogVXBkYXRlZCBldmVudCwgZ2V0cyB0cmlnZ2VyZWQgd2hlbiBhIG5ldyByZWdpc3RyYW50IGlkIFVwZGF0ZWQKICAgICogZXZlbnQKICAgICogQHBhcmFtIHJlZ2lzdHJhbnQgLSBUaGUgcmVnaXN0cmFudCBhZGRyZXNzLgogICAgKiBAcGFyYW0gcmVnaXN0cmFyIC0gVGhlIHJlZ2lzdHJhciBhZGRyZXNzLgogICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIG9mIHRoZSByZWdpc3RyYW50LgogICAgKi8KICAgIGV2ZW50IFVwZGF0ZWQoYWRkcmVzcyBpbmRleGVkIHJlZ2lzdHJhbnQsIGFkZHJlc3MgcmVnaXN0cmFyLCBieXRlcyBkYXRhLCBib29sIGFjdGl2ZSk7CgogICAgLyoqCiAgICAqIEVycm9yIGV2ZW50LgogICAgKiBldmVudAogICAgKiBAcGFyYW0gY29kZSAtIFRoZSBlcnJvciBjb2RlLgogICAgKiAxOiBQZXJtaXNzaW9uIGRlbmllZC4KICAgICogMjogRHVwbGljYXRlIFJlZ2lzdHJhbnQgYWRkcmVzcy4KICAgICogMzogTm8gc3VjaCBSZWdpc3RyYW50LgogICAgKi8KICAgIGV2ZW50IEVycm9yKHVpbnQgY29kZSk7CgogICAgc3RydWN0IFJlZ2lzdHJhbnQgewogICAgICAgIGFkZHJlc3MgYWRkcjsKICAgICAgICBieXRlcyBkYXRhOwogICAgICAgIGJvb2wgYWN0aXZlOwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgcmVnaXN0cmFudEluZGV4OwogICAgUmVnaXN0cmFudFtdIHB1YmxpYyByZWdpc3RyYW50czsKCiAgICAvKioKICAgICogRnVuY3Rpb24gY2FuJ3QgaGF2ZSBldGhlci4KICAgICogbW9kaWZpZXIKICAgICovCiAgICBtb2RpZmllciBub0V0aGVyKCkgewogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzUmVnaXN0cmFyKCkgewogICAgICBpZiAobXNnLnNlbmRlciAhPSByZWdpc3RyYXIpIHsKICAgICAgICBFcnJvcigxKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgXzsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgKiBDb25zdHJ1Y3QgcmVnaXN0cnkgd2l0aCBhbmQgc3RhcnRpbmcgcmVnaXN0cmFudHMgbGVuZ2h0IG9mIG9uZSwgYW5kIHJlZ2lzdHJhciBhcyBtc2cuc2VuZGVyCiAgICAqIGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gUmVnaXN0cmFyKCkgewogICAgICAgIHJlZ2lzdHJhciA9IG1zZy5zZW5kZXI7CiAgICAgICAgcmVnaXN0cmFudHMubGVuZ3RoKys7CiAgICB9CgogICAgLyoqCiAgICAqIEFkZCBhIHJlZ2lzdHJhbnQsIG9ubHkgcmVnaXN0cmFyIGFsbG93ZWQKICAgICogcHVibGljX2Z1bmN0aW9uCiAgICAqIEBwYXJhbSBfcmVnaXN0cmFudCAtIFRoZSByZWdpc3RyYW50IGFkZHJlc3MuCiAgICAqIEBwYXJhbSBfZGF0YSAtIFRoZSByZWdpc3RyYW50IGRhdGEgc3RyaW5nLgogICAgKi8KICAgIGZ1bmN0aW9uIGFkZChhZGRyZXNzIF9yZWdpc3RyYW50LCBieXRlcyBfZGF0YSkgaXNSZWdpc3RyYXIgbm9FdGhlciByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHJlZ2lzdHJhbnRJbmRleFtfcmVnaXN0cmFudF0gPiAwKSB7CiAgICAgICAgICAgIEVycm9yKDIpOyAvLyBEdXBsaWNhdGUgcmVnaXN0cmFudAogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHVpbnQgcG9zID0gcmVnaXN0cmFudHMubGVuZ3RoKys7CiAgICAgICAgcmVnaXN0cmFudHNbcG9zXSA9IFJlZ2lzdHJhbnQoX3JlZ2lzdHJhbnQsIF9kYXRhLCB0cnVlKTsKICAgICAgICByZWdpc3RyYW50SW5kZXhbX3JlZ2lzdHJhbnRdID0gcG9zOwogICAgICAgIENyZWF0ZWQoX3JlZ2lzdHJhbnQsIG1zZy5zZW5kZXIsIF9kYXRhKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogRWRpdCBhIHJlZ2lzdHJhbnQsIG9ubHkgcmVnaXN0cmFyIGFsbG93ZWQKICAgICogcHVibGljX2Z1bmN0aW9uCiAgICAqIEBwYXJhbSBfcmVnaXN0cmFudCAtIFRoZSByZWdpc3RyYW50IGFkZHJlc3MuCiAgICAqIEBwYXJhbSBfZGF0YSAtIFRoZSByZWdpc3RyYW50IGRhdGEgc3RyaW5nLgogICAgKi8KICAgIGZ1bmN0aW9uIGVkaXQoYWRkcmVzcyBfcmVnaXN0cmFudCwgYnl0ZXMgX2RhdGEsIGJvb2wgX2FjdGl2ZSkgaXNSZWdpc3RyYXIgbm9FdGhlciByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHJlZ2lzdHJhbnRJbmRleFtfcmVnaXN0cmFudF0gPT0gMCkgewogICAgICAgICAgICBFcnJvcigzKTsgLy8gTm8gc3VjaCByZWdpc3RyYW50CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgUmVnaXN0cmFudCByZWdpc3RyYW50ID0gcmVnaXN0cmFudHNbcmVnaXN0cmFudEluZGV4W19yZWdpc3RyYW50XV07CiAgICAgICAgcmVnaXN0cmFudC5kYXRhID0gX2RhdGE7CiAgICAgICAgcmVnaXN0cmFudC5hY3RpdmUgPSBfYWN0aXZlOwogICAgICAgIFVwZGF0ZWQoX3JlZ2lzdHJhbnQsIG1zZy5zZW5kZXIsIF9kYXRhLCBfYWN0aXZlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogU2V0IG5ldyByZWdpc3RyYXIgYWRkcmVzcywgb25seSByZWdpc3RyYXIgYWxsb3dlZAogICAgKiBwdWJsaWNfZnVuY3Rpb24KICAgICogQHBhcmFtIF9yZWdpc3RyYXIgLSBUaGUgbmV3IHJlZ2lzdHJhciBhZGRyZXNzLgogICAgKi8KICAgIGZ1bmN0aW9uIHNldE5leHRSZWdpc3RyYXIoYWRkcmVzcyBfcmVnaXN0cmFyKSBpc1JlZ2lzdHJhciBub0V0aGVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZWdpc3RyYXIgPSBfcmVnaXN0cmFyOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBHZXQgaWYgYSByZWdzaXRyYW50IGlzIGFjdGl2ZSBvciBub3QuCiAgICAqIGNvbnN0YW50X2Z1bmN0aW9uCiAgICAqIEBwYXJhbSBfcmVnaXN0cmFudCAtIFRoZSByZWdpc3RyYW50IGFkZHJlc3MuCiAgICAqLwogICAgZnVuY3Rpb24gaXNBY3RpdmVSZWdpc3RyYW50KGFkZHJlc3MgX3JlZ2lzdHJhbnQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IHBvcyA9IHJlZ2lzdHJhbnRJbmRleFtfcmVnaXN0cmFudF07CiAgICAgICAgcmV0dXJuIChwb3MgPiAwICYmIHJlZ2lzdHJhbnRzW3Bvc10uYWN0aXZlKTsKICAgIH0KCiAgICAvKioKICAgICogR2V0IGFsbCB0aGUgcmVnaXN0cmFudHMuCiAgICAqIGNvbnN0YW50X2Z1bmN0aW9uCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0UmVnaXN0cmFudHMoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzW10pIHsKICAgICAgICBhZGRyZXNzW10gbWVtb3J5IHJlc3VsdCA9IG5ldyBhZGRyZXNzW10ocmVnaXN0cmFudHMubGVuZ3RoLTEpOwogICAgICAgIGZvciAodWludCBqID0gMTsgaiA8IHJlZ2lzdHJhbnRzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIHJlc3VsdFtqLTFdID0gcmVnaXN0cmFudHNbal0uYWRkcjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmVqZWN0IHZhbHVlIHNlbmRzIHRvIHRoZSBjb250cmFjdC4KICAgICogZmFsbGJhY2tfZnVuY3Rpb24KICAgICovCiAgICBmdW5jdGlvbiAoKSBub0V0aGVyIHt9CgogICAgLyoqCiAgICAqIERlc2N0cnVjdCB0aGUgc21hcnQgY29udHJhY3QuIFNpbmNlIHRoaXMgaXMgZmlyc3QsIGFscGhhIHJlbGVhc2Ugb2YgT3BlbiBSZWdpc3RyeSBmb3IgSW9ULCB1cGRhdGVkIHZlcnNpb25zIHdpbGwgZm9sbG93LgogICAgKiBSZWdpc3RyeSdzIGRpc2NvbnRpbnVlIG11c3QgYmUgZXhlY3V0ZWQgZmlyc3QuCiAgICAqLwogICAgZnVuY3Rpb24gZGlzY29udGludWUoKSBpc1JlZ2lzdHJhciBub0V0aGVyIHsKICAgICAgc2VsZmRlc3RydWN0KG1zZy5zZW5kZXIpOwogICAgfQp9'.
	

]
