Class {
	#name : #SRTe8a1df958be379045e2b46a31a98b93a2ecdfded,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8a1df958be379045e2b46a31a98b93a2ecdfded >> base64 [
	^ ''.
	

]
