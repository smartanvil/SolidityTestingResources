Class {
	#name : #SRTE05CeDD2838E4e1d99B539D8C768D6EF2a10F729,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTE05CeDD2838E4e1d99B539D8C768D6EF2a10F729 >> base64 [
	^ ''.
	

]
