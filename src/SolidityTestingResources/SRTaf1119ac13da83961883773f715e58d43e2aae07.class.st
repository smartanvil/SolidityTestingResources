Class {
	#name : #SRTaf1119ac13da83961883773f715e58d43e2aae07,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf1119ac13da83961883773f715e58d43e2aae07 >> base64 [
	^ ''.
	

]
