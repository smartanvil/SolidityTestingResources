Class {
	#name : #SRT62f4074655d8f888e9293c59d2a5faa5156f2275,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT62f4074655d8f888e9293c59d2a5faa5156f2275 >> base64 [
	^ ''.
	

]
