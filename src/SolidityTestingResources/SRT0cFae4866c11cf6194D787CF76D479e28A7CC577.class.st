Class {
	#name : #SRT0cFae4866c11cf6194D787CF76D479e28A7CC577,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0cFae4866c11cf6194D787CF76D479e28A7CC577 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CmNvbnRyYWN0IEZ1bmRhcmlhVG9rZW4gewogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkZ1bmRhcmlhIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlJJIjsKICAgIAogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7IC8vIGhvdyBtYW55IHRva2VucyBzdXBwbGllZCBhdCB0aGUgbW9tZW50CiAgICB1aW50IHB1YmxpYyBzdXBwbHlMaW1pdDsgLy8gaG93IG1hbnkgdG9rZW5zIGNhbiBiZSBzdXBwbGllZCAgICAKICAgIHVpbnQgcHVibGljIGNvdXJzZTsgLy8gY291cnNlIHdlaSBmb3IgdG9rZW4KIAogICAgbWFwcGluZyhhZGRyZXNzPT51aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOyAvLyBvd25lZCB0b2tlbnMKICAgIG1hcHBpbmcoYWRkcmVzcz0+bWFwcGluZyhhZGRyZXNzPT51aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsgLy8gYWxsb3dpbmcgdGhpcmQgcGFydGllcyB0byB0cmFuc2ZlciB0b2tlbnMgCiAgICBtYXBwaW5nKGFkZHJlc3M9PmJvb2wpIHB1YmxpYyBhbGxvd2VkQWRkcmVzc2VzOyAvLyBhbGxvd2VkIGFkZHJlc3NlcyB0byBtYW5hZ2Ugc29tZSBmdW5jdGlvbnMgICAgCgogICAgYWRkcmVzcyBwdWJsaWMgZnVuZGFyaWFQb29sQWRkcmVzczsgLy8gZXRoZXIgc291cmNlIGZvciBGdW5kYXJpYSBkZXZlbG9wbWVudAogICAgYWRkcmVzcyBjcmVhdG9yOyAvLyBjcmVhdG9yIGFkZHJlc3Mgb2YgdGhpcyBjb250cmFjdAogICAgCiAgICBldmVudCBTdXBwbGllZFRvKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBTdXBwbHlMaW1pdENoYW5nZWQodWludCBuZXdMaW1pdCwgdWludCBvbGRMaW1pdCk7CiAgICBldmVudCBBbGxvd2VkQWRkcmVzc0FkZGVkKGFkZHJlc3MgX2FkZHJlc3MpOwogICAgZXZlbnQgQ291cnNlQ2hhbmdlZCh1aW50IG5ld0NvdXJzZSwgdWludCBvbGRDb3Vyc2UpOwogICAgCiAgICBmdW5jdGlvbiBGdW5kYXJpYVRva2VuKCkgewogICAgICAgIGFsbG93ZWRBZGRyZXNzZXNbbXNnLnNlbmRlcl0gPSB0cnVlOyAvLyBhZGQgY3JlYXRvciBhZGRyZXNzIHRvIGFsbG93ZWQgYWRkcmVzc2VzCiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIC8vIGNvbmRpdGlvbiB0byBiZSBjcmVhdG9yIGFkZHJlc3MgdG8gcnVuIHNvbWUgZnVuY3Rpb25zCiAgICBtb2RpZmllciBvbmx5Q3JlYXRvciB7IAogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgXzsgCiAgICB9CiAgICAKICAgIC8vIGNvbmRpdGlvbiB0byBiZSBhbGxvd2VkIGFkZHJlc3MgdG8gcnVuIHNvbWUgZnVuY3Rpb25zCiAgICBtb2RpZmllciBpc0FsbG93ZWQgewogICAgICAgIGlmKGFsbG93ZWRBZGRyZXNzZXNbbXNnLnNlbmRlcl0pIF87IAogICAgfQogICAgCiAgICAvLyBzZXQgYWRkcmVzcyBmb3IgRnVuZGFyaWEgc291cmNlIG9mIGV0aGVyCiAgICBmdW5jdGlvbiBzZXRGdW5kYXJpYVBvb2xBZGRyZXNzKGFkZHJlc3MgX2Z1bmRhcmlhUG9vbEFkZHJlc3MpIG9ubHlDcmVhdG9yIHsKICAgICAgICBmdW5kYXJpYVBvb2xBZGRyZXNzID0gX2Z1bmRhcmlhUG9vbEFkZHJlc3M7CiAgICB9ICAgICAKICAgIAogICAgLy8gZXhwYW5kIGFsbG93ZWQgYWRkcmVzc2VzIHdpdGggbmV3IG9uZSAgICAKICAgIGZ1bmN0aW9uIGFkZEFsbG93ZWRBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlDcmVhdG9yIHsKICAgICAgICBhbGxvd2VkQWRkcmVzc2VzW19hZGRyZXNzXSA9IHRydWU7CiAgICAgICAgQWxsb3dlZEFkZHJlc3NBZGRlZChfYWRkcmVzcyk7CiAgICB9CiAgICAKICAgIC8vIHJlbW92ZSBhbGxvd2VkIGFkZHJlc3MKICAgIGZ1bmN0aW9uIHJlbW92ZUFsbG93ZWRBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIG9ubHlDcmVhdG9yIHsKICAgICAgICBkZWxldGUgYWxsb3dlZEFkZHJlc3Nlc1tfYWRkcmVzc107ICAgIAogICAgfQoKICAgIC8vIGluY3JlYXNlIHRva2VuIGJhbGFuY2Ugb2Ygc29tZSBhZGRyZXNzCiAgICBmdW5jdGlvbiBzdXBwbHlUbyhhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGlzQWxsb3dlZCB7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBTdXBwbGllZFRvKF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgLy8gbGltaXQgdG90YWwgdG9rZW5zIGNhbiBiZSBzdXBwbGllZAogICAgZnVuY3Rpb24gc2V0U3VwcGx5TGltaXQodWludCBuZXdMaW1pdCkgaXNBbGxvd2VkIHsKICAgICAgICBTdXBwbHlMaW1pdENoYW5nZWQobmV3TGltaXQsIHN1cHBseUxpbWl0KTsKICAgICAgICBzdXBwbHlMaW1pdCA9IG5ld0xpbWl0OwogICAgfSAgICAgICAgICAgICAgICAKICAgIAogICAgLy8gc2V0IGNvdXJzZQogICAgZnVuY3Rpb24gc2V0Q291cnNlKHVpbnQgbmV3Q291cnNlKSBpc0FsbG93ZWQgewogICAgICAgIENvdXJzZUNoYW5nZWQobmV3Q291cnNlLCBjb3Vyc2UpOwogICAgICAgIGNvdXJzZSA9IG5ld0NvdXJzZTsKICAgIH0gCiAgICAKICAgIC8vIHRva2VuIGZvciB3ZWkgYWNjb3JkaW5nIHRvIGNvdXJzZQogICAgZnVuY3Rpb24gdG9rZW5Gb3JXZWkodWludCBfd2VpKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gX3dlaS9jb3Vyc2U7ICAgIAogICAgfQogICAgCiAgICAvLyB3ZWkgZm9yIHRva2VuIGFjY29yZGluZyB0byBjb3Vyc2UKICAgIGZ1bmN0aW9uIHdlaUZvclRva2VuKHVpbnQgX3Rva2VuKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gX3Rva2VuKmNvdXJzZTsKICAgIH0gCiAgICAKICAgIC8vIHRyYW5zZmVyIHRva2VucyB0byBhbm90aGVyIGFkZHJlc3MgKG93bmVyKSAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKF90byA9PSAweDAgfHwgYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlIHx8IGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIAogICAgICAgICAgICByZXR1cm4gZmFsc2U7IAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8vIHNldHRpbmcgb2YgYXZhaWxhYmlsaXR5IG9mIHRva2VucyB0cmFuc2ZlcmVuY2UgZm9yIHRoaXJkIHBhcnR5CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZihfdG8gPT0gMHgwIHx8IGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUgfHwgX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8vIGFwcHJvdmluZyB0cmFuc2ZlcmVuY2Ugb2YgdG9rZW5zIGZvciB0aGlyZCBwYXJ0eQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLy8gUHJldmVudHMgYWNjaWRlbnRhbCBzZW5kaW5nIG9mIGV0aGVyCiAgICBmdW5jdGlvbiAoKSB7CgkgICAgdGhyb3c7IAogICAgfSAgICAgCiAgICAgICAgIAp9'.
	

]
