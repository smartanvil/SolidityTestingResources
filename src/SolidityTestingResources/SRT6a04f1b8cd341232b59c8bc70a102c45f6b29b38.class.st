Class {
	#name : #SRT6a04f1b8cd341232b59c8bc70a102c45f6b29b38,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6a04f1b8cd341232b59c8bc70a102c45f6b29b38 >> base64 [
	^ ''.
	

]
