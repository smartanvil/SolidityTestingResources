Class {
	#name : #SRT2ccd9e367bf47fbf862338e3c8cf09832d22060c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ccd9e367bf47fbf862338e3c8cf09832d22060c >> base64 [
	^ ''.
	

]
