Class {
	#name : #SRTb533ff572f5e33d04d02b149e7dcfe980e424c63,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb533ff572f5e33d04d02b149e7dcfe980e424c63 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7Cgpjb250cmFjdCBPcmFjbGl6ZUkgewogICAgYWRkcmVzcyBwdWJsaWMgY2JBZGRyZXNzOwogICAgZnVuY3Rpb24gcXVlcnkodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnKSBleHRlcm5hbCBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5X3dpdGhHYXNMaW1pdCh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcsIHVpbnQgX2dhc2xpbWl0KSBleHRlcm5hbCBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Mih1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcxLCBzdHJpbmcgX2FyZzIpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Ml93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyLCB1aW50IF9nYXNsaW1pdCkgZXh0ZXJuYWwgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeU4odWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeU5fd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTiwgdWludCBfZ2FzbGltaXQpIGV4dGVybmFsIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlKSBwdWJsaWMgcmV0dXJucyAodWludCBfZHNwcmljZSk7CiAgICBmdW5jdGlvbiBnZXRQcmljZShzdHJpbmcgX2RhdGFzb3VyY2UsIHVpbnQgZ2FzbGltaXQpIHB1YmxpYyByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gc2V0Q3VzdG9tR2FzUHJpY2UodWludCBfZ2FzUHJpY2UpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zKGJ5dGVzMzIpOwp9CmNvbnRyYWN0IE9yYWNsaXplQWRkclJlc29sdmVySSB7CiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKCkgcHVibGljIHJldHVybnMgKGFkZHJlc3MgX2FkZHIpOwp9CmNvbnRyYWN0IHVzaW5nT3JhY2xpemUgewogICAgdWludCBjb25zdGFudCBkYXkgPSA2MCo2MCoyNDsKICAgIHVpbnQgY29uc3RhbnQgd2VlayA9IDYwKjYwKjI0Kjc7CiAgICB1aW50IGNvbnN0YW50IG1vbnRoID0gNjAqNjAqMjQqMzA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9OT05FID0gMHgwMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX1RMU05vdGFyeSA9IDB4MTA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9BbmRyb2lkID0gMHgyMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX0xlZGdlciA9IDB4MzA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9OYXRpdmUgPSAweEYwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlN0b3JhZ2VfSVBGUyA9IDB4MDE7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfYXV0byA9IDA7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfbWFpbm5ldCA9IDE7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfdGVzdG5ldCA9IDI7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfbW9yZGVuID0gMjsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9jb25zZW5zeXMgPSAxNjE7CgogICAgT3JhY2xpemVBZGRyUmVzb2x2ZXJJIE9BUjsKCiAgICBPcmFjbGl6ZUkgb3JhY2xpemU7CiAgICBtb2RpZmllciBvcmFjbGl6ZUFQSSB7CiAgICAgICAgaWYoKGFkZHJlc3MoT0FSKT09MCl8fChnZXRDb2RlU2l6ZShhZGRyZXNzKE9BUikpPT0wKSkKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29yayhuZXR3b3JrSURfYXV0byk7CgogICAgICAgIGlmKGFkZHJlc3Mob3JhY2xpemUpICE9IE9BUi5nZXRBZGRyZXNzKCkpCiAgICAgICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOwoKICAgICAgICBfOwogICAgfQogICAgbW9kaWZpZXIgY291cG9uKHN0cmluZyBjb2RlKXsKICAgICAgICBvcmFjbGl6ZSA9IE9yYWNsaXplSShPQVIuZ2V0QWRkcmVzcygpKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsodWludDggbmV0d29ya0lEKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpewogICAgICByZXR1cm4gb3JhY2xpemVfc2V0TmV0d29yaygpOwogICAgICBuZXR3b3JrSUQ7IC8vIHNpbGVuY2UgdGhlIHdhcm5pbmcgYW5kIHJlbWFpbiBiYWNrd2FyZHMgY29tcGF0aWJsZQogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29yaygpIGludGVybmFsIHJldHVybnMoYm9vbCl7CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk+MCl7IC8vbWFpbm5ldAogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxZDNCMjYzOGE3Y0M5ZjJDQjNEMjk4QTNEQTdhOTBCNjdFNTUwNmVkKTsKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9tYWlubmV0Iik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhjMDNBMjYxNUQ1ZWZhZjVGNDlGNjBCN0JCNjU4M2VhZWMyMTJmZGYxKT4wKXsgLy9yb3BzdGVuIHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfcm9wc3RlbjMiKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpPjApeyAvL2tvdmFuIHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfa292YW4iKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDE0NjUwMGNmZDM1QjIyRTRBMzkyRmUwYURjMDZEZTFhMTM2OEVkNDgpPjApeyAvL3JpbmtlYnkgdGVzdG5ldAogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KTsKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yaW5rZWJ5Iik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg2ZjQ4NUM4QkY2ZmM0M2VBMjEyRTkzQkJGOGNlMDQ2QzdmMWNiNDc1KT4wKXsgLy9ldGhlcmV1bS1icmlkZ2UKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgyMGUxMkExRjg1OUIzRmVhRTVGYjJBMEEzMkMxOEY1YTY1NTU1YkJGKT4wKXsgLy9ldGhlci5jYW1wIGlkZQogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgyMGUxMkExRjg1OUIzRmVhRTVGYjJBMEEzMkMxOEY1YTY1NTU1YkJGKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpPjApeyAvL2Jyb3dzZXItc29saWRpdHkKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQpIHB1YmxpYyB7CiAgICAgICAgX19jYWxsYmFjayhteWlkLCByZXN1bHQsIG5ldyBieXRlcygwKSk7CiAgICB9CiAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgbXlpZCwgc3RyaW5nIHJlc3VsdCwgYnl0ZXMgcHJvb2YpIHB1YmxpYyB7CiAgICAgIHJldHVybjsKICAgICAgbXlpZDsgcmVzdWx0OyBwcm9vZjsgLy8gU2lsZW5jZSBjb21waWxlciB3YXJuaW5ncwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsKICAgICAgICByZXR1cm4gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0UHJpY2Uoc3RyaW5nIGRhdGFzb3VyY2UsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKHVpbnQpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTIudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ml93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfY2JBZGRyZXNzKCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmNiQWRkcmVzcygpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0UHJvb2YoYnl0ZSBwcm9vZlApIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0UHJvb2ZUeXBlKHByb29mUCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDdXN0b21HYXNQcmljZSh1aW50IGdhc1ByaWNlKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldEN1c3RvbUdhc1ByaWNlKGdhc1ByaWNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENvZGVTaXplKGFkZHJlc3MgX2FkZHIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnModWludCBfc2l6ZSkgewogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgX3NpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHBhcnNlQWRkcihzdHJpbmcgX2EpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHRtcCA9IGJ5dGVzKF9hKTsKICAgICAgICB1aW50MTYwIGlhZGRyID0gMDsKICAgICAgICB1aW50MTYwIGIxOwogICAgICAgIHVpbnQxNjAgYjI7CiAgICAgICAgZm9yICh1aW50IGk9MjsgaTwyKzIqMjA7IGkrPTIpewogICAgICAgICAgICBpYWRkciAqPSAyNTY7CiAgICAgICAgICAgIGIxID0gdWludDE2MCh0bXBbaV0pOwogICAgICAgICAgICBiMiA9IHVpbnQxNjAodG1wW2krMV0pOwogICAgICAgICAgICBpZiAoKGIxID49IDk3KSYmKGIxIDw9IDEwMikpIGIxIC09IDg3OwogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNjUpJiYoYjEgPD0gNzApKSBiMSAtPSA1NTsKICAgICAgICAgICAgZWxzZSBpZiAoKGIxID49IDQ4KSYmKGIxIDw9IDU3KSkgYjEgLT0gNDg7CiAgICAgICAgICAgIGlmICgoYjIgPj0gOTcpJiYoYjIgPD0gMTAyKSkgYjIgLT0gODc7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA2NSkmJihiMiA8PSA3MCkpIGIyIC09IDU1OwogICAgICAgICAgICBlbHNlIGlmICgoYjIgPj0gNDgpJiYoYjIgPD0gNTcpKSBiMiAtPSA0ODsKICAgICAgICAgICAgaWFkZHIgKz0gKGIxKjE2K2IyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoaWFkZHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbXBhcmUoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHB1cmUgcmV0dXJucyAoaW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGEgPSBieXRlcyhfYSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGIgPSBieXRlcyhfYik7CiAgICAgICAgdWludCBtaW5MZW5ndGggPSBhLmxlbmd0aDsKICAgICAgICBpZiAoYi5sZW5ndGggPCBtaW5MZW5ndGgpIG1pbkxlbmd0aCA9IGIubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG1pbkxlbmd0aDsgaSArKykKICAgICAgICAgICAgaWYgKGFbaV0gPCBiW2ldKQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICBlbHNlIGlmIChhW2ldID4gYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgZWxzZSBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmRleE9mKHN0cmluZyBfaGF5c3RhY2ssIHN0cmluZyBfbmVlZGxlKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBoID0gYnl0ZXMoX2hheXN0YWNrKTsKICAgICAgICBieXRlcyBtZW1vcnkgbiA9IGJ5dGVzKF9uZWVkbGUpOwogICAgICAgIGlmKGgubGVuZ3RoIDwgMSB8fCBuLmxlbmd0aCA8IDEgfHwgKG4ubGVuZ3RoID4gaC5sZW5ndGgpKQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgZWxzZSBpZihoLmxlbmd0aCA+ICgyKioxMjggLTEpKQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgdWludCBzdWJpbmRleCA9IDA7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGgubGVuZ3RoOyBpICsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoaFtpXSA9PSBuWzBdKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN1YmluZGV4ID0gMTsKICAgICAgICAgICAgICAgICAgICB3aGlsZShzdWJpbmRleCA8IG4ubGVuZ3RoICYmIChpICsgc3ViaW5kZXgpIDwgaC5sZW5ndGggJiYgaFtpICsgc3ViaW5kZXhdID09IG5bc3ViaW5kZXhdKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXgrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoc3ViaW5kZXggPT0gbi5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnQoaSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYywgc3RyaW5nIF9kLCBzdHJpbmcgX2UpIGludGVybmFsIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYSA9IGJ5dGVzKF9hKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmMgPSBieXRlcyhfYyk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iZCA9IGJ5dGVzKF9kKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOwogICAgICAgIHN0cmluZyBtZW1vcnkgYWJjZGUgPSBuZXcgc3RyaW5nKF9iYS5sZW5ndGggKyBfYmIubGVuZ3RoICsgX2JjLmxlbmd0aCArIF9iZC5sZW5ndGggKyBfYmUubGVuZ3RoKTsKICAgICAgICBieXRlcyBtZW1vcnkgYmFiY2RlID0gYnl0ZXMoYWJjZGUpOwogICAgICAgIHVpbnQgayA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2JhLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYVtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JiLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYltpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JkLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZFtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JlLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZVtpXTsKICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsIF9kLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MpIGludGVybmFsIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCAiIiwgIiIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7CiAgICB9CgogICAgLy8gcGFyc2VJbnQKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHBhcnNlSW50KF9hLCAwKTsKICAgIH0KCiAgICAvLyBwYXJzZUludChwYXJzZUZsb2F0KjEwXl9iKQogICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nIF9hLCB1aW50IF9iKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBieXRlcyBtZW1vcnkgYnJlc3VsdCA9IGJ5dGVzKF9hKTsKICAgICAgICB1aW50IG1pbnQgPSAwOwogICAgICAgIGJvb2wgZGVjaW1hbHMgPSBmYWxzZTsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPGJyZXN1bHQubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiAoKGJyZXN1bHRbaV0gPj0gNDgpJiYoYnJlc3VsdFtpXSA8PSA1NykpewogICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxzKXsKICAgICAgICAgICAgICAgICAgIGlmIChfYiA9PSAwKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBlbHNlIF9iLS07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBtaW50ICo9IDEwOwogICAgICAgICAgICAgICAgbWludCArPSB1aW50KGJyZXN1bHRbaV0pIC0gNDg7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnJlc3VsdFtpXSA9PSA0NikgZGVjaW1hbHMgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoX2IgPiAwKSBtaW50ICo9IDEwKipfYjsKICAgICAgICByZXR1cm4gbWludDsKICAgIH0KCiAgICBmdW5jdGlvbiB1aW50MnN0cih1aW50IGkpIGludGVybmFsIHB1cmUgcmV0dXJucyAoc3RyaW5nKXsKICAgICAgICBpZiAoaSA9PSAwKSByZXR1cm4gIjAiOwogICAgICAgIHVpbnQgaiA9IGk7CiAgICAgICAgdWludCBsZW47CiAgICAgICAgd2hpbGUgKGogIT0gMCl7CiAgICAgICAgICAgIGxlbisrOwogICAgICAgICAgICBqIC89IDEwOwogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYnN0ciA9IG5ldyBieXRlcyhsZW4pOwogICAgICAgIHVpbnQgayA9IGxlbiAtIDE7CiAgICAgICAgd2hpbGUgKGkgIT0gMCl7CiAgICAgICAgICAgIGJzdHJbay0tXSA9IGJ5dGUoNDggKyBpICUgMTApOwogICAgICAgICAgICBpIC89IDEwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyaW5nKGJzdHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoCiAgICAgICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7CiAgICAgICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGNib3JsZW4pW2N0cl07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgZm9yICh1aW50IHggPSAwOyB4IDwgZWxlbUFycmF5W2ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGVsZW1jYm9ybGVuID0gZWxlbUFycmF5W2ldLmxlbmd0aCAtIHggPj0gMjQgPyAyMyA6IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4OwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChieXRlKGVsZW1jYm9ybGVuKS5sZW5ndGggPiBjdHIgLSBsY3RyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KCiAgICBmdW5jdGlvbiBiYTJjYm9yKGJ5dGVzW10gYXJyKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsKCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgICAgIGJ5dGVzW10gbWVtb3J5IGVsZW1BcnJheSA9IG5ldyBieXRlc1tdKGFycmxlbik7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRsZW4gKz0gZWxlbUFycmF5W2ldLmxlbmd0aCArIChlbGVtQXJyYXlbaV0ubGVuZ3RoIC0gMSkvMjMgKyAzOyAvLyszIGFjY291bnRzIGZvciBwYWlyZWQgaWRlbnRpZmllciB0eXBlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICAgICAgdWludCBjYm9ybGVuID0gYXJybGVuICsgMHg4MDsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOwogICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgoKICAgIHN0cmluZyBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZShzdHJpbmcgX25ldHdvcmtfbmFtZSkgaW50ZXJuYWwgewogICAgICAgIG9yYWNsaXplX25ldHdvcmtfbmFtZSA9IF9uZXR3b3JrX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeSh1aW50IF9kZWxheSwgdWludCBfbmJ5dGVzLCB1aW50IF9jdXN0b21HYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgcmVxdWlyZSgoX25ieXRlcyA+IDApICYmIChfbmJ5dGVzIDw9IDMyKSk7CiAgICAgICAgLy8gQ29udmVydCBmcm9tIHNlY29uZHMgdG8gbGVkZ2VyIHRpbWVyIHRpY2tzCiAgICAgICAgX2RlbGF5ICo9IDEwOyAKICAgICAgICBieXRlcyBtZW1vcnkgbmJ5dGVzID0gbmV3IGJ5dGVzKDEpOwogICAgICAgIG5ieXRlc1swXSA9IGJ5dGUoX25ieXRlcyk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHVub25jZSA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25LZXlIYXNoID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBieXRlczMyIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIgPSBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbXN0b3JlKHVub25jZSwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZCh1bm9uY2UsIDB4MjApLCB4b3IoYmxvY2toYXNoKHN1YihudW1iZXIsIDEpKSwgeG9yKGNvaW5iYXNlLCB0aW1lc3RhbXApKSkKICAgICAgICAgICAgbXN0b3JlKHNlc3Npb25LZXlIYXNoLCAweDIwKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNlc3Npb25LZXlIYXNoLCAweDIwKSwgc2Vzc2lvbktleUhhc2hfYnl0ZXMzMikKICAgICAgICB9CiAgICAgICAgYnl0ZXMgbWVtb3J5IGRlbGF5ID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBhc3NlbWJseSB7IAogICAgICAgICAgICBtc3RvcmUoYWRkKGRlbGF5LCAweDIwKSwgX2RlbGF5KSAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IGRlbGF5X2J5dGVzOCA9IG5ldyBieXRlcyg4KTsKICAgICAgICBjb3B5Qnl0ZXMoZGVsYXksIDI0LCA4LCBkZWxheV9ieXRlczgsIDApOwoKICAgICAgICBieXRlc1s0XSBtZW1vcnkgYXJncyA9IFt1bm9uY2UsIG5ieXRlcywgc2Vzc2lvbktleUhhc2gsIGRlbGF5XTsKICAgICAgICBieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9xdWVyeSgicmFuZG9tIiwgYXJncywgX2N1c3RvbUdhc0xpbWl0KTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgZGVsYXlfYnl0ZXM4X2xlZnQgPSBuZXcgYnl0ZXMoOCk7CiAgICAgICAgCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgeCA6PSBtbG9hZChhZGQoZGVsYXlfYnl0ZXM4LCAweDIwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjcpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICBtc3RvcmU4KGFkZChkZWxheV9ieXRlczhfbGVmdCwgMHgyNiksIGRpdih4LCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICBtc3RvcmU4KGFkZChkZWxheV9ieXRlczhfbGVmdCwgMHgyNSksIGRpdih4LCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjQpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICBtc3RvcmU4KGFkZChkZWxheV9ieXRlczhfbGVmdCwgMHgyMyksIGRpdih4LCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICBtc3RvcmU4KGFkZChkZWxheV9ieXRlczhfbGVmdCwgMHgyMiksIGRpdih4LCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgbXN0b3JlOChhZGQoZGVsYXlfYnl0ZXM4X2xlZnQsIDB4MjEpLCBkaXYoeCwgMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQogICAgICAgICAgICBtc3RvcmU4KGFkZChkZWxheV9ieXRlczhfbGVmdCwgMHgyMCksIGRpdih4LCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApKQoKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChxdWVyeUlkLCBrZWNjYWsyNTYoZGVsYXlfYnl0ZXM4X2xlZnQsIGFyZ3NbMV0sIHNoYTI1NihhcmdzWzBdKSwgYXJnc1syXSkpOwogICAgICAgIHJldHVybiBxdWVyeUlkOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMzMiBjb21taXRtZW50KSBpbnRlcm5hbCB7CiAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfYXJnc1txdWVyeUlkXSA9IGNvbW1pdG1lbnQ7CiAgICB9CgogICAgbWFwcGluZyhieXRlczMyPT5ieXRlczMyKSBvcmFjbGl6ZV9yYW5kb21EU19hcmdzOwogICAgbWFwcGluZyhieXRlczMyPT5ib29sKSBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZDsKCiAgICBmdW5jdGlvbiB2ZXJpZnlTaWcoYnl0ZXMzMiB0b3NpZ25oLCBieXRlcyBkZXJzaWcsIGJ5dGVzIHB1YmtleSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgYm9vbCBzaWdvazsKICAgICAgICBhZGRyZXNzIHNpZ25lcjsKCiAgICAgICAgYnl0ZXMzMiBzaWdyOwogICAgICAgIGJ5dGVzMzIgc2lnczsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3JfID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICB1aW50IG9mZnNldCA9IDQrKHVpbnQoZGVyc2lnWzNdKSAtIDB4MjApOwogICAgICAgIHNpZ3JfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0LCAzMiwgc2lncl8sIDApOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdzXyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgb2Zmc2V0ICs9IDMyICsgMjsKICAgICAgICBzaWdzXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCsodWludChkZXJzaWdbb2Zmc2V0LTFdKSAtIDB4MjApLCAzMiwgc2lnc18sIDApOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHNpZ3IgOj0gbWxvYWQoYWRkKHNpZ3JfLCAzMikpCiAgICAgICAgICAgIHNpZ3MgOj0gbWxvYWQoYWRkKHNpZ3NfLCAzMikpCiAgICAgICAgfQoKCiAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI3LCBzaWdyLCBzaWdzKTsKICAgICAgICBpZiAoYWRkcmVzcyhrZWNjYWsyNTYocHVia2V5KSkgPT0gc2lnbmVyKSByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI4LCBzaWdyLCBzaWdzKTsKICAgICAgICAgICAgcmV0dXJuIChhZGRyZXNzKGtlY2NhazI1NihwdWJrZXkpKSA9PSBzaWduZXIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fc2Vzc2lvbktleVZhbGlkaXR5KGJ5dGVzIHByb29mLCB1aW50IHNpZzJvZmZzZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHNpZ29rOwoKICAgICAgICAvLyBTdGVwIDY6IHZlcmlmeSB0aGUgYXR0ZXN0YXRpb24gc2lnbmF0dXJlLCBBUFBLRVkxIG11c3Qgc2lnbiB0aGUgc2Vzc2lvbktleSBmcm9tIHRoZSBjb3JyZWN0IGxlZGdlciBhcHAgKENPREVIQVNIKQogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWcyID0gbmV3IGJ5dGVzKHVpbnQocHJvb2Zbc2lnMm9mZnNldCsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LCBzaWcyLmxlbmd0aCwgc2lnMiwgMCk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBhcHBrZXkxX3B1YmtleSA9IG5ldyBieXRlcyg2NCk7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzEsIDY0LCBhcHBrZXkxX3B1YmtleSwgMCk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24yID0gbmV3IGJ5dGVzKDErNjUrMzIpOwogICAgICAgIHRvc2lnbjJbMF0gPSBieXRlKDEpOyAvL3JvbGUKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjUsIDY1LCB0b3NpZ24yLCAxKTsKICAgICAgICBieXRlcyBtZW1vcnkgQ09ERUhBU0ggPSBoZXgiZmQ5NGZhNzFiYzBiYTEwZDM5ZDQ2NGQwZDhmNDY1ZWZlZWYwYTI3NjRlMzg4N2ZjYzlkZjQxZGVkMjBmNTA1YyI7CiAgICAgICAgY29weUJ5dGVzKENPREVIQVNILCAwLCAzMiwgdG9zaWduMiwgMSs2NSk7CiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjIpLCBzaWcyLCBhcHBrZXkxX3B1YmtleSk7CgogICAgICAgIGlmIChzaWdvayA9PSBmYWxzZSkgcmV0dXJuIGZhbHNlOwoKCiAgICAgICAgLy8gU3RlcCA3OiB2ZXJpZnkgdGhlIEFQUEtFWTEgcHJvdmVuYW5jZSAobXVzdCBiZSBzaWduZWQgYnkgTGVkZ2VyKQogICAgICAgIGJ5dGVzIG1lbW9yeSBMRURHRVJLRVkgPSBoZXgiN2ZiOTU2NDY5YzVjOWI4OTg0MGQ1NWI0MzUzN2U2NmE5OGRkNDgxMWVhMGEyNzIyNDI3MmMyZTU2MjI5MTFlODUzN2EyZjhlODZhNDZiYWVjODI4NjRlOThkZDAxZTljY2MyZjhiYzVkZmM5Y2JlNWE5MWEyOTA0OThkZDk2ZTQiOwoKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMyA9IG5ldyBieXRlcygxKzY1KTsKICAgICAgICB0b3NpZ24zWzBdID0gMHhGRTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMsIDY1LCB0b3NpZ24zLCAxKTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzMgPSBuZXcgYnl0ZXModWludChwcm9vZlszKzY1KzFdKSsyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMrNjUsIHNpZzMubGVuZ3RoLCBzaWczLCAwKTsKCiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjMpLCBzaWczLCBMRURHRVJLRVkpOwoKICAgICAgICByZXR1cm4gc2lnb2s7CiAgICB9CgogICAgbW9kaWZpZXIgb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnkoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgcmVxdWlyZSgoX3Byb29mWzBdID09ICJMIikgJiYgKF9wcm9vZlsxXSA9PSAiUCIpICYmIChfcHJvb2ZbMl0gPT0gMSkpOwoKICAgICAgICBib29sIHByb29mVmVyaWZpZWQgPSBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihfcHJvb2YsIF9xdWVyeUlkLCBieXRlcyhfcmVzdWx0KSwgb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoKSk7CiAgICAgICAgcmVxdWlyZShwcm9vZlZlcmlmaWVkKTsKCiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fcmV0dXJuQ29kZShieXRlczMyIF9xdWVyeUlkLCBzdHJpbmcgX3Jlc3VsdCwgYnl0ZXMgX3Byb29mKSBpbnRlcm5hbCByZXR1cm5zICh1aW50OCl7CiAgICAgICAgLy8gU3RlcCAxOiB0aGUgcHJlZml4IGhhcyB0byBtYXRjaCAnTFBceDAxJyAoTGVkZ2VyIFByb29mIHZlcnNpb24gMSkKICAgICAgICBpZiAoKF9wcm9vZlswXSAhPSAiTCIpfHwoX3Byb29mWzFdICE9ICJQIil8fChfcHJvb2ZbMl0gIT0gMSkpIHJldHVybiAxOwoKICAgICAgICBib29sIHByb29mVmVyaWZpZWQgPSBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihfcHJvb2YsIF9xdWVyeUlkLCBieXRlcyhfcmVzdWx0KSwgb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoKSk7CiAgICAgICAgaWYgKHByb29mVmVyaWZpZWQgPT0gZmFsc2UpIHJldHVybiAyOwoKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXRjaEJ5dGVzMzJQcmVmaXgoYnl0ZXMzMiBjb250ZW50LCBieXRlcyBwcmVmaXgsIHVpbnQgbl9yYW5kb21fYnl0ZXMpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgYm9vbCBtYXRjaF8gPSB0cnVlOwogICAgICAgIAogICAgICAgIHJlcXVpcmUocHJlZml4Lmxlbmd0aCA9PSBuX3JhbmRvbV9ieXRlcyk7CgogICAgICAgIGZvciAodWludDI1NiBpPTA7IGk8IG5fcmFuZG9tX2J5dGVzOyBpKyspIHsKICAgICAgICAgICAgaWYgKGNvbnRlbnRbaV0gIT0gcHJlZml4W2ldKSBtYXRjaF8gPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBtYXRjaF87CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oYnl0ZXMgcHJvb2YsIGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMgcmVzdWx0LCBzdHJpbmcgY29udGV4dF9uYW1lKSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKCiAgICAgICAgLy8gU3RlcCAyOiB0aGUgdW5pcXVlIGtleWhhc2ggaGFzIHRvIG1hdGNoIHdpdGggdGhlIHNoYTI1NiBvZiAoY29udGV4dCBuYW1lICsgcXVlcnlJZCkKICAgICAgICB1aW50IGxlZGdlclByb29mTGVuZ3RoID0gMys2NSsodWludChwcm9vZlszKzY1KzFdKSsyKSszMjsKICAgICAgICBieXRlcyBtZW1vcnkga2V5aGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCwgMzIsIGtleWhhc2gsIDApOwogICAgICAgIGlmICghKGtlY2NhazI1NihrZXloYXNoKSA9PSBrZWNjYWsyNTYoc2hhMjU2KGNvbnRleHRfbmFtZSwgcXVlcnlJZCkpKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBieXRlcyBtZW1vcnkgc2lnMSA9IG5ldyBieXRlcyh1aW50KHByb29mW2xlZGdlclByb29mTGVuZ3RoKygzMis4KzErMzIpKzFdKSsyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoKygzMis4KzErMzIpLCBzaWcxLmxlbmd0aCwgc2lnMSwgMCk7CgogICAgICAgIC8vIFN0ZXAgMzogd2UgYXNzdW1lIHNpZzEgaXMgdmFsaWQgKGl0IHdpbGwgYmUgdmVyaWZpZWQgZHVyaW5nIHN0ZXAgNSkgYW5kIHdlIHZlcmlmeSBpZiAncmVzdWx0JyBpcyB0aGUgcHJlZml4IG9mIHNoYTI1NihzaWcxKQogICAgICAgIGlmICghbWF0Y2hCeXRlczMyUHJlZml4KHNoYTI1NihzaWcxKSwgcmVzdWx0LCB1aW50KHByb29mW2xlZGdlclByb29mTGVuZ3RoKzMyKzhdKSkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy8gU3RlcCA0OiBjb21taXRtZW50IG1hdGNoIHZlcmlmaWNhdGlvbiwga2VjY2FrMjU2KGRlbGF5LCBuYnl0ZXMsIHVub25jZSwgc2Vzc2lvbktleUhhc2gpID09IGNvbW1pdG1lbnQgaW4gc3RvcmFnZS4KICAgICAgICAvLyBUaGlzIGlzIHRvIHZlcmlmeSB0aGF0IHRoZSBjb21wdXRlZCBhcmdzIG1hdGNoIHdpdGggdGhlIG9uZXMgc3BlY2lmaWVkIGluIHRoZSBxdWVyeS4KICAgICAgICBieXRlcyBtZW1vcnkgY29tbWl0bWVudFNsaWNlMSA9IG5ldyBieXRlcyg4KzErMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgrMzIsIDgrMSszMiwgY29tbWl0bWVudFNsaWNlMSwgMCk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uUHVia2V5ID0gbmV3IGJ5dGVzKDY0KTsKICAgICAgICB1aW50IHNpZzJvZmZzZXQgPSBsZWRnZXJQcm9vZkxlbmd0aCszMisoOCsxKzMyKStzaWcxLmxlbmd0aCs2NTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjQsIDY0LCBzZXNzaW9uUHVia2V5LCAwKTsKCiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uUHVia2V5SGFzaCA9IHNoYTI1NihzZXNzaW9uUHVia2V5KTsKICAgICAgICBpZiAob3JhY2xpemVfcmFuZG9tRFNfYXJnc1txdWVyeUlkXSA9PSBrZWNjYWsyNTYoY29tbWl0bWVudFNsaWNlMSwgc2Vzc2lvblB1YmtleUhhc2gpKXsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gKICAgICAgICAgICAgZGVsZXRlIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF07CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNTogdmFsaWRpdHkgdmVyaWZpY2F0aW9uIGZvciBzaWcxIChrZXloYXNoIGFuZCBhcmdzIHNpZ25lZCB3aXRoIHRoZSBzZXNzaW9uS2V5KQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24xID0gbmV3IGJ5dGVzKDMyKzgrMSszMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCwgMzIrOCsxKzMyLCB0b3NpZ24xLCAwKTsKICAgICAgICBpZiAoIXZlcmlmeVNpZyhzaGEyNTYodG9zaWduMSksIHNpZzEsIHNlc3Npb25QdWJrZXkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIHZlcmlmeSBpZiBzZXNzaW9uUHVia2V5SGFzaCB3YXMgdmVyaWZpZWQgYWxyZWFkeSwgaWYgbm90Li4gbGV0J3MgZG8gaXQhCiAgICAgICAgaWYgKG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9PSBmYWxzZSl7CiAgICAgICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkocHJvb2YsIHNpZzJvZmZzZXQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXTsKICAgIH0KCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgZnVuY3Rpb24gY29weUJ5dGVzKGJ5dGVzIGZyb20sIHVpbnQgZnJvbU9mZnNldCwgdWludCBsZW5ndGgsIGJ5dGVzIHRvLCB1aW50IHRvT2Zmc2V0KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgdWludCBtaW5MZW5ndGggPSBsZW5ndGggKyB0b09mZnNldDsKCiAgICAgICAgLy8gQnVmZmVyIHRvbyBzbWFsbAogICAgICAgIHJlcXVpcmUodG8ubGVuZ3RoID49IG1pbkxlbmd0aCk7IC8vIFNob3VsZCBiZSBhIGJldHRlciB3YXk/CgogICAgICAgIC8vIE5PVEU6IHRoZSBvZmZzZXQgMzIgaXMgYWRkZWQgdG8gc2tpcCB0aGUgYHNpemVgIGZpZWxkIG9mIGJvdGggYnl0ZXMgdmFyaWFibGVzCiAgICAgICAgdWludCBpID0gMzIgKyBmcm9tT2Zmc2V0OwogICAgICAgIHVpbnQgaiA9IDMyICsgdG9PZmZzZXQ7CgogICAgICAgIHdoaWxlIChpIDwgKDMyICsgZnJvbU9mZnNldCArIGxlbmd0aCkpIHsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgbGV0IHRtcCA6PSBtbG9hZChhZGQoZnJvbSwgaSkpCiAgICAgICAgICAgICAgICBtc3RvcmUoYWRkKHRvLCBqKSwgdG1wKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgKz0gMzI7CiAgICAgICAgICAgIGogKz0gMzI7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdG87CiAgICB9CgogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UKICAgIC8vIER1cGxpY2F0ZSBTb2xpZGl0eSdzIGVjcmVjb3ZlciwgYnV0IGNhdGNoaW5nIHRoZSBDQUxMIHJldHVybiB2YWx1ZQogICAgZnVuY3Rpb24gc2FmZXJfZWNyZWNvdmVyKGJ5dGVzMzIgaGFzaCwgdWludDggdiwgYnl0ZXMzMiByLCBieXRlczMyIHMpIGludGVybmFsIHJldHVybnMgKGJvb2wsIGFkZHJlc3MpIHsKICAgICAgICAvLyBXZSBkbyBvdXIgb3duIG1lbW9yeSBtYW5hZ2VtZW50IGhlcmUuIFNvbGlkaXR5IHVzZXMgbWVtb3J5IG9mZnNldAogICAgICAgIC8vIDB4NDAgdG8gc3RvcmUgdGhlIGN1cnJlbnQgZW5kIG9mIG1lbW9yeS4gV2Ugd3JpdGUgcGFzdCBpdCAoYXMKICAgICAgICAvLyB3cml0ZXMgYXJlIG1lbW9yeSBleHRlbnNpb25zKSwgYnV0IGRvbid0IHVwZGF0ZSB0aGUgb2Zmc2V0IHNvCiAgICAgICAgLy8gU29saWRpdHkgd2lsbCByZXVzZSBpdC4gVGhlIG1lbW9yeSB1c2VkIGhlcmUgaXMgb25seSBuZWVkZWQgZm9yCiAgICAgICAgLy8gdGhpcyBjb250ZXh0LgoKICAgICAgICAvLyBGSVhNRTogaW5saW5lIGFzc2VtYmx5IGNhbid0IGFjY2VzcyByZXR1cm4gdmFsdWVzCiAgICAgICAgYm9vbCByZXQ7CiAgICAgICAgYWRkcmVzcyBhZGRyOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGxldCBzaXplIDo9IG1sb2FkKDB4NDApCiAgICAgICAgICAgIG1zdG9yZShzaXplLCBoYXNoKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDMyKSwgdikKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCA2NCksIHIpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgOTYpLCBzKQoKICAgICAgICAgICAgLy8gTk9URTogd2UgY2FuIHJldXNlIHRoZSByZXF1ZXN0IG1lbW9yeSBiZWNhdXNlIHdlIGRlYWwgd2l0aAogICAgICAgICAgICAvLyAgICAgICB0aGUgcmV0dXJuIGNvZGUKICAgICAgICAgICAgcmV0IDo9IGNhbGwoMzAwMCwgMSwgMCwgc2l6ZSwgMTI4LCBzaXplLCAzMikKICAgICAgICAgICAgYWRkciA6PSBtbG9hZChzaXplKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChyZXQsIGFkZHIpOwogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICBmdW5jdGlvbiBlY3JlY292ZXJ5KGJ5dGVzMzIgaGFzaCwgYnl0ZXMgc2lnKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgYnl0ZXMzMiByOwogICAgICAgIGJ5dGVzMzIgczsKICAgICAgICB1aW50OCB2OwoKICAgICAgICBpZiAoc2lnLmxlbmd0aCAhPSA2NSkKICAgICAgICAgIHJldHVybiAoZmFsc2UsIDApOwoKICAgICAgICAvLyBUaGUgc2lnbmF0dXJlIGZvcm1hdCBpcyBhIGNvbXBhY3QgZm9ybSBvZjoKICAgICAgICAvLyAgIHtieXRlczMyIHJ9e2J5dGVzMzIgc317dWludDggdn0KICAgICAgICAvLyBDb21wYWN0IG1lYW5zLCB1aW50OCBpcyBub3QgcGFkZGVkIHRvIDMyIGJ5dGVzLgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgciA6PSBtbG9hZChhZGQoc2lnLCAzMikpCiAgICAgICAgICAgIHMgOj0gbWxvYWQoYWRkKHNpZywgNjQpKQoKICAgICAgICAgICAgLy8gSGVyZSB3ZSBhcmUgbG9hZGluZyB0aGUgbGFzdCAzMiBieXRlcy4gV2UgZXhwbG9pdCB0aGUgZmFjdCB0aGF0CiAgICAgICAgICAgIC8vICdtbG9hZCcgd2lsbCBwYWQgd2l0aCB6ZXJvZXMgaWYgd2Ugb3ZlcnJlYWQuCiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vICdtbG9hZDgnIHRvIGRvIHRoaXMsIGJ1dCB0aGF0IHdvdWxkIGJlIG5pY2VyLgogICAgICAgICAgICB2IDo9IGJ5dGUoMCwgbWxvYWQoYWRkKHNpZywgOTYpKSkKCiAgICAgICAgICAgIC8vIEFsdGVybmF0aXZlIHNvbHV0aW9uOgogICAgICAgICAgICAvLyAnYnl0ZScgaXMgbm90IHdvcmtpbmcgZHVlIHRvIHRoZSBTb2xpZGl0eSBwYXJzZXIsIHNvIGxldHMKICAgICAgICAgICAgLy8gdXNlIHRoZSBzZWNvbmQgYmVzdCBvcHRpb24sICdhbmQnCiAgICAgICAgICAgIC8vIHYgOj0gYW5kKG1sb2FkKGFkZChzaWcsIDY1KSksIDI1NSkKICAgICAgICB9CgogICAgICAgIC8vIGFsYmVpdCBub24tdHJhbnNhY3Rpb25hbCBzaWduYXR1cmVzIGFyZSBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBZUCwgb25lIHdvdWxkIGV4cGVjdCBpdAogICAgICAgIC8vIHRvIG1hdGNoIHRoZSBZUCByYW5nZSBvZiBbMjcsIDI4XQogICAgICAgIC8vCiAgICAgICAgLy8gZ2V0aCB1c2VzIFswLCAxXSBhbmQgc29tZSBjbGllbnRzIGhhdmUgZm9sbG93ZWQuIFRoaXMgbWlnaHQgY2hhbmdlLCBzZWU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1MwogICAgICAgIGlmICh2IDwgMjcpCiAgICAgICAgICB2ICs9IDI3OwoKICAgICAgICBpZiAodiAhPSAyNyAmJiB2ICE9IDI4KQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsKCiAgICAgICAgcmV0dXJuIHNhZmVyX2VjcmVjb3ZlcihoYXNoLCB2LCByLCBzKTsKICAgIH0KCn0KLy8gPC9PUkFDTElaRV9BUEk+Cgpjb250cmFjdCBFT1NCZXRHYW1lSW50ZXJmYWNlIHsKCXVpbnQyNTYgcHVibGljIERFVkVMT1BFUlNGVU5EOwoJdWludDI1NiBwdWJsaWMgTElBQklMSVRJRVM7CglmdW5jdGlvbiBwYXlEZXZlbG9wZXJzRnVuZChhZGRyZXNzIGRldmVsb3BlcikgcHVibGljOwoJZnVuY3Rpb24gcmVjZWl2ZVBheW1lbnRGb3JPcmFjbGl6ZSgpIHBheWFibGUgcHVibGljOwoJZnVuY3Rpb24gZ2V0TWF4V2luKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KTsKfQoKY29udHJhY3QgRU9TQmV0QmFua3JvbGxJbnRlcmZhY2UgewoJZnVuY3Rpb24gcGF5RXRoZXJUb1dpbm5lcih1aW50MjU2IGFtdEV0aGVyLCBhZGRyZXNzIHdpbm5lcikgcHVibGljOwoJZnVuY3Rpb24gcmVjZWl2ZUV0aGVyRnJvbUdhbWVBZGRyZXNzKCkgcGF5YWJsZSBwdWJsaWM7CglmdW5jdGlvbiBwYXlPcmFjbGl6ZSh1aW50MjU2IGFtb3VudFRvUGF5KSBwdWJsaWM7CglmdW5jdGlvbiBnZXRCYW5rcm9sbCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1Nik7Cn0KCmNvbnRyYWN0IEVSQzIwIHsKCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQgc3VwcGx5KTsKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQgcmVtYWluaW5nKTsKCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IEVPU0JldEJhbmtyb2xsIGlzIEVSQzIwLCBFT1NCZXRCYW5rcm9sbEludGVyZmFjZSB7CgoJdXNpbmcgU2FmZU1hdGggZm9yICo7CgoJLy8gY29uc3RhbnRzIGZvciBFT1NCZXQgQmFua3JvbGwKCglhZGRyZXNzIHB1YmxpYyBPV05FUjsKCXVpbnQyNTYgcHVibGljIE1BWElNVU1JTlZFU1RNRU5UU0FMTE9XRUQ7Cgl1aW50MjU2IHB1YmxpYyBXQUlUVElNRVVOVElMV0lUSERSQVdPUlRSQU5TRkVSOwoJdWludDI1NiBwdWJsaWMgREVWRUxPUEVSU0ZVTkQ7CgoJLy8gdGhpcyB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHRoZSB0cnVzdGVkIGdhbWUgYWRkcmVzc2VzIHdoaWNoIHdpbGwgZm9yd2FyZCB0aGVpciBldGhlcgoJLy8gdG8gdGhlIGJhbmtyb2xsIGNvbnRyYWN0LCBhbmQgd2hlbiBwbGF5ZXJzIHdpbiwgdGhleSB3aWxsIHJlcXVlc3QgdGhlIGJhbmtyb2xsIGNvbnRyYWN0IAoJLy8gdG8gc2VuZCB0aGVzZSBwbGF5ZXJzIHRoZWlyIHdpbm5pbmdzLgoJLy8gRmVlbCBmcmVlIHRvIGF1ZGl0IHRoZXNlIGNvbnRyYWN0cyBvbiBldGhlcnNjYW4uLi4KCW1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgVFJVU1RFREFERFJFU1NFUzsKCglhZGRyZXNzIHB1YmxpYyBESUNFOwoJYWRkcmVzcyBwdWJsaWMgU0xPVFM7CgoJLy8gbWFwcGluZyB0byBsb2cgdGhlIGxhc3QgdGltZSBhIHVzZXIgY29udHJpYnV0ZWQgdG8gdGhlIGJhbmtyb2xsIAoJbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGNvbnRyaWJ1dGlvblRpbWU7CgoJLy8gY29uc3RhbnRzIGZvciBFUkMyMCBzdGFuZGFyZAoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkVPU0JldCBTdGFrZSBUb2tlbnMiOwoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRU9TQkVUU1QiOwoJdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgkvLyB2YXJpYWJsZSB0b3RhbCBzdXBwbHkKCXVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKCS8vIG1hcHBpbmcgdG8gc3RvcmUgdG9rZW5zCgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VzOwoJbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWQ7CgoJLy8gZXZlbnRzCglldmVudCBGdW5kQmFua3JvbGwoYWRkcmVzcyBjb250cmlidXRvciwgdWludDI1NiBldGhlckNvbnRyaWJ1dGVkLCB1aW50MjU2IHRva2Vuc1JlY2VpdmVkKTsKCWV2ZW50IENhc2hPdXQoYWRkcmVzcyBjb250cmlidXRvciwgdWludDI1NiBldGhlcldpdGhkcmF3biwgdWludDI1NiB0b2tlbnNDYXNoZWRJbik7CglldmVudCBGYWlsZWRTZW5kKGFkZHJlc3Mgc2VuZFRvLCB1aW50MjU2IGFtdCk7CgoJLy8gY2hlY2tzIHRoYXQgYW4gYWRkcmVzcyBpcyBhICJ0cnVzdGVkIGFkZHJlc3Mgb2YgYSBsZWdpdGltYXRlIEVPU0JldCBnYW1lIgoJbW9kaWZpZXIgYWRkcmVzc0luVHJ1c3RlZEFkZHJlc3NlcyhhZGRyZXNzIHRoaXNBZGRyZXNzKXsKCgkJcmVxdWlyZShUUlVTVEVEQUREUkVTU0VTW3RoaXNBZGRyZXNzXSk7CgkJXzsKCX0KCgkvLyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiAKCWZ1bmN0aW9uIEVPU0JldEJhbmtyb2xsKGFkZHJlc3MgZGljZSwgYWRkcmVzcyBzbG90cykgcHVibGljIHBheWFibGUgewoJCS8vIGZ1bmN0aW9uIGlzIHBheWFibGUsIG93bmVyIG9mIGNvbnRyYWN0IE1VU1QgInNlZWQiIGNvbnRyYWN0IHdpdGggc29tZSBldGhlciwgCgkJLy8gc28gdGhhdCB0aGUgcmF0aW9zIGFyZSBjb3JyZWN0IHdoZW4gdG9rZW5zIGFyZSBiZWluZyBtaW50ZWQKCQlyZXF1aXJlIChtc2cudmFsdWUgPiAwKTsKCgkJT1dORVIgPSBtc2cuc2VuZGVyOwoKCQkvLyAxMDAgdG9rZW5zL2V0aGVyIGlzIHRoZSBpbml0YWwgc2VlZCBhbW91bnQsIHNvOgoJCXVpbnQyNTYgaW5pdGlhbFRva2VucyA9IG1zZy52YWx1ZSAqIDEwMDsKCQliYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGluaXRpYWxUb2tlbnM7CgkJdG90YWxTdXBwbHkgPSBpbml0aWFsVG9rZW5zOwoKCQkvLyBsb2cgYSBtaW50IHRva2VucyBldmVudAoJCWVtaXQgVHJhbnNmZXIoMHgwLCBtc2cuc2VuZGVyLCBpbml0aWFsVG9rZW5zKTsKCgkJLy8gaW5zZXJ0IGdpdmVuIGdhbWUgYWRkcmVzc2VzIGludG8gdGhlIFRSVVNURURBRERSRVNTRVMgbWFwcGluZywgYW5kIHNhdmUgdGhlIGFkZHJlc3NlcyBhcyBnbG9iYWwgdmFyaWFibGVzCgkJVFJVU1RFREFERFJFU1NFU1tkaWNlXSA9IHRydWU7CgkJVFJVU1RFREFERFJFU1NFU1tzbG90c10gPSB0cnVlOwoKCQlESUNFID0gZGljZTsKCQlTTE9UUyA9IHNsb3RzOwoKCQlXQUlUVElNRVVOVElMV0lUSERSQVdPUlRSQU5TRkVSID0gNiBob3VyczsKCQlNQVhJTVVNSU5WRVNUTUVOVFNBTExPV0VEID0gNTAwIGV0aGVyOwoJfQoKCS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgkvLyBWSUVXIEZVTkNUSU9OUwoJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gCgoJZnVuY3Rpb24gY2hlY2tXaGVuQ29udHJpYnV0b3JDYW5UcmFuc2Zlck9yV2l0aGRyYXcoYWRkcmVzcyBiYW5rcm9sbGVyQWRkcmVzcykgdmlldyBwdWJsaWMgcmV0dXJucyh1aW50MjU2KXsKCQlyZXR1cm4gY29udHJpYnV0aW9uVGltZVtiYW5rcm9sbGVyQWRkcmVzc107Cgl9CgoJZnVuY3Rpb24gZ2V0QmFua3JvbGwoKSB2aWV3IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYpewoJCS8vIHJldHVybnMgdGhlIHRvdGFsIGJhbGFuY2UgbWludXMgdGhlIGRldmVsb3BlcnMgZnVuZCwgYXMgdGhlIGFtb3VudCBvZiBhY3RpdmUgYmFua3JvbGwKCQlyZXR1cm4gU2FmZU1hdGguc3ViKGFkZHJlc3ModGhpcykuYmFsYW5jZSwgREVWRUxPUEVSU0ZVTkQpOwoJfQoKCS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgkvLyBCQU5LUk9MTCBDT05UUkFDVCA8LT4gR0FNRSBDT05UUkFDVFMgZnVuY3Rpb25zCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyAKCglmdW5jdGlvbiBwYXlFdGhlclRvV2lubmVyKHVpbnQyNTYgYW10RXRoZXIsIGFkZHJlc3Mgd2lubmVyKSBwdWJsaWMgYWRkcmVzc0luVHJ1c3RlZEFkZHJlc3Nlcyhtc2cuc2VuZGVyKXsKCQkvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IGNhbGxlZCBieSBhIGdhbWUgY29udHJhY3Qgd2hlbiBzb21lb25lIHdpbnMgYSBnYW1lCgkJLy8gdHJ5IHRvIHNlbmQsIGlmIGl0IGZhaWxzLCB0aGVuIHNlbmQgdGhlIGFtb3VudCB0byB0aGUgb3duZXIKCQkvLyBub3RlLCB0aGlzIHdpbGwgb25seSBoYXBwZW4gaWYgc29tZW9uZSBpcyBjYWxsaW5nIHRoZSBiZXR0aW5nIGZ1bmN0aW9ucyB3aXRoCgkJLy8gYSBjb250cmFjdC4gVGhleSBhcmUgY2xlYXJseSB1cCB0byBubyBnb29kLCBzbyB0aGV5IGNhbiBjb250YWN0IHVzIHRvIHJldHJlaXZlIAoJCS8vIHRoZWlyIGV0aGVyCgkJLy8gaWYgdGhlIGV0aGVyIGNhbm5vdCBiZSBzZW50IHRvIHVzLCB0aGUgT1dORVIsIHRoYXQgbWVhbnMgd2UgYXJlIHVwIHRvIG5vIGdvb2QsIAoJCS8vIGFuZCB0aGUgZXRoZXIgd2lsbCBqdXN0IGJlIGdpdmVuIHRvIHRoZSBiYW5rcm9sbGVycyBhcyBpZiB0aGUgcGxheWVyL293bmVyIGxvc3QgCgoJCWlmICghIHdpbm5lci5zZW5kKGFtdEV0aGVyKSl7CgoJCQllbWl0IEZhaWxlZFNlbmQod2lubmVyLCBhbXRFdGhlcik7CgoJCQlpZiAoISBPV05FUi5zZW5kKGFtdEV0aGVyKSl7CgoJCQkJZW1pdCBGYWlsZWRTZW5kKE9XTkVSLCBhbXRFdGhlcik7CgkJCX0KCQl9Cgl9CgoJZnVuY3Rpb24gcmVjZWl2ZUV0aGVyRnJvbUdhbWVBZGRyZXNzKCkgcGF5YWJsZSBwdWJsaWMgYWRkcmVzc0luVHJ1c3RlZEFkZHJlc3Nlcyhtc2cuc2VuZGVyKXsKCQkvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IGNhbGxlZCBmcm9tIHRoZSBnYW1lIGNvbnRyYWN0cyB3aGVuIHNvbWVvbmUgc3RhcnRzIGEgZ2FtZS4KCX0KCglmdW5jdGlvbiBwYXlPcmFjbGl6ZSh1aW50MjU2IGFtb3VudFRvUGF5KSBwdWJsaWMgYWRkcmVzc0luVHJ1c3RlZEFkZHJlc3Nlcyhtc2cuc2VuZGVyKXsKCQkvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IGNhbGxlZCB3aGVuIGEgZ2FtZSBjb250cmFjdCBtdXN0IHBheSBwYXlPcmFjbGl6ZQoJCUVPU0JldEdhbWVJbnRlcmZhY2UobXNnLnNlbmRlcikucmVjZWl2ZVBheW1lbnRGb3JPcmFjbGl6ZS52YWx1ZShhbW91bnRUb1BheSkoKTsKCX0KCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoJLy8gQkFOS1JPTEwgQ09OVFJBQ1QgTUFJTiBGVU5DVElPTlMKCS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKCS8vIHRoaXMgZnVuY3Rpb24gQUREUyB0byB0aGUgYmFua3JvbGwgb2YgRU9TQmV0LCBhbmQgY3JlZGl0cyB0aGUgYmFua3JvbGxlciBhIHByb3BvcnRpb25hbAoJLy8gYW1vdW50IG9mIHRva2VucyBzbyB0aGV5IG1heSB3aXRoZHJhdyB0aGVpciB0b2tlbnMgbGF0ZXIKCS8vIGFsc28gaWYgdGhlcmUgaXMgb25seSBhIGxpbWl0ZWQgYW1vdW50IG9mIHNwYWNlIGxlZnQgaW4gdGhlIGJhbmtyb2xsLCBhIHVzZXIgY2FuIGp1c3Qgc2VuZCBhcyBtdWNoIAoJLy8gZXRoZXIgYXMgdGhleSB3YW50LCBiZWNhdXNlIHRoZXkgd2lsbCBiZSBhYmxlIHRvIGNvbnRyaWJ1dGUgdXAgdG8gdGhlIG1heGltdW0sIGFuZCB0aGVuIGdldCByZWZ1bmRlZCB0aGUgcmVzdC4KCWZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKCgkJLy8gc2F2ZSBpbiBtZW1vcnkgZm9yIGNoZWFwIGFjY2Vzcy4KCQkvLyB0aGlzIHJlcHJlc2VudHMgdGhlIHRvdGFsIGJhbmtyb2xsIGJhbGFuY2UgYmVmb3JlIHRoZSBmdW5jdGlvbiB3YXMgY2FsbGVkLgoJCXVpbnQyNTYgY3VycmVudFRvdGFsQmFua3JvbGwgPSBTYWZlTWF0aC5zdWIoZ2V0QmFua3JvbGwoKSwgbXNnLnZhbHVlKTsKCQl1aW50MjU2IG1heEludmVzdG1lbnRzQWxsb3dlZCA9IE1BWElNVU1JTlZFU1RNRU5UU0FMTE9XRUQ7CgoJCXJlcXVpcmUoY3VycmVudFRvdGFsQmFua3JvbGwgPCBtYXhJbnZlc3RtZW50c0FsbG93ZWQgJiYgbXNnLnZhbHVlICE9IDApOwoKCQl1aW50MjU2IGN1cnJlbnRTdXBwbHlPZlRva2VucyA9IHRvdGFsU3VwcGx5OwoJCXVpbnQyNTYgY29udHJpYnV0ZWRFdGhlcjsKCgkJYm9vbCBjb250cmlidXRpb25UYWtlc0Jhbmtyb2xsT3ZlckxpbWl0OwoJCXVpbnQyNTYgaWZDb250cmlidXRpb25UYWtlc0Jhbmtyb2xsT3ZlckxpbWl0X1JlZnVuZDsKCgkJdWludDI1NiBjcmVkaXRlZFRva2VuczsKCgkJaWYgKFNhZmVNYXRoLmFkZChjdXJyZW50VG90YWxCYW5rcm9sbCwgbXNnLnZhbHVlKSA+IG1heEludmVzdG1lbnRzQWxsb3dlZCl7CgkJCS8vIGFsbG93IHRoZSBiYW5rcm9sbGVyIHRvIGNvbnRyaWJ1dGUgdXAgdG8gdGhlIGFsbG93ZWQgYW1vdW50IG9mIGV0aGVyLCBhbmQgcmVmdW5kIHRoZSByZXN0LgoJCQljb250cmlidXRpb25UYWtlc0Jhbmtyb2xsT3ZlckxpbWl0ID0gdHJ1ZTsKCQkJLy8gc2V0IGNvbnRyaWJ1dGVkIGV0aGVyIGFzIChNQVhJTVVNSU5WRVNUTUVOVFNBTExPV0VEIC0gQkFOS1JPTEwpCgkJCWNvbnRyaWJ1dGVkRXRoZXIgPSBTYWZlTWF0aC5zdWIobWF4SW52ZXN0bWVudHNBbGxvd2VkLCBjdXJyZW50VG90YWxCYW5rcm9sbCk7CgkJCS8vIHJlZnVuZCB0aGUgcmVzdCBvZiB0aGUgZXRoZXIsIHdoaWNoIGlzIChvcmlnaW5hbCBhbW91bnQgc2VudCAtIChtYXhpbXVtIGFtb3VudCBhbGxvd2VkIC0gYmFua3JvbGwpKQoJCQlpZkNvbnRyaWJ1dGlvblRha2VzQmFua3JvbGxPdmVyTGltaXRfUmVmdW5kID0gU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgY29udHJpYnV0ZWRFdGhlcik7CgkJfQoJCWVsc2UgewoJCQljb250cmlidXRlZEV0aGVyID0gbXNnLnZhbHVlOwoJCX0KICAgICAgICAKCQlpZiAoY3VycmVudFN1cHBseU9mVG9rZW5zICE9IDApewoJCQkvLyBkZXRlcm1pbmUgdGhlIHJhdGlvIG9mIGNvbnRyaWJ1dGlvbiB2ZXJzdXMgdG90YWwgQkFOS1JPTEwuCgkJCWNyZWRpdGVkVG9rZW5zID0gU2FmZU1hdGgubXVsKGNvbnRyaWJ1dGVkRXRoZXIsIGN1cnJlbnRTdXBwbHlPZlRva2VucykgLyBjdXJyZW50VG90YWxCYW5rcm9sbDsKCQl9CgkJZWxzZSB7CgkJCS8vIGVkZ2UgY2FzZSB3aGVyZSBBTEwgbW9uZXkgd2FzIGNhc2hlZCBvdXQgZnJvbSBiYW5rcm9sbAoJCQkvLyBzbyBjdXJyZW50U3VwcGx5T2ZUb2tlbnMgPT0gMAoJCQkvLyBjdXJyZW50VG90YWxCYW5rcm9sbCBjYW4gPT0gMCBvciBub3QsIGlmIHNvbWVvbmUgbWluZXMvc2VsZmRlc3RydWN0J3MgdG8gdGhlIGNvbnRyYWN0CgkJCS8vIGJ1dCBlaXRoZXIgd2F5LCBnaXZlIGFsbCB0aGUgYmFua3JvbGwgdG8gcGVyc29uIHdobyBkZXBvc2l0cyBldGhlcgoJCQljcmVkaXRlZFRva2VucyA9IFNhZmVNYXRoLm11bChjb250cmlidXRlZEV0aGVyLCAxMDApOwoJCX0KCQkKCQkvLyBub3cgdXBkYXRlIHRoZSB0b3RhbCBzdXBwbHkgb2YgdG9rZW5zIGFuZCBiYW5rcm9sbCBhbW91bnQKCQl0b3RhbFN1cHBseSA9IFNhZmVNYXRoLmFkZChjdXJyZW50U3VwcGx5T2ZUb2tlbnMsIGNyZWRpdGVkVG9rZW5zKTsKCgkJLy8gbm93IGNyZWRpdCB0aGUgdXNlciB3aXRoIGhpcyBhbW91bnQgb2YgY29udHJpYnV0ZWQgdG9rZW5zIAoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gU2FmZU1hdGguYWRkKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBjcmVkaXRlZFRva2Vucyk7CgoJCS8vIHVwZGF0ZSBoaXMgY29udHJpYnV0aW9uIHRpbWUgZm9yIHN0YWtlIHRpbWUgbG9ja2luZwoJCWNvbnRyaWJ1dGlvblRpbWVbbXNnLnNlbmRlcl0gPSBibG9jay50aW1lc3RhbXA7CgoJCS8vIG5vdyBsb29rIGlmIHRoZSBhdHRlbXB0ZWQgY29udHJpYnV0aW9uIHdvdWxkIGhhdmUgdGFrZW4gdGhlIEJBTktST0xMIG92ZXIgdGhlIGxpbWl0LCAKCQkvLyBhbmQgaWYgdHJ1ZSwgcmVmdW5kIHRoZSBleGNlc3MgZXRoZXIuCgkJaWYgKGNvbnRyaWJ1dGlvblRha2VzQmFua3JvbGxPdmVyTGltaXQpewoJCQltc2cuc2VuZGVyLnRyYW5zZmVyKGlmQ29udHJpYnV0aW9uVGFrZXNCYW5rcm9sbE92ZXJMaW1pdF9SZWZ1bmQpOwoJCX0KCgkJLy8gbG9nIGFuIGV2ZW50IGFib3V0IGZ1bmRpbmcgYmFua3JvbGwKCQllbWl0IEZ1bmRCYW5rcm9sbChtc2cuc2VuZGVyLCBjb250cmlidXRlZEV0aGVyLCBjcmVkaXRlZFRva2Vucyk7CgoJCS8vIGxvZyBhIG1pbnQgdG9rZW5zIGV2ZW50CgkJZW1pdCBUcmFuc2ZlcigweDAsIG1zZy5zZW5kZXIsIGNyZWRpdGVkVG9rZW5zKTsKCX0KCglmdW5jdGlvbiBjYXNob3V0RU9TQmV0U3Rha2VUb2tlbnModWludDI1NiBfYW1vdW50VG9rZW5zKSBwdWJsaWMgewoJCS8vIEluIGVmZmVjdCwgdGhpcyBmdW5jdGlvbiBpcyB0aGUgT1BQT1NJVEUgb2YgdGhlIHVuLW5hbWVkIHBheWFibGUgZnVuY3Rpb24gYWJvdmVeXl4KCQkvLyB0aGlzIGFsbG93cyBiYW5rcm9sbGVycyB0byAiY2FzaCBvdXQiIGF0IGFueSB0aW1lLCBhbmQgcmVjZWl2ZSB0aGUgZXRoZXIgdGhhdCB0aGV5IGNvbnRyaWJ1dGVkLCBQTFVTCgkJLy8gYSBwcm9wb3J0aW9uIG9mIGFueSBldGhlciB0aGF0IHdhcyBlYXJuZWQgYnkgdGhlIHNtYXJ0IGNvbnRhY3Qgd2hlbiB0aGVpciBldGhlciB3YXMgInN0YWtpbmciLCBIb3dldmVyCgkJLy8gdGhpcyB3b3JrcyBpbiByZXZlcnNlIGFzIHdlbGwuIEFueSBuZXQgbG9zc2VzIG9mIHRoZSBzbWFydCBjb250cmFjdCB3aWxsIGJlIGFic29yYmVkIGJ5IHRoZSBwbGF5ZXIgaW4gbGlrZSBtYW5uZXIuCgkJLy8gT2YgY291cnNlLCBkdWUgdG8gdGhlIGNvbnN0YW50IGhvdXNlIGVkZ2UsIGEgYmFua3JvbGxlciB0aGF0IGxlYXZlcyB0aGVpciBldGhlciBpbiB0aGUgY29udHJhY3QgbG9uZyBlbm91Z2gKCQkvLyBpcyBlZmZlY3RpdmVseSBndWFyYW50ZWVkIHRvIHdpdGhkcmF3IG1vcmUgZXRoZXIgdGhhbiB0aGV5IG9yaWdpbmFsbHkgInN0YWtlZCIKCgkJLy8gc2F2ZSBpbiBtZW1vcnkgZm9yIGNoZWFwIGFjY2Vzcy4KCQl1aW50MjU2IHRva2VuQmFsYW5jZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwoJCS8vIHZlcmlmeSB0aGF0IHRoZSBjb250cmlidXRvciBoYXMgZW5vdWdoIHRva2VucyB0byBjYXNoIG91dCB0aGlzIG1hbnksIGFuZCBoYXMgd2FpdGVkIHRoZSByZXF1aXJlZCB0aW1lLgoJCXJlcXVpcmUoX2Ftb3VudFRva2VucyA8PSB0b2tlbkJhbGFuY2UgCgkJCSYmIGNvbnRyaWJ1dGlvblRpbWVbbXNnLnNlbmRlcl0gKyBXQUlUVElNRVVOVElMV0lUSERSQVdPUlRSQU5TRkVSIDw9IGJsb2NrLnRpbWVzdGFtcAoJCQkmJiBfYW1vdW50VG9rZW5zID4gMCk7CgoJCS8vIHNhdmUgaW4gbWVtb3J5IGZvciBjaGVhcCBhY2Nlc3MuCgkJLy8gYWdhaW4sIHJlcHJlc2VudHMgdGhlIHRvdGFsIGJhbGFuY2Ugb2YgdGhlIGNvbnRyYWN0IGJlZm9yZSB0aGUgZnVuY3Rpb24gd2FzIGNhbGxlZC4KCQl1aW50MjU2IGN1cnJlbnRUb3RhbEJhbmtyb2xsID0gZ2V0QmFua3JvbGwoKTsKCQl1aW50MjU2IGN1cnJlbnRTdXBwbHlPZlRva2VucyA9IHRvdGFsU3VwcGx5OwoKCQkvLyBjYWxjdWxhdGUgdGhlIHRva2VuIHdpdGhkcmF3IHJhdGlvIGJhc2VkIG9uIGN1cnJlbnQgc3VwcGx5IAoJCXVpbnQyNTYgd2l0aGRyYXdFdGhlciA9IFNhZmVNYXRoLm11bChfYW1vdW50VG9rZW5zLCBjdXJyZW50VG90YWxCYW5rcm9sbCkgLyBjdXJyZW50U3VwcGx5T2ZUb2tlbnM7CgoJCS8vIGRldmVsb3BlcnMgdGFrZSAxJSBvZiB3aXRoZHJhd2xzIAoJCXVpbnQyNTYgZGV2ZWxvcGVyc0N1dCA9IHdpdGhkcmF3RXRoZXIgLyAxMDA7CgkJdWludDI1NiBjb250cmlidXRvckFtb3VudCA9IFNhZmVNYXRoLnN1Yih3aXRoZHJhd0V0aGVyLCBkZXZlbG9wZXJzQ3V0KTsKCgkJLy8gbm93IHVwZGF0ZSB0aGUgdG90YWwgc3VwcGx5IG9mIHRva2VucyBieSBzdWJ0cmFjdGluZyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nICJjYXNoZWQgaW4iCgkJdG90YWxTdXBwbHkgPSBTYWZlTWF0aC5zdWIoY3VycmVudFN1cHBseU9mVG9rZW5zLCBfYW1vdW50VG9rZW5zKTsKCgkJLy8gYW5kIHVwZGF0ZSB0aGUgdXNlcnMgc3VwcGx5IG9mIHRva2VucyAKCQliYWxhbmNlc1ttc2cuc2VuZGVyXSA9IFNhZmVNYXRoLnN1Yih0b2tlbkJhbGFuY2UsIF9hbW91bnRUb2tlbnMpOwoKCQkvLyB1cGRhdGUgdGhlIGRldmVsb3BlcnMgZnVuZCBiYXNlZCBvbiB0aGlzIGNhbGN1bGF0ZWQgYW1vdW50IAoJCURFVkVMT1BFUlNGVU5EID0gU2FmZU1hdGguYWRkKERFVkVMT1BFUlNGVU5ELCBkZXZlbG9wZXJzQ3V0KTsKCgkJLy8gbGFzdGx5LCB0cmFuc2ZlciB0aGUgZXRoZXIgYmFjayB0byB0aGUgYmFua3JvbGxlci4gVGhhbmtzIGZvciB5b3VyIGNvbnRyaWJ1dGlvbiEKCQltc2cuc2VuZGVyLnRyYW5zZmVyKGNvbnRyaWJ1dG9yQW1vdW50KTsKCgkJLy8gbG9nIGFuIGV2ZW50IGFib3V0IGNhc2hvdXQKCQllbWl0IENhc2hPdXQobXNnLnNlbmRlciwgY29udHJpYnV0b3JBbW91bnQsIF9hbW91bnRUb2tlbnMpOwoKCQkvLyBsb2cgYSBkZXN0cm95IHRva2VucyBldmVudAoJCWVtaXQgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBfYW1vdW50VG9rZW5zKTsKCX0KCgkvLyBUTyBDQUxMIFRISVMgRlVOQ1RJT04gRUFTSUxZLCBTRU5EIEEgMCBFVEhFUiBUUkFOU0FDVElPTiBUTyBUSElTIENPTlRSQUNUIFdJVEggRVhUUkEgREFUQTogMHg3YTA5NTg4YgoJZnVuY3Rpb24gY2FzaG91dEVPU0JldFN0YWtlVG9rZW5zX0FMTCgpIHB1YmxpYyB7CgoJCS8vIGp1c3QgZm9yd2FyZCB0byBjYXNob3V0RU9TQmV0U3Rha2VUb2tlbnMgd2l0aCBpbnB1dCBhcyB0aGUgc2VuZGVycyBlbnRpcmUgYmFsYW5jZQoJCWNhc2hvdXRFT1NCZXRTdGFrZVRva2VucyhiYWxhbmNlc1ttc2cuc2VuZGVyXSk7Cgl9CgoJLy8vLy8vLy8vLy8vLy8vLy8vLy8KCS8vIE9XTkVSIEZVTkNUSU9OUzoKCS8vLy8vLy8vLy8vLy8vLy8vLy8vCgkvLyBQbGVhc2UsIGJlIGF3YXJlIHRoYXQgdGhlIG93bmVyIE9OTFkgY2FuIGNoYW5nZToKCQkvLyAxLiBUaGUgb3duZXIgY2FuIGluY3JlYXNlIG9yIGRlY3JlYXNlIHRoZSB0YXJnZXQgYW1vdW50IGZvciBhIGdhbWUuIFRoZXkgY2FuIHRoZW4gY2FsbCB0aGUgdXBkYXRlciBmdW5jdGlvbiB0byBnaXZlL3JlY2VpdmUgdGhlIGV0aGVyIGZyb20gdGhlIGdhbWUuCgkJLy8gMS4gVGhlIHdhaXQgdGltZSB1bnRpbCBhIHVzZXIgY2FuIHdpdGhkcmF3IG9yIHRyYW5zZmVyIHRoZWlyIHRva2VucyBhZnRlciBwdXJjaGFzZSB0aHJvdWdoIHRoZSBkZWZhdWx0IGZ1bmN0aW9uIGFib3ZlIF5eXgoJCS8vIDIuIFRoZSBvd25lciBjYW4gY2hhbmdlIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBpbnZlc3RtZW50cyBhbGxvd2VkLiBUaGlzIGFsbG93cyBmb3IgZWFybHkgY29udHJpYnV0b3JzIHRvIGd1YXJhbnRlZQoJCS8vIAkJYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb2YgdGhlIGJhbmtyb2xsIHNvIHRoYXQgdGhlaXIgc3Rha2UgY2Fubm90IGJlIGRpbHV0ZWQgaW1tZWRpYXRlbHkuIEhvd2V2ZXIsIGJlIGF3YXJlIHRoYXQgdGhlIAoJCS8vCQltYXhpbXVtIGFtb3VudCBvZiBpbnZlc3RtZW50cyBhbGxvd2VkIHdpbGwgYmUgcmFpc2VkIG92ZXIgdGltZS4gVGhpcyB3aWxsIGFsbG93IGZvciBoaWdoZXIgYmV0cyBieSBnYW1ibGVycywgcmVzdWx0aW5nCgkJLy8gCQlpbiBoaWdoZXIgZGl2aWRlbmRzIGZvciB0aGUgYmFua3JvbGxlcnMKCQkvLyAzLiBUaGUgb3duZXIgY2FuIGZyZWV6ZSBwYXlvdXRzIHRvIGJldHRvcnMuIFRoaXMgd2lsbCBiZSB1c2VkIGluIGNhc2Ugb2YgYW4gZW1lcmdlbmN5LCBhbmQgdGhlIGNvbnRyYWN0IHdpbGwgcmVqZWN0IGFsbAoJCS8vCQluZXcgYmV0cyBhcyB3ZWxsLiBUaGlzIGRvZXMgbm90IG1lYW4gdGhhdCBiZXR0b3JzIHdpbGwgbG9zZSB0aGVpciBtb25leSB3aXRob3V0IHJlY29tcGVuc2UuIFRoZXkgd2lsbCBiZSBhbGxvd2VkIHRvIGNhbGwgdGhlIAoJCS8vIAkJInJlZnVuZCIgZnVuY3Rpb24gaW4gdGhlIHJlc3BlY3RpdmUgZ2FtZSBzbWFydCBjb250cmFjdCBvbmNlIHBheW91dHMgYXJlIHVuLWZyb3plbi4KCQkvLyA0LiBGaW5hbGx5LCB0aGUgb3duZXIgY2FuIG1vZGlmeSBhbmQgd2l0aGRyYXcgdGhlIGRldmVsb3BlcnMgcmV3YXJkLCB3aGljaCB3aWxsIGZ1bmQgZnV0dXJlIGRldmVsb3BtZW50LCBpbmNsdWRpbmcgbmV3IGdhbWVzLCBhIHNleGllciBmcm9udGVuZCwKCQkvLyAJCWFuZCBUUlVFIERBTyBnb3Zlcm5hbmNlIHNvIHRoYXQgb25seU93bmVyIGZ1bmN0aW9ucyBkb24ndCBoYXZlIHRvIGV4aXN0IGFueW1vcmUgOykgYW5kIGluIG9yZGVyIHRvIGVmZmVjdGl2ZWx5IHJlYWN0IHRvIGNoYW5nZXMgCgkJLy8gCQlpbiB0aGUgbWFya2V0IChsb3dlciB0aGUgcGVyY2VudGFnZSBiZWNhdXNlIG9mIGluY3JlYXNlZCBjb21wZXRpdGlvbiBpbiB0aGUgYmxvY2tjaGFpbiBjYXNpbm8gc3BhY2UsIGV0Yy4pCgoJZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlPV05FUiA9IG5ld093bmVyOwoJfQoKCWZ1bmN0aW9uIGNoYW5nZVdhaXRUaW1lVW50aWxXaXRoZHJhd09yVHJhbnNmZXIodWludDI1NiB3YWl0VGltZSkgcHVibGljIHsKCQkvLyB3YWl0VGltZSBNVVNUIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAxMCB3ZWVrcwoJCXJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gT1dORVIgJiYgd2FpdFRpbWUgPD0gNjA0ODAwMCk7CgoJCVdBSVRUSU1FVU5USUxXSVRIRFJBV09SVFJBTlNGRVIgPSB3YWl0VGltZTsKCX0KCglmdW5jdGlvbiBjaGFuZ2VNYXhpbXVtSW52ZXN0bWVudHNBbGxvd2VkKHVpbnQyNTYgbWF4QW1vdW50KSBwdWJsaWMgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBPV05FUik7CgoJCU1BWElNVU1JTlZFU1RNRU5UU0FMTE9XRUQgPSBtYXhBbW91bnQ7Cgl9CgoKCWZ1bmN0aW9uIHdpdGhkcmF3RGV2ZWxvcGVyc0Z1bmQoYWRkcmVzcyByZWNlaXZlcikgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQkvLyBmaXJzdCBnZXQgZGV2ZWxvcGVycyBmdW5kIGZyb20gZWFjaCBnYW1lIAogICAgICAgIEVPU0JldEdhbWVJbnRlcmZhY2UoRElDRSkucGF5RGV2ZWxvcGVyc0Z1bmQocmVjZWl2ZXIpOwoJCUVPU0JldEdhbWVJbnRlcmZhY2UoU0xPVFMpLnBheURldmVsb3BlcnNGdW5kKHJlY2VpdmVyKTsKCgkJLy8gbm93IHNlbmQgdGhlIGRldmVsb3BlcnMgZnVuZCBmcm9tIHRoZSBtYWluIGNvbnRyYWN0LgoJCXVpbnQyNTYgZGV2ZWxvcGVyc0Z1bmQgPSBERVZFTE9QRVJTRlVORDsKCgkJLy8gc2V0IGRldmVsb3BlcnMgZnVuZCB0byB6ZXJvCgkJREVWRUxPUEVSU0ZVTkQgPSAwOwoKCQkvLyB0cmFuc2ZlciB0aGlzIGFtb3VudCB0byB0aGUgb3duZXIhCgkJcmVjZWl2ZXIudHJhbnNmZXIoZGV2ZWxvcGVyc0Z1bmQpOwoJfQoKCS8vIHJlc2N1ZSB0b2tlbnMgaW5hZHZlcnRlbnRseSBzZW50IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIAoJZnVuY3Rpb24gRVJDMjBSZXNjdWUoYWRkcmVzcyB0b2tlbkFkZHJlc3MsIHVpbnQyNTYgYW10VG9rZW5zKSBwdWJsaWMgewoJCXJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlFUkMyMCh0b2tlbkFkZHJlc3MpLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtdFRva2Vucyk7Cgl9CgoJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoJLy8gQkFTSUMgRVJDMjAgVE9LRU4gT1BFUkFUSU9OUwoJLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludCl7CgkJcmV0dXJuIHRvdGFsU3VwcGx5OwoJfQoKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnModWludCl7CgkJcmV0dXJuIGJhbGFuY2VzW19vd25lcl07Cgl9CgoJLy8gZG9uJ3QgYWxsb3cgdHJhbnNmZXJzIGJlZm9yZSB0aGUgcmVxdWlyZWQgd2FpdC10aW1lCgkvLyBhbmQgZG9uJ3QgYWxsb3cgdHJhbnNmZXJzIHRvIHRoaXMgY29udHJhY3QgYWRkciwgaXQnbGwganVzdCBraWxsIHRva2VucwoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKCQlyZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAKCQkJJiYgY29udHJpYnV0aW9uVGltZVttc2cuc2VuZGVyXSArIFdBSVRUSU1FVU5USUxXSVRIRFJBV09SVFJBTlNGRVIgPD0gYmxvY2sudGltZXN0YW1wCgkJCSYmIF90byAhPSBhZGRyZXNzKHRoaXMpCgkJCSYmIF90byAhPSBhZGRyZXNzKDApKTsKCgkJLy8gc2FmZWx5IHN1YnRyYWN0CgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CgkJYmFsYW5jZXNbX3RvXSA9IFNhZmVNYXRoLmFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwoKCQkvLyBsb2cgZXZlbnQgCgkJZW1pdCBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8gZG9uJ3QgYWxsb3cgdHJhbnNmZXJzIGJlZm9yZSB0aGUgcmVxdWlyZWQgd2FpdC10aW1lCgkvLyBhbmQgZG9uJ3QgYWxsb3cgdHJhbnNmZXJzIHRvIHRoZSBjb250cmFjdCBhZGRyLCBpdCdsbCBqdXN0IGtpbGwgdG9rZW5zCglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKXsKCQlyZXF1aXJlKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAKCQkJJiYgYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAKCQkJJiYgY29udHJpYnV0aW9uVGltZVtfZnJvbV0gKyBXQUlUVElNRVVOVElMV0lUSERSQVdPUlRSQU5TRkVSIDw9IGJsb2NrLnRpbWVzdGFtcAoJCQkmJiBfdG8gIT0gYWRkcmVzcyh0aGlzKQoJCQkmJiBfdG8gIT0gYWRkcmVzcygwKSk7CgoJCS8vIHNhZmVseSBhZGQgdG8gX3RvIGFuZCBzdWJ0cmFjdCBmcm9tIF9mcm9tLCBhbmQgc3VidHJhY3QgZnJvbSBhbGxvd2VkIGJhbGFuY2VzLgoJCWJhbGFuY2VzW190b10gPSBTYWZlTWF0aC5hZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgCQliYWxhbmNlc1tfZnJvbV0gPSBTYWZlTWF0aC5zdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogIAkJYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zdWIoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CgogIAkJLy8gbG9nIGV2ZW50CgkJZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoJCXJldHVybiB0cnVlOwogICAJCQoJfQoJCglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyhib29sKXsKCgkJYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgkJZW1pdCBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCQkvLyBsb2cgZXZlbnQKCQlyZXR1cm4gdHJ1ZTsKCX0KCQoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50KXsKCQlyZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKCX0KfQoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJ0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgRU9TQmV0RGljZSBpcyB1c2luZ09yYWNsaXplLCBFT1NCZXRHYW1lSW50ZXJmYWNlIHsKCgl1c2luZyBTYWZlTWF0aCBmb3IgKjsKCgkvLyBldmVudHMKCWV2ZW50IEJ1eVJvbGxzKGJ5dGVzMzIgaW5kZXhlZCBvcmFjbGl6ZVF1ZXJ5SWQpOwoJZXZlbnQgTGVkZ2VyUHJvb2ZGYWlsZWQoYnl0ZXMzMiBpbmRleGVkIG9yYWNsaXplUXVlcnlJZCk7CglldmVudCBSZWZ1bmQoYnl0ZXMzMiBpbmRleGVkIG9yYWNsaXplUXVlcnlJZCwgdWludDI1NiBhbW91bnQpOwoJZXZlbnQgRGljZVNtYWxsQmV0KHVpbnQxNiBhY3R1YWxSb2xscywgdWludDI1NiBkYXRhMSwgdWludDI1NiBkYXRhMiwgdWludDI1NiBkYXRhMywgdWludDI1NiBkYXRhNCk7CglldmVudCBEaWNlTGFyZ2VCZXQoYnl0ZXMzMiBpbmRleGVkIG9yYWNsaXplUXVlcnlJZCwgdWludDE2IGFjdHVhbFJvbGxzLCB1aW50MjU2IGRhdGExLCB1aW50MjU2IGRhdGEyLCB1aW50MjU2IGRhdGEzLCB1aW50MjU2IGRhdGE0KTsKCgkvLyBnYW1lIGRhdGEgc3RydWN0dXJlCglzdHJ1Y3QgRGljZUdhbWVEYXRhIHsKCQlhZGRyZXNzIHBsYXllcjsKCQlib29sIHBhaWRPdXQ7CgkJdWludDI1NiBzdGFydDsKCQl1aW50MjU2IGV0aGVyUmVjZWl2ZWQ7CgkJdWludDI1NiBiZXRQZXJSb2xsOwoJCXVpbnQxNiByb2xsczsKCQl1aW50OCByb2xsVW5kZXI7Cgl9CgoJbWFwcGluZyAoYnl0ZXMzMiA9PiBEaWNlR2FtZURhdGEpIHB1YmxpYyBkaWNlRGF0YTsKCgkvLyBldGhlciBpbiB0aGlzIGNvbnRyYWN0IGNhbiBiZSBpbiBvbmUgb2YgdHdvIGxvY2F0aW9uczoKCXVpbnQyNTYgcHVibGljIExJQUJJTElUSUVTOwoJdWludDI1NiBwdWJsaWMgREVWRUxPUEVSU0ZVTkQ7CgoJLy8gY291bnRlcnMgZm9yIGZyb250ZW5kIHN0YXRpc3RpY3MKCXVpbnQyNTYgcHVibGljIEFNT1VOVFdBR0VSRUQ7Cgl1aW50MjU2IHB1YmxpYyBHQU1FU1BMQVlFRDsKCQoJLy8gdG9nZ2xhYmxlIHZhbHVlcwoJdWludDI1NiBwdWJsaWMgT1JBQ0xJWkVRVUVSWU1BWFRJTUU7Cgl1aW50MjU2IHB1YmxpYyBNSU5CRVRfcGVyUk9MTDsKCXVpbnQyNTYgcHVibGljIE1JTkJFVF9wZXJUWDsKCXVpbnQyNTYgcHVibGljIE9SQUNMSVpFR0FTUFJJQ0U7Cgl1aW50MjU2IHB1YmxpYyBJTklUSUFMR0FTRk9ST1JBQ0xJWkU7Cgl1aW50OCBwdWJsaWMgSE9VU0VFREdFX2luVEhPVVNBTkRUSFBFUkNFTlRTOyAvLyAxIHRob3VzYW50aHBlcmNlbnQgPT0gMS8xMDAwLCAKCXVpbnQ4IHB1YmxpYyBNQVhXSU5faW5USE9VU0FORFRIUEVSQ0VOVFM7IC8vIGRldGVybWluZXMgdGhlIG1heGltdW0gd2luIGEgdXNlciBtYXkgcmVjZWl2ZS4KCgkvLyB0b2dnbGFibGUgZnVuY3Rpb25hbGl0eSBvZiBjb250cmFjdAoJYm9vbCBwdWJsaWMgR0FNRVBBVVNFRDsKCWJvb2wgcHVibGljIFJFRlVORFNBQ1RJVkU7CgoJLy8gb3duZXIgb2YgY29udHJhY3QKCWFkZHJlc3MgcHVibGljIE9XTkVSOwoKCS8vIGJhbmtyb2xsZXIgYWRkcmVzcwoJYWRkcmVzcyBwdWJsaWMgQkFOS1JPTExFUjsKCgkvLyBjb25zdHJ1Y3RvcgoJZnVuY3Rpb24gRU9TQmV0RGljZSgpIHB1YmxpYyB7CgkJLy8gbGVkZ2VyIHByb29mIGlzIEFMV0FZUyB2ZXJpZmllZCBvbi1jaGFpbgoJCW9yYWNsaXplX3NldFByb29mKHByb29mVHlwZV9MZWRnZXIpOwoKCQkvLyBnYXMgcHJpY2VzIGZvciBvcmFjbGl6ZSBjYWxsIGJhY2ssIGNhbiBiZSBjaGFuZ2VkCgkJb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UoODAwMDAwMDAwMCk7CgkJT1JBQ0xJWkVHQVNQUklDRSA9IDgwMDAwMDAwMDA7CgkJSU5JVElBTEdBU0ZPUk9SQUNMSVpFID0gMzAwMDAwOwoKCQlBTU9VTlRXQUdFUkVEID0gMDsKCQlHQU1FU1BMQVlFRCA9IDA7CgoJCUdBTUVQQVVTRUQgPSBmYWxzZTsKCQlSRUZVTkRTQUNUSVZFID0gdHJ1ZTsKCgkJT1JBQ0xJWkVRVUVSWU1BWFRJTUUgPSA2IGhvdXJzOwoJCU1JTkJFVF9wZXJST0xMID0gMjAgZmlubmV5OwoJCU1JTkJFVF9wZXJUWCA9IDEwMCBmaW5uZXk7CgkJSE9VU0VFREdFX2luVEhPVVNBTkRUSFBFUkNFTlRTID0gNTsgLy8gNS8xMDAwID09IDAuNSUgaG91c2UgZWRnZQoJCU1BWFdJTl9pblRIT1VTQU5EVEhQRVJDRU5UUyA9IDIwOyAvLyAyMC8xMDAwID09IDIuMCUgb2YgYmFua3JvbGwgY2FuIGJlIHdvbiBpbiBhIHNpbmdsZSBiZXQsIHdpbGwgYmUgbG93ZXJlZCBvbmNlIHRoZXJlIGlzIG1vcmUgaW52ZXN0b3JzCgkJT1dORVIgPSBtc2cuc2VuZGVyOwoJfQoKCS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoJLy8gSU5URVJGQUNFIENPTlRBQ1QgRlVOQ1RJT05TCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCglmdW5jdGlvbiBwYXlEZXZlbG9wZXJzRnVuZChhZGRyZXNzIGRldmVsb3BlcikgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gQkFOS1JPTExFUik7CgoJCXVpbnQyNTYgZGV2RnVuZCA9IERFVkVMT1BFUlNGVU5EOwoKCQlERVZFTE9QRVJTRlVORCA9IDA7CgoJCWRldmVsb3Blci50cmFuc2ZlcihkZXZGdW5kKTsKCX0KCgkvLyBqdXN0IGEgZnVuY3Rpb24gdG8gcmVjZWl2ZSBldGgsIG9ubHkgYWxsb3cgdGhlIGJhbmtyb2xsIHRvIHVzZSB0aGlzCglmdW5jdGlvbiByZWNlaXZlUGF5bWVudEZvck9yYWNsaXplKCkgcGF5YWJsZSBwdWJsaWMgewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBCQU5LUk9MTEVSKTsKCX0KCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCS8vIFZJRVcgRlVOQ1RJT05TCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCglmdW5jdGlvbiBnZXRNYXhXaW4oKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpewoJCXJldHVybiAoU2FmZU1hdGgubXVsKEVPU0JldEJhbmtyb2xsSW50ZXJmYWNlKEJBTktST0xMRVIpLmdldEJhbmtyb2xsKCksIE1BWFdJTl9pblRIT1VTQU5EVEhQRVJDRU5UUykgLyAxMDAwKTsKCX0KCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCS8vIE9XTkVSIE9OTFkgRlVOQ1RJT05TCgkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgkvLyBXQVJOSU5HISEhISEgQ2FuIG9ubHkgc2V0IHRoaXMgZnVuY3Rpb24gb25jZSEKCWZ1bmN0aW9uIHNldEJhbmtyb2xsZXJDb250cmFjdE9uY2UoYWRkcmVzcyBiYW5rcm9sbEFkZHJlc3MpIHB1YmxpYyB7CgkJLy8gcmVxdWlyZSB0aGF0IEJBTktST0xMRVIgYWRkcmVzcyA9PSAwIChhZGRyZXNzIG5vdCBzZXQgeWV0KSwgYW5kIGNvbWluZyBmcm9tIG93bmVyLgoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBPV05FUiAmJiBCQU5LUk9MTEVSID09IGFkZHJlc3MoMCkpOwoKCQkvLyBjaGVjayBoZXJlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBiYW5rcm9sbCBjb250cmFjdCBpcyBsZWdpdGltYXRlCgkJLy8ganVzdCBtYWtlIHN1cmUgdGhhdCBjYWxsaW5nIHRoZSBiYW5rcm9sbCBjb250cmFjdCBnZXRCYW5rcm9sbCgpIHJldHVybnMgbm9uLXplcm8KCgkJcmVxdWlyZShFT1NCZXRCYW5rcm9sbEludGVyZmFjZShiYW5rcm9sbEFkZHJlc3MpLmdldEJhbmtyb2xsKCkgIT0gMCk7CgoJCUJBTktST0xMRVIgPSBiYW5rcm9sbEFkZHJlc3M7Cgl9CgoJZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlPV05FUiA9IG5ld093bmVyOwoJfQoKCWZ1bmN0aW9uIHNldE9yYWNsaXplUXVlcnlNYXhUaW1lKHVpbnQyNTYgbmV3VGltZSkgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlPUkFDTElaRVFVRVJZTUFYVElNRSA9IG5ld1RpbWU7Cgl9CgoJLy8gc3RvcmUgdGhlIGdhcyBwcmljZSBhcyBhIHN0b3JhZ2UgdmFyaWFibGUgZm9yIGVhc3kgcmVmZXJlbmNlLAoJLy8gYW5kIHRoZW4gY2hhbmdlIHRoZSBnYXMgcHJpY2UgdXNpbmcgdGhlIHByb3BlciBvcmFjbGl6ZSBmdW5jdGlvbgoJZnVuY3Rpb24gc2V0T3JhY2xpemVRdWVyeUdhc1ByaWNlKHVpbnQyNTYgZ2FzUHJpY2UpIHB1YmxpYyB7CgkJcmVxdWlyZShtc2cuc2VuZGVyID09IE9XTkVSKTsKCgkJT1JBQ0xJWkVHQVNQUklDRSA9IGdhc1ByaWNlOwoJCW9yYWNsaXplX3NldEN1c3RvbUdhc1ByaWNlKGdhc1ByaWNlKTsKCX0KCgkvLyBzaG91bGQgYmUgfjE3NSwwMDAgdG8gc2F2ZSBldGgKCWZ1bmN0aW9uIHNldEluaXRpYWxHYXNGb3JPcmFjbGl6ZSh1aW50MjU2IGdhc0FtdCkgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlJTklUSUFMR0FTRk9ST1JBQ0xJWkUgPSBnYXNBbXQ7Cgl9CgoJZnVuY3Rpb24gc2V0R2FtZVBhdXNlZChib29sIHBhdXNlZCkgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlHQU1FUEFVU0VEID0gcGF1c2VkOwoJfQoKCWZ1bmN0aW9uIHNldFJlZnVuZHNBY3RpdmUoYm9vbCBhY3RpdmUpIHB1YmxpYyB7CgkJcmVxdWlyZShtc2cuc2VuZGVyID09IE9XTkVSKTsKCgkJUkVGVU5EU0FDVElWRSA9IGFjdGl2ZTsKCX0KCglmdW5jdGlvbiBzZXRIb3VzZUVkZ2UodWludDggaG91c2VFZGdlSW5UaG91c2FuZHRoUGVyY2VudHMpIHB1YmxpYyB7CgkJLy8gaG91c2UgZWRnZSBjYW5ub3QgYmUgc2V0ID4gNSUsIGNhbiBiZSBzZXQgdG8gemVybyBmb3IgcHJvbW90aW9ucwoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBPV05FUiAmJiBob3VzZUVkZ2VJblRob3VzYW5kdGhQZXJjZW50cyA8PSA1MCk7CgoJCUhPVVNFRURHRV9pblRIT1VTQU5EVEhQRVJDRU5UUyA9IGhvdXNlRWRnZUluVGhvdXNhbmR0aFBlcmNlbnRzOwoJfQoKCWZ1bmN0aW9uIHNldE1pbkJldFBlclJvbGwodWludDI1NiBtaW5CZXQpIHB1YmxpYyB7CgkJcmVxdWlyZShtc2cuc2VuZGVyID09IE9XTkVSICYmIG1pbkJldCA+IDEwMDApOwoKCQlNSU5CRVRfcGVyUk9MTCA9IG1pbkJldDsKCX0KCglmdW5jdGlvbiBzZXRNaW5CZXRQZXJUeCh1aW50MjU2IG1pbkJldCkgcHVibGljIHsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gT1dORVIgJiYgbWluQmV0ID4gMTAwMCk7CgoJCU1JTkJFVF9wZXJUWCA9IG1pbkJldDsKCX0KCglmdW5jdGlvbiBzZXRNYXhXaW4odWludDggbmV3TWF4V2luSW5UaG91c2FuZHRoUGVyY2VudHMpIHB1YmxpYyB7CgkJLy8gY2Fubm90IHNldCBiZXQgbGltaXQgZ3JlYXRlciB0aGFuIDUlIG9mIHRvdGFsIEJBTktST0xMLgoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBPV05FUiAmJiBuZXdNYXhXaW5JblRob3VzYW5kdGhQZXJjZW50cyA8PSA1MCk7CgoJCU1BWFdJTl9pblRIT1VTQU5EVEhQRVJDRU5UUyA9IG5ld01heFdpbkluVGhvdXNhbmR0aFBlcmNlbnRzOwoJfQoKCS8vIHJlc2N1ZSB0b2tlbnMgaW5hZHZlcnRlbnRseSBzZW50IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIAoJZnVuY3Rpb24gRVJDMjBSZXNjdWUoYWRkcmVzcyB0b2tlbkFkZHJlc3MsIHVpbnQyNTYgYW10VG9rZW5zKSBwdWJsaWMgewoJCXJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gT1dORVIpOwoKCQlFUkMyMCh0b2tlbkFkZHJlc3MpLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtdFRva2Vucyk7Cgl9CgoJLy8gcmVxdWlyZSB0aGF0IHRoZSBxdWVyeSB0aW1lIGlzIHRvbyBzbG93LCBiZXQgaGFzIG5vdCBiZWVuIHBhaWQgb3V0LCBhbmQgZWl0aGVyIGNvbnRyYWN0IG93bmVyIG9yIHBsYXllciBpcyBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uCgkvLyB0aGlzIHdpbGwgb25seSBiZSB1c2VkL2NhbiBvY2N1ciBvbiBxdWVyaWVzIHRoYXQgYXJlIGZvcndhcmRlZCB0byBvcmFjbGl6ZSBpbiB0aGUgZmlyc3QgcGxhY2UuIEFsbCBvdGhlcnMgd2lsbCBiZSBwYWlkIG91dCBpbW1lZGlhdGVseS4KCWZ1bmN0aW9uIHJlZnVuZChieXRlczMyIG9yYWNsaXplUXVlcnlJZCkgcHVibGljIHsKCQkvLyBzdG9yZSBkYXRhIGluIG1lbW9yeSBmb3IgZWFzeSBhY2Nlc3MuCgkJRGljZUdhbWVEYXRhIG1lbW9yeSBkYXRhID0gZGljZURhdGFbb3JhY2xpemVRdWVyeUlkXTsKCgkJcmVxdWlyZShibG9jay50aW1lc3RhbXAgLSBkYXRhLnN0YXJ0ID49IE9SQUNMSVpFUVVFUllNQVhUSU1FCgkJCSYmIChtc2cuc2VuZGVyID09IE9XTkVSIHx8IG1zZy5zZW5kZXIgPT0gZGF0YS5wbGF5ZXIpCgkJCSYmICghZGF0YS5wYWlkT3V0KQoJCQkmJiBMSUFCSUxJVElFUyA+PSBkYXRhLmV0aGVyUmVjZWl2ZWQKCQkJJiYgZGF0YS5ldGhlclJlY2VpdmVkID4gMAoJCQkmJiBSRUZVTkRTQUNUSVZFKTsKCgkJLy8gc2V0IHBhaWRvdXQgPT0gdHJ1ZSwgc28gdXNlcnMgY2FuJ3QgcmVxdWVzdCBtb3JlIHJlZnVuZHMsIGFuZCBhIHN1cGVyIGRlbGF5ZWQgb3JhY2xpemUgX19jYWxsYmFjayB3aWxsIGp1c3QgZ2V0IHJldmVydGVkCgkJZGljZURhdGFbb3JhY2xpemVRdWVyeUlkXS5wYWlkT3V0ID0gdHJ1ZTsKCgkJLy8gc3VidHJhY3QgZXRoZXJSZWNlaXZlZCBiZWNhdXNlIHRoZSBiZXQgaXMgYmVpbmcgcmVmdW5kZWQKCQlMSUFCSUxJVElFUyA9IFNhZmVNYXRoLnN1YihMSUFCSUxJVElFUywgZGF0YS5ldGhlclJlY2VpdmVkKTsKCgkJLy8gdGhlbiB0cmFuc2ZlciB0aGUgb3JpZ2luYWwgYmV0IHRvIHRoZSBwbGF5ZXIuCgkJZGF0YS5wbGF5ZXIudHJhbnNmZXIoZGF0YS5ldGhlclJlY2VpdmVkKTsKCgkJLy8gZmluYWxseSwgbG9nIGFuIGV2ZW50IHNheWluZyB0aGF0IHRoZSByZWZ1bmQgaGFzIHByb2Nlc3NlZC4KCQllbWl0IFJlZnVuZChvcmFjbGl6ZVF1ZXJ5SWQsIGRhdGEuZXRoZXJSZWNlaXZlZCk7Cgl9CgoJZnVuY3Rpb24gcGxheSh1aW50MjU2IGJldFBlclJvbGwsIHVpbnQxNiByb2xscywgdWludDggcm9sbFVuZGVyKSBwdWJsaWMgcGF5YWJsZSB7CgoJCS8vIHN0b3JlIGluIG1lbW9yeSBmb3IgY2hlYXBlciBhY2Nlc3MKCQl1aW50MjU2IG1pbkJldFBlclR4ID0gTUlOQkVUX3BlclRYOwoKCQlyZXF1aXJlKCFHQU1FUEFVU0VECgkJCQkmJiBiZXRQZXJSb2xsICogcm9sbHMgPj0gbWluQmV0UGVyVHgKCQkJCSYmIG1zZy52YWx1ZSA+PSBtaW5CZXRQZXJUeAoJCQkJJiYgYmV0UGVyUm9sbCA+PSBNSU5CRVRfcGVyUk9MTAoJCQkJJiYgcm9sbHMgPiAwCgkJCQkmJiByb2xscyA8PSAxMDI0CgkJCQkmJiBiZXRQZXJSb2xsIDw9IG1zZy52YWx1ZQoJCQkJJiYgcm9sbFVuZGVyID4gMQoJCQkJJiYgcm9sbFVuZGVyIDwgOTgKCQkJCS8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBwbGF5ZXIgY2Fubm90IHdpbiBtb3JlIHRoYW4gdGhlIG1heCB3aW4gKGZvcmdldCBhYm91dCBob3VzZSBlZGdlIGhlcmUpCgkJCQkmJiAoU2FmZU1hdGgubXVsKGJldFBlclJvbGwsIDEwMCkgLyAocm9sbFVuZGVyIC0gMSkpIDw9IGdldE1heFdpbigpKTsKCgkJLy8gZXF1YXRpb24gZm9yIGdhcyB0byBvcmFjbGl6ZSBpczoKCQkvLyBnYXMgPSAoc29tZSBmaXhlZCBnYXMgYW10KSArIDEwMDUgKiByb2xscwoKCQl1aW50MjU2IGdhc1RvU2VuZCA9IElOSVRJQUxHQVNGT1JPUkFDTElaRSArICh1aW50MjU2KDEwMDUpICogcm9sbHMpOwoKCQlFT1NCZXRCYW5rcm9sbEludGVyZmFjZShCQU5LUk9MTEVSKS5wYXlPcmFjbGl6ZShvcmFjbGl6ZV9nZXRQcmljZSgncmFuZG9tJywgZ2FzVG9TZW5kKSk7CgoJCS8vIG9yYWNsaXplX25ld1JhbmRvbURTUXVlcnkoZGVsYXkgaW4gc2Vjb25kcywgYnl0ZXMgb2YgcmFuZG9tIGRhdGEsIGdhcyBmb3IgY2FsbGJhY2sgZnVuY3Rpb24pCgkJYnl0ZXMzMiBvcmFjbGl6ZVF1ZXJ5SWQgPSBvcmFjbGl6ZV9uZXdSYW5kb21EU1F1ZXJ5KDAsIDMwLCBnYXNUb1NlbmQpOwoKCQlkaWNlRGF0YVtvcmFjbGl6ZVF1ZXJ5SWRdID0gRGljZUdhbWVEYXRhKHsKCQkJcGxheWVyIDogbXNnLnNlbmRlciwKCQkJcGFpZE91dCA6IGZhbHNlLAoJCQlzdGFydCA6IGJsb2NrLnRpbWVzdGFtcCwKCQkJZXRoZXJSZWNlaXZlZCA6IG1zZy52YWx1ZSwKCQkJYmV0UGVyUm9sbCA6IGJldFBlclJvbGwsCgkJCXJvbGxzIDogcm9sbHMsCgkJCXJvbGxVbmRlciA6IHJvbGxVbmRlcgoJCX0pOwoKCQkvLyBhZGQgdGhlIHNlbnQgdmFsdWUgaW50byBsaWFiaWxpdGllcy4gdGhpcyBzaG91bGQgTk9UIGdvIGludG8gdGhlIGJhbmtyb2xsIHlldAoJCS8vIGFuZCBtdXN0IGJlIHF1YXJhbnRpbmVkIGhlcmUgdG8gcHJldmVudCB0aW1pbmcgYXR0YWNrcwoJCUxJQUJJTElUSUVTID0gU2FmZU1hdGguYWRkKExJQUJJTElUSUVTLCBtc2cudmFsdWUpOwoKCQkvLyBsb2cgYW4gZXZlbnQKCQllbWl0IEJ1eVJvbGxzKG9yYWNsaXplUXVlcnlJZCk7Cgl9CgoJLy8gb3JhY2xpemUgY2FsbGJhY2suCgkvLyBCYXNpY2FsbHkgZG8gdGhlIGluc3RhbnQgYmV0IHJlc29sdXRpb24gaW4gdGhlIHBsYXkoLi4uKSBmdW5jdGlvbiBhYm92ZSwgYnV0IHdpdGggdGhlIHJhbmRvbSBkYXRhIAoJLy8gdGhhdCBvcmFjbGl6ZSByZXR1cm5zLCBpbnN0ZWFkIG9mIGdldHRpbmcgcHN1ZWRvLXJhbmRvbW5lc3MgZnJvbSBibG9jay5ibG9ja2hhc2ggCglmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgX3F1ZXJ5SWQsIHN0cmluZyBfcmVzdWx0LCBieXRlcyBfcHJvb2YpIHB1YmxpYyB7CgoJCURpY2VHYW1lRGF0YSBtZW1vcnkgZGF0YSA9IGRpY2VEYXRhW19xdWVyeUlkXTsKCQkvLyBvbmx5IG5lZWQgdG8gY2hlY2sgdGhlc2UsIGFzIGFsbCBvZiB0aGUgZ2FtZSBiYXNlZCBjaGVja3Mgd2VyZSBhbHJlYWR5IGRvbmUgaW4gdGhlIHBsYXkoLi4uKSBmdW5jdGlvbiAKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xpemVfY2JBZGRyZXNzKCkgCgkJCSYmICFkYXRhLnBhaWRPdXQgCgkJCSYmIGRhdGEucGxheWVyICE9IGFkZHJlc3MoMCkgCgkJCSYmIExJQUJJTElUSUVTID49IGRhdGEuZXRoZXJSZWNlaXZlZCk7CgoJCS8vIGlmIHRoZSBwcm9vZiBoYXMgZmFpbGVkLCBpbW1lZGlhdGVseSByZWZ1bmQgdGhlIHBsYXllciBoaXMgb3JpZ2luYWwgYmV0Li4uCgkJaWYgKG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19yZXR1cm5Db2RlKF9xdWVyeUlkLCBfcmVzdWx0LCBfcHJvb2YpICE9IDApewoKCQkJaWYgKFJFRlVORFNBQ1RJVkUpewoJCQkJLy8gc2V0IGNvbnRyYWN0IGRhdGEKCQkJCWRpY2VEYXRhW19xdWVyeUlkXS5wYWlkT3V0ID0gdHJ1ZTsKCgkJCQkvLyBpZiB0aGUgY2FsbCBmYWlscywgdGhlbiBzdWJ0cmFjdCB0aGUgb3JpZ2luYWwgdmFsdWUgc2VudCBmcm9tIGxpYWJpbGl0ZXMgYW5kIGFtb3VudCB3YWdlcmVkLCBhbmQgdGhlbiBzZW5kIGl0IGJhY2sKCQkJCUxJQUJJTElUSUVTID0gU2FmZU1hdGguc3ViKExJQUJJTElUSUVTLCBkYXRhLmV0aGVyUmVjZWl2ZWQpOwoKCQkJCS8vIHRyYW5zZmVyIHRoZSBvcmlnaW5hbCBiZXQKCQkJCWRhdGEucGxheWVyLnRyYW5zZmVyKGRhdGEuZXRoZXJSZWNlaXZlZCk7CgoJCQkJLy8gbG9nIHRoZSByZWZ1bmQKCQkJCWVtaXQgUmVmdW5kKF9xdWVyeUlkLCBkYXRhLmV0aGVyUmVjZWl2ZWQpOwoJCQl9CgkJCS8vIGxvZyB0aGUgbGVkZ2VyIHByb29mIGZhaWwKCQkJZW1pdCBMZWRnZXJQcm9vZkZhaWxlZChfcXVlcnlJZCk7CgkJCQoJCX0KCQkvLyBlbHNlLCByZXNvbHZlIHRoZSBiZXQgYXMgbm9ybWFsIHdpdGggdGhpcyBtaW5lci1wcm9vZiBwcm92ZW4tcmFuZG9tbmVzcyBmcm9tIG9yYWNsaXplLgoJCWVsc2UgewoJCQkvLyBzYXZlIHRoZXNlIGluIG1lbW9yeSBmb3IgY2hlYXAgYWNjZXNzCgkJCXVpbnQ4IGhvdXNlRWRnZUluVGhvdXNhbmR0aFBlcmNlbnRzID0gSE9VU0VFREdFX2luVEhPVVNBTkRUSFBFUkNFTlRTOwoKCQkJLy8gc2V0IHRoZSBjdXJyZW50IGJhbGFuY2UgYXZhaWxhYmxlIHRvIHRoZSBwbGF5ZXIgYXMgZXRoZXJSZWNlaXZlZAoJCQl1aW50MjU2IGV0aGVyQXZhaWxhYmxlID0gZGF0YS5ldGhlclJlY2VpdmVkOwoKCQkJLy8gbG9ncyBmb3IgdGhlIGZyb250ZW5kLCBhcyBiZWZvcmUuLi4KCQkJdWludDI1NltdIG1lbW9yeSBsb2dzRGF0YSA9IG5ldyB1aW50MjU2W10oNCk7CgoJCQkvLyB0aGlzIGxvb3AgaXMgaGlnaGx5IHNpbWlsYXIgdG8gdGhlIG9uZSBmcm9tIGJlZm9yZS4gSW5zdGVhZCBvZiBmdWxseSBkb2N1bWVudGVkLCB0aGUgZGlmZmVyZW5jZXMgd2lsbCBiZSBwb2ludGVkIG91dCBpbnN0ZWFkLgoJCQl1aW50MjU2IHdpbm5pbmdzOwoJCQl1aW50MTYgZ2FtZXNQbGF5ZWQ7CgoJCQkvLyBnZXQgdGhpcyB2YWx1ZSBvdXRzaWRlIG9mIHRoZSBsb29wIGZvciBnYXMgY29zdHMgc2FrZQoJCQl1aW50MjU2IGh5cG90aGV0aWNhbFdpbkFtb3VudCA9IFNhZmVNYXRoLm11bChTYWZlTWF0aC5tdWwoZGF0YS5iZXRQZXJSb2xsLCAxMDApLCAoMTAwMCAtIGhvdXNlRWRnZUluVGhvdXNhbmR0aFBlcmNlbnRzKSkgLyAoZGF0YS5yb2xsVW5kZXIgLSAxKSAvIDEwMDA7CgoJCQl3aGlsZSAoZ2FtZXNQbGF5ZWQgPCBkYXRhLnJvbGxzICYmIGV0aGVyQXZhaWxhYmxlID49IGRhdGEuYmV0UGVyUm9sbCl7CgkJCQkKCQkJCS8vIG5vdywgdGhpcyByb2xsIGlzIGtlY2NhazI1NihfcmVzdWx0LCBub25jZSkgKyAxIC4uLiB0aGlzIGlzIHRoZSBtYWluIGRpZmZlcmVuY2UgZnJvbSB1c2luZyBvcmFjbGl6ZS4KCgkJCQlpZiAodWludDgodWludDI1NihrZWNjYWsyNTYoX3Jlc3VsdCwgZ2FtZXNQbGF5ZWQpKSAlIDEwMCkgKyAxIDwgZGF0YS5yb2xsVW5kZXIpewoKCQkJCQkvLyBub3csIGp1c3QgZ2V0IHRoZSByZXNwZWN0aXZlIGZpZWxkcyBmcm9tIGRhdGEuZmllbGQgdW5saWtlIGJlZm9yZSB3aGVyZSB0aGV5IHdlcmUgaW4gc2VwZXJhdGUgdmFyaWFibGVzLgoJCQkJCXdpbm5pbmdzID0gaHlwb3RoZXRpY2FsV2luQW1vdW50OwoKCQkJCQkvLyBhc3NlbWJsZSBsb2dzLi4uCgkJCQkJaWYgKGdhbWVzUGxheWVkIDw9IDI1NSl7CgkJCQkJCWxvZ3NEYXRhWzBdICs9IHVpbnQyNTYoMikgKiogKDI1NSAtIGdhbWVzUGxheWVkKTsKCQkJCQl9CgkJCQkJZWxzZSBpZiAoZ2FtZXNQbGF5ZWQgPD0gNTExKXsKCQkJCQkJbG9nc0RhdGFbMV0gKz0gdWludDI1NigyKSAqKiAoNTExIC0gZ2FtZXNQbGF5ZWQpOwoJCQkJCX0KCQkJCQllbHNlIGlmIChnYW1lc1BsYXllZCA8PSA3NjcpewoJCQkJCQlsb2dzRGF0YVsyXSArPSB1aW50MjU2KDIpICoqICg3NjcgLSBnYW1lc1BsYXllZCk7CgkJCQkJfQoJCQkJCWVsc2UgewoJCQkJCQlsb2dzRGF0YVszXSArPSB1aW50MjU2KDIpICoqICgxMDIzIC0gZ2FtZXNQbGF5ZWQpOwoJCQkJCX0KCQkJCX0KCQkJCWVsc2UgewoJCQkJCS8vICBsZWF2ZSAxIHdlaSBhcyBhIGNvbnNvbGF0aW9uIHByaXplIDopCgkJCQkJd2lubmluZ3MgPSAxOwoJCQkJfQoJCQkJZ2FtZXNQbGF5ZWQrKzsKCQkJCQoJCQkJZXRoZXJBdmFpbGFibGUgPSBTYWZlTWF0aC5zdWIoU2FmZU1hdGguYWRkKGV0aGVyQXZhaWxhYmxlLCB3aW5uaW5ncyksIGRhdGEuYmV0UGVyUm9sbCk7CgkJCX0KCgkJCS8vIHRyYWNrIHRoYXQgdGhlc2UgZ2FtZXMgd2VyZSBwbGF5ZWQKCQkJR0FNRVNQTEFZRUQgKz0gZ2FtZXNQbGF5ZWQ7CgoJCQkvLyBhbmQgYWRkIHRoZSBhbW91bnQgd2FnZXJlZAoJCQlBTU9VTlRXQUdFUkVEID0gU2FmZU1hdGguYWRkKEFNT1VOVFdBR0VSRUQsIFNhZmVNYXRoLm11bChkYXRhLmJldFBlclJvbGwsIGdhbWVzUGxheWVkKSk7CgoJCQkvLyBJTVBPUlRBTlQ6IHdlIG11c3QgY2hhbmdlIHRoZSAicGFpZE91dCIgdG8gVFJVRSBoZXJlIHRvIHByZXZlbnQgcmVlbnRyYW5jeS9vdGhlciBuYXN0eSBlZmZlY3RzLgoJCQkvLyB0aGlzIHdhcyBub3QgbmVlZGVkIHdpdGggdGhlIHByZXZpb3VzIGxvb3AvY29kZSBibG9jaywgYW5kIGlzIHVzZWQgYmVjYXVzZSB2YXJpYWJsZXMgbXVzdCBiZSB3cml0dGVuIGludG8gc3RvcmFnZQoJCQlkaWNlRGF0YVtfcXVlcnlJZF0ucGFpZE91dCA9IHRydWU7CgoJCQkvLyBkZWNyZWFzZSBMSUFCSUxJVElFUyB3aGVuIHRoZSBzcGlucyBhcmUgbWFkZQoJCQlMSUFCSUxJVElFUyA9IFNhZmVNYXRoLnN1YihMSUFCSUxJVElFUywgZGF0YS5ldGhlclJlY2VpdmVkKTsKCgkJCS8vIGdldCB0aGUgZGV2ZWxvcGVycyBjdXQsIGFuZCBzZW5kIHRoZSByZXN0IG9mIHRoZSBldGhlciByZWNlaXZlZCB0byB0aGUgYmFua3JvbGxlciBjb250cmFjdAoJCQl1aW50MjU2IGRldmVsb3BlcnNDdXQgPSBTYWZlTWF0aC5tdWwoU2FmZU1hdGgubXVsKGRhdGEuYmV0UGVyUm9sbCwgaG91c2VFZGdlSW5UaG91c2FuZHRoUGVyY2VudHMpLCBnYW1lc1BsYXllZCkgLyA1MDAwOwoKCQkJLy8gYWRkIHRoZSBkZXZzIGN1dCB0byB0aGUgZGV2ZWxvcGVycyBmdW5kLgoJCQlERVZFTE9QRVJTRlVORCA9IFNhZmVNYXRoLmFkZChERVZFTE9QRVJTRlVORCwgZGV2ZWxvcGVyc0N1dCk7CgoJCQlFT1NCZXRCYW5rcm9sbEludGVyZmFjZShCQU5LUk9MTEVSKS5yZWNlaXZlRXRoZXJGcm9tR2FtZUFkZHJlc3MudmFsdWUoU2FmZU1hdGguc3ViKGRhdGEuZXRoZXJSZWNlaXZlZCwgZGV2ZWxvcGVyc0N1dCkpKCk7CgoJCQkvLyBmb3JjZSB0aGUgYmFua3JvbGxlciBjb250cmFjdCB0byBwYXkgb3V0IHRoZSBwbGF5ZXIKCQkJRU9TQmV0QmFua3JvbGxJbnRlcmZhY2UoQkFOS1JPTExFUikucGF5RXRoZXJUb1dpbm5lcihldGhlckF2YWlsYWJsZSwgZGF0YS5wbGF5ZXIpOwoKCQkJLy8gbG9nIGFuIGV2ZW50LCBub3cgd2l0aCB0aGUgb3JhY2xpemUgcXVlcnkgaWQKCQkJZW1pdCBEaWNlTGFyZ2VCZXQoX3F1ZXJ5SWQsIGdhbWVzUGxheWVkLCBsb2dzRGF0YVswXSwgbG9nc0RhdGFbMV0sIGxvZ3NEYXRhWzJdLCBsb2dzRGF0YVszXSk7CgkJfQoJfQoKLy8gRU5EIE9GIENPTlRSQUNULiBSRVBPUlQgQU5ZIEJVR1MgVE8gPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIwMTQ1NDQ1NzQ0NGQ0ZTUxNGM0NDRmNTU0MTQ0NGU1MjQzNDQ1NTJmNDg0ZSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KLy8gWUVTISBXRSBfRE9fIEhBVkUgQSBCVUcgQk9VTlRZIFBST0dSQU0hCgovLyBUSEFOSyBZT1UgRk9SIFJFQURJTkcgVEhJUyBDT05UUkFDVCwgSEFWRSBBIE5JQ0UgREFZIDopCgp9'.
	

]
