Class {
	#name : #SRTd5107e77d5f3b0035d152413c89851cbeafa9a60,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd5107e77d5f3b0035d152413c89851cbeafa9a60 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7Cgpjb250cmFjdCBQcmVzYWxlVG9rZW4gewogICAgCiAgICAvLy8gRmllbGRzOgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlNoaWZ0Q2FzaCBQcmVzYWxlIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlNDQVNIIjsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBQUklDRSA9IDU5ODsgIC8vIHBlciAxIEV0aGVyCgogICAgLy8gIHByaWNlCiAgICAvLyBDYXAgaXMgNDAwMCBFVEgKICAgIC8vIDEgZXRoID0gNTk4OyAgcHJlc2FsZSBTQ0FTSCB0b2tlbnMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFRPS0VOX1NVUFBMWV9MSU1JVCA9IDIzOTIwMDAgKiAoMSBldGhlciAvIDEgd2VpKTsKCiAgICBlbnVtIFN0YXRlewogICAgICAgIEluaXQsCiAgICAgICAgUnVubmluZywKICAgICAgICBQYXVzZWQsCiAgICAgICAgTWlncmF0aW5nLAogICAgICAgIE1pZ3JhdGVkCiAgICB9CgogICAgU3RhdGUgcHVibGljIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkluaXQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7IC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkCgogICAgLy8gR2F0aGVyZWQgZnVuZHMgY2FuIGJlIHdpdGhkcmF3biBvbmx5IHRvIGVzY3JvdydzIGFkZHJlc3MuCiAgICBhZGRyZXNzIHB1YmxpYyBlc2Nyb3cgPSAwOwoKICAgIC8vIFRva2VuIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGNhbGwgYWRtaW5pc3RyYXRpdmUKICAgIC8vIGZ1bmN0aW9ucyBvbiB0aGlzIGNvbnRyYWN0LgogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5NYW5hZ2VyID0gMDsKCiAgICAvLyBDcm93ZHNhbGUgbWFuYWdlciBoYXMgZXhjbHVzaXZlIHByaXZlbGVnZXMgdG8gYnVybiBwcmVzYWxlIHRva2Vucy4KICAgIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZU1hbmFnZXIgPSAwOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBvd25lckFwcGVuZGVkOwogICAgYWRkcmVzc1tdIHB1YmxpYyBvd25lcnM7CgogICAgLy8vIE1vZGlmaWVyczoKICAgIG1vZGlmaWVyIG9ubHlUb2tlbk1hbmFnZXIoKSAgICAgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5NYW5hZ2VyKTsgXzsgfQogICAgbW9kaWZpZXIgb25seUNyb3dkc2FsZU1hbmFnZXIoKSB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcm93ZHNhbGVNYW5hZ2VyKTsgXzsgfQogICAgbW9kaWZpZXIgb25seUluU3RhdGUoU3RhdGUgc3RhdGUpeyByZXF1aXJlKHN0YXRlID09IGN1cnJlbnRTdGF0ZSk7IF87IH0KCiAgICAvLy8gRXZlbnRzOgogICAgZXZlbnQgTG9nQnVybihhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgTG9nU3RhdGVTd2l0Y2goU3RhdGUgbmV3U3RhdGUpOwoKICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCgogICAgLy8vIEZ1bmN0aW9uczoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yCiAgICAvLy8gQHBhcmFtIF90b2tlbk1hbmFnZXIgVG9rZW4gbWFuYWdlciBhZGRyZXNzLgogICAgZnVuY3Rpb24gUHJlc2FsZVRva2VuKGFkZHJlc3MgX3Rva2VuTWFuYWdlciwgYWRkcmVzcyBfZXNjcm93KSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3Rva2VuTWFuYWdlciAhPSAwKTsKICAgICAgICByZXF1aXJlKF9lc2Nyb3cgIT0gMCk7CgogICAgICAgIHRva2VuTWFuYWdlciA9IF90b2tlbk1hbmFnZXI7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfYnV5ZXIpIHB1YmxpYyBwYXlhYmxlIG9ubHlJblN0YXRlKFN0YXRlLlJ1bm5pbmcpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSAhPSAwKTsKICAgICAgICB1aW50IG5ld1Rva2VucyA9IG1zZy52YWx1ZSAqIFBSSUNFOwoKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5ICsgbmV3VG9rZW5zIDw9IFRPS0VOX1NVUFBMWV9MSU1JVCk7CgogICAgICAgIGJhbGFuY2VbX2J1eWVyXSArPSBuZXdUb2tlbnM7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gbmV3VG9rZW5zOwogICAgICAgIAogICAgICAgIGlmKCFvd25lckFwcGVuZGVkW19idXllcl0pIHsKICAgICAgICAgICAgb3duZXJBcHBlbmRlZFtfYnV5ZXJdID0gdHJ1ZTsKICAgICAgICAgICAgb3duZXJzLnB1c2goX2J1eWVyKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX2J1eWVyLCBuZXdUb2tlbnMpOwoKICAgICAgICBpZih0aGlzLmJhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgIHJlcXVpcmUoZXNjcm93LnNlbmQodGhpcy5iYWxhbmNlKSk7CiAgICAgICAgfQoKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICBmdW5jdGlvbiBidXJuVG9rZW5zKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgb25seUNyb3dkc2FsZU1hbmFnZXIgb25seUluU3RhdGUoU3RhdGUuTWlncmF0aW5nKSB7CiAgICAgICAgdWludCB0b2tlbnMgPSBiYWxhbmNlW19vd25lcl07CiAgICAgICAgcmVxdWlyZSh0b2tlbnMgIT0gMCk7CgogICAgICAgIGJhbGFuY2VbX293bmVyXSA9IDA7CiAgICAgICAgdG90YWxTdXBwbHkgLT0gdG9rZW5zOwoKICAgICAgICBMb2dCdXJuKF9vd25lciwgdG9rZW5zKTsKCiAgICAgICAgLy8gQXV0b21hdGljYWxseSBzd2l0Y2ggcGhhc2Ugd2hlbiBtaWdyYXRpb24gaXMgZG9uZS4KICAgICAgICBpZih0b3RhbFN1cHBseSA9PSAwKSB7CiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLk1pZ3JhdGVkOwogICAgICAgICAgICBMb2dTdGF0ZVN3aXRjaChTdGF0ZS5NaWdyYXRlZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UHJlc2FsZVN0YXRlKFN0YXRlIF9uZXh0U3RhdGUpIHB1YmxpYyBvbmx5VG9rZW5NYW5hZ2VyIHsKICAgICAgICAvLyBJbml0IC0+IFJ1bm5pbmcKICAgICAgICAvLyBSdW5uaW5nIC0+IFBhdXNlZAogICAgICAgIC8vIFJ1bm5pbmcgLT4gTWlncmF0aW5nCiAgICAgICAgLy8gUGF1c2VkIC0+IFJ1bm5pbmcKICAgICAgICAvLyBQYXVzZWQgLT4gTWlncmF0aW5nCiAgICAgICAgLy8gTWlncmF0aW5nIC0+IE1pZ3JhdGVkCiAgICAgICAgYm9vbCBjYW5Td2l0Y2hTdGF0ZQogICAgICAgID0gIChjdXJyZW50U3RhdGUgPT0gU3RhdGUuSW5pdCAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlJ1bm5pbmcpCiAgICAgICAgfHwgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5SdW5uaW5nICYmIF9uZXh0U3RhdGUgPT0gU3RhdGUuUGF1c2VkKQogICAgICAgIC8vIHN3aXRjaCB0byBtaWdyYXRpb24gcGhhc2Ugb25seSBpZiBjcm93ZHNhbGUgbWFuYWdlciBpcyBzZXQKICAgICAgICB8fCAoKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5SdW5uaW5nIHx8IGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5QYXVzZWQpCiAgICAgICAgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcKICAgICAgICAmJiBjcm93ZHNhbGVNYW5hZ2VyICE9IDB4MCkKICAgICAgICB8fCAoY3VycmVudFN0YXRlID09IFN0YXRlLlBhdXNlZCAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlJ1bm5pbmcpCiAgICAgICAgLy8gc3dpdGNoIHRvIG1pZ3JhdGVkIG9ubHkgaWYgZXZlcnl0aW5nIGlzIG1pZ3JhdGVkCiAgICAgICAgfHwgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRlZAogICAgICAgICYmIHRvdGFsU3VwcGx5ID09IDApOwoKICAgICAgICByZXF1aXJlKGNhblN3aXRjaFN0YXRlKTsKCiAgICAgICAgY3VycmVudFN0YXRlID0gX25leHRTdGF0ZTsKICAgICAgICBMb2dTdGF0ZVN3aXRjaChfbmV4dFN0YXRlKTsKICAgIH0KCiAgICAvLy8gU2V0dGVycy9nZXR0ZXJzCiAgICBmdW5jdGlvbiBzZXRUb2tlbk1hbmFnZXIoYWRkcmVzcyBfbWdyKSBwdWJsaWMgb25seVRva2VuTWFuYWdlciB7CiAgICAgICAgdG9rZW5NYW5hZ2VyID0gX21ncjsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVNYW5hZ2VyKGFkZHJlc3MgX21ncikgcHVibGljIG9ubHlUb2tlbk1hbmFnZXIgewogICAgICAgIC8vIFlvdSBjYW4ndCBjaGFuZ2UgY3Jvd2RzYWxlIGNvbnRyYWN0IHdoZW4gbWlncmF0aW9uIGlzIGluIHByb2dyZXNzLgogICAgICAgIHJlcXVpcmUoY3VycmVudFN0YXRlICE9IFN0YXRlLk1pZ3JhdGluZyk7CiAgICAgICAgY3Jvd2RzYWxlTWFuYWdlciA9IF9tZ3I7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9rZW5NYW5hZ2VyKCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHRva2VuTWFuYWdlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDcm93ZHNhbGVNYW5hZ2VyKCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGNyb3dkc2FsZU1hbmFnZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkgY29uc3RhbnQgcmV0dXJucyhTdGF0ZSkgewogICAgICAgIHJldHVybiBjdXJyZW50U3RhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJpY2UoKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gUFJJQ0U7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE93bmVyKHVpbnQgaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MsIHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gKG93bmVyc1tpbmRleF0sIGJhbGFuY2Vbb3duZXJzW2luZGV4XV0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE93bmVyQ291bnQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG93bmVycy5sZW5ndGg7CiAgICB9CiAgICAKCiAgICAvLyBEZWZhdWx0IGZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
