Class {
	#name : #SRT1bf10adfbd3b86161bcf66e90c2ad1be820522fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1bf10adfbd3b86161bcf66e90c2ad1be820522fc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBpbXBsZW1lbnQgc2FmZW1hdGggYXMgYSBsaWJyYXJ5CmxpYnJhcnkgU2FmZU1hdGggewoKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgcmVxdWlyZShhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gVXNlZCBmb3IgZnVuY3Rpb24gaW52b2tlIHJlc3RyaWN0aW9uCmNvbnRyYWN0IEFkbWluaXN0cmF0aW9uIHsKCiAgICBhZGRyZXNzICAgICBwdWJsaWMgb3duZXI7IC8vIHRlbXBvcmFyeSBhZGRyZXNzCiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIG1vZGVyYXRvcnM7CgogICAgZXZlbnQgQWRkTW9kKGFkZHJlc3MgaW5kZXhlZCBfaW52b2tlciwgYWRkcmVzcyBpbmRleGVkIF9uZXdNb2QsIGJvb2wgaW5kZXhlZCBfbW9kQWRkZWQpOwogICAgZXZlbnQgUmVtb3ZlTW9kKGFkZHJlc3MgaW5kZXhlZCBfaW52b2tlciwgYWRkcmVzcyBpbmRleGVkIF9yZW1vdmVNb2QsIGJvb2wgaW5kZXhlZCBfbW9kUmVtb3ZlZCk7CgogICAgZnVuY3Rpb24gQWRtaW5pc3RyYXRpb24oKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBZG1pbigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbW9kZXJhdG9yc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87IC8vIGZ1bmN0aW9uIGNvZGUgaW5zZXJ0ZWQgaGVyZQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gYWRkTW9kZXJhdG9yKGFkZHJlc3MgX25ld01vZCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgYWRkZWQpIHsKICAgICAgICByZXF1aXJlKF9uZXdNb2QgIT0gYWRkcmVzcygweDApKTsKICAgICAgICBtb2RlcmF0b3JzW19uZXdNb2RdID0gdHJ1ZTsKICAgICAgICBBZGRNb2QobXNnLnNlbmRlciwgX25ld01vZCwgdHJ1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZU1vZGVyYXRvcihhZGRyZXNzIF9yZW1vdmVNb2QpIG9ubHlPd25lciByZXR1cm5zIChib29sIHJlbW92ZWQpIHsKICAgICAgICByZXF1aXJlKF9yZW1vdmVNb2QgIT0gYWRkcmVzcygweDApKTsKICAgICAgICBtb2RlcmF0b3JzW19yZW1vdmVNb2RdID0gZmFsc2U7CiAgICAgICAgUmVtb3ZlTW9kKG1zZy5zZW5kZXIsIF9yZW1vdmVNb2QsIHRydWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKfQoKY29udHJhY3QgVG9rZW5EcmFmdCBpcyBBZG1pbmlzdHJhdGlvbiB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzOwogICAgc3RyaW5nICBwdWJsaWMgc3ltYm9sOwogICAgc3RyaW5nICBwdWJsaWMgbmFtZTsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWQ7CiAgICAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfc2VuZGVyLCBhZGRyZXNzIGluZGV4ZWQgX3JlY2lwaWVudCwgdWludDI1NiBpbmRleGVkIF9hbW91bnQpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IGluZGV4ZWQgX2FsbG93YW5jZSk7CiAgICBldmVudCBCdXJuVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfYnVybmVyLCB1aW50MjU2IGluZGV4ZWQgX2Ftb3VudEJ1cm5lZCwgYm9vbCBpbmRleGVkIF9idXJuZWQpOwoKICAgIGZ1bmN0aW9uIFRva2VuRHJhZnQoKSB7CiAgICAgICAgLy8gNTAwIG1pbGxpb24gaW4gd2VpCiAgICAgICAgdG90YWxTdXBwbHkgPSA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgZGVjaW1hbHMgPSAxODsKICAgICAgICBuYW1lID0gIlRva2VuRHJhZnQiOwogICAgICAgIHN5bWJvbCA9ICJGQU4iOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIHRva2VuQnVybih1aW50MjU2IF9hbW91bnRCdXJuKQogICAgICAgIG9ubHlBZG1pbgogICAgICAgIHJldHVybnMgKGJvb2wgYnVybmVkKQogICAgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudEJ1cm4gPiAwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF9hbW91bnRCdXJuKTsKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5LnN1YihfYW1vdW50QnVybikgPj0gMCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudEJ1cm4pOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF9hbW91bnRCdXJuKTsKICAgICAgICBCdXJuVG9rZW5zKG1zZy5zZW5kZXIsIF9hbW91bnRCdXJuLCB0cnVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCAwLCBfYW1vdW50QnVybik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJDaGVjayhhZGRyZXNzIF9zZW5kZXIsIGFkZHJlc3MgX3JlY2lwaWVudCwgdWludDI1NiBfYW1vdW50KQogICAgICAgIHByaXZhdGUKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wgdmFsaWQpCiAgICB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgcmVxdWlyZShfcmVjaXBpZW50ICE9IGFkZHJlc3MoMHgwKSk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfc2VuZGVyXSA+PSBfYW1vdW50KTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19zZW5kZXJdLnN1YihfYW1vdW50KSA+PSAwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19yZWNpcGllbnRdLmFkZChfYW1vdW50KSA+IGJhbGFuY2VzW19yZWNpcGllbnRdKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF9yZWNpcGllbnQsIHVpbnQyNTYgX2Ftb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHRyYW5zZmVycmVkKQogICAgewogICAgICAgIHJlcXVpcmUodHJhbnNmZXJDaGVjayhtc2cuc2VuZGVyLCBfcmVjaXBpZW50LCBfYW1vdW50KSk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3JlY2lwaWVudF0gPSBiYWxhbmNlc1tfcmVjaXBpZW50XS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3JlY2lwaWVudCwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9yZWNpcGllbnQsIHVpbnQyNTYgX2Ftb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHRyYW5zZmVycmVkRnJvbSkKICAgIHsKICAgICAgICByZXF1aXJlKGFsbG93ZWRbX293bmVyXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50KTsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyQ2hlY2soX293bmVyLCBfcmVjaXBpZW50LCBfYW1vdW50KSk7CiAgICAgICAgcmVxdWlyZShhbGxvd2VkW19vd25lcl1bbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpID49IDApOwogICAgICAgIGFsbG93ZWRbX293bmVyXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX293bmVyXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX293bmVyXSA9IGJhbGFuY2VzW19vd25lcl0uc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW19yZWNpcGllbnRdID0gYmFsYW5jZXNbX3JlY2lwaWVudF0uYWRkKF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKF9vd25lciwgX3JlY2lwaWVudCwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbGxvd2FuY2UpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBhcHByb3ZlZCkKICAgIHsKICAgICAgICByZXF1aXJlKF9hbGxvd2FuY2UgPiAwKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbGxvd2FuY2U7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbGxvd2FuY2UpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vR0VUVEVSUy8vCgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX3Rva2VuSG9sZGVyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX3Rva2VuSG9sZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2IF9hbGxvd2FuY2UpCiAgICB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NiBfdG90YWxTdXBwbHkpCiAgICB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogICAgfQp9'.
	

]
