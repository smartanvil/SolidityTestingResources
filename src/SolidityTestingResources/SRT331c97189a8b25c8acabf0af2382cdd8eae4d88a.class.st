Class {
	#name : #SRT331c97189a8b25c8acabf0af2382cdd8eae4d88a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT331c97189a8b25c8acabf0af2382cdd8eae4d88a >> base64 [
	^ ''.
	

]
