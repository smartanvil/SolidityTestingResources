Class {
	#name : #SRTe746f3be8c69b05e3ca38760f1eb8c55d24da2c9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe746f3be8c69b05e3ca38760f1eb8c55d24da2c9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBUb2tlblJlY2lwaWVudCB7CiAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljOyAKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgRXh0cmFIb2xkZXJDb250cmFjdCBpcyBUb2tlblJlY2lwaWVudCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogIC8vLyBAbm90aWNlIE1hcCBvZiByZWNpcGllbnRzIHBhcnRzIG9mIHRvdGFsIHJlY2VpdmVkIHRva2VucwogIC8vLyBAZGV2IFNob3VsZCBiZSBpbiByYW5nZSBvZiAxIHRvIDEwMDAwICgxIGlzIDAuMDElIGFuZCAxMDAwMCBpcyAxMDAlKQogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgc2hhcmVzOwoKICAvLy8gQG5vdGljZSBNYXAgb2YgdG90YWwgdmFsdWVzIGF0IG1vbWVudCBvZiBsYXRlc3Qgd2l0aGRyYXdhbCBwZXIgZWFjaCByZWNpcGllbnQKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRvdGFsQXRXaXRoZHJhd2FsOwoKICAvLy8gQG5vdGljZSBBZGRyZXNzIG9mIHRoZSBhZmZpbGF0ZWQgdG9rZW4KICAvLy8gQGRldiBTaG91bGQgYmUgZGVmaW5lZCBhdCBjb25zdHJ1Y3Rpb24gYW5kIG5vIHdheSB0byBjaGFuZ2UgaW4gZnV0dXJlCiAgYWRkcmVzcyBwdWJsaWMgaG9sZGluZ1Rva2VuOwoKICAvLy8gQG5vdGljZSBUb3RhbCBhbW91bnQgb2YgcmVjZWl2ZWQgdG9rZW4gb24gc21hcnQtY29udHJhY3QKICB1aW50IHB1YmxpYyB0b3RhbFJlY2VpdmVkOwoKICAvLy8gQG5vdGljZSBDb25zdHJ1Y3Rpb24gbWV0aG9kIG9mIEV4dHJhIEhvbGRpbmcgY29udHJhY3QKICAvLy8gQGRldiBBcnJheXMgb2YgcmVjaXBpZW50cyBhbmQgdGhlaXIgc2hhcmUgcGFydHMgc2hvdWxkIGJlIGVxdWFsIGFuZCBub3QgZW1wdHkKICAvLy8gQGRldiBTdW0gb2YgYWxsIHNoYXJlcyBzaG91bGQgYmUgZXhhY3QgZXF1YWwgdG8gMTAwMDAKICAvLy8gQHBhcmFtIF9ob2xkaW5nVG9rZW4gaXMgYWRkcmVzcyBvZiBhZmZpbGF0ZWQgY29udHJhY3QKICAvLy8gQHBhcmFtIF9yZWNpcGllbnRzIGlzIGFycmF5IG9mIHJlY2lwaWVudHMKICAvLy8gQHBhcmFtIF9wYXJ0aW9ucyBpcyBhcnJheSBvZiByZWNpcGllbnRzIHNoYXJlcwogIGZ1bmN0aW9uIEV4dHJhSG9sZGVyQ29udHJhY3QoCiAgICBhZGRyZXNzIF9ob2xkaW5nVG9rZW4sCiAgICBhZGRyZXNzW10gX3JlY2lwaWVudHMsCiAgICB1aW50W10gX3BhcnRpb25zKQogIHB1YmxpYwogIHsKICAgIHJlcXVpcmUoX2hvbGRpbmdUb2tlbiAhPSBhZGRyZXNzKDB4MCkpOwogICAgcmVxdWlyZShfcmVjaXBpZW50cy5sZW5ndGggPiAwKTsKICAgIHJlcXVpcmUoX3JlY2lwaWVudHMubGVuZ3RoID09IF9wYXJ0aW9ucy5sZW5ndGgpOwoKICAgIHVpbnQgZW5zdXJlRnVsbGZpZWxkOwoKICAgIGZvcih1aW50IGluZGV4ID0gMDsgaW5kZXggPCBfcmVjaXBpZW50cy5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgLy8gb3ZlcmZsb3cgY2hlY2sgaXNuJ3QgcmVxdWlyZWQuLiBJIHN1cHBvc2UgOkQKICAgICAgZW5zdXJlRnVsbGZpZWxkID0gZW5zdXJlRnVsbGZpZWxkICsgX3BhcnRpb25zW2luZGV4XTsKICAgICAgcmVxdWlyZShfcGFydGlvbnNbaW5kZXhdID4gMCk7CiAgICAgIHJlcXVpcmUoX3JlY2lwaWVudHNbaW5kZXhdICE9IGFkZHJlc3MoMHgwKSk7CgogICAgICBzaGFyZXNbX3JlY2lwaWVudHNbaW5kZXhdXSA9IF9wYXJ0aW9uc1tpbmRleF07CiAgICB9CgogICAgaG9sZGluZ1Rva2VuID0gX2hvbGRpbmdUb2tlbjsKCiAgICAvLyBSZXF1aXJlIHRvIHNldHVwIGV4YWN0IDEwMCUgc3VtIG9mIHBhcnRpb25zCiAgICByZXF1aXJlKGVuc3VyZUZ1bGxmaWVsZCA9PSAxMDAwMCk7CiAgfQoKICAvLy8gQG5vdGljZSBNZXRob2Qgd2hhdCBzaG91bGQgYmUgY2FsbGVkIHdpdGggZXh0ZXJuYWwgY29udHJhY3QgdG8gcmVjZWl2ZSB0b2tlbnMKICAvLy8gQGRldiBXaWxsIGJlIGNhbGwgYXV0b21hdGljbHkgd2l0aCBhIGN1c3RvbWl6ZWQgdHJhbnNmZXIgbWV0aG9kIG9mIERlZmF1bHRUb2tlbiAoYmFzZWQgb24gRGVmYXVsdFRva2VuLnNvbCkKICAvLy8gQHBhcmFtIF9mcm9tIGlzIGFkZHJlc3Mgb2YgdG9rZW4gc2VuZGVyCiAgLy8vIEBwYXJhbSBfdmFsdWUgaXMgdG90YWwgYW1vdW50IG9mIHNlbmRpbmcgdG9rZW5zCiAgLy8vIEBwYXJhbSBfdG9rZW4gaXMgYWRkcmVzcyBvZiBzZW5kaW5nIHRva2VuCiAgLy8vIEBwYXJhbSBfZXh0cmFEYXRhIC4uLgogIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbCgKICAgIGFkZHJlc3MgX2Zyb20sIAogICAgdWludDI1NiBfdmFsdWUsCiAgICBhZGRyZXNzIF90b2tlbiwKICAgIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYwogIHsKICAgIF9leHRyYURhdGE7CiAgICByZXF1aXJlKF90b2tlbiA9PSBob2xkaW5nVG9rZW4pOwoKICAgIC8vIFRha2UgdG9rZW5zIG9mIGZhaWwgd2l0aCBleGNlcHRpb24KICAgIEVSQzIwKGhvbGRpbmdUb2tlbikudHJhbnNmZXJGcm9tKF9mcm9tLCBhZGRyZXNzKHRoaXMpLCBfdmFsdWUpOwogICAgdG90YWxSZWNlaXZlZCA9IHRvdGFsUmVjZWl2ZWQuYWRkKF92YWx1ZSk7CiAgfQoKICAvLy8gQG5vdGljZSBNZXRob2QgdG8gd2l0aGRyYXcgc2hhcmVkIHBhcnQgb2YgcmVjZWl2ZWQgdG9rZW5zIGZvciBwcm92aWRlbiBhZGRyZXNzCiAgLy8vIEBkZXYgQW55IGFkZHJlc3MgY291bGQgZmlyZSBtZXRob2QsIGJ1dCBvbmx5IGZvciBrbm93biByZWNpcGllbnQKICAvLy8gQHBhcmFtIF9yZWNpcGllbnQgYWRkcmVzcyBvZiByZWNpcGllbnQgd2hvIHNob3VsZCByZWNlaXZlIHdpdGhkcmF3ZWQgdG9rZW5zCiAgZnVuY3Rpb24gd2l0aGRyYXcoCiAgICBhZGRyZXNzIF9yZWNpcGllbnQpCiAgcHVibGljIHJldHVybnMgKGJvb2wpIAogIHsKICAgIHJlcXVpcmUoc2hhcmVzW19yZWNpcGllbnRdID4gMCk7CiAgICByZXF1aXJlKHRvdGFsQXRXaXRoZHJhd2FsW19yZWNpcGllbnRdIDwgdG90YWxSZWNlaXZlZCk7CgogICAgdWludCBsZWZ0ID0gdG90YWxSZWNlaXZlZC5zdWIodG90YWxBdFdpdGhkcmF3YWxbX3JlY2lwaWVudF0pOwogICAgdWludCBzaGFyZSA9IGxlZnQubXVsKHNoYXJlc1tfcmVjaXBpZW50XSkuZGl2KDEwMDAwKTsKICAgIHRvdGFsQXRXaXRoZHJhd2FsW19yZWNpcGllbnRdID0gdG90YWxSZWNlaXZlZDsKICAgIEVSQzIwKGhvbGRpbmdUb2tlbikudHJhbnNmZXIoX3JlY2lwaWVudCwgc2hhcmUpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9Cgpjb250cmFjdCBBbHRFeHRyYUhvbGRlckNvbnRyYWN0IGlzIEV4dHJhSG9sZGVyQ29udHJhY3QgewogIGFkZHJlc3NbXSBwcml2YXRlIGFsdFJlY2lwaWVudHMgPSBbCiAgICAvLyBUcmFuc2ZlciB0d28gcGVyY2VudCBvZiBhbGwgQUxUIHRva2VucyB0byBib3VudHkgcHJvZ3JhbSBwYXJ0aWNpcGFudHMgb24gdGhlIGRheSBvZiB0b2tlbnMgaXNzdWUuCiAgICAvLyBGaW5hbCBkaXN0cmlidXRpb24gd2lsbCBiZSBkb25lIGJ5IG91ciBwYXJ0bmVyIEJvdW50eWhpdmUuaW8gd2hvIHdpbGwgdHJhbnNmZXIgY29pbnMgZnJvbQogICAgLy8gdGhlIHByb3ZpZGVkIHdhbGxldCB0byBhbGwgYm91bnR5IGh1bnRlcnMgY29tbXVuaXR5LgogICAgYWRkcmVzcygweGQyNTFENzUwNjREYWNCQzVGY0NGY2E5MUNiNDcyMUIxNjNhMTU5ZmMpLAogICAgLy8gVHJhbnNmZXIgdGhpcnR5IGVpZ2h0IHBlcmNlbnQgb2YgYWxsIEFMVCB0b2tlbnMgZm9yIGZ1dHVyZSBOZXR3b3JrIEdyb3d0aCBhbmQgVGVhbSBhbmQgQWR2aXNvcnMgcmVtdW5lcmF0aW9ucy4KICAgIGFkZHJlc3MoMHhBZDA4OWIzNzY3Y2Y1OGM3NjQ3RGIyRThkOUMwNDk1ODNiRUEwNDVBKQogIF07CiAgdWludFtdIHByaXZhdGUgYWx0UGFydGlvbnMgPSBbCiAgICA1MDAsCiAgICA5NTAwCiAgXTsKCiAgZnVuY3Rpb24gQWx0RXh0cmFIb2xkZXJDb250cmFjdChhZGRyZXNzIF9ob2xkaW5nVG9rZW4pCiAgICBFeHRyYUhvbGRlckNvbnRyYWN0KF9ob2xkaW5nVG9rZW4sIGFsdFJlY2lwaWVudHMsIGFsdFBhcnRpb25zKQogICAgcHVibGljCiAge30KfQ=='.
	

]
