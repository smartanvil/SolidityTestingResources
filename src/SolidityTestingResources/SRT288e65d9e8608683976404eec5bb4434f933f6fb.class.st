Class {
	#name : #SRT288e65d9e8608683976404eec5bb4434f933f6fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT288e65d9e8608683976404eec5bb4434f933f6fb >> base64 [
	^ ''.
	

]
