Class {
	#name : #SRTbf64a825e602a4f1c31480a470e99e1d896c88a7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf64a825e602a4f1c31480a470e99e1d896c88a7 >> base64 [
	^ ''.
	

]
