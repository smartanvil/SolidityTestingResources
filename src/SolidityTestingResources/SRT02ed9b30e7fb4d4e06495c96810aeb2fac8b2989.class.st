Class {
	#name : #SRT02ed9b30e7fb4d4e06495c96810aeb2fac8b2989,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02ed9b30e7fb4d4e06495c96810aeb2fac8b2989 >> base64 [
	^ ''.
	

]
