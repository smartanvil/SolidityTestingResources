Class {
	#name : #SRT0edde4b6f91dbd2efd075ace85ec2e52d0696d44,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0edde4b6f91dbd2efd075ace85ec2e52d0696d44 >> base64 [
	^ ''.
	

]
