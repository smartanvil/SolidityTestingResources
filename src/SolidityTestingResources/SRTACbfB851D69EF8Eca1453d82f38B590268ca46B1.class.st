Class {
	#name : #SRTACbfB851D69EF8Eca1453d82f38B590268ca46B1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTACbfB851D69EF8Eca1453d82f38B590268ca46B1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCB0b2tlbiB7IGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBwdWJsaWMgOwogICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludCBtaW50ZWRBbW91bnQpIHB1YmxpYyA7CiAgICAgICAgICAgICAgICB9Cgpjb250cmFjdCBDcm93ZFNhbGUgewogICAgZW51bSBTdGF0ZSB7CiAgICAgICAgRnVuZHJhaXNpbmcsCiAgICAgICAgRmFpbGVkLAogICAgICAgIFN1Y2Nlc3NmdWwsCiAgICAgICAgQ2xvc2VkCiAgICB9CiAgICBTdGF0ZSBwdWJsaWMgc3RhdGUgPSBTdGF0ZS5GdW5kcmFpc2luZzsKCiAgICBzdHJ1Y3QgQ29udHJpYnV0aW9uIHsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICBhZGRyZXNzIGNvbnRyaWJ1dG9yOwogICAgfQogICAgQ29udHJpYnV0aW9uW10gY29udHJpYnV0aW9uczsKCiAgICAKICAgIAogICAgdWludCBwdWJsaWMgdG90YWxSYWlzZWQ7CiAgICB1aW50IHB1YmxpYyBjdXJyZW50QmFsYW5jZTsKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lOwogICAgdWludCBwdWJsaWMgY29tcGxldGVkQXQ7CiAgICB1aW50IHB1YmxpYyBwcmljZUluV2VpOwogICAgdWludCBwdWJsaWMgZnVuZGluZ01pbmltdW1UYXJnZXRJbldlaTsgCiAgICB1aW50IHB1YmxpYyBmdW5kaW5nTWF4aW11bVRhcmdldEluV2VpOyAKICAgIHRva2VuIHB1YmxpYyB0b2tlblJld2FyZDsKICAgIGFkZHJlc3MgcHVibGljIGNyZWF0b3I7CiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsgCiAgICBzdHJpbmcgY2FtcGFpZ25Vcmw7CiAgICBieXRlIGNvbnN0YW50IHZlcnNpb24gPSAiMSI7CgogICAgCiAgICBldmVudCBMb2dGdW5kaW5nUmVjZWl2ZWQoYWRkcmVzcyBhZGRyLCB1aW50IGFtb3VudCwgdWludCBjdXJyZW50VG90YWwpOwogICAgZXZlbnQgTG9nV2lubmVyUGFpZChhZGRyZXNzIHdpbm5lckFkZHJlc3MpOwogICAgZXZlbnQgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodWludCB0b3RhbFJhaXNlZCk7CiAgICBldmVudCBMb2dGdW5kZXJJbml0aWFsaXplZCgKICAgICAgICBhZGRyZXNzIGNyZWF0b3IsCiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeSwKICAgICAgICBzdHJpbmcgdXJsLAogICAgICAgIHVpbnQgX2Z1bmRpbmdNYXhpbXVtVGFyZ2V0SW5FdGhlciwgCiAgICAgICAgdWludDI1NiBkZWFkbGluZSk7CgoKICAgIG1vZGlmaWVyIGluU3RhdGUoU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBfc3RhdGUpIDsKICAgICAgICBfOwogICAgfQoKICAgICBtb2RpZmllciBpc01pbmltdW0oKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiBwcmljZUluV2VpKSA7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpbk11bHRpcGxlT2ZQcmljZSgpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSVwcmljZUluV2VpID09IDApIDsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzQ3JlYXRvcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgOwogICAgICAgIF87CiAgICB9CgogICAgCiAgICBtb2RpZmllciBhdEVuZE9mTGlmZWN5Y2xlKCkgewogICAgICAgIGlmKCEoKHN0YXRlID09IFN0YXRlLkZhaWxlZCB8fCBzdGF0ZSA9PSBTdGF0ZS5TdWNjZXNzZnVsKSAmJiBjb21wbGV0ZWRBdCArIDEgaG91cnMgPCBub3cpKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIAogICAgZnVuY3Rpb24gQ3Jvd2RTYWxlKAogICAgICAgIHVpbnQgX3RpbWVJbk1pbnV0ZXNGb3JGdW5kcmFpc2luZywKICAgICAgICBzdHJpbmcgX2NhbXBhaWduVXJsLAogICAgICAgIGFkZHJlc3MgX2lmU3VjY2Vzc2Z1bFNlbmRUbywKICAgICAgICB1aW50IF9mdW5kaW5nTWluaW11bVRhcmdldEluRXRoZXIsCiAgICAgICAgdWludCBfZnVuZGluZ01heGltdW1UYXJnZXRJbkV0aGVyLAogICAgICAgIHRva2VuIF9hZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCwKICAgICAgICB1aW50IF9ldGhlckNvc3RPZkVhY2hUb2tlbikgcHVibGljCiAgICB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBfaWZTdWNjZXNzZnVsU2VuZFRvOwogICAgICAgIGNhbXBhaWduVXJsID0gX2NhbXBhaWduVXJsOwogICAgICAgIGZ1bmRpbmdNaW5pbXVtVGFyZ2V0SW5XZWkgPSBfZnVuZGluZ01pbmltdW1UYXJnZXRJbkV0aGVyICogMSBldGhlcjsgCiAgICAgICAgZnVuZGluZ01heGltdW1UYXJnZXRJbldlaSA9IF9mdW5kaW5nTWF4aW11bVRhcmdldEluRXRoZXIgKiAxIGV0aGVyOyAKICAgICAgICBkZWFkbGluZSA9IG5vdyArIChfdGltZUluTWludXRlc0ZvckZ1bmRyYWlzaW5nICogMSBtaW51dGVzKTsKICAgICAgICBjdXJyZW50QmFsYW5jZSA9IDA7CiAgICAgICAgdG9rZW5SZXdhcmQgPSB0b2tlbihfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQpOwogICAgICAgIHByaWNlSW5XZWkgPSBfZXRoZXJDb3N0T2ZFYWNoVG9rZW4gKiAxIGV0aGVyOwogICAgICAgIExvZ0Z1bmRlckluaXRpYWxpemVkKAogICAgICAgICAgICBjcmVhdG9yLAogICAgICAgICAgICBiZW5lZmljaWFyeSwKICAgICAgICAgICAgY2FtcGFpZ25VcmwsCiAgICAgICAgICAgIGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWksCiAgICAgICAgICAgIGRlYWRsaW5lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb250cmlidXRlKCkKICAgIHB1YmxpYwogICAgaW5TdGF0ZShTdGF0ZS5GdW5kcmFpc2luZykgaXNNaW5pbXVtKCkgaW5NdWx0aXBsZU9mUHJpY2UoKSBwYXlhYmxlIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBhbW91bnRJbldlaSA9IG1zZy52YWx1ZTsKCiAgICAgICAgCiAgICAgICAgY29udHJpYnV0aW9ucy5wdXNoKAogICAgICAgICAgICBDb250cmlidXRpb24oewogICAgICAgICAgICAgICAgYW1vdW50OiBtc2cudmFsdWUsCiAgICAgICAgICAgICAgICBjb250cmlidXRvcjogbXNnLnNlbmRlcgogICAgICAgICAgICAgICAgfSkgCiAgICAgICAgICAgICk7CgogICAgICAgIHRvdGFsUmFpc2VkICs9IG1zZy52YWx1ZTsKICAgICAgICBjdXJyZW50QmFsYW5jZSA9IHRvdGFsUmFpc2VkOwoKCiAgICAgICAgaWYoZnVuZGluZ01heGltdW1UYXJnZXRJbldlaSAhPSAwKXsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudEluV2VpIC8gcHJpY2VJbldlaSk7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHRva2VuUmV3YXJkLm1pbnRUb2tlbihtc2cuc2VuZGVyLCBhbW91bnRJbldlaSAvIHByaWNlSW5XZWkpOwogICAgICAgIH0KCiAgICAgICAgTG9nRnVuZGluZ1JlY2VpdmVkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgdG90YWxSYWlzZWQpOwoKICAgICAgICAKCiAgICAgICAgY2hlY2tJZkZ1bmRpbmdDb21wbGV0ZU9yRXhwaXJlZCgpOwogICAgICAgIHJldHVybiBjb250cmlidXRpb25zLmxlbmd0aCAtIDE7IAogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrSWZGdW5kaW5nQ29tcGxldGVPckV4cGlyZWQoKSBwdWJsaWMgewogICAgICAgIAogICAgICAgCiAgICAgICAgaWYgKGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWkgIT0gMCAmJiB0b3RhbFJhaXNlZCA+IGZ1bmRpbmdNYXhpbXVtVGFyZ2V0SW5XZWkpIHsKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TdWNjZXNzZnVsOwogICAgICAgICAgICBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh0b3RhbFJhaXNlZCk7CiAgICAgICAgICAgIHBheU91dCgpOwogICAgICAgICAgICBjb21wbGV0ZWRBdCA9IG5vdzsKICAgICAgICAgICAgCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vdyA+IGRlYWRsaW5lICkgIHsKICAgICAgICAgICAgICAgIGlmKHRvdGFsUmFpc2VkID49IGZ1bmRpbmdNaW5pbXVtVGFyZ2V0SW5XZWkpewogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuU3VjY2Vzc2Z1bDsKICAgICAgICAgICAgICAgICAgICBMb2dGdW5kaW5nU3VjY2Vzc2Z1bCh0b3RhbFJhaXNlZCk7CiAgICAgICAgICAgICAgICAgICAgcGF5T3V0KCk7ICAKICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRBdCA9IG5vdzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5GYWlsZWQ7IAogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZEF0ID0gbm93OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IAogICAgICAgIAogICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXlPdXQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGluU3RhdGUoU3RhdGUuU3VjY2Vzc2Z1bCkKICAgICAgICB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZighYmVuZWZpY2lhcnkuc2VuZCh0aGlzLmJhbGFuY2UpKSB7CiAgICAgICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7CiAgICAgICAgICAgIGN1cnJlbnRCYWxhbmNlID0gMDsKICAgICAgICAgICAgTG9nV2lubmVyUGFpZChiZW5lZmljaWFyeSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKQogICAgICAgIHB1YmxpYwogICAgICAgIGluU3RhdGUoU3RhdGUuRmFpbGVkKSAKICAgICAgICByZXR1cm5zIChib29sKQogICAgICAgIHsKICAgICAgICAgICAgZm9yKHVpbnQgaT0wOyBpPD1jb250cmlidXRpb25zLmxlbmd0aDsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZihjb250cmlidXRpb25zW2ldLmNvbnRyaWJ1dG9yID09IG1zZy5zZW5kZXIpewogICAgICAgICAgICAgICAgICAgIHVpbnQgYW1vdW50VG9SZWZ1bmQgPSBjb250cmlidXRpb25zW2ldLmFtb3VudDsKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb25zW2ldLmFtb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgaWYoIWNvbnRyaWJ1dGlvbnNbaV0uY29udHJpYnV0b3Iuc2VuZChhbW91bnRUb1JlZnVuZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uc1tpXS5hbW91bnQgPSBhbW91bnRUb1JlZnVuZDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFJhaXNlZCAtPSBhbW91bnRUb1JlZnVuZDsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJhbGFuY2UgPSB0b3RhbFJhaXNlZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ29udHJhY3QoKQogICAgICAgIHB1YmxpYwogICAgICAgIGlzQ3JlYXRvcigpCiAgICAgICAgYXRFbmRPZkxpZmVjeWNsZSgpCiAgICAgICAgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3QobXNnLnNlbmRlcik7CiAgICAgICAgICAgIAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gKCkgcHVibGljIHsgcmV2ZXJ0KCk7IH0KfQ=='.
	

]
