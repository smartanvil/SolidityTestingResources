Class {
	#name : #SRT297ac8bc7540bc241f065fcc22c570b40170b573,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT297ac8bc7540bc241f065fcc22c570b40170b573 >> base64 [
	^ 'LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogVGhpcyBjb250cmFjdCBoYXMgYmVlbiBtZXJnZWQgd2l0aCBzb2xpZGlmeQogKiBodHRwczovL2dpdGh1Yi5jb20vdGllc25ldHdvcmsvc29saWRpZnkKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHByYWdtYSBzb2xpZGl0eSBeMC40LjE4OwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL21hdGgvU2FmZU1hdGguc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9tYXRoL1NhZmVNYXRoLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9vd25lcnNoaXAvT3duYWJsZS5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsgb3duZXIgPSBtc2cuc2VuZGVyOyB9CgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7IF87IH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL293bmVyc2hpcC9Pd25hYmxlLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9UcmFjZVRva2VuLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi90b2tlbi9NaW50YWJsZVRva2VuLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vU3RhbmRhcmRUb2tlbi5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL0Jhc2ljVG9rZW4uc29sIiA6IHN0YXJ0CiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9FUkMyMEJhc2ljLnNvbCIgOiBzdGFydAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vRVJDMjBCYXNpYy5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9CYXNpY1Rva2VuLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIGltcG9ydCAiLi9FUkMyMC5zb2wiIDogc3RhcnQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL0VSQzIwLnNvbCIgOiBlbmQKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgLy8gbWl0aWdhdGluZyB0aGUgcmFjZSBjb25kaXRpb24KICAgIGFzc2VydChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwIHx8IF92YWx1ZSA9PSAwKTsKICAgIAogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBpbXBvcnQgIi4vU3RhbmRhcmRUb2tlbi5zb2wiIDogZW5kCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCgoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL3Rva2VuL01pbnRhYmxlVG9rZW4uc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCmNvbnRyYWN0IFRyYWNlVG9rZW4gaXMgTWludGFibGVUb2tlbiB7CgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ1RyYWNlIFRva2VuJzsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gJ1RSQUNFJzsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJBbGxvd2VkID0gZmFsc2U7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBUcmFuc2ZlckFsbG93ZWQoYm9vbCB0cmFuc2ZlcklzQWxsb3dlZCk7CgogICAgbW9kaWZpZXIgY2FuVHJhbnNmZXIoKSB7CiAgICAgICAgcmVxdWlyZShtaW50aW5nRmluaXNoZWQgJiYgdHJhbnNmZXJBbGxvd2VkKTsKICAgICAgICBfOyAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgY2FuVHJhbnNmZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKGZyb20sIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgY2FuVHJhbnNmZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIodG8sIHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgY29udHJpYnV0b3IsIHVpbnQyNTYgYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci5taW50KGNvbnRyaWJ1dG9yLCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVuZE1pbnRpbmcoYm9vbCBfdHJhbnNmZXJBbGxvd2VkKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHRyYW5zZmVyQWxsb3dlZCA9IF90cmFuc2ZlckFsbG93ZWQ7CiAgICAgICAgVHJhbnNmZXJBbGxvd2VkKF90cmFuc2ZlckFsbG93ZWQpOwogICAgICAgIHJldHVybiBzdXBlci5maW5pc2hNaW50aW5nKCk7CiAgICB9Cn0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogaW1wb3J0ICIuL1RyYWNlVG9rZW4uc29sIiA6IGVuZAogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCmNvbnRyYWN0IFRyYWNlVG9rZW5TYWxlIGlzIE93bmFibGV7Cgl1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCgkvLyBQcmVzYWxlIHRva2VuCglUcmFjZVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gYW1vdW50IG9mIHRva2VucyBpbiBleGlzdGFuY2UgLSA1MDBtaWwgVFJBQ0UgPSA1ZTI2IFRyYWNrcwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFRPVEFMX05VTV9UT0tFTlMgPSA1ZTI2OyAvLyAxIFRSQUNFID0gMWUxOCBUcmFja3MsIGFsbCB1bml0cyBpbiBjb250cmFjdCBpbiBUcmFja3MKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbnNGb3JTYWxlID0gMjVlMjU7IC8vIDUwJSBvZiBhbGwgdG9rZW5zCgogIC8vIHRvdGFsRXRoZXJzIHJlY2VpdmVkCiAgdWludDI1NiBwdWJsaWMgdG90YWxFdGhlcnMgPSAwOwoKICAvLyBNaW5pbWFsIHBvc3NpYmxlIGNhcCBpbiBldGhlcnMKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBzb2Z0Q2FwID0gMzk4NC4wNjQgZXRoZXI7IAogIC8vIE1heGltdW0gcG9zc2libGUgY2FwIGluIGV0aGVycwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGhhcmRDYXAgPSAxNzkyOC4yODcgZXRoZXI7IAogIAogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHByZXNhbGVMaW1pdCA9IDc5NjguMTI3IGV0aGVyOyAKICBib29sIHB1YmxpYyBwcmVzYWxlTGltaXRSZWFjaGVkID0gZmFsc2U7CgogIC8vIE1pbmltdW0gYW5kIG1heGltdW0gaW52ZXN0bWVudHMgaW4gRXRoZXIKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBtaW5faW52ZXN0bWVudF9ldGggPSAwLjUgZXRoZXI7IC8vIGZpeGVkIHZhbHVlLCBub3QgY2hhbmdpbmcKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBtYXhfaW52ZXN0bWVudF9ldGggPSAzOTguNDA2NCBldGhlcjsgCgogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1pbl9pbnZlc3RtZW50X3ByZXNhbGVfZXRoID0gNSBldGhlcjsgLy8gZml4ZWQgdmFsdWUsIG5vdCBjaGFuZ2luZwoKICAvLyByZWZ1bmQgaWYgc29mdENhcCBpcyBub3QgcmVhY2hlZAogIGJvb2wgcHVibGljIHJlZnVuZEFsbG93ZWQgPSBmYWxzZTsKCiAgLy8gcGF1c2UgZmxhZwogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBib3VudHlSZXdhcmQgPSAxZTI1OwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHByZWljb0FuZEFkdmlzb3JzID0gNGUyNTsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBsaXF1aWRpdHlQb29sID0gMjVlMjQ7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZnV0dXJlRGV2ZWxvcG1lbnQgPSAxZTI2OyAKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0ZWFtQW5kRm91bmRlcnMgPSA3NWUyNDsgIAoKICB1aW50MjU2IHB1YmxpYyBsZWZ0T3ZlclRva2VucyA9IDA7CgogIHVpbnQyNTZbOF0gcHVibGljIGZvdW5kZXJBbW91bnRzID0gW3VpbnQyNTYodGVhbUFuZEZvdW5kZXJzLmRpdig4KSksdGVhbUFuZEZvdW5kZXJzLmRpdig4KSx0ZWFtQW5kRm91bmRlcnMuZGl2KDgpLHRlYW1BbmRGb3VuZGVycy5kaXYoOCksdGVhbUFuZEZvdW5kZXJzLmRpdig4KSx0ZWFtQW5kRm91bmRlcnMuZGl2KDgpLHRlYW1BbmRGb3VuZGVycy5kaXYoOCksdGVhbUFuZEZvdW5kZXJzLmRpdig4KV07CiAgdWludDI1NlsyXSAgcHVibGljIHByZWljb0FuZEFkdmlzb3JzQW1vdW50cyA9IFsgdWludDI1NihwcmVpY29BbmRBZHZpc29ycy5tdWwoMikuZGl2KDUpKSxwcmVpY29BbmRBZHZpc29ycy5tdWwoMikuZGl2KDUpXTsKCgogIC8vIFdpdGhkcmF3IG11bHRpc2lnIHdhbGxldAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gV2l0aGRyYXcgbXVsdGlzaWcgd2FsbGV0CiAgYWRkcmVzcyBwdWJsaWMgdGVhbUFuZEZvdW5kZXJzV2FsbGV0OwoKICAvLyBXaXRoZHJhdyBtdWx0aXNpZyB3YWxsZXQKICBhZGRyZXNzIHB1YmxpYyBhZHZpc29yc0FuZFByZUlDTzsKCiAgLy8gVG9rZW4gcGVyIGV0aGVyCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5fcGVyX3dlaSA9IDEyNTUwOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcCB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lOwogIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogIHVpbnQyNTYgcHJpdmF0ZSBjb25zdGFudCB3ZWVrSW5TZWNvbmRzID0gODY0MDAgKiA3OwoKICAvLyB3aGl0ZWxpc3QgYWRkcmVzc2VzIGFuZCBwbGFubmVkIGludmVzdG1lbnQgYW1vdW50cwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgd2hpdGVsaXN0OwoKICAvLyBhbW91bnQgb2YgZXRoZXIgcmVjZWl2ZWQgZnJvbSB0b2tlbiBidXllcnMKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGV0aGVyQmFsYW5jZXM7CgogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgV2hpdGVsaXN0KGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgU29mdENhcFJlYWNoZWQoKTsKICBldmVudCBGaW5hbGl6ZWQoKTsKCiAgZnVuY3Rpb24gVHJhY2VUb2tlblNhbGUodWludDI1NiBfc3RhcnRUaW1lLCBhZGRyZXNzIHRyYWNlVG9rZW5BZGRyZXNzLCBhZGRyZXNzIF93YWxsZXQsIGFkZHJlc3MgX3RlYW1BbmRGb3VuZGVyc1dhbGxldCwgYWRkcmVzcyBfYWR2aXNvcnNBbmRQcmVJQ08pIHB1YmxpYyB7CiAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gIG5vdyk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKICAgIHJlcXVpcmUoX3RlYW1BbmRGb3VuZGVyc1dhbGxldCAhPSAweDApOwogICAgcmVxdWlyZShfYWR2aXNvcnNBbmRQcmVJQ08gIT0gMHgwKTsKCiAgICB0b2tlbiA9IFRyYWNlVG9rZW4odHJhY2VUb2tlbkFkZHJlc3MpOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICAgIHRlYW1BbmRGb3VuZGVyc1dhbGxldCA9IF90ZWFtQW5kRm91bmRlcnNXYWxsZXQ7CiAgICBhZHZpc29yc0FuZFByZUlDTyA9IF9hZHZpc29yc0FuZFByZUlDTzsKICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICBlbmRUaW1lID0gX3N0YXJ0VGltZSArIDQgKiB3ZWVrSW5TZWNvbmRzOyAvLyB0aGUgc2FsZSBsYXN0cyBhIG1heGltdW0gb2YgNSB3ZWVrcwogICAgCiAgfQogICAgLyoKICAgICAqIEBkZXYgZmFsbGJhY2sgZm9yIHByb2Nlc3NpbmcgZXRoZXIKICAgICAqLwogICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgICAgcmV0dXJuIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgICB9CgogICAgIGZ1bmN0aW9uIGNhbGNBbW91bnQoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKCiAgICAgIGlmICh0b3RhbEV0aGVycyA+PSBwcmVzYWxlTGltaXQgfHwgc3RhcnRUaW1lICsgMiAqIHdlZWtJblNlY29uZHMgIDwgbm93ICl7CiAgICAgICAgLy8gcHJlc2FsZSBoYXMgZW5kZWQKICAgICAgICByZXR1cm4gbXNnLnZhbHVlLm11bCh0b2tlbl9wZXJfd2VpKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgIC8vIHByZXNhbGUgb25nb2luZwogICAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gbWluX2ludmVzdG1lbnRfcHJlc2FsZV9ldGgpOwoKICAgICAgICAgIC8qIGRpc2NvdW50IDIwICUgaW4gdGhlIGZpcnN0IHdlZWsgLSBwcmVzYWxlIHdlZWsgMSAqLwogICAgICAgICAgaWYgKG5vdyA8PSBzdGFydFRpbWUgKyB3ZWVrSW5TZWNvbmRzKSB7CiAgICAgICAgICAgIHJldHVybiBtc2cudmFsdWUubXVsKHRva2VuX3Blcl93ZWkubXVsKDEwMCkpLmRpdig4MCk7CgogICAgICAgICAgfQoKICAgICAgICAgIC8qIGRpc2NvdW50IDE1ICUgaW4gdGhlIHNlY29uZCB3ZWVrIC0gcHJlc2FsZSB3ZWVrIDIgKi8KICAgICAgICAgIGlmICggc3RhcnRUaW1lICsgIHdlZWtJblNlY29uZHMgIDwgbm93ICkgewogICAgICAgICAgIHJldHVybiBtc2cudmFsdWUubXVsKHRva2VuX3Blcl93ZWkubXVsKDEwMCkpLmRpdig4NSk7CiAgICAgICAgIH0KICAgICAgIH0KCiAgICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IHNlbGwgdG9rZW4gYW5kIHNlbmQgdG8gY29udHJpYnV0b3IgYWRkcmVzcwogICAgICogQHBhcmFtIGNvbnRyaWJ1dG9yIGFkZHJlc3MKICAgICAqLwogICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGNvbnRyaWJ1dG9yKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICByZXF1aXJlKCFoYXNFbmRlZCgpKTsKICAgICAgIHJlcXVpcmUoIWlzUGF1c2VkKCkpOwogICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgICAgcmVxdWlyZShjaGVja1doaXRlbGlzdChjb250cmlidXRvcixtc2cudmFsdWUpKTsKICAgICAgIHVpbnQyNTYgYW1vdW50ID0gY2FsY0Ftb3VudCgpOwogICAgICAgcmVxdWlyZSgodG9rZW4udG90YWxTdXBwbHkoKSArIGFtb3VudCkgPD0gVE9UQUxfTlVNX1RPS0VOUyk7CiAgICAgICAKICAgICAgIHdoaXRlbGlzdFtjb250cmlidXRvcl0gPSB3aGl0ZWxpc3RbY29udHJpYnV0b3JdLnN1Yihtc2cudmFsdWUpOwogICAgICAgZXRoZXJCYWxhbmNlc1tjb250cmlidXRvcl0gPSBldGhlckJhbGFuY2VzW2NvbnRyaWJ1dG9yXS5hZGQobXNnLnZhbHVlKTsKCiAgICAgICB0b3RhbEV0aGVycyA9IHRvdGFsRXRoZXJzLmFkZChtc2cudmFsdWUpOwoKICAgICAgIHRva2VuLm1pbnQoY29udHJpYnV0b3IsIGFtb3VudCk7CiAgICAgICByZXF1aXJlKHRvdGFsRXRoZXJzIDw9IGhhcmRDYXApOyAKICAgICAgIFRva2VuUHVyY2hhc2UoMHgwLCBjb250cmlidXRvciwgbXNnLnZhbHVlLCBhbW91bnQpOwogICAgIH0KCgogICAgIC8vIEByZXR1cm4gdXNlciBiYWxhbmNlCiAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgcmV0dXJuIHRva2VuLmJhbGFuY2VPZihfb3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrV2hpdGVsaXN0KGFkZHJlc3MgY29udHJpYnV0b3IsIHVpbnQyNTYgZXRoX2Ftb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgIHJlcXVpcmUoY29udHJpYnV0b3IhPTB4MCk7CiAgICAgcmVxdWlyZShldGhfYW1vdW50PjApOwogICAgIHJldHVybiAod2hpdGVsaXN0W2NvbnRyaWJ1dG9yXSA+PSBldGhfYW1vdW50KTsKICAgfQoKICAgZnVuY3Rpb24gYWRkV2hpdGVsaXN0KGFkZHJlc3MgY29udHJpYnV0b3IsIHVpbnQyNTYgZXRoX2Ftb3VudCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgcmVxdWlyZSghaGFzRW5kZWQoKSk7CiAgICAgcmVxdWlyZShjb250cmlidXRvciE9MHgwKTsKICAgICByZXF1aXJlKGV0aF9hbW91bnQ+MCk7CiAgICAgV2hpdGVsaXN0KGNvbnRyaWJ1dG9yLCBldGhfYW1vdW50KTsKICAgICB3aGl0ZWxpc3RbY29udHJpYnV0b3JdID0gZXRoX2Ftb3VudDsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQoKICAgZnVuY3Rpb24gYWRkV2hpdGVsaXN0cyhhZGRyZXNzW10gY29udHJpYnV0b3JzLCB1aW50MjU2W10gYW1vdW50cykgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgcmVxdWlyZSghaGFzRW5kZWQoKSk7CiAgICAgYWRkcmVzcyBjb250cmlidXRvcjsKICAgICB1aW50MjU2IGFtb3VudDsKICAgICByZXF1aXJlKGNvbnRyaWJ1dG9ycy5sZW5ndGggPT0gYW1vdW50cy5sZW5ndGgpOwoKICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBjb250cmlidXRvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgY29udHJpYnV0b3IgPSBjb250cmlidXRvcnNbaV07CiAgICAgIGFtb3VudCA9IGFtb3VudHNbaV07CiAgICAgIHJlcXVpcmUoYWRkV2hpdGVsaXN0KGNvbnRyaWJ1dG9yLCBhbW91bnQpKTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KCgogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKCiAgIGJvb2wgd2l0aGluUGVyaW9kID0gbm93ID49IHN0YXJ0VGltZSAmJiBub3cgPD0gZW5kVGltZTsKICAgYm9vbCB3aXRoaW5QdXJjaGFzZUxpbWl0cyA9IG1zZy52YWx1ZSA+PSBtaW5faW52ZXN0bWVudF9ldGggJiYgbXNnLnZhbHVlIDw9IG1heF9pbnZlc3RtZW50X2V0aDsKICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiB3aXRoaW5QdXJjaGFzZUxpbWl0czsKIH0KCiBmdW5jdGlvbiBoYXNTdGFydGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogIHJldHVybiBub3cgPj0gc3RhcnRUaW1lOwp9CgpmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICByZXR1cm4gbm93ID4gZW5kVGltZSB8fCB0b2tlbi50b3RhbFN1cHBseSgpID09IFRPVEFMX05VTV9UT0tFTlM7Cn0KCgpmdW5jdGlvbiBoYXJkQ2FwUmVhY2hlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICByZXR1cm4gaGFyZENhcC5tdWwoOTk5KS5kaXYoMTAwMCkgPD0gdG90YWxFdGhlcnM7IAp9CgpmdW5jdGlvbiBzb2Z0Q2FwUmVhY2hlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogIHJldHVybiB0b3RhbEV0aGVycyA+PSBzb2Z0Q2FwOwp9CgoKZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgcHVibGljIHsKICByZXF1aXJlKHNvZnRDYXBSZWFjaGVkKCkpOwogIHJlcXVpcmUodGhpcy5iYWxhbmNlID4gMCk7CgogIHdhbGxldC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwp9CgpmdW5jdGlvbiB3aXRoZHJhd1Rva2VuVG9Gb3VuZGVycygpIG9ubHlPd25lciBwdWJsaWMgewogIHJlcXVpcmUoc29mdENhcFJlYWNoZWQoKSk7CiAgcmVxdWlyZShoYXNFbmRlZCgpKTsKCiAgaWYgKG5vdyA+IHN0YXJ0VGltZSArIDcyMCBkYXlzICYmIGZvdW5kZXJBbW91bnRzWzddIT0wKXsKICAgIHRva2VuLnRyYW5zZmVyKHRlYW1BbmRGb3VuZGVyc1dhbGxldCwgZm91bmRlckFtb3VudHNbN10pOwogICAgZm91bmRlckFtb3VudHNbN10gPSAwOwogIH0KCiAgaWYgKG5vdyA+IHN0YXJ0VGltZSArIDYzMCBkYXlzICYmIGZvdW5kZXJBbW91bnRzWzZdIT0wKXsKICAgIHRva2VuLnRyYW5zZmVyKHRlYW1BbmRGb3VuZGVyc1dhbGxldCwgZm91bmRlckFtb3VudHNbNl0pOwogICAgZm91bmRlckFtb3VudHNbNl0gPSAwOwogIH0KICBpZiAobm93ID4gc3RhcnRUaW1lICsgNTQwIGRheXMgJiYgZm91bmRlckFtb3VudHNbNV0hPTApewogICAgdG9rZW4udHJhbnNmZXIodGVhbUFuZEZvdW5kZXJzV2FsbGV0LCBmb3VuZGVyQW1vdW50c1s1XSk7CiAgICBmb3VuZGVyQW1vdW50c1s1XSA9IDA7CiAgfQogIGlmIChub3cgPiBzdGFydFRpbWUgKyA0NTAgZGF5cyAmJiBmb3VuZGVyQW1vdW50c1s0XSE9MCl7CiAgICB0b2tlbi50cmFuc2Zlcih0ZWFtQW5kRm91bmRlcnNXYWxsZXQsIGZvdW5kZXJBbW91bnRzWzRdKTsKICAgIGZvdW5kZXJBbW91bnRzWzRdID0gMDsKICB9CiAgaWYgKG5vdyA+IHN0YXJ0VGltZSArIDM2MCBkYXlzJiYgZm91bmRlckFtb3VudHNbM10hPTApewogICAgdG9rZW4udHJhbnNmZXIodGVhbUFuZEZvdW5kZXJzV2FsbGV0LCBmb3VuZGVyQW1vdW50c1szXSk7CiAgICBmb3VuZGVyQW1vdW50c1szXSA9IDA7CiAgfQogIGlmIChub3cgPiBzdGFydFRpbWUgKyAyNzAgZGF5cyAmJiBmb3VuZGVyQW1vdW50c1syXSE9MCl7CiAgICB0b2tlbi50cmFuc2Zlcih0ZWFtQW5kRm91bmRlcnNXYWxsZXQsIGZvdW5kZXJBbW91bnRzWzJdKTsKICAgIGZvdW5kZXJBbW91bnRzWzJdID0gMDsKICB9CiAgaWYgKG5vdyA+IHN0YXJ0VGltZSArIDE4MCBkYXlzICYmIGZvdW5kZXJBbW91bnRzWzFdIT0wKXsKICAgIHRva2VuLnRyYW5zZmVyKHRlYW1BbmRGb3VuZGVyc1dhbGxldCwgZm91bmRlckFtb3VudHNbMV0pOwogICAgZm91bmRlckFtb3VudHNbMV0gPSAwOwogIH0KICBpZiAobm93ID4gc3RhcnRUaW1lICsgOTAgZGF5cyAmJiBmb3VuZGVyQW1vdW50c1swXSE9MCl7CiAgICB0b2tlbi50cmFuc2Zlcih0ZWFtQW5kRm91bmRlcnNXYWxsZXQsIGZvdW5kZXJBbW91bnRzWzBdKTsKICAgIGZvdW5kZXJBbW91bnRzWzBdID0gMDsKICB9Cn0KCmZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zVG9BZHZpc29ycygpIG9ubHlPd25lciBwdWJsaWMgewogIHJlcXVpcmUoc29mdENhcFJlYWNoZWQoKSk7CiAgcmVxdWlyZShoYXNFbmRlZCgpKTsKCiAgaWYgKG5vdyA+IHN0YXJ0VGltZSArIDE4MCBkYXlzICYmIHByZWljb0FuZEFkdmlzb3JzQW1vdW50c1sxXSE9MCl7CiAgICB0b2tlbi50cmFuc2ZlcihhZHZpc29yc0FuZFByZUlDTywgcHJlaWNvQW5kQWR2aXNvcnNBbW91bnRzWzFdKTsKICAgIHByZWljb0FuZEFkdmlzb3JzQW1vdW50c1sxXSA9IDA7CiAgfQoKICBpZiAobm93ID4gc3RhcnRUaW1lICsgOTAgZGF5cyAmJiBwcmVpY29BbmRBZHZpc29yc0Ftb3VudHNbMF0hPTApewogICAgdG9rZW4udHJhbnNmZXIoYWR2aXNvcnNBbmRQcmVJQ08sIHByZWljb0FuZEFkdmlzb3JzQW1vdW50c1swXSk7CiAgICBwcmVpY29BbmRBZHZpc29yc0Ftb3VudHNbMF0gPSAwOwogIH0KfQoKZnVuY3Rpb24gcmVmdW5kKCkgcHVibGljIHsKICByZXF1aXJlKHJlZnVuZEFsbG93ZWQpOwogIHJlcXVpcmUoaGFzRW5kZWQoKSk7CiAgcmVxdWlyZSghc29mdENhcFJlYWNoZWQoKSk7CiAgcmVxdWlyZShldGhlckJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCk7CiAgcmVxdWlyZSh0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPiAwKTsKCiAgdWludDI1NiBjdXJyZW50X2JhbGFuY2UgPSBldGhlckJhbGFuY2VzW21zZy5zZW5kZXJdOwogIGV0aGVyQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogIHRva2VuLnRyYW5zZmVyKHRoaXMsdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpKTsgLy8gYnVybmluZyB0b2tlbnMgYnkgc2VuZGluZyBiYWNrIHRvIGNvbnRyYWN0CiAgbXNnLnNlbmRlci50cmFuc2ZlcihjdXJyZW50X2JhbGFuY2UpOwp9CgoKZnVuY3Rpb24gZmluaXNoQ3Jvd2RzYWxlKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKXsKICByZXF1aXJlKCF0b2tlbi5taW50aW5nRmluaXNoZWQoKSk7CiAgcmVxdWlyZShoYXNFbmRlZCgpIHx8IGhhcmRDYXBSZWFjaGVkKCkpOwoKICBpZihzb2Z0Q2FwUmVhY2hlZCgpKSB7CiAgICB0b2tlbi5taW50KHdhbGxldCwgYm91bnR5UmV3YXJkKTsKICAgIHRva2VuLm1pbnQoYWR2aXNvcnNBbmRQcmVJQ08sICBwcmVpY29BbmRBZHZpc29ycy5kaXYoNSkpOyAvLzIwJSBhdmFpbGFibGUgaW1tZWRpYXRlbHkKICAgIHRva2VuLm1pbnQod2FsbGV0LCBsaXF1aWRpdHlQb29sKTsKICAgIHRva2VuLm1pbnQod2FsbGV0LCBmdXR1cmVEZXZlbG9wbWVudCk7CiAgICB0b2tlbi5taW50KHRoaXMsIHRlYW1BbmRGb3VuZGVycyk7CiAgICB0b2tlbi5taW50KHRoaXMsIHByZWljb0FuZEFkdmlzb3JzLm11bCg0KS5kaXYoNSkpOyAKICAgIGxlZnRPdmVyVG9rZW5zID0gVE9UQUxfTlVNX1RPS0VOUy5zdWIodG9rZW4udG90YWxTdXBwbHkoKSk7CiAgICB0b2tlbi5taW50KHdhbGxldCxsZWZ0T3ZlclRva2Vucyk7IC8vIHdpbGwgYmUgZXF1YWx5IGRpc3RyaWJ1dGVkIGFtb25nIGFsbCBwcmVzYWxlIGFuZCBzYWxlIGNvbnRyaWJ1dG9ycyBhZnRlciB0aGUgc2FsZQoKICAgIHRva2VuLmVuZE1pbnRpbmcodHJ1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJlZnVuZEFsbG93ZWQgPSB0cnVlOwogICAgICB0b2tlbi5lbmRNaW50aW5nKGZhbHNlKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIEZpbmFsaXplZCgpOwogIH0KCgogIC8vIGFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eSwgdXNlZCB0byBwYXVzZSBjcm93ZHNhbGUgZm9yIDI0aAogIGZ1bmN0aW9uIHBhdXNlU2FsZSgpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCl7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiB1bnBhdXNlU2FsZSgpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCl7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gaXNQYXVzZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKXsKICAgIHJldHVybiBwYXVzZWQ7CiAgfQp9'.
	

]
