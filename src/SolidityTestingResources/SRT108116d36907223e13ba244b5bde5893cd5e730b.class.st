Class {
	#name : #SRT108116d36907223e13ba244b5bde5893cd5e730b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT108116d36907223e13ba244b5bde5893cd5e730b >> base64 [
	^ ''.
	

]
