Class {
	#name : #SRT8b7b6c61238088593bf75eec8fbf58d0a615d30c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b7b6c61238088593bf75eec8fbf58d0a615d30c >> base64 [
	^ ''.
	

]
