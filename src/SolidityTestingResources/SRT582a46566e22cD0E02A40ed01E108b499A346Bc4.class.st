Class {
	#name : #SRT582a46566e22cD0E02A40ed01E108b499A346Bc4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT582a46566e22cD0E02A40ed01E108b499A346Bc4 >> base64 [
	^ ''.
	

]
