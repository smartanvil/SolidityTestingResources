Class {
	#name : #SRT24a57f642948e36e8f0ce0a4b3b940cbfe14bd4c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT24a57f642948e36e8f0ce0a4b3b940cbfe14bd4c >> base64 [
	^ ''.
	

]
