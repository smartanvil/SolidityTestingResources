Class {
	#name : #SRT2a6b4bedadd639c31429949836481963933bb59d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2a6b4bedadd639c31429949836481963933bb59d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKiAKYCogaXMgb3duZWQKKi8KY29udHJhY3Qgb3duZWQgewoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIG93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIG93bmVyVHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQoKfQoKLyogCiogc2FmZSBtYXRoCiovCmNvbnRyYWN0IERTU2FmZUFkZFN1YiB7CgogICAgZnVuY3Rpb24gc2FmZVRvQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChhICsgYiA+PSBhKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmICghc2FmZVRvQWRkKGEsIGIpKSByZXZlcnQoKTsKICAgICAgICByZXR1cm4gYSArIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVRvU3VidHJhY3QodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKGIgPD0gYSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmICghc2FmZVRvU3VidHJhY3QoYSwgYikpIHJldmVydCgpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0gCgp9CgoKLyoqCiAqCiAqIEB0aXRsZSAgRG9uZVRva2VuCiAqIAogKiBUaGUgb2ZmaWNpYWwgdG9rZW4gcG93ZXJpbmcgRG9uYXRpb24gRWZmaWNpZW5jeS4KICogRG9uZVRva2VuIGlzIGEgRVJDLjIwIHN0YW5kYXJkIHRva2VuIHdpdGggc29tZSBjdXN0b20gZnVuY3Rpb25hbGl0eQogKgogKi8gCgoKY29udHJhY3QgRG9uZVRva2VuIGlzIG93bmVkLCBEU1NhZmVBZGRTdWIgewoKICAgIC8qIGNoZWNrIGFkZHJlc3MgKi8KICAgIG1vZGlmaWVyIG9ubHlCeShhZGRyZXNzIF9hY2NvdW50KSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gX2FjY291bnQpIHJldmVydCgpOwogICAgICAgIF87CiAgICB9ICAgIAoKICAgIC8qIHZhcnMgKi8KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnVG9rZW4gMS4wJzsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJET05FIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkRFVCI7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxNjsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5ID0gMTUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOyAKCiAgICBhZGRyZXNzIHB1YmxpYyBwcml2aWxlZGdlZEFkZHJlc3M7ICAKICAgIGJvb2wgcHVibGljIHRva2Vuc0Zyb3plbjsKICAgIHVpbnQgcHVibGljIGNyb3dkZnVuZERlYWRsaW5lID0gbm93ICsgMSBob3VyczsgICAgICAgCiAgICB1aW50IHB1YmxpYyBuZXh0RnJlZXplID0gbm93ICsgMiBob3VyczsKICAgIHVpbnQgcHVibGljIG5leHRUaGF3ID0gbm93ICsgMyBob3VyczsKICAgCgogICAgLyogbWFwIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIHB1YmxpYyBhbGxvd2FuY2U7ICAKCiAgICAvKiBldmVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBMb2dUb2tlbnNGcm96ZW4oYm9vbCBpbmRleGVkIEZyb3plbik7ICAgIAoKICAgIC8qCiAgICAqICBAbm90aWNlIHNlbmRzIGFsbCB0b2tlbnMgdG8gbXNnLnNlbmRlciBvbiBpbml0ICAgIAogICAgKi8gIAogICAgZnVuY3Rpb24gRG9uZVRva2VuKCl7CiAgICAgICAgLyogc2VuZCBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucyAyNSwwMDAsMDAwICovCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMTUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgICAgIC8qIHRva2VucyBhcmUgbm90IGZyb3plbiAqLyAgCiAgICAgICAgdG9rZW5zRnJvemVuID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICB9ICAKCiAgICAvKgogICAgKiAgQG5vdGljZSBwdWJsaWMgZnVuY3Rpb24gICAgCiAgICAqICBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gc2VuZCB0b2tlbnMgdG8gICAKICAgICogIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlciAKICAgICogIEByZXR1cm5zIGJvb2xlYW4gc3VjY2VzcyAgICAgICAgIAogICAgKi8gICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpICAgIAogICAgewogICAgICAgIGlmKHRva2Vuc0Zyb3plbiAmJiBtc2cuc2VuZGVyICE9IHByaXZpbGVkZ2VkQWRkcmVzcykgcmV0dXJuIGZhbHNlOyAgLyogdHJhbnNmZXIgb25seSBieSBwcml2aWxlZGdlZEFkZHJlc3MgZHVyaW5nIGNyb3dkZnVuZCBvciByZXdhcmQgcGhhc2VzICovCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAgICAgICAvKiBjaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2ggKi8KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV0dXJuIGZhbHNlOyAgICAgICAgIC8qIGNoZWNrIGZvciBvdmVyZmxvd3MgKi8gICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSAgX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyICovCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBhZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudCAqLwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UgKi8KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gICAgICAKCiAgICAvKgogICAgKiAgQG5vdGljZSBwdWJsaWMgZnVuY3Rpb24gICAgCiAgICAqICBAcGFyYW0gX2Zyb20gYWRkcmVzcyB0byBzZW5kIHRva2VucyBmcm9tIAogICAgKiAgQHBhcmFtIF90byBhZGRyZXNzIHRvIHNlbmQgdG9rZW5zIHRvICAgCiAgICAqICBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgICAgIAogICAgKiAgQHJldHVybnMgYm9vbGVhbiBzdWNjZXNzICAgICAgCiAgICAqICBhbm90aGVyIGNvbnRyYWN0IGF0dGVtcHRzIHRvIHNwZW5kIHRva2VucyBvbiB5b3VyIGJlaGFsZgogICAgKi8gICAgICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIAogICAgeyAgICAgICAgICAgICAgICAKICAgICAgICBpZih0b2tlbnNGcm96ZW4gJiYgbXNnLnNlbmRlciAhPSBwcml2aWxlZGdlZEFkZHJlc3MpIHJldHVybiBmYWxzZTsgIC8qIHRyYW5zZmVyIG9ubHkgYnkgcHJpdmlsZWRnZWRBZGRyZXNzIGR1cmluZyBjcm93ZGZ1bmQgb3IgcmV3YXJkIHBoYXNlcyAqLwogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgLyogY2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoICovCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldHVybiBmYWxzZTsgICAgICAgICAvKiBjaGVjayBmb3Igb3ZlcmZsb3dzICovICAgICAgICAgICAgICAgIAogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgLyogY2hlY2sgYWxsb3dhbmNlICovCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIgKi8KICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50ICovCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiByZWR1Y2UgYWxsb3dhbmNlICovCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBub3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZSAqLwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSAgICAgICAgCiAKICAgIC8qCiAgICAqICBAbm90aWNlIHB1YmxpYyBmdW5jdGlvbiAgICAKICAgICogIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIGJlaW5nIGdyYW50ZWQgYXBwcm92YWwgdG8gc3BlbmQgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIKICAgICogIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyBncmFudGVkIGFwcHJvdmFsIGZvciBfc3BlbmRlciB0byBzcGVuZCBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlciAgICAKICAgICogIEByZXR1cm5zIGJvb2xlYW4gc3VjY2VzcyAgICAgIAogICAgKiAgYXBwcm92ZXMgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBvbiB5b3VyIGJlaGFsZgogICAgKi8gICAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICAvKiBzZXQgYWxsb3dhbmNlIGZvciBfc3BlbmRlciBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlciAqLwogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgogICAgICAgIC8qIGxvZyBldmVudCBhYm91dCB0cmFuc2FjdGlvbiAqLwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOyAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IAogIAogICAgLyoKICAgICogIEBub3RpY2UgYWRkcmVzcyByZXN0cmljdGVkIGZ1bmN0aW9uIAogICAgKiAgY3Jvd2RmdW5kIGNvbnRyYWN0IGNhbGxzIHRoaXMgdG8gYnVybiBpdHMgdW5zb2xkIGNvaW5zIAogICAgKi8gICAgIAogICAgZnVuY3Rpb24gcHJpdmlsZWRnZWRBZGRyZXNzQnVyblVuc29sZENvaW5zKCkgcHVibGljCiAgICAgICAgLyogb25seSBjcm93ZGZ1bmQgY29udHJhY3QgY2FuIGNhbGwgdGhpcyAqLwogICAgICAgIG9ubHlCeShwcml2aWxlZGdlZEFkZHJlc3MpCiAgICB7CiAgICAgICAgLyogdG90YWxTdXBwbHkgc2hvdWxkIGVxdWFsIHRvdGFsIHRva2VucyBpbiBjaXJjdWxhdGlvbiAqLwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSwgYmFsYW5jZU9mW3ByaXZpbGVkZ2VkQWRkcmVzc10pOyAKICAgICAgICAvKiBidXJucyB1bnNvbGQgdG9rZW5zIGZyb20gY3Jvd2RmdW5kIGFkZHJlc3MgKi8KICAgICAgICBiYWxhbmNlT2ZbcHJpdmlsZWRnZWRBZGRyZXNzXSA9IDA7CiAgICB9CgogICAgLyoKICAgICogIEBub3RpY2UgcHVibGljIGZ1bmN0aW9uIAogICAgKiAgbG9ja3MvdW5sb2NrcyB0b2tlbnMgb24gYSByZWN1cnJpbmcgY3ljbGUKICAgICovICAgICAgICAgCiAgICBmdW5jdGlvbiB1cGRhdGVUb2tlblN0YXR1cygpIHB1YmxpYwogICAgewogICAgICAgIAogICAgICAgIC8qIGxvY2tzIHRva2VucyBkdXJpbmcgaW5pdGlhbCBjcm93ZGZ1bmQgcGVyaW9kICovCiAgICAgICAgaWYobm93IDwgY3Jvd2RmdW5kRGVhZGxpbmUpeyAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHRva2Vuc0Zyb3plbiA9IHRydWU7ICAgICAgICAgCiAgICAgICAgICAgIExvZ1Rva2Vuc0Zyb3plbih0b2tlbnNGcm96ZW4pOyAgCiAgICAgICAgfSAgCgogICAgICAgIC8qIGxvY2tzIHRva2VucyAqLwogICAgICAgIGlmKG5vdyA+PSBuZXh0RnJlZXplKXsgICAgICAgICAgCiAgICAgICAgICAgIHRva2Vuc0Zyb3plbiA9IHRydWU7CiAgICAgICAgICAgIExvZ1Rva2Vuc0Zyb3plbih0b2tlbnNGcm96ZW4pOyAgCiAgICAgICAgfQoKICAgICAgICAvKiB1bmxvY2tzIHRva2VucyAqLwogICAgICAgIGlmKG5vdyA+PSBuZXh0VGhhdyl7ICAgICAgICAgCiAgICAgICAgICAgIHRva2Vuc0Zyb3plbiA9IGZhbHNlOwogICAgICAgICAgICBuZXh0RnJlZXplID0gbm93ICsgMiBob3VyczsKICAgICAgICAgICAgbmV4dFRoYXcgPSBub3cgKyAzIGhvdXJzOyAgICAgICAgICAgICAgCiAgICAgICAgICAgIExvZ1Rva2Vuc0Zyb3plbih0b2tlbnNGcm96ZW4pOyAgCiAgICAgICAgfSAgICAgICAgCiAgICAgIAogICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIC8qCiAgICAqICBAbm90aWNlIG93bmVyIHJlc3RyaWN0ZWQgZnVuY3Rpb24KICAgICogIEBwYXJhbSBfbmV3UHJpdmlsZWRnZWRBZGRyZXNzIHRoZSBhZGRyZXNzCiAgICAqICBvbmx5IHRoaXMgYWRkcmVzcyBjYW4gYnVybiB1bnNvbGQgdG9rZW5zCiAgICAqICB0cmFuc2ZlciB0b2tlbnMgb25seSBieSBwcml2aWxlZGdlZEFkZHJlc3MgZHVyaW5nIGNyb3dkZnVuZCBvciByZXdhcmQgcGhhc2VzCiAgICAqLyAgICAgIAogICAgZnVuY3Rpb24gb3duZXJTZXRQcml2aWxlZGdlZEFkZHJlc3MoYWRkcmVzcyBfbmV3UHJpdmlsZWRnZWRBZGRyZXNzKSBwdWJsaWMgCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcHJpdmlsZWRnZWRBZGRyZXNzID0gX25ld1ByaXZpbGVkZ2VkQWRkcmVzczsKICAgIH0gICAKICAgICAgICAgICAgICAgICAgICAKICAgIAp9'.
	

]
