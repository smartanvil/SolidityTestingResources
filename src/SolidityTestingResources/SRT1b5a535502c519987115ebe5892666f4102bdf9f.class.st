Class {
	#name : #SRT1b5a535502c519987115ebe5892666f4102bdf9f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1b5a535502c519987115ebe5892666f4102bdf9f >> base64 [
	^ ''.
	

]
