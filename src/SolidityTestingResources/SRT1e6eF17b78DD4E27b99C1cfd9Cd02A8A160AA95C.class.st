Class {
	#name : #SRT1e6eF17b78DD4E27b99C1cfd9Cd02A8A160AA95C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e6eF17b78DD4E27b99C1cfd9Cd02A8A160AA95C >> base64 [
	^ ''.
	

]
