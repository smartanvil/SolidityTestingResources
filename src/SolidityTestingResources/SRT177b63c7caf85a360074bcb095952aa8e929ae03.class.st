Class {
	#name : #SRT177b63c7caf85a360074bcb095952aa8e929ae03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT177b63c7caf85a360074bcb095952aa8e929ae03 >> base64 [
	^ ''.
	

]
