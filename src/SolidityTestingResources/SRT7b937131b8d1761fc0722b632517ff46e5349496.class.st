Class {
	#name : #SRT7b937131b8d1761fc0722b632517ff46e5349496,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7b937131b8d1761fc0722b632517ff46e5349496 >> base64 [
	^ ''.
	

]
