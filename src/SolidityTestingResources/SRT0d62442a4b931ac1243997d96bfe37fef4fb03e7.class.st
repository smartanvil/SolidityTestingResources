Class {
	#name : #SRT0d62442a4b931ac1243997d96bfe37fef4fb03e7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d62442a4b931ac1243997d96bfe37fef4fb03e7 >> base64 [
	^ ''.
	

]
