Class {
	#name : #SRTf5c3086d42cb2857ad5f52c134fc3e698e8e9edd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5c3086d42cb2857ad5f52c134fc3e698e8e9edd >> base64 [
	^ ''.
	

]
