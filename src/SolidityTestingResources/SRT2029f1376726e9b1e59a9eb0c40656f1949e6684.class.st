Class {
	#name : #SRT2029f1376726e9b1e59a9eb0c40656f1949e6684,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2029f1376726e9b1e59a9eb0c40656f1949e6684 >> base64 [
	^ ''.
	

]
