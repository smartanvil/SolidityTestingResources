Class {
	#name : #SRTC16b542ff490e01fcc0DC58a60e1EFdc3e357cA6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC16b542ff490e01fcc0DC58a60e1EFdc3e357cA6 >> base64 [
	^ ''.
	

]
