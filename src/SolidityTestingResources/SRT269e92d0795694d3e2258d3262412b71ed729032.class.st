Class {
	#name : #SRT269e92d0795694d3e2258d3262412b71ed729032,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT269e92d0795694d3e2258d3262412b71ed729032 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiBjb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvTmV4dFNhbGVBZ2VudEZlYXR1cmUuc29sCgpjb250cmFjdCBOZXh0U2FsZUFnZW50RmVhdHVyZSBpcyBPd25hYmxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgbmV4dFNhbGVBZ2VudDsKCiAgZnVuY3Rpb24gc2V0TmV4dFNhbGVBZ2VudChhZGRyZXNzIG5ld05leHRTYWxlQWdlbnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgbmV4dFNhbGVBZ2VudCA9IG5ld05leHRTYWxlQWdlbnQ7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL0RldldhbGxldC5zb2wKCmNvbnRyYWN0IERldldhbGxldCB7CgogIHVpbnQgcHVibGljIGRhdGUgPSAxNTI1MjU1MjAwOwogIHVpbnQgcHVibGljIGxpbWl0ID0gNDUwMDAwMDAwMDAwMDAwMDAwMDsKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQgPSAweEVBMTVBZGI2NkRDOTJhNEJiQ2NDOEJmMzJmZDI1RTJlODZhMkE3NzA7CgogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHsKICAgIHJlcXVpcmUobm93ID49IGRhdGUpOwogICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7fQoKfQoKLy8gRmlsZTogY29udHJhY3RzL1BlcmNlbnRSYXRlUHJvdmlkZXIuc29sCgpjb250cmFjdCBQZXJjZW50UmF0ZVByb3ZpZGVyIGlzIE93bmFibGUgewoKICB1aW50IHB1YmxpYyBwZXJjZW50UmF0ZSA9IDEwMDsKCiAgZnVuY3Rpb24gc2V0UGVyY2VudFJhdGUodWludCBuZXdQZXJjZW50UmF0ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBwZXJjZW50UmF0ZSA9IG5ld1BlcmNlbnRSYXRlOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9tYXRoL1NhZmVNYXRoLnNvbAoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL3Rva2VuL0VSQzIwQmFzaWMuc29sCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovLyBGaWxlOiBjb250cmFjdHMvdG9rZW4vQmFzaWNUb2tlbi5zb2wKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL3Rva2VuL0VSQzIwLnNvbAoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogY29udHJhY3RzL3Rva2VuL1N0YW5kYXJkVG9rZW4uc29sCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBpbnRlcm5hbCBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICoKICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogQGRldiBJbmNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9hZGRlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGluY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWNyZWFzZSB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gZGVjcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zdWJ0cmFjdGVkVmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGVjcmVhc2UgdGhlIGFsbG93YW5jZSBieS4KICAgKi8KICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewoKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwoKICBldmVudCBNaW50RmluaXNoZWQoKTsKCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgogIGFkZHJlc3MgcHVibGljIHNhbGVBZ2VudDsKCiAgZnVuY3Rpb24gc2V0U2FsZUFnZW50KGFkZHJlc3MgbmV3U2FsZUFnbmV0KSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNhbGVBZ2VudCB8fCBtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIHNhbGVBZ2VudCA9IG5ld1NhbGVBZ25ldDsKICB9CgogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBzYWxlQWdlbnQgJiYgIW1pbnRpbmdGaW5pc2hlZCk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoKG1zZy5zZW5kZXIgPT0gc2FsZUFnZW50IHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpICYmICFtaW50aW5nRmluaXNoZWQpOwogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL1JFUFVUb2tlbi5zb2wKCmNvbnRyYWN0IFJFUFVUb2tlbiBpcyBNaW50YWJsZVRva2VuIHsKCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ1JFUFUnOwoKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICdSRVBVJzsKCiAgdWludDMyIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKfQoKLy8gRmlsZTogY29udHJhY3RzL0NvbW1vblNhbGUuc29sCgpjb250cmFjdCBDb21tb25TYWxlIGlzIFBlcmNlbnRSYXRlUHJvdmlkZXIgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICBhZGRyZXNzIHB1YmxpYyBkaXJlY3RNaW50QWdlbnQ7CgogIHVpbnQgcHVibGljIHByaWNlOwoKICB1aW50IHB1YmxpYyBzdGFydDsKCiAgdWludCBwdWJsaWMgbWluSW52ZXN0ZWRMaW1pdDsKCiAgUkVQVVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgRGV2V2FsbGV0IHB1YmxpYyBkZXZXYWxsZXQ7CgogIGJvb2wgcHVibGljIGRldldhbGxldExvY2tlZDsKCiAgdWludCBwdWJsaWMgaGFyZGNhcDsKCiAgdWludCBwdWJsaWMgaW52ZXN0ZWQ7CgogIG1vZGlmaWVyIGlzVW5kZXJIYXJkY2FwKCkgewogICAgcmVxdWlyZShpbnZlc3RlZCA8IGhhcmRjYXApOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHNldEhhcmRjYXAodWludCBuZXdIYXJkY2FwKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGhhcmRjYXAgPSBuZXdIYXJkY2FwOwogIH0KCiAgbW9kaWZpZXIgb25seURpcmVjdE1pbnRBZ2VudE9yT3duZXIoKSB7CiAgICByZXF1aXJlKGRpcmVjdE1pbnRBZ2VudCA9PSBtc2cuc2VuZGVyIHx8IG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG1pbkludmVzdExpbWl0ZWQodWludCB2YWx1ZSkgewogICAgcmVxdWlyZSh2YWx1ZSA+PSBtaW5JbnZlc3RlZExpbWl0KTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBzZXRTdGFydCh1aW50IG5ld1N0YXJ0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIHN0YXJ0ID0gbmV3U3RhcnQ7CiAgfQoKICBmdW5jdGlvbiBzZXRNaW5JbnZlc3RlZExpbWl0KHVpbnQgbmV3TWluSW52ZXN0ZWRMaW1pdCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtaW5JbnZlc3RlZExpbWl0ID0gbmV3TWluSW52ZXN0ZWRMaW1pdDsKICB9CgogIGZ1bmN0aW9uIHNldERpcmVjdE1pbnRBZ2VudChhZGRyZXNzIG5ld0RpcmVjdE1pbnRBZ2VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICBkaXJlY3RNaW50QWdlbnQgPSBuZXdEaXJlY3RNaW50QWdlbnQ7CiAgfQoKICBmdW5jdGlvbiBzZXRXYWxsZXQoYWRkcmVzcyBuZXdXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgd2FsbGV0ID0gbmV3V2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gc2V0UHJpY2UodWludCBuZXdQcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBwcmljZSA9IG5ld1ByaWNlOwogIH0KCiAgZnVuY3Rpb24gc2V0VG9rZW4oYWRkcmVzcyBuZXdUb2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlbiA9IFJFUFVUb2tlbihuZXdUb2tlbik7CiAgfQoKICBmdW5jdGlvbiBzZXREZXZXYWxsZXQoYWRkcmVzcyBuZXdEZXZXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSghZGV2V2FsbGV0TG9ja2VkKTsKICAgIGRldldhbGxldCA9IERldldhbGxldChuZXdEZXZXYWxsZXQpOwogICAgZGV2V2FsbGV0TG9ja2VkID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2Vucyh1aW50IF9pbnZlc3RlZCkgaW50ZXJuYWwgcmV0dXJucyh1aW50KTsKCiAgZnVuY3Rpb24gbWludFRva2Vuc0V4dGVybmFsKGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKSBwdWJsaWMgb25seURpcmVjdE1pbnRBZ2VudE9yT3duZXIgewogICAgbWludFRva2Vucyh0bywgdG9rZW5zKTsKICB9CgogIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyB0bywgdWludCB0b2tlbnMpIGludGVybmFsIHsKICAgIHRva2VuLm1pbnQodGhpcywgdG9rZW5zKTsKICAgIHRva2VuLnRyYW5zZmVyKHRvLCB0b2tlbnMpOwogIH0KCiAgZnVuY3Rpb24gZW5kU2FsZURhdGUoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQpOwoKICBmdW5jdGlvbiBtaW50VG9rZW5zQnlFVEhFeHRlcm5hbChhZGRyZXNzIHRvLCB1aW50IF9pbnZlc3RlZCkgcHVibGljIG9ubHlEaXJlY3RNaW50QWdlbnRPck93bmVyIHJldHVybnModWludCkgewogICAgcmV0dXJuIG1pbnRUb2tlbnNCeUVUSCh0bywgX2ludmVzdGVkKTsKICB9CgogIGZ1bmN0aW9uIG1pbnRUb2tlbnNCeUVUSChhZGRyZXNzIHRvLCB1aW50IF9pbnZlc3RlZCkgaW50ZXJuYWwgaXNVbmRlckhhcmRjYXAgcmV0dXJucyh1aW50KSB7CiAgICBpbnZlc3RlZCA9IGludmVzdGVkLmFkZChfaW52ZXN0ZWQpOwogICAgdWludCB0b2tlbnMgPSBjYWxjdWxhdGVUb2tlbnMoX2ludmVzdGVkKTsKICAgIG1pbnRUb2tlbnModG8sIHRva2Vucyk7CiAgICByZXR1cm4gdG9rZW5zOwogIH0KCiAgZnVuY3Rpb24gZGV2V2l0aGRyYXcoKSBpbnRlcm5hbCB7CiAgICB1aW50IHJlY2VpdmVkID0gZGV2V2FsbGV0LmJhbGFuY2U7CiAgICB1aW50IGxpbWl0ID0gZGV2V2FsbGV0LmxpbWl0KCk7CiAgICBpZiAocmVjZWl2ZWQgPCBsaW1pdCkgewogICAgICB1aW50IHNob3VsZFNlbmQgPSBsaW1pdC5zdWIocmVjZWl2ZWQpOwogICAgICB1aW50IHZhbHVlOwogICAgICBpZiAobXNnLnZhbHVlIDwgc2hvdWxkU2VuZCkgewogICAgICAgIHZhbHVlID0gbXNnLnZhbHVlOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlID0gc2hvdWxkU2VuZDsKICAgICAgfQogICAgICBkZXZXYWxsZXQudHJhbnNmZXIodmFsdWUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZmFsbGJhY2soKSBpbnRlcm5hbCBtaW5JbnZlc3RMaW1pdGVkKG1zZy52YWx1ZSkgcmV0dXJucyh1aW50KSB7CiAgICByZXF1aXJlKG5vdyA+PSBzdGFydCAmJiBub3cgPCBlbmRTYWxlRGF0ZSgpKTsKICAgIGlmIChkZXZXYWxsZXQgIT0gYWRkcmVzcygwKSkgewogICAgICBkZXZXaXRoZHJhdygpOwogICAgfQogICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICByZXR1cm4gbWludFRva2Vuc0J5RVRIKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICBmYWxsYmFjaygpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9SZXRyaWV2ZVRva2Vuc0ZlYXR1cmUuc29sCgpjb250cmFjdCBSZXRyaWV2ZVRva2Vuc0ZlYXR1cmUgaXMgT3duYWJsZSB7CgogIGZ1bmN0aW9uIHJldHJpZXZlVG9rZW5zKGFkZHJlc3MgdG8sIGFkZHJlc3MgYW5vdGhlclRva2VuKSBwdWJsaWMgb25seU93bmVyIHsKICAgIEVSQzIwIGFsaWVuVG9rZW4gPSBFUkMyMChhbm90aGVyVG9rZW4pOwogICAgYWxpZW5Ub2tlbi50cmFuc2Zlcih0bywgYWxpZW5Ub2tlbi5iYWxhbmNlT2YodGhpcykpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9WYWx1ZUJvbnVzRmVhdHVyZS5zb2wKCmNvbnRyYWN0IFZhbHVlQm9udXNGZWF0dXJlIGlzIFBlcmNlbnRSYXRlUHJvdmlkZXIgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgc3RydWN0IFZhbHVlQm9udXMgewogICAgdWludCBmcm9tOwogICAgdWludCBib251czsKICB9CgogIFZhbHVlQm9udXNbXSBwdWJsaWMgdmFsdWVCb251c2VzOwoKICBmdW5jdGlvbiBhZGRWYWx1ZUJvbnVzKHVpbnQgZnJvbSwgdWludCBib251cykgcHVibGljIG9ubHlPd25lciB7CiAgICB2YWx1ZUJvbnVzZXMucHVzaChWYWx1ZUJvbnVzKGZyb20sIGJvbnVzKSk7CiAgfQoKICBmdW5jdGlvbiBnZXRWYWx1ZUJvbnVzVG9rZW5zKHVpbnQgdG9rZW5zLCB1aW50IF9pbnZlc3RlZCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICB1aW50IHZhbHVlQm9udXMgPSBnZXRWYWx1ZUJvbnVzKF9pbnZlc3RlZCk7CiAgICBpZiAodmFsdWVCb251cyA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgcmV0dXJuIHRva2Vucy5tdWwodmFsdWVCb251cykuZGl2KHBlcmNlbnRSYXRlKTsKICB9CgogIGZ1bmN0aW9uIGdldFZhbHVlQm9udXModWludCB2YWx1ZSkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICB1aW50IGJvbnVzID0gMDsKICAgIGZvciAodWludCBpID0gMDsgaSA8IHZhbHVlQm9udXNlcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAodmFsdWUgPj0gdmFsdWVCb251c2VzW2ldLmZyb20pIHsKICAgICAgICBib251cyA9IHZhbHVlQm9udXNlc1tpXS5ib251czsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYm9udXM7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBib251czsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvUkVQVUNvbW1vblNhbGUuc29sCgpjb250cmFjdCBSRVBVQ29tbW9uU2FsZSBpcyBWYWx1ZUJvbnVzRmVhdHVyZSwgUmV0cmlldmVUb2tlbnNGZWF0dXJlLCBDb21tb25TYWxlIHsKCgp9CgovLyBGaWxlOiBjb250cmFjdHMvU3RhZ2VkQ3Jvd2RzYWxlLnNvbAoKY29udHJhY3QgU3RhZ2VkQ3Jvd2RzYWxlIGlzIE93bmFibGUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgc3RydWN0IE1pbGVzdG9uZSB7CiAgICB1aW50IHBlcmlvZDsKICAgIHVpbnQgYm9udXM7CiAgfQoKICB1aW50IHB1YmxpYyB0b3RhbFBlcmlvZDsKCiAgTWlsZXN0b25lW10gcHVibGljIG1pbGVzdG9uZXM7CgogIGZ1bmN0aW9uIG1pbGVzdG9uZXNDb3VudCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgcmV0dXJuIG1pbGVzdG9uZXMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gYWRkTWlsZXN0b25lKHVpbnQgcGVyaW9kLCB1aW50IGJvbnVzKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUocGVyaW9kID4gMCk7CiAgICBtaWxlc3RvbmVzLnB1c2goTWlsZXN0b25lKHBlcmlvZCwgYm9udXMpKTsKICAgIHRvdGFsUGVyaW9kID0gdG90YWxQZXJpb2QuYWRkKHBlcmlvZCk7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVNaWxlc3RvbmUodWludDggbnVtYmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyIDwgbWlsZXN0b25lcy5sZW5ndGgpOwogICAgTWlsZXN0b25lIHN0b3JhZ2UgbWlsZXN0b25lID0gbWlsZXN0b25lc1tudW1iZXJdOwogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5zdWIobWlsZXN0b25lLnBlcmlvZCk7CgogICAgZGVsZXRlIG1pbGVzdG9uZXNbbnVtYmVyXTsKCiAgICBmb3IgKHVpbnQgaSA9IG51bWJlcjsgaSA8IG1pbGVzdG9uZXMubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgIG1pbGVzdG9uZXNbaV0gPSBtaWxlc3RvbmVzW2krMV07CiAgICB9CgogICAgbWlsZXN0b25lcy5sZW5ndGgtLTsKICB9CgogIGZ1bmN0aW9uIGNoYW5nZU1pbGVzdG9uZSh1aW50OCBudW1iZXIsIHVpbnQgcGVyaW9kLCB1aW50IGJvbnVzKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyIDwgbWlsZXN0b25lcy5sZW5ndGgpOwogICAgTWlsZXN0b25lIHN0b3JhZ2UgbWlsZXN0b25lID0gbWlsZXN0b25lc1tudW1iZXJdOwoKICAgIHRvdGFsUGVyaW9kID0gdG90YWxQZXJpb2Quc3ViKG1pbGVzdG9uZS5wZXJpb2QpOwoKICAgIG1pbGVzdG9uZS5wZXJpb2QgPSBwZXJpb2Q7CiAgICBtaWxlc3RvbmUuYm9udXMgPSBib251czsKCiAgICB0b3RhbFBlcmlvZCA9IHRvdGFsUGVyaW9kLmFkZChwZXJpb2QpOwogIH0KCiAgZnVuY3Rpb24gaW5zZXJ0TWlsZXN0b25lKHVpbnQ4IG51bWJlckFmdGVyLCB1aW50IHBlcmlvZCwgdWludCBib251cykgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG51bWJlckFmdGVyIDwgbWlsZXN0b25lcy5sZW5ndGgpOwoKICAgIHRvdGFsUGVyaW9kID0gdG90YWxQZXJpb2QuYWRkKHBlcmlvZCk7CgogICAgbWlsZXN0b25lcy5sZW5ndGgrKzsKCiAgICBmb3IgKHVpbnQgaSA9IG1pbGVzdG9uZXMubGVuZ3RoIC0gMjsgaSA+IG51bWJlckFmdGVyOyBpLS0pIHsKICAgICAgbWlsZXN0b25lc1tpICsgMV0gPSBtaWxlc3RvbmVzW2ldOwogICAgfQoKICAgIG1pbGVzdG9uZXNbbnVtYmVyQWZ0ZXIgKyAxXSA9IE1pbGVzdG9uZShwZXJpb2QsIGJvbnVzKTsKICB9CgogIGZ1bmN0aW9uIGNsZWFyTWlsZXN0b25lcygpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShtaWxlc3RvbmVzLmxlbmd0aCA+IDApOwogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbWlsZXN0b25lcy5sZW5ndGg7IGkrKykgewogICAgICBkZWxldGUgbWlsZXN0b25lc1tpXTsKICAgIH0KICAgIG1pbGVzdG9uZXMubGVuZ3RoIC09IG1pbGVzdG9uZXMubGVuZ3RoOwogICAgdG90YWxQZXJpb2QgPSAwOwogIH0KCiAgZnVuY3Rpb24gbGFzdFNhbGVEYXRlKHVpbnQgc3RhcnQpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgcmV0dXJuIHN0YXJ0ICsgdG90YWxQZXJpb2QgKiAxIGRheXM7CiAgfQoKICBmdW5jdGlvbiBjdXJyZW50TWlsZXN0b25lKHVpbnQgc3RhcnQpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgdWludCBwcmV2aW91c0RhdGUgPSBzdGFydDsKICAgIGZvciAodWludCBpID0gMDsgaSA8IG1pbGVzdG9uZXMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKG5vdyA+PSBwcmV2aW91c0RhdGUgJiYgbm93IDwgcHJldmlvdXNEYXRlICsgbWlsZXN0b25lc1tpXS5wZXJpb2QgKiAxIGRheXMpIHsKICAgICAgICByZXR1cm4gaTsKICAgICAgfQogICAgICBwcmV2aW91c0RhdGUgPSBwcmV2aW91c0RhdGUuYWRkKG1pbGVzdG9uZXNbaV0ucGVyaW9kICogMSBkYXlzKTsKICAgIH0KICAgIHJldmVydCgpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9NYWluc2FsZS5zb2wKCmNvbnRyYWN0IE1haW5zYWxlIGlzIFN0YWdlZENyb3dkc2FsZSwgUkVQVUNvbW1vblNhbGUgewoKICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyc1Rva2Vuc1dhbGxldDsKCiAgYWRkcmVzcyBwdWJsaWMgYWR2aXNvcnNUb2tlbnNXYWxsZXQ7CgogIGFkZHJlc3MgcHVibGljIGJvdW50eVRva2Vuc1dhbGxldDsKCiAgYWRkcmVzcyBwdWJsaWMgbG90dGVyeVRva2Vuc1dhbGxldDsKCiAgdWludCBwdWJsaWMgZm91bmRlcnNUb2tlbnNQZXJjZW50OwoKICB1aW50IHB1YmxpYyBhZHZpc29yc1Rva2Vuc1BlcmNlbnQ7CgogIHVpbnQgcHVibGljIGJvdW50eVRva2Vuc1BlcmNlbnQ7CgogIHVpbnQgcHVibGljIGxvdHRlcnlUb2tlbnNQZXJjZW50OwoKICBmdW5jdGlvbiBzZXRGb3VuZGVyc1Rva2Vuc1BlcmNlbnQodWludCBuZXdGb3VuZGVyc1Rva2Vuc1BlcmNlbnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZm91bmRlcnNUb2tlbnNQZXJjZW50ID0gbmV3Rm91bmRlcnNUb2tlbnNQZXJjZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0QWR2aXNvcnNUb2tlbnNQZXJjZW50KHVpbnQgbmV3QWR2aXNvcnNUb2tlbnNQZXJjZW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGFkdmlzb3JzVG9rZW5zUGVyY2VudCA9IG5ld0Fkdmlzb3JzVG9rZW5zUGVyY2VudDsKICB9CgogIGZ1bmN0aW9uIHNldEJvdW50eVRva2Vuc1BlcmNlbnQodWludCBuZXdCb3VudHlUb2tlbnNQZXJjZW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGJvdW50eVRva2Vuc1BlcmNlbnQgPSBuZXdCb3VudHlUb2tlbnNQZXJjZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0TG90dGVyeVRva2Vuc1BlcmNlbnQodWludCBuZXdMb3R0ZXJ5VG9rZW5zUGVyY2VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICBsb3R0ZXJ5VG9rZW5zUGVyY2VudCA9IG5ld0xvdHRlcnlUb2tlbnNQZXJjZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0Rm91bmRlcnNUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdGb3VuZGVyc1Rva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBmb3VuZGVyc1Rva2Vuc1dhbGxldCA9IG5ld0ZvdW5kZXJzVG9rZW5zV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gc2V0QWR2aXNvcnNUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdBZHZpc29yc1Rva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBhZHZpc29yc1Rva2Vuc1dhbGxldCA9IG5ld0Fkdmlzb3JzVG9rZW5zV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gc2V0Qm91bnR5VG9rZW5zV2FsbGV0KGFkZHJlc3MgbmV3Qm91bnR5VG9rZW5zV2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGJvdW50eVRva2Vuc1dhbGxldCA9IG5ld0JvdW50eVRva2Vuc1dhbGxldDsKICB9CgogIGZ1bmN0aW9uIHNldExvdHRlcnlUb2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdMb3R0ZXJ5VG9rZW5zV2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGxvdHRlcnlUb2tlbnNXYWxsZXQgPSBuZXdMb3R0ZXJ5VG9rZW5zV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQgX2ludmVzdGVkKSBpbnRlcm5hbCByZXR1cm5zKHVpbnQpIHsKICAgIHVpbnQgbWlsZXN0b25lSW5kZXggPSBjdXJyZW50TWlsZXN0b25lKHN0YXJ0KTsKICAgIE1pbGVzdG9uZSBzdG9yYWdlIG1pbGVzdG9uZSA9IG1pbGVzdG9uZXNbbWlsZXN0b25lSW5kZXhdOwogICAgdWludCB0b2tlbnMgPSBfaW52ZXN0ZWQubXVsKHByaWNlKS5kaXYoMSBldGhlcik7CiAgICB1aW50IHZhbHVlQm9udXNUb2tlbnMgPSBnZXRWYWx1ZUJvbnVzVG9rZW5zKHRva2VucywgX2ludmVzdGVkKTsKICAgIGlmIChtaWxlc3RvbmUuYm9udXMgPiAwKSB7CiAgICAgIHRva2VucyA9IHRva2Vucy5hZGQodG9rZW5zLm11bChtaWxlc3RvbmUuYm9udXMpLmRpdihwZXJjZW50UmF0ZSkpOwogICAgfQogICAgcmV0dXJuIHRva2Vucy5hZGQodmFsdWVCb251c1Rva2Vucyk7CiAgfQoKICBmdW5jdGlvbiBmaW5pc2goKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHVpbnQgc3VtbWFyeVRva2Vuc1BlcmNlbnQgPSBib3VudHlUb2tlbnNQZXJjZW50LmFkZChmb3VuZGVyc1Rva2Vuc1BlcmNlbnQpLmFkZChhZHZpc29yc1Rva2Vuc1BlcmNlbnQpLmFkZChsb3R0ZXJ5VG9rZW5zUGVyY2VudCk7CiAgICB1aW50IG1pbnRlZFRva2VucyA9IHRva2VuLnRvdGFsU3VwcGx5KCk7CiAgICB1aW50IGFsbFRva2VucyA9IG1pbnRlZFRva2Vucy5tdWwocGVyY2VudFJhdGUpLmRpdihwZXJjZW50UmF0ZS5zdWIoc3VtbWFyeVRva2Vuc1BlcmNlbnQpKTsKICAgIHVpbnQgZm91bmRlcnNUb2tlbnMgPSBhbGxUb2tlbnMubXVsKGZvdW5kZXJzVG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlKTsKICAgIHVpbnQgYWR2aXNvcnNUb2tlbnMgPSBhbGxUb2tlbnMubXVsKGFkdmlzb3JzVG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlKTsKICAgIHVpbnQgYm91bnR5VG9rZW5zID0gYWxsVG9rZW5zLm11bChib3VudHlUb2tlbnNQZXJjZW50KS5kaXYocGVyY2VudFJhdGUpOwogICAgdWludCBsb3R0ZXJ5VG9rZW5zID0gYWxsVG9rZW5zLm11bChsb3R0ZXJ5VG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlKTsKICAgIG1pbnRUb2tlbnMoZm91bmRlcnNUb2tlbnNXYWxsZXQsIGZvdW5kZXJzVG9rZW5zKTsKICAgIG1pbnRUb2tlbnMoYWR2aXNvcnNUb2tlbnNXYWxsZXQsIGFkdmlzb3JzVG9rZW5zKTsKICAgIG1pbnRUb2tlbnMoYm91bnR5VG9rZW5zV2FsbGV0LCBib3VudHlUb2tlbnMpOwogICAgbWludFRva2Vucyhsb3R0ZXJ5VG9rZW5zV2FsbGV0LCBsb3R0ZXJ5VG9rZW5zKTsKICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICB9CgogIGZ1bmN0aW9uIGVuZFNhbGVEYXRlKCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICByZXR1cm4gbGFzdFNhbGVEYXRlKHN0YXJ0KTsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvUHJlc2FsZS5zb2wKCmNvbnRyYWN0IFByZXNhbGUgaXMgTmV4dFNhbGVBZ2VudEZlYXR1cmUsIFN0YWdlZENyb3dkc2FsZSwgUkVQVUNvbW1vblNhbGUgewoKICBmdW5jdGlvbiBjYWxjdWxhdGVUb2tlbnModWludCBfaW52ZXN0ZWQpIGludGVybmFsIHJldHVybnModWludCkgewogICAgdWludCBtaWxlc3RvbmVJbmRleCA9IGN1cnJlbnRNaWxlc3RvbmUoc3RhcnQpOwogICAgTWlsZXN0b25lIHN0b3JhZ2UgbWlsZXN0b25lID0gbWlsZXN0b25lc1ttaWxlc3RvbmVJbmRleF07CiAgICB1aW50IHRva2VucyA9IF9pbnZlc3RlZC5tdWwocHJpY2UpLmRpdigxIGV0aGVyKTsKICAgIHVpbnQgdmFsdWVCb251c1Rva2VucyA9IGdldFZhbHVlQm9udXNUb2tlbnModG9rZW5zLCBfaW52ZXN0ZWQpOwogICAgaWYgKG1pbGVzdG9uZS5ib251cyA+IDApIHsKICAgICAgdG9rZW5zID0gdG9rZW5zLmFkZCh0b2tlbnMubXVsKG1pbGVzdG9uZS5ib251cykuZGl2KHBlcmNlbnRSYXRlKSk7CiAgICB9CiAgICByZXR1cm4gdG9rZW5zLmFkZCh2YWx1ZUJvbnVzVG9rZW5zKTsKICB9CgogIGZ1bmN0aW9uIGZpbmlzaCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgdG9rZW4uc2V0U2FsZUFnZW50KG5leHRTYWxlQWdlbnQpOwogIH0KCiAgZnVuY3Rpb24gZW5kU2FsZURhdGUoKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQpIHsKICAgIHJldHVybiBsYXN0U2FsZURhdGUoc3RhcnQpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9DbG9zZWRSb3VuZC5zb2wKCmNvbnRyYWN0IENsb3NlZFJvdW5kIGlzIE5leHRTYWxlQWdlbnRGZWF0dXJlLCBSRVBVQ29tbW9uU2FsZSB7CgogIHVpbnQgcHVibGljIG1heExpbWl0OyAKCiAgdWludCBwdWJsaWMgZW5kOwoKICBmdW5jdGlvbiBjYWxjdWxhdGVUb2tlbnModWludCBfaW52ZXN0ZWQpIGludGVybmFsIHJldHVybnModWludCkgewogICAgdWludCB0b2tlbnMgPSBfaW52ZXN0ZWQubXVsKHByaWNlKS5kaXYoMSBldGhlcik7CiAgICByZXR1cm4gdG9rZW5zLmFkZChnZXRWYWx1ZUJvbnVzVG9rZW5zKHRva2VucywgX2ludmVzdGVkKSk7CiAgfQoKICBmdW5jdGlvbiBzZXRNYXhMaW1pdCh1aW50IG5ld01heExpbWl0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIG1heExpbWl0ID0gbmV3TWF4TGltaXQ7CiAgfQoKICBmdW5jdGlvbiBzZXRFbmQodWludCBuZXdFbmQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZW5kID0gbmV3RW5kOwogIH0KCiAgZnVuY3Rpb24gZmluaXNoKCkgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlbi5zZXRTYWxlQWdlbnQobmV4dFNhbGVBZ2VudCk7CiAgfQoKICBmdW5jdGlvbiBmYWxsYmFjaygpIGludGVybmFsIHJldHVybnModWludCkgewogICAgcmVxdWlyZShtc2cudmFsdWUgPD0gbWF4TGltaXQpOwogICAgcmV0dXJuIHN1cGVyLmZhbGxiYWNrKCk7CiAgfQoKICBmdW5jdGlvbiBlbmRTYWxlRGF0ZSgpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgcmV0dXJuIGVuZDsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvQ29uZmlndXJhdG9yLnNvbAoKY29udHJhY3QgQ29uZmlndXJhdG9yIGlzIE93bmFibGUgewoKICBSRVBVVG9rZW4gcHVibGljIHRva2VuOwoKICBDbG9zZWRSb3VuZCBwdWJsaWMgY2xvc2VkUm91bmQ7CgogIFByZXNhbGUgcHVibGljIHByZXNhbGU7CgogIE1haW5zYWxlIHB1YmxpYyBtYWluc2FsZTsKCiAgRGV2V2FsbGV0IHB1YmxpYyBkZXZXYWxsZXQ7CgogIGZ1bmN0aW9uIGRlcGxveSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgdG9rZW4gPSBuZXcgUkVQVVRva2VuKCk7CiAgICBjbG9zZWRSb3VuZCA9IG5ldyBDbG9zZWRSb3VuZCgpOwogICAgcHJlc2FsZSA9IG5ldyBQcmVzYWxlKCk7CiAgICBtYWluc2FsZSA9IG5ldyBNYWluc2FsZSgpOwogICAgZGV2V2FsbGV0ID0gbmV3IERldldhbGxldCgpOwogICAgCiAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgICBwcmVzYWxlLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKICAgIG1haW5zYWxlLnRyYW5zZmVyT3duZXJzaGlwKG93bmVyKTsKIH0KCn0='.
	

]
