Class {
	#name : #SRT2770ad33f5798542de5de4bc8beae3fadb8de1e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2770ad33f5798542de5de4bc8beae3fadb8de1e5 >> base64 [
	^ 'Ly9pbXBvcnQgImRzLWF1dGgvYXV0aC5zb2wiOwpjb250cmFjdCBEU0F1dGhvcml0eSB7CiAgICBmdW5jdGlvbiBjYW5DYWxsKAogICAgYWRkcmVzcyBzcmMsIGFkZHJlc3MgZHN0LCBieXRlczQgc2lnCiAgICApIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwp9Cgpjb250cmFjdCBEU0F1dGhFdmVudHMgewogICAgZXZlbnQgTG9nU2V0QXV0aG9yaXR5IChhZGRyZXNzIGluZGV4ZWQgYXV0aG9yaXR5KTsKICAgIGV2ZW50IExvZ1NldE93bmVyICAgICAoYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKfQoKY29udHJhY3QgRFNBdXRoIGlzIERTQXV0aEV2ZW50cyB7CiAgICBEU0F1dGhvcml0eSAgcHVibGljICBhdXRob3JpdHk7CiAgICBhZGRyZXNzICAgICAgcHVibGljICBvd25lcjsKCiAgICBmdW5jdGlvbiBEU0F1dGgoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIExvZ1NldE93bmVyKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3Mgb3duZXJfKQogICAgYXV0aAogICAgewogICAgICAgIG93bmVyID0gb3duZXJfOwogICAgICAgIExvZ1NldE93bmVyKG93bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRBdXRob3JpdHkoRFNBdXRob3JpdHkgYXV0aG9yaXR5XykKICAgIGF1dGgKICAgIHsKICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHlfOwogICAgICAgIExvZ1NldEF1dGhvcml0eShhdXRob3JpdHkpOwogICAgfQoKICAgIG1vZGlmaWVyIGF1dGggewogICAgICAgIGFzc2VydChpc0F1dGhvcml6ZWQobXNnLnNlbmRlciwgbXNnLnNpZykpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gaXNBdXRob3JpemVkKGFkZHJlc3Mgc3JjLCBieXRlczQgc2lnKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHNyYyA9PSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoc3JjID09IG93bmVyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoYXV0aG9yaXR5ID09IERTQXV0aG9yaXR5KDApKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gYXV0aG9yaXR5LmNhbkNhbGwoc3JjLCB0aGlzLCBzaWcpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3NlcnQoYm9vbCB4KSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKCF4KSB0aHJvdzsKICAgIH0KfQoKLy9pbXBvcnQgImRzLW5vdGUvbm90ZS5zb2wiOwpjb250cmFjdCBEU05vdGUgewogICAgZXZlbnQgTG9nTm90ZSgKICAgIGJ5dGVzNCAgIGluZGV4ZWQgIHNpZywKICAgIGFkZHJlc3MgIGluZGV4ZWQgIGd1eSwKICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGZvbywKICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGJhciwKICAgIHVpbnQgICAgICAgIHdhZCwKICAgIGJ5dGVzICAgICAgICAgICAgIGZheAogICAgKSBhbm9ueW1vdXM7CgogICAgbW9kaWZpZXIgbm90ZSB7CiAgICAgICAgYnl0ZXMzMiBmb287CiAgICAgICAgYnl0ZXMzMiBiYXI7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICBmb28gOj0gY2FsbGRhdGFsb2FkKDQpCiAgICAgICAgYmFyIDo9IGNhbGxkYXRhbG9hZCgzNikKICAgICAgICB9CgogICAgICAgIExvZ05vdGUobXNnLnNpZywgbXNnLnNlbmRlciwgZm9vLCBiYXIsIG1zZy52YWx1ZSwgbXNnLmRhdGEpOwoKICAgICAgICBfOwogICAgfQp9CgoKLy9pbXBvcnQgImRzLW1hdGgvbWF0aC5zb2wiOwpjb250cmFjdCBEU01hdGggewoKICAgIC8qCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucwogICAgICovCgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4IC0geSkgPD0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsKICAgICAgICB6ID0geCAqIHk7CiAgICAgICAgYXNzZXJ0KHggPT0gMCB8fCB6IC8geCA9PSB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHogPSB4IC8geTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW4odWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIG1heCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5OwogICAgfQoKICAgIC8qCiAgICB1aW50MTI4IGZ1bmN0aW9ucyAoaCBpcyBmb3IgaGFsZikKICAgICAqLwoKCiAgICBmdW5jdGlvbiBoYWRkKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gaHN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0geCAtIHkpIDw9IHgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSB4ICogeTsKICAgICAgICBhc3NlcnQoeCA9PSAwIHx8IHogLyB4ID09IHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSB4IC8geTsKICAgIH0KCiAgICBmdW5jdGlvbiBobWluKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICByZXR1cm4geCA8PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBobWF4KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CgoKICAgIC8qCiAgICBpbnQyNTYgZnVuY3Rpb25zCiAgICAgKi8KCiAgICBmdW5jdGlvbiBpbWluKGludDI1NiB4LCBpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoaW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA8PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBpbWF4KGludDI1NiB4LCBpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoaW50MjU2IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CgogICAgLyoKICAgIFdBRCBtYXRoCiAgICAgKi8KCiAgICB1aW50MTI4IGNvbnN0YW50IFdBRCA9IDEwICoqIDE4OwoKICAgIGZ1bmN0aW9uIHdhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3c3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhzdWIoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gd211bCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgeiA9IGNhc3QoKHVpbnQyNTYoeCkgKiB5ICsgV0FEIC8gMikgLyBXQUQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogV0FEICsgeSAvIDIpIC8geSk7CiAgICB9CgogICAgZnVuY3Rpb24gd21pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWluKHgsIHkpOwogICAgfQogICAgZnVuY3Rpb24gd21heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBobWF4KHgsIHkpOwogICAgfQoKICAgIC8qCiAgICBSQVkgbWF0aAogICAgICovCgogICAgdWludDEyOCBjb25zdGFudCBSQVkgPSAxMCAqKiAyNzsKCiAgICBmdW5jdGlvbiByYWRkKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7CiAgICAgICAgcmV0dXJuIGhhZGQoeCwgeSk7CiAgICB9CgogICAgZnVuY3Rpb24gcnN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgewogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgewogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogeSArIFJBWSAvIDIpIC8gUkFZKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZGl2KHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsKICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIFJBWSArIHkgLyAyKSAvIHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJwb3codWludDEyOCB4LCB1aW50NjQgbikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgLy8gVGhpcyBmYW1vdXMgYWxnb3JpdGhtIGlzIGNhbGxlZCAiZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmciCiAgICAgICAgLy8gYW5kIGNhbGN1bGF0ZXMgeF5uIHdpdGggeCBhcyBmaXhlZC1wb2ludCBhbmQgbiBhcyByZWd1bGFyIHVuc2lnbmVkLgogICAgICAgIC8vCiAgICAgICAgLy8gSXQncyBPKGxvZyBuKSwgaW5zdGVhZCBvZiBPKG4pIGZvciBuYWl2ZSByZXBlYXRlZCBtdWx0aXBsaWNhdGlvbi4KICAgICAgICAvLwogICAgICAgIC8vIFRoZXNlIGZhY3RzIGFyZSB3aHkgaXQgd29ya3M6CiAgICAgICAgLy8KICAgICAgICAvLyAgSWYgbiBpcyBldmVuLCB0aGVuIHhebiA9ICh4XjIpXihuLzIpLgogICAgICAgIC8vICBJZiBuIGlzIG9kZCwgIHRoZW4geF5uID0geCAqIHheKG4tMSksCiAgICAgICAgLy8gICBhbmQgYXBwbHlpbmcgdGhlIGVxdWF0aW9uIGZvciBldmVuIHggZ2l2ZXMKICAgICAgICAvLyAgICB4Xm4gPSB4ICogKHheMileKChuLTEpIC8gMikuCiAgICAgICAgLy8KICAgICAgICAvLyAgQWxzbywgRVZNIGRpdmlzaW9uIGlzIGZsb29yaW5nIGFuZAogICAgICAgIC8vICAgIGZsb29yWyhuLTEpIC8gMl0gPSBmbG9vcltuIC8gMl0uCgogICAgICAgIHogPSBuICUgMiAhPSAwID8geCA6IFJBWTsKCiAgICAgICAgZm9yIChuIC89IDI7IG4gIT0gMDsgbiAvPSAyKSB7CiAgICAgICAgICAgIHggPSBybXVsKHgsIHgpOwoKICAgICAgICAgICAgaWYgKG4gJSAyICE9IDApIHsKICAgICAgICAgICAgICAgIHogPSBybXVsKHosIHgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJtaW4odWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsKICAgIH0KICAgIGZ1bmN0aW9uIHJtYXgodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjgpIHsKICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYXN0KHVpbnQyNTYgeCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7CiAgICAgICAgYXNzZXJ0KCh6ID0gdWludDEyOCh4KSkgPT0geCk7CiAgICB9Cgp9CgovL2ltcG9ydCAiZXJjMjAvZXJjMjAuc29sIjsKY29udHJhY3QgRVJDMjAgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50IHN1cHBseSk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgd2hvICkgY29uc3RhbnQgcmV0dXJucyAodWludCB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoIGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlciApIGNvbnN0YW50IHJldHVybnMgKHVpbnQgX2FsbG93YW5jZSk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogICAgZnVuY3Rpb24gYXBwcm92ZSggYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlICkgcmV0dXJucyAoYm9vbCBvayk7CgogICAgZXZlbnQgVHJhbnNmZXIoIGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoIGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgoKCi8vaW1wb3J0ICJkcy10b2tlbi9iYXNlLnNvbCI7CmNvbnRyYWN0IERTVG9rZW5CYXNlIGlzIEVSQzIwLCBEU01hdGggewogICAgdWludDI1NiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N1cHBseTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgICAgICAgICAgICAgICAgICAgICAgIF9iYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgIF9hcHByb3ZhbHM7CgogICAgZnVuY3Rpb24gRFNUb2tlbkJhc2UodWludDI1NiBzdXBwbHkpIHsKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdXBwbHk7CiAgICAgICAgX3N1cHBseSA9IHN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3N1cHBseTsKICAgIH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHNyYykgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfYmFsYW5jZXNbc3JjXTsKICAgIH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIHNyYywgYWRkcmVzcyBndXkpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX2FwcHJvdmFsc1tzcmNdW2d1eV07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBkc3QsIHVpbnQgd2FkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYXNzZXJ0KF9iYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB3YWQpOwoKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWIoX2JhbGFuY2VzW21zZy5zZW5kZXJdLCB3YWQpOwogICAgICAgIF9iYWxhbmNlc1tkc3RdID0gYWRkKF9iYWxhbmNlc1tkc3RdLCB3YWQpOwoKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBkc3QsIHdhZCk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIHNyYywgYWRkcmVzcyBkc3QsIHVpbnQgd2FkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYXNzZXJ0KF9iYWxhbmNlc1tzcmNdID49IHdhZCk7CiAgICAgICAgYXNzZXJ0KF9hcHByb3ZhbHNbc3JjXVttc2cuc2VuZGVyXSA+PSB3YWQpOwoKICAgICAgICBfYXBwcm92YWxzW3NyY11bbXNnLnNlbmRlcl0gPSBzdWIoX2FwcHJvdmFsc1tzcmNdW21zZy5zZW5kZXJdLCB3YWQpOwogICAgICAgIF9iYWxhbmNlc1tzcmNdID0gc3ViKF9iYWxhbmNlc1tzcmNdLCB3YWQpOwogICAgICAgIF9iYWxhbmNlc1tkc3RdID0gYWRkKF9iYWxhbmNlc1tkc3RdLCB3YWQpOwoKICAgICAgICBUcmFuc2ZlcihzcmMsIGRzdCwgd2FkKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIGd1eSwgdWludDI1NiB3YWQpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBfYXBwcm92YWxzW21zZy5zZW5kZXJdW2d1eV0gPSB3YWQ7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIGd1eSwgd2FkKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cgp9CgoKLy9pbXBvcnQgImRzLXN0b3Avc3RvcC5zb2wiOwpjb250cmFjdCBEU1N0b3AgaXMgRFNBdXRoLCBEU05vdGUgewoKICAgIGJvb2wgcHVibGljIHN0b3BwZWQ7CgogICAgbW9kaWZpZXIgc3RvcHBhYmxlIHsKICAgICAgICBhc3NlcnQgKCFzdG9wcGVkKTsKICAgICAgICBfOwogICAgfQogICAgZnVuY3Rpb24gc3RvcCgpIGF1dGggbm90ZSB7CiAgICAgICAgc3RvcHBlZCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBzdGFydCgpIGF1dGggbm90ZSB7CiAgICAgICAgc3RvcHBlZCA9IGZhbHNlOwogICAgfQoKfQoKCi8vaW1wb3J0ICJkcy10b2tlbi90b2tlbi5zb2wiOwpjb250cmFjdCBEU1Rva2VuIGlzIERTVG9rZW5CYXNlKDApLCBEU1N0b3AgewoKICAgIGJ5dGVzMzIgIHB1YmxpYyAgc3ltYm9sOwogICAgdWludDI1NiAgcHVibGljICBkZWNpbWFscyA9IDE4OyAvLyBzdGFuZGFyZCB0b2tlbiBwcmVjaXNpb24uIG92ZXJyaWRlIHRvIGN1c3RvbWl6ZQogICAgYWRkcmVzcyAgcHVibGljICBnZW5lcmF0b3I7CgogICAgbW9kaWZpZXIgb25seUdlbmVyYXRvciB7CiAgICAgICAgaWYobXNnLnNlbmRlciE9Z2VuZXJhdG9yKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIERTVG9rZW4oYnl0ZXMzMiBzeW1ib2xfKSB7CiAgICAgICAgc3ltYm9sID0gc3ltYm9sXzsKICAgICAgICBnZW5lcmF0b3I9bXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIGRzdCwgdWludCB3YWQpIHN0b3BwYWJsZSBub3RlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoZHN0LCB3YWQpOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgYWRkcmVzcyBzcmMsIGFkZHJlc3MgZHN0LCB1aW50IHdhZAogICAgKSBzdG9wcGFibGUgbm90ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShzcmMsIGRzdCwgd2FkKTsKICAgIH0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBndXksIHVpbnQgd2FkKSBzdG9wcGFibGUgbm90ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLmFwcHJvdmUoZ3V5LCB3YWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHB1c2goYWRkcmVzcyBkc3QsIHVpbnQxMjggd2FkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyKGRzdCwgd2FkKTsKICAgIH0KICAgIGZ1bmN0aW9uIHB1bGwoYWRkcmVzcyBzcmMsIHVpbnQxMjggd2FkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyRnJvbShzcmMsIG1zZy5zZW5kZXIsIHdhZCk7CiAgICB9CgogICAgZnVuY3Rpb24gbWludCh1aW50MTI4IHdhZCkgYXV0aCBzdG9wcGFibGUgbm90ZSB7CiAgICAgICAgX2JhbGFuY2VzW21zZy5zZW5kZXJdID0gYWRkKF9iYWxhbmNlc1ttc2cuc2VuZGVyXSwgd2FkKTsKICAgICAgICBfc3VwcGx5ID0gYWRkKF9zdXBwbHksIHdhZCk7CiAgICB9CiAgICBmdW5jdGlvbiBidXJuKHVpbnQxMjggd2FkKSBhdXRoIHN0b3BwYWJsZSBub3RlIHsKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWIoX2JhbGFuY2VzW21zZy5zZW5kZXJdLCB3YWQpOwogICAgICAgIF9zdXBwbHkgPSBzdWIoX3N1cHBseSwgd2FkKTsKICAgIH0KCiAgICAvLyBvd25lciBjYW4gdHJhbnNmZXIgdG9rZW4gZXZlbiBzdG9wLAogICAgZnVuY3Rpb24gZ2VuZXJhdG9yVHJhbnNmZXIoYWRkcmVzcyBkc3QsIHVpbnQgd2FkKSBvbmx5R2VuZXJhdG9yIG5vdGUgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2Zlcihkc3QsIHdhZCk7CiAgICB9CgogICAgLy8gT3B0aW9uYWwgdG9rZW4gbmFtZQoKICAgIGJ5dGVzMzIgICBwdWJsaWMgIG5hbWUgPSAiIjsKCiAgICBmdW5jdGlvbiBzZXROYW1lKGJ5dGVzMzIgbmFtZV8pIGF1dGggewogICAgICAgIG5hbWUgPSBuYW1lXzsKICAgIH0KCn0='.
	

]
