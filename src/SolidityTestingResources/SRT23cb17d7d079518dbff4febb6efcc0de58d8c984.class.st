Class {
	#name : #SRT23cb17d7d079518dbff4febb6efcc0de58d8c984,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23cb17d7d079518dbff4febb6efcc0de58d8c984 >> base64 [
	^ 'Ly9FUkMyMCBUb2tlbiBjdXN0b21pc2VkIGZvciB0cmF2ZWxjb2lucwpwcmFnbWEgc29saWRpdHkgXjAuNC4yOwpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0KCmNvbnRyYWN0IHRva2VuIHsKICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1RSViAwLjEnOwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQWxsb2NhdGUoYWRkcmVzcyBmcm9tLGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsdWludCBwcmljZSxib29sIGVxdWFscyk7CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiB0b2tlbigKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIHRva2VuU3ltYm9sCiAgICAgICAgKSB7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsVW5pdHM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgfQoKICAgIC8qIFNlbmQgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgewogICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgfQoKICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgaW4geW91ciBiZWhhbGYgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyBfIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7ICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBUaGlzIHVubmFtZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIHNvbWVvbmUgdHJpZXMgdG8gc2VuZCBldGhlciB0byBpdCAqLwogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm93OyAgICAgLy8gUHJldmVudHMgYWNjaWRlbnRhbCBzZW5kaW5nIG9mIGV0aGVyCiAgICB9Cn0KCmNvbnRyYWN0IFRyYXZlbENvaW5Ub2tlbiBpcyBvd25lZCwgdG9rZW4gewoKICAgIHVpbnQyNTYgcHVibGljIHNlbGxQcmljZTsKICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOwoKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CiAgICBtYXBwaW5nKGFkZHJlc3M9PnVpbnQpIHB1YmxpYyByZXdhcmRQb2ludHM7CiAgICBtYXBwaW5nKGFkZHJlc3M9PmJvb2wpIHB1YmxpYyBvbmVUaW1lVGlja2V0czsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIG9uZVRpbWVTb2xkOwogICAgYWRkcmVzc1tdIHB1YmxpYyBPTkVUSU1FU09MRDsKCgogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwoKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgaW5pdGlhbFN1cHBseSA9IDIwMDAwMCAqIDEwKioxNjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFsVW5pdHMgPSAxNjsKICAgIHN0cmluZyBwdWJsaWMgdG9rZW5OYW1lID0gIlRyYXZlbENvaW4iOwogICAgc3RyaW5nIHB1YmxpYyB0b2tlblN5bWJvbCA9ICJUUlYiOwogICAgZnVuY3Rpb24gVHJhdmVsQ29pblRva2VuKCkgdG9rZW4gKGluaXRpYWxTdXBwbHksIHRva2VuTmFtZSwgZGVjaW1hbFVuaXRzLCB0b2tlblN5bWJvbCkge30KCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSB0aHJvdzsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZnJvemVuCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgICAgIGlmKHRpY2tldF9hZGRyZXNzX2FkZGVkW190b10pewogICAgICAgICAgICBpZihfdmFsdWU+PXRpY2tldHNbX3RvXS5wcmljZSl7CiAgICAgICAgICAgICAgICBpZihvbmVUaW1lU29sZFtfdG9dKSB0aHJvdzsKICAgICAgICAgICAgICAgIGlmKG9uZVRpbWVUaWNrZXRzW190b10pewogICAgICAgICAgICAgICAgICAgIG9uZVRpbWVTb2xkW190b10gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIE9ORVRJTUVTT0xELnB1c2goX3RvKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFsbG9jYXRlVGlja2V0KG1zZy5zZW5kZXIsX3RvKTsKICAgICAgICAgICAgICAgIHJld2FyZFBvaW50c1ttc2cuc2VuZGVyXSs9dGlja2V0c1tfdG9dLnJld2FyZF9wdHM7CiAgICAgICAgICAgICAgICBBbGxvY2F0ZShtc2cuc2VuZGVyLF90byxfdmFsdWUsdGlja2V0c1tfdG9dLnByaWNlLF92YWx1ZT49dGlja2V0c1tfdG9dLnByaWNlKTsKICAgICAgICAgICAgICAgIC8vdGhpcyBBbGxvY2F0ZSBldmVudCBpcyBhIGN1c3RvbWlzZWQgdGVzdAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W19mcm9tXSkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZnJvemVuCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCBtaW50ZWRBbW91bnQpOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIHRhcmdldCwgbWludGVkQW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgb25seU93bmVyIHsKICAgICAgICBmcm96ZW5BY2NvdW50W3RhcmdldF0gPSBmcmVlemU7CiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgb25seU93bmVyIHsKICAgICAgICBzZWxsUHJpY2UgPSBuZXdTZWxsUHJpY2U7CiAgICAgICAgYnV5UHJpY2UgPSBuZXdCdXlQcmljZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVzIHRoZSBhbW91bnQKICAgICAgICBpZiAoYmFsYW5jZU9mW3RoaXNdIDwgYW1vdW50KSB0aHJvdzsgICAgICAgICAgICAgICAvLyBjaGVja3MgaWYgaXQgaGFzIGVub3VnaCB0byBzZWxsCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICAgIGJhbGFuY2VPZlt0aGlzXSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSBhbiBldmVudCByZWZsZWN0aW5nIHRoZSBjaGFuZ2UKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxsKHVpbnQyNTYgYW1vdW50KSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IGFtb3VudCApIHRocm93OyAgICAgICAgLy8gY2hlY2tzIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCB0byBzZWxsCiAgICAgICAgYmFsYW5jZU9mW3RoaXNdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIG93bmVyJ3MgYmFsYW5jZQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyB0aGUgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGFtb3VudCAqIHNlbGxQcmljZSkpIHsgICAgICAgIC8vIHNlbmRzIGV0aGVyIHRvIHRoZSBzZWxsZXIuIEl0J3MgaW1wb3J0YW50CiAgICAgICAgICAgIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gZG8gdGhpcyBsYXN0IHRvIGF2b2lkIHJlY3Vyc2lvbiBhdHRhY2tzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgYW1vdW50KTsgICAgICAgICAgICAvLyBleGVjdXRlcyBhbiBldmVudCByZWZsZWN0aW5nIG9uIHRoZSBjaGFuZ2UKICAgICAgICB9CiAgICB9CgogICAgLy9MYXZpJ3MgYWRkaXRpb25hbCBkQXBwIGNvZGUgc3RhcnQKICAgIHN0cnVjdCB0aWNrZXR7CiAgICAgICAgdWludCBwcmljZTsKICAgICAgICAvLyBieXRlczMyIGRlc3RpbmF0aW9uOwogICAgICAgIC8vIGJ5dGVzMzIgc3RhcnRpbmdfcG9pbnQ7CiAgICAgICAgYWRkcmVzcyBfY29tcGFueV9hZGRyOwogICAgICAgIC8vIHVpbnQgdGlja2V0X25vOwogICAgICAgIC8vIGJ5dGVzMzIgdGlja2V0X25hbWU7CiAgICAgICAgLy8gYnl0ZXMzMiB0aW1lczsKICAgICAgICAvLyB1aW50IGxhbmRfdGltZTsKICAgICAgICAvLyB1aW50IHRvcHVwOwogICAgICAgIHVpbnQgcmV3YXJkX3B0czsKICAgICAgICAvLyB1aW50IGV4cHJpcmF0aW9uX3RpbWU7CiAgICAgICAgLy8gYnl0ZXMzMiBwcm9tb19ubzsKICAgICAgICAvLyBieXRlczMyIGluc3VyYW5jZV9ubzsKICAgICAgICAvLyBieXRlczMyIGNhdGVnb3J5OwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcz0+dGlja2V0KSBwdWJsaWMgdGlja2V0czsKICAgIG1hcHBpbmcoYWRkcmVzcz0+Ym9vbCkgcHVibGljIHRpY2tldF9hZGRyZXNzX2FkZGVkOwogICAgbWFwcGluZyhhZGRyZXNzPT5hZGRyZXNzW10pIHB1YmxpYyBjdXN0b21lcl90aWNrZXRzOwogICAgYWRkcmVzc1tdIHB1YmxpYyB0aWNrZXRfYWRkcmVzc2VzOwoKICAgIGZ1bmN0aW9uIGFkZE5ld1RpY2tldCgKICAgICAgICAvLyBieXRlczMyIGNhdGVnb3J5LAogICAgICAgIGFkZHJlc3MgdGlja2V0X2FkZHJlc3MsCiAgICAgICAgdWludCBwcmljZSwKICAgICAgICAvLyBieXRlczMyIHRvLAogICAgICAgIC8vIGJ5dGVzMzIgZnJvbSwKICAgICAgICAvLyB1aW50IHRpY2tldF9ubywKICAgICAgICAvLyBieXRlczMyIHRpY2tldF9uYW1lLAogICAgICAgIC8vIGJ5dGVzMzIgdGltZXMsCiAgICAgICAgLy8gdWludCBsYW5kX3RpbWUsCiAgICAgICAgLy8gdWludCB0b3B1cCwKICAgICAgICB1aW50IHJld2FyZF9wdHMsCiAgICAgICAgYm9vbCBvbmVUaW1lCiAgICAgICAgLy8gdWludCBleHByaXJhdGlvbl90aW1lLAogICAgICAgIC8vIGJ5dGVzMzIgcHJvbW9fbm8sCiAgICAgICAgLy8gYnl0ZXMzMiBpbnN1cmFuY2Vfbm8KICAgICAgICApCiAgICB7CiAgICAgICAgaWYodGlja2V0X2FkZHJlc3NfYWRkZWRbdGlja2V0X2FkZHJlc3NdKSB0aHJvdzsKICAgICAgICB0aWNrZXQgbWVtb3J5IG5ld1RpY2tldDsKICAgICAgICAvLyBuZXdUaWNrZXQuY2F0ZWdvcnkgPSBjYXRlZ29yeTsKICAgICAgICBuZXdUaWNrZXQucHJpY2UgPSBwcmljZTsKICAgICAgICAvLyBuZXdUaWNrZXQuZGVzdGluYXRpb24gPSB0bzsKICAgICAgICAvLyBuZXdUaWNrZXQuc3RhcnRpbmdfcG9pbnQgPSBmcm9tOwogICAgICAgIG5ld1RpY2tldC5fY29tcGFueV9hZGRyID0gdGlja2V0X2FkZHJlc3M7CiAgICAgICAgLy8gbmV3VGlja2V0LnRpY2tldF9ubyA9IHRpY2tldF9ubzsKICAgICAgICAvLyBuZXdUaWNrZXQudGlja2V0X25hbWUgPSB0aWNrZXRfbmFtZTsKICAgICAgICAvLyBuZXdUaWNrZXQudGltZXMgPSB0aW1lczsKICAgICAgICAvLyBuZXdUaWNrZXQubGFuZF90aW1lID0gbGFuZF90aW1lOwogICAgICAgIC8vIG5ld1RpY2tldC50b3B1cCA9IHRvcHVwOwogICAgICAgIG5ld1RpY2tldC5yZXdhcmRfcHRzID0gcmV3YXJkX3B0czsKICAgICAgICBpZihvbmVUaW1lKQogICAgICAgICAgICBvbmVUaW1lVGlja2V0c1t0aWNrZXRfYWRkcmVzc10gPSB0cnVlOwogICAgICAgIC8vIG5ld1RpY2tldC5leHByaXJhdGlvbl90aW1lID0gZXhwcmlyYXRpb25fdGltZTsKICAgICAgICAvLyBuZXdUaWNrZXQucHJvbW9fbm8gPSBwcm9tb19ubzsKICAgICAgICAvLyBuZXdUaWNrZXQuaW5zdXJhbmNlX25vID0gaW5zdXJhbmNlX25vOwogICAgICAgIHRpY2tldHNbdGlja2V0X2FkZHJlc3NdID0gbmV3VGlja2V0OwogICAgICAgIHRpY2tldF9hZGRyZXNzX2FkZGVkW3RpY2tldF9hZGRyZXNzXSA9IHRydWU7CiAgICAgICAgdGlja2V0X2FkZHJlc3Nlcy5wdXNoKHRpY2tldF9hZGRyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRpY2tldChhZGRyZXNzIGN1c3RvbWVyX2FkZHIsYWRkcmVzcyB0aWNrZXRfYWRkcikgaW50ZXJuYWwgewogICAgICAgIGN1c3RvbWVyX3RpY2tldHNbY3VzdG9tZXJfYWRkcl0ucHVzaCh0aWNrZXRfYWRkcik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWxsVGlja2V0cygpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3NbXSx1aW50W10sdWludFtdLGJvb2xbXSkKICAgIHsKICAgICAgICBhZGRyZXNzW10gbWVtb3J5IHRja3MgPSB0aWNrZXRfYWRkcmVzc2VzOwogICAgICAgIHVpbnQgbGVuZ3RoID0gdGNrcy5sZW5ndGg7CgogICAgICAgIGFkZHJlc3NbXSBtZW1vcnkgYWRkcnMgPSBuZXcgYWRkcmVzc1tdKGxlbmd0aCk7CiAgICAgICAgdWludFtdIG1lbW9yeSBwcmljZXMgPSBuZXcgdWludFtdKGxlbmd0aCk7CiAgICAgICAgdWludFtdIG1lbW9yeSBwb2ludHMgPSBuZXcgdWludFtdKGxlbmd0aCk7CiAgICAgICAgYm9vbFtdIG1lbW9yeSBPVCA9IG5ldyBib29sW10obGVuZ3RoKTsKICAgICAgICBmb3IodWludCBpID0gMDtpPGxlbmd0aDtpKyspewogICAgICAgICAgICBhZGRyc1tpXSA9IHRja3NbaV07CiAgICAgICAgICAgIHByaWNlc1tpXSA9IHRpY2tldHNbdGNrc1tpXV0ucHJpY2U7CiAgICAgICAgICAgIHBvaW50c1tpXSA9IHRpY2tldHNbdGNrc1tpXV0ucmV3YXJkX3B0czsKICAgICAgICAgICAgT1RbaV0gPSBvbmVUaW1lVGlja2V0c1t0Y2tzW2ldXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChhZGRycyxwcmljZXMscG9pbnRzLE9UKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRPTkVUSU1FU09MRCgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3NbXSl7CiAgICAgICAgcmV0dXJuIE9ORVRJTUVTT0xEOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE15VGlja2V0QWRkcmVzc2VzKGFkZHJlc3MgYykgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzc1tdKXsKICAgICAgICByZXR1cm4gKGN1c3RvbWVyX3RpY2tldHNbY10pOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVGlja2V0KGFkZHJlc3MgX3RvLGFkZHJlc3MgX3QpewogICAgICAgIGFkZHJlc3NbXSBtZW1vcnkgbXlUaWNrZXRzID0gbmV3IGFkZHJlc3NbXShjdXN0b21lcl90aWNrZXRzW21zZy5zZW5kZXJdLmxlbmd0aCk7CiAgICAgICAgYm9vbCBkb25lX29uY2UgPSBmYWxzZTsKICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IGN1c3RvbWVyX3RpY2tldHNbbXNnLnNlbmRlcl0ubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGlmKGN1c3RvbWVyX3RpY2tldHNbbXNnLnNlbmRlcl1baV09PV90JiYhZG9uZV9vbmNlKXsKICAgICAgICAgICAgICAgIGRvbmVfb25jZSA9IHRydWU7CiAgICAgICAgICAgICAgICBhbGxvY2F0ZVRpY2tldChfdG8sX3QpOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbXlUaWNrZXRzW2ldID0gKGN1c3RvbWVyX3RpY2tldHNbbXNnLnNlbmRlcl1baV0pOwogICAgICAgIH0KICAgICAgICBjdXN0b21lcl90aWNrZXRzW21zZy5zZW5kZXJdID0gbXlUaWNrZXRzOwogICAgfQp9'.
	

]
