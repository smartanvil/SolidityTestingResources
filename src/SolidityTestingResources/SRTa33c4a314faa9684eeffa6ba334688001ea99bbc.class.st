Class {
	#name : #SRTa33c4a314faa9684eeffa6ba334688001ea99bbc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa33c4a314faa9684eeffa6ba334688001ea99bbc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBQaG9lbml4IHsKICAgIC8vIElmIHJvdW5kIGxhc3QgbW9yZSB0aGFuIGEgeWVhciAtIGNhbmNlbCBpcyBhY3RpdmF0ZWQKICAgIHVpbnQgcHJpdmF0ZSBNQVhfUk9VTkRfVElNRSA9IDM2NSBkYXlzOwogICAgCiAgICB1aW50IHByaXZhdGUgdG90YWxDb2xsZWN0ZWQ7CiAgICB1aW50IHByaXZhdGUgY3VycmVudFJvdW5kOwogICAgdWludCBwcml2YXRlIGN1cnJlbnRSb3VuZENvbGxlY3RlZDsKICAgIHVpbnQgcHJpdmF0ZSBwcmV2TGltaXQ7CiAgICB1aW50IHByaXZhdGUgY3VycmVudExpbWl0OwogICAgdWludCBwcml2YXRlIGN1cnJlbnRSb3VuZFN0YXJ0VGltZTsKCiAgICAvLyBUaGF0IHN0cnVjdHVyZSBkZXNjcmliZXMgY3VycmVudCB1c2VyIEFjY291bnQgICAgCiAgICAvLyBtb25leU5ldyAtIGludmVzdGVkIG1vbmV5IGluIGN1cnJlbnRSb3VuZAogICAgLy8gbW9uZXlIaWRkZW4gLSBpbnZlc3RlZCBpbiBwcmV2aW91cyByb3VuZCBhbmQgbm90IHByb2ZpdCB5ZXQKICAgIC8vIHByb2ZpdFRvdGFsIC0gdG90YWwgcHJvZml0IG9mIHVzZXIgYWNjb3VudCAoaXQgbmV2ZXIgZGVjcmVhc2VzKQogICAgLy8gcHJvZml0VGFrZW4gLSBwcm9maXQgdGFrZW4gYnkgdXNlcgogICAgLy8gbGFzdFVzZXJVcGRhdGVSb3VuZCAtIGxhc3Qgcm91bmQgd2hlbiBhY2NvdW50IHdhcyB1cGRhdGVkCiAgICBzdHJ1Y3QgQWNjb3VudCB7CiAgICAgICAgdWludCBtb25leU5ldzsKICAgICAgICB1aW50IG1vbmV5SGlkZGVuOwogICAgICAgIHVpbnQgcHJvZml0VG90YWw7CiAgICAgICAgdWludCBwcm9maXRUYWtlbjsKCiAgICAgICAgdWludCBsYXN0VXNlclVwZGF0ZVJvdW5kOwogICAgfQogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEFjY291bnQpIHByaXZhdGUgYWNjb3VudHM7CgoKICAgIGZ1bmN0aW9uIFBob2VuaXgoKSBwdWJsaWMgewogICAgICAgIHRvdGFsQ29sbGVjdGVkID0gMDsKICAgICAgICBjdXJyZW50Um91bmQgPSAwOwogICAgICAgIGN1cnJlbnRSb3VuZENvbGxlY3RlZCA9IDA7CiAgICAgICAgcHJldkxpbWl0ID0gMDsKICAgICAgICBjdXJyZW50TGltaXQgPSAxMDBlMTg7CiAgICAgICAgY3VycmVudFJvdW5kU3RhcnRUaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgfQogICAgCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGluY3JlbWVudHMgcm91bmQgdG8gbmV4dDoKICAgIC8vIC0gaXQgc2V0cyBuZXcgY3VycmVudExpbWl0IChyb3VuZCl1c2luZyBzZXF1ZW5jZToKICAgIC8vICAgICAgMTAwZTE4LCAyMDBlMTgsIDQgKiBjdXJyZW50TEltaXQgLSAyICogcHJldkxpbWl0CiAgICBmdW5jdGlvbiBpdGVyYXRlVG9OZXh0Um91bmQoKSBwcml2YXRlIHsKICAgICAgICBjdXJyZW50Um91bmQrKzsKICAgICAgICB1aW50IHRlbXBjdXJyZW50TGltaXQgPSBjdXJyZW50TGltaXQ7CiAgICAgICAgCiAgICAgICAgaWYoY3VycmVudFJvdW5kID09IDEpIHsKICAgICAgICAgICAgY3VycmVudExpbWl0ID0gMjAwZTE4OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgY3VycmVudExpbWl0ID0gNCAqIGN1cnJlbnRMaW1pdCAtIDIgKiBwcmV2TGltaXQ7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHByZXZMaW1pdCA9IHRlbXBjdXJyZW50TGltaXQ7CiAgICAgICAgY3VycmVudFJvdW5kU3RhcnRUaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIGN1cnJlbnRSb3VuZENvbGxlY3RlZCA9IDA7CiAgICB9CiAgICAKICAgIC8vIFRoYXQgZnVuY3Rpb24gY2FsY3VsYXRlcyBwcm9maXQgdXBkYXRlIGZvciB1c2VyCiAgICAvLyAtIGlmIGluY3JlbWVudHMgZnJvbSBsYXN0IGNhbGN1bGF0ZWQgcm91bmQgdG8gY3VycmVudCByb3VuZCBhbmQgCiAgICAvLyAgIGNhbGN1bGF0ZXMgY3VycmVudCB1c2VyIEFjY291bnQgc3RhdGUKICAgIC8vIC0gYWxnb3JpdGhtOgogICAgZnVuY3Rpb24gY2FsY3VsYXRlVXBkYXRlUHJvZml0KGFkZHJlc3MgdXNlcikgcHJpdmF0ZSB2aWV3IHJldHVybnMgKEFjY291bnQpIHsKICAgICAgICBBY2NvdW50IG1lbW9yeSBhY2MgPSBhY2NvdW50c1t1c2VyXTsKICAgICAgICAKICAgICAgICBmb3IodWludCByID0gYWNjLmxhc3RVc2VyVXBkYXRlUm91bmQ7IHIgPCBjdXJyZW50Um91bmQ7IHIrKykgewogICAgICAgICAgICBhY2MucHJvZml0VG90YWwgKj0gMjsKCiAgICAgICAgICAgIGlmKGFjYy5tb25leUhpZGRlbiA+IDApIHsKICAgICAgICAgICAgICAgIGFjYy5wcm9maXRUb3RhbCArPSBhY2MubW9uZXlIaWRkZW4gKiAyOwogICAgICAgICAgICAgICAgYWNjLm1vbmV5SGlkZGVuID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoYWNjLm1vbmV5TmV3ID4gMCkgewogICAgICAgICAgICAgICAgYWNjLm1vbmV5SGlkZGVuID0gYWNjLm1vbmV5TmV3OwogICAgICAgICAgICAgICAgYWNjLm1vbmV5TmV3ID0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBhY2MubGFzdFVzZXJVcGRhdGVSb3VuZCA9IGN1cnJlbnRSb3VuZDsKICAgICAgICByZXR1cm4gYWNjOwogICAgfQogICAgCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSBwcm9maXQgYW5kIHVwZGF0ZSBpdCBmb3IgdXNlcgogICAgZnVuY3Rpb24gdXBkYXRlUHJvZml0KGFkZHJlc3MgdXNlcikgcHJpdmF0ZSByZXR1cm5zKEFjY291bnQpIHsKICAgICAgICBBY2NvdW50IG1lbW9yeSBhY2MgPSBjYWxjdWxhdGVVcGRhdGVQcm9maXQodXNlcik7CiAgICAgICAgYWNjb3VudHNbdXNlcl0gPSBhY2M7CiAgICAgICAgcmV0dXJuIGFjYzsKICAgIH0KCiAgICAvLyBUaGF0IGZ1bmN0aW9uIHJldHVybnMgY2FuY2VsZWQgc3RhdHVzLgogICAgLy8gSWYgcm91bmQgbGFzdHMgZm9yIG1vcmUgdGhhbiAxIHllYXIgLSBjYW5jZWwgbW9kZSBpcyBvbgogICAgZnVuY3Rpb24gY2FuY2VsZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wgaXNDYW5jZWxlZCkgewogICAgICAgIHJldHVybiBibG9jay50aW1lc3RhbXAgPj0gKGN1cnJlbnRSb3VuZFN0YXJ0VGltZSArIE1BWF9ST1VORF9USU1FKTsKICAgIH0KICAgIAogICAgLy8gRmFsbGJhY2sgZnVuY3Rpb24gZm9yIGhhbmRsaW5nIG1vbmV5IHNlbmRpbmcgZGlyZWN0bHkgdG8gY29udHJhY3QKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKCFjYW5jZWxlZCgpKTsKICAgICAgICBkZXBvc2l0KCk7CiAgICB9CgogICAgLy8gRnVuY3Rpb24gZm9yIGNhbGN1bGF0aW5nIGFuZCB1cGRhdGluZyBzdGF0ZSBkdXJpbmcgdXNlciBtb25leSBpbnZlc3RtZW50CiAgICAvLyAtIGZpcnN0IG9mIGFsbCB3ZSB1cGRhdGUgY3VycmVudCB1c2VyIHN0YXRlIHVzaW5nIHVwZGF0ZVByb2ZpdCBmdW5jdGlvbgogICAgLy8gLSBhZnRlciB0aGF0IHdlIGhhbmRsZSBzaXR1YXRpb24gb2YgaW52ZXN0bWVudCB0aGF0IG1ha2VzIAogICAgLy8gICBjdXJyZW50Um91bmRDb2xsZWN0ZWQgbW9yZSB0aGFuIGN1cnJlbnQgcm91bmQgbGltaXQuIElmIHRoYXQgaGFwcGVuLCAKICAgIC8vICAgd2Ugc2V0IG1vbmV5TmV3IHRvIHRvdGFsTW9uZXkgLSBtb25leVBhcnRGb3JDcm9zc2luZ1JvdW5kTGltaXQuCiAgICAvLyAtIGNoZWNrIGNyb3NzaW5nIHJvdW5kIGxpbWl0IGluIGN5Y2xlIGZvciBjYXNlIHdoZW4gbW9uZXkgaW52ZXN0ZWQgYXJlIAogICAgLy8gICBtb3JlIHRoYW4gc2V2ZXJhbCByb3VuZCBsaW1pdAogICAgZnVuY3Rpb24gZGVwb3NpdCgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKCFjYW5jZWxlZCgpKTsKICAgICAgICAKICAgICAgICB1cGRhdGVQcm9maXQobXNnLnNlbmRlcik7CgogICAgICAgIHVpbnQgbW9uZXkyYWRkID0gbXNnLnZhbHVlOwogICAgICAgIHRvdGFsQ29sbGVjdGVkICs9IG1zZy52YWx1ZTsKICAgICAgICB3aGlsZShjdXJyZW50Um91bmRDb2xsZWN0ZWQgKyBtb25leTJhZGQgPj0gY3VycmVudExpbWl0KSB7CiAgICAgICAgICAgIGFjY291bnRzW21zZy5zZW5kZXJdLm1vbmV5TmV3ICs9IGN1cnJlbnRMaW1pdCAtIAogICAgICAgICAgICAgICAgY3VycmVudFJvdW5kQ29sbGVjdGVkOwogICAgICAgICAgICBtb25leTJhZGQgLT0gY3VycmVudExpbWl0IC0gY3VycmVudFJvdW5kQ29sbGVjdGVkOwoKICAgICAgICAgICAgaXRlcmF0ZVRvTmV4dFJvdW5kKCk7CiAgICAgICAgICAgIHVwZGF0ZVByb2ZpdChtc2cuc2VuZGVyKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYWNjb3VudHNbbXNnLnNlbmRlcl0ubW9uZXlOZXcgKz0gbW9uZXkyYWRkOwogICAgICAgIGN1cnJlbnRSb3VuZENvbGxlY3RlZCArPSBtb25leTJhZGQ7CiAgICB9CiAgICAKICAgIC8vIFJldHVybnMgY29tbW9uIGluZm9ybWF0aW9uIGFib3V0IHJvdW5kCiAgICAvLyB0b3RhbENvbGxlY3RlZFN1bSAtIHRvdGFsIHN1bSwgY29sbGVjdGVkIGluIGFsbCByb3VuZHMKICAgIC8vIHJvdW5kQ29sbGVjdGVkIC0gc3VtIGNvbGxlY3RlZCBpbiBjdXJyZW50IHJvdW5kCiAgICAvLyBjdXJyZW50Um91bmROdW1iZXIgLSBjdXJyZW50IHJvdW5kIG51bWJlcgogICAgLy8gcmVtYWluc0N1cnJlbnRSb3VuZCAtIGhvdyBtdWNoIHJlbWFpbnMgZm9yIHJvdW5kIGNoYW5nZQogICAgZnVuY3Rpb24gd2hhdFJvdW5kKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCB0b3RhbENvbGxlY3RlZFN1bSwgCiAgICAgICAgICAgIHVpbnQgcm91bmRDb2xsZWN0ZWQsIHVpbnQgY3VycmVudFJvdW5kTnVtYmVyLCAKICAgICAgICAgICAgdWludCByZW1haW5zQ3VycmVudFJvdW5kKSB7CiAgICAgICAgcmV0dXJuICh0b3RhbENvbGxlY3RlZCwgY3VycmVudFJvdW5kQ29sbGVjdGVkLCBjdXJyZW50Um91bmQsIAogICAgICAgICAgICBjdXJyZW50TGltaXQgLSBjdXJyZW50Um91bmRDb2xsZWN0ZWQpOwogICAgfQoKICAgIC8vIFJldHVybnMgY3VycmVudCB1c2VyIGFjY291bnQgc3RhdGUKICAgIC8vIHByb2ZpdFRvdGFsIC0gaG93IG11Y2ggcHJvZml0IGlzIGNvbGxlY3RlZCBkdXJpbmcgYWxsIHJvdW5kcwogICAgLy8gcHJvZml0VGFrZW4gLSBob3cgbXVjaCBwcm9maXQgd2FzIHRha2VuIGJ5IHVzZXIgZHVyaW5nIGFsbCByb3VuZHMKICAgIC8vIHByb2ZpdEF2YWlsYWJsZSAoPSBwcm9maXRUb3RhbCAtIHByb2ZpdFRha2VuKSAtIGhvdyBtdWNoIHByb2ZpdCBjYW4gYmUgCiAgICAvLyAgICB0YWtlbiBieSB1c2VyCiAgICAvLyBpbnZlc3RtZW50SW5Qcm9ncmVzcyAtIGhvdyBtdWNoIG1vbmV5IGFyZSBub3QgcHJvZml0IHlldCBhbmQgYXJlIGludmVzdGVkCiAgICAvLyAgICBpbiBjdXJyZW50IG9yIHByZXZpb3VzIHJvdW5kCiAgICBmdW5jdGlvbiBteUFjY291bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50IHByb2ZpdFRvdGFsLCAKICAgICAgICAgICAgdWludCBwcm9maXRUYWtlbiwgdWludCBwcm9maXRBdmFpbGFibGUsIHVpbnQgaW52ZXN0bWVudEluUHJvZ3Jlc3MpIHsKICAgICAgICB2YXIgYWNjID0gY2FsY3VsYXRlVXBkYXRlUHJvZml0KG1zZy5zZW5kZXIpOwogICAgICAgIHJldHVybiAoYWNjLnByb2ZpdFRvdGFsLCBhY2MucHJvZml0VGFrZW4sIAogICAgICAgICAgICAgICAgYWNjLnByb2ZpdFRvdGFsIC0gYWNjLnByb2ZpdFRha2VuLCAKICAgICAgICAgICAgICAgIGFjYy5tb25leU5ldyArIGFjYy5tb25leUhpZGRlbik7CiAgICB9CgogICAgLy8gVGhhdCBmdW5jdGlvbiBoYW5kbGVzIGNhbmNlbCBzdGF0ZS4gSW4gdGhhdCBjYXNlOgogICAgLy8gLSB0cmFuc2ZlciBhbGwgaW52ZXN0ZWQgbW9uZXkgaW4gY3VycmVudCByb3VuZAogICAgLy8gLSB0cmFuc2ZlciBhbGwgdXNlciBwcm9maXQgZXhjZXB0IG1vbmV5IHRha2VuCiAgICAvLyAtIHJlbWFpbmRlciBvZiAxMDAgRVRIIGlzIGxlZnQgYWZ0ZXIgcmV0dXJuaW5nIGFsbCBpbnZlc3RlZCBpbiBjdXJyZW50CiAgICAvLyAgICAgIHJvdW5kIGFuZCBhbGwgcHJvZml0LiBUcmFuc2ZlciBpdCB0byB1c2VycyB0aGF0IGludmVzdCBtb25leSBpbiAKICAgIC8vICAgICAgcHJldmlvdXMgcm91bmQuIFRvdGFsIGludmVzdG1lbnQgaW4gcHJldmlvdXMgcm91bmQgPSBwcmV2TGltaXQuCiAgICAvLyAgICAgIFNvIHBlcmNlbnQgb2YgbW9uZXkgcmV0dXJuID0gMTAwIEVUSCAvIHByZXZMaW1pdAogICAgZnVuY3Rpb24gcGF5YmFjaygpIHByaXZhdGUgewogICAgICAgIHJlcXVpcmUoY2FuY2VsZWQoKSk7CgogICAgICAgIHZhciBhY2MgPSBhY2NvdW50c1ttc2cuc2VuZGVyXTsKICAgICAgICB1aW50IGhpZGRlbnBhcnQgPSAwOwogICAgICAgIGlmKHByZXZMaW1pdCA+IDApIHsKICAgICAgICAgICAgaGlkZGVucGFydCA9IChhY2MubW9uZXlIaWRkZW4gKiAxMDBlMTgpIC8gcHJldkxpbWl0OwogICAgICAgIH0KICAgICAgICB1aW50IG1vbmV5MnNlbmQgPSBhY2MubW9uZXlOZXcgKyBhY2MucHJvZml0VG90YWwgLSBhY2MucHJvZml0VGFrZW4gKyAKICAgICAgICAgICAgaGlkZGVucGFydDsKICAgICAgICBpZihtb25leTJzZW5kID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgICAgIG1vbmV5MnNlbmQgPSB0aGlzLmJhbGFuY2U7CiAgICAgICAgfQogICAgICAgIGFjYy5tb25leU5ldyA9IDA7CiAgICAgICAgYWNjLm1vbmV5SGlkZGVuID0gMDsKICAgICAgICBhY2MucHJvZml0VGFrZW4gPSBhY2MucHJvZml0VG90YWw7CgogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobW9uZXkyc2VuZCk7CiAgICB9CgogICAgLy8gRnVuY3Rpb24gZm9yIHRha2luZyBhbGwgcHJvZml0CiAgICAvLyBJZiByb3VuZCBpcyBjYW5jZWxlZCB0aGFuIGRvIGEgcGF5YmFjayAoc2VlIGFib3ZlKQogICAgLy8gQ2FsY3VsYXRlIG1vbmV5IGxlZnQgb24gYWNjb3VudCA9IChwcm9maXRUb3RhbCAtIHByb2ZpdFRha2VuKQogICAgLy8gSW5jcmVhc2UgcHJvZml0VGFrZW4gYnkgbW9uZXkgbGVmdCBvbiBhY2NvdW50CiAgICAvLyBUcmFuc2ZlciBtb25leSB0byB1c2VyCiAgICBmdW5jdGlvbiB0YWtlUHJvZml0KCkgcHVibGljIHsKICAgICAgICBBY2NvdW50IG1lbW9yeSBhY2MgPSB1cGRhdGVQcm9maXQobXNnLnNlbmRlcik7CgogICAgICAgIGlmKGNhbmNlbGVkKCkpIHsKICAgICAgICAgICAgcGF5YmFjaygpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB1aW50IG1vbmV5MnNlbmQgPSBhY2MucHJvZml0VG90YWwgLSBhY2MucHJvZml0VGFrZW47CiAgICAgICAgYWNjLnByb2ZpdFRha2VuICs9IG1vbmV5MnNlbmQ7CiAgICAgICAgYWNjb3VudHNbbXNnLnNlbmRlcl0gPSBhY2M7CgogICAgICAgIGlmKG1vbmV5MnNlbmQgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobW9uZXkyc2VuZCk7CiAgICAgICAgfQogICAgfQp9'.
	

]
