Class {
	#name : #SRTdc00a48795cdda3e379ef3fed2a908b12529db3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdc00a48795cdda3e379ef3fed2a908b12529db3d >> base64 [
	^ ''.
	

]
