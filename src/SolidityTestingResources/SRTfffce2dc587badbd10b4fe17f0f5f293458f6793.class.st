Class {
	#name : #SRTfffce2dc587badbd10b4fe17f0f5f293458f6793,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfffce2dc587badbd10b4fe17f0f5f293458f6793 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBBZG1pbiB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc0FkbWluOwoKICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlBZG1pbigpIHsKICAgIHJlcXVpcmUoaXNBZG1pblttc2cuc2VuZGVyXSk7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gQWRtaW4oKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgYWRkQWRtaW4ob3duZXIpOwogIH0KCiAgZnVuY3Rpb24gYWRkQWRtaW4oYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgaXNBZG1pbltfYWRtaW5dID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZUFkbWluKGFkZHJlc3MgX2FkbWluKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGlzQWRtaW5bX2FkbWluXSA9IGZhbHNlOwogIH0KfQoKLy8gVG8gYWRkIGEgdHJlZSBkbyB0aGUgZm9sbG93aW5nOgovLyAtIENyZWF0ZSBhIG5ldyBUcmVlIHdpdGggdGhlIElELCBvd25lciwgdHJlZVZhbHVlIGFuZCBwb3dlciB0byBnZW5lcmF0ZSBmcnVpdHMKLy8gLSBVcGRhdGUgdGhlIHRyZWVCYWxhbmNlcyBhbmQgdHJlZU93bmVyIG1hcHBpbmdzCmNvbnRyYWN0IFRyZWVzIGlzIEFkbWluIHsKICBldmVudCBMb2dXYXRlclRyZWUodWludDI1NiBpbmRleGVkIHRyZWVJZCwgYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50MjU2IGRhdGUpOwogIGV2ZW50IExvZ1Jld2FyZFBpY2tlZCh1aW50MjU2IGluZGV4ZWQgdHJlZUlkLCBhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQyNTYgZGF0ZSwgdWludDI1NiBhbW91bnQpOwoKICAvLyBHZXQgdGhlIHRyZWUgaW5mb3JtYXRpb24gZ2l2ZW4gdGhlIGlkCiAgbWFwcGluZyh1aW50MjU2ID0+IFRyZWUpIHB1YmxpYyB0cmVlRGV0YWlsczsKICAvLyBBIG1hcHBpbmcgd2l0aCBhbGwgdGhlIHRyZWUgSURzIG9mIHRoYXQgb3duZXIKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NltdKSBwdWJsaWMgb3duZXJUcmVlc0lkczsKICAvLyBUcmVlIGlkIGFuZCB0aGUgZGF5cyB0aGUgdHJlZSBoYXMgYmVlbiB3YXRlcmVkCiAgLy8gVHJlZSBpZCA9PiBkYXkgbnVtYmVyID0+IGlzV2F0ZXJlZAogIG1hcHBpbmcodWludDI1NiA9PiBtYXBwaW5nKHVpbnQyNTYgPT4gYm9vbCkpIHB1YmxpYyB0cmVlV2F0ZXI7CgogIHN0cnVjdCBUcmVlIHsKICAgIHVpbnQyNTYgSUQ7CiAgICBhZGRyZXNzIG93bmVyOwogICAgdWludDI1NiBwdXJjaGFzZURhdGU7CiAgICB1aW50MjU2IHRyZWVQb3dlcjsgLy8gSG93IG11Y2ggZXRoZXIgdGhhdCB0cmVlIGlzIGdlbmVyYXRpbmcgZnJvbSAwIHRvIDEwMCB3aGVyZSAxMDAgaXMgdGhlIHRvdGFsIHBvd2VyIGNvbWJpbmVkIG9mIGFsbCB0aGUgdHJlZXMKICAgIHVpbnQyNTYgc2FsZVByaWNlOwogICAgdWludDI1NiB0aW1lc0V4Y2hhbmdlZDsKICAgIHVpbnQyNTZbXSB3YXRlclRyZWVEYXRlczsKICAgIGJvb2wgb25TYWxlOwogICAgdWludDI1NiBsYXN0UmV3YXJkUGlja2VkRGF0ZTsgLy8gV2hlbiBkaWQgeW91IHRha2UgdGhlIGxhc3QgcmV3YXJkCiAgfQoKICB1aW50MjU2W10gcHVibGljIHRyZWVzOwogIHVpbnQyNTZbXSBwdWJsaWMgdHJlZXNPblNhbGU7CiAgdWludDI1NiBwdWJsaWMgbGFzdFRyZWVJZDsKICBhZGRyZXNzIHB1YmxpYyBkZWZhdWx0VHJlZXNPd25lciA9IG1zZy5zZW5kZXI7CiAgdWludDI1NiBwdWJsaWMgZGVmYXVsdFRyZWVzUG93ZXIgPSAxOyAvLyAxMCUgb2YgdGhlIHRvdGFsIHBvd2VyCiAgdWludDI1NiBwdWJsaWMgZGVmYXVsdFNhbGVQcmljZSA9IDEgZXRoZXI7CiAgdWludDI1NiBwdWJsaWMgdG90YWxUcmVlUG93ZXI7CiAgdWludDI1NiBwdWJsaWMgdGltZUJldHdlZW5SZXdhcmRzID0gMSBkYXlzOwoKICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHNlcnZlcgogIC8vIFRoZSBjb250cmFjdCBpdHNlbGYgd2lsbCBob2xkIHRoZSBpbml0aWFsIHRyZWVzCiAgZnVuY3Rpb24gZ2VuZXJhdGVUcmVlcyh1aW50MjU2IF9hbW91bnRUb0dlbmVyYXRlKSBwdWJsaWMgb25seUFkbWluIHsKICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgX2Ftb3VudFRvR2VuZXJhdGU7IGkrKykgewogICAgICAgIHVpbnQyNTYgbmV3VHJlZUlkID0gbGFzdFRyZWVJZCArIDE7CiAgICAgICAgbGFzdFRyZWVJZCArPSAxOwogICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgZW1wdHlBcnJheTsKICAgICAgICBUcmVlIG1lbW9yeSBuZXdUcmVlID0gVHJlZShuZXdUcmVlSWQsIGRlZmF1bHRUcmVlc093bmVyLCBub3csIGRlZmF1bHRUcmVlc1Bvd2VyLCBkZWZhdWx0U2FsZVByaWNlLCAwLCBlbXB0eUFycmF5LCB0cnVlLCAwKTsKCiAgICAgICAgLy8gVXBkYXRlIHRoZSB0cmVlQmFsYW5jZXMgYW5kIHRyZWVPd25lciBtYXBwaW5ncwogICAgICAgIC8vIFdlIGFkZCB0aGUgdHJlZSB0byB0aGUgc2FtZSBhcnJheSBwb3NpdGlvbiB0byBmaW5kIGl0IGVhc2llcgogICAgICAgIG93bmVyVHJlZXNJZHNbZGVmYXVsdFRyZWVzT3duZXJdLnB1c2gobmV3VHJlZUlkKTsKICAgICAgICB0cmVlRGV0YWlsc1tuZXdUcmVlSWRdID0gbmV3VHJlZTsKICAgICAgICB0cmVlc09uU2FsZS5wdXNoKG5ld1RyZWVJZCk7CiAgICAgICAgdG90YWxUcmVlUG93ZXIgKz0gZGVmYXVsdFRyZWVzUG93ZXI7CiAgICB9CiAgfQoKICAvLyBUaGlzIGlzIHBheWFibGUsIHRoZSB1c2VyIHdpbGwgc2VuZCB0aGUgcGF5bWVudCBoZXJlCiAgLy8gV2UgZGVsZXRlIHRoZSB0cmVlIGZyb20gdGhlIG93bmVyIGZpcnN0IGFuZCB3ZSBhZGQgdGhhdCB0byB0aGUgcmVjZWl2ZXIKICAvLyBXaGVuIHlvdSBzZWxsIHlvdSdyZSBhY3R1YWxseSBwdXR0aW5nIHRoZSB0cmVlIG9uIHRoZSBtYXJrZXQsIG5vdCBsb3NpbmcgaXQgeWV0CiAgZnVuY3Rpb24gcHV0VHJlZU9uU2FsZSh1aW50MjU2IF90cmVlTnVtYmVyLCB1aW50MjU2IF9zYWxlUHJpY2UpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdHJlZURldGFpbHNbX3RyZWVOdW1iZXJdLm93bmVyKTsKICAgIHJlcXVpcmUoIXRyZWVEZXRhaWxzW190cmVlTnVtYmVyXS5vblNhbGUpOwogICAgcmVxdWlyZShfc2FsZVByaWNlID4gMCk7CgogICAgdHJlZXNPblNhbGUucHVzaChfdHJlZU51bWJlcik7CiAgICB0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0uc2FsZVByaWNlID0gX3NhbGVQcmljZTsKICAgIHRyZWVEZXRhaWxzW190cmVlTnVtYmVyXS5vblNhbGUgPSB0cnVlOwogIH0KCiAgLy8gVG8gYnV5IGEgdHJlZSBwYXlpbmcgZXRoZXIKICBmdW5jdGlvbiBidXlUcmVlKHVpbnQyNTYgX3RyZWVOdW1iZXIsIGFkZHJlc3MgX29yaWdpbmFsT3duZXIpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSB0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0ub3duZXIpOwogICAgcmVxdWlyZSh0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0ub25TYWxlKTsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHRyZWVEZXRhaWxzW190cmVlTnVtYmVyXS5zYWxlUHJpY2UpOwogICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICAvLyBNb3ZlIGlkIGZyb20gb2xkIHRvIG5ldyBvd25lcgogICAgLy8gRmluZCB0aGUgdHJlZSBvZiB0aGF0IHVzZXIgYW5kIGRlbGV0ZSBpdAogICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBvd25lclRyZWVzSWRzW19vcmlnaW5hbE93bmVyXS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmKG93bmVyVHJlZXNJZHNbX29yaWdpbmFsT3duZXJdW2ldID09IF90cmVlTnVtYmVyKSBkZWxldGUgb3duZXJUcmVlc0lkc1tfb3JpZ2luYWxPd25lcl1baV07CiAgICB9CiAgICAvLyBSZW1vdmUgdGhlIHRyZWUgZnJvbSB0aGUgYXJyYXkgb2YgdHJlZXMgb24gc2FsZQogICAgZm9yKHVpbnQyNTYgYSA9IDA7IGEgPCB0cmVlc09uU2FsZS5sZW5ndGg7IGErKykgewogICAgICAgIGlmKHRyZWVzT25TYWxlW2FdID09IF90cmVlTnVtYmVyKSB7CiAgICAgICAgICAgIGRlbGV0ZSB0cmVlc09uU2FsZVthXTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQogICAgb3duZXJUcmVlc0lkc1tuZXdPd25lcl0ucHVzaChfdHJlZU51bWJlcik7CiAgICB0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0ub25TYWxlID0gZmFsc2U7CiAgICBpZih0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0udGltZXNFeGNoYW5nZWQgPT0gMCkgewogICAgICAgIC8vIFJld2FyZCB0aGUgb3duZXIgZm9yIHRoZSBpbml0aWFsIHRyZWVzIGFzIGEgd2F5IG9mIG1vbmV0aXphdGlvbi4gS2VlcCBoYWxmIGZvciB0aGUgdHJlYXN1cnkKICAgICAgICBvd25lci50cmFuc2Zlcihtc2cudmFsdWUgLyAyKTsKICAgIH0gZWxzZSB7CiAgICAgICAgdHJlZURldGFpbHNbX3RyZWVOdW1iZXJdLm93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSAqIDkwIC8gMTAwKTsgLy8gS2VlcCAwLjElIGluIHRoZSB0cmVhc3VyeQogICAgfQogICAgdHJlZURldGFpbHNbX3RyZWVOdW1iZXJdLm93bmVyID0gbmV3T3duZXI7CiAgICB0cmVlRGV0YWlsc1tfdHJlZU51bWJlcl0udGltZXNFeGNoYW5nZWQgKz0gMTsKICB9CgogIC8vIFRvIHRha2UgYSB0cmVlIG91dCBvZiB0aGUgbWFya2V0IHdpdGhvdXQgc2VsbGluZyBpdAogIGZ1bmN0aW9uIGNhbmNlbFRyZWVTZWxsKHVpbnQyNTYgX3RyZWVJZCkgcHVibGljIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB0cmVlRGV0YWlsc1tfdHJlZUlkXS5vd25lcik7CiAgICByZXF1aXJlKHRyZWVEZXRhaWxzW190cmVlSWRdLm9uU2FsZSk7CiAgICAvLyBSZW1vdmUgdGhlIHRyZWUgZnJvbSB0aGUgYXJyYXkgb2YgdHJlZXMgb24gc2FsZQogICAgZm9yKHVpbnQyNTYgYSA9IDA7IGEgPCB0cmVlc09uU2FsZS5sZW5ndGg7IGErKykgewogICAgICAgIGlmKHRyZWVzT25TYWxlW2FdID09IF90cmVlSWQpIHsKICAgICAgICAgICAgZGVsZXRlIHRyZWVzT25TYWxlW2FdOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICB9CiAgICB0cmVlRGV0YWlsc1tfdHJlZUlkXS5vblNhbGUgPSBmYWxzZTsKICB9CgogIC8vIEltcHJvdmVzIHRoZSB0cmVlUG93ZXIKICBmdW5jdGlvbiB3YXRlclRyZWUodWludDI1NiBfdHJlZUlkKSBwdWJsaWMgewogICAgcmVxdWlyZShfdHJlZUlkID4gMCk7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdHJlZURldGFpbHNbX3RyZWVJZF0ub3duZXIpOwogICAgdWludDI1NltdIG1lbW9yeSB3YXRlckRhdGVzID0gdHJlZURldGFpbHNbX3RyZWVJZF0ud2F0ZXJUcmVlRGF0ZXM7CiAgICB1aW50MjU2IHRpbWVTaW5jZUxhc3RXYXRlcjsKICAgIC8vIFdlIHdhbnQgdG8gc3RvcmUgYXQgd2hhdCBkYXkgdGhlIHRyZWUgd2FzIHdhdGVyZWQKICAgIHVpbnQyNTYgZGF5OwogICAgaWYod2F0ZXJEYXRlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGltZVNpbmNlTGFzdFdhdGVyID0gbm93IC0gd2F0ZXJEYXRlc1t3YXRlckRhdGVzLmxlbmd0aCAtIDFdOwogICAgICAgIGRheSA9IHdhdGVyRGF0ZXNbd2F0ZXJEYXRlcy5sZW5ndGggLSAxXSAvIDEgZGF5czsKICAgIH1lbHNlIHsKICAgICAgICB0aW1lU2luY2VMYXN0V2F0ZXIgPSB0aW1lQmV0d2VlblJld2FyZHM7CiAgICAgICAgZGF5ID0gMTsKICAgIH0KICAgIHJlcXVpcmUodGltZVNpbmNlTGFzdFdhdGVyID49IHRpbWVCZXR3ZWVuUmV3YXJkcyk7CiAgICB0cmVlV2F0ZXJbX3RyZWVJZF1bZGF5XSA9IHRydWU7CiAgICB0cmVlRGV0YWlsc1tfdHJlZUlkXS53YXRlclRyZWVEYXRlcy5wdXNoKG5vdyk7CiAgICB0cmVlRGV0YWlsc1tfdHJlZUlkXS50cmVlUG93ZXIgKz0gMTsKICAgIHRvdGFsVHJlZVBvd2VyICs9IDE7CiAgICBMb2dXYXRlclRyZWUoX3RyZWVJZCwgbXNnLnNlbmRlciwgbm93KTsKICB9CgogIC8vIFRvIGdldCB0aGUgZXRoZXIgZnJvbSB0aGUgcmV3YXJkcwogIGZ1bmN0aW9uIHBpY2tSZXdhcmQodWludDI1NiBfdHJlZUlkKSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHRyZWVEZXRhaWxzW190cmVlSWRdLm93bmVyKTsKICAgIHJlcXVpcmUobm93IC0gdHJlZURldGFpbHNbX3RyZWVJZF0ubGFzdFJld2FyZFBpY2tlZERhdGUgPiB0aW1lQmV0d2VlblJld2FyZHMpOwoKICAgIHVpbnQyNTZbXSBtZW1vcnkgZm9ybWF0ZWRJZCA9IG5ldyB1aW50MjU2W10oMSk7CiAgICBmb3JtYXRlZElkWzBdID0gX3RyZWVJZDsKICAgIHVpbnQyNTZbXSBtZW1vcnkgcmV3YXJkcyA9IGNoZWNrUmV3YXJkcyhmb3JtYXRlZElkKTsKICAgIHRyZWVEZXRhaWxzW190cmVlSWRdLmxhc3RSZXdhcmRQaWNrZWREYXRlID0gbm93OwogICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZXdhcmRzWzBdKTsKICAgIExvZ1Jld2FyZFBpY2tlZChfdHJlZUlkLCBtc2cuc2VuZGVyLCBub3csIHJld2FyZHNbMF0pOwogIH0KCiAgLy8gVG8gc2VlIGlmIGEgdHJlZSBpcyBhbHJlYWR5IHdhdGVyZWQgb3Igbm90CiAgZnVuY3Rpb24gY2hlY2tUcmVlc1dhdGVyZWQodWludDI1NltdIF90cmVlSWRzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sW10pIHsKICAgIGJvb2xbXSBtZW1vcnkgcmVzdWx0cyA9IG5ldyBib29sW10oX3RyZWVJZHMubGVuZ3RoKTsKICAgIHVpbnQyNTYgdGltZVNpbmNlTGFzdFdhdGVyOwogICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBfdHJlZUlkcy5sZW5ndGg7IGkrKykgewogICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgd2F0ZXJEYXRlcyA9IHRyZWVEZXRhaWxzW190cmVlSWRzW2ldXS53YXRlclRyZWVEYXRlczsKICAgICAgICBpZih3YXRlckRhdGVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdGltZVNpbmNlTGFzdFdhdGVyID0gbm93IC0gd2F0ZXJEYXRlc1t3YXRlckRhdGVzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICByZXN1bHRzW2ldID0gdGltZVNpbmNlTGFzdFdhdGVyIDwgdGltZUJldHdlZW5SZXdhcmRzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0czsKICB9CgogIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgaG93IG11Y2ggZXRoZXIgYWxsIHRob3NlIHRyZWVzIGhhdmUgZ2VuZXJhdGVkIHRvZGF5CiAgLy8gQWxsIHRoZSB0cmVlIHBvd2VyIGNvbWJpaW5lZCBmb3IgaW5zdGFuY2UgMTAyOTMKICAvLyBUaGUgdHJlZSBwb3dlciBmb3IgdGhpcyB0cmVlIGZvciBpbnN0YW5jZSAyOTgKICAvLyBXaGF0IHBlcmNlbnRhZ2UgZG8geW91IGdldDogMiUKICAvLyBUb3RhbCBtb25leSBpbiB0aGUgdHJlYXN1cnk6IDEwMiBFVEgKICAvLyBBIDEwJSBvZiB0aGUgdG90YWwgaXMgZGlzdHJpYnV0ZWQgZGFpbHkgYWNyb3NzIGFsbCB0aGUgdXNlcnMKICAvLyBGb3IgaW5zdGFuY2UgMTAuMiBFVEggdG9kYXkKICAvLyBTbyBpZiB5b3UgcGljayB5b3VyIHJld2FyZHMgcmlnaHQgbm93LCB5b3UnbGwgZ2V0IGEgMiUgb2YgMTAuMiBFVEggd2hpY2ggaXMgMC4yMDQgRVRICiAgZnVuY3Rpb24gY2hlY2tSZXdhcmRzKHVpbnQyNTZbXSBfdHJlZUlkcykgcHVibGljIGNvbnN0YW50IHJldHVybnModWludDI1NltdKSB7CiAgICB1aW50MjU2IGFtb3VudEluVHJlYXN1cnlUb0Rpc3RyaWJ1dGUgPSB0aGlzLmJhbGFuY2UgLyAxMDsKICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0cyA9IG5ldyB1aW50MjU2W10oX3RyZWVJZHMubGVuZ3RoKTsKICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgX3RyZWVJZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyBJbXBvcnRhbnQgdG8gbXVsdGlwbHkgYnkgMTAwIHRvCiAgICAgICAgdWludDI1NiB5b3VyUGVyY2VudGFnZSA9IHRyZWVEZXRhaWxzW190cmVlSWRzW2ldXS50cmVlUG93ZXIgKiAxIGV0aGVyIC8gdG90YWxUcmVlUG93ZXI7CiAgICAgICAgdWludDI1NiBhbW91bnRZb3VHZXQgPSB5b3VyUGVyY2VudGFnZSAqIGFtb3VudEluVHJlYXN1cnlUb0Rpc3RyaWJ1dGUgLyAxIGV0aGVyOwogICAgICAgIHJlc3VsdHNbaV0gPSBhbW91bnRZb3VHZXQ7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0czsKICB9CgogIC8vIFRvIGdldCBhbGwgdGhlIHRyZWUgSURzIG9mIG9uZSB1c2VyCiAgZnVuY3Rpb24gZ2V0VHJlZUlkcyhhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2W10pIHsKICAgIGlmKF9hY2NvdW50ICE9IGFkZHJlc3MoMCkpIHJldHVybiBvd25lclRyZWVzSWRzW19hY2NvdW50XTsKICAgIGVsc2UgcmV0dXJuIG93bmVyVHJlZXNJZHNbbXNnLnNlbmRlcl07CiAgfQoKICAvLyBUbyBnZXQgYWxsIHRoZSB0cmVlcyBvbiBzYWxlCiAgZnVuY3Rpb24gZ2V0VHJlZXNPblNhbGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2W10pIHsKICAgICAgcmV0dXJuIHRyZWVzT25TYWxlOwogIH0KCiAgLy8gVG8gZXh0cmFjdCB0aGUgZXRoZXIgaW4gYW4gZW1lcmdlbmN5CiAgZnVuY3Rpb24gZW1lcmdlbmN5RXh0cmFjdCgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICB9Cn0='.
	

]
