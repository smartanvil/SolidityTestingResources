Class {
	#name : #SRTf1E48E34984a4D62716B50316b988Baa17a66DFE,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf1E48E34984a4D62716B50316b988Baa17a66DFE >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgpsaWJyYXJ5IFRpcG9zQ29tcGFydGlkb3MgewogICAgZW51bSBUaXBvUHJlbWlvIHtub25lLGZyZWUseDIseDMseDUsIHN1cnByaXNlIH0KCiAgICBzdHJ1Y3QgQ2VsZGEgewogICAgICAgIGFkZHJlc3MgY3JlYWRvcjsKICAgICAgICB1aW50IHBvbGVuUG9zaXRpdm9zOwogICAgICAgIHVpbnQgcG9sZW5OZWdhdGl2b3M7CiAgICAgICAgdWludDI1NiBmZWNoYUNyZWFjaW9uOwogICAgICAgIHVpbnQgcHJpbWVyYVBvc2ljaW9uOwogICAgICAgIHVpbnQgc2VndW5kYVBvc2ljaW9uOwogICAgICAgIHVpbnQgdGVyY2VyYVBvc2ljaW9uOwogICAgICAgIHVpbnQgY3VhcnRhUG9zaWNpb247CiAgICAgICAgdWludCBxdWludGFQb3NpY2lvbjsKICAgICAgICB1aW50IHNleHRhUG9zaWNpb247CiAgICAgICAgVGlwb1ByZW1pbyB0aXBvOwogICAgICAgIGJvb2wgcHJlbWlvOwogICAgfQogICAgCn0KCmNvbnRyYWN0IEJlZUdhbWUgaXMgb3duZWQgewogICAgCiAgICB1aW50MjU2IGludGVybmFsIHNlbGxQcmljZTsKICAgIHVpbnQyNTYgaW50ZXJuYWwgYnV5UHJpY2U7CiAgICB1aW50IGludGVybmFsIG51bWVyb0NlbGRhczsKICAgIHN0cmluZyBpbnRlcm5hbCBuYW1lOwogICAgc3RyaW5nIGludGVybmFsIHN5bWJvbDsKICAgIHVpbnQ4IGludGVybmFsIGRlY2ltYWxzOwogICAgdWludCBpbnRlcm5hbCBudW1lcm9Vc3VhcmlvczsKICAgIHVpbnQgZmVjaGFUYXg7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlT2Y7CgogICAgYWRkcmVzc1tdIGluZGljZVVzdWFyaW9zOwogICAgCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IFRpcG9zQ29tcGFydGlkb3MuQ2VsZGEpIGNlbGRhczsKICAgIAogICAgdWludDI1NltdIGluZGljZUNlbGRhczsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICBldmVudCBUcmFuc2ZlcktPKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgCiAgICBmdW5jdGlvbiBCZWVHYW1lICgKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHksCiAgICAgICAgdWludDI1NiBuZXdTZWxsUHJpY2UsCiAgICAgICAgdWludDI1NiBuZXdCdXlQcmljZSwKICAgICAgICB1aW50IF9mZWNoYVRheCkgewogICAgICAgIGZlY2hhVGF4ID0gX2ZlY2hhVGF4OwogICAgICAgIGJhbGFuY2VPZltvd25lcl0gPSBpbml0aWFsU3VwcGx5OwogICAgICAgIHNldFByaWNlcyhuZXdTZWxsUHJpY2UsbmV3QnV5UHJpY2UpOwogICAgICAgIG51bWVyb0NlbGRhcyA9IDA7CiAgICAgICAgbmFtZSA9ICJCZWV0aGVyIjsKICAgICAgICBzeW1ib2wgPSAiYmVldGgiOyAKICAgICAgICBkZWNpbWFscyA9IDI7CiAgICAgICAgVGlwb3NDb21wYXJ0aWRvcy5DZWxkYSBtZW1vcnkgY2VsZGEgPSBUaXBvc0NvbXBhcnRpZG9zLkNlbGRhKHsKICAgICAgICAgICAgY3JlYWRvcjptc2cuc2VuZGVyLAogICAgICAgICAgICBwb2xlblBvc2l0aXZvcyA6IDAsIAogICAgICAgICAgICBwb2xlbk5lZ2F0aXZvcyA6IDMsCiAgICAgICAgICAgIGZlY2hhQ3JlYWNpb246IDE1MDkzMDI0MDIwMjEsCiAgICAgICAgICAgIHByaW1lcmFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgIHNlZ3VuZGFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgIHRlcmNlcmFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgIGN1YXJ0YVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgcXVpbnRhUG9zaWNpb24gOiAwLAogICAgICAgICAgICBzZXh0YVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgdGlwbzpUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ubm9uZSwKICAgICAgICAgICAgcHJlbWlvOmZhbHNlCiAgICAgICAgfSk7CiAgICAgICAgaW5kaWNlQ2VsZGFzLnB1c2goMTUwOTMwMjQwMjAyMSk7CiAgICAgICAgbnVtZXJvQ2VsZGFzID0gbnVtZXJvQ2VsZGFzICsgMTsKICAgICAgICBjZWxkYXNbMTUwOTMwMjQwMjAyMV0gPSBjZWxkYTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHJldHVybnMgKHVpbnQgYW1vdW50KSB7CiAgICAgICAgYW1vdW50ID0gbXNnLnZhbHVlIC8gYnV5UHJpY2U7ICAgICAgICAgCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2Zbb3duZXJdID49IGFtb3VudCk7IAogICAgICAgIF90cmFuc2Zlcihvd25lciwgbXNnLnNlbmRlciwgYW1vdW50KTsKICAgICAgICBpbmNsdWlyVXN1YXJpbyhtc2cuc2VuZGVyKTsKICAgICAgICBUcmFuc2Zlcihvd25lciwgbXNnLnNlbmRlciwgYW1vdW50KTsgCiAgICAgICAgcmV0dXJuIGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gaW5jbHVpclVzdWFyaW8oYWRkcmVzcyB1c3VhcmlvKXsKICAgICAgICBib29sIGVuY29udHJhZG8gPSBmYWxzZTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1lcm9Vc3VhcmlvczsgaSsrKSB7CiAgICAgICAgICAgIGFkZHJlc3MgdXN1YXJpb1QgPSBpbmRpY2VVc3Vhcmlvc1tpXTsKICAgICAgICAgICAgaWYgKHVzdWFyaW9UID09IHVzdWFyaW8pewogICAgICAgICAgICAgICAgZW5jb250cmFkbyA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoIWVuY29udHJhZG8pewogICAgICAgICAgICBpbmRpY2VVc3Vhcmlvcy5wdXNoKHVzdWFyaW8pOwogICAgICAgICAgICBudW1lcm9Vc3VhcmlvcysrOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb2JyYXJJbXB1ZXN0byh1aW50IF9mZWNoYVRheCkgb25seU93bmVyIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1lcm9Vc3VhcmlvczsgaSsrKSB7CiAgICAgICAgICAgIGFkZHJlc3MgdXN1YXJpbyA9IGluZGljZVVzdWFyaW9zW2ldOwogICAgICAgICAgICBpZiAoYmFsYW5jZU9mW3VzdWFyaW9dID4gMCl7CiAgICAgICAgICAgICAgICBfdHJhbnNmZXIodXN1YXJpbywgb3duZXIsIDEpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZlY2hhVGF4ID0gX2ZlY2hhVGF4OwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWFyQ2VsZGEodWludCBfcG9sZW5lcywgdWludDI1NiBfZmVjaGFDcmVhY2lvbiwgdWludCBwb3NpY2lvbiwgdWludCBfY2VsZGFQYWRyZSwgdWludCBfY2VsZGFBYnVlbG8sIFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pbyB0aXBvKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0+PTMpOwogICAgICAgIHJlcXVpcmUoX3BvbGVuZXMgPT0gMyk7CiAgICAgICAgcmVxdWlyZShfY2VsZGFQYWRyZSAhPSAwKTsKICAgICAgICByZXF1aXJlKChwb3NpY2lvbiA+PSAwICYmIHBvc2ljaW9uIDwgNykgfHwgKHBvc2ljaW9uID09IDAgJiYgbXNnLnNlbmRlciA9PSBvd25lcikpOwogICAgICAgIHJlcXVpcmUoKCh0aXBvID09IFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pby5mcmVlIHx8IHRpcG8gPT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLngyIHx8IHRpcG8gPT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLngzIHx8IHRpcG8gPT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLng1IHx8IHRpcG8gPT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLnN1cnByaXNlKSAmJiBtc2cuc2VuZGVyID09IG93bmVyKSB8fCB0aXBvID09IFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pby5ub25lKTsKICAgICAgICBUaXBvc0NvbXBhcnRpZG9zLkNlbGRhIG1lbW9yeSBjZWxkYVBhZHJlID0gY2VsZGFzW19jZWxkYVBhZHJlXTsKICAgICAgICByZXF1aXJlKAogICAgICAgICAgICAoKHBvc2ljaW9uID09IDEgJiYgY2VsZGFQYWRyZS5wcmltZXJhUG9zaWNpb24gPT0gMCkgfHwgY2VsZGFzW2NlbGRhUGFkcmUucHJpbWVyYVBvc2ljaW9uXS50aXBvICE9IFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pby5ub25lICkgfHwgCiAgICAgICAgICAgICgocG9zaWNpb24gPT0gMiAmJiBjZWxkYVBhZHJlLnNlZ3VuZGFQb3NpY2lvbiA9PSAwKSB8fCBjZWxkYXNbY2VsZGFQYWRyZS5zZWd1bmRhUG9zaWNpb25dLnRpcG8gIT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLm5vbmUgKSB8fCAKICAgICAgICAgICAgKChwb3NpY2lvbiA9PSAzICYmIGNlbGRhUGFkcmUudGVyY2VyYVBvc2ljaW9uID09IDApIHx8IGNlbGRhc1tjZWxkYVBhZHJlLnRlcmNlcmFQb3NpY2lvbl0udGlwbyAhPSBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ubm9uZSApIHx8IAogICAgICAgICAgICAoKHBvc2ljaW9uID09IDQgJiYgY2VsZGFQYWRyZS5jdWFydGFQb3NpY2lvbiA9PSAwKSAgfHwgY2VsZGFzW2NlbGRhUGFkcmUuY3VhcnRhUG9zaWNpb25dLnRpcG8gIT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLm5vbmUgKSB8fCAKICAgICAgICAgICAgKChwb3NpY2lvbiA9PSA1ICYmIGNlbGRhUGFkcmUucXVpbnRhUG9zaWNpb24gPT0gMCkgIHx8IGNlbGRhc1tjZWxkYVBhZHJlLnF1aW50YVBvc2ljaW9uXS50aXBvICE9IFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pby5ub25lICkgfHwgCiAgICAgICAgICAgICgocG9zaWNpb24gPT0gNiAmJiBjZWxkYVBhZHJlLnNleHRhUG9zaWNpb24gPT0gMCkgfHwgY2VsZGFzW2NlbGRhUGFkcmUuc2V4dGFQb3NpY2lvbl0udGlwbyAhPSBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ubm9uZSApCiAgICAgICAgKTsKICAgICAgICBUaXBvc0NvbXBhcnRpZG9zLkNlbGRhIG1lbW9yeSBjZWxkYTsKICAgICAgICBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8gdGlwb1ByZW1pbzsKICAgICAgICBpZiAoY2VsZGFzW19mZWNoYUNyZWFjaW9uXS5mZWNoYUNyZWFjaW9uID09IF9mZWNoYUNyZWFjaW9uKSB7CiAgICAgICAgICAgIGNlbGRhID0gY2VsZGFzW19mZWNoYUNyZWFjaW9uXTsKICAgICAgICAgICAgY2VsZGEuY3JlYWRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIGNlbGRhLnByZW1pbyA9IGZhbHNlOwogICAgICAgICAgICB0aXBvUHJlbWlvID0gY2VsZGEudGlwbzsKICAgICAgICAgICAgY2VsZGEudGlwbyA9IFRpcG9zQ29tcGFydGlkb3MuVGlwb1ByZW1pby5ub25lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICBjZWxkYSA9IFRpcG9zQ29tcGFydGlkb3MuQ2VsZGEoewogICAgICAgICAgICAgICAgICAgIGNyZWFkb3I6bXNnLnNlbmRlciwKICAgICAgICAgICAgICAgICAgICBwb2xlblBvc2l0aXZvcyA6IDAsIAogICAgICAgICAgICAgICAgICAgIHBvbGVuTmVnYXRpdm9zIDogX3BvbGVuZXMsCiAgICAgICAgICAgICAgICAgICAgZmVjaGFDcmVhY2lvbjogX2ZlY2hhQ3JlYWNpb24sCiAgICAgICAgICAgICAgICAgICAgcHJpbWVyYVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgICAgICAgICBzZWd1bmRhUG9zaWNpb24gOiAwLAogICAgICAgICAgICAgICAgICAgIHRlcmNlcmFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgICAgICAgICAgY3VhcnRhUG9zaWNpb24gOiAwLAogICAgICAgICAgICAgICAgICAgIHF1aW50YVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgICAgICAgICBzZXh0YVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgICAgICAgICB0aXBvOnRpcG8sCiAgICAgICAgICAgICAgICAgICAgcHJlbWlvOmZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfWVsc2UgewogICAgICAgICAgICAgICAgY2VsZGEgPSBUaXBvc0NvbXBhcnRpZG9zLkNlbGRhKHsKICAgICAgICAgICAgICAgICAgICBjcmVhZG9yOm1zZy5zZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgcG9sZW5Qb3NpdGl2b3MgOiAwLCAKICAgICAgICAgICAgICAgICAgICBwb2xlbk5lZ2F0aXZvcyA6IF9wb2xlbmVzLAogICAgICAgICAgICAgICAgICAgIGZlY2hhQ3JlYWNpb246IF9mZWNoYUNyZWFjaW9uLAogICAgICAgICAgICAgICAgICAgIHByaW1lcmFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgICAgICAgICAgc2VndW5kYVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgICAgICAgICB0ZXJjZXJhUG9zaWNpb24gOiAwLAogICAgICAgICAgICAgICAgICAgIGN1YXJ0YVBvc2ljaW9uIDogMCwKICAgICAgICAgICAgICAgICAgICBxdWludGFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgICAgICAgICAgc2V4dGFQb3NpY2lvbiA6IDAsCiAgICAgICAgICAgICAgICAgICAgdGlwbzp0aXBvLAogICAgICAgICAgICAgICAgICAgIHByZW1pbzp0cnVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbmRpY2VDZWxkYXMucHVzaChfZmVjaGFDcmVhY2lvbik7CiAgICAgICAgICAgIG51bWVyb0NlbGRhcyA9IG51bWVyb0NlbGRhcyArIDE7CiAgICAgICAgfQogICAgICAgIGNlbGRhc1tfZmVjaGFDcmVhY2lvbl0gPSBjZWxkYTsKICAgICAgICBUaXBvc0NvbXBhcnRpZG9zLkNlbGRhIG1lbW9yeSBjZWxkYUFidWVsbyA9IGNlbGRhc1tfY2VsZGFBYnVlbG9dOwogICAgICAgIHVpbnQgbXVsdGlwbGljYWRvciA9IDE7CiAgICAgICAgYWRkcmVzcyByZXBhcnRpZG9yID0gbXNnLnNlbmRlcjsKICAgICAgICBpZiAodGlwb1ByZW1pbyA9PSBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ueDIgJiYgIWNlbGRhLnByZW1pbykgewogICAgICAgICAgICBtdWx0aXBsaWNhZG9yID0gMjsKICAgICAgICAgICAgcmVwYXJ0aWRvciA9IG93bmVyOwogICAgICAgIH0gZWxzZSBpZiAodGlwb1ByZW1pbyA9PSBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ueDMgJiYgIWNlbGRhLnByZW1pbykgewogICAgICAgICAgICBtdWx0aXBsaWNhZG9yID0gMzsKICAgICAgICAgICAgcmVwYXJ0aWRvciA9IG93bmVyOwogICAgICAgIH0gZWxzZSBpZiAodGlwb1ByZW1pbyA9PSBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8ueDUgJiYgIWNlbGRhLnByZW1pbykgewogICAgICAgICAgICBtdWx0aXBsaWNhZG9yID0gNTsKICAgICAgICAgICAgcmVwYXJ0aWRvciA9IG93bmVyOwogICAgICAgIH0gIGVsc2UgaWYgKHRpcG9QcmVtaW8gPT0gVGlwb3NDb21wYXJ0aWRvcy5UaXBvUHJlbWlvLmZyZWUgJiYgIWNlbGRhLnByZW1pbykgewogICAgICAgICAgICByZXBhcnRpZG9yID0gb3duZXI7CiAgICAgICAgfQogICAgICAgIGlmIChwb3NpY2lvbiA9PSAxICYmIGNlbGRhUGFkcmUucHJpbWVyYVBvc2ljaW9uID09IDApIHsKICAgICAgICAgICAgY2VsZGFQYWRyZS5wcmltZXJhUG9zaWNpb24gPSBfZmVjaGFDcmVhY2lvbjsgICAKICAgICAgICB9ZWxzZSBpZiAocG9zaWNpb24gPT0gMiAmJiBjZWxkYVBhZHJlLnNlZ3VuZGFQb3NpY2lvbiA9PSAwICkgewogICAgICAgICAgICBjZWxkYVBhZHJlLnNlZ3VuZGFQb3NpY2lvbiA9IF9mZWNoYUNyZWFjaW9uOwogICAgICAgIH1lbHNlIGlmIChwb3NpY2lvbiA9PSAzICYmIGNlbGRhUGFkcmUudGVyY2VyYVBvc2ljaW9uID09IDApIHsKICAgICAgICAgICAgY2VsZGFQYWRyZS50ZXJjZXJhUG9zaWNpb24gPSBfZmVjaGFDcmVhY2lvbjsKICAgICAgICB9ZWxzZSBpZiAocG9zaWNpb24gPT0gNCAmJiBjZWxkYVBhZHJlLmN1YXJ0YVBvc2ljaW9uID09IDApIHsKICAgICAgICAgICAgY2VsZGFQYWRyZS5jdWFydGFQb3NpY2lvbiA9IF9mZWNoYUNyZWFjaW9uOwogICAgICAgIH1lbHNlIGlmIChwb3NpY2lvbiA9PSA1ICYmIGNlbGRhUGFkcmUucXVpbnRhUG9zaWNpb24gPT0gMCkgewogICAgICAgICAgICBjZWxkYVBhZHJlLnF1aW50YVBvc2ljaW9uID0gX2ZlY2hhQ3JlYWNpb247CiAgICAgICAgfWVsc2UgaWYgKHBvc2ljaW9uID09IDYgJiYgY2VsZGFQYWRyZS5zZXh0YVBvc2ljaW9uID09IDApIHsKICAgICAgICAgICAgY2VsZGFQYWRyZS5zZXh0YVBvc2ljaW9uID0gX2ZlY2hhQ3JlYWNpb247CiAgICAgICAgfQogICAgICAgIGlmIChfY2VsZGFBYnVlbG8gIT0gMCAmJiAhY2VsZGEucHJlbWlvKSB7CiAgICAgICAgICAgIF90cmFuc2ZlcihyZXBhcnRpZG9yLGNlbGRhUGFkcmUuY3JlYWRvciwyICogbXVsdGlwbGljYWRvcik7CiAgICAgICAgICAgIGNlbGRhUGFkcmUucG9sZW5Qb3NpdGl2b3MgPSBjZWxkYVBhZHJlLnBvbGVuUG9zaXRpdm9zICsgKDIgKiBtdWx0aXBsaWNhZG9yKTsKICAgICAgICAgICAgY2VsZGFBYnVlbG8ucG9sZW5Qb3NpdGl2b3MgPSBjZWxkYUFidWVsby5wb2xlblBvc2l0aXZvcyArICgxICogbXVsdGlwbGljYWRvcik7CiAgICAgICAgICAgIF90cmFuc2ZlcihyZXBhcnRpZG9yLGNlbGRhQWJ1ZWxvLmNyZWFkb3IsMSAqIG11bHRpcGxpY2Fkb3IpOwogICAgICAgICAgICBjZWxkYXNbY2VsZGFBYnVlbG8uZmVjaGFDcmVhY2lvbl0gPSBjZWxkYUFidWVsbzsKICAgICAgICB9ZWxzZSBpZiAoIWNlbGRhLnByZW1pbykgewogICAgICAgICAgICBfdHJhbnNmZXIocmVwYXJ0aWRvcixjZWxkYVBhZHJlLmNyZWFkb3IsMyAqIG11bHRpcGxpY2Fkb3IpOwogICAgICAgICAgICBjZWxkYVBhZHJlLnBvbGVuUG9zaXRpdm9zID0gY2VsZGFQYWRyZS5wb2xlblBvc2l0aXZvcyArICggMyAqIG11bHRpcGxpY2Fkb3IpOwogICAgICAgIH0KICAgICAgICBjZWxkYXNbY2VsZGFQYWRyZS5mZWNoYUNyZWFjaW9uXSA9IGNlbGRhUGFkcmU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q2VsZGEodWludCBpbmRleCkgcmV0dXJucyAoYWRkcmVzcyBjcmVhZG9yLCB1aW50IHBvbGVuUG9zaXRpdm9zLCB1aW50IHBvbGVuTmVnYXRpdm9zLCB1aW50IGZlY2hhQ3JlYWNpb24sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgcHJpbWVyYVBvc2ljaW9uLCB1aW50IHNlZ3VuZGFQb3NpY2lvbiwgdWludCB0ZXJjZXJhUG9zaWNpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludCBjdWFydGFQb3NpY2lvbiwgdWludCBxdWludGFQb3NpY2lvbiwgdWludCBzZXh0YVBvc2ljaW9uLCBUaXBvc0NvbXBhcnRpZG9zLlRpcG9QcmVtaW8gdGlwbywgYm9vbCBwcmVtaW8pIHsKICAgICAgICB1aW50MjU2IGluZGV4QSA9IGluZGljZUNlbGRhc1tpbmRleF07CiAgICAgICAgVGlwb3NDb21wYXJ0aWRvcy5DZWxkYSBtZW1vcnkgIGNlbGRhID0gY2VsZGFzW2luZGV4QV07CiAgICAgICAgcmV0dXJuIChjZWxkYS5jcmVhZG9yLGNlbGRhLnBvbGVuUG9zaXRpdm9zLGNlbGRhLnBvbGVuTmVnYXRpdm9zLGNlbGRhLmZlY2hhQ3JlYWNpb24sCiAgICAgICAgY2VsZGEucHJpbWVyYVBvc2ljaW9uLCBjZWxkYS5zZWd1bmRhUG9zaWNpb24sIGNlbGRhLnRlcmNlcmFQb3NpY2lvbiwgY2VsZGEuY3VhcnRhUG9zaWNpb24sIAogICAgICAgIGNlbGRhLnF1aW50YVBvc2ljaW9uLCBjZWxkYS5zZXh0YVBvc2ljaW9uLCBjZWxkYS50aXBvLCBjZWxkYS5wcmVtaW8pOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJhbGFuY2UoYWRkcmVzcyBhZGRyKSByZXR1cm5zKHVpbnQpIHsKCQlyZXR1cm4gYmFsYW5jZU9mW2FkZHJdOwoJfQoKICAgIGZ1bmN0aW9uIGdldEZlY2hhVGF4KCkgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIGZlY2hhVGF4OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE51bWVyb0NlbGRhcygpIHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBudW1lcm9DZWxkYXM7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0T3duZXIoKSByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gb3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmV2ZW51ZSh1aW50IGFtb3VudCkgb25seU93bmVyIHsKICAgICAgICBvd25lci50cmFuc2ZlcihhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbGwodWludCBhbW91bnQpewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IGFtb3VudCk7ICAgICAgICAgCiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIG93bmVyLCBhbW91bnQpOwogICAgICAgIHVpbnQgcmV2ZW51ZSA9IGFtb3VudCAqIHNlbGxQcmljZTsKICAgICAgICBpZiAobXNnLnNlbmRlci5zZW5kIChyZXZlbnVlKSkgeyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgb3duZXIsIHJldmVudWUpOyAgCiAgICAgICAgfWVsc2UgewogICAgICAgICAgICBfdHJhbnNmZXIob3duZXIsIG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICAgICAgICAgIFRyYW5zZmVyS08obXNnLnNlbmRlciwgdGhpcywgcmV2ZW51ZSk7CiAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gc2V0RmVjaGFUYXgodWludCBfZmVjaGFUYXgpIG9ubHlPd25lciB7CiAgICAgICAgZmVjaGFUYXggPSBfZmVjaGFUYXg7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3U2VsbFByaWNlLCB1aW50MjU2IG5ld0J1eVByaWNlKSBvbmx5T3duZXIgewogICAgICAgIHNlbGxQcmljZSA9IG5ld1NlbGxQcmljZSAqIDEgZmlubmV5OwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2UgKiAxIGZpbm5leTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpewogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgaW5jbHVpclVzdWFyaW8oX3RvKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dID0gYmFsYW5jZU9mW19mcm9tXSAtIF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQp9'.
	

]
