Class {
	#name : #SRT1da1bcfbe6c073d1b5f77f5fa57375d79d6a0ff3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1da1bcfbe6c073d1b5f77f5fa57375d79d6a0ff3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKiAgICAgICAgICAgICAgICAgIFBvd0gzRCBVbml2ZXJzZSBUb2tlbgovICAgU2VuZCBFVEggdG8gdGhlIENvbnRyYWN0IGFuZCByZWNlaXZlIEVSQzIwIFRva2VuIGluIGV4Y2hhbmdlLgovCi8gICAgICBfX19fXyAgX18gICAgICAgICAgX19fICAgIF8gX19fXyAgX19fX18gIAovICAgICB8ICBfXyBcIFwgXCAgICAgICAgLyAvIHwgIHwgfF9fXyBcfCAgX18gXCAKLyAgICAgfCB8X18pIHxfXCBcICAvXCAgLyAvfCB8X198IHwgX18pIHwgfCAgfCB8Ci8gICAgIHwgIF9fXy8gXyBcIFwvICBcLyAvIHwgIF9fICB8fF9fIDx8IHwgIHwgfAovICAgICB8IHwgIHwgKF8pIFwgIC9cICAvICB8IHwgIHwgfF9fXykgfCB8X198IHwKLyAgICAgfF98ICAgXF9fXy8gXC9fIFwvICAgfF98ICB8X3xfX19fL3xfX19fXy8gCi8gICAgIHwgfCAgfCB8ICAgICAoXykgICAgICAgICAgICAgICAgICAgICAgICAgIAovICAgICB8IHwgIHwgfF8gX18gIF9fXyAgIF9fX19fIF8gX18gX19fICBfX18gICAKLyAgICAgfCB8ICB8IHwgJ18gXHwgXCBcIC8gLyBfIFwgJ19fLyBfX3wvIF8gXCAgCi8gICAgIHwgfF9ffCB8IHwgfCB8IHxcIFYgLyAgX18vIHwgIFxfXyBcICBfXy8gCi8gICAgICBcX19fXy98X3wgfF98X3wgXF8vIFxfX198X3wgIHxfX18vXF9fX3wgIAovICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAovCi8gICBGYW4gb2YgUG93SDNEID8gRG9uJ3QgbWlzcyBvdXQgb24gVW5pdmVyc2UgRVJDMjAgVG9rZW4hCiovCgoKY29udHJhY3QgUG93SDNEVW5pdmVyc2UgewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxDb250cmlidXRpb24gPSAwOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxCb251c1Rva2Vuc0lzc3VlZCA9IDA7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwogICAgYm9vbCBwdWJsaWMgcHVyY2hhc2luZ0FsbG93ZWQgPSB0cnVlOwogICAgYWRkcmVzcyBvd25lciA9IG1zZy5zZW5kZXI7CiAgICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiUG93SDNEIFVuaXZlcnNlIjsgfQogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiVU5JViI7IH0KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsgcmV0dXJuIDE4OyB9CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgeyByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sKICAgICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCAoMiAqIDMyKSArIDQpIHsgdGhyb3c7IH0KCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQoKICAgICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CgogICAgICAgIGJvb2wgc3VmZmljaWVudEZ1bmRzID0gZnJvbUJhbGFuY2UgPj0gX3ZhbHVlOwogICAgICAgIGJvb2wgb3ZlcmZsb3dlZCA9IGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dOwogICAgICAgIAogICAgICAgIGlmIChzdWZmaWNpZW50RnVuZHMgJiYgIW92ZXJmbG93ZWQpIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sKICAgICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCAoMyAqIDMyKSArIDQpIHsgdGhyb3c7IH0KCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAgIAogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1tfZnJvbV07CiAgICAgICAgdWludDI1NiBhbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA8PSBfdmFsdWU7CiAgICAgICAgYm9vbCBzdWZmaWNpZW50QWxsb3dhbmNlID0gYWxsb3dhbmNlIDw9IF92YWx1ZTsKICAgICAgICBib29sIG92ZXJmbG93ZWQgPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXTsKCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcyAmJiBzdWZmaWNpZW50QWxsb3dhbmNlICYmICFvdmVyZmxvd2VkKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICAKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc3BlbmQvYXBwcm92YWwgcmFjZSBjb25kaXRpb24KICAgICAgICBpZiAoX3ZhbHVlICE9IDAgJiYgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICAKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICAKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBmdW5jdGlvbiBlbmFibGVQdXJjaGFzaW5nKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHRocm93OyB9CgogICAgICAgIHB1cmNoYXNpbmdBbGxvd2VkID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXNhYmxlUHVyY2hhc2luZygpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgeyB0aHJvdzsgfQoKICAgICAgICBwdXJjaGFzaW5nQWxsb3dlZCA9IGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3Rm9yZWlnblRva2VucyhhZGRyZXNzIF90b2tlbkNvbnRyYWN0KSByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgdGhyb3c7IH0KCiAgICAgICAgRm9yZWlnblRva2VuIHRva2VuID0gRm9yZWlnblRva2VuKF90b2tlbkNvbnRyYWN0KTsKCiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgcmV0dXJuIHRva2VuLnRyYW5zZmVyKG93bmVyLCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFN0YXRzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiwgdWludDI1NiwgdWludDI1NiwgYm9vbCkgewogICAgICAgIHJldHVybiAodG90YWxDb250cmlidXRpb24sIHRvdGFsU3VwcGx5LCB0b3RhbEJvbnVzVG9rZW5zSXNzdWVkLCBwdXJjaGFzaW5nQWxsb3dlZCk7CiAgICB9CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBpZiAoIXB1cmNoYXNpbmdBbGxvd2VkKSB7IHRocm93OyB9CiAgICAgICAgCiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7IHJldHVybjsgfQoKICAgICAgICBvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgIHRvdGFsQ29udHJpYnV0aW9uICs9IG1zZy52YWx1ZTsKCiAgICAgICAgdWludDI1NiB0b2tlbnNJc3N1ZWQgPSAobXNnLnZhbHVlICogMTAwKTsKCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+PSAxMCBmaW5uZXkpIHsKICAgICAgICAgICAgdG9rZW5zSXNzdWVkICs9IHRvdGFsQ29udHJpYnV0aW9uOwoKICAgICAgICAgICAgYnl0ZXMyMCBib251c0hhc2ggPSByaXBlbWQxNjAoYmxvY2suY29pbmJhc2UsIGJsb2NrLm51bWJlciwgYmxvY2sudGltZXN0YW1wKTsKICAgICAgICAgICAgaWYgKGJvbnVzSGFzaFswXSA9PSAwKSB7CiAgICAgICAgICAgICAgICB1aW50OCBib251c011bHRpcGxpZXIgPQogICAgICAgICAgICAgICAgICAgICgoYm9udXNIYXNoWzFdICYgMHgwMSAhPSAwKSA/IDEgOiAwKSArICgoYm9udXNIYXNoWzFdICYgMHgwMiAhPSAwKSA/IDEgOiAwKSArCiAgICAgICAgICAgICAgICAgICAgKChib251c0hhc2hbMV0gJiAweDA0ICE9IDApID8gMSA6IDApICsgKChib251c0hhc2hbMV0gJiAweDA4ICE9IDApID8gMSA6IDApICsKICAgICAgICAgICAgICAgICAgICAoKGJvbnVzSGFzaFsxXSAmIDB4MTAgIT0gMCkgPyAxIDogMCkgKyAoKGJvbnVzSGFzaFsxXSAmIDB4MjAgIT0gMCkgPyAxIDogMCkgKwogICAgICAgICAgICAgICAgICAgICgoYm9udXNIYXNoWzFdICYgMHg0MCAhPSAwKSA/IDEgOiAwKSArICgoYm9udXNIYXNoWzFdICYgMHg4MCAhPSAwKSA/IDEgOiAwKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdWludDI1NiBib251c1Rva2Vuc0lzc3VlZCA9IChtc2cudmFsdWUgKiAxMDApICogYm9udXNNdWx0aXBsaWVyOwogICAgICAgICAgICAgICAgdG9rZW5zSXNzdWVkICs9IGJvbnVzVG9rZW5zSXNzdWVkOwoKICAgICAgICAgICAgICAgIHRvdGFsQm9udXNUb2tlbnNJc3N1ZWQgKz0gYm9udXNUb2tlbnNJc3N1ZWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRvdGFsU3VwcGx5ICs9IHRva2Vuc0lzc3VlZDsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNJc3N1ZWQ7CiAgICAgICAgCiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcyh0aGlzKSwgbXNnLnNlbmRlciwgdG9rZW5zSXNzdWVkKTsKICAgIH0KfQpjb250cmFjdCBGb3JlaWduVG9rZW4gewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7Cn0='.
	

]
