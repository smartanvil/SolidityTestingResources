Class {
	#name : #SRT253c7dd074f4bacb305387f922225a4f737c08bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT253c7dd074f4bacb305387f922225a4f737c08bd >> base64 [
	^ ''.
	

]
