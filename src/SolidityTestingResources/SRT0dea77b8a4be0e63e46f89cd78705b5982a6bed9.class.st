Class {
	#name : #SRT0dea77b8a4be0e63e46f89cd78705b5982a6bed9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0dea77b8a4be0e63e46f89cd78705b5982a6bed9 >> base64 [
	^ ''.
	

]
