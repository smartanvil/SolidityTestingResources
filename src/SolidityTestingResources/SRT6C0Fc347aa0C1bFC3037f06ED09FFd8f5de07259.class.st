Class {
	#name : #SRT6C0Fc347aa0C1bFC3037f06ED09FFd8f5de07259,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6C0Fc347aa0C1bFC3037f06ED09FFd8f5de07259 >> base64 [
	^ ''.
	

]
