Class {
	#name : #SRT3f407351f74b1340c3f507dc334dfc8cfb2b7e97,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f407351f74b1340c3f507dc334dfc8cfb2b7e97 >> base64 [
	^ ''.
	

]
