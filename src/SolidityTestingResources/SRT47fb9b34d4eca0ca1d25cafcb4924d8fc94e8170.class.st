Class {
	#name : #SRT47fb9b34d4eca0ca1d25cafcb4924d8fc94e8170,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47fb9b34d4eca0ca1d25cafcb4924d8fc94e8170 >> base64 [
	^ ''.
	

]
