Class {
	#name : #SRT904249766b2ccf6795d7b34441cc0bcae5cb7640,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT904249766b2ccf6795d7b34441cc0bcae5cb7640 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKgogICAgQ29weXJpZ2h0IDIwMTYsIEpvcmRpIEJheWxpbmEKCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgogKi8KCi8vLyBAdGl0bGUgTWluaU1lVG9rZW4gQ29udHJhY3QKLy8vIEBhdXRob3IgSm9yZGkgQmF5bGluYQovLy8gQGRldiBUaGlzIHRva2VuIGNvbnRyYWN0J3MgZ29hbCBpcyB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBjbG9uZSB0aGlzCi8vLyAgdG9rZW4gdXNpbmcgdGhlIHRva2VuIGRpc3RyaWJ1dGlvbiBhdCBhIGdpdmVuIGJsb2NrLCB0aGlzIHdpbGwgYWxsb3cgREFPJ3MKLy8vICBhbmQgREFwcHMgdG8gdXBncmFkZSB0aGVpciBmZWF0dXJlcyBpbiBhIGRlY2VudHJhbGl6ZWQgbWFubmVyIHdpdGhvdXQKLy8vICBhZmZlY3RpbmcgdGhlIG9yaWdpbmFsIHRva2VuCi8vLyBAZGV2IEl0IGlzIEVSQzIwIGNvbXBsaWFudCwgYnV0IHN0aWxsIG5lZWRzIHRvIHVuZGVyIGdvIGZ1cnRoZXIgdGVzdGluZy4KCi8vLyBDSEFOR0UgTE9HOiBXaWxsIEhhcmJvcm5lIChFdGhmaW5leCkgIC0gMDcvMTAvMjAxNwovLy8gYHRyYW5zZmVyRnJvbWAgZWRpdGVkIHRvIGFsbG93IGluZmluaXRlIGFwcHJvdmFscwovLy8gTmV3IGZ1bmN0aW9uIGBwbGVkZ2VGZWVzYCBmb3IgQ29udHJvbGxlciB0byB1cGRhdGUgYmFsYW5jZSBvd25lZCBieSB0b2tlbiBob2xkZXJzCi8vLyBOZXcgZ2V0dGVyIGZ1bmN0aW9ucyBgdG90YWxQbGVkZ2VkRmVlc0F0YCBhbmQgYHRvdGFsUGxlZGdlZEZlZXNgCi8vLyBOZXcgQ2hlY2twb2ludFtdIHRvdGFsUGxlZGdlZEZlZXNIaXN0b3J5OwovLy8gQWRkaXRpb24gb2Ygb25CdXJuIGZ1bmN0aW9uIHRvIENvbnRyb2xsZXIsIGNhbGxlZCB3aGVuIHVzZXIgdHJpZXMgdG8gYnVybiB0b2tlbnMKLy8vIFZlcnNpb24gJ01NVF8wLjInIGJ1bXBlZCB0byAnRUZYXzAuMScKCi8vLyBAZGV2IFRoZSB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0IG11c3QgaW1wbGVtZW50IHRoZXNlIGZ1bmN0aW9ucwpjb250cmFjdCBUb2tlbkNvbnRyb2xsZXIgewogICAgLy8vIEBub3RpY2UgQ2FsbGVkIHdoZW4gYF9vd25lcmAgc2VuZHMgZXRoZXIgdG8gdGhlIE1pbmlNZSBUb2tlbiBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCBzZW50IHRoZSBldGhlciB0byBjcmVhdGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBldGhlciBpcyBhY2NlcHRlZCwgZmFsc2UgaWYgaXQgdGhyb3dzCiAgICBmdW5jdGlvbiBwcm94eVBheW1lbnQoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMoYm9vbCk7CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBvcmlnaW4gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgdHJhbnNmZXIKICAgIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMoYm9vbCk7CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYW4gYXBwcm92YWwgYWxsb3dpbmcgdGhlCiAgICAvLy8gIGNvbnRyb2xsZXIgdG8gcmVhY3QgaWYgZGVzaXJlZAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCBjYWxscyBgYXBwcm92ZSgpYAogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgc3BlbmRlciBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgaW4gdGhlIGBhcHByb3ZlKClgIGNhbGwKICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgYXBwcm92YWwKICAgIGZ1bmN0aW9uIG9uQXBwcm92ZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYW1vdW50KSBwdWJsaWMKICAgICAgICByZXR1cm5zKGJvb2wpOwoKICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGEgdG9rZW4gYnVybgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGJ1cm5lcgogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgdG8gYnVybgogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBidXJuCiAgICBmdW5jdGlvbiBvbkJ1cm4oYWRkcmVzcyBfb3duZXIsIHVpbnQgX2Ftb3VudCkgcHVibGljIHJldHVybnMoYm9vbCk7Cn0KCmNvbnRyYWN0IENvbnRyb2xsZWQgewogICAgLy8vIEBub3RpY2UgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyb2xsZXIgaXMgdGhlIG9ubHkgYWRkcmVzcyB0aGF0IGNhbiBjYWxsCiAgICAvLy8gIGEgZnVuY3Rpb24gd2l0aCB0aGlzIG1vZGlmaWVyCiAgICBtb2RpZmllciBvbmx5Q29udHJvbGxlciB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBjb250cm9sbGVyKTsgXzsgfQoKICAgIGFkZHJlc3MgcHVibGljIGNvbnRyb2xsZXI7CgogICAgZnVuY3Rpb24gQ29udHJvbGxlZCgpIHB1YmxpYyB7IGNvbnRyb2xsZXIgPSBtc2cuc2VuZGVyO30KCiAgICAvLy8gQG5vdGljZSBDaGFuZ2VzIHRoZSBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfbmV3Q29udHJvbGxlciBUaGUgbmV3IGNvbnRyb2xsZXIgb2YgdGhlIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBjaGFuZ2VDb250cm9sbGVyKGFkZHJlc3MgX25ld0NvbnRyb2xsZXIpIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgY29udHJvbGxlciA9IF9uZXdDb250cm9sbGVyOwogICAgfQp9Cgpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIGZyb20sIHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9kYXRhKSBwdWJsaWM7Cn0KCi8vLyBAZGV2IFRoZSBhY3R1YWwgdG9rZW4gY29udHJhY3QsIHRoZSBkZWZhdWx0IGNvbnRyb2xsZXIgaXMgdGhlIG1zZy5zZW5kZXIKLy8vICB0aGF0IGRlcGxveXMgdGhlIGNvbnRyYWN0LCBzbyB1c3VhbGx5IHRoaXMgdG9rZW4gd2lsbCBiZSBkZXBsb3llZCBieSBhCi8vLyAgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCwgd2hpY2ggR2l2ZXRoIHdpbGwgY2FsbCBhICJDYW1wYWlnbiIKY29udHJhY3QgTWluaU1lVG9rZW4gaXMgQ29udHJvbGxlZCB7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAvL1RoZSBUb2tlbidzIG5hbWU6IGUuZy4gRGlnaXhEQU8gVG9rZW5zCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgIC8vTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBzbWFsbGVzdCB1bml0CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgIC8vQW4gaWRlbnRpZmllcjogZS5nLiBSRVAKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICdFRlhfMC4xJzsgLy9BbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUKCgogICAgLy8vIEBkZXYgYENoZWNrcG9pbnRgIGlzIHRoZSBzdHJ1Y3R1cmUgdGhhdCBhdHRhY2hlcyBhIGJsb2NrIG51bWJlciB0byBhCiAgICAvLy8gIGdpdmVuIHZhbHVlLCB0aGUgYmxvY2sgbnVtYmVyIGF0dGFjaGVkIGlzIHRoZSBvbmUgdGhhdCBsYXN0IGNoYW5nZWQgdGhlCiAgICAvLy8gIHZhbHVlCiAgICBzdHJ1Y3QgIENoZWNrcG9pbnQgewoKICAgICAgICAvLyBgZnJvbUJsb2NrYCBpcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIHZhbHVlIHdhcyBnZW5lcmF0ZWQgZnJvbQogICAgICAgIHVpbnQxMjggZnJvbUJsb2NrOwoKICAgICAgICAvLyBgdmFsdWVgIGlzIHRoZSBhbW91bnQgb2YgdG9rZW5zIGF0IGEgc3BlY2lmaWMgYmxvY2sgbnVtYmVyCiAgICAgICAgdWludDEyOCB2YWx1ZTsKICAgIH0KCiAgICAvLyBgcGFyZW50VG9rZW5gIGlzIHRoZSBUb2tlbiBhZGRyZXNzIHRoYXQgd2FzIGNsb25lZCB0byBwcm9kdWNlIHRoaXMgdG9rZW47CiAgICAvLyAgaXQgd2lsbCBiZSAweDAgZm9yIGEgdG9rZW4gdGhhdCB3YXMgbm90IGNsb25lZAogICAgTWluaU1lVG9rZW4gcHVibGljIHBhcmVudFRva2VuOwoKICAgIC8vIGBwYXJlbnRTbmFwU2hvdEJsb2NrYCBpcyB0aGUgYmxvY2sgbnVtYmVyIGZyb20gdGhlIFBhcmVudCBUb2tlbiB0aGF0IHdhcwogICAgLy8gIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgQ2xvbmUgVG9rZW4KICAgIHVpbnQgcHVibGljIHBhcmVudFNuYXBTaG90QmxvY2s7CgogICAgLy8gYGNyZWF0aW9uQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgQ2xvbmUgVG9rZW4gd2FzIGNyZWF0ZWQKICAgIHVpbnQgcHVibGljIGNyZWF0aW9uQmxvY2s7CgogICAgLy8gYGJhbGFuY2VzYCBpcyB0aGUgbWFwIHRoYXQgdHJhY2tzIHRoZSBiYWxhbmNlIG9mIGVhY2ggYWRkcmVzcywgaW4gdGhpcwogICAgLy8gIGNvbnRyYWN0IHdoZW4gdGhlIGJhbGFuY2UgY2hhbmdlcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIGNoYW5nZQogICAgLy8gIG9jY3VycmVkIGlzIGFsc28gaW5jbHVkZWQgaW4gdGhlIG1hcAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBDaGVja3BvaW50W10pIGJhbGFuY2VzOwoKICAgIC8vIGBhbGxvd2VkYCB0cmFja3MgYW55IGV4dHJhIHRyYW5zZmVyIHJpZ2h0cyBhcyBpbiBhbGwgRVJDMjAgdG9rZW5zCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLy8gVHJhY2tzIHRoZSBoaXN0b3J5IG9mIHRoZSBgdG90YWxTdXBwbHlgIG9mIHRoZSB0b2tlbgogICAgQ2hlY2twb2ludFtdIHRvdGFsU3VwcGx5SGlzdG9yeTsKCiAgICAvLyBGbGFnIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgdG9rZW4gaXMgdHJhbnNmZXJhYmxlIG9yIG5vdC4KICAgIGJvb2wgcHVibGljIHRyYW5zZmVyc0VuYWJsZWQ7CgogICAgLy8gVHJhY2tzIHRoZSBoaXN0b3J5IG9mIHRoZSBgcGxlZGdlZEZlZXNgIGJlbG9uZ2luZyB0byB0b2tlbiBob2xkZXJzCiAgICBDaGVja3BvaW50W10gdG90YWxQbGVkZ2VkRmVlc0hpc3Rvcnk7IC8vIGluIHdlaQoKICAgIC8vIFRoZSBmYWN0b3J5IHVzZWQgdG8gY3JlYXRlIG5ldyBjbG9uZSB0b2tlbnMKICAgIE1pbmlNZVRva2VuRmFjdG9yeSBwdWJsaWMgdG9rZW5GYWN0b3J5OwoKLy8vLy8vLy8vLy8vLy8vLwovLyBDb25zdHJ1Y3RvcgovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgTWluaU1lVG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuRmFjdG9yeSBUaGUgYWRkcmVzcyBvZiB0aGUgTWluaU1lVG9rZW5GYWN0b3J5IGNvbnRyYWN0IHRoYXQKICAgIC8vLyAgd2lsbCBjcmVhdGUgdGhlIENsb25lIHRva2VuIGNvbnRyYWN0cywgdGhlIHRva2VuIGZhY3RvcnkgbmVlZHMgdG8gYmUKICAgIC8vLyAgZGVwbG95ZWQgZmlyc3QKICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHBhcmVudCB0b2tlbiwgc2V0IHRvIDB4MCBpZiBpdCBpcyBhCiAgICAvLy8gIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfcGFyZW50U25hcFNob3RCbG9jayBCbG9jayBvZiB0aGUgcGFyZW50IHRva2VuIHRoYXQgd2lsbAogICAgLy8vICBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBjbG9uZSB0b2tlbiwgc2V0IHRvIDAgaWYgaXQKICAgIC8vLyAgaXMgYSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuTmFtZSBOYW1lIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2RlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIElmIHRydWUsIHRva2VucyB3aWxsIGJlIGFibGUgdG8gYmUgdHJhbnNmZXJyZWQKICAgIGZ1bmN0aW9uIE1pbmlNZVRva2VuKAogICAgICAgIGFkZHJlc3MgX3Rva2VuRmFjdG9yeSwKICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwKICAgICAgICB1aW50IF9wYXJlbnRTbmFwU2hvdEJsb2NrLAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICApIHB1YmxpYyB7CiAgICAgICAgdG9rZW5GYWN0b3J5ID0gTWluaU1lVG9rZW5GYWN0b3J5KF90b2tlbkZhY3RvcnkpOwogICAgICAgIG5hbWUgPSBfdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVjaW1hbHMKICAgICAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbAogICAgICAgIHBhcmVudFRva2VuID0gTWluaU1lVG9rZW4oX3BhcmVudFRva2VuKTsKICAgICAgICBwYXJlbnRTbmFwU2hvdEJsb2NrID0gX3BhcmVudFNuYXBTaG90QmxvY2s7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgICAgIGNyZWF0aW9uQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICB9CgoKLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBFUkMyMCBNZXRob2RzCi8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICB1aW50IGNvbnN0YW50IE1BWF9VSU5UID0gMioqMjU2IC0gMTsKCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfYW1vdW50YCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcnNFbmFibGVkKTsKICAgICAgICBkb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX2Ftb3VudGAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudAogICAgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIFRoZSBjb250cm9sbGVyIG9mIHRoaXMgY29udHJhY3QgY2FuIG1vdmUgdG9rZW5zIGFyb3VuZCBhdCB3aWxsLAogICAgICAgIC8vICB0aGlzIGlzIGltcG9ydGFudCB0byByZWNvZ25pemUhIENvbmZpcm0gdGhhdCB5b3UgdHJ1c3QgdGhlCiAgICAgICAgLy8gIGNvbnRyb2xsZXIgb2YgdGhpcyBjb250cmFjdCwgd2hpY2ggaW4gbW9zdCBzaXR1YXRpb25zIHNob3VsZCBiZQogICAgICAgIC8vICBhbm90aGVyIG9wZW4gc291cmNlIHNtYXJ0IGNvbnRyYWN0IG9yIDB4MAogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcnNFbmFibGVkKTsKCiAgICAgICAgICAgIC8vIFRoZSBzdGFuZGFyZCBFUkMgMjAgdHJhbnNmZXJGcm9tIGZ1bmN0aW9uYWxpdHkKICAgICAgICAgICAgaWYgKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIDwgTUFYX1VJTlQpIHsKICAgICAgICAgICAgICAgIHJlcXVpcmUoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCk7CiAgICAgICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBpcyB0aGUgYWN0dWFsIHRyYW5zZmVyIGZ1bmN0aW9uIGluIHRoZSB0b2tlbiBjb250cmFjdCwgaXQgY2FuCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudAogICAgKSBpbnRlcm5hbCB7CgogICAgICAgICAgIGlmIChfYW1vdW50ID09IDApIHsKICAgICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7ICAgIC8vIEZvbGxvdyB0aGUgc3BlYyB0byBsb3VjaCB0aGUgZXZlbnQgd2hlbiB0cmFuc2ZlciAwCiAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICB9CgogICAgICAgICAgIHJlcXVpcmUocGFyZW50U25hcFNob3RCbG9jayA8IGJsb2NrLm51bWJlcik7CgogICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyB0cmFuc2ZlciB0byAweDAgb3IgdGhlIHRva2VuIGNvbnRyYWN0IGl0c2VsZgogICAgICAgICAgIHJlcXVpcmUoKF90byAhPSAwKSAmJiAoX3RvICE9IGFkZHJlc3ModGhpcykpKTsKCiAgICAgICAgICAgLy8gSWYgdGhlIGFtb3VudCBiZWluZyB0cmFuc2ZlcmVkIGlzIG1vcmUgdGhhbiB0aGUgYmFsYW5jZSBvZiB0aGUKICAgICAgICAgICAvLyAgYWNjb3VudCB0aGUgdHJhbnNmZXIgdGhyb3dzCiAgICAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2ZBdChfZnJvbSwgYmxvY2subnVtYmVyKTsKCiAgICAgICAgICAgcmVxdWlyZShwcmV2aW91c0JhbGFuY2VGcm9tID49IF9hbW91bnQpOwoKICAgICAgICAgICAvLyBBbGVydHMgdGhlIHRva2VuIGNvbnRyb2xsZXIgb2YgdGhlIHRyYW5zZmVyCiAgICAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsKICAgICAgICAgICAgICAgcmVxdWlyZShUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikub25UcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KSk7CiAgICAgICAgICAgfQoKICAgICAgICAgICAvLyBGaXJzdCB1cGRhdGUgdGhlIGJhbGFuY2UgYXJyYXkgd2l0aCB0aGUgbmV3IHZhbHVlIGZvciB0aGUgYWRkcmVzcwogICAgICAgICAgIC8vICBzZW5kaW5nIHRoZSB0b2tlbnMKICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19mcm9tXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBUaGVuIHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgICAgLy8gIHJlY2VpdmluZyB0aGUgdG9rZW5zCiAgICAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mQXQoX3RvLCBibG9jay5udW1iZXIpOwogICAgICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50ID49IHByZXZpb3VzQmFsYW5jZVRvKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfdG9dLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICB9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCB0aGUgY3VycmVudCBibG9jawogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VPZkF0KF9vd25lciwgYmxvY2subnVtYmVyKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYuIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBFUkMyMCBhcHByb3ZlIGZ1bmN0aW9uCiAgICAvLy8gIHRvIGJlIGEgbGl0dGxlIGJpdCBzYWZlcgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSBhcHByb3ZlIGZ1bmN0aW9uIGNhbGwKICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgewogICAgICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vbkFwcHJvdmUobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpKTsKICAgICAgICB9CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIHJlYWQgdGhlIGBhbGxvd2VkW11gIG1hcAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIG9mIF9vd25lciB0aGF0IF9zcGVuZGVyIGlzIGFsbG93ZWQKICAgIC8vLyAgdG8gc3BlbmQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcgogICAgKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZiwgYW5kIHRoZW4gYSBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgaW4gdGhlIGNvbnRyYWN0IHRoYXQgaXMKICAgIC8vLyAgYmVpbmcgYXBwcm92ZWQsIGBfc3BlbmRlcmAuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIHVzZSB0aGVpciB0b2tlbnMgdG8KICAgIC8vLyAgaW50ZXJhY3Qgd2l0aCBjb250cmFjdHMgaW4gb25lIGZ1bmN0aW9uIGNhbGwgaW5zdGVhZCBvZiB0d28KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZnVuY3Rpb24gY2FsbCB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50LCBieXRlcyBfZXh0cmFEYXRhCiAgICApIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKGFwcHJvdmUoX3NwZW5kZXIsIF9hbW91bnQpKTsKCiAgICAgICAgQXBwcm92ZUFuZENhbGxGYWxsQmFjayhfc3BlbmRlcikucmVjZWl2ZUFwcHJvdmFsKAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBfYW1vdW50LAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICBfZXh0cmFEYXRhCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2VucwogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHlBdChibG9jay5udW1iZXIpOwogICAgfQoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gUXVlcnkgYmFsYW5jZSBhbmQgdG90YWxTdXBwbHkgaW4gSGlzdG9yeQovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHBhcmFtIF9ibG9ja051bWJlciBUaGUgYmxvY2sgbnVtYmVyIHdoZW4gdGhlIGJhbGFuY2UgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3MgX293bmVyLCB1aW50IF9ibG9ja051bWJlcikgcHVibGljIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludCkgewoKICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSBiYWxhbmNlIG9mIHRoZSB0b2tlbiBpcwogICAgICAgIC8vICByZXF1ZXN0ZWQgYmVmb3JlIGEgY2hlY2sgcG9pbnQgd2FzIGV2ZXIgY3JlYXRlZCBmb3IgdGhpcyB0b2tlbiwgaXQKICAgICAgICAvLyAgcmVxdWlyZXMgdGhhdCB0aGUgYHBhcmVudFRva2VuLmJhbGFuY2VPZkF0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGF0IHRva2VuIGFzIHRoaXMgY29udGFpbnMgaW5pdGlhbCBiYWxhbmNlIG9mCiAgICAgICAgLy8gIHRoaXMgdG9rZW4KICAgICAgICBpZiAoKGJhbGFuY2VzW19vd25lcl0ubGVuZ3RoID09IDApCiAgICAgICAgICAgIHx8IChiYWxhbmNlc1tfb3duZXJdWzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICAgaWYgKGFkZHJlc3MocGFyZW50VG9rZW4pICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi5iYWxhbmNlT2ZBdChfb3duZXIsIG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEhhcyBubyBwYXJlbnQKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CgogICAgICAgIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGV4cGVjdGVkIGJhbGFuY2UgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQoYmFsYW5jZXNbX293bmVyXSwgX2Jsb2NrTnVtYmVyKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgVG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgLgogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSB0b3RhbFN1cHBseSBpcyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUaGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBgX2Jsb2NrTnVtYmVyYAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHlBdCh1aW50IF9ibG9ja051bWJlcikgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCkgewoKICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSB0b3RhbFN1cHBseSBvZiB0aGUgdG9rZW4gaXMKICAgICAgICAvLyAgcmVxdWVzdGVkIGJlZm9yZSBhIGNoZWNrIHBvaW50IHdhcyBldmVyIGNyZWF0ZWQgZm9yIHRoaXMgdG9rZW4sIGl0CiAgICAgICAgLy8gIHJlcXVpcmVzIHRoYXQgdGhlIGBwYXJlbnRUb2tlbi50b3RhbFN1cHBseUF0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGlzIHRva2VuIGFzIHRoYXQgY29udGFpbnMgdG90YWxTdXBwbHkgb2YgdGhpcwogICAgICAgIC8vICB0b2tlbiBhdCB0aGlzIGJsb2NrIG51bWJlci4KICAgICAgICBpZiAoKHRvdGFsU3VwcGx5SGlzdG9yeS5sZW5ndGggPT0gMCkKICAgICAgICAgICAgfHwgKHRvdGFsU3VwcGx5SGlzdG9yeVswXS5mcm9tQmxvY2sgPiBfYmxvY2tOdW1iZXIpKSB7CiAgICAgICAgICAgIGlmIChhZGRyZXNzKHBhcmVudFRva2VuKSAhPSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50VG9rZW4udG90YWxTdXBwbHlBdChtaW4oX2Jsb2NrTnVtYmVyLCBwYXJlbnRTbmFwU2hvdEJsb2NrKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBleHBlY3RlZCB0b3RhbFN1cHBseSBkdXJpbmcgbm9ybWFsIHNpdHVhdGlvbnMKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWVBdCh0b3RhbFN1cHBseUhpc3RvcnksIF9ibG9ja051bWJlcik7CiAgICAgICAgfQogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBRdWVyeSBwbGVkZ2VkRmVlcyAvLyBpbiB3ZWkKLy8vLy8vLy8vLy8vLy8vLwoKICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIGdldCB0aGUgdG90YWwgcGxlZGdlZCBmZWVzCiAgIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCBudW1iZXIgb2YgZmVlcyBiZWxvbmdpbmcgdG8gdG9rZW4gaG9sZGVycwogICBmdW5jdGlvbiB0b3RhbFBsZWRnZWRGZWVzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgIHJldHVybiB0b3RhbFBsZWRnZWRGZWVzQXQoYmxvY2subnVtYmVyKTsKICAgfQoKICAgLy8vIEBub3RpY2UgVG90YWwgYW1vdW50IG9mIGZlZXMgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYC4KICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSB0b3RhbFBsZWRnZWRGZWVzIGlzIHF1ZXJpZWQKICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIGFtb3VudCBvZiBwbGVkZ2VkIGZlZXMgYXQgYF9ibG9ja051bWJlcmAKICAgZnVuY3Rpb24gdG90YWxQbGVkZ2VkRmVlc0F0KHVpbnQgX2Jsb2NrTnVtYmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CgogICAgICAgLy8gVGhlc2UgbmV4dCBmZXcgbGluZXMgYXJlIHVzZWQgd2hlbiB0aGUgdG90YWxQbGVkZ2VkRmVlcyBvZiB0aGUgdG9rZW4gaXMKICAgICAgIC8vICByZXF1ZXN0ZWQgYmVmb3JlIGEgY2hlY2sgcG9pbnQgd2FzIGV2ZXIgY3JlYXRlZCBmb3IgdGhpcyB0b2tlbiwgaXQKICAgICAgIC8vICByZXF1aXJlcyB0aGF0IHRoZSBgcGFyZW50VG9rZW4udG90YWxQbGVkZ2VkRmVlc0F0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgLy8gIGdlbmVzaXMgYmxvY2sgZm9yIHRoaXMgdG9rZW4gYXMgdGhhdCBjb250YWlucyB0b3RhbFBsZWRnZWRGZWVzIG9mIHRoaXMKICAgICAgIC8vICB0b2tlbiBhdCB0aGlzIGJsb2NrIG51bWJlci4KICAgICAgIGlmICgodG90YWxQbGVkZ2VkRmVlc0hpc3RvcnkubGVuZ3RoID09IDApCiAgICAgICAgICAgfHwgKHRvdGFsUGxlZGdlZEZlZXNIaXN0b3J5WzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgewogICAgICAgICAgICAgICByZXR1cm4gcGFyZW50VG9rZW4udG90YWxQbGVkZ2VkRmVlc0F0KG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsKICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICB9CgogICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgdG90YWxQbGVkZ2VkRmVlcyBkdXJpbmcgbm9ybWFsIHNpdHVhdGlvbnMKICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQodG90YWxQbGVkZ2VkRmVlc0hpc3RvcnksIF9ibG9ja051bWJlcik7CiAgICAgICB9CiAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gUGxlZGdlIEZlZXMgVG8gVG9rZW4gSG9sZGVycyBvciBSZWR1Y2UgUGxlZGdlZCBGZWVzIC8vIGluIHdlaQovLy8vLy8vLy8vLy8vLy8vCgogICAvLy8gQG5vdGljZSBQbGVkZ2VzIGZlZXMgdG8gdGhlIHRva2VuIGhvbGRlcnMsIGxhdGVyIHRvIGJlIGNsYWltZWQgYnkgYnVybmluZwogICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHNlbnQgdG8gdGhlIHZhdWx0IGJ5IGNvbnRyb2xsZXIsIHJlc2VydmVkIGZvciB0b2tlbiBob2xkZXJzCiAgIGZ1bmN0aW9uIHBsZWRnZUZlZXModWludCBfdmFsdWUpIHB1YmxpYyBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sKSB7CiAgICAgICB1aW50IGN1clRvdGFsRmVlcyA9IHRvdGFsUGxlZGdlZEZlZXMoKTsKICAgICAgIHJlcXVpcmUoY3VyVG90YWxGZWVzICsgX3ZhbHVlID49IGN1clRvdGFsRmVlcyk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwogICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFBsZWRnZWRGZWVzSGlzdG9yeSwgY3VyVG90YWxGZWVzICsgX3ZhbHVlKTsKICAgICAgIHJldHVybiB0cnVlOwogICB9CgogICAvLy8gQG5vdGljZSBSZWR1Y2VzIHBsZWRnZWQgZmVlcyB0byB0aGUgdG9rZW4gaG9sZGVycywgaS5lLiBkdXJpbmcgdXBncmFkZSBvciB0b2tlbiBidXJuaW5nCiAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgcGxlZGdlZCBmZWVzIHdoaWNoIGFyZSBiZWluZyBkaXN0cmlidXRlZCB0byB0b2tlbiBob2xkZXJzLCByZWR1Y2luZyBsaWFiaWxpdHkKICAgZnVuY3Rpb24gcmVkdWNlUGxlZGdlZEZlZXModWludCBfdmFsdWUpIHB1YmxpYyBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sKSB7CiAgICAgICB1aW50IGN1clRvdGFsRmVlcyA9IHRvdGFsUGxlZGdlZEZlZXMoKTsKICAgICAgIHJlcXVpcmUoY3VyVG90YWxGZWVzID49IF92YWx1ZSk7CiAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KHRvdGFsUGxlZGdlZEZlZXNIaXN0b3J5LCBjdXJUb3RhbEZlZXMgLSBfdmFsdWUpOwogICAgICAgcmV0dXJuIHRydWU7CiAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gQ2xvbmUgVG9rZW4gTWV0aG9kCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBDcmVhdGVzIGEgbmV3IGNsb25lIHRva2VuIHdpdGggdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIGJlaW5nCiAgICAvLy8gIHRoaXMgdG9rZW4gYXQgYF9zbmFwc2hvdEJsb2NrYAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlbk5hbWUgTmFtZSBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2Nsb25lRGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlblN5bWJvbCBTeW1ib2wgb2YgdGhlIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9zbmFwc2hvdEJsb2NrIEJsb2NrIHdoZW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcGFyZW50IHRva2VuIGlzCiAgICAvLy8gIGNvcGllZCB0byBzZXQgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBuZXcgY2xvbmUgdG9rZW47CiAgICAvLy8gIGlmIHRoZSBibG9jayBpcyB6ZXJvIHRoYW4gdGhlIGFjdHVhbCBibG9jaywgdGhlIGN1cnJlbnQgYmxvY2sgaXMgdXNlZAogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUKICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgTWluaU1lVG9rZW4gQ29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwKICAgICAgICB1aW50OCBfY2xvbmVEZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuU3ltYm9sLAogICAgICAgIHVpbnQgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgICAgICkgcHVibGljIHJldHVybnMoYWRkcmVzcykgewogICAgICAgIGlmIChfc25hcHNob3RCbG9jayA9PSAwKSBfc25hcHNob3RCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBNaW5pTWVUb2tlbiBjbG9uZVRva2VuID0gdG9rZW5GYWN0b3J5LmNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLAogICAgICAgICAgICBfY2xvbmVUb2tlbk5hbWUsCiAgICAgICAgICAgIF9jbG9uZURlY2ltYWxVbml0cywKICAgICAgICAgICAgX2Nsb25lVG9rZW5TeW1ib2wsCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgICAgICk7CgogICAgICAgIGNsb25lVG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsKCiAgICAgICAgLy8gQW4gZXZlbnQgdG8gbWFrZSB0aGUgdG9rZW4gZWFzeSB0byBmaW5kIG9uIHRoZSBibG9ja2NoYWluCiAgICAgICAgTmV3Q2xvbmVUb2tlbihhZGRyZXNzKGNsb25lVG9rZW4pLCBfc25hcHNob3RCbG9jayk7CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoY2xvbmVUb2tlbik7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEdlbmVyYXRlIGFuZCBkZXN0cm95IHRva2VucwovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgR2VuZXJhdGVzIGBfYW1vdW50YCB0b2tlbnMgdGhhdCBhcmUgYXNzaWduZWQgdG8gYF9vd25lcmAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgZ2VuZXJhdGVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0b2tlbnMgYXJlIGdlbmVyYXRlZCBjb3JyZWN0bHkKICAgIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQKICAgICkgcHVibGljIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IGN1clRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkoKTsKICAgICAgICByZXF1aXJlKGN1clRvdGFsU3VwcGx5ICsgX2Ftb3VudCA+PSBjdXJUb3RhbFN1cHBseSk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCA+PSBwcmV2aW91c0JhbGFuY2VUbyk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3codG90YWxTdXBwbHlIaXN0b3J5LCBjdXJUb3RhbFN1cHBseSArIF9hbW91bnQpOwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX293bmVyXSwgcHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50KTsKICAgICAgICBUcmFuc2ZlcigwLCBfb3duZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvLy8gQG5vdGljZSBCdXJucyBgX2Ftb3VudGAgdG9rZW5zIGZyb20gYF9vd25lcmAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBsb3NlIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgcXVhbnRpdHkgb2YgdG9rZW5zIHRvIGJ1cm4KICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgYnVybmVkIGNvcnJlY3RseQogICAgZnVuY3Rpb24gZGVzdHJveVRva2VucyhhZGRyZXNzIF9vd25lciwgdWludCBfYW1vdW50CiAgICApIG9ubHlDb250cm9sbGVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgcmVxdWlyZShjdXJUb3RhbFN1cHBseSA+PSBfYW1vdW50KTsKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZUZyb20gPj0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5IC0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VGcm9tIC0gX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX293bmVyLCAwLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gRW5hYmxlIHRva2VucyB0cmFuc2ZlcnMKLy8vLy8vLy8vLy8vLy8vLwoKCiAgICAvLy8gQG5vdGljZSBFbmFibGVzIHRva2VuIGhvbGRlcnMgdG8gdHJhbnNmZXIgdGhlaXIgdG9rZW5zIGZyZWVseSBpZiB0cnVlCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIFRydWUgaWYgdHJhbnNmZXJzIGFyZSBhbGxvd2VkIGluIHRoZSBjbG9uZQogICAgZnVuY3Rpb24gZW5hYmxlVHJhbnNmZXJzKGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQpIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb25zIHRvIHF1ZXJ5IGFuZCBzZXQgYSB2YWx1ZSBpbiBhIHNuYXBzaG90IGFycmF5Ci8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBgZ2V0VmFsdWVBdGAgcmV0cmlldmVzIHRoZSBudW1iZXIgb2YgdG9rZW5zIGF0IGEgZ2l2ZW4gYmxvY2sgbnVtYmVyCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIHZhbHVlcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHBhcmFtIF9ibG9jayBUaGUgYmxvY2sgbnVtYmVyIHRvIHJldHJpZXZlIHRoZSB2YWx1ZSBhdAogICAgLy8vIEByZXR1cm4gVGhlIG51bWJlciBvZiB0b2tlbnMgYmVpbmcgcXVlcmllZAogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdChDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfYmxvY2sKICAgICkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmIChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkgcmV0dXJuIDA7CgogICAgICAgIC8vIFNob3J0Y3V0IGZvciB0aGUgYWN0dWFsIHZhbHVlCiAgICAgICAgaWYgKF9ibG9jayA+PSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV0uZnJvbUJsb2NrKQogICAgICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoLTFdLnZhbHVlOwogICAgICAgIGlmIChfYmxvY2sgPCBjaGVja3BvaW50c1swXS5mcm9tQmxvY2spIHJldHVybiAwOwoKICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIG9mIHRoZSB2YWx1ZSBpbiB0aGUgYXJyYXkKICAgICAgICB1aW50IG1pbiA9IDA7CiAgICAgICAgdWludCBtYXggPSBjaGVja3BvaW50cy5sZW5ndGgtMTsKICAgICAgICB3aGlsZSAobWF4ID4gbWluKSB7CiAgICAgICAgICAgIHVpbnQgbWlkID0gKG1heCArIG1pbiArIDEpLyAyOwogICAgICAgICAgICBpZiAoY2hlY2twb2ludHNbbWlkXS5mcm9tQmxvY2s8PV9ibG9jaykgewogICAgICAgICAgICAgICAgbWluID0gbWlkOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWF4ID0gbWlkLTE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW21pbl0udmFsdWU7CiAgICB9CgogICAgLy8vIEBkZXYgYHVwZGF0ZVZhbHVlQXROb3dgIHVzZWQgdG8gdXBkYXRlIHRoZSBgYmFsYW5jZXNgIG1hcCBhbmQgdGhlCiAgICAvLy8gIGB0b3RhbFN1cHBseUhpc3RvcnlgCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIGRhdGEgYmVpbmcgdXBkYXRlZAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIG5ldyBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZUF0Tm93KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF92YWx1ZQogICAgKSBpbnRlcm5hbCAgewogICAgICAgIGlmICgoY2hlY2twb2ludHMubGVuZ3RoID09IDApCiAgICAgICAgfHwgKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtMV0uZnJvbUJsb2NrIDwgYmxvY2subnVtYmVyKSkgewogICAgICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2UgbmV3Q2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzWyBjaGVja3BvaW50cy5sZW5ndGgrKyBdOwogICAgICAgICAgICAgICBuZXdDaGVja1BvaW50LmZyb21CbG9jayA9ICB1aW50MTI4KGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgQ2hlY2twb2ludCBzdG9yYWdlIG9sZENoZWNrUG9pbnQgPSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV07CiAgICAgICAgICAgICAgIG9sZENoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBhZGRyZXNzIGlzIGEgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX2FkZHIgVGhlIGFkZHJlc3MgYmVpbmcgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBgX2FkZHJgIGlzIGEgY29udHJhY3QKICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBzaXplOwogICAgICAgIGlmIChfYWRkciA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2l6ZT4wOwogICAgfQoKICAgIC8vLyBAZGV2IEhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gYSBtaW4gYmV0d2VuIHRoZSB0d28gdWludHMKICAgIGZ1bmN0aW9uIG1pbih1aW50IGEsIHVpbnQgYikgcHVyZSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgVGhlIGZhbGxiYWNrIGZ1bmN0aW9uOiBJZiB0aGUgY29udHJhY3QncyBjb250cm9sbGVyIGhhcyBub3QgYmVlbgogICAgLy8vICBzZXQgdG8gMCwgdGhlbiB0aGUgYHByb3h5UGF5bWVudGAgbWV0aG9kIGlzIGNhbGxlZCB3aGljaCByZWxheXMgdGhlCiAgICAvLy8gIGV0aGVyIGFuZCBjcmVhdGVzIHRva2VucyBhcyBkZXNjcmliZWQgaW4gdGhlIHRva2VuIGNvbnRyb2xsZXIgY29udHJhY3QKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGlzQ29udHJhY3QoY29udHJvbGxlcikpOwogICAgICAgIHJlcXVpcmUoVG9rZW5Db250cm9sbGVyKGNvbnRyb2xsZXIpLnByb3h5UGF5bWVudC52YWx1ZShtc2cudmFsdWUpKG1zZy5zZW5kZXIpKTsKICAgIH0KCi8vLy8vLy8vLy8KLy8gU2FmZXR5IE1ldGhvZHMKLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIGJ5IHRoZSBjb250cm9sbGVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogICAgLy8vICBzZW50IHRva2VucyB0byB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgeW91IHdhbnQgdG8gcmVjb3ZlcgogICAgLy8vICBzZXQgdG8gMCBpbiBjYXNlIHlvdSB3YW50IHRvIGV4dHJhY3QgZXRoZXIuCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIF90b2tlbikgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBpZiAoX3Rva2VuID09IDB4MCkgewogICAgICAgICAgICBjb250cm9sbGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIE1pbmlNZVRva2VuIHRva2VuID0gTWluaU1lVG9rZW4oX3Rva2VuKTsKICAgICAgICB1aW50IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoY29udHJvbGxlciwgYmFsYW5jZSk7CiAgICAgICAgQ2xhaW1lZFRva2VucyhfdG9rZW4sIGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBFdmVudHMKLy8vLy8vLy8vLy8vLy8vLwogICAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCBhZGRyZXNzIGluZGV4ZWQgX2NvbnRyb2xsZXIsIHVpbnQgX2Ftb3VudCk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX2Ftb3VudCk7CiAgICBldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7CiAgICBldmVudCBBcHByb3ZhbCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX293bmVyLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwKICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICAgICApOwoKfQoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gTWluaU1lVG9rZW5GYWN0b3J5Ci8vLy8vLy8vLy8vLy8vLy8KCi8vLyBAZGV2IFRoaXMgY29udHJhY3QgaXMgdXNlZCB0byBnZW5lcmF0ZSBjbG9uZSBjb250cmFjdHMgZnJvbSBhIGNvbnRyYWN0LgovLy8gIEluIHNvbGlkaXR5IHRoaXMgaXMgdGhlIHdheSB0byBjcmVhdGUgYSBjb250cmFjdCBmcm9tIGEgY29udHJhY3Qgb2YgdGhlCi8vLyAgc2FtZSBjbGFzcwpjb250cmFjdCBNaW5pTWVUb2tlbkZhY3RvcnkgewoKICAgIC8vLyBAbm90aWNlIFVwZGF0ZSB0aGUgREFwcCBieSBjcmVhdGluZyBhIG5ldyB0b2tlbiB3aXRoIG5ldyBmdW5jdGlvbmFsaXRpZXMKICAgIC8vLyAgdGhlIG1zZy5zZW5kZXIgYmVjb21lcyB0aGUgY29udHJvbGxlciBvZiB0aGlzIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9wYXJlbnRUb2tlbiBBZGRyZXNzIG9mIHRoZSB0b2tlbiBiZWluZyBjbG9uZWQKICAgIC8vLyBAcGFyYW0gX3NuYXBzaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwKICAgIC8vLyAgZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuTmFtZSBOYW1lIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2RlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIElmIHRydWUsIHRva2VucyB3aWxsIGJlIGFibGUgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgdG9rZW4gY29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sCiAgICAgICAgdWludCBfc25hcHNob3RCbG9jaywKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wsCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgKSBwdWJsaWMgcmV0dXJucyAoTWluaU1lVG9rZW4pIHsKICAgICAgICBNaW5pTWVUb2tlbiBuZXdUb2tlbiA9IG5ldyBNaW5pTWVUb2tlbigKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgX3BhcmVudFRva2VuLAogICAgICAgICAgICBfc25hcHNob3RCbG9jaywKICAgICAgICAgICAgX3Rva2VuTmFtZSwKICAgICAgICAgICAgX2RlY2ltYWxVbml0cywKICAgICAgICAgICAgX3Rva2VuU3ltYm9sLAogICAgICAgICAgICBfdHJhbnNmZXJzRW5hYmxlZAogICAgICAgICAgICApOwoKICAgICAgICBuZXdUb2tlbi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOwogICAgICAgIHJldHVybiBuZXdUb2tlbjsKICAgIH0KfQoKLyoKICAgIENvcHlyaWdodCAyMDE3LCBXaWxsIEhhcmJvcm5lIChFdGhmaW5leCkKKi8KCmNvbnRyYWN0IE5FQyBpcyBNaW5pTWVUb2tlbiB7CgogIGZ1bmN0aW9uIE5FQygKICAgIGFkZHJlc3MgX3Rva2VuRmFjdG9yeSwKICAgIGFkZHJlc3MgZWZ4VmF1bHRXYWxsZXQKICApIHB1YmxpYyBNaW5pTWVUb2tlbigKICAgIF90b2tlbkZhY3RvcnksCiAgICAweDAsICAgICAgICAgICAgICAgICAgICAvLyBubyBwYXJlbnQgdG9rZW4KICAgIDAsICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHNuYXBzaG90IGJsb2NrIG51bWJlciBmcm9tIHBhcmVudAogICAgIkV0aGZpbmV4IE5lY3RhciBUb2tlbiIsIC8vIFRva2VuIG5hbWUKICAgIDE4LCAgICAgICAgICAgICAgICAgICAgIC8vIERlY2ltYWxzCiAgICAiTkVDIiwgICAgICAgICAgICAgICAgICAvLyBTeW1ib2wKICAgIHRydWUgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSB0cmFuc2ZlcnMKICAgICkgewogICAgICAgIGdlbmVyYXRlVG9rZW5zKGVmeFZhdWx0V2FsbGV0LCAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgICAgICBlbmFibGVCdXJuaW5nKGZhbHNlKTsKICAgIH0KCiAgICAvLyBGbGFnIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgdG9rZW4gY2FuIGJlIGJ1cm5lZCBmb3IgcmV3YXJkcyBvciBub3QKICAgIGJvb2wgcHVibGljIGJ1cm5pbmdFbmFibGVkOwoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gRW5hYmxlIHRva2VuIGJ1cm5pbmcgYnkgdXNlcnMKLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIGVuYWJsZUJ1cm5pbmcoYm9vbCBfYnVybmluZ0VuYWJsZWQpIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgYnVybmluZ0VuYWJsZWQgPSBfYnVybmluZ0VuYWJsZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkFuZFJldHJpZXZlKHVpbnQyNTYgX3Rva2Vuc1RvQnVybikgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYnVybmluZ0VuYWJsZWQpOwoKICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlRnJvbSA9IGJhbGFuY2VPZkF0KG1zZy5zZW5kZXIsIGJsb2NrLm51bWJlcik7CiAgICAgICAgaWYgKHByZXZpb3VzQmFsYW5jZUZyb20gPCBfdG9rZW5zVG9CdXJuKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIEFsZXJ0cyB0aGUgdG9rZW4gY29udHJvbGxlciBvZiB0aGUgYnVybiBmdW5jdGlvbiBjYWxsCiAgICAgICAgLy8gSWYgZW5hYmxlZCwgY29udHJvbGxlciB3aWxsIGRpc3RyaWJ1dGUgZmVlcyBhbmQgZGVzdHJveSB0b2tlbnMKICAgICAgICAvLyBPciBhbnkgb3RoZXIgbG9naWMgY2hvc2VuIGJ5IGNvbnRyb2xsZXIKICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgewogICAgICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vbkJ1cm4obXNnLnNlbmRlciwgX3Rva2Vuc1RvQnVybikpOwogICAgICAgIH0KCiAgICAgICAgQnVybmVkKG1zZy5zZW5kZXIsIF90b2tlbnNUb0J1cm4pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGV2ZW50IEJ1cm5lZChhZGRyZXNzIGluZGV4ZWQgd2hvLCB1aW50MjU2IF9hbW91bnQpOwoKfQoKLy8vIEBkZXYgYE93bmVkYCBpcyBhIGJhc2UgbGV2ZWwgY29udHJhY3QgdGhhdCBhc3NpZ25zIGFuIGBvd25lcmAgdGhhdCBjYW4gYmUKLy8vICBsYXRlciBjaGFuZ2VkCmNvbnRyYWN0IE93bmVkIHsKICAgIC8vLyBAZGV2IGBvd25lcmAgaXMgdGhlIG9ubHkgYWRkcmVzcyB0aGF0IGNhbiBjYWxsIGEgZnVuY3Rpb24gd2l0aCB0aGlzCiAgICAvLy8gbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7IHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOyBfOyB9CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8vIEBub3RpY2UgVGhlIENvbnN0cnVjdG9yIGFzc2lnbnMgdGhlIG1lc3NhZ2Ugc2VuZGVyIHRvIGJlIGBvd25lcmAKICAgIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsgb3duZXIgPSBtc2cuc2VuZGVyO30KCiAgICAvLy8gQG5vdGljZSBgb3duZXJgIGNhbiBzdGVwIGRvd24gYW5kIGFzc2lnbiBzb21lIG90aGVyIGFkZHJlc3MgdG8gdGhpcyByb2xlCiAgICAvLy8gQHBhcmFtIF9uZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLiAweDAgY2FuIGJlIHVzZWQgdG8gY3JlYXRlCiAgICAvLy8gIGFuIHVub3duZWQgbmV1dHJhbCB2YXVsdCwgaG93ZXZlciB0aGF0IGNhbm5vdCBiZSB1bmRvbmUKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgIH0KfQoKLyoKICAgIENvcHlyaWdodCAyMDE3LCBXaWxsIEhhcmJvcm5lIChFdGhmaW5leCkKKi8KCgovLy8gQHRpdGxlIFdoaXRlbGlzdCBjb250cmFjdCAtIE9ubHkgYWRkcmVzc2VzIHdoaWNoIGFyZSByZWdpc3RlcmVkIGFzIHBhcnQgb2YgdGhlIG1hcmtldCBtYWtlciBsb3lhbHR5IHNjaGVtZSBjYW4gYmUgd2hpdGVsaXN0ZWQgdG8gZWFybiBhbmQgb3duIE5lY3RhciB0b2tlbnMKY29udHJhY3QgV2hpdGVsaXN0IGlzIE93bmVkIHsKCiAgYm9vbCBwdWJsaWMgbGlzdEFjdGl2ZSA9IHRydWU7CgogIC8vIE9ubHkgdXNlcnMgd2hvIGFyZSBvbiB0aGUgd2hpdGVsaXN0CiAgZnVuY3Rpb24gaXNSZWdpc3RlcmVkKGFkZHJlc3MgX3VzZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBpZiAoIWxpc3RBY3RpdmUpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaXNPbkxpc3RbX3VzZXJdOwogICAgfQogIH0KCiAgLy8gT25seSBhdXRob3Jpc2VkIHNvdXJjZXMvY29udHJhY3RzIGNhbiBjb250cmlidXRlIGZlZXMgb24gYmVoYWxmIG9mIG1ha2VycyB0byBlYXJuIHRva2VucwogIG1vZGlmaWVyIGF1dGhvcmlzZWQgKCkgewogICAgcmVxdWlyZShpc0F1dGhvcmlzZWRNYWtlclttc2cuc2VuZGVyXSk7CiAgICBfOwogIH0KCiAgLy8gVGhpcyBpcyB0aGUgd2hpdGVsaXN0IG9mIHVzZXJzIHdobyBhcmUgcmVnaXN0ZXJlZCB0byBiZSBhYmxlIHRvIG93biB0aGUgdG9rZW5zCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNPbkxpc3Q7CgogIC8vIFRoaXMgaXMgYSBtb3JlIHNlbGVjdCBsaXN0IG9mIGEgZmV3IGNvbnRyYWN0cyBvciBhZGRyZXNzZXMgd2hpY2ggY2FuIGNvbnRyaWJ1dGUgZmVlcyBvbiBiZWhhbGYgb2YgbWFrZXJzLCB0byBnZW5lcmF0ZSB0b2tlbnMKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc0F1dGhvcmlzZWRNYWtlcjsKCgogIC8vLyBAZGV2IHJlZ2lzdGVyCiAgLy8vIEBwYXJhbSBuZXdVc2VycyAtIEFycmF5IG9mIHVzZXJzIHRvIGFkZCB0byB0aGUgd2hpdGVsaXN0CiAgZnVuY3Rpb24gcmVnaXN0ZXIoYWRkcmVzc1tdIG5ld1VzZXJzKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGZvciAodWludCBpID0gMDsgaSA8IG5ld1VzZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlzT25MaXN0W25ld1VzZXJzW2ldXSA9IHRydWU7CiAgICB9CiAgfQoKICAvLy8gQGRldiBkZXJlZ2lzdGVyCiAgLy8vIEBwYXJhbSBiYW5uZWRVc2VycyAtIEFycmF5IG9mIHVzZXJzIHRvIHJlbW92ZSBmcm9tIHRoZSB3aGl0ZWxpc3QKICBmdW5jdGlvbiBkZXJlZ2lzdGVyKGFkZHJlc3NbXSBiYW5uZWRVc2VycykgcHVibGljIG9ubHlPd25lciB7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBiYW5uZWRVc2Vycy5sZW5ndGg7IGkrKykgewogICAgICBpc09uTGlzdFtiYW5uZWRVc2Vyc1tpXV0gPSBmYWxzZTsKICAgIH0KICB9CgogIC8vLyBAZGV2IGF1dGhvcmlzZU1ha2VyCiAgLy8vIEBwYXJhbSBtYWtlciAtIFNvdXJjZSB0byBhZGQgdG8gYXV0aG9yaXNlZCBjb250cmlidXRvcnMKICBmdW5jdGlvbiBhdXRob3Jpc2VNYWtlcihhZGRyZXNzIG1ha2VyKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgaXNBdXRob3Jpc2VkTWFrZXJbbWFrZXJdID0gdHJ1ZTsKICAgICAgLy8gQWxzbyBhZGQgYW55IGF1dGhvcmlzZWQgTWFrZXIgdG8gdGhlIHdoaXRlbGlzdAogICAgICBhZGRyZXNzW10gbWVtb3J5IG1ha2VycyA9IG5ldyBhZGRyZXNzW10oMSk7CiAgICAgIG1ha2Vyc1swXSA9IG1ha2VyOwogICAgICByZWdpc3RlcihtYWtlcnMpOwogIH0KCiAgLy8vIEBkZXYgZGVhdXRob3Jpc2VNYWtlcgogIC8vLyBAcGFyYW0gbWFrZXIgLSBTb3VyY2UgdG8gcmVtb3ZlIGZyb20gYXV0aG9yaXNlZCBjb250cmlidXRvcnMKICBmdW5jdGlvbiBkZWF1dGhvcmlzZU1ha2VyKGFkZHJlc3MgbWFrZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICBpc0F1dGhvcmlzZWRNYWtlclttYWtlcl0gPSBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIGFjdGl2YXRlV2hpdGVsaXN0KGJvb2wgbmV3U2V0dGluZykgcHVibGljIG9ubHlPd25lciB7CiAgICAgIGxpc3RBY3RpdmUgPSBuZXdTZXR0aW5nOwogIH0KCiAgLy8vLy8vLyBHZXR0ZXJzIHRvIGFsbG93IHRoZSBzYW1lIHdoaXRlbGlzdCB0byBiZSB1c2VkIGFsc28gYnkgb3RoZXIgY29udHJhY3RzIChpbmNsdWRpbmcgdXBncmFkZWQgQ29udHJvbGxlcnMpIC8vLy8vLy8KCiAgZnVuY3Rpb24gZ2V0UmVnaXN0cmF0aW9uU3RhdHVzKGFkZHJlc3MgX3VzZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBpc09uTGlzdFtfdXNlcl07CiAgfQoKICBmdW5jdGlvbiBnZXRBdXRob3Jpc2F0aW9uU3RhdHVzKGFkZHJlc3MgX21ha2VyKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gaXNBdXRob3Jpc2VkTWFrZXJbX21ha2VyXTsKICB9CgogIGZ1bmN0aW9uIGdldE93bmVyKCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgcmV0dXJuIG93bmVyOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKgogICAgQ29weXJpZ2h0IDIwMTgsIFdpbGwgSGFyYm9ybmUgKEV0aGZpbmV4KQoqLwoKY29udHJhY3QgTmVjdGFyQ29udHJvbGxlciBpcyBUb2tlbkNvbnRyb2xsZXIsIFdoaXRlbGlzdCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBORUMgcHVibGljIHRva2VuQ29udHJhY3Q7ICAgLy8gVGhlIG5ldyB0b2tlbiBmb3IgdGhpcyBDYW1wYWlnbgogICAgYWRkcmVzcyBwdWJsaWMgdmF1bHRBZGRyZXNzOyAgICAgICAgLy8gVGhlIGFkZHJlc3MgdG8gaG9sZCB0aGUgZnVuZHMgZG9uYXRlZAoKICAgIHVpbnQgcHVibGljIHBlcmlvZExlbmd0aCA9IDMwOyAgICAgICAvLyBDb250cmlidXRpb24gd2luZG93cyBsZW5ndGggaW4gZGF5cwogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lOyAgICAgICAgICAgICAgLy8gVGltZSBvZiB3aW5kb3cgMSBvcGVuaW5nCgogICAgbWFwcGluZyAodWludCA9PiB1aW50KSBwdWJsaWMgd2luZG93RmluYWxCbG9jazsgIC8vIEZpbmFsIGJsb2NrIGJlZm9yZSBpbml0aWFsaXNhdGlvbiBvZiBuZXcgd2luZG93CgoKICAgIC8vLyBAZGV2IFRoZXJlIGFyZSBzZXZlcmFsIGNoZWNrcyB0byBtYWtlIHN1cmUgdGhlIHBhcmFtZXRlcnMgYXJlIGFjY2VwdGFibGUKICAgIC8vLyBAcGFyYW0gX3ZhdWx0QWRkcmVzcyBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgc3RvcmUgdGhlIGRvbmF0ZWQgZnVuZHMKICAgIC8vLyBAcGFyYW0gX3Rva2VuQWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdCB0aGlzIGNvbnRyYWN0IGNvbnRyb2xzCgogICAgZnVuY3Rpb24gTmVjdGFyQ29udHJvbGxlcigKICAgICAgICBhZGRyZXNzIF92YXVsdEFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfdG9rZW5BZGRyZXNzCiAgICApIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfdmF1bHRBZGRyZXNzICE9IDApOyAgICAgICAgICAgICAgICAvLyBUbyBwcmV2ZW50IGJ1cm5pbmcgRVRICiAgICAgICAgdG9rZW5Db250cmFjdCA9IE5FQyhfdG9rZW5BZGRyZXNzKTsgLy8gVGhlIERlcGxveWVkIFRva2VuIENvbnRyYWN0CiAgICAgICAgdmF1bHRBZGRyZXNzID0gX3ZhdWx0QWRkcmVzczsKICAgICAgICBzdGFydFRpbWUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgd2luZG93RmluYWxCbG9ja1swXSA9IGJsb2NrLm51bWJlci0xOwogICAgfQoKICAgIC8vLyBAZGV2IFRoZSBmYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBldGhlciBpcyBzZW50IHRvIHRoZSBjb250cmFjdCwgaXQKICAgIC8vLyBzaW1wbHkgY2FsbHMgYGRvVGFrZXJQYXltZW50KClgIC4gTm8gdG9rZW5zIGFyZSBjcmVhdGVkIHdoZW4gdGFrZXJzIGNvbnRyaWJ1dGUuCiAgICAvLy8gYF9vd25lcmAuIFBheWFibGUgaXMgYSByZXF1aXJlZCBzb2xpZGl0eSBtb2RpZmllciBmb3IgZnVuY3Rpb25zIHRvIHJlY2VpdmUKICAgIC8vLyBldGhlciwgd2l0aG91dCB0aGlzIG1vZGlmaWVyIGZ1bmN0aW9ucyB3aWxsIHRocm93IGlmIGV0aGVyIGlzIHNlbnQgdG8gdGhlbQoKICAgIGZ1bmN0aW9uICgpICBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgZG9UYWtlclBheW1lbnQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb250cmlidXRlRm9yTWFrZXJzKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgcGF5YWJsZSBhdXRob3Jpc2VkIHsKICAgICAgICBkb01ha2VyUGF5bWVudChfb3duZXIpOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLy8KLy8gVG9rZW5Db250cm9sbGVyIGludGVyZmFjZQovLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIGBwcm94eVBheW1lbnQoKWAgYWxsb3dzIHRoZSBjYWxsZXIgdG8gc2VuZCBldGhlciB0byB0aGUgQ2FtcGFpZ24KICAgIC8vLyBidXQgZG9lcyBub3QgY3JlYXRlIHRva2Vucy4gVGhpcyBmdW5jdGlvbnMgdGhlIHNhbWUgYXMgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uLgogICAgLy8vIEBwYXJhbSBfb3duZXIgRG9lcyBub3QgZG8gYW55dGhpbmcsIGJ1dCBwcmVzZXJ2ZWQgYmVjYXVzZSBvZiBNaW5pTWUgc3RhbmRhcmQgZnVuY3Rpb24uCiAgICBmdW5jdGlvbiBwcm94eVBheW1lbnQoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMoYm9vbCkgewogICAgICAgIGRvVGFrZXJQYXltZW50KCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgYHByb3h5QWNjb3VudGluZ0NyZWF0aW9uKClgIGFsbG93cyBvd25lciB0byBjcmVhdGUgdG9rZW5zIHdpdGhvdXQgc2VuZGluZyBldGhlciB2aWEgdGhlIGNvbnRyYWN0CiAgICAvLy8gQ3JlYXRlcyB0b2tlbnMsIHBsZWRnaW5nIGFuIGFtb3VudCBvZiBldGggdG8gdG9rZW4gaG9sZGVycyBidXQgbm90IHNlbmRpbmcgaXQgdGhyb3VnaCB0aGUgY29udHJhY3QgdG8gdGhlIHZhdWx0CiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgcGVyc29uIHdobyB3aWxsIGhhdmUgdGhlIGNyZWF0ZWQgdG9rZW5zCiAgICBmdW5jdGlvbiBwcm94eUFjY291bnRpbmdDcmVhdGlvbihhZGRyZXNzIF9vd25lciwgdWludCBfcGxlZGdlZEFtb3VudCwgdWludCBfdG9rZW5zVG9DcmVhdGUpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyhib29sKSB7CiAgICAgICAgLy8gRXRoZmluZXggaXMgYSBoeWJyaWQgZGVjZW50cmFsaXNlZCBleGNoYW5nZQogICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgb25seSBmb3IgdXNlIHRvIGNyZWF0ZSB0b2tlbnMgb24gYmVoYWxmIG9mIHVzZXJzIG9mIHRoZSBjZW50cmFsaXNlZCBzaWRlIG9mIEV0aGZpbmV4CiAgICAgICAgLy8gQmVjYXVzZSB0aGVyZSBhcmUgc2V2ZXJhbCBkaWZmZXJlbnQgZmVlIHRpZXJzIChkZXBlbmRpbmcgb24gdHJhZGluZyB2b2x1bWUpIHRva2VuIGNyZWF0aW9uIHJhdGVzIG1heSBub3QgYWx3YXlzIGJlIHByb3BvcnRpb25hbCB0byBmZWVzIGNvbnRyaWJ1dGVkLgogICAgICAgIC8vIEZvciBleGFtcGxlIGlmIGEgdXNlciBpcyB0cmFkaW5nIHdpdGggYSAwLjAyNSUgZmVlIGFzIG9wcG9zZWQgdG8gdGhlIHN0YW5kYXJkIDAuMSUgdGhlIHRva2Vuc1RvQ3JlYXRlIHRoZSBwbGVkZ2VkIGZlZXMgd2lsbCBiZSBsb3dlciB0aGFuIHRocm91Z2ggdXNpbmcgdGhlIHN0YW5kYXJkIGNvbnRyaWJ1dGVGb3JNYWtlcnMgZnVuY3Rpb24KICAgICAgICAvLyBUb2tlbnMgdG8gY3JlYXRlIG11c3QgYmUgY2FsY3VsYXRlZCBvZmYtY2hhaW4gdXNpbmcgdGhlIGlzc3VhbmNlIGVxdWF0aW9uIGFuZCBjdXJyZW50IHBhcmFtZXRlcnMgb2YgdGhpcyBjb250cmFjdCwgbXVsdGlwbGllZCBkZXBlbmRpbmcgb24gdXNlcidzIGZlZSB0aWVyCiAgICAgICAgZG9Qcm94eUFjY291bnRpbmcoX293bmVyLCBfcGxlZGdlZEFtb3VudCwgX3Rva2Vuc1RvQ3JlYXRlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0cmFuc2Zlci4KICAgIC8vLyBUcmFuc2ZlcnMgY2FuIG9ubHkgaGFwcGVuIHRvIHdoaXRlbGlzdGVkIGFkZHJlc3NlcwogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgb3JpZ2luIG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGRlc3RpbmF0aW9uIG9mIHRoZSB0cmFuc2ZlcgogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBGYWxzZSBpZiB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBhdXRob3JpemUgdGhlIHRyYW5zZmVyCiAgICBmdW5jdGlvbiBvblRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZiAoaXNSZWdpc3RlcmVkKF90bykgJiYgaXNSZWdpc3RlcmVkKF9mcm9tKSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYW4gYXBwcm92YWwsIGZvciB0aGlzIENhbXBhaWduIGFsbAogICAgLy8vICBhcHByb3ZhbHMgYXJlIGFsbG93ZWQgYnkgZGVmYXVsdCBhbmQgbm8gZXh0cmEgbm90aWZpY2F0aW9ucyBhcmUgbmVlZGVkCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IGNhbGxzIGBhcHByb3ZlKClgCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBzcGVuZGVyIGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBhcHByb3ZhbAogICAgZnVuY3Rpb24gb25BcHByb3ZlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpIHB1YmxpYwogICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgICBpZiAoaXNSZWdpc3RlcmVkKF9vd25lcikpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGEgYnVybiBhdHRlbXB0LiBJbml0aWFsbHkgYWxsIGJ1cm5zIGFyZSBkaXNhYmxlZC4KICAgIC8vLyBVcGdyYWRlZCBDb250cm9sbGVycyBpbiB0aGUgZnV0dXJlIHdpbGwgYWxsb3cgdG9rZW4gaG9sZGVycyB0byBjbGFpbSB0aGUgcGxlZGdlZCBFVEgKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgY2FsbHMgYGJ1cm4oKWAKICAgIC8vLyBAcGFyYW0gX3Rva2Vuc1RvQnVybiBUaGUgYW1vdW50IGluIHRoZSBgYnVybigpYCBjYWxsCiAgICAvLy8gQHJldHVybiBGYWxzZSBpZiB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBhdXRob3JpemUgdGhlIGFwcHJvdmFsCiAgICBmdW5jdGlvbiBvbkJ1cm4oYWRkcmVzcyBfb3duZXIsIHVpbnQgX3Rva2Vuc1RvQnVybikgcHVibGljCiAgICAgICAgcmV0dXJucyhib29sKQogICAgewogICAgICAgIC8vIFRoaXMgcGx1Z2luIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgdG9rZW4gY29udHJhY3QKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRkcmVzcyh0b2tlbkNvbnRyYWN0KSk7CgogICAgICAgIHVpbnQyNTYgZmVlVG90YWwgPSB0b2tlbkNvbnRyYWN0LnRvdGFsUGxlZGdlZEZlZXMoKTsKICAgICAgICB1aW50MjU2IHRvdGFsVG9rZW5zID0gdG9rZW5Db250cmFjdC50b3RhbFN1cHBseSgpOwogICAgICAgIHVpbnQyNTYgZmVlVmFsdWVPZlRva2VucyA9IChmZWVUb3RhbC5tdWwoX3Rva2Vuc1RvQnVybikpLmRpdih0b3RhbFRva2Vucyk7CgogICAgICAgIC8vIERlc3Ryb3kgdGhlIG93bmVycyB0b2tlbnMgcHJpb3IgdG8gc2VuZGluZyB0aGVtIHRoZSBhc3NvY2lhdGVkIGZlZXMKICAgICAgICByZXF1aXJlICh0b2tlbkNvbnRyYWN0LmRlc3Ryb3lUb2tlbnMoX293bmVyLCBfdG9rZW5zVG9CdXJuKSk7CiAgICAgICAgcmVxdWlyZSAodGhpcy5iYWxhbmNlID49IGZlZVZhbHVlT2ZUb2tlbnMpOwogICAgICAgIHJlcXVpcmUgKF9vd25lci5zZW5kKGZlZVZhbHVlT2ZUb2tlbnMpKTsKCiAgICAgICAgTG9nQ2xhaW0oX293bmVyLCBmZWVWYWx1ZU9mVG9rZW5zKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8vCi8vIE1ha2VyIGFuZCB0YWtlciBmZWUgcGF5bWVudHMgaGFuZGxpbmcKLy8vLy8vLy8vLy8vLy8vLy8KCgogICAgLy8vIEBkZXYgYGRvTWFrZXJQYXltZW50KClgIGlzIGFuIGludGVybmFsIGZ1bmN0aW9uIHRoYXQgc2VuZHMgdGhlIGV0aGVyIHRoYXQgdGhpcwogICAgLy8vICBjb250cmFjdCByZWNlaXZlcyB0byB0aGUgYHZhdWx0YCBhbmQgY3JlYXRlcyB0b2tlbnMgaW4gdGhlIGFkZHJlc3Mgb2YgdGhlCiAgICAvLy8gIGBfb3duZXJgd2hvIHRoZSBmZWUgY29udHJpYnV0aW9uIHdhcyBzZW50IGJ5CiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgaG9sZCB0aGUgbmV3bHkgY3JlYXRlZCB0b2tlbnMKICAgIGZ1bmN0aW9uIGRvTWFrZXJQYXltZW50KGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCB7CgogICAgICAgIHJlcXVpcmUgKCh0b2tlbkNvbnRyYWN0LmNvbnRyb2xsZXIoKSAhPSAwKSAmJiAobXNnLnZhbHVlICE9IDApICk7CiAgICAgICAgdG9rZW5Db250cmFjdC5wbGVkZ2VGZWVzKG1zZy52YWx1ZSk7CiAgICAgICAgcmVxdWlyZSAodmF1bHRBZGRyZXNzLnNlbmQobXNnLnZhbHVlKSk7CgogICAgICAgIC8vIFNldCB0aGUgYmxvY2sgbnVtYmVyIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgaXNzdWFuY2UgcmF0ZSBkdXJpbmcKICAgICAgICAvLyB0aGlzIHdpbmRvdyBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlbiBzZXQKICAgICAgICBpZih3aW5kb3dGaW5hbEJsb2NrW2N1cnJlbnRXaW5kb3coKS0xXSA9PSAwKSB7CiAgICAgICAgICAgIHdpbmRvd0ZpbmFsQmxvY2tbY3VycmVudFdpbmRvdygpLTFdID0gYmxvY2subnVtYmVyIC0xOwogICAgICAgIH0KCiAgICAgICAgdWludDI1NiBuZXdJc3N1YW5jZSA9IGdldEZlZVRvVG9rZW5Db252ZXJzaW9uKG1zZy52YWx1ZSk7CiAgICAgICAgcmVxdWlyZSAodG9rZW5Db250cmFjdC5nZW5lcmF0ZVRva2Vucyhfb3duZXIsIG5ld0lzc3VhbmNlKSk7CgogICAgICAgIExvZ0NvbnRyaWJ1dGlvbnMgKF9vd25lciwgbXNnLnZhbHVlLCB0cnVlKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgLy8vIEBkZXYgYGRvVGFrZXJQYXltZW50KClgIGlzIGFuIGludGVybmFsIGZ1bmN0aW9uIHRoYXQgc2VuZHMgdGhlIGV0aGVyIHRoYXQgdGhpcwogICAgLy8vICBjb250cmFjdCByZWNlaXZlcyB0byB0aGUgYHZhdWx0YCwgY3JlYXRpbmcgbm8gdG9rZW5zCiAgICBmdW5jdGlvbiBkb1Rha2VyUGF5bWVudCgpIGludGVybmFsIHsKCiAgICAgICAgcmVxdWlyZSAoKHRva2VuQ29udHJhY3QuY29udHJvbGxlcigpICE9IDApICYmIChtc2cudmFsdWUgIT0gMCkgKTsKICAgICAgICB0b2tlbkNvbnRyYWN0LnBsZWRnZUZlZXMobXNnLnZhbHVlKTsKICAgICAgICByZXF1aXJlICh2YXVsdEFkZHJlc3Muc2VuZChtc2cudmFsdWUpKTsKCiAgICAgICAgTG9nQ29udHJpYnV0aW9ucyAobXNnLnNlbmRlciwgbXNnLnZhbHVlLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vLyBAZGV2IGBkb1Byb3h5QWNjb3VudGluZygpYCBpcyBhbiBpbnRlcm5hbCBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdG9rZW5zCiAgICAvLy8gZm9yIGZlZXMgcGxlZGdlZCBieSB0aGUgb3duZXIKICAgIGZ1bmN0aW9uIGRvUHJveHlBY2NvdW50aW5nKGFkZHJlc3MgX293bmVyLCB1aW50IF9wbGVkZ2VkQW1vdW50LCB1aW50IF90b2tlbnNUb0NyZWF0ZSkgaW50ZXJuYWwgewoKICAgICAgICByZXF1aXJlICgodG9rZW5Db250cmFjdC5jb250cm9sbGVyKCkgIT0gMCkpOwogICAgICAgIGlmKHdpbmRvd0ZpbmFsQmxvY2tbY3VycmVudFdpbmRvdygpLTFdID09IDApIHsKICAgICAgICAgICAgd2luZG93RmluYWxCbG9ja1tjdXJyZW50V2luZG93KCktMV0gPSBibG9jay5udW1iZXIgLTE7CiAgICAgICAgfQogICAgICAgIHRva2VuQ29udHJhY3QucGxlZGdlRmVlcyhfcGxlZGdlZEFtb3VudCk7CgogICAgICAgIGlmKF90b2tlbnNUb0NyZWF0ZSA+IDApIHsKICAgICAgICAgICAgdWludDI1NiBuZXdJc3N1YW5jZSA9IGdldEZlZVRvVG9rZW5Db252ZXJzaW9uKF9wbGVkZ2VkQW1vdW50KTsKICAgICAgICAgICAgcmVxdWlyZSAodG9rZW5Db250cmFjdC5nZW5lcmF0ZVRva2Vucyhfb3duZXIsIF90b2tlbnNUb0NyZWF0ZSkpOwogICAgICAgIH0KCiAgICAgICAgTG9nQ29udHJpYnV0aW9ucyAobXNnLnNlbmRlciwgX3BsZWRnZWRBbW91bnQsIHRydWUpOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgb25seU93bmVyYCBjaGFuZ2VzIHRoZSBsb2NhdGlvbiB0aGF0IGV0aGVyIGlzIHNlbnQKICAgIC8vLyBAcGFyYW0gX25ld1ZhdWx0QWRkcmVzcyBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgc3RvcmUgdGhlIGZlZXMgY29sbGVjdGVkCiAgICBmdW5jdGlvbiBzZXRWYXVsdChhZGRyZXNzIF9uZXdWYXVsdEFkZHJlc3MpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHZhdWx0QWRkcmVzcyA9IF9uZXdWYXVsdEFkZHJlc3M7CiAgICB9CgogICAgLy8vIEBub3RpY2UgYG9ubHlPd25lcmAgY2FuIHVwZ3JhZGUgdGhlIGNvbnRyb2xsZXIgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX25ld0NvbnRyb2xsZXJBZGRyZXNzIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBoYXZlIHRoZSB0b2tlbiBjb250cm9sIGxvZ2ljCiAgICBmdW5jdGlvbiB1cGdyYWRlQ29udHJvbGxlcihhZGRyZXNzIF9uZXdDb250cm9sbGVyQWRkcmVzcykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgdG9rZW5Db250cmFjdC5jaGFuZ2VDb250cm9sbGVyKF9uZXdDb250cm9sbGVyQWRkcmVzcyk7CiAgICAgICAgVXBncmFkZWRDb250cm9sbGVyKF9uZXdDb250cm9sbGVyQWRkcmVzcyk7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vLwovLyBJc3N1YW5jZSByZXdhcmQgcmVsYXRlZCBmdW5jdGlvbnMgLSB1cGdyYWRlZCBieSBjaGFuZ2luZyBjb250cm9sbGVyCi8vLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgZ2V0RmVlVG9Ub2tlbkNvbnZlcnNpb24gLSBDb250cm9sbGVyIGNvdWxkIGJlIGNoYW5nZWQgaW4gdGhlIGZ1dHVyZSB0byB1cGRhdGUgdGhpcyBmdW5jdGlvbgogICAgLy8vIEBwYXJhbSBfY29udHJpYnV0ZWQgLSBUaGUgdmFsdWUgb2YgZmVlcyBjb250cmlidXRlZCBkdXJpbmcgdGhlIHdpbmRvdwogICAgZnVuY3Rpb24gZ2V0RmVlVG9Ub2tlbkNvbnZlcnNpb24odWludDI1NiBfY29udHJpYnV0ZWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CgogICAgICAgIC8vIEZZSSB0aGlzIGFzc3VtZXMgYSBmaXhlZCBtYWtlciB0cmFkaW5nIGZlZSBvZiAwLjElCiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgZGlmZmVyZW50IGZlZSBzY2hlZHVsZXMgd2VyZSB1c2VkIGZvciBtYWtlciBkaXNjb3VudHMKICAgICAgICAvLyBpLmUuIDAuMDI1JSAtIDQgdGltZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgd291bGQgYmUgZ2VuZXJhdGVkIHBlciBmZWUKICAgICAgICAvLyBTaW5jZSB0aGVzZSBmZWUgZGlzY291bnRzIGFyZSBvbmx5IGF2YWlsYWJsZSB2aWEgdGhlIGNlbnRyYWxpc2VkIHBhcnQgb2YgRXRoZmluZXgKCiAgICAgICAgdWludCBjYWxjdWxhdGlvbkJsb2NrID0gd2luZG93RmluYWxCbG9ja1tjdXJyZW50V2luZG93KCktMV07CiAgICAgICAgdWludDI1NiBwcmV2aW91c1N1cHBseSA9IHRva2VuQ29udHJhY3QudG90YWxTdXBwbHlBdChjYWxjdWxhdGlvbkJsb2NrKTsKICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHkgPSB0b2tlbkNvbnRyYWN0LnRvdGFsU3VwcGx5QXQod2luZG93RmluYWxCbG9ja1swXSk7CiAgICAgICAgdWludDI1NiBmZWVUb3RhbCA9IHRva2VuQ29udHJhY3QudG90YWxQbGVkZ2VkRmVlc0F0KGNhbGN1bGF0aW9uQmxvY2spOwogICAgICAgIHVpbnQyNTYgbmV3VG9rZW5zID0gKF9jb250cmlidXRlZC5tdWwocHJldmlvdXNTdXBwbHkuZGl2KDEwMDApKS5kaXYoKGluaXRpYWxTdXBwbHkuZGl2KDEwMDApKS5hZGQoZmVlVG90YWwpKSkubXVsKDEwMDApOwogICAgICAgIHJldHVybiBuZXdUb2tlbnM7CiAgICB9CgogICAgZnVuY3Rpb24gY3VycmVudFdpbmRvdygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICByZXR1cm4gd2luZG93QXQoYmxvY2sudGltZXN0YW1wKTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aW5kb3dBdCh1aW50IHRpbWVzdGFtcCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgcmV0dXJuIHRpbWVzdGFtcCA8IHN0YXJ0VGltZQogICAgICAgICAgPyAwCiAgICAgICAgICA6IHRpbWVzdGFtcC5zdWIoc3RhcnRUaW1lKS5kaXYocGVyaW9kTGVuZ3RoICogMSBkYXlzKSArIDE7CiAgICB9CgogICAgLy8vIEBkZXYgdG9wVXBCYWxhbmNlIC0gVGhpcyBpcyBvbmx5IHVzZWQgdG8gaW5jcmVhc2UgdGhpcy5iYWxhbmNlIGluIHRoZSBjYXNlIHRoaXMgY29udHJvbGxlciBpcyB1c2VkIHRvIGFsbG93IGJ1cm5pbmcKICAgIGZ1bmN0aW9uIHRvcFVwQmFsYW5jZSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICAvLyBQbGVkZ2VkIGZlZXMgY291bGQgYmUgc2VudCBoZXJlIGFuZCB1c2VkIHRvIHBheW91dCB1c2VycyB3aG8gYnVybiB0aGVpciB0b2tlbnMKICAgICAgICBMb2dGZWVUb3BVcChtc2cudmFsdWUpOwogICAgfQoKICAgIC8vLyBAZGV2IGV2YWN1YXRlVG9WYXVsdCAtIFRoaXMgaXMgb25seSB1c2VkIHRvIGV2YWN1YXRlIHJlbWFpbmluZyB0byBldGhlciBmcm9tIHRoaXMgY29udHJhY3QgdG8gdGhlIHZhdWx0IGFkZHJlc3MKICAgIGZ1bmN0aW9uIGV2YWN1YXRlVG9WYXVsdCgpIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgICAgdmF1bHRBZGRyZXNzLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgTG9nRmVlRXZhY3VhdGlvbih0aGlzLmJhbGFuY2UpOwogICAgfQoKICAgIC8vLyBAZGV2IGVuYWJsZUJ1cm5pbmcgLSBBbGxvd3MgdGhlIG93bmVyIHRvIGFjdGl2YXRlIGJ1cm5pbmcgb24gdGhlIHVuZGVybHlpbmcgdG9rZW4gY29udHJhY3QKICAgIGZ1bmN0aW9uIGVuYWJsZUJ1cm5pbmcoYm9vbCBfYnVybmluZ0VuYWJsZWQpIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgICAgdG9rZW5Db250cmFjdC5lbmFibGVCdXJuaW5nKF9idXJuaW5nRW5hYmxlZCk7CiAgICB9CgoKLy8vLy8vLy8vLwovLyBTYWZldHkgTWV0aG9kcwovLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgYnkgdGhlIG93bmVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogICAgLy8vICBzZW50IHRva2VucyB0byB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgeW91IHdhbnQgdG8gcmVjb3ZlcgogICAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoYWRkcmVzcyBfdG9rZW4pIHB1YmxpYyBvbmx5T3duZXIgewoKICAgICAgICBORUMgdG9rZW4gPSBORUMoX3Rva2VuKTsKICAgICAgICB1aW50IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIob3duZXIsIGJhbGFuY2UpOwogICAgICAgIENsYWltZWRUb2tlbnMoX3Rva2VuLCBvd25lciwgYmFsYW5jZSk7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEV2ZW50cwovLy8vLy8vLy8vLy8vLy8vCiAgICBldmVudCBDbGFpbWVkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfY29udHJvbGxlciwgdWludCBfYW1vdW50KTsKCiAgICBldmVudCBMb2dGZWVUb3BVcCh1aW50IF9hbW91bnQpOwogICAgZXZlbnQgTG9nRmVlRXZhY3VhdGlvbih1aW50IF9hbW91bnQpOwogICAgZXZlbnQgTG9nQ29udHJpYnV0aW9ucyAoYWRkcmVzcyBfdXNlciwgdWludCBfYW1vdW50LCBib29sIF9tYWtlcik7CiAgICBldmVudCBMb2dDbGFpbSAoYWRkcmVzcyBfdXNlciwgdWludCBfYW1vdW50KTsKCiAgICBldmVudCBVcGdyYWRlZENvbnRyb2xsZXIgKGFkZHJlc3MgbmV3QWRkcmVzcyk7CgoKfQ=='.
	

]
