Class {
	#name : #SRT3b5ac9b572a62618d2954951ff1469db85620d32,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b5ac9b572a62618d2954951ff1469db85620d32 >> base64 [
	^ ''.
	

]
