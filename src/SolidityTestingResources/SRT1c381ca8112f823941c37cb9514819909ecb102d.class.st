Class {
	#name : #SRT1c381ca8112f823941c37cb9514819909ecb102d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1c381ca8112f823941c37cb9514819909ecb102d >> base64 [
	^ ''.
	

]
