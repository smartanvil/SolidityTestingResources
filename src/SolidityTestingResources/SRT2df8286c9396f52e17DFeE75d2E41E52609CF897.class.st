Class {
	#name : #SRT2df8286c9396f52e17DFeE75d2E41E52609CF897,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2df8286c9396f52e17DFeE75d2E41E52609CF897 >> base64 [
	^ ''.
	

]
