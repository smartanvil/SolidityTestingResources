Class {
	#name : #SRTc654ec1fc5a1c76a19bf169ef2765cef23cdd236,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc654ec1fc5a1c76a19bf169ef2765cef23cdd236 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBBYnN0cmFjdFRva2VuIHsKICAgIC8vIFRoaXMgaXMgbm90IGFuIGFic3RyYWN0IGZ1bmN0aW9uLCBiZWNhdXNlIHNvbGMgd29uJ3QgcmVjb2duaXplIGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGZvciBwdWJsaWMgdmFyaWFibGVzIGFzIGZ1bmN0aW9ucwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBJc3N1YW5jZShhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Ci8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiAhPSAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG11bEJ5RnJhY3Rpb24odWludDI1NiBudW1iZXIsIHVpbnQyNTYgbnVtZXJhdG9yLCB1aW50MjU2IGRlbm9taW5hdG9yKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHJldHVybiBkaXYobXVsKG51bWJlciwgbnVtZXJhdG9yKSwgZGVub21pbmF0b3IpOwogIH0KfQoKY29udHJhY3QgUHJlSWNvIGlzIFNhZmVNYXRoIHsKICAgIC8qCiAgICAgKiBQcmVJY28gbWV0YSBkYXRhCiAgICAgKi8KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJSZW1lY2hhaW4gUHJlc2FsZSBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJpUk1DIjsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgLy8gYWRkcmVzc2VzIG9mIG1hbmFnZXJzCiAgICBhZGRyZXNzIHB1YmxpYyBtYW5hZ2VyOwogICAgYWRkcmVzcyBwdWJsaWMgcmVzZXJ2ZU1hbmFnZXI7CiAgICAvLyBhZGRyZXNzZXMgb2YgZXNjcm93cwogICAgYWRkcmVzcyBwdWJsaWMgZXNjcm93OwogICAgYWRkcmVzcyBwdWJsaWMgcmVzZXJ2ZUVzY3JvdzsKCiAgICAvLyBCQVNFID0gMTBeMTgKICAgIHVpbnQgY29uc3RhbnQgQkFTRSA9IDEwMDAwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8gYW1vdW50IG9mIHN1cHBsaWVkIHRva2VucwogICAgdWludCBwdWJsaWMgdG9rZW5zU3VwcGxpZWQgPSAwOwogICAgLy8gYW1vdW50IG9mIHN1cHBsaWVkIGJvdW50eSByZXdhcmQKICAgIHVpbnQgcHVibGljIGJvdW50eVN1cHBsaWVkID0gMDsKICAgIC8vIFNvZnQgY2FwYWNpdHkgPSA2MjUwIEVUSAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgU09GVF9DQVBBQ0lUWSA9IDIwMDAwMDAgKiBCQVNFOwogICAgLy8gSGFyZCBjYXBhY2l0eSA9IDE4NzUwIEVUSAogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9LRU5TX1NVUFBMWSA9IDYwMDAwMDAgKiBCQVNFOwogICAgLy8gQW1vdW50IG9mIGJvdW50eSByZXdhcmQKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEJPVU5UWV9TVVBQTFkgPSAzNTAwMDAgKiBCQVNFOwogICAgLy8gVG90YWwgc3VwcGx5CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCB0b3RhbFN1cHBseSA9IFRPS0VOU19TVVBQTFkgKyBCT1VOVFlfU1VQUExZOwoKICAgIC8vIDEgUk1DID0gMC4wMDMxMjUgRVRIIGZvciAgNjAwIDAwMCAwMDAgUk1DCgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9LRU5fUFJJQ0UgPSAzMTI1MDAwMDAwMDAwMDAwOwogICAgdWludCB0b2tlbkFtb3VudDEgPSA2MDAwMDAwICogQkFTRTsKCiAgICB1aW50IHRva2VuUHJpY2VNdWx0aXBseTEgPSAxOwogICAgdWludCB0b2tlblByaWNlRGl2aWRlMSA9IDE7CgogICAgdWludFtdIHB1YmxpYyB0b2tlblByaWNlTXVsdGlwbGllczsKICAgIHVpbnRbXSBwdWJsaWMgdG9rZW5QcmljZURpdmlkZXM7CiAgICB1aW50W10gcHVibGljIHRva2VuQW1vdW50czsKCiAgICAvLyBFVEggYmFsYW5jZXMgb2YgYWNjb3VudHMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgZXRoQmFsYW5jZXM7CiAgICB1aW50W10gcHVibGljIHByaWNlczsKICAgIHVpbnRbXSBwdWJsaWMgYW1vdW50czsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHJpdmF0ZSBiYWxhbmNlczsKCiAgICAvLyAyMDE4LjAyLjI1IDE3OjAwIE1TSwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZGVmYXVsdERlYWRsaW5lID0gMTUxOTU2NzIwMDsKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lID0gZGVmYXVsdERlYWRsaW5lOwoKICAgIC8vIElzIElDTyBmcm96ZW4KICAgIGJvb2wgcHVibGljIGlzSWNvU3RvcHBlZCA9IGZhbHNlOwoKICAgIC8vIEFkZHJlc3NlcyBvZiBhbGxvd2VkIHRva2VucyBmb3IgYnV5aW5nCiAgICBhZGRyZXNzW10gcHVibGljIGFsbG93ZWRUb2tlbnM7CiAgICAvLyBBbW91bnQgb2YgdG9rZW4KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgdG9rZW5BbW91bnQ7CiAgICAvLyBQcmljZSBvZiBjdXJyZW50IHRva2VuIGFtb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyB0b2tlblByaWNlOwoKICAgIC8vIEZ1bGwgdXNlcnMgbGlzdAogICAgYWRkcmVzc1tdIHB1YmxpYyB1c2Vyc0xpc3Q7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgaXNVc2VySW5MaXN0OwogICAgLy8gTnVtYmVyIG9mIHVzZXJzIHRoYXQgaGF2ZSByZXR1cm5lZCB0aGVpciBtb25leQogICAgdWludCBudW1iZXJPZlVzZXJzUmV0dXJuZWQgPSAwOwoKICAgIC8vIHVzZXIgPT4gdG9rZW5bXQogICAgbWFwcGluZyhhZGRyZXNzID0+IGFkZHJlc3NbXSkgcHVibGljIHVzZXJUb2tlbnM7CiAgICAvLyAgdXNlciA9PiB0b2tlbiA9PiBhbW91bnQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkpIHB1YmxpYyB1c2VyVG9rZW5zVmFsdWVzOwoKICAgIC8qCiAgICAgKiBFdmVudHMKICAgICAqLwoKICAgIGV2ZW50IEJ1eVRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3VzZXIsIHVpbnQgX2V0aFZhbHVlLCB1aW50IF9ib3VnaHRUb2tlbnMpOwogICAgZXZlbnQgQnV5VG9rZW5zV2l0aFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3VzZXIsIGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIHVpbnQgX3Rva2VuVmFsdWUsIHVpbnQgX2JvdWdodFRva2Vucyk7CiAgICBldmVudCBHaXZlUmV3YXJkKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKCiAgICBldmVudCBJY29TdG9wcGVkTWFudWFsbHkoKTsKICAgIGV2ZW50IEljb1J1bm5lZE1hbnVhbGx5KCk7CgogICAgZXZlbnQgV2l0aGRyYXdFdGhlcihhZGRyZXNzIGluZGV4ZWQgX2VzY3JvdywgdWludCBfZXRoVmFsdWUpOwogICAgZXZlbnQgV2l0aGRyYXdUb2tlbihhZGRyZXNzIGluZGV4ZWQgX2VzY3JvdywgYWRkcmVzcyBpbmRleGVkIF90b2tlbiwgdWludCBfdmFsdWUpOwogICAgZXZlbnQgUmV0dXJuRXRoZXJzRm9yKGFkZHJlc3MgaW5kZXhlZCBfdXNlciwgdWludCBfdmFsdWUpOwogICAgZXZlbnQgUmV0dXJuVG9rZW5zRm9yKGFkZHJlc3MgaW5kZXhlZCBfdXNlciwgYWRkcmVzcyBpbmRleGVkIF90b2tlbiwgdWludCBfdmFsdWUpOwoKICAgIGV2ZW50IEFkZFRva2VuKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIHVpbnQgX2Ftb3VudCwgdWludCBfcHJpY2UpOwogICAgZXZlbnQgUmVtb3ZlVG9rZW4oYWRkcmVzcyBpbmRleGVkIF90b2tlbik7CgogICAgZXZlbnQgTW92ZVRva2VucyhhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwoKICAgIC8qCiAgICAgKiBNb2RpZmllcnMKICAgICAqLwoKICAgIG1vZGlmaWVyIG9ubHlNYW5hZ2VyIHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBtYW5hZ2VyIHx8IG1zZy5zZW5kZXIgPT0gcmVzZXJ2ZU1hbmFnZXIpOwogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBvbmx5TWFuYWdlck9yQ29udHJhY3QgewogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IG1hbmFnZXIgfHwgbXNnLnNlbmRlciA9PSByZXNlcnZlTWFuYWdlciB8fCBtc2cuc2VuZGVyID09IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBJY29Jc0FjdGl2ZSB7CiAgICAgICAgYXNzZXJ0KGlzSWNvQWN0aXZlKCkpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yIG9mIFByZUljby4KICAgIC8vLyBAcGFyYW0gX21hbmFnZXIgQWRkcmVzcyBvZiBtYW5hZ2VyCiAgICAvLy8gQHBhcmFtIF9yZXNlcnZlTWFuYWdlciBBZGRyZXNzIG9mIHJlc2VydmUgbWFuYWdlcgogICAgLy8vIEBwYXJhbSBfZXNjcm93IEFkZHJlc3Mgb2YgZXNjcm93CiAgICAvLy8gQHBhcmFtIF9yZXNlcnZlRXNjcm93IEFkZHJlc3Mgb2YgcmVzZXJ2ZSBlc2Nyb3cKICAgIC8vLyBAcGFyYW0gX2RlYWRsaW5lIElDTyBkZWFkbGluZSB0aW1lc3RhbXAuIElmIGlzIDAsIHNldHMgMTUxNTY3OTIwMAogICAgZnVuY3Rpb24gUHJlSWNvKGFkZHJlc3MgX21hbmFnZXIsIGFkZHJlc3MgX3Jlc2VydmVNYW5hZ2VyLCBhZGRyZXNzIF9lc2Nyb3csIGFkZHJlc3MgX3Jlc2VydmVFc2Nyb3csIHVpbnQgX2RlYWRsaW5lKSBwdWJsaWMgewogICAgICAgIGFzc2VydChfbWFuYWdlciAhPSAweDApOwogICAgICAgIGFzc2VydChfcmVzZXJ2ZU1hbmFnZXIgIT0gMHgwKTsKICAgICAgICBhc3NlcnQoX2VzY3JvdyAhPSAweDApOwogICAgICAgIGFzc2VydChfcmVzZXJ2ZUVzY3JvdyAhPSAweDApOwoKICAgICAgICBtYW5hZ2VyID0gX21hbmFnZXI7CiAgICAgICAgcmVzZXJ2ZU1hbmFnZXIgPSBfcmVzZXJ2ZU1hbmFnZXI7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgICAgICByZXNlcnZlRXNjcm93ID0gX3Jlc2VydmVFc2Nyb3c7CgogICAgICAgIGlmIChfZGVhZGxpbmUgIT0gMCkgewogICAgICAgICAgICBkZWFkbGluZSA9IF9kZWFkbGluZTsKICAgICAgICB9CiAgICAgICAgdG9rZW5QcmljZU11bHRpcGxpZXMucHVzaCh0b2tlblByaWNlTXVsdGlwbHkxKTsKICAgICAgICB0b2tlblByaWNlRGl2aWRlcy5wdXNoKHRva2VuUHJpY2VEaXZpZGUxKTsKICAgICAgICB0b2tlbkFtb3VudHMucHVzaCh0b2tlbkFtb3VudDEpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdG9rZW4gYmFsYW5jZSBvZiB1c2VyLiAxIHRva2VuID0gMS8xMF4xOCBSTUMKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfdXNlcikgcHVibGljIHJldHVybnModWludCBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW191c2VyXTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zLCBpcyBJQ08gZW5hYmxlZAogICAgZnVuY3Rpb24gaXNJY29BY3RpdmUoKSBwdWJsaWMgcmV0dXJucyhib29sIGlzQWN0aXZlKSB7CiAgICAgICAgcmV0dXJuICFpc0ljb1N0b3BwZWQgJiYgbm93IDwgZGVhZGxpbmU7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucywgaXMgU29mdENhcCByZWFjaGVkCiAgICBmdW5jdGlvbiBpc0ljb1N1Y2Nlc3NmdWwoKSBwdWJsaWMgcmV0dXJucyhib29sIGlzU3VjY2Vzc2Z1bCkgewogICAgICAgIHJldHVybiB0b2tlbnNTdXBwbGllZCA+PSBTT0ZUX0NBUEFDSVRZOwogICAgfQoKICAgIC8vLyBAZGV2IENhbGN1bGF0ZXMgbnVtYmVyIG9mIHRva2VucyBSTUMgZm9yIGJ1eWluZyB3aXRoIGN1c3RvbSBwcmljZSBvZiB0b2tlbgogICAgLy8vIEBwYXJhbSBfYW1vdW50T2ZUb2tlbiBBbW91bnQgb2YgUk1DIHRva2VuCiAgICAvLy8gQHBhcmFtIF9wcmljZUFtb3VudE9mVG9rZW4gUHJpY2Ugb2YgYW1vdW50IG9mIFJNQwogICAgLy8vIEBwYXJhbSBfdmFsdWUgQW1vdW50IG9mIGN1c3RvbSB0b2tlbgogICAgZnVuY3Rpb24gZ2V0VG9rZW5zQW1vdW50KHVpbnQgX2Ftb3VudE9mVG9rZW4sIHVpbnQgX3ByaWNlQW1vdW50T2ZUb2tlbiwgIHVpbnQgX3ZhbHVlKSBwcml2YXRlIHJldHVybnModWludCB0b2tlbnNUb0J1eSkgewogICAgICAgIHVpbnQgY3VycmVudFN0ZXA7CiAgICAgICAgdWludCB0b2tlbnNSZW1vdmVkID0gdG9rZW5zU3VwcGxpZWQ7CiAgICAgICAgZm9yIChjdXJyZW50U3RlcCA9IDA7IGN1cnJlbnRTdGVwIDwgdG9rZW5BbW91bnRzLmxlbmd0aDsgY3VycmVudFN0ZXArKykgewogICAgICAgICAgICBpZiAodG9rZW5zUmVtb3ZlZCA+PSB0b2tlbkFtb3VudHNbY3VycmVudFN0ZXBdKSB7CiAgICAgICAgICAgICAgICB0b2tlbnNSZW1vdmVkIC09IHRva2VuQW1vdW50c1tjdXJyZW50U3RlcF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBhc3NlcnQoY3VycmVudFN0ZXAgPCB0b2tlbkFtb3VudHMubGVuZ3RoKTsKCiAgICAgICAgdWludCByZXN1bHQgPSAwOwoKICAgICAgICBmb3IgKDsgY3VycmVudFN0ZXAgPD0gdG9rZW5BbW91bnRzLmxlbmd0aDsgY3VycmVudFN0ZXArKykgewogICAgICAgICAgICBhc3NlcnQoY3VycmVudFN0ZXAgPCB0b2tlbkFtb3VudHMubGVuZ3RoKTsKCiAgICAgICAgICAgIHVpbnQgdG9rZW5PblN0ZXBMZWZ0ID0gdG9rZW5BbW91bnRzW2N1cnJlbnRTdGVwXSAtIHRva2Vuc1JlbW92ZWQ7CiAgICAgICAgICAgIHRva2Vuc1JlbW92ZWQgPSAwOwogICAgICAgICAgICB1aW50IGhvd01hbnlUb2tlbnNDYW5CdXkgPSBfdmFsdWUKICAgICAgICAgICAgICAgICAgICAqIF9hbW91bnRPZlRva2VuIC8gX3ByaWNlQW1vdW50T2ZUb2tlbgogICAgICAgICAgICAgICAgICAgICogdG9rZW5QcmljZURpdmlkZXNbY3VycmVudFN0ZXBdIC8gdG9rZW5QcmljZU11bHRpcGxpZXNbY3VycmVudFN0ZXBdOwoKICAgICAgICAgICAgaWYgKGhvd01hbnlUb2tlbnNDYW5CdXkgPiB0b2tlbk9uU3RlcExlZnQpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFkZChyZXN1bHQsIHRva2VuT25TdGVwTGVmdCk7CiAgICAgICAgICAgICAgICB1aW50IHNwZW50ID0gdG9rZW5PblN0ZXBMZWZ0CiAgICAgICAgICAgICAgICAgICAgKiBfcHJpY2VBbW91bnRPZlRva2VuIC8gX2Ftb3VudE9mVG9rZW4KICAgICAgICAgICAgICAgICAgICAqIHRva2VuUHJpY2VNdWx0aXBsaWVzW2N1cnJlbnRTdGVwXSAvIHRva2VuUHJpY2VEaXZpZGVzW2N1cnJlbnRTdGVwXTsKICAgICAgICAgICAgICAgIGlmIChfdmFsdWUgPD0gc3BlbnQpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF92YWx1ZSAtPSBzcGVudDsKICAgICAgICAgICAgICAgIHRva2Vuc1JlbW92ZWQgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gYWRkKHJlc3VsdCwgaG93TWFueVRva2Vuc0NhbkJ1eSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIG51bWJlciBvZiB0b2tlbnMgUk1DIGZvciBidXlpbmcgd2l0aCBFVEgKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiBFVEggdG9rZW4KICAgIGZ1bmN0aW9uIGdldFRva2Vuc0Ftb3VudFdpdGhFdGgodWludCBfdmFsdWUpIHByaXZhdGUgcmV0dXJucyh1aW50IHRva2Vuc1RvQnV5KSB7CiAgICAgICAgcmV0dXJuIGdldFRva2Vuc0Ftb3VudChCQVNFLCBUT0tFTl9QUklDRSwgX3ZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIG51bWJlciBvZiB0b2tlbnMgUk1DIGZvciBidXlpbmcgd2l0aCBFUkMtMjAgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgRVJDLTIwIHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblZhbHVlIEFtb3VudCBvZiBFVEggdG9rZW4KICAgIGZ1bmN0aW9uIGdldFRva2Vuc0Ftb3VudEJ5VG9rZW5zKGFkZHJlc3MgX3Rva2VuLCB1aW50IF90b2tlblZhbHVlKSBwcml2YXRlIHJldHVybnModWludCB0b2tlbnNUb0J1eSkgewogICAgICAgIGFzc2VydCh0b2tlblByaWNlW190b2tlbl0gPiAwKTsKICAgICAgICByZXR1cm4gZ2V0VG9rZW5zQW1vdW50KHRva2VuUHJpY2VbX3Rva2VuXSwgdG9rZW5BbW91bnRbX3Rva2VuXSwgX3Rva2VuVmFsdWUpOwogICAgfQoKICAgIC8vLyBAZGV2IFNvbGRzIHRva2VucyBmb3IgdXNlciBieSBFVEgKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyIHdoaWNoIGJ1eXMgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiBFVEguIDEgX3ZhbHVlID0gMS8xMF4xOCBFVEgKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIF91c2VyLCB1aW50IF92YWx1ZSkgcHJpdmF0ZSBJY29Jc0FjdGl2ZSB7CiAgICAgICAgdWludCBib3VnaHRUb2tlbnMgPSBnZXRUb2tlbnNBbW91bnRXaXRoRXRoKF92YWx1ZSk7CiAgICAgICAgYnVyblRva2Vucyhib3VnaHRUb2tlbnMpOwoKICAgICAgICBiYWxhbmNlc1tfdXNlcl0gPSBhZGQoYmFsYW5jZXNbX3VzZXJdLCBib3VnaHRUb2tlbnMpOwogICAgICAgIGFkZFVzZXJUb0xpc3QoX3VzZXIpOwogICAgICAgIEJ1eVRva2VucyhfdXNlciwgX3ZhbHVlLCBib3VnaHRUb2tlbnMpOwogICAgfQoKICAgIC8vLyBAZGV2IE1ha2VzIEVSQy0yMCB0b2tlbiBzZWxsYWJsZQogICAgLy8vIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMtMjAgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgY3VycmVudCB0b2tlbgogICAgLy8vIEBwYXJhbSBfcHJpY2UgUHJpY2Ugb2YgX2Ftb3VudCBvZiB0b2tlbgogICAgZnVuY3Rpb24gYWRkVG9rZW4oYWRkcmVzcyBfdG9rZW4sIHVpbnQgX2Ftb3VudCwgdWludCBfcHJpY2UpIG9ubHlNYW5hZ2VyIHB1YmxpYyB7CiAgICAgICAgYXNzZXJ0KF90b2tlbiAhPSAweDApOwogICAgICAgIGFzc2VydChfYW1vdW50ID4gMCk7CiAgICAgICAgYXNzZXJ0KF9wcmljZSA+IDApOwoKICAgICAgICBib29sIGlzTmV3VG9rZW4gPSB0cnVlOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsbG93ZWRUb2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFsbG93ZWRUb2tlbnNbaV0gPT0gX3Rva2VuKSB7CiAgICAgICAgICAgICAgICBpc05ld1Rva2VuID0gZmFsc2U7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaXNOZXdUb2tlbikgewogICAgICAgICAgICBhbGxvd2VkVG9rZW5zLnB1c2goX3Rva2VuKTsKICAgICAgICB9CgogICAgICAgIHRva2VuUHJpY2VbX3Rva2VuXSA9IF9wcmljZTsKICAgICAgICB0b2tlbkFtb3VudFtfdG9rZW5dID0gX2Ftb3VudDsKICAgIH0KCiAgICAvLy8gQGRldiBNYWtlcyBFUkMtMjAgdG9rZW4gbm90IHNlbGxhYmxlCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gcmVtb3ZlVG9rZW4oYWRkcmVzcyBfdG9rZW4pIG9ubHlNYW5hZ2VyIHB1YmxpYyB7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWxsb3dlZFRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoX3Rva2VuID09IGFsbG93ZWRUb2tlbnNbaV0pIHsKICAgICAgICAgICAgICAgIGlmIChpIDwgYWxsb3dlZFRva2Vucy5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFRva2Vuc1tpXSA9IGFsbG93ZWRUb2tlbnNbYWxsb3dlZFRva2Vucy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFsbG93ZWRUb2tlbnNbYWxsb3dlZFRva2Vucy5sZW5ndGggLSAxXSA9IDB4MDsKICAgICAgICAgICAgICAgIGFsbG93ZWRUb2tlbnMubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdG9rZW5QcmljZVtfdG9rZW5dID0gMDsKICAgICAgICB0b2tlbkFtb3VudFtfdG9rZW5dID0gMDsKICAgIH0KCiAgICAvLy8gQGRldiBhZGQgdXNlciB0byB1c2Vyc0xpc3QKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICBmdW5jdGlvbiBhZGRVc2VyVG9MaXN0KGFkZHJlc3MgX3VzZXIpIHByaXZhdGUgewogICAgICAgIGlmICghaXNVc2VySW5MaXN0W191c2VyXSkgewogICAgICAgICAgICBpc1VzZXJJbkxpc3RbX3VzZXJdID0gdHJ1ZTsKICAgICAgICAgICAgdXNlcnNMaXN0LnB1c2goX3VzZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBNYWtlcyBhbW91bnQgb2YgdG9rZW5zIG5vdCBwdXJjaGFzYWJsZQogICAgLy8vIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiBSTUMgdG9rZW5zCiAgICBmdW5jdGlvbiBidXJuVG9rZW5zKHVpbnQgX2Ftb3VudCkgcHJpdmF0ZSB7CiAgICAgICAgYXNzZXJ0KGFkZCh0b2tlbnNTdXBwbGllZCwgX2Ftb3VudCkgPD0gVE9LRU5TX1NVUFBMWSk7CiAgICAgICAgdG9rZW5zU3VwcGxpZWQgPSBhZGQodG9rZW5zU3VwcGxpZWQsIF9hbW91bnQpOwogICAgfQoKICAgIC8vLyBAZGV2IFRha2VzIEVSQy0yMCB0b2tlbnMgYXBwcm92ZWQgYnkgdXNlciBmb3IgdXNpbmcgYW5kIGdpdmVzIGhpbSBSTUMgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gYnV5V2l0aFRva2VucyhhZGRyZXNzIF90b2tlbikgcHVibGljIHsKICAgICAgICBidXlXaXRoVG9rZW5zQnkobXNnLnNlbmRlciwgX3Rva2VuKTsKICAgIH0KCiAgICAvLy8gQGRldiBUYWtlcyBFUkMtMjAgdG9rZW5zIGFwcHJvdmVkIGJ5IHVzZXIgZm9yIHVzaW5nIGFuZCBnaXZlcyBoaW0gUk1DIHRva2Vucy4gQ2FuIGJlIGNhbGxlZCBieSBhbnlvbmUKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gYnV5V2l0aFRva2Vuc0J5KGFkZHJlc3MgX3VzZXIsIGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgSWNvSXNBY3RpdmUgewogICAgICAgIC8vIENoZWNrcyB3aGV0aGVyIHRoZSB0b2tlbiBpcyBhbGxvd2VkCiAgICAgICAgYXNzZXJ0KHRva2VuUHJpY2VbX3Rva2VuXSA+IDApOwoKICAgICAgICBBYnN0cmFjdFRva2VuIHRva2VuID0gQWJzdHJhY3RUb2tlbihfdG9rZW4pOwogICAgICAgIHVpbnQgdG9rZW5zVG9TZW5kID0gdG9rZW4uYWxsb3dhbmNlKF91c2VyLCBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBhc3NlcnQodG9rZW5zVG9TZW5kID4gMCk7CgogICAgICAgIHVpbnQgYm91Z2h0VG9rZW5zID0gZ2V0VG9rZW5zQW1vdW50QnlUb2tlbnMoX3Rva2VuLCB0b2tlbnNUb1NlbmQpOwogICAgICAgIGJ1cm5Ub2tlbnMoYm91Z2h0VG9rZW5zKTsKICAgICAgICBiYWxhbmNlc1tfdXNlcl0gPSBhZGQoYmFsYW5jZXNbX3VzZXJdLCBib3VnaHRUb2tlbnMpOwoKICAgICAgICB1aW50IHByZXZCYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlckZyb20oX3VzZXIsIGFkZHJlc3ModGhpcyksIHRva2Vuc1RvU2VuZCkpOwogICAgICAgIGFzc2VydCh0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkgLSBwcmV2QmFsYW5jZSA9PSB0b2tlbnNUb1NlbmQpOwoKICAgICAgICB1c2VyVG9rZW5zVmFsdWVzW191c2VyXVtfdG9rZW5dID0gYWRkKHVzZXJUb2tlbnNWYWx1ZXNbX3VzZXJdW190b2tlbl0sIHRva2Vuc1RvU2VuZCk7CgogICAgICAgIGFkZFRva2VuVG9Vc2VyKF91c2VyLCBfdG9rZW4pOwogICAgICAgIGFkZFVzZXJUb0xpc3QoX3VzZXIpOwogICAgICAgIEJ1eVRva2Vuc1dpdGhUb2tlbnMoX3VzZXIsIF90b2tlbiwgdG9rZW5zVG9TZW5kLCBib3VnaHRUb2tlbnMpOwogICAgfQoKICAgIC8vLyBAZGV2IE1ha2VzIGFtb3VudCBvZiB0b2tlbnMgcmV0dXJuYWJsZSBmb3IgdXNlci4gSWYgX2J1eVRva2VucyBlcXVhbHMgdHJ1ZSwgYnV5IHRva2VucwogICAgLy8vIEBwYXJhbSBfdXNlciBBZGRyZXNzIG9mIHVzZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgRVJDLTIwIHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblZhbHVlIEFtb3VudCBvZiBFUkMtMjAgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2J1eVRva2VucyBJZiB0cnVlLCBidXlzIHRva2VucyBmb3IgdGhpcyBzdW0KICAgIGZ1bmN0aW9uIGFkZFRva2Vuc1RvUmV0dXJuKGFkZHJlc3MgX3VzZXIsIGFkZHJlc3MgX3Rva2VuLCB1aW50IF90b2tlblZhbHVlLCBib29sIF9idXlUb2tlbnMpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgLy8gQ2hlY2tzIHdoZXRoZXIgdGhlIHRva2VuIGlzIGFsbG93ZWQKICAgICAgICBhc3NlcnQodG9rZW5QcmljZVtfdG9rZW5dID4gMCk7CgogICAgICAgIGlmIChfYnV5VG9rZW5zKSB7CiAgICAgICAgICAgIHVpbnQgYm91Z2h0VG9rZW5zID0gZ2V0VG9rZW5zQW1vdW50QnlUb2tlbnMoX3Rva2VuLCBfdG9rZW5WYWx1ZSk7CiAgICAgICAgICAgIGJ1cm5Ub2tlbnMoYm91Z2h0VG9rZW5zKTsKICAgICAgICAgICAgYmFsYW5jZXNbX3VzZXJdID0gYWRkKGJhbGFuY2VzW191c2VyXSwgYm91Z2h0VG9rZW5zKTsKICAgICAgICAgICAgQnV5VG9rZW5zV2l0aFRva2VucyhfdXNlciwgX3Rva2VuLCBfdG9rZW5WYWx1ZSwgYm91Z2h0VG9rZW5zKTsKICAgICAgICB9CgogICAgICAgIHVzZXJUb2tlbnNWYWx1ZXNbX3VzZXJdW190b2tlbl0gPSBhZGQodXNlclRva2Vuc1ZhbHVlc1tfdXNlcl1bX3Rva2VuXSwgX3Rva2VuVmFsdWUpOwogICAgICAgIGFkZFRva2VuVG9Vc2VyKF91c2VyLCBfdG9rZW4pOwogICAgICAgIGFkZFVzZXJUb0xpc3QoX3VzZXIpOwogICAgfQoKCiAgICAvLy8gQGRldiBBZGRzIEVSQy0yMCB0b2tlbnMgdG8gdXNlcidzIHRva2VuIGxpc3QKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gYWRkVG9rZW5Ub1VzZXIoYWRkcmVzcyBfdXNlciwgYWRkcmVzcyBfdG9rZW4pIHByaXZhdGUgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHVzZXJUb2tlbnNbX3VzZXJdLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh1c2VyVG9rZW5zW191c2VyXVtpXSA9PSBfdG9rZW4pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB1c2VyVG9rZW5zW191c2VyXS5wdXNoKF90b2tlbik7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBldGhlciBhbmQgdG9rZW5zIHRvIHVzZXIuIENhbiBiZSBjYWxsZWQgb25seSBpZiBJQ08gaXMgZW5kZWQgYW5kIFNvZnRDYXAgaXMgbm90IHJlYWNoZWQKICAgIGZ1bmN0aW9uIHJldHVybkZ1bmRzKCkgcHVibGljIHsKICAgICAgICBhc3NlcnQoIWlzSWNvU3VjY2Vzc2Z1bCgpICYmICFpc0ljb0FjdGl2ZSgpKTsKCiAgICAgICAgcmV0dXJuRnVuZHNGb3IobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgTW92ZXMgdG9rZW5zIGZyb20gb25lIHVzZXIgdG8gYW5vdGhlci4gQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG1hbmFnZXIuIFRoaXMgZnVuY3Rpb24gYWRkZWQgZm9yIHVzZXJzIHRoYXQgc2VuZCBldGhlciBieSBzdG9jayBleGNoYW5nZXMKICAgIGZ1bmN0aW9uIG1vdmVJY29Ub2tlbnMoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgb25seU1hbmFnZXIgewogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwoKICAgICAgICBNb3ZlVG9rZW5zKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBldGhlciBhbmQgdG9rZW5zIHRvIHVzZXIuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyIG9yIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIF91c2VyIEFkZHJlc3Mgb2YgdXNlcgogICAgZnVuY3Rpb24gcmV0dXJuRnVuZHNGb3IoYWRkcmVzcyBfdXNlcikgcHVibGljIG9ubHlNYW5hZ2VyT3JDb250cmFjdCByZXR1cm5zKGJvb2wpIHsKICAgICAgICBpZiAoZXRoQmFsYW5jZXNbX3VzZXJdID4gMCkgewogICAgICAgICAgICBpZiAoX3VzZXIuc2VuZChldGhCYWxhbmNlc1tfdXNlcl0pKSB7CiAgICAgICAgICAgICAgICBSZXR1cm5FdGhlcnNGb3IoX3VzZXIsIGV0aEJhbGFuY2VzW191c2VyXSk7CiAgICAgICAgICAgICAgICBldGhCYWxhbmNlc1tfdXNlcl0gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB1c2VyVG9rZW5zW191c2VyXS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBhZGRyZXNzIHRva2VuQWRkcmVzcyA9IHVzZXJUb2tlbnNbX3VzZXJdW2ldOwogICAgICAgICAgICB1aW50IHVzZXJUb2tlblZhbHVlID0gdXNlclRva2Vuc1ZhbHVlc1tfdXNlcl1bdG9rZW5BZGRyZXNzXTsKICAgICAgICAgICAgaWYgKHVzZXJUb2tlblZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgQWJzdHJhY3RUb2tlbiB0b2tlbiA9IEFic3RyYWN0VG9rZW4odG9rZW5BZGRyZXNzKTsKICAgICAgICAgICAgICAgIGlmICh0b2tlbi50cmFuc2ZlcihfdXNlciwgdXNlclRva2VuVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgUmV0dXJuVG9rZW5zRm9yKF91c2VyLCB0b2tlbkFkZHJlc3MsIHVzZXJUb2tlblZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB1c2VyVG9rZW5zVmFsdWVzW191c2VyXVt0b2tlbkFkZHJlc3NdID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYmFsYW5jZXNbX3VzZXJdID0gMDsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGV0aGVyIGFuZCB0b2tlbnMgdG8gbGlzdCBvZiB1c2Vycy4gQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG1hbmFnZXIKICAgIC8vLyBAcGFyYW0gX3VzZXJzIEFycmF5IG9mIGFkZHJlc3NlcyBvZiB1c2VycwogICAgZnVuY3Rpb24gcmV0dXJuRnVuZHNGb3JNdWx0aXBsZShhZGRyZXNzW10gX3VzZXJzKSBwdWJsaWMgb25seU1hbmFnZXIgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF91c2Vycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXR1cm5GdW5kc0ZvcihfdXNlcnNbaV0pOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGV0aGVyIGFuZCB0b2tlbnMgdG8gNTAgdXNlcnMuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICBmdW5jdGlvbiByZXR1cm5GdW5kc0ZvckFsbCgpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgYXNzZXJ0KCFpc0ljb0FjdGl2ZSgpICYmICFpc0ljb1N1Y2Nlc3NmdWwoKSk7CgogICAgICAgIHVpbnQgZmlyc3QgPSBudW1iZXJPZlVzZXJzUmV0dXJuZWQ7CiAgICAgICAgdWludCBsYXN0ICA9IChmaXJzdCArIDUwIDwgdXNlcnNMaXN0Lmxlbmd0aCkgPyBmaXJzdCArIDUwIDogdXNlcnNMaXN0Lmxlbmd0aDsKCiAgICAgICAgZm9yICh1aW50IGkgPSBmaXJzdDsgaSA8IGxhc3Q7IGkrKykgewogICAgICAgICAgICByZXR1cm5GdW5kc0Zvcih1c2Vyc0xpc3RbaV0pOwogICAgICAgIH0KCiAgICAgICAgbnVtYmVyT2ZVc2Vyc1JldHVybmVkID0gbGFzdDsKICAgIH0KCiAgICAvLy8gQGRldiBXaXRoZHJhd3MgZXRoZXIgYW5kIHRva2VucyB0byBfZXNjcm93IGlmIFNvZnRDYXAgaXMgcmVhY2hlZAogICAgLy8vIEBwYXJhbSBfZXNjcm93IEFkZHJlc3Mgb2YgZXNjcm93CiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyVG8oYWRkcmVzcyBfZXNjcm93KSBwcml2YXRlIHsKICAgICAgICBhc3NlcnQoaXNJY29TdWNjZXNzZnVsKCkpOwoKICAgICAgICBpZiAodGhpcy5iYWxhbmNlID4gMCkgewogICAgICAgICAgICBpZiAoX2VzY3Jvdy5zZW5kKHRoaXMuYmFsYW5jZSkpIHsKICAgICAgICAgICAgICAgIFdpdGhkcmF3RXRoZXIoX2VzY3JvdywgdGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWxsb3dlZFRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBBYnN0cmFjdFRva2VuIHRva2VuID0gQWJzdHJhY3RUb2tlbihhbGxvd2VkVG9rZW5zW2ldKTsKICAgICAgICAgICAgdWludCB0b2tlbkJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgICAgIGlmICh0b2tlbkJhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4udHJhbnNmZXIoX2VzY3JvdywgdG9rZW5CYWxhbmNlKSkgewogICAgICAgICAgICAgICAgICAgIFdpdGhkcmF3VG9rZW4oX2VzY3JvdywgYWRkcmVzcyh0b2tlbiksIHRva2VuQmFsYW5jZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgV2l0aGRyYXcgZXRoZXIgYW5kIHRva2VucyB0byBlc2Nyb3cuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICB3aXRoZHJhd0V0aGVyVG8oZXNjcm93KTsKICAgIH0KCiAgICAvLy8gQGRldiBXaXRoZHJhdyBldGhlciBhbmQgdG9rZW5zIHRvIHJlc2VydmUgZXNjcm93LiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlcgogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlclRvUmVzZXJ2ZUVzY3JvdygpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgd2l0aGRyYXdFdGhlclRvKHJlc2VydmVFc2Nyb3cpOwogICAgfQoKICAgIC8vLyBAZGV2IEVuYWJsZXMgZGlzYWJsZWQgSUNPLiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlcgogICAgZnVuY3Rpb24gcnVuSWNvKCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICBhc3NlcnQoaXNJY29TdG9wcGVkKTsKICAgICAgICBpc0ljb1N0b3BwZWQgPSBmYWxzZTsKICAgICAgICBJY29SdW5uZWRNYW51YWxseSgpOwogICAgfQoKICAgIC8vLyBAZGV2IERpc2FibGVzIElDTy4gQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG1hbmFnZXIKICAgIGZ1bmN0aW9uIHN0b3BJY28oKSBwdWJsaWMgb25seU1hbmFnZXIgewogICAgICAgIGlzSWNvU3RvcHBlZCA9IHRydWU7CiAgICAgICAgSWNvU3RvcHBlZE1hbnVhbGx5KCk7CiAgICB9CgogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24uIEJ1eSBSTUMgdG9rZW5zIG9uIHNlbmRpbmcgZXRoZXIKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLy8gQGRldiBHaXZlcyBib3VudHkgcmV3YXJkIHRvIHVzZXIuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIHVzZXIKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgYm91bnR5CiAgICBmdW5jdGlvbiBnaXZlUmV3YXJkKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgYXNzZXJ0KF90byAhPSAweDApOwogICAgICAgIGFzc2VydChfYW1vdW50ID4gMCk7CiAgICAgICAgYXNzZXJ0KGFkZChib3VudHlTdXBwbGllZCwgX2Ftb3VudCkgPD0gQk9VTlRZX1NVUFBMWSk7CgogICAgICAgIGJvdW50eVN1cHBsaWVkID0gYWRkKGJvdW50eVN1cHBsaWVkLCBfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYWRkKGJhbGFuY2VzW190b10sIF9hbW91bnQpOwoKICAgICAgICBHaXZlUmV3YXJkKF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEFkZHMgb3RoZXIgRVJDLTIwIGZ1bmN0aW9ucwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiAwOwogICAgfQp9'.
	

]
