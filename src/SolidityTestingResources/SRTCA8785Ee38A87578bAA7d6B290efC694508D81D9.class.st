Class {
	#name : #SRTCA8785Ee38A87578bAA7d6B290efC694508D81D9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTCA8785Ee38A87578bAA7d6B290efC694508D81D9 >> base64 [
	^ ''.
	

]
