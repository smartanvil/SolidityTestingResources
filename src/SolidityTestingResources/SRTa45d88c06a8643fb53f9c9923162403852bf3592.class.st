Class {
	#name : #SRTa45d88c06a8643fb53f9c9923162403852bf3592,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa45d88c06a8643fb53f9c9923162403852bf3592 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHRva2VuQmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgLy9UUkFOU0ZFUiBGdW5jdGlvbmFsaXR5IGhhcyBiZWVuIGRpc2FibGVkIGFzIHdlIHdhbnRlZCB0byBtYWtlIHRoZSB0b2tlbiBub24tdHJhZGFibGUKICAgIC8vYW5kIHdlIGFyZSBuaWNlIHBlb3BsZSBzbyB3ZSBkb24ndCB3YW50IGFueW9uZSB0byBub3QgZ2V0IHRoZWlyIHBheW91dCA6KQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gdG9rZW5CYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KY29udHJhY3QgSGFyZWVtTWluZVBvb2xUb2tlbiBpcyBCYXNpY1Rva2VuLCBPd25hYmxlIHsKCiAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiSGFyZWVtTWluZVBvb2wiOwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJITVAiOwogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgdWludDI1NiBjb25zdGFudCBJTklUSUFMX1NVUFBMWSA9IDEwMDAgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwogICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2UgPSAwLjM1ICogMTAgKiogMTg7ICAKICAgdWludDI1NiBwdWJsaWMgYnV5UHJpY2UgPSAwLjI1ICogMTAgKiogMTg7IAogIAogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IENPTExBVEVSQUxfSEVMRCA9ICIxMDAwIEVUSCI7CiAgIHVpbnQgcGF5b3V0X3dvcnRoID0gMDsKICAgCiAgIGV2ZW50IERlYnVnKHN0cmluZyBtZXNzYWdlLCB1aW50MjU2IG51bSk7CiAgIAogICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYW1vdW50TGVmdFRvQmVQYWlkOwogICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcGFydGlhbEFtdFRvQmVQYWlkOwogICAKICAgYWRkcmVzc1tdIGxpc3RBZGRyOwogICAKICAgLy9DbGllbnQgYWRkcmVzc2VzCiAgIGFkZHJlc3MgZXRoU3RvcmUgPSAweDY2RWY4NEVFMzc4QjA3MDEyRkU0NERmODNiNjRFYTJBZTM1ZkQwOWI7ICAgCiAgIGFkZHJlc3MgZXhjaGFuZ2UgPSAweDA5M2FmODY5MDlGN0UyMTM1YUQ3NjRlOWNCMzg0RWQ3MzExNzk5ZDM7CiAgIAogICB1aW50IHBlclRva2VuUGF5b3V0ID0gMDsKICAgdWludCB0b2tlblRvVGFrZUJhY2sgPSAwOwogICAKICAgZXZlbnQgYWRkcihzdHJpbmcgbWVzc2FnZSwgYWRkcmVzcyBzZW5kZXIpOwogICBldmVudCBsb2dTdHJpbmcoc3RyaW5nIG1lc3NhZ2UpOwogICAKICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgYnV5KG1zZy5zZW5kZXIpOwogICAgfQogIAogICAgLyoqCiAgICAqIEBkZXYgQ29udHJ1Y3RvciB0aGF0IGdpdmVzIG1zZy5zZW5kZXIgYWxsIG9mIGV4aXN0aW5nIHRva2Vucy4KICAgICovCiAgICBmdW5jdGlvbiBIYXJlZW1NaW5lUG9vbFRva2VuKCkgcHVibGljIHsKICAgIG93bmVyID0gZXRoU3RvcmU7CiAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgdG9rZW5CYWxhbmNlc1tvd25lcl0gPSBJTklUSUFMX1NVUFBMWTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlICogMTAgKiogMzsKICAgICAgICBidXlQcmljZSA9IG5ld0J1eVByaWNlICogMTAgKiogMzsgCiAgICB9CiAgCiAgICBmdW5jdGlvbiBwYXlvdXRXb3J0aChhZGRyZXNzIGJlbmVmaWNpYXJ5KSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCBhbW91bnQpIHsKICAgICAgICBhbW91bnQgPSBhbW91bnRMZWZ0VG9CZVBhaWRbYmVuZWZpY2lhcnldOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b2tlbnNMZWZ0KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCBhbW91bnQpIHsKICAgICAgICBhbW91bnQgPSB0b2tlbkJhbGFuY2VzW293bmVyXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcGF5b3V0TGVmdCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYW1vdW50KSB7CiAgICAgICAgZm9yICh1aW50IGk9MDtpPGxpc3RBZGRyLmxlbmd0aDtpKyspCiAgICAgICAgewogICAgICAgICAgICBhbW91bnQgPSBhbW91bnQgKyBhbW91bnRMZWZ0VG9CZVBhaWRbbGlzdEFkZHJbaV1dOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYW1vdW50OwogICAgfQogICAgZnVuY3Rpb24gZG9QYXlvdXQoKSBwYXlhYmxlIHB1YmxpYyBvbmx5T3duZXJ7CiAgICAgIHVpbnQgcGF5TGVmdCA9IHBheW91dExlZnQoKTsKICAgICAgdWludCBjYXNoQmFjayA9IG1zZy52YWx1ZTsKICAgICAgcmVxdWlyZSAocGF5TGVmdD4wICYmIGNhc2hCYWNrIDw9cGF5TGVmdCk7CiAgICAgIHVpbnQgc29sZFRva2VucyA9IHRvdGFsU3VwcGx5LnN1Yih0b2tlbkJhbGFuY2VzW293bmVyXSk7CiAgICAgIGNhc2hCYWNrID0gY2FzaEJhY2subXVsKDEwKioxOCk7CiAgICAgIHBlclRva2VuUGF5b3V0ID1jYXNoQmFjay5kaXYoc29sZFRva2Vucyk7CiAgICAgIHRva2VuVG9UYWtlQmFjayA9IHBlclRva2VuUGF5b3V0Lm11bCgxMCoqMTgpOwogICAgICB0b2tlblRvVGFrZUJhY2sgPSB0b2tlblRvVGFrZUJhY2suZGl2KHNlbGxQcmljZSk7CiAgICAgIG1ha2VQYXltZW50cygpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBtYWtlUGF5bWVudHMoKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBleGNoYW5nZUFtb3VudDsKICAgICAgICB1aW50IGN1c3RvbWVyQW10OwogICAgICAgIGZvciAodWludCBpPTA7aTxsaXN0QWRkci5sZW5ndGg7aSsrKQogICAgICAgIHsKICAgICAgICAgICAgdWludCBwYXlBbXQgPSBhbW91bnRMZWZ0VG9CZVBhaWRbbGlzdEFkZHJbaV1dOwogICAgICAgICAgICBpZiAocGF5QW10ID4wKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB1aW50IHRva2Vuc0hlbGQgPSBwYXlBbXQubXVsKDEwKioxOCk7CiAgICAgICAgICAgICAgICB0b2tlbnNIZWxkID0gdG9rZW5zSGVsZC5kaXYoc2VsbFByaWNlKTsgLy8gc2hvdWxkbnQgdGhpcyBiZSBidXlwcmljZT8KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKHRva2Vuc0hlbGQgPjApCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdWludCBzZW5kTW9uZXkgPSB0b2tlbnNIZWxkLm11bChwZXJUb2tlblBheW91dCk7CiAgICAgICAgICAgICAgICAgICAgc2VuZE1vbmV5ID0gc2VuZE1vbmV5LmRpdigxMCoqZGVjaW1hbHMpOwogICAgICAgICAgICAgICAgICAgIHVpbnQgdGFrZUJhY2tUb2tlbnMgPSB0b2tlblRvVGFrZUJhY2subXVsKHRva2Vuc0hlbGQpOwogICAgICAgICAgICAgICAgICAgIHRha2VCYWNrVG9rZW5zID0gdGFrZUJhY2tUb2tlbnMuZGl2KDEwKipkZWNpbWFscyk7CiAgICAgICAgICAgICAgICAgICAgKGV4Y2hhbmdlQW1vdW50LGN1c3RvbWVyQW10KSA9IGdldEV4Y2hhbmdlQW5kRXRoU3RvcmVBbW91bnQoc2VuZE1vbmV5KTsgCiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2UudHJhbnNmZXIoZXhjaGFuZ2VBbW91bnQpOwogICAgICAgICAgICAgICAgICAgIGxpc3RBZGRyW2ldLnRyYW5zZmVyKGN1c3RvbWVyQW10KTsKICAgICAgICAgICAgICAgICAgICBhbW91bnRMZWZ0VG9CZVBhaWRbbGlzdEFkZHJbaV1dID0gYW1vdW50TGVmdFRvQmVQYWlkW2xpc3RBZGRyW2ldXS5zdWIoc2VuZE1vbmV5KTsKICAgICAgICAgICAgICAgICAgICB0b2tlbkJhbGFuY2VzW2xpc3RBZGRyW2ldXSA9IHRva2VuQmFsYW5jZXNbbGlzdEFkZHJbaV1dLnN1Yih0YWtlQmFja1Rva2Vucyk7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5CYWxhbmNlc1tvd25lcl0gPSB0b2tlbkJhbGFuY2VzW293bmVyXS5hZGQodGFrZUJhY2tUb2tlbnMpOwogICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKGxpc3RBZGRyW2ldLG93bmVyLCB0YWtlQmFja1Rva2Vucyk7IAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXkoYWRkcmVzcyBiZW5lZmljaWFyeSkgcGF5YWJsZSBwdWJsaWMgcmV0dXJucyAodWludCBhbW91bnQpIHsKICAgICAgICByZXF1aXJlIChtc2cudmFsdWUuZGl2KGJ1eVByaWNlKSA+PSAxKTsgICAKICAgICAgICB1aW50IGV4Y2hhbmdlQW1vdW50OwogICAgICAgIHVpbnQgZXRoU3RvcmVBbXQ7CiAgICAgICAgKGV4Y2hhbmdlQW1vdW50LGV0aFN0b3JlQW10KSA9IGdldEV4Y2hhbmdlQW5kRXRoU3RvcmVBbW91bnQobXNnLnZhbHVlKTsgCiAgICAgICAgZXRoU3RvcmUudHJhbnNmZXIoZXRoU3RvcmVBbXQpOyAgICAKICAgICAgICBleGNoYW5nZS50cmFuc2ZlcihleGNoYW5nZUFtb3VudCk7CiAgICAgICAgLy91aW50IHRlbXBCdXlQcmljZSA9IGJ1eVByaWNlLm11bCgxMCoqZGVjaW1hbHMpOwogICAgICAgIGFtb3VudCA9IG1zZy52YWx1ZS5kaXYoYnV5UHJpY2UpOyAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlcyB0aGUgYW1vdW50CiAgICAgICAgYW1vdW50ID0gYW1vdW50Lm11bCgxMCoqZGVjaW1hbHMpOwogICAgICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1tvd25lcl0gPj0gYW1vdW50KTsgICAgICAgICAgICAgICAvLyBjaGVja3MgaWYgaXQgaGFzIGVub3VnaCB0byBzZWxsCiAgICAgICAgdG9rZW5CYWxhbmNlc1tiZW5lZmljaWFyeV0gPSB0b2tlbkJhbGFuY2VzW2JlbmVmaWNpYXJ5XS5hZGQoYW1vdW50KTsgICAgICAgICAgICAgICAgICAvLyBhZGRzIHRoZSBhbW91bnQgdG8gYnV5ZXIncyBiYWxhbmNlCiAgICAgICAgdG9rZW5CYWxhbmNlc1tvd25lcl0gPSB0b2tlbkJhbGFuY2VzW293bmVyXS5zdWIoYW1vdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICAgIAogICAgICAgIHVpbnQgZWFybGllckJhbGFuY2UgPSAgYW1vdW50TGVmdFRvQmVQYWlkW2JlbmVmaWNpYXJ5XTsKICAgICAgICB1aW50IGFtb3VudFRvQmVQYWlkID0gYW1vdW50Lm11bChzZWxsUHJpY2UpOwogICAgICAgIGFtb3VudFRvQmVQYWlkID0gYW1vdW50VG9CZVBhaWQuZGl2KDEwKioxOCk7CiAgICAgICAgYW1vdW50TGVmdFRvQmVQYWlkW2JlbmVmaWNpYXJ5XSA9IGFtb3VudFRvQmVQYWlkLmFkZChlYXJsaWVyQmFsYW5jZSk7ICAgLy9pbnB1dCBob3cgbXVjaCBoYXMgdG8gYmUgcGFpZCBvdXQgdG8gdGhlIGN1c3RvbWVyIGxhdGVyIG9uCiAgICAgICAgVHJhbnNmZXIob3duZXIsIGJlbmVmaWNpYXJ5LCBhbW91bnQpOwogICAgICAgIGlmIChlYXJsaWVyQmFsYW5jZSA9PSAwKSAKICAgICAgICAgICAgbGlzdEFkZHIucHVzaChiZW5lZmljaWFyeSk7CiAgICAgICAgcmV0dXJuIGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmRzIGZ1bmN0aW9uIGFuZCByZXR1cm5zCiAgICB9CiAgIAogICBmdW5jdGlvbiBnZXRFeGNoYW5nZUFuZEV0aFN0b3JlQW1vdW50KHVpbnQgdmFsdWUpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBleGNoYW5nZUFtdCwgdWludCBldGhTdG9yZUFtdCkgewogICAgICAgZXhjaGFuZ2VBbXQgPSB2YWx1ZS5kaXYoMTAwKTsgICAgLy9zaW5jZSAxJSBtZWFucyBkaXZpZGUgYnkgMTAwCiAgICAgICBldGhTdG9yZUFtdCA9IHZhbHVlIC0gZXhjaGFuZ2VBbXQ7ICAgLy90aGUgcmVzdCB3b3VsZCBiZSBldGggc3RvcmUgYW1vdW50CiAgIH0KfQ=='.
	

]
