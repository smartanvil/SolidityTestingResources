Class {
	#name : #SRT1f4b81fa77d621282780ccc52389523d642d0443,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1f4b81fa77d621282780ccc52389523d642d0443 >> base64 [
	^ ''.
	

]
