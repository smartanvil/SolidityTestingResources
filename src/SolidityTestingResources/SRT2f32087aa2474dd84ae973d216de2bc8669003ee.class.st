Class {
	#name : #SRT2f32087aa2474dd84ae973d216de2bc8669003ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f32087aa2474dd84ae973d216de2bc8669003ee >> base64 [
	^ ''.
	

]
