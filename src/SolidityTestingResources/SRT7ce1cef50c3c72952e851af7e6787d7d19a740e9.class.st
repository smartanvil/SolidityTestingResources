Class {
	#name : #SRT7ce1cef50c3c72952e851af7e6787d7d19a740e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7ce1cef50c3c72952e851af7e6787d7d19a740e9 >> base64 [
	^ ''.
	

]
