Class {
	#name : #SRTa25d9e3c177a45265349d4bd37b23ec2669dea5b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa25d9e3c177a45265349d4bd37b23ec2669dea5b >> base64 [
	^ ''.
	

]
