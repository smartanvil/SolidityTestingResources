Class {
	#name : #SRTa8f8fdad7d6514288a5dea2b8d6f7f2cc3ee5eb2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa8f8fdad7d6514288a5dea2b8d6f7f2cc3ee5eb2 >> base64 [
	^ ''.
	

]
