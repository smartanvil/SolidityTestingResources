Class {
	#name : #SRTd3b964032fdc3941c2e62e32d6e6012500fbe304,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3b964032fdc3941c2e62e32d6e6012500fbe304 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgppbnRlcmZhY2UgVG9rZW5VcGdyYWRlckludGVyZmFjZXsKICAgIGZ1bmN0aW9uIHVwZ3JhZGVGb3IoYWRkcmVzcyBfZm9yLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB1cGdyYWRlRnJvbShhZGRyZXNzIF9ieSwgYWRkcmVzcyBfZm9yLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0KICAKY29udHJhY3QgTWFuYWdlZFRva2VuIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZUNvbnRyYWN0QWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZU1hbmFnZXI7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CgogICAgYm9vbCBwdWJsaWMgdXBncmFkYWJsZSA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgdXBncmFkZXJTZXQgPSBmYWxzZTsKICAgIFRva2VuVXBncmFkZXJJbnRlcmZhY2UgcHVibGljIHVwZ3JhZGVyOwoKICAgIGJvb2wgcHVibGljIGxvY2tlZCA9IHRydWU7CiAgICBib29sIHB1YmxpYyBtaW50aW5nQWxsb3dlZCA9IHRydWU7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICBtb2RpZmllciB1bmxvY2tlZCgpIHsKICAgICAgICByZXF1aXJlKCFsb2NrZWQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdW5sb2NrZWRPckJ5TWFuYWdlcigpIHsKICAgICAgICByZXF1aXJlKCFsb2NrZWQgfHwgKGNyb3dkc2FsZU1hbmFnZXIgIT0gYWRkcmVzcygwKSAmJiBtc2cuc2VuZGVyID09IGNyb3dkc2FsZU1hbmFnZXIpIHx8IChtc2cuc2VuZGVyID09IG93bmVyKSk7CiAgICAgICAgXzsKICAgIH0KICAgIC8vIE93bmVyc2hpcAoKICAgIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUNyb3dkc2FsZSgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyT3JDcm93ZHNhbGUoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQ29udHJhY3RBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsgICAgICAKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8vIEVSQzIwIHJlbGF0ZWQgZnVuY3Rpb25zCgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHVubG9ja2VkT3JCeU1hbmFnZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHVubG9ja2VkIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgdW5sb2NrZWQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgdW5sb2NrZWQgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSB1bmxvY2tlZCBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgICAgICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gTWFuYWdlZFRva2VuIChzdHJpbmcgX25hbWUsIHN0cmluZyBfc3ltYm9sLCB1aW50OCBfZGVjaW1hbHMpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShieXRlcyhfbmFtZSkubGVuZ3RoID4gMSk7CiAgICAgICAgcmVxdWlyZShieXRlcyhfc3ltYm9sKS5sZW5ndGggPiAxKTsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXROYW1lQW5kVGlja2VyKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShieXRlcyhfbmFtZSkubGVuZ3RoID4gMSk7CiAgICAgICAgcmVxdWlyZShieXRlcyhfc3ltYm9sKS5sZW5ndGggPiAxKTsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRMb2NrKGJvb2wgX25ld0xvY2tTdGF0ZSkgb3duZXJPckNyb3dkc2FsZSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfbmV3TG9ja1N0YXRlICE9IGxvY2tlZCk7CiAgICAgICAgbG9ja2VkID0gX25ld0xvY2tTdGF0ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXNhYmxlTWludGluZygpIG93bmVyT3JDcm93ZHNhbGUgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUobWludGluZ0FsbG93ZWQpOwogICAgICAgIG1pbnRpbmdBbGxvd2VkID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlKGFkZHJlc3MgX25ld0Nyb3dkc2FsZSkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBjcm93ZHNhbGVDb250cmFjdEFkZHJlc3MgPSBfbmV3Q3Jvd2RzYWxlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1hbmFnZXIoYWRkcmVzcyBfbmV3TWFuYWdlcikgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBjcm93ZHNhbGVNYW5hZ2VyID0gX25ld01hbmFnZXI7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gbWludChhZGRyZXNzIF9mb3IsIHVpbnQyNTYgX2Ftb3VudCkgb25seUNyb3dkc2FsZSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShtaW50aW5nQWxsb3dlZCk7CiAgICAgICAgYmFsYW5jZXNbX2Zvcl0gPSBiYWxhbmNlc1tfZm9yXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoMCwgX2ZvciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZGVtaW50KGFkZHJlc3MgX2ZvciwgdWludDI1NiBfYW1vdW50KSBvbmx5Q3Jvd2RzYWxlIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKG1pbnRpbmdBbGxvd2VkKTsKICAgICAgICBiYWxhbmNlc1tfZm9yXSA9IGJhbGFuY2VzW19mb3JdLnN1YihfYW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfYW1vdW50KTsKICAgICAgICBUcmFuc2ZlcihfZm9yLCAwLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd1VwZ3JhZGluZyhib29sIF9uZXdTdGF0ZSkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICB1cGdyYWRhYmxlID0gX25ld1N0YXRlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFVwZ3JhZGVyKGFkZHJlc3MgX3VwZ3JhZGVyQWRkcmVzcykgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKCF1cGdyYWRlclNldCk7CiAgICAgICAgcmVxdWlyZShfdXBncmFkZXJBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHVwZ3JhZGVyU2V0ID0gdHJ1ZTsKICAgICAgICB1cGdyYWRlciA9IFRva2VuVXBncmFkZXJJbnRlcmZhY2UoX3VwZ3JhZGVyQWRkcmVzcyk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdXBncmFkZSgpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHVwZ3JhZGFibGUpOwogICAgICAgIHJlcXVpcmUodXBncmFkZXJTZXQpOwogICAgICAgIHJlcXVpcmUodXBncmFkZXIgIT0gVG9rZW5VcGdyYWRlckludGVyZmFjZSgwKSk7CiAgICAgICAgdWludDI1NiB2YWx1ZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIGFzc2VydCh2YWx1ZSA+IDApOwogICAgICAgIGRlbGV0ZSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1Yih2YWx1ZSk7CiAgICAgICAgYXNzZXJ0KHVwZ3JhZGVyLnVwZ3JhZGVGb3IobXNnLnNlbmRlciwgdmFsdWUpKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGdyYWRlRm9yKGFkZHJlc3MgX2ZvciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHVwZ3JhZGFibGUpOwogICAgICAgIHJlcXVpcmUodXBncmFkZXJTZXQpOwogICAgICAgIHJlcXVpcmUodXBncmFkZXIgIT0gVG9rZW5VcGdyYWRlckludGVyZmFjZSgwKSk7CiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mb3JdW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUoX2FsbG93YW5jZSA+IDApOwogICAgICAgIHJlcXVpcmUoX2FsbG93YW5jZSA+PSBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mb3JdID0gYmFsYW5jZXNbX2Zvcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZm9yXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBhc3NlcnQodXBncmFkZXIudXBncmFkZUZyb20obXNnLnNlbmRlciwgX2ZvciwgX3ZhbHVlKSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBleHRlcm5hbCB7CiAgICAgICAgaWYgKHVwZ3JhZGFibGUpIHsKICAgICAgICAgICAgYXNzZXJ0KHVwZ3JhZGUoKSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cgp9'.
	

]
