Class {
	#name : #SRT089a6d83282fb8988a656189f1e7a73fa6c1cac2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT089a6d83282fb8988a656189f1e7a73fa6c1cac2 >> base64 [
	^ ''.
	

]
