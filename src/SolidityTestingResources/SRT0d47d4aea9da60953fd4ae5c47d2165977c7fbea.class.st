Class {
	#name : #SRT0d47d4aea9da60953fd4ae5c47d2165977c7fbea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d47d4aea9da60953fd4ae5c47d2165977c7fbea >> base64 [
	^ ''.
	

]
