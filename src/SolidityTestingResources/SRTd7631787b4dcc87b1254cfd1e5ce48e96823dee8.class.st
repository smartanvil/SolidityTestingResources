Class {
	#name : #SRTd7631787b4dcc87b1254cfd1e5ce48e96823dee8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7631787b4dcc87b1254cfd1e5ce48e96823dee8 >> base64 [
	^ ''.
	

]
