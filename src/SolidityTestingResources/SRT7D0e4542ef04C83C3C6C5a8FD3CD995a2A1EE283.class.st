Class {
	#name : #SRT7D0e4542ef04C83C3C6C5a8FD3CD995a2A1EE283,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7D0e4542ef04C83C3C6C5a8FD3CD995a2A1EE283 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjE2OwoKbGlicmFyeSBTYWZlTWF0aCB7CglmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKCQl1aW50MjU2IGMgPSBhICogYjsKCQlhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwoJCXJldHVybiBjOwoJfQoKCWZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewoJCS8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAoJCXVpbnQyNTYgYyA9IGEgLyBiOwoJCS8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCgkJcmV0dXJuIGM7Cgl9CgoJZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CgkJYXNzZXJ0KGIgPD0gYSk7CgkJcmV0dXJuIGEgLSBiOwoJfQoKCWZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewoJCXVpbnQyNTYgYyA9IGEgKyBiOwoJCWFzc2VydChjID49IGEpOwoJCXJldHVybiBjOwoJfQp9Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KfQoKY29udHJhY3QgR2V4Q3J5cHRvIGlzIG93bmVkIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRva2VuIFZhcmlhYmxlcyBJbml0aWFsaXphdGlvbgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkdleENyeXB0byI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJHRVgiOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBpbml0aWFsU3VwcGx5ID0gNDAwMDAwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKCiAgICBhZGRyZXNzIHB1YmxpYyByZXNlcnZlQWNjb3VudDsKICAgIGFkZHJlc3MgcHVibGljIGdlbmVyYWxCb3VudHk7CiAgICBhZGRyZXNzIHB1YmxpYyBydXNzaWFuQm91bnR5OwoKICAgIHVpbnQyNTYgcmVzZXJ2ZVRva2VuOwogICAgdWludDI1NiBib3VudHlUb2tlbjsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwoKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIF9mcm9tLHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgX2FjY291bnQsIGJvb2wgX2Zyb3plbik7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sYWRkcmVzcyBpbmRleGVkIF90byx1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gR2V4Q3J5cHRvKCkgewogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OwoKICAgICAgICBib3VudHlUcmFuc2ZlcnMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBib3VudHlUcmFuc2ZlcnMoKSBpbnRlcm5hbCB7CiAgICAgICAgcmVzZXJ2ZUFjY291bnQgPSAweDAwNTgxMDZkRjE2NTBCZjFBZGNCMzI3NzM0ZTBGYkNlMTk5NjEzM2Y7CiAgICAgICAgZ2VuZXJhbEJvdW50eSA9IDB4MDA2NjdhOTMzOUZEYjU2QTg0RWVhNjg3ZGI2QjcxNzExNWUxNmJFODsKICAgICAgICBydXNzaWFuQm91bnR5ID0gMHgwMEU3NkE0YzdjNjQ2Nzg3NjMxNjgxQTQxQUJhMzUxNEEwMDFmNGFkOwogICAgICAgIHJlc2VydmVUb2tlbiA9ICggdG90YWxTdXBwbHkgKiAxMyApIC8gMTAwOwogICAgICAgIGJvdW50eVRva2VuID0gKCB0b3RhbFN1cHBseSAqIDIgKSAvIDEwMDsKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHkgLSByZXNlcnZlVG9rZW4gLSBib3VudHlUb2tlbjsKICAgICAgICBiYWxhbmNlT2ZbcnVzc2lhbkJvdW50eV0gPSBib3VudHlUb2tlbiAvIDI7CiAgICAgICAgYmFsYW5jZU9mW2dlbmVyYWxCb3VudHldID0gYm91bnR5VG9rZW4gLyAyOwogICAgICAgIGJhbGFuY2VPZltyZXNlcnZlQWNjb3VudF0gPSByZXNlcnZlVG9rZW47CgogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIscmVzZXJ2ZUFjY291bnQscmVzZXJ2ZVRva2VuKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLGdlbmVyYWxCb3VudHksYm91bnR5VG9rZW4pOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIscnVzc2lhbkJvdW50eSxib3VudHlUb2tlbik7CiAgICB9CgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sYWRkcmVzcyBfdG8sdWludDI1NiBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPiBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoIWZyb3plbkFjY291bnRbX2Zyb21dKTsKICAgICAgICByZXF1aXJlKCFmcm96ZW5BY2NvdW50W190b10pOwoKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dID0gYmFsYW5jZU9mW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyBfYWNjb3VudCwgYm9vbCBfZnJvemVuKSBvbmx5T3duZXIgewogICAgICAgIGZyb3plbkFjY291bnRbX2FjY291bnRdID0gX2Zyb3plbjsKICAgICAgICBGcm96ZW5GdW5kcyhfYWNjb3VudCwgX2Zyb3plbik7CiAgICB9CgogICAgZnVuY3Rpb24gYnVyblRva2Vucyh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID4gX3ZhbHVlKTsKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICAgICAgQnVybihtc2cuc2VuZGVyLF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG5ld1Rva2VucyhhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciB7CiAgICAgICAgYmFsYW5jZU9mW19vd25lcl0gPSBiYWxhbmNlT2ZbX293bmVyXS5hZGQoX3ZhbHVlKTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgX293bmVyLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVzY3Jvd0Ftb3VudChhZGRyZXNzIF9hY2NvdW50LCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX2FjY291bnQsIF92YWx1ZSk7CiAgICAgICAgZnJlZXplQWNjb3VudChfYWNjb3VudCwgdHJ1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHJldmVydCgpOwogICAgfQoKfQ=='.
	

]
