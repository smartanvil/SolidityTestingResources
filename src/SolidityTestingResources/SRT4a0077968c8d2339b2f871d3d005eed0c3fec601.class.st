Class {
	#name : #SRT4a0077968c8d2339b2f871d3d005eed0c3fec601,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4a0077968c8d2339b2f871d3d005eed0c3fec601 >> base64 [
	^ ''.
	

]
