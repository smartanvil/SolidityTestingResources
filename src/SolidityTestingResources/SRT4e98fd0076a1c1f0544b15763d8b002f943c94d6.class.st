Class {
	#name : #SRT4e98fd0076a1c1f0544b15763d8b002f943c94d6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e98fd0076a1c1f0544b15763d8b002f943c94d6 >> base64 [
	^ ''.
	

]
