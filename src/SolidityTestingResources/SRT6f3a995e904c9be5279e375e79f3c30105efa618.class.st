Class {
	#name : #SRT6f3a995e904c9be5279e375e79f3c30105efa618,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6f3a995e904c9be5279e375e79f3c30105efa618 >> base64 [
	^ ''.
	

]
