Class {
	#name : #SRTdc5fd2709a37218f96ac37163a18cf3c2629589d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdc5fd2709a37218f96ac37163a18cf3c2629589d >> base64 [
	^ ''.
	

]
