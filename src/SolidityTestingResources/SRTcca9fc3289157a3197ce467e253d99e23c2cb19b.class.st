Class {
	#name : #SRTcca9fc3289157a3197ce467e253d99e23c2cb19b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcca9fc3289157a3197ce467e253d99e23c2cb19b >> base64 [
	^ ''.
	

]
