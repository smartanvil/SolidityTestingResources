Class {
	#name : #SRTf121ce76c6470fa3b0a5d4240f55eff10c8b221e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf121ce76c6470fa3b0a5d4240f55eff10c8b221e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCgpjb250cmFjdCB0b2tlblNQRVJUIHsKICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsKCgogICAgZnVuY3Rpb24gdG9rZW5TUEVSVCAoc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWxzKXsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgICAgICAKICAgIH0KICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwoKCiAgICAvKiBUaGlzIHVubmFtZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIHNvbWVvbmUgdHJpZXMgdG8gc2VuZCBldGhlciB0byBpdCAqLwogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm93OyAgICAgLy8gUHJldmVudHMgYWNjaWRlbnRhbCBzZW5kaW5nIG9mIGV0aGVyCiAgICB9Cn0KCmNvbnRyYWN0IFByZXNhbGUgaXMgb3duZWQsIHRva2VuU1BFUlQgewoKICAgICAgICBzdHJpbmcgbmFtZSA9ICdQcmUtc2FsZSBFcmlzdGljYSBUb2tlbic7CiAgICAgICAgc3RyaW5nIHN5bWJvbCA9ICdTUEVSVCc7CiAgICAgICAgdWludDggZGVjaW1hbHMgPSAxODsKICAgICAgICAKICAgICAgICAKZnVuY3Rpb24gUHJlc2FsZSAoKQogICAgICAgIHRva2VuU1BFUlQgKG5hbWUsIHN5bWJvbCwgZGVjaW1hbHMpe30KICAgIAogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgYW1vdW50KTsgCiAgICBldmVudCBCdXJuZWQoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBhbW91bnQpOwogICAgICAgIAogICAgZnVuY3Rpb24gbWludFRva2VuKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQyNTYgbWludGVkQW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBiYWxhbmNlT2ZbaW52ZXN0b3JdICs9IG1pbnRlZEFtb3VudDsKICAgICAgICB0b3RhbFN1cHBseSArPSBtaW50ZWRBbW91bnQ7CiAgICAgICAgVHJhbnNmZXIodGhpcywgaW52ZXN0b3IsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgCiAgICB9CgogZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF9vd25lcikgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7ICAgCiAgICAgICAgdWludCAgdG9rZW5zID0gYmFsYW5jZU9mW19vd25lcl07CiAgICAgICAgaWYoYmFsYW5jZU9mW19vd25lcl0gPT0gMCkgdGhyb3c7CiAgICAgICAgYmFsYW5jZU9mW19vd25lcl0gPSAwOwogICAgICAgIHRvdGFsU3VwcGx5IC09IHRva2VuczsKICAgICAgICBCdXJuZWQoX293bmVyLCB0b2tlbnMpOwogICAgfQp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGFzc2VydChiID4gMCk7CiAgICAgICAgdWludCBjID0gYSAvIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICAgfQogICAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICAgcmV0dXJuIGM7CiAgICAgfQp9CgoKY29udHJhY3QgRVJDMjAgewogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKCn0gLy8gRnVuY3Rpb25zIG9mIEVSQzIwIHN0YW5kYXJkCgoKCmNvbnRyYWN0IEVyaXN0aWNhSUNPIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFRva2Vuc19Gb3JfU2FsZSA9IDQ4MjUwMDAwMCoxZTE4OyAvLyBUb2tlbnMgZm9yIFNhbGUgKEhhcmRDYXApCgogICAgdWludCBwdWJsaWMgUmF0ZV9FdGggPSA0NTg7IC8vIFJhdGUgVVNEIHBlciBFVEgKICAgIHVpbnQgcHVibGljIFRva2VuX1ByaWNlID0gNTAgKiBSYXRlX0V0aDsgLy8gRVJUIHBlciBFVEgKICAgIHVpbnQgcHVibGljIFNvbGQgPSAwOyAvL1NvbGQgdG9rZW5zCgoKICAgIGV2ZW50IExvZ1N0YXJ0SUNPKCk7CiAgICBldmVudCBMb2dQYXVzZUlDTygpOwogICAgZXZlbnQgTG9nRmluaXNoSUNPKGFkZHJlc3MgYm91bnR5RnVuZCwgYWRkcmVzcyBhZHZpc29yc0Z1bmQsIGFkZHJlc3MgdGVhbUZ1bmQsIGFkZHJlc3MgY2hhbGxlbmdlRnVuZCk7CiAgICBldmVudCBMb2dCdXlGb3JJbnZlc3RvcihhZGRyZXNzIGludmVzdG9yLCB1aW50IGVydFZhbHVlLCBzdHJpbmcgdHhIYXNoKTsKICAgIGV2ZW50IExvZ1JlcGxhY2VUb2tlbihhZGRyZXNzIGludmVzdG9yLCB1aW50IGVydFZhbHVlKTsKCiAgICBFUlQgcHVibGljIGVydCA9IG5ldyBFUlQodGhpcyk7CiAgICBQcmVzYWxlIHB1YmxpYyBwcmVzYWxlOwoKICAgIGFkZHJlc3MgcHVibGljIENvbXBhbnk7CiAgICBhZGRyZXNzIHB1YmxpYyBCb3VudHlGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgQWR2aXNvcnNGdW5kOwogICAgYWRkcmVzcyBwdWJsaWMgVGVhbUZ1bmQ7CiAgICBhZGRyZXNzIHB1YmxpYyBDaGFsbGVuZ2VGdW5kOwoKICAgIGFkZHJlc3MgcHVibGljIE1hbmFnZXI7IC8vIE1hbmFnZXIgY29udHJvbHMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIENvbnRyb2xsZXJfQWRkcmVzczE7IC8vIEZpcnN0IGFkZHJlc3MgdGhhdCBpcyB1c2VkIHRvIGJ1eSB0b2tlbnMgZm9yIG90aGVyIGNyeXB0b3MKICAgIGFkZHJlc3MgcHVibGljIENvbnRyb2xsZXJfQWRkcmVzczI7IC8vIFNlY29uZCBhZGRyZXNzIHRoYXQgaXMgdXNlZCB0byBidXkgdG9rZW5zIGZvciBvdGhlciBjcnlwdG9zCiAgICBhZGRyZXNzIHB1YmxpYyBDb250cm9sbGVyX0FkZHJlc3MzOyAvLyBUaGlyZCBhZGRyZXNzIHRoYXQgaXMgdXNlZCB0byBidXkgdG9rZW5zIGZvciBvdGhlciBjcnlwdG9zCiAgICBtb2RpZmllciBtYW5hZ2VyT25seSB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBNYW5hZ2VyKTsgXzsgfQogICAgbW9kaWZpZXIgY29udHJvbGxlcnNPbmx5IHsgcmVxdWlyZSgobXNnLnNlbmRlciA9PSBDb250cm9sbGVyX0FkZHJlc3MxKSB8fCAobXNnLnNlbmRlciA9PSBDb250cm9sbGVyX0FkZHJlc3MyKSB8fCAobXNnLnNlbmRlciA9PSBDb250cm9sbGVyX0FkZHJlc3MzKSk7IF87IH0KCiAgICB1aW50IGJvdW50eVBhcnQgPSAxNTA7IC8vIDEuNSUgb2YgVG90YWxTdXBwbHkgZm9yIEJvdW50eUZ1bmQKICAgIHVpbnQgYWR2aXNvcnNQYXJ0ID0gMzg5OyAvLzMsODklIG9mIFRvdGFsU3VwcGx5IGZvciBBZHZpc29yc0Z1bmQKICAgIHVpbnQgdGVhbVBhcnQgPSAxMDAwOyAvLzEwJSBvZiBUb3RhbFN1cHBseSBmb3IgVGVhbUZ1bmQKICAgIHVpbnQgY2hhbGxlbmdlUGFydCA9IDEwMDA7IC8vMTAlIG9mIFRvdGFsU3VwcGx5IGZvciBDaGFsbGVuZ2VGdW5kCiAgICB1aW50IGljb0FuZFBPZlBhcnQgPSA3NDYxOyAvLyA3NCw2MSUgb2YgVG90YWxTdXBwbHkgZm9yIFB1YmxpY0lDTyBhbmQgUHJpdmF0ZU9mZmVyCiAgICBlbnVtIFN0YXR1c0lDTyB7IENyZWF0ZWQsIFN0YXJ0ZWQsIFBhdXNlZCwgRmluaXNoZWQgfQogICAgU3RhdHVzSUNPIHN0YXR1c0lDTyA9IFN0YXR1c0lDTy5DcmVhdGVkOwoKCiAgICBmdW5jdGlvbiBFcmlzdGljYUlDTyhhZGRyZXNzIF9wcmVzYWxlLCBhZGRyZXNzIF9Db21wYW55LCBhZGRyZXNzIF9Cb3VudHlGdW5kLCBhZGRyZXNzIF9BZHZpc29yc0Z1bmQsIGFkZHJlc3MgX1RlYW1GdW5kLCBhZGRyZXNzIF9DaGFsbGVuZ2VGdW5kLCBhZGRyZXNzIF9NYW5hZ2VyLCBhZGRyZXNzIF9Db250cm9sbGVyX0FkZHJlc3MxLCBhZGRyZXNzIF9Db250cm9sbGVyX0FkZHJlc3MyLCBhZGRyZXNzIF9Db250cm9sbGVyX0FkZHJlc3MzKXsKICAgICAgIHByZXNhbGUgPSBQcmVzYWxlKF9wcmVzYWxlKTsKICAgICAgIENvbXBhbnkgPSBfQ29tcGFueTsKICAgICAgIEJvdW50eUZ1bmQgPSBfQm91bnR5RnVuZDsKICAgICAgIEFkdmlzb3JzRnVuZCA9IF9BZHZpc29yc0Z1bmQ7CiAgICAgICBUZWFtRnVuZCA9IF9UZWFtRnVuZDsKICAgICAgIENoYWxsZW5nZUZ1bmQgPSBfQ2hhbGxlbmdlRnVuZDsKICAgICAgIE1hbmFnZXIgPSBfTWFuYWdlcjsKICAgICAgIENvbnRyb2xsZXJfQWRkcmVzczEgPSBfQ29udHJvbGxlcl9BZGRyZXNzMTsKICAgICAgIENvbnRyb2xsZXJfQWRkcmVzczIgPSBfQ29udHJvbGxlcl9BZGRyZXNzMjsKICAgICAgIENvbnRyb2xsZXJfQWRkcmVzczMgPSBfQ29udHJvbGxlcl9BZGRyZXNzMzsKICAgIH0KCi8vIGZ1bmN0aW9uIGZvciBjaGFuZ2luZyByYXRlIG9mIEVUSCBhbmQgcHJpY2Ugb2YgdG9rZW4KCgogICAgZnVuY3Rpb24gc2V0UmF0ZSh1aW50IF9SYXRlRXRoKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICBSYXRlX0V0aCA9IF9SYXRlRXRoOwogICAgICAgVG9rZW5fUHJpY2UgPSA1MCpSYXRlX0V0aDsKICAgIH0KCgovL0lDTyBzdGF0dXMgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gc3RhcnRJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICByZXF1aXJlKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uQ3JlYXRlZCB8fCBzdGF0dXNJQ08gPT0gU3RhdHVzSUNPLlBhdXNlZCk7CiAgICAgICBMb2dTdGFydElDTygpOwogICAgICAgc3RhdHVzSUNPID0gU3RhdHVzSUNPLlN0YXJ0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gcGF1c2VJY28oKSBleHRlcm5hbCBtYW5hZ2VyT25seSB7CiAgICAgICByZXF1aXJlKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uU3RhcnRlZCk7CiAgICAgICBzdGF0dXNJQ08gPSBTdGF0dXNJQ08uUGF1c2VkOwogICAgICAgTG9nUGF1c2VJQ08oKTsKICAgIH0KCgogICAgZnVuY3Rpb24gZmluaXNoSWNvKCkgZXh0ZXJuYWwgbWFuYWdlck9ubHkgeyAvLyBGdW5kcyBmb3IgbWludGluZyBvZiB0b2tlbnMKCiAgICAgICByZXF1aXJlKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uU3RhcnRlZCk7CgogICAgICAgdWludCBhbHJlYWR5TWludGVkID0gZXJ0LnRvdGFsU3VwcGx5KCk7IC8vPVB1YmxpY0lDTytQcml2YXRlT2ZmZXIKICAgICAgIHVpbnQgdG90YWxBbW91bnQgPSBhbHJlYWR5TWludGVkICogMTAwMDAgLyBpY29BbmRQT2ZQYXJ0OwoKCiAgICAgICBlcnQubWludChCb3VudHlGdW5kLCBib3VudHlQYXJ0ICogdG90YWxBbW91bnQgLyAxMDAwMCk7IC8vIDEuNSUgZm9yIEJvdW50eQogICAgICAgZXJ0Lm1pbnQoQWR2aXNvcnNGdW5kLCBhZHZpc29yc1BhcnQgKiB0b3RhbEFtb3VudCAvIDEwMDAwKTsgLy8gMy44OSUgZm9yIEFkdmlzb3JzCiAgICAgICBlcnQubWludChUZWFtRnVuZCwgdGVhbVBhcnQgKiB0b3RhbEFtb3VudCAvIDEwMDAwKTsgLy8gMTAlIGZvciBFcmlzdGljYSB0ZWFtCiAgICAgICBlcnQubWludChDaGFsbGVuZ2VGdW5kLCBjaGFsbGVuZ2VQYXJ0ICogdG90YWxBbW91bnQgLyAxMDAwMCk7IC8vIDEwJSBmb3IgQ2hhbGxlbmdlIEZ1bmQKCiAgICAgICBlcnQuZGVmcm9zdCgpOwoKICAgICAgIHN0YXR1c0lDTyA9IFN0YXR1c0lDTy5GaW5pc2hlZDsKICAgICAgIExvZ0ZpbmlzaElDTyhCb3VudHlGdW5kLCBBZHZpc29yc0Z1bmQsIFRlYW1GdW5kLCBDaGFsbGVuZ2VGdW5kKTsKICAgIH0KCi8vIGZ1bmN0aW9uIHRoYXQgYnV5cyB0b2tlbnMgd2hlbiBpbnZlc3RvciBzZW5kcyBFVEggdG8gYWRkcmVzcyBvZiBJQ08KICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CgogICAgICAgYnV5KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSAqIFRva2VuX1ByaWNlKTsKICAgIH0KCi8vIGZ1bmN0aW9uIGZvciBidXlpbmcgdG9rZW5zIHRvIGludmVzdG9ycyB3aG8gcGFpZCBpbiBvdGhlciBjcnlwdG9zCgogICAgZnVuY3Rpb24gYnV5Rm9ySW52ZXN0b3IoYWRkcmVzcyBfaW52ZXN0b3IsIHVpbnQgX2VydFZhbHVlLCBzdHJpbmcgX3R4SGFzaCkgZXh0ZXJuYWwgY29udHJvbGxlcnNPbmx5IHsKICAgICAgIGJ1eShfaW52ZXN0b3IsIF9lcnRWYWx1ZSk7CiAgICAgICBMb2dCdXlGb3JJbnZlc3RvcihfaW52ZXN0b3IsIF9lcnRWYWx1ZSwgX3R4SGFzaCk7CiAgICB9CgovL2Z1bmN0aW9uIGZvciBidXlpbmcgdG9rZW5zIGZvciBwcmVzYWxlIGludmVzdG9ycwoKICAgIGZ1bmN0aW9uIHJlcGxhY2VUb2tlbihhZGRyZXNzIF9pbnZlc3RvcikgbWFuYWdlck9ubHl7CiAgICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPICE9IFN0YXR1c0lDTy5GaW5pc2hlZCk7CiAgICAgICAgIHVpbnQgc3BlcnRUb2tlbnMgPSBwcmVzYWxlLmJhbGFuY2VPZihfaW52ZXN0b3IpOwogICAgICAgICByZXF1aXJlKHNwZXJ0VG9rZW5zID4gMCk7CiAgICAgICAgIHByZXNhbGUuYnVyblRva2VucyhfaW52ZXN0b3IpOwogICAgICAgICBlcnQubWludChfaW52ZXN0b3IsIHNwZXJ0VG9rZW5zKTsKCiAgICAgICAgIExvZ1JlcGxhY2VUb2tlbihfaW52ZXN0b3IsIHNwZXJ0VG9rZW5zKTsKICAgIH0KLy8gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGJ1eWluZyB0b2tlbnMKCiAgICBmdW5jdGlvbiBidXkoYWRkcmVzcyBfaW52ZXN0b3IsIHVpbnQgX2VydFZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICByZXF1aXJlKHN0YXR1c0lDTyA9PSBTdGF0dXNJQ08uU3RhcnRlZCk7CiAgICAgICByZXF1aXJlKF9lcnRWYWx1ZSA+IDApOwogICAgICAgcmVxdWlyZShTb2xkICsgX2VydFZhbHVlIDw9IFRva2Vuc19Gb3JfU2FsZSk7CiAgICAgICBlcnQubWludChfaW52ZXN0b3IsIF9lcnRWYWx1ZSk7CiAgICAgICBTb2xkID0gU29sZC5hZGQoX2VydFZhbHVlKTsKICAgIH0KCgoKLy9mdW5jdGlvbiB0byB3aXRoZHJhdyBFVEggZnJvbSBzbWFydCBjb250cmFjdAoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIodWludDI1NiBfdmFsdWUpIGV4dGVybmFsIG1hbmFnZXJPbmx5IHsKICAgICAgIHJlcXVpcmUoc3RhdHVzSUNPID09IFN0YXR1c0lDTy5GaW5pc2hlZCk7CiAgICAgICBDb21wYW55LnRyYW5zZmVyKF92YWx1ZSk7CiAgICB9Cgp9Cgpjb250cmFjdCBFUlQgIGlzIEVSQzIwIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJFcmlzdGljYSBUT0tFTiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJFUlQiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICBhZGRyZXNzIHB1YmxpYyBpY287CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7CgogICAgYm9vbCBwdWJsaWMgdG9rZW5zQXJlRnJvemVuID0gdHJ1ZTsKCiAgICBtb2RpZmllciBpY29Pbmx5IHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGljbyk7IF87IH0KCiAgICBmdW5jdGlvbiBFUlQoYWRkcmVzcyBfaWNvKSB7CiAgICAgICBpY28gPSBfaWNvOwogICAgfQoKCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX2hvbGRlciwgdWludCBfdmFsdWUpIGV4dGVybmFsIGljb09ubHkgewogICAgICAgcmVxdWlyZShfdmFsdWUgIT0gMCk7CiAgICAgICBiYWxhbmNlc1tfaG9sZGVyXSA9IGJhbGFuY2VzW19ob2xkZXJdLmFkZChfdmFsdWUpOwogICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX3ZhbHVlKTsKICAgICAgIFRyYW5zZmVyKDB4MCwgX2hvbGRlciwgX3ZhbHVlKTsKICAgIH0KCgogICAgZnVuY3Rpb24gZGVmcm9zdCgpIGV4dGVybmFsIGljb09ubHkgewogICAgICAgdG9rZW5zQXJlRnJvemVuID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgewogICAgICAgcmVxdWlyZSghdG9rZW5zQXJlRnJvemVuKTsKICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOwogICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgfQoKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKCF0b2tlbnNBcmVGcm96ZW4pOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoIXRva2Vuc0FyZUZyb3plbik7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQoKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKChfYW1vdW50ID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQp9'.
	

]
