Class {
	#name : #SRT53acdca2213bec8140e2618dfb6bc71a2a2c7080,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT53acdca2213bec8140e2618dfb6bc71a2a2c7080 >> base64 [
	^ ''.
	

]
