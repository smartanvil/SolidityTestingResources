Class {
	#name : #SRT57a00eda6b251d98b52ccdef777bfaf671c7d339,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT57a00eda6b251d98b52ccdef777bfaf671c7d339 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IElFUkMyMCB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCn0KCmNvbnRyYWN0IEJQRVNPVG9rZW4gaXMgSUVSQzIwIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLyBUb2tlbiBwcm9wZXJ0aWVzCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQml0Y29pblBlc28iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQlBFU08iOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50IHB1YmxpYyBfdG90YWxTdXBwbHkgPSAyMTAwMDAwMGUxODsKICAgIHVpbnQgcHVibGljIF9sZWZ0U3VwcGx5ID0gMjEwMDAwMDBlMTg7CgogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CgogICAgLy8gT3duZXIgb2YgVG9rZW4KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgICB1aW50IHB1YmxpYyBQUklDRSA9IDEwMDA7CgogICAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIC8vIG1vZGlmaWVyIHRvIGFsbG93IG9ubHkgb3duZXIgaGFzIGZ1bGwgY29udHJvbCBvbiB0aGUgZnVuY3Rpb24KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIENvbnN0cnVjdG9yCiAgICAvLyBAbm90aWNlIEJQRVNPVG9rZW4gQ29udHJhY3QKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MKICAgIGZ1bmN0aW9uIEJQRVNPVG9rZW4oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgc3RhcnRUaW1lID0gbm93OwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKCiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gX3RvdGFsU3VwcGx5OyAKICAgIH0KCiAgICAvLyBQYXlhYmxlIG1ldGhvZAogICAgLy8gQG5vdGljZSBBbnlvbmUgY2FuIGJ1eSB0aGUgdG9rZW5zIG9uIHRva2Vuc2FsZSBieSBwYXlpbmcgZXRoZXIKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICB0b2tlbnNhbGUobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8gQG5vdGljZSB0b2tlbnNhbGUKICAgIC8vIEBwYXJhbSByZWNpcGllbnQgVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRva2Vuc2FsZShhZGRyZXNzIHJlY2lwaWVudCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUocmVjaXBpZW50ICE9IDB4MCk7CgogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHVpbnQgdG9rZW5zID0gd2VpQW1vdW50Lm11bChnZXRQcmljZSgpKTsKCiAgICAgICAgcmVxdWlyZShfbGVmdFN1cHBseSA+PSB0b2tlbnMpOwoKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uc3ViKHRva2Vucyk7CiAgICAgICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IGJhbGFuY2VzW3JlY2lwaWVudF0uYWRkKHRva2Vucyk7CgogICAgICAgIF9sZWZ0U3VwcGx5ID0gX2xlZnRTdXBwbHkuc3ViKHRva2Vucyk7CgogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgcmVjaXBpZW50LCB3ZWlBbW91bnQsIHRva2Vucyk7CiAgICB9CgogICAgLy8gQHJldHVybiB0b3RhbCB0b2tlbnMgc3VwcGxpZWQKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3RvdGFsU3VwcGx5OwogICAgfQoKICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CiAgICAvLyBAcGFyYW0gd2hvIFRoZSBhZGRyZXNzIG9mIHRoZSBwYXJ0aWN1bGFyIGFjY291bnQKICAgIC8vIEByZXR1cm4gdGhlIGJhbGFuYWNlIHRoZSBwYXJ0aWN1bGFyIGFjY291bnQKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbd2hvXTsKICAgIH0KCiAgICAvLyBUb2tlbiBkaXN0cmlidXRpb24gdG8gZm91bmRlciwgZGV2ZWxvbWVudCB0ZWFtLCBwYXJ0bmVycywgY2hhcml0eSwgYW5kIGJvdW50eQogICAgZnVuY3Rpb24gc2VuZEJQRVNPVG9rZW4oYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIHRvICE9IDB4MCAmJiB2YWx1ZSA+IDAgJiYgX2xlZnRTdXBwbHkgPj0gdmFsdWUKICAgICAgICApOwoKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICBfbGVmdFN1cHBseSA9IF9sZWZ0U3VwcGx5LnN1Yih2YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIob3duZXIsIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2VuZEJQRVNPVG9rZW5Ub011bHRpQWRkcihhZGRyZXNzW10gbGlzdEFkZHJlc3NlcywgdWludDI1NltdIGFtb3VudCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGxpc3RBZGRyZXNzZXMubGVuZ3RoID09IGFtb3VudC5sZW5ndGgpOyAKICAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbGlzdEFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcmVxdWlyZShsaXN0QWRkcmVzc2VzW2ldICE9IDB4MCk7IAogICAgICAgICAgICAgICAgYmFsYW5jZXNbbGlzdEFkZHJlc3Nlc1tpXV0gPSBiYWxhbmNlc1tsaXN0QWRkcmVzc2VzW2ldXS5hZGQoYW1vdW50W2ldKTsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW293bmVyXSA9IGJhbGFuY2VzW293bmVyXS5zdWIoYW1vdW50W2ldKTsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKG93bmVyLCBsaXN0QWRkcmVzc2VzW2ldLCBhbW91bnRbaV0pOwogICAgICAgICAgICAgICAgX2xlZnRTdXBwbHkgPSBfbGVmdFN1cHBseS5zdWIoYW1vdW50W2ldKTsKICAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3Ryb3lCUEVTT1Rva2VuKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICAgICAgdG8gIT0gMHgwICYmIHZhbHVlID4gMCAmJiBfdG90YWxTdXBwbHkgPj0gdmFsdWUKICAgICAgICAgICAgKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uc3ViKHZhbHVlKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIHNlbmQgYHZhbHVlYCB0b2tlbiB0byBgdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLyBAcGFyYW0gdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIFRyYW5zZmVyCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSB2YWx1ZSAmJiB2YWx1ZSA+IDAKICAgICAgICApOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgICAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOwogICAgfQoKICAgIC8vIEBub3RpY2Ugc2VuZCBgdmFsdWVgIHRva2VuIHRvIGB0b2AgZnJvbSBgZnJvbWAKICAgIC8vIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgYmFsYW5jZXNbZnJvbV0gPj0gdmFsdWUgJiYgdmFsdWUgPiAwCiAgICAgICAgKTsKICAgICAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLmFkZCh2YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihmcm9tLCB0bywgdmFsdWUpOwogICAgfQoKICAgIC8vIEFsbG93IHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgdmFsdWUgYW1vdW50LgogICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCB2YWx1ZS4KICAgIC8vIEBwYXJhbSBzcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vIEBwYXJhbSB2YWx1ZSBUaGUgYW1vdW50IHRvIGJlIGFwcHJvdmVkCiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBBcHByb3ZhbAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlKTsKICAgIH0KCiAgICAvLyBDaGVjayB0aGUgYWxsb3dlZCB2YWx1ZSBmb3IgdGhlIHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNwZW5kZXIKICAgIC8vIEByZXR1cm4gdGhlIGFtb3VudCB3aGljaCBzcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtzcGVuZGVyXTsKICAgIH0KCiAgICAvLyBHZXQgY3VycmVudCBwcmljZSBvZiBhIFRva2VuCiAgICAvLyBAcmV0dXJuIHRoZSBwcmljZSBvciB0b2tlbiB2YWx1ZSBmb3IgYSBldGhlcgogICAgZnVuY3Rpb24gZ2V0UHJpY2UoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gUFJJQ0U7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9rZW5EZXRhaWwoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nLCBzdHJpbmcsIHVpbnQyNTYpIHsKCXJldHVybiAobmFtZSwgc3ltYm9sLCBfdG90YWxTdXBwbHkpOwogICAgfQp9'.
	

]
