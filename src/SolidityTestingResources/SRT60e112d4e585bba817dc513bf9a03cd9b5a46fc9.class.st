Class {
	#name : #SRT60e112d4e585bba817dc513bf9a03cd9b5a46fc9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT60e112d4e585bba817dc513bf9a03cd9b5a46fc9 >> base64 [
	^ ''.
	

]
