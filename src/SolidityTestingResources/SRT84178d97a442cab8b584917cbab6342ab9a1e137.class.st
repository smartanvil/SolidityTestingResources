Class {
	#name : #SRT84178d97a442cab8b584917cbab6342ab9a1e137,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT84178d97a442cab8b584917cbab6342ab9a1e137 >> base64 [
	^ ''.
	

]
