Class {
	#name : #SRTbc9395973bd35a3b4bd924f050d2778c07506ecb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbc9395973bd35a3b4bd924f050d2778c07506ecb >> base64 [
	^ ''.
	

]
