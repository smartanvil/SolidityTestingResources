Class {
	#name : #SRTd9c58ef8afcfe2df9884724de1614205a7b5f3f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd9c58ef8afcfe2df9884724de1614205a7b5f3f5 >> base64 [
	^ ''.
	

]
