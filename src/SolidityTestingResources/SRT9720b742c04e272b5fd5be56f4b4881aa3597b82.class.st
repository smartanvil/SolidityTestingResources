Class {
	#name : #SRT9720b742c04e272b5fd5be56f4b4881aa3597b82,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9720b742c04e272b5fd5be56f4b4881aa3597b82 >> base64 [
	^ ''.
	

]
