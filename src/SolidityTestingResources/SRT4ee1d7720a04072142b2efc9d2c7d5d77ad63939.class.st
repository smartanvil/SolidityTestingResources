Class {
	#name : #SRT4ee1d7720a04072142b2efc9d2c7d5d77ad63939,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ee1d7720a04072142b2efc9d2c7d5d77ad63939 >> base64 [
	^ ''.
	

]
