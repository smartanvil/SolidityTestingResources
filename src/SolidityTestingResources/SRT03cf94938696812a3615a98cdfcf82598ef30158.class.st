Class {
	#name : #SRT03cf94938696812a3615a98cdfcf82598ef30158,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT03cf94938696812a3615a98cdfcf82598ef30158 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7IC8vIDIzIEZlYnIgMjAxOAoKLyogICAgQ29weXJpZ2h0ICYjMTY5OyAyMDE4ICAtICBBbGwgUmlnaHRzIFJlc2VydmVkCiBVc2UgdGhlIGZpcnN0IGZ1bGx5IGF1dG9ub21vdXMsIHByb2ZpdGFibGUgZm9yIGRlcG9zaXRvcnMsIGJhc2VkIG9uIHNtYXJ0IGNvbnRyYWN0LCAKdG90YWxseSB0cmFuc3BhcmVudCBub25wcm9maXQgRWxlY3Rpb25zIE1hcmtldCBTYXZpbmdzIEJhbmssIGZlZWwgdGhlIGZ1dHVyZSEKIEVsZWN0aW9ucyBNYXJrZXQgU2F2aW5ncyBCYW5rIG9mZmVycyBvcGVuLXNvdXJjZSBzb2x1dGlvbiBmb3IgYXZvaWRpbmcgcmVndWxhdGVkIGJhbmtpbmcgYW5kIGJhbmtpbmcgY29sbGFwc2VzLiAKCiBFbGVjdGlvbnMgTWFya2V0IEJhbmsgc3RyaWN0bHkgZG9lcyBub3QgYWNjZXB0IGFueSBjdXJyZW5jaWVzIHByb2R1Y2VkIHdpdGggdGhlIGxlZ2FsIHNhbmN0aW9uIG9mIHN0YXRlcyBvciBnb3Zlcm5tZW50cyBhbmQgd2lsbCAgbmV2ZXIgZG8uCuKStiBFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuayBkb2VzIG5vdCByZXF1aXJlICBub3IgY2l0aXplbnNoaXAgc3RhdHVzIG5vciBjdXN0b21lcidzIGRvY3VtZW50cy4KCiBFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuayBvZmZlcnMgYW4gaW50ZXJlc3QgcmF0ZSB1cCB0byAyJSBwZXIgZGF5IGZvciBkZXBvc2l0cyAoYmFzaWNhbGx5IDElIHBlciBkYXkgZm9yIGRlcG9zaXRzIDFzdCB5ZWFyIHNpbmNlIG9wZW5pbmcsIAowLjI1JSBkYWlseSBzaW5jZSAybmQgeWVhciBhbmQgMC4wOCUgZGFpbHkgc2luY2UgM3JkIHllYXIgIHVudGlsIHRoZSBlbmQgb2YgdGhlIHdvcmxkKS4KCiBFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuayBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlcyByZXR1cm5zIGZvciBvbGRlciBhbmQgbmV3IHVzZXJzIGJ5IGluY3JlYXNlIEFzc2V0J3MgdG90YWwgc3VwcGx5IAp1bnRpbGwgaXQgcmVhY2hlcyBpbiBjaXJjdWxhdGluZyB0aGUgbWF4IG9mIHN1cHBseSBsZXZlbCBlcXVhbCB0byAxIDU3NiA4MDAgMDAwLiAKRXZlbiBhZnRlciB0aGlzIHdpbGwgaGFwcGVuIGV2ZXJ5Ym9keSBjYW4gZGVjcmVhc2UgdG90YWwgc3VwcGx5IGJ5IGJ1cm5pbmcgaGlzIG93biBiYWxhbmNlcyBvciBieSBzcGVuZGluZyBpbiBkb3VibGVkIGRlcG9zaXRzLCAKbG9zZSBhdCBhIGRpY2UgZ2FtZSBvciBCaW5hcnkgVHJhZGluZy4gQW5kIGdlbmVyYXRpb24gb2YgYmFuaydzIHJldHVybnMgd2lsbCBjb250aW51ZS4KCiBUaGVyZSBpcyBubyB3YXkgZm9yIGRldmVsb3BlcnMgb3IgYW55Ym9keSBlbHNlIHdpdGhkcmF3IEVUSCBmcm9tIHRoZSBiYW5rJ3Mgc21hcnRjb250cmFjdCAodGhlIGJhbmsncyBjYXBpdGFsKSBpbiBhIGRpZmZlcmVudCB3YXksIApleGNlcHQgc2VsbCB0aGUgYXNzZXRzIGJhY2sgdG8gdGhlIGJhbmshICBBbnlib2R5IGNhbiBzYWxlIEFzc2V0cyBiYWNrIHRvIGJhbmsgYW5kIHJlY2VpdmUgdGhlIGNvbGxlY3RlZCBpbiBzbWFydGNvbnRyYWN0IEVUSC4gCk1heCB0byBzZWxsIGJ5IDEgZnVuY3Rpb24ncyBjYWxsIGlzIDEwMCAwMDAgYXNzZXRzICg4IEVUSCkuCgogQnVzaW5lc3MgYWN0aXZpdGllcywgcHJvZml0IG9mIGZpbmFuY2lhbCB0cmFkaW5nIGFuZCByZWNlaXZlZCBieSBiYW5rIGZlZXMgZG8gbm90IGdpdmUgYW55IHByb2ZpdCBmb3IgaW52ZXN0b3JzIGFuZCBkZXZlbG9wZXJzLCAKYnV0IGRlY3JlYXNlIHRoZSB0b3RhbCBhbW91bnQgb2YgYXNzZXRzIGluIGNpcmN1bGF0aW9uLgoKIFRoZXJlIGlzIG5vIGxhdyBzdHJvbmdlciB0aGVuIHRoZSBjb2RlLiBObyBvbmUgZ292ZXJubWVudCBldmVyIGNhbiByZWd1bGF0ZSBFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuay4gCiBSZWxlYXNlZCBFbGVjdGlvbiBUcmFuc3BhcmVuY3kuIENyeXB0by1hbmFyY2h5LiBEaWdpdGFsIG1vbmV5LiAKRWxlY3Rpb25zIE1hcmtldCBTYXZpbmdzIEJhbmsgb2ZmZXJzIHRyYW5zcGFyZW50IGNvdW50aW5nICBkZXBlcnNvbmFsaXplZCB2b3RlcyB0ZWNobm9sb2d5IGZvciAgcGVvcGxlJ3MgY2hvaWNlIHZvdGluZy4KCiBZb3VyIFZvdGUgY2FuIGNoYW5nZSBldmVyeXRoaW5nISAKCiBTYXZlIHlvdXIgbW9uZXkgaW4geW91ciBhY2NvdW50IGFuZCBpdCB3aWxsIHRoZSBuZXh0IDU4NCA5NDIgNDE1IDMzNyB5ZWFycyBnZW5lcmF0ZSByZXR1cm5zIGZvciB5b3Ugd2l0aCB0aGUgcHJlZGljdGFibGUgIGhpZ2ggaW50ZXJlc3QgcmF0ZSEKVGhyb3VnaCB0aGUgZnVuY3Rpb24gPDxEZXBvc2l0X2RvdWJsZV9zdW1fcGFpZF9mcm9tX3RoZV9iYWxhbmNlPj4gRWxlY3Rpb25zIE1hcmtldCBTYXZpbmdzIEJhbmsgb2ZmZXJzIGFuIGludGVyZXN0IHJhdGUgMiAlIHBlciBkYXkgCighKSBmb3IgZGVwb3NpdHMgKDFzdCB5ZWFyIHNpbmNlIG9wZW5pbmcpLCAwLjUlIGRhaWx5IHNpbmNlIDJuZCB5ZWFyIGFuZCAwLjE2JSBkYWlseSBzaW5jZSAzcmQgeWVhciAgdW50aWwgdGhlIGVuZCBvZiB0aGUgd29ybGQuCgoqLwoKY29udHJhY3QgSW5Db2RlV2VUcnVzdCB7CiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQyNTYgc2l6ZSkgewogICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpIHsKICAgICAgIHRocm93OwogICAgIH0KICAgICBfOwogIH0KICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICB1aW50MjU2IGludGVybmFsIHZhbHVlOwogIHVpbnQyNTYgaW50ZXJuYWwgdHJhbnNhY3Rpb25fZmVlOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGZ1bmN0aW9uIHRyYW5zZmVyX0RpZmZlcmVudF9hbW91bnRzX29mX2Fzc2V0c190b19tYW55IChhZGRyZXNzW10gX3JlY2lwaWVudHMsIHVpbnRbXSBfYW1vdW50X2NvbW1hX3NwYWNlX2Ftb3VudCkgcHVibGljIHBheWFibGU7CiAgZnVuY3Rpb24gdHJhbnNmZXJfU2FtZV9BbW91bnRzX29mX2Fzc2V0c190b19tYW55X2FkZHJlc3NlcyAoYWRkcmVzc1tdIGFkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b18sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiBSZWZ1bmRhYmx5X2lmX2dhc3ByaWNlX21vcmU1MGd3ZWlfU2VuZF9Wb3Rlc19Gcm9tX1lvdXJfQmFsYW5jZSAoYWRkcmVzcyBzZW5kX1ZvdGVfdG8sIHVpbnQyNTYgYW1vdW50KSAgcHVibGljIHBheWFibGU7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiBDb2xsZWN0X2FjY3J1ZWRfaW50ZXJlc3RfYW5kX3RyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcHVibGljIHBheWFibGU7CiAgZnVuY3Rpb24gdGhlX25vbWluYWxfYW5udWFsX2ludGVyZXN0X3JhdGUgKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgaW50ZXJlc3RfcGVyX3llYXIpOwogIC8vIDE2OAogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgZnVuY3Rpb24gc2hvd19hbm51YWxfcXVhbnRpdHlfb2ZfYXNzZXRzX2FuZF9kYXlzKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQgdW5peF9UaW1lc3RhbXApIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgcXVhbnRpdHlfb2ZfYXNzZXRzX2FuZF9kYXlzKTsKICBmdW5jdGlvbiBzaG93X0JhbGFuY2Vfb2ZfaW50ZXJlc3RfYmVhcmluZ19kZXBvc2l0IChhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhbW91bnRfb2ZfbW9uZXlfZGVwb3NpdGVkX2ludG9feW91cl9zYXZpbmdzX2FjY291bnQpOwogIGZ1bmN0aW9uIHNob3dfQWNjcnVlZF9JbnRlcmVzdCAoYWRkcmVzcyBfYWRkcmVzcykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgaW50ZXJlc3RfZWFybmVkX2J1dF9ub3RfY29sbGVjdGVkKTsKICBmdW5jdGlvbiBEZXBvc2l0X2RvdWJsZV9zdW1fcGFpZF9mcm9tX3RoZV9iYWxhbmNlKHVpbnQyNTYgYW1vdW50X29mX21vbmV5X3RvX09wZW5fYV9UZXJtX0RlcG9zaXQpICBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiBidXlfZnJvbUNvbnRyYWN0KCkgcGF5YWJsZSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBfYW1vdW50Xyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgZnVuY3Rpb24gc2VsbF90b0NvbnRyYWN0ICh1aW50MjU2IGFtb3VudF90b1NlbGwpICBwdWJsaWM7IAogIGZ1bmN0aW9uIHNob3dfQmFsYW5jZV9hdmFpbGFibGVfZm9yX1NhbGVfaW5fRVRIX2VxdWl2YWxlbnQgKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgeW91X2Nhbl9idXlfYWxsX3RoZV9hdmFpbGFibGVfYXNzZXRzX3dpdGhfdGhpc19hbW91bnRfaW5fRVRIKTsKICBmdW5jdGlvbiBTaG93X2F1dG9tYXRlZF9TZWxsX3ByaWNlKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYXNzZXRzX3Blcl8xX0VUSCk7CiAgZnVuY3Rpb24gc2hvd19hdXRvbWF0ZWRfQnV5X3ByaWNlKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYXNzZXRzX3Blcl8xX0VUSCk7CiAgCiAgZnVuY3Rpb24gc2hvd19DYW5kaWRhdGVfVmljdG9yaW91c19pbl9FbGVjdGlvbigpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICAoc3RyaW5nIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbik7CiAgZnVuY3Rpb24gZnJlZV92b3RlX2Zvcl9jYW5kaWRhdGVfQSAoKSBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiBGcmVlX3ZvdGVfZm9yX2NhbmRpZGF0ZV9CICgpICBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiB2b3RlX2Zvcl9jYW5kaWRhdGVfQ19mb3JfZnJlZSAoKSAgcHVibGljIHBheWFibGU7CiAgZnVuY3Rpb24gdm90ZV9mb3JfY2FuZGlkYXRlX0RfZm9yX0ZyZWUgKCkgIHB1YmxpYyBwYXlhYmxlOwogIGZ1bmN0aW9uIFZvdGVfQ3VzdG9tbHkgKGFkZHJlc3Mgc2VuZF9Wb3RlX3RvKSAgcHVibGljIHBheWFibGU7IAogIGZ1bmN0aW9uIGJhbGFuY2VfYXZhaWxhYmxlX2Zvcl9jdXN0b21fdm90aW5nICgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICBmdW5jdGlvbiBkZXZlbG9wZXJfc3RyaW5nX0EgKHN0cmluZyBBX2xpbmUpICAgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9hZGRfYWRkcmVzc19mb3JfQSAoYWRkcmVzcyBBZGRyZXNzQSkgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZF9zdHJpbmdfQiAoc3RyaW5nIEJfbGluZSkgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZF9hZGRyZXNzX2Zvcl9CIChhZGRyZXNzIEFkZHJlc3NCKSAgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfc3RyaW5nX0MgKHN0cmluZyBDX2xpbmUpICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZHJlc3NfZm9yX0MgKGFkZHJlc3MgQWRkcmVzc0MpICAgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9zdHJpbmdfRCAoc3RyaW5nIERfbGluZSkgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfYWRkcmVzc19mb3JfRCAoYWRkcmVzcyBBZGRyZXNzRCkgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9zdHJpbmdfZ29sb3MgKHN0cmluZyBnb2xvcykgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfc3Rha2VfcmV3YXJkX3JhdGUgKHN0cmluZyBzdHJpbmdfcmV3YXJkKSAgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfZWRpdF90ZXh0X3ByaWNlIChzdHJpbmcgZWRpdF90ZXh0X1ByaWNlKSAgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfZWRpdF90ZXh0X2Ftb3VudCAoc3RyaW5nIHN0cmluZ19hbW91bnQpICAgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9lZGl0X3RleHRfY3Jvd2RzYWxlIChzdHJpbmcgc3RyaW5nX2Nyb3dkc2FsZSkgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9mZWVzIChzdHJpbmcgc3RyaW5nX2ZlZXMpICAgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9lZGl0X3RleHRfbWluaW11bV9wZXJpb2QgKHN0cmluZyBzdHJpbmdfcGVyaW9kKSAgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfZWRpdF90ZXh0X0V4Y2hhbmdlc19saW5rcyAoc3RyaW5nIHVwZGF0ZV9saW5rcykgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX3N0cmluZ19jb250cmFjdF92ZXJpZmllZCAoc3RyaW5nIHN0cmluZ19jb250cmFjdF92ZXJpZmllZCkgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl91cGRhdGVfVGVybXNfb2Zfc2VydmljZSAoc3RyaW5nIHVwZGF0ZV90ZXh0X1Rlcm1zX29mX3NlcnZpY2UpICAgcHVibGljOwogIGZ1bmN0aW9uIGRldmVsb3Blcl9lZGl0X25hbWUgKHN0cmluZyBlZGl0X3RleHRfbmFtZSkgICBwdWJsaWM7CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX0hvd19UbyAgKHN0cmluZyBlZGl0X3RleHRfSG93X3RvKSAgIHB1YmxpYzsKICBmdW5jdGlvbiBkZXZlbG9wZXJfdm90aW5nX2luZm8gKHN0cmluZyBlZGl0X3RleHRfdm90aW5nX2luZm8pICAgcHVibGljOwoKICBmdW5jdGlvbiBzaG93X251bWJlcl9vZl9kYXlzX3NpbmNlX2Jhbmtfb3BlbmluZygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICAodWludCBEYXlfTnVtYmVyKTsKICBmdW5jdGlvbiBhbm51YWxfY2lyY3VsYXRpbmdfc3VwcGx5ICgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGFzc2V0c19pbl9jaXJjdWxhdGlvbik7CiAgZnVuY3Rpb24gRG9uYXRlX3NvbWVfYW1vdW50X2FuZF9zYXZlX3lvdXJfc3Rha2VfcmV3YXJkcyh1aW50MjU2IF92YWx1ZSkgIHB1YmxpYyBwYXlhYmxlOwogIGZ1bmN0aW9uIHRvdGFsbHlfZGVjcmVhc2VfdGhlX3N1cHBseSh1aW50MjU2IGFtb3VudF90b19idXJuX2Zyb21fc3VwcGx5KSBwdWJsaWMgcGF5YWJsZTsKICBmdW5jdGlvbiBVbml4X1RpbWVzdGFtcF9CaW5hcnlfVHJhZGluZyAodWludDI1NiBiZXQpIHB1YmxpYyBwYXlhYmxlOwogIGZ1bmN0aW9uIGRpY2VfZ2FtZSAodWludDI1NiBiZXQpIHB1YmxpYyBwYXlhYmxlOwogfQovKgogICAgRm9yIGVhcmx5IGludmVzdG9ycyEKICAgIElmIHlvdSBzZW5kIEV0aGVyZXVtIGRpcmVjdGx5IHRvIHRoaXMgc21hcnRjb250cmFjdCdzIGFkZHJlc3MsCiB5b3Ugd2lsbCByZWNlaXZlIDM1MCBBc3NldHMgKFZvdGVzKSBwZXIgMSBFVEguIEFuZCBleHRyYSBib251cyBpZiBnYXMgcHJpY2Ug4omlIDUwIGd3ZWkKICAgCiovCmNvbnRyYWN0IGludmVzdG9yIGlzIEluQ29kZVdlVHJ1c3QgewogIGFkZHJlc3MgaW50ZXJuYWwgb3duZXI7IAogIHN0cnVjdCBtYWtpbmcgewogICAgdWludDEyOCBhbW91bnQ7CiAgICB1aW50NjQgdGltZTsKICB9IC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFraW5nW10pIGRlcG9zaXQ7IC8vIG1ha2luZ0RlcG9zaXQKICB1aW50MjU2IGludGVybmFsIGJhbmtfb3BlbmluZyA9IDE1MTk4MDUyODg7IC8vV2VkbmVzZGF5LCAyOC1GZWItMTggMDg6MDg6MDggVVRDID0gVU5JWCAxNTE5ODA1Mjg4CiAgdWludDI1NiBpbnRlcm5hbCBzdGFrZU1pbkFnZSA9IDEgZGF5czsKICB1aW50MjU2IGludGVybmFsIHN0YWtlTWF4QWdlID0gMSB5ZWFyczsKICB1aW50IGRhaWx5X2ludGVyZXN0X3JhdGUgPSAxOyAvLyBiYXNpYyAxJSBwZXIgZGF5CiAgdWludDI1NiBpbnRlcm5hbCAgYm91bnR5ID0gOTUwMzc7CiAgYWRkcmVzcyBpbml0aWFsID0gMHhkZTBCMjk1NjY5YTlGRDkzZDVGMjhEOUVjODVFNDBmNGNiNjk3QkFlOwp9Ci8qICBTYWZlTWF0aCAtIHRoZSBsb3dlc3QgcmlzayBsaWJyYXJ5CiAgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCiAgLyogRWZmZWN0aXZlIGFubnVhbCBpbnRlcmVzdCByYXRlID0gKDEgKyAobm9taW5hbCByYXRlIC8gbnVtYmVyIG9mIGNvbXBvdW5kaW5nIHBlcmlvZHMpICkgXiAobnVtYmVyIG9mIGNvbXBvdW5kaW5nIHBlcmlvZHMpIC0gMQogICAgICAKIEVsZWN0aW9ucyBNYXJrZXQgU2F2aW5ncyBCYW5rIG9mZmVycyBhbiBpbnRlcmVzdCByYXRlIHVwIHRvIDIlIHBlciBkYXkgZm9yIGRlcG9zaXRzLiAgCiBCYW5rIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVzIGludGVyZXN0IHJldHVybiAxJSBkYWlseSAoMXN0IHllYXIgc2luY2Ugb3BlbmluZyksIDAuMjUlIGRhaWx5IHNpbmNlIDJuZCB5ZWFyIGFuZCAwLjA4JSBkYWlseSAKIHNpbmNlIDNyZCB5ZWFyICB1bnRpbCB0aGUgZW5kIG9mIHRoZSB3b3JsZC4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHRoZSBjb21wb3VuZGluZyBjYWxjdWxhdGlvbnMgYmVsb3cgOTkgQXNlZXRzIEZlZSB3YXMgbm90IGNvdW50ZWQ6CiAgICAgMSUgZGFpbHkgPSAxLjAxIGRhaWx5LCAxLjAxXjM2NSDiiYggIDM3LjgsIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSA9IDM2ODAlLiAKICAgICDin6xidXlQcmljZS9CdXlfV2FsbF9sZXZlbF9pbl93ZWkgPSAzNSw3MTI14p+tIDwgMzcuOCA9PiBwcm9maXQgd2l0aCBlZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUg4omIIDUsOCUgcGVyIDFzdCB5ZWFyCiAgICAgKG9yIHByb2ZpdCBpcyA3NCw1NjcgdGltZXMgaWYgZnVuY3Rpb24gJ0RlcG9zaXRfZG91YmxlX3N1bV9wYWlkX2Zyb21fdGhlX2JhbGFuY2UnIHVzZWQgPT4gcHJvZml0IDIwOCw4JSBwZXIgMXN0IHllYXIpLgogICAgIAogICAgIElmIGZ1bmN0aW9uICdEZXBvc2l0X2RvdWJsZV9zdW1fcGFpZF9mcm9tX3RoZV9iYWxhbmNlJyBpcyB1c2VkID0+ICAyKjEuMDFeMzY1LTEg4omIICA3NCw1NjcsIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSA9IDczNTclLgogICAgIAogICAgIDElIGRhaWx5ID0gMS4wMSBkYWlseSwgMS4wMV4zNjUg4omIICAzNy44LCBlZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUgPSAzNjgwJS4gCiAgICAgU2luY2UgMm5kIHllYXIgMC4yNSUgZGFpbHkgPSAxLjAwMjUgZGFpbHksIDEuMDAyNV4zNjUg4omIICAyLDQ5LCBlZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUgPSAxMzklLgogICAgIFNpbmNlIDNyZCB5ZWFyIDAuMDglIGRhaWx5ID0gMS4wMDA4IGRhaWx5LCAxLjAwMDheMzY1IOKJiCAgMSwzMzg5LCBlZmZlY3RpdmUgYW5udWFsIGludGVyZXN0IHJhdGUgPSAzMy44OSUuCiAgICAgCiAgVGhlIG1heGltdW0gc3VtIGNhbiBiZSBpbnZlc3RlZCAgYnkgdGhlIGZ1bmN0aW9uIGNhbGwgPDxEZXBvc2l0X2RvdWJsZV9zdW1fcGFpZF9mcm9tX3RoZV9iYWxhbmNlPj4gaXMgYWxsIHRoZSBhdmFpbGFibGUgYmFsYW5jZSBvZiB0aGUgQXNzZXRzIGFmdGVyIGRlZHVjdGlvbiA5OSBpbnZpb2xhYmxlIGJhbGFuY2UuIAogIFlvdSBtYXkgYWxzbyBjb21wb3VuZCBpbnRlcmVzdCBvciB3aXRoZHJhdyB0aGUgaW50ZXJlc3QgaW5jb21lIGF0IGFueSB0aW1lIGJ5IGNhbGxpbmcgdGhlIGZ1bmN0aW9uIDw8Q29sbGVjdF9hY2NydWVkX2ludGVyZXN0X2FuZF90cmFuc2Zlcj4+LiAKICAqLwoKCmNvbnRyYWN0IFNhdG9zaGkgaXMgaW52ZXN0b3IgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIHVpbnQyNTYgdG90YWxGdW5kID0gMTEyICoqIDM7IAogIC8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvCiAgdWludDI1NiBidXlQcmljZSA9ICAgMjg1NyAqIDEwICoqIDEyIDsgICAvLyAwLDAwMjg1NyBFVEggcGVyIDEgQXNzZXQgIG9yIDM1MCwwMiBBc3NldHMgcGVyIDEgRVRICiAgdWludDI1NiBwdWJsaWMgQnV5X1dhbGxfbGV2ZWxfaW5fd2VpID0gKDI4MDAgKiAxMCAqKiAxMikgLyAzNSA7IC8vIDAsMDAwMDggRVRIIHBlciAxIEFzc2V0CiAKICAgIC8qIEJhdGNoIGFzc2V0cyB0cmFuc2Zlci4gVXNlZCAgdG8gZGlzdHJpYnV0ZSAgYXNzZXRzIHRvIGhvbGRlcnMgKi8KICBmdW5jdGlvbiB0cmFuc2Zlcl9EaWZmZXJlbnRfYW1vdW50c19vZl9hc3NldHNfdG9fbWFueSAoYWRkcmVzc1tdIF9yZWNpcGllbnRzLCB1aW50W10gX2Ftb3VudF9jb21tYV9zcGFjZV9hbW91bnQpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKCBfcmVjaXBpZW50cy5sZW5ndGggPiAwICYmIF9yZWNpcGllbnRzLmxlbmd0aCA9PSBfYW1vdW50X2NvbW1hX3NwYWNlX2Ftb3VudC5sZW5ndGgpOwoKICAgICAgICB1aW50MjU2IHRvdGFsID0gMDsKICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IF9hbW91bnRfY29tbWFfc3BhY2VfYW1vdW50Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgdG90YWwgPSB0b3RhbC5hZGQoX2Ftb3VudF9jb21tYV9zcGFjZV9hbW91bnRbaV0pOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKHRvdGFsIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgICBmb3IodWludCBqID0gMDsgaiA8IF9yZWNpcGllbnRzLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgYmFsYW5jZXNbX3JlY2lwaWVudHNbal1dID0gYmFsYW5jZXNbX3JlY2lwaWVudHNbal1dLmFkZChfYW1vdW50X2NvbW1hX3NwYWNlX2Ftb3VudFtqXSk7CiAgICAgICAgICAgIGRlcG9zaXRbX3JlY2lwaWVudHNbal1dLnB1c2gobWFraW5nKHVpbnQxMjgoX2Ftb3VudF9jb21tYV9zcGFjZV9hbW91bnRbal0pLF9ub3cpKTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3JlY2lwaWVudHNbal0sIF9hbW91bnRfY29tbWFfc3BhY2VfYW1vdW50W2pdKTsKICAgICAgICB9CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIodG90YWwpOwogICAgICAgIGlmKGRlcG9zaXRbbXNnLnNlbmRlcl0ubGVuZ3RoID4gMCkgZGVsZXRlIGRlcG9zaXRbbXNnLnNlbmRlcl07CiAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAwKSBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgoYmFsYW5jZXNbbXNnLnNlbmRlcl0pLF9ub3cpKTsKICB9IC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogCiAgZnVuY3Rpb24gdHJhbnNmZXJfU2FtZV9BbW91bnRzX29mX2Fzc2V0c190b19tYW55X2FkZHJlc3NlcyAoYWRkcmVzc1tdIGFkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b18sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcGF5YWJsZSB7IAogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICB1aW50NjQgX25vdyA9IHVpbnQ2NChub3cpOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b18ubGVuZ3RoOyBpKyspewogICAgICAgICBpZihiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpICB7IAogICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgICBiYWxhbmNlc1thZGRyZXNzX3RvX2NvbW1hX3NwYWNlX2FkZHJlc3NfdG9fW2ldXSA9IGJhbGFuY2VzW2FkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b19baV1dLmFkZChfdmFsdWUpOwogICAgICAgICBkZXBvc2l0W2FkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b19baV1dLnB1c2gobWFraW5nKHVpbnQxMjgoX3ZhbHVlKSxfbm93KSk7CiAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFkZHJlc3NfdG9fY29tbWFfc3BhY2VfYWRkcmVzc190b19baV0sIF92YWx1ZSk7CiAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoZGVwb3NpdFttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgICBpZihiYWxhbmNlc1ttc2cuc2VuZGVyXSA+IDApIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksX25vdykpOwogIH0KfQogCmNvbnRyYWN0IEludmVudG9yIGlzIFNhdG9zaGkgewogZnVuY3Rpb24gSW52ZW50b3IoKSBpbnRlcm5hbCB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiB9CiBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKIH0KIGZ1bmN0aW9uIGRldmVsb3Blcl9UcmFuc2Zlcl9vd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOyAgICAgIAogICAgb3duZXIgPSBuZXdPd25lcjsKIH0KIGZ1bmN0aW9uIGRldmVsb3Blcl9pbmNyZWFzZV9wcmljZXMgKHVpbnQyNTYgX2luY3JlYXNlLCB1aW50MjU2IGluY3JlYXNlKSBvbmx5T3duZXIgcHVibGljIHsKICAgQnV5X1dhbGxfbGV2ZWxfaW5fd2VpID0gX2luY3JlYXNlOyAKICAgYnV5UHJpY2UgPSBpbmNyZWFzZTsKIH0KfSAvLyBFbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8KCmNvbnRyYWN0IFRyYW5zcGFyZW50IGlzIEludmVudG9yIHsKICAgIGZ1bmN0aW9uIFNob3dfYXV0b21hdGVkX1NlbGxfcHJpY2UoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhc3NldHNfcGVyXzFfRVRIKSB7CiAgICAgICAgYXNzZXRzX3Blcl8xX0VUSCA9IDFlMTggLyBCdXlfV2FsbF9sZXZlbF9pbl93ZWk7CiAgICAgICAgcmV0dXJuIGFzc2V0c19wZXJfMV9FVEg7CiAgICB9CiAgCiAgICBmdW5jdGlvbiBzaG93X2F1dG9tYXRlZF9CdXlfcHJpY2UoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhc3NldHNfcGVyXzFfRVRIKSB7CiAgICAgICAgYXNzZXRzX3Blcl8xX0VUSCA9IDFlMTggLyBidXlQcmljZTsKICAgICAgICByZXR1cm4gYXNzZXRzX3Blcl8xX0VUSDsKICAgIH0gICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VfYXZhaWxhYmxlX2Zvcl9jdXN0b21fdm90aW5nICgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbb3duZXJdOwogICAgfQogICAgZnVuY3Rpb24gZGV2ZWxvcGVyX2N5Y2xlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQp9Cgpjb250cmFjdCBUaGVTbWFydEFzc2V0IGlzIFRyYW5zcGFyZW50IHsKICB1aW50MjU2IGludGVybmFsIGluaXRpYWxTdXBwbHk7CiAgdWludCBwdWJsaWMgY29uc3RhbnQgbWF4X1RvdGFsU3VwcGx5X2xpbWl0ID0gNTAgeWVhcnM7IC8vIDEgNTc2IDgwMCAwMDAKICBhZGRyZXNzIGludGVybmFsIHNwb25zb3IgPSAweDE1MjI5MDBCNmRhRmFjNTg3ZDQ5OWE4NjI4NjFDMDg2OUJlNkU0Mjg7CiAgbW9kaWZpZXIgY2FuTWluZSgpIHsKICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5IDw9IG1heF9Ub3RhbFN1cHBseV9saW1pdCk7CiAgICAgICAgXzsKICAgIH0KICBmdW5jdGlvbiBDb21wb3VuZF9ub3dfQWNjcnVlZF9pbnRlcmVzdCgpIGNhbk1pbmUgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIE1pbmUoKSBjYW5NaW5lIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiB0b3RhbGx5X2RlY3JlYXNlX3RoZV9zdXBwbHkodWludDI1NiBhbW91bnRfdG9fYnVybl9mcm9tX3N1cHBseSkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gYW1vdW50X3RvX2J1cm5fZnJvbV9zdXBwbHkpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGFtb3VudF90b19idXJuX2Zyb21fc3VwcGx5KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihhbW91bnRfdG9fYnVybl9mcm9tX3N1cHBseSk7CiAgfQp9Cgpjb250cmFjdCBWb3RlciBpcyBUaGVTbWFydEFzc2V0IHsKICAgIC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogc3RyaW5nIHB1YmxpYyBuYW1lOwogc3RyaW5nIHB1YmxpYyBwb3NpdGl2ZV90ZXJtc19vZl9TZXJ2aWNlOwogc3RyaW5nIHB1YmxpYyBjcm93ZHNhbGU7CiBzdHJpbmcgcHVibGljIHN0YWtlX3Jld2FyZF9yYXRlOwogc3RyaW5nIHB1YmxpYyBzaG93X21pbmltdW1fYW1vdW50Owogc3RyaW5nIHB1YmxpYyB1c2VkX2luX2NvbnRyYWN0X2ZlZXM7CiBzdHJpbmcgcHVibGljIGFsdGVybmF0aXZlX0V4Y2hhbmdlc19saW5rczsKIHN0cmluZyBwdWJsaWMgdm90aW5nX2luZm87CiBzdHJpbmcgcHVibGljIEhvd190b19pbnRlcmFjdF93aXRoX1NtYXJ0Y29udHJhY3Q7CiBzdHJpbmcgcHVibGljIFByaWNlOyAgLy8gYWN0dWFsbHkgMCwwMDEgRVRIIGlmIGdhcyBwcmljZSBpcyAyNSBnd2VpCiBzdHJpbmcgcHVibGljIGNvbnRyYWN0X3ZlcmlmaWVkOwogc3RyaW5nIHB1YmxpYyBzaG93X3RoZV9taW5pbXVtX19yZXdhcmRfcGVyaW9kOwogc3RyaW5nIHB1YmxpYyBTaG93X3RoZV9uYW1lX29mX09wdGlvbl9BOwogYWRkcmVzcyBwdWJsaWMgdGhlX2FkZHJlc3NfZm9yX29wdGlvbl9BOwogc3RyaW5nIHB1YmxpYyBTaG93X3RoZV9uYW1lX29mX09wdGlvbl9COwogYWRkcmVzcyBwdWJsaWMgU2hvd19hZGRyZXNzX2Zvcl9vcHRpb25fQjsKIHN0cmluZyBwdWJsaWMgc2hvd19UaGVfbmFtZV9vZl9vcHRpb25fQzsKIGFkZHJlc3MgcHVibGljIFNob3dfQWRkcmVzc19mb3Jfb3B0aW9uX0M7CiBzdHJpbmcgcHVibGljIHNob3dfdGhlX25hbWVfb2ZfT3B0aW9uX0Q7CiBhZGRyZXNzIHB1YmxpYyB0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0Q7CiBhZGRyZXNzIGludGVybmFsIGZ1bmQgPSAweDAxMDc2MzFmMWI1NWExZTJDREFGQWI3MzZlODE3ODI1MmIxMDMyMEU7CiB1aW50IGNvbnN0YW50IGludGVybmFsIGRlY2ltYWxzID0gMDsKIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogIGZ1bmN0aW9uIFZvdGVyICgpIHsKICAgICAgYmFsYW5jZXNbdGhpc10gPSAxMTIgKiogMzsgIC8vIHRoaXMgaXMgdGhlIHRvdGFsIGluaXRpYWwgYXNzZXRzIHNhbGUgbGltaXQKICAgICAgYmFsYW5jZXNbMHgwXSA9IDEzMCAqKiAzOyAgLy8gdGhpcyBsaW1pdCBjYW4gYmUgdXNlZCBvbmx5IGZvciAxIFZvdGUncy1wZXItY2FsbCBjYW5kaWRhdGUncyB2b3RpbmcKICAgICAgYmFsYW5jZXNbb3duZXJdID0gOTUwMzc7ICAvLyB0b3RhbCBhbW91bnQgZm9yIGFsbCBib3VudHkgcHJvZ3JhbXMKICAgICAgLy8gKGluaXRpYWxTdXBwbHkgLyB0b3RhbFN1cHBseSA9IDE0Ni40NyUpIGh0dHA6Ly9nYXdrZXIuY29tLzU4NjQ5NDUvcHV0aW4tY2xpbmdzLXRvLXZpY3RvcnktYXMtcnVzc2lhcy12b3Rlci10dXJub3V0LWV4Y2VlZHMtMTQ2CiAgICAgIGluaXRpYWxTdXBwbHkgPSBiYWxhbmNlc1t0aGlzXSArIGJhbGFuY2VzWzB4MF0gKyBiYWxhbmNlc1tvd25lcl07CiAgICAgIHRvdGFsU3VwcGx5ICA9ICBiYWxhbmNlc1t0aGlzXSAgKyBiYWxhbmNlc1tvd25lcl07CiAgICAgIFRyYW5zZmVyKGluaXRpYWwsIHRoaXMsIHRvdGFsRnVuZCk7CiAgICAgIFRyYW5zZmVyKHNwb25zb3IsIG93bmVyLCBib3VudHkpOyAgICAKICAgICAgZGVwb3NpdFtvd25lcl0ucHVzaChtYWtpbmcodWludDEyOChib3VudHkubXVsKDEgbWludXRlcykpLHVpbnQ2NChub3cpKSk7IC8vKzU3MDIyCiAgICAgIGRlcG9zaXRbc3BvbnNvcl0ucHVzaChtYWtpbmcodWludDEyOChib3VudHkuZGl2KDEgbWludXRlcykpLHVpbnQ2NChub3cpKSk7IC8vMTU4MwogIH0KICAKICAvL1Nob3dfQXZhaWxhYmxlX2JhbGFuY2VfZm9yX1NhbGVfaW5fRVRIX2VxdWl2YWxlbnQKICBmdW5jdGlvbiBzaG93X0JhbGFuY2VfYXZhaWxhYmxlX2Zvcl9TYWxlX2luX0VUSF9lcXVpdmFsZW50ICgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IHlvdV9jYW5fYnV5X2FsbF90aGVfYXZhaWxhYmxlX2Fzc2V0c193aXRoX3RoaXNfYW1vdW50X2luX0VUSCkgewogICAgIHlvdV9jYW5fYnV5X2FsbF90aGVfYXZhaWxhYmxlX2Fzc2V0c193aXRoX3RoaXNfYW1vdW50X2luX0VUSCA9ICBidXlQcmljZSAqIGJhbGFuY2VzW3RoaXNdIC8gMWUxODsKICB9CiAgCiAgZnVuY3Rpb24gYW5udWFsX2NpcmN1bGF0aW5nX3N1cHBseSAoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhc3NldHNfaW5fY2lyY3VsYXRpb24pIHsKICAgICAgICBhc3NldHNfaW5fY2lyY3VsYXRpb24gPSB0b3RhbFN1cHBseSAtIGJhbGFuY2VzW3RoaXNdIC0gYmFsYW5jZXNbdGhlX2FkZHJlc3NfZm9yX29wdGlvbl9BXSAtIGJhbGFuY2VzW1Nob3dfYWRkcmVzc19mb3Jfb3B0aW9uX0JdIC0gYmFsYW5jZXNbU2hvd19BZGRyZXNzX2Zvcl9vcHRpb25fQ10gLSBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0RdOwogICAgICAgIHJldHVybiBhc3NldHNfaW5fY2lyY3VsYXRpb247CiAgfQp9IAoKY29udHJhY3QgSW52ZXN0QXNzZXRzIGlzICBWb3RlciB7CiBmdW5jdGlvbiBzaG93X0FjY3J1ZWRfSW50ZXJlc3QgKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGludGVyZXN0X2Vhcm5lZF9idXRfbm90X2NvbGxlY3RlZCkgIHsgLy8gaHR0cHM6Ly9FbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8vCiAgICAgICAgcmVxdWlyZSgobm93ID49IGJhbmtfb3BlbmluZykgJiYgKGJhbmtfb3BlbmluZyA+IDApKTsKICAgICAgICB1aW50IF9ub3cgPSBub3c7CiAgICAgICAgdWludDI1NiBxdWFudGl0eV9vZl9pbnZlc3RlZCA9IHNob3dfYW5udWFsX3F1YW50aXR5X29mX2Fzc2V0c19hbmRfZGF5cyhfYWRkcmVzcywgX25vdyk7CiAgICAgICAgaWYocXVhbnRpdHlfb2ZfaW52ZXN0ZWQgPD0gMCkgcmV0dXJuIDA7CiAgICAgICAgdWludDI1NiBpbnRlcmVzdCA9IDggKiBkYWlseV9pbnRlcmVzdF9yYXRlOyAvL3NpbmNlIHRoZSAzdGggeWVhcgogICAgICAgIGlmKChfbm93LnN1YihiYW5rX29wZW5pbmcpKS5kaXYoMSBkYXlzKSA9PSAwKSB7CiAgICAgICAgICAgIGludGVyZXN0ID0gMTAwICogZGFpbHlfaW50ZXJlc3RfcmF0ZTsKICAgICAgICB9IGVsc2UgaWYoKF9ub3cuc3ViKGJhbmtfb3BlbmluZykpLmRpdigxIGRheXMpID09IDEpewogICAgICAgICAgICBpbnRlcmVzdCA9ICgyNSAqIGRhaWx5X2ludGVyZXN0X3JhdGUpOwogICAgICAgIH0KICAgICAgICBpbnRlcmVzdF9lYXJuZWRfYnV0X25vdF9jb2xsZWN0ZWQgPSAocXVhbnRpdHlfb2ZfaW52ZXN0ZWQgKiBpbnRlcmVzdCkuZGl2KDEwMDAwKTsKICAgICAgICByZXR1cm4gaW50ZXJlc3RfZWFybmVkX2J1dF9ub3RfY29sbGVjdGVkOyAKIH0KICAgCiBmdW5jdGlvbiBzaG93X251bWJlcl9vZl9kYXlzX3NpbmNlX2Jhbmtfb3BlbmluZygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICAodWludCBEYXlfTnVtYmVyKSB7CiAgICAgICAgdWludCB0aW1lc3RhbXA7CiAgICAgICAgdWludCBfbm93ID0gbm93OwogICAgICAgIHRpbWVzdGFtcCA9IF9ub3cuc3ViKGJhbmtfb3BlbmluZyk7CiAgICAgICAgRGF5X051bWJlciA9IHRpbWVzdGFtcC5kaXYoMSBkYXlzKTsKICAgICAgICByZXR1cm4gRGF5X051bWJlcjsKIH0KCiBmdW5jdGlvbiB0aGVfbm9taW5hbF9hbm51YWxfaW50ZXJlc3RfcmF0ZSAoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBpbnRlcmVzdF9wZXJfeWVhcikgewogICAgICAgIHVpbnQgX25vdyA9IG5vdzsKICAgICAgICBpbnRlcmVzdF9wZXJfeWVhciA9ICg4ICogMzY1ICogZGFpbHlfaW50ZXJlc3RfcmF0ZSkuZGl2KDEwMCk7CiAgICAgICAgaWYoKF9ub3cuc3ViKGJhbmtfb3BlbmluZykpLmRpdigxIGRheXMpID09IDApIHsKICAgICAgICAgICAgaW50ZXJlc3RfcGVyX3llYXIgPSAgZGFpbHlfaW50ZXJlc3RfcmF0ZS5tdWwoMzY1KTsKICAgICAgICB9IGVsc2UgaWYoKF9ub3cuc3ViKGJhbmtfb3BlbmluZykpLmRpdigxIGRheXMpID09IDEpewogICAgICAgICAgICBpbnRlcmVzdF9wZXJfeWVhciA9ICgyNSAqIDM2NSAqIGRhaWx5X2ludGVyZXN0X3JhdGUpLmRpdigxMDApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaW50ZXJlc3RfcGVyX3llYXI7CiB9Ci8vIGNhbGN1bGF0b3IgRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvCiBmdW5jdGlvbiBzaG93X2FubnVhbF9xdWFudGl0eV9vZl9hc3NldHNfYW5kX2RheXMoYWRkcmVzcyBfYWRkcmVzcywgdWludCB1bml4X1RpbWVzdGFtcCkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiBxdWFudGl0eV9vZl9hc3NldHNfYW5kX2RheXMpIC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogewogICAgICAgIGlmKGRlcG9zaXRbX2FkZHJlc3NdLmxlbmd0aCA8PSAwKSByZXR1cm4gMDsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgZGVwb3NpdFtfYWRkcmVzc10ubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiggdW5peF9UaW1lc3RhbXAgPCB1aW50KGRlcG9zaXRbX2FkZHJlc3NdW2ldLnRpbWUpLmFkZChzdGFrZU1pbkFnZSkgKSBjb250aW51ZTsKCiAgICAgICAgICAgIHVpbnQgbkNvaW5TZWNvbmRzID0gdW5peF9UaW1lc3RhbXAuc3ViKHVpbnQoZGVwb3NpdFtfYWRkcmVzc11baV0udGltZSkpOwogICAgICAgICAgICBpZiggbkNvaW5TZWNvbmRzID4gc3Rha2VNYXhBZ2UgKSBuQ29pblNlY29uZHMgPSBzdGFrZU1heEFnZTsKCiAgICAgICAgICAgIHF1YW50aXR5X29mX2Fzc2V0c19hbmRfZGF5cyA9IHF1YW50aXR5X29mX2Fzc2V0c19hbmRfZGF5cy5hZGQodWludChkZXBvc2l0W19hZGRyZXNzXVtpXS5hbW91bnQpICogbkNvaW5TZWNvbmRzLmRpdigxIGRheXMpKTsKICAgICAgICB9CiB9ICAgCiBmdW5jdGlvbiBzaG93X0JhbGFuY2Vfb2ZfaW50ZXJlc3RfYmVhcmluZ19kZXBvc2l0IChhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBhbW91bnRfb2ZfbW9uZXlfZGVwb3NpdGVkX2ludG9feW91cl9zYXZpbmdzX2FjY291bnQpCiB7CiAgICAgICBpZihkZXBvc2l0W19hZGRyZXNzXS5sZW5ndGggPD0gMCkgcmV0dXJuIDA7CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGRlcG9zaXRbX2FkZHJlc3NdLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgYW1vdW50X29mX21vbmV5X2RlcG9zaXRlZF9pbnRvX3lvdXJfc2F2aW5nc19hY2NvdW50ID0gYW1vdW50X29mX21vbmV5X2RlcG9zaXRlZF9pbnRvX3lvdXJfc2F2aW5nc19hY2NvdW50LmFkZCh1aW50KGRlcG9zaXRbX2FkZHJlc3NdW2ldLmFtb3VudCkpOwogICAgICAgIH0KIH0gCiAgICAKIAogLy8gQ29sbGVjdCBhY2NydWVkIGludGVyZXN0IHJld2FyZCAocmVjZWl2ZSBzdGFraW5nIHByb2ZpdCkKIGZ1bmN0aW9uIENvbXBvdW5kX25vd19BY2NydWVkX2ludGVyZXN0KCkgY2FuTWluZSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgOTkpIHJldHVybiBmYWxzZTsKICAgICAgICAvLyBodHRwczovL0VsZWN0aW9uc01hcmtldFNhdmluZ3NCYW5rLmdpdGh1Yi5pby8KICAgICAgICB1aW50MjU2IHJld2FyZCA9IHNob3dfQWNjcnVlZF9JbnRlcmVzdChtc2cuc2VuZGVyKTsKICAgICAgICBpZihyZXdhcmQgPCAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgdWludDI1NiBwcm9maXQgPSByZXdhcmQgLSA5OTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChyZXdhcmQpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKyBwcm9maXQ7CiAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5hZGQoOTkpOwogICAgICAgIGRlbGV0ZSBkZXBvc2l0W21zZy5zZW5kZXJdOwogICAgICAgIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksdWludDY0KG5vdykpKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCA5OSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgcmV3YXJkKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKIH0KIAogZnVuY3Rpb24gTWluZSgpIGNhbk1pbmUgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvL3RoZSBtaW5pbXVtIGZlZSBmb3IgbWluaW5nICBpcyA5OSAgQXNzZXRzCiAgICAgICAgLy8gdGhlIG1pbmltdW0gYW1vdW50IGZvciBtaW5pbmcgaXMgOTkgQXNzZXRzCiAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCA5OSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICB1aW50MjU2IHJld2FyZCA9IHNob3dfQWNjcnVlZF9JbnRlcmVzdChtc2cuc2VuZGVyKTsKICAgICAgICBpZihyZXdhcmQgPCAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgdWludDI1NiBwcm9maXQgPSByZXdhcmQgLSA5OTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChyZXdhcmQpOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKyBwcm9maXQ7CiAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5hZGQoOTkpOwogICAgICAgIGRlbGV0ZSBkZXBvc2l0W21zZy5zZW5kZXJdOwogICAgICAgIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksdWludDY0KG5vdykpKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCA5OSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgcmV3YXJkKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKIH0KCi8vQ2xvc2luZyBhIHRlcm0gZGVwb3NpdCBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgdGVybSwgb3IgbWF0dXJpdHksIGNvbWVzIHdpdGggdGhlIGNvbnNlcXVlbmNlIG9mIHNhdmluZyBvbmx5IHRoZSBkb3VibGVkIGludGVyZXN0ISBUaGUgcGVuYWx0eSBmb3Igd2l0aGRyYXdpbmcgcHJlbWF0dXJlbHkgaXMgdGhlIHN1bSAiYW1vdW50X3RvX2ludmVzdCIuICAKIGZ1bmN0aW9uIERlcG9zaXRfZG91YmxlX3N1bV9wYWlkX2Zyb21fdGhlX2JhbGFuY2UodWludDI1NiBhbW91bnRfb2ZfbW9uZXlfdG9fT3Blbl9hX1Rlcm1fRGVwb3NpdCkgIHB1YmxpYyBwYXlhYmxlIHsgLy8gaHR0cHM6Ly9FbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8vCiAgICAgICAgdWludCBfZG91YmxlID0gKGFtb3VudF9vZl9tb25leV90b19PcGVuX2FfVGVybV9EZXBvc2l0KS5hZGQoOTkpOwogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8PSBfZG91YmxlKSB7CiAgICAgICAgICAgIGFtb3VudF9vZl9tb25leV90b19PcGVuX2FfVGVybV9EZXBvc2l0ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKDk5KTsKICAgICAgICB9CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoYW1vdW50X29mX21vbmV5X3RvX09wZW5fYV9UZXJtX0RlcG9zaXQpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKGFtb3VudF9vZl9tb25leV90b19PcGVuX2FfVGVybV9EZXBvc2l0KTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCAweDAsIGFtb3VudF9vZl9tb25leV90b19PcGVuX2FfVGVybV9EZXBvc2l0KTsKICAgICAgICB1aW50MjU2IGRvdWJsZWREZXBvc2l0ID0gYW1vdW50X29mX21vbmV5X3RvX09wZW5fYV9UZXJtX0RlcG9zaXQgKiAyOwogICAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgICAgaWYoZGVwb3NpdFttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgICBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgoYmFsYW5jZXNbbXNnLnNlbmRlcl0pLF9ub3cpKTsKICAgICAgICBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgoZG91YmxlZERlcG9zaXQpLF9ub3cpKTsKIH0KCi8vIGZlZSBpcyAyJQogZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB7CiAgICAgICAgICAgIF92YWx1ZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIH0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIHVpbnQyNTYgdHJhbnNhY3Rpb25fZmVlcyA9ICBfdmFsdWUgLyA1MDsgLy90cmFuc2FjdGlvbnMgbGVzcyB0aGVuIDUwIGFzc2V0cyB1c2UgMCBmZWUKICAgICAgICB1aW50MjU2IHZhbHVldG8gPSBfdmFsdWUuc3ViKHRyYW5zYWN0aW9uX2ZlZXMpOyAKICAgICAgICBiYWxhbmNlc1t0aGlzXSA9IGJhbGFuY2VzW3RoaXNdLmFkZCh0cmFuc2FjdGlvbl9mZWVzKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQodmFsdWV0byk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCB2YWx1ZXRvKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCB0cmFuc2FjdGlvbl9mZWVzKTsKICAgICAgICB1aW50NjQgX25vdyA9IHVpbnQ2NChub3cpOwogICAgICAgIGlmKGRlcG9zaXRbbXNnLnNlbmRlcl0ubGVuZ3RoID4gMCkgZGVsZXRlIGRlcG9zaXRbbXNnLnNlbmRlcl07CiAgICAgICAgZGVwb3NpdFttc2cuc2VuZGVyXS5wdXNoKG1ha2luZyh1aW50MTI4KGJhbGFuY2VzW21zZy5zZW5kZXJdKSxfbm93KSk7CiAgICAgICAgZGVwb3NpdFtfdG9dLnB1c2gobWFraW5nKHVpbnQxMjgodmFsdWV0byksX25vdykpOwogfQoKLy8gRmVlIGlzIDk5IGFzc2V0cyBpZiByZXdhcmQg4omlIDk5IGFuZCBwbHVzIDIlIGlmIHRyYW5zZmVyZWQg4omlIDUwIGFzc2V0cwovLyBJbiBvcmRlciB0byB3aXRoZHJhdyB0aGUgaW50ZXJlc3QgaW5jb21lIG9yIHJlaW52ZXN0IGl0IC0gcGFzdGUgeW91ciBvd24gYWRkcmVzcyBpbiAnX3RvJyBmaWVsZC4KIGZ1bmN0aW9uIENvbGxlY3RfYWNjcnVlZF9pbnRlcmVzdF9hbmRfdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBwdWJsaWMgcGF5YWJsZSB7IAogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF92YWx1ZSkgewogICAgICAgICAgICBfdmFsdWUgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICB9CiAgICAgICAgdWludDI1NiByZXdhcmQgPSBzaG93X0FjY3J1ZWRfSW50ZXJlc3QobXNnLnNlbmRlcik7CiAgICAgICAgdHJhbnNhY3Rpb25fZmVlID0gIF92YWx1ZSAvIDUwOyAvL3RyYW5zYWN0aW9ucyBsZXNzIHRoZW4gNTAgYXNzZXRzIHVzZSAwIGZlZQogICAgICAgIHZhbHVlID0gX3ZhbHVlLnN1Yih0cmFuc2FjdGlvbl9mZWUpOwogICAgICAgIC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLyAKICAgICAgICBpZihyZXdhcmQgPCA5OSkgewogICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgICBiYWxhbmNlc1t0aGlzXSA9IGJhbGFuY2VzW3RoaXNdLmFkZCh0cmFuc2FjdGlvbl9mZWUpOwogICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQodmFsdWUpOwogICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIHZhbHVlKTsKICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgdHJhbnNhY3Rpb25fZmVlKTsKICAgICAgICB9CiAgICAgICAgaWYocmV3YXJkID49IDk5KSB7ICAgIAogICAgICAgICB1aW50MjU2IHByb2ZpdCA9IHJld2FyZC5zdWIoOTkpOwogICAgICAgICB1aW50MjU2IHByb2ZpdF9mZWUgPSB0cmFuc2FjdGlvbl9mZWUuYWRkKDk5KTsKICAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQocmV3YXJkKTsKICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQocHJvZml0KTsKICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5hZGQocHJvZml0X2ZlZSk7CiAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZCh2YWx1ZSk7CiAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgdmFsdWUpOwogICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBwcm9maXRfZmVlKTsKICAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgcmV3YXJkKTsKICAgICAgICB9CiAgICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgICBpZihkZXBvc2l0W21zZy5zZW5kZXJdLmxlbmd0aCA+IDApIGRlbGV0ZSBkZXBvc2l0W21zZy5zZW5kZXJdOwogICAgICAgIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksX25vdykpOwogICAgICAgIGRlcG9zaXRbX3RvXS5wdXNoKG1ha2luZyh1aW50MTI4KHZhbHVlKSxfbm93KSk7CiB9CiAKIC8vIHdoZW4geW91IERvbmF0ZSBhbnkgYW1vdW50IGZyb20gYmFsYW5jZSwgZGVwb3NpdCBpcyB1bnRvdWNoZWQKIGZ1bmN0aW9uIERvbmF0ZV9zb21lX2Ftb3VudF9hbmRfc2F2ZV95b3VyX3N0YWtlX3Jld2FyZHModWludDI1NiBfdmFsdWUpICBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB7CiAgICAgICAgICAgIF92YWx1ZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIH0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW2Z1bmRdID0gYmFsYW5jZXNbZnVuZF0uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgZnVuZCwgX3ZhbHVlKTsKIH0gCn0KCmNvbnRyYWN0IFZvdGVGdW5jdGlvbnMgaXMgSW52ZXN0QXNzZXRzIHsKICAgLy8gICYjMTY5O0VsZWN0aW9uc01hcmtldFNhdmluZ3NCYW5rLmdpdGh1Yi5pbwogZnVuY3Rpb24gZnJlZV92b3RlX2Zvcl9jYW5kaWRhdGVfQSAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAvLyB2b3RlIGZvciBBIAoJICAgIGlmIChtc2cudmFsdWUgPiAwKSB7IAoJICAgICAgdWludDI1NiBfdm90ZXMgPSBtc2cudmFsdWUgLyBidXlQcmljZTsgICAgICAgICAKCQkgIGJhbGFuY2VzW3RoZV9hZGRyZXNzX2Zvcl9vcHRpb25fQV0gPSBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0FdLmFkZChfdm90ZXMpOwoJCSAgcmVxdWlyZShiYWxhbmNlc1t0aGlzXSA+PSBfdm90ZXMpOwoJICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5zdWIoX3ZvdGVzKTsKICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoZV9hZGRyZXNzX2Zvcl9vcHRpb25fQSwgX3ZvdGVzKTsKCQl9CgkgIHJlcXVpcmUoYmFsYW5jZXNbMHgwXSA+PSAxKTsKICAgICAgYmFsYW5jZXNbMHgwXSAtPSAxOwogICAgICBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0FdICs9IDE7CiAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKDEpOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0EsIDEpOwogfQoKIGZ1bmN0aW9uIEZyZWVfdm90ZV9mb3JfY2FuZGlkYXRlX0IgKCkgIHB1YmxpYyBwYXlhYmxlIHsKICAgIC8vIHZvdGUgZm9yIEIKCSAgICBpZiAobXNnLnZhbHVlID4gMCkgeyAKCSAgICAgIHVpbnQyNTYgX3ZvdGVzID0gbXNnLnZhbHVlIC8gYnV5UHJpY2U7ICAgIAoJCSAgYmFsYW5jZXNbU2hvd19hZGRyZXNzX2Zvcl9vcHRpb25fQl0gPSBiYWxhbmNlc1tTaG93X2FkZHJlc3NfZm9yX29wdGlvbl9CXS5hZGQoX3ZvdGVzKTsKCQkgIHJlcXVpcmUoYmFsYW5jZXNbdGhpc10gPj0gX3ZvdGVzKTsKCSAgICAgIGJhbGFuY2VzW3RoaXNdID0gYmFsYW5jZXNbdGhpc10uc3ViKF92b3Rlcyk7CiAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBTaG93X2FkZHJlc3NfZm9yX29wdGlvbl9CLCBfdm90ZXMpOwoJCX0KCSAgcmVxdWlyZShiYWxhbmNlc1sweDBdID49IDEpOwogICAgICBiYWxhbmNlc1sweDBdIC09IDE7CiAgICAgIGJhbGFuY2VzW1Nob3dfYWRkcmVzc19mb3Jfb3B0aW9uX0JdICs9IDE7CiAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKDEpOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBTaG93X2FkZHJlc3NfZm9yX29wdGlvbl9CLCAxKTsKIH0KCiBmdW5jdGlvbiB2b3RlX2Zvcl9jYW5kaWRhdGVfQ19mb3JfZnJlZSAoKSAgcHVibGljIHBheWFibGUgewogICAgLy8gdm90ZSBmb3IgQwoJICAgIGlmIChtc2cudmFsdWUgPiAwKSB7IAoJICAgICAgdWludDI1NiBfdm90ZXMgPSBtc2cudmFsdWUgLyBidXlQcmljZTsgICAKCQkgIGJhbGFuY2VzW1Nob3dfQWRkcmVzc19mb3Jfb3B0aW9uX0NdID0gYmFsYW5jZXNbU2hvd19BZGRyZXNzX2Zvcl9vcHRpb25fQ10uYWRkKF92b3Rlcyk7CgkJICByZXF1aXJlKGJhbGFuY2VzW3RoaXNdID49IF92b3Rlcyk7CgkgICAgICBiYWxhbmNlc1t0aGlzXSA9IGJhbGFuY2VzW3RoaXNdLnN1Yihfdm90ZXMpOwogICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgU2hvd19BZGRyZXNzX2Zvcl9vcHRpb25fQywgX3ZvdGVzKTsKCQl9CgkgIHJlcXVpcmUoYmFsYW5jZXNbMHgwXSA+PSAxKTsKICAgICAgYmFsYW5jZXNbMHgwXSAtPSAxOwogICAgICBiYWxhbmNlc1tTaG93X0FkZHJlc3NfZm9yX29wdGlvbl9DXSArPSAxOwogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZCgxKTsKICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgU2hvd19BZGRyZXNzX2Zvcl9vcHRpb25fQywgMSk7CiB9CgoKIGZ1bmN0aW9uIHZvdGVfZm9yX2NhbmRpZGF0ZV9EX2Zvcl9GcmVlICgpICBwdWJsaWMgcGF5YWJsZSB7CiAgICAvLyB2b3RlIGZvciBDCgkgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsgCgkgICAgICB1aW50MjU2IF92b3RlcyA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAKCQkgIGJhbGFuY2VzW3RoZV9hZGRyZXNzX2Zvcl9vcHRpb25fRF0gPSBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0RdLmFkZChfdm90ZXMpOwoJCSAgcmVxdWlyZShiYWxhbmNlc1t0aGlzXSA+PSBfdm90ZXMpOwoJICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5zdWIoX3ZvdGVzKTsKICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoZV9hZGRyZXNzX2Zvcl9vcHRpb25fRCwgX3ZvdGVzKTsKCQl9CgkgIHJlcXVpcmUoYmFsYW5jZXNbMHgwXSA+PSAxKTsKICAgICAgYmFsYW5jZXNbMHgwXSAtPSAxOwogICAgICBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0RdICs9IDE7CiAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKDEpOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0QsIDEpOwogfQogCiBmdW5jdGlvbiBWb3RlX0N1c3RvbWx5IChhZGRyZXNzIHNlbmRfVm90ZV90bykgIHB1YmxpYyBwYXlhYmxlIHsKICAgIC8vIGNhbiBzZW5kIGEgVm90ZSB0byBhbnkgYWRkcmVzcywgc3BvbnNvcmVkIGJ5IG93bmVyCgkgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsgCgkgICAgICB1aW50NjQgX25vdyA9IHVpbnQ2NChub3cpOyAgICAgCgkgICAgICB1aW50MjU2IF92b3RlcyA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAKCQkgIGJhbGFuY2VzW3NlbmRfVm90ZV90b10gPSBiYWxhbmNlc1tzZW5kX1ZvdGVfdG9dLmFkZChfdm90ZXMpOwoJCSAgcmVxdWlyZShiYWxhbmNlc1t0aGlzXSA+PSBfdm90ZXMpOwoJICAgICAgYmFsYW5jZXNbdGhpc10gPSBiYWxhbmNlc1t0aGlzXS5zdWIoX3ZvdGVzKTsKICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHNlbmRfVm90ZV90bywgX3ZvdGVzKTsKICAgICAgICAgIGRlcG9zaXRbc2VuZF9Wb3RlX3RvXS5wdXNoKG1ha2luZyh1aW50MTI4KF92b3RlcyksX25vdykpOwoJCX0KICAgICAgLy8gaHR0cHM6Ly9FbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8vCiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+IDEpIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YigyKTsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uYWRkKDEpOwogICAgICAgIGJhbGFuY2VzW3NlbmRfVm90ZV90b10gPSBiYWxhbmNlc1tzZW5kX1ZvdGVfdG9dLmFkZCgxKTsKICAgICAgfQogICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPD0gMSkgewogICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSA+PSAxKTsKICAgICAgYmFsYW5jZXNbb3duZXJdIC09IDE7CiAgICAgIGJhbGFuY2VzW3NlbmRfVm90ZV90b10gKz0gMTsKICAgICAgfQogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBzZW5kX1ZvdGVfdG8sIDEpOwogfQoKIGZ1bmN0aW9uIFJlZnVuZGFibHlfaWZfZ2FzcHJpY2VfbW9yZTUwZ3dlaV9TZW5kX1ZvdGVzX0Zyb21fWW91cl9CYWxhbmNlIChhZGRyZXNzIHNlbmRfVm90ZV90bywgdWludDI1NiBhbW91bnQpICBwdWJsaWMgcGF5YWJsZSB7IC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogICAgICAvLyBjYW4gc2VuZCBhbnkgcXVhbnRpdHkgIG9mIHlvdXIgb3duIGhvbGRlZCBWb3RlcyB0byBhbnkgYWRkcmVzcyArIHJlY2VpdmUgZXh0cmEgYXNzZXRzIGlmIGdhcyBwcmljZSBpcyA+IDUwIGd3ZWkgYW5kIDEgRVRIID0gMzUwIEFzc2V0cy4KCiAgICAgdWludDI1NiByZXN0ID0gICh0eC5nYXNwcmljZSAqIDU3MTQwKSAvIGJ1eVByaWNlIDsKICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSA+PSByZXN0KTsKICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCBhbW91bnQpIHsKICAgICAgICAgICAgYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgICAgfQogICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IGFtb3VudDsKICAgICBiYWxhbmNlc1tzZW5kX1ZvdGVfdG9dICs9IGFtb3VudDsKICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBzZW5kX1ZvdGVfdG8sIGFtb3VudCk7CiAgICAgIAogICAgaWYocmVzdCA+IDApIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHJlc3Q7CiAgICBiYWxhbmNlc1tvd25lcl0gLT0gcmVzdDsKICAgIFRyYW5zZmVyKG93bmVyLCBtc2cuc2VuZGVyLCByZXN0KTsKICAgIH0KICAgIAogICAgIGlmKGRlcG9zaXRbbXNnLnNlbmRlcl0ubGVuZ3RoID4gMCkgZGVsZXRlIGRlcG9zaXRbbXNnLnNlbmRlcl07CiAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChiYWxhbmNlc1ttc2cuc2VuZGVyXSksX25vdykpOwogICAgICBkZXBvc2l0W3NlbmRfVm90ZV90b10ucHVzaChtYWtpbmcodWludDEyOChhbW91bnQpLF9ub3cpKTsKIH0KIAogZnVuY3Rpb24gc2hvd19DYW5kaWRhdGVfVmljdG9yaW91c19pbl9FbGVjdGlvbigpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICAoc3RyaW5nIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbikgewogIHVpbnQgQWUgPSBiYWxhbmNlc1t0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0FdOwogIHVpbnQgQmUgPSBiYWxhbmNlc1tTaG93X2FkZHJlc3NfZm9yX29wdGlvbl9CXTsKICB1aW50IENlID0gYmFsYW5jZXNbU2hvd19BZGRyZXNzX2Zvcl9vcHRpb25fQ107CiAgdWludCBEZSA9IGJhbGFuY2VzW3RoZV9hZGRyZXNzX2Zvcl9vcHRpb25fRF07CiAgCiAgdWludCBTdW1tID0gKEFlICsgQmUgKyBDZSArIERlKSAvIDI7CiAgCiAgaWYgKChBZSA+IEJlKSAmJiAoQWUgPiBDZSkgJiYgKEFlID4gRGUpKSB7CiAgICAgIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbiA9IFNob3dfdGhlX25hbWVfb2ZfT3B0aW9uX0E7CiAgfSAKICBpZiAoKEJlID4gQWUpICYmIChCZSA+IENlKSAmJiAoQmUgPiBEZSkpIHsKICAgICAgZ2VuZXJhbF9lbGVjdGlvbl9wcmVkaWN0aW9uID0gU2hvd190aGVfbmFtZV9vZl9PcHRpb25fQjsKICB9IAogIGlmICgoQ2UgPiBBZSkgJiYgKENlID4gQmUpICYmIChDZSA+IERlKSkgewogICAgICBnZW5lcmFsX2VsZWN0aW9uX3ByZWRpY3Rpb24gPSBzaG93X1RoZV9uYW1lX29mX29wdGlvbl9DOwogIH0gCiAgaWYgKChEZSA+IEFlKSAmJiAoRGUgPiBCZSkgJiYgKERlID4gQ2UpKSB7CiAgICAgIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbiA9IHNob3dfVGhlX25hbWVfb2Zfb3B0aW9uX0M7CiAgfSAKICBpZiAoKERlIDw9IFN1bW0pICYmIChDZSA8PSBTdW1tKSAmJiAoQmUgPD0gU3VtbSkgJiYgKEFlIDw9IFN1bW0pKSB7CiAgICAgIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbiA9ICdTdGlsbCBObyBXaW5uZXIgaW4gRWxlY3Rpb24nOwogIH0gCiAgICAgICAgcmV0dXJuIGdlbmVyYWxfZWxlY3Rpb25fcHJlZGljdGlvbjsKIH0KIAogIGZ1bmN0aW9uIGRldmVsb3Blcl9zdHJpbmdfQSAoc3RyaW5nIEFfbGluZSkgICBwdWJsaWMgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIFNob3dfdGhlX25hbWVfb2ZfT3B0aW9uX0EgPSBBX2xpbmU7CiAgfQogIGZ1bmN0aW9uIGRldmVsb3Blcl9hZGRfYWRkcmVzc19mb3JfQSAoYWRkcmVzcyBBZGRyZXNzQSkgICBwdWJsaWMgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHRoZV9hZGRyZXNzX2Zvcl9vcHRpb25fQSA9IEFkZHJlc3NBOwogIH0KICBmdW5jdGlvbiBkZXZlbG9wZXJfYWRkX3N0cmluZ19CIChzdHJpbmcgQl9saW5lKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgU2hvd190aGVfbmFtZV9vZl9PcHRpb25fQiA9IEJfbGluZTsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZF9hZGRyZXNzX2Zvcl9CIChhZGRyZXNzIEFkZHJlc3NCKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgU2hvd19hZGRyZXNzX2Zvcl9vcHRpb25fQiA9IEFkZHJlc3NCOwogIH0KICBmdW5jdGlvbiBkZXZlbG9wZXJfc3RyaW5nX0MgKHN0cmluZyBDX2xpbmUpICBwdWJsaWMgIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBzaG93X1RoZV9uYW1lX29mX29wdGlvbl9DID0gQ19saW5lOwogIH0KICBmdW5jdGlvbiBkZXZlbG9wZXJfYWRkcmVzc19mb3JfQyAoYWRkcmVzcyBBZGRyZXNzQykgICBwdWJsaWMgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIFNob3dfQWRkcmVzc19mb3Jfb3B0aW9uX0MgPSBBZGRyZXNzQzsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX3N0cmluZ19EIChzdHJpbmcgRF9saW5lKSAgcHVibGljICB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgc2hvd190aGVfbmFtZV9vZl9PcHRpb25fRCA9IERfbGluZTsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2FkZHJlc3NfZm9yX0QgKGFkZHJlc3MgQWRkcmVzc0QpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSB0aGVfYWRkcmVzc19mb3Jfb3B0aW9uX0QgPSBBZGRyZXNzRDsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX3N0cmluZ19nb2xvcyAoc3RyaW5nIGdvbG9zKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgc3ltYm9sID0gZ29sb3M7CiAgfQogIGZ1bmN0aW9uIGRldmVsb3Blcl9lZGl0X3N0YWtlX3Jld2FyZF9yYXRlIChzdHJpbmcgc3RyaW5nX3Jld2FyZCkgICBwdWJsaWMgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHN0YWtlX3Jld2FyZF9yYXRlID0gc3RyaW5nX3Jld2FyZDsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9wcmljZSAoc3RyaW5nIGVkaXRfdGV4dF9QcmljZSkgICBwdWJsaWMgewogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIFByaWNlID0gZWRpdF90ZXh0X1ByaWNlOwogIH0KICBmdW5jdGlvbiBkZXZlbG9wZXJfZWRpdF90ZXh0X2Ftb3VudCAoc3RyaW5nIHN0cmluZ19hbW91bnQpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBzaG93X21pbmltdW1fYW1vdW50ID0gc3RyaW5nX2Ftb3VudDsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9jcm93ZHNhbGUgKHN0cmluZyBzdHJpbmdfY3Jvd2RzYWxlKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgY3Jvd2RzYWxlID0gc3RyaW5nX2Nyb3dkc2FsZTsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9mZWVzIChzdHJpbmcgc3RyaW5nX2ZlZXMpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSB1c2VkX2luX2NvbnRyYWN0X2ZlZXMgPSBzdHJpbmdfZmVlczsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9taW5pbXVtX3BlcmlvZCAoc3RyaW5nIHN0cmluZ19wZXJpb2QpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBzaG93X3RoZV9taW5pbXVtX19yZXdhcmRfcGVyaW9kID0gc3RyaW5nX3BlcmlvZDsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfdGV4dF9FeGNoYW5nZXNfbGlua3MgKHN0cmluZyB1cGRhdGVfbGlua3MpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBhbHRlcm5hdGl2ZV9FeGNoYW5nZXNfbGlua3MgPSB1cGRhdGVfbGlua3M7CiAgfQogIGZ1bmN0aW9uIGRldmVsb3Blcl9zdHJpbmdfY29udHJhY3RfdmVyaWZpZWQgKHN0cmluZyBzdHJpbmdfY29udHJhY3RfdmVyaWZpZWQpIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgY29udHJhY3RfdmVyaWZpZWQgPSBzdHJpbmdfY29udHJhY3RfdmVyaWZpZWQ7CiAgfQogIGZ1bmN0aW9uIGRldmVsb3Blcl91cGRhdGVfVGVybXNfb2Zfc2VydmljZSAoc3RyaW5nIHVwZGF0ZV90ZXh0X1Rlcm1zX29mX3NlcnZpY2UpICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBwb3NpdGl2ZV90ZXJtc19vZl9TZXJ2aWNlID0gdXBkYXRlX3RleHRfVGVybXNfb2Zfc2VydmljZTsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX2VkaXRfbmFtZSAoc3RyaW5nIGVkaXRfdGV4dF9uYW1lKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgbmFtZSA9IGVkaXRfdGV4dF9uYW1lOwogIH0KICBmdW5jdGlvbiBkZXZlbG9wZXJfSG93X1RvICAoc3RyaW5nIGVkaXRfdGV4dF9Ib3dfdG8pICAgcHVibGljIHsKICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBIb3dfdG9faW50ZXJhY3Rfd2l0aF9TbWFydGNvbnRyYWN0ID0gZWRpdF90ZXh0X0hvd190bzsKICB9CiAgZnVuY3Rpb24gZGV2ZWxvcGVyX3ZvdGluZ19pbmZvIChzdHJpbmcgZWRpdF90ZXh0X3ZvdGluZ19pbmZvKSAgIHB1YmxpYyB7CiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgdm90aW5nX2luZm8gPSBlZGl0X3RleHRfdm90aW5nX2luZm87CiAgfQoKIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgdWludDI1NiBhc3NldHMgPSAgbXNnLnZhbHVlLyhidXlQcmljZSk7CiAgICB1aW50MjU2IHJlc3QgPSAgKHR4Lmdhc3ByaWNlICogNTcxNDApIC8gYnV5UHJpY2U7IAogICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgIGlmIChhc3NldHMgPiAoYmFsYW5jZXNbdGhpc10gLSByZXN0KSkgewogICAgICAgIGFzc2V0cyA9IGJhbGFuY2VzW3RoaXNdICAtIHJlc3QgOwogICAgICAgIHVpbnQgdmFsdWVXZWkgPSBhc3NldHMgKiBidXlQcmljZSA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUgLSB2YWx1ZVdlaSk7CiAgICB9CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAoMTAgKiogMTUpKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IGFzc2V0czsKICAgIGJhbGFuY2VzW3RoaXNdIC09IGFzc2V0czsKICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFzc2V0cyk7CiAgICBpZihyZXN0ID49IDEpewogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSByZXN0OwogICAgICBiYWxhbmNlc1t0aGlzXSAtPSByZXN0OwogICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCByZXN0KTsKICAgICAgLy8gaHR0cHM6Ly9FbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8vIAogICAgICBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgocmVzdCksX25vdykpOwogICAgfQogICAgZGVwb3NpdFttc2cuc2VuZGVyXS5wdXNoKG1ha2luZyh1aW50MTI4KGFzc2V0cyksX25vdykpOwogfQp9CgoKY29udHJhY3QgRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsgaXMgVm90ZUZ1bmN0aW9ucyB7CiBmdW5jdGlvbiBVbml4X1RpbWVzdGFtcF9CaW5hcnlfVHJhZGluZyAodWludDI1NiBiZXQpIHB1YmxpYyBwYXlhYmxlIHsKICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCBiZXQpIHsKICAgICAgICAgICBiZXQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICB9CiAgICB1aW50MjU2IHByaXplID0gYmV0ICogOSAvIDEwOwogICAgdWludCB3aW4gPSBibG9jay50aW1lc3RhbXAgLyAyOwogICAgICAgIGlmICgoMiAqIHdpbikgPT0gYmxvY2sudGltZXN0YW1wKQogICAgICAgIHsgICAgCiAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChwcml6ZSk7CiAgICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChwcml6ZSk7CiAgICAgICAgICBUcmFuc2ZlcigweDAsIG1zZy5zZW5kZXIsIHByaXplKTsKICAgICAgICB9CiAgICAgICAgaWYgKCgyICogd2luKSAhPSBibG9jay50aW1lc3RhbXApCiAgICAgICAgeyAgICAKICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGJldCk7CiAgICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihiZXQpOwogICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBiZXQpOwogICAgICAgIH0KICAgICAgaWYoZGVwb3NpdFttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgZGVwb3NpdFttc2cuc2VuZGVyXS5wdXNoKG1ha2luZyh1aW50MTI4KGJhbGFuY2VzW21zZy5zZW5kZXJdKSxfbm93KSk7CiAgICAgIC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogICAgICBpZiAobXNnLnZhbHVlID4gMCkgeyAKCQkgIHVpbnQyNTYgYnV5X2Ftb3VudCAgPSAgbXNnLnZhbHVlLyhidXlQcmljZSk7ICAgICAgICAgICAgICAgICAgICAKCQkgIHJlcXVpcmUoYmFsYW5jZXNbdGhpc10gPj0gYnV5X2Ftb3VudCk7CgkJICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChidXlfYW1vdW50KTsKCSAgICAgIGJhbGFuY2VzW3RoaXNdID0gYmFsYW5jZXNbdGhpc10uc3ViKGJ1eV9hbW91bnQpOwogICAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYnV5X2Ftb3VudCk7CiAgICAgICAgICBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgoYnV5X2Ftb3VudCksX25vdykpOwoJICB9CiB9CiAKIGZ1bmN0aW9uIGRpY2VfZ2FtZSAodWludDI1NiBiZXQpIHB1YmxpYyBwYXlhYmxlIHsKICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCBiZXQpIHsKICAgICAgICAgICBiZXQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgICAgICB9CiAgICB1aW50MjU2IHByaXplID0gYmV0ICogOSAvIDEwOwogICAgdWludCB3aW4gPSBibG9jay50aW1lc3RhbXAgLyAyOwogICAgICAgIGlmICgoMiAqIHdpbikgPT0gYmxvY2sudGltZXN0YW1wKQogICAgICAgIHsgICAgCiAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChwcml6ZSk7CiAgICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChwcml6ZSk7CiAgICAgICAgICBUcmFuc2ZlcigweDAsIG1zZy5zZW5kZXIsIHByaXplKTsKICAgICAgICB9CiAgICAgICAgaWYgKCgyICogd2luKSAhPSBibG9jay50aW1lc3RhbXApCiAgICAgICAgeyAgICAKICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGJldCk7CiAgICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihiZXQpOwogICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBiZXQpOwogICAgICAgIH0KICAgICAgaWYoZGVwb3NpdFttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgZGVwb3NpdFttc2cuc2VuZGVyXS5wdXNoKG1ha2luZyh1aW50MTI4KGJhbGFuY2VzW21zZy5zZW5kZXJdKSxfbm93KSk7CiAgICAgIC8vIGh0dHBzOi8vRWxlY3Rpb25zTWFya2V0U2F2aW5nc0JhbmsuZ2l0aHViLmlvLwogICAgICBpZiAobXNnLnZhbHVlID4gMCkgeyAKCQkgIHVpbnQyNTYgYnV5X2Ftb3VudCAgPSAgbXNnLnZhbHVlLyhidXlQcmljZSk7ICAgICAgICAgICAgICAgICAgICAKCQkgIHJlcXVpcmUoYmFsYW5jZXNbdGhpc10gPj0gYnV5X2Ftb3VudCk7CgkJICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLmFkZChidXlfYW1vdW50KTsKCSAgICAgIGJhbGFuY2VzW3RoaXNdID0gYmFsYW5jZXNbdGhpc10uc3ViKGJ1eV9hbW91bnQpOwogICAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYnV5X2Ftb3VudCk7CiAgICAgICAgICBkZXBvc2l0W21zZy5zZW5kZXJdLnB1c2gobWFraW5nKHVpbnQxMjgoYnV5X2Ftb3VudCksX25vdykpOwoJCX0KIH0gCiBmdW5jdGlvbiBidXlfZnJvbUNvbnRyYWN0KCkgcGF5YWJsZSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBfYW1vdW50XykgewogICAgICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA+PSAwKTsKICAgICAgICBfYW1vdW50XyA9ICBtc2cudmFsdWUgLyBidXlQcmljZTsgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIGFtb3VudAogICAgICAgIGlmIChfYW1vdW50XyA+IGJhbGFuY2VzW3RoaXNdKSB7CiAgICAgICAgICAgIF9hbW91bnRfID0gYmFsYW5jZXNbdGhpc107CiAgICAgICAgICAgIHVpbnQyNTYgdmFsdWVXZWkgPSBfYW1vdW50XyAqIGJ1eVByaWNlOwogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSAtIHZhbHVlV2VpKTsKICAgICAgICB9CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gX2Ftb3VudF87ICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICAgIGJhbGFuY2VzW3RoaXNdIC09IF9hbW91bnRfOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgX2Ftb3VudF8pOyAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgIHVpbnQ2NCBfbm93ID0gdWludDY0KG5vdyk7CiAgICAgICAgIGRlcG9zaXRbbXNnLnNlbmRlcl0ucHVzaChtYWtpbmcodWludDEyOChfYW1vdW50XyksX25vdykpOwogICAgICAgIHJldHVybiBfYW1vdW50XzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKIH0KCiBmdW5jdGlvbiBzZWxsX3RvQ29udHJhY3QgKHVpbnQyNTYgYW1vdW50X3RvU2VsbCkgIHB1YmxpYyB7IAogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IGFtb3VudF90b1NlbGwpIHsKICAgICAgICAgICAgYW1vdW50X3RvU2VsbCA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgIH0KICAgICAgICByZXF1aXJlIChhbW91bnRfdG9TZWxsIDw9ICg4ICogMWUxOCAvIEJ1eV9XYWxsX2xldmVsX2luX3dlaSkpOyAvLyBtYXggdG8gc2VsbCBieSAxIGZ1bmN0aW9uJ3MgY2FsbCBpcyAxMDAgMDAwIGFzc2V0cyAoOCBFVEgpICAKICAgICAgICBiYWxhbmNlc1t0aGlzXSArPSBhbW91bnRfdG9TZWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBvd25lcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBhbW91bnRfdG9TZWxsOyAgCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnRfdG9TZWxsICogQnV5X1dhbGxfbGV2ZWxfaW5fd2VpKTsgICAgICAgICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgYW1vdW50X3RvU2VsbCk7ICAgICAgICAgICAgICAKICAgICAgICAvLyBFbGVjdGlvbnNNYXJrZXRTYXZpbmdzQmFuay5naXRodWIuaW8KICAgICAgICAgdWludDY0IF9ub3cgPSB1aW50NjQobm93KTsKICAgICAgICAgaWYoZGVwb3NpdFttc2cuc2VuZGVyXS5sZW5ndGggPiAwKSBkZWxldGUgZGVwb3NpdFttc2cuc2VuZGVyXTsKICAgICAgICAgZGVwb3NpdFttc2cuc2VuZGVyXS5wdXNoKG1ha2luZyh1aW50MTI4KGJhbGFuY2VzW21zZy5zZW5kZXJdKSxfbm93KSk7CiB9CiAvKiAKICAgQ29weXJpZ2h0ICYjMTY5OyAyMDE4ICAtICBBbGwgUmlnaHRzIFJlc2VydmVkCiAgIApFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuayBzdHJpY3RseSBkb2VzIG5vdCBhY2NlcHQgYW55IGN1cnJlbmNpZXMgcHJvZHVjZWQgd2l0aCB0aGUgbGVnYWwgc2FuY3Rpb24gb2Ygc3RhdGVzIG9yIGdvdmVybm1lbnRzLgog4pK2IE5vIG9uZSBnb3Zlcm5tZW50IGNhbiBldmVyIHJlZ3VsYXRlIEVsZWN0aW9ucyBNYXJrZXQgU2F2aW5ncyBCYW5rLiDmr5LosboKCiBOb2JvZHkgY2FuIHdpdGhkcmF3IHRoZSBjb2xsZWN0ZWQgb24gYmFuaydzIHNtYXJ0Y29udHJhY3QgRXRoZXJldW0gKHRoZSBiYW5rJ3MgY2FwaXRhbCkgaW4gYSBkaWZmZXJlbnQgd2F5LCAKZXhjZXB0IHNlbGwgYXNzZXRzIGJhY2sgdG8gdGhlIGJhbmshCgogRWxlY3Rpb25zIE1hcmtldCBTYXZpbmdzIEJhbmsgd2lsbCBiZSBvcGVuIHVudGlsIDA3OjAwOjE2IFVUQyAyNiBKYW51YXJ5IDU4NDk0MjQxNzM1NXRoIHllYXIgb2YgdGhlIENvbW1vbiBFcmEgCmR1ZSB0byA2NC1iaXQgdmVyc2lvbiBvZiB0aGUgVW5peCB0aW1lIHN0YW1wLgoKICBUaGVyZSBpcyBubyBsYXcgc3Ryb25nZXIgdGhlbiB0aGUgY29kZS4gCiAgCiBFbGVjdGlvbnMgTWFya2V0IFNhdmluZ3MgQmFuayBvZmZlcnMgYW4gaW50ZXJlc3QgcmF0ZSB1cCB0byAyJSBwZXIgZGF5IGZvciBkZXBvc2l0cyAoYmFzaWNhbGx5IDElIHBlciBkYXkgZm9yIGRlcG9zaXRzIDFzdCB5ZWFyIHNpbmNlIG9wZW5pbmcsIAowLjI1JSBkYWlseSBzaW5jZSAybmQgeWVhciBhbmQgMC4wOCUgZGFpbHkgc2luY2UgM3JkIHllYXIgIHVudGlsIHRoZSBlbmQgb2YgdGhlIHdvcmxkKS4gCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvciB0aGUgY29tcG91bmRpbmcgY2FsY3VsYXRpb25zIGJlbG93ICA5OSBBc2VldHMgRmVlIHdhcyBub3QgY291bnRlZDoKICAgICAxJSBkYWlseSA9IDEuMDEgZGFpbHksIDEuMDFeMzY1IOKJiCAgMzcuOCwgZWZmZWN0aXZlIGFubnVhbCBpbnRlcmVzdCByYXRlID0gMzY4MCUuIAogICAgIOKfrGJ1eVByaWNlL0J1eV9XYWxsX2xldmVsX2luX3dlaSA9IDM1LDcxMjXin60gPCAzNy44ID0+IHByb2ZpdCB3aXRoIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSDiiYggNSw4JSBwZXIgMXN0IHllYXIKICAgICAob3IgcHJvZml0IGlzIDc0LDU2NyB0aW1lcyBpZiBmdW5jdGlvbiAnRGVwb3NpdF9kb3VibGVfc3VtX3BhaWRfZnJvbV90aGVfYmFsYW5jZScgdXNlZCA9PiBwcm9maXQgMjA4LDglIHBlciAxc3QgeWVhcikuCiAgICAgSWYgZnVuY3Rpb24gJ0RlcG9zaXRfZG91YmxlX3N1bV9wYWlkX2Zyb21fdGhlX2JhbGFuY2UnIGlzIHVzZWQgPT4gIDIqMS4wMV4zNjUtMSDiiYggIDc0LDU2NywgZWZmZWN0aXZlIGFubnVhbCBpbnRlcmVzdCByYXRlID0gNzM1NyUuCiAgICAgCiAgICAgMSUgZGFpbHkgPSAxLjAxIGRhaWx5LCAxLjAxXjM2NSDiiYggIDM3LjgsIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSA9IDM2ODAlLiAKICAgICBTaW5jZSAybmQgeWVhciAwLjI1JSBkYWlseSA9IDEuMDAyNSBkYWlseSwgMS4wMDI1XjM2NSDiiYggIDIsNDksIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSA9IDEzOSUuCiAgICAgU2luY2UgM3JkIHllYXIgMC4wOCUgZGFpbHkgPSAxLjAwMDggZGFpbHksIDEuMDAwOF4zNjUg4omIICAxLDMzODksIGVmZmVjdGl2ZSBhbm51YWwgaW50ZXJlc3QgcmF0ZSA9IDMzLjg5JS4KKi8KfQ=='.
	

]
