Class {
	#name : #SRTaef15564aed6447ed3debd89c8f28c10a5a52eec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaef15564aed6447ed3debd89c8f28c10a5a52eec >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBQZXJtaXR0YWJsZSB7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcGVybWl0dGVkOwoKICAgIGZ1bmN0aW9uIFBlcm1pdHRhYmxlKCkgcHVibGljIHsKICAgICAgICBwZXJtaXR0ZWRbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlQZXJtaXR0ZWQoKSB7CiAgICAgICAgcmVxdWlyZShwZXJtaXR0ZWRbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gcGVybWl0KGFkZHJlc3MgX2FkZHJlc3MsIGJvb2wgX2lzQWxsb3dlZCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIHBlcm1pdHRlZFtfYWRkcmVzc10gPSBfaXNBbGxvd2VkOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzUGVybWl0dGVkKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gcGVybWl0dGVkW19hZGRyZXNzXTsKICAgIH0KfQoKY29udHJhY3QgRGVzdHJ1Y3RhYmxlIGlzIFBlcm1pdHRhYmxlIHsKICAgIGZ1bmN0aW9uIGtpbGwoKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgc2VsZmRlc3RydWN0KG1zZy5zZW5kZXIpOwogICAgfQp9Cgpjb250cmFjdCBXaXRoZHJhd2FibGUgaXMgUGVybWl0dGFibGUgewogICAgZnVuY3Rpb24gd2l0aGRyYXcoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBpZiAoX2Ftb3VudCA9PSAwKQogICAgICAgICAgICBfYW1vdW50ID0gdGhpcy5iYWxhbmNlOwoKICAgICAgICBfdG8udHJhbnNmZXIoX2Ftb3VudCk7CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIwVG9rZW4gewoKICAgIC8vIFRvcGljOiBkZGYyNTJhZDFiZTJjODliNjljMmIwNjhmYzM3OGRhYTk1MmJhN2YxNjNjNGExMTYyOGY1NWE0ZGY1MjNiM2VmCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX2Ftb3VudCk7CgogICAgLy8gVG9waWM6IDhjNWJlMWU1ZWJlYzdkNWJkMTRmNzE0MjdkMWU4NGYzZGQwMzE0YzBmN2IyMjkxZTViMjAwYWM4YzdjM2I5MjUKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfcmVjaXBpZW50LCB1aW50MjU2IF9hbW91bnQpOwoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9yZWNpcGllbnQsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3JlY2lwaWVudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKfQoKY29udHJhY3QgVG9rZW5TdG9yYWdlIGlzIFBlcm1pdHRhYmxlLCBEZXN0cnVjdGFibGUsIFdpdGhkcmF3YWJsZSB7CiAgICBzdHJ1Y3QgTWVnYWJveCB7CiAgICAgICAgYWRkcmVzcyBvd25lcjsKICAgICAgICB1aW50MjU2IHRvdGFsU3VwcGx5OwogICAgICAgIHVpbnQyNTYgdGltZXN0YW1wOwogICAgfQoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2VzOwogICAgbWFwcGluZyhzdHJpbmcgPT4gdWludDI1NikgcHJpdmF0ZSBzZXR0aW5nczsKICAgIG1hcHBpbmcodWludDI1NiA9PiBNZWdhYm94KSBwcml2YXRlIG1lZ2Fib3hlczsKICAgIHVpbnQyNTYgbWVnYWJveEluZGV4ID0gMDsKCiAgICBmdW5jdGlvbiBfc3RhcnQoKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgLy9OdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMKICAgICAgICB1aW50IGRlY2ltYWxQbGFjZXMgPSA4OwogICAgICAgIHNldFNldHRpbmcoImRlY2ltYWxQbGFjZXMiLCBkZWNpbWFsUGxhY2VzKTsKCiAgICAgICAgLy9Ub2tlbnMgc3RvcmVkIGFzIGludGVnZXIgdmFsdWVzIG11bHRpcGxpZWQgYnkgbXVsdGlwbGllci4gSS5lLiAxIHRva2VuIHdpdGggOCBkZWNpbWFscyB3b3VsZCBiZSBzdG9yZWQgYXMgMTAwLDAwMCwwMDAKICAgICAgICBzZXRTZXR0aW5nKCJtdWx0aXBsaWVyIiwgMTAgKiogZGVjaW1hbFBsYWNlcyk7CgogICAgICAgIC8vVG9rZW5zIGFtb3VudCB0byBzZW5kIGV4aGF1c3Rpbmcgd2FybmluZwogICAgICAgIHNldFNldHRpbmcoImV4aGF1c3RpbmdOdW1iZXIiLCAyICogMTAqKmRlY2ltYWxQbGFjZXMpOwoKICAgICAgICAvL1Rva2VuIHByaWNlIGluIHdlaXMgcGVyIDEKICAgICAgICBzZXRTZXR0aW5nKCJ0b2tlblByaWNlIiwgMTUyODM4NjA4NzIxNTcwNDQpOwoKICAgICAgICAvL0RlY2ltYXRvciBmb3IgdGhlIHBlcmNlbnRzICgxMDAwID0gMTAwJSkKICAgICAgICBzZXRTZXR0aW5nKCJwZXJjZW50YWdlIiwgMTAwMCk7CgogICAgICAgIC8vVHJhbnNmZXJGZWUoMTApID09IDElCiAgICAgICAgc2V0U2V0dGluZygidHJhbnNmZXJGZWUiLCAxMCk7CgogICAgICAgIC8vUHVyY2hhc2VGZWUoMTU3KSA9PSAxNS43JQogICAgICAgIHNldFNldHRpbmcoInB1cmNoYXNlRmVlIiwgMCk7CgogICAgICAgIC8vUHVyY2hhc2VDYXAoNTAwMCkgPT0gNTAwMC4wMDAwMDAwMCB0b2tlbnMKICAgICAgICBzZXRTZXR0aW5nKCJwdXJjaGFzZUNhcCIsIDApOwoKICAgICAgICAvL1B1cmNoYXNlVGltZW91dCBpbiBzZWNvbmRzCiAgICAgICAgc2V0U2V0dGluZygicHVyY2hhc2VUaW1lb3V0IiwgMCk7CgogICAgICAgIC8vVGltZXN0YW1wIHdoZW4gSUNPCiAgICAgICAgc2V0U2V0dGluZygiaWNvVGltZXN0YW1wIiwgbm93KTsKCiAgICAgICAgLy9SZWRlbXB0aW9uVGltZW91dCBpbiBzZWNvbmRzCiAgICAgICAgc2V0U2V0dGluZygicmVkZW1wdGlvblRpbWVvdXQiLCAzNjUgKiAyNCAqIDYwICogNjApOwoKICAgICAgICAvL1JlZGVtcHRpb25GZWUoMTU3KSA9PSAxNS43JQogICAgICAgIHNldFNldHRpbmcoInJlZGVtcHRpb25GZWUiLCAwKTsKCiAgICAgICAgLy8gQWRkcmVzcyB0byByZXR1cm4gb3BlcmF0aW9uYWwgZmVlcwogICAgICAgIHNldFNldHRpbmcoImZlZVJldHVybkFkZHJlc3MiLCB1aW50KGFkZHJlc3MoMHgwZDAyNkE2M2E4OEEwRkVjMjM0NDA0NGU2NTZENkI2MzY4NEZCZUExKSkpOwoKICAgICAgICAvLyBBZGRyZXNzIHRvIGNvbGxlY3QgZGVhZCB0b2tlbnMKICAgICAgICBzZXRTZXR0aW5nKCJkZWFkVG9rZW5zQWRkcmVzcyIsIHVpbnQoYWRkcmVzcygweDREY0I4RjViMjI1NTc2NzJCMzVFZjQ4RjhDMmI3MWY4RjU0YzI1MUYpKSk7CgogICAgICAgIC8vVG90YWwgc3VwcGx5IG9mIHRva2VucwogICAgICAgIHNldFNldHRpbmcoInRvdGFsU3VwcGx5IiwgMTAwICogMTAwMCAqIDEwMDAgKiAoMTAgKiogZGVjaW1hbFBsYWNlcykpOwoKICAgICAgICBzZXRTZXR0aW5nKCJuZXdNZWdhYm94VGhyZXNob2xkIiwgMSAqIDEwKipkZWNpbWFsUGxhY2VzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCYWxhbmNlKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyB2aWV3IG9ubHlQZXJtaXR0ZWQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19hZGRyZXNzXTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRCYWxhbmNlKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGJhbGFuY2VzW19hZGRyZXNzXSA9IF9hbW91bnQ7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19hZGRyZXNzXTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seVBlcm1pdHRlZCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudCk7CgogICAgICAgIGRlY3JlYXNlQmFsYW5jZShfZnJvbSwgX2Ftb3VudCk7CiAgICAgICAgaW5jcmVhc2VCYWxhbmNlKF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIF9hbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjcmVhc2VCYWxhbmNlKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2FkZHJlc3NdID49IF9hbW91bnQpOwoKICAgICAgICBiYWxhbmNlc1tfYWRkcmVzc10gLT0gX2Ftb3VudDsKICAgICAgICByZXR1cm4gX2Ftb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmNyZWFzZUJhbGFuY2UoYWRkcmVzcyBfYWRkcmVzcywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seVBlcm1pdHRlZCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYmFsYW5jZXNbX2FkZHJlc3NdICs9IF9hbW91bnQ7CiAgICAgICAgcmV0dXJuIF9hbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U2V0dGluZyhzdHJpbmcgX25hbWUpIHB1YmxpYyB2aWV3IG9ubHlQZXJtaXR0ZWQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHNldHRpbmdzW19uYW1lXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRTZXR0aW5nQWRkcmVzcyhzdHJpbmcgX25hbWUpIHB1YmxpYyB2aWV3IG9ubHlQZXJtaXR0ZWQgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoZ2V0U2V0dGluZyhfbmFtZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNldHRpbmcoc3RyaW5nIF9uYW1lLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHNldHRpbmdzW19uYW1lXSA9IF92YWx1ZTsKICAgICAgICByZXR1cm4gc2V0dGluZ3NbX25hbWVdOwogICAgfQoKICAgIGZ1bmN0aW9uIG5ld01lZ2Fib3goYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3Rva2VucywgdWludDI1NiBfdGltZXN0YW1wKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgdWludCBuZXdNZWdhYm94SW5kZXggPSBtZWdhYm94SW5kZXgrKzsKICAgICAgICBtZWdhYm94ZXNbbmV3TWVnYWJveEluZGV4XSA9IE1lZ2Fib3goe293bmVyOiBfb3duZXIsIHRvdGFsU3VwcGx5OiBfdG9rZW5zLCB0aW1lc3RhbXA6IF90aW1lc3RhbXB9KTsKCiAgICAgICAgc2V0U2V0dGluZygidG90YWxTdXBwbHkiLCBnZXRTZXR0aW5nKCJ0b3RhbFN1cHBseSIpICsgX3Rva2Vucyk7CgogICAgICAgIHVpbnQyNTYgYmFsYW5jZSA9IGJhbGFuY2VzW19vd25lcl0gKyBfdG9rZW5zOwogICAgICAgIHNldEJhbGFuY2UoX293bmVyLCBiYWxhbmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNZWdhYm94KHVpbnQyNTYgaW5kZXgpIHB1YmxpYyB2aWV3IG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAoYWRkcmVzcywgdWludDI1NiwgdWludDI1NikgewogICAgICAgIHJldHVybiAobWVnYWJveGVzW2luZGV4XS5vd25lciwgbWVnYWJveGVzW2luZGV4XS50b3RhbFN1cHBseSwgbWVnYWJveGVzW2luZGV4XS50aW1lc3RhbXApOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE1lZ2Fib3hJbmRleCgpIHB1YmxpYyB2aWV3IG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBtZWdhYm94SW5kZXg7CiAgICB9Cn0KCmNvbnRyYWN0IFRva2VuVmFsaWRhdG9yIGlzIFBlcm1pdHRhYmxlLCBEZXN0cnVjdGFibGUgewogICAgVG9rZW5TdG9yYWdlIHN0b3JlOwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGRhdGVzT2ZQdXJjaGFzZTsKCiAgICBmdW5jdGlvbiBfc2V0U3RvcmUoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIHN0b3JlID0gVG9rZW5TdG9yYWdlKF9hZGRyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUcmFuc2ZlckZlZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfYWRkcmVzcywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gKF9hZGRyZXNzID09IF9vd25lcikgPyAwIDogKF9hbW91bnQgKiBzdG9yZS5nZXRTZXR0aW5nKCJ0cmFuc2ZlckZlZSIpIC8gc3RvcmUuZ2V0U2V0dGluZygicGVyY2VudGFnZSIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZUFuZEdldFRyYW5zZmVyRmVlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIC8qX3RvKi8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBfZmVlID0gZ2V0VHJhbnNmZXJGZWUoX293bmVyLCBfZnJvbSwgX2Ftb3VudCk7CgogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOwogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgKyBfZmVlKSA+IDApOwogICAgICAgIHJlcXVpcmUoc3RvcmUuZ2V0QmFsYW5jZShfZnJvbSkgPj0gKF9hbW91bnQgKyBfZmVlKSk7CgogICAgICAgIHJldHVybiBfZmVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkYXRlUmVzZXREZWFkVG9rZW5zKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgYWRkcmVzcyBkZWFkVG9rZW5zQWRkcmVzcyA9IHN0b3JlLmdldFNldHRpbmdBZGRyZXNzKCJkZWFkVG9rZW5zQWRkcmVzcyIpOwogICAgICAgIHVpbnQyNTYgZGVhZFRva2VucyA9IHN0b3JlLmdldEJhbGFuY2UoZGVhZFRva2Vuc0FkZHJlc3MpOwoKICAgICAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKICAgICAgICByZXF1aXJlKF9hbW91bnQgPD0gZGVhZFRva2Vucyk7CgogICAgICAgIHJldHVybiBkZWFkVG9rZW5zQWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN0YXJ0KGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zdG9yZSkgcHVibGljIHZpZXcgewogICAgICAgIHJlcXVpcmUoX3N0b3JlICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3N0b3JlID09IGFkZHJlc3Moc3RvcmUpKTsKICAgICAgICByZXF1aXJlKHN0b3JlLmdldEJhbGFuY2UoX293bmVyKSA9PSAwKTsKICAgIH0KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZUFuZEdldFB1cmNoYXNlVG9rZW5zKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9tb25leUFtb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgX3Rva2VucyA9IF9tb25leUFtb3VudCAqIHN0b3JlLmdldFNldHRpbmcoIm11bHRpcGxpZXIiKSAvIHN0b3JlLmdldFNldHRpbmcoInRva2VuUHJpY2UiKTsKICAgICAgICB1aW50MjU2IF9wdXJjaGFzZVRpbWVvdXQgPSBzdG9yZS5nZXRTZXR0aW5nKCJwdXJjaGFzZVRpbWVvdXQiKTsKICAgICAgICB1aW50MjU2IF9wdXJjaGFzZUNhcCA9IHN0b3JlLmdldFNldHRpbmcoInB1cmNoYXNlQ2FwIik7CgogICAgICAgIHJlcXVpcmUoKF9wdXJjaGFzZVRpbWVvdXQgPD0gMCkgfHwgKGJsb2NrLnRpbWVzdGFtcCAtIGRhdGVzT2ZQdXJjaGFzZVtfYWRkcmVzc10gPiBfcHVyY2hhc2VUaW1lb3V0KSk7CiAgICAgICAgcmVxdWlyZShfdG9rZW5zID4gMCk7CiAgICAgICAgcmVxdWlyZShzdG9yZS5nZXRCYWxhbmNlKF9vd25lcikgPj0gX3Rva2Vucyk7CiAgICAgICAgcmVxdWlyZSgoX3B1cmNoYXNlQ2FwIDw9IDApIHx8IChfdG9rZW5zIDw9IF9wdXJjaGFzZUNhcCkpOwoKICAgICAgICByZXR1cm4gX3Rva2VuczsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVEYXRlT2ZQdXJjaGFzZShhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IHRpbWVzdGFtcCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIGRhdGVzT2ZQdXJjaGFzZVtfYWRkcmVzc10gPSB0aW1lc3RhbXA7CiAgICB9CgogICAgZnVuY3Rpb24gdmFsaWRhdGVBbmRHZXRSZWRlZW1GZWUoYWRkcmVzcyAvKl9vd25lciovLCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF90b2tlbnMpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IF9pY29UaW1lc3RhbXAgPSBzdG9yZS5nZXRTZXR0aW5nKCJpY29UaW1lc3RhbXAiKTsKICAgICAgICB1aW50MjU2IF9yZWRlbXB0aW9uVGltZW91dCA9IHN0b3JlLmdldFNldHRpbmcoInJlZGVtcHRpb25UaW1lb3V0Iik7CiAgICAgICAgdWludDI1NiBfZmVlID0gX3Rva2VucyAqIHN0b3JlLmdldFNldHRpbmcoInJlZGVtcHRpb25GZWUiKSAvIHN0b3JlLmdldFNldHRpbmcoInBlcmNlbnRhZ2UiKTsKCiAgICAgICAgcmVxdWlyZSgoX3JlZGVtcHRpb25UaW1lb3V0IDw9IDApIHx8IChibG9jay50aW1lc3RhbXAgPiBfaWNvVGltZXN0YW1wICsgX3JlZGVtcHRpb25UaW1lb3V0KSk7CiAgICAgICAgcmVxdWlyZShfdG9rZW5zID4gMCk7CiAgICAgICAgcmVxdWlyZSgoX3Rva2VucyArIF9mZWUpID49IDApOwogICAgICAgIHJlcXVpcmUoc3RvcmUuZ2V0QmFsYW5jZShfYWRkcmVzcykgPj0gKF90b2tlbnMgKyBfZmVlKSk7CgogICAgICAgIHJldHVybiBfZmVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkYXRlU3RhcnRNZWdhYm94KGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF90b2tlbnMpIHB1YmxpYyB2aWV3IHsKICAgICAgICB1aW50MjU2IF90b3RhbFN1cHBseSA9IHN0b3JlLmdldFNldHRpbmcoInRvdGFsU3VwcGx5Iik7CiAgICAgICAgdWludDI1NiBfbmV3TWVnYWJveFRocmVzaG9sZCA9IHN0b3JlLmdldFNldHRpbmcoIm5ld01lZ2Fib3hUaHJlc2hvbGQiKTsKICAgICAgICB1aW50MjU2IF9vd25lckJhbGFuY2UgPSBzdG9yZS5nZXRCYWxhbmNlKF9vd25lcik7CgogICAgICAgIHJlcXVpcmUoX293bmVyQmFsYW5jZSA8PSBfbmV3TWVnYWJveFRocmVzaG9sZCk7CiAgICAgICAgcmVxdWlyZShfdG9rZW5zID4gMCk7CiAgICAgICAgcmVxdWlyZSgoX3RvdGFsU3VwcGx5ICsgX3Rva2VucykgPiBfdG90YWxTdXBwbHkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhblB1cmNoYXNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF90b2tlbnMpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCwgYm9vbCwgYm9vbCwgYm9vbCkgewogICAgICAgIHVpbnQyNTYgX3B1cmNoYXNlVGltZW91dCA9IHN0b3JlLmdldFNldHRpbmcoInB1cmNoYXNlVGltZW91dCIpOwogICAgICAgIHVpbnQyNTYgX2ZlZSA9IF90b2tlbnMgKiBzdG9yZS5nZXRTZXR0aW5nKCJwdXJjaGFzZUZlZSIpIC8gc3RvcmUuZ2V0U2V0dGluZygicGVyY2VudGFnZSIpOwoKICAgICAgICBib29sIHB1cmNoYXNlVGltZW91dFBhc3NlZCA9ICgoX3B1cmNoYXNlVGltZW91dCA8PSAwKSB8fCAoYmxvY2sudGltZXN0YW1wIC0gZGF0ZXNPZlB1cmNoYXNlW19hZGRyZXNzXSA+IF9wdXJjaGFzZVRpbWVvdXQpKTsKICAgICAgICBib29sIHRva2Vuc051bWJlclBhc3NlZCA9IChfdG9rZW5zID4gMCk7CiAgICAgICAgYm9vbCBvd25lckJhbGFuY2VQYXNzZWQgPSAoc3RvcmUuZ2V0QmFsYW5jZShfb3duZXIpID49IChfdG9rZW5zICsgX2ZlZSkpOwogICAgICAgIGJvb2wgcHVyY2hhc2VDYXBQYXNzZWQgPSAoc3RvcmUuZ2V0U2V0dGluZygicHVyY2hhc2VDYXAiKSA8PSAwKSB8fCAoX3Rva2VucyA8IHN0b3JlLmdldFNldHRpbmcoInB1cmNoYXNlQ2FwIikpOwoKICAgICAgICByZXR1cm4gKHB1cmNoYXNlVGltZW91dFBhc3NlZCwgb3duZXJCYWxhbmNlUGFzc2VkLCB0b2tlbnNOdW1iZXJQYXNzZWQsIHB1cmNoYXNlQ2FwUGFzc2VkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYW5UcmFuc2ZlcihhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyAvKl90byovLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wsIGJvb2wpIHsKICAgICAgICB1aW50MjU2IF9mZWUgPSBnZXRUcmFuc2ZlckZlZShfb3duZXIsIF9mcm9tLCBfYW1vdW50KTsKCiAgICAgICAgYm9vbCB0cmFuc2ZlclBvc2l0aXZlUGFzc2VkID0gKF9hbW91bnQgKyBfZmVlKSA+IDA7CiAgICAgICAgYm9vbCBvd25lckJhbGFuY2VQYXNzZWQgPSBzdG9yZS5nZXRCYWxhbmNlKF9mcm9tKSA+PSAoX2Ftb3VudCArIF9mZWUpOwoKICAgICAgICByZXR1cm4gKHRyYW5zZmVyUG9zaXRpdmVQYXNzZWQsIG93bmVyQmFsYW5jZVBhc3NlZCk7CiAgICB9Cn0KCmNvbnRyYWN0IFRva2VuRmFjYWRlIGlzIFBlcm1pdHRhYmxlLCBEZXN0cnVjdGFibGUsIFdpdGhkcmF3YWJsZSwgRVJDMjBUb2tlbiB7CiAgICBUb2tlblN0b3JhZ2UgcHJpdmF0ZSBzdG9yZTsKICAgIFRva2VuVmFsaWRhdG9yIHZhbGlkYXRvcjsKCiAgICBhZGRyZXNzIHByaXZhdGUgb3duZXI7CgogICAgLy8gSnVzdCBmb3IgaW5mb3JtYXRpb24gYmVnaW4gLy8KICAgIHVpbnQyNTYgcHVibGljIGluZm9BYm92ZVNwb3QgPSA0MDA7CiAgICBzdHJpbmcgcHVibGljIGluZm9UaWVyID0gIlRpZXIgMSI7CiAgICBzdHJpbmcgcHVibGljIGluZm9Ub2tlblNpbHZlclJhdGlvID0gIjEgOiAxIjsKICAgIC8vIEp1c3QgZm9yIGluZm9ybWF0aW9uIGVuZCAvLwoKICAgIGV2ZW50IFRva2VuU29sZChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZlMmZmNGNmMzZmZjdkMmMyYjA2ZWI5NjA4OTdlZTBkNzZkOWMzZTU4ZGExMmZlYjdiOTNlODZiMjI2ZGQzNDQKICAgIGV2ZW50IFRva2VuUHVyY2hhc2VkKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfdG9rZW5zKTsgICAvLzNjZWZmZDQxMDA1NGZkYWVkNDRmNTk4ZmY1YzFmYjQ1MDY1ODc3OGUyMjQxODkyZGE0YWE2NDY5NzlkZWU2MTcKICAgIGV2ZW50IFRva2VuUG9vbEV4aGF1c3RpbmcodWludDI1NiBfYW1vdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLzI5YmEyZTA3Mzc4MWMxMTU3YTliNWQ1ZWRiNTYxNDM3YTYxODFlOTJiNzkxNTJmZTc3NjYxNTE1OTMxMmU5Y2QKICAgIGV2ZW50IEZlZUFwcGxpZWQoc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9hbW91bnQpOwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIGZ1bmN0aW9uIFRva2VuRmFjYWRlKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vQG5vdGljZSBUb2tlbiBwdXJjaGFzZSBmdW5jdGlvbi4gQWxsb3dzIHVzZXIgdG8gcHVyY2hhc2UgYW1vdW50IG9mIHRva2VucyBhY2Njb3JkaW5nIHRvIHBhc3NlZCBhbW91bnQgb2YgRXRoZXJzLgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIHB1cmNoYXNlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzdG9yZS5nZXRTZXR0aW5nKCJ0b3RhbFN1cHBseSIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzdG9yZS5nZXRCYWxhbmNlKF9hZGRyZXNzKTsKICAgIH0KCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJTTFZUIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJTaWx2ZXJUb2tlbiI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwoKICAgIC8vL0Bub3RpY2UgVHJhbnNmZXIgYF9hbW91bnRgIG9mIHRva2VucyAobXVzdCBiZSBzZW50IGFzIGZsb2F0aW5nIHBvaW50IG51bWJlciBvZiB0b2tlbiBhbmQgZGVjaW1hbCBwYXJ0cykKICAgIC8vL3RvIGBfYWRkcmVzc2Agd2l0aCBwcmVsaW1pbmFyeSBhcHByb3ZpbmcgYW1vdW50ICsgZmVlIGZyb20gdHJhbnNhY3Rpb24gc2VuZGVyCiAgICAvLy9AcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vQHBhcmFtIF9hbW91bnQgQW1vdW50IG9mIHRva2VucyB0byB0cmFuc2Zlci4gUGFzc2VkIGFzIGBUb2tlbi5EZWNpbWFscyAqIDEwXjhgLCBAc2VlIGBkZWNpbWFsc2AuCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQyNTYgX2ZlZSA9IHZhbGlkYXRvci52YWxpZGF0ZUFuZEdldFRyYW5zZmVyRmVlKG93bmVyLCBtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICBzdG9yZS50cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICBpZiAoX2ZlZSA+IDApCiAgICAgICAgICAgIHN0b3JlLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHN0b3JlLmdldFNldHRpbmdBZGRyZXNzKCJmZWVSZXR1cm5BZGRyZXNzIiksIF9mZWUpOwoKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy9Abm90aWNlIFRyYW5zZmVyIGBfYW1vdW50YCBvZiB0b2tlbnMgKG11c3QgYmUgc2VudCBhcyBmbG9hdGluZyBwb2ludCBudW1iZXIgb2YgdG9rZW4gYW5kIGRlY2ltYWwgcGFydHMpCiAgICAvLy90byBgX2FkZHJlc3NgIGZyb20gYWRkcmVzcyBgX2Zyb21gIHdpdGhvdXQgYXV0b2FwcHJvdmluZwogICAgLy8vQHBhcmFtIF90byBBZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vL0BwYXJhbSBfYW1vdW50IEFtb3VudCBvZiB0b2tlbnMgdG8gdHJhbnNmZXIuIFBhc3NlZCBhcyBgVG9rZW4uRGVjaW1hbHMgKiAxMF44YCwgQHNlZSBgZGVjaW1hbHNgLgogICAgLy8vQHJldHVybiBib29sIFN1Y2Nlc3Mgc3RhdGUKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoYWxsb3dlZFtfZnJvbV1bX3RvXSA+PSBfYW1vdW50KTsKCiAgICAgICAgdWludDI1NiBfZmVlID0gdmFsaWRhdG9yLnZhbGlkYXRlQW5kR2V0VHJhbnNmZXJGZWUob3duZXIsIF9mcm9tLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICBzdG9yZS50cmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgaWYgKF9mZWUgPiAwKQogICAgICAgICAgICBzdG9yZS50cmFuc2ZlcihfZnJvbSwgc3RvcmUuZ2V0U2V0dGluZ0FkZHJlc3MoImZlZVJldHVybkFkZHJlc3MiKSwgX2ZlZSk7CgogICAgICAgIGFsbG93ZWRbX2Zyb21dW190b10gLT0gX2Ftb3VudDsKCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vL0Bub3RpY2UgQXBwcm92ZSBhbW91bnQgYF9hbW91bnRgIG9mIHRva2VucyB0byBzZW5kIGZyb20gdHJhbnNhY3Rpb24gY3JlYXRvciB0byBgX3JlY2lwaWVudGAKICAgIC8vL0BwYXJhbSBfcmVjaXBpZW50IFJlY2lwaWVudAogICAgLy8vQHBhcmFtIF9hbW91bnQgQW1vdW50IHRvIGFwcHJvdmUgYFRva2VuLkRlY2ltYWxzICogMTBeOGAsIEBzZWUgYGRlY2ltYWxzYAogICAgLy8vQHJldHVybiBib29sIFN1Y2Nlc3Mgc3RhdGUKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfcmVjaXBpZW50LCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIF9fYXBwcm92ZV9pbXBsKG1zZy5zZW5kZXIsIF9yZWNpcGllbnQsIF9hbW91bnQpOwogICAgfQoKICAgIC8vL0Bub3RpY2UgUmV0dXJuIGFsbG93ZWQgdHJhbnNhY3Rpb24gYW1vdW50IGZyb20gYF9mcm9tYCB0byBgX3JlY2lwaWVudGAKICAgIC8vL0BwYXJhbSBfZnJvbSBJbml0aWF0b3Igb2YgdHJhbnNhY3Rpb24KICAgIC8vL0BwYXJhbSBfcmVjaXBpZW50IFJlY2lwaWVudAogICAgLy8vQHJldHVybiB1aW50MjU2IEFtb3VudCBhcHByb3ZlZCB0byB0cmFuc2ZlciBhcyBgVG9rZW4uRGVjaW1hbHMgKiAxMF44YCwgQHNlZSBgZGVjaW1hbHNgCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfcmVjaXBpZW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhbGxvd2VkW19mcm9tXVtfcmVjaXBpZW50XTsKICAgIH0KCiAgICAvLy9Abm90aWNlIFRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uLiBBbGxvd3MgdXNlciB0byBwdXJjaGFzZSBhbW91bnQgb2YgdG9rZW5zIGFjY2NvcmRpbmcgdG8gcGFzc2VkIGFtb3VudCBvZiBFdGhlcnMuCiAgICBmdW5jdGlvbiBwdXJjaGFzZSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBfX3B1cmNoYXNlX2ltcGwobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLy9Abm90aWNlIFJlZGVlbSByZXF1aXJlZCBhbW91bnQgb2YgdG9rZW5zIGZvciB0aGUgcmVhbCBhc3NldAogICAgLy8vQHBhcmFtIF90b2tlbnMgQW1vdW50IG9mIG5hbm8gdG9rZW5zIHByb3ZpZGVzIGFzIGBUb2tlbi5EZWNpbWFscyAqIDEwXjhgCiAgICBmdW5jdGlvbiByZWRlZW0odWludDI1NiBfdG9rZW5zKSBwdWJsaWMgewogICAgICAgIF9fcmVkZWVtX2ltcGwobXNnLnNlbmRlciwgX3Rva2Vucyk7CiAgICB9CgogICAgLy9Abm90aWNlIEdldCBhbW91bnQgaWYgdG9rZW5zIHRoYXQgYWN0dWFsbHkgYXZhaWxhYmxlIGZvciBwdXJjaGFzZQogICAgLy9AcmV0dXJucyBhbW91bnQgaWYgdG9rZW5zCiAgICBmdW5jdGlvbiBnZXRUb2tlbnNJbkFjdGlvbigpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhZGRyZXNzIGRlYWRUb2tlbnNBZGRyZXNzID0gc3RvcmUuZ2V0U2V0dGluZ0FkZHJlc3MoImRlYWRUb2tlbnNBZGRyZXNzIik7CiAgICAgICAgcmV0dXJuIHN0b3JlLmdldEJhbGFuY2Uob3duZXIpIC0gc3RvcmUuZ2V0QmFsYW5jZShkZWFkVG9rZW5zQWRkcmVzcyk7CiAgICB9CgogICAgLy9Abm90aWNlIEdldCBwcmljZSBvZiBzcGVjaWZpZWQgdG9rZW5zIGFtb3VudC4gRGVwZW5kcyBvbiB0aGUgc2Vjb25kIHBhcmFtZXRlciByZXR1cm5zIHByaWNlIHdpdGggZmVlIG9yIHdpdGhvdXQKICAgIC8vQHJldHVybiBwcmljZSBvZiBzcGVjaWZpZWQgdG9rZW5zIGluIFdlaQogICAgZnVuY3Rpb24gZ2V0VG9rZW5zUHJpY2UodWludDI1NiBfYW1vdW50LCBib29sIHdpdGhGZWUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB0b2tlblByaWNlID0gc3RvcmUuZ2V0U2V0dGluZygidG9rZW5QcmljZSIpOwogICAgICAgIHVpbnQyNTYgcmVzdWx0ID0gX2Ftb3VudCAqIHRva2VuUHJpY2UgLyAxMCoqdWludDI1NihkZWNpbWFscyk7CgogICAgICAgIGlmICh3aXRoRmVlKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIHJlc3VsdCAqIHN0b3JlLmdldFNldHRpbmcoInB1cmNoYXNlRmVlIikgLyBzdG9yZS5nZXRTZXR0aW5nKCJwZXJjZW50YWdlIik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIGZ1bmN0aW9uIHJlc2V0RGVhZFRva2Vucyh1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5UGVybWl0dGVkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhZGRyZXNzIGRlYWRUb2tlbnNBZGRyZXNzID0gdmFsaWRhdG9yLnZhbGlkYXRlUmVzZXREZWFkVG9rZW5zKF9hbW91bnQpOwogICAgICAgIHN0b3JlLnRyYW5zZmVyKGRlYWRUb2tlbnNBZGRyZXNzLCBvd25lciwgX2Ftb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gY2FuUHVyY2hhc2UoYWRkcmVzcyBfYWRkcmVzcywgdWludDI1NiBfdG9rZW5zQW1vdW50KSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wsIGJvb2wsIGJvb2wsIGJvb2wpIHsKICAgICAgICByZXR1cm4gdmFsaWRhdG9yLmNhblB1cmNoYXNlKG93bmVyLCBfYWRkcmVzcywgX3Rva2Vuc0Ftb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gY2FuVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyhib29sLCBib29sKSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRvci5jYW5UcmFuc2Zlcihvd25lciwgX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0SW5mb0Fib3ZlU3BvdCh1aW50MjU2IG5ld0luZm9BYm92ZVNwb3QpIHB1YmxpYyBvbmx5UGVybWl0dGVkIHsKICAgICAgICBpbmZvQWJvdmVTcG90ID0gbmV3SW5mb0Fib3ZlU3BvdDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRJbmZvVGllcihzdHJpbmcgbmV3SW5mb1RpZXIpIHB1YmxpYyBvbmx5UGVybWl0dGVkIHsKICAgICAgICBpbmZvVGllciA9IG5ld0luZm9UaWVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEluZm9Ub2tlblNpbHZlclJhdGlvKHN0cmluZyBuZXdJbmZvVG9rZW5TaWx2ZXJSYXRpbykgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIGluZm9Ub2tlblNpbHZlclJhdGlvID0gbmV3SW5mb1Rva2VuU2lsdmVyUmF0aW87CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U2V0dGluZyhzdHJpbmcgX25hbWUpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc3RvcmUuZ2V0U2V0dGluZyhfbmFtZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWVnYWJveCh1aW50MjU2IGluZGV4KSBwdWJsaWMgdmlldyBvbmx5UGVybWl0dGVkIHJldHVybnMgKGFkZHJlc3MsIHVpbnQyNTYsIHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gc3RvcmUuZ2V0TWVnYWJveChpbmRleCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWVnYWJveEluZGV4KCkgcHVibGljIHZpZXcgb25seVBlcm1pdHRlZCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHN0b3JlLmdldE1lZ2Fib3hJbmRleCgpOwogICAgfQoKICAgIC8vIEFkbWluIGZ1bmN0aW9ucwoKICAgIGZ1bmN0aW9uIF9hcHByb3ZlKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3JlY2lwaWVudCwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seVBlcm1pdHRlZCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIF9fYXBwcm92ZV9pbXBsKF9mcm9tLCBfcmVjaXBpZW50LCBfYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZUFuZEdldFRyYW5zZmVyRmVlKG93bmVyLCBfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgc3RvcmUudHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBfcHVyY2hhc2UoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIF9fcHVyY2hhc2VfaW1wbChfdG8sIF9hbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9yZWRlZW0oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdG9rZW5zKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgX19yZWRlZW1faW1wbChfZnJvbSwgX3Rva2Vucyk7CiAgICB9CgogICAgZnVuY3Rpb24gX3N0YXJ0KCkgcHVibGljIG9ubHlQZXJtaXR0ZWQgewogICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZVN0YXJ0KG93bmVyLCBzdG9yZSk7CgogICAgICAgIHN0b3JlLnNldEJhbGFuY2Uob3duZXIsIHN0b3JlLmdldFNldHRpbmcoInRvdGFsU3VwcGx5IikpOwogICAgICAgIHN0b3JlLnNldFNldHRpbmcoImljb1RpbWVzdGFtcCIsIGJsb2NrLnRpbWVzdGFtcCk7CiAgICB9CgogICAgZnVuY3Rpb24gX3NldFN0b3JlKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyBvbmx5UGVybWl0dGVkIHsKICAgICAgICBzdG9yZSA9IFRva2VuU3RvcmFnZShfYWRkcmVzcyk7CiAgICB9CgogICAgZnVuY3Rpb24gX3NldFZhbGlkYXRvcihhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgdmFsaWRhdG9yID0gVG9rZW5WYWxpZGF0b3IoX2FkZHJlc3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9zZXRTZXR0aW5nKHN0cmluZyBfbmFtZSwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5UGVybWl0dGVkIHsKICAgICAgICBzdG9yZS5zZXRTZXR0aW5nKF9uYW1lLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9zdGFydE1lZ2Fib3godWludDI1NiBfdG9rZW5zKSBwdWJsaWMgb25seVBlcm1pdHRlZCB7CiAgICAgICAgdmFsaWRhdG9yLnZhbGlkYXRlU3RhcnRNZWdhYm94KG93bmVyLCBfdG9rZW5zKTsKICAgICAgICBzdG9yZS5uZXdNZWdhYm94KG93bmVyLCBfdG9rZW5zLCBub3cpOwogICAgfQoKICAgIC8vCiAgICAvLyBTaGFyZWFibGUgZnVuY3Rpb25zIGNvZGUgaW1wbGVtZW50YXRpb24KICAgIC8vCgogICAgZnVuY3Rpb24gX19hcHByb3ZlX2ltcGwoYWRkcmVzcyBfc2VuZGVyLCBhZGRyZXNzIF9yZWNpcGllbnQsIHVpbnQyNTYgX2Ftb3VudCkgcHJpdmF0ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYWxsb3dlZFtfc2VuZGVyXVtfcmVjaXBpZW50XSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwoX3NlbmRlciwgX3JlY2lwaWVudCwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gX19wdXJjaGFzZV9pbXBsKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHByaXZhdGUgewogICAgICAgIHVpbnQyNTYgX2Ftb3VudFdpdGhvdXRGZWUgPSBfYW1vdW50ICogc3RvcmUuZ2V0U2V0dGluZygicGVyY2VudGFnZSIpIC8gKHN0b3JlLmdldFNldHRpbmcoInB1cmNoYXNlRmVlIikgKyBzdG9yZS5nZXRTZXR0aW5nKCJwZXJjZW50YWdlIikpOwogICAgICAgIHVpbnQyNTYgX2ZlZSA9IF9hbW91bnRXaXRob3V0RmVlICogc3RvcmUuZ2V0U2V0dGluZygicHVyY2hhc2VGZWUiKSAvIHN0b3JlLmdldFNldHRpbmcoInBlcmNlbnRhZ2UiKTsKICAgICAgICB1aW50MjU2IF9vd25lckJhbGFuY2UgPSBzdG9yZS5nZXRCYWxhbmNlKG93bmVyKTsKICAgICAgICBhZGRyZXNzIF9mZWVSZXR1cm5BZGRyZXNzID0gc3RvcmUuZ2V0U2V0dGluZ0FkZHJlc3MoImZlZVJldHVybkFkZHJlc3MiKTsKICAgICAgICB1aW50MjU2IF90b2tlbnMgPSB2YWxpZGF0b3IudmFsaWRhdGVBbmRHZXRQdXJjaGFzZVRva2Vucyhvd25lciwgbXNnLnNlbmRlciwgX2Ftb3VudFdpdGhvdXRGZWUpOwoKICAgICAgICBzdG9yZS5pbmNyZWFzZUJhbGFuY2UoX3RvLCBfdG9rZW5zKTsKICAgICAgICBzdG9yZS5kZWNyZWFzZUJhbGFuY2Uob3duZXIsIF90b2tlbnMpOwoKICAgICAgICBpZiAoX2ZlZSA+IDApCiAgICAgICAgICAgIF9mZWVSZXR1cm5BZGRyZXNzLnRyYW5zZmVyKF9mZWUpOwoKICAgICAgICB2YWxpZGF0b3IudXBkYXRlRGF0ZU9mUHVyY2hhc2UoX3RvLCBub3cpOwoKICAgICAgICBpZiAoX293bmVyQmFsYW5jZSA8IHN0b3JlLmdldFNldHRpbmcoImV4aGF1c3RpbmdOdW1iZXIiKSkgewogICAgICAgICAgICBUb2tlblBvb2xFeGhhdXN0aW5nKF9vd25lckJhbGFuY2UpOwogICAgICAgIH0KICAgICAgICBUb2tlblB1cmNoYXNlZChfdG8sIG1zZy52YWx1ZSwgX3Rva2Vucyk7CiAgICAgICAgVHJhbnNmZXIob3duZXIsIF90bywgX3Rva2Vucyk7CiAgICB9CgogICAgZnVuY3Rpb24gX19yZWRlZW1faW1wbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF90b2tlbnMpIHByaXZhdGUgewogICAgICAgIGFkZHJlc3MgZGVhZFRva2Vuc0FkZHJlc3MgPSBzdG9yZS5nZXRTZXR0aW5nQWRkcmVzcygiZGVhZFRva2Vuc0FkZHJlc3MiKTsKICAgICAgICBhZGRyZXNzIGZlZVJldHVybkFkZHJlc3MgPSBzdG9yZS5nZXRTZXR0aW5nQWRkcmVzcygiZmVlUmV0dXJuQWRkcmVzcyIpOwogICAgICAgIHVpbnQyNTYgX2ZlZSA9IHZhbGlkYXRvci52YWxpZGF0ZUFuZEdldFJlZGVlbUZlZShvd25lciwgX2Zyb20sIF90b2tlbnMpOwoKICAgICAgICBzdG9yZS50cmFuc2ZlcihfZnJvbSwgZGVhZFRva2Vuc0FkZHJlc3MsIF90b2tlbnMpOwogICAgICAgIHN0b3JlLnRyYW5zZmVyKF9mcm9tLCBmZWVSZXR1cm5BZGRyZXNzLCBfZmVlKTsKCiAgICAgICAgVG9rZW5Tb2xkKF9mcm9tLCBfdG9rZW5zKTsKICAgIH0KfQ=='.
	

]
