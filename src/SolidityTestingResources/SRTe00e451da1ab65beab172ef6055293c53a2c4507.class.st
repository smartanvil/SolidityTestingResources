Class {
	#name : #SRTe00e451da1ab65beab172ef6055293c53a2c4507,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe00e451da1ab65beab172ef6055293c53a2c4507 >> base64 [
	^ ''.
	

]
