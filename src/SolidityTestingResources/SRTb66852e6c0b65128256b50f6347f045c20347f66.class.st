Class {
	#name : #SRTb66852e6c0b65128256b50f6347f045c20347f66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb66852e6c0b65128256b50f6347f045c20347f66 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBFUkMyMCB7CiAgICBmdW5jdGlvbiBUT1RBTFNVUFBMWSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG90YWxTdXBwbHkpOwogICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKfQoKCgovKioKKiBAdGl0bGUgU2FmZU1hdGgKKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgoqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICB1aW50MjU2IGMgPSBhICogYjsKICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgcmV0dXJuIGM7CiB9CgogZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICB1aW50MjU2IGMgPSBhIC8gYjsKICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgcmV0dXJuIGM7CiB9CgogZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgIGFzc2VydChiIDw9IGEpOwogICByZXR1cm4gYSAtIGI7CiB9CgogZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICBhc3NlcnQoYyA+PSBhKTsKICAgcmV0dXJuIGM7CiB9Cn0KCgoKY29udHJhY3QgSXRhbHlDb2luIGlzIEVSQzIwewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogIAogIHVpbnQyNTYgcHVibGljIF90b3RhbFN1cHBseSA9IDA7CiAgCiAgCiAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiSVRBIjsvL1NpbWJvbG8gZGVsIHRva2VuIGVzLiBFVEgKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiSXRhbHlDb2luIjsgLy9Ob21lIGRlbCB0b2tlbiBlcy4gRXRoZXJldW0KICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAvL051bWVybyBkaSBkZWNpbWFsaSBkZWwgdG9rZW4sIGlsIGJpdGNvaW4gbmUgaGEgOCwgZXRoZXJldW0gMTgKICAKICB1aW50MjU2IHB1YmxpYyBNQVhfU1VQUExZID0gMjI4MTAwMDAwMCAqIDEwKipkZWNpbWFsczsgLy9OdW1lcm8gbWFzc2ltbyBkaSB0b2tlbiBkYSBlbWV0dGVyZSAoIDEwMDAgKQogIHVpbnQyNTYgcHVibGljIFRPS0VOX1RPX0NSRUFUT1IgPSAxMTQwNTAwMDAgKiAxMCoqZGVjaW1hbHM7IC8vVG9rZW4gZGEgaW52aWFyZSBhbCBjcmVhdG9yZSBkZWwgY29udHJhdHRvCgogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFJBVEUgPSAyNTAwMDsgLy9RdWFudGkgdG9rZW4gaW52aWFyZSBwZXIgb2duaSBldGhlciByaWNldnV0bwogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIAogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogIAogIC8vRnVuemlvbmUgY2hlIHBlcm1ldHRlIGRpIHJpY2V2ZXJlIHRva2VuIHNvbG8gc3BlY2lmaWNhbmRvIGwnaW5kaXJpenpvCiAgZnVuY3Rpb24oKSBwYXlhYmxlewogICAgICBjcmVhdGVUb2tlbnMoKTsKICB9CiAgCiAgLy9TYWx2aWFtbyBsJ2luZGlyaXp6byBkZWwgY3JlYXRvcmUgZGVsIGNvbnRyYXR0byBwZXIgaW52aWFyZSBnbGkgZXRoZXIgcmljZXZ1dGkKICBmdW5jdGlvbiBJdGx5Q29pbigpewogICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gVE9LRU5fVE9fQ1JFQVRPUjsKICAgICAgX3RvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5LmFkZChUT0tFTl9UT19DUkVBVE9SKTsKICB9CiAgCiAgLy9DcmVhemlvbmUgZGVpIHRva2VuCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgcGF5YWJsZXsKICAgICAgLy9Db250cm9sbGlhbW8gY2hlIGdsaSBldGhlciByaWNldnV0aSBzaWFubyBtYWdnaW9yaSBkaSAwCiAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDApOwogICAgICAKICAgICAgLy9DcmVpYW1vIHVuYSB2YXJpYWJpbGUgY2hlIGNvbnRpZW5lIGdsaSBldGhlciByaWNldnV0aSBtb2x0aXBsaWNhdGkgcGVyIGlsIFJBVEUKICAgICAgdWludDI1NiB0b2tlbnMgPSBtc2cudmFsdWUubXVsKDEwICoqIGRlY2ltYWxzKTsKICAgICAgdG9rZW5zID0gdG9rZW5zLm11bChSQVRFKTsKICAgICAgdG9rZW5zID0gdG9rZW5zLmRpdigxMCAqKiAxOCk7CgogICAgICB1aW50MjU2IHN1bSA9IF90b3RhbFN1cHBseS5hZGQodG9rZW5zKTsKICAgICAgcmVxdWlyZShzdW0gPD0gTUFYX1NVUFBMWSk7CiAgICAgIC8vQWdnaXVuZ2lhbW8gaSB0b2tlbiBhbCBiaWxhbmNpbyBkaSBjaGkgY2kgaGEgaW52aWF0byBnbGkgZXRoZXIgZWQgYXVtZW50aWFtbyBsYSB2YXJpYWJpbGUgdG90YWxTdXBwbHkKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKICAgICAgX3RvdGFsU3VwcGx5ID0gc3VtOwogICAgICAKICAgICAgLy9JbnZpYW1vIGdsaSBldGhlciBhIGNoaSBoYSBjcmVhdG8gaWwgY29udHJhdHRvCiAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKICAKICAvL1JpdG9ybmEgaWwgbnVtZXJvIHRvdGFsZSBkaSB0b2tlbgogIGZ1bmN0aW9uIFRPVEFMU1VQUExZKCkgY29uc3RhbnQgcmV0dXJucyAodWludCB0b3RhbFN1cHBseSl7CiAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgfQogIAogIC8vUml0b3JuYSBpbCBiaWxhbmNpbyBkZWxsJ3V0ZW50ZSBkaSB1biBpbmRpcml6em8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSl7CiAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KICAKICAvL1BlciBpbnZpYXJlIGkgVG9rZW4KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgIC8vQ29udHJvbGxpYW1vIGNoZSBjaGkgdm9nbGlhIGludmlhcmUgaSB0b2tlbiBuZSBhYmJpYSBhIHN1ZmZpY2llbnphIGUgY2hlIG5lIHZvZ2xpYSBpbnZpYXJlIHBpJiMyNDk7IGRpIDAKICAgICAgcmVxdWlyZSgKICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZQogICAgICAgICAgJiYgX3ZhbHVlID4gMAogICAgICApOwogICAgICAvL1RvZ2xpYW1vIGkgdG9rZW4gaW52aWF0aSBkYWwgc3VvIGJpbGFuY2lvCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgIC8vTGkgYWdnaXVuZ2lhbW8gYWwgYmlsYW5jaW8gZGVsIHJpY2V2ZW50ZQogICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgLy9DaGlhbWlhbW8gbCBldmVudG8gdHJhbnNmZXIKICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgLy9JbnZpbyBkZWkgdG9rZW4gY29uIGRlbGVnYQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgIC8vQ29udHJvbGxpYW1vIGNoZSBjaGkgdm9nbGlhIGludmlhcmUgdG9rZW4gZGEgdW4gaW5kaXJpenpvIG5vbiBzdW8gYWJiaWEgbGEgZGVsZWdhIHBlciBmYXJsbywgY2hlCiAgICAgIC8vbCdhY2NvdW50IGRhIGRvdmUgdm5nb25vIGludmlhdGkgaSB0b2tlbiBhYmJpYSB0b2tlbiBhIHN1ZmZpY2llbnphIGUKICAgICAgLy9jaGUgaSB0b2tlbiBpbnZpYXRpIHNpYW5vIG1hZ2dpb3JpIGRpIDAKICAgICAgcmVxdWlyZSgKICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZQogICAgICAgICAgJiYgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlCiAgICAgICAgICAmJiBfdmFsdWUgPiAwCiAgICAgICk7CiAgICAgIC8vdG9nbGlhbW8gaSB0b2tlbiBkYSBjaGkgbGkgaW52aWEKICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAvL0FnZ2l1bmdpYW1vbGkgYWwgcmNldmVudGUKICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgIC8vRGltaW51aWFtbyBpbCB2YWxvcmUgZGVpIHRva2VuIGNoZSBpbCBkZWxlZ2F0byBwdSYjMjQyOyBpbnZpYXJlIGluIGZhdm9yZSBkZWwgZGVsZWdhbnRlCiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgIC8vQ2hpYW1haWFtbyBsJ2V2ZW50byB0cmFuc2ZlcgogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgLy9EZWxlZ2FyZSBxdWFsY3VubyBhbGwnaW52aW8gZGkgdG9rZW4KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpewogICAgICAvL0luc2VyaWFtbyBsJ2luZGlyaXp6byBkZWwgZGVsZWdhdG8gZSBpbCBtYXNzaW1vIGNoZSBwdSYjMjQyOyBpbnZpYXJlCiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAvL0NoaWFtaWFtbyBsJ2V2ZW50byBhcHByb3ZhbAogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgfQogIAogIC8vUml0b3JuYSBpbCBudW1lcm8gZGkgdG9rZW4gY2hlIHVuIGRlbGVnYXRvIHB1JiMyNDI7IGFuY29yYSBpbnZpYXJlCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZyl7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7CiAgCn0='.
	

]
