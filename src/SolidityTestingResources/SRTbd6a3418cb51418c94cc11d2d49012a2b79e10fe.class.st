Class {
	#name : #SRTbd6a3418cb51418c94cc11d2d49012a2b79e10fe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbd6a3418cb51418c94cc11d2d49012a2b79e10fe >> base64 [
	^ ''.
	

]
