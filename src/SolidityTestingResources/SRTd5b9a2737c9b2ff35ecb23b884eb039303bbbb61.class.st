Class {
	#name : #SRTd5b9a2737c9b2ff35ecb23b884eb039303bbbb61,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd5b9a2737c9b2ff35ecb23b884eb039303bbbb61 >> base64 [
	^ ''.
	

]
