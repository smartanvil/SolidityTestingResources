Class {
	#name : #SRT221b9e453391c24d52c551542d791206f5747c57,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT221b9e453391c24d52c551542d791206f5747c57 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKICAvKioKICAgKiBAdGl0bGUgU2FmZU1hdGgKICAgKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogICAqLwogIGxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgIGFzc2VydChjID49IGEpOwogICAgICByZXR1cm4gYzsKICAgIH0KICB9CgoKICAvKioKICAgKiBAdGl0bGUgT3duYWJsZQogICAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICAgKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogICAqLwogIGNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIC8qKgogICAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICAgKiBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgfQogICAgfQoKICB9CgoKICAvKgogICAqIEhhbHRhYmxlCiAgICoKICAgKiBBYnN0cmFjdCBjb250cmFjdCB0aGF0IGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4KICAgKiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uIERpZmZlcnMgZnJvbSBQYXVzYWJsZSBieSByZXF1aXJpbmcgYSBzdGF0ZS4KICAgKgogICAqCiAgICogT3JpZ2luYWxseSBlbnZpc2lvbmVkIGluIEZpcnN0Qmxvb2QgSUNPIGNvbnRyYWN0LgogICAqLwogIGNvbnRyYWN0IEhhbHRhYmxlIGlzIE93bmFibGUgewogICAgYm9vbCBwdWJsaWMgaGFsdGVkID0gZmFsc2U7CgogICAgbW9kaWZpZXIgaW5Ob3JtYWxTdGF0ZSB7CiAgICAgIHJlcXVpcmUoIWhhbHRlZCk7CiAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaW5FbWVyZ2VuY3lTdGF0ZSB7CiAgICAgIHJlcXVpcmUoaGFsdGVkKTsKICAgICAgXzsKICAgIH0KCiAgICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAgZnVuY3Rpb24gaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciBpbk5vcm1hbFN0YXRlIHsKICAgICAgaGFsdGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgaW5FbWVyZ2VuY3lTdGF0ZSB7CiAgICAgIGhhbHRlZCA9IGZhbHNlOwogICAgfQogIH0KCiAgLyoqCiAgICogQHRpdGxlIEVSQzIwQmFzaWMKICAgKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICAgKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAgICovCiAgY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIH0KCgogIC8qKgogICAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICAgKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICAgKi8KICBjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICB9CgogIC8qKgogICAqIEB0aXRsZSBCYXNpYyB0b2tlbgogICAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAgICovCiAgY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvKioKICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgfQoKICAvKioKICAgKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICAgKgogICAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogICAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAgICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogICAqLwogIGNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCgogICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgLy8gcmVxdWlyZSAoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwoKICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CgogICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAgICovCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICB9CgogIC8qKgogICAqIEB0aXRsZSBCdXJuYWJsZQogICAqCiAgICogQGRldiBTdGFuZGFyZCBFUkMyMCB0b2tlbgogICAqLwogIGNvbnRyYWN0IEJ1cm5hYmxlIGlzIFN0YW5kYXJkVG9rZW4gewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgLyogVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBhbW91bnQgYnVybnQgKi8KICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOy8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgIC8vIENoZWNrIGFsbG93YW5jZQogICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7ICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOyAgICAgICAgICAgIC8vIFVwZGF0ZXMgdG90YWxTdXBwbHkKICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgQnVybihfZnJvbSwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgLy91c2UgYnVybgoKICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsgLy91c2UgYnVybgoKICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQogIH0KCgogIC8qKgogICAqIEB0aXRsZSBKaW5jb3JUb2tlbgogICAqCiAgICogQGRldiBCdXJuYWJsZSBPd25hYmxlIEVSQzIwIHRva2VuCiAgICovCiAgY29udHJhY3QgSmluY29yVG9rZW4gaXMgQnVybmFibGUsIE93bmFibGUgewoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJKaW5jb3IgVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiSkNSIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICB1aW50MjU2IHB1YmxpYyBJTklUSUFMX1NVUFBMWSA9IDM1MDAwMDAwICogMSBldGhlcjsKCiAgICAvKiBUaGUgZmluYWxpemVyIGNvbnRyYWN0IHRoYXQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4gKi8KICAgIGFkZHJlc3MgcHVibGljIHJlbGVhc2VBZ2VudDsKCiAgICAvKiogQSBjcm93ZHNhbGUgY29udHJhY3QgY2FuIHJlbGVhc2UgdXMgdG8gdGhlIHdpbGQgaWYgSUNPIHN1Y2Nlc3MuIElmIGZhbHNlIHdlIGFyZSBhcmUgaW4gdHJhbnNmZXIgbG9jayB1cCBwZXJpb2QuKi8KICAgIGJvb2wgcHVibGljIHJlbGVhc2VkID0gZmFsc2U7CgogICAgLyoqIE1hcCBvZiBhZ2VudHMgdGhhdCBhcmUgYWxsb3dlZCB0byB0cmFuc2ZlciB0b2tlbnMgcmVnYXJkbGVzcyBvZiB0aGUgbG9jayBkb3duIHBlcmlvZC4gVGhlc2UgYXJlIGNyb3dkc2FsZSBjb250cmFjdHMgYW5kIHBvc3NpYmxlIHRoZSB0ZWFtIG11bHRpc2lnIGl0c2VsZi4gKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHRyYW5zZmVyQWdlbnRzOwoKICAgIC8qKgogICAgICogTGltaXQgdG9rZW4gdHJhbnNmZXIgdW50aWwgdGhlIGNyb3dkc2FsZSBpcyBvdmVyLgogICAgICoKICAgICAqLwogICAgbW9kaWZpZXIgY2FuVHJhbnNmZXIoYWRkcmVzcyBfc2VuZGVyKSB7CiAgICAgIHJlcXVpcmUodHJhbnNmZXJBZ2VudHNbX3NlbmRlcl0gfHwgcmVsZWFzZWQpOwogICAgICBfOwogICAgfQoKICAgIC8qKiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBvbmx5IGJlZm9yZSBvciBhZnRlciB0aGUgdG9rZW5zIGhhdmUgYmVlbiByZWxlYXNlc2QgKi8KICAgIG1vZGlmaWVyIGluUmVsZWFzZVN0YXRlKGJvb2wgcmVsZWFzZVN0YXRlKSB7CiAgICAgIHJlcXVpcmUocmVsZWFzZVN0YXRlID09IHJlbGVhc2VkKTsKICAgICAgXzsKICAgIH0KCiAgICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSBhIHdoaXRlbGlzdGVkIHJlbGVhc2UgYWdlbnQuICovCiAgICBtb2RpZmllciBvbmx5UmVsZWFzZUFnZW50KCkgewogICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcmVsZWFzZUFnZW50KTsKICAgICAgXzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IENvbnRydWN0b3IgdGhhdCBnaXZlcyBtc2cuc2VuZGVyIGFsbCBvZiBleGlzdGluZyB0b2tlbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIEppbmNvclRva2VuKCkgewogICAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwogICAgfQoKCiAgICAvKioKICAgICAqIFNldCB0aGUgY29udHJhY3QgdGhhdCBjYW4gY2FsbCByZWxlYXNlIGFuZCBtYWtlIHRoZSB0b2tlbiB0cmFuc2ZlcmFibGUuCiAgICAgKgogICAgICogRGVzaWduIGNob2ljZS4gQWxsb3cgcmVzZXQgdGhlIHJlbGVhc2UgYWdlbnQgdG8gZml4IGZhdCBmaW5nZXIgbWlzdGFrZXMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFJlbGVhc2VBZ2VudChhZGRyZXNzIGFkZHIpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKCiAgICAgIC8vIFdlIGRvbid0IGRvIGludGVyZmFjZSBjaGVjayBoZXJlIGFzIHdlIG1pZ2h0IHdhbnQgdG8gYSBub3JtYWwgd2FsbGV0IGFkZHJlc3MgdG8gYWN0IGFzIGEgcmVsZWFzZSBhZ2VudAogICAgICByZWxlYXNlQWdlbnQgPSBhZGRyOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbGVhc2UoKSBvbmx5UmVsZWFzZUFnZW50IGluUmVsZWFzZVN0YXRlKGZhbHNlKSBwdWJsaWMgewogICAgICByZWxlYXNlZCA9IHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBPd25lciBjYW4gYWxsb3cgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKGEgY3Jvd2RzYWxlIGNvbnRyYWN0KSB0byB0cmFuc2ZlciB0b2tlbnMgZGVzcGl0ZSB0aGUgbG9jayB1cCBwZXJpb2QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFRyYW5zZmVyQWdlbnQoYWRkcmVzcyBhZGRyLCBib29sIHN0YXRlKSBvbmx5T3duZXIgaW5SZWxlYXNlU3RhdGUoZmFsc2UpIHB1YmxpYyB7CiAgICAgIHRyYW5zZmVyQWdlbnRzW2FkZHJdID0gc3RhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBjYW5UcmFuc2Zlcihtc2cuc2VuZGVyKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgLy8gQ2FsbCBCdXJuYWJsZS50cmFuc2ZlcigpCiAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAvLyBDYWxsIEJ1cm5hYmxlLnRyYW5zZmVyRm9ybSgpCiAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIHJldHVybiBzdXBlci5idXJuKF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgcmV0dXJuIHN1cGVyLmJ1cm5Gcm9tKF9mcm9tLCBfdmFsdWUpOwogICAgfQogIH0KCgoKICBjb250cmFjdCBKaW5jb3JUb2tlblByZVNhbGUgaXMgT3duYWJsZSwgSGFsdGFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkppbmNvciBUb2tlbiBQcmVTYWxlIjsKCiAgICBKaW5jb3JUb2tlbiBwdWJsaWMgdG9rZW47CgogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnk7CgogICAgdWludCBwdWJsaWMgaGFyZENhcDsKCiAgICB1aW50IHB1YmxpYyBzb2Z0Q2FwOwoKICAgIHVpbnQgcHVibGljIHByaWNlOwoKICAgIHVpbnQgcHVibGljIHB1cmNoYXNlTGltaXQ7CgogICAgdWludCBwdWJsaWMgY29sbGVjdGVkID0gMDsKCiAgICB1aW50IHB1YmxpYyB0b2tlbnNTb2xkID0gMDsKCiAgICB1aW50IHB1YmxpYyBpbnZlc3RvckNvdW50ID0gMDsKCiAgICB1aW50IHB1YmxpYyB3ZWlSZWZ1bmRlZCA9IDA7CgogICAgdWludCBwdWJsaWMgc3RhcnRCbG9jazsKCiAgICB1aW50IHB1YmxpYyBlbmRCbG9jazsKCiAgICBib29sIHB1YmxpYyBzb2Z0Q2FwUmVhY2hlZCA9IGZhbHNlOwoKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUZpbmlzaGVkID0gZmFsc2U7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSByZWZ1bmRlZDsKCiAgICBldmVudCBHb2FsUmVhY2hlZCh1aW50IGFtb3VudFJhaXNlZCk7CgogICAgZXZlbnQgU29mdENhcFJlYWNoZWQodWludCBzb2Z0Q2FwKTsKCiAgICBldmVudCBOZXdDb250cmlidXRpb24oYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludDI1NiB0b2tlbkFtb3VudCwgdWludDI1NiBldGhlckFtb3VudCk7CgogICAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbmRleGVkIGhvbGRlciwgdWludDI1NiBhbW91bnQpOwoKICAgIG1vZGlmaWVyIHByZVNhbGVBY3RpdmUoKSB7CiAgICAgIHJlcXVpcmUoYmxvY2subnVtYmVyID49IHN0YXJ0QmxvY2sgJiYgYmxvY2subnVtYmVyIDwgZW5kQmxvY2spOwogICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHByZVNhbGVFbmRlZCgpIHsKICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPj0gZW5kQmxvY2spOwogICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIEppbmNvclRva2VuUHJlU2FsZSgKICAgIHVpbnQgX2hhcmRDYXBVU0QsCiAgICB1aW50IF9zb2Z0Q2FwVVNELAogICAgYWRkcmVzcyBfdG9rZW4sCiAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwKICAgIHVpbnQgX3RvdGFsVG9rZW5zLAogICAgdWludCBfcHJpY2VFVEgsCiAgICB1aW50IF9wdXJjaGFzZUxpbWl0VVNELAoKICAgIHVpbnQgX3N0YXJ0QmxvY2ssCiAgICB1aW50IF9lbmRCbG9jawogICAgKSB7CiAgICAgIGhhcmRDYXAgPSBfaGFyZENhcFVTRC5tdWwoMSBldGhlcikuZGl2KF9wcmljZUVUSCk7CiAgICAgIHNvZnRDYXAgPSBfc29mdENhcFVTRC5tdWwoMSBldGhlcikuZGl2KF9wcmljZUVUSCk7CiAgICAgIHByaWNlID0gX3RvdGFsVG9rZW5zLm11bCgxIGV0aGVyKS5kaXYoaGFyZENhcCk7CgogICAgICBwdXJjaGFzZUxpbWl0ID0gX3B1cmNoYXNlTGltaXRVU0QubXVsKDEgZXRoZXIpLmRpdihfcHJpY2VFVEgpLm11bChwcmljZSk7CiAgICAgIHRva2VuID0gSmluY29yVG9rZW4oX3Rva2VuKTsKICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CgogICAgICBzdGFydEJsb2NrID0gX3N0YXJ0QmxvY2s7CiAgICAgIGVuZEJsb2NrID0gX2VuZEJsb2NrOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDAuMSAqIDEgZXRoZXIpOwogICAgICBkb1B1cmNoYXNlKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZCgpIGV4dGVybmFsIHByZVNhbGVFbmRlZCBpbk5vcm1hbFN0YXRlIHsKICAgICAgcmVxdWlyZShzb2Z0Q2FwUmVhY2hlZCA9PSBmYWxzZSk7CiAgICAgIHJlcXVpcmUocmVmdW5kZWRbbXNnLnNlbmRlcl0gPT0gZmFsc2UpOwoKICAgICAgdWludCBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwogICAgICByZXF1aXJlKGJhbGFuY2UgPiAwKTsKCiAgICAgIHVpbnQgcmVmdW5kID0gYmFsYW5jZS5kaXYocHJpY2UpOwogICAgICBpZiAocmVmdW5kID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgcmVmdW5kID0gdGhpcy5iYWxhbmNlOwogICAgICB9CgogICAgICBhc3NlcnQobXNnLnNlbmRlci5zZW5kKHJlZnVuZCkpOwogICAgICByZWZ1bmRlZFttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgIHdlaVJlZnVuZGVkID0gd2VpUmVmdW5kZWQuYWRkKHJlZnVuZCk7CiAgICAgIFJlZnVuZGVkKG1zZy5zZW5kZXIsIHJlZnVuZCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgewogICAgICByZXF1aXJlKHNvZnRDYXBSZWFjaGVkKTsKICAgICAgYXNzZXJ0KGJlbmVmaWNpYXJ5LnNlbmQoY29sbGVjdGVkKSk7CiAgICAgIHRva2VuLnRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB0b2tlbi5iYWxhbmNlT2YodGhpcykpOwogICAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZG9QdXJjaGFzZShhZGRyZXNzIF9vd25lcikgcHJpdmF0ZSBwcmVTYWxlQWN0aXZlIGluTm9ybWFsU3RhdGUgewoKICAgICAgcmVxdWlyZSghY3Jvd2RzYWxlRmluaXNoZWQpOwogICAgICByZXF1aXJlKGNvbGxlY3RlZC5hZGQobXNnLnZhbHVlKSA8PSBoYXJkQ2FwKTsKCiAgICAgIGlmICghc29mdENhcFJlYWNoZWQgJiYgY29sbGVjdGVkIDwgc29mdENhcCAmJiBjb2xsZWN0ZWQuYWRkKG1zZy52YWx1ZSkgPj0gc29mdENhcCkgewogICAgICAgIHNvZnRDYXBSZWFjaGVkID0gdHJ1ZTsKICAgICAgICBTb2Z0Q2FwUmVhY2hlZChzb2Z0Q2FwKTsKICAgICAgfQogICAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZSAqIHByaWNlOwogICAgICByZXF1aXJlKHRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKS5hZGQodG9rZW5zKSA8PSBwdXJjaGFzZUxpbWl0KTsKCiAgICAgIGlmICh0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPT0gMCkgaW52ZXN0b3JDb3VudCsrOwoKICAgICAgY29sbGVjdGVkID0gY29sbGVjdGVkLmFkZChtc2cudmFsdWUpOwoKICAgICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zKTsKCiAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbnMpOwoKICAgICAgTmV3Q29udHJpYnV0aW9uKF9vd25lciwgdG9rZW5zLCBtc2cudmFsdWUpOwoKICAgICAgaWYgKGNvbGxlY3RlZCA9PSBoYXJkQ2FwKSB7CiAgICAgICAgR29hbFJlYWNoZWQoaGFyZENhcCk7CiAgICAgIH0KICAgIH0KICB9'.
	

]
