Class {
	#name : #SRT59820f462f94da72f2c4a3c33dbab92b30ceae1e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT59820f462f94da72f2c4a3c33dbab92b30ceae1e >> base64 [
	^ ''.
	

]
