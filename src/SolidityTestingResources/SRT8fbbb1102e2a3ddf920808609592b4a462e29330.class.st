Class {
	#name : #SRT8fbbb1102e2a3ddf920808609592b4a462e29330,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fbbb1102e2a3ddf920808609592b4a462e29330 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKiAgICAKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCiAqLwoKIAoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludCBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KfQoKCgovLy8gQGRldiBgT3duZWRgIGlzIGEgYmFzZSBsZXZlbCBjb250cmFjdCB0aGF0IGFzc2lnbnMgYW4gYG93bmVyYCB0aGF0IGNhbiBiZQovLy8gIGxhdGVyIGNoYW5nZWQKY29udHJhY3QgT3duZWQgewoKICAgIC8vLyBAZGV2IGBvd25lcmAgaXMgdGhlIG9ubHkgYWRkcmVzcyB0aGF0IGNhbiBjYWxsIGEgZnVuY3Rpb24gd2l0aCB0aGlzCiAgICAvLy8gbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8vIEBub3RpY2UgVGhlIENvbnN0cnVjdG9yIGFzc2lnbnMgdGhlIG1lc3NhZ2Ugc2VuZGVyIHRvIGJlIGBvd25lcmAKICAgIGZ1bmN0aW9uIE93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICAvLy8gQG5vdGljZSBgb3duZXJgIGNhbiBzdGVwIGRvd24gYW5kIGFzc2lnbiBzb21lIG90aGVyIGFkZHJlc3MgdG8gdGhpcyByb2xlCiAgICAvLy8gQHBhcmFtIF9uZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLiAweDAgY2FuIGJlIHVzZWQgdG8gY3JlYXRlCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBpZihtc2cuc2VuZGVyID09IG93bmVyKSB7CiAgICAgICAgICAgIG93bmVyID0gX25ld093bmVyOwogICAgICAgIH0KICAgIH0KfQoKCgoKLy8vIEB0aXRsZSBWZXN0aW5nIHRydXN0ZWUKY29udHJhY3QgVHJ1c3RlZSBpcyBPd25lZCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLyBUaGUgYWRkcmVzcyBvZiB0aGUgU0hQIEVSQzIwIHRva2VuLgogICAgU0hQIHB1YmxpYyBzaHA7CgogICAgc3RydWN0IEdyYW50IHsKICAgICAgICB1aW50MjU2IHZhbHVlOwogICAgICAgIHVpbnQyNTYgc3RhcnQ7CiAgICAgICAgdWludDI1NiBjbGlmZjsKICAgICAgICB1aW50MjU2IGVuZDsKICAgICAgICB1aW50MjU2IHRyYW5zZmVycmVkOwogICAgICAgIGJvb2wgcmV2b2thYmxlOwogICAgfQoKICAgIC8vIEdyYW50cyBob2xkZXIuCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEdyYW50KSBwdWJsaWMgZ3JhbnRzOwoKICAgIC8vIFRvdGFsIHRva2VucyBhdmFpbGFibGUgZm9yIHZlc3RpbmcuCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFZlc3Rpbmc7CgogICAgZXZlbnQgTmV3R3JhbnQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBVbmxvY2tHcmFudChhZGRyZXNzIGluZGV4ZWQgX2hvbGRlciwgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgUmV2b2tlR3JhbnQoYWRkcmVzcyBpbmRleGVkIF9ob2xkZXIsIHVpbnQyNTYgX3JlZnVuZCk7CgogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IgdGhhdCBpbml0aWFsaXplcyB0aGUgYWRkcmVzcyBvZiB0aGUgU0hQIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfc2hwIFNIUCBUaGUgYWRkcmVzcyBvZiB0aGUgcHJldmlvdXNseSBkZXBsb3llZCBTSFAgc21hcnQgY29udHJhY3QuCiAgICBmdW5jdGlvbiBUcnVzdGVlKFNIUCBfc2hwKSB7CiAgICAgICAgcmVxdWlyZShfc2hwICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHNocCA9IF9zaHA7CiAgICB9CgogICAgLy8vIEBkZXYgR3JhbnQgdG9rZW5zIHRvIGEgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHRvIGdyYW50IHRva2VucyB0by4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgZ3JhbnRlZC4KICAgIC8vLyBAcGFyYW0gX3N0YXJ0IHVpbnQyNTYgVGhlIGJlZ2lubmluZyBvZiB0aGUgdmVzdGluZyBwZXJpb2QuCiAgICAvLy8gQHBhcmFtIF9jbGlmZiB1aW50MjU2IER1cmF0aW9uIG9mIHRoZSBjbGlmZiBwZXJpb2QuCiAgICAvLy8gQHBhcmFtIF9lbmQgdWludDI1NiBUaGUgZW5kIG9mIHRoZSB2ZXN0aW5nIHBlcmlvZC4KICAgIC8vLyBAcGFyYW0gX3Jldm9rYWJsZSBib29sIFdoZXRoZXIgdGhlIGdyYW50IGlzIHJldm9rYWJsZSBvciBub3QuCiAgICBmdW5jdGlvbiBncmFudChhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX3N0YXJ0LCB1aW50MjU2IF9jbGlmZiwgdWludDI1NiBfZW5kLCBib29sIF9yZXZva2FibGUpCiAgICAgICAgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKCiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYSBzaW5nbGUgYWRkcmVzcyBjYW4gYmUgZ3JhbnRlZCB0b2tlbnMgb25seSBvbmNlLgogICAgICAgIHJlcXVpcmUoZ3JhbnRzW190b10udmFsdWUgPT0gMCk7CgogICAgICAgIC8vIENoZWNrIGZvciBkYXRlIGluY29uc2lzdGVuY2llcyB0aGF0IG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yLgogICAgICAgIHJlcXVpcmUoX3N0YXJ0IDw9IF9jbGlmZiAmJiBfY2xpZmYgPD0gX2VuZCk7CgogICAgICAgIC8vIENoZWNrIHRoYXQgdGhpcyBncmFudCBkb2Vzbid0IGV4Y2VlZCB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBjdXJyZW50bHkgYXZhaWxhYmxlIGZvciB2ZXN0aW5nLgogICAgICAgIHJlcXVpcmUodG90YWxWZXN0aW5nLmFkZChfdmFsdWUpIDw9IHNocC5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpOwoKICAgICAgICAvLyBBc3NpZ24gYSBuZXcgZ3JhbnQuCiAgICAgICAgZ3JhbnRzW190b10gPSBHcmFudCh7CiAgICAgICAgICAgIHZhbHVlOiBfdmFsdWUsCiAgICAgICAgICAgIHN0YXJ0OiBfc3RhcnQsCiAgICAgICAgICAgIGNsaWZmOiBfY2xpZmYsCiAgICAgICAgICAgIGVuZDogX2VuZCwKICAgICAgICAgICAgdHJhbnNmZXJyZWQ6IDAsCiAgICAgICAgICAgIHJldm9rYWJsZTogX3Jldm9rYWJsZQogICAgICAgIH0pOwoKICAgICAgICAvLyBUb2tlbnMgZ3JhbnRlZCwgcmVkdWNlIHRoZSB0b3RhbCBhbW91bnQgYXZhaWxhYmxlIGZvciB2ZXN0aW5nLgogICAgICAgIHRvdGFsVmVzdGluZyA9IHRvdGFsVmVzdGluZy5hZGQoX3ZhbHVlKTsKCiAgICAgICAgTmV3R3JhbnQobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldm9rZSB0aGUgZ3JhbnQgb2YgdG9rZW5zIG9mIGEgc3BlY2lmZWQgYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX2hvbGRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIGhhdmUgaXRzIHRva2VucyByZXZva2VkLgogICAgZnVuY3Rpb24gcmV2b2tlKGFkZHJlc3MgX2hvbGRlcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgR3JhbnQgZ3JhbnQgPSBncmFudHNbX2hvbGRlcl07CgogICAgICAgIHJlcXVpcmUoZ3JhbnQucmV2b2thYmxlKTsKCiAgICAgICAgLy8gU2VuZCB0aGUgcmVtYWluaW5nIFNIUCBiYWNrIHRvIHRoZSBvd25lci4KICAgICAgICB1aW50MjU2IHJlZnVuZCA9IGdyYW50LnZhbHVlLnN1YihncmFudC50cmFuc2ZlcnJlZCk7CgogICAgICAgIC8vIFJlbW92ZSB0aGUgZ3JhbnQuCiAgICAgICAgZGVsZXRlIGdyYW50c1tfaG9sZGVyXTsKCiAgICAgICAgdG90YWxWZXN0aW5nID0gdG90YWxWZXN0aW5nLnN1YihyZWZ1bmQpOwogICAgICAgIHNocC50cmFuc2Zlcihtc2cuc2VuZGVyLCByZWZ1bmQpOwoKICAgICAgICBSZXZva2VHcmFudChfaG9sZGVyLCByZWZ1bmQpOwogICAgfQoKICAgIC8vLyBAZGV2IENhbGN1bGF0ZSB0aGUgdG90YWwgYW1vdW50IG9mIHZlc3RlZCB0b2tlbnMgb2YgYSBob2xkZXIgYXQgYSBnaXZlbiB0aW1lLgogICAgLy8vIEBwYXJhbSBfaG9sZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGhvbGRlci4KICAgIC8vLyBAcGFyYW0gX3RpbWUgdWludDI1NiBUaGUgc3BlY2lmaWMgdGltZS4KICAgIC8vLyBAcmV0dXJuIGEgdWludDI1NiByZXByZXNlbnRpbmcgYSBob2xkZXIncyB0b3RhbCBhbW91bnQgb2YgdmVzdGVkIHRva2Vucy4KICAgIGZ1bmN0aW9uIHZlc3RlZFRva2VucyhhZGRyZXNzIF9ob2xkZXIsIHVpbnQyNTYgX3RpbWUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgR3JhbnQgZ3JhbnQgPSBncmFudHNbX2hvbGRlcl07CiAgICAgICAgaWYgKGdyYW50LnZhbHVlID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY2FsY3VsYXRlVmVzdGVkVG9rZW5zKGdyYW50LCBfdGltZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIGF0IGEgc3BlY2lmYyB0aW1lLgogICAgLy8vIEBwYXJhbSBfZ3JhbnQgR3JhbnQgVGhlIHZlc3RpbmcgZ3JhbnQuCiAgICAvLy8gQHBhcmFtIF90aW1lIHVpbnQyNTYgVGhlIHRpbWUgdG8gYmUgY2hlY2tlZAogICAgLy8vIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIG9mIGEgc3BlY2lmaWMgZ3JhbnQuCiAgICAvLy8gICB8ICAgICAgICAgICAgICAgICAgICAgICAgIF8vLS0tLS0tLS0gICB2ZXN0ZWRUb2tlbnMgcmVjdAogICAgLy8vICAgfCAgICAgICAgICAgICAgICAgICAgICAgXy8KICAgIC8vLyAgIHwgICAgICAgICAgICAgICAgICAgICBfLwogICAgLy8vICAgfCAgICAgICAgICAgICAgICAgICBfLwogICAgLy8vICAgfCAgICAgICAgICAgICAgICAgXy8KICAgIC8vLyAgIHwgICAgICAgICAgICAgICAgLwogICAgLy8vICAgfCAgICAgICAgICAgICAgLnwKICAgIC8vLyAgIHwgICAgICAgICAgICAuICB8CiAgICAvLy8gICB8ICAgICAgICAgIC4gICAgfAogICAgLy8vICAgfCAgICAgICAgLiAgICAgIHwKICAgIC8vLyAgIHwgICAgICAuICAgICAgICB8CiAgICAvLy8gICB8ICAgIC4gICAgICAgICAgfAogICAgLy8vICAgKz09PSs9PT09PT09PT09PSstLS0tLS0tLS0rLS0tLS0tLS0tLT4gdGltZQogICAgLy8vICAgICBTdGFydCAgICAgICBDbGlmZiAgICAgIEVuZAogICAgZnVuY3Rpb24gY2FsY3VsYXRlVmVzdGVkVG9rZW5zKEdyYW50IF9ncmFudCwgdWludDI1NiBfdGltZSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gSWYgd2UncmUgYmVmb3JlIHRoZSBjbGlmZiwgdGhlbiBub3RoaW5nIGlzIHZlc3RlZC4KICAgICAgICBpZiAoX3RpbWUgPCBfZ3JhbnQuY2xpZmYpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQoKICAgICAgICAvLyBJZiB3ZSdyZSBhZnRlciB0aGUgZW5kIG9mIHRoZSB2ZXN0aW5nIHBlcmlvZCAtIGV2ZXJ5dGhpbmcgaXMgdmVzdGVkOwogICAgICAgIGlmIChfdGltZSA+PSBfZ3JhbnQuZW5kKSB7CiAgICAgICAgICAgIHJldHVybiBfZ3JhbnQudmFsdWU7CiAgICAgICAgfQoKICAgICAgICAvLyBJbnRlcnBvbGF0ZSBhbGwgdmVzdGVkIHRva2VuczogdmVzdGVkVG9rZW5zID0gdG9rZW5zLy8vICh0aW1lIC0gc3RhcnQpIC8gKGVuZCAtIHN0YXJ0KQogICAgICAgICByZXR1cm4gX2dyYW50LnZhbHVlLm11bChfdGltZS5zdWIoX2dyYW50LnN0YXJ0KSkuZGl2KF9ncmFudC5lbmQuc3ViKF9ncmFudC5zdGFydCkpOwogICAgfQoKICAgIC8vLyBAZGV2IFVubG9jayB2ZXN0ZWQgdG9rZW5zIGFuZCB0cmFuc2ZlciB0aGVtIHRvIHRoZWlyIGhvbGRlci4KICAgIC8vLyBAcmV0dXJuIGEgdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvZiB2ZXN0ZWQgdG9rZW5zIHRyYW5zZmVycmVkIHRvIHRoZWlyIGhvbGRlci4KICAgIGZ1bmN0aW9uIHVubG9ja1Zlc3RlZFRva2VucygpIHB1YmxpYyB7CiAgICAgICAgR3JhbnQgZ3JhbnQgPSBncmFudHNbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShncmFudC52YWx1ZSAhPSAwKTsKCiAgICAgICAgLy8gR2V0IHRoZSB0b3RhbCBhbW91bnQgb2YgdmVzdGVkIHRva2VucywgYWNjY29yZGluZyB0byBncmFudC4KICAgICAgICB1aW50MjU2IHZlc3RlZCA9IGNhbGN1bGF0ZVZlc3RlZFRva2VucyhncmFudCwgbm93KTsKICAgICAgICBpZiAodmVzdGVkID09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBob2xkZXIgZG9lc24ndCB0cmFuc2ZlciBtb3JlIHRoYW4gd2hhdCBoZSBhbHJlYWR5IGhhcy4KICAgICAgICB1aW50MjU2IHRyYW5zZmVyYWJsZSA9IHZlc3RlZC5zdWIoZ3JhbnQudHJhbnNmZXJyZWQpOwogICAgICAgIGlmICh0cmFuc2ZlcmFibGUgPT0gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBncmFudC50cmFuc2ZlcnJlZCA9IGdyYW50LnRyYW5zZmVycmVkLmFkZCh0cmFuc2ZlcmFibGUpOwogICAgICAgIHRvdGFsVmVzdGluZyA9IHRvdGFsVmVzdGluZy5zdWIodHJhbnNmZXJhYmxlKTsKICAgICAgICBzaHAudHJhbnNmZXIobXNnLnNlbmRlciwgdHJhbnNmZXJhYmxlKTsKCiAgICAgICAgVW5sb2NrR3JhbnQobXNnLnNlbmRlciwgdHJhbnNmZXJhYmxlKTsKICAgIH0KfQoKCgoKCgovLy8gQGRldiBUaGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCBtdXN0IGltcGxlbWVudCB0aGVzZSBmdW5jdGlvbnMKY29udHJhY3QgVG9rZW5Db250cm9sbGVyIHsKICAgIC8vLyBAbm90aWNlIENhbGxlZCB3aGVuIGBfb3duZXJgIHNlbmRzIGV0aGVyIHRvIHRoZSBNaW5pTWUgVG9rZW4gY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgc2VudCB0aGUgZXRoZXIgdG8gY3JlYXRlIHRva2VucwogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXRoZXIgaXMgYWNjZXB0ZWQsIGZhbHNlIGlmIGl0IHRocm93cwogICAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgX293bmVyKSBwYXlhYmxlIHJldHVybnMoYm9vbCk7CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBvcmlnaW4gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgdHJhbnNmZXIKICAgIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcmV0dXJucyhib29sKTsKCiAgICAvLy8gQG5vdGljZSBOb3RpZmllcyB0aGUgY29udHJvbGxlciBhYm91dCBhbiBhcHByb3ZhbCBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IGNhbGxzIGBhcHByb3ZlKClgCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBzcGVuZGVyIGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBhcHByb3ZhbAogICAgZnVuY3Rpb24gb25BcHByb3ZlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpCiAgICAgICAgcmV0dXJucyhib29sKTsKfQoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgICAvLy8gQG5vdGljZSBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJvbGxlciBpcyB0aGUgb25seSBhZGRyZXNzIHRoYXQgY2FuIGNhbGwKICAgIC8vLyAgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyb2xsZXIpOyBfOyB9CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgeyBjb250cm9sbGVyID0gbXNnLnNlbmRlcjt9CgogICAgLy8vIEBub3RpY2UgQ2hhbmdlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX25ld0NvbnRyb2xsZXIgVGhlIG5ldyBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gY2hhbmdlQ29udHJvbGxlcihhZGRyZXNzIF9uZXdDb250cm9sbGVyKSBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgY29udHJvbGxlciA9IF9uZXdDb250cm9sbGVyOwogICAgfQp9Cgpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIGZyb20sIHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9kYXRhKTsKfQoKLy8vIEBkZXYgVGhlIGFjdHVhbCB0b2tlbiBjb250cmFjdCwgdGhlIGRlZmF1bHQgY29udHJvbGxlciBpcyB0aGUgbXNnLnNlbmRlcgovLy8gIHRoYXQgZGVwbG95cyB0aGUgY29udHJhY3QsIHNvIHVzdWFsbHkgdGhpcyB0b2tlbiB3aWxsIGJlIGRlcGxveWVkIGJ5IGEKLy8vICB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0LCB3aGljaCBHaXZldGggd2lsbCBjYWxsIGEgIkNhbXBhaWduIgpjb250cmFjdCBNaW5pTWVUb2tlbiBpcyBDb250cm9sbGVkIHsKCiAgICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgICAgICAgICAgIC8vVGhlIFRva2VuJ3MgbmFtZTogZS5nLiBEaWdpeERBTyBUb2tlbnMKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsgICAgICAgICAgICAgLy9OdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIHNtYWxsZXN0IHVuaXQKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlLmcuIFJFUAogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ01NVF8wLjEnOyAvL0FuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZQoKCiAgICAvLy8gQGRldiBgQ2hlY2twb2ludGAgaXMgdGhlIHN0cnVjdHVyZSB0aGF0IGF0dGFjaGVzIGEgYmxvY2sgbnVtYmVyIHRvIGEKICAgIC8vLyAgZ2l2ZW4gdmFsdWUsIHRoZSBibG9jayBudW1iZXIgYXR0YWNoZWQgaXMgdGhlIG9uZSB0aGF0IGxhc3QgY2hhbmdlZCB0aGUKICAgIC8vLyAgdmFsdWUKICAgIHN0cnVjdCAgQ2hlY2twb2ludCB7CgogICAgICAgIC8vIGBmcm9tQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgdmFsdWUgd2FzIGdlbmVyYXRlZCBmcm9tCiAgICAgICAgdWludDEyOCBmcm9tQmxvY2s7CgogICAgICAgIC8vIGB2YWx1ZWAgaXMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBibG9jayBudW1iZXIKICAgICAgICB1aW50MTI4IHZhbHVlOwogICAgfQoKICAgIC8vIGBwYXJlbnRUb2tlbmAgaXMgdGhlIFRva2VuIGFkZHJlc3MgdGhhdCB3YXMgY2xvbmVkIHRvIHByb2R1Y2UgdGhpcyB0b2tlbjsKICAgIC8vICBpdCB3aWxsIGJlIDB4MCBmb3IgYSB0b2tlbiB0aGF0IHdhcyBub3QgY2xvbmVkCiAgICBNaW5pTWVUb2tlbiBwdWJsaWMgcGFyZW50VG9rZW47CgogICAgLy8gYHBhcmVudFNuYXBTaG90QmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgZnJvbSB0aGUgUGFyZW50IFRva2VuIHRoYXQgd2FzCiAgICAvLyAgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBDbG9uZSBUb2tlbgogICAgdWludCBwdWJsaWMgcGFyZW50U25hcFNob3RCbG9jazsKCiAgICAvLyBgY3JlYXRpb25CbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZSBDbG9uZSBUb2tlbiB3YXMgY3JlYXRlZAogICAgdWludCBwdWJsaWMgY3JlYXRpb25CbG9jazsKCiAgICAvLyBgYmFsYW5jZXNgIGlzIHRoZSBtYXAgdGhhdCB0cmFja3MgdGhlIGJhbGFuY2Ugb2YgZWFjaCBhZGRyZXNzLCBpbiB0aGlzCiAgICAvLyAgY29udHJhY3Qgd2hlbiB0aGUgYmFsYW5jZSBjaGFuZ2VzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgY2hhbmdlCiAgICAvLyAgb2NjdXJyZWQgaXMgYWxzbyBpbmNsdWRlZCBpbiB0aGUgbWFwCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENoZWNrcG9pbnRbXSkgYmFsYW5jZXM7CgogICAgLy8gYGFsbG93ZWRgIHRyYWNrcyBhbnkgZXh0cmEgdHJhbnNmZXIgcmlnaHRzIGFzIGluIGFsbCBFUkMyMCB0b2tlbnMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAvLyBUcmFja3MgdGhlIGhpc3Rvcnkgb2YgdGhlIGB0b3RhbFN1cHBseWAgb2YgdGhlIHRva2VuCiAgICBDaGVja3BvaW50W10gdG90YWxTdXBwbHlIaXN0b3J5OwoKICAgIC8vIEZsYWcgdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSB0b2tlbiBpcyB0cmFuc2ZlcmFibGUgb3Igbm90LgogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZDsKCiAgICAvLyBUaGUgZmFjdG9yeSB1c2VkIHRvIGNyZWF0ZSBuZXcgY2xvbmUgdG9rZW5zCiAgICBNaW5pTWVUb2tlbkZhY3RvcnkgcHVibGljIHRva2VuRmFjdG9yeTsKCi8vLy8vLy8vLy8vLy8vLy8KLy8gQ29uc3RydWN0b3IKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIE1pbmlNZVRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlbkZhY3RvcnkgVGhlIGFkZHJlc3Mgb2YgdGhlIE1pbmlNZVRva2VuRmFjdG9yeSBjb250cmFjdCB0aGF0CiAgICAvLy8gIHdpbGwgY3JlYXRlIHRoZSBDbG9uZSB0b2tlbiBjb250cmFjdHMsIHRoZSB0b2tlbiBmYWN0b3J5IG5lZWRzIHRvIGJlCiAgICAvLy8gIGRlcGxveWVkIGZpcnN0CiAgICAvLy8gQHBhcmFtIF9wYXJlbnRUb2tlbiBBZGRyZXNzIG9mIHRoZSBwYXJlbnQgdG9rZW4sIHNldCB0byAweDAgaWYgaXQgaXMgYQogICAgLy8vICBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3BhcmVudFNuYXBTaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwKICAgIC8vLyAgZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2xvbmUgdG9rZW4sIHNldCB0byAwIGlmIGl0CiAgICAvLy8gIGlzIGEgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlbk5hbWUgTmFtZSBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF9kZWNpbWFsVW5pdHMgTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuU3ltYm9sIFRva2VuIFN5bWJvbCBmb3IgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBJZiB0cnVlLCB0b2tlbnMgd2lsbCBiZSBhYmxlIHRvIGJlIHRyYW5zZmVycmVkCiAgICBmdW5jdGlvbiBNaW5pTWVUb2tlbigKICAgICAgICBhZGRyZXNzIF90b2tlbkZhY3RvcnksCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sCiAgICAgICAgdWludCBfcGFyZW50U25hcFNob3RCbG9jaywKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wsCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgKSB7CiAgICAgICAgdG9rZW5GYWN0b3J5ID0gTWluaU1lVG9rZW5GYWN0b3J5KF90b2tlbkZhY3RvcnkpOwogICAgICAgIG5hbWUgPSBfdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVjaW1hbHMKICAgICAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbAogICAgICAgIHBhcmVudFRva2VuID0gTWluaU1lVG9rZW4oX3BhcmVudFRva2VuKTsKICAgICAgICBwYXJlbnRTbmFwU2hvdEJsb2NrID0gX3BhcmVudFNuYXBTaG90QmxvY2s7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgICAgIGNyZWF0aW9uQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICB9CgoKLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBFUkMyMCBNZXRob2RzCi8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfYW1vdW50YCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwogICAgICAgIHJldHVybiBkb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX2Ftb3VudGAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudAogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgLy8gVGhlIGNvbnRyb2xsZXIgb2YgdGhpcyBjb250cmFjdCBjYW4gbW92ZSB0b2tlbnMgYXJvdW5kIGF0IHdpbGwsCiAgICAgICAgLy8gIHRoaXMgaXMgaW1wb3J0YW50IHRvIHJlY29nbml6ZSEgQ29uZmlybSB0aGF0IHlvdSB0cnVzdCB0aGUKICAgICAgICAvLyAgY29udHJvbGxlciBvZiB0aGlzIGNvbnRyYWN0LCB3aGljaCBpbiBtb3N0IHNpdHVhdGlvbnMgc2hvdWxkIGJlCiAgICAgICAgLy8gIGFub3RoZXIgb3BlbiBzb3VyY2Ugc21hcnQgY29udHJhY3Qgb3IgMHgwCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlcikgewogICAgICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwoKICAgICAgICAgICAgLy8gVGhlIHN0YW5kYXJkIEVSQyAyMCB0cmFuc2ZlckZyb20gZnVuY3Rpb25hbGl0eQogICAgICAgICAgICBpZiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPCBfYW1vdW50KSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkb1RyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgaXMgdGhlIGFjdHVhbCB0cmFuc2ZlciBmdW5jdGlvbiBpbiB0aGUgdG9rZW4gY29udHJhY3QsIGl0IGNhbgogICAgLy8vICBvbmx5IGJlIGNhbGxlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhpcyBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBkb1RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQKICAgICkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CgogICAgICAgICAgIGlmIChfYW1vdW50ID09IDApIHsKICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgfQoKICAgICAgICAgICByZXF1aXJlKHBhcmVudFNuYXBTaG90QmxvY2sgPCBibG9jay5udW1iZXIpOwoKICAgICAgICAgICAvLyBEbyBub3QgYWxsb3cgdHJhbnNmZXIgdG8gMHgwIG9yIHRoZSB0b2tlbiBjb250cmFjdCBpdHNlbGYKICAgICAgICAgICByZXF1aXJlKChfdG8gIT0gMCkgJiYgKF90byAhPSBhZGRyZXNzKHRoaXMpKSk7CgogICAgICAgICAgIC8vIElmIHRoZSBhbW91bnQgYmVpbmcgdHJhbnNmZXJlZCBpcyBtb3JlIHRoYW4gdGhlIGJhbGFuY2Ugb2YgdGhlCiAgICAgICAgICAgLy8gIGFjY291bnQgdGhlIHRyYW5zZmVyIHJldHVybnMgZmFsc2UKICAgICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlRnJvbSA9IGJhbGFuY2VPZkF0KF9mcm9tLCBibG9jay5udW1iZXIpOwogICAgICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgewogICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgfQoKICAgICAgICAgICAvLyBBbGVydHMgdGhlIHRva2VuIGNvbnRyb2xsZXIgb2YgdGhlIHRyYW5zZmVyCiAgICAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsKICAgICAgICAgICAgICAgcmVxdWlyZShUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikub25UcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KSk7CiAgICAgICAgICAgfQoKICAgICAgICAgICAvLyBGaXJzdCB1cGRhdGUgdGhlIGJhbGFuY2UgYXJyYXkgd2l0aCB0aGUgbmV3IHZhbHVlIGZvciB0aGUgYWRkcmVzcwogICAgICAgICAgIC8vICBzZW5kaW5nIHRoZSB0b2tlbnMKICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19mcm9tXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBUaGVuIHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgICAgLy8gIHJlY2VpdmluZyB0aGUgdG9rZW5zCiAgICAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mQXQoX3RvLCBibG9jay5udW1iZXIpOwogICAgICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50ID49IHByZXZpb3VzQmFsYW5jZVRvKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfdG9dLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOwoKICAgICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCB0aGUgY3VycmVudCBibG9jawogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mQXQoX293bmVyLCBibG9jay5udW1iZXIpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZi4gVGhpcyBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIEVSQzIwIGFwcHJvdmUgZnVuY3Rpb24KICAgIC8vLyAgdG8gYmUgYSBsaXR0bGUgYml0IHNhZmVyCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwoKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKChfYW1vdW50ID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgICAgIC8vIEFsZXJ0cyB0aGUgdG9rZW4gY29udHJvbGxlciBvZiB0aGUgYXBwcm92ZSBmdW5jdGlvbiBjYWxsCiAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsKICAgICAgICAgICAgcmVxdWlyZShUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikub25BcHByb3ZlKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KSk7CiAgICAgICAgfQoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZnVuY3Rpb24gbWFrZXMgaXQgZWFzeSB0byByZWFkIHRoZSBgYWxsb3dlZFtdYCBtYXAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBvZiBfb3duZXIgdGhhdCBfc3BlbmRlciBpcyBhbGxvd2VkCiAgICAvLy8gIHRvIHNwZW5kCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIKICAgICkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZiwgYW5kIHRoZW4gYSBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgaW4gdGhlIGNvbnRyYWN0IHRoYXQgaXMKICAgIC8vLyAgYmVpbmcgYXBwcm92ZWQsIGBfc3BlbmRlcmAuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIHVzZSB0aGVpciB0b2tlbnMgdG8KICAgIC8vLyAgaW50ZXJhY3Qgd2l0aCBjb250cmFjdHMgaW4gb25lIGZ1bmN0aW9uIGNhbGwgaW5zdGVhZCBvZiB0d28KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZnVuY3Rpb24gY2FsbCB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50LCBieXRlcyBfZXh0cmFEYXRhCiAgICApIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoYXBwcm92ZShfc3BlbmRlciwgX2Ftb3VudCkpOwoKICAgICAgICBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrKF9zcGVuZGVyKS5yZWNlaXZlQXBwcm92YWwoCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIF9hbW91bnQsCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9leHRyYURhdGEKICAgICAgICApOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc3kgdG8gZ2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zCiAgICAvLy8gQHJldHVybiBUaGUgdG90YWwgbnVtYmVyIG9mIHRva2VucwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5QXQoYmxvY2subnVtYmVyKTsKICAgIH0KCgovLy8vLy8vLy8vLy8vLy8vCi8vIFF1ZXJ5IGJhbGFuY2UgYW5kIHRvdGFsU3VwcGx5IGluIEhpc3RvcnkKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IFF1ZXJpZXMgdGhlIGJhbGFuY2Ugb2YgYF9vd25lcmAgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSBiYWxhbmNlIGlzIHF1ZXJpZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIGF0IGBfYmxvY2tOdW1iZXJgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2ZBdChhZGRyZXNzIF9vd25lciwgdWludCBfYmxvY2tOdW1iZXIpIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludCkgewoKICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSBiYWxhbmNlIG9mIHRoZSB0b2tlbiBpcwogICAgICAgIC8vICByZXF1ZXN0ZWQgYmVmb3JlIGEgY2hlY2sgcG9pbnQgd2FzIGV2ZXIgY3JlYXRlZCBmb3IgdGhpcyB0b2tlbiwgaXQKICAgICAgICAvLyAgcmVxdWlyZXMgdGhhdCB0aGUgYHBhcmVudFRva2VuLmJhbGFuY2VPZkF0YCBiZSBxdWVyaWVkIGF0IHRoZQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGF0IHRva2VuIGFzIHRoaXMgY29udGFpbnMgaW5pdGlhbCBiYWxhbmNlIG9mCiAgICAgICAgLy8gIHRoaXMgdG9rZW4KICAgICAgICBpZiAoKGJhbGFuY2VzW19vd25lcl0ubGVuZ3RoID09IDApCiAgICAgICAgICAgIHx8IChiYWxhbmNlc1tfb3duZXJdWzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICAgaWYgKGFkZHJlc3MocGFyZW50VG9rZW4pICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi5iYWxhbmNlT2ZBdChfb3duZXIsIG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEhhcyBubyBwYXJlbnQKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CgogICAgICAgIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGV4cGVjdGVkIGJhbGFuY2UgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQoYmFsYW5jZXNbX293bmVyXSwgX2Jsb2NrTnVtYmVyKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgVG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgLgogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSB0b3RhbFN1cHBseSBpcyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUaGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBhdCBgX2Jsb2NrTnVtYmVyYAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHlBdCh1aW50IF9ibG9ja051bWJlcikgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CgogICAgICAgIC8vIFRoZXNlIG5leHQgZmV3IGxpbmVzIGFyZSB1c2VkIHdoZW4gdGhlIHRvdGFsU3VwcGx5IG9mIHRoZSB0b2tlbiBpcwogICAgICAgIC8vICByZXF1ZXN0ZWQgYmVmb3JlIGEgY2hlY2sgcG9pbnQgd2FzIGV2ZXIgY3JlYXRlZCBmb3IgdGhpcyB0b2tlbiwgaXQKICAgICAgICAvLyAgcmVxdWlyZXMgdGhhdCB0aGUgYHBhcmVudFRva2VuLnRvdGFsU3VwcGx5QXRgIGJlIHF1ZXJpZWQgYXQgdGhlCiAgICAgICAgLy8gIGdlbmVzaXMgYmxvY2sgZm9yIHRoaXMgdG9rZW4gYXMgdGhhdCBjb250YWlucyB0b3RhbFN1cHBseSBvZiB0aGlzCiAgICAgICAgLy8gIHRva2VuIGF0IHRoaXMgYmxvY2sgbnVtYmVyLgogICAgICAgIGlmICgodG90YWxTdXBwbHlIaXN0b3J5Lmxlbmd0aCA9PSAwKQogICAgICAgICAgICB8fCAodG90YWxTdXBwbHlIaXN0b3J5WzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICAgaWYgKGFkZHJlc3MocGFyZW50VG9rZW4pICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi50b3RhbFN1cHBseUF0KG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CgogICAgICAgIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGV4cGVjdGVkIHRvdGFsU3VwcGx5IGR1cmluZyBub3JtYWwgc2l0dWF0aW9ucwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZUF0KHRvdGFsU3VwcGx5SGlzdG9yeSwgX2Jsb2NrTnVtYmVyKTsKICAgICAgICB9CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIENsb25lIFRva2VuIE1ldGhvZAovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ3JlYXRlcyBhIG5ldyBjbG9uZSB0b2tlbiB3aXRoIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBiZWluZwogICAgLy8vICB0aGlzIHRva2VuIGF0IGBfc25hcHNob3RCbG9ja2AKICAgIC8vLyBAcGFyYW0gX2Nsb25lVG9rZW5OYW1lIE5hbWUgb2YgdGhlIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9jbG9uZURlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIHNtYWxsZXN0IHVuaXQKICAgIC8vLyBAcGFyYW0gX2Nsb25lVG9rZW5TeW1ib2wgU3ltYm9sIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfc25hcHNob3RCbG9jayBCbG9jayB3aGVuIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHBhcmVudCB0b2tlbiBpcwogICAgLy8vICBjb3BpZWQgdG8gc2V0IHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbmV3IGNsb25lIHRva2VuOwogICAgLy8vICBpZiB0aGUgYmxvY2sgaXMgemVybyB0aGFuIHRoZSBhY3R1YWwgYmxvY2ssIHRoZSBjdXJyZW50IGJsb2NrIGlzIHVzZWQKICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgVHJ1ZSBpZiB0cmFuc2ZlcnMgYXJlIGFsbG93ZWQgaW4gdGhlIGNsb25lCiAgICAvLy8gQHJldHVybiBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IE1pbmlNZVRva2VuIENvbnRyYWN0CiAgICBmdW5jdGlvbiBjcmVhdGVDbG9uZVRva2VuKAogICAgICAgIHN0cmluZyBfY2xvbmVUb2tlbk5hbWUsCiAgICAgICAgdWludDggX2Nsb25lRGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfY2xvbmVUb2tlblN5bWJvbCwKICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLAogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQKICAgICAgICApIHJldHVybnMoYWRkcmVzcykgewogICAgICAgIGlmIChfc25hcHNob3RCbG9jayA9PSAwKSBfc25hcHNob3RCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBNaW5pTWVUb2tlbiBjbG9uZVRva2VuID0gdG9rZW5GYWN0b3J5LmNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLAogICAgICAgICAgICBfY2xvbmVUb2tlbk5hbWUsCiAgICAgICAgICAgIF9jbG9uZURlY2ltYWxVbml0cywKICAgICAgICAgICAgX2Nsb25lVG9rZW5TeW1ib2wsCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgICAgICk7CgogICAgICAgIGNsb25lVG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsKCiAgICAgICAgLy8gQW4gZXZlbnQgdG8gbWFrZSB0aGUgdG9rZW4gZWFzeSB0byBmaW5kIG9uIHRoZSBibG9ja2NoYWluCiAgICAgICAgTmV3Q2xvbmVUb2tlbihhZGRyZXNzKGNsb25lVG9rZW4pLCBfc25hcHNob3RCbG9jayk7CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoY2xvbmVUb2tlbik7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEdlbmVyYXRlIGFuZCBkZXN0cm95IHRva2VucwovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgR2VuZXJhdGVzIGBfYW1vdW50YCB0b2tlbnMgdGhhdCBhcmUgYXNzaWduZWQgdG8gYF9vd25lcmAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgZ2VuZXJhdGVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0b2tlbnMgYXJlIGdlbmVyYXRlZCBjb3JyZWN0bHkKICAgIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQKICAgICkgb25seUNvbnRyb2xsZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgY3VyVG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseSgpOwogICAgICAgIHJlcXVpcmUoY3VyVG90YWxTdXBwbHkgKyBfYW1vdW50ID49IGN1clRvdGFsU3VwcGx5KTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgdWludCBwcmV2aW91c0JhbGFuY2VUbyA9IGJhbGFuY2VPZihfb3duZXIpOwogICAgICAgIHJlcXVpcmUocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50ID49IHByZXZpb3VzQmFsYW5jZVRvKTsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5ICsgX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKDAsIF9vd25lciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8vLyBAbm90aWNlIEJ1cm5zIGBfYW1vdW50YCB0b2tlbnMgZnJvbSBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGxvc2UgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgdG8gYnVybgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdG9rZW5zIGFyZSBidXJuZWQgY29ycmVjdGx5CiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQKICAgICkgb25seUNvbnRyb2xsZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgY3VyVG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseSgpOwogICAgICAgIHJlcXVpcmUoY3VyVG90YWxTdXBwbHkgPj0gX2Ftb3VudCk7CiAgICAgICAgdWludCBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgcmVxdWlyZShwcmV2aW91c0JhbGFuY2VGcm9tID49IF9hbW91bnQpOwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3codG90YWxTdXBwbHlIaXN0b3J5LCBjdXJUb3RhbFN1cHBseSAtIF9hbW91bnQpOwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX293bmVyXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKF9vd25lciwgMCwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEVuYWJsZSB0b2tlbnMgdHJhbnNmZXJzCi8vLy8vLy8vLy8vLy8vLy8KCgogICAgLy8vIEBub3RpY2UgRW5hYmxlcyB0b2tlbiBob2xkZXJzIHRvIHRyYW5zZmVyIHRoZWlyIHRva2VucyBmcmVlbHkgaWYgdHJ1ZQogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUKICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVycyhib29sIF90cmFuc2ZlcnNFbmFibGVkKSBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb25zIHRvIHF1ZXJ5IGFuZCBzZXQgYSB2YWx1ZSBpbiBhIHNuYXBzaG90IGFycmF5Ci8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBgZ2V0VmFsdWVBdGAgcmV0cmlldmVzIHRoZSBudW1iZXIgb2YgdG9rZW5zIGF0IGEgZ2l2ZW4gYmxvY2sgbnVtYmVyCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIHZhbHVlcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHBhcmFtIF9ibG9jayBUaGUgYmxvY2sgbnVtYmVyIHRvIHJldHJpZXZlIHRoZSB2YWx1ZSBhdAogICAgLy8vIEByZXR1cm4gVGhlIG51bWJlciBvZiB0b2tlbnMgYmVpbmcgcXVlcmllZAogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdChDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfYmxvY2sKICAgICkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmIChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkgcmV0dXJuIDA7CgogICAgICAgIC8vIFNob3J0Y3V0IGZvciB0aGUgYWN0dWFsIHZhbHVlCiAgICAgICAgaWYgKF9ibG9jayA+PSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV0uZnJvbUJsb2NrKQogICAgICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoLTFdLnZhbHVlOwogICAgICAgIGlmIChfYmxvY2sgPCBjaGVja3BvaW50c1swXS5mcm9tQmxvY2spIHJldHVybiAwOwoKICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIG9mIHRoZSB2YWx1ZSBpbiB0aGUgYXJyYXkKICAgICAgICB1aW50IG1pbiA9IDA7CiAgICAgICAgdWludCBtYXggPSBjaGVja3BvaW50cy5sZW5ndGgtMTsKICAgICAgICB3aGlsZSAobWF4ID4gbWluKSB7CiAgICAgICAgICAgIHVpbnQgbWlkID0gKG1heCArIG1pbiArIDEpLyAyOwogICAgICAgICAgICBpZiAoY2hlY2twb2ludHNbbWlkXS5mcm9tQmxvY2s8PV9ibG9jaykgewogICAgICAgICAgICAgICAgbWluID0gbWlkOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWF4ID0gbWlkLTE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW21pbl0udmFsdWU7CiAgICB9CgogICAgLy8vIEBkZXYgYHVwZGF0ZVZhbHVlQXROb3dgIHVzZWQgdG8gdXBkYXRlIHRoZSBgYmFsYW5jZXNgIG1hcCBhbmQgdGhlCiAgICAvLy8gIGB0b3RhbFN1cHBseUhpc3RvcnlgCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIGRhdGEgYmVpbmcgdXBkYXRlZAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIG5ldyBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZUF0Tm93KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF92YWx1ZQogICAgKSBpbnRlcm5hbCAgewogICAgICAgIGlmICgoY2hlY2twb2ludHMubGVuZ3RoID09IDApCiAgICAgICAgfHwgKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtMV0uZnJvbUJsb2NrIDwgYmxvY2subnVtYmVyKSkgewogICAgICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2UgbmV3Q2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzWyBjaGVja3BvaW50cy5sZW5ndGgrKyBdOwogICAgICAgICAgICAgICBuZXdDaGVja1BvaW50LmZyb21CbG9jayA9ICB1aW50MTI4KGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgQ2hlY2twb2ludCBzdG9yYWdlIG9sZENoZWNrUG9pbnQgPSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV07CiAgICAgICAgICAgICAgIG9sZENoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBhZGRyZXNzIGlzIGEgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX2FkZHIgVGhlIGFkZHJlc3MgYmVpbmcgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBgX2FkZHJgIGlzIGEgY29udHJhY3QKICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBzaXplOwogICAgICAgIGlmIChfYWRkciA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2l6ZT4wOwogICAgfQoKICAgIC8vLyBAZGV2IEhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gYSBtaW4gYmV0d2VuIHRoZSB0d28gdWludHMKICAgIGZ1bmN0aW9uIG1pbih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRoZSBmYWxsYmFjayBmdW5jdGlvbjogSWYgdGhlIGNvbnRyYWN0J3MgY29udHJvbGxlciBoYXMgbm90IGJlZW4KICAgIC8vLyAgc2V0IHRvIDAsIHRoZW4gdGhlIGBwcm94eVBheW1lbnRgIG1ldGhvZCBpcyBjYWxsZWQgd2hpY2ggcmVsYXlzIHRoZQogICAgLy8vICBldGhlciBhbmQgY3JlYXRlcyB0b2tlbnMgYXMgZGVzY3JpYmVkIGluIHRoZSB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0CiAgICBmdW5jdGlvbiAoKSAgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShpc0NvbnRyYWN0KGNvbnRyb2xsZXIpKTsKICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5wcm94eVBheW1lbnQudmFsdWUobXNnLnZhbHVlKShtc2cuc2VuZGVyKSk7CiAgICB9CgovLy8vLy8vLy8vCi8vIFNhZmV0eSBNZXRob2RzCi8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBieSB0aGUgY29udHJvbGxlciB0byBleHRyYWN0IG1pc3Rha2VubHkKICAgIC8vLyAgc2VudCB0b2tlbnMgdG8gdGhpcyBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gX3Rva2VuIFRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdCB0aGF0IHlvdSB3YW50IHRvIHJlY292ZXIKICAgIC8vLyAgc2V0IHRvIDAgaW4gY2FzZSB5b3Ugd2FudCB0byBleHRyYWN0IGV0aGVyLgogICAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoYWRkcmVzcyBfdG9rZW4pIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBpZiAoX3Rva2VuID09IDB4MCkgewogICAgICAgICAgICBjb250cm9sbGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIE1pbmlNZVRva2VuIHRva2VuID0gTWluaU1lVG9rZW4oX3Rva2VuKTsKICAgICAgICB1aW50IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoY29udHJvbGxlciwgYmFsYW5jZSk7CiAgICAgICAgQ2xhaW1lZFRva2VucyhfdG9rZW4sIGNvbnRyb2xsZXIsIGJhbGFuY2UpOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBFdmVudHMKLy8vLy8vLy8vLy8vLy8vLwogICAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCBhZGRyZXNzIGluZGV4ZWQgX2NvbnRyb2xsZXIsIHVpbnQgX2Ftb3VudCk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX2Ftb3VudCk7CiAgICBldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7CiAgICBldmVudCBBcHByb3ZhbCgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX293bmVyLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwKICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICAgICApOwoKfQoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gTWluaU1lVG9rZW5GYWN0b3J5Ci8vLy8vLy8vLy8vLy8vLy8KCi8vLyBAZGV2IFRoaXMgY29udHJhY3QgaXMgdXNlZCB0byBnZW5lcmF0ZSBjbG9uZSBjb250cmFjdHMgZnJvbSBhIGNvbnRyYWN0LgovLy8gIEluIHNvbGlkaXR5IHRoaXMgaXMgdGhlIHdheSB0byBjcmVhdGUgYSBjb250cmFjdCBmcm9tIGEgY29udHJhY3Qgb2YgdGhlCi8vLyAgc2FtZSBjbGFzcwpjb250cmFjdCBNaW5pTWVUb2tlbkZhY3RvcnkgewoKICAgIC8vLyBAbm90aWNlIFVwZGF0ZSB0aGUgREFwcCBieSBjcmVhdGluZyBhIG5ldyB0b2tlbiB3aXRoIG5ldyBmdW5jdGlvbmFsaXRpZXMKICAgIC8vLyAgdGhlIG1zZy5zZW5kZXIgYmVjb21lcyB0aGUgY29udHJvbGxlciBvZiB0aGlzIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9wYXJlbnRUb2tlbiBBZGRyZXNzIG9mIHRoZSB0b2tlbiBiZWluZyBjbG9uZWQKICAgIC8vLyBAcGFyYW0gX3NuYXBzaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwKICAgIC8vLyAgZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuTmFtZSBOYW1lIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2RlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIElmIHRydWUsIHRva2VucyB3aWxsIGJlIGFibGUgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgdG9rZW4gY29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sCiAgICAgICAgdWludCBfc25hcHNob3RCbG9jaywKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wsCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgKSByZXR1cm5zIChNaW5pTWVUb2tlbikgCiAgICB7CiAgICAgICAgTWluaU1lVG9rZW4gbmV3VG9rZW4gPSBuZXcgTWluaU1lVG9rZW4oCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9wYXJlbnRUb2tlbiwKICAgICAgICAgICAgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgICAgIF90b2tlbk5hbWUsCiAgICAgICAgICAgIF9kZWNpbWFsVW5pdHMsCiAgICAgICAgICAgIF90b2tlblN5bWJvbCwKICAgICAgICAgICAgX3RyYW5zZmVyc0VuYWJsZWQKICAgICAgICAgICAgKTsKCiAgICAgICAgbmV3VG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsKICAgICAgICByZXR1cm4gbmV3VG9rZW47CiAgICB9Cn0KCgpjb250cmFjdCBTSFAgaXMgTWluaU1lVG9rZW4gewogICAgLy8gQGRldiBTSFAgY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIFNIUChhZGRyZXNzIF90b2tlbkZhY3RvcnkpCiAgICAgICAgICAgIE1pbmlNZVRva2VuKAogICAgICAgICAgICAgICAgX3Rva2VuRmFjdG9yeSwKICAgICAgICAgICAgICAgIDB4MCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHBhcmVudCB0b2tlbgogICAgICAgICAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gc25hcHNob3QgYmxvY2sgbnVtYmVyIGZyb20gcGFyZW50CiAgICAgICAgICAgICAgICAiU2hhcnBlIFBsYXRmb3JtIFRva2VuIiwgICAgICAgICAvLyBUb2tlbiBuYW1lCiAgICAgICAgICAgICAgICAxOCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWNpbWFscwogICAgICAgICAgICAgICAgIlNIUCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ltYm9sCiAgICAgICAgICAgICAgICB0cnVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmFibGUgdHJhbnNmZXJzCiAgICAgICAgICAgICkge30KfQoKCgpjb250cmFjdCBUb2tlblNhbGUgaXMgT3duZWQsIFRva2VuQ29udHJvbGxlciB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgU0hQIHB1YmxpYyBzaHA7CiAgICBUcnVzdGVlIHB1YmxpYyB0cnVzdGVlOwoKICAgIGFkZHJlc3MgcHVibGljIGV0aGVyRXNjcm93QWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGJvdW50eUFkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyB0cnVzdGVlQWRkcmVzczsKCiAgICB1aW50MjU2IHB1YmxpYyBmb3VuZGVyVG9rZW5Db3VudCA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyByZXNlcnZlVG9rZW5Db3VudCA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyBzaHBFeGNoYW5nZVJhdGUgPSAwOwoKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIENBTExFUl9FWENIQU5HRV9TSEFSRSA9IDQwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgUkVTRVJWRV9FWENIQU5HRV9TSEFSRSA9IDMwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgRk9VTkRFUl9FWENIQU5HRV9TSEFSRSA9IDIwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgQk9VTlRZX0VYQ0hBTkdFX1NIQVJFID0gMTA7CiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBNQVhfR0FTX1BSSUNFID0gNTAwMDAwMDAwMDA7CgogICAgYm9vbCBwdWJsaWMgcGF1c2VkOwogICAgYm9vbCBwdWJsaWMgY2xvc2VkOwogICAgYm9vbCBwdWJsaWMgYWxsb3dUcmFuc2ZlcjsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGFwcHJvdmVkQWRkcmVzc2VzOwoKICAgIGV2ZW50IENvbnRyaWJ1dGlvbih1aW50MjU2IGV0aGVyQW1vdW50LCBhZGRyZXNzIF9jYWxsZXIpOwogICAgZXZlbnQgTmV3U2FsZShhZGRyZXNzIGluZGV4ZWQgY2FsbGVyLCB1aW50MjU2IGV0aGVyQW1vdW50LCB1aW50MjU2IHRva2Vuc0dlbmVyYXRlZCk7CiAgICBldmVudCBTYWxlQ2xvc2VkKHVpbnQyNTYgd2hlbik7CiAgICAKICAgIG1vZGlmaWVyIG5vdFBhdXNlZCgpIHsKICAgICAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90Q2xvc2VkKCkgewogICAgICAgIHJlcXVpcmUoIWNsb3NlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc1ZhbGlkYXRlZCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoIWlzQ29udHJhY3QobXNnLnNlbmRlcikpOyAKICAgICAgICByZXF1aXJlKHR4Lmdhc3ByaWNlIDw9IE1BWF9HQVNfUFJJQ0UpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gc2V0U2hwRXhjaGFuZ2VSYXRlKHVpbnQyNTYgX3NocEV4Y2hhbmdlUmF0ZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgc2hwRXhjaGFuZ2VSYXRlID0gX3NocEV4Y2hhbmdlUmF0ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRBbGxvd1RyYW5zZmVyKGJvb2wgX2FsbG93VHJhbnNmZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGFsbG93VHJhbnNmZXIgPSBfYWxsb3dUcmFuc2ZlcjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBzZW5kcyB0aGUgRXRoZXIgcmVjZWl2ZWQgdG8gdGhlIEV0aGVyIGVzY3JvdyBhZGRyZXNzCiAgICAvLy8gYW5kIGdlbmVyYXRlcyB0aGUgY2FsY3VsYXRlZCBudW1iZXIgb2YgU0hQIHRva2Vucywgc2VuZGluZyB0aGVtIHRvIHRoZSBjYWxsZXIncyBhZGRyZXNzLgogICAgLy8vIEl0IGFsc28gZ2VuZXJhdGVzIHRoZSBmb3VuZGVyJ3MgdG9rZW5zIGFuZCB0aGUgcmVzZXJ2ZSB0b2tlbnMgYXQgdGhlIHNhbWUgdGltZS4KICAgIGZ1bmN0aW9uIGRvQnV5KAogICAgICAgIGFkZHJlc3MgX2NhbGxlciwKICAgICAgICB1aW50MjU2IGV0aGVyQW1vdW50CiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgIHsKCiAgICAgICAgQ29udHJpYnV0aW9uKGV0aGVyQW1vdW50LCBfY2FsbGVyKTsKCiAgICAgICAgdWludDI1NiBjYWxsZXJFeGNoYW5nZVJhdGUgPSBzaHBFeGNoYW5nZVJhdGUubXVsKENBTExFUl9FWENIQU5HRV9TSEFSRSkuZGl2KDEwMCk7CiAgICAgICAgdWludDI1NiByZXNlcnZlRXhjaGFuZ2VSYXRlID0gc2hwRXhjaGFuZ2VSYXRlLm11bChSRVNFUlZFX0VYQ0hBTkdFX1NIQVJFKS5kaXYoMTAwKTsKICAgICAgICB1aW50MjU2IGZvdW5kZXJFeGNoYW5nZVJhdGUgPSBzaHBFeGNoYW5nZVJhdGUubXVsKEZPVU5ERVJfRVhDSEFOR0VfU0hBUkUpLmRpdigxMDApOwogICAgICAgIHVpbnQyNTYgYm91bnR5RXhjaGFuZ2VSYXRlID0gc2hwRXhjaGFuZ2VSYXRlLm11bChCT1VOVFlfRVhDSEFOR0VfU0hBUkUpLmRpdigxMDApOwoKICAgICAgICB1aW50MjU2IGNhbGxlclRva2VucyA9IGV0aGVyQW1vdW50Lm11bChjYWxsZXJFeGNoYW5nZVJhdGUpOwogICAgICAgIHVpbnQyNTYgY2FsbGVyVG9rZW5zV2l0aERpc2NvdW50ID0gYXBwbHlEaXNjb3VudChldGhlckFtb3VudCwgY2FsbGVyVG9rZW5zKTsKCiAgICAgICAgdWludDI1NiByZXNlcnZlVG9rZW5zID0gZXRoZXJBbW91bnQubXVsKHJlc2VydmVFeGNoYW5nZVJhdGUpOwogICAgICAgIHVpbnQyNTYgZm91bmRlclRva2VucyA9IGV0aGVyQW1vdW50Lm11bChmb3VuZGVyRXhjaGFuZ2VSYXRlKTsKICAgICAgICB1aW50MjU2IGJvdW50eVRva2VucyA9IGV0aGVyQW1vdW50Lm11bChib3VudHlFeGNoYW5nZVJhdGUpOwogICAgICAgIHVpbnQyNTYgdmVzdGluZ1Rva2VucyA9IGZvdW5kZXJUb2tlbnMuYWRkKHJlc2VydmVUb2tlbnMpOwoKICAgICAgICBmb3VuZGVyVG9rZW5Db3VudCA9IGZvdW5kZXJUb2tlbkNvdW50LmFkZChmb3VuZGVyVG9rZW5zKTsKICAgICAgICByZXNlcnZlVG9rZW5Db3VudCA9IHJlc2VydmVUb2tlbkNvdW50LmFkZChyZXNlcnZlVG9rZW5zKTsKCiAgICAgICAgc2hwLmdlbmVyYXRlVG9rZW5zKF9jYWxsZXIsIGNhbGxlclRva2Vuc1dpdGhEaXNjb3VudCk7CiAgICAgICAgc2hwLmdlbmVyYXRlVG9rZW5zKGJvdW50eUFkZHJlc3MsIGJvdW50eVRva2Vucyk7CiAgICAgICAgc2hwLmdlbmVyYXRlVG9rZW5zKHRydXN0ZWVBZGRyZXNzLCB2ZXN0aW5nVG9rZW5zKTsKCiAgICAgICAgTmV3U2FsZShfY2FsbGVyLCBldGhlckFtb3VudCwgY2FsbGVyVG9rZW5zV2l0aERpc2NvdW50KTsKICAgICAgICBOZXdTYWxlKHRydXN0ZWVBZGRyZXNzLCBldGhlckFtb3VudCwgdmVzdGluZ1Rva2Vucyk7CiAgICAgICAgTmV3U2FsZShib3VudHlBZGRyZXNzLCBldGhlckFtb3VudCwgYm91bnR5VG9rZW5zKTsKCiAgICAgICAgZXRoZXJFc2Nyb3dBZGRyZXNzLnRyYW5zZmVyKGV0aGVyQW1vdW50KTsKICAgICAgICB1cGRhdGVDb3VudGVycyhldGhlckFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIHRoZSBvd25lciB0byBtYW51YWxseSBtaW50IHNvbWUgU0hQIHRvIGFuIGFkZHJlc3MgaWYgc29tZXRoaW5nIGdvZXMgd3JvbmcKICAgIC8vLyBAcGFyYW0gX3Rva2VucyB0aGUgbnVtYmVyIG9mIHRva2VucyB0byBtaW50CiAgICAvLy8gQHBhcmFtIF9kZXN0aW5hdGlvbiB0aGUgYWRkcmVzcyB0byBzZW5kIHRoZSB0b2tlbnMgdG8KICAgIGZ1bmN0aW9uIG1pbnRUb2tlbnMoCiAgICAgICAgdWludDI1NiBfdG9rZW5zLCAKICAgICAgICBhZGRyZXNzIF9kZXN0aW5hdGlvbgogICAgKSAKICAgICAgICBvbmx5T3duZXIgCiAgICB7CiAgICAgICAgc2hwLmdlbmVyYXRlVG9rZW5zKF9kZXN0aW5hdGlvbiwgX3Rva2Vucyk7CiAgICAgICAgTmV3U2FsZShfZGVzdGluYXRpb24sIDAsIF90b2tlbnMpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEFwcGxpZXMgdGhlIGRpc2NvdW50IGJhc2VkIG9uIHRoZSBkaXNjb3VudCB0aWVycwogICAgLy8vIEBwYXJhbSBfZXRoZXJBbW91bnQgVGhlIGFtb3VudCBvZiBldGhlciB1c2VkIHRvIGV2YWx1YXRlIHRoZSB0aWVyIHRoZSBjb250cmlidXRpb24gbGllcyB3aXRoaW4KICAgIC8vLyBAcGFyYW0gX2NvbnRyaWJ1dG9yVG9rZW5zIFRoZSB0b2tlbnMgYWxsb2NhdGVkIGJhc2VkIG9uIHRoZSBjb250cmlidXRpb24KICAgIGZ1bmN0aW9uIGFwcGx5RGlzY291bnQodWludDI1NiBfZXRoZXJBbW91bnQsIHVpbnQyNTYgX2NvbnRyaWJ1dG9yVG9rZW5zKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgICAvLy8gQG5vdGljZSBVcGRhdGVzIHRoZSBjb3VudGVycyBmb3IgdGhlIGFtb3VudCBvZiBFdGhlciBwYWlkCiAgICAvLy8gQHBhcmFtIF9ldGhlckFtb3VudCB0aGUgYW1vdW50IG9mIEV0aGVyIHBhaWQKICAgIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXJzKHVpbnQyNTYgX2V0aGVyQW1vdW50KSBpbnRlcm5hbDsKICAgIAogICAgLy8vIEBub3RpY2UgUGFyZW50IGNvbnN0cnVjdG9yLiBUaGlzIG5lZWRzIHRvIGJlIGV4dGVuZGVkIGZyb20gdGhlIGNoaWxkIGNvbnRyYWN0cwogICAgLy8vIEBwYXJhbSBfZXRoZXJFc2Nyb3dBZGRyZXNzIHRoZSBhZGRyZXNzIHRoYXQgd2lsbCBob2xkIHRoZSBjcm93ZCBmdW5kZWQgRXRoZXIKICAgIC8vLyBAcGFyYW0gX2JvdW50eUFkZHJlc3MgdGhlIGFkZHJlc3MgdGhhdCB3aWxsIGhvbGQgdGhlIGJvdW50eSBzY2hlbWUgU0hQCiAgICAvLy8gQHBhcmFtIF90cnVzdGVlQWRkcmVzcyB0aGUgYWRkcmVzcyB0aGF0IHdpbGwgaG9sZCB0aGUgdmVzdGluZyBTSFAKICAgIC8vLyBAcGFyYW0gX3NocEV4Y2hhbmdlUmF0ZSB0aGUgaW5pdGlhbCBTSFAgZXhjaGFuZ2UgcmF0ZQogICAgZnVuY3Rpb24gVG9rZW5TYWxlICgKICAgICAgICBhZGRyZXNzIF9ldGhlckVzY3Jvd0FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfYm91bnR5QWRkcmVzcywKICAgICAgICBhZGRyZXNzIF90cnVzdGVlQWRkcmVzcywKICAgICAgICB1aW50MjU2IF9zaHBFeGNoYW5nZVJhdGUKICAgICkgewogICAgICAgIGV0aGVyRXNjcm93QWRkcmVzcyA9IF9ldGhlckVzY3Jvd0FkZHJlc3M7CiAgICAgICAgYm91bnR5QWRkcmVzcyA9IF9ib3VudHlBZGRyZXNzOwogICAgICAgIHRydXN0ZWVBZGRyZXNzID0gX3RydXN0ZWVBZGRyZXNzOwogICAgICAgIHNocEV4Y2hhbmdlUmF0ZSA9IF9zaHBFeGNoYW5nZVJhdGU7CiAgICAgICAgdHJ1c3RlZSA9IFRydXN0ZWUoX3RydXN0ZWVBZGRyZXNzKTsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIGNsb3NlZCA9IGZhbHNlOwogICAgICAgIGFsbG93VHJhbnNmZXIgPSBmYWxzZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZXRzIHRoZSBTSFAgdG9rZW4gc21hcnQgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX3NocCB0aGUgU0hQIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICAgIGZ1bmN0aW9uIHNldFNocChhZGRyZXNzIF9zaHApIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHNocCA9IFNIUChfc2hwKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSB0b2tlbiBzbWFydCBjb250cmFjdCBhbmQgdHJ1c3RlZQogICAgLy8vIEBwYXJhbSBfdG9rZW5Db250cm9sbGVyIHRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgdG9rZW4gY29udHJvbGxlcgogICAgLy8vIEBwYXJhbSBfdHJ1c3RlZU93bmVyIHRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgdHJ1c3RlZSBvd25lcgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfdG9rZW5Db250cm9sbGVyLCBhZGRyZXNzIF90cnVzdGVlT3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoY2xvc2VkKTsKICAgICAgICByZXF1aXJlKF90b2tlbkNvbnRyb2xsZXIgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF90cnVzdGVlT3duZXIgIT0gMHgwKTsKICAgICAgICBzaHAuY2hhbmdlQ29udHJvbGxlcihfdG9rZW5Db250cm9sbGVyKTsKICAgICAgICB0cnVzdGVlLmNoYW5nZU93bmVyKF90cnVzdGVlT3duZXIpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEludGVybmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBhZGRyZXNzIGlzIGEgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX2NhbGxlciBUaGUgYWRkcmVzcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIGBjYWxsZXJgIGlzIGEgY29udHJhY3QKICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfY2FsbGVyKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBzaXplOwogICAgICAgIGFzc2VtYmx5IHsgc2l6ZSA6PSBleHRjb2Rlc2l6ZShfY2FsbGVyKSB9CiAgICAgICAgcmV0dXJuIHNpemUgPiAwOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFBhdXNlcyB0aGUgY29udHJpYnV0aW9uIGlmIHRoZXJlIGlzIGFueSBpc3N1ZQogICAgZnVuY3Rpb24gcGF1c2VDb250cmlidXRpb24oKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlc3VtZXMgdGhlIGNvbnRyaWJ1dGlvbgogICAgZnVuY3Rpb24gcmVzdW1lQ29udHJpYnV0aW9uKCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICB9CgogICAgLy8vLy8vLy8vLwogICAgLy8gTWluaU1lIENvbnRyb2xsZXIgSW50ZXJmYWNlIGZ1bmN0aW9ucwogICAgLy8vLy8vLy8vLwoKICAgIC8vIEluIGJldHdlZW4gdGhlIG9mZmVyaW5nIGFuZCB0aGUgbmV0d29yay4gRGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsb3dpbmcgdG9rZW4gdHJhbnNmZXJzLgogICAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYWxsb3dUcmFuc2ZlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBvblRyYW5zZmVyKGFkZHJlc3MsIGFkZHJlc3MsIHVpbnQyNTYpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFsbG93VHJhbnNmZXI7CiAgICB9CgogICAgZnVuY3Rpb24gb25BcHByb3ZlKGFkZHJlc3MsIGFkZHJlc3MsIHVpbnQyNTYpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFsbG93VHJhbnNmZXI7CiAgICB9Cn0KCgoKY29udHJhY3QgU2hhcnBlQ3Jvd2RzYWxlIGlzIFRva2VuU2FsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKIAogICAgdWludDI1NiBwdWJsaWMgZXRoZXJQYWlkID0gMDsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsQ29udHJpYnV0aW9ucyA9IDA7CgogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgRklSU1RfVElFUl9ESVNDT1VOVCA9IDU7CiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBTRUNPTkRfVElFUl9ESVNDT1VOVCA9IDEwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgVEhJUkRfVElFUl9ESVNDT1VOVCA9IDIwOwogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgRk9VUlRIX1RJRVJfRElTQ09VTlQgPSAzMDsKCiAgICB1aW50MjU2IHB1YmxpYyBtaW5QcmVzYWxlQ29udHJpYnV0aW9uRXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBtYXhQcmVzYWxlQ29udHJpYnV0aW9uRXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBtaW5EaXNjb3VudEV0aGVyOwogICAgdWludDI1NiBwdWJsaWMgZmlyc3RUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBzZWNvbmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyB0aGlyZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlcjsKICAgIAogICAgZW51bSBDb250cmlidXRpb25TdGF0ZSB7UGF1c2VkLCBSZXN1bWVkfQogICAgZXZlbnQgQ29udHJpYnV0aW9uU3RhdGVDaGFuZ2VkKGFkZHJlc3MgY2FsbGVyLCBDb250cmlidXRpb25TdGF0ZSBjb250cmlidXRpb25TdGF0ZSk7CiAgICBlbnVtIEFsbG93ZWRDb250cmlidXRpb25TdGF0ZSB7V2hpdGVsaXN0ZWQsIE5vdFdoaXRlbGlzdGVkLCBBYm92ZVdoaXRlbGlzdGVkLCBCZWxvd1doaXRlbGlzdGVkLCBXaGl0ZWxpc3RDbG9zZWR9CiAgICBldmVudCBBbGxvd2VkQ29udHJpYnV0aW9uQ2hlY2sodWludDI1NiBjb250cmlidXRpb24sIEFsbG93ZWRDb250cmlidXRpb25TdGF0ZSBhbGxvd2VkQ29udHJpYnV0aW9uU3RhdGUpOwogICAgZXZlbnQgVmFsaWRDb250cmlidXRpb25DaGVjayh1aW50MjU2IGNvbnRyaWJ1dGlvbiwgYm9vbCBpc0NvbnRyaWJ1dGlvblZhbGlkKTsKICAgIGV2ZW50IERpc2NvdW50QXBwbGllZCh1aW50MjU2IGV0aGVyQW1vdW50LCB1aW50MjU2IHRva2VucywgdWludDI1NiBkaXNjb3VudCk7CiAgICBldmVudCBDb250cmlidXRpb25SZWZ1bmQodWludDI1NiBldGhlckFtb3VudCwgYWRkcmVzcyBfY2FsbGVyKTsKICAgIGV2ZW50IENvdW50ZXJzVXBkYXRlZCh1aW50MjU2IHByZVNhbGVFdGhlclBhaWQsIHVpbnQyNTYgdG90YWxDb250cmlidXRpb25zKTsKICAgIGV2ZW50IFdoaXRlbGlzdGVkVXBkYXRlZCh1aW50MjU2IHBsYW5uZWRDb250cmlidXRpb24sIGJvb2wgY29udHJpYnV0ZWQpOwogICAgZXZlbnQgV2hpdGVsaXN0ZWRDb3VudGVyVXBkYXRlZCh1aW50MjU2IHdoaXRlbGlzdGVkUGxhbm5lZENvbnRyaWJ1dGlvbnMsIHVpbnQyNTYgdXNlZENvbnRyaWJ1dGlvbnMpOwoKICAgIG1vZGlmaWVyIGlzVmFsaWRDb250cmlidXRpb24oKSB7CiAgICAgICAgcmVxdWlyZSh2YWxpZENvbnRyaWJ1dGlvbigpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGNhbGxlZCBvbmx5IG9uY2Ugd2hlbiB0aGUgY29udHJhY3QgaXMgaW5pdGlhbGl6ZWQKICAgIC8vLyBAcGFyYW0gX2V0aGVyRXNjcm93QWRkcmVzcyB0aGUgYWRkcmVzcyB0aGF0IHdpbGwgaG9sZCB0aGUgY3Jvd2QgZnVuZGVkIEV0aGVyCiAgICAvLy8gQHBhcmFtIF9ib3VudHlBZGRyZXNzIHRoZSBhZGRyZXNzIHRoYXQgd2lsbCBob2xkIHRoZSBib3VudHkgU0hQCiAgICAvLy8gQHBhcmFtIF90cnVzdGVlQWRkcmVzcyB0aGUgYWRkcmVzcyB0aGF0IHdpbGwgaG9sZCB0aGUgdmVzdGluZyBTSFAKICAgIC8vLyBAcGFyYW0gX21pbkRpc2NvdW50RXRoZXIgTG93ZXIgZGlzY291bnQgbGltaXQgKFdFSSkKICAgIC8vLyBAcGFyYW0gX2ZpcnN0VGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyIEZpcnN0IGRpc2NvdW50IGxpbWl0cyAoV0VJKQogICAgLy8vIEBwYXJhbSBfc2Vjb25kVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyIFNlY29uZCBkaXNjb3VudCBsaW1pdHMgKFdFSSkKICAgIC8vLyBAcGFyYW0gX3RoaXJkVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyIFRoaXJkIGRpc2NvdW50IGxpbWl0cyAoV0VJKQogICAgLy8vIEBwYXJhbSBfbWluUHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyIExvd2VyIGNvbnRyaWJ1dGlvbiByYW5nZSAoV0VJKQogICAgLy8vIEBwYXJhbSBfbWF4UHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyIFVwcGVyIGNvbnRyaWJ1dGlvbiByYW5nZSAoV0VJKQogICAgLy8vIEBwYXJhbSBfc2hwRXhjaGFuZ2VSYXRlIFRoZSBpbml0aWFsIFNIUCBleGNoYW5nZSByYXRlCiAgICBmdW5jdGlvbiBTaGFycGVDcm93ZHNhbGUoCiAgICAgICAgYWRkcmVzcyBfZXRoZXJFc2Nyb3dBZGRyZXNzLAogICAgICAgIGFkZHJlc3MgX2JvdW50eUFkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBfdHJ1c3RlZUFkZHJlc3MsCiAgICAgICAgdWludDI1NiBfbWluRGlzY291bnRFdGhlciwKICAgICAgICB1aW50MjU2IF9maXJzdFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciwKICAgICAgICB1aW50MjU2IF9zZWNvbmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIsCiAgICAgICAgdWludDI1NiBfdGhpcmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIsCiAgICAgICAgdWludDI1NiBfbWluUHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyLAogICAgICAgIHVpbnQyNTYgX21heFByZXNhbGVDb250cmlidXRpb25FdGhlciwKICAgICAgICB1aW50MjU2IF9zaHBFeGNoYW5nZVJhdGUpCiAgICAgICAgVG9rZW5TYWxlICgKICAgICAgICAgICAgX2V0aGVyRXNjcm93QWRkcmVzcywKICAgICAgICAgICAgX2JvdW50eUFkZHJlc3MsCiAgICAgICAgICAgIF90cnVzdGVlQWRkcmVzcywKICAgICAgICAgICAgX3NocEV4Y2hhbmdlUmF0ZQogICAgICAgICkKICAgIHsKICAgICAgICBtaW5EaXNjb3VudEV0aGVyID0gX21pbkRpc2NvdW50RXRoZXI7CiAgICAgICAgZmlyc3RUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIgPSBfZmlyc3RUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXI7CiAgICAgICAgc2Vjb25kVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyID0gX3NlY29uZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlcjsKICAgICAgICB0aGlyZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciA9IF90aGlyZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlcjsKICAgICAgICBtaW5QcmVzYWxlQ29udHJpYnV0aW9uRXRoZXIgPSBfbWluUHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyOwogICAgICAgIG1heFByZXNhbGVDb250cmlidXRpb25FdGhlciA9IF9tYXhQcmVzYWxlQ29udHJpYnV0aW9uRXRoZXI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIHRoZSBvd25lciB0byBwZWcgRXRoZXIgdmFsdWVzCiAgICAvLy8gQHBhcmFtIF9taW5EaXNjb3VudEV0aGVyIExvd2VyIGRpc2NvdW50IGxpbWl0IChXRUkpCiAgICAvLy8gQHBhcmFtIF9maXJzdFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciBGaXJzdCBkaXNjb3VudCBsaW1pdHMgKFdFSSkKICAgIC8vLyBAcGFyYW0gX3NlY29uZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciBTZWNvbmQgZGlzY291bnQgbGltaXRzIChXRUkpCiAgICAvLy8gQHBhcmFtIF90aGlyZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciBUaGlyZCBkaXNjb3VudCBsaW1pdHMgKFdFSSkKICAgIC8vLyBAcGFyYW0gX21pblByZXNhbGVDb250cmlidXRpb25FdGhlciBMb3dlciBjb250cmlidXRpb24gcmFuZ2UgKFdFSSkKICAgIC8vLyBAcGFyYW0gX21heFByZXNhbGVDb250cmlidXRpb25FdGhlciBVcHBlciBjb250cmlidXRpb24gcmFuZ2UgKFdFSSkKICAgIGZ1bmN0aW9uIHBlZ0V0aGVyVmFsdWVzKAogICAgICAgIHVpbnQyNTYgX21pbkRpc2NvdW50RXRoZXIsCiAgICAgICAgdWludDI1NiBfZmlyc3RUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIsCiAgICAgICAgdWludDI1NiBfc2Vjb25kVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyLAogICAgICAgIHVpbnQyNTYgX3RoaXJkVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyLAogICAgICAgIHVpbnQyNTYgX21pblByZXNhbGVDb250cmlidXRpb25FdGhlciwKICAgICAgICB1aW50MjU2IF9tYXhQcmVzYWxlQ29udHJpYnV0aW9uRXRoZXIKICAgICkgCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgbWluRGlzY291bnRFdGhlciA9IF9taW5EaXNjb3VudEV0aGVyOwogICAgICAgIGZpcnN0VGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyID0gX2ZpcnN0VGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyOwogICAgICAgIHNlY29uZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlciA9IF9zZWNvbmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXI7CiAgICAgICAgdGhpcmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIgPSBfdGhpcmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXI7CiAgICAgICAgbWluUHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyID0gX21pblByZXNhbGVDb250cmlidXRpb25FdGhlcjsKICAgICAgICBtYXhQcmVzYWxlQ29udHJpYnV0aW9uRXRoZXIgPSBfbWF4UHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRoaXMgZnVuY3Rpb24gZmlyZXMgd2hlbiBzb21lb25lIHNlbmRzIEV0aGVyIHRvIHRoZSBhZGRyZXNzIG9mIHRoaXMgY29udHJhY3QuCiAgICAvLy8gVGhlIEVUSCB3aWxsIGJlIGV4Y2hhbmdlZCBmb3IgU0hQIGFuZCBpdCBlbnN1cmVzIGNvbnRyaWJ1dGlvbnMgY2Fubm90IGJlIG1hZGUgZnJvbSBrbm93biBhZGRyZXNzZXMuCiAgICBmdW5jdGlvbiAoKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICBpc1ZhbGlkYXRlZAogICAgICAgIG5vdENsb3NlZAogICAgICAgIG5vdFBhdXNlZAogICAgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CiAgICAgICAgZG9CdXkobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBQdWJsaWMgZnVuY3Rpb24gZW5hYmxlcyBjbG9zaW5nIG9mIHRoZSBwcmUtc2FsZSBtYW51YWxseSBpZiBuZWNlc3NhcnkKICAgIGZ1bmN0aW9uIGNsb3NlU2FsZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGNsb3NlZCA9IHRydWU7CiAgICAgICAgU2FsZUNsb3NlZChub3cpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEVuc3VyZSB0aGUgY29udHJpYnV0aW9uIGlzIHZhbGlkCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHdoZXRoZXIgdGhlIGNvbnRyaWJ1dGlvbiBpcyB2YWxpZCBvciBub3QKICAgIGZ1bmN0aW9uIHZhbGlkQ29udHJpYnV0aW9uKCkgcHJpdmF0ZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBpc0NvbnRyaWJ1dGlvblZhbGlkID0gbXNnLnZhbHVlID49IG1pblByZXNhbGVDb250cmlidXRpb25FdGhlciAmJiBtc2cudmFsdWUgPD0gbWF4UHJlc2FsZUNvbnRyaWJ1dGlvbkV0aGVyOwogICAgICAgIFZhbGlkQ29udHJpYnV0aW9uQ2hlY2sobXNnLnZhbHVlLCBpc0NvbnRyaWJ1dGlvblZhbGlkKTsKICAgICAgICByZXR1cm4gaXNDb250cmlidXRpb25WYWxpZDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBcHBsaWVzIHRoZSBkaXNjb3VudCBiYXNlZCBvbiB0aGUgZGlzY291bnQgdGllcnMKICAgIC8vLyBAcGFyYW0gX2V0aGVyQW1vdW50IFRoZSBhbW91bnQgb2YgZXRoZXIgdXNlZCB0byBldmFsdWF0ZSB0aGUgdGllciB0aGUgY29udHJpYnV0aW9uIGxpZXMgd2l0aGluCiAgICAvLy8gQHBhcmFtIF9jb250cmlidXRvclRva2VucyBUaGUgdG9rZW5zIGFsbG9jYXRlZCBiYXNlZCBvbiB0aGUgY29udHJpYnV0aW9uCiAgICBmdW5jdGlvbiBhcHBseURpc2NvdW50KAogICAgICAgIHVpbnQyNTYgX2V0aGVyQW1vdW50LCAKICAgICAgICB1aW50MjU2IF9jb250cmlidXRvclRva2VucwogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KQogICAgewoKICAgICAgICB1aW50MjU2IGRpc2NvdW50ID0gMDsKCiAgICAgICAgaWYgKF9ldGhlckFtb3VudCA+IG1pbkRpc2NvdW50RXRoZXIgJiYgX2V0aGVyQW1vdW50IDw9IGZpcnN0VGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyKSB7CiAgICAgICAgICAgIGRpc2NvdW50ID0gX2NvbnRyaWJ1dG9yVG9rZW5zLm11bChGSVJTVF9USUVSX0RJU0NPVU5UKS5kaXYoMTAwKTsgLy8gNSUKICAgICAgICB9IGVsc2UgaWYgKF9ldGhlckFtb3VudCA+IGZpcnN0VGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyICYmIF9ldGhlckFtb3VudCA8PSBzZWNvbmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIpIHsKICAgICAgICAgICAgZGlzY291bnQgPSBfY29udHJpYnV0b3JUb2tlbnMubXVsKFNFQ09ORF9USUVSX0RJU0NPVU5UKS5kaXYoMTAwKTsgLy8gMTAlCiAgICAgICAgfSBlbHNlIGlmIChfZXRoZXJBbW91bnQgPiBzZWNvbmRUaWVyRGlzY291bnRVcHBlckxpbWl0RXRoZXIgJiYgX2V0aGVyQW1vdW50IDw9IHRoaXJkVGllckRpc2NvdW50VXBwZXJMaW1pdEV0aGVyKSB7CiAgICAgICAgICAgIGRpc2NvdW50ID0gX2NvbnRyaWJ1dG9yVG9rZW5zLm11bChUSElSRF9USUVSX0RJU0NPVU5UKS5kaXYoMTAwKTsgLy8gMjAlCiAgICAgICAgfSBlbHNlIGlmIChfZXRoZXJBbW91bnQgPiB0aGlyZFRpZXJEaXNjb3VudFVwcGVyTGltaXRFdGhlcikgewogICAgICAgICAgICBkaXNjb3VudCA9IF9jb250cmlidXRvclRva2Vucy5tdWwoRk9VUlRIX1RJRVJfRElTQ09VTlQpLmRpdigxMDApOyAvLyAzMCUKICAgICAgICB9CgogICAgICAgIERpc2NvdW50QXBwbGllZChfZXRoZXJBbW91bnQsIF9jb250cmlidXRvclRva2VucywgZGlzY291bnQpOwogICAgICAgIHJldHVybiBkaXNjb3VudC5hZGQoX2NvbnRyaWJ1dG9yVG9rZW5zKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBVcGRhdGVzIHRoZSBjb3VudGVycyBmb3IgdGhlIGFtb3VudCBvZiBFdGhlciBwYWlkCiAgICAvLy8gQHBhcmFtIF9ldGhlckFtb3VudCB0aGUgYW1vdW50IG9mIEV0aGVyIHBhaWQKICAgIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXJzKHVpbnQyNTYgX2V0aGVyQW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgZXRoZXJQYWlkID0gZXRoZXJQYWlkLmFkZChfZXRoZXJBbW91bnQpOwogICAgICAgIHRvdGFsQ29udHJpYnV0aW9ucyA9IHRvdGFsQ29udHJpYnV0aW9ucy5hZGQoMSk7CiAgICAgICAgQ291bnRlcnNVcGRhdGVkKGV0aGVyUGFpZCwgX2V0aGVyQW1vdW50KTsKICAgIH0KfQ=='.
	

]
