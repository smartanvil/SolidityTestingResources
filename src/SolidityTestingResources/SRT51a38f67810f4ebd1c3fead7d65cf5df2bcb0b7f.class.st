Class {
	#name : #SRT51a38f67810f4ebd1c3fead7d65cf5df2bcb0b7f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51a38f67810f4ebd1c3fead7d65cf5df2bcb0b7f >> base64 [
	^ ''.
	

]
