Class {
	#name : #SRT3e15c9eac04cbe4a191c6696982a29b62126039e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3e15c9eac04cbe4a191c6696982a29b62126039e >> base64 [
	^ ''.
	

]
