Class {
	#name : #SRT7268f9c2bc9c9e65b4a16888cb5672531ce8e945,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7268f9c2bc9c9e65b4a16888cb5672531ce8e945 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7IAoKCi8vLy8vLy8vLy8vLy8vLy8vLyA+Pj4+PiBXYWxsZXQgQ29udHJhY3QgPDw8PDwgLy8vLy8vLy8vLy8vLy8vLy8vLwoKCi8vLyBAdGl0bGUgTXVsdGlzaWduYXR1cmUgd2FsbGV0IC0gQWxsb3dzIG11bHRpcGxlIHBhcnRpZXMgdG8gYWdyZWUgb24gdHJhbnNhY3Rpb25zIGJlZm9yZSBleGVjdXRpb24uCi8vLyBAYXV0aG9yIFN0ZWZhbiBHZW9yZ2UgLSA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI5M2UwZTdmNmY1ZjJmZGJkZjRmNmZjZTFmNGY2ZDNmMGZjZmRlMGY2ZmRlMGVhZTBiZGZkZjZlNyI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+CmNvbnRyYWN0IE11bHRpU2lnV2FsbGV0IHsKCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBNQVhfT1dORVJfQ09VTlQgPSA1MDsKCiAgICBldmVudCBDb25maXJtYXRpb24oYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwogICAgZXZlbnQgUmV2b2NhdGlvbihhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IGluZGV4ZWQgdHJhbnNhY3Rpb25JZCk7CiAgICBldmVudCBTdWJtaXNzaW9uKHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IEV4ZWN1dGlvbih1aW50IGluZGV4ZWQgdHJhbnNhY3Rpb25JZCk7CiAgICBldmVudCBFeGVjdXRpb25GYWlsdXJlKHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IERlcG9zaXQoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBPd25lckFkZGl0aW9uKGFkZHJlc3MgaW5kZXhlZCBvd25lcik7CiAgICBldmVudCBPd25lclJlbW92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKICAgIGV2ZW50IFJlcXVpcmVtZW50Q2hhbmdlKHVpbnQgcmVxdWlyZWQpOwoKICAgIG1hcHBpbmcgKHVpbnQgPT4gVHJhbnNhY3Rpb24pIHB1YmxpYyB0cmFuc2FjdGlvbnM7CiAgICBtYXBwaW5nICh1aW50ID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkpIHB1YmxpYyBjb25maXJtYXRpb25zOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNPd25lcjsKICAgIGFkZHJlc3NbXSBwdWJsaWMgb3duZXJzOwogICAgdWludCBwdWJsaWMgcmVxdWlyZWQ7CiAgICB1aW50IHB1YmxpYyB0cmFuc2FjdGlvbkNvdW50OwoKICAgIHN0cnVjdCBUcmFuc2FjdGlvbiB7CiAgICAgICAgYWRkcmVzcyBkZXN0aW5hdGlvbjsKICAgICAgICB1aW50IHZhbHVlOwogICAgICAgIGJ5dGVzIGRhdGE7CiAgICAgICAgYm9vbCBleGVjdXRlZDsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5V2FsbGV0KCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGFkZHJlc3ModGhpcykpCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb3duZXJEb2VzTm90RXhpc3QoYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmIChpc093bmVyW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvd25lckV4aXN0cyhhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgaWYgKCFpc093bmVyW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB0cmFuc2FjdGlvbkV4aXN0cyh1aW50IHRyYW5zYWN0aW9uSWQpIHsKICAgICAgICBpZiAodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdLmRlc3RpbmF0aW9uID09IDApCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmICghY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcl0pCiAgICAgICAgICAgIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90Q29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyXSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RFeGVjdXRlZCh1aW50IHRyYW5zYWN0aW9uSWQpIHsKICAgICAgICBpZiAodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdLmV4ZWN1dGVkKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdE51bGwoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIGlmIChfYWRkcmVzcyA9PSAwKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHZhbGlkUmVxdWlyZW1lbnQodWludCBvd25lckNvdW50LCB1aW50IF9yZXF1aXJlZCkgewogICAgICAgIGlmICggICBvd25lckNvdW50ID4gTUFYX09XTkVSX0NPVU5UCiAgICAgICAgICAgIHx8IF9yZXF1aXJlZCA+IG93bmVyQ291bnQKICAgICAgICAgICAgfHwgX3JlcXVpcmVkID09IDAKICAgICAgICAgICAgfHwgb3duZXJDb3VudCA9PSAwKQogICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uIGFsbG93cyB0byBkZXBvc2l0IGV0aGVyLgogICAgZnVuY3Rpb24oKQogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIC8qCiAgICAgKiBQdWJsaWMgZnVuY3Rpb25zCiAgICAgKi8KICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIHNldHMgaW5pdGlhbCBvd25lcnMgYW5kIHJlcXVpcmVkIG51bWJlciBvZiBjb25maXJtYXRpb25zLgogICAgLy8vIEBwYXJhbSBfb3duZXJzIExpc3Qgb2YgaW5pdGlhbCBvd25lcnMuCiAgICAvLy8gQHBhcmFtIF9yZXF1aXJlZCBOdW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4KICAgIGZ1bmN0aW9uIE11bHRpU2lnV2FsbGV0KGFkZHJlc3NbXSBfb3duZXJzLCB1aW50IF9yZXF1aXJlZCkKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZFJlcXVpcmVtZW50KF9vd25lcnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxfb3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpc093bmVyW19vd25lcnNbaV1dIHx8IF9vd25lcnNbaV0gPT0gMCkKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICBpc093bmVyW19vd25lcnNbaV1dID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgb3duZXJzID0gX293bmVyczsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBvd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgb3duZXJEb2VzTm90RXhpc3Qob3duZXIpCiAgICAgICAgbm90TnVsbChvd25lcikKICAgICAgICB2YWxpZFJlcXVpcmVtZW50KG93bmVycy5sZW5ndGggKyAxLCByZXF1aXJlZCkKICAgIHsKICAgICAgICBpc093bmVyW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgICAgIE93bmVyQWRkaXRpb24ob3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lci4KICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgewogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoIC0gMTsgaSsrKQogICAgICAgICAgICBpZiAob3duZXJzW2ldID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBvd25lcnNbaV0gPSBvd25lcnNbb3duZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICBvd25lcnMubGVuZ3RoIC09IDE7CiAgICAgICAgaWYgKHJlcXVpcmVkID4gb3duZXJzLmxlbmd0aCkKICAgICAgICAgICAgY2hhbmdlUmVxdWlyZW1lbnQob3duZXJzLmxlbmd0aCk7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gcmVwbGFjZSBhbiBvd25lciB3aXRoIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gcmVwbGFjZU93bmVyKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3MgbmV3T3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgICAgIG93bmVyRG9lc05vdEV4aXN0KG5ld093bmVyKQogICAgewogICAgICAgIGZvciAodWludCBpPTA7IGk8b3duZXJzLmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAob3duZXJzW2ldID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBvd25lcnNbaV0gPSBuZXdPd25lcjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgaXNPd25lcltvd25lcl0gPSBmYWxzZTsKICAgICAgICBpc093bmVyW25ld093bmVyXSA9IHRydWU7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgICAgICBPd25lckFkZGl0aW9uKG5ld093bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LgogICAgLy8vIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBjaGFuZ2VSZXF1aXJlbWVudCh1aW50IF9yZXF1aXJlZCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgdmFsaWRSZXF1aXJlbWVudChvd25lcnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICAgICAgUmVxdWlyZW1lbnRDaGFuZ2UoX3JlcXVpcmVkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS4KICAgIC8vLyBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELgogICAgZnVuY3Rpb24gc3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyBkZXN0aW5hdGlvbiwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25JZCA9IGFkZFRyYW5zYWN0aW9uKGRlc3RpbmF0aW9uLCB2YWx1ZSwgZGF0YSk7CiAgICAgICAgY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBjb25maXJtVHJhbnNhY3Rpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgdHJhbnNhY3Rpb25FeGlzdHModHJhbnNhY3Rpb25JZCkKICAgICAgICBub3RDb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgdHJhbnNhY3Rpb25JZCk7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiByZXZva2VDb25maXJtYXRpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgY29uZmlybWVkKHRyYW5zYWN0aW9uSWQsIG1zZy5zZW5kZXIpCiAgICAgICAgbm90RXhlY3V0ZWQodHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gZmFsc2U7CiAgICAgICAgUmV2b2NhdGlvbihtc2cuc2VuZGVyLCB0cmFuc2FjdGlvbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW55b25lIHRvIGV4ZWN1dGUgYSBjb25maXJtZWQgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBleGVjdXRlVHJhbnNhY3Rpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG5vdEV4ZWN1dGVkKHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgaWYgKGlzQ29uZmlybWVkKHRyYW5zYWN0aW9uSWQpKSB7CiAgICAgICAgICAgIFRyYW5zYWN0aW9uIHR4ID0gdHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdOwogICAgICAgICAgICB0eC5leGVjdXRlZCA9IHRydWU7CiAgICAgICAgICAgIGlmICh0eC5kZXN0aW5hdGlvbi5jYWxsLnZhbHVlKHR4LnZhbHVlKSh0eC5kYXRhKSkKICAgICAgICAgICAgICAgIEV4ZWN1dGlvbih0cmFuc2FjdGlvbklkKTsKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBFeGVjdXRpb25GYWlsdXJlKHRyYW5zYWN0aW9uSWQpOwogICAgICAgICAgICAgICAgdHguZXhlY3V0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIHRoZSBjb25maXJtYXRpb24gc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICAvLy8gQHJldHVybiBDb25maXJtYXRpb24gc3RhdHVzLgogICAgZnVuY3Rpb24gaXNDb25maXJtZWQodWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICB1aW50IGNvdW50ID0gMDsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPG93bmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgaWYgKGNvdW50ID09IHJlcXVpcmVkKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQWRkcyBhIG5ldyB0cmFuc2FjdGlvbiB0byB0aGUgdHJhbnNhY3Rpb24gbWFwcGluZywgaWYgdHJhbnNhY3Rpb24gZG9lcyBub3QgZXhpc3QgeWV0LgogICAgLy8vIEBwYXJhbSBkZXN0aW5hdGlvbiBUcmFuc2FjdGlvbiB0YXJnZXQgYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gdmFsdWUgVHJhbnNhY3Rpb24gZXRoZXIgdmFsdWUuCiAgICAvLy8gQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLgogICAgLy8vIEByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC4KICAgIGZ1bmN0aW9uIGFkZFRyYW5zYWN0aW9uKGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBub3ROdWxsKGRlc3RpbmF0aW9uKQogICAgICAgIHJldHVybnMgKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICB0cmFuc2FjdGlvbklkID0gdHJhbnNhY3Rpb25Db3VudDsKICAgICAgICB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0gPSBUcmFuc2FjdGlvbih7CiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbiwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBleGVjdXRlZDogZmFsc2UKICAgICAgICB9KTsKICAgICAgICB0cmFuc2FjdGlvbkNvdW50ICs9IDE7CiAgICAgICAgU3VibWlzc2lvbih0cmFuc2FjdGlvbklkKTsKICAgIH0KCiAgICAvKgogICAgICogV2ViMyBjYWxsIGZ1bmN0aW9ucwogICAgICovCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiBjb25maXJtYXRpb25zIG9mIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICAvLy8gQHJldHVybiBOdW1iZXIgb2YgY29uZmlybWF0aW9ucy4KICAgIGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbkNvdW50KHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQgY291bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW293bmVyc1tpXV0pCiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBhZnRlciBmaWxlcnMgYXJlIGFwcGxpZWQuCiAgICAvLy8gQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuCiAgICAvLy8gQHJldHVybiBUb3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbHRlcnMgYXJlIGFwcGxpZWQuCiAgICBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkNvdW50KGJvb2wgcGVuZGluZywgYm9vbCBleGVjdXRlZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQgY291bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTx0cmFuc2FjdGlvbkNvdW50OyBpKyspCiAgICAgICAgICAgIGlmICggICBwZW5kaW5nICYmICF0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQKICAgICAgICAgICAgICAgIHx8IGV4ZWN1dGVkICYmIHRyYW5zYWN0aW9uc1tpXS5leGVjdXRlZCkKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBsaXN0IG9mIG93bmVycy4KICAgIC8vLyBAcmV0dXJuIExpc3Qgb2Ygb3duZXIgYWRkcmVzc2VzLgogICAgZnVuY3Rpb24gZ2V0T3duZXJzKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGFkZHJlc3NbXSkKICAgIHsKICAgICAgICByZXR1cm4gb3duZXJzOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgYXJyYXkgd2l0aCBvd25lciBhZGRyZXNzZXMsIHdoaWNoIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYXJyYXkgb2Ygb3duZXIgYWRkcmVzc2VzLgogICAgZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9ucyh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChhZGRyZXNzW10gX2NvbmZpcm1hdGlvbnMpCiAgICB7CiAgICAgICAgYWRkcmVzc1tdIG1lbW9yeSBjb25maXJtYXRpb25zVGVtcCA9IG5ldyBhZGRyZXNzW10ob3duZXJzLmxlbmd0aCk7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgdWludCBpOwogICAgICAgIGZvciAoaT0wOyBpPG93bmVycy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bb3duZXJzW2ldXSkgewogICAgICAgICAgICAgICAgY29uZmlybWF0aW9uc1RlbXBbY291bnRdID0gb3duZXJzW2ldOwogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgIF9jb25maXJtYXRpb25zID0gbmV3IGFkZHJlc3NbXShjb3VudCk7CiAgICAgICAgZm9yIChpPTA7IGk8Y291bnQ7IGkrKykKICAgICAgICAgICAgX2NvbmZpcm1hdGlvbnNbaV0gPSBjb25maXJtYXRpb25zVGVtcFtpXTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2YgdHJhbnNhY3Rpb24gSURzIGluIGRlZmluZWQgcmFuZ2UuCiAgICAvLy8gQHBhcmFtIGZyb20gSW5kZXggc3RhcnQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuCiAgICAvLy8gQHBhcmFtIHRvIEluZGV4IGVuZCBwb3NpdGlvbiBvZiB0cmFuc2FjdGlvbiBhcnJheS4KICAgIC8vLyBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLgogICAgLy8vIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYXJyYXkgb2YgdHJhbnNhY3Rpb24gSURzLgogICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25JZHModWludCBmcm9tLCB1aW50IHRvLCBib29sIHBlbmRpbmcsIGJvb2wgZXhlY3V0ZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50W10gX3RyYW5zYWN0aW9uSWRzKQogICAgewogICAgICAgIHVpbnRbXSBtZW1vcnkgdHJhbnNhY3Rpb25JZHNUZW1wID0gbmV3IHVpbnRbXSh0cmFuc2FjdGlvbkNvdW50KTsKICAgICAgICB1aW50IGNvdW50ID0gMDsKICAgICAgICB1aW50IGk7CiAgICAgICAgZm9yIChpPTA7IGk8dHJhbnNhY3Rpb25Db3VudDsgaSsrKQogICAgICAgICAgICBpZiAoICAgcGVuZGluZyAmJiAhdHJhbnNhY3Rpb25zW2ldLmV4ZWN1dGVkCiAgICAgICAgICAgICAgICB8fCBleGVjdXRlZCAmJiB0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWRzVGVtcFtjb3VudF0gPSBpOwogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgIF90cmFuc2FjdGlvbklkcyA9IG5ldyB1aW50W10odG8gLSBmcm9tKTsKICAgICAgICBmb3IgKGk9ZnJvbTsgaTx0bzsgaSsrKQogICAgICAgICAgICBfdHJhbnNhY3Rpb25JZHNbaSAtIGZyb21dID0gdHJhbnNhY3Rpb25JZHNUZW1wW2ldOwogICAgfQp9CgoKLy8vLy8vLy8vLy8vLy8vLy8vID4+Pj4+IExpYnJhcnkgQ29udHJhY3RzIDw8PDw8IC8vLy8vLy8vLy8vLy8vLy8vLy8KCgpjb250cmFjdCBTYWZlTWF0aExpYiB7CiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbCAKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4gCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8pOwogIC8qKiAKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLiAKICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBfbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLiAKICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHsKICAgIG5ld093bmVyID0gX25ld093bmVyOwogIH0KCiAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgovLy8vLy8vLy8vLy8vLy8vLy8gPj4+Pj4gVG9rZW4gQ29udHJhY3RzIDw8PDw8IC8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7Cn0KCgoKLyoqCiAqIFN0YW5kYXJkIEVSQzIwIHRva2VuIHdpdGggU2hvcnQgSGFuZCBBdHRhY2sgYW5kIGFwcHJvdmUoKSByYWNlIGNvbmRpdGlvbiBtaXRpZ2F0aW9uLgogKgogKiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6CiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgU2FmZU1hdGhMaWIgewogIC8qIFRva2VuIHN1cHBseSBnb3QgaW5jcmVhc2VkIGFuZCBhIG5ldyBvd25lciByZWNlaXZlZCB0aGVzZSB0b2tlbnMgKi8KICBldmVudCBNaW50ZWQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwoKICAvKiBBY3R1YWwgYmFsYW5jZXMgb2YgdG9rZW4gaG9sZGVycyAqLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKCiAgLyogYXBwcm92ZSgpIGFsbG93YW5jZXMgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlIAogICAgICAgICYmIF92YWx1ZSA+IDAgCiAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10KICAgICAgICApIHsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sX3ZhbHVlKTsKICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGVsc2V7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAgIC8vIEZyb20gYS9jIGhhcyBiYWxhbmNlCiAgICAgICAgJiYgX2FsbG93YW5jZSA+PSBfdmFsdWUgICAgLy8gVHJhbnNmZXIgYXBwcm92ZWQKICAgICAgICAmJiBfdmFsdWUgPiAwICAgICAgICAgICAgICAvLyBOb24temVybyB0cmFuc2ZlcgogICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dICAvLyBPdmVyZmxvdyBjaGVjawogICAgICAgICl7CiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSxfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgcmVxdWlyZSgoX3ZhbHVlID09IDApIHx8IChhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9PSAwKSk7CgogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKCiAgICAKCi8qKgogKiBBIHRva2VuIHRoYXQgY2FuIGluY3JlYXNlIGl0cyBzdXBwbHkgYnkgYW5vdGhlciBjb250cmFjdC4KICoKICogVGhpcyBhbGxvd3MgdW5jYXBwZWQgY3Jvd2RzYWxlIGJ5IGR5bmFtaWNhbGx5IGluY3JlYXNpbmcgdGhlIHN1cHBseSB3aGVuIG1vbmV5IHBvdXJzIGluLgogKiBPbmx5IG1pbnQgYWdlbnRzLCBjb250cmFjdHMgd2hpdGVsaXN0ZWQgYnkgb3duZXIsIGNhbiBtaW50IG5ldyB0b2tlbnMuCiAqCiAqLwpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCiAgLyoqIExpc3Qgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY3JlYXRlIG5ldyB0b2tlbnMgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBtaW50QWdlbnRzOwoKICBldmVudCBNaW50aW5nQWdlbnRDaGFuZ2VkKGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0ZSAgKTsKCiAgLyoqCiAgICogQ3JlYXRlIG5ldyB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gYW4gYWRkcmVzcy4uCiAgICoKICAgKiBPbmx5IGNhbGxhYmx5IGJ5IGEgY3Jvd2RzYWxlIGNvbnRyYWN0IChtaW50IGFnZW50KS4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KSBvbmx5TWludEFnZW50IGNhbk1pbnQgcHVibGljIHsKICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgYW1vdW50KTsKICAgIGJhbGFuY2VzW3JlY2VpdmVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbcmVjZWl2ZXJdLCBhbW91bnQpOwogICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIG1pbnQgdHJhbnNhY3Rpb24gYXBwZXIgaW4gRXRoZXJTY2FuLmlvCiAgICAvLyBXZSBjYW4gcmVtb3ZlIHRoaXMgYWZ0ZXIgdGhlcmUgaXMgYSBzdGFuZGFyZGl6ZWQgbWludGluZyBldmVudAogICAgVHJhbnNmZXIoMCwgcmVjZWl2ZXIsIGFtb3VudCk7CiAgfQoKICAvKioKICAgKiBPd25lciBjYW4gYWxsb3cgYSBjcm93ZHNhbGUgY29udHJhY3QgdG8gbWludCBuZXcgdG9rZW5zLgogICAqLwogIGZ1bmN0aW9uIHNldE1pbnRBZ2VudChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyB7CiAgICBtaW50QWdlbnRzW2FkZHJdID0gc3RhdGU7CiAgICBNaW50aW5nQWdlbnRDaGFuZ2VkKGFkZHIsIHN0YXRlKTsKICB9CgogIG1vZGlmaWVyIG9ubHlNaW50QWdlbnQoKSB7CiAgICAvLyBPbmx5IGNyb3dkc2FsZSBjb250cmFjdHMgYXJlIGFsbG93ZWQgdG8gbWludCBuZXcgdG9rZW5zCiAgICByZXF1aXJlKG1pbnRBZ2VudHNbbXNnLnNlbmRlcl0pOwogICAgXzsKICB9CgogIC8qKiBNYWtlIHN1cmUgd2UgYXJlIG5vdCBkb25lIHlldC4gKi8KICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQp9CgoKCi8qKgogKiBEZWZpbmUgaW50ZXJmYWNlIGZvciByZWxlYXNpbmcgdGhlIHRva2VuIHRyYW5zZmVyIGFmdGVyIGEgc3VjY2Vzc2Z1bCBjcm93ZHNhbGUuCiAqLwpjb250cmFjdCBSZWxlYXNhYmxlVG9rZW4gaXMgRVJDMjAsIE93bmFibGUgewoKICAvKiBUaGUgZmluYWxpemVyIGNvbnRyYWN0IHRoYXQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4gKi8KICBhZGRyZXNzIHB1YmxpYyByZWxlYXNlQWdlbnQ7CgogIC8qKiBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gCiAgICogSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4KICAgKi8KICBib29sIHB1YmxpYyByZWxlYXNlZCA9IGZhbHNlOwoKICAvKiogTWFwIG9mIGFnZW50cyB0aGF0IGFyZSBhbGxvd2VkIHRvIHRyYW5zZmVyIHRva2VucyByZWdhcmRsZXNzIG9mIHRoZSBsb2NrIGRvd24gcGVyaW9kLiAKICAgKiBUaGVzZSBhcmUgY3Jvd2RzYWxlIGNvbnRyYWN0cyBhbmQgcG9zc2libGUgdGhlIHRlYW0gbXVsdGlzaWcgaXRzZWxmLiAKICAgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyB0cmFuc2ZlckFnZW50czsKCiAgLyoqCiAgICogTGltaXQgdG9rZW4gdHJhbnNmZXIgdW50aWwgdGhlIGNyb3dkc2FsZSBpcyBvdmVyLgogICAqLwogIG1vZGlmaWVyIGNhblRyYW5zZmVyKGFkZHJlc3MgX3NlbmRlcikgewoKICAgIGlmICghcmVsZWFzZWQpIHsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyQWdlbnRzW19zZW5kZXJdKTsKICAgIH0KCiAgICBfOwogIH0KCiAgLyoqCiAgICogU2V0IHRoZSBjb250cmFjdCB0aGF0IGNhbiBjYWxsIHJlbGVhc2UgYW5kIG1ha2UgdGhlIHRva2VuIHRyYW5zZmVyYWJsZS4KICAgKgogICAqIERlc2lnbiBjaG9pY2UuIEFsbG93IHJlc2V0IHRoZSByZWxlYXNlIGFnZW50IHRvIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLgogICAqLwogIGZ1bmN0aW9uIHNldFJlbGVhc2VBZ2VudChhZGRyZXNzIGFkZHIpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKCiAgICAvLyBXZSBkb24ndCBkbyBpbnRlcmZhY2UgY2hlY2sgaGVyZSBhcyB3ZSBtaWdodCB3YW50IHRvIGEgbm9ybWFsIHdhbGxldCBhZGRyZXNzIHRvIGFjdCBhcyBhIHJlbGVhc2UgYWdlbnQKICAgIHJlbGVhc2VBZ2VudCA9IGFkZHI7CiAgfQoKICAvKioKICAgKiBPd25lciBjYW4gYWxsb3cgYSBwYXJ0aWN1bGFyIGFkZHJlc3MgKGEgY3Jvd2RzYWxlIGNvbnRyYWN0KSB0byB0cmFuc2ZlciB0b2tlbnMgZGVzcGl0ZSB0aGUgbG9jayB1cCBwZXJpb2QuCiAgICovCiAgZnVuY3Rpb24gc2V0VHJhbnNmZXJBZ2VudChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKICAgIHRyYW5zZmVyQWdlbnRzW2FkZHJdID0gc3RhdGU7CiAgfQoKICAvKioKICAgKiBPbmUgd2F5IGZ1bmN0aW9uIHRvIHJlbGVhc2UgdGhlIHRva2VucyB0byB0aGUgd2lsZC4KICAgKgogICAqIENhbiBiZSBjYWxsZWQgb25seSBmcm9tIHRoZSByZWxlYXNlIGFnZW50IHRoYXQgaXMgdGhlIGZpbmFsIElDTyBjb250cmFjdC4gCiAgICogSXQgaXMgb25seSBjYWxsZWQgaWYgdGhlIGNyb3dkc2FsZSBoYXMgYmVlbiBzdWNjZXNzIChmaXJzdCBtaWxlc3RvbmUgcmVhY2hlZCkuCiAgICovCiAgZnVuY3Rpb24gcmVsZWFzZVRva2VuVHJhbnNmZXIoKSBwdWJsaWMgb25seVJlbGVhc2VBZ2VudCB7CiAgICByZWxlYXNlZCA9IHRydWU7CiAgfQoKICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHRva2VucyBoYXZlIGJlZW4gcmVsZWFzZXNkICovCiAgbW9kaWZpZXIgaW5SZWxlYXNlU3RhdGUoYm9vbCByZWxlYXNlU3RhdGUpIHsKICAgIHJlcXVpcmUocmVsZWFzZVN0YXRlID09IHJlbGVhc2VkKTsKICAgIF87CiAgfQoKICAvKiogVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSBhIHdoaXRlbGlzdGVkIHJlbGVhc2UgYWdlbnQuICovCiAgbW9kaWZpZXIgb25seVJlbGVhc2VBZ2VudCgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSByZWxlYXNlQWdlbnQpOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAvLyBDYWxsIFN0YW5kYXJkVG9rZW4udHJhbnNmZXIoKQogICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgLy8gQ2FsbCBTdGFuZGFyZFRva2VuLnRyYW5zZmVyRm9ybSgpCiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKfQoKCiAKCi8qKgogKiBVcGdyYWRlIGFnZW50IGludGVyZmFjZSBpbnNwaXJlZCBieSBMdW55ci4KICoKICogVXBncmFkZSBhZ2VudCB0cmFuc2ZlcnMgdG9rZW5zIHRvIGEgbmV3IGNvbnRyYWN0LgogKiBVcGdyYWRlIGFnZW50IGl0c2VsZiBjYW4gYmUgdGhlIHRva2VuIGNvbnRyYWN0LCBvciBqdXN0IGEgbWlkZGxlIG1hbiBjb250cmFjdCBkb2luZyB0aGUgaGVhdnkgbGlmdGluZy4KICovCmNvbnRyYWN0IFVwZ3JhZGVBZ2VudCB7CiAgdWludCBwdWJsaWMgb3JpZ2luYWxTdXBwbHk7CiAgLyoqIEludGVyZmFjZSBtYXJrZXIgKi8KICBmdW5jdGlvbiBpc1VwZ3JhZGVBZ2VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdXBncmFkZUZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHB1YmxpYzsKfQoKLyoqCiAqIEEgdG9rZW4gdXBncmFkZSBtZWNoYW5pc20gd2hlcmUgdXNlcnMgY2FuIG9wdC1pbiBhbW91bnQgb2YgdG9rZW5zIHRvIHRoZSBuZXh0IHNtYXJ0IGNvbnRyYWN0IHJldmlzaW9uLgogKgogKiBGaXJzdCBlbnZpc2lvbmVkIGJ5IEdvbGVtIGFuZCBMdW55ciBwcm9qZWN0cy4KICovCmNvbnRyYWN0IFVwZ3JhZGVhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogIC8qKiBDb250cmFjdCAvIHBlcnNvbiB3aG8gY2FuIHNldCB0aGUgdXBncmFkZSBwYXRoLiAKICAgKiBUaGlzIGNhbiBiZSB0aGUgc2FtZSBhcyB0ZWFtIG11bHRpc2lnIHdhbGxldCwgYXMgd2hhdCBpdCBpcyB3aXRoIGl0cyBkZWZhdWx0IHZhbHVlLiAKICAgKi8KICBhZGRyZXNzIHB1YmxpYyB1cGdyYWRlTWFzdGVyOwoKICAvKiogVGhlIG5leHQgY29udHJhY3Qgd2hlcmUgdGhlIHRva2VucyB3aWxsIGJlIG1pZ3JhdGVkLiAqLwogIFVwZ3JhZGVBZ2VudCBwdWJsaWMgdXBncmFkZUFnZW50OwoKICAvKiogSG93IG1hbnkgdG9rZW5zIHdlIGhhdmUgdXBncmFkZWQgYnkgbm93LiAqLwogIHVpbnQyNTYgcHVibGljIHRvdGFsVXBncmFkZWQ7CgogIC8qKgogICAqIFVwZ3JhZGUgc3RhdGVzLgogICAqCiAgICogLSBOb3RBbGxvd2VkOiBUaGUgY2hpbGQgY29udHJhY3QgaGFzIG5vdCByZWFjaGVkIGEgY29uZGl0aW9uIHdoZXJlIHRoZSB1cGdyYWRlIGNhbiBiZ3VuCiAgICogLSBXYWl0aW5nRm9yQWdlbnQ6IFRva2VuIGFsbG93cyB1cGdyYWRlLCBidXQgd2UgZG9uJ3QgaGF2ZSBhIG5ldyBhZ2VudCB5ZXQKICAgKiAtIFJlYWR5VG9VcGdyYWRlOiBUaGUgYWdlbnQgaXMgc2V0LCBidXQgbm90IGEgc2luZ2xlIHRva2VuIGhhcyBiZWVuIHVwZ3JhZGVkIHlldAogICAqIC0gVXBncmFkaW5nOiBVcGdyYWRlIGFnZW50IGlzIHNldCBhbmQgdGhlIGJhbGFuY2UgaG9sZGVycyBjYW4gdXBncmFkZSB0aGVpciB0b2tlbnMKICAgKgogICAqLwogIGVudW0gVXBncmFkZVN0YXRlIHtVbmtub3duLCBOb3RBbGxvd2VkLCBXYWl0aW5nRm9yQWdlbnQsIFJlYWR5VG9VcGdyYWRlLCBVcGdyYWRpbmd9CgogIC8qKgogICAqIFNvbWVib2R5IGhhcyB1cGdyYWRlZCBzb21lIG9mIHRoZWlyIHRva2Vucy4KICAgKi8KICBldmVudCBVcGdyYWRlKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAvKioKICAgKiBOZXcgdXBncmFkZSBhZ2VudCBhdmFpbGFibGUuCiAgICovCiAgZXZlbnQgVXBncmFkZUFnZW50U2V0KGFkZHJlc3MgYWdlbnQpOwoKICAvKioKICAgKiBEbyBub3QgYWxsb3cgY29uc3RydWN0aW9uIHdpdGhvdXQgdXBncmFkZSBtYXN0ZXIgc2V0LgogICAqLwogIGZ1bmN0aW9uIFVwZ3JhZGVhYmxlVG9rZW4oYWRkcmVzcyBfdXBncmFkZU1hc3RlcikgewogICAgdXBncmFkZU1hc3RlciA9IF91cGdyYWRlTWFzdGVyOwogIH0KCiAgLyoqCiAgICogQWxsb3cgdGhlIHRva2VuIGhvbGRlciB0byB1cGdyYWRlIHNvbWUgb2YgdGhlaXIgdG9rZW5zIHRvIGEgbmV3IGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIHVwZ3JhZGUodWludDI1NiB2YWx1ZSkgcHVibGljIHsKICAgIFVwZ3JhZGVTdGF0ZSBzdGF0ZSA9IGdldFVwZ3JhZGVTdGF0ZSgpOwogICAgcmVxdWlyZSgoc3RhdGUgPT0gVXBncmFkZVN0YXRlLlJlYWR5VG9VcGdyYWRlIHx8IHN0YXRlID09IFVwZ3JhZGVTdGF0ZS5VcGdyYWRpbmcpKTsKICAgIC8vIFZhbGlkYXRlIGlucHV0IHZhbHVlLgogICAgcmVxdWlyZSh2YWx1ZSE9MCk7CgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLHZhbHVlKTsKCiAgICAvLyBUYWtlIHRva2VucyBvdXQgZnJvbSBjaXJjdWxhdGlvbgogICAgdG90YWxTdXBwbHkgPSBzYWZlU3ViKHRvdGFsU3VwcGx5LHZhbHVlKTsKICAgIHRvdGFsVXBncmFkZWQgPSBzYWZlQWRkKHRvdGFsVXBncmFkZWQsdmFsdWUpOwoKICAgIC8vIFVwZ3JhZGUgYWdlbnQgcmVpc3N1ZXMgdGhlIHRva2VucwogICAgdXBncmFkZUFnZW50LnVwZ3JhZGVGcm9tKG1zZy5zZW5kZXIsIHZhbHVlKTsKICAgIFVwZ3JhZGUobXNnLnNlbmRlciwgdXBncmFkZUFnZW50LCB2YWx1ZSk7CiAgfQoKICAvKioKICAgKiBTZXQgYW4gdXBncmFkZSBhZ2VudCB0aGF0IGhhbmRsZXMKICAgKi8KICBmdW5jdGlvbiBzZXRVcGdyYWRlQWdlbnQoYWRkcmVzcyBhZ2VudCkgZXh0ZXJuYWwgewogICAgcmVxdWlyZShjYW5VcGdyYWRlKCkpOwogICAgcmVxdWlyZShhZ2VudCAhPSAweDApOwogICAgLy8gT25seSBhIG1hc3RlciBjYW4gZGVzaWduYXRlIHRoZSBuZXh0IGFnZW50CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdXBncmFkZU1hc3Rlcik7CiAgICAvLyBVcGdyYWRlIGhhcyBhbHJlYWR5IGJlZ3VuIGZvciBhbiBhZ2VudAogICAgcmVxdWlyZShnZXRVcGdyYWRlU3RhdGUoKSAhPSBVcGdyYWRlU3RhdGUuVXBncmFkaW5nKTsKCiAgICB1cGdyYWRlQWdlbnQgPSBVcGdyYWRlQWdlbnQoYWdlbnQpOwoKICAgIC8vIEJhZCBpbnRlcmZhY2UKICAgIHJlcXVpcmUodXBncmFkZUFnZW50LmlzVXBncmFkZUFnZW50KCkpOwogICAgLy8gTWFrZSBzdXJlIHRoYXQgdG9rZW4gc3VwcGxpZXMgbWF0Y2ggaW4gc291cmNlIGFuZCB0YXJnZXQKICAgIHJlcXVpcmUodXBncmFkZUFnZW50Lm9yaWdpbmFsU3VwcGx5KCkgPT0gdG90YWxTdXBwbHkpOwoKICAgIFVwZ3JhZGVBZ2VudFNldCh1cGdyYWRlQWdlbnQpOwogIH0KCiAgLyoqCiAgICogR2V0IHRoZSBzdGF0ZSBvZiB0aGUgdG9rZW4gdXBncmFkZS4KICAgKi8KICBmdW5jdGlvbiBnZXRVcGdyYWRlU3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhVcGdyYWRlU3RhdGUpIHsKICAgIGlmICghY2FuVXBncmFkZSgpKSByZXR1cm4gVXBncmFkZVN0YXRlLk5vdEFsbG93ZWQ7CiAgICBlbHNlIGlmKGFkZHJlc3ModXBncmFkZUFnZW50KSA9PSAweDAwKSByZXR1cm4gVXBncmFkZVN0YXRlLldhaXRpbmdGb3JBZ2VudDsKICAgIGVsc2UgaWYodG90YWxVcGdyYWRlZCA9PSAwKSByZXR1cm4gVXBncmFkZVN0YXRlLlJlYWR5VG9VcGdyYWRlOwogICAgZWxzZSByZXR1cm4gVXBncmFkZVN0YXRlLlVwZ3JhZGluZzsKICB9CgogIC8qKgogICAqIENoYW5nZSB0aGUgdXBncmFkZSBtYXN0ZXIuCiAgICoKICAgKiBUaGlzIGFsbG93cyB1cyB0byBzZXQgYSBuZXcgb3duZXIgZm9yIHRoZSB1cGdyYWRlIG1lY2hhbmlzbS4KICAgKi8KICBmdW5jdGlvbiBzZXRVcGdyYWRlTWFzdGVyKGFkZHJlc3MgbWFzdGVyKSBwdWJsaWMgewogICAgcmVxdWlyZShtYXN0ZXIgIT0gMHgwKTsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB1cGdyYWRlTWFzdGVyKTsKICAgIHVwZ3JhZGVNYXN0ZXIgPSBtYXN0ZXI7CiAgfQoKICAvKioKICAgKiBDaGlsZCBjb250cmFjdCBjYW4gZW5hYmxlIHRvIHByb3ZpZGUgdGhlIGNvbmRpdGlvbiB3aGVuIHRoZSB1cGdyYWRlIGNhbiBiZWd1bi4KICAgKi8KICBmdW5jdGlvbiBjYW5VcGdyYWRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKioKICogQSBjcm93ZHNhbGUgdG9rZW4uCiAqCiAqIEFuIEVSQy0yMCB0b2tlbiBkZXNpZ25lZCBzcGVjaWZpY2FsbHkgZm9yIGNyb3dkc2FsZXMgd2l0aCBpbnZlc3RvciBwcm90ZWN0aW9uIGFuZCAKICogZnVydGhlciBkZXZlbG9wbWVudCBwYXRoLgogKgogKiAtIFRoZSB0b2tlbiB0cmFuc2ZlcigpIGlzIGRpc2FibGVkIHVudGlsIHRoZSBjcm93ZHNhbGUgaXMgb3ZlcgogKiAtIFRoZSB0b2tlbiBjb250cmFjdCBnaXZlcyBhbiBvcHQtaW4gdXBncmFkZSBwYXRoIHRvIGEgbmV3IGNvbnRyYWN0CiAqIC0gVGhlIHNhbWUgdG9rZW4gY2FuIGJlIHBhcnQgb2Ygc2V2ZXJhbCBjcm93ZHNhbGVzIHRocm91Z2ggYXBwcm92ZSgpIG1lY2hhbmlzbQogKiAtIFRoZSB0b2tlbiBjYW4gYmUgY2FwcGVkIChzdXBwbHkgc2V0IGluIHRoZSBjb25zdHJ1Y3RvcikgCiAqICAgb3IgdW5jYXBwZWQgKGNyb3dkc2FsZSBjb250cmFjdCBjYW4gbWludCBuZXcgdG9rZW5zKQogKi8KY29udHJhY3QgRGF5VG9rZW4gaXMgIFJlbGVhc2FibGVUb2tlbiwgTWludGFibGVUb2tlbiwgVXBncmFkZWFibGVUb2tlbiB7CgogICAgZW51bSBzZWxsaW5nU3RhdHVzIHtOT1RPTlNBTEUsIEVYUElSRUQsIE9OU0FMRX0KCiAgICAvKiogQmFzaWMgc3RydWN0dXJlIGZvciBhIGNvbnRyaWJ1dG9yIHdpdGggYSBtaW50aW5nIEFkZHJlc3MKICAgICAqIGFkciBhZGRyZXNzIG9mIHRoZSBjb250cmlidXRvcgogICAgICogaW5pdGlhbENvbnRyaWJ1dGlvbkRheSBpbml0aWFsIGNvbnRyaWJ1dGlvbiBvZiB0aGUgY29udHJpYnV0b3IgaW4gd2VpCiAgICAgKiBsYXN0VXBkYXRlZE9uIGRheSBjb3VudCBmcm9tIE1pbnRpbmcgRXBvY2ggd2hlbiB0aGUgYWNjb3VudCBiYWxhbmNlIHdhcyBsYXN0IHVwZGF0ZWQKICAgICAqIG1pbnRpbmdQb3dlciBJbml0aWFsIE1pbnRpbmcgcG93ZXIgb2YgdGhlIGFkZHJlc3MKICAgICAqIGV4cGlyeUJsb2NrTnVtYmVyIFZhcmlhYmxlIHRvIG1hcmsgZW5kIG9mIE1pbnRpbmcgYWRkcmVzcyBzYWxlLiBTZXQgYnkgdXNlcgogICAgICogbWluUHJpY2VJbkRheSBtaW5pbXVtIHByaWNlIG9mIE1pbnRpbmcgYWRkcmVzcyBpbiBEYXkgdG9rZW5zLiBTZXQgYnkgdXNlcgogICAgICogc3RhdHVzIFNlbGxpbmcgc3RhdHVzIFZhcmlhYmxlIGZvciB0cmFuc2ZlciBNaW50aW5nIGFkZHJlc3MuCiAgICAgKiBzZWxsaW5nUHJpY2VJbkRheSBWYXJpYWJsZSBmb3IgdHJhbnNmZXIgTWludGluZyBhZGRyZXNzLiBQcmljZSBhdCB3aGljaCB0aGUgYWRkcmVzcyBpcyBhY3R1YWxseSBzb2xkCiAgICAgKi8gCiAgICBzdHJ1Y3QgQ29udHJpYnV0b3IgewogICAgICAgIGFkZHJlc3MgYWRyOwogICAgICAgIHVpbnQyNTYgaW5pdGlhbENvbnRyaWJ1dGlvbkRheTsKICAgICAgICB1aW50MjU2IGxhc3RVcGRhdGVkT247IC8vRGF5IGZyb20gTWludGluZyBFcG9jaAogICAgICAgIHVpbnQyNTYgbWludGluZ1Bvd2VyOwogICAgICAgIHVpbnQgZXhwaXJ5QmxvY2tOdW1iZXI7CiAgICAgICAgdWludDI1NiBtaW5QcmljZUluRGF5OwogICAgICAgIHNlbGxpbmdTdGF0dXMgc3RhdHVzOwogICAgfQoKICAgIC8qIFN0b3JlcyBtYXhpbXVtIGRheXMgZm9yIHdoaWNoIG1pbnRpbmcgd2lsbCBoYXBwZW4gc2luY2UgbWludGluZyBlcG9jaCAqLwogICAgdWludDI1NiBwdWJsaWMgbWF4TWludGluZ0RheXMgPSAxMDk1OwoKICAgIC8qIE1hcHBpbmcgdG8gc3RvcmUgaWQgb2YgZWFjaCBtaW50aW5nIGFkZHJlc3MgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGlkT2Y7CiAgICAvKiBNYXBwaW5nIGZyb20gaWQgb2YgZWFjaCBtaW50aW5nIGFkZHJlc3MgdG8gdGhlaXIgcmVzcGVjdGl2ZSBzdHJ1Y3R1cmVzICovCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IENvbnRyaWJ1dG9yKSBwdWJsaWMgY29udHJpYnV0b3JzOwogICAgLyogbWFwcGluZyB0byBzdG9yZSB1bml4IHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBtaW50aW5nIGFkZHJlc3MgaXMgaXNzdWVkIHRvIGVhY2ggdGVhbSBtZW1iZXIgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHRlYW1Jc3N1ZWRUaW1lc3RhbXA7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBzb2xkQWRkcmVzc2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgc2VsbGluZ1ByaWNlSW5EYXlPZjsKCiAgICAvKiBTdG9yZXMgdGhlIGlkIG9mIHRoZSBmaXJzdCAgY29udHJpYnV0b3IgKi8KICAgIHVpbnQyNTYgcHVibGljIGZpcnN0Q29udHJpYnV0b3JJZDsKICAgIC8qIFN0b3JlcyB0b3RhbCBQcmUgKyBQb3N0IElDTyBUaW1lTWludHMgKi8KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsTm9ybWFsQ29udHJpYnV0b3JJZHM7CiAgICAvKiBTdG9yZXMgdG90YWwgTm9ybWFsIFRpbWVNaW50cyBhbGxvY2F0ZWQgKi8KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsTm9ybWFsQ29udHJpYnV0b3JJZHNBbGxvY2F0ZWQgPSAwOwogICAgCiAgICAvKiBTdG9yZXMgdGhlIGlkIG9mIHRoZSBmaXJzdCB0ZWFtIFRpbWVNaW50ICovCiAgICB1aW50MjU2IHB1YmxpYyBmaXJzdFRlYW1Db250cmlidXRvcklkOwogICAgLyogU3RvcmVzIHRoZSB0b3RhbCB0ZWFtIFRpbWVNaW50cyAqLwogICAgdWludDI1NiBwdWJsaWMgdG90YWxUZWFtQ29udHJpYnV0b3JJZHM7CiAgICAvKiBTdG9yZXMgdG90YWwgdGVhbSBUaW1lTWludHMgYWxsb2NhdGVkICovCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFRlYW1Db250cmlidXRvcklkc0FsbG9jYXRlZCA9IDA7CgogICAgLyogU3RvcmVzIHRoZSBpZCBvZiB0aGUgZmlyc3QgUG9zdCBJQ08gY29udHJpYnV0b3IgKGZvciBhdWN0aW9uYWJsZSBUaW1lTWludHMpICovCiAgICB1aW50MjU2IHB1YmxpYyBmaXJzdFBvc3RJY29Db250cmlidXRvcklkOwogICAgLyogU3RvcmVzIHRvdGFsIFBvc3QgSUNPIFRpbWVNaW50cyAoZm9yIGF1Y3Rpb24pICovCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFBvc3RJY29Db250cmlidXRvcklkczsKICAgIC8qIFN0b3JlcyB0b3RhbCBBdWN0aW9uIFRpbWVNaW50cyBhbGxvY2F0ZWQgKi8KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzQWxsb2NhdGVkID0gMDsKCiAgICAvKiBNYXhpbXVtIG51bWJlciBvZiBhZGRyZXNzICovCiAgICB1aW50MjU2IHB1YmxpYyBtYXhBZGRyZXNzZXM7CgogICAgLyogTWluIE1pbnRpbmcgcG93ZXIgd2l0aCAxOSBkZWNpbWFsczogMC41JSA6IDUwMDAwMDAwMDAwMDAwMDAwMDAgKi8KICAgIHVpbnQyNTYgcHVibGljIG1pbk1pbnRpbmdQb3dlcjsKICAgIC8qIE1heCBNaW50aW5nIHBvd2VyIHdpdGggMTkgZGVjaW1hbHM6IDElIDogMTAwMDAwMDAwMDAwMDAwMDAwMDAgKi8KICAgIHVpbnQyNTYgcHVibGljIG1heE1pbnRpbmdQb3dlcjsKICAgIC8qIEhhbHZpbmcgY3ljbGUgaW4gZGF5cyAoODgpICovCiAgICB1aW50MjU2IHB1YmxpYyBoYWx2aW5nQ3ljbGU7IAogICAgLyogVW5peCB0aW1lc3RhbXAgd2hlbiBtaW50aW5nIGlzIHRvIGJlIHN0YXJ0ZWQgKi8KICAgIHVpbnQyNTYgcHVibGljIGluaXRpYWxCbG9ja1RpbWVzdGFtcDsKICAgIC8qIEZsYWcgdG8gcHJldmVudCBzZXR0aW5nIGluaXRpYWxCbG9ja1RpbWVzdGFtcCBtb3JlIHRoYW4gb25jZSAqLwogICAgYm9vbCBwdWJsaWMgaXNJbml0aWFsQmxvY2tUaW1lc3RhbXBTZXQ7CiAgICAvKiBudW1iZXIgb2YgZGVjaW1hbHMgaW4gbWludGluZyBwb3dlciAqLwogICAgdWludDI1NiBwdWJsaWMgbWludGluZ0RlYzsgCgogICAgLyogTWluaW11bSBCYWxhbmNlIGluIERheSB0b2tlbnMgcmVxdWlyZWQgdG8gc2VsbCBhIG1pbnRpbmcgYWRkcmVzcyAqLwogICAgdWludDI1NiBwdWJsaWMgbWluQmFsYW5jZVRvU2VsbDsKICAgIC8qIFRlYW0gYWRkcmVzcyBsb2NrIGRvd24gcGVyaW9kIGZyb20gaXNzdWVkIHRpbWUsIGluIHNlY29uZHMgKi8KICAgIHVpbnQyNTYgcHVibGljIHRlYW1Mb2NrUGVyaW9kSW5TZWM7ICAvL0luaXRpYWxpemUgYW5kIHNldCBmdW5jdGlvbgogICAgLyogRHVyYXRpb24gaW4gc2VjcyB0aGF0IHdlIGNvbnNpZGVyIGFzIGEgZGF5LiAoRm9yIHRlc3QgZGVwbG95bWVudCBwdXJwb3NlcywgCiAgICAgICBpZiB3ZSB3YW50IHRvIGRlY3JlYXNlIGxlbmd0aCBvZiBhIGRheS4gZGVmYXVsdDogODQ2MDApKi8KICAgIHVpbnQyNTYgcHVibGljIERheUluU2VjczsKCiAgICBldmVudCBVcGRhdGVkVG9rZW5JbmZvcm1hdGlvbihzdHJpbmcgbmV3TmFtZSwgc3RyaW5nIG5ld1N5bWJvbCk7IAogICAgZXZlbnQgTWludGluZ0FkclRyYW5zZmVycmVkKHVpbnQgaWQsIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0byk7CiAgICBldmVudCBDb250cmlidXRvckFkZGVkKGFkZHJlc3MgYWRyLCB1aW50IGlkKTsKICAgIGV2ZW50IFRpbWVNaW50T25TYWxlKHVpbnQgaWQsIGFkZHJlc3Mgc2VsbGVyLCB1aW50IG1pblByaWNlSW5EYXksIHVpbnQgZXhwaXJ5QmxvY2tOdW1iZXIpOwogICAgZXZlbnQgVGltZU1pbnRTb2xkKHVpbnQgaWQsIGFkZHJlc3MgYnV5ZXIsIHVpbnQgb2ZmZXJJbkRheSk7CiAgICBldmVudCBQb3N0SW52ZXN0ZWQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQsIHVpbnQgY3VzdG9tZXJJZCwgdWludCBjb250cmlidXRvcklkKTsKICAgIAogICAgZXZlbnQgVGVhbUFkZHJlc3NBZGRlZChhZGRyZXNzIHRlYW1BZGRyZXNzLCB1aW50IGlkKTsKICAgIC8vIFRlbGwgdXMgaW52ZXN0IHdhcyBzdWNjZXNzCiAgICBldmVudCBJbnZlc3RlZChhZGRyZXNzIHJlY2VpdmVyLCB1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludCBjdXN0b21lcklkLCB1aW50IGNvbnRyaWJ1dG9ySWQpOwoKICAgIG1vZGlmaWVyIG9ubHlDb250cmlidXRvcih1aW50IGlkKXsKICAgICAgICByZXF1aXJlKGlzVmFsaWRDb250cmlidXRvcklkKGlkKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBzdHJpbmcgcHVibGljIG5hbWU7IAoKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAKCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7IAoKICAgIC8qKgogICAgICAgICogQ29uc3RydWN0IHRoZSB0b2tlbi4KICAgICAgICAqCiAgICAgICAgKiBUaGlzIHRva2VuIG11c3QgYmUgY3JlYXRlZCB0aHJvdWdoIGEgdGVhbSBtdWx0aXNpZyB3YWxsZXQsIHNvIHRoYXQgaXQgaXMgb3duZWQgYnkgdGhhdCB3YWxsZXQuCiAgICAgICAgKgogICAgICAgICogQHBhcmFtIF9uYW1lIFRva2VuIG5hbWUKICAgICAgICAqIEBwYXJhbSBfc3ltYm9sIFRva2VuIHN5bWJvbCAtIHNob3VsZCBiZSBhbGwgY2FwcwogICAgICAgICogQHBhcmFtIF9pbml0aWFsU3VwcGx5IEhvdyBtYW55IHRva2VucyB3ZSBzdGFydCB3aXRoCiAgICAgICAgKiBAcGFyYW0gX2RlY2ltYWxzIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcwogICAgICAgICogX21pbnRhYmxlIEFyZSBuZXcgdG9rZW5zIGNyZWF0ZWQgb3ZlciB0aGUgY3Jvd2RzYWxlIG9yIGRvIHdlIGRpc3RyaWJ1dGUgb25seSB0aGUgaW5pdGlhbCBzdXBwbHk/CiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIERheVRva2VuKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQgX2luaXRpYWxTdXBwbHksIHVpbnQ4IF9kZWNpbWFscywgCiAgICAgICAgYm9vbCBfbWludGFibGUsIHVpbnQgX21heEFkZHJlc3NlcywgdWludCBfZmlyc3RUZWFtQ29udHJpYnV0b3JJZCwgdWludCBfdG90YWxUZWFtQ29udHJpYnV0b3JJZHMsIAogICAgICAgIHVpbnQgX3RvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzLCB1aW50MjU2IF9taW5NaW50aW5nUG93ZXIsIHVpbnQyNTYgX21heE1pbnRpbmdQb3dlciwgdWludCBfaGFsdmluZ0N5Y2xlLCAKICAgICAgICB1aW50MjU2IF9taW5CYWxhbmNlVG9TZWxsLCB1aW50MjU2IF9kYXlJblNlY3MsIHVpbnQyNTYgX3RlYW1Mb2NrUGVyaW9kSW5TZWMpIAogICAgICAgIFVwZ3JhZGVhYmxlVG9rZW4obXNnLnNlbmRlcikgewogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSBhbnkgYWRkcmVzcywgY2FuIGJlIHRyYW5zZmVycmVkCiAgICAgICAgLy8gdG8gdGVhbSBtdWx0aXNpZyB2aWEgY2hhbmdlT3duZXIoKSwKICAgICAgICAvLyBhbHNvIHJlbWVtYmVyIHRvIGNhbGwgc2V0VXBncmFkZU1hc3RlcigpCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOyAKICAgICAgICBuYW1lID0gX25hbWU7IAogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7ICAKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OyAKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsgCiAgICAgICAgLy8gQ3JlYXRlIGluaXRpYWxseSBhbGwgYmFsYW5jZSBvbiB0aGUgdGVhbSBtdWx0aXNpZwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5OyAKICAgICAgICBtYXhBZGRyZXNzZXMgPSBfbWF4QWRkcmVzc2VzOwogICAgICAgIHJlcXVpcmUobWF4QWRkcmVzc2VzID4gMSk7IC8vIGVsc2UgZGl2aXNpb24gYnkgemVybyB3aWxsIG9jY3VyIGluIHNldEluaXRpYWxNaW50aW5nUG93ZXJPZgogICAgICAgIAogICAgICAgIGZpcnN0Q29udHJpYnV0b3JJZCA9IDE7CiAgICAgICAgdG90YWxOb3JtYWxDb250cmlidXRvcklkcyA9IG1heEFkZHJlc3NlcyAtIF90b3RhbFRlYW1Db250cmlidXRvcklkcyAtIF90b3RhbFBvc3RJY29Db250cmlidXRvcklkczsKCiAgICAgICAgLy8gY2hlY2sgdGltZU1pbnQgdG90YWwgaXMgc2FuZQogICAgICAgIHJlcXVpcmUodG90YWxOb3JtYWxDb250cmlidXRvcklkcyA+PSAxKTsKCiAgICAgICAgZmlyc3RUZWFtQ29udHJpYnV0b3JJZCA9IF9maXJzdFRlYW1Db250cmlidXRvcklkOwogICAgICAgIHRvdGFsVGVhbUNvbnRyaWJ1dG9ySWRzID0gX3RvdGFsVGVhbUNvbnRyaWJ1dG9ySWRzOwogICAgICAgIHRvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzID0gX3RvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzOwogICAgICAgIAogICAgICAgIC8vIGNhbGN1bGF0ZSBmaXJzdCBjb250cmlidXRvciBpZCB0byBiZSBhdWN0aW9uZWQgcG9zdCBJQ08KICAgICAgICBmaXJzdFBvc3RJY29Db250cmlidXRvcklkID0gbWF4QWRkcmVzc2VzIC0gdG90YWxQb3N0SWNvQ29udHJpYnV0b3JJZHMgKyAxOwogICAgICAgIG1pbk1pbnRpbmdQb3dlciA9IF9taW5NaW50aW5nUG93ZXI7CiAgICAgICAgbWF4TWludGluZ1Bvd2VyID0gX21heE1pbnRpbmdQb3dlcjsKICAgICAgICBoYWx2aW5nQ3ljbGUgPSBfaGFsdmluZ0N5Y2xlOwogICAgICAgIC8vIHNldHRpbmcgZnV0dXJlIGRhdGUgZmFyIGZhciBhd2F5LCB5ZWFyIDIwMjAsIAogICAgICAgIC8vIGNhbGwgc2V0SW5pdGlhbEJsb2NrVGltZXN0YW1wIHRvIHNldCBwcm9wZXIgdGltZXN0YW1wCiAgICAgICAgaW5pdGlhbEJsb2NrVGltZXN0YW1wID0gMTU3NzgzNjgwMDsKICAgICAgICBpc0luaXRpYWxCbG9ja1RpbWVzdGFtcFNldCA9IGZhbHNlOwogICAgICAgIC8vIHVzZSBzZXRNaW50aW5nRGVjIHRvIGNoYW5nZSB0aGlzCiAgICAgICAgbWludGluZ0RlYyA9IDE5OwogICAgICAgIG1pbkJhbGFuY2VUb1NlbGwgPSBfbWluQmFsYW5jZVRvU2VsbDsKICAgICAgICBEYXlJblNlY3MgPSBfZGF5SW5TZWNzOwogICAgICAgIHRlYW1Mb2NrUGVyaW9kSW5TZWMgPSBfdGVhbUxvY2tQZXJpb2RJblNlYzsKICAgICAgICAKICAgICAgICBpZiAodG90YWxTdXBwbHkgPiAwKSB7CiAgICAgICAgICAgIE1pbnRlZChvd25lciwgdG90YWxTdXBwbHkpOyAKICAgICAgICB9CgogICAgICAgIGlmICghX21pbnRhYmxlKSB7CiAgICAgICAgICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7IAogICAgICAgICAgICByZXF1aXJlKHRvdGFsU3VwcGx5ICE9IDApOyAKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFVzZWQgdG8gc2V0IHRpbWVzdGFtcCBhdCB3aGljaCBtaW50aW5nIHBvd2VyIG9mIFRpbWVNaW50cyBpcyBhY3RpdmF0ZWQKICAgICogQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG93bmVyCiAgICAqIEBwYXJhbSBfaW5pdGlhbEJsb2NrVGltZXN0YW1wIHRpbWVzdGFtcCB0byBiZSBzZXQuCiAgICAqLwogICAgZnVuY3Rpb24gc2V0SW5pdGlhbEJsb2NrVGltZXN0YW1wKHVpbnQgX2luaXRpYWxCbG9ja1RpbWVzdGFtcCkgaW50ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFpc0luaXRpYWxCbG9ja1RpbWVzdGFtcFNldCk7CiAgICAgICAgaXNJbml0aWFsQmxvY2tUaW1lc3RhbXBTZXQgPSB0cnVlOwogICAgICAgIGluaXRpYWxCbG9ja1RpbWVzdGFtcCA9IF9pbml0aWFsQmxvY2tUaW1lc3RhbXA7CiAgICB9CgogICAgLyoqCiAgICAqIGNoZWNrIGlmIG1pbnRpbmluZyBwb3dlciBpcyBhY3RpdmF0ZWQgYW5kIERheSB0b2tlbiBhbmQgVGltZW1pbnQgdHJhbnNmZXIgaXMgZW5hYmxlZAogICAgKi8KICAgIGZ1bmN0aW9uIGlzRGF5VG9rZW5BY3RpdmF0ZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sIGlzQWN0aXZhdGVkKSB7CiAgICAgICAgcmV0dXJuIChibG9jay50aW1lc3RhbXAgPj0gaW5pdGlhbEJsb2NrVGltZXN0YW1wKTsKICAgIH0KCgogICAgLyoqCiAgICAqIHRvIGNoZWNrIGlmIGFuIGlkIGlzIGEgdmFsaWQgY29udHJpYnV0b3IKICAgICogQHBhcmFtIF9pZCBjb250cmlidXRvciBpZCB0byBjaGVjay4KICAgICovCiAgICBmdW5jdGlvbiBpc1ZhbGlkQ29udHJpYnV0b3JJZCh1aW50IF9pZCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBpc1ZhbGlkQ29udHJpYnV0b3IpIHsKICAgICAgICByZXR1cm4gKF9pZCA+IDAgJiYgX2lkIDw9IG1heEFkZHJlc3NlcyAmJiBjb250cmlidXRvcnNbX2lkXS5hZHIgIT0gMCAKICAgICAgICAgICAgJiYgaWRPZltjb250cmlidXRvcnNbX2lkXS5hZHJdID09IF9pZCk7IC8vIGNyb3NzIGNoZWNraW5nCiAgICB9CgogICAgLyoqCiAgICAqIHRvIGNoZWNrIGlmIGFuIGFkZHJlc3MgaXMgYSB2YWxpZCBjb250cmlidXRvcgogICAgKiBAcGFyYW0gX2FkZHJlc3MgIGNvbnRyaWJ1dG9yIGFkZHJlc3MgdG8gY2hlY2suCiAgICAqLwogICAgZnVuY3Rpb24gaXNWYWxpZENvbnRyaWJ1dG9yQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sIGlzVmFsaWRDb250cmlidXRvcikgewogICAgICAgIHJldHVybiBpc1ZhbGlkQ29udHJpYnV0b3JJZChpZE9mW19hZGRyZXNzXSk7CiAgICB9CgoKICAgIC8qKgogICAgKiBJbiBjYXNlIG9mIFRlYW0gYWRkcmVzcyBjaGVjayBpZiBsb2NrLWluIHBlcmlvZCBpcyBvdmVyIChyZXR1cm5zIHRydWUgZm9yIGFsbCBub24gdGVhbSBhZGRyZXNzZXMpCiAgICAqIEBwYXJhbSBfYWRkcmVzcyB0ZWFtIGFkZHJlc3MgdG8gY2hlY2sgbG9jayBpbiBwZXJpb2QgZm9yLgogICAgKi8KICAgIGZ1bmN0aW9uIGlzVGVhbUxvY2tJblBlcmlvZE92ZXJJZlRlYW1BZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgaXNMb2NrSW5QZXJpb2RPdmVyKSB7CiAgICAgICAgaXNMb2NrSW5QZXJpb2RPdmVyID0gdHJ1ZTsKICAgICAgICBpZiAodGVhbUlzc3VlZFRpbWVzdGFtcFtfYWRkcmVzc10gIT0gMCkgewogICAgICAgICAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCAtIHRlYW1Jc3N1ZWRUaW1lc3RhbXBbX2FkZHJlc3NdIDwgdGVhbUxvY2tQZXJpb2RJblNlYykKICAgICAgICAgICAgICAgICAgICBpc0xvY2tJblBlcmlvZE92ZXIgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBpc0xvY2tJblBlcmlvZE92ZXI7CiAgICB9CgogICAgLyoqCiAgICAqIFVzZWQgdG8gc2V0IG1pbnRpbmdEZWMKICAgICogQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG93bmVyCiAgICAqIEBwYXJhbSBfbWludGluZ0RlYyBib3VudHkgdG8gYmUgc2V0LgogICAgKi8KICAgIGZ1bmN0aW9uIHNldE1pbnRpbmdEZWModWludDI1NiBfbWludGluZ0RlYykgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKCFpc0luaXRpYWxCbG9ja1RpbWVzdGFtcFNldCk7CiAgICAgICAgbWludGluZ0RlYyA9IF9taW50aW5nRGVjOwogICAgfQoKICAgIC8qKgogICAgICAgICogV2hlbiB0b2tlbiBpcyByZWxlYXNlZCB0byBiZSB0cmFuc2ZlcmFibGUsIGVuZm9yY2Ugbm8gbmV3IHRva2VucyBjYW4gYmUgY3JlYXRlZC4KICAgICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZVRva2VuVHJhbnNmZXIoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGlzSW5pdGlhbEJsb2NrVGltZXN0YW1wU2V0KTsKICAgICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOyAKICAgICAgICBzdXBlci5yZWxlYXNlVG9rZW5UcmFuc2ZlcigpOyAKICAgIH0KCiAgICAvKioKICAgICAgICAqIEFsbG93IHVwZ3JhZGUgYWdlbnQgZnVuY3Rpb25hbGl0eSBraWNrIGluIG9ubHkgaWYgdGhlIGNyb3dkc2FsZSB3YXMgc3VjY2Vzcy4KICAgICAgICAqLwogICAgZnVuY3Rpb24gY2FuVXBncmFkZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gcmVsZWFzZWQgJiYgc3VwZXIuY2FuVXBncmFkZSgpOyAKICAgIH0KCiAgICAvKioKICAgICAgICAqIE93bmVyIGNhbiB1cGRhdGUgdG9rZW4gaW5mb3JtYXRpb24gaGVyZQogICAgICAgICovCiAgICBmdW5jdGlvbiBzZXRUb2tlbkluZm9ybWF0aW9uKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wpIG9ubHlPd25lciB7CiAgICAgICAgbmFtZSA9IF9uYW1lOyAKICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOyAKICAgICAgICBVcGRhdGVkVG9rZW5JbmZvcm1hdGlvbihuYW1lLCBzeW1ib2wpOyAKICAgIH0KCiAgICAvKioKICAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGhhc2UuICAKICAgICAgICAqIE5vdGU6IFBoYXNlIHN0YXJ0cyB3aXRoIDEKICAgICAgICAqIEBwYXJhbSBfZGF5IE51bWJlciBvZiBkYXlzIHNpbmNlIE1pbnRpbmcgRXBvY2gKICAgICAgICAqLwogICAgZnVuY3Rpb24gZ2V0UGhhc2VDb3VudCh1aW50IF9kYXkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHBoYXNlKSB7CiAgICAgICAgcGhhc2UgPSAoX2RheS9oYWx2aW5nQ3ljbGUpICsgMTsgCiAgICAgICAgcmV0dXJuIChwaGFzZSk7IAogICAgfQogICAgLyoqCiAgICAgICAgKiBSZXR1cm5zIGN1cnJlbnQgZGF5IG51bWJlciBzaW5jZSBtaW50aW5nIGVwb2NoIAogICAgICAgICogb3IgemVybyBpZiBpbml0aWFsQmxvY2tUaW1lc3RhbXAgaXMgaW4gZnV0dXJlIG9yIGl0cyBEYXlaZXJvLgogICAgICAgICovCiAgICBmdW5jdGlvbiBnZXREYXlDb3VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IGRheVNpbmNlTWludGluZ0Vwb2NoKSB7CiAgICAgICAgZGF5U2luY2VNaW50aW5nRXBvY2ggPSAwOwogICAgICAgIGlmIChpc0RheVRva2VuQWN0aXZhdGVkKCkpCiAgICAgICAgICAgIGRheVNpbmNlTWludGluZ0Vwb2NoID0gKGJsb2NrLnRpbWVzdGFtcCAtIGluaXRpYWxCbG9ja1RpbWVzdGFtcCkvRGF5SW5TZWNzOyAKCiAgICAgICAgcmV0dXJuIGRheVNpbmNlTWludGluZ0Vwb2NoOyAKICAgIH0KICAgIC8qKgogICAgICAgICogQ2FsY3VsYXRlcyBhbmQgU2V0cyB0aGUgbWludGluZyBwb3dlciBvZiBhIHBhcnRpY3VsYXIgaWQuCiAgICAgICAgKiBDYWxsZWQgYmVmb3JlIE1pbnRpbmcgRXBvY2ggYnkgY29uc3RydWN0b3IKICAgICAgICAqIEBwYXJhbSBfaWQgaWQgb2YgdGhlIGFkZHJlc3Mgd2hvc2UgbWludGluZyBwb3dlciBpcyB0byBiZSBzZXQuCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEluaXRpYWxNaW50aW5nUG93ZXJPZih1aW50MjU2IF9pZCkgaW50ZXJuYWwgb25seUNvbnRyaWJ1dG9yKF9pZCkgewogICAgICAgIGNvbnRyaWJ1dG9yc1tfaWRdLm1pbnRpbmdQb3dlciA9IAogICAgICAgICAgICAobWF4TWludGluZ1Bvd2VyIC0gKChfaWQtMSkgKiAobWF4TWludGluZ1Bvd2VyIC0gbWluTWludGluZ1Bvd2VyKS8obWF4QWRkcmVzc2VzLTEpKSk7IAogICAgfQoKICAgIC8qKgogICAgICAgICogUmV0dXJucyBtaW50aW5nIHBvd2VyIG9mIGEgcGFydGljdWxhciBpZC4KICAgICAgICAqIEBwYXJhbSBfaWQgQ29udHJpYnV0aW9uIGlkIHdob3NlIG1pbnRpbmcgcG93ZXIgaXMgdG8gYmUgcmV0dXJuZWQKICAgICAgICAqLwogICAgZnVuY3Rpb24gZ2V0TWludGluZ1Bvd2VyQnlJZCh1aW50IF9pZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgbWludGluZ1Bvd2VyKSB7CiAgICAgICAgcmV0dXJuIGNvbnRyaWJ1dG9yc1tfaWRdLm1pbnRpbmdQb3dlci8oMioqKGdldFBoYXNlQ291bnQoZ2V0RGF5Q291bnQoKSktMSkpOyAKICAgIH0KCiAgICAvKioKICAgICAgICAqIFJldHVybnMgbWludGluZyBwb3dlciBvZiBhIHBhcnRpY3VsYXIgYWRkcmVzcy4KICAgICAgICAqIEBwYXJhbSBfYWRyIEFkZHJlc3Mgd2hvc2UgbWludGluZyBwb3dlciBpcyB0byBiZSByZXR1cm5lZAogICAgICAgICovCiAgICBmdW5jdGlvbiBnZXRNaW50aW5nUG93ZXJCeUFkZHJlc3MoYWRkcmVzcyBfYWRyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBtaW50aW5nUG93ZXIpIHsKICAgICAgICByZXR1cm4gZ2V0TWludGluZ1Bvd2VyQnlJZChpZE9mW19hZHJdKTsKICAgIH0KCgogICAgLyoqCiAgICAgICAgKiBDYWxjdWxhdGVzIGFuZCByZXR1cm5zIHRoZSBiYWxhbmNlIGJhc2VkIG9uIHRoZSBtaW50aW5nIHBvd2VyLCBkYXkgYW5kIHBoYXNlLgogICAgICAgICogQ2FuIG9ubHkgYmUgY2FsbGVkIGludGVybmFsbHkKICAgICAgICAqIENhbiBjYWxjdWxhdGUgYmFsYW5jZSBiYXNlZCBvbiBsYXN0IHVwZGF0ZWQuCiAgICAgICAgKiBAcGFyYW0gX2lkIGlkIHdob3NlIGJhbG5jZSBpcyB0byBiZSBjYWxjdWxhdGVkCiAgICAgICAgKiBAcGFyYW0gX2RheUNvdW50IGRheSBjb3VudCB1cHRvIHdoaWNoIGJhbGFuY2UgaXMgdG8gYmUgdXBkYXRlZAogICAgICAgICovCiAgICBmdW5jdGlvbiBhdmFpbGFibGVCYWxhbmNlT2YodWludDI1NiBfaWQsIHVpbnQgX2RheUNvdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBiYWxhbmNlID0gYmFsYW5jZXNbY29udHJpYnV0b3JzW19pZF0uYWRyXTsgCiAgICAgICAgdWludCBtYXhVcGRhdGVEYXlzID0gX2RheUNvdW50IDwgbWF4TWludGluZ0RheXMgPyBfZGF5Q291bnQgOiBtYXhNaW50aW5nRGF5czsKICAgICAgICB1aW50IGkgPSBjb250cmlidXRvcnNbX2lkXS5sYXN0VXBkYXRlZE9uICsgMTsKICAgICAgICB3aGlsZShpIDw9IG1heFVwZGF0ZURheXMpIHsKICAgICAgICAgICAgIHVpbnQgcGhhc2UgPSBnZXRQaGFzZUNvdW50KGkpOwogICAgICAgICAgICAgdWludCBwaGFzZUVuZERheSA9IHBoYXNlICogaGFsdmluZ0N5Y2xlIC0gMTsgLy8gYXMgZmlyc3QgZGF5IGlzIDAKICAgICAgICAgICAgIHVpbnQgY29uc3RhbnRGYWN0b3IgPSBjb250cmlidXRvcnNbX2lkXS5taW50aW5nUG93ZXIgLyAyKioocGhhc2UtMSk7CgogICAgICAgICAgICBmb3IgKHVpbnQgaiA9IGk7IGogPD0gcGhhc2VFbmREYXkgJiYgaiA8PSBtYXhVcGRhdGVEYXlzOyBqKyspIHsKICAgICAgICAgICAgICAgIGJhbGFuY2UgPSBzYWZlQWRkKCBiYWxhbmNlLCBjb25zdGFudEZhY3RvciAqIGJhbGFuY2UgLyAxMCoqKG1pbnRpbmdEZWMgKyAyKSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpID0gajsKICAgICAgICAgICAgCiAgICAgICAgfSAKICAgICAgICByZXR1cm4gYmFsYW5jZTsgCiAgICB9CgogICAgLyoqCiAgICAgICAgKiBVcGRhdGVzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgaWQgaW4gaXRzIHN0cnVjdHVyZSBhbmQgYWxzbyBpbiB0aGUgYmFsYW5jZXNbXSBtYXBwaW5nLgogICAgICAgICogcmV0dXJucyB0cnVlIGlmIHN1Y2Nlc3NmdWwuCiAgICAgICAgKiBPbmx5IGZvciBpbnRlcm5hbCBjYWxscy4gTm90IHB1YmxpYy4KICAgICAgICAqIEBwYXJhbSBfaWQgaWQgd2hvc2UgYmFsYW5jZSBpcyB0byBiZSB1cGRhdGVkLgogICAgICAgICovCiAgICBmdW5jdGlvbiB1cGRhdGVCYWxhbmNlT2YodWludDI1NiBfaWQpIGludGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vIGNoZWNrIGlmIGl0cyBjb250cmlidXRvcgogICAgICAgIGlmIChpc1ZhbGlkQ29udHJpYnV0b3JJZChfaWQpKSB7CiAgICAgICAgICAgIHVpbnQgZGF5Q291bnQgPSBnZXREYXlDb3VudCgpOwogICAgICAgICAgICAvLyBwcm9jZWVkIG9ubHkgaWYgbm90IGFscmVhZHkgdXBkYXRlZCB0b2RheQogICAgICAgICAgICBpZiAoY29udHJpYnV0b3JzW19pZF0ubGFzdFVwZGF0ZWRPbiAhPSBkYXlDb3VudCAmJiBjb250cmlidXRvcnNbX2lkXS5sYXN0VXBkYXRlZE9uIDwgbWF4TWludGluZ0RheXMpIHsKICAgICAgICAgICAgICAgIGFkZHJlc3MgYWRyID0gY29udHJpYnV0b3JzW19pZF0uYWRyOwogICAgICAgICAgICAgICAgdWludCBvbGRCYWxhbmNlID0gYmFsYW5jZXNbYWRyXTsKICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSwgb2xkQmFsYW5jZSk7CiAgICAgICAgICAgICAgICB1aW50IG5ld0JhbGFuY2UgPSBhdmFpbGFibGVCYWxhbmNlT2YoX2lkLCBkYXlDb3VudCk7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1thZHJdID0gbmV3QmFsYW5jZTsKICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgbmV3QmFsYW5jZSk7CiAgICAgICAgICAgICAgICBjb250cmlidXRvcnNbX2lkXS5sYXN0VXBkYXRlZE9uID0gZGF5Q291bnQ7CiAgICAgICAgICAgICAgICBUcmFuc2ZlcigwLCBhZHIsIG5ld0JhbGFuY2UgLSBvbGRCYWxhbmNlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgoKICAgIC8qKgogICAgICAgICogU3RhbmRhcmQgRVJDMjAgZnVuY3Rpb24gb3ZlcnJpZGRlbi4KICAgICAgICAqIFJldHVybnMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYmFsYW5jZSBvbiBmbHkgb25seSBpZiBpdCBpcyBhIG1pbnRpbmcgYWRkcmVzcyBlbHNlIAogICAgICAgICogc2ltcGx5IHJldHVybnMgYmFsYW5jZSBmcm9tIGJhbGFuY2VzW10gbWFwcGluZy4KICAgICAgICAqIEZvciBwdWJsaWMgY2FsbHMuCiAgICAgICAgKiBAcGFyYW0gX2FkciBhZGRyZXNzIHdob3NlIGJhbGFuY2UgaXMgdG8gYmUgcmV0dXJuZWQuCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9hZHIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgICAgIHVpbnQgaWQgPSBpZE9mW19hZHJdOwogICAgICAgIGlmIChpZCAhPSAwKQogICAgICAgICAgICByZXR1cm4gYmFsYW5jZUJ5SWQoaWQpOwogICAgICAgIGVsc2UgCiAgICAgICAgICAgIHJldHVybiBiYWxhbmNlc1tfYWRyXTsgCiAgICB9CgoKICAgIC8qKgogICAgICAgICogU3RhbmRhcmQgRVJDMjAgZnVuY3Rpb24gb3ZlcnJpZGRlbi4KICAgICAgICAqIFJldHVybnMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBpZC4KICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGJhbGFuY2Ugb24gZmx5IG9ubHkgaWYgaXQgaXMgYSBtaW50aW5nIGFkZHJlc3MgZWxzZSAKICAgICAgICAqIHNpbXBseSByZXR1cm5zIGJhbGFuY2UgZnJvbSBiYWxhbmNlc1tdIG1hcHBpbmcuCiAgICAgICAgKiBGb3IgcHVibGljIGNhbGxzLgogICAgICAgICogQHBhcmFtIF9pZCBhZGRyZXNzIHdob3NlIGJhbGFuY2UgaXMgdG8gYmUgcmV0dXJuZWQuCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VCeUlkKHVpbnQgX2lkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgYWRkcmVzcyBhZHIgPSBjb250cmlidXRvcnNbX2lkXS5hZHI7IAogICAgICAgIGlmIChpc0RheVRva2VuQWN0aXZhdGVkKCkpIHsKICAgICAgICAgICAgaWYgKGlzVmFsaWRDb250cmlidXRvcklkKF9pZCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoIGF2YWlsYWJsZUJhbGFuY2VPZihfaWQsIGdldERheUNvdW50KCkpICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW2Fkcl07IAogICAgfQoKICAgIC8qKgogICAgICAgICogUmV0dXJucyB0b3RhbFN1cHBseSBvZiBEQVkgdG9rZW5zLgogICAgICAgICovCiAgICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5OwogICAgfQoKICAgIC8qKiBGdW5jdGlvbiB0byB1cGRhdGUgYmFsYW5jZSBvZiBhIFRpbWVtaW50CiAgICAgICAgKiByZXR1cm5zIHRydWUgaWYgYmFsYW5jZSB1cGRhdGVkLCBmYWxzZSBvdGhlcndpc2UKICAgICAgICAqIEBwYXJhbSBfaWQgVGltZU1pbnQgdG8gdXBkYXRlCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWVNaW50QmFsYW5jZSh1aW50IF9pZCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKGlzRGF5VG9rZW5BY3RpdmF0ZWQoKSk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZUJhbGFuY2VPZihfaWQpOwogICAgfQoKICAgIC8qKiBGdW5jdGlvbiB0byB1cGRhdGUgYmFsYW5jZSBvZiBzZW5kZXIncyBUaW1lbWludAogICAgICAgICogcmV0dXJucyB0cnVlIGlmIGJhbGFuY2UgdXBkYXRlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZU15VGltZU1pbnRCYWxhbmNlKCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKGlzRGF5VG9rZW5BY3RpdmF0ZWQoKSk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZUJhbGFuY2VPZihpZE9mW21zZy5zZW5kZXJdKTsKICAgIH0KCiAgICAvKioKICAgICAgICAqIFN0YW5kYXJkIEVSQzIwIGZ1bmN0aW9uIG92ZXJpZGRlbi4KICAgICAgICAqIFVzZWQgdG8gdHJhbnNmZXIgZGF5IHRva2VucyBmcm9tIGNhbGxlcidzIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHdoaWNoIERheSB0b2tlbnMgYXJlIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgICAgKiBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiBEYXkgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoaXNEYXlUb2tlbkFjdGl2YXRlZCgpKTsKICAgICAgICAvLyBpZiBUZWFtIGFkZHJlc3MsIGNoZWNrIGlmIGxvY2staW4gcGVyaW9kIGlzIG92ZXIKICAgICAgICByZXF1aXJlKGlzVGVhbUxvY2tJblBlcmlvZE92ZXJJZlRlYW1BZGRyZXNzKG1zZy5zZW5kZXIpKTsKCiAgICAgICAgdXBkYXRlQmFsYW5jZU9mKGlkT2ZbbXNnLnNlbmRlcl0pOwoKICAgICAgICAvLyBDaGVjayBzZW5kZXIgYWNjb3VudCBoYXMgZW5vdWdoIGJhbGFuY2UgYW5kIHRyYW5zZmVyIGFtb3VudCBpcyBub24gemVybwogICAgICAgIHJlcXVpcmUgKCBiYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gX3ZhbHVlICYmIF92YWx1ZSAhPSAwICk7IAogICAgICAgIAogICAgICAgIHVwZGF0ZUJhbGFuY2VPZihpZE9mW190b10pOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7IAogICAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7IAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKCiAgICAvKioKICAgICAgICAqIFN0YW5kYXJkIEVSQzIwIFN0YW5kYXJkIFRva2VuIGZ1bmN0aW9uIG92ZXJyaWRkZW4uIEFkZGVkIFRlYW0gYWRkcmVzcyB2ZXN0aW5nIHBlcmlvZCBsb2NrLiAKICAgICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoaXNEYXlUb2tlbkFjdGl2YXRlZCgpKTsKCiAgICAgICAgLy8gaWYgVGVhbSBhZGRyZXNzLCBjaGVjayBpZiBsb2NrLWluIHBlcmlvZCBpcyBvdmVyCiAgICAgICAgcmVxdWlyZShpc1RlYW1Mb2NrSW5QZXJpb2RPdmVySWZUZWFtQWRkcmVzcyhfZnJvbSkpOwoKICAgICAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAgICAgdXBkYXRlQmFsYW5jZU9mKGlkT2ZbX2Zyb21dKTsKCiAgICAgICAgLy8gQ2hlY2sgZnJvbSBhY2NvdW50IGhhcyBlbm91Z2ggYmFsYW5jZSwgdHJhbnNmZXIgYW1vdW50IGlzIG5vbiB6ZXJvIAogICAgICAgIC8vIGFuZCBfdmFsdWUgaXMgYWxsb3dlZCB0byBiZSB0cmFuc2ZlcnJlZAogICAgICAgIHJlcXVpcmUgKCBiYWxhbmNlT2YoX2Zyb20pID49IF92YWx1ZSAmJiBfdmFsdWUgIT0gMCAgJiYgIF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsgCgogICAgICAgIHVwZGF0ZUJhbGFuY2VPZihpZE9mW190b10pOwoKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLyoqIAogICAgICAgICogQWRkIGFueSBjb250cmlidXRvciBzdHJ1Y3R1cmUgKEZvciBldmVyeSBraW5kIG9mIGNvbnRyaWJ1dG9yczogVGVhbS9QcmUtSUNPL0lDTy9UZXN0KQogICAgICAgICogQHBhcmFtIF9hZHIgQWRkcmVzcyBvZiB0aGUgY29udHJpYnV0b3IgdG8gYmUgYWRkZWQgIAogICAgICAgICogQHBhcmFtIF9pbml0aWFsQ29udHJpYnV0aW9uRGF5IEluaXRpYWwgQ29udHJpYnV0aW9uIG9mIHRoZSBjb250cmlidXRvciB0byBiZSBhZGRlZAogICAgICAgICovCiAgZnVuY3Rpb24gYWRkQ29udHJpYnV0b3IodWludCBjb250cmlidXRvcklkLCBhZGRyZXNzIF9hZHIsIHVpbnQgX2luaXRpYWxDb250cmlidXRpb25EYXkpIGludGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShjb250cmlidXRvcklkIDw9IG1heEFkZHJlc3Nlcyk7CiAgICAgICAgLy9hZGRyZXNzIHNob3VsZCBub3QgYmUgYW4gZXhpc3RpbmcgY29udHJpYnV0b3IKICAgICAgICByZXF1aXJlKCFpc1ZhbGlkQ29udHJpYnV0b3JBZGRyZXNzKF9hZHIpKTsKICAgICAgICAvL1RpbWVNaW50IHNob3VsZCBub3QgYmUgYWxyZWFkeSBhbGxvY2F0ZWQKICAgICAgICByZXF1aXJlKCFpc1ZhbGlkQ29udHJpYnV0b3JJZChjb250cmlidXRvcklkKSk7CiAgICAgICAgY29udHJpYnV0b3JzW2NvbnRyaWJ1dG9ySWRdLmFkciA9IF9hZHI7CiAgICAgICAgaWRPZltfYWRyXSA9IGNvbnRyaWJ1dG9ySWQ7CiAgICAgICAgc2V0SW5pdGlhbE1pbnRpbmdQb3dlck9mKGNvbnRyaWJ1dG9ySWQpOwogICAgICAgIGNvbnRyaWJ1dG9yc1tjb250cmlidXRvcklkXS5pbml0aWFsQ29udHJpYnV0aW9uRGF5ID0gX2luaXRpYWxDb250cmlidXRpb25EYXk7CiAgICAgICAgY29udHJpYnV0b3JzW2NvbnRyaWJ1dG9ySWRdLmxhc3RVcGRhdGVkT24gPSBnZXREYXlDb3VudCgpOwogICAgICAgIENvbnRyaWJ1dG9yQWRkZWQoX2FkciwgY29udHJpYnV0b3JJZCk7CiAgICAgICAgY29udHJpYnV0b3JzW2NvbnRyaWJ1dG9ySWRdLnN0YXR1cyA9IHNlbGxpbmdTdGF0dXMuTk9UT05TQUxFOwogICAgfQoKCiAgICAvKiogRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGJ5IG1pbnRpbmcgYWRkcmVzc2VzIGluIG9yZGVyIHRvIHNlbGwgdGhlaXIgYWRkcmVzcwogICAgICAgICogQHBhcmFtIF9taW5QcmljZUluRGF5IE1pbmltdW0gcHJpY2UgaW4gREFZIHRva2VucyBzZXQgYnkgdGhlIHNlbGxlcgogICAgICAgICogQHBhcmFtIF9leHBpcnlCbG9ja051bWJlciBFeHBpcnkgQmxvY2sgTnVtYmVyIHNldCBieSB0aGUgc2VsbGVyCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbGxNaW50aW5nQWRkcmVzcyh1aW50MjU2IF9taW5QcmljZUluRGF5LCB1aW50IF9leHBpcnlCbG9ja051bWJlcikgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKGlzRGF5VG9rZW5BY3RpdmF0ZWQoKSk7CiAgICAgICAgcmVxdWlyZShfZXhwaXJ5QmxvY2tOdW1iZXIgPiBibG9jay5udW1iZXIpOwoKICAgICAgICAvLyBpZiBUZWFtIGFkZHJlc3MsIGNoZWNrIGlmIGxvY2staW4gcGVyaW9kIGlzIG92ZXIKICAgICAgICByZXF1aXJlKGlzVGVhbUxvY2tJblBlcmlvZE92ZXJJZlRlYW1BZGRyZXNzKG1zZy5zZW5kZXIpKTsKCiAgICAgICAgdWludCBpZCA9IGlkT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZShjb250cmlidXRvcnNbaWRdLnN0YXR1cyA9PSBzZWxsaW5nU3RhdHVzLk5PVE9OU0FMRSk7CgogICAgICAgIC8vIHVwZGF0ZSBiYWxhbmNlIG9mIHNlbmRlciBhZGRyZXNzIGJlZm9yZSBjaGVja2luZyBmb3IgbWluaW11bSByZXF1aXJlZCBiYWxhbmNlCiAgICAgICAgdXBkYXRlQmFsYW5jZU9mKGlkKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IG1pbkJhbGFuY2VUb1NlbGwpOwogICAgICAgIGNvbnRyaWJ1dG9yc1tpZF0ubWluUHJpY2VJbkRheSA9IF9taW5QcmljZUluRGF5OwogICAgICAgIGNvbnRyaWJ1dG9yc1tpZF0uZXhwaXJ5QmxvY2tOdW1iZXIgPSBfZXhwaXJ5QmxvY2tOdW1iZXI7CiAgICAgICAgY29udHJpYnV0b3JzW2lkXS5zdGF0dXMgPSBzZWxsaW5nU3RhdHVzLk9OU0FMRTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIG1pbkJhbGFuY2VUb1NlbGwpOwogICAgICAgIGJhbGFuY2VzW3RoaXNdID0gc2FmZUFkZChiYWxhbmNlc1t0aGlzXSwgbWluQmFsYW5jZVRvU2VsbCk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgbWluQmFsYW5jZVRvU2VsbCk7CiAgICAgICAgVGltZU1pbnRPblNhbGUoaWQsIG1zZy5zZW5kZXIsIGNvbnRyaWJ1dG9yc1tpZF0ubWluUHJpY2VJbkRheSwgY29udHJpYnV0b3JzW2lkXS5leHBpcnlCbG9ja051bWJlcik7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8qKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgYnkgbWludGluZyBhZGRyZXNzIGluIG9yZGVyIHRvIGNhbmNlbCB0aGUgc2FsZSBvZiB0aGVpciBUaW1lTWludAogICAgICAgICovCiAgICBmdW5jdGlvbiBjYW5jZWxTYWxlT2ZNaW50aW5nQWRkcmVzcygpIG9ubHlDb250cmlidXRvcihpZE9mW21zZy5zZW5kZXJdKSBwdWJsaWMgewogICAgICAgIHVpbnQgaWQgPSBpZE9mW21zZy5zZW5kZXJdOwogICAgICAgIC8vIFRpbWVNaW50IHNob3VsZCBiZSBvbiBzYWxlCiAgICAgICAgcmVxdWlyZShjb250cmlidXRvcnNbaWRdLnN0YXR1cyA9PSBzZWxsaW5nU3RhdHVzLk9OU0FMRSk7CiAgICAgICAgY29udHJpYnV0b3JzW2lkXS5zdGF0dXMgPSBzZWxsaW5nU3RhdHVzLkVYUElSRUQ7CiAgICB9CgoKICAgIC8qKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgYnkgYW55IHVzZXIgdG8gZ2V0IGEgbGlzdCBvZiBhbGwgT24gU2FsZSBUaW1lTWludHMKICAgICAgICAqLwogICAgZnVuY3Rpb24gZ2V0T25TYWxlSWRzKCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludFtdKSB7CiAgICAgICAgdWludFtdIG1lbW9yeSBpZHNPblNhbGUgPSBuZXcgdWludFtdKG1heEFkZHJlc3Nlcyk7CiAgICAgICAgdWludCBqID0gMDsKICAgICAgICBmb3IodWludCBpPTE7IGkgPD0gbWF4QWRkcmVzc2VzOyBpKyspIHsKCiAgICAgICAgICAgIGlmICggaXNWYWxpZENvbnRyaWJ1dG9ySWQoaSkgJiYKICAgICAgICAgICAgICAgIGJsb2NrLm51bWJlciA8PSBjb250cmlidXRvcnNbaV0uZXhwaXJ5QmxvY2tOdW1iZXIgJiYgCiAgICAgICAgICAgICAgICBjb250cmlidXRvcnNbaV0uc3RhdHVzID09IHNlbGxpbmdTdGF0dXMuT05TQUxFICkgewogICAgICAgICAgICAgICAgICAgIGlkc09uU2FsZVtqXSA9IGk7CiAgICAgICAgICAgICAgICAgICAgaisrOyAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIHJldHVybiBpZHNPblNhbGU7CiAgICB9CgoKICAgIC8qKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgYnkgYW55IHVzZXIgdG8gZ2V0IHN0YXR1cyBvZiBhIFRpbWUgTWludC4KICAgICAgICAqIHJldHVybnMgc3RhdHVzIDAgLSBOb3Qgb24gc2FsZSwgMSAtIEV4cGlyZWQsIDIgLSBPbiBzYWxlLAogICAgICAgICogQHBhcmFtIF9pZCBJRCBudW1iZXIgb2YgdGhlIFRpbWUgTWludCAKICAgICAgICAqLwogICAgZnVuY3Rpb24gZ2V0U2VsbGluZ1N0YXR1cyh1aW50IF9pZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMoc2VsbGluZ1N0YXR1cyBzdGF0dXMpIHsKICAgICAgICByZXF1aXJlKGlzVmFsaWRDb250cmlidXRvcklkKF9pZCkpOwogICAgICAgIHN0YXR1cyA9IGNvbnRyaWJ1dG9yc1tfaWRdLnN0YXR1czsKICAgICAgICBpZiAoIGJsb2NrLm51bWJlciA+IGNvbnRyaWJ1dG9yc1tfaWRdLmV4cGlyeUJsb2NrTnVtYmVyICYmIAogICAgICAgICAgICAgICAgc3RhdHVzID09IHNlbGxpbmdTdGF0dXMuT05TQUxFICkKICAgICAgICAgICAgc3RhdHVzID0gc2VsbGluZ1N0YXR1cy5FWFBJUkVEOwoKICAgICAgICByZXR1cm4gc3RhdHVzOwogICAgfQoKICAgIC8qKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgYnkgYW55IHVzZXIgdG8gYnV5IGEgb25zYWxlIGFkZHJlc3MgYnkgb2ZmZXJpbmcgYW4gYW1vdW50CiAgICAgICAgKiBAcGFyYW0gX29mZmVySWQgSUQgbnVtYmVyIG9mIHRoZSBhZGRyZXNzIHRvIGJlIGJvdWdodCBieSB0aGUgYnV5ZXIKICAgICAgICAqIEBwYXJhbSBfb2ZmZXJJbkRheSBPZmZlciBnaXZlbiBieSB0aGUgYnV5ZXIgaW4gbnVtYmVyIG9mIERBWSB0b2tlbnMKICAgICAgICAqLwogICAgZnVuY3Rpb24gYnV5TWludGluZ0FkZHJlc3ModWludCBfb2ZmZXJJZCwgdWludDI1NiBfb2ZmZXJJbkRheSkgcHVibGljIHJldHVybnMoYm9vbCkgewogICAgICAgIGlmIChjb250cmlidXRvcnNbX29mZmVySWRdLnN0YXR1cyA9PSBzZWxsaW5nU3RhdHVzLk9OU0FMRSAKICAgICAgICAgICAgJiYgYmxvY2subnVtYmVyID4gY29udHJpYnV0b3JzW19vZmZlcklkXS5leHBpcnlCbG9ja051bWJlcikKICAgICAgICB7CiAgICAgICAgICAgIGNvbnRyaWJ1dG9yc1tfb2ZmZXJJZF0uc3RhdHVzID0gc2VsbGluZ1N0YXR1cy5FWFBJUkVEOwogICAgICAgIH0KICAgICAgICBhZGRyZXNzIHNvbGRBZGRyZXNzID0gY29udHJpYnV0b3JzW19vZmZlcklkXS5hZHI7CiAgICAgICAgcmVxdWlyZShjb250cmlidXRvcnNbX29mZmVySWRdLnN0YXR1cyA9PSBzZWxsaW5nU3RhdHVzLk9OU0FMRSk7CiAgICAgICAgcmVxdWlyZShfb2ZmZXJJbkRheSA+PSBjb250cmlidXRvcnNbX29mZmVySWRdLm1pblByaWNlSW5EYXkpOwoKICAgICAgICAvLyBwcmV2ZW50IHNlbGxlciBmcm9tIGNhbmNlbGxpbmcgc2FsZSBpbiBiZXR3ZWVuCiAgICAgICAgY29udHJpYnV0b3JzW19vZmZlcklkXS5zdGF0dXMgPSBzZWxsaW5nU3RhdHVzLk5PVE9OU0FMRTsKCiAgICAgICAgLy8gZmlyc3QgZ2V0IHRoZSBvZmZlcmVkIERheVRva2VuIGluIHRoZSB0b2tlbiBjb250cmFjdCAmIAogICAgICAgIC8vIHRoZW4gdHJhbnNmZXIgdGhlIHRvdGFsIHN1bSAobWluQmFsYW5jZVRvU2VuZCtfb2ZmZXJJbkRheSkgdG8gdGhlIHNlbGxlcgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX29mZmVySW5EYXkpOwogICAgICAgIGJhbGFuY2VzW3RoaXNdID0gc2FmZUFkZChiYWxhbmNlc1t0aGlzXSwgX29mZmVySW5EYXkpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIF9vZmZlckluRGF5KTsKICAgICAgICBpZih0cmFuc2Zlck1pbnRpbmdBZGRyZXNzKGNvbnRyaWJ1dG9yc1tfb2ZmZXJJZF0uYWRyLCBtc2cuc2VuZGVyKSkgewogICAgICAgICAgICAvL21hcmsgdGhlIG9mZmVyIGFzIHNvbGQgJiBsZXQgc2VsbGVyIHB1bGwgdGhlIHByb2NlZWQgdG8gdGhlaXIgb3duIGFjY291bnQuCiAgICAgICAgICAgIHNlbGxpbmdQcmljZUluRGF5T2Zbc29sZEFkZHJlc3NdID0gX29mZmVySW5EYXk7CiAgICAgICAgICAgIHNvbGRBZGRyZXNzZXNbc29sZEFkZHJlc3NdID0gdHJ1ZTsgCiAgICAgICAgICAgIFRpbWVNaW50U29sZChfb2ZmZXJJZCwgbXNnLnNlbmRlciwgX29mZmVySW5EYXkpOyAgCiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvKioKICAgICAgICAqIFRyYW5zZmVyIG1pbnRpbmcgYWRkcmVzcyBmcm9tIG9uZSB1c2VyIHRvIGFub3RoZXIKICAgICAgICAqIEdpdmVzIHRoZSB0cmFuc2Zlci10byBhZGRyZXNzLCB0aGUgaWQgb2YgdGhlIG9yaWdpbmFsIGFkZHJlc3MKICAgICAgICAqIHJldHVybnMgdHJ1ZSBpZiBzdWNjZXNzZnVsIGFuZCBmYWxzZSBpZiBub3QuCiAgICAgICAgKiBAcGFyYW0gX3RvIGFkZHJlc3Mgb2YgdGhlIHVzZXIgdG8gd2hpY2ggbWludGluZyBhZGRyZXNzIGlzIHRvIGJlIHRyYW5mZXJyZWQKICAgICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJNaW50aW5nQWRkcmVzcyhhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bykgaW50ZXJuYWwgb25seUNvbnRyaWJ1dG9yKGlkT2ZbX2Zyb21dKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShpc0RheVRva2VuQWN0aXZhdGVkKCkpOwoKICAgICAgICAvLyBfdG8gc2hvdWxkIGJlIG5vbiBtaW50aW5nIGFkZHJlc3MKICAgICAgICByZXF1aXJlKCFpc1ZhbGlkQ29udHJpYnV0b3JBZGRyZXNzKF90bykpOwogICAgICAgIAogICAgICAgIHVpbnQgaWQgPSBpZE9mW19mcm9tXTsKICAgICAgICAvLyB1cGRhdGUgYmFsYW5jZSBvZiBmcm9tIGFkZHJlc3MgYmVmb3JlIHRyYW5zZmVycmluZyBtaW50aW5nIHBvd2VyCiAgICAgICAgdXBkYXRlQmFsYW5jZU9mKGlkKTsKCiAgICAgICAgY29udHJpYnV0b3JzW2lkXS5hZHIgPSBfdG87CiAgICAgICAgaWRPZltfdG9dID0gaWQ7CiAgICAgICAgaWRPZltfZnJvbV0gPSAwOwogICAgICAgIGNvbnRyaWJ1dG9yc1tpZF0uaW5pdGlhbENvbnRyaWJ1dGlvbkRheSA9IDA7CiAgICAgICAgLy8gbmVlZGVkIGFzIGlkIGlzIGFzc2lnbmVkIHRvIG5ldyBhZGRyZXNzCiAgICAgICAgY29udHJpYnV0b3JzW2lkXS5sYXN0VXBkYXRlZE9uID0gZ2V0RGF5Q291bnQoKTsKICAgICAgICBjb250cmlidXRvcnNbaWRdLmV4cGlyeUJsb2NrTnVtYmVyID0gMDsKICAgICAgICBjb250cmlidXRvcnNbaWRdLm1pblByaWNlSW5EYXkgPSAwOwogICAgICAgIE1pbnRpbmdBZHJUcmFuc2ZlcnJlZChpZCwgX2Zyb20sIF90byk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIC8qKiBGdW5jdGlvbiB0byBhbGxvdyBzZWxsZXIgdG8gZ2V0IGJhY2sgdGhlaXIgZGVwb3NpdGVkIGFtb3VudCBvZiBkYXkgdG9rZW5zKG1pbkJhbGFuY2VUb1NlbGwpIGFuZCAKICAgICAgICAqIG9mZmVyIG1hZGUgYnkgYnV5ZXIgYWZ0ZXIgc3VjY2Vzc2Z1bCBzYWxlLgogICAgICAgICogVGhyb3dzIGlmIHNhbGUgaXMgbm90IHN1Y2Nlc3NmdWwKICAgICAgICAqLwogICAgZnVuY3Rpb24gZmV0Y2hTdWNjZXNzZnVsU2FsZVByb2NlZWQoKSBwdWJsaWMgIHJldHVybnMoYm9vbCkgewogICAgICAgIHJlcXVpcmUoc29sZEFkZHJlc3Nlc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgICAgICAvLyB0byBwcmV2ZW50IHJlLWVudHJhbmN5IGF0dGFjawogICAgICAgIHNvbGRBZGRyZXNzZXNbbXNnLnNlbmRlcl0gPSBmYWxzZTsKICAgICAgICB1aW50IHNhbGVQcm9jZWVkID0gc2FmZUFkZChtaW5CYWxhbmNlVG9TZWxsLCBzZWxsaW5nUHJpY2VJbkRheU9mW21zZy5zZW5kZXJdKTsKICAgICAgICBiYWxhbmNlc1t0aGlzXSA9IHNhZmVTdWIoYmFsYW5jZXNbdGhpc10sIHNhbGVQcm9jZWVkKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIHNhbGVQcm9jZWVkKTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBtc2cuc2VuZGVyLCBzYWxlUHJvY2VlZCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAKICAgIH0KCiAgICAvKiogRnVuY3Rpb24gdGhhdCBsZXRzIGEgc2VsbGVyIGdldCB0aGVpciBkZXBvc2l0ZWQgZGF5IHRva2VucyAobWluQmFsYW5jZVRvU2VsbCkgYmFjaywgaWYgbm8gYnV5ZXIgdHVybnMgdXAuCiAgICAgICAgKiBBbGxvd2VkIG9ubHkgYWZ0ZXIgZXhwaXJ5QmxvY2tOdW1iZXIKICAgICAgICAqIFRocm93cyBpZiBhbnkgb3RoZXIgc3RhdGUgb3RoZXIgdGhhbiBFWFBJUkVECiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZnVuZEZhaWxlZEF1Y3Rpb25BbW91bnQoKSBvbmx5Q29udHJpYnV0b3IoaWRPZlttc2cuc2VuZGVyXSkgcHVibGljIHJldHVybnMoYm9vbCl7CiAgICAgICAgdWludCBpZCA9IGlkT2ZbbXNnLnNlbmRlcl07CiAgICAgICAgaWYoYmxvY2subnVtYmVyID4gY29udHJpYnV0b3JzW2lkXS5leHBpcnlCbG9ja051bWJlciAmJiBjb250cmlidXRvcnNbaWRdLnN0YXR1cyA9PSBzZWxsaW5nU3RhdHVzLk9OU0FMRSkKICAgICAgICB7CiAgICAgICAgICAgIGNvbnRyaWJ1dG9yc1tpZF0uc3RhdHVzID0gc2VsbGluZ1N0YXR1cy5FWFBJUkVEOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKGNvbnRyaWJ1dG9yc1tpZF0uc3RhdHVzID09IHNlbGxpbmdTdGF0dXMuRVhQSVJFRCk7CiAgICAgICAgLy8gcmVzZXQgc2VsbGluZyBzdGF0dXMKICAgICAgICBjb250cmlidXRvcnNbaWRdLnN0YXR1cyA9IHNlbGxpbmdTdGF0dXMuTk9UT05TQUxFOwogICAgICAgIGJhbGFuY2VzW3RoaXNdID0gc2FmZVN1YihiYWxhbmNlc1t0aGlzXSwgbWluQmFsYW5jZVRvU2VsbCk7CiAgICAgICAgLy8gdXBkYXRlIGJhbGFuY2Ugb2Ygc2VsbGVyIGFkZHJlc3MgYmVmb3JlIHJlZnVuZGluZwogICAgICAgIHVwZGF0ZUJhbGFuY2VPZihpZCk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBtaW5CYWxhbmNlVG9TZWxsKTsKICAgICAgICBjb250cmlidXRvcnNbaWRdLm1pblByaWNlSW5EYXkgPSAwOwogICAgICAgIGNvbnRyaWJ1dG9yc1tpZF0uZXhwaXJ5QmxvY2tOdW1iZXIgPSAwOwogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIG1pbkJhbGFuY2VUb1NlbGwpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvKiogRnVuY3Rpb24gdG8gYWRkIGEgdGVhbSBhZGRyZXNzIGFzIGEgY29udHJpYnV0b3IgYW5kIHN0b3JlIGl0J3MgdGltZSBpc3N1ZWQgdG8gY2FsY3VsYXRlIHZlc3RpbmcgcGVyaW9kCiAgICAgICAgKiBDYWxsZWQgYnkgb3duZXIKICAgICAgICAqLwogICAgZnVuY3Rpb24gYWRkVGVhbVRpbWVNaW50cyhhZGRyZXNzIF9hZHIsIHVpbnQgX2lkLCB1aW50IF90b2tlbnMsIGJvb2wgX2lzVGVzdCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgLy9jaGVjayBpZiBJZCBpcyBpbiByYW5nZSBvZiB0ZWFtIElkcwogICAgICAgIHJlcXVpcmUoX2lkID49IGZpcnN0VGVhbUNvbnRyaWJ1dG9ySWQgJiYgX2lkIDwgZmlyc3RUZWFtQ29udHJpYnV0b3JJZCArIHRvdGFsVGVhbUNvbnRyaWJ1dG9ySWRzKTsKICAgICAgICByZXF1aXJlKHRvdGFsVGVhbUNvbnRyaWJ1dG9ySWRzQWxsb2NhdGVkIDwgdG90YWxUZWFtQ29udHJpYnV0b3JJZHMpOwogICAgICAgIGFkZENvbnRyaWJ1dG9yKF9pZCwgX2FkciwgMCk7CiAgICAgICAgdG90YWxUZWFtQ29udHJpYnV0b3JJZHNBbGxvY2F0ZWQrKzsKICAgICAgICAvLyBlbmZvcmNlIGxvY2tpbiBwZXJpb2QgaWYgbm90IHRlc3QgYWRkcmVzcwogICAgICAgIGlmKCFfaXNUZXN0KSB0ZWFtSXNzdWVkVGltZXN0YW1wW19hZHJdID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIG1pbnQoX2FkciwgX3Rva2Vucyk7CiAgICAgICAgVGVhbUFkZHJlc3NBZGRlZChfYWRyLCBfaWQpOwogICAgfQoKCiAgICAvKiogRnVuY3Rpb24gdG8gYWRkIHJlc2VydmVkIGF1dGlvbiBUaW1lTWludHMgcG9zdC1JQ08uIE9ubHkgYnkgb3duZXIKICAgICAgICAqIEBwYXJhbSBfcmVjZWl2ZXIgQWRkcmVzcyBvZiB0aGUgbWludGluZyB0byBiZSBhZGRlZAogICAgICAgICogQHBhcmFtIF9jdXN0b21lcklkIFNlcnZlciBzaWRlIGlkIG9mIHRoZSBjdXN0b21lcgogICAgICAgICogQHBhcmFtIF9pZCBjb250cmlidXRvcklkCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHBvc3RBbGxvY2F0ZUF1Y3Rpb25UaW1lTWludHMoYWRkcmVzcyBfcmVjZWl2ZXIsIHVpbnQgX2N1c3RvbWVySWQsIHVpbnQgX2lkKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgLy9jaGVjayBpZiBJZCBpcyBpbiByYW5nZSBvZiBBdWN0aW9uIElkcwogICAgICAgIHJlcXVpcmUoX2lkID49IGZpcnN0UG9zdEljb0NvbnRyaWJ1dG9ySWQgJiYgX2lkIDwgZmlyc3RQb3N0SWNvQ29udHJpYnV0b3JJZCArIHRvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzKTsKICAgICAgICByZXF1aXJlKHRvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzQWxsb2NhdGVkIDwgdG90YWxQb3N0SWNvQ29udHJpYnV0b3JJZHMpOwogICAgICAgIAogICAgICAgIHJlcXVpcmUocmVsZWFzZWQgPT0gdHJ1ZSk7CiAgICAgICAgYWRkQ29udHJpYnV0b3IoX2lkLCBfcmVjZWl2ZXIsIDApOwogICAgICAgIHRvdGFsUG9zdEljb0NvbnRyaWJ1dG9ySWRzQWxsb2NhdGVkKys7CiAgICAgICAgUG9zdEludmVzdGVkKF9yZWNlaXZlciwgMCwgMCwgX2N1c3RvbWVySWQsIF9pZCk7CiAgICB9CgoKICAgIC8qKiBGdW5jdGlvbiB0byBhZGQgYWxsIGNvbnRyaWJ1dG9ycyBleGNlcHQgdGVhbSwgdGVzdCBhbmQgQXVjdGlvbnMgVGltZU1pbnRzLiBPbmx5IGJ5IG93bmVyCiAgICAgICAgKiBAcGFyYW0gX3JlY2VpdmVyIEFkZHJlc3Mgb2YgdGhlIG1pbnRpbmcgdG8gYmUgYWRkZWQKICAgICAgICAqIEBwYXJhbSBfY3VzdG9tZXJJZCBTZXJ2ZXIgc2lkZSBpZCBvZiB0aGUgY3VzdG9tZXIKICAgICAgICAqIEBwYXJhbSBfaWQgY29udHJpYnV0b3IgaWQKICAgICAgICAqIEBwYXJhbSBfdG9rZW5zIGRheSB0b2tlbnMgdG8gYWxsb2NhdGUKICAgICAgICAqIEBwYXJhbSBfd2VpQW1vdW50IGV0aGVyIGludmVzdGVkIGluIHdlaQogICAgICAgICovCiAgICBmdW5jdGlvbiBhbGxvY2F0ZU5vcm1hbFRpbWVNaW50cyhhZGRyZXNzIF9yZWNlaXZlciwgdWludCBfY3VzdG9tZXJJZCwgdWludCBfaWQsIHVpbnQgX3Rva2VucywgdWludCBfd2VpQW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICAvLyBjaGVjayBpZiBJZCBpcyBpbiByYW5nZSBvZiBOb3JtYWwgSWRzCiAgICAgICAgcmVxdWlyZShfaWQgPj0gZmlyc3RDb250cmlidXRvcklkICYmIF9pZCA8PSB0b3RhbE5vcm1hbENvbnRyaWJ1dG9ySWRzKTsKICAgICAgICByZXF1aXJlKHRvdGFsTm9ybWFsQ29udHJpYnV0b3JJZHNBbGxvY2F0ZWQgPCB0b3RhbE5vcm1hbENvbnRyaWJ1dG9ySWRzKTsKICAgICAgICBhZGRDb250cmlidXRvcihfaWQsIF9yZWNlaXZlciwgX3Rva2Vucyk7CiAgICAgICAgdG90YWxOb3JtYWxDb250cmlidXRvcklkc0FsbG9jYXRlZCsrOwogICAgICAgIG1pbnQoX3JlY2VpdmVyLCBfdG9rZW5zKTsKICAgICAgICBJbnZlc3RlZChfcmVjZWl2ZXIsIF93ZWlBbW91bnQsIF90b2tlbnMsIF9jdXN0b21lcklkLCBfaWQpOwogICAgICAgIAogICAgfQoKCiAgICAvKiogRnVuY3Rpb24gdG8gcmVsZWFzZSB0b2tlbgogICAgICAgICogQ2FsbGVkIGJ5IG93bmVyCiAgICAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2VUb2tlbih1aW50IF9pbml0aWFsQmxvY2tUaW1lc3RhbXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoIXJlbGVhc2VkKTsgLy8gY2hlY2sgbm90IGFscmVhZHkgcmVsZWFzZWQKICAgICAgICAKICAgICAgICBzZXRJbml0aWFsQmxvY2tUaW1lc3RhbXAoX2luaXRpYWxCbG9ja1RpbWVzdGFtcCk7CgogICAgICAgIC8vIE1ha2UgdG9rZW4gdHJhbnNmZXJhYmxlCiAgICAgICAgcmVsZWFzZVRva2VuVHJhbnNmZXIoKTsKICAgIH0KICAgIAp9'.
	

]
