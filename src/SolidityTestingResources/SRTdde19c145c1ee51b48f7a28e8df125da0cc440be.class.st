Class {
	#name : #SRTdde19c145c1ee51b48f7a28e8df125da0cc440be,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdde19c145c1ee51b48f7a28e8df125da0cc440be >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKY29udHJhY3QgRW1iaWdnZW5Ub2tlbiBpcyBFUkMyMCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHVpbnQgY29uc3RhbnQgTUFYX1VJTlQgPSAyKioyNTYgLSAxOwogIHN0cmluZyBwdWJsaWMgbmFtZTsKICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgogIHVpbnQgaW5pdGlhbFN1cHBseTsKICB1aW50IGluaXRpYWxpemVkVGltZTsKICB1aW50IGhvdXJSYXRlOwoKICBzdHJ1Y3QgVXNlckJhbGFuY2UgewogICAgdWludCBsYXRlc3RCYWxhbmNlOwogICAgdWludCBsYXN0Q2FsY3VsYXRlZDsKICB9CgogIG1hcHBpbmcoYWRkcmVzcyA9PiBVc2VyQmFsYW5jZSkgYmFsYW5jZXM7CiAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgLy8gYW5udWFsUmF0ZTogcGVyY2VudCAqIDEwXjE4CiAgZnVuY3Rpb24gRW1iaWdnZW5Ub2tlbih1aW50IF9pbml0aWFsU3VwcGx5LCB1aW50IGFubnVhbFJhdGUsIHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQ4IF9kZWNpbWFscykgewogICAgaW5pdGlhbFN1cHBseSA9IF9pbml0aWFsU3VwcGx5OwogICAgaW5pdGlhbGl6ZWRUaW1lID0gKGJsb2NrLnRpbWVzdGFtcCAvIDM2MDApICogMzYwMDsKICAgIGhvdXJSYXRlID0gYW5udWFsUmF0ZSAvICgzNjUgKiAyNCk7CiAgICByZXF1aXJlKGhvdXJSYXRlIDw9IDIyMzg3MjExMzg1NjgzMyk7IC8vIFRoaXMgZW5zdXJlcyB0aGF0IChlYXJuZWRJbnRlcnNldCAqIGJhc2VJbnRlcmVzdCkgd29uJ3Qgb3ZlcmZsb3cgYSB1aW50IGZvciBhbnkgcGxhdXNpYmxlIHRpbWUgcGVyaW9kCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IFVzZXJCYWxhbmNlKHsKICAgICAgbGF0ZXN0QmFsYW5jZTogX2luaXRpYWxTdXBwbHksCiAgICAgIGxhc3RDYWxjdWxhdGVkOiAoYmxvY2sudGltZXN0YW1wIC8gMzYwMCkgKiAzNjAwCiAgICB9KTsKICAgIG5hbWUgPSBfbmFtZTsKICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICB9CgogIGZ1bmN0aW9uIGdldEludGVyZXN0KHVpbnQgdmFsdWUsIHVpbnQgbGFzdENhbGN1bGF0ZWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgIGlmKHZhbHVlID09IDApIHsKICAgICAgLy8gV2Ugd2VyZSBnb2luZyB0byBtdWx0aXBseSBieSAwIGF0IHRoZSBlbmQsIHNvIG5vIHBvaW50IHdhc3RpbmcgZ2FzIG9uCiAgICAgIC8vIHRoZSBvdGhlciBjYWxjdWxhdGlvbnMuCiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludCBleHAgPSAoYmxvY2sudGltZXN0YW1wIC0gbGFzdENhbGN1bGF0ZWQpIC8gMzYwMDsKICAgIHVpbnQgeCA9IDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICB1aW50IGJhc2UgPSAxMDAwMDAwMDAwMDAwMDAwMDAwICsgaG91clJhdGU7CiAgICB3aGlsZShleHAgIT0gMCkgewogICAgICBpZihleHAgJiAxICE9IDApewogICAgICAgIHggPSAoeCAqIGJhc2UpIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgICAgfQogICAgICBleHAgPSBleHAgLyAyOwogICAgICBiYXNlID0gKGJhc2UgKiBiYXNlKSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICB9CiAgICByZXR1cm4gdmFsdWUubXVsKHggLSAxMDAwMDAwMDAwMDAwMDAwMDAwKSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgfQoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBpbml0aWFsU3VwcGx5LmFkZChnZXRJbnRlcmVzdChpbml0aWFsU3VwcGx5LCBpbml0aWFsaXplZFRpbWUpKTsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXS5sYXRlc3RCYWxhbmNlLmFkZChnZXRJbnRlcmVzdChiYWxhbmNlc1tfb3duZXJdLmxhdGVzdEJhbGFuY2UsIGJhbGFuY2VzW19vd25lcl0ubGFzdENhbGN1bGF0ZWQpKTsKICB9CgogIGZ1bmN0aW9uIGluY0JhbGFuY2UoYWRkcmVzcyBfb3duZXIsIHVpbnQgYW1vdW50KSBwcml2YXRlIHsKICAgIGJhbGFuY2VzW19vd25lcl0gPSBVc2VyQmFsYW5jZSh7CiAgICAgIGxhdGVzdEJhbGFuY2U6IGJhbGFuY2VPZihfb3duZXIpLmFkZChhbW91bnQpLAogICAgICBsYXN0Q2FsY3VsYXRlZDogKGJsb2NrLnRpbWVzdGFtcCAvIDM2MDApICogMzYwMCAvLyBSb3VuZCBkb3duIHRvIHRoZSBsYXN0IGhvdXIKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gZGVjQmFsYW5jZShhZGRyZXNzIF9vd25lciwgdWludCBhbW91bnQpIHByaXZhdGUgewogICAgdWludCBwcmlvckJhbGFuY2UgPSBiYWxhbmNlT2YoX293bmVyKTsKICAgIHJlcXVpcmUocHJpb3JCYWxhbmNlID49IGFtb3VudCk7CiAgICBiYWxhbmNlc1tfb3duZXJdID0gVXNlckJhbGFuY2UoewogICAgICBsYXRlc3RCYWxhbmNlOiBwcmlvckJhbGFuY2Uuc3ViKGFtb3VudCksCiAgICAgIGxhc3RDYWxjdWxhdGVkOiAoYmxvY2sudGltZXN0YW1wIC8gMzYwMCkgKiAzNjAwIC8vIFJvdW5kIGRvd24gdG8gdGhlIGxhc3QgaG91cgogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSAgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICBkZWNCYWxhbmNlKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICBpbmNCYWxhbmNlKF90bywgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGRlY0JhbGFuY2UoX2Zyb20sIF92YWx1ZSk7CiAgICBpbmNCYWxhbmNlKF90bywgX3ZhbHVlKTsKCiAgICBpZihhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA8IE1BWF9VSU5UKSB7CiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgIH0KICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9'.
	

]
