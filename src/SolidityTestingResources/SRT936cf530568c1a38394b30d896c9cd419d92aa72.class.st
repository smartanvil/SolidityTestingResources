Class {
	#name : #SRT936cf530568c1a38394b30d896c9cd419d92aa72,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT936cf530568c1a38394b30d896c9cd419d92aa72 >> base64 [
	^ ''.
	

]
