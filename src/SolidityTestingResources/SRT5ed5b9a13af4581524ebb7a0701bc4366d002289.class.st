Class {
	#name : #SRT5ed5b9a13af4581524ebb7a0701bc4366d002289,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ed5b9a13af4581524ebb7a0701bc4366d002289 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCi8vCi8vID09PT0gRElTQ0xBSU1FUiA9PT09Ci8vCi8vIEVUSEVSRVVNIElTIFNUSUxMIEFOIEVYUEVSRU1FTlRBTCBURUNITk9MT0dZLgovLyBBTFRIT1VHSCBUSElTIFNNQVJUIENPTlRSQUNUIENSRUFURUQgV0lUSCBHUkVBVCBDQVJFIEFORCBJTiBIT1BFIFRPIEJFIFVTRUZVTCwgTk8gR1VBUkFOVEVFUyBPRiBGTEFXTEVTIE9QRVJBVElPTiBDQU4gQkUgR0lWRU4uIAovLyBFU1BFQ0lBTExZIFNVQlRJTEUgQlVHUywgSEFDS0VSIEFUVEFDUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIEFOIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLiAKLy8gWU9VIEFSRSBERUVQTFkgRU5DT1JBR0VEIFRPIFNUVURZIFRISVMgU01BUlQgQ09OVFJBQ1QgQ0FSRUZVTExZIElOIE9SREVSIFRPIFVOREVSU1RBTkQgUE9TU0lCTEUgRURHRSBDQVNFUyBBTkQgUklTS1MuIAovLyBET04nVCBVU0UgVEhJUyBTTUFSVCBDT05UUkFDVCBJTiBDQVNFIE9GIEFOWSBTVUJTVEFOVElPTkFMIERPVUJUUyBPUiBJRiBZT1UgRE9OJ1QgS05PVyBXSEFUIEFSRSBZT1UgRE9JTkcuCi8vCi8vIFRISVMgU09GVFdBUkUgSVMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgCi8vIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIAovLyBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgCi8vIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCi8vID09PT0KLy8KLy8KLy8gPT09PSBQQVJBTk9JQSBOT1RJQ0UgPT09PSAKLy8gQSBjYXJlZnVsIHJlYWRlciB3aWxsIGZpbmQgaGVyZSBzb21lIHVubmVjZXNzYXJ5IGNoZWNrcyBhbmQgZXhjZXNzaXZlIGNvZGUgY29uc3VtaW5nIHNvbWUgZXh0cmEgdmFsdWFibGUgZ2FzLiBJdCBpcyBpbnRlbnRpb25hbGx5LiAKLy8gRXZlbiBjb250cmFjdCBzaG91bGQgd29ya3Mgd2l0aG91dCB0aGVzZSBwYXJ0cywgdGhleSBtYWtlIHRoZSBjb2RlIG1vcmUgc2VjdXJlIGluIHByb2R1Y3Rpb24gYXMgd2VsbCBmb3IgZnV0dXJlIHJlZmFjdG9yaW5nLgovLyBBZGRpdGlvbmFsbHkgaXQgc2hvd3MgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSB0b29rIGNhcmUgb2YuCi8vIFlvdSBhcmUgd2VsY29tZSB0byBkaXNjdXNzIHRoYXQgcGxhY2VzLgovLyA9PT09Ci8vCgovLy8gQGF1dGhvciBldGhlcm5pYW4KLy8vIEBub3RpY2UgcmVwb3J0IGJ1Z3MgdG86IDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJmMzkxODY5NDgwYjM5Njg3OWI5NjgxOWQ5YTkyOWRkZDkwOWM5ZSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4KLy8vIEB0aXRsZSBQcmVzYWxlIENvbnRyYWN0Cgpjb250cmFjdCBQcmVzYWxlIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFZFUlNJT04gPSAiMC4xLjQtYmV0YSI7CgogICAgLyogPT09PT09IGNvbmZpZ3VyYXRpb24gU1RBUlQgPT09PT09ICovCgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgUFJFU0FMRV9TVEFSVCAgPSAzMTI3MTUwOyAvKiBhcHByb3guIDA1LjAyLjIwMTcgMTE6MDAgQ0VUICovCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBQUkVTQUxFX0VORCAgICA9IDMxMjc3NTA7IC8qIGFwcHJveC4gMDUuMDIuMjAxNyAxMzowMCBDRVQgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFdJVEhEUkFXQUxfRU5EID0gMzEyODcxMDsgLyogYXBwcm94LiAwNS4wMi4yMDE3IDE3OjAwIENFVCAqLwoKCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBPV05FUiA9IDB4NDVkNTQyNjQ3MUQxMmIyMUMzMzI2ZEQwY0Y5NmY2NjU2RjdkMTRiMTsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIID0gMTsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRV9FVEggPSA1OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0FDQ0VQVEVEX0FNT1VOVF9GSU5ORVkgPSAxOwoKICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8KCiAgICBzdHJpbmdbNV0gcHJpdmF0ZSBzdGF0ZU5hbWVzID0gWyJCRUZPUkVfU1RBUlQiLCAgIlBSRVNBTEVfUlVOTklORyIsICJXSVRIRFJBV0FMX1JVTk5JTkciLCAiUkVGVU5EX1JVTk5JTkciLCAiQ0xPU0VEIiBdOwogICAgZW51bSBTdGF0ZSB7IEJFRk9SRV9TVEFSVCwgIFBSRVNBTEVfUlVOTklORywgV0lUSERSQVdBTF9SVU5OSU5HLCBSRUZVTkRfUlVOTklORywgQ0xPU0VEIH0KCiAgICB1aW50IHB1YmxpYyB0b3RhbF9yZWNlaXZlZF9hbW91bnQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsKCiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgTUlOX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFID0gTUlOX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFX0VUSCAqIDEgZXRoZXI7CiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFID0gTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFX0VUSCAqIDEgZXRoZXI7CiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgTUlOX0FDQ0VQVEVEX0FNT1VOVCA9IE1JTl9BQ0NFUFRFRF9BTU9VTlRfRklOTkVZICogMSBmaW5uZXk7CiAgICBib29sIHB1YmxpYyBpc0Fib3J0ZWQgPSBmYWxzZTsKCgogICAgLy9jb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gUHJlc2FsZSAoKSB2YWxpZFNldHVwT25seSgpIHsgfQoKICAgIC8vCiAgICAvLyA9PT09PT09IGludGVyZmFjZSBtZXRob2RzID09PT09PT0KICAgIC8vCgogICAgLy9hY2NlcHQgcGF5bWVudHMgaGVyZQogICAgZnVuY3Rpb24gKCkKICAgIHBheWFibGUKICAgIG5vUmVlbnRyYW5jeQogICAgewogICAgICAgIFN0YXRlIHN0YXRlID0gY3VycmVudFN0YXRlKCk7CiAgICAgICAgaWYgKHN0YXRlID09IFN0YXRlLlBSRVNBTEVfUlVOTklORykgewogICAgICAgICAgICByZWNlaXZlRnVuZHMoKTsKICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFN0YXRlLlJFRlVORF9SVU5OSU5HKSB7CiAgICAgICAgICAgIC8vIGFueSBlbnRyaW5nIGNhbGwgaW4gUmVmdW5kIFBoYXNlIHdpbGwgY2F1c2UgZnVsbCByZWZ1bmQKICAgICAgICAgICAgc2VuZFJlZnVuZCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbAogICAgaW5TdGF0ZShTdGF0ZS5SRUZVTkRfUlVOTklORykKICAgIG5vUmVlbnRyYW5jeQogICAgewogICAgICAgIHNlbmRSZWZ1bmQoKTsKICAgIH0KCgogICAgZnVuY3Rpb24gd2l0aGRyYXdGdW5kcygpIGV4dGVybmFsCiAgICBpblN0YXRlKFN0YXRlLldJVEhEUkFXQUxfUlVOTklORykKICAgIG9ubHlPd25lcgogICAgbm9SZWVudHJhbmN5CiAgICB7CiAgICAgICAgLy8gdHJhbnNmZXIgZnVuZHMgdG8gb3duZXIgaWYgYW55CiAgICAgICAgaWYgKCFPV05FUi5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93OwogICAgfQoKICAgIGZ1bmN0aW9uIGFib3J0KCkgZXh0ZXJuYWwKICAgIGluU3RhdGVCZWZvcmUoU3RhdGUuUkVGVU5EX1JVTk5JTkcpCiAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBpc0Fib3J0ZWQgPSB0cnVlOwogICAgfQoKICAgIC8vZGlzcGxheXMgY3VycmVudCBjb250cmFjdCBzdGF0ZSBpbiBodW1hbiByZWFkYWJsZSBmb3JtCiAgICBmdW5jdGlvbiBzdGF0ZSgpICBleHRlcm5hbCBjb25zdGFudAogICAgcmV0dXJucyAoc3RyaW5nKQogICAgewogICAgICAgIHJldHVybiBzdGF0ZU5hbWVzWyB1aW50KGN1cnJlbnRTdGF0ZSgpKSBdOwogICAgfQoKCiAgICAvLwogICAgLy8gPT09PT09PSBpbXBsZW1lbnRhdGlvbiBtZXRob2RzID09PT09PT0KICAgIC8vCgogICAgZnVuY3Rpb24gc2VuZFJlZnVuZCgpIHByaXZhdGUgdG9rZW5Ib2xkZXJzT25seSB7CiAgICAgICAgLy8gbG9hZCBiYWxhbmNlIHRvIHJlZnVuZCBwbHVzIGFtb3VudCBjdXJyZW50bHkgc2VudAogICAgICAgIHZhciBhbW91bnRfdG9fcmVmdW5kID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKyBtc2cudmFsdWU7CiAgICAgICAgLy8gcmVzZXQgYmFsYW5jZQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgICAgICAvLyBzZW5kIHJlZnVuZCBiYWNrIHRvIHNlbmRlcgogICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGFtb3VudF90b19yZWZ1bmQpKSB0aHJvdzsKICAgIH0KCgogICAgZnVuY3Rpb24gcmVjZWl2ZUZ1bmRzKCkgcHJpdmF0ZSBub3RUb29TbWFsbEFtb3VudE9ubHkgewogICAgICAvLyBubyBvdmVyZmxvdyBpcyBwb3NzaWJsZSBoZXJlOiBub2JvZHkgaGF2ZSBzb28gbXVjaCBtb25leSB0byBzcGVuZC4KICAgICAgaWYgKHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArIG1zZy52YWx1ZSA+IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSkgewogICAgICAgICAgLy8gYWNjZXB0IGFtb3VudCBvbmx5IGFuZCByZXR1cm4gY2hhbmdlCiAgICAgICAgICB2YXIgY2hhbmdlX3RvX3JldHVybiA9IHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArIG1zZy52YWx1ZSAtIE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRTsKICAgICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGNoYW5nZV90b19yZXR1cm4pKSB0aHJvdzsKCiAgICAgICAgICB2YXIgYWNjZXB0YWJsZV9yZW1haW5kZXIgPSBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUgLSB0b3RhbF9yZWNlaXZlZF9hbW91bnQ7CiAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBhY2NlcHRhYmxlX3JlbWFpbmRlcjsKICAgICAgICAgIHRvdGFsX3JlY2VpdmVkX2Ftb3VudCArPSBhY2NlcHRhYmxlX3JlbWFpbmRlcjsKICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGFjY2VwdCBmdWxsIGFtb3VudAogICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogICAgICAgICAgdG90YWxfcmVjZWl2ZWRfYW1vdW50ICs9IG1zZy52YWx1ZTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBjdXJyZW50U3RhdGUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKFN0YXRlKSB7CiAgICAgICAgaWYgKGlzQWJvcnRlZCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlID4gMCAKICAgICAgICAgICAgICAgICAgID8gU3RhdGUuUkVGVU5EX1JVTk5JTkcgCiAgICAgICAgICAgICAgICAgICA6IFN0YXRlLkNMT1NFRDsKICAgICAgICB9IGVsc2UgaWYgKGJsb2NrLm51bWJlciA8IFBSRVNBTEVfU1RBUlQpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkJFRk9SRV9TVEFSVDsKICAgICAgICB9IGVsc2UgaWYgKGJsb2NrLm51bWJlciA8PSBQUkVTQUxFX0VORCAmJiB0b3RhbF9yZWNlaXZlZF9hbW91bnQgPCBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLlBSRVNBTEVfUlVOTklORzsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmFsYW5jZSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5DTE9TRUQ7CiAgICAgICAgfSBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gV0lUSERSQVdBTF9FTkQgJiYgdG90YWxfcmVjZWl2ZWRfYW1vdW50ID49IE1JTl9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSkgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuV0lUSERSQVdBTF9SVU5OSU5HOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5SRUZVTkRfUlVOTklORzsKICAgICAgICB9IAogICAgfQoKICAgIC8vCiAgICAvLyA9PT09PT09PT09PT0gbW9kaWZpZXJzID09PT09PT09PT09PQogICAgLy8KCiAgICAvL2ZhaWxzIGlmIHN0YXRlIGRvc24ndCBtYXRjaAogICAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIGlmIChzdGF0ZSAhPSBjdXJyZW50U3RhdGUoKSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICAvL2ZhaWxzIGlmIHRoZSBjdXJyZW50IHN0YXRlIGlzIG5vdCBiZWZvcmUgdGhhbiB0aGUgZ2l2ZW4gb25lLgogICAgbW9kaWZpZXIgaW5TdGF0ZUJlZm9yZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIGlmIChjdXJyZW50U3RhdGUoKSA+PSBzdGF0ZSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICAvL2ZhaWxzIGlmIHNvbWV0aGluZyBpbiBzZXR1cCBpcyBsb29raW5nIHdlaXJkCiAgICBtb2RpZmllciB2YWxpZFNldHVwT25seSgpIHsKICAgICAgICBpZiAoIE9XTkVSID09IDB4MCAKICAgICAgICAgICAgfHwgUFJFU0FMRV9TVEFSVCA9PSAwIAogICAgICAgICAgICB8fCBQUkVTQUxFX0VORCA9PSAwIAogICAgICAgICAgICB8fCBXSVRIRFJBV0FMX0VORCA9PTAKICAgICAgICAgICAgfHwgUFJFU0FMRV9TVEFSVCA8PSBibG9jay5udW1iZXIKICAgICAgICAgICAgfHwgUFJFU0FMRV9TVEFSVCA+PSBQUkVTQUxFX0VORAogICAgICAgICAgICB8fCBQUkVTQUxFX0VORCAgID49IFdJVEhEUkFXQUxfRU5ECiAgICAgICAgICAgIHx8IE1JTl9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSA+IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSApCiAgICAgICAgICAgICAgICB0aHJvdzsKICAgICAgICBfOwogICAgfQoKCiAgICAvL2FjY2VwdHMgY2FsbHMgZnJvbSBvd25lciBvbmx5CiAgICBtb2RpZmllciBvbmx5T3duZXIoKXsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBPV05FUikgIHRocm93OwogICAgICAgIF87CiAgICB9CgoKICAgIC8vYWNjZXB0cyBjYWxscyBmcm9tIHRva2VuIGhvbGRlcnMgb25seQogICAgbW9kaWZpZXIgdG9rZW5Ib2xkZXJzT25seSgpewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA9PSAwKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBkb25gdCBhY2NlcHQgdHJhbnNhY3Rpb25zIHdpdGggdmFsdWUgbGVzcyB0aGFuIGFsbG93ZWQgbWluaW11bQogICAgbW9kaWZpZXIgbm90VG9vU21hbGxBbW91bnRPbmx5KCl7CQogICAgICAgIGlmIChtc2cudmFsdWUgPCBNSU5fQUNDRVBURURfQU1PVU5UKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKCiAgICAvL3ByZXZlbnRzIHJlZW50cmFuY3kgYXR0YWNzCiAgICBib29sIHByaXZhdGUgbG9ja2VkID0gZmFsc2U7CiAgICBtb2RpZmllciBub1JlZW50cmFuY3koKSB7CiAgICAgICAgaWYgKGxvY2tlZCkgdGhyb3c7CiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKICAgICAgICBfOwogICAgICAgIGxvY2tlZCA9IGZhbHNlOwogICAgfQp9Ly9jb250cmFjdA=='.
	

]
