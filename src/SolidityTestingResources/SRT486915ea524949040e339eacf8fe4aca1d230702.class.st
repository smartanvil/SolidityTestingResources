Class {
	#name : #SRT486915ea524949040e339eacf8fe4aca1d230702,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT486915ea524949040e339eacf8fe4aca1d230702 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBFUkMyMCB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHVzZXJUcmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB1c2VyVHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHVzZXJBcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX29sZCwgdWludDI1NiBfbmV3KSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIGZ1bmN0aW9uIEVSQzIwKCkgaW50ZXJuYWwgewogICAgfQp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHJpdmF0ZSAgICBNQVhfVUlOVDI1NiAgICAgPSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7CgogICAgZnVuY3Rpb24gc2FmZUFkZCAodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgYXNzZXJ0ICh4IDw9IE1BWF9VSU5UMjU2IC0geSk7CiAgICAgICAgcmV0dXJuIHggKyB5OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIgKHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgICAgIGFzc2VydCAoeCA+PSB5KTsKICAgICAgICByZXR1cm4geCAtIHk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bCAodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgeiA9IHggKiB5OwogICAgICAgIGFzc2VydCh4ID09IDAgfHwgeiAvIHggPT0geSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZURpdiAodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICAgICAgeiA9IHggLyB5OwogICAgICAgIHJldHVybiB6OwogICAgfQp9Cgpjb250cmFjdCBBdXRvQ29pbiBpcyBFUkMyMCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgYWRkcmVzcyBwdWJsaWMgICAgICAgICAgICAgIG93bmVyOwogICAgYWRkcmVzcyBwcml2YXRlICAgICAgICAgICAgIHN1Ym93bmVyOwoKICAgIHVpbnQyNTYgcHJpdmF0ZSAgICAgICAgICAgICBzdW1tYXJ5U3VwcGx5OwogICAgdWludDI1NiBwdWJsaWMgICAgICAgICAgICAgIHdlaVBlck1pblRva2VuOwoKICAgIHN0cmluZyAgcHVibGljICAgICAgICAgICAgICBuYW1lID0gIkF1dG8gVG9rZW4iOwogICAgc3RyaW5nICBwdWJsaWMgICAgICAgICAgICAgIHN5bWJvbCA9ICJBVEsiOwogICAgdWludDggICBwdWJsaWMgICAgICAgICAgICAgIGRlY2ltYWxzID0gMjsKCiAgICBib29sICAgIHB1YmxpYyAgICAgICAgICAgICAgY29udHJhY3RFbmFibGUgPSB0cnVlOwogICAgYm9vbCAgICBwdWJsaWMgICAgICAgICAgICAgIHRyYW5zZmVyRW5hYmxlID0gZmFsc2U7CgoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50OCkgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlICAgZ3JvdXA7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSAgIGFjY291bnRzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHByaXZhdGUgICBhbGxvd2VkOwoKICAgIGV2ZW50IEV2R3JvdXBDaGFuZ2VkKGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQ4IF9vbGRncm91cCwgdWludDggX25ld2dyb3VwKTsKICAgIGV2ZW50IEV2VG9rZW5BZGQodWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX2xhc3RTdXBwbHkpOwogICAgZXZlbnQgRXZUb2tlblJtKHVpbnQyNTYgX2RlbHRhLCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfbGFzdFN1cHBseSk7CiAgICBldmVudCBFdkxvZ2luZm8oc3RyaW5nIF9mdW5jdGlvbk5hbWUsIHN0cmluZyBfdGV4dCk7CiAgICBldmVudCBFdk1pZ3JhdGlvbihhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9iYWxhbmNlLCB1aW50MjU2IF9zZWNyZXQpOwoKICAgIHN0cnVjdCBncm91cFBvbGljeSB7CiAgICAgICAgdWludDggX2RlZmF1bHQ7CiAgICAgICAgdWludDggX2JhY2tlbmQ7CiAgICAgICAgdWludDggX21pZ3JhdGlvbjsKICAgICAgICB1aW50OCBfYWRtaW47CiAgICAgICAgdWludDggX3N1Ym93bmVyOwogICAgICAgIHVpbnQ4IF9vd25lcjsKICAgIH0KCiAgICBncm91cFBvbGljeSBwcml2YXRlIGN1cnJlbnRTdGF0ZSA9IGdyb3VwUG9saWN5KDAsIDMsIDksIDQsIDIsIDkpOwoKICAgIGZ1bmN0aW9uIEF1dG9Db2luKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQ4IF9kZWNpbWFscywgdWludDI1NiBfd2VpUGVyTWluVG9rZW4sIHVpbnQyNTYgX3N0YXJ0VG9rZW5zKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBncm91cFttc2cuc2VuZGVyXSA9IDk7CgogICAgICAgIGlmIChfd2VpUGVyTWluVG9rZW4gIT0gMCkKICAgICAgICAgICAgd2VpUGVyTWluVG9rZW4gPSBfd2VpUGVyTWluVG9rZW47CgogICAgICAgIGFjY291bnRzW293bmVyXSAgPSBfc3RhcnRUb2tlbnM7CiAgICAgICAgc3VtbWFyeVN1cHBseSAgICA9IF9zdGFydFRva2VuczsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgIH0KCiAgICBtb2RpZmllciBtaW5Hcm91cChpbnQgX3JlcXVpcmUpIHsKICAgICAgICByZXF1aXJlKGdyb3VwW21zZy5zZW5kZXJdID49IF9yZXF1aXJlKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICAgICBhc3NlcnQobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlcnZpY2VHcm91cENoYW5nZShhZGRyZXNzIF9hZGRyZXNzLCB1aW50OCBfZ3JvdXApIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fYWRtaW4pIGV4dGVybmFsIHJldHVybnModWludDgpIHsKICAgICAgICB1aW50OCBvbGQgPSBncm91cFtfYWRkcmVzc107CiAgICAgICAgaWYob2xkIDw9IGN1cnJlbnRTdGF0ZS5fYWRtaW4pIHsKICAgICAgICAgICAgZ3JvdXBbX2FkZHJlc3NdID0gX2dyb3VwOwogICAgICAgICAgICBFdkdyb3VwQ2hhbmdlZChfYWRkcmVzcywgb2xkLCBfZ3JvdXApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ3JvdXBbX2FkZHJlc3NdOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlcnZpY2VHcm91cEdldChhZGRyZXNzIF9jaGVjaykgbWluR3JvdXAoY3VycmVudFN0YXRlLl9iYWNrZW5kKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQ4IF9ncm91cCkgewogICAgICAgIHJldHVybiBncm91cFtfY2hlY2tdOwogICAgfQoKCiAgICBmdW5jdGlvbiBzZXR0aW5nc1NldFdlaVBlck1pblRva2VuKHVpbnQyNTYgX3dlaVBlck1pblRva2VuKSBtaW5Hcm91cChjdXJyZW50U3RhdGUuX2FkbWluKSBleHRlcm5hbCB7CiAgICAgICAgaWYgKF93ZWlQZXJNaW5Ub2tlbiA+IDApIHsKICAgICAgICAgICAgd2VpUGVyTWluVG9rZW4gPSBfd2VpUGVyTWluVG9rZW47CgogICAgICAgICAgICBFdkxvZ2luZm8oIlt3ZWlQZXJNaW5Ub2tlbl0iLCAiY2hhbmdlZCIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXJ2aWNlSW5jcmVhc2VCYWxhbmNlKGFkZHJlc3MgX3dobywgdWludDI1NiBfdmFsdWUpIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fYmFja2VuZCkgZXh0ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgYWNjb3VudHNbX3dob10gPSBhY2NvdW50c1tfd2hvXS5zYWZlQWRkKF92YWx1ZSk7CiAgICAgICAgc3VtbWFyeVN1cHBseSA9IHN1bW1hcnlTdXBwbHkuc2FmZUFkZChfdmFsdWUpOwoKICAgICAgICBFdlRva2VuQWRkKF92YWx1ZSwgc3VtbWFyeVN1cHBseSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2VydmljZURlY3JlYXNlQmFsYW5jZShhZGRyZXNzIF93aG8sIHVpbnQyNTYgX3ZhbHVlKSBtaW5Hcm91cChjdXJyZW50U3RhdGUuX2JhY2tlbmQpIGV4dGVybmFsIHJldHVybnMoYm9vbCkgewogICAgICAgIGFjY291bnRzW193aG9dID0gYWNjb3VudHNbX3dob10uc2FmZVN1YihfdmFsdWUpOwogICAgICAgIHN1bW1hcnlTdXBwbHkgPSBzdW1tYXJ5U3VwcGx5LnNhZmVTdWIoX3ZhbHVlKTsKCiAgICAgICAgRXZUb2tlblJtKGFjY291bnRzW193aG9dLCBfdmFsdWUsIHN1bW1hcnlTdXBwbHkpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlcnZpY2VUb2tlbnNCdXJuKGFkZHJlc3MgX2FkZHJlc3MpIGV4dGVybmFsIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fYmFja2VuZCkgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBhY2NvdW50c1tfYWRkcmVzc10gPSAwOwogICAgICAgIHJldHVybiBhY2NvdW50c1tfYWRkcmVzc107CiAgICB9CgogICAgZnVuY3Rpb24gc2VydmljZUNoYW5nZU93bmVyKGFkZHJlc3MgX25ld293bmVyKSBtaW5Hcm91cChjdXJyZW50U3RhdGUuX3N1Ym93bmVyKSBleHRlcm5hbCByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICBhZGRyZXNzIHRlbXA7CiAgICAgICAgdWludDI1NiB2YWx1ZTsKCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgc3Vib3duZXIgPSBfbmV3b3duZXI7CiAgICAgICAgICAgIGdyb3VwW21zZy5zZW5kZXJdID0gY3VycmVudFN0YXRlLl9zdWJvd25lcjsKICAgICAgICAgICAgZ3JvdXBbX25ld293bmVyXSA9IGN1cnJlbnRTdGF0ZS5fc3Vib3duZXI7CgogICAgICAgICAgICBFdkdyb3VwQ2hhbmdlZChfbmV3b3duZXIsIGN1cnJlbnRTdGF0ZS5fb3duZXIsIGN1cnJlbnRTdGF0ZS5fc3Vib3duZXIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gc3Vib3duZXIpIHsKICAgICAgICAgICAgdGVtcCA9IG93bmVyOwogICAgICAgICAgICB2YWx1ZSA9IGFjY291bnRzW293bmVyXTsKCiAgICAgICAgICAgIGFjY291bnRzW293bmVyXSA9IGFjY291bnRzW293bmVyXS5zYWZlU3ViKHZhbHVlKTsKICAgICAgICAgICAgYWNjb3VudHNbc3Vib3duZXJdID0gYWNjb3VudHNbc3Vib3duZXJdLnNhZmVBZGQodmFsdWUpOwoKICAgICAgICAgICAgb3duZXIgPSBzdWJvd25lcjsKCiAgICAgICAgICAgIGRlbGV0ZSBncm91cFt0ZW1wXTsKICAgICAgICAgICAgZ3JvdXBbc3Vib3duZXJdID0gY3VycmVudFN0YXRlLl9vd25lcjsKCiAgICAgICAgICAgIHN1Ym93bmVyID0gMHgwMDsKCiAgICAgICAgICAgIEV2R3JvdXBDaGFuZ2VkKF9uZXdvd25lciwgY3VycmVudFN0YXRlLl9zdWJvd25lciwgY3VycmVudFN0YXRlLl9vd25lcik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3Vib3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gdXNlclRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDY0KSBtaW5Hcm91cChjdXJyZW50U3RhdGUuX2RlZmF1bHQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChhY2NvdW50c1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgKHRyYW5zZmVyRW5hYmxlIHx8IGdyb3VwW21zZy5zZW5kZXJdID49IGN1cnJlbnRTdGF0ZS5fYmFja2VuZCkpIHsKICAgICAgICAgICAgYWNjb3VudHNbbXNnLnNlbmRlcl0gPSBhY2NvdW50c1ttc2cuc2VuZGVyXS5zYWZlU3ViKF92YWx1ZSk7CiAgICAgICAgICAgIGFjY291bnRzW190b10gPSBhY2NvdW50c1tfdG9dLnNhZmVBZGQoX3ZhbHVlKTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHVzZXJUcmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoNjQpIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fZGVmYXVsdCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKChhY2NvdW50c1tfZnJvbV0gPj0gX3ZhbHVlKSAmJiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKSAmJiAodHJhbnNmZXJFbmFibGUgfHwgZ3JvdXBbbXNnLnNlbmRlcl0gPj0gY3VycmVudFN0YXRlLl9iYWNrZW5kKSkgewogICAgICAgICAgICBhY2NvdW50c1tfZnJvbV0gPSBhY2NvdW50c1tfZnJvbV0uc2FmZVN1YihfdmFsdWUpOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnNhZmVTdWIoX3ZhbHVlKTsKICAgICAgICAgICAgYWNjb3VudHNbX3RvXSA9IGFjY291bnRzW190b10uc2FmZUFkZChfdmFsdWUpOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHVzZXJBcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX29sZCwgdWludDI1NiBfbmV3KSBvbmx5UGF5bG9hZFNpemUoNjQpIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fZGVmYXVsdCkgZXh0ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKF9vbGQgPT0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pIHsKICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfbmV3OwogICAgICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX25ldyk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgaWYgKF9vd25lciA9PSAweDAwKQogICAgICAgICAgICByZXR1cm4gYWNjb3VudHNbbXNnLnNlbmRlcl07CiAgICAgICAgcmV0dXJuIGFjY291bnRzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF90b3RhbFN1cHBseSkgewogICAgICAgIF90b3RhbFN1cHBseSA9IHN1bW1hcnlTdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gZGVzdHJveSgpIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fb3duZXIpIGV4dGVybmFsIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldHRpbmdzU3dpdGNoU3RhdGUoKSBleHRlcm5hbCBtaW5Hcm91cChjdXJyZW50U3RhdGUuX293bmVyKSByZXR1cm5zIChib29sIHN0YXRlKSB7CgogICAgICAgIGlmKGNvbnRyYWN0RW5hYmxlKSB7CiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5fZGVmYXVsdCA9IDk7CiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5fbWlncmF0aW9uID0gMDsKICAgICAgICAgICAgY29udHJhY3RFbmFibGUgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjdXJyZW50U3RhdGUuX2RlZmF1bHQgPSAwOwogICAgICAgICAgICBjdXJyZW50U3RhdGUuX21pZ3JhdGlvbiA9IDk7CiAgICAgICAgICAgIGNvbnRyYWN0RW5hYmxlID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjb250cmFjdEVuYWJsZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXR0aW5nc1N3aXRjaFRyYW5zZmVyQWNjZXNzKCkgZXh0ZXJuYWwgbWluR3JvdXAoY3VycmVudFN0YXRlLl9iYWNrZW5kKSByZXR1cm5zIChib29sIGFjY2VzcykgewogICAgICAgIHRyYW5zZmVyRW5hYmxlID0gIXRyYW5zZmVyRW5hYmxlOwogICAgICAgIHJldHVybiB0cmFuc2ZlckVuYWJsZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1c2VyTWlncmF0aW9uKHVpbnQyNTYgX3NlY3JlY3QpIGV4dGVybmFsIG1pbkdyb3VwKGN1cnJlbnRTdGF0ZS5fbWlncmF0aW9uKSByZXR1cm5zIChib29sIHN1Y2Nlc3NmdWwpIHsKCiAgICAgICAgdWludDI1NiBiYWxhbmNlID0gYWNjb3VudHNbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGJhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgIGFjY291bnRzW21zZy5zZW5kZXJdID0gYWNjb3VudHNbbXNnLnNlbmRlcl0uc2FmZVN1YihiYWxhbmNlKTsKICAgICAgICAgICAgYWNjb3VudHNbb3duZXJdID0gYWNjb3VudHNbb3duZXJdLnNhZmVBZGQoYmFsYW5jZSk7CiAgICAgICAgICAgIEV2TWlncmF0aW9uKG1zZy5zZW5kZXIsIGJhbGFuY2UsIF9zZWNyZWN0KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQp9'.
	

]
