Class {
	#name : #SRT5e21dd5ae3074d36db940bd4e0290fbba6b34cb3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e21dd5ae3074d36db940bd4e0290fbba6b34cb3 >> base64 [
	^ ''.
	

]
