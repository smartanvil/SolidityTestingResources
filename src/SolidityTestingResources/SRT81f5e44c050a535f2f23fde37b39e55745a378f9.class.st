Class {
	#name : #SRT81f5e44c050a535f2f23fde37b39e55745a378f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT81f5e44c050a535f2f23fde37b39e55745a378f9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBUb2tlbiB7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGFkZHJlc3NlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGFkZHJlc3NFeGlzdHM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBhZGRyZXNzSW5kZXg7CiAgICB1aW50MjU2IHB1YmxpYyBudW1iZXJPZkFkZHJlc3MgPSAwOwogICAgCiAgICBzdHJpbmcgcHVibGljIHBoeXNpY2FsU3RyaW5nOwogICAgc3RyaW5nIHB1YmxpYyBjcnlwdG9TdHJpbmc7CiAgICAKICAgIGJvb2wgcHVibGljIGlzU2VjdXJlZDsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBib29sIHB1YmxpYyBjYW5NaW50QnVybjsKICAgIHVpbnQyNTYgcHVibGljIHR4blRheDsKICAgIHVpbnQyNTYgcHVibGljIGhvbGRpbmdUYXg7CiAgICAvL0luIFdlZWtzLCBvbiBGcmlkYXlzCiAgICB1aW50MjU2IHB1YmxpYyBob2xkaW5nVGF4SW50ZXJ2YWw7CiAgICB1aW50MjU2IHB1YmxpYyBsYXN0SG9sZGluZ1RheDsKICAgIHVpbnQyNTYgcHVibGljIGhvbGRpbmdUYXhEZWNpbWFscyA9IDI7CiAgICBib29sIHB1YmxpYyBpc1ByaXZhdGU7CiAgICAKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgCiAgICBmdW5jdGlvbiBUb2tlbihzdHJpbmcgbiwgc3RyaW5nIGEsIHVpbnQyNTYgdG90YWxTdXBwbHlUb1VzZSwgYm9vbCBpc1NlY3VyZWQsIGJvb2wgY01CLCBzdHJpbmcgcGh5c2ljYWwsIHN0cmluZyBjcnlwdG8sIHVpbnQyNTYgdHhuVGF4VG9Vc2UsIHVpbnQyNTYgaG9sZGluZ1RheFRvVXNlLCB1aW50MjU2IGhvbGRpbmdUYXhJbnRlcnZhbFRvVXNlLCBib29sIGlzUHJpdmF0ZVRvVXNlKSB7CiAgICAgICAgbmFtZSA9IG47CiAgICAgICAgc3ltYm9sID0gYTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5VG9Vc2U7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHlUb1VzZTsKICAgICAgICBpc1NlY3VyZWQgPSBpc1NlY3VyZWQ7CiAgICAgICAgcGh5c2ljYWxTdHJpbmcgPSBwaHlzaWNhbDsKICAgICAgICBjcnlwdG9TdHJpbmcgPSBjcnlwdG87CiAgICAgICAgY2FuTWludEJ1cm4gPSBjTUI7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHR4blRheCA9IHR4blRheFRvVXNlOwogICAgICAgIGhvbGRpbmdUYXggPSBob2xkaW5nVGF4VG9Vc2U7CiAgICAgICAgaG9sZGluZ1RheEludGVydmFsID0gaG9sZGluZ1RheEludGVydmFsVG9Vc2U7CiAgICAgICAgaWYoaG9sZGluZ1RheEludGVydmFsIT0wKSB7CiAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4ID0gbm93OwogICAgICAgICAgICB3aGlsZShnZXRIb3VyKGxhc3RIb2xkaW5nVGF4KSE9MjEpIHsKICAgICAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4IC09IDEgaG91cnM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUoZ2V0V2Vla2RheShsYXN0SG9sZGluZ1RheCkhPTUpIHsKICAgICAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4IC09IDEgZGF5czsKICAgICAgICAgICAgfQogICAgICAgICAgICBsYXN0SG9sZGluZ1RheCAtPSBnZXRNaW51dGUobGFzdEhvbGRpbmdUYXgpICogKDEgbWludXRlcykgKyBnZXRTZWNvbmQobGFzdEhvbGRpbmdUYXgpICogKDEgc2Vjb25kcyk7CiAgICAgICAgfQogICAgICAgIGlzUHJpdmF0ZSA9IGlzUHJpdmF0ZVRvVXNlOwogICAgICAgIAogICAgICAgIGFkZEFkZHJlc3Mob3duZXIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHBheWFibGUgewogICAgICAgIGNoYXJnZUhvbGRpbmdUYXgoKTsKICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgX3RvICE9IG93bmVyICYmIHR4blRheCAhPSAwKSB7CiAgICAgICAgICAgIGlmKCFvd25lci5zZW5kKHR4blRheCkpIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKGlzUHJpdmF0ZSAmJiBtc2cuc2VuZGVyICE9IG93bmVyICYmICFhZGRyZXNzRXhpc3RzW190b10pIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIGFkZEFkZHJlc3MoX3RvKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZVR4blRheCh1aW50MjU2IF9uZXdWYWx1ZSkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIHR4blRheCA9IF9uZXdWYWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbWludCh1aW50MjU2IF92YWx1ZSkgewogICAgICAgIGlmKGNhbk1pbnRCdXJuICYmIG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSArIF92YWx1ZSA8IGJhbGFuY2VPZlttc2cuc2VuZGVyXSkgdGhyb3c7CiAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBfdmFsdWU7CiAgICAgICAgICAgIHRvdGFsU3VwcGx5ICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoMCwgbXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZihjYW5NaW50QnVybiAmJiBtc2cuc2VuZGVyID09IG93bmVyKSB7CiAgICAgICAgICAgIGlmIChiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OwogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIDAsIF92YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFyZ2VIb2xkaW5nVGF4KCkgewogICAgICAgIGlmKGhvbGRpbmdUYXhJbnRlcnZhbCE9MCkgewogICAgICAgICAgICB1aW50MjU2IGRhdGVEaWYgPSBub3cgLSBsYXN0SG9sZGluZ1RheDsKICAgICAgICAgICAgYm9vbCBjaGFuZ2VkID0gZmFsc2U7CiAgICAgICAgICAgIHdoaWxlKGRhdGVEaWYgPj0gaG9sZGluZ1RheEludGVydmFsICogKDEgd2Vla3MpKSB7CiAgICAgICAgICAgICAgICBjaGFuZ2VkPXRydWU7CiAgICAgICAgICAgICAgICBkYXRlRGlmIC09IGhvbGRpbmdUYXhJbnRlcnZhbCAqICgxIHdlZWtzKTsKICAgICAgICAgICAgICAgIGZvcih1aW50MjU2IGkgPSAwO2k8bnVtYmVyT2ZBZGRyZXNzO2krKykgewogICAgICAgICAgICAgICAgICAgIGlmKGFkZHJlc3Nlc1tpXSE9b3duZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBhbXRPZlRheFRvUGF5ID0gKChiYWxhbmNlT2ZbYWRkcmVzc2VzW2ldXSkgKiBob2xkaW5nVGF4KSAgLyAoMTAqKmhvbGRpbmdUYXhEZWNpbWFscykvICgxMCoqaG9sZGluZ1RheERlY2ltYWxzKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZU9mW2FkZHJlc3Nlc1tpXV0gLT0gYW10T2ZUYXhUb1BheTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZU9mW293bmVyXSArPSBhbXRPZlRheFRvUGF5OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihjaGFuZ2VkKSB7CiAgICAgICAgICAgICAgICBsYXN0SG9sZGluZ1RheCA9IG5vdzsKICAgICAgICAgICAgICAgIHdoaWxlKGdldEhvdXIobGFzdEhvbGRpbmdUYXgpIT0yMSkgewogICAgICAgICAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4IC09IDEgaG91cnM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB3aGlsZShnZXRXZWVrZGF5KGxhc3RIb2xkaW5nVGF4KSE9NSkgewogICAgICAgICAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4IC09IDEgZGF5czsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxhc3RIb2xkaW5nVGF4IC09IGdldE1pbnV0ZShsYXN0SG9sZGluZ1RheCkgKiAoMSBtaW51dGVzKSArIGdldFNlY29uZChsYXN0SG9sZGluZ1RheCkgKiAoMSBzZWNvbmRzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlSG9sZGluZ1RheCh1aW50MjU2IF9uZXdWYWx1ZSkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIGhvbGRpbmdUYXggPSBfbmV3VmFsdWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZUhvbGRpbmdUYXhJbnRlcnZhbCh1aW50MjU2IF9uZXdWYWx1ZSkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIGhvbGRpbmdUYXhJbnRlcnZhbCA9IF9uZXdWYWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkQWRkcmVzcyAoYWRkcmVzcyBhZGRyKSBwcml2YXRlIHsKICAgICAgICBpZighYWRkcmVzc0V4aXN0c1thZGRyXSkgewogICAgICAgICAgICBhZGRyZXNzSW5kZXhbYWRkcl0gPSBudW1iZXJPZkFkZHJlc3M7CiAgICAgICAgICAgIGFkZHJlc3Nlc1tudW1iZXJPZkFkZHJlc3MrK10gPSBhZGRyOwogICAgICAgICAgICBhZGRyZXNzRXhpc3RzW2FkZHJdID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFkZEFkZHJlc3NNYW51YWwgKGFkZHJlc3MgYWRkcikgewogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gb3duZXIgJiYgaXNQcml2YXRlKSB7CiAgICAgICAgICAgIGFkZEFkZHJlc3MoYWRkcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVBZGRyZXNzIChhZGRyZXNzIGFkZHIpIHByaXZhdGUgewogICAgICAgIGlmKGFkZHJlc3NFeGlzdHNbYWRkcl0pIHsKICAgICAgICAgICAgbnVtYmVyT2ZBZGRyZXNzLS07CiAgICAgICAgICAgIGFkZHJlc3Nlc1thZGRyZXNzSW5kZXhbYWRkcl1dID0gMHgwOwogICAgICAgICAgICBhZGRyZXNzRXhpc3RzW2FkZHJdID0gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVBZGRyZXNzTWFudWFsIChhZGRyZXNzIGFkZHIpIHsKICAgICAgICBpZihtc2cuc2VuZGVyID09IG93bmVyICYmIGlzUHJpdmF0ZSkgewogICAgICAgICAgICByZW1vdmVBZGRyZXNzKGFkZHIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0V2Vla2RheSh1aW50IHRpbWVzdGFtcCkgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KCh0aW1lc3RhbXAgLyA4NjQwMCArIDQpICUgNyk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEhvdXIodWludCB0aW1lc3RhbXApIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgIHJldHVybiB1aW50OCgodGltZXN0YW1wIC8gNjAgLyA2MCkgJSAyNCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWludXRlKHVpbnQgdGltZXN0YW1wKSByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICByZXR1cm4gdWludDgoKHRpbWVzdGFtcCAvIDYwKSAlIDYwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRTZWNvbmQodWludCB0aW1lc3RhbXApIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgIHJldHVybiB1aW50OCh0aW1lc3RhbXAgJSA2MCk7CiAgICB9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7Cn0='.
	

]
