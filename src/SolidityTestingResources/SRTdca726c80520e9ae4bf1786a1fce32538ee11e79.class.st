Class {
	#name : #SRTdca726c80520e9ae4bf1786a1fce32538ee11e79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdca726c80520e9ae4bf1786a1fce32538ee11e79 >> base64 [
	^ ''.
	

]
