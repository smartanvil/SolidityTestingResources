Class {
	#name : #SRTa5e9fd547d78f2b658ae6c45ad08d9ab432c797c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa5e9fd547d78f2b658ae6c45ad08d9ab432c797c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAgIC8qKgogICAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICAgKiBhY2NvdW50LgogICAgICovCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCgogICAgLyoqCiAgICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cgp9CgoKLyoKICogSGFsdGFibGUKICoKICogQWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuCiAqIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4gRGlmZmVycyBmcm9tIFBhdXNhYmxlIGJ5IGNhdXNpbmcgYSB0aHJvdyB3aGVuIGluIGhhbHQgbW9kZS4KICoKICoKICogT3JpZ2luYWxseSBlbnZpc2lvbmVkIGluIEZpcnN0Qmxvb2QgSUNPIGNvbnRyYWN0LgogKi8KY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgICBib29sIHB1YmxpYyBoYWx0ZWQ7CgogICAgbW9kaWZpZXIgc3RvcEluRW1lcmdlbmN5IHsKICAgICAgICByZXF1aXJlKCFoYWx0ZWQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgICAgICByZXF1aXJlKGhhbHRlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAgZnVuY3Rpb24gaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgaGFsdGVkID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVuZCBvZiBlbWVyZ2VuY3ksIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgICAgICBoYWx0ZWQgPSBmYWxzZTsKICAgIH0KCn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvKioKICAgICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQXByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKfQoKCi8qKgogKiBAdGl0bGUgVmVyYUNvaW4KICogQGRldiBWZXJ5IHNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aGVyZSBhbGwgdG9rZW5zIGFyZSBwcmUtYXNzaWduZWQgdG8gdGhlIGNyZWF0b3IuCiAqIE5vdGUgdGhleSBjYW4gbGF0ZXIgZGlzdHJpYnV0ZSB0aGVzZSB0b2tlbnMgYXMgdGhleSB3aXNoIHVzaW5nIGB0cmFuc2ZlcmAgYW5kIG90aGVyCiAqIGBTdGFuZGFyZFRva2VuYCBmdW5jdGlvbnMuCiAqLwpjb250cmFjdCBWZXJhQ29pbiBpcyBTdGFuZGFyZFRva2VuIHsKCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiVmVyYUNvaW4iOwoKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlZlcmEiOwoKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludDI1NiBwdWJsaWMgSU5JVElBTF9TVVBQTFkgPSAxNTcwMDAwMCAqIDEgZXRoZXI7CgogICAgLyoqCiAgICAqIEBkZXYgQ29udHJ1Y3RvciB0aGF0IGdpdmVzIG1zZy5zZW5kZXIgYWxsIG9mIGV4aXN0aW5nIHRva2Vucy4KICAgICovCiAgICBmdW5jdGlvbiBWZXJhQ29pbigpIHsKICAgICAgICB0b3RhbFN1cHBseSA9IElOSVRJQUxfU1VQUExZOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gSU5JVElBTF9TVVBQTFk7CiAgICB9Cn0KCgpjb250cmFjdCBWZXJhQ29pblByZVNhbGUgaXMgSGFsdGFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlZlcmFDb2luIFByZVNhbGUiOwoKICAgIFZlcmFDb2luIHB1YmxpYyB0b2tlbjsKCiAgICBhZGRyZXNzIHB1YmxpYyBiZW5lZmljaWFyeTsKCiAgICB1aW50MjU2IHB1YmxpYyBoYXJkQ2FwOwoKICAgIHVpbnQyNTYgcHVibGljIHNvZnRDYXA7CgogICAgdWludDI1NiBwdWJsaWMgY29sbGVjdGVkOwoKICAgIHVpbnQyNTYgcHVibGljIHByaWNlOwoKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc1NvbGQgPSAwOwoKICAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZCA9IDA7CgogICAgdWludDI1NiBwdWJsaWMgaW52ZXN0b3JDb3VudCA9IDA7CgogICAgdWludDI1NiBwdWJsaWMgd2VpUmVmdW5kZWQgPSAwOwoKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKCiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAgIGJvb2wgcHVibGljIHNvZnRDYXBSZWFjaGVkID0gZmFsc2U7CgogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlRmluaXNoZWQgPSBmYWxzZTsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHJlZnVuZGVkOwoKICAgIGV2ZW50IEdvYWxSZWFjaGVkKHVpbnQyNTYgYW1vdW50UmFpc2VkKTsKCiAgICBldmVudCBTb2Z0Q2FwUmVhY2hlZCh1aW50MjU2IHNvZnRDYXApOwoKICAgIGV2ZW50IE5ld0NvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgaG9sZGVyLCB1aW50MjU2IHRva2VuQW1vdW50LCB1aW50MjU2IGV0aGVyQW1vdW50KTsKCiAgICBldmVudCBSZWZ1bmRlZChhZGRyZXNzIGluZGV4ZWQgaG9sZGVyLCB1aW50MjU2IGFtb3VudCk7CgogICAgbW9kaWZpZXIgb25seUFmdGVyKHVpbnQyNTYgdGltZSkgewogICAgICAgIHJlcXVpcmUobm93ID49IHRpbWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUJlZm9yZSh1aW50MjU2IHRpbWUpIHsKICAgICAgICByZXF1aXJlKG5vdyA8PSB0aW1lKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIFZlcmFDb2luUHJlU2FsZSgKICAgIHVpbnQyNTYgX2hhcmRDYXBVU0QsCiAgICB1aW50MjU2IF9zb2Z0Q2FwVVNELAogICAgYWRkcmVzcyBfdG9rZW4sCiAgICBhZGRyZXNzIF9iZW5lZmljaWFyeSwKICAgIHVpbnQyNTYgX3RvdGFsVG9rZW5zLAogICAgdWludDI1NiBfcHJpY2VFVEgsCgogICAgdWludDI1NiBfc3RhcnRUaW1lLAogICAgdWludDI1NiBfZHVyYXRpb24KICAgICkgewogICAgICAgIGhhcmRDYXAgPSBfaGFyZENhcFVTRCAqIDEgZXRoZXIgLyBfcHJpY2VFVEg7CiAgICAgICAgc29mdENhcCA9IF9zb2Z0Q2FwVVNEICogMSBldGhlciAvIF9wcmljZUVUSDsKICAgICAgICBwcmljZSA9IF90b3RhbFRva2VucyAqIDEgZXRoZXIgLyBoYXJkQ2FwOwoKICAgICAgICB0b2tlbiA9IFZlcmFDb2luKF90b2tlbik7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7CgogICAgICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICAgICAgZW5kVGltZSA9IF9zdGFydFRpbWUgKyBfZHVyYXRpb24gKiAxIGhvdXJzOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSBzdG9wSW5FbWVyZ2VuY3kgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDAuMDEgKiAxIGV0aGVyKTsKICAgICAgICBkb1B1cmNoYXNlKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnVuZCgpIGV4dGVybmFsIG9ubHlBZnRlcihlbmRUaW1lKSB7CiAgICAgICAgcmVxdWlyZSghc29mdENhcFJlYWNoZWQpOwogICAgICAgIHJlcXVpcmUoIXJlZnVuZGVkW21zZy5zZW5kZXJdKTsKCiAgICAgICAgdWludDI1NiBiYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKG1zZy5zZW5kZXIpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZSA+IDApOwoKICAgICAgICB1aW50MjU2IHJlZnVuZCA9IGJhbGFuY2UgLyBwcmljZTsKICAgICAgICBpZiAocmVmdW5kID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgICAgIHJlZnVuZCA9IHRoaXMuYmFsYW5jZTsKICAgICAgICB9CgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlci5zZW5kKHJlZnVuZCkpOwogICAgICAgIHJlZnVuZGVkW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICB3ZWlSZWZ1bmRlZCA9IHdlaVJlZnVuZGVkLmFkZChyZWZ1bmQpOwogICAgICAgIFJlZnVuZGVkKG1zZy5zZW5kZXIsIHJlZnVuZCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoc29mdENhcFJlYWNoZWQpOwogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkuc2VuZChjb2xsZWN0ZWQpKTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICAgICAgICBjcm93ZHNhbGVGaW5pc2hlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZG9QdXJjaGFzZShhZGRyZXNzIF9vd25lcikgcHJpdmF0ZSBvbmx5QWZ0ZXIoc3RhcnRUaW1lKSBvbmx5QmVmb3JlKGVuZFRpbWUpIHsKICAgICAgICByZXF1aXJlKCFjcm93ZHNhbGVGaW5pc2hlZCk7CiAgICAgICAgcmVxdWlyZShjb2xsZWN0ZWQuYWRkKG1zZy52YWx1ZSkgPD0gaGFyZENhcCk7CgogICAgICAgIGlmICghc29mdENhcFJlYWNoZWQgJiYgY29sbGVjdGVkIDwgc29mdENhcCAmJiBjb2xsZWN0ZWQuYWRkKG1zZy52YWx1ZSkgPj0gc29mdENhcCkgewogICAgICAgICAgICBzb2Z0Q2FwUmVhY2hlZCA9IHRydWU7CiAgICAgICAgICAgIFNvZnRDYXBSZWFjaGVkKHNvZnRDYXApOwogICAgICAgIH0KCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBtc2cudmFsdWUgKiBwcmljZTsKCiAgICAgICAgaWYgKHRva2VuLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA9PSAwKSBpbnZlc3RvckNvdW50Kys7CgogICAgICAgIGNvbGxlY3RlZCA9IGNvbGxlY3RlZC5hZGQobXNnLnZhbHVlKTsKCiAgICAgICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zKTsKCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLmFkZCh0b2tlbnMpOwoKICAgICAgICBOZXdDb250cmlidXRpb24oX293bmVyLCB0b2tlbnMsIG1zZy52YWx1ZSk7CgogICAgICAgIGlmIChjb2xsZWN0ZWQgPT0gaGFyZENhcCkgewogICAgICAgICAgICBHb2FsUmVhY2hlZChoYXJkQ2FwKTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
