Class {
	#name : #SRTf886c9d089103f9af130c857bd58cc56f4b989b7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf886c9d089103f9af130c857bd58cc56f4b989b7 >> base64 [
	^ ''.
	

]
