Class {
	#name : #SRTa7f976C360ebBeD4465c2855684D1AAE5271eFa9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa7f976C360ebBeD4465c2855684D1AAE5271eFa9 >> base64 [
	^ ''.
	

]
