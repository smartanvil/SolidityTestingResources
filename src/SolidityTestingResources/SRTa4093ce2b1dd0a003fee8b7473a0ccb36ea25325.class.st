Class {
	#name : #SRTa4093ce2b1dd0a003fee8b7473a0ccb36ea25325,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4093ce2b1dd0a003fee8b7473a0ccb36ea25325 >> base64 [
	^ ''.
	

]
