Class {
	#name : #SRT42b81fb65d24f547aee4f012e6953e41d0be0d5e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42b81fb65d24f547aee4f012e6953e41d0be0d5e >> base64 [
	^ ''.
	

]
