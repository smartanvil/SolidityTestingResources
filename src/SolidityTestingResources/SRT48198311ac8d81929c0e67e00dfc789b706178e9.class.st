Class {
	#name : #SRT48198311ac8d81929c0e67e00dfc789b706178e9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48198311ac8d81929c0e67e00dfc789b706178e9 >> base64 [
	^ ''.
	

]
