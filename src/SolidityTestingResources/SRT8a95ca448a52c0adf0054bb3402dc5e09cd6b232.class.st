Class {
	#name : #SRT8a95ca448a52c0adf0054bb3402dc5e09cd6b232,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a95ca448a52c0adf0054bb3402dc5e09cd6b232 >> base64 [
	^ ''.
	

]
