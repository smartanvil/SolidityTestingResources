Class {
	#name : #SRT9cd02516d58EBAEf8DcE063FEe284a3c47a737E8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9cd02516d58EBAEf8DcE063FEe284a3c47a737E8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgQ2xhaW1hYmxlCiAqIEBkZXYgRXh0ZW5zaW9uIGZvciB0aGUgT3duYWJsZSBjb250cmFjdCwgd2hlcmUgdGhlIG93bmVyc2hpcCBuZWVkcyB0byBiZSBjbGFpbWVkLgogKiBUaGlzIGFsbG93cyB0aGUgbmV3IG93bmVyIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIuCiAqLwpjb250cmFjdCBDbGFpbWFibGUgaXMgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgcGVuZGluZ093bmVyOwoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgcGVuZGluZ093bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlQZW5kaW5nT3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byBzZXQgdGhlIHBlbmRpbmdPd25lciBhZGRyZXNzLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICBwZW5kaW5nT3duZXIgPSBuZXdPd25lcjsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBwZW5kaW5nT3duZXIgYWRkcmVzcyB0byBmaW5hbGl6ZSB0aGUgdHJhbnNmZXIuCiAgICovCiAgZnVuY3Rpb24gY2xhaW1Pd25lcnNoaXAoKSBvbmx5UGVuZGluZ093bmVyIHB1YmxpYyB7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgcGVuZGluZ093bmVyKTsKICAgIG93bmVyID0gcGVuZGluZ093bmVyOwogICAgcGVuZGluZ093bmVyID0gYWRkcmVzcygwKTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBTYWZlRVJDMjAKICogQGRldiBXcmFwcGVycyBhcm91bmQgRVJDMjAgb3BlcmF0aW9ucyB0aGF0IHRocm93IG9uIGZhaWx1cmUuCiAqIFRvIHVzZSB0aGlzIGxpYnJhcnkgeW91IGNhbiBhZGQgYSBgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMDtgIHN0YXRlbWVudCB0byB5b3VyIGNvbnRyYWN0LAogKiB3aGljaCBhbGxvd3MgeW91IHRvIGNhbGwgdGhlIHNhZmUgb3BlcmF0aW9ucyBhcyBgdG9rZW4uc2FmZVRyYW5zZmVyKC4uLilgLCBldGMuCiAqLwpsaWJyYXJ5IFNhZmVFUkMyMCB7CiAgZnVuY3Rpb24gc2FmZVRyYW5zZmVyKEVSQzIwQmFzaWMgdG9rZW4sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi50cmFuc2Zlcih0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVUcmFuc2ZlckZyb20oRVJDMjAgdG9rZW4sIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgewogICAgYXNzZXJ0KHRva2VuLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgdmFsdWUpKTsKICB9CgogIGZ1bmN0aW9uIHNhZmVBcHByb3ZlKEVSQzIwIHRva2VuLCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIGludGVybmFsIHsKICAgIGFzc2VydCh0b2tlbi5hcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSk7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBDb250cmFjdHMgdGhhdCBzaG91bGQgYmUgYWJsZSB0byByZWNvdmVyIHRva2VucwogKiBAYXV0aG9yIFN5bFRpCiAqIEBkZXYgVGhpcyBhbGxvdyBhIGNvbnRyYWN0IHRvIHJlY292ZXIgYW55IEVSQzIwIHRva2VuIHJlY2VpdmVkIGluIGEgY29udHJhY3QgYnkgdHJhbnNmZXJyaW5nIHRoZSBiYWxhbmNlIHRvIHRoZSBjb250cmFjdCBvd25lci4KICogVGhpcyB3aWxsIHByZXZlbnQgYW55IGFjY2lkZW50YWwgbG9zcyBvZiB0b2tlbnMuCiAqLwpjb250cmFjdCBDYW5SZWNsYWltVG9rZW4gaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZUVSQzIwIGZvciBFUkMyMEJhc2ljOwoKICAvKioKICAgKiBAZGV2IFJlY2xhaW0gYWxsIEVSQzIwQmFzaWMgY29tcGF0aWJsZSB0b2tlbnMKICAgKiBAcGFyYW0gdG9rZW4gRVJDMjBCYXNpYyBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QKICAgKi8KICBmdW5jdGlvbiByZWNsYWltVG9rZW4oRVJDMjBCYXNpYyB0b2tlbikgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnNhZmVUcmFuc2Zlcihvd25lciwgYmFsYW5jZSk7CiAgfQoKfQoKCi8vLyBAZGV2IEltcGxlbWVudHMgYWNjZXNzIGNvbnRyb2wgdG8gdGhlIENocm9ub3MgY29udHJhY3QuCmNvbnRyYWN0IENocm9ub3NBY2Nlc3NDb250cm9sIGlzIENsYWltYWJsZSwgUGF1c2FibGUsIENhblJlY2xhaW1Ub2tlbiB7CiAgICBhZGRyZXNzIHB1YmxpYyBjZm9BZGRyZXNzOwogICAgCiAgICBmdW5jdGlvbiBDaHJvbm9zQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgLy8gVGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0IGlzIHRoZSBpbml0aWFsIENGTy4KICAgICAgICBjZm9BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRk8tb25seSBmdW5jdGlvbmFsaXR5LgogICAgbW9kaWZpZXIgb25seUNGTygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2ZvQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDRk8uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IGNvbnRyYWN0IG93bmVyLgogICAgLy8vIEBwYXJhbSBfbmV3Q0ZPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0ZPLgogICAgZnVuY3Rpb24gc2V0Q0ZPKGFkZHJlc3MgX25ld0NGTykgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9uZXdDRk8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNmb0FkZHJlc3MgPSBfbmV3Q0ZPOwogICAgfQp9CgoKLy8vIEBkZXYgRGVmaW5lcyBiYXNlIGRhdGEgc3RydWN0dXJlcyBmb3IgQ2hyb25vcy4KY29udHJhY3QgQ2hyb25vc0Jhc2UgaXMgQ2hyb25vc0FjY2Vzc0NvbnRyb2wgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIC8vLyBAbm90aWNlIFRpbWUgd2luZG93cyBpbiBzZWNvbmRzIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrCiAgICAvLy8gd2hlbiBuZXcgZ2FtZXMgY2FuIGJlIHN0YXJ0ZWQuCiAgICB1aW50MjU2W10gcHVibGljIGFjdGl2ZVRpbWVzRnJvbTsKICAgIHVpbnQyNTZbXSBwdWJsaWMgYWN0aXZlVGltZXNUbzsKICAgIAogICAgLy8vIEBub3RpY2UgV2hldGhlciB0aGUgZ2FtZSBjYW4gc3RhcnQgb25jZSBvdXRzaWRlIG9mIGFjdGl2ZSB0aW1lcy4KICAgIGJvb2wgcHVibGljIGFsbG93U3RhcnQ7CiAgICAKICAgIC8vLyBAbm90aWNlIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIGEgZ2FtZSBpcyBsaXZlLgogICAgYm9vbCBwdWJsaWMgZ2FtZVN0YXJ0ZWQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBsYXN0IHBsYXllciB0byBoYXZlIGVudGVyZWQuCiAgICBhZGRyZXNzIHB1YmxpYyBsYXN0UGxheWVyOwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgdGltZXN0YW1wIHRoZSBsYXN0IHdhZ2VyIHRpbWVzIG91dC4KICAgIHVpbnQyNTYgcHVibGljIGxhc3RXYWdlclRpbWVvdXRUaW1lc3RhbXA7CgogICAgLy8vIEBub3RpY2UgVGhlIG51bWJlciBvZiBzZWNvbmRzIGJlZm9yZSB0aGUgZ2FtZSBlbmRzLgogICAgdWludDI1NiBwdWJsaWMgdGltZW91dDsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIG51bWJlciBvZiBzZWNvbmRzIGJlZm9yZSB0aGUgZ2FtZSBlbmRzIC0tIHNldHRpbmcKICAgIC8vLyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIG5leHRUaW1lb3V0OwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgZmluYWwgbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIHRoZSBnYW1lIGVuZHMuCiAgICB1aW50MjU2IHB1YmxpYyBmaW5hbFRpbWVvdXQ7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBmaW5hbCBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgdGhlIGdhbWUgZW5kcyAtLQogICAgLy8vIHNldHRpbmcgZm9yIHRoZSBuZXh0IGdhbWUuCiAgICB1aW50MjU2IHB1YmxpYyBuZXh0RmluYWxUaW1lb3V0OwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgbnVtYmVyIG9mIHdhZ2VycyByZXF1aXJlZCB0byBtb3ZlIHRvIHRoZQogICAgLy8vIGZpbmFsIHRpbWVvdXQuCiAgICB1aW50MjU2IHB1YmxpYyBudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0OwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgbnVtYmVyIG9mIHdhZ2VycyByZXF1aXJlZCB0byBtb3ZlIHRvIHRoZQogICAgLy8vIGZpbmFsIHRpbWVvdXQgLS0gc2V0dGluZyBmb3IgdGhlIG5leHQgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIG5leHROdW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0OwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZ2FtZS4KICAgIHVpbnQyNTYgcHVibGljIGdhbWVJbmRleCA9IDA7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBpbmRleCBvZiB0aGUgdGhlIGN1cnJlbnQgd2FnZXIgaW4gdGhlIGdhbWUuCiAgICB1aW50MjU2IHB1YmxpYyB3YWdlckluZGV4ID0gMDsKICAgIAogICAgLy8vIEBub3RpY2UgRXZlcnkgbnRoIHdhZ2VyIHJlY2VpdmVzIDJ4IHRoZWlyIHdhZ2VyLgogICAgdWludDI1NiBwdWJsaWMgbnRoV2FnZXJQcml6ZU4gPSAzOwogICAgCiAgICAvLy8gQG5vdGljZSBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIGEgbmV3IGdhbWUgY2FuIHN0YXJ0LAogICAgLy8vIGJhc2VkIG9uIHRoZSBhY3RpdmUgdGltZXMuCiAgICBmdW5jdGlvbiBjYW5TdGFydCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBHZXQgdGhlIHRpbWUgb2YgdGhlIHdlZWsgaW4gc2Vjb25kcy4KICAgICAgICAvLyBUaGVyZSBhcmUgNyAqIDI0ICogNjAgKiA2MCA9IDYwNDgwMCBzZWNvbmRzIGluIGEgd2VlaywKICAgICAgICAvLyBhbmQgdW5peCB0aW1lc3RhbXBzIHN0YXJ0ZWQgY291bnRpbmcgZnJvbSBhIFRodXJzZGF5LAogICAgICAgIC8vIHNvIHN1YnRyYWN0IDQgKiAyNCAqIDYwICogNjAgPSAzNDU2MDAgc2Vjb25kcywgYXMKICAgICAgICAvLyAoMCAtIDM0NTYwMCkgJSA2MDQ4MDAgPSAyNTkyMDAsIGkuZS4gdGhlIG51bWJlciBvZgogICAgICAgIC8vIHNlY29uZHMgaW4gYSB3ZWVrIHVudGlsIFRodXJzZGF5IDAwOjAwOjAwLgogICAgICAgIHVpbnQyNTYgdGltZU9mV2VlayA9IChibG9jay50aW1lc3RhbXAgLSAzNDU2MDApICUgNjA0ODAwOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgd2luZG93cyA9IGFjdGl2ZVRpbWVzRnJvbS5sZW5ndGg7CiAgICAgICAgCiAgICAgICAgaWYgKHdpbmRvd3MgPT0gMCkgewogICAgICAgICAgICAvLyBObyBzdGFydCB0aW1lcyBjb25maWd1cmVkLCBhbnkgdGltZSBpcyBhbGxvd2VkLgogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgd2luZG93czsgaSsrKSB7CiAgICAgICAgICAgIGlmICh0aW1lT2ZXZWVrID49IGFjdGl2ZVRpbWVzRnJvbVtpXSAmJiB0aW1lT2ZXZWVrIDw9IGFjdGl2ZVRpbWVzVG9baV0pIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgQ2FsY3VsYXRlIHRoZSBjdXJyZW50IGdhbWUncyB0aW1lb3V0LgogICAgZnVuY3Rpb24gY2FsY3VsYXRlVGltZW91dCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NikgewogICAgICAgIGlmICh3YWdlckluZGV4ID49IG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQgfHwgbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBmaW5hbFRpbWVvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGZpbmFsVGltZW91dCA8PSB0aW1lb3V0KSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgdGltZW91dCBkZWNyZWFzZXMgb3ZlciB0aW1lLgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IHVuZGVyZmxvdywgYXMgdGltZW91dCBpcyBndWFyYW50ZWVkIHRvIGJlCiAgICAgICAgICAgICAgICAvLyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gZmluYWxUaW1lb3V0LgogICAgICAgICAgICAgICAgdWludDI1NiBkaWZmZXJlbmNlID0gdGltZW91dCAtIGZpbmFsVGltZW91dDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkZWNyZWFzZSBpbiB0aW1lb3V0LCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHdhZ2VycyBwZXJmb3JtZWQuCiAgICAgICAgICAgICAgICB1aW50MjU2IGRlY3JlYXNlID0gZGlmZmVyZW5jZS5tdWwod2FnZXJJbmRleCkuZGl2KG51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBUaGlzIHN1YnRyYWN0aW9uIGNhbm5vdCB1bmRlcmZsb3csIGFzIGRlY3JlYXNlIGlzIGd1YXJhbnRlZWQgdG8gYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRpbWVvdXQuICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gKHRpbWVvdXQgLSBkZWNyZWFzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgdGltZW91dCBpbmNyZWFzZXMgb3ZlciB0aW1lLgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IHVuZGVyZmxvdywgYXMgdGltZW91dCBpcyBndWFyYW50ZWVkIHRvIGJlCiAgICAgICAgICAgICAgICAvLyBzbWFsbGVyIHRoYW4gZmluYWxUaW1lb3V0LgogICAgICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGZpbmFsVGltZW91dCAtIHRpbWVvdXQ7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgaW5jcmVhc2UgaW4gdGltZW91dCwgYmFzZWQgb24gdGhlIG51bWJlciBvZiB3YWdlcnMgcGVyZm9ybWVkLgogICAgICAgICAgICAgICAgdWludDI1NiBpbmNyZWFzZSA9IGRpZmZlcmVuY2UubXVsKHdhZ2VySW5kZXgpLmRpdihudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gVGhpcyBhZGRpdGlvbiBjYW5ub3Qgb3ZlcmZsb3csIGFzIHRpbWVvdXQgKyBpbmNyZWFzZSBpcyBndWFyYW50ZWVkIHRvIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBmaW5hbFRpbWVvdXQuCiAgICAgICAgICAgICAgICByZXR1cm4gKHRpbWVvdXQgKyBpbmNyZWFzZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgovKioKICogQHRpdGxlIFB1bGxQYXltZW50CiAqIEBkZXYgQmFzZSBjb250cmFjdCBzdXBwb3J0aW5nIGFzeW5jIHNlbmQgZm9yIHB1bGwgcGF5bWVudHMuIEluaGVyaXQgZnJvbSB0aGlzCiAqIGNvbnRyYWN0IGFuZCB1c2UgYXN5bmNTZW5kIGluc3RlYWQgb2Ygc2VuZC4KICovCmNvbnRyYWN0IFB1bGxQYXltZW50IHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBwYXltZW50czsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFBheW1lbnRzOwoKICAvKioKICAqIEBkZXYgd2l0aGRyYXcgYWNjdW11bGF0ZWQgYmFsYW5jZSwgY2FsbGVkIGJ5IHBheWVlLgogICovCiAgZnVuY3Rpb24gd2l0aGRyYXdQYXltZW50cygpIHB1YmxpYyB7CiAgICBhZGRyZXNzIHBheWVlID0gbXNnLnNlbmRlcjsKICAgIHVpbnQyNTYgcGF5bWVudCA9IHBheW1lbnRzW3BheWVlXTsKCiAgICByZXF1aXJlKHBheW1lbnQgIT0gMCk7CiAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBwYXltZW50KTsKCiAgICB0b3RhbFBheW1lbnRzID0gdG90YWxQYXltZW50cy5zdWIocGF5bWVudCk7CiAgICBwYXltZW50c1twYXllZV0gPSAwOwoKICAgIGFzc2VydChwYXllZS5zZW5kKHBheW1lbnQpKTsKICB9CgogIC8qKgogICogQGRldiBDYWxsZWQgYnkgdGhlIHBheWVyIHRvIHN0b3JlIHRoZSBzZW50IGFtb3VudCBhcyBjcmVkaXQgdG8gYmUgcHVsbGVkLgogICogQHBhcmFtIGRlc3QgVGhlIGRlc3RpbmF0aW9uIGFkZHJlc3Mgb2YgdGhlIGZ1bmRzLgogICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIHRyYW5zZmVyLgogICovCiAgZnVuY3Rpb24gYXN5bmNTZW5kKGFkZHJlc3MgZGVzdCwgdWludDI1NiBhbW91bnQpIGludGVybmFsIHsKICAgIHBheW1lbnRzW2Rlc3RdID0gcGF5bWVudHNbZGVzdF0uYWRkKGFtb3VudCk7CiAgICB0b3RhbFBheW1lbnRzID0gdG90YWxQYXltZW50cy5hZGQoYW1vdW50KTsKICB9Cn0KCgovLy8gQGRldiBEZWZpbmVzIGJhc2UgZmluYW5jZSBmdW5jdGlvbmFsaXR5IGZvciBDaHJvbm9zLgpjb250cmFjdCBDaHJvbm9zRmluYW5jZSBpcyBDaHJvbm9zQmFzZSwgUHVsbFBheW1lbnQgewogICAgLy8vIEBub3RpY2UgVGhlIGRldmVsb3BlciBmZWUgaW4gMS8xMDAwdGggb2YgYSBwZXJjZW50YWdlLgogICAgdWludDI1NiBwdWJsaWMgZmVlUGVyY2VudGFnZSA9IDI1MDA7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBwZXJjZW50YWdlIG9mIGEgd2FnZXIgdGhhdCBnb2VzIHRvIHRoZSBuZXh0IHByaXplIHBvb2wuCiAgICB1aW50MjU2IHB1YmxpYyBuZXh0UG9vbFBlcmNlbnRhZ2UgPSA3NTAwOwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgd2FnZXIgcHJpY2UuCiAgICB1aW50MjU2IHB1YmxpYyBwcmljZTsKICAgIAogICAgLy8vIEBub3RpY2UgVGhlIHdhZ2VyIHByaWNlIC0tIHNldHRpbmcgZm9yIHRoZSBuZXh0IGdhbWUuCiAgICB1aW50MjU2IHB1YmxpYyBuZXh0UHJpY2U7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBjdXJyZW50IHByaXplIHBvb2wgKGluIHdlaSkuCiAgICB1aW50MjU2IHB1YmxpYyBwcml6ZVBvb2w7CiAgICAKICAgIC8vLyBAbm90aWNlIFRoZSBuZXh0IHByaXplIHBvb2wgKGluIHdlaSkuCiAgICB1aW50MjU2IHB1YmxpYyBuZXh0UHJpemVQb29sOwogICAgCiAgICAvLy8gQG5vdGljZSBUaGUgY3VycmVudCBudGggd2FnZXIgcG9vbCAoaW4gd2VpKS4KICAgIHVpbnQyNTYgcHVibGljIHdhZ2VyUG9vbDsKICAgIAogICAgLy8vIEBub3RpY2UgU2V0cyBhIG5ldyBmZWUgcGVyY2VudGFnZS4KICAgIC8vLyBAcGFyYW0gX2ZlZVBlcmNlbnRhZ2UgVGhlIG5ldyBmZWUgcGVyY2VudGFnZS4KICAgIGZ1bmN0aW9uIHNldEZlZVBlcmNlbnRhZ2UodWludDI1NiBfZmVlUGVyY2VudGFnZSkgZXh0ZXJuYWwgb25seUNGTyB7CiAgICAgICAgLy8gRmVlIHBlcmNlbnRhZ2UgbXVzdCBiZSA0JSBhdCB0aGUgbW9zdC4KICAgICAgICByZXF1aXJlKF9mZWVQZXJjZW50YWdlIDw9IDQwMDApOwogICAgICAgIAogICAgICAgIGZlZVBlcmNlbnRhZ2UgPSBfZmVlUGVyY2VudGFnZTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgU2V0cyBhIG5ldyBuZXh0IHBvb2wgcGVyY2VudGFnZS4KICAgIC8vLyBAcGFyYW0gX25leHRQb29sUGVyY2VudGFnZSBUaGUgbmV3IG5leHQgcG9vbCBwZXJjZW50YWdlLgogICAgZnVuY3Rpb24gc2V0TmV4dFBvb2xQZXJjZW50YWdlKHVpbnQyNTYgX25leHRQb29sUGVyY2VudGFnZSkgZXh0ZXJuYWwgb25seUNGTyB7CiAgICAgICAgbmV4dFBvb2xQZXJjZW50YWdlID0gX25leHRQb29sUGVyY2VudGFnZTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgU2VuZCBmdW5kcyB0byBhIGJlbmVmaWNpYXJ5LiBJZiBzZW5kaW5nIGZhaWxzLCBhc3NpZ24KICAgIC8vLyBmdW5kcyB0byB0aGUgYmVuZWZpY2lhcnkncyBiYWxhbmNlIGZvciBtYW51YWwgd2l0aGRyYXdhbC4KICAgIC8vLyBAcGFyYW0gYmVuZWZpY2lhcnkgVGhlIGJlbmVmaWNpYXJ5J3MgYWRkcmVzcyB0byBzZW5kIGZ1bmRzIHRvCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIHNlbmQuCiAgICBmdW5jdGlvbiBfc2VuZEZ1bmRzKGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKCFiZW5lZmljaWFyeS5zZW5kKGFtb3VudCkpIHsKICAgICAgICAgICAgLy8gRmFpbGVkIHRvIHNlbmQgZnVuZHMuIFRoaXMgY2FuIGhhcHBlbiBkdWUgdG8gYSBmYWlsdXJlIGluCiAgICAgICAgICAgIC8vIGZhbGxiYWNrIGNvZGUgb2YgdGhlIGJlbmVmaWNpYXJ5LCBvciBiZWNhdXNlIG9mIGNhbGxzdGFjawogICAgICAgICAgICAvLyBkZXB0aC4KICAgICAgICAgICAgLy8gU2VuZCBmdW5kcyBhc3luY2hyb25vdXNseSBmb3IgbWFudWFsIHdpdGhkcmF3YWwgYnkgdGhlCiAgICAgICAgICAgIC8vIGJlbmVmaWNpYXJ5LgogICAgICAgICAgICBhc3luY1NlbmQoYmVuZWZpY2lhcnksIGFtb3VudCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBXaXRoZHJhdyAodW5vd2VkKSBjb250cmFjdCBiYWxhbmNlLgogICAgZnVuY3Rpb24gd2l0aGRyYXdGcmVlQmFsYW5jZSgpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZnJlZSAodW5vd2VkKSBiYWxhbmNlLgogICAgICAgIHVpbnQyNTYgZnJlZUJhbGFuY2UgPSB0aGlzLmJhbGFuY2Uuc3ViKHRvdGFsUGF5bWVudHMpLnN1Yihwcml6ZVBvb2wpLnN1Yih3YWdlclBvb2wpOwogICAgICAgIAogICAgICAgIGNmb0FkZHJlc3MudHJhbnNmZXIoZnJlZUJhbGFuY2UpOwogICAgfQp9CgoKLy8vIEBkZXYgRGVmaW5lcyBjb3JlIENocm9ub3MgZnVuY3Rpb25hbGl0eS4KY29udHJhY3QgQ2hyb25vc0NvcmUgaXMgQ2hyb25vc0ZpbmFuY2UgewogICAgCiAgICBmdW5jdGlvbiBDaHJvbm9zQ29yZSh1aW50MjU2IF9wcmljZSwgdWludDI1NiBfdGltZW91dCwgdWludDI1NiBfZmluYWxUaW1lb3V0LCB1aW50MjU2IF9udW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0KSBwdWJsaWMgewogICAgICAgIG5leHRQcmljZSA9IF9wcmljZTsKICAgICAgICBuZXh0VGltZW91dCA9IF90aW1lb3V0OwogICAgICAgIG5leHRGaW5hbFRpbWVvdXQgPSBfZmluYWxUaW1lb3V0OwogICAgICAgIG5leHROdW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0ID0gX251bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQ7CiAgICAgICAgTmV4dEdhbWUobmV4dFByaWNlLCBuZXh0VGltZW91dCwgbmV4dEZpbmFsVGltZW91dCwgbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQpOwogICAgfQogICAgCiAgICBldmVudCBBY3RpdmVUaW1lcyh1aW50MjU2W10gZnJvbSwgdWludDI1NltdIHRvKTsKICAgIGV2ZW50IEFsbG93U3RhcnQoYm9vbCBhbGxvd1N0YXJ0KTsKICAgIGV2ZW50IE5leHRHYW1lKHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgdGltZW91dCwgdWludDI1NiBmaW5hbFRpbWVvdXQsIHVpbnQyNTYgbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCk7CiAgICBldmVudCBTdGFydCh1aW50MjU2IGluZGV4ZWQgZ2FtZUluZGV4LCBhZGRyZXNzIGluZGV4ZWQgc3RhcnRlciwgdWludDI1NiB0aW1lc3RhbXAsIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgdGltZW91dCwgdWludDI1NiBmaW5hbFRpbWVvdXQsIHVpbnQyNTYgbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCk7CiAgICBldmVudCBFbmQodWludDI1NiBpbmRleGVkIGdhbWVJbmRleCwgdWludDI1NiB3YWdlckluZGV4LCBhZGRyZXNzIGluZGV4ZWQgd2lubmVyLCB1aW50MjU2IHRpbWVzdGFtcCwgdWludDI1NiBwcml6ZSwgdWludDI1NiBuZXh0UHJpemVQb29sKTsKICAgIGV2ZW50IFBsYXkodWludDI1NiBpbmRleGVkIGdhbWVJbmRleCwgdWludDI1NiBpbmRleGVkIHdhZ2VySW5kZXgsIGFkZHJlc3MgaW5kZXhlZCBwbGF5ZXIsIHVpbnQyNTYgdGltZXN0YW1wLCB1aW50MjU2IHRpbWVvdXRUaW1lc3RhbXAsIHVpbnQyNTYgbmV3UHJpemVQb29sLCB1aW50MjU2IG5leHRQcml6ZVBvb2wpOwogICAgZXZlbnQgU3BpY2VVcFByaXplUG9vbCh1aW50MjU2IGluZGV4ZWQgZ2FtZUluZGV4LCBhZGRyZXNzIGluZGV4ZWQgc3BpY2VyLCB1aW50MjU2IHNwaWNlQWRkZWQsIHN0cmluZyBtZXNzYWdlLCB1aW50MjU2IG5ld1ByaXplUG9vbCk7CiAgICAKICAgIC8vLyBAbm90aWNlIFBhcnRpY2lwYXRlIGluIHRoZSBnYW1lLgogICAgLy8vIEBwYXJhbSBfZ2FtZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgZ2FtZSB0byBwbGF5IG9uLgogICAgLy8vIEBwYXJhbSBzdGFydE5ld0dhbWVJZklkbGUgU3RhcnQgYSBuZXcgZ2FtZSBpZiB0aGUgY3VycmVudCBnYW1lIGlzIGlkbGUuCiAgICBmdW5jdGlvbiBwbGF5KHVpbnQyNTYgX2dhbWVJbmRleCwgYm9vbCBzdGFydE5ld0dhbWVJZklkbGUpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgZ2FtZSBzaG91bGQgZW5kLiBQcm9jZXNzIHBheW1lbnQuCiAgICAgICAgX3Byb2Nlc3NHYW1lRW5kKCk7CiAgICAgICAgCiAgICAgICAgaWYgKCFnYW1lU3RhcnRlZCkgewogICAgICAgICAgICAvLyBJZiB0aGUgZ2FtZSBpcyBub3Qgc3RhcnRlZCwgdGhlIGNvbnRyYWN0IG11c3Qgbm90IGJlIHBhdXNlZC4KICAgICAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChhbGxvd1N0YXJ0KSB7CiAgICAgICAgICAgICAgICAvLyBXZSdyZSBhbGxvd2VkIHRvIHN0YXJ0IG9uY2Ugb3V0c2lkZSBvZiBhY3RpdmUgdGltZXMuCiAgICAgICAgICAgICAgICBhbGxvd1N0YXJ0ID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBUaGlzIG11c3QgYmUgYW4gYWN0aXZlIHRpbWUuCiAgICAgICAgICAgICAgICByZXF1aXJlKGNhblN0YXJ0KCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBJZiB0aGUgZ2FtZSBpcyBub3Qgc3RhcnRlZCwgdGhlIHBsYXllciBtdXN0IGJlIHdpbGxpbmcgdG8gc3RhcnQKICAgICAgICAgICAgLy8gYSBuZXcgZ2FtZS4KICAgICAgICAgICAgcmVxdWlyZShzdGFydE5ld0dhbWVJZklkbGUpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gU2V0IHRoZSBwcmljZSBhbmQgdGltZW91dC4KICAgICAgICAgICAgcHJpY2UgPSBuZXh0UHJpY2U7CiAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGltZW91dDsKICAgICAgICAgICAgZmluYWxUaW1lb3V0ID0gbmV4dEZpbmFsVGltZW91dDsKICAgICAgICAgICAgbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCA9IG5leHROdW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0OwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gU3RhcnQgdGhlIGdhbWUuCiAgICAgICAgICAgIGdhbWVTdGFydGVkID0gdHJ1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEVtaXQgc3RhcnQgZXZlbnQuCiAgICAgICAgICAgIFN0YXJ0KGdhbWVJbmRleCwgbXNnLnNlbmRlciwgYmxvY2sudGltZXN0YW1wLCBwcmljZSwgdGltZW91dCwgZmluYWxUaW1lb3V0LCBudW1iZXJPZldhZ2Vyc1RvRmluYWxUaW1lb3V0KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gQ2hlY2sgdGhlIGdhbWUgaW5kZXguCiAgICAgICAgaWYgKHN0YXJ0TmV3R2FtZUlmSWRsZSkgewogICAgICAgICAgICAvLyBUaGUgZ2l2ZW4gZ2FtZSBpbmRleCBtdXN0IGJlIHRoZSBjdXJyZW50IGdhbWUgaW5kZXgsIG9yIHRoZSBwcmV2aW91cwogICAgICAgICAgICAvLyBnYW1lIGluZGV4LgogICAgICAgICAgICByZXF1aXJlKF9nYW1lSW5kZXggPT0gZ2FtZUluZGV4IHx8IF9nYW1lSW5kZXguYWRkKDEpID09IGdhbWVJbmRleCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gT25seSBwbGF5IG9uIHRoZSBnYW1lIGluZGljYXRlZCBieSB0aGUgcGxheWVyLgogICAgICAgICAgICByZXF1aXJlKF9nYW1lSW5kZXggPT0gZ2FtZUluZGV4KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gRW5vdWdoIEV0aGVyIG11c3QgYmUgc3VwcGxpZWQuCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gcHJpY2UpOwogICAgICAgIAogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZmVlcyBhbmQgbmV4dCBwb29sIHBlcmNlbnRhZ2UuCiAgICAgICAgdWludDI1NiBmZWUgPSBwcmljZS5tdWwoZmVlUGVyY2VudGFnZSkuZGl2KDEwMDAwMCk7CiAgICAgICAgdWludDI1NiBuZXh0UG9vbCA9IHByaWNlLm11bChuZXh0UG9vbFBlcmNlbnRhZ2UpLmRpdigxMDAwMDApOwogICAgICAgIHVpbnQyNTYgd2FnZXJQb29sUGFydDsKICAgICAgICAKICAgICAgICBpZiAod2FnZXJJbmRleCAlIG50aFdhZ2VyUHJpemVOID09IG50aFdhZ2VyUHJpemVOIC0gMSkgewogICAgICAgICAgICAvLyBHaXZlIHRoZSB3YWdlciBwcml6ZSBldmVyeSBudGggd2FnZXIuCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgbnRoIHdhZ2VyIHByaXplLgogICAgICAgICAgICB1aW50MjU2IHdhZ2VyUHJpemUgPSBwcmljZS5tdWwoMik7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG1pc3Npbmcgd2FnZXIgcG9vbCBwYXJ0IChlcXVhbCB0byBwcmljZS5tdWwoMikuZGl2KG50aFdhZ2VyUHJpemVOKSBwbHVzIGEgZmV3IHdlaSkuCiAgICAgICAgICAgIHdhZ2VyUG9vbFBhcnQgPSB3YWdlclByaXplLnN1Yih3YWdlclBvb2wpOwogICAgICAgIAogICAgICAgICAgICAvLyBHaXZlIHRoZSB3YWdlciBwcml6ZSB0byB0aGUgc2VuZGVyLgogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHdhZ2VyUHJpemUpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHdhZ2VyIHBvb2wuCiAgICAgICAgICAgIHdhZ2VyUG9vbCA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gT24gZXZlcnkgbm9uLW50aCB3YWdlciwgaW5jcmVhc2UgdGhlIHdhZ2VyIHBvb2wuCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHdhZ2VyIHBvb2wgcGFydC4KICAgICAgICAgICAgd2FnZXJQb29sUGFydCA9IHByaWNlLm11bCgyKS5kaXYobnRoV2FnZXJQcml6ZU4pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQWRkIGZ1bmRzIHRvIHRoZSB3YWdlciBwb29sLgogICAgICAgICAgICB3YWdlclBvb2wgPSB3YWdlclBvb2wuYWRkKHdhZ2VyUG9vbFBhcnQpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHRpbWVvdXQuCiAgICAgICAgdWludDI1NiBjdXJyZW50VGltZW91dCA9IGNhbGN1bGF0ZVRpbWVvdXQoKTsKICAgICAgICAKICAgICAgICAvLyBTZXQgdGhlIGxhc3QgcGxheWVyLCB0aW1lc3RhbXAsIHRpbWVvdXQgdGltZXN0YW1wLCBhbmQgaW5jcmVhc2UgcHJpemUuCiAgICAgICAgbGFzdFBsYXllciA9IG1zZy5zZW5kZXI7CiAgICAgICAgbGFzdFdhZ2VyVGltZW91dFRpbWVzdGFtcCA9IGJsb2NrLnRpbWVzdGFtcCArIGN1cnJlbnRUaW1lb3V0OwogICAgICAgIHByaXplUG9vbCA9IHByaXplUG9vbC5hZGQocHJpY2Uuc3ViKGZlZSkuc3ViKG5leHRQb29sKS5zdWIod2FnZXJQb29sUGFydCkpOwogICAgICAgIG5leHRQcml6ZVBvb2wgPSBuZXh0UHJpemVQb29sLmFkZChuZXh0UG9vbCk7CiAgICAgICAgCiAgICAgICAgLy8gRW1pdCBldmVudC4KICAgICAgICBQbGF5KGdhbWVJbmRleCwgd2FnZXJJbmRleCwgbXNnLnNlbmRlciwgYmxvY2sudGltZXN0YW1wLCBsYXN0V2FnZXJUaW1lb3V0VGltZXN0YW1wLCBwcml6ZVBvb2wsIG5leHRQcml6ZVBvb2wpOwogICAgICAgIAogICAgICAgIC8vIEluY3JlbWVudCB0aGUgd2FnZXIgaW5kZXguIFRoaXMgd29uJ3Qgb3ZlcmZsb3cgYmVmb3JlIHRoZSBoZWF0IGRlYXRoIG9mIHRoZSB1bml2ZXJzZS4KICAgICAgICB3YWdlckluZGV4Kys7CiAgICAgICAgCiAgICAgICAgLy8gUmVmdW5kIGFueSBleGNlc3MgRXRoZXIgc2VudC4KICAgICAgICAvLyBUaGlzIHN1YnRyYWN0aW9uIG5ldmVyIHVuZGVyZmxvd3MsIGFzIG1zZy52YWx1ZSBpcyBndWFyYW50ZWVkCiAgICAgICAgLy8gdG8gYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHByaWNlLgogICAgICAgIHVpbnQyNTYgZXhjZXNzID0gbXNnLnZhbHVlIC0gcHJpY2U7CiAgICAgICAgCiAgICAgICAgaWYgKGV4Y2VzcyA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihleGNlc3MpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgU3BpY2UgdXAgdGhlIHByaXplIHBvb2wuCiAgICAvLy8gQHBhcmFtIF9nYW1lSW5kZXggVGhlIGluZGV4IG9mIHRoZSBnYW1lIHRvIGFkZCBzcGljZSB0by4KICAgIC8vLyBAcGFyYW0gbWVzc2FnZSBBbiBvcHRpb25hbCBtZXNzYWdlIHRvIGJlIHNlbnQgYWxvbmcgd2l0aCB0aGUgc3BpY2UuCiAgICBmdW5jdGlvbiBzcGljZVVwKHVpbnQyNTYgX2dhbWVJbmRleCwgc3RyaW5nIG1lc3NhZ2UpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgZ2FtZSBzaG91bGQgZW5kLiBQcm9jZXNzIHBheW1lbnQuCiAgICAgICAgX3Byb2Nlc3NHYW1lRW5kKCk7CiAgICAgICAgCiAgICAgICAgLy8gQ2hlY2sgdGhlIGdhbWUgaW5kZXguCiAgICAgICAgcmVxdWlyZShfZ2FtZUluZGV4ID09IGdhbWVJbmRleCk7CiAgICAKICAgICAgICAvLyBHYW1lIG11c3QgYmUgbGl2ZSBvciB1bnBhdXNlZC4KICAgICAgICByZXF1aXJlKGdhbWVTdGFydGVkIHx8ICFwYXVzZWQpOwogICAgICAgIAogICAgICAgIC8vIEZ1bmRzIG11c3QgYmUgc2VudC4KICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIAogICAgICAgIC8vIEFkZCBmdW5kcyB0byB0aGUgcHJpemUgcG9vbC4KICAgICAgICBwcml6ZVBvb2wgPSBwcml6ZVBvb2wuYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgCiAgICAgICAgLy8gRW1pdCBldmVudC4KICAgICAgICBTcGljZVVwUHJpemVQb29sKGdhbWVJbmRleCwgbXNnLnNlbmRlciwgbXNnLnZhbHVlLCBtZXNzYWdlLCBwcml6ZVBvb2wpOwogICAgfQogICAgCiAgICAvLy8gQG5vdGljZSBTZXQgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBuZXh0IGdhbWUuCiAgICAvLy8gQHBhcmFtIF9wcmljZSBUaGUgcHJpY2Ugb2Ygd2FnZXJzIGZvciB0aGUgbmV4dCBnYW1lLgogICAgLy8vIEBwYXJhbSBfdGltZW91dCBUaGUgdGltZW91dCBpbiBzZWNvbmRzIGZvciB0aGUgbmV4dCBnYW1lLgogICAgLy8vIEBwYXJhbSBfZmluYWxUaW1lb3V0IFRoZSBmaW5hbCB0aW1lb3V0IGluIHNlY29uZHMgZm9yCiAgICAvLy8gdGhlIG5leHQgZ2FtZS4KICAgIC8vLyBAcGFyYW0gX251bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQgVGhlIG51bWJlciBvZiB3YWdlcnMKICAgIC8vLyByZXF1aXJlZCB0byBtb3ZlIHRvIHRoZSBmaW5hbCB0aW1lb3V0IGZvciB0aGUgbmV4dCBnYW1lLgogICAgZnVuY3Rpb24gc2V0TmV4dEdhbWUodWludDI1NiBfcHJpY2UsIHVpbnQyNTYgX3RpbWVvdXQsIHVpbnQyNTYgX2ZpbmFsVGltZW91dCwgdWludDI1NiBfbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCkgZXh0ZXJuYWwgb25seUNGTyB7CiAgICAgICAgbmV4dFByaWNlID0gX3ByaWNlOwogICAgICAgIG5leHRUaW1lb3V0ID0gX3RpbWVvdXQ7CiAgICAgICAgbmV4dEZpbmFsVGltZW91dCA9IF9maW5hbFRpbWVvdXQ7CiAgICAgICAgbmV4dE51bWJlck9mV2FnZXJzVG9GaW5hbFRpbWVvdXQgPSBfbnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dDsKICAgICAgICBOZXh0R2FtZShuZXh0UHJpY2UsIG5leHRUaW1lb3V0LCBuZXh0RmluYWxUaW1lb3V0LCBuZXh0TnVtYmVyT2ZXYWdlcnNUb0ZpbmFsVGltZW91dCk7CiAgICB9IAogICAgCiAgICAvLy8gQG5vdGljZSBFbmQgdGhlIGdhbWUuIFBheSBwcml6ZS4KICAgIGZ1bmN0aW9uIGVuZEdhbWUoKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShfcHJvY2Vzc0dhbWVFbmQoKSk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEVuZCB0aGUgZ2FtZS4gUGF5IHByaXplLgogICAgZnVuY3Rpb24gX3Byb2Nlc3NHYW1lRW5kKCkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgaWYgKCFnYW1lU3RhcnRlZCkgewogICAgICAgICAgICAvLyBObyBnYW1lIGlzIHN0YXJ0ZWQuCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAKICAgICAgICBpZiAoYmxvY2sudGltZXN0YW1wIDw9IGxhc3RXYWdlclRpbWVvdXRUaW1lc3RhbXApIHsKICAgICAgICAgICAgLy8gVGhlIGdhbWUgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwcml6ZS4gQW55IGxlZnRvdmVyIGZ1bmRzIGZvciB0aGUKICAgICAgICAvLyBudGggd2FnZXIgcHJpemUgaXMgYWRkZWQgdG8gdGhlIHByaXplIHBvb2wuCiAgICAgICAgdWludDI1NiBwcml6ZSA9IHByaXplUG9vbC5hZGQod2FnZXJQb29sKTsKICAgICAgICAKICAgICAgICAvLyBUaGUgZ2FtZSBoYXMgZmluaXNoZWQuIFBheSB0aGUgcHJpemUgdG8gdGhlIGxhc3QgcGxheWVyLgogICAgICAgIF9zZW5kRnVuZHMobGFzdFBsYXllciwgcHJpemUpOwogICAgICAgIAogICAgICAgIC8vIEVtaXQgZXZlbnQuCiAgICAgICAgRW5kKGdhbWVJbmRleCwgd2FnZXJJbmRleCwgbGFzdFBsYXllciwgbGFzdFdhZ2VyVGltZW91dFRpbWVzdGFtcCwgcHJpemUsIG5leHRQcml6ZVBvb2wpOwogICAgICAgIAogICAgICAgIC8vIFJlc2V0IHRoZSBnYW1lLgogICAgICAgIGdhbWVTdGFydGVkID0gZmFsc2U7CiAgICAgICAgbGFzdFBsYXllciA9IDB4MDsKICAgICAgICBsYXN0V2FnZXJUaW1lb3V0VGltZXN0YW1wID0gMDsKICAgICAgICB3YWdlckluZGV4ID0gMDsKICAgICAgICB3YWdlclBvb2wgPSAwOwogICAgICAgIAogICAgICAgIC8vIFRoZSBuZXh0IHBvb2wgaXMgYW55IGxlZnRvdmVyIGJhbGFuY2UgbWludXMgb3V0c3RhbmRpbmcgYmFsYW5jZXMuCiAgICAgICAgcHJpemVQb29sID0gbmV4dFByaXplUG9vbDsKICAgICAgICBuZXh0UHJpemVQb29sID0gMDsKICAgICAgICAKICAgICAgICAvLyBJbmNyZW1lbnQgdGhlIGdhbWUgaW5kZXguIFRoaXMgd29uJ3Qgb3ZlcmZsb3cgYmVmb3JlIHRoZSBoZWF0IGRlYXRoIG9mIHRoZSB1bml2ZXJzZS4KICAgICAgICBnYW1lSW5kZXgrKzsKICAgICAgICAKICAgICAgICAvLyBJbmRpY2F0ZSBlbmRpbmcgdGhlIGdhbWUgd2FzIHN1Y2Nlc3NmdWwuCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8vLyBAbm90aWNlIFNldCB0aGUgYWN0aXZlIHRpbWVzLgogICAgZnVuY3Rpb24gc2V0QWN0aXZlVGltZXModWludDI1NltdIF9mcm9tLCB1aW50MjU2W10gX3RvKSBleHRlcm5hbCBvbmx5Q0ZPIHsKICAgICAgICByZXF1aXJlKF9mcm9tLmxlbmd0aCA9PSBfdG8ubGVuZ3RoKTsKICAgIAogICAgICAgIGFjdGl2ZVRpbWVzRnJvbSA9IF9mcm9tOwogICAgICAgIGFjdGl2ZVRpbWVzVG8gPSBfdG87CiAgICAgICAgCiAgICAgICAgLy8gRW1pdCBldmVudC4KICAgICAgICBBY3RpdmVUaW1lcyhfZnJvbSwgX3RvKTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgQWxsb3cgdGhlIGdhbWUgdG8gc3RhcnQgb25jZSBvdXRzaWRlIG9mIGFjdGl2ZSB0aW1lcy4KICAgIGZ1bmN0aW9uIHNldEFsbG93U3RhcnQoYm9vbCBfYWxsb3dTdGFydCkgZXh0ZXJuYWwgb25seUNGTyB7CiAgICAgICAgYWxsb3dTdGFydCA9IF9hbGxvd1N0YXJ0OwogICAgICAgIAogICAgICAgIC8vIEVtaXQgZXZlbnQuCiAgICAgICAgQWxsb3dTdGFydChfYWxsb3dTdGFydCk7CiAgICB9Cn0='.
	

]
