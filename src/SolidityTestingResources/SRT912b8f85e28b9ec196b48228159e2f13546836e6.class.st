Class {
	#name : #SRT912b8f85e28b9ec196b48228159e2f13546836e6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT912b8f85e28b9ec196b48228159e2f13546836e6 >> base64 [
	^ ''.
	

]
