Class {
	#name : #SRT3329f8d4e675a457697e9c00a41f027eaeb0ddcc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3329f8d4e675a457697e9c00a41f027eaeb0ddcc >> base64 [
	^ ''.
	

]
