Class {
	#name : #SRTd3bb6ffb59d082f701bcdb5dc43a1753fc6b43da,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3bb6ffb59d082f701bcdb5dc43a1753fc6b43da >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8vaW1wb3J0ICJnaXRodWIuY29tL29yYWNsaXplL2V0aGVyZXVtLWFwaS9vcmFjbGl6ZUFQSS5zb2wiOwovLyA8T1JBQ0xJWkVfQVBJPgovKgpDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiBPcmFjbGl6ZSBTUkwKQ29weXJpZ2h0IChjKSAyMDE2IE9yYWNsaXplIExURAoKCgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5Cm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbApjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKCgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgoKClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCiovCgpwcmFnbWEgc29saWRpdHkgXjAuNC4wOy8vcGxlYXNlIGltcG9ydCBvcmFjbGl6ZUFQSV9wcmUwLjQuc29sIHdoZW4gc29saWRpdHkgPCAwLjQuMAoKY29udHJhY3QgT3JhY2xpemVJIHsKICAgIGFkZHJlc3MgcHVibGljIGNiQWRkcmVzczsKICAgIGZ1bmN0aW9uIHF1ZXJ5KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZykgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTIodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Ml93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeU4odWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsKICAgIGZ1bmN0aW9uIHF1ZXJ5Tl93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBnZXRQcmljZShzdHJpbmcgX2RhdGFzb3VyY2UpIHJldHVybnMgKHVpbnQgX2RzcHJpY2UpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIHVzZUNvdXBvbihzdHJpbmcgX2NvdXBvbik7CiAgICBmdW5jdGlvbiBzZXRQcm9vZlR5cGUoYnl0ZSBfcHJvb2ZUeXBlKTsKICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpOwogICAgZnVuY3Rpb24gc2V0Q3VzdG9tR2FzUHJpY2UodWludCBfZ2FzUHJpY2UpOwogICAgZnVuY3Rpb24gcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKSByZXR1cm5zKGJ5dGVzMzIpOwp9CmNvbnRyYWN0IE9yYWNsaXplQWRkclJlc29sdmVySSB7CiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKCkgcmV0dXJucyAoYWRkcmVzcyBfYWRkcik7Cn0KY29udHJhY3QgdXNpbmdPcmFjbGl6ZSB7CiAgICB1aW50IGNvbnN0YW50IGRheSA9IDYwKjYwKjI0OwogICAgdWludCBjb25zdGFudCB3ZWVrID0gNjAqNjAqMjQqNzsKICAgIHVpbnQgY29uc3RhbnQgbW9udGggPSA2MCo2MCoyNCozMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05PTkUgPSAweDAwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfVExTTm90YXJ5ID0gMHgxMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX0FuZHJvaWQgPSAweDIwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTGVkZ2VyID0gMHgzMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05hdGl2ZSA9IDB4RjA7CiAgICBieXRlIGNvbnN0YW50IHByb29mU3RvcmFnZV9JUEZTID0gMHgwMTsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9hdXRvID0gMDsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tYWlubmV0ID0gMTsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF90ZXN0bmV0ID0gMjsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tb3JkZW4gPSAyOwogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2NvbnNlbnN5cyA9IDE2MTsKCiAgICBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgT0FSOwoKICAgIE9yYWNsaXplSSBvcmFjbGl6ZTsKICAgIG1vZGlmaWVyIG9yYWNsaXplQVBJIHsKICAgICAgICBpZigoYWRkcmVzcyhPQVIpPT0wKXx8KGdldENvZGVTaXplKGFkZHJlc3MoT0FSKSk9PTApKQogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrKG5ldHdvcmtJRF9hdXRvKTsKCiAgICAgICAgaWYoYWRkcmVzcyhvcmFjbGl6ZSkgIT0gT0FSLmdldEFkZHJlc3MoKSkKICAgICAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7CgogICAgICAgIF87CiAgICB9CiAgICBtb2RpZmllciBjb3Vwb24oc3RyaW5nIGNvZGUpewogICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOwogICAgICAgIG9yYWNsaXplLnVzZUNvdXBvbihjb2RlKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsodWludDggbmV0d29ya0lEKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpewogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApeyAvL21haW5uZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfbWFpbm5ldCIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk+MCl7IC8vcm9wc3RlbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX3JvcHN0ZW4zIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhCN0EwN0JjRjJCYTJmMjcwM2IyNEMwNjkxYjUyNzg5OTlDNTlBQzdlKT4wKXsgLy9rb3ZhbiB0ZXN0bmV0CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpOwogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX2tvdmFuIik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKXsgLy9yaW5rZWJ5IHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MTQ2NTAwY2ZkMzVCMjJFNEEzOTJGZTBhRGMwNkRlMWExMzY4RWQ0OCk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfcmlua2VieSIpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk+MCl7IC8vZXRoZXJldW0tYnJpZGdlCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik+MCl7IC8vZXRoZXIuY2FtcCBpZGUKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg1MWVmYUY0YzhCM0M5QWZCRDVhQjlGNGJiQzgyNzg0QWI2ZWY4ZkFBKT4wKXsgLy9icm93c2VyLXNvbGlkaXR5CiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0KSB7CiAgICAgICAgX19jYWxsYmFjayhteWlkLCByZXN1bHQsIG5ldyBieXRlcygwKSk7CiAgICB9CiAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgbXlpZCwgc3RyaW5nIHJlc3VsdCwgYnl0ZXMgcHJvb2YpIHsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV91c2VDb3Vwb24oc3RyaW5nIGNvZGUpIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZS51c2VDb3Vwb24oY29kZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0UHJpY2Uoc3RyaW5nIGRhdGFzb3VyY2UpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKHVpbnQpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShzdHJpbmcgZGF0YXNvdXJjZSwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAodWludCl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTIudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9jYkFkZHJlc3MoKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKXsKICAgICAgICByZXR1cm4gb3JhY2xpemUuY2JBZGRyZXNzKCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRQcm9vZihieXRlIHByb29mUCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldEN1c3RvbUdhc1ByaWNlKHVpbnQgZ2FzUHJpY2UpIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0Q3VzdG9tR2FzUHJpY2UoZ2FzUHJpY2UpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q29uZmlnKGJ5dGVzMzIgY29uZmlnKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldENvbmZpZyhjb25maWcpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnJhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q29kZVNpemUoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyh1aW50IF9zaXplKSB7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBfc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYWRkcikKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VBZGRyKHN0cmluZyBfYSkgaW50ZXJuYWwgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHRtcCA9IGJ5dGVzKF9hKTsKICAgICAgICB1aW50MTYwIGlhZGRyID0gMDsKICAgICAgICB1aW50MTYwIGIxOwogICAgICAgIHVpbnQxNjAgYjI7CiAgICAgICAgZm9yICh1aW50IGk9MjsgaTwyKzIqMjA7IGkrPTIpewogICAgICAgICAgICBpYWRkciAqPSAyNTY7CiAgICAgICAgICAgIGIxID0gdWludDE2MCh0bXBbaV0pOwogICAgICAgICAgICBiMiA9IHVpbnQxNjAodG1wW2krMV0pOwogICAgICAgICAgICBpZiAoKGIxID49IDk3KSYmKGIxIDw9IDEwMikpIGIxIC09IDg3OwogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNjUpJiYoYjEgPD0gNzApKSBiMSAtPSA1NTsKICAgICAgICAgICAgZWxzZSBpZiAoKGIxID49IDQ4KSYmKGIxIDw9IDU3KSkgYjEgLT0gNDg7CiAgICAgICAgICAgIGlmICgoYjIgPj0gOTcpJiYoYjIgPD0gMTAyKSkgYjIgLT0gODc7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA2NSkmJihiMiA8PSA3MCkpIGIyIC09IDU1OwogICAgICAgICAgICBlbHNlIGlmICgoYjIgPj0gNDgpJiYoYjIgPD0gNTcpKSBiMiAtPSA0ODsKICAgICAgICAgICAgaWFkZHIgKz0gKGIxKjE2K2IyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoaWFkZHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbXBhcmUoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKGludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBhID0gYnl0ZXMoX2EpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gYS5sZW5ndGg7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgbWluTGVuZ3RoKSBtaW5MZW5ndGggPSBiLmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspCiAgICAgICAgICAgIGlmIChhW2ldIDwgYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pCiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UgaWYgKGEubGVuZ3RoID4gYi5sZW5ndGgpCiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gaW5kZXhPZihzdHJpbmcgX2hheXN0YWNrLCBzdHJpbmcgX25lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoaW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGggPSBieXRlcyhfaGF5c3RhY2spOwogICAgICAgIGJ5dGVzIG1lbW9yeSBuID0gYnl0ZXMoX25lZWRsZSk7CiAgICAgICAgaWYoaC5sZW5ndGggPCAxIHx8IG4ubGVuZ3RoIDwgMSB8fCAobi5sZW5ndGggPiBoLmxlbmd0aCkpCiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpCiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB1aW50IHN1YmluZGV4ID0gMDsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkgKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChoW2ldID09IG5bMF0pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXggPSAxOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKHN1YmluZGV4IDwgbi5sZW5ndGggJiYgKGkgKyBzdWJpbmRleCkgPCBoLmxlbmd0aCAmJiBoW2kgKyBzdWJpbmRleF0gPT0gbltzdWJpbmRleF0pCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihzdWJpbmRleCA9PSBuLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QsIHN0cmluZyBfZSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYSA9IGJ5dGVzKF9hKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmMgPSBieXRlcyhfYyk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iZCA9IGJ5dGVzKF9kKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOwogICAgICAgIHN0cmluZyBtZW1vcnkgYWJjZGUgPSBuZXcgc3RyaW5nKF9iYS5sZW5ndGggKyBfYmIubGVuZ3RoICsgX2JjLmxlbmd0aCArIF9iZC5sZW5ndGggKyBfYmUubGVuZ3RoKTsKICAgICAgICBieXRlcyBtZW1vcnkgYmFiY2RlID0gYnl0ZXMoYWJjZGUpOwogICAgICAgIHVpbnQgayA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX2JhLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYVtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JiLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iYltpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JkLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZFtpXTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JlLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iZVtpXTsKICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCBfZCwgIiIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsICIiLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7CiAgICB9CgogICAgLy8gcGFyc2VJbnQKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSkgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBwYXJzZUludChfYSwgMCk7CiAgICB9CgogICAgLy8gcGFyc2VJbnQocGFyc2VGbG9hdCoxMF5fYikKICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSwgdWludCBfYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGJ5dGVzIG1lbW9yeSBicmVzdWx0ID0gYnl0ZXMoX2EpOwogICAgICAgIHVpbnQgbWludCA9IDA7CiAgICAgICAgYm9vbCBkZWNpbWFscyA9IGZhbHNlOwogICAgICAgIGZvciAodWludCBpPTA7IGk8YnJlc3VsdC5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIGlmICgoYnJlc3VsdFtpXSA+PSA0OCkmJihicmVzdWx0W2ldIDw9IDU3KSl7CiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHMpewogICAgICAgICAgICAgICAgICAgaWYgKF9iID09IDApIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGVsc2UgX2ItLTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1pbnQgKj0gMTA7CiAgICAgICAgICAgICAgICBtaW50ICs9IHVpbnQoYnJlc3VsdFtpXSkgLSA0ODsKICAgICAgICAgICAgfSBlbHNlIGlmIChicmVzdWx0W2ldID09IDQ2KSBkZWNpbWFscyA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChfYiA+IDApIG1pbnQgKj0gMTAqKl9iOwogICAgICAgIHJldHVybiBtaW50OwogICAgfQoKICAgIGZ1bmN0aW9uIHVpbnQyc3RyKHVpbnQgaSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKXsKICAgICAgICBpZiAoaSA9PSAwKSByZXR1cm4gIjAiOwogICAgICAgIHVpbnQgaiA9IGk7CiAgICAgICAgdWludCBsZW47CiAgICAgICAgd2hpbGUgKGogIT0gMCl7CiAgICAgICAgICAgIGxlbisrOwogICAgICAgICAgICBqIC89IDEwOwogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYnN0ciA9IG5ldyBieXRlcyhsZW4pOwogICAgICAgIHVpbnQgayA9IGxlbiAtIDE7CiAgICAgICAgd2hpbGUgKGkgIT0gMCl7CiAgICAgICAgICAgIGJzdHJbay0tXSA9IGJ5dGUoNDggKyBpICUgMTApOwogICAgICAgICAgICBpIC89IDEwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyaW5nKGJzdHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsKCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgICAgIGJ5dGVzW10gbWVtb3J5IGVsZW1BcnJheSA9IG5ldyBieXRlc1tdKGFycmxlbik7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRsZW4gKz0gZWxlbUFycmF5W2ldLmxlbmd0aCArIChlbGVtQXJyYXlbaV0ubGVuZ3RoIC0gMSkvMjMgKyAzOyAvLyszIGFjY291bnRzIGZvciBwYWlyZWQgaWRlbnRpZmllciB0eXBlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICAgICAgdWludCBjYm9ybGVuID0gYXJybGVuICsgMHg4MDsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOwogICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoCiAgICAgICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7CiAgICAgICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGNib3JsZW4pW2N0cl07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgZm9yICh1aW50IHggPSAwOyB4IDwgZWxlbUFycmF5W2ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGVsZW1jYm9ybGVuID0gZWxlbUFycmF5W2ldLmxlbmd0aCAtIHggPj0gMjQgPyAyMyA6IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4OwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChieXRlKGVsZW1jYm9ybGVuKS5sZW5ndGggPiBjdHIgLSBsY3RyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KCgogICAgc3RyaW5nIG9yYWNsaXplX25ldHdvcmtfbmFtZTsKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHN0cmluZyBfbmV0d29ya19uYW1lKSBpbnRlcm5hbCB7CiAgICAgICAgb3JhY2xpemVfbmV0d29ya19uYW1lID0gX25ldHdvcmtfbmFtZTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeSh1aW50IF9kZWxheSwgdWludCBfbmJ5dGVzLCB1aW50IF9jdXN0b21HYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgaWYgKChfbmJ5dGVzID09IDApfHwoX25ieXRlcyA+IDMyKSkgdGhyb3c7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsKICAgICAgICBuYnl0ZXNbMF0gPSBieXRlKF9uYnl0ZXMpOwogICAgICAgIGJ5dGVzIG1lbW9yeSB1bm9uY2UgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uS2V5SGFzaF9ieXRlczMyID0gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQodW5vbmNlLCAweDIwKSwgeG9yKGJsb2NraGFzaChzdWIobnVtYmVyLCAxKSksIHhvcihjb2luYmFzZSwgdGltZXN0YW1wKSkpCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpCiAgICAgICAgfQogICAgICAgIGJ5dGVzWzNdIG1lbW9yeSBhcmdzID0gW3Vub25jZSwgbmJ5dGVzLCBzZXNzaW9uS2V5SGFzaF07CiAgICAgICAgYnl0ZXMzMiBxdWVyeUlkID0gb3JhY2xpemVfcXVlcnkoX2RlbGF5LCAicmFuZG9tIiwgYXJncywgX2N1c3RvbUdhc0xpbWl0KTsKICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KHF1ZXJ5SWQsIHNoYTMoYnl0ZXM4KF9kZWxheSksIGFyZ3NbMV0sIHNoYTI1NihhcmdzWzBdKSwgYXJnc1syXSkpOwogICAgICAgIHJldHVybiBxdWVyeUlkOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQoYnl0ZXMzMiBxdWVyeUlkLCBieXRlczMyIGNvbW1pdG1lbnQpIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID0gY29tbWl0bWVudDsKICAgIH0KCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIG9yYWNsaXplX3JhbmRvbURTX2FyZ3M7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJvb2wpIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkOwoKICAgIGZ1bmN0aW9uIHZlcmlmeVNpZyhieXRlczMyIHRvc2lnbmgsIGJ5dGVzIGRlcnNpZywgYnl0ZXMgcHVia2V5KSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIGFkZHJlc3Mgc2lnbmVyOwoKICAgICAgICBieXRlczMyIHNpZ3I7CiAgICAgICAgYnl0ZXMzMiBzaWdzOwoKICAgICAgICBieXRlcyBtZW1vcnkgc2lncl8gPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIHVpbnQgb2Zmc2V0ID0gNCsodWludChkZXJzaWdbM10pIC0gMHgyMCk7CiAgICAgICAgc2lncl8gPSBjb3B5Qnl0ZXMoZGVyc2lnLCBvZmZzZXQsIDMyLCBzaWdyXywgMCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3NfID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBvZmZzZXQgKz0gMzIgKyAyOwogICAgICAgIHNpZ3NfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0Kyh1aW50KGRlcnNpZ1tvZmZzZXQtMV0pIC0gMHgyMCksIDMyLCBzaWdzXywgMCk7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgc2lnciA6PSBtbG9hZChhZGQoc2lncl8sIDMyKSkKICAgICAgICAgICAgc2lncyA6PSBtbG9hZChhZGQoc2lnc18sIDMyKSkKICAgICAgICB9CgoKICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjcsIHNpZ3IsIHNpZ3MpOwogICAgICAgIGlmIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKSByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI4LCBzaWdyLCBzaWdzKTsKICAgICAgICAgICAgcmV0dXJuIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShieXRlcyBwcm9vZiwgdWludCBzaWcyb2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzaWdvazsKCiAgICAgICAgLy8gU3RlcCA2OiB2ZXJpZnkgdGhlIGF0dGVzdGF0aW9uIHNpZ25hdHVyZSwgQVBQS0VZMSBtdXN0IHNpZ24gdGhlIHNlc3Npb25LZXkgZnJvbSB0aGUgY29ycmVjdCBsZWRnZXIgYXBwIChDT0RFSEFTSCkKICAgICAgICBieXRlcyBtZW1vcnkgc2lnMiA9IG5ldyBieXRlcyh1aW50KHByb29mW3NpZzJvZmZzZXQrMV0pKzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldCwgc2lnMi5sZW5ndGgsIHNpZzIsIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOwoKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMiA9IG5ldyBieXRlcygxKzY1KzMyKTsKICAgICAgICB0b3NpZ24yWzBdID0gMTsgLy9yb2xlCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY1LCA2NSwgdG9zaWduMiwgMSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IENPREVIQVNIID0gaGV4ImZkOTRmYTcxYmMwYmExMGQzOWQ0NjRkMGQ4ZjQ2NWVmZWVmMGEyNzY0ZTM4ODdmY2M5ZGY0MWRlZDIwZjUwNWMiOwogICAgICAgIGNvcHlCeXRlcyhDT0RFSEFTSCwgMCwgMzIsIHRvc2lnbjIsIDErNjUpOwogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24yKSwgc2lnMiwgYXBwa2V5MV9wdWJrZXkpOwoKICAgICAgICBpZiAoc2lnb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNzogdmVyaWZ5IHRoZSBBUFBLRVkxIHByb3ZlbmFuY2UgKG11c3QgYmUgc2lnbmVkIGJ5IExlZGdlcikKICAgICAgICBieXRlcyBtZW1vcnkgTEVER0VSS0VZID0gaGV4IjdmYjk1NjQ2OWM1YzliODk4NDBkNTViNDM1MzdlNjZhOThkZDQ4MTFlYTBhMjcyMjQyNzJjMmU1NjIyOTExZTg1MzdhMmY4ZTg2YTQ2YmFlYzgyODY0ZTk4ZGQwMWU5Y2NjMmY4YmM1ZGZjOWNiZTVhOTFhMjkwNDk4ZGQ5NmU0IjsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRvc2lnbjMgPSBuZXcgYnl0ZXMoMSs2NSk7CiAgICAgICAgdG9zaWduM1swXSA9IDB4RkU7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzLCA2NSwgdG9zaWduMywgMSk7CgogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWczID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbMys2NSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7CgogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24zKSwgc2lnMywgTEVER0VSS0VZKTsKCiAgICAgICAgcmV0dXJuIHNpZ29rOwogICAgfQoKICAgIG1vZGlmaWVyIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5KGJ5dGVzMzIgX3F1ZXJ5SWQsIHN0cmluZyBfcmVzdWx0LCBieXRlcyBfcHJvb2YpIHsKICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQogICAgICAgIGlmICgoX3Byb29mWzBdICE9ICJMIil8fChfcHJvb2ZbMV0gIT0gIlAiKXx8KF9wcm9vZlsyXSAhPSAxKSkgdGhyb3c7CgogICAgICAgIGJvb2wgcHJvb2ZWZXJpZmllZCA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKF9wcm9vZiwgX3F1ZXJ5SWQsIGJ5dGVzKF9yZXN1bHQpLCBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpKTsKICAgICAgICBpZiAocHJvb2ZWZXJpZmllZCA9PSBmYWxzZSkgdGhyb3c7CgogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3JldHVybkNvZGUoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgaW50ZXJuYWwgcmV0dXJucyAodWludDgpewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSByZXR1cm4gMTsKCiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkpOwogICAgICAgIGlmIChwcm9vZlZlcmlmaWVkID09IGZhbHNlKSByZXR1cm4gMjsKCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgZnVuY3Rpb24gbWF0Y2hCeXRlczMyUHJlZml4KGJ5dGVzMzIgY29udGVudCwgYnl0ZXMgcHJlZml4LCB1aW50IG5fcmFuZG9tX2J5dGVzKSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIG1hdGNoXyA9IHRydWU7CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50MjU2IGk9MDsgaTwgbl9yYW5kb21fYnl0ZXM7IGkrKykgewogICAgICAgICAgICBpZiAoY29udGVudFtpXSAhPSBwcmVmaXhbaV0pIG1hdGNoXyA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG1hdGNoXzsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihieXRlcyBwcm9vZiwgYnl0ZXMzMiBxdWVyeUlkLCBieXRlcyByZXN1bHQsIHN0cmluZyBjb250ZXh0X25hbWUpIGludGVybmFsIHJldHVybnMgKGJvb2wpewoKICAgICAgICAvLyBTdGVwIDI6IHRoZSB1bmlxdWUga2V5aGFzaCBoYXMgdG8gbWF0Y2ggd2l0aCB0aGUgc2hhMjU2IG9mIChjb250ZXh0IG5hbWUgKyBxdWVyeUlkKQogICAgICAgIHVpbnQgbGVkZ2VyUHJvb2ZMZW5ndGggPSAzKzY1Kyh1aW50KHByb29mWzMrNjUrMV0pKzIpKzMyOwogICAgICAgIGJ5dGVzIG1lbW9yeSBrZXloYXNoID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoLCAzMiwga2V5aGFzaCwgMCk7CiAgICAgICAgaWYgKCEoc2hhMyhrZXloYXNoKSA9PSBzaGEzKHNoYTI1Nihjb250ZXh0X25hbWUsIHF1ZXJ5SWQpKSkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzEgPSBuZXcgYnl0ZXModWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOwoKICAgICAgICAvLyBTdGVwIDM6IHdlIGFzc3VtZSBzaWcxIGlzIHZhbGlkIChpdCB3aWxsIGJlIHZlcmlmaWVkIGR1cmluZyBzdGVwIDUpIGFuZCB3ZSB2ZXJpZnkgaWYgJ3Jlc3VsdCcgaXMgdGhlIHByZWZpeCBvZiBzaGEyNTYoc2lnMSkKICAgICAgICBpZiAoIW1hdGNoQnl0ZXMzMlByZWZpeChzaGEyNTYoc2lnMSksIHJlc3VsdCwgdWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCszMis4XSkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIFN0ZXAgNDogY29tbWl0bWVudCBtYXRjaCB2ZXJpZmljYXRpb24sIHNoYTMoZGVsYXksIG5ieXRlcywgdW5vbmNlLCBzZXNzaW9uS2V5SGFzaCkgPT0gY29tbWl0bWVudCBpbiBzdG9yYWdlLgogICAgICAgIC8vIFRoaXMgaXMgdG8gdmVyaWZ5IHRoYXQgdGhlIGNvbXB1dGVkIGFyZ3MgbWF0Y2ggd2l0aCB0aGUgb25lcyBzcGVjaWZpZWQgaW4gdGhlIHF1ZXJ5LgogICAgICAgIGJ5dGVzIG1lbW9yeSBjb21taXRtZW50U2xpY2UxID0gbmV3IGJ5dGVzKDgrMSszMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCszMiwgOCsxKzMyLCBjb21taXRtZW50U2xpY2UxLCAwKTsKCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25QdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIHVpbnQgc2lnMm9mZnNldCA9IGxlZGdlclByb29mTGVuZ3RoKzMyKyg4KzErMzIpK3NpZzEubGVuZ3RoKzY1OwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldC02NCwgNjQsIHNlc3Npb25QdWJrZXksIDApOwoKICAgICAgICBieXRlczMyIHNlc3Npb25QdWJrZXlIYXNoID0gc2hhMjU2KHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID09IHNoYTMoY29tbWl0bWVudFNsaWNlMSwgc2Vzc2lvblB1YmtleUhhc2gpKXsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gKICAgICAgICAgICAgZGVsZXRlIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF07CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKCgogICAgICAgIC8vIFN0ZXAgNTogdmFsaWRpdHkgdmVyaWZpY2F0aW9uIGZvciBzaWcxIChrZXloYXNoIGFuZCBhcmdzIHNpZ25lZCB3aXRoIHRoZSBzZXNzaW9uS2V5KQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24xID0gbmV3IGJ5dGVzKDMyKzgrMSszMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCwgMzIrOCsxKzMyLCB0b3NpZ24xLCAwKTsKICAgICAgICBpZiAoIXZlcmlmeVNpZyhzaGEyNTYodG9zaWduMSksIHNpZzEsIHNlc3Npb25QdWJrZXkpKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vIHZlcmlmeSBpZiBzZXNzaW9uUHVia2V5SGFzaCB3YXMgdmVyaWZpZWQgYWxyZWFkeSwgaWYgbm90Li4gbGV0J3MgZG8gaXQhCiAgICAgICAgaWYgKG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9PSBmYWxzZSl7CiAgICAgICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkocHJvb2YsIHNpZzJvZmZzZXQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXTsKICAgIH0KCgogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UKICAgIGZ1bmN0aW9uIGNvcHlCeXRlcyhieXRlcyBmcm9tLCB1aW50IGZyb21PZmZzZXQsIHVpbnQgbGVuZ3RoLCBieXRlcyB0bywgdWludCB0b09mZnNldCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGxlbmd0aCArIHRvT2Zmc2V0OwoKICAgICAgICBpZiAodG8ubGVuZ3RoIDwgbWluTGVuZ3RoKSB7CiAgICAgICAgICAgIC8vIEJ1ZmZlciB0b28gc21hbGwKICAgICAgICAgICAgdGhyb3c7IC8vIFNob3VsZCBiZSBhIGJldHRlciB3YXk/CiAgICAgICAgfQoKICAgICAgICAvLyBOT1RFOiB0aGUgb2Zmc2V0IDMyIGlzIGFkZGVkIHRvIHNraXAgdGhlIGBzaXplYCBmaWVsZCBvZiBib3RoIGJ5dGVzIHZhcmlhYmxlcwogICAgICAgIHVpbnQgaSA9IDMyICsgZnJvbU9mZnNldDsKICAgICAgICB1aW50IGogPSAzMiArIHRvT2Zmc2V0OwoKICAgICAgICB3aGlsZSAoaSA8ICgzMiArIGZyb21PZmZzZXQgKyBsZW5ndGgpKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCB0bXAgOj0gbWxvYWQoYWRkKGZyb20sIGkpKQogICAgICAgICAgICAgICAgbXN0b3JlKGFkZCh0bywgaiksIHRtcCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpICs9IDMyOwogICAgICAgICAgICBqICs9IDMyOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUKICAgIGZ1bmN0aW9uIHNhZmVyX2VjcmVjb3ZlcihieXRlczMyIGhhc2gsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQKICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzCiAgICAgICAgLy8gd3JpdGVzIGFyZSBtZW1vcnkgZXh0ZW5zaW9ucyksIGJ1dCBkb24ndCB1cGRhdGUgdGhlIG9mZnNldCBzbwogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcgogICAgICAgIC8vIHRoaXMgY29udGV4dC4KCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcwogICAgICAgIGJvb2wgcmV0OwogICAgICAgIGFkZHJlc3MgYWRkcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgc2l6ZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgNjQpLCByKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykKCiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiByZXVzZSB0aGUgcmVxdWVzdCBtZW1vcnkgYmVjYXVzZSB3ZSBkZWFsIHdpdGgKICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpCiAgICAgICAgICAgIGFkZHIgOj0gbWxvYWQoc2l6ZSkKICAgICAgICB9CgogICAgICAgIHJldHVybiAocmV0LCBhZGRyKTsKICAgIH0KCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgZnVuY3Rpb24gZWNyZWNvdmVyeShieXRlczMyIGhhc2gsIGJ5dGVzIHNpZykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgewogICAgICAgIGJ5dGVzMzIgcjsKICAgICAgICBieXRlczMyIHM7CiAgICAgICAgdWludDggdjsKCiAgICAgICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpCiAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsKCiAgICAgICAgLy8gVGhlIHNpZ25hdHVyZSBmb3JtYXQgaXMgYSBjb21wYWN0IGZvcm0gb2Y6CiAgICAgICAgLy8gICB7Ynl0ZXMzMiByfXtieXRlczMyIHN9e3VpbnQ4IHZ9CiAgICAgICAgLy8gQ29tcGFjdCBtZWFucywgdWludDggaXMgbm90IHBhZGRlZCB0byAzMiBieXRlcy4KICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZywgMzIpKQogICAgICAgICAgICBzIDo9IG1sb2FkKGFkZChzaWcsIDY0KSkKCiAgICAgICAgICAgIC8vIEhlcmUgd2UgYXJlIGxvYWRpbmcgdGhlIGxhc3QgMzIgYnl0ZXMuIFdlIGV4cGxvaXQgdGhlIGZhY3QgdGhhdAogICAgICAgICAgICAvLyAnbWxvYWQnIHdpbGwgcGFkIHdpdGggemVyb2VzIGlmIHdlIG92ZXJyZWFkLgogICAgICAgICAgICAvLyBUaGVyZSBpcyBubyAnbWxvYWQ4JyB0byBkbyB0aGlzLCBidXQgdGhhdCB3b3VsZCBiZSBuaWNlci4KICAgICAgICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWcsIDk2KSkpCgogICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBzb2x1dGlvbjoKICAgICAgICAgICAgLy8gJ2J5dGUnIGlzIG5vdCB3b3JraW5nIGR1ZSB0byB0aGUgU29saWRpdHkgcGFyc2VyLCBzbyBsZXRzCiAgICAgICAgICAgIC8vIHVzZSB0aGUgc2Vjb25kIGJlc3Qgb3B0aW9uLCAnYW5kJwogICAgICAgICAgICAvLyB2IDo9IGFuZChtbG9hZChhZGQoc2lnLCA2NSkpLCAyNTUpCiAgICAgICAgfQoKICAgICAgICAvLyBhbGJlaXQgbm9uLXRyYW5zYWN0aW9uYWwgc2lnbmF0dXJlcyBhcmUgbm90IHNwZWNpZmllZCBieSB0aGUgWVAsIG9uZSB3b3VsZCBleHBlY3QgaXQKICAgICAgICAvLyB0byBtYXRjaCB0aGUgWVAgcmFuZ2Ugb2YgWzI3LCAyOF0KICAgICAgICAvLwogICAgICAgIC8vIGdldGggdXNlcyBbMCwgMV0gYW5kIHNvbWUgY2xpZW50cyBoYXZlIGZvbGxvd2VkLiBUaGlzIG1pZ2h0IGNoYW5nZSwgc2VlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTMKICAgICAgICBpZiAodiA8IDI3KQogICAgICAgICAgdiArPSAyNzsKCiAgICAgICAgaWYgKHYgIT0gMjcgJiYgdiAhPSAyOCkKICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7CgogICAgICAgIHJldHVybiBzYWZlcl9lY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7CiAgICB9Cgp9Ci8vIDwvT1JBQ0xJWkVfQVBJPgoKLy9DV0Mgd2l0aCB2ZXJpZmllZFVzZXJzT25seU1vZGUgYW5kIHZlcmlmaWVkVXNlcnNbXSBmb3IgS1lDIHJlZ3VsYXRpb25zCi8vRmViIDQsIDIwMTggLS1EZXZlbG9wZWQgYnkgQnl1bmdndSBZdQoKCmNvbnRyYWN0IENXQ19TYWxlSW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiBtaW50ZXJHaXZlc0NXQyhhZGRyZXNzIF90bywgdWludCBfdmFsdWUpOwogICAgCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpOwogICAgZXZlbnQgTWludGVyR2F2ZUNXQyhhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpOwp9CmNvbnRyYWN0IENXQ19SZWNlaXZlckludGVyZmFjZSB7Ci8qIAogKiBAcGFyYW0gX2Zyb20gIFRva2VuIHNlbmRlciBhZGRyZXNzLgogKiBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiB0b2tlbnMuCiAqIEBwYXJhbSBfZGF0YSAgVHJhbnNhY3Rpb24gbWV0YWRhdGEuCiAqLwogICAgZnVuY3Rpb24gQ1dDZmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSk7Cn0KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Ci8qCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgcmV2ZXJ0KCk7CiAgICB9CiAgfQoqLwogICAgCn0KCi8qIENXQ19TYWxlLnNvbCAqLwovKiBDV0NfU2FsZSwgRVJDMjIzIGJhc2VkLCBDcmVkaXQgV2FzaGluZ3RvbiwgSmFuIDgsIDIwMTggKi8KLyogRGV2ZWxvcGVkIGJ5IEJ5dW5nZ3UgWXUgKi8KLyogRGVwbG95bWVudCBNYW51YWwKICAgIEFmdGVyIGRlcGxveWVkLCAKICAgICAgICAoMSkgU2V0IGhlZGdlQWRkcmVzcyAoZGVmYXVsdDogb3duZXIpOwogICAgICAgICgyKSBTZXQgYWxsIFF1ZXJ5IGFuZCBRdWVyeSBEYXRhOwogICAgICAgICgzKSBBZGQgVS9EIHRyYWRpbmcgcHJvZHVjdCBhZGRyZXNzZXMgdXNpbmcgYWRkTWludGVyLgogICAgICAgIAoJTm90ZXM6ICAgCgkwLiB0aWNrZXJRdWVyeSBpcyBhbiBIVFRQIFBPU1QuIChOb3RlOiB0aWNrZXJRdWVyeVB1cnBvc2U6ICgxKSBTYWxlOyAoMikgQ1dDcmV0dXJuIChvdXIgYnV5YmFjayBvZiBDV0MpCgkJQnkgZGVmYXVsdDogUE9TVCBnb2VzIHRvIG91ciBIVFRQIHNlcnZlciAodGlja2VyUXVlcnkpIHdpdGggb3Bjb2RlLCBDV0MsIGNsaWVudF9hZGRyZXNzLCBhbmQgYW1vdW50LgogICAgICAgICAgICAgICAgWW91IGNhbm5vdCBjaGFuZ2UgdGlja2VyUXVlcnlEYXRhIChhdXRvIGdlbmVyYXRlZCBhcyBmb2xsb3dzKQoJCT09PT4gIm9wY29kZSAoMCBmb3Igc2FsZTsgMSBmb3IgcmV0dXJuKSwgQ1dDLCBjbGllbnRfYWRkcmVzcywgYW1vdW504oCdCgkJICAgIE5vdGU6IGFtb3VudCBpcyBXZWkgZm9yIDMgKHNhbGUpIGFuZCBDV0MgZm9yIDQgKHJldHVybikKCgkyLiAgcmVzdWx0IG9mIGV2ZXJ5IFBPU1QgaXMgdGhlICJyZXN1bHQiIHBhcmFtZXRlciBvZiBfX2NhbGxiYWNrKCkgaW4gYSBzdHJpbmcuCgkJRXJyb3IgcmV0dXJuIGRlZmluaXRpb246CgkJCT09PT4gaGVkZ2VRdWVyeTogcmV0dXJuPT0iZXJyIjsKCQkJPT09PiBDV0NyZXR1cm5RdWVyeTogcmV0dXJuPT0iZXJyIjsKCQkJIAoqLwoKY29udHJhY3Qgb3duZWQgaXMgdXNpbmdPcmFjbGl6ZXsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIG93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICAgIC8vPT09PT09PT09PT09PT09PT09PT09PSBVdGlsaXR5IEZ1bmN0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT09Ly8KICAgIC8vLyBAZGV2IENvbXBhcmVzIHR3byBzdHJpbmdzIGFuZCByZXR1cm5zIHRydWUgaWZmIHRoZXkgYXJlIGVxdWFsLgogICAgZnVuY3Rpb24gc3RyaW5nRXF1YWwoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3RyQ29tcGFyZShfYSwgX2IpID09IDA7CiAgICB9CiAgICBmdW5jdGlvbiBhZGRyZXNzVG9Bc2NpaVN0cmluZyhhZGRyZXNzIHgpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIGJ5dGVzIG1lbW9yeSBzID0gbmV3IGJ5dGVzKDQwKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7CiAgICAgICAgICAgIGJ5dGUgYiA9IGJ5dGUodWludDgodWludCh4KSAvICgyKiooOCooMTkgLSBpKSkpKSk7CiAgICAgICAgICAgIGJ5dGUgaGkgPSBieXRlKHVpbnQ4KGIpIC8gMTYpOwogICAgICAgICAgICBieXRlIGxvID0gYnl0ZSh1aW50OChiKSAtIDE2ICogdWludDgoaGkpKTsKICAgICAgICAgICAgc1syKmldID0gY2hhcihoaSk7CiAgICAgICAgICAgIHNbMippKzFdID0gY2hhcihsbyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJpbmcocyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhcihieXRlIGIpIGludGVybmFsIHJldHVybnMgKGJ5dGUgYykgewogICAgICAgIGlmIChiIDwgMTApIHJldHVybiBieXRlKHVpbnQ4KGIpICsgMHgzMCk7CiAgICAgICAgZWxzZSByZXR1cm4gYnl0ZSh1aW50OChiKSArIDB4NTcpOwogICAgfQogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vLwp9CgovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKCmNvbnRyYWN0IENXQ19TYWxlIGlzIG93bmVkLCBDV0NfU2FsZUludGVyZmFjZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICAvKiBDb25zdHJ1Y3RvciBWYXJpYWJsZXMgKi8KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwoKICAgIC8qIEV0aGVyIEhlZGdlIFdhbGxldCBBZGRyZXNzICovCiAgICBhZGRyZXNzIHB1YmxpYyBoZWRnZUFkZHJlc3M7IC8vZXRoZXIgcGF5bWVudHMgZ28gdG8gdGhpcwogICAgCiAgICAvKiBTZXR0YWJsZSBGZWUgU3RydWN0dXJlIHBlciBTYWxlIGFuZCBDV0NyZXR1cm4gdHJhbnNhY3Rpb24gKi8KICAgIHVpbnQgcHVibGljIGZpeGVkRmVlSW5XZWk9MTAwMDAwMDAwMDAwMDAwMDsgLy9kZWZhdWx0OiAwLjAwMSBldGhlciwgZmVlIHBlciBDV0MgU2FsZSBpbnZhcmlhbnQgdG8gdGhlIHNhbGUgdHJhbnNhY3Rpb24gdm9sdW1lCiAgICB1aW50IHB1YmxpYyBwZXJjZW50RmVlVGltZXMxMDA9MjA7IC8vZGVmYXVsdDogMC4xNSUgKD0xNSksIChlLmcuLCAxMDA9MSUsIDE9MC4wMSUpICVmZWUgKiAxMDAgaW50ZWdlcnBlciBDV0MgU2FsZSB0cmFuc2FjdGlvbiB2b2x1bWUKICAgIC8vIE5vdGU6IHZhbHVlLzEwMDAwKnBlcmNlbnRGZWVUaW1lczEwMCBpcyB0aGUgcGVyY2VudEZlZSBvZiB2YWx1ZQogICAgLy8gICAgICBlLmcuLCAxMDAvMTAwMDAqMTAwID0gMSUgb2YgMTAwCiAgICAvLyAgICAgIE1ha2Ugc3VyZSB0aGF0IHlvdSBhcHBseSB0aGlzIHRvIHdlaS4gcGVyY2VudEZlZT0od2VpLzEwMDAwKSpwZXJjZW50RmVlVGltZXMxMDAKICAgIAogICAgLyogU2V0dGFibGUgdmFyaWFibGVzICovCiAgICBib29sIHB1YmxpYyB2ZXJpZmllZFVzZXJzT25seU1vZGU9ZmFsc2U7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgdmVyaWZpZWRVc2VyczsKICAgIAogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk9MTAwMDAwMDAwMDAwMDsgLy8gMSBUcmlsbGlvbiBDV0NzCiAgICAvL3RvdGFsSW5DaXJjdWxhdGlvbiAodWludCB0eXBlKSBpcyBpbiBDV0NfU2FsZUludGVyZmFjZS5zb2w7IAogICAgYm9vbCBwdWJsaWMgcGF1c2VDV0M9ZmFsc2U7CiAgICB1aW50IHB1YmxpYyBtaW5GaW5uZXlQZXJTYWxlTW9yZVRoYW49OTk7IC8vZGVmYXVsdDogMC4xIGV0aGVyLiBDaGFuZ2FibGUKICAgIHVpbnQgcHVibGljIG1heEZpbm5leVBlclNhbGVMZXNzVGhhbj0xMDAwMDAwMDAxOyAvL2RlZmF1bHQ6IDEsMDAwLDAwMCBldGhlci4gQ2hhbmdhYmxlCiAgICB1aW50IHB1YmxpYyBtaW5DV0NzUGVyUmV0dXJuTW9yZVRoYW49OTsgLy8gZ3JlYXRlciB0aGFuIHRoaXMgbWluaW11bSBDV0NyZXR1cm4gdm9sdW1lIGluIENXQ3MKICAgIHVpbnQgcHVibGljIG1heENXQ3NQZXJSZXR1cm5MZXNzVGhhbj0xMDAwMDAwMDAxOyAvL2RlZmF1bHQ6IDFiaWxsaW9uLiBsZXNzIHRoYW4gdGhpcyBtYXguCiAgICB1aW50IHB1YmxpYyBtaW5GaW5uZXlUb0tlZXA9NTAwOyAvL21pbiBmaW5uZXkgdG8ga2VlcCBpbiB0aGlzIGNvbnRyYWN0CiAgICB1aW50IHB1YmxpYyBtaW5GaW5uZXlQZXJIZWRnZVRyYW5zZmVyPTIwMDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsgLy8gSG93IG1hbnkgQ1dDcyBlYWNoIGFkZHJlc3MgaGFzLgogICAgLy9BZGQgb25seSBvdXIgaW50cnVtZW50IGFkZHJlc3NlcywgZS5nLiwgVWx0cmFFVEgsIGluIGlzTWludGVyIGFycmF5CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgaXNNaW50ZXI7IC8vTWludGVyIGlzIGFsbG93ZWQgdG8gdHJhbnNmZXIgQ1dDcyB3aXRob3V0IGhvbGRpbmcgYW55IENXQy4KICAgIC8vVGhlIGZvbGxvd2luZyBpcyB0byBibG9jayBCQUQgYWRkcmVzc2VzOiBBbGwgSW4gYW5kIE91dCBvZiBDV0NzIFN0b3AKICAgIAogICAgLyogc2FsZVRyYW5zYWN0aW9uKCksIENXQ3JldHVyblRyYW5zYWN0aW9uKCksIGFuZCBfX2NhbGxiYWNrIHZhcmlhYmxlcyAqLwogICAgLy9zdHJpbmcgcHVibGljIHRpY2tlclF1ZXJ5PSJqc29uKGh0dHBzOi8vYXBpLmtyYWtlbi5jb20vMC9wdWJsaWMvVGlja2VyP3BhaXI9RVRIVVNEKS5yZXN1bHQuWEVUSFpVU0QuYS4wIjsKICAgIC8vc3RyaW5nIHB1YmxpYyB0aWNrZXJRdWVyeT0ianNvbihodHRwOi8vYXBpLmhpdGJ0Yy5jb20vYXBpLzIvcHVibGljL3RpY2tlci9FVEhVU0QpLmFzayI7IC8vY2hlYXBlciB1c2QKICAgIHN0cmluZyBwdWJsaWMgdGlja2VyUXVlcnk9Imh0dHA6Ly81Mi43My4xODAuMTk3OjMwMTIzIjsKICAgIHN0cmluZyBwdWJsaWMgdGlja2VyUXVlcnlEYXRhPSIiOwogICAgbWFwcGluZyhieXRlczMyID0+IGJvb2wpIHRpY2tlclF1ZXJ5SWRzOwogICAgbWFwcGluZyhieXRlczMyID0+IHVpbnQ4KSB0aWNrZXJRdWVyeVB1cnBvc2U7IC8vKDEpIFtDV0NdU2FsZTsgKDIpIENXQ3JldHVybgogICAgc3RyaW5nIHB1YmxpYyBsYXN0Q1dDRVRIOwogICAgdWludCBwdWJsaWMgbGFzdFdlaVByaWNlUGVyQ1dDOwogICAgLy8gQ1dDIHNhbGUKICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBhZGRyZXNzKSB3YWl0aW5nQnV5ZXI7CiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gdWludCkgd2VpUGFpZDsKICAgIC8vIENXQyByZXR1cm4KICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBhZGRyZXNzKSB3YWl0aW5nU2VsbGVyOwogICAgbWFwcGluZyhieXRlczMyID0+IHVpbnQpIGN3Y1BhaWQ7CiAgICAKICAgIC8qIENXQ3JldHVyblRyYW5zYWN0aW9uKCkgYW5kIF9fY2FsbGJhY2sgdmFyaWFibGVzICovCiAgICBzdHJpbmcgcHVibGljIENXQ3JldHVyblF1ZXJ5PSJodHRwOi8vNTIuNzMuMTgwLjE5NzozMDEyMyI7CiAgICBzdHJpbmcgcHVibGljIENXQ3JldHVyblF1ZXJ5RGF0YT0iIjsKICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBib29sKSBDV0NyZXR1cm5RdWVyeUlkczsKCiAgICAvKiBQdWJsaWMgRXZlbnRzICovCiAgICAvL3Byb2R1Y3Rpb24gZXZlbnRzCiAgICAvL2V2ZW50IFRyYW5zZmVyIGlzIGluIHRoZSBpbnRlcmZhY2UKICAgIGV2ZW50IHJlY2VpdmVkV2VpKGFkZHJlc3MgZnJvbSwgdWludCBhbW91bnQpOwogICAgZXZlbnQgc29sZENXQyhhZGRyZXNzIHRvLCB1aW50IGFtb3VudCwgYnl0ZXMzMiBteWlkKTsKICAgIGV2ZW50IHJlY2VpdmVkQ1dDcmV0dXJuKGFkZHJlc3MgZnJvbSwgdWludCBhbW91bnQpOwogICAgZXZlbnQgcmV0dXJuZWRXZWkoYWRkcmVzcyBiYWNrX3RvLCB1aW50IGFtb3VudCk7CgogICAgZXZlbnQgbmV3T3JhY2xpemVTZXRQcm9vZihzdHJpbmcgZGVzY3JpcHRpb24pOwogICAgZXZlbnQgbmVlZHNFdGhlcihzdHJpbmcgZGVzY3JpcHRpb24pOwogICAgZXZlbnQgbmV3VGlja2VyUXVlcnkoc3RyaW5nIGRlc2NyaXB0aW9uLCBieXRlczMyIG15aWQpOwogICAgZXZlbnQgbmV3VGlja2VyUXVlcnlSZXN1bHQoc3RyaW5nIGxhc3RfdWV0Y3djLCBieXRlczMyIG15aWQpOwogICAgZXZlbnQgZXJyb3JUaWNrZXJRdWVyeUVycm9yKHN0cmluZyByZXN1bHQsIGJ5dGVzMzIgbXlpZCk7CiAgICAKICAgIC8qIERlYnVnIEV2ZW50cyAqLwogICAgZXZlbnQgZGVidWdfc3RyaW5nKHN0cmluZyBkZXNjcmlwdGlvbik7CiAgICBldmVudCBkZWJ1Z19ib29sKGJvb2wgZGVzY3JpcHRpb24pOwogICAgZXZlbnQgZGVidWdfdWludCh1aW50IGRlc2NyaXB0aW9uKTsKICAgIAogICAgLyogQ29uc3RydWN0b3IgZnVuY3Rpb24gKi8KICAgIGZ1bmN0aW9uIENXQ19TYWxlKHN0cmluZyB0b2tlbk5hbWUsIHN0cmluZyB0b2tlblN5bWJvbCkgcHVibGljIHsKICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgaGVkZ2VBZGRyZXNzID0gbXNnLnNlbmRlcjsgIC8vIEluaXRpYWxpemVkIHRvIHRoZSBvd25lci4gQ2hhbmdhYmxlLgogICAgICAgIG9yYWNsaXplX3NldFByb29mKHByb29mVHlwZV9UTFNOb3RhcnkgfCBwcm9vZlN0b3JhZ2VfSVBGUyk7CiAgICAgICAgbmV3T3JhY2xpemVTZXRQcm9vZigiY2FsbGVkIHRoZSBmdW5jdGlvbiIpOwogICAgfSAgICAKCiAgICAvKiBiYWxhbmNlIGNoZWNrdXAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIGFuX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1thbl9hZGRyZXNzXTsKICAgIH0KICAgIAogICAgLyogdmVyaWZpZWQgdXNlcnMgY2hlY2t1cCAqLwogICAgZnVuY3Rpb24gaXNWZXJpZmllZFVzZXIoYWRkcmVzcyBhbl9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sIHZlcmlmaWVkKSB7CiAgICAgICAgcmV0dXJuIHZlcmlmaWVkVXNlcnNbYW5fYWRkcmVzc107CiAgICB9CiAgICAKICAgIC8qIFNldHRlcnMgKi8KICAgIGZ1bmN0aW9uIHNldF92ZXJpZmllZFVzZXJzT25seU1vZGUoYm9vbCBfdmVyaWZpZWRPbmx5KSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICB2ZXJpZmllZFVzZXJzT25seU1vZGU9X3ZlcmlmaWVkT25seTsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZFZlcmlmaWVkVXNlcihhZGRyZXNzIHVzZXJfYWRkcmVzcykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdmVyaWZpZWRVc2Vyc1t1c2VyX2FkZHJlc3NdID0gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlbW92ZVZlcmlmaWVkVXNlcihhZGRyZXNzIHVzZXJfYWRkcmVzcykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgZGVsZXRlIHZlcmlmaWVkVXNlcnNbdXNlcl9hZGRyZXNzXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcmV0cnlPcmFjbGl6ZVNldFByb29mKHVpbnQgVHlwZV8xX2lmX3N1cmUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmKFR5cGVfMV9pZl9zdXJlPT0xKSB7CiAgICAgICAgICAgIG9yYWNsaXplX3NldFByb29mKHByb29mVHlwZV9UTFNOb3RhcnkgfCBwcm9vZlN0b3JhZ2VfSVBGUyk7CiAgICAgICAgICAgIG5ld09yYWNsaXplU2V0UHJvb2YoIm1hbnVhbCBwZXJmb3JtZWQiKTsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBzZXRfZmVlcyh1aW50IF9maXhlZEZlZUluV2VpLCB1aW50IF9wZXJjZW50RmVlVGltZXMxMDApIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGZpeGVkRmVlSW5XZWkgPSBfZml4ZWRGZWVJbldlaTsKICAgICAgICBwZXJjZW50RmVlVGltZXMxMDAgPSBfcGVyY2VudEZlZVRpbWVzMTAwOwogICAgfQogICAgZnVuY3Rpb24gc2V0X3RvdGFsU3VwcGx5KHVpbnQgdmFsdWUpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHRvdGFsU3VwcGx5PXZhbHVlOwogICAgfQogICAgZnVuY3Rpb24gc2V0X3BhdXNlQ1dDKGJvb2wgX3BhdXNlQ1dDKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBwYXVzZUNXQz1fcGF1c2VDV0M7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRfbWluX21heF9GaW5uZXlQZXJTYWxlKHVpbnQgX21pbkluRmlubmV5TWludXMxLCB1aW50IF9tYXhJbkZpbm5leVBsdXMxKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBtaW5GaW5uZXlQZXJTYWxlTW9yZVRoYW49X21pbkluRmlubmV5TWludXMxOwogICAgICAgIG1heEZpbm5leVBlclNhbGVMZXNzVGhhbj1fbWF4SW5GaW5uZXlQbHVzMTsKICAgIH0KICAgIGZ1bmN0aW9uIHNldF9taW5fbWF4X0NXQ3NQZXJSZXR1cm4odWludCBfbWluSW5GaW5uZXlNaW51czEsIHVpbnQgX21heEluRmlubmV5UGx1czEpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG1pbkNXQ3NQZXJSZXR1cm5Nb3JlVGhhbj1fbWluSW5GaW5uZXlNaW51czE7CiAgICAgICAgbWF4Q1dDc1BlclJldHVybkxlc3NUaGFuPV9tYXhJbkZpbm5leVBsdXMxOwogICAgfQogICAgZnVuY3Rpb24gc2V0X21pbkZpbm5leVRvS2VlcCh1aW50IHZhbHVlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBtaW5GaW5uZXlUb0tlZXA9dmFsdWU7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRfbWluRmlubmV5UGVySGVkZ2VUcmFuc2Zlcih1aW50IHZhbHVlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBtaW5GaW5uZXlQZXJIZWRnZVRyYW5zZmVyPXZhbHVlOwogICAgfQogICAgZnVuY3Rpb24gc2V0X3RpY2tlclF1ZXJ5KHN0cmluZyBxdWVyeSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgdGlja2VyUXVlcnk9cXVlcnk7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRfaGVkZ2VBZGRyZXNzKGFkZHJlc3MgdG8pIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGhlZGdlQWRkcmVzcz10bzsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZE1pbnRlcihhZGRyZXNzIG5ld19taW50ZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlzTWludGVyW25ld19taW50ZXJdID0gdHJ1ZTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlbW92ZU1pbnRlcihhZGRyZXNzIG9sZF9taW50ZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGRlbGV0ZSBpc01pbnRlcltvbGRfbWludGVyXTsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZFNvbWVDV0NzVG8oYWRkcmVzcyB0YXJnZXRfYWRkcmVzcywgdWludCBob3dfbWFueSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZXNbdGFyZ2V0X2FkZHJlc3NdID0gYmFsYW5jZXNbdGFyZ2V0X2FkZHJlc3NdLmFkZChob3dfbWFueSk7CiAgICB9CiAgICBmdW5jdGlvbiByZW1vdmVTb21lQ1dDc0Zyb20oYWRkcmVzcyB0YXJnZXRfYWRkcmVzcywgdWludCBob3dfbWFueSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgYmFsYW5jZXNbdGFyZ2V0X2FkZHJlc3NdID0gYmFsYW5jZXNbdGFyZ2V0X2FkZHJlc3NdLnN1Yihob3dfbWFueSk7CiAgICB9CgogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBDV0MgVHJhbnNmZXIgVHJhbnNhY3Rpb24gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vCiAgICAKICAgIC8qIEZvciBUaGUgTWludGVyIHRvIGdpdmUgQ1dDIHRvIGEgY2xpZW50ICovCiAgICBmdW5jdGlvbiBtaW50ZXJHaXZlc0NXQyhhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShpc01pbnRlclttc2cuc2VuZGVyXSk7IC8vbWludGVycyBhcmUgdGhlIHNhbGVzIGl0ZW1zOiBVRVQsIERFVCwgLi4uCiAgICAgICAgcmVxdWlyZSghaXNNaW50ZXJbX3RvXSAmJiBfdG8gIT0gb3duZXIpOyAvL3RvIGEgY2xpZW50CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgTWludGVyR2F2ZUNXQyhtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgLyogRVJDMjIzIHRyYW5zZmVyIENXQ3Mgd2l0aCBkYXRhICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgewogICAgICAgIHVpbnQgY29kZUxlbmd0aDsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBjb2RlTGVuZ3RoIDo9IGV4dGNvZGVzaXplKF90bykKICAgICAgICB9CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgaWYoIWlzTWludGVyW190b10gJiYgX3RvICE9IG93bmVyKSB7IC8vVGhleSB3aWxsIG5ldmVyIGdldCBhbnl0aGluZyB0byBzZW5kCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgaWYoY29kZUxlbmd0aD4wKSB7CiAgICAgICAgICAgIENXQ19SZWNlaXZlckludGVyZmFjZSByZWNlaXZlciA9IENXQ19SZWNlaXZlckludGVyZmFjZShfdG8pOwogICAgICAgICAgICByZWNlaXZlci5DV0NmYWxsYmFjayhtc2cuc2VuZGVyLCBfdmFsdWUsIF9kYXRhKTsKICAgICAgICB9CgkgICAgLy8gR2VuZXJhdGUgYW4gZXZlbnQgZm9yIHRoZSBjbGllbnQKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgICAgIC8vIFJldHVybmluZyBDV0NzCiAgICAgICAgaWYoX3RvID09IG93bmVyKSB7CiAgICAgICAgICAgIENXQ3JldHVyblRyYW5zYWN0aW9uKG1zZy5zZW5kZXIsIF92YWx1ZSk7IC8vIDw9PT09PT0gRW50cnkgdG8gQ1dDIFJldHVybgogICAgICAgIH0KICAgIH0KICAgIAogICAgLyogRVJDMjIzIHRyYW5zZmVyIENXQ3Mgdy9vIGRhdGEgZm9yIEVSQzIwIGNvbXBhdGliaWxpdHkgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHsKICAgICAgICB1aW50IGNvZGVMZW5ndGg7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUoX3RvKQogICAgICAgIH0KCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKCiAgICAgICAgaWYoIWlzTWludGVyW190b10gJiYgX3RvICE9IG93bmVyKSB7IC8vVGhleSB3aWxsIG5ldmVyIGdldCBhbnl0aGluZyB0byBzZW5kCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZihjb2RlTGVuZ3RoPjApIHsKICAgICAgICAgICAgQ1dDX1JlY2VpdmVySW50ZXJmYWNlIHJlY2VpdmVyID0gQ1dDX1JlY2VpdmVySW50ZXJmYWNlKF90byk7CiAgICAgICAgICAgIHJlY2VpdmVyLkNXQ2ZhbGxiYWNrKG1zZy5zZW5kZXIsIF92YWx1ZSwgZW1wdHkpOwogICAgICAgIH0KCSAgICAvLyBHZW5lcmF0ZSBhbiBldmVudCBmb3IgdGhlIGNsaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBlbXB0eSk7CiAgICAgICAgLy8gUmV0dXJuaW5nIENXQ3MKICAgICAgICBpZihfdG8gPT0gb3duZXIpIHsKICAgICAgICAgICAgQ1dDcmV0dXJuVHJhbnNhY3Rpb24obXNnLnNlbmRlciwgX3ZhbHVlKTsgLy8gPD09PT09PSBFbnRyeSB0byBDV0MgUmV0dXJuCiAgICAgICAgfQogICAgfQoKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ1dDIFNhbGUgVHJhbnNhY3Rpb24gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vCgogICAgLyogPT09PiBHZXQgRXRoZXIgYW5kIFRyYW5zZmVyIENXQ3MgKi8KICAgIC8qIENXQ19SZXR1cm4gaGFzIHRoZSBFUkMyMjMgdG9rZW5GYWxsQmFjayBhcyBpbiB0aGUgdHJhbnNmZXIgb2YgQ1dDX1NhbGUgdG8gcmVjZWl2ZSBDV0MgKi8KICAgIC8qID09PT4gR2V0IENXQ3MgYW5kIFRyYW5zZmVyIEV0aGVyICovCiAgICAvKiBDbGllbnQgY2FuIGJ1eSBieSBzZW5kaW5nIGV0aGVyIHRvIHRoaXMgY29udHJhY3QgKi8KICAgIC8qIFRoZSBmdW5jdGlvbiB3aXRob3V0IG5hbWUgaXMgdGhlIGRlZmF1bHQgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55b25lIHNlbmRzIGV0aGVyICovCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7IC8vIDw9PT09PT09PT09PSBFbnRyeSB0byBDV0MgU2FsZQogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlPjApOyAvL3JlamVjdCBhbGwgaW5jb21pbmcgY3VzdG9tIGNvaW5zLgoJICAgIGlmKG1zZy52YWx1ZSA+IDEqMTAqKjE2KSB7IC8vIGxlc3MgdGhhbiBvciBlcXVhbCB0byAwLjAxIGV0aGVyIGlzIHRha2VuIGFzIGtpY2stc3RhcnQgZnVlbAoJICAgICAgICBzYWxlVHJhbnNhY3Rpb24oKTsKCSAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNhbGVUcmFuc2FjdGlvbigpIHByaXZhdGUgewogICAgICAgIHJlcXVpcmUodmVyaWZpZWRVc2Vyc09ubHlNb2RlPT1mYWxzZSB8fCB2ZXJpZmllZFVzZXJzW21zZy5zZW5kZXJdPT10cnVlKTsKICAgICAgICByZXF1aXJlKCFwYXVzZUNXQyk7CgkgICAgcmVxdWlyZShtc2cudmFsdWU+bWluRmlubmV5UGVyU2FsZU1vcmVUaGFuKjEwKioxNSAmJiBtc2cudmFsdWU8bWF4RmlubmV5UGVyU2FsZUxlc3NUaGFuKjEwKioxNSk7CgogICAgICAgIGlmIChvcmFjbGl6ZV9nZXRQcmljZSgiVVJMIikgPiB0aGlzLmJhbGFuY2UpIHsKICAgICAgICAgICAgbmVlZHNFdGhlcigiT3JhY2xpemUgcXVlcnkgZm9yIENXQyBzYWxlIHdhcyBOT1Qgc2VudCwgcGxlYXNlIGFkZCBzb21lIEVUSCB0byBjb3ZlciBmb3IgdGhlIHF1ZXJ5IGZlZSIpOwogICAgICAgICAgICBwYXVzZUNXQz10cnVlOwogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9IAogICAgICAgIGVsc2UgewogICAgICAgICAgICAvL0V4cGVjdGF0aW9uOiBDV0NfU2FsZSBmb3IgQXNrIChhKSBhbmQgQ1dDX1JldHVybiBmb3IgQmlkIChiKQogICAgICAgICAgICB0aWNrZXJRdWVyeURhdGEgPSBzdHJDb25jYXQoIjAsIiwgIkNXQywiLCAiMHgiLCBhZGRyZXNzVG9Bc2NpaVN0cmluZyhtc2cuc2VuZGVyKSwgIiwiKTsKICAgICAgICAgICAgdGlja2VyUXVlcnlEYXRhID0gc3RyQ29uY2F0KHRpY2tlclF1ZXJ5RGF0YSwgdWludDJzdHIobXNnLnZhbHVlKSk7CiAgICAgICAgICAgIGJ5dGVzMzIgcXVlcnlJZCA9IG9yYWNsaXplX3F1ZXJ5KCJVUkwiLCB0aWNrZXJRdWVyeSwgdGlja2VyUXVlcnlEYXRhKTsKICAgICAgICAgICAgLy9ieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9xdWVyeSgiVVJMIiwgImpzb24oaHR0cHM6Ly9hcGkua3Jha2VuLmNvbS8wL3B1YmxpYy9UaWNrZXI/cGFpcj1FVEhYQlQpLnJlc3VsdC5YRVRIWFhCVC5jLjAiKTsKICAgICAgICAgICAgdGlja2VyUXVlcnlJZHNbcXVlcnlJZF0gPSB0cnVlOwogICAgICAgICAgICB0aWNrZXJRdWVyeVB1cnBvc2VbcXVlcnlJZF0gPSAxOyAvLzEgZm9yIENXQyBzYWxlOyAyIGZvciBDV0MgcmV0dXJuCiAgICAgICAgICAgIHdhaXRpbmdCdXllcltxdWVyeUlkXSA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIHdlaVBhaWRbcXVlcnlJZF0gPSBtc2cudmFsdWU7CiAgICAgICAgICAgIHJlY2VpdmVkV2VpKHdhaXRpbmdCdXllcltxdWVyeUlkXSwgd2VpUGFpZFtxdWVyeUlkXSk7CiAgICAgICAgICAgIG5ld1RpY2tlclF1ZXJ5KCJDYWxsZWQgT3JhY2xpemUgZm9yIENXQyBzYWxlLiBXYWl0aW5n4oCmIiwgcXVlcnlJZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ1dDIFJldHVybiBUcmFuc2FjdGlvbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly8KCiAgICBmdW5jdGlvbiBDV0NyZXR1cm5UcmFuc2FjdGlvbihhZGRyZXNzIGZyb20sIHVpbnQgYW1vdW50KSBwcml2YXRlIHsKICAgICAgICByZXF1aXJlKHZlcmlmaWVkVXNlcnNPbmx5TW9kZT09ZmFsc2UgfHwgdmVyaWZpZWRVc2Vyc1tmcm9tXT09dHJ1ZSk7CiAgICAgICAgcmVxdWlyZSghcGF1c2VDV0MpOwogICAgICAgIHJlcXVpcmUoYW1vdW50Pm1pbkNXQ3NQZXJSZXR1cm5Nb3JlVGhhbiAmJiBhbW91bnQ8bWF4Q1dDc1BlclJldHVybkxlc3NUaGFuKTsKICAgICAgICAKICAgICAgICBpZiAob3JhY2xpemVfZ2V0UHJpY2UoIlVSTCIpID4gdGhpcy5iYWxhbmNlKSB7CiAgICAgICAgICAgIG5lZWRzRXRoZXIoIk9yYWNsaXplIHF1ZXJ5IGZvciBDV0MgcmV0dXJuIHdhcyBOT1Qgc2VudCwgcGxlYXNlIGFkZCBzb21lIEVUSCB0byBjb3ZlciBmb3IgdGhlIHF1ZXJ5IGZlZSIpOwogICAgICAgICAgICBwYXVzZUNXQz10cnVlOwogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9IAogICAgICAgIGVsc2UgewogICAgICAgICAgICAvL0V4cGVjdGF0aW9uOiBDV0NfU2FsZSBmb3IgQXNrIChhKSBhbmQgQ1dDX1JldHVybiBmb3IgQmlkIChiKQogICAgICAgICAgICB0aWNrZXJRdWVyeURhdGEgPSBzdHJDb25jYXQoIjEsIiwgIkNXQywiLCAiMHgiLCBhZGRyZXNzVG9Bc2NpaVN0cmluZyhmcm9tKSwgIiwiKTsKICAgICAgICAgICAgdGlja2VyUXVlcnlEYXRhID0gc3RyQ29uY2F0KHRpY2tlclF1ZXJ5RGF0YSwgdWludDJzdHIoYW1vdW50KSk7CiAgICAgICAgICAgIGJ5dGVzMzIgcXVlcnlJZCA9IG9yYWNsaXplX3F1ZXJ5KCJVUkwiLCB0aWNrZXJRdWVyeSwgdGlja2VyUXVlcnlEYXRhKTsKICAgICAgICAgICAgdGlja2VyUXVlcnlJZHNbcXVlcnlJZF0gPSB0cnVlOwogICAgICAgICAgICB0aWNrZXJRdWVyeVB1cnBvc2VbcXVlcnlJZF0gPSAyOyAvLzEgZm9yIENXQyBzYWxlOyAyIGZvciBDV0MgcmV0dXJuCiAgICAgICAgICAgIHdhaXRpbmdTZWxsZXJbcXVlcnlJZF0gPSBmcm9tOwogICAgICAgICAgICBjd2NQYWlkW3F1ZXJ5SWRdID0gYW1vdW50OwogICAgICAgICAgICByZWNlaXZlZENXQ3JldHVybih3YWl0aW5nU2VsbGVyW3F1ZXJ5SWRdLCBjd2NQYWlkW3F1ZXJ5SWRdKTsKICAgICAgICAgICAgbmV3VGlja2VyUXVlcnkoIkNhbGxlZCBPcmFjbGl6ZSBmb3IgQ1dDIHJldHVybi4gV2FpdGluZ+KApiIsIHF1ZXJ5SWQpOwogICAgICAgIH0KICAgIH0KCiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT0gT3JjbGl6ZSBfX2NhbGxiYWNrKCkgYW5kIGhlZGdlVHJhbnNhY3Rpb24oKSA9PT09PT09PT09PT09PT09PT09PT09PT09PS8vCgogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQsIGJ5dGVzIHByb29mKSB7CiAgICAgICAgLy8gY2hlY2sgdGhlIHZhbGlkaXR5IG9mIHRoZSBvcmFjbGl6ZSByZXN1bHQKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xpemVfY2JBZGRyZXNzKCkpOwogICAgICAgIAogICAgICAgIC8qKioqKioqIFJlc3VsdCB0byBTYWxlIHRpY2tlclF1ZXJ5ICoqKioqKiovCgogICAgICAgIGlmKHRpY2tlclF1ZXJ5SWRzW215aWRdPT10cnVlICYmIHRpY2tlclF1ZXJ5UHVycG9zZVtteWlkXT09MSkgeyAvL3RpY2tlclF1ZXJ5UHVycG9zZT09MSBpcyBDV0MgU2FsZQogICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHB1YmxpYyBleGNoYW5nZSByYXRlCiAgICAgICAgICAgIGxhc3RDV0NFVEggPSByZXN1bHQ7CiAgICAgICAgICAgIGlmKCFzdHJpbmdFcXVhbChsYXN0Q1dDRVRILCAiZXJyIikgJiYgIXN0cmluZ0VxdWFsKGxhc3RDV0NFVEgsICIiKSkgewogICAgICAgICAgICAgICAgbGFzdFdlaVByaWNlUGVyQ1dDID0gcGFyc2VJbnQobGFzdENXQ0VUSCwxOCk7CiAgICAgICAgICAgICAgICAvLyBHaXZlIENXQ3MgdG8gdGhlIGJ1eWVyCiAgICAgICAgICAgICAgICBuZXdUaWNrZXJRdWVyeVJlc3VsdChyZXN1bHQsIG15aWQpOwogICAgICAgICAgICAgICAgLy8gc2VuZCB0aGUgY29ycmVzcG9uZGluZyBDV0NzIHRvIHRoZSBidXllciAKICAgICAgICAgICAgICAgIHVpbnQgd2VpQWZ0ZXJGZWVzID0gKHdlaVBhaWRbbXlpZF0tZml4ZWRGZWVJbldlaSktKCh3ZWlQYWlkW215aWRdLzEwMDAwKSpwZXJjZW50RmVlVGltZXMxMDApOwogICAgICAgICAgICAgICAgdWludCBudW1PZkNXQ3MgPSAod2VpQWZ0ZXJGZWVzL2xhc3RXZWlQcmljZVBlckNXQyk7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1t3YWl0aW5nQnV5ZXJbbXlpZF1dID0gYmFsYW5jZXNbd2FpdGluZ0J1eWVyW215aWRdXS5hZGQobnVtT2ZDV0NzKTsKICAgICAgICAgICAgICAgIHNvbGRDV0Mod2FpdGluZ0J1eWVyW215aWRdLCBudW1PZkNXQ3MsIG15aWQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgZXJyb3JUaWNrZXJRdWVyeUVycm9yKHJlc3VsdCwgbXlpZCk7CiAgICAgICAgICAgICAgICBwYXVzZUNXQz10cnVlOwogICAgICAgICAgICAgICAgd2FpdGluZ0J1eWVyW215aWRdLnRyYW5zZmVyKHdlaVBhaWRbbXlpZF0pOyAvLyA8PT09PT09IHJldHVybiBhbGwgd2VpCiAgICAgICAgICAgICAgICByZXR1cm5lZFdlaSh3YWl0aW5nQnV5ZXJbbXlpZF0sIHdlaVBhaWRbbXlpZF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKioqKioqIENsZWFuIHVwICoqKioqKiovCiAgICAgICAgICAgIGRlbGV0ZSB0aWNrZXJRdWVyeUlkc1tteWlkXTsKICAgICAgICAgICAgZGVsZXRlIHRpY2tlclF1ZXJ5UHVycG9zZVtteWlkXTsKICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdCdXllcltteWlkXTsKICAgICAgICAgICAgZGVsZXRlIHdlaVBhaWRbbXlpZF07CiAgICAgICAgfQoKICAgICAgICAvKioqKioqKiBSZXN1bHQgdG8gQ1dDcmV0dXJuIHRpY2tlclF1ZXJ5ICoqKioqKiovCgogICAgICAgIGVsc2UgaWYodGlja2VyUXVlcnlJZHNbbXlpZF09PXRydWUgJiYgdGlja2VyUXVlcnlQdXJwb3NlW215aWRdPT0yKSB7IC8vdGlja2VyUXVlcnlQdXJwb3NlPT0yIGlzIENXQyBTYWxlCiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcHVibGljIGV4Y2hhbmdlIHJhdGUKICAgICAgICAgICAgbGFzdENXQ0VUSCA9IHJlc3VsdDsKICAgICAgICAgICAgaWYoIXN0cmluZ0VxdWFsKGxhc3RDV0NFVEgsICJlcnIiKSAmJiAhc3RyaW5nRXF1YWwobGFzdENXQ0VUSCwgIiIpKSB7CiAgICAgICAgICAgICAgICBsYXN0V2VpUHJpY2VQZXJDV0MgPSBwYXJzZUludChsYXN0Q1dDRVRILDE4KTsKICAgICAgICAgICAgICAgIG5ld1RpY2tlclF1ZXJ5UmVzdWx0KHJlc3VsdCwgbXlpZCk7IC8vVGhlIEhUVFAgc2VydmUgcGF5cyBldGhlciB0byB0aGUgY2xpZW50CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBlcnJvclRpY2tlclF1ZXJ5RXJyb3IocmVzdWx0LCBteWlkKTsKICAgICAgICAgICAgICAgIHBhdXNlQ1dDPXRydWU7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1t3YWl0aW5nU2VsbGVyW215aWRdXSA9IGJhbGFuY2VzW3dhaXRpbmdTZWxsZXJbbXlpZF1dLmFkZChjd2NQYWlkW215aWRdKTsgLy8gPD09PT09IHJldHVybiBhbGwgQ1dDcwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKioqKioqIENsZWFuIHVwICoqKioqKiovCiAgICAgICAgICAgIGRlbGV0ZSB0aWNrZXJRdWVyeUlkc1tteWlkXTsKICAgICAgICAgICAgZGVsZXRlIHRpY2tlclF1ZXJ5UHVycG9zZVtteWlkXTsKICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdTZWxsZXJbbXlpZF07CiAgICAgICAgICAgIGRlbGV0ZSBjd2NQYWlkW215aWRdOyAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLyoqKioqKiogVHJhbnNmZXIgb2YgZXRoZXIgdG8gdGhlIEVUSCBIZWRnZSBXYWxsZXQgKioqKioqKi8KICAgICAgICBpZih0aGlzLmJhbGFuY2UgPiAobWluRmlubmV5VG9LZWVwKjEwKioxNSkrKG1pbkZpbm5leVBlckhlZGdlVHJhbnNmZXIqMTAqKjE1KSkgewogICAgICAgICAgICB1aW50IGhlZGdlVHJhbnNmZXJBbW91bnRJbldlaSA9IHRoaXMuYmFsYW5jZSAtIChtaW5GaW5uZXlUb0tlZXAqMTAqKjE1KTsKICAgICAgICAgICAgaGVkZ2VBZGRyZXNzLnRyYW5zZmVyKGhlZGdlVHJhbnNmZXJBbW91bnRJbldlaSk7IC8vVHJhbnNmZXIgdG8gdGhlIGhlZGdlIGFkZHJlc3MKICAgICAgICB9CiAgICAgICAgCiAgICB9CgogICAgLy9Db250ZW1wbGF0ZSByZW1vdmluZyBpbiB0aGUgcHJvZHVjdGlvbiB2ZXJzaW9uCiAgICBmdW5jdGlvbiBwZXJmb3JtX3NlbGZkZXN0cnVjdCh1aW50IFR5cGVfMV9pZl9zdXJlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBpZihUeXBlXzFfaWZfc3VyZT09MSkgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
