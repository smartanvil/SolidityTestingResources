Class {
	#name : #SRT36219ff5b12c1e062c1746dec6125348c75bb652,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36219ff5b12c1e062c1746dec6125348c75bb652 >> base64 [
	^ ''.
	

]
