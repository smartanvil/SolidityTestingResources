Class {
	#name : #SRT88b9E2b80e573Fc9d44ebE96109b5FB4032A3258,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88b9E2b80e573Fc9d44ebE96109b5FB4032A3258 >> base64 [
	^ ''.
	

]
