Class {
	#name : #SRTe477292f1b3268687a29376116b0ed27a9c76170,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe477292f1b3268687a29376116b0ed27a9c76170 >> base64 [
	^ ''.
	

]
