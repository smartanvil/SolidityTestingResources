Class {
	#name : #SRT7f2a6fb65bcb31c56872d6e9bf48016292d7e198,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f2a6fb65bcb31c56872d6e9bf48016292d7e198 >> base64 [
	^ 'Ly9wYXJhbXMgKGZlZSBzZXQgdG8gMCBzbyBpdCdzIGZyZWUpOgovLyAgWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTVdLCAiTUogY29tZWJhY2siLCAxNjAzMTUyMDAwLCAiMjEvMTAvMjAyMCIsICJNR00gZ3JhbmQiLCAiTUpDIiwgMTAwMAovLyAiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTZhNjA3NWE3MTcwMDAyIiwgMjcsICIweEUyNkQ5MzA1MzNDRjVFMzYwNTFDNTc2RTE5ODhEMDk2NzI3RjI4QTRBQjYzOERCRTc3MjlCQ0MwNjdCRDA2QzgiLCAiMHg3NkVCQUE2NEE1NDFEMURFMDU0RjRCNjNCNTg2RTdGRUI0ODVDMUIzRTg1RUE0NjNGODczQ0E2OTMwN0VFRUFBIgoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CmNvbnRyYWN0IFRpY2tldFBybwp7CiAgICB1aW50IHRvdGFsVGlja2V0czsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MTZbXSkgaW52ZW50b3J5OwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHNwZW50OwogICAgdWludDE2IHRpY2tldEluZGV4ID0gMDsgLy90byB0cmFjayBtYXBwaW5nIGluIHRpY2tldHMKICAgIHVpbnQgZXhwaXJ5VGltZVN0YW1wOwogICAgYWRkcmVzcyBvcmdhbmlzZXI7CiAgICB1aW50IHRyYW5zZmVyRmVlOwogICAgdWludCBudW1PZlRyYW5zZmVycyA9IDA7CiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHN0cmluZyBwdWJsaWMgZGF0ZTsKICAgIHN0cmluZyBwdWJsaWMgdmVudWU7CiAgICB1aW50IHN0YXJ0UHJpY2U7CiAgICB1aW50IHRpY2tldExpbWl0OwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMDsgLy9ubyBkZWNpbWFscyBhcyB0aWNrZXRzIGNhbm5vdCBiZSBzcGxpdAoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgVHJhbnNmZXJGcm9tKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwoKICAgIG1vZGlmaWVyIGV2ZW50Tm90RXhwaXJlZCgpCiAgICB7CiAgICAgICAgLy9ub3QgcGVyZmVjdCBidXQgcHJvYmFibHkgZ29vZCBlbm91Z2gKICAgICAgICBpZihibG9jay50aW1lc3RhbXAgPiBleHBpcnlUaW1lU3RhbXApCiAgICAgICAgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9yZ2FuaXNlck9ubHkoKQogICAgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gb3JnYW5pc2VyKSByZXZlcnQoKTsKICAgICAgICBlbHNlIF87CiAgICB9CgogICAgZnVuY3Rpb24oKSBwdWJsaWMgeyByZXZlcnQoKTsgfSAvL3Nob3VsZCBub3Qgc2VuZCBhbnkgZXRoZXIgZGlyZWN0bHkKCiAgICBmdW5jdGlvbiBUaWNrZXRQcm8oCiAgICAgICAgdWludDE2W10gbnVtYmVyT2ZUaWNrZXRzLAogICAgICAgIHN0cmluZyBldk5hbWUsCiAgICAgICAgdWludCBleHBpcnksCiAgICAgICAgc3RyaW5nIGV2RGF0ZSwKICAgICAgICBzdHJpbmcgZXZWZW51ZSwKICAgICAgICBzdHJpbmcgZXZlbnRTeW1ib2wsCiAgICAgICAgdWludCBzdGFydFRpY2tldExpbWl0KSBwdWJsaWMKICAgIHsKICAgICAgICB0b3RhbFRpY2tldHMgPSBudW1iZXJPZlRpY2tldHMubGVuZ3RoOwogICAgICAgIC8vYXNzaWduIHNvbWUgdGlja2V0cyB0byBldmVudCBvcmdhbmlzZXIKICAgICAgICBpbnZlbnRvcnlbbXNnLnNlbmRlcl0gPSBudW1iZXJPZlRpY2tldHM7CiAgICAgICAgZXhwaXJ5VGltZVN0YW1wID0gZXhwaXJ5OwogICAgICAgIG9yZ2FuaXNlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgc3ltYm9sID0gZXZlbnRTeW1ib2w7CiAgICAgICAgbmFtZSA9IGV2TmFtZTsKICAgICAgICBkYXRlID0gZXZEYXRlOwogICAgICAgIHZlbnVlID0gZXZWZW51ZTsKICAgICAgICB0aWNrZXRMaW1pdCA9IHN0YXJ0VGlja2V0TGltaXQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RGVjaW1hbHMoKSBwdWJsaWMgcHVyZSByZXR1cm5zKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIGRlY2ltYWxzOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE51bWJlck9mQXZhaWxhYmxlU3RhcnRUaWNrZXRzKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXR1cm4gdGlja2V0TGltaXQ7CiAgICB9CgogICAgZnVuY3Rpb24gdWludEFycmF5VG9TdHJpbmcgKHVpbnRbXSBkYXRhKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJ5dGVzU3RyaW5nID0gbmV3IGJ5dGVzKGRhdGEubGVuZ3RoICogMzIpOwogICAgICAgIHVpbnQgdXJsTGVuZ3RoOwogICAgICAgIGZvciAodWludCBpPTA7IGk8ZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBmb3IgKHVpbnQgaj0wOyBqPDMyOyBqKyspIHsKICAgICAgICAgICAgICAgIGJ5dGUgY2hhciA9IGJ5dGUoKGRhdGFbaV0gKiAyICoqICg4ICogaikpKTsKICAgICAgICAgICAgICAgIGlmIChjaGFyICE9IDApIHsKICAgICAgICAgICAgICAgICAgICBieXRlc1N0cmluZ1t1cmxMZW5ndGhdID0gY2hhcjsKICAgICAgICAgICAgICAgICAgICB1cmxMZW5ndGggKz0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBieXRlcyBtZW1vcnkgYnl0ZXNTdHJpbmdUcmltbWVkID0gbmV3IGJ5dGVzKHVybExlbmd0aCk7CiAgICAgICAgZm9yIChpPTA7IGk8dXJsTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYnl0ZXNTdHJpbmdUcmltbWVkW2ldID0gYnl0ZXNTdHJpbmdbaV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJpbmcoYnl0ZXNTdHJpbmdUcmltbWVkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFkZSh1aW50W10gdGlja2V0SW5kaWNlcywKICAgICAgICAgICAgICAgICAgIHVpbnQgcHJpY2VPZkFsbFRpY2tldHMsCiAgICAgICAgICAgICAgICAgICB1aW50OCB2LAogICAgICAgICAgICAgICAgICAgYnl0ZXMzMiByLAogICAgICAgICAgICAgICAgICAgYnl0ZXMzMiBzLAogICAgICAgICAgICAgICAgICAgYnl0ZXMgbWVtb3J5IHByZWZpeCkgcHVibGljIHBheWFibGUKICAgIHsKICAgICAgICBzdHJpbmcgbWVtb3J5IG1lc3NhZ2UgPSB1aW50QXJyYXlUb1N0cmluZyh0aWNrZXRJbmRpY2VzKTsKICAgICAgICBieXRlczMyIGRpZ2VzdCA9IGtlY2NhazI1NihwcmVmaXgsIG1lc3NhZ2UpOwogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gZWNyZWNvdmVyKGRpZ2VzdCwgdiwgciwgcyk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gcHJpY2VPZkFsbFRpY2tldHMpOwogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgdGlja2V0SW5kaWNlcy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgcmVxdWlyZShpbnZlbnRvcnlbc2VsbGVyXVtpXSAhPSAwKTsgLy9zaG91bGQgcmV2ZXJ0IGlmIGFycmF5T3V0T2ZCb3VuZHMKICAgICAgICBmb3IodWludCBqID0gMDsgaiA8IHRpY2tldEluZGljZXMubGVuZ3RoOyBqKyspCiAgICAgICAgewogICAgICAgICAgICBpbnZlbnRvcnlbbXNnLnNlbmRlcl0ucHVzaChpbnZlbnRvcnlbc2VsbGVyXVtqXSk7CiAgICAgICAgICAgIGludmVudG9yeVtzZWxsZXJdW2pdID0gMDsKICAgICAgICAgICAgc3BlbnRbc2VsbGVyXSArPSAxOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHRvdGFsVGlja2V0czsKICAgIH0KCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyhzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIG5hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyhzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIHN5bWJvbDsKICAgIH0KCiAgICBmdW5jdGlvbiBldmVudFZlbnVlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKQogICAgewogICAgICAgIHJldHVybiB2ZW51ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBldmVudERhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QW1vdW50VHJhbnNmZXJyZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBudW1PZlRyYW5zZmVyczsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0NvbnRyYWN0RXhwaXJlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgaWYoYmxvY2sudGltZXN0YW1wID4gZXhwaXJ5VGltZVN0YW1wKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDE2W10pCiAgICB7CiAgICAgICAgcmV0dXJuIGludmVudG9yeVtfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MTZbXSB0aWNrZXRJbmRpY2VzKSBwdWJsaWMKICAgIHsKICAgICAgICAvL29uZSBhcnJheSBlbGVtZW50IGVxdWFscyBvbmUgdGlja2V0CiAgICAgICAgcmVxdWlyZShpbnZlbnRvcnlbbXNnLnNlbmRlcl0ubGVuZ3RoIC0KICAgICAgICAgICAgc3BlbnRbbXNnLnNlbmRlcl0gPCB0aWNrZXRJbmRpY2VzLmxlbmd0aCk7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCB0aWNrZXRJbmRpY2VzLmxlbmd0aDsgaSsrKQogICAgICAgIHsKICAgICAgICAgICAgcmVxdWlyZShpbnZlbnRvcnlbbXNnLnNlbmRlcl1baV0gIT0gMCk7CiAgICAgICAgICAgIC8vcHVzaGVzIGVhY2ggZWxlbWVudCB3aXRoIG9yZGVyaW5nCiAgICAgICAgICAgIGludmVudG9yeVtfdG9dLnB1c2goaW52ZW50b3J5W21zZy5zZW5kZXJdW3RpY2tldEluZGljZXNbaV1dKTsKICAgICAgICAgICAgaW52ZW50b3J5W21zZy5zZW5kZXJdW3RpY2tldEluZGljZXNbaV1dID0gMDsKICAgICAgICAgICAgbnVtT2ZUcmFuc2ZlcnMrKzsKICAgICAgICB9CiAgICAgICAgc3BlbnRbbXNnLnNlbmRlcl0gKz0gdGlja2V0SW5kaWNlcy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MTZbXSB0aWNrZXRJbmRpY2VzKQogICAgICAgIG9yZ2FuaXNlck9ubHkgcHVibGljCiAgICB7CiAgICAgICAgYm9vbCBpc09yZ2FuaXNlciA9IG1zZy5zZW5kZXIgPT0gb3JnYW5pc2VyOwogICAgICAgIC8vb25lIGFycmF5IGVsZW1lbnQgZXF1YWxzIG9uZSB0aWNrZXQKICAgICAgICByZXF1aXJlKGludmVudG9yeVtfZnJvbV0ubGVuZ3RoIC0KICAgICAgICAgICAgc3BlbnRbX2Zyb21dIDwgdGlja2V0SW5kaWNlcy5sZW5ndGggfHwgaXNPcmdhbmlzZXIpOwogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgdGlja2V0SW5kaWNlcy5sZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIHJlcXVpcmUoaW52ZW50b3J5W21zZy5zZW5kZXJdW2ldICE9IDAgfHwgaXNPcmdhbmlzZXIpOwogICAgICAgICAgICAvL3B1c2hlcyBlYWNoIGVsZW1lbnQgd2l0aCBvcmRlcmluZwogICAgICAgICAgICBpbnZlbnRvcnlbX3RvXS5wdXNoKGludmVudG9yeVttc2cuc2VuZGVyXVt0aWNrZXRJbmRpY2VzW2ldXSk7CiAgICAgICAgICAgIGludmVudG9yeVttc2cuc2VuZGVyXVt0aWNrZXRJbmRpY2VzW2ldXSA9IDA7CiAgICAgICAgICAgIG51bU9mVHJhbnNmZXJzKys7CiAgICAgICAgfQogICAgICAgIHNwZW50W19mcm9tXSArPSB0aWNrZXRJbmRpY2VzLmxlbmd0aDsKICAgIH0KCn0='.
	

]
