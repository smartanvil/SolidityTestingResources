Class {
	#name : #SRT27054b13b1b798b345b591a4d22e6562d47ea75a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT27054b13b1b798b345b591a4d22e6562d47ea75a >> base64 [
	^ ''.
	

]
