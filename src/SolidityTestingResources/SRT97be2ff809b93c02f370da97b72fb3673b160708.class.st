Class {
	#name : #SRT97be2ff809b93c02f370da97b72fb3673b160708,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT97be2ff809b93c02f370da97b72fb3673b160708 >> base64 [
	^ ''.
	

]
