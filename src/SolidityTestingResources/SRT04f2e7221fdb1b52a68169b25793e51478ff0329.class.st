Class {
	#name : #SRT04f2e7221fdb1b52a68169b25793e51478ff0329,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT04f2e7221fdb1b52a68169b25793e51478ff0329 >> base64 [
	^ ''.
	

]
