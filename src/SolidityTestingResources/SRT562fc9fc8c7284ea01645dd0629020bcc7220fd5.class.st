Class {
	#name : #SRT562fc9fc8c7284ea01645dd0629020bcc7220fd5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT562fc9fc8c7284ea01645dd0629020bcc7220fd5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBEU01hdGggewogICAgZnVuY3Rpb24gYWRkKHVpbnQgeCwgdWludCB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeikgewogICAgICAgIHJlcXVpcmUoKHogPSB4ICsgeSkgPj0geCk7CiAgICB9CiAgICBmdW5jdGlvbiBzdWIodWludCB4LCB1aW50IHkpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCB6KSB7CiAgICAgICAgcmVxdWlyZSgoeiA9IHggLSB5KSA8PSB4KTsKICAgIH0KICAgIGZ1bmN0aW9uIG11bCh1aW50IHgsIHVpbnQgeSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IHopIHsKICAgICAgICByZXF1aXJlKHkgPT0gMCB8fCAoeiA9IHggKiB5KSAvIHkgPT0geCk7CiAgICB9CgogICAgZnVuY3Rpb24gbWluKHVpbnQgeCwgdWludCB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIG1heCh1aW50IHgsIHVpbnQgeSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IHopIHsKICAgICAgICByZXR1cm4geCA+PSB5ID8geCA6IHk7CiAgICB9CiAgICBmdW5jdGlvbiBpbWluKGludCB4LCBpbnQgeSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChpbnQgeikgewogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsKICAgIH0KICAgIGZ1bmN0aW9uIGltYXgoaW50IHgsIGludCB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKGludCB6KSB7CiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5OwogICAgfQoKICAgIHVpbnQgY29uc3RhbnQgV0FEID0gMTAgKiogMTg7CiAgICB1aW50IGNvbnN0YW50IFJBWSA9IDEwICoqIDI3OwoKICAgIGZ1bmN0aW9uIHdtdWwodWludCB4LCB1aW50IHkpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCB6KSB7CiAgICAgICAgeiA9IGFkZChtdWwoeCwgeSksIFdBRCAvIDIpIC8gV0FEOwogICAgfQogICAgZnVuY3Rpb24gcm11bCh1aW50IHgsIHVpbnQgeSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IHopIHsKICAgICAgICB6ID0gYWRkKG11bCh4LCB5KSwgUkFZIC8gMikgLyBSQVk7CiAgICB9CiAgICBmdW5jdGlvbiB3ZGl2KHVpbnQgeCwgdWludCB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeikgewogICAgICAgIHogPSBhZGQobXVsKHgsIFdBRCksIHkgLyAyKSAvIHk7CiAgICB9CiAgICBmdW5jdGlvbiByZGl2KHVpbnQgeCwgdWludCB5KSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeikgewogICAgICAgIHogPSBhZGQobXVsKHgsIFJBWSksIHkgLyAyKSAvIHk7CiAgICB9CgogICAgLy8gVGhpcyBmYW1vdXMgYWxnb3JpdGhtIGlzIGNhbGxlZCAiZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmciCiAgICAvLyBhbmQgY2FsY3VsYXRlcyB4Xm4gd2l0aCB4IGFzIGZpeGVkLXBvaW50IGFuZCBuIGFzIHJlZ3VsYXIgdW5zaWduZWQuCiAgICAvLwogICAgLy8gSXQncyBPKGxvZyBuKSwgaW5zdGVhZCBvZiBPKG4pIGZvciBuYWl2ZSByZXBlYXRlZCBtdWx0aXBsaWNhdGlvbi4KICAgIC8vCiAgICAvLyBUaGVzZSBmYWN0cyBhcmUgd2h5IGl0IHdvcmtzOgogICAgLy8KICAgIC8vICBJZiBuIGlzIGV2ZW4sIHRoZW4geF5uID0gKHheMileKG4vMikuCiAgICAvLyAgSWYgbiBpcyBvZGQsICB0aGVuIHhebiA9IHggKiB4XihuLTEpLAogICAgLy8gICBhbmQgYXBwbHlpbmcgdGhlIGVxdWF0aW9uIGZvciBldmVuIHggZ2l2ZXMKICAgIC8vICAgIHhebiA9IHggKiAoeF4yKV4oKG4tMSkgLyAyKS4KICAgIC8vCiAgICAvLyAgQWxzbywgRVZNIGRpdmlzaW9uIGlzIGZsb29yaW5nIGFuZAogICAgLy8gICAgZmxvb3JbKG4tMSkgLyAyXSA9IGZsb29yW24gLyAyXS4KICAgIC8vCiAgICBmdW5jdGlvbiBycG93KHVpbnQgeCwgdWludCBuKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQgeikgewogICAgICAgIHogPSBuICUgMiAhPSAwID8geCA6IFJBWTsKCiAgICAgICAgZm9yIChuIC89IDI7IG4gIT0gMDsgbiAvPSAyKSB7CiAgICAgICAgICAgIHggPSBybXVsKHgsIHgpOwoKICAgICAgICAgICAgaWYgKG4gJSAyICE9IDApIHsKICAgICAgICAgICAgICAgIHogPSBybXVsKHosIHgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgppbnRlcmZhY2UgQXNzZXRJbnRlcmZhY2UgewogICAgLyoKICAgICAqIEltcGxlbWVudHMgRVJDIDIwIHN0YW5kYXJkLgogICAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9mOTA4NjRhM2QyYjJiNDVjNGRlY2Y5NWVmZDI2YjNmMGMyNzYwNTFhL0VJUFMvZWlwLTIwLXRva2VuLXN0YW5kYXJkLm1kCiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICAgICAqCiAgICAgKiAgQWRkZWQgc3VwcG9ydCBmb3IgdGhlIEVSQyAyMjMgInRva2VuRmFsbGJhY2siIG1ldGhvZCBpbiBhICJ0cmFuc2ZlciIgZnVuY3Rpb24gd2l0aCBhIHBheWxvYWQuCiAgICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIyMwogICAgICovCgogICAgLy8gRXZlbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOwoKICAgIC8vIFRoZXJlIGlzIG5vIEVSQzIyMyBjb21wYXRpYmxlIFRyYW5zZmVyIGV2ZW50LCB3aXRoIGBfZGF0YWAgaW5jbHVkZWQuCgogICAgLy9FUkMgMjIzCiAgICAvLyBQVUJMSUMgTUVUSE9EUwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8gRVJDIDIwCiAgICAvLyBQVUJMSUMgTUVUSE9EUwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICAvLyBQVUJMSUMgVklFVyBNRVRIT0RTCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKTsKfQoKaW50ZXJmYWNlIEVSQzIyM0ludGVyZmFjZSB7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKSByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpOwp9Cgpjb250cmFjdCBBc3NldCBpcyBEU01hdGgsIEFzc2V0SW50ZXJmYWNlLCBFUkMyMjNJbnRlcmZhY2UgewoKICAgIC8vIERBVEEgU1RSVUNUVVJFUwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLyBQVUJMSUMgTUVUSE9EUwoKICAgIC8qKgogICAgICogQG5vdGljZSBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgICogQGRldiBUcmFuc2ZlcnMgc2VuZGVyJ3MgdG9rZW5zIHRvIGEgZ2l2ZW4gYWRkcmVzcwogICAgICogQGRldiBTaW1pbGFyIHRvIHRyYW5zZmVyKGFkZHJlc3MsIHVpbnQsIGJ5dGVzKSwgYnV0IHdpdGhvdXQgX2RhdGEgcGFyYW1ldGVyCiAgICAgKiBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIKICAgICAqIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlcgogICAgICogQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIHVpbnQgY29kZUxlbmd0aDsKICAgICAgICBieXRlcyBtZW1vcnkgZW1wdHk7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy8gUmV0cmlldmUgdGhlIHNpemUgb2YgdGhlIGNvZGUgb24gdGFyZ2V0IGFkZHJlc3MsIHRoaXMgbmVlZHMgYXNzZW1ibHkuCiAgICAgICAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUoX3RvKQogICAgICAgIH0KIAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgLy8gc2FuaXR5IGNoZWNrcwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgIC8vIGlmIChjb2RlTGVuZ3RoID4gMCkgewogICAgICAgIC8vICAgICBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCByZWNlaXZlciA9IEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0KF90byk7CiAgICAgICAgLy8gICAgIHJlY2VpdmVyLnRva2VuRmFsbGJhY2sobXNnLnNlbmRlciwgX3ZhbHVlLCBlbXB0eSk7CiAgICAgICAgLy8gfQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBlbXB0eSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAbm90aWNlIFNlbmQgYF92YWx1ZWAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgIGFuZCB0cmlnZ2VyIHRva2VuRmFsbGJhY2sgaWYgc2VuZGVyIGlzIGEgY29udHJhY3QKICAgICAqIEBkZXYgRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIHVzZXIgb3IgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMKICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiByZWNlaXZlcgogICAgICogQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCiAgICAgKiBAcGFyYW0gX2RhdGEgRGF0YSB0byBiZSBzZW50IHRvIHRva2VuRmFsbGJhY2sKICAgICAqIEByZXR1cm4gUmV0dXJucyBzdWNjZXNzIG9mIGZ1bmN0aW9uIGNhbGwKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgdWludCBjb2RlTGVuZ3RoOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5LgogICAgICAgICAgICBjb2RlTGVuZ3RoIDo9IGV4dGNvZGVzaXplKF90bykKICAgICAgICB9CgogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsgLy8gc2FuaXR5IGNoZWNrcwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICAgIC8vIGlmIChjb2RlTGVuZ3RoID4gMCkgewogICAgICAgIC8vICAgICBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCByZWNlaXZlciA9IEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0KF90byk7CiAgICAgICAgLy8gICAgIHJlY2VpdmVyLnRva2VuRmFsbGJhY2sobXNnLnNlbmRlciwgX3ZhbHVlLCBfZGF0YSk7CiAgICAgICAgLy8gfQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUcmFuc2ZlciBgX3ZhbHVlYCB0b2tlbnMgZnJvbSBgX2Zyb21gIHRvIGBfdG9gIGlmIGBtc2cuc2VuZGVyYCBpcyBhbGxvd2VkLgogICAgLy8vIEBub3RpY2UgUmVzdHJpY3Rpb246IEFuIGFjY291bnQgY2FuIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gdG8gc2VuZCB0byBpdHNlbGYKICAgIC8vLyBAZGV2IEFsbG93cyBmb3IgYW4gYXBwcm92ZWQgdGhpcmQgcGFydHkgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gb25lCiAgICAvLy8gYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAvLy8gQHBhcmFtIF9mcm9tIEFkZHJlc3MgZnJvbSB3aGVyZSB0b2tlbnMgYXJlIHdpdGhkcmF3bi4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gd2hlcmUgdG9rZW5zIGFyZSBzZW50LgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgc3VjY2VzcyBvZiBmdW5jdGlvbiBjYWxsLgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJlcXVpcmUoX2Zyb20gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlc1tfdG9dKTsKICAgICAgICAvLyByZXF1aXJlKF90byA9PSBtc2cuc2VuZGVyKTsgLy8gY2FuIG9ubHkgdXNlIHRyYW5zZmVyRnJvbSB0byBzZW5kIHRvIHNlbGYKCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CgogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIGBfc3BlbmRlcmAgdG8gdHJhbnNmZXIgYF92YWx1ZWAgdG9rZW5zIGZyb20gYG1zZy5zZW5kZXJgIHRvIGFueSBhZGRyZXNzLgogICAgLy8vIEBkZXYgU2V0cyBhcHByb3ZlZCBhbW91bnQgb2YgdG9rZW5zIGZvciBzcGVuZGVyLiBSZXR1cm5zIHN1Y2Nlc3MuCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgYWxsb3dlZCBhY2NvdW50LgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIGFwcHJvdmVkIHRva2Vucy4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgc3VjY2VzcyBvZiBmdW5jdGlvbiBjYWxsLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF9zcGVuZGVyICE9IDB4MCk7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICAvLyByZXF1aXJlKF92YWx1ZSA9PSAwIHx8IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLyBQVUJMSUMgVklFVyBNRVRIT0RTCgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgYWxsb3dlZCB0b2tlbnMgdGhhdCBhIHNwZW5kZXIgY2FuIHRyYW5zZmVyIG9uCiAgICAvLy8gYmVoYWxmIG9mIGEgdG9rZW4gb3duZXIuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIHNwZW5kZXIuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHJlbWFpbmluZyBhbGxvd2FuY2UgZm9yIHNwZW5kZXIuCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpCiAgICAgICAgY29uc3RhbnQKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSB0aGUgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIGJhbGFuY2Ugb2Ygb3duZXIuCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9Cgp9CgppbnRlcmZhY2UgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgewoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB1c2VyIG9yIGFub3RoZXIgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMuCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRyYW5zYWN0aW9uIGluaXRpYXRvciwgYW5hbG9ndWUgb2YgbXNnLnNlbmRlcgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIC8vLyBAcGFyYW0gX2RhdGEgRGF0YSBjb250YWluaW5nIGEgZnVuY3Rpb24gc2lnbmF0dXJlIGFuZC9vciBwYXJhbWV0ZXJzCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljOwp9CgppbnRlcmZhY2UgUmlza01nbXRJbnRlcmZhY2UgewoKICAgIC8vIE1FVEhPRFMKICAgIC8vIFBVQkxJQyBWSUVXIE1FVEhPRFMKCiAgICAvLy8gQG5vdGljZSBDaGVja3MgaWYgdGhlIG1ha2VPcmRlciBwcmljZSBpcyByZWFzb25hYmxlIGFuZCBub3QgbWFuaXB1bGF0aXZlCiAgICAvLy8gQHBhcmFtIG9yZGVyUHJpY2UgUHJpY2Ugb2YgT3JkZXIKICAgIC8vLyBAcGFyYW0gcmVmZXJlbmNlUHJpY2UgUmVmZXJlbmNlIHByaWNlIG9idGFpbmVkIHRocm91Z2ggUHJpY2VGZWVkIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIHNlbGxBc3NldCBBc3NldCAoYXMgcmVnaXN0ZXJlZCBpbiBBc3NldCByZWdpc3RyYXIpIHRvIGJlIHNvbGQKICAgIC8vLyBAcGFyYW0gYnV5QXNzZXQgQXNzZXQgKGFzIHJlZ2lzdGVyZWQgaW4gQXNzZXQgcmVnaXN0cmFyKSB0byBiZSBib3VnaHQKICAgIC8vLyBAcGFyYW0gc2VsbFF1YW50aXR5IFF1YW50aXR5IG9mIHNlbGxBc3NldCB0byBiZSBzb2xkCiAgICAvLy8gQHBhcmFtIGJ1eVF1YW50aXR5IFF1YW50aXR5IG9mIGJ1eUFzc2V0IHRvIGJlIGJvdWdodAogICAgLy8vIEByZXR1cm4gSWYgbWFrZU9yZGVyIGlzIHBlcm1pdHRlZAogICAgZnVuY3Rpb24gaXNNYWtlUGVybWl0dGVkKAogICAgICAgIHVpbnQgb3JkZXJQcmljZSwKICAgICAgICB1aW50IHJlZmVyZW5jZVByaWNlLAogICAgICAgIGFkZHJlc3Mgc2VsbEFzc2V0LAogICAgICAgIGFkZHJlc3MgYnV5QXNzZXQsCiAgICAgICAgdWludCBzZWxsUXVhbnRpdHksCiAgICAgICAgdWludCBidXlRdWFudGl0eQogICAgKSB2aWV3IHJldHVybnMgKGJvb2wpOwoKICAgIC8vLyBAbm90aWNlIENoZWNrcyBpZiB0aGUgdGFrZU9yZGVyIHByaWNlIGlzIHJlYXNvbmFibGUgYW5kIG5vdCBtYW5pcHVsYXRpdmUKICAgIC8vLyBAcGFyYW0gb3JkZXJQcmljZSBQcmljZSBvZiBPcmRlcgogICAgLy8vIEBwYXJhbSByZWZlcmVuY2VQcmljZSBSZWZlcmVuY2UgcHJpY2Ugb2J0YWluZWQgdGhyb3VnaCBQcmljZUZlZWQgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gc2VsbEFzc2V0IEFzc2V0IChhcyByZWdpc3RlcmVkIGluIEFzc2V0IHJlZ2lzdHJhcikgdG8gYmUgc29sZAogICAgLy8vIEBwYXJhbSBidXlBc3NldCBBc3NldCAoYXMgcmVnaXN0ZXJlZCBpbiBBc3NldCByZWdpc3RyYXIpIHRvIGJlIGJvdWdodAogICAgLy8vIEBwYXJhbSBzZWxsUXVhbnRpdHkgUXVhbnRpdHkgb2Ygc2VsbEFzc2V0IHRvIGJlIHNvbGQKICAgIC8vLyBAcGFyYW0gYnV5UXVhbnRpdHkgUXVhbnRpdHkgb2YgYnV5QXNzZXQgdG8gYmUgYm91Z2h0CiAgICAvLy8gQHJldHVybiBJZiB0YWtlT3JkZXIgaXMgcGVybWl0dGVkCiAgICBmdW5jdGlvbiBpc1Rha2VQZXJtaXR0ZWQoCiAgICAgICAgdWludCBvcmRlclByaWNlLAogICAgICAgIHVpbnQgcmVmZXJlbmNlUHJpY2UsCiAgICAgICAgYWRkcmVzcyBzZWxsQXNzZXQsCiAgICAgICAgYWRkcmVzcyBidXlBc3NldCwKICAgICAgICB1aW50IHNlbGxRdWFudGl0eSwKICAgICAgICB1aW50IGJ1eVF1YW50aXR5CiAgICApIHZpZXcgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IFJNTWFrZU9yZGVycyBpcyBEU01hdGgsIFJpc2tNZ210SW50ZXJmYWNlIHsKCiAgICAvLyBGSUVMRFMKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBSSVNLX0xFVkVMID0gMTAgKiogdWludDI1NigxNyk7IC8vIEFsbG93cyAxMCBwZXJjZW50IGRldmlhdGlvbiBmcm9tIHJlZmVyZW5jZVByaWNlOyAxMCBwZXJjZW50IGlzIGV4cHJlc3NlZCBhcyAwLjEgKiAxMCAqKiAxOAoKICAgIC8vIFBVQkxJQyBWSUVXIE1FVEhPRFMKCiAgICAvLy8gQG5vdGljZSBDaGVja3MgaWYgdGhlIG1ha2VPcmRlciBwcmljZSBpcyB3aXRoaW4gbWF4aW11bSBhbGxvd2VkIGRldmlhdGlvbiBmcm9tIHJlZmVyZW5jZSBwcmljZQogICAgLy8vIEBwYXJhbSBvcmRlclByaWNlIFByaWNlIG9mIE9yZGVyCiAgICAvLy8gQHBhcmFtIHJlZmVyZW5jZVByaWNlIFJlZmVyZW5jZSBwcmljZSBvYnRhaW5lZCB0aHJvdWdoIFByaWNlRmVlZCBjb250cmFjdAogICAgLy8vIEBwYXJhbSBzZWxsQXNzZXQgQXNzZXQgKGFzIHJlZ2lzdGVyZWQgaW4gQXNzZXQgcmVnaXN0cmFyKSB0byBiZSBzb2xkCiAgICAvLy8gQHBhcmFtIGJ1eUFzc2V0IEFzc2V0IChhcyByZWdpc3RlcmVkIGluIEFzc2V0IHJlZ2lzdHJhcikgdG8gYmUgYm91Z2h0CiAgICAvLy8gQHBhcmFtIHNlbGxRdWFudGl0eSBRdWFudGl0eSBvZiBzZWxsQXNzZXQgdG8gYmUgc29sZAogICAgLy8vIEBwYXJhbSBidXlRdWFudGl0eSBRdWFudGl0eSBvZiBidXlBc3NldCB0byBiZSBib3VnaHQKICAgIC8vLyBAcmV0dXJuIElmIG1ha2VPcmRlciBpcyBwZXJtaXR0ZWQKICAgIGZ1bmN0aW9uIGlzTWFrZVBlcm1pdHRlZCgKICAgICAgICB1aW50IG9yZGVyUHJpY2UsCiAgICAgICAgdWludCByZWZlcmVuY2VQcmljZSwKICAgICAgICBhZGRyZXNzIHNlbGxBc3NldCwKICAgICAgICBhZGRyZXNzIGJ1eUFzc2V0LAogICAgICAgIHVpbnQgc2VsbFF1YW50aXR5LAogICAgICAgIHVpbnQgYnV5UXVhbnRpdHkKICAgICkKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICAvLyBNYWtlcyBzdXJlIGRpZmZlcmVuY2UgYmV0d2VlbiBvcmRlclByaWNlIGFuZCByZWZlcmVuY2VQcmljZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4aW11bSBhbGxvd2VkIGRldmlhdGlvbgogICAgICAgIGlmIChvcmRlclByaWNlIDwgc3ViKHJlZmVyZW5jZVByaWNlLCB3bXVsKFJJU0tfTEVWRUwsIHJlZmVyZW5jZVByaWNlKSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDaGVja3MgaWYgdGhlIHRha2VPcmRlciBwcmljZSBpcyB3aXRoaW4gbWF4aW11bSBhbGxvd2VkIGRldmlhdGlvbiBmcm9tIHJlZmVyZW5jZSBwcmljZQogICAgLy8vIEBwYXJhbSBvcmRlclByaWNlIFByaWNlIG9mIE9yZGVyCiAgICAvLy8gQHBhcmFtIHJlZmVyZW5jZVByaWNlIFJlZmVyZW5jZSBwcmljZSBvYnRhaW5lZCB0aHJvdWdoIFByaWNlRmVlZCBjb250cmFjdAogICAgLy8vIEBwYXJhbSBzZWxsQXNzZXQgQXNzZXQgKGFzIHJlZ2lzdGVyZWQgaW4gQXNzZXQgcmVnaXN0cmFyKSB0byBiZSBzb2xkCiAgICAvLy8gQHBhcmFtIGJ1eUFzc2V0IEFzc2V0IChhcyByZWdpc3RlcmVkIGluIEFzc2V0IHJlZ2lzdHJhcikgdG8gYmUgYm91Z2h0CiAgICAvLy8gQHBhcmFtIHNlbGxRdWFudGl0eSBRdWFudGl0eSBvZiBzZWxsQXNzZXQgdG8gYmUgc29sZAogICAgLy8vIEBwYXJhbSBidXlRdWFudGl0eSBRdWFudGl0eSBvZiBidXlBc3NldCB0byBiZSBib3VnaHQKICAgIC8vLyBAcmV0dXJuIElmIHRha2VPcmRlciBpcyBwZXJtaXR0ZWQKICAgIGZ1bmN0aW9uIGlzVGFrZVBlcm1pdHRlZCgKICAgICAgICB1aW50IG9yZGVyUHJpY2UsCiAgICAgICAgdWludCByZWZlcmVuY2VQcmljZSwKICAgICAgICBhZGRyZXNzIHNlbGxBc3NldCwKICAgICAgICBhZGRyZXNzIGJ1eUFzc2V0LAogICAgICAgIHVpbnQgc2VsbFF1YW50aXR5LAogICAgICAgIHVpbnQgYnV5UXVhbnRpdHkKICAgICkKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICAvLyBNYWtlcyBzdXJlIGRpZmZlcmVuY2UgYmV0d2VlbiBvcmRlclByaWNlIGFuZCByZWZlcmVuY2VQcmljZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4aW11bSBhbGxvd2VkIGRldmlhdGlvbgogICAgICAgIGlmIChvcmRlclByaWNlIDwgc3ViKHJlZmVyZW5jZVByaWNlLCB3bXVsKFJJU0tfTEVWRUwsIHJlZmVyZW5jZVByaWNlKSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQ=='.
	

]
