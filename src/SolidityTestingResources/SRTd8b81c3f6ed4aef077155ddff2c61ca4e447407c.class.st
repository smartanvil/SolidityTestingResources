Class {
	#name : #SRTd8b81c3f6ed4aef077155ddff2c61ca4e447407c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd8b81c3f6ed4aef077155ddff2c61ca4e447407c >> base64 [
	^ ''.
	

]
