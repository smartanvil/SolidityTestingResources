Class {
	#name : #SRTd3e74ac8ecb37649488e6c918452e04e51eccf19,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3e74ac8ecb37649488e6c918452e04e51eccf19 >> base64 [
	^ ''.
	

]
