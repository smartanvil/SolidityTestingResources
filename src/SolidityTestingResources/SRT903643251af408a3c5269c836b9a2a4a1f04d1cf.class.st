Class {
	#name : #SRT903643251af408a3c5269c836b9a2a4a1f04d1cf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT903643251af408a3c5269c836b9a2a4a1f04d1cf >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgU3lzRXNjcm93IHsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGFkZHJlc3MgYXJiaXRyYXRvcjsKCiAgICB1aW50IHB1YmxpYyBNaW5EZXBvc2l0ID0gNjAwMDAwMDAwMDAwMDAwMDAwOyAvLyAwLjYgRXRoZXIKCiAgICB1aW50IGNvbnN0YW50IEFSQklUUkFUT1JfUEVSQ0VOVCA9IDE7IC8vMSUKCiAgICBzdHJ1Y3QgRXNjcm93IHsKICAgICAgICAgICAgLy8gU2V0IHNvIHdlIGtub3cgdGhlIHRyYWRlIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZAogICAgICAgICAgICBib29sIGV4aXN0czsgICAgICAgIAogICAgICAgIAogICAgICAgICAgICBhZGRyZXNzIHNlbGxlcjsKICAgICAgICAgICAgYWRkcmVzcyBidXllcjsKICAgICAgICAgICAgdWludCBzdW1tOwogICAgICAgICAgICB1aW50IGJ1eWVyQ2FuQ2FuY2VsQWZ0ZXI7CiAgICAgICAgICAgIGJvb2wgYnV5ZXJBcHByb3ZlZFRoZVRyYW5zYWN0aW9uOwogICAgICAgICAgICBib29sIGFyYml0cmF0b3JTdG9wVHJhbnNhY3Rpb247CiAgICB9CgogICAgLy8gTWFwcGluZyBvZiBhY3RpdmUgdHJhZGVzLiBLZXkgaXMgYSBoYXNoIG9mIHRoZSB0cmFkZSBkYXRhCiAgICBtYXBwaW5nIChieXRlczMyID0+IEVzY3JvdykgcHVibGljIGVzY3Jvd3M7CgoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICByZXF1aXJlKHR4Lm9yaWdpbiA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCgogICAgZnVuY3Rpb24gU3lzRXNjcm93KCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBhcmJpdHJhdG9yID0gbXNnLnNlbmRlcjsKICAgIH0KCgpmdW5jdGlvbiBjcmVhdGVFc2Nyb3coCiAgICAgIC8qKgogICAgICAgKiBDcmVhdGUgYSBuZXcgZXNjcm93IGFuZCBhZGQgaXQgdG8gYGVzY3Jvd3NgLgogICAgICAgKiBfdHJhZGVIYXNoIGlzIGNyZWF0ZWQgYnkgaGFzaGluZyBfdHJhZGVJRCwgX3NlbGxlciwgX2J1eWVyLCBfdmFsdWUgYW5kIF9mZWUgdmFyaWFibGVzLiBUaGVzZSB2YXJpYWJsZXMgbXVzdCBiZSBzdXBwbGllZCBvbiBmdXR1cmUgY29udHJhY3QgY2FsbHMuCiAgICAgICAqIHYsIHIgYW5kIHMgaXMgdGhlIHNpZ25hdHVyZSBkYXRhIHN1cHBsaWVkIGZyb20gdGhlIGFwaS4gVGhlIHNpZyBpcyBrZWNjYWsyNTYoX3RyYWRlSGFzaCwgX3BheW1lbnRXaW5kb3dJblNlY29uZHMsIF9leHBpcnkpLgogICAgICAgKi8KICAgICAgYnl0ZXMxNiBfdHJhZGVJRCwgLy8gVGhlIHVuaXF1ZSBJRCBvZiB0aGUgdHJhZGUKICAgICAgYWRkcmVzcyBfc2VsbGVyLCAvLyBUaGUgc2VsbGluZyBwYXJ0eSBvZiB0aGUgdHJhZGUKICAgICAgYWRkcmVzcyBfYnV5ZXIsIC8vIFRoZSBidXlpbmcgcGFydHkgb2YgdGhlIHRyYWRlCgogICAgICB1aW50IF9wYXltZW50V2luZG93SW5TZWNvbmRzIC8vIFRoZSB0aW1lIGluIHNlY29uZHMgZnJvbSBFc2Nyb3cgY3JlYXRpb24gdGhhdCB0aGUgYnV5ZXIgY2FuIHJldHVybiBtb25leQogICAgKSBwYXlhYmxlIGV4dGVybmFsIHsKICAgICAgICB1aW50MjU2IF92YWx1ZSA9IG1zZy52YWx1ZTsKICAgICAgICByZXF1aXJlKF92YWx1ZT49TWluRGVwb3NpdCk7CiAgICAgICAgYnl0ZXMzMiBfdHJhZGVIYXNoID0ga2VjY2FrMjU2KF90cmFkZUlELCBfc2VsbGVyLCBfYnV5ZXIsIF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZSghZXNjcm93c1tfdHJhZGVIYXNoXS5leGlzdHMpOyAvLyBSZXF1aXJlIHRoYXQgdHJhZGUgZG9lcyBub3QgYWxyZWFkeSBleGlzdAogICAgICAgIHVpbnQgX2J1eWVyQ2FuQ2FuY2VsQWZ0ZXIgPSAgbm93ICsgX3BheW1lbnRXaW5kb3dJblNlY29uZHM7CiAgICAgICAgZXNjcm93c1tfdHJhZGVIYXNoXSA9IEVzY3Jvdyh0cnVlLCBfc2VsbGVyLCBfYnV5ZXIsIF92YWx1ZSwgX2J1eWVyQ2FuQ2FuY2VsQWZ0ZXIsIGZhbHNlLCBmYWxzZSk7CgogICAgfSAgICAKCgoKICAgIGZ1bmN0aW9uIHNldEFyYml0cmF0b3IoIGFkZHJlc3MgX25ld0FyYml0cmF0b3IgKSBvbmx5T3duZXIgewogICAgICAgIC8qKgogICAgICAgICAqIFNldCB0aGUgYXJiaXRyYXRvciB0byBhIG5ldyBhZGRyZXNzLiBPbmx5IHRoZSBvd25lciBjYW4gY2FsbCB0aGlzLgogICAgICAgICAqIEBwYXJhbSBhZGRyZXNzIF9uZXdBcmJpdHJhdG9yCiAgICAgICAgICovCiAgICAgICAgYXJiaXRyYXRvciA9IF9uZXdBcmJpdHJhdG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3MgX25ld093bmVyKSBvbmx5T3duZXIgZXh0ZXJuYWwgewogICAgICAgIC8qKgogICAgICAgICAqIENoYW5nZSB0aGUgb3duZXIgdG8gYSBuZXcgYWRkcmVzcy4gT25seSB0aGUgb3duZXIgY2FuIGNhbGwgdGhpcy4KICAgICAgICAgKiBAcGFyYW0gYWRkcmVzcyBfbmV3T3duZXIKICAgICAgICAgKi8KICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgIH0KCgogICAgZnVuY3Rpb24gY2FuY2VsRXNjcm93KAogICAgICAvKioKICAgICAgICogQ2FuY2VsIGVzY3Jvdy4gUmV0dXJuIG1vbmV5IHRvIGJ1eWVyCiAgICAgICAqLwogICAgICBieXRlczE2IF90cmFkZUlELCAvLyBUaGUgdW5pcXVlIElEIG9mIHRoZSB0cmFkZQogICAgICBhZGRyZXNzIF9zZWxsZXIsIC8vIFRoZSBzZWxsaW5nIHBhcnR5IG9mIHRoZSB0cmFkZQogICAgICBhZGRyZXNzIF9idXllciwgLy8gVGhlIGJ1eWluZyBwYXJ0eSBvZiB0aGUgdHJhZGUKICAgICAgdWludDI1NiBfdmFsdWUgLy8gCiAgICApICBleHRlcm5hbCB7CiAgICAgICAgCiAgICAgICAgYnl0ZXMzMiBfdHJhZGVIYXNoID0ga2VjY2FrMjU2KF90cmFkZUlELCBfc2VsbGVyLCBfYnV5ZXIsIF92YWx1ZSk7CiAgICAgICAgcmVxdWlyZShlc2Nyb3dzW190cmFkZUhhc2hdLmV4aXN0cyk7CiAgICAgICAgcmVxdWlyZShlc2Nyb3dzW190cmFkZUhhc2hdLmJ1eWVyQ2FuQ2FuY2VsQWZ0ZXI8bm93KTsKICAgICAgICAKICAgICAgICB1aW50MjU2IGFyYml0cmF0b3JWYWx1ZSA9IGVzY3Jvd3NbX3RyYWRlSGFzaF0uc3VtbSpBUkJJVFJBVE9SX1BFUkNFTlQvMTAwOwogICAgICAgIHVpbnQyNTYgYnV5ZXJWYWx1ZSA9ICBlc2Nyb3dzW190cmFkZUhhc2hdLnN1bW0gLSBhcmJpdHJhdG9yVmFsdWU7CiAgICAgICAgCiAgICAgICAgYm9vbCBidXllclJlY2VpdmVkTW9uZXkgPSBlc2Nyb3dzW190cmFkZUhhc2hdLmJ1eWVyLmNhbGwudmFsdWUoYnV5ZXJWYWx1ZSkoKTsKICAgICAgICBib29sIGFyYml0cmF0b3JSZWNlaXZlZE1vbmV5ID0gYXJiaXRyYXRvci5jYWxsLnZhbHVlKGFyYml0cmF0b3JWYWx1ZSkoKTsKICAgICAgICAKICAgICAgICBpZiAoIGJ1eWVyUmVjZWl2ZWRNb25leSAmJiBhcmJpdHJhdG9yUmVjZWl2ZWRNb25leSApCiAgICAgICAgeyAgICAKICAgICAgICAgICAgZGVsZXRlIGVzY3Jvd3NbX3RyYWRlSGFzaF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZUVzY3JvdygKICAgICAgLyoqCiAgICAgICAqIEFwcHJvdmUgZXNjcm93LiAKICAgICAgICovCiAgICAgIGJ5dGVzMTYgX3RyYWRlSUQsIC8vIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHRyYWRlCiAgICAgIGFkZHJlc3MgX3NlbGxlciwgLy8gVGhlIHNlbGxpbmcgcGFydHkgb2YgdGhlIHRyYWRlCiAgICAgIGFkZHJlc3MgX2J1eWVyLCAvLyBUaGUgYnV5aW5nIHBhcnR5IG9mIHRoZSB0cmFkZQogICAgICB1aW50MjU2IF92YWx1ZSAvLyBUcmFkZSB2YWx1ZQogICAgKSAgZXh0ZXJuYWwgewogICAgICAgIGJ5dGVzMzIgX3RyYWRlSGFzaCA9IGtlY2NhazI1NihfdHJhZGVJRCwgX3NlbGxlciwgX2J1eWVyLCBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoZXNjcm93c1tfdHJhZGVIYXNoXS5leGlzdHMpOwogICAgICAgIHJlcXVpcmUoZXNjcm93c1tfdHJhZGVIYXNoXS5idXllcj09bXNnLnNlbmRlcik7CiAgICAgICAgZXNjcm93c1tfdHJhZGVIYXNoXS5idXllckFwcHJvdmVkVGhlVHJhbnNhY3Rpb24gPSB0cnVlOwogICAgfQogICAgCiAgICAKICAgIGZ1bmN0aW9uIHJlbGVhc2VFc2Nyb3coCiAgICAgIC8qKgogICAgICAgKiBSZWxlYXNlIGVzY3Jvdy4gU2VuZCBtb25leSB0byBzZWxsZXIKICAgICAgICovCiAgICAgIGJ5dGVzMTYgX3RyYWRlSUQsIC8vIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHRyYWRlCiAgICAgIGFkZHJlc3MgX3NlbGxlciwgLy8gVGhlIHNlbGxpbmcgcGFydHkgb2YgdGhlIHRyYWRlCiAgICAgIGFkZHJlc3MgX2J1eWVyLCAvLyBUaGUgYnV5aW5nIHBhcnR5IG9mIHRoZSB0cmFkZQogICAgICB1aW50MjU2IF92YWx1ZSAvLyBUcmFkZSB2YWx1ZQogICAgKSAgZXh0ZXJuYWwgewogICAgICAgIAogICAgICAgIGJ5dGVzMzIgX3RyYWRlSGFzaCA9IGtlY2NhazI1NihfdHJhZGVJRCwgX3NlbGxlciwgX2J1eWVyLCBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoZXNjcm93c1tfdHJhZGVIYXNoXS5leGlzdHMpOwogICAgICAgIHJlcXVpcmUoZXNjcm93c1tfdHJhZGVIYXNoXS5idXllckFwcHJvdmVkVGhlVHJhbnNhY3Rpb24pOwogICAgICAgIAogICAgICAgIAogICAgICAgIHVpbnQyNTYgYXJiaXRyYXRvclZhbHVlID0gZXNjcm93c1tfdHJhZGVIYXNoXS5zdW1tKkFSQklUUkFUT1JfUEVSQ0VOVC8xMDA7CiAgICAgICAgdWludDI1NiBidXllclZhbHVlID0gIGVzY3Jvd3NbX3RyYWRlSGFzaF0uc3VtbSAtIGFyYml0cmF0b3JWYWx1ZTsKICAgICAgICAKICAgICAgICBib29sIHNlbGxlclJlY2VpdmVkTW9uZXkgPSBlc2Nyb3dzW190cmFkZUhhc2hdLnNlbGxlci5jYWxsLnZhbHVlKGJ1eWVyVmFsdWUpKCk7CiAgICAgICAgYm9vbCBhcmJpdHJhdG9yUmVjZWl2ZWRNb25leSA9IGFyYml0cmF0b3IuY2FsbC52YWx1ZShhcmJpdHJhdG9yVmFsdWUpKCk7CiAgICAgICAgCiAgICAgICAgaWYgKCBzZWxsZXJSZWNlaXZlZE1vbmV5ICYmIGFyYml0cmF0b3JSZWNlaXZlZE1vbmV5ICkKICAgICAgICB7ICAgIAogICAgICAgICAgICBkZWxldGUgZXNjcm93c1tfdHJhZGVIYXNoXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgfQogICAgICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIGlzRXhpc3RzRXNjcm93KAogICAgICBieXRlczE2IF90cmFkZUlELCAvLyBUaGUgdW5pcXVlIElEIG9mIHRoZSB0cmFkZQogICAgICBhZGRyZXNzIF9zZWxsZXIsIC8vIFRoZSBzZWxsaW5nIHBhcnR5IG9mIHRoZSB0cmFkZQogICAgICBhZGRyZXNzIF9idXllciwgLy8gVGhlIGJ1eWluZyBwYXJ0eSBvZiB0aGUgdHJhZGUKICAgICAgdWludDI1NiBfdmFsdWUgLy8gVHJhZGUgdmFsdWUKICAgICkgIGNvbnN0YW50IHJldHVybnMgKGJvb2wgZXMpICB7IAogICAgICAgIGJ5dGVzMzIgX3RyYWRlSGFzaCA9IGtlY2NhazI1NihfdHJhZGVJRCwgX3NlbGxlciwgX2J1eWVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiBlc2Nyb3dzW190cmFkZUhhc2hdLmV4aXN0czsgCiAgICAgICAgCiAgICB9Cn0='.
	

]
