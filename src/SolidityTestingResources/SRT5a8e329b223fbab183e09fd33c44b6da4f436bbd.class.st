Class {
	#name : #SRT5a8e329b223fbab183e09fd33c44b6da4f436bbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a8e329b223fbab183e09fd33c44b6da4f436bbd >> base64 [
	^ ''.
	

]
