Class {
	#name : #SRT9386c0a3e4a641de38a2f054102383a6c20f24bf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9386c0a3e4a641de38a2f054102383a6c20f24bf >> base64 [
	^ ''.
	

]
