Class {
	#name : #SRTf1a47b728439730e9f83054d7c352575bf13f0b4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf1a47b728439730e9f83054d7c352575bf13f0b4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEVSQzIwIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICAgIAp9Cgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIAogICAgbW9kaWZpZXIgbm9uWmVyb0V0aCh1aW50IF92YWx1ZSkgewogICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSgpIHsKICAgICAgcmVxdWlyZShtc2cuZGF0YS5sZW5ndGggPj0gNjgpOwogICAgICBfOwogICAgfQogICAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBub25aZXJvRXRoKF92YWx1ZSkgb25seVBheWxvYWRTaXplIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKXsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICAKCiAgICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG5vblplcm9FdGgoX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUgcmV0dXJucyAoYm9vbCkgewogICAgICBpZihiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSl7CiAgICAgICAgdWludDI1NiBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9ZWxzZXsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KfQoKCiAgICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewoKICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmaW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCgpjb250cmFjdCBSUFRUb2tlbiBpcyBCYXNpY1Rva2VuIHsKCnVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKc3RyaW5nIHB1YmxpYyBuYW1lID0gIlJQVCBUb2tlbiI7ICAgICAgICAgICAgICAgICAgLy9uYW1lIG9mIHRoZSB0b2tlbgpzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJSUFQiOyAgICAgICAgICAgICAgICAgICAgICAvLyBzeW1ib2wgb2YgdGhlIHRva2VuCnVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlY2ltYWxzCnVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMCAqIDEwKioxODsgIC8vIHRvdGFsIHN1cHBseSBvZiBSUFQgVG9rZW5zICAKCi8vIHZhcmlhYmxlcwp1aW50MjU2IHB1YmxpYyBrZXlFbXBsb3llZUFsbG9jYXRpb247ICAgICAgICAgICAgICAgLy8gZnVuZCBhbGxvY2F0ZWQgdG8ga2V5IGVtcGxveWVlCnVpbnQyNTYgcHVibGljIHRvdGFsQWxsb2NhdGVkVG9rZW5zOyAgICAgICAgICAgICAgICAvLyB2YXJpYWJsZSB0byByZWd1bGF0ZSB0aGUgZnVuZHMgYWxsb2NhdGlvbgp1aW50MjU2IHB1YmxpYyB0b2tlbnNBbGxvY2F0ZWRUb0Nyb3dkRnVuZDsgICAgICAgICAgLy8gZnVuZHMgYWxsb2NhdGVkIHRvIGNyb3dkZnVuZAoKLy8gYWRkcmVzc2VzCmFkZHJlc3MgcHVibGljIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MgPSAweGY5NkU5MDUwOTFkMzhjYTI1ZTA2QzAxNGZFNjdiNUNBOTM5ZUU4M0Q7ICAgIC8vIG11bHRpIHNpZ24gYWRkcmVzcyBvZiBmb3VuZGVycyB3aGljaCBob2xkIAphZGRyZXNzIHB1YmxpYyBjcm93ZEZ1bmRBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgLy8gYWRkcmVzcyBvZiBjcm93ZGZ1bmQgY29udHJhY3QKCi8vZXZlbnRzCmV2ZW50IENoYW5nZUZvdW5kZXJzV2FsbGV0QWRkcmVzcyh1aW50MjU2ICBfYmxvY2tUaW1lU3RhbXAsIGFkZHJlc3MgaW5kZXhlZCBfZm91bmRlcnNXYWxsZXRBZGRyZXNzKTsKZXZlbnQgVHJhbnNmZXJQcmVBbGxvY2F0ZWRGdW5kcyh1aW50MjU2ICBfYmxvY2tUaW1lU3RhbXAgLCBhZGRyZXNzIF90byAsIHVpbnQyNTYgX3ZhbHVlKTsKCi8vbW9kaWZpZXJzCiAgbW9kaWZpZXIgb25seUNyb3dkRnVuZEFkZHJlc3MoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RGdW5kQWRkcmVzcyk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbm9uWmVyb0FkZHJlc3MoYWRkcmVzcyBfdG8pIHsKICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUZvdW5kZXJzKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpOwogICAgXzsKICB9CgogICAvLyBjcmVhdGlvbiBvZiB0aGUgdG9rZW4gY29udHJhY3QgCiAgIGZ1bmN0aW9uIFJQVFRva2VuIChhZGRyZXNzIF9jcm93ZEZ1bmRBZGRyZXNzKSB7CiAgICBjcm93ZEZ1bmRBZGRyZXNzID0gX2Nyb3dkRnVuZEFkZHJlc3M7CgogICAgLy8gVG9rZW4gRGlzdHJpYnV0aW9uICAKICAgIHRva2Vuc0FsbG9jYXRlZFRvQ3Jvd2RGdW5kID0gNzAgKiAxMCAqKiAyNTsgICAgICAgIC8vIDcwICUgYWxsb2NhdGlvbiBvZiB0b3RhbFN1cHBseQogICAga2V5RW1wbG95ZWVBbGxvY2F0aW9uID0gMzAgKiAxMCAqKiAyNTsgICAgICAgICAgICAgLy8gMzAgJSBhbGxvY2F0aW9uIG9mIHRvdGFsU3VwcGx5CgogICAgLy8gQXNzaWduZWQgYmFsYW5jZXMgdG8gcmVzcGVjdGl2ZSBzdGFrZWhvbGRlcnMKICAgIGJhbGFuY2VzW2ZvdW5kZXJNdWx0aVNpZ0FkZHJlc3NdID0ga2V5RW1wbG95ZWVBbGxvY2F0aW9uOwogICAgYmFsYW5jZXNbY3Jvd2RGdW5kQWRkcmVzc10gPSB0b2tlbnNBbGxvY2F0ZWRUb0Nyb3dkRnVuZDsKCiAgICB0b3RhbEFsbG9jYXRlZFRva2VucyA9IGJhbGFuY2VzW2ZvdW5kZXJNdWx0aVNpZ0FkZHJlc3NdOwogIH0KCi8vIGZ1bmN0aW9uIHRvIGtlZXAgdHJhY2sgb2YgdGhlIHRvdGFsIHRva2VuIGFsbG9jYXRpb24KICBmdW5jdGlvbiBjaGFuZ2VUb3RhbFN1cHBseSh1aW50MjU2IF9hbW91bnQpIG9ubHlDcm93ZEZ1bmRBZGRyZXNzIHsKICAgIHRvdGFsQWxsb2NhdGVkVG9rZW5zID0gdG90YWxBbGxvY2F0ZWRUb2tlbnMuYWRkKF9hbW91bnQpOwogIH0KCi8vIGZ1bmN0aW9uIHRvIGNoYW5nZSBmb3VuZGVyIG11bHRpc2lnIHdhbGxldCBhZGRyZXNzICAgICAgICAgICAgCiAgZnVuY3Rpb24gY2hhbmdlRm91bmRlck11bHRpU2lnQWRkcmVzcyhhZGRyZXNzIF9uZXdGb3VuZGVyTXVsdGlTaWdBZGRyZXNzKSBvbmx5Rm91bmRlcnMgbm9uWmVyb0FkZHJlc3MoX25ld0ZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpIHsKICAgIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MgPSBfbmV3Rm91bmRlck11bHRpU2lnQWRkcmVzczsKICAgIENoYW5nZUZvdW5kZXJzV2FsbGV0QWRkcmVzcyhub3csIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpOwogIH0KIAoKfQoKCmNvbnRyYWN0IFJQVENyb3dkc2FsZSB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgICAKICAgIFJQVFRva2VuIHB1YmxpYyB0b2tlbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb2tlbiB2YXJpYWJsZQogICAgLy92YXJpYWJsZXMKICAgCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFdlaVJhaXNlZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxhZyB0byB0cmFjayB0aGUgYW1vdW50IHJhaXNlZAogICAgdWludDMyIHB1YmxpYyBleGNoYW5nZVJhdGUgPSAzMDAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZWQgdXNpbmcgcHJpY2VPZkV0aGVySW5VU0QvcHJpY2VPZlJQVFRva2VuIAogICAgdWludDI1NiBwdWJsaWMgcHJlRGlzdHJpVG9BY3F1aWFudGFuY2VzU3RhcnRUaW1lID0gMTUxMDg3NjgwMTsgIC8vIEZyaWRheSwgMTctTm92LTE3IDAwOjAwOjAxIFVUQwogICAgdWludDI1NiBwdWJsaWMgcHJlRGlzdHJpVG9BY3F1aWFudGFuY2VzRW5kVGltZSA9IDE1MTE4MjcxOTk7ICAgIC8vIE1vbmRheSwgMjctTm92LTE3IDIzOjU5OjU5IFVUQwogICAgdWludDI1NiBwdWJsaWMgcHJlc2FsZVN0YXJ0VGltZSA9IDE1MTE4MjcyMDA7ICAgICAgICAgICAgICAgICAgIC8vIFR1ZXNkYXksIDI4LU5vdi0xNyAwMDowMDowMCBVVEMKICAgIHVpbnQyNTYgcHVibGljIHByZXNhbGVFbmRUaW1lID0gMTUxMzAzNjc5OTsgICAgICAgICAgICAgICAgICAgICAvLyBNb25kYXksIDExLURlYy0xNyAyMzo1OTo1OSBVVEMKICAgIHVpbnQyNTYgcHVibGljIGNyb3dkZnVuZFN0YXJ0VGltZSA9IDE1MTMwMzY4MDA7ICAgICAgICAgICAgICAgICAvLyBUdWVzZGF5LCAxMi1EZWMtMTcgMDA6MDA6MDAgVVRDCiAgICB1aW50MjU2IHB1YmxpYyBjcm93ZGZ1bmRFbmRUaW1lID0gMTUxNTYyODc5OTsgICAgICAgICAgICAgICAgICAgLy8gV2VkbmVzZGF5LCAxMC1KYW4tMTggMjM6NTk6NTkgVVRDCiAgICBib29sIGludGVybmFsIGlzVG9rZW5EZXBsb3llZCA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxhZyB0byB0cmFjayB0aGUgdG9rZW4gZGVwbG95bWVudAogICAgCiAgICAvLyBhZGRyZXNzZXMKICAgIGFkZHJlc3MgcHVibGljIGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3VuZGVycyBtdWx0aSBzaWduIGFkZHJlc3MKICAgIGFkZHJlc3MgcHVibGljIHJlbWFpbmluZ1Rva2VuSG9sZGVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRyZXNzIHRvIGhvbGQgdGhlIHJlbWFpbmluZyB0b2tlbnMgYWZ0ZXIgY3Jvd2RmdW5kIGVuZAogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnlBZGRyZXNzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbCBmdW5kcyBhcmUgdHJhbnNmZXJyZWQgdG8gdGhpcyBhZGRyZXNzCiAgICAKCiAgICBlbnVtIFN0YXRlIHsgQWNxdWlhbnRhbmNlcywgUHJlU2FsZSwgQ3Jvd2RGdW5kLCBDbG9zZWQgfQoKICAgIC8vZXZlbnRzCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOyAKICAgIGV2ZW50IENyb3dkRnVuZENsb3NlZCh1aW50MjU2IF9ibG9ja1RpbWVTdGFtcCk7CiAgICBldmVudCBDaGFuZ2VGb3VuZGVyc1dhbGxldEFkZHJlc3ModWludDI1NiBfYmxvY2tUaW1lU3RhbXAsIGFkZHJlc3MgaW5kZXhlZCBfZm91bmRlcnNXYWxsZXRBZGRyZXNzKTsKICAgCiAgICAvL01vZGlmaWVycwogICAgbW9kaWZpZXIgdG9rZW5Jc0RlcGxveWVkKCkgewogICAgICAgIHJlcXVpcmUoaXNUb2tlbkRlcGxveWVkID09IHRydWUpOwogICAgICAgIF87CiAgICB9CiAgICAgbW9kaWZpZXIgbm9uWmVyb0V0aCgpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm9uWmVyb0FkZHJlc3MoYWRkcmVzcyBfdG8pIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUZvdW5kZXJzKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBmb3VuZGVyTXVsdGlTaWdBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlQdWJsaWMoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IGZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgICAgIHJlcXVpcmUoZ2V0U3RhdGUoKSA9PSBzdGF0ZSk7IAogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaW5CZXR3ZWVuKCkgewogICAgICAgIHJlcXVpcmUobm93ID49IHByZURpc3RyaVRvQWNxdWlhbnRhbmNlc1N0YXJ0VGltZSAmJiBub3cgPD0gY3Jvd2RmdW5kRW5kVGltZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBDb25zdHJ1Y3RvciB0byBpbml0aWFsaXplIHRoZSBsb2NhbCB2YXJpYWJsZXMgCiAgICBmdW5jdGlvbiBSUFRDcm93ZHNhbGUgKGFkZHJlc3MgX2ZvdW5kZXJXYWxsZXRBZGRyZXNzLCBhZGRyZXNzIF9yZW1haW5pbmdUb2tlbkhvbGRlciwgYWRkcmVzcyBfYmVuZWZpY2lhcnlBZGRyZXNzKSB7CiAgICAgICAgZm91bmRlck11bHRpU2lnQWRkcmVzcyA9IF9mb3VuZGVyV2FsbGV0QWRkcmVzczsKICAgICAgICByZW1haW5pbmdUb2tlbkhvbGRlciA9IF9yZW1haW5pbmdUb2tlbkhvbGRlcjsKICAgICAgICBiZW5lZmljaWFyeUFkZHJlc3MgPSBfYmVuZWZpY2lhcnlBZGRyZXNzOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgZm91bmRlcnMgbXVsdGkgc2lnbiBhZGRyZXNzIAogICAgIGZ1bmN0aW9uIHNldEZvdW5kZXJNdWx0aVNpZ0FkZHJlc3MoYWRkcmVzcyBfbmV3Rm91bmRlckFkZHJlc3MpIG9ubHlGb3VuZGVycyAgbm9uWmVyb0FkZHJlc3MoX25ld0ZvdW5kZXJBZGRyZXNzKSB7CiAgICAgICAgZm91bmRlck11bHRpU2lnQWRkcmVzcyA9IF9uZXdGb3VuZGVyQWRkcmVzczsKICAgICAgICBDaGFuZ2VGb3VuZGVyc1dhbGxldEFkZHJlc3Mobm93LCBmb3VuZGVyTXVsdGlTaWdBZGRyZXNzKTsKICAgIH0KICAgIAogICAgLy8gQXR0YWNoIHRoZSB0b2tlbiBjb250cmFjdCAgICAgCiAgICBmdW5jdGlvbiBzZXRUb2tlbkFkZHJlc3MoYWRkcmVzcyBfdG9rZW5BZGRyZXNzKSBleHRlcm5hbCBvbmx5Rm91bmRlcnMgbm9uWmVyb0FkZHJlc3MoX3Rva2VuQWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoaXNUb2tlbkRlcGxveWVkID09IGZhbHNlKTsKICAgICAgICB0b2tlbiA9IFJQVFRva2VuKF90b2tlbkFkZHJlc3MpOwogICAgICAgIGlzVG9rZW5EZXBsb3llZCA9IHRydWU7CiAgICB9CgoKICAgIC8vIGZ1bmN0aW9uIGNhbGwgYWZ0ZXIgY3Jvd2RGdW5kRW5kVGltZSBpdCB0cmFuc2ZlcnMgdGhlIHJlbWFpbmluZyB0b2tlbnMgdG8gcmVtYWluaW5nVG9rZW5Ib2xkZXIgYWRkcmVzcwogICAgZnVuY3Rpb24gZW5kQ3Jvd2RmdW5kKCkgb25seUZvdW5kZXJzIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKG5vdyA+IGNyb3dkZnVuZEVuZFRpbWUpOwogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nVG9rZW4gPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7ICAvLyByZW1haW5pbmcgdG9rZW5zCgogICAgICAgIGlmIChyZW1haW5pbmdUb2tlbiAhPSAwKSB7CiAgICAgICAgICB0b2tlbi50cmFuc2ZlcihyZW1haW5pbmdUb2tlbkhvbGRlciwgcmVtYWluaW5nVG9rZW4pOyAKICAgICAgICAgIENyb3dkRnVuZENsb3NlZChub3cpOwogICAgICAgICAgcmV0dXJuIHRydWU7IAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIENyb3dkRnVuZENsb3NlZChub3cpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgCiAgICB9CgogICAgLy8gQnV5IHRva2VuIGZ1bmN0aW9uIGNhbGwgb25seSBpbiBkdXJhdGlvbiBvZiBjcm93ZGZ1bmQgYWN0aXZlIAogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpCiAgICBub25aZXJvRXRoIAogICAgdG9rZW5Jc0RlcGxveWVkIAogICAgb25seVB1YmxpYyAKICAgIG5vblplcm9BZGRyZXNzKGJlbmVmaWNpYXJ5KSAKICAgIGluQmV0d2VlbgogICAgcGF5YWJsZSAKICAgIHB1YmxpYyAKICAgIHJldHVybnMoYm9vbCkgCiAgICB7CiAgICAgICAgICAgIGZ1bmRUcmFuc2Zlcihtc2cudmFsdWUpOwoKICAgICAgICAgICAgdWludDI1NiBhbW91bnQgPSBnZXROb09mVG9rZW5zKGV4Y2hhbmdlUmF0ZSwgbXNnLnZhbHVlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICh0b2tlbi50cmFuc2ZlcihiZW5lZmljaWFyeSwgYW1vdW50KSkgewogICAgICAgICAgICAgICAgdG9rZW4uY2hhbmdlVG90YWxTdXBwbHkoYW1vdW50KTsgCiAgICAgICAgICAgICAgICB0b3RhbFdlaVJhaXNlZCA9IHRvdGFsV2VpUmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgICAgICAgICAgICAgVG9rZW5QdXJjaGFzZShiZW5lZmljaWFyeSwgbXNnLnZhbHVlLCBhbW91bnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgIH0KCgogICAgLy8gZnVuY3Rpb24gdG8gdHJhbnNmZXIgdGhlIGZ1bmRzIHRvIGZvdW5kZXJzIGFjY291bnQKICAgIGZ1bmN0aW9uIGZ1bmRUcmFuc2Zlcih1aW50MjU2IHdlaUFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIGJlbmVmaWNpYXJ5QWRkcmVzcy50cmFuc2Zlcih3ZWlBbW91bnQpOwogICAgfQoKLy8gR2V0IGZ1bmN0aW9ucyAKCiAgICAvLyBmdW5jdGlvbiB0byBnZXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNyb3dkc2FsZQogICAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKFN0YXRlKSB7CiAgICAgICAgaWYgKG5vdyA+PSBwcmVEaXN0cmlUb0FjcXVpYW50YW5jZXNTdGFydFRpbWUgJiYgbm93IDw9IHByZURpc3RyaVRvQWNxdWlhbnRhbmNlc0VuZFRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkFjcXVpYW50YW5jZXM7CiAgICAgICAgfSBpZiAobm93ID49IHByZXNhbGVTdGFydFRpbWUgJiYgbm93IDw9IHByZXNhbGVFbmRUaW1lKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5QcmVTYWxlOwogICAgICAgIH0gaWYgKG5vdyA+PSBjcm93ZGZ1bmRTdGFydFRpbWUgJiYgbm93IDw9IGNyb3dkZnVuZEVuZFRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkNyb3dkRnVuZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuQ2xvc2VkOwogICAgICAgIH0KICAgICAgICAKICAgIH0KCgogICAvLyBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIHRvdGFsIG5vIG9mIHRva2VucyB3aXRoIGJvbnVzIG11bHRpcGxpY2F0aW9uCiAgICBmdW5jdGlvbiBnZXROb09mVG9rZW5zKHVpbnQzMiBfZXhjaGFuZ2VSYXRlLCB1aW50MjU2IF9hbW91bnQpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAgdWludDI1NiBub09mVG9rZW4gPSBfYW1vdW50Lm11bCh1aW50MjU2KF9leGNoYW5nZVJhdGUpKTsKICAgICAgICAgdWludDI1NiBub09mVG9rZW5XaXRoQm9udXMgPSAoKHVpbnQyNTYoMTAwICsgZ2V0Q3VycmVudEJvbnVzUmF0ZSgpKSkubXVsKG5vT2ZUb2tlbikpLmRpdigxMDApOwogICAgICAgICByZXR1cm4gbm9PZlRva2VuV2l0aEJvbnVzOwogICAgfQoKICAgIAoKICAgIC8vIGZ1bmN0aW9uIHByb3ZpZGUgdGhlIGN1cnJlbnQgYm9udXMgcmF0ZQogICAgZnVuY3Rpb24gZ2V0Q3VycmVudEJvbnVzUmF0ZSgpIGludGVybmFsIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgCiAgICAgICAgaWYgKGdldFN0YXRlKCkgPT0gU3RhdGUuQWNxdWlhbnRhbmNlcykgewogICAgICAgICAgICByZXR1cm4gNDA7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRTdGF0ZSgpID09IFN0YXRlLlByZVNhbGUpIHsKICAgICAgICAgICAgcmV0dXJuIDIwOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0U3RhdGUoKSA9PSBTdGF0ZS5Dcm93ZEZ1bmQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgfQoKICAgIC8vIHByb3ZpZGVzIHRoZSBib251cyAlIAogICAgZnVuY3Rpb24gZ2V0Qm9udXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiBnZXRDdXJyZW50Qm9udXNSYXRlKCk7CiAgICB9CgogICAgLy8gc2VuZCBldGhlciB0byB0aGUgY29udHJhY3QgYWRkcmVzcwogICAgLy8gV2l0aCBhdCBsZWFzdCAyMDAgMDAwIGdhcwogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQp9'.
	

]
