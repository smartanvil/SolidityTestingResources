Class {
	#name : #SRT66e9aeedc17558cfc97b6734600b7a835f8e7ceb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT66e9aeedc17558cfc97b6734600b7a835f8e7ceb >> base64 [
	^ ''.
	

]
