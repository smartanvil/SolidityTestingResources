Class {
	#name : #SRT4cd7d3962dae1ebb711441d0b106d66fa8adf2e8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4cd7d3962dae1ebb711441d0b106d66fa8adf2e8 >> base64 [
	^ ''.
	

]
