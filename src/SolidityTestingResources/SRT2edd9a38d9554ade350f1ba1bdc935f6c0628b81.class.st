Class {
	#name : #SRT2edd9a38d9554ade350f1ba1bdc935f6c0628b81,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2edd9a38d9554ade350f1ba1bdc935f6c0628b81 >> base64 [
	^ ''.
	

]
