Class {
	#name : #SRT882448f83d90b2bf477af2ea79327fdea1335d93,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT882448f83d90b2bf477af2ea79327fdea1335d93 >> base64 [
	^ ''.
	

]
