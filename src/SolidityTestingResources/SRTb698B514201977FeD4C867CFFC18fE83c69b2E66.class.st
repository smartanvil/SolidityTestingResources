Class {
	#name : #SRTb698B514201977FeD4C867CFFC18fE83c69b2E66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb698B514201977FeD4C867CFFC18fE83c69b2E66 >> base64 [
	^ ''.
	

]
