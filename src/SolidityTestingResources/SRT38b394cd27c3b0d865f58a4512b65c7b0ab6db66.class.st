Class {
	#name : #SRT38b394cd27c3b0d865f58a4512b65c7b0ab6db66,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38b394cd27c3b0d865f58a4512b65c7b0ab6db66 >> base64 [
	^ ''.
	

]
