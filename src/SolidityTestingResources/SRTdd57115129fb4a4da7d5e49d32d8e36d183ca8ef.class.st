Class {
	#name : #SRTdd57115129fb4a4da7d5e49d32d8e36d183ca8ef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd57115129fb4a4da7d5e49d32d8e36d183ca8ef >> base64 [
	^ ''.
	

]
