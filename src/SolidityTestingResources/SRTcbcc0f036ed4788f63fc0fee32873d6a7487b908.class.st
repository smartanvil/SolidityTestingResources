Class {
	#name : #SRTcbcc0f036ed4788f63fc0fee32873d6a7487b908,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcbcc0f036ed4788f63fc0fee32873d6a7487b908 >> base64 [
	^ ''.
	

]
