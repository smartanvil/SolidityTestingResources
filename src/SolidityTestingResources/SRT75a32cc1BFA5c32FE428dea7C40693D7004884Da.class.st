Class {
	#name : #SRT75a32cc1BFA5c32FE428dea7C40693D7004884Da,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT75a32cc1BFA5c32FE428dea7C40693D7004884Da >> base64 [
	^ ''.
	

]
