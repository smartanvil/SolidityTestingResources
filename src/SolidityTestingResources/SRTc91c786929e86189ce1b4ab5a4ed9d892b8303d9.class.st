Class {
	#name : #SRTc91c786929e86189ce1b4ab5a4ed9d892b8303d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc91c786929e86189ce1b4ab5a4ed9d892b8303d9 >> base64 [
	^ 'Ly8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZAovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qIFRoaXMgaXMgYSBzbGlnaHQgY2hhbmdlIHRvIHRoZSBFUkMyMCBiYXNlIHN0YW5kYXJkLgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CiAgICBpcyByZXBsYWNlZCB3aXRoOgogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBUaGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGdldHRlciBmdW5jdGlvbiBmb3IgdGhlIHRvdGFsU3VwcGx5LgogICAgVGhpcyBpcyBtb3ZlZCB0byB0aGUgYmFzZSBjb250cmFjdCBzaW5jZSBwdWJsaWMgZ2V0dGVyIGZ1bmN0aW9ucyBhcmUgbm90CiAgICBjdXJyZW50bHkgcmVjb2duaXNlZCBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbWF0Y2hpbmcgYWJzdHJhY3QKICAgIGZ1bmN0aW9uIGJ5IHRoZSBjb21waWxlci4KICAgICovCiAgICAvLy8gdG90YWwgYW1vdW50IG9mIHRva2VucwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Ci8qCllvdSBzaG91bGQgaW5oZXJpdCBmcm9tIFN0YW5kYXJkVG9rZW4gb3IsIGZvciBhIHRva2VuIGxpa2UgeW91IHdvdWxkIHdhbnQgdG8KZGVwbG95IGluIHNvbWV0aGluZyBsaWtlIE1pc3QsIHNlZSBIdW1hblN0YW5kYXJkVG9rZW4uc29sLgooVGhpcyBpbXBsZW1lbnRzIE9OTFkgdGhlIHN0YW5kYXJkIGZ1bmN0aW9ucyBhbmQgTk9USElORyBlbHNlLgpJZiB5b3UgZGVwbG95IHRoaXMsIHlvdSB3b24ndCBoYXZlIGFueXRoaW5nIHVzZWZ1bC4pCgpJbXBsZW1lbnRzIEVSQyAyMCBUb2tlbiBzdGFuZGFyZDogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCi4qLwoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgICAgICAvL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUgZ29lcyBvbiwgeW91IG5lZWQgdG8gY2hlY2sgaWYgaXQgZG9lc24ndCB3cmFwLgogICAgICAgIC8vUmVwbGFjZSB0aGUgaWYgd2l0aCB0aGlzIG9uZSBpbnN0ZWFkLgogICAgICAgIC8vaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4KICAgICAgICAvL2lmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwp9Ci8qCgogIENvbnRyYWN0IHRvIGltcGxlbWVudCBFUkMyMCB0b2tlbnMgZm9yIHRoZSBjcm93ZGZ1bmRpbmcgb2YgdGhlIFJvdWdlIFByb2plY3QgKFJHWCB0b2tlbnMpLgogIFRoZXkgYXJlIGJhc2VkIG9uIFN0YW5kYXJkVG9rZW4gZnJvbSAoaHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9Ub2tlbnMpLgoKICBEaWZmZXJlbmNlcyB3aXRoIHN0YW5kYXJkIEVSQzIwIHRva2VucyA6CgogICAtIFRoZSB0b2tlbnMgY2FuIGJlIGJvdWdodCBieSBzZW5kaW5nIGV0aGVyIHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIChmdW5kaW5nIHByb2NlZHVyZSkuCiAgICAgVGhlIHByaWNlIGlzIGhhcmRjb2RlZDogMSB0b2tlbiA9IDEgZmlubmV5ICgwLjAwMSBldGgpLgoKICAgLSBUaGUgZnVuZGluZyBjYW4gb25seSBvY2N1ciBpZiB0aGUgY3VycmVudCBkYXRlIGlzIHN1cGVyaW9yIHRvIHRoZSBzdGFydEZ1bmRpbmcgcGFyYW1ldGVyIHRpbWVzdGFtcC4KICAgICBBdCBhbnl0aW1lLCB0aGUgY3JlYXRvciBjYW4gY2hhbmdlIHRoaXMgdG9rZW4gcGFyYW1ldGVyLCBlZmZlY3RpdmVseSBjbG9zaW5nIHRoZSBmdW5kaW5nLgoKICAgLSBUaGUgb3duZXIgY2FuIGFsc28gZnJlZXplIHBhcnQgb2YgaGlzIHRva2VucyB0byBub3QgYmUgcGFydCBvZiB0aGUgZnVuZGluZyBwcm9jZWR1cmUuCgogICAtIEF0IHRoZSBjcmVhdGlvbiwgYSBkaXNjb3VudE11bHRpcGxpZXIgaXMgc2F2ZWQgd2hpY2ggY2FuIGJlIHVzZWQgbGF0ZXIgb24gCiAgICAgYnkgb3RoZXIgY29udHJhY3RzIChlZyB0byB1c2UgdGhlIHRva2VucyBhcyBhIHZvdWNoZXIpLgoKKi8KCmNvbnRyYWN0IFJHWFRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgCiAgICAvKiBFUkMyMCAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ3YwLjknOwogICAgCiAgICAvKiBSR1ggKi8KICAgIGFkZHJlc3Mgb3duZXI7IAogICAgdWludCBwdWJsaWMgZnVuZGluZ1N0YXJ0OwogICAgdWludDI1NiBwdWJsaWMgZnJvemVuU3VwcGx5ID0gMDsKICAgIHVpbnQ4IHB1YmxpYyBkaXNjb3VudE11bHRpcGxpZXI7CiAgICAKICAgIG1vZGlmaWVyIGZ1bmRpbmdPcGVuKCkgewogICAgICAgIHJlcXVpcmUobm93ID49IGZ1bmRpbmdTdGFydCk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seUJ5KGFkZHJlc3MgX2FjY291bnQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gX2FjY291bnQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgZnVuZGluZ09wZW4oKSB7IAoKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gb3duZXIpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgX3ZhbHVlID0gbXNnLnZhbHVlIC8gMSBmaW5uZXk7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tvd25lcl0gPj0gKF92YWx1ZSAtIGZyb3plblN1cHBseSkgJiYgX3ZhbHVlID4gMCk7IAogICAgICAgIAogICAgICAgIGJhbGFuY2VzW293bmVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG93bmVyLCBtc2cuc2VuZGVyLCBfdmFsdWUpOwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBSR1hUb2tlbiAoCiAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBfc3ltYm9sLAogICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2luaXRpYWxBbW91bnQsCiAgICAgICAgICAgICAgICAgICAgICAgdWludCBfZnVuZGluZ1N0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4IF9kaXNjb3VudE11bHRpcGxpZXIKICAgICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbEFtb3VudDsgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIHRvdGFsU3VwcGx5ID0gX2luaXRpYWxBbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQogICAgICAgIGZ1bmRpbmdTdGFydCA9IF9mdW5kaW5nU3RhcnQ7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGltZXN0YW1wIGJlZm9yZSBubyBmdW5kaW5nIGNhbiBvY2N1cgogICAgICAgIGRpc2NvdW50TXVsdGlwbGllciA9IF9kaXNjb3VudE11bHRpcGxpZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGlzRnVuZGluZ09wZW4oKSBjb25zdGFudCByZXR1cm5zIChib29sIHllcykgewogICAgICAgIHJldHVybiAobm93ID49IGZ1bmRpbmdTdGFydCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGZyZWV6ZVN1cHBseSh1aW50MjU2IF92YWx1ZSkgb25seUJ5KG93bmVyKSB7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tvd25lcl0gPj0gX3ZhbHVlKTsKICAgICAgICBmcm96ZW5TdXBwbHkgPSBfdmFsdWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRpbWVGdW5kaW5nU3RhcnQodWludCBfZnVuZGluZ1N0YXJ0KSBvbmx5Qnkob3duZXIpIHsKICAgICAgICBmdW5kaW5nU3RhcnQgPSBfZnVuZGluZ1N0YXJ0OwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seUJ5KG93bmVyKSB7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBraWxsKCkgb25seUJ5KG93bmVyKSB7CiAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgIH0KCn0='.
	

]
