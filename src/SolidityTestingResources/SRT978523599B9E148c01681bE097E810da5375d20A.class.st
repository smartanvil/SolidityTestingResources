Class {
	#name : #SRT978523599B9E148c01681bE097E810da5375d20A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT978523599B9E148c01681bE097E810da5375d20A >> base64 [
	^ ''.
	

]
