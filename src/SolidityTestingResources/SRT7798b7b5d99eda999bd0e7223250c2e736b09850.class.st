Class {
	#name : #SRT7798b7b5d99eda999bd0e7223250c2e736b09850,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7798b7b5d99eda999bd0e7223250c2e736b09850 >> base64 [
	^ ''.
	

]
