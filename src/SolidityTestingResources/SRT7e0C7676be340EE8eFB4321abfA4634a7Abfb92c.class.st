Class {
	#name : #SRT7e0C7676be340EE8eFB4321abfA4634a7Abfb92c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e0C7676be340EE8eFB4321abfA4634a7Abfb92c >> base64 [
	^ ''.
	

]
