Class {
	#name : #SRTe075793215ddbd61b513309febec8fd67e2d3ba7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe075793215ddbd61b513309febec8fd67e2d3ba7 >> base64 [
	^ ''.
	

]
