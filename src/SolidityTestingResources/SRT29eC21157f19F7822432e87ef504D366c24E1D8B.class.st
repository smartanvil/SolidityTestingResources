Class {
	#name : #SRT29eC21157f19F7822432e87ef504D366c24E1D8B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29eC21157f19F7822432e87ef504D366c24E1D8B >> base64 [
	^ ''.
	

]
