Class {
	#name : #SRTe3fa177acecfb86721cf6f9f4206bd3bd672d7d5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe3fa177acecfb86721cf6f9f4206bd3bd672d7d5 >> base64 [
	^ ''.
	

]
