Class {
	#name : #SRT8fbbffe883bd8958b5324a9dba3987b4b2271379,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fbbffe883bd8958b5324a9dba3987b4b2271379 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIGFzc2VydChiID4gMCk7CiAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgcmV0dXJuIGM7CiAgICB9Cgp9Cgpjb250cmFjdCBUb2tlbiB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7Cn0KCmNvbnRyYWN0IEthcm1hIGlzIFNhZmVNYXRoLCBTdGFuZGFyZFRva2VuIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiS2FybWEgUHJlU2FsZSBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJLUk1QIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gIDUwMDAqMTAqKmRlY2ltYWxzOwoKICAgIGFkZHJlc3MgcHVibGljIG11bHRpU2lnV2FsbGV0OwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8gMSBFVEggPSAzMDAgVVNEIERhdGU6IDExLjA4LjIwMTcKICAgIHVpbnQgcHVibGljIG9uZVRva2VuSW5XZWkgPSAzMzMzMzMzMzMzMzMzMzMwMDA7CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZihvd25lciE9bXNnLnNlbmRlcikgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBldmVudCBDcmVhdGVLUk0oYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIGZ1bmN0aW9uIEthcm1hKGFkZHJlc3MgX1NpZ1dhbGxldCwgYWRkcmVzcyBfb3duZXIpIHsKICAgICAgICBtdWx0aVNpZ1dhbGxldCA9IF9TaWdXYWxsZXQ7CiAgICAgICAgb3duZXIgPSBfb3duZXI7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbMHhEZTlhMWE4Q0M3NzFDMTJENEQ4NWIzMjc0MjY4OEQzRUM5NTUxNjdjXSA9IDE5MDAgKiAxMCoqZGVjaW1hbHM7CiAgICAgICAgYmFsYW5jZXNbMHg3MDdEYjYwYjE5Q2ZjNWQ1MjVERDIzNTlENjE4MTI0OGFhMEE1MThkXSA9IDI5MDAgKiAxMCoqZGVjaW1hbHM7CiAgICAgICAgYmFsYW5jZXNbMHhiZmUzZDZkYTMzNjE2QWUwNDRjMTdlMjAzOTY5ZDM3RUQ1YURGNjUxXSA9IDEwMCAqIDEwKipkZWNpbWFsczsKICAgICAgICBiYWxhbmNlc1sweDQ1ZDZCM0VkMzM3NUIxMTRGM2VjRDNhYzVEN0U5QmQyMTU0YTFFODldID0gMTAwICogMTAqKmRlY2ltYWxzOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGNyZWF0ZVRva2VucygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VucygpIGludGVybmFsIHsKICAgICAgICBpZiAobXNnLnZhbHVlIDw9IDApIHJldmVydCgpOwoKICAgICAgICB1aW50IG11bHRpcGxpZXIgPSAxMCAqKiBkZWNpbWFsczsKICAgICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KG1zZy52YWx1ZSwgbXVsdGlwbGllcikgLyBvbmVUb2tlbkluV2VpOwoKICAgICAgICB1aW50MjU2IGNoZWNrZWRTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCB0b2tlbnMpOwogICAgICAgIGlmICh0b2tlbkNyZWF0aW9uQ2FwIDwgY2hlY2tlZFN1cHBseSkgcmV2ZXJ0KCk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2VuczsKICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemUoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIG11bHRpU2lnV2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CiAgICAKICAgIC8vIGFkZCBjYWxsIHRvIG9yYWNsZSAKICAgIGZ1bmN0aW9uIHNldEV0aFByaWNlKHVpbnQgX2V0aGVyUHJpY2UpIG9ubHlPd25lciB7CiAgICAgICAgb25lVG9rZW5JbldlaSA9IDEgZXRoZXIgLyBfZXRoZXJQcmljZSAvIDEwMDsKICAgIH0KCn0='.
	

]
