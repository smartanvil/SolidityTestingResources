Class {
	#name : #SRT4fcd3023fedf38e105efb150a1e280b7fbc1b950,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4fcd3023fedf38e105efb150a1e280b7fbc1b950 >> base64 [
	^ ''.
	

]
