Class {
	#name : #SRTfad1f1549f979c525b03141ceaa65775cf56b724,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfad1f1549f979c525b03141ceaa65775cf56b724 >> base64 [
	^ ''.
	

]
