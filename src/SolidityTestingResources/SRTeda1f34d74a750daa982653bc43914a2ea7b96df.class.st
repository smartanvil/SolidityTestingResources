Class {
	#name : #SRTeda1f34d74a750daa982653bc43914a2ea7b96df,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeda1f34d74a750daa982653bc43914a2ea7b96df >> base64 [
	^ ''.
	

]
