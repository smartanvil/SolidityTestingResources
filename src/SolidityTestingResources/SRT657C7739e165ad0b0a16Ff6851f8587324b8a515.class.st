Class {
	#name : #SRT657C7739e165ad0b0a16Ff6851f8587324b8a515,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT657C7739e165ad0b0a16Ff6851f8587324b8a515 >> base64 [
	^ ''.
	

]
