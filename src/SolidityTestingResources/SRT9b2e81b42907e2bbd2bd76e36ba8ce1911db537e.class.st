Class {
	#name : #SRT9b2e81b42907e2bbd2bd76e36ba8ce1911db537e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9b2e81b42907e2bbd2bd76e36ba8ce1911db537e >> base64 [
	^ ''.
	

]
