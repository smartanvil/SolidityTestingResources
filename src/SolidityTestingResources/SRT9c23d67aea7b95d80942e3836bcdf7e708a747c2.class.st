Class {
	#name : #SRT9c23d67aea7b95d80942e3836bcdf7e708a747c2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9c23d67aea7b95d80942e3836bcdf7e708a747c2 >> base64 [
	^ ''.
	

]
