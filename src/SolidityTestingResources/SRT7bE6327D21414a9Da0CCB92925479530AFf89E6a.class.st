Class {
	#name : #SRT7bE6327D21414a9Da0CCB92925479530AFf89E6a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7bE6327D21414a9Da0CCB92925479530AFf89E6a >> base64 [
	^ ''.
	

]
