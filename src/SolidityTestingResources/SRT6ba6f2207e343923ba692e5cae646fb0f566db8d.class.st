Class {
	#name : #SRT6ba6f2207e343923ba692e5cae646fb0f566db8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6ba6f2207e343923ba692e5cae646fb0f566db8d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKY29udHJhY3QgQ3J5cHRvUHVua3MgewoKICAgIC8vIFlvdSBjYW4gdXNlIHRoaXMgaGFzaCB0byB2ZXJpZnkgdGhlIGltYWdlIGZpbGUgY29udGFpbmluZyBhbGwgdGhlIHB1bmtzCiAgICBzdHJpbmcgcHVibGljIGltYWdlSGFzaCA9ICJhYzM5YWY0NzkzMTE5ZWU0NmJiZmYzNTFkOGNiNmI1ZjIzZGE2MDIyMjEyNmFkZDQyNjhlMjYxMTk5YTI5MjFiIjsKCiAgICBhZGRyZXNzIG93bmVyOwoKICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnQ3J5cHRvUHVua3MnOwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICB1aW50IHB1YmxpYyBuZXh0UHVua0luZGV4VG9Bc3NpZ24gPSAwOwoKICAgIC8vYm9vbCBwdWJsaWMgYWxsUHVua3NBc3NpZ25lZCA9IGZhbHNlOwogICAgdWludCBwdWJsaWMgcHVua3NSZW1haW5pbmdUb0Fzc2lnbiA9IDA7CiAgICB1aW50IHB1YmxpYyBudW1iZXJPZlB1bmtzVG9SZXNlcnZlOwogICAgdWludCBwdWJsaWMgbnVtYmVyT2ZQdW5rc1Jlc2VydmVkID0gMDsKCiAgICAvL21hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGFkZHJlc3NUb1B1bmtJbmRleDsKICAgIG1hcHBpbmcgKHVpbnQgPT4gYWRkcmVzcykgcHVibGljIHB1bmtJbmRleFRvQWRkcmVzczsKCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKCiAgICBzdHJ1Y3QgT2ZmZXIgewogICAgICAgIGJvb2wgaXNGb3JTYWxlOwogICAgICAgIHVpbnQgcHVua0luZGV4OwogICAgICAgIGFkZHJlc3Mgc2VsbGVyOwogICAgICAgIHVpbnQgbWluVmFsdWU7ICAgICAgICAgIC8vIGluIGV0aGVyCiAgICAgICAgYWRkcmVzcyBvbmx5U2VsbFRvOyAgICAgLy8gc3BlY2lmeSB0byBzZWxsIG9ubHkgdG8gYSBzcGVjaWZpYyBwZXJzb24KICAgIH0KCiAgICAvLyBBIHJlY29yZCBvZiBwdW5rcyB0aGF0IGFyZSBvZmZlcmVkIGZvciBzYWxlIGF0IGEgc3BlY2lmaWMgbWluaW11bSB2YWx1ZSwgYW5kIHBlcmhhcHMgdG8gYSBzcGVjaWZpYyBwZXJzb24KICAgIG1hcHBpbmcgKHVpbnQgPT4gT2ZmZXIpIHB1YmxpYyBwdW5rc09mZmVyZWRGb3JTYWxlOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHBlbmRpbmdXaXRoZHJhd2FsczsKCiAgICBldmVudCBBc3NpZ24oYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHB1bmtJbmRleCk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFB1bmtUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHB1bmtJbmRleCk7CiAgICBldmVudCBQdW5rT2ZmZXJlZCh1aW50IGluZGV4ZWQgcHVua0luZGV4LCB1aW50IG1pblZhbHVlLCBhZGRyZXNzIGluZGV4ZWQgdG9BZGRyZXNzKTsKICAgIGV2ZW50IFB1bmtCb3VnaHQodWludCBpbmRleGVkIHB1bmtJbmRleCwgdWludCB2YWx1ZSwgYWRkcmVzcyBpbmRleGVkIGZyb21BZGRyZXNzLCBhZGRyZXNzIGluZGV4ZWQgdG9BZGRyZXNzKTsKICAgIGV2ZW50IFB1bmtOb0xvbmdlckZvclNhbGUodWludCBpbmRleGVkIHB1bmtJbmRleCk7CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBDcnlwdG9QdW5rcygpIHBheWFibGUgewogICAgICAgIC8vICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG90YWxTdXBwbHkgPSAxMDAwMDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgcHVua3NSZW1haW5pbmdUb0Fzc2lnbiA9IHRvdGFsU3VwcGx5OwogICAgICAgIG51bWJlck9mUHVua3NUb1Jlc2VydmUgPSAxMDAwOwogICAgICAgIG5hbWUgPSAiQ1JZUFRPUFVOS1MiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gIs++IjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXJ2ZVB1bmtzRm9yT3duZXIodWludCBtYXhGb3JUaGlzUnVuKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIGlmIChudW1iZXJPZlB1bmtzUmVzZXJ2ZWQgPj0gbnVtYmVyT2ZQdW5rc1RvUmVzZXJ2ZSkgdGhyb3c7CiAgICAgICAgdWludCBudW1iZXJQdW5rc1Jlc2VydmVkVGhpc1J1biA9IDA7CiAgICAgICAgd2hpbGUgKG51bWJlck9mUHVua3NSZXNlcnZlZCA8IG51bWJlck9mUHVua3NUb1Jlc2VydmUgJiYgbnVtYmVyUHVua3NSZXNlcnZlZFRoaXNSdW4gPCBtYXhGb3JUaGlzUnVuKSB7CiAgICAgICAgICAgIHB1bmtJbmRleFRvQWRkcmVzc1tuZXh0UHVua0luZGV4VG9Bc3NpZ25dID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgQXNzaWduKG1zZy5zZW5kZXIsIG5leHRQdW5rSW5kZXhUb0Fzc2lnbik7CiAgICAgICAgICAgIG51bWJlclB1bmtzUmVzZXJ2ZWRUaGlzUnVuKys7CiAgICAgICAgICAgIG5leHRQdW5rSW5kZXhUb0Fzc2lnbisrOwogICAgICAgIH0KICAgICAgICBwdW5rc1JlbWFpbmluZ1RvQXNzaWduIC09IG51bWJlclB1bmtzUmVzZXJ2ZWRUaGlzUnVuOwogICAgICAgIG51bWJlck9mUHVua3NSZXNlcnZlZCArPSBudW1iZXJQdW5rc1Jlc2VydmVkVGhpc1J1bjsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gbnVtYmVyUHVua3NSZXNlcnZlZFRoaXNSdW47CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHVuayh1aW50IHB1bmtJbmRleCkgewogICAgICAgIGlmIChwdW5rc1JlbWFpbmluZ1RvQXNzaWduID09IDApIHRocm93OwogICAgICAgIGlmIChwdW5rSW5kZXhUb0FkZHJlc3NbcHVua0luZGV4XSAhPSAweDApIHRocm93OwogICAgICAgIHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0rKzsKICAgICAgICBwdW5rc1JlbWFpbmluZ1RvQXNzaWduLS07CiAgICAgICAgQXNzaWduKG1zZy5zZW5kZXIsIHB1bmtJbmRleCk7CiAgICB9CgogICAgLy8gVHJhbnNmZXIgb3duZXJzaGlwIG9mIGEgcHVuayB0byBhbm90aGVyIHVzZXIgd2l0aG91dCByZXF1aXJpbmcgcGF5bWVudAogICAgZnVuY3Rpb24gdHJhbnNmZXJQdW5rKGFkZHJlc3MgdG8sIHVpbnQgcHVua0luZGV4KSB7CiAgICAgICAgaWYgKHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdICE9IG1zZy5zZW5kZXIpIHRocm93OwogICAgICAgIHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdID0gdG87CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdLS07CiAgICAgICAgYmFsYW5jZU9mW3RvXSsrOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCAxKTsKICAgICAgICBQdW5rVHJhbnNmZXIobXNnLnNlbmRlciwgdG8sIHB1bmtJbmRleCk7CiAgICB9CgogICAgZnVuY3Rpb24gcHVua05vTG9uZ2VyRm9yU2FsZSh1aW50IHB1bmtJbmRleCkgewogICAgICAgIGlmIChwdW5rSW5kZXhUb0FkZHJlc3NbcHVua0luZGV4XSAhPSBtc2cuc2VuZGVyKSB0aHJvdzsKICAgICAgICBwdW5rc09mZmVyZWRGb3JTYWxlW3B1bmtJbmRleF0gPSBPZmZlcihmYWxzZSwgcHVua0luZGV4LCBtc2cuc2VuZGVyLCAwLCAweDApOwogICAgICAgIFB1bmtOb0xvbmdlckZvclNhbGUocHVua0luZGV4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvZmZlclB1bmtGb3JTYWxlKHVpbnQgcHVua0luZGV4LCB1aW50IG1pblNhbGVQcmljZUluV2VpKSB7CiAgICAgICAgaWYgKHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdICE9IG1zZy5zZW5kZXIpIHRocm93OwogICAgICAgIHB1bmtzT2ZmZXJlZEZvclNhbGVbcHVua0luZGV4XSA9IE9mZmVyKHRydWUsIHB1bmtJbmRleCwgbXNnLnNlbmRlciwgbWluU2FsZVByaWNlSW5XZWksIDB4MCk7CiAgICAgICAgUHVua09mZmVyZWQocHVua0luZGV4LCBtaW5TYWxlUHJpY2VJbldlaSwgMHgwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvZmZlclB1bmtGb3JTYWxlVG9BZGRyZXNzKHVpbnQgcHVua0luZGV4LCB1aW50IG1pblNhbGVQcmljZUluV2VpLCBhZGRyZXNzIHRvQWRkcmVzcykgewogICAgICAgIGlmIChwdW5rSW5kZXhUb0FkZHJlc3NbcHVua0luZGV4XSAhPSBtc2cuc2VuZGVyKSB0aHJvdzsKICAgICAgICBwdW5rc09mZmVyZWRGb3JTYWxlW3B1bmtJbmRleF0gPSBPZmZlcih0cnVlLCBwdW5rSW5kZXgsIG1zZy5zZW5kZXIsIG1pblNhbGVQcmljZUluV2VpLCB0b0FkZHJlc3MpOwogICAgICAgIFB1bmtPZmZlcmVkKHB1bmtJbmRleCwgbWluU2FsZVByaWNlSW5XZWksIHRvQWRkcmVzcyk7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5UHVuayh1aW50IHB1bmtJbmRleCkgcGF5YWJsZSB7CiAgICAgICAgT2ZmZXIgb2ZmZXIgPSBwdW5rc09mZmVyZWRGb3JTYWxlW3B1bmtJbmRleF07CiAgICAgICAgaWYgKCFvZmZlci5pc0ZvclNhbGUpIHRocm93OyAgICAgICAgICAgICAgICAvLyBwdW5rIG5vdCBhY3R1YWxseSBmb3Igc2FsZQogICAgICAgIGlmIChvZmZlci5vbmx5U2VsbFRvICE9IDB4MCAmJiBvZmZlci5vbmx5U2VsbFRvICE9IG1zZy5zZW5kZXIpIHRocm93OyAgLy8gcHVuayBub3Qgc3VwcG9zZWQgdG8gYmUgc29sZCB0byB0aGlzIHVzZXIKICAgICAgICBpZiAobXNnLnZhbHVlIDwgb2ZmZXIubWluVmFsdWUpIHRocm93OyAgICAgIC8vIERpZG4ndCBzZW5kIGVub3VnaCBFVEgKICAgICAgICBpZiAob2ZmZXIuc2VsbGVyICE9IHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdKSB0aHJvdzsgLy8gU2VsbGVyIG5vIGxvbmdlciBvd25lciBvZiBwdW5rCgogICAgICAgIHB1bmtJbmRleFRvQWRkcmVzc1twdW5rSW5kZXhdID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlT2Zbb2ZmZXIuc2VsbGVyXS0tOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSsrOwogICAgICAgIFRyYW5zZmVyKG9mZmVyLnNlbGxlciwgbXNnLnNlbmRlciwgMSk7CgogICAgICAgIHB1bmtOb0xvbmdlckZvclNhbGUocHVua0luZGV4KTsKICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbb2ZmZXIuc2VsbGVyXSArPSBtc2cudmFsdWU7CiAgICAgICAgUHVua0JvdWdodChwdW5rSW5kZXgsIG1zZy52YWx1ZSwgb2ZmZXIuc2VsbGVyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIHsKICAgICAgICB1aW50IGFtb3VudCA9IHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXTsKICAgICAgICAvLyBSZW1lbWJlciB0byB6ZXJvIHRoZSBwZW5kaW5nIHJlZnVuZCBiZWZvcmUKICAgICAgICAvLyBzZW5kaW5nIHRvIHByZXZlbnQgcmUtZW50cmFuY3kgYXR0YWNrcwogICAgICAgIHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgfQp9'.
	

]
