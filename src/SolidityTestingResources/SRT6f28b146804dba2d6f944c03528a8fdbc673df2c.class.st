Class {
	#name : #SRT6f28b146804dba2d6f944c03528a8fdbc673df2c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6f28b146804dba2d6f944c03528a8fdbc673df2c >> base64 [
	^ ''.
	

]
