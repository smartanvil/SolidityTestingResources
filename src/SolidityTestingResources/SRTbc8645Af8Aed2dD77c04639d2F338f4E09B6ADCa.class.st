Class {
	#name : #SRTbc8645Af8Aed2dD77c04639d2F338f4E09B6ADCa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbc8645Af8Aed2dD77c04639d2F338f4E09B6ADCa >> base64 [
	^ ''.
	

]
