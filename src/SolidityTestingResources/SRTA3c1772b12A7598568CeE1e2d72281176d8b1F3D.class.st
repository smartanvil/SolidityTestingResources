Class {
	#name : #SRTA3c1772b12A7598568CeE1e2d72281176d8b1F3D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA3c1772b12A7598568CeE1e2d72281176d8b1F3D >> base64 [
	^ ''.
	

]
