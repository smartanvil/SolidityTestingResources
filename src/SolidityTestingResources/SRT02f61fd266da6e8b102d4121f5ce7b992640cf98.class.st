Class {
	#name : #SRT02f61fd266da6e8b102d4121f5ce7b992640cf98,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02f61fd266da6e8b102d4121f5ce7b992640cf98 >> base64 [
	^ ''.
	

]
