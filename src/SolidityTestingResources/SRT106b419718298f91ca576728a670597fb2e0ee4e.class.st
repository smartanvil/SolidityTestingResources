Class {
	#name : #SRT106b419718298f91ca576728a670597fb2e0ee4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT106b419718298f91ca576728a670597fb2e0ee4e >> base64 [
	^ ''.
	

]
