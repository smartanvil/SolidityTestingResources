Class {
	#name : #SRTaaaf91d9b90df800df4f55c205fd6989c977e73a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaaaf91d9b90df800df4f55c205fd6989c977e73a >> base64 [
	^ ''.
	

]
