Class {
	#name : #SRT84f5fb60fccd73f06867d800445b3fd8b01a2dd4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT84f5fb60fccd73f06867d800445b3fd8b01a2dd4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBXb2xrZXIgewogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBhbGxvY2F0aW9uczsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpKSBhdXRob3JpemVkOyAvL3RydXN0ZWUKCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUsIGJhbGFuY2VzW21zZy5zZW5kZXJdLCBiYWxhbmNlc1tfdG9dKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICB0aHJvdzsKICAgIH0KICB9CiAgCiAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsKICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSwgYmFsYW5jZXNbX2Zyb21dLCBiYWxhbmNlc1tfdG9dKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICB0aHJvdzsKICAgIH0KICB9CiAKICAvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGdlbmVyYWxUb2tlbnMgKyByZXNlcnZlZFRva2VuczsKICB9CiAKICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKCiAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIFdvbGsgdG9rZW4gdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKCiAgLy8vIEBwYXJhbSBfdHJ1c3RlZSBHcmFudCB0cnVzdGVlIHBlcm1pc3Npb24gdG8gc2V0dGxlIG1lZGlhIHNwZW5kCiAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXV0aG9yaXphdGlvbiB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICBmdW5jdGlvbiBhdXRob3JpemUoYWRkcmVzcyBfdHJ1c3RlZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhdXRob3JpemVkW21zZy5zZW5kZXJdW190cnVzdGVlXSA9IHRydWU7CiAgICBBdXRob3JpemF0aW9uKG1zZy5zZW5kZXIsIF90cnVzdGVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBwYXJhbSBfdHJ1c3RlZV90b19yZW1vdmUgUmV2b2tlIHRydXN0ZWUncyBwZXJtaXNzaW9uIG9uIHNldHRsZSBtZWRpYSBzcGVuZCAKICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBkZWF1dGhvcml6YXRpb24gd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgZnVuY3Rpb24gZGVhdXRob3JpemUoYWRkcmVzcyBfdHJ1c3RlZV90b19yZW1vdmUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYXV0aG9yaXplZFttc2cuc2VuZGVyXVtfdHJ1c3RlZV90b19yZW1vdmVdID0gZmFsc2U7CiAgICBEZWF1dGhvcml6YXRpb24obXNnLnNlbmRlciwgX3RydXN0ZWVfdG9fcmVtb3ZlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gQHBhcmFtIF9vd25lcgogIC8vIEBwYXJhbSBfdHJ1c3RlZQogIC8vIEByZXR1cm4gYXV0aG9yaXphdGlvbl9zdGF0dXMgZm9yIHBsYXRmb3JtIHNldHRsZW1lbnQgCiAgZnVuY3Rpb24gY2hlY2tfYXV0aG9yaXphdGlvbihhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfdHJ1c3RlZSkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBhdXRob3JpemF0aW9uX3N0YXR1cykgewogICAgcmV0dXJuIGF1dGhvcml6ZWRbX293bmVyXVtfdHJ1c3RlZV07CiAgfQoKICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBhbGxvd2VkIHRvIHNwZW50CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKCiAgLy8qKioqIEVSQzIwIFRPSyBFdmVudHM6CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSwgdWludCBmcm9tX2ZpbmFsX3RvaywgdWludCB0b19maW5hbF90b2spOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IEF1dGhvcml6YXRpb24oYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF90cnVzdGVlKTsKICBldmVudCBEZWF1dGhvcml6YXRpb24oYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF90cnVzdGVlX3RvX3JlbW92ZSk7CgogIGV2ZW50IE5ld093bmVyKGFkZHJlc3MgX25ld093bmVyKTsKICBldmVudCBNaW50RXZlbnQodWludCByZXdhcmRfdG9rLCBhZGRyZXNzIHJlY2lwaWVudCk7CiAgZXZlbnQgTG9nUmVmdW5kKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBDcmVhdGVXb2xrKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICBldmVudCBWZXN0ZWQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICBtb2RpZmllciBvbmx5T3duZXIgewogICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIGlzT3BlcmF0aW9uYWwoKSB7CiAgICBhc3NlcnQoaXNGaW5hbGl6ZWQpOwogICAgXzsKICB9CgoKICAvLyoqKiogRVJDMjAgVE9LIGZpZWxkczoKICBzdHJpbmcgIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ1dvbGsnOwogIHN0cmluZyAgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJXT0xLIjsKICBzdHJpbmcgIHB1YmxpYyBjb25zdGFudCB2ZXJzaW9uID0gIjAuMiI7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB3b2xrRnVuZCAgPSAgMTAgKiAxMCoqMSAqIDEwKipkZWNpbWFsczsgICAgICAgIC8vICAxMDAgV29sayBpbiBvcGVyYXRpb24gRnVuZAogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuQ3JlYXRpb25NaW4gPSAgMjAgKiAxMCoqMSAqIDEwKipkZWNpbWFsczsgLy8gIDIwMCBXb2xrIE1pbgogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuQ3JlYXRpb25NYXggPSAxMDAgKiAxMCoqMSAqIDEwKipkZWNpbWFsczsgLy8gMTAwMCBXb2xrIE1heAogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuRXhjaGFuZ2VSYXRlID0gMTAwMDA7ICAgLy8gMTAwMDAgV29sayBwZXIgMSBFVEgKICB1aW50MjU2IHB1YmxpYyBnZW5lcmFsVG9rZW5zID0gd29sa0Z1bmQ7IC8vIHRva2VucyBpbiBjaXJjdWxhdGlvbgogIHVpbnQyNTYgcHVibGljIHJlc2VydmVkVG9rZW5zOyAKCiAgLy9hZGRyZXNzIHB1YmxpYyBvd25lciA9IG1zZy5zZW5kZXI7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXIgPSAweEMyOGRBNGQ0Mjg2Njc1OGQwRmM0OWE1QTM5NDhBMWY0M2RlNDkxZTk7IC8vIFVybWkKICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ19vd25lciA9IDB4Njk2OGE5YjkwMjQ1Y0I5YkQyNTA2Qjk0NjBlM0QxM0VENEIyRkQxZTsgLy8gbmV3IG11bHRpLXNpZwoKICBib29sIHB1YmxpYyBpc0ZpbmFsaXplZCA9IGZhbHNlOyAgICAgICAgICAvLyBhZnRlciB0b2tlbiBzYWxlIHN1Y2Nlc3MsIHRoaXMgaXMgdHJ1ZQogIHVpbnQgcHVibGljIGNvbnN0YW50IGR1c3QgPSAxMDAwMDAwIHdlaTsgCiAgYm9vbCBwdWJsaWMgZmFpcnNhbGVfcHJvdGVjdGlvbiA9IHRydWU7CgogIAogICAgIC8vIEFjdHVhbCBjcm93ZHNhbGUKICB1aW50MjU2IHB1YmxpYyBzdGFydF9ibG9jazsgICAgICAgICAgICAgICAgLy8gU3RhcnRpbmcgYmxvY2sKICB1aW50MjU2IHB1YmxpYyBlbmRfYmxvY2s7ICAgICAgICAgICAgICAgICAgLy8gRW5kaW5nIGJsb2NrCiAgdWludDI1NiBwdWJsaWMgdW5sb2NrZWRBdDsgICAgICAgICAgICAgICAgIC8vIFVubG9ja2luZyBibG9jayAKIAogIHVpbnQyNTYgcHVibGljIGVuZF90czsgICAgICAgICAgICAgICAgICAgICAvLyBVbml4IEVuZCB0aW1lCgoKICAvLyBtaW50aW5nIHN1cHBvcnQKICAvL3VpbnQgcHVibGljIG1heF9jcmVhdGlvbl9yYXRlX3Blcl9zZWNvbmQ7IC8vIE1heGltdW0gdG9rZW4gY3JlYXRpb24gcmF0ZSBwZXIgc2Vjb25kCiAgLy9hZGRyZXNzIHB1YmxpYyBtaW50ZXJfYWRkcmVzczsgICAgICAgICAgICAvLyBIYXMgcGVybWlzc2lvbiB0byBtaW50CgogIC8vIG1pZ3JhdGlvbiBzdXBwb3J0CiAgLy9hZGRyZXNzIG1pZ3JhdGlvbk1hc3RlcjsKCgogIC8vKioqKiBDb25zdHJ1Y3RvcjoKICBmdW5jdGlvbiBXb2xrKCkgCiAgewogICAgaWYgKCBtc2cuc2VuZGVyICE9IG93bmVyICkgdGhyb3c7CiAgICAvLyBBY3R1YWwgY3Jvd2RzYWxlCiAgICBzdGFydF9ibG9jayA9IDM4MzU4NTM7CiAgICBlbmRfYmxvY2sgPSAzODM2MzUzOwoKICAgIC8vIHdvbGtGdW5kIGlzIDEwMAogICAgYmFsYW5jZXNbb3duZXJdID0gd29sa0Z1bmQ7CgogICAgLy8gV29sayBJbmMgaGFzIDI1TU0gV29saywgNU1NIG9mIHdoaWNoIGlzIGFsbG9jYXRlZCBmb3IgV29sayBJbmMgRm91bmRpbmcgc3RhZmYsIHdobyB2ZXN0IGF0ICJ1bmxvY2tlZEF0IiB0aW1lCiAgICByZXNlcnZlZFRva2VucyA9IDI1ICogMTAqKmRlY2ltYWxzOwogICAgYWxsb2NhdGlvbnNbMHg1NjRhM2Y3ZDk4RWI1QjE3OTExMzJGODg3NWZlZjU4MmQ1MjhkNUNmXSA9IDIwOyAvLyB1bmFzc2lnbmVkCiAgICBhbGxvY2F0aW9uc1sweDdmNTEyQ0NGRUYwNUY2NTFBNzBGYTMyMkNlMjdGNGFkNzliNzRmZmVdID0gMTsgIC8vIFNvdXJhYmgKICAgIGFsbG9jYXRpb25zWzB4OUQyMDNBMzZjZDYxYjIxQjdDOGM3RGExZDhlZUIxM2YwNGJiMjREOV0gPSAyOyAgLy8gTWljaGFlbCAtIFRlc3QKICAgIGFsbG9jYXRpb25zWzB4NWZjZjcwMDY1NEI4MDYyQjcwOWE0MTUyN0ZBZkNkYTM2N2RhRTdiMV0gPSAxOyAgLy8gTWljaGFlbCAtIE1haW4KICAgIGFsbG9jYXRpb25zWzB4QzI4ZEE0ZDQyODY2NzU4ZDBGYzQ5YTVBMzk0OEExZjQzZGU0OTFlOV0gPSAxOyAgLy8gVXJtaQogICAgCiAgICBDcmVhdGVXb2xrKG93bmVyLCB3b2xrRnVuZCk7IAogIH0KCiAgLy8gKioqKioqIFZFU1RJTkcgU1VQUE9SVAogIC8vLyBAbm90aWNlIEFsbG93IGRldmVsb3BlciB0byB1bmxvY2sgYWxsb2NhdGVkIHRva2VucyBieSB0cmFuc2ZlcnJpbmcgdGhlbSB0byBkZXZlbG9wZXIncyBhZGRyZXNzIG9uIHZlc3Rpbmcgc2NoZWR1bGUgb2YgInZlc3RlZCAxMDAlIG9uIDEgeWVhcikKICBmdW5jdGlvbiB1bmxvY2soKSBleHRlcm5hbCB7CiAgICBpZiAobm93IDwgdW5sb2NrZWRBdCkgdGhyb3c7CiAgICB1aW50MjU2IHZlc3RlZCA9IGFsbG9jYXRpb25zW21zZy5zZW5kZXJdICogMTAqKmRlY2ltYWxzOwogICAgaWYgKHZlc3RlZCA8IDAgKSB0aHJvdzsgLy8gV2lsbCBmYWlsIGlmIGFsbG9jYXRpb24gKGFuZCB0aGVyZWZvcmUgdG9UcmFuc2ZlcikgaXMgMC4KICAgIGFsbG9jYXRpb25zW21zZy5zZW5kZXJdID0gMDsKICAgIHJlc2VydmVkVG9rZW5zID0gc2FmZVN1YihyZXNlcnZlZFRva2VucywgdmVzdGVkKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZUFkZChiYWxhbmNlc1ttc2cuc2VuZGVyXSwgdmVzdGVkKTsgCiAgICBWZXN0ZWQobXNnLnNlbmRlciwgdmVzdGVkKTsKICB9CgogIC8vICoqKioqKiogQ1JPV0RTQUxFIFNVUFBPUlQKICAvLyBBY2NlcHRzIEVUSCBhbmQgY3JlYXRlcyBXT0xLCiAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKCkgcGF5YWJsZSBleHRlcm5hbCBpc19ub3RfZHVzdCB7CiAgICBpZiAoaXNGaW5hbGl6ZWQpIHRocm93OwogICAgaWYgKGJsb2NrLm51bWJlciA8IHN0YXJ0X2Jsb2NrKSB0aHJvdzsKICAgIGlmIChibG9jay5udW1iZXIgPiBlbmRfYmxvY2spIHRocm93OwogICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB0aHJvdzsKICAgIGlmICh0eC5nYXNwcmljZSA+IDAuMDIxIHN6YWJvICYmIGZhaXJzYWxlX3Byb3RlY3Rpb24pIHRocm93OyAKICAgIGlmIChtc2cudmFsdWUgPiAwLjA0IGV0aGVyICYmIGZhaXJzYWxlX3Byb3RlY3Rpb24pIHRocm93OyAKCiAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWwobXNnLnZhbHVlLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7IC8vIGNoZWNrIHRoYXQgd2UncmUgbm90IG92ZXIgdG90YWxzCiAgICB1aW50MjU2IGNoZWNrZWRTdXBwbHkgPSBzYWZlQWRkKGdlbmVyYWxUb2tlbnMsIHRva2Vucyk7CiAgICBpZiAoIGNoZWNrZWRTdXBwbHkgPiB0b2tlbkNyZWF0aW9uTWF4KSB7IAogICAgICB0aHJvdzsgLy8gdGhleSBuZWVkIHRvIGdldCB0aGVpciBtb25leSBiYWNrIGlmIHNvbWV0aGluZyBnb2VzIHdyb25nCiAgICB9IGVsc2UgewogICAgICBnZW5lcmFsVG9rZW5zID0gY2hlY2tlZFN1cHBseTsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW21zZy5zZW5kZXJdLCB0b2tlbnMpOyAgIC8vIHNhZmVBZGQgbm90IG5lZWRlZDsgYmFkIHNlbWFudGljcyB0byB1c2UgaGVyZQogICAgICBDcmVhdGVXb2xrKG1zZy5zZW5kZXIsIHRva2Vucyk7IC8vIGxvZ3MgdG9rZW4gY3JlYXRpb24KICAgIH0KICB9CiAgCiAgLy8gVGhlIHZhbHVlIG9mIHRoZSBtZXNzYWdlIG11c3QgYmUgc3VmZmljaWVudGx5IGxhcmdlIHRvIG5vdCBiZSBjb25zaWRlcmVkIGR1c3QuCiAgbW9kaWZpZXIgaXNfbm90X2R1c3QgeyBpZiAobXNnLnZhbHVlIDwgZHVzdCkgdGhyb3c7IF87IH0KCiAgLy8gRGlzYWJsaW5nIGZhaXJzYWxlIHByb3RlY3Rpb24gIAogIGZ1bmN0aW9uIGZhaXJzYWxlX3Byb3RlY3Rpb25PRkYoKSBleHRlcm5hbCB7CiAgICBpZiAoIGJsb2NrLm51bWJlciAtIHN0YXJ0X2Jsb2NrIDwgMjAwKSB0aHJvdzsgLy8gZmFpcnNhbGUgd2luZG93IGlzIHN0cmljdGx5IGVuZm9yY2VkCiAgICBpZiAoIG1zZy5zZW5kZXIgIT0gb3duZXIgKSB0aHJvdzsKICAgIGZhaXJzYWxlX3Byb3RlY3Rpb24gPSBmYWxzZTsKICB9CgogIC8vIEZpbmFsaXppbmcgdGhlIGNyb3dkc2FsZQogIGZ1bmN0aW9uIGZpbmFsaXplKCkgZXh0ZXJuYWwgewogICAgaWYgKCBpc0ZpbmFsaXplZCApIHRocm93OwogICAgaWYgKCBtc2cuc2VuZGVyICE9IG93bmVyICkgdGhyb3c7ICAvLyBsb2NrcyBmaW5hbGl6ZSB0byBFVEggb3duZXIKICAgIGlmICggZ2VuZXJhbFRva2VucyA8IHRva2VuQ3JlYXRpb25NaW4gKSB0aHJvdzsgLy8gaGF2ZSB0byBzZWxsIHRva2VuQ3JlYXRpb25NaW4gdG8gZmluYWxpemUKICAgIGlmICggYmxvY2subnVtYmVyIDwgZW5kX2Jsb2NrICkgdGhyb3c7ICAKICAgIGlzRmluYWxpemVkID0gdHJ1ZTsKICAgIGVuZF90cyA9IG5vdzsKICAgIHVubG9ja2VkQXQgPSBlbmRfdHMgKyAyIG1pbnV0ZXM7CiAgICBpZiAoICEgbXVsdGlzaWdfb3duZXIuc2VuZCh0aGlzLmJhbGFuY2UpICkgdGhyb3c7CiAgfQoKICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbCB7CiAgICBpZiAoIGlzRmluYWxpemVkICkgdGhyb3c7IAogICAgaWYgKCBibG9jay5udW1iZXIgPCBlbmRfYmxvY2sgKSB0aHJvdzsgICAKICAgIGlmICggZ2VuZXJhbFRva2VucyA+PSB0b2tlbkNyZWF0aW9uTWluICkgdGhyb3c7ICAKICAgIGlmICggbXNnLnNlbmRlciA9PSBvd25lciApIHRocm93OwogICAgdWludDI1NiBWYWwgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgIGdlbmVyYWxUb2tlbnMgPSBzYWZlU3ViKGdlbmVyYWxUb2tlbnMsIFZhbCk7CiAgICB1aW50MjU2IGV0aFZhbCA9IHNhZmVEaXYoVmFsLCB0b2tlbkV4Y2hhbmdlUmF0ZSk7CiAgICBMb2dSZWZ1bmQobXNnLnNlbmRlciwgZXRoVmFsKTsKICAgIGlmICggISBtc2cuc2VuZGVyLnNlbmQoZXRoVmFsKSApIHRocm93OwogIH0KICAgIAogIC8vICoqKioqKiBQbGF0Zm9ybSBTZXR0bGVtZW50CiAgZnVuY3Rpb24gc2V0dGxlRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlzT3BlcmF0aW9uYWwoKSBleHRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CiAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiAoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlIHx8IGF1dGhvcml6ZWRbX2Zyb21dW21zZy5zZW5kZXJdID09IHRydWUgKSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsKICAgICAgaWYgKCBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA8IDAgKXsKICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSAwOwogICAgICB9CiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSwgYmFsYW5jZXNbX2Zyb21dLCBiYWxhbmNlc1tfdG9dKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICB0aHJvdzsKICAgIH0KICB9CgogIC8vICoqKioqKiBNSU5USU5HIFNVUFBPUlQKICAvLyBNaW50IG5ldyB0b2tlbnMKICBtb2RpZmllciBvbmx5X21pbnRlciB7CiAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBtaW50ZXJfYWRkcmVzcyk7CiAgICBfOwogIH0KICAKICBhZGRyZXNzIHB1YmxpYyBtaW50ZXJfYWRkcmVzcyA9IG93bmVyOyAgICAgICAgICAgIC8vIEhhcyBwZXJtaXNzaW9uIHRvIG1pbnQKCiAgZnVuY3Rpb24gbWludFRva2Vucyh1aW50IHJld2FyZF90b2ssIGFkZHJlc3MgcmVjaXBpZW50KSBleHRlcm5hbCBwYXlhYmxlIG9ubHlfbWludGVyCiAgewogICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IHNhZmVBZGQoYmFsYW5jZXNbcmVjaXBpZW50XSwgcmV3YXJkX3Rvayk7CiAgICBnZW5lcmFsVG9rZW5zID0gc2FmZUFkZChnZW5lcmFsVG9rZW5zLCByZXdhcmRfdG9rKTsKICAgIE1pbnRFdmVudChyZXdhcmRfdG9rLCByZWNpcGllbnQpOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlTWludGluZ0FkZHJlc3MoYWRkcmVzcyBuZXdBZGRyZXNzKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7IAogICAgbWludGVyX2FkZHJlc3MgPSBuZXdBZGRyZXNzOyAKICAgIHJldHVybiB0cnVlOwogIH0KCiAgCiAgLy8qKioqIFNhZmVNYXRoOgogIGZ1bmN0aW9uIHNhZmVNdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KICAKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KICAKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CiAgCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgdGhyb3c7CiAgfQp9'.
	

]
