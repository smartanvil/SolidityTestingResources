Class {
	#name : #SRT1556a3ddb4fa2e9e8d6355380e4d22f9d32592cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1556a3ddb4fa2e9e8d6355380e4d22f9d32592cc >> base64 [
	^ 'LyoKICogU2FmZSBNYXRoIFNtYXJ0IENvbnRyYWN0LgogKiBBdXRob3I6IE1pa2hhaWwgVmxhZGltaXJvdiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI5NGY5ZmRmZmZjZjVmZGY4YmFlMmY4ZjVmMGZkZjlmZGU2ZmJlMmQ0ZjNmOWY1ZmRmOGJhZjdmYmY5Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KICovCnByYWdtYSBzb2xpZGl0eSBeMC40LjE2OwoKLyoqCiAqIFByb3ZpZGVzIG1ldGhvZHMgdG8gc2FmZWx5IGFkZCwgc3VidHJhY3QgYW5kIG11bHRpcGx5IHVpbnQyNTYgbnVtYmVycy4KICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICB1aW50MjU2IGNvbnN0YW50IHByaXZhdGUgTUFYX1VJTlQyNTYgPQogICAgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGOwoKICAvKioKICAgKiBBZGQgdHdvIHVpbnQyNTYgdmFsdWVzLCB0aHJvdyBpbiBjYXNlIG9mIG92ZXJmbG93LgogICAqCiAgICogQHBhcmFtIHggZmlyc3QgdmFsdWUgdG8gYWRkCiAgICogQHBhcmFtIHkgc2Vjb25kIHZhbHVlIHRvIGFkZAogICAqIEByZXR1cm4geCArIHkKICAgKi8KICBmdW5jdGlvbiBzYWZlQWRkICh1aW50MjU2IHgsIHVpbnQyNTYgeSkKICBjb25zdGFudCBpbnRlcm5hbAogIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgYXNzZXJ0ICh4IDw9IE1BWF9VSU5UMjU2IC0geSk7CiAgICByZXR1cm4geCArIHk7CiAgfQoKICAvKioKICAgKiBTdWJ0cmFjdCBvbmUgdWludDI1NiB2YWx1ZSBmcm9tIGFub3RoZXIsIHRocm93IGluIGNhc2Ugb2YgdW5kZXJmbG93LgogICAqCiAgICogQHBhcmFtIHggdmFsdWUgdG8gc3VidHJhY3QgZnJvbQogICAqIEBwYXJhbSB5IHZhbHVlIHRvIHN1YnRyYWN0CiAgICogQHJldHVybiB4IC0geQogICAqLwogIGZ1bmN0aW9uIHNhZmVTdWIgKHVpbnQyNTYgeCwgdWludDI1NiB5KQogIGNvbnN0YW50IGludGVybmFsCiAgcmV0dXJucyAodWludDI1NiB6KSB7CiAgICBhc3NlcnQgKHggPj0geSk7CiAgICByZXR1cm4geCAtIHk7CiAgfQoKICAvKioKICAgKiBNdWx0aXBseSB0d28gdWludDI1NiB2YWx1ZXMsIHRocm93IGluIGNhc2Ugb2Ygb3ZlcmZsb3cuCiAgICoKICAgKiBAcGFyYW0geCBmaXJzdCB2YWx1ZSB0byBtdWx0aXBseQogICAqIEBwYXJhbSB5IHNlY29uZCB2YWx1ZSB0byBtdWx0aXBseQogICAqIEByZXR1cm4geCAqIHkKICAgKi8KICBmdW5jdGlvbiBzYWZlTXVsICh1aW50MjU2IHgsIHVpbnQyNTYgeSkKICBjb25zdGFudCBpbnRlcm5hbAogIHJldHVybnMgKHVpbnQyNTYgeikgewogICAgaWYgKHkgPT0gMCkgcmV0dXJuIDA7IC8vIFByZXZlbnQgZGl2aXNpb24gYnkgemVybyBhdCB0aGUgbmV4dCBsaW5lCiAgICBhc3NlcnQgKHggPD0gTUFYX1VJTlQyNTYgLyB5KTsKICAgIHJldHVybiB4ICogeTsKICB9Cn0gCgovKgogKiBFUkMtMjAgU3RhbmRhcmQgVG9rZW4gU21hcnQgQ29udHJhY3QgSW50ZXJmYWNlLgogKiBBdXRob3I6IE1pa2hhaWwgVmxhZGltaXJvdiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI4ZGUwZTRlNmU1ZWNlNGUxYTNmYmUxZWNlOWU0ZTBlNGZmZTJmYmNkZWFlMGVjZTRlMWEzZWVlMmUwIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KICovCnByYWdtYSBzb2xpZGl0eSBeMC40LjE2OwoKLyoqCiAqIEVSQy0yMCBzdGFuZGFyZCB0b2tlbiBpbnRlcmZhY2UsIGFzIGRlZmluZWQKICogPGEgaHJlZj0iaHR0cDovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAiPmhlcmU8L2E+LgogKi8KY29udHJhY3QgVG9rZW4gewogIC8qKgogICAqIEdldCB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uLgogICAqCiAgICogQHJldHVybiB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uCiAgICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkgKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwoKICAvKioKICAgKiBHZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlCiAgICogICAgICAgIG93bmVyIG9mCiAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YgKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlciAoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbgogICAqICAgICAgICByZWNpcGllbnQKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20gKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAvKioKICAgKiBBbGxvdyBnaXZlbiBzcGVuZGVyIHRvIHRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBtZXNzYWdlIHNlbmRlci4KICAgKgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIHRvIGFsbG93IHRoZSBvd25lciBvZiB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbQogICAqICAgICAgICBtZXNzYWdlIHNlbmRlcgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byBhbGxvdyB0byB0cmFuc2ZlcgogICAqIEByZXR1cm4gdHJ1ZSBpZiB0b2tlbiB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bGx5IGFwcHJvdmVkLCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgLyoqCiAgICogVGVsbCBob3cgbWFueSB0b2tlbnMgZ2l2ZW4gc3BlbmRlciBpcyBjdXJyZW50bHkgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tCiAgICogZ2l2ZW4gb3duZXIuCiAgICoKICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gZ2V0IG51bWJlciBvZiB0b2tlbnMgYWxsb3dlZCB0byBiZSB0cmFuc2ZlcnJlZAogICAqICAgICAgICBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgYnkgdGhlIG93bmVyIG9mCiAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIKICAgKiAgICAgICAgIGZyb20gZ2l2ZW4gb3duZXIKICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UgKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudAogIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKCiAgLyoqCiAgICogTG9nZ2VkIHdoZW4gdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgZnJvbSBvbmUgb3duZXIgdG8gYW5vdGhlci4KICAgKgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIG9mIHRoZSBvd25lciwgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBvZiB0aGUgb3duZXIsIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHRvCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRyYW5zZmVycmVkCiAgICovCiAgZXZlbnQgVHJhbnNmZXIgKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAvKioKICAgKiBMb2dnZWQgd2hlbiBvd25lciBhcHByb3ZlZCBoaXMgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkIGJ5IHNvbWUgc3BlbmRlci4KICAgKgogICAqIEBwYXJhbSBfb3duZXIgb3duZXIgd2hvIGFwcHJvdmVkIGhpcyB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiBAcGFyYW0gX3NwZW5kZXIgc3BlbmRlciB3aG8gd2VyZSBhbGxvd2VkIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMgYmVsb25naW5nCiAgICogICAgICAgIHRvIHRoZSBvd25lcgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyBiZWxvbmdpbmcgdG8gdGhlIG93bmVyLCBhcHByb3ZlZCB0byBiZQogICAqICAgICAgICB0cmFuc2ZlcnJlZCBieSB0aGUgc3BlbmRlcgogICAqLwogIGV2ZW50IEFwcHJvdmFsICgKICAgIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9IAoKLyoKICogQWJzdHJhY3QgYmFzZSBjb250cmFjdCBmb3IgVG9rZW4gU21hcnQgQ29udHJhY3RzIHRoYXQgbWF5IGNyZWF0ZSBzbmFwc2hvdHMgb2YKICogdG9rZW4gaG9sZGVyIGJhbGFuY2VzLgogKiBBdXRob3I6IE1pa2hhaWwgVmxhZGltaXJvdiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJiOGQ1ZDFkM2QwZDlkMWQ0OTZjZWQ0ZDlkY2QxZDVkMWNhZDdjZWY4ZGZkNWQ5ZDFkNDk2ZGJkN2Q1Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KICovCnByYWdtYSBzb2xpZGl0eSBeMC40LjE2OwoKCi8qKgogKiBBYnN0cmFjdCBiYXNlIGNvbnRyYWN0IFRva2VuIFNtYXJ0IENvbnRyYWN0cyB0aGF0IHN1cHBvcnQgc25hcHNob3RzIG9mIHRva2VuCiAqIGhvbGRlciBiYWxhbmNlcy4KICovCmNvbnRyYWN0IEFic3RyYWN0U25hcHNob3R0YWJsZVRva2VuIGlzIFNhZmVNYXRoLCBUb2tlbiB7CiAgLyoqCiAgICogTWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uICgyXjI1NiAtIDEpLgogICAqLwogIHVpbnQyNTYgY29uc3RhbnQgTUFYX1RPS0VOUyA9IDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgLyoqCiAgICogTWF4aW11bSB2YWx1ZSBvZiB1aW50MjU2IHR5cGUsIGkuZS4gMl4yNTYtMS4KICAgKi8KICB1aW50MjU2IGNvbnN0YW50IE1BWF9VSU5UMjU2ID0gMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGOwoKICAvKioKICAgKiBNYXhpbXVtIHZhbHVlIG9mIGFkZHJlc3MgcmVwcmVzZW50ZWQgYXMgdWludDI1NiwgaS5lLiAyXjE2MC0xLgogICAqLwogIHVpbnQyNTYgY29uc3RhbnQgTUFYX0FERFJFU1MgPSAweDAwRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjsKCiAgLyoqCiAgICogMl4xNjAuCiAgICovCiAgdWludDI1NiBjb25zdGFudCBUV09fMTYwID0gMHgwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKCiAgLyoqCiAgICogQ3JlYXRlIG5ldyBBYnN0cmFjdCBTbmFwc2hvdHRhYmxlIFRva2VuIHNtYXJ0IGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIEFic3RyYWN0U25hcHNob3R0YWJsZVRva2VuICgpIHsKICAgIHNuYXBzaG90cy5sZW5ndGggPSAxOyAvLyBSZXNlcnZlIHplcm8gSUQuCiAgfQoKICAvKioKICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbi4KICAgKgogICAqIEByZXR1cm4gdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbgogICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KSB7CiAgICByZXR1cm4gdG9rZW5zQ291bnQ7CiAgfQoKICAvKioKICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBjaXJjdWxhdGlvbiBhcyBpcyB3YXMgYXQgdGhlIG1vbWVudCB3aGVuCiAgICogc25hcHNob3Qgd2l0aCBnaXZlbiBpbmRleCB3YXMgY3JlYXRlZC4KICAgKgogICAqIEBwYXJhbSBfaW5kZXggaW5kZXggb2YgdGhlIHNuYXBzaG90IHRvIGdldCB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluCiAgICogICAgICAgIGNpcmN1bGF0aW9uIGF0IHRoZSBtb21lbnQgb2YKICAgKiBAcmV0dXJuIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gY2lyY3VsYXRpb24gYXQgdGhlIG1vbWVudCBzbmFwc2hvdCB3aXRoCiAgICogICAgICAgICBnaXZlbiBpbmRleCB3YXMgY3JlYXRlZAogICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5QXQgKHVpbnQyNTYgX2luZGV4KSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSkgewogICAgcmVxdWlyZSAoX2luZGV4ID4gMCk7CiAgICByZXF1aXJlIChfaW5kZXggPCBzbmFwc2hvdHMubGVuZ3RoKTsKCiAgICByZXR1cm4gc25hcHNob3RzIFtfaW5kZXhdLnRva2Vuc0NvdW50OwogIH0KCiAgLyoqCiAgICogR2V0IG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGJlbG9uZ2luZyB0byB0aGUgb3duZXIgb2YgZ2l2ZW4gYWRkcmVzcy4KICAgKgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZQogICAqICAgICAgICBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYWNjb3VudHMgW19vd25lcl0uYmFsYW5jZTsKICB9CgogIC8qKgogICAqIEdldCBudW1iZXIgb2YgdG9rZW5zIG93bmVyIG9mIHRoZSBnaXZlbiBhZGRyZXNzIGhhZCBhdCB0aGUgbW9tZW50IHdoZW4KICAgKiBzbmFwc2hvdCB3aXRoIGdpdmVuIGluZGV4IHdhcyBjcmVhdGVkLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGZvciB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX2luZGV4IGluZGV4IG9mIHRoZSBzbmFwc2hvdCB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhdCB0aGUgdGltZSBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBvd25lciBvZiB0aGUgZ2l2ZW4gYWRkcmVzcyBoYWQgYXQgdGhlIG1vbWVudCB0aGUKICAgKiAgICAgICAgIHNuYXBzaG90IHdpdGggZ2l2ZW4gaW5kZXggd2FzIGNyZWF0ZWQKICAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2ZBdCAoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KQogICAgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXF1aXJlIChfaW5kZXggPiAwKTsKICAgIHJlcXVpcmUgKF9pbmRleCA8IHNuYXBzaG90cy5sZW5ndGgpOwoKICAgIGlmIChfaW5kZXggPiBhY2NvdW50cyBbX293bmVyXS5sYXN0U25hcHNob3RJbmRleCkKICAgICAgcmV0dXJuIGFjY291bnRzIFtfb3duZXJdLmJhbGFuY2U7CiAgICBlbHNlIHsKICAgICAgdWludDggbGV2ZWwgPSAwOwogICAgICB3aGlsZSAoX2luZGV4ID4gMCkgewogICAgICAgIHVpbnQyNTYgdiA9IGhpc3RvcmljYWxCYWxhbmNlcyBbX293bmVyXVtsZXZlbF1bX2luZGV4XTsKICAgICAgICBpZiAodiAhPSAwKSByZXR1cm4gdjsKCiAgICAgICAgX2luZGV4ID4+PSAxOwogICAgICAgIGxldmVsICs9IDE7IC8vIE92ZXJmbG93IGlzIHBvc3NpYmxlIGhlcmUsIGJ1dCBpcyBoYXJtbGVzcwogICAgICB9CgogICAgICByZXR1cm4gMDsKICAgIH0KICB9CgogIC8qKgogICAqIEdldCBmaXJzdCBhZGRyZXNzIHRoYXQgcHJvYmFibHkgaGFkIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudAogICAqIHNuYXBzaG90IHdpdGggZ2l2ZW4gaW5kZXggd2FzIGNyZWF0ZWQuCiAgICoKICAgKiBAcGFyYW0gX2luZGV4IGluZGV4IG9mIHRoZSBzbmFwc2hvdCB0byBnZXQgZmlyc3QgYWRkcmVzcyB0aGUgcHJvYmFibHkgaGFkCiAgICogICAgICAgIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudCBvZgogICAqIEByZXR1cm4gZmxhZyB0aGF0IHRlbGxzIHdoZXRoZXIgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGFkZHJlc3MgdGhhdCBwcm9iYWJseQogICAqICAgICAgICAgaGFkIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudCBvZiBzbmFwc2hvdCB3aXRoIGdpdmVuCiAgICogICAgICAgICBpbmRleCAoaGFzUmVzdWx0KTsgYW5kIHRoZSBmaXN0IGFkZHJlc3MgdGhhdCBwcm9iYWJseSBoYWQgbm9uLXplcm8KICAgKiAgICAgICAgIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudCBzbmFwc2hvdCB3aXRoIGdpdmVuIGluZGV4IHdhcyBjcmVhdGVkCiAgICogICAgICAgICBvciB6ZXJvIGlmIHRoZXJlIGFyZSBubyBzdWNoIGFkZHJlc3NlcyAocmVzdWx0KQogICAqLwogIGZ1bmN0aW9uIGZpcnN0QWRkcmVzc0F0ICh1aW50MjU2IF9pbmRleCkKICAgIGNvbnN0YW50IHJldHVybnMgKGJvb2wgaGFzUmVzdWx0LCBhZGRyZXNzIHJlc3VsdCkgewogICAgcmVxdWlyZSAoX2luZGV4ID4gMCk7CiAgICByZXF1aXJlIChfaW5kZXggPCBzbmFwc2hvdHMubGVuZ3RoKTsKICAgIHVpbnQyNTYgcmF3Rmlyc3RBZGRyZXNzID0gc25hcHNob3RzIFtfaW5kZXhdLmZpcnN0QWRkcmVzczsKICAgIGhhc1Jlc3VsdCA9IHJhd0ZpcnN0QWRkcmVzcyAhPSBNQVhfVUlOVDI1NjsKICAgIHJlc3VsdCA9IGhhc1Jlc3VsdCA/CiAgICAgIGFkZHJlc3MgKHJhd0ZpcnN0QWRkcmVzcyAmIE1BWF9BRERSRVNTKSA6CiAgICAgICAgMDsKICB9CgogIC8qKgogICAqIEdldCBuZXh0IGFkZHJlc3MgdGhhdCBwcm9iYWJseSBoYWQgbm9uLXplcm8gdG9rZW4gYmFsYW5jZSBhdCB0aGUgbW9tZW50CiAgICogY2VydGFpbiBzbmFwc2hvdCB3YXMgY3JlYXRlZC4KICAgKgogICAqIEBwYXJhbSBfYWRkcmVzcyBwcmV2aW91cyBhZGRyZXNzIHRoYXQgcHJvYmFibHkgaGFkIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UKICAgKiAgICAgICAgYXQgdGhlIG1vbWVudCBvZiBjZXJ0YWluIHNuYXBzaG90CiAgICogQHJldHVybiBmbGFnIHRoYXQgdGVsbHMgd2hldGhlciB0aGVyZSBpcyBuZXh0IGFkZHJlc3MgdGhhdCBwcm9iYWJseSBoYWQKICAgKiAgICAgICAgIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudCBvZiBzbmFwc2hvdCB3aXRoIGdpdmVuIGluZGV4CiAgICogICAgICAgICAoaGFzUmVzdWx0KTsgYW5kIHRoZSBuZXh0IGFkZHJlc3MgdGhhdCBwcm9iYWJseSBoYWQgbm9uLXplcm8KICAgKiAgICAgICAgIHRva2VuIGJhbGFuY2UgYXQgdGhlIG1vbWVudCBvZiBzbmFwc2hvdCB3aXRoIGdpdmVuIGluZGV4IHdhcwogICAqICAgICAgICAgY3JlYXRlZCBvciB6ZXJvIGlmIHRoZXJlIGFyZSBubyBzdWNoIGFkZHJlc3NlcyAocmVzdWx0KQogICAqLwogIGZ1bmN0aW9uIG5leHRBZGRyZXNzIChhZGRyZXNzIF9hZGRyZXNzKQogICAgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBoYXNSZXN1bHQsIGFkZHJlc3MgcmVzdWx0KSB7CiAgICB1aW50MjU2IHJhd05leHRBZGRyZXNzID0gbmV4dEFkZHJlc3NlcyBbX2FkZHJlc3NdOwogICAgcmVxdWlyZSAocmF3TmV4dEFkZHJlc3MgIT0gMCk7CiAgICBoYXNSZXN1bHQgPSByYXdOZXh0QWRkcmVzcyAhPSBNQVhfVUlOVDI1NjsKICAgIHJlc3VsdCA9IGhhc1Jlc3VsdCA/CiAgICAgIGFkZHJlc3MgKHJhd05leHRBZGRyZXNzICYgTUFYX0FERFJFU1MpIDoKICAgICAgICAwOwogIH0KCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICByZXR1cm4gZG9UcmFuc2ZlciAobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgKgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4KICAgKiAgICAgICAgcmVjaXBpZW50CiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tIChhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBpZiAoX3ZhbHVlID4gYXBwcm92ZWQgW19mcm9tXVttc2cuc2VuZGVyXSkgcmV0dXJuIGZhbHNlOwogICAgZWxzZSBpZiAoZG9UcmFuc2ZlciAoX2Zyb20sIF90bywgX3ZhbHVlKSkgewogICAgICBhcHByb3ZlZCBbX2Zyb21dW21zZy5zZW5kZXJdID0KICAgICAgICBzYWZlU3ViIChhcHByb3ZlZFtfZnJvbV1bbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICB9CgogIC8qKgogICAqIEFsbG93IGdpdmVuIHNwZW5kZXIgdG8gdHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyLgogICAqCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgdG8gYWxsb3cgdGhlIG93bmVyIG9mIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tCiAgICogICAgICAgIG1lc3NhZ2Ugc2VuZGVyCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIGFsbG93IHRvIHRyYW5zZmVyCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VuIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsbHkgYXBwcm92ZWQsIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFwcHJvdmVkIFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbCAobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIFRlbGwgaG93IG1hbnkgdG9rZW5zIGdpdmVuIHNwZW5kZXIgaXMgY3VycmVudGx5IGFsbG93ZWQgdG8gdHJhbnNmZXIgZnJvbQogICAqIGdpdmVuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIGdldCBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgdG8gYmUgdHJhbnNmZXJyZWQKICAgKiAgICAgICAgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIHRvIGJlIHRyYW5zZmVycmVkCiAgICogICAgICAgIGJ5IHRoZSBvd25lciBvZgogICAqIEByZXR1cm4gbnVtYmVyIG9mIHRva2VucyBnaXZlbiBzcGVuZGVyIGlzIGN1cnJlbnRseSBhbGxvd2VkIHRvIHRyYW5zZmVyCiAgICogICAgICAgICBmcm9tIGdpdmVuIG93bmVyCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlIChhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFwcHJvdmVkIFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIENyZWF0ZSBzbmFwc2hvdCBvZiB0b2tlbiBob2xkZXIgYmFsYW5jZXMuCiAgICoKICAgKiBAcmV0dXJuIGluZGV4IG9mIG5ldyBjcmVhdGVkIHNuYXBzaG90CiAgICovCiAgZnVuY3Rpb24gc25hcHNob3QgKCkgcmV0dXJucyAodWludDI1NiBpbmRleCkgewogICAgaW5kZXggPSBzbmFwc2hvdHMubGVuZ3RoKys7CiAgICBzbmFwc2hvdHMgW2luZGV4XS50b2tlbnNDb3VudCA9IHRva2Vuc0NvdW50OwogICAgc25hcHNob3RzIFtpbmRleF0uZmlyc3RBZGRyZXNzID0gZmlyc3RBZGRyZXNzOwogICAgU25hcHNob3QgKGluZGV4KTsKICB9CgogIC8qKgogICAqIFRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSB0aGUgb3duZXIgb2YgZ2l2ZW4gZnJvbSBhZGRyZXNzIHRvIHRoZQogICAqIG93bmVyIG9mIGdpdmVuIHRvIGFkZHJlc3MuCiAgICoKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIHRvIHRoZSBvd25lciBvZgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlcgogICAqIEByZXR1cm4gdHJ1ZSBpZiB0b2tlbnMgd2VyZSB0cmFuc2ZlcnJlZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIGRvVHJhbnNmZXIgKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgIGludGVybmFsIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgaWYgKF92YWx1ZSA+IGFjY291bnRzIFtfZnJvbV0uYmFsYW5jZSkgcmV0dXJuIGZhbHNlOwogICAgZWxzZSBpZiAoX3ZhbHVlID4gMCAmJiBfZnJvbSAhPSBfdG8pIHsKICAgICAgc2F2ZUFkZHJlc3MgKF90byk7CiAgICAgIHVwZGF0ZUhpc3RvcmljYWxCYWxhbmNlcyAoX2Zyb20pOwogICAgICB1cGRhdGVIaXN0b3JpY2FsQmFsYW5jZXMgKF90byk7CiAgICAgIGFjY291bnRzIFtfZnJvbV0uYmFsYW5jZSA9IHNhZmVTdWIgKGFjY291bnRzIFtfZnJvbV0uYmFsYW5jZSwgX3ZhbHVlKTsKICAgICAgYWNjb3VudHMgW190b10uYmFsYW5jZSA9IHNhZmVBZGQgKGFjY291bnRzIFtfdG9dLmJhbGFuY2UsIF92YWx1ZSk7CiAgICAgIFRyYW5zZmVyIChfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIENyZWF0ZSBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGFuZCBnaXZlIHRoZW0gdG8gbWVzc2FnZSBzZW5kZXIuCiAgICoKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gY3JlYXRlCiAgICogQHJldHVybiB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGVycm9yCiAgICovCiAgZnVuY3Rpb24gZG9DcmVhdGVUb2tlbnMgKHVpbnQyNTYgX3ZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChfdmFsdWUgPiBzYWZlU3ViIChNQVhfVE9LRU5TLCB0b2tlbnNDb3VudCkpIHJldHVybiBmYWxzZTsKICAgIGVsc2UgaWYgKF92YWx1ZSA+IDApIHsKICAgICAgc2F2ZUFkZHJlc3MgKG1zZy5zZW5kZXIpOwogICAgICB1cGRhdGVIaXN0b3JpY2FsQmFsYW5jZXMgKG1zZy5zZW5kZXIpOwogICAgICBhY2NvdW50cyBbbXNnLnNlbmRlcl0uYmFsYW5jZSA9CiAgICAgICAgc2FmZUFkZCAoYWNjb3VudHMgW21zZy5zZW5kZXJdLmJhbGFuY2UsIF92YWx1ZSk7CiAgICAgIHRva2Vuc0NvdW50ID0gc2FmZUFkZCAodG9rZW5zQ291bnQsIF92YWx1ZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogVXBkYXRlIGhpc3RvcmljYWwgYmFsYW5jZXMgZm9yIGdpdmVuIHRva2VuIG93bmVyLgogICAqCiAgICogQHBhcmFtIF9vd25lciB0b2tlbiBvd25lciB0byB1cGRhdGUgaGlzdG9yaWNhbCBiYWxhbmNlcyBmb3IKICAgKi8KICBmdW5jdGlvbiB1cGRhdGVIaXN0b3JpY2FsQmFsYW5jZXMgKGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCB7CiAgICB1aW50MjU2IGJhbGFuY2UgPSBhY2NvdW50cyBbX293bmVyXS5iYWxhbmNlOwogICAgdWludDI1NiBuZXh0U25hcHNob3RJbmRleCA9IHNuYXBzaG90cy5sZW5ndGg7CiAgICB1aW50MjU2IGxhc3ROZXh0U25hcHNob3RJbmRleCA9CiAgICAgIHNhZmVBZGQgKGFjY291bnRzIFtfb3duZXJdLmxhc3RTbmFwc2hvdEluZGV4LCAxKTsKICAgIGlmIChuZXh0U25hcHNob3RJbmRleCA+IGxhc3ROZXh0U25hcHNob3RJbmRleCkgewogICAgICBpZiAoYmFsYW5jZSA+IDApIHsKICAgICAgICBzZXRIaXN0b3JpY2FsQmFsYW5jZSAoCiAgICAgICAgICBfb3duZXIsIGxhc3ROZXh0U25hcHNob3RJbmRleCwgbmV4dFNuYXBzaG90SW5kZXgsIGJhbGFuY2UpOwogICAgICB9CiAgICAgIGFjY291bnRzIFtfb3duZXJdLmxhc3RTbmFwc2hvdEluZGV4ID0KICAgICAgICBzYWZlU3ViIChuZXh0U25hcHNob3RJbmRleCwgMSk7CiAgICB9CiAgfQoKICAvKioKICAgKiBTZXQgaGlzdG9yaWNhbCBiYWxhbmNlIGZvciB0aGUgb3duZXIgb2YgZ2l2ZW4gYWRkcmVzcyBhcyBpdCB3YXMgYXQgdGhlCiAgICogbW9tZW50cyBvZiBzbmFwc2hvdHMgd2l0aCBpbmRleGVzIGluIGdpdmVuIHJhbmdlLgogICAqCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIHNldCB0aGUgaGlzdG9yaWNhbCBiYWxhbmNlIGZvciB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX2Zyb20gYmVnaW5uaW5nIG9mIHRoZSBzbmFwc2hvdCBpbmRleCByYW5nZSAoaW5jbHVzaXZlKQogICAqIEBwYXJhbSBfdG8gZW5kIG9mIHRoZSBzbmFwc2hvdCBpbmRleCByYW5nZSAoZXhjbHVzaXZlKQogICAqIEBwYXJhbSBfYmFsYW5jZSB2YWx1ZSB0byBzZXQgYmFsYW5jZSB0bwogICAqLwogIGZ1bmN0aW9uIHNldEhpc3RvcmljYWxCYWxhbmNlICgKICAgIGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9mcm9tLCB1aW50MjU2IF90bywgdWludDI1NiBfYmFsYW5jZSkKICAgIGludGVybmFsIHsKICAgIGFzc2VydCAoX2Zyb20gPiAwKTsKICAgIGFzc2VydCAoX3RvID49IF9mcm9tKTsKICAgIGFzc2VydCAoX2JhbGFuY2UgPiAwKTsKCiAgICB1aW50OCBsZXZlbCA9IDA7CiAgICB3aGlsZSAoX2Zyb20gPCBfdG8pIHsKICAgICAgaWYgKF9mcm9tICYgMSA9PSAxKSB7CiAgICAgICAgLy8gT3ZlcmZsb3cgaXMgbm90IHBvc3NpYmxlIGhlcmUgYmVjYXVzZSBfZnJvbSA8IF90bwogICAgICAgIGhpc3RvcmljYWxCYWxhbmNlcyBbX293bmVyXVtsZXZlbF1bX2Zyb20rK10gPSBfYmFsYW5jZTsKICAgICAgfQoKICAgICAgaWYgKF90byAmIDEgPT0gMSkgewogICAgICAgIC8vIFVuZGVyZmxvdyBpcyBub3QgcG9zc2libGUgaGVyZSwgYmVjYXVzZSBfdG8gJiAxID09IDEKICAgICAgICBoaXN0b3JpY2FsQmFsYW5jZXMgW19vd25lcl1bbGV2ZWxdWy0tX3RvXSA9IF9iYWxhbmNlOwogICAgICB9CgogICAgICBfZnJvbSA+Pj0gMTsKICAgICAgX3RvID4+PSAxOwogICAgICBsZXZlbCArPSAxOyAvLyBFdmVuIGZvciBzbmFwc2hvdCBpbmRleCByYW5nZSAxLi4yXjI1Ni0xIG92ZXJmbG93IHdpbGwKICAgICAgICAgICAgICAgICAgLy8gbm90IGhhcHBlbiBoZXJlCiAgICB9CiAgfQoKICAvKioKICAgKiBBZGQgYWRkcmVzcyB0byB0aGUgbGlzdCBvZiBhZGRyZXNzZXMgdGhhdCBldmVyIGhhZCBub24temVybyB0b2tlbiBiYWxhbmNlLgogICAqCiAgICogQHBhcmFtIF9hZGRyZXNzIGFkZHJlc3MgdG8gYmUgYWRkZWQgdG8gdGhlIGxpc3Qgb2YgYWRkcmVzc2VzIHRoYXQgZXZlciBoYWQKICAgKiAgICAgICAgbm9uLXplcm8gdG9rZW4gYmFsYW5jZQogICAqLwogIGZ1bmN0aW9uIHNhdmVBZGRyZXNzIChhZGRyZXNzIF9hZGRyZXNzKSBpbnRlcm5hbCB7CiAgICBpZiAobmV4dEFkZHJlc3NlcyBbX2FkZHJlc3NdID09IDApIHsKICAgICAgbmV4dEFkZHJlc3NlcyBbX2FkZHJlc3NdID0gZmlyc3RBZGRyZXNzOwogICAgICBmaXJzdEFkZHJlc3MgPSBUV09fMTYwIHwgdWludDI1NihfYWRkcmVzcyk7CiAgICB9CiAgfQoKICAvKioKICAgKiBUb3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uLgogICAqLwogIHVpbnQyNTYgdG9rZW5zQ291bnQ7CgogIC8qKgogICAqIEFsbCBzbmFwc2hvdHMgZXZlciBjcmVhdGVkLgogICAqLwogIFNuYXBzaG90SW5mbyBbXSBzbmFwc2hvdHM7CgogIC8qKgogICAqIE1hcHMgYWRkcmVzc2VzIG9mIHRva2VuIG93bmVycyB0byBzdGF0ZXMgb2YgdGhlaXIgYWNjb3VudHMuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBBY2NvdW50KSBhY2NvdW50czsKCiAgLyoqCiAgICogRmlyc3QgYWRkcmVzcyB0aGF0IGV2ZXIgaGFkIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgcGx1cyAyXjE2MCwgb3IgMl4yNTYtMQogICAqIGlmIHRoZXJlIGFyZSBubyBzdWNoIGFkZHJlc3Nlcy4KICAgKi8KICB1aW50MjU2IGZpcnN0QWRkcmVzcyA9IE1BWF9VSU5UMjU2OwoKICAvKioKICAgKiBNYXBwaW5nIGZyb20gYWRkcmVzcyB0aGF0IGV2ZXIgaGFkIG5vbi16ZXJvIHRva2VuIGJhbGFuY2UgdG8gdGhlIG5leHQKICAgKiBhZGRyZXNzIHRoYXQgZXZlciBoYWQgbm9uLXplcm8gdG9rZW4gYmFsYW5jZSBwbHVzIDJeMTYwIG9yIDJeMjU2LTEgaWYgdGhlcmUKICAgKiBhcmUgbm8gbW9yZSBzdWNoIGFkZHJlc3Nlcy4KICAgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIG5leHRBZGRyZXNzZXM7CgogIC8qKgogICAqIEhpc3RvcmljYWwgYmFsYW5jZXMgb2YgdG9rZW4gb3duZXJzLiAgSWYgZm9yIHNvbWUgYWRkcmVzcywgbGV2ZWwgYW5kIGluZGV4LAogICAqIHdoZXJlIGxldmVsID49IDAgYW5kIGluZGV4ID4gMCwgaGlzdG9yaWNhbEJhbGFuY2VzW2FkZHJlc3NdW2xldmVsXVtpbmRleF0KICAgKiBpcyBub24temVybywgdGhlbiBvd25lciBvZiBnaXZlbiBhZGRyZXNzIGhhZCB0aGlzIG1hbnkgdG9rZW5zIGF0IHRoZQogICAqIHRpbWUgbW9tZW50cyBvZiBzbmFwc2hvdHMgd2l0aCBpbmRleGVzIGZyb20gKGluZGV4ICogMl5sZXZlbCkgdG8KICAgKiAoKGluZGV4ICsgMSkgKiAyXmxldmVsIC0gMSkgaW5jbHVzaXZlLgogICAqIEZvciBlYWNoIHNuYXBzaG90LCB0aGVyZSBzaG91bGQgYmUgYXQgbW9zdCBvbmUgbGV2ZWwgd2l0aCBub24temVybwogICAqIHZhbHVlIGF0IGNvcnJlc3BvbmRpbmcgaW5kZXguCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nICh1aW50OCA9PiBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpKSkKICAgIGhpc3RvcmljYWxCYWxhbmNlczsKCiAgLyoqCiAgICogTWFwcyBhZGRyZXNzZXMgb2YgdG9rZW4gb3duZXJzIHRvIG1hcHBpbmdzIGZyb20gYWRkcmVzc2VzIG9mIHNwZW5kZXJzIHRvCiAgICogaG93IG1hbnkgdG9rZW5zIGJlbG9uZ2luZyB0byB0aGUgb3duZXIsIHRoZSBzcGVuZGVyIGlzIGN1cnJlbnRseSBhbGxvd2VkIHRvCiAgICogdHJhbnNmZXIuCiAgICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhcHByb3ZlZDsKCiAgLyoqCiAgICogRW5jYXBzdWxhdGVzIGluZm9ybWF0aW9uIGFib3V0IHNuYXBzaG90LgogICAqLwogIHN0cnVjdCBTbmFwc2hvdEluZm8gewogICAgLyoqCiAgICAgKiBUb3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uIGF0IHRoZSBtb21lbnQgb2Ygc25hcHNob3QuCiAgICAgKi8KICAgIHVpbnQyNTYgdG9rZW5zQ291bnQ7CgogICAgLyoqCiAgICAgKiBWYWx1ZSBvZiBmaXJzdEFkZHJlc3MgZmllbGQgYXQgdGhlIG1vbWVudCBvZiBzbmFwc2hvdC4KICAgICAqLwogICAgdWludDI1NiBmaXJzdEFkZHJlc3M7CiAgfQoKICAvKioKICAgKiBFbmNhcHN1bGF0ZXMgaW5mb3JtYXRpb24gYWJvdXQgdG9rZW4gb3duZXIncyBiYWxhbmNlLgogICAqLwogIHN0cnVjdCBBY2NvdW50IHsKICAgIC8qKgogICAgICogTnVtYmVyIG9mIHRva2VucyBjdXJyZW50bHkgYmVsb25naW5nIHRvIHRoZSB0b2tlbiBvd25lci4KICAgICAqLwogICAgdWludDI1NiBiYWxhbmNlOwoKICAgIC8qKgogICAgICogSW5kZXggb2YgdGhlIGxhc3Qgc25hcHNob3QgYmVmb3JlIHRoZSBtb21lbnQgaGlzdG9yaWNhbCBiYWxhbmNlcyB3ZXJlCiAgICAgKiBsYXN0IHVwZGF0ZWQgZm9yIHRoaXMgdG9rZW4gb3duZXIuCiAgICAgKi8KICAgIHVpbnQyNTYgbGFzdFNuYXBzaG90SW5kZXg7CiAgfQoKICAvKioKICAgKiBMb2dnZWQgd2hlbiBuZXcgc25hcHNob3Qgd2FzIGNyZWF0ZWQuCiAgICoKICAgKiBAcGFyYW0gX2luZGV4IGluZGV4IG9mIHRoZSBuZXcgc25hcHNob3QKICAgKi8KICBldmVudCBTbmFwc2hvdCAodWludDI1NiBpbmRleGVkIF9pbmRleCk7Cn0KCgovKgogKiBTdGFuZGFyZCBTbmFwc2hvdHRhYmxlIFRva2VuIFNtYXJ0IENvbnRyYWN0LgogKiBBdXRob3I6IE1pa2hhaWwgVmxhZGltaXJvdiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJjOWE0YTBhMmExYThhMGE1ZTdiZmE1YThhZGEwYTRhMGJiYTZiZjg5YWVhNGE4YTBhNWU3YWFhNmE0Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KICovCgovKioKICogU3RhbmRhcmQgU25hcHNob3R0YWJsZSBUb2tlbiBTbWFydCBDb250cmFjdC4KICovCmNvbnRyYWN0IFN0YW5kYXJkU25hcHNob3R0YWJsZVRva2VuIGlzIEFic3RyYWN0U25hcHNob3R0YWJsZVRva2VuIHsKICAvKioKICAgKiBDcmVhdGUgbmV3IFN0YW5kYXJkIFNuYXBzaG90dGFibGUgVG9rZW4gU21hcnQgQ29udHJhY3QgYW5kIG1ha2UKICAgKiBtZXNzYWdlIHNlbmRlciB0aGUgb3duZXIgb2YgdGhlIHNtYXJ0IGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIFN0YW5kYXJkU25hcHNob3R0YWJsZVRva2VuICgpCiAgICBBYnN0cmFjdFNuYXBzaG90dGFibGVUb2tlbiAoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gbWVzc2FnZSBzZW5kZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgdG8gdGhlIG93bmVyIG9mIGdpdmVuIGFkZHJlc3MKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlciAoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChmcm96ZW4pIHJldHVybiBmYWxzZTsKICAgIGVsc2UgcmV0dXJuIEFic3RyYWN0U25hcHNob3R0YWJsZVRva2VuLnRyYW5zZmVyIChfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBUcmFuc2ZlciBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gZ2l2ZW4gb3duZXIgdG8gZ2l2ZW4gcmVjaXBpZW50LgogICAqCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gdGhlIG93bmVyIG9mCiAgICogQHBhcmFtIF90byBhZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VucyB0byB0aGUgb3duZXIgb2YKICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbgogICAqICAgICAgICByZWNpcGllbnQKICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20gKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGlmIChmcm96ZW4pIHJldHVybiBmYWxzZTsKICAgIGVsc2UKICAgICAgcmV0dXJuIEFic3RyYWN0U25hcHNob3R0YWJsZVRva2VuLnRyYW5zZmVyRnJvbSAoX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICAqIENyZWF0ZSBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGFuZCBnaXZlIHRoZW0gdG8gbWVzc2FnZSBzZW5kZXIuICBNYXkgb25seSBiZQogICAqIGNhbGxlZCBieSB0aGUgb3duZXIgb2YgdGhlIHNtYXJ0IGNvbnRyYWN0LgogICAqCiAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIGNyZWF0ZQogICAqIEByZXR1cm4gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBlcnJvcgogICAqLwogIGZ1bmN0aW9uIGNyZWF0ZVRva2VucyAodWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgcmV0dXJuIGRvQ3JlYXRlVG9rZW5zIChfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogRnJlZXplIHRva2VuIHRyYW5zZmVycy4gIE1heSBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIgb2YgdGhlIHNtYXJ0CiAgICogY29udHJhY3QuCiAgICovCiAgZnVuY3Rpb24gZnJlZXplVHJhbnNmZXJzICgpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoKICAgIGlmICghZnJvemVuKQogICAgewogICAgICBmcm96ZW4gPSB0cnVlOwogICAgICBGcmVlemUgKCk7CiAgICB9CiAgfQoKICAvKioKICAgKiBVbmZyZWV6ZSB0b2tlbiB0cmFuc2ZlcnMuICBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoZSBzbWFydAogICAqIGNvbnRyYWN0LgogICAqLwogIGZ1bmN0aW9uIHVuZnJlZXplVHJhbnNmZXJzICgpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoKICAgIGlmIChmcm96ZW4pIHsKICAgICAgZnJvemVuID0gZmFsc2U7CiAgICAgIFVuZnJlZXplICgpOwogICAgfQogIH0KCiAgLyoqCiAgICogU2V0IG5ldyBvd25lciBhZGRyZXNzLiAgTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGUgc21hcnQKICAgKiBjb250cmFjdC4KICAgKgogICAqIEBwYXJhbSBfbmV3T3duZXIgbmV3IG93bmVyIGFkZHJlc3MKICAgKi8KICBmdW5jdGlvbiBzZXRPd25lciAoYWRkcmVzcyBfbmV3T3duZXIpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwoKICAgIG93bmVyID0gX25ld093bmVyOwogIH0KCiAgLyoqCiAgICogT3duZXIgb2YgdGhpcyBzbWFydCBjb250cmFjdC4KICAgKi8KICBhZGRyZXNzIG93bmVyOwoKICAvKioKICAgKiBXaGV0aGVyIHRva2VuIHRyYW5zZmVycyBhcmUgY3VycmVudGx5IGZyb3plbi4KICAgKi8KICBib29sIGZyb3plbjsKCiAgLyoqCiAgICogTG9nZ2VkIHdoZW4gdG9rZW4gdHJhbnNmZXJzIHdlcmUgZnJvemVuLgogICAqLwogIGV2ZW50IEZyZWV6ZSAoKTsKCiAgLyoqCiAgICogTG9nZ2VkIHdoZW4gdG9rZW4gdHJhbnNmZXJzIHdlcmUgdW5mcm96ZW4uCiAgICovCiAgZXZlbnQgVW5mcmVlemUgKCk7Cn0KCgovKgogKiBTY2llbmNlIEJsb2NrY2hhaW4gVG9rZW4gU21hcnQgQ29udHJhY3QuCiAqIEF1dGhvcjogTWlraGFpbCBWbGFkaW1pcm92IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImQ4YjViMWIzYjBiOWIxYjRmNmFlYjRiOWJjYjFiNWIxYWFiN2FlOThiZmI1YjliMWI0ZjZiYmI3YjUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgogKi8KCi8qKgogKiBTY2llbmNlIEJsb2NrY2hhaW4gVG9rZW4gU21hcnQgQ29udHJhY3QuCiAqLwpjb250cmFjdCBTY2llbmNlQmxvY2tjaGFpblRva2VuIGlzIFN0YW5kYXJkU25hcHNob3R0YWJsZVRva2VuIHsKICAvKioKICAgKiBDcmVhdGUgbmV3IFNjaWVuY2UgQmxvY2tjaGFpbiBUb2tlbiBzbWFydCBjb250cmFjdCBhbmQgbWFrZSBtZXNzYWdlIHNlbmRlcgogICAqIHRvIGJlIHRoZSBvd25lciBvZiBzbWFydCBjb250cmFjdCBhbmQgdG8gYmUgYSBzbmFwc2hvdCBjcmVhdG9yLgogICAqLwogIGZ1bmN0aW9uIFNjaWVuY2VCbG9ja2NoYWluVG9rZW4gKCkKICAgIFN0YW5kYXJkU25hcHNob3R0YWJsZVRva2VuICgpIHsKICAgIHNuYXBzaG90Q3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBDcmVhdGUgc25hcHNob3Qgb2YgdG9rZW4gaG9sZGVyIGJhbGFuY2VzLgogICAqCiAgICogQHJldHVybiBpbmRleCBvZiBuZXcgY3JlYXRlZCBzbmFwc2hvdAogICAqLwogIGZ1bmN0aW9uIHNuYXBzaG90ICgpIHJldHVybnMgKHVpbnQyNTYgaW5kZXgpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gc25hcHNob3RDcmVhdG9yKTsKICAgIHJldHVybiBBYnN0cmFjdFNuYXBzaG90dGFibGVUb2tlbi5zbmFwc2hvdCAoKTsKICB9CgogIC8qKgogICAqIEdldCBuYW1lIG9mIHRoaXMgdG9rZW4uCiAgICoKICAgKiBAcmV0dXJuIG5hbWUgb2YgdGhpcyB0b2tlbgogICAqLwogIGZ1bmN0aW9uIG5hbWUgKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIHJlc3VsdCkgewogICAgcmV0dXJuICJTQ0lFTkNFIEJMT0NLQ0hBSU4iOwogIH0KCiAgLyoqCiAgICogR2V0IHN5bWJvbCBvZiB0aGlzIHRva2VuLgogICAqCiAgICogQHJldHVybiBzeW1ib2wgb2YgdGhpcyB0b2tlbgogICAqLwogIGZ1bmN0aW9uIHN5bWJvbCAoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgcmVzdWx0KSB7CiAgICByZXR1cm4gIlNDSSI7CiAgfQoKICAvKioKICAgKiBHZXQgbnVtYmVyIG9mIGRlY2ltYWxzIGZvciB0aGlzIHRva2VuLgogICAqCiAgICogQHJldHVybiBudW1iZXIgb2YgZGVjaW1hbHMgZm9yIHRoaXMgdG9rZW4KICAgKi8KICBmdW5jdGlvbiBkZWNpbWFscyAoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCByZXN1bHQpIHsKICAgIHJldHVybiAwOwogIH0KCiAgLyoqCiAgICogQnVybiBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGJlbG9uZ2luZyB0byBtZXNzYWdlIHNlbmRlci4KICAgKgogICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byBidXJuCiAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIGJ1cm5lZCBzdWNjZXNzZnVsbHksIGZhbHNlIG90aGVyd2lzZQogICAqLwogIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMgKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IGFjY291bnRzIFttc2cuc2VuZGVyXS5iYWxhbmNlOwogICAgaWYgKF92YWx1ZSA+IGJhbGFuY2UpIHJldHVybiBmYWxzZTsKICAgIGlmIChfdmFsdWUgPiAwKSB7CiAgICAgIHVwZGF0ZUhpc3RvcmljYWxCYWxhbmNlcyAobXNnLnNlbmRlcik7CiAgICAgIGFjY291bnRzIFttc2cuc2VuZGVyXS5iYWxhbmNlID0gc2FmZVN1YiAoYmFsYW5jZSwgX3ZhbHVlKTsKICAgICAgdG9rZW5zQ291bnQgPSBzYWZlU3ViICh0b2tlbnNDb3VudCwgX3ZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIFNldCBuZXcgc25hcHNob3QgY3JlYXRvciBhZGRyZXNzLgogICAqCiAgICogQHBhcmFtIF9zbmFwc2hvdENyZWF0b3IgbmV3IHNuYXBzaG90IGNyZWF0b3IgYWRkcmVzcwogICAqLwogIGZ1bmN0aW9uIHNldFNuYXBzaG90Q3JlYXRvciAoYWRkcmVzcyBfc25hcHNob3RDcmVhdG9yKSB7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIHNuYXBzaG90Q3JlYXRvciA9IF9zbmFwc2hvdENyZWF0b3I7CiAgfQoKICAvKioKICAgKiBBZGRyZXNzIG9mIHNuYXBzaG90IGNyZWF0b3IsIGkuZS4gdGhlIG9uZSBhbGxvd2VkIHRvIGNyZWF0ZSBzbmFwc2hvdHMuCiAgICovCiAgYWRkcmVzcyBzbmFwc2hvdENyZWF0b3I7Cn0='.
	

]
