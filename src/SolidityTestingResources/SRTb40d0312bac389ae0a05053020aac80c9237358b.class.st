Class {
	#name : #SRTb40d0312bac389ae0a05053020aac80c9237358b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb40d0312bac389ae0a05053020aac80c9237358b >> base64 [
	^ ''.
	

]
