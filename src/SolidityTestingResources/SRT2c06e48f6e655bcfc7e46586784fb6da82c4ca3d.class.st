Class {
	#name : #SRT2c06e48f6e655bcfc7e46586784fb6da82c4ca3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c06e48f6e655bcfc7e46586784fb6da82c4ca3d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vIENyeXB0b1R1bGlwIENvbnRyYWN0Ci8vIG1vcmUgaW5mbyBhdCBodHRwczovL2NyeXB0b3R1bGlwLmNvCgoKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovLyBMYW5kIENvbnRyYWN0Ci8vCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBhY2hlIExpY2Vuc2UKLy8gICAgICAgICAgICAgICAgICAgICAgIFZlcnNpb24gMi4wLCBKYW51YXJ5IDIwMDQKLy8gICAgICAgICAgICAgICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvCi8vIFRFUk1TIEFORCBDT05ESVRJT05TIEZPUiBVU0UsIFJFUFJPRFVDVElPTiwgQU5EIERJU1RSSUJVVElPTgoKLy8gRGVmaW5pdGlvbnMuCgovLyAiTGljZW5zZSIgc2hhbGwgbWVhbiB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZm9yIHVzZSwgcmVwcm9kdWN0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGFzIGRlZmluZWQgYnkgU2VjdGlvbnMgMSB0aHJvdWdoIDkgb2YgdGhpcyBkb2N1bWVudC4KCi8vICJMaWNlbnNvciIgc2hhbGwgbWVhbiB0aGUgY29weXJpZ2h0IG93bmVyIG9yIGVudGl0eSBhdXRob3JpemVkIGJ5IHRoZSBjb3B5cmlnaHQgb3duZXIgdGhhdCBpcyBncmFudGluZyB0aGUgTGljZW5zZS4KCi8vICJMZWdhbCBFbnRpdHkiIHNoYWxsIG1lYW4gdGhlIHVuaW9uIG9mIHRoZSBhY3RpbmcgZW50aXR5IGFuZCBhbGwgb3RoZXIgZW50aXRpZXMgdGhhdCBjb250cm9sLCBhcmUgY29udHJvbGxlZCBieSwgb3IgYXJlIHVuZGVyIGNvbW1vbiBjb250cm9sIHdpdGggdGhhdCBlbnRpdHkuIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBkZWZpbml0aW9uLCAiY29udHJvbCIgbWVhbnMgKGkpIHRoZSBwb3dlciwgZGlyZWN0IG9yIGluZGlyZWN0LCB0byBjYXVzZSB0aGUgZGlyZWN0aW9uIG9yIG1hbmFnZW1lbnQgb2Ygc3VjaCBlbnRpdHksIHdoZXRoZXIgYnkgY29udHJhY3Qgb3Igb3RoZXJ3aXNlLCBvciAoaWkpIG93bmVyc2hpcCBvZiBmaWZ0eSBwZXJjZW50ICg1MCUpIG9yIG1vcmUgb2YgdGhlIG91dHN0YW5kaW5nIHNoYXJlcywgb3IgKGlpaSkgYmVuZWZpY2lhbCBvd25lcnNoaXAgb2Ygc3VjaCBlbnRpdHkuCgovLyAiWW91IiAob3IgIllvdXIiKSBzaGFsbCBtZWFuIGFuIGluZGl2aWR1YWwgb3IgTGVnYWwgRW50aXR5IGV4ZXJjaXNpbmcgcGVybWlzc2lvbnMgZ3JhbnRlZCBieSB0aGlzIExpY2Vuc2UuCgovLyAiU291cmNlIiBmb3JtIHNoYWxsIG1lYW4gdGhlIHByZWZlcnJlZCBmb3JtIGZvciBtYWtpbmcgbW9kaWZpY2F0aW9ucywgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byBzb2Z0d2FyZSBzb3VyY2UgY29kZSwgZG9jdW1lbnRhdGlvbiBzb3VyY2UsIGFuZCBjb25maWd1cmF0aW9uIGZpbGVzLgoKLy8gIk9iamVjdCIgZm9ybSBzaGFsbCBtZWFuIGFueSBmb3JtIHJlc3VsdGluZyBmcm9tIG1lY2hhbmljYWwgdHJhbnNmb3JtYXRpb24gb3IgdHJhbnNsYXRpb24gb2YgYSBTb3VyY2UgZm9ybSwgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byBjb21waWxlZCBvYmplY3QgY29kZSwgZ2VuZXJhdGVkIGRvY3VtZW50YXRpb24sIGFuZCBjb252ZXJzaW9ucyB0byBvdGhlciBtZWRpYSB0eXBlcy4KCi8vICJXb3JrIiBzaGFsbCBtZWFuIHRoZSB3b3JrIG9mIGF1dGhvcnNoaXAsIHdoZXRoZXIgaW4gU291cmNlIG9yIE9iamVjdCBmb3JtLCBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgTGljZW5zZSwgYXMgaW5kaWNhdGVkIGJ5IGEgY29weXJpZ2h0IG5vdGljZSB0aGF0IGlzIGluY2x1ZGVkIGluIG9yIGF0dGFjaGVkIHRvIHRoZSB3b3JrIChhbiBleGFtcGxlIGlzIHByb3ZpZGVkIGluIHRoZSBBcHBlbmRpeCBiZWxvdykuCgovLyAiRGVyaXZhdGl2ZSBXb3JrcyIgc2hhbGwgbWVhbiBhbnkgd29yaywgd2hldGhlciBpbiBTb3VyY2Ugb3IgT2JqZWN0IGZvcm0sIHRoYXQgaXMgYmFzZWQgb24gKG9yIGRlcml2ZWQgZnJvbSkgdGhlIFdvcmsgYW5kIGZvciB3aGljaCB0aGUgZWRpdG9yaWFsIHJldmlzaW9ucywgYW5ub3RhdGlvbnMsIGVsYWJvcmF0aW9ucywgb3Igb3RoZXIgbW9kaWZpY2F0aW9ucyByZXByZXNlbnQsIGFzIGEgd2hvbGUsIGFuIG9yaWdpbmFsIHdvcmsgb2YgYXV0aG9yc2hpcC4gRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIExpY2Vuc2UsIERlcml2YXRpdmUgV29ya3Mgc2hhbGwgbm90IGluY2x1ZGUgd29ya3MgdGhhdCByZW1haW4gc2VwYXJhYmxlIGZyb20sIG9yIG1lcmVseSBsaW5rIChvciBiaW5kIGJ5IG5hbWUpIHRvIHRoZSBpbnRlcmZhY2VzIG9mLCB0aGUgV29yayBhbmQgRGVyaXZhdGl2ZSBXb3JrcyB0aGVyZW9mLgoKLy8gIkNvbnRyaWJ1dGlvbiIgc2hhbGwgbWVhbiBhbnkgd29yayBvZiBhdXRob3JzaGlwLCBpbmNsdWRpbmcgdGhlIG9yaWdpbmFsIHZlcnNpb24gb2YgdGhlIFdvcmsgYW5kIGFueSBtb2RpZmljYXRpb25zIG9yIGFkZGl0aW9ucyB0byB0aGF0IFdvcmsgb3IgRGVyaXZhdGl2ZSBXb3JrcyB0aGVyZW9mLCB0aGF0IGlzIGludGVudGlvbmFsbHkgc3VibWl0dGVkIHRvIExpY2Vuc29yIGZvciBpbmNsdXNpb24gaW4gdGhlIFdvcmsgYnkgdGhlIGNvcHlyaWdodCBvd25lciBvciBieSBhbiBpbmRpdmlkdWFsIG9yIExlZ2FsIEVudGl0eSBhdXRob3JpemVkIHRvIHN1Ym1pdCBvbiBiZWhhbGYgb2YgdGhlIGNvcHlyaWdodCBvd25lci4gRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIGRlZmluaXRpb24sICJzdWJtaXR0ZWQiIG1lYW5zIGFueSBmb3JtIG9mIGVsZWN0cm9uaWMsIHZlcmJhbCwgb3Igd3JpdHRlbiBjb21tdW5pY2F0aW9uIHNlbnQgdG8gdGhlIExpY2Vuc29yIG9yIGl0cyByZXByZXNlbnRhdGl2ZXMsIGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gY29tbXVuaWNhdGlvbiBvbiBlbGVjdHJvbmljIG1haWxpbmcgbGlzdHMsIHNvdXJjZSBjb2RlIGNvbnRyb2wgc3lzdGVtcywgYW5kIGlzc3VlIHRyYWNraW5nIHN5c3RlbXMgdGhhdCBhcmUgbWFuYWdlZCBieSwgb3Igb24gYmVoYWxmIG9mLCB0aGUgTGljZW5zb3IgZm9yIHRoZSBwdXJwb3NlIG9mIGRpc2N1c3NpbmcgYW5kIGltcHJvdmluZyB0aGUgV29yaywgYnV0IGV4Y2x1ZGluZyBjb21tdW5pY2F0aW9uIHRoYXQgaXMgY29uc3BpY3VvdXNseSBtYXJrZWQgb3Igb3RoZXJ3aXNlIGRlc2lnbmF0ZWQgaW4gd3JpdGluZyBieSB0aGUgY29weXJpZ2h0IG93bmVyIGFzICJOb3QgYSBDb250cmlidXRpb24uIgoKLy8gIkNvbnRyaWJ1dG9yIiBzaGFsbCBtZWFuIExpY2Vuc29yIGFuZCBhbnkgaW5kaXZpZHVhbCBvciBMZWdhbCBFbnRpdHkgb24gYmVoYWxmIG9mIHdob20gYSBDb250cmlidXRpb24gaGFzIGJlZW4gcmVjZWl2ZWQgYnkgTGljZW5zb3IgYW5kIHN1YnNlcXVlbnRseSBpbmNvcnBvcmF0ZWQgd2l0aGluIHRoZSBXb3JrLgoKLy8gR3JhbnQgb2YgQ29weXJpZ2h0IExpY2Vuc2UuIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSwgZWFjaCBDb250cmlidXRvciBoZXJlYnkgZ3JhbnRzIHRvIFlvdSBhIHBlcnBldHVhbCwgd29ybGR3aWRlLCBub24tZXhjbHVzaXZlLCBuby1jaGFyZ2UsIHJveWFsdHktZnJlZSwgaXJyZXZvY2FibGUgY29weXJpZ2h0IGxpY2Vuc2UgdG8gcmVwcm9kdWNlLCBwcmVwYXJlIERlcml2YXRpdmUgV29ya3Mgb2YsIHB1YmxpY2x5IGRpc3BsYXksIHB1YmxpY2x5IHBlcmZvcm0sIHN1YmxpY2Vuc2UsIGFuZCBkaXN0cmlidXRlIHRoZSBXb3JrIGFuZCBzdWNoIERlcml2YXRpdmUgV29ya3MgaW4gU291cmNlIG9yIE9iamVjdCBmb3JtLgoKLy8gR3JhbnQgb2YgUGF0ZW50IExpY2Vuc2UuIFN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSwgZWFjaCBDb250cmlidXRvciBoZXJlYnkgZ3JhbnRzIHRvIFlvdSBhIHBlcnBldHVhbCwgd29ybGR3aWRlLCBub24tZXhjbHVzaXZlLCBuby1jaGFyZ2UsIHJveWFsdHktZnJlZSwgaXJyZXZvY2FibGUgKGV4Y2VwdCBhcyBzdGF0ZWQgaW4gdGhpcyBzZWN0aW9uKSBwYXRlbnQgbGljZW5zZSB0byBtYWtlLCBoYXZlIG1hZGUsIHVzZSwgb2ZmZXIgdG8gc2VsbCwgc2VsbCwgaW1wb3J0LCBhbmQgb3RoZXJ3aXNlIHRyYW5zZmVyIHRoZSBXb3JrLCB3aGVyZSBzdWNoIGxpY2Vuc2UgYXBwbGllcyBvbmx5IHRvIHRob3NlIHBhdGVudCBjbGFpbXMgbGljZW5zYWJsZSBieSBzdWNoIENvbnRyaWJ1dG9yIHRoYXQgYXJlIG5lY2Vzc2FyaWx5IGluZnJpbmdlZCBieSB0aGVpciBDb250cmlidXRpb24ocykgYWxvbmUgb3IgYnkgY29tYmluYXRpb24gb2YgdGhlaXIgQ29udHJpYnV0aW9uKHMpIHdpdGggdGhlIFdvcmsgdG8gd2hpY2ggc3VjaCBDb250cmlidXRpb24ocykgd2FzIHN1Ym1pdHRlZC4gSWYgWW91IGluc3RpdHV0ZSBwYXRlbnQgbGl0aWdhdGlvbiBhZ2FpbnN0IGFueSBlbnRpdHkgKGluY2x1ZGluZyBhIGNyb3NzLWNsYWltIG9yIGNvdW50ZXJjbGFpbSBpbiBhIGxhd3N1aXQpIGFsbGVnaW5nIHRoYXQgdGhlIFdvcmsgb3IgYSBDb250cmlidXRpb24gaW5jb3Jwb3JhdGVkIHdpdGhpbiB0aGUgV29yayBjb25zdGl0dXRlcyBkaXJlY3Qgb3IgY29udHJpYnV0b3J5IHBhdGVudCBpbmZyaW5nZW1lbnQsIHRoZW4gYW55IHBhdGVudCBsaWNlbnNlcyBncmFudGVkIHRvIFlvdSB1bmRlciB0aGlzIExpY2Vuc2UgZm9yIHRoYXQgV29yayBzaGFsbCB0ZXJtaW5hdGUgYXMgb2YgdGhlIGRhdGUgc3VjaCBsaXRpZ2F0aW9uIGlzIGZpbGVkLgoKLy8gUmVkaXN0cmlidXRpb24uIFlvdSBtYXkgcmVwcm9kdWNlIGFuZCBkaXN0cmlidXRlIGNvcGllcyBvZiB0aGUgV29yayBvciBEZXJpdmF0aXZlIFdvcmtzIHRoZXJlb2YgaW4gYW55IG1lZGl1bSwgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbnMsIGFuZCBpbiBTb3VyY2Ugb3IgT2JqZWN0IGZvcm0sIHByb3ZpZGVkIHRoYXQgWW91IG1lZXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKLy8gKGEpIFlvdSBtdXN0IGdpdmUgYW55IG90aGVyIHJlY2lwaWVudHMgb2YgdGhlIFdvcmsgb3IgRGVyaXZhdGl2ZSBXb3JrcyBhIGNvcHkgb2YgdGhpcyBMaWNlbnNlOyBhbmQKCi8vIChiKSBZb3UgbXVzdCBjYXVzZSBhbnkgbW9kaWZpZWQgZmlsZXMgdG8gY2FycnkgcHJvbWluZW50IG5vdGljZXMgc3RhdGluZyB0aGF0IFlvdSBjaGFuZ2VkIHRoZSBmaWxlczsgYW5kCgovLyAoYykgWW91IG11c3QgcmV0YWluLCBpbiB0aGUgU291cmNlIGZvcm0gb2YgYW55IERlcml2YXRpdmUgV29ya3MgdGhhdCBZb3UgZGlzdHJpYnV0ZSwgYWxsIGNvcHlyaWdodCwgcGF0ZW50LCB0cmFkZW1hcmssIGFuZCBhdHRyaWJ1dGlvbiBub3RpY2VzIGZyb20gdGhlIFNvdXJjZSBmb3JtIG9mIHRoZSBXb3JrLCBleGNsdWRpbmcgdGhvc2Ugbm90aWNlcyB0aGF0IGRvIG5vdCBwZXJ0YWluIHRvIGFueSBwYXJ0IG9mIHRoZSBEZXJpdmF0aXZlIFdvcmtzOyBhbmQKCi8vIChkKSBJZiB0aGUgV29yayBpbmNsdWRlcyBhICJOT1RJQ0UiIHRleHQgZmlsZSBhcyBwYXJ0IG9mIGl0cyBkaXN0cmlidXRpb24sIHRoZW4gYW55IERlcml2YXRpdmUgV29ya3MgdGhhdCBZb3UgZGlzdHJpYnV0ZSBtdXN0IGluY2x1ZGUgYSByZWFkYWJsZSBjb3B5IG9mIHRoZSBhdHRyaWJ1dGlvbiBub3RpY2VzIGNvbnRhaW5lZCB3aXRoaW4gc3VjaCBOT1RJQ0UgZmlsZSwgZXhjbHVkaW5nIHRob3NlIG5vdGljZXMgdGhhdCBkbyBub3QgcGVydGFpbiB0byBhbnkgcGFydCBvZiB0aGUgRGVyaXZhdGl2ZSBXb3JrcywgaW4gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgcGxhY2VzOiB3aXRoaW4gYSBOT1RJQ0UgdGV4dCBmaWxlIGRpc3RyaWJ1dGVkIGFzIHBhcnQgb2YgdGhlIERlcml2YXRpdmUgV29ya3M7IHdpdGhpbiB0aGUgU291cmNlIGZvcm0gb3IgZG9jdW1lbnRhdGlvbiwgaWYgcHJvdmlkZWQgYWxvbmcgd2l0aCB0aGUgRGVyaXZhdGl2ZSBXb3Jrczsgb3IsIHdpdGhpbiBhIGRpc3BsYXkgZ2VuZXJhdGVkIGJ5IHRoZSBEZXJpdmF0aXZlIFdvcmtzLCBpZiBhbmQgd2hlcmV2ZXIgc3VjaCB0aGlyZC1wYXJ0eSBub3RpY2VzIG5vcm1hbGx5IGFwcGVhci4gVGhlIGNvbnRlbnRzIG9mIHRoZSBOT1RJQ0UgZmlsZSBhcmUgZm9yIGluZm9ybWF0aW9uYWwgcHVycG9zZXMgb25seSBhbmQgZG8gbm90IG1vZGlmeSB0aGUgTGljZW5zZS4gWW91IG1heSBhZGQgWW91ciBvd24gYXR0cmlidXRpb24gbm90aWNlcyB3aXRoaW4gRGVyaXZhdGl2ZSBXb3JrcyB0aGF0IFlvdSBkaXN0cmlidXRlLCBhbG9uZ3NpZGUgb3IgYXMgYW4gYWRkZW5kdW0gdG8gdGhlIE5PVElDRSB0ZXh0IGZyb20gdGhlIFdvcmssIHByb3ZpZGVkIHRoYXQgc3VjaCBhZGRpdGlvbmFsIGF0dHJpYnV0aW9uIG5vdGljZXMgY2Fubm90IGJlIGNvbnN0cnVlZCBhcyBtb2RpZnlpbmcgdGhlIExpY2Vuc2UuCgovLyBZb3UgbWF5IGFkZCBZb3VyIG93biBjb3B5cmlnaHQgc3RhdGVtZW50IHRvIFlvdXIgbW9kaWZpY2F0aW9ucyBhbmQgbWF5IHByb3ZpZGUgYWRkaXRpb25hbCBvciBkaWZmZXJlbnQgbGljZW5zZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBmb3IgdXNlLCByZXByb2R1Y3Rpb24sIG9yIGRpc3RyaWJ1dGlvbiBvZiBZb3VyIG1vZGlmaWNhdGlvbnMsIG9yIGZvciBhbnkgc3VjaCBEZXJpdmF0aXZlIFdvcmtzIGFzIGEgd2hvbGUsIHByb3ZpZGVkIFlvdXIgdXNlLCByZXByb2R1Y3Rpb24sIGFuZCBkaXN0cmlidXRpb24gb2YgdGhlIFdvcmsgb3RoZXJ3aXNlIGNvbXBsaWVzIHdpdGggdGhlIGNvbmRpdGlvbnMgc3RhdGVkIGluIHRoaXMgTGljZW5zZS4KCi8vIFN1Ym1pc3Npb24gb2YgQ29udHJpYnV0aW9ucy4gVW5sZXNzIFlvdSBleHBsaWNpdGx5IHN0YXRlIG90aGVyd2lzZSwgYW55IENvbnRyaWJ1dGlvbiBpbnRlbnRpb25hbGx5IHN1Ym1pdHRlZCBmb3IgaW5jbHVzaW9uIGluIHRoZSBXb3JrIGJ5IFlvdSB0byB0aGUgTGljZW5zb3Igc2hhbGwgYmUgdW5kZXIgdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoaXMgTGljZW5zZSwgd2l0aG91dCBhbnkgYWRkaXRpb25hbCB0ZXJtcyBvciBjb25kaXRpb25zLiBOb3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCBub3RoaW5nIGhlcmVpbiBzaGFsbCBzdXBlcnNlZGUgb3IgbW9kaWZ5IHRoZSB0ZXJtcyBvZiBhbnkgc2VwYXJhdGUgbGljZW5zZSBhZ3JlZW1lbnQgeW91IG1heSBoYXZlIGV4ZWN1dGVkIHdpdGggTGljZW5zb3IgcmVnYXJkaW5nIHN1Y2ggQ29udHJpYnV0aW9ucy4KCi8vIFRyYWRlbWFya3MuIFRoaXMgTGljZW5zZSBkb2VzIG5vdCBncmFudCBwZXJtaXNzaW9uIHRvIHVzZSB0aGUgdHJhZGUgbmFtZXMsIHRyYWRlbWFya3MsIHNlcnZpY2UgbWFya3MsIG9yIHByb2R1Y3QgbmFtZXMgb2YgdGhlIExpY2Vuc29yLCBleGNlcHQgYXMgcmVxdWlyZWQgZm9yIHJlYXNvbmFibGUgYW5kIGN1c3RvbWFyeSB1c2UgaW4gZGVzY3JpYmluZyB0aGUgb3JpZ2luIG9mIHRoZSBXb3JrIGFuZCByZXByb2R1Y2luZyB0aGUgY29udGVudCBvZiB0aGUgTk9USUNFIGZpbGUuCgovLyBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIExpY2Vuc29yIHByb3ZpZGVzIHRoZSBXb3JrIChhbmQgZWFjaCBDb250cmlidXRvciBwcm92aWRlcyBpdHMgQ29udHJpYnV0aW9ucykgb24gYW4gIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQsIGluY2x1ZGluZywgd2l0aG91dCBsaW1pdGF0aW9uLCBhbnkgd2FycmFudGllcyBvciBjb25kaXRpb25zIG9mIFRJVExFLCBOT04tSU5GUklOR0VNRU5ULCBNRVJDSEFOVEFCSUxJVFksIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBZb3UgYXJlIHNvbGVseSByZXNwb25zaWJsZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIGFwcHJvcHJpYXRlbmVzcyBvZiB1c2luZyBvciByZWRpc3RyaWJ1dGluZyB0aGUgV29yayBhbmQgYXNzdW1lIGFueSByaXNrcyBhc3NvY2lhdGVkIHdpdGggWW91ciBleGVyY2lzZSBvZiBwZXJtaXNzaW9ucyB1bmRlciB0aGlzIExpY2Vuc2UuCgovLyBMaW1pdGF0aW9uIG9mIExpYWJpbGl0eS4gSW4gbm8gZXZlbnQgYW5kIHVuZGVyIG5vIGxlZ2FsIHRoZW9yeSwgd2hldGhlciBpbiB0b3J0IChpbmNsdWRpbmcgbmVnbGlnZW5jZSksIGNvbnRyYWN0LCBvciBvdGhlcndpc2UsIHVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyAoc3VjaCBhcyBkZWxpYmVyYXRlIGFuZCBncm9zc2x5IG5lZ2xpZ2VudCBhY3RzKSBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc2hhbGwgYW55IENvbnRyaWJ1dG9yIGJlIGxpYWJsZSB0byBZb3UgZm9yIGRhbWFnZXMsIGluY2x1ZGluZyBhbnkgZGlyZWN0LCBpbmRpcmVjdCwgc3BlY2lhbCwgaW5jaWRlbnRhbCwgb3IgY29uc2VxdWVudGlhbCBkYW1hZ2VzIG9mIGFueSBjaGFyYWN0ZXIgYXJpc2luZyBhcyBhIHJlc3VsdCBvZiB0aGlzIExpY2Vuc2Ugb3Igb3V0IG9mIHRoZSB1c2Ugb3IgaW5hYmlsaXR5IHRvIHVzZSB0aGUgV29yayAoaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byBkYW1hZ2VzIGZvciBsb3NzIG9mIGdvb2R3aWxsLCB3b3JrIHN0b3BwYWdlLCBjb21wdXRlciBmYWlsdXJlIG9yIG1hbGZ1bmN0aW9uLCBvciBhbnkgYW5kIGFsbCBvdGhlciBjb21tZXJjaWFsIGRhbWFnZXMgb3IgbG9zc2VzKSwgZXZlbiBpZiBzdWNoIENvbnRyaWJ1dG9yIGhhcyBiZWVuIGFkdmlzZWQgb2YgdGhlIHBvc3NpYmlsaXR5IG9mIHN1Y2ggZGFtYWdlcy4KCi8vIEFjY2VwdGluZyBXYXJyYW50eSBvciBBZGRpdGlvbmFsIExpYWJpbGl0eS4gV2hpbGUgcmVkaXN0cmlidXRpbmcgdGhlIFdvcmsgb3IgRGVyaXZhdGl2ZSBXb3JrcyB0aGVyZW9mLCBZb3UgbWF5IGNob29zZSB0byBvZmZlciwgYW5kIGNoYXJnZSBhIGZlZSBmb3IsIGFjY2VwdGFuY2Ugb2Ygc3VwcG9ydCwgd2FycmFudHksIGluZGVtbml0eSwgb3Igb3RoZXIgbGlhYmlsaXR5IG9ibGlnYXRpb25zIGFuZC9vciByaWdodHMgY29uc2lzdGVudCB3aXRoIHRoaXMgTGljZW5zZS4gSG93ZXZlciwgaW4gYWNjZXB0aW5nIHN1Y2ggb2JsaWdhdGlvbnMsIFlvdSBtYXkgYWN0IG9ubHkgb24gWW91ciBvd24gYmVoYWxmIGFuZCBvbiBZb3VyIHNvbGUgcmVzcG9uc2liaWxpdHksIG5vdCBvbiBiZWhhbGYgb2YgYW55IG90aGVyIENvbnRyaWJ1dG9yLCBhbmQgb25seSBpZiBZb3UgYWdyZWUgdG8gaW5kZW1uaWZ5LCBkZWZlbmQsIGFuZCBob2xkIGVhY2ggQ29udHJpYnV0b3IgaGFybWxlc3MgZm9yIGFueSBsaWFiaWxpdHkgaW5jdXJyZWQgYnksIG9yIGNsYWltcyBhc3NlcnRlZCBhZ2FpbnN0LCBzdWNoIENvbnRyaWJ1dG9yIGJ5IHJlYXNvbiBvZiB5b3VyIGFjY2VwdGluZyBhbnkgc3VjaCB3YXJyYW50eSBvciBhZGRpdGlvbmFsIGxpYWJpbGl0eS4KCi8vIEVORCBPRiBURVJNUyBBTkQgQ09ORElUSU9OUwoKLy8gQVBQRU5ESVg6IEhvdyB0byBhcHBseSB0aGUgQXBhY2hlIExpY2Vuc2UgdG8geW91ciB3b3JrLgoKLy8gICBUbyBhcHBseSB0aGUgQXBhY2hlIExpY2Vuc2UgdG8geW91ciB3b3JrLCBhdHRhY2ggdGhlIGZvbGxvd2luZwovLyAgIGJvaWxlcnBsYXRlIG5vdGljZSwgd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzICJbXSIKLy8gICByZXBsYWNlZCB3aXRoIHlvdXIgb3duIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uLiAoRG9uJ3QgaW5jbHVkZQovLyAgIHRoZSBicmFja2V0cyEpICBUaGUgdGV4dCBzaG91bGQgYmUgZW5jbG9zZWQgaW4gdGhlIGFwcHJvcHJpYXRlCi8vICAgY29tbWVudCBzeW50YXggZm9yIHRoZSBmaWxlIGZvcm1hdC4gV2UgYWxzbyByZWNvbW1lbmQgdGhhdCBhCi8vICAgZmlsZSBvciBjbGFzcyBuYW1lIGFuZCBkZXNjcmlwdGlvbiBvZiBwdXJwb3NlIGJlIGluY2x1ZGVkIG9uIHRoZQovLyAgIHNhbWUgInByaW50ZWQgcGFnZSIgYXMgdGhlIGNvcHlyaWdodCBub3RpY2UgZm9yIGVhc2llcgovLyAgIGlkZW50aWZpY2F0aW9uIHdpdGhpbiB0aGlyZC1wYXJ0eSBhcmNoaXZlcy4KLy8gQ29weXJpZ2h0IFt5eXl5XSBbbmFtZSBvZiBjb3B5cmlnaHQgb3duZXJdCgovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgoKCmNvbnRyYWN0IE5GVCB7CiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgZnVuY3Rpb24gdG9rZW5PZk93bmVyQnlJbmRleChhZGRyZXNzIG93bmVyLCB1aW50IGluZGV4KSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiBvd25lck9mKHVpbnQgdG9rZW5JZCkgZXh0ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyk7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludCB0b2tlbklkKSBleHRlcm5hbDsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHRva2VuSWQpIGV4dGVybmFsOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCB0b2tlbklkKSBleHRlcm5hbDsKCiAgZnVuY3Rpb24gbWV0YWRhdGEodWludCB0b2tlbklkKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpOwp9Cgpjb250cmFjdCBORlRFdmVudHMgewogIGV2ZW50IFRyYW5zZmVycmVkKHVpbnQgdG9rZW5JZCwgYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IHRva2VuSWQpOwogIGV2ZW50IE1ldGFkYXRhVXBkYXRlZCh1aW50IHRva2VuSWQsIGFkZHJlc3Mgb3duZXIsIHN0cmluZyBkYXRhKTsKfQoKY29udHJhY3QgQmFzaWNORlQgaXMgTkZULCBORlRFdmVudHMgewoKICB1aW50IHB1YmxpYyB0b3RhbFRva2VuczsKCiAgLy8gQXJyYXkgb2Ygb3duZWQgdG9rZW5zIGZvciBhIHVzZXIKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludFtdKSBwdWJsaWMgb3duZWRUb2tlbnM7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIF92aXJ0dWFsTGVuZ3RoOwogIG1hcHBpbmcodWludCA9PiB1aW50KSBfdG9rZW5JbmRleEluT3duZXJBcnJheTsKCiAgLy8gTWFwcGluZyBmcm9tIHRva2VuIElEIHRvIG93bmVyCiAgbWFwcGluZyh1aW50ID0+IGFkZHJlc3MpIHB1YmxpYyB0b2tlbk93bmVyOwoKICAvLyBBbGxvd2VkIHRyYW5zZmVycyBmb3IgYSB0b2tlbiAob25seSBvbmUgYXQgYSB0aW1lKQogIG1hcHBpbmcodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgYWxsb3dlZFRyYW5zZmVyOwoKICAvLyBNZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggZWFjaCB0b2tlbgogIG1hcHBpbmcodWludCA9PiBzdHJpbmcpIHB1YmxpYyBfdG9rZW5NZXRhZGF0YTsKCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIHRvdGFsVG9rZW5zOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gX3ZpcnR1YWxMZW5ndGhbb3duZXJdOwogIH0KCiAgZnVuY3Rpb24gdG9rZW5PZk93bmVyQnlJbmRleChhZGRyZXNzIG93bmVyLCB1aW50IGluZGV4KSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXF1aXJlKGluZGV4ID49IDAgJiYgaW5kZXggPCBiYWxhbmNlT2Yob3duZXIpKTsKICAgIHJldHVybiBvd25lZFRva2Vuc1tvd25lcl1baW5kZXhdOwogIH0KCiAgZnVuY3Rpb24gZ2V0QWxsVG9rZW5zKGFkZHJlc3Mgb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50W10pIHsKICAgIHVpbnQgc2l6ZSA9IF92aXJ0dWFsTGVuZ3RoW293bmVyXTsKICAgIHVpbnRbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnRbXShzaXplKTsKICAgIGZvciAodWludCBpID0gMDsgaSA8IHNpemU7IGkrKykgewogICAgICByZXN1bHRbaV0gPSBvd25lZFRva2Vuc1tvd25lcl1baV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gb3duZXJPZih1aW50IHRva2VuSWQpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIHJldHVybiB0b2tlbk93bmVyW3Rva2VuSWRdOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB0b2tlbklkKSBwdWJsaWMgewogICAgcmVxdWlyZSh0b2tlbk93bmVyW3Rva2VuSWRdID09IG1zZy5zZW5kZXIpOwogICAgcmV0dXJuIF90cmFuc2Zlcih0b2tlbk93bmVyW3Rva2VuSWRdLCB0bywgdG9rZW5JZCk7CiAgfQoKICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQgdG9rZW5JZCkgZXh0ZXJuYWwgewogICAgcmVxdWlyZShhbGxvd2VkVHJhbnNmZXJbdG9rZW5JZF0gPT0gbXNnLnNlbmRlcik7CiAgICByZXR1cm4gX3RyYW5zZmVyKHRva2VuT3duZXJbdG9rZW5JZF0sIG1zZy5zZW5kZXIsIHRva2VuSWQpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB0b2tlbklkKSBleHRlcm5hbCB7CiAgICByZXF1aXJlKHRva2VuT3duZXJbdG9rZW5JZF0gPT0gZnJvbSk7CiAgICByZXF1aXJlKGFsbG93ZWRUcmFuc2Zlclt0b2tlbklkXSA9PSBtc2cuc2VuZGVyKTsKICAgIHJldHVybiBfdHJhbnNmZXIodG9rZW5Pd25lclt0b2tlbklkXSwgdG8sIHRva2VuSWQpOwogIH0KCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IHRva2VuSWQpIGV4dGVybmFsIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB0b2tlbk93bmVyW3Rva2VuSWRdKTsKCiAgICBpZiAoYWxsb3dlZFRyYW5zZmVyW3Rva2VuSWRdICE9IDApIHsKICAgICAgYWxsb3dlZFRyYW5zZmVyW3Rva2VuSWRdID0gMDsKICAgIH0KICAgIGFsbG93ZWRUcmFuc2Zlclt0b2tlbklkXSA9IGJlbmVmaWNpYXJ5OwogICAgQXBwcm92YWwodG9rZW5Pd25lclt0b2tlbklkXSwgYmVuZWZpY2lhcnksIHRva2VuSWQpOwogIH0KCiAgZnVuY3Rpb24gdG9rZW5NZXRhZGF0YSh1aW50IHRva2VuSWQpIGV4dGVybmFsIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIF90b2tlbk1ldGFkYXRhW3Rva2VuSWRdOwogIH0KCiAgZnVuY3Rpb24gbWV0YWRhdGEodWludCB0b2tlbklkKSBleHRlcm5hbCBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsKICAgIHJldHVybiBfdG9rZW5NZXRhZGF0YVt0b2tlbklkXTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZVRva2VuTWV0YWRhdGEodWludCB0b2tlbklkLCBzdHJpbmcgX21ldGFkYXRhKSBleHRlcm5hbCB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5Pd25lclt0b2tlbklkXSk7CiAgICBfdG9rZW5NZXRhZGF0YVt0b2tlbklkXSA9IF9tZXRhZGF0YTsKICAgIE1ldGFkYXRhVXBkYXRlZCh0b2tlbklkLCBtc2cuc2VuZGVyLCBfbWV0YWRhdGEpOwogIH0KCiAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB0b2tlbklkKSBpbnRlcm5hbCB7CiAgICBfY2xlYXJBcHByb3ZhbCh0b2tlbklkKTsKICAgIGlmIChmcm9tICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICBfcmVtb3ZlVG9rZW5Gcm9tKGZyb20sIHRva2VuSWQpOwogICAgfQogICAgX2FkZFRva2VuVG8odG8sIHRva2VuSWQpOwogICAgVHJhbnNmZXJyZWQodG9rZW5JZCwgZnJvbSwgdG8pOwogIH0KCiAgZnVuY3Rpb24gX2NsZWFyQXBwcm92YWwodWludCB0b2tlbklkKSBpbnRlcm5hbCB7CiAgICBhbGxvd2VkVHJhbnNmZXJbdG9rZW5JZF0gPSAwOwogICAgQXBwcm92YWwodG9rZW5Pd25lclt0b2tlbklkXSwgMCwgdG9rZW5JZCk7CiAgfQoKICBmdW5jdGlvbiBfcmVtb3ZlVG9rZW5Gcm9tKGFkZHJlc3MgZnJvbSwgdWludCB0b2tlbklkKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKF92aXJ0dWFsTGVuZ3RoW2Zyb21dID4gMCk7CgogICAgdWludCBsZW5ndGggPSBfdmlydHVhbExlbmd0aFtmcm9tXTsKICAgIHVpbnQgaW5kZXggPSBfdG9rZW5JbmRleEluT3duZXJBcnJheVt0b2tlbklkXTsKICAgIHVpbnQgc3dhcFRva2VuID0gb3duZWRUb2tlbnNbZnJvbV1bbGVuZ3RoIC0gMV07CgogICAgb3duZWRUb2tlbnNbZnJvbV1baW5kZXhdID0gc3dhcFRva2VuOwogICAgX3Rva2VuSW5kZXhJbk93bmVyQXJyYXlbc3dhcFRva2VuXSA9IGluZGV4OwogICAgX3ZpcnR1YWxMZW5ndGhbZnJvbV0tLTsKICB9CgogIGZ1bmN0aW9uIF9hZGRUb2tlblRvKGFkZHJlc3Mgb3duZXIsIHVpbnQgdG9rZW5JZCkgaW50ZXJuYWwgewogICAgaWYgKG93bmVkVG9rZW5zW293bmVyXS5sZW5ndGggPT0gX3ZpcnR1YWxMZW5ndGhbb3duZXJdKSB7CiAgICAgIG93bmVkVG9rZW5zW293bmVyXS5wdXNoKHRva2VuSWQpOwogICAgfSBlbHNlIHsKICAgICAgb3duZWRUb2tlbnNbb3duZXJdW192aXJ0dWFsTGVuZ3RoW293bmVyXV0gPSB0b2tlbklkOwogICAgfQogICAgdG9rZW5Pd25lclt0b2tlbklkXSA9IG93bmVyOwogICAgX3Rva2VuSW5kZXhJbk93bmVyQXJyYXlbdG9rZW5JZF0gPSBfdmlydHVhbExlbmd0aFtvd25lcl07CiAgICBfdmlydHVhbExlbmd0aFtvd25lcl0rKzsKICB9Cn0KCgpwcmFnbWEgc29saWRpdHkgXjAuNC4wOwoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8KLy8gT3BlblplcHBlbGluIGNvbnRyYWN0cwovLwovLyBUaGUgTUlUIExpY2Vuc2UgKE1JVCkKCi8vIENvcHlyaWdodCAoYykgMjAxNiBTbWFydCBDb250cmFjdCBTb2x1dGlvbnMsIEluYy4KCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZwovLyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0bwovLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8KLy8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4KLy8gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkKLy8gQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwKLy8gVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUKLy8gU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIERlc3RydWN0aWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3QgdGhhdCBjYW4gYmUgZGVzdHJveWVkIGJ5IG93bmVyLiBBbGwgZnVuZHMgaW4gY29udHJhY3Qgd2lsbCBiZSBzZW50IHRvIHRoZSBvd25lci4KICovCmNvbnRyYWN0IERlc3RydWN0aWJsZSBpcyBPd25hYmxlIHsKCiAgZnVuY3Rpb24gRGVzdHJ1Y3RpYmxlKCkgcHVibGljIHBheWFibGUgeyB9CgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXJzIHRoZSBjdXJyZW50IGJhbGFuY2UgdG8gdGhlIG93bmVyIGFuZCB0ZXJtaW5hdGVzIHRoZSBjb250cmFjdC4KICAgKi8KICBmdW5jdGlvbiBkZXN0cm95KCkgb25seU93bmVyIHB1YmxpYyB7CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCiAgZnVuY3Rpb24gZGVzdHJveUFuZFNlbmQoYWRkcmVzcyBfcmVjaXBpZW50KSBvbmx5T3duZXIgcHVibGljIHsKICAgIHNlbGZkZXN0cnVjdChfcmVjaXBpZW50KTsKICB9Cn0KCgoKCgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gQ3J5cHRvVHVsaXAKCgpjb250cmFjdCBDcnlwdG9UdWxpcCBpcyBEZXN0cnVjdGlibGUsIFBhdXNhYmxlLCBCYXNpY05GVCB7CgogICAgZnVuY3Rpb24gQ3J5cHRvVHVsaXAoKSBwdWJsaWMgewogICAgICAgIC8vIHR1bGlwLXplcm8KICAgICAgICBfY3JlYXRlVHVsaXAoYnl0ZXMzMigtMSksIDAsIDAsIDAsIGFkZHJlc3MoMCkpOwogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJDcnlwdG9UdWxpcCI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJUVUxJUCI7CgogICAgdWludDMyIGludGVybmFsIGNvbnN0YW50IE1PTlRITFlfQkxPQ0tTID0gMTcyODAwOwoKICAgIC8vIHVzZXJuYW1lCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gc3RyaW5nKSBwdWJsaWMgdXNlcm5hbWVzOwoKCiAgICBzdHJ1Y3QgVHVsaXAgewogICAgICAgIGJ5dGVzMzIgZ2Vub21lOwogICAgICAgIHVpbnQ2NCBibG9jazsKICAgICAgICB1aW50NjQgZm91bmRhdGlvbjsKICAgICAgICB1aW50NjQgaW5zcGlyYXRpb247CiAgICAgICAgdWludDY0IGdlbmVyYXRpb247CiAgICB9CgogICAgVHVsaXBbXSB0dWxpcHM7CgogICAgdWludDI1NiBwdWJsaWMgYXJ0aXN0RmVlcyA9IDEgZmlubmV5OwoKICAgIGZ1bmN0aW9uIHNldEFydGlzdEZlZXModWludDI1NiBfbmV3RmVlKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIGFydGlzdEZlZXMgPSBfbmV3RmVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFR1bGlwKHVpbnQyNTYgX2lkKSBleHRlcm5hbCB2aWV3CiAgICAgIHJldHVybnMgKAogICAgICAgIGJ5dGVzMzIgZ2Vub21lLAogICAgICAgIHVpbnQ2NCBibG9ja051bWJlciwKICAgICAgICB1aW50NjQgZm91bmRhdGlvbiwKICAgICAgICB1aW50NjQgaW5zcGlyYXRpb24sCiAgICAgICAgdWludDY0IGdlbmVyYXRpb24KICAgICkgewogICAgICAgIHJlcXVpcmUoX2lkID4gMCk7CiAgICAgICAgVHVsaXAgc3RvcmFnZSB0dWxpcCA9IHR1bGlwc1tfaWRdOwoKICAgICAgICBnZW5vbWUgPSB0dWxpcC5nZW5vbWU7CiAgICAgICAgYmxvY2tOdW1iZXIgPSB0dWxpcC5ibG9jazsKICAgICAgICBmb3VuZGF0aW9uID0gdHVsaXAuZm91bmRhdGlvbjsKICAgICAgICBpbnNwaXJhdGlvbiA9IHR1bGlwLmluc3BpcmF0aW9uOwogICAgICAgIGdlbmVyYXRpb24gPSB0dWxpcC5nZW5lcmF0aW9uOwogICAgfQoKICAgIC8vIENvbW1pc3Npb24gQ3J5cHRvVHVsaXAgZm9yIGFic3RyYWN0IGRlY29uc3RydWN0ZWQgYXJ0LgogICAgLy8gWW91OiBJJ2QgbGlrZSBhIHBhaW50aW5nIHBsZWFzZS4gVXNlIG15IHBhaW50aW5nIGZvciB0aGUgZm91bmRhdGlvbgogICAgLy8gICAgICBhbmQgdXNlIHRoYXQgb3RoZXIgcGFpbnRpbmcgYWNjcm9zcyB0aGUgc3RyZWV0IGFzIGluc3BpcmF0aW9uLgogICAgLy8gQXJ0aXN0OiBUaGF0J2xsIGJlIDEwIGZpbm5leXMuIENvbWUgYmFjayBvbmUgYmxvY2sgbGF0ZXIuCiAgICBmdW5jdGlvbiBjb21taXNzaW9uQXJ0KHVpbnQyNTYgX2ZvdW5kYXRpb24sIHVpbnQyNTYgX2luc3BpcmF0aW9uKQogICAgICBleHRlcm5hbCBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5Pd25lcltfZm91bmRhdGlvbl0pOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IGFydGlzdEZlZXMpOwogICAgICAgIHVpbnQyNTYgX2lkID0gX2NyZWF0ZVR1bGlwKGJ5dGVzMzIoMCksIF9mb3VuZGF0aW9uLCBfaW5zcGlyYXRpb24sIHR1bGlwc1tfZm91bmRhdGlvbl0uZ2VuZXJhdGlvbiArIDEsIG1zZy5zZW5kZXIpOwogICAgICAgIF9jcmVhdGl2ZVByb2Nlc3MoX2lkKTsKICAgIH0KCiAgICAvLyBbT3B0aW9uYWxdIG5hbWUgeW91ciBtYXN0ZXJwaWVjZS4KICAgIC8vIE5lZWRzIHRvIGJlIGZ1bm55LgogICAgZnVuY3Rpb24gbmFtZUFydCh1aW50MjU2IF9pZCwgc3RyaW5nIF9uZXdOYW1lKSBleHRlcm5hbCB3aGVuTm90UGF1c2VkIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5Pd25lcltfaWRdKTsKICAgICAgICBfdG9rZW5NZXRhZGF0YVtfaWRdID0gX25ld05hbWU7CiAgICAgICAgTWV0YWRhdGFVcGRhdGVkKF9pZCwgbXNnLnNlbmRlciwgX25ld05hbWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFVzZXJuYW1lKHN0cmluZyBfdXNlcm5hbWUpIGV4dGVybmFsIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHVzZXJuYW1lc1ttc2cuc2VuZGVyXSA9IF91c2VybmFtZTsKICAgIH0KCgogICAgLy8gT3duZXIgbWV0aG9kcwoKICAgIHVpbnQyNTYgaW50ZXJuYWwgY29uc3RhbnQgT1JJR0lOQUxfQVJUV09SS19MSU1JVCA9IDEwMDAwOwogICAgdWludDI1NiBpbnRlcm5hbCBvcmlnaW5hbENvdW50ID0gMDsKCiAgICAvLyBMZXQncyB0aGUgY2FsbGVyIGNyZWF0ZSBhbiBvcmlnaW5hbCBhcnR3b3JrIHdpdGggZ2l2ZW4gZ2Vub21lLgogICAgLy8gRm9yIHRoZSBmaXJzdCBtb250aCwgZXZlcnlvbmUgY2FuIGNyZWF0ZSAxIG9yaWdpbmFsIGFydHdvcmsuCiAgICAvLyBBZnRlciB0aGF0LCBvbmx5IHRoZSBvd25lciBjYW4gY3JlYXRlIGFuIG9yaWdpbmFsLCB1cCB0byAxMGsgcGllY2VzLgogICAgZnVuY3Rpb24gb3JpZ2luYWxBcnR3b3JrKGJ5dGVzMzIgX2dlbm9tZSwgYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGFkZHJlc3MgbmV3T3duZXIgPSBfb3duZXI7CiAgICAgICAgaWYgKG5ld093bmVyID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICB9CgogICAgICAgIGlmIChibG9jay5udW1iZXIgPiB0dWxpcHNbMF0uYmxvY2sgKyBNT05USExZX0JMT0NLUyApIHsKICAgICAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICAgICAgcmVxdWlyZShvcmlnaW5hbENvdW50IDwgT1JJR0lOQUxfQVJUV09SS19MSU1JVCk7CiAgICAgICAgICAgIG9yaWdpbmFsQ291bnQrKzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXF1aXJlKAogICAgICAgICAgICAgICAgKG1zZy52YWx1ZSA+PSBhcnRpc3RGZWVzICYmIF92aXJ0dWFsTGVuZ3RoW21zZy5zZW5kZXJdIDwgMTApIHx8CiAgICAgICAgICAgICAgICBtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICB9CgogICAgICAgIF9jcmVhdGVUdWxpcChfZ2Vub21lLCAwLCAwLCAwLCBuZXdPd25lcik7CiAgICB9CgogICAgLy8gTGV0J3Mgb3duZXIgd2l0aGRyYXcgY29udHJhY3QgYmFsYW5jZQogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICB9CgoKICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgIC8vIEludGVybmFsCgogICAgZnVuY3Rpb24gX2NyZWF0aXZlUHJvY2Vzcyh1aW50IF9pZCkgaW50ZXJuYWwgewogICAgICAgIFR1bGlwIG1lbW9yeSB0dWxpcCA9IHR1bGlwc1tfaWRdOwoKICAgICAgICByZXF1aXJlKHR1bGlwLmdlbm9tZSA9PSBieXRlczMyKDApKTsKICAgICAgICAvLyBUaGlzIGlzIG5vdCByYW5kb20uIFBlb3BsZSB3aWxsIGtub3cgdGhlIHJlc3VsdCBiZWZvcmUKICAgICAgICAvLyBleGVjdXRpbmcgdGhpcywgYmVjYXVzZSBpdCdzIGJhc2VkIG9uIHRoZSBsYXN0IGJsb2NrLgogICAgICAgIC8vIEJ1dCB0aGF0J3Mgb2suIE90aGVyIHdheSBvZiBkb2luZyB0aGlzIGludm9sdmVkIDIgc3RlcHMsCiAgICAgICAgLy8gdHdpY2UgdGhlIGNvc3QsIHR3aWNlIHRoZSB0cm91YmxlLgogICAgICAgIGJ5dGVzMzIgaGFzaCA9IGtlY2NhazI1NigKICAgICAgICAgICAgYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpIF4gYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDIpIF4gYnl0ZXMzMihtc2cuc2VuZGVyKSk7CgogICAgICAgIFR1bGlwIG1lbW9yeSBmb3VuZGF0aW9uID0gdHVsaXBzW3R1bGlwLmZvdW5kYXRpb25dOwogICAgICAgIFR1bGlwIG1lbW9yeSBpbnNwaXJhdGlvbiA9IHR1bGlwc1t0dWxpcC5pbnNwaXJhdGlvbl07CgogICAgICAgIGJ5dGVzMzIgZ2Vub21lID0gYnl0ZXMzMigwKTsKCiAgICAgICAgZm9yICh1aW50OCBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgICAgICAgdWludDggciA9IHVpbnQ4KGhhc2hbaV0pOwogICAgICAgICAgICB1aW50OCBnZW5lOwoKICAgICAgICAgICAgaWYgKHIgJSAxMCA8IDIpIHsKICAgICAgICAgICAgICAgZ2VuZSA9IHVpbnQ4KGZvdW5kYXRpb24uZ2Vub21lW2ldKSAtIDggKyAociAvIDE2KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyICUgMTAwIDwgOTkpIHsKICAgICAgICAgICAgICAgZ2VuZSA9IHVpbnQ4KHIgJSAxMCA8IDcgPyBmb3VuZGF0aW9uLmdlbm9tZVtpXSA6IGluc3BpcmF0aW9uLmdlbm9tZVtpXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBnZW5lID0gdWludDgoa2VjY2FrMjU2KHIpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ2Vub21lID0gYnl0ZXMzMihnZW5lKSB8IChnZW5vbWUgPDwgOCk7CiAgICAgICAgfQoKICAgICAgICB0dWxpcHNbX2lkXS5nZW5vbWUgPSBnZW5vbWU7CiAgICB9CgogICAgZnVuY3Rpb24gX2NyZWF0ZVR1bGlwKAogICAgICAgIGJ5dGVzMzIgX2dlbm9tZSwKICAgICAgICB1aW50MjU2IF9mb3VuZGF0aW9uLAogICAgICAgIHVpbnQyNTYgX2luc3BpcmF0aW9uLAogICAgICAgIHVpbnQyNTYgX2dlbmVyYXRpb24sCiAgICAgICAgYWRkcmVzcyBfb3duZXIKICAgICkgaW50ZXJuYWwgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgICBUdWxpcCBtZW1vcnkgbmV3VHVsaXAgPSBUdWxpcCh7CiAgICAgICAgICAgIGdlbm9tZTogX2dlbm9tZSwKICAgICAgICAgICAgYmxvY2s6IHVpbnQ2NChibG9jay5udW1iZXIpLAogICAgICAgICAgICBmb3VuZGF0aW9uOiB1aW50NjQoX2ZvdW5kYXRpb24pLAogICAgICAgICAgICBpbnNwaXJhdGlvbjogdWludDY0KF9pbnNwaXJhdGlvbiksCiAgICAgICAgICAgIGdlbmVyYXRpb246IHVpbnQ2NChfZ2VuZXJhdGlvbikKICAgICAgICB9KTsKCiAgICAgICAgdWludDI1NiBuZXdUdWxpcElkID0gdHVsaXBzLnB1c2gobmV3VHVsaXApIC0gMTsKICAgICAgICBfdHJhbnNmZXIoMCwgX293bmVyLCBuZXdUdWxpcElkKTsKICAgICAgICB0b3RhbFRva2VucysrOwogICAgICAgIHJldHVybiBuZXdUdWxpcElkOwogICAgfQoKfQ=='.
	

]
