Class {
	#name : #SRT962bb1cd4724e9e7cbca9723fa7e5ee5a9483435,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT962bb1cd4724e9e7cbca9723fa7e5ee5a9483435 >> base64 [
	^ ''.
	

]
