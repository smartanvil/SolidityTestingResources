Class {
	#name : #SRT348a50d048ae187447C01Bd19D28A21ab20DFaF4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT348a50d048ae187447C01Bd19D28A21ab20DFaF4 >> base64 [
	^ ''.
	

]
