Class {
	#name : #SRTb2236d432dcccd693d53ee3fb57ac506087bd831,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb2236d432dcccd693d53ee3fb57ac506087bd831 >> base64 [
	^ 'LyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCi8vIFRlbXBvcmFyaWx5IGhhdmUgU2FmZU1hdGggaGVyZSB1bnRpbCBhbGwgY29udHJhY3RzIGhhdmUgYmVlbiBtaWdyYXRlZCB0byBTYWZlTWF0aExpYiB2ZXJzaW9uIGZyb20gT3BlblplcHBlbGluCgoKCi8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpjb250cmFjdCBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA+IDApOwogICAgdWludCBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc2FmZVN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCn0KCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKi8KCgovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKLyoqCiAqIFNhZmUgdW5zaWduZWQgc2FmZSBtYXRoLgogKgogKiBodHRwczovL2Jsb2cuYXJhZ29uLm9uZS9saWJyYXJ5LWRyaXZlbi1kZXZlbG9wbWVudC1pbi1zb2xpZGl0eS0yYmViY2FmODg3MzYjLjc1MGd3dHdsaQogKgogKiBPcmlnaW5hbGx5IGZyb20gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0FyYWdvbk9uZS96ZXBwZWxpbi1zb2xpZGl0eS9tYXN0ZXIvY29udHJhY3RzL1NhZmVNYXRoTGliLnNvbAogKgogKiBNYWludGFpbmVkIGhlcmUgdW50aWwgbWVyZ2VkIHRvIG1haW5saW5lIHplcHBlbGluLXNvbGlkaXR5LgogKgogKi8KbGlicmFyeSBTYWZlTWF0aExpYiB7CgogIGZ1bmN0aW9uIHRpbWVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1pbnVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHBsdXModWludCBhLCB1aW50IGIpIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEpOwogICAgcmV0dXJuIGM7CiAgfQoKfQoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgoKLyoKICogSGFsdGFibGUKICoKICogQWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuCiAqIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4gRGlmZmVycyBmcm9tIFBhdXNhYmxlIGJ5IGNhdXNpbmcgYSB0aHJvdyB3aGVuIGluIGhhbHQgbW9kZS4KICoKICoKICogT3JpZ2luYWxseSBlbnZpc2lvbmVkIGluIEZpcnN0Qmxvb2QgSUNPIGNvbnRyYWN0LgogKi8KY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgYm9vbCBwdWJsaWMgaGFsdGVkOwoKICBtb2RpZmllciBzdG9wSW5FbWVyZ2VuY3kgewogICAgaWYgKGhhbHRlZCkgdGhyb3c7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgc3RvcE5vbk93bmVyc0luRW1lcmdlbmN5IHsKICAgIGlmIChoYWx0ZWQgJiYgbXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGlmICghaGFsdGVkKSB0aHJvdzsKICAgIF87CiAgfQoKICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogIGZ1bmN0aW9uIGhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgaGFsdGVkID0gdHJ1ZTsKICB9CgogIC8vIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsKICAgIGhhbHRlZCA9IGZhbHNlOwogIH0KCn0KCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKi8KCgovKioKICogSW50ZXJmYWNlIGZvciBkZWZpbmluZyBjcm93ZHNhbGUgcHJpY2luZy4KICovCmNvbnRyYWN0IFByaWNpbmdTdHJhdGVneSB7CgogIC8qKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24uICovCiAgZnVuY3Rpb24gaXNQcmljaW5nU3RyYXRlZ3koKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKiogU2VsZiBjaGVjayBpZiBhbGwgcmVmZXJlbmNlcyBhcmUgY29ycmVjdGx5IHNldC4KICAgKgogICAqIENoZWNrcyB0aGF0IHByaWNpbmcgc3RyYXRlZ3kgbWF0Y2hlcyBjcm93ZHNhbGUgcGFyYW1ldGVycy4KICAgKi8KICBmdW5jdGlvbiBpc1NhbmUoYWRkcmVzcyBjcm93ZHNhbGUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgUHJpY2luZyB0ZWxscyBpZiB0aGlzIGlzIGEgcHJlc2FsZSBwdXJjaGFzZSBvciBub3QuCiAgICAgQHBhcmFtIHB1cmNoYXNlciBBZGRyZXNzIG9mIHRoZSBwdXJjaGFzZXIKICAgICBAcmV0dXJuIEZhbHNlIGJ5IGRlZmF1bHQsIHRydWUgaWYgYSBwcmVzYWxlIHB1cmNoYXNlcgogICAqLwogIGZ1bmN0aW9uIGlzUHJlc2FsZVB1cmNoYXNlKGFkZHJlc3MgcHVyY2hhc2VyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLyoqCiAgICogV2hlbiBzb21lYm9keSB0cmllcyB0byBidXkgdG9rZW5zIGZvciBYIGV0aCwgY2FsY3VsYXRlIGhvdyBtYW55IHRva2VucyB0aGV5IGdldC4KICAgKgogICAqCiAgICogQHBhcmFtIHZhbHVlIC0gV2hhdCBpcyB0aGUgdmFsdWUgb2YgdGhlIHRyYW5zYWN0aW9uIHNlbmQgaW4gYXMgd2VpCiAgICogQHBhcmFtIHRva2Vuc1NvbGQgLSBob3cgbXVjaCB0b2tlbnMgaGF2ZSBiZWVuIHNvbGQgdGhpcyBmYXIKICAgKiBAcGFyYW0gd2VpUmFpc2VkIC0gaG93IG11Y2ggbW9uZXkgaGFzIGJlZW4gcmFpc2VkIHRoaXMgZmFyIGluIHRoZSBtYWluIHRva2VuIHNhbGUgLSB0aGlzIG51bWJlciBleGNsdWRlcyBwcmVzYWxlCiAgICogQHBhcmFtIG1zZ1NlbmRlciAtIHdobyBpcyB0aGUgaW52ZXN0b3Igb2YgdGhpcyB0cmFuc2FjdGlvbgogICAqIEBwYXJhbSBkZWNpbWFscyAtIGhvdyBtYW55IGRlY2ltYWwgdW5pdHMgdGhlIHRva2VuIGhhcwogICAqIEByZXR1cm4gQW1vdW50IG9mIHRva2VucyB0aGUgaW52ZXN0b3IgcmVjZWl2ZXMKICAgKi8KICBmdW5jdGlvbiBjYWxjdWxhdGVQcmljZSh1aW50IHZhbHVlLCB1aW50IHdlaVJhaXNlZCwgdWludCB0b2tlbnNTb2xkLCBhZGRyZXNzIG1zZ1NlbmRlciwgdWludCBkZWNpbWFscykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG9rZW5BbW91bnQpOwp9CgovKioKICogVGhpcyBzbWFydCBjb250cmFjdCBjb2RlIGlzIENvcHlyaWdodCAyMDE3IFRva2VuTWFya2V0IEx0ZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vdG9rZW5tYXJrZXQubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgdmVyc2lvbiAyLjA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKICovCgoKLyoqCiAqIEZpbmFsaXplIGFnZW50IGRlZmluZXMgd2hhdCBoYXBwZW5zIGF0IHRoZSBlbmQgb2Ygc3VjY2VzZWZ1bCBjcm93ZHNhbGUuCiAqCiAqIC0gQWxsb2NhdGUgdG9rZW5zIGZvciBmb3VuZGVycywgYm91bnRpZXMgYW5kIGNvbW11bml0eQogKiAtIE1ha2UgdG9rZW5zIHRyYW5zZmVyYWJsZQogKiAtIGV0Yy4KICovCmNvbnRyYWN0IEZpbmFsaXplQWdlbnQgewoKICBmdW5jdGlvbiBpc0ZpbmFsaXplQWdlbnQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBjYW4gcnVuIGZpbmFsaXplQ3Jvd2RzYWxlKCkgcHJvcGVybHkuCiAgICoKICAgKiBUaGlzIGlzIGEgc2FmZXR5IGNoZWNrIGZ1bmN0aW9uIHRoYXQgZG9lc24ndCBhbGxvdyBjcm93ZHNhbGUgdG8gYmVnaW4KICAgKiB1bmxlc3MgdGhlIGZpbmFsaXplciBoYXMgYmVlbiBzZXQgdXAgcHJvcGVybHkuCiAgICovCiAgZnVuY3Rpb24gaXNTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKICAvKiogQ2FsbGVkIG9uY2UgYnkgY3Jvd2RzYWxlIGZpbmFsaXplKCkgaWYgdGhlIHNhbGUgd2FzIHN1Y2Nlc3MuICovCiAgZnVuY3Rpb24gZmluYWxpemVDcm93ZHNhbGUoKTsKCn0KCi8qKgogKiBUaGlzIHNtYXJ0IGNvbnRyYWN0IGNvZGUgaXMgQ29weXJpZ2h0IDIwMTcgVG9rZW5NYXJrZXQgTHRkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly90b2tlbm1hcmtldC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCB2ZXJzaW9uIDIuMDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAogKi8KCgoKCgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQSB0b2tlbiB0aGF0IGRlZmluZXMgZnJhY3Rpb25hbCB1bml0cyBhcyBkZWNpbWFscy4KICovCmNvbnRyYWN0IEZyYWN0aW9uYWxFUkMyMCBpcyBFUkMyMCB7CgogIHVpbnQgcHVibGljIGRlY2ltYWxzOwoKfQoKCgovKioKICogQWJzdHJhY3QgYmFzZSBjb250cmFjdCBmb3IgdG9rZW4gc2FsZXMuCiAqCiAqIEhhbmRsZQogKiAtIHN0YXJ0IGFuZCBlbmQgZGF0ZXMKICogLSBhY2NlcHRpbmcgaW52ZXN0bWVudHMKICogLSBtaW5pbXVtIGZ1bmRpbmcgZ29hbCBhbmQgcmVmdW5kCiAqIC0gdmFyaW91cyBzdGF0aXN0aWNzIGR1cmluZyB0aGUgY3Jvd2RmdW5kCiAqIC0gZGlmZmVyZW50IHByaWNpbmcgc3RyYXRlZ2llcwogKiAtIGRpZmZlcmVudCBpbnZlc3RtZW50IHBvbGljaWVzIChyZXF1aXJlIHNlcnZlciBzaWRlIGN1c3RvbWVyIGlkLCBhbGxvdyBvbmx5IHdoaXRlbGlzdGVkIGFkZHJlc3NlcykKICoKICovCmNvbnRyYWN0IENyb3dkc2FsZSBpcyBIYWx0YWJsZSB7CgogIC8qIE1heCBpbnZlc3RtZW50IGNvdW50IHdoZW4gd2UgYXJlIHN0aWxsIGFsbG93ZWQgdG8gY2hhbmdlIHRoZSBtdWx0aXNpZyBhZGRyZXNzICovCiAgdWludCBwdWJsaWMgTUFYX0lOVkVTVE1FTlRTX0JFRk9SRV9NVUxUSVNJR19DSEFOR0UgPSA1OwoKICB1c2luZyBTYWZlTWF0aExpYiBmb3IgdWludDsKCiAgLyogVGhlIHRva2VuIHdlIGFyZSBzZWxsaW5nICovCiAgRnJhY3Rpb25hbEVSQzIwIHB1YmxpYyB0b2tlbjsKCiAgLyogSG93IHdlIGFyZSBnb2luZyB0byBwcmljZSBvdXIgb2ZmZXJpbmcgKi8KICBQcmljaW5nU3RyYXRlZ3kgcHVibGljIHByaWNpbmdTdHJhdGVneTsKCiAgLyogUG9zdC1zdWNjZXNzIGNhbGxiYWNrICovCiAgRmluYWxpemVBZ2VudCBwdWJsaWMgZmluYWxpemVBZ2VudDsKCiAgLyogdG9rZW5zIHdpbGwgYmUgdHJhbnNmZXJlZCBmcm9tIHRoaXMgYWRkcmVzcyAqLwogIGFkZHJlc3MgcHVibGljIG11bHRpc2lnV2FsbGV0OwoKICAvKiBpZiB0aGUgZnVuZGluZyBnb2FsIGlzIG5vdCByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzICovCiAgdWludCBwdWJsaWMgbWluaW11bUZ1bmRpbmdHb2FsOwoKICAvKiB0aGUgVU5JWCB0aW1lc3RhbXAgc3RhcnQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlICovCiAgdWludCBwdWJsaWMgc3RhcnRzQXQ7CgogIC8qIHRoZSBVTklYIHRpbWVzdGFtcCBlbmQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlICovCiAgdWludCBwdWJsaWMgZW5kc0F0OwoKICAvKiB0aGUgbnVtYmVyIG9mIHRva2VucyBhbHJlYWR5IHNvbGQgdGhyb3VnaCB0aGlzIGNvbnRyYWN0Ki8KICB1aW50IHB1YmxpYyB0b2tlbnNTb2xkID0gMDsKCiAgLyogSG93IG1hbnkgd2VpIG9mIGZ1bmRpbmcgd2UgaGF2ZSByYWlzZWQgKi8KICB1aW50IHB1YmxpYyB3ZWlSYWlzZWQgPSAwOwoKICAvKiBDYWxjdWxhdGUgaW5jb21pbmcgZnVuZHMgZnJvbSBwcmVzYWxlIGNvbnRyYWN0cyBhbmQgYWRkcmVzc2VzICovCiAgdWludCBwdWJsaWMgcHJlc2FsZVdlaVJhaXNlZCA9IDA7CgogIC8qIEhvdyBtYW55IGRpc3RpbmN0IGFkZHJlc3NlcyBoYXZlIGludmVzdGVkICovCiAgdWludCBwdWJsaWMgaW52ZXN0b3JDb3VudCA9IDA7CgogIC8qIEhvdyBtdWNoIHdlaSB3ZSBoYXZlIHJldHVybmVkIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFmdGVyIGEgZmFpbGVkIGNyb3dkZnVuZC4gKi8KICB1aW50IHB1YmxpYyBsb2FkZWRSZWZ1bmQgPSAwOwoKICAvKiBIb3cgbXVjaCB3ZWkgd2UgaGF2ZSBnaXZlbiBiYWNrIHRvIGludmVzdG9ycy4qLwogIHVpbnQgcHVibGljIHdlaVJlZnVuZGVkID0gMDsKCiAgLyogSGFzIHRoaXMgY3Jvd2RzYWxlIGJlZW4gZmluYWxpemVkICovCiAgYm9vbCBwdWJsaWMgZmluYWxpemVkOwoKICAvKiBEbyB3ZSBuZWVkIHRvIGhhdmUgdW5pcXVlIGNvbnRyaWJ1dG9yIGlkIGZvciBlYWNoIGN1c3RvbWVyICovCiAgYm9vbCBwdWJsaWMgcmVxdWlyZUN1c3RvbWVySWQ7CgogIC8qKgogICAgKiBEbyB3ZSB2ZXJpZnkgdGhhdCBjb250cmlidXRvciBoYXMgYmVlbiBjbGVhcmVkIG9uIHRoZSBzZXJ2ZXIgc2lkZSAoYWNjcmVkaXRlZCBpbnZlc3RvcnMgb25seSkuCiAgICAqIFRoaXMgbWV0aG9kIHdhcyBmaXJzdCB1c2VkIGluIEZpcnN0Qmxvb2QgY3Jvd2RzYWxlIHRvIGVuc3VyZSBhbGwgY29udHJpYnV0b3JzIGhhdmUgYWNjZXB0ZWQgdGVybXMgb24gc2FsZSAob24gdGhlIHdlYikuCiAgICAqLwogIGJvb2wgcHVibGljIHJlcXVpcmVkU2lnbmVkQWRkcmVzczsKCiAgLyogU2VydmVyIHNpZGUgYWRkcmVzcyB0aGF0IHNpZ25lZCBhbGxvd2VkIGNvbnRyaWJ1dG9ycyAoRXRoZXJldW0gYWRkcmVzc2VzKSB0aGF0IGNhbiBwYXJ0aWNpcGF0ZSB0aGUgY3Jvd2RzYWxlICovCiAgYWRkcmVzcyBwdWJsaWMgc2lnbmVyQWRkcmVzczsKCiAgLyoqIEhvdyBtdWNoIEVUSCBlYWNoIGFkZHJlc3MgaGFzIGludmVzdGVkIHRvIHRoaXMgY3Jvd2RzYWxlICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgaW52ZXN0ZWRBbW91bnRPZjsKCiAgLyoqIEhvdyBtdWNoIHRva2VucyB0aGlzIGNyb3dkc2FsZSBoYXMgY3JlZGl0ZWQgZm9yIGVhY2ggaW52ZXN0b3IgYWRkcmVzcyAqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHRva2VuQW1vdW50T2Y7CgogIC8qKiBBZGRyZXNzZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBpbnZlc3QgZXZlbiBiZWZvcmUgSUNPIG9mZmljYWwgb3BlbnMuIEZvciB0ZXN0aW5nLCBmb3IgSUNPIHBhcnRuZXJzLCBldGMuICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdDsKCiAgLyoqIFRoaXMgaXMgZm9yIG1hbnVsIHRlc3RpbmcgZm9yIHRoZSBpbnRlcmFjdGlvbiBmcm9tIG93bmVyIHdhbGxldC4gWW91IGNhbiBzZXQgaXQgdG8gYW55IHZhbHVlIGFuZCBpbnNwZWN0IHRoaXMgaW4gYmxvY2tjaGFpbiBleHBsb3JlciB0byBzZWUgdGhhdCBjcm93ZHNhbGUgaW50ZXJhY3Rpb24gd29ya3MuICovCiAgdWludCBwdWJsaWMgb3duZXJUZXN0VmFsdWU7CgogIC8qKiBTdGF0ZSBtYWNoaW5lCiAgICoKICAgKiAtIFByZXBhcmluZzogQWxsIGNvbnRyYWN0IGluaXRpYWxpemF0aW9uIGNhbGxzIGFuZCB2YXJpYWJsZXMgaGF2ZSBub3QgYmVlbiBzZXQgeWV0CiAgICogLSBQcmVmdW5kaW5nOiBXZSBoYXZlIG5vdCBwYXNzZWQgc3RhcnQgdGltZSB5ZXQKICAgKiAtIEZ1bmRpbmc6IEFjdGl2ZSBjcm93ZHNhbGUKICAgKiAtIFN1Y2Nlc3M6IE1pbmltdW0gZnVuZGluZyBnb2FsIHJlYWNoZWQKICAgKiAtIEZhaWx1cmU6IE1pbmltdW0gZnVuZGluZyBnb2FsIG5vdCByZWFjaGVkIGJlZm9yZSBlbmRpbmcgdGltZQogICAqIC0gRmluYWxpemVkOiBUaGUgZmluYWxpemVkIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWQKICAgKiAtIFJlZnVuZGluZzogUmVmdW5kcyBhcmUgbG9hZGVkIG9uIHRoZSBjb250cmFjdCBmb3IgcmVjbGFpbS4KICAgKi8KICBlbnVtIFN0YXRle1Vua25vd24sIFByZXBhcmluZywgUHJlRnVuZGluZywgRnVuZGluZywgU3VjY2VzcywgRmFpbHVyZSwgRmluYWxpemVkLCBSZWZ1bmRpbmd9CgogIC8vIEEgbmV3IGludmVzdG1lbnQgd2FzIG1hZGUKICBldmVudCBJbnZlc3RlZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludDEyOCBjdXN0b21lcklkKTsKCiAgLy8gUmVmdW5kIHdhcyBwcm9jZXNzZWQgZm9yIGEgY29udHJpYnV0b3IKICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQpOwoKICAvLyBUaGUgcnVsZXMgd2VyZSBjaGFuZ2VkIHdoYXQga2luZCBvZiBpbnZlc3RtZW50cyB3ZSBhY2NlcHQKICBldmVudCBJbnZlc3RtZW50UG9saWN5Q2hhbmdlZChib29sIG5ld1JlcXVpcmVDdXN0b21lcklkLCBib29sIG5ld1JlcXVpcmVkU2lnbmVkQWRkcmVzcywgYWRkcmVzcyBuZXdTaWduZXJBZGRyZXNzKTsKCiAgLy8gQWRkcmVzcyBlYXJseSBwYXJ0aWNpcGF0aW9uIHdoaXRlbGlzdCBzdGF0dXMgY2hhbmdlZAogIGV2ZW50IFdoaXRlbGlzdGVkKGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0dXMpOwoKICAvLyBDcm93ZHNhbGUgZW5kIHRpbWUgaGFzIGJlZW4gY2hhbmdlZAogIGV2ZW50IEVuZHNBdENoYW5nZWQodWludCBuZXdFbmRzQXQpOwoKICBmdW5jdGlvbiBDcm93ZHNhbGUoYWRkcmVzcyBfdG9rZW4sIFByaWNpbmdTdHJhdGVneSBfcHJpY2luZ1N0cmF0ZWd5LCBhZGRyZXNzIF9tdWx0aXNpZ1dhbGxldCwgdWludCBfc3RhcnQsIHVpbnQgX2VuZCwgdWludCBfbWluaW11bUZ1bmRpbmdHb2FsKSB7CgogICAgb3duZXIgPSBtc2cuc2VuZGVyOwoKICAgIHRva2VuID0gRnJhY3Rpb25hbEVSQzIwKF90b2tlbik7CgogICAgc2V0UHJpY2luZ1N0cmF0ZWd5KF9wcmljaW5nU3RyYXRlZ3kpOwoKICAgIG11bHRpc2lnV2FsbGV0ID0gX211bHRpc2lnV2FsbGV0OwogICAgaWYobXVsdGlzaWdXYWxsZXQgPT0gMCkgewogICAgICAgIHRocm93OwogICAgfQoKICAgIGlmKF9zdGFydCA9PSAwKSB7CiAgICAgICAgdGhyb3c7CiAgICB9CgogICAgc3RhcnRzQXQgPSBfc3RhcnQ7CgogICAgaWYoX2VuZCA9PSAwKSB7CiAgICAgICAgdGhyb3c7CiAgICB9CgogICAgZW5kc0F0ID0gX2VuZDsKCiAgICAvLyBEb24ndCBtZXNzIHRoZSBkYXRlcwogICAgaWYoc3RhcnRzQXQgPj0gZW5kc0F0KSB7CiAgICAgICAgdGhyb3c7CiAgICB9CgogICAgLy8gTWluaW11bSBmdW5kaW5nIGdvYWwgY2FuIGJlIHplcm8KICAgIG1pbmltdW1GdW5kaW5nR29hbCA9IF9taW5pbXVtRnVuZGluZ0dvYWw7CiAgfQoKICAvKioKICAgKiBEb24ndCBleHBlY3QgdG8ganVzdCBzZW5kIGluIG1vbmV5IGFuZCBnZXQgdG9rZW5zLgogICAqLwogIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICB0aHJvdzsKICB9CgogIC8qKgogICAqIE1ha2UgYW4gaW52ZXN0bWVudC4KICAgKgogICAqIENyb3dkc2FsZSBtdXN0IGJlIHJ1bm5pbmcgZm9yIG9uZSB0byBpbnZlc3QuCiAgICogV2UgbXVzdCBoYXZlIG5vdCBwcmVzc2VkIHRoZSBlbWVyZ2VuY3kgYnJha2UuCiAgICoKICAgKiBAcGFyYW0gcmVjZWl2ZXIgVGhlIEV0aGVyZXVtIGFkZHJlc3Mgd2hvIHJlY2VpdmVzIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gY3VzdG9tZXJJZCAob3B0aW9uYWwpIFVVSUQgdjQgdG8gdHJhY2sgdGhlIHN1Y2Nlc3NmdWwgcGF5bWVudHMgb24gdGhlIHNlcnZlciBzaWRlCiAgICoKICAgKi8KICBmdW5jdGlvbiBpbnZlc3RJbnRlcm5hbChhZGRyZXNzIHJlY2VpdmVyLCB1aW50MTI4IGN1c3RvbWVySWQpIHN0b3BJbkVtZXJnZW5jeSBwcml2YXRlIHsKCiAgICAvLyBEZXRlcm1pbmUgaWYgaXQncyBhIGdvb2QgdGltZSB0byBhY2NlcHQgaW52ZXN0bWVudCBmcm9tIHRoaXMgcGFydGljaXBhbnQKICAgIGlmKGdldFN0YXRlKCkgPT0gU3RhdGUuUHJlRnVuZGluZykgewogICAgICAvLyBBcmUgd2Ugd2hpdGVsaXN0ZWQgZm9yIGVhcmx5IGRlcG9zaXQKICAgICAgaWYoIWVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbcmVjZWl2ZXJdKSB7CiAgICAgICAgdGhyb3c7CiAgICAgIH0KICAgIH0gZWxzZSBpZihnZXRTdGF0ZSgpID09IFN0YXRlLkZ1bmRpbmcpIHsKICAgICAgLy8gUmV0YWlsIHBhcnRpY2lwYW50cyBjYW4gb25seSBjb21lIGluIHdoZW4gdGhlIGNyb3dkc2FsZSBpcyBydW5uaW5nCiAgICAgIC8vIHBhc3MKICAgIH0gZWxzZSB7CiAgICAgIC8vIFVud2FudGVkIHN0YXRlCiAgICAgIHRocm93OwogICAgfQoKICAgIHVpbnQgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIEFjY291bnQgcHJlc2FsZSBzYWxlcyBzZXBhcmF0ZWx5LCBzbyB0aGF0IHRoZXkgZG8gbm90IGNvdW50IGFnYWluc3QgcHJpY2luZyB0cmFuY2hlcwogICAgdWludCB0b2tlbkFtb3VudCA9IHByaWNpbmdTdHJhdGVneS5jYWxjdWxhdGVQcmljZSh3ZWlBbW91bnQsIHdlaVJhaXNlZCAtIHByZXNhbGVXZWlSYWlzZWQsIHRva2Vuc1NvbGQsIG1zZy5zZW5kZXIsIHRva2VuLmRlY2ltYWxzKCkpOwoKICAgIGlmKHRva2VuQW1vdW50ID09IDApIHsKICAgICAgLy8gRHVzdCB0cmFuc2FjdGlvbgogICAgICB0aHJvdzsKICAgIH0KCiAgICBpZihpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9PSAwKSB7CiAgICAgICAvLyBBIG5ldyBpbnZlc3RvcgogICAgICAgaW52ZXN0b3JDb3VudCsrOwogICAgfQoKICAgIC8vIFVwZGF0ZSBpbnZlc3RvcgogICAgaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0gPSBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXS5wbHVzKHdlaUFtb3VudCk7CiAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXModG9rZW5BbW91bnQpOwoKICAgIC8vIFVwZGF0ZSB0b3RhbHMKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5wbHVzKHdlaUFtb3VudCk7CiAgICB0b2tlbnNTb2xkID0gdG9rZW5zU29sZC5wbHVzKHRva2VuQW1vdW50KTsKCiAgICBpZihwcmljaW5nU3RyYXRlZ3kuaXNQcmVzYWxlUHVyY2hhc2UocmVjZWl2ZXIpKSB7CiAgICAgICAgcHJlc2FsZVdlaVJhaXNlZCA9IHByZXNhbGVXZWlSYWlzZWQucGx1cyh3ZWlBbW91bnQpOwogICAgfQoKICAgIC8vIENoZWNrIHRoYXQgd2UgZGlkIG5vdCBidXN0IHRoZSBjYXAKICAgIGlmKGlzQnJlYWtpbmdDYXAod2VpQW1vdW50LCB0b2tlbkFtb3VudCwgd2VpUmFpc2VkLCB0b2tlbnNTb2xkKSkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsKCiAgICAvLyBQb2NrZXQgdGhlIG1vbmV5CiAgICBpZighbXVsdGlzaWdXYWxsZXQuc2VuZCh3ZWlBbW91bnQpKSB0aHJvdzsKCiAgICAvLyBUZWxsIHVzIGludmVzdCB3YXMgc3VjY2VzcwogICAgSW52ZXN0ZWQocmVjZWl2ZXIsIHdlaUFtb3VudCwgdG9rZW5BbW91bnQsIGN1c3RvbWVySWQpOwogIH0KCiAgLyoqCiAgICogUHJlYWxsb2NhdGUgdG9rZW5zIGZvciB0aGUgZWFybHkgaW52ZXN0b3JzLgogICAqCiAgICogUHJlYWxsb2NhdGVkIHRva2VucyBoYXZlIGJlZW4gc29sZCBiZWZvcmUgdGhlIGFjdHVhbCBjcm93ZHNhbGUgb3BlbnMuCiAgICogVGhpcyBmdW5jdGlvbiBtaW50cyB0aGUgdG9rZW5zIGFuZCBtb3ZlcyB0aGUgY3Jvd2RzYWxlIG5lZWRsZS4KICAgKgogICAqIEludmVzdG9yIGNvdW50IGlzIG5vdCBoYW5kbGVkOyBpdCBpcyBhc3N1bWVkIHRoaXMgZ29lcyBmb3IgbXVsdGlwbGUgaW52ZXN0b3JzCiAgICogYW5kIHRoZSB0b2tlbiBkaXN0cmlidXRpb24gaGFwcGVucyBvdXRzaWRlIHRoZSBzbWFydCBjb250cmFjdCBmbG93LgogICAqCiAgICogTm8gbW9uZXkgaXMgZXhjaGFuZ2VkLCBhcyB0aGUgY3Jvd2RzYWxlIHRlYW0gYWxyZWFkeSBoYXZlIHJlY2VpdmVkIHRoZSBwYXltZW50LgogICAqCiAgICogQHBhcmFtIGZ1bGxUb2tlbnMgdG9rZW5zIGFzIGZ1bGwgdG9rZW5zIC0gZGVjaW1hbCBwbGFjZXMgYWRkZWQgaW50ZXJuYWxseQogICAqIEBwYXJhbSB3ZWlQcmljZSBQcmljZSBvZiBhIHNpbmdsZSBmdWxsIHRva2VuIGluIHdlaQogICAqCiAgICovCiAgZnVuY3Rpb24gcHJlYWxsb2NhdGUoYWRkcmVzcyByZWNlaXZlciwgdWludCBmdWxsVG9rZW5zLCB1aW50IHdlaVByaWNlKSBwdWJsaWMgb25seU93bmVyIHsKCiAgICB1aW50IHRva2VuQW1vdW50ID0gZnVsbFRva2VucyAqIDEwKip0b2tlbi5kZWNpbWFscygpOwogICAgdWludCB3ZWlBbW91bnQgPSB3ZWlQcmljZSAqIGZ1bGxUb2tlbnM7IC8vIFRoaXMgY2FuIGJlIGFsc28gMCwgd2UgZ2l2ZSBvdXQgdG9rZW5zIGZvciBmcmVlCgogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLnBsdXMod2VpQW1vdW50KTsKICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLnBsdXModG9rZW5BbW91bnQpOwoKICAgIGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID0gaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0ucGx1cyh3ZWlBbW91bnQpOwogICAgdG9rZW5BbW91bnRPZltyZWNlaXZlcl0gPSB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXS5wbHVzKHRva2VuQW1vdW50KTsKCiAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsKCiAgICAvLyBUZWxsIHVzIGludmVzdCB3YXMgc3VjY2VzcwogICAgSW52ZXN0ZWQocmVjZWl2ZXIsIHdlaUFtb3VudCwgdG9rZW5BbW91bnQsIDApOwogIH0KCiAgLyoqCiAgICogQWxsb3cgYW5vbnltb3VzIGNvbnRyaWJ1dGlvbnMgdG8gdGhpcyBjcm93ZHNhbGUuCiAgICovCiAgZnVuY3Rpb24gaW52ZXN0V2l0aFNpZ25lZEFkZHJlc3MoYWRkcmVzcyBhZGRyLCB1aW50MTI4IGN1c3RvbWVySWQsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgYnl0ZXMzMiBoYXNoID0gc2hhMjU2KGFkZHIpOwogICAgIGlmIChlY3JlY292ZXIoaGFzaCwgdiwgciwgcykgIT0gc2lnbmVyQWRkcmVzcykgdGhyb3c7CiAgICAgaWYoY3VzdG9tZXJJZCA9PSAwKSB0aHJvdzsgIC8vIFVVSUR2NCBzYW5pdHkgY2hlY2sKICAgICBpbnZlc3RJbnRlcm5hbChhZGRyLCBjdXN0b21lcklkKTsKICB9CgogIC8qKgogICAqIFRyYWNrIHdobyBpcyB0aGUgY3VzdG9tZXIgbWFraW5nIHRoZSBwYXltZW50IHNvIHdlIGNhbiBzZW5kIHRoYW5rIHlvdSBlbWFpbC4KICAgKi8KICBmdW5jdGlvbiBpbnZlc3RXaXRoQ3VzdG9tZXJJZChhZGRyZXNzIGFkZHIsIHVpbnQxMjggY3VzdG9tZXJJZCkgcHVibGljIHBheWFibGUgewogICAgaWYocmVxdWlyZWRTaWduZWRBZGRyZXNzKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIGFsbG93cyBvbmx5IHNlcnZlci1zaWRlIHNpZ25lZCBwYXJ0aWNpcGFudHMKICAgIGlmKGN1c3RvbWVySWQgPT0gMCkgdGhyb3c7ICAvLyBVVUlEdjQgc2FuaXR5IGNoZWNrCiAgICBpbnZlc3RJbnRlcm5hbChhZGRyLCBjdXN0b21lcklkKTsKICB9CgogIC8qKgogICAqIEFsbG93IGFub255bW91cyBjb250cmlidXRpb25zIHRvIHRoaXMgY3Jvd2RzYWxlLgogICAqLwogIGZ1bmN0aW9uIGludmVzdChhZGRyZXNzIGFkZHIpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGlmKHJlcXVpcmVDdXN0b21lcklkKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIG5lZWRzIHRvIHRyYWNrIHBhcnRpY2lwYW50cyBmb3IgdGhhbmsgeW91IGVtYWlsCiAgICBpZihyZXF1aXJlZFNpZ25lZEFkZHJlc3MpIHRocm93OyAvLyBDcm93ZHNhbGUgYWxsb3dzIG9ubHkgc2VydmVyLXNpZGUgc2lnbmVkIHBhcnRpY2lwYW50cwogICAgaW52ZXN0SW50ZXJuYWwoYWRkciwgMCk7CiAgfQoKICAvKioKICAgKiBJbnZlc3QgdG8gdG9rZW5zLCByZWNvZ25pemUgdGhlIHBheWVyIGFuZCBjbGVhciBoaXMgYWRkcmVzcy4KICAgKgogICAqLwogIGZ1bmN0aW9uIGJ1eVdpdGhTaWduZWRBZGRyZXNzKHVpbnQxMjggY3VzdG9tZXJJZCwgdWludDggdiwgYnl0ZXMzMiByLCBieXRlczMyIHMpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGludmVzdFdpdGhTaWduZWRBZGRyZXNzKG1zZy5zZW5kZXIsIGN1c3RvbWVySWQsIHYsIHIsIHMpOwogIH0KCiAgLyoqCiAgICogSW52ZXN0IHRvIHRva2VucywgcmVjb2duaXplIHRoZSBwYXllci4KICAgKgogICAqLwogIGZ1bmN0aW9uIGJ1eVdpdGhDdXN0b21lcklkKHVpbnQxMjggY3VzdG9tZXJJZCkgcHVibGljIHBheWFibGUgewogICAgaW52ZXN0V2l0aEN1c3RvbWVySWQobXNnLnNlbmRlciwgY3VzdG9tZXJJZCk7CiAgfQoKICAvKioKICAgKiBUaGUgYmFzaWMgZW50cnkgcG9pbnQgdG8gcGFydGljaXBhdGUgdGhlIGNyb3dkc2FsZSBwcm9jZXNzLgogICAqCiAgICogUGF5IGZvciBmdW5kaW5nLCBnZXQgaW52ZXN0ZWQgdG9rZW5zIGJhY2sgaW4gdGhlIHNlbmRlciBhZGRyZXNzLgogICAqLwogIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGludmVzdChtc2cuc2VuZGVyKTsKICB9CgogIC8qKgogICAqIEZpbmFsaXplIGEgc3VjY2Nlc2Z1bCBjcm93ZHNhbGUuCiAgICoKICAgKiBUaGUgb3duZXIgY2FuIHRyaWdncmUgYSBjYWxsIHRoZSBjb250cmFjdCB0aGF0IHByb3ZpZGVzIHBvc3QtY3Jvd2RzYWxlIGFjdGlvbnMsIGxpa2UgcmVsZWFzaW5nIHRoZSB0b2tlbnMuCiAgICovCiAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzKSBvbmx5T3duZXIgc3RvcEluRW1lcmdlbmN5IHsKCiAgICAvLyBBbHJlYWR5IGZpbmFsaXplZAogICAgaWYoZmluYWxpemVkKSB7CiAgICAgIHRocm93OwogICAgfQoKICAgIC8vIEZpbmFsaXppbmcgaXMgb3B0aW9uYWwuIFdlIG9ubHkgY2FsbCBpdCBpZiB3ZSBhcmUgZ2l2ZW4gYSBmaW5hbGl6aW5nIGFnZW50LgogICAgaWYoYWRkcmVzcyhmaW5hbGl6ZUFnZW50KSAhPSAwKSB7CiAgICAgIGZpbmFsaXplQWdlbnQuZmluYWxpemVDcm93ZHNhbGUoKTsKICAgIH0KCiAgICBmaW5hbGl6ZWQgPSB0cnVlOwogIH0KCiAgLyoqCiAgICogQWxsb3cgdG8gKHJlKXNldCBmaW5hbGl6ZSBhZ2VudC4KICAgKgogICAqIERlc2lnbiBjaG9pY2U6IG5vIHN0YXRlIHJlc3RyaWN0aW9ucyBvbiBzZXR0aW5nIHRoaXMsIHNvIHRoYXQgd2UgY2FuIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLgogICAqLwogIGZ1bmN0aW9uIHNldEZpbmFsaXplQWdlbnQoRmluYWxpemVBZ2VudCBhZGRyKSBvbmx5T3duZXIgewogICAgZmluYWxpemVBZ2VudCA9IGFkZHI7CgogICAgLy8gRG9uJ3QgYWxsb3cgc2V0dGluZyBiYWQgYWdlbnQKICAgIGlmKCFmaW5hbGl6ZUFnZW50LmlzRmluYWxpemVBZ2VudCgpKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KCiAgLyoqCiAgICogU2V0IHBvbGljeSBkbyB3ZSBuZWVkIHRvIGhhdmUgc2VydmVyLXNpZGUgY3VzdG9tZXIgaWRzIGZvciB0aGUgaW52ZXN0bWVudHMuCiAgICoKICAgKi8KICBmdW5jdGlvbiBzZXRSZXF1aXJlQ3VzdG9tZXJJZChib29sIHZhbHVlKSBvbmx5T3duZXIgewogICAgcmVxdWlyZUN1c3RvbWVySWQgPSB2YWx1ZTsKICAgIEludmVzdG1lbnRQb2xpY3lDaGFuZ2VkKHJlcXVpcmVDdXN0b21lcklkLCByZXF1aXJlZFNpZ25lZEFkZHJlc3MsIHNpZ25lckFkZHJlc3MpOwogIH0KCiAgLyoqCiAgICogU2V0IHBvbGljeSBpZiBhbGwgaW52ZXN0b3JzIG11c3QgYmUgY2xlYXJlZCBvbiB0aGUgc2VydmVyIHNpZGUgZmlyc3QuCiAgICoKICAgKiBUaGlzIGlzIGUuZy4gZm9yIHRoZSBhY2NyZWRpdGVkIGludmVzdG9yIGNsZWFyaW5nLgogICAqCiAgICovCiAgZnVuY3Rpb24gc2V0UmVxdWlyZVNpZ25lZEFkZHJlc3MoYm9vbCB2YWx1ZSwgYWRkcmVzcyBfc2lnbmVyQWRkcmVzcykgb25seU93bmVyIHsKICAgIHJlcXVpcmVkU2lnbmVkQWRkcmVzcyA9IHZhbHVlOwogICAgc2lnbmVyQWRkcmVzcyA9IF9zaWduZXJBZGRyZXNzOwogICAgSW52ZXN0bWVudFBvbGljeUNoYW5nZWQocmVxdWlyZUN1c3RvbWVySWQsIHJlcXVpcmVkU2lnbmVkQWRkcmVzcywgc2lnbmVyQWRkcmVzcyk7CiAgfQoKICAvKioKICAgKiBBbGxvdyBhZGRyZXNzZXMgdG8gZG8gZWFybHkgcGFydGljaXBhdGlvbi4KICAgKgogICAqIFRPRE86IEZpeCBzcGVsbGluZyBlcnJvciBpbiB0aGUgbmFtZQogICAqLwogIGZ1bmN0aW9uIHNldEVhcmx5UGFyaWNpcGFudFdoaXRlbGlzdChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdHVzKSBvbmx5T3duZXIgewogICAgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdFthZGRyXSA9IHN0YXR1czsKICAgIFdoaXRlbGlzdGVkKGFkZHIsIHN0YXR1cyk7CiAgfQoKICAvKioKICAgKiBBbGxvdyBjcm93ZHNhbGUgb3duZXIgdG8gY2xvc2UgZWFybHkgb3IgZXh0ZW5kIHRoZSBjcm93ZHNhbGUuCiAgICoKICAgKiBUaGlzIGlzIHVzZWZ1bCBlLmcuIGZvciBhIG1hbnVhbCBzb2Z0IGNhcCBpbXBsZW1lbnRhdGlvbjoKICAgKiAtIGFmdGVyIFggYW1vdW50IGlzIHJlYWNoZWQgZGV0ZXJtaW5lIG1hbnVhbCBjbG9zaW5nCiAgICoKICAgKiBUaGlzIG1heSBwdXQgdGhlIGNyb3dkc2FsZSB0byBhbiBpbnZhbGlkIHN0YXRlLAogICAqIGJ1dCB3ZSB0cnVzdCBvd25lcnMga25vdyB3aGF0IHRoZXkgYXJlIGRvaW5nLgogICAqCiAgICovCiAgZnVuY3Rpb24gc2V0RW5kc0F0KHVpbnQgdGltZSkgb25seU93bmVyIHsKCiAgICBpZihub3cgPiB0aW1lKSB7CiAgICAgIHRocm93OyAvLyBEb24ndCBjaGFuZ2UgcGFzdAogICAgfQoKICAgIGVuZHNBdCA9IHRpbWU7CiAgICBFbmRzQXRDaGFuZ2VkKGVuZHNBdCk7CiAgfQoKICAvKioKICAgKiBBbGxvdyB0byAocmUpc2V0IHByaWNpbmcgc3RyYXRlZ3kuCiAgICoKICAgKiBEZXNpZ24gY2hvaWNlOiBubyBzdGF0ZSByZXN0cmljdGlvbnMgb24gdGhlIHNldCwgc28gdGhhdCB3ZSBjYW4gZml4IGZhdCBmaW5nZXIgbWlzdGFrZXMuCiAgICovCiAgZnVuY3Rpb24gc2V0UHJpY2luZ1N0cmF0ZWd5KFByaWNpbmdTdHJhdGVneSBfcHJpY2luZ1N0cmF0ZWd5KSBvbmx5T3duZXIgewogICAgcHJpY2luZ1N0cmF0ZWd5ID0gX3ByaWNpbmdTdHJhdGVneTsKCiAgICAvLyBEb24ndCBhbGxvdyBzZXR0aW5nIGJhZCBhZ2VudAogICAgaWYoIXByaWNpbmdTdHJhdGVneS5pc1ByaWNpbmdTdHJhdGVneSgpKSB7CiAgICAgIHRocm93OwogICAgfQogIH0KCiAgLyoqCiAgICogQWxsb3cgdG8gY2hhbmdlIHRoZSB0ZWFtIG11bHRpc2lnIGFkZHJlc3MgaW4gdGhlIGNhc2Ugb2YgZW1lcmdlbmN5LgogICAqCiAgICogVGhpcyBhbGxvd3MgdG8gc2F2ZSBhIGRlcGxveWVkIGNyb3dkc2FsZSB3YWxsZXQgaW4gdGhlIGNhc2UgdGhlIGNyb3dkc2FsZSBoYXMgbm90IHlldCBiZWd1bgogICAqICh3ZSBoYXZlIGRvbmUgb25seSBmZXcgdGVzdCB0cmFuc2FjdGlvbnMpLiBBZnRlciB0aGUgY3Jvd2RzYWxlIGlzIGdvaW5nCiAgICogdGhlbiBtdWx0aXNpZyBhZGRyZXNzIHN0YXlzIGxvY2tlZCBmb3IgdGhlIHNhZmV0eSByZWFzb25zLgogICAqLwogIGZ1bmN0aW9uIHNldE11bHRpc2lnKGFkZHJlc3MgYWRkcikgcHVibGljIG9ubHlPd25lciB7CgogICAgLy8gQ2hhbmdlCiAgICBpZihpbnZlc3RvckNvdW50ID4gTUFYX0lOVkVTVE1FTlRTX0JFRk9SRV9NVUxUSVNJR19DSEFOR0UpIHsKICAgICAgdGhyb3c7CiAgICB9CgogICAgbXVsdGlzaWdXYWxsZXQgPSBhZGRyOwogIH0KCiAgLyoqCiAgICogQWxsb3cgbG9hZCByZWZ1bmRzIGJhY2sgb24gdGhlIGNvbnRyYWN0IGZvciB0aGUgcmVmdW5kaW5nLgogICAqCiAgICogVGhlIHRlYW0gY2FuIHRyYW5zZmVyIHRoZSBmdW5kcyBiYWNrIG9uIHRoZSBzbWFydCBjb250cmFjdCBpbiB0aGUgY2FzZSB0aGUgbWluaW11bSBnb2FsIHdhcyBub3QgcmVhY2hlZC4uCiAgICovCiAgZnVuY3Rpb24gbG9hZFJlZnVuZCgpIHB1YmxpYyBwYXlhYmxlIGluU3RhdGUoU3RhdGUuRmFpbHVyZSkgewogICAgaWYobXNnLnZhbHVlID09IDApIHRocm93OwogICAgbG9hZGVkUmVmdW5kID0gbG9hZGVkUmVmdW5kLnBsdXMobXNnLnZhbHVlKTsKICB9CgogIC8qKgogICAqIEludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kLgogICAqCiAgICogTm90ZSB0aGF0IGFueSByZWZ1bmRzIGZyb20gcHJveHkgYnV5ZXJzIHNob3VsZCBiZSBoYW5kbGVkIHNlcGFyYXRlbHksCiAgICogYW5kIG5vdCB0aHJvdWdoIHRoaXMgY29udHJhY3QuCiAgICovCiAgZnVuY3Rpb24gcmVmdW5kKCkgcHVibGljIGluU3RhdGUoU3RhdGUuUmVmdW5kaW5nKSB7CiAgICB1aW50MjU2IHdlaVZhbHVlID0gaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXTsKICAgIGlmICh3ZWlWYWx1ZSA9PSAwKSB0aHJvdzsKICAgIGludmVzdGVkQW1vdW50T2ZbbXNnLnNlbmRlcl0gPSAwOwogICAgd2VpUmVmdW5kZWQgPSB3ZWlSZWZ1bmRlZC5wbHVzKHdlaVZhbHVlKTsKICAgIFJlZnVuZChtc2cuc2VuZGVyLCB3ZWlWYWx1ZSk7CiAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZCh3ZWlWYWx1ZSkpIHRocm93OwogIH0KCiAgLyoqCiAgICogQHJldHVybiB0cnVlIGlmIHRoZSBjcm93ZHNhbGUgaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gYmUgYSBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGlzTWluaW11bUdvYWxSZWFjaGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgcmVhY2hlZCkgewogICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBtaW5pbXVtRnVuZGluZ0dvYWw7CiAgfQoKICAvKioKICAgKiBDaGVjayBpZiB0aGUgY29udHJhY3QgcmVsYXRpb25zaGlwIGxvb2tzIGdvb2QuCiAgICovCiAgZnVuY3Rpb24gaXNGaW5hbGl6ZXJTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgc2FuZSkgewogICAgcmV0dXJuIGZpbmFsaXplQWdlbnQuaXNTYW5lKCk7CiAgfQoKICAvKioKICAgKiBDaGVjayBpZiB0aGUgY29udHJhY3QgcmVsYXRpb25zaGlwIGxvb2tzIGdvb2QuCiAgICovCiAgZnVuY3Rpb24gaXNQcmljaW5nU2FuZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHNhbmUpIHsKICAgIHJldHVybiBwcmljaW5nU3RyYXRlZ3kuaXNTYW5lKGFkZHJlc3ModGhpcykpOwogIH0KCiAgLyoqCiAgICogQ3Jvd2RmdW5kIHN0YXRlIG1hY2hpbmUgbWFuYWdlbWVudC4KICAgKgogICAqIFdlIG1ha2UgaXQgYSBmdW5jdGlvbiBhbmQgZG8gbm90IGFzc2lnbiB0aGUgcmVzdWx0IHRvIGEgdmFyaWFibGUsIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSBvZiB0aGUgdmFyaWFibGUgYmVpbmcgc3RhbGUuCiAgICovCiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoU3RhdGUpIHsKICAgIGlmKGZpbmFsaXplZCkgcmV0dXJuIFN0YXRlLkZpbmFsaXplZDsKICAgIGVsc2UgaWYgKGFkZHJlc3MoZmluYWxpemVBZ2VudCkgPT0gMCkgcmV0dXJuIFN0YXRlLlByZXBhcmluZzsKICAgIGVsc2UgaWYgKCFmaW5hbGl6ZUFnZW50LmlzU2FuZSgpKSByZXR1cm4gU3RhdGUuUHJlcGFyaW5nOwogICAgZWxzZSBpZiAoIXByaWNpbmdTdHJhdGVneS5pc1NhbmUoYWRkcmVzcyh0aGlzKSkpIHJldHVybiBTdGF0ZS5QcmVwYXJpbmc7CiAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPCBzdGFydHNBdCkgcmV0dXJuIFN0YXRlLlByZUZ1bmRpbmc7CiAgICBlbHNlIGlmIChibG9jay50aW1lc3RhbXAgPD0gZW5kc0F0ICYmICFpc0Nyb3dkc2FsZUZ1bGwoKSkgcmV0dXJuIFN0YXRlLkZ1bmRpbmc7CiAgICBlbHNlIGlmIChpc01pbmltdW1Hb2FsUmVhY2hlZCgpKSByZXR1cm4gU3RhdGUuU3VjY2VzczsKICAgIGVsc2UgaWYgKCFpc01pbmltdW1Hb2FsUmVhY2hlZCgpICYmIHdlaVJhaXNlZCA+IDAgJiYgbG9hZGVkUmVmdW5kID49IHdlaVJhaXNlZCkgcmV0dXJuIFN0YXRlLlJlZnVuZGluZzsKICAgIGVsc2UgcmV0dXJuIFN0YXRlLkZhaWx1cmU7CiAgfQoKICAvKiogVGhpcyBpcyBmb3IgbWFudWFsIHRlc3Rpbmcgb2YgbXVsdGlzaWcgd2FsbGV0IGludGVyYWN0aW9uICovCiAgZnVuY3Rpb24gc2V0T3duZXJUZXN0VmFsdWUodWludCB2YWwpIG9ubHlPd25lciB7CiAgICBvd25lclRlc3RWYWx1ZSA9IHZhbDsKICB9CgogIC8qKiBJbnRlcmZhY2UgbWFya2VyLiAqLwogIGZ1bmN0aW9uIGlzQ3Jvd2RzYWxlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8KICAvLyBNb2RpZmllcnMKICAvLwoKICAvKiogTW9kaWZpZWQgYWxsb3dpbmcgZXhlY3V0aW9uIG9ubHkgaWYgdGhlIGNyb3dkc2FsZSBpcyBjdXJyZW50bHkgcnVubmluZy4gICovCiAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBzdGF0ZSkgewogICAgaWYoZ2V0U3RhdGUoKSAhPSBzdGF0ZSkgdGhyb3c7CiAgICBfOwogIH0KCgogIC8vCiAgLy8gQWJzdHJhY3QgZnVuY3Rpb25zCiAgLy8KCiAgLyoqCiAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgaW52ZXN0ZWQgYnJlYWtzIG91ciBjYXAgcnVsZXMuCiAgICoKICAgKgogICAqIFRoZSBjaGlsZCBjb250cmFjdCBtdXN0IGRlZmluZSB0aGVpciBvd24gY2FwIHNldHRpbmcgcnVsZXMuCiAgICogV2UgYWxsb3cgYSBsb3Qgb2YgZmxleGliaWxpdHkgdGhyb3VnaCBkaWZmZXJlbnQgY2FwcGluZyBzdHJhdGVnaWVzIChFVEgsIHRva2VuIGNvdW50KQogICAqIENhbGxlZCBmcm9tIGludmVzdCgpLgogICAqCiAgICogQHBhcmFtIHdlaUFtb3VudCBUaGUgYW1vdW50IG9mIHdlaSB0aGUgaW52ZXN0b3IgdHJpZXMgdG8gaW52ZXN0IGluIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uCiAgICogQHBhcmFtIHRva2VuQW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHdlIHRyeSB0byBnaXZlIHRvIHRoZSBpbnZlc3RvciBpbiB0aGUgY3VycmVudCB0cmFuc2FjdGlvbgogICAqIEBwYXJhbSB3ZWlSYWlzZWRUb3RhbCBXaGF0IHdvdWxkIGJlIG91ciB0b3RhbCByYWlzZWQgYmFsYW5jZSBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICogQHBhcmFtIHRva2Vuc1NvbGRUb3RhbCBXaGF0IHdvdWxkIGJlIG91ciB0b3RhbCBzb2xkIHRva2VucyBjb3VudCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICoKICAgKiBAcmV0dXJuIHRydWUgaWYgdGFraW5nIHRoaXMgaW52ZXN0bWVudCB3b3VsZCBicmVhayBvdXIgY2FwIHJ1bGVzCiAgICovCiAgZnVuY3Rpb24gaXNCcmVha2luZ0NhcCh1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludCB3ZWlSYWlzZWRUb3RhbCwgdWludCB0b2tlbnNTb2xkVG90YWwpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgbGltaXRCcm9rZW4pOwoKICAvKioKICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBjcm93ZHNhbGUgaXMgZnVsbCBhbmQgd2UgY2FuIG5vIGxvbmdlciBzZWxsIGFueSB0b2tlbnMuCiAgICovCiAgZnVuY3Rpb24gaXNDcm93ZHNhbGVGdWxsKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpOwoKICAvKioKICAgKiBDcmVhdGUgbmV3IHRva2VucyBvciB0cmFuc2ZlciBpc3N1ZWQgdG9rZW5zIHRvIHRoZSBpbnZlc3RvciBkZXBlbmRpbmcgb24gdGhlIGNhcCBtb2RlbC4KICAgKi8KICBmdW5jdGlvbiBhc3NpZ25Ub2tlbnMoYWRkcmVzcyByZWNlaXZlciwgdWludCB0b2tlbkFtb3VudCkgcHJpdmF0ZTsKfQoKLyoqCiAqIFRoaXMgc21hcnQgY29udHJhY3QgY29kZSBpcyBDb3B5cmlnaHQgMjAxNyBUb2tlbk1hcmtldCBMdGQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL3Rva2VubWFya2V0Lm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIHZlcnNpb24gMi4wOiBodHRwczovL2dpdGh1Yi5jb20vVG9rZW5NYXJrZXROZXQvaWNvL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0CiAqLwoKCgoKCgoKLyoqCiAqIFN0YW5kYXJkIEVSQzIwIHRva2VuIHdpdGggU2hvcnQgSGFuZCBBdHRhY2sgYW5kIGFwcHJvdmUoKSByYWNlIGNvbmRpdGlvbiBtaXRpZ2F0aW9uLgogKgogKiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6CiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgU2FmZU1hdGggewoKICAvKiBUb2tlbiBzdXBwbHkgZ290IGluY3JlYXNlZCBhbmQgYSBuZXcgb3duZXIgcmVjZWl2ZWQgdGhlc2UgdG9rZW5zICovCiAgZXZlbnQgTWludGVkKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KTsKCiAgLyogQWN0dWFsIGJhbGFuY2VzIG9mIHRva2VuIGhvbGRlcnMgKi8KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CgogIC8qIGFwcHJvdmUoKSBhbGxvd2FuY2VzICovCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwoKICAvKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24gKi8KICBmdW5jdGlvbiBpc1Rva2VuKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgd2VBcmUpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgdWludCBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93OwoKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCn0KCgoKLyoqCiAqIENvbGxlY3QgZnVuZHMgZnJvbSBwcmVzYWxlIGludmVzdG9ycywgYnV5IHRva2VucyBmb3IgdGhlbSBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbiBhbmQgZGlzdHJpYnV0ZSBvdXQgdG9rZW5zLgogKgogKiAtIENvbGxlY3QgZnVuZHMgZnJvbSBwcmUtc2FsZSBpbnZlc3RvcnMKICogLSBTZW5kIGZ1bmRzIHRvIHRoZSBjcm93ZHNhbGUgd2hlbiBpdCBvcGVucwogKiAtIEFsbG93IG93bmVyIHRvIHNldCB0aGUgY3Jvd2RzYWxlCiAqIC0gSGF2ZSByZWZ1bmQgYWZ0ZXIgWCBkYXlzIGFzIGEgc2FmZXR5IGhhdGNoIGlmIHRoZSBjcm93ZHNhbGUgZG9lc24ndCBtYXRlcmlsaXplCiAqIC0gQWxsb3cgdW5saW1pdGVkIGludmVzdG9ycwogKiAtIFRva2VucyBhcmUgZGlzdHJpYnV0ZWQgb24gUHJlSUNPUHJveHlCdXllciBzbWFydCBjb250cmFjdCBmaXJzdAogKiAtIFRoZSBvcmlnaW5hbCBpbnZlc3RvcnMgY2FuIGNsYWltIHRoZWlyIHRva2VucyBmcm9tIHRoZSBzbWFydCBjb250cmFjdCBhZnRlciB0aGUgdG9rZW4gdHJhbnNmZXIgaGFzIGJlZW4gcmVsZWFzZWQKICogLSBBbGwgZnVuY3Rpb25zIGNhbiBiZSBoYWx0ZWQgYnkgb3duZXIgaWYgc29tZXRoaW5nIGdvZXMgd3JvbmcKICoKICovCmNvbnRyYWN0IFByZUlDT1Byb3h5QnV5ZXIgaXMgT3duYWJsZSwgSGFsdGFibGUsIFNhZmVNYXRoIHsKCiAgLyoqIEhvdyBtYW55IGludmVzdG9ycyB3ZSBoYXZlIG5vdyAqLwogIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQ7CgogIC8qKiBIb3cgbWFueSB3ZWkgd2UgaGF2ZSByYWlzZWQgdG90bGEuICovCiAgdWludCBwdWJsaWMgd2VpUmFpc2VkOwoKICAvKiogV2hvIGFyZSBvdXIgaW52ZXN0b3JzIChpdGVyYWJsZSkgKi8KICBhZGRyZXNzW10gcHVibGljIGludmVzdG9yczsKCiAgLyoqIEhvdyBtdWNoIHRoZXkgaGF2ZSBpbnZlc3RlZCAqLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7CgogIC8qKiBIb3cgbWFueSB0b2tlbnMgaW52ZXN0b3JzIGhhdmUgY2xhaW1lZCAqLwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgY2xhaW1lZDsKCiAgLyoqIFdoZW4gb3VyIHJlZnVuZCBmcmVlemUgaXMgb3ZlciAoVU5JVCB0aW1lc3RhbXApICovCiAgdWludCBwdWJsaWMgZnJlZXplRW5kc0F0OwoKICAvKiogV2hhdCBpcyB0aGUgbWluaW11bSBidXkgaW4gKi8KICB1aW50IHB1YmxpYyB3ZWlNaW5pbXVtTGltaXQ7CgogIC8qKiBXaGF0IGlzIHRoZSBtYXhpbXVtIGJ1eSBpbiAqLwogIHVpbnQgcHVibGljIHdlaU1heGltdW1MaW1pdDsKCiAgLyoqIEhvdyBtYW55IHdlaXMgdG90YWwgd2UgYXJlIGFsbG93ZWQgdG8gY29sbGVjdC4gKi8KICB1aW50IHB1YmxpYyB3ZWlDYXA7CgogIC8qKiBIb3cgbWFueSB0b2tlbnMgd2VyZSBib3VnaHQgKi8KICB1aW50IHB1YmxpYyB0b2tlbnNCb3VnaHQ7CgogICAvKiogSG93IG1hbnkgaW52ZXN0b3JzIGhhdmUgY2xhaW1lZCB0aGVpciB0b2tlbnMgKi8KICB1aW50IHB1YmxpYyBjbGFpbUNvdW50OwoKICB1aW50IHB1YmxpYyB0b3RhbENsYWltZWQ7CgogIC8qKiBUaGlzIGlzIHVzZWQgdG8gc2lnbmFsIHRoYXQgd2Ugd2FudCB0aGUgcmVmdW5kICoqLwogIGJvb2wgcHVibGljIGZvcmNlZFJlZnVuZDsKCiAgLyoqIE91ciBJQ08gY29udHJhY3Qgd2hlcmUgd2Ugd2lsbCBtb3ZlIHRoZSBmdW5kcyAqLwogIENyb3dkc2FsZSBwdWJsaWMgY3Jvd2RzYWxlOwoKICAvKiogV2hhdCBpcyBvdXIgY3VycmVudCBzdGF0ZS4gKi8KICBlbnVtIFN0YXRle1Vua25vd24sIEZ1bmRpbmcsIERpc3RyaWJ1dGluZywgUmVmdW5kaW5nfQoKICAvKiogU29tZWJvZHkgbG9hZGVkIHRoZWlyIGludmVzdG1lbnQgbW9uZXkgKi8KICBldmVudCBJbnZlc3RlZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludDEyOCBjdXN0b21lcklkKTsKCiAgLyoqIFJlZnVuZCBjbGFpbWVkICovCiAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB2YWx1ZSk7CgogIC8qKiBXZSBleGVjdXRlZCBvdXIgYnV5ICovCiAgZXZlbnQgVG9rZW5zQm91Z2h0cyh1aW50IGNvdW50KTsKCiAgLyoqIFdlIGRpc3RyaWJ1dGVkIHRva2VucyB0byBhbiBpbnZlc3RvciAqLwogIGV2ZW50IERpc3RyaWJ1dGVkKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgY291bnQpOwoKICAvKioKICAgKiBDcmVhdGUgcHJlc2FsZSBjb250cmFjdCB3aGVyZSBsb2NrIHVwIHBlcmlvZCBpcyBnaXZlbiBkYXlzCiAgICovCiAgZnVuY3Rpb24gUHJlSUNPUHJveHlCdXllcihhZGRyZXNzIF9vd25lciwgdWludCBfZnJlZXplRW5kc0F0LCB1aW50IF93ZWlNaW5pbXVtTGltaXQsIHVpbnQgX3dlaU1heGltdW1MaW1pdCwgdWludCBfd2VpQ2FwKSB7CgogICAgb3duZXIgPSBfb3duZXI7CgogICAgLy8gR2l2ZSBhcmd1bWVudAogICAgaWYoX2ZyZWV6ZUVuZHNBdCA9PSAwKSB7CiAgICAgIHRocm93OwogICAgfQoKICAgIC8vIEdpdmUgYXJndW1lbnQKICAgIGlmKF93ZWlNaW5pbXVtTGltaXQgPT0gMCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICBpZihfd2VpTWF4aW11bUxpbWl0ID09IDApIHsKICAgICAgdGhyb3c7CiAgICB9CgogICAgd2VpTWluaW11bUxpbWl0ID0gX3dlaU1pbmltdW1MaW1pdDsKICAgIHdlaU1heGltdW1MaW1pdCA9IF93ZWlNYXhpbXVtTGltaXQ7CiAgICB3ZWlDYXAgPSBfd2VpQ2FwOwogICAgZnJlZXplRW5kc0F0ID0gX2ZyZWV6ZUVuZHNBdDsKICB9CgogIC8qKgogICAqIEdldCB0aGUgdG9rZW4gd2UgYXJlIGRpc3RyaWJ1dGluZy4KICAgKi8KICBmdW5jdGlvbiBnZXRUb2tlbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKEZyYWN0aW9uYWxFUkMyMCkgewogICAgaWYoYWRkcmVzcyhjcm93ZHNhbGUpID09IDApICB7CiAgICAgIHRocm93OwogICAgfQoKICAgIHJldHVybiBjcm93ZHNhbGUudG9rZW4oKTsKICB9CgogIC8qKgogICAqIFBhcnRpY2lwYXRlIHRvIGEgcHJlc2FsZS4KICAgKi8KICBmdW5jdGlvbiBpbnZlc3QodWludDEyOCBjdXN0b21lcklkKSBwcml2YXRlIHsKCiAgICAvLyBDYW5ub3QgaW52ZXN0IGFueW1vcmUgdGhyb3VnaCBjcm93ZHNhbGUgd2hlbiBtb3ZpbmcgaGFzIGJlZ3VuCiAgICBpZihnZXRTdGF0ZSgpICE9IFN0YXRlLkZ1bmRpbmcpIHRocm93OwoKICAgIGlmKG1zZy52YWx1ZSA9PSAwKSB0aHJvdzsgLy8gTm8gZW1wdHkgYnV5cwoKICAgIGFkZHJlc3MgaW52ZXN0b3IgPSBtc2cuc2VuZGVyOwoKICAgIGJvb2wgZXhpc3RpbmcgPSBiYWxhbmNlc1tpbnZlc3Rvcl0gPiAwOwoKICAgIGJhbGFuY2VzW2ludmVzdG9yXSA9IHNhZmVBZGQoYmFsYW5jZXNbaW52ZXN0b3JdLCBtc2cudmFsdWUpOwoKICAgIC8vIE5lZWQgdG8gc2F0aXNmeSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxpbWl0cwogICAgaWYoYmFsYW5jZXNbaW52ZXN0b3JdIDwgd2VpTWluaW11bUxpbWl0IHx8IGJhbGFuY2VzW2ludmVzdG9yXSA+IHdlaU1heGltdW1MaW1pdCkgewogICAgICB0aHJvdzsKICAgIH0KCiAgICAvLyBUaGlzIGlzIGEgbmV3IGludmVzdG9yCiAgICBpZighZXhpc3RpbmcpIHsKICAgICAgaW52ZXN0b3JzLnB1c2goaW52ZXN0b3IpOwogICAgICBpbnZlc3RvckNvdW50Kys7CiAgICB9CgogICAgd2VpUmFpc2VkID0gc2FmZUFkZCh3ZWlSYWlzZWQsIG1zZy52YWx1ZSk7CiAgICBpZih3ZWlSYWlzZWQgPiB3ZWlDYXApIHsKICAgICAgdGhyb3c7CiAgICB9CgogICAgLy8gV2Ugd2lsbCB1c2UgdGhlIHNhbWUgZXZlbnQgZm9ybSB0aGUgQ3Jvd2RzYWxlIGZvciBjb21wYXRpYmlsaXR5IHJlYXNvbnMKICAgIC8vIGRlc3BpdGUgbm90IGhhdmluZyBhIHRva2VuIGFtb3VudC4KICAgIEludmVzdGVkKGludmVzdG9yLCBtc2cudmFsdWUsIDAsIGN1c3RvbWVySWQpOwogIH0KCiAgZnVuY3Rpb24gYnV5V2l0aEN1c3RvbWVySWQodWludDEyOCBjdXN0b21lcklkKSBwdWJsaWMgc3RvcEluRW1lcmdlbmN5IHBheWFibGUgewogICAgaW52ZXN0KGN1c3RvbWVySWQpOwogIH0KCiAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHN0b3BJbkVtZXJnZW5jeSBwYXlhYmxlIHsKICAgIGludmVzdCgweDApOwogIH0KCgogIC8qKgogICAqIExvYWQgZnVuZHMgdG8gdGhlIGNyb3dkc2FsZSBmb3IgYWxsIGludmVzdG9ycy4KICAgKgogICAqCiAgICovCiAgZnVuY3Rpb24gYnV5Rm9yRXZlcnlib2R5KCkgc3RvcE5vbk93bmVyc0luRW1lcmdlbmN5IHB1YmxpYyB7CgogICAgaWYoZ2V0U3RhdGUoKSAhPSBTdGF0ZS5GdW5kaW5nKSB7CiAgICAgIC8vIE9ubHkgYWxsb3cgYnV5IG9uY2UKICAgICAgdGhyb3c7CiAgICB9CgogICAgLy8gQ3Jvd2RzYWxlIG5vdCB5ZXQgc2V0CiAgICBpZihhZGRyZXNzKGNyb3dkc2FsZSkgPT0gMCkgdGhyb3c7CgogICAgLy8gQnV5IHRva2VucyBvbiB0aGUgY29udHJhY3QKICAgIGNyb3dkc2FsZS5pbnZlc3QudmFsdWUod2VpUmFpc2VkKShhZGRyZXNzKHRoaXMpKTsKCiAgICAvLyBSZWNvcmQgaG93IG1hbnkgdG9rZW5zIHdlIGdvdAogICAgdG9rZW5zQm91Z2h0ID0gZ2V0VG9rZW4oKS5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CgogICAgaWYodG9rZW5zQm91Z2h0ID09IDApIHsKICAgICAgLy8gRGlkIG5vdCBnZXQgYW55IHRva2VucwogICAgICB0aHJvdzsKICAgIH0KCiAgICBUb2tlbnNCb3VnaHRzKHRva2Vuc0JvdWdodCk7CiAgfQoKICAvKioKICAgKiBIb3cgbWF5IHRva2VucyBlYWNoIGludmVzdG9yIGdldHMuCiAgICovCiAgZnVuY3Rpb24gZ2V0Q2xhaW1BbW91bnQoYWRkcmVzcyBpbnZlc3RvcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKCiAgICAvLyBDbGFpbXMgY2FuIGJlIG9ubHkgbWFkZSBpZiB3ZSBtYW5hZ2UgdG8gYnV5IHRva2VucwogICAgaWYoZ2V0U3RhdGUoKSAhPSBTdGF0ZS5EaXN0cmlidXRpbmcpIHsKICAgICAgdGhyb3c7CiAgICB9CiAgICByZXR1cm4gc2FmZU11bChiYWxhbmNlc1tpbnZlc3Rvcl0sIHRva2Vuc0JvdWdodCkgLyB3ZWlSYWlzZWQ7CiAgfQoKICAvKioKICAgKiBIb3cgbWFueSB0b2tlbnMgcmVtYWluIHVuY2xhaW1lZCBmb3IgYW4gaW52ZXN0b3IuCiAgICovCiAgZnVuY3Rpb24gZ2V0Q2xhaW1MZWZ0KGFkZHJlc3MgaW52ZXN0b3IpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gc2FmZVN1YihnZXRDbGFpbUFtb3VudChpbnZlc3RvciksIGNsYWltZWRbaW52ZXN0b3JdKTsKICB9CgogIC8qKgogICAqIENsYWltIGFsbCByZW1haW5pbmcgdG9rZW5zIGZvciB0aGlzIGludmVzdG9yLgogICAqLwogIGZ1bmN0aW9uIGNsYWltQWxsKCkgewogICAgY2xhaW0oZ2V0Q2xhaW1MZWZ0KG1zZy5zZW5kZXIpKTsKICB9CgogIC8qKgogICAqIENsYWltIE4gYm91Z2h0IHRva2VucyB0byB0aGUgaW52ZXN0b3IgYXMgdGhlIG1zZyBzZW5kZXIuCiAgICoKICAgKi8KICBmdW5jdGlvbiBjbGFpbSh1aW50IGFtb3VudCkgc3RvcEluRW1lcmdlbmN5IHsKICAgIGFkZHJlc3MgaW52ZXN0b3IgPSBtc2cuc2VuZGVyOwoKICAgIGlmKGFtb3VudCA9PSAwKSB7CiAgICAgIHRocm93OwogICAgfQoKICAgIGlmKGdldENsYWltTGVmdChpbnZlc3RvcikgPCBhbW91bnQpIHsKICAgICAgLy8gV29vcHMgd2UgY2Fubm90IGdldCBtb3JlIHRoYW4gd2UgaGF2ZSBsZWZ0CiAgICAgIHRocm93OwogICAgfQoKICAgIC8vIFdlIHRyYWNrIHdobyBtYW55IGludmVzdG9yIGhhdmUgKHBhcnRpYWxseSkgY2xhaW1lZCB0aGVpciB0b2tlbnMKICAgIGlmKGNsYWltZWRbaW52ZXN0b3JdID09IDApIHsKICAgICAgY2xhaW1Db3VudCsrOwogICAgfQoKICAgIGNsYWltZWRbaW52ZXN0b3JdID0gc2FmZUFkZChjbGFpbWVkW2ludmVzdG9yXSwgYW1vdW50KTsKICAgIHRvdGFsQ2xhaW1lZCA9IHNhZmVBZGQodG90YWxDbGFpbWVkLCBhbW91bnQpOwogICAgZ2V0VG9rZW4oKS50cmFuc2ZlcihpbnZlc3RvciwgYW1vdW50KTsKCiAgICBEaXN0cmlidXRlZChpbnZlc3RvciwgYW1vdW50KTsKICB9CgogIC8qKgogICAqIElDTyBuZXZlciBoYXBwZW5lZC4gQWxsb3cgcmVmdW5kLgogICAqLwogIGZ1bmN0aW9uIHJlZnVuZCgpIHN0b3BJbkVtZXJnZW5jeSB7CgogICAgLy8gVHJ5aW5nIHRvIGFzayByZWZ1bmQgdG9vIHNvb24KICAgIGlmKGdldFN0YXRlKCkgIT0gU3RhdGUuUmVmdW5kaW5nKSB0aHJvdzsKCiAgICBhZGRyZXNzIGludmVzdG9yID0gbXNnLnNlbmRlcjsKICAgIGlmKGJhbGFuY2VzW2ludmVzdG9yXSA9PSAwKSB0aHJvdzsKICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZXNbaW52ZXN0b3JdOwogICAgZGVsZXRlIGJhbGFuY2VzW2ludmVzdG9yXTsKICAgIGlmKCEoaW52ZXN0b3IuY2FsbC52YWx1ZShhbW91bnQpKCkpKSB0aHJvdzsKICAgIFJlZnVuZGVkKGludmVzdG9yLCBhbW91bnQpOwogIH0KCiAgLyoqCiAgICogU2V0IHRoZSB0YXJnZXQgY3Jvd2RzYWxlIHdoZXJlIHdlIHdpbGwgbW92ZSBwcmVzYWxlIGZ1bmRzIHdoZW4gdGhlIGNyb3dkc2FsZSBvcGVucy4KICAgKi8KICBmdW5jdGlvbiBzZXRDcm93ZHNhbGUoQ3Jvd2RzYWxlIF9jcm93ZHNhbGUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgY3Jvd2RzYWxlID0gX2Nyb3dkc2FsZTsKCiAgICAvLyBDaGVjayBpbnRlcmZhY2UKICAgIGlmKCFjcm93ZHNhbGUuaXNDcm93ZHNhbGUoKSkgdHJ1ZTsKICB9CgogIC8vLyBAZGV2IFRoaXMgaXMgdXNlZCBpbiB0aGUgZmlyc3QgY2FzZSBzY2VuYXJpbywgdGhpcyB3aWxsIGZvcmNlIHRoZSBzdGF0ZQogIC8vLyAgICAgIHRvIHJlZnVuZGluZy4gVGhpcyBjYW4gYmUgYWxzbyB1c2VkIHdoZW4gdGhlIElDTyBmYWlscyB0byBtZWV0IHRoZSBjYXAuCiAgZnVuY3Rpb24gZm9yY2VSZWZ1bmQoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIGZvcmNlZFJlZnVuZCA9IHRydWU7CiAgfQoKICAvLy8gQGRldiBUaGlzIHNob3VsZCBiZSB1c2VkIGlmIHRoZSBDcm93ZHNhbGUgZmFpbHMsIHRvIHJlY2VpdmUgdGhlIHJlZnVsZCBtb25leS4KICAvLy8gICAgICB3ZSBjYW4ndCB1c2UgQ3Jvd2RzYWxlJ3MgcmVmdW5kLCBzaW5jZSBvdXIgZGVmYXVsdCBmdW5jdGlvbiBkb2VzIG5vdAogIC8vLyAgICAgIGFjY2VwdCBtb25leSBpbi4KICBmdW5jdGlvbiBsb2FkUmVmdW5kKCkgcHVibGljIHBheWFibGUgewogICAgaWYoZ2V0U3RhdGUoKSAhPSBTdGF0ZS5SZWZ1bmRpbmcpIHRocm93OwogIH0KCiAgLyoqCiAgICogUmVzb2x2ZSB0aGUgY29udHJhY3QgdW1hbWJpZ2lvdXMgc3RhdGUuCiAgICovCiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSBwdWJsaWMgcmV0dXJucyhTdGF0ZSkgewogICAgaWYgKGZvcmNlZFJlZnVuZCkKICAgICAgcmV0dXJuIFN0YXRlLlJlZnVuZGluZzsKCiAgICBpZih0b2tlbnNCb3VnaHQgPT0gMCkgewogICAgICBpZihub3cgPj0gZnJlZXplRW5kc0F0KSB7CiAgICAgICAgIHJldHVybiBTdGF0ZS5SZWZ1bmRpbmc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFN0YXRlLkZ1bmRpbmc7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBTdGF0ZS5EaXN0cmlidXRpbmc7CiAgICB9CiAgfQoKICAvKiogSW50ZXJmYWNlIG1hcmtlci4gKi8KICBmdW5jdGlvbiBpc1ByZXNhbGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKiogRXhwbGljaXRseSBjYWxsIGZ1bmN0aW9uIGZyb20geW91ciB3YWxsZXQuICovCiAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgIHRocm93OwogIH0KfQ=='.
	

]
