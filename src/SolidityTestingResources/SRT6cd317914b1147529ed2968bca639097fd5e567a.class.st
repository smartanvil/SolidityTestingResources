Class {
	#name : #SRT6cd317914b1147529ed2968bca639097fd5e567a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6cd317914b1147529ed2968bca639097fd5e567a >> base64 [
	^ ''.
	

]
