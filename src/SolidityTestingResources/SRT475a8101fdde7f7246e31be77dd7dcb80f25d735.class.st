Class {
	#name : #SRT475a8101fdde7f7246e31be77dd7dcb80f25d735,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT475a8101fdde7f7246e31be77dd7dcb80f25d735 >> base64 [
	^ ''.
	

]
