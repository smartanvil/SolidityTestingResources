Class {
	#name : #SRT4f4f0db4de903b88f2b1a2847971e231d54f8fd3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f4f0db4de903b88f2b1a2847971e231d54f8fd3 >> base64 [
	^ ''.
	

]
