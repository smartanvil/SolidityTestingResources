Class {
	#name : #SRT80647a3b0ea039dd077c10128558a948fc0d9276,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80647a3b0ea039dd077c10128558a948fc0d9276 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgogLy8vIEB0aXRsZSBPd25hYmxlIGNvbnRyYWN0IC0gYmFzZSBjb250cmFjdCB3aXRoIGFuIG93bmVyCiAvLy8gQGF1dGhvciA8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZTU4MTgwOTNhNTk2ODg4NDk3OTE4NjhhOGI5MTk3ODQ4NjkxODA4NDg4Y2I4NjhhODgiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+CmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsgIAogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQogIH0KfQoKLy8vIEB0aXRsZSBIYWx0YWJsZSBjb250cmFjdCAtIGFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCi8vLyBAYXV0aG9yIDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI2ZTBhMGIxODJlMWQwMzBmMWMxYTBkMDEwMDFhMWMwZjBkMWEwYjBmMDM0MDBkMDEwMyI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4KLy8vIE9yaWdpbmFsbHkgZW52aXNpb25lZCBpbiBGaXJzdEJsb29kIElDTyBjb250cmFjdC4KY29udHJhY3QgSGFsdGFibGUgaXMgT3duYWJsZSB7CiAgYm9vbCBwdWJsaWMgaGFsdGVkOwoKICBtb2RpZmllciBzdG9wSW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZSghaGFsdGVkKTsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5SW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZShoYWx0ZWQpOyAgICAgICAKICAgIF87CiAgfQoKICAvLy8gY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbWVyZ2VuY3ksIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICBmdW5jdGlvbiBoYWx0KCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIGhhbHRlZCA9IHRydWU7CiAgfQoKICAvLy8gY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbmQgb2YgZW1lcmdlbmN5LCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogIGZ1bmN0aW9uIHVuaGFsdCgpIGV4dGVybmFsIG9ubHlPd25lciBvbmx5SW5FbWVyZ2VuY3kgewogICAgaGFsdGVkID0gZmFsc2U7CiAgfQp9CgoKCiAvLy8gQHRpdGxlIEVSQzIwIGludGVyZmFjZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAvLy8gQGF1dGhvciA8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZjc5MzkyODFiNzg0OWE5Njg1ODM5NDk4OTk4Mzg1OTY5NDgzOTI5NjlhZDk5NDk4OWEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+CmNvbnRyYWN0IEVSQzIwIHsKICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsKfQoKIC8vLyBAdGl0bGUgU2FmZU1hdGggY29udHJhY3QgLSBtYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAvLy8gQGF1dGhvciA8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iYTJjNmM3ZDRlMmQxY2ZjM2QwZDZjMWNkY2NkNmQwYzNjMWQ2YzdjM2NmOGNjMWNkY2YiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+CmNvbnRyYWN0IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiID4gMCk7CiAgICB1aW50IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIHJlcXVpcmUoYXNzZXJ0aW9uKTsgIAogIH0KfQoKCi8vLyBAdGl0bGUgU29sYXJEYW9Ub2tlbiBjb250cmFjdCAtIHN0YW5kYXJkIEVSQzIwIHRva2VuIHdpdGggU2hvcnQgSGFuZCBBdHRhY2sgYW5kIGFwcHJvdmUoKSByYWNlIGNvbmRpdGlvbiBtaXRpZ2F0aW9uLgovLy8gQGF1dGhvciA8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNjMwNzA2MTUyMzEwMGUwMjExMTcwMDBjMGQxNzExMDIwMDE3MDYwMjBlNGQwMDBjMGUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+CmNvbnRyYWN0IFNvbGFyRGFvVG9rZW4gaXMgU2FmZU1hdGgsIEVSQzIwLCBPd25hYmxlIHsKIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJTb2xhciBEQU8gVG9rZW4iOwogc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiU0RBTyI7CiB1aW50IHB1YmxpYyBkZWNpbWFscyA9IDQ7CgogLy8vIGNvbnRyYWN0IHRoYXQgaXMgYWxsb3dlZCB0byBjcmVhdGUgbmV3IHRva2VucyBhbmQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4KIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZUFnZW50OwogLy8vIEEgY3Jvd2RzYWxlIGNvbnRyYWN0IGNhbiByZWxlYXNlIHVzIHRvIHRoZSB3aWxkIGlmIElDTyBzdWNjZXNzLiBJZiBmYWxzZSB3ZSBhcmUgYXJlIGluIHRyYW5zZmVyIGxvY2sgdXAgcGVyaW9kLgogYm9vbCBwdWJsaWMgcmVsZWFzZWQgPSBmYWxzZTsKIC8vLyBhcHByb3ZlKCkgYWxsb3dhbmNlcwogbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwogLy8vIGhvbGRlciBiYWxhbmNlcwogbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKIC8vLyBAZGV2IExpbWl0IHRva2VuIHRyYW5zZmVyIHVudGlsIHRoZSBjcm93ZHNhbGUgaXMgb3Zlci4KIG1vZGlmaWVyIGNhblRyYW5zZmVyKCkgewogICBpZighcmVsZWFzZWQpIHsKICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcm93ZHNhbGVBZ2VudCk7CiAgIH0KICAgXzsKIH0KCiAvLy8gQGRldiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBvbmx5IGJlZm9yZSBvciBhZnRlciB0aGUgdG9rZW5zIGhhdmUgYmVlbiByZWxlYXNlc2QKIC8vLyBAcGFyYW0gX3JlbGVhc2VkIHRva2VuIHRyYW5zZmVyIGFuZCBtaW50IHN0YXRlCiBtb2RpZmllciBpblJlbGVhc2VTdGF0ZShib29sIF9yZWxlYXNlZCkgewogICByZXF1aXJlKF9yZWxlYXNlZCA9PSByZWxlYXNlZCk7CiAgIF87CiB9CgogLy8vIEBkZXYgVGhlIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgb25seSBieSByZWxlYXNlIGFnZW50LgogbW9kaWZpZXIgb25seUNyb3dkc2FsZUFnZW50KCkgewogICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlQWdlbnQpOwogICBfOwogfQoKIC8vLyBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrIGh0dHA6Ly92ZXNzZW5lcy5jb20vdGhlLWVyYzIwLXNob3J0LWFkZHJlc3MtYXR0YWNrLWV4cGxhaW5lZC8KIC8vLyBAcGFyYW0gc2l6ZSBwYXlsb2FkIHNpemUKIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgIF87CiB9CgogLy8vIEBkZXYgTWFrZSBzdXJlIHdlIGFyZSBub3QgZG9uZSB5ZXQuCiBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghcmVsZWFzZWQpOwogICAgXzsKICB9CgogLy8vIEBkZXYgQ29uc3RydWN0b3IKIGZ1bmN0aW9uIFNvbGFyRGFvVG9rZW4oKSB7CiAgIG93bmVyID0gbXNnLnNlbmRlcjsKIH0KCiAvLy8gRmFsbGJhY2sgbWV0aG9kIHdpbGwgYnV5b3V0IHRva2VucwogZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgcmV2ZXJ0KCk7CiB9CgogLy8vIEBkZXYgQ3JlYXRlIG5ldyB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gYW4gYWRkcmVzcy4gT25seSBjYWxsYWJseSBieSBhIGNyb3dkc2FsZSBjb250cmFjdAogLy8vIEBwYXJhbSByZWNlaXZlciBBZGRyZXNzIG9mIHJlY2VpdmVyCiAvLy8gQHBhcmFtIGFtb3VudCAgTnVtYmVyIG9mIHRva2VucyB0byBpc3N1ZS4KIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpIG9ubHlDcm93ZHNhbGVBZ2VudCBjYW5NaW50IHB1YmxpYyB7CiAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIGFtb3VudCk7CiAgICBiYWxhbmNlc1tyZWNlaXZlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW3JlY2VpdmVyXSwgYW1vdW50KTsKICAgIFRyYW5zZmVyKDAsIHJlY2VpdmVyLCBhbW91bnQpOwogfQoKIC8vLyBAZGV2IFNldCB0aGUgY29udHJhY3QgdGhhdCBjYW4gY2FsbCByZWxlYXNlIGFuZCBtYWtlIHRoZSB0b2tlbiB0cmFuc2ZlcmFibGUuCiAvLy8gQHBhcmFtIF9jcm93ZHNhbGVBZ2VudCBjcm93ZHNhbGUgY29udHJhY3QgYWRkcmVzcwogZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlQWdlbnQoYWRkcmVzcyBfY3Jvd2RzYWxlQWdlbnQpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsKICAgY3Jvd2RzYWxlQWdlbnQgPSBfY3Jvd2RzYWxlQWdlbnQ7CiB9CiAvLy8gQGRldiBPbmUgd2F5IGZ1bmN0aW9uIHRvIHJlbGVhc2UgdGhlIHRva2VucyB0byB0aGUgd2lsZC4gQ2FuIGJlIGNhbGxlZCBvbmx5IGZyb20gdGhlIHJlbGVhc2UgYWdlbnQgdGhhdCBpcyB0aGUgZmluYWwgSUNPIGNvbnRyYWN0LiBJdCBpcyBvbmx5IGNhbGxlZCBpZiB0aGUgY3Jvd2RzYWxlIGhhcyBiZWVuIHN1Y2Nlc3MgKGZpcnN0IG1pbGVzdG9uZSByZWFjaGVkKS4KIGZ1bmN0aW9uIHJlbGVhc2VUb2tlblRyYW5zZmVyKCkgcHVibGljIG9ubHlDcm93ZHNhbGVBZ2VudCB7CiAgIHJlbGVhc2VkID0gdHJ1ZTsKIH0KIC8vLyBAZGV2IFRyYW5mZXIgdG9rZW5zIHRvIGFkZHJlc3MKIC8vLyBAcGFyYW0gX3RvIGRlc3QgYWRkcmVzcwogLy8vIEBwYXJhbSBfdmFsdWUgdG9rZW5zIGFtb3VudAogLy8vIEByZXR1cm4gdHJhbnNmZXIgcmVzdWx0CiBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIGNhblRyYW5zZmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7CgogICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgIHJldHVybiB0cnVlOwogfQoKIC8vLyBAZGV2IFRyYW5mZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gb3RoZXIKIC8vLyBAcGFyYW0gX2Zyb20gc291cmNlIGFkZHJlc3MKIC8vLyBAcGFyYW0gX3RvIGRlc3QgYWRkcmVzcwogLy8vIEBwYXJhbSBfdmFsdWUgdG9rZW5zIGFtb3VudAogLy8vIEByZXR1cm4gdHJhbnNmZXIgcmVzdWx0CiBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSBjYW5UcmFuc2ZlciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKIH0KIC8vLyBAZGV2IFRva2VucyBiYWxhbmNlCiAvLy8gQHBhcmFtIF9vd25lciBob2xkZXIgYWRkcmVzcwogLy8vIEByZXR1cm4gYmFsYW5jZSBhbW91bnQKIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogfQoKIC8vLyBAZGV2IEFwcHJvdmUgdHJhbnNmZXIKIC8vLyBAcGFyYW0gX3NwZW5kZXIgaG9sZGVyIGFkZHJlc3MKIC8vLyBAcGFyYW0gX3ZhbHVlIHRva2VucyBhbW91bnQKIC8vLyBAcmV0dXJuIHJlc3VsdAogZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgcmVxdWlyZSAoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICByZXR1cm4gdHJ1ZTsKIH0KCiAvLy8gQGRldiBUb2tlbiBhbGxvd2FuY2UKIC8vLyBAcGFyYW0gX293bmVyIGhvbGRlciBhZGRyZXNzCiAvLy8gQHBhcmFtIF9zcGVuZGVyIHNwZW5kZXIgYWRkcmVzcwogLy8vIEByZXR1cm4gcmVtYWluIGFtb3VudAogZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKIH0KfQoKCi8vLyBAdGl0bGUgU29sYXJEYW9Ub2tlbkNyb3dkc2FsZSBjb250cmFjdCAtIGNvbnRyYWN0IGZvciB0b2tlbiBzYWxlcy4KLy8vIEBhdXRob3IgPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjY3MDMwMjExMjcxNDBhMDYxNTEzMDQwODA5MTMxNTA2MDQxMzAyMDYwYTQ5MDQwODBhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPgpjb250cmFjdCBTb2xhckRhb1Rva2VuQ3Jvd2RzYWxlIGlzIEhhbHRhYmxlLCBTYWZlTWF0aCB7CgogIC8vLyBQcmVmdW5kaW5nIGdvYWwgaW4gVVNEIGNlbnRzLCBpZiB0aGUgcHJlZnVuZGluZyBnb2FsIGlzIHJlYWNoZWQsIGljbyB3aWxsIHN0YXJ0CiAgdWludCBwdWJsaWMgY29uc3RhbnQgUFJFX0ZVTkRJTkdfR09BTCA9IDRlNiAqIFBSSUNFOwoKICAvLy8gVG9rZW5zIGZ1bmRpbmcgZ29hbCBpbiBVU0QgY2VudHMsIGlmIHRoZSBmdW5kaW5nIGdvYWwgaXMgcmVhY2hlZCwgaWNvIHdpbGwgc3RvcAogIHVpbnQgcHVibGljIGNvbnN0YW50IElDT19HT0FMID0gOGU3ICogUFJJQ0U7CgogIC8vLyBNaW1pbmFsIHRva2VucyBmdW5kaW5nIGdvYWwgaW4gVVNEIGNlbnRzLCBpZiB0aGlzIGdvYWwgaXNuJ3QgcmVhY2hlZCBkdXJpbmcgSUNPLCByZWZ1bmQgd2lsbCBiZWdpbgogIHVpbnQgcHVibGljIGNvbnN0YW50IE1JTl9JQ09fR09BTCA9IDFlNzsKCiAgLy8vIFBlcmNlbnQgb2YgYm9udXMgdG9rZW5zIHRlYW0gcmVjZWl2ZXMgZnJvbSBlYWNoIGludmVzdG1lbnQKICB1aW50IHB1YmxpYyBjb25zdGFudCBURUFNX0JPTlVTX1BFUkNFTlQgPSAyNTsKCiAgLy8vIFRoZSB0b2tlbiBwcmljZSBpbiBVU0QgY2VudHMKICB1aW50IGNvbnN0YW50IHB1YmxpYyBQUklDRSA9IDEwMDsKCiAgLy8vIER1cmF0aW9uIG9mIHRoZSBwcmUtSUNPIHN0YWdlCiAgdWludCBjb25zdGFudCBwdWJsaWMgUFJFX0lDT19EVVJBVElPTiA9IDUgd2Vla3M7CgogIC8vLyBUaGUgdG9rZW4gd2UgYXJlIHNlbGxpbmcKICBTb2xhckRhb1Rva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8vIHRva2VucyB3aWxsIGJlIHRyYW5zZmVyZWQgZnJvbSB0aGlzIGFkZHJlc3MKICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ1dhbGxldDsKCiAgLy8vIHRoZSBVTklYIHRpbWVzdGFtcCBzdGFydCBkYXRlIG9mIHRoZSBjcm93ZHNhbGUKICB1aW50IHB1YmxpYyBzdGFydHNBdDsKCiAgLy8vIHRoZSBVTklYIHRpbWVzdGFtcCBlbmQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlCiAgdWludCBwdWJsaWMgZW5kc0F0OwoKICAvLy8gdGhlIFVOSVggdGltZXN0YW1wIHN0YXJ0IGRhdGUgb2YgdGhlIHByZSBpbnZlc3QgY3Jvd2RzYWxlCiAgdWludCBwdWJsaWMgcHJlSW52ZXN0U3RhcnQ7CgogIC8vLyB0aGUgbnVtYmVyIG9mIHRva2VucyBhbHJlYWR5IHNvbGQgdGhyb3VnaCB0aGlzIGNvbnRyYWN0CiAgdWludCBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogIC8vLyBIb3cgbWFueSB3ZWkgb2YgZnVuZGluZyB3ZSBoYXZlIHJhaXNlZAogIHVpbnQgcHVibGljIHdlaVJhaXNlZCA9IDA7CgogIC8vLyBIb3cgbWFueSBkaXN0aW5jdCBhZGRyZXNzZXMgaGF2ZSBpbnZlc3RlZAogIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQgPSAwOwoKICAvLy8gSG93IG11Y2ggd2VpIHdlIGhhdmUgcmV0dXJuZWQgYmFjayB0byB0aGUgY29udHJhY3QgYWZ0ZXIgYSBmYWlsZWQgY3Jvd2RmdW5kLgogIHVpbnQgcHVibGljIGxvYWRlZFJlZnVuZCA9IDA7CgogIC8vLyBIb3cgbXVjaCB3ZWkgd2UgaGF2ZSBnaXZlbiBiYWNrIHRvIGludmVzdG9ycy4KICB1aW50IHB1YmxpYyB3ZWlSZWZ1bmRlZCA9IDA7CgogIC8vLyBIYXMgdGhpcyBjcm93ZHNhbGUgYmVlbiBmaW5hbGl6ZWQKICBib29sIHB1YmxpYyBmaW5hbGl6ZWQ7CgogIC8vLyBVU0QgdG8gRXRoZXIgcmF0ZSBpbiBjZW50cwogIHVpbnQgcHVibGljIGV4Y2hhbmdlUmF0ZTsKCiAgLy8vIGV4Y2hhbmdlUmF0ZSB0aW1lc3RhbXAKICB1aW50IHB1YmxpYyBleGNoYW5nZVJhdGVUaW1lc3RhbXA7CgogIC8vLyBFeHRlcm5hbCBhZ2VudCB0aGF0IHdpbGwgY2FuIGNoYW5nZSBleGNoYW5nZSByYXRlCiAgYWRkcmVzcyBwdWJsaWMgZXhjaGFuZ2VSYXRlQWdlbnQ7CgogIC8vLyBIb3cgbXVjaCBFVEggZWFjaCBhZGRyZXNzIGhhcyBpbnZlc3RlZCB0byB0aGlzIGNyb3dkc2FsZQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGludmVzdGVkQW1vdW50T2Y7CgogIC8vLyBIb3cgbXVjaCB0b2tlbnMgdGhpcyBjcm93ZHNhbGUgaGFzIGNyZWRpdGVkIGZvciBlYWNoIGludmVzdG9yIGFkZHJlc3MKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyB0b2tlbkFtb3VudE9mOwoKICAvLy8gRGVmaW5lIHByZUlDTyBwcmljaW5nIHNjaGVkdWxlIHVzaW5nIG1pbGVzdG9uZXMuCiAgc3RydWN0IE1pbGVzdG9uZSB7CiAgICAgIC8vIFVOSVggdGltZXN0YW1wIHdoZW4gdGhpcyBtaWxlc3RvbmUga2lja3MgaW4KICAgICAgdWludCBzdGFydDsKICAgICAgLy8gVU5JWCB0aW1lc3RhbXAgd2hlbiB0aGlzIG1pbGVzdG9uZSBraWNrcyBvdXQKICAgICAgdWludCBlbmQ7CiAgICAgIC8vIEhvdyBtYW55ICUgdG9rZW5zIHdpbGwgYWRkCiAgICAgIHVpbnQgYm9udXM7CiAgfQoKICBNaWxlc3RvbmVbXSBwdWJsaWMgbWlsZXN0b25lczsKCiAgLy8vIFN0YXRlIG1hY2hpbmUKICAvLy8gUHJlcGFyaW5nOiBBbGwgY29udHJhY3QgaW5pdGlhbGl6YXRpb24gY2FsbHMgYW5kIHZhcmlhYmxlcyBoYXZlIG5vdCBiZWVuIHNldCB5ZXQKICAvLy8gUHJlZnVuZGluZzogV2UgaGF2ZSBub3QgcGFzc2VkIHN0YXJ0IHRpbWUgeWV0CiAgLy8vIEZ1bmRpbmc6IEFjdGl2ZSBjcm93ZHNhbGUKICAvLy8gU3VjY2VzczogTWluaW11bSBmdW5kaW5nIGdvYWwgcmVhY2hlZAogIC8vLyBGYWlsdXJlOiBNaW5pbXVtIGZ1bmRpbmcgZ29hbCBub3QgcmVhY2hlZCBiZWZvcmUgZW5kaW5nIHRpbWUKICAvLy8gRmluYWxpemVkOiBUaGUgZmluYWxpemVkIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWRcCiAgLy8vIFJlZnVuZGluZzogUmVmdW5kcyBhcmUgbG9hZGVkIG9uIHRoZSBjb250cmFjdCBmb3IgcmVjbGFpbS4KICBlbnVtIFN0YXRle1Vua25vd24sIFByZXBhcmluZywgUHJlRnVuZGluZywgRnVuZGluZywgU3VjY2VzcywgRmFpbHVyZSwgRmluYWxpemVkLCBSZWZ1bmRpbmd9CgogIC8vLyBBIG5ldyBpbnZlc3RtZW50IHdhcyBtYWRlCiAgZXZlbnQgSW52ZXN0ZWQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQpOwogIC8vLyBSZWZ1bmQgd2FzIHByb2Nlc3NlZCBmb3IgYSBjb250cmlidXRvcgogIGV2ZW50IFJlZnVuZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHdlaUFtb3VudCk7CiAgLy8vIENyb3dkc2FsZSBlbmQgdGltZSBoYXMgYmVlbiBjaGFuZ2VkCiAgZXZlbnQgRW5kc0F0Q2hhbmdlZCh1aW50IGVuZHNBdCk7CiAgLy8vIENhbGN1bGF0ZWQgbmV3IHByaWNlCiAgZXZlbnQgRXhjaGFuZ2VSYXRlQ2hhbmdlZCh1aW50IG9sZFZhbHVlLCB1aW50IG5ld1ZhbHVlKTsKCiAgLy8vIEBkZXYgTW9kaWZpZWQgYWxsb3dpbmcgZXhlY3V0aW9uIG9ubHkgaWYgdGhlIGNyb3dkc2FsZSBpcyBjdXJyZW50bHkgcnVubmluZwogIG1vZGlmaWVyIGluU3RhdGUoU3RhdGUgc3RhdGUpIHsKICAgIHJlcXVpcmUoZ2V0U3RhdGUoKSA9PSBzdGF0ZSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUV4Y2hhbmdlUmF0ZUFnZW50KCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGV4Y2hhbmdlUmF0ZUFnZW50KTsKICAgIF87CiAgfQoKICAvLy8gQGRldiBDb25zdHJ1Y3RvcgogIC8vLyBAcGFyYW0gX3Rva2VuIFNvbGFyIERhbyB0b2tlbiBhZGRyZXNzCiAgLy8vIEBwYXJhbSBfbXVsdGlzaWdXYWxsZXQgdGVhbSB3YWxsZXQKICAvLy8gQHBhcmFtIF9wcmVJbnZlc3RTdGFydCBwcmVJQ08gc3RhcnQgZGF0ZQogIC8vLyBAcGFyYW0gX3N0YXJ0IHRva2VuIElDTyBzdGFydCBkYXRlCiAgLy8vIEBwYXJhbSBfZW5kIHRva2VuIElDTyBlbmQgZGF0ZQogIGZ1bmN0aW9uIENyb3dkc2FsZShhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfbXVsdGlzaWdXYWxsZXQsIHVpbnQgX3ByZUludmVzdFN0YXJ0LCB1aW50IF9zdGFydCwgdWludCBfZW5kKSB7CiAgICByZXF1aXJlKF9tdWx0aXNpZ1dhbGxldCAhPSAwKTsKICAgIHJlcXVpcmUoX3ByZUludmVzdFN0YXJ0ICE9IDApOwogICAgcmVxdWlyZShfc3RhcnQgIT0gMCk7CiAgICByZXF1aXJlKF9lbmQgIT0gMCk7CiAgICByZXF1aXJlKF9zdGFydCA8IF9lbmQpOwogICAgcmVxdWlyZShfZW5kID4gX3ByZUludmVzdFN0YXJ0ICsgUFJFX0lDT19EVVJBVElPTik7CgogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgdG9rZW4gPSBTb2xhckRhb1Rva2VuKF90b2tlbik7CgogICAgbXVsdGlzaWdXYWxsZXQgPSBfbXVsdGlzaWdXYWxsZXQ7CiAgICBzdGFydHNBdCA9IF9zdGFydDsKICAgIGVuZHNBdCA9IF9lbmQ7CiAgICBwcmVJbnZlc3RTdGFydCA9IF9wcmVJbnZlc3RTdGFydDsKCiAgICB2YXIgcHJlSWNvQm9udXNlcyA9IFt1aW50KDEwMCksIDgwLCA3MCwgNjAsIDUwXTsKICAgIGZvciAodWludCBpID0gMDsgaSA8IHByZUljb0JvbnVzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgbWlsZXN0b25lcy5wdXNoKE1pbGVzdG9uZShwcmVJbnZlc3RTdGFydCArIGkgKiAxIHdlZWtzLCBwcmVJbnZlc3RTdGFydCArIChpICsgMSkgKiAxIHdlZWtzLCBwcmVJY29Cb251c2VzW2ldKSk7CiAgICB9CiAgICBtaWxlc3RvbmVzLnB1c2goTWlsZXN0b25lKHN0YXJ0c0F0LCBzdGFydHNBdCArIDQgZGF5cywgMjUpKTsKICAgIG1pbGVzdG9uZXMucHVzaChNaWxlc3RvbmUoc3RhcnRzQXQgKyA0IGRheXMsIHN0YXJ0c0F0ICsgMSB3ZWVrcywgMjApKTsKICAgIGRlbGV0ZSBwcmVJY29Cb251c2VzOwoKICAgIHZhciBpY29Cb251c2VzID0gW3VpbnQoMTUpLCAxMCwgNV07CiAgICBmb3IgKGkgPSAxOyBpIDw9IGljb0JvbnVzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgbWlsZXN0b25lcy5wdXNoKE1pbGVzdG9uZShzdGFydHNBdCArIGkgKiAxIHdlZWtzLCBzdGFydHNBdCArIChpICsgMSkgKiAxIHdlZWtzLCBpY29Cb251c2VzW2kgLSAxXSkpOwogICAgfQogICAgZGVsZXRlIGljb0JvbnVzZXM7CiAgfQoKICBmdW5jdGlvbigpIHBheWFibGUgewogICAgYnV5KCk7CiAgfQoKICAvLy8gQGRldiBHZXQgdGhlIGN1cnJlbnQgbWlsZXN0b25lIG9yIGJhaWwgb3V0IGlmIHdlIGFyZSBub3QgaW4gdGhlIG1pbGVzdG9uZSBwZXJpb2RzLgogIC8vLyBAcmV0dXJuIE1pbGVzdG9uZSBjdXJyZW50IGJvbnVzIG1pbGVzdG9uZQogIGZ1bmN0aW9uIGdldEN1cnJlbnRNaWxlc3RvbmUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKE1pbGVzdG9uZSkgewogICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaWxlc3RvbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKG1pbGVzdG9uZXNbaV0uc3RhcnQgPD0gbm93ICYmIG1pbGVzdG9uZXNbaV0uZW5kID4gbm93KSB7CiAgICAgICAgICByZXR1cm4gbWlsZXN0b25lc1tpXTsKICAgICAgICB9CiAgICAgIH0KICB9CgogICAvLy8gQGRldiBNYWtlIGFuIGludmVzdG1lbnQuIENyb3dkc2FsZSBtdXN0IGJlIHJ1bm5pbmcgZm9yIG9uZSB0byBpbnZlc3QuCiAgIC8vLyBAcGFyYW0gcmVjZWl2ZXIgVGhlIEV0aGVyZXVtIGFkZHJlc3Mgd2hvIHJlY2VpdmVzIHRoZSB0b2tlbnMKICBmdW5jdGlvbiBpbnZlc3RJbnRlcm5hbChhZGRyZXNzIHJlY2VpdmVyKSBzdG9wSW5FbWVyZ2VuY3kgcHJpdmF0ZSB7CiAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpOwogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5GdW5kaW5nIHx8IHN0YXRlID09IFN0YXRlLlByZUZ1bmRpbmcpOwoKICAgIHVpbnQgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgdWludCB0b2tlbnNBbW91bnQgPSBjYWxjdWxhdGVUb2tlbnMod2VpQW1vdW50KTsKICAgIGFzc2VydCAodG9rZW5zQW1vdW50ID4gMCk7CgogICAgaWYoc3RhdGUgPT0gU3RhdGUuUHJlRnVuZGluZykgewogICAgICAgIHRva2Vuc0Ftb3VudCArPSBzYWZlRGl2KHNhZmVNdWwodG9rZW5zQW1vdW50LCBnZXRDdXJyZW50TWlsZXN0b25lKCkuYm9udXMpLCAxMDApOwogICAgfQoKICAgIGlmKGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID09IDApIHsKICAgICAgIC8vIEEgbmV3IGludmVzdG9yCiAgICAgICBpbnZlc3RvckNvdW50Kys7CiAgICB9CgogICAgLy8gVXBkYXRlIGludmVzdG9yCiAgICBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9IHNhZmVBZGQoaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0sIHdlaUFtb3VudCk7CiAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHNhZmVBZGQodG9rZW5BbW91bnRPZltyZWNlaXZlcl0sIHRva2Vuc0Ftb3VudCk7CiAgICAvLyBVcGRhdGUgdG90YWxzCiAgICB3ZWlSYWlzZWQgPSBzYWZlQWRkKHdlaVJhaXNlZCwgd2VpQW1vdW50KTsKICAgIHRva2Vuc1NvbGQgPSBzYWZlQWRkKHRva2Vuc1NvbGQsIHRva2Vuc0Ftb3VudCk7CgogICAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWQgbm90IGJ1c3QgdGhlIGNhcAogICAgLyoKICAgIGlmKGlzQnJlYWtpbmdDYXAod2VpQW1vdW50LCB0b2tlbnNBbW91bnQsIHdlaVJhaXNlZCwgdG9rZW5zU29sZCkpIHsKICAgICAgdGhyb3c7CiAgICB9Ki8KCiAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2Vuc0Ftb3VudCk7CiAgICB2YXIgdGVhbUJvbnVzVG9rZW5zID0gc2FmZURpdihzYWZlTXVsKHRva2Vuc0Ftb3VudCwgVEVBTV9CT05VU19QRVJDRU5UKSwgMTAwIC0gVEVBTV9CT05VU19QRVJDRU5UKTsKICAgIGFzc2lnblRva2VucyhtdWx0aXNpZ1dhbGxldCwgdGVhbUJvbnVzVG9rZW5zKTsKCiAgICBtdWx0aXNpZ1dhbGxldC50cmFuc2Zlcih3ZWlBbW91bnQpOwogICAgLy8gVGVsbCB1cyBpbnZlc3Qgd2FzIHN1Y2Nlc3MKICAgIEludmVzdGVkKHJlY2VpdmVyLCB3ZWlBbW91bnQsIHRva2Vuc0Ftb3VudCk7CiAgfQoKICAvLy8gQGRldiBBbGxvdyBhbm9ueW1vdXMgY29udHJpYnV0aW9ucyB0byB0aGlzIGNyb3dkc2FsZS4KICAvLy8gQHBhcmFtIHJlY2VpdmVyIFRoZSBFdGhlcmV1bSBhZGRyZXNzIHdobyByZWNlaXZlcyB0aGUgdG9rZW5zCiAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgcmVjZWl2ZXIpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGludmVzdEludGVybmFsKHJlY2VpdmVyKTsKICB9CgogIC8vLyBAZGV2IFRoZSBiYXNpYyBlbnRyeSBwb2ludCB0byBwYXJ0aWNpcGF0ZSB0aGUgY3Jvd2RzYWxlIHByb2Nlc3MuCiAgZnVuY3Rpb24gYnV5KCkgcHVibGljIHBheWFibGUgewogICAgaW52ZXN0KG1zZy5zZW5kZXIpOwogIH0KCiAgLy8vIEBkZXYgRmluYWxpemUgYSBzdWNjY2VzZnVsIGNyb3dkc2FsZS4KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHB1YmxpYyBpblN0YXRlKFN0YXRlLlN1Y2Nlc3MpIG9ubHlPd25lciBzdG9wSW5FbWVyZ2VuY3kgewogICAgcmVxdWlyZSghZmluYWxpemVkKTsKCiAgICBmaW5hbGl6ZWQgPSB0cnVlOwogICAgZmluYWxpemVDcm93ZHNhbGUoKTsKICB9CgogIC8vLyBAZGV2IEZpbmFsaXplIGEgc3VjY2Nlc2Z1bCBjcm93ZHNhbGUuCiAgZnVuY3Rpb24gZmluYWxpemVDcm93ZHNhbGUoKSBpbnRlcm5hbCB7CiAgICAvL2Fzc2lnblRva2Vucyhvd25lciwgc2FmZUFkZChzYWZlU3ViKHVpbnQoTUFYX1RPS0VOU19UT19TT0xEKSwgdG9rZW5zU29sZCksIFRFQU1fVE9LRU5TX0FNT1VOVCkpOwogICAgdG9rZW4ucmVsZWFzZVRva2VuVHJhbnNmZXIoKTsKICB9CgogICAvLy8gQGRldiBNZXRob2QgZm9yIHNldHRpbmcgVVNEIHRvIEV0aGVyIHJhdGUgZnJvbSBQb2xvbmlleAogICAvLy8gQHBhcmFtIHZhbHVlIFVTRCBhbW91dCBpbiBjZW50cyBmb3IgMSBFdGhlcgogICAvLy8gQHBhcmFtIHRpbWUgdGltZXN0YW1wCiAgZnVuY3Rpb24gc2V0RXhjaGFuZ2VSYXRlKHVpbnQgdmFsdWUsIHVpbnQgdGltZSkgb25seUV4Y2hhbmdlUmF0ZUFnZW50IHsKICAgIHJlcXVpcmUodmFsdWUgPiAwKTsKICAgIHJlcXVpcmUodGltZSA+IDApOwogICAgcmVxdWlyZShleGNoYW5nZVJhdGVUaW1lc3RhbXAgPT0gMCB8fCBnZXREaWZmZXJlbmNlKGludCh0aW1lKSwgaW50KG5vdykpIDw9IDEgbWludXRlcyk7CiAgICByZXF1aXJlKGV4Y2hhbmdlUmF0ZSA9PSAwIHx8IChnZXREaWZmZXJlbmNlKGludCh2YWx1ZSksIGludChleGNoYW5nZVJhdGUpKSAqIDEwMCAvIGV4Y2hhbmdlUmF0ZSA8PSAzMCkpOwoKICAgIEV4Y2hhbmdlUmF0ZUNoYW5nZWQoZXhjaGFuZ2VSYXRlLCB2YWx1ZSk7CiAgICBleGNoYW5nZVJhdGUgPSB2YWx1ZTsKICAgIGV4Y2hhbmdlUmF0ZVRpbWVzdGFtcCA9IHRpbWU7CiAgfQoKICAvLy8gQGRldiBNZXRob2Qgc2V0IGV4Y2hhbmdlIHJhdGUgYWdlbnQKICAvLy8gQHBhcmFtIG5ld0FnZW50IG5ldyBhZ2VudAogZnVuY3Rpb24gc2V0RXhjaGFuZ2VSYXRlQWdlbnQoYWRkcmVzcyBuZXdBZ2VudCkgb25seU93bmVyIHsKICAgaWYgKG5ld0FnZW50ICE9IGFkZHJlc3MoMCkpIHsKICAgICBleGNoYW5nZVJhdGVBZ2VudCA9IG5ld0FnZW50OwogICB9CiB9CgogIGZ1bmN0aW9uIGdldERpZmZlcmVuY2UoaW50IG9uZSwgaW50IHR3bykgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICB2YXIgZGlmZiA9IG9uZSAtIHR3bzsKICAgIGlmIChkaWZmIDwgMCkKICAgICAgZGlmZiA9IC1kaWZmOwogICAgcmV0dXJuIHVpbnQoZGlmZik7CiAgfQoKICAvLy8gQGRldiBBbGxvdyBjcm93ZHNhbGUgb3duZXIgdG8gY2xvc2UgZWFybHkgb3IgZXh0ZW5kIHRoZSBjcm93ZHNhbGUuCiAgLy8vIEBwYXJhbSB0aW1lIHRpbWVzdGFtcAogIGZ1bmN0aW9uIHNldEVuZHNBdCh1aW50IHRpbWUpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKHRpbWUgPj0gbm93KTsKICAgIGVuZHNBdCA9IHRpbWU7CiAgICBFbmRzQXRDaGFuZ2VkKGVuZHNBdCk7CiAgfQoKICAvLy8gQGRldiBBbGxvdyBsb2FkIHJlZnVuZHMgYmFjayBvbiB0aGUgY29udHJhY3QgZm9yIHRoZSByZWZ1bmRpbmcuCiAgZnVuY3Rpb24gbG9hZFJlZnVuZCgpIHB1YmxpYyBwYXlhYmxlIGluU3RhdGUoU3RhdGUuRmFpbHVyZSkgewogICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgIGxvYWRlZFJlZnVuZCA9IHNhZmVBZGQobG9hZGVkUmVmdW5kLCBtc2cudmFsdWUpOwogIH0KCiAgLy8vIEBkZXYgSW52ZXN0b3JzIGNhbiBjbGFpbSByZWZ1bmQuCiAgZnVuY3Rpb24gcmVmdW5kKCkgcHVibGljIGluU3RhdGUoU3RhdGUuUmVmdW5kaW5nKSB7CiAgICB1aW50MjU2IHdlaVZhbHVlID0gaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXTsKICAgIGlmICh3ZWlWYWx1ZSA9PSAwKQogICAgICByZXR1cm47CiAgICBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdID0gMDsKICAgIHdlaVJlZnVuZGVkID0gc2FmZUFkZCh3ZWlSZWZ1bmRlZCwgd2VpVmFsdWUpOwogICAgUmVmdW5kKG1zZy5zZW5kZXIsIHdlaVZhbHVlKTsKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIod2VpVmFsdWUpOwogIH0KCiAgLy8vIEBkZXYgTWluaW11bSBnb2FsIHdhcyByZWFjaGVkCiAgLy8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgY3Jvd2RzYWxlIGhhcyByYWlzZWQgZW5vdWdoIG1vbmV5IHRvIG5vdCBpbml0aWF0ZSB0aGUgcmVmdW5kaW5nCiAgZnVuY3Rpb24gaXNNaW5pbXVtR29hbFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCByZWFjaGVkKSB7CiAgICByZXR1cm4gd2VpVG9Vc2RDZW50cyh3ZWlSYWlzZWQpID49IE1JTl9JQ09fR09BTDsKICB9CgogIC8vLyBAZGV2IENoZWNrIGlmIHRoZSBJQ08gZ29hbCB3YXMgcmVhY2hlZC4KICAvLy8gQHJldHVybiB0cnVlIGlmIHRoZSBjcm93ZHNhbGUgaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gYmUgYSBzdWNjZXNzCiAgZnVuY3Rpb24gaXNDcm93ZHNhbGVGdWxsKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiB3ZWlUb1VzZENlbnRzKHdlaVJhaXNlZCkgPj0gSUNPX0dPQUw7CiAgfQoKICAvLy8gQGRldiBDcm93ZGZ1bmQgc3RhdGUgbWFjaGluZSBtYW5hZ2VtZW50LgogIC8vLyBAcmV0dXJuIFN0YXRlIGN1cnJlbnQgc3RhdGUKICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgewogICAgaWYgKGZpbmFsaXplZCkKICAgICAgcmV0dXJuIFN0YXRlLkZpbmFsaXplZDsKICAgIGlmIChhZGRyZXNzKHRva2VuKSA9PSAwIHx8IGFkZHJlc3MobXVsdGlzaWdXYWxsZXQpID09IDApCiAgICAgIHJldHVybiBTdGF0ZS5QcmVwYXJpbmc7CiAgICBpZiAocHJlSW52ZXN0U3RhcnQgPD0gbm93ICYmIG5vdyA8IHN0YXJ0c0F0ICYmICFpc01heGltdW1QcmVGdW5kaW5nR29hbFJlYWNoZWQoKSkKICAgICAgcmV0dXJuIFN0YXRlLlByZUZ1bmRpbmc7CiAgICBpZiAobm93IDw9IGVuZHNBdCAmJiAhaXNDcm93ZHNhbGVGdWxsKCkpCiAgICAgIHJldHVybiBTdGF0ZS5GdW5kaW5nOwogICAgaWYgKGlzTWluaW11bUdvYWxSZWFjaGVkKCkpCiAgICAgIHJldHVybiBTdGF0ZS5TdWNjZXNzOwogICAgaWYgKCFpc01pbmltdW1Hb2FsUmVhY2hlZCgpICYmIHdlaVJhaXNlZCA+IDAgJiYgbG9hZGVkUmVmdW5kID49IHdlaVJhaXNlZCkKICAgICAgcmV0dXJuIFN0YXRlLlJlZnVuZGluZzsKICAgIHJldHVybiBTdGF0ZS5GYWlsdXJlOwogIH0KCiAgLy8vIEBkZXYgQ2FsY3VsYXRpbmcgdG9rZW5zIGNvdW50CiAgLy8vIEBwYXJhbSB3ZWlBbW91bnQgaW52ZXN0ZWQKICAvLy8gQHJldHVybiB0b2tlbnMgYW1vdW50CiAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQgd2VpQW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHRva2VuQW1vdW50KSB7CiAgICB2YXIgbXVsdGlwbGllciA9IDEwICoqIHRva2VuLmRlY2ltYWxzKCk7CgogICAgdWludCB1c2RBbW91bnQgPSB3ZWlUb1VzZENlbnRzKHdlaUFtb3VudCk7CiAgICBhc3NlcnQgKHVzZEFtb3VudCA+PSBQUklDRSk7CgogICAgcmV0dXJuIHNhZmVNdWwodXNkQW1vdW50LCBzYWZlRGl2KG11bHRpcGxpZXIsIFBSSUNFKSk7CiAgfQoKICAgLy8vIEBkZXYgQ2hlY2sgaWYgdGhlIGN1cnJlbnQgaW52ZXN0ZWQgYnJlYWtzIG91ciBjYXAgcnVsZXMuCiAgIC8vLyBAcGFyYW0gd2VpQW1vdW50IFRoZSBhbW91bnQgb2Ygd2VpIHRoZSBpbnZlc3RvciB0cmllcyB0byBpbnZlc3QgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24KICAgLy8vIEBwYXJhbSB0b2tlbkFtb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB3ZSB0cnkgdG8gZ2l2ZSB0byB0aGUgaW52ZXN0b3IgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24KICAgLy8vIEBwYXJhbSB3ZWlSYWlzZWRUb3RhbCBXaGF0IHdvdWxkIGJlIG91ciB0b3RhbCByYWlzZWQgYmFsYW5jZSBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgIC8vLyBAcGFyYW0gdG9rZW5zU29sZFRvdGFsIFdoYXQgd291bGQgYmUgb3VyIHRvdGFsIHNvbGQgdG9rZW5zIGNvdW50IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgLy8vIEByZXR1cm4gcmVzdWx0CiAgIGZ1bmN0aW9uIGlzQnJlYWtpbmdDYXAodWludCB3ZWlBbW91bnQsIHVpbnQgdG9rZW5BbW91bnQsIHVpbnQgd2VpUmFpc2VkVG90YWwsIHVpbnQgdG9rZW5zU29sZFRvdGFsKSBjb25zdGFudCByZXR1cm5zIChib29sIGxpbWl0QnJva2VuKSB7CiAgICAgcmV0dXJuIGZhbHNlOwogICB9CgogICAvLy8gQGRldiBDaGVjayBpZiB0aGUgcHJlIElDTyBnb2FsIHdhcyByZWFjaGVkLgogICAvLy8gQHJldHVybiB0cnVlIGlmIHRoZSBwcmVJQ08gaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gYmUgYSBzdWNjZXNzCiAgIGZ1bmN0aW9uIGlzTWF4aW11bVByZUZ1bmRpbmdHb2FsUmVhY2hlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHJlYWNoZWQpIHsKICAgICByZXR1cm4gd2VpVG9Vc2RDZW50cyh3ZWlSYWlzZWQpID49IFBSRV9GVU5ESU5HX0dPQUw7CiAgIH0KCiAgIC8vLyBAZGV2IENvbnZlcnRzIHdlaSB2YWx1ZSBpbnRvIFVTRCBjZW50cyBhY2NvcmRpbmcgdG8gY3VycmVudCBleGNoYW5nZSByYXRlCiAgIC8vLyBAcGFyYW0gd2VpVmFsdWUgd2VpIHZhbHVlIHRvIGNvbnZlcnQKICAgLy8vIEByZXR1cm4gVVNEIGNlbnRzIGVxdWl2YWxlbnQgb2YgdGhlIHdlaSB2YWx1ZQogICBmdW5jdGlvbiB3ZWlUb1VzZENlbnRzKHVpbnQgd2VpVmFsdWUpIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgIHJldHVybiBzYWZlRGl2KHNhZmVNdWwod2VpVmFsdWUsIGV4Y2hhbmdlUmF0ZSksIDFlMTgpOwogICB9CgogICAvLy8gQGRldiBEeW5hbWljYWxseSBjcmVhdGUgdG9rZW5zIGFuZCBhc3NpZ24gdGhlbSB0byB0aGUgaW52ZXN0b3IuCiAgIC8vLyBAcGFyYW0gcmVjZWl2ZXIgaW52ZXN0b3IgYWRkcmVzcwogICAvLy8gQHBhcmFtIHRva2VuQW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHdlIHRyeSB0byBnaXZlIHRvIHRoZSBpbnZlc3RvciBpbiB0aGUgY3VycmVudCB0cmFuc2FjdGlvbgogICBmdW5jdGlvbiBhc3NpZ25Ub2tlbnMoYWRkcmVzcyByZWNlaXZlciwgdWludCB0b2tlbkFtb3VudCkgcHJpdmF0ZSB7CiAgICAgdG9rZW4ubWludChyZWNlaXZlciwgdG9rZW5BbW91bnQpOwogICB9Cn0='.
	

]
