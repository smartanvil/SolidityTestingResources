Class {
	#name : #SRT92683b8a2dbbc02d1c6303d5b4362a06e46f5616,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92683b8a2dbbc02d1c6303d5b4362a06e46f5616 >> base64 [
	^ ''.
	

]
