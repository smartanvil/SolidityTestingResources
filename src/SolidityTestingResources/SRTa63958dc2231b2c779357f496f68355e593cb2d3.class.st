Class {
	#name : #SRTa63958dc2231b2c779357f496f68355e593cb2d3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa63958dc2231b2c779357f496f68355e593cb2d3 >> base64 [
	^ ''.
	

]
