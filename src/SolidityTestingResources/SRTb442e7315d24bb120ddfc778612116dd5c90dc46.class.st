Class {
	#name : #SRTb442e7315d24bb120ddfc778612116dd5c90dc46,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb442e7315d24bb120ddfc778612116dd5c90dc46 >> base64 [
	^ ''.
	

]
