Class {
	#name : #SRT5162A13e4B2aDf708878C71F2CAd69525770601F,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5162A13e4B2aDf708878C71F2CAd69525770601F >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEFjdXRlIEFuZ2xlIENvaW4gYnkgVHJpYW5nbGUgVGVjaG5vbG9neSBDby4sIEx0ZC4gTGltaXRlZC4KLy8gQW4gRVJDMjAgc3RhbmRhcmQKLy8KLy8gYXV0aG9yOiBBQUMgVGVhbQoKY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfdG90YWxTdXBwbHkpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQogCmNvbnRyYWN0IEFjdXRlQW5nbGVDb2luIGlzIEVSQzIwSW50ZXJmYWNlIHsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gNTsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJBQUMiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkFjdXRlQW5nbGVDb2luIjsKCiAgICBib29sIHB1YmxpYyBfc2VsbGluZyA9IHRydWU7Ly9pbml0aWFsIHNlbGxpbmcKICAgIHVpbnQyNTYgcHVibGljIF90b3RhbFN1cHBseSA9IDEwICoqIDE0OyAvLyB0b3RhbCBzdXBwbHkgaXMgMTBeMTQgdW5pdCwgZXF1aXZhbGVudCB0byAxMF45IEFBQwogICAgdWludDI1NiBwdWJsaWMgX29yaWdpbmFsQnV5UHJpY2UgPSAzOSAqIDEwKio3OyAvLyBvcmlnaW5hbCBidXkgMUVUSCA9IDM5MDAgQUFDID0gMzkgKiAxMCoqNyB1bml0CgogICAgLy8gT3duZXIgb2YgdGhpcyBjb250cmFjdAogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAKICAgIC8vIEJhbGFuY2VzIEFBQyBmb3IgZWFjaCBBQUNvdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlczsKICAgIAogICAgLy8gT3duZXIgb2YgQUFDb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgQUFDb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHByaXZhdGUgYWxsb3dlZDsKCiAgICAvLyBMaXN0IG9mIGFwcHJvdmVkIGludmVzdG9ycwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgYXBwcm92ZWRJbnZlc3Rvckxpc3Q7CiAgICAKICAgIC8vIGRlcG9zaXQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGRlcG9zaXQ7CiAgICAgICAKCiAgICAvLyB0b3RhbFRva2VuU29sZAogICAgdWludDI1NiBwdWJsaWMgdG90YWxUb2tlblNvbGQgPSAwOwogICAgCiAgICAvLyB0cmFkYWJsZQogICAgYm9vbCBwdWJsaWMgdHJhZGFibGUgPSBmYWxzZTsKICAgIAogICAgLyoqCiAgICAgKiBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogRnVuY3Rpb25zIHdpdGggdGhpcyBtb2RpZmllciBjaGVjayBvbiBzYWxlIHN0YXR1cwogICAgICogT25seSBhbGxvdyBzYWxlIGlmIF9zZWxsaW5nIGlzIG9uCiAgICAgKi8KICAgIG1vZGlmaWVyIG9uU2FsZSgpIHsKICAgICAgICByZXF1aXJlKF9zZWxsaW5nKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEZ1bmN0aW9ucyB3aXRoIHRoaXMgbW9kaWZpZXIgY2hlY2sgdGhlIHZhbGlkaXR5IG9mIGFkZHJlc3MgaXMgaW52ZXN0b3IKICAgICAqLwogICAgbW9kaWZpZXIgdmFsaWRJbnZlc3RvcigpIHsKICAgICAgICByZXF1aXJlKGFwcHJvdmVkSW52ZXN0b3JMaXN0W21zZy5zZW5kZXJdKTsKICAgICAgICBfOwogICAgfQogICAgCgogICAgCiAgICAvKioKICAgICAqIAogICAgICovCiAgICBtb2RpZmllciBpc1RyYWRhYmxlKCl7CiAgICAgICAgcmVxdWlyZSh0cmFkYWJsZSA9PSB0cnVlIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24gYWxsb3dzIHRvIGJ1eSBldGhlci4KICAgIGZ1bmN0aW9uKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlIHsKICAgICAgICBidXlBQUMoKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgYnV5IGZ1bmN0aW9uIGFsbG93cyB0byBidXkgZXRoZXIuIGZvciB1c2luZyBvcHRpb25hbCBkYXRhCiAgICBmdW5jdGlvbiBidXlBQUMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICBvblNhbGUKICAgICAgICB2YWxpZEludmVzdG9yIHsKICAgICAgICB1aW50MjU2IHJlcXVlc3RlZFVuaXRzID0gKG1zZy52YWx1ZSAqIF9vcmlnaW5hbEJ1eVByaWNlKSAvIDEwKioxODsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW293bmVyXSA+PSByZXF1ZXN0ZWRVbml0cyk7CiAgICAgICAgLy8gcHJlcGFyZSB0cmFuc2ZlciBkYXRhCiAgICAgICAgYmFsYW5jZXNbb3duZXJdIC09IHJlcXVlc3RlZFVuaXRzOwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHJlcXVlc3RlZFVuaXRzOwogICAgICAgIAogICAgICAgIC8vIGluY3JlYXNlIHRvdGFsIGRlcG9zaXQgYW1vdW50CiAgICAgICAgZGVwb3NpdFttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7CiAgICAgICAgCiAgICAgICAgLy8gY2hlY2sgdG90YWwgYW5kIGF1dG8gdHVybk9mZlNhbGUKICAgICAgICB0b3RhbFRva2VuU29sZCArPSByZXF1ZXN0ZWRVbml0czsKICAgICAgICAKICAgICAgICAvLyBzdWJtaXQgdHJhbnNmZXIKICAgICAgICBUcmFuc2Zlcihvd25lciwgbXNnLnNlbmRlciwgcmVxdWVzdGVkVW5pdHMpOwogICAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEFBQygpIAogICAgICAgIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsKICAgICAgICBUcmFuc2ZlcigweDAsIG93bmVyLCBfdG90YWxTdXBwbHkpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBHZXRzIHRvdGFsU3VwcGx5CiAgICAvLy8gQHJldHVybiBUb3RhbCBzdXBwbHkKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkKICAgICAgICBwdWJsaWMgCiAgICAgICAgY29uc3RhbnQgCiAgICAgICAgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEVuYWJsZXMgc2FsZSAKICAgIGZ1bmN0aW9uIHR1cm5PblNhbGUoKSBvbmx5T3duZXIgCiAgICAgICAgcHVibGljIHsKICAgICAgICBfc2VsbGluZyA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgRGlzYWJsZXMgc2FsZQogICAgZnVuY3Rpb24gdHVybk9mZlNhbGUoKSBvbmx5T3duZXIgCiAgICAgICAgcHVibGljIHsKICAgICAgICBfc2VsbGluZyA9IGZhbHNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0dXJuT25UcmFkYWJsZSgpIAogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlPd25lcnsKICAgICAgICB0cmFkYWJsZSA9IHRydWU7CiAgICB9CiAgICAgICAgCiAgICAvLy8gQGRldiBHZXRzIEFBQ291bnQncyBiYWxhbmNlCiAgICAvLy8gQHBhcmFtIF9hZGRyIEFkZHJlc3Mgb2YgdGhlIEFBQ291bnQKICAgIC8vLyBAcmV0dXJuIEFBQ291bnQgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2FkZHIpIAogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50IAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX2FkZHJdOwogICAgfQogICAgCiAgICAvLy8gQGRldiBjaGVjayBhZGRyZXNzIGlzIGFwcHJvdmVkIGludmVzdG9yCiAgICAvLy8gQHBhcmFtIF9hZGRyIGFkZHJlc3MKICAgIGZ1bmN0aW9uIGlzQXBwcm92ZWRJbnZlc3RvcihhZGRyZXNzIF9hZGRyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBhcHByb3ZlZEludmVzdG9yTGlzdFtfYWRkcl07CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IGdldCBFVEggZGVwb3NpdAogICAgLy8vIEBwYXJhbSBfYWRkciBhZGRyZXNzIGdldCBkZXBvc2l0CiAgICAvLy8gQHJldHVybiBhbW91bnQgZGVwb3NpdCBvZiBhbiBidXllcgogICAgZnVuY3Rpb24gZ2V0RGVwb3NpdChhZGRyZXNzIF9hZGRyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2KXsKICAgICAgICByZXR1cm4gZGVwb3NpdFtfYWRkcl07Cn0KICAgIAogICAgLy8vIEBkZXYgQWRkcyBsaXN0IG9mIG5ldyBpbnZlc3RvcnMgdG8gdGhlIGludmVzdG9ycyBsaXN0IGFuZCBhcHByb3ZlIGFsbAogICAgLy8vIEBwYXJhbSBuZXdJbnZlc3Rvckxpc3QgQXJyYXkgb2YgbmV3IGludmVzdG9ycyBhZGRyZXNzZXMgdG8gYmUgYWRkZWQKICAgIGZ1bmN0aW9uIGFkZEludmVzdG9yTGlzdChhZGRyZXNzW10gbmV3SW52ZXN0b3JMaXN0KQogICAgICAgIG9ubHlPd25lcgogICAgICAgIHB1YmxpYyB7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbmV3SW52ZXN0b3JMaXN0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgYXBwcm92ZWRJbnZlc3Rvckxpc3RbbmV3SW52ZXN0b3JMaXN0W2ldXSA9IHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJlbW92ZXMgbGlzdCBvZiBpbnZlc3RvcnMgZnJvbSBsaXN0CiAgICAvLy8gQHBhcmFtIGludmVzdG9yTGlzdCBBcnJheSBvZiBhZGRyZXNzZXMgb2YgaW52ZXN0b3JzIHRvIGJlIHJlbW92ZWQKICAgIGZ1bmN0aW9uIHJlbW92ZUludmVzdG9yTGlzdChhZGRyZXNzW10gaW52ZXN0b3JMaXN0KQogICAgICAgIG9ubHlPd25lcgogICAgICAgIHB1YmxpYyB7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgaW52ZXN0b3JMaXN0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgYXBwcm92ZWRJbnZlc3Rvckxpc3RbaW52ZXN0b3JMaXN0W2ldXSA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KIAogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRoZSBiYWxhbmNlIGZyb20gbXNnLnNlbmRlciB0byBhbiBBQUNvdW50CiAgICAvLy8gQHBhcmFtIF90byBSZWNpcGllbnQgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRyYW5zZmVyZWQgYW1vdW50IGluIHVuaXQKICAgIC8vLyBAcmV0dXJuIFRyYW5zZmVyIHN0YXR1cwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkKICAgICAgICBwdWJsaWMgCiAgICAgICAgaXNUcmFkYWJsZQogICAgICAgIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBpZiBzZW5kZXIncyBiYWxhbmNlIGhhcyBlbm91Z2ggdW5pdCBhbmQgYW1vdW50ID49IDAsIAogICAgICAgIC8vICAgICAgYW5kIHRoZSBzdW0gaXMgbm90IG92ZXJmbG93LAogICAgICAgIC8vIHRoZW4gZG8gdHJhbnNmZXIgCiAgICAgICAgaWYgKCAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCkgJiYKICAgICAgICAgICAgIChfYW1vdW50ID49IDApICYmIAogICAgICAgICAgICAgKGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgKSB7ICAKCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgICAKICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAvLyBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAogICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgIC8vIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IHRoZSBjb21tYW5kIHNob3VsZCBmYWlsIHVubGVzcyB0aGUgX2Zyb20gQUFDb3VudCBoYXMKICAgIC8vIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCiAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCiAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICkKICAgIHB1YmxpYwogICAgaXNUcmFkYWJsZQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50CiAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQKICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50OwogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgQUFDb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgCiAgICAgICAgcHVibGljCiAgICAgICAgaXNUcmFkYWJsZQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8vIGdldCBhbGxvd2FuY2UKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQgCiAgICAgICAgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgV2l0aGRyYXdzIEV0aGVyIGluIGNvbnRyYWN0IChPd25lciBvbmx5KQogICAgLy8vIEByZXR1cm4gU3RhdHVzIG9mIHdpdGhkcmF3YWwKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIAogICAgICAgIHB1YmxpYyAKICAgICAgICByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG93bmVyLnNlbmQodGhpcy5iYWxhbmNlKTsKICAgIH0KfQ=='.
	

]
