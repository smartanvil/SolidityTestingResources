Class {
	#name : #SRT542486d7ae386860d9b659a557d614839689d053,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT542486d7ae386860d9b659a557d614839689d053 >> base64 [
	^ ''.
	

]
