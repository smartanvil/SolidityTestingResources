Class {
	#name : #SRTfd13d75f8d0c4fe4e9b20b769f006a21fc3004f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfd13d75f8d0c4fe4e9b20b769f006a21fc3004f1 >> base64 [
	^ ''.
	

]
