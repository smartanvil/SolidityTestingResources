Class {
	#name : #SRT2d51481469e34ac9fbc42c1990c1f6d0b1a9b65e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2d51481469e34ac9fbc42c1990c1f6d0b1a9b65e >> base64 [
	^ ''.
	

]
