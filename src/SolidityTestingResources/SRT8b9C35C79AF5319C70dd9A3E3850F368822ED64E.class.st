Class {
	#name : #SRT8b9C35C79AF5319C70dd9A3E3850F368822ED64E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b9C35C79AF5319C70dd9A3E3850F368822ED64E >> base64 [
	^ ''.
	

]
