Class {
	#name : #SRTd553e590e105f5bd6720d92cf9edc4c2c305f6eb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd553e590e105f5bd6720d92cf9edc4c2c305f6eb >> base64 [
	^ ''.
	

]
