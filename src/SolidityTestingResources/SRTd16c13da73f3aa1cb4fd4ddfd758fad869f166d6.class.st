Class {
	#name : #SRTd16c13da73f3aa1cb4fd4ddfd758fad869f166d6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd16c13da73f3aa1cb4fd4ddfd758fad869f166d6 >> base64 [
	^ ''.
	

]
