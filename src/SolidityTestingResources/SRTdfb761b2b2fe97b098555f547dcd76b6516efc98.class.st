Class {
	#name : #SRTdfb761b2b2fe97b098555f547dcd76b6516efc98,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfb761b2b2fe97b098555f547dcd76b6516efc98 >> base64 [
	^ ''.
	

]
