Class {
	#name : #SRT5204345a6cc213ac6c9c98e737a517321603caea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5204345a6cc213ac6c9c98e737a517321603caea >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQp9CgovLyBFUkMyMCB0b2tlbiBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgb25seSBwYXJ0aWFsbHkuCmludGVyZmFjZSB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpIHB1YmxpYzsgfQoKY29udHJhY3QgTmFtaUNyb3dkU2FsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLy8gTkFDIEJyb2tlciBQcmVzYWxlIFRva2VuCiAgICAvLy8gQGRldiBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gTmFtaUNyb3dkU2FsZShhZGRyZXNzIF9lc2Nyb3csIGFkZHJlc3MgX25hbWlNdWx0aVNpZ1dhbGxldCwgYWRkcmVzcyBfbmFtaVByZXNhbGUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfbmFtaU11bHRpU2lnV2FsbGV0ICE9IDB4MCk7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgICAgICBuYW1pTXVsdGlTaWdXYWxsZXQgPSBfbmFtaU11bHRpU2lnV2FsbGV0OwogICAgICAgIG5hbWlQcmVzYWxlID0gX25hbWlQcmVzYWxlOwogICAgICAgIC8vCiAgICAgICAgYmFsYW5jZU9mW19lc2Nyb3ddICs9IDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsgLy8gMTAwIG1pbGxpb24gTkFDCiAgICAgICAgdG90YWxTdXBwbHkgKz0gMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgfQoKCiAgICAvKi8KICAgICAqICBDb25zdGFudHMKICAgIC8qLwoKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJOYW1pIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgIHN5bWJvbCA9ICJOQUMiOwogICAgdWludCAgIHB1YmxpYyBkZWNpbWFscyA9IDE4OwoKICAgIGJvb2wgcHVibGljIFRSQU5TRkVSQUJMRSA9IGZhbHNlOyAvLyBkZWZhdWx0IG5vdCB0cmFuc2ZlcmFibGUKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTl9TVVBQTFlfTElNSVQgPSAxMDAwMDAwMDAwICogKDEgZXRoZXIgLyAxIHdlaSk7CiAgICAKICAgIHVpbnQgcHVibGljIGJpbmFyeSA9IDA7CgogICAgLyovCiAgICAgKiAgVG9rZW4gc3RhdGUKICAgIC8qLwoKICAgIGVudW0gUGhhc2UgewogICAgICAgIENyZWF0ZWQsCiAgICAgICAgUnVubmluZywKICAgICAgICBQYXVzZWQsCiAgICAgICAgTWlncmF0aW5nLAogICAgICAgIE1pZ3JhdGVkCiAgICB9CgogICAgUGhhc2UgcHVibGljIGN1cnJlbnRQaGFzZSA9IFBoYXNlLkNyZWF0ZWQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7IC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkCgogICAgLy8gZXNjcm93IGhhcyBleGNsdXNpdmUgcHJpdmVsZWdlcyB0byBjYWxsIGFkbWluaXN0cmF0aXZlCiAgICAvLyBmdW5jdGlvbnMgb24gdGhpcyBjb250cmFjdC4KICAgIGFkZHJlc3MgcHVibGljIGVzY3JvdzsKCiAgICAvLyBHYXRoZXJlZCBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIG9ubHkgdG8gbmFtaW11bHRpc2lnd2FsbGV0J3MgYWRkcmVzcy4KICAgIGFkZHJlc3MgcHVibGljIG5hbWlNdWx0aVNpZ1dhbGxldDsKCiAgICAvLyBuYW1pIHByZXNhbGUgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIG5hbWlQcmVzYWxlOwoKICAgIC8vIENyb3dkc2FsZSBtYW5hZ2VyIGhhcyBleGNsdXNpdmUgcHJpdmVsZWdlcyB0byBidXJuIHByZXNhbGUgdG9rZW5zLgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlTWFuYWdlcjsKICAgIAogICAgLy8gYmluYXJ5IG9wdGlvbiBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBiaW5hcnlBZGRyZXNzOwogICAgCiAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKCiAgICBtb2RpZmllciBvbmx5Q3Jvd2RzYWxlTWFuYWdlcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlTWFuYWdlcik7IAogICAgICAgIF87IAogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlFc2Nyb3coKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGVzY3Jvdyk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seVRyYW5mZXJhYmxlKCkgewogICAgICAgIHJlcXVpcmUoVFJBTlNGRVJBQkxFKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5TmFtaU11bHRpc2lnKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBuYW1pTXVsdGlTaWdXYWxsZXQpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qLwogICAgICogIEV2ZW50cwogICAgLyovCgogICAgZXZlbnQgTG9nQnV5KGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBMb2dCdXJuKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBMb2dQaGFzZVN3aXRjaChQaGFzZSBuZXdQaGFzZSk7CiAgICAvLyBMb2cgbWlncmF0ZSB0b2tlbgogICAgZXZlbnQgTG9nTWlncmF0ZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBhbW91bnQpOwogICAgLy8gVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKi8KICAgICAqICBQdWJsaWMgZnVuY3Rpb25zCiAgICAvKi8KCiAgICAvKioKICAgICAqIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKICAgICAgICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VPZltfdG9dKTsKICAgICAgICAvLyBTYXZlIHRoaXMgZm9yIGFuIGFzc2VydGlvbiBpbiB0aGUgZnV0dXJlCiAgICAgICAgdWludCBwcmV2aW91c0JhbGFuY2VzID0gYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dOwogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgLy8gQXNzZXJ0cyBhcmUgdXNlZCB0byB1c2Ugc3RhdGljIGFuYWx5c2lzIHRvIGZpbmQgYnVncyBpbiB5b3VyIGNvZGUuIFRoZXkgc2hvdWxkIG5ldmVyIGZhaWwKICAgICAgICBhc3NlcnQoYmFsYW5jZU9mW19mcm9tXSArIGJhbGFuY2VPZltfdG9dID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgfQoKICAgIC8vIFRyYW5zZmVyIHRoZSBiYWxhbmNlIGZyb20gb3duZXIncyBhY2NvdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgLy8gb25seSBlc2Nyb3cgY2FuIHNlbmQgdG9rZW4gKHRvIHNlbmQgdG9rZW4gcHJpdmF0ZSBzYWxlKQogICAgZnVuY3Rpb24gdHJhbnNmZXJGb3JUZWFtKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogVHJhbnNmZXIgdG9rZW5zCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCB0byBzZW5kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgb25seVRyYW5mZXJhYmxlCiAgICB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgICAgLyoqCiAgICAgKiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvdGhlciBhZGRyZXNzCiAgICAgKgogICAgICogU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgaW4gYmVoYWxmIG9mIGBfZnJvbWAKICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5VHJhbmZlcmFibGUKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MKICAgICAqCiAgICAgKiBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmCiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIG1heCBhbW91bnQgdGhleSBjYW4gc3BlbmQKICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljCiAgICAgICAgb25seVRyYW5mZXJhYmxlCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGFsbG93YW5jZSBmb3Igb3RoZXIgYWRkcmVzcyBhbmQgbm90aWZ5CiAgICAgKgogICAgICogQWxsb3dzIGBfc3BlbmRlcmAgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIGBfdmFsdWVgIHRva2VucyBpbiB5b3VyIGJlaGFsZiwgYW5kIHRoZW4gcGluZyB0aGUgY29udHJhY3QgYWJvdXQgaXQKICAgICAqCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3MgYXV0aG9yaXplZCB0byBzcGVuZAogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgbWF4IGFtb3VudCB0aGV5IGNhbiBzcGVuZAogICAgICogQHBhcmFtIF9leHRyYURhdGEgc29tZSBleHRyYSBpbmZvcm1hdGlvbiB0byBzZW5kIHRvIHRoZSBhcHByb3ZlZCBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5VHJhbmZlcmFibGUKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIAogICAgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8vIGFsbG93cyB0cmFuc2ZlciB0b2tlbgogICAgZnVuY3Rpb24gY2hhbmdlVHJhbnNmZXJhYmxlICgpIHB1YmxpYwogICAgICAgIG9ubHlFc2Nyb3cKICAgIHsKICAgICAgICBUUkFOU0ZFUkFCTEUgPSAhVFJBTlNGRVJBQkxFOwogICAgfQogICAgCiAgICAvLyBjaGFuZ2UgZXNjcm93CiAgICBmdW5jdGlvbiBjaGFuZ2VFc2Nyb3coYWRkcmVzcyBfZXNjcm93KSBwdWJsaWMKICAgICAgICBvbmx5TmFtaU11bHRpc2lnCiAgICB7CiAgICAgICAgcmVxdWlyZShfZXNjcm93ICE9IDB4MCk7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgIH0KICAgIAogICAgLy8gY2hhbmdlIGJpbmFyeSB2YWx1ZQogICAgZnVuY3Rpb24gY2hhbmdlQmluYXJ5KHVpbnQgX2JpbmFyeSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5RXNjcm93CiAgICB7CiAgICAgICAgYmluYXJ5ID0gX2JpbmFyeTsKICAgIH0KICAgIAogICAgLy8gY2hhbmdlIGJpbmFyeSBhZGRyZXNzCiAgICBmdW5jdGlvbiBjaGFuZ2VCaW5hcnlBZGRyZXNzKGFkZHJlc3MgX2JpbmFyeUFkZHJlc3MpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUoX2JpbmFyeUFkZHJlc3MgIT0gMHgwKTsKICAgICAgICBiaW5hcnlBZGRyZXNzID0gX2JpbmFyeUFkZHJlc3M7CiAgICB9CiAgICAKICAgIC8qCiAgICAqIHByaWNlIGluIElDTzoKICAgICogZmlyc3Qgd2VlazogMSBFVEggPSAyNDAwIE5BQwogICAgKiBzZWNvbmQgd2VlazogMSBFVEggPSAyMzAwMCBOQUMKICAgICogM3JkIHdlZWs6IDEgRVRIID0gMjIwMCBOQUMKICAgICogNHRoIHdlZWs6IDEgRVRIID0gMjEwMCBOQUMKICAgICogNXRoIHdlZWs6IDEgRVRIID0gMjAwMCBOQUMKICAgICogNnRoIHdlZWs6IDEgRVRIID0gMTkwMCBOQUMKICAgICogN3RoIHdlZWs6IDEgRVRIID0gMTgwMCBOQUMKICAgICogOHRoIHdlZWs6IDEgRVRIID0gMTcwMCBuYWMKICAgICogdGltZTogCiAgICAqIDE1MTc0NDMyMDA6IFRodXJzZGF5LCBGZWJydWFyeSAxLCAyMDE4IDEyOjAwOjAwIEFNCiAgICAqIDE1MTgwNDgwMDA6IFRodXJzZGF5LCBGZWJydWFyeSA4LCAyMDE4IDEyOjAwOjAwIEFNCiAgICAqIDE1MTg2NTI4MDA6IFRodXJzZGF5LCBGZWJydWFyeSAxNSwgMjAxOCAxMjowMDowMCBBTQogICAgKiAxNTE5MjU3NjAwOiBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMTggMTI6MDA6MDAgQU0KICAgICogMTUxOTg2MjQwMDogVGh1cnNkYXksIE1hcmNoIDEsIDIwMTggMTI6MDA6MDAgQU0KICAgICogMTUyMDQ2NzIwMDogVGh1cnNkYXksIE1hcmNoIDgsIDIwMTggMTI6MDA6MDAgQU0KICAgICogMTUyMTA3MjAwMDogVGh1cnNkYXksIE1hcmNoIDE1LCAyMDE4IDEyOjAwOjAwIEFNCiAgICAqIDE1MjE2NzY4MDA6IFRodXJzZGF5LCBNYXJjaCAyMiwgMjAxOCAxMjowMDowMCBBTQogICAgKiAxNTIyMjgxNjAwOiBUaHVyc2RheSwgTWFyY2ggMjksIDIwMTggMTI6MDA6MDAgQU0KICAgICovCiAgICBmdW5jdGlvbiBnZXRQcmljZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcHJpY2UpIHsKICAgICAgICBpZiAobm93IDwgMTUxNzQ0MzIwMCkgewogICAgICAgICAgICAvLyBwcmVzYWxlCiAgICAgICAgICAgIHJldHVybiAzNDUwOwogICAgICAgIH0gZWxzZSBpZiAoMTUxNzQ0MzIwMCA8IG5vdyAmJiBub3cgPD0gMTUxODA0ODAwMCkgewogICAgICAgICAgICAvLyAxc3Qgd2VlawogICAgICAgICAgICByZXR1cm4gMjQwMDsKICAgICAgICB9IGVsc2UgaWYgKDE1MTgwNDgwMDAgPCBub3cgJiYgbm93IDw9IDE1MTg2NTI4MDApIHsKICAgICAgICAgICAgLy8gMm5kIHdlZWsKICAgICAgICAgICAgcmV0dXJuIDIzMDA7CiAgICAgICAgfSBlbHNlIGlmICgxNTE4NjUyODAwIDwgbm93ICYmIG5vdyA8PSAxNTE5MjU3NjAwKSB7CiAgICAgICAgICAgIC8vIDNyZCB3ZWVrCiAgICAgICAgICAgIHJldHVybiAyMjAwOwogICAgICAgIH0gZWxzZSBpZiAoMTUxOTI1NzYwMCA8IG5vdyAmJiBub3cgPD0gMTUxOTg2MjQwMCkgewogICAgICAgICAgICAvLyA0dGggd2VlawogICAgICAgICAgICByZXR1cm4gMjEwMDsKICAgICAgICB9IGVsc2UgaWYgKDE1MTk4NjI0MDAgPCBub3cgJiYgbm93IDw9IDE1MjA0NjcyMDApIHsKICAgICAgICAgICAgLy8gNXRoIHdlZWsKICAgICAgICAgICAgcmV0dXJuIDIwMDA7CiAgICAgICAgfSBlbHNlIGlmICgxNTIwNDY3MjAwIDwgbm93ICYmIG5vdyA8PSAxNTIxMDcyMDAwKSB7CiAgICAgICAgICAgIC8vIDZ0aCB3ZWVrCiAgICAgICAgICAgIHJldHVybiAxOTAwOwogICAgICAgIH0gZWxzZSBpZiAoMTUyMTA3MjAwMCA8IG5vdyAmJiBub3cgPD0gMTUyMTY3NjgwMCkgewogICAgICAgICAgICAvLyA3dGggd2VlawogICAgICAgICAgICByZXR1cm4gMTgwMDsKICAgICAgICB9IGVsc2UgaWYgKDE1MjE2NzY4MDAgPCBub3cgJiYgbm93IDw9IDE1MjIyODE2MDApIHsKICAgICAgICAgICAgLy8gOHRoIHdlZWsKICAgICAgICAgICAgcmV0dXJuIDE3MDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGJpbmFyeTsKICAgICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIGJ1eShtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBidXkoYWRkcmVzcyBfYnV5ZXIpIHBheWFibGUgcHVibGljIHsKICAgICAgICAvLyBBdmFpbGFibGUgb25seSBpZiBwcmVzYWxlIGlzIHJ1bm5pbmcuCiAgICAgICAgcmVxdWlyZShjdXJyZW50UGhhc2UgPT0gUGhhc2UuUnVubmluZyk7CiAgICAgICAgLy8gcmVxdWlyZSBJQ08gdGltZSBvciBiaW5hcnkgb3B0aW9uCiAgICAgICAgcmVxdWlyZShub3cgPD0gMTUxOTg2MjQwMCB8fCBtc2cuc2VuZGVyID09IGJpbmFyeUFkZHJlc3MpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlICE9IDApOwogICAgICAgIHVpbnQgbmV3VG9rZW5zID0gbXNnLnZhbHVlICogZ2V0UHJpY2UoKTsKICAgICAgICByZXF1aXJlICh0b3RhbFN1cHBseSArIG5ld1Rva2VucyA8IFRPS0VOX1NVUFBMWV9MSU1JVCk7CiAgICAgICAgLy8gYWRkIG5ldyB0b2tlbiB0byBidXllcgogICAgICAgIGJhbGFuY2VPZltfYnV5ZXJdID0gYmFsYW5jZU9mW19idXllcl0uYWRkKG5ld1Rva2Vucyk7CiAgICAgICAgLy8gYWRkIG5ldyB0b2tlbiB0byB0b3RhbFN1cHBseQogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKG5ld1Rva2Vucyk7CiAgICAgICAgTG9nQnV5KF9idXllciwgbmV3VG9rZW5zKTsKICAgIH0KICAgIAoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYwogICAgICAgIG9ubHlDcm93ZHNhbGVNYW5hZ2VyCiAgICB7CiAgICAgICAgLy8gQXZhaWxhYmxlIG9ubHkgZHVyaW5nIG1pZ3JhdGlvbiBwaGFzZQogICAgICAgIHJlcXVpcmUoY3VycmVudFBoYXNlID09IFBoYXNlLk1pZ3JhdGluZyk7CgogICAgICAgIHVpbnQgdG9rZW5zID0gYmFsYW5jZU9mW19vd25lcl07CiAgICAgICAgcmVxdWlyZSh0b2tlbnMgIT0gMCk7CiAgICAgICAgYmFsYW5jZU9mW19vd25lcl0gPSAwOwogICAgICAgIHRvdGFsU3VwcGx5IC09IHRva2VuczsKICAgICAgICBMb2dCdXJuKF9vd25lciwgdG9rZW5zKTsKCiAgICAgICAgLy8gQXV0b21hdGljYWxseSBzd2l0Y2ggcGhhc2Ugd2hlbiBtaWdyYXRpb24gaXMgZG9uZS4KICAgICAgICBpZiAodG90YWxTdXBwbHkgPT0gMCkgewogICAgICAgICAgICBjdXJyZW50UGhhc2UgPSBQaGFzZS5NaWdyYXRlZDsKICAgICAgICAgICAgTG9nUGhhc2VTd2l0Y2goUGhhc2UuTWlncmF0ZWQpOwogICAgICAgIH0KICAgIH0KCgogICAgLyovCiAgICAgKiAgQWRtaW5pc3RyYXRpdmUgZnVuY3Rpb25zCiAgICAvKi8KICAgIGZ1bmN0aW9uIHNldFByZXNhbGVQaGFzZShQaGFzZSBfbmV4dFBoYXNlKSBwdWJsaWMKICAgICAgICBvbmx5RXNjcm93CiAgICB7CiAgICAgICAgYm9vbCBjYW5Td2l0Y2hQaGFzZQogICAgICAgICAgICA9ICAoY3VycmVudFBoYXNlID09IFBoYXNlLkNyZWF0ZWQgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5SdW5uaW5nKQogICAgICAgICAgICB8fCAoY3VycmVudFBoYXNlID09IFBoYXNlLlJ1bm5pbmcgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5QYXVzZWQpCiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0aW9uIHBoYXNlIG9ubHkgaWYgY3Jvd2RzYWxlIG1hbmFnZXIgaXMgc2V0CiAgICAgICAgICAgIHx8ICgoY3VycmVudFBoYXNlID09IFBoYXNlLlJ1bm5pbmcgfHwgY3VycmVudFBoYXNlID09IFBoYXNlLlBhdXNlZCkKICAgICAgICAgICAgICAgICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuTWlncmF0aW5nCiAgICAgICAgICAgICAgICAmJiBjcm93ZHNhbGVNYW5hZ2VyICE9IDB4MCkKICAgICAgICAgICAgfHwgKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5QYXVzZWQgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5SdW5uaW5nKQogICAgICAgICAgICAgICAgLy8gc3dpdGNoIHRvIG1pZ3JhdGVkIG9ubHkgaWYgZXZlcnl0aW5nIGlzIG1pZ3JhdGVkCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuTWlncmF0aW5nICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuTWlncmF0ZWQKICAgICAgICAgICAgICAgICYmIHRvdGFsU3VwcGx5ID09IDApOwoKICAgICAgICByZXF1aXJlKGNhblN3aXRjaFBoYXNlKTsKICAgICAgICBjdXJyZW50UGhhc2UgPSBfbmV4dFBoYXNlOwogICAgICAgIExvZ1BoYXNlU3dpdGNoKF9uZXh0UGhhc2UpOwogICAgfQoKCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyKHVpbnQgX2Ftb3VudCkgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUobmFtaU11bHRpU2lnV2FsbGV0ICE9IDB4MCk7CiAgICAgICAgLy8gQXZhaWxhYmxlIGF0IGFueSBwaGFzZS4KICAgICAgICBpZiAodGhpcy5iYWxhbmNlID4gMCkgewogICAgICAgICAgICBuYW1pTXVsdGlTaWdXYWxsZXQudHJhbnNmZXIoX2Ftb3VudCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBzYWZlV2l0aGRyYXcoYWRkcmVzcyBfd2l0aGRyYXcsIHVpbnQgX2Ftb3VudCkgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIE5hbWlNdWx0aVNpZ1dhbGxldCBuYW1pV2FsbGV0ID0gTmFtaU11bHRpU2lnV2FsbGV0KG5hbWlNdWx0aVNpZ1dhbGxldCk7CiAgICAgICAgaWYgKG5hbWlXYWxsZXQuaXNPd25lcihfd2l0aGRyYXcpKSB7CiAgICAgICAgICAgIF93aXRoZHJhdy50cmFuc2ZlcihfYW1vdW50KTsKICAgICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIHNldENyb3dkc2FsZU1hbmFnZXIoYWRkcmVzcyBfbWdyKSBwdWJsaWMKICAgICAgICBvbmx5RXNjcm93CiAgICB7CiAgICAgICAgLy8gWW91IGNhbid0IGNoYW5nZSBjcm93ZHNhbGUgY29udHJhY3Qgd2hlbiBtaWdyYXRpb24gaXMgaW4gcHJvZ3Jlc3MuCiAgICAgICAgcmVxdWlyZShjdXJyZW50UGhhc2UgIT0gUGhhc2UuTWlncmF0aW5nKTsKICAgICAgICBjcm93ZHNhbGVNYW5hZ2VyID0gX21ncjsKICAgIH0KCiAgICAvLyBpbnRlcm5hbCBtaWdyYXRlIG1pZ3JhdGlvbiB0b2tlbnMKICAgIGZ1bmN0aW9uIF9taWdyYXRlVG9rZW4oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8pCiAgICAgICAgaW50ZXJuYWwKICAgIHsKICAgICAgICBQcmVzYWxlVG9rZW4gcHJlc2FsZSA9IFByZXNhbGVUb2tlbihuYW1pUHJlc2FsZSk7CiAgICAgICAgdWludDI1NiBuZXdUb2tlbiA9IHByZXNhbGUuYmFsYW5jZU9mKF9mcm9tKTsKICAgICAgICByZXF1aXJlKG5ld1Rva2VuID4gMCk7CiAgICAgICAgLy8gYnVybiBvbGQgdG9rZW4KICAgICAgICBwcmVzYWxlLmJ1cm5Ub2tlbnMoX2Zyb20pOwogICAgICAgIC8vIGFkZCBuZXcgdG9rZW4gdG8gX3RvCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQobmV3VG9rZW4pOwogICAgICAgIC8vIGFkZCBuZXcgdG9rZW4gdG8gdG90YWxTdXBwbHkKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChuZXdUb2tlbik7CiAgICAgICAgTG9nTWlncmF0ZShfZnJvbSwgX3RvLCBuZXdUb2tlbik7CiAgICB9CgogICAgLy8gbWlnYXRlIHRva2VuIGZ1bmN0aW9uIGZvciBOYW1pIFRlYW0KICAgIGZ1bmN0aW9uIG1pZ3JhdGVUb2tlbihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bykgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIF9taWdyYXRlVG9rZW4oX2Zyb20sIF90byk7CiAgICB9CgogICAgLy8gbWlncmF0ZSB0b2tlbiBmb3IgaW52ZXN0b3IKICAgIGZ1bmN0aW9uIG1pZ3JhdGVGb3JJbnZlc3RvcigpIHB1YmxpYyB7CiAgICAgICAgX21pZ3JhdGVUb2tlbihtc2cuc2VuZGVyLCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLyBOYW1pIGludGVybmFsIGV4Y2hhbmdlCiAgICAKICAgIC8vIGV2ZW50IGZvciBOYW1pIGV4Y2hhbmdlCiAgICBldmVudCBUcmFuc2ZlclRvQnV5ZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBpbmRleGVkIF9zZWxsZXIpOwogICAgZXZlbnQgVHJhbnNmZXJUb0V4Y2hhbmdlKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUsIHVpbnQgX3ByaWNlKTsKICAgIAogICAgCiAgICAgICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVyIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgKiAgICAgIEludm9rZXMgdGhlIGB0b2tlbkZhbGxiYWNrYCBmdW5jdGlvbiBpZiB0aGUgcmVjaXBpZW50IGlzIGEgY29udHJhY3QuCiAgICAgKiAgICAgIFRoZSB0b2tlbiB0cmFuc2ZlciBmYWlscyBpZiB0aGUgcmVjaXBpZW50IGlzIGEgY29udHJhY3QKICAgICAqICAgICAgYnV0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgYHRva2VuRmFsbGJhY2tgIGZ1bmN0aW9uCiAgICAgKiAgICAgIG9yIHRoZSBmYWxsYmFjayBmdW5jdGlvbiB0byByZWNlaXZlIGZ1bmRzLgogICAgICoKICAgICAqIEBwYXJhbSBfdG8gICAgUmVjZWl2ZXIgYWRkcmVzcy4KICAgICAqIEBwYXJhbSBfdmFsdWUgQW1vdW50IG9mIHRva2VucyB0aGF0IHdpbGwgYmUgdHJhbnNmZXJyZWQuCiAgICAgKiBAcGFyYW0gX3ByaWNlIHByaWNlIHRvIHNlbGwgdG9rZW4uCiAgICAgKi8KICAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9FeGNoYW5nZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHVpbnQgX3ByaWNlKSBwdWJsaWMgewogICAgICAgIHVpbnQgY29kZUxlbmd0aDsKICAgICAgICAKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUoX3RvKQogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBpZiAoY29kZUxlbmd0aCA+IDApIHsKICAgICAgICAgICAgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgcmVjZWl2ZXIgPSBFUkMyMjNSZWNlaXZpbmdDb250cmFjdChfdG8pOwogICAgICAgICAgICByZWNlaXZlci50b2tlbkZhbGxiYWNrRXhjaGFuZ2UobXNnLnNlbmRlciwgX3ZhbHVlLCBfcHJpY2UpOwogICAgICAgICAgICBUcmFuc2ZlclRvRXhjaGFuZ2UobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUsIF9wcmljZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIHRvIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICAqICAgICAgSW52b2tlcyB0aGUgYHRva2VuRmFsbGJhY2tgIGZ1bmN0aW9uIGlmIHRoZSByZWNpcGllbnQgaXMgYSBjb250cmFjdC4KICAgICAqICAgICAgVGhlIHRva2VuIHRyYW5zZmVyIGZhaWxzIGlmIHRoZSByZWNpcGllbnQgaXMgYSBjb250cmFjdAogICAgICogICAgICBidXQgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBgdG9rZW5GYWxsYmFja2AgZnVuY3Rpb24KICAgICAqICAgICAgb3IgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlY2VpdmUgZnVuZHMuCiAgICAgKgogICAgICogQHBhcmFtIF90byAgICBSZWNlaXZlciBhZGRyZXNzLgogICAgICogQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zIHRoYXQgd2lsbCBiZSB0cmFuc2ZlcnJlZC4KICAgICAqIEBwYXJhbSBfYnV5ZXIgYWRkcmVzcyBvZiBzZWxsZXIuCiAgICAgKi8KICAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9CdXllcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGFkZHJlc3MgX2J1eWVyKSBwdWJsaWMgewogICAgICAgIHVpbnQgY29kZUxlbmd0aDsKICAgICAgICAKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUoX3RvKQogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBpZiAoY29kZUxlbmd0aCA+IDApIHsKICAgICAgICAgICAgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgcmVjZWl2ZXIgPSBFUkMyMjNSZWNlaXZpbmdDb250cmFjdChfdG8pOwogICAgICAgICAgICByZWNlaXZlci50b2tlbkZhbGxiYWNrQnV5ZXIobXNnLnNlbmRlciwgX3ZhbHVlLCBfYnV5ZXIpOwogICAgICAgICAgICBUcmFuc2ZlclRvQnV5ZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUsIF9idXllcik7CiAgICAgICAgfQogICAgfQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfQoKCi8qCiogQmluYXJ5IG9wdGlvbiBzbWFydCBjb250cmFjdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKi8KY29udHJhY3QgQmluYXJ5T3B0aW9uIHsKICAgIC8qCiAgICAgKiBiaW5hcnkgb3B0aW9uIGNvbnRyb2xlZCBieSBlc2Nyb3cgdG8gYnV5IE5BQyB3aXRoIGdvb2QgcHJpY2UKICAgICAqLwogICAgLy8gTmFtaUNyb3dkU2FsZSBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBuYW1pQ3Jvd2RTYWxlQWRkcjsKICAgIGFkZHJlc3MgcHVibGljIGVzY3JvdzsKICAgIAogICAgLy8gbmFtaU11bHRpU2lnV2FsbGV0CiAgICBhZGRyZXNzIHB1YmxpYyBuYW1pTXVsdGlTaWdXYWxsZXQ7CiAgICAKICAgIFNlc3Npb24gcHVibGljIHNlc3Npb247CiAgICB1aW50IHB1YmxpYyB0aW1lSW52ZXN0SW5NaW51dGUgPSAzMDsKICAgIHVpbnQgcHVibGljIHRpbWVPbmVTZXNzaW9uID0gMTgwOwogICAgdWludCBwdWJsaWMgc2Vzc2lvbklkID0gMTsKICAgIHVpbnQgcHVibGljIHJhdGUgPSAxNTA7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNQVhfSU5WRVNUT1IgPSAyMDsKICAgIC8qKgogICAgICogRXZlbnRzIGZvciBiaW5hbnkgb3B0aW9uIHN5c3RlbQogICAgICovCiAgICBldmVudCBTZXNzaW9uT3Blbih1aW50IHRpbWVPcGVuLCB1aW50IGluZGV4ZWQgc2Vzc2lvbklkKTsKICAgIGV2ZW50IEludmVzdENsb3NlKHVpbnQgdGltZUludmVzdENsb3NlLCB1aW50IHByaWNlT3BlbiwgdWludCBpbmRleGVkIHNlc3Npb25JZCk7CiAgICBldmVudCBJbnZlc3QoYWRkcmVzcyBpbmRleGVkIGludmVzdG9yLCBib29sIGNob29zZSwgdWludCBhbW91bnQsIHVpbnQgdGltZUludmVzdCwgdWludCBpbmRleGVkIHNlc3Npb25JZCk7CiAgICBldmVudCBTZXNzaW9uQ2xvc2UodWludCB0aW1lQ2xvc2UsIHVpbnQgaW5kZXhlZCBzZXNzaW9uSWQsIHVpbnQgcHJpY2VDbG9zZSwgdWludCBuYWNQcmljZSwgdWludCByYXRlKTsKCiAgICBldmVudCBEZXBvc2l0KGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgdmFsdWUpOwogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24gYWxsb3dzIHRvIGRlcG9zaXQgZXRoZXIuCiAgICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQogICAgLy8gdGhlcmUgaXMgb25seSBvbmUgc2Vzc2lvbiBhdmFpbGFibGUgYXQgb25lIHRpbWVPcGVuCiAgICAvLyBwcmljZU9wZW4gaXMgcHJpY2Ugb2YgRVRIIGluIFVTRAogICAgLy8gcHJpY2VDbG9zZSBpcyBwcmljZSBvZiBFVEggaW4gVVNECiAgICAvLyBwcm9jZXNzIG9mIG9uZSBTZXNzaW9uCiAgICAvLyAxc3Q6IGVzY3JvdyByZXNldCBzZXNzaW9uIGJ5IHJ1biByZXNldFNlc3Npb24oKQogICAgLy8gMm5kOiBlc2Nyb3cgb3BlbiBzZXNzaW9uIGJ5IHJ1biBvcGVuU2Vzc2lvbigpID0+IHNhdmUgdGltZU9wZW4gYXQgdGhpcyB0aW1lCiAgICAvLyAzcmQ6IGFsbCBpbnZlc3RvciBjYW4gaW52ZXN0IGJ5IHJ1biBpbnZlc3QoKSwgc2VuZCBtaW5pbXVtIDAuMSBFVEgKICAgIC8vIDR0aDogZXNjcm93IGNsb3NlIGludmVzdCBhbmQgaW5zZXJ0IHByaWNlIG9wZW4gZm9yIHRoaXMgU2Vzc2lvbgogICAgLy8gNXRoOiBlc2Nyb3cgY2xvc2Ugc2Vzc2lvbiBhbmQgc2VuZCBOQUMgZm9yIGludmVzdG9yCiAgICBzdHJ1Y3QgU2Vzc2lvbiB7CiAgICAgICAgdWludCBwcmljZU9wZW47CiAgICAgICAgdWludCBwcmljZUNsb3NlOwogICAgICAgIHVpbnQgdGltZU9wZW47CiAgICAgICAgYm9vbCBpc1Jlc2V0OwogICAgICAgIGJvb2wgaXNPcGVuOwogICAgICAgIGJvb2wgaW52ZXN0T3BlbjsKICAgICAgICB1aW50IGludmVzdG9yQ291bnQ7CiAgICAgICAgbWFwcGluZyh1aW50ID0+IGFkZHJlc3MpIGludmVzdG9yOwogICAgICAgIG1hcHBpbmcodWludCA9PiBib29sKSB3aW47CiAgICAgICAgbWFwcGluZyh1aW50ID0+IHVpbnQpIGFtb3VudEludmVzdDsKICAgICAgICBtYXBwaW5nKGFkZHJlc3M9PiB1aW50KSBpbnZlc3RlZFNlc3Npb247CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEJpbmFyeU9wdGlvbihhZGRyZXNzIF9uYW1pQ3Jvd2RTYWxlLCBhZGRyZXNzIF9lc2Nyb3csIGFkZHJlc3MgX25hbWlNdWx0aVNpZ1dhbGxldCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9uYW1pQ3Jvd2RTYWxlICE9IDB4MCAmJiBfZXNjcm93ICE9IDB4MCk7CiAgICAgICAgbmFtaUNyb3dkU2FsZUFkZHIgPSBfbmFtaUNyb3dkU2FsZTsKICAgICAgICBlc2Nyb3cgPSBfZXNjcm93OwogICAgICAgIG5hbWlNdWx0aVNpZ1dhbGxldCA9IF9uYW1pTXVsdGlTaWdXYWxsZXQ7CiAgICB9CiAgICAKICAgIAogICAgbW9kaWZpZXIgb25seUVzY3JvdygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PWVzY3Jvdyk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgICAgIAogICAgbW9kaWZpZXIgb25seU5hbWlNdWx0aXNpZygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmFtaU11bHRpU2lnV2FsbGV0KTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvLyBjaGFuZ2UgZXNjcm93CiAgICBmdW5jdGlvbiBjaGFuZ2VFc2Nyb3coYWRkcmVzcyBfZXNjcm93KSBwdWJsaWMKICAgICAgICBvbmx5TmFtaU11bHRpc2lnCiAgICB7CiAgICAgICAgcmVxdWlyZShfZXNjcm93ICE9IDB4MCk7CiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQ2hhbmdlIHRpbWUgZm9yIGludmVzdG9yIGNhbiBpbnZlc3QgaW4gb25lIHNlc3Npb24sIGNhbiBvbmx5IGNoYW5nZSBhdCB0aW1lIG5vdCBpbiBzZXNzaW9uCiAgICAvLy8gQHBhcmFtIF90aW1lSW52ZXN0IHRpbWUgaW52ZXN0IGluIG1pbnV0ZXMKICAgIGZ1bmN0aW9uIGNoYW5nZVRpbWVJbnZlc3QodWludCBfdGltZUludmVzdCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5RXNjcm93CiAgICB7CiAgICAgICAgcmVxdWlyZSghc2Vzc2lvbi5pc09wZW4gJiYgX3RpbWVJbnZlc3QgPCB0aW1lT25lU2Vzc2lvbik7CiAgICAgICAgdGltZUludmVzdEluTWludXRlID0gX3RpbWVJbnZlc3Q7CiAgICB9CiAgICAKICAgIC8vIDEwMCA8IF9yYXRlIDwgMjAwCiAgICAvLyBwcmljZSBvZiBOQUMgZm9yIGludmVzdG9yIHdpbiA9IF9yYXRlLzEwMAogICAgLy8gcHJpY2Ugb2YgTkFDIGZvciBpbnZlc3RvciBsb3NzID0gMiAtIF9yYXRlLzEwMAogICAgZnVuY3Rpb24gY2hhbmdlUmF0ZSh1aW50IF9yYXRlKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlFc2Nyb3cKICAgIHsKICAgICAgICByZXF1aXJlKDEwMCA8IF9yYXRlICYmIF9yYXRlIDwgMjAwICYmICFzZXNzaW9uLmlzT3Blbik7CiAgICAgICAgcmF0ZSA9IF9yYXRlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VUaW1lT25lU2Vzc2lvbih1aW50IF90aW1lT25lU2Vzc2lvbikgCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUoIXNlc3Npb24uaXNPcGVuICYmIF90aW1lT25lU2Vzc2lvbiA+IHRpbWVJbnZlc3RJbk1pbnV0ZSk7CiAgICAgICAgdGltZU9uZVNlc3Npb24gPSBfdGltZU9uZVNlc3Npb247CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IHdpdGhkcmF3IGV0aGVyIHRvIG5hbWkgbXVsdGlzaWduYXR1cmUgd2FsbGV0LCBvbmx5IGVzY3JvdyBjYW4gY2FsbAogICAgLy8vIEBwYXJhbSBfYW1vdW50IHZhbHVlIGV0aGVyIGluIHdlaSB0byB3aXRoZHJhdwogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcih1aW50IF9hbW91bnQpIHB1YmxpYwogICAgICAgIG9ubHlFc2Nyb3cKICAgIHsKICAgICAgICByZXF1aXJlKG5hbWlNdWx0aVNpZ1dhbGxldCAhPSAweDApOwogICAgICAgIC8vIEF2YWlsYWJsZSBhdCBhbnkgcGhhc2UuCiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsKICAgICAgICAgICAgbmFtaU11bHRpU2lnV2FsbGV0LnRyYW5zZmVyKF9hbW91bnQpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8vIEBkZXYgc2FmZSB3aXRoZHJhdyBFdGhlciB0byBvbmUgb2Ygb3duZXIgb2YgbmFtaSBtdWx0aXNpZ25hdHVyZSB3YWxsZXQKICAgIC8vLyBAcGFyYW0gX3dpdGhkcmF3IGFkZHJlc3MgdG8gd2l0aGRyYXcKICAgIGZ1bmN0aW9uIHNhZmVXaXRoZHJhdyhhZGRyZXNzIF93aXRoZHJhdywgdWludCBfYW1vdW50KSBwdWJsaWMKICAgICAgICBvbmx5RXNjcm93CiAgICB7CiAgICAgICAgTmFtaU11bHRpU2lnV2FsbGV0IG5hbWlXYWxsZXQgPSBOYW1pTXVsdGlTaWdXYWxsZXQobmFtaU11bHRpU2lnV2FsbGV0KTsKICAgICAgICBpZiAobmFtaVdhbGxldC5pc093bmVyKF93aXRoZHJhdykpIHsKICAgICAgICAgICAgX3dpdGhkcmF3LnRyYW5zZmVyKF9hbW91bnQpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2Ygb3duZXJzLgogICAgLy8gQHJldHVybiBMaXN0IG9mIG93bmVyIGFkZHJlc3Nlcy4KICAgIC8vIE1BWF9JTlZFU1RPUiA9IDIwCiAgICBmdW5jdGlvbiBnZXRJbnZlc3RvcnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChhZGRyZXNzWzIwXSkKICAgIHsKICAgICAgICBhZGRyZXNzWzIwXSBtZW1vcnkgbGlzdEludmVzdG9yOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IE1BWF9JTlZFU1RPUjsgaSsrKSB7CiAgICAgICAgICAgIGxpc3RJbnZlc3RvcltpXSA9IHNlc3Npb24uaW52ZXN0b3JbaV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBsaXN0SW52ZXN0b3I7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldENob29zZXMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sWzIwXSkKICAgIHsKICAgICAgICBib29sWzIwXSBtZW1vcnkgbGlzdENob29zZXM7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgTUFYX0lOVkVTVE9SOyBpKyspIHsKICAgICAgICAgICAgbGlzdENob29zZXNbaV0gPSBzZXNzaW9uLndpbltpXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxpc3RDaG9vc2VzOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRBbW91bnQoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50WzIwXSkKICAgIHsKICAgICAgICB1aW50WzIwXSBtZW1vcnkgbGlzdEFtb3VudDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBNQVhfSU5WRVNUT1I7IGkrKykgewogICAgICAgICAgICBsaXN0QW1vdW50W2ldID0gc2Vzc2lvbi5hbW91bnRJbnZlc3RbaV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBsaXN0QW1vdW50OwogICAgfQogICAgCiAgICAvLy8gQGRldiByZXNldCBhbGwgZGF0YSBvZiBwcmV2aW91cyBzZXNzaW9uLCBtdXN0IHJ1biBiZWZvcmUgb3BlbiBuZXcgc2Vzc2lvbgogICAgLy8gb25seSBlc2Nyb3cgY2FuIGNhbGwKICAgIGZ1bmN0aW9uIHJlc2V0U2Vzc2lvbigpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUoIXNlc3Npb24uaXNSZXNldCAmJiAhc2Vzc2lvbi5pc09wZW4pOwogICAgICAgIHNlc3Npb24ucHJpY2VPcGVuID0gMDsKICAgICAgICBzZXNzaW9uLnByaWNlQ2xvc2UgPSAwOwogICAgICAgIHNlc3Npb24uaXNSZXNldCA9IHRydWU7CiAgICAgICAgc2Vzc2lvbi5pc09wZW4gPSBmYWxzZTsKICAgICAgICBzZXNzaW9uLmludmVzdE9wZW4gPSBmYWxzZTsKICAgICAgICBzZXNzaW9uLmludmVzdG9yQ291bnQgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IE1BWF9JTlZFU1RPUjsgaSsrKSB7CiAgICAgICAgICAgIHNlc3Npb24uaW52ZXN0b3JbaV0gPSAweDA7CiAgICAgICAgICAgIHNlc3Npb24ud2luW2ldID0gZmFsc2U7CiAgICAgICAgICAgIHNlc3Npb24uYW1vdW50SW52ZXN0W2ldID0gMDsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IE9wZW4gbmV3IHNlc3Npb24sIG9ubHkgZXNjcm93IGNhbiBjYWxsCiAgICBmdW5jdGlvbiBvcGVuU2Vzc2lvbiAoKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlFc2Nyb3cKICAgIHsKICAgICAgICByZXF1aXJlKHNlc3Npb24uaXNSZXNldCAmJiAhc2Vzc2lvbi5pc09wZW4pOwogICAgICAgIHNlc3Npb24uaXNSZXNldCA9IGZhbHNlOwogICAgICAgIC8vIG9wZW4gaW52ZXN0CiAgICAgICAgc2Vzc2lvbi5pbnZlc3RPcGVuID0gdHJ1ZTsKICAgICAgICBzZXNzaW9uLnRpbWVPcGVuID0gbm93OwogICAgICAgIHNlc3Npb24uaXNPcGVuID0gdHJ1ZTsKICAgICAgICBTZXNzaW9uT3Blbihub3csIHNlc3Npb25JZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEZ1Y3Rpb24gZm9yIGludmVzdG9yLCBtaW5pbXVuIGV0aGVyIHNlbmQgaXMgMC4xLCBvbmUgYWRkcmVzcyBjYW4gY2FsbCBvbmUgdGltZSBpbiBvbmUgc2Vzc2lvbgogICAgLy8vIEBwYXJhbSBfY2hvb3NlIGNob2lzZSBvZiBpbnZlc3RvciwgdHJ1ZSBpcyBjYWxsLCBmYWxzZSBpcyBwdXQKICAgIGZ1bmN0aW9uIGludmVzdCAoYm9vbCBfY2hvb3NlKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAxMDAwMDAwMDAwMDAwMDAwMDAgJiYgc2Vzc2lvbi5pbnZlc3RPcGVuKTsgLy8gbXNnLnZhbHVlID49IDAuMSBldGhlcgogICAgICAgIHJlcXVpcmUobm93IDwgKHNlc3Npb24udGltZU9wZW4gKyB0aW1lSW52ZXN0SW5NaW51dGUgKiAxIG1pbnV0ZXMpKTsKICAgICAgICByZXF1aXJlKHNlc3Npb24uaW52ZXN0b3JDb3VudCA8IE1BWF9JTlZFU1RPUiAmJiBzZXNzaW9uLmludmVzdGVkU2Vzc2lvblttc2cuc2VuZGVyXSAhPSBzZXNzaW9uSWQpOwogICAgICAgIHNlc3Npb24uaW52ZXN0b3Jbc2Vzc2lvbi5pbnZlc3RvckNvdW50XSA9IG1zZy5zZW5kZXI7CiAgICAgICAgc2Vzc2lvbi53aW5bc2Vzc2lvbi5pbnZlc3RvckNvdW50XSA9IF9jaG9vc2U7CiAgICAgICAgc2Vzc2lvbi5hbW91bnRJbnZlc3Rbc2Vzc2lvbi5pbnZlc3RvckNvdW50XSA9IG1zZy52YWx1ZTsKICAgICAgICBzZXNzaW9uLmludmVzdG9yQ291bnQgKz0gMTsKICAgICAgICBzZXNzaW9uLmludmVzdGVkU2Vzc2lvblttc2cuc2VuZGVyXSA9IHNlc3Npb25JZDsKICAgICAgICBJbnZlc3QobXNnLnNlbmRlciwgX2Nob29zZSwgbXNnLnZhbHVlLCBub3csIHNlc3Npb25JZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IGNsb3NlIGludmVzdCBmb3IgZXNjcm93CiAgICAvLy8gQHBhcmFtIF9wcmljZU9wZW4gcHJpY2UgRVRIIGluIFVTRAogICAgZnVuY3Rpb24gY2xvc2VJbnZlc3QgKHVpbnQgX3ByaWNlT3BlbikgCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUoX3ByaWNlT3BlbiAhPSAwICYmIHNlc3Npb24uaW52ZXN0T3Blbik7CiAgICAgICAgcmVxdWlyZShub3cgPiAoc2Vzc2lvbi50aW1lT3BlbiArIHRpbWVJbnZlc3RJbk1pbnV0ZSAqIDEgbWludXRlcykpOwogICAgICAgIHNlc3Npb24uaW52ZXN0T3BlbiA9IGZhbHNlOwogICAgICAgIHNlc3Npb24ucHJpY2VPcGVuID0gX3ByaWNlT3BlbjsKICAgICAgICBJbnZlc3RDbG9zZShub3csIF9wcmljZU9wZW4sIHNlc3Npb25JZCk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IGdldCBhbW91bnQgb2YgZXRoZXIgdG8gYnV5IE5BQyBmb3IgaW52ZXN0b3IKICAgIC8vLyBAcGFyYW0gX2V0aGVyIGFtb3VudCBldGhlciB3aGljaCBpbnZlc3RvciBpbnZlc3QKICAgIC8vLyBAcGFyYW0gX3JhdGUgcmF0ZSBiZXR3ZWVuIHdpbiBhbmQgbG9zcyBpbnZlc3RvcgogICAgLy8vIEBwYXJhbSBfc3RhdHVzIHRydWUgZm9yIGludmVzdG9yIHdpbiBhbmQgZmFsc2UgZm9yIGludmVzdG9yIGxvc3MKICAgIGZ1bmN0aW9uIGdldEV0aGVyVG9CdXkgKHVpbnQgX2V0aGVyLCB1aW50IF9yYXRlLCBib29sIF9zdGF0dXMpCiAgICAgICAgcHVibGljCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgaWYgKF9zdGF0dXMpIHsKICAgICAgICAgICAgcmV0dXJuIF9ldGhlciAqIF9yYXRlIC8gMTAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBfZXRoZXIgKiAoMjAwIC0gX3JhdGUpIC8gMTAwOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBjbG9zZSBzZXNzaW9uLCBvbmx5IGVzY3JvdyBjYW4gY2FsbAogICAgLy8vIEBwYXJhbSBfcHJpY2VDbG9zZSBwcmljZSBvZiBFVEggaW4gVVNECiAgICBmdW5jdGlvbiBjbG9zZVNlc3Npb24gKHVpbnQgX3ByaWNlQ2xvc2UpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUVzY3JvdwogICAgewogICAgICAgIHJlcXVpcmUoX3ByaWNlQ2xvc2UgIT0gMCAmJiBub3cgPiAoc2Vzc2lvbi50aW1lT3BlbiArIHRpbWVPbmVTZXNzaW9uICogMSBtaW51dGVzKSk7CiAgICAgICAgcmVxdWlyZSghc2Vzc2lvbi5pbnZlc3RPcGVuICYmIHNlc3Npb24uaXNPcGVuKTsKICAgICAgICBzZXNzaW9uLnByaWNlQ2xvc2UgPSBfcHJpY2VDbG9zZTsKICAgICAgICBib29sIHJlc3VsdCA9IChfcHJpY2VDbG9zZT5zZXNzaW9uLnByaWNlT3Blbik/dHJ1ZTpmYWxzZTsKICAgICAgICB1aW50IGV0aGVyVG9CdXk7CiAgICAgICAgTmFtaUNyb3dkU2FsZSBuYW1pQ29udHJhY3QgPSBOYW1pQ3Jvd2RTYWxlKG5hbWlDcm93ZFNhbGVBZGRyKTsKICAgICAgICB1aW50IHByaWNlID0gbmFtaUNvbnRyYWN0LmdldFByaWNlKCk7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgc2Vzc2lvbi5pbnZlc3RvckNvdW50OyBpKyspIHsKICAgICAgICAgICAgaWYgKHNlc3Npb24ud2luW2ldPT1yZXN1bHQpIHsKICAgICAgICAgICAgICAgIGV0aGVyVG9CdXkgPSBnZXRFdGhlclRvQnV5KHNlc3Npb24uYW1vdW50SW52ZXN0W2ldLCByYXRlLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGV0aGVyVG9CdXkgPSBnZXRFdGhlclRvQnV5KHNlc3Npb24uYW1vdW50SW52ZXN0W2ldLCByYXRlLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmFtaUNvbnRyYWN0LmJ1eS52YWx1ZShldGhlclRvQnV5KShzZXNzaW9uLmludmVzdG9yW2ldKTsKICAgICAgICAgICAgLy8gcmVzZXQgaW52ZXN0b3IKICAgICAgICAgICAgc2Vzc2lvbi5pbnZlc3RvcltpXSA9IDB4MDsKICAgICAgICAgICAgc2Vzc2lvbi53aW5baV0gPSBmYWxzZTsKICAgICAgICAgICAgc2Vzc2lvbi5hbW91bnRJbnZlc3RbaV0gPSAwOwogICAgICAgIH0KICAgICAgICBzZXNzaW9uLmlzT3BlbiA9IGZhbHNlOwogICAgICAgIFNlc3Npb25DbG9zZShub3csIHNlc3Npb25JZCwgX3ByaWNlQ2xvc2UsIHByaWNlLCByYXRlKTsKICAgICAgICBzZXNzaW9uSWQgKz0gMTsKICAgICAgICAKICAgICAgICAvLyByZXF1aXJlKCFzZXNzaW9uLmlzUmVzZXQgJiYgIXNlc3Npb24uaXNPcGVuKTsKICAgICAgICAvLyByZXNldCBzdGF0ZSBzZXNzaW9uCiAgICAgICAgc2Vzc2lvbi5wcmljZU9wZW4gPSAwOwogICAgICAgIHNlc3Npb24ucHJpY2VDbG9zZSA9IDA7CiAgICAgICAgc2Vzc2lvbi5pc1Jlc2V0ID0gdHJ1ZTsKICAgICAgICBzZXNzaW9uLmludmVzdE9wZW4gPSBmYWxzZTsKICAgICAgICBzZXNzaW9uLmludmVzdG9yQ291bnQgPSAwOwogICAgfQp9CgoKY29udHJhY3QgUHJlc2FsZVRva2VuIHsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYzsKfQoKIC8qCiAqIENvbnRyYWN0IHRoYXQgaXMgd29ya2luZyB3aXRoIEVSQzIyMyB0b2tlbnMKICovCiAKIC8qKgogKiBAdGl0bGUgQ29udHJhY3QgdGhhdCB3aWxsIHdvcmsgd2l0aCBFUkMyMjMgdG9rZW5zLgogKi8KIApjb250cmFjdCBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCB7Ci8qKgogKiBAZGV2IFN0YW5kYXJkIEVSQzIyMyBmdW5jdGlvbiB0aGF0IHdpbGwgaGFuZGxlIGluY29taW5nIHRva2VuIHRyYW5zZmVycy4KICoKICogQHBhcmFtIF9mcm9tICBUb2tlbiBzZW5kZXIgYWRkcmVzcy4KICogQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zLgogKiBAcGFyYW0gX2RhdGEgIFRyYW5zYWN0aW9uIG1ldGFkYXRhLgogKi8KICAgIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2tCdXllcihhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBfYnV5ZXIpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdG9rZW5GYWxsYmFja0V4Y2hhbmdlKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCB1aW50IF9wcmljZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0KCgogLyoKICogTmFtaSBJbnRlcm5hbCBFeGNoYW5nZSBzbWFydGNvbnRyYWN0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICoKICovCgpjb250cmFjdCBOYW1pRXhjaGFuZ2UgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICAKICAgIGZ1bmN0aW9uIE5hbWlFeGNoYW5nZShhZGRyZXNzIF9uYW1pQWRkcmVzcykgcHVibGljIHsKICAgICAgICBOYW1pQWRkciA9IF9uYW1pQWRkcmVzczsKICAgIH0KCiAgICBldmVudCBVcGRhdGVCaWQoYWRkcmVzcyBvd25lciwgdWludCBwcmljZSwgdWludCBiYWxhbmNlKTsKICAgIGV2ZW50IFVwZGF0ZUFzayhhZGRyZXNzIG93bmVyLCB1aW50IHByaWNlLCB1aW50IHZvbHVtZSk7CgogICAgCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gT3JkZXJCaWQpIHB1YmxpYyBiaWQ7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gT3JkZXJBc2spIHB1YmxpYyBhc2s7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiTmFjRXhjaGFuZ2UiOwogICAgCiAgICAvLy8gYWRkcmVzcyBvZiBOYW1pIHRva2VuCiAgICBhZGRyZXNzIE5hbWlBZGRyOwogICAgCiAgICAvLy8gcHJpY2Ugb2YgTmFjID0gRVRIL05BQwogICAgdWludCBwdWJsaWMgcHJpY2UgPSAxOwogICAgdWludCBwdWJsaWMgZXRoZXJCYWxhbmNlPTA7CiAgICB1aW50IHB1YmxpYyBuYWNCYWxhbmNlPTA7CiAgICAvLyBzdHJ1Y3Qgc3RvcmUgb3JkZXIgb2YgdXNlcgogICAgc3RydWN0IE9yZGVyQmlkIHsKICAgICAgICB1aW50IHByaWNlOwogICAgICAgIHVpbnQgZXRoOwogICAgfQogICAgCiAgICBzdHJ1Y3QgT3JkZXJBc2sgewogICAgICAgIHVpbnQgcHJpY2U7CiAgICAgICAgdWludCB2b2x1bWU7CiAgICB9CiAgICAKICAgICAgICAKICAgIC8vIHByZXZlbnQgbG9zdCBldGhlcgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICBpZiAoYmlkW21zZy5zZW5kZXJdLnByaWNlID4gMCkgewogICAgICAgICAgICBiaWRbbXNnLnNlbmRlcl0uZXRoID0gKGJpZFttc2cuc2VuZGVyXS5ldGgpLmFkZChtc2cudmFsdWUpOwogICAgICAgICAgICBldGhlckJhbGFuY2UgPSBldGhlckJhbGFuY2UuYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIFVwZGF0ZUJpZChtc2cuc2VuZGVyLCBiaWRbbXNnLnNlbmRlcl0ucHJpY2UsIGJpZFttc2cuc2VuZGVyXS5ldGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHJlZnVuZAogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAgICAgfQogICAgICAgIC8vIHRlc3QKICAgICAgICAvLyBhZGRyZXNzIHRlc3QgPSAiMHg3MGM5MzIzNjlmYzFDNzZmZGU2ODRGRjA1OTY2QTcwYjljMTU2MWMxIjsKICAgICAgICAvLyB0ZXN0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8gcHJldmVudCBsb3N0IHRva2VuCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlID4gMCAmJiBfZGF0YS5sZW5ndGggPT0gMCk7CiAgICAgICAgaWYgKGFza1tfZnJvbV0ucHJpY2UgPiAwKSB7CiAgICAgICAgICAgIGFza1tfZnJvbV0udm9sdW1lID0gKGFza1tfZnJvbV0udm9sdW1lKS5hZGQoX3ZhbHVlKTsKICAgICAgICAgICAgbmFjQmFsYW5jZSA9IG5hY0JhbGFuY2UuYWRkKF92YWx1ZSk7CiAgICAgICAgICAgIFVwZGF0ZUFzayhfZnJvbSwgYXNrW19mcm9tXS5wcmljZSwgYXNrW19mcm9tXS52b2x1bWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL3JlZnVuZAogICAgICAgICAgICBFUkMyMyBhc3NldCA9IEVSQzIzKE5hbWlBZGRyKTsKICAgICAgICAgICAgYXNzZXQudHJhbnNmZXIoX2Zyb20sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlOYW1pIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gTmFtaUFkZHIpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIAogICAgLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIGZ1bmN0aW9uIGFib3V0IGJpZCBPcmRlci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAKICAgIGZ1bmN0aW9uIHBsYWNlQnV5T3JkZXIodWludCBfcHJpY2UpIHBheWFibGUgcHVibGljIHsKICAgICAgICByZXF1aXJlKF9wcmljZSA+IDApOwogICAgICAgIGlmIChtc2cudmFsdWUgPiAwKSB7CiAgICAgICAgICAgIGV0aGVyQmFsYW5jZSArPSBtc2cudmFsdWU7CiAgICAgICAgICAgIGJpZFttc2cuc2VuZGVyXS5ldGggPSAoYmlkW21zZy5zZW5kZXJdLmV0aCkuYWRkKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIFVwZGF0ZUJpZChtc2cuc2VuZGVyLCBfcHJpY2UsIGJpZFttc2cuc2VuZGVyXS5ldGgpOwogICAgICAgIH0KICAgICAgICBiaWRbbXNnLnNlbmRlcl0ucHJpY2UgPSBfcHJpY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2tCdXllcihhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYWRkcmVzcyBfYnV5ZXIpIG9ubHlOYW1pIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBFUkMyMyBhc3NldCA9IEVSQzIzKE5hbWlBZGRyKTsKICAgICAgICB1aW50IGN1cnJlbnRFdGggPSBiaWRbX2J1eWVyXS5ldGg7CiAgICAgICAgaWYgKChfdmFsdWUuZGl2KGJpZFtfYnV5ZXJdLnByaWNlKSkgPiBjdXJyZW50RXRoKSB7CiAgICAgICAgICAgIGlmIChfZnJvbS5zZW5kKGN1cnJlbnRFdGgpICYmIGFzc2V0LnRyYW5zZmVyKF9idXllciwgY3VycmVudEV0aC5tdWwoYmlkW19idXllcl0ucHJpY2UpKSAmJiBhc3NldC50cmFuc2ZlcihfZnJvbSwgX3ZhbHVlIC0gKGN1cnJlbnRFdGgubXVsKGJpZFtfYnV5ZXJdLnByaWNlKSApICkgKSB7CiAgICAgICAgICAgICAgICBiaWRbX2J1eWVyXS5ldGggPSAwOwogICAgICAgICAgICAgICAgZXRoZXJCYWxhbmNlID0gZXRoZXJCYWxhbmNlLnN1YihjdXJyZW50RXRoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUJpZChfYnV5ZXIsIGJpZFtfYnV5ZXJdLnByaWNlLCBiaWRbX2J1eWVyXS5ldGgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyByZWZ1bmQgdG9rZW4KICAgICAgICAgICAgICAgIGFzc2V0LnRyYW5zZmVyKF9mcm9tLCBfdmFsdWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdWludCBldGggPSBfdmFsdWUuZGl2KGJpZFtfYnV5ZXJdLnByaWNlKTsKICAgICAgICAgICAgaWYgKF9mcm9tLnNlbmQoZXRoKSAmJiBhc3NldC50cmFuc2ZlcihfYnV5ZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgICAgIGJpZFtfYnV5ZXJdLmV0aCA9IChiaWRbX2J1eWVyXS5ldGgpLnN1YihldGgpOwogICAgICAgICAgICAgICAgZXRoZXJCYWxhbmNlID0gZXRoZXJCYWxhbmNlLnN1YihldGgpOwogICAgICAgICAgICAgICAgVXBkYXRlQmlkKF9idXllciwgYmlkW19idXllcl0ucHJpY2UsIGJpZFtfYnV5ZXJdLmV0aCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIHJlZnVuZCB0b2tlbgogICAgICAgICAgICAgICAgYXNzZXQudHJhbnNmZXIoX2Zyb20sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNsb3NlQmlkT3JkZXIoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoYmlkW21zZy5zZW5kZXJdLmV0aCA+IDAgJiYgYmlkW21zZy5zZW5kZXJdLnByaWNlID4gMCk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihiaWRbbXNnLnNlbmRlcl0uZXRoKTsKICAgICAgICBldGhlckJhbGFuY2UgPSBldGhlckJhbGFuY2Uuc3ViKGJpZFttc2cuc2VuZGVyXS5ldGgpOwogICAgICAgIGJpZFttc2cuc2VuZGVyXS5ldGggPSAwOwogICAgICAgIFVwZGF0ZUJpZChtc2cuc2VuZGVyLCBiaWRbbXNnLnNlbmRlcl0ucHJpY2UsIGJpZFttc2cuc2VuZGVyXS5ldGgpOwogICAgfQogICAgCgogICAgLy8vLy8vLy8vLy8vLy8vLwogICAgLy8gZnVuY3Rpb24gYWJvdXQgYXNrIE9yZGVyLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIHBsYWNlIGFzayBvcmRlciBieSBzZW5kIE5BQyB0byBjb250cmFjdAogICAgCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrRXhjaGFuZ2UoYWRkcmVzcyBfZnJvbSwgdWludCBfdmFsdWUsIHVpbnQgX3ByaWNlKSBvbmx5TmFtaSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgICAgICBpZiAoX3ZhbHVlID4gMCkgewogICAgICAgICAgICBuYWNCYWxhbmNlID0gbmFjQmFsYW5jZS5hZGQoX3ZhbHVlKTsKICAgICAgICAgICAgYXNrW19mcm9tXS52b2x1bWUgPSAoYXNrW19mcm9tXS52b2x1bWUpLmFkZChfdmFsdWUpOwogICAgICAgICAgICBhc2tbX2Zyb21dLnByaWNlID0gX3ByaWNlOwogICAgICAgICAgICBVcGRhdGVBc2soX2Zyb20sIF9wcmljZSwgYXNrW19mcm9tXS52b2x1bWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhc2tbX2Zyb21dLnByaWNlID0gX3ByaWNlOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjbG9zZUFza09yZGVyKCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKGFza1ttc2cuc2VuZGVyXS52b2x1bWUgPiAwICYmIGFza1ttc2cuc2VuZGVyXS5wcmljZSA+IDApOwogICAgICAgIEVSQzIzIGFzc2V0ID0gRVJDMjMoTmFtaUFkZHIpOwogICAgICAgIGlmIChhc3NldC50cmFuc2Zlcihtc2cuc2VuZGVyLCBhc2tbbXNnLnNlbmRlcl0udm9sdW1lKSkgewogICAgICAgICAgICBuYWNCYWxhbmNlID0gbmFjQmFsYW5jZS5zdWIoYXNrW21zZy5zZW5kZXJdLnZvbHVtZSk7CiAgICAgICAgICAgIGFza1ttc2cuc2VuZGVyXS52b2x1bWUgPSAwOwogICAgICAgICAgICBVcGRhdGVBc2sobXNnLnNlbmRlciwgYXNrW21zZy5zZW5kZXJdLnByaWNlLCAwKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1eU5hYyhhZGRyZXNzIF9zZWxsZXIpIHBheWFibGUgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCAmJiBhc2tbX3NlbGxlcl0udm9sdW1lID4gMCAmJiBhc2tbX3NlbGxlcl0ucHJpY2UgPiAwKTsKICAgICAgICBFUkMyMyBhc3NldCA9IEVSQzIzKE5hbWlBZGRyKTsKICAgICAgICB1aW50IG1heEV0aCA9IChhc2tbX3NlbGxlcl0udm9sdW1lKS5kaXYoYXNrW19zZWxsZXJdLnByaWNlKTsKICAgICAgICBpZiAobXNnLnZhbHVlID4gbWF4RXRoKSB7CiAgICAgICAgICAgIGlmIChfc2VsbGVyLnNlbmQobWF4RXRoKSAmJiBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlLnN1YihtYXhFdGgpKSAmJiBhc3NldC50cmFuc2Zlcihtc2cuc2VuZGVyLCBhc2tbX3NlbGxlcl0udm9sdW1lKSkgewogICAgICAgICAgICAgICAgbmFjQmFsYW5jZSA9IG5hY0JhbGFuY2Uuc3ViKGFza1tfc2VsbGVyXS52b2x1bWUpOwogICAgICAgICAgICAgICAgYXNrW19zZWxsZXJdLnZvbHVtZSA9IDA7CiAgICAgICAgICAgICAgICBVcGRhdGVBc2soX3NlbGxlciwgYXNrW19zZWxsZXJdLnByaWNlLCAwKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy9yZWZ1bmQKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChfc2VsbGVyLnNlbmQobXNnLnZhbHVlKSAmJiBhc3NldC50cmFuc2Zlcihtc2cuc2VuZGVyLCAobXNnLnZhbHVlKS5tdWwoYXNrW19zZWxsZXJdLnByaWNlKSkpIHsKICAgICAgICAgICAgICAgIHVpbnQgbmFjID0gKG1zZy52YWx1ZSkubXVsKGFza1tfc2VsbGVyXS5wcmljZSk7CiAgICAgICAgICAgICAgICBuYWNCYWxhbmNlID0gbmFjQmFsYW5jZS5zdWIobmFjKTsKICAgICAgICAgICAgICAgIGFza1tfc2VsbGVyXS52b2x1bWUgPSAoYXNrW19zZWxsZXJdLnZvbHVtZSkuc3ViKG5hYyk7CiAgICAgICAgICAgICAgICBVcGRhdGVBc2soX3NlbGxlciwgYXNrW19zZWxsZXJdLnByaWNlLCBhc2tbX3NlbGxlcl0udm9sdW1lKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy9yZWZ1bmQKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKY29udHJhY3QgRVJDMjMgewogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9CgoKCi8qCiogTmFtaU11bHRpU2lnV2FsbGV0IHNtYXJ0IGNvbnRyYWN0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoqLwovLy8gQHRpdGxlIE11bHRpc2lnbmF0dXJlIHdhbGxldCAtIEFsbG93cyBtdWx0aXBsZSBwYXJ0aWVzIHRvIGFncmVlIG9uIHRyYW5zYWN0aW9ucyBiZWZvcmUgZXhlY3V0aW9uLgpjb250cmFjdCBOYW1pTXVsdGlTaWdXYWxsZXQgewoKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIE1BWF9PV05FUl9DT1VOVCA9IDUwOwoKICAgIGV2ZW50IENvbmZpcm1hdGlvbihhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IGluZGV4ZWQgdHJhbnNhY3Rpb25JZCk7CiAgICBldmVudCBSZXZvY2F0aW9uKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IFN1Ym1pc3Npb24odWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwogICAgZXZlbnQgRXhlY3V0aW9uKHVpbnQgaW5kZXhlZCB0cmFuc2FjdGlvbklkKTsKICAgIGV2ZW50IEV4ZWN1dGlvbkZhaWx1cmUodWludCBpbmRleGVkIHRyYW5zYWN0aW9uSWQpOwogICAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IE93bmVyQWRkaXRpb24oYWRkcmVzcyBpbmRleGVkIG93bmVyKTsKICAgIGV2ZW50IE93bmVyUmVtb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIpOwogICAgZXZlbnQgUmVxdWlyZW1lbnRDaGFuZ2UodWludCByZXF1aXJlZCk7CgogICAgbWFwcGluZyAodWludCA9PiBUcmFuc2FjdGlvbikgcHVibGljIHRyYW5zYWN0aW9uczsKICAgIG1hcHBpbmcgKHVpbnQgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSkgcHVibGljIGNvbmZpcm1hdGlvbnM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc093bmVyOwogICAgYWRkcmVzc1tdIHB1YmxpYyBvd25lcnM7CiAgICB1aW50IHB1YmxpYyByZXF1aXJlZDsKICAgIHVpbnQgcHVibGljIHRyYW5zYWN0aW9uQ291bnQ7CgogICAgc3RydWN0IFRyYW5zYWN0aW9uIHsKICAgICAgICBhZGRyZXNzIGRlc3RpbmF0aW9uOwogICAgICAgIHVpbnQgdmFsdWU7CiAgICAgICAgYnl0ZXMgZGF0YTsKICAgICAgICBib29sIGV4ZWN1dGVkOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlXYWxsZXQoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJlc3ModGhpcykpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb3duZXJEb2VzTm90RXhpc3QoYWRkcmVzcyBvd25lcikgewogICAgICAgIHJlcXVpcmUoIWlzT3duZXJbb3duZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyRXhpc3RzKGFkZHJlc3Mgb3duZXIpIHsKICAgICAgICByZXF1aXJlKGlzT3duZXJbb3duZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRyYW5zYWN0aW9uRXhpc3RzKHVpbnQgdHJhbnNhY3Rpb25JZCkgewogICAgICAgIHJlcXVpcmUodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdLmRlc3RpbmF0aW9uICE9IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIHJlcXVpcmUoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcl0pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90Q29uZmlybWVkKHVpbnQgdHJhbnNhY3Rpb25JZCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIHJlcXVpcmUoIWNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25JZF1bb3duZXJdKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdEV4ZWN1dGVkKHVpbnQgdHJhbnNhY3Rpb25JZCkgewogICAgICAgIHJlcXVpcmUoIXRyYW5zYWN0aW9uc1t0cmFuc2FjdGlvbklkXS5leGVjdXRlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3ROdWxsKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRSZXF1aXJlbWVudCh1aW50IG93bmVyQ291bnQsIHVpbnQgX3JlcXVpcmVkKSB7CiAgICAgICAgcmVxdWlyZSghKG93bmVyQ291bnQgPiBNQVhfT1dORVJfQ09VTlQKICAgICAgICAgICAgfHwgX3JlcXVpcmVkID4gb3duZXJDb3VudAogICAgICAgICAgICB8fCBfcmVxdWlyZWQgPT0gMAogICAgICAgICAgICB8fCBvd25lckNvdW50ID09IDApKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uIGFsbG93cyB0byBkZXBvc2l0IGV0aGVyLgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApCiAgICAgICAgICAgIERlcG9zaXQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvKgogICAgICogUHVibGljIGZ1bmN0aW9ucwogICAgICovCiAgICAvLy8gQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBzZXRzIGluaXRpYWwgb3duZXJzIGFuZCByZXF1aXJlZCBudW1iZXIgb2YgY29uZmlybWF0aW9ucy4KICAgIC8vLyBAcGFyYW0gX293bmVycyBMaXN0IG9mIGluaXRpYWwgb3duZXJzLgogICAgLy8vIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBOYW1pTXVsdGlTaWdXYWxsZXQoYWRkcmVzc1tdIF9vd25lcnMsIHVpbnQgX3JlcXVpcmVkKQogICAgICAgIHB1YmxpYwogICAgICAgIHZhbGlkUmVxdWlyZW1lbnQoX293bmVycy5sZW5ndGgsIF9yZXF1aXJlZCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfb3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHJlcXVpcmUoIShpc093bmVyW19vd25lcnNbaV1dIHx8IF9vd25lcnNbaV0gPT0gMCkpOwogICAgICAgICAgICBpc093bmVyW19vd25lcnNbaV1dID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgb3duZXJzID0gX293bmVyczsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gYWRkIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBvd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgb3duZXJEb2VzTm90RXhpc3Qob3duZXIpCiAgICAgICAgbm90TnVsbChvd25lcikKICAgICAgICB2YWxpZFJlcXVpcmVtZW50KG93bmVycy5sZW5ndGggKyAxLCByZXF1aXJlZCkKICAgIHsKICAgICAgICBpc093bmVyW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgICAgIE93bmVyQWRkaXRpb24ob3duZXIpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyB0byByZW1vdmUgYW4gb3duZXIuIFRyYW5zYWN0aW9uIGhhcyB0byBiZSBzZW50IGJ5IHdhbGxldC4KICAgIC8vLyBAcGFyYW0gb3duZXIgQWRkcmVzcyBvZiBvd25lci4KICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgewogICAgICAgIGlzT3duZXJbb3duZXJdID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICAgIGlmIChvd25lcnNbaV0gPT0gb3duZXIpIHsKICAgICAgICAgICAgICAgIG93bmVyc1tpXSA9IG93bmVyc1tvd25lcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBvd25lcnMubGVuZ3RoIC09IDE7CiAgICAgICAgaWYgKHJlcXVpcmVkID4gb3duZXJzLmxlbmd0aCkKICAgICAgICAgICAgY2hhbmdlUmVxdWlyZW1lbnQob3duZXJzLmxlbmd0aCk7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gcmVwbGFjZSBhbiBvd25lciB3aXRoIGEgbmV3IG93bmVyLiBUcmFuc2FjdGlvbiBoYXMgdG8gYmUgc2VudCBieSB3YWxsZXQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2Ygb3duZXIgdG8gYmUgcmVwbGFjZWQuCiAgICAvLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgb2YgbmV3IG93bmVyLgogICAgZnVuY3Rpb24gcmVwbGFjZU93bmVyKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3MgbmV3T3duZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdhbGxldAogICAgICAgIG93bmVyRXhpc3RzKG93bmVyKQogICAgICAgIG93bmVyRG9lc05vdEV4aXN0KG5ld093bmVyKQogICAgewogICAgICAgIGZvciAodWludCBpPTA7IGk8b3duZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChvd25lcnNbaV0gPT0gb3duZXIpIHsKICAgICAgICAgICAgICAgIG93bmVyc1tpXSA9IG5ld093bmVyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaXNPd25lcltvd25lcl0gPSBmYWxzZTsKICAgICAgICBpc093bmVyW25ld093bmVyXSA9IHRydWU7CiAgICAgICAgT3duZXJSZW1vdmFsKG93bmVyKTsKICAgICAgICBPd25lckFkZGl0aW9uKG5ld093bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2YgcmVxdWlyZWQgY29uZmlybWF0aW9ucy4gVHJhbnNhY3Rpb24gaGFzIHRvIGJlIHNlbnQgYnkgd2FsbGV0LgogICAgLy8vIEBwYXJhbSBfcmVxdWlyZWQgTnVtYmVyIG9mIHJlcXVpcmVkIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBjaGFuZ2VSZXF1aXJlbWVudCh1aW50IF9yZXF1aXJlZCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgdmFsaWRSZXF1aXJlbWVudChvd25lcnMubGVuZ3RoLCBfcmVxdWlyZWQpCiAgICB7CiAgICAgICAgcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICAgICAgUmVxdWlyZW1lbnRDaGFuZ2UoX3JlcXVpcmVkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW4gb3duZXIgdG8gc3VibWl0IGFuZCBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIGRlc3RpbmF0aW9uIFRyYW5zYWN0aW9uIHRhcmdldCBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSB2YWx1ZSBUcmFuc2FjdGlvbiBldGhlciB2YWx1ZS4KICAgIC8vLyBAcGFyYW0gZGF0YSBUcmFuc2FjdGlvbiBkYXRhIHBheWxvYWQuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHRyYW5zYWN0aW9uIElELgogICAgZnVuY3Rpb24gc3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyBkZXN0aW5hdGlvbiwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zICh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25JZCA9IGFkZFRyYW5zYWN0aW9uKGRlc3RpbmF0aW9uLCB2YWx1ZSwgZGF0YSk7CiAgICAgICAgY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byBjb25maXJtIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBjb25maXJtVHJhbnNhY3Rpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgdHJhbnNhY3Rpb25FeGlzdHModHJhbnNhY3Rpb25JZCkKICAgICAgICBub3RDb25maXJtZWQodHJhbnNhY3Rpb25JZCwgbXNnLnNlbmRlcikKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gdHJ1ZTsKICAgICAgICBDb25maXJtYXRpb24obXNnLnNlbmRlciwgdHJhbnNhY3Rpb25JZCk7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IEFsbG93cyBhbiBvd25lciB0byByZXZva2UgYSBjb25maXJtYXRpb24gZm9yIGEgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiByZXZva2VDb25maXJtYXRpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgY29uZmlybWVkKHRyYW5zYWN0aW9uSWQsIG1zZy5zZW5kZXIpCiAgICAgICAgbm90RXhlY3V0ZWQodHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSWRdW21zZy5zZW5kZXJdID0gZmFsc2U7CiAgICAgICAgUmV2b2NhdGlvbihtc2cuc2VuZGVyLCB0cmFuc2FjdGlvbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBBbGxvd3MgYW55b25lIHRvIGV4ZWN1dGUgYSBjb25maXJtZWQgdHJhbnNhY3Rpb24uCiAgICAvLy8gQHBhcmFtIHRyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gSUQuCiAgICBmdW5jdGlvbiBleGVjdXRlVHJhbnNhY3Rpb24odWludCB0cmFuc2FjdGlvbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIG5vdEV4ZWN1dGVkKHRyYW5zYWN0aW9uSWQpCiAgICB7CiAgICAgICAgaWYgKGlzQ29uZmlybWVkKHRyYW5zYWN0aW9uSWQpKSB7CiAgICAgICAgICAgIC8vIFRyYW5zYWN0aW9uIHR4ID0gdHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSWRdOwogICAgICAgICAgICB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0uZXhlY3V0ZWQgPSB0cnVlOwogICAgICAgICAgICAvLyB0eC5leGVjdXRlZCA9IHRydWU7CiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0uZGVzdGluYXRpb24uY2FsbC52YWx1ZSh0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0udmFsdWUpKHRyYW5zYWN0aW9uc1t0cmFuc2FjdGlvbklkXS5kYXRhKSkgewogICAgICAgICAgICAgICAgRXhlY3V0aW9uKHRyYW5zYWN0aW9uSWQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgRXhlY3V0aW9uRmFpbHVyZSh0cmFuc2FjdGlvbklkKTsKICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uc1t0cmFuc2FjdGlvbklkXS5leGVjdXRlZCA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdGhlIGNvbmZpcm1hdGlvbiBzdGF0dXMgb2YgYSB0cmFuc2FjdGlvbi4KICAgIC8vLyBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUcmFuc2FjdGlvbiBJRC4KICAgIC8vLyBAcmV0dXJuIENvbmZpcm1hdGlvbiBzdGF0dXMuCiAgICBmdW5jdGlvbiBpc0NvbmZpcm1lZCh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHVpbnQgY291bnQgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG93bmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgaWYgKGNvdW50ID09IHJlcXVpcmVkKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBJbnRlcm5hbCBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQWRkcyBhIG5ldyB0cmFuc2FjdGlvbiB0byB0aGUgdHJhbnNhY3Rpb24gbWFwcGluZywgaWYgdHJhbnNhY3Rpb24gZG9lcyBub3QgZXhpc3QgeWV0LgogICAgLy8vIEBwYXJhbSBkZXN0aW5hdGlvbiBUcmFuc2FjdGlvbiB0YXJnZXQgYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gdmFsdWUgVHJhbnNhY3Rpb24gZXRoZXIgdmFsdWUuCiAgICAvLy8gQHBhcmFtIGRhdGEgVHJhbnNhY3Rpb24gZGF0YSBwYXlsb2FkLgogICAgLy8vIEByZXR1cm4gUmV0dXJucyB0cmFuc2FjdGlvbiBJRC4KICAgIGZ1bmN0aW9uIGFkZFRyYW5zYWN0aW9uKGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpCiAgICAgICAgaW50ZXJuYWwKICAgICAgICBub3ROdWxsKGRlc3RpbmF0aW9uKQogICAgICAgIHJldHVybnMgKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgIHsKICAgICAgICB0cmFuc2FjdGlvbklkID0gdHJhbnNhY3Rpb25Db3VudDsKICAgICAgICB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF0gPSBUcmFuc2FjdGlvbih7CiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbiwgCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZXhlY3V0ZWQ6IGZhbHNlCiAgICAgICAgfSk7CiAgICAgICAgdHJhbnNhY3Rpb25Db3VudCArPSAxOwogICAgICAgIFN1Ym1pc3Npb24odHJhbnNhY3Rpb25JZCk7CiAgICB9CgogICAgLyoKICAgICAqIFdlYjMgY2FsbCBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgY29uZmlybWF0aW9ucyBvZiBhIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgLy8vIEByZXR1cm4gTnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMuCiAgICBmdW5jdGlvbiBnZXRDb25maXJtYXRpb25Db3VudCh1aW50IHRyYW5zYWN0aW9uSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50IGNvdW50KQogICAgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG93bmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0b3RhbCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGFmdGVyIGZpbGVycyBhcmUgYXBwbGllZC4KICAgIC8vLyBAcGFyYW0gcGVuZGluZyBJbmNsdWRlIHBlbmRpbmcgdHJhbnNhY3Rpb25zLgogICAgLy8vIEBwYXJhbSBleGVjdXRlZCBJbmNsdWRlIGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcmV0dXJuIFRvdGFsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgYWZ0ZXIgZmlsdGVycyBhcmUgYXBwbGllZC4KICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQ291bnQoYm9vbCBwZW5kaW5nLCBib29sIGV4ZWN1dGVkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludCBjb3VudCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0cmFuc2FjdGlvbkNvdW50OyBpKyspIHsKICAgICAgICAgICAgaWYgKHBlbmRpbmcgJiYgIXRyYW5zYWN0aW9uc1tpXS5leGVjdXRlZCB8fCBleGVjdXRlZCAmJiB0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQpCiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGxpc3Qgb2Ygb3duZXJzLgogICAgLy8vIEByZXR1cm4gTGlzdCBvZiBvd25lciBhZGRyZXNzZXMuCiAgICBmdW5jdGlvbiBnZXRPd25lcnMoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYWRkcmVzc1tdKQogICAgewogICAgICAgIHJldHVybiBvd25lcnM7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBhcnJheSB3aXRoIG93bmVyIGFkZHJlc3Nlcywgd2hpY2ggY29uZmlybWVkIHRyYW5zYWN0aW9uLgogICAgLy8vIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIElELgogICAgLy8vIEByZXR1cm4gUmV0dXJucyBhcnJheSBvZiBvd25lciBhZGRyZXNzZXMuCiAgICBmdW5jdGlvbiBnZXRDb25maXJtYXRpb25zKHVpbnQgdHJhbnNhY3Rpb25JZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGFkZHJlc3NbXSBfY29uZmlybWF0aW9ucykKICAgIHsKICAgICAgICBhZGRyZXNzW10gbWVtb3J5IGNvbmZpcm1hdGlvbnNUZW1wID0gbmV3IGFkZHJlc3NbXShvd25lcnMubGVuZ3RoKTsKICAgICAgICB1aW50IGNvdW50ID0gMDsKICAgICAgICB1aW50IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG93bmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbklkXVtvd25lcnNbaV1dKSB7CiAgICAgICAgICAgICAgICBjb25maXJtYXRpb25zVGVtcFtjb3VudF0gPSBvd25lcnNbaV07CiAgICAgICAgICAgICAgICBjb3VudCArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIF9jb25maXJtYXRpb25zID0gbmV3IGFkZHJlc3NbXShjb3VudCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgX2NvbmZpcm1hdGlvbnNbaV0gPSBjb25maXJtYXRpb25zVGVtcFtpXTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBsaXN0IG9mIHRyYW5zYWN0aW9uIElEcyBpbiBkZWZpbmVkIHJhbmdlLgogICAgLy8vIEBwYXJhbSBmcm9tIEluZGV4IHN0YXJ0IHBvc2l0aW9uIG9mIHRyYW5zYWN0aW9uIGFycmF5LgogICAgLy8vIEBwYXJhbSB0byBJbmRleCBlbmQgcG9zaXRpb24gb2YgdHJhbnNhY3Rpb24gYXJyYXkuCiAgICAvLy8gQHBhcmFtIHBlbmRpbmcgSW5jbHVkZSBwZW5kaW5nIHRyYW5zYWN0aW9ucy4KICAgIC8vLyBAcGFyYW0gZXhlY3V0ZWQgSW5jbHVkZSBleGVjdXRlZCB0cmFuc2FjdGlvbnMuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIGFycmF5IG9mIHRyYW5zYWN0aW9uIElEcy4KICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uSWRzKHVpbnQgZnJvbSwgdWludCB0bywgYm9vbCBwZW5kaW5nLCBib29sIGV4ZWN1dGVkKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludFtdIF90cmFuc2FjdGlvbklkcykKICAgIHsKICAgICAgICB1aW50W10gbWVtb3J5IHRyYW5zYWN0aW9uSWRzVGVtcCA9IG5ldyB1aW50W10odHJhbnNhY3Rpb25Db3VudCk7CiAgICAgICAgdWludCBjb3VudCA9IDA7CiAgICAgICAgdWludCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmFuc2FjdGlvbkNvdW50OyBpKyspIHsKICAgICAgICAgICAgaWYgKHBlbmRpbmcgJiYgIXRyYW5zYWN0aW9uc1tpXS5leGVjdXRlZCB8fCBleGVjdXRlZCAmJiB0cmFuc2FjdGlvbnNbaV0uZXhlY3V0ZWQpIHsKICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWRzVGVtcFtjb3VudF0gPSBpOwogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBfdHJhbnNhY3Rpb25JZHMgPSBuZXcgdWludFtdKHRvIC0gZnJvbSk7CiAgICAgICAgZm9yIChpID0gZnJvbTsgaSA8IHRvOyBpKyspIHsKICAgICAgICAgICAgX3RyYW5zYWN0aW9uSWRzW2kgLSBmcm9tXSA9IHRyYW5zYWN0aW9uSWRzVGVtcFtpXTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
