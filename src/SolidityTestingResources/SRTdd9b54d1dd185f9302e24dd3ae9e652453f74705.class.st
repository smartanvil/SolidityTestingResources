Class {
	#name : #SRTdd9b54d1dd185f9302e24dd3ae9e652453f74705,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd9b54d1dd185f9302e24dd3ae9e652453f74705 >> base64 [
	^ ''.
	

]
