Class {
	#name : #SRT8c114e498af111f1e2185e34880b59880f1c36ce,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8c114e498af111f1e2185e34880b59880f1c36ce >> base64 [
	^ ''.
	

]
