Class {
	#name : #SRT3ad041ebf3b2c2e518760372b2b22413bc029114,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3ad041ebf3b2c2e518760372b2b22413bc029114 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiBjb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvdG9rZW4vRVJDMjBCYXNpYy5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy90b2tlbi9FUkMyMC5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9SZXRyaWV2ZVRva2VuRmVhdHVyZS5zb2wKCmNvbnRyYWN0IFJldHJpZXZlVG9rZW5GZWF0dXJlIGlzIE93bmFibGUgewoKICBmdW5jdGlvbiByZXRyaWV2ZVRva2VucyhhZGRyZXNzIHRvLCBhZGRyZXNzIGFub3RoZXJUb2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICBFUkMyMCBhbGllblRva2VuID0gRVJDMjAoYW5vdGhlclRva2VuKTsKICAgIGFsaWVuVG9rZW4udHJhbnNmZXIodG8sIGFsaWVuVG9rZW4uYmFsYW5jZU9mKHRoaXMpKTsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvbWF0aC9TYWZlTWF0aC5zb2wKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9TdGFnZWRDcm93ZHNhbGUuc29sCgpjb250cmFjdCBTdGFnZWRDcm93ZHNhbGUgaXMgUmV0cmlldmVUb2tlbkZlYXR1cmUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgc3RydWN0IE1pbGVzdG9uZSB7CiAgICB1aW50IHBlcmlvZDsKICAgIHVpbnQgYm9udXM7CiAgfQoKICB1aW50IHB1YmxpYyBzdGFydDsKCiAgdWludCBwdWJsaWMgdG90YWxQZXJpb2Q7CgogIHVpbnQgcHVibGljIGludmVzdGVkOwoKICB1aW50IHB1YmxpYyBoYXJkQ2FwOwoKICBNaWxlc3RvbmVbXSBwdWJsaWMgbWlsZXN0b25lczsKCiAgZnVuY3Rpb24gbWlsZXN0b25lc0NvdW50KCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgcmV0dXJuIG1pbGVzdG9uZXMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gc2V0U3RhcnQodWludCBuZXdTdGFydCkgcHVibGljIG9ubHlPd25lciB7CiAgICBzdGFydCA9IG5ld1N0YXJ0OwogIH0KCiAgZnVuY3Rpb24gc2V0SGFyZGNhcCh1aW50IG5ld0hhcmRjYXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgaGFyZENhcCA9IG5ld0hhcmRjYXA7CiAgfQoKICBmdW5jdGlvbiBhZGRNaWxlc3RvbmUodWludCBwZXJpb2QsIHVpbnQgYm9udXMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShwZXJpb2QgPiAwKTsKICAgIG1pbGVzdG9uZXMucHVzaChNaWxlc3RvbmUocGVyaW9kLCBib251cykpOwogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5hZGQocGVyaW9kKTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZU1pbGVzdG9uZSh1aW50OCBudW1iZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShudW1iZXIgPCBtaWxlc3RvbmVzLmxlbmd0aCk7CiAgICBNaWxlc3RvbmUgc3RvcmFnZSBtaWxlc3RvbmUgPSBtaWxlc3RvbmVzW251bWJlcl07CiAgICB0b3RhbFBlcmlvZCA9IHRvdGFsUGVyaW9kLnN1YihtaWxlc3RvbmUucGVyaW9kKTsKCiAgICBkZWxldGUgbWlsZXN0b25lc1tudW1iZXJdOwoKICAgIGZvciAodWludCBpID0gbnVtYmVyOyBpIDwgbWlsZXN0b25lcy5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgbWlsZXN0b25lc1tpXSA9IG1pbGVzdG9uZXNbaSsxXTsKICAgIH0KCiAgICBtaWxlc3RvbmVzLmxlbmd0aC0tOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlTWlsZXN0b25lKHVpbnQ4IG51bWJlciwgdWludCBwZXJpb2QsIHVpbnQgYm9udXMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShudW1iZXIgPCBtaWxlc3RvbmVzLmxlbmd0aCk7CiAgICBNaWxlc3RvbmUgc3RvcmFnZSBtaWxlc3RvbmUgPSBtaWxlc3RvbmVzW251bWJlcl07CgogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5zdWIobWlsZXN0b25lLnBlcmlvZCk7CgogICAgbWlsZXN0b25lLnBlcmlvZCA9IHBlcmlvZDsKICAgIG1pbGVzdG9uZS5ib251cyA9IGJvbnVzOwoKICAgIHRvdGFsUGVyaW9kID0gdG90YWxQZXJpb2QuYWRkKHBlcmlvZCk7CiAgfQoKICBmdW5jdGlvbiBpbnNlcnRNaWxlc3RvbmUodWludDggbnVtYmVyQWZ0ZXIsIHVpbnQgcGVyaW9kLCB1aW50IGJvbnVzKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobnVtYmVyQWZ0ZXIgPCBtaWxlc3RvbmVzLmxlbmd0aCk7CgogICAgdG90YWxQZXJpb2QgPSB0b3RhbFBlcmlvZC5hZGQocGVyaW9kKTsKCiAgICBtaWxlc3RvbmVzLmxlbmd0aCsrOwoKICAgIGZvciAodWludCBpID0gbWlsZXN0b25lcy5sZW5ndGggLSAyOyBpID4gbnVtYmVyQWZ0ZXI7IGktLSkgewogICAgICBtaWxlc3RvbmVzW2kgKyAxXSA9IG1pbGVzdG9uZXNbaV07CiAgICB9CgogICAgbWlsZXN0b25lc1tudW1iZXJBZnRlciArIDFdID0gTWlsZXN0b25lKHBlcmlvZCwgYm9udXMpOwogIH0KCiAgZnVuY3Rpb24gY2xlYXJNaWxlc3RvbmVzKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG1pbGVzdG9uZXMubGVuZ3RoID4gMCk7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaWxlc3RvbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGRlbGV0ZSBtaWxlc3RvbmVzW2ldOwogICAgfQogICAgbWlsZXN0b25lcy5sZW5ndGggLT0gbWlsZXN0b25lcy5sZW5ndGg7CiAgICB0b3RhbFBlcmlvZCA9IDA7CiAgfQoKICBtb2RpZmllciBzYWxlSXNPbigpIHsKICAgIHJlcXVpcmUobWlsZXN0b25lcy5sZW5ndGggPiAwICYmIG5vdyA+PSBzdGFydCAmJiBub3cgPCBsYXN0U2FsZURhdGUoKSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgaXNVbmRlckhhcmRDYXAoKSB7CiAgICByZXF1aXJlKGludmVzdGVkIDw9IGhhcmRDYXApOwogICAgXzsKICB9CgogIGZ1bmN0aW9uIGxhc3RTYWxlRGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIHJlcXVpcmUobWlsZXN0b25lcy5sZW5ndGggPiAwKTsKICAgIHJldHVybiBzdGFydCArIHRvdGFsUGVyaW9kICogMSBkYXlzOwogIH0KCiAgZnVuY3Rpb24gY3VycmVudE1pbGVzdG9uZSgpIHB1YmxpYyBzYWxlSXNPbiBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgIHVpbnQgcHJldmlvdXNEYXRlID0gc3RhcnQ7CiAgICBmb3IodWludCBpPTA7IGkgPCBtaWxlc3RvbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmKG5vdyA+PSBwcmV2aW91c0RhdGUgJiYgbm93IDwgcHJldmlvdXNEYXRlICsgbWlsZXN0b25lc1tpXS5wZXJpb2QgKiAxIGRheXMpIHsKICAgICAgICByZXR1cm4gaTsKICAgICAgfQogICAgICBwcmV2aW91c0RhdGUgPSBwcmV2aW91c0RhdGUuYWRkKG1pbGVzdG9uZXNbaV0ucGVyaW9kICogMSBkYXlzKTsKICAgIH0KICAgIHJldmVydCgpOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9XYWxsZXRQcm92aWRlci5zb2wKCmNvbnRyYWN0IFdhbGxldFByb3ZpZGVyIGlzIE93bmFibGUgewoKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogIGZ1bmN0aW9uIHNldFdhbGxldChhZGRyZXNzIG5ld1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICB3YWxsZXQgPSBuZXdXYWxsZXQ7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL3Rva2VuL0Jhc2ljVG9rZW4uc29sCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy90b2tlbi9TdGFuZGFyZFRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgSW5jcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGRlY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy90b2tlbi9NaW50YWJsZVRva2VuLnNvbAoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9ZYXlQcm90b1Rva2VuLnNvbAoKY29udHJhY3QgWWF5UHJvdG9Ub2tlbiBpcyBNaW50YWJsZVRva2VuIHsKCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIllheVByb3RvIjsKCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiWUZOIjsKCiAgdWludDMyIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICBhZGRyZXNzIHB1YmxpYyBzYWxlQWdlbnQ7CgogIG1vZGlmaWVyIG5vdExvY2tlZCgpIHsKICAgIHJlcXVpcmUobWludGluZ0ZpbmlzaGVkIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBzYWxlQWdlbnQpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lck9yU2FsZUFnZW50KCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IG1zZy5zZW5kZXIgPT0gc2FsZUFnZW50KTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBzZXRTYWxlQWdlbnQoYWRkcmVzcyBuZXdTYWxlQWdlbnQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBzYWxlQWdlbnQpOwogICAgc2FsZUFnZW50ID0gbmV3U2FsZUFnZW50OwogIH0KCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXJPclNhbGVBZ2VudCBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXJPclNhbGVBZ2VudCBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG5vdExvY2tlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIG5vdExvY2tlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL0NvbW1vblNhbGUuc29sCgpjb250cmFjdCBDb21tb25TYWxlIGlzIFN0YWdlZENyb3dkc2FsZSwgV2FsbGV0UHJvdmlkZXIgewoKICBhZGRyZXNzIHB1YmxpYyBkaXJlY3RNaW50QWdlbnQ7CgogIHVpbnQgcHVibGljIHBlcmNlbnRSYXRlID0gMTAwOwoKICB1aW50IHB1YmxpYyBtaW5QcmljZTsKCiAgdWludCBwdWJsaWMgcHJpY2U7CgogIFlheVByb3RvVG9rZW4gcHVibGljIHRva2VuOwoKICBtb2RpZmllciBvbmx5RGlyZWN0TWludEFnZW50T3JPd25lcigpIHsKICAgIHJlcXVpcmUoZGlyZWN0TWludEFnZW50ID09IG1zZy5zZW5kZXIgfHwgb3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgbWluUHJpY2VMaW1pdCgpIHsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IG1pblByaWNlKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBzZXREaXJlY3RNaW50QWdlbnQoYWRkcmVzcyBuZXdEaXJlY3RNaW50QWdlbnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZGlyZWN0TWludEFnZW50ID0gbmV3RGlyZWN0TWludEFnZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0TWluUHJpY2UodWludCBuZXdNaW5QcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBtaW5QcmljZSA9IG5ld01pblByaWNlOwogIH0KCiAgZnVuY3Rpb24gc2V0UHJpY2UodWludCBuZXdQcmljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICBwcmljZSA9IG5ld1ByaWNlOwogIH0KCiAgZnVuY3Rpb24gc2V0VG9rZW4oYWRkcmVzcyBuZXdUb2tlbikgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlbiA9IFlheVByb3RvVG9rZW4obmV3VG9rZW4pOwogIH0KCiAgZnVuY3Rpb24gZGlyZWN0TWludChhZGRyZXNzIHRvLCB1aW50IGludmVzdGVkV2VpKSBwdWJsaWMgb25seURpcmVjdE1pbnRBZ2VudE9yT3duZXIgc2FsZUlzT24gewogICAgbWludFRva2Vucyh0bywgaW52ZXN0ZWRXZWkpOwogIH0KCiAgZnVuY3Rpb24gbWludFRva2VucyhhZGRyZXNzIHRvLCB1aW50IHdlaUludmVzdGVkKSBpbnRlcm5hbCB7CiAgICB1aW50IG1pbGVzdG9uZUluZGV4ID0gY3VycmVudE1pbGVzdG9uZSgpOwogICAgTWlsZXN0b25lIHN0b3JhZ2UgbWlsZXN0b25lID0gbWlsZXN0b25lc1ttaWxlc3RvbmVJbmRleF07CiAgICBpbnZlc3RlZCA9IGludmVzdGVkLmFkZChtc2cudmFsdWUpOwogICAgdWludCB0b2tlbnMgPSB3ZWlJbnZlc3RlZC5tdWwocHJpY2UpLmRpdigxIGV0aGVyKTsKICAgIHVpbnQgYm9udXNUb2tlbnMgPSB0b2tlbnMubXVsKG1pbGVzdG9uZS5ib251cykuZGl2KHBlcmNlbnRSYXRlKTsKICAgIHVpbnQgdG9rZW5zV2l0aEJvbnVzID0gdG9rZW5zLmFkZChib251c1Rva2Vucyk7CiAgICBjcmVhdGVBbmRUcmFuc2ZlclRva2Vucyh0bywgdG9rZW5zV2l0aEJvbnVzKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUFuZFRyYW5zZmVyVG9rZW5zKGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKSBpbnRlcm5hbCBpc1VuZGVySGFyZENhcCB7CiAgICB0b2tlbi5taW50KHRoaXMsIHRva2Vucyk7CiAgICB0b2tlbi50cmFuc2Zlcih0bywgdG9rZW5zKTsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvTWFpbnNhbGUuc29sCgpjb250cmFjdCBNYWluc2FsZSBpcyBDb21tb25TYWxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgbWFya2V0aW5nVG9rZW5zV2FsbGV0OwoKICBhZGRyZXNzIHB1YmxpYyBkZXZlbG9wZXJzVG9rZW5zV2FsbGV0OwoKICBhZGRyZXNzIHB1YmxpYyBhZHZpc29yc1Rva2Vuc1dhbGxldDsKCiAgYWRkcmVzcyBwdWJsaWMgdGVhbVRva2Vuc1dhbGxldDsKCiAgdWludCBwdWJsaWMgbWFya2V0aW5nVG9rZW5zUGVyY2VudDsKCiAgdWludCBwdWJsaWMgZGV2ZWxvcGVyc1Rva2Vuc1BlcmNlbnQ7CgogIHVpbnQgcHVibGljIGFkdmlzb3JzVG9rZW5zUGVyY2VudDsKCiAgdWludCBwdWJsaWMgdGVhbVRva2Vuc1BlcmNlbnQ7CgogIGZ1bmN0aW9uIHNldE1hcmtldGluZ1Rva2Vuc1BlcmNlbnQodWludCBuZXdNYXJrZXRpbmdUb2tlbnNQZXJjZW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgIG1hcmtldGluZ1Rva2Vuc1BlcmNlbnQgPSBuZXdNYXJrZXRpbmdUb2tlbnNQZXJjZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0RGV2ZWxvcGVyc1Rva2Vuc1BlcmNlbnQodWludCBuZXdEZXZlbG9wZXJzVG9rZW5zUGVyY2VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICBkZXZlbG9wZXJzVG9rZW5zUGVyY2VudCA9IG5ld0RldmVsb3BlcnNUb2tlbnNQZXJjZW50OwogIH0KCiAgZnVuY3Rpb24gc2V0QWR2aXNvcnNUb2tlbnNQZXJjZW50KHVpbnQgbmV3QWR2aXNvcnNUb2tlbnNQZXJjZW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgIGFkdmlzb3JzVG9rZW5zUGVyY2VudCA9IG5ld0Fkdmlzb3JzVG9rZW5zUGVyY2VudDsKICB9CgogIGZ1bmN0aW9uIHNldFRlYW1Ub2tlbnNQZXJjZW50KHVpbnQgbmV3VGVhbVRva2Vuc1BlcmNlbnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgdGVhbVRva2Vuc1BlcmNlbnQgPSBuZXdUZWFtVG9rZW5zUGVyY2VudDsKICB9CgogIGZ1bmN0aW9uIHNldE1hcmtldGluZ1Rva2Vuc1dhbGxldChhZGRyZXNzIG5ld01hcmtldGluZ1Rva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBtYXJrZXRpbmdUb2tlbnNXYWxsZXQgPSBuZXdNYXJrZXRpbmdUb2tlbnNXYWxsZXQ7CiAgfQoKICBmdW5jdGlvbiBzZXREZXZlbG9wZXJzVG9rZW5zV2FsbGV0KGFkZHJlc3MgbmV3RGV2ZWxvcGVyc1Rva2Vuc1dhbGxldCkgcHVibGljIG9ubHlPd25lciB7CiAgICBkZXZlbG9wZXJzVG9rZW5zV2FsbGV0ID0gbmV3RGV2ZWxvcGVyc1Rva2Vuc1dhbGxldDsKICB9CgogIGZ1bmN0aW9uIHNldEFkdmlzb3JzVG9rZW5zV2FsbGV0KGFkZHJlc3MgbmV3QWR2aXNvcnNUb2tlbnNXYWxsZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgYWR2aXNvcnNUb2tlbnNXYWxsZXQgPSBuZXdBZHZpc29yc1Rva2Vuc1dhbGxldDsKICB9CgogIGZ1bmN0aW9uIHNldFRlYW1Ub2tlbnNXYWxsZXQoYWRkcmVzcyBuZXdUZWFtVG9rZW5zV2FsbGV0KSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRlYW1Ub2tlbnNXYWxsZXQgPSBuZXdUZWFtVG9rZW5zV2FsbGV0OwogIH0KCiAgZnVuY3Rpb24gZmluaXNoKCkgcHVibGljIG9ubHlPd25lciB7CiAgICB1aW50IGV4dGVuZGVkVG9rZW5zUGVyY2VudCA9IG1hcmtldGluZ1Rva2Vuc1BlcmNlbnQuYWRkKHRlYW1Ub2tlbnNQZXJjZW50KS5hZGQoZGV2ZWxvcGVyc1Rva2Vuc1BlcmNlbnQpLmFkZChhZHZpc29yc1Rva2Vuc1BlcmNlbnQpOwogICAgdWludCBhbGxUb2tlbnMgPSB0b2tlbi50b3RhbFN1cHBseSgpLm11bChwZXJjZW50UmF0ZSkuZGl2KHBlcmNlbnRSYXRlLnN1YihleHRlbmRlZFRva2Vuc1BlcmNlbnQpKTsKICAgIGNyZWF0ZUFuZFRyYW5zZmVyVG9rZW5zKG1hcmtldGluZ1Rva2Vuc1dhbGxldCxhbGxUb2tlbnMubXVsKG1hcmtldGluZ1Rva2Vuc1BlcmNlbnQpLmRpdihwZXJjZW50UmF0ZSkpOwogICAgY3JlYXRlQW5kVHJhbnNmZXJUb2tlbnModGVhbVRva2Vuc1dhbGxldCxhbGxUb2tlbnMubXVsKHRlYW1Ub2tlbnNQZXJjZW50KS5kaXYocGVyY2VudFJhdGUpKTsKICAgIGNyZWF0ZUFuZFRyYW5zZmVyVG9rZW5zKGRldmVsb3BlcnNUb2tlbnNXYWxsZXQsYWxsVG9rZW5zLm11bChkZXZlbG9wZXJzVG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlKSk7CiAgICBjcmVhdGVBbmRUcmFuc2ZlclRva2VucyhhZHZpc29yc1Rva2Vuc1dhbGxldCxhbGxUb2tlbnMubXVsKGFkdmlzb3JzVG9rZW5zUGVyY2VudCkuZGl2KHBlcmNlbnRSYXRlKSk7CiAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgfQoKICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIG1pblByaWNlTGltaXQgewogICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICBtaW50VG9rZW5zKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL1NvZnRjYXBGZWF0dXJlLnNvbAoKY29udHJhY3QgU29mdGNhcEZlYXR1cmUgaXMgV2FsbGV0UHJvdmlkZXIgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKICBib29sIHB1YmxpYyBzb2Z0Y2FwQWNoaWV2ZWQ7CgogIGJvb2wgcHVibGljIHJlZnVuZE9uOwoKICB1aW50IHB1YmxpYyBzb2Z0Y2FwOwoKICB1aW50IHB1YmxpYyBpbnZlc3RlZDsKCiAgZnVuY3Rpb24gc2V0U29mdGNhcCh1aW50IG5ld1NvZnRjYXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgc29mdGNhcCA9IG5ld1NvZnRjYXA7CiAgfQoKICBmdW5jdGlvbiB3aXRoZHJhdygpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShzb2Z0Y2FwQWNoaWV2ZWQpOwogICAgd2FsbGV0LnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVCYWxhbmNlKGFkZHJlc3MgdG8sIHVpbnQgYW1vdW50KSBpbnRlcm5hbCB7CiAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKGFtb3VudCk7CiAgICBpbnZlc3RlZCA9IGludmVzdGVkLmFkZChhbW91bnQpOwogICAgaWYgKCFzb2Z0Y2FwQWNoaWV2ZWQgJiYgaW52ZXN0ZWQgPj0gc29mdGNhcCkgewogICAgICBzb2Z0Y2FwQWNoaWV2ZWQgPSB0cnVlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gdXBkYXRlUmVmdW5kU3RhdGUoKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgIGlmICghc29mdGNhcEFjaGlldmVkKSB7CiAgICAgIHJlZnVuZE9uID0gdHJ1ZTsKICAgIH0KICAgIHJldHVybiByZWZ1bmRPbjsKICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMvUHJlc2FsZS5zb2wKCmNvbnRyYWN0IFByZXNhbGUgaXMgU29mdGNhcEZlYXR1cmUsIENvbW1vblNhbGUgewoKICBNYWluc2FsZSBwdWJsaWMgbWFpbnNhbGU7CgogIGZ1bmN0aW9uIHNldE1haW5zYWxlKGFkZHJlc3MgbmV3TWFpbnNhbGUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgbWFpbnNhbGUgPSBNYWluc2FsZShuZXdNYWluc2FsZSk7CiAgfQoKICBmdW5jdGlvbiBmaW5pc2goKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHRva2VuLnNldFNhbGVBZ2VudChtYWluc2FsZSk7CiAgfQoKICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgdG8sIHVpbnQgd2VpSW52ZXN0ZWQpIGludGVybmFsIHsKICAgIHN1cGVyLm1pbnRUb2tlbnModG8sIHdlaUludmVzdGVkKTsKICAgIHVwZGF0ZUJhbGFuY2UobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICB9CgogIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgbWluUHJpY2VMaW1pdCB7CiAgICBtaW50VG9rZW5zKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiByZWZ1bmQoKSBwdWJsaWMgewogICAgcmVxdWlyZShyZWZ1bmRPbiAmJiBiYWxhbmNlc1ttc2cuc2VuZGVyXSA+IDApOwogICAgdWludCB2YWx1ZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgbXNnLnNlbmRlci50cmFuc2Zlcih2YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgcHVibGljIG9ubHlPd25lciB7CiAgICBpZiAodXBkYXRlUmVmdW5kU3RhdGUoKSkgewogICAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgICB9IGVsc2UgewogICAgICB3aXRoZHJhdygpOwogICAgICB0b2tlbi5zZXRTYWxlQWdlbnQobWFpbnNhbGUpOwogICAgfQogIH0KCn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9Db25maWd1cmF0b3Iuc29sCgpjb250cmFjdCBDb25maWd1cmF0b3IgaXMgT3duYWJsZSB7CgogIFlheVByb3RvVG9rZW4gcHVibGljIHRva2VuOwoKICBQcmVzYWxlIHB1YmxpYyBwcmVzYWxlOwoKICBNYWluc2FsZSBwdWJsaWMgbWFpbnNhbGU7CgogIGZ1bmN0aW9uIGRlcGxveSgpIHB1YmxpYyBvbmx5T3duZXIgewoKICAgIHRva2VuID0gbmV3IFlheVByb3RvVG9rZW4oKTsKICAgIHByZXNhbGUgPSBuZXcgUHJlc2FsZSgpOwogICAgbWFpbnNhbGUgPSBuZXcgTWFpbnNhbGUoKTsKCiAgICBwcmVzYWxlLnNldFRva2VuKHRva2VuKTsKICAgIHByZXNhbGUuc2V0V2FsbGV0KDB4MDBjMjg2YkZiRWZhMmU3RDA2MDI1OTgyMkVEY2VBMkU5MjJhMkI3Qyk7CiAgICBwcmVzYWxlLnNldFN0YXJ0KDE1MTczNTY4MDApOwogICAgcHJlc2FsZS5zZXRNaW5QcmljZSgxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgcHJlc2FsZS5zZXRQcmljZSg3NTAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgIHByZXNhbGUuc2V0U29mdGNhcCgzMDAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgIHByZXNhbGUuc2V0SGFyZGNhcCgxMTI1MDAwMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBwcmVzYWxlLmFkZE1pbGVzdG9uZSg3LDYwKTsKICAgIHByZXNhbGUuYWRkTWlsZXN0b25lKDcsNTApOwogICAgcHJlc2FsZS5hZGRNaWxlc3RvbmUoNyw0MCk7CiAgICBwcmVzYWxlLmFkZE1pbGVzdG9uZSg3LDMwKTsKICAgIHByZXNhbGUuYWRkTWlsZXN0b25lKDcsMjUpOwogICAgcHJlc2FsZS5hZGRNaWxlc3RvbmUoNywyMCk7CiAgICBwcmVzYWxlLnNldE1haW5zYWxlKG1haW5zYWxlKTsKCiAgICBtYWluc2FsZS5zZXRUb2tlbih0b2tlbik7CiAgICBtYWluc2FsZS5zZXRQcmljZSg3NTAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKICAgIG1haW5zYWxlLnNldFdhbGxldCgweDAwOTY5M2Y1MzcyMzMxNTIxOWY2ODE1MjlmRTZlMDVhOTFhMjhDNDEpOwogICAgbWFpbnNhbGUuc2V0RGV2ZWxvcGVyc1Rva2Vuc1dhbGxldCgweDAwOTc4OTVmODk5NTU5RDA2NzAxNmEzZDYxZTM3NDJjMGRhNTMzRUQpOwogICAgbWFpbnNhbGUuc2V0VGVhbVRva2Vuc1dhbGxldCgweDAwMTM3NjY4RkVkYTlkMjc4QTI0MkM2OWFCNTIwNDY2QTM0OEM5NTQpOwogICAgbWFpbnNhbGUuc2V0TWFya2V0aW5nVG9rZW5zV2FsbGV0KDB4MDBBOGE2M2Y0M2NlNjMwZGJkM2I5NkYxZTA0MEE3MzAzNDFiQWE0RCk7CiAgICBtYWluc2FsZS5zZXRBZHZpc29yc1Rva2Vuc1dhbGxldCgweDAwNzY0ODE3ZDE1NDIzNzExNURkQTRGQUE3NkM3YWFCNWRFM2NiMjUpOwogICAgbWFpbnNhbGUuc2V0U3RhcnQoMTUyMzc1MDQwMCk7CiAgICBtYWluc2FsZS5zZXRNaW5QcmljZSgxMDAwMDAwMDAwMDAwMDAwMDApOwogICAgbWFpbnNhbGUuc2V0SGFyZGNhcCg5NTAwMDAwMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBtYWluc2FsZS5zZXREZXZlbG9wZXJzVG9rZW5zUGVyY2VudCgxMCk7CiAgICBtYWluc2FsZS5zZXRUZWFtVG9rZW5zUGVyY2VudCgxMCk7CiAgICBtYWluc2FsZS5zZXRNYXJrZXRpbmdUb2tlbnNQZXJjZW50KDUpOwogICAgbWFpbnNhbGUuc2V0QWR2aXNvcnNUb2tlbnNQZXJjZW50KDEwKTsKICAgIG1haW5zYWxlLmFkZE1pbGVzdG9uZSg3LDE1KTsKICAgIG1haW5zYWxlLmFkZE1pbGVzdG9uZSg3LDEwKTsKICAgIG1haW5zYWxlLmFkZE1pbGVzdG9uZSg3LDcpOwogICAgbWFpbnNhbGUuYWRkTWlsZXN0b25lKDcsNCk7CiAgICBtYWluc2FsZS5hZGRNaWxlc3RvbmUoNywwKTsKCiAgICB0b2tlbi5zZXRTYWxlQWdlbnQocHJlc2FsZSk7CgogICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgcHJlc2FsZS50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgICBtYWluc2FsZS50cmFuc2Zlck93bmVyc2hpcChvd25lcik7CiAgfQoKfQ=='.
	

]
