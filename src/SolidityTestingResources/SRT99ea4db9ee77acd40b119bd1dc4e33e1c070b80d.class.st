Class {
	#name : #SRT99ea4db9ee77acd40b119bd1dc4e33e1c070b80d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99ea4db9ee77acd40b119bd1dc4e33e1c070b80d >> base64 [
	^ ''.
	

]
