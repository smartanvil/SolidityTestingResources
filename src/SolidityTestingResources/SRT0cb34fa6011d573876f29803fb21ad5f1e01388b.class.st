Class {
	#name : #SRT0cb34fa6011d573876f29803fb21ad5f1e01388b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0cb34fa6011d573876f29803fb21ad5f1e01388b >> base64 [
	^ ''.
	

]
