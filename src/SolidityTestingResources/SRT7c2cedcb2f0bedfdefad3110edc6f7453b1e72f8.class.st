Class {
	#name : #SRT7c2cedcb2f0bedfdefad3110edc6f7453b1e72f8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c2cedcb2f0bedfdefad3110edc6f7453b1e72f8 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovLyBGaWxlOiBjb250cmFjdHMvaW5jbHVkZXMvT3duYWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL2luY2x1ZGVzL0NsYWltYWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgQ2xhaW1hYmxlCiAqIEBkZXYgRXh0ZW5zaW9uIGZvciB0aGUgT3duYWJsZSBjb250cmFjdCwgd2hlcmUgdGhlIG93bmVyc2hpcCBuZWVkcyB0byBiZSBjbGFpbWVkLgogKiBUaGlzIGFsbG93cyB0aGUgbmV3IG93bmVyIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIuCiAqLwpjb250cmFjdCBDbGFpbWFibGUgaXMgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgcGVuZGluZ093bmVyOwoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgcGVuZGluZ093bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlQZW5kaW5nT3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byBzZXQgdGhlIHBlbmRpbmdPd25lciBhZGRyZXNzLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICBwZW5kaW5nT3duZXIgPSBuZXdPd25lcjsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBwZW5kaW5nT3duZXIgYWRkcmVzcyB0byBmaW5hbGl6ZSB0aGUgdHJhbnNmZXIuCiAgICovCiAgZnVuY3Rpb24gY2xhaW1Pd25lcnNoaXAoKSBvbmx5UGVuZGluZ093bmVyIHB1YmxpYyB7CiAgICAvLyBlbWl0IE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBwZW5kaW5nT3duZXIpOwogICAgb3duZXIgPSBwZW5kaW5nT3duZXI7CiAgICBwZW5kaW5nT3duZXIgPSBhZGRyZXNzKDApOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL2luY2x1ZGVzL1BhdXNhYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvQ2VsZWJzUGFydHlHYXRlLnNvbAoKY29udHJhY3QgQ2VsZWJzUGFydHlHYXRlIGlzIENsYWltYWJsZSwgUGF1c2FibGUgewogIGFkZHJlc3MgcHVibGljIGNmb0FkZHJlc3M7CiAgCiAgZnVuY3Rpb24gQ2VsZWJzUGFydHlHYXRlKCkgcHVibGljIHsKICAgIGNmb0FkZHJlc3MgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seUNGTygpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZm9BZGRyZXNzKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBzZXRDRk8oYWRkcmVzcyBfbmV3Q0ZPKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgcmVxdWlyZShfbmV3Q0ZPICE9IGFkZHJlc3MoMCkpOwogICAgY2ZvQWRkcmVzcyA9IF9uZXdDRk87CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvaW5jbHVkZXMvU2FmZU1hdGguc29sCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL0NlbGVic1BhcnR5LnNvbAoKY29udHJhY3QgQ2VsZWJzUGFydHkgaXMgQ2VsZWJzUGFydHlHYXRlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGV2ZW50IEFnZW50SGlyZWQodWludDI1NiBpZGVudGlmaWVyLCBhZGRyZXNzIHBsYXllciwgYm9vbCBxdWV1ZWQpOwogICAgZXZlbnQgQmlydGgodWludDI1NiBpZGVudGlmaWVyLCBzdHJpbmcgbmFtZSwgYWRkcmVzcyBvd25lciwgYm9vbCBxdWV1ZWQpOwogICAgZXZlbnQgQ2F0ZWdvcnlDcmVhdGVkKHVpbnQyNTYgaW5kZXhlZCBpZGVudGlmaWVyLCBzdHJpbmcgbmFtZSk7CiAgICBldmVudCBDZWxlYnJpdHlCb3VnaHQodWludDI1NiBpbmRleGVkIGlkZW50aWZpZXIsIGFkZHJlc3MgaW5kZXhlZCBvbGRPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyLCB1aW50MjU2IHByaWNlKTsKICAgIGV2ZW50IENlbGVicml0eVJlbGVhc2VkKHVpbnQyNTYgaW5kZXhlZCBpZGVudGlmaWVyLCBhZGRyZXNzIHBsYXllcik7CiAgICBldmVudCBGYW1lQWNxdWlyZWQodWludDI1NiBpbmRleGVkIGlkZW50aWZpZXIsIGFkZHJlc3MgcGxheWVyLCB1aW50MjU2IGZhbWUpOwogICAgZXZlbnQgUHJpY2VVcGRhdGVkKHVpbnQyNTYgaW5kZXhlZCBpZGVudGlmaWVyLCB1aW50MjU2IHByaWNlKTsKICAgIGV2ZW50IFByaXplQXdhcmRlZChhZGRyZXNzIHBsYXllciwgdWludDI1NiBhbW91bnQsIHN0cmluZyByZWFzb24pOwogICAgZXZlbnQgVXNlcm5hbWVVcGRhdGVkKGFkZHJlc3MgcGxheWVyLCBzdHJpbmcgdXNlcm5hbWUpOwoKICAgIHN0cnVjdCBDYXRlZ29yeSB7CiAgICAgICAgdWludDI1NiBpZGVudGlmaWVyOwogICAgICAgIHN0cmluZyBuYW1lOwogICAgfQoKICAgIHN0cnVjdCBDZWxlYnJpdHkgewogICAgICAgIHVpbnQyNTYgaWRlbnRpZmllcjsKICAgICAgICB1aW50MjU2W10gY2F0ZWdvcmllczsKICAgICAgICBzdHJpbmcgbmFtZTsKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgYm9vbCBpc1F1ZXVlZDsKICAgICAgICB1aW50MjU2IGxhc3RRdWV1ZUJsb2NrOwogICAgICAgIGFkZHJlc3MgYWdlbnQ7CiAgICAgICAgdWludDI1NiBhZ2VudEF3ZTsKICAgICAgICB1aW50MjU2IGZhbWVQZXJCbG9jazsKICAgICAgICB1aW50MjU2IGxhc3RGYW1lQmxvY2s7CiAgICB9CgogICAgbWFwcGluZyh1aW50MjU2ID0+IENhdGVnb3J5KSBwdWJsaWMgY2F0ZWdvcmllczsKICAgIG1hcHBpbmcodWludDI1NiA9PiBDZWxlYnJpdHkpIHB1YmxpYyBjZWxlYnJpdGllczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZmFtZUJhbGFuY2U7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gc3RyaW5nKSBwdWJsaWMgdXNlcm5hbWVzOwogICAgCiAgICB1aW50MjU2IHB1YmxpYyBjYXRlZ29yeUNvdW50OwogICAgdWludDI1NiBwdWJsaWMgY2lyY3VsYXRpbmdGYW1lOwogICAgdWludDI1NiBwdWJsaWMgY2VsZWJyaXR5Q291bnQ7CiAgICB1aW50MjU2IHB1YmxpYyBkZXZCYWxhbmNlOwogICAgdWludDI1NiBwdWJsaWMgcHJpemVQb29sOwoKICAgIHVpbnQyNTYgcHVibGljIG1pblJlcXVpcmVkQmxvY2tRdWV1ZVRpbWU7CgogICAgZnVuY3Rpb24gQ2VsZWJzUGFydHkoKSBwdWJsaWMgewogICAgICAgIF9pbml0aWFsaXplR2FtZSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFjcXVpcmVGYW1lKHVpbnQyNTYgX2lkZW50aWZpZXIpIGV4dGVybmFsIHsKICAgICAgICBDZWxlYnJpdHkgc3RvcmFnZSBjZWxlYiA9IGNlbGVicml0aWVzW19pZGVudGlmaWVyXTsKICAgICAgICBhZGRyZXNzIHBsYXllciA9IG1zZy5zZW5kZXI7CiAgICAgICAgcmVxdWlyZShjZWxlYi5vd25lciA9PSBwbGF5ZXIpOwogICAgICAgIHVpbnQyNTYgYWNxdWlyZWRGYW1lID0gU2FmZU1hdGgubXVsKChibG9jay5udW1iZXIgLSBjZWxlYi5sYXN0RmFtZUJsb2NrKSwgY2VsZWIuZmFtZVBlckJsb2NrKTsKICAgICAgICBmYW1lQmFsYW5jZVtwbGF5ZXJdID0gU2FmZU1hdGguYWRkKGZhbWVCYWxhbmNlW3BsYXllcl0sIGFjcXVpcmVkRmFtZSk7CiAgICAgICAgY2VsZWIubGFzdEZhbWVCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICAvLyBpbmNyZWFzZSB0aGUgc3VwcGx5IG9mIHRoZSBmYW1lCiAgICAgICAgY2lyY3VsYXRpbmdGYW1lID0gU2FmZU1hdGguYWRkKGNpcmN1bGF0aW5nRmFtZSwgYWNxdWlyZWRGYW1lKTsKICAgICAgICBGYW1lQWNxdWlyZWQoX2lkZW50aWZpZXIsIHBsYXllciwgYWNxdWlyZWRGYW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBiZWNvbWVBZ2VudCh1aW50MjU2IF9pZGVudGlmaWVyLCB1aW50MjU2IF9hZ2VudEF3ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIENlbGVicml0eSBzdG9yYWdlIGNlbGViID0gY2VsZWJyaXRpZXNbX2lkZW50aWZpZXJdOwogICAgICAgIGFkZHJlc3MgbmV3QWdlbnQgPSBtc2cuc2VuZGVyOwogICAgICAgIGFkZHJlc3Mgb2xkQWdlbnQgPSBjZWxlYi5hZ2VudDsKICAgICAgICB1aW50MjU2IGN1cnJlbnRBZ2VudEF3ZSA9IGNlbGViLmFnZW50QXdlOwogICAgICAgIC8vIGVuc3VyZSBjdXJyZW50IGFnZW50IGlzIG5vdCB0aGUgY3VycmVudCBwbGF5ZXIKICAgICAgICByZXF1aXJlKG9sZEFnZW50ICE9IG5ld0FnZW50KTsKICAgICAgICAvLyBlbnN1cmUgdGhlIHBsYXllciBjYW4gYWZmb3JkIHRvIGJlY29tZSB0aGUgYWdlbnQKICAgICAgICByZXF1aXJlKGZhbWVCYWxhbmNlW25ld0FnZW50XSA+PSBfYWdlbnRBd2UpOwogICAgICAgIC8vIGVuc3VyZSB0aGUgc2VudCBmYW1lIGlzIG1vcmUgdGhhbiB0aGUgY3VycmVudCBhZ2VudCBzZW50CiAgICAgICAgcmVxdWlyZShfYWdlbnRBd2UgPiBjZWxlYi5hZ2VudEF3ZSk7CiAgICAgICAgLy8gaWYgd2UgYXJlIHByZS1kcm9wLCByZXNldCB0aW1lciBhbmQgZ2l2ZSBzb21lIGZhbWUgYmFjayB0byBwcmV2aW91cyBiaWRkZXIKICAgICAgICBpZiAoY2VsZWIuaXNRdWV1ZWQpIHsKICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHF1ZXVlIGJsb2NrIHRpbWVyCiAgICAgICAgICAgIGNlbGViLmxhc3RRdWV1ZUJsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgICAgICAvLyBnaXZlIHRoZSBvbGQgYWdlbnQgNTAlIG9mIHRoZWlyIGZhbWUgYmFjayAodGhpcyBpcyBhIGZhbWUgYnVybikKICAgICAgICAgICAgaWYob2xkQWdlbnQgIT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICAgICAgdWludDI1NiBoYWxmT3JpZ2luYWxGYW1lID0gU2FmZU1hdGguZGl2KGN1cnJlbnRBZ2VudEF3ZSwgMik7CiAgICAgICAgICAgICAgICBjaXJjdWxhdGluZ0ZhbWUgPSBTYWZlTWF0aC5hZGQoY2lyY3VsYXRpbmdGYW1lLCBoYWxmT3JpZ2luYWxGYW1lKTsKICAgICAgICAgICAgICAgIGZhbWVCYWxhbmNlW29sZEFnZW50XSA9IFNhZmVNYXRoLmFkZChmYW1lQmFsYW5jZVtvbGRBZ2VudF0sIGhhbGZPcmlnaW5hbEZhbWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHNldCB0aGUgY2VsZWJyaXR5J3MgYWdlbnQgdG8gdGhlIGN1cnJlbnQgcGxheWVyCiAgICAgICAgY2VsZWIuYWdlbnQgPSBuZXdBZ2VudDsKICAgICAgICAvLyBzZXQgdGhlIG5ldyBtaW4gcmVxdWlyZWQgYmlkCiAgICAgICAgY2VsZWIuYWdlbnRBd2UgPSBfYWdlbnRBd2U7CiAgICAgICAgLy8gZGVkdWN0IHRoZSBzZW50IGZhbWUgYW1vdW50IGZyb20gdGhlIGN1cnJlbnQgcGxheWVyJ3MgYmFsYW5jZQogICAgICAgIGNpcmN1bGF0aW5nRmFtZSA9IFNhZmVNYXRoLnN1YihjaXJjdWxhdGluZ0ZhbWUsIF9hZ2VudEF3ZSk7CiAgICAgICAgZmFtZUJhbGFuY2VbbmV3QWdlbnRdID0gU2FmZU1hdGguc3ViKGZhbWVCYWxhbmNlW25ld0FnZW50XSwgX2FnZW50QXdlKTsKICAgICAgICBBZ2VudEhpcmVkKF9pZGVudGlmaWVyLCBuZXdBZ2VudCwgY2VsZWIuaXNRdWV1ZWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eUNlbGVicml0eSh1aW50MjU2IF9pZGVudGlmaWVyKSBwdWJsaWMgcGF5YWJsZSB3aGVuTm90UGF1c2VkIHsKICAgICAgICBDZWxlYnJpdHkgc3RvcmFnZSBjZWxlYiA9IGNlbGVicml0aWVzW19pZGVudGlmaWVyXTsKICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgY2VsZWJyaXR5IGlzIG9uIHRoZSBtYXJrZXQgYW5kIG5vdCBxdWV1ZWQKICAgICAgICByZXF1aXJlKCFjZWxlYi5pc1F1ZXVlZCk7CiAgICAgICAgYWRkcmVzcyBvbGRPd25lciA9IGNlbGViLm93bmVyOwogICAgICAgIHVpbnQyNTYgc2FsZVByaWNlID0gY2VsZWIucHJpY2U7CiAgICAgICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgLy8gZW5zdXJlIHRoZSBjdXJyZW50IHBsYXllciBpcyBub3QgdGhlIGN1cnJlbnQgb3duZXIKICAgICAgICByZXF1aXJlKG9sZE93bmVyICE9IG5ld093bmVyKTsKICAgICAgICAvLyBlbnN1cmUgdGhlIGN1cnJlbnQgcGxheWVyIGNhbiBhY3R1YWxseSBhZmZvcmQgdG8gYnV5IHRoZSBjZWxlYnJpdHkKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBzYWxlUHJpY2UpOwogICAgICAgIGFkZHJlc3MgYWdlbnQgPSBjZWxlYi5hZ2VudDsKICAgICAgICAvLyBkZXRlcm1pbmUgaG93IG11Y2ggZmFtZSB0aGUgY2VsZWJyaXR5IGhhcyBnZW5lcmF0ZWQKICAgICAgICB1aW50MjU2IGdlbmVyYXRlZEZhbWUgPSB1aW50MjU2KFNhZmVNYXRoLm11bCgoYmxvY2subnVtYmVyIC0gY2VsZWIubGFzdEZhbWVCbG9jayksIGNlbGViLmZhbWVQZXJCbG9jaykpOwogICAgICAgIC8vIDkxJSBvZiB0aGUgc2FsZSB3aWxsIGdvIHRoZSBwcmV2aW91cyBvd25lcgogICAgICAgIHVpbnQyNTYgcGF5bWVudCA9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzYWxlUHJpY2UsIDkxKSwgMTAwKSk7CiAgICAgICAgLy8gNCUgb2YgdGhlIHNhbGUgd2lsbCBnbyB0byB0aGUgY2VsZWJyaXR5J3MgYWdlbnQKICAgICAgICB1aW50MjU2IGFnZW50RmVlID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNhbGVQcmljZSwgNCksIDEwMCkpOwogICAgICAgIC8vIDMlIG9mIHRoZSBzYWxlIHdpbGwgZ28gdG8gdGhlIGRldmVsb3BlciBvZiB0aGUgZ2FtZQogICAgICAgIHVpbnQyNTYgZGV2RmVlID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNhbGVQcmljZSwgMyksIDEwMCkpOwogICAgICAgIC8vIDIlIG9mIHRoZSBzYWxlIHdpbGwgZ28gdG8gdGhlIHByaXplIHBvb2wKICAgICAgICB1aW50MjU2IHByaXplRmVlID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNhbGVQcmljZSwgMiksIDEwMCkpOwogICAgICAgIC8vIGNhbGN1bGF0ZSBhbnkgZXhjZXNzIHdlaSB0aGF0IHNob3VsZCBiZSByZWZ1bmRlZAogICAgICAgIHVpbnQyNTYgcHVyY2hhc2VFeGNlc3MgPSBTYWZlTWF0aC5zdWIobXNnLnZhbHVlLCBzYWxlUHJpY2UpOwogICAgICAgIGlmIChvbGRPd25lciAhPSBhZGRyZXNzKHRoaXMpKSB7CiAgICAgICAgICAgIC8vIG9ubHkgdHJhbnNmZXIgdGhlIGZ1bmRzIGlmIHRoZSBjb250cmFjdCBkb2Vzbid0IG93biB0aGUgY2VsZWJyaXR5IChubyBwcmUtbWluZSkKICAgICAgICAgICAgb2xkT3duZXIudHJhbnNmZXIocGF5bWVudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgZmlyc3Qgc2FsZSwgbWFpbiBwcm9jZWVkcyBnbyB0byB0aGUgcHJpemUgcG9vbAogICAgICAgICAgICBwcml6ZVBvb2wgPSBTYWZlTWF0aC5hZGQocHJpemVQb29sLCBwYXltZW50KTsKICAgICAgICB9CiAgICAgICAgaWYgKGFnZW50ICE9IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgLy8gc2VuZCB0aGUgYWdlbnQgdGhlaXIgY3V0IG9mIHRoZSBzYWxlCiAgICAgICAgICAgIGFnZW50LnRyYW5zZmVyKGFnZW50RmVlKTsKICAgICAgICB9CiAgICAgICAgLy8gbmV3IG93bmVyIGdldHMgaGFsZiBvZiB0aGUgdW5hY3F1aXJlZCwgZ2VuZXJhdGVkIGZhbWUgb24gdGhlIGNlbGVicml0eQogICAgICAgIHVpbnQyNTYgc3BvaWxzID0gU2FmZU1hdGguZGl2KGdlbmVyYXRlZEZhbWUsIDIpOwogICAgICAgIGNpcmN1bGF0aW5nRmFtZSA9IFNhZmVNYXRoLmFkZChjaXJjdWxhdGluZ0ZhbWUsIHNwb2lscyk7CiAgICAgICAgZmFtZUJhbGFuY2VbbmV3T3duZXJdID0gU2FmZU1hdGguYWRkKGZhbWVCYWxhbmNlW25ld093bmVyXSwgc3BvaWxzKTsKICAgICAgICAvLyBkb24ndCBzZW5kIHRoZSBkZXYgYW55dGhpbmcsIGJ1dCBtYWtlIGEgbm90ZSBvZiBpdAogICAgICAgIGRldkJhbGFuY2UgPSBTYWZlTWF0aC5hZGQoZGV2QmFsYW5jZSwgZGV2RmVlKTsKICAgICAgICAvLyBpbmNyZWFzZSB0aGUgcHJpemUgcG9vbCBiYWxhbmNlCiAgICAgICAgcHJpemVQb29sID0gU2FmZU1hdGguYWRkKHByaXplUG9vbCwgcHJpemVGZWUpOwogICAgICAgIC8vIHNldCB0aGUgbmV3IG93bmVyIG9mIHRoZSBjZWxlYnJpdHkKICAgICAgICBjZWxlYi5vd25lciA9IG5ld093bmVyOwogICAgICAgIC8vIHNldCB0aGUgbmV3IHByaWNlIG9mIHRoZSBjZWxlYnJpdHkKICAgICAgICBjZWxlYi5wcmljZSA9IF9uZXh0UHJpY2Uoc2FsZVByaWNlKTsKICAgICAgICAvLyBkZXN0cm95IGFsbCB1bmFjcXVpcmVkIGZhbWUgYnkgcmVzZXR0aW5nIHRoZSBibG9jayBudW1iZXIKICAgICAgICBjZWxlYi5sYXN0RmFtZUJsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgIC8vIHRoZSBmYW1lIGFjcXVpcmVkIHBlciBibG9jayBpbmNyZWFzZXMgYnkgMSBldmVyeSB0aW1lIHRoZSBjZWxlYnJpdHkgaXMgcHVyY2hhc2VkCiAgICAgICAgLy8gdGhpcyBpcyBjYXBwZWQgYXQgMTAwIGZwYgogICAgICAgIGlmKGNlbGViLmZhbWVQZXJCbG9jayA8IDEwMCkgewogICAgICAgICAgICBjZWxlYi5mYW1lUGVyQmxvY2sgPSBTYWZlTWF0aC5hZGQoY2VsZWIuZmFtZVBlckJsb2NrLCAxKTsKICAgICAgICB9CiAgICAgICAgLy8gbGV0IHRoZSB3b3JsZCBrbm93IHRoZSBjZWxlYnJpdHkgaGFzIGJlZW4gcHVyY2hhc2VkCiAgICAgICAgQ2VsZWJyaXR5Qm91Z2h0KF9pZGVudGlmaWVyLCBvbGRPd25lciwgbmV3T3duZXIsIHNhbGVQcmljZSk7CiAgICAgICAgLy8gc2VuZCB0aGUgbmV3IG93bmVyIGFueSBleGNlc3Mgd2VpCiAgICAgICAgbmV3T3duZXIudHJhbnNmZXIocHVyY2hhc2VFeGNlc3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZUNhdGVnb3J5KHN0cmluZyBfbmFtZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICBfbWludENhdGVnb3J5KF9uYW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVDZWxlYnJpdHkoc3RyaW5nIF9uYW1lLCBhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfYWdlbnQsIHVpbnQyNTYgX2FnZW50QXdlLCB1aW50MjU2IF9wcmljZSwgYm9vbCBfcXVldWVkLCB1aW50MjU2W10gX2NhdGVnb3JpZXMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoY2VsZWJyaXRpZXNbY2VsZWJyaXR5Q291bnRdLnByaWNlID09IDApOwogICAgICAgIGFkZHJlc3MgbmV3T3duZXIgPSBfb3duZXI7CiAgICAgICAgYWRkcmVzcyBuZXdBZ2VudCA9IF9hZ2VudDsKICAgICAgICBpZiAobmV3T3duZXIgPT0gMHgwKSB7CiAgICAgICAgICAgIG5ld093bmVyID0gYWRkcmVzcyh0aGlzKTsKICAgICAgICB9CiAgICAgICAgaWYgKG5ld0FnZW50ID09IDB4MCkgewogICAgICAgICAgICBuZXdBZ2VudCA9IGFkZHJlc3ModGhpcyk7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgbmV3SWRlbnRpZmllciA9IGNlbGVicml0eUNvdW50OwogICAgICAgIENlbGVicml0eSBtZW1vcnkgY2VsZWIgPSBDZWxlYnJpdHkoewogICAgICAgICAgICBpZGVudGlmaWVyOiBuZXdJZGVudGlmaWVyLAogICAgICAgICAgICBvd25lcjogbmV3T3duZXIsCiAgICAgICAgICAgIHByaWNlOiBfcHJpY2UsCiAgICAgICAgICAgIG5hbWU6IF9uYW1lLAogICAgICAgICAgICBmYW1lUGVyQmxvY2s6IDAsCiAgICAgICAgICAgIGxhc3RRdWV1ZUJsb2NrOiBibG9jay5udW1iZXIsCiAgICAgICAgICAgIGxhc3RGYW1lQmxvY2s6IGJsb2NrLm51bWJlciwKICAgICAgICAgICAgYWdlbnQ6IG5ld0FnZW50LAogICAgICAgICAgICBhZ2VudEF3ZTogX2FnZW50QXdlLAogICAgICAgICAgICBpc1F1ZXVlZDogX3F1ZXVlZCwKICAgICAgICAgICAgY2F0ZWdvcmllczogX2NhdGVnb3JpZXMKICAgICAgICB9KTsKICAgICAgICBjZWxlYnJpdGllc1tuZXdJZGVudGlmaWVyXSA9IGNlbGViOwogICAgICAgIGNlbGVicml0eUNvdW50ID0gU2FmZU1hdGguYWRkKGNlbGVicml0eUNvdW50LCAxKTsKICAgICAgICBCaXJ0aChuZXdJZGVudGlmaWVyLCBfbmFtZSwgX293bmVyLCBfcXVldWVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0Q2VsZWJyaXR5KHVpbnQyNTYgX2lkZW50aWZpZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucwogICAgKHVpbnQyNTYgaWQsIHN0cmluZyBuYW1lLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IG5leHRQcmljZSwgYWRkcmVzcyBhZ2VudCwgdWludDI1NiBhZ2VudEF3ZSwgYWRkcmVzcyBvd25lciwgdWludDI1NiBmYW1lLCB1aW50MjU2IGxhc3RGYW1lQmxvY2ssIHVpbnQyNTZbXSBjYXRzLCBib29sIHF1ZXVlZCwgdWludDI1NiBsYXN0UXVldWVCbG9jaykKICAgIHsKICAgICAgICBDZWxlYnJpdHkgc3RvcmFnZSBjZWxlYiA9IGNlbGVicml0aWVzW19pZGVudGlmaWVyXTsKICAgICAgICBpZCA9IGNlbGViLmlkZW50aWZpZXI7CiAgICAgICAgbmFtZSA9IGNlbGViLm5hbWU7CiAgICAgICAgb3duZXIgPSBjZWxlYi5vd25lcjsKICAgICAgICBhZ2VudCA9IGNlbGViLmFnZW50OwogICAgICAgIHByaWNlID0gY2VsZWIucHJpY2U7CiAgICAgICAgZmFtZSA9IGNlbGViLmZhbWVQZXJCbG9jazsKICAgICAgICBsYXN0RmFtZUJsb2NrID0gY2VsZWIubGFzdEZhbWVCbG9jazsKICAgICAgICBuZXh0UHJpY2UgPSBfbmV4dFByaWNlKHByaWNlKTsKICAgICAgICBjYXRzID0gY2VsZWIuY2F0ZWdvcmllczsKICAgICAgICBhZ2VudEF3ZSA9IGNlbGViLmFnZW50QXdlOwogICAgICAgIHF1ZXVlZCA9IGNlbGViLmlzUXVldWVkOwogICAgICAgIGxhc3RRdWV1ZUJsb2NrID0gY2VsZWIubGFzdFF1ZXVlQmxvY2s7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RmFtZUJhbGFuY2UoYWRkcmVzcyBfcGxheWVyKSBleHRlcm5hbCB2aWV3IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBmYW1lQmFsYW5jZVtfcGxheWVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRVc2VybmFtZShhZGRyZXNzIF9wbGF5ZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyhzdHJpbmcpIHsKICAgICAgICByZXR1cm4gdXNlcm5hbWVzW19wbGF5ZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbGVhc2VDZWxlYnJpdHkodWludDI1NiBfaWRlbnRpZmllcikgcHVibGljIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIENlbGVicml0eSBzdG9yYWdlIGNlbGViID0gY2VsZWJyaXRpZXNbX2lkZW50aWZpZXJdOwogICAgICAgIGFkZHJlc3MgcGxheWVyID0gbXNnLnNlbmRlcjsKICAgICAgICAvLyBlbnN1cmUgdGhhdCBlbm91Z2ggYmxvY2tzIGhhdmUgYmVlbiBtaW5lZCAobm8gb25lIGhhcyBiaWQgd2l0aGluIHRoaXMgdGltZSBwZXJpb2QpCiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgLSBjZWxlYi5sYXN0UXVldWVCbG9jayA+PSBtaW5SZXF1aXJlZEJsb2NrUXVldWVUaW1lKTsKICAgICAgICAvLyBlbnN1cmUgdGhlIGNlbGVicml0eSBpc24ndCBhbHJlYWR5IHJlbGVhc2VkIQogICAgICAgIHJlcXVpcmUoY2VsZWIuaXNRdWV1ZWQpOwogICAgICAgIC8vIGVuc3VyZSBjdXJyZW50IGFnZW50IGlzIHRoZSBjdXJyZW50IHBsYXllcgogICAgICAgIHJlcXVpcmUoY2VsZWIuYWdlbnQgPT0gcGxheWVyKTsKICAgICAgICAvLyBjZWxlYnJpdHkgaXMgbm8gbG9uZ2VyIHF1ZXVlZCBhbmQgY2FuIGJlIGRpc3BsYXllZCBvbiB0aGUgbWFya2V0CiAgICAgICAgY2VsZWIuaXNRdWV1ZWQgPSBmYWxzZTsKICAgICAgICBDZWxlYnJpdHlSZWxlYXNlZChfaWRlbnRpZmllciwgcGxheWVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDZWxlYnJpdHlQcmljZSh1aW50MjU2IF9pZGVudGlmaWVyLCB1aW50MjU2IF9wcmljZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIENlbGVicml0eSBzdG9yYWdlIGNlbGViID0gY2VsZWJyaXRpZXNbX2lkZW50aWZpZXJdOwogICAgICAgIC8vIGVuc3VyZSB0aGUgY3VycmVudCBwbGF5ZXIgaXMgdGhlIG93bmVyIG9mIHRoZSBjZWxlYnJpdHkKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY2VsZWIub3duZXIpOwogICAgICAgIC8vIHRoZSBwbGF5ZXIgY2FuIG9ubHkgc2V0IGEgcHJpY2UgdGhhdCBpcyBsb3dlciB0aGFuIHRoZSBjdXJyZW50IGFza2luZyBwcmljZQogICAgICAgIHJlcXVpcmUoX3ByaWNlIDwgY2VsZWIucHJpY2UpOwogICAgICAgIC8vIHNldCB0aGUgbmV3IHByaWNlIAogICAgICAgIGNlbGViLnByaWNlID0gX3ByaWNlOwogICAgICAgIFByaWNlVXBkYXRlZChfaWRlbnRpZmllciwgX3ByaWNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRSZXF1aXJlZEJsb2NrUXVldWVUaW1lKHVpbnQyNTYgX2Jsb2NrcykgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICBtaW5SZXF1aXJlZEJsb2NrUXVldWVUaW1lID0gX2Jsb2NrczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRVc2VybmFtZShhZGRyZXNzIF9wbGF5ZXIsIHN0cmluZyBfdXNlcm5hbWUpIHB1YmxpYyB7CiAgICAgICAgLy8gZW5zdXJlIHRoZSBwbGF5ZXIgdG8gYmUgY2hhbmdlZCBpcyB0aGUgY3VycmVudCBwbGF5ZXIKICAgICAgICByZXF1aXJlKF9wbGF5ZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgLy8gc2V0IHRoZSB1c2VybmFtZQogICAgICAgIHVzZXJuYW1lc1tfcGxheWVyXSA9IF91c2VybmFtZTsKICAgICAgICBVc2VybmFtZVVwZGF0ZWQoX3BsYXllciwgX3VzZXJuYW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZW5kUHJpemUoYWRkcmVzcyBfcGxheWVyLCB1aW50MjU2IF9hbW91bnQsIHN0cmluZyBfcmVhc29uKSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgICAgIHVpbnQyNTYgbmV3UHJpemVQb29sQW1vdW50ID0gcHJpemVQb29sIC0gX2Ftb3VudDsKICAgICAgICByZXF1aXJlKHByaXplUG9vbCA+PSBfYW1vdW50KTsKICAgICAgICByZXF1aXJlKG5ld1ByaXplUG9vbEFtb3VudCA+PSAwKTsKICAgICAgICBwcml6ZVBvb2wgPSBuZXdQcml6ZVBvb2xBbW91bnQ7CiAgICAgICAgX3BsYXllci50cmFuc2ZlcihfYW1vdW50KTsKICAgICAgICBQcml6ZUF3YXJkZWQoX3BsYXllciwgX2Ftb3VudCwgX3JlYXNvbik7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdEZXZCYWxhbmNlKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGRldkJhbGFuY2UgPiAwKTsKICAgICAgICB1aW50MjU2IHdpdGhkcmF3QW1vdW50ID0gZGV2QmFsYW5jZTsKICAgICAgICBkZXZCYWxhbmNlID0gMDsKICAgICAgICBvd25lci50cmFuc2Zlcih3aXRoZHJhd0Ftb3VudCk7CiAgICB9CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgaW50ZXJuYWwgZnVuY3MKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICBmdW5jdGlvbiBfbmV4dFByaWNlKHVpbnQyNTYgY3VycmVudFByaWNlKSBpbnRlcm5hbCBwdXJlIHJldHVybnModWludDI1NikgewogICAgICAgIGlmIChjdXJyZW50UHJpY2UgPCAuMSBldGhlcikgewogICAgICAgICAgICByZXR1cm4gY3VycmVudFByaWNlLm11bCgyMDApLmRpdigxMDApOwogICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFByaWNlIDwgMSBldGhlcikgewogICAgICAgICAgICByZXR1cm4gY3VycmVudFByaWNlLm11bCgxNTApLmRpdigxMDApOwogICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFByaWNlIDwgMTAgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQcmljZS5tdWwoMTMwKS5kaXYoMTAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gY3VycmVudFByaWNlLm11bCgxMjApLmRpdigxMDApOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBfbWludENhdGVnb3J5KHN0cmluZyBfbmFtZSkgaW50ZXJuYWwgewogICAgICAgIHVpbnQyNTYgbmV3SWRlbnRpZmllciA9IGNhdGVnb3J5Q291bnQ7CiAgICAgICAgY2F0ZWdvcmllc1tuZXdJZGVudGlmaWVyXSA9IENhdGVnb3J5KG5ld0lkZW50aWZpZXIsIF9uYW1lKTsKICAgICAgICBDYXRlZ29yeUNyZWF0ZWQobmV3SWRlbnRpZmllciwgX25hbWUpOwogICAgICAgIGNhdGVnb3J5Q291bnQgPSBTYWZlTWF0aC5hZGQoY2F0ZWdvcnlDb3VudCwgMSk7CiAgICB9CgogICAgZnVuY3Rpb24gX2luaXRpYWxpemVHYW1lKCkgaW50ZXJuYWwgewogICAgICAgIGNhdGVnb3J5Q291bnQgPSAwOwogICAgICAgIGNlbGVicml0eUNvdW50ID0gMDsKICAgICAgICBtaW5SZXF1aXJlZEJsb2NrUXVldWVUaW1lID0gMTAwMDsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIF9taW50Q2F0ZWdvcnkoImJ1c2luZXNzIik7CiAgICAgICAgX21pbnRDYXRlZ29yeSgiZmlsbS90diIpOwogICAgICAgIF9taW50Q2F0ZWdvcnkoIm11c2ljIik7CiAgICAgICAgX21pbnRDYXRlZ29yeSgicGVyc29uYWxpdHkiKTsKICAgICAgICBfbWludENhdGVnb3J5KCJ0ZWNoIik7CiAgICB9Cn0='.
	

]
