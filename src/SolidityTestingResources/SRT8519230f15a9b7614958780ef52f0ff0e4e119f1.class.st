Class {
	#name : #SRT8519230f15a9b7614958780ef52f0ff0e4e119f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8519230f15a9b7614958780ef52f0ff0e4e119f1 >> base64 [
	^ ''.
	

]
