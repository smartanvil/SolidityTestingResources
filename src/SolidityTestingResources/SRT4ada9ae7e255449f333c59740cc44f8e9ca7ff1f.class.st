Class {
	#name : #SRT4ada9ae7e255449f333c59740cc44f8e9ca7ff1f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ada9ae7e255449f333c59740cc44f8e9ca7ff1f >> base64 [
	^ ''.
	

]
