Class {
	#name : #SRT70c4949d483166abefb2b4b2be78e338cd8b2c40,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT70c4949d483166abefb2b4b2be78e338cd8b2c40 >> base64 [
	^ ''.
	

]
