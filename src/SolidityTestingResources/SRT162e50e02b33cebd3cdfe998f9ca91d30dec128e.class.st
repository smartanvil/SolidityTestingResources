Class {
	#name : #SRT162e50e02b33cebd3cdfe998f9ca91d30dec128e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT162e50e02b33cebd3cdfe998f9ca91d30dec128e >> base64 [
	^ ''.
	

]
