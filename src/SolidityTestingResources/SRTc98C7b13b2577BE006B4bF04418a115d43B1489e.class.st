Class {
	#name : #SRTc98C7b13b2577BE006B4bF04418a115d43B1489e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc98C7b13b2577BE006B4bF04418a115d43B1489e >> base64 [
	^ 'LyoKCVdlZWtseUxvdHRlcnlCCglDb2RlZCBieTogaUZBCglodHRwOi8vd2xiLmV0aGVyZXVtbG90dGVyeS5uZXQKCXZlcjogMS4wCiovCgpjb250cmFjdCBXTEJkcmF3c0RCSW50ZXJmYWNlIHsKCWZ1bmN0aW9uIG5ld0RyYXcodWludCBkYXRlLCB1aW50OFszXSBudW1iZXJzLCB1aW50IGhpdDNDb3VudCwgdWludCBoaXQzVmFsdWUsIHVpbnQgaGl0MkNvdW50LCB1aW50IGhpdDJWYWx1ZSk7CglmdW5jdGlvbiBnZXREcmF3KHVpbnQgaWQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZGF0ZSwgdWludDhbM10gbnVtYmVycywgdWludCBoaXQzQ291bnQsIHVpbnQgaGl0M1ZhbHVlLCB1aW50IGhpdDJDb3VudCwgdWludCBoaXQyVmFsdWUpOwp9Cgpjb250cmFjdCBXZWVrbHlMb3R0ZXJ5QiB7CgkvKiBzdHJ1Y3R1cmVzICovCglzdHJ1Y3QgZ2FtZXNfcyB7CgkJdWludCB0aWNrZXRzQ291bnQ7CgkJbWFwcGluZyhieXRlczMyID0+IHVpbnQpIGhpdDNIYXNoOwoJCW1hcHBpbmcoYnl0ZXMzMiA9PiB1aW50KSBoaXQySGFzaDsKCQl1aW50IHN0YXJ0VGltZXN0YW1wOwoJCXVpbnQgZW5kVGltZXN0YW1wOwoJCWJ5dGVzMyB3aW5uaW5nTnVtYmVyc0J5dGVzOwoJCXVpbnQgcHJlcGFyZUJsb2NrOwoJCWJvb2wgZHJhd0RvbmU7CgkJdWludCBwcml6ZVBvdDsKCQl1aW50IHBhaWRQb3Q7CgkJdWludCBoaXQzQ291bnQ7CgkJdWludCBoaXQzVmFsdWU7CgkJdWludCBoaXQyQ291bnQ7CgkJdWludCBoaXQyVmFsdWU7Cgl9CglzdHJ1Y3QgcGxheWVyR2FtZXNfcyB7CgkJYnl0ZXMzW10gbnVtYmVyc0J5dGVzOwoJCW1hcHBpbmcoYnl0ZXMzMiA9PiB1aW50KSBoaXQzSGFzaDsKCQltYXBwaW5nKGJ5dGVzMzIgPT4gdWludCkgaGl0Mkhhc2g7CgkJYm9vbCBjaGVja2VkOwoJfQoJc3RydWN0IHBsYXllcnNfcyB7CgkJbWFwcGluZyh1aW50ID0+IHBsYXllckdhbWVzX3MpIGdhbWVzOwoJfQoJc3RydWN0IGludmVzdG9yc19zIHsKCQlhZGRyZXNzIG93bmVyOwoJCXVpbnQgdmFsdWU7CgkJdWludCBiYWxhbmNlOwoJCWJvb2wgbGl2ZTsKCQlib29sIHZhbGlkOwoJCXVpbnQgYmVnaW5zOwoJfQoJc3RydWN0IGRyYXdzX3MgewoJCXVpbnQgZGF0ZTsKCQl1aW50IGdhbWVJRDsKCQlieXRlczMgbnVtYmVyc0J5dGVzOwoJCXVpbnQgaGl0M0NvdW50OwoJCXVpbnQgaGl0M1ZhbHVlOwoJCXVpbnQgaGl0MkNvdW50OwoJCXVpbnQgaGl0MlZhbHVlOwoJfQoJLyogY29uZmlnICovCgl1aW50IHB1YmxpYyBjb25zdGFudCB0aWNrZXRQcmljZSA9IDEwMCBmaW5uZXk7IC8vIDAuMSBldGhlcgoJdWludCBwcml2YXRlIGNvbnN0YW50IGRyYXdNYXhOdW1iZXIgPSA1MDsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBkcmF3QmxvY2tEZWxheSA9IDU7Cgl1aW50IHByaXZhdGUgY29uc3RhbnQgcHJpemVEaXNtaXNzRGVsYXkgPSA1OwoJdWludCBwcml2YXRlIGNvbnN0YW50IGNvbnRyYWN0RGlzbWlzc0RlbGF5ID0gNSB3ZWVrczsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBpbnZlc3RVbml0ID0gMSBldGhlcjsKCXVpbnQgcHJpdmF0ZSBjb25zdGFudCBpbnZlc3RNaW5pbXVtID0gMTAgZXRoZXI7Cgl1aW50IHByaXZhdGUgY29uc3RhbnQgaW52ZXN0VXNlckxpbWl0ID0gMjAwOwoJdWludCBwcml2YXRlIGNvbnN0YW50IGludmVzdE1pbkR1cmF0aW9uID0gNTsgLy8gNSBkcmF3IQoJdWludCBwcml2YXRlIGNvbnN0YW50IGludmVzdElkbGVUaW1lID0gMSBkYXlzOwoJdWludCBwcml2YXRlIGNvbnN0YW50IGZvck93bmVyID0gMjsgLy8lCgl1aW50IHByaXZhdGUgY29uc3RhbnQgZm9ySW52ZXN0b3JzID0gNDA7IC8vJQoJdWludCBwcml2YXRlIGNvbnN0YW50IGZvckhpdDIgPSAzMDsgLy8lCgkvKiB2YXJpYWJsZXMgKi8KCWFkZHJlc3MgcHJpdmF0ZSBXTEJkcmF3c0RCOwoJYWRkcmVzcyBwcml2YXRlIG93bmVyOwoJdWludCBwcml2YXRlIGN1cnJlbnRKYWNrcG90OwoJdWludCBwcml2YXRlIGludmVzdG1lbnRzVmFsdWU7Cgl1aW50IHByaXZhdGUgZXh0cmFKYWNrcG90OwoJdWludCBwcml2YXRlIHRpY2tldENvdW50ZXI7Cgl1aW50IHByaXZhdGUgY3VycmVudEdhbWU7Cgl1aW50IHByaXZhdGUgb3duZXJCYWxhbmNlOwoJYm9vbCBwdWJsaWMgY29udHJhY3RFbmFibGVkID0gdHJ1ZTsKCXVpbnQgcHJpdmF0ZSBjb250cmFjdERpc2FibGVkVGltZVN0YW1wOwoJbWFwcGluZyhhZGRyZXNzID0+IHBsYXllcnNfcykgcHJpdmF0ZSBwbGF5ZXJzOwoJZ2FtZXNfc1tdIHByaXZhdGUgZ2FtZXM7CglpbnZlc3RvcnNfc1tdIHByaXZhdGUgaW52ZXN0b3JzOwoJLyogZXZlbnRzICovCglldmVudCBOZXdUaWNrZXRFdmVudChhZGRyZXNzIFBsYXllciwgdWludDggTnVtYmVyMSwgdWludDggTnVtYmVyMiwgdWludDggTnVtYmVyMyk7CglldmVudCBDb250cmFjdERpc2FibGVkRXZlbnQodWludCBEZWFkbGluZVRpbWUpOwoJZXZlbnQgRHJhd1ByZXBhcmVFdmVudCh1aW50IEJsb2NrTnVtYmVyKTsKCWV2ZW50IERyYXdFdmVudCh1aW50IEdhbWVJRCwgdWludDggTnVtYmVyMSwgdWludDggTnVtYmVyMiwgdWludDggTnVtYmVyMywgdWludCBIaXQzQ291bnQsIHVpbnQgSGl0M1ZhbHVlLCB1aW50IEhpdDJDb3VudCwgdWludCBIaXQyVmFsdWUpOwoJZXZlbnQgSW52ZXN0QWRkRXZlbnQoYWRkcmVzcyBJbnZlc3RvciwgdWludCBWYWx1ZSk7CglldmVudCBJbnZlc3RDYW5jZWxFdmVudChhZGRyZXNzIEludmVzdG9yLCB1aW50IFZhbHVlKTsKCS8qIGNvbnN0cnVjdG9yICovCglmdW5jdGlvbiBXZWVrbHlMb3R0ZXJ5QihhZGRyZXNzIF9XTEJkcmF3c0RCKSB7CgkJV0xCZHJhd3NEQiA9IF9XTEJkcmF3c0RCOwoJCW93bmVyID0gbXNnLnNlbmRlcjsKCQljdXJyZW50R2FtZSA9IDE7CgkJZ2FtZXMubGVuZ3RoID0gMjsKCQlnYW1lc1sxXS5zdGFydFRpbWVzdGFtcCA9IG5vdzsKCQlnYW1lc1sxXS5lbmRUaW1lc3RhbXAgPSBjYWxjTmV4dERyYXdUaW1lKCk7Cgl9CgkvKiBjb25zdGFudCBmdW5jdGlvbnMgKi8KCWZ1bmN0aW9uIFZpc2l0KCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiaHR0cDovL3dsYi5ldGhlcmV1bWxvdHRlcnkubmV0IjsgfQoJZnVuY3Rpb24gRHJhd3ModWludCBpZCkgY29uc3RhbnQgcmV0dXJucyAodWludCBkYXRlLCB1aW50OFszXSBOdW1iZXJzLCB1aW50IGhpdDNDb3VudCwgdWludCBoaXQzVmFsdWUsIHVpbnQgaGl0MkNvdW50LCB1aW50IGhpdDJWYWx1ZSkgewoJCXJldHVybiBXTEJkcmF3c0RCSW50ZXJmYWNlKCBXTEJkcmF3c0RCICkuZ2V0RHJhdyhpZCk7Cgl9CglmdW5jdGlvbiBDdXJyZW50R2FtZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgR2FtZUlELCB1aW50IEphY2twb3QsIHVpbnQgU3RhcnQsIHVpbnQgRW5kLCB1aW50IFRpY2tldHMpIHsKCQlyZXR1cm4gKGN1cnJlbnRHYW1lLCBjdXJyZW50SmFja3BvdCwgZ2FtZXNbY3VycmVudEdhbWVdLnN0YXJ0VGltZXN0YW1wLCBnYW1lc1tjdXJyZW50R2FtZV0uZW5kVGltZXN0YW1wLCBnYW1lc1tjdXJyZW50R2FtZV0udGlja2V0c0NvdW50KTsKCX0KCWZ1bmN0aW9uIFBsYXllclRpY2tldHMoYWRkcmVzcyBQbGF5ZXIsIHVpbnQgR2FtZUlELCB1aW50IFRpY2tldElEKSBjb25zdGFudCByZXR1cm5zICh1aW50OFszXSBudW1iZXJzLCBib29sIENoZWNrZWQpIHsKCQlyZXR1cm4gKCBnZXROdW1iZXJzRnJvbUJ5dGVzKCBwbGF5ZXJzW1BsYXllcl0uZ2FtZXNbR2FtZUlEXS5udW1iZXJzQnl0ZXNbVGlja2V0SURdICksIHBsYXllcnNbUGxheWVyXS5nYW1lc1tHYW1lSURdLmNoZWNrZWQpOwoJfQoJZnVuY3Rpb24gSW52ZXN0b3JzKGFkZHJlc3MgQWRkcmVzcykgY29uc3RhbnQgcmV0dXJucyh1aW50IEludmVzdG1lbnQsIHVpbnQgQmFsYW5jZSwgYm9vbCBMaXZlKSB7CgkJdmFyIChmb3VuZCwgSW52ZXN0b3JJRCkgPSBnZXRJbnZlc3RvckJ5QWRkcmVzcyhBZGRyZXNzKTsKCQlpZiAoZm91bmQgPT0gZmFsc2UgfHwgISBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsaWQpIHsKCQkJcmV0dXJuICgwLCAwLCBmYWxzZSk7CgkJfQoJCXJldHVybiAoaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbHVlLCBpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmFsYW5jZSwgaW52ZXN0b3JzW0ludmVzdG9ySURdLmxpdmUpOwoJfQoJLyogY2FsbGJhY2sgZnVuY3Rpb24gKi8KCWZ1bmN0aW9uICgpIHsKCQl2YXIgTnVtYmVycyA9IGdldE51bWJlcnNGcm9tSGFzaChzaGEzKGJsb2NrLmNvaW5iYXNlLCBub3csIHRpY2tldENvdW50ZXIpKTsKCQlCdXlUaWNrZXQoTnVtYmVyc1swXSxOdW1iZXJzWzFdLE51bWJlcnNbMl0pOwoJfQoJLyogZXh0ZXJuYWwgZnVuY3Rpb25zIGZvciBwbGF5ZXJzICovCglmdW5jdGlvbiBCdXlUaWNrZXQodWludDggTnVtYmVyMSwgdWludDggTnVtYmVyMiwgdWludDggTnVtYmVyMykgbm9Db250cmFjdCBPbmx5RW5hYmxlZCB7CgkJdmFyIE51bWJlcnMgPSBbTnVtYmVyMSAsIE51bWJlcjIgLCBOdW1iZXIzXTsKCQlpZiAoICEgY2hlY2tOdW1iZXJzKCBOdW1iZXJzICkpIHsgdGhyb3c7IH0KCQlOdW1iZXJzID0gc29ydE51bWJlcnMoTnVtYmVycyk7CgkJaWYgKG1zZy52YWx1ZSA8IHRpY2tldFByaWNlKSB7IHRocm93OyB9CgkJaWYgKG1zZy52YWx1ZS10aWNrZXRQcmljZSA+IDApIHsgaWYgKCAhIG1zZy5zZW5kZXIuc2VuZCggbXNnLnZhbHVlLXRpY2tldFByaWNlICkpIHsgdGhyb3c7IH0gfQoJCWlmIChjdXJyZW50SmFja3BvdCA9PSAwKSB7IHRocm93OyB9CgkJaWYgKGdhbWVzW2N1cnJlbnRHYW1lXS5lbmRUaW1lc3RhbXAgPCBub3cpIHsgdGhyb3c7IH0KCQl0aWNrZXRDb3VudGVyKys7CgkJZ2FtZXNbY3VycmVudEdhbWVdLnRpY2tldHNDb3VudCsrOwoJCWJ5dGVzMzIgaGFzaDAgPSBzaGEzKCBOdW1iZXJzWzBdLCBOdW1iZXJzWzFdLCBOdW1iZXJzWzJdICk7CgkJYnl0ZXMzMiBoYXNoMSA9IHNoYTMoIE51bWJlcnNbMF0sIE51bWJlcnNbMV0pOwoJCWJ5dGVzMzIgaGFzaDIgPSBzaGEzKCBOdW1iZXJzWzBdLCBOdW1iZXJzWzJdKTsKCQlieXRlczMyIGhhc2gzID0gc2hhMyggTnVtYmVyc1sxXSwgTnVtYmVyc1syXSk7CgkJZ2FtZXNbY3VycmVudEdhbWVdLmhpdDNIYXNoW2hhc2gwXSsrOwoJCWdhbWVzW2N1cnJlbnRHYW1lXS5oaXQySGFzaFtoYXNoMV0rKzsKCQlnYW1lc1tjdXJyZW50R2FtZV0uaGl0Mkhhc2hbaGFzaDJdKys7CgkJZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJIYXNoW2hhc2gzXSsrOwoJCXBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbY3VycmVudEdhbWVdLm51bWJlcnNCeXRlcy5wdXNoICggZ2V0Qnl0ZXNGcm9tTnVtYmVycyhOdW1iZXJzKSApOwoJCXBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbY3VycmVudEdhbWVdLmhpdDNIYXNoW2hhc2gwXSsrOwoJCXBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJIYXNoW2hhc2gxXSsrOwoJCXBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJIYXNoW2hhc2gyXSsrOwoJCXBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJIYXNoW2hhc2gzXSsrOwoJCU5ld1RpY2tldEV2ZW50KCBtc2cuc2VuZGVyLCBOdW1iZXJzWzBdLCBOdW1iZXJzWzFdLCBOdW1iZXJzWzJdICk7Cgl9CglmdW5jdGlvbiBDaGVja1RpY2tldHMoKSBleHRlcm5hbCBub0V0aGVyIG5vQ29udHJhY3QgewoJCXVpbnQgX3ZhbHVlOwoJCXVpbnQgZ2FtZUlEOwoJCXVpbnQgZ2FtZUxvd0lEOwoJCXVpbnQ4WzNdIG1lbW9yeSBudW1iZXJzOwoJCWJvb2wgb2s7CgkJdWludCBoaXQzQ291bnQ7CgkJdWludCBoaXQyQ291bnQ7CgkJaWYgKGN1cnJlbnRHYW1lIDwgcHJpemVEaXNtaXNzRGVsYXkpIHsKCQkJZ2FtZUxvd0lEID0gMTsKCQl9IGVsc2UgewoJCQlnYW1lTG93SUQgPSBjdXJyZW50R2FtZS1wcml6ZURpc21pc3NEZWxheTsKCQl9CgkJZm9yICggZ2FtZUlEPWN1cnJlbnRHYW1lIDsgZ2FtZUlEPj1nYW1lTG93SUQgOyBnYW1lSUQtLSApIHsKCQkJaWYgKCAhIHBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbZ2FtZUlEXS5jaGVja2VkKSB7CgkJCQlpZiAoZ2FtZXNbZ2FtZUlEXS5kcmF3RG9uZSkgewoJCQkJCW51bWJlcnMgPSBnZXROdW1iZXJzRnJvbUJ5dGVzKGdhbWVzW2dhbWVJRF0ud2lubmluZ051bWJlcnNCeXRlcyk7CgkJCQkJaGl0M0NvdW50ID0gcGxheWVyc1ttc2cuc2VuZGVyXS5nYW1lc1tnYW1lSURdLmhpdDNIYXNoW3NoYTMoIG51bWJlcnNbMF0sIG51bWJlcnNbMV0sIG51bWJlcnNbMl0gKV07CgkJCQkJX3ZhbHVlICs9IGhpdDNDb3VudCAqIGdhbWVzW2dhbWVJRF0uaGl0M1ZhbHVlOwoJCQkJCWhpdDJDb3VudCA9IHBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbZ2FtZUlEXS5oaXQySGFzaFtzaGEzKCBudW1iZXJzWzBdLCBudW1iZXJzWzFdICldOwoJCQkJCWhpdDJDb3VudCArPSBwbGF5ZXJzW21zZy5zZW5kZXJdLmdhbWVzW2dhbWVJRF0uaGl0Mkhhc2hbc2hhMyggbnVtYmVyc1swXSwgbnVtYmVyc1syXSApXTsKCQkJCQloaXQyQ291bnQgKz0gcGxheWVyc1ttc2cuc2VuZGVyXS5nYW1lc1tnYW1lSURdLmhpdDJIYXNoW3NoYTMoIG51bWJlcnNbMV0sIG51bWJlcnNbMl0gKV07CgkJCQkJaGl0MkNvdW50IC09IGhpdDNDb3VudCozOwoJCQkJCV92YWx1ZSArPSBoaXQyQ291bnQgKiBnYW1lc1tnYW1lSURdLmhpdDJWYWx1ZTsKCQkJCQlwbGF5ZXJzW21zZy5zZW5kZXJdLmdhbWVzW2dhbWVJRF0uY2hlY2tlZCA9IHRydWU7CgkJCQkJb2sgPSB0cnVlOwoJCQkJfSBlbHNlIGlmICggISBjb250cmFjdEVuYWJsZWQgJiYgZ2FtZUlEID09IGN1cnJlbnRHYW1lKSB7CgkJCQkJX3ZhbHVlICs9IHBsYXllcnNbbXNnLnNlbmRlcl0uZ2FtZXNbZ2FtZUlEXS5udW1iZXJzQnl0ZXMubGVuZ3RoICogdGlja2V0UHJpY2U7CgkJCQkJcGxheWVyc1ttc2cuc2VuZGVyXS5nYW1lc1tnYW1lSURdLmNoZWNrZWQgPSB0cnVlOwoJCQkJCW9rID0gdHJ1ZTsKCQkJCX0KCQkJfQoJCX0KCQlpZiAoICEgb2spIHsgdGhyb3c7IH0KCQlpZiAoX3ZhbHVlID4gMCkgeyBpZiAoICEgbXNnLnNlbmRlci5zZW5kKF92YWx1ZSkpIHsgdGhyb3c7IH0gfQoJfQoJLyogZXh0ZXJuYWwgZnVuY3Rpb25zIGZvciBpbnZlc3RvcnMgKi8KCWZ1bmN0aW9uIEludmVzdEFkZCgpIGV4dGVybmFsIE9ubHlFbmFibGVkIG5vQ29udHJhY3QgewoJCXVpbnQgdmFsdWVfID0gbXNnLnZhbHVlOwoJCWlmICh2YWx1ZV8gPCBpbnZlc3RVbml0KSB7IHRocm93OyB9CgkJaWYgKHZhbHVlXyAlIGludmVzdFVuaXQgPiAwKSB7IAoJCQlpZiAoICEgbXNnLnNlbmRlci5zZW5kKCB2YWx1ZV8gJSBpbnZlc3RVbml0ICkpIHsgdGhyb3c7IH0gCgkJCXZhbHVlXyA9IHZhbHVlXyAtICh2YWx1ZV8gJSBpbnZlc3RVbml0KTsKCQl9CgkJaWYgKHZhbHVlXyA8IGludmVzdE1pbmltdW0pIHsgdGhyb3c7IH0KCQl2YXIgKGZvdW5kLCBJbnZlc3RvcklEKSA9IGdldEludmVzdG9yQnlBZGRyZXNzKG1zZy5zZW5kZXIpOwoJCWlmIChmb3VuZCA9PSBmYWxzZSkgewoJCQlpZiAoaW52ZXN0b3JzLmxlbmd0aCA9PSBpbnZlc3RVc2VyTGltaXQpIHsgdGhyb3c7IH0KCQkJSW52ZXN0b3JJRCA9IGludmVzdG9ycy5sZW5ndGg7CgkJCWludmVzdG9ycy5sZW5ndGgrKzsKCQl9CgkJaWYgKGludmVzdG9yc1tJbnZlc3RvcklEXS52YWxpZCAmJiBpbnZlc3RvcnNbSW52ZXN0b3JJRF0ubGl2ZSkgewoJCQlpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsdWUgKz0gdmFsdWVfOwoJCX0gZWxzZSB7CgkJCWludmVzdG9yc1tJbnZlc3RvcklEXS52YWx1ZSA9IHZhbHVlXzsKCQl9CgkJaW52ZXN0b3JzW0ludmVzdG9ySURdLmJlZ2lucyA9IGN1cnJlbnRHYW1lOwoJCWludmVzdG9yc1tJbnZlc3RvcklEXS52YWxpZCA9IHRydWU7CgkJaW52ZXN0b3JzW0ludmVzdG9ySURdLmxpdmUgPSB0cnVlOwoJCWludmVzdG9yc1tJbnZlc3RvcklEXS5vd25lciA9IG1zZy5zZW5kZXI7CgkJaW52ZXN0bWVudHNWYWx1ZSArPSB2YWx1ZV87CgkJc2V0SmFja3BvdCgpOwoJCUludmVzdEFkZEV2ZW50KG1zZy5zZW5kZXIsIHZhbHVlXyk7Cgl9CglmdW5jdGlvbiBJbnZlc3RXaXRoZHJhdygpIGV4dGVybmFsIG5vRXRoZXIgewoJCXZhciAoZm91bmQsIEludmVzdG9ySUQpID0gZ2V0SW52ZXN0b3JCeUFkZHJlc3MobXNnLnNlbmRlcik7CgkJaWYgKGZvdW5kID09IGZhbHNlKSB7IHRocm93OyB9CgkJaWYgKCAhIGludmVzdG9yc1tJbnZlc3RvcklEXS52YWxpZCkgeyB0aHJvdzsgfQoJCXVpbnQgX2JhbGFuY2UgPSBpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmFsYW5jZTsKCQlpZiAoX2JhbGFuY2UgPT0gMCkgeyB0aHJvdzsgfQoJCWludmVzdG9yc1tJbnZlc3RvcklEXS5iYWxhbmNlID0gMDsKCQlpZiAoICEgbXNnLnNlbmRlci5zZW5kKCBfYmFsYW5jZSApKSB7IHRocm93OyB9Cgl9CglmdW5jdGlvbiBJbnZlc3RDYW5jZWwoKSBleHRlcm5hbCBub0V0aGVyIHsKCQl2YXIgKGZvdW5kLCBJbnZlc3RvcklEKSA9IGdldEludmVzdG9yQnlBZGRyZXNzKG1zZy5zZW5kZXIpOwoJCWlmIChmb3VuZCA9PSBmYWxzZSkgeyB0aHJvdzsgfQoJCWlmICggISBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsaWQpIHsgdGhyb3c7IH0KCQlpZiAoY29udHJhY3RFbmFibGVkKSB7CgkJCWlmIChpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmVnaW5zK2ludmVzdE1pbkR1cmF0aW9uID4gbm93KSB7IHRocm93OyB9CgkJCWlmIChnYW1lc1tjdXJyZW50R2FtZV0uc3RhcnRUaW1lc3RhbXAraW52ZXN0SWRsZVRpbWUgPiBub3cpIHsgdGhyb3c7IH0KCQl9CgkJdWludCBiYWxhbmNlXzsKCQlpZiAoaW52ZXN0b3JzW0ludmVzdG9ySURdLmxpdmUpIHsKCQkJaW52ZXN0bWVudHNWYWx1ZSAtPSBpbnZlc3RvcnNbSW52ZXN0b3JJRF0udmFsdWU7CgkJCWJhbGFuY2VfID0gaW52ZXN0b3JzW0ludmVzdG9ySURdLnZhbHVlOwoJCQlzZXRKYWNrcG90KCk7CgkJCUludmVzdENhbmNlbEV2ZW50KG1zZy5zZW5kZXIsIGludmVzdG9yc1tJbnZlc3RvcklEXS52YWx1ZSk7CgkJfQoJCWlmIChpbnZlc3RvcnNbSW52ZXN0b3JJRF0uYmFsYW5jZSA+IDApIHsKCQkJYmFsYW5jZV8gKz0gaW52ZXN0b3JzW0ludmVzdG9ySURdLmJhbGFuY2U7CgkJfQoJCWRlbGV0ZSBpbnZlc3RvcnNbSW52ZXN0b3JJRF07CgkJaWYgKCAhIG1zZy5zZW5kZXIuc2VuZCggYmFsYW5jZV8gKSkgeyB0aHJvdzsgfQoJfQoJLyogZHJhdyBmdW5jdGlvbnMgZm9yIGV2ZXJ5b25lKi8KCWZ1bmN0aW9uIERyYXdQcmVwYXJlKCkgbm9Db250cmFjdCBPbmx5RW5hYmxlZCBub0V0aGVyIHsKCQlpZiAoZ2FtZXNbY3VycmVudEdhbWVdLmVuZFRpbWVzdGFtcCA+IG5vdyB8fCBnYW1lc1tjdXJyZW50R2FtZV0ucHJlcGFyZUJsb2NrICE9IDApIHsgdGhyb3c7IH0KCQlnYW1lc1tjdXJyZW50R2FtZV0ucHJlcGFyZUJsb2NrID0gYmxvY2subnVtYmVyK2RyYXdCbG9ja0RlbGF5OwoJCURyYXdQcmVwYXJlRXZlbnQoZ2FtZXNbY3VycmVudEdhbWVdLnByZXBhcmVCbG9jayk7Cgl9CglmdW5jdGlvbiBEcmF3KCkgbm9Db250cmFjdCBPbmx5RW5hYmxlZCBub0V0aGVyIHsKCQlpZiAoZ2FtZXNbY3VycmVudEdhbWVdLnByZXBhcmVCbG9jayA9PSAwIHx8IGdhbWVzW2N1cnJlbnRHYW1lXS5wcmVwYXJlQmxvY2sgPiBibG9jay5udW1iZXIpIHsgdGhyb3c7IH0KCQlieXRlczMyIF9oYXNoOwoJCXVpbnQgaGl0M1ZhbHVlOwoJCXVpbnQgaGl0M0NvdW50OwoJCXVpbnQgaGl0MlZhbHVlOwoJCXVpbnQgaGl0MkNvdW50OwoJCXVpbnQgYTsKCQlmb3IgKCBhID0gMSA7IGEgPD0gZHJhd0Jsb2NrRGVsYXkgOyBhKysgKSB7CgkJCV9oYXNoID0gc2hhMyhfaGFzaCwgYmxvY2suYmxvY2toYXNoKGdhbWVzW2N1cnJlbnRHYW1lXS5wcmVwYXJlQmxvY2sgLSBkcmF3QmxvY2tEZWxheSthKSk7CgkJfQoJCXZhciBudW1iZXJzID0gZ2V0TnVtYmVyc0Zyb21IYXNoKF9oYXNoKTsKCQlnYW1lc1tjdXJyZW50R2FtZV0ud2lubmluZ051bWJlcnNCeXRlcyA9IGdldEJ5dGVzRnJvbU51bWJlcnMoIG51bWJlcnMgKTsKCQloaXQzQ291bnQgKz0gZ2FtZXNbY3VycmVudEdhbWVdLmhpdDNIYXNoWyBzaGEzKCBudW1iZXJzWzBdLCBudW1iZXJzWzFdLG51bWJlcnNbMl0gKSBdOwoJCWhpdDJDb3VudCArPSBnYW1lc1tjdXJyZW50R2FtZV0uaGl0Mkhhc2hbIHNoYTMoIG51bWJlcnNbMF0sIG51bWJlcnNbMV0pIF07CgkJaGl0MkNvdW50ICs9IGdhbWVzW2N1cnJlbnRHYW1lXS5oaXQySGFzaFsgc2hhMyggbnVtYmVyc1swXSwgbnVtYmVyc1syXSkgXTsKCQloaXQyQ291bnQgKz0gZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJIYXNoWyBzaGEzKCBudW1iZXJzWzFdLCBudW1iZXJzWzJdKSBdOwoJCWhpdDJDb3VudCAtPSBoaXQzQ291bnQqMzsKCQl1aW50IHRvdGFsUG90ID0gZ2FtZXNbY3VycmVudEdhbWVdLnRpY2tldHNDb3VudCp0aWNrZXRQcmljZTsKCQloaXQyVmFsdWUgPSAoIHRvdGFsUG90ICogZm9ySGl0MiAvIDEwMCApOwoJCWdhbWVzW2N1cnJlbnRHYW1lXS5wcml6ZVBvdCA9IGhpdDJWYWx1ZTsKCQloaXQyVmFsdWUgPSBoaXQyVmFsdWUgLyBoaXQyQ291bnQ7CgkJdG90YWxQb3QgLT0gaGl0MlZhbHVlOwoJCXVpbnQgX293bmVyQmFsYW5jZSA9IHRvdGFsUG90ICogZm9ySGl0MiAvIDEwMDsKCQl0b3RhbFBvdCAtPSBfb3duZXJCYWxhbmNlOwoJCW93bmVyQmFsYW5jZSArPSBfb3duZXJCYWxhbmNlOwoJCXVpbnQgX2FkZEludmVzdG9yc1ZhbHVlID0gdG90YWxQb3QgKiBmb3JJbnZlc3RvcnMgLyAxMDA7CgkJYWRkSW52ZXN0b3JzVmFsdWUoX2FkZEludmVzdG9yc1ZhbHVlKTsKCQl0b3RhbFBvdCAtPSBfYWRkSW52ZXN0b3JzVmFsdWU7CgkJaWYgKGhpdDNDb3VudCA+IDApIHsKCQkJZ2FtZXNbY3VycmVudEdhbWVdLnByaXplUG90ICs9IGN1cnJlbnRKYWNrcG90OwoJCQlmb3IgKCBhPTAgOyBhIDwgaW52ZXN0b3JzLmxlbmd0aCA7IGErKyApIHsKCQkJCWRlbGV0ZSBpbnZlc3RvcnNbYV0ubGl2ZTsKCQkJfQoJCQloaXQzVmFsdWUgPSBjdXJyZW50SmFja3BvdCAvIGhpdDNDb3VudDsKCQkJZXh0cmFKYWNrcG90ID0gMDsKCQkJaW52ZXN0bWVudHNWYWx1ZSA9IDA7CgkJfQoJCWV4dHJhSmFja3BvdCArPSB0b3RhbFBvdDsKCQlzZXRKYWNrcG90KCk7CgkJRHJhd0V2ZW50KGN1cnJlbnRHYW1lLCBudW1iZXJzWzBdLCBudW1iZXJzWzFdLCBudW1iZXJzWzJdLCBoaXQzQ291bnQsIGhpdDNWYWx1ZSwgaGl0MkNvdW50LCBoaXQyVmFsdWUpOwoJCVdMQmRyYXdzREJJbnRlcmZhY2UoIFdMQmRyYXdzREIgKS5uZXdEcmF3KCBub3csIG51bWJlcnMsIGhpdDNDb3VudCwgaGl0M1ZhbHVlLCBoaXQyQ291bnQsIGhpdDJWYWx1ZSk7CgkJZ2FtZXNbY3VycmVudEdhbWVdLmhpdDNDb3VudCA9IGhpdDNDb3VudDsKCQlnYW1lc1tjdXJyZW50R2FtZV0uaGl0M1ZhbHVlID0gaGl0M1ZhbHVlOwoJCWdhbWVzW2N1cnJlbnRHYW1lXS5oaXQyQ291bnQgPSBoaXQyQ291bnQ7CgkJZ2FtZXNbY3VycmVudEdhbWVdLmhpdDJWYWx1ZSA9IGhpdDJWYWx1ZTsKCQlnYW1lc1tjdXJyZW50R2FtZV0uZHJhd0RvbmUgPSB0cnVlOwoJCW5ld0dhbWUoKTsKCX0KCS8qIG93bmVyIGZ1bmN0aW9ucyAqLwoJZnVuY3Rpb24gT3duZXJHZXRGZWUoKSBleHRlcm5hbCBPbmx5T3duZXIgewoJCWlmIChvd25lckJhbGFuY2UgPT0gMCkgeyB0aHJvdzsgfQoJCWlmIChvd25lci5zZW5kKG93bmVyQmFsYW5jZSkgPT0gZmFsc2UpIHsgdGhyb3c7IH0KCQlvd25lckJhbGFuY2UgPSAwOwoJfQoJZnVuY3Rpb24gT3duZXJDbG9zZUNvbnRyYWN0KCkgZXh0ZXJuYWwgT25seU93bmVyIG5vRXRoZXIgewoJCWlmICggISBjb250cmFjdEVuYWJsZWQpIHsKCQkJaWYgKGNvbnRyYWN0RGlzYWJsZWRUaW1lU3RhbXArY29udHJhY3REaXNtaXNzRGVsYXkgPCBub3cpIHsKCQkJCXN1aWNpZGUob3duZXIpOwoJCQl9CgkJfSBlbHNlIHsKCQkJY29udHJhY3RFbmFibGVkID0gZmFsc2U7CgkJCWNvbnRyYWN0RGlzYWJsZWRUaW1lU3RhbXAgPSBub3c7CgkJCUNvbnRyYWN0RGlzYWJsZWRFdmVudChjb250cmFjdERpc2FibGVkVGltZVN0YW1wK2NvbnRyYWN0RGlzbWlzc0RlbGF5KTsKCQkJb3duZXJCYWxhbmNlICs9IGV4dHJhSmFja3BvdDsKCQkJZXh0cmFKYWNrcG90ID0gMDsKCQl9Cgl9CgkvKiBwcml2YXRlIGZ1bmN0aW9ucyAqLwoJZnVuY3Rpb24gYWRkSW52ZXN0b3JzVmFsdWUodWludCB2YWx1ZSkgcHJpdmF0ZSB7CgkJYm9vbCBkb25lOwoJCXVpbnQgYTsKCQlmb3IgKCBhPTAgOyBhIDwgaW52ZXN0b3JzLmxlbmd0aCA7IGErKyApIHsKCQkJaWYgKGludmVzdG9yc1thXS5saXZlICYmIGludmVzdG9yc1thXS52YWxpZCkgewoJCQkJaW52ZXN0b3JzW2FdLmJhbGFuY2UgKz0gdmFsdWUgKiBpbnZlc3RvcnNbYV0udmFsdWUgLyBpbnZlc3RtZW50c1ZhbHVlOwoJCQkJZG9uZSA9IHRydWU7CgkJCX0KCQl9CgkJaWYgKCAhIGRvbmUpIHsKCQkJb3duZXJCYWxhbmNlICs9IHZhbHVlOwoJCX0KCX0KCWZ1bmN0aW9uIG5ld0dhbWUoKSBwcml2YXRlIHsKCQljdXJyZW50R2FtZSsrOwoJCXVpbnQgZ2FtZXNJRCA9IGdhbWVzLmxlbmd0aDsKCQlnYW1lcy5sZW5ndGgrKzsKCQlnYW1lc1tnYW1lc0lEXS5zdGFydFRpbWVzdGFtcCA9IG5vdzsKCQlnYW1lc1tnYW1lc0lEXS5lbmRUaW1lc3RhbXAgPSBjYWxjTmV4dERyYXdUaW1lKCk7CgkJaWYgKGdhbWVzLmxlbmd0aCA+IHByaXplRGlzbWlzc0RlbGF5KSB7CgkJCW93bmVyQmFsYW5jZSArPSBnYW1lc1tjdXJyZW50R2FtZS1wcml6ZURpc21pc3NEZWxheV0ucHJpemVQb3Q7CgkJCWRlbGV0ZSBnYW1lc1tjdXJyZW50R2FtZS1wcml6ZURpc21pc3NEZWxheV07CgkJfQoJfQoJZnVuY3Rpb24gZ2V0TnVtYmVyc0Zyb21IYXNoKGJ5dGVzMzIgaGFzaCkgcHJpdmF0ZSByZXR1cm5zICh1aW50OFszXSBudW1iZXJzKSB7CgkJYm9vbCBvayA9IHRydWU7CgkJdWludDggbnVtID0gMDsKCQl1aW50IGhhc2hwb3MgPSAwOwoJCXVpbnQ4IGE7CgkJdWludDggYjsKCQlmb3IgKGEgPSAwIDsgYSA8IG51bWJlcnMubGVuZ3RoIDsgYSsrKSB7CgkJCXdoaWxlICh0cnVlKSB7CgkJCQlvayA9IHRydWU7CgkJCQlpZiAoaGFzaHBvcyA9PSAzMikgewoJCQkJCWhhc2hwb3MgPSAwOwoJCQkJCWhhc2ggPSBzaGEzKGhhc2gpOwoJCQkJfQoJCQkJbnVtID0gZ2V0UGFydCggaGFzaCwgaGFzaHBvcyApOwoJCQkJbnVtID0gbnVtICUgdWludDgoZHJhd01heE51bWJlcikgKyAxOwoJCQkJaGFzaHBvcyArPSAxOwoJCQkJZm9yIChiID0gMCA7IGIgPCBudW1iZXJzLmxlbmd0aCA7IGIrKykgewoJCQkJCWlmIChudW1iZXJzW2JdID09IG51bSkgewoJCQkJCQlvayA9IGZhbHNlOwoJCQkJCQlicmVhazsgCgkJCQkJfQoJCQkJfQoJCQkJaWYgKG9rID09IHRydWUpIHsKCQkJCQludW1iZXJzW2FdID0gbnVtOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoJCW51bWJlcnMgPSBzb3J0TnVtYmVycyggbnVtYmVycyApOwoJfQoJZnVuY3Rpb24gZ2V0UGFydChieXRlczMyIGEsIHVpbnQgaSkgcHJpdmF0ZSByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gdWludDgoYnl0ZShieXRlczMyKHVpbnQoYSkgKiAyICoqICg4ICogaSkpKSk7IH0KCWZ1bmN0aW9uIHNldEphY2twb3QoKSBwcml2YXRlIHsKCQljdXJyZW50SmFja3BvdCA9IGludmVzdG1lbnRzVmFsdWUgKyBleHRyYUphY2twb3Q7Cgl9CglmdW5jdGlvbiBnZXRJbnZlc3RvckJ5QWRkcmVzcyhhZGRyZXNzIEFkZHJlc3MpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBmb3VuZCwgdWludCBpZCkgewoJCWZvciAoIGlkPTAgOyBpZCA8IGludmVzdG9ycy5sZW5ndGggOyBpZCsrICkgewoJCQlpZiAoaW52ZXN0b3JzW2lkXS5vd25lciA9PSBBZGRyZXNzKSB7CgkJCQlyZXR1cm4gKHRydWUsIGlkKTsKCQkJfQoJCX0KCQlyZXR1cm4gKGZhbHNlLCAwKTsKCX0KCWZ1bmN0aW9uIGNoZWNrTnVtYmVycyh1aW50OFszXSBOdW1iZXJzKSBwcml2YXRlIHJldHVybnMgKGJvb2wpIHsKCQlmb3IgKCB1aW50IGEgPSAwIDsgYSA8IE51bWJlcnMubGVuZ3RoIDsgYSsrICkgewoJCQlpZiAoTnVtYmVyc1thXSA+IGRyYXdNYXhOdW1iZXIgfHwgTnVtYmVyc1thXSA9PSAwKSB7IHJldHVybjsgfQoJCQlmb3IgKCB1aW50IGIgPSAwIDsgYSA8IE51bWJlcnMubGVuZ3RoIDsgYSsrICkgewoJCQkJaWYgKGEgIT0gYiAmJiBOdW1iZXJzW2FdID09IE51bWJlcnNbYl0pIHsgcmV0dXJuOyB9CgkJCX0KCQl9CgkJcmV0dXJuIHRydWU7Cgl9CglmdW5jdGlvbiBjYWxjTmV4dERyYXdUaW1lKCkgcHJpdmF0ZSByZXR1cm5zICh1aW50IHJldCkgewoJCXJldCA9IDE0NjgxNTIwMDA7CgkJd2hpbGUgKHJldCA8IG5vdykgewoJCQlyZXQgKz0gMSB3ZWVrczsKCQl9Cgl9CglmdW5jdGlvbiBzb3J0TnVtYmVycyh1aW50OFszXSBudW1iZXJzKSBwcml2YXRlIHJldHVybnModWludDhbM10gc051bWJlcnMpIHsKCQlzTnVtYmVycyA9IG51bWJlcnM7CgkJZm9yICh1aW50OCBpPTA7IGk8bnVtYmVycy5sZW5ndGg7IGkrKykgewoJCQlmb3IgKHVpbnQ4IGo9aSsxOyBqPG51bWJlcnMubGVuZ3RoOyBqKyspIHsKCQkJCWlmIChzTnVtYmVyc1tpXSA+IHNOdW1iZXJzW2pdKSB7CgkJCQkJdWludDggdCA9IHNOdW1iZXJzW2ldOwoJCQkJCXNOdW1iZXJzW2ldID0gc051bWJlcnNbal07CgkJCQkJc051bWJlcnNbal0gPSB0OwoJCQkJfQoJCQl9CgkJfQoJfQoJZnVuY3Rpb24gZ2V0TnVtYmVyc0Zyb21CeXRlcyhieXRlczMgQnl0ZXMpIHByaXZhdGUgcmV0dXJucyAodWludDhbM10gTnVtYmVycyl7CgkJTnVtYmVyc1swXSA9IHVpbnQ4KEJ5dGVzKTsKCQlOdW1iZXJzWzFdID0gdWludDgodWludDI0KEJ5dGVzKSAvMjU2KTsKCQlOdW1iZXJzWzJdID0gdWludDgodWludDI0KEJ5dGVzKSAvMjU2LzI1Nik7Cgl9CglmdW5jdGlvbiBnZXRCeXRlc0Zyb21OdW1iZXJzKHVpbnQ4WzNdIE51bWJlcnMpIHByaXZhdGUgcmV0dXJucyAoYnl0ZXMzIEJ5dGVzKSB7CgkJcmV0dXJuIGJ5dGVzMyh1aW50KE51bWJlcnNbMF0pK3VpbnQoTnVtYmVyc1sxXSkqMjU2K3VpbnQoTnVtYmVyc1syXSkqMjU2KjI1Nik7Cgl9CgkvKiBtb2RpZmllcnMgKi8KCW1vZGlmaWVyIG5vQ29udHJhY3QoKSB7aWYgKHR4Lm9yaWdpbiAhPSBtc2cuc2VuZGVyKSB7IHRocm93OyB9IF87IH0JbW9kaWZpZXIgbm9FdGhlcigpIHsgaWYgKG1zZy52YWx1ZSA+IDApIHsgdGhyb3c7IH0gXzsgfQltb2RpZmllciBPbmx5T3duZXIoKSB7IGlmIChvd25lciAhPSBtc2cuc2VuZGVyKSB7IHRocm93OyB9IF87IH0JbW9kaWZpZXIgT25seUVuYWJsZWQoKSB7IGlmICggISBjb250cmFjdEVuYWJsZWQpIHsgdGhyb3c7IH0gXzsgfX0='.
	

]
