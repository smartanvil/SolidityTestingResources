Class {
	#name : #SRT5745b21F6365b379451F2f327274812D7A5D3d0D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5745b21F6365b379451F2f327274812D7A5D3d0D >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBrb3RoX3YxYiB7CiAgICBldmVudCBOZXdLb3RoKAogICAgICAgIHVpbnQgZ2FtZUlkLAogICAgICAgIHVpbnQgYmV0TnVtYmVyLAogICAgICAgIGFkZHJlc3MgYmV0dG9yLAogICAgICAgIHVpbnQgYmV0LAogICAgICAgIHVpbnQgcG90LAogICAgICAgIHVpbnQgbGFzdEJsb2NrCiAgICApOwoKICAgIGV2ZW50IEtvdGhXaW4oCiAgICAgICAgdWludCBnYW1lSWQsCiAgICAgICAgdWludCB0b3RhbEJldHMsCiAgICAgICAgYWRkcmVzcyB3aW5uZXIsCiAgICAgICAgdWludCB3aW5uaW5nQmV0LAogICAgICAgIHVpbnQgcG90LAogICAgICAgIHVpbnQgZmVlLAogICAgICAgIHVpbnQgZmlyc3RCbG9jaywKICAgICAgICB1aW50IGxhc3RCbG9jawogICAgKTsKCiAgICAvLyBDb25zdGFudHMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IG1pblBvdCA9IDAuMDAxIGV0aGVyOyAvLyBDb250cmFjdCBuZWVkcyB0byBiZSBlbmRvd2VkIHdpdGggdGhpcyBhbW91bnQKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IG1pblJhaXNlID0gMC4wMDEgZXRoZXI7CiAgICBhZGRyZXNzIGZlZUFkZHJlc3M7CgogICAgLy8gT3RoZXIgaW50ZXJuYWwgdmFyaWFibGVzCiAgICB1aW50IHB1YmxpYyBnYW1lSWQgPSAwOwogICAgdWludCBwdWJsaWMgYmV0SWQ7CiAgICB1aW50IHB1YmxpYyBoaWdoZXN0QmV0OwogICAgdWludCBwdWJsaWMgcG90OwogICAgdWludCBwdWJsaWMgZmlyc3RCbG9jazsKICAgIHVpbnQgcHVibGljIGxhc3RCbG9jazsKICAgIGFkZHJlc3MgcHVibGljIGtvdGg7CiAgICB1aW50IHB1YmxpYyBtaW5CZXQ7CiAgICB1aW50IHB1YmxpYyBtYXhCZXQ7CgogICAgLy8gSW5pdGlhbGl6YXRpb24KICAgIGZ1bmN0aW9uIGtvdGhfdjFiKCkgcHVibGljIHsKICAgICAgICBmZWVBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICByZXNldEtvdGgoKTsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgLy8gQ3VycmVudCBLT1RIIGNhbid0IGJldCBvdmVyIHRoZW1zZWx2ZXMKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBrb3RoKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIFdlJ3JlIHBhc3QgdGhlIGJsb2NrIHRhcmdldCwgYnV0IG5ldyBnYW1lIGhhc24ndCBiZWVuIGFjdGl2YXRlZAogICAgICAgIGlmIChsYXN0QmxvY2sgPiAwICYmIGJsb2NrLm51bWJlciA+IGxhc3RCbG9jaykgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIENoZWNrIGZvciBtaW5pbXVtIGJldCAoYXQgbGVhc3QgbWluUmFpc2Ugb3ZlciBjdXJyZW50IGhpZ2hlc3RCZXQpCiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IG1pbkJldCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIENoZWNrIGZvciBtYXhpbXVtIGJldAogICAgICAgIGlmIChtc2cudmFsdWUgPiBtYXhCZXQpIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBCZXQgd2FzIHN1Y2Nlc3NmdWwsIGNyb3duIG5ldyBLT1RICiAgICAgICAgYmV0SWQrKzsKICAgICAgICBoaWdoZXN0QmV0ID0gbXNnLnZhbHVlOwogICAgICAgIGtvdGggPSBtc2cuc2VuZGVyOwogICAgICAgIHBvdCArPSBoaWdoZXN0QmV0OwoKICAgICAgICAvLyBOZXcgYmV0cwogICAgICAgIG1pbkJldCA9IGhpZ2hlc3RCZXQgKyBtaW5SYWlzZTsKICAgICAgICBpZiAocG90IDwgMSBldGhlcikgewogICAgICAgICAgICBtYXhCZXQgPSAzICogcG90OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1heEJldCA9IDUgKiBwb3QgLyA0OwogICAgICAgIH0KCiAgICAgICAgLy8gRXF1YXRpb24gZXhwZWN0cyBwb3QgdG8gYmUgaW4gRXRoZXIKICAgICAgICB1aW50IHBvdEV0aGVyID0gcG90LzEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgdWludCBibG9ja3NSZW1haW5pbmcgPSAocG90RXRoZXIgKiogMikvMiAtIDgqcG90RXRoZXIgKyAzNzsKICAgICAgICBpZiAoYmxvY2tzUmVtYWluaW5nIDwgNikgewogICAgICAgICAgICBibG9ja3NSZW1haW5pbmcgPSAzOwogICAgICAgIH0KCiAgICAgICAgbGFzdEJsb2NrID0gYmxvY2subnVtYmVyICsgYmxvY2tzUmVtYWluaW5nOwoKICAgICAgICBOZXdLb3RoKGdhbWVJZCwgYmV0SWQsIGtvdGgsIGhpZ2hlc3RCZXQsIHBvdCwgbGFzdEJsb2NrKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZXNldEtvdGgoKSBwcml2YXRlIHsKICAgICAgICBnYW1lSWQrKzsKICAgICAgICBoaWdoZXN0QmV0ID0gMDsKICAgICAgICBrb3RoID0gYWRkcmVzcygwKTsKICAgICAgICBwb3QgPSBtaW5Qb3Q7CiAgICAgICAgbGFzdEJsb2NrID0gMDsKICAgICAgICBiZXRJZCA9IDA7CiAgICAgICAgZmlyc3RCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBtaW5CZXQgPSBtaW5SYWlzZTsKICAgICAgICBtYXhCZXQgPSAzICogbWluUG90OwogICAgfQoKICAgIC8vIENhbGxlZCB0byByZXdhcmQgY3VycmVudCBLT1RIIHdpbm5lciBhbmQgc3RhcnQgbmV3IGdhbWUKICAgIGZ1bmN0aW9uIHJld2FyZEtvdGgoKSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGZlZUFkZHJlc3MgJiYgbGFzdEJsb2NrID4gMCAmJiBibG9jay5udW1iZXIgPiBsYXN0QmxvY2spIHsKICAgICAgICAgICAgdWludCBmZWUgPSBwb3QgLyAyMDsgLy8gNSUKICAgICAgICAgICAgS290aFdpbihnYW1lSWQsIGJldElkLCBrb3RoLCBoaWdoZXN0QmV0LCBwb3QsIGZlZSwgZmlyc3RCbG9jaywgbGFzdEJsb2NrKTsKCiAgICAgICAgICAgIHVpbnQgbmV0UG90ID0gcG90IC0gZmVlOwogICAgICAgICAgICBhZGRyZXNzIHdpbm5lciA9IGtvdGg7CiAgICAgICAgICAgIHJlc2V0S290aCgpOwogICAgICAgICAgICB3aW5uZXIudHJhbnNmZXIobmV0UG90KTsKCiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBuZXZlciBnbyBiZWxvdyBtaW5Qb3QKICAgICAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSAtIGZlZSA+PSBtaW5Qb3QpIHsKICAgICAgICAgICAgICAgIGZlZUFkZHJlc3MudHJhbnNmZXIoZmVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhZGRGdW5kcygpIHBheWFibGUgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBmZWVBZGRyZXNzKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24ga2lsbCgpIHB1YmxpYyB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gZmVlQWRkcmVzcykgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3QoZmVlQWRkcmVzcyk7CiAgICAgICAgfQogICAgfQp9'.
	

]
