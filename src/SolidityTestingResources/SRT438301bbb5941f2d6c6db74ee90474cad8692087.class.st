Class {
	#name : #SRT438301bbb5941f2d6c6db74ee90474cad8692087,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT438301bbb5941f2d6c6db74ee90474cad8692087 >> base64 [
	^ ''.
	

]
