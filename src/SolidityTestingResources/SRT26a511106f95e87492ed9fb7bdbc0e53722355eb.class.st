Class {
	#name : #SRT26a511106f95e87492ed9fb7bdbc0e53722355eb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT26a511106f95e87492ed9fb7bdbc0e53722355eb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lciA9IDB4MjZDN2FjOWU4M2RFMDNhMzAzNUE5NTU4QUU5ZTI4OUZBRTgyNWNFODsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCgoKY29udHJhY3QgQml0TG9hbmV4IGlzIE93bmFibGUgewoKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQml0TG9hbmV4IjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJCVExYIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwogIAogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvL3VpbnQyNTYgcHVibGljIGNvbnN0YW50IFJBVEUgPSA3MTQ7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQ0FQID0gMTI2MDAwOwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IFNUQVJUID0gMTUxNDE2MDAwMDsKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBEQVlTID0gMzA7CiAgdWludDI1NiBwdWJsaWMgZGF5c19pbnRlcnZhbCA9IDQ7CiAgdWludFs5XSBwdWJsaWMgZGVhZGxpbmVzID0gW1NUQVJULCBTVEFSVCAgXTsKICB1aW50WzldIHB1YmxpYyByYXRlcyA9IFsyMDAwICwxOTAwLCAxODAwLCAxNzAwLCAxNjAwLCAxNTAwLCAxNDAwLCAxMzAwLCAxMjAwXTsKICBib29sIHB1YmxpYyBpbml0aWFsaXplZCA9IGZhbHNlOwogIHVpbnQyNTYgcHVibGljIHJhaXNlZEFtb3VudCA9IDA7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgSU5JVElBTF9TVVBQTFkgPSAxMDAwMDAwMDAwMDAwMDAwMDsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBCb3VnaHRUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAKICBmdW5jdGlvbiBCaXRMb2FuZXgoKSBwdWJsaWMgewogICAgdG90YWxTdXBwbHkgPSA5MDAwMDAwMDAwMDAwMDAwOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBJTklUSUFMX1NVUFBMWTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBtb2RpZmllciB3aGVuU2FsZUFjdGl2ZSgpIHsKICBhc3NlcnQoaXNBY3RpdmUoKSk7CiAgXzsKICB9CgoKCiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSh1aW50MjU2IG51bVRva2Vucykgb25seU93bmVyIHsKCiAgICByZXF1aXJlKGluaXRpYWxpemVkID09IGZhbHNlKTsKICAgIHJlcXVpcmUodG9rZW5BdmFpbGFibGUoKSA9PSBudW1Ub2tlbnMpOwogICAgaW5pdGlhbGl6ZWQgPSB0cnVlOwoKICB9CgoKICBmdW5jdGlvbiBpc0FjdGl2ZSgpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybigKICAgICAgaW5pdGlhbGl6ZWQgPT0gdHJ1ZSAmJgogICAgICBub3cgPj0gU1RBUlQgJiYKICAgICAgbm93IDw9IFNUQVJULmFkZChEQVlTICogMSBkYXlzKSAmJgogICAgICBnb2FsUmVhY2hlZCgpID09IGZhbHNlCiAgICApOwogIH0KCiAgZnVuY3Rpb24gZ29hbFJlYWNoZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gKHJhaXNlZEFtb3VudCA+PSBDQVAgKiAxIGV0aGVyKTsKICB9CgogIGZ1bmN0aW9uICgpIHBheWFibGUgewoKICAgIGJ1eVRva2VucygpOwoKICB9CgogIGZ1bmN0aW9uIGJ1eVRva2VucygpIHBheWFibGUgd2hlblNhbGVBY3RpdmUgewogICAgdWludCB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICB1aW50IHRva2VucyA9IHdlaUFtb3VudC5tdWwoZ2V0UmF0ZSgpKTsKICAgIAogICAgdG9rZW5zID0gdG9rZW5zLmRpdigxIGV0aGVyKTsKICAgIAogICAgQm91Z2h0VG9rZW5zKG1zZy5zZW5kZXIsIHRva2Vucyk7CgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKICAgIGJhbGFuY2VzW293bmVyXSA9IGJhbGFuY2VzW293bmVyXS5zdWIodG9rZW5zKTsKICAgIHRvdGFsU3VwcGx5LnN1Yih0b2tlbnMpOwoKICAgIHJhaXNlZEFtb3VudCA9IHJhaXNlZEFtb3VudC5hZGQobXNnLnZhbHVlKTsKCiAgICAvL293bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0b2tlbkF2YWlsYWJsZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgIHJldHVybiB0b3RhbFN1cHBseTsKICB9CgogIGZ1bmN0aW9uIGRlc3Ryb3koKSBvbmx5T3duZXIgewogICAgLy91aW50MjU2IGJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICAvL2Fzc2VydChiYWxhbmNlID4gMCk7CiAgICAvL3Rva2VuLnRyYW5zZmVyKG93bmVyLCBiYWxhbmNlKTsKCiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KCiAgZnVuY3Rpb24gZ2V0UmF0ZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmF0ZSl7CiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkZWFkbGluZXMubGVuZ3RoOyBpKyspCiAgICAgICAgICBpZihub3c8ZGVhZGxpbmVzW2ldKQogICAgICAgICAgICAgIHJldHVybiByYXRlc1tpXTsKICAgICAgcmV0dXJuIHJhdGVzW3JhdGVzLmxlbmd0aC0xXTsvL3Nob3VsZCBuZXZlciBiZSByZXR1cm5lZCwgYnV0IHRvIGJlIHN1cmUgdG8gbm90IGRpdmlkZSBieSAwCiAgfQoKCn0='.
	

]
