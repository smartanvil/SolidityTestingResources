Class {
	#name : #SRTf503cd4558a4df44d6bafc6aa1745e2e1b705959,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf503cd4558a4df44d6bafc6aa1745e2e1b705959 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovLy8gQHRpdGxlIFNhZmVNYXRoCi8vLyBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovLy8gQHRpdGxlIE93bmFibGUKLy8vIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKLy8vIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCiAgLy8vIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogIC8vLyBhY2NvdW50LgogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLy8vIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8vLyBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogIC8vLyBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KfQoKCi8vLyBAdGl0bGUgUGF1c2FibGUKLy8vIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKICAvLy8gQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8vLyBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8vLyBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8vLyBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKCi8vLyBAdGl0bGUgVGhlIGludGVyZmFjZSB0byBleGVjdXRlIHRoZSB0b2tlbkZhbGxiYWNrCi8vLyBAYXV0aG9yIE1lcnVuYXMgR3JpbmNhbGFpdGlzIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iNjkwNDBjMWIxYzA3MDgxYTBlMWIwMDA3MGEwODA1MDgwMDFkMDAxYTI5MGUwNDA4MDAwNTQ3MGEwNjA0Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4KY29udHJhY3QgQ29udHJhY3RSZWNlaXZlciB7CiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIGZyb20sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYzsKfQoKCi8vLyBAdGl0bGUgQ3VzdG9tIEVSQzIyMyBJbXBsZW1lbnRhdGlvbgovLy8gQGF1dGhvciBNZXJ1bmFzIEdyaW5jYWxhaXRpcyA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjcyMWYxNzAwMDcxYzEzMDExNTAwMWIxYzExMTMxZTEzMWIwNjFiMDEzMjE1MWYxMzFiMWU1YzExMWQxZiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+CmNvbnRyYWN0IEVSQzIyMyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgc3RyaW5nIHB1YmxpYyBuYW1lOwogIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEpOwoKICAvLy8gQG5vdGljZSBUbyBtYWtlIHRva2VuIHRyYW5zZmVycyB0byBhIHVzZXIgb3IgYSBjb250cmFjdAogIC8vLyBAcGFyYW0gdG8gVGhlIHJlY2VpdmVyIG9mIHRoZSB0b2tlbnMKICAvLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCiAgLy8vIEByZXR1cm4gX3N1Y2Nlc3MgSWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbHVlICE9IDApOwoKICAgIGJ5dGVzIG1lbW9yeSBlbXB0eURhdGE7CgogICAgaWYgKGlzQ29udHJhY3QodG8pKSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQ29udHJhY3QodG8sIHZhbHVlLCBlbXB0eURhdGEpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRyYW5zZmVyVG9BZGRyZXNzKHRvLCB2YWx1ZSwgZW1wdHlEYXRhKTsKICAgIH0KICB9CgogIC8vLyBAbm90aWNlIFRvIG1ha2UgdG9rZW4gdHJhbnNmZXJzIHRvIGEgdXNlciBvciBhIGNvbnRyYWN0IHdpdGggYWRkaXRpb25hbCBkYXRhCiAgLy8vIEBwYXJhbSB0byBUaGUgcmVjZWl2ZXIgb2YgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gdHJhbnNmZXIKICAvLy8gQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gc2VuZAogIC8vLyBAcmV0dXJuIF9zdWNjZXNzIElmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICByZXF1aXJlKHRvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh2YWx1ZSAhPSAwKTsKICAgIHJlcXVpcmUoZGF0YS5sZW5ndGggIT0gMCk7CgogICAgaWYgKGlzQ29udHJhY3QodG8pKSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQ29udHJhY3QodG8sIHZhbHVlLCBkYXRhKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQWRkcmVzcyh0bywgdmFsdWUsIGRhdGEpOwogICAgfQogIH0KCiAgLy8vIEBub3RpY2UgVG8gbWFrZSB0b2tlbiB0cmFuc2ZlcnMgZnJvbSB0aGUgYWxsb3dhbmNlIG9mIGFub3RoZXIgdXNlcgogIC8vLyBAcGFyYW0gZnJvbSBUaGUgdXNlciB0aGF0IGFsbG93ZWQgeW91IHRvIHVzZSBoaXMgdG9rZW5zCiAgLy8vIEBwYXJhbSB0byBUaGUgYW1vdW50IG9mIHRva2VucyB0byB1c2UKICAvLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIHRyYW5zZmVyCiAgLy8vIEByZXR1cm4gX3N1Y2Nlc3MgSWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoZnJvbSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbHVlICE9IDApOwoKICAgIHVpbnQyNTYgYWxsb3dhbmNlID0gYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXTsKCiAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dhbmNlLnN1Yih2YWx1ZSk7CiAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKCiAgICBUcmFuc2Zlcihmcm9tLCB0bywgdmFsdWUpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBub3RpY2UgVG8gYXBwcm92ZSBhbm90aGVyIHVzZXIgdG8gdXNlIHlvdXIgdG9rZW5zCiAgLy8vIEBwYXJhbSBzcGVuZGVyIFRoZSB1c2VyIHRoYXQgd2lsbCBiZSBhYmxlIHRvIHVzZSB5b3VyIHRva2VucwogIC8vLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYXBwcm92ZQogIC8vLyBAcmV0dXJuIF9zdWNjZXNzIElmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBfc3VjY2VzcykgewogICAgcmVxdWlyZShzcGVuZGVyICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh2YWx1ZSAhPSAwKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gdmFsdWU7CgogICAgQXBwcm92YWwobXNnLnNlbmRlciwgc3BlbmRlciwgdmFsdWUpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBub3RpY2UgVG8gdHJhbnNmZXIgdG9rZW5zIHRvIGEgdXNlciBhZGRyZXNzCiAgLy8vIEBwYXJhbSB0byBUaGUgcmVjZWl2ZXIgb2YgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gdmFsdWUgSG93IG1hbnkgdG9rZW5zIGhlJ2xsIHJlY2VpdmUKICAvLy8gQHBhcmFtIGRhdGEgQWRkaXRpb25hbCBkYXRhCiAgLy8vIEByZXR1cm4gX3N1Y2Nlc3MgSWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgZnVuY3Rpb24gdHJhbnNmZXJUb0FkZHJlc3MoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSwgYnl0ZXMgZGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7CiAgICBiYWxhbmNlc1t0b10gPSBiYWxhbmNlc1t0b10uYWRkKHZhbHVlKTsKCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUsIGRhdGEpOwoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBub3RpY2UgVG8gdHJhbnNmZXIgdG9rZW5zIHRvIGEgY29udHJhY3QgYWRkcmVzcwogIC8vLyBAcGFyYW0gdG8gVGhlIHJlY2VpdmVyIG9mIHRoZSB0b2tlbnMKICAvLy8gQHBhcmFtIHZhbHVlIEhvdyBtYW55IHRva2VucyBoZSdsbCByZWNlaXZlCiAgLy8vIEBwYXJhbSBkYXRhIEFkZGl0aW9uYWwgZGF0YQogIC8vLyBAcmV0dXJuIF9zdWNjZXNzIElmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogIGZ1bmN0aW9uIHRyYW5zZmVyVG9Db250cmFjdChhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBfc3VjY2VzcykgewogICAgcmVxdWlyZSh0byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUodmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHZhbHVlKTsKICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwoKICAgIENvbnRyYWN0UmVjZWl2ZXIodG8pLnRva2VuRmFsbGJhY2sobXNnLnNlbmRlciwgdmFsdWUsIGRhdGEpOwoKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZGF0YSk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLy8gQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogIC8vLyBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgLy8vIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogIC8vLyBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvLy8gQG5vdGljZSBUbyBnZXQgdGhlIHRva2VuIGJhbGFuY2Ugb2YgYSB1c2VyCiAgLy8vIEByZXR1cm4gX2JhbGFuY2UgSG93IG11Y2ggYmFsYW5jZSB0aGF0IHVzZXIgaGFzCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKSB7CiAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgcmV0dXJuIGJhbGFuY2VzW293bmVyXTsKICB9CgogIC8vLyBAbm90aWNlIFRvIGNoZWNrIGlmIGFuIGFkZHJlc3MgaXMgYSBjb250cmFjdCBvciBub3QKICAvLy8gQHJldHVybiBfaXNDb250cmFjdCBJZiBpdCdzIGEgY29udHJhY3Qgb3Igbm90CiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIF9pc0NvbnRyYWN0KSB7CiAgICByZXF1aXJlKGFkZHIgIT0gYWRkcmVzcygwKSk7CgogICAgdWludDI1NiBsZW5ndGg7CgogICAgYXNzZW1ibHkgewogICAgICBsZW5ndGggOj0gZXh0Y29kZXNpemUoYWRkcikKICAgIH0KCiAgICByZXR1cm4gKGxlbmd0aCA+IDApOwogIH0KfQoKCi8vLyBAdGl0bGUgVGhlIEVSQzIyMyBUb3Bjb2luIFNtYXJ0IENvbnRyYWN0Ci8vLyBAYXV0aG9yIE1lcnVuYXMgR3JpbmNhbGFpdGlzIDw8YSBocmVmPSIvY2RuLWNnaS9sL2VtYWlsLXByb3RlY3Rpb24iIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iYjlkNGRjY2JjY2Q3ZDhjYWRlY2JkMGQ3ZGFkOGQ1ZDhkMGNkZDBjYWY5ZGVkNGQ4ZDBkNTk3ZGFkNmQ0Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4KY29udHJhY3QgVG9wY29pbiBpcyBFUkMyMjMsIFBhdXNhYmxlIHsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAnVG9wY29pbic7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAnVFBDJzsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgLy8gMzAwME0gdG9rZW5zIHdpdGggMTggZGVjaW1hbHMgbWF4aW11bQogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRvdGFsU3VwcGx5ID0gMzAwMGUyNDsKCiAgLy8gVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gZGlzdHJpYnV0ZSBvbiB0aGUgY3Jvd3NhbGUKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBjcm93ZHNhbGVUb2tlbnMgPSAxMDAwZTI0OwogIHVpbnQyNTYgcHVibGljIElDT0VuZFRpbWU7CiAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlOwogIHVpbnQyNTYgcHVibGljIHRva2Vuc1JhaXNlZDsKCiAgLy8gT25seSBhbGxvdyB0b2tlbiB0cmFuc2ZlcnMgYWZ0ZXIgdGhlIElDTwogIG1vZGlmaWVyIGFmdGVyQ3Jvd2RzYWxlKCkgewogICAgIHJlcXVpcmUobm93ID49IElDT0VuZFRpbWUpOwogICAgIF87CiAgfQoKICAvLyBPbmx5IHRoZSBjcm93ZHNhbGUKICBtb2RpZmllciBvbmx5Q3Jvd2RzYWxlKCkgewogICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcm93ZHNhbGUpOwogICAgIF87CiAgfQoKICAvLyBGb3IgdGhlIGNyb3dzYWxlIGNsb3NpbmcgZnVuY3Rpb24KICBtb2RpZmllciBvbmx5T3duZXJPckNyb3dkc2FsZSgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBtc2cuc2VuZGVyID09IGNyb3dkc2FsZSk7CiAgICBfOwogIH0KCiAgLy8vIEBub3RpY2UgVGhlIGNvbnN0cnVjdG9yIHVzZWQgdG8gc2V0IHRoZSBpbml0aWFsIGJhbGFuY2UgZm9yIHRoZSBmb3VuZGVyIGFuZCBkZXZlbG9wbWVudAogIC8vLyB0aGUgb3duZXIgb2YgdGhvc2UgdG9rZW5zIHdpbGwgZGlzdHJpYnV0ZSB0aGUgdG9rZW5zIGZvciBkZXZlbG9wbWVudCBhbmQgcGxhdGZvcm0KICAvLy8gQHBhcmFtIF9JQ09FbmRUaW1lIFdoZW4gd2lsbCB0aGUgSUNPIGVuZCB0byBhbGxvdyB0b2tlbiB0cmFuc2ZlcnMgYWZ0ZXIgdGhlIElDTyBvbmx5LAogIC8vLyByZXF1aXJlZCBwYXJhbWV0ZXIKICBmdW5jdGlvbiBUb3Bjb2luKHVpbnQyNTYgX0lDT0VuZFRpbWUpIHB1YmxpYyB7CiAgICAgcmVxdWlyZShfSUNPRW5kVGltZSA+IDAgJiYgX0lDT0VuZFRpbWUgPiBub3cpOwoKICAgICBJQ09FbmRUaW1lID0gX0lDT0VuZFRpbWU7CiAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsKICB9CgogIC8vLyBAbm90aWNlIFRvIHNldCB0aGUgYWRkcmVzcyBvZiB0aGUgY3Jvd2RzYWxlIGluIG9yZGVyIHRvIGRpc3RyaWJ1dGUgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gX2Nyb3dkc2FsZSBUaGUgYWRkcmVzcyBvZiB0aGUgY3Jvd2RzYWxlCiAgZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlQWRkcmVzcyhhZGRyZXNzIF9jcm93ZHNhbGUpIHB1YmxpYyBvbmx5T3duZXIgewogICAgIHJlcXVpcmUoX2Nyb3dkc2FsZSAhPSBhZGRyZXNzKDApKTsKCiAgICAgY3Jvd2RzYWxlID0gX2Nyb3dkc2FsZTsKICB9CgogIC8vLyBAbm90aWNlIFRvIGRpc3RyaWJ1dGUgdGhlIHByZXNhbGUgYW5kIElDTyB0b2tlbnMgYW5kIGluY3JlYXNlIHRoZSB0b3RhbAogIC8vLyBzdXBwbHkgYWNjb3JkaW5nbHkuIFRoZSB1bnNvbGQgdG9rZW5zIHdpbGwgYmUgZGVsZXRlZCwgbm90IGdlbmVyYXRlZAogIC8vLyBAcGFyYW0gX3RvIFRoZSB1c2VyIHRoYXQgd2lsbCByZWNlaXZlIHRoZSB0b2tlbnMKICAvLy8gQHBhcmFtIF9hbW91bnQgSG93IG1hbnkgdG9rZW5zIGhlJ2xsIHJlY2VpdmUKICBmdW5jdGlvbiBkaXN0cmlidXRlVG9rZW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5T3duZXJPckNyb3dkc2FsZSB7CiAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgcmVxdWlyZSh0b2tlbnNSYWlzZWQuYWRkKF9hbW91bnQpIDw9IGNyb3dkc2FsZVRva2Vucyk7CgogICAgIHRva2Vuc1JhaXNlZCA9IHRva2Vuc1JhaXNlZC5hZGQoX2Ftb3VudCk7CiAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogIH0KCiAgLy8vIEBub3RpY2UgVG8gY29udmVydCB0aGUgb2xkIHRva2VucyB0byB0aGUgbmV3IHZlcnNpb24gbWFudWFsbHkKICAvLy8gQHBhcmFtIF9yZWNlaXZlciBUaGUgcmVjZWl2ZXIgb2YgdGhlIHRva2VucwogIC8vLyBAcGFyYW0gX29sZEFtb3VudCBIb3cgbWFueSBvbGQgdG9rZW5zIGRvZXMgdGhhdCB1c2VyIGhhdmUKICBmdW5jdGlvbiBjb252ZXJ0T2xkVG9rZW5zKGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50MjU2IF9vbGRBbW91bnQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICByZXF1aXJlKF9yZWNlaXZlciAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX29sZEFtb3VudCA+IDApOwoKICAgIHVpbnQyNTYgYW1vdW50TmV3VG9rZW5zID0gX29sZEFtb3VudC5tdWwoMik7CgogICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1YihhbW91bnROZXdUb2tlbnMpOwogICAgYmFsYW5jZXNbX3JlY2VpdmVyXSA9IGJhbGFuY2VzW19yZWNlaXZlcl0uYWRkKGFtb3VudE5ld1Rva2Vucyk7CiAgfQoKICAvLy8gQG5vdGljZSBPdmVycmlkZSB0aGUgZnVuY3Rpb25zIHRvIG5vdCBhbGxvdyB0b2tlbiB0cmFuc2ZlcnMgdW50aWwgdGhlIGVuZCBvZiB0aGUgSUNPCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBhZnRlckNyb3dkc2FsZSByZXR1cm5zKGJvb2wpIHsKICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgLy8vIEBub3RpY2UgT3ZlcnJpZGUgdGhlIGZ1bmN0aW9ucyB0byBub3QgYWxsb3cgdG9rZW4gdHJhbnNmZXJzIHVudGlsIHRoZSBlbmQgb2YgdGhlIElDTwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyB3aGVuTm90UGF1c2VkIGFmdGVyQ3Jvd2RzYWxlIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2Zlcih0bywgdmFsdWUsIGRhdGEpOwogIH0KCiAgLy8vIEBub3RpY2UgT3ZlcnJpZGUgdGhlIGZ1bmN0aW9ucyB0byBub3QgYWxsb3cgdG9rZW4gdHJhbnNmZXJzIHVudGlsIHRoZSBlbmQgb2YgdGhlIElDTwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIGFmdGVyQ3Jvd2RzYWxlIHJldHVybnMoYm9vbCkgewogICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICB9CgogIC8vLyBAbm90aWNlIE92ZXJyaWRlIHRoZSBmdW5jdGlvbnMgdG8gbm90IGFsbG93IHRva2VuIHRyYW5zZmVycyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBJQ08KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBhZnRlckNyb3dkc2FsZSByZXR1cm5zKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci5hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwogIH0KCiAgLy8vIEBub3RpY2UgT3ZlcnJpZGUgdGhlIGZ1bmN0aW9ucyB0byBub3QgYWxsb3cgdG9rZW4gdHJhbnNmZXJzIHVudGlsIHRoZSBlbmQgb2YgdGhlIElDTwogIGZ1bmN0aW9uIHRyYW5zZmVyVG9BZGRyZXNzKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyB3aGVuTm90UGF1c2VkIGFmdGVyQ3Jvd2RzYWxlIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlclRvQWRkcmVzcyh0bywgdmFsdWUsIGRhdGEpOwogIH0KCiAgLy8vIEBub3RpY2UgT3ZlcnJpZGUgdGhlIGZ1bmN0aW9ucyB0byBub3QgYWxsb3cgdG9rZW4gdHJhbnNmZXJzIHVudGlsIHRoZSBlbmQgb2YgdGhlIElDTwogIGZ1bmN0aW9uIHRyYW5zZmVyVG9Db250cmFjdChhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCBhZnRlckNyb3dkc2FsZSByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJUb0NvbnRyYWN0KHRvLCB2YWx1ZSwgZGF0YSk7CiAgfQp9'.
	

]
