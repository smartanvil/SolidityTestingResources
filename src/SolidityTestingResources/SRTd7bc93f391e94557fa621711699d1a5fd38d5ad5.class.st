Class {
	#name : #SRTd7bc93f391e94557fa621711699d1a5fd38d5ad5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7bc93f391e94557fa621711699d1a5fd38d5ad5 >> base64 [
	^ ''.
	

]
