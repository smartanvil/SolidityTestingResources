Class {
	#name : #SRTcea7e9834f597dc571fce84c2d931d29d094f0a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcea7e9834f597dc571fce84c2d931d29d094f0a6 >> base64 [
	^ ''.
	

]
