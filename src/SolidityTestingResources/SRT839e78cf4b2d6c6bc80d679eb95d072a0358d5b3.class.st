Class {
	#name : #SRT839e78cf4b2d6c6bc80d679eb95d072a0358d5b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT839e78cf4b2d6c6bc80d679eb95d072a0358d5b3 >> base64 [
	^ ''.
	

]
