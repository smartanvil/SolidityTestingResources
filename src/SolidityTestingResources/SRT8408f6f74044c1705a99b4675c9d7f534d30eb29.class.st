Class {
	#name : #SRT8408f6f74044c1705a99b4675c9d7f534d30eb29,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8408f6f74044c1705a99b4675c9d7f534d30eb29 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IFdpdGhkcmF3YWJsZSB7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgcGVuZGluZ1dpdGhkcmF3YWxzOwoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIHsKICAgICAgICB1aW50IGFtb3VudCA9IHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXTsKICAgICAgICAKICAgICAgICByZXF1aXJlKGFtb3VudCA+IDApOwogICAgICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IGFtb3VudCk7CgogICAgICAgIHBlbmRpbmdXaXRoZHJhd2Fsc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgfQp9CgovKioKICogQHRpdGxlIEV0aExvdHRlcnkKICovCmNvbnRyYWN0IEV0aExvdHRlcnkgaXMgV2l0aGRyYXdhYmxlLCBPd25hYmxlIHsKCiAgICBldmVudCBvblRpY2tldFB1cmNoYXNlKHVpbnQzMiBsb3R0ZXJ5SWQsIGFkZHJlc3MgYnV5ZXIsIHVpbnQxNltdIHRpY2tldHMpOwogICAgZXZlbnQgb25Mb3R0ZXJ5Q29tcGxldGVkKHVpbnQzMiBsb3R0ZXJ5SWQpOwogICAgZXZlbnQgb25Mb3R0ZXJ5RmluYWxpemVkKHVpbnQzMiBsb3R0ZXJ5SWQpOwogICAgZXZlbnQgb25Mb3R0ZXJ5SW5zdXJhbmNlKGFkZHJlc3MgY2xhaW1lcik7CgogICAgdWludDMyIHB1YmxpYyBsb3R0ZXJ5SWQ7CiAgICAKICAgIHN0cnVjdCBMb3R0ZXJ5IHsgICAgICAgIAogICAgICAgIHVpbnQ4IG93bmVyQ3V0OwoKICAgICAgICB1aW50IHRpY2tldFByaWNlOwogICAgICAgIHVpbnQxNiBudW1UaWNrZXRzOwogICAgICAgIHVpbnQxNiB3aW5uaW5nVGlja2V0OwogICAgICAgIAogICAgICAgIG1hcHBpbmcgKHVpbnQxNiA9PiBhZGRyZXNzKSB0aWNrZXRzOwogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDE2KSB0aWNrZXRzUGVyQWRkcmVzczsKICAgICAgICAKICAgICAgICBhZGRyZXNzIHdpbm5lcjsKICAgICAgICAKICAgICAgICB1aW50MTZbXSB0aWNrZXRzU29sZDsKICAgICAgICBhZGRyZXNzW10gdGlja2V0T3duZXJzOwoKICAgICAgICBieXRlczMyIHNlcnZlckhhc2g7CiAgICAgICAgYnl0ZXMzMiBzZXJ2ZXJTYWx0OwogICAgICAgIHVpbnQgc2VydmVyUm9sbDsgCgogICAgICAgIHVpbnQgbGFzdFNhbGVUaW1lc3RhbXA7CiAgICB9CgogICAgbWFwcGluZyAodWludDMyID0+IExvdHRlcnkpIGxvdHRlcmllczsKICAgIAogICAgLy8gSW5pdCBMb3R0ZXJ5LiAKICAgIGZ1bmN0aW9uIGluaXRMb3R0ZXJ5KHVpbnQxNiBudW1UaWNrZXRzLCB1aW50IHRpY2tldFByaWNlLCB1aW50OCBvd25lckN1dCwgYnl0ZXMzMiBzZXJ2ZXJIYXNoKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICByZXF1aXJlKG93bmVyQ3V0IDwgMTAwKTsKICAgICAgICAgICAgICAgIAogICAgICAgIGxvdHRlcnlJZCArPSAxOwoKICAgICAgICBsb3R0ZXJpZXNbbG90dGVyeUlkXS5vd25lckN1dCA9IG93bmVyQ3V0OwogICAgICAgIGxvdHRlcmllc1tsb3R0ZXJ5SWRdLnRpY2tldFByaWNlID0gdGlja2V0UHJpY2U7CiAgICAgICAgbG90dGVyaWVzW2xvdHRlcnlJZF0ubnVtVGlja2V0cyA9IG51bVRpY2tldHM7CiAgICAgICAgbG90dGVyaWVzW2xvdHRlcnlJZF0uc2VydmVySGFzaCA9IHNlcnZlckhhc2g7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TG90dGVyeURldGFpbHModWludDE2IGxvdHRJZCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKAogICAgICAgIHVpbnQ4IG93bmVyQ3V0LAogICAgICAgIHVpbnQgdGlja2V0UHJpY2UsCiAgICAgICAgLy8KICAgICAgICB1aW50MTYgbnVtVGlja2V0cywgCiAgICAgICAgdWludDE2IHdpbm5pbmdUaWNrZXQsCiAgICAgICAgLy8KICAgICAgICBieXRlczMyIHNlcnZlckhhc2gsCiAgICAgICAgYnl0ZXMzMiBzZXJ2ZXJTYWx0LAogICAgICAgIHVpbnQgc2VydmVyUm9sbCwKICAgICAgICAvLwogICAgICAgIHVpbnQgbGFzdFNhbGVUaW1lc3RhbXAsCiAgICAgICAgLy8KICAgICAgICBhZGRyZXNzIHdpbm5lciwKICAgICAgICB1aW50MTZbXSB0aWNrZXRzU29sZCwgCiAgICAgICAgYWRkcmVzc1tdIHRpY2tldE93bmVycwogICAgKSB7CiAgICAgICAgb3duZXJDdXQgPSBsb3R0ZXJpZXNbbG90dElkXS5vd25lckN1dDsKICAgICAgICB0aWNrZXRQcmljZSA9IGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldFByaWNlOwogICAgICAgIC8vCiAgICAgICAgbnVtVGlja2V0cyA9IGxvdHRlcmllc1tsb3R0SWRdLm51bVRpY2tldHM7CiAgICAgICAgd2lubmluZ1RpY2tldCA9IGxvdHRlcmllc1tsb3R0SWRdLndpbm5pbmdUaWNrZXQ7CiAgICAgICAgLy8KICAgICAgICBzZXJ2ZXJIYXNoID0gbG90dGVyaWVzW2xvdHRJZF0uc2VydmVySGFzaDsKICAgICAgICBzZXJ2ZXJTYWx0ID0gbG90dGVyaWVzW2xvdHRJZF0uc2VydmVyU2FsdDsKICAgICAgICBzZXJ2ZXJSb2xsID0gbG90dGVyaWVzW2xvdHRJZF0uc2VydmVyUm9sbDsgCiAgICAgICAgLy8KICAgICAgICBsYXN0U2FsZVRpbWVzdGFtcCA9IGxvdHRlcmllc1tsb3R0SWRdLmxhc3RTYWxlVGltZXN0YW1wOwogICAgICAgIC8vCiAgICAgICAgd2lubmVyID0gbG90dGVyaWVzW2xvdHRJZF0ud2lubmVyOwogICAgICAgIHRpY2tldHNTb2xkID0gbG90dGVyaWVzW2xvdHRJZF0udGlja2V0c1NvbGQ7CiAgICAgICAgdGlja2V0T3duZXJzID0gbG90dGVyaWVzW2xvdHRJZF0udGlja2V0T3duZXJzOwogICAgfQoKICAgIGZ1bmN0aW9uIHB1cmNoYXNlVGlja2V0KHVpbnQxNiBsb3R0SWQsIHVpbnQxNltdIHRpY2tldHMpIHB1YmxpYyBwYXlhYmxlIHsKCiAgICAgICAgLy8gQ2hlY2tzIG9uIExvdHRlcnkKICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLndpbm5lciA9PSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldHNTb2xkLmxlbmd0aCA8IGxvdHRlcmllc1tsb3R0SWRdLm51bVRpY2tldHMpOwoKICAgICAgICAvLyBDaGVja3Mgb24gdGlja2V0cwogICAgICAgIHJlcXVpcmUodGlja2V0cy5sZW5ndGggPiAwKTsKICAgICAgICByZXF1aXJlKHRpY2tldHMubGVuZ3RoIDw9IGxvdHRlcmllc1tsb3R0SWRdLm51bVRpY2tldHMpOwogICAgICAgIHJlcXVpcmUodGlja2V0cy5sZW5ndGggKiBsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRQcmljZSA9PSBtc2cudmFsdWUpOwoKICAgICAgICBmb3IgKHVpbnQxNiBpID0gMDsgaSA8IHRpY2tldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHVpbnQxNiB0aWNrZXQgPSB0aWNrZXRzW2ldOwoKICAgICAgICAgICAgLy8gQ2hlY2sgbnVtYmVyIGlzIE9LIGFuZCBub3QgU29sZAogICAgICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLm51bVRpY2tldHMgPiB0aWNrZXQpOwogICAgICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldHNbdGlja2V0XSA9PSAwKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFRpY2tldCBjaGVja3MgcGFzc2VkIE9LCiAgICAgICAgICAgIGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldHNTb2xkLnB1c2godGlja2V0KTsKICAgICAgICAgICAgbG90dGVyaWVzW2xvdHRJZF0udGlja2V0T3duZXJzLnB1c2gobXNnLnNlbmRlcik7CgogICAgICAgICAgICAvLyBTYXZlIHdobydzIGJ1eWluZyB0aGlzIHRpY2tldAogICAgICAgICAgICBsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRzW3RpY2tldF0gPSBtc2cuc2VuZGVyOwogICAgICAgIH0KCiAgICAgICAgLy8gQWRkIGFtb3VudCBvZiB0aWNrZXRzIGJvdWdodCB0byB0aGlzIGFkZHJlc3MKICAgICAgICBsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRzUGVyQWRkcmVzc1ttc2cuc2VuZGVyXSArPSB1aW50MTYodGlja2V0cy5sZW5ndGgpOwoKICAgICAgICAvLyBTYXZlIGxhc3QgdGltZXN0YW1wIG9mIHNhbGUKICAgICAgICBsb3R0ZXJpZXNbbG90dElkXS5sYXN0U2FsZVRpbWVzdGFtcCA9IG5vdzsKCiAgICAgICAgb25UaWNrZXRQdXJjaGFzZShsb3R0SWQsIG1zZy5zZW5kZXIsIHRpY2tldHMpOwoKICAgICAgICAvLyBTZW5kIGV2ZW50IG9uIGFsbCB0aWNrZXRzIHNvbGQuIAogICAgICAgIGlmIChsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRzU29sZC5sZW5ndGggPT0gbG90dGVyaWVzW2xvdHRJZF0ubnVtVGlja2V0cykgewogICAgICAgICAgICBvbkxvdHRlcnlDb21wbGV0ZWQobG90dElkKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemVMb3R0ZXJ5KHVpbnQxNiBsb3R0SWQsIGJ5dGVzMzIgc2VydmVyU2FsdCwgdWludCBzZXJ2ZXJSb2xsKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICAKICAgICAgICAvLyBDaGVjayBsb3R0ZXJ5IG5vdCBDbG9zZWQgYW5kIGNvbXBsZXRlZAogICAgICAgIHJlcXVpcmUobG90dGVyaWVzW2xvdHRJZF0ud2lubmVyID09IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUobG90dGVyaWVzW2xvdHRJZF0udGlja2V0c1NvbGQubGVuZ3RoID09IGxvdHRlcmllc1tsb3R0SWRdLm51bVRpY2tldHMpOwoKICAgICAgICAvLyBJZiBpdCdzIGJlZW4gbGVzcyB0aGFuIHR3byBob3VycyBmcm9tIHRoZSBzYWxlIG9mIHRoZSBsYXN0IHRpY2tldC4KICAgICAgICByZXF1aXJlKChsb3R0ZXJpZXNbbG90dElkXS5sYXN0U2FsZVRpbWVzdGFtcCArIDIgaG91cnMpID49IG5vdyk7CgogICAgICAgIC8vIENoZWNrIGZhaXJuZXNzIG9mIHNlcnZlciByb2xsIGhlcmUKICAgICAgICByZXF1aXJlKGtlY2NhazI1NihzZXJ2ZXJTYWx0LCBzZXJ2ZXJSb2xsKSA9PSBsb3R0ZXJpZXNbbG90dElkXS5zZXJ2ZXJIYXNoKTsKICAgICAgICAKICAgICAgICAvLyBGaW5hbCBOdW1iZXIgaXMgYmFzZWQgb24gc2VydmVyIHJvbGwgYW5kIGxhc3RTYWxlVGltZXN0YW1wLiAKICAgICAgICB1aW50MTYgd2lubmluZ1RpY2tldCA9IHVpbnQxNigKICAgICAgICAgICAgYWRkbW9kKHNlcnZlclJvbGwsIGxvdHRlcmllc1tsb3R0SWRdLmxhc3RTYWxlVGltZXN0YW1wLCBsb3R0ZXJpZXNbbG90dElkXS5udW1UaWNrZXRzKQogICAgICAgICk7CiAgICAgICAgYWRkcmVzcyB3aW5uZXIgPSBsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRzW3dpbm5pbmdUaWNrZXRdOwogICAgICAgIAogICAgICAgIGxvdHRlcmllc1tsb3R0SWRdLndpbm5lciA9IHdpbm5lcjsKICAgICAgICBsb3R0ZXJpZXNbbG90dElkXS53aW5uaW5nVGlja2V0ID0gd2lubmluZ1RpY2tldDsKCiAgICAgICAgLy8gU2VuZCBmdW5kcyB0byBvd25lciBhbmQgd2lubmVyCiAgICAgICAgdWludCB2b2wgPSBsb3R0ZXJpZXNbbG90dElkXS5udW1UaWNrZXRzICogbG90dGVyaWVzW2xvdHRJZF0udGlja2V0UHJpY2U7CgogICAgICAgIHBlbmRpbmdXaXRoZHJhd2Fsc1tvd25lcl0gKz0gKHZvbCAqIGxvdHRlcmllc1tsb3R0SWRdLm93bmVyQ3V0KSAvIDEwMDsKICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbd2lubmVyXSArPSAodm9sICogKDEwMCAtIGxvdHRlcmllc1tsb3R0SWRdLm93bmVyQ3V0KSkgLyAxMDA7CgogICAgICAgIG9uTG90dGVyeUZpbmFsaXplZChsb3R0SWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGxvdHRlcnlDbG9zZUluc3VyYW5jZSh1aW50MTYgbG90dElkKSBwdWJsaWMgewogICAgICAgIAogICAgICAgIC8vIENoZWNrIGxvdHRlcnkgaXMgc3RpbGwgb3BlbiBhbmQgYWxsIHRpY2tldHMgd2VyZSBzb2xkLiAKICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLndpbm5lciA9PSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldHNTb2xkLmxlbmd0aCA9PSBsb3R0ZXJpZXNbbG90dElkXS5udW1UaWNrZXRzKTsKICAgICAgICAKICAgICAgICAvLyBJZiBpdCdzIGJlZW4gbW9yZSB0aGFuIHR3byBob3VycyBmcm9tIHRoZSBzYWxlIG9mIHRoZSBsYXN0IHRpY2tldC4KICAgICAgICByZXF1aXJlKChsb3R0ZXJpZXNbbG90dElkXS5sYXN0U2FsZVRpbWVzdGFtcCArIDIgaG91cnMpIDwgbm93KTsKICAgICAgICAgICAgCiAgICAgICAgLy8gQ2hlY2sgY2FsbGVyIGhhc2ggYm91Z2h0IHRpY2tldHMgZm9yIHRoaXMgbG90dGVyeQogICAgICAgIHJlcXVpcmUobG90dGVyaWVzW2xvdHRJZF0udGlja2V0c1BlckFkZHJlc3NbbXNnLnNlbmRlcl0gPiAwKTsKCiAgICAgICAgdWludDE2IG51bVRpY2tldHMgPSBsb3R0ZXJpZXNbbG90dElkXS50aWNrZXRzUGVyQWRkcmVzc1ttc2cuc2VuZGVyXTsKCiAgICAgICAgLy8gU2VuZCB0aWNrZXQgcmVmdW5kIHRvIGNhbGxlcgogICAgICAgIGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldHNQZXJBZGRyZXNzW21zZy5zZW5kZXJdID0gMDsKICAgICAgICBwZW5kaW5nV2l0aGRyYXdhbHNbbXNnLnNlbmRlcl0gKz0gKGxvdHRlcmllc1tsb3R0SWRdLnRpY2tldFByaWNlICogbnVtVGlja2V0cyk7CgogICAgICAgIG9uTG90dGVyeUluc3VyYW5jZShtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
