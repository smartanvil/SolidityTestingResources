Class {
	#name : #SRT69583c6f3d60786e7fd4054c2d539771c36944c1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69583c6f3d60786e7fd4054c2d539771c36944c1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAgdWludDI1NiBjID0gYSAvIGI7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlCiAqIEBkZXYgQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIENyb3dkc2FsZXMgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAqIHRva2VuIHB1cmNoYXNlcyBhbmQgdGhlIGNyb3dkc2FsZSB3aWxsIGFzc2lnbiB0aGVtIHRva2VucyBiYXNlZAogKiBvbiBhIHRva2VuIHBlciBFVEggcmF0ZS4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqLwpjb250cmFjdCB0b2tlbiB7IGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgYW1vdW50KXsgIH0gfQpjb250cmFjdCBDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyB1aW50MjU2IGR1cmF0aW9uSW5NaW51dGVzOwogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICAvLyB0b2tlbiBhZGRyZXNzCiAgYWRkcmVzcyBwdWJsaWMgYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQ7CgogIHVpbnQyNTYgcHVibGljIHByaWNlID0gNDA7CgogIHRva2VuIHRva2VuUmV3YXJkOwoKICAvLyBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBjb250cmlidXRpb25zOwogIAoKCiAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICAvLyB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgLy8gdWludDI1NiBwdWJsaWMgZW5kVGltZTsKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICBmdW5jdGlvbiBDcm93ZHNhbGUoKSB7CiAgICAvL1lvdSB3aWxsIGNoYW5nZSB0aGlzIHRvIHlvdXIgd2FsbGV0IHdoZXJlIHlvdSBuZWVkIHRoZSBFVEggCiAgICB3YWxsZXQgPSAweGQxMTIxNmQ2ZWYwNEQ0NDkzNDIyYWQ3MDBiMDhCYTcwMzEwOWY2M2I7CiAgICAvLyBkdXJhdGlvbkluTWludXRlcyA9IF9kdXJhdGlvbkluTWludXRlczsKICAgIC8vSGVyZSB3aWxsIGNvbWUgdGhlIGNoZWNrc3VtIGFkZHJlc3Mgd2UgZ290CiAgICBhZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCA9IDB4ODdBQ2VlOUU3Q0U0QjM2Q0NhOWQxMDFERDUwMDE3MEUwNkNEZkIyMzsKCgogICAgdG9rZW5SZXdhcmQgPSB0b2tlbihhZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCk7CiAgfQoKICBib29sIHB1YmxpYyBzdGFydGVkID0gZmFsc2U7CgogIGZ1bmN0aW9uIHN0YXJ0U2FsZSgpewogICAgaWYgKG1zZy5zZW5kZXIgIT0gd2FsbGV0KSB0aHJvdzsKICAgIHN0YXJ0ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gc3RvcFNhbGUoKXsKICAgIGlmKG1zZy5zZW5kZXIgIT0gd2FsbGV0KSB0aHJvdzsKICAgIHN0YXJ0ZWQgPSBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIHNldFByaWNlKHVpbnQyNTYgX3ByaWNlKXsKICAgIGlmKG1zZy5zZW5kZXIgIT0gd2FsbGV0KSB0aHJvdzsKICAgIHByaWNlID0gX3ByaWNlOwogIH0KCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHBheWFibGUgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgc2VudAogICAgdWludDI1NiB0b2tlbnMgPSAod2VpQW1vdW50LzEwKioxMCkgKiBwcmljZTsvL3dlaWFtb3VudCAqIHByaWNlIAoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwogICAgCiAgICAvLyBpZihjb250cmlidXRpb25zW21zZy5zZW5kZXJdLmFkZCh3ZWlBbW91bnQpPjEwKjEwKioxOCkgdGhyb3c7CiAgICAvLyBjb250cmlidXRpb25zW21zZy5zZW5kZXJdID0gY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXS5hZGQod2VpQW1vdW50KTsKCiAgICB0b2tlblJld2FyZC50cmFuc2ZlcihiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgIGZvcndhcmRGdW5kcygpOwogIH0KCiAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogIC8vIG92ZXJyaWRlIHRvIGNyZWF0ZSBjdXN0b20gZnVuZCBmb3J3YXJkaW5nIG1lY2hhbmlzbXMKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAvLyB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIGlmICghd2FsbGV0LnNlbmQobXNnLnZhbHVlKSkgewogICAgICB0aHJvdzsKICAgIH0KICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBzdGFydGVkOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnModWludDI1NiBfYW1vdW50KSB7CiAgICBpZihtc2cuc2VuZGVyIT13YWxsZXQpIHRocm93OwogICAgdG9rZW5SZXdhcmQudHJhbnNmZXIod2FsbGV0LF9hbW91bnQpOwogIH0KfQ=='.
	

]
