Class {
	#name : #SRT6652A55CeF751B9Fb66b0d61fa2210AebB7fb244,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6652A55CeF751B9Fb66b0d61fa2210AebB7fb244 >> base64 [
	^ ''.
	

]
