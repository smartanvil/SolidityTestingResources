Class {
	#name : #SRT7a93f0d9f302c0818022f8dca6ee1eb0f1b50308,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7a93f0d9f302c0818022f8dca6ee1eb0f1b50308 >> base64 [
	^ ''.
	

]
