Class {
	#name : #SRTaa2116ce83543b7632b5fbf4453e444bdc6e6f45,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa2116ce83543b7632b5fbf4453e444bdc6e6f45 >> base64 [
	^ ''.
	

]
