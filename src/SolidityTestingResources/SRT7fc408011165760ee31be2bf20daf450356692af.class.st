Class {
	#name : #SRT7fc408011165760ee31be2bf20daf450356692af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7fc408011165760ee31be2bf20daf450356692af >> base64 [
	^ ''.
	

]
