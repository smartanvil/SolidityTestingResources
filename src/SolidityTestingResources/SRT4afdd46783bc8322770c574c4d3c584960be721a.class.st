Class {
	#name : #SRT4afdd46783bc8322770c574c4d3c584960be721a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4afdd46783bc8322770c574c4d3c584960be721a >> base64 [
	^ ''.
	

]
