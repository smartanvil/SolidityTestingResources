Class {
	#name : #SRT4118d7f757ad5893b8fa2f95e067994e1f531371,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4118d7f757ad5893b8fa2f95e067994e1f531371 >> base64 [
	^ ''.
	

]
