Class {
	#name : #SRTbe44459058383729be8247802d4314ea76ca9e5a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbe44459058383729be8247802d4314ea76ca9e5a >> base64 [
	^ ''.
	

]
