Class {
	#name : #SRT93c255e46db48ff3c5937d0b7c3ff0495216c394,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT93c255e46db48ff3c5937d0b7c3ff0495216c394 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBFUkMyMCB7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7Cn0KCmNvbnRyYWN0IElPVSB7CiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBJT1VzIHB1cmNoYXNlZCBieSBhIGJ1eWVyCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgaW91X3B1cmNoYXNlZDsKCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBFVEggc2VudCBpbiBieSBhIGJ1eWVyCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZXRoX3NlbnQ7CgogIC8vIFRvdGFsIElPVXMgYXZhaWxhYmxlIHRvIHNlbGwKICB1aW50MjU2IHB1YmxpYyB0b3RhbF9pb3VfYXZhaWxhYmxlID0gMjAwMDAwMDAwMDAwMDAwMDAwMDA7CgogIC8vIFRvdGFsIElPVXMgcHVyY2hhc2VkIGJ5IGFsbCBidXllcnMKICB1aW50MjU2IHB1YmxpYyB0b3RhbF9pb3VfcHVyY2hhc2VkOwoKICAvLyAgQkFUIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MgKElPVSBvZmZlcmluZykKICBFUkMyMCBwdWJsaWMgdG9rZW4gPSBFUkMyMCgweDBEODc3NUY2NDg0MzA2NzlBNzA5RTk4ZDJiMENiNjI1MGQyODg3RUYpOwoKICAvLyBUaGUgc2VsbGVyJ3MgYWRkcmVzcyAodG8gcmVjZWl2ZSBFVEggdXBvbiBkaXN0cmlidXRpb24sIGFuZCBmb3IgYXV0aCB3aXRoZHJhd1Rva2VucygpKQogIGFkZHJlc3Mgc2VsbGVyID0gMHgwMDIwM0Y1YjI3Q0I2ODhhNDAyZkJEQmRkMkVhRjg1NDJmZkY3MkI2OwoKICAvLyBTYWZldHkgdG8gd2l0aGRyYXcgYWxsIHRva2VucyBiYWNrIHRvIHNlbGxlciBpbiB0aGUgZXZlbnQgYW55IGdldCBzdHJhbmRlZAogIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKCkgewogICAgaWYobXNnLnNlbmRlciAhPSBzZWxsZXIpIHRocm93OwogICAgdG9rZW4udHJhbnNmZXIoc2VsbGVyLCB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpOwogIH0KCiAgZnVuY3Rpb24gd2l0aGRyYXdFdGgoKSB7CiAgICBpZihtc2cuc2VuZGVyICE9IHNlbGxlcikgdGhyb3c7CiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICBmdW5jdGlvbiBraWxseWEoKSB7CiAgICBpZihtc2cuc2VuZGVyICE9IHNlbGxlcikgdGhyb3c7CiAgICBzZWxmZGVzdHJ1Y3Qoc2VsbGVyKTsKICB9CgogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcGF5YWJsZSB7CiAgICAvKgogICAgICBNYWluIG1lY2hhbmlzbSB0byBlbnN1cmUgYSBidXllcidzIHB1cmNoYXNlL0VUSC9JT1UgaXMgc2FmZS4KCiAgICAgIFJlZnVuZCB0aGUgYnV5ZXIncyBFVEggaWYgd2UncmUgYmV5b25kIHRoZSBkYXRlIG9mIG91ciBkaXN0cmlidXRpb24KICAgICAgcHJvbWlzZSBBTkQgaWYgdGhlIGNvbnRyYWN0IGRvZXNuJ3QgaGF2ZSBhbiBhZGVxdWF0ZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgIHRvIGRpc3RyaWJ1dGUgdG8gdGhlIGJ1eWVyLiBJZiB3ZSdyZSBiZXlvbmQgdGhlIGdpdmVuIGRhdGUsIHlldCB0aGVyZQogICAgICBpcyBhbiBhZGVxdWF0ZSBhbW91bnQgb2YgdG9rZW5zIGluIHRoZSBjb250cmFjdCdzIGJhbGFuY2UsIHRoZW4gdGhlCiAgICAgIGJ1eWVyIGNhbiB3aXRoZHJhdyBhY2NvcmRpbmdseS4gVGhpcyBhbGxvd3MgYnV5ZXJzIHRvIHdpdGhkcmF3IHdlbGwKICAgICAgaW50byB0aGUgZnV0dXJlIGlmIHRoZXkgbmVlZCB0by4gSXQgYWxzbyBhbGxvd3MgdXMgdG8gZXh0ZW5kIHRoZSBzYWxlLgogICAgICBUaW1lLXNlbnNpdGl2ZSBFVEggcHJvdGVjdGlvbiBpcyBvbmx5IGFwcGxpY2FibGUgaWYgdGhlIGNvbnRyYWN0CiAgICAgIGRvZXNuJ3QgaGF2ZSBhZGVxdWF0ZSB0b2tlbnMgZm9yIHRoZSBidXllci4KCiAgICAgIFRoZSAiYWRlcXVhY3kiIGNoZWNrIHByZXZlbnRzIHRoZSBzZWxsZXIgYW5kL29yIHRoaXJkIHBhcnR5IGF0dGFja2VyCiAgICAgIGZyb20gbG9ja2luZyBkb3duIGJ1eWVycycgRVRILiBpLmUuIFRoZSBhdHRhY2tlciBzZW5kcyAxIHRva2VuIGludG8gb3VyCiAgICAgIGNvbnRyYWN0IHRvIGZhbHNlbHkgc2lnbmFsIHRoYXQgdGhlIGNvbnRyYWN0IGhhcyBiZWVuIGZpbGxlZCBhbmQgaXMgcmVhZHkKICAgICAgZm9yIHRva2VuIGRpc3RyaWJ1dGlvbi4gSWYgd2Ugc2ltcGx5IGNoZWNrIGZvciBhID4wIHRva2VuIGJhbGFuY2UsIHdlIHJpc2sKICAgICAgZGlzdHJpYnV0aW9uIGVycm9ycyBBTkQgc3RyYW5kaW5nL2xvY2tpbmcgdGhlIGJ1eWVyJ3MgRVRILgoKICAgICAgVE9ETzogY29uZmlybSB0aGVyZSBhcmUgbm8gbG9naWNhbCBlcnJvcnMgdGhhdCB3aWxsIGFsbG93IGEgYnV5ZXIvYXR0YWNrZXIgdG8KICAgICAgICAgICAgd2l0aGRyYXcgRVRIIGVhcmx5L3VuYXV0aG9yaXplZC9kb3VibHkvZXRjCiAgICAqLwogICAgaWYoYmxvY2subnVtYmVyID4gMzk0MzM2NSAmJiBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdID4gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpKSB7CiAgICAgIC8vIFdlIGRpZG4ndCBmdWxmaWxsIG91ciBwcm9taXNlIHRvIGhhdmUgYWRlcXVhdGUgdG9rZW5zIHdpdGhkcmF3YWJsZSBhdCB4eCB0aW1lLgogICAgICAvLyBSZWZ1bmQgdGhlIGJ1eWVyJ3MgRVRIIGF1dG9tYXRpY2FsbHkgaW5zdGVhZC4KICAgICAgdWludDI1NiBldGhfdG9fcmVmdW5kID0gZXRoX3NlbnRbbXNnLnNlbmRlcl07CgogICAgICAvLyBJZiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgYW55IEVUSCBvciB0b2tlbnMgdG8gd2l0aGRyYXcsIGdldCBvdXQgQVNBUAogICAgICBpZihldGhfdG9fcmVmdW5kID09IDAgfHwgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA9PSAwKSB0aHJvdzsKCiAgICAgIC8vIEFkanVzdCB0b3RhbCBhY2N1cmF0ZWx5IGluIHRoZSBldmVudCB3ZSBhbGxvdyBwdXJjaGFzZXMgaW4gdGhlIGZ1dHVyZQogICAgICB0b3RhbF9pb3VfcHVyY2hhc2VkIC09IGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl07CgogICAgICAvLyBDbGVhciByZWNvcmQgb2YgYnV5ZXIncyBFVEggYW5kIElPVSBiYWxhbmNlIGJlZm9yZSByZWZ1bmRpbmcKICAgICAgZXRoX3NlbnRbbXNnLnNlbmRlcl0gPSAwOwogICAgICBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdID0gMDsKCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoX3RvX3JlZnVuZCk7CiAgICAgIHJldHVybjsgLy8gPwogICAgfQoKICAgIC8qCiAgICAgIEF0IHRoaXMgcG9pbnQsIHdlIGFyZSBzdGlsbCBiZWZvcmUgb3VyIGRpc3RyaWJ1dGlvbiBkYXRlIHByb21pc2UuCiAgICAgIENoZWNrIGlmIHRoZXJlIGlzIGFuIGFkZXF1YXRlIGFtb3VudCBvZiB0b2tlbnMgaW4gdGhlIGNvbnRyYWN0IHlldAogICAgICBhbmQgYWxsb3cgYnV5ZXIncyB0b2tlbiB3aXRoZHJhd2FsIGFuZCBzZWxsZXIncyBFVEggZGlzdHJpYnV0aW9uIGlmIHNvLgoKICAgICAgVE9ETzogY29uZmlybSB0aGVyZSBhcmUgbm8gbG9naWNhbCBlcnJvcnMgdGhhdCB3aWxsIGFsbG93IGEgYnV5ZXIvYXR0YWNrZXIgdG8KICAgICAgICAgICAgd2l0aGRyYXcgSU9VIHRva2VucyBlYXJseS91bmF1dGhvcml6ZWQvZG91Ymx5L2V0YwogICAgKi8KICAgIGlmKHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSA9PSAwIHx8IGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl0gPiB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpIHRocm93OwoKICAgIHVpbnQyNTYgaW91X3RvX3dpdGhkcmF3ID0gaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXTsKICAgIHVpbnQyNTYgZXRoX3RvX3JlbGVhc2UgPSBldGhfc2VudFttc2cuc2VuZGVyXTsKCiAgICAvLyBJZiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgYW55IElPVXMgb3IgRVRIIHRvIHdpdGhkcmF3L3JlbGVhc2UsIGdldCBvdXQgQVNBUAogICAgaWYoaW91X3RvX3dpdGhkcmF3ID09IDAgfHwgZXRoX3RvX3JlbGVhc2UgPT0gMCkgdGhyb3c7CgogICAgLy8gQ2xlYXIgcmVjb3JkIG9mIGJ1eWVyJ3MgSU9VIGFuZCBFVEggYmFsYW5jZSBiZWZvcmUgdHJhbnNmZXJyaW5nIG91dAogICAgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA9IDA7CiAgICBldGhfc2VudFttc2cuc2VuZGVyXSA9IDA7CgogICAgLy8gRGlzdHJpYnV0ZSB0b2tlbnMgdG8gdGhlIGJ1eWVyCiAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBpb3VfdG9fd2l0aGRyYXcpOwoKICAgIC8vIFJlbGVhc2UgYnV5ZXIncyBFVEggdG8gdGhlIHNlbGxlcgogICAgc2VsbGVyLnRyYW5zZmVyKGV0aF90b19yZWxlYXNlKTsKICB9CgogIGZ1bmN0aW9uIHB1cmNoYXNlKCkgcGF5YWJsZSB7CiAgICAvLyBDaGVjayBmb3IgcHJlLWRldGVybWluZWQgc2FsZSBzdGFydCB0aW1lCiAgICAvL2lmKGJsb2NrLm51bWJlciA8IDM5NjA5OTApIHRocm93OwogICAgLy8gQ2hlY2sgaWYgc2FsZSB3aW5kb3cgaXMgc3RpbGwgb3BlbiBvciBub3QgKGRhdGUgb2YgcHJvbWlzZWQgZGlzdHJpYnV0aW9uIC0gZ3JhY2U/KQogICAgLy9pZihibG9jay5udW1iZXIgPiAzOTkwOTkwKSB0aHJvdzsKCiAgICAvLyBEZXRlcm1pbmUgYW1vdW50IG9mIHRva2VucyB1c2VyIHdhbnRzIHRvL2NhbiBidXkKICAgIHVpbnQyNTYgaW91X3RvX3B1cmNoYXNlID0gODYwMCAqIG1zZy52YWx1ZTsgLy8gcHJpY2UgaXMgODYwMCBwZXIgRVRICgogICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggSU9VcyBsZWZ0IHRvIHNlbGwKICAgIGlmKCh0b3RhbF9pb3VfcHVyY2hhc2VkICsgaW91X3RvX3B1cmNoYXNlKSA+IHRvdGFsX2lvdV9hdmFpbGFibGUpIHRocm93OwoKICAgIC8vIFVwZGF0ZSB0aGUgYW1vdW50IG9mIElPVXMgcHVyY2hhc2VkIGJ5IHVzZXIuIEFsc28ga2VlcCB0cmFjayBvZiB0aGUgdG90YWwgRVRIIHRoZXkgc2VudCBpbgogICAgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSArPSBpb3VfdG9fcHVyY2hhc2U7CiAgICBldGhfc2VudFttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7CgogICAgLy8gVXBkYXRlIHRoZSB0b3RhbCBhbW91bnQgb2YgSU9VcyBwdXJjaGFzZWQgYnkgYWxsIGJ1eWVycwogICAgdG90YWxfaW91X3B1cmNoYXNlZCArPSBpb3VfdG9fcHVyY2hhc2U7CiAgfQoKICAvLyBGYWxsYmFjayBmdW5jdGlvbi9lbnRyeSBwb2ludAogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgaWYobXNnLnZhbHVlID09IDApIHsgLy8gSWYgdGhlIHVzZXIgc2VudCBhIDAgRVRIIHRyYW5zYWN0aW9uLCB3aXRoZHJhdygpCiAgICAgIHdpdGhkcmF3KCk7CiAgICB9CiAgICBlbHNlIHsgLy8gSWYgdGhlIHVzZXIgc2VudCBFVEgsIHB1cmNoYXNlIElPVQogICAgICBwdXJjaGFzZSgpOwogICAgfQogIH0KfQ=='.
	

]
