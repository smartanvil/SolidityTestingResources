Class {
	#name : #SRTb898db748e294bd4a08dc17f82fea24a6ca31505,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb898db748e294bd4a08dc17f82fea24a6ca31505 >> base64 [
	^ ''.
	

]
