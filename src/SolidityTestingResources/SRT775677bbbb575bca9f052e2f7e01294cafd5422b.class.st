Class {
	#name : #SRT775677bbbb575bca9f052e2f7e01294cafd5422b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT775677bbbb575bca9f052e2f7e01294cafd5422b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovLwovLyA9PT09IERJU0NMQUlNRVIgPT09PQovLwovLyBFVEhFUkVVTSBJUyBTVElMTCBBTiBFWFBFUkVNRU5UQUwgVEVDSE5PTE9HWS4KLy8gQUxUSE9VR0ggVEhJUyBTTUFSVCBDT05UUkFDVCBXQVMgQ1JFQVRFRCBXSVRIIEdSRUFUIENBUkUgQU5EIElOIFRIRSBIT1BFIE9GIEJFSU5HIFVTRUZVTCwgTk8gR1VBUkFOVEVFUyBPRiBGTEFXTEVTUyBPUEVSQVRJT04gQ0FOIEJFIEdJVkVOLgovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLgovLyBZT1UgQVJFIFNUUk9OR0xZIEVOQ09VUkFHRUQgVE8gU1RVRFkgVEhJUyBTTUFSVCBDT05UUkFDVCBDQVJFRlVMTFkgSU4gT1JERVIgVE8gVU5ERVJTVEFORCBQT1NTSUJMRSBFREdFIENBU0VTIEFORCBSSVNLUy4KLy8gRE9OJ1QgVVNFIFRISVMgU01BUlQgQ09OVFJBQ1QgSUYgWU9VIEhBVkUgU1VCU1RBTlRJQUwgRE9VQlRTIE9SIElGIFlPVSBET04nVCBLTk9XIFdIQVQgWU9VIEFSRSBET0lORy4KLy8KLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQovLyBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsCi8vIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAovLyBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgovLyA9PT09Ci8vCi8vCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0KLy8gQSBjYXJlZnVsIHJlYWRlciB3aWxsIGZpbmQgc29tZSBhZGRpdGlvbmFsIGNoZWNrcyBhbmQgZXhjZXNzaXZlIGNvZGUsIGNvbnN1bWluZyBzb21lIGV4dHJhIGdhcy4gVGhpcyBpcyBpbnRlbnRpb25hbC4KLy8gRXZlbiB0aG91Z2ggdGhlIGNvbnRyYWN0IHNob3VsZCB3b3JrIHdpdGhvdXQgdGhlc2UgcGFydHMsIHRoZXkgbWFrZSB0aGUgY29kZSBtb3JlIHNlY3VyZSBpbiBwcm9kdWN0aW9uIGFuZCBmb3IgZnV0dXJlIHJlZmFjdG9yaW5nLgovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50LgovLyBEaXNjdXNzaW9uIGlzIHdlbGNvbWUhCi8vID09PT0KLy8KCi8vLyBAYXV0aG9yIGV0aGVybmlhbgovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImUzODE5Njg0OTBhMzg2OTc4Yjg2OTE4ZDhhODI4ZGNkODA4YzhlIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPgovLy8gQHRpdGxlIFByZXNhbGVyIFZvdGluZyBDb250cmFjdAoKaW50ZXJmYWNlIFRva2VuU3RvcmFnZSB7CiAgICBmdW5jdGlvbiBiYWxhbmNlcyhhZGRyZXNzIGFjY291bnQpIHB1YmxpYyByZXR1cm5zKHVpbnQgYmFsYW5jZSk7Cn0KCmNvbnRyYWN0IFByZXNhbGVyVm90aW5nIHsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IFZFUlNJT04gPSAiMC4wLjMiOwoKICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIFNUQVJUID09PT09PSAqLwoKICAgIHVpbnQgcHVibGljIFZPVElOR19TVEFSVF9CTE9DS05SICA9IDA7CiAgICB1aW50IHB1YmxpYyBWT1RJTkdfRU5EX1RJTUUgICAgICAgPSAwOwoKICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8KCiAgICBUb2tlblN0b3JhZ2UgUFJFU0FMRV9DT05UUkFDVCA9IFRva2VuU3RvcmFnZSgweDRGZDk5N0VkN2MxMERiRDA0ZTk1ZDM3MzBjZDc3RDc5NTEzMDc2RjIpOwoKICAgIHN0cmluZ1s1XSBwcml2YXRlIHN0YXRlTmFtZXMgPSBbIkJFRk9SRV9TVEFSVCIsICAiVk9USU5HX1JVTk5JTkciLCAiQ0xPU0VEIiBdOwogICAgZW51bSBTdGF0ZSB7IEJFRk9SRV9TVEFSVCwgIFZPVElOR19SVU5OSU5HLCBDTE9TRUQgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHJhd1ZvdGVzOwoKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVhfQU1PVU5UX0VRVV8wX1BFUkNFTlQgICA9IDEgZmlubmV5OwogICAgdWludCBwcml2YXRlIGNvbnN0YW50IE1JTl9BTU9VTlRfRVFVXzEwMF9QRVJDRU5UID0gMSBldGhlciA7CgogICAgYWRkcmVzcyBvd25lcjsKCiAgICAvL2NvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBQcmVzYWxlclZvdGluZyAoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vYWNjZXB0IChhbmQgc2VuZCBiYWNrKSB2b3RpbmcgcGF5bWVudHMgaGVyZQogICAgZnVuY3Rpb24gKCkKICAgIG9ubHlQcmVzYWxlcgogICAgb25seVN0YXRlKFN0YXRlLlZPVElOR19SVU5OSU5HKQogICAgcGF5YWJsZSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDEgZXRoZXIgfHwgIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsKICAgICAgICAvL3NwZWNpYWwgdHJlYXRtZW50IGZvciAwLWV0aGVyIHBheW1lbnRzCiAgICAgICAgcmF3Vm90ZXNbbXNnLnNlbmRlcl0gPSBtc2cudmFsdWUgPiAwID8gbXNnLnZhbHVlIDogMSB3ZWk7CiAgICB9CgogICAgLy8vIEBub3RpY2Ugc3RhcnQgdm90aW5nIGF0IGBzdGFydEJsb2NrTnJgIGZvciBgZHVyYXRpb25IcnNgLgogICAgLy8vIFJlc3RyaWN0ZWQgZm9yIG93bmVyIG9ubHkuCiAgICAvLy8gQHBhcmFtIHN0YXJ0QmxvY2tOciBibG9jayBudW1iZXIgdG8gc3RhcnQgdm90aW5nOyBzdGFydHMgaW1tZWRpYXRseSBpZiBsZXNzIHRoYW4gY3VycmVudCBibG9jayBudW1iZXIuCiAgICAvLy8gQHBhcmFtIGR1cmF0aW9uSHJzIHZvdGluZyBkdXJhdGlvbiAoZnJvbSBub3chKTsgYXQgbGVhc3QgMSBob3VyLgogICAgZnVuY3Rpb24gc3RhcnRWb3RpbmcodWludCBzdGFydEJsb2NrTnIsIHVpbnQgZHVyYXRpb25IcnMpIG9ubHlPd25lciB7CiAgICAgICAgVk9USU5HX1NUQVJUX0JMT0NLTlIgPSBtYXgoYmxvY2subnVtYmVyLCBzdGFydEJsb2NrTnIpOwogICAgICAgIFZPVElOR19FTkRfVElNRSA9IG5vdyArIG1heChkdXJhdGlvbkhycywxKSAqIDEgaG91cnM7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHtvd25lciA9IG5ld093bmVyO30KCiAgICAvLy8gQG5vdGljZSByZXR1cm5zIGN1cnJlbnQgdm90aW5nIHJlc3VsdCBmb3IgZ2l2ZW4gYWRkcmVzcyBpbiBwZXJjZW50LgogICAgLy8vIEBwYXJhbSB2b3RlciBiYWxhbmNlIGhvbGRlciBhZGRyZXNzLgogICAgZnVuY3Rpb24gdm90ZWRQZXJDZW50KGFkZHJlc3Mgdm90ZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB2YXIgcmF3Vm90ZSA9IHJhd1ZvdGVzW3ZvdGVyXTsKICAgICAgICBpZiAocmF3Vm90ZTw9TUFYX0FNT1VOVF9FUVVfMF9QRVJDRU5UKSByZXR1cm4gMDsKICAgICAgICBlbHNlIGlmIChyYXdWb3RlPj1NSU5fQU1PVU5UX0VRVV8xMDBfUEVSQ0VOVCkgcmV0dXJuIDEwMDsKICAgICAgICBlbHNlIHJldHVybiByYXdWb3RlICogMTAwIC8gMSBldGhlcjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSByZXR1cm4gdm90aW5nIHJlbWFpbmluZyB0aW1lIChob3VycywgbWludXRlcykuCiAgICBmdW5jdGlvbiB2b3RpbmdFbmRzSW5ISE1NKCkgY29uc3RhbnQgcmV0dXJucyAodWludDE2LCB1aW50MTYpIHsKICAgICAgICB2YXIgdHNlYyA9IFZPVElOR19FTkRfVElNRSAtIG5vdzsKICAgICAgICByZXR1cm4gVk9USU5HX0VORF9USU1FPT0wID8gKDAsMCkgOiAodWludDE2KHRzZWMgLyAxIGhvdXJzKSwgdWludDE2KHRzZWMgJSAxIGhvdXJzIC8gMSBtaW51dGVzKSk7CiAgICB9CgogICAgZnVuY3Rpb24gY3VycmVudFN0YXRlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoU3RhdGUpIHsKICAgICAgICBpZiAoVk9USU5HX1NUQVJUX0JMT0NLTlIgPT0gMCB8fCBibG9jay5udW1iZXIgPCBWT1RJTkdfU1RBUlRfQkxPQ0tOUikgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuQkVGT1JFX1NUQVJUOwogICAgICAgIH0gZWxzZSBpZiAobm93IDw9IFZPVElOR19FTkRfVElNRSkgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuVk9USU5HX1JVTk5JTkc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkNMT1NFRDsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBub3RpY2UgcmV0dXJucyBjdXJyZW50IHN0YXRlIG9mIHRoZSB2b3RpbmcuCiAgICBmdW5jdGlvbiBzdGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHN0cmluZykgewogICAgICAgIHJldHVybiBzdGF0ZU5hbWVzW3VpbnQoY3VycmVudFN0YXRlKCkpXTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXgodWludCBhLCB1aW50IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgbWF4VmFsdWUpIHsgcmV0dXJuIGE+YiA/IGEgOiBiOyB9CgogICAgbW9kaWZpZXIgb25seVByZXNhbGVyKCkgewogICAgICAgIGlmIChQUkVTQUxFX0NPTlRSQUNULmJhbGFuY2VzKG1zZy5zZW5kZXIpID09IDApIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVN0YXRlKFN0YXRlIHN0YXRlKSB7CiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSgpIT1zdGF0ZSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPW93bmVyKSB0aHJvdzsKICAgICAgICBfOwogICAgfQoKfS8vY29udHJhY3Q='.
	

]
