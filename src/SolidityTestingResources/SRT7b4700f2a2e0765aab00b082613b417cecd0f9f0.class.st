Class {
	#name : #SRT7b4700f2a2e0765aab00b082613b417cecd0f9f0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7b4700f2a2e0765aab00b082613b417cecd0f9f0 >> base64 [
	^ ''.
	

]
