Class {
	#name : #SRT5a0d7bf44907b48a6af0e6f3e9519811aeaaa925,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5a0d7bf44907b48a6af0e6f3e9519811aeaaa925 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Ci8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZSB0b2tlbgogKgogKiBAZGV2IFN0YW5kYXJkVG9rZW4gbW9kaWZpZWQgd2l0aCBwYXVzYWJsZSB0cmFuc2ZlcnMuCiAqKi8KCmNvbnRyYWN0IFBhdXNhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgUGF1c2FibGUgewoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICByZXR1cm4gc3VwZXIuaW5jcmVhc2VBcHByb3ZhbChfc3BlbmRlciwgX2FkZGVkVmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmV0dXJuIHN1cGVyLmRlY3JlYXNlQXBwcm92YWwoX3NwZW5kZXIsIF9zdWJ0cmFjdGVkVmFsdWUpOwogIH0KfQoKY29udHJhY3QgQ29zdHVtZVRva2VuIGlzIFBhdXNhYmxlVG9rZW4gewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUb2tlbiBEZXRhaWxzCiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gJ0Nvc3R1bWUgVG9rZW4nOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gJ0NPU1QnOwogIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAvLyAyMDAgTWlsbGlvbiBUb3RhbCBTdXBwbHkKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b3RhbFN1cHBseSA9IDIwMGUyNDsKCiAgLy8gMTIwIE1pbGxpb24gLSBTdXBwbHkgbm90IGZvciBDcm93ZHNhbGUKICB1aW50MjU2IHB1YmxpYyBpbml0aWFsU3VwcGx5ID0gMTIwZTI0OwoKICAvLyA4MCBNaWxsaW9uIC0gQ3Jvd2RzYWxlIGxpbWl0CiAgdWludDI1NiBwdWJsaWMgbGltaXRDcm93ZHNhbGUgPSA4MGUyNDsKCiAgLy8gVG9rZW5zIERpc3RyaWJ1dGVkIC0gQ3Jvd2RzYWxlIEJ1eWVycwogIHVpbnQyNTYgcHVibGljIHRva2Vuc0Rpc3RyaWJ1dGVkQ3Jvd2RzYWxlID0gMDsKCiAgLy8gVGhlIGFkZHJlc3Mgb2YgdGhlIGNyb3dkc2FsZQogIGFkZHJlc3MgcHVibGljIGNyb3dkc2FsZTsKCiAgLy8gLS0gTU9ESUZJRVJTCgogIC8vIE1vZGlmaWVyLCBtdXN0IGJlIGNhbGxlZCBmcm9tIENyb3dkc2FsZSBjb250cmFjdAogIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGUoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3Jvd2RzYWxlKTsKICAgIF87CiAgfQoKICAvLyBDb25zdHJ1Y3RvciAtIHNlbmQgaW5pdGlhbCBzdXBwbHkgdG8gb3duZXIKICBmdW5jdGlvbiBDb3N0dW1lVG9rZW4oKSBwdWJsaWMgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OwogIH0KCiAgLy8gU2V0IGNyb3dkc2FsZSBhZGRyZXNzLCBvbmx5IGJ5IG93bmVyCiAgLy8gQHBhcmFtIC0gY3Jvd2RzYWxlIGFkZHJlc3MKICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVBZGRyZXNzKGFkZHJlc3MgX2Nyb3dkc2FsZSkgZXh0ZXJuYWwgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgcmVxdWlyZShjcm93ZHNhbGUgPT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9jcm93ZHNhbGUgIT0gYWRkcmVzcygwKSk7CiAgICBjcm93ZHNhbGUgPSBfY3Jvd2RzYWxlOwogIH0KCiAgLy8gRGlzdHJpYnV0ZSB0b2tlbnMsIG9ubHkgYnkgY3Jvd2RzYWxlCiAgLy8gQHBhcmFtIF9idXllciBUaGUgYnV5ZXIgYWRkcmVzcwogIC8vIEBwYXJhbSB0b2tlbnMgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gc2VuZCB0byB0aGF0IGFkZHJlc3MKICBmdW5jdGlvbiBkaXN0cmlidXRlQ3Jvd2RzYWxlVG9rZW5zKGFkZHJlc3MgX2J1eWVyLCB1aW50IHRva2VucykgZXh0ZXJuYWwgb25seUNyb3dkc2FsZSB3aGVuTm90UGF1c2VkIHsKICAgIHJlcXVpcmUoX2J1eWVyICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZSh0b2tlbnMgPiAwKTsKCiAgICByZXF1aXJlKHRva2Vuc0Rpc3RyaWJ1dGVkQ3Jvd2RzYWxlIDwgbGltaXRDcm93ZHNhbGUpOwogICAgcmVxdWlyZSh0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZS5hZGQodG9rZW5zKSA8PSBsaW1pdENyb3dkc2FsZSk7CgogICAgLy8gVGljayB1cCB0aGUgZGlzdHJpYnV0ZWQgYW1vdW50CiAgICB0b2tlbnNEaXN0cmlidXRlZENyb3dkc2FsZSA9IHRva2Vuc0Rpc3RyaWJ1dGVkQ3Jvd2RzYWxlLmFkZCh0b2tlbnMpOwoKICAgIC8vIEFkZCB0aGUgZnVuZHMgdG8gYnV5ZXIgYWRkcmVzcwogICAgYmFsYW5jZXNbX2J1eWVyXSA9IGJhbGFuY2VzW19idXllcl0uYWRkKHRva2Vucyk7CiAgfQoKfQoKY29udHJhY3QgQ3Jvd2RzYWxlIGlzIFBhdXNhYmxlIHsKICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogICBDb3N0dW1lVG9rZW4gcHVibGljIHRva2VuOwoKICAgLy8gMTIuMTUuMjAxNyAtIDEyOjAwOjAwIEdNVAogICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNTEzMzM5MjAwOwoKICAgLy8gMS4zMS4yMDE4IC0gMTI6MDA6MDAgR01UCiAgIHVpbnQyNTYgcHVibGljIGVuZFRpbWUgPSAxNTE3NDAwMDAwOwoKICAgLy8gQ29zdHVtZSBXYWxsZXQKICAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAgLy8gU2V0IHRpZXIgcmF0ZXMKICAgdWludDI1NiBwdWJsaWMgcmF0ZSA9IDM0MDA7CiAgIHVpbnQyNTYgcHVibGljIHJhdGVUaWVyMiA9IDMyMDA7CiAgIHVpbnQyNTYgcHVibGljIHJhdGVUaWVyMyA9IDMwMDA7CiAgIHVpbnQyNTYgcHVibGljIHJhdGVUaWVyNCA9IDI4MDA7CgogICAvLyBUaGUgbWF4aW11bSBhbW91bnQgb2Ygd2VpIGZvciBlYWNoIHRpZXIKICAgLy8gMjAgTWlsbGlvbiBJbnRlcnZhbHMKICAgdWludDI1NiBwdWJsaWMgbGltaXRUaWVyMSA9IDIwZTI0OwogICB1aW50MjU2IHB1YmxpYyBsaW1pdFRpZXIyID0gNDBlMjQ7CiAgIHVpbnQyNTYgcHVibGljIGxpbWl0VGllcjMgPSA2MGUyNDsKCiAgIC8vIDgwIE1pbGxpb24gVG9rZW5zIGF2YWlsYWJsZSBmb3IgY3Jvd2RzYWxlCiAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IG1heFRva2Vuc1JhaXNlZCA9IDgwZTI0OwoKICAgLy8gVGhlIGFtb3VudCBvZiB3ZWkgcmFpc2VkCiAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZCA9IDA7CgogICAvLyBUaGUgYW1vdW50IG9mIHRva2VucyByYWlzZWQKICAgdWludDI1NiBwdWJsaWMgdG9rZW5zUmFpc2VkID0gMDsKCiAgIC8vIDAuMSBldGhlciBtaW51bXVtIHBlciBjb250cmlidXRpb24KICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbWluUHVyY2hhc2UgPSAxMDAgZmlubmV5OwoKICAgLy8gQ3Jvd2RzYWxlIHRva2VucyBub3QgcHVyY2hhc2VkCiAgIGJvb2wgcHVibGljIHJlbWFpbmluZ1RyYW5zZmVyZWQgPSBmYWxzZTsKCiAgIC8vIFRoZSBudW1iZXIgb2YgdHJhbnNhY3Rpb25zCiAgIHVpbnQyNTYgcHVibGljIG51bWJlck9mVHJhbnNhY3Rpb25zOwoKICAgLy8gLS0gREFUQS1TRVRTCgogICAvLyBBbW91bnQgZWFjaCBhZGRyZXNzIHBhaWQgZm9yIHRva2VucwogICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGNyb3dkc2FsZUJhbGFuY2VzOwoKICAgLy8gQW1vdW50IG9mIHRva2VucyBlYWNoIGFkZHJlc3MgcmVjZWl2ZWQKICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyB0b2tlbnNCb3VnaHQ7CgogICAvLyAtLSBFVkVOVFMKCiAgIC8vIFRyaWdnZXIgVG9rZW5QdXJjaGFzZSBldmVudAogICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBidXllciwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnRPZlRva2Vucyk7CgogICAvLyBDcm93ZHNhbGUgRW5kZWQKICAgZXZlbnQgRmluYWxpemVkKCk7CgogICAvLyAtLSBNT0RJRklFUlMKCiAgIC8vIE9ubHkgYWxsb3cgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb24gYmVmb3JlIHRoZSBjcm93ZHNhbGUgc3RhcnRzCiAgIG1vZGlmaWVyIGJlZm9yZVN0YXJ0aW5nKCkgewogICAgICByZXF1aXJlKG5vdyA8IHN0YXJ0VGltZSk7CiAgICAgIF87CiAgIH0KCiAgIC8vIE1haW4gQ29uc3RydWN0b3IKICAgLy8gQHBhcmFtIF93YWxsZXQgLSBGdW5kIHdhbGxldCBhZGRyZXNzCiAgIC8vIEBwYXJhbSBfdG9rZW5BZGRyZXNzIC0gQXNzb2NpYXRlZCB0b2tlbiBhZGRyZXNzCiAgIC8vIEBwYXJhbSBfc3RhcnRUaW1lIC0gQ3Jvd2RzYWxlIHN0YXJ0IHRpbWUKICAgLy8gQHBhcmFtIF9lbmRUaW1lIC0gQ3Jvd2RzYWxlIGVuZCB0aW1lCiAgIGZ1bmN0aW9uIENyb3dkc2FsZSgKICAgICAgYWRkcmVzcyBfd2FsbGV0LAogICAgICBhZGRyZXNzIF90b2tlbkFkZHJlc3MsCiAgICAgIHVpbnQyNTYgX3N0YXJ0VGltZSwKICAgICAgdWludDI1NiBfZW5kVGltZQogICApIHB1YmxpYyB7CiAgICAgIHJlcXVpcmUoX3dhbGxldCAhPSBhZGRyZXNzKDApKTsKICAgICAgcmVxdWlyZShfdG9rZW5BZGRyZXNzICE9IGFkZHJlc3MoMCkpOwoKICAgICAgaWYgKF9zdGFydFRpbWUgPiAwICYmIF9lbmRUaW1lID4gMCkgewogICAgICAgICAgcmVxdWlyZShfc3RhcnRUaW1lIDwgX2VuZFRpbWUpOwogICAgICB9CgogICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgICB0b2tlbiA9IENvc3R1bWVUb2tlbihfdG9rZW5BZGRyZXNzKTsKCiAgICAgIGlmIChfc3RhcnRUaW1lID4gMCkgewogICAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgfQoKICAgICAgaWYgKF9lbmRUaW1lID4gMCkgewogICAgICAgICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgICB9CgogICB9CgogICAvLy8gQnV5IHRva2VucyBmYWxsYmFjawogICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgYnV5VG9rZW5zKCk7CiAgIH0KCiAgIC8vLyBCdXkgdG9rZW5zIG1haW4KICAgZnVuY3Rpb24gYnV5VG9rZW5zKCkgcHVibGljIHBheWFibGUgd2hlbk5vdFBhdXNlZCB7CiAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICAgIHVpbnQyNTYgdG9rZW5zID0gMDsKICAgICAgdWludDI1NiBhbW91bnRQYWlkID0gYWRqdXN0QW1vdW50VmFsdWUoKTsKCiAgICAgIGlmICh0b2tlbnNSYWlzZWQgPCBsaW1pdFRpZXIxKSB7CgogICAgICAgICAvLyBUaWVyIDEKICAgICAgICAgdG9rZW5zID0gYW1vdW50UGFpZC5tdWwocmF0ZSk7CgogICAgICAgICAvLyBJZiB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IHlvdSB3YW50IHRvIGJ1eSBnZXRzIG91dCBvZiB0aGlzIHRpZXIKICAgICAgICAgaWYgKHRva2Vuc1JhaXNlZC5hZGQodG9rZW5zKSA+IGxpbWl0VGllcjEpIHsKCiAgICAgICAgICAgIHRva2VucyA9IGFkanVzdFRva2VuVGllclZhbHVlKGFtb3VudFBhaWQsIGxpbWl0VGllcjEsIDEsIHJhdGUpOwogICAgICAgICB9CgogICAgICB9IGVsc2UgaWYgKHRva2Vuc1JhaXNlZCA+PSBsaW1pdFRpZXIxICYmIHRva2Vuc1JhaXNlZCA8IGxpbWl0VGllcjIpIHsKCiAgICAgICAgIC8vIFRpZXIgMgogICAgICAgICB0b2tlbnMgPSBhbW91bnRQYWlkLm11bChyYXRlVGllcjIpOwoKICAgICAgICAgIC8vIEJyZWFrcyB0aWVyIGNhcAogICAgICAgICBpZiAodG9rZW5zUmFpc2VkLmFkZCh0b2tlbnMpID4gbGltaXRUaWVyMikgewogICAgICAgICAgICB0b2tlbnMgPSBhZGp1c3RUb2tlblRpZXJWYWx1ZShhbW91bnRQYWlkLCBsaW1pdFRpZXIyLCAyLCByYXRlVGllcjIpOwogICAgICAgICB9CgogICAgICB9IGVsc2UgaWYgKHRva2Vuc1JhaXNlZCA+PSBsaW1pdFRpZXIyICYmIHRva2Vuc1JhaXNlZCA8IGxpbWl0VGllcjMpIHsKCiAgICAgICAgIC8vIFRpZXIgMwogICAgICAgICB0b2tlbnMgPSBhbW91bnRQYWlkLm11bChyYXRlVGllcjMpOwoKICAgICAgICAgLy8gQnJlYWtzIHRpZXIgY2FwCiAgICAgICAgIGlmICh0b2tlbnNSYWlzZWQuYWRkKHRva2VucykgPiBsaW1pdFRpZXIzKSB7CiAgICAgICAgICAgIHRva2VucyA9IGFkanVzdFRva2VuVGllclZhbHVlKGFtb3VudFBhaWQsIGxpbWl0VGllcjMsIDMsIHJhdGVUaWVyMyk7CiAgICAgICAgIH0KCiAgICAgIH0gZWxzZSBpZiAodG9rZW5zUmFpc2VkID49IGxpbWl0VGllcjMpIHsKCiAgICAgICAgIC8vIFRpZXIgNAogICAgICAgICB0b2tlbnMgPSBhbW91bnRQYWlkLm11bChyYXRlVGllcjQpOwoKICAgICAgfQoKICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZChhbW91bnRQYWlkKTsKICAgICAgdG9rZW5zUmFpc2VkID0gdG9rZW5zUmFpc2VkLmFkZCh0b2tlbnMpOwogICAgICB0b2tlbi5kaXN0cmlidXRlQ3Jvd2RzYWxlVG9rZW5zKG1zZy5zZW5kZXIsIHRva2Vucyk7CgogICAgICAvLyBLZWVwIHRoZSByZWNvcmRzCiAgICAgIHRva2Vuc0JvdWdodFttc2cuc2VuZGVyXSA9IHRva2Vuc0JvdWdodFttc2cuc2VuZGVyXS5hZGQodG9rZW5zKTsKCiAgICAgIC8vIEJyb2FkY2FzdCBldmVudAogICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGFtb3VudFBhaWQsIHRva2Vucyk7CgogICAgICAvLyBVcGRhdGUgcmVjb3JkcwogICAgICBudW1iZXJPZlRyYW5zYWN0aW9ucyA9IG51bWJlck9mVHJhbnNhY3Rpb25zLmFkZCgxKTsKCiAgICAgIGZvcndhcmRGdW5kcyhhbW91bnRQYWlkKTsKICAgfQoKICAgLy8gRm9yd2FyZCBmdW5kcyB0byBmdW5kIHdhbGxldAogICBmdW5jdGlvbiBmb3J3YXJkRnVuZHModWludDI1NiBhbW91bnRQYWlkKSBpbnRlcm5hbCB3aGVuTm90UGF1c2VkIHsKCiAgICAgLy8gU2VuZCBkaXJlY3RseSB0byBkZXYgd2FsbGV0CiAgICAgd2FsbGV0LnRyYW5zZmVyKGFtb3VudFBhaWQpOwogICB9CgogICAvLyBBZGp1c3Qgd2VpIGJhc2VkIG9uIHRpZXIsIHJlZnVuZCBpZiBuZWNlc3NhZXkKICAgZnVuY3Rpb24gYWRqdXN0QW1vdW50VmFsdWUoKSBpbnRlcm5hbCB3aGVuTm90UGF1c2VkIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IGFtb3VudFBhaWQgPSBtc2cudmFsdWU7CiAgICAgIHVpbnQyNTYgZGlmZmVyZW5jZVdlaSA9IDA7CgogICAgICAvLyBDaGVjayBmaW5hbCB0aWVyCiAgICAgIGlmKHRva2Vuc1JhaXNlZCA+PSBsaW1pdFRpZXIzKSB7CiAgICAgICAgIHVpbnQyNTYgYWRkZWRUb2tlbnMgPSB0b2tlbnNSYWlzZWQuYWRkKGFtb3VudFBhaWQubXVsKHJhdGVUaWVyNCkpOwoKICAgICAgICAgLy8gSGF2ZSB3ZSByZWFjaGVkIHRoZSBtYXg/CiAgICAgICAgIGlmKGFkZGVkVG9rZW5zID4gbWF4VG9rZW5zUmFpc2VkKSB7CgogICAgICAgICAgICAvLyBGaW5kIHRoZSBhbW91bnQgb3ZlciB0aGUgbWF4CiAgICAgICAgICAgIHVpbnQyNTYgZGlmZmVyZW5jZSA9IGFkZGVkVG9rZW5zLnN1YihtYXhUb2tlbnNSYWlzZWQpOwogICAgICAgICAgICBkaWZmZXJlbmNlV2VpID0gZGlmZmVyZW5jZS5kaXYocmF0ZVRpZXI0KTsKICAgICAgICAgICAgYW1vdW50UGFpZCA9IGFtb3VudFBhaWQuc3ViKGRpZmZlcmVuY2VXZWkpOwogICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIFVwZGF0ZSBiYWxhbmNlcyBkYXRhc2V0CiAgICAgIGNyb3dkc2FsZUJhbGFuY2VzW21zZy5zZW5kZXJdID0gY3Jvd2RzYWxlQmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKGFtb3VudFBhaWQpOwoKICAgICAgLy8gVHJhbnNmZXIgYXQgdGhlIGVuZAogICAgICBpZiAoZGlmZmVyZW5jZVdlaSA+IDApIG1zZy5zZW5kZXIudHJhbnNmZXIoZGlmZmVyZW5jZVdlaSk7CgogICAgICByZXR1cm4gYW1vdW50UGFpZDsKICAgfQoKICAgLy8gU2V0IC8gY2hhbmdlIHRpZXIgcmF0ZXMKICAgLy8gQHBhcmFtIHRpZXIxIC0gdGllcjQgLSBSYXRlIHBlciB0aWVyCiAgIGZ1bmN0aW9uIHNldFRpZXJSYXRlcyh1aW50MjU2IHRpZXIxLCB1aW50MjU2IHRpZXIyLCB1aW50MjU2IHRpZXIzLCB1aW50MjU2IHRpZXI0KQogICAgICBleHRlcm5hbCBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCB7CgogICAgICByZXF1aXJlKHRpZXIxID4gMCAmJiB0aWVyMiA+IDAgJiYgdGllcjMgPiAwICYmIHRpZXI0ID4gMCk7CiAgICAgIHJlcXVpcmUodGllcjEgPiB0aWVyMiAmJiB0aWVyMiA+IHRpZXIzICYmIHRpZXIzID4gdGllcjQpOwoKICAgICAgcmF0ZSA9IHRpZXIxOwogICAgICByYXRlVGllcjIgPSB0aWVyMjsKICAgICAgcmF0ZVRpZXIzID0gdGllcjM7CiAgICAgIHJhdGVUaWVyNCA9IHRpZXI0OwogICB9CgogICAvLyBBZGp1c3QgdG9rZW4gcGVyIHRpZXIsIHJldHVybiB3ZWkgaWYgbmVjZXNzYXkKICAgLy8gQHBhcmFtIGFtb3VudCAtIEFtb3VudCBidXllciBwYWlkCiAgIC8vIEBwYXJhbSB0b2tlbnNUaGlzVGllciAtIFRva2VucyBpbiB0aWVyCiAgIC8vIEBwYXJhbSB0aWVyU2VsZWN0ZWQgLSBUaGUgY3VycmVudCB0aWVyCiAgIC8vIEBwYXJhbSBfcmF0ZSAtIEN1cnJlbnQgcmF0ZQogICBmdW5jdGlvbiBhZGp1c3RUb2tlblRpZXJWYWx1ZSgKICAgICAgdWludDI1NiBhbW91bnQsCiAgICAgIHVpbnQyNTYgdG9rZW5zVGhpc1RpZXIsCiAgICAgIHVpbnQyNTYgdGllclNlbGVjdGVkLAogICAgICB1aW50MjU2IF9yYXRlCiAgICkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2IHRvdGFsVG9rZW5zKSB7CiAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCAmJiB0b2tlbnNUaGlzVGllciA+IDAgJiYgX3JhdGUgPiAwKTsKICAgICAgcmVxdWlyZSh0aWVyU2VsZWN0ZWQgPj0gMSAmJiB0aWVyU2VsZWN0ZWQgPD0gNCk7CgogICAgICB1aW50IHdlaVRoaXNUaWVyID0gdG9rZW5zVGhpc1RpZXIuc3ViKHRva2Vuc1JhaXNlZCkuZGl2KF9yYXRlKTsKICAgICAgdWludCB3ZWlOZXh0VGllciA9IGFtb3VudC5zdWIod2VpVGhpc1RpZXIpOwogICAgICB1aW50IHRva2Vuc05leHRUaWVyID0gMDsKICAgICAgYm9vbCByZXR1cm5Ub2tlbnMgPSBmYWxzZTsKCiAgICAgIC8vIElmIHRoZXJlJ3MgZXhjZXNzaXZlIHdlaSBmb3IgdGhlIGxhc3QgdGllciwgcmVmdW5kIHRob3NlCiAgICAgIGlmKHRpZXJTZWxlY3RlZCAhPSA0KSB7CgogICAgICAgICB0b2tlbnNOZXh0VGllciA9IGNhbGN1bGF0ZVRva2Vuc1BlclRpZXIod2VpTmV4dFRpZXIsIHRpZXJTZWxlY3RlZC5hZGQoMSkpOwoKICAgICAgfSBlbHNlIHsKCiAgICAgICAgIHJldHVyblRva2VucyA9IHRydWU7CgogICAgICB9CgogICAgICB0b3RhbFRva2VucyA9IHRva2Vuc1RoaXNUaWVyLnN1Yih0b2tlbnNSYWlzZWQpLmFkZCh0b2tlbnNOZXh0VGllcik7CgogICAgICAvLyBEbyB0aGUgdHJhbnNmZXIgYXQgdGhlIGVuZAogICAgICBpZiAocmV0dXJuVG9rZW5zKSBtc2cuc2VuZGVyLnRyYW5zZmVyKHdlaU5leHRUaWVyKTsKICAgfQoKICAgLy8gUmV0dXJuIHRva2VuIGFtb3VudCBiYXNlZCBvbiB3ZWkgcGFpZAogICAvLyBAcGFyYW0gd2VpUGFpZCAtIEFtb3VudCBidXllciBwYWlkCiAgIC8vIEBwYXJhbSB0aWVyU2VsZWN0ZWQgLSBUaGUgY3VycmVudCB0aWVyCiAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2Vuc1BlclRpZXIodWludDI1NiB3ZWlQYWlkLCB1aW50MjU2IHRpZXJTZWxlY3RlZCkKICAgICAgICBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgY2FsY3VsYXRlZFRva2VucykKICAgIHsKICAgICAgcmVxdWlyZSh3ZWlQYWlkID4gMCk7CiAgICAgIHJlcXVpcmUodGllclNlbGVjdGVkID49IDEgJiYgdGllclNlbGVjdGVkIDw9IDQpOwoKICAgICAgaWYgKHRpZXJTZWxlY3RlZCA9PSAxKSB7CgogICAgICAgICBjYWxjdWxhdGVkVG9rZW5zID0gd2VpUGFpZC5tdWwocmF0ZSk7CgogICAgICB9IGVsc2UgaWYgKHRpZXJTZWxlY3RlZCA9PSAyKSB7CgogICAgICAgICBjYWxjdWxhdGVkVG9rZW5zID0gd2VpUGFpZC5tdWwocmF0ZVRpZXIyKTsKCiAgICAgIH0gZWxzZSBpZiAodGllclNlbGVjdGVkID09IDMpIHsKCiAgICAgICAgIGNhbGN1bGF0ZWRUb2tlbnMgPSB3ZWlQYWlkLm11bChyYXRlVGllcjMpOwoKICAgICAgfSBlbHNlIHsKCiAgICAgICAgIGNhbGN1bGF0ZWRUb2tlbnMgPSB3ZWlQYWlkLm11bChyYXRlVGllcjQpOwogICAgIH0KICAgfQoKICAgLy8gQ29uZmlybSB2YWxpZCBwdXJjaGFzZQogICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgIGJvb2wgd2l0aGluUGVyaW9kID0gbm93ID49IHN0YXJ0VGltZSAmJiBub3cgPD0gZW5kVGltZTsKICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgPiAwOwogICAgICBib29sIHdpdGhpblRva2VuTGltaXQgPSB0b2tlbnNSYWlzZWQgPCBtYXhUb2tlbnNSYWlzZWQ7CiAgICAgIGJvb2wgbWluaW11bVB1cmNoYXNlID0gbXNnLnZhbHVlID49IG1pblB1cmNoYXNlOwoKICAgICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2UgJiYgd2l0aGluVG9rZW5MaW1pdCAmJiBtaW5pbXVtUHVyY2hhc2U7CiAgIH0KCiAgIC8vIENoZWNrIGlmIHNhbGUgZW5kZWQKICAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhib29sKSB7CiAgICAgICByZXR1cm4gbm93ID4gZW5kVGltZSB8fCB0b2tlbnNSYWlzZWQgPj0gbWF4VG9rZW5zUmFpc2VkOwogICB9CgogICAvLyBGaW5hbGl6ZSBpZiBlbmRlZAogICBmdW5jdGlvbiBjb21wbGV0ZUNyb3dkc2FsZSgpIGV4dGVybmFsIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHsKICAgICAgIHJlcXVpcmUoaGFzRW5kZWQoKSk7CgogICAgICAgLy8gVHJhbnNmZXIgbGVmdCBvdmVyIHRva2VucwogICAgICAgdHJhbnNmZXJUb2tlbnNMZWZ0T3ZlcigpOwoKICAgICAgIC8vIENhbGwgZmluYWxpemVkIGV2ZW50CiAgICAgICBGaW5hbGl6ZWQoKTsKICAgfQoKICAgLy8gVHJhbnNmZXIgYW55IHJlbWFpbmluZyB0b2tlbnMgZnJvbSBDcm93ZHNhbGUKICAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlbnNMZWZ0T3ZlcigpIGludGVybmFsIHsKICAgICAgIHJlcXVpcmUoIXJlbWFpbmluZ1RyYW5zZmVyZWQpOwogICAgICAgcmVxdWlyZShtYXhUb2tlbnNSYWlzZWQgPiB0b2tlbnNSYWlzZWQpOwoKICAgICAgIHJlbWFpbmluZ1RyYW5zZmVyZWQgPSB0cnVlOwoKICAgICAgIHVpbnQyNTYgcmVtYWluaW5nVG9rZW5zID0gbWF4VG9rZW5zUmFpc2VkLnN1Yih0b2tlbnNSYWlzZWQpOwogICAgICAgdG9rZW4uZGlzdHJpYnV0ZUNyb3dkc2FsZVRva2Vucyhtc2cuc2VuZGVyLCByZW1haW5pbmdUb2tlbnMpOwogICB9CgogICAvLyBDaGFuZ2UgZGF0ZXMgYmVmb3JlIGNyb3dkc2FsZSBoYXMgc3RhcnRlZAogICAvLyBAcGFyYW0gX3N0YXJ0VGltZSAtIE5ldyBzdGFydCB0aW1lCiAgIC8vIEBwYXJhbSBfZW5kVGltZSAtIE5ldyBlbmQgdGltZQogICBmdW5jdGlvbiBjaGFuZ2VEYXRlcyh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUpCiAgICAgICAgZXh0ZXJuYWwgb25seU93bmVyIGJlZm9yZVN0YXJ0aW5nCiAgICB7CgogICAgICAgaWYgKF9zdGFydFRpbWUgPiAwICYmIF9lbmRUaW1lID4gMCkgewogICAgICAgICAgIHJlcXVpcmUoX3N0YXJ0VGltZSA8IF9lbmRUaW1lKTsKICAgICAgIH0KCiAgICAgICBpZiAoX3N0YXJ0VGltZSA+IDApIHsKICAgICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgICAgfQoKICAgICAgIGlmIChfZW5kVGltZSA+IDApIHsKICAgICAgICAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICAgICB9CiAgIH0KCiAgIC8vIENoYW5nZSB0aGUgZW5kIGRhdGUKICAgLy8gQHBhcmFtIF9lbmRUaW1lIC0gTmV3IGVuZCB0aW1lCiAgIGZ1bmN0aW9uIGNoYW5nZUVuZERhdGUodWludDI1NiBfZW5kVGltZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgICAgIHJlcXVpcmUoX2VuZFRpbWUgPiBzdGFydFRpbWUpOwogICAgICAgcmVxdWlyZShfZW5kVGltZSA+IG5vdyk7CiAgICAgICByZXF1aXJlKCFoYXNFbmRlZCgpKTsKCiAgICAgICBpZiAoX2VuZFRpbWUgPiAwKSB7CiAgICAgICAgICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgICAgfQogICB9Cgp9'.
	

]
