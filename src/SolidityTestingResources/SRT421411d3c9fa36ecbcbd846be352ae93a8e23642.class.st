Class {
	#name : #SRT421411d3c9fa36ecbcbd846be352ae93a8e23642,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT421411d3c9fa36ecbcbd846be352ae93a8e23642 >> base64 [
	^ ''.
	

]
