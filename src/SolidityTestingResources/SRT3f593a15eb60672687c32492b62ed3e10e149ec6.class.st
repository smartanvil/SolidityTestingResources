Class {
	#name : #SRT3f593a15eb60672687c32492b62ed3e10e149ec6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f593a15eb60672687c32492b62ed3e10e149ec6 >> base64 [
	^ 'Y29udHJhY3QgRXRoZXJpemF0aW9uIHsKICAgIAogICAgLy8gMSBldGggc3RhcnRpbmcgcHJpY2UKICAgIHVpbnQgcHVibGljIFNUQVJUX1BSSUNFID0gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIC8vIDAuOCBldGggY2l0eSBidWlsZCBwcmljZQogICAgdWludCBwdWJsaWMgQ0lUWV9QUklDRSA9IDgwMDAwMDAwMDAwMDAwMDAwMDsKICAgIC8vIDAuNSBldGggYnVpbGRpbmcgYnVpbGQgcHJpY2UKICAgIHVpbnQgcHVibGljIEJVSUxESU5HX1BSSUNFID0gNTAwMDAwMDAwMDAwMDAwMDAwOwogICAgLy8gMC4yIGV0aCB1bml0IGJ1aWxkIHByaWNlCiAgICB1aW50IHB1YmxpYyBVTklUX1BSSUNFID0gMjAwMDAwMDAwMDAwMDAwMDAwOwogICAgLy8gMC4wMiBldGggdW5pdCBtYWludGVuYW5jZSBwcmljZQogICAgdWludCBwdWJsaWMgTUFJTlRfUFJJQ0UgPSAyMDAwMDAwMDAwMDAwMDAwMDsKICAgIC8vIDAuMSBldGggbWluIHdpdGhkcmF3IGFtb3VudCB0byBwcmV2ZW50IHNwYW0KICAgIHVpbnQgcHVibGljIE1JTl9XVEggPSAxMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAKICAgIC8vIG1pbmltdW0gdGltZSB0byB3YWl0IGJldHdlZW4gbW92ZXMgaW4gc2Vjb25kcwogICAgdWludCBwdWJsaWMgV0FJVF9USU1FID0gMTQ0MDA7CiAgICB1aW50IE1BUF9ST1dTID0gMzQ7CiAgICB1aW50IE1BUF9DT0xTID0gMzQ7CiAgICAKICAgIAogICAgc3RydWN0IENpdHkgewogICAgICAgIHVpbnQgb3duZXI7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgLy8gMCAtIHF1YXJyeSwgMSAtIGZhcm0sIDIgLSB3b29kd29ya3MsIDMgLSBtZXRhbHdvcmtzLCA0IC1zdGFibGVzCiAgICAgICAgYm9vbFs1XSBidWlsZGluZ3M7CiAgICAgICAgLy8gMSAtIHBpa2VtZW4sIDIgLSBzd29yZHNtZW4sIDMgLSBob3JzZW1lbgogICAgICAgIHVpbnRbMTBdIHVuaXRzOyAvL21heGltdW0gbnVtIG9mIHVuaXRzIHBlciBjaXR5IDEwCiAgICAgICAgdWludFsyXSByb3djb2w7CiAgICAgICAgaW50IHByZXZpb3VzSUQ7CiAgICAgICAgaW50IG5leHRJRDsKICAgIH0KICAgIAogICAgc3RydWN0IFBsYXllciB7CiAgICAgICAgLy8gUGxheWVyIGFkZHJlc3MKICAgICAgICBhZGRyZXNzIGV0aGVyQWRkcmVzczsKICAgICAgICAvLyBUaGVpciBuYW1lCiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgLy8gVGhlaXIgdHJlYXN1cnkgYmFsYW5jZQogICAgICAgIHVpbnQgdHJlYXN1cnk7CiAgICAgICAgLy8gVGhlaXIgY2FwaXRvbAogICAgICAgIHVpbnQgY2FwaXRvbDsKICAgICAgICAvLyBOdW1iZXIgb2YgY2l0aWVzIHRoZSBwbGF5ZXIgaGFzIHVuZGVyIGNvbnRyb2wKICAgICAgICB1aW50IG51bUNpdGllczsKICAgICAgICB1aW50IG51bVVuaXRzOwogICAgICAgIC8vIFdoZW4gd2FzIHRoZWlyIGxhc3QgbW92ZSAoYmFzZWQgb24gYmxvY2sudGltZXN0YW1wKQogICAgICAgIHVpbnQgbGFzdFRpbWVzdGFtcDsKICAgIH0KICAgIAogICAgUGxheWVyIHBsYXllcjsKICAgIFBsYXllcltdIHB1YmxpYyBwbGF5ZXJzOwogICAgdWludCBwdWJsaWMgbnVtUGxheWVycyA9IDA7CiAgICAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwbGF5ZXJJRHM7CiAgICBtYXBwaW5nKHVpbnQgPT4gdWludCkgcHVibGljIHBsYXllck1zZ3M7CiAgICAKICAgIENpdHkgY2l0eTsKICAgIENpdHlbXSBwdWJsaWMgY2l0aWVzOwogICAgdWludCBwdWJsaWMgbnVtQ2l0aWVzID0gMDsKICAgIAogICAgdWludFtdIHB1YmxpYyBxdWFycnlDaXRpZXM7CiAgICB1aW50W10gcHVibGljIGZhcm1DaXRpZXM7CiAgICB1aW50W10gcHVibGljIHdvb2R3b3Jrc0NpdGllczsKICAgIHVpbnRbXSBwdWJsaWMgbWV0YWx3b3Jrc0NpdGllczsKICAgIHVpbnRbXSBwdWJsaWMgc3RhYmxlc0NpdGllczsKICAgIAogICAgdWludFszNF1bMzRdIHB1YmxpYyBtYXA7CgogICAgYWRkcmVzcyB3aXphcmRBZGRyZXNzOwogICAgCiAgICBhZGRyZXNzIHV0aWxzQWRkcmVzczsKICAgIGFkZHJlc3MgdXRpbHNBZGRyZXNzMjsKICAgIAogICAgLy8gU3VtIG9mIGFsbCBwbGF5ZXJzJyBiYWxhbmNlcwogICAgdWludCBwdWJsaWMgdG90YWxCYWxhbmNlcyA9IDA7CgogICAgLy8gVXNlZCB0byBlbnN1cmUgb25seSB0aGUgb3duZXIgY2FuIGRvIHNvbWUgdGhpbmdzLgogICAgbW9kaWZpZXIgb25seXdpemFyZCB7IGlmIChtc2cuc2VuZGVyID09IHdpemFyZEFkZHJlc3MpIF87IH0gICAgCiAgICAvLyBVc2VkIHRvIGVuc3VyZSBvbmx5IHRoZSB1dGlscyBjb250cmFjdCBjYW4gZG8gc29tZSB0aGluZ3MuCiAgICBtb2RpZmllciBvbmx5dXRpbHMgeyBpZiAobXNnLnNlbmRlciA9PSB1dGlsc0FkZHJlc3MgfHwgbXNnLnNlbmRlciA9PSB1dGlsc0FkZHJlc3MyKSBfOyB9CgoKICAgIC8vIFNldHMgdXAgZGVmYXVsdHMuCiAgICBmdW5jdGlvbiBFdGhlcml6YXRpb24oKSB7CiAgICAgICAgd2l6YXJkQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgZnVuY3Rpb24gc3RhcnQoc3RyaW5nIHBsYXllck5hbWUsIHN0cmluZyBjaXR5TmFtZSwgdWludCByb3csIHVpbnQgY29sLCB1aW50IHJvd3JlZiwgdWludCBjb2xyZWYpIHsKICAgICAgICAKICAgICAgICAKICAgICAgICAvLyBJZiB0aGV5IHBhaWQgdG9vIGxpdHRsZSwgcmVqZWN0IGFuZCByZWZ1bmQgdGhlaXIgbW9uZXkuCiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IFNUQVJUX1BSSUNFKSB7CiAgICAgICAgICAgIC8vbXNnLnNlbmRlci5zZW5kKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIC8vcGxheWVyTXNnc1ttc2cuc2VuZGVyXSA9ICJOb3QgZW5vdWdoIGV0aGVyIHNlbnQgdG8gZm91bmQgYSBjaXR5IGFuZCBzdGFydCBwbGF5aW5nLiBTZW5kaW5nIGJhY2sgYW55IGV0aCBzZW50Li4uIjsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBJZiB0aGUgcGxheWVyIGFscmVhZHkgZXhpc3RzCiAgICAgICAgaWYgKHBsYXllcklEc1ttc2cuc2VuZGVyXSA+IDApIHsKICAgICAgICAgICAgLy9tc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKTsKICAgICAgICAgICAgLy9wbGF5ZXJNc2dzW21zZy5zZW5kZXJdID0gICJZb3UgYWxyZWFkeSBmb3VuZGVkIGFuIGV0aGVyaXphdGlvbi4gTG9va3VwIHlvdXIgcGxheWVyIElEIGJ5IGNhbGxpbmcgZ2V0TXlQbGF5ZXJJRCgpLiBTZW5kaW5nIGJhY2sgYW55IGV0aCBzZW50Li4uIjsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBwbGF5ZXIuZXRoZXJBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgICAgICBwbGF5ZXIubmFtZSA9IHBsYXllck5hbWU7CiAgICAgICAgcGxheWVyLnRyZWFzdXJ5ID0gbXNnLnZhbHVlOwogICAgICAgIHRvdGFsQmFsYW5jZXMgKz0gbXNnLnZhbHVlOwogICAgICAgIHBsYXllci5jYXBpdG9sID0gbnVtQ2l0aWVzOwogICAgICAgIHBsYXllci5udW1DaXRpZXMgPSAxOwogICAgICAgIHBsYXllci5udW1Vbml0cyA9IDE7CgogICAgICAgIHBsYXllcnMucHVzaChwbGF5ZXIpOwogICAgICAgIAogICAgICAgIGNpdHkub3duZXIgPSBudW1QbGF5ZXJzOwogICAgICAgIGNpdHkubmFtZSA9IGNpdHlOYW1lOwogICAgICAgIC8vIHRoZSBmaXJzdCBjaXR5IGluIHRoZSBnYW1lIGhhcyBhIHF1YXJyeSBhbmQgYSBmYXJtIGJ5IGRlZmF1bHQKICAgICAgICBpZihudW1DaXRpZXMgPD0gMCkgewogICAgICAgICAgICBjaXR5LmJ1aWxkaW5nc1swXSA9IHRydWU7CiAgICAgICAgICAgIHF1YXJyeUNpdGllcy5wdXNoKDApOwogICAgICAgICAgICBjaXR5LmJ1aWxkaW5nc1sxXSA9IHRydWU7CiAgICAgICAgICAgIGZhcm1DaXRpZXMucHVzaCgwKTsKICAgICAgICAgICAgY2l0eS5yb3djb2xbMF0gPSAxMDsKICAgICAgICAgICAgY2l0eS5yb3djb2xbMV0gPSAxMDsKICAgICAgICAgICAgbWFwWzEwXVsxMF0gPSBudW1QbGF5ZXJzKzE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2l0eS5idWlsZGluZ3NbMF0gPSBmYWxzZTsKICAgICAgICAgICAgY2l0eS5idWlsZGluZ3NbMV0gPSBmYWxzZTsKICAgICAgICAgICAgaWYocm93PjMzIHx8IGNvbD4zMyB8fCByb3dyZWY+MzMgfHwgY29scmVmPjMzIHx8IGludChyb3cpLWludChyb3dyZWYpID4gaW50KDEpIHx8IGludChyb3cpLWludChyb3dyZWYpIDwgaW50KC0xKSB8fCBpbnQoY29sKS1pbnQoY29scmVmKSA+IGludCgxKSB8fCBpbnQoY29sKS1pbnQoY29scmVmKSA8IGludCgtMSkgfHwgbWFwW3Jvd11bY29sXT4wIHx8IG1hcFtyb3dyZWZdW2NvbHJlZl08PTApIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNpdHkucm93Y29sWzBdID0gcm93OwogICAgICAgICAgICBjaXR5LnJvd2NvbFsxXSA9IGNvbDsKICAgICAgICAgICAgbWFwW3Jvd11bY29sXSA9IG51bVBsYXllcnMrMTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHBsYXllcnNbbnVtUGxheWVyc10udHJlYXN1cnkgLT0gU1RBUlRfUFJJQ0U7CiAgICAgICAgICAgIC8vIGRpc3RyaWJ1dGUgYnVpbGQgZnVuZHMgdG8gcHJvZHVjdGlvbiB0eXBlIGJ1aWxkaW5nIG93bmVycwogICAgICAgICAgICB1aW50IHByb2R1Y3Rpb25DdXQ7CiAgICAgICAgICAgIHVpbnQgaTsKICAgICAgICAgICAgcHJvZHVjdGlvbkN1dCA9IFNUQVJUX1BSSUNFIC8gcXVhcnJ5Q2l0aWVzLmxlbmd0aDsKICAgICAgICAgICAgZm9yKGk9MDsgaSA8IHF1YXJyeUNpdGllcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcGxheWVyc1tjaXRpZXNbcXVhcnJ5Q2l0aWVzW2ldXS5vd25lcl0udHJlYXN1cnkgKz0gcHJvZHVjdGlvbkN1dDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjaXR5LnVuaXRzWzBdID0gMTsgIC8vcGlrZW1lbiBndWFyZHMgYSBjaXR5IGJ5IGRlZmF1bHQKICAgICAgICBjaXR5LnByZXZpb3VzSUQgPSAtMTsKICAgICAgICBjaXR5Lm5leHRJRCA9IC0xOwogICAgICAgIAogICAgICAgIGNpdGllcy5wdXNoKGNpdHkpOwogICAgICAgIAogICAgICAgIHBsYXllcklEc1ttc2cuc2VuZGVyXSA9IG51bVBsYXllcnMrMTsgLy90byBkaXN0aW5ndWlzaCBpdCBmcm9tIHRoZSBkZWZhdWx0IDAKICAgICAgICBudW1QbGF5ZXJzKys7CiAgICAgICAgbnVtQ2l0aWVzKys7CiAgICAgICAgCiAgICAgICAgcGxheWVyTXNnc1twbGF5ZXJJRHNbbXNnLnNlbmRlcl0tMV0gPSAxICsgcm93KjEwMCArIGNvbCoxMDAwMDsKICAgICAgICBwbGF5ZXJzW251bVBsYXllcnMtMV0ubGFzdFRpbWVzdGFtcCA9IG5vdzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZGVwb3NpdCgpIHsKICAgICAgICBwbGF5ZXJzW3BsYXllcklEc1ttc2cuc2VuZGVyXS0xXS50cmVhc3VyeSArPSBtc2cudmFsdWU7CiAgICAgICAgdG90YWxCYWxhbmNlcyArPSBtc2cudmFsdWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgYW1vdW50KSB7CiAgICAgICAgaWYoaW50KHBsYXllcklEc1ttc2cuc2VuZGVyXSktMSA8IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHVpbnQgcGxheWVySUQgPSBwbGF5ZXJJRHNbbXNnLnNlbmRlcl0tMTsKICAgICAgICBpZih0aW1lUGFzc2VkKHBsYXllcklEKSA8IFdBSVRfVElNRSkgewogICAgICAgICAgICBwbGF5ZXJNc2dzW3BsYXllcklEc1ttc2cuc2VuZGVyXS0xXSA9IDI7CiAgICAgICAgICAgIHJldHVybjsgICAgICAgIAogICAgICAgIH0KICAgICAgICBpZihhbW91bnQgPCBwbGF5ZXJzW3BsYXllcklEXS50cmVhc3VyeSAmJiBhbW91bnQgPiBNSU5fV1RIKSB7CiAgICAgICAgICAgIHBsYXllcnNbcGxheWVySURdLnRyZWFzdXJ5IC09IGFtb3VudDsKICAgICAgICAgICAgdG90YWxCYWxhbmNlcyAtPSBhbW91bnQ7CiAgICAgICAgICAgIHBsYXllcnNbcGxheWVySURdLmV0aGVyQWRkcmVzcy5zZW5kKChhbW91bnQqOTkpLzEwMCk7IC8va2VlcCAxJSBhcyBjb21taXNzaW9uCiAgICAgICAgfQogICAgfQogICAgCiAgICAKICAgIAogICAgZnVuY3Rpb24gZ2V0TXlQbGF5ZXJJRCgpIGNvbnN0YW50IHJldHVybnMgKGludCBJRCkgewogICAgICAgIHJldHVybiBpbnQocGxheWVySURzW21zZy5zZW5kZXJdKS0xOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRNeU1zZygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcykgewogICAgICAgIHJldHVybiBwbGF5ZXJNc2dzW3BsYXllcklEc1ttc2cuc2VuZGVyXS0xXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0Q2l0eSh1aW50IGNpdHlJRCkgY29uc3RhbnQgcmV0dXJucyAodWludCBvd25lciwgc3RyaW5nIGNpdHlOYW1lLCBib29sWzVdIGJ1aWxkaW5ncywgdWludFsxMF0gdW5pdHMsIHVpbnRbMl0gcm93Y29sLCBpbnQgcHJldmlvdXNJRCwgaW50IG5leHRJRCkgewogICAgICAgIHJldHVybiAoY2l0aWVzW2NpdHlJRF0ub3duZXIsIGNpdGllc1tjaXR5SURdLm5hbWUsIGNpdGllc1tjaXR5SURdLmJ1aWxkaW5ncywgY2l0aWVzW2NpdHlJRF0udW5pdHMsIGNpdGllc1tjaXR5SURdLnJvd2NvbCwgY2l0aWVzW2NpdHlJRF0ucHJldmlvdXNJRCwgY2l0aWVzW2NpdHlJRF0ubmV4dElEKTsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiB0aW1lUGFzc2VkKHVpbnQgcGxheWVySUQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdHApIHsKICAgICAgICByZXR1cm4gKG5vdyAtIHBsYXllcnNbcGxheWVySURdLmxhc3RUaW1lc3RhbXApOwogICAgfQoKCiAgICAvLyBVc2VkIG9ubHkgYnkgdGhlIHdpemFyZCB0byBjaGVjayBoaXMgY29tbWlzc2lvbi4KICAgIGZ1bmN0aW9uIGdldENvbW1pc3Npb24oKSBvbmx5d2l6YXJkIGNvbnN0YW50IHJldHVybnMgKHVpbnQgY29tKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZS10b3RhbEJhbGFuY2VzOwogICAgfQoKICAgIC8vIFVzZWQgb25seSBieSB0aGUgd2l6YXJkIHRvIGNvbGxlY3QgaGlzIGNvbW1pc3Npb24uCiAgICBmdW5jdGlvbiBzd2VlcENvbW1pc3Npb24odWludCBhbW91bnQpIG9ubHl3aXphcmQgewogICAgICAgIGlmKGFtb3VudCA8IHRoaXMuYmFsYW5jZS10b3RhbEJhbGFuY2VzKSB7CiAgICAgICAgICAgIHdpemFyZEFkZHJlc3Muc2VuZChhbW91bnQpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgCiAgICAKICAgIGZ1bmN0aW9uIHNldFV0aWxzKGFkZHJlc3MgYSkgb25seXdpemFyZCB7CiAgICAgICAgdXRpbHNBZGRyZXNzID0gYTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VXRpbHMyKGFkZHJlc3MgYSkgb25seXdpemFyZCB7CiAgICAgICAgdXRpbHNBZGRyZXNzMiA9IGE7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFBsYXllcklEKGFkZHJlc3Mgc2VuZGVyKSBvbmx5dXRpbHMgY29uc3RhbnQgcmV0dXJucyAodWludCBwbGF5ZXJJRCkgewogICAgICAgIGlmKGludChwbGF5ZXJJRHNbc2VuZGVyXSktMSA8IDApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwbGF5ZXJJRHNbc2VuZGVyXS0xOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRXd0xlbmd0aCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgbGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHdvb2R3b3Jrc0NpdGllcy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldE13TGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBsZW5ndGgpIHsKICAgICAgICByZXR1cm4gbWV0YWx3b3Jrc0NpdGllcy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFN0TGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBsZW5ndGgpIHsKICAgICAgICByZXR1cm4gc3RhYmxlc0NpdGllcy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEZtTGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBsZW5ndGgpIHsKICAgICAgICByZXR1cm4gZmFybUNpdGllcy5sZW5ndGg7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFFyTGVuZ3RoKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBsZW5ndGgpIHsKICAgICAgICByZXR1cm4gcXVhcnJ5Q2l0aWVzLmxlbmd0aDsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXRNc2coYWRkcmVzcyBzZW5kZXIsIHVpbnQgcykgb25seXV0aWxzIHsKICAgICAgICBwbGF5ZXJNc2dzW3BsYXllcklEc1tzZW5kZXJdLTFdID0gczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0TnVtQ2l0aWVzKHVpbnQgbmMpIG9ubHl1dGlscyB7CiAgICAgICAgbnVtQ2l0aWVzID0gbmM7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFVuaXQodWludCBjaXR5SUQsIHVpbnQgaSwgdWludCB1bml0VHlwZSkgb25seXV0aWxzIHsKICAgICAgICBjaXRpZXNbY2l0eUlEXS51bml0c1tpXSA9IHVuaXRUeXBlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRPd25lcih1aW50IGNpdHlJRCwgdWludCBvd25lcikgb25seXV0aWxzIHsKICAgICAgICBjaXRpZXNbY2l0eUlEXS5vd25lciA9IG93bmVyOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXROYW1lKHVpbnQgY2l0eUlELCBzdHJpbmcgbmFtZSkgb25seXV0aWxzIHsKICAgICAgICBjaXRpZXNbY2l0eUlEXS5uYW1lID0gbmFtZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0UHJldmlvdXNJRCh1aW50IGNpdHlJRCwgaW50IHByZXZpb3VzSUQpIG9ubHl1dGlscyB7CiAgICAgICAgY2l0aWVzW2NpdHlJRF0ucHJldmlvdXNJRCA9IHByZXZpb3VzSUQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldE5leHRJRCh1aW50IGNpdHlJRCwgaW50IG5leHRJRCkgb25seXV0aWxzIHsKICAgICAgICBjaXRpZXNbY2l0eUlEXS5uZXh0SUQgPSBuZXh0SUQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFJvd2NvbCh1aW50IGNpdHlJRCwgdWludFsyXSByb3djb2wpIG9ubHl1dGlscyB7CiAgICAgICAgY2l0aWVzW2NpdHlJRF0ucm93Y29sID0gcm93Y29sOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRNYXAodWludCByb3csIHVpbnQgY29sLCB1aW50IGluZCkgb25seXV0aWxzIHsKICAgICAgICBtYXBbcm93XVtjb2xdID0gaW5kOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRDYXBpdG9sKHVpbnQgcGxheWVySUQsIHVpbnQgY2FwaXRvbCkgb25seXV0aWxzIHsKICAgICAgICBwbGF5ZXJzW3BsYXllcklEXS5jYXBpdG9sID0gY2FwaXRvbDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXROdW1Vbml0cyh1aW50IHBsYXllcklELCB1aW50IG51bVVuaXRzKSBvbmx5dXRpbHMgewogICAgICAgIHBsYXllcnNbcGxheWVySURdLm51bVVuaXRzID0gbnVtVW5pdHM7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldE51bUNpdGllcyh1aW50IHBsYXllcklELCB1aW50IG51bUNpdGllcykgb25seXV0aWxzIHsKICAgICAgICBwbGF5ZXJzW3BsYXllcklEXS5udW1DaXRpZXMgPSBudW1DaXRpZXM7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFRyZWFzdXJ5KHVpbnQgcGxheWVySUQsIHVpbnQgdHJlYXN1cnkpIG9ubHl1dGlscyB7CiAgICAgICAgcGxheWVyc1twbGF5ZXJJRF0udHJlYXN1cnkgPSB0cmVhc3VyeTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0TGFzdFRpbWVzdGFtcCh1aW50IHBsYXllcklELCB1aW50IHRpbWVzdGFtcCkgb25seXV0aWxzIHsKICAgICAgICBwbGF5ZXJzW3BsYXllcklEXS5sYXN0VGltZXN0YW1wID0gdGltZXN0YW1wOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRCdWlsZGluZyh1aW50IGNpdHlJRCwgdWludCBidWlsZGluZ1R5cGUpIG9ubHl1dGlscyB7CiAgICAgICAgY2l0aWVzW2NpdHlJRF0uYnVpbGRpbmdzW2J1aWxkaW5nVHlwZV0gPSB0cnVlOwogICAgICAgIGlmKGJ1aWxkaW5nVHlwZSA9PSAwKSB7CiAgICAgICAgICAgIHF1YXJyeUNpdGllcy5wdXNoKGNpdHlJRCk7CiAgICAgICAgfSBlbHNlIGlmKGJ1aWxkaW5nVHlwZSA9PSAxKSB7CiAgICAgICAgICAgIGZhcm1DaXRpZXMucHVzaChjaXR5SUQpOwogICAgICAgIH0gZWxzZSBpZihidWlsZGluZ1R5cGUgPT0gMikgewogICAgICAgICAgICB3b29kd29ya3NDaXRpZXMucHVzaChjaXR5SUQpOwogICAgICAgIH0gZWxzZSBpZihidWlsZGluZ1R5cGUgPT0gMykgewogICAgICAgICAgICBtZXRhbHdvcmtzQ2l0aWVzLnB1c2goY2l0eUlEKTsKICAgICAgICB9IGVsc2UgaWYoYnVpbGRpbmdUeXBlID09IDQpIHsKICAgICAgICAgICAgc3RhYmxlc0NpdGllcy5wdXNoKGNpdHlJRCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBwdXNoQ2l0eSgpIG9ubHl1dGlscyB7CiAgICAgICAgY2l0eS5idWlsZGluZ3NbMF0gPSBmYWxzZTsKICAgICAgICBjaXR5LmJ1aWxkaW5nc1sxXSA9IGZhbHNlOwogICAgICAgIGNpdGllcy5wdXNoKGNpdHkpOwogICAgfQoKfQoKCgoKCmNvbnRyYWN0IEV0aGVyaXphdGlvblV0aWxzMiB7CiAgICAKICAgIHVpbnQgcGxheWVySUQ7CiAgICB1aW50IG93bmVyUzsKICAgIHVpbnQgb3duZXJUOwogICAgdWludCBudW1Vbml0c1M7CiAgICB1aW50IG51bUNpdGllc1M7CiAgICB1aW50IHRyZWFzdXJ5UzsKICAgIHVpbnQgbnVtVW5pdHNUOwogICAgdWludCBudW1DaXRpZXNUOwogICAgdWludCB0cmVhc3VyeVQ7CiAgICB1aW50IGo7CiAgICB1aW50IGJlc3RUeXBlOwogICAgdWludCBiZXN0VHlwZUluZDsKICAgIHVpbnQgcmFuOwogICAgYm9vbCB3aW47CiAgICBib29sIGNpdHlDYXB0dXJlZCA9IGZhbHNlOwogICAgCiAgICBFdGhlcml6YXRpb24gcHVibGljIGU7CiAgICAKICAgIGFkZHJlc3Mgd2l6YXJkQWRkcmVzczsKICAgIAogICAgLy8gVXNlZCB0byBlbnN1cmUgb25seSB0aGUgb3duZXIgY2FuIGRvIHNvbWUgdGhpbmdzLgogICAgbW9kaWZpZXIgb25seXdpemFyZCB7IGlmIChtc2cuc2VuZGVyID09IHdpemFyZEFkZHJlc3MpIF87IH0gICAgCiAgICAKICAgIGZ1bmN0aW9uIEV0aGVyaXphdGlvblV0aWxzMigpIHsKICAgICAgICB3aXphcmRBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0ZShhZGRyZXNzIGEpIG9ubHl3aXphcmQgewogICAgICAgIGUgPSBFdGhlcml6YXRpb24oYSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGF0dGFjayh1aW50IHNvdXJjZSwgdWludCB0YXJnZXQsIHVpbnRbXSB1bml0SW5keHMpIHsKICAgICAgICB1aW50WzJdIG1lbW9yeSBzUm93Y29sOwogICAgICAgIHVpbnRbMl0gbWVtb3J5IHRSb3djb2w7CiAgICAgICAgdWludFsxMF0gbWVtb3J5IHVuaXRzUzsKICAgICAgICB1aW50WzEwXSBtZW1vcnkgdW5pdHNUOwogICAgICAgIAogICAgICAgIHBsYXllcklEID0gZS5nZXRQbGF5ZXJJRChtc2cuc2VuZGVyKTsKICAgICAgICAKICAgICAgICBpZihlLnRpbWVQYXNzZWQocGxheWVySUQpIDwgZS5XQUlUX1RJTUUoKSkgewogICAgICAgICAgICBlLnNldE1zZyhtc2cuc2VuZGVyLCAyKTsKICAgICAgICAgICAgcmV0dXJuOyAgICAgICAgCiAgICAgICAgfQogICAgICAgIAogICAgICAgIChvd25lclMsLCx1bml0c1Msc1Jvd2NvbCwsKSA9IGUuZ2V0Q2l0eShzb3VyY2UpOwogICAgICAgIChvd25lclQsLCx1bml0c1QsdFJvd2NvbCwsKSA9IGUuZ2V0Q2l0eSh0YXJnZXQpOwogICAgICAgICgsLHRyZWFzdXJ5UywsbnVtQ2l0aWVzUyxudW1Vbml0c1MsKSA9IGUucGxheWVycyhvd25lclMpOwogICAgICAgICgsLHRyZWFzdXJ5VCwsbnVtQ2l0aWVzVCxudW1Vbml0c1QsKSA9IGUucGxheWVycyhvd25lclQpOwogICAgICAgIGlmKHBsYXllcklEICE9IG93bmVyUyB8fCBwbGF5ZXJJRCA9PSBvd25lclQgfHwgaW50KHNSb3djb2xbMF0pLWludCh0Um93Y29sWzBdKSA+IGludCgxKSB8fCBpbnQoc1Jvd2NvbFswXSktaW50KHRSb3djb2xbMF0pIDwgaW50KC0xKSB8fCBpbnQoc1Jvd2NvbFsxXSktaW50KHRSb3djb2xbMV0pID4gaW50KDEpIHx8IGludChzUm93Y29sWzFdKS1pbnQodFJvd2NvbFsxXSkgPCBpbnQoLTEpKSB7CiAgICAgICAgICAgIGUuc2V0TXNnKG1zZy5zZW5kZXIsIDE3KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY2l0eUNhcHR1cmVkID0gZmFsc2U7CiAgICAgICAgZm9yKHVpbnQgaT0wOyBpPHVuaXRJbmR4cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBiZXN0VHlwZSA9IDA7CiAgICAgICAgICAgIHdpbiA9IGZhbHNlOwogICAgICAgICAgICByYW4gPSB1aW50MzIoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlci0xLWkpKS80Mjk0OTY3MzsgLy9yYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgMTAwIChkaXZpZGUgYnkgTUFYX1VJTlQzMi8xMDApCiAgICAgICAgICAgIC8vIGlmIGF0dGFja2VkIGJ5IHBpa2VtZW4gLSB0cnkgdG8gZmluZCBzd29yZHNtZW4gb3IgbmV4dCBiZXN0IHVuaXQKICAgICAgICAgICAgaWYodW5pdHNTW3VuaXRJbmR4c1tpXV09PTEpIHsKICAgICAgICAgICAgICAgIGJlc3RUeXBlID0gMDsKICAgICAgICAgICAgICAgIGJlc3RUeXBlSW5kID0gMDsKICAgICAgICAgICAgICAgIGZvcihqPTA7IGo8dW5pdHNULmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYodW5pdHNUW2pdID09IDEgJiYgYmVzdFR5cGUhPTIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZUluZCA9IGo7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHVuaXRzVFtqXSA9PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RUeXBlID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFR5cGVJbmQgPSBqOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodW5pdHNUW2pdID09IDMgJiYgYmVzdFR5cGUhPTIgJiYgYmVzdFR5cGUhPTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZUluZCA9IGo7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoYmVzdFR5cGU9PTEpIHsKICAgICAgICAgICAgICAgICAgICBpZihyYW4gPiA1MCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW4gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZihiZXN0VHlwZT09MikgewogICAgICAgICAgICAgICAgICAgIGlmKHJhbiA+IDc1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJlc3RUeXBlPT0zKSB7CiAgICAgICAgICAgICAgICAgICAgaWYocmFuID4gMjUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNpdHlDYXB0dXJlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gaWYgYXR0YWNrZWQgYnkgc3dvcmRzbWVuIC0gdHJ5IHRvIGZpbmQgaG9yc2VtZW4gb3IgbmV4dCBiZXN0IHVuaXQKICAgICAgICAgICAgZWxzZSBpZih1bml0c1NbdW5pdEluZHhzW2ldXT09MikgewogICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAwOwogICAgICAgICAgICAgICAgYmVzdFR5cGVJbmQgPSAwOwogICAgICAgICAgICAgICAgZm9yKGo9MDsgajx1bml0c1QubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBpZih1bml0c1Rbal0gPT0gMiAmJiBiZXN0VHlwZSE9MykgewogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZSA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RUeXBlSW5kID0gajsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodW5pdHNUW2pdID09IDMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZUluZCA9IGo7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih1bml0c1Rbal0gPT0gMSAmJiBiZXN0VHlwZSE9MyAmJiBiZXN0VHlwZSE9MikgewogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RUeXBlSW5kID0gajsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihiZXN0VHlwZT09MSkgewogICAgICAgICAgICAgICAgICAgIGlmKHJhbiA+IDI1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJlc3RUeXBlPT0yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYocmFuID4gNTApIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYmVzdFR5cGU9PTMpIHsKICAgICAgICAgICAgICAgICAgICBpZihyYW4gPiA3NSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW4gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2l0eUNhcHR1cmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpZiBhdHRhY2tlZCBieSBob3JzZW1lbiAtIHRyeSB0byBmaW5kIHBpa2VtZW4gb3IgbmV4dCBiZXN0IHVuaXQKICAgICAgICAgICAgZWxzZSBpZih1bml0c1NbdW5pdEluZHhzW2ldXT09MykgewogICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAwOwogICAgICAgICAgICAgICAgYmVzdFR5cGVJbmQgPSAwOwogICAgICAgICAgICAgICAgZm9yKGo9MDsgajx1bml0c1QubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBpZih1bml0c1Rbal0gPT0gMyAmJiBiZXN0VHlwZSE9MSkgewogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZSA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RUeXBlSW5kID0gajsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodW5pdHNUW2pdID09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFR5cGUgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZUluZCA9IGo7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih1bml0c1Rbal0gPT0gMiAmJiBiZXN0VHlwZSE9MSAmJiBiZXN0VHlwZSE9MykgewogICAgICAgICAgICAgICAgICAgICAgICBiZXN0VHlwZSA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RUeXBlSW5kID0gajsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihiZXN0VHlwZT09MSkgewogICAgICAgICAgICAgICAgICAgIGlmKHJhbiA+IDc1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJlc3RUeXBlPT0yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYocmFuID4gMjUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYmVzdFR5cGU9PTMpIHsKICAgICAgICAgICAgICAgICAgICBpZihyYW4gPiA1MCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW4gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2l0eUNhcHR1cmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpZiBhdHRhY2tlZCBieSBuby11bml0IGRvIG5vdGhpbmcKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoY2l0eUNhcHR1cmVkKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih3aW4pIHsKICAgICAgICAgICAgICAgIHVuaXRzVFtiZXN0VHlwZUluZF0gPSAwOyAvL2tpbGwgZGVmZW5kaW5nIHVuaXQKICAgICAgICAgICAgICAgIGUuc2V0VW5pdCh0YXJnZXQsIGJlc3RUeXBlSW5kLCAwKTsgLy9raWxsIGRlZmVuZGluZyB1bml0CiAgICAgICAgICAgICAgICBudW1Vbml0c1QtLTsKICAgICAgICAgICAgICAgIGUuc2V0TnVtVW5pdHMob3duZXJULCBudW1Vbml0c1QpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdW5pdHNTW3VuaXRJbmR4c1tpXV0gPSAwOyAvL2tpbGwgYXR0YWNraW5nIHVuaXQKICAgICAgICAgICAgICAgIGUuc2V0VW5pdChzb3VyY2UsIHVuaXRJbmR4c1tpXSwgMCk7IC8va2lsbCBhdHRhY2tpbmcgdW5pdAogICAgICAgICAgICAgICAgbnVtVW5pdHNTLS07CiAgICAgICAgICAgICAgICBlLnNldE51bVVuaXRzKHBsYXllcklELCBudW1Vbml0c1MpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKGNpdHlDYXB0dXJlZCkgewogICAgICAgICAgICAvL21hcmNoIGludG8gdGhlIGNpdHkKICAgICAgICAgICAgaiA9IDA7CiAgICAgICAgICAgIGZvcig7IGkgPCB1bml0SW5keHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGUuc2V0VW5pdCh0YXJnZXQsIGosIHVuaXRzU1t1bml0SW5keHNbaV1dKTsKICAgICAgICAgICAgICAgIGUuc2V0VW5pdChzb3VyY2UsIHVuaXRJbmR4c1tpXSwgMCk7CiAgICAgICAgICAgICAgICBqKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vcGx1bmRlciB0cmVhc3VyeSBmcmFjdGlvbgogICAgICAgICAgICB1aW50IHRyZWFzdXJ5RnJhY3Rpb24gPSB0cmVhc3VyeVQvbnVtQ2l0aWVzVDsKICAgICAgICAgICAgZS5zZXROdW1DaXRpZXMob3duZXJULCBudW1DaXRpZXNULTEpOwogICAgICAgICAgICBlLnNldFRyZWFzdXJ5KG93bmVyVCwgdHJlYXN1cnlULXRyZWFzdXJ5RnJhY3Rpb24pOwogICAgICAgICAgICBlLnNldFRyZWFzdXJ5KHBsYXllcklELCB0cmVhc3VyeVMrdHJlYXN1cnlGcmFjdGlvbik7CiAgICAgICAgICAgIGUuc2V0TnVtQ2l0aWVzKHBsYXllcklELCBudW1DaXRpZXNTKzEpOwogICAgICAgICAgICAKICAgICAgICAgICAgaW50IHByZXZpb3VzSUQ7CiAgICAgICAgICAgIGludCBuZXh0SUQ7CiAgICAgICAgICAgIHVpbnQgY2FwaXRvbDsKICAgICAgICAgICAgLy9yZW1vdmUgdGhlIGxpbmsgdG8gdGhlIGNpdHkgaW4gbG9zaW5nIHBsYXllcidzIGNpdHkgY2hhaQogICAgICAgICAgICAoLCwsLCwscHJldmlvdXNJRCxuZXh0SUQpID0gZS5nZXRDaXR5KHRhcmdldCk7CiAgICAgICAgICAgIGlmKHByZXZpb3VzSUQgPj0gMCkgewogICAgICAgICAgICAgICAgZS5zZXROZXh0SUQodWludChwcmV2aW91c0lEKSwgbmV4dElEKTsKICAgICAgICAgICAgICAgICgsLCxjYXBpdG9sLCwsKSA9IGUucGxheWVycyhvd25lclQpOwogICAgICAgICAgICAgICAgaWYoY2FwaXRvbCA9PSB0YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICBlLnNldENhcGl0b2woY2FwaXRvbCwgdWludChwcmV2aW91c0lEKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYobmV4dElEID49IDApIHsKICAgICAgICAgICAgICAgIGUuc2V0UHJldmlvdXNJRCh1aW50KG5leHRJRCksIHByZXZpb3VzSUQpOwogICAgICAgICAgICAgICAgaWYoY2FwaXRvbCA9PSB0YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICBlLnNldENhcGl0b2woY2FwaXRvbCwgdWludChuZXh0SUQpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgZS5zZXRPd25lcih0YXJnZXQsIG93bmVyUyk7CiAgICAgICAgICAgIGUuc2V0TWFwKHRSb3djb2xbMF0sIHRSb3djb2xbMV0sIG93bmVyUysxKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICgsLCwsLCxwcmV2aW91c0lELG5leHRJRCkgPSBlLmdldENpdHkoc291cmNlKTsKICAgICAgICAgICAgLy9hZGQgdGhlIGNpdHkgdG8gd2lubmluZyBwbGF5ZXIncyBjaXR5IGNoYWluCiAgICAgICAgICAgIGUuc2V0UHJldmlvdXNJRCh0YXJnZXQsIGludChzb3VyY2UpKTsKICAgICAgICAgICAgZS5zZXROZXh0SUQodGFyZ2V0LCBuZXh0SUQpOwogICAgICAgICAgICBpZihuZXh0SUQgPj0gMCkgewogICAgICAgICAgICAgICAgZS5zZXRQcmV2aW91c0lEKHVpbnQobmV4dElEKSwgaW50KHRhcmdldCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGUuc2V0TmV4dElEKHNvdXJjZSwgaW50KHRhcmdldCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZS5zZXRNc2cobXNnLnNlbmRlciwgMTggKyB0Um93Y29sWzBdKjEwMCArIHRSb3djb2xbMV0qMTAwMDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGUuc2V0TXNnKG1zZy5zZW5kZXIsIDE5ICsgdFJvd2NvbFswXSoxMDAgKyB0Um93Y29sWzFdKjEwMDAwKTsKICAgICAgICB9CiAgICAgICAgZS5zZXRMYXN0VGltZXN0YW1wKHBsYXllcklELCBub3cpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidWlsZENpdHkoc3RyaW5nIGNpdHlOYW1lLCB1aW50WzJdIHJvd2NvbCwgdWludFsyXSByb3djb2xyZWYpIHsKICAgICAgICBwbGF5ZXJJRCA9IGUuZ2V0UGxheWVySUQobXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgaWYoZS50aW1lUGFzc2VkKHBsYXllcklEKSA8IGUuV0FJVF9USU1FKCkpIHsKICAgICAgICAgICAgZS5zZXRNc2cobXNnLnNlbmRlciwgMik7CiAgICAgICAgICAgIHJldHVybjsgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50IHRyZWFzdXJ5OwogICAgICAgIHVpbnQgbnVtQ2l0aWVzOwogICAgICAgIHVpbnQgbnVtVW5pdHM7CiAgICAgICAgdWludCBjYXBpdG9sOwogICAgICAgICgsLHRyZWFzdXJ5LGNhcGl0b2wsbnVtQ2l0aWVzLG51bVVuaXRzLCkgPSBlLnBsYXllcnMocGxheWVySUQpOwogICAgICAgIGlmKHRyZWFzdXJ5IDwgZS5DSVRZX1BSSUNFKCkpIHsKICAgICAgICAgICAgZS5zZXRNc2cobXNnLnNlbmRlciwgNik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGUuc2V0VHJlYXN1cnkocGxheWVySUQsIHRyZWFzdXJ5LWUuQ0lUWV9QUklDRSgpKTsKICAgICAgICAKICAgICAgICBpZihyb3djb2xbMF0+MzMgfHwgcm93Y29sWzFdPjMzIHx8IHJvd2NvbHJlZlswXT4zMyB8fCByb3djb2xyZWZbMV0+MzMgfHwgaW50KHJvd2NvbFswXSktaW50KHJvd2NvbHJlZlswXSkgPiBpbnQoMSkgfHwgaW50KHJvd2NvbFswXSktaW50KHJvd2NvbHJlZlswXSkgPCBpbnQoLTEpIHx8IGludChyb3djb2xbMV0pLWludChyb3djb2xyZWZbMV0pID4gaW50KDEpIHx8IGludChyb3djb2xbMV0pLWludChyb3djb2xyZWZbMV0pIDwgaW50KC0xKSB8fCBlLm1hcChyb3djb2xbMF0scm93Y29sWzFdKT4wIHx8IGUubWFwKHJvd2NvbHJlZlswXSxyb3djb2xyZWZbMV0pPD0wKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCiAgICAgICAgLy8gZGlzdHJpYnV0ZSBidWlsZCBmdW5kcyB0byBwcm9kdWN0aW9uIHR5cGUgYnVpbGRpbmcgb3duZXJzCiAgICAgICAgdWludCBwcm9kdWN0aW9uQ3V0OwogICAgICAgIHVpbnQgb3duZXI7CiAgICAgICAgaW50IGk7CiAgICAgICAgcHJvZHVjdGlvbkN1dCA9IGUuQ0lUWV9QUklDRSgpIC8gZS5nZXRRckxlbmd0aCgpOwogICAgICAgIGZvcihpPTA7IHVpbnQoaSkgPCBlLmdldFFyTGVuZ3RoKCk7IGkrKykgewogICAgICAgICAgICAob3duZXIsKSA9IGUuY2l0aWVzKGUucXVhcnJ5Q2l0aWVzKHVpbnQoaSkpKTsKICAgICAgICAgICAgKCwsdHJlYXN1cnksLCwsKSA9IGUucGxheWVycyhvd25lcik7CiAgICAgICAgICAgIGUuc2V0VHJlYXN1cnkob3duZXIsIHRyZWFzdXJ5K3Byb2R1Y3Rpb25DdXQpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBlLnNldE51bUNpdGllcyhwbGF5ZXJJRCwgbnVtQ2l0aWVzKzEpOwogICAgICAgIGUuc2V0TnVtVW5pdHMocGxheWVySUQsIG51bVVuaXRzKzEpOwoKICAgICAgICBlLnB1c2hDaXR5KCk7CiAgICAgICAgZS5zZXRPd25lcihlLm51bUNpdGllcygpLCBwbGF5ZXJJRCk7CiAgICAgICAgZS5zZXROYW1lKGUubnVtQ2l0aWVzKCksIGNpdHlOYW1lKTsKICAgICAgICBlLnNldFVuaXQoZS5udW1DaXRpZXMoKSwgMCwgMSk7ICAgLy9waWtlbWVuIGd1YXJkcyBhIGNpdHkgYnkgZGVmYXVsdAogICAgICAgIAogICAgICAgIGUuc2V0Um93Y29sKGUubnVtQ2l0aWVzKCksIHJvd2NvbCk7CiAgICAgICAgZS5zZXRNYXAocm93Y29sWzBdLCByb3djb2xbMV0sIHBsYXllcklEKzEpOwogICAgICAgIAogICAgICAgIC8vIGlmIHBsYXllciBoYXMgbm8gY2l0aWVzIGN1cnJlbnRseQogICAgICAgIGlmKG51bUNpdGllczwxKSB7CiAgICAgICAgICAgIGUuc2V0Q2FwaXRvbChwbGF5ZXJJRCwgZS5udW1DaXRpZXMoKSk7CiAgICAgICAgICAgIGUuc2V0UHJldmlvdXNJRChlLm51bUNpdGllcygpLCAtMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW50IG5leHRJRDsKICAgICAgICAgICAgaSA9IGludChjYXBpdG9sKTsKICAgICAgICAgICAgKCxuZXh0SUQpID0gZS5nZXRDaXR5KHVpbnQoaSkpOwogICAgICAgICAgICBmb3IoOyBuZXh0SUQgPj0gMCA7KSB7CiAgICAgICAgICAgICAgICBpID0gbmV4dElEOwogICAgICAgICAgICAgICAgKCxuZXh0SUQpID0gZS5nZXRDaXR5KHVpbnQoaSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGUuc2V0TmV4dElEKHVpbnQoaSksIGludChlLm51bUNpdGllcygpKSk7CiAgICAgICAgICAgIGUuc2V0UHJldmlvdXNJRChlLm51bUNpdGllcygpLCBpKTsKICAgICAgICB9CiAgICAgICAgZS5zZXROZXh0SUQoZS5udW1DaXRpZXMoKSwgLTEpOwoKICAgICAgICBlLnNldE51bUNpdGllcyhlLm51bUNpdGllcygpKzEpOwogICAgICAgIAogICAgICAgIGUuc2V0TXNnKG1zZy5zZW5kZXIsIDIwICsgcm93Y29sWzBdKjEwMCArIHJvd2NvbFsxXSoxMDAwMCk7CiAgICAgICAgZS5zZXRMYXN0VGltZXN0YW1wKHBsYXllcklELCBub3cpOwogICAgfQogICAgCn0='.
	

]
