Class {
	#name : #SRT2ca70f6f8ebd683d5afc20d426839ef40e063f02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ca70f6f8ebd683d5afc20d426839ef40e063f02 >> base64 [
	^ ''.
	

]
