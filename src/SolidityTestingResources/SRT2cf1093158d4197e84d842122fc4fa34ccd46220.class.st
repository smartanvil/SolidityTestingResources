Class {
	#name : #SRT2cf1093158d4197e84d842122fc4fa34ccd46220,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2cf1093158d4197e84d842122fc4fa34ccd46220 >> base64 [
	^ 'Y29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKY29udHJhY3QgU2hhcmVUb2tlbiB7CiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdUb2tlbiAwLjEnOwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICBhZGRyZXNzIHB1YmxpYyBjb3Jwb3JhdGlvbkNvbnRyYWN0OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaWRlbnRpdHlBcHByb3ZlZDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHZvdGVMb2NrOyAvLyB1c2VyIG11c3Qga2VlcCBhdCBsZWFzdCAxIHNoYXJlIGlmIHRoZXkgYXJlIGludm9sdmVkIGluIHZvdGluZyAgVHJ1ZT1sb2NrZWQKCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgLy9ldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGJlZm9yZXNlbmRlciwgdWludDI1NiBiZWZvcmVyZWNlaXZlciwgdWludDI1NiB2YWx1ZSwgdWludDI1NiB0aW1lKTsKCiAgICB1aW50MjU2IHB1YmxpYyB0cmFuc2ZlckNvdW50ID0gMDsKCgogICAgc3RydWN0IHBhc3R0cmFuc2ZlciB7CiAgICAgIGFkZHJlc3MgIGZyb207CiAgICAgIGFkZHJlc3MgIHRvOwogICAgICB1aW50MjU2IGJlZm9yZXNlbmRlcjsKICAgICAgdWludDI1NiBiZWZvcmVyZWNlaXZlcjsKICAgICAgdWludDI1NiB2YWx1ZTsKICAgICAgdWludDI1NiB0aW1lOwogICAgfQoKICAgIHBhc3R0cmFuc2ZlcltdIHRyYW5zZmVyczsKCiAgICBtb2RpZmllciBvbmx5Q29ycCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29ycG9yYXRpb25Db250cmFjdCk7CiAgICAgICAgXzsKICAgIH0KICAgIC8vIFNlbmRlcjogQ29ycG9yYXRpb24gIC0tLT4KICAgIGZ1bmN0aW9uIFNoYXJlVG9rZW4oKSB7CgogICAgfQoKICAgIGZ1bmN0aW9uIGluaXQodWludDI1NiBpbml0aWFsU3VwcGx5LCBzdHJpbmcgdG9rZW5OYW1lLCB1aW50OCBkZWNpbWFsVW5pdHMsIHN0cmluZyB0b2tlblN5bWJvbCwgYWRkcmVzcyBfb3duZXIpIHsKICAgICAgY29ycG9yYXRpb25Db250cmFjdCA9IG1zZy5zZW5kZXI7CiAgICAgIGJhbGFuY2VPZltfb3duZXJdID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICBpZGVudGl0eUFwcHJvdmVkW19vd25lcl0gPSB0cnVlOwogICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQogICAgICBhbGxvd2FuY2VbX293bmVyXVtjb3Jwb3JhdGlvbkNvbnRyYWN0XSA9ICh0b3RhbFN1cHBseSAtIDEpOyAgIC8vIEFsbG93IGNvcnBvcmF0aW9uIHRvIHNlbGwgc2hhcmVzIHRvIG5ldyBtZW1iZXJzIGlmIGFwcHJvdmVkCiAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlTWVtYmVyKGFkZHJlc3MgX25ld01lbWJlcikgcHVibGljICByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWRlbnRpdHlBcHByb3ZlZFtfbmV3TWVtYmVyXSA9IHRydWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gVHJhbnNmZXIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IGJlZm9yZXNlbmRlciwgdWludDI1NiBiZWZvcmVyZWNlaXZlciwgdWludDI1NiB2YWx1ZSwgdWludDI1NiB0aW1lKSB7CiAgICAgIHRyYW5zZmVyQ291bnQrKzsKICAgICAgcGFzdHRyYW5zZmVyIG1lbW9yeSB0OwogICAgICB0LmZyb20gPSBmcm9tOwogICAgICB0LnRvID0gdG87CiAgICAgIHQuYmVmb3Jlc2VuZGVyID0gYmVmb3Jlc2VuZGVyOwogICAgICB0LmJlZm9yZXJlY2VpdmVyID0gYmVmb3JlcmVjZWl2ZXI7CiAgICAgIHQudmFsdWUgPSB2YWx1ZTsKICAgICAgdC50aW1lID0gdGltZTsKICAgICAgdHJhbnNmZXJzLnB1c2godCk7CiAgICB9CgogICAgLy8gLyogU2VuZCBjb2lucyAqLwogICAgLy8gIG11c3QgaGF2ZSBpZGVudGl0eUFwcHJvdmVkICsgY2FuJ3Qgc2VsbCBsYXN0IHRva2VuIHVzaW5nIHRyYW5zZmVyCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IChfdmFsdWUgKyAxKSkgcmV2ZXJ0KCk7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGlkZW50aXR5QXBwcm92ZWRbX3RvXSk7CiAgICAgICAgdWludDI1NiByZWNlaXZlciA9IGJhbGFuY2VPZltfdG9dOwogICAgICAgIHVpbnQyNTYgc2VuZGVyID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdOwogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgc2VuZGVyLCByZWNlaXZlciwgX3ZhbHVlLCBub3cpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgfQogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbXVuaWNhdGUgdGhlIGFwcHJvdmVkIGNvbnRyYWN0IGluIGEgc2luZ2xlIHR4ICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCAoX3ZhbHVlICsgMSkpIHJldmVydCgpOyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldmVydCgpOyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXZlcnQoKTsgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICByZXF1aXJlKGlkZW50aXR5QXBwcm92ZWRbX3RvXSk7CiAgICAgICAgdWludDI1NiByZWNlaXZlciA9IGJhbGFuY2VPZltfdG9dOwogICAgICAgIHVpbnQyNTYgc2VuZGVyID0gYmFsYW5jZU9mW19mcm9tXTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90byxzZW5kZXIsIHJlY2VpdmVyLCBfdmFsdWUsIG5vdyk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvKiBUaGlzIHVubmFtZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIHNvbWVvbmUgdHJpZXMgdG8gc2VuZCBldGhlciB0byBpdCAqLwogICAgZnVuY3Rpb24gKCkgewogICAgICAgIHJldmVydCgpOyAgICAgLy8gUHJldmVudHMgYWNjaWRlbnRhbCBzZW5kaW5nIG9mIGV0aGVyCiAgICB9CgogICAgZnVuY3Rpb24gaXNBcHByb3ZlZChhZGRyZXNzIF91c2VyKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGlkZW50aXR5QXBwcm92ZWRbX3VzZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFRyYW5zZmVyQ291bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGNvdW50KSB7CiAgICAgIHJldHVybiB0cmFuc2ZlckNvdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFRyYW5zZmVyKHVpbnQyNTYgaSkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IGJlZm9yZXNlbmRlciwgdWludDI1NiBiZWZvcmVyZWNlaXZlciwgdWludDI1NiB2YWx1ZSwgdWludDI1NiB0aW1lKSB7CiAgICAgIHBhc3R0cmFuc2ZlciBtZW1vcnkgdCA9IHRyYW5zZmVyc1tpXTsKICAgICAgcmV0dXJuICh0LmZyb20sIHQudG8sIHQuYmVmb3Jlc2VuZGVyLCB0LmJlZm9yZXJlY2VpdmVyLCB0LnZhbHVlLCB0LnRpbWUpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAgICovCiAgICBmdW5jdGlvbiBnZXRCYWxhbmNlKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgcmV0dXJuIGJhbGFuY2VPZltfb3duZXJdOwogICAgfQp9'.
	

]
