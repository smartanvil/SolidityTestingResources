Class {
	#name : #SRT21bceeef718a0928c2cc1f1d980bab5993f837ba,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT21bceeef718a0928c2cc1f1d980bab5993f837ba >> base64 [
	^ ''.
	

]
