Class {
	#name : #SRT22aefe116a5c49ab5120725c6d52c2cffa81b87f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22aefe116a5c49ab5120725c6d52c2cffa81b87f >> base64 [
	^ ''.
	

]
