Class {
	#name : #SRT4a78ace8fe213f4eb57f0de5911525fdb490feff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4a78ace8fe213f4eb57f0de5911525fdb490feff >> base64 [
	^ ''.
	

]
