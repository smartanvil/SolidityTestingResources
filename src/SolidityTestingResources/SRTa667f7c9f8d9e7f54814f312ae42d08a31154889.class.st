Class {
	#name : #SRTa667f7c9f8d9e7f54814f312ae42d08a31154889,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa667f7c9f8d9e7f54814f312ae42d08a31154889 >> base64 [
	^ ''.
	

]
