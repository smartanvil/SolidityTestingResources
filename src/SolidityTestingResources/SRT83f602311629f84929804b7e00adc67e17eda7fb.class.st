Class {
	#name : #SRT83f602311629f84929804b7e00adc67e17eda7fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT83f602311629f84929804b7e00adc67e17eda7fb >> base64 [
	^ ''.
	

]
