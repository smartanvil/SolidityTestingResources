Class {
	#name : #SRT0ff1b8bb68f9421e682730188238b27bc1ca24ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ff1b8bb68f9421e682730188238b27bc1ca24ff >> base64 [
	^ ''.
	

]
