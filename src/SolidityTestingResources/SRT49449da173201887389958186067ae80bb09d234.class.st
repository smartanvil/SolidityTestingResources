Class {
	#name : #SRT49449da173201887389958186067ae80bb09d234,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT49449da173201887389958186067ae80bb09d234 >> base64 [
	^ ''.
	

]
