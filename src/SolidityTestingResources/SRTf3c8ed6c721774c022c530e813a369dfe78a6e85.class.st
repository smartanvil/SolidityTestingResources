Class {
	#name : #SRTf3c8ed6c721774c022c530e813a369dfe78a6e85,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf3c8ed6c721774c022c530e813a369dfe78a6e85 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCi8vIFRoZSBiZWxvdyB0d28gaW50ZXJmYWNlcyAoS2l0dHlDb3JlIGFuZCBTYWxlQ2xvY2tBdWN0aW9uKSBhcmUgZnJvbSBDcnlwdG8gS2l0dGllcy4gVGhpcyBjb250cmFjdCB3aWxsIGhhdmUgdG8gY2FsbCB0aGUgQ3J5cHRvIEtpdHRpZXMgY29udHJhY3RzIHRvIGZpbmQgdGhlIG93bmVyIG9mIGEgS2l0dHksIHRoZSBwcm9wZXJ0aWVzIG9mIGEgS2l0dHkgYW5kIGEgS2l0dGllcyBwcmljZS4KaW50ZXJmYWNlIEtpdHR5Q29yZSB7CgogICAgZnVuY3Rpb24gb3duZXJPZiAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKTsKICAgIAogICAgZnVuY3Rpb24gZ2V0S2l0dHkgKHVpbnQyNTYgX2lkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wgaXNHZXN0YXRpbmcsIGJvb2wgaXNSZWFkeSwgdWludDI1NiBjb29sZG93bkluZGV4LCB1aW50MjU2IG5leHRBY3Rpb25BdCwgdWludDI1NiBzaXJpbmdXaXRoSWQsIHVpbnQyNTYgYmlydGhUaW1lLCB1aW50MjU2IG1hdHJvbklkLCB1aW50MjU2IHNpcmVJZCwgdWludDI1NiBnZW5lcmF0aW9uLCB1aW50MjU2IGdlbmVzKTsKICAgIAp9CgppbnRlcmZhY2UgU2FsZUNsb2NrQXVjdGlvbiB7CiAgICAKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQcmljZSAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIAogICAgZnVuY3Rpb24gZ2V0QXVjdGlvbiAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIHNlbGxlciwgdWludDI1NiBzdGFydGluZ1ByaWNlLCB1aW50MjU2IGVuZGluZ1ByaWNlLCB1aW50MjU2IGR1cmF0aW9uLCB1aW50MjU2IHN0YXJ0ZWRBdCk7CiAgICAKfQoKLy8gRVJDNzIxIHRva2VuIHN0YW5kYXJkIGlzIHVzZWQgZm9yIG5vbi1mdW5naWJsZSBhc3NldHMsIGxpa2UgU3ByaXRlcyAobm9uLWZ1bmdpYmxlIGJlY2F1c2UgdGhleSBjYW4ndCBiZSBzcGxpdCBpbnRvIHBpZWNlcyBhbmQgZG9uJ3QgaGF2ZSBlcXVhbCB2YWx1ZSkuIFRlY2huaWNhbGx5IHRoaXMgY29udHJhY3Qgd2lsbCBhbHNvIGJlIEVSQzIwIGNvbXBsaWFudC4KY29udHJhY3QgRVJDNzIxIHsKICAgIC8vIFJlcXVpcmVkIG1ldGhvZHMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcik7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CiAgICAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgdmlldyByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7CiAgICAKICAgIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CgogICAgLy8gRXZlbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHRva2VuSWQpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgYXBwcm92ZWQsIHVpbnQyNTYgdG9rZW5JZCk7CgogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZyk7CiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcpOwogICAgCiAgICAvLyBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSB0b2tlbklkcyk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk1ldGFkYXRhKHVpbnQyNTYgX3Rva2VuSWQsIHN0cmluZyBfcHJlZmVycmVkVHJhbnNwb3J0KSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgaW5mb1VybCk7CgogICAgLy8gRVJDLTE2NSBDb21wYXRpYmlsaXR5IChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTY1KQogICAgZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IF9pbnRlcmZhY2VJRCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgQ3J5cHRvU3ByaXRlcyBpcyBFUkM3MjEgewogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIAogICAgYWRkcmVzcyBLaXR0eUNvcmVBZGRyZXNzID0gMHgwNjAxMmM4Y2Y5N0JFYUQ1ZGVBZTIzNzA3MEY5NTg3ZjhFN0EyNjZkOwoKICAgIGFkZHJlc3MgU2FsZUNsb2NrQXVjdGlvbkFkZHJlc3MgPSAweGIxNjkwQzA4RTIxM2EzNUVkOWJBYjdCMzE4REUxNDQyMEZCNTdkOEM7CgogICAgLy8gMS41JSBvZiBTcHJpdGUgc2FsZXMgdG8gZ28gdG8gSGVpZmVyIEludGVybmF0aW9uYWw6IGh0dHBzOi8vd3d3LmhlaWZlci5vcmcvd2hhdC15b3UtY2FuLWRvL2dpdmUvZGlnaXRhbC1jdXJyZW5jeS5odG1sIChub3QgYWZmaWxpYXRlZCB3aXRoIHRoaXMgZ2FtZSkKICAgIGFkZHJlc3MgY2hhcml0eUFkZHJlc3MgPSAweGIzMGNiM2IzRTAzQTUwOERiMkEwYTNlMDdCQTEyOTdiNDdiYjBmYjE7CiAgICAKICAgIHVpbnQgcHVibGljIGV0aGVyRm9yT3duZXI7CiAgICB1aW50IHB1YmxpYyBldGhlckZvckNoYXJpdHk7CiAgICAKICAgIHVpbnQgcHVibGljIG93bmVyQ3V0ID0gMTU7IC8vIDEuNSUgKDE1LzEwMDAgLSBzZWUgdGhlIGJ1eVNwcml0ZSgpIGZ1bmN0aW9uKSBvZiBTcHJpdGUgc2FsZXMgZ28gdG8gb3duZXIgb2YgdGhpcyBjb250cmFjdAogICAgdWludCBwdWJsaWMgY2hhcml0eUN1dCA9IDE1OyAvLyAxLjUlIG9mIFNwcml0ZSBzYWxlcyBhbHNvIGdvIHRvIGFuIGVzdGFibGlzaGVkIGNoYXJpdHkgKEhlaWZlciBJbnRlcm5hdGlvbmFsKQogICAgCiAgICB1aW50IHB1YmxpYyBmZWF0dXJlUHJpY2UgPSAxMCoqMTY7IC8vIDAuMDEgRXRoZXIgdG8gZmVhdHVyZSBhIHNwcml0ZQogICAgCiAgICAvLyBXaXRoIHRoZSBiZWxvdyB0aGUgZGVmYXVsdCBwcmljZSBvZiBhIFNwcml0ZSBvZiBhIGtpdHR5IHdvdWxkIGJlIG9ubHkgMTAlIG9mIHRoZSBraXR0aWVzIHByaWNlLiBJZiBmb3IgZXhhbXBsZSBwcmljZU11bHRpcGxpZXIgPSAxNSBhbmQgcHJpY2VEaXZpZGVyID0gMTAsIHRoZW4gdGhlIGRlZmF1bHQgcHJpY2Ugb2YgYSBzcHJpdGUgd291bGQgYmUgMS41IHRpbWVzIHRoZSBwcmljZSBvZiBpdHMga2l0dHkuIFNpbmNlIFNvbGlkaXR5IGRvZXNuJ3QgYWxsb3cgZGVjaW1hbHMsIHR3byBudW1iZXJzIGFyZSBuZWVkZWQgZm9yICBmbGV4aWJpbGl0eSBpbiBzZXR0aW5nIHRoZSBkZWZhdWx0IHByaWNlIGEgc3ByaXRlIHdvdWxkIGJlIGluIHJlbGF0aW9uIHRvIHRoZSBwcmljZSBvZiBpdHMga2l0dGVuLCBpbiBjYXNlIHRoYXQncyBuZWVkZWQgbGF0ZXIgKG93bmVyIG9mIHRoaXMgY29udHJhY3QgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdCBwcmljZSBvZiBTcHJpdGVzIGFueXRpbWUpLiAKICAgIC8vIFRoZSBkZWZhdWx0IHByaWNlIG9mIGEgU3ByaXRlIG1heSBlYXNpbHkgaW5jcmVhc2UgbGF0ZXIgdG8gYmUgbW9yZSB0aGFuIDEwJQogICAgdWludCBwdWJsaWMgcHJpY2VNdWx0aXBsaWVyID0gMTsKICAgIHVpbnQgcHVibGljIHByaWNlRGl2aWRlciA9IDEwOwogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gQ3J5cHRvU3ByaXRlcygpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIHVpbnRbXSBwdWJsaWMgZmVhdHVyZWRTcHJpdGVzOwogICAgCiAgICB1aW50W10gcHVibGljIGFsbFB1cmNoYXNlZFNwcml0ZXM7CiAgICAKICAgIHVpbnQgcHVibGljIHRvdGFsRmVhdHVyZXM7CiAgICB1aW50IHB1YmxpYyB0b3RhbEJ1eXM7CiAgICAKICAgIHN0cnVjdCBCcm91Z2h0U3ByaXRlcyB7CiAgICAgICAgYWRkcmVzcyBvd25lcjsKICAgICAgICB1aW50IHNwcml0ZUltYWdlSUQ7CiAgICAgICAgYm9vbCBmb3JTYWxlOwogICAgICAgIHVpbnQgcHJpY2U7CiAgICAgICAgdWludCB0aW1lc1RyYWRlZDsKICAgICAgICBib29sIGZlYXR1cmVkOwogICAgfQogICAgCiAgICBtYXBwaW5nICh1aW50ID0+IEJyb3VnaHRTcHJpdGVzKSBwdWJsaWMgYnJvdWdodFNwcml0ZXM7CiAgICAKICAgIC8vIFRoaXMgbWF5IGluY2x1ZGUgU3ByaXRlcyB0aGUgdXNlciBwcmV2aW91c2x5IG93bmVkIGJ1dCBkb2Vzbid0IGFueW1vcmUKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludFtdKSBwdWJsaWMgc3ByaXRlT3duaW5nSGlzdG9yeTsKICAgIAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgbnVtYmVyT2ZTcHJpdGVzT3duZWRCeVVzZXI7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcodWludDI1NiA9PiBib29sKSkpIHB1YmxpYyBhZGRyZXNzVG9SZWNlaXZlclRvQWxsb3dlZFNwcml0ZTsKICAgIAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhZGRyZXNzVG9SZWNlaXZlclRvQW1vdW50QWxsb3dlZDsKICAgIAogICAgYnl0ZXM0IGNvbnN0YW50IEludGVyZmFjZVNpZ25hdHVyZV9FUkMxNjUgPSBieXRlczQoa2VjY2FrMjU2KCdzdXBwb3J0c0ludGVyZmFjZShieXRlczQpJykpOwogICAgCiAgICBieXRlczQgY29uc3RhbnQgSW50ZXJmYWNlU2lnbmF0dXJlX0VSQzcyMSA9CiAgICAgICAgYnl0ZXM0KGtlY2NhazI1NigndG90YWxTdXBwbHkoKScpKSBeCiAgICAgICAgYnl0ZXM0KGtlY2NhazI1NignYmFsYW5jZU9mKGFkZHJlc3MpJykpIF4KICAgICAgICBieXRlczQoa2VjY2FrMjU2KCdvd25lck9mKHVpbnQyNTYpJykpIF4KICAgICAgICBieXRlczQoa2VjY2FrMjU2KCdhcHByb3ZlKGFkZHJlc3MsdWludDI1NiknKSkgXgogICAgICAgIGJ5dGVzNChrZWNjYWsyNTYoJ3RyYW5zZmVyKGFkZHJlc3MsdWludDI1NiknKSkgXgogICAgICAgIGJ5dGVzNChrZWNjYWsyNTYoJ3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NiknKSk7CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBldGhlckZvck93bmVyICs9IG1zZy52YWx1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRqdXN0RGVmYXVsdFNwcml0ZVByaWNlICh1aW50IF9wcmljZU11bHRpcGxpZXIsIHVpbnQgX3ByaWNlRGl2aWRlcikgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlIChfcHJpY2VNdWx0aXBsaWVyID4gMCk7CiAgICAgICAgcmVxdWlyZSAoX3ByaWNlRGl2aWRlciA+IDApOwogICAgICAgIHByaWNlTXVsdGlwbGllciA9IF9wcmljZU11bHRpcGxpZXI7CiAgICAgICAgcHJpY2VEaXZpZGVyID0gX3ByaWNlRGl2aWRlcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRqdXN0Q3V0ICh1aW50IF9vd25lckN1dCwgdWludCBfY2hhcml0eUN1dCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlIChfb3duZXJDdXQgKyBfY2hhcml0eUN1dCA8IDUxKTsgLy8gS2VlcCB0aGlzIGNvbnRyYWN0IGhvbmVzdCBieSBhbGxvd2luZyB0aGUgbWF4aW11bSBjb21iaW5lZCBjdXQgdG8gYmUgbm8gbW9yZSB0aGFuIDUlICg1MC8xMDAwKSBvZiBzYWxlcwogICAgICAgIG93bmVyQ3V0ID0gX293bmVyQ3V0OwogICAgICAgIGNoYXJpdHlDdXQgPSBfY2hhcml0eUN1dDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRqdXN0RmVhdHVyZVByaWNlICh1aW50IF9mZWF0dXJlUHJpY2UpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSAoX2ZlYXR1cmVQcmljZSA+IDApOwogICAgICAgIGZlYXR1cmVQcmljZSA9IF9mZWF0dXJlUHJpY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIHsKICAgICAgICBvd25lci50cmFuc2ZlcihldGhlckZvck93bmVyKTsKICAgICAgICBjaGFyaXR5QWRkcmVzcy50cmFuc2ZlcihldGhlckZvckNoYXJpdHkpOwogICAgICAgIGV0aGVyRm9yT3duZXIgPSAwOwogICAgICAgIGV0aGVyRm9yQ2hhcml0eSA9IDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyIChhZGRyZXNzIF9vd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IF9vd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZmVhdHVyZVNwcml0ZSAodWludCBzcHJpdGVJZCkgcGF5YWJsZSB7CiAgICAgICAgLy8gRG8gbm90IG5lZWQgdG8gcmVxdWlyZSB1c2VyIHRvIGJlIHRoZSBvd25lciBvZiBhIFNwcml0ZSB0byBmZWF0dXJlIGl0CiAgICAgICAgLy8gcmVxdWlyZSAobXNnLnNlbmRlciA9PSBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ub3duZXIpOwogICAgICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA9PSBmZWF0dXJlUHJpY2UpOwogICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5mZWF0dXJlZCA9IHRydWU7CgogICAgICAgIGlmIChicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0udGltZXNUcmFkZWQgPT0gMCkgewogICAgICAgICAgICB2YXIgKGtpdHR5T3duZXIsLCwsKSA9IFNhbGVDbG9ja0F1Y3Rpb24oU2FsZUNsb2NrQXVjdGlvbkFkZHJlc3MpLmdldEF1Y3Rpb24oc3ByaXRlSWQpOwogICAgICAgICAgICB1aW50IHByaWNlSWZBbnkgPSBTYWxlQ2xvY2tBdWN0aW9uKFNhbGVDbG9ja0F1Y3Rpb25BZGRyZXNzKS5nZXRDdXJyZW50UHJpY2Uoc3ByaXRlSWQpOwogICAgICAgICAgICBhZGRyZXNzIGtpdHR5T3duZXJOb3RGb3JTYWxlID0gS2l0dHlDb3JlKEtpdHR5Q29yZUFkZHJlc3MpLm93bmVyT2Yoc3ByaXRlSWQpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gV2hlbiBmZWF0dXJpbmcgYSBTcHJpdGUgdGhhdCBoYXNuJ3QgYmVlbiB0cmFkZWQgYmVmb3JlLCBpZiB0aGUgb3JpZ2luYWwgS2l0dHkgaXMgZm9yIHNhbGUsIHVwZGF0ZSB0aGlzIFNwcml0ZSB3aXRoIGEgcHJpY2UgYW5kIHNldCBmb3JTYWxlID0gdHJ1ZSAtIGFzIGxvbmcgYXMgbXNnLnNlbmRlciBpcyB0aGUgb3duZXIgb2YgdGhlIEtpdHR5LiBPdGhlcndpc2UgaXQgY291bGQgYmUgdGhhdCB0aGUgb3duZXIgb2YgdGhlIEtpdHR5IHJlbW92ZWQgdGhlIFNwcml0ZSBmb3Igc2FsZSBhbmQgYSBkaWZmZXJlbnQgdXNlciBjb3VsZCBmZWF0dXJlIHRoZSBTcHJpdGUgYW5kIGhhdmUgaXQgbGlzdGVkIGZvciBzYWxlCiAgICAgICAgICAgIGlmIChwcmljZUlmQW55ID4gMCAmJiBtc2cuc2VuZGVyID09IGtpdHR5T3duZXIpIHsKICAgICAgICAgICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5wcmljZSA9IHByaWNlSWZBbnkgKiBwcmljZU11bHRpcGxpZXIgLyBwcmljZURpdmlkZXI7CiAgICAgICAgICAgICAgICBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0uZm9yU2FsZSA9IHRydWU7CiAgICAgICAgICAgICAgICBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ub3duZXIgPSBraXR0eU93bmVyOwogICAgICAgICAgICAgICAgbnVtYmVyT2ZTcHJpdGVzT3duZWRCeVVzZXJbbXNnLnNlbmRlcl0rKzsKICAgICAgICAgICAgfSBlbHNlIGlmIChraXR0eU93bmVyTm90Rm9yU2FsZSA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgICAgICAvLyBVc2VyIGZlYXR1cmluZyB0aGUgc3ByaXRlIG93bnMgaXRzIGtpdHR5LCBidXQgaGFzbid0IGxpc3RlZCB0aGUga2l0dHkgZm9yIHNhbGUKICAgICAgICAgICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5vd25lciA9IGtpdHR5T3duZXJOb3RGb3JTYWxlOwogICAgICAgICAgICAgICAgbnVtYmVyT2ZTcHJpdGVzT3duZWRCeVVzZXJbbXNnLnNlbmRlcl0rKzsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnNwcml0ZUltYWdlSUQgPSB1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXItMSkpJTM2MCArIDE7CiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICB0b3RhbEZlYXR1cmVzKys7CiAgICAgICAgZXRoZXJGb3JPd25lciArPSBtc2cudmFsdWU7CiAgICAgICAgZmVhdHVyZWRTcHJpdGVzLnB1c2goc3ByaXRlSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQcmljZSAodWludCBraXR0eUlkKSB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICAKICAgICAgICB1aW50IHByaWNlSWZBbnkgPSBTYWxlQ2xvY2tBdWN0aW9uKFNhbGVDbG9ja0F1Y3Rpb25BZGRyZXNzKS5nZXRDdXJyZW50UHJpY2Uoa2l0dHlJZCk7CiAgICAgICAgCiAgICAgICAgdmFyIF9vd25lckN1dCA9ICgocHJpY2VJZkFueSAvIDEwMDApICogb3duZXJDdXQpICogcHJpY2VNdWx0aXBsaWVyIC8gcHJpY2VEaXZpZGVyOwogICAgICAgIHZhciBfY2hhcml0eUN1dCA9ICgocHJpY2VJZkFueSAvIDEwMDApICogY2hhcml0eUN1dCkgKiBwcmljZU11bHRpcGxpZXIgLyBwcmljZURpdmlkZXI7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIChwcmljZUlmQW55ICogcHJpY2VNdWx0aXBsaWVyIC8gcHJpY2VEaXZpZGVyKSArIF9vd25lckN1dCArIF9jaGFyaXR5Q3V0OwogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXlTcHJpdGUgKHVpbnQgc3ByaXRlSWQpIHBheWFibGUgewogICAgICAgIAogICAgICAgIHVpbnQgX293bmVyQ3V0OwogICAgICAgIHVpbnQgX2NoYXJpdHlDdXQ7CiAgICAgICAgCiAgICAgICAgaWYgKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5mb3JTYWxlID09IHRydWUpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEJ1eWluZyBhIHNwcml0ZSB0aGF0IGhhcyBiZWVuIHB1cmNoYXNlZCBvciBmZWF0dXJlZCBiZWZvcmUsIGZyb20gYSBwbGF5ZXIgb2YgdGhpcyBnYW1lIHdobyBoYXMgbGlzdGVkIGl0IGZvciBzYWxlCiAgICAgICAgICAgIAogICAgICAgICAgICBfb3duZXJDdXQgPSAoKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5wcmljZSAvIDEwMDApICogb3duZXJDdXQpOwogICAgICAgICAgICBfY2hhcml0eUN1dCA9ICgoYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlIC8gMTAwMCkgKiBjaGFyaXR5Q3V0KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA9PSBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ucHJpY2UgKyBfb3duZXJDdXQgKyBfY2hhcml0eUN1dCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ub3duZXIudHJhbnNmZXIoYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIG51bWJlck9mU3ByaXRlc093bmVkQnlVc2VyW2Jyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5vd25lcl0tLTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0udGltZXNUcmFkZWQgPT0gMCkgewogICAgICAgICAgICAgICAgLy8gRmVhdHVyZWQgc3ByaXRlIHRoYXQgaXMgYmVpbmcgcHVyY2hhc2VkIGZvciB0aGUgZmlyc3QgdGltZQogICAgICAgICAgICAgICAgYWxsUHVyY2hhc2VkU3ByaXRlcy5wdXNoKHNwcml0ZUlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIgKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5vd25lciwgbXNnLnNlbmRlciwgc3ByaXRlSWQpOwogICAgICAgICAgICAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQnV5aW5nIGEgc3ByaXRlIHRoYXQgaGFzIG5ldmVyIGJlZW4gYnJvdWdodCBiZWZvcmUsIGZyb20gYSBraXR0ZW4gY3VycmVudGx5IGxpc3RlZCBmb3Igc2FsZSBpbiB0aGUgQ3J5cHRvS2l0dGllcyBjb250cmFjdC4gVGhlIHNhbGUgcHJpY2Ugd2lsbCBnbyB0byB0aGUgb3duZXIgb2YgdGhlIGtpdHRlbiBpbiB0aGUgQ3J5cHRvS2l0dGllcyBjb250cmFjdCAod2hvIHZlcnkgcG9zc2libHkgd291bGQgaGF2ZSBuZXZlciBldmVuIGhlYXJkIG9mIHRoaXMgZ2FtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJlcXVpcmUgKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS50aW1lc1RyYWRlZCA9PSAwKTsKICAgICAgICAgICAgcmVxdWlyZSAoYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlID09IDApOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gSGVyZSB3ZSBhcmUgbG9va2luZyB1cCB0aGUgcHJpY2Ugb2YgdGhlIFNwcml0ZSdzIGNvcnJlc3BvbmRpbmcgS2l0dHkKICAgICAgICAgICAgCiAgICAgICAgICAgIHVpbnQgcHJpY2VJZkFueSA9IFNhbGVDbG9ja0F1Y3Rpb24oU2FsZUNsb2NrQXVjdGlvbkFkZHJlc3MpLmdldEN1cnJlbnRQcmljZShzcHJpdGVJZCk7CiAgICAgICAgICAgIHJlcXVpcmUgKHByaWNlSWZBbnkgPiAwKTsgLy8gSWYgdGhlIGtpdHRlbiBpbiB0aGUgQ3J5cHRvS2l0dGllcyBjb250cmFjdCBpc24ndCBmb3Igc2FsZSwgYSBTcHJpdGUgZm9yIGl0IHdvbid0IGJlIGZvciBzYWxlIGVpdGhlcgogICAgICAgICAgICAKICAgICAgICAgICAgX293bmVyQ3V0ID0gKChwcmljZUlmQW55IC8gMTAwMCkgKiBvd25lckN1dCkgKiBwcmljZU11bHRpcGxpZXIgLyBwcmljZURpdmlkZXI7CiAgICAgICAgICAgIF9jaGFyaXR5Q3V0ID0gKChwcmljZUlmQW55IC8gMTAwMCkgKiBjaGFyaXR5Q3V0KSAqIHByaWNlTXVsdGlwbGllciAvIHByaWNlRGl2aWRlcjsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIENyeXB0byBLaXR0eSBwcmljZXMgZGVjcmVhc2UgZXZlcnkgZmV3IHNlY29uZHMgYnkgYSBmcmFjdGlvbmFsIGFtb3VudCwgc28gdXNlID49CiAgICAgICAgICAgIAogICAgICAgICAgICByZXF1aXJlIChtc2cudmFsdWUgPj0gKHByaWNlSWZBbnkgKiBwcmljZU11bHRpcGxpZXIgLyBwcmljZURpdmlkZXIpICsgX293bmVyQ3V0ICsgX2NoYXJpdHlDdXQpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gR2V0IHRoZSBvd25lciBvZiB0aGUgS2l0dHkgZm9yIHNhbGUKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciAoa2l0dHlPd25lciwsLCwpID0gU2FsZUNsb2NrQXVjdGlvbihTYWxlQ2xvY2tBdWN0aW9uQWRkcmVzcykuZ2V0QXVjdGlvbihzcHJpdGVJZCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBraXR0eU93bmVyLnRyYW5zZmVyKHByaWNlSWZBbnkgKiBwcmljZU11bHRpcGxpZXIgLyBwcmljZURpdmlkZXIpOwogICAgICAgICAgICAKICAgICAgICAgICAgYWxsUHVyY2hhc2VkU3ByaXRlcy5wdXNoKHNwcml0ZUlkKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5zcHJpdGVJbWFnZUlEID0gdWludChibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSUzNjAgKyAxOyAvLyBSYW5kb20gbnVtYmVyIHRvIGRldGVybWluZSB3aGF0IGltYWdlL2NoYXJhY3RlciB0aGUgc3ByaXRlIHdpbGwgYmUKICAgICAgICAgICAgCiAgICAgICAgICAgIFRyYW5zZmVyIChraXR0eU93bmVyLCBtc2cuc2VuZGVyLCBzcHJpdGVJZCk7CiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICB0b3RhbEJ1eXMrKzsKICAgICAgICAKICAgICAgICBzcHJpdGVPd25pbmdIaXN0b3J5W21zZy5zZW5kZXJdLnB1c2goc3ByaXRlSWQpOwogICAgICAgIG51bWJlck9mU3ByaXRlc093bmVkQnlVc2VyW21zZy5zZW5kZXJdKys7CiAgICAgICAgCiAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLm93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0uZm9yU2FsZSA9IGZhbHNlOwogICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS50aW1lc1RyYWRlZCsrOwogICAgICAgIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5mZWF0dXJlZCA9IGZhbHNlOwogICAgICAgICAgICAKICAgICAgICBldGhlckZvck93bmVyICs9IF9vd25lckN1dDsKICAgICAgICBldGhlckZvckNoYXJpdHkgKz0gX2NoYXJpdHlDdXQ7CiAgICAgICAgCiAgICB9CiAgICAKICAgIC8vIEFsc28gdXNlZCB0byBhZGp1c3QgcHJpY2UgaWYgYWxyZWFkeSBmb3Igc2FsZQogICAgZnVuY3Rpb24gbGlzdFNwcml0ZUZvclNhbGUgKHVpbnQgc3ByaXRlSWQsIHVpbnQgcHJpY2UpIHsKICAgICAgICByZXF1aXJlIChwcmljZSA+IDApOwogICAgICAgIGlmIChicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ub3duZXIgIT0gbXNnLnNlbmRlcikgewogICAgICAgICAgICByZXF1aXJlIChicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0udGltZXNUcmFkZWQgPT0gMCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdGhlIG93bmVyIG9mIGEgQ3J5cHRvIEtpdHR5LCB3aG8gY2FuIGNvbnRyb2wgdGhlIHByaWNlIG9mIHRoZWlyIHVuYnJvdWdodCBTcHJpdGUKICAgICAgICAgICAgdmFyIChraXR0eU93bmVyLCwsLCkgPSBTYWxlQ2xvY2tBdWN0aW9uKFNhbGVDbG9ja0F1Y3Rpb25BZGRyZXNzKS5nZXRBdWN0aW9uKHNwcml0ZUlkKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChraXR0eU93bmVyICE9IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgICAgIC8vIE1heSBiZSB0aGF0IHRoZSBraXR0eSBvd25lciBoYXNuJ3QgbGlzdGVkIGl0IGZvciBzYWxlLCBpbiB3aGljaCBjYXNlIHRoZSBvd25lciBvZiB0aGUga2l0dHkgaGFzIHRvIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBLaXR0eUNvcmUgY29udHJhY3QKICAgICAgICAgICAgICAgIGFkZHJlc3Mga2l0dHlPd25lck5vdEZvclNhbGUgPSBLaXR0eUNvcmUoS2l0dHlDb3JlQWRkcmVzcykub3duZXJPZihzcHJpdGVJZCk7CiAgICAgICAgICAgICAgICByZXF1aXJlIChraXR0eU93bmVyTm90Rm9yU2FsZSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLm93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnNwcml0ZUltYWdlSUQgPSB1aW50KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXItMSkpJTM2MCArIDE7IAogICAgICAgIH0KICAgICAgICBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0uZm9yU2FsZSA9IHRydWU7CiAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlID0gcHJpY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHJlbW92ZVNwcml0ZUZyb21TYWxlICh1aW50IHNwcml0ZUlkKSB7CiAgICAgICAgaWYgKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5vd25lciAhPSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIHJlcXVpcmUgKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS50aW1lc1RyYWRlZCA9PSAwKTsKICAgICAgICAgICAgdmFyIChraXR0eU93bmVyLCwsLCkgPSBTYWxlQ2xvY2tBdWN0aW9uKFNhbGVDbG9ja0F1Y3Rpb25BZGRyZXNzKS5nZXRBdWN0aW9uKHNwcml0ZUlkKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChraXR0eU93bmVyICE9IG1zZy5zZW5kZXIpIHsKICAgICAgICAgICAgICAgIGFkZHJlc3Mga2l0dHlPd25lck5vdEZvclNhbGUgPSBLaXR0eUNvcmUoS2l0dHlDb3JlQWRkcmVzcykub3duZXJPZihzcHJpdGVJZCk7CiAgICAgICAgICAgICAgICByZXF1aXJlIChraXR0eU93bmVyTm90Rm9yU2FsZSA9PSBtc2cuc2VuZGVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlID0gMTsgLy8gV2hlbiBhIHVzZXIgYnV5cyBhIFNwcml0ZSBJZCB0aGF0IGlzbid0IGZvciBzYWxlIGluIHRoZSBidXlTcHJpdGUoKSBmdW5jdGlvbiAoaWUuIHdvdWxkIGJlIGEgU3ByaXRlIHRoYXQncyBuZXZlciBiZWVuIGJyb3VnaHQgYmVmb3JlLCBmb3IgYSBDcnlwdG8gS2l0dHkgdGhhdCdzIGZvciBzYWxlKSwgb25lIG9mIHRoZSByZXF1aXJlbWVudHMgaXMgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnByaWNlID09IDAsIHdoaWNoIHdpbGwgYmUgdGhlIGNhc2UgYnkgZGVmYXVsdC4gQnkgbWFraW5nIHRoZSBwcmljZSA9IDEgdGhpcyB3aWxsIHRocm93IGFuZCB0aGUgU3ByaXRlIHdvbid0IGJlIGFibGUgdG8gYmUgYnJvdWdodAogICAgICAgIH0gCiAgICAgICAgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLmZvclNhbGUgPSBmYWxzZTsKICAgIH0KICAgIAogICAgLy8gVGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIGluIGNhc2UgYSBkaWZmZXJlbnQgY29udHJhY3Qgd2FudHMgdG8gcHVsbCB0aGlzIGRhdGEsIHdoaWNoIHJlcXVpcmVzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGl0IChldmVuIGlmIHRoZSB2YXJpYWJsZXMgYXJlIHB1YmxpYykgc2luY2Ugc29saWRpdHkgY29udHJhY3RzIGNhbid0IGRpcmVjdGx5IHB1bGwgc3RvcmFnZSBvZiBhbm90aGVyIGNvbnRyYWN0CiAgICAKICAgIGZ1bmN0aW9uIGZlYXR1cmVkU3ByaXRlc0xlbmd0aCgpIHZpZXcgZXh0ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBmZWF0dXJlZFNwcml0ZXMubGVuZ3RoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB1c2Vyc1Nwcml0ZU93bmluZ0hpc3RvcnkgKGFkZHJlc3MgdXNlcikgdmlldyBleHRlcm5hbCByZXR1cm5zICh1aW50W10pIHsKICAgICAgICByZXR1cm4gc3ByaXRlT3duaW5nSGlzdG9yeVt1c2VyXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbG9va3VwU3ByaXRlICh1aW50IHNwcml0ZUlkKSB2aWV3IGV4dGVybmFsIHJldHVybnMgKGFkZHJlc3MsIHVpbnQsIGJvb2wsIHVpbnQsIHVpbnQsIGJvb2wpIHsKICAgICAgICByZXR1cm4gKGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5vd25lciwgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLnNwcml0ZUltYWdlSUQsIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS5mb3JTYWxlLCBicm91Z2h0U3ByaXRlc1tzcHJpdGVJZF0ucHJpY2UsIGJyb3VnaHRTcHJpdGVzW3Nwcml0ZUlkXS50aW1lc1RyYWRlZCwgYnJvdWdodFNwcml0ZXNbc3ByaXRlSWRdLmZlYXR1cmVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gbG9va3VwRmVhdHVyZWRTcHJpdGVzICh1aW50IF9pbmRleCkgdmlldyBleHRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGZlYXR1cmVkU3ByaXRlc1tfaW5kZXhdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBsb29rdXBBbGxTcHJpdGVzICh1aW50IF9pbmRleCkgdmlldyBleHRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGFsbFB1cmNoYXNlZFNwcml0ZXNbX2luZGV4XTsKICAgIH0KICAgIAogICAgLy8gV2lsbCBjYWxsIFNhbGVDbG9ja0F1Y3Rpb24gdG8gZ2V0IHRoZSBvd25lciBvZiBhIGtpdHRlbiBhbmQgY2hlY2sgaXRzIHByaWNlIChpZiBpdCdzIGZvciBzYWxlKS4gV2UncmUgY2FsbGluZyB0aGUgZ2V0QXVjdGlvbigpIGZ1bmN0aW9uIGluIHRoZSBTYWxlQ2xvY2tBdWN0aW9uIHRvIGdldCB0aGUga2l0dHkgb3duZXIgKHRoYXQgZnVuY3Rpb24gcmV0dXJucyA1IHZhcmlhYmxlcywgd2Ugb25seSB3YW50IHRoZSBvd25lcikuIG93bmVyT2YoKSBpbiB0aGUgS2l0dHlDb3JlIGNvbnRyYWN0IHdvbid0IHJldHVybiB0aGUga2l0dHkgb3duZXIgaWYgdGhlIGtpdHR5IGlzIGZvciBzYWxlLCBhbmQgdGhpcyBwcm9iYWJseSB3b24ndCBiZSB1c2VkIChpbmNsdWRpbmcgaXQgaW4gY2FzZSBpdCdzIG5lZWRlZCB0byBsb29rdXAgYW4gb3duZXIgb2YgYSBraXR0eSBub3QgZm9yIHNhbGUgbGF0ZXIgZm9yIGFueSByZWFzb24pCiAgICAKICAgIGZ1bmN0aW9uIGxvb2t1cEtpdHR5ICh1aW50IGtpdHR5SWQpIHZpZXcgcmV0dXJucyAoYWRkcmVzcywgdWludCwgYWRkcmVzcykgewogICAgICAgIAogICAgICAgIHZhciAoa2l0dHlPd25lciwsLCwpID0gU2FsZUNsb2NrQXVjdGlvbihTYWxlQ2xvY2tBdWN0aW9uQWRkcmVzcykuZ2V0QXVjdGlvbihraXR0eUlkKTsKCiAgICAgICAgdWludCBwcmljZUlmQW55ID0gU2FsZUNsb2NrQXVjdGlvbihTYWxlQ2xvY2tBdWN0aW9uQWRkcmVzcykuZ2V0Q3VycmVudFByaWNlKGtpdHR5SWQpOwogICAgICAgIAogICAgICAgIGFkZHJlc3Mga2l0dHlPd25lck5vdEZvclNhbGUgPSBLaXR0eUNvcmUoS2l0dHlDb3JlQWRkcmVzcykub3duZXJPZihraXR0eUlkKTsKCiAgICAgICAgcmV0dXJuIChraXR0eU93bmVyLCBwcmljZUlmQW55LCBraXR0eU93bmVyTm90Rm9yU2FsZSk7CgogICAgfQogICAgCiAgICAvLyBUaGUgYmVsb3cgdHdvIGZ1bmN0aW9ucyB3aWxsIHB1bGwgYWxsIGluZm8gb2YgYSBraXR0ZW4uIFNwbGl0IGludG8gdHdvIGZ1bmN0aW9ucyBvdGhlcndpc2Ugc3RhY2sgdG9vIGRlZXAgZXJyb3JzLiBUaGVzZSBtYXkgbm90IGV2ZW4gYmUgbmVlZGVkLCBtYXkganVzdCBiZSB1c2VkIHNvIHRoZSB3ZWJzaXRlIGNhbiBkaXNwbGF5IGFsbCBpbmZvIG9mIGEga2l0dGVuIHdoZW4gc29tZW9uZSBsb29rcyBpdCB1cC4KICAgIAogICAgZnVuY3Rpb24gbG9va3VwS2l0dHlEZXRhaWxzMSAodWludCBraXR0eUlkKSB2aWV3IHJldHVybnMgKGJvb2wsIGJvb2wsIHVpbnQsIHVpbnQsIHVpbnQpIHsKICAgICAgICAKICAgICAgICB2YXIgKGlzR2VzdGF0aW5nLCBpc1JlYWR5LCBjb29sZG93bkluZGV4LCBuZXh0QWN0aW9uQXQsIHNpcmluZ1dpdGhJZCwsLCwsKSA9IEtpdHR5Q29yZShLaXR0eUNvcmVBZGRyZXNzKS5nZXRLaXR0eShraXR0eUlkKTsKICAgICAgICAKICAgICAgICByZXR1cm4gKGlzR2VzdGF0aW5nLCBpc1JlYWR5LCBjb29sZG93bkluZGV4LCBuZXh0QWN0aW9uQXQsIHNpcmluZ1dpdGhJZCk7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGxvb2t1cEtpdHR5RGV0YWlsczIgKHVpbnQga2l0dHlJZCkgdmlldyByZXR1cm5zICh1aW50LCB1aW50LCB1aW50LCB1aW50LCB1aW50KSB7CiAgICAgICAgCiAgICAgICAgdmFyKCwsLCwsYmlydGhUaW1lLCBtYXRyb25JZCwgc2lyZUlkLCBnZW5lcmF0aW9uLCBnZW5lcykgPSBLaXR0eUNvcmUoS2l0dHlDb3JlQWRkcmVzcykuZ2V0S2l0dHkoa2l0dHlJZCk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIChiaXJ0aFRpbWUsIG1hdHJvbklkLCBzaXJlSWQsIGdlbmVyYXRpb24sIGdlbmVzKTsKICAgICAgICAKICAgIH0KICAgIAogICAgLy8gRVJDLTcyMSByZXF1aXJlZCBmdW5jdGlvbnMgYmVsb3cKICAgIAogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gJ0NyeXB0byBTcHJpdGVzJzsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gJ0NSUyc7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOyAvLyBTcHJpdGVzIGFyZSBub24tZnVuZ2libGUsIGllLiBjYW4ndCBiZSBkaXZpZGVkIGludG8gcGllY2VzCiAgICAKICAgIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gbmFtZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN5bWJvbDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGFsbFB1cmNoYXNlZFNwcml0ZXMubGVuZ3RoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YgKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG51bWJlck9mU3ByaXRlc093bmVkQnlVc2VyW19vd25lcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG93bmVyT2YgKHVpbnQgX3Rva2VuSWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgcmV0dXJuIGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYXBwcm92ZSAoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlIChicm91Z2h0U3ByaXRlc1tfdG9rZW5JZF0ub3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgcmVxdWlyZSAoYWRkcmVzc1RvUmVjZWl2ZXJUb0FsbG93ZWRTcHJpdGVbbXNnLnNlbmRlcl1bX3RvXVtfdG9rZW5JZF0gPT0gZmFsc2UpOwogICAgICAgIGFkZHJlc3NUb1JlY2VpdmVyVG9BbGxvd2VkU3ByaXRlW21zZy5zZW5kZXJdW190b11bX3Rva2VuSWRdID0gdHJ1ZTsKICAgICAgICBhZGRyZXNzVG9SZWNlaXZlclRvQW1vdW50QWxsb3dlZFttc2cuc2VuZGVyXVtfdG9dKys7CiAgICAgICAgQXBwcm92YWwgKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkaXNhcHByb3ZlIChhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUgKGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlIChhZGRyZXNzVG9SZWNlaXZlclRvQWxsb3dlZFNwcml0ZVttc2cuc2VuZGVyXVtfdG9dW190b2tlbklkXSA9PSB0cnVlKTsgLy8gRWxzZSB0aGUgbmV4dCBsaW5lIG1heSBiZSAwIC0gMSBhbmQgdW5kZXJmbG93CiAgICAgICAgYWRkcmVzc1RvUmVjZWl2ZXJUb0Ftb3VudEFsbG93ZWRbbXNnLnNlbmRlcl1bX3RvXS0tOwogICAgICAgIGFkZHJlc3NUb1JlY2VpdmVyVG9BbGxvd2VkU3ByaXRlW21zZy5zZW5kZXJdW190b11bX3Rva2VuSWRdID0gZmFsc2U7CiAgICB9CiAgICAKICAgIC8vIE5vdCBzdHJpY3RseSBuZWNlc3NhcnkgLSB0aGlzIGNhbiBiZSBkb25lIHdpdGggdHJhbnNmZXJGcm9tKCkgYXMgd2VsbAogICAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCAodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUgKGFkZHJlc3NUb1JlY2VpdmVyVG9BbGxvd2VkU3ByaXRlW2Jyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lcl1bbXNnLnNlbmRlcl1bX3Rva2VuSWRdID09IHRydWUpOwogICAgICAgIGFkZHJlc3NUb1JlY2VpdmVyVG9BbGxvd2VkU3ByaXRlW2Jyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lcl1bbXNnLnNlbmRlcl1bX3Rva2VuSWRdID0gZmFsc2U7CiAgICAgICAgYWRkcmVzc1RvUmVjZWl2ZXJUb0Ftb3VudEFsbG93ZWRbYnJvdWdodFNwcml0ZXNbX3Rva2VuSWRdLm93bmVyXVttc2cuc2VuZGVyXS0tOwogICAgICAgIG51bWJlck9mU3ByaXRlc093bmVkQnlVc2VyW2Jyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lcl0tLTsKICAgICAgICBudW1iZXJPZlNwcml0ZXNPd25lZEJ5VXNlclttc2cuc2VuZGVyXSsrOwogICAgICAgIHNwcml0ZU93bmluZ0hpc3RvcnlbbXNnLnNlbmRlcl0ucHVzaChfdG9rZW5JZCk7CiAgICAgICAgVHJhbnNmZXIgKGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lciwgbXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgICAgIGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyIChhZGRyZXNzIF90bywgdWludCBfdG9rZW5JZCkgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUgKGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBicm91Z2h0U3ByaXRlc1tfdG9rZW5JZF0ub3duZXIgPSBfdG87CiAgICAgICAgbnVtYmVyT2ZTcHJpdGVzT3duZWRCeVVzZXJbbXNnLnNlbmRlcl0tLTsKICAgICAgICBudW1iZXJPZlNwcml0ZXNPd25lZEJ5VXNlcltfdG9dKys7CiAgICAgICAgc3ByaXRlT3duaW5nSGlzdG9yeVtfdG9dLnB1c2goX3Rva2VuSWQpOwogICAgICAgIFRyYW5zZmVyIChtc2cuc2VuZGVyLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20gKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSAoYWRkcmVzc1RvUmVjZWl2ZXJUb0FsbG93ZWRTcHJpdGVbX2Zyb21dW21zZy5zZW5kZXJdW190b2tlbklkXSA9PSB0cnVlKTsKICAgICAgICByZXF1aXJlIChicm91Z2h0U3ByaXRlc1tfdG9rZW5JZF0ub3duZXIgPT0gX2Zyb20pOwogICAgICAgIGFkZHJlc3NUb1JlY2VpdmVyVG9BbGxvd2VkU3ByaXRlW19mcm9tXVttc2cuc2VuZGVyXVtfdG9rZW5JZF0gPSBmYWxzZTsKICAgICAgICBhZGRyZXNzVG9SZWNlaXZlclRvQW1vdW50QWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0tLTsKICAgICAgICBudW1iZXJPZlNwcml0ZXNPd25lZEJ5VXNlcltfZnJvbV0tLTsKICAgICAgICBudW1iZXJPZlNwcml0ZXNPd25lZEJ5VXNlcltfdG9dKys7CiAgICAgICAgc3ByaXRlT3duaW5nSGlzdG9yeVtfdG9dLnB1c2goX3Rva2VuSWQpOwogICAgICAgIGJyb3VnaHRTcHJpdGVzW190b2tlbklkXS5vd25lciA9IF90bzsKICAgICAgICBUcmFuc2ZlciAoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UgKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYWRkcmVzc1RvUmVjZWl2ZXJUb0Ftb3VudEFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHN1cHBvcnRzSW50ZXJmYWNlIChieXRlczQgX2ludGVyZmFjZUlEKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKChfaW50ZXJmYWNlSUQgPT0gSW50ZXJmYWNlU2lnbmF0dXJlX0VSQzE2NSkgfHwgKF9pbnRlcmZhY2VJRCA9PSBJbnRlcmZhY2VTaWduYXR1cmVfRVJDNzIxKSk7CiAgICB9CiAgICAKfQ=='.
	

]
