Class {
	#name : #SRT6BEB418Fc6E1958204aC8baddCf109B8E9694966,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6BEB418Fc6E1958204aC8baddCf109B8E9694966 >> base64 [
	^ ''.
	

]
