Class {
	#name : #SRT7598c3543ef4f27f09c98aeb3753506a0290a0fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7598c3543ef4f27f09c98aeb3753506a0290a0fc >> base64 [
	^ ''.
	

]
