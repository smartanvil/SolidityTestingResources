Class {
	#name : #SRT814f67fa286f7572b041d041b1d99b432c9155ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT814f67fa286f7572b041d041b1d99b432c9155ee >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4gMC40LjExOwoKCgoKCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOwp9CgoKY29udHJhY3QgRVJDMjAgewoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50IF90b3RhbFN1cHBseSk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMoYm9vbCBvayk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyhib29sIG9rKTsKCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCn0KCmNvbnRyYWN0IEJ1cm5lciB7IGZ1bmN0aW9uIGRyYWdvbkhhbmRsZXIoIHVpbnQyNTYgX2Ftb3VudCl7fSB9CiAKY29udHJhY3QgRHJhZ29uIGlzIEVSQzIwIHsKCgogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdEUkFHT04gMS4yJzsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJEUkFHT04iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRFJHIjsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIAogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIG1hcHBpbmcoIGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcoIHVpbnQgPT4gYWRkcmVzcykgcHVibGljIGFjY291bnRJbmRleDsKICAgIHVpbnQgcHVibGljIGFjY291bnRDb3VudDsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKICAgIGFkZHJlc3MgcHVibGljIGJ1cm5lcjsKICAgIGJvb2wgcHVibGljIGJ1cm5lclNldDsKICAgIAogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgICAKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwoKICAgIAogICAgZnVuY3Rpb24gRHJhZ29uKCkgewogICAgICAgICAKICAgICAgICB1aW50IHN1cHBseSA9IDUwMDAwMDAwMDAwMDAwMDAwOyAKICAgICAgICBhcHBlbmRUb2tlbkhvbGRlcnMoIG1zZy5zZW5kZXIgKTsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSAgc3VwcGx5OwogICAgICAgIHRvdGFsU3VwcGx5ID0gc3VwcGx5OyAvLyAKICAgICAgICBidXJuZXJTZXQgPSBmYWxzZTsKICAgICAgICAKICAgICAgICBkZWNpbWFscyA9IDg7IC8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICAKICAKICAgIH0KICAgIAogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgIG1vZGlmaWVyIG9ubHlCdXJuZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gYnVybmVyKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcnNoaXAoIGFkZHJlc3MgX293bmVyICkgb25seU93bmVyIHsKICAgICAgICAKICAgICAgICBvd25lciA9IF9vd25lcjsKICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0QnVybmVyKCBhZGRyZXNzIF9idXJuZXIgKSBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUgKCAhYnVybmVyU2V0ICk7CiAgICAgICAgYnVybmVyID0gX2J1cm5lcjsKICAgICAgICBidXJuZXJTZXQgPSB0cnVlOwogICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGJ1cm5DaGVjayggYWRkcmVzcyBfdG9jaGVjayAsIHVpbnQyNTYgYW1vdW50ICkgaW50ZXJuYWwgewogICAgICAgIAogICAgICAgIGlmICggX3RvY2hlY2sgIT0gYnVybmVyIClyZXR1cm47CiAgICAgICAgCiAgICAgICAgQnVybmVyIGJ1cm4gPSBCdXJuZXIgKCBidXJuZXIgKTsKICAgICAgICBidXJuLmRyYWdvbkhhbmRsZXIoIGFtb3VudCApOwogICAgICAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuRHJhZ29ucyAoIHVpbnQyNTYgX2Ftb3VudCApIG9ubHlCdXJuZXJ7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgYnVybiggX2Ftb3VudCApOwogICAgICAgIAogICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbkhvbGRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiBiYWxhbmNlT2ZbdG9rZW5Ib2xkZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CgogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBY2NvdW50Q291bnQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsKCiAgICAgICAgcmV0dXJuIGFjY291bnRDb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBZGRyZXNzKHVpbnQyNTYgc2xvdCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7CgogICAgICAgIHJldHVybiBhY2NvdW50SW5kZXhbc2xvdF07CgogICAgfQoKICAgIAogICAgZnVuY3Rpb24gYXBwZW5kVG9rZW5Ib2xkZXJzKGFkZHJlc3MgdG9rZW5Ib2xkZXIpIHByaXZhdGUgewoKICAgICAgICBpZiAoYmFsYW5jZU9mW3Rva2VuSG9sZGVyXSA9PSAwKSB7CiAgICAgICAgICAgIGlmICggdG9rZW5Ib2xkZXIgPT0gYnVybmVyICkgcmV0dXJuOwogICAgICAgICAgICBhY2NvdW50SW5kZXhbYWNjb3VudENvdW50XSA9IHRva2VuSG9sZGVyOwogICAgICAgICAgICBhY2NvdW50Q291bnQrKzsKICAgICAgICB9CgogICAgfQoKICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zKGJvb2wgb2spIHsKICAgCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7IAogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsKICAgICAgICAKICAgICAgICBhcHBlbmRUb2tlbkhvbGRlcnMoX3RvKTsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7IAogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgCiAgICAgICAgYnVybkNoZWNrKCBfdG8sIF92YWx1ZSApOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKQogICAgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKCBtc2cuc2VuZGVyICxfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQogICAgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7CiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnModWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dhbmNlW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAKICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7ICAKICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7ICAKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7IAogICAgICAgIGFwcGVuZFRva2VuSG9sZGVycyhfdG8pOwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7IAogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7IAogICAgICAgIGlmKCB0b3RhbFN1cHBseSAtICBfdmFsdWUgPCAyMTAwMDAwMDAwMDAwMDAwKSB0aHJvdzsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7IAogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgICAgICAKICAgICAgICBpZiggdG90YWxTdXBwbHkgLSAgX3ZhbHVlIDwgMjEwMDAwMDAwMDAwMDAwMCkgdGhyb3c7CiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAKICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7IAogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAKICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgCiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAKICAgICAgICBCdXJuKF9mcm9tLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogCiAgICAKfQ=='.
	

]
