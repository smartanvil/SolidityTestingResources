Class {
	#name : #SRT6846b938f9be9f1eeeb9bfd853636c805f8f54d3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6846b938f9be9f1eeeb9bfd853636c805f8f54d3 >> base64 [
	^ ''.
	

]
