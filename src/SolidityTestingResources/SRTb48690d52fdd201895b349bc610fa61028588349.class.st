Class {
	#name : #SRTb48690d52fdd201895b349bc610fa61028588349,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb48690d52fdd201895b349bc610fa61028588349 >> base64 [
	^ ''.
	

]
