Class {
	#name : #SRTdfe06d5a4534fbe955eebe8a4908ef596763c2a4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfe06d5a4534fbe955eebe8a4908ef596763c2a4 >> base64 [
	^ ''.
	

]
