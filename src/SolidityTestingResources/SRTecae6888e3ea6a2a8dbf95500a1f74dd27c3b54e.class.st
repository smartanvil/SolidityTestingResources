Class {
	#name : #SRTecae6888e3ea6a2a8dbf95500a1f74dd27c3b54e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTecae6888e3ea6a2a8dbf95500a1f74dd27c3b54e >> base64 [
	^ ''.
	

]
