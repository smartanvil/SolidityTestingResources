Class {
	#name : #SRT1db45a09efcdd8955b1c3bb855b5a8d333446bff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1db45a09efcdd8955b1c3bb855b5a8d333446bff >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKioKICogdGhpcyBjb250cmFjdCBzdGFuZHMgZm9yIHRoZSBob2xkcyBvZiBXZXN0SW5kaWEgZ3JvdXAKICogYWxsIGluY29tZSB3aWxsIGJlIHNwbGl0IHRvIGhvbGRlcnMgYWNjb3JkaW5nIHRvIHRoZWlyIGhvbGRzCiAqIHVzZXIgY2FuIGJ1eSBob2xkcyBmcm9tIHNoYXJlaG9sZGVycyBhdCBoaXMgd2lsbAogKi8KY29udHJhY3QgU2hhcmUgewoKICAgIGJvb2wgcHVibGljIHBhdXNlOwogICAgLyoqCiAgICAgKiBvd25lciBjYW4gcGF1c2UgdGhlIGNvbnRyYWN0IHNvIHRoYXQgbm8gb25lIGNhbiB3aXRoZHJhd2FsCiAgICAgKiBoZSBjYW4ndCBkbyBhbnl0aGluZyBlbHNlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgCiAgICAvKioKICAgICAqIHRoZSBob2xkcyBvZiBldmVyeSBob2xkZXIKICAgICAqIHRoZSB0b3RhbCBob2xkcyBzdGljayB0byAxMDAwMAogICAgICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBob2xkczsKCiAgICAvKioKICAgICAqIHNpbmNlIHdlIGRvbid0IHJlY29yZCBob2xkZXJzJyBhZGRyZXNzIGluIGEgbGlzdAogICAgICogYW5kIHdlIGRvbid0IHdhbnQgdG8gbG9vcCBob2xkZXJzIGxpc3QgZXZlcnl0aW1lIHdoZW4gdGhlcmUgaXMgaW5jb21lCiAgICAgKgogICAgICogd2UgdXNlIGEgbWVjaGFuaXNtIGNhbGxlZCAnd2F0ZXJtYXJrJwogICAgICogCiAgICAgKiB0aGUgd2F0ZXJtYXJrIGluZGljYXRlcyB0aGUgdmFsdWUgdGhhdCBicm91Z2h0IGludG8gZWFjaCBob2xkcyBmcm9tIHRoZSBiZWdpbmluZwogICAgICogaXQgb25seSBnb2VzIHVwIHdoZW4gbmV3IGluY29tZSBzZW5kIHRvIHRoZSBjb250cmFjdAoKICAgICAqIGZ1bGxmaWxsZWQgaW5kaWNhdGUgdGhlIGFtb3VudCB0aGF0IHRoZSBob2xkZXIgaGFzIHdpdGhkcmF3YWxlZCBmcm9tIGhpcyBzaGFyZQogICAgICogaXQgZ29lcyB1cCB3aGVuIHVzZXIgd2l0aGRyYXdhbCBib251cwogICAgICogYW5kIGl0IGdvZXMgdXAgd2hlbiB1c2VyIHNlbGwgaG9sZHMsIGdvZXMgZG93biB3aGVuIHVzZXIgYnV5IGhvbGRzLCBzaW5jZSB0aGUgdG90YWwgYm9udXMgb2YgaGltIHN0YXlzIHRoZSBzYW1lLgogICAgICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBmdWxsZmlsbGVkOwoKICAgIC8qKgogICAgICogYW55IG9uZSBjYW4gc2V0dXAgYSBwcmljZSB0byBzZWxsIGhpcyBob2xkcwogICAgICogaWYgc2V0IHRvIDAsIG1lYW5zIG5vdCBvbiBzZWxsCiAgICAgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHNlbGxQcmljZTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRvU2VsbDsKCiAgICB1aW50MjU2IHB1YmxpYyB3YXRlcm1hcms7CgogICAgZXZlbnQgUEFVU0VEKCk7CiAgICBldmVudCBTVEFSVEVEKCk7CgogICAgZXZlbnQgU0hBUkVfVFJBTlNGRVIoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBJTkNPTUUodWludDI1Nik7CiAgICBldmVudCBQUklDRV9TRVQoYWRkcmVzcyBob2xkZXIsIHVpbnQgc2hhcmVzLCB1aW50MjU2IHByaWNlLCB1aW50IHNlbGwpOwogICAgZXZlbnQgV0lUSERSQVdBTChhZGRyZXNzIG93bmVyLCB1aW50MjU2IGFtb3VudCk7CiAgICBldmVudCBTRUxMX0hPTERTKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCBhbW91bnQsIHVpbnQyNTYgcHJpY2UpOwogICAgZXZlbnQgU0VORF9IT0xEUyhhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgYW1vdW50KTsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBub3RQYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZSghcGF1c2UpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFN0YXRlKGJvb2wgX3BhdXNlKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBwYXVzZSA9IF9wYXVzZTsKICAgICAgICAKICAgICAgICBpZiAoX3BhdXNlKSB7CiAgICAgICAgICAgIGVtaXQgUEFVU0VEKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZW1pdCBTVEFSVEVEKCk7CiAgICAgICAgfSAKICAgIH0KCiAgICAvKioKICAgICAqIGF0IHN0YXJ0IHRoZSBvd25lciBoYXMgMTAwJSBzaGFyZSwgd2hpY2ggaXMgMTAsMDAwIGhvbGRzCiAgICAgKi8KICAgIGZ1bmN0aW9uIFNoYXJlKCkgcHVibGljIHsgICAgICAgIAogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBob2xkc1tvd25lcl0gPSAxMDAwMDsKICAgICAgICBwYXVzZSA9IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogd2hlbiB0aGVyZSdzIGluY29tZSwgdGhlIHdhdGVyIG1hcmsgZ29lcyB1cAogICAgICovCiAgICBmdW5jdGlvbiBvbkluY29tZSgpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgewogICAgICAgICAgICB3YXRlcm1hcmsgKz0gKG1zZy52YWx1ZSAvIDEwMDAwKTsKICAgICAgICAgICAgYXNzZXJ0KHdhdGVybWFyayAqIDEwMDAwID4gd2F0ZXJtYXJrKTsKCiAgICAgICAgICAgIGVtaXQgSU5DT01FKG1zZy52YWx1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogYXV0b21hdGljYWxseSBzcGxpdCBpbmNvbWUKICAgICAqLwogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgb25JbmNvbWUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBib251cygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gKHdhdGVybWFyayAtIGZ1bGxmaWxsZWRbbXNnLnNlbmRlcl0pICogaG9sZHNbbXNnLnNlbmRlcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldFByaWNlKHVpbnQyNTYgcHJpY2UsIHVpbnQgc2VsbCkgcHVibGljIG5vdFBhdXNlZCB7CiAgICAgICAgc2VsbFByaWNlW21zZy5zZW5kZXJdID0gcHJpY2U7CiAgICAgICAgdG9TZWxsW21zZy5zZW5kZXJdID0gc2VsbDsKICAgICAgICBlbWl0IFBSSUNFX1NFVChtc2cuc2VuZGVyLCBob2xkc1ttc2cuc2VuZGVyXSwgcHJpY2UsIHNlbGwpOwogICAgfQoKICAgIC8qKgogICAgICogd2l0aGRyYXdhbCB0aGUgYm9udXMKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdhbCgpIHB1YmxpYyBub3RQYXVzZWQgewogICAgICAgIGlmIChob2xkc1ttc2cuc2VuZGVyXSA9PSAwKSB7CiAgICAgICAgICAgIC8veW91IGRvbid0IGhhdmUgYW55LCBkb24ndCBib3RoZXIKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IHZhbHVlID0gYm9udXMoKTsKICAgICAgICBmdWxsZmlsbGVkW21zZy5zZW5kZXJdID0gd2F0ZXJtYXJrOwoKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHZhbHVlKTsKCiAgICAgICAgZW1pdCBXSVRIRFJBV0FMKG1zZy5zZW5kZXIsIHZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIHRyYW5zZmVyIGhvbGRzIGZyb20gPT4gdG8gKG9ubHkgaG9sZHMsIG5vIGJvdW5zKQogICAgICogdGhpcyB3aWxsIHdpdGhkcmF3YWwgdGhlIGhvbGRlciBib251cyBvZiB0aGVzZSBob2xkcwogICAgICogYW5kIHRoZSB0bydzIGZ1bGxmaWxsZWQgd2lsbCBnbyB1cCwgc2luY2UgdG90YWwgYm9udXMgdW5jaGFuZ2VkLCBidXQgaG9sZHMgZ29lcyBtb3JlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVySG9sZHMoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IGFtb3VudCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoaG9sZHNbZnJvbV0gPj0gYW1vdW50KTsKICAgICAgICByZXF1aXJlKGFtb3VudCA+IDApOwoKICAgICAgICB1aW50MjU2IGZyb21Cb251cyA9ICh3YXRlcm1hcmsgLSBmdWxsZmlsbGVkW2Zyb21dKSAqIGFtb3VudDsKICAgICAgICB1aW50MjU2IHRvQm9udXMgPSAod2F0ZXJtYXJrIC0gZnVsbGZpbGxlZFt0b10pICogaG9sZHNbdG9dOwogICAgICAgIAoKICAgICAgICBob2xkc1tmcm9tXSAtPSBhbW91bnQ7CiAgICAgICAgaG9sZHNbdG9dICs9IGFtb3VudDsKICAgICAgICBmdWxsZmlsbGVkW3RvXSA9IHdhdGVybWFyayAtIHRvQm9udXMgLyBob2xkc1t0b107CgogICAgICAgIGZyb20udHJhbnNmZXIoZnJvbUJvbnVzKTsKCiAgICAgICAgZW1pdCBTSEFSRV9UUkFOU0ZFUihmcm9tLCB0bywgYW1vdW50KTsKICAgICAgICBlbWl0IFdJVEhEUkFXQUwoZnJvbSwgZnJvbUJvbnVzKTsKICAgIH0KCiAgICAvKioKICAgICAqIG9uZSBjYW4gYnV5IGhvbGRzIGZyb20gYW55b25lIHdobyBzZXQgdXAgYW4gcHJpY2UsCiAgICAgKiBhbmQgdSBjYW4gYnV5IEAgcHJpY2UgaGlnaGVyIHRoYW4gaGUgc2V0dXAKICAgICAqLwogICAgZnVuY3Rpb24gYnV5RnJvbShhZGRyZXNzIGZyb20pIHB1YmxpYyBwYXlhYmxlIG5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShzZWxsUHJpY2VbZnJvbV0gPiAwKTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZSAvIHNlbGxQcmljZVtmcm9tXTsKCiAgICAgICAgaWYgKGFtb3VudCA+PSBob2xkc1tmcm9tXSkgewogICAgICAgICAgICBhbW91bnQgPSBob2xkc1tmcm9tXTsKICAgICAgICB9CgogICAgICAgIGlmIChhbW91bnQgPj0gdG9TZWxsW2Zyb21dKSB7CiAgICAgICAgICAgIGFtb3VudCA9IHRvU2VsbFtmcm9tXTsKICAgICAgICB9CgogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CgogICAgICAgIHRvU2VsbFtmcm9tXSAtPSBhbW91bnQ7CiAgICAgICAgdHJhbnNmZXJIb2xkcyhmcm9tLCBtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgICAgIGZyb20udHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICAKICAgICAgICBlbWl0IFNFTExfSE9MRFMoZnJvbSwgbXNnLnNlbmRlciwgYW1vdW50LCBzZWxsUHJpY2VbZnJvbV0pOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IGFtb3VudCkgcHVibGljIG5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShob2xkc1ttc2cuc2VuZGVyXSA+PSBhbW91bnQpOwogICAgICAgIHRyYW5zZmVySG9sZHMobXNnLnNlbmRlciwgdG8sIGFtb3VudCk7CiAgICAgICAgCiAgICAgICAgZW1pdCBTRU5EX0hPTERTKG1zZy5zZW5kZXIsIHRvLCBhbW91bnQpOwogICAgfQp9'.
	

]
