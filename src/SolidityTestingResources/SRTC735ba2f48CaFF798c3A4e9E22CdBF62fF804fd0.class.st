Class {
	#name : #SRTC735ba2f48CaFF798c3A4e9E22CdBF62fF804fd0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC735ba2f48CaFF798c3A4e9E22CdBF62fF804fd0 >> base64 [
	^ ''.
	

]
