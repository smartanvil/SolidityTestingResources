Class {
	#name : #SRT63b9abba99cfb2b650c06f5a24bcfcbdf27467fb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63b9abba99cfb2b650c06f5a24bcfcbdf27467fb >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCmNvbnRyYWN0IFNhZmVFUkMyMCB7CiAgICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIC8vIDE4IGRlY2ltYWxzIGlzIHRoZSBzdHJvbmdseSBzdWdnZXN0ZWQgZGVmYXVsdCwgYXZvaWQgY2hhbmdpbmcgaXQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgCgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KICAgIAogICAgCiAgICAgICAgLy8gQG5vdGljZSBzZW5kIGB2YWx1ZWAgdG9rZW4gdG8gYHRvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8gQHBhcmFtIHRvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vIEBwYXJhbSB2YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBUcmFuc2ZlcgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZU9mW3RvXSA9IGJhbGFuY2VPZlt0b10uYWRkKHZhbHVlKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOwogICAgfQoKICAgIC8vIEBub3RpY2Ugc2VuZCBgdmFsdWVgIHRva2VuIHRvIGB0b2AgZnJvbSBgZnJvbWAKICAgIC8vIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vIEBwYXJhbSB0byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgVHJhbnNmZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPj0gdmFsdWUgJiYgYmFsYW5jZU9mW2Zyb21dID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYmFsYW5jZU9mW2Zyb21dID0gYmFsYW5jZU9mW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICAgICAgYmFsYW5jZU9mW3RvXSA9IGJhbGFuY2VPZlt0b10uYWRkKHZhbHVlKTsKICAgICAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLy8gQWxsb3cgc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSB2YWx1ZSBhbW91bnQuCiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIHZhbHVlLgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgdG8gYmUgYXBwcm92ZWQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIEFwcHJvdmFsCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlICgKICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlKTsKICAgIH0KCiAgICAvLyBDaGVjayB0aGUgYWxsb3dlZCB2YWx1ZSBmb3IgdGhlIHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNwZW5kZXIKICAgIC8vIEByZXR1cm4gdGhlIGFtb3VudCB3aGljaCBzcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtzcGVuZGVyXTsKICAgIH0KCiAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PwogICAgLy8gQHBhcmFtIHdobyBUaGUgYWRkcmVzcyBvZiB0aGUgcGFydGljdWxhciBhY2NvdW50CiAgICAvLyBAcmV0dXJuIHRoZSBiYWxhbmFjZSB0aGUgcGFydGljdWxhciBhY2NvdW50CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCn0KCmNvbnRyYWN0IEJJVFRPVG9rZW4gaXMgU2FmZUVSQzIwLCBvd25lZCB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgoKCiAgICAvLyBUb2tlbiBwcm9wZXJ0aWVzCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiQklUVE8iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQklUVE8iOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50MjU2IHB1YmxpYyBfdG90YWxTdXBwbHkgPSAzMzAwMDAwMGUxODsKCgogICAgCgogICAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICAgIHVpbnQgcHVibGljIHByaWNlID0gODAwOwoKCiAgICB1aW50MjU2IHB1YmxpYyBmdW5kUmFpc2VkOwoKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICAgIC8vIENvbnN0cnVjdG9yCiAgICAvLyBAbm90aWNlIFJRWFRva2VuIENvbnRyYWN0CiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBCSVRUT1Rva2VuKCkgcHVibGljIHsKIAogICAgICAgIGJhbGFuY2VPZltvd25lcl0gPSBfdG90YWxTdXBwbHk7CgogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVydG9rZW4gKHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyByZWNpcGllbnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgICByZXF1aXJlKHJlY2lwaWVudCAhPSAweDApOwogICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltvd25lcl0gPj0gX2Ftb3VudCk7CiAgICAgICAgIGJhbGFuY2VPZltvd25lcl0gPSBiYWxhbmNlT2Zbb3duZXJdLnN1YihfYW1vdW50KTsKICAgICAgICAgYmFsYW5jZU9mW3JlY2lwaWVudF0gPSBiYWxhbmNlT2ZbcmVjaXBpZW50XS5hZGQoX2Ftb3VudCk7CgogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lcnsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltvd25lcl0gPj0gX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZU9mW293bmVyXSAtPSBfYW1vdW50OwogICAgICAgIF90b3RhbFN1cHBseSAtPSBfYW1vdW50OwogICAgfQogICAgLy8gUGF5YWJsZSBtZXRob2QKICAgIC8vIEBub3RpY2UgQW55b25lIGNhbiBidXkgdGhlIHRva2VucyBvbiB0b2tlbnNhbGUgYnkgcGF5aW5nIGV0aGVyCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgdG9rZW5zYWxlKG1zZy5zZW5kZXIpOwogICAgICAgIAogICAgfQogICAgLy8gdXBkYXRlIHByaWNlIAogICAgCiAgICBmdW5jdGlvbiB1cGRhdGVQcmljZSAodWludCBfbmV3cGljZSkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcHJpY2UgPSBfbmV3cGljZTsKICAgIH0KICAgIC8vIEBub3RpY2UgdG9rZW5zYWxlCiAgICAvLyBAcGFyYW0gcmVjaXBpZW50IFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIFRyYW5zZmVyCiAgICBmdW5jdGlvbiB0b2tlbnNhbGUoYWRkcmVzcyByZWNpcGllbnQpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHJlY2lwaWVudCAhPSAweDApOwoKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHByaWNlKTsKCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgZnVuZFJhaXNlZCA9IGZ1bmRSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgICAgIGJhbGFuY2VPZltvd25lcl0gPSBiYWxhbmNlT2Zbb3duZXJdLnN1Yih0b2tlbnMpOwogICAgICAgIGJhbGFuY2VPZltyZWNpcGllbnRdID0gYmFsYW5jZU9mW3JlY2lwaWVudF0uYWRkKHRva2Vucyk7CgoKCiAgICAgICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCByZWNpcGllbnQsIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KCiAgICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KCn0='.
	

]
