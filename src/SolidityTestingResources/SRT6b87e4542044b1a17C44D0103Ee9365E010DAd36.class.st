Class {
	#name : #SRT6b87e4542044b1a17C44D0103Ee9365E010DAd36,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b87e4542044b1a17C44D0103Ee9365E010DAd36 >> base64 [
	^ ''.
	

]
