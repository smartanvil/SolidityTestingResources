Class {
	#name : #SRTa0b3890c3032e4e744e325e779749a696f9a1de6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa0b3890c3032e4e744e325e779749a696f9a1de6 >> base64 [
	^ ''.
	

]
