Class {
	#name : #SRT709c7134053510fce03b464982eab6e3d89728a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT709c7134053510fce03b464982eab6e3d89728a5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCmNvbnRyYWN0IFBpeGVsU2VsbGluZyB7CgogICAgc3RydWN0IExvY2F0aW9uewogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgc3RyaW5nIGltYWdlOwogICAgICAgIHN0cmluZyBtZXNzYWdlOwogICAgICAgIGJvb2wgc2FsZTsKICAgICAgICBhZGRyZXNzIHNhbGVUbzsKICAgICAgICB1aW50IHByaWNlOwogICAgfQoKICAgIHN0cnVjdCBTaGFyZXsKICAgICAgICBhZGRyZXNzIG93bmVyOwogICAgICAgIHVpbnQgbGFzdENhc2hvdXQ7CiAgICAgICAgYm9vbCBzYWxlOwogICAgICAgIGFkZHJlc3Mgc2FsZVRvOwogICAgICAgIHVpbnQgcHJpY2U7CiAgICB9CgogICAgdWludCBwdWJsaWMgbGF0ZXN0cHJpY2U7CiAgICB1aW50IHB1YmxpYyBub1NoYXJlczsKICAgIHVpbnQgcHVibGljIG5vU2FsZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzPT51aW50KSBwdWJsaWMgYmFsYW5jZXM7CgogICAgdWludCBlbXB0eUxvY2F0aW9uUHJvdmlzaW9uOwogICAgdWludCBwcml2U2FsZVByb3Zpc2lvbjsKICAgIHVpbnQgcHJpY2VSaXNlOwogICAgYWRkcmVzcyBjcmVhdG9yOwoKICAgIG1hcHBpbmcgKHVpbnQ9PkxvY2F0aW9uKSBwdWJsaWMgbG9jYXRpb25zOwogICAgbWFwcGluZyAodWludD0+U2hhcmUpIHB1YmxpYyBzaGFyZXM7CgogICAgdWludFtdIHByb3Zpc2lvbnM7CgogICAgZXZlbnQgQ2hhbmdlKHVpbnQgaWQsIHN0cmluZyBldmVudFR5cGUpOwoKICAgIG1vZGlmaWVyIGlzVmFsaWRMb2NJZCh1aW50IGlkKXsKICAgICAgICBpZighKGlkPj0wICYmIGlkPDEwMDAwKSkKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBQaXhlbFNlbGxpbmcoKSB7CiAgICAgICAgY3JlYXRvcj1tc2cuc2VuZGVyOwogICAgICAgIGxhdGVzdHByaWNlPTEwMDAwMDAwMDAwMDAwMDAwOwogICAgICAgIHByaWNlUmlzZSAgPTIwMDAwMDAwMDAwMDAwMDAwOwogICAgICAgIG5vU2hhcmVzPTA7CiAgICAgICAgbm9TYWxlcz0wOwogICAgICAgIGVtcHR5TG9jYXRpb25Qcm92aXNpb249OTA7CiAgICAgICAgcHJpdlNhbGVQcm92aXNpb249OTsKICAgIH0KCiAgICBmdW5jdGlvbigpe3Rocm93O30KCiAgICBmdW5jdGlvbiBidXlFbXB0eUxvY2F0aW9uKHVpbnQgaWQpIGlzVmFsaWRMb2NJZChpZCkgcGF5YWJsZXsKICAgICAgICBMb2NhdGlvbiBsPWxvY2F0aW9uc1tpZF07CiAgICAgICAgaWYobC5vd25lcj09MHgwICYmIG1zZy52YWx1ZT09bGF0ZXN0cHJpY2UpewogICAgICAgICAgICBsLm93bmVyPW1zZy5zZW5kZXI7CiAgICAgICAgICAgIGwuaW1hZ2U9Jyc7CiAgICAgICAgICAgIGwubWVzc2FnZT0nJzsKCiAgICAgICAgICAgIGwuc2FsZT1mYWxzZTsKICAgICAgICAgICAgbC5zYWxlVG89MHgwOwogICAgICAgICAgICBsLnByaWNlPWxhdGVzdHByaWNlOwoKICAgICAgICAgICAgc2hhcmVzW2lkXSA9IFNoYXJlKG1zZy5zZW5kZXIsbm9TYWxlcyxmYWxzZSwweDAsbGF0ZXN0cHJpY2UpOwoKICAgICAgICAgICAgaWYobm9TaGFyZXM+MCl7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSs9KGxhdGVzdHByaWNlLzEwMCkqKDEwMC1lbXB0eUxvY2F0aW9uUHJvdmlzaW9uKTsKICAgICAgICAgICAgICAgIGNyZWRpdFNoYXJlUHJvdmlzaW9uKGxhdGVzdHByaWNlLCBlbXB0eUxvY2F0aW9uUHJvdmlzaW9uKTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSs9bGF0ZXN0cHJpY2U7CiAgICAgICAgICAgICAgICBwcm92aXNpb25zLnB1c2goMCk7CiAgICAgICAgICAgICAgICBub1NhbGVzKz0xOwogICAgICAgICAgICB9CgogICAgICAgICAgICBub1NoYXJlcys9MTsKCiAgICAgICAgICAgIGxhdGVzdHByaWNlKz1wcmljZVJpc2U7CgogICAgICAgICAgICBDaGFuZ2UoaWQsJ293bmVyJyk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBidXlJbWFnZVByaXYodWludCBpZCkgaXNWYWxpZExvY0lkKGlkKSBwYXlhYmxlewogICAgICAgIExvY2F0aW9uIGw9bG9jYXRpb25zW2lkXTsKICAgICAgICBpZigKICAgICAgICAgICAgbC5vd25lciE9MHgwICYmCiAgICAgICAgICAgIGwuc2FsZT09dHJ1ZSAmJgogICAgICAgICAgICAobC5zYWxlVG89PW1zZy5zZW5kZXJ8fGwuc2FsZVRvPT0weDApICYmCiAgICAgICAgICAgIG1zZy52YWx1ZT09bC5wcmljZQogICAgICAgICl7CiAgICAgICAgICAgIGwuaW1hZ2U9Jyc7CiAgICAgICAgICAgIGwubWVzc2FnZT0nJzsKICAgICAgICAgICAgbC5zYWxlPWZhbHNlOwogICAgICAgICAgICBsLnNhbGVUbz0weDA7CgogICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSs9KG1zZy52YWx1ZS8xMDApOwogICAgICAgICAgICBiYWxhbmNlc1tsLm93bmVyXSs9KG1zZy52YWx1ZS8xMDApKig5OS1wcml2U2FsZVByb3Zpc2lvbik7CgogICAgICAgICAgICBsLm93bmVyPW1zZy5zZW5kZXI7CgogICAgICAgICAgICBjcmVkaXRTaGFyZVByb3Zpc2lvbihtc2cudmFsdWUsIHByaXZTYWxlUHJvdmlzaW9uKTsKCiAgICAgICAgICAgIENoYW5nZShpZCwnaW1nIG93bmVyJyk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBidXlTaGFyZVByaXYodWludCBpZCkgaXNWYWxpZExvY0lkKGlkKSBwYXlhYmxlewogICAgICAgIFNoYXJlIHM9c2hhcmVzW2lkXTsKCQlpZigKCQkJcy5vd25lciE9MHgwICYmCgkJCXMuc2FsZT09dHJ1ZSAmJgoJCQkocy5zYWxlVG89PW1zZy5zZW5kZXJ8fHMuc2FsZVRvPT0weDApICYmCgkJCW1zZy52YWx1ZT09cy5wcmljZQoJCSl7CiAgICAgICAgICAgIHMuc2FsZT1mYWxzZTsKICAgICAgICAgICAgcy5zYWxlVG89MHgwOwoKICAgICAgICAgICAgYmFsYW5jZXNbY3JlYXRvcl0rPShtc2cudmFsdWUvMTAwKTsKICAgICAgICAgICAgYmFsYW5jZXNbc2hhcmVzW2lkXS5vd25lcl0rPShtc2cudmFsdWUvMTAwKSooOTktcHJpdlNhbGVQcm92aXNpb24pOwoKICAgICAgICAgICAgc2hhcmVzW2lkXS5vd25lcj1tc2cuc2VuZGVyOwoKICAgICAgICAgICAgY3JlZGl0U2hhcmVQcm92aXNpb24obXNnLnZhbHVlLCBwcml2U2FsZVByb3Zpc2lvbik7CgogICAgICAgICAgICBDaGFuZ2UoaWQsJ3NoYXJlIG93bmVyJyk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRJbWFnZSh1aW50IGlkLCBzdHJpbmcgaW1nKSBpc1ZhbGlkTG9jSWQoaWQpIHsKCQlMb2NhdGlvbiBsPWxvY2F0aW9uc1tpZF07CiAgICAgICAgaWYobC5vd25lcj09bXNnLnNlbmRlciAmJiBieXRlcyhpbWcpLmxlbmd0aDw1MDAxKXsKICAgICAgICAgICAgbC5pbWFnZT1pbWc7CiAgICAgICAgICAgIENoYW5nZShpZCwnaW1hZ2UnKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1lc3NhZ2UodWludCBpZCwgc3RyaW5nIG1zc2cpIGlzVmFsaWRMb2NJZChpZCkgewoJCUxvY2F0aW9uIGw9bG9jYXRpb25zW2lkXTsKICAgICAgICBpZihsLm93bmVyPT1tc2cuc2VuZGVyICYmIGJ5dGVzKG1zc2cpLmxlbmd0aDw1MDEpewogICAgICAgICAgICBsLm1lc3NhZ2U9bXNzZzsKICAgICAgICAgICAgQ2hhbmdlKGlkLCdtZXNzYWdlJyk7CiAgICAgICAgfWVsc2V7CgkJCXRocm93OwoJCX0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRTYWxlSW1nKHVpbnQgaWQsIGJvb2wgc2V0U2FsZSwgYWRkcmVzcyB0bywgdWludCBwKSBpc1ZhbGlkTG9jSWQoaWQpIHsKICAgICAgICBMb2NhdGlvbiBsPWxvY2F0aW9uc1tpZF07CgkJaWYobC5vd25lcj09bXNnLnNlbmRlcil7CiAgICAgICAgICAgIGwuc2FsZT1zZXRTYWxlOwogICAgICAgICAgICBsLnByaWNlPXA7CiAgICAgICAgICAgIGwuc2FsZVRvPXRvOwogICAgICAgICAgICBDaGFuZ2UoaWQsJ2ltZyBzYWxlJyk7CiAgICAgICAgfWVsc2V7CgkJCXRocm93OwoJCX0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRTYWxlU2hhcmUodWludCBpZCwgYm9vbCBzZXRTYWxlLCBhZGRyZXNzIHRvLCB1aW50IHApIGlzVmFsaWRMb2NJZChpZCkgewogICAgICAgIFNoYXJlIHM9c2hhcmVzW2lkXTsKCQlpZihzLm93bmVyPT1tc2cuc2VuZGVyKXsKICAgICAgICAgICAgcy5zYWxlPXNldFNhbGU7CiAgICAgICAgICAgIHMucHJpY2U9cDsKICAgICAgICAgICAgcy5zYWxlVG89dG87CiAgICAgICAgICAgIENoYW5nZShpZCwnc2hhcmUgc2FsZScpOwogICAgICAgIH1lbHNlewoJCQl0aHJvdzsKCQl9CiAgICB9CgogICAgZnVuY3Rpb24gY3JlZGl0U2hhcmVQcm92aXNpb24odWludCBwcmljZSwgdWludCBwcm92aXNpb24pIHByaXZhdGUgewogICAgICAgIHByb3Zpc2lvbnMucHVzaChwcm92aXNpb25zW25vU2FsZXMtMV0rKCgocHJpY2UvMTAwKSpwcm92aXNpb24pL25vU2hhcmVzKSk7CiAgICAgICAgbm9TYWxlcys9MTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcm92aXNpb25CYWxhbmNlKHVpbnQgaWQpIGlzVmFsaWRMb2NJZChpZCkgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICAgICAgU2hhcmUgcz1zaGFyZXNbaWRdOwogICAgICAgIGlmKHMub3duZXIhPTB4MCl7CiAgICAgICAgICAgIHJldHVybiBwcm92aXNpb25zW25vU2FsZXMtMV0tcHJvdmlzaW9uc1tzLmxhc3RDYXNob3V0XTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbGxlY3RQcm92aXNpb25zKHVpbnQgaWQpIGlzVmFsaWRMb2NJZChpZCkgewogICAgICAgIFNoYXJlIHM9c2hhcmVzW2lkXTsKICAgICAgICBpZihzLm93bmVyPT1tc2cuc2VuZGVyKXsKICAgICAgICAgICAgYmFsYW5jZXNbcy5vd25lcl0rPXByb3Zpc2lvbnNbbm9TYWxlcy0xXS1wcm92aXNpb25zW3MubGFzdENhc2hvdXRdOwogICAgICAgICAgICBzLmxhc3RDYXNob3V0PW5vU2FsZXMtMTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIHsKICAgICAgICBpZihiYWxhbmNlc1ttc2cuc2VuZGVyXT4wKXsKICAgICAgICAgICAgdWludCBhbXRUb1dpdGhkcmF3PWJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXT0wOwogICAgICAgICAgICBpZighbXNnLnNlbmRlci5zZW5kKGFtdFRvV2l0aGRyYXcpKSB0aHJvdzsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQp9'.
	

]
