Class {
	#name : #SRT6c0f03411ab250f0a080a4420190b821affd4602,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6c0f03411ab250f0a080a4420190b821affd4602 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vCi8vIEdpemVyIEl0ZW1zIC0gRVJDNzIxKGlzaCkgY29udHJhY3QKLy8KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8KLy8gU2FmZU1hdGgKLy8KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbGlicmFyeSBTYWZlTWF0aCB7CgogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IGMpIHsKICAgIGMgPSBhICogYjsKICAgIHJlcXVpcmUoIGEgPT0gMCB8fCBjIC8gYSA9PSBiICk7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CiAgICBjID0gYSArIGI7CiAgICByZXF1aXJlKCBjID49IGEgKTsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IGMpIHsKICAgIHJlcXVpcmUoIGIgPD0gYSApOwogICAgYyA9IGEgLSBiOwogIH0KCn0KCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vCi8vIE93bmVkCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IE93bmVkIHsKCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgaXNBZG1pbjsKCiAgLy8gRXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlclByb3Bvc2VkKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90byk7CiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvKTsKICBldmVudCBBZG1pbkNoYW5nZShhZGRyZXNzIGluZGV4ZWQgX2FkbWluLCBib29sIF9zdGF0dXMpOwoKICAvLyBNb2RpZmllcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogIG1vZGlmaWVyIG9ubHlPd25lciB7IHJlcXVpcmUoIG1zZy5zZW5kZXIgPT0gb3duZXIgKTsgXzsgfQogIG1vZGlmaWVyIG9ubHlBZG1pbiB7IHJlcXVpcmUoIGlzQWRtaW5bbXNnLnNlbmRlcl0gKTsgXzsgfQoKICAvLyBGdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIGlzQWRtaW5bb3duZXJdID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIF9uZXdPd25lciAhPSBhZGRyZXNzKDB4MCkgKTsKICAgIE93bmVyc2hpcFRyYW5zZmVyUHJvcG9zZWQob3duZXIsIF9uZXdPd25lcik7CiAgICBuZXdPd25lciA9IF9uZXdPd25lcjsKICB9CgogIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQogIAogIGZ1bmN0aW9uIGFkZEFkbWluKGFkZHJlc3MgX2EpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSggaXNBZG1pbltfYV0gPT0gZmFsc2UgKTsKICAgIGlzQWRtaW5bX2FdID0gdHJ1ZTsKICAgIEFkbWluQ2hhbmdlKF9hLCB0cnVlKTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZUFkbWluKGFkZHJlc3MgX2EpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSggaXNBZG1pbltfYV0gPT0gdHJ1ZSApOwogICAgaXNBZG1pbltfYV0gPSBmYWxzZTsKICAgIEFkbWluQ2hhbmdlKF9hLCBmYWxzZSk7CiAgfQogIAp9CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLwovLyBFUkM3MjEoaXNoKSBUb2tlbiBJbnRlcmZhY2UgCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgppbnRlcmZhY2UgRVJDNzIxSW50ZXJmYWNlIC8qIGlzIEVSQzE2NSAqLyB7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF9kZWVkSWQpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9hcHByb3ZlZCwgdWludDI1NiBfZGVlZElkKTsKICAgIGV2ZW50IEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfb3BlcmF0b3IsIGJvb2wgX2FwcHJvdmVkKTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSk7CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX2RlZWRJZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIF9vd25lcik7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfZGVlZElkKSBleHRlcm5hbDsgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgcGF5YWJsZQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9kZWVkSWQpIGV4dGVybmFsOyAvLyByZW1vdmVkIHBheWFibGUKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfYXBwcm92ZWQsIHVpbnQyNTYgX2RlZWRJZCkgZXh0ZXJuYWw7ICAgICAgICAgICAgICAgLy8gcmVtb3ZlZCBwYXlhYmxlCiAgICAvLyBmdW5jdGlvbiBzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzIF9vcGVyYXRlb3IsIGJvb2xlYW4gX2FwcHJvdmVkKTsgICAgICAgIC8vIHJlbW92ZWQgcGF5YWJsZQogICAgLy8gZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IGludGVyZmFjZUlEKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpOwp9CgppbnRlcmZhY2UgRVJDNzIxTWV0YWRhdGEgLyogaXMgRVJDNzIxICovIHsKICAgIGZ1bmN0aW9uIG5hbWUoKSBleHRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZyBfbmFtZSk7CiAgICBmdW5jdGlvbiBzeW1ib2woKSBleHRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZyBfc3ltYm9sKTsKICAgIGZ1bmN0aW9uIGRlZWRVcmkodWludDI1NiBfZGVlZElkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHN0cmluZyBfZGVlZFVyaSk7Cn0KCmludGVyZmFjZSBFUkM3MjFFbnVtZXJhYmxlIC8qIGlzIEVSQzcyMSAqLyB7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBfY291bnQpOwogICAgZnVuY3Rpb24gZGVlZEJ5SW5kZXgodWludDI1NiBfaW5kZXgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBfZGVlZElkKTsKICAgIGZ1bmN0aW9uIGNvdW50T2ZPd25lcnMoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2NvdW50KTsKICAgIC8vIGZ1bmN0aW9uIG93bmVyQnlJbmRleCh1aW50MjU2IF9pbmRleCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIF9vd25lcik7CiAgICAvLyBmdW5jdGlvbiBkZWVkT2ZPd25lckJ5SW5kZXgoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2RlZWRJZCk7Cn0KCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vCi8vIEVSQzcyMSBUb2tlbgovLwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBFUkM3MjFUb2tlbiBpcyBFUkM3MjFJbnRlcmZhY2UsIEVSQzcyMU1ldGFkYXRhLCBFUkM3MjFFbnVtZXJhYmxlLCBPd25lZCB7CiAgCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogIHVpbnQgcHVibGljIG93bmVyQ291bnQgPSAwOwogIHVpbnQgcHVibGljIGRlZWRDb3VudCA9IDA7CiAgCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsKICBtYXBwaW5nKHVpbnQgPT4gYWRkcmVzcykgcHVibGljIG1JZE93bmVyOwogIG1hcHBpbmcodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgbUlkQXBwcm92ZWQ7CgogIC8vIFJlcXVpcmVkIEZ1bmN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgLyogR2V0IHRoZSBudW1iZXIgb2YgdG9rZW5zIGhlbGQgYnkgYW4gYWRkcmVzcyAqLwoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICBiYWxhbmNlID0gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIC8qIEdldCB0aGUgb3duZXIgb2YgYSBjZXJ0YWluIHRva2VuICovCgogIGZ1bmN0aW9uIG93bmVyT2YodWludCBfaWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgewogICAgb3duZXIgPSBtSWRPd25lcltfaWRdOwogICAgcmVxdWlyZSggb3duZXIgIT0gYWRkcmVzcygweDApICk7CiAgfQoKICAvKiBUcmFuc2ZlciB0b2tlbiAqLwogIAogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF9pZCkgZXh0ZXJuYWwgewogICAgLy8gY2hlY2sgb3duZXJzaGlwIGFuZCBhZGRyZXNzCiAgICByZXF1aXJlKCBtc2cuc2VuZGVyID09IG1JZE93bmVyW19pZF0gKTsKICAgIHJlcXVpcmUoIF90byAhPSBhZGRyZXNzKDB4MCkgKTsKCiAgICAvLyB0cmFuc2ZlciBvd25lcnNoaXAKICAgIG1JZE93bmVyW19pZF0gPSBfdG87CiAgICBtSWRBcHByb3ZlZFtfaWRdID0gYWRkcmVzcygweDApOwoKICAgIC8vIHVwZGF0ZSBiYWxhbmNlcwogICAgdXBkYXRlQmFsYW5jZXMobXNnLnNlbmRlciwgX3RvKTsKCiAgICAvLyByZWdpc3RlciBldmVudAogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfaWQpOwogIH0KCiAgLyogVHJhbnNmZXIgZnJvbSAqLwogIAogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfaWQpIGV4dGVybmFsIHsKICAgIC8vIGNoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIHRoZSByaWdodCB0byB0cmFuc2ZlcgogICAgcmVxdWlyZSggX2Zyb20gPT0gbUlkT3duZXJbX2lkXSAmJiBtSWRBcHByb3ZlZFtfaWRdID09IG1zZy5zZW5kZXIgKTsKCiAgICAvLyB0cmFuc2ZlciBvd25lcnNoaXAgYW5kIHJlc2V0IGFwcHJvdmFsIChpZiBhbnkpCiAgICBtSWRPd25lcltfaWRdID0gX3RvOwogICAgbUlkQXBwcm92ZWRbX2lkXSA9IGFkZHJlc3MoMHgwKTsKCiAgICAvLyB1cGRhdGUgYmFsYW5jZXMKICAgIHVwZGF0ZUJhbGFuY2VzKF9mcm9tLCBfdG8pOwoKICAgIC8vIHJlZ2lzdGVyIGV2ZW50CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfaWQpOwogIH0KCiAgLyogQXBwcm92ZSB0b2tlbiB0cmFuc2ZlciAod2UgZG8gbm90IG1ha2UgaXQgcGF5YWJsZSkgKi8KICAKICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9hcHByb3ZlZCwgdWludCBfaWQpIGV4dGVybmFsIHsKICAgICAgIHJlcXVpcmUoIG1zZy5zZW5kZXIgPT0gbUlkT3duZXJbX2lkXSApOwogICAgICAgcmVxdWlyZSggbXNnLnNlbmRlciAhPSBfYXBwcm92ZWQgKTsKICAgICAgIG1JZEFwcHJvdmVkW19pZF0gPSBfYXBwcm92ZWQ7CiAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfYXBwcm92ZWQsIF9pZCk7CiAgIH0KCiAgLy8gTWV0YWRhdGEgRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLQoKCiAgLy8gRW51bWVyYXRpb24gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLQogIAogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50IGNvdW50KSB7CiAgICBjb3VudCA9IGRlZWRDb3VudDsKICB9CgogIGZ1bmN0aW9uIGRlZWRCeUluZGV4KHVpbnQgX2luZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQgaWQpIHsKICAgIGlkID0gX2luZGV4OwogICAgcmVxdWlyZSggaWQgPCBkZWVkQ291bnQgKTsKICB9ICAKICAKICBmdW5jdGlvbiBjb3VudE9mT3duZXJzKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50IGNvdW50KSB7CiAgICBjb3VudCA9IG93bmVyQ291bnQ7CiAgfQogIAogIC8vIEludGVybmFsIGZ1bmN0aW9ucyAtLS0tLS0tLS0tLS0tLS0KICAKICBmdW5jdGlvbiB1cGRhdGVCYWxhbmNlcyhhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bykgaW50ZXJuYWwgewogICAgLy8gcHJvY2VzcyBmcm9tIChza2lwIGlmIG1pbnRlZCkKICAgIGlmIChfZnJvbSAhPSBhZGRyZXNzKDB4MCkpIHsKICAgICAgYmFsYW5jZXNbX2Zyb21dLS07CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPT0gMCkgeyBvd25lckNvdW50LS07IH0KICAgIH0KICAgIC8vIHByb2Nlc3MgdG8KICAgIGJhbGFuY2VzW190b10rKzsKICAgIGlmIChiYWxhbmNlc1tfdG9dID09IDEpIHsgb3duZXJDb3VudCsrOyB9CiAgfQogICAgICAKfQoKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8KLy8gRVJDNzIxIFRva2VuCi8vCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IEdpemVySXRlbXMgaXMgRVJDNzIxVG9rZW4gewoKICAvKiBCYXNpYyB0b2tlbiBkYXRhICovCiAgCiAgc3RyaW5nIGNvbnN0YW50IGNOYW1lICAgPSAiR2l6ZXIgSXRlbSI7CiAgc3RyaW5nIGNvbnN0YW50IGNTeW1ib2wgPSAiR1pSNzIxIjsKICAKICAvKiB1dWlkIGluZm9ybWF0aW9uICovCgogIGJ5dGVzMzJbXSBwdWJsaWMgY29kZTsKICB1aW50W10gcHVibGljIHdlaWdodDsKICB1aW50IHB1YmxpYyBzdW1PZldlaWdodHM7CiAgCiAgbWFwcGluZyhieXRlczMyID0+IHVpbnQpIHB1YmxpYyBtQ29kZUluZGV4UGx1czsgLy8gaW5kZXggKyAxCgogIC8qIFBzZXVkby1yYW5kb21pc2F0aW9uIHZhcmlhYmxlcyAqLwoKICB1aW50IHB1YmxpYyBub25jZSA9IDA7CiAgdWludCBwdWJsaWMgbGFzdFJhbmRvbSA9IDA7CiAgCiAgLyogbWFwcGluZyBmcm9tIGl0ZW0gaW5kZXggdG8gdXVpZCAqLwogIAogIG1hcHBpbmcodWludCA9PiBieXRlczMyKSBwdWJsaWMgbUlkeFV1aWQ7CiAgCiAgLy8gRXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIAogIGV2ZW50IE1pbnRUb2tlbihhZGRyZXNzIGluZGV4ZWQgbWludGVyLCBhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBieXRlczMyIGluZGV4ZWQgX2NvZGUsIHVpbnQgX2lucHV0KTsKICAKICBldmVudCBDb2RlVXBkYXRlKHVpbnQ4IGluZGV4ZWQgX3R5cGUsIGJ5dGVzMzIgaW5kZXhlZCBfY29kZSwgdWludCBfd2VpZ2h0LCB1aW50IF9zdW1PZldlaWdodHMpOwogIAogIC8vIEJhc2ljIEZ1bmN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0KICAKICBmdW5jdGlvbiBHaXplckl0ZW1zKCkgcHVibGljIHsgfQogIAogIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsgcmV2ZXJ0KCk7IH0KICAKICAvLyBJbmZvcm1hdGlvbiBmdW5jdGlvbnMgLS0tLS0tLS0tLS0tCgogIGZ1bmN0aW9uIG5hbWUoKSBleHRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIGNOYW1lOwogIH0KICAKICBmdW5jdGlvbiBzeW1ib2woKSBleHRlcm5hbCBwdXJlIHJldHVybnMgKHN0cmluZykgewogICAgcmV0dXJuIGNTeW1ib2w7CiAgfQogIAogIGZ1bmN0aW9uIGRlZWRVcmkodWludCBfaWQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoc3RyaW5nKSB7CiAgICByZXR1cm4gYnl0ZXMzMlRvU3RyaW5nKG1JZHhVdWlkW19pZF0pOwogIH0KICAKICBmdW5jdGlvbiBnZXRVdWlkKHVpbnQgX2lkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHN0cmluZykgewogICAgcmVxdWlyZSggX2lkIDwgY29kZS5sZW5ndGggKTsKICAgIHJldHVybiBieXRlczMyVG9TdHJpbmcoY29kZVtfaWRdKTsgIAogIH0KCiAgLy8gVG9rZW4gTWludGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLQogIAogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8pIHB1YmxpYyBvbmx5QWRtaW4gcmV0dXJucyAodWludCBpZHgpIHsKICAgIAogICAgLy8gaW5pdGlhbCBjaGVja3MKICAgIHJlcXVpcmUoIHN1bU9mV2VpZ2h0cyA+IDAgKTsKICAgIHJlcXVpcmUoIF90byAhPSBhZGRyZXNzKDB4MCkgKTsKICAgIHJlcXVpcmUoIF90byAhPSBhZGRyZXNzKHRoaXMpICk7CgogICAgLy8gZ2V0IHJhbmRvbSB1dWlkCiAgICBieXRlczMyIHV1aWQzMiA9IGdldFJhbmRvbVV1aWQoKTsKCiAgICAvLyBtaW50IHRva2VuCiAgICBkZWVkQ291bnQrKzsKICAgIGlkeCA9IGRlZWRDb3VudDsKICAgIG1JZHhVdWlkW2lkeF0gPSB1dWlkMzI7CgogICAgLy8gdXBkYXRlIGJhbGFuY2UgYW5kIG93bmVyIGNvdW50CiAgICB1cGRhdGVCYWxhbmNlcyhhZGRyZXNzKDB4MCksIF90byk7CiAgICBtSWRPd25lcltpZHhdID0gX3RvOwoKICAgIC8vIGxvZyBldmVudCBhbmQgcmV0dXJuCiAgICBNaW50VG9rZW4obXNnLnNlbmRlciwgX3RvLCB1dWlkMzIsIGlkeCk7CiAgfQogIAogIC8vIFJhbmRvbQogIAogIGZ1bmN0aW9uIGdldFJhbmRvbVV1aWQoKSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyKSB7CiAgICAvLyBjYXNlIHdoZXJlIHRoZXJlIGlzIG9ubHkgb25lIGl0ZW0gdHlwZQogICAgaWYgKGNvZGUubGVuZ3RoID09IDEpIHJldHVybiBjb2RlWzBdOwoKICAgIC8vIG1vcmUgdGhhbiBvbmUKICAgIHVwZGF0ZVJhbmRvbSgpOwogICAgdWludCByZXMgPSBsYXN0UmFuZG9tICUgc3VtT2ZXZWlnaHRzOwogICAgdWludCBjV2VpZ2h0ID0gMDsKICAgIGZvciAodWludCBpID0gMDsgaSA8IGNvZGUubGVuZ3RoOyBpKyspIHsKICAgICAgY1dlaWdodCA9IGNXZWlnaHQgKyB3ZWlnaHRbaV07CiAgICAgIGlmIChjV2VpZ2h0ID49IHJlcykgcmV0dXJuIGNvZGVbaV07CiAgICB9CgogICAgLy8gd2Ugc2hvdWxkIG5ldmVyIGdldCBoZXJlCiAgICByZXZlcnQoKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZVJhbmRvbSgpIGludGVybmFsIHsKICAgIG5vbmNlKys7CiAgICBsYXN0UmFuZG9tID0gdWludChrZWNjYWsyNTYoCiAgICAgICAgbm9uY2UsCiAgICAgICAgbGFzdFJhbmRvbSwKICAgICAgICBibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gMSksCiAgICAgICAgYmxvY2suY29pbmJhc2UsCiAgICAgICAgYmxvY2suZGlmZmljdWx0eQogICAgKSk7CiAgfQogIAogIC8vIHV1aWQgZnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLS0KICAKICAvKiBhZGQgYSBuZXcgY29kZSArIHdlaWdodCAqLwogIAogIGZ1bmN0aW9uIGFkZENvZGUoc3RyaW5nIF9jb2RlLCB1aW50IF93ZWlnaHQpIHB1YmxpYyBvbmx5QWRtaW4gcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgYnl0ZXMzMiB1dWlkMzIgPSBzdHJpbmdUb0J5dGVzMzIoX2NvZGUpOwoKICAgIC8vIHdlaWdodCBwb3NpaXR2ZSAmIGNvZGUgbm90IHlldCByZWdpc3RlcmVkCiAgICByZXF1aXJlKCBfd2VpZ2h0ID4gMCApOwogICAgcmVxdWlyZSggbUNvZGVJbmRleFBsdXNbdXVpZDMyXSA9PSAwICk7CgogICAgLy8gYWRkIHRvIGVuZCBvZiBhcnJheQogICAgdWludCBpZHggPSBjb2RlLmxlbmd0aDsKICAgIGNvZGUucHVzaCh1dWlkMzIpOwogICAgd2VpZ2h0LnB1c2goX3dlaWdodCk7CiAgICBtQ29kZUluZGV4UGx1c1t1dWlkMzJdID0gaWR4ICsgMTsKCiAgICAvLyB1cGRhdGUgc3VtIG9mIHdlaWdodHMKICAgIHN1bU9mV2VpZ2h0cyA9IHN1bU9mV2VpZ2h0cy5hZGQoX3dlaWdodCk7CgogICAgLy8gcmVnaXN0ZXIgZXZlbnQgYW5kIHJldHVybgogICAgQ29kZVVwZGF0ZSgxLCB1dWlkMzIsIF93ZWlnaHQsIHN1bU9mV2VpZ2h0cyk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgLyogdXBkYXRlIHRoZSB3ZWlnaHQgb2YgYW4gZXhpc3RpbmcgY29kZSAqLwogIAogIGZ1bmN0aW9uIHVwZGF0ZUNvZGVXZWlnaHQoc3RyaW5nIF9jb2RlLCB1aW50IF93ZWlnaHQpIHB1YmxpYyBvbmx5QWRtaW4gcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgYnl0ZXMzMiB1dWlkMzIgPSBzdHJpbmdUb0J5dGVzMzIoX2NvZGUpOwoKICAgIC8vIHdlaWdodCBwb3NpdGl2ZSAmIGNvZGUgbXVzdCBiZSByZWdpc3RlcmVkCiAgICByZXF1aXJlKCBfd2VpZ2h0ID4gMCApOwogICAgcmVxdWlyZSggbUNvZGVJbmRleFBsdXNbdXVpZDMyXSA+IDAgKTsKCiAgICAvLyB1cGRhdGUgd2VpZ2h0IGFuZCBzdW0gb2Ygd2VpZ2h0cwogICAgdWludCBpZHggPSBtQ29kZUluZGV4UGx1c1t1dWlkMzJdIC0gMTsKICAgIHVpbnQgb2xkV2VpZ2h0ID0gd2VpZ2h0W2lkeF07CiAgICB3ZWlnaHRbaWR4XSA9IF93ZWlnaHQ7CiAgICBzdW1PZldlaWdodHMgPSBzdW1PZldlaWdodHMuc3ViKG9sZFdlaWdodCkuYWRkKF93ZWlnaHQpOwoKICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGFuZCByZXR1cm4KICAgIENvZGVVcGRhdGUoMiwgdXVpZDMyLCBfd2VpZ2h0LCBzdW1PZldlaWdodHMpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIAogIC8qIHJlbW92ZSBhbiBleGlzdGluZyBjb2RlICovCiAgCiAgZnVuY3Rpb24gcmVtb3ZlQ29kZShzdHJpbmcgX2NvZGUpIHB1YmxpYyBvbmx5QWRtaW4gcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgYnl0ZXMzMiB1dWlkMzIgPSBzdHJpbmdUb0J5dGVzMzIoX2NvZGUpOwoKICAgIC8vIGNvZGUgbXVzdCBiZSByZWdpc3RlcmVkCiAgICByZXF1aXJlKCBtQ29kZUluZGV4UGx1c1t1dWlkMzJdID4gMCApOwoKICAgIC8vIGluZGV4IG9mIGNvZGUgdG8gYmUgZGVsZXRlZAogICAgdWludCBpZHggPSBtQ29kZUluZGV4UGx1c1t1dWlkMzJdIC0gMTsKICAgIHVpbnQgaWR4TGFzdCA9IGNvZGUubGVuZ3RoIC0gMTsKCiAgICAvLyB1cGRhdGUgc3VtIG9mIHdlaWdodHMgYW5kIHJlbW92ZSBtYXBwaW5nCiAgICBzdW1PZldlaWdodHMgPSBzdW1PZldlaWdodHMuc3ViKHdlaWdodFtpZHhdKTsKICAgIG1Db2RlSW5kZXhQbHVzW3V1aWQzMl0gPSAwOwoKICAgIGlmIChpZHggIT0gaWR4TGFzdCkgewogICAgICAvLyBpZiB3ZSBhcmUgbm90IGRlbGV0aW5nIHRoZSBsYXN0IGVsZW1lbnQ6CiAgICAgIC8vIG1vdmUgbGFzdCBlbGVtZW50IHRvIGluZGV4IG9mIGRlbGV0ZWQgZWxlbWVudAogICAgICBjb2RlW2lkeF0gPSBjb2RlW2lkeExhc3RdOwogICAgICB3ZWlnaHRbaWR4XSA9IHdlaWdodFtpZHhMYXN0XTsKICAgICAgbUNvZGVJbmRleFBsdXNbY29kZVtpZHhMYXN0XV0gPSBpZHg7CiAgICB9CiAgICAvLyBkZWxldGUgbGFzdCBlbGVtZW50IG9mIGFycmF5cwogICAgZGVsZXRlIGNvZGVbaWR4TGFzdF07CiAgICBjb2RlLmxlbmd0aC0tOwogICAgZGVsZXRlIHdlaWdodFtpZHhMYXN0XTsKICAgIHdlaWdodC5sZW5ndGgtLTsKCiAgICAvLyByZWdpc3RlciBldmVudCBhbmQgcmV0dXJuCiAgICBDb2RlVXBkYXRlKDMsIHV1aWQzMiwgMCwgc3VtT2ZXZWlnaHRzKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyogVHJhbnNmZXIgb3V0IGFueSBhY2NpZGVudGFsbHkgc2VudCBFUkMyMCB0b2tlbnMgKi8KCiAgZnVuY3Rpb24gdHJhbnNmZXJBbnlFUkMyMFRva2VuKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCB1aW50IGFtb3VudCkgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgcmV0dXJuIEVSQzIwSW50ZXJmYWNlKHRva2VuQWRkcmVzcykudHJhbnNmZXIob3duZXIsIGFtb3VudCk7CiAgfQogIAogIC8vIFV0aWxpdHkgZnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0KCiAgLyogaHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvOTE0Mi9ob3ctdG8tY29udmVydC1hLXN0cmluZy10by1ieXRlczMyICovCiAgCiAgZnVuY3Rpb24gc3RyaW5nVG9CeXRlczMyKHN0cmluZyBtZW1vcnkgc291cmNlKSBwdWJsaWMgcHVyZSByZXR1cm5zIChieXRlczMyIHJlc3VsdCkgewogICAgYnl0ZXMgbWVtb3J5IHRlbXBFbXB0eVN0cmluZ1Rlc3QgPSBieXRlcyhzb3VyY2UpOwogICAgaWYgKHRlbXBFbXB0eVN0cmluZ1Rlc3QubGVuZ3RoID09IDApIHsKICAgICAgICByZXR1cm4gMHgwOwogICAgfQoKICAgIGFzc2VtYmx5IHsKICAgICAgICByZXN1bHQgOj0gbWxvYWQoYWRkKHNvdXJjZSwgMzIpKQogICAgfQogIH0KICAKICAvKiBodHRwczovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yNTE5L2hvdy10by1jb252ZXJ0LWEtYnl0ZXMzMi10by1zdHJpbmcgKi8KCiAgZnVuY3Rpb24gYnl0ZXMzMlRvU3RyaW5nKGJ5dGVzMzIgeCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nKSB7CiAgICBieXRlcyBtZW1vcnkgYnl0ZXNTdHJpbmcgPSBuZXcgYnl0ZXMoMzIpOwogICAgdWludCBjaGFyQ291bnQgPSAwOwogICAgZm9yICh1aW50IGogPSAwOyBqIDwgMzI7IGorKykgewogICAgICBieXRlIGNoYXIgPSBieXRlKGJ5dGVzMzIodWludCh4KSAqIDIgKiogKDggKiBqKSkpOwogICAgICBpZiAoY2hhciAhPSAwKSB7CiAgICAgICAgYnl0ZXNTdHJpbmdbY2hhckNvdW50XSA9IGNoYXI7CiAgICAgICAgY2hhckNvdW50Kys7CiAgICAgIH0KICAgIH0KICAgIGJ5dGVzIG1lbW9yeSBieXRlc1N0cmluZ1RyaW1tZWQgPSBuZXcgYnl0ZXMoY2hhckNvdW50KTsKICAgIGZvciAoaiA9IDA7IGogPCBjaGFyQ291bnQ7IGorKykgewogICAgICBieXRlc1N0cmluZ1RyaW1tZWRbal0gPSBieXRlc1N0cmluZ1tqXTsKICAgIH0KICAgIHJldHVybiBzdHJpbmcoYnl0ZXNTdHJpbmdUcmltbWVkKTsKICB9CiAgCn0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8KLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtMjAtdG9rZW4tc3RhbmRhcmQubWQKLy8KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7Cn0='.
	

]
