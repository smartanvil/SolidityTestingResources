Class {
	#name : #SRTf8ac94af15f8325a6e5e8e3dfc3ba8a528dae237,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf8ac94af15f8325a6e5e8e3dfc3ba8a528dae237 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjBCYXNpYy5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9FeGNoYW5nZXJJLnNvbAoKY29udHJhY3QgRXhjaGFuZ2VySSB7CiAgRVJDMjBCYXNpYyBwdWJsaWMgd3ByOwoKICAvLy8gQG5vdGljZSBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSBXQ1QgaG9sZGVycyB0byBjb2xsZWN0IHRoZWlyCiAgLy8vICBjb3JyZXNwb25kaW5nIFdQUnMKICBmdW5jdGlvbiBjb2xsZWN0KGFkZHJlc3MgY2FsbGVyKSBwdWJsaWM7Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9JbnZlc3RvcldhbGxldEZhY3RvcnlJLnNvbAoKY29udHJhY3QgSW52ZXN0b3JXYWxsZXRGYWN0b3J5SSB7CiAgYWRkcmVzcyBwdWJsaWMgZXhjaGFuZ2VyOwp9CgovLyBGaWxlOiBjb250cmFjdHMvU2FmZU1hdGguc29sCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL293bmVyc2hpcC9Pd25hYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogY29udHJhY3RzL0ludmVzdG9yV2FsbGV0LnNvbAoKLy8gMS4gV2VQb3dlciBkZXBsb3kgYSBjb250cmFjdCB3aGljaCBpcyBjb250cm9sbGVkIGJ5IFdlUG93ZXIgbXVsdGlzaWcuCi8vIDIuIEludmVzdG9yIHRyYW5zZmVyIGV0aCBvciBhbnkgb3RoZXIgY3VycmVuY3kgdG8gV2VQb3dlciBtdWx0aXNpZyBvciBzb21lIGJhbmsuCi8vIDMuIFdlUG93ZXIgbWludHMgV0NUMiB0byB0aGF0IGludmVzdG9yIGNvbnRyYWN0IHdhbGxldC4KLy8gNC4gSW52ZXN0b3IgY29udHJhY3Qgd2FsbGV0IHN0b3JlcyBXQ1QyLgovLyA1LiBXZVBvd2VyIHRyYW5zZmVycyBvd25lcnNoaXAgdG8gSW52ZXN0b3IgbXVsdGlzaWcuCi8vIDYuIEludmVzdG9yIGNhbiBvbmx5IGNsYWltIHRva2VucyBhZnRlciBYIG1vbnRocyBkZWZpbmVkIG9uIHRoZSBjb250cmFjdCBkZXBsb3ltZW50LgoKY29udHJhY3QgSW52ZXN0b3JXYWxsZXQgaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgYWRkcmVzcyBpbnRlcm5hbCB3Y3QyOwogIEludmVzdG9yV2FsbGV0RmFjdG9yeUkgaW50ZXJuYWwgZmFjdG9yeTsKICB1aW50MjU2IHB1YmxpYyByZWxlYXNlVGltZTsKCiAgZnVuY3Rpb24gSW52ZXN0b3JXYWxsZXQoYWRkcmVzcyBfd2N0MiwgYWRkcmVzcyBfZmFjdG9yeSwgdWludDI1NiBfbW9udGhzVG9SZWxlYXNlKSB7CiAgICB3Y3QyID0gX3djdDI7CiAgICBmYWN0b3J5ID0gSW52ZXN0b3JXYWxsZXRGYWN0b3J5SShfZmFjdG9yeSk7CiAgICByZWxlYXNlVGltZSA9IGdldFRpbWUoKS5hZGQobW9udGhzKF9tb250aHNUb1JlbGVhc2UpKTsKICB9CgogIGZ1bmN0aW9uICgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZXhjaGFuZ2VUb2tlbnMoKTsKICAgIGNvbGxlY3RUb2tlbnMoKTsKICB9CgogIGZ1bmN0aW9uIGV4Y2hhbmdlVG9rZW5zKCkgcHVibGljIG9ubHlPd25lciB7CiAgICBFeGNoYW5nZXJJIGV4Y2hhbmdlciA9IEV4Y2hhbmdlckkoZmFjdG9yeS5leGNoYW5nZXIoKSk7CgogICAgcmVxdWlyZShhZGRyZXNzKGV4Y2hhbmdlcikgIT0gMHgwKTsKICAgIGV4Y2hhbmdlci5jb2xsZWN0KGFkZHJlc3ModGhpcykpOwogIH0KCiAgLy8vIEBub3RpY2UgVGhlIERldiAoT3duZXIpIHdpbGwgY2FsbCB0aGlzIG1ldGhvZCB0byBleHRyYWN0IHRoZSB0b2tlbnMKICBldmVudCBsb2dnZXIoc3RyaW5nIHMpOwogIGZ1bmN0aW9uIGNvbGxlY3RUb2tlbnMoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoZ2V0VGltZSgpID4gcmVsZWFzZVRpbWUpOwogICAgRXhjaGFuZ2VySSBleGNoYW5nZXIgPSBFeGNoYW5nZXJJKGZhY3RvcnkuZXhjaGFuZ2VyKCkpOwogICAgcmVxdWlyZShhZGRyZXNzKGV4Y2hhbmdlcikgIT0gMHgwKTsKICAgIEVSQzIwQmFzaWMgd3ByID0gRVJDMjBCYXNpYyhleGNoYW5nZXIud3ByKCkpOwogICAgdWludDI1NiBiYWxhbmNlID0gd3ByLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKTsKICAgIHJlcXVpcmUod3ByLnRyYW5zZmVyKG93bmVyLCBiYWxhbmNlKSk7CiAgICBUb2tlbnNXaXRoZHJhd24ob3duZXIsIGJhbGFuY2UpOwogIH0KCiAgZnVuY3Rpb24gZ2V0VGltZSgpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBub3c7CiAgfQoKICBmdW5jdGlvbiBtb250aHModWludDI1NiBtKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHJldHVybiBtLm11bCgzMCBkYXlzKTsKICB9CgogIC8vLy8vLy8vLy8KICAvLyBTYWZldHkgTWV0aG9kcwogIC8vLy8vLy8vLy8KCiAgLy8vIEBub3RpY2UgVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgYnkgdGhlIG93bmVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogIC8vLyAgc2VudCB0b2tlbnMgdG8gdGhpcyBjb250cmFjdC4KICAvLy8gQHBhcmFtIF90b2tlbiBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyCiAgLy8vICBzZXQgdG8gMCBpbiBjYXNlIHlvdSB3YW50IHRvIGV4dHJhY3QgZXRoZXIuCiAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoYWRkcmVzcyBfdG9rZW4pIHB1YmxpYyBvbmx5T3duZXIgewogICAgRXhjaGFuZ2VySSBleGNoYW5nZXIgPSBFeGNoYW5nZXJJKGZhY3RvcnkuZXhjaGFuZ2VyKCkpOwogICAgcmVxdWlyZShhZGRyZXNzKGV4Y2hhbmdlcikgIT0gMHgwKTsKICAgIEVSQzIwQmFzaWMgd3ByID0gRVJDMjBCYXNpYyhleGNoYW5nZXIud3ByKCkpOwogICAgcmVxdWlyZShfdG9rZW4gIT0gYWRkcmVzcyh3Y3QyKSAmJiBfdG9rZW4gIT0gYWRkcmVzcyh3cHIpKTsKCiAgICBpZiAoX3Rva2VuID09IDB4MCkgewogICAgICBvd25lci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICByZXR1cm47CiAgICB9CgogICAgRVJDMjBCYXNpYyB0b2tlbiA9IEVSQzIwQmFzaWMoX3Rva2VuKTsKICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIHRva2VuLnRyYW5zZmVyKG93bmVyLCBiYWxhbmNlKTsKICAgIENsYWltZWRUb2tlbnMoX3Rva2VuLCBvd25lciwgYmFsYW5jZSk7CiAgfQoKICBldmVudCBDbGFpbWVkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgX2Ftb3VudCk7CiAgZXZlbnQgVG9rZW5zV2l0aGRyYXduKGFkZHJlc3MgaW5kZXhlZCBfaG9sZGVyLCB1aW50MjU2IF9hbW91bnQpOwp9CgovLyBGaWxlOiBjb250cmFjdHMvTWluaU1lVG9rZW4uc29sCgovKgogICAgQ29weXJpZ2h0IDIwMTYsIEpvcmRpIEJheWxpbmEKCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgogKi8KCi8vLyBAdGl0bGUgTWluaU1lVG9rZW4gQ29udHJhY3QKLy8vIEBhdXRob3IgSm9yZGkgQmF5bGluYQovLy8gQGRldiBUaGlzIHRva2VuIGNvbnRyYWN0J3MgZ29hbCBpcyB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBjbG9uZSB0aGlzCi8vLyAgdG9rZW4gdXNpbmcgdGhlIHRva2VuIGRpc3RyaWJ1dGlvbiBhdCBhIGdpdmVuIGJsb2NrLCB0aGlzIHdpbGwgYWxsb3cgREFPJ3MKLy8vICBhbmQgREFwcHMgdG8gdXBncmFkZSB0aGVpciBmZWF0dXJlcyBpbiBhIGRlY2VudHJhbGl6ZWQgbWFubmVyIHdpdGhvdXQKLy8vICBhZmZlY3RpbmcgdGhlIG9yaWdpbmFsIHRva2VuCi8vLyBAZGV2IEl0IGlzIEVSQzIwIGNvbXBsaWFudCwgYnV0IHN0aWxsIG5lZWRzIHRvIHVuZGVyIGdvIGZ1cnRoZXIgdGVzdGluZy4KCgovLy8gQGRldiBUaGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdCBtdXN0IGltcGxlbWVudCB0aGVzZSBmdW5jdGlvbnMKY29udHJhY3QgVG9rZW5Db250cm9sbGVyIHsKICAgIC8vLyBAbm90aWNlIENhbGxlZCB3aGVuIGBfb3duZXJgIHNlbmRzIGV0aGVyIHRvIHRoZSBNaW5pTWUgVG9rZW4gY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgc2VudCB0aGUgZXRoZXIgdG8gY3JlYXRlIHRva2VucwogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXRoZXIgaXMgYWNjZXB0ZWQsIGZhbHNlIGlmIGl0IHRocm93cwogICAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgX293bmVyKSBwYXlhYmxlIHJldHVybnMoYm9vbCk7CgogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBvcmlnaW4gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgdHJhbnNmZXIKICAgIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcmV0dXJucyhib29sKTsKCiAgICAvLy8gQG5vdGljZSBOb3RpZmllcyB0aGUgY29udHJvbGxlciBhYm91dCBhbiBhcHByb3ZhbCBhbGxvd2luZyB0aGUKICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IGNhbGxzIGBhcHByb3ZlKClgCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBzcGVuZGVyIGluIHRoZSBgYXBwcm92ZSgpYCBjYWxsCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbAogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSBhcHByb3ZhbAogICAgZnVuY3Rpb24gb25BcHByb3ZlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hbW91bnQpCiAgICAgICAgcmV0dXJucyhib29sKTsKfQoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgICAvLy8gQG5vdGljZSBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJvbGxlciBpcyB0aGUgb25seSBhZGRyZXNzIHRoYXQgY2FuIGNhbGwKICAgIC8vLyAgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyb2xsZXIpOyBfOyB9CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgeyBjb250cm9sbGVyID0gbXNnLnNlbmRlcjt9CgogICAgLy8vIEBub3RpY2UgQ2hhbmdlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX25ld0NvbnRyb2xsZXIgVGhlIG5ldyBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gY2hhbmdlQ29udHJvbGxlcihhZGRyZXNzIF9uZXdDb250cm9sbGVyKSBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgY29udHJvbGxlciA9IF9uZXdDb250cm9sbGVyOwogICAgfQp9Cgpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsKICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIGZyb20sIHVpbnQyNTYgX2Ftb3VudCwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9kYXRhKTsKfQoKLy8vIEBkZXYgVGhlIGFjdHVhbCB0b2tlbiBjb250cmFjdCwgdGhlIGRlZmF1bHQgY29udHJvbGxlciBpcyB0aGUgbXNnLnNlbmRlcgovLy8gIHRoYXQgZGVwbG95cyB0aGUgY29udHJhY3QsIHNvIHVzdWFsbHkgdGhpcyB0b2tlbiB3aWxsIGJlIGRlcGxveWVkIGJ5IGEKLy8vICB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0LCB3aGljaCBHaXZldGggd2lsbCBjYWxsIGEgIkNhbXBhaWduIgpjb250cmFjdCBNaW5pTWVUb2tlbiBpcyBDb250cm9sbGVkIHsKCiAgICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgICAgICAgICAgIC8vVGhlIFRva2VuJ3MgbmFtZTogZS5nLiBEaWdpeERBTyBUb2tlbnMKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsgICAgICAgICAgICAgLy9OdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIHNtYWxsZXN0IHVuaXQKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlLmcuIFJFUAogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ01NVF8wLjEnOyAvL0FuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZQoKCiAgICAvLy8gQGRldiBgQ2hlY2twb2ludGAgaXMgdGhlIHN0cnVjdHVyZSB0aGF0IGF0dGFjaGVzIGEgYmxvY2sgbnVtYmVyIHRvIGEKICAgIC8vLyAgZ2l2ZW4gdmFsdWUsIHRoZSBibG9jayBudW1iZXIgYXR0YWNoZWQgaXMgdGhlIG9uZSB0aGF0IGxhc3QgY2hhbmdlZCB0aGUKICAgIC8vLyAgdmFsdWUKICAgIHN0cnVjdCAgQ2hlY2twb2ludCB7CgogICAgICAgIC8vIGBmcm9tQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgdmFsdWUgd2FzIGdlbmVyYXRlZCBmcm9tCiAgICAgICAgdWludDEyOCBmcm9tQmxvY2s7CgogICAgICAgIC8vIGB2YWx1ZWAgaXMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBibG9jayBudW1iZXIKICAgICAgICB1aW50MTI4IHZhbHVlOwogICAgfQoKICAgIC8vIGBwYXJlbnRUb2tlbmAgaXMgdGhlIFRva2VuIGFkZHJlc3MgdGhhdCB3YXMgY2xvbmVkIHRvIHByb2R1Y2UgdGhpcyB0b2tlbjsKICAgIC8vICBpdCB3aWxsIGJlIDB4MCBmb3IgYSB0b2tlbiB0aGF0IHdhcyBub3QgY2xvbmVkCiAgICBNaW5pTWVUb2tlbiBwdWJsaWMgcGFyZW50VG9rZW47CgogICAgLy8gYHBhcmVudFNuYXBTaG90QmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgZnJvbSB0aGUgUGFyZW50IFRva2VuIHRoYXQgd2FzCiAgICAvLyAgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBDbG9uZSBUb2tlbgogICAgdWludCBwdWJsaWMgcGFyZW50U25hcFNob3RCbG9jazsKCiAgICAvLyBgY3JlYXRpb25CbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZSBDbG9uZSBUb2tlbiB3YXMgY3JlYXRlZAogICAgdWludCBwdWJsaWMgY3JlYXRpb25CbG9jazsKCiAgICAvLyBgYmFsYW5jZXNgIGlzIHRoZSBtYXAgdGhhdCB0cmFja3MgdGhlIGJhbGFuY2Ugb2YgZWFjaCBhZGRyZXNzLCBpbiB0aGlzCiAgICAvLyAgY29udHJhY3Qgd2hlbiB0aGUgYmFsYW5jZSBjaGFuZ2VzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgY2hhbmdlCiAgICAvLyAgb2NjdXJyZWQgaXMgYWxzbyBpbmNsdWRlZCBpbiB0aGUgbWFwCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENoZWNrcG9pbnRbXSkgYmFsYW5jZXM7CgogICAgLy8gYGFsbG93ZWRgIHRyYWNrcyBhbnkgZXh0cmEgdHJhbnNmZXIgcmlnaHRzIGFzIGluIGFsbCBFUkMyMCB0b2tlbnMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAvLyBUcmFja3MgdGhlIGhpc3Rvcnkgb2YgdGhlIGB0b3RhbFN1cHBseWAgb2YgdGhlIHRva2VuCiAgICBDaGVja3BvaW50W10gdG90YWxTdXBwbHlIaXN0b3J5OwoKICAgIC8vIEZsYWcgdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSB0b2tlbiBpcyB0cmFuc2ZlcmFibGUgb3Igbm90LgogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZDsKCiAgICAvLyBUaGUgZmFjdG9yeSB1c2VkIHRvIGNyZWF0ZSBuZXcgY2xvbmUgdG9rZW5zCiAgICBNaW5pTWVUb2tlbkZhY3RvcnkgcHVibGljIHRva2VuRmFjdG9yeTsKCi8vLy8vLy8vLy8vLy8vLy8KLy8gQ29uc3RydWN0b3IKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIE1pbmlNZVRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlbkZhY3RvcnkgVGhlIGFkZHJlc3Mgb2YgdGhlIE1pbmlNZVRva2VuRmFjdG9yeSBjb250cmFjdCB0aGF0CiAgICAvLy8gIHdpbGwgY3JlYXRlIHRoZSBDbG9uZSB0b2tlbiBjb250cmFjdHMsIHRoZSB0b2tlbiBmYWN0b3J5IG5lZWRzIHRvIGJlCiAgICAvLy8gIGRlcGxveWVkIGZpcnN0CiAgICAvLy8gQHBhcmFtIF9wYXJlbnRUb2tlbiBBZGRyZXNzIG9mIHRoZSBwYXJlbnQgdG9rZW4sIHNldCB0byAweDAgaWYgaXQgaXMgYQogICAgLy8vICBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3BhcmVudFNuYXBTaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwKICAgIC8vLyAgZGV0ZXJtaW5lIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgY2xvbmUgdG9rZW4sIHNldCB0byAwIGlmIGl0CiAgICAvLy8gIGlzIGEgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlbk5hbWUgTmFtZSBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF9kZWNpbWFsVW5pdHMgTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuU3ltYm9sIFRva2VuIFN5bWJvbCBmb3IgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBJZiB0cnVlLCB0b2tlbnMgd2lsbCBiZSBhYmxlIHRvIGJlIHRyYW5zZmVycmVkCiAgICBmdW5jdGlvbiBNaW5pTWVUb2tlbigKICAgICAgICBhZGRyZXNzIF90b2tlbkZhY3RvcnksCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sCiAgICAgICAgdWludCBfcGFyZW50U25hcFNob3RCbG9jaywKICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwKICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wsCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgKSB7CiAgICAgICAgdG9rZW5GYWN0b3J5ID0gTWluaU1lVG9rZW5GYWN0b3J5KF90b2tlbkZhY3RvcnkpOwogICAgICAgIG5hbWUgPSBfdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVjaW1hbHMKICAgICAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbAogICAgICAgIHBhcmVudFRva2VuID0gTWluaU1lVG9rZW4oX3BhcmVudFRva2VuKTsKICAgICAgICBwYXJlbnRTbmFwU2hvdEJsb2NrID0gX3BhcmVudFNuYXBTaG90QmxvY2s7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgICAgIGNyZWF0aW9uQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICB9CgoKLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBFUkMyMCBNZXRob2RzCi8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfYW1vdW50YCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKHRyYW5zZmVyc0VuYWJsZWQpOwogICAgICAgIHJldHVybiBkb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX2Ftb3VudGAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudAogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgLy8gVGhlIGNvbnRyb2xsZXIgb2YgdGhpcyBjb250cmFjdCBjYW4gbW92ZSB0b2tlbnMgYXJvdW5kIGF0IHdpbGwsCgogICAgICAgIC8vICBjb250cm9sbGVyIG9mIHRoaXMgY29udHJhY3QsIHdoaWNoIGluIG1vc3Qgc2l0dWF0aW9ucyBzaG91bGQgYmUKICAgICAgICAvLyAgYW5vdGhlciBvcGVuIHNvdXJjZSBzbWFydCBjb250cmFjdCBvciAweDAKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjb250cm9sbGVyKSB7CiAgICAgICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgICAgICAvLyBUaGUgc3RhbmRhcmQgRVJDIDIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbmFsaXR5CiAgICAgICAgICAgIGlmIChhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA8IF9hbW91bnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBpcyB0aGUgYWN0dWFsIHRyYW5zZmVyIGZ1bmN0aW9uIGluIHRoZSB0b2tlbiBjb250cmFjdCwgaXQgY2FuCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudAogICAgKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKCiAgICAgICAgICAgaWYgKF9hbW91bnQgPT0gMCkgewogICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICB9CgogICAgICAgICAgIHJlcXVpcmUocGFyZW50U25hcFNob3RCbG9jayA8IGJsb2NrLm51bWJlcik7CgogICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyB0cmFuc2ZlciB0byAweDAgb3IgdGhlIHRva2VuIGNvbnRyYWN0IGl0c2VsZgogICAgICAgICAgIHJlcXVpcmUoKF90byAhPSAwKSAmJiAoX3RvICE9IGFkZHJlc3ModGhpcykpKTsKCiAgICAgICAgICAgLy8gSWYgdGhlIGFtb3VudCBiZWluZyB0cmFuc2ZlcmVkIGlzIG1vcmUgdGhhbiB0aGUgYmFsYW5jZSBvZiB0aGUKICAgICAgICAgICAvLyAgYWNjb3VudCB0aGUgdHJhbnNmZXIgcmV0dXJucyBmYWxzZQogICAgICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mQXQoX2Zyb20sIGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgaWYgKHByZXZpb3VzQmFsYW5jZUZyb20gPCBfYW1vdW50KSB7CiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICB9CgogICAgICAgICAgIC8vIEFsZXJ0cyB0aGUgdG9rZW4gY29udHJvbGxlciBvZiB0aGUgdHJhbnNmZXIKICAgICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgewogICAgICAgICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vblRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpKTsKICAgICAgICAgICB9CgogICAgICAgICAgIC8vIEZpcnN0IHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgICAgLy8gIHNlbmRpbmcgdGhlIHRva2VucwogICAgICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX2Zyb21dLCBwcmV2aW91c0JhbGFuY2VGcm9tIC0gX2Ftb3VudCk7CgogICAgICAgICAgIC8vIFRoZW4gdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MKICAgICAgICAgICAvLyAgcmVjZWl2aW5nIHRoZSB0b2tlbnMKICAgICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2ZBdChfdG8sIGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgcmVxdWlyZShwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQgPj0gcHJldmlvdXNCYWxhbmNlVG8pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW190b10sIHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCk7CgogICAgICAgICAgIC8vIEFuIGV2ZW50IHRvIG1ha2UgdGhlIHRyYW5zZmVyIGVhc3kgdG8gZmluZCBvbiB0aGUgYmxvY2tjaGFpbgogICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0J3MgYmFsYW5jZSBpcyBiZWluZyByZXF1ZXN0ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIG9mIGBfb3duZXJgIGF0IHRoZSBjdXJyZW50IGJsb2NrCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlT2ZBdChfb3duZXIsIGJsb2NrLm51bWJlcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF9hbW91bnRgIHRva2VucyBvbgogICAgLy8vICBpdHMgYmVoYWxmLiBUaGlzIGlzIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgRVJDMjAgYXBwcm92ZSBmdW5jdGlvbgogICAgLy8vICB0byBiZSBhIGxpdHRsZSBiaXQgc2FmZXIKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSBhcHByb3ZlIGZ1bmN0aW9uIGNhbGwKICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgewogICAgICAgICAgICByZXF1aXJlKFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vbkFwcHJvdmUobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpKTsKICAgICAgICB9CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIHJlYWQgdGhlIGBhbGxvd2VkW11gIG1hcAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIG9mIF9vd25lciB0aGF0IF9zcGVuZGVyIGlzIGFsbG93ZWQKICAgIC8vLyAgdG8gc3BlbmQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcgogICAgKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNlbmQgYF9hbW91bnRgIHRva2VucyBvbgogICAgLy8vICBpdHMgYmVoYWxmLCBhbmQgdGhlbiBhIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCBpbiB0aGUgY29udHJhY3QgdGhhdCBpcwogICAgLy8vICBiZWluZyBhcHByb3ZlZCwgYF9zcGVuZGVyYC4gVGhpcyBhbGxvd3MgdXNlcnMgdG8gdXNlIHRoZWlyIHRva2VucyB0bwogICAgLy8vICBpbnRlcmFjdCB3aXRoIGNvbnRyYWN0cyBpbiBvbmUgZnVuY3Rpb24gY2FsbCBpbnN0ZWFkIG9mIHR3bwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3QgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBmdW5jdGlvbiBjYWxsIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9leHRyYURhdGEKICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShhcHByb3ZlKF9zcGVuZGVyLCBfYW1vdW50KSk7CgogICAgICAgIEFwcHJvdmVBbmRDYWxsRmFsbEJhY2soX3NwZW5kZXIpLnJlY2VpdmVBcHByb3ZhbCgKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgX2Ftb3VudCwKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgX2V4dHJhRGF0YQogICAgICAgICk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZnVuY3Rpb24gbWFrZXMgaXQgZWFzeSB0byBnZXQgdGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHlBdChibG9jay5udW1iZXIpOwogICAgfQoKCi8vLy8vLy8vLy8vLy8vLy8KLy8gUXVlcnkgYmFsYW5jZSBhbmQgdG90YWxTdXBwbHkgaW4gSGlzdG9yeQovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHBhcmFtIF9ibG9ja051bWJlciBUaGUgYmxvY2sgbnVtYmVyIHdoZW4gdGhlIGJhbGFuY2UgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3MgX293bmVyLCB1aW50IF9ibG9ja051bWJlcikgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50KSB7CgogICAgICAgIC8vIFRoZXNlIG5leHQgZmV3IGxpbmVzIGFyZSB1c2VkIHdoZW4gdGhlIGJhbGFuY2Ugb2YgdGhlIHRva2VuIGlzCiAgICAgICAgLy8gIHJlcXVlc3RlZCBiZWZvcmUgYSBjaGVjayBwb2ludCB3YXMgZXZlciBjcmVhdGVkIGZvciB0aGlzIHRva2VuLCBpdAogICAgICAgIC8vICByZXF1aXJlcyB0aGF0IHRoZSBgcGFyZW50VG9rZW4uYmFsYW5jZU9mQXRgIGJlIHF1ZXJpZWQgYXQgdGhlCiAgICAgICAgLy8gIGdlbmVzaXMgYmxvY2sgZm9yIHRoYXQgdG9rZW4gYXMgdGhpcyBjb250YWlucyBpbml0aWFsIGJhbGFuY2Ugb2YKICAgICAgICAvLyAgdGhpcyB0b2tlbgogICAgICAgIGlmICgoYmFsYW5jZXNbX293bmVyXS5sZW5ndGggPT0gMCkKICAgICAgICAgICAgfHwgKGJhbGFuY2VzW19vd25lcl1bMF0uZnJvbUJsb2NrID4gX2Jsb2NrTnVtYmVyKSkgewogICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFRva2VuLmJhbGFuY2VPZkF0KF9vd25lciwgbWluKF9ibG9ja051bWJlciwgcGFyZW50U25hcFNob3RCbG9jaykpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gSGFzIG5vIHBhcmVudAogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgYmFsYW5jZSBkdXJpbmcgbm9ybWFsIHNpdHVhdGlvbnMKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWVBdChiYWxhbmNlc1tfb3duZXJdLCBfYmxvY2tOdW1iZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBUb3RhbCBhbW91bnQgb2YgdG9rZW5zIGF0IGEgc3BlY2lmaWMgYF9ibG9ja051bWJlcmAuCiAgICAvLy8gQHBhcmFtIF9ibG9ja051bWJlciBUaGUgYmxvY2sgbnVtYmVyIHdoZW4gdGhlIHRvdGFsU3VwcGx5IGlzIHF1ZXJpZWQKICAgIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCBhbW91bnQgb2YgdG9rZW5zIGF0IGBfYmxvY2tOdW1iZXJgCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseUF0KHVpbnQgX2Jsb2NrTnVtYmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKCiAgICAgICAgLy8gVGhlc2UgbmV4dCBmZXcgbGluZXMgYXJlIHVzZWQgd2hlbiB0aGUgdG90YWxTdXBwbHkgb2YgdGhlIHRva2VuIGlzCiAgICAgICAgLy8gIHJlcXVlc3RlZCBiZWZvcmUgYSBjaGVjayBwb2ludCB3YXMgZXZlciBjcmVhdGVkIGZvciB0aGlzIHRva2VuLCBpdAogICAgICAgIC8vICByZXF1aXJlcyB0aGF0IHRoZSBgcGFyZW50VG9rZW4udG90YWxTdXBwbHlBdGAgYmUgcXVlcmllZCBhdCB0aGUKICAgICAgICAvLyAgZ2VuZXNpcyBibG9jayBmb3IgdGhpcyB0b2tlbiBhcyB0aGF0IGNvbnRhaW5zIHRvdGFsU3VwcGx5IG9mIHRoaXMKICAgICAgICAvLyAgdG9rZW4gYXQgdGhpcyBibG9jayBudW1iZXIuCiAgICAgICAgaWYgKCh0b3RhbFN1cHBseUhpc3RvcnkubGVuZ3RoID09IDApCiAgICAgICAgICAgIHx8ICh0b3RhbFN1cHBseUhpc3RvcnlbMF0uZnJvbUJsb2NrID4gX2Jsb2NrTnVtYmVyKSkgewogICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFRva2VuLnRvdGFsU3VwcGx5QXQobWluKF9ibG9ja051bWJlciwgcGFyZW50U25hcFNob3RCbG9jaykpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgdG90YWxTdXBwbHkgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQodG90YWxTdXBwbHlIaXN0b3J5LCBfYmxvY2tOdW1iZXIpOwogICAgICAgIH0KICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gQ2xvbmUgVG9rZW4gTWV0aG9kCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBDcmVhdGVzIGEgbmV3IGNsb25lIHRva2VuIHdpdGggdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIGJlaW5nCiAgICAvLy8gIHRoaXMgdG9rZW4gYXQgYF9zbmFwc2hvdEJsb2NrYAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlbk5hbWUgTmFtZSBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2Nsb25lRGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlblN5bWJvbCBTeW1ib2wgb2YgdGhlIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9zbmFwc2hvdEJsb2NrIEJsb2NrIHdoZW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcGFyZW50IHRva2VuIGlzCiAgICAvLy8gIGNvcGllZCB0byBzZXQgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBuZXcgY2xvbmUgdG9rZW47CiAgICAvLy8gIGlmIHRoZSBibG9jayBpcyB6ZXJvIHRoYW4gdGhlIGFjdHVhbCBibG9jaywgdGhlIGN1cnJlbnQgYmxvY2sgaXMgdXNlZAogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUKICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgTWluaU1lVG9rZW4gQ29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwKICAgICAgICB1aW50OCBfY2xvbmVEZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuU3ltYm9sLAogICAgICAgIHVpbnQgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgICAgICkgcmV0dXJucyhhZGRyZXNzKSB7CiAgICAgICAgaWYgKF9zbmFwc2hvdEJsb2NrID09IDApIF9zbmFwc2hvdEJsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgIE1pbmlNZVRva2VuIGNsb25lVG9rZW4gPSB0b2tlbkZhY3RvcnkuY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgICAgIF9jbG9uZVRva2VuTmFtZSwKICAgICAgICAgICAgX2Nsb25lRGVjaW1hbFVuaXRzLAogICAgICAgICAgICBfY2xvbmVUb2tlblN5bWJvbCwKICAgICAgICAgICAgX3RyYW5zZmVyc0VuYWJsZWQKICAgICAgICAgICAgKTsKCiAgICAgICAgY2xvbmVUb2tlbi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOwoKICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0b2tlbiBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICBOZXdDbG9uZVRva2VuKGFkZHJlc3MoY2xvbmVUb2tlbiksIF9zbmFwc2hvdEJsb2NrKTsKICAgICAgICByZXR1cm4gYWRkcmVzcyhjbG9uZVRva2VuKTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gR2VuZXJhdGUgYW5kIGRlc3Ryb3kgdG9rZW5zCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBHZW5lcmF0ZXMgYF9hbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgX293bmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRoZSBuZXcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyBnZW5lcmF0ZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgZ2VuZXJhdGVkIGNvcnJlY3RseQogICAgZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbnMoYWRkcmVzcyBfb3duZXIsIHVpbnQgX2Ftb3VudAogICAgKSBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgcmVxdWlyZShjdXJUb3RhbFN1cHBseSArIF9hbW91bnQgPj0gY3VyVG90YWxTdXBwbHkpOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mKF9vd25lcik7CiAgICAgICAgcmVxdWlyZShwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQgPj0gcHJldmlvdXNCYWxhbmNlVG8pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KHRvdGFsU3VwcGx5SGlzdG9yeSwgY3VyVG90YWxTdXBwbHkgKyBfYW1vdW50KTsKICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19vd25lcl0sIHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoMCwgX293bmVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgQnVybnMgYF9hbW91bnRgIHRva2VucyBmcm9tIGBfb3duZXJgCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgbG9zZSB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIHF1YW50aXR5IG9mIHRva2VucyB0byBidXJuCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0b2tlbnMgYXJlIGJ1cm5lZCBjb3JyZWN0bHkKICAgIGZ1bmN0aW9uIGRlc3Ryb3lUb2tlbnMoYWRkcmVzcyBfb3duZXIsIHVpbnQgX2Ftb3VudAogICAgKSBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgcmVxdWlyZShjdXJUb3RhbFN1cHBseSA+PSBfYW1vdW50KTsKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZUZyb20gPj0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5IC0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VGcm9tIC0gX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX293bmVyLCAwLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gRW5hYmxlIHRva2VucyB0cmFuc2ZlcnMKLy8vLy8vLy8vLy8vLy8vLwoKCiAgICAvLy8gQG5vdGljZSBFbmFibGVzIHRva2VuIGhvbGRlcnMgdG8gdHJhbnNmZXIgdGhlaXIgdG9rZW5zIGZyZWVseSBpZiB0cnVlCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIFRydWUgaWYgdHJhbnNmZXJzIGFyZSBhbGxvd2VkIGluIHRoZSBjbG9uZQogICAgZnVuY3Rpb24gZW5hYmxlVHJhbnNmZXJzKGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQpIG9ubHlDb250cm9sbGVyIHsKICAgICAgICB0cmFuc2ZlcnNFbmFibGVkID0gX3RyYW5zZmVyc0VuYWJsZWQ7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEludGVybmFsIGhlbHBlciBmdW5jdGlvbnMgdG8gcXVlcnkgYW5kIHNldCBhIHZhbHVlIGluIGEgc25hcHNob3QgYXJyYXkKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IGBnZXRWYWx1ZUF0YCByZXRyaWV2ZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgYXQgYSBnaXZlbiBibG9jayBudW1iZXIKICAgIC8vLyBAcGFyYW0gY2hlY2twb2ludHMgVGhlIGhpc3Rvcnkgb2YgdmFsdWVzIGJlaW5nIHF1ZXJpZWQKICAgIC8vLyBAcGFyYW0gX2Jsb2NrIFRoZSBibG9jayBudW1iZXIgdG8gcmV0cmlldmUgdGhlIHZhbHVlIGF0CiAgICAvLy8gQHJldHVybiBUaGUgbnVtYmVyIG9mIHRva2VucyBiZWluZyBxdWVyaWVkCiAgICBmdW5jdGlvbiBnZXRWYWx1ZUF0KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF9ibG9jawogICAgKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDsKCiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIHRoZSBhY3R1YWwgdmFsdWUKICAgICAgICBpZiAoX2Jsb2NrID49IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aC0xXS5mcm9tQmxvY2spCiAgICAgICAgICAgIHJldHVybiBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV0udmFsdWU7CiAgICAgICAgaWYgKF9ibG9jayA8IGNoZWNrcG9pbnRzWzBdLmZyb21CbG9jaykgcmV0dXJuIDA7CgogICAgICAgIC8vIEJpbmFyeSBzZWFyY2ggb2YgdGhlIHZhbHVlIGluIHRoZSBhcnJheQogICAgICAgIHVpbnQgbWluID0gMDsKICAgICAgICB1aW50IG1heCA9IGNoZWNrcG9pbnRzLmxlbmd0aC0xOwogICAgICAgIHdoaWxlIChtYXggPiBtaW4pIHsKICAgICAgICAgICAgdWludCBtaWQgPSAobWF4ICsgbWluICsgMSkvIDI7CiAgICAgICAgICAgIGlmIChjaGVja3BvaW50c1ttaWRdLmZyb21CbG9jazw9X2Jsb2NrKSB7CiAgICAgICAgICAgICAgICBtaW4gPSBtaWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtYXggPSBtaWQtMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbbWluXS52YWx1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBgdXBkYXRlVmFsdWVBdE5vd2AgdXNlZCB0byB1cGRhdGUgdGhlIGBiYWxhbmNlc2AgbWFwIGFuZCB0aGUKICAgIC8vLyAgYHRvdGFsU3VwcGx5SGlzdG9yeWAKICAgIC8vLyBAcGFyYW0gY2hlY2twb2ludHMgVGhlIGhpc3Rvcnkgb2YgZGF0YSBiZWluZyB1cGRhdGVkCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgbmV3IG51bWJlciBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlQXROb3coQ2hlY2twb2ludFtdIHN0b3JhZ2UgY2hlY2twb2ludHMsIHVpbnQgX3ZhbHVlCiAgICApIGludGVybmFsICB7CiAgICAgICAgaWYgKChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkKICAgICAgICB8fCAoY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoIC0xXS5mcm9tQmxvY2sgPCBibG9jay5udW1iZXIpKSB7CiAgICAgICAgICAgICAgIENoZWNrcG9pbnQgc3RvcmFnZSBuZXdDaGVja1BvaW50ID0gY2hlY2twb2ludHNbIGNoZWNrcG9pbnRzLmxlbmd0aCsrIF07CiAgICAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQuZnJvbUJsb2NrID0gIHVpbnQxMjgoYmxvY2subnVtYmVyKTsKICAgICAgICAgICAgICAgbmV3Q2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsKICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2Ugb2xkQ2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aC0xXTsKICAgICAgICAgICAgICAgb2xkQ2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsKICAgICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGFkZHJlc3MgaXMgYSBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfYWRkciBUaGUgYWRkcmVzcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIGBfYWRkcmAgaXMgYSBjb250cmFjdAogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKICAgICAgICB1aW50IHNpemU7CiAgICAgICAgaWYgKF9hZGRyID09IDApIHJldHVybiBmYWxzZTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHNpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpCiAgICAgICAgfQogICAgICAgIHJldHVybiBzaXplPjA7CiAgICB9CgogICAgLy8vIEBkZXYgSGVscGVyIGZ1bmN0aW9uIHRvIHJldHVybiBhIG1pbiBiZXR3ZW4gdGhlIHR3byB1aW50cwogICAgZnVuY3Rpb24gbWluKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgVGhlIGZhbGxiYWNrIGZ1bmN0aW9uOiBJZiB0aGUgY29udHJhY3QncyBjb250cm9sbGVyIGhhcyBub3QgYmVlbgogICAgLy8vICBzZXQgdG8gMCwgdGhlbiB0aGUgYHByb3h5UGF5bWVudGAgbWV0aG9kIGlzIGNhbGxlZCB3aGljaCByZWxheXMgdGhlCiAgICAvLy8gIGV0aGVyIGFuZCBjcmVhdGVzIHRva2VucyBhcyBkZXNjcmliZWQgaW4gdGhlIHRva2VuIGNvbnRyb2xsZXIgY29udHJhY3QKICAgIGZ1bmN0aW9uICgpICBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGlzQ29udHJhY3QoY29udHJvbGxlcikpOwogICAgICAgIHJlcXVpcmUoVG9rZW5Db250cm9sbGVyKGNvbnRyb2xsZXIpLnByb3h5UGF5bWVudC52YWx1ZShtc2cudmFsdWUpKG1zZy5zZW5kZXIpKTsKICAgIH0KCi8vLy8vLy8vLy8KLy8gU2FmZXR5IE1ldGhvZHMKLy8vLy8vLy8vLwoKICAgIC8vLyBAbm90aWNlIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIGJ5IHRoZSBjb250cm9sbGVyIHRvIGV4dHJhY3QgbWlzdGFrZW5seQogICAgLy8vICBzZW50IHRva2VucyB0byB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW4gVGhlIGFkZHJlc3Mgb2YgdGhlIHRva2VuIGNvbnRyYWN0IHRoYXQgeW91IHdhbnQgdG8gcmVjb3ZlcgogICAgLy8vICBzZXQgdG8gMCBpbiBjYXNlIHlvdSB3YW50IHRvIGV4dHJhY3QgZXRoZXIuCiAgICBmdW5jdGlvbiBjbGFpbVRva2VucyhhZGRyZXNzIF90b2tlbikgb25seUNvbnRyb2xsZXIgewogICAgICAgIGlmIChfdG9rZW4gPT0gMHgwKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgTWluaU1lVG9rZW4gdG9rZW4gPSBNaW5pTWVUb2tlbihfdG9rZW4pOwogICAgICAgIHVpbnQgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICB0b2tlbi50cmFuc2Zlcihjb250cm9sbGVyLCBiYWxhbmNlKTsKICAgICAgICBDbGFpbWVkVG9rZW5zKF90b2tlbiwgY29udHJvbGxlciwgYmFsYW5jZSk7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEV2ZW50cwovLy8vLy8vLy8vLy8vLy8vCiAgICBldmVudCBDbGFpbWVkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfY29udHJvbGxlciwgdWludCBfYW1vdW50KTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsKICAgIGV2ZW50IE5ld0Nsb25lVG9rZW4oYWRkcmVzcyBpbmRleGVkIF9jbG9uZVRva2VuLCB1aW50IF9zbmFwc2hvdEJsb2NrKTsKICAgIGV2ZW50IEFwcHJvdmFsKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLAogICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICAgICk7Cgp9CgoKLy8vLy8vLy8vLy8vLy8vLwovLyBNaW5pTWVUb2tlbkZhY3RvcnkKLy8vLy8vLy8vLy8vLy8vLwoKLy8vIEBkZXYgVGhpcyBjb250cmFjdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGNsb25lIGNvbnRyYWN0cyBmcm9tIGEgY29udHJhY3QuCi8vLyAgSW4gc29saWRpdHkgdGhpcyBpcyB0aGUgd2F5IHRvIGNyZWF0ZSBhIGNvbnRyYWN0IGZyb20gYSBjb250cmFjdCBvZiB0aGUKLy8vICBzYW1lIGNsYXNzCmNvbnRyYWN0IE1pbmlNZVRva2VuRmFjdG9yeSB7CgogICAgLy8vIEBub3RpY2UgVXBkYXRlIHRoZSBEQXBwIGJ5IGNyZWF0aW5nIGEgbmV3IHRva2VuIHdpdGggbmV3IGZ1bmN0aW9uYWxpdGllcwogICAgLy8vICB0aGUgbXNnLnNlbmRlciBiZWNvbWVzIHRoZSBjb250cm9sbGVyIG9mIHRoaXMgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGJlaW5nIGNsb25lZAogICAgLy8vIEBwYXJhbSBfc25hcHNob3RCbG9jayBCbG9jayBvZiB0aGUgcGFyZW50IHRva2VuIHRoYXQgd2lsbAogICAgLy8vICBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5OYW1lIE5hbWUgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblN5bWJvbCBUb2tlbiBTeW1ib2wgZm9yIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgSWYgdHJ1ZSwgdG9rZW5zIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyB0b2tlbiBjb250cmFjdAogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwKICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICApIHJldHVybnMgKE1pbmlNZVRva2VuKSB7CiAgICAgICAgTWluaU1lVG9rZW4gbmV3VG9rZW4gPSBuZXcgTWluaU1lVG9rZW4oCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9wYXJlbnRUb2tlbiwKICAgICAgICAgICAgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgICAgIF90b2tlbk5hbWUsCiAgICAgICAgICAgIF9kZWNpbWFsVW5pdHMsCiAgICAgICAgICAgIF90b2tlblN5bWJvbCwKICAgICAgICAgICAgX3RyYW5zZmVyc0VuYWJsZWQKICAgICAgICAgICAgKTsKCiAgICAgICAgbmV3VG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsKICAgICAgICByZXR1cm4gbmV3VG9rZW47CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy9JbnZlc3RvcldhbGxldEZhY3Rvcnkuc29sCgpjb250cmFjdCBJbnZlc3RvcldhbGxldEZhY3RvcnkgaXMgSW52ZXN0b3JXYWxsZXRGYWN0b3J5SSwgT3duYWJsZSB7CiAgTWluaU1lVG9rZW4gcHVibGljIHdjdDI7CgogIGZ1bmN0aW9uIEludmVzdG9yV2FsbGV0RmFjdG9yeShhZGRyZXNzIF93Y3QyKSBwdWJsaWMgewogICAgd2N0MiA9IE1pbmlNZVRva2VuKF93Y3QyKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUludmVzdG9yV2FsbGV0KAogICAgICB1aW50MjU2IF9tb250aHNUb1JlbGVhc2UsCiAgICAgIGFkZHJlc3MgX2ludmVzdG9yLAogICAgICB1aW50MjU2IF9hbW91bnQKICApIG9ubHlPd25lciByZXR1cm5zIChJbnZlc3RvcldhbGxldCkgewogICAgSW52ZXN0b3JXYWxsZXQgbmV3V2FsbGV0ID0gbmV3IEludmVzdG9yV2FsbGV0KAogICAgICBhZGRyZXNzKHdjdDIpLAogICAgICBhZGRyZXNzKHRoaXMpLAogICAgICBfbW9udGhzVG9SZWxlYXNlCiAgICApOwoKICAgIG5ld1dhbGxldC50cmFuc2Zlck93bmVyc2hpcChfaW52ZXN0b3IpOwogICAgd2N0Mi5nZW5lcmF0ZVRva2VucyhuZXdXYWxsZXQsIF9hbW91bnQpOwogICAgcmV0dXJuIG5ld1dhbGxldDsKICB9CgogIGZ1bmN0aW9uIHNldEV4Y2hhbmdlcihhZGRyZXNzIF9leGNoYW5nZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgZXhjaGFuZ2VyID0gX2V4Y2hhbmdlcjsKICB9CgogIGZ1bmN0aW9uIHJldHJpZXZlV0NUMigpIHB1YmxpYyBvbmx5T3duZXIgewogICAgd2N0Mi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOwogIH0KfQ=='.
	

]
