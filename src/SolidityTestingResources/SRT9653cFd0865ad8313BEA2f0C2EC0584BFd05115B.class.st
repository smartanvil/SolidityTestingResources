Class {
	#name : #SRT9653cFd0865ad8313BEA2f0C2EC0584BFd05115B,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9653cFd0865ad8313BEA2f0C2EC0584BFd05115B >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCmNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvLyBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cgp9Cgpjb250cmFjdCBPd25lciB7CiAgICAvL0ZvciBzdG9yaW5nIHRoZSBvd25lciBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICAvL0NvbnN0cnVjdG9yIGZvciBhc3NpZ24gYSBhZGRyZXNzIGZvciBvd25lciBwcm9wZXJ0eShJdCB3aWxsIGJlIGFkZHJlc3Mgd2hvIGRlcGxveSB0aGUgY29udHJhY3QpIAogICAgZnVuY3Rpb24gT3duZXIoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vVGhpcyBpcyBtb2RpZmllciAoYSBzcGVjaWFsIGZ1bmN0aW9uKSB3aGljaCB3aWxsIGV4ZWN1dGUgYmVmb3JlIHRoZSBmdW5jdGlvbiBleGVjdXRpb24gb24gd2hpY2ggaXQgYXBwbGllZCAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZihtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsKICAgICAgICAvL1RoaXMgc3RhdGVtZW50IHJlcGxhY2Ugd2l0aCB0aGUgY29kZSBvZiBmdWNudGlvbiBvbiB3aGljaCBtb2RpZmllciBpcyBhcHBsaWVkCiAgICAgICAgXzsKICAgIH0KICAgIC8vSGVyZSBpcyB0aGUgZXhhbXBsZSBvZiBtb2RpZmllciB0aGlzIGZ1bmN0aW9uIGNvZGUgcmVwbGFjZSBfOyBzdGF0ZW1lbnQgb2YgbW9kaWZpZXIgCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld19vd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld19vd25lcjsKICAgIH0KfQoKY29udHJhY3QgRnV0dXJYZSBpcyBFUkMyMEludGVyZmFjZSxPd25lciB7CgogICAgLy9Db21tb24gaW5mb3JtYXRpb24gYWJvdXQgY29pbgogICAgc3RyaW5nICBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyAgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICAKICAgIC8vQmFsYW5jZSBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgYWx3YXlzIGFzc29jaWF0ZSB3aXRoIGFuIGFkZHJlc3MKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIC8vZnJvemVuQWNjb3VudCBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgYXNzb2NpYXRlIHdpdGggYW4gYWRkcmVzcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsKICAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgCiAgICAvL1RoZXNlIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMKICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7CiAgICAKICAgIC8vQ29uc3RydXRvciBmb3IgaW5pdGlhbCBzdXBwbHkgKFRoZSBhZGRyZXNzIHdobyBkZXBsb3llZCB0aGUgY29udHJhY3Qgd2lsbCBnZXQgaXQpIGFuZCBpbXBvcnRhbnQgaW5mb3JtYXRpb24KICAgIGZ1bmN0aW9uIEZ1dHVyWGUodWludDI1NiBpbml0aWFsX3N1cHBseSwgc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWwpIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAgPSBpbml0aWFsX3N1cHBseTsKICAgICAgICBuYW1lICAgICAgICAgICAgICAgICAgPSBfbmFtZTsKICAgICAgICBzeW1ib2wgICAgICAgICAgICAgICAgPSBfc3ltYm9sOwogICAgICAgIGRlY2ltYWxzICAgICAgICAgICAgICA9IF9kZWNpbWFsOwogICAgICAgIHRvdGFsU3VwcGx5ICAgICAgICAgICA9IGluaXRpYWxfc3VwcGx5OwogICAgfQoKICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8vRnVuY3Rpb24gZm9yIHRyYW5zZXIgdGhlIGNvaW4gZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgLy9jaGVja2luZyBhY2NvdW50IGlzIGZyZWV6ZSBvciBub3QKICAgICAgICBpZiAoZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAvL2NoZWNraW5nIHRoZSBzZW5kZXIgc2hvdWxkIGhhdmUgZW5vdWdoIGNvaW5zCiAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCB2YWx1ZSkgcmV0dXJuIGZhbHNlOwogICAgICAgIC8vY2hlY2tpbmcgZm9yIG92ZXJmbG93cwogICAgICAgIGlmKGJhbGFuY2VzW3RvXSArIHZhbHVlIDwgYmFsYW5jZXNbdG9dKSByZXR1cm4gZmFsc2U7CiAgICAgICAgCiAgICAgICAgLy9zdWJzdHJhY3RpbmcgdGhlIHNlbmRlciBiYWxhbmNlCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICAgICAgLy9hZGRpbmcgdGhlIHJlY2lldmVyIGJhbGFuY2UKICAgICAgICBiYWxhbmNlc1t0b10gKz0gdmFsdWU7CiAgICAgICAgCiAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCgogICAgLy9GdW5jdGlvbiBmb3IgdHJhbnNlciB0aGUgY29pbiBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICAvL2NoZWNraW5nIGFjY291bnQgaXMgZnJlZXplIG9yIG5vdAogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSByZXR1cm4gZmFsc2U7CgogICAgICAgIC8vY2hlY2tpbmcgdGhlIGZyb20gc2hvdWxkIGhhdmUgZW5vdWdoIGNvaW5zCiAgICAgICAgaWYoYmFsYW5jZXNbZnJvbV0gPCB2YWx1ZSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAvL2NoZWNraW5nIGZvciBhbGxvd2FuY2UKICAgICAgICBpZiggYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA+PSB2YWx1ZSApIHJldHVybiBmYWxzZTsKCiAgICAgICAgLy9jaGVja2luZyBmb3Igb3ZlcmZsb3dzCiAgICAgICAgaWYoYmFsYW5jZXNbdG9dICsgdmFsdWUgPCBiYWxhbmNlc1t0b10pIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1tmcm9tXSAtPSB2YWx1ZTsKICAgICAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgICAgIGJhbGFuY2VzW3RvXSArPSB2YWx1ZTsKICAgICAgICAKICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICAvLwogICAgZnVuY3Rpb24gbWludFRva2VuKGFkZHJlc3MgdGFyZ2V0LCB1aW50MjU2IG1pbnRlZEFtb3VudCkgb25seU93bmVyewogICAgICAgIGJhbGFuY2VzW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsKICAgICAgICAKICAgICAgICBUcmFuc2ZlcigwLG93bmVyLG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIob3duZXIsdGFyZ2V0LG1pbnRlZEFtb3VudCk7CiAgICB9CgogICAgLy8KICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBvbmx5T3duZXIgewogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsKICAgICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7CiAgICB9CgogICAgLy8KICAgIGZ1bmN0aW9uIGNoYW5nZU5hbWUoc3RyaW5nIF9uYW1lKSBvbmx5T3duZXIgewogICAgICAgIG5hbWUgPSBfbmFtZTsKICAgIH0KCiAgICAvLwogICAgZnVuY3Rpb24gY2hhbmdlU3ltYm9sKHN0cmluZyBfc3ltYm9sKSBvbmx5T3duZXIgewogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICB9CgogICAgLy8KICAgIGZ1bmN0aW9uIGNoYW5nZURlY2ltYWxzKHVpbnQ4IF9kZWNpbWFscykgb25seU93bmVyIHsKICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsKICAgIH0KfQ=='.
	

]
