Class {
	#name : #SRT7facf5286883d4068b5adb4c7c4d3ef714fad5a9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7facf5286883d4068b5adb4c7c4d3ef714fad5a9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovLwovLyA9PT09IERJU0NMQUlNRVIgPT09PQovLwovLyBFVEhFUkVVTSBJUyBTVElMTCBBTiBFWFBFUkVNRU5UQUwgVEVDSE5PTE9HWS4KLy8gQUxUSE9VR0ggVEhJUyBTTUFSVCBDT05UUkFDVCBXQVMgQ1JFQVRFRCBXSVRIIEdSRUFUIENBUkUgQU5EIElOIFRIRSBIT1BFIE9GIEJFSU5HIFVTRUZVTCwgTk8gR1VBUkFOVEVFUyBPRiBGTEFXTEVTUyBPUEVSQVRJT04gQ0FOIEJFIEdJVkVOLgovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLgovLyBZT1UgQVJFIFNUUk9OR0xZIEVOQ09VUkFHRUQgVE8gU1RVRFkgVEhJUyBTTUFSVCBDT05UUkFDVCBDQVJFRlVMTFkgSU4gT1JERVIgVE8gVU5ERVJTVEFORCBQT1NTSUJMRSBFREdFIENBU0VTIEFORCBSSVNLUy4KLy8gRE9OJ1QgVVNFIFRISVMgU01BUlQgQ09OVFJBQ1QgSUYgWU9VIEhBVkUgU1VCU1RBTlRJQUwgRE9VQlRTIE9SIElGIFlPVSBET04nVCBLTk9XIFdIQVQgWU9VIEFSRSBET0lORy4KLy8KLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQovLyBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsCi8vIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLAovLyBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgovLyA9PT09Ci8vCi8vCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0KLy8gQSBjYXJlZnVsIHJlYWRlciB3aWxsIGZpbmQgc29tZSBhZGRpdGlvbmFsIGNoZWNrcyBhbmQgZXhjZXNzaXZlIGNvZGUsIGNvbnN1bWluZyBzb21lIGV4dHJhIGdhcy4gVGhpcyBpcyBpbnRlbnRpb25hbC4KLy8gRXZlbiB0aG91Z2ggdGhlIGNvbnRyYWN0IHNob3VsZCB3b3JrIHdpdGhvdXQgdGhlc2UgcGFydHMsIHRoZXkgbWFrZSB0aGUgY29kZSBtb3JlIHNlY3VyZSBpbiBwcm9kdWN0aW9uIGFuZCBmb3IgZnV0dXJlIHJlZmFjdG9yaW5nLgovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50LgovLyBEaXNjdXNzaW9uIGlzIHdlbGNvbWUhCi8vID09PT0KLy8KCi8vLyBAYXV0aG9yIGV0aGVybmlhbgovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogPGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImM2YTRiM2ExYjU4NmEzYjJhZWEzYjRhOGFmYTdhOGU4YTVhOWFiIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPgovLy8gQHRpdGxlIEJuc1ByZXNhbGUgQ29udHJhY3QKCmNvbnRyYWN0IEJuc1ByZXNhbGUgewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgVkVSU0lPTiA9ICIwLjIuMC1kZW1vLXRlc3QtMDItbWF4XzFfZXRoIjsKCiAgICAvKiA9PT09PT0gY29uZmlndXJhdGlvbiBTVEFSVCA9PT09PT0gKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSRVNBTEVfU1RBUlQgID0gNDQ3MDY4MDsgLyogYXBwcm94LiBXRUQgTk9WIDAxIDIwMTcgMTY6NDU6MDAgR01UKzAzMDAgKENFVCkgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSRVNBTEVfRU5EICAgID0gNDQ3MDc0MDsgLyogYXBwcm94LiBXRUQgTk9WIDAxIDIwMTcgMTc6MDA6MDAgR01UKzAzMDAgKENFVCkgKi8KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFdJVEhEUkFXQUxfRU5EID0gNDQ3MDgwMDsgLyogYXBwcm94LiBXRUQgTk9WIDAxIDIwMTcgMTc6MTU6MDAgR01UKzAxMDAgKENFVCkgKi8KCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBPV05FUiA9IDB4Y0VBZmUzOGI4ZDM4MDI3ODlBMkEyY2M0NUVBNWQwOGJFOEVBM2I0OTsKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIID0gMDsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IE1BWF9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRV9FVEggPSAxOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgTUlOX0FDQ0VQVEVEX0FNT1VOVF9GSU5ORVkgPSAxOwoKICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8KCiAgICBzdHJpbmdbNV0gcHJpdmF0ZSBzdGF0ZU5hbWVzID0gWyJCRUZPUkVfU1RBUlQiLCAgIlBSRVNBTEVfUlVOTklORyIsICJXSVRIRFJBV0FMX1JVTk5JTkciLCAiUkVGVU5EX1JVTk5JTkciLCAiQ0xPU0VEIiBdOwogICAgZW51bSBTdGF0ZSB7IEJFRk9SRV9TVEFSVCwgIFBSRVNBTEVfUlVOTklORywgV0lUSERSQVdBTF9SVU5OSU5HLCBSRUZVTkRfUlVOTklORywgQ0xPU0VEIH0KCiAgICB1aW50IHB1YmxpYyB0b3RhbF9yZWNlaXZlZF9hbW91bnQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbF9yZWZ1bmRlZDsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwoKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUgPSBNSU5fVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIICogMSBldGhlcjsKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkUgPSBNQVhfVE9UQUxfQU1PVU5UX1RPX1JFQ0VJVkVfRVRIICogMSBldGhlcjsKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNSU5fQUNDRVBURURfQU1PVU5UID0gTUlOX0FDQ0VQVEVEX0FNT1VOVF9GSU5ORVkgKiAxIGZpbm5leTsKICAgIGJvb2wgcHVibGljIGlzQWJvcnRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgaXNTdG9wcGVkID0gZmFsc2U7CgoKICAgIC8vY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEJuc1ByZXNhbGUgKCkgcHVibGljIHZhbGlkU2V0dXBPbmx5KCkgeyB9CgogICAgLy8KICAgIC8vID09PT09PT0gaW50ZXJmYWNlIG1ldGhvZHMgPT09PT09PQogICAgLy8KCiAgICAvL2FjY2VwdCBwYXltZW50cyBoZXJlCiAgICBmdW5jdGlvbiAoKQogICAgcGF5YWJsZQogICAgbm9SZWVudHJhbmN5CiAgICBwdWJsaWMKICAgIHsKICAgICAgICBTdGF0ZSBzdGF0ZSA9IGN1cnJlbnRTdGF0ZSgpOwogICAgICAgIGlmIChzdGF0ZSA9PSBTdGF0ZS5QUkVTQUxFX1JVTk5JTkcpIHsKICAgICAgICAgICAgcmVjZWl2ZUZ1bmRzKCk7CiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS5SRUZVTkRfUlVOTklORykgewogICAgICAgICAgICAvLyBhbnkgZW50cmluZyBjYWxsIGluIFJlZnVuZCBQaGFzZSB3aWxsIGNhdXNlIGZ1bGwgcmVmdW5kCiAgICAgICAgICAgIHNlbmRSZWZ1bmQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVmdW5kKCkgZXh0ZXJuYWwKICAgIGluU3RhdGUoU3RhdGUuUkVGVU5EX1JVTk5JTkcpCiAgICBub1JlZW50cmFuY3kKICAgIHsKICAgICAgICBzZW5kUmVmdW5kKCk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RnVuZHMoKSBleHRlcm5hbAogICAgb25seU93bmVyCiAgICBub1JlZW50cmFuY3kKICAgIHsKICAgICAgICAvLyB0cmFuc2ZlciBmdW5kcyB0byBvd25lciBpZiBhbnkKICAgICAgICBPV05FUi50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKCiAgICBmdW5jdGlvbiBhYm9ydCgpIGV4dGVybmFsCiAgICBpblN0YXRlQmVmb3JlKFN0YXRlLlJFRlVORF9SVU5OSU5HKQogICAgb25seU93bmVyCiAgICB7CiAgICAgICAgaXNBYm9ydGVkID0gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24gc3RvcCgpIGV4dGVybmFsCiAgICBpblN0YXRlKFN0YXRlLlBSRVNBTEVfUlVOTklORykKICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGlzU3RvcHBlZCA9IHRydWU7CiAgICB9CgoKICAgIC8vZGlzcGxheXMgY3VycmVudCBjb250cmFjdCBzdGF0ZSBpbiBodW1hbiByZWFkYWJsZSBmb3JtCiAgICBmdW5jdGlvbiBzdGF0ZSgpIGV4dGVybmFsIGNvbnN0YW50CiAgICByZXR1cm5zIChzdHJpbmcpCiAgICB7CiAgICAgICAgcmV0dXJuIHN0YXRlTmFtZXNbIHVpbnQoY3VycmVudFN0YXRlKCkpIF07CiAgICB9CgoKICAgIC8vCiAgICAvLyA9PT09PT09IGltcGxlbWVudGF0aW9uIG1ldGhvZHMgPT09PT09PQogICAgLy8KCiAgICBmdW5jdGlvbiBzZW5kUmVmdW5kKCkgcHJpdmF0ZSB0b2tlbkhvbGRlcnNPbmx5IHsKICAgICAgICAvLyBsb2FkIGJhbGFuY2UgdG8gcmVmdW5kIHBsdXMgYW1vdW50IGN1cnJlbnRseSBzZW50CiAgICAgICAgdWludCBhbW91bnRfdG9fcmVmdW5kID0gbWluKGJhbGFuY2VzW21zZy5zZW5kZXJdLCB0aGlzLmJhbGFuY2UgLSBtc2cudmFsdWUpIDsKLy8KICAgICAgICAvLyBjaGFuZ2UgYmFsYW5jZQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IGFtb3VudF90b19yZWZ1bmQ7CiAgICAgICAgdG90YWxfcmVmdW5kZWQgKz0gYW1vdW50X3RvX3JlZnVuZDsKCiAgICAgICAgLy8gc2VuZCByZWZ1bmQgYmFjayB0byBzZW5kZXIKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudF90b19yZWZ1bmQgKyBtc2cudmFsdWUpOwogICAgfQoKCiAgICBmdW5jdGlvbiByZWNlaXZlRnVuZHMoKSBwcml2YXRlIG5vdFRvb1NtYWxsQW1vdW50T25seSB7CiAgICAgIC8vIG5vIG92ZXJmbG93IGlzIHBvc3NpYmxlIGhlcmU6IG5vYm9keSBoYXZlIHNvbyBtdWNoIG1vbmV5IHRvIHNwZW5kLgogICAgICBpZiAodG90YWxfcmVjZWl2ZWRfYW1vdW50ICsgbXNnLnZhbHVlID4gTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFKSB7CiAgICAgICAgICAvLyBhY2NlcHQgYW1vdW50IG9ubHkgYW5kIHJldHVybiBjaGFuZ2UKICAgICAgICAgIHZhciBjaGFuZ2VfdG9fcmV0dXJuID0gdG90YWxfcmVjZWl2ZWRfYW1vdW50ICsgbXNnLnZhbHVlIC0gTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFOwogICAgICAgICAgdmFyIGFjY2VwdGFibGVfcmVtYWluZGVyID0gTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFIC0gdG90YWxfcmVjZWl2ZWRfYW1vdW50OwogICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gYWNjZXB0YWJsZV9yZW1haW5kZXI7CiAgICAgICAgICB0b3RhbF9yZWNlaXZlZF9hbW91bnQgKz0gYWNjZXB0YWJsZV9yZW1haW5kZXI7CgogICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihjaGFuZ2VfdG9fcmV0dXJuKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGFjY2VwdCBmdWxsIGFtb3VudAogICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogICAgICAgICAgdG90YWxfcmVjZWl2ZWRfYW1vdW50ICs9IG1zZy52YWx1ZTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBjdXJyZW50U3RhdGUoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKFN0YXRlKSB7CiAgICAgICAgaWYgKGlzQWJvcnRlZCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlID4gMAogICAgICAgICAgICAgICAgICAgPyBTdGF0ZS5SRUZVTkRfUlVOTklORwogICAgICAgICAgICAgICAgICAgOiBTdGF0ZS5DTE9TRUQ7CiAgICAgICAgfSBlbHNlIGlmIChibG9jay5udW1iZXIgPCBQUkVTQUxFX1NUQVJUKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5CRUZPUkVfU1RBUlQ7CiAgICAgICAgfSBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gUFJFU0FMRV9FTkQgJiYgdG90YWxfcmVjZWl2ZWRfYW1vdW50IDwgTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFICYmICFpc1N0b3BwZWQpIHsKICAgICAgICAgICAgcmV0dXJuIFN0YXRlLlBSRVNBTEVfUlVOTklORzsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmFsYW5jZSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5DTE9TRUQ7CiAgICAgICAgfSBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gV0lUSERSQVdBTF9FTkQgJiYgdG90YWxfcmVjZWl2ZWRfYW1vdW50ID49IE1JTl9UT1RBTF9BTU9VTlRfVE9fUkVDRUlWRSkgewogICAgICAgICAgICByZXR1cm4gU3RhdGUuV0lUSERSQVdBTF9SVU5OSU5HOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5SRUZVTkRfUlVOTklORzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbWluKHVpbnQgYSwgdWludCBiKSBwdXJlIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQoKCiAgICAvLwogICAgLy8gPT09PT09PT09PT09IG1vZGlmaWVycyA9PT09PT09PT09PT0KICAgIC8vCgogICAgLy9mYWlscyBpZiBzdGF0ZSBkb2Vzbid0IG1hdGNoCiAgICBtb2RpZmllciBpblN0YXRlKFN0YXRlIHN0YXRlKSB7CiAgICAgICAgYXNzZXJ0KHN0YXRlID09IGN1cnJlbnRTdGF0ZSgpKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vZmFpbHMgaWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgbm90IGJlZm9yZSB0aGFuIHRoZSBnaXZlbiBvbmUuCiAgICBtb2RpZmllciBpblN0YXRlQmVmb3JlKFN0YXRlIHN0YXRlKSB7CiAgICAgICAgYXNzZXJ0KGN1cnJlbnRTdGF0ZSgpIDwgc3RhdGUpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vZmFpbHMgaWYgc29tZXRoaW5nIGluIHNldHVwIGlzIGxvb2tpbmcgd2VpcmQKICAgIG1vZGlmaWVyIHZhbGlkU2V0dXBPbmx5KCkgewogICAgICAgIGlmICggT1dORVIgPT0gMHgwCiAgICAgICAgICAgIHx8IFBSRVNBTEVfU1RBUlQgPT0gMAogICAgICAgICAgICB8fCBQUkVTQUxFX0VORCA9PSAwCiAgICAgICAgICAgIHx8IFdJVEhEUkFXQUxfRU5EID09MAogICAgICAgICAgICB8fCBQUkVTQUxFX1NUQVJUIDw9IGJsb2NrLm51bWJlcgogICAgICAgICAgICB8fCBQUkVTQUxFX1NUQVJUID49IFBSRVNBTEVfRU5ECiAgICAgICAgICAgIHx8IFBSRVNBTEVfRU5EICAgPj0gV0lUSERSQVdBTF9FTkQKICAgICAgICAgICAgfHwgTUlOX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFID4gTUFYX1RPVEFMX0FNT1VOVF9UT19SRUNFSVZFICkKICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIF87CiAgICB9CgoKICAgIC8vYWNjZXB0cyBjYWxscyBmcm9tIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpewogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IE9XTkVSKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvL2FjY2VwdHMgY2FsbHMgZnJvbSB0b2tlbiBob2xkZXJzIG9ubHkKICAgIG1vZGlmaWVyIHRva2VuSG9sZGVyc09ubHkoKXsKICAgICAgICBhc3NlcnQoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiAwKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBkb25gdCBhY2NlcHQgdHJhbnNhY3Rpb25zIHdpdGggdmFsdWUgbGVzcyB0aGFuIGFsbG93ZWQgbWluaW11bQogICAgbW9kaWZpZXIgbm90VG9vU21hbGxBbW91bnRPbmx5KCl7CiAgICAgICAgYXNzZXJ0KG1zZy52YWx1ZSA+PSBNSU5fQUNDRVBURURfQU1PVU5UKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvL3ByZXZlbnRzIHJlZW50cmFuY3kgYXR0YWNzCiAgICBib29sIHByaXZhdGUgbG9ja2VkID0gZmFsc2U7CiAgICBtb2RpZmllciBub1JlZW50cmFuY3koKSB7CiAgICAgICAgYXNzZXJ0KCFsb2NrZWQpOwogICAgICAgIGxvY2tlZCA9IHRydWU7CiAgICAgICAgXzsKICAgICAgICBsb2NrZWQgPSBmYWxzZTsKICAgIH0KfS8vY29udHJhY3Q='.
	

]
