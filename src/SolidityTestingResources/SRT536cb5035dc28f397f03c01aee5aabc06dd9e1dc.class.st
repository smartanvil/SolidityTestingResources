Class {
	#name : #SRT536cb5035dc28f397f03c01aee5aabc06dd9e1dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT536cb5035dc28f397f03c01aee5aabc06dd9e1dc >> base64 [
	^ ''.
	

]
