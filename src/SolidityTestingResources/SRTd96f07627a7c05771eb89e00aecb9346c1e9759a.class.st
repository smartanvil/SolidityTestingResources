Class {
	#name : #SRTd96f07627a7c05771eb89e00aecb9346c1e9759a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd96f07627a7c05771eb89e00aecb9346c1e9759a >> base64 [
	^ ''.
	

]
