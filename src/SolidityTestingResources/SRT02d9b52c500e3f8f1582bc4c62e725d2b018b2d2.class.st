Class {
	#name : #SRT02d9b52c500e3f8f1582bc4c62e725d2b018b2d2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02d9b52c500e3f8f1582bc4c62e725d2b018b2d2 >> base64 [
	^ ''.
	

]
