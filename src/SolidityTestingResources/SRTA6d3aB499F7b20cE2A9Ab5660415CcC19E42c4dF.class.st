Class {
	#name : #SRTA6d3aB499F7b20cE2A9Ab5660415CcC19E42c4dF,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTA6d3aB499F7b20cE2A9Ab5660415CcC19E42c4dF >> base64 [
	^ ''.
	

]
