Class {
	#name : #SRTd6e354F07319e2474491D8c7c712137bEe6862a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6e354F07319e2474491D8c7c712137bEe6862a2 >> base64 [
	^ ''.
	

]
