Class {
	#name : #SRTb3230fca7067819f4a27bcfb68b6dd736709bf00,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb3230fca7067819f4a27bcfb68b6dd736709bf00 >> base64 [
	^ ''.
	

]
