Class {
	#name : #SRTc9e025b5e175563df160e385b6c65a1abb8e1ecf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9e025b5e175563df160e385b6c65a1abb8e1ecf >> base64 [
	^ ''.
	

]
