Class {
	#name : #SRT42022a93c7dcc82e17d536d1ec7cf94e755722f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42022a93c7dcc82e17d536d1ec7cf94e755722f1 >> base64 [
	^ ''.
	

]
