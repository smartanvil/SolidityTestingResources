Class {
	#name : #SRT80d45264dd23f4a690be5a0f1af310bfa6091c0f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80d45264dd23f4a690be5a0f1af310bfa6091c0f >> base64 [
	^ ''.
	

]
