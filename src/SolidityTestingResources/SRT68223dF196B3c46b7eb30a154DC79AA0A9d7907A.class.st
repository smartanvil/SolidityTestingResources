Class {
	#name : #SRT68223dF196B3c46b7eb30a154DC79AA0A9d7907A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT68223dF196B3c46b7eb30a154DC79AA0A9d7907A >> base64 [
	^ ''.
	

]
