Class {
	#name : #SRT9f8f72aa9304c8b593d555f12ef6589cc3a579a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9f8f72aa9304c8b593d555f12ef6589cc3a579a2 >> base64 [
	^ ''.
	

]
