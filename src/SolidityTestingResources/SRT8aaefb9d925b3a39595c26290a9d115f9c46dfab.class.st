Class {
	#name : #SRT8aaefb9d925b3a39595c26290a9d115f9c46dfab,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8aaefb9d925b3a39595c26290a9d115f9c46dfab >> base64 [
	^ ''.
	

]
