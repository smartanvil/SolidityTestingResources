Class {
	#name : #SRT8effd494eb698cc399af6231fccd39e08fd20b15,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8effd494eb698cc399af6231fccd39e08fd20b15 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogT3ZlcmZsb3cgYXdhcmUgdWludCBtYXRoIGZ1bmN0aW9ucy4KICoKICogSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL01ha2VyREFPL21ha2VyLW90Yy9ibG9iL21hc3Rlci9jb250cmFjdHMvc2ltcGxlX21hcmtldC5zb2wKICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIC8vaW50ZXJuYWxzCgogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKiBiOwogICAgICAgIHJlcXVpcmUoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXF1aXJlKGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgICByZXF1aXJlKGM+PWEgJiYgYz49Yik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHJlcXVpcmUoYiA+IDApOwogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIHJlcXVpcmUoYSA9PSBiICogYyArIGEgJSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKCi8qKgogKiBFUkMgMjAgdG9rZW4KICoKICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwppbnRlcmZhY2UgVG9rZW4gewoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCn0KCi8qKgogKiBFUkMgMjAgdG9rZW4KICoKICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICAvKioKICAgICAqIFJldmlld2VkOgogICAgICogLSBJbnRlZ2VyIG92ZXJmbG93ID0gT0ssIGNoZWNrZWQKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgICAgICAvL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUgZ29lcyBvbiwgeW91IG5lZWQgdG8gY2hlY2sgaWYgaXQgZG9lc24ndCB3cmFwLgogICAgICAgIC8vUmVwbGFjZSB0aGUgaWYgd2l0aCB0aGlzIG9uZSBpbnN0ZWFkLgogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICAgICAgLy9pZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL3NhbWUgYXMgYWJvdmUuIFJlcGxhY2UgdGhpcyBsaW5lIHdpdGggdGhlIGZvbGxvd2luZyBpZiB5b3Ugd2FudCB0byBwcm90ZWN0IGFnYWluc3Qgd3JhcHBpbmcgdWludHMuCiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIC8vaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKfQoKCi8qKgogKiBQSVggY3Jvd2RzYWxlIElDTyBjb250cmFjdC4KICoKICogU2VjdXJpdHkgY3JpdGVyaWEgZXZhbHVhdGVkIGFnYWluc3QgaHR0cDovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NTUxL21ldGhvZG9sb2dpY2FsLXNlY3VyaXR5LXJldmlldy1vZi1hLXNtYXJ0LWNvbnRyYWN0CiAqCiAqCiAqLwpjb250cmFjdCBQSVhUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBTYWZlTWF0aCB7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlBJWCBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJQSVgiOwoKICAgIC8vIEluaXRpYWwgZm91bmRlciBhZGRyZXNzIChzZXQgaW4gY29uc3RydWN0b3IpCiAgICAvLyBUaGlzIGFkZHJlc3MgaXMgdXNlZCBhcyBhIGNvbnRyb2xsZXIgYWRkcmVzcywgaW4gb3JkZXIgdG8gcHJvcGVybHkgaGFuZGxlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSB0b2tlbi4KICAgIGFkZHJlc3MgcHVibGljIGZvdW5kZXIgPSAweDA7CgogICAgLy8gRGVwb3NpdCBBZGRyZXNzIC0gVGhlIGZ1bmRzIHdpbGwgYmUgc2VudCBoZXJlIGltbWVkaWF0ZWx5IGFmdGVyIHBheW1lbnRzIGFyZSBtYWRlIHRvIHRoZSBjb250cmFjdAogICAgYWRkcmVzcyBwdWJsaWMgZGVwb3NpdCA9IDB4MDsKCiAgICAvKgogICAgTXVsdGktc3RhZ2Ugc2FsZSBjb250cmFjdC4KCiAgICBOb3RlczoKICAgIEFsbCB0b2tlbiBzYWxlcyBhcmUgdGllZCB0byBVU0QuICBObyB0b2tlbiBzYWxlcyBhcmUgZm9yIGEgZml4ZWQgYW1vdW50IG9mIFdlaSwgdGhpcyBjYW4gc2hpZnQgYW5kIGNoYW5nZSBvdmVyIHRpbWUuCiAgICBEdWUgdG8gdGhpcywgdGhlIGZvbGxvd2luZyBuZWVkcyB0byBiZSBwYWlkIGF0dGVudGlvbiB0bzoKICAgIDEuIFRoZSB2YWx1ZSBvZiB0aGUgdG9rZW4gZmx1Y3R1YXRlcyBpbiByZWZlcmVuY2UgdG8gdGhlIGNlbnRzUGVyRXRoIHNldCBvbiB0aGUgY29udHJhY3QuCiAgICAyLiBUaGUgdG9rZW5zIGFyZSBwcmljZWQgaW4gY2VudHMuICBTbyBhbGwgdG9rZW4gcHVyY2hhc2VzIHdpbGwgYmUgY2FsY3VsYXRlZCBvdXQgbGl2ZSBhdCB0aGF0IHRpbWUuCgogICAgRnVuZGluZyBTdGFnZXM6CiAgICAxLiBQcmUtU2FsZSwgdGhlcmUgd2lsbCBiZSAxNU0gVVNEICggMTI1TSB0b2tlbnMgKSBmb3Igc2FsZS4gQm9udXMgb2YgMjAlCiAgICAyLiBEYXkgMSBzYWxlLCB0aGVyZSB3aWxsIGJlIDIwTSBVU0QgLSB0aGUgcHJlLXNhbGUgYW1vdW50IG9mIHRva2VucyBmb3Igc2FsZS4gKH4xNjYuNm0gdG9rZW5zIC0gUHJlLVNhbGUgdG9rZW5zKSBCb251cyBvZiAxNSUKICAgIDMuIERheSAyIHNhbGUsIHRoZXJlIHdpbGwgYmUgMjBNIFVTRCAofjE2Ni42bSB0b2tlbnMpIHRva2VucyBmb3Igc2FsZS4gIEJvbnVzIG9mIDEwJQogICAgNC4gRGF5cyAzLTEwIHNhbGUsIHRoZXJlIHdpbGwgYmUgMjBNIFVTRCAofjE2Ni42bSB0b2tlbnMpIHRva2VucyBmb3Igc2FsZS4gIEJvbnVzIG9mIDUlCgogICAgUG9zdC1TYWxlOgogICAgMS4gMzAlIG9mIHRoZSB0b3RhbCB0b2tlbiBjb3VudCBpcyByZXNlcnZlZCBmb3IgcmVsZWFzZSBldmVyeSB5ZWFyLCBhdCAxLzR0aCBvZiB0aGUgb3JpZ2luYWxseSByZXNlcnZlZCB2YWx1ZSBwZXIgeWVhci4KICAgIDIuIDIwJSBvZiB0aGUgdG90YWwgdG9rZW4gY291bnQgW01pbnVzIHRoZSBudW1iZXIgb2YgZXhjZXNzIGJvbnVzIHRva2VucyBmcm9tIHRoZSBwcmUtc2FsZV0gaXMgaXNzdWVkIG91dCB0byB0aGUgdGVhbSB3aGVuIHRoZSBzYWxlIGhhcyBjb21wbGV0ZWQuCiAgICAzLiBQdXJjaGFzZWQgdG9rZW5zIGNvbWUgYXZhaWxhYmxlIHRvIGJlIHdpdGhkcmF3biAzMSBkYXlzIGFmdGVyIHRoZSBzYWxlIGhhcyBjb21wbGV0ZWQuCiAgICAqLwoKICAgIGVudW0gU3RhdGUgeyBQcmVTYWxlLCBEYXkxLCBEYXkyLCBEYXkzLCBSdW5uaW5nLCBIYWx0ZWQgfSAvLyB0aGUgc3RhdGVzIHRocm91Z2ggd2hpY2ggdGhpcyBjb250cmFjdCBnb2VzCiAgICBTdGF0ZSBzdGF0ZTsKCiAgICAvLyBQcmljaW5nIGZvciB0aGUgcHJlLXNhbGUgaW4gVVMgQ2VudHMuCiAgICB1aW50IHB1YmxpYyBjYXBQcmVTYWxlID0gMTUgKiAxMCoqODsgIC8vIDE1TSBVU0QgY2FwIGZvciBwcmUtc2FsZSwgdGhpcyBzdWJ0cmFjdHMgZnJvbSBkYXkxIGNhcAogICAgdWludCBwdWJsaWMgY2FwRGF5MSA9IDIwICogMTAqKjg7ICAvLyAyME0gVVNEIGNhcCBmb3IgZGF5IDEKICAgIHVpbnQgcHVibGljIGNhcERheTIgPSAyMCAqIDEwKio4OyAgLy8gMjBNIFVTRCBjYXAgZm9yIGRheSAyCiAgICB1aW50IHB1YmxpYyBjYXBEYXkzID0gMjAgKiAxMCoqODsgIC8vIDIwTSBVU0QgY2FwIGZvciBkYXkgMyAtIDEwCgogICAgLy8gVG9rZW4gcHJpY2luZyBpbmZvcm1hdGlvbgogICAgdWludCBwdWJsaWMgd2VpUGVyRXRoZXIgPSAxMCoqMTg7CiAgICB1aW50IHB1YmxpYyBjZW50c1BlckV0aCA9IDIzMDAwOwogICAgdWludCBwdWJsaWMgY2VudHNQZXJUb2tlbiA9IDEyOwoKICAgIC8vIEFtb3VudCBvZiBmdW5kcyByYWlzZWQgaW4gc3RhZ2VzIG9mIHByZS1zYWxlCiAgICB1aW50IHB1YmxpYyByYWlzZVByZVNhbGUgPSAwOyAgLy8gVVNEIHJhaXNlIGR1cmluZyB0aGUgcHJlLXNhbGUgcGVyaW9kCiAgICB1aW50IHB1YmxpYyByYWlzZURheTEgPSAwOyAgLy8gVVNEIHJhaXNlZCBvbiBEYXkgMQogICAgdWludCBwdWJsaWMgcmFpc2VEYXkyID0gMDsgIC8vIFVTRCByYWlzZWQgb24gRGF5IDIKICAgIHVpbnQgcHVibGljIHJhaXNlRGF5MyA9IDA7ICAvLyBVU0QgcmFpc2VkIGR1cmluZyBkYXlzIDMtMTAKCiAgICAvLyBCbG9jayB0aW1pbmcvY29udHJhY3QgdW5sb2NraW5nIGluZm9ybWF0aW9uCiAgICB1aW50IHB1YmxpYyBwdWJsaWNTYWxlU3RhcnQgPSAxNTAyMjgwMDAwOyAvLyBBdWcgOSwgMjAxNyBOb29uIFVUQwogICAgdWludCBwdWJsaWMgZGF5MlN0YXJ0ID0gMTUwMjM2NjQwMDsgLy8gQXVnIDEwLCAyMDE3IE5vb24gVVRDCiAgICB1aW50IHB1YmxpYyBkYXkzU3RhcnQgPSAxNTAyNDUyODAwOyAvLyBBdWcgMTEsIDIwMTcgTm9vbiBVVEMKICAgIHVpbnQgcHVibGljIHNhbGVFbmQgPSAxNTAzMTQ0MDAwOyAvLyBBdWcgMTksIDIwMTcgTm9vbiBVVEMKICAgIHVpbnQgcHVibGljIGNvaW5UcmFkZVN0YXJ0ID0gMTUwNTgyMjQwMDsgLy8gU2VwIDE5LCAyMDE3IE5vb24gVVRDCiAgICB1aW50IHB1YmxpYyB5ZWFyMVVubG9jayA9IDE1MzQ2ODAwMDA7IC8vIEF1ZyAxOSwgMjAxOCBOb29uIFVUQwogICAgdWludCBwdWJsaWMgeWVhcjJVbmxvY2sgPSAxNTY2MjE2MDAwOyAvLyBBdWcgMTksIDIwMTkgTm9vbiBVVEMKICAgIHVpbnQgcHVibGljIHllYXIzVW5sb2NrID0gMTU5NzgzODQwMDsgLy8gQXVnIDE5LCAyMDIwIE5vb24gVVRDCiAgICB1aW50IHB1YmxpYyB5ZWFyNFVubG9jayA9IDE2MjkzNzQ0MDA7IC8vIEF1ZyAxOSwgMjAyMSBOb29uIFVUQwoKICAgIC8vIEhhdmUgdGhlIHBvc3QtcmV3YXJkIGFsbG9jYXRpb25zIGJlZW4gY29tcGxldGVkCiAgICBib29sIHB1YmxpYyBhbGxvY2F0ZWRGb3VuZGVycyA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgYWxsb2NhdGVkMVllYXIgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIGFsbG9jYXRlZDJZZWFyID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBhbGxvY2F0ZWQzWWVhciA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgYWxsb2NhdGVkNFllYXIgPSBmYWxzZTsKCiAgICAvLyBUb2tlbiBjb3VudCBpbmZvcm1hdGlvbgogICAgdWludCBwdWJsaWMgdG90YWxUb2tlbnNTYWxlID0gNTAwMDAwMDAwOyAvL3RvdGFsIG51bWJlciBvZiB0b2tlbnMgYmVpbmcgc29sZCBpbiB0aGUgSUNPLCBleGNsdWRpbmcgYm9udXNlcywgcmVzZXJ2ZSwgYW5kIHRlYW0gZGlzdHJpYnV0aW9ucwogICAgdWludCBwdWJsaWMgdG90YWxUb2tlbnNSZXNlcnZlID0gMzMwMDAwMDAwOwogICAgdWludCBwdWJsaWMgdG90YWxUb2tlbnNDb21wYW55ID0gMjIwMDAwMDAwOwoKICAgIGJvb2wgcHVibGljIGhhbHRlZCA9IGZhbHNlOyAvL3RoZSBmb3VuZGVyIGFkZHJlc3MgY2FuIHNldCB0aGlzIHRvIHRydWUgdG8gaGFsdCB0aGUgY3Jvd2RzYWxlIGR1ZSB0byBlbWVyZ2VuY3kuCgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHByZXNhbGVXaGl0ZWxpc3Q7IC8vIFByZS1zYWxlIFdoaXRlbGlzdAoKICAgIGV2ZW50IEJ1eShhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCB1aW50IGV0aCwgdWludCBmYnQpOwogICAgZXZlbnQgV2l0aGRyYXcoYWRkcmVzcyBpbmRleGVkIHNlbmRlciwgYWRkcmVzcyB0bywgdWludCBldGgpOwogICAgZXZlbnQgQWxsb2NhdGVUb2tlbnMoYWRkcmVzcyBpbmRleGVkIHNlbmRlcik7CgogICAgZnVuY3Rpb24gUElYVG9rZW4oYWRkcmVzcyBkZXBvc2l0QWRkcmVzcykgewogICAgICAgIC8qCiAgICAgICAgICAgIEluaXRpYWxpemUgdGhlIGNvbnRyYWN0IHdpdGggYSBzYW5lIHNldCBvZiBvd25lcnMKICAgICAgICAqLwogICAgICAgIGZvdW5kZXIgPSBtc2cuc2VuZGVyOyAgLy8gQWxsb2NhdGUgdGhlIGZvdW5kZXIgYWRkcmVzcyBhcyBhIHVzYWJsZSBhZGRyZXNzIHNlcGFyYXRlIGZyb20gZGVwb3NpdC4KICAgICAgICBkZXBvc2l0ID0gZGVwb3NpdEFkZHJlc3M7ICAvLyBTdG9yZSB0aGUgZGVwb3NpdCBhZGRyZXNzLgogICAgfQoKICAgIGZ1bmN0aW9uIHNldEVUSFVTRFJhdGUodWludCBjZW50c1BlckV0aElucHV0KSBwdWJsaWMgewogICAgICAgIC8qCiAgICAgICAgICAgIFNldHMgdGhlIGN1cnJlbnQgRVRIL1VTRCBFeGNoYW5nZSByYXRlIGluIGNlbnRzLiAgVGhpcyBtb2RpZmllcyB0aGUgdG9rZW4gcHJpY2UgaW4gV2VpLgogICAgICAgICovCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGZvdW5kZXIpOwogICAgICAgIGNlbnRzUGVyRXRoID0gY2VudHNQZXJFdGhJbnB1dDsKICAgIH0KCiAgICAvKgogICAgICAgIEdldHMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyYWN0IGJhc2VkIG9uIHRoZSBibG9jayBudW1iZXIgaW52b2x2ZWQgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24uCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKFN0YXRlKSB7CgogICAgICAgIGlmKGhhbHRlZCkgcmV0dXJuIFN0YXRlLkhhbHRlZDsKICAgICAgICBlbHNlIGlmKGJsb2NrLnRpbWVzdGFtcCA8IHB1YmxpY1NhbGVTdGFydCkgcmV0dXJuIFN0YXRlLlByZVNhbGU7CiAgICAgICAgZWxzZSBpZihibG9jay50aW1lc3RhbXAgPiBwdWJsaWNTYWxlU3RhcnQgJiYgYmxvY2sudGltZXN0YW1wIDw9IGRheTJTdGFydCkgcmV0dXJuIFN0YXRlLkRheTE7CiAgICAgICAgZWxzZSBpZihibG9jay50aW1lc3RhbXAgPiBkYXkyU3RhcnQgJiYgYmxvY2sudGltZXN0YW1wIDw9IGRheTNTdGFydCkgcmV0dXJuIFN0YXRlLkRheTI7CiAgICAgICAgZWxzZSBpZihibG9jay50aW1lc3RhbXAgPiBkYXkzU3RhcnQgJiYgYmxvY2sudGltZXN0YW1wIDw9IHNhbGVFbmQpIHJldHVybiBTdGF0ZS5EYXkzOwogICAgICAgIGVsc2UgcmV0dXJuIFN0YXRlLlJ1bm5pbmc7CiAgICB9CgogICAgLyoKICAgICAgICBHZXRzIHRoZSBjdXJyZW50IGFtb3VudCBvZiBib251cyBwZXIgcHVyY2hhc2UgaW4gcGVyY2VudC4KICAgICovCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50Qm9udXNJblBlcmNlbnQoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgICAgIFN0YXRlIHMgPSBnZXRDdXJyZW50U3RhdGUoKTsKICAgICAgICBpZiAocyA9PSBTdGF0ZS5IYWx0ZWQpIHJldmVydCgpOwogICAgICAgIGVsc2UgaWYocyA9PSBTdGF0ZS5QcmVTYWxlKSByZXR1cm4gMjA7CiAgICAgICAgZWxzZSBpZihzID09IFN0YXRlLkRheTEpIHJldHVybiAxNTsKICAgICAgICBlbHNlIGlmKHMgPT0gU3RhdGUuRGF5MikgcmV0dXJuIDEwOwogICAgICAgIGVsc2UgaWYocyA9PSBTdGF0ZS5EYXkzKSByZXR1cm4gNTsKICAgICAgICBlbHNlIHJldHVybiAwOwogICAgfQoKICAgIC8qCiAgICAgICAgR2V0IHRoZSBjdXJyZW50IHByaWNlIG9mIHRoZSB0b2tlbiBpbiBXRUkuICBUaGlzIHNob3VsZCBiZSB0aGUgd2VpUGVyRXRoZXIvY2VudHNQZXJFdGggKiBjZW50c1BlclRva2VuCiAgICAqLwogICAgZnVuY3Rpb24gZ2V0VG9rZW5QcmljZUluV0VJKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQpewogICAgICAgIHVpbnQgd2VpUGVyQ2VudCA9IHNhZmVEaXYod2VpUGVyRXRoZXIsIGNlbnRzUGVyRXRoKTsKICAgICAgICByZXR1cm4gc2FmZU11bCh3ZWlQZXJDZW50LCBjZW50c1BlclRva2VuKTsKICAgIH0KCiAgICAvKgogICAgICAgIEVudHJ5IHBvaW50IGZvciBwdXJjaGFzaW5nIGZvciBvbmUncyBzZWxmLgogICAgKi8KICAgIGZ1bmN0aW9uIGJ1eSgpIHBheWFibGUgcHVibGljIHsKICAgICAgICBidXlSZWNpcGllbnQobXNnLnNlbmRlcik7CiAgICB9CgogICAgLyoKICAgICAgICBNYWluIHB1cmNoYXNpbmcgZnVuY3Rpb24gZm9yIHRoZSBjb250cmFjdAogICAgICAgIDEuIFNob3VsZCB2YWxpZGF0ZSB0aGUgY3VycmVudCBzdGF0ZSwgZnJvbSB0aGUgZ2V0Q3VycmVudFN0YXRlKCkgZnVuY3Rpb24KICAgICAgICAyLiBTaG91bGQgb25seSBhbGxvdyB0aGUgZm91bmRlciB0byBvcmRlciBkdXJpbmcgdGhlIHByZS1zYWxlCiAgICAgICAgMy4gU2hvdWxkIGNvcnJlY3RseSBjYWxjdWxhdGUgdGhlIHZhbHVlcyB0byBiZSBwYWlkIG91dCBkdXJpbmcgZGlmZmVyZW50IHN0YWdlcyBvZiB0aGUgY29udHJhY3QuCiAgICAqLwogICAgZnVuY3Rpb24gYnV5UmVjaXBpZW50KGFkZHJlc3MgcmVjaXBpZW50KSBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgU3RhdGUgY3VycmVudF9zdGF0ZSA9IGdldEN1cnJlbnRTdGF0ZSgpOyAvLyBHZXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyYWN0LgogICAgICAgIHVpbnQgdXNkQ2VudHNSYWlzZSA9IHNhZmVEaXYoc2FmZU11bChtc2cudmFsdWUsIGNlbnRzUGVyRXRoKSwgd2VpUGVyRXRoZXIpOyAvLyBHZXQgdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGNlbnRzIHJhaXNlZCBieSB0aGUgcGF5bWVudC4KCiAgICAgICAgaWYoY3VycmVudF9zdGF0ZSA9PSBTdGF0ZS5QcmVTYWxlKQogICAgICAgIHsKICAgICAgICAgICAgcmVxdWlyZSAocHJlc2FsZVdoaXRlbGlzdFttc2cuc2VuZGVyXSA+IDApOwogICAgICAgICAgICByYWlzZVByZVNhbGUgPSBzYWZlQWRkKHJhaXNlUHJlU2FsZSwgdXNkQ2VudHNSYWlzZSk7IC8vYWRkIGN1cnJlbnQgcmFpc2UgdG8gcHJlLXNlbGwgYW1vdW50CiAgICAgICAgICAgIHJlcXVpcmUocmFpc2VQcmVTYWxlIDwgY2FwUHJlU2FsZSAmJiB1c2RDZW50c1JhaXNlIDwgcHJlc2FsZVdoaXRlbGlzdFttc2cuc2VuZGVyXSk7IC8vZW5zdXJlIHByZS1zYWxlIGNhcCwgMTVtIHVzZCAqIDEwMCBzbyB3ZSBoYXZlIGNlbnRzCiAgICAgICAgICAgIHByZXNhbGVXaGl0ZWxpc3RbbXNnLnNlbmRlcl0gPSBwcmVzYWxlV2hpdGVsaXN0W21zZy5zZW5kZXJdIC0gdXNkQ2VudHNSYWlzZTsgLy8gUmVtb3ZlIHRoZSBhbW91bnQgcHVyY2hhc2VkIGZyb20gdGhlIHByZS1zYWxlIHBlcm1pdHRlZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGN1cnJlbnRfc3RhdGUgPT0gU3RhdGUuRGF5MSkKICAgICAgICB7CiAgICAgICAgICAgIHJhaXNlRGF5MSA9IHNhZmVBZGQocmFpc2VEYXkxLCB1c2RDZW50c1JhaXNlKTsgLy9hZGQgY3VycmVudCByYWlzZSB0byBwcmUtc2VsbCBhbW91bnQKICAgICAgICAgICAgcmVxdWlyZShyYWlzZURheTEgPCAoY2FwRGF5MSAtIHJhaXNlUHJlU2FsZSkpOyAvL2Vuc3VyZSBkYXkgMSBjYXAsIHdoaWNoIGlzIGxvd2VyIGJ5IHRoZSBhbW91bnQgd2UgcHJlLXNvbGQKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoY3VycmVudF9zdGF0ZSA9PSBTdGF0ZS5EYXkyKQogICAgICAgIHsKICAgICAgICAgICAgcmFpc2VEYXkyID0gc2FmZUFkZChyYWlzZURheTIsIHVzZENlbnRzUmFpc2UpOyAvL2FkZCBjdXJyZW50IHJhaXNlIHRvIHByZS1zZWxsIGFtb3VudAogICAgICAgICAgICByZXF1aXJlKHJhaXNlRGF5MiA8IGNhcERheTIpOyAvL2Vuc3VyZSBkYXkgMiBjYXAKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoY3VycmVudF9zdGF0ZSA9PSBTdGF0ZS5EYXkzKQogICAgICAgIHsKICAgICAgICAgICAgcmFpc2VEYXkzID0gc2FmZUFkZChyYWlzZURheTMsIHVzZENlbnRzUmFpc2UpOyAvL2FkZCBjdXJyZW50IHJhaXNlIHRvIHByZS1zZWxsIGFtb3VudAogICAgICAgICAgICByZXF1aXJlKHJhaXNlRGF5MyA8IGNhcERheTMpOyAvL2Vuc3VyZSBkYXkgMyBjYXAKICAgICAgICB9CiAgICAgICAgZWxzZSByZXZlcnQoKTsKCiAgICAgICAgdWludCB0b2tlbnMgPSBzYWZlRGl2KG1zZy52YWx1ZSwgZ2V0VG9rZW5QcmljZUluV0VJKCkpOyAvLyBDYWxjdWxhdGUgbnVtYmVyIG9mIHRva2VucyB0byBiZSBwYWlkIG91dAogICAgICAgIHVpbnQgYm9udXMgPSBzYWZlRGl2KHNhZmVNdWwodG9rZW5zLCBnZXRDdXJyZW50Qm9udXNJblBlcmNlbnQoKSksIDEwMCk7IC8vIENhbGN1bGF0ZSBudW1iZXIgb2YgYm9udXMgdG9rZW5zCgogICAgICAgIGlmIChjdXJyZW50X3N0YXRlID09IFN0YXRlLlByZVNhbGUpIHsKICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBleHRyYSA1JSBmcm9tIHRoZSB0b3RhbFRva2Vuc0NvbXBhbnksIGluIG9yZGVyIHRvIGtlZXAgdGhlIDU1MG0gb24gdHJhY2suCiAgICAgICAgICAgIHRvdGFsVG9rZW5zQ29tcGFueSA9IHNhZmVTdWIodG90YWxUb2tlbnNDb21wYW55LCBzYWZlRGl2KGJvbnVzLCA0KSk7CiAgICAgICAgfQoKICAgICAgICB1aW50IHRvdGFsVG9rZW5zID0gc2FmZUFkZCh0b2tlbnMsIGJvbnVzKTsKCiAgICAgICAgYmFsYW5jZXNbcmVjaXBpZW50XSA9IHNhZmVBZGQoYmFsYW5jZXNbcmVjaXBpZW50XSwgdG90YWxUb2tlbnMpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG90YWxUb2tlbnMpOwoKICAgICAgICBkZXBvc2l0LnRyYW5zZmVyKG1zZy52YWx1ZSk7IC8vIFNlbmQgZGVwb3NpdGVkIEV0aGVyIHRvIHRoZSBkZXBvc2l0IGFkZHJlc3Mgb24gZmlsZS4KCiAgICAgICAgQnV5KHJlY2lwaWVudCwgbXNnLnZhbHVlLCB0b3RhbFRva2Vucyk7CiAgICB9CgogICAgLyoKICAgICAgICBBbGxvY2F0ZSByZXNlcnZlZCBhbmQgZm91bmRlcnMgdG9rZW5zIGJhc2VkIG9uIHRoZSBydW5uaW5nIHRpbWUgYW5kIHN0YXRlIG9mIHRoZSBjb250cmFjdC4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb2NhdGVSZXNlcnZlQW5kRm91bmRlclRva2VucygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PWZvdW5kZXIpOwogICAgICAgIHJlcXVpcmUoZ2V0Q3VycmVudFN0YXRlKCkgPT0gU3RhdGUuUnVubmluZyk7CiAgICAgICAgdWludCB0b2tlbnMgPSAwOwoKICAgICAgICBpZihibG9jay50aW1lc3RhbXAgPiBzYWxlRW5kICYmICFhbGxvY2F0ZWRGb3VuZGVycykKICAgICAgICB7CiAgICAgICAgICAgIGFsbG9jYXRlZEZvdW5kZXJzID0gdHJ1ZTsKICAgICAgICAgICAgdG9rZW5zID0gdG90YWxUb2tlbnNDb21wYW55OwogICAgICAgICAgICBiYWxhbmNlc1tmb3VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbZm91bmRlcl0sIHRva2Vucyk7CiAgICAgICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZihibG9jay50aW1lc3RhbXAgPiB5ZWFyMVVubG9jayAmJiAhYWxsb2NhdGVkMVllYXIpCiAgICAgICAgewogICAgICAgICAgICBhbGxvY2F0ZWQxWWVhciA9IHRydWU7CiAgICAgICAgICAgIHRva2VucyA9IHNhZmVEaXYodG90YWxUb2tlbnNSZXNlcnZlLCA0KTsKICAgICAgICAgICAgYmFsYW5jZXNbZm91bmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW2ZvdW5kZXJdLCB0b2tlbnMpOwogICAgICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYoYmxvY2sudGltZXN0YW1wID4geWVhcjJVbmxvY2sgJiYgIWFsbG9jYXRlZDJZZWFyKQogICAgICAgIHsKICAgICAgICAgICAgYWxsb2NhdGVkMlllYXIgPSB0cnVlOwogICAgICAgICAgICB0b2tlbnMgPSBzYWZlRGl2KHRvdGFsVG9rZW5zUmVzZXJ2ZSwgNCk7CiAgICAgICAgICAgIGJhbGFuY2VzW2ZvdW5kZXJdID0gc2FmZUFkZChiYWxhbmNlc1tmb3VuZGVyXSwgdG9rZW5zKTsKICAgICAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCB0b2tlbnMpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKGJsb2NrLnRpbWVzdGFtcCA+IHllYXIzVW5sb2NrICYmICFhbGxvY2F0ZWQzWWVhcikKICAgICAgICB7CiAgICAgICAgICAgIGFsbG9jYXRlZDNZZWFyID0gdHJ1ZTsKICAgICAgICAgICAgdG9rZW5zID0gc2FmZURpdih0b3RhbFRva2Vuc1Jlc2VydmUsIDQpOwogICAgICAgICAgICBiYWxhbmNlc1tmb3VuZGVyXSA9IHNhZmVBZGQoYmFsYW5jZXNbZm91bmRlcl0sIHRva2Vucyk7CiAgICAgICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZihibG9jay50aW1lc3RhbXAgPiB5ZWFyNFVubG9jayAmJiAhYWxsb2NhdGVkNFllYXIpCiAgICAgICAgewogICAgICAgICAgICBhbGxvY2F0ZWQ0WWVhciA9IHRydWU7CiAgICAgICAgICAgIHRva2VucyA9IHNhZmVEaXYodG90YWxUb2tlbnNSZXNlcnZlLCA0KTsKICAgICAgICAgICAgYmFsYW5jZXNbZm91bmRlcl0gPSBzYWZlQWRkKGJhbGFuY2VzW2ZvdW5kZXJdLCB0b2tlbnMpOwogICAgICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIHRva2Vucyk7CiAgICAgICAgfQogICAgICAgIGVsc2UgcmV2ZXJ0KCk7CgogICAgICAgIEFsbG9jYXRlVG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8qKgogICAgICogRW1lcmdlbmN5IFN0b3AgSUNPLgogICAgICoKICAgICAqICBBcHBsaWNhYmxlIHRlc3RzOgogICAgICoKICAgICAqIC0gVGVzdCB1bmhhbHRpbmcsIGJ1eWluZywgYW5kIHN1Y2NlZWRpbmcKICAgICAqLwogICAgZnVuY3Rpb24gaGFsdCgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PWZvdW5kZXIpOwogICAgICAgIGhhbHRlZCA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdW5oYWx0KCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09Zm91bmRlcik7CiAgICAgICAgaGFsdGVkID0gZmFsc2U7CiAgICB9CgogICAgLyoKICAgICAgICBDaGFuZ2UgZm91bmRlciBhZGRyZXNzIChDb250cm9sbGluZyBhZGRyZXNzIGZvciBjb250cmFjdCkKICAgICovCiAgICBmdW5jdGlvbiBjaGFuZ2VGb3VuZGVyKGFkZHJlc3MgbmV3Rm91bmRlcikgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09Zm91bmRlcik7CiAgICAgICAgZm91bmRlciA9IG5ld0ZvdW5kZXI7CiAgICB9CgogICAgLyoKICAgICAgICBDaGFuZ2UgZGVwb3NpdCBhZGRyZXNzIChBZGRyZXNzIHRvIHdoaWNoIGZ1bmRzIGFyZSBkZXBvc2l0ZWQpCiAgICAqLwogICAgZnVuY3Rpb24gY2hhbmdlRGVwb3NpdChhZGRyZXNzIG5ld0RlcG9zaXQpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXI9PWZvdW5kZXIpOwogICAgICAgIGRlcG9zaXQgPSBuZXdEZXBvc2l0OwogICAgfQoKICAgIC8qCiAgICAgICAgQWRkIHBlb3BsZSB0byB0aGUgcHJlLXNhbGUgd2hpdGVsaXN0CiAgICAgICAgQW1vdW50IHNob3VsZCBiZSB0aGUgdmFsdWUgaW4gVVNEIHRoYXQgdGhlIHB1cmNoYXNlciBpcyBhbGxvd2VkIHRvIGJ1eQogICAgICAgIElFOiAxMDAgaXMgJDEwMCBpcyAxMDAwMCBjZW50cy4gIFRoZSBjb3JyZWN0IHZhbHVlIHRvIGVudGVyIGlzIDEwMAogICAgKi8KICAgIGZ1bmN0aW9uIGFkZFByZXNhbGVXaGl0ZWxpc3QoYWRkcmVzcyB0b1doaXRlbGlzdCwgdWludDI1NiBhbW91bnQpewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09Zm91bmRlciAmJiBhbW91bnQgPiAwKTsKICAgICAgICBwcmVzYWxlV2hpdGVsaXN0W3RvV2hpdGVsaXN0XSA9IGFtb3VudCAqIDEwMDsKICAgIH0KCiAgICAvKioKICAgICAqIEVSQyAyMCBTdGFuZGFyZCBUb2tlbiBpbnRlcmZhY2UgdHJhbnNmZXIgZnVuY3Rpb24KICAgICAqCiAgICAgKiBQcmV2ZW50IHRyYW5zZmVycyB1bnRpbCBmcmVlemUgcGVyaW9kIGlzIG92ZXIuCiAgICAgKgogICAgICogQXBwbGljYWJsZSB0ZXN0czoKICAgICAqCiAgICAgKiAtIFRlc3QgcmVzdHJpY3RlZCBlYXJseSB0cmFuc2ZlcgogICAgICogLSBUZXN0IHRyYW5zZmVyIGFmdGVyIHJlc3RyaWN0ZWQgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShibG9jay50aW1lc3RhbXAgPiBjb2luVHJhZGVTdGFydCk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KICAgIC8qKgogICAgICogRVJDIDIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZSB0cmFuc2ZlciBmdW5jdGlvbgogICAgICoKICAgICAqIFByZXZlbnQgdHJhbnNmZXJzIHVudGlsIGZyZWV6ZSBwZXJpb2QgaXMgb3Zlci4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShibG9jay50aW1lc3RhbXAgPiBjb2luVHJhZGVTdGFydCk7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5UmVjaXBpZW50KG1zZy5zZW5kZXIpOwogICAgfQoKfQ=='.
	

]
