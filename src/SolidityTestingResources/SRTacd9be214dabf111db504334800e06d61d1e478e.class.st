Class {
	#name : #SRTacd9be214dabf111db504334800e06d61d1e478e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTacd9be214dabf111db504334800e06d61d1e478e >> base64 [
	^ ''.
	

]
