Class {
	#name : #SRT7b26fc24bdb49cbcb5256e8bc8809705ac223a8c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7b26fc24bdb49cbcb5256e8bc8809705ac223a8c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgSGVscHMgY29udHJhY3RzIGd1YXJkIGFnYWlucyByZWVudHJhbmN5IGF0dGFja3MuCiAqIEBhdXRob3IgUmVtY28gQmxvZW1lbiA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI5OGVhZmRmNWZiZjdkOGFhIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPs+ALmNvbT4KICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICogbWFyayBpdCBgZXh0ZXJuYWxgLgogKi8KY29udHJhY3QgUmVlbnRyYW5jeUd1YXJkIHsKCiAgLyoqCiAgICogQGRldiBXZSB1c2UgYSBzaW5nbGUgbG9jayBmb3IgdGhlIHdob2xlIGNvbnRyYWN0LgogICAqLwogIGJvb2wgcHJpdmF0ZSByZWVudHJhbmN5X2xvY2sgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBQcmV2ZW50cyBhIGNvbnRyYWN0IGZyb20gY2FsbGluZyBpdHNlbGYsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkuCiAgICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICAgKiBtYXJrIGl0IGBleHRlcm5hbGAuIENhbGxpbmcgb25lIG5vblJlZW50cmFudCBmdW5jdGlvbiBmcm9tCiAgICogYW5vdGhlciBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCB5b3UgY2FuIGltcGxlbWVudCBhCiAgICogYHByaXZhdGVgIGZ1bmN0aW9uIGRvaW5nIHRoZSBhY3R1YWwgd29yaywgYW5kIGEgYGV4dGVybmFsYAogICAqIHdyYXBwZXIgbWFya2VkIGFzIGBub25SZWVudHJhbnRgLgogICAqLwogIG1vZGlmaWVyIG5vblJlZW50cmFudCgpIHsKICAgIHJlcXVpcmUoIXJlZW50cmFuY3lfbG9jayk7CiAgICByZWVudHJhbmN5X2xvY2sgPSB0cnVlOwogICAgXzsKICAgIHJlZW50cmFuY3lfbG9jayA9IGZhbHNlOwogIH0KCn0KCmNvbnRyYWN0IEV0aGVyeSBpcyBQYXVzYWJsZSwgUmVlbnRyYW5jeUd1YXJkewogIGV2ZW50IE5ld0JldCh1aW50IGlkLCBhZGRyZXNzIHBsYXllciwgdWludCB3YWdlciwgdWludCB0YXJnZXRCbG9jayk7CiAgZXZlbnQgQmV0UmVzb2x2ZWQodWludCBpZCwgQmV0U3RhdHVzIHN0YXR1cyk7CiAgCiAgYnl0ZXMzMiBjb25zdGFudCBieXRlTWFzayA9IGJ5dGVzMzIoMHhGKTsKCiAgZW51bSBCZXRTdGF0dXMgeyBQZW5kaW5nLCBQbGF5ZXJXb24sIEhvdXNlV29uLCBSZWZ1bmRlZCB9CiAgCiAgc3RydWN0IEJldCB7CiAgICBhZGRyZXNzIHBsYXllcjsKICAgIHVpbnQgd2FnZXI7CiAgICB1aW50IGRpZ2l0czsKICAgIGJ5dGVzMzIgZ3Vlc3M7CiAgICBCZXRTdGF0dXMgc3RhdHVzOwogICAgdWludCB0YXJnZXRCbG9jazsKICB9CiAgCiAgQmV0W10gcHVibGljIGJldHM7CiAgCiAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgYmV0VG9Pd25lcjsKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIG93bmVyQmV0Q291bnQ7CiAgCiAgdWludCByZXNvbHZlckZlZSA9IDAuMSBmaW5uZXk7CiAgdWludCBtYXhQYXlvdXQgPSAxIGV0aGVyOwogIHVpbnQgcGVuZGluZ1BheTsKICAKICBmdW5jdGlvbiBzZXRSZXNvbHZlckZlZSh1aW50IF9yZXNvbHZlckZlZSkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHJlc29sdmVyRmVlID0gX3Jlc29sdmVyRmVlOwogIH0KICAKICBmdW5jdGlvbiBnZXRSZXNvbHZlckZlZSgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludCl7CiAgICByZXR1cm4gcmVzb2x2ZXJGZWU7CiAgfQogIAogIGZ1bmN0aW9uIHNldE1heFBheW91dCh1aW50IF9tYXhQYXlvdXQpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICBtYXhQYXlvdXQgPSBfbWF4UGF5b3V0OwogIH0KCiAgZnVuY3Rpb24gZ2V0TWF4UGF5b3V0KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KXsKICAgIHJldHVybiBtYXhQYXlvdXQ7CiAgfQogIAogIGZ1bmN0aW9uIHdpdGhEcmF3KHVpbnQgX2Ftb3VudCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIHJlcXVpcmUoX2Ftb3VudCA8IHRoaXMuYmFsYW5jZSAtIHBlbmRpbmdQYXkpOwogICAgbXNnLnNlbmRlci50cmFuc2ZlcihfYW1vdW50KTsKICB9CiAgCiAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUge30KICAKICBmdW5jdGlvbiBjcmVhdGVCZXQodWludCBfZGlnaXRzLCBieXRlczMyIF9ndWVzcywgdWludCBfdGFyZ2V0QmxvY2spIHB1YmxpYyBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgewogICAgcmVxdWlyZSgKICAgICAgbXNnLnZhbHVlID49IHJlc29sdmVyRmVlICYmCiAgICAgIF90YXJnZXRCbG9jayA+IGJsb2NrLm51bWJlciAmJgogICAgICBibG9jay5udW1iZXIgKyAyNTYgPj0gX3RhcmdldEJsb2NrICYmCiAgICAgIHBheW91dChtc2cudmFsdWUsIF9kaWdpdHMpIDw9IG1heFBheW91dCAmJgogICAgICBwYXlvdXQobXNnLnZhbHVlLCBfZGlnaXRzKSA8PSB0aGlzLmJhbGFuY2UgLSBwZW5kaW5nUGF5CiAgICApOwogICAgdWludCBpZCA9IGJldHMucHVzaChCZXQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCBfZGlnaXRzLCBfZ3Vlc3MsIEJldFN0YXR1cy5QZW5kaW5nLCBfdGFyZ2V0QmxvY2spKSAtIDE7CiAgICBiZXRUb093bmVyW2lkXSA9IG1zZy5zZW5kZXI7CiAgICBvd25lckJldENvdW50W21zZy5zZW5kZXJdKys7CiAgICBwZW5kaW5nUGF5ICs9IHBheW91dChtc2cudmFsdWUsIF9kaWdpdHMpOwogICAgTmV3QmV0KGlkLCBtc2cuc2VuZGVyLCBtc2cudmFsdWUsIF90YXJnZXRCbG9jayk7CiAgfQogIAogIGZ1bmN0aW9uIHJlc29sdmVCZXQodWludCBfYmV0SWQpIHB1YmxpYyBub25SZWVudHJhbnQgewogICAgQmV0IHN0b3JhZ2UgbXlCZXQgPSBiZXRzW19iZXRJZF07ICAKICAgIHJlcXVpcmUoCiAgICAgIG15QmV0LnN0YXR1cyA9PSBCZXRTdGF0dXMuUGVuZGluZyAmJiAgICAvLyBvbmx5IHJlc29sdmUgcGVuZGluZyBiZXRzCiAgICAgIG15QmV0LnRhcmdldEJsb2NrIDwgYmxvY2subnVtYmVyICAgICAgICAvLyBvbmx5IHJlc29sdmUgdGFyZ2V0QmxvY2sgPiBjdXJyZW50IGJsb2NrCiAgICApOwogICAgCiAgICBwZW5kaW5nUGF5IC09IHBheW91dChteUJldC53YWdlciwgdWludChteUJldC5kaWdpdHMpKTsKICAgIAogICAgaWYgKG15QmV0LnRhcmdldEJsb2NrICsgMjU1IDwgYmxvY2subnVtYmVyKSB7ICAgIC8vIHRvbyBsYXRlIHRvIGRldGVybWluZSBvdXQgY29tZSBpc3N1ZSByZWZ1bmQKICAgICAgbXlCZXQuc3RhdHVzID0gQmV0U3RhdHVzLlJlZnVuZGVkOwogICAgICBiZXRUb093bmVyW19iZXRJZF0udHJhbnNmZXIobXlCZXQud2FnZXIpOwogICAgfSBlbHNlIHsKICAgICAgYnl0ZXMzMiB0YXJnZXRCbG9ja0hhc2ggPSBibG9jay5ibG9ja2hhc2gobXlCZXQudGFyZ2V0QmxvY2spOwogICAgICBpZiAoaXNDb3JyZWN0R3Vlc3ModGFyZ2V0QmxvY2tIYXNoLCBteUJldC5ndWVzcywgdWludChteUJldC5kaWdpdHMpKSkgewogICAgICAgIG15QmV0LnN0YXR1cyA9IEJldFN0YXR1cy5QbGF5ZXJXb247CiAgICAgICAgYmV0VG9Pd25lcltfYmV0SWRdLnRyYW5zZmVyKHBheW91dChteUJldC53YWdlciwgdWludChteUJldC5kaWdpdHMpKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbXlCZXQuc3RhdHVzID0gQmV0U3RhdHVzLkhvdXNlV29uOwogICAgICB9CiAgICB9CiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlc29sdmVyRmVlKTsKICAgIEJldFJlc29sdmVkKF9iZXRJZCwgbXlCZXQuc3RhdHVzKTsKICB9CiAgCiAgZnVuY3Rpb24gaXNDb3JyZWN0R3Vlc3MoYnl0ZXMzMiBfYmxvY2tIYXNoLCBieXRlczMyIF9ndWVzcywgdWludCBfZGlnaXRzKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB1aW50KF9kaWdpdHMpOyBpKyspIHsKICAgICAgaWYgKGJ5dGVNYXNrICYgX2d1ZXNzICE9IF9ibG9ja0hhc2ggJiBieXRlTWFzaykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBfYmxvY2tIYXNoID0gX2Jsb2NrSGFzaCA+PiA0OwogICAgICBfZ3Vlc3MgPSBfZ3Vlc3MgPj4gNDsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KICAKICBmdW5jdGlvbiBwYXlvdXQodWludCBfd2FnZXIsIHVpbnQgX2RpZ2l0cykgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgdWludCBiYXNlV2FnZXIgPSAoMTAwIC0gaG91c2VGZWUoX2RpZ2l0cykpICogKF93YWdlciAtIHJlc29sdmVyRmVlKSAvIDEwMDsKICAgIHJldHVybiBiYXNlV2FnZXIgKiAxNiAqKiBfZGlnaXRzOwogIH0KICAKICBmdW5jdGlvbiBob3VzZUZlZSh1aW50IF9kaWdpdHMpIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQpIHsgICAgLy8gaW4gcGVyY2VudAogICAgcmVxdWlyZSgwIDwgX2RpZ2l0cyAmJiBfZGlnaXRzIDw9IDQpOwogICAgaWYgKF9kaWdpdHMgPT0gMSkgeyByZXR1cm4gMjsgfQogICAgZWxzZSBpZihfZGlnaXRzID09IDIpIHsgcmV0dXJuIDM7IH0KICAgIGVsc2UgaWYoX2RpZ2l0cyA9PSAzKSB7IHJldHVybiA0OyB9CiAgICBlbHNlIHsgcmV0dXJuIDU7IH0KICB9CiAgCiAgZnVuY3Rpb24gZ2V0QmV0KHVpbnQgaW5kZXgpIHB1YmxpYyB2aWV3IHJldHVybnMoYWRkcmVzcywgdWludCwgdWludCwgYnl0ZXMzMiwgQmV0U3RhdHVzLCB1aW50KSB7CiAgICByZXR1cm4gKGJldHNbaW5kZXhdLnBsYXllciwgYmV0c1tpbmRleF0ud2FnZXIsIGJldHNbaW5kZXhdLmRpZ2l0cywgYmV0c1tpbmRleF0uZ3Vlc3MsIGJldHNbaW5kZXhdLnN0YXR1cywgYmV0c1tpbmRleF0udGFyZ2V0QmxvY2spOwogIH0KICAKICBmdW5jdGlvbiBnZXRQbGF5ZXJCZXRzKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnRbXSkgewogICAgcmV0dXJuIGdldEJldHNCeU93bmVyKG1zZy5zZW5kZXIpOyAgCiAgfQogIAogIGZ1bmN0aW9uIGdldEJldHNCeU93bmVyKGFkZHJlc3MgX293bmVyKSBwcml2YXRlIHZpZXcgcmV0dXJucyh1aW50W10pIHsKICAgIHVpbnRbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnRbXShvd25lckJldENvdW50W19vd25lcl0pOwogICAgdWludCBjb3VudGVyID0gMDsKICAgIGZvciAodWludCBpID0gMDsgaSA8IGJldHMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKGJldFRvT3duZXJbaV0gPT0gX293bmVyKSB7CiAgICAgICAgcmVzdWx0W2NvdW50ZXJdID0gaTsKICAgICAgICBjb3VudGVyKys7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIAogIGZ1bmN0aW9uIGdldFRvdGFsV2lucygpIGV4dGVybmFsIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICB1aW50IHBheXMgPSAwOwogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYmV0cy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoYmV0c1tpXS5zdGF0dXMgPT0gQmV0U3RhdHVzLlBsYXllcldvbikgewogICAgICAgIHBheXMgKz0gcGF5b3V0KGJldHNbaV0ud2FnZXIsIGJldHNbaV0uZGlnaXRzKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBheXM7CiAgfQoKICBmdW5jdGlvbiByZWNlbnRXaW5uZXJzKCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnRbXSkgewogICAgdWludCBsZW4gPSA1OwogICAgdWludFtdIG1lbW9yeSByZXN1bHQgPSBuZXcgdWludFtdKGxlbik7CiAgICB1aW50IGNvdW50ZXIgPSAwOwoKICAgIGZvciAodWludCBpID0gMTsgaSA8PSBiZXRzLmxlbmd0aCAmJiBjb3VudGVyIDwgbGVuOyBpKyspIHsKICAgICAgaWYgKGJldHNbYmV0cy5sZW5ndGggLSBpXS5zdGF0dXMgPT0gQmV0U3RhdHVzLlBsYXllcldvbikgewogICAgICAgIHJlc3VsdFtjb3VudGVyXSA9IGJldHMubGVuZ3RoIC0gaTsKICAgICAgICBjb3VudGVyKys7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQoKfQ=='.
	

]
