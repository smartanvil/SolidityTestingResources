Class {
	#name : #SRTc4575b61286053c0ac362f70cdaa17becd90aacb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4575b61286053c0ac362f70cdaa17becd90aacb >> base64 [
	^ ''.
	

]
