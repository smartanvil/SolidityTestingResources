Class {
	#name : #SRT88e2cc7cec1ac2f0d004e85179cad944c3853aec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT88e2cc7cec1ac2f0d004e85179cad944c3853aec >> base64 [
	^ ''.
	

]
