Class {
	#name : #SRT55fc04a73f058832b4f3498dc83ceb6e53a9e314,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55fc04a73f058832b4f3498dc83ceb6e53a9e314 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4gCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCkgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4gCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyByZXF1aXJlIChfdmFsdWUgPD0gX2FsbG93YW5jZSk7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgovKioKICogQHRpdGxlIFB1bGxQYXltZW50CiAqIEBkZXYgQmFzZSBjb250cmFjdCBzdXBwb3J0aW5nIGFzeW5jIHNlbmQgZm9yIHB1bGwgcGF5bWVudHMuIEluaGVyaXQgZnJvbSB0aGlzCiAqIGNvbnRyYWN0IGFuZCB1c2UgYXN5bmNTZW5kIGluc3RlYWQgb2Ygc2VuZC4KICovCmNvbnRyYWN0IFB1bGxQYXltZW50IHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBwYXltZW50czsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFBheW1lbnRzOwoKICAvKioKICAqIEBkZXYgQ2FsbGVkIGJ5IHRoZSBwYXllciB0byBzdG9yZSB0aGUgc2VudCBhbW91bnQgYXMgY3JlZGl0IHRvIGJlIHB1bGxlZC4KICAqIEBwYXJhbSBkZXN0IFRoZSBkZXN0aW5hdGlvbiBhZGRyZXNzIG9mIHRoZSBmdW5kcy4KICAqIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCB0byB0cmFuc2Zlci4KICAqLwogIGZ1bmN0aW9uIGFzeW5jU2VuZChhZGRyZXNzIGRlc3QsIHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICBwYXltZW50c1tkZXN0XSA9IHBheW1lbnRzW2Rlc3RdLmFkZChhbW91bnQpOwogICAgdG90YWxQYXltZW50cyA9IHRvdGFsUGF5bWVudHMuYWRkKGFtb3VudCk7CiAgfQoKICAvKioKICAqIEBkZXYgd2l0aGRyYXcgYWNjdW11bGF0ZWQgYmFsYW5jZSwgY2FsbGVkIGJ5IHBheWVlLgogICovCiAgZnVuY3Rpb24gd2l0aGRyYXdQYXltZW50cygpIHsKICAgIGFkZHJlc3MgcGF5ZWUgPSBtc2cuc2VuZGVyOwogICAgdWludDI1NiBwYXltZW50ID0gcGF5bWVudHNbcGF5ZWVdOwoKICAgIHJlcXVpcmUocGF5bWVudCAhPSAwKTsKICAgIHJlcXVpcmUodGhpcy5iYWxhbmNlID49IHBheW1lbnQpOwoKICAgIHRvdGFsUGF5bWVudHMgPSB0b3RhbFBheW1lbnRzLnN1YihwYXltZW50KTsKICAgIHBheW1lbnRzW3BheWVlXSA9IDA7CgogICAgYXNzZXJ0KHBheWVlLnNlbmQocGF5bWVudCkpOwogIH0KfQoKY29udHJhY3QgVHJpdmlhbFRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFB1bGxQYXltZW50IHsKICAgIC8vQ29uc3RhbnRzCiAgICB1aW50OCBjb25zdGFudCBERUNJTUFMUyA9IDA7CiAgICB1aW50MjU2IGNvbnN0YW50IE1JTl9FVEhfQU1PVU5UID0gMC4wMDUgZXRoZXI7CiAgICB1aW50MjU2IGNvbnN0YW50IE1JTl9CSURfUEVSQ0VOVEFHRSA9IDEwOwogICAgdWludDI1NiBjb25zdGFudCBUT1RBTF9TVVBQTFkgPSAxMDAwMDAwOwogICAgdWludDI1NiBjb25zdGFudCBUT0tFTlNfUEVSQ0VOVEFHRV9GT1JfS0VZX0hPTERFUiA9IDI1OwogICAgdWludDI1NiBjb25zdGFudCBDTEVBTlVQX0RFTEFZID0gMTgwIGRheXM7CiAgICB1aW50MjU2IGNvbnN0YW50IEZSRUVfUEVSSU9EX0RVUkFUSU9OID0gNjAgZGF5czsKCiAgICAvL0Jhc2ljCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vQWNjb3VudHMKICAgIGFkZHJlc3MgcHVibGljIGFydGlzdDsKICAgIGFkZHJlc3MgcHVibGljIHRyaXZpYWw7CgogICAgLy9UaW1lIGluZm9ybWF0aW9uCiAgICB1aW50MjU2IHB1YmxpYyBpY29EdXJhdGlvbjsKICAgIHVpbnQyNTYgcHVibGljIGljb0VuZFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBhdWN0aW9uRHVyYXRpb247CiAgICB1aW50MjU2IHB1YmxpYyBhdWN0aW9uRW5kVGltZTsKICAgIHVpbnQyNTYgcHVibGljIGZyZWVQZXJpb2RFbmRUaW1lOwoKICAgIC8vVG9rZW4gaW5mb3JtYXRpb24KICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc0ZvckFydGlzdDsKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc0ZvclRyaXZpYWw7CiAgICB1aW50MjU2IHB1YmxpYyB0b2tlbnNGb3JJY287CgogICAgLy9JQ08gYW5kIGF1Y3Rpb24gcmVzdWx0cwogICAgdWludDI1NiBwdWJsaWMgYW1vdW50UmFpc2VkOwogICAgYWRkcmVzcyBwdWJsaWMgaGlnaGVzdEJpZGRlcjsKICAgIHVpbnQyNTYgcHVibGljIGhpZ2hlc3RCaWQ7CiAgICBieXRlczMyIHB1YmxpYyBhdWN0aW9uV2lubmVyTWVzc2FnZUhhc2g7CiAgICB1aW50MjU2IHB1YmxpYyBuZXh0Q29udHJpYnV0b3JJbmRleFRvQmVHaXZlblRva2VuczsKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc0Rpc3RyaWJ1dGVkVG9Db250cmlidXRvcnM7CgogICAgLy9FdmVudHMKICAgIGV2ZW50IEljb1N0YXJ0ZWQodWludDI1NiBpY29FbmRUaW1lKTsKICAgIGV2ZW50IEljb0NvbnRyaWJ1dGVkKGFkZHJlc3MgY29udHJpYnV0b3IsIHVpbnQyNTYgYW1vdW50Q29udHJpYnV0ZWQsIHVpbnQyNTYgYW1vdW50UmFpc2VkKTsKICAgIGV2ZW50IEljb0ZpbmlzaGVkKHVpbnQyNTYgYW1vdW50UmFpc2VkKTsKICAgIGV2ZW50IEljb0NhbmNlbGxlZCgpOwogICAgZXZlbnQgQXVjdGlvblN0YXJ0ZWQodWludDI1NiBhdWN0aW9uRW5kVGltZSk7CiAgICBldmVudCBIaWdoZXN0QmlkQ2hhbmdlZChhZGRyZXNzIGhpZ2hlc3RCaWRkZXIsIHVpbnQyNTYgaGlnaGVzdEJpZCk7CiAgICBldmVudCBBdWN0aW9uRmluaXNoZWQoYWRkcmVzcyBoaWdoZXN0QmlkZGVyLCB1aW50MjU2IGhpZ2hlc3RCaWQpOwogICAgZXZlbnQgV2lubmVyUHJvdmlkZWRIYXNoKCk7CgogICAgLy9TdGF0ZQogICAgZW51bSBTdGF0ZSB7IENyZWF0ZWQsIEljb1N0YXJ0ZWQsIEljb0ZpbmlzaGVkLCBBdWN0aW9uU3RhcnRlZCwgQXVjdGlvbkZpbmlzaGVkLCBJY29DYW5jZWxsZWQgfQogICAgU3RhdGUgcHVibGljIGN1cnJlbnRTdGF0ZTsKCiAgICAvL0l0ZW0gZGVzY3JpcHRpb24KICAgIHN0cnVjdCBEZXNjcmlwdGlvbkhhc2ggewogICAgICAgIGJ5dGVzMzIgZGVzY3JpcHRpb25IYXNoOwogICAgICAgIHVpbnQyNTYgdGltZXN0YW1wOwogICAgfQogICAgRGVzY3JpcHRpb25IYXNoIHB1YmxpYyBkZXNjcmlwdGlvbkhhc2g7CiAgICBEZXNjcmlwdGlvbkhhc2hbXSBwdWJsaWMgZGVzY3JpcHRpb25IYXNoSGlzdG9yeTsKCiAgICAvL1Rva2VuIGNvbnRyaWJ1dG9ycyBhbmQgaG9sZGVycwogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBjb250cmlidXRpb25zOwogICAgYWRkcmVzc1tdIHB1YmxpYyBjb250cmlidXRvcnM7CgogICAgLy9Nb2RpZmlmZXJzCiAgICBtb2RpZmllciBvbmx5SW5TdGF0ZShTdGF0ZSBleHBlY3RlZFN0YXRlKSB7IHJlcXVpcmUoZXhwZWN0ZWRTdGF0ZSA9PSBjdXJyZW50U3RhdGUpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5QmVmb3JlKHVpbnQyNTYgX3RpbWUpIHsgcmVxdWlyZShub3cgPCBfdGltZSk7IF87IH0KICAgIG1vZGlmaWVyIG9ubHlBZnRlcih1aW50MjU2IF90aW1lKSB7IHJlcXVpcmUobm93ID4gX3RpbWUpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5VHJpdmlhbCgpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IHRyaXZpYWwpOyBfOyB9CiAgICBtb2RpZmllciBvbmx5QXJ0aXN0KCkgeyByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYXJ0aXN0KTsgXzsgfQogICAgbW9kaWZpZXIgb25seUF1Y3Rpb25XaW5uZXIoKSB7CiAgICAgICAgcmVxdWlyZShjdXJyZW50U3RhdGUgPT0gU3RhdGUuQXVjdGlvbkZpbmlzaGVkKTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gaGlnaGVzdEJpZGRlcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBUcml2aWFsVG9rZW4oCiAgICAgICAgc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwKICAgICAgICB1aW50MjU2IF9pY29EdXJhdGlvbiwgdWludDI1NiBfYXVjdGlvbkR1cmF0aW9uLAogICAgICAgIGFkZHJlc3MgX2FydGlzdCwgYWRkcmVzcyBfdHJpdmlhbCwKICAgICAgICB1aW50MjU2IF90b2tlbnNGb3JBcnRpc3QsCiAgICAgICAgdWludDI1NiBfdG9rZW5zRm9yVHJpdmlhbCwKICAgICAgICB1aW50MjU2IF90b2tlbnNGb3JJY28sCiAgICAgICAgYnl0ZXMzMiBfZGVzY3JpcHRpb25IYXNoCiAgICApIHsKICAgICAgICAvKnJlcXVpcmUoCiAgICAgICAgICAgIFRPVEFMX1NVUFBMWSA9PSBTYWZlTWF0aC5hZGQoCiAgICAgICAgICAgICAgICBfdG9rZW5zRm9yQXJ0aXN0LAogICAgICAgICAgICAgICAgU2FmZU1hdGguYWRkKF90b2tlbnNGb3JUcml2aWFsLCBfdG9rZW5zRm9ySWNvKQogICAgICAgICAgICApCiAgICAgICAgKTsqLwogICAgICAgIHJlcXVpcmUoTUlOX0JJRF9QRVJDRU5UQUdFIDwgMTAwKTsKICAgICAgICByZXF1aXJlKFRPS0VOU19QRVJDRU5UQUdFX0ZPUl9LRVlfSE9MREVSIDwgMTAwKTsKCiAgICAgICAgbmFtZSA9IF9uYW1lOwogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7CiAgICAgICAgZGVjaW1hbHMgPSBERUNJTUFMUzsKCiAgICAgICAgaWNvRHVyYXRpb24gPSBfaWNvRHVyYXRpb247CiAgICAgICAgYXVjdGlvbkR1cmF0aW9uID0gX2F1Y3Rpb25EdXJhdGlvbjsKICAgICAgICBhcnRpc3QgPSBfYXJ0aXN0OwogICAgICAgIHRyaXZpYWwgPSBfdHJpdmlhbDsKCiAgICAgICAgdG9rZW5zRm9yQXJ0aXN0ID0gX3Rva2Vuc0ZvckFydGlzdDsKICAgICAgICB0b2tlbnNGb3JUcml2aWFsID0gX3Rva2Vuc0ZvclRyaXZpYWw7CiAgICAgICAgdG9rZW5zRm9ySWNvID0gX3Rva2Vuc0ZvckljbzsKCiAgICAgICAgZGVzY3JpcHRpb25IYXNoID0gRGVzY3JpcHRpb25IYXNoKF9kZXNjcmlwdGlvbkhhc2gsIG5vdyk7CiAgICAgICAgY3VycmVudFN0YXRlID0gU3RhdGUuQ3JlYXRlZDsKICAgIH0KCiAgICAvKgogICAgICAgIElDTyBtZXRob2RzCiAgICAqLwogICAgZnVuY3Rpb24gc3RhcnRJY28oKQogICAgb25seUluU3RhdGUoU3RhdGUuQ3JlYXRlZCkKICAgIG9ubHlUcml2aWFsKCkgewogICAgICAgIGljb0VuZFRpbWUgPSBTYWZlTWF0aC5hZGQobm93LCBpY29EdXJhdGlvbik7CiAgICAgICAgZnJlZVBlcmlvZEVuZFRpbWUgPSBTYWZlTWF0aC5hZGQoaWNvRW5kVGltZSwgRlJFRV9QRVJJT0RfRFVSQVRJT04pOwogICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkljb1N0YXJ0ZWQ7CiAgICAgICAgSWNvU3RhcnRlZChpY29FbmRUaW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb250cmlidXRlSW5JY28oKSBwYXlhYmxlCiAgICBvbmx5SW5TdGF0ZShTdGF0ZS5JY29TdGFydGVkKQogICAgb25seUJlZm9yZShpY29FbmRUaW1lKSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiBNSU5fRVRIX0FNT1VOVCk7CgogICAgICAgIGlmIChjb250cmlidXRpb25zW21zZy5zZW5kZXJdID09IDApIHsKICAgICAgICAgICAgY29udHJpYnV0b3JzLnB1c2gobXNnLnNlbmRlcik7CiAgICAgICAgfQogICAgICAgIGNvbnRyaWJ1dGlvbnNbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5hZGQoY29udHJpYnV0aW9uc1ttc2cuc2VuZGVyXSwgbXNnLnZhbHVlKTsKICAgICAgICBhbW91bnRSYWlzZWQgPSBTYWZlTWF0aC5hZGQoYW1vdW50UmFpc2VkLCBtc2cudmFsdWUpOwoKICAgICAgICBJY29Db250cmlidXRlZChtc2cuc2VuZGVyLCBtc2cudmFsdWUsIGFtb3VudFJhaXNlZCk7CiAgICB9CgogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZVRva2Vucyh1aW50MjU2IGNvbnRyaWJ1dG9yc051bWJlcikKICAgIG9ubHlJblN0YXRlKFN0YXRlLkljb1N0YXJ0ZWQpCiAgICBvbmx5QWZ0ZXIoaWNvRW5kVGltZSkgewogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGNvbnRyaWJ1dG9yc051bWJlciAmJiBuZXh0Q29udHJpYnV0b3JJbmRleFRvQmVHaXZlblRva2VucyA8IGNvbnRyaWJ1dG9ycy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICBhZGRyZXNzIGN1cnJlbnRDb250cmlidXRvciA9IGNvbnRyaWJ1dG9yc1tuZXh0Q29udHJpYnV0b3JJbmRleFRvQmVHaXZlblRva2VucysrXTsKICAgICAgICAgICAgdWludDI1NiB0b2tlbnNGb3JDb250cmlidXRvciA9IFNhZmVNYXRoLmRpdigKICAgICAgICAgICAgICAgIFNhZmVNYXRoLm11bCh0b2tlbnNGb3JJY28sIGNvbnRyaWJ1dGlvbnNbY3VycmVudENvbnRyaWJ1dG9yXSksCiAgICAgICAgICAgICAgICBhbW91bnRSYWlzZWQgIC8vIGFtb3VudFJhaXNlZCBjYW4ndCBiZSAwLCBJQ08gaXMgY2FuY2VsbGVkIHRoZW4KICAgICAgICAgICAgKTsKICAgICAgICAgICAgYmFsYW5jZXNbY3VycmVudENvbnRyaWJ1dG9yXSA9IHRva2Vuc0ZvckNvbnRyaWJ1dG9yOwogICAgICAgICAgICB0b2tlbnNEaXN0cmlidXRlZFRvQ29udHJpYnV0b3JzID0gU2FmZU1hdGguYWRkKHRva2Vuc0Rpc3RyaWJ1dGVkVG9Db250cmlidXRvcnMsIHRva2Vuc0ZvckNvbnRyaWJ1dG9yKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZmluaXNoSWNvKCkKICAgIG9ubHlJblN0YXRlKFN0YXRlLkljb1N0YXJ0ZWQpCiAgICBvbmx5QWZ0ZXIoaWNvRW5kVGltZSkgewogICAgICAgIGlmIChhbW91bnRSYWlzZWQgPT0gMCkgewogICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBTdGF0ZS5JY29DYW5jZWxsZWQ7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIGFsbCBjb250cmlidXRvcnMgbXVzdCBoYXZlIHJlY2VpdmVkIHRoZWlyIHRva2VucyB0byBmaW5pc2ggSUNPCiAgICAgICAgcmVxdWlyZShuZXh0Q29udHJpYnV0b3JJbmRleFRvQmVHaXZlblRva2VucyA+PSBjb250cmlidXRvcnMubGVuZ3RoKTsKCiAgICAgICAgYmFsYW5jZXNbYXJ0aXN0XSA9IFNhZmVNYXRoLmFkZChiYWxhbmNlc1thcnRpc3RdLCB0b2tlbnNGb3JBcnRpc3QpOwogICAgICAgIGJhbGFuY2VzW3RyaXZpYWxdID0gU2FmZU1hdGguYWRkKGJhbGFuY2VzW3RyaXZpYWxdLCB0b2tlbnNGb3JUcml2aWFsKTsKICAgICAgICB1aW50MjU2IGxlZnRvdmVycyA9IFNhZmVNYXRoLnN1Yih0b2tlbnNGb3JJY28sIHRva2Vuc0Rpc3RyaWJ1dGVkVG9Db250cmlidXRvcnMpOwogICAgICAgIGJhbGFuY2VzW2FydGlzdF0gPSBTYWZlTWF0aC5hZGQoYmFsYW5jZXNbYXJ0aXN0XSwgbGVmdG92ZXJzKTsKCiAgICAgICAgaWYgKCFhcnRpc3Quc2VuZCh0aGlzLmJhbGFuY2UpKSB7CiAgICAgICAgICAgIGFzeW5jU2VuZChhcnRpc3QsIHRoaXMuYmFsYW5jZSk7CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkljb0ZpbmlzaGVkOwogICAgICAgIEljb0ZpbmlzaGVkKGFtb3VudFJhaXNlZCk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tDb250cmlidXRpb24oYWRkcmVzcyBjb250cmlidXRvcikgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBjb250cmlidXRpb25zW2NvbnRyaWJ1dG9yXTsKICAgIH0KCiAgICAvKgogICAgICAgIEF1Y3Rpb24gbWV0aG9kcwogICAgKi8KICAgIGZ1bmN0aW9uIGNhblN0YXJ0QXVjdGlvbigpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIGlzQXJ0aXN0ID0gbXNnLnNlbmRlciA9PSBhcnRpc3Q7CiAgICAgICAgYm9vbCBpc0tleUhvbGRlciA9IGJhbGFuY2VzW21zZy5zZW5kZXJdID49IFNhZmVNYXRoLmRpdigKICAgICAgICBTYWZlTWF0aC5tdWwoVE9UQUxfU1VQUExZLCBUT0tFTlNfUEVSQ0VOVEFHRV9GT1JfS0VZX0hPTERFUiksIDEwMCk7CiAgICAgICAgcmV0dXJuIGlzQXJ0aXN0IHx8IGlzS2V5SG9sZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHN0YXJ0QXVjdGlvbigpCiAgICBvbmx5QWZ0ZXIoZnJlZVBlcmlvZEVuZFRpbWUpCiAgICBvbmx5SW5TdGF0ZShTdGF0ZS5JY29GaW5pc2hlZCkgewogICAgICAgIHJlcXVpcmUoY2FuU3RhcnRBdWN0aW9uKCkpOwoKICAgICAgICAvLyAxMDAlIHRva2VucyBvd25lciBpcyB0aGUgb25seSBrZXkgaG9sZGVyCiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID09IFRPVEFMX1NVUFBMWSkgewogICAgICAgICAgICAvLyBubyBhdWN0aW9uIHRha2VzIHBsYWNlLAogICAgICAgICAgICBoaWdoZXN0QmlkZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgY3VycmVudFN0YXRlID0gU3RhdGUuQXVjdGlvbkZpbmlzaGVkOwogICAgICAgICAgICBBdWN0aW9uRmluaXNoZWQoaGlnaGVzdEJpZGRlciwgaGlnaGVzdEJpZCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGF1Y3Rpb25FbmRUaW1lID0gU2FmZU1hdGguYWRkKG5vdywgYXVjdGlvbkR1cmF0aW9uKTsKICAgICAgICBjdXJyZW50U3RhdGUgPSBTdGF0ZS5BdWN0aW9uU3RhcnRlZDsKICAgICAgICBBdWN0aW9uU3RhcnRlZChhdWN0aW9uRW5kVGltZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYmlkSW5BdWN0aW9uKCkgcGF5YWJsZQogICAgb25seUluU3RhdGUoU3RhdGUuQXVjdGlvblN0YXJ0ZWQpCiAgICBvbmx5QmVmb3JlKGF1Y3Rpb25FbmRUaW1lKSB7CiAgICAgICAgLy9NdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gbWluaW1hbCBhbW91bnQKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBNSU5fRVRIX0FNT1VOVCk7CiAgICAgICAgdWludDI1NiBiaWQgPSBjYWxjdWxhdGVVc2VyQmlkKCk7CgogICAgICAgIC8vSWYgdGhlcmUgd2FzIGEgYmlkIGFscmVhZHkKICAgICAgICBpZiAoaGlnaGVzdEJpZCA+PSBNSU5fRVRIX0FNT1VOVCkgewogICAgICAgICAgICAvL011c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byAxMDUlIG9mIHByZXZpb3VzIGJpZAogICAgICAgICAgICB1aW50MjU2IG1pbmltYWxPdmVyQmlkID0gU2FmZU1hdGguYWRkKGhpZ2hlc3RCaWQsIFNhZmVNYXRoLmRpdigKICAgICAgICAgICAgICAgIFNhZmVNYXRoLm11bChoaWdoZXN0QmlkLCBNSU5fQklEX1BFUkNFTlRBR0UpLCAxMDAKICAgICAgICAgICAgKSk7CiAgICAgICAgICAgIHJlcXVpcmUoYmlkID49IG1pbmltYWxPdmVyQmlkKTsKICAgICAgICAgICAgLy9SZXR1cm4gdG8gcHJldmlvdXMgYmlkZGVyIGhpcyBiYWxhbmNlCiAgICAgICAgICAgIC8vVmFsdWUgdG8gcmV0dXJuOiBjdXJyZW50IGJhbGFuY2UgLSBjdXJyZW50IGJpZCAtIHBheW1lbnRzSW5Bc3luY1NlbmQKICAgICAgICAgICAgdWludDI1NiBhbW91bnRUb1JldHVybiA9IFNhZmVNYXRoLnN1YihTYWZlTWF0aC5zdWIoCiAgICAgICAgICAgICAgICB0aGlzLmJhbGFuY2UsIG1zZy52YWx1ZQogICAgICAgICAgICApLCB0b3RhbFBheW1lbnRzKTsKICAgICAgICAgICAgaWYgKCFoaWdoZXN0QmlkZGVyLnNlbmQoYW1vdW50VG9SZXR1cm4pKSB7CiAgICAgICAgICAgICAgICBhc3luY1NlbmQoaGlnaGVzdEJpZGRlciwgYW1vdW50VG9SZXR1cm4pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBoaWdoZXN0QmlkZGVyID0gbXNnLnNlbmRlcjsKICAgICAgICBoaWdoZXN0QmlkID0gYmlkOwogICAgICAgIEhpZ2hlc3RCaWRDaGFuZ2VkKGhpZ2hlc3RCaWRkZXIsIGhpZ2hlc3RCaWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVVzZXJCaWQoKSBwcml2YXRlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGJpZCA9IG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IGNvbnRyaWJ1dGlvbiA9IGJhbGFuY2VPZihtc2cuc2VuZGVyKTsKICAgICAgICBpZiAoY29udHJpYnV0aW9uID4gMCkgewogICAgICAgICAgICAvL0Zvcm11bGE6IChzZW50RVRIICogYWxsVG9rZW5zKSAvIChhbGxUb2tlbnMgLSB1c2VyVG9rZW5zKQogICAgICAgICAgICAvL1VzZXIgc2VuZHMgMTZFVEgsIGhhcyA0MCBvZiAyMDAgdG9rZW5zCiAgICAgICAgICAgIC8vKDE2ICogMjAwKSAvICgyMDAgLSA0MCkgPT4gMzIwMCAvIDE2MCA9PiAyMAogICAgICAgICAgICBiaWQgPSBTYWZlTWF0aC5kaXYoCiAgICAgICAgICAgICAgICBTYWZlTWF0aC5tdWwobXNnLnZhbHVlLCBUT1RBTF9TVVBQTFkpLAogICAgICAgICAgICAgICAgU2FmZU1hdGguc3ViKFRPVEFMX1NVUFBMWSwgY29udHJpYnV0aW9uKQogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYmlkOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaEF1Y3Rpb24oKQogICAgb25seUluU3RhdGUoU3RhdGUuQXVjdGlvblN0YXJ0ZWQpCiAgICBvbmx5QWZ0ZXIoYXVjdGlvbkVuZFRpbWUpIHsKICAgICAgICByZXF1aXJlKGhpZ2hlc3RCaWQgPiAwKTsgIC8vIGF1Y3Rpb24gY2Fubm90IGJlIGZpbmlzaGVkIHVudGlsIGF0IGxlYXN0IG9uZSBwZXJzb24gYmlkcwogICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkF1Y3Rpb25GaW5pc2hlZDsKICAgICAgICBBdWN0aW9uRmluaXNoZWQoaGlnaGVzdEJpZGRlciwgaGlnaGVzdEJpZCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdTaGFyZXMoYWRkcmVzcyBob2xkZXIpIHB1YmxpYwogICAgb25seUluU3RhdGUoU3RhdGUuQXVjdGlvbkZpbmlzaGVkKSB7CiAgICAgICAgdWludDI1NiBhdmFpbGFibGVUb2tlbnMgPSBiYWxhbmNlc1tob2xkZXJdOwogICAgICAgIHJlcXVpcmUoYXZhaWxhYmxlVG9rZW5zID4gMCk7CiAgICAgICAgYmFsYW5jZXNbaG9sZGVyXSA9IDA7CgogICAgICAgIGlmIChob2xkZXIgIT0gaGlnaGVzdEJpZGRlcikgewogICAgICAgICAgICBob2xkZXIudHJhbnNmZXIoCiAgICAgICAgICAgICAgICBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKGhpZ2hlc3RCaWQsIGF2YWlsYWJsZVRva2VucyksIFRPVEFMX1NVUFBMWSkKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNLZXlIb2xkZXIoYWRkcmVzcyBwZXJzb24pIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbcGVyc29uXSA+PSBTYWZlTWF0aC5kaXYodG9rZW5zRm9ySWNvLCBUT0tFTlNfUEVSQ0VOVEFHRV9GT1JfS0VZX0hPTERFUik7IH0KCiAgICAvKgogICAgICAgIEdlbmVyYWwgbWV0aG9kcwogICAgKi8KCiAgICBmdW5jdGlvbiBjb250cmlidXRvcnNDb3VudCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgcmV0dXJuIGNvbnRyaWJ1dG9ycy5sZW5ndGg7IH0KCiAgICAvLyBDYW5jZWwgSUNPIHdpbGwgYmUgcmVkZXNpZ25lZCB0byBwcmV2ZW50CiAgICAvLyByaXNrIG9mIHVzZXIgZnVuZHMgb3ZlcnRha2VuCgogICAgLypmdW5jdGlvbiBjYW5jZWxJY28oKQogICAgb25seUluU3RhdGUoU3RhdGUuSWNvU3RhcnRlZCkKICAgIG9ubHlUcml2aWFsKCkgewogICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkljb0NhbmNlbGxlZDsKICAgICAgICBJY29DYW5jZWxsZWQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbUljb0NvbnRyaWJ1dGlvbihhZGRyZXNzIGNvbnRyaWJ1dG9yKSBvbmx5SW5TdGF0ZShTdGF0ZS5JY29DYW5jZWxsZWQpIHsKICAgICAgICB1aW50MjU2IGNvbnRyaWJ1dGlvbiA9IGNvbnRyaWJ1dGlvbnNbY29udHJpYnV0b3JdOwogICAgICAgIHJlcXVpcmUoY29udHJpYnV0aW9uID4gMCk7CiAgICAgICAgY29udHJpYnV0aW9uc1tjb250cmlidXRvcl0gPSAwOwogICAgICAgIGNvbnRyaWJ1dG9yLnRyYW5zZmVyKGNvbnRyaWJ1dGlvbik7CiAgICB9Ki8KCiAgICBmdW5jdGlvbiBzZXREZXNjcmlwdGlvbkhhc2goYnl0ZXMzMiBfZGVzY3JpcHRpb25IYXNoKQogICAgb25seUFydGlzdCgpIHsKICAgICAgICBkZXNjcmlwdGlvbkhhc2hIaXN0b3J5LnB1c2goZGVzY3JpcHRpb25IYXNoKTsKICAgICAgICBkZXNjcmlwdGlvbkhhc2ggPSBEZXNjcmlwdGlvbkhhc2goX2Rlc2NyaXB0aW9uSGFzaCwgbm93KTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRBdWN0aW9uV2lubmVyTWVzc2FnZUhhc2goYnl0ZXMzMiBfYXVjdGlvbldpbm5lck1lc3NhZ2VIYXNoKQogICAgb25seUF1Y3Rpb25XaW5uZXIoKSB7CiAgICAgICAgYXVjdGlvbldpbm5lck1lc3NhZ2VIYXNoID0gX2F1Y3Rpb25XaW5uZXJNZXNzYWdlSGFzaDsKICAgICAgICBXaW5uZXJQcm92aWRlZEhhc2goKTsKICAgIH0KCiAgICBmdW5jdGlvbiBraWxsQ29udHJhY3QoKQogICAgb25seVRyaXZpYWwoKSB7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID09IFN0YXRlLkF1Y3Rpb25GaW5pc2hlZCAmJgogICAgICAgICAgICAgICAgbm93ID4gU2FmZU1hdGguYWRkKGF1Y3Rpb25FbmRUaW1lLCBDTEVBTlVQX0RFTEFZKSAvLyBEZWxheSBpbiBjb3JyZWN0IHN0YXRlCiAgICAgICAgICAgICkgfHwKICAgICAgICAgICAgY3VycmVudFN0YXRlID09IFN0YXRlLkljb0NhbmNlbGxlZCAvLyBObyBkZWxheSBpbiBjYW5jZWxsZWQgc3RhdGUKICAgICAgICApOwogICAgICAgIHNlbGZkZXN0cnVjdCh0cml2aWFsKTsKICAgIH0KCiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gdG8gYXZvaWQgdG9vIG1hbnkgY29udHJhY3QgY2FsbHMgb24gZnJvbnRlbmQgc2lkZQogICAgZnVuY3Rpb24gZ2V0Q29udHJhY3RTdGF0ZSgpIGNvbnN0YW50IHJldHVybnMgKAogICAgICAgIHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYsCiAgICAgICAgdWludDI1NiwgdWludDI1NiwgYWRkcmVzcywgdWludDI1NiwgU3RhdGUsCiAgICAgICAgdWludDI1NiwgdWludDI1NiwgdWludDI1NgogICAgKSB7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgaWNvRW5kVGltZSwgYXVjdGlvbkR1cmF0aW9uLCBhdWN0aW9uRW5kVGltZSwKICAgICAgICAgICAgdG9rZW5zRm9yQXJ0aXN0LCB0b2tlbnNGb3JUcml2aWFsLCB0b2tlbnNGb3JJY28sCiAgICAgICAgICAgIGFtb3VudFJhaXNlZCwgaGlnaGVzdEJpZGRlciwgaGlnaGVzdEJpZCwgY3VycmVudFN0YXRlLAogICAgICAgICAgICBUT0tFTlNfUEVSQ0VOVEFHRV9GT1JfS0VZX0hPTERFUiwgTUlOX0JJRF9QRVJDRU5UQUdFLAogICAgICAgICAgICBmcmVlUGVyaW9kRW5kVGltZQogICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgb25seUluU3RhdGUoU3RhdGUuSWNvRmluaXNoZWQpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gQmFzaWNUb2tlbi50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgIG9ubHlJblN0YXRlKFN0YXRlLkljb0ZpbmlzaGVkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIFN0YW5kYXJkVG9rZW4udHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5JY29TdGFydGVkKSB7CiAgICAgICAgICAgIGNvbnRyaWJ1dGVJbkljbygpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChjdXJyZW50U3RhdGUgPT0gU3RhdGUuQXVjdGlvblN0YXJ0ZWQpIHsKICAgICAgICAgICAgYmlkSW5BdWN0aW9uKCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
