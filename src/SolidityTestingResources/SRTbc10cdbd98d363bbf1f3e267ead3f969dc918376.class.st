Class {
	#name : #SRTbc10cdbd98d363bbf1f3e267ead3f969dc918376,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbc10cdbd98d363bbf1f3e267ead3f969dc918376 >> base64 [
	^ ''.
	

]
