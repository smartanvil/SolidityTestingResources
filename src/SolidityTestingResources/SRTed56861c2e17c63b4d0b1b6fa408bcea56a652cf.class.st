Class {
	#name : #SRTed56861c2e17c63b4d0b1b6fa408bcea56a652cf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTed56861c2e17c63b4d0b1b6fa408bcea56a652cf >> base64 [
	^ ''.
	

]
