Class {
	#name : #SRTeb41d9b0326b787a7c767478cfc4d060c6aa9dbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeb41d9b0326b787a7c767478cfc4d060c6aa9dbd >> base64 [
	^ ''.
	

]
