Class {
	#name : #SRT13955f1867a0bfbac3146b58ab33b982d72f06e7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13955f1867a0bfbac3146b58ab33b982d72f06e7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgoKCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBGU04gVG9rZW4gR2VuZXJhdGlvbiBhbmQgVm9sdW50YXJ5IFBhcnRpY2lwYW50cyBQcm9ncmFtCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9GdXNpb25Gb3VuZGF0aW9uL1Rva2VuU2FsZQogKi8KY29udHJhY3QgU2hhcmVUb2tlblNhbGUgaXMgT3duYWJsZSB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgRVJDMjAgcHVibGljIHRva2VuOwogICAgYWRkcmVzcyBwdWJsaWMgcmVjZWl2ZXJBZGRyOwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTYWxlQW1vdW50OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxXYW5uYUJ1eUFtb3VudDsgCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgdXNlcldpdGhkcmF3YWxTdGFydFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBjbGVhclN0YXJ0VGltZTsKICAgIHVpbnQyNTYgcHVibGljIHdpdGhkcmF3bjsKICAgIHVpbnQyNTYgcHVibGljIHByb3BvcnRpb24gPSAxIGV0aGVyOwogICAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIHB1YmxpYyBnbG9iYWxBbW91bnRzOyAgICAKCgogICAgc3RydWN0IFN0YWdlIHsKICAgICAgICB1aW50MjU2IHJhdGU7CiAgICAgICAgdWludDI1NiBkdXJhdGlvbjsKICAgICAgICB1aW50MjU2IHN0YXJ0VGltZTsgICAgICAgCiAgICB9CiAgICBTdGFnZVtdIHB1YmxpYyBzdGFnZXM7ICAgIAoKCiAgICBzdHJ1Y3QgUHVyY2hhc2VySW5mbyB7CiAgICAgICAgYm9vbCB3aXRoZHJldzsKICAgICAgICBib29sIHJlY29yZGVkOwogICAgICAgIG1hcHBpbmcodWludDI1NiA9PiB1aW50MjU2KSBhbW91bnRzOwogICAgfQogICAgbWFwcGluZyhhZGRyZXNzID0+IFB1cmNoYXNlckluZm8pIHB1YmxpYyBwdXJjaGFzZXJNYXBwaW5nOwogICAgYWRkcmVzc1tdIHB1YmxpYyBwdXJjaGFzZXJMaXN0OwoKICAgIG1vZGlmaWVyIG9ubHlPcGVuVGltZSB7CiAgICAgICAgcmVxdWlyZShpc1N0YXJ0ZWQoKSk7CiAgICAgICAgcmVxdWlyZSghaXNFbmRlZCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBdXRvV2l0aGRyYXdhbFRpbWUgewogICAgICAgICByZXF1aXJlKGlzRW5kZWQoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5VXNlcldpdGhkcmF3YWxUaW1lIHsKICAgICAgICByZXF1aXJlKGlzVXNlcldpdGhkcmF3YWxUaW1lKCkpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgcHVyY2hhc2Vyc0FsbFdpdGhkcmF3biB7CiAgICAgICAgcmVxdWlyZSh3aXRoZHJhd249PXB1cmNoYXNlckxpc3QubGVuZ3RoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlDbGVhclRpbWUgewogICAgICAgIHJlcXVpcmUoaXNDbGVhclRpbWUoKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBTaGFyZVRva2VuU2FsZShhZGRyZXNzIF9yZWNlaXZlckFkZHIsIGFkZHJlc3MgX3Rva2VuQWRkciwgdWludDI1NiBfdG90YWxTYWxlQW1vdW50LCB1aW50MjU2IF9zdGFydFRpbWUpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfcmVjZWl2ZXJBZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3Rva2VuQWRkciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF90b3RhbFNhbGVBbW91bnQgPiAwKTsKICAgICAgICByZXF1aXJlKF9zdGFydFRpbWUgPiAwKTsKICAgICAgICByZWNlaXZlckFkZHIgPSBfcmVjZWl2ZXJBZGRyOwogICAgICAgIHRva2VuID0gRVJDMjAoX3Rva2VuQWRkcik7CiAgICAgICAgdG90YWxTYWxlQW1vdW50ID0gX3RvdGFsU2FsZUFtb3VudDsgICAgICAgCiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsgICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGlzU3RhcnRlZCgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiAwIDwgc3RhcnRUaW1lICYmIHN0YXJ0VGltZSA8PSBub3cgJiYgZW5kVGltZSAhPSAwOwogICAgfSAgIAoKICAgIGZ1bmN0aW9uIGlzRW5kZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gbm93ID4gZW5kVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1VzZXJXaXRoZHJhd2FsVGltZSgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBub3cgPiB1c2VyV2l0aGRyYXdhbFN0YXJ0VGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0NsZWFyVGltZSgpIHB1YmxpYyB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBub3cgPiBjbGVhclN0YXJ0VGltZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc3RhcnRTYWxlKHVpbnQyNTZbXSByYXRlcywgdWludDI1NltdIGR1cmF0aW9ucywgdWludDI1NiB1c2VyV2l0aGRyYXdhbERlbGF5U2VjLCB1aW50MjU2IGNsZWFyRGVsYXlTZWMpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoZW5kVGltZSA9PSAwKTsKICAgICAgICByZXF1aXJlKGR1cmF0aW9ucy5sZW5ndGggPT0gcmF0ZXMubGVuZ3RoKTsKICAgICAgICBkZWxldGUgc3RhZ2VzOwogICAgICAgIGVuZFRpbWUgPSBzdGFydFRpbWU7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgZHVyYXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHVpbnQyNTYgcmF0ZSA9IHJhdGVzW2ldOwogICAgICAgICAgICB1aW50MjU2IGR1cmF0aW9uID0gZHVyYXRpb25zW2ldOyAgICAgICAgICAgIAogICAgICAgICAgICBzdGFnZXMucHVzaChTdGFnZSh7cmF0ZTogcmF0ZSwgZHVyYXRpb246IGR1cmF0aW9uLCBzdGFydFRpbWU6ZW5kVGltZX0pKTsKICAgICAgICAgICAgZW5kVGltZSA9IGVuZFRpbWUuYWRkKGR1cmF0aW9uKTsKICAgICAgICB9CiAgICAgICAgdXNlcldpdGhkcmF3YWxTdGFydFRpbWUgPSBlbmRUaW1lLmFkZCh1c2VyV2l0aGRyYXdhbERlbGF5U2VjKTsKICAgICAgICBjbGVhclN0YXJ0VGltZSA9IGVuZFRpbWUuYWRkKGNsZWFyRGVsYXlTZWMpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50U3RhZ2UoKSBwdWJsaWMgb25seU9wZW5UaW1lIHZpZXcgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSBzdGFnZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFnZXNbaV0uc3RhcnRUaW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXZlcnQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQdXJjaGFzZXJDb3VudCgpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NikgewogICAgICAgIHJldHVybiBwdXJjaGFzZXJMaXN0Lmxlbmd0aDsKICAgIH0KCgogICAgZnVuY3Rpb24gX2NhbGNQcm9wb3J0aW9uKCkgaW50ZXJuYWwgewogICAgICAgIGlmICh0b3RhbFdhbm5hQnV5QW1vdW50ID09IDAgfHwgdG90YWxTYWxlQW1vdW50ID49IHRvdGFsV2FubmFCdXlBbW91bnQpIHsKICAgICAgICAgICAgcHJvcG9ydGlvbiA9IDEgZXRoZXI7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcHJvcG9ydGlvbiA9IHRvdGFsU2FsZUFtb3VudC5tdWwoMSBldGhlcikuZGl2KHRvdGFsV2FubmFCdXlBbW91bnQpOyAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U2FsZUluZm8oYWRkcmVzcyBwdXJjaGFzZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYpIHsKICAgICAgICBQdXJjaGFzZXJJbmZvIHN0b3JhZ2UgcGkgPSBwdXJjaGFzZXJNYXBwaW5nW3B1cmNoYXNlcl07CiAgICAgICAgdWludDI1NiBzZW5kRXRoZXIgPSAwOwogICAgICAgIHVpbnQyNTYgdXNlZEV0aGVyID0gMDsKICAgICAgICB1aW50MjU2IGdldFRva2VuID0gMDsgICAgICAgIAogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHN0YWdlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBzZW5kRXRoZXIgPSBzZW5kRXRoZXIuYWRkKHBpLmFtb3VudHNbaV0pOwogICAgICAgICAgICB1aW50MjU2IHN0YWdlVXNlZEV0aGVyID0gcGkuYW1vdW50c1tpXS5tdWwocHJvcG9ydGlvbikuZGl2KDEgZXRoZXIpOwogICAgICAgICAgICB1aW50MjU2IHN0YWdlR2V0VG9rZW4gPSBzdGFnZVVzZWRFdGhlci5tdWwoc3RhZ2VzW2ldLnJhdGUpOwogICAgICAgICAgICBpZiAoc3RhZ2VHZXRUb2tlbiA+IDApIHsgICAgICAgICAKICAgICAgICAgICAgICAgIGdldFRva2VuID0gZ2V0VG9rZW4uYWRkKHN0YWdlR2V0VG9rZW4pOwogICAgICAgICAgICAgICAgdXNlZEV0aGVyID0gdXNlZEV0aGVyLmFkZChzdGFnZVVzZWRFdGhlcik7CiAgICAgICAgICAgIH0KICAgICAgICB9ICAgICAgICAKICAgICAgICByZXR1cm4gKHNlbmRFdGhlciwgdXNlZEV0aGVyLCBnZXRUb2tlbik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgcHVibGljIHsgICAgICAgIAogICAgICAgIGJ1eSgpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHB1YmxpYyBvbmx5T3BlblRpbWUgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDAuMSBldGhlcik7CiAgICAgICAgdWludDI1NiBzdGFnZUluZGV4ID0gZ2V0Q3VycmVudFN0YWdlKCk7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgUHVyY2hhc2VySW5mbyBzdG9yYWdlIHBpID0gcHVyY2hhc2VyTWFwcGluZ1ttc2cuc2VuZGVyXTsKICAgICAgICBpZiAoIXBpLnJlY29yZGVkKSB7CiAgICAgICAgICAgIHBpLnJlY29yZGVkID0gdHJ1ZTsKICAgICAgICAgICAgcHVyY2hhc2VyTGlzdC5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgIH0KICAgICAgICBwaS5hbW91bnRzW3N0YWdlSW5kZXhdID0gcGkuYW1vdW50c1tzdGFnZUluZGV4XS5hZGQoYW1vdW50KTsKICAgICAgICBnbG9iYWxBbW91bnRzW3N0YWdlSW5kZXhdID0gZ2xvYmFsQW1vdW50c1tzdGFnZUluZGV4XS5hZGQoYW1vdW50KTsKICAgICAgICB0b3RhbFdhbm5hQnV5QW1vdW50ID0gdG90YWxXYW5uYUJ1eUFtb3VudC5hZGQoYW1vdW50Lm11bChzdGFnZXNbc3RhZ2VJbmRleF0ucmF0ZSkpOwogICAgICAgIF9jYWxjUHJvcG9ydGlvbigpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBfd2l0aGRyYXdhbChhZGRyZXNzIHB1cmNoYXNlcikgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUocHVyY2hhc2VyICE9IDB4MCk7CiAgICAgICAgUHVyY2hhc2VySW5mbyBzdG9yYWdlIHBpID0gcHVyY2hhc2VyTWFwcGluZ1twdXJjaGFzZXJdOyAgICAgICAgCiAgICAgICAgaWYgKHBpLndpdGhkcmV3KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcGkud2l0aGRyZXcgPSB0cnVlOwogICAgICAgIHdpdGhkcmF3biA9IHdpdGhkcmF3bi5hZGQoMSk7CiAgICAgICAgdmFyIChzZW5kRXRoZXIsIHVzZWRFdGhlciwgZ2V0VG9rZW4pID0gZ2V0U2FsZUluZm8ocHVyY2hhc2VyKTsKICAgICAgICBpZiAodXNlZEV0aGVyID4gMCAmJiBnZXRUb2tlbiA+IDApIHsKICAgICAgICAgICAgcmVjZWl2ZXJBZGRyLnRyYW5zZmVyKHVzZWRFdGhlcik7CiAgICAgICAgICAgIHRva2VuLnRyYW5zZmVyKHB1cmNoYXNlciwgZ2V0VG9rZW4pOwogICAgICAgICAgICBpZiAoc2VuZEV0aGVyLnN1Yih1c2VkRXRoZXIpID4gMCkgeyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHB1cmNoYXNlci50cmFuc2ZlcihzZW5kRXRoZXIuc3ViKHVzZWRFdGhlcikpOyAgIAogICAgICAgICAgICB9ICAgICAgICAgICAKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwdXJjaGFzZXIudHJhbnNmZXIoc2VuZEV0aGVyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB3aXRoZHJhd2FsKCkgcGF5YWJsZSBwdWJsaWMgb25seVVzZXJXaXRoZHJhd2FsVGltZSB7CiAgICAgICAgX3dpdGhkcmF3YWwobXNnLnNlbmRlcik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHdpdGhkcmF3YWxGb3IodWludDI1NiBpbmRleCwgdWludDI1NiBzdG9wKSBwYXlhYmxlIHB1YmxpYyBvbmx5QXV0b1dpdGhkcmF3YWxUaW1lIG9ubHlPd25lciB7CiAgICAgICAgZm9yICg7IGluZGV4IDwgc3RvcDsgaW5kZXgrKykgewogICAgICAgICAgICBfd2l0aGRyYXdhbChwdXJjaGFzZXJMaXN0W2luZGV4XSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBjbGVhcih1aW50MjU2IHRva2VuQW1vdW50LCB1aW50MjU2IGV0aGVyQW1vdW50KSBwYXlhYmxlIHB1YmxpYyBwdXJjaGFzZXJzQWxsV2l0aGRyYXduIG9ubHlDbGVhclRpbWUgb25seU93bmVyIHsKICAgICAgICBpZiAodG9rZW5BbW91bnQgPiAwKSB7CiAgICAgICAgICAgIHRva2VuLnRyYW5zZmVyKHJlY2VpdmVyQWRkciwgdG9rZW5BbW91bnQpOwogICAgICAgIH0KICAgICAgICBpZiAoZXRoZXJBbW91bnQgPiAwKSB7CiAgICAgICAgICAgIHJlY2VpdmVyQWRkci50cmFuc2ZlcihldGhlckFtb3VudCk7CiAgICAgICAgfSAgICAgICAgCiAgICB9Cn0='.
	

]
