Class {
	#name : #SRT81dd35fef7020b129f72885fd2c261fd352f8e43,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT81dd35fef7020b129f72885fd2c261fd352f8e43 >> base64 [
	^ ''.
	

]
