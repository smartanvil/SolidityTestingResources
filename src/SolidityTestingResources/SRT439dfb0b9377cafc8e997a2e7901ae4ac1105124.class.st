Class {
	#name : #SRT439dfb0b9377cafc8e997a2e7901ae4ac1105124,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT439dfb0b9377cafc8e997a2e7901ae4ac1105124 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovLyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgovLyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgoKLy8gVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCi8vIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCi8vIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoKY29udHJhY3QgRFNBdXRob3JpdHkgewogICAgZnVuY3Rpb24gY2FuQ2FsbCgKICAgICAgICBhZGRyZXNzIHNyYywgYWRkcmVzcyBkc3QsIGJ5dGVzNCBzaWcKICAgICkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCk7Cn0KCmNvbnRyYWN0IERTQXV0aEV2ZW50cyB7CiAgICBldmVudCBMb2dTZXRBdXRob3JpdHkgKGFkZHJlc3MgaW5kZXhlZCBhdXRob3JpdHkpOwogICAgZXZlbnQgTG9nU2V0T3duZXIgICAgIChhZGRyZXNzIGluZGV4ZWQgb3duZXIpOwp9Cgpjb250cmFjdCBEU0F1dGggaXMgRFNBdXRoRXZlbnRzIHsKICAgIERTQXV0aG9yaXR5ICBwdWJsaWMgIGF1dGhvcml0eTsKICAgIGFkZHJlc3MgICAgICBwdWJsaWMgIG93bmVyOwoKICAgIGZ1bmN0aW9uIERTQXV0aCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIExvZ1NldE93bmVyKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3Mgb3duZXJfKQogICAgICAgIHB1YmxpYwogICAgICAgIGF1dGgKICAgIHsKICAgICAgICBvd25lciA9IG93bmVyXzsKICAgICAgICBMb2dTZXRPd25lcihvd25lcik7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QXV0aG9yaXR5KERTQXV0aG9yaXR5IGF1dGhvcml0eV8pCiAgICAgICAgcHVibGljCiAgICAgICAgYXV0aAogICAgewogICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eV87CiAgICAgICAgTG9nU2V0QXV0aG9yaXR5KGF1dGhvcml0eSk7CiAgICB9CgogICAgbW9kaWZpZXIgYXV0aCB7CiAgICAgICAgcmVxdWlyZShpc0F1dGhvcml6ZWQobXNnLnNlbmRlciwgbXNnLnNpZykpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gaXNBdXRob3JpemVkKGFkZHJlc3Mgc3JjLCBieXRlczQgc2lnKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoc3JjID09IGFkZHJlc3ModGhpcykpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChzcmMgPT0gb3duZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChhdXRob3JpdHkgPT0gRFNBdXRob3JpdHkoMCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBhdXRob3JpdHkuY2FuQ2FsbChzcmMsIHRoaXMsIHNpZyk7CiAgICAgICAgfQogICAgfQp9CgovLyBDb3B5cmlnaHQgKEMpIDIwMTcgIERhcHBIdWIsIExMQwoKLy8gVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKLy8gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCi8vIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCi8vIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQovLyBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KCmNvbnRyYWN0IERTUm9sZXMgaXMgRFNBdXRoLCBEU0F1dGhvcml0eQp7CiAgICBtYXBwaW5nKGFkZHJlc3M9PmJvb2wpIF9yb290X3VzZXJzOwogICAgbWFwcGluZyhhZGRyZXNzPT5ieXRlczMyKSBfdXNlcl9yb2xlczsKICAgIG1hcHBpbmcoYWRkcmVzcz0+bWFwcGluZyhieXRlczQ9PmJ5dGVzMzIpKSBfY2FwYWJpbGl0eV9yb2xlczsKICAgIG1hcHBpbmcoYWRkcmVzcz0+bWFwcGluZyhieXRlczQ9PmJvb2wpKSBfcHVibGljX2NhcGFiaWxpdGllczsKCiAgICBmdW5jdGlvbiBnZXRVc2VyUm9sZXMoYWRkcmVzcyB3aG8pCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJ5dGVzMzIpCiAgICB7CiAgICAgICAgcmV0dXJuIF91c2VyX3JvbGVzW3dob107CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q2FwYWJpbGl0eVJvbGVzKGFkZHJlc3MgY29kZSwgYnl0ZXM0IHNpZykKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMikKICAgIHsKICAgICAgICByZXR1cm4gX2NhcGFiaWxpdHlfcm9sZXNbY29kZV1bc2lnXTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1VzZXJSb290KGFkZHJlc3Mgd2hvKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiBfcm9vdF91c2Vyc1t3aG9dOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQ2FwYWJpbGl0eVB1YmxpYyhhZGRyZXNzIGNvZGUsIGJ5dGVzNCBzaWcpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIF9wdWJsaWNfY2FwYWJpbGl0aWVzW2NvZGVdW3NpZ107CiAgICB9CgogICAgZnVuY3Rpb24gaGFzVXNlclJvbGUoYWRkcmVzcyB3aG8sIHVpbnQ4IHJvbGUpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgYnl0ZXMzMiByb2xlcyA9IGdldFVzZXJSb2xlcyh3aG8pOwogICAgICAgIGJ5dGVzMzIgc2hpZnRlZCA9IGJ5dGVzMzIodWludDI1Nih1aW50MjU2KDIpICoqIHVpbnQyNTYocm9sZSkpKTsKICAgICAgICByZXR1cm4gYnl0ZXMzMigwKSAhPSByb2xlcyAmIHNoaWZ0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gY2FuQ2FsbChhZGRyZXNzIGNhbGxlciwgYWRkcmVzcyBjb2RlLCBieXRlczQgc2lnKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmKCBpc1VzZXJSb290KGNhbGxlcikgfHwgaXNDYXBhYmlsaXR5UHVibGljKGNvZGUsIHNpZykgKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJ5dGVzMzIgaGFzX3JvbGVzID0gZ2V0VXNlclJvbGVzKGNhbGxlcik7CiAgICAgICAgICAgIGJ5dGVzMzIgbmVlZHNfb25lX29mID0gZ2V0Q2FwYWJpbGl0eVJvbGVzKGNvZGUsIHNpZyk7CiAgICAgICAgICAgIHJldHVybiBieXRlczMyKDApICE9IGhhc19yb2xlcyAmIG5lZWRzX29uZV9vZjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gQklUTk9UKGJ5dGVzMzIgaW5wdXQpIGludGVybmFsIHB1cmUgcmV0dXJucyAoYnl0ZXMzMiBvdXRwdXQpIHsKICAgICAgICByZXR1cm4gKGlucHV0IF4gYnl0ZXMzMih1aW50KC0xKSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJvb3RVc2VyKGFkZHJlc3Mgd2hvLCBib29sIGVuYWJsZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgYXV0aAogICAgewogICAgICAgIF9yb290X3VzZXJzW3dob10gPSBlbmFibGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFVzZXJSb2xlKGFkZHJlc3Mgd2hvLCB1aW50OCByb2xlLCBib29sIGVuYWJsZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgYXV0aAogICAgewogICAgICAgIGJ5dGVzMzIgbGFzdF9yb2xlcyA9IF91c2VyX3JvbGVzW3dob107CiAgICAgICAgYnl0ZXMzMiBzaGlmdGVkID0gYnl0ZXMzMih1aW50MjU2KHVpbnQyNTYoMikgKiogdWludDI1Nihyb2xlKSkpOwogICAgICAgIGlmKCBlbmFibGVkICkgewogICAgICAgICAgICBfdXNlcl9yb2xlc1t3aG9dID0gbGFzdF9yb2xlcyB8IHNoaWZ0ZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3VzZXJfcm9sZXNbd2hvXSA9IGxhc3Rfcm9sZXMgJiBCSVROT1Qoc2hpZnRlZCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldFB1YmxpY0NhcGFiaWxpdHkoYWRkcmVzcyBjb2RlLCBieXRlczQgc2lnLCBib29sIGVuYWJsZWQpCiAgICAgICAgcHVibGljCiAgICAgICAgYXV0aAogICAgewogICAgICAgIF9wdWJsaWNfY2FwYWJpbGl0aWVzW2NvZGVdW3NpZ10gPSBlbmFibGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFJvbGVDYXBhYmlsaXR5KHVpbnQ4IHJvbGUsIGFkZHJlc3MgY29kZSwgYnl0ZXM0IHNpZywgYm9vbCBlbmFibGVkKQogICAgICAgIHB1YmxpYwogICAgICAgIGF1dGgKICAgIHsKICAgICAgICBieXRlczMyIGxhc3Rfcm9sZXMgPSBfY2FwYWJpbGl0eV9yb2xlc1tjb2RlXVtzaWddOwogICAgICAgIGJ5dGVzMzIgc2hpZnRlZCA9IGJ5dGVzMzIodWludDI1Nih1aW50MjU2KDIpICoqIHVpbnQyNTYocm9sZSkpKTsKICAgICAgICBpZiggZW5hYmxlZCApIHsKICAgICAgICAgICAgX2NhcGFiaWxpdHlfcm9sZXNbY29kZV1bc2lnXSA9IGxhc3Rfcm9sZXMgfCBzaGlmdGVkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9jYXBhYmlsaXR5X3JvbGVzW2NvZGVdW3NpZ10gPSBsYXN0X3JvbGVzICYgQklUTk9UKHNoaWZ0ZWQpOwogICAgICAgIH0KCiAgICB9Cgp9'.
	

]
