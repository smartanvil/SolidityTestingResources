Class {
	#name : #SRT0c6c78e9D5576818e6638E198bFf0ce9764098b1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0c6c78e9D5576818e6638E198bFf0ce9764098b1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7Cgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KGIgPiAwKTsKICAgICAgdWludCBjID0gYSAvIGI7CiAgICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgICByZXR1cm4gYzsKICAgIH0KCn0KCmNvbnRyYWN0IFRva2VuIHsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKY29udHJhY3QgTW9uZG8gaXMgU2FmZU1hdGgsIFN0YW5kYXJkVG9rZW4gewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNb25kbyBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJNTkQiOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgICB1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkNhcFByZUlDTzAyID0gIDUwMDAwMDAqMTAqKmRlY2ltYWxzOwogICAgdWludDI1NiBwcml2YXRlIGNvbnN0YW50IHRva2VuQ3JlYXRpb25DYXBQcmVJQ08xNSA9ICAxMTAwMDAwMCoxMCoqZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gMjM1MDAwMDAqMTAqKmRlY2ltYWxzOwoKICAgIGFkZHJlc3MgcHVibGljIGNvbnN0YW50IG93bmVyID0gMHgwMDc3REE5REY2NTA3NjU1Q0RiM2FCOTI3N0EzNDdFRGU3NTlGOTNGOwoKICAgIC8vIDEgRVRIID0gMjgwIFVTRCBEYXRlOiAxMS4wOC4yMDE3CiAgICB1aW50IHByaXZhdGUgb25lVG9rZW5JbldlaVNhbGUxID0gNzAxNzU0Mzg1OTY0OTE7IC8vIDAsMDIgJAogICAgdWludCBwcml2YXRlIG9uZVRva2VuSW5XZWkxU2FsZTIgPSA1MjYzMTU3ODk0NzM2ODQ7IC8vIDAsMTUgJAogICAgdWludCBwcml2YXRlIG9uZVRva2VuSW5XZWkgPSA1NDczNjg0MjEwNTI2MzIwOyAvLyAxLDU2ICQKCiAgICBQaGFzZSBwdWJsaWMgY3VycmVudFBoYXNlID0gUGhhc2UuUHJlSUNPMTsKCiAgICBlbnVtIFBoYXNlIHsKICAgICAgICBQcmVJQ08xLAogICAgICAgIFByZUlDTzIsCiAgICAgICAgSUNPCiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZihvd25lciAhPSBtc2cuc2VuZGVyKSByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIGV2ZW50IENyZWF0ZU1ORChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gTW9uZG8oKSB7fQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGNyZWF0ZVRva2VucygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VucygpIGludGVybmFsIHsKICAgICAgICBpZiAobXNnLnZhbHVlIDw9IDApIHJldmVydCgpOwoKICAgICAgICBpZiAoY3VycmVudFBoYXNlID09IFBoYXNlLlByZUlDTzEpIHsKICAgICAgICAgICAgaWYgKHRvdGFsU3VwcGx5IDw9IHRva2VuQ3JlYXRpb25DYXBQcmVJQ08wMikgewogICAgICAgICAgICAgICAgZ2VuZXJhdGVUb2tlbnMob25lVG9rZW5JbldlaVNhbGUxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUHJlSUNPMikgewogICAgICAgICAgICBpZiAodG90YWxTdXBwbHkgPiB0b2tlbkNyZWF0aW9uQ2FwUHJlSUNPMDIgJiYgdG90YWxTdXBwbHkgPD0gdG9rZW5DcmVhdGlvbkNhcFByZUlDTzE1KSB7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRva2VucyhvbmVUb2tlbkluV2VpMVNhbGUyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChjdXJyZW50UGhhc2UgPT0gUGhhc2UuSUNPKSB7CiAgICAgICAgICAgIGlmICh0b3RhbFN1cHBseSA+IHRva2VuQ3JlYXRpb25DYXBQcmVJQ08xNSAmJiB0b3RhbFN1cHBseSA8PSB0b2tlbkNyZWF0aW9uQ2FwKSB7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRva2VucyhvbmVUb2tlbkluV2VpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVRva2Vucyh1aW50IF9vbmVUb2tlbkluV2VpKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBtdWx0aXBsaWVyID0gMTAgKiogZGVjaW1hbHM7CiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBzYWZlRGl2KG1zZy52YWx1ZSwgX29uZVRva2VuSW5XZWkpKm11bHRpcGxpZXI7CiAgICAgICAgdWludDI1NiBjaGVja2VkU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsKICAgICAgICBpZiAodG9rZW5DcmVhdGlvbkNhcCA8PSBjaGVja2VkU3VwcGx5KSByZXZlcnQoKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnM7CiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlQWRkKHRvdGFsU3VwcGx5LCB0b2tlbnMpOwogICAgICAgIENyZWF0ZU1ORChtc2cuc2VuZGVyLHRva2Vucyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlUGhhc2VUb1ByZUlDTzIoKSBleHRlcm5hbCBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuUHJlSUNPMjsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VQaGFzZVRvSUNPKCkgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKGJvb2wpewogICAgICAgIGN1cnJlbnRQaGFzZSA9IFBoYXNlLklDTzsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VUb2tlblByaWNlKHVpbnQgdHBpY28xLCB1aW50IHRwaWNvMiwgdWludCB0cGljbykgZXh0ZXJuYWwgb25seU93bmVyIHJldHVybnMgKGJvb2wpewogICAgICAgIG9uZVRva2VuSW5XZWlTYWxlMSA9IHRwaWNvMTsKICAgICAgICBvbmVUb2tlbkluV2VpMVNhbGUyID0gdHBpY28yOwogICAgICAgIG9uZVRva2VuSW5XZWkgPSB0cGljbzsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBmaW5hbGl6ZSgpIGV4dGVybmFsIG9ubHlPd25lciByZXR1cm5zIChib29sKXsKICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0='.
	

]
