Class {
	#name : #SRT921c149d89CCAA21E9dC0a2529895E078138CC8E,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT921c149d89CCAA21E9dC0a2529895E078138CC8E >> base64 [
	^ ''.
	

]
