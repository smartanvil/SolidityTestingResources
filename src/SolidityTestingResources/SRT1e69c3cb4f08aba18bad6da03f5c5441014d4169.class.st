Class {
	#name : #SRT1e69c3cb4f08aba18bad6da03f5c5441014d4169,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e69c3cb4f08aba18bad6da03f5c5441014d4169 >> base64 [
	^ ''.
	

]
