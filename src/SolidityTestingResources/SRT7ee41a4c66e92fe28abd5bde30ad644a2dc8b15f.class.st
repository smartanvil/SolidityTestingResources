Class {
	#name : #SRT7ee41a4c66e92fe28abd5bde30ad644a2dc8b15f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7ee41a4c66e92fe28abd5bde30ad644a2dc8b15f >> base64 [
	^ ''.
	

]
