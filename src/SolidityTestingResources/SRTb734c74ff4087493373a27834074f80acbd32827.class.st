Class {
	#name : #SRTb734c74ff4087493373a27834074f80acbd32827,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb734c74ff4087493373a27834074f80acbd32827 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gewoKICAgIC8qCiAgICAgKiAgRGF0YSBzdHJ1Y3R1cmVzCiAgICAgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvKgogICAgICogIEV2ZW50cwogICAgICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwoKICAgIC8qCiAgICAgKiAgUmVhZCBhbmQgd3JpdGUgc3RvcmFnZSBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHNlbmRlcidzIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3RvIEFkZHJlc3Mgb2YgdG9rZW4gcmVjZWl2ZXIuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgQWxsb3dzIGFsbG93ZWQgdGhpcmQgcGFydHkgdG8gdHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlci4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfZnJvbSBBZGRyZXNzIGZyb20gd2hlcmUgdG9rZW5zIGFyZSB3aXRoZHJhd24uCiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIHRvIHdoZXJlIHRva2VucyBhcmUgc2VudC4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIuCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvLy8gQGRldiBTZXRzIGFwcHJvdmVkIGFtb3VudCBvZiB0b2tlbnMgZm9yIHNwZW5kZXIuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgQWRkcmVzcyBvZiBhbGxvd2VkIGFjY291bnQuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgYXBwcm92ZWQgdG9rZW5zLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoKICAgICAqIFJlYWQgc3RvcmFnZSBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgYWxsb3dlZCB0b2tlbnMgZm9yIGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIHNwZW5kZXIuCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKfQoKCi8vLyBAdGl0bGUgVG9rZW4gY29udHJhY3QgLSBJbXBsZW1lbnRzIFN0YW5kYXJkIFRva2VuIEludGVyZmFjZSBmb3IgVG9rZW5GdW5kLgovLy8gQGF1dGhvciBFdmdlbnkgWXVydGFldiAtIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjM4NWQ0ZTVmNWQ1NjQxNzg1ZDRjNTA1ZDRhNTE1NzU2NTQ1OTVhMTY1YjU3NTUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+Pgpjb250cmFjdCBUb2tlbkZ1bmQgaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgLyoKICAgICAqIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBlbWlzc2lvbkNvbnRyYWN0QWRkcmVzcyA9IDB4MDsKCiAgICAvKgogICAgICogVG9rZW4gbWV0YSBkYXRhCiAgICAgKi8KICAgIHN0cmluZyBjb25zdGFudCBwdWJsaWMgbmFtZSA9ICJUaGVUb2tlbiBGdW5kIjsKICAgIHN0cmluZyBjb25zdGFudCBwdWJsaWMgc3ltYm9sID0gIlRLTiI7CiAgICB1aW50OCBjb25zdGFudCBwdWJsaWMgZGVjaW1hbHMgPSA4OwoKICAgIC8qCiAgICAgKiBTdG9yYWdlCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIG93bmVyID0gMHgwOwogICAgYm9vbCBwdWJsaWMgZW1pc3Npb25FbmFibGVkID0gdHJ1ZTsKICAgIGJvb2wgdHJhbnNmZXJzRW5hYmxlZCA9IHRydWU7CgogICAgLyoKICAgICAqIE1vZGlmaWVycwogICAgICovCgogICAgbW9kaWZpZXIgaXNDcm93ZGZ1bmRpbmdDb250cmFjdCgpIHsKICAgICAgICAvLyBPbmx5IGVtaXNzaW9uIGFkZHJlc3MgaXMgYWxsb3dlZCB0byBwcm9jZWVkLgogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGVtaXNzaW9uQ29udHJhY3RBZGRyZXNzKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICAvLyBPbmx5IG93bmVyIGlzIGFsbG93ZWQgdG8gZG8gdGhpcyBhY3Rpb24uCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLyoKICAgICAqIENvbnRyYWN0IGZ1bmN0aW9ucwogICAgICovCgogICAgIC8vLyBAZGV2IFRva2VuRnVuZCBlbWlzc2lvbiBmdW5jdGlvbi4KICAgIC8vLyBAcGFyYW0gX2ZvciBBZGRyZXNzIG9mIHJlY2VpdmVyLgogICAgLy8vIEBwYXJhbSB0b2tlbkNvdW50IE51bWJlciBvZiB0b2tlbnMgdG8gaXNzdWUuCiAgICBmdW5jdGlvbiBpc3N1ZVRva2VucyhhZGRyZXNzIF9mb3IsIHVpbnQgdG9rZW5Db3VudCkKICAgICAgICBleHRlcm5hbAogICAgICAgIGlzQ3Jvd2RmdW5kaW5nQ29udHJhY3QKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGlmIChlbWlzc2lvbkVuYWJsZWQgPT0gZmFsc2UpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICBiYWxhbmNlc1tfZm9yXSArPSB0b2tlbkNvdW50OwogICAgICAgIHRvdGFsU3VwcGx5ICs9IHRva2VuQ291bnQ7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgV2l0aGRyYXdzIHRva2VucyBmb3IgbXNnLnNlbmRlci4KICAgIC8vLyBAcGFyYW0gdG9rZW5Db3VudCBOdW1iZXIgb2YgdG9rZW5zIHRvIHdpdGhkcmF3LgogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnModWludCB0b2tlbkNvdW50KQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludCBiYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgICAgaWYgKGJhbGFuY2UgPCB0b2tlbkNvdW50KSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gdG9rZW5Db3VudDsKICAgICAgICB0b3RhbFN1cHBseSAtPSB0b2tlbkNvdW50OwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRvIGNoYW5nZSBhZGRyZXNzIHRoYXQgaXMgYWxsb3dlZCB0byBkbyBlbWlzc2lvbi4KICAgIC8vLyBAcGFyYW0gbmV3QWRkcmVzcyBBZGRyZXNzIG9mIG5ldyBlbWlzc2lvbiBjb250cmFjdC4KICAgIGZ1bmN0aW9uIGNoYW5nZUVtaXNzaW9uQ29udHJhY3RBZGRyZXNzKGFkZHJlc3MgbmV3QWRkcmVzcykKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgZW1pc3Npb25Db250cmFjdEFkZHJlc3MgPSBuZXdBZGRyZXNzOwogICAgfQoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRoYXQgZW5hYmxlcy9kaXNhYmxlcyB0cmFuc2ZlcnMgb2YgdG9rZW4uCiAgICAvLy8gQHBhcmFtIHZhbHVlIFRydWUvRmFsc2UKICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVycyhib29sIHZhbHVlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IHZhbHVlOwogICAgfQoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRoYXQgZW5hYmxlcy9kaXNhYmxlcyB0b2tlbiBlbWlzc2lvbi4KICAgIC8vLyBAcGFyYW0gdmFsdWUgVHJ1ZS9GYWxzZQogICAgZnVuY3Rpb24gZW5hYmxlRW1pc3Npb24oYm9vbCB2YWx1ZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGVtaXNzaW9uRW5hYmxlZCA9IHZhbHVlOwogICAgfQoKICAgIC8qCiAgICAgKiBPdmVycmlkaW5nIEVSQzIwIHN0YW5kYXJkIHRva2VuIGZ1bmN0aW9ucyB0byBzdXBwb3J0IHRyYW5zZmVyIGxvY2sKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBpZiAodHJhbnNmZXJzRW5hYmxlZCA9PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBpZiAodHJhbnNmZXJzRW5hYmxlZCA9PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKCiAgICAvLy8gQGRldiBDb250cmFjdCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBzZXRzIGluaXRpYWwgdG9rZW4gYmFsYW5jZXMuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRoZSBvd25lciBvZiBUb2tlbkZ1bmQuCiAgICBmdW5jdGlvbiBUb2tlbkZ1bmQoYWRkcmVzcyBfb3duZXIpCiAgICB7CiAgICAgICAgdG90YWxTdXBwbHkgPSAwOwogICAgICAgIG93bmVyID0gX293bmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgoKY29udHJhY3QgRnVuZCBpcyBvd25lZCB7CgoJLyoKICAgICAqIEV4dGVybmFsIGNvbnRyYWN0cwogICAgICovCiAgICBUb2tlbkZ1bmQgcHVibGljIHRva2VuRnVuZDsKCgkvKgogICAgICogU3RvcmFnZQogICAgICovCiAgICBhZGRyZXNzIHB1YmxpYyBldGhBZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgbXVsdGlzaWc7CiAgICBhZGRyZXNzIHB1YmxpYyBzdXBwb3J0QWRkcmVzczsKICAgIHVpbnQgcHVibGljIHRva2VuUHJpY2UgPSAxIGZpbm5leTsgLy8gMC4wMDEgRVRICgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBhZGRyZXNzKSBwdWJsaWMgcmVmZXJyYWxzOwoKICAgIC8qCiAgICAgKiBDb250cmFjdCBmdW5jdGlvbnMKICAgICAqLwoKCS8vLyBAZGV2IFdpdGhkcmF3cyB0b2tlbnMgZm9yIG1zZy5zZW5kZXIuCiAgICAvLy8gQHBhcmFtIHRva2VuQ291bnQgTnVtYmVyIG9mIHRva2VucyB0byB3aXRoZHJhdy4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKHVpbnQgdG9rZW5Db3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiB0b2tlbkZ1bmQud2l0aGRyYXdUb2tlbnModG9rZW5Db3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfZm9yLCB1aW50IHRva2VuQ291bnQpCiAgICAJcHJpdmF0ZQogICAgCXJldHVybnMgKGJvb2wpCiAgICB7CiAgICAJaWYgKHRva2VuQ291bnQgPT0gMCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIHBlcmNlbnQgPSB0b2tlbkNvdW50IC8gMTAwOwoKICAgICAgLy8gMSUgZ29lcyB0byB0aGUgZnVuZCBtYW5hZ2VycwogICAgICBpZiAoIXRva2VuRnVuZC5pc3N1ZVRva2VucyhtdWx0aXNpZywgcGVyY2VudCkpIHsKICAgICAgICAvLyBUb2tlbnMgY291bGQgbm90IGJlIGlzc3VlZC4KICAgICAgICB0aHJvdzsKICAgICAgfQoKCQkgIC8vIDElIGdvZXMgdG8gdGhlIHN1cHBvcnQgdGVhbQogICAgICBpZiAoIXRva2VuRnVuZC5pc3N1ZVRva2VucyhzdXBwb3J0QWRkcmVzcywgcGVyY2VudCkpIHsKICAgICAgICAvLyBUb2tlbnMgY291bGQgbm90IGJlIGlzc3VlZC4KICAgICAgICB0aHJvdzsKICAgICAgfQoKICAgICAgaWYgKHJlZmVycmFsc1tfZm9yXSAhPSAwKSB7CiAgICAgIAkvLyAzJSBnb2VzIHRvIHRoZSByZWZlcnJhbAogICAgICAJaWYgKCF0b2tlbkZ1bmQuaXNzdWVUb2tlbnMocmVmZXJyYWxzW19mb3JdLCAzICogcGVyY2VudCkpIHsKICAgICAgICAgIC8vIFRva2VucyBjb3VsZCBub3QgYmUgaXNzdWVkLgogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAJLy8gaWYgdGhlcmUgaXMgbm8gcmVmZXJyYWwsIDMlIGdvZXMgdG8gdGhlIGZ1bmQgbWFuYWdlcnMKICAgICAgCWlmICghdG9rZW5GdW5kLmlzc3VlVG9rZW5zKG11bHRpc2lnLCAzICogcGVyY2VudCkpIHsKICAgICAgICAgIC8vIFRva2VucyBjb3VsZCBub3QgYmUgaXNzdWVkLgogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoIXRva2VuRnVuZC5pc3N1ZVRva2VucyhfZm9yLCB0b2tlbkNvdW50IC0gNSAqIHBlcmNlbnQpKSB7CiAgICAgICAgLy8gVG9rZW5zIGNvdWxkIG5vdCBiZSBpc3N1ZWQuCiAgICAgICAgdGhyb3c7CgkgICAgfQoKCSAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBJc3N1ZXMgdG9rZW5zIGZvciB1c2VycyB3aG8gbWFkZSBpbnZlc3RtZW50LgogICAgLy8vIEBwYXJhbSBiZW5lZmljaWFyeSBBZGRyZXNzIHRoZSB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgdG8uCiAgICAvLy8gQHBhcmFtIHZhbHVlSW5XZWkgaW52ZXN0bWVudCBpbiB3ZWkKICAgIGZ1bmN0aW9uIGFkZEludmVzdG1lbnQoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCB2YWx1ZUluV2VpKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICB1aW50IHRva2VuQ291bnQgPSBjYWxjdWxhdGVUb2tlbnModmFsdWVJbldlaSk7CiAgICAJcmV0dXJuIGlzc3VlVG9rZW5zKGJlbmVmaWNpYXJ5LCB0b2tlbkNvdW50KTsKICAgIH0KCiAgICAvLy8gQGRldiBJc3N1ZXMgdG9rZW5zIGZvciB1c2VycyB3aG8gbWFkZSBkaXJlY3QgRVRIIHBheW1lbnQuCiAgICBmdW5jdGlvbiBmdW5kKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICAvLyBUb2tlbiBjb3VudCBpcyByb3VuZGVkIGRvd24uIFNlbnQgRVRIIHNob3VsZCBiZSBtdWx0aXBsZXMgb2YgYmFzZVRva2VuUHJpY2UuCiAgICAgICAgYWRkcmVzcyBiZW5lZmljaWFyeSA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludCB0b2tlbkNvdW50ID0gY2FsY3VsYXRlVG9rZW5zKG1zZy52YWx1ZSk7CiAgICAgICAgdWludCByb3VuZGVkSW52ZXN0bWVudCA9IHRva2VuQ291bnQgKiB0b2tlblByaWNlIC8gMTAwMDAwMDAwOwoKICAgICAgICAvLyBTZW5kIGNoYW5nZSBiYWNrIHRvIHVzZXIuCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IHJvdW5kZWRJbnZlc3RtZW50ICYmICFiZW5lZmljaWFyeS5zZW5kKG1zZy52YWx1ZSAtIHJvdW5kZWRJbnZlc3RtZW50KSkgewogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIC8vIFNlbmQgbW9uZXkgdG8gdGhlIGZ1bmQgZXRoZXJldW0gYWRkcmVzcwogICAgICAgIGlmICghZXRoQWRkcmVzcy5zZW5kKHJvdW5kZWRJbnZlc3RtZW50KSkgewogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpc3N1ZVRva2VucyhiZW5lZmljaWFyeSwgdG9rZW5Db3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQgdmFsdWVJbldlaSkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHZhbHVlSW5XZWkgKiAxMDAwMDAwMDAgLyB0b2tlblByaWNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGVzdGltYXRlVG9rZW5zKHVpbnQgdmFsdWVJbldlaSkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHZhbHVlSW5XZWkgKiA5NTAwMDAwMCAvIHRva2VuUHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UmVmZXJyYWwoYWRkcmVzcyBjbGllbnQsIGFkZHJlc3MgcmVmZXJyYWwpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVmZXJyYWxzW2NsaWVudF0gPSByZWZlcnJhbDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSZWZlcnJhbChhZGRyZXNzIGNsaWVudCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGFkZHJlc3MpCiAgICB7CiAgICAgICAgcmV0dXJuIHJlZmVycmFsc1tjbGllbnRdOwogICAgfQoKICAgIC8vLyBAZGV2IFNldHMgdG9rZW4gcHJpY2UgKFRLTi9FVEgpIGluIFdlaS4KICAgIC8vLyBAcGFyYW0gdmFsdWVJbldlaSBOZXcgdmFsdWUuCiAgICBmdW5jdGlvbiBzZXRUb2tlblByaWNlKHVpbnQgdmFsdWVJbldlaSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICB0b2tlblByaWNlID0gdmFsdWVJbldlaTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb2tlblByaWNlKCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmV0dXJuIHRva2VuUHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlTXVsdGlzaWcoYWRkcmVzcyBuZXdNdWx0aXNpZykKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBtdWx0aXNpZyA9IG5ld011bHRpc2lnOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoYW5nZUV0aEFkZHJlc3MoYWRkcmVzcyBuZXdFdGhBZGRyZXNzKQogICAgICAgIG9ubHlPd25lcgogICAgewogICAgICAgIGV0aEFkZHJlc3MgPSBuZXdFdGhBZGRyZXNzOwogICAgfQoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgICAvLy8gQHBhcmFtIF9ldGhBZGRyZXNzIEV0aGVyZXVtIGFkZHJlc3Mgb2YgdGhlIFRva2VuRnVuZC4KICAgIC8vLyBAcGFyYW0gX211bHRpc2lnIEFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIFRva2VuRnVuZC4KICAgIC8vLyBAcGFyYW0gX3N1cHBvcnRBZGRyZXNzIEFkZHJlc3Mgb2YgdGhlIGRldmVsb3BlcnMgdGVhbS4KICAgIC8vLyBAcGFyYW0gX3Rva2VuQWRkcmVzcyBBZGRyZXNzIG9mIHRoZSB0b2tlbiBjb250cmFjdC4KICAgIGZ1bmN0aW9uIEZ1bmQoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX2V0aEFkZHJlc3MsIGFkZHJlc3MgX211bHRpc2lnLCBhZGRyZXNzIF9zdXBwb3J0QWRkcmVzcywgYWRkcmVzcyBfdG9rZW5BZGRyZXNzKQogICAgewogICAgICAgIG93bmVyID0gX293bmVyOwogICAgICAgIGV0aEFkZHJlc3MgPSBfZXRoQWRkcmVzczsKICAgICAgICBtdWx0aXNpZyA9IF9tdWx0aXNpZzsKICAgICAgICBzdXBwb3J0QWRkcmVzcyA9IF9zdXBwb3J0QWRkcmVzczsKICAgICAgICB0b2tlbkZ1bmQgPSBUb2tlbkZ1bmQoX3Rva2VuQWRkcmVzcyk7CiAgICB9CgogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24uIENhbGxzIGZ1bmQoKSBmdW5jdGlvbiB0byBjcmVhdGUgdG9rZW5zLgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgZnVuZCgpOwogICAgfQp9'.
	

]
