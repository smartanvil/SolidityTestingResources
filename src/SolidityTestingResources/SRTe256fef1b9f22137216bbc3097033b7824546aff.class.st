Class {
	#name : #SRTe256fef1b9f22137216bbc3097033b7824546aff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe256fef1b9f22137216bbc3097033b7824546aff >> base64 [
	^ ''.
	

]
