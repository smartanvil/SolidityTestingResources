Class {
	#name : #SRT653f052a42b6f02530742171c987fd0811b2d1f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT653f052a42b6f02530742171c987fd0811b2d1f1 >> base64 [
	^ ''.
	

]
