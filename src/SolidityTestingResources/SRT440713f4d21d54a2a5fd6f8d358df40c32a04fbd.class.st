Class {
	#name : #SRT440713f4d21d54a2a5fd6f8d358df40c32a04fbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT440713f4d21d54a2a5fd6f8d358df40c32a04fbd >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmxpYnJhcnkgU2FmZU1hdGhGb3JCb29zdCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPiAwKTsKICAgIHVpbnQgYyA9IGEgLyBiOwogICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsKICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgIHJldmVydCgpOwogICAgfQogIH0KfQoKCmNvbnRyYWN0IEJvb3N0IHsKICAgIHVzaW5nIFNhZmVNYXRoRm9yQm9vc3QgZm9yIHVpbnQyNTY7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkJvb3N0IjsgICAgICAgICAvLyDjg4jjg7zjgq/jg7PlkI0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDA7ICAgICAgICAgICAgLy8g5bCP5pWw54K55Lul5LiL5L2V5qGB44GLCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJCU1QiOyAgICAgICAgIC8vIOODiOODvOOCr+ODs+OBruWNmOS9jQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAxMDAwMDAwMDA7ICAvLyDnt4/kvpvntabph48KCiAgICAvLyBgYmFsYW5jZXNgIGlzIHRoZSBtYXAgdGhhdCB0cmFja3MgdGhlIGJhbGFuY2Ugb2YgZWFjaCBhZGRyZXNzLCBpbiB0aGlzCiAgICAvLyAgY29udHJhY3Qgd2hlbiB0aGUgYmFsYW5jZSBjaGFuZ2VzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgY2hhbmdlCiAgICAvLyAgb2NjdXJyZWQgaXMgYWxzbyBpbmNsdWRlZCBpbiB0aGUgbWFwCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENoZWNrcG9pbnRbXSkgYmFsYW5jZXM7CgogICAgLy8gYGFsbG93ZWRgIHRyYWNrcyBhbnkgZXh0cmEgdHJhbnNmZXIgcmlnaHRzIGFzIGluIGFsbCBFUkMyMCB0b2tlbnMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgICAvLy8gQGRldiBgQ2hlY2twb2ludGAgaXMgdGhlIHN0cnVjdHVyZSB0aGF0IGF0dGFjaGVzIGEgYmxvY2sgbnVtYmVyIHRvIGEKICAgIC8vLyAgZ2l2ZW4gdmFsdWUsIHRoZSBibG9jayBudW1iZXIgYXR0YWNoZWQgaXMgdGhlIG9uZSB0aGF0IGxhc3QgY2hhbmdlZCB0aGUKICAgIC8vLyAgdmFsdWUKICAgIHN0cnVjdCAgQ2hlY2twb2ludCB7CgogICAgICAgIC8vIGBmcm9tQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgdmFsdWUgd2FzIGdlbmVyYXRlZCBmcm9tCiAgICAgICAgdWludDI1NiBmcm9tQmxvY2s7CgogICAgICAgIC8vIGB2YWx1ZWAgaXMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBibG9jayBudW1iZXIKICAgICAgICB1aW50MjU2IHZhbHVlOwogICAgfQoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KTsKCiAgICAvLy8gQG5vdGljZSBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gQm9vc3QoKSBwdWJsaWMgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdLnB1c2goQ2hlY2twb2ludCh7CiAgICAgICAgICAgIGZyb21CbG9jazpibG9jay5udW1iZXIsCiAgICAgICAgICAgIHZhbHVlOnRvdGFsU3VwcGx5CiAgICAgICAgfSkpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF9hbW91bnRgIHRva2VucyB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBkb1RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2VuZCBgX2Ftb3VudGAgdG9rZW5zIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0CiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWAKICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICAvLyBUaGUgc3RhbmRhcmQgRVJDIDIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbmFsaXR5CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CgogICAgICAgIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCB0aGUgY3VycmVudCBibG9jawogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mQXQoX293bmVyLCBibG9jay5udW1iZXIpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZi4gVGhpcyBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIEVSQzIwIGFwcHJvdmUgZnVuY3Rpb24KICAgIC8vLyAgdG8gYmUgYSBsaXR0bGUgYml0IHNhZmVyCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc3kgdG8gcmVhZCB0aGUgYGFsbG93ZWRbXWAgbWFwCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0aGF0IG93bnMgdGhlIHRva2VuCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgb2YgX293bmVyIHRoYXQgX3NwZW5kZXIgaXMgYWxsb3dlZAogICAgLy8vICB0byBzcGVuZAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8vLyBAZGV2IFF1ZXJpZXMgdGhlIGJhbGFuY2Ugb2YgYF9vd25lcmAgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSBiYWxhbmNlIGlzIHF1ZXJpZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIGF0IGBfYmxvY2tOdW1iZXJgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2ZBdChhZGRyZXNzIF9vd25lciwgdWludCBfYmxvY2tOdW1iZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoKGJhbGFuY2VzW19vd25lcl0ubGVuZ3RoID09IDApIHx8IChiYWxhbmNlc1tfb3duZXJdWzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQoYmFsYW5jZXNbX293bmVyXSwgX2Jsb2NrTnVtYmVyKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBpcyB0aGUgYWN0dWFsIHRyYW5zZmVyIGZ1bmN0aW9uIGluIHRoZSB0b2tlbiBjb250cmFjdCwgaXQgY2FuCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgaW50ZXJuYWwgewoKICAgICAgICAvLyBEbyBub3QgYWxsb3cgdHJhbnNmZXIgdG8gMHgwIG9yIHRoZSB0b2tlbiBjb250cmFjdCBpdHNlbGYKICAgICAgICByZXF1aXJlKChfdG8gIT0gMCkgJiYgKF90byAhPSBhZGRyZXNzKHRoaXMpKSAmJiAoX2Ftb3VudCAhPSAwKSk7CgogICAgICAgIC8vIEZpcnN0IHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgLy8gc2VuZGluZyB0aGUgdG9rZW5zCiAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2ZBdChfZnJvbSwgYmxvY2subnVtYmVyKTsKICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19mcm9tXSwgcHJldmlvdXNCYWxhbmNlRnJvbS5zdWIoX2Ftb3VudCkpOwoKICAgICAgICAvLyBUaGVuIHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgLy8gcmVjZWl2aW5nIHRoZSB0b2tlbnMKICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2ZBdChfdG8sIGJsb2NrLm51bWJlcik7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfdG9dLCBwcmV2aW91c0JhbGFuY2VUby5hZGQoX2Ftb3VudCkpOwoKICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4KICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgICB9CgogICAgLy8vIEBkZXYgYGdldFZhbHVlQXRgIHJldHJpZXZlcyB0aGUgbnVtYmVyIG9mIHRva2VucyBhdCBhIGdpdmVuIGJsb2NrIG51bWJlcgogICAgLy8vIEBwYXJhbSBjaGVja3BvaW50cyBUaGUgaGlzdG9yeSBvZiB2YWx1ZXMgYmVpbmcgcXVlcmllZAogICAgLy8vIEBwYXJhbSBfYmxvY2sgVGhlIGJsb2NrIG51bWJlciB0byByZXRyaWV2ZSB0aGUgdmFsdWUgYXQKICAgIC8vLyBAcmV0dXJuIFRoZSBudW1iZXIgb2YgdG9rZW5zIGJlaW5nIHF1ZXJpZWQKICAgIGZ1bmN0aW9uIGdldFZhbHVlQXQoQ2hlY2twb2ludFtdIHN0b3JhZ2UgY2hlY2twb2ludHMsIHVpbnQgX2Jsb2NrKSBpbnRlcm5hbCB2aWV3ICByZXR1cm5zICh1aW50KSB7CiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDsKCiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIHRoZSBhY3R1YWwgdmFsdWUKICAgICAgICBpZiAoX2Jsb2NrID49IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLmZyb21CbG9jaykKICAgICAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLnZhbHVlOwogICAgICAgIGlmIChfYmxvY2sgPCBjaGVja3BvaW50c1swXS5mcm9tQmxvY2spIHJldHVybiAwOwoKICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIG9mIHRoZSB2YWx1ZSBpbiB0aGUgYXJyYXkKICAgICAgICB1aW50IG1pbiA9IDA7CiAgICAgICAgdWludCBtYXggPSBjaGVja3BvaW50cy5sZW5ndGggLSAxOwogICAgICAgIHdoaWxlIChtYXggPiBtaW4pIHsKICAgICAgICAgICAgdWludCBtaWQgPSAobWF4ICsgbWluICsgMSkgLyAyOwogICAgICAgICAgICBpZiAoY2hlY2twb2ludHNbbWlkXS5mcm9tQmxvY2sgPD0gX2Jsb2NrKSB7CiAgICAgICAgICAgICAgICBtaW4gPSBtaWQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtYXggPSBtaWQgLSAxOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBjaGVja3BvaW50c1ttaW5dLnZhbHVlOwogICAgfQoKICAgIC8vLyBAZGV2IGB1cGRhdGVWYWx1ZUF0Tm93YCB1c2VkIHRvIHVwZGF0ZSB0aGUgYGJhbGFuY2VzYCBtYXAgYW5kIHRoZQogICAgLy8vICBgdG90YWxTdXBwbHlIaXN0b3J5YAogICAgLy8vIEBwYXJhbSBjaGVja3BvaW50cyBUaGUgaGlzdG9yeSBvZiBkYXRhIGJlaW5nIHVwZGF0ZWQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBuZXcgbnVtYmVyIG9mIHRva2VucwogICAgZnVuY3Rpb24gdXBkYXRlVmFsdWVBdE5vdyhDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICBpZiAoKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSB8fCAoY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoIC0gMV0uZnJvbUJsb2NrIDwgYmxvY2subnVtYmVyKSkgewogICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2UgbmV3Q2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCsrXTsKICAgICAgICAgICAgbmV3Q2hlY2tQb2ludC5mcm9tQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQudmFsdWUgPSBfdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgQ2hlY2twb2ludCBzdG9yYWdlIG9sZENoZWNrUG9pbnQgPSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgb2xkQ2hlY2tQb2ludC52YWx1ZSA9IF92YWx1ZTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgSGVscGVyIGZ1bmN0aW9uIHRvIHJldHVybiBhIG1pbiBiZXR3ZWVuIHRoZSB0d28gdWludHMKICAgIGZ1bmN0aW9uIG1pbih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9Cn0KCgovLyBAdGl0bGUgRXRoZXJDb250YWluZXIgdG8gc3RvcmUgZXRoZXIgZm9yIGludmVzdG9yIHRvIHdpdGhkcmF3CmNvbnRyYWN0IEJvb3N0Q29udGFpbmVyIHsKICAgIHVzaW5nIFNhZmVNYXRoRm9yQm9vc3QgZm9yIHVpbnQyNTY7CgogICAgLy8gbXVsdGlTaWdBZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBtdWx0aVNpZ0FkZHJlc3M7CiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICAvLyBCb29zdCB0b2tlbgogICAgQm9vc3QgcHVibGljIGJvb3N0OwoKICAgIC8vIEFycmF5IGFib3V0IGV0aGVyIGluZm9ybWF0aW9uIHBlciBtb250aCBmb3IgZGl2aWRlbmQKICAgIEluZm9Gb3JEZXBvc2l0W10gcHVibGljIGFycmF5SW5mb0ZvckRlcG9zaXQ7CgogICAgLy8gTWFwcGluZyB0byBjaGVjayB0aGlzIGFjY291bnQgaGFzIGFscmVhZHkgd2l0aGRyYXduCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIG1hcENvbXBsZXRpb25OdW1iZXJGb3JXaXRoZHJhdzsKCiAgICAvLyBFdmVudAogICAgZXZlbnQgTG9nRGVwb3NpdEZvckRpdmlkZW5kKHVpbnQyNTYgYmxvY2tOdW1iZXIsIHVpbnQyNTYgZXRoZXJBb3VudEZvckRpdmlkZW5kKTsKICAgIGV2ZW50IExvZ1dpdGhkcmF3YWwoYWRkcmVzcyBpbmRleGVkIHRva2VuSG9sZGVyLCB1aW50MjU2IGV0aGVyVmFsdWUpOwogICAgZXZlbnQgTG9nUGF1c2UoKTsKICAgIGV2ZW50IExvZ1VucGF1c2UoKTsKCiAgICAvLyBTdHJ1Y3Qgb2YgZGVwb3NpdCBpbmZvbWF0aW9uIGZvciBkaXZpZGVuZAogICAgc3RydWN0IEluZm9Gb3JEZXBvc2l0IHsKICAgICAgICB1aW50MjU2IGJsb2NrTnVtYmVyOwogICAgICAgIHVpbnQyNTYgZGVwb3NpdGVkRXRoZXI7CiAgICB9CgogICAgLy8gQ2hlY2sgdGhpcyBtc2cuc2VuZGVyIGhhcyByaWdodCB0byB3aXRoZHJhdwogICAgbW9kaWZpZXIgaXNOb3RDb21wbGV0ZWRGb3JXaXRoZHJhd2FsKGFkZHJlc3MgX2FkZHJlc3MpIHsKICAgICAgICByZXF1aXJlKG1hcENvbXBsZXRpb25OdW1iZXJGb3JXaXRoZHJhd1tfYWRkcmVzc10gIT0gYXJyYXlJbmZvRm9yRGVwb3NpdC5sZW5ndGgpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gQ2hlY2sgd2hldGhlciBtc2cuc2VuZGVyIGlzIG11bHRpU2lnIG9yIG5vdAogICAgbW9kaWZpZXIgb25seU11bHRpU2lnKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBtdWx0aVNpZ0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vIE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZShwYXVzZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgY29uc3RydWN0b3IKICAgIC8vLyBAcGFyYW0gX2Jvb3N0QWRkcmVzcyBUaGUgYWRkcmVzcyBvZiBib29zdCB0b2tlbgogICAgLy8vIEBwYXJhbSBfbXVsdGlTaWdBZGRyZXNzIFRoZSBhZGRyZXNzIG9mIG11bHRpU2lnV2FsbGV0IHRvIHNlbmQgZXRoZXIKICAgIGZ1bmN0aW9uIEJvb3N0Q29udGFpbmVyKGFkZHJlc3MgX2Jvb3N0QWRkcmVzcywgYWRkcmVzcyBfbXVsdGlTaWdBZGRyZXNzKSBwdWJsaWMgewogICAgICAgIGJvb3N0ID0gQm9vc3QoX2Jvb3N0QWRkcmVzcyk7CiAgICAgICAgbXVsdGlTaWdBZGRyZXNzID0gX211bHRpU2lnQWRkcmVzczsKICAgIH0KCiAgICAvLy8gQGRldiBEZXBvc2l0IGBtc2cudmFsdWVgIGluIGFycmF5SW5mb0ZvckRlcG9zaXQKICAgIC8vLyBAcGFyYW0gX2Jsb2NrTnVtYmVyIFRoZSBibG9ja051bWJlciB0byBzcGVjaWZ5IHRoZSB0b2tlbiBhbW91bnQgdGhhdCBlYWNoIGFkZHJlc3MgaGFzIGF0IHRoaXMgYmxvY2tOdW1iZXIKICAgIGZ1bmN0aW9uIGRlcG9zaXRGb3JEaXZpZGVuZCh1aW50MjU2IF9ibG9ja051bWJlcikgcHVibGljIHBheWFibGUgb25seU11bHRpU2lnIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7CgogICAgICAgIGFycmF5SW5mb0ZvckRlcG9zaXQucHVzaChJbmZvRm9yRGVwb3NpdCh7YmxvY2tOdW1iZXI6X2Jsb2NrTnVtYmVyLCBkZXBvc2l0ZWRFdGhlcjptc2cudmFsdWV9KSk7CgogICAgICAgIExvZ0RlcG9zaXRGb3JEaXZpZGVuZChfYmxvY2tOdW1iZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBkZXYgV2l0aGRyYXcgZGl2aWRlbmRFdGhlcgogICAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgaXNOb3RDb21wbGV0ZWRGb3JXaXRoZHJhd2FsKG1zZy5zZW5kZXIpIHdoZW5Ob3RQYXVzZWQgewoKICAgICAgICAvLyBnZXQgd2l0aGRyYXdBbW91bnQgdGhhdCBtc2cuc2VuZGVyIGNhbiB3aXRoZHJhdwogICAgICAgIHVpbnQyNTYgd2l0aGRyYXdBbW91bnQgPSBnZXRXaXRoZHJhd1ZhbHVlKG1zZy5zZW5kZXIpOwoKICAgICAgICByZXF1aXJlKHdpdGhkcmF3QW1vdW50ID4gMCk7CgogICAgICAgIC8vIHNldCB0aGUgYXJyYXlJbmZvRm9yRGVwb3NpdC5sZW5ndGggdG8gbWFwQ29tcGxldGlvbk51bWJlckZvcldpdGhkcmF3CiAgICAgICAgbWFwQ29tcGxldGlvbk51bWJlckZvcldpdGhkcmF3W21zZy5zZW5kZXJdID0gYXJyYXlJbmZvRm9yRGVwb3NpdC5sZW5ndGg7CgogICAgICAgIC8vIGV4ZWN1dGUgdHJhbnNmZXIKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHdpdGhkcmF3QW1vdW50KTsKCiAgICAgICAgLy8gc2VuZCBldmVudAogICAgICAgIExvZ1dpdGhkcmF3YWwobXNnLnNlbmRlciwgd2l0aGRyYXdBbW91bnQpOwogICAgfQoKICAgIC8vLyBAZGV2IENoYW5nZSBtdWx0aVNpZ0FkZHJlc3MKICAgIC8vLyBAcGFyYW0gX2FkZHJlc3MgTXVsdGlTaWdBZGRyZXNzCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aVNpZ0FkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgcHVibGljIG9ubHlNdWx0aVNpZyB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICBtdWx0aVNpZ0FkZHJlc3MgPSBfYWRkcmVzczsKICAgIH0KCiAgICAvLy8gQGRldiBHZXQgdGhlIHJvdyBsZW5ndGggb2YgYXJyYXlJbmZvRm9yRGVwb3NpdAogICAgLy8vIEByZXR1cm4gVGhlIGxlbmd0aCBvZiBhcnJheUluZm9Gb3JEZXBvc2l0CiAgICBmdW5jdGlvbiBnZXRBcnJheUluZm9Gb3JEZXBvc2l0Q291bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlc3VsdCkgewogICAgICAgIHJldHVybiBhcnJheUluZm9Gb3JEZXBvc2l0Lmxlbmd0aDsKICAgIH0KCiAgICAvLy8gQGRldiBHZXQgd2l0aGRyYXcgdmFsdWUKICAgIC8vLyBAcGFyYW0gX2FkZHJlc3MgVGhlIGFjY291bnQgdGhhdCBoYXMgdGhpcyBpbmZvcm1hdGlvbgogICAgLy8vIEByZXR1cm4gV2l0aGRyYXdBbW91bnQgdGhhdCBhY2NvdW50IGNhbiB3aXRoZHJhdwogICAgZnVuY3Rpb24gZ2V0V2l0aGRyYXdWYWx1ZShhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHdpdGhkcmF3QW1vdW50KSB7CiAgICAgICAgdWludDI1NiB2YWxpZE51bWJlciA9IG1hcENvbXBsZXRpb25OdW1iZXJGb3JXaXRoZHJhd1tfYWRkcmVzc107CiAgICAgICAgdWludDI1NiBibG9ja051bWJlcjsKICAgICAgICB1aW50MjU2IGRlcG9zaXRlZEV0aGVyOwogICAgICAgIHVpbnQyNTYgdG9rZW5BbW91bnQ7CgogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGFycmF5SW5mb0ZvckRlcG9zaXQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGkgPCB2YWxpZE51bWJlcikgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGdldCBibG9ja051bWJlciBhbmQgZGVwb3NpdGVkRXRoZXIgYmFzZWQgb24gdGhlIHZhbGlkTnVtYmVyCiAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gYXJyYXlJbmZvRm9yRGVwb3NpdFtpXS5ibG9ja051bWJlcjsKICAgICAgICAgICAgZGVwb3NpdGVkRXRoZXIgPSBhcnJheUluZm9Gb3JEZXBvc2l0W2ldLmRlcG9zaXRlZEV0aGVyOwoKICAgICAgICAgICAgLy8gZ2V0IHRoZSBhbW91bnQgb2YgQm9vc3QgdG9rZW4gdGhhdCBtc2cuc2VuZGVyIGhhZCBiYXNlZCBvbiBibG9ja051bWJlcgogICAgICAgICAgICB0b2tlbkFtb3VudCA9IGJvb3N0LmJhbGFuY2VPZkF0KF9hZGRyZXNzLCBibG9ja051bWJlcik7CgogICAgICAgICAgICAvLyB0b2tlbkFtb3VudCAqIGRlcG9zaXRlZEV0aGVyIC8gdG90YWxTdXBwbHkoMTAwLDAwMCwwMDApCiAgICAgICAgICAgIHdpdGhkcmF3QW1vdW50ID0gd2l0aGRyYXdBbW91bnQuYWRkKHRva2VuQW1vdW50Lm11bChkZXBvc2l0ZWRFdGhlcikuZGl2KGJvb3N0LnRvdGFsU3VwcGx5KCkpKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgZGVzdHJveSB0aGlzIGNvbnRyYWN0IHRvIHJldHVybiBldGhlciB0byBtdWx0aVNpZ0FkZHJlc3Mgc3RvcmVkIGluIHRoaXMgY29udHJhY3QKICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSBwdWJsaWMgb25seU11bHRpU2lnIHdoZW5QYXVzZWQgewogICAgICAgIHNlbGZkZXN0cnVjdChtdWx0aVNpZ0FkZHJlc3MpOwogICAgfQoKICAgIC8vLyBAZGV2IGNhbGxlZCBieSB0aGUgbXVsdGlTaWdXYWxsZXQgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgIGZ1bmN0aW9uIHBhdXNlKCkgcHVibGljIG9ubHlNdWx0aVNpZyB3aGVuTm90UGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgIExvZ1BhdXNlKCk7CiAgICB9CgogICAgLy8vIEBkZXYgY2FsbGVkIGJ5IHRoZSBtdWx0aVNpZ1dhbGxldCB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAgZnVuY3Rpb24gdW5wYXVzZSgpIHB1YmxpYyBvbmx5TXVsdGlTaWcgd2hlblBhdXNlZCB7CiAgICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICAgICAgTG9nVW5wYXVzZSgpOwogICAgfQoKICAgIC8vLyBAZGV2IHNlbmQgcHJvZml0IHRvIGludmVzdG9yIHdoZW4gc3RhY2sgZGVwdGggaGFwcGVuZWQuIFRoaXMgcmVxdWlyZSBtdWx0aXNpZyBhbmQgcGF1c2VkIHN0YXRlCiAgICAvLy8gQHBhcmFtIF9hZGRyZXNzIFRoZSBhY2NvdW50IHJlY2VpdmVzIGV0aAogICAgLy8vIEBwYXJhbSBfYW1vdW50IGV0aGVyIHZhbHVlIHRoYXQgaW52ZXN0b3Igd2lsbCByZWNlaXZlCiAgICBmdW5jdGlvbiBzZW5kUHJvZml0KGFkZHJlc3MgX2FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIGlzTm90Q29tcGxldGVkRm9yV2l0aGRyYXdhbChfYWRkcmVzcykgb25seU11bHRpU2lnIHdoZW5QYXVzZWQgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CgogICAgICAgIG1hcENvbXBsZXRpb25OdW1iZXJGb3JXaXRoZHJhd1tfYWRkcmVzc10gPSBhcnJheUluZm9Gb3JEZXBvc2l0Lmxlbmd0aDsKCiAgICAgICAgLy8gZXhlY3V0ZSB0cmFuc2ZlcgogICAgICAgIF9hZGRyZXNzLnRyYW5zZmVyKF9hbW91bnQpOwoKICAgICAgICAvLyBzZW5kIGV2ZW50CiAgICAgICAgTG9nV2l0aGRyYXdhbChfYWRkcmVzcywgX2Ftb3VudCk7CiAgICB9Cn0='.
	

]
