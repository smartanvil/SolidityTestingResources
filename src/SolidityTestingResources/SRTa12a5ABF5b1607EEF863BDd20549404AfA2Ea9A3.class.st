Class {
	#name : #SRTa12a5ABF5b1607EEF863BDd20549404AfA2Ea9A3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa12a5ABF5b1607EEF863BDd20549404AfA2Ea9A3 >> base64 [
	^ ''.
	

]
