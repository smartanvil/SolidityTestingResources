Class {
	#name : #SRTB61054846c7BC1Da6629a424fFFDD24a48878Af5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTB61054846c7BC1Da6629a424fFFDD24a48878Af5 >> base64 [
	^ ''.
	

]
