Class {
	#name : #SRT2931b36154a10bde01373af56623705d128155b5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2931b36154a10bde01373af56623705d128155b5 >> base64 [
	^ ''.
	

]
