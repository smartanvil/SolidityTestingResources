Class {
	#name : #SRT9aE2a7E2e7E7ffff033DcBDBDc1C76789b5F8640,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9aE2a7E2e7E7ffff033DcBDBDc1C76789b5F8640 >> base64 [
	^ ''.
	

]
