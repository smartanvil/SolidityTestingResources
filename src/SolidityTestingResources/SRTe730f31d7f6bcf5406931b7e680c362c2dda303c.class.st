Class {
	#name : #SRTe730f31d7f6bcf5406931b7e680c362c2dda303c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe730f31d7f6bcf5406931b7e680c362c2dda303c >> base64 [
	^ ''.
	

]
