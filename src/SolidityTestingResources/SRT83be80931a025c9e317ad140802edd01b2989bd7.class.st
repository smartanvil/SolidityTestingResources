Class {
	#name : #SRT83be80931a025c9e317ad140802edd01b2989bd7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT83be80931a025c9e317ad140802edd01b2989bd7 >> base64 [
	^ ''.
	

]
