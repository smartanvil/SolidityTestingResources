Class {
	#name : #SRTc4b4c7776102736093222997cdcd242f3e025be9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4b4c7776102736093222997cdcd242f3e025be9 >> base64 [
	^ ''.
	

]
