Class {
	#name : #SRTe507c467c0f63845eadce5516c9ff5e1a5ebb63a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe507c467c0f63845eadce5516c9ff5e1a5ebb63a >> base64 [
	^ ''.
	

]
