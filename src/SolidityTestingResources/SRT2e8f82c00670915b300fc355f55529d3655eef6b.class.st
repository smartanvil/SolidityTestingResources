Class {
	#name : #SRT2e8f82c00670915b300fc355f55529d3655eef6b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e8f82c00670915b300fc355f55529d3655eef6b >> base64 [
	^ 'Y29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICB0aHJvdzsKICAgIH0KICAgIF87CiAgfQoKfQoKCi8vL1RoaXMgaXMgdGhlIGJsb2NrY2hhaW4gc2lkZSBvZiB0aGUgbm90aWZpZXIuIEhlcmUgc28gdGhhdCBwYXltZW50LCByZWdpc3RlcmluZyxldGMgaXMgcGFpbmxlc3MgYXN5bmMgYW5kCi8vLyBtb3N0IGltcG9ydGFudGx5ICp0cnVzdGxlc3MqIHNpbmNlIHlvdSBjYW4gZXhpdCBhdCBhbnkgdGltZSB0YWtpbmcgeW91ciBmdW5kcyBoYXZpbmcgbG9zdCBub3RoaW5nCgovLy9AYXV0aG9yIDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI0MzI4MmEyZDI0MjAyYzIwMmMyZTIyMmQyNDJjMDMyNDJlMjIyYTJmNmQyMDJjMmUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+Ci8vL0B0aXRsZSBQcmljZSBub3RpZmllcgpjb250cmFjdCBUcmFja2VyIGlzIE93bmFibGV7CiAgICAvLyBUaGlzIHJlcHJlc2VudHMgYSBjbGllbnQgaW4gdGhlIHNpbXBsZXN0IGZvcm0KICAgIC8vIE9ubHkgdHJhY2tzIGEgc2luZ2xlIGN1cnJlbmN5IHBhaXIsIGhhcmRjb2RlZAogICAgc3RydWN0IFNpbXBsZUNsaWVudHsKICAgICAgICB1aW50OCByYXRpbzsvLyByYXRpbyB0cmlnZ2VyCiAgICAgICAgdWludCBkb3NoOy8vIENsaWVudHMgZG9zaAogICAgICAgIHN0cmluZyBIYXNoOy8vIHBob25lIG51bWJlciBhcyBhIHV0Zi04IHN0cmluZywgb3IgYSBoYXNoIG9mIG9uZSBmcm9tIHdlYnNlcnZpY2UKICAgICAgICB1aW50IHRpbWU7Ly8gbGFzdCB0aW1lIGNsaWVudCB3YXMgZGViaXRlZC4gU3RhcnRzIGFzIGNyZWF0aW9uIHRpbWUKICAgIH0KICAgIAogICAgLy8gVGhpcyBpcyB0aGUgbWFwcGluZyBiZXR3ZWVuIGV0aCBhZGRyIGFuZCBjbGllbnQgc3RydWN0cwogICAgbWFwcGluZyhhZGRyZXNzID0+IFNpbXBsZUNsaWVudCkgcHVibGljIENsaWVudHM7CiAgICAvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIGN1cnJlbnQgdG90YWwgb2JsaWdhdGlvbnMgdG8gY2xpZW50cwogICAgdWludCBwdWJsaWMgb2JsaWdhdGlvbnM7CiAgICAKICAgIC8vIEV2ZW50cyBmb3IgY2xpZW50cyByZWdpc3RlcmluZyBhbmQgbGVhdmluZwogICAgLy8gVGhpcyBtZWFucyByZWNvZ25pemluZyB0aGUgc2V0IG9mIGN1cnJlbnQgY2xpZW50cywgZm9yIHNlbmRpbmcgYW5kIGRlYml0aW5nIGNhbiBiZSBkb25lIG9mZi1jaGFpbgogICAgZXZlbnQgQ2xpZW50UmVnaXN0ZXJlZChhZGRyZXNzIENsaWVudCk7CiAgICBldmVudCBDbGllbnRFeGl0ZWQoYWRkcmVzcyBDbGllbnQpOwogICAgCiAgICAvLyBDb25zdGFudHMgdXNlZCBmb3IgY29uZmlndXJhdGlvbgogICAgdWludCBjb25zdGFudCBQZXJpb2QgPSAxIGRheXM7IC8vIGFtb3VudCBvZiB0aW1lIGJldHdlZW4gZGViaXRzIEVSUk9SIHNldCB0aGVzZSB2YWx1ZXMgZm9yIHJlbGVhc2UKICAgIHVpbnQgY29uc3RhbnQgRmVlID0gMSBmaW5uZXk7IC8vIGFtb3VudCBkZWJpdGVkIHBlciBwZXJpb2QKICAgIHVpbnQ4IGNvbnN0YW50IE1pbmludW1QZXJjZW50ID0gNTsgLy8gdGhpcyBpcyB0aGUgbWluaW11bSByYXRpbyBhbGxvd2VkLiBUT0RPIHNldCB0byA1IGZvciBzbXMgY29udHJhY3QKCiAgICAKICAgIC8vIFRoaXMgZnVuY3Rpb24gcmVnaXN0ZXJzIGEgbmV3IGNsaWVudCwgYW5kIGNhbiBiZSB1c2VkIHRvIGFkZCBmdW5kcyBvciBjaGFuZ2UgcmF0aW8KICAgIGZ1bmN0aW9uIFJlZ2lzdGVyKHVpbnQ4IHJhdGlvLCBzdHJpbmcgSGFzaCkgcGF5YWJsZSBleHRlcm5hbCB7CiAgICAgICAgdmFyIE5ld0NsaWVudCA9IFNpbXBsZUNsaWVudChyYXRpbz49TWluaW51bVBlcmNlbnQ/cmF0aW86TWluaW51bVBlcmNlbnQsIG1zZy52YWx1ZSwgSGFzaCwgbm93KTsgLy8gY3JlYXRlIG5ldyBjbGllbnQKICAgICAgICAvLyBub3RlIHRoYXQgcmF0aW8gaXMgbm90IGFsbG93ZWQgdG8gYmUgc21hbGxlciB0aGFuIE1pbmludW1QZXJjZW50JQogICAgICAgIC8vIEluIGNhc2Ugc29tZW9uZSByZWdpc3RlcnMgb3ZlciB0aGVtc2VsdmVzLCBrZWVwIHRoZWlyIG1vbmV5IGFyb3VuZAogICAgICAgIE5ld0NsaWVudC5kb3NoICs9IENsaWVudHNbbXNnLnNlbmRlcl0uZG9zaDsgLy8ga2VlcCB0aGVpciBvbGQgYWNjb3VudCBydW5uaW5nCiAgICAgICAgQ2xpZW50c1ttc2cuc2VuZGVyXSA9IE5ld0NsaWVudDsgLy8gcmVnaXN0ZXIgdGhlbQogICAgICAgIC8vIG5vdGlmeSB0aGUgbGlzdG5lcnMKICAgICAgICBDbGllbnRSZWdpc3RlcmVkKG1zZy5zZW5kZXIpOwogICAgICAgIC8vIGFuZCBpbmNyZW1lbnQgY3VycmVudCB0b3RhbCBvYmxpZ2F0aW9ucwogICAgICAgIG9ibGlnYXRpb25zICs9IG1zZy52YWx1ZTsKICAgICAgICAKICAgIH0KICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzdG9wIHVzaW5nIHRoZSBzZXJ2aWNlCiAgICBmdW5jdGlvbiBFeGl0KCkgZXh0ZXJuYWwgewogICAgICAgIHVpbnQgdG9zZW5kID0gQ2xpZW50c1ttc2cuc2VuZGVyXS5kb3NoOwogICAgICAgIC8vIEFuZCByZW1vdmUgdGhlIG1vbmV5IHRoZXkgd2l0aGRyZXcgZnJvbSBvdXIgb2JsaWdhdGlvbnMKICAgICAgICBvYmxpZ2F0aW9ucyAtPSB0b3NlbmQ7CiAgICAgICAgLy8gaWYgdGhlIHNlbmRpbmcgZmFpbHMsIGFsbCBvZiB0aGlzIHVud2luZHMuCiAgICAgICAgQ2xpZW50c1ttc2cuc2VuZGVyXS5kb3NoPSAwOyAvLyB3ZSBzZXQgaXQgaGVyZSB0byBpdHMgc2FmZSB0byBzZW5kIG1vbmV5CiAgICAgICAgLy8gTm90aWZ5IGxpc3RuZXJzIGNsaWVudCBoYXMgbGVmdAogICAgICAgIENsaWVudEV4aXRlZChtc2cuc2VuZGVyKTsKICAgICAgICAvLyBzZW5kIHRvIHRoZSBjYWxsZXIgdGhlIG1vbmV5IHRoZWlyIHN0cnVjdHVyZSBzYXlzIHRoZXkgaGF2ZQogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIodG9zZW5kKTsKICAgICAgICAKICAgIH0KICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBjaGFuZ2UgdGhlIHBob25lIG51bWJlciBpbiB0aGUgc2VydmljZQogICAgZnVuY3Rpb24gQ2hhbmdlTnVtYmVyKHN0cmluZyBOZXdIYXNoKSBleHRlcm5hbCB7IC8vIFRoZSB3YXkgdGhpcyBtb2RpZmllcyBzdGF0ZSBpcyBpbnZpc2libGUgdG8gdGhlIGNvbnRyYWN0LHNvIG5vIHByb2JsZW1vCiAgICAgICAgQ2xpZW50c1ttc2cuc2VuZGVyXS5IYXNoID0gTmV3SGFzaDsKICAgICAgICBDbGllbnRFeGl0ZWQobXNnLnNlbmRlcik7CiAgICAgICAgQ2xpZW50UmVnaXN0ZXJlZChtc2cuc2VuZGVyKTsgLy8gVGhpcyBjaGVhcCBzZXF1ZW5jZSBvZiBldmVudHMgY2hhbmdlcyB0aGUgbnVtYmVyLCBhbmQgbm90aWZpZXMgdGhlIGJhY2tlbmQgc2VydmljZQogICAgfQogICAgLy8gVXNlZCB0byBjaGFyZ2UgYSBjbGllbnQKICAgIGZ1bmN0aW9uIERlYml0Q2xpZW50KGFkZHJlc3MgY2xpZW50KSBleHRlcm5hbHsvLyBzaW5jZSBvd25lciBpcyBwcm92YWJsZSBhbiBFT0MsIGNhbnQgYWJ1c2UgcmVlbnRyYW5jeQogICAgICAgIHVpbnQgVG90YWxGZWU7CiAgICAgICAgdWludCB0aW1lZGlmID0gbm93LUNsaWVudHNbY2xpZW50XS50aW1lOyAvLyBob3cgbG9uZyBzaW5jZSBsYXN0IGNhbGwgb24gdGhpcyBjbGllbnQKICAgICAgICB1aW50IHBlcmlvZG11bHRpID0gdGltZWRpZi9QZXJpb2Q7IC8vIEhvdyBtYW55IHBlcmlvZHMgcGFzc2VkCiAgICAgICAgaWYocGVyaW9kbXVsdGk+MCl7IC8vIHRpbWVkaWYgaXMgPj0gUGVyaW9kCiAgICAgICAgICBUb3RhbEZlZSA9IEZlZSpwZXJpb2RtdWx0aTsgLy8gMSBwZXJpb2QgZmVlIHBlciBtdWx0aXBsZSBvZiBwZXJpb2QKICAgICAgICB9ZWxzZXsvLyBpdCB3YXMgc21hbGxlciB0aGFuIHBlcmlvZC4gV2FzdGVkIGdhcwogICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIGlmKENsaWVudHNbY2xpZW50XS5kb3NoIDwgVG90YWxGZWUpeyAvLyBub3QgZW5vdWdoCiAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgQ2xpZW50c1tjbGllbnRdLmRvc2ggLT0gVG90YWxGZWU7CiAgICAgICAgb2JsaWdhdGlvbnMgLT0gVG90YWxGZWU7CiAgICAgICAgQ2xpZW50c1tjbGllbnRdLnRpbWUgKz0gUGVyaW9kKnBlcmlvZG11bHRpOyAvLyBjbGllbnQgZ290IGNoYXJnZWQgZm9yIHBlcmlvZG11bHRpIHBlcmlvZHMsIHNvIGFkZCB0aGF0IHRvIHRoZWlyIHRpbWUgcGFpZAogICAgfQogICAgLy8gdXNlZCB0byBjaGFyZ2UgZm9yIGEgc2luZ2xlIHRpbWUgcGVyaW9kLCBpbiBjYXNlIGNsaWVudCBkb2VzbnQgaGF2ZSBlbm91Z2ggZG9zaCB0byBwYXkgYWxsIGZlZXMgCiAgICBmdW5jdGlvbiBEZWJpdENsaWVudE9uY2UoYWRkcmVzcyBjbGllbnQpIGV4dGVybmFsey8vIHNpbmNlIG93bmVyIGlzIHByb3ZhYmxlIGFuIEVPQywgY2FudCBhYnVzZSByZWVudHJhbmN5CiAgICAgICAgdWludCB0aW1lZGlmID0gbm93LUNsaWVudHNbY2xpZW50XS50aW1lOyAvLyBob3cgbG9uZyBzaW5jZSBsYXN0IGNhbGwgb24gdGhpcyBjbGllbnQKICAgICAgICBpZih0aW1lZGlmPFBlcmlvZCl7IC8vIHRvbyBzb29uLCB3YXN0ZWQuCiAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgaWYoQ2xpZW50c1tjbGllbnRdLmRvc2ggPCBGZWUpeyAvLyBub3QgZW5vdWdoCiAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgQ2xpZW50c1tjbGllbnRdLmRvc2ggLT0gRmVlOwogICAgICAgIG9ibGlnYXRpb25zIC09IEZlZTsKICAgICAgICBDbGllbnRzW2NsaWVudF0udGltZSArPSBQZXJpb2Q7IC8vIGNsaWVudCBnb3QgY2hhcmdlZCBmb3IgMSBwZXJpb2QsIHNvIGFkZCB0aGF0IHRvIHRoZWlyIHRpbWUgcGFpZAogICAgfQogICAgCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gd2l0aGRyYXcgZXRoZXIKICAgIGZ1bmN0aW9uIFdpdGhkcmF3KHVpbnQgYW1vdW50KSBvbmx5T3duZXIgZXh0ZXJuYWx7IC8vIHNpbmNlIG93bmVyIGlzIHByb3ZhYmxlIGFuIEVPQywgY2FudCBhYnVzZSByZWVudHJhbmN5CiAgICAgICAgaWYodGhpcy5iYWxhbmNlIDw9IG9ibGlnYXRpb25zKXsgLy8gdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZCBmcm9tIHByb2R1Y3Rpb24gY29kZS4gQnV0IHRoZW9yZXRpY2FsbHkgaXQgY2FuIG5ldmVyIGhhcHBlbgogICAgICAgICAgICB0aHJvdzsgLy8gU29tZWhvdywgd2UgY2FudCBldmVuIGNvdmVyIG91ciBvYmxpZ2F0aW9ucy4gVGhpcyBtZWFucyBzb21ldGhpbmcgdmVyeSB3cm9uZyBoYXMgaGFwcGVuZWQKICAgICAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsvLyBUaGlzIHNob3VsZCBiZSBpbXBvc3NpYmxlLCBidXQgaXQgbWVhbnMgSSBjYW4gbWFudWFsbHkgcmVpbWJ1cnNlIGlmIFNIVEYKICAgICAgICB9CiAgICAgICAgaWYoKHRoaXMuYmFsYW5jZSAtIG9ibGlnYXRpb25zKSA8PSBhbW91bnQgKXsvLyBhdmFpbGFibGUgYmFsYW5jZSBkb2VzbnQgY292ZXIgd2l0aGRyYXdhbAogICAgICAgICAgICB0aHJvdzsgLy8gbm90IGFsbG93ZWQKICAgICAgICB9CiAgICAgICAgb3duZXIudHJhbnNmZXIoYW1vdW50KTsvLyBBbGwgY2hlY2tzIHBhc3NlZCwgdGFrZSB0aGUgbW9uZXkKICAgIH0KfQ=='.
	

]
