Class {
	#name : #SRTf5ce566843abc2c673e23f08a219c2f377c914eb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5ce566843abc2c673e23f08a219c2f377c914eb >> base64 [
	^ ''.
	

]
