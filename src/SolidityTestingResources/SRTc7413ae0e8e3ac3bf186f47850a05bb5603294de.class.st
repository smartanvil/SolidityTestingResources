Class {
	#name : #SRTc7413ae0e8e3ac3bf186f47850a05bb5603294de,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc7413ae0e8e3ac3bf186f47850a05bb5603294de >> base64 [
	^ ''.
	

]
