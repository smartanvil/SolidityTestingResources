Class {
	#name : #SRT4ac1eb291b0115b25c7ce2a189fe2055ea54aa33,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4ac1eb291b0115b25c7ce2a189fe2055ea54aa33 >> base64 [
	^ ''.
	

]
