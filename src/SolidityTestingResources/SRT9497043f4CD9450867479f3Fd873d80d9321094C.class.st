Class {
	#name : #SRT9497043f4CD9450867479f3Fd873d80d9321094C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9497043f4CD9450867479f3Fd873d80d9321094C >> base64 [
	^ 'Y29udHJhY3QgR2FtZU9mVGhyb25lcyB7CiAgICBhZGRyZXNzIHB1YmxpYyB0cnVlR29kczsKICAgIC8vIEtpbmcncyBKZXN0ZXIKICAgIGFkZHJlc3MgcHVibGljIGplc3RlcjsKICAgIC8vIFJlY29yZCB0aGUgbGFzdCBjb2xsZWN0aW9uIHRpbWUKICAgIHVpbnQgcHVibGljIGxhc3RDb2xsZWN0aW9uOwogICAgLy8gUmVjb3JkIGtpbmcgbGlmZQogICAgdWludCBwdWJsaWMgb25UaHJvbmU7CiAgICB1aW50IHB1YmxpYyBraW5nQ29zdDsKICAgIC8vIFBpZ2d5IEJhbmsgQW1vdW50CiAgICB1aW50IHB1YmxpYyBwaWdneUJhbms7CiAgICAvLyBDb2xsZWN0ZWQgRmVlIEFtb3VudAogICAgdWludCBwdWJsaWMgZ29kQmFuazsKICAgIHVpbnQgcHVibGljIGplc3RlckJhbms7CiAgICB1aW50IHB1YmxpYyBraW5nQmFuazsKCiAgICAvLyBUcmFjayB0aGUgY2l0aXplbnMgd2hvIGhlbHBlZCB0byBhcm0gcmFjZQogICAgYWRkcmVzc1tdIHB1YmxpYyBjaXRpemVuc0FkZHJlc3NlczsKICAgIHVpbnRbXSBwdWJsaWMgY2l0aXplbnNBbW91bnRzOwogICAgdWludDMyIHB1YmxpYyB0b3RhbENpdGl6ZW5zOwogICAgdWludDMyIHB1YmxpYyBsYXN0Q2l0aXplblBhaWQ7CiAgICAvLyBUaGUgbWFkIGtpbmcgZXN0YWJsaXNoZXMgdGhlIGdvdmVybm1lbnQKICAgIGFkZHJlc3MgcHVibGljIG1hZEtpbmc7CiAgICAvLyBSZWNvcmQgaG93IG1hbnkgdGltZXMgdGhlIGNhc3RsZSBoYWQgZmVsbAogICAgdWludDMyIHB1YmxpYyByb3VuZDsKICAgIC8vIEFtb3VudCBhbHJlYWR5IHBhaWQgYmFjayBpbiB0aGlzIHJvdW5kCiAgICB1aW50IHB1YmxpYyBhbW91bnRBbHJlYWR5UGFpZEJhY2s7CiAgICAvLyBBbW91bnQgaW52ZXN0ZWQgaW4gdGhpcyByb3VuZAogICAgdWludCBwdWJsaWMgYW1vdW50SW52ZXN0ZWQ7CgogICAgdWludCBjb25zdGFudCBUV0VOVFlfRk9VUl9IT1VSUyA9IDYwICogNjAgKiAyNDsKICAgIHVpbnQgY29uc3RhbnQgUEVBQ0VfUEVSSU9EID0gNjAgKiA2MCAqIDI0MDsKCiAgICBmdW5jdGlvbiBHYW1lT2ZUaHJvbmVzKCkgewogICAgICAgIC8vIERlZmluZSB0aGUgZmlyc3QgY2FzdGxlCiAgICAgICAgdHJ1ZUdvZHMgPSBtc2cuc2VuZGVyOwogICAgICAgIG1hZEtpbmcgPSBtc2cuc2VuZGVyOwogICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgbGFzdENvbGxlY3Rpb24gPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgb25UaHJvbmUgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAga2luZ0Nvc3QgPSAxIGV0aGVyOwogICAgICAgIGFtb3VudEFscmVhZHlQYWlkQmFjayA9IDA7CiAgICAgICAgYW1vdW50SW52ZXN0ZWQgPSAwOwogICAgICAgIHRvdGFsQ2l0aXplbnMgPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHByb3RlY3RLaW5nZG9tKCkgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG1pbmltdW0gYW1vdW50IGlmIHJlYWNoZWQKICAgICAgICBpZiAoYW1vdW50IDwgMTAgZmlubmV5KSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIElmIHRoZSBhbW91bnQgcmVjZWl2ZWQgaXMgbW9yZSB0aGFuIDEwMCBFVEggcmV0dXJuIHRoZSBkaWZmZXJlbmNlCiAgICAgICAgaWYgKGFtb3VudCA+IDEwMCBldGhlcikgewogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gMTAwIGV0aGVyKTsKICAgICAgICAgICAgYW1vdW50ID0gMTAwIGV0aGVyOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIENhc3RsZSBoYXMgZmVsbAogICAgICAgIGlmIChsYXN0Q29sbGVjdGlvbiArIFRXRU5UWV9GT1VSX0hPVVJTIDwgYmxvY2sudGltZXN0YW1wKSB7CiAgICAgICAgICAgIC8vIFNlbmQgdGhlIFBpZ2d5IEJhbmsgdG8gdGhlIGxhc3QgMyBjaXRpemVucwogICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBvbmUgd2hvIGNvbnRyaWJ1dGVkIHRoaXMgbGFzdCAyNCBob3Vycywgbm8gYWN0aW9uIG5lZWRlZAogICAgICAgICAgICBpZiAodG90YWxDaXRpemVucyA9PSAxKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBDaXRpemVuIHdobyBjb250cmlidXRlZCwgaGUgZ2V0cyB0aGUgZnVsbCBQaWdnIEJhbmsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rICogOTUgLyAxMDApOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsQ2l0aXplbnMgPT0gMikgewogICAgICAgICAgICAgICAgLy8gSWYgb25seSAyIGNpdGl6ZW5zIGNvbnRyaWJ1dGVkCiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAxXS5zZW5kKHBpZ2d5QmFuayAqIDYwIC8gMTAwKTsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDJdLnNlbmQocGlnZ3lCYW5rICogMzUgLyAxMDApOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsQ2l0aXplbnMgPj0gMykgewogICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgMyBvciBtb3JlIGNpdGl6ZW5zIHdobyBjb250cmlidXRlZAogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbY2l0aXplbnNBZGRyZXNzZXMubGVuZ3RoIC0gMV0uc2VuZChwaWdneUJhbmsgKiA1MCAvIDEwMCk7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAyXS5zZW5kKHBpZ2d5QmFuayAqIDMwIC8gMTAwKTsKICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDNdLnNlbmQocGlnZ3lCYW5rICogMTUgLyAxMDApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBnb2RCYW5rICs9IHBpZ2d5QmFuayAqIDUgLyAxMDA7CiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgbmV3IFBpZ2d5IEJhbmsKICAgICAgICAgICAgcGlnZ3lCYW5rID0gMDsKCiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgbmV3IENhc3RsZQogICAgICAgICAgICBqZXN0ZXIgPSBtc2cuc2VuZGVyOwoKICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgY2l0aXplbnNBbW91bnRzLnB1c2goYW1vdW50ICogMTEwIC8gMTAwKTsKICAgICAgICAgICAgdG90YWxDaXRpemVucyArPSAxOwogICAgICAgICAgICBpbnZlc3RJblRoZVN5c3RlbShhbW91bnQpOwogICAgICAgICAgICBnb2RBdXRvbWF0aWNDb2xsZWN0RmVlKCk7CiAgICAgICAgICAgIC8vIDk1JSBnb2VzIHRvIHRoZSBQaWdneSBCYW5rCiAgICAgICAgICAgIHBpZ2d5QmFuayArPSBhbW91bnQgKiA5MCAvIDEwMDsKCiAgICAgICAgICAgIHJvdW5kICs9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXMucHVzaChtc2cuc2VuZGVyKTsKICAgICAgICAgICAgY2l0aXplbnNBbW91bnRzLnB1c2goYW1vdW50ICogMTEwIC8gMTAwKTsKICAgICAgICAgICAgdG90YWxDaXRpemVucyArPSAxOwogICAgICAgICAgICBpbnZlc3RJblRoZVN5c3RlbShhbW91bnQpOwoKICAgICAgICAgICAgd2hpbGUgKGNpdGl6ZW5zQW1vdW50c1tsYXN0Q2l0aXplblBhaWRdIDwgKGFkZHJlc3ModGhpcykuYmFsYW5jZSAtIHBpZ2d5QmFuayAtIGdvZEJhbmsgLSBraW5nQmFuayAtIGplc3RlckJhbmspICYmIGxhc3RDaXRpemVuUGFpZCA8PSB0b3RhbENpdGl6ZW5zKSB7CiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tsYXN0Q2l0aXplblBhaWRdLnNlbmQoY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF0pOwogICAgICAgICAgICAgICAgYW1vdW50QWxyZWFkeVBhaWRCYWNrICs9IGNpdGl6ZW5zQW1vdW50c1tsYXN0Q2l0aXplblBhaWRdOwogICAgICAgICAgICAgICAgbGFzdENpdGl6ZW5QYWlkICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24KICAgIGZ1bmN0aW9uKCkgaW50ZXJuYWwgewogICAgICAgIHByb3RlY3RLaW5nZG9tKCk7CiAgICB9CgogICAgZnVuY3Rpb24gaW52ZXN0SW5UaGVTeXN0ZW0odWludCBhbW91bnQpIGludGVybmFsIHsKICAgICAgICAvLyBUaGUgQ2FzdGxlIGlzIHN0aWxsIHVwCiAgICAgICAgbGFzdENvbGxlY3Rpb24gPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgYW1vdW50SW52ZXN0ZWQgKz0gYW1vdW50OwogICAgICAgIC8vIFRoZSBKZXRzdGVyIHRha2VzIDUlCiAgICAgICAgamVzdGVyQmFuayArPSBhbW91bnQgKiA1IC8gMTAwOwogICAgICAgIC8vIFRoZSBtYWQga2luZyB0YWtlcyA1JQogICAgICAgIGtpbmdCYW5rICs9IGFtb3VudCAqIDUgLyAxMDA7CiAgICAgICAgLy8gNSUgZ29lcyB0byB0aGUgUGlnZ3kgQmFuawogICAgICAgIHBpZ2d5QmFuayArPSAoYW1vdW50ICogNSAvIDEwMCk7CgogICAgICAgIGtpbmdBdXRvbWF0aWNDb2xsZWN0RmVlKCk7CiAgICAgICAgamVzdGVyQXV0b21hdGljQ29sbGVjdEZlZSgpOwogICAgfQoKICAgIC8vIFdoZW4gdGhlIG1hZCBraW5nIGRlY2lkZXMgdG8gZ2l2ZSBoaXMgc2VhdCB0byBzb21lb25lIGVsc2UKICAgIC8vIHRoZSBraW5nIGNvc3Qgd2lsbCBiZSByZXNldCB0byAxIGV0aGVyCiAgICBmdW5jdGlvbiBhYmRpY2F0ZSgpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBtYWRLaW5nICYmIG1zZy5zZW5kZXIgIT0gdHJ1ZUdvZHMpIHsKICAgICAgICAgICAgbWFkS2luZy5zZW5kKGtpbmdCYW5rKTsKICAgICAgICAgICAgaWYgKHBpZ2d5QmFuayA+IGtpbmdDb3N0ICogNDAgLyAxMDApIHsKICAgICAgICAgICAgICAgIG1hZEtpbmcuc2VuZChraW5nQ29zdCAqIDQwIC8gMTAwKTsKICAgICAgICAgICAgICAgIHBpZ2d5QmFuayAtPSBraW5nQ29zdCAqIDQwIC8gMTAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgbWFkS2luZy5zZW5kKHBpZ2d5QmFuayk7CiAgICAgICAgICAgICAgICBwaWdneUJhbmsgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBtYWRLaW5nID0gdHJ1ZUdvZHM7CiAgICAgICAgICAgIGtpbmdDb3N0ID0gMSBldGhlcjsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbXVyZGVyKCkgewogICAgICAgIHVpbnQgYW1vdW50ID0gMTAwIGZpbm5leTsKICAgICAgICBpZiAobXNnLnZhbHVlID49IGFtb3VudCAmJiBtc2cuc2VuZGVyICE9IGplc3RlcikgewogICAgICAgICAgICAvLyByZXR1cm4gamVzdGVyCiAgICAgICAgICAgIGplc3Rlci5zZW5kKGplc3RlckJhbmspOwogICAgICAgICAgICBqZXN0ZXJCYW5rID0gMDsKCiAgICAgICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUgLSBhbW91bnQpOwogICAgICAgICAgICBpbnZlc3RJblRoZVN5c3RlbShhbW91bnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgIH0KCiAgICAvLyBBbnlvbmUgY2FuIHVzdXJwYXRpb24gdGhlIGtpbmdzaGlwCiAgICBmdW5jdGlvbiB1c3VycGF0aW9uKCkgewogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIC8vIEFkZCBtb3JlIG1vbmV5IGZvciBraW5nIHVzdXJwYXRpb24gY29zdAogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG1hZEtpbmcpIHsKICAgICAgICAgICAgaW52ZXN0SW5UaGVTeXN0ZW0oYW1vdW50KTsKICAgICAgICAgICAga2luZ0Nvc3QgKz0gYW1vdW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChvblRocm9uZSArIFBFQUNFX1BFUklPRCA8PSBibG9jay50aW1lc3RhbXAgJiYgYW1vdW50ID49IGtpbmdDb3N0ICogMTUwIC8gMTAwKSB7CiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIGZlZXMgdG8gYmVmb3JlIGtpbmcKICAgICAgICAgICAgICAgIG1hZEtpbmcuc2VuZChraW5nQmFuayk7CiAgICAgICAgICAgICAgICAvLyBvZmZlciBzYWNyaWZpY2VzIHRvIHRoZSBHb2RzCiAgICAgICAgICAgICAgICBnb2RCYW5rICs9IGFtb3VudCAqIDUgLyAxMDA7CiAgICAgICAgICAgICAgICAvLyBuZXcga2luZwogICAgICAgICAgICAgICAga2luZ0Nvc3QgPSBhbW91bnQ7CiAgICAgICAgICAgICAgICBtYWRLaW5nID0gbXNnLnNlbmRlcjsKICAgICAgICAgICAgICAgIG9uVGhyb25lID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgICAgICAgICAgaW52ZXN0SW5UaGVTeXN0ZW0oYW1vdW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8vIFdoZW4gdGhlIGtpbmcgZGVjaWRlcyB0byBjb2xsZWN0IGhpcyBmZWVzCiAgICBmdW5jdGlvbiBjb2xsZWN0RmVlKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IHRydWVHb2RzKSB7CiAgICAgICAgICAgIHRydWVHb2RzLnNlbmQoZ29kQmFuayk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdvZEF1dG9tYXRpY0NvbGxlY3RGZWUoKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKGdvZEJhbmsgPj0gMSBldGhlcikgewogICAgICAgICAgdHJ1ZUdvZHMuc2VuZChnb2RCYW5rKTsKICAgICAgICAgIGdvZEJhbmsgPSAwOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBraW5nQXV0b21hdGljQ29sbGVjdEZlZSgpIGludGVybmFsIHsKICAgICAgICBpZiAoa2luZ0JhbmsgPj0gMTAwIGZpbm5leSkgewogICAgICAgICAgbWFkS2luZy5zZW5kKGtpbmdCYW5rKTsKICAgICAgICAgIGtpbmdCYW5rID0gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gamVzdGVyQXV0b21hdGljQ29sbGVjdEZlZSgpIGludGVybmFsIHsKICAgICAgICBpZiAoamVzdGVyQmFuayA+PSAxMDAgZmlubmV5KSB7CiAgICAgICAgICBqZXN0ZXIuc2VuZChqZXN0ZXJCYW5rKTsKICAgICAgICAgIGplc3RlckJhbmsgPSAwOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
