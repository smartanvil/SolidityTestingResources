Class {
	#name : #SRT66618f48976e9c9f9cc5001d416e82d87789481c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT66618f48976e9c9f9cc5001d416e82d87789481c >> base64 [
	^ ''.
	

]
