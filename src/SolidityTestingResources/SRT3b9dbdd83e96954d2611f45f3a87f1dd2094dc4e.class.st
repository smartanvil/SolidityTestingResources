Class {
	#name : #SRT3b9dbdd83e96954d2611f45f3a87f1dd2094dc4e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b9dbdd83e96954d2611f45f3a87f1dd2094dc4e >> base64 [
	^ ''.
	

]
