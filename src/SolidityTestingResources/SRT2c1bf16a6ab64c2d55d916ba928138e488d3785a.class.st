Class {
	#name : #SRT2c1bf16a6ab64c2d55d916ba928138e488d3785a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2c1bf16a6ab64c2d55d916ba928138e488d3785a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBUb2tlbiB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHt9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7fQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcykge30KCgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHt9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAKfQoKY29udHJhY3QgT3duZWR7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIGZ1bmN0aW9uIE93bmVkKCl7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgbW9kaWZpZXIgb25seU93bmVyewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKaW50ZXJmYWNlIHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljO30KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gewoKICAgIC8vSW50ZXJuYWwgdHJhbnNmZXIsIG9ubHkgY2FuIGJlIGNhbGxlZCBieSB0aGlzIGNvbnRyYWN0CiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sdWludDI1NiBfdmFsdWUpIGludGVybmFsIHsKICAgICAgICAvL3ByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuCiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICAvL2NoZWNrIGlmIHNlbmRlciBoYXMgZW5vdWdoIHRva2VucwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy9jaGVjayBmb3Igb3ZlcmZsb3dzCiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSk7CgogICAgICAgIHVpbnQyNTYgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VzW19mcm9tXStiYWxhbmNlc1tfdG9dOwogICAgICAgIC8vc3VidHJhY3QgdmFsdWUgZnJvbSBzZW5kZXIKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIC8vYWRkIHZhbHVlIHRvIHJlY2VpdmVyCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sX3RvLF92YWx1ZSk7CiAgICAgICAgLy9Bc3NlcnQgYXJlIHVzZWQgZm9yIGFuYWx5c2luZyBzdGF0aWNhbGx5IGlmIGJ1Z3MgcmVzaWRlcwogICAgICAgIGFzc2VydChiYWxhbmNlc1tfZnJvbV0gKyBiYWxhbmNlc1tfdG9dID09IHByZXZpb3VzQmFsYW5jZXMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIC8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLgogICAgICAgIAogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLF90byxfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIF90cmFuc2ZlcihfZnJvbSxfdG8sX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL1JldHVybiBiYWxhbmNlIG9mIHRoZSBvd25lcgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvL0FwcHJvdmUgdGhlIHNwZW5kZXIgYW1tb3VudAogICAgLy9zZXQgYWxsb3dhbmNlIGZvciBvdGhlciBhZGRyZXNzCiAgICAvLyBhbGxvd3MgX3NwZW5kZXIgdG8gc3BlbmQgbm8gbW9yZSB0aGFuIF92YWx1ZSB0b2tlbnMgb24geW91ciBiZWhhbGYKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKfQoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKklOVFJPRFVDSU5HIEFEVkFOQ0UgRlVOQ1RJT05BTElUSUVTKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgpjb250cmFjdCBYUlRTdGFuZGFyZHMgaXMgT3duZWQsU3RhbmRhcmRUb2tlbgp7CgogICAgLy9nZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbgoKICAgIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90byx1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIC8vcHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4KICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vY2hlY2sgaWYgc2VuZGVyIGhhcyBlbm91Z2ggdG9rZW5zCiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlKTsKICAgICAgICAvL2NoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKTsKICAgICAgICAvL3N1YnRyYWN0IHZhbHVlIGZyb20gc2VuZGVyCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAvL2FkZCB2YWx1ZSB0byByZWNlaXZlcgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLF90byxfdmFsdWUpOwogICAgfQoKfQoKY29udHJhY3QgWFJUVG9rZW4gaXMgWFJUU3RhbmRhcmRzIHsKCiAgICB1aW50MjU2IHB1YmxpYyBpbml0aWFsU3VwcGx5OwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAgICAvLyBUb2tlbiBOYW1lCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgICAgIC8vIEhvdyBtYW55IGRlY2ltYWxzIHRvIHNob3cuIFRvIGJlIHN0YW5kYXJkIGNvbXBsaWNhbnQga2VlcCBpdCAxOAogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7ICAgICAgICAgICAgICAgICAvLyBBbiBpZGVudGlmaWVyOiBlZyBTQlgsIFhQUiBldGMuLgogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uOyAKICAgIHVpbnQyNTYgcHVibGljIHVuaXRzT25lRXRoQ2FuQnV5OyAgICAgLy8gSG93IG1hbnkgdW5pdHMgb2YgeW91ciBjb2luIGNhbiBiZSBib3VnaHQgYnkgMSBFVEg/CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aEluV2VpOyAgICAgICAgIC8vIFdFSSBpcyB0aGUgc21hbGxlc3QgdW5pdCBvZiBFVEggKHRoZSBlcXVpdmFsZW50IG9mIGNlbnQgaW4gVVNEIG9yIHNhdG9zaGkgaW4gQlRDKS4gV2UnbGwgc3RvcmUgdGhlIHRvdGFsIEVUSCByYWlzZWQgdmlhIG91ciBJQ08gaGVyZS4gIAogICAgYWRkcmVzcyBwdWJsaWMgZnVuZHNXYWxsZXQ7ICAgICAgICAgICAvLyBXaGVyZSBzaG91bGQgdGhlIHJhaXNlZCBFVEggZ28/CgogICAgLy8gVGhpcyBpcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIAogICAgLy8gd2hpY2ggbWVhbnMgdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBuYW1lIGhhcyB0byBtYXRjaCB0aGUgY29udHJhY3QgbmFtZSBkZWNsYXJlZCBhYm92ZQogICAgZnVuY3Rpb24gWFJUVG9rZW4odWludDI1NiBfaW5pdGlhbFN1cHBseSwgc3RyaW5nIHRfbmFtZSwgc3RyaW5nIHRfc3ltYm9sLHN0cmluZyB0X3ZlcnNpb24sIHVpbnQ4IGRlY2ltYWxzVW5pdHMsdWludDI1NiBPbmVFdGhWYWx1ZSkgcHVibGljIHsKICAgICAgICBpbml0aWFsU3VwcGx5ID0gX2luaXRpYWxTdXBwbHk7CiAgICAgICAgZGVjaW1hbHMgPSBkZWNpbWFsc1VuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzIChDSEFOR0UgVEhJUykKICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHkqMTAqKnVpbnQyNTYoZGVjaW1hbHMpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkgKDEwMDAgZm9yIGV4YW1wbGUpIChDSEFOR0UgVEhJUykKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zLiBUaGlzIGlzIHNldCB0byAxMDAwIGZvciBleGFtcGxlLiBJZiB5b3Ugd2FudCB5b3VyIGluaXRpYWwgdG9rZW5zIHRvIGJlIFggYW5kIHlvdXIgZGVjaW1hbCBpcyA1LCBzZXQgdGhpcyB2YWx1ZSB0byBYICogMTAwMDAwLiAoQ0hBTkdFIFRISVMpCiAgICAgICAgbmFtZSA9IHRfbmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcyAoQ0hBTkdFIFRISVMpCiAgICAgICAgc3ltYm9sID0gdF9zeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMgKENIQU5HRSBUSElTKQogICAgICAgIHVuaXRzT25lRXRoQ2FuQnV5ID0gT25lRXRoVmFsdWUqMTAqKnVpbnQyNTYoZGVjaW1hbHMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGZ1bmRzV2FsbGV0ID0gbXNnLnNlbmRlcjsKICAgICAgICB2ZXJzaW9uID0gdF92ZXJzaW9uOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIH0KCiAgICBmdW5jdGlvbigpIHBheWFibGV7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7IHJldHVybjsgfQoKICAgICAgICB0b3RhbEV0aEluV2VpID0gdG90YWxFdGhJbldlaSArIG1zZy52YWx1ZTsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IG1zZy52YWx1ZSAqIHVuaXRzT25lRXRoQ2FuQnV5OwogICAgICAgIGlmIChiYWxhbmNlc1tmdW5kc1dhbGxldF0gPCBhbW91bnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgYmFsYW5jZXNbZnVuZHNXYWxsZXRdID0gYmFsYW5jZXNbZnVuZHNXYWxsZXRdIC0gYW1vdW50OwogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKyBhbW91bnQ7CgogICAgICAgIFRyYW5zZmVyKGZ1bmRzV2FsbGV0LCBtc2cuc2VuZGVyLCBhbW91bnQpOyAvLyBCcm9hZGNhc3QgYSBtZXNzYWdlIHRvIHRoZSBibG9ja2NoYWluCgogICAgICAgIC8vVHJhbnNmZXIgZXRoZXIgdG8gZnVuZHNXYWxsZXQKICAgICAgICBmdW5kc1dhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIH0KCiAgICAvKiBBcHByb3ZlcyBhbmQgdGhlbiBjYWxscyB0aGUgcmVjZWl2aW5nIGNvbnRyYWN0ICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHRva2VuUmVjaXBpZW50IHNwZW5kZXIgPSB0b2tlblJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgLy9jYWxsIHRoZSByZWNlaXZlQXBwcm92YWwgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0IHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0IGhhdmUgdG8gaW5jbHVkZSBhIGNvbnRyYWN0IGluIGhlcmUganVzdCBmb3IgdGhpcy4KICAgICAgICAvL3JlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW5Db250cmFjdCwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICAvL2l0IGlzIGFzc3VtZWQgdGhhdCB3aGVuIGRvZXMgdGhpcyB0aGF0IHRoZSBjYWxsICpzaG91bGQqIHN1Y2NlZWQsIG90aGVyd2lzZSBvbmUgd291bGQgdXNlIHZhbmlsbGEgYXBwcm92ZSBpbnN0ZWFkLgogICAgICAgIGlmKGFwcHJvdmUoX3NwZW5kZXIsX3ZhbHVlKSl7CiAgICAgICAgICAgIHJlcXVpcmUoX3NwZW5kZXIuY2FsbChieXRlczQoYnl0ZXMzMihzaGEzKCJyZWNlaXZlQXBwcm92YWwoYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsYnl0ZXMpIikpKSwgbXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gICAgCiAgICB9Cn0='.
	

]
