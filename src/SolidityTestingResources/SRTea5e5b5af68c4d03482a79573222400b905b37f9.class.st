Class {
	#name : #SRTea5e5b5af68c4d03482a79573222400b905b37f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea5e5b5af68c4d03482a79573222400b905b37f9 >> base64 [
	^ ''.
	

]
