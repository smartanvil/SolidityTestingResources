Class {
	#name : #SRT1fd41ee561b9136ff3d1f5a8c4384e8640892097,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1fd41ee561b9136ff3d1f5a8c4384e8640892097 >> base64 [
	^ ''.
	

]
