Class {
	#name : #SRT9df10486168cb25278c7ec72a3090e34f7aac29a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9df10486168cb25278c7ec72a3090e34f7aac29a >> base64 [
	^ ''.
	

]
