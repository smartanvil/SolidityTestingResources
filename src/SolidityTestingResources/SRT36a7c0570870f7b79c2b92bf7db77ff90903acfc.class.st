Class {
	#name : #SRT36a7c0570870f7b79c2b92bf7db77ff90903acfc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36a7c0570870f7b79c2b92bf7db77ff90903acfc >> base64 [
	^ ''.
	

]
