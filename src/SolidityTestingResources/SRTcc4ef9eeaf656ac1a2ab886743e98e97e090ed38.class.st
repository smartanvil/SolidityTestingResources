Class {
	#name : #SRTcc4ef9eeaf656ac1a2ab886743e98e97e090ed38,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc4ef9eeaf656ac1a2ab886743e98e97e090ed38 >> base64 [
	^ ''.
	

]
