Class {
	#name : #SRT99092a458b405fb8c06c5a3aa01cffd826019568,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99092a458b405fb8c06c5a3aa01cffd826019568 >> base64 [
	^ ''.
	

]
