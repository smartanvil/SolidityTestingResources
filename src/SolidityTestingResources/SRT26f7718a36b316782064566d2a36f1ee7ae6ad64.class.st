Class {
	#name : #SRT26f7718a36b316782064566d2a36f1ee7ae6ad64,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT26f7718a36b316782064566d2a36f1ee7ae6ad64 >> base64 [
	^ ''.
	

]
