Class {
	#name : #SRTbb3c393e6a053c783ce9cc178865b714a87ad95e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb3c393e6a053c783ce9cc178865b714a87ad95e >> base64 [
	^ ''.
	

]
