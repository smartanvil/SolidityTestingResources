Class {
	#name : #SRTec2e5c8d51fdd54fef83db8300399a3c2e167922,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec2e5c8d51fdd54fef83db8300399a3c2e167922 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIAogIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIAogIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgCiAgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgCiAgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICovCmNvbnRyYWN0IE93bmFibGUgCnsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZXZlbnQgT3duZXJDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb2xkT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfbmV3T3duZXIpOwoJCglmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljCiAgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgbW9kaWZpZXIgb25seU93bmVyKCkgCiAgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHB1YmxpYyAKICB7CiAgICByZXF1aXJlKF9uZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIAogICAgYWRkcmVzcyBvbGRPd25lciA9IG93bmVyOwogICAgaWYgKG9sZE93bmVyICE9IF9uZXdPd25lcikKICAgIHsKICAgIAlvd25lciA9IF9uZXdPd25lcjsKICAgIAkKICAgIAlPd25lckNoYW5nZWQob2xkT3duZXIsIF9uZXdPd25lcik7CiAgICB9CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgTWFuYWdlYWJsZQogKi8KY29udHJhY3QgTWFuYWdlYWJsZSBpcyBPd25hYmxlCnsKCWFkZHJlc3MgcHVibGljIG1hbmFnZXI7CgkKCWV2ZW50IE1hbmFnZXJDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfb2xkTWFuYWdlciwgYWRkcmVzcyBfbmV3TWFuYWdlcik7CgkKCWZ1bmN0aW9uIE1hbmFnZWFibGUoKSBwdWJsaWMKCXsKCQltYW5hZ2VyID0gbXNnLnNlbmRlcjsKCX0KCQoJbW9kaWZpZXIgb25seU1hbmFnZXIoKQoJewoJCXJlcXVpcmUobXNnLnNlbmRlciA9PSBtYW5hZ2VyKTsKCQlfOwoJfQoJCgltb2RpZmllciBvbmx5T3duZXJPck1hbmFnZXIoKSAKCXsKCQlyZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIgfHwgbXNnLnNlbmRlciA9PSBtYW5hZ2VyKTsKCQlfOwoJfQoJCglmdW5jdGlvbiBjaGFuZ2VNYW5hZ2VyKGFkZHJlc3MgX25ld01hbmFnZXIpIG9ubHlPd25lciBwdWJsaWMgCgl7CgkJcmVxdWlyZShfbmV3TWFuYWdlciAhPSBhZGRyZXNzKDApKTsKCQkKCQlhZGRyZXNzIG9sZE1hbmFnZXIgPSBtYW5hZ2VyOwoJCWlmIChvbGRNYW5hZ2VyICE9IF9uZXdNYW5hZ2VyKQoJCXsKCQkJbWFuYWdlciA9IF9uZXdNYW5hZ2VyOwoJCQkKCQkJTWFuYWdlckNoYW5nZWQob2xkTWFuYWdlciwgX25ld01hbmFnZXIpOwoJCX0KCX0KCQp9CgoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGVUb2tlbgogKi8KY29udHJhY3QgQ3Jvd2RzYWxlVG9rZW4gaXMgTWFuYWdlYWJsZQp7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSAgICAgPSAiRUJDb2luIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCAgID0gIkVCQyI7CiAgdWludDggIHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogIAogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgcmVsZWFzZVRpbWU7CiAgYm9vbCBwdWJsaWMgcmVsZWFzZWQ7CgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IFJlbGVhc2VUaW1lQ2hhbmdlZChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCB1aW50MjU2IF9vbGRSZWxlYXNlVGltZSwgdWludDI1NiBfbmV3UmVsZWFzZVRpbWUpOwogIGV2ZW50IFJlbGVhc2VkQ2hhbmdlZChib29sIF9vbGRSZWxlYXNlZCwgYm9vbCBfbmV3UmVsZWFzZWQpOwoKICBtb2RpZmllciBjYW5UcmFuc2ZlcihhZGRyZXNzIF9mcm9tKQogIHsKICAJaWYgKHJlbGVhc2VUaW1lW19mcm9tXSA9PSAwKQogIAl7CiAgCQlyZXF1aXJlKHJlbGVhc2VkKTsKICAJfQogIAllbHNlCiAgCXsKICAJCXJlcXVpcmUocmVsZWFzZVRpbWVbX2Zyb21dIDw9IG5vdyk7CiAgCX0KICAJXzsKICB9CgogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpCiAgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGNhblRyYW5zZmVyKG1zZy5zZW5kZXIpIHB1YmxpYyByZXR1cm5zIChib29sKSAKICB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIAogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSAKICB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CiAgCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgY2FuVHJhbnNmZXIoX2Zyb20pIHB1YmxpYyByZXR1cm5zIChib29sKSAKICB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSk7CgogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgCiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgCiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgZnVuY3Rpb24gYWxsb2NhdGUoYWRkcmVzcyBfc2FsZSwgYWRkcmVzcyBfaW52ZXN0b3IsIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljIAogIHsKICAJcmVxdWlyZShfc2FsZSAhPSBhZGRyZXNzKDApKTsKICAJQ3Jvd2RzYWxlIHNhbGUgPSBDcm93ZHNhbGUoX3NhbGUpOwogIAlhZGRyZXNzIHBvb2wgPSBzYWxlLnBvb2woKTsKCiAgICByZXF1aXJlKF9pbnZlc3RvciAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW3Bvb2xdKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbcG9vbF1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW3Bvb2xdID0gYmFsYW5jZXNbcG9vbF0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfaW52ZXN0b3JdID0gYmFsYW5jZXNbX2ludmVzdG9yXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbcG9vbF1bX3NhbGVdID0gYWxsb3dlZFtwb29sXVtfc2FsZV0uc3ViKF92YWx1ZSk7CiAgICAKICAgIFRyYW5zZmVyKHBvb2wsIF9pbnZlc3RvciwgX3ZhbHVlKTsKICB9CiAgCiAgZnVuY3Rpb24gZGVhbGxvY2F0ZShhZGRyZXNzIF9zYWxlLCBhZGRyZXNzIF9pbnZlc3RvciwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMgCiAgewogIAlyZXF1aXJlKF9zYWxlICE9IGFkZHJlc3MoMCkpOwogIAlDcm93ZHNhbGUgc2FsZSA9IENyb3dkc2FsZShfc2FsZSk7CiAgCWFkZHJlc3MgcG9vbCA9IHNhbGUucG9vbCgpOwogIAkKICAgIHJlcXVpcmUoX2ludmVzdG9yICE9IGFkZHJlc3MoMCkpOwogIAlyZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfaW52ZXN0b3JdKTsKICAJCiAgCWJhbGFuY2VzW19pbnZlc3Rvcl0gPSBiYWxhbmNlc1tfaW52ZXN0b3JdLnN1YihfdmFsdWUpOwogIAliYWxhbmNlc1twb29sXSA9IGJhbGFuY2VzW3Bvb2xdLmFkZChfdmFsdWUpOwogIAlhbGxvd2VkW3Bvb2xdW19zYWxlXSA9IGFsbG93ZWRbcG9vbF1bX3NhbGVdLmFkZChfdmFsdWUpOwogIAkKICAJVHJhbnNmZXIoX2ludmVzdG9yLCBwb29sLCBfdmFsdWUpOwogIH0KCiAJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIAogCXsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgCiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIAogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfcmVsZWFzZVRpbWUpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgCiAgewogIAlyZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAJCiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAKICAgIE1pbnQoX3RvLCBfdmFsdWUpOwogICAgVHJhbnNmZXIoMHgwLCBfdG8sIF92YWx1ZSk7CiAgICAKICAgIHNldFJlbGVhc2VUaW1lKF90bywgX3JlbGVhc2VUaW1lKTsKICAgIAogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBzZXRSZWxlYXNlVGltZShhZGRyZXNzIF9vd25lciwgdWludDI1NiBfbmV3UmVsZWFzZVRpbWUpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgICByZXF1aXJlKF9vd25lciAhPSBhZGRyZXNzKDApKTsKICAgIAogIAl1aW50MjU2IG9sZFJlbGVhc2VUaW1lID0gcmVsZWFzZVRpbWVbX293bmVyXTsKICAJaWYgKG9sZFJlbGVhc2VUaW1lICE9IF9uZXdSZWxlYXNlVGltZSkKICAJewogIAkJcmVsZWFzZVRpbWVbX293bmVyXSA9IF9uZXdSZWxlYXNlVGltZTsKICAgIAogICAgCVJlbGVhc2VUaW1lQ2hhbmdlZChfb3duZXIsIG9sZFJlbGVhc2VUaW1lLCBfbmV3UmVsZWFzZVRpbWUpOwogICAgfQogIH0KICAKICBmdW5jdGlvbiBzZXRSZWxlYXNlZChib29sIF9uZXdSZWxlYXNlZCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAJYm9vbCBvbGRSZWxlYXNlZCA9IHJlbGVhc2VkOwogIAlpZiAob2xkUmVsZWFzZWQgIT0gX25ld1JlbGVhc2VkKQogIAl7CiAgCQlyZWxlYXNlZCA9IF9uZXdSZWxlYXNlZDsKICAJCiAgCQlSZWxlYXNlZENoYW5nZWQob2xkUmVsZWFzZWQsIF9uZXdSZWxlYXNlZCk7CiAgCX0KICB9CiAgCn0KCgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKi8KY29udHJhY3QgQ3Jvd2RzYWxlIGlzIE1hbmFnZWFibGUKewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBDcm93ZHNhbGVUb2tlbiBwdWJsaWMgdG9rZW47CgogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lICA7CgogIHVpbnQyNTYgcHVibGljIHJhdGU7CiAgCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAKICB1aW50MjU2IHB1YmxpYyB0b2tlblNhbGVXZWlDYXA7CQkKICB1aW50MjU2IHB1YmxpYyB0b2tlblNhbGVXZWlHb2FsOwkKICB1aW50MjU2IHB1YmxpYyB0b2tlblNhbGVXZWlNYXg7CQkKICB1aW50MjU2IHB1YmxpYyB0b2tlblNhbGVXZWlNaW47CQkKICAKICBhZGRyZXNzIHB1YmxpYyBwb29sOyAKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogIGJvb2wgcHVibGljIGlzRmluYWxpemVkID0gZmFsc2U7CgogIGVudW0gU3RhdGUgeyBDcmVhdGVkLCBBY3RpdmUsIENsb3NlZCB9CgogIHVpbnQyNTYgcHVibGljIHRvdGFsQWxsb2NhdGVkOwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGFsbG9jYXRlZDsKICAKICB1aW50MjU2IHB1YmxpYyB0b3RhbERlcG9zaXRlZDsKICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBkZXBvc2l0ZWQ7CgogIFN0YXRlIHB1YmxpYyBzdGF0ZTsKCiAgZXZlbnQgQ2xvc2VkKCk7CiAgZXZlbnQgRmluYWxpemVkKCk7CiAgZXZlbnQgRnVuZFdpdGhkcmF3ZWQodWludDI1NiBldGhBbW91bnQpOwogIGV2ZW50IFRva2VuUHVyY2hhc2VkKGFkZHJlc3MgaW5kZXhlZCBfcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgX2ludmVzdG9yLCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfYW1vdW50LCBieXRlcyBfZGF0YSk7CiAgZXZlbnQgVG9rZW5SZXR1cm5lZChhZGRyZXNzIGluZGV4ZWQgX2ludmVzdG9yLCB1aW50MjU2IF92YWx1ZSk7CgogIGZ1bmN0aW9uIENyb3dkc2FsZSgpIHB1YmxpYwogIHsKICAJc3RhdGUgPSBTdGF0ZS5DcmVhdGVkOwogIH0KICAKICBmdW5jdGlvbiBpbml0Q3Jvd2RzYWxlKGFkZHJlc3MgX3Bvb2wsIGFkZHJlc3MgX3Rva2VuLCB1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3JhdGUsIHVpbnQyNTYgX3Rva2VuU2FsZVdlaUNhcCwgdWludDI1NiBfdG9rZW5TYWxlV2VpR29hbCwgdWludDI1NiBfdG9rZW5TYWxlV2VpTWF4LCB1aW50MjU2IF90b2tlblNhbGVXZWlNaW4sIGFkZHJlc3MgX3dhbGxldCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQ3JlYXRlZCk7CiAgCXJlcXVpcmUoX3Bvb2wgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF90b2tlbiAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3N0YXJ0VGltZSA+PSBub3cpOwogICAgcmVxdWlyZShfZW5kVGltZSA+PSBfc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoX2VuZFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoX3JhdGUgPiAwKTsKICAgIHJlcXVpcmUoX3Rva2VuU2FsZVdlaUNhcCA+PSBfdG9rZW5TYWxlV2VpR29hbCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKICAgIAogICAgc3RhdGUgPSBTdGF0ZS5BY3RpdmU7CiAgICAKICAgIHBvb2wgICAgICAgICAgICAgPSBfcG9vbDsKICAgIHRva2VuICAgICAgICAgICAgPSBDcm93ZHNhbGVUb2tlbihfdG9rZW4pOwogICAgc3RhcnRUaW1lICAgICAgICA9IF9zdGFydFRpbWU7CiAgICBlbmRUaW1lICAgICAgICAgID0gX2VuZFRpbWU7CiAgICByYXRlICAgICAgICAgICAgID0gX3JhdGU7CiAgICB0b2tlblNhbGVXZWlDYXAgID0gX3Rva2VuU2FsZVdlaUNhcDsKICAgIHRva2VuU2FsZVdlaUdvYWwgPSBfdG9rZW5TYWxlV2VpR29hbDsKICAgIHRva2VuU2FsZVdlaU1heCAgPSBfdG9rZW5TYWxlV2VpTWF4OwogICAgdG9rZW5TYWxlV2VpTWluICA9IF90b2tlblNhbGVXZWlNaW47CiAgICB3YWxsZXQgICAgICAgICAgID0gX3dhbGxldDsKICB9CgogIGZ1bmN0aW9uIGFsbG9jYXRpb24oYWRkcmVzcyBfaW52ZXN0b3IpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KQogIHsKICAJcmV0dXJuIGFsbG9jYXRlZFtfaW52ZXN0b3JdOwogIH0KCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMKICB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfaW52ZXN0b3IpIHB1YmxpYyBwYXlhYmxlIAogIHsKICAgIHJlcXVpcmUoX2ludmVzdG9yICE9IDB4MCk7CiAgICByZXF1aXJlKHN0YXJ0VGltZSA8PSBub3cgJiYgbm93IDw9IGVuZFRpbWUpOwogICAgcmVxdWlyZShtc2cudmFsdWUgIT0gMCk7CiAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLkFjdGl2ZSk7CiAgICAKICAgIHJlcXVpcmUodG90YWxBbGxvY2F0ZWQgPD0gdG9rZW5TYWxlV2VpQ2FwKTsKICAgIAogICAgdWludDI1NiBldGhXZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAKICAgIHVpbnQyNTYgdG9rZW5XZWlBbW91bnQgPSBldGhXZWlBbW91bnQubXVsKHJhdGUpOwogICAgCiAgICB1aW50MjU2IHBlcnNvblRva2VuV2VpQW1vdW50ID0gYWxsb2NhdGVkW19pbnZlc3Rvcl0uYWRkKHRva2VuV2VpQW1vdW50KTsKICAgIAogICAgcmVxdWlyZSh0b2tlblNhbGVXZWlNaW4gPD0gcGVyc29uVG9rZW5XZWlBbW91bnQpOwogICAgcmVxdWlyZShwZXJzb25Ub2tlbldlaUFtb3VudCA8PSB0b2tlblNhbGVXZWlNYXgpOwogICAgCiAgICB0b3RhbEFsbG9jYXRlZCA9IHRvdGFsQWxsb2NhdGVkLmFkZCh0b2tlbldlaUFtb3VudCk7CgogICAgdG90YWxEZXBvc2l0ZWQgPSB0b3RhbERlcG9zaXRlZC5hZGQoZXRoV2VpQW1vdW50KTsKICAgIAogICAgYWxsb2NhdGVkW19pbnZlc3Rvcl0gPSBwZXJzb25Ub2tlbldlaUFtb3VudDsKICAgIAogICAgZGVwb3NpdGVkW19pbnZlc3Rvcl0gPSBkZXBvc2l0ZWRbX2ludmVzdG9yXS5hZGQoZXRoV2VpQW1vdW50KTsKICAgIAogICAgdG9rZW4uYWxsb2NhdGUodGhpcywgX2ludmVzdG9yLCB0b2tlbldlaUFtb3VudCk7CiAgICAKICAgIFRva2VuUHVyY2hhc2VkKG1zZy5zZW5kZXIsIF9pbnZlc3RvciwgZXRoV2VpQW1vdW50LCB0b2tlbldlaUFtb3VudCwgbXNnLmRhdGEpOwogIH0KCiAgZnVuY3Rpb24gZGVhbGxvY2F0ZShhZGRyZXNzIF9pbnZlc3RvciwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMgCiAgewogIAlyZXF1aXJlKF9pbnZlc3RvciAhPSBhZGRyZXNzKDApKTsKICAJcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG9jYXRlZFtfaW52ZXN0b3JdKTsKCgkJdG90YWxBbGxvY2F0ZWQgPSB0b3RhbEFsbG9jYXRlZC5zdWIoX3ZhbHVlKTsKCQkKCQlhbGxvY2F0ZWRbX2ludmVzdG9yXSA9IGFsbG9jYXRlZFtfaW52ZXN0b3JdLnN1YihfdmFsdWUpOwoJCQoJCXRva2VuLmRlYWxsb2NhdGUodGhpcywgX2ludmVzdG9yLCBfdmFsdWUpOwoJCQoJCVRva2VuUmV0dXJuZWQoX2ludmVzdG9yLCBfdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZ29hbFJlYWNoZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkKICB7CiAgICByZXR1cm4gdG90YWxBbGxvY2F0ZWQgPj0gdG9rZW5TYWxlV2VpR29hbDsKICB9CgogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIAogIHsKICAgIGJvb2wgY2FwUmVhY2hlZCA9ICh0b3RhbEFsbG9jYXRlZCA+PSB0b2tlblNhbGVXZWlDYXApOwogICAgcmV0dXJuIChub3cgPiBlbmRUaW1lKSB8fCBjYXBSZWFjaGVkOwogIH0KCiAgZnVuY3Rpb24gZmluYWxpemUoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljIAogIHsKICAgIHJlcXVpcmUoIWlzRmluYWxpemVkKTsKICAgIHJlcXVpcmUoaGFzRW5kZWQoKSk7CgogICAgaWYgKGdvYWxSZWFjaGVkKCkpIAogICAgewogICAgICBjbG9zZSgpOwogICAgfSAKICAgIAogICAgRmluYWxpemVkKCk7CgogICAgaXNGaW5hbGl6ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gY2xvc2UoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5BY3RpdmUpOwogICAgCiAgICBzdGF0ZSA9IFN0YXRlLkNsb3NlZDsKICAgIAogICAgQ2xvc2VkKCk7CiAgfQoKICBmdW5jdGlvbiB3aXRoZHJhdygpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgCXJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQ2xvc2VkKTsKICAJCiAgCXVpbnQyNTYgZGVwb3NpdGVkVmFsdWUgPSB0aGlzLmJhbGFuY2U7CiAgCWlmIChkZXBvc2l0ZWRWYWx1ZSA+IDApCiAgCXsKICAJCXdhbGxldC50cmFuc2ZlcihkZXBvc2l0ZWRWYWx1ZSk7CiAgCQogIAkJRnVuZFdpdGhkcmF3ZWQoZGVwb3NpdGVkVmFsdWUpOwogIAl9CiAgfQogIAp9CgoKLyoqCiAqIEB0aXRsZSBDcm93ZHNhbGVNYW5hZ2VyCiAqLwpjb250cmFjdCBDcm93ZHNhbGVNYW5hZ2VyIGlzIE1hbmFnZWFibGUgCnsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICBDcm93ZHNhbGVUb2tlbiBwdWJsaWMgdG9rZW47CiAgQ3Jvd2RzYWxlICAgICAgcHVibGljIHNhbGUxOwogIENyb3dkc2FsZSAgICAgIHB1YmxpYyBzYWxlMjsKICBDcm93ZHNhbGUgICAgICBwdWJsaWMgc2FsZTM7CiAgCiAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgdG9rZW5SZXNlcnZlZDFEZXBvc2l0ID0gMHg2RUU5NmJhNDkyYTczOEJERDA4MGQ3MzUzNTE2MTMzZWE4MDZERGVlOwogIGFkZHJlc3MgcHVibGljIGNvbnN0YW50IHRva2VuUmVzZXJ2ZWQyRGVwb3NpdCA9IDB4QUZCY0I3MmZFOTdBNTE5MWQwM0UzMjhkRTA3QkIyMTdkQTIxRWFFNDsKICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCB0b2tlblJlc2VydmVkM0RlcG9zaXQgPSAweGQ3MTE4ZUU4NzI4NzAwNDBkODY0OTVmMTNFNjFiODhFRTVDOTM1ODY7CiAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgdG9rZW5SZXNlcnZlZDREZXBvc2l0ID0gMHgwOGNlMmIzNTEyYUUwMzg3NDk1QUI1ZjYxZTZCMENmODQ2QWU1OWE3OwogIAogIGFkZHJlc3MgcHVibGljIGNvbnN0YW50IHdpdGhkcmF3V2FsbGV0MSAgICAgICA9IDB4ZjhkYWZFNWVlMTlhMjhiOTVBZDkzZTA1NTc1MjY5RWNFRTE5RERmMjsKICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCB3aXRoZHJhd1dhbGxldDIgICAgICAgPSAweDZmNGFGNTE1RUNjRTIyRUEwRDFBQjgyRjg3NDJFMDU4QWM0ZDljYjM7CiAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgd2l0aGRyYXdXYWxsZXQzICAgICAgID0gMHhkMTcyRTBERWU2MEFmNjdkQTMwMTlBZDUzOWNlMzE5MGExOTFkNzFEOwoKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlblNhbGUgICAgICA9IDc1MDAwMDAwMCAqIDEwKipkZWNpbWFscyArIDMwMDAgKiAxMDAwICogMTAqKmRlY2ltYWxzOwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuUmVzZXJ2ZWQxID0gMTUwMDAwMDAwICogMTAqKmRlY2ltYWxzIC0gMzAwMCAqIDEwMDAgKiAxMCoqZGVjaW1hbHM7CiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5SZXNlcnZlZDIgPSAyNzAwMDAwMDAgKiAxMCoqZGVjaW1hbHM7ICAgICAgICAgICAJCQkgCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5SZXNlcnZlZDMgPSAxMDUwMDAwMDAgKiAxMCoqZGVjaW1hbHM7ICAgICAgICAgICAgICAgIAkJCiAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5SZXNlcnZlZDQgPSAyMjUwMDAwMDAgKiAxMCoqZGVjaW1hbHM7ICAgICAgICAgICAgICAgICAgICAgIAkKICAKICBmdW5jdGlvbiBDcm93ZHNhbGVNYW5hZ2VyKCkgcHVibGljCiAgewogIH0KICAKICBmdW5jdGlvbiBjcmVhdGVUb2tlbigpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgICB0b2tlbiA9IG5ldyBDcm93ZHNhbGVUb2tlbigpOwogIH0KICAKICBmdW5jdGlvbiBtaW50VG9rZW4oKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogICAgdG9rZW4ubWludCh0aGlzICAgICAgICAgICAgICAgICAsIHRva2VuU2FsZSAgICAgLCBub3cgICAgICAgKTsKICAgIHRva2VuLm1pbnQodG9rZW5SZXNlcnZlZDFEZXBvc2l0LCB0b2tlblJlc2VydmVkMSwgbm93ICAgICAgICk7CiAgICB0b2tlbi5taW50KHRva2VuUmVzZXJ2ZWQyRGVwb3NpdCwgdG9rZW5SZXNlcnZlZDIsIDE1NDQxNTg4MDApOwogICAgdG9rZW4ubWludCh0b2tlblJlc2VydmVkM0RlcG9zaXQsIHRva2VuUmVzZXJ2ZWQzLCAxNTQ0MTU4ODAwKTsKICAgIHRva2VuLm1pbnQodG9rZW5SZXNlcnZlZDREZXBvc2l0LCB0b2tlblJlc2VydmVkNCwgMCAgICAgICAgICk7CiAgfQogIAogIGZ1bmN0aW9uIGNyZWF0ZVNhbGUxKCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAgIHNhbGUxID0gbmV3IENyb3dkc2FsZSgpOwogIH0KICAKICBmdW5jdGlvbiBpbml0U2FsZTEoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogICAgdWludDI1NiBzdGFydFRpbWUgCQkJCT0gMTUxMjYyMjgwMDsKICAgIHVpbnQyNTYgZW5kVGltZSAgIAkJCQk9IDE1MTUzMDEyMDA7CiAgICB1aW50MjU2IHJhdGUgICAgICAJCQkJPSAzNDUwOwkJCiAgICAKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpQ2FwCQk9IDE1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpR29hbAk9ICAxMDM1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsJCQogICAgdWludDI1NiB0b2tlblNhbGVXZWlNYXgJCT0gICAgMzQ1MDAwMDAwMDAwMDAwMDAwMDAwMDAwOwkKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpTWluCQk9ICAgICAgMzQ1MDAwMDAwMDAwMDAwMDAwMDAwMDsJCiAgICAKICAgIHNhbGUxLmluaXRDcm93ZHNhbGUodGhpcywgdG9rZW4sIHN0YXJ0VGltZSwgZW5kVGltZSwgcmF0ZSwgdG9rZW5TYWxlV2VpQ2FwLCB0b2tlblNhbGVXZWlHb2FsLCB0b2tlblNhbGVXZWlNYXgsIHRva2VuU2FsZVdlaU1pbiwgd2l0aGRyYXdXYWxsZXQxKTsKICAgIAogICAgdG9rZW4uYXBwcm92ZShzYWxlMSwgdG9rZW5TYWxlV2VpQ2FwLmFkZCh0b2tlblNhbGVXZWlNYXgpKTsKICAgIAogICAgdG9rZW4uY2hhbmdlTWFuYWdlcihzYWxlMSk7CiAgfQogIAogIGZ1bmN0aW9uIGZpbmFsaXplU2FsZTEoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogIAlzYWxlMS5maW5hbGl6ZSgpOwogIH0KICAKICBmdW5jdGlvbiBjbG9zZVNhbGUxKCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAJc2FsZTEuY2xvc2UoKTsKICB9CiAgCiAgZnVuY3Rpb24gd2l0aGRyYXdTYWxlMSgpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgCXNhbGUxLndpdGhkcmF3KCk7CiAgfQogIAogIGZ1bmN0aW9uIGNyZWF0ZVNhbGUyKCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAgIHNhbGUyID0gbmV3IENyb3dkc2FsZSgpOwogIH0KICAKICBmdW5jdGlvbiBpbml0U2FsZTIoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogICAgdWludDI1NiBzdGFydFRpbWUgCQkJCT0gMTUxNTQ3NDAwMDsKICAgIHVpbnQyNTYgZW5kVGltZSAgIAkJCQk9IDE1MTcyODg0MDA7CiAgICB1aW50MjU2IHJhdGUgICAgICAJCQkJPSAzMDAwOwkJCiAgICAKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpQ2FwCQk9IDM3NTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpR29hbAk9ICAgICAgICAgICAgICAgICAgICAgICAgICAgMDsJCQogICAgdWludDI1NiB0b2tlblNhbGVXZWlNYXgJCT0gICAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwkKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpTWluCQk9ICAgICAgMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDsJCgogICAJdG9rZW5TYWxlV2VpQ2FwID0gdG9rZW5TYWxlV2VpQ2FwLmFkZChzYWxlMS50b2tlblNhbGVXZWlDYXAoKSk7CiAgIAl0b2tlblNhbGVXZWlDYXAgPSB0b2tlblNhbGVXZWlDYXAuc3ViKHNhbGUxLnRvdGFsQWxsb2NhdGVkKCkpOwogICAgCiAgICBzYWxlMi5pbml0Q3Jvd2RzYWxlKHRoaXMsIHRva2VuLCBzdGFydFRpbWUsIGVuZFRpbWUsIHJhdGUsIHRva2VuU2FsZVdlaUNhcCwgdG9rZW5TYWxlV2VpR29hbCwgdG9rZW5TYWxlV2VpTWF4LCB0b2tlblNhbGVXZWlNaW4sIHdpdGhkcmF3V2FsbGV0Mik7CiAgICAKICAgIHRva2VuLmFwcHJvdmUoc2FsZTIsIHRva2VuU2FsZVdlaUNhcC5hZGQodG9rZW5TYWxlV2VpTWF4KSk7CiAgICAKICAgIHRva2VuLmNoYW5nZU1hbmFnZXIoc2FsZTIpOwogIH0KICAKICBmdW5jdGlvbiBmaW5hbGl6ZVNhbGUyKCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAJc2FsZTIuZmluYWxpemUoKTsKICB9CiAgCiAgZnVuY3Rpb24gY2xvc2VTYWxlMigpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgCXNhbGUyLmNsb3NlKCk7CiAgfQogIAogIGZ1bmN0aW9uIHdpdGhkcmF3U2FsZTIoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogIAlzYWxlMi53aXRoZHJhdygpOwogIH0KICAKICBmdW5jdGlvbiBjcmVhdGVTYWxlMygpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgICBzYWxlMyA9IG5ldyBDcm93ZHNhbGUoKTsKICB9CiAgCiAgZnVuY3Rpb24gaW5pdFNhbGUzKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgdWludDI1NiBfY2FwLCB1aW50MjU2IF9nb2FsLCB1aW50MjU2IF9tYXgsIHVpbnQgX21pbikgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAgIHJlcXVpcmUoX3N0YXJ0VGltZSA+PSBub3cpOwogICAgcmVxdWlyZShfZW5kVGltZSA+PSBfc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoX3JhdGUgPiAwKTsKICAgIHJlcXVpcmUoX2NhcCA+PSBfZ29hbCk7CiAgCiAgICB1aW50MjU2IHN0YXJ0VGltZSAJCQkJPSBfc3RhcnRUaW1lOwogICAgdWludDI1NiBlbmRUaW1lICAgCQkJCT0gX2VuZFRpbWU7CiAgICB1aW50MjU2IHJhdGUgICAgICAJCQkJPSBfcmF0ZTsKICAgIAogICAgdWludDI1NiB0b2tlblNhbGVXZWlDYXAJCT0gX2NhcDsKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpR29hbAk9IF9nb2FsOwkKICAgIHVpbnQyNTYgdG9rZW5TYWxlV2VpTWF4CQk9IF9tYXg7CQogICAgdWludDI1NiB0b2tlblNhbGVXZWlNaW4JCT0gX21pbjsJCgogICAgc2FsZTMuaW5pdENyb3dkc2FsZSh0aGlzLCB0b2tlbiwgc3RhcnRUaW1lLCBlbmRUaW1lLCByYXRlLCB0b2tlblNhbGVXZWlDYXAsIHRva2VuU2FsZVdlaUdvYWwsIHRva2VuU2FsZVdlaU1heCwgdG9rZW5TYWxlV2VpTWluLCB3aXRoZHJhd1dhbGxldDMpOwogICAgCiAgICB0b2tlbi5hcHByb3ZlKHNhbGUzLCB0b2tlblNhbGVXZWlDYXAuYWRkKHRva2VuU2FsZVdlaU1heCkpOwogICAgCiAgICB0b2tlbi5jaGFuZ2VNYW5hZ2VyKHNhbGUzKTsKICB9CiAgCiAgZnVuY3Rpb24gZmluYWxpemVTYWxlMygpIG9ubHlPd25lck9yTWFuYWdlciBwdWJsaWMKICB7CiAgCXNhbGUzLmZpbmFsaXplKCk7CiAgfQogIAogIGZ1bmN0aW9uIGNsb3NlU2FsZTMoKSBvbmx5T3duZXJPck1hbmFnZXIgcHVibGljCiAgewogIAlzYWxlMy5jbG9zZSgpOwogIH0KICAKICBmdW5jdGlvbiB3aXRoZHJhd1NhbGUzKCkgb25seU93bmVyT3JNYW5hZ2VyIHB1YmxpYwogIHsKICAJc2FsZTMud2l0aGRyYXcoKTsKICB9CiAgCiAgZnVuY3Rpb24gcmVsZWFzZVRva2VuVHJhbnNmZXIoYm9vbCBfbmV3UmVsZWFzZWQpIG9ubHlPd25lciBwdWJsaWMKICB7CiAgCXRva2VuLnNldFJlbGVhc2VkKF9uZXdSZWxlYXNlZCk7CiAgfQogIAogIGZ1bmN0aW9uIGNoYW5nZVRva2VuTWFuYWdlcihhZGRyZXNzIF9uZXdNYW5hZ2VyKSBvbmx5T3duZXIgcHVibGljCiAgewogIAl0b2tlbi5jaGFuZ2VNYW5hZ2VyKF9uZXdNYW5hZ2VyKTsKICB9CiAgCiAgZnVuY3Rpb24gY2hhbmdlU2FsZU1hbmFnZXIoYWRkcmVzcyBfc2FsZSwgYWRkcmVzcyBfbmV3TWFuYWdlcikgb25seU93bmVyIHB1YmxpYwogIHsKICAJcmVxdWlyZShfc2FsZSAhPSBhZGRyZXNzKDApKTsKICAJQ3Jvd2RzYWxlIHNhbGUgPSBDcm93ZHNhbGUoX3NhbGUpOwogIAkKICAJc2FsZS5jaGFuZ2VNYW5hZ2VyKF9uZXdNYW5hZ2VyKTsKICB9CiAgCiAgZnVuY3Rpb24gZGVhbGxvY2F0ZShhZGRyZXNzIF9zYWxlLCBhZGRyZXNzIF9pbnZlc3Rvcikgb25seU93bmVyIHB1YmxpYwogIHsKICAJcmVxdWlyZShfc2FsZSAhPSBhZGRyZXNzKDApKTsKICAJQ3Jvd2RzYWxlIHNhbGUgPSBDcm93ZHNhbGUoX3NhbGUpOwogIAkKICAJdWludDI1NiBhbGxvY2F0ZWRWYWx1ZSA9IHNhbGUuYWxsb2NhdGlvbihfaW52ZXN0b3IpOwogIAkKICAJc2FsZS5kZWFsbG9jYXRlKF9pbnZlc3RvciwgYWxsb2NhdGVkVmFsdWUpOwogIH0KICAKICBmdW5jdGlvbiBwcm9tb3Rpb25BbGxvY2F0ZShhZGRyZXNzIF9pbnZlc3RvciwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciBwdWJsaWMKICB7CiAgCXRva2VuLnRyYW5zZmVyKF9pbnZlc3RvciwgX3ZhbHVlKTsKICB9CiAgCn0='.
	

]
