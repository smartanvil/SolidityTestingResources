Class {
	#name : #SRT46DDa57B152AeaDA30A0DEC5A31e5Ba600A0Bd51,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT46DDa57B152AeaDA30A0DEC5A31e5Ba600A0Bd51 >> base64 [
	^ ''.
	

]
