Class {
	#name : #SRT572781e7b021d2b3f3f082b3e487234ce9fc2961,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT572781e7b021d2b3f3f082b3e487234ce9fc2961 >> base64 [
	^ ''.
	

]
