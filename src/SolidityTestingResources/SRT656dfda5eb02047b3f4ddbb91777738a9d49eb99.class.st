Class {
	#name : #SRT656dfda5eb02047b3f4ddbb91777738a9d49eb99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT656dfda5eb02047b3f4ddbb91777738a9d49eb99 >> base64 [
	^ ''.
	

]
