Class {
	#name : #SRT9A0ace223eDe819b9A48C605fdB0254b3335f4B2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9A0ace223eDe819b9A48C605fdB0254b3335f4B2 >> base64 [
	^ ''.
	

]
