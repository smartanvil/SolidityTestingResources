Class {
	#name : #SRT326656615a2751f34cdff5e6b8ac5f64c3a76b36,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT326656615a2751f34cdff5e6b8ac5f64c3a76b36 >> base64 [
	^ ''.
	

]
