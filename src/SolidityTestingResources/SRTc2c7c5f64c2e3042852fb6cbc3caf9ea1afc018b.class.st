Class {
	#name : #SRTc2c7c5f64c2e3042852fb6cbc3caf9ea1afc018b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2c7c5f64c2e3042852fb6cbc3caf9ea1afc018b >> base64 [
	^ ''.
	

]
