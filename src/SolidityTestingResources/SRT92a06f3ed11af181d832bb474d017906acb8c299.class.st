Class {
	#name : #SRT92a06f3ed11af181d832bb474d017906acb8c299,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92a06f3ed11af181d832bb474d017906acb8c299 >> base64 [
	^ ''.
	

]
