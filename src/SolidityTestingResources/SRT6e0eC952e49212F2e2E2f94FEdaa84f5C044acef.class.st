Class {
	#name : #SRT6e0eC952e49212F2e2E2f94FEdaa84f5C044acef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e0eC952e49212F2e2E2f94FEdaa84f5C044acef >> base64 [
	^ ''.
	

]
