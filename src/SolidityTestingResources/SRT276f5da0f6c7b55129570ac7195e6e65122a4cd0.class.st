Class {
	#name : #SRT276f5da0f6c7b55129570ac7195e6e65122a4cd0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT276f5da0f6c7b55129570ac7195e6e65122a4cd0 >> base64 [
	^ ''.
	

]
