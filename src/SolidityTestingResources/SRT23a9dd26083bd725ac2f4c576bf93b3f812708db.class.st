Class {
	#name : #SRT23a9dd26083bd725ac2f4c576bf93b3f812708db,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23a9dd26083bd725ac2f4c576bf93b3f812708db >> base64 [
	^ 'LyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBlbWl0IE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIHVpbnQyNTYgdG90YWxTdXBwbHlfOwoKICAvKioKICAqIEBkZXYgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiBleGlzdGVuY2UKICAqLwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIHRvdGFsU3VwcGx5XzsKICB9CgoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBlbWl0IFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHVpbnQyNTYgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgZW1pdCBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgZW1pdCBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IERlY3JlYXNlIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICoKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBkZWNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3N1YnRyYWN0ZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBkZWNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBlbWl0IEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBUaGUgR2Fpbm1lcnNUT0tFTiBjb250cmFjdAogKiBAZGV2IFRoZSBHYWlubWVyc1RPS0VOIFRva2VuIGluaGVyaXRlIGZyb20gU3RhbmRhcmRUb2tlbiBhbmQgT3duYWJsZSBieSBaZXBwZWxpbgogKiBAYXV0aG9yIEdhaW5tZXJzLlRlYW1kZXYKICovCmNvbnRyYWN0IEdhaW5tZXJzVE9LRU4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgICBzdHJpbmcgIHB1YmxpYyAgY29uc3RhbnQgbmFtZSA9ICJHYWluIFRva2VuIjsKICAgIHN0cmluZyAgcHVibGljICBjb25zdGFudCBzeW1ib2wgPSAiR01SIjsKICAgIHVpbnQ4ICAgcHVibGljICBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgIHVpbnQyNTYgcHVibGljICB0b3RhbFN1cHBseTsKICAgIHVpbnQgICAgcHVibGljICB0cmFuc2ZlcmFibGVTdGFydFRpbWU7CiAgICBhZGRyZXNzIHB1YmxpYyAgdG9rZW5TYWxlQ29udHJhY3Q7CiAgIAoKICAgIG1vZGlmaWVyIG9ubHlXaGVuVHJhbnNmZXJFbmFibGVkKCkgCiAgICB7CiAgICAgICAgaWYgKCBub3cgPCB0cmFuc2ZlcmFibGVTdGFydFRpbWUgKSB7CiAgICAgICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB0b2tlblNhbGVDb250cmFjdCB8fCBtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB2YWxpZERlc3RpbmF0aW9uKGFkZHJlc3MgdG8pIAogICAgewogICAgICAgIHJlcXVpcmUodG8gIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5U2FsZUNvbnRyYWN0KCkKICAgIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5TYWxlQ29udHJhY3QpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gR2Fpbm1lcnNUT0tFTigKICAgICAgICB1aW50IHRva2VuVG90YWxBbW91bnQsIAogICAgICAgIHVpbnQgX3RyYW5zZmVyYWJsZVN0YXJ0VGltZSwgCiAgICAgICAgYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyAKICAgIHsKICAgICAgICAKICAgICAgICB0b3RhbFN1cHBseSA9IHRva2VuVG90YWxBbW91bnQgKiAoMTAgKiogdWludDI1NihkZWNpbWFscykpOwoKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OwogICAgICAgIGVtaXQgVHJhbnNmZXIoYWRkcmVzcygweDApLCBtc2cuc2VuZGVyLCB0b3RhbFN1cHBseSk7CgogICAgICAgIHRyYW5zZmVyYWJsZVN0YXJ0VGltZSA9IF90cmFuc2ZlcmFibGVTdGFydFRpbWU7CiAgICAgICAgdG9rZW5TYWxlQ29udHJhY3QgPSBtc2cuc2VuZGVyOwoKICAgICAgICB0cmFuc2Zlck93bmVyc2hpcChfYWRtaW4pOyAKCiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IG92ZXJyaWRlIHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzIHRvIGFkZCBvbmx5V2hlblRyYW5zZmVyRW5hYmxlZCBhbmQgdmFsaWREZXN0aW5hdGlvbgogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgICAgIHZhbGlkRGVzdGluYXRpb24oX3RvKQogICAgICAgIG9ubHlXaGVuVHJhbnNmZXJFbmFibGVkCiAgICAgICAgcmV0dXJucyAoYm9vbCkgCiAgICB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgb3ZlcnJpZGUgdHJhbnNmZXJGcm9tIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzIHRvIGFkZCBvbmx5V2hlblRyYW5zZmVyRW5hYmxlZCBhbmQgdmFsaWREZXN0aW5hdGlvbgogICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIGZyb20uCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgICAgIHZhbGlkRGVzdGluYXRpb24oX3RvKQogICAgICAgIG9ubHlXaGVuVHJhbnNmZXJFbmFibGVkCiAgICAgICAgcmV0dXJucyAoYm9vbCkgCiAgICB7CiAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIF9idXJuZXIsIHVpbnQgX3ZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgYnVybiB0b2tlbnMKICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSBidXJuZWQuCiAgICAgKiBAcmV0dXJuIGFsd2F5cyB0cnVlIChuZWNlc3NhcnkgaW4gY2FzZSBvZiBvdmVycmlkZSkKICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50IF92YWx1ZSkgCiAgICAgICAgcHVibGljCiAgICAgICAgb25seVdoZW5UcmFuc2ZlckVuYWJsZWQKICAgICAgICBvbmx5T3duZXIKICAgICAgICByZXR1cm5zIChib29sKQogICAgewogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBlbWl0IEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICBlbWl0IFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFkZHJlc3MoMHgwKSwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgYnVybiB0b2tlbnMgaW4gdGhlIGJlaGFsZiBvZiBzb21lb25lCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIG93bmVyIG9mIHRoZSB0b2tlbi4KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSBidXJuZWQuCiAgICAgKiBAcmV0dXJuIGFsd2F5cyB0cnVlIChuZWNlc3NhcnkgaW4gY2FzZSBvZiBvdmVycmlkZSkKICAgICAqLwogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIAogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlXaGVuVHJhbnNmZXJFbmFibGVkCiAgICAgICAgb25seU93bmVyCiAgICAgICAgcmV0dXJucyhib29sKSAKICAgIHsKICAgICAgICBhc3NlcnQodHJhbnNmZXJGcm9tKF9mcm9tLCBtc2cuc2VuZGVyLCBfdmFsdWUpKTsKICAgICAgICByZXR1cm4gYnVybihfdmFsdWUpOwogICAgfQoKICAgIC8qKiAKICAgICpJZiB0aGUgZXZlbnQgU2FsZVNvbGRvdXQgaXMgY2FsbGVkIHRoaXMgZnVuY3Rpb24gZW5hYmxlcyBlYXJsaWVyIHRva2VucyB0cmFuc2ZlcgogICAgKi8KICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVyRWFybGllciAoKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlTYWxlQ29udHJhY3QKICAgIHsKICAgICAgICB0cmFuc2ZlcmFibGVTdGFydFRpbWUgPSBub3cgKyAyIGRheXM7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiB0cmFuc2ZlciB0byBvd25lciBhbnkgdG9rZW5zIHNlbmQgYnkgbWlzdGFrZSBvbiB0aGlzIGNvbnRyYWN0cwogICAgICogQHBhcmFtIHRva2VuIFRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbiB0byB0cmFuc2Zlci4KICAgICAqIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcmVkLgogICAgICovCiAgICBmdW5jdGlvbiBlbWVyZ2VuY3lFUkMyMERyYWluKEVSQzIwIHRva2VuLCB1aW50IGFtb3VudCApCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyIAogICAgewogICAgICAgIHRva2VuLnRyYW5zZmVyKG93bmVyLCBhbW91bnQpOwogICAgfQoKfQoKLyoqCiAqIEB0aXRsZSBNb2RpZmllZENyb3dkc2FsZQogKiBAZGV2IE1vZGlmaWVkQ3Jvd2RzYWxlIGlzIGJhc2VkIGluIENyb3dkc2FsZS4gQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUsCiAqIGFsbG93aW5nIGludmVzdG9ycyB0byBwdXJjaGFzZSB0b2tlbnMgd2l0aCBldGhlci4gVGhpcyBjb250cmFjdCBpbXBsZW1lbnRzCiAqIHN1Y2ggZnVuY3Rpb25hbGl0eSBpbiBpdHMgbW9zdCBmdW5kYW1lbnRhbCBmb3JtIGFuZCBjYW4gYmUgZXh0ZW5kZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsCiAqIGZ1bmN0aW9uYWxpdHkgYW5kL29yIGN1c3RvbSBiZWhhdmlvci4KICogVGhlIGV4dGVybmFsIGludGVyZmFjZSByZXByZXNlbnRzIHRoZSBiYXNpYyBpbnRlcmZhY2UgZm9yIHB1cmNoYXNpbmcgdG9rZW5zLCBhbmQgY29uZm9ybQogKiB0aGUgYmFzZSBhcmNoaXRlY3R1cmUgZm9yIGNyb3dkc2FsZXMuIFRoZXkgYXJlICpub3QqIGludGVuZGVkIHRvIGJlIG1vZGlmaWVkIC8gb3ZlcnJpZGVuLgogKiBUaGUgaW50ZXJuYWwgaW50ZXJmYWNlIGNvbmZvcm1zIHRoZSBleHRlbnNpYmxlIGFuZCBtb2RpZmlhYmxlIHN1cmZhY2Ugb2YgY3Jvd2RzYWxlcy4gT3ZlcnJpZGUgCiAqIHRoZSBtZXRob2RzIHRvIGFkZCBmdW5jdGlvbmFsaXR5LiBDb25zaWRlciB1c2luZyAnc3VwZXInIHdoZXJlIGFwcHJvcGlhdGUgdG8gY29uY2F0ZW5hdGUKICogYmVoYXZpb3IuCiAqLwogCmNvbnRyYWN0IE1vZGlmaWVkQ3Jvd2RzYWxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgICBTdGFuZGFyZFRva2VuIHB1YmxpYyB0b2tlbjsgCgogICAgLy9TdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAgICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogICAgdWludDI1NiBwdWJsaWMgcmF0ZTsKCiAgICAvLyBhZGRyZXNzIHdoZXJlIGNyb3dkc2FsZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogICAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgICAvKioKICAgICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAgICovCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKICAgIC8vRXZlbnQgdHJpZ2dlciBpZiB0aGUgQ3Jvd2RzYWxlIHJlYWNoZXMgdGhlIGhhcmRjYXAKICAgICBldmVudCBUb2tlblNhbGVTb2xkT3V0KCk7CiAgICAvKioKICAgICogQHBhcmFtIF9zdGFydFRpbWUgU3RhcnRUaW1lIGZvciB0aGUgdG9rZW4gY3Jvd2RzYWxlCiAgICAqIEBwYXJhbSBfZW5kVGltZSBFbmRUaW1lIGZvciB0aGUgdG9rZW4gY3Jvd2RzYWxlICAgICAKICAgICogQHBhcmFtIF9yYXRlIE51bWJlciBvZiB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogICAgKiBAcGFyYW0gX3dhbGxldCBBZGRyZXNzIHdoZXJlIGNvbGxlY3RlZCBmdW5kcyB3aWxsIGJlIGZvcndhcmRlZCB0bwogICAgKi8KICAgIGZ1bmN0aW9uIE1vZGlmaWVkQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0KSBwdWJsaWMgIHsKICAgICAgICAKICAgICAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgICAgICByZXF1aXJlKF9lbmRUaW1lID49IF9zdGFydFRpbWUpOwogICAgICAgIHJlcXVpcmUoX3JhdGUgPiAwKTsKICAgICAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKCiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICAgICAgcmF0ZSA9IF9yYXRlOwogICAgICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICAgICAgCiAgICAgICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KCk7IAogICAgfQoKICAgIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgICAvLyBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBoYXZlIGNyb3dkc2FsZSBvZiBhIHNwZWNpZmljIG1pbnRhYmxlIHRva2VuLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIAogICAgICAgIGludGVybmFsIAogICAgICAgIHJldHVybnMoU3RhbmRhcmRUb2tlbikgCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBTdGFuZGFyZFRva2VuKCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgZmFsbGJhY2sgZnVuY3Rpb24gKioqRE8gTk9UIE9WRVJSSURFKioqCiAgICAqLwogICAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQoKICAgIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgX2JlbmVmaWNpYXJ5KSBwdWJsaWMgICBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChyYXRlKTsKICAgICAgICB0b2tlbnMgKz0gZ2V0Qm9udXModG9rZW5zKTsKCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKF9iZW5lZmljaWFyeSwgdG9rZW5zKSk7IAogICAgICAgIGVtaXQgVG9rZW5QdXJjaGFzZShfYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CgogICAgICAgIHBvc3RCdXlUb2tlbnMoKTsKICAgIH0KCiAgICAvLyBBY3Rpb24gYWZ0ZXIgYnV5aW5nIHRva2VucwogICAgZnVuY3Rpb24gcG9zdEJ1eVRva2VucyAoKSBpbnRlcm5hbCAgCiAgICB7ZW1pdCBUb2tlblNhbGVTb2xkT3V0KCk7CiAgICB9CgogICAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogICAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgCiAgICAgICBpbnRlcm5hbCAKICAgIHsKICAgICAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgIGludGVybmFsICB2aWV3CiAgICAgICAgcmV0dXJucyhib29sKSAKICAgIHsKICAgICAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgICAgICBib29sIG5vbkludmFsaWRBY2NvdW50ID0gbXNnLnNlbmRlciAhPSAwOwogICAgICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlICYmIG5vbkludmFsaWRBY2NvdW50OwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgICBmdW5jdGlvbiBoYXNFbmRlZCgpIAogICAgICAgIHB1YmxpYyAKICAgICAgICBjb25zdGFudCAKICAgICAgICByZXR1cm5zKGJvb2wpIAogICAgewogICAgICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogICAgfQoKCiAgICAvKioKICAgICAgKiBAZGV2IEdldCB0aGUgYm9udXMgYmFzZWQgb24gdGhlIGJ1eSB0aW1lIAogICAgICAqIEByZXR1cm4gdGhlIG51bWJlciBvZiBib251cyB0b2tlbgogICAgKi8KICAgIGZ1bmN0aW9uIGdldEJvbnVzKHVpbnQyNTYgX3Rva2VucykgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IGJvbnVzKSB7CiAgICAgICAgcmVxdWlyZShfdG9rZW5zICE9IDApOwogICAgICAgIGlmIChzdGFydFRpbWUgPD0gbm93ICYmIG5vdyA8IHN0YXJ0VGltZSArIDcgZGF5cyApIHsKICAgICAgICAgICAgcmV0dXJuIF90b2tlbnMuZGl2KDUpOwogICAgICAgIH0gZWxzZSBpZiAoc3RhcnRUaW1lICsgNyBkYXlzIDw9IG5vdyAmJiBub3cgPCBzdGFydFRpbWUgKyAxNCBkYXlzICkgewogICAgICAgICAgICByZXR1cm4gX3Rva2Vucy5kaXYoMTApOwogICAgICAgIH0gZWxzZSBpZiAoc3RhcnRUaW1lICsgMTQgZGF5cyA8PSBub3cgJiYgbm93IDwgc3RhcnRUaW1lICsgMjEgZGF5cyApIHsKICAgICAgICAgICAgcmV0dXJuIF90b2tlbnMuZGl2KDIwKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAwOwogICAgfQp9CgovKioKICogQHRpdGxlIENhcHBlZENyb3dkc2FsZQogKiBAZGV2IEV4dGVuc2lvbiBvZiBDcm93ZHNhbGUgd2l0aCBhIG1heCBhbW91bnQgb2YgZnVuZHMgcmFpc2VkCiAqLwpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgTW9kaWZpZWRDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICB1aW50MjU2IHB1YmxpYyBjYXA7CgogIGZ1bmN0aW9uIENhcHBlZENyb3dkc2FsZSh1aW50MjU2IF9jYXApIHB1YmxpYyB7CiAgICByZXF1aXJlKF9jYXAgPiAwKTsKICAgIGNhcCA9IF9jYXA7CiAgfQoKICAvLyBvdmVycmlkaW5nIENyb3dkc2FsZSN2YWxpZFB1cmNoYXNlIHRvIGFkZCBleHRyYSBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIC8vIFJlcXVlc3QgTW9kaWZpY2F0aW9uIDogZGVsZXRlIGNvbnN0YW50IGJlY2F1c2UgbmVlZGVkIGluIHNvbiBjb250cmFjdAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgd2l0aGluQ2FwID0gd2VpUmFpc2VkLmFkZChtc2cudmFsdWUpIDw9IGNhcDsKICAgIHJldHVybiBzdXBlci52YWxpZFB1cmNoYXNlKCkgJiYgd2l0aGluQ2FwOwogIH0KCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjaGFzRW5kZWQgdG8gYWRkIGNhcCBsb2dpYwogIC8vIEByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCBjYXBSZWFjaGVkID0gd2VpUmFpc2VkID49IGNhcDsKICAgIHJldHVybiBzdXBlci5oYXNFbmRlZCgpIHx8IGNhcFJlYWNoZWQ7CiAgfQoKfQoKCgovKioKICogQHRpdGxlIEdhaW5tZXJzU0FMRQogKiBAZGV2IAogKiBHYWlubWVyc1NBTEUgaW5oZXJpdHMgZm9ybSB0aGUgT3duYWJsZSBhbmQgQ2FwcGVkQ3Jvd2RzYWxlLAogKgogKiBAYXV0aG9yIEdhaW5tZXJzLlRlYW1kZXYKICovCmNvbnRyYWN0IEdhaW5tZXJzU0FMRSBpcyBPd25hYmxlLCBDYXBwZWRDcm93ZHNhbGUgewogICAgCiAgICAvL1RvdGFsIHN1cHBseSBvZiB0aGUgR2Fpbm1lcnNUT0tFTgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVG90YWxUT2tlblN1cHBseSA9IDEwMDAwMDAwMDsKCiAgICAvL0hhcmRjYXAgb2YgdGhlIElDTyBpbiB3ZWkKICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBIYXJkY2FwID0gMzAwMDAgZXRoZXI7CgogICAgLy9FeGNoYW5nZSByYXRlIEVIVC8gR01SIHRva2VuCiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgUmF0ZUV4Y2hhbmdlID0gMTY2MDsKCiAgIAoKICAgIC8qKkluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBUb2tlbnMqLwoKICAgIC8vIFRva2VuIGluaXRpYWx5IGRpc3RyaWJ1dGVkIGZvciB0aGUgdGVhbSBtYW5hZ2VtZW50IGFuZCBkZXZlbG9wZXIgaW5jZW50aXZlcyAoMTAlKQogICAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgVGVhbVdhbGxldCA9IDB4NjAwOTI2N0NiMTgzQUVDODg0MmNiMWQwMjA0MTBmMTcyZEQyZDUwRjsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFRlYW1XYWxsZXRBbW91bnQgPSAxMDAwMDAwMGUxODsgCiAgICAKICAgICAvLyBUb2tlbiBpbml0aWFseSBkaXN0cmlidXRlZCBmb3IgdGhlIEFkdmlzb3JzIGFuZCBzcG9uc29ycyAoMTAlKQogICAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgVGVhbUFkdmlzb3JzV2FsbGV0ID0gMHgzOTI1ODQ4YUY0Mzg4YTNjMTBjZDczRjM1MjkxNTlkZTVmMEM2ODZjOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgQWR2aXNvcnNBbW91bnQgPSAxMDAwMDAwMGUxODsKICAgIAogICAgIC8vIFRva2VuIGluaXRpYWxseSBkaXN0cmlidWRlZCBmb3IgZnV0dXJlIGludmVzbWVudCByb3VuZHMgYW5kIHByaXplcyBpbiB0aGUgcGxhdGFmb3JtICgxNSUpCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCAKICAgIFJlaW52ZXN0V2FsbGV0ID0gMHgxY2MxQmY2RDMxMDBDZTRFRTNhMzk4YkVkRTMzQTdlM2E0MjIyNUQ3OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgUmVpbnZlc3RBbW91bnQgPSAxNTAwMDAwMGUxODsKCiAgICAgLy8gVG9rZW4gaW5pdGlhbHkgZGlzdHJpYnV0ZWQgZm9yICBCb3VudHkgQ2FtcGFpbmcgKDUlKQogICAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgQm91bnR5Q2FtcGFpbmdXYWxsZXQgPSAweEQzNkZjQTBEQWQyNTU1NDkyMmQ4NjBkQTE4QWM0N2U0Rjk1MTM2NzIKICAgIDsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEJvdW50eUFtb3VudCA9IDUwMDAwMDBlMTg7CgogICAgCgogICAgLy9QZXJpb2QgYWZ0ZXIgdGhlIHNhbGUgZm9yIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcmFibGUKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEFmdGVyU2FsZVRyYW5zZmVyYWJsZVRpbWUgPSAyIGRheXM7CgoKICAgIGZ1bmN0aW9uIEdhaW5tZXJzU0FMRSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUpIHB1YmxpYwogICAgICBDYXBwZWRDcm93ZHNhbGUoSGFyZGNhcCkKICAgICAgTW9kaWZpZWRDcm93ZHNhbGUoX3N0YXJ0VGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgIF9lbmRUaW1lLCAKICAgICAgICAgICAgICAgICAgICAgICAgIFJhdGVFeGNoYW5nZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICBUZWFtV2FsbGV0KQogICAgewogICAgICAgIAogICAgICAgIHRva2VuLnRyYW5zZmVyKFRlYW1XYWxsZXQsIFRlYW1XYWxsZXRBbW91bnQpOwogICAgICAgIHRva2VuLnRyYW5zZmVyKFRlYW1BZHZpc29yc1dhbGxldCwgQWR2aXNvcnNBbW91bnQpOwogICAgICAgIHRva2VuLnRyYW5zZmVyKFJlaW52ZXN0V2FsbGV0LCBSZWludmVzdEFtb3VudCk7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoQm91bnR5Q2FtcGFpbmdXYWxsZXQsIEJvdW50eUFtb3VudCk7CgoKICAgICAgICAKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgSGFuZGxlcyB0aGUgY3JlYXRpb24gb2YgdGhlIEdhaW5tZXJzVE9LRU4KICAgICAqIEByZXR1cm4gdGhlICBTdGFuZGFyZFRva2VuIAogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0ICgpIAogICAgICBpbnRlcm5hbCAKICAgICAgcmV0dXJucyhTdGFuZGFyZFRva2VuKSAKICAgIHsKICAgICAgICByZXR1cm4gbmV3IEdhaW5tZXJzVE9LRU4oVG90YWxUT2tlblN1cHBseSwKICAgICAgICAgZW5kVGltZS5hZGQoQWZ0ZXJTYWxlVHJhbnNmZXJhYmxlVGltZSksCiAgICAgICAgVGVhbVdhbGxldCk7CiAgICB9CgoKCiAgICAvKioKICAgICAqIEBkZXYgRHJhaW4gdGhlIHJlbWFpbmluZyB0b2tlbnMgb2YgdGhlIGNyb3dkc2FsZSB0byB0aGUgVGVhbVdhbGxldCBhY2NvdW50CiAgICAgKiBAZGV2IE9ubHkgZm9yIG93bmVyCiAgICAgKiBAcmV0dXJuIHRoZSBTdGFuZGFyZFRva2VuIAogICAgICovCiAgICBmdW5jdGlvbiBkcmFpblJlbWFpbmluZ1Rva2VuICgpIAogICAgICBwdWJsaWMKICAgICAgb25seU93bmVyCiAgICB7CiAgICAgICAgcmVxdWlyZShoYXNFbmRlZCgpKTsKICAgICAgICB0b2tlbi50cmFuc2ZlcihUZWFtV2FsbGV0LCB0b2tlbi5iYWxhbmNlT2YodGhpcykpOwogICAgfQoKCiAgICAvKiogCiAgICAqIEBkZXYgQWxsb3dzIHRoZSBlYXJseSB0cmFuc2ZlciBvZiB0b2tlbnMgaWYgdGhlIElDTyBlbmQgYmVmb3JlIHRoZSBlbmQgZGF0ZQogICAgKi8KCiAgICBmdW5jdGlvbiBwb3N0QnV5VG9rZW5zICgpICBpbnRlcm5hbCB7CiAgICAgICAgaWYgKCB3ZWlSYWlzZWQgPj0gSGFyZGNhcCApIHsgIAogICAgICAgICAgICBHYWlubWVyc1RPS0VOIGdhaW5tZXJzVG9rZW4gPSBHYWlubWVyc1RPS0VOICh0b2tlbik7CiAgICAgICAgICAgIGdhaW5tZXJzVG9rZW4uZW5hYmxlVHJhbnNmZXJFYXJsaWVyKCk7CiAgICAgICAgICAgIGVtaXQgVG9rZW5TYWxlU29sZE91dCgpOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
