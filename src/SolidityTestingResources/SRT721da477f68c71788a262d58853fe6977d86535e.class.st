Class {
	#name : #SRT721da477f68c71788a262d58853fe6977d86535e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT721da477f68c71788a262d58853fe6977d86535e >> base64 [
	^ ''.
	

]
