Class {
	#name : #SRTd00faa50d4f1a97b407fdc8656c940712fdd4150,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd00faa50d4f1a97b407fdc8656c940712fdd4150 >> base64 [
	^ ''.
	

]
