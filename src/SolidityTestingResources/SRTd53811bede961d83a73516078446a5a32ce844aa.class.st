Class {
	#name : #SRTd53811bede961d83a73516078446a5a32ce844aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd53811bede961d83a73516078446a5a32ce844aa >> base64 [
	^ ''.
	

]
