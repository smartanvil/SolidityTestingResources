Class {
	#name : #SRT5d51fcced3114a8bb5e90cdd0f9d682bcbcc5393,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d51fcced3114a8bb5e90cdd0f9d682bcbcc5393 >> base64 [
	^ ''.
	

]
