Class {
	#name : #SRTf5c4f7f62e2fd249d001e8e51d4e5b308832f924,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5c4f7f62e2fd249d001e8e51d4e5b308832f924 >> base64 [
	^ ''.
	

]
