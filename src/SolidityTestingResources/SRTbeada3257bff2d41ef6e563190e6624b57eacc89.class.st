Class {
	#name : #SRTbeada3257bff2d41ef6e563190e6624b57eacc89,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbeada3257bff2d41ef6e563190e6624b57eacc89 >> base64 [
	^ ''.
	

]
