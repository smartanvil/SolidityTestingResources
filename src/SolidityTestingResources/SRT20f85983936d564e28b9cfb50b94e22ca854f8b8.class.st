Class {
	#name : #SRT20f85983936d564e28b9cfb50b94e22ca854f8b8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT20f85983936d564e28b9cfb50b94e22ca854f8b8 >> base64 [
	^ ''.
	

]
