Class {
	#name : #SRT41D9384Dc97470bd2aFA06dB0c1be4f872519eEC,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT41D9384Dc97470bd2aFA06dB0c1be4f872519eEC >> base64 [
	^ ''.
	

]
