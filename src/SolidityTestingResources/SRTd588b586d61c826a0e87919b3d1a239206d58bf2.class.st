Class {
	#name : #SRTd588b586d61c826a0e87919b3d1a239206d58bf2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd588b586d61c826a0e87919b3d1a239206d58bf2 >> base64 [
	^ ''.
	

]
