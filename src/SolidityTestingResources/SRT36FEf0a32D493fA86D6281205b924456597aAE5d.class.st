Class {
	#name : #SRT36FEf0a32D493fA86D6281205b924456597aAE5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36FEf0a32D493fA86D6281205b924456597aAE5d >> base64 [
	^ ''.
	

]
