Class {
	#name : #SRT8b84715c41bfb75f8e8ce47447180450758332b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8b84715c41bfb75f8e8ce47447180450758332b3 >> base64 [
	^ ''.
	

]
