Class {
	#name : #SRTb37e8a251cbf86ed168820364f5edde151675a30,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb37e8a251cbf86ed168820364f5edde151675a30 >> base64 [
	^ ''.
	

]
