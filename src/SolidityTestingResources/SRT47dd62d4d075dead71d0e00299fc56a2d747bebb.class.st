Class {
	#name : #SRT47dd62d4d075dead71d0e00299fc56a2d747bebb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47dd62d4d075dead71d0e00299fc56a2d747bebb >> base64 [
	^ ''.
	

]
