Class {
	#name : #SRTdb8378187bb9939ca33ee9ed1148dafecdf315f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdb8378187bb9939ca33ee9ed1148dafecdf315f9 >> base64 [
	^ 'Ly8KLy8gY29tcGlsZXI6IHNvbGNqcyAtbyAuL2J1aWxkL2NvbnRyYWN0cyAtLW9wdGltaXplIC0tYWJpIC0tYmluIDx0aGlzIGZpbGU+Ci8vICB2ZXJzaW9uOiAwLjQuMTUrY29tbWl0LmJiYjhlNjRmLkVtc2NyaXB0ZW4uY2xhbmcKLy8KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBvd25lZCB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIGZ1bmN0aW9uIG93bmVkKCkgeyBvd25lciA9IG1zZy5zZW5kZXI7IH0KCiAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHJldmVydCgpOyB9CiAgICBfOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlT3duZXIoIGFkZHJlc3MgbmV3b3duZXIgKSBvbmx5T3duZXIgewogICAgb3duZXIgPSBuZXdvd25lcjsKICB9Cn0KCi8vIHNlZSBodHRwczovL3d3dy5ldGhlcmV1bS5vcmcvdG9rZW4KaW50ZXJmYWNlIHRva2VuUmVjaXBpZW50IHsKICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoIGFkZHJlc3MgZnJvbSwgdWludDI1NiB2YWx1ZSwgYnl0ZXMgZGF0YSApOwp9CgovLyBFUkMyMjMKaW50ZXJmYWNlIENvbnRyYWN0UmVjZWl2ZXIgewogIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soIGFkZHJlc3MgZnJvbSwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSApOwp9CgovLyBFUkMyMjMtY29tcGxpYW50IHRva2VuIHdpdGggRVJDMjAgYmFjay1jb21wYXRpYmlsaXR5Ci8vCi8vIEltcGxlbWVudHM6Ci8vIC0gaHR0cHM6Ly90aGVldGhlcmV1bS53aWtpL3cvaW5kZXgucGhwL0VSQzIwX1Rva2VuX1N0YW5kYXJkCi8vIC0gaHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL3Rva2VuICh1bmNvbnRyb2xsZWQsIG5vbi1zdGFuZGFyZCkKLy8gLSBodHRwczovL2dpdGh1Yi5jb20vRGV4YXJhbi9FUkMyMy10b2tlbnMvYmxvYi9SZWNvbW1lbmRlZC9FUkMyMjNfVG9rZW4uc29sCgpjb250cmFjdCBKQlggaXMgb3duZWQKewogIHN0cmluZyAgcHVibGljIG5hbWU7ICAgICAgICAvLyBFUkMyMAogIHN0cmluZyAgcHVibGljIHN5bWJvbDsgICAgICAvLyBFUkMyMAogIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzOyAgICAvLyBFUkMyMAogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OyAvLyBFUkMyMAoKICBtYXBwaW5nKCBhZGRyZXNzID0+IHVpbnQyNTYgKSBiYWxhbmNlc187CiAgbWFwcGluZyggYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgKSBhbGxvd2FuY2VzXzsKCiAgLy8gRVJDMjAKICBldmVudCBBcHByb3ZhbCggYWRkcmVzcyBpbmRleGVkIG93bmVyLAogICAgICAgICAgICAgICAgICBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwKICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSApOwoKICAvLyBFUkMyMjMsIEVSQzIwIHBsdXMgbGFzdCBwYXJhbWV0ZXIKICBldmVudCBUcmFuc2ZlciggYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCB0bywKICAgICAgICAgICAgICAgICAgdWludDI1NiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgYnl0ZXMgICBpbmRleGVkIGRhdGEgKTsKCiAgLy8gRXRoZXJldW0gVG9rZW4KICBldmVudCBCdXJuKCBhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSApOwoKICBmdW5jdGlvbiBKQlgoKQogIHsKICAgIGJhbGFuY2VzX1ttc2cuc2VuZGVyXSA9IHVpbnQyNTYoMjAwMDAwMDAwKTsKICAgIHRvdGFsU3VwcGx5ID0gdWludDI1NigyMDAwMDAwMDApOwogICAgbmFtZSA9ICJKYm94IjsKICAgIGRlY2ltYWxzID0gdWludDgoMCk7CiAgICBzeW1ib2wgPSAiSkJYIjsKICB9CgogIC8vIEpib3gtc3BlY2lmaWMKICBmdW5jdGlvbiBtaW5lKCB1aW50MjU2IG5ld1Rva2VucyApIG9ubHlPd25lciB7CiAgICBpZiAobmV3VG9rZW5zICsgdG90YWxTdXBwbHkgPiA0ZTkpCiAgICAgIHJldmVydCgpOwoKICAgIHRvdGFsU3VwcGx5ICs9IG5ld1Rva2VuczsKICAgIGJhbGFuY2VzX1tvd25lcl0gKz0gbmV3VG9rZW5zOwogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgVHJhbnNmZXIoIGFkZHJlc3ModGhpcyksIG93bmVyLCBuZXdUb2tlbnMsIGVtcHR5ICk7CiAgfQoKICBmdW5jdGlvbigpIHBheWFibGUgeyByZXZlcnQoKTsgfSAvLyBkb2VzIG5vdCBhY2NlcHQgbW9uZXkKCiAgLy8gRVJDMjAKICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgb3duZXIgKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gYmFsYW5jZXNfW293bmVyXTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gYXBwcm92ZSggYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIGFsbG93YW5jZXNfW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gdmFsdWU7CiAgICBBcHByb3ZhbCggbXNnLnNlbmRlciwgc3BlbmRlciwgdmFsdWUgKTsKICAgIHJldHVybiB0cnVlOwogIH0KIAogIC8vIEVSQzIwCiAgZnVuY3Rpb24gYWxsb3dhbmNlKCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIgKSBjb25zdGFudAogIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKQogIHsKICAgIHJldHVybiBhbGxvd2FuY2VzX1tvd25lcl1bc3BlbmRlcl07CiAgfQoKICAvLyBFUkMyMAogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpCiAgewogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OyAvLyBudWxsCiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZW1wdHkgKTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUgKQogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCB2YWx1ZSA8PSBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSApOwoKICAgIGFsbG93YW5jZXNfW2Zyb21dW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgX3RyYW5zZmVyKCBmcm9tLCB0bywgdmFsdWUsIGVtcHR5ICk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGNvbnRleHQgKQogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBpZiAoIGFwcHJvdmUoc3BlbmRlciwgdmFsdWUpICkKICAgIHsKICAgICAgdG9rZW5SZWNpcGllbnQgcmVjaXAgPSB0b2tlblJlY2lwaWVudCggc3BlbmRlciApOwogICAgICByZWNpcC5yZWNlaXZlQXBwcm92YWwoIG1zZy5zZW5kZXIsIHZhbHVlLCBjb250ZXh0ICk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0gICAgICAgIAoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGJ1cm4oIHVpbnQyNTYgdmFsdWUgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgcmVxdWlyZSggYmFsYW5jZXNfW21zZy5zZW5kZXJdID49IHZhbHVlICk7CiAgICBiYWxhbmNlc19bbXNnLnNlbmRlcl0gLT0gdmFsdWU7CiAgICB0b3RhbFN1cHBseSAtPSB2YWx1ZTsKCiAgICBCdXJuKCBtc2cuc2VuZGVyLCB2YWx1ZSApOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGJ1cm5Gcm9tKCBhZGRyZXNzIGZyb20sIHVpbnQyNTYgdmFsdWUgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgcmVxdWlyZSggYmFsYW5jZXNfW2Zyb21dID49IHZhbHVlICk7CiAgICByZXF1aXJlKCB2YWx1ZSA8PSBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSApOwoKICAgIGJhbGFuY2VzX1tmcm9tXSAtPSB2YWx1ZTsKICAgIGFsbG93YW5jZXNfW2Zyb21dW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgdG90YWxTdXBwbHkgLT0gdmFsdWU7CgogICAgQnVybiggZnJvbSwgdmFsdWUgKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gX3RyYW5zZmVyKCBhZGRyZXNzIGZyb20sCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIHRvLAogICAgICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGRhdGEgKSBpbnRlcm5hbAogIHsKICAgIHJlcXVpcmUoIHRvICE9IDB4MCApOwogICAgcmVxdWlyZSggYmFsYW5jZXNfW2Zyb21dID49IHZhbHVlICk7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bdG9dICsgdmFsdWUgPiBiYWxhbmNlc19bdG9dICk7IC8vIGNhdGNoIG92ZXJmbG93CgogICAgYmFsYW5jZXNfW2Zyb21dIC09IHZhbHVlOwogICAgYmFsYW5jZXNfW3RvXSArPSB2YWx1ZTsKCiAgICBUcmFuc2ZlciggZnJvbSwgdG8sIHZhbHVlLCBkYXRhICk7CiAgfQoKICAvLyBFUkMyMjMgVHJhbnNmZXIgYW5kIGludm9rZSBzcGVjaWZpZWQgY2FsbGJhY2sKICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywKICAgICAgICAgICAgICAgICAgICAgdWludCB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgZGF0YSwKICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGN1c3RvbV9mYWxsYmFjayApIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICBfdHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSwgZGF0YSApOwoKICAgIGlmICggaXNDb250cmFjdCh0bykgKQogICAgewogICAgICBDb250cmFjdFJlY2VpdmVyIHJ4ID0gQ29udHJhY3RSZWNlaXZlciggdG8gKTsKICAgICAgcmVxdWlyZSggcnguY2FsbC52YWx1ZSgwKQogICAgICAgICAgICAgICAgICAoYnl0ZXM0KHNoYTMoY3VzdG9tX2ZhbGxiYWNrKSksIG1zZy5zZW5kZXIsIHZhbHVlLCBkYXRhKSApOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIHRvIGEgY29udHJhY3Qgb3IgZXh0ZXJuYWxseS1vd25lZCBhY2NvdW50CiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgaWYgKGlzQ29udHJhY3QodG8pKSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQ29udHJhY3QoIHRvLCB2YWx1ZSwgZGF0YSApOwogICAgfQoKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBUcmFuc2ZlciB0byBjb250cmFjdCBhbmQgaW52b2tlIHRva2VuRmFsbGJhY2soKSBtZXRob2QKICBmdW5jdGlvbiB0cmFuc2ZlclRvQ29udHJhY3QoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwcml2YXRlCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgQ29udHJhY3RSZWNlaXZlciByeCA9IENvbnRyYWN0UmVjZWl2ZXIodG8pOwogICAgcngudG9rZW5GYWxsYmFjayggbXNnLnNlbmRlciwgdmFsdWUsIGRhdGEgKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBmZXRjaCBjb250cmFjdCBzaXplIChtdXN0IGJlIG5vbnplcm8gdG8gYmUgYSBjb250cmFjdCkKICBmdW5jdGlvbiBpc0NvbnRyYWN0KCBhZGRyZXNzIF9hZGRyICkgcHJpdmF0ZSByZXR1cm5zIChib29sKQogIHsKICAgIHVpbnQgbGVuZ3RoOwogICAgYXNzZW1ibHkgeyBsZW5ndGggOj0gZXh0Y29kZXNpemUoX2FkZHIpIH0KICAgIHJldHVybiAobGVuZ3RoID4gMCk7CiAgfQp9'.
	

]
