Class {
	#name : #SRTd132a30ab80686e4926e2a1ffeb5479c8f566621,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd132a30ab80686e4926e2a1ffeb5479c8f566621 >> base64 [
	^ ''.
	

]
