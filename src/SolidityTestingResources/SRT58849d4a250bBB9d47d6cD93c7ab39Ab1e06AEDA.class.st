Class {
	#name : #SRT58849d4a250bBB9d47d6cD93c7ab39Ab1e06AEDA,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT58849d4a250bBB9d47d6cD93c7ab39Ab1e06AEDA >> base64 [
	^ ''.
	

]
