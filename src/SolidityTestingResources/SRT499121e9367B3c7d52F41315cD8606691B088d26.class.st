Class {
	#name : #SRT499121e9367B3c7d52F41315cD8606691B088d26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT499121e9367B3c7d52F41315cD8606691B088d26 >> base64 [
	^ ''.
	

]
