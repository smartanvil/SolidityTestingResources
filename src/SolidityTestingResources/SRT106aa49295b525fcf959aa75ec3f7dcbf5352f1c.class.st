Class {
	#name : #SRT106aa49295b525fcf959aa75ec3f7dcbf5352f1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT106aa49295b525fcf959aa75ec3f7dcbf5352f1c >> base64 [
	^ ''.
	

]
