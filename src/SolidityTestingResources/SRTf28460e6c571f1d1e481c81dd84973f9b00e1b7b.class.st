Class {
	#name : #SRTf28460e6c571f1d1e481c81dd84973f9b00e1b7b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf28460e6c571f1d1e481c81dd84973f9b00e1b7b >> base64 [
	^ ''.
	

]
