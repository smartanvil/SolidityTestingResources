Class {
	#name : #SRT55cbc016483d279387f3ec774814bfdfbc1e4582,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55cbc016483d279387f3ec774814bfdfbc1e4582 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCi8vIEVSQzIwIHRva2VuIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBvbmx5IHBhcnRpYWxseQovLyAobm8gU2FmZU1hdGggaXMgdXNlZCBiZWNhdXNlIGNvbnRyYWN0IGNvZGUgaXMgdmVyeSBzaW1wbGUpCi8vIAovLyBTb21lIGZ1bmN0aW9ucyBsZWZ0IHVuZGVmaW5lZDoKLy8gIC0gdHJhbnNmZXIsIHRyYW5zZmVyRnJvbSwKLy8gIC0gYXBwcm92ZSwgYWxsb3dhbmNlLgpjb250cmFjdCBQcmVzYWxlVG9rZW4KewovLy8gRmllbGRzOgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIklNTUxBIFByZXNhbGUgVG9rZW4gdi4yIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIklNTCI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgUFJJQ0UgPSA1MjAwOyAgLy8gcGVyIDEgRXRoZXIKCiAgICAvLyAgcHJpY2UKICAgIC8vIENhcCBpcyA2MDAgRVRICiAgICAvLyAxIGV0aCA9IDUyMDAgcHJlc2FsZSBJTU1MQSB0b2tlbnMKICAgIC8vIAogICAgLy8gRVRIIHByaWNlIDMyMCQgLSAxNS4xMC4yMDE3CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTl9TVVBQTFlfTElNSVQgPSBQUklDRSAqIDYwMCAqICgxIGV0aGVyIC8gMSB3ZWkpOwoKICAgIGVudW0gU3RhdGV7CiAgICAgICBJbml0LAogICAgICAgUnVubmluZywKICAgICAgIFBhdXNlZCwKICAgICAgIE1pZ3JhdGluZywKICAgICAgIE1pZ3JhdGVkCiAgICB9CgogICAgU3RhdGUgcHVibGljIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLkluaXQ7CiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7IC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkCgogICAgLy8gR2F0aGVyZWQgZnVuZHMgY2FuIGJlIHdpdGhkcmF3biBvbmx5IHRvIGVzY3JvdydzIGFkZHJlc3MuCiAgICBhZGRyZXNzIHB1YmxpYyBlc2Nyb3c7CgogICAgLy8gVG9rZW4gbWFuYWdlciBoYXMgZXhjbHVzaXZlIHByaXZlbGVnZXMgdG8gY2FsbCBhZG1pbmlzdHJhdGl2ZQogICAgLy8gZnVuY3Rpb25zIG9uIHRoaXMgY29udHJhY3QuCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk1hbmFnZXI7CgogICAgLy8gQ3Jvd2RzYWxlIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGJ1cm4gcHJlc2FsZSB0b2tlbnMuCiAgICBhZGRyZXNzIHB1YmxpYyBjcm93ZHNhbGVNYW5hZ2VyOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlOwoKLy8vIE1vZGlmaWVyczoKICAgIG1vZGlmaWVyIG9ubHlUb2tlbk1hbmFnZXIoKSAgICAgeyBpZihtc2cuc2VuZGVyICE9IHRva2VuTWFuYWdlcikgdGhyb3c7IF87IH0KICAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVNYW5hZ2VyKCkgeyBpZihtc2cuc2VuZGVyICE9IGNyb3dkc2FsZU1hbmFnZXIpIHRocm93OyBfOyB9CiAgICBtb2RpZmllciBvbmx5SW5TdGF0ZShTdGF0ZSBzdGF0ZSl7IGlmKHN0YXRlICE9IGN1cnJlbnRTdGF0ZSkgdGhyb3c7IF87IH0KCi8vLyBFdmVudHM6CiAgICBldmVudCBMb2dCdXkoYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IExvZ0J1cm4oYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IExvZ1N0YXRlU3dpdGNoKFN0YXRlIG5ld1N0YXRlKTsKCi8vLyBGdW5jdGlvbnM6CiAgICAvLy8gQGRldiBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gUHJlc2FsZVRva2VuKCkKICAgIHsKICAgICAgICB0b2tlbk1hbmFnZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGVzY3JvdyA9IDB4OWE2RmI4NmJkMjZDYmNCRjViYTFiOWRGZDU1ZjQ3OTg3NUYzMTBDYjsKICAgICAgICBjcm93ZHNhbGVNYW5hZ2VyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfYnV5ZXIpIHB1YmxpYyBwYXlhYmxlIG9ubHlJblN0YXRlKFN0YXRlLlJ1bm5pbmcpCiAgICB7CiAgICAgICAgaWYobXNnLnZhbHVlID09IDApIHRocm93OwogICAgICAgIHVpbnQgbmV3VG9rZW5zID0gbXNnLnZhbHVlICogUFJJQ0U7CgogICAgICAgIGlmICh0b3RhbFN1cHBseSArIG5ld1Rva2VucyA+IFRPS0VOX1NVUFBMWV9MSU1JVCkgdGhyb3c7CgogICAgICAgIGJhbGFuY2VbX2J1eWVyXSArPSBuZXdUb2tlbnM7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gbmV3VG9rZW5zOwoKICAgICAgICBMb2dCdXkoX2J1eWVyLCBuZXdUb2tlbnMpOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBvbmx5Q3Jvd2RzYWxlTWFuYWdlciBvbmx5SW5TdGF0ZShTdGF0ZS5NaWdyYXRpbmcpCiAgICB7CiAgICAgICAgdWludCB0b2tlbnMgPSBiYWxhbmNlW19vd25lcl07CiAgICAgICAgaWYodG9rZW5zID09IDApIHRocm93OwoKICAgICAgICBiYWxhbmNlW19vd25lcl0gPSAwOwogICAgICAgIHRvdGFsU3VwcGx5IC09IHRva2VuczsKCiAgICAgICAgTG9nQnVybihfb3duZXIsIHRva2Vucyk7CgogICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgc3dpdGNoIHBoYXNlIHdoZW4gbWlncmF0aW9uIGlzIGRvbmUuCiAgICAgICAgaWYodG90YWxTdXBwbHkgPT0gMCkgCiAgICAgICAgewogICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBTdGF0ZS5NaWdyYXRlZDsKICAgICAgICAgICAgTG9nU3RhdGVTd2l0Y2goU3RhdGUuTWlncmF0ZWQpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIAogICAgewogICAgICAgIHJldHVybiBiYWxhbmNlW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UHJlc2FsZVN0YXRlKFN0YXRlIF9uZXh0U3RhdGUpIHB1YmxpYyBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgICAgLy8gSW5pdCAtPiBSdW5uaW5nCiAgICAgICAgLy8gUnVubmluZyAtPiBQYXVzZWQKICAgICAgICAvLyBSdW5uaW5nIC0+IE1pZ3JhdGluZwogICAgICAgIC8vIFBhdXNlZCAtPiBSdW5uaW5nCiAgICAgICAgLy8gUGF1c2VkIC0+IE1pZ3JhdGluZwogICAgICAgIC8vIE1pZ3JhdGluZyAtPiBNaWdyYXRlZAogICAgICAgIGJvb2wgY2FuU3dpdGNoU3RhdGUKICAgICAgICAgICAgID0gIChjdXJyZW50U3RhdGUgPT0gU3RhdGUuSW5pdCAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlJ1bm5pbmcpCiAgICAgICAgICAgICB8fCAoY3VycmVudFN0YXRlID09IFN0YXRlLlJ1bm5pbmcgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5QYXVzZWQpCiAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0aW9uIHBoYXNlIG9ubHkgaWYgY3Jvd2RzYWxlIG1hbmFnZXIgaXMgc2V0CiAgICAgICAgICAgICB8fCAoKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5SdW5uaW5nIHx8IGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5QYXVzZWQpCiAgICAgICAgICAgICAgICAgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcKICAgICAgICAgICAgICAgICAmJiBjcm93ZHNhbGVNYW5hZ2VyICE9IDB4MCkKICAgICAgICAgICAgIHx8IChjdXJyZW50U3RhdGUgPT0gU3RhdGUuUGF1c2VkICYmIF9uZXh0U3RhdGUgPT0gU3RhdGUuUnVubmluZykKICAgICAgICAgICAgIC8vIHN3aXRjaCB0byBtaWdyYXRlZCBvbmx5IGlmIGV2ZXJ5dGluZyBpcyBtaWdyYXRlZAogICAgICAgICAgICAgfHwgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRlZAogICAgICAgICAgICAgICAgICYmIHRvdGFsU3VwcGx5ID09IDApOwoKICAgICAgICBpZighY2FuU3dpdGNoU3RhdGUpIHRocm93OwoKICAgICAgICBjdXJyZW50U3RhdGUgPSBfbmV4dFN0YXRlOwogICAgICAgIExvZ1N0YXRlU3dpdGNoKF9uZXh0U3RhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIoKSBwdWJsaWMgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIGlmKHRoaXMuYmFsYW5jZSA+IDApIAogICAgICAgIHsKICAgICAgICAgICAgaWYoIWVzY3Jvdy5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93OwogICAgICAgIH0KICAgIH0KCi8vLyBTZXR0ZXJzL2dldHRlcnMKICAgIGZ1bmN0aW9uIHNldFRva2VuTWFuYWdlcihhZGRyZXNzIF9tZ3IpIHB1YmxpYyBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgICAgdG9rZW5NYW5hZ2VyID0gX21ncjsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVNYW5hZ2VyKGFkZHJlc3MgX21ncikgcHVibGljIG9ubHlUb2tlbk1hbmFnZXIKICAgIHsKICAgICAgICAvLyBZb3UgY2FuJ3QgY2hhbmdlIGNyb3dkc2FsZSBjb250cmFjdCB3aGVuIG1pZ3JhdGlvbiBpcyBpbiBwcm9ncmVzcy4KICAgICAgICBpZihjdXJyZW50U3RhdGUgPT0gU3RhdGUuTWlncmF0aW5nKSB0aHJvdzsKCiAgICAgICAgY3Jvd2RzYWxlTWFuYWdlciA9IF9tZ3I7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG9rZW5NYW5hZ2VyKCljb25zdGFudCByZXR1cm5zKGFkZHJlc3MpCiAgICB7CiAgICAgICAgcmV0dXJuIHRva2VuTWFuYWdlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDcm93ZHNhbGVNYW5hZ2VyKCljb25zdGFudCByZXR1cm5zKGFkZHJlc3MpCiAgICB7CiAgICAgICAgcmV0dXJuIGNyb3dkc2FsZU1hbmFnZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCljb25zdGFudCByZXR1cm5zKFN0YXRlKQogICAgewogICAgICAgIHJldHVybiBjdXJyZW50U3RhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJpY2UoKWNvbnN0YW50IHJldHVybnModWludCkKICAgIHsKICAgICAgICByZXR1cm4gUFJJQ0U7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VG90YWxTdXBwbHkoKWNvbnN0YW50IHJldHVybnModWludCkKICAgIHsKICAgICAgICByZXR1cm4gdG90YWxTdXBwbHk7CiAgICB9CgoKICAgIC8vIERlZmF1bHQgZmFsbGJhY2sgZnVuY3Rpb24KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSAKICAgIHsKICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgICB9Cn0='.
	

]
