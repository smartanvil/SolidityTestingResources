Class {
	#name : #SRTea1f346faf023f974eb5adaf088bbcdf02d761f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea1f346faf023f974eb5adaf088bbcdf02d761f4 >> base64 [
	^ ''.
	

]
