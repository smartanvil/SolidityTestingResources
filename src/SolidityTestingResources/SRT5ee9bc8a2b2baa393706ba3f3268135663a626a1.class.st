Class {
	#name : #SRT5ee9bc8a2b2baa393706ba3f3268135663a626a1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5ee9bc8a2b2baa393706ba3f3268135663a626a1 >> base64 [
	^ ''.
	

]
