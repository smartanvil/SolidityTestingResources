Class {
	#name : #SRT87a6d6b84e2c53b5178084c6bf513c569afc17f8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87a6d6b84e2c53b5178084c6bf513c569afc17f8 >> base64 [
	^ ''.
	

]
