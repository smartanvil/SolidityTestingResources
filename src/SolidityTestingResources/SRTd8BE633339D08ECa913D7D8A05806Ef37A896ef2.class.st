Class {
	#name : #SRTd8BE633339D08ECa913D7D8A05806Ef37A896ef2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd8BE633339D08ECa913D7D8A05806Ef37A896ef2 >> base64 [
	^ ''.
	

]
