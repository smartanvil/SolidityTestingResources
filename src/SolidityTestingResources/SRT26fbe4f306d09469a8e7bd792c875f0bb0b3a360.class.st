Class {
	#name : #SRT26fbe4f306d09469a8e7bd792c875f0bb0b3a360,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT26fbe4f306d09469a8e7bd792c875f0bb0b3a360 >> base64 [
	^ ''.
	

]
