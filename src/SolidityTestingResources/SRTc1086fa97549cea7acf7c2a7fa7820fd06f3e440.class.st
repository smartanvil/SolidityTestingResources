Class {
	#name : #SRTc1086fa97549cea7acf7c2a7fa7820fd06f3e440,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc1086fa97549cea7acf7c2a7fa7820fd06f3e440 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovLyBEZXYgZmVlIHBheW91dCBjb250cmFjdCArIGRpdmlkZW5kIG9wdGlvbnMgCi8vIEV0aGVyR3V5IERBcHAgZmVlIHdpbGwgYmUgc3RvcmVkIGhlcmUgCi8vIEJ1eWluZyBhbnkgdG9rZW4gZ2l2ZXMgcmlnaHQgdG8gY2xhaW0gCi8vIFVJOiBldGhlcmd1eS5zdXJnZS5zaC9kaXZpZGVuZC5odG1sCi8vIE1hZGUgYnkgRXRoZXJHdXksIDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIwZDY4Nzk2NTY4N2Y2YTc4NzQ0ZDYwNmM2NDYxMjM2ZTYyNjAiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+IAoKLy8gSUYgVEhFUkUgSVMgQU5ZIEJVRyB0aGUgZGF0YSB3aWxsIGJlIHJlcm9sbGVkIGZyb20gaGVyZS4gU2VlIHRoZSBkaXNjb3JkIGh0dHBzOi8vZGlzY29yZC5nZy9SODRoRDZmIGlmIGFueXRoaW5nIGhhcHBlbnMgb3IgbWFpbCBtZSAKCgpjb250cmFjdCBEaXZpZGVuZHN7CiAgICAvLyAxMCBtaWxsaW9uIHRva2VuIHN1cHBseSAKICAgIHVpbnQyNTYgY29uc3RhbnQgVG9rZW5TdXBwbHkgPSAxMDAwMDAwMDsKICAgIAogICAgdWludDI1NiBwdWJsaWMgVG90YWxQYWlkID0gMDsKICAgIAogICAgdWludDE2IHB1YmxpYyBUYXggPSAxMjUwOyAKICAgIAogICAgYWRkcmVzcyBkZXY7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIE15VG9rZW5zOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgRGl2aWRlbmRDb2xsZWN0U2luY2U7CiAgICAKICAgIC8vIFRLTlMgLyBQUklDRSAKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2WzJdKSBwdWJsaWMgU2VsbE9yZGVyOwogICAgCiAgICAvLyB3ZWIgCiAgICAvLyByZXR1cm5zIHRva2VucyArIHByaWNlIChpbiB3ZWkpCiAgICBmdW5jdGlvbiBHZXRTZWxsT3JkZXJEZXRhaWxzKGFkZHJlc3Mgd2hvKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2KXsKICAgICAgICByZXR1cm4gKFNlbGxPcmRlclt3aG9dWzBdLCBTZWxsT3JkZXJbd2hvXVsxXSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFZpZXdNeVRva2VucyhhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nil7CiAgICAgICAgcmV0dXJuIE15VG9rZW5zW3dob107CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFZpZXdNeURpdnMoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHVpbnQyNTYgdGtucyA9IE15VG9rZW5zW3dob107CiAgICAgICAgaWYgKHRrbnM9PTApewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChHZXREaXZpZGVuZHMod2hvLCB0a25zKSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEJhbCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHJldHVybiAoYWRkcmVzcyh0aGlzKS5iYWxhbmNlKTsKICAgIH0KICAgIAogICAgLy8gPk1JTlQgSVQKICAgIGZ1bmN0aW9uIERpdmlkZW5kcygpIHB1YmxpYyB7CiAgICAgICAgZGV2ID0gbXNnLnNlbmRlcjsKICAgICAgICAvLyBFRwogICAgICAgIE15VG9rZW5zW21zZy5zZW5kZXJdID0gVG9rZW5TdXBwbHkgLSA0MDAwMDA7CiAgICAgICAgLy8gSEUKICAgICAgICBNeVRva2Vuc1thZGRyZXNzKDB4ODNjMEVmYzZkOEIxNkQ4N0JGZTEzMzVBQjZCY0FiM0VkMzk2MDI4NSldID0gMjAwMDAwOwogICAgICAgIC8vIFBHCiAgICAgICAgTXlUb2tlbnNbYWRkcmVzcygweDI2NTgxZDE5ODNjZWQ4OTU1QzE3MGVCNGQzMjIyRENkMzg0NWEwOTIpXSA9IDIwMDAwMDsKICAgICAgICAvL015VG9rZW5zW2FkZHJlc3MoMHgwKV0gPSA0MDAwMDA7CiAgICAgICAgUGxhY2VTZWxsT3JkZXIoMTYwMDAwMCwgKDAuNSBzemFibykpOyAvLyAxIHRva2VuIHBlciAwLjUgc3phYm8gLyA1MDAgZ3dlaSBvciAxMDAwIHRva2VucyBwZXIgMC41IGZpbm5leSAvIDAuMDAwNSBldGhlciBvciAxTSB0b2tlbnMgcGVyIDAuNSBFVEggCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIEdldERpdmlkZW5kcyhhZGRyZXNzIHdobywgdWludDI1NiBUb2tlbkFtb3VudCkgaW50ZXJuYWwgdmlldyAgcmV0dXJucyh1aW50MjU2KXsKICAgICAgICBpZiAoVG9rZW5BbW91bnQgPT0gMCl7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IFRvdGFsQ29udHJhY3RJbiA9IGFkZHJlc3ModGhpcykuYmFsYW5jZSArIFRvdGFsUGFpZDsKICAgICAgICAvLyBkaXZpc2lvbiByb3VuZHMgRE9XTiBzbyB3ZSBuZXZlciBwYXkgdG9vIG11Y2gKICAgICAgICAvLyBubyByZXZlcnQgZXJyb3JzIGR1ZSB0byB0aGlzLiAKICAgICAgICAKICAgICAgICB1aW50MjU2IE15QmFsYW5jZSA9IHN1YihUb3RhbENvbnRyYWN0SW4sIERpdmlkZW5kQ29sbGVjdFNpbmNlW3dob10pOwogICAgICAgIAogICAgICAgIHJldHVybiAgKChNeUJhbGFuY2UgKiBUb2tlbkFtb3VudCkgLyAoVG9rZW5TdXBwbHkpKTsKICAgIH0KICAgIAoKICAgIGV2ZW50IFNvbGQoYWRkcmVzcyBCdXllciwgYWRkcmVzcyBTZWxsZXIsIHVpbnQyNTYgcHJpY2UsIHVpbnQyNTYgdG9rZW5zKTsKICAgIGZ1bmN0aW9uIEJ1eShhZGRyZXNzIHdobykgcHVibGljIHBheWFibGUgewogICAgICAgLy8gcmVxdWlyZShtc2cudmFsdWUgPj0gKDEgc3phYm8pKTsgLy8gbm9ybWFsIGFtb3VudHMgcGxzIAogICAgICAgIC8vIGxvb2t1cCBvcmRlciBieSBhZGRyIAogICAgICAgIHVpbnQyNTZbMl0gbWVtb3J5IG9yZGVyID0gU2VsbE9yZGVyW3dob107CiAgICAgICAgdWludDI1NiBhbXRfYXZhaWxhYmxlID0gb3JkZXJbMF07CiAgICAgICAgdWludDI1NiBwcmljZSA9IG9yZGVyWzFdOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgZXhjZXNzID0gMDsKICAgICAgICAKICAgICAgICAvLyBub3RoaW5nIHRvIHNlbGwgCiAgICAgICAgaWYgKGFtdF9hdmFpbGFibGUgPT0gMCl7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50MjU2IG1heCA9IGFtdF9hdmFpbGFibGUgKiBwcmljZTsgCiAgICAgICAgdWludDI1NiBjdXJydmFsID0gbXNnLnZhbHVlOwogICAgICAgIC8vIG1vcmUgdGhhbiBtYXggYnV5IHZhbHVlIAogICAgICAgIGlmIChjdXJydmFsID4gbWF4KXsKICAgICAgICAgICAgZXhjZXNzID0gKGN1cnJ2YWwtbWF4KTsKICAgICAgICAgICAgY3VycnZhbCA9IG1heDsKICAgICAgICB9CiAgICAgICAgCgoKCiAgICAgICAgdWludDI1NiB0YWtlID0gY3VycnZhbCAvIHByaWNlOwogICAgICAgIAogICAgICAgIGlmICh0YWtlID09IDApewogICAgICAgICAgICByZXZlcnQoKTsgLy8gdmVyeSBoaWdoIHByaWNlIGFwcGFyZW50bHkgCiAgICAgICAgfQogICAgICAgIGV4Y2VzcyA9IGV4Y2VzcyArIHN1YihjdXJydmFsLCB0YWtlICogcHJpY2UpOyAKCiAgICAgICAgCiAgICAgICAgaWYgKGV4Y2VzcyA+IDApewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV4Y2Vzcyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGN1cnJ2YWwgPSBzdWIoY3VycnZhbCxleGNlc3MpOwogICAgICAgIAogICAgICAgIC8vIHBheSBmZWVzIAoKICAgICAgICB1aW50MjU2IGZlZSA9IChUYXggKiBjdXJydmFsKS8xMDAwMDsKICAgICAgICBkZXYudHJhbnNmZXIoZmVlKTsKICAgICAgICB3aG8udHJhbnNmZXIoY3VycnZhbC1mZWUpOwogICAgICAgIAogICAgICAgIC8vIHRoZSBwZXJzb24gd2l0aCB0aGVzZSB0b2tlbnMgd2lsbCBhbHNvIHJlY2VpdmUgZGl2aWRlbmQgb3ZlciB0aGlzIGJ1eSBvcmRlciAodGhpcy5iYWxhbmNlKQogICAgICAgIC8vIGhvd2V2ZXIgdGhlIGV4Y2VzcyBpcyByZW1vdmVkLCBzZWUgdGhlIGV4Y2VzcyB0cmFuc2ZlciBhYm92ZSAKICAgICAvLyAgIGlmIChtc2cudmFsdWUgPiAoZXhjZXNzK2N1cnJ2YWwrZmVlKSl7CiAgICAgIC8vICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUtZXhjZXNzLWN1cnJ2YWwtZmVlKTsKICAgICAvLyAgIH0KICAgICAgICBfd2l0aGRyYXcod2hvLCBNeVRva2Vuc1t3aG9dKTsKICAgICAgICBpZiAoTXlUb2tlbnNbbXNnLnNlbmRlcl0gPiAwKXsKICAgICAgICAgICAgCiAgICAgICAgICAgIF93aXRoZHJhdyhtc2cuc2VuZGVyLCBNeVRva2Vuc1ttc2cuc2VuZGVyXSk7CiAgICAgICAgfQogICAgICAgIE15VG9rZW5zW3dob10gPSBNeVRva2Vuc1t3aG9dIC0gdGFrZTsgCiAgICAgICAgU2VsbE9yZGVyW3dob11bMF0gPSBTZWxsT3JkZXJbd2hvXVswXS10YWtlOyAKICAgICAgICBNeVRva2Vuc1ttc2cuc2VuZGVyXSA9IE15VG9rZW5zW21zZy5zZW5kZXJdICsgdGFrZTsKICAgIC8vICAgIE15UGF5b3V0c1ttc2cuc2VuZGVyXSA9IE15UGF5b3V0c1ttc2cuc2VuZGVyXSArIEdldERpdmlkZW5kcyhtc2cuc2VuZGVyLCB0YWtlKTsKICAgICAgICBEaXZpZGVuZENvbGxlY3RTaW5jZVttc2cuc2VuZGVyXSA9IChhZGRyZXNzKHRoaXMpLmJhbGFuY2UpICsgVG90YWxQYWlkOwogICAgICAgIAogICAgICAgIGVtaXQgU29sZChtc2cuc2VuZGVyLCB3aG8sIHByaWNlLCB0YWtlKTsKICAgICAgIC8vIHB1c2goKGV4Y2VzcyArIGN1cnJ2YWwpLygxIGZpbm5leSksIChtc2cudmFsdWUpLygxIGZpbm5leSkpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBXaXRoZHJhdygpIHB1YmxpYyB7CiAgICAgICAgX3dpdGhkcmF3KG1zZy5zZW5kZXIsIE15VG9rZW5zW21zZy5zZW5kZXJdKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gX3dpdGhkcmF3KGFkZHJlc3Mgd2hvLCB1aW50MjU2IGFtdCkgaW50ZXJuYWx7CiAgICAgICAgLy8gd2l0aGRyYXdzIGZyb20gYW10LiAKICAgICAgICAvLyAoYW10IG5vdCB1c2VkIGluIGN1cnJlbnQgY29kZSwgYWx3YXlzIHNhbWUgdmFsdWUpCiAgICAgICAgaWYgKE15VG9rZW5zW3dob10gPCBhbXQpewogICAgICAgICAgICByZXZlcnQoKTsgLy8gPz8/IHNlY3VyaXR5IGNoZWNrIAogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50MjU2IGRpdnMgPSBHZXREaXZpZGVuZHMod2hvLCBhbXQpOwogICAgICAgIAogICAgICAgIHdoby50cmFuc2ZlcihkaXZzKTsKICAgICAgICBUb3RhbFBhaWQgPSBUb3RhbFBhaWQgKyBkaXZzOwogICAgICAgIAogICAgICAgIERpdmlkZW5kQ29sbGVjdFNpbmNlW3dob10gPSBUb3RhbFBhaWQgKyBhZGRyZXNzKHRoaXMpLmJhbGFuY2U7CiAgICB9CiAgICAKICAgIGV2ZW50IFNlbGxPcmRlclBsYWNlZChhZGRyZXNzIHdobywgdWludDI1NiBhbXQsIHVpbnQyNTYgcHJpY2UpOwogICAgZnVuY3Rpb24gUGxhY2VTZWxsT3JkZXIodWludDI1NiBhbXQsIHVpbnQyNTYgcHJpY2UpIHB1YmxpYyB7CiAgICAgICAgLy8gcmVwbGFjZXMgb2xkIG9yZGVyIAogICAgICAgIGlmIChhbXQgPiBNeVRva2Vuc1ttc2cuc2VuZGVyXSl7CiAgICAgICAgICAgIHJldmVydCgpOyAvLyA/PyBtb3JlIHNlbGwgdGhhbiB5b3UgZ290IAogICAgICAgIH0KICAgICAgICBTZWxsT3JkZXJbbXNnLnNlbmRlcl0gPSBbYW10LHByaWNlXTsKICAgICAgICBlbWl0IFNlbGxPcmRlclBsYWNlZChtc2cuc2VuZGVyLCBhbXQsIHByaWNlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gQ2hhbmdlVGF4KHVpbnQxNiBhbXQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSAoYW10IDw9IDI1MDApOwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBkZXYpOwogICAgICAgIFRheD1hbXQ7CiAgICB9CiAgICAKICAgIAogICAgLy8gZHVtcCBkaXZzIGluIGNvbnRyYWN0IAogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfSAKICAgIAp9'.
	

]
