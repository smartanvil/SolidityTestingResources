Class {
	#name : #SRTb1f2b7220840502aac99a3507b4948b66eaa3c99,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1f2b7220840502aac99a3507b4948b66eaa3c99 >> base64 [
	^ ''.
	

]
