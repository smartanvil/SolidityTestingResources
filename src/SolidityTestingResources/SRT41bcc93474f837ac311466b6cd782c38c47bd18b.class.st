Class {
	#name : #SRT41bcc93474f837ac311466b6cd782c38c47bd18b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT41bcc93474f837ac311466b6cd782c38c47bd18b >> base64 [
	^ ''.
	

]
