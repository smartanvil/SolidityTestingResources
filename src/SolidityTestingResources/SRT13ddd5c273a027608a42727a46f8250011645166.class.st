Class {
	#name : #SRT13ddd5c273a027608a42727a46f8250011645166,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13ddd5c273a027608a42727a46f8250011645166 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CmxpYnJhcnkgVTI1NiB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0gCgpjb250cmFjdCBSb2xlIHsKICAgIGFkZHJlc3MgcHVibGljIGFkZHJBZG1pbiA9IG1zZy5zZW5kZXI7IAogICAgYWRkcmVzcyBwdWJsaWMgYWRkckV4ZWN1dG9yID0gbXNnLnNlbmRlcjsgCiAgCiAgICBtb2RpZmllciBfckEoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJBZG1pbik7CiAgICAgICAgXzsKICAgIH0gCgogICAgbW9kaWZpZXIgX3JDKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyQWRtaW4gfHwgbXNnLnNlbmRlciA9PSBhZGRyRXhlY3V0b3IpOwogICAgICAgIF87CiAgICB9ICAKCiAgICBmdW5jdGlvbiByU2V0QShhZGRyZXNzIF9uZXdBZG1pbikgcHVibGljIF9yQSB7CiAgICAgICAgcmVxdWlyZShfbmV3QWRtaW4gIT0gYWRkcmVzcygwKSk7ICAKICAgICAgICBhZGRyQWRtaW4gPSBfbmV3QWRtaW47IAogICAgfQoKICAgIGZ1bmN0aW9uIHJTZXRFKGFkZHJlc3MgX25ld0V4ZWN1dG9yKSBwdWJsaWMgX3JBIHsKICAgICAgICByZXF1aXJlKF9uZXdFeGVjdXRvciAhPSBhZGRyZXNzKDApKTsgIAogICAgICAgIGFkZHJFeGVjdXRvciA9IF9uZXdFeGVjdXRvcjsgCiAgICB9ICAgCgogICAgZnVuY3Rpb24gbXlSb2xlKCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDggX215Um9sZSkgewogICAgICAgIF9teVJvbGUgPSAwOwogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGFkZHJBZG1pbikgewogICAgICAgICAgICBfbXlSb2xlID0gMTsKICAgICAgICB9IGVsc2UgaWYgKG1zZy5zZW5kZXIgPT0gYWRkckV4ZWN1dG9yKSB7CiAgICAgICAgICAgIF9teVJvbGUgPSAyOwogICAgICAgIH0KICAgIH0gCn0gCgpjb250cmFjdCBGdW5kIGlzIFJvbGUgeyAKICAgIHVpbnQgZnVuZHM7IAoKICAgIGZ1bmN0aW9uIGZ1bmRDaGVja2luZygpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGZ1bmRzOwogICAgfSAKICAKICAgIGZ1bmN0aW9uIGZ1bmRXaXRoZHJhdyhhZGRyZXNzIGFkZHIsIHVpbnQgdmFsdWUpIHBheWFibGUgcHVibGljIF9yQSB7CiAgICAgICAgcmVxdWlyZSh2YWx1ZSA8PSBmdW5kcyk7CiAgICAgICAgYWRkci50cmFuc2Zlcih2YWx1ZSk7IAogICAgICAgIGZ1bmRzIC09IHZhbHVlOwogICAgfSAgICAKCiAgICBmdW5jdGlvbiBmdW5kTWFyayh1aW50IHZhbHVlKSBpbnRlcm5hbCB7IAogICAgICAgIGZ1bmRzICs9IHZhbHVlOwogICAgfSAgICAKfQoKY29udHJhY3QgQ3J5cHRveSBpcyBGdW5kIHsKICAgIGJvb2wgcHVibGljIGlzQWxpdmUgPSB0cnVlOwogICAgYm9vbCBwdWJsaWMgaXNSdW5uaW5nID0gZmFsc2U7CgogICAgbW9kaWZpZXIgZ1J1bm5pbmcoYm9vbCBxdWVyeSkgewogICAgICAgIHJlcXVpcmUocXVlcnkgPT0gaXNSdW5uaW5nKTsKICAgICAgICBfOwogICAgfSAKCiAgICBtb2RpZmllciBnQWxpdmUoYm9vbCBxdWVyeSkgewogICAgICAgIHJlcXVpcmUocXVlcnkgPT0gaXNBbGl2ZSk7CiAgICAgICAgXzsKICAgIH0gIAoKICAgIGZ1bmN0aW9uIGdTZXRSdW5uaW5nKGJvb2wgc3RhdGUpIHB1YmxpYyBfckMgZ1J1bm5pbmcoIXN0YXRlKSB7CiAgICAgICAgaXNSdW5uaW5nID0gc3RhdGU7IAogICAgfQoKICAgIGZ1bmN0aW9uIGdTZXRBbGl2ZShib29sIHN0YXRlKSBwdWJsaWMgX3JDIGdBbGl2ZSghc3RhdGUpIHsgCiAgICAgICAgaXNBbGl2ZSA9IHN0YXRlOyAKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRTeXN0ZW1BdmFsaWFibGVTdGF0ZSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQ4KSB7CiAgICAgICAgaWYgKCFpc0FsaXZlKSB7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgICBpZiAoIWlzUnVubmluZykgewogICAgICAgICAgICByZXR1cm4gMjsKICAgICAgICB9IAogICAgICAgIHJldHVybiAwOyAKICAgIH0gCn0KCmludGVyZmFjZSBJTmV3UHJpY2UgeyAKICAgIGZ1bmN0aW9uIGdldE5ld1ByaWNlKHVpbnQgaW5pdGlhbCwgdWludCBvcmlnaW4pIHZpZXcgcHVibGljIHJldHVybnModWludCk7CiAgICBmdW5jdGlvbiBpc05ld1ByaWNlKCkgdmlldyBwdWJsaWMgcmV0dXJucyhib29sKTsKfQpjb250cmFjdCBQbGFuZXQgaXMgQ3J5cHRveSB7CiAgICB1c2luZyBVMjU2IGZvciB1aW50MjU2OyAKCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wLjAiOyAKICAgIHVpbnQxNiBwdWJsaWMgYWRtaW5fcHJvcG9ydGlvbiA9IDIwMDsgLy8g5Y2D5YiG5L2NCgogICAgSU5ld1ByaWNlIHB1YmxpYyBwcmljZUNvdW50ZXI7CgogICAgZXZlbnQgT25CdXkodWludCByZWZ1bmQpOwoKICAgIHN0cnVjdCBJdGVtIHsgCiAgICAgICAgYWRkcmVzcyBvd25lcjsKICAgICAgICB1aW50OCAgIHJvdW5kOwogICAgICAgIHVpbnQgICAgcHJpY2VTZWxsOwogICAgICAgIHVpbnQgICAgcHJpY2VPcmc7CiAgICAgICAgYnl0ZXMgICBzbG9nYW47CiAgICB9CiAgICBJdGVtW10gcHVibGljIGl0ZW1zOyAKICAgIAogICAgZnVuY3Rpb24gaXRlbUNvdW50KCkgdmlldyBwdWJsaWMgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aDsKICAgIH0KCiAgICBmdW5jdGlvbiBhU2V0UHJvcG9ydGlvbih1aW50MTYgcHJvcCkgX3JDIHB1YmxpYyByZXR1cm5zKHVpbnQpIHsKICAgICAgICBhZG1pbl9wcm9wb3J0aW9uID0gcHJvcDsKICAgICAgICByZXR1cm4gYWRtaW5fcHJvcG9ydGlvbjsKICAgIH0gCgogICAgZnVuY3Rpb24gc2V0TmV3UHJpY2VGdW5jQWRkcmVzcyhhZGRyZXNzIGFkZHJGdW5jKSBwdWJsaWMgX3JDIHsKICAgICAgICBJTmV3UHJpY2UgY291bnRlciA9IElOZXdQcmljZShhZGRyRnVuYyk7IAogICAgICAgIHJlcXVpcmUoY291bnRlci5pc05ld1ByaWNlKCkpOyAKICAgICAgICBwcmljZUNvdW50ZXIgPSBjb3VudGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIG5ld1ByaWNlKHVpbnQgcHJpY2VPcmcsIHVpbnQgcHJpY2VTZWxsKSB2aWV3IHB1YmxpYyByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gcHJpY2VDb3VudGVyLmdldE5ld1ByaWNlKHByaWNlT3JnLCBwcmljZVNlbGwpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlYWxidXkoSXRlbSBzdG9yYWdlIGl0ZW0pIGludGVybmFsIHJldHVybnModWludCBmaW5hbFJlZnVuZCkgewogICAgICAgIHVpbnQgdG90YWwgPSBpdGVtLnByaWNlU2VsbDsgCiAgICAgICAgdWludCBmZWUgPSB0b3RhbC5zdWIoaXRlbS5wcmljZU9yZykubXVsKGFkbWluX3Byb3BvcnRpb24pLmRpdigxMDAwKTsKICAgICAgICAKICAgICAgICBmdW5kTWFyayhmZWUpOwogICAgICAgIGZpbmFsUmVmdW5kID0gdG90YWwuc3ViKGZlZSk7IAoKICAgICAgICBpdGVtLm93bmVyLnRyYW5zZmVyKGZpbmFsUmVmdW5kKTsgCiAgICAgICAgaXRlbS5vd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgaXRlbS5wcmljZU9yZyA9IGl0ZW0ucHJpY2VTZWxsOwogICAgICAgIGl0ZW0ucHJpY2VTZWxsID0gbmV3UHJpY2UoaXRlbS5wcmljZU9yZywgaXRlbS5wcmljZVNlbGwpOwogICAgICAgIGl0ZW0ucm91bmQgPSBpdGVtLnJvdW5kICsgMTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVJdGVtKHVpbnQgYW1vdW50LCB1aW50IHByaWNlV2VpKSBfckMgZ0FsaXZlKHRydWUpIHB1YmxpYyB7ICAgIAogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFtb3VudDsgaSArKykgewogICAgICAgICAgICBpdGVtcy5wdXNoKEl0ZW0oewogICAgICAgICAgICAgICAgb3duZXI6IG1zZy5zZW5kZXIsIAogICAgICAgICAgICAgICAgcm91bmQ6IDAsCiAgICAgICAgICAgICAgICBwcmljZU9yZzogMCwgCiAgICAgICAgICAgICAgICBwcmljZVNlbGw6IHByaWNlV2VpLAogICAgICAgICAgICAgICAgc2xvZ2FuOiAiIgogICAgICAgICAgICB9KSk7CiAgICAgICAgfSAKICAgIH0KCiAgICBmdW5jdGlvbiBidXkodWludCBpdGVtSUQpIHBheWFibGUgZ0FsaXZlKHRydWUpIGdSdW5uaW5nKHRydWUpIHB1YmxpYyB7CiAgICAgICAgYWRkcmVzcyBhZGRyQnV5ZXIgPSBtc2cuc2VuZGVyOyAgCiAgICAgICAgcmVxdWlyZShpdGVtSUQgPCBpdGVtcy5sZW5ndGgpOyAKICAgICAgICBJdGVtIHN0b3JhZ2UgaXRlbSA9IGl0ZW1zW2l0ZW1JRF07CiAgICAgICAgcmVxdWlyZShpdGVtLm93bmVyICE9IGFkZHJCdXllcik7CiAgICAgICAgcmVxdWlyZShpdGVtLnByaWNlU2VsbCA9PSBtc2cudmFsdWUpOwogICAgICAgIE9uQnV5KHJlYWxidXkoaXRlbSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNsb2dhbih1aW50IGl0ZW1JRCwgYnl0ZXMgc2xvZ2FuKSBnQWxpdmUodHJ1ZSkgZ1J1bm5pbmcodHJ1ZSkgcHVibGljIHsKICAgICAgICBhZGRyZXNzIGFkZHJCdXllciA9IG1zZy5zZW5kZXI7IAogICAgICAgIHJlcXVpcmUoaXRlbUlEIDwgaXRlbXMubGVuZ3RoKTsgCiAgICAgICAgSXRlbSBzdG9yYWdlIGl0ZW0gPSBpdGVtc1tpdGVtSURdOwogICAgICAgIHJlcXVpcmUoYWRkckFkbWluID09IGFkZHJCdXllciB8fCBhZGRyRXhlY3V0b3IgPT0gYWRkckJ1eWVyIHx8IGl0ZW0ub3duZXIgPT0gYWRkckJ1eWVyKTsKICAgICAgICBpdGVtLnNsb2dhbiA9IHNsb2dhbjsKICAgIH0KfQ=='.
	

]
