Class {
	#name : #SRTb7241656AC4f4D26dd17520dfA36Fc95417C0f8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7241656AC4f4D26dd17520dfA36Fc95417C0f8d >> base64 [
	^ ''.
	

]
