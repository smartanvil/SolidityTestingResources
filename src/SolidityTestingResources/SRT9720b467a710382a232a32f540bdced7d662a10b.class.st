Class {
	#name : #SRT9720b467a710382a232a32f540bdced7d662a10b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9720b467a710382a232a32f540bdced7d662a10b >> base64 [
	^ ''.
	

]
