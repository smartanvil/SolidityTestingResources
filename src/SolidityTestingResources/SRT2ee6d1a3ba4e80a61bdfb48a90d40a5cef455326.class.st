Class {
	#name : #SRT2ee6d1a3ba4e80a61bdfb48a90d40a5cef455326,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ee6d1a3ba4e80a61bdfb48a90d40a5cef455326 >> base64 [
	^ ''.
	

]
