Class {
	#name : #SRT5739Ac6d3bEa041aC9a71bB50EadDC3C1d882AFB,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5739Ac6d3bEa041aC9a71bB50EadDC3C1d882AFB >> base64 [
	^ ''.
	

]
