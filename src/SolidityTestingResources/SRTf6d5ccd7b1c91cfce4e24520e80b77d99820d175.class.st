Class {
	#name : #SRTf6d5ccd7b1c91cfce4e24520e80b77d99820d175,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf6d5ccd7b1c91cfce4e24520e80b77d99820d175 >> base64 [
	^ ''.
	

]
