Class {
	#name : #SRT08CF2917773aE20d9A1c66bB552df7475840BAa0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT08CF2917773aE20d9A1c66bB552df7475840BAa0 >> base64 [
	^ ''.
	

]
