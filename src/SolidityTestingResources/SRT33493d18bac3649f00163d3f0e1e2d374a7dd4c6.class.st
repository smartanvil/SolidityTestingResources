Class {
	#name : #SRT33493d18bac3649f00163d3f0e1e2d374a7dd4c6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33493d18bac3649f00163d3f0e1e2d374a7dd4c6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CiAKY29udHJhY3QgTXVsdGlib3QgaXMgRVJDMjBJbnRlcmZhY2UgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiTUJUIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJNdWx0aWJvdCI7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA4OwogICAgdWludDI1NiBpbml0aWFsU3VwcGx5ID0gMjUwMDAwMDAwMDAwMDAwMDsKICAgIAogICAgdWludDI1NiBwdWJsaWMgc2hhcmVob2xkZXJzQmFsYW5jZTsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU2hhcmVob2xkZXJzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSByZWdpc3RlcmVkU2hhcmVob2xkZXJzOwogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgc2hhcmVob2xkZXJzOwogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dlZDsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBpc1Rva2VuKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgd2VBcmUpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID49IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQogCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIAogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gTXVsdGlib3QoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IGluaXRpYWxTdXBwbHk7CiAgICAgICAgdG90YWxTdXBwbHk9aW5pdGlhbFN1cHBseTsKICAgICAgICB0b3RhbFNoYXJlaG9sZGVycyA9IDA7CgkJc2hhcmVob2xkZXJzQmFsYW5jZSA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIAogICAgLy8vIEBub3RpY2UgU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSB5b3VyIGFjY291bnQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgdG8gc2VuZAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZihfdG8gIT0gMHgwICYmIF92YWx1ZSA+IDAgJiYgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKQogICAgICAgIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyICYmIF90byAhPSBvd25lcikgewogICAgICAgICAgICAgICAgc2hhcmVob2xkZXJzQmFsYW5jZSArPSBfdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgX3RvID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBzaGFyZWhvbGRlcnNCYWxhbmNlIC09IF92YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob3duZXIgIT0gX3RvKSB7CiAgICAgICAgICAgICAgICBpbnNlcnRTaGFyZWhvbGRlcihfdG8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBpbiBiZWhhbGYgb2YgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IHRvIHNlbmQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoX2Zyb20gPT0gb3duZXIgJiYgX3RvICE9IG93bmVyKSB7CiAgICAgICAgICAgICAgICBzaGFyZWhvbGRlcnNCYWxhbmNlICs9IF92YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoX2Zyb20gIT0gb3duZXIgJiYgX3RvID09IG93bmVyKSB7CiAgICAgICAgICAgICAgICBzaGFyZWhvbGRlcnNCYWxhbmNlIC09IF92YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob3duZXIgIT0gX3RvKSB7CiAgICAgICAgICAgICAgICBpbnNlcnRTaGFyZWhvbGRlcihfdG8pOyAKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBBbGxvd3MgYF9zcGVuZGVyYCB0byBzcGVuZCBubyBtb3JlIHRoYW4gYF92YWx1ZWAgdG9rZW5zIGluIHlvdXIgYmVoYWxmCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIGF1dGhvcml6ZWQgdG8gc3BlbmQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIHRoZSBtYXggYW1vdW50IHRoZXkgY2FuIHNwZW5kCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIAogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlbW92ZSBgX3ZhbHVlYCB0b2tlbnMgZnJvbSB0aGUgc3lzdGVtIGlycmV2ZXJzaWJseQogICAgLy8vIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCBvZiBtb25leSB0byBidXJuCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPiBfdmFsdWUpOyAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlcyB0b3RhbFN1cHBseQogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaW5zZXJ0U2hhcmVob2xkZXIoYWRkcmVzcyBfc2hhcmVob2xkZXIpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAocmVnaXN0ZXJlZFNoYXJlaG9sZGVyc1tfc2hhcmVob2xkZXJdID09IHRydWUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRvdGFsU2hhcmVob2xkZXJzICs9IDE7CiAgICAgICAgICAgIHNoYXJlaG9sZGVyc1t0b3RhbFNoYXJlaG9sZGVyc10gPSBfc2hhcmVob2xkZXI7CiAgICAgICAgICAgIHJlZ2lzdGVyZWRTaGFyZWhvbGRlcnNbX3NoYXJlaG9sZGVyXSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNoYXJlaG9sZGVyc0JhbGFuY2UoKSBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBzaGFyZWhvbGRlcnNCYWxhbmNlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0b3RhbFNoYXJlaG9sZGVycygpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU2hhcmVob2xkZXJzOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRTaGFyZWhvbGRlcih1aW50MjU2IF9pbmRleCkgcHVibGljIHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gc2hhcmVob2xkZXJzW19pbmRleF07CiAgICB9Cn0='.
	

]
