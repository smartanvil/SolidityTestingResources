Class {
	#name : #SRTc5aaeeac76eb1d44f9e0d1a899db8fd5e7079069,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc5aaeeac76eb1d44f9e0d1a899db8fd5e7079069 >> base64 [
	^ ''.
	

]
