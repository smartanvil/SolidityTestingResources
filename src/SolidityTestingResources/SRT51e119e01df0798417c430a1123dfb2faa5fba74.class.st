Class {
	#name : #SRT51e119e01df0798417c430a1123dfb2faa5fba74,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51e119e01df0798417c430a1123dfb2faa5fba74 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovLyBTYWZlTWF0aCBpcyBhIHBhcnQgb2YgWmVwcGVsaW4gU29saWRpdHkgbGlicmFyeQovLyBsaWNlbnNlZCB1bmRlciBNSVQgTGljZW5zZQovLyBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmVkIHsKICAgIGFkZHJlc3Mgb3duZXI7CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIE93bmVkKCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9Cn0KCgpjb250cmFjdCBFVENyb3NzUG90YXRvUHJlc2FsZSBpcyBPd25lZCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICB1aW50MjU2IHB1YmxpYyBhdWN0aW9uRW5kOwogICAgdWludDI1NiBwdWJsaWMgaXRlbVR5cGU7CgogICAgYWRkcmVzcyBwdWJsaWMgaGlnaGVzdEJpZGRlcjsKICAgIHVpbnQyNTYgcHVibGljIGhpZ2hlc3RCaWQgPSAwLjAwMSBldGhlcjsKICAgIGJvb2wgcHVibGljIGVuZGVkOwoKICAgIGV2ZW50IEJpZChhZGRyZXNzIGZyb20sIHVpbnQyNTYgYW1vdW50KTsKICAgIGV2ZW50IEF1Y3Rpb25FbmRlZChhZGRyZXNzIHdpbm5lciwgdWludDI1NiBhbW91bnQpOwoKICAgIEVUQ3Jvc3NQb3RhdG9QcmVzYWxlIHB1YmxpYyBzaWJsaW5nOwogICAgYWRkcmVzcyBwdWJsaWMgcG90YXRvT3duZXIgPSAweGYzYTI3MjdhMzQ0NzY1M2E1OEQ1N2U0YmU2M2Q1RDVjZGM1NTQyMUI7CgogICAgZnVuY3Rpb24gRVRDcm9zc1BvdGF0b1ByZXNhbGUodWludDI1NiBfYXVjdGlvbkVuZCwgdWludDI1NiBfaXRlbVR5cGUpIHB1YmxpYyB7CiAgICAgICAgYXVjdGlvbkVuZCA9IF9hdWN0aW9uRW5kOwogICAgICAgIGl0ZW1UeXBlID0gX2l0ZW1UeXBlOwogICAgfQoKICAgIGZ1bmN0aW9uIF9pc0NvbnRyYWN0KGFkZHJlc3MgX3VzZXIpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHVpbnQgc2l6ZTsKICAgICAgICBhc3NlbWJseSB7IHNpemUgOj0gZXh0Y29kZXNpemUoX3VzZXIpIH0KICAgICAgICByZXR1cm4gc2l6ZSA+IDA7CiAgICB9CgogICAgZnVuY3Rpb24gYXVjdGlvbkV4cGlyZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG5vdyA+IGF1Y3Rpb25FbmQ7CiAgICB9CgogICAgZnVuY3Rpb24gbmV4dEJpZCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoaGlnaGVzdEJpZCA8IDAuMSBldGhlcikgewogICAgICAgICAgICByZXR1cm4gaGlnaGVzdEJpZC5hZGQoaGlnaGVzdEJpZCAvIDIpOwogICAgICAgIH0gZWxzZSBpZiAoaGlnaGVzdEJpZCA8IDEgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuIGhpZ2hlc3RCaWQuYWRkKGhpZ2hlc3RCaWQubXVsKDE1KS5kaXYoMTAwKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGhpZ2hlc3RCaWQuYWRkKGhpZ2hlc3RCaWQubXVsKDQpLmRpdigxMDApKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZSghX2lzQ29udHJhY3QobXNnLnNlbmRlcikpOwogICAgICAgIHJlcXVpcmUoIWF1Y3Rpb25FeHBpcmVkKCkpOwoKICAgICAgICB1aW50MjU2IHJlcXVpcmVkQmlkID0gbmV4dEJpZCgpOwoKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSByZXF1aXJlZEJpZCk7CgogICAgICAgIHVpbnQyNTYgY2hhbmdlID0gbXNnLnZhbHVlLnN1YihyZXF1aXJlZEJpZCk7CgogICAgICAgIHVpbnQyNTYgZGlmZmVyZW5jZSA9IHJlcXVpcmVkQmlkLnN1YihoaWdoZXN0QmlkKTsKICAgICAgICB1aW50MjU2IHJld2FyZCA9IGRpZmZlcmVuY2UgLyA0OwoKICAgICAgICBpZiAoaGlnaGVzdEJpZGRlciAhPSAweDApIHsKICAgICAgICAgICAgaGlnaGVzdEJpZGRlci50cmFuc2ZlcihoaWdoZXN0QmlkLmFkZChyZXdhcmQpKTsKICAgICAgICB9CgogICAgICAgIGlmIChhZGRyZXNzKHNpYmxpbmcpICE9IDB4MCkgewogICAgICAgICAgICBhZGRyZXNzIHNpYmxpbmdIaWdoZXN0QmlkZGVyID0gc2libGluZy5oaWdoZXN0QmlkZGVyKCk7CiAgICAgICAgICAgIGlmIChzaWJsaW5nSGlnaGVzdEJpZGRlciAhPSAweDApIHsKICAgICAgICAgICAgICAgIHNpYmxpbmdIaWdoZXN0QmlkZGVyLnRyYW5zZmVyKHJld2FyZCAvIDIpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocG90YXRvT3duZXIgIT0gMHgwKSB7CiAgICAgICAgICAgIHBvdGF0b093bmVyLnRyYW5zZmVyKHJld2FyZCAvIDEwKTsKICAgICAgICB9CgogICAgICAgIGlmIChjaGFuZ2UgPiAwKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2hhbmdlKTsKICAgICAgICB9CgogICAgICAgIGhpZ2hlc3RCaWRkZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGhpZ2hlc3RCaWQgPSByZXF1aXJlZEJpZDsKCiAgICAgICAgZW1pdCBCaWQobXNnLnNlbmRlciwgcmVxdWlyZWRCaWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGVuZEF1Y3Rpb24oKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGF1Y3Rpb25FeHBpcmVkKCkpOwogICAgICAgIHJlcXVpcmUoIWVuZGVkKTsKCiAgICAgICAgZW5kZWQgPSB0cnVlOwogICAgICAgIGVtaXQgQXVjdGlvbkVuZGVkKGhpZ2hlc3RCaWRkZXIsIGhpZ2hlc3RCaWQpOwoKICAgICAgICBvd25lci50cmFuc2ZlcihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNpYmxpbmcoYWRkcmVzcyBfc2libGluZykgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgc2libGluZyA9IEVUQ3Jvc3NQb3RhdG9QcmVzYWxlKF9zaWJsaW5nKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQb3RhdG9Pd25lcihhZGRyZXNzIF9wb3RhdG9Pd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcG90YXRvT3duZXIgPSBfcG90YXRvT3duZXI7CiAgICB9Cn0='.
	

]
