Class {
	#name : #SRT961bb40fd91453da2c9a40987cb85db494b8ec3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT961bb40fd91453da2c9a40987cb85db494b8ec3d >> base64 [
	^ ''.
	

]
