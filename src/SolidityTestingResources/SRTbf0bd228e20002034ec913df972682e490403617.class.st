Class {
	#name : #SRTbf0bd228e20002034ec913df972682e490403617,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbf0bd228e20002034ec913df972682e490403617 >> base64 [
	^ ''.
	

]
