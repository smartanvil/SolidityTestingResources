Class {
	#name : #SRTC99Ddc30BB0cf76B07d90DcB6B267B8352697bEf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC99Ddc30BB0cf76B07d90DcB6B267B8352697bEf >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBURFQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICB1aW50IHB1YmxpYyBzdXBwbHkgPSAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdURFQnOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnVERUJzsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgdWludCBwdWJsaWMgcHJpY2UgPSAxIGZpbm5leTsKICAgIHVpbnQgcHVibGljIGR1cmF0aW9uSW5CbG9ja3MgPSAxNTc1NTM7IC8vIDEgbW9udGgKICAgIHVpbnQgcHVibGljIGFtb3VudFJhaXNlZDsKICAgIHVpbnQgcHVibGljIGRlYWRsaW5lOwogICAgdWludCBwdWJsaWMgdG9rZW5zU29sZDsKICAgIAogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKICAgIAogICAgLyogVGhpcyBnZW5lcmF0ZXMgYSBwdWJsaWMgZXZlbnQgb24gdGhlIGJsb2NrY2hhaW4gdGhhdCB3aWxsIG5vdGlmeSBjbGllbnRzICovCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIAogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7CiAgICAKICAgIGZ1bmN0aW9uIGlzT3duZXIoKSByZXR1cm5zIChib29sIGlzT3duZXIpIHsKICAgICAgICByZXR1cm4gbXNnLnNlbmRlciA9PSBvd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gYWRkcmVzc0lzT3duZXIoYWRkcmVzcyBhZGRyKSAgcmV0dXJucyAoYm9vbCBpc093bmVyKSB7CiAgICAgICAgcmV0dXJuIGFkZHIgPT0gb3duZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgICAKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gVERUKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBzdXBwbHk7CiAgICAgICAgZGVhZGxpbmUgPSBibG9jay5udW1iZXIgKyBkdXJhdGlvbkluQmxvY2tzOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBpc0Nyb3dkc2FsZSgpIHJldHVybnMgKGJvb2wgaXNDcm93ZHNhbGUpIHsKICAgICAgICByZXR1cm4gYmxvY2subnVtYmVyIDwgZGVhZGxpbmU7CiAgICB9CiAgICAKICAgIC8qIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZAogICAgICAgIHJlcXVpcmUoX3RvICE9IDB4MCk7CiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gU2F2ZSB0aGlzIGZvciBhbiBhc3NlcnRpb24gaW4gdGhlIGZ1dHVyZQogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlcyA9IGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXTsKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudAogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIC8vIEFzc2VydHMgYXJlIHVzZWQgdG8gdXNlIHN0YXRpYyBhbmFseXNpcyB0byBmaW5kIGJ1Z3MgaW4geW91ciBjb2RlLiBUaGV5IHNob3VsZCBuZXZlciBmYWlsCiAgICAgICAgYXNzZXJ0KGJhbGFuY2VPZltfZnJvbV0gKyBiYWxhbmNlT2ZbX3RvXSA9PSBwcmV2aW91c0JhbGFuY2VzKTsKICAgIH0KICAgIAogICAgLyogU2VuZCBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgLyogVHJhbnNmZXIgdG9rZW5zIGZyb20gb3RoZXIgYWRkcmVzcyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qIFNldCBhbGxvd2FuY2UgZm9yIG90aGVyIGFkZHJlc3MgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIGlmIChpc093bmVyKCkpIHsKICAgICAgICAgICAgb3duZXIudHJhbnNmZXIoYW1vdW50UmFpc2VkKTsKICAgICAgICAgICAgRnVuZFRyYW5zZmVyKG93bmVyLCBhbW91bnRSYWlzZWQsIGZhbHNlKTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkID0gMDsKICAgICAgICB9IGVsc2UgaWYgKGlzQ3Jvd2RzYWxlKCkpIHsKICAgICAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgICAgIGlmIChhbW91bnQgPT0gMCkgcmV2ZXJ0KCk7CiAgICAgICAgICAgIAogICAgICAgICAgICB1aW50IHRva2Vuc0NvdW50ID0gYW1vdW50ICogMTAwMDAwMDAwMDAwMDAwMDAwMCAvIHByaWNlOwogICAgICAgICAgICBpZiAodG9rZW5zQ291bnQgPCAxMDAwMDAwMDAwMDAwMDAwMDAwKSByZXZlcnQoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSB0b2tlbnNDb3VudDsKICAgICAgICAgICAgc3VwcGx5ICs9IHRva2Vuc0NvdW50OwogICAgICAgICAgICB0b2tlbnNTb2xkICs9IHRva2Vuc0NvdW50OwogICAgICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCB0b2tlbnNDb3VudCk7CiAgICAgICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIHRva2Vuc0NvdW50KTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkICs9IGFtb3VudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
