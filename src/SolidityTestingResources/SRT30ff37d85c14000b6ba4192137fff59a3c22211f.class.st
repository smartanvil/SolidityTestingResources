Class {
	#name : #SRT30ff37d85c14000b6ba4192137fff59a3c22211f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT30ff37d85c14000b6ba4192137fff59a3c22211f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgppbnRlcmZhY2UgRU5TIHsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgb3duZXIgb2YgYSBub2RlIGFzc2lnbnMgYSBuZXcgb3duZXIgdG8gYSBzdWJub2RlLgogICAgZXZlbnQgTmV3T3duZXIoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGJ5dGVzMzIgaW5kZXhlZCBsYWJlbCwgYWRkcmVzcyBvd25lcik7CgogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIG93bmVyIG9mIGEgbm9kZSB0cmFuc2ZlcnMgb3duZXJzaGlwIHRvIGEgbmV3IGFjY291bnQuCiAgICBldmVudCBUcmFuc2ZlcihieXRlczMyIGluZGV4ZWQgbm9kZSwgYWRkcmVzcyBvd25lcik7CgogICAgLy8gTG9nZ2VkIHdoZW4gdGhlIHJlc29sdmVyIGZvciBhIG5vZGUgY2hhbmdlcy4KICAgIGV2ZW50IE5ld1Jlc29sdmVyKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBhZGRyZXNzIHJlc29sdmVyKTsKCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgVFRMIG9mIGEgbm9kZSBjaGFuZ2VzCiAgICBldmVudCBOZXdUVEwoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIHVpbnQ2NCB0dGwpOwoKCiAgICBmdW5jdGlvbiBzZXRTdWJub2RlT3duZXIoYnl0ZXMzMiBub2RlLCBieXRlczMyIGxhYmVsLCBhZGRyZXNzIG93bmVyKSBleHRlcm5hbCByZXR1cm5zIChieXRlczMyKTsKICAgIGZ1bmN0aW9uIHNldFJlc29sdmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyByZXNvbHZlcikgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBzZXRPd25lcihieXRlczMyIG5vZGUsIGFkZHJlc3Mgb3duZXIpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gc2V0VFRMKGJ5dGVzMzIgbm9kZSwgdWludDY0IHR0bCkgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiBvd25lcihieXRlczMyIG5vZGUpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiByZXNvbHZlcihieXRlczMyIG5vZGUpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcyk7CiAgICBmdW5jdGlvbiB0dGwoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQ2NCk7Cn0KCgovKioKICogVGhlIEVOUyByZWdpc3RyeSBjb250cmFjdC4KICovCmNvbnRyYWN0IFN2RW5zUmVnaXN0cnkgaXMgRU5TIHsKICAgIHN0cnVjdCBSZWNvcmQgewogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgYWRkcmVzcyByZXNvbHZlcjsKICAgICAgICB1aW50NjQgdHRsOwogICAgfQoKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gUmVjb3JkKSByZWNvcmRzOwoKICAgIC8vIFBlcm1pdHMgbW9kaWZpY2F0aW9ucyBvbmx5IGJ5IHRoZSBvd25lciBvZiB0aGUgc3BlY2lmaWVkIG5vZGUuCiAgICBtb2RpZmllciBvbmx5X293bmVyKGJ5dGVzMzIgbm9kZSkgewogICAgICAgIHJlcXVpcmUocmVjb3Jkc1tub2RlXS5vd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBDb25zdHJ1Y3RzIGEgbmV3IEVOUyByZWdpc3RyYXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIFN2RW5zUmVnaXN0cnkoKSBwdWJsaWMgewogICAgICAgIHJlY29yZHNbMHgwXS5vd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFRyYW5zZmVycyBvd25lcnNoaXAgb2YgYSBub2RlIHRvIGEgbmV3IGFkZHJlc3MuIE1heSBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lciBvZiB0aGUgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHRyYW5zZmVyIG93bmVyc2hpcCBvZi4KICAgICAqIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRPd25lcihieXRlczMyIG5vZGUsIGFkZHJlc3Mgb3duZXIpIGV4dGVybmFsIG9ubHlfb3duZXIobm9kZSkgewogICAgICAgIGVtaXQgVHJhbnNmZXIobm9kZSwgb3duZXIpOwogICAgICAgIHJlY29yZHNbbm9kZV0ub3duZXIgPSBvd25lcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXJzIG93bmVyc2hpcCBvZiBhIHN1Ym5vZGUga2VjY2FrMjU2KG5vZGUsIGxhYmVsKSB0byBhIG5ldyBhZGRyZXNzLiBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoZSBwYXJlbnQgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBwYXJlbnQgbm9kZS4KICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgaGFzaCBvZiB0aGUgbGFiZWwgc3BlY2lmeWluZyB0aGUgc3Vibm9kZS4KICAgICAqIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRTdWJub2RlT3duZXIoYnl0ZXMzMiBub2RlLCBieXRlczMyIGxhYmVsLCBhZGRyZXNzIG93bmVyKSBleHRlcm5hbCBvbmx5X293bmVyKG5vZGUpIHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICBieXRlczMyIHN1Ym5vZGUgPSBrZWNjYWsyNTYobm9kZSwgbGFiZWwpOwogICAgICAgIGVtaXQgTmV3T3duZXIobm9kZSwgbGFiZWwsIG93bmVyKTsKICAgICAgICByZWNvcmRzW3N1Ym5vZGVdLm93bmVyID0gb3duZXI7CiAgICAgICAgcmV0dXJuIHN1Ym5vZGU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IFNldHMgdGhlIHJlc29sdmVyIGFkZHJlc3MgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSByZXNvbHZlciBUaGUgYWRkcmVzcyBvZiB0aGUgcmVzb2x2ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFJlc29sdmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyByZXNvbHZlcikgZXh0ZXJuYWwgb25seV9vd25lcihub2RlKSB7CiAgICAgICAgZW1pdCBOZXdSZXNvbHZlcihub2RlLCByZXNvbHZlcik7CiAgICAgICAgcmVjb3Jkc1tub2RlXS5yZXNvbHZlciA9IHJlc29sdmVyOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBTZXRzIHRoZSBUVEwgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZS4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4KICAgICAqIEBwYXJhbSB0dGwgVGhlIFRUTCBpbiBzZWNvbmRzLgogICAgICovCiAgICBmdW5jdGlvbiBzZXRUVEwoYnl0ZXMzMiBub2RlLCB1aW50NjQgdHRsKSBleHRlcm5hbCBvbmx5X293bmVyKG5vZGUpIHsKICAgICAgICBlbWl0IE5ld1RUTChub2RlLCB0dGwpOwogICAgICAgIHJlY29yZHNbbm9kZV0udHRsID0gdHRsOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGUgc3BlY2lmaWVkIG5vZGUuCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgc3BlY2lmaWVkIG5vZGUuCiAgICAgKiBAcmV0dXJuIGFkZHJlc3Mgb2YgdGhlIG93bmVyLgogICAgICovCiAgICBmdW5jdGlvbiBvd25lcihieXRlczMyIG5vZGUpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiByZWNvcmRzW25vZGVdLm93bmVyOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSByZXNvbHZlciBmb3IgdGhlIHNwZWNpZmllZCBub2RlLgogICAgICogQHBhcmFtIG5vZGUgVGhlIHNwZWNpZmllZCBub2RlLgogICAgICogQHJldHVybiBhZGRyZXNzIG9mIHRoZSByZXNvbHZlci4KICAgICAqLwogICAgZnVuY3Rpb24gcmVzb2x2ZXIoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gcmVjb3Jkc1tub2RlXS5yZXNvbHZlcjsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgVFRMIG9mIGEgbm9kZSwgYW5kIGFueSByZWNvcmRzIGFzc29jaWF0ZWQgd2l0aCBpdC4KICAgICAqIEBwYXJhbSBub2RlIFRoZSBzcGVjaWZpZWQgbm9kZS4KICAgICAqIEByZXR1cm4gdHRsIG9mIHRoZSBub2RlLgogICAgICovCiAgICBmdW5jdGlvbiB0dGwoYnl0ZXMzMiBub2RlKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIHJldHVybiByZWNvcmRzW25vZGVdLnR0bDsKICAgIH0KCn0='.
	

]
