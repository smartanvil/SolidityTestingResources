Class {
	#name : #SRT9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9 >> base64 [
	^ ''.
	

]
