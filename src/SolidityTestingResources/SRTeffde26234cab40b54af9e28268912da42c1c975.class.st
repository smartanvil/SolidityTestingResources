Class {
	#name : #SRTeffde26234cab40b54af9e28268912da42c1c975,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeffde26234cab40b54af9e28268912da42c1c975 >> base64 [
	^ ''.
	

]
