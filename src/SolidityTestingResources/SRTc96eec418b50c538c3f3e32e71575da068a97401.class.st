Class {
	#name : #SRTc96eec418b50c538c3f3e32e71575da068a97401,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc96eec418b50c538c3f3e32e71575da068a97401 >> base64 [
	^ ''.
	

]
