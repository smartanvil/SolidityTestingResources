Class {
	#name : #SRTbbE534ade64BA84449AF1AE1Bae2275CaAA1D499,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbbE534ade64BA84449AF1AE1Bae2275CaAA1D499 >> base64 [
	^ ''.
	

]
