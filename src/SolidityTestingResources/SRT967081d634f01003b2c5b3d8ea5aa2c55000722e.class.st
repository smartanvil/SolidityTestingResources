Class {
	#name : #SRT967081d634f01003b2c5b3d8ea5aa2c55000722e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT967081d634f01003b2c5b3d8ea5aa2c55000722e >> base64 [
	^ ''.
	

]
