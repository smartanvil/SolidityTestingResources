Class {
	#name : #SRT9480be792e3e980783a090a437e81ab4e3eb3826,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9480be792e3e980783a090a437e81ab4e3eb3826 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovKioKICogUHJlSUNPIGlzIGRlc2lnbmVkIHRvIGhvbGQgZnVuZHMgb2YgcHJlIGljby4gQWNjb3VudCBpcyBjb250cm9sbGVkIGJ5IGZvdXIgYWRtaW5pc3RyYXRvcy4gVG8gdHJpZ2dlciBhIHBheW91dAogKiB0aHJlZSBvdXQgb2YgZm91ciBhZG1pbmlzdHJhdG9ycyB3aWxsIG11c3QgYWdyZWUgb24gc2FtZSBhbW91bnQgb2YgZXRoZXJzIHRvIGJlIHRyYW5zZmVycmVkLiBEdXJpbmcgdGhlIHNpZ25pbmcKICogcHJvY2VzcyBpZiBvbmUgYWRtaW5pc3RyYXRvciBzZW5kcyBkaWZmZXJlbnQgdGFyZ2V0dGVkIGFkZHJlc3Mgb3IgYW1vdW50IG9mIGV0aGVycywgcHJvY2VzcyB3aWxsIGFib3J0IGFuZCB0aGV5CiAqIG5lZWQgdG8gc3RhcnQgYWdhaW4uCiAqIEFkbWluaXN0cmF0b3IgY2FuIGJlIHJlcGxhY2VkIGJ1dCB0aHJlZSBvdXQgb2YgZm91ciBtdXN0IGFncmVlIHVwb24gcmVwbGFjZW1lbnQgb2YgZm91cnRoIGFkbWluaXN0cmF0b3IuIFRocmVlCiAqIGFkbWlucyB3aWxsIHNlbmQgYWRkcmVzcyBvZiBmb3VydGggYWRtaW5pc3RyYXRvciBhbG9uZyB3aXRoIGFkZHJlc3Mgb2YgbmV3IG9uZSBhZG1pbmlzdHJhdG9yLiBJZiBhIHNpbmdsZSBvbmUKICogc2VuZHMgZGlmZmVyZW50IGFkZHJlc3MgdGhlIHVwZGF0aW5nIHByb2Nlc3Mgd2lsbCBhYm9ydCBhbmQgdGhleSBuZWVkIHRvIHN0YXJ0IGFnYWluLiAKICovCgpjb250cmFjdCBQcmVJQ097CiAgCiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgCiAgLy8gTWFpbnRhaW4gc3RhdGUgZnVuZHMgdHJhbnNmZXIgc2lnbmluZyBwcm9jZXNzCiAgc3RydWN0IFRyYW5zYWN0aW9uewogICAgYWRkcmVzc1szXSBzaWduZXI7CiAgICB1aW50IGNvbmZpcm1hdGlvbnM7CiAgICB1aW50MjU2IGV0aDsKICB9CiAgCiAgLy8gY291bnQgYW5kIHJlY29yZCBzaWduZXJzIHdpdGggZXRoZXJzIHRoZXkgYWdyZWUgdG8gdHJhbnNmZXIKICBUcmFuc2FjdGlvbiBwcml2YXRlICBwZW5kaW5nOwogICAgCiAgLy8gdGhlIG51bWJlciBvZiBhZG1pbmlzdHJhdG9yIHRoYXQgbXVzdCBjb25maXJtIHRoZSBzYW1lIG9wZXJhdGlvbiBiZWZvcmUgaXQgaXMgcnVuLgogIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIHJlcXVpcmVkID0gMzsKCiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgYWRtaW5pc3RyYXRvcnM7CiAKICAvLyBGdW5kcyBoYXMgYXJyaXZlZCBpbnRvIHRoZSBjb250cmFjdCAocmVjb3JkIGhvdyBtdWNoKS4KICBldmVudCBEZXBvc2l0KGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgdmFsdWUpOwogIAogIC8vIEZ1bmRzIHRyYW5zZmVyIHRvIG90aGVyIGNvbnRyYWN0CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyaXN0U2lnbmVyLCBhZGRyZXNzIGluZGV4ZWQgc2Vjb25kU2lnbmVyLCBhZGRyZXNzIGluZGV4ZWQgdGhpcmRTaWduZXIsIGFkZHJlc3MgdG8sdWludDI1NiBldGgsYm9vbCBzdWNjZXNzKTsKICAKICAvLyBBZG1pbmlzdHJhdG9yIHN1Y2Nlc3NmdWxseSBzaWducyBhIGZ1bmQgdHJhbnNmZXIKICBldmVudCBUcmFuc2ZlckNvbmZpcm1lZChhZGRyZXNzIHNpZ25lcix1aW50MjU2IGFtb3VudCx1aW50MjU2IHJlbWFpbmluZ0NvbmZpcm1hdGlvbnMpOwogIAogIC8vIEFkbWluaXN0cmF0b3Igc3VjY2Vzc2Z1bGx5IHNpZ25zIGEga2V5IHVwZGF0ZSB0cmFuc2FjdGlvbgogIGV2ZW50IFVwZGF0ZUNvbmZpcm1lZChhZGRyZXNzIGluZGV4ZWQgc2lnbmVyLGFkZHJlc3MgaW5kZXhlZCBuZXdBZGRyZXNzLHVpbnQyNTYgcmVtYWluaW5nQ29uZmlybWF0aW9ucyk7CiAgCiAgCiAgLy8gQWRtaW5pc3RyYXRvciB2aW9sYXRlZCBjb25zZW5zdXMKICBldmVudCBWaW9sYXRlZChzdHJpbmcgYWN0aW9uLCBhZGRyZXNzIHNlbmRlcik7IAogIAogIC8vIEFkbWluaXN0cmF0b3Iga2V5IHVwZGF0ZWQgKGFkbWluaXN0cmF0b3IgcmVwbGFjZWQpCiAgZXZlbnQgS2V5UmVwbGFjZWQoYWRkcmVzcyBvbGRLZXksYWRkcmVzcyBuZXdLZXkpOwoKICBldmVudCBFdmVudFRyYW5zZmVyV2FzUmVzZXQoKTsKICBldmVudCBFdmVudFVwZGF0ZVdhc1Jlc2V0KCk7CiAgCiAgCiAgZnVuY3Rpb24gUHJlSUNPKCl7CgogICAgYWRtaW5pc3RyYXRvcnNbMHhmRDk1ZDEyRDg2ZUE1MzhhOTJlRTU3RDBmOTc5NjQwRDJjMDZiREQ1XSA9IHRydWU7CiAgICBhZG1pbmlzdHJhdG9yc1sweDhFMGM1QTFiNTVkNEU3MUI3ODkxMDEwRUY1MDRiMTFmMTlGNGM0NjZdID0gdHJ1ZTsKICAgIGFkbWluaXN0cmF0b3JzWzB4ZTA1MzMxNTc4NTA1OGZCOGVGRUY1RTg5OWVCMTFEMkRlMTdEMDc1N10gPSB0cnVlOwogICAgYWRtaW5pc3RyYXRvcnNbMHg3RUE2OTI1MTdiOTRiNGMwZTc2RGM3MzVmMzgwNzYxZWNkMTE3MzUxXSA9IHRydWU7CgogIH0KICAKICAvKioKICAgKiBAZGV2ICBUbyB0cmlnZ2VyIHBheW91dCB0aHJlZSBvdXQgb2YgZm91ciBhZG1pbmlzdHJhdG9ycyBjYWxsIHRoaXMKICAgKiBmdW5jdGlvbiwgZnVuZHMgd2lsbCBiZSB0cmFuc2ZlcnJlZCByaWdodCBhZnRlciB2ZXJpZmljYXRpb24gb2YKICAgKiB0aGlyZCBzaWduZXIgY2FsbC4KICAgKiBAcGFyYW0gcmVjaXBpZW50IFRoZSBhZGRyZXNzIG9mIHJlY2lwaWVudAogICAqIEBwYXJhbSBhbW91bnQgQW1vdW50IG9mIHdlaSB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgcmVjaXBpZW50LCB1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwgb25seUFkbWluIHsKICAgIAogICAgLy8gaW5wdXQgdmFsaWRhdGlvbnMKICAgIHJlcXVpcmUoIHJlY2lwaWVudCAhPSAweDAwICk7CiAgICByZXF1aXJlKCBhbW91bnQgPiAwICk7CiAgICByZXF1aXJlKCB0aGlzLmJhbGFuY2UgPj0gYW1vdW50KTsKCiAgICB1aW50IHJlbWFpbmluZzsKICAgIAogICAgLy8gU3RhcnQgb2Ygc2lnbmluZyBwcm9jZXNzLCBmaXJzdCBzaWduZXIgd2lsbCBmaW5hbGl6ZSBpbnB1dHMgZm9yIHJlbWFpbmluZyB0d28KICAgIGlmKHBlbmRpbmcuY29uZmlybWF0aW9ucyA9PSAwKXsKICAgICAgICAKICAgICAgICBwZW5kaW5nLnNpZ25lcltwZW5kaW5nLmNvbmZpcm1hdGlvbnNdID0gbXNnLnNlbmRlcjsKICAgICAgICBwZW5kaW5nLmV0aCA9IGFtb3VudDsKICAgICAgICBwZW5kaW5nLmNvbmZpcm1hdGlvbnMgPSBwZW5kaW5nLmNvbmZpcm1hdGlvbnMuYWRkKDEpOwogICAgICAgIHJlbWFpbmluZyA9IHJlcXVpcmVkLnN1YihwZW5kaW5nLmNvbmZpcm1hdGlvbnMpOwogICAgICAgIFRyYW5zZmVyQ29uZmlybWVkKG1zZy5zZW5kZXIsYW1vdW50LHJlbWFpbmluZyk7CiAgICAgICAgcmV0dXJuOwogICAgCiAgICB9CiAgICAKICAgIC8vIENvbXBhcmUgYW1vdW50IG9mIHdlaSB3aXRoIHByZXZpb3VzIGNvbmZpcm10YWlvbgogICAgaWYocGVuZGluZy5ldGggIT0gYW1vdW50KXsKICAgICAgICB0cmFuc2ZlclZpb2xhdGVkKCJJbmNvcnJlY3QgYW1vdW50IG9mIHdlaSBwYXNzZWQiKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICAKICAgIC8vIG1ha2Ugc3VyZSBzaWduZXIgaXMgbm90IHRyeWluZyB0byBzcGFtCiAgICBpZihtc2cuc2VuZGVyID09IHBlbmRpbmcuc2lnbmVyWzBdKXsKICAgICAgICB0cmFuc2ZlclZpb2xhdGVkKCJTaWduZXIgaXMgc3BhbW1pbmciKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICAKICAgIHBlbmRpbmcuc2lnbmVyW3BlbmRpbmcuY29uZmlybWF0aW9uc10gPSBtc2cuc2VuZGVyOwogICAgcGVuZGluZy5jb25maXJtYXRpb25zID0gcGVuZGluZy5jb25maXJtYXRpb25zLmFkZCgxKTsKICAgIHJlbWFpbmluZyA9IHJlcXVpcmVkLnN1YihwZW5kaW5nLmNvbmZpcm1hdGlvbnMpOwogICAgCiAgICAvLyBtYWtlIHN1cmUgc2lnbmVyIGlzIG5vdCB0cnlpbmcgdG8gc3BhbQogICAgaWYoIHJlbWFpbmluZyA9PSAwKXsKICAgICAgICBpZihtc2cuc2VuZGVyID09IHBlbmRpbmcuc2lnbmVyWzFdKXsKICAgICAgICAgICAgdHJhbnNmZXJWaW9sYXRlZCgiT25lIG9mIHNpZ25lcnMgaXMgc3BhbW1pbmciKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KICAgIAogICAgVHJhbnNmZXJDb25maXJtZWQobXNnLnNlbmRlcixhbW91bnQscmVtYWluaW5nKTsKICAgIAogICAgLy8gSWYgdGhyZWUgY29uZmlybWF0aW9uIGFyZSBkb25lLCB0cmlnZ2VyIHBheW91dAogICAgaWYgKHBlbmRpbmcuY29uZmlybWF0aW9ucyA9PSAzKXsKICAgICAgICBpZihyZWNpcGllbnQuc2VuZChhbW91bnQpKXsKICAgICAgICAgICAgVHJhbnNmZXIocGVuZGluZy5zaWduZXJbMF0scGVuZGluZy5zaWduZXJbMV0sIHBlbmRpbmcuc2lnbmVyWzJdLCByZWNpcGllbnQsYW1vdW50LHRydWUpOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBUcmFuc2ZlcihwZW5kaW5nLnNpZ25lclswXSxwZW5kaW5nLnNpZ25lclsxXSwgcGVuZGluZy5zaWduZXJbMl0sIHJlY2lwaWVudCxhbW91bnQsZmFsc2UpOwogICAgICAgIH0KICAgICAgICBSZXNldFRyYW5zZmVyU3RhdGUoKTsKICAgIH0gCiAgfQogIAogIGZ1bmN0aW9uIHRyYW5zZmVyVmlvbGF0ZWQoc3RyaW5nIGVycm9yKSBwcml2YXRlIHsKICAgIFZpb2xhdGVkKGVycm9yLCBtc2cuc2VuZGVyKTsKICAgIFJlc2V0VHJhbnNmZXJTdGF0ZSgpOwogIH0KICAKICBmdW5jdGlvbiBSZXNldFRyYW5zZmVyU3RhdGUoKSBpbnRlcm5hbAogIHsKICAgICAgZGVsZXRlIHBlbmRpbmc7CiAgICAgIEV2ZW50VHJhbnNmZXJXYXNSZXNldCgpOwogIH0KCgogIC8qKgogICAqIEBkZXYgUmVzZXQgdmFsdWVzIG9mIHBlbmRpbmcgKFRyYW5zYWN0aW9uIG9iamVjdCkKICAgKi8KICBmdW5jdGlvbiBhYm9ydFRyYW5zYWN0aW9uKCkgZXh0ZXJuYWwgb25seUFkbWluewogICAgICAgUmVzZXRUcmFuc2ZlclN0YXRlKCk7CiAgfQogIAogIC8qKiAKICAgKiBAZGV2IEZhbGxiYWNrIGZ1bmN0aW9uLCByZWNlaXZlcyB2YWx1ZSBhbmQgZW1pdHMgYSBkZXBvc2l0IGV2ZW50LiAKICAgKi8KICBmdW5jdGlvbigpIHBheWFibGUgewogICAgLy8ganVzdCBiZWluZyBzZW50IHNvbWUgY2FzaD8KICAgIGlmIChtc2cudmFsdWUgPiAwKQogICAgICBEZXBvc2l0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IENoZWNrcyBpZiBnaXZlbiBhZGRyZXNzIGlzIGFuIGFkbWluaXN0cmF0b3IuCiAgICogQHBhcmFtIF9hZGRyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gY2hlY2suCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBhZGRyZXNzIGlzIGFuIGFkbWluaXN0cmF0b3IgYW5kIGZhc2Ugb3RoZXJ3aXNlLgogICAqLwogIGZ1bmN0aW9uIGlzQWRtaW5pc3RyYXRvcihhZGRyZXNzIF9hZGRyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGFkbWluaXN0cmF0b3JzW19hZGRyXTsKICB9CiAgCiAgLy8gTWFpbnRpYW4gc3RhdGUgb2YgYWRtaW5pc3RyYXRvciBrZXkgdXBkYXRlIHByb2Nlc3MKICBzdHJ1Y3QgS2V5VXBkYXRlewogICAgYWRkcmVzc1szXSBzaWduZXI7CiAgICB1aW50IGNvbmZpcm1hdGlvbnM7CiAgICBhZGRyZXNzIG9sZEFkZHJlc3M7CiAgICBhZGRyZXNzIG5ld0FkZHJlc3M7CiAgfQogIAogIEtleVVwZGF0ZSBwcml2YXRlIHVwZGF0aW5nOwogIAogIC8qKgogICAqIEBkZXYgVGhyZWUgYWRtbmlzdHJhdG9yIGNhbiByZXBsYWNlIGtleSBvZiBmb3VydGggYWRtaW5pc3RyYXRvci4gCiAgICogQHBhcmFtIF9vbGRBZGRyZXNzIEFkZHJlc3Mgb2YgYWRtaW5pc3JhdG9yIG5lZWRzIHRvIGJlIHJlcGxhY2VkCiAgICogQHBhcmFtIF9uZXdBZGRyZXNzIEFkZHJlc3Mgb2YgbmV3IGFkbWluaXN0cmF0b3IKICAgKi8KICBmdW5jdGlvbiB1cGRhdGVBZG1pbmlzdHJhdG9yS2V5KGFkZHJlc3MgX29sZEFkZHJlc3MsIGFkZHJlc3MgX25ld0FkZHJlc3MpIGV4dGVybmFsIG9ubHlBZG1pbiB7CiAgICAKICAgIC8vIGlucHV0IHZlcmlmaWNhdGlvbnMKICAgIHJlcXVpcmUoaXNBZG1pbmlzdHJhdG9yKF9vbGRBZGRyZXNzKSk7CiAgICByZXF1aXJlKCBfbmV3QWRkcmVzcyAhPSAweDAwICk7CiAgICByZXF1aXJlKCFpc0FkbWluaXN0cmF0b3IoX25ld0FkZHJlc3MpKTsKICAgIHJlcXVpcmUoIG1zZy5zZW5kZXIgIT0gX29sZEFkZHJlc3MgKTsKICAgIAogICAgLy8gY291bnQgY29uZmlybWF0aW9uIAogICAgdWludDI1NiByZW1haW5pbmc7CiAgICAKICAgIC8vIHN0YXJ0IG9mIHVwZGF0aW5nIHByb2Nlc3MsIGZpcnN0IHNpZ25lciB3aWxsIGZpbmFsaXplIGFkZHJlc3MgdG8gYmUgcmVwbGFjZWQKICAgIC8vIGFuZCBuZXcgYWRkcmVzcyB0byBiZSByZWdpc3RlcmVkLCByZW1haW5pbmcgdHdvIG11c3QgY29uZmlybQogICAgaWYoIHVwZGF0aW5nLmNvbmZpcm1hdGlvbnMgPT0gMCl7CiAgICAgICAgCiAgICAgICAgdXBkYXRpbmcuc2lnbmVyW3VwZGF0aW5nLmNvbmZpcm1hdGlvbnNdID0gbXNnLnNlbmRlcjsKICAgICAgICB1cGRhdGluZy5vbGRBZGRyZXNzID0gX29sZEFkZHJlc3M7CiAgICAgICAgdXBkYXRpbmcubmV3QWRkcmVzcyA9IF9uZXdBZGRyZXNzOwogICAgICAgIHVwZGF0aW5nLmNvbmZpcm1hdGlvbnMgPSB1cGRhdGluZy5jb25maXJtYXRpb25zLmFkZCgxKTsKICAgICAgICByZW1haW5pbmcgPSByZXF1aXJlZC5zdWIodXBkYXRpbmcuY29uZmlybWF0aW9ucyk7CiAgICAgICAgVXBkYXRlQ29uZmlybWVkKG1zZy5zZW5kZXIsX25ld0FkZHJlc3MscmVtYWluaW5nKTsKICAgICAgICByZXR1cm47CiAgICAgICAgCiAgICB9CiAgICAKICAgIC8vIHZpb2xhdGVkIGNvbnNlbnN1cwogICAgaWYodXBkYXRpbmcub2xkQWRkcmVzcyAhPSBfb2xkQWRkcmVzcyl7CiAgICAgICAgVmlvbGF0ZWQoIk9sZCBhZGRyZXNzZXMgZG8gbm90IG1hdGNoIixtc2cuc2VuZGVyKTsKICAgICAgICBSZXNldFVwZGF0ZVN0YXRlKCk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgCiAgICBpZih1cGRhdGluZy5uZXdBZGRyZXNzICE9IF9uZXdBZGRyZXNzKXsKICAgICAgICBWaW9sYXRlZCgiTmV3IGFkZHJlc3NlcyBkbyBub3QgbWF0Y2giLG1zZy5zZW5kZXIpOwogICAgICAgIFJlc2V0VXBkYXRlU3RhdGUoKTsKICAgICAgICByZXR1cm47IAogICAgfQogICAgCiAgICAvLyBtYWtlIHN1cmUgYWRtaW4gaXMgbm90IHRyeWluZyB0byBzcGFtCiAgICBpZihtc2cuc2VuZGVyID09IHVwZGF0aW5nLnNpZ25lclswXSl7CiAgICAgICAgVmlvbGF0ZWQoIlNpZ25lciBpcyBzcGFtbWluZyIsbXNnLnNlbmRlcik7CiAgICAgICAgUmVzZXRVcGRhdGVTdGF0ZSgpOwogICAgICAgIHJldHVybjsKICAgIH0KICAgICAgICAKICAgIHVwZGF0aW5nLnNpZ25lclt1cGRhdGluZy5jb25maXJtYXRpb25zXSA9IG1zZy5zZW5kZXI7CiAgICB1cGRhdGluZy5jb25maXJtYXRpb25zID0gdXBkYXRpbmcuY29uZmlybWF0aW9ucy5hZGQoMSk7CiAgICByZW1haW5pbmcgPSByZXF1aXJlZC5zdWIodXBkYXRpbmcuY29uZmlybWF0aW9ucyk7CgogICAgaWYoIHJlbWFpbmluZyA9PSAwKXsKICAgICAgICBpZihtc2cuc2VuZGVyID09IHVwZGF0aW5nLnNpZ25lclsxXSl7CiAgICAgICAgICAgIFZpb2xhdGVkKCJPbmUgb2Ygc2lnbmVycyBpcyBzcGFtbWluZyIsbXNnLnNlbmRlcik7CiAgICAgICAgICAgIFJlc2V0VXBkYXRlU3RhdGUoKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBVcGRhdGVDb25maXJtZWQobXNnLnNlbmRlcixfbmV3QWRkcmVzcyxyZW1haW5pbmcpOwogICAgCiAgICAvLyBpZiB0aHJlZSBjb25maXJtYXRpb24gYXJlIGRvbmUsIHJlZ2lzdGVyIG5ldyBhZG1pbiBhbmQgcmVtb3ZlIG9sZCBvbmUKICAgIGlmKCB1cGRhdGluZy5jb25maXJtYXRpb25zID09IDMgKXsKICAgICAgICBLZXlSZXBsYWNlZChfb2xkQWRkcmVzcywgX25ld0FkZHJlc3MpOwogICAgICAgIFJlc2V0VXBkYXRlU3RhdGUoKTsKICAgICAgICBkZWxldGUgYWRtaW5pc3RyYXRvcnNbX29sZEFkZHJlc3NdOwogICAgICAgIGFkbWluaXN0cmF0b3JzW19uZXdBZGRyZXNzXSA9IHRydWU7CiAgICAgICAgcmV0dXJuOwogICAgfQogIH0KICAKICBmdW5jdGlvbiBSZXNldFVwZGF0ZVN0YXRlKCkgaW50ZXJuYWwKICB7CiAgICAgIGRlbGV0ZSB1cGRhdGluZzsKICAgICAgRXZlbnRVcGRhdGVXYXNSZXNldCgpOwogIH0KCiAgLyoqCiAgICogQGRldiBSZXNldCB2YWx1ZXMgb2YgdXBkYXRpbmcgKEtleVVwZGF0ZSBvYmplY3QpCiAgICovCiAgZnVuY3Rpb24gYWJvcnRVcGRhdGUoKSBleHRlcm5hbCBvbmx5QWRtaW57CiAgICAgIFJlc2V0VXBkYXRlU3RhdGUoKTsKICB9CiAgCiAgLyoqCiAgICogQGRldiBtb2RpZmllciBhbGxvdyBvbmx5IGlmIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSBhZG1pbmlzdHJhdG9yCiAgICovCiAgbW9kaWZpZXIgb25seUFkbWluKCl7CiAgICAgIGlmKCAhYWRtaW5pc3RyYXRvcnNbbXNnLnNlbmRlcl0gKXsKICAgICAgICAgIHJldmVydCgpOwogICAgICB9CiAgICAgIF87CiAgfQp9'.
	

]
