Class {
	#name : #SRT46043c9093ff4d0a796bd1aee7e80254420368dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT46043c9093ff4d0a796bd1aee7e80254420368dd >> base64 [
	^ ''.
	

]
