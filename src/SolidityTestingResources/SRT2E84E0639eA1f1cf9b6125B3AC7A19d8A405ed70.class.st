Class {
	#name : #SRT2E84E0639eA1f1cf9b6125B3AC7A19d8A405ed70,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2E84E0639eA1f1cf9b6125B3AC7A19d8A405ed70 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbCAoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgVHJhbnNmZXIoYWRkcmVzcygwKSwgX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKLy8vIEB0aXRsZSBNaWdyYXRpb24gQWdlbnQgaW50ZXJmYWNlCmNvbnRyYWN0IE1pZ3JhdGlvbkFnZW50IHsKCiAgICBmdW5jdGlvbiBtaWdyYXRlRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcHVibGljOwp9Cgpjb250cmFjdCBVbml0ZWRmYW5zVG9rZW4gaXMgTWludGFibGVUb2tlbiB7CiAgICBhZGRyZXNzIHB1YmxpYyBtaWdyYXRpb25NYXN0ZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBtaWdyYXRpb25BZ2VudDsKICAgIGFkZHJlc3MgcHVibGljIGFkbWluOwogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RTYWxlQWRkcmVzczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsTWlncmF0ZWQ7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiVW5pdGVkRmFucyI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJVRk4iOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKICAgIGJvb2wgcHVibGljIGxvY2tlZCA9IHRydWU7IC8vIExvY2sgdGhlIHRyYW5zZmVyIG9mIHRva2VucyBkdXJpbmcgdGhlIGNyb3dkc2FsZQoKICAgIGV2ZW50IE1pZ3JhdGUoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZXZlbnQgTG9ja2VkKCk7CgogICAgZXZlbnQgRXJyb3IoYWRkcmVzcyBhZHJzMSwgYWRkcmVzcyBhZHJzMiwgYWRkcmVzcyBhZHJzMyk7CgogICAgZXZlbnQgVW5sb2NrZWQoKTsKCiAgICBtb2RpZmllciBvbmx5VW5sb2NrZWQoKSB7CiAgICAgICAgaWYgKGxvY2tlZCkgCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUF1dGhvcml6ZWQoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbXNnLnNlbmRlciAhPSBjcm93ZFNhbGVBZGRyZXNzICYmIG1zZy5zZW5kZXIgIT0gYWRtaW4pIAogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKCiAgICBmdW5jdGlvbiBVbml0ZWRmYW5zVG9rZW4oYWRkcmVzcyBfYWRtaW4pIHB1YmxpYyB7CiAgICAgICAgLy8gTG9jayB0aGUgdHJhbnNmQ3Jvd2RzYWxlZXIgZnVuY3Rpb24gZHVyaW5nIHRoZSBjcm93ZHNhbGUKICAgICAgICBsb2NrZWQgPSB0cnVlOyAvLyBMb2NrIHRoZSB0cmFuc2ZlciBvZiB0b2tlbnMgZHVyaW5nIHRoZSBjcm93ZHNhbGUKICAgICAgICAvLyB0cmFuc2Zlck93bmVyc2hpcChfYWRtaW4pOwogICAgICAgIGFkbWluID0gX2FkbWluOwogICAgICAgIGNyb3dkU2FsZUFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIG1pZ3JhdGlvbk1hc3RlciA9IF9hZG1pbjsKICAgIH0KCiAgICBmdW5jdGlvbiB1bmxvY2soKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIGxvY2tlZCA9IGZhbHNlOwogICAgICAgIFVubG9ja2VkKCk7CiAgICB9CgogICAgZnVuY3Rpb24gbG9jaygpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKICAgICAgICBMb2NrZWQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seVVubG9ja2VkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seVVubG9ja2VkIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKCgogICAgLy8gVG9rZW4gbWlncmF0aW9uIHN1cHBvcnQ6CgogICAgLy8vIEBub3RpY2UgTWlncmF0ZSB0b2tlbnMgdG8gdGhlIG5ldyB0b2tlbiBjb250cmFjdC4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIHN0YXRlOiBPcGVyYXRpb25hbCBNaWdyYXRpb24KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgbWlncmF0ZWQKICAgIGZ1bmN0aW9uIG1pZ3JhdGUodWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHsKICAgICAgICAvLyBBYm9ydCBpZiBub3QgaW4gT3BlcmF0aW9uYWwgTWlncmF0aW9uIHN0YXRlLgogICAgICAgIAogICAgICAgIGlmIChtaWdyYXRpb25BZ2VudCA9PSAwKSAKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgLy8gVmFsaWRhdGUgaW5wdXQgdmFsdWUuCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSAKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKF92YWx1ZSA+IGJhbGFuY2VzW21zZy5zZW5kZXJdKSAKICAgICAgICAgICAgcmV2ZXJ0KCk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICAgICAgdG90YWxNaWdyYXRlZCArPSBfdmFsdWU7CiAgICAgICAgTWlncmF0aW9uQWdlbnQobWlncmF0aW9uQWdlbnQpLm1pZ3JhdGVGcm9tKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgTWlncmF0ZShtc2cuc2VuZGVyLCBtaWdyYXRpb25BZ2VudCwgX3ZhbHVlKTsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgU2V0IGFkZHJlc3Mgb2YgbWlncmF0aW9uIHRhcmdldCBjb250cmFjdCBhbmQgZW5hYmxlIG1pZ3JhdGlvbgogICAgLy8vIHByb2Nlc3MuCiAgICAvLy8gQGRldiBSZXF1aXJlZCBzdGF0ZTogT3BlcmF0aW9uYWwgTm9ybWFsCiAgICAvLy8gQGRldiBTdGF0ZSB0cmFuc2l0aW9uOiAtPiBPcGVyYXRpb25hbCBNaWdyYXRpb24KICAgIC8vLyBAcGFyYW0gX2FnZW50IFRoZSBhZGRyZXNzIG9mIHRoZSBNaWdyYXRpb25BZ2VudCBjb250cmFjdAogICAgZnVuY3Rpb24gc2V0TWlncmF0aW9uQWdlbnQoYWRkcmVzcyBfYWdlbnQpIGV4dGVybmFsIG9ubHlVbmxvY2tlZCgpIHsKICAgICAgICAvLyBBYm9ydCBpZiBub3QgaW4gT3BlcmF0aW9uYWwgTm9ybWFsIHN0YXRlLgogICAgICAgIAogICAgICAgIHJlcXVpcmUobWlncmF0aW9uQWdlbnQgPT0gMCk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pZ3JhdGlvbk1hc3Rlcik7CiAgICAgICAgbWlncmF0aW9uQWdlbnQgPSBfYWdlbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXRDcm93ZFNhbGVBZGRyZXNzKGFkZHJlc3MgX25ld0Nyb3dkU2FsZUFkZHJlc3MpIGV4dGVybmFsIG9ubHlBdXRob3JpemVkKCkgewogICAgICAgIGNyb3dkU2FsZUFkZHJlc3MgPSBfbmV3Q3Jvd2RTYWxlQWRkcmVzczsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0TWlncmF0aW9uTWFzdGVyKGFkZHJlc3MgX21hc3RlcikgZXh0ZXJuYWwgeyAgICAgICAKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWlncmF0aW9uTWFzdGVyKTsKICAgICAgICByZXF1aXJlKF9tYXN0ZXIgIT0gMCk7CiAgICAgICAgbWlncmF0aW9uTWFzdGVyID0gX21hc3RlcjsKICAgIH0KfQoKCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlCiAqIEBkZXYgQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIENyb3dkc2FsZXMgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAqIHRva2VuIHB1cmNoYXNlcyBhbmQgdGhlIGNyb3dkc2FsZSB3aWxsIGFzc2lnbiB0aGVtIHRva2VucyBiYXNlZAogKiBvbiBhIHRva2VuIHBlciBFVEggcmF0ZS4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqLwpjb250cmFjdCBDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogIE1pbnRhYmxlVG9rZW4gcHVibGljIHRva2VuOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgdWludDI1NiBwdWJsaWMgcmF0ZTsKCiAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0KSB7CiAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoX2VuZFRpbWUgPj0gX3N0YXJ0VGltZSk7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KCk7CiAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgZW5kVGltZSA9IF9lbmRUaW1lOwogICAgcmF0ZSA9IF9yYXRlOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICB9CgogIC8vIGNyZWF0ZXMgdGhlIHRva2VuIHRvIGJlIHNvbGQuCiAgLy8gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGF2ZSBjcm93ZHNhbGUgb2YgYSBzcGVjaWZpYyBtaW50YWJsZSB0b2tlbi4KICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgcmV0dXJuIG5ldyBNaW50YWJsZVRva2VuKCk7CiAgfQoKCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CgogICAgLy8gdXBkYXRlIHN0YXRlCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgdG9rZW4ubWludChiZW5lZmljaWFyeSwgdG9rZW5zKTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICBmb3J3YXJkRnVuZHMoKTsKICB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgd2l0aGluUGVyaW9kID0gbm93ID49IHN0YXJ0VGltZSAmJiBub3cgPD0gZW5kVGltZTsKICAgIGJvb2wgbm9uWmVyb1B1cmNoYXNlID0gbXNnLnZhbHVlICE9IDA7CiAgICByZXR1cm4gd2l0aGluUGVyaW9kICYmIG5vblplcm9QdXJjaGFzZTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIG5vdyA+IGVuZFRpbWU7CiAgfQoKCn0KCgpjb250cmFjdCBVbml0ZWRmYW5zVG9rZW5Dcm93ZHNhbGUgaXMgT3duYWJsZSwgQ3Jvd2RzYWxlIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKIAogICAgLy9vcGVyYXRpb25hbAogICAgYm9vbCBwdWJsaWMgTG9ja3VwVG9rZW5zV2l0aGRyYXduID0gZmFsc2U7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b0RlYyA9IDEwKioxODsKICAgIHVpbnQyNTYgcHVibGljIHRva2Vuc0xlZnQgPSAzMDMwMzAzMCp0b0RlYzsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGNhcCA9IDMwMzAzMDMwKnRvRGVjOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgc3RhcnRSYXRlID0gMTIwMDA7CgogICAgZW51bSBTdGF0ZSB7IEJlZm9yZVNhbGUsIE5vcm1hbFNhbGUsIFNob3VsZEZpbmFsaXplLCBTYWxlT3ZlciB9CiAgICBTdGF0ZSBwdWJsaWMgc3RhdGUgPSBTdGF0ZS5CZWZvcmVTYWxlOwoKCiAgICAvLyAvKiAtLS0gVGltZSBwZXJpb2RzIC0tLSAqLwoKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZU51bWJlciA9IDE1MDAwMDAwMDA7CgogICAgdWludDI1NiBwdWJsaWMgZW5kVGltZU51bWJlciA9IDE1Mjc3MjQ4MDA7Ly8gV2VkLCAzMSBNYXkgMjAxOCAxMjowMDowMCArMDAwMAoKICAgIGV2ZW50IEZpbmFsaXplZCgpOwoKICAgIGZ1bmN0aW9uIFVuaXRlZGZhbnNUb2tlbkNyb3dkc2FsZShhZGRyZXNzIF9hZG1pbikKICAgIENyb3dkc2FsZSgKICAgICAgICBub3cgKyAxMCwgLy8gMjAxOC0wMi0wMVQwMDowMDowMCswMDowMCAtIDE1MTc0NDMyMDAKICAgICAgICBlbmRUaW1lTnVtYmVyLCAvLyAyMDE4LTA4LTAxVDAwOjAwOjAwKzAwOjAwIC0gCiAgICAgICAgMTIwMDAsLyogc3RhcnQgcmF0ZSAtIDEwMDAgKi8KICAgICAgICBfYWRtaW4KICAgICkgIAogICAgcHVibGljIAogICAge30KCiAgICAvLyBjcmVhdGVzIHRoZSB0b2tlbiB0byBiZSBzb2xkLgogICAgLy8gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGF2ZSBjcm93ZHNhbGUgb2YgYSBzcGVjaWZpYyBNaW50YWJsZVRva2VuIHRva2VuLgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Db250cmFjdCgpIGludGVybmFsIHJldHVybnMgKE1pbnRhYmxlVG9rZW4pIHsKICAgICAgICByZXR1cm4gbmV3IFVuaXRlZGZhbnNUb2tlbihtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgZm9yd2FyZEZ1bmRzQW1vdW50KG1zZy52YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzQW1vdW50KHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVmdW5kQW1vdW50KHVpbnQyNTYgYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRva2Vuc1VwZGF0ZVN0YXRlKCkgaW50ZXJuYWwgewogICAgICAgIGlmKHN0YXRlID09IFN0YXRlLkJlZm9yZVNhbGUgJiYgbm93ID49IHN0YXJ0VGltZU51bWJlcikgeyBzdGF0ZSA9IFN0YXRlLk5vcm1hbFNhbGU7IH0KICAgICAgICByZXF1aXJlKHN0YXRlICE9IFN0YXRlLlNob3VsZEZpbmFsaXplICYmIHN0YXRlICE9IFN0YXRlLlNhbGVPdmVyICYmIG1zZy52YWx1ZSA+PSAyNSAqIHRvRGVjKTsKICAgICAgICBpZihtc2cudmFsdWUubXVsKHJhdGUpID49IHRva2Vuc0xlZnQpIHsgc3RhdGUgPSBTdGF0ZS5TaG91bGRGaW5hbGl6ZTsgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgYnV5VG9rZW5zVXBkYXRlU3RhdGUoKTsKICAgICAgICB2YXIgbnVtVG9rZW5zID0gbXNnLnZhbHVlLm11bChyYXRlKTsKICAgICAgICBpZihzdGF0ZSA9PSBTdGF0ZS5TaG91bGRGaW5hbGl6ZSkgewogICAgICAgICAgICBsYXN0VG9rZW5zKGJlbmVmaWNpYXJ5KTsKICAgICAgICAgICAgbnVtVG9rZW5zID0gdG9rZW5zTGVmdDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRva2Vuc0xlZnQgPSB0b2tlbnNMZWZ0LnN1YihudW1Ub2tlbnMpOyAvLyBpZiBuZWdhdGl2ZSwgc2hvdWxkIGZpbmFsaXplCiAgICAgICAgICAgIHN1cGVyLmJ1eVRva2VucyhiZW5lZmljaWFyeSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eUNvaW5zVXBkYXRlU3RhdGUodWludDI1NiBhbW91bnQpIGludGVybmFsIHsKICAgICAgICBpZihzdGF0ZSA9PSBTdGF0ZS5CZWZvcmVTYWxlICYmIG5vdyA+PSBzdGFydFRpbWVOdW1iZXIpIHsgc3RhdGUgPSBTdGF0ZS5Ob3JtYWxTYWxlOyB9CiAgICAgICAgcmVxdWlyZShzdGF0ZSAhPSBTdGF0ZS5TaG91bGRGaW5hbGl6ZSAmJiBzdGF0ZSAhPSBTdGF0ZS5TYWxlT3ZlciAmJiBhbW91bnQgPj0gMjUgKiB0b0RlYyk7CiAgICAgICAgaWYoYW1vdW50Lm11bChyYXRlKSA+PSB0b2tlbnNMZWZ0KSB7IHN0YXRlID0gU3RhdGUuU2hvdWxkRmluYWxpemU7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBidXlDb2lucyhhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50MjU2IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgYnV5Q29pbnNVcGRhdGVTdGF0ZShhbW91bnQpOwogICAgICAgIHZhciBudW1Ub2tlbnMgPSBhbW91bnQubXVsKHJhdGUpOwogICAgICAgIGlmKHN0YXRlID09IFN0YXRlLlNob3VsZEZpbmFsaXplKSB7CiAgICAgICAgICAgIGxhc3RUb2tlbnMoYmVuZWZpY2lhcnkpOwogICAgICAgICAgICBudW1Ub2tlbnMgPSB0b2tlbnNMZWZ0OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdG9rZW5zTGVmdCA9IHRva2Vuc0xlZnQuc3ViKG51bVRva2Vucyk7IC8vIGlmIG5lZ2F0aXZlLCBzaG91bGQgZmluYWxpemUKICAgICAgICAgICAgc3VwZXIuYnV5VG9rZW5zKGJlbmVmaWNpYXJ5KTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gbGFzdFRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBpbnRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgICAgIHVpbnQyNTYgdG9rZW5zRm9yRnVsbEJ1eSA9IHdlaUFtb3VudC5tdWwocmF0ZSk7Ly8gbXVzdCBiZSBiaWdnZXIgb3IgZXF1YWwgdG8gdG9rZW5zTGVmdCB0byBnZXQgaGVyZQogICAgICAgIHVpbnQyNTYgdG9rZW5zVG9SZWZ1bmRGb3IgPSB0b2tlbnNGb3JGdWxsQnV5LnN1Yih0b2tlbnNMZWZ0KTsKICAgICAgICB1aW50MjU2IHRva2Vuc1JlbWFpbmluZyA9IHRva2Vuc0ZvckZ1bGxCdXkuc3ViKHRva2Vuc1RvUmVmdW5kRm9yKTsKICAgICAgICB1aW50MjU2IHdlaUFtb3VudFRvUmVmdW5kID0gdG9rZW5zVG9SZWZ1bmRGb3IuZGl2KHJhdGUpOwogICAgICAgIHVpbnQyNTYgd2VpUmVtYWluaW5nID0gd2VpQW1vdW50LnN1Yih3ZWlBbW91bnRUb1JlZnVuZCk7CiAgICAgICAgCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlSZW1haW5pbmcpOwoKICAgICAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnNSZW1haW5pbmcpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaVJlbWFpbmluZywgdG9rZW5zUmVtYWluaW5nKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzQW1vdW50KHdlaVJlbWFpbmluZyk7CiAgICAgICAgcmVmdW5kQW1vdW50KHdlaUFtb3VudFRvUmVmdW5kKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmaW5hbGl6ZVVwZGF0ZVN0YXRlKCkgaW50ZXJuYWwgewogICAgICAgIGlmKG5vdyA+IGVuZFRpbWUpIHsgc3RhdGUgPSBTdGF0ZS5TaG91bGRGaW5hbGl6ZTsgfQogICAgICAgIGlmKHRva2Vuc0xlZnQgPT0gMCkgeyBzdGF0ZSA9IFN0YXRlLlNob3VsZEZpbmFsaXplOyB9CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgewogICAgICAgIGZpbmFsaXplVXBkYXRlU3RhdGUoKTsKICAgICAgICByZXF1aXJlIChzdGF0ZSA9PSBTdGF0ZS5TaG91bGRGaW5hbGl6ZSk7CgogICAgICAgIGZpbmFsaXphdGlvbigpOwogICAgICAgIEZpbmFsaXplZCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICAgICAgICBlbmRUaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgICAgIHN0YXRlID0gU3RhdGUuU2FsZU92ZXI7CiAgICB9Cn0='.
	

]
