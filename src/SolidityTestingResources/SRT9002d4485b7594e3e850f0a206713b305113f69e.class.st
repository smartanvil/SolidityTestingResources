Class {
	#name : #SRT9002d4485b7594e3e850f0a206713b305113f69e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9002d4485b7594e3e850f0a206713b305113f69e >> base64 [
	^ ''.
	

]
