Class {
	#name : #SRTC8058D59e208399B76E66Da1EC669dD6B1BeE2ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC8058D59e208399B76E66Da1EC669dD6B1BeE2ea >> base64 [
	^ ''.
	

]
