Class {
	#name : #SRT58f6b8d0a80e2c1a394d0c01445721c1b7df5139,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT58f6b8d0a80e2c1a394d0c01445721c1b7df5139 >> base64 [
	^ ''.
	

]
