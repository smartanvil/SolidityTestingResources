Class {
	#name : #SRTF062783C821E2f5a1d3768a20D2C281d134E0C92,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF062783C821E2f5a1d3768a20D2C281d134E0C92 >> base64 [
	^ ''.
	

]
