Class {
	#name : #SRT320344d8c18b6971b3fcdbf0b12ed73578a8a622,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT320344d8c18b6971b3fcdbf0b12ed73578a8a622 >> base64 [
	^ ''.
	

]
