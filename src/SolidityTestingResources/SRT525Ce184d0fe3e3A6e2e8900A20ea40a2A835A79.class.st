Class {
	#name : #SRT525Ce184d0fe3e3A6e2e8900A20ea40a2A835A79,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT525Ce184d0fe3e3A6e2e8900A20ea40a2A835A79 >> base64 [
	^ ''.
	

]
