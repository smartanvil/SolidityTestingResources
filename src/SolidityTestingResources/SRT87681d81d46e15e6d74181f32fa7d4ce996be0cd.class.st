Class {
	#name : #SRT87681d81d46e15e6d74181f32fa7d4ce996be0cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT87681d81d46e15e6d74181f32fa7d4ce996be0cd >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgppbnRlcmZhY2UgdG9rZW4gewogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKY29udHJhY3QgQ3Jvd2RzYWxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYWRkcmVzcyBwdWJsaWMgU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTID0gMHgwMDg5QzdFQzA4NDM1NTAxOUEwNTdhYkVERjRFOEY2ODY0MjQyNDY1OyAgIC8vIFNTT1QgSGVhbHRoIEZ1bmRzIGFkZHJlc3MKICAgIGFkZHJlc3MgcHVibGljIFNFSFJfV0FMTEVUX0FERFJFU1MgPSAweDAwZWZBNjA5RUM5M0RiNTRhNzk3NzY5MUNDYTkyMGU2MjNmMDcyNTg7ICAgICAgICAvLyBTRUhSIE1haW4gdG9rZW4gd2FsbGV0CiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQgPSB0b2tlbigweEVFNjYwQmVmMUVlMTY5N0Y2MzU1NGM5MmUzNzJmYzg2MmYzODQ4MTApOyAgICAgICAgICAgLy8gU0VIUiBjb250cmFjdCBhZGRyZXNzCiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbCA9IDEwMDAwMDAwMCAqIDEgZXRoZXI7ICAvLyAxMDAsMDAwLDAwMCBTRUhScyBzb2Z0Y2FwIAogICAgdWludCBwdWJsaWMgaGFyZENhcCA9IDUwMDAwMDAwMCAqIDEgZXRoZXI7ICAgICAgLy8gNTAwLDAwMCwwMDAgU0VIUnMgaGFyZGNhcAogICAgdWludCBwdWJsaWMgYW1vdW50UmFpc2VkID0gMDsKICAgIHVpbnQgcHVibGljIHNlaHJSYWlzZWQgPSAwOwogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lOwogICAgdWludCBwdWJsaWMgZGVhZGxpbmU7CiAgICB1aW50IHB1YmxpYyBwcmljZSA9IDgwIHN6YWJvOyAgICAgICAgICAgICAgICAgICAvLyAwLjAwMDA4IEVUSC9TRUhSICA7IDEgc3phYm8gPSAxMF4tNiBFdGhlcgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICAKICAgIGJvb2wgcHVibGljIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CiAgICBib29sIHB1YmxpYyBjaGVja0RvbmUgPSBmYWxzZTsKCiAgICBldmVudCBHb2FsUmVhY2hlZChhZGRyZXNzIHJlY2lwaWVudCwgdWludCB0b3RhbEFtb3VudFJhaXNlZCk7CiAgICBldmVudCBGdW5kVHJhbnNmZXIoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50LCBib29sIGlzQ29udHJpYnV0aW9uKTsKCiAgICAvKioKICAgICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uCiAgICAgKgogICAgICogU2V0dXAgdGhlIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIENyb3dkc2FsZSgpIAogICAgewogICAgICAgIHN0YXJ0VGltZSA9IG5vdzsKICAgICAgICBkZWFkbGluZSA9IG5vdyArIDYyIGRheXM7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgCiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lKCkgeyBpZiAobm93ID49IGRlYWRsaW5lKSBfOyB9CiAgICBtb2RpZmllciBiZWZvcmVEZWFkbGluZSgpIHsgaWYgKG5vdyA8IGRlYWRsaW5lKSBfOyB9CiAgICBtb2RpZmllciBpc0Nyb3dkc2FsZSgpIHsgaWYgKCFjcm93ZHNhbGVDbG9zZWQpIF87IH0KICAgIG1vZGlmaWVyIGlzQ2hlY2tEb25lKCkgeyBpZiAoY2hlY2tEb25lKSBfOyB9CgogICAgLyoqCiAgICAgKiBGYWxsYmFjayBmdW5jdGlvbgogICAgICoKICAgICAqIFRoZSBmdW5jdGlvbiB3aXRob3V0IG5hbWUgaXMgdGhlIGRlZmF1bHQgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55b25lIHNlbmRzIGZ1bmRzIHRvIGEgY29udHJhY3QKICAgICAqLwogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBpc0Nyb3dkc2FsZSBiZWZvcmVEZWFkbGluZSB7CiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgCiAgICAgICAgaWYoYW1vdW50ID09IDAgKSByZXZlcnQoKTsgICAvLyBOZWVkIHRvIHNlbmQgc29tZSBldGhlciBhdCBsZWFzdAogICAgICAgIGVsc2UgaWYoIGFtb3VudCA8IDI1MCBmaW5uZXkpIHsKICAgICAgICAgICAgaWYgKHNlaHJSYWlzZWQgPCBmdW5kaW5nR29hbCkgewogICAgICAgICAgICAgICAgaWYobm93IDwgc3RhcnRUaW1lICsgMzEgZGF5cykgcmV2ZXJ0KCk7ICAgIC8vIE5lZWQgdG8gaW52ZXN0IGF0IGxlYXN0IDAuMjUgRXRoZXIgZHVyaW5nIHRoZSBwcmUtc2FsZSBpZiB0aGUgZnVuZGluZyBnb2FsIGhhc24ndCBiZWVuIHJlYWNoZWQgeWV0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdWludCB0b2tlbkFtb3VudCA9IChhbW91bnQgLyBwcmljZSkgKiAxIGV0aGVyOyAvLyBXZSBjb21wdXRlIHRoZSBudW1iZXIgb2YgdG9rZW5zIHRvIGlzc3VlCiAgICAgICAgYWRkcmVzcyBzZWhyV2FsbGV0ID0gU0VIUl9XQUxMRVRfQUREUkVTUzsKICAgICAgICAKICAgICAgICBpZihzZWhyUmFpc2VkIDwgZnVuZGluZ0dvYWwpIHsgIC8vIEJvbnVzIGF2YWlsYWJsZSBmb3IgYW55IHRva2VucyBib3VnaHQgYmVmb3JlIHNvZnRjYXAgaXMgcmVhY2hlZAogICAgICAgICAgICAKICAgICAgICAgICAgaWYobm93IDwgc3RhcnRUaW1lICsgMTAgZGF5cykgewogICAgICAgICAgICAgICAgdG9rZW5BbW91bnQgPSAoMTMgKiB0b2tlbkFtb3VudCkgLyAxMDsgLy8gMzAlIGJvbnVzIGR1cmluZyB0aGUgZmlyc3QgMTAtZGF5IHBlcmlvZAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlIGlmKG5vdyA8IHN0YXJ0VGltZSArIDIwIGRheXMpIHsKICAgICAgICAgICAgICAgIHRva2VuQW1vdW50ID0gKDEyICogdG9rZW5BbW91bnQpIC8gMTA7ICAgICAvLyAyMCUgYm9udXMgZHVyaW5nIHRoZSBzZWNvbmQgMTAtZGF5IHBlcmlvZAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlIGlmKG5vdyA8IHN0YXJ0VGltZSArIDMxIGRheXMpIHsKICAgICAgICAgICAgICAgIHRva2VuQW1vdW50ID0gKDExICogdG9rZW5BbW91bnQpIC8gMTA7ICAgICAvLyAxMCUgYm9udXMgZHVyaW5nIHRoZSB0aGlyZCAxMC1kYXkgcGVyaW9kCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsKICAgICAgICBhbW91bnRSYWlzZWQgKz0gYW1vdW50OwogICAgICAgIHNlaHJSYWlzZWQgKz0gdG9rZW5BbW91bnQ7CiAgICAgICAgCiAgICAgICAgdG9rZW5SZXdhcmQudHJhbnNmZXJGcm9tKFNFSFJfV0FMTEVUX0FERFJFU1MsIG1zZy5zZW5kZXIsIHRva2VuQW1vdW50KTsgLy8gd2lsbCBhdXRvbWF0aWNhbGx5IHRocm93IGlzIHRoZXJlIGFyZSBub3QgZW5vdWdoIGZ1bmRzIHJlbWFpbmluZyBpbiB0aGUgY29udHJhY3QKICAgICAgICBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCB0cnVlKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBnb2FsIHdhcyByZWFjaGVkCiAgICAgKgogICAgICogQ2hlY2tzIGlmIHRoZSBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCBhbmQgZW5kcyB0aGUgY2FtcGFpZ24KICAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tHb2FsUmVhY2hlZCgpIGFmdGVyRGVhZGxpbmUgewogICAgICAgIGlmIChzZWhyUmFpc2VkID49IGZ1bmRpbmdHb2FsKXsKICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgR29hbFJlYWNoZWQoU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTLCBhbW91bnRSYWlzZWQpOwogICAgICAgIH0KICAgICAgICBjcm93ZHNhbGVDbG9zZWQgPSB0cnVlOwogICAgICAgIGNoZWNrRG9uZSA9IHRydWU7CiAgICB9CgoKICAgIC8qKgogICAgICogV2l0aGRyYXcgdGhlIGZ1bmRzCiAgICAgKgogICAgICogQ2hlY2tzIHRvIHNlZSBpZiBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCwgYW5kIGlmIHNvLCBhbmQgdGhlIGZ1bmRpbmcgZ29hbCB3YXMgcmVhY2hlZCwKICAgICAqIHNlbmRzIHRoZSBlbnRpcmUgYW1vdW50IHRvIHRoZSBiZW5lZmljaWFyeS4gSWYgZ29hbCB3YXMgbm90IHJlYWNoZWQsIGVhY2ggY29udHJpYnV0b3IgY2FuIHdpdGhkcmF3CiAgICAgKiB0aGUgYW1vdW50IHRoZXkgY29udHJpYnV0ZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVXaXRoZHJhd2FsKCkgYWZ0ZXJEZWFkbGluZSBpc0NoZWNrRG9uZXsKICAgICAgICBpZiAoIWZ1bmRpbmdHb2FsUmVhY2hlZCkgewogICAgICAgICAgICB1aW50IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsKICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsKICAgICAgICAgICAgaWYgKGFtb3VudCA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQoYW1vdW50KSkgewogICAgICAgICAgICAgICAgICAgIEZ1bmRUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYW1vdW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZnVuZGluZ0dvYWxSZWFjaGVkICYmIFNTT1RIRUFMVEhfRlVORFNfQUREUkVTUyA9PSBtc2cuc2VuZGVyKSB7CiAgICAgICAgICAgIGlmIChTU09USEVBTFRIX0ZVTkRTX0FERFJFU1Muc2VuZChhbW91bnRSYWlzZWQpKSB7CiAgICAgICAgICAgICAgICBGdW5kVHJhbnNmZXIoU1NPVEhFQUxUSF9GVU5EU19BRERSRVNTLCBhbW91bnRSYWlzZWQsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vSWYgd2UgZmFpbCB0byBzZW5kIHRoZSBmdW5kcyB0byBiZW5lZmljaWFyeSwgdW5sb2NrIGZ1bmRlcnMgYmFsYW5jZQogICAgICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGhhcmRDYXBSZWFjaGVkKCkgewogICAgICAgIGlmKHNlaHJSYWlzZWQgPT0gaGFyZENhcCkgewogICAgICAgICAgICBkZWFkbGluZSA9IG5vdzsKICAgICAgICB9CiAgICAgICAgZWxzZSByZXZlcnQoKTsKICAgIH0KfQ=='.
	

]
