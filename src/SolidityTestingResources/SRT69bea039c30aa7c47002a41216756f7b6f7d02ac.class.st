Class {
	#name : #SRT69bea039c30aa7c47002a41216756f7b6f7d02ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69bea039c30aa7c47002a41216756f7b6f7d02ac >> base64 [
	^ ''.
	

]
