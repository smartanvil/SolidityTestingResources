Class {
	#name : #SRTf08bcfe0e509a293b73f8a41473435845c35eaa5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf08bcfe0e509a293b73f8a41473435845c35eaa5 >> base64 [
	^ ''.
	

]
