Class {
	#name : #SRTc0d6b253124c7718965f755e832c5418112cf28d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0d6b253124c7718965f755e832c5418112cf28d >> base64 [
	^ ''.
	

]
