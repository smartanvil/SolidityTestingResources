Class {
	#name : #SRTea7A3213b47099E3368F8f9A5f382540C80c2eB9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea7A3213b47099E3368F8f9A5f382540C80c2eB9 >> base64 [
	^ ''.
	

]
