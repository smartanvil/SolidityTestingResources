Class {
	#name : #SRT39a87dc12a7199aa012c18f114b763e27d0deca4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT39a87dc12a7199aa012c18f114b763e27d0deca4 >> base64 [
	^ ''.
	

]
