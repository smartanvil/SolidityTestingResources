Class {
	#name : #SRTc4f1c3aa85b3267f23689c19b8470b5a81babb2d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4f1c3aa85b3267f23689c19b8470b5a81babb2d >> base64 [
	^ ''.
	

]
