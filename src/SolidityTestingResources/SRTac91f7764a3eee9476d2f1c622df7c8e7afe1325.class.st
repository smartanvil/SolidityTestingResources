Class {
	#name : #SRTac91f7764a3eee9476d2f1c622df7c8e7afe1325,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTac91f7764a3eee9476d2f1c622df7c8e7afe1325 >> base64 [
	^ ''.
	

]
