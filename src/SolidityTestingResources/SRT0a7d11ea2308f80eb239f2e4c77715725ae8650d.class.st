Class {
	#name : #SRT0a7d11ea2308f80eb239f2e4c77715725ae8650d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a7d11ea2308f80eb239f2e4c77715725ae8650d >> base64 [
	^ ''.
	

]
