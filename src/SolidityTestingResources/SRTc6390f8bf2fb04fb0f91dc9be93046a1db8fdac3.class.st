Class {
	#name : #SRTc6390f8bf2fb04fb0f91dc9be93046a1db8fdac3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc6390f8bf2fb04fb0f91dc9be93046a1db8fdac3 >> base64 [
	^ ''.
	

]
