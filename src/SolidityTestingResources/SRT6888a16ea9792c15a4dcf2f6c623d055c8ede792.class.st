Class {
	#name : #SRT6888a16ea9792c15a4dcf2f6c623d055c8ede792,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6888a16ea9792c15a4dcf2f6c623d055c8ede792 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVNdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVEaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA+IDApOwogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjPj1hICYmIGM+PWIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgICB9CgogICAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQp9CgoKLyoKICAqIEVSQzIwIGludGVyZmFjZQogICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogICovCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5OwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOwp9CgoKCi8qKgogICogU3RhbmRhcmQgRVJDMjAgdG9rZW4gd2l0aCBTaG9ydCBIYW5kIEF0dGFjayBhbmQgYXBwcm92ZSgpIHJhY2UgY29uZGl0aW9uIG1pdGlnYXRpb24uCiAgKgogICogQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOgogICogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAgKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMAp7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsKCiAgICAvLyBJbnRlcmZhY2UgbWFya2VyCiAgICBib29sIHB1YmxpYyBjb25zdGFudCBpc1Rva2VuID0gdHJ1ZTsKCiAgICAvKioKICAgICAgKiBGaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgICAqCiAgICAgICogaHR0cDovL3Zlc3NlbmVzLmNvbS90aGUtZXJjMjAtc2hvcnQtYWRkcmVzcy1hdHRhY2stZXhwbGFpbmVkLwogICAgICAqLwogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgewogICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0KTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkKICAgICAgICBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnNhZmVTdWIoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5zYWZlQWRkKF92YWx1ZSk7CgogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICB1aW50IF9hbGxvd2FuY2UgPSBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdOwoKICAgICAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2UgX2FsbG93YW5jZS5zYWZlU3ViKHZhbHVlKSB3aWxsIHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgICAgICAvLyBpZiAodmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKCiAgICAgICAgYmFsYW5jZXNbdG9dID0gYmFsYW5jZXNbdG9dLnNhZmVBZGQodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW2Zyb21dID0gYmFsYW5jZXNbZnJvbV0uc2FmZVN1Yih2YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc2FmZVN1Yih2YWx1ZSk7CgogICAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgYWNjb3VudCkKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQgYmFsYW5jZSkKICAgIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbYWNjb3VudF07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoc3BlbmRlciwgMClgIGlmIGl0IGlzIG5vdAogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIGlmICgodmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bc3BlbmRlcl0gIT0gMCkpIHRocm93OwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW3NwZW5kZXJdID0gdmFsdWU7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBhY2NvdW50LCBhZGRyZXNzIHNwZW5kZXIpCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50IHJlbWFpbmluZykKICAgIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFthY2NvdW50XVtzcGVuZGVyXTsKICAgIH0KfQoKCgovKioKICAqIFVwZ3JhZGUgdGFyZ2V0IGludGVyZmFjZSBpbnNwaXJlZCBieSBMdW55ci4KICAqCiAgKiBVcGdyYWRlIGFnZW50IHRyYW5zZmVycyB0b2tlbnMgdG8gYSBuZXcgY29udHJhY3QuCiAgKiBVcGdyYWRlIGFnZW50IGl0c2VsZiBjYW4gYmUgdGhlIHRva2VuIGNvbnRyYWN0LCBvciBqdXN0IGEgbWlkZGxlIG1hbiBjb250cmFjdCBkb2luZyB0aGUgaGVhdnkgbGlmdGluZy4KICAqLwpjb250cmFjdCBVcGdyYWRlVGFyZ2V0CnsKICAgIHVpbnQgcHVibGljIG9yaWdpbmFsU3VwcGx5OwoKICAgIC8qKiBJbnRlcmZhY2UgbWFya2VyICovCiAgICBmdW5jdGlvbiBpc1VwZ3JhZGVUYXJnZXQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZ3JhZGVGcm9tKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWM7Cn0KCgovKioKICAqIEEgdG9rZW4gdXBncmFkZSBtZWNoYW5pc20gd2hlcmUgdXNlcnMgY2FuIG9wdC1pbiBhbW91bnQgb2YgdG9rZW5zIHRvIHRoZSBuZXh0IHNtYXJ0IGNvbnRyYWN0IHJldmlzaW9uLgogICoKICAqIEZpcnN0IGVudmlzaW9uZWQgYnkgR29sZW0gYW5kIEx1bnlyIHByb2plY3RzLgogICovCmNvbnRyYWN0IFVwZ3JhZGVhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbgp7CiAgICAvKiogQ29udHJhY3QgLyBwZXJzb24gd2hvIGNhbiBzZXQgdGhlIHVwZ3JhZGUgcGF0aC4gVGhpcyBjYW4gYmUgdGhlIHNhbWUgYXMgdGVhbSBtdWx0aXNpZyB3YWxsZXQsIGFzIHdoYXQgaXQgaXMgd2l0aCBpdHMgZGVmYXVsdCB2YWx1ZS4gKi8KICAgIGFkZHJlc3MgcHVibGljIHVwZ3JhZGVNYXN0ZXI7CgogICAgLyoqIFRoZSBuZXh0IGNvbnRyYWN0IHdoZXJlIHRoZSB0b2tlbnMgd2lsbCBiZSBtaWdyYXRlZC4gKi8KICAgIFVwZ3JhZGVUYXJnZXQgcHVibGljIHVwZ3JhZGVUYXJnZXQ7CgogICAgLyoqIEhvdyBtYW55IHRva2VucyB3ZSBoYXZlIHVwZ3JhZGVkIGJ5IG5vdy4gKi8KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsVXBncmFkZWQ7CgogICAgLyoqCiAgICAgICogVXBncmFkZSBzdGF0ZXMuCiAgICAgICoKICAgICAgKiAtIE5vdEFsbG93ZWQ6IFRoZSBjaGlsZCBjb250cmFjdCBoYXMgbm90IHJlYWNoZWQgYSBjb25kaXRpb24gd2hlcmUgdGhlIHVwZ3JhZGUgY2FuIGJndW4KICAgICAgKiAtIFdhaXRpbmdGb3JBZ2VudDogVG9rZW4gYWxsb3dzIHVwZ3JhZGUsIGJ1dCB3ZSBkb24ndCBoYXZlIGEgbmV3IGFnZW50IHlldAogICAgICAqIC0gUmVhZHlUb1VwZ3JhZGU6IFRoZSBhZ2VudCBpcyBzZXQsIGJ1dCBub3QgYSBzaW5nbGUgdG9rZW4gaGFzIGJlZW4gdXBncmFkZWQgeWV0CiAgICAgICogLSBVcGdyYWRpbmc6IFVwZ3JhZGUgYWdlbnQgaXMgc2V0IGFuZCB0aGUgYmFsYW5jZSBob2xkZXJzIGNhbiB1cGdyYWRlIHRoZWlyIHRva2VucwogICAgICAqCiAgICAgICovCiAgICBlbnVtIFVwZ3JhZGVTdGF0ZSB7VW5rbm93biwgTm90QWxsb3dlZCwgV2FpdGluZ0ZvckFnZW50LCBSZWFkeVRvVXBncmFkZSwgVXBncmFkaW5nfQoKICAgIC8qKgogICAgICAqIFNvbWVib2R5IGhhcyB1cGdyYWRlZCBzb21lIG9mIGhpcyB0b2tlbnMuCiAgICAgICovCiAgICBldmVudCBMb2dVcGdyYWRlKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIC8qKgogICAgICAqIE5ldyB1cGdyYWRlIGFnZW50IGF2YWlsYWJsZS4KICAgICAgKi8KICAgIGV2ZW50IExvZ1NldFVwZ3JhZGVUYXJnZXQoYWRkcmVzcyBhZ2VudCk7CgogICAgLyoqCiAgICAgICogRG8gbm90IGFsbG93IGNvbnN0cnVjdGlvbiB3aXRob3V0IHVwZ3JhZGUgbWFzdGVyIHNldC4KICAgICAgKi8KICAgIGZ1bmN0aW9uIFVwZ3JhZGVhYmxlVG9rZW4oYWRkcmVzcyBfdXBncmFkZU1hc3RlcikgewogICAgICAgIHVwZ3JhZGVNYXN0ZXIgPSBfdXBncmFkZU1hc3RlcjsKICAgIH0KCiAgICAvKioKICAgICAgKiBBbGxvdyB0aGUgdG9rZW4gaG9sZGVyIHRvIHVwZ3JhZGUgc29tZSBvZiB0aGVpciB0b2tlbnMgdG8gYSBuZXcgY29udHJhY3QuCiAgICAgICovCiAgICBmdW5jdGlvbiB1cGdyYWRlKHVpbnQyNTYgdmFsdWUpIHB1YmxpYyB7CiAgICAgICAgVXBncmFkZVN0YXRlIHN0YXRlID0gZ2V0VXBncmFkZVN0YXRlKCk7CiAgICAgICAgcmVxdWlyZShzdGF0ZSA9PSBVcGdyYWRlU3RhdGUuUmVhZHlUb1VwZ3JhZGUgfHwgc3RhdGUgPT0gVXBncmFkZVN0YXRlLlVwZ3JhZGluZyk7CgogICAgICAgIC8vIFZhbGlkYXRlIGlucHV0IHZhbHVlLgogICAgICAgIHJlcXVpcmUodmFsdWUgPiAwKTsKCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zYWZlU3ViKHZhbHVlKTsKCiAgICAgICAgLy8gVGFrZSB0b2tlbnMgb3V0IGZyb20gY2lyY3VsYXRpb24KICAgICAgICB0b3RhbFN1cHBseSAgID0gdG90YWxTdXBwbHkuc2FmZVN1Yih2YWx1ZSk7CiAgICAgICAgdG90YWxVcGdyYWRlZCA9IHRvdGFsVXBncmFkZWQuc2FmZUFkZCh2YWx1ZSk7CgogICAgICAgIC8vIFVwZ3JhZGUgYWdlbnQgcmVpc3N1ZXMgdGhlIHRva2VucwogICAgICAgIHVwZ3JhZGVUYXJnZXQudXBncmFkZUZyb20obXNnLnNlbmRlciwgdmFsdWUpOwogICAgICAgIExvZ1VwZ3JhZGUobXNnLnNlbmRlciwgdXBncmFkZVRhcmdldCwgdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICAqIFNldCBhbiB1cGdyYWRlIHRhcmdnZXQgdGhhdCBoYW5kbGVzIHRoZSBwcm9jZXNzIG9mIGxldHRpbmcgdXNlcnMgb3B0LWluIHRvIHRoZSBuZXcgdG9rZW4gY29udHJhY3QuCiAgICAgICovCiAgICBmdW5jdGlvbiBzZXRVcGdyYWRlVGFyZ2V0KGFkZHJlc3MgdGFyZ2V0KSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZShjYW5VcGdyYWRlKCkpOwogICAgICAgIHJlcXVpcmUodGFyZ2V0ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHVwZ3JhZGVNYXN0ZXIpOyAvLyBPbmx5IGEgbWFzdGVyIGNhbiBkZXNpZ25hdGUgdGhlIG5leHQgdGFyZ2V0CiAgICAgICAgcmVxdWlyZShnZXRVcGdyYWRlU3RhdGUoKSAhPSBVcGdyYWRlU3RhdGUuVXBncmFkaW5nKTsgLy8gVXBncmFkZSBoYXMgYWxyZWFkeSBiZWd1bgoKICAgICAgICB1cGdyYWRlVGFyZ2V0ID0gVXBncmFkZVRhcmdldCh0YXJnZXQpOwoKICAgICAgICByZXF1aXJlKHVwZ3JhZGVUYXJnZXQuaXNVcGdyYWRlVGFyZ2V0KCkpOyAvLyBCYWQgaW50ZXJmYWNlCiAgICAgICAgcmVxdWlyZSh1cGdyYWRlVGFyZ2V0Lm9yaWdpbmFsU3VwcGx5KCkgPT0gdG90YWxTdXBwbHkpOyAvLyBNYWtlIHN1cmUgdGhhdCB0b2tlbiBzdXBwbGllcyBtYXRjaCBpbiBzb3VyY2UgYW5kIHRhcmdldAoKICAgICAgICBMb2dTZXRVcGdyYWRlVGFyZ2V0KHVwZ3JhZGVUYXJnZXQpOwogICAgfQoKICAgIC8qKgogICAgICAqIEdldCB0aGUgc3RhdGUgb2YgdGhlIHRva2VuIHVwZ3JhZGUuCiAgICAgICovCiAgICBmdW5jdGlvbiBnZXRVcGdyYWRlU3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoVXBncmFkZVN0YXRlKSB7CiAgICAgICAgaWYgKCFjYW5VcGdyYWRlKCkpIHJldHVybiBVcGdyYWRlU3RhdGUuTm90QWxsb3dlZDsKICAgICAgICBlbHNlIGlmIChhZGRyZXNzKHVwZ3JhZGVUYXJnZXQpID09IDB4MDApIHJldHVybiBVcGdyYWRlU3RhdGUuV2FpdGluZ0ZvckFnZW50OwogICAgICAgIGVsc2UgaWYgKHRvdGFsVXBncmFkZWQgPT0gMCkgcmV0dXJuIFVwZ3JhZGVTdGF0ZS5SZWFkeVRvVXBncmFkZTsKICAgICAgICBlbHNlIHJldHVybiBVcGdyYWRlU3RhdGUuVXBncmFkaW5nOwogICAgfQoKICAgIC8qKgogICAgICAqIENoYW5nZSB0aGUgdXBncmFkZSBtYXN0ZXIuCiAgICAgICoKICAgICAgKiBUaGlzIGFsbG93cyB1cyB0byBzZXQgYSBuZXcgb3duZXIgZm9yIHRoZSB1cGdyYWRlIG1lY2hhbmlzbS4KICAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFVwZ3JhZGVNYXN0ZXIoYWRkcmVzcyBtYXN0ZXIpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtYXN0ZXIgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdXBncmFkZU1hc3Rlcik7CgogICAgICAgIHVwZ3JhZGVNYXN0ZXIgPSBtYXN0ZXI7CiAgICB9CgogICAgLyoqCiAgICAgICogQ2hpbGQgY29udHJhY3QgY2FuIGVuYWJsZSB0byBwcm92aWRlIHRoZSBjb25kaXRpb24gd2hlbiB0aGUgdXBncmFkZSBjYW4gYmVndW4uCiAgICAgICovCiAgICBmdW5jdGlvbiBjYW5VcGdyYWRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuCnsKICAgIGFkZHJlc3MgcHVibGljIG1pbnRNYXN0ZXI7CgogICAgZXZlbnQgTG9nTWludFRva2VucyhhZGRyZXNzIHJlY2lwaWVudCwgdWludCBhbW91bnQsIHVpbnQgbmV3QmFsYW5jZSwgdWludCB0b3RhbFN1cHBseSk7CiAgICBldmVudCBMb2dVbm1pbnRUb2tlbnMoYWRkcmVzcyBob2RsZXIsIHVpbnQgYW1vdW50LCB1aW50IG5ld0JhbGFuY2UsIHVpbnQgdG90YWxTdXBwbHkpOwogICAgZXZlbnQgTG9nU2V0TWludE1hc3RlcihhZGRyZXNzIG9sZE1pbnRNYXN0ZXIsIGFkZHJlc3MgbmV3TWludE1hc3Rlcik7CgogICAgZnVuY3Rpb24gTWludGFibGVUb2tlbihhZGRyZXNzIF9taW50TWFzdGVyKSB7CiAgICAgICAgbWludE1hc3RlciA9IF9taW50TWFzdGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1pbnRNYXN0ZXIoYWRkcmVzcyBuZXdNaW50TWFzdGVyKQogICAgICAgIHJldHVybnMgKGJvb2wgb2spCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pbnRNYXN0ZXIpOwoKICAgICAgICBhZGRyZXNzIG9sZE1pbnRNYXN0ZXIgPSBtaW50TWFzdGVyOwogICAgICAgIG1pbnRNYXN0ZXIgPSBuZXdNaW50TWFzdGVyOwoKICAgICAgICBMb2dTZXRNaW50TWFzdGVyKG9sZE1pbnRNYXN0ZXIsIG1pbnRNYXN0ZXIpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRUb2tlbnMoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgYW1vdW50KQogICAgICAgIHJldHVybnMgKGJvb2wgb2spCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pbnRNYXN0ZXIpOwogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CgogICAgICAgIGJhbGFuY2VzW3JlY2lwaWVudF0gPSBiYWxhbmNlc1tyZWNpcGllbnRdLnNhZmVBZGQoYW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnNhZmVBZGQoYW1vdW50KTsKCiAgICAgICAgTG9nTWludFRva2VucyhyZWNpcGllbnQsIGFtb3VudCwgYmFsYW5jZXNbcmVjaXBpZW50XSwgdG90YWxTdXBwbHkpOwogICAgICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIHJlY2lwaWVudCwgYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiB1bm1pbnRUb2tlbnMoYWRkcmVzcyBob2RsZXIsIHVpbnQgYW1vdW50KQogICAgICAgIHJldHVybnMgKGJvb2wgb2spCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG1pbnRNYXN0ZXIpOwogICAgICAgIHJlcXVpcmUoYW1vdW50ID4gMCk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlc1tob2RsZXJdID49IGFtb3VudCk7CgogICAgICAgIGJhbGFuY2VzW2hvZGxlcl0gPSBiYWxhbmNlc1tob2RsZXJdLnNhZmVTdWIoYW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnNhZmVTdWIoYW1vdW50KTsKCiAgICAgICAgTG9nVW5taW50VG9rZW5zKGhvZGxlciwgYW1vdW50LCBiYWxhbmNlc1tob2RsZXJdLCB0b3RhbFN1cHBseSk7CiAgICAgICAgVHJhbnNmZXIoaG9kbGVyLCBhZGRyZXNzKDApLCBhbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CgoKY29udHJhY3QgU2lnVG9rZW4gaXMgVXBncmFkZWFibGVUb2tlbiwgTWludGFibGVUb2tlbgp7CiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiU2lnbmFscyI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJTSUciOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlQ29udHJhY3Q7CiAgICBib29sIHB1YmxpYyBjcm93ZHNhbGVDb21wbGV0ZWQ7CgogICAgZnVuY3Rpb24gU2lnVG9rZW4oKQogICAgICAgIFVwZ3JhZGVhYmxlVG9rZW4obXNnLnNlbmRlcikKICAgICAgICBNaW50YWJsZVRva2VuKG1zZy5zZW5kZXIpCiAgICB7CiAgICAgICAgY3Jvd2RzYWxlQ29udHJhY3QgPSBtc2cuc2VuZGVyOwogICAgICAgIHRvdGFsU3VwcGx5ID0gMDsgLy8gd2UgbWludCBkdXJpbmcgdGhlIGNyb3dkc2FsZSwgc28gdG90YWxTdXBwbHkgbXVzdCBzdGFydCBhdCAwCiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICByZXF1aXJlKGNyb3dkc2FsZUNvbXBsZXRlZCk7CiAgICAgICAgcmV0dXJuIFN0YW5kYXJkVG9rZW4udHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgewogICAgICAgIHJlcXVpcmUoY3Jvd2RzYWxlQ29tcGxldGVkKTsKICAgICAgICByZXR1cm4gU3RhbmRhcmRUb2tlbi50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVDb21wbGV0ZWQpOwogICAgICAgIHJldHVybiBTdGFuZGFyZFRva2VuLmFwcHJvdmUoc3BlbmRlciwgdmFsdWUpOwogICAgfQoKICAgIC8vIFRoaXMgaXMgY2FsbGVkIHRvIHVubG9jayB0b2tlbnMgb25jZSB0aGUgY3Jvd2RzYWxlIChhbmQgc3Vic2VxdWVudCBhdWRpdCArIGxlZ2FsIHByb2Nlc3MpIGFyZQogICAgLy8gY29tcGxldGVkLiAgV2UgZG9uJ3Qgd2FudCBwZW9wbGUgYnV5aW5nIHRva2VucyBkdXJpbmcgdGhlIHNhbGUgYW5kIHRoZW4gaW1tZWRpYXRlbHkgc3RhcnRpbmcKICAgIC8vIHRvIHRyYWRlIHRoZW0uICBTZWUgQ3Jvd2RzYWxlOjpmaW5hbGl6ZUNyb3dkc2FsZSgpLgogICAgZnVuY3Rpb24gc2V0Q3Jvd2RzYWxlQ29tcGxldGVkKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjcm93ZHNhbGVDb250cmFjdCk7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVDb21wbGV0ZWQgPT0gZmFsc2UpOwoKICAgICAgICBjcm93ZHNhbGVDb21wbGV0ZWQgPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogRVJDMjAgYXBwcm92ZUFuZENhbGwgZXh0ZW5zaW9uCiAgICAgKgogICAgICogQXBwcm92ZXMgYW5kIHRoZW4gY2FsbHMgdGhlIHJlY2VpdmluZyBjb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgcmVxdWlyZShjcm93ZHNhbGVDb21wbGV0ZWQpOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgLy9jYWxsIHRoZSByZWNlaXZlQXBwcm92YWwgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0IHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0IGhhdmUgdG8gaW5jbHVkZSBhIGNvbnRyYWN0IGluIGhlcmUganVzdCBmb3IgdGhpcy4KICAgICAgICAvL3JlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW5Db250cmFjdCwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICAvL2l0IGlzIGFzc3VtZWQgd2hlbiBvbmUgZG9lcyB0aGlzIHRoYXQgdGhlIGNhbGwgKnNob3VsZCogc3VjY2VlZCwgb3RoZXJ3aXNlIG9uZSB3b3VsZCB1c2UgdmFuaWxsYSBhcHByb3ZlIGluc3RlYWQuCiAgICAgICAgcmVxdWlyZShfc3BlbmRlci5jYWxsKGJ5dGVzNChieXRlczMyKGtlY2NhazI1NigicmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MsdWludDI1NixhZGRyZXNzLGJ5dGVzKSIpKSksIG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSkpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9'.
	

]
