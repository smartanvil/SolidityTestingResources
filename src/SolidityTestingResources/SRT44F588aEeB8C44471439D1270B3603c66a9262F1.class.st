Class {
	#name : #SRT44F588aEeB8C44471439D1270B3603c66a9262F1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT44F588aEeB8C44471439D1270B3603c66a9262F1 >> base64 [
	^ ''.
	

]
