Class {
	#name : #SRT16c452375d23d49ec94eb0743c7a644a17e48e2e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT16c452375d23d49ec94eb0743c7a644a17e48e2e >> base64 [
	^ ''.
	

]
