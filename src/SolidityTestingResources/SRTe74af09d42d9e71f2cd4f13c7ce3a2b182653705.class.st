Class {
	#name : #SRTe74af09d42d9e71f2cd4f13c7ce3a2b182653705,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe74af09d42d9e71f2cd4f13c7ce3a2b182653705 >> base64 [
	^ ''.
	

]
