Class {
	#name : #SRT118827C3da7ABEf62c3899531fCF75478DAd5a4A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT118827C3da7ABEf62c3899531fCF75478DAd5a4A >> base64 [
	^ ''.
	

]
