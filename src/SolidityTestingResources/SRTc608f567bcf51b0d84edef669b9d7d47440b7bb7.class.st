Class {
	#name : #SRTc608f567bcf51b0d84edef669b9d7d47440b7bb7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc608f567bcf51b0d84edef669b9d7d47440b7bb7 >> base64 [
	^ ''.
	

]
