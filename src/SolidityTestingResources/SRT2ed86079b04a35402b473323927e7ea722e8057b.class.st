Class {
	#name : #SRT2ed86079b04a35402b473323927e7ea722e8057b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2ed86079b04a35402b473323927e7ea722e8057b >> base64 [
	^ ''.
	

]
