Class {
	#name : #SRTd275b50f71badf4fa2f911e80e1e420730ab403e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd275b50f71badf4fa2f911e80e1e420730ab403e >> base64 [
	^ ''.
	

]
