Class {
	#name : #SRT89c1b3807d4c67df034fffb62f3509561218d30b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT89c1b3807d4c67df034fffb62f3509561218d30b >> base64 [
	^ ''.
	

]
