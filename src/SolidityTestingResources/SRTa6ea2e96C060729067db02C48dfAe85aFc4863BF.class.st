Class {
	#name : #SRTa6ea2e96C060729067db02C48dfAe85aFc4863BF,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6ea2e96C060729067db02C48dfAe85aFc4863BF >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICAvKioKICAgICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgICAqLwogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAgICovCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgICAqLwogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKY29udHJhY3QgRXRoYXJlYSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIHN0cnVjdCBBcmVhIHsKICAgICAgICBzdHJpbmcgaWQ7CiAgICAgICAgdWludCBwcmljZTsKICAgICAgICBhZGRyZXNzIG93bmVyOwogICAgICAgIHVpbnQgbGFzdFVwZGF0ZTsKICAgIH0KCiAgICBhZGRyZXNzIG1hbmFnZXI7CiAgICBBcmVhW10gcHVibGljIHNvbGRBcmVhczsKICAgIG1hcHBpbmcoc3RyaW5nID0+IGFkZHJlc3MpIGFyZWFJZFRvT3duZXI7CiAgICBtYXBwaW5nKHN0cmluZyA9PiB1aW50KSBhcmVhSWRUb0luZGV4OwogICAgbWFwcGluZyhzdHJpbmcgPT4gYm9vbCkgZW5hYmxlZEFyZWFzOwogICAgdWludCBwdWJsaWMgZGVmYXVsdFByaWNlID0gMC4wMSBldGhlcjsKCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtYW5hZ2VyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgcGVyY2VudGFnZSh1aW50IHBlcmNlbnRzKSB7CiAgICAgICAgcmVxdWlyZShwZXJjZW50cyA+PSAwICYmIHBlcmNlbnRzIDw9IDEwMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBFdGhhcmVhKCkgcHVibGljIHsKICAgICAgICBtYW5hZ2VyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoc3RyaW5nIGFyZWFJZCkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKCFpc0NvbnRyYWN0KG1zZy5zZW5kZXIpKTsKICAgICAgICByZXF1aXJlKGFyZWFJZFRvT3duZXJbYXJlYUlkXSAhPSBtc2cuc2VuZGVyKTsKICAgICAgICByZXF1aXJlKGVuYWJsZWRBcmVhc1thcmVhSWRdKTsKICAgICAgICBpZiAoYXJlYUlkVG9Pd25lclthcmVhSWRdID09IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgZmlyc3RCdXkoYXJlYUlkKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidXlGcm9tT3duZXIoYXJlYUlkKTsKICAgICAgICB9CiAgICAgICAgbWFuYWdlci50cmFuc2ZlcihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpcnN0QnV5KHN0cmluZyBhcmVhSWQpIHByaXZhdGUgewogICAgICAgIHVpbnQgcHJpY2VSaXNlUGVyY2VudDsKICAgICAgICAocHJpY2VSaXNlUGVyY2VudCwpID0gZ2V0UHJpY2VSaXNlQW5kRmVlUGVyY2VudChkZWZhdWx0UHJpY2UpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID09IGRlZmF1bHRQcmljZSk7CiAgICAgICAgQXJlYSBtZW1vcnkgbmV3QXJlYSA9IEFyZWEoewogICAgICAgICAgICBpZDogYXJlYUlkLAogICAgICAgICAgICBwcmljZTogZGVmYXVsdFByaWNlLmRpdigxMDApLm11bChwcmljZVJpc2VQZXJjZW50LmFkZCgxMDApKSwKICAgICAgICAgICAgb3duZXI6IG1zZy5zZW5kZXIsCiAgICAgICAgICAgIGxhc3RVcGRhdGU6IG5vdwogICAgICAgICAgICB9KTsKCiAgICAgICAgdWludCBpbmRleCA9IHNvbGRBcmVhcy5wdXNoKG5ld0FyZWEpLnN1YigxKTsKICAgICAgICBhcmVhSWRUb0luZGV4W2FyZWFJZF0gPSBpbmRleDsKICAgICAgICBhcmVhSWRUb093bmVyW2FyZWFJZF0gPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eUZyb21Pd25lcihzdHJpbmcgYXJlYUlkKSBwcml2YXRlIHsKICAgICAgICBBcmVhIHN0b3JhZ2UgYXJlYVRvQ2hhbmdlID0gc29sZEFyZWFzW2FyZWFJZFRvSW5kZXhbYXJlYUlkXV07CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPT0gYXJlYVRvQ2hhbmdlLnByaWNlKTsKCiAgICAgICAgdWludCBwcmljZVJpc2VQZXJjZW50OwogICAgICAgIHVpbnQgdHJhbnNhY3Rpb25GZWVQZXJjZW50OwogICAgICAgIChwcmljZVJpc2VQZXJjZW50LCB0cmFuc2FjdGlvbkZlZVBlcmNlbnQpID0gZ2V0UHJpY2VSaXNlQW5kRmVlUGVyY2VudChhcmVhVG9DaGFuZ2UucHJpY2UpOwogICAgICAgIGFkZHJlc3Mgb2xkT3duZXIgPSBhcmVhSWRUb093bmVyW2FyZWFJZF07CiAgICAgICAgdWludCBwYXltZW50ID0gbXNnLnZhbHVlLmRpdigxMDApLm11bCh1aW50KDEwMCkuc3ViKHRyYW5zYWN0aW9uRmVlUGVyY2VudCkpOwogICAgICAgIHVpbnQgbmV3UHJpY2UgPSBhcmVhVG9DaGFuZ2UucHJpY2UuZGl2KDEwMCkubXVsKHByaWNlUmlzZVBlcmNlbnQuYWRkKDEwMCkpOwoKICAgICAgICBhcmVhVG9DaGFuZ2Uub3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGFyZWFUb0NoYW5nZS5sYXN0VXBkYXRlID0gbm93OwogICAgICAgIGFyZWFJZFRvT3duZXJbYXJlYUlkXSA9IG1zZy5zZW5kZXI7CiAgICAgICAgYXJlYVRvQ2hhbmdlLnByaWNlID0gbmV3UHJpY2U7CiAgICAgICAgb2xkT3duZXIudHJhbnNmZXIocGF5bWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U29sZEFyZWFzQ291bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHNvbGRBcmVhcy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QmFsYW5jZSgpIHB1YmxpYyBvbmx5T3duZXIgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGFkZHJlc3ModGhpcykuYmFsYW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBcmVhT3duZXIoc3RyaW5nIGFyZWFJZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBhcmVhSWRUb093bmVyW2FyZWFJZF07CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QXJlYUluZGV4KHN0cmluZyBhcmVhSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGFyZWFJbmRleCA9IGFyZWFJZFRvSW5kZXhbYXJlYUlkXTsKICAgICAgICBBcmVhIG1lbW9yeSBhcmVhID0gc29sZEFyZWFzW2FyZWFJbmRleF07CiAgICAgICAgcmVxdWlyZShrZWNjYWsyNTYoYXJlYS5pZCkgPT0ga2VjY2FrMjU2KGFyZWFJZCkpOwogICAgICAgIHJldHVybiBhcmVhSW5kZXg7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RGVmYXVsdFByaWNlKHVpbnQgbmV3UHJpY2UpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGRlZmF1bHRQcmljZSA9IG5ld1ByaWNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShhZGRyZXNzKHRoaXMpLmJhbGFuY2UgPiAwKTsKICAgICAgICBtYW5hZ2VyLnRyYW5zZmVyKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJpY2VSaXNlQW5kRmVlUGVyY2VudCh1aW50IGN1cnJlbnRQcmljZSkKICAgIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQsIHVpbnQpCiAgICB7CiAgICAgICAgaWYgKGN1cnJlbnRQcmljZSA+PSAwLjAxIGV0aGVyICYmIGN1cnJlbnRQcmljZSA8IDAuMTUgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuICgxMDAsIDEwKTsKICAgICAgICB9CgogICAgICAgIGlmIChjdXJyZW50UHJpY2UgPj0gMC4xNSBldGhlciAmJiBjdXJyZW50UHJpY2UgPCAxIGV0aGVyKSB7CiAgICAgICAgICAgIHJldHVybiAoNjAsIDYpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1cnJlbnRQcmljZSA+PSAxIGV0aGVyICYmIGN1cnJlbnRQcmljZSA8IDQgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuICg0MCwgNSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY3VycmVudFByaWNlID49IDQgZXRoZXIgJiYgY3VycmVudFByaWNlIDwgMTAgZXRoZXIpIHsKICAgICAgICAgICAgcmV0dXJuICgzMCwgNCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY3VycmVudFByaWNlID49IDEwIGV0aGVyKSB7CiAgICAgICAgICAgIHJldHVybiAoMjUsIDMpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVBcmVhKHN0cmluZyBhcmVhSWQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoIWVuYWJsZWRBcmVhc1thcmVhSWRdKTsKICAgICAgICBlbmFibGVkQXJlYXNbYXJlYUlkXSA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gaXNBcmVhRW5hYmxlZChzdHJpbmcgYXJlYUlkKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGVuYWJsZWRBcmVhc1thcmVhSWRdOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyB1c2VyQWRkcmVzcykgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBzaXplOwogICAgICAgIGFzc2VtYmx5IHsgc2l6ZSA6PSBleHRjb2Rlc2l6ZSh1c2VyQWRkcmVzcykgfQogICAgICAgIHJldHVybiBzaXplID4gMDsKICAgIH0KfQ=='.
	

]
