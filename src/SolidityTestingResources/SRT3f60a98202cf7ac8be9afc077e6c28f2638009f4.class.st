Class {
	#name : #SRT3f60a98202cf7ac8be9afc077e6c28f2638009f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f60a98202cf7ac8be9afc077e6c28f2638009f4 >> base64 [
	^ ''.
	

]
