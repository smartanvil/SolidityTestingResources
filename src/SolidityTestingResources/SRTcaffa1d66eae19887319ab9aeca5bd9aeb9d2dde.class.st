Class {
	#name : #SRTcaffa1d66eae19887319ab9aeca5bd9aeb9d2dde,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcaffa1d66eae19887319ab9aeca5bd9aeb9d2dde >> base64 [
	^ ''.
	

]
