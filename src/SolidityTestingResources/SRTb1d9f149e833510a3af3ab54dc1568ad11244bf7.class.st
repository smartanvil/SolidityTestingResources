Class {
	#name : #SRTb1d9f149e833510a3af3ab54dc1568ad11244bf7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb1d9f149e833510a3af3ab54dc1568ad11244bf7 >> base64 [
	^ ''.
	

]
