Class {
	#name : #SRT9546d1fa253c56f87a99aaaafd290e56424dcc5b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9546d1fa253c56f87a99aaaafd290e56424dcc5b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKiBAZGV2IENyb3dkc2FsZSBpcyBhIGJhc2UgY29udHJhY3QgZm9yIG1hbmFnaW5nIGEgdG9rZW4gY3Jvd2RzYWxlLgogKiBDcm93ZHNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KIAogCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cn0KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgdG9rZW5CYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZSh0b2tlbkJhbGFuY2VzW21zZy5zZW5kZXJdPj1fdmFsdWUpOwogICAgdG9rZW5CYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRva2VuQmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICB0b2tlbkJhbGFuY2VzW190b10gPSB0b2tlbkJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIHRva2VuQmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CmNvbnRyYWN0IEV0aGVlcmFUb2tlbiBpcyBCYXNpY1Rva2VuLE93bmFibGUgewoKICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgIAogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRVRIRUVSQSI7CiAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkVUQSI7CiAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBJTklUSUFMX1NVUFBMWSA9IDMwMDAwMDAwMDsKICAgZXZlbnQgRGVidWcoc3RyaW5nIG1lc3NhZ2UsIGFkZHJlc3MgYWRkciwgdWludDI1NiBudW1iZXIpOwogICAvKioKICAgKiBAZGV2IENvbnRydWN0b3IgdGhhdCBnaXZlcyBtc2cuc2VuZGVyIGFsbCBvZiBleGlzdGluZyB0b2tlbnMuCiAgICovCiAgICBmdW5jdGlvbiBFdGhlZXJhVG9rZW4oYWRkcmVzcyB3YWxsZXQpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHRvdGFsU3VwcGx5ID0gSU5JVElBTF9TVVBQTFkgKiAxMCAqKiAxODsKICAgICAgICB0b2tlbkJhbGFuY2VzW3dhbGxldF0gPSB0b3RhbFN1cHBseTsgICAvL1NpbmNlIHdlIGRpdmlkZWQgdGhlIHRva2VuIGludG8gMTBeMTggcGFydHMKICAgIH0KCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3Mgd2FsbGV0LCBhZGRyZXNzIGJ1eWVyLCB1aW50MjU2IHRva2VuQW1vdW50KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgcmVxdWlyZSh0b2tlbkJhbGFuY2VzW3dhbGxldF0gPj0gdG9rZW5BbW91bnQpOyAgICAgICAgICAgICAgIC8vIGNoZWNrcyBpZiBpdCBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgdG9rZW5CYWxhbmNlc1tidXllcl0gPSB0b2tlbkJhbGFuY2VzW2J1eWVyXS5hZGQodG9rZW5BbW91bnQpOyAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UKICAgICAgdG9rZW5CYWxhbmNlc1t3YWxsZXRdID0gdG9rZW5CYWxhbmNlc1t3YWxsZXRdLnN1Yih0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VidHJhY3RzIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UKICAgICAgVHJhbnNmZXIod2FsbGV0LCBidXllciwgdG9rZW5BbW91bnQpOwogICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1Yih0b2tlbkFtb3VudCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNob3dNeVRva2VuQmFsYW5jZShhZGRyZXNzIGFkZHIpIHB1YmxpYyB2aWV3IG9ubHlPd25lciByZXR1cm5zICh1aW50IHRva2VuQmFsYW5jZSkgewogICAgICAgIHRva2VuQmFsYW5jZSA9IHRva2VuQmFsYW5jZXNbYWRkcl07CiAgICAgICAgcmV0dXJuIHRva2VuQmFsYW5jZTsKICAgIH0KICAgIAp9CmNvbnRyYWN0IEV0aGVlcmFDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBFdGhlZXJhVG9rZW4gcHVibGljIHRva2VuOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAvLyBhZGRyZXNzIHdoZXJlIHRva2VucyBhcmUgZGVwb3NpdGVkIGFuZCBmcm9tIHdoZXJlIHdlIHNlbmQgdG9rZW5zIHRvIGJ1eWVycwogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlUGVyV2VpID0gMjAwMDsKCiAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogIC8vIGZsYWdzIHRvIHNob3cgd2hldGhlciBzb2Z0IGNhcCAvIGhhcmQgY2FwIGlzIHJlYWNoZWQKICBib29sIHB1YmxpYyBpc1NvZnRDYXBSZWFjaGVkID0gZmFsc2U7CiAgYm9vbCBwdWJsaWMgaXNIYXJkQ2FwUmVhY2hlZCA9IGZhbHNlOwogICAgCiAgLy90aGlzIGZsYWcgaXMgc2V0IHRvIHRydWUgd2hlbiBJQ08gZHVyYXRpb24gaXMgb3ZlciBhbmQgc29mdCBjYXAgaXMgbm90IHJlYWNoZWQgIAogIGJvb2wgcHVibGljIHJlZnVuZFRvQnV5ZXJzID0gZmFsc2U7CiAgICAKICAvLyBTb2Z0IGNhcCBvZiB0aGUgSUNPIGluIGV0aGVycyAgCiAgdWludDI1NiBwdWJsaWMgc29mdENhcCA9IDYwMDA7CiAgICAKICAvL0hhcmQgY2FwIG9mIHRoZSBJQ08gaW4gZXRoZXJzCiAgdWludDI1NiBwdWJsaWMgaGFyZENhcCA9IDEwNTAwMDsKICAKICAvL3RvdGFsIHRva2VucyB0aGF0IGhhdmUgYmVlbiBzb2xkICAKICB1aW50MjU2IHB1YmxpYyB0b2tlbnNfc29sZCA9IDA7CgogIC8vdG90YWwgdG9rZW5zIHRoYXQgYXJlIHRvIGJlIHNvbGQgLSB0aGlzIGlzIDcwJSBvZiB0aGUgdG90YWwgc3VwcGx5IGkuZS4gMzAwMDAwMDAwCiAgdWludCBtYXhUb2tlbnNGb3JTYWxlID0gMjEwMDAwMDAwOwogIAogIC8vdG9rZW5zIHRoYXQgYXJlIHJlc2VydmVkIGZvciB0aGUgZXRoZWVyYSB0ZWFtIC0gdGhpcyBpcyAzMCUgb2YgdGhlIHRvdGFsIHN1cHBseSAgCiAgdWludDI1NiBwdWJsaWMgdG9rZW5zRm9yUmVzZXJ2ZWRGdW5kID0gMDsKICB1aW50MjU2IHB1YmxpYyB0b2tlbnNGb3JBZHZpc29ycyA9IDA7CiAgdWludDI1NiBwdWJsaWMgdG9rZW5zRm9yRm91bmRlcnNBbmRUZWFtID0gMDsKICB1aW50MjU2IHB1YmxpYyB0b2tlbnNGb3JNYXJrZXRpbmcgPSAwOwogIHVpbnQyNTYgcHVibGljIHRva2Vuc0ZvclRvdXJuYW1lbnQgPSAwOwoKICBib29sIGV0aGVyc1NlbnRGb3JSZWZ1bmQgPSBmYWxzZTsKCiAgLy8gdGhlIGJ1eWVycyBvZiB0b2tlbnMgYW5kIHRoZSBhbW91bnQgb2YgZXRoZXJzIHRoZXkgc2VudCBpbgogIG1hcHBpbmcoYWRkcmVzcz0+dWludDI1NikgdXNlcnNUaGF0Qm91Z2h0RVRBOwogCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgogIGZ1bmN0aW9uIEV0aGVlcmFDcm93ZHNhbGUodWludDI1NiBfc3RhcnRUaW1lLCBhZGRyZXNzIF93YWxsZXQpIHB1YmxpYyB7CgogICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgIGVuZFRpbWUgPSBzdGFydFRpbWUgKyA2MCBkYXlzOwogICAgCiAgICByZXF1aXJlKGVuZFRpbWUgPj0gc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoX3dhbGxldCAhPSAweDApOwoKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICB0b2tlbiA9IGNyZWF0ZVRva2VuQ29udHJhY3Qod2FsbGV0KTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoYWRkcmVzcyB3YWxsKSBpbnRlcm5hbCByZXR1cm5zIChFdGhlZXJhVG9rZW4pIHsKICAgIHJldHVybiBuZXcgRXRoZWVyYVRva2VuKHdhbGwpOwogIH0KCiAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYnV5IHRva2VucwogIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICB9CgogIC8vZGV0ZXJtaW5lIHRoZSBib251cyB3aXRoIHJlc3BlY3QgdG8gdGltZSBlbGFwc2VkCiAgZnVuY3Rpb24gZGV0ZXJtaW5lQm9udXModWludCB0b2tlbnMpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBib251cykgewogICAgCiAgICB1aW50MjU2IHRpbWVFbGFwc2VkID0gbm93IC0gc3RhcnRUaW1lOwogICAgdWludDI1NiB0aW1lRWxhcHNlZEluRGF5cyA9IHRpbWVFbGFwc2VkLmRpdigxIGRheXMpOwogICAgCiAgICBpZiAodGltZUVsYXBzZWRJbkRheXMgPD0yOSkKICAgIHsKICAgICAgICAvL2Vhcmx5IHNhbGUKICAgICAgICAvL3ZhbGlkIGZvciA3IGRheXMgKDFzdCB3ZWVrKQogICAgICAgIC8vMzAwMDArIFRPS0VOIFBVUkNIQVNFIEFNT1VOVCAvIDMzJSBCT05VUwogICAgICAgIGlmICh0b2tlbnM+MzAwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vMzMlIGJvbnVzCiAgICAgICAgICAgIGJvbnVzID0gdG9rZW5zLm11bCgzMyk7CiAgICAgICAgICAgIGJvbnVzID0gYm9udXMuZGl2KDEwMCk7CiAgICAgICAgfQogICAgICAgIC8vMTAwMDArIFRPS0VOIFBVUkNIQVNFIEFNT1VOVCAvIDI2JSBCT05VUwogICAgICAgIGVsc2UgaWYgKHRva2Vucz4xMDAwMCAqMTAgKiogMTggJiYgdG9rZW5zPD0gMzAwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vMjYlIGJvbnVzCiAgICAgICAgICAgIGJvbnVzID0gdG9rZW5zLm11bCgyNik7CiAgICAgICAgICAgIGJvbnVzID0gYm9udXMuZGl2KDEwMCk7CiAgICAgICAgfQogICAgICAgIC8vMzAwMCsgVE9LRU4gUFVSQ0hBU0UgQU1PVU5UIC8gMjMlIEJPTlVTCiAgICAgICAgZWxzZSBpZiAodG9rZW5zPjMwMDAgKjEwICoqIDE4ICYmIHRva2Vuczw9IDEwMDAwICogMTAgKiogMTgpCiAgICAgICAgewogICAgICAgICAgICAvLzIzJSBib251cwogICAgICAgICAgICBib251cyA9IHRva2Vucy5tdWwoMjMpOwogICAgICAgICAgICBib251cyA9IGJvbnVzLmRpdigxMDApOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLzc1KyBUT0tFTiBQVVJDSEFTRSBBTU9VTlQgLyAyMCUgQk9OVVMKICAgICAgICBlbHNlIGlmICh0b2tlbnM+PTc1ICoxMCAqKiAxOCAmJiB0b2tlbnM8PSAzMDAwICogMTAgKiogMTgpCiAgICAgICAgewogICAgICAgICAgICAvLzIwJSBib251cwogICAgICAgICAgICBib251cyA9IHRva2Vucy5tdWwoMjApOwogICAgICAgICAgICBib251cyA9IGJvbnVzLmRpdigxMDApOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgIHsKICAgICAgICAgICAgYm9udXMgPSAwOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHRpbWVFbGFwc2VkSW5EYXlzPjI5ICYmIHRpbWVFbGFwc2VkSW5EYXlzIDw9NDkpCiAgICB7CiAgICAgICAgLy9zYWxlCiAgICAgICAgLy9mcm9tIDd0aCBkYXkgdGlsbCA0OXRoIGRheSAodG90YWwgNDIgZGF5cyBvciA2IHdlZWtzKQogICAgICAgIC8vMzAwMDArIFRPS0VOIFBVUkNIQVNFIEFNT1VOVCAvIDE1JSBCT05VUwogICAgICAgIGlmICh0b2tlbnM+MzAwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vMTUlIGJvbnVzCiAgICAgICAgICAgIGJvbnVzID0gdG9rZW5zLm11bCgxNSk7CiAgICAgICAgICAgIGJvbnVzID0gYm9udXMuZGl2KDEwMCk7CiAgICAgICAgfQogICAgICAgIC8vMTAwMDArIFRPS0VOIFBVUkNIQVNFIEFNT1VOVCAvIDEwJSBCT05VUwogICAgICAgIGVsc2UgaWYgKHRva2Vucz4xMDAwMCAqMTAgKiogMTggJiYgdG9rZW5zPD0gMzAwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vMTAlIGJvbnVzCiAgICAgICAgICAgIGJvbnVzID0gdG9rZW5zLm11bCgxMCk7CiAgICAgICAgICAgIGJvbnVzID0gYm9udXMuZGl2KDEwMCk7CiAgICAgICAgfQogICAgICAgIC8vMzAwMCsgVE9LRU4gUFVSQ0hBU0UgQU1PVU5UIC8gNSUgQk9OVVMKICAgICAgICBlbHNlIGlmICh0b2tlbnM+MzAwMCAqMTAgKiogMTggJiYgdG9rZW5zPD0gMTAwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vNSUgYm9udXMKICAgICAgICAgICAgYm9udXMgPSB0b2tlbnMubXVsKDUpOwogICAgICAgICAgICBib251cyA9IGJvbnVzLmRpdigxMDApOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLzc1KyBUT0tFTiBQVVJDSEFTRSBBTU9VTlQgLyAzJSBCT05VUwogICAgICAgIGVsc2UgaWYgKHRva2Vucz49NzUgKjEwICoqIDE4ICYmIHRva2Vuczw9IDMwMDAgKiAxMCAqKiAxOCkKICAgICAgICB7CiAgICAgICAgICAgIC8vMyUgYm9udXMKICAgICAgICAgICAgYm9udXMgPSB0b2tlbnMubXVsKDMpOwogICAgICAgICAgICBib251cyA9IGJvbnVzLmRpdigxMDApOwogICAgICAgIH0KICAgICAgICBlbHNlIAogICAgICAgIHsKICAgICAgICAgICAgYm9udXMgPSAwOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAvL25vIGJvbnVzZXMgYWZ0ZXIgN3RoIHdlZWsgaS5lLiA0OSBkYXlzCiAgICAgICAgYm9udXMgPSAwOwogICAgfQogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgLy8gTWluaW11bSBwdXJjaGFzZSBjYW4gYmUgb2YgNzUgRVRBIHRva2VucwogIAogIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAKICAvL3Rva2VucyBub3QgdG8gYmUgc2VudCB0byAweDAKICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IDB4MCk7CgogIGlmKGhhc0VuZGVkKCkgJiYgIWlzSGFyZENhcFJlYWNoZWQpCiAgewogICAgICBpZiAoIWlzU29mdENhcFJlYWNoZWQpCiAgICAgICAgcmVmdW5kVG9CdXllcnMgPSB0cnVlOwogICAgICBidXJuUmVtYWluaW5nVG9rZW5zKCk7CiAgICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQogIAogIGVsc2UKICB7CiAgICAvL3RoZSBwdXJjaGFzZSBzaG91bGQgYmUgd2l0aGluIGR1cmF0aW9uIGFuZCBub24gemVybwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgCiAgICAvLyBhbW91bnQgc2VudCBieSB0aGUgdXNlcgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgc29sZAogICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGVQZXJXZWkpOwogIAogICAgcmVxdWlyZSAodG9rZW5zPj03NSAqIDEwICoqIDE4KTsKICAgIAogICAgLy9EZXRlcm1pbmUgYm9udXMKICAgIHVpbnQgYm9udXMgPSBkZXRlcm1pbmVCb251cyh0b2tlbnMpOwogICAgdG9rZW5zID0gdG9rZW5zLmFkZChib251cyk7CiAgCiAgICAvL2Nhbid0IHNhbGUgdG9rZW5zIG1vcmUgdGhhbiAyMTAwMDAwMDAwMAogICAgcmVxdWlyZSh0b2tlbnNfc29sZCArIHRva2VucyA8PSBtYXhUb2tlbnNGb3JTYWxlICogMTAgKiogMTgpOwogIAogICAgLy8zMCUgb2YgdGhlIHRva2VucyBiZWluZyBzb2xkIGFyZSBiZWluZyBhY2N1bXVsYXRlZCBmb3IgdGhlIGV0aGVlcmEgdGVhbQogICAgdXBkYXRlVG9rZW5zRm9yRXRoZWVyYVRlYW0odG9rZW5zKTsKCiAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAKICAgIAogICAgaWYgKHdlaVJhaXNlZCA+PSBzb2Z0Q2FwICogMTAgKiogMTggJiYgIWlzU29mdENhcFJlYWNoZWQpCiAgICB7CiAgICAgIGlzU29mdENhcFJlYWNoZWQgPSB0cnVlOwogICAgfQogIAogICAgaWYgKHdlaVJhaXNlZCA+PSBoYXJkQ2FwICogMTAgKiogMTggJiYgIWlzSGFyZENhcFJlYWNoZWQpCiAgICAgIGlzSGFyZENhcFJlYWNoZWQgPSB0cnVlOwogICAgCiAgICB0b2tlbi5taW50KHdhbGxldCwgYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICAKICAgIHVpbnQgb2xkZXJBbW91bnQgPSB1c2Vyc1RoYXRCb3VnaHRFVEFbYmVuZWZpY2lhcnldOwogICAgdXNlcnNUaGF0Qm91Z2h0RVRBW2JlbmVmaWNpYXJ5XSA9IHdlaUFtb3VudCArIG9sZGVyQW1vdW50OwogICAgCiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CiAgICAKICAgIHRva2Vuc19zb2xkID0gdG9rZW5zX3NvbGQuYWRkKHRva2Vucyk7CiAgICBmb3J3YXJkRnVuZHMoKTsKICB9CiB9CgogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbm93ID4gZW5kVGltZTsKICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1cm5SZW1haW5pbmdUb2tlbnMoKSBpbnRlcm5hbAogICAgewogICAgICAgIC8vYnVybiBhbGwgdGhlIHVuc29sZCB0b2tlbnMgYXMgc29vbiBhcyB0aGUgSUNPIGlzIGVuZGVkCiAgICAgICAgdWludCBiYWxhbmNlID0gdG9rZW4uc2hvd015VG9rZW5CYWxhbmNlKHdhbGxldCk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlPjApOwogICAgICAgIHVpbnQgdG9rZW5zRm9yVGVhbSA9IHRva2Vuc0ZvclJlc2VydmVkRnVuZCArIHRva2Vuc0ZvckZvdW5kZXJzQW5kVGVhbSArIHRva2Vuc0ZvckFkdmlzb3JzICt0b2tlbnNGb3JNYXJrZXRpbmcgKyB0b2tlbnNGb3JUb3VybmFtZW50OwogICAgICAgIHVpbnQgdG9rZW5zVG9CdXJuID0gYmFsYW5jZS5zdWIodG9rZW5zRm9yVGVhbSk7CiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZSA+PXRva2Vuc1RvQnVybik7CiAgICAgICAgYWRkcmVzcyBidXJuQWRkcmVzcyA9IDB4MDsKICAgICAgICB0b2tlbi5taW50KHdhbGxldCxidXJuQWRkcmVzcyx0b2tlbnNUb0J1cm4pOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKSBwdWJsaWMgCiAgICB7CiAgICAgICAgcmVxdWlyZShldGhlcnNTZW50Rm9yUmVmdW5kICYmIHVzZXJzVGhhdEJvdWdodEVUQVttc2cuc2VuZGVyXT4wKTsKICAgICAgICB1aW50MjU2IGV0aGVyc1NlbnQgPSB1c2Vyc1RoYXRCb3VnaHRFVEFbbXNnLnNlbmRlcl07CiAgICAgICAgcmVxdWlyZSAod2FsbGV0LmJhbGFuY2UgPj0gZXRoZXJzU2VudCk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhlcnNTZW50KTsKICAgICAgICB1aW50MjU2IHRva2Vuc0lIYXZlID0gdG9rZW4uc2hvd015VG9rZW5CYWxhbmNlKG1zZy5zZW5kZXIpOwogICAgICAgIHRva2VuLm1pbnQobXNnLnNlbmRlciwweDAsdG9rZW5zSUhhdmUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBkZWJpdEFtb3VudFRvUmVmdW5kKCkgcHVibGljIHBheWFibGUgCiAgICB7CiAgICAgICAgcmVxdWlyZShoYXNFbmRlZCgpICYmIG1zZy5zZW5kZXIgPT0gd2FsbGV0ICYmICFpc1NvZnRDYXBSZWFjaGVkICYmICFldGhlcnNTZW50Rm9yUmVmdW5kKTsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PXdlaVJhaXNlZCk7CiAgICAgICAgZXRoZXJzU2VudEZvclJlZnVuZCA9IHRydWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZVRva2Vuc0ZvckV0aGVlcmFUZWFtKHVpbnQyNTYgdG9rZW5zKSBpbnRlcm5hbCAKICAgIHsKICAgICAgICB1aW50MjU2IHJlc2VydmVkRnVuZFRva2VuczsKICAgICAgICB1aW50MjU2IGZvdW5kZXJzQW5kVGVhbVRva2VuczsKICAgICAgICB1aW50MjU2IGFkdmlzb3JzVG9rZW5zOwogICAgICAgIHVpbnQyNTYgbWFya2V0aW5nVG9rZW5zOwogICAgICAgIHVpbnQyNTYgdG91cm5hbWVudFRva2VuczsKICAgICAgICAKICAgICAgICAvLzEwJSBvZiB0b2tlbnMgZm9yIHJlc2VydmVkIGZ1bmQKICAgICAgICByZXNlcnZlZEZ1bmRUb2tlbnMgPSB0b2tlbnMubXVsKDEwKTsKICAgICAgICByZXNlcnZlZEZ1bmRUb2tlbnMgPSByZXNlcnZlZEZ1bmRUb2tlbnMuZGl2KDEwMCk7CiAgICAgICAgdG9rZW5zRm9yUmVzZXJ2ZWRGdW5kID0gdG9rZW5zRm9yUmVzZXJ2ZWRGdW5kLmFkZChyZXNlcnZlZEZ1bmRUb2tlbnMpOwogICAgCiAgICAgICAgLy8xNSUgb2YgdG9rZW5zIGZvciBmb3VuZGVycyBhbmQgdGVhbSAgICAKICAgICAgICBmb3VuZGVyc0FuZFRlYW1Ub2tlbnM9dG9rZW5zLm11bCgxNSk7CiAgICAgICAgZm91bmRlcnNBbmRUZWFtVG9rZW5zPSBmb3VuZGVyc0FuZFRlYW1Ub2tlbnMuZGl2KDEwMCk7CiAgICAgICAgdG9rZW5zRm9yRm91bmRlcnNBbmRUZWFtID0gdG9rZW5zRm9yRm91bmRlcnNBbmRUZWFtLmFkZChmb3VuZGVyc0FuZFRlYW1Ub2tlbnMpOwogICAgCiAgICAgICAgLy8zJSBvZiB0b2tlbnMgZm9yIGFkdmlzb3JzCiAgICAgICAgYWR2aXNvcnNUb2tlbnM9dG9rZW5zLm11bCgzKTsKICAgICAgICBhZHZpc29yc1Rva2Vucz0gYWR2aXNvcnNUb2tlbnMuZGl2KDEwMCk7CiAgICAgICAgdG9rZW5zRm9yQWR2aXNvcnM9IHRva2Vuc0ZvckFkdmlzb3JzLmFkZChhZHZpc29yc1Rva2Vucyk7CiAgICAKICAgICAgICAvLzElIG9mIHRva2VucyBmb3IgbWFya2V0aW5nCiAgICAgICAgbWFya2V0aW5nVG9rZW5zID0gdG9rZW5zLm11bCgxKTsKICAgICAgICBtYXJrZXRpbmdUb2tlbnM9IG1hcmtldGluZ1Rva2Vucy5kaXYoMTAwKTsKICAgICAgICB0b2tlbnNGb3JNYXJrZXRpbmc9IHRva2Vuc0Zvck1hcmtldGluZy5hZGQobWFya2V0aW5nVG9rZW5zKTsKICAgICAgICAKICAgICAgICAvLzElIG9mIHRva2VucyBmb3IgdG91cm5hbWVudCAKICAgICAgICB0b3VybmFtZW50VG9rZW5zPXRva2Vucy5tdWwoMSk7CiAgICAgICAgdG91cm5hbWVudFRva2Vucz0gdG91cm5hbWVudFRva2Vucy5kaXYoMTAwKTsKICAgICAgICB0b2tlbnNGb3JUb3VybmFtZW50PSB0b2tlbnNGb3JUb3VybmFtZW50LmFkZCh0b3VybmFtZW50VG9rZW5zKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnNGb3JFdGhlZXJhVGVhbSh1aW50MjU2IHdob3NlVG9rZW5zVG9XaXRoZHJhdyxhZGRyZXNzW10gd2hlcmVUb1NlbmRUb2tlbnMpIHB1YmxpYyB7CiAgICAgICAgLy8xIHJlc2VydmVkIGZ1bmQsIDIgZm9yIGZvdW5kZXJzIGFuZCB0ZWFtLCAzIGZvciBhZHZpc29ycywgNCBmb3IgbWFya2V0aW5nLCA1IGZvciB0b3VybmFtZW50CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHdhbGxldCAmJiBub3c+PWVuZFRpbWUpOwogICAgICAgIHVpbnQyNTYgbG9ja1BlcmlvZCA9IDA7CiAgICAgICAgdWludDI1NiB0aW1lUGFzc2VkID0gbm93IC0gZW5kVGltZTsKICAgICAgICB1aW50MjU2IHRva2Vuc1RvU2VuZCA9IDA7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICBpZiAod2hvc2VUb2tlbnNUb1dpdGhkcmF3ID09IDEpCiAgICAgICAgewogICAgICAgICAgLy8xNSBtb250aHMgbG9ja3VwIHBlcmlvZAogICAgICAgICAgbG9ja1BlcmlvZCA9IDE1IGRheXMgKiAzMDsKICAgICAgICAgIHJlcXVpcmUodGltZVBhc3NlZCA+PSBsb2NrUGVyaW9kKTsKICAgICAgICAgIHJlcXVpcmUgKHRva2Vuc0ZvclJlc2VydmVkRnVuZCA+MCk7CiAgICAgICAgICAvL2FsbG93IHdpdGhkcmF3YWwKICAgICAgICAgIHRva2Vuc1RvU2VuZCA9IHRva2Vuc0ZvclJlc2VydmVkRnVuZC5kaXYod2hlcmVUb1NlbmRUb2tlbnMubGVuZ3RoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgZm9yIChpPTA7aTx3aGVyZVRvU2VuZFRva2Vucy5sZW5ndGg7aSsrKQogICAgICAgICAgewogICAgICAgICAgICB0b2tlbi5taW50KHdhbGxldCx3aGVyZVRvU2VuZFRva2Vuc1tpXSx0b2tlbnNUb1NlbmQpOwogICAgICAgICAgfQogICAgICAgICAgdG9rZW5zRm9yUmVzZXJ2ZWRGdW5kID0gMDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2hvc2VUb2tlbnNUb1dpdGhkcmF3ID09IDIpCiAgICAgICAgewogICAgICAgICAgLy8xMCBtb250aHMgbG9ja3VwIHBlcmlvZAogICAgICAgICAgbG9ja1BlcmlvZCA9IDEwIGRheXMgKiAzMDsKICAgICAgICAgIHJlcXVpcmUodGltZVBhc3NlZCA+PSBsb2NrUGVyaW9kKTsKICAgICAgICAgIHJlcXVpcmUodG9rZW5zRm9yRm91bmRlcnNBbmRUZWFtID4gMCk7CiAgICAgICAgICAvL2FsbG93IHdpdGhkcmF3YWwKICAgICAgICAgIHRva2Vuc1RvU2VuZCA9IHRva2Vuc0ZvckZvdW5kZXJzQW5kVGVhbS5kaXYod2hlcmVUb1NlbmRUb2tlbnMubGVuZ3RoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgZm9yIChpPTA7aTx3aGVyZVRvU2VuZFRva2Vucy5sZW5ndGg7aSsrKQogICAgICAgICAgewogICAgICAgICAgICB0b2tlbi5taW50KHdhbGxldCx3aGVyZVRvU2VuZFRva2Vuc1tpXSx0b2tlbnNUb1NlbmQpOwogICAgICAgICAgfSAgICAgICAgICAgIAogICAgICAgICAgdG9rZW5zRm9yRm91bmRlcnNBbmRUZWFtID0gMDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2hvc2VUb2tlbnNUb1dpdGhkcmF3ID09IDMpCiAgICAgICAgewogICAgICAgICAgICByZXF1aXJlICh0b2tlbnNGb3JBZHZpc29ycyA+IDApOwogICAgICAgICAgLy9hbGxvdyB3aXRoZHJhd2FsCiAgICAgICAgICB0b2tlbnNUb1NlbmQgPSB0b2tlbnNGb3JBZHZpc29ycy5kaXYod2hlcmVUb1NlbmRUb2tlbnMubGVuZ3RoKTsgICAgICAgIAogICAgICAgICAgZm9yIChpPTA7aTx3aGVyZVRvU2VuZFRva2Vucy5sZW5ndGg7aSsrKQogICAgICAgICAgewogICAgICAgICAgICB0b2tlbi5taW50KHdhbGxldCx3aGVyZVRvU2VuZFRva2Vuc1tpXSx0b2tlbnNUb1NlbmQpOwogICAgICAgICAgfQogICAgICAgICAgdG9rZW5zRm9yQWR2aXNvcnMgPSAwOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh3aG9zZVRva2Vuc1RvV2l0aGRyYXcgPT0gNCkKICAgICAgICB7CiAgICAgICAgICAgIHJlcXVpcmUgKHRva2Vuc0Zvck1hcmtldGluZyA+IDApOwogICAgICAgICAgLy9hbGxvdyB3aXRoZHJhd2FsCiAgICAgICAgICB0b2tlbnNUb1NlbmQgPSB0b2tlbnNGb3JNYXJrZXRpbmcuZGl2KHdoZXJlVG9TZW5kVG9rZW5zLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgIGZvciAoaT0wO2k8d2hlcmVUb1NlbmRUb2tlbnMubGVuZ3RoO2krKykKICAgICAgICAgIHsKICAgICAgICAgICAgdG9rZW4ubWludCh3YWxsZXQsd2hlcmVUb1NlbmRUb2tlbnNbaV0sdG9rZW5zVG9TZW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIHRva2Vuc0Zvck1hcmtldGluZyA9IDA7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKHdob3NlVG9rZW5zVG9XaXRoZHJhdyA9PSA1KQogICAgICAgIHsKICAgICAgICAgICAgcmVxdWlyZSAodG9rZW5zRm9yVG91cm5hbWVudCA+IDApOwogICAgICAgICAgLy9hbGxvdyB3aXRoZHJhd2FsCiAgICAgICAgICB0b2tlbnNUb1NlbmQgPSB0b2tlbnNGb3JUb3VybmFtZW50LmRpdih3aGVyZVRvU2VuZFRva2Vucy5sZW5ndGgpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICBmb3IgKGk9MDtpPHdoZXJlVG9TZW5kVG9rZW5zLmxlbmd0aDtpKyspCiAgICAgICAgICB7CiAgICAgICAgICAgIHRva2VuLm1pbnQod2FsbGV0LHdoZXJlVG9TZW5kVG9rZW5zW2ldLHRva2Vuc1RvU2VuZCk7CiAgICAgICAgICB9CiAgICAgICAgICB0b2tlbnNGb3JUb3VybmFtZW50ID0gMDsKICAgICAgICB9CiAgICAgICAgZWxzZSAKICAgICAgICB7CiAgICAgICAgICAvL3dyb25nIGlucHV0CiAgICAgICAgICByZXF1aXJlICgxIT0xKTsKICAgICAgICB9CiAgICB9Cn0='.
	

]
