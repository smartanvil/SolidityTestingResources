Class {
	#name : #SRT0a9d1a2ef992d5d9fa366d287bfaba5994ebb9ef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a9d1a2ef992d5d9fa366d287bfaba5994ebb9ef >> base64 [
	^ ''.
	

]
