Class {
	#name : #SRTd6b3D9E44F767f0c178F60d24fb186bA49bC444a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd6b3D9E44F767f0c178F60d24fb186bA49bC444a >> base64 [
	^ ''.
	

]
