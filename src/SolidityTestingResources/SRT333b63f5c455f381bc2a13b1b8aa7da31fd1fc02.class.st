Class {
	#name : #SRT333b63f5c455f381bc2a13b1b8aa7da31fd1fc02,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT333b63f5c455f381bc2a13b1b8aa7da31fd1fc02 >> base64 [
	^ ''.
	

]
