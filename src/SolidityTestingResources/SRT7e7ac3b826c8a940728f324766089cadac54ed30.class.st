Class {
	#name : #SRT7e7ac3b826c8a940728f324766089cadac54ed30,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e7ac3b826c8a940728f324766089cadac54ed30 >> base64 [
	^ ''.
	

]
