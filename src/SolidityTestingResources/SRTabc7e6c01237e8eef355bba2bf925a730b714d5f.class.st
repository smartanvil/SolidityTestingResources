Class {
	#name : #SRTabc7e6c01237e8eef355bba2bf925a730b714d5f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTabc7e6c01237e8eef355bba2bf925a730b714d5f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgQ2xhaW1hYmxlCiAqIEBkZXYgRXh0ZW5zaW9uIGZvciB0aGUgT3duYWJsZSBjb250cmFjdCwgd2hlcmUgdGhlIG93bmVyc2hpcCBuZWVkcyB0byBiZSBjbGFpbWVkLgogKiBUaGlzIGFsbG93cyB0aGUgbmV3IG93bmVyIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIuCiAqLwpjb250cmFjdCBDbGFpbWFibGUgaXMgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgcGVuZGluZ093bmVyOwoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgcGVuZGluZ093bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlQZW5kaW5nT3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcGVuZGluZ093bmVyKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byBzZXQgdGhlIHBlbmRpbmdPd25lciBhZGRyZXNzLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICBwZW5kaW5nT3duZXIgPSBuZXdPd25lcjsKICB9CgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBwZW5kaW5nT3duZXIgYWRkcmVzcyB0byBmaW5hbGl6ZSB0aGUgdHJhbnNmZXIuCiAgICovCiAgZnVuY3Rpb24gY2xhaW1Pd25lcnNoaXAoKSBvbmx5UGVuZGluZ093bmVyIHB1YmxpYyB7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgcGVuZGluZ093bmVyKTsKICAgIG93bmVyID0gcGVuZGluZ093bmVyOwogICAgcGVuZGluZ093bmVyID0gYWRkcmVzcygwKTsKICB9Cn0KCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgovKioKICogQHRpdGxlIEFjY2Vzc0RlcGxveQogKiBAZGV2IEFkZHMgZ3JhbnQvcmV2b2tlIGZ1bmN0aW9ucyB0byB0aGUgY29udHJhY3QuCiAqLwpjb250cmFjdCBBY2Nlc3NEZXBsb3kgaXMgQ2xhaW1hYmxlIHsKCiAgLy8gQWNjZXNzIGZvciBkZXBsb3lpbmcgaGVyb2VzLgogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwcml2YXRlIGRlcGxveUFjY2VzczsKCiAgLy8gTW9kaWZpZXIgZm9yIGFjY2Vzc2liaWxpdHkgdG8gZGVwbG95IGEgaGVybyBvbiBhIGxvY2F0aW9uLgogIG1vZGlmaWVyIG9ubHlBY2Nlc3NEZXBsb3kgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IGRlcGxveUFjY2Vzc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgIF87CiAgfQoKICAvLyBAZGV2IEdyYW50IGFjZXNzIHRvIGRlcGxveSBoZXJvZXMuCiAgZnVuY3Rpb24gZ3JhbnRBY2Nlc3NEZXBsb3koYWRkcmVzcyBfYWRkcmVzcykKICAgIG9ubHlPd25lcgogICAgcHVibGljCiAgewogICAgZGVwbG95QWNjZXNzW19hZGRyZXNzXSA9IHRydWU7CiAgfQoKICAvLyBAZGV2IFJldm9rZSBhY2VzcyB0byBkZXBsb3kgaGVyb2VzLgogIGZ1bmN0aW9uIHJldm9rZUFjY2Vzc0RlcGxveShhZGRyZXNzIF9hZGRyZXNzKQogICAgb25seU93bmVyCiAgICBwdWJsaWMKICB7CiAgICBkZXBsb3lBY2Nlc3NbX2FkZHJlc3NdID0gZmFsc2U7CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgQWNjZXNzRGVwb3NpdAogKiBAZGV2IEFkZHMgZ3JhbnQvcmV2b2tlIGZ1bmN0aW9ucyB0byB0aGUgY29udHJhY3QuCiAqLwpjb250cmFjdCBBY2Nlc3NEZXBvc2l0IGlzIENsYWltYWJsZSB7CgogIC8vIEFjY2VzcyBmb3IgYWRkaW5nIGRlcG9zaXQuCiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgZGVwb3NpdEFjY2VzczsKCiAgLy8gTW9kaWZpZXIgZm9yIGFjY2Vzc2liaWxpdHkgdG8gYWRkIGRlcG9zaXQuCiAgbW9kaWZpZXIgb25seUFjY2Vzc0RlcG9zaXQgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IGRlcG9zaXRBY2Nlc3NbbXNnLnNlbmRlcl0gPT0gdHJ1ZSk7CiAgICBfOwogIH0KCiAgLy8gQGRldiBHcmFudCBhY2VzcyB0byBkZXBvc2l0IGhlcm9lcy4KICBmdW5jdGlvbiBncmFudEFjY2Vzc0RlcG9zaXQoYWRkcmVzcyBfYWRkcmVzcykKICAgIG9ubHlPd25lcgogICAgcHVibGljCiAgewogICAgZGVwb3NpdEFjY2Vzc1tfYWRkcmVzc10gPSB0cnVlOwogIH0KCiAgLy8gQGRldiBSZXZva2UgYWNlc3MgdG8gZGVwb3NpdCBoZXJvZXMuCiAgZnVuY3Rpb24gcmV2b2tlQWNjZXNzRGVwb3NpdChhZGRyZXNzIF9hZGRyZXNzKQogICAgb25seU93bmVyCiAgICBwdWJsaWMKICB7CiAgICBkZXBvc2l0QWNjZXNzW19hZGRyZXNzXSA9IGZhbHNlOwogIH0KCn0KCgovKioKICogQHRpdGxlIEFjY2Vzc01pbnQKICogQGRldiBBZGRzIGdyYW50L3Jldm9rZSBmdW5jdGlvbnMgdG8gdGhlIGNvbnRyYWN0LgogKi8KY29udHJhY3QgQWNjZXNzTWludCBpcyBDbGFpbWFibGUgewoKICAvLyBBY2Nlc3MgZm9yIG1pbnRpbmcgbmV3IHRva2Vucy4KICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHJpdmF0ZSBtaW50QWNjZXNzOwoKICAvLyBNb2RpZmllciBmb3IgYWNjZXNzaWJpbGl0eSB0byBkZWZpbmUgbmV3IGhlcm8gdHlwZXMuCiAgbW9kaWZpZXIgb25seUFjY2Vzc01pbnQgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyIHx8IG1pbnRBY2Nlc3NbbXNnLnNlbmRlcl0gPT0gdHJ1ZSk7CiAgICBfOwogIH0KCiAgLy8gQGRldiBHcmFudCBhY2VzcyB0byBtaW50IGhlcm9lcy4KICBmdW5jdGlvbiBncmFudEFjY2Vzc01pbnQoYWRkcmVzcyBfYWRkcmVzcykKICAgIG9ubHlPd25lcgogICAgcHVibGljCiAgewogICAgbWludEFjY2Vzc1tfYWRkcmVzc10gPSB0cnVlOwogIH0KCiAgLy8gQGRldiBSZXZva2UgYWNlc3MgdG8gbWludCBoZXJvZXMuCiAgZnVuY3Rpb24gcmV2b2tlQWNjZXNzTWludChhZGRyZXNzIF9hZGRyZXNzKQogICAgb25seU93bmVyCiAgICBwdWJsaWMKICB7CiAgICBtaW50QWNjZXNzW19hZGRyZXNzXSA9IGZhbHNlOwogIH0KCn0KCgovKioKICogQHRpdGxlIEVSQzcyMSBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2VpcHMvaXNzdWVzLzcyMQogKi8KY29udHJhY3QgRVJDNzIxIHsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfYXBwcm92ZWQsIHVpbnQyNTYgX3Rva2VuSWQpOwoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2JhbGFuY2UpOwogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBfb3duZXIpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkM3MjFUb2tlbgogKiBHZW5lcmljIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcmVxdWlyZWQgZnVuY3Rpb25hbGl0eSBvZiB0aGUgRVJDNzIxIHN0YW5kYXJkCiAqLwpjb250cmFjdCBFUkM3MjFUb2tlbiBpcyBFUkM3MjEgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUb3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgdWludDI1NiBwcml2YXRlIHRvdGFsVG9rZW5zOwoKICAvLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gb3duZXIKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgdG9rZW5Pd25lcjsKCiAgLy8gTWFwcGluZyBmcm9tIHRva2VuIElEIHRvIGFwcHJvdmVkIGFkZHJlc3MKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgdG9rZW5BcHByb3ZhbHM7CgogIC8vIE1hcHBpbmcgZnJvbSBvd25lciB0byBsaXN0IG9mIG93bmVkIHRva2VuIElEcwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NltdKSBwcml2YXRlIG93bmVkVG9rZW5zOwoKICAvLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gaW5kZXggb2YgdGhlIG93bmVyIHRva2VucyBsaXN0CiAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZWRUb2tlbnNJbmRleDsKCiAgLyoqCiAgKiBAZGV2IEd1YXJhbnRlZXMgbXNnLnNlbmRlciBpcyBvd25lciBvZiB0aGUgZ2l2ZW4gdG9rZW4KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byB2YWxpZGF0ZSBpdHMgb3duZXJzaGlwIGJlbG9uZ3MgdG8gbXNnLnNlbmRlcgogICovCiAgbW9kaWZpZXIgb25seU93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgewogICAgcmVxdWlyZShvd25lck9mKF90b2tlbklkKSA9PSBtc2cuc2VuZGVyKTsKICAgIF87CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucyBzdG9yZWQgYnkgdGhlIGNvbnRyYWN0CiAgKiBAcmV0dXJuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgKi8KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFRva2VuczsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSBiYWxhbmNlIG9mCiAgKiBAcmV0dXJuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBvd25lZFRva2Vuc1tfb3duZXJdLmxlbmd0aDsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBsaXN0IG9mIHRva2VucyBvd25lZCBieSBhIGdpdmVuIGFkZHJlc3MKICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBxdWVyeSB0aGUgdG9rZW5zIG9mCiAgKiBAcmV0dXJuIHVpbnQyNTZbXSByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2YgdG9rZW5zIG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcwogICovCiAgZnVuY3Rpb24gdG9rZW5zT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSkgewogICAgcmV0dXJuIG93bmVkVG9rZW5zW19vd25lcl07CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIHF1ZXJ5IHRoZSBvd25lciBvZgogICogQHJldHVybiBvd25lciBhZGRyZXNzIGN1cnJlbnRseSBtYXJrZWQgYXMgdGhlIG93bmVyIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICovCiAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICBhZGRyZXNzIG93bmVyID0gdG9rZW5Pd25lcltfdG9rZW5JZF07CiAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgcmV0dXJuIG93bmVyOwogIH0KCiAgLyoqCiAgICogQGRldiBHZXRzIHRoZSBhcHByb3ZlZCBhZGRyZXNzIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHJldHVybiBhZGRyZXNzIGN1cnJlbnRseSBhcHByb3ZlZCB0byB0YWtlIG93bmVyc2hpcCBvZiB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlZEZvcih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICByZXR1cm4gdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdOwogIH0KCiAgLyoqCiAgKiBAZGV2IFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQgdG8gYW5vdGhlciBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBjbGVhckFwcHJvdmFsQW5kVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgQXBwcm92ZXMgYW5vdGhlciBhZGRyZXNzIHRvIGNsYWltIGZvciB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90byBhZGRyZXNzIHRvIGJlIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSBhcHByb3ZlZAogICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBhZGRyZXNzIG93bmVyID0gb3duZXJPZihfdG9rZW5JZCk7CiAgICByZXF1aXJlKF90byAhPSBvd25lcik7CiAgICBpZiAoYXBwcm92ZWRGb3IoX3Rva2VuSWQpICE9IDAgfHwgX3RvICE9IDApIHsKICAgICAgdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdID0gX3RvOwogICAgICBBcHByb3ZhbChvd25lciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CiAgfQoKICAvKioKICAqIEBkZXYgQ2xhaW1zIHRoZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIGJlaW5nIGNsYWltZWQgYnkgdGhlIG1zZy5zZW5kZXIKICAqLwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIHJlcXVpcmUoaXNBcHByb3ZlZEZvcihtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgY2xlYXJBcHByb3ZhbEFuZFRyYW5zZmVyKG93bmVyT2YoX3Rva2VuSWQpLCBtc2cuc2VuZGVyLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgTWludCB0b2tlbiBmdW5jdGlvbgogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgb3duIHRoZSBtaW50ZWQgdG9rZW4KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSBtaW50ZWQgYnkgdGhlIG1zZy5zZW5kZXIKICAqLwogIGZ1bmN0aW9uIF9taW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIGFkZFRva2VuKF90bywgX3Rva2VuSWQpOwogICAgVHJhbnNmZXIoMHgwLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBCdXJucyBhIHNwZWNpZmljIHRva2VuCiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gYmVpbmcgYnVybmVkIGJ5IHRoZSBtc2cuc2VuZGVyCiAgKi8KICBmdW5jdGlvbiBfYnVybih1aW50MjU2IF90b2tlbklkKSBvbmx5T3duZXJPZihfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgaWYgKGFwcHJvdmVkRm9yKF90b2tlbklkKSAhPSAwKSB7CiAgICAgIGNsZWFyQXBwcm92YWwobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgfQogICAgcmVtb3ZlVG9rZW4obXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAgKiBAZGV2IFRlbGxzIHdoZXRoZXIgdGhlIG1zZy5zZW5kZXIgaXMgYXBwcm92ZWQgZm9yIHRoZSBnaXZlbiB0b2tlbiBJRCBvciBub3QKICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBwcml2YXRlIHNvIGl0IGNhbiBiZSBleHRlbmRlZCBpbiBmdXJ0aGVyIGltcGxlbWVudGF0aW9ucyBsaWtlIHRoZSBvcGVyYXRhYmxlIEVSQzcyMQogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBvZiB0aGUgb3duZXIgdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIHF1ZXJ5IHRoZSBhcHByb3ZhbCBvZgogICAqIEByZXR1cm4gYm9vbCB3aGV0aGVyIHRoZSBtc2cuc2VuZGVyIGlzIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQgb3Igbm90CiAgICovCiAgZnVuY3Rpb24gaXNBcHByb3ZlZEZvcihhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gYXBwcm92ZWRGb3IoX3Rva2VuSWQpID09IF9vd25lcjsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjbGVhciBjdXJyZW50IGFwcHJvdmFsIGFuZCB0cmFuc2ZlciB0aGUgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0aGUgdG9rZW4gdG8KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICovCiAgZnVuY3Rpb24gY2xlYXJBcHByb3ZhbEFuZFRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3RvICE9IG93bmVyT2YoX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gX2Zyb20pOwoKICAgIGNsZWFyQXBwcm92YWwoX2Zyb20sIF90b2tlbklkKTsKICAgIHJlbW92ZVRva2VuKF9mcm9tLCBfdG9rZW5JZCk7CiAgICBhZGRUb2tlbihfdG8sIF90b2tlbklkKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjbGVhciBjdXJyZW50IGFwcHJvdmFsIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICovCiAgZnVuY3Rpb24gY2xlYXJBcHByb3ZhbChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9vd25lcik7CiAgICB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF0gPSAwOwogICAgQXBwcm92YWwoX293bmVyLCAwLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gYWRkIGEgdG9rZW4gSUQgdG8gdGhlIGxpc3Qgb2YgYSBnaXZlbiBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgcmVwcmVzZW50aW5nIHRoZSBuZXcgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIHRva2VucyBsaXN0IG9mIHRoZSBnaXZlbiBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiBhZGRUb2tlbihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKHRva2VuT3duZXJbX3Rva2VuSWRdID09IGFkZHJlc3MoMCkpOwogICAgdG9rZW5Pd25lcltfdG9rZW5JZF0gPSBfdG87CiAgICB1aW50MjU2IGxlbmd0aCA9IGJhbGFuY2VPZihfdG8pOwogICAgb3duZWRUb2tlbnNbX3RvXS5wdXNoKF90b2tlbklkKTsKICAgIG93bmVkVG9rZW5zSW5kZXhbX3Rva2VuSWRdID0gbGVuZ3RoOwogICAgdG90YWxUb2tlbnMgPSB0b3RhbFRva2Vucy5hZGQoMSk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gcmVtb3ZlIGEgdG9rZW4gSUQgZnJvbSB0aGUgbGlzdCBvZiBhIGdpdmVuIGFkZHJlc3MKICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHJlcHJlc2VudGluZyB0aGUgcHJldmlvdXMgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSB0b2tlbnMgbGlzdCBvZiB0aGUgZ2l2ZW4gYWRkcmVzcwogICovCiAgZnVuY3Rpb24gcmVtb3ZlVG9rZW4oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9mcm9tKTsKCiAgICB1aW50MjU2IHRva2VuSW5kZXggPSBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXTsKICAgIHVpbnQyNTYgbGFzdFRva2VuSW5kZXggPSBiYWxhbmNlT2YoX2Zyb20pLnN1YigxKTsKICAgIHVpbnQyNTYgbGFzdFRva2VuID0gb3duZWRUb2tlbnNbX2Zyb21dW2xhc3RUb2tlbkluZGV4XTsKCiAgICB0b2tlbk93bmVyW190b2tlbklkXSA9IDA7CiAgICBvd25lZFRva2Vuc1tfZnJvbV1bdG9rZW5JbmRleF0gPSBsYXN0VG9rZW47CiAgICBvd25lZFRva2Vuc1tfZnJvbV1bbGFzdFRva2VuSW5kZXhdID0gMDsKICAgIC8vIE5vdGUgdGhhdCB0aGlzIHdpbGwgaGFuZGxlIHNpbmdsZS1lbGVtZW50IGFycmF5cy4gSW4gdGhhdCBjYXNlLCBib3RoIHRva2VuSW5kZXggYW5kIGxhc3RUb2tlbkluZGV4IGFyZSBnb2luZyB0bwogICAgLy8gYmUgemVyby4gVGhlbiB3ZSBjYW4gbWFrZSBzdXJlIHRoYXQgd2Ugd2lsbCByZW1vdmUgX3Rva2VuSWQgZnJvbSB0aGUgb3duZWRUb2tlbnMgbGlzdCBzaW5jZSB3ZSBhcmUgZmlyc3Qgc3dhcHBpbmcKICAgIC8vIHRoZSBsYXN0VG9rZW4gdG8gdGhlIGZpcnN0IHBvc2l0aW9uLCBhbmQgdGhlbiBkcm9wcGluZyB0aGUgZWxlbWVudCBwbGFjZWQgaW4gdGhlIGxhc3QgcG9zaXRpb24gb2YgdGhlIGxpc3QKCiAgICBvd25lZFRva2Vuc1tfZnJvbV0ubGVuZ3RoLS07CiAgICBvd25lZFRva2Vuc0luZGV4W190b2tlbklkXSA9IDA7CiAgICBvd25lZFRva2Vuc0luZGV4W2xhc3RUb2tlbl0gPSB0b2tlbkluZGV4OwogICAgdG90YWxUb2tlbnMgPSB0b3RhbFRva2Vucy5zdWIoMSk7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAvKioKICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICovCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICovCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgLyoqCiAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICB1aW50MjU2IHRvdGFsU3VwcGx5XzsKCiAgLyoqCiAgKiBAZGV2IHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gZXhpc3RlbmNlCiAgKi8KICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFN1cHBseV87CiAgfQoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIEBkZXYgSW5jcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfYWRkZWRWYWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBpbmNyZWFzZSB0aGUgYWxsb3dhbmNlIGJ5LgogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRGVjcmVhc2UgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGRlY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3VidHJhY3RlZFZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGRlY3JlYXNlIHRoZSBhbGxvd2FuY2UgYnkuCiAgICovCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgovKioKICogQHRpdGxlIEdvbGQKICogQGRldiBFUkMyMCBUb2tlbiB0aGF0IGNhbiBiZSBtaW50ZWQuCiAqLwpjb250cmFjdCBHb2xkIGlzIFN0YW5kYXJkVG9rZW4sIENsYWltYWJsZSwgQWNjZXNzTWludCB7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJHb2xkIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJHIjsKICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKCiAgLy8gRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIG1pbnRlZC4KICBldmVudCBNaW50KAogICAgYWRkcmVzcyBpbmRleGVkIF90bywKICAgIHVpbnQyNTYgaW5kZXhlZCBfdG9rZW5JZAogICk7CgogIC8vIEBkZXYgTWludCB0b2tlbnMgd2l0aCBfYW1vdW50IHRvIHRoZSBhZGRyZXNzLgogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgCiAgICBvbmx5QWNjZXNzTWludAogICAgcHVibGljIAogICAgcmV0dXJucyAoYm9vbCkgCiAgewogICAgdG90YWxTdXBwbHlfID0gdG90YWxTdXBwbHlfLmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgoKLyoqCiAqIEB0aXRsZSBDcnlwdG9TYWdhSGVybwogKiBAZGV2IFRoZSB0b2tlbiBjb250cmFjdCBmb3IgdGhlIGhlcm8uCiAqICBBbHNvIGEgc3VwZXJzZXQgb2YgdGhlIEVSQzcyMSBzdGFuZGFyZCB0aGF0IGFsbG93cyBmb3IgdGhlIG1pbnRpbmcKICogIG9mIHRoZSBub24tZnVuZ2libGUgdG9rZW5zLgogKi8KY29udHJhY3QgQ3J5cHRvU2FnYUhlcm8gaXMgRVJDNzIxVG9rZW4sIENsYWltYWJsZSwgUGF1c2FibGUsIEFjY2Vzc01pbnQsIEFjY2Vzc0RlcGxveSwgQWNjZXNzRGVwb3NpdCB7CgogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJDcnlwdG9TYWdhIEhlcm8iOwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIkhFUk8iOwogIAogIHN0cnVjdCBIZXJvQ2xhc3MgewogICAgLy8gZXgpIFNvbGRpZXIsIEtuaWdodCwgRmlnaHRlci4uLgogICAgc3RyaW5nIGNsYXNzTmFtZTsKICAgIC8vIDA6IENvbW1vbiwgMTogVW5jb21tb24sIDI6IFJhcmUsIDM6IEhlcm9pYywgNDogTGVnZW5kYXJ5LgogICAgdWludDggY2xhc3NSYW5rOwogICAgLy8gMDogSHVtYW4sIDE6IENlbGVzdGlhbCwgMjogRGVtb24sIDM6IEVsZiwgNDogRGFyayBFbGYsIDU6IFlvZ29lLCA2OiBGdXJyeSwgNzogRHJhZ29uYm9ybiwgODogVW5kZWFkLCA5OiBHb2JsaW4sIDEwOiBUcm9sbCwgMTE6IFNsaW1lLCBhbmQgbW9yZSB0byBjb21lLgogICAgdWludDggY2xhc3NSYWNlOwogICAgLy8gSG93IG9sZCBpcyB0aGlzIGhlcm8gY2xhc3M/IAogICAgdWludDMyIGNsYXNzQWdlOwogICAgLy8gMDogRmlnaHRlciwgMTogUm9ndWUsIDI6IE1hZ2UuCiAgICB1aW50OCBjbGFzc1R5cGU7CgogICAgLy8gUG9zc2libGUgbWF4IGxldmVsIG9mIHRoaXMgY2xhc3MuCiAgICB1aW50MzIgbWF4TGV2ZWw7IAogICAgLy8gMDogV2F0ZXIsIDE6IEZpcmUsIDI6IE5hdHVyZSwgMzogTGlnaHQsIDQ6IERhcmtuZXNzLgogICAgdWludDggYXVyYTsgCgogICAgLy8gQmFzZSBzdGF0cyBvZiB0aGlzIGhlcm8gdHlwZS4gCiAgICAvLyAwOiBBVEsJMTogREVGIDI6IEFHTAkzOiBMVUsgNDogSFAuCiAgICB1aW50MzJbNV0gYmFzZVN0YXRzOwogICAgLy8gTWluaW11bSBJVnMgZm9yIHN0YXRzLiAKICAgIC8vIDA6IEFUSwkxOiBERUYgMjogQUdMCTM6IExVSyA0OiBIUC4KICAgIHVpbnQzMls1XSBtaW5JVkZvclN0YXRzOwogICAgLy8gTWF4aW11bSBJVnMgZm9yIHN0YXRzLgogICAgLy8gMDogQVRLCTE6IERFRiAyOiBBR0wJMzogTFVLIDQ6IEhQLgogICAgdWludDMyWzVdIG1heElWRm9yU3RhdHM7CiAgICAKICAgIC8vIE51bWJlciBvZiBjdXJyZW50bHkgaW5zdGFuY2VkIGhlcm9lcy4KICAgIHVpbnQzMiBjdXJyZW50TnVtYmVyT2ZJbnN0YW5jZWRIZXJvZXM7CiAgfQogICAgCiAgc3RydWN0IEhlcm9JbnN0YW5jZSB7CiAgICAvLyBXaGF0IGlzIHRoaXMgaGVybydzIHR5cGU/IGV4KSBKb2huLCBTYWxseSwgTWFyay4uLgogICAgdWludDMyIGhlcm9DbGFzc0lkOwogICAgCiAgICAvLyBJbmRpdmlkdWFsIGhlcm8ncyBuYW1lLgogICAgc3RyaW5nIGhlcm9OYW1lOwogICAgCiAgICAvLyBDdXJyZW50IGxldmVsIG9mIHRoaXMgaGVyby4KICAgIHVpbnQzMiBjdXJyZW50TGV2ZWw7CiAgICAvLyBDdXJyZW50IGV4cCBvZiB0aGlzIGhlcm8uCiAgICB1aW50MzIgY3VycmVudEV4cDsKCiAgICAvLyBXaGVyZSBoYXMgdGhpcyBoZXJvIGJlZW4gZGVwbG95ZWQ/ICgwOiBOZXZlciBkZXBvbHllZCBldmVyLikgZXgpIER1bmdlb24gRmxvb3IgIzEsIEFyZW5hICM1Li4uCiAgICB1aW50MzIgbGFzdExvY2F0aW9uSWQ7CiAgICAvLyBXaGVuIGEgaGVybyBpcyBkZXBsb3llZCwgaXQgdGFrZXMgdGltZSBmb3IgdGhlIGhlcm8gdG8gcmV0dXJuIHRvIHRoZSBiYXNlLiBUaGlzIGlzIGluIFVuaXggZXBvY2guCiAgICB1aW50MjU2IGF2YWlsYWJsZUF0OwoKICAgIC8vIEN1cnJlbnQgc3RhdHMgb2YgdGhpcyBoZXJvLiAKICAgIC8vIDA6IEFUSwkxOiBERUYgMjogQUdMCTM6IExVSyA0OiBIUC4KICAgIHVpbnQzMls1XSBjdXJyZW50U3RhdHM7CiAgICAvLyBUaGUgaW5kaXZpZHVhbCB2YWx1ZSBmb3IgdGhpcyBoZXJvJ3Mgc3RhdHMuIAogICAgLy8gVGhpcyB3aWxsIGFmZmVjdCB0aGUgY3VycmVudCBzdGF0cyBvZiBoZXJvZXMuCiAgICAvLyAwOiBBVEsJMTogREVGIDI6IEFHTAkzOiBMVUsgNDogSFAuCiAgICB1aW50MzJbNV0gaXZGb3JTdGF0czsKICB9CgogIC8vIFJlcXVpcmVkIGV4cCBmb3IgbGV2ZWwgdXAgd2lsbCBpbmNyZWFzZSB3aGVuIGhlcm9lcyBsZXZlbCB1cC4KICAvLyBUaGlzIGRlZmluZXMgaG93IHRoZSB2YWx1ZSB3aWxsIGluY3JlYXNlLgogIHVpbnQzMiBwdWJsaWMgcmVxdWlyZWRFeHBJbmNyZWFzZUZhY3RvciA9IDEwMDsKCiAgLy8gUmVxdWlyZWQgR29sZCBmb3IgbGV2ZWwgdXAgd2lsbCBpbmNyZWFzZSB3aGVuIGhlcm9lcyBsZXZlbCB1cC4KICAvLyBUaGlzIGRlZmluZXMgaG93IHRoZSB2YWx1ZSB3aWxsIGluY3JlYXNlLgogIHVpbnQyNTYgcHVibGljIHJlcXVpcmVkR29sZEluY3JlYXNlRmFjdG9yID0gMTAwMDAwMDAwMDAwMDAwMDAwMDsKCiAgLy8gRXhpc3RpbmcgaGVybyBjbGFzc2VzLgogIG1hcHBpbmcodWludDMyID0+IEhlcm9DbGFzcykgcHVibGljIGhlcm9DbGFzc2VzOwogIC8vIFRoZSBudW1iZXIgb2YgaGVybyBjbGFzc2VzIGV2ZXIgZGVmaW5lZC4KICB1aW50MzIgcHVibGljIG51bWJlck9mSGVyb0NsYXNzZXM7CgogIC8vIEV4aXN0aW5nIGhlcm8gaW5zdGFuY2VzLgogIC8vIFRoZSBrZXkgaXMgX3Rva2VuSWQuCiAgbWFwcGluZyh1aW50MjU2ID0+IEhlcm9JbnN0YW5jZSkgcHVibGljIHRva2VuSWRUb0hlcm9JbnN0YW5jZTsKICAvLyBUaGUgbnVtYmVyIG9mIHRva2VucyBldmVyIG1pbnRlZC4gVGhpcyB3b3JrcyBhcyB0aGUgc2VyaWFsIG51bWJlci4KICB1aW50MjU2IHB1YmxpYyBudW1iZXJPZlRva2VuSWRzOwoKICAvLyBHb2xkIGNvbnRyYWN0LgogIEdvbGQgcHVibGljIGdvbGRDb250cmFjdDsKCiAgLy8gRGVwb3NpdCBvZiBwbGF5ZXJzIChpbiBHb2xkKS4KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGFkZHJlc3NUb0dvbGREZXBvc2l0OwoKICAvLyBSYW5kb20gc2VlZC4KICB1aW50MzIgcHJpdmF0ZSBzZWVkID0gMDsKCiAgLy8gRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgaGVybyB0eXBlIGRlZmluZWQuCiAgZXZlbnQgRGVmaW5lVHlwZSgKICAgIGFkZHJlc3MgaW5kZXhlZCBfYnksCiAgICB1aW50MzIgaW5kZXhlZCBfdHlwZUlkLAogICAgc3RyaW5nIF9jbGFzc05hbWUKICApOwoKICAvLyBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBoZXJvIGlzIHVwZ3JhZGVkLgogIGV2ZW50IExldmVsVXAoCiAgICBhZGRyZXNzIGluZGV4ZWQgX2J5LAogICAgdWludDI1NiBpbmRleGVkIF90b2tlbklkLAogICAgdWludDMyIF9uZXdMZXZlbAogICk7CgogIC8vIEV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhIGhlcm8gaXMgZGVwbG95ZWQuCiAgZXZlbnQgRGVwbG95KAogICAgYWRkcmVzcyBpbmRleGVkIF9ieSwKICAgIHVpbnQyNTYgaW5kZXhlZCBfdG9rZW5JZCwKICAgIHVpbnQzMiBfbG9jYXRpb25JZCwKICAgIHVpbnQyNTYgX2R1cmF0aW9uCiAgKTsKCiAgLy8gQGRldiBHZXQgdGhlIGNsYXNzJ3MgZW50aXJlIGluZm9tYXRpb24uCiAgZnVuY3Rpb24gZ2V0Q2xhc3NJbmZvKHVpbnQzMiBfY2xhc3NJZCkKICAgIGV4dGVybmFsIHZpZXcKICAgIHJldHVybnMgKHN0cmluZyBjbGFzc05hbWUsIHVpbnQ4IGNsYXNzUmFuaywgdWludDggY2xhc3NSYWNlLCB1aW50MzIgY2xhc3NBZ2UsIHVpbnQ4IGNsYXNzVHlwZSwgdWludDMyIG1heExldmVsLCB1aW50OCBhdXJhLCB1aW50MzJbNV0gYmFzZVN0YXRzLCB1aW50MzJbNV0gbWluSVZzLCB1aW50MzJbNV0gbWF4SVZzKSAKICB7CiAgICB2YXIgX2NsID0gaGVyb0NsYXNzZXNbX2NsYXNzSWRdOwogICAgcmV0dXJuIChfY2wuY2xhc3NOYW1lLCBfY2wuY2xhc3NSYW5rLCBfY2wuY2xhc3NSYWNlLCBfY2wuY2xhc3NBZ2UsIF9jbC5jbGFzc1R5cGUsIF9jbC5tYXhMZXZlbCwgX2NsLmF1cmEsIF9jbC5iYXNlU3RhdHMsIF9jbC5taW5JVkZvclN0YXRzLCBfY2wubWF4SVZGb3JTdGF0cyk7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgY2xhc3MncyBuYW1lLgogIGZ1bmN0aW9uIGdldENsYXNzTmFtZSh1aW50MzIgX2NsYXNzSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zIChzdHJpbmcpCiAgewogICAgcmV0dXJuIGhlcm9DbGFzc2VzW19jbGFzc0lkXS5jbGFzc05hbWU7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgY2xhc3MncyByYW5rLgogIGZ1bmN0aW9uIGdldENsYXNzUmFuayh1aW50MzIgX2NsYXNzSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zICh1aW50OCkKICB7CiAgICByZXR1cm4gaGVyb0NsYXNzZXNbX2NsYXNzSWRdLmNsYXNzUmFuazsKICB9CgogIC8vIEBkZXYgR2V0IHRoZSBoZXJvZXMgZXZlciBtaW50ZWQgZm9yIHRoZSBjbGFzcy4KICBmdW5jdGlvbiBnZXRDbGFzc01pbnRDb3VudCh1aW50MzIgX2NsYXNzSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zICh1aW50MzIpCiAgewogICAgcmV0dXJuIGhlcm9DbGFzc2VzW19jbGFzc0lkXS5jdXJyZW50TnVtYmVyT2ZJbnN0YW5jZWRIZXJvZXM7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgaGVybydzIGVudGlyZSBpbmZvbWF0aW9uLgogIGZ1bmN0aW9uIGdldEhlcm9JbmZvKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zICh1aW50MzIgY2xhc3NJZCwgc3RyaW5nIGhlcm9OYW1lLCB1aW50MzIgY3VycmVudExldmVsLCB1aW50MzIgY3VycmVudEV4cCwgdWludDMyIGxhc3RMb2NhdGlvbklkLCB1aW50MjU2IGF2YWlsYWJsZUF0LCB1aW50MzJbNV0gY3VycmVudFN0YXRzLCB1aW50MzJbNV0gaXZzLCB1aW50MzIgYnApCiAgewogICAgSGVyb0luc3RhbmNlIG1lbW9yeSBfaCA9IHRva2VuSWRUb0hlcm9JbnN0YW5jZVtfdG9rZW5JZF07CiAgICB2YXIgX2JwID0gX2guY3VycmVudFN0YXRzWzBdICsgX2guY3VycmVudFN0YXRzWzFdICsgX2guY3VycmVudFN0YXRzWzJdICsgX2guY3VycmVudFN0YXRzWzNdICsgX2guY3VycmVudFN0YXRzWzRdOwogICAgcmV0dXJuIChfaC5oZXJvQ2xhc3NJZCwgX2guaGVyb05hbWUsIF9oLmN1cnJlbnRMZXZlbCwgX2guY3VycmVudEV4cCwgX2gubGFzdExvY2F0aW9uSWQsIF9oLmF2YWlsYWJsZUF0LCBfaC5jdXJyZW50U3RhdHMsIF9oLml2Rm9yU3RhdHMsIF9icCk7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgaGVybydzIGNsYXNzIGlkLgogIGZ1bmN0aW9uIGdldEhlcm9DbGFzc0lkKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zICh1aW50MzIpCiAgewogICAgcmV0dXJuIHRva2VuSWRUb0hlcm9JbnN0YW5jZVtfdG9rZW5JZF0uaGVyb0NsYXNzSWQ7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgaGVybydzIG5hbWUuCiAgZnVuY3Rpb24gZ2V0SGVyb05hbWUodWludDI1NiBfdG9rZW5JZCkKICAgIGV4dGVybmFsIHZpZXcKICAgIHJldHVybnMgKHN0cmluZykKICB7CiAgICByZXR1cm4gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXS5oZXJvTmFtZTsKICB9CgogIC8vIEBkZXYgR2V0IHRoZSBoZXJvJ3MgbGV2ZWwuCiAgZnVuY3Rpb24gZ2V0SGVyb0xldmVsKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbCB2aWV3CiAgICByZXR1cm5zICh1aW50MzIpCiAgewogICAgcmV0dXJuIHRva2VuSWRUb0hlcm9JbnN0YW5jZVtfdG9rZW5JZF0uY3VycmVudExldmVsOwogIH0KICAKICAvLyBAZGV2IEdldCB0aGUgaGVybydzIGxvY2F0aW9uLgogIGZ1bmN0aW9uIGdldEhlcm9Mb2NhdGlvbih1aW50MjU2IF90b2tlbklkKQogICAgZXh0ZXJuYWwgdmlldwogICAgcmV0dXJucyAodWludDMyKQogIHsKICAgIHJldHVybiB0b2tlbklkVG9IZXJvSW5zdGFuY2VbX3Rva2VuSWRdLmxhc3RMb2NhdGlvbklkOwogIH0KCiAgLy8gQGRldiBHZXQgdGhlIHRpbWUgd2hlbiB0aGUgaGVybyBiZWNvbWUgYXZhaWxhYmxlLgogIGZ1bmN0aW9uIGdldEhlcm9BdmFpbGFibGVBdCh1aW50MjU2IF90b2tlbklkKQogICAgZXh0ZXJuYWwgdmlldwogICAgcmV0dXJucyAodWludDI1NikKICB7CiAgICByZXR1cm4gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXS5hdmFpbGFibGVBdDsKICB9CgogIC8vIEBkZXYgR2V0IHRoZSBoZXJvJ3MgQlAuCiAgZnVuY3Rpb24gZ2V0SGVyb0JQKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBwdWJsaWMgdmlldwogICAgcmV0dXJucyAodWludDMyKQogIHsKICAgIHZhciBfdG1wID0gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXS5jdXJyZW50U3RhdHM7CiAgICByZXR1cm4gKF90bXBbMF0gKyBfdG1wWzFdICsgX3RtcFsyXSArIF90bXBbM10gKyBfdG1wWzRdKTsKICB9CgogIC8vIEBkZXYgR2V0IHRoZSBoZXJvJ3MgcmVxdWlyZWQgZ29sZCBmb3IgbGV2ZWwgdXAuCiAgZnVuY3Rpb24gZ2V0SGVyb1JlcXVpcmVkR29sZEZvckxldmVsVXAodWludDI1NiBfdG9rZW5JZCkKICAgIHB1YmxpYyB2aWV3CiAgICByZXR1cm5zICh1aW50MjU2KQogIHsKICAgIHJldHVybiAodWludDI1NigyKSAqKiAodG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXS5jdXJyZW50TGV2ZWwgLyAxMCkpICogcmVxdWlyZWRHb2xkSW5jcmVhc2VGYWN0b3I7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgaGVybydzIHJlcXVpcmVkIGV4cCBmb3IgbGV2ZWwgdXAuCiAgZnVuY3Rpb24gZ2V0SGVyb1JlcXVpcmVkRXhwRm9yTGV2ZWxVcCh1aW50MjU2IF90b2tlbklkKQogICAgcHVibGljIHZpZXcKICAgIHJldHVybnMgKHVpbnQzMikKICB7CiAgICByZXR1cm4gKCh0b2tlbklkVG9IZXJvSW5zdGFuY2VbX3Rva2VuSWRdLmN1cnJlbnRMZXZlbCArIDIpICogcmVxdWlyZWRFeHBJbmNyZWFzZUZhY3Rvcik7CiAgfQoKICAvLyBAZGV2IEdldCB0aGUgZGVwb3NpdCBvZiBnb2xkIG9mIHRoZSBwbGF5ZXIuCiAgZnVuY3Rpb24gZ2V0R29sZERlcG9zaXRPZkFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykKICAgIGV4dGVybmFsIHZpZXcKICAgIHJldHVybnMgKHVpbnQyNTYpCiAgewogICAgcmV0dXJuIGFkZHJlc3NUb0dvbGREZXBvc2l0W19hZGRyZXNzXTsKICB9CgogIC8vIEBkZXYgR2V0IHRoZSB0b2tlbiBpZCBvZiB0aGUgcGxheWVyJ3MgI3RoIHRva2VuLgogIGZ1bmN0aW9uIGdldFRva2VuSWRPZkFkZHJlc3NBbmRJbmRleChhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9pbmRleCkKICAgIGV4dGVybmFsIHZpZXcKICAgIHJldHVybnMgKHVpbnQyNTYpCiAgewogICAgcmV0dXJuIHRva2Vuc09mKF9hZGRyZXNzKVtfaW5kZXhdOwogIH0KCiAgLy8gQGRldiBHZXQgdGhlIHRvdGFsIEJQIG9mIHRoZSBwbGF5ZXIuCiAgZnVuY3Rpb24gZ2V0VG90YWxCUE9mQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKQogICAgZXh0ZXJuYWwgdmlldwogICAgcmV0dXJucyAodWludDMyKQogIHsKICAgIHZhciBfdG9rZW5zID0gdG9rZW5zT2YoX2FkZHJlc3MpOwogICAgdWludDMyIF90b3RhbEJQID0gMDsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF90b2tlbnMubGVuZ3RoOyBpICsrKSB7CiAgICAgIF90b3RhbEJQICs9IGdldEhlcm9CUChfdG9rZW5zW2ldKTsKICAgIH0KICAgIHJldHVybiBfdG90YWxCUDsKICB9CgogIC8vIEBkZXYgU2V0IHRoZSBoZXJvJ3MgbmFtZS4KICBmdW5jdGlvbiBzZXRIZXJvTmFtZSh1aW50MjU2IF90b2tlbklkLCBzdHJpbmcgX25hbWUpCiAgICBvbmx5T3duZXJPZihfdG9rZW5JZCkKICAgIHB1YmxpYwogIHsKICAgIHRva2VuSWRUb0hlcm9JbnN0YW5jZVtfdG9rZW5JZF0uaGVyb05hbWUgPSBfbmFtZTsKICB9CgogIC8vIEBkZXYgU2V0IHRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB0aGF0IHJlcHJlc2VudHMgRVJDMjAgR29sZC4KICBmdW5jdGlvbiBzZXRHb2xkQ29udHJhY3QoYWRkcmVzcyBfY29udHJhY3RBZGRyZXNzKQogICAgb25seU93bmVyCiAgICBwdWJsaWMKICB7CiAgICBnb2xkQ29udHJhY3QgPSBHb2xkKF9jb250cmFjdEFkZHJlc3MpOwogIH0KCiAgLy8gQGRldiBTZXQgdGhlIHJlcXVpcmVkIGdvbGRzIHRvIGxldmVsIHVwIGEgaGVyby4KICBmdW5jdGlvbiBzZXRSZXF1aXJlZEV4cEluY3JlYXNlRmFjdG9yKHVpbnQzMiBfdmFsdWUpCiAgICBvbmx5T3duZXIKICAgIHB1YmxpYwogIHsKICAgIHJlcXVpcmVkRXhwSW5jcmVhc2VGYWN0b3IgPSBfdmFsdWU7CiAgfQoKICAvLyBAZGV2IFNldCB0aGUgcmVxdWlyZWQgZ29sZHMgdG8gbGV2ZWwgdXAgYSBoZXJvLgogIGZ1bmN0aW9uIHNldFJlcXVpcmVkR29sZEluY3JlYXNlRmFjdG9yKHVpbnQyNTYgX3ZhbHVlKQogICAgb25seU93bmVyCiAgICBwdWJsaWMKICB7CiAgICByZXF1aXJlZEdvbGRJbmNyZWFzZUZhY3RvciA9IF92YWx1ZTsKICB9CgogIC8vIEBkZXYgQ29udHJ1Y3Rvci4KICBmdW5jdGlvbiBDcnlwdG9TYWdhSGVybyhhZGRyZXNzIF9nb2xkQWRkcmVzcykKICAgIHB1YmxpYwogIHsKICAgIHJlcXVpcmUoX2dvbGRBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwoKICAgIC8vIEFzc2lnbiBHb2xkIGNvbnRyYWN0LgogICAgc2V0R29sZENvbnRyYWN0KF9nb2xkQWRkcmVzcyk7CgogICAgLy8gSW5pdGlhbCBoZXJvZXMuCiAgICAvLyBOYW1lLCBSYW5rLCBSYWNlLCBBZ2UsIFR5cGUsIE1heCBMZXZlbCwgQXVyYSwgU3RhdHMuCiAgICBkZWZpbmVUeXBlKCJBcmNoYW5nZWwiLCA0LCAxLCAxMzU0MCwgMCwgOTksIDMsIFt1aW50MzIoNzQpLCA3NSwgNTcsIDk5LCA5NV0sIFt1aW50MzIoOCksIDYsIDgsIDUsIDVdLCBbdWludDMyKDgpLCAxMCwgMTAsIDYsIDZdKTsKICAgIGRlZmluZVR5cGUoIlNoYWRvd2Fsa2VyIiwgMywgNCwgMTM0LCAxLCA3NSwgNCwgW3VpbnQzMig0NSksIDM1LCA2MCwgODAsIDQwXSwgW3VpbnQzMigzKSwgMiwgMTAsIDQsIDVdLCBbdWludDMyKDUpLCA1LCAxMCwgNywgNV0pOwogICAgZGVmaW5lVHlwZSgiUHlyb21hbmNlciIsIDIsIDAsIDE0LCAyLCA1MCwgMSwgW3VpbnQzMig1MCksIDI4LCAxNywgNDAsIDM1XSwgW3VpbnQzMig1KSwgMywgMiwgMywgM10sIFt1aW50MzIoOCksIDQsIDMsIDQsIDVdKTsKICAgIGRlZmluZVR5cGUoIk1hZ2ljaWFuIiwgMSwgMywgMjI0LCAyLCAzMCwgMCwgW3VpbnQzMigzNSksIDE1LCAyNSwgMjUsIDMwXSwgW3VpbnQzMigzKSwgMSwgMiwgMiwgMl0sIFt1aW50MzIoNSksIDIsIDMsIDMsIDNdKTsKICAgIGRlZmluZVR5cGUoIkZhcm1lciIsIDAsIDAsIDU5LCAwLCAxNSwgMiwgW3VpbnQzMigxMCksIDIyLCA4LCAxNSwgMjVdLCBbdWludDMyKDEpLCAyLCAxLCAxLCAyXSwgW3VpbnQzMigxKSwgMywgMSwgMiwgM10pOwogIH0KCiAgLy8gQGRldiBEZWZpbmUgYSBuZXcgaGVybyB0eXBlIChjbGFzcykuCiAgZnVuY3Rpb24gZGVmaW5lVHlwZShzdHJpbmcgX2NsYXNzTmFtZSwgdWludDggX2NsYXNzUmFuaywgdWludDggX2NsYXNzUmFjZSwgdWludDMyIF9jbGFzc0FnZSwgdWludDggX2NsYXNzVHlwZSwgdWludDMyIF9tYXhMZXZlbCwgdWludDggX2F1cmEsIHVpbnQzMls1XSBfYmFzZVN0YXRzLCB1aW50MzJbNV0gX21pbklWRm9yU3RhdHMsIHVpbnQzMls1XSBfbWF4SVZGb3JTdGF0cykKICAgIG9ubHlPd25lcgogICAgcHVibGljCiAgewogICAgcmVxdWlyZShfY2xhc3NSYW5rIDwgNSk7CiAgICByZXF1aXJlKF9jbGFzc1R5cGUgPCAzKTsKICAgIHJlcXVpcmUoX2F1cmEgPCA1KTsKICAgIHJlcXVpcmUoX21pbklWRm9yU3RhdHNbMF0gPD0gX21heElWRm9yU3RhdHNbMF0gJiYgX21pbklWRm9yU3RhdHNbMV0gPD0gX21heElWRm9yU3RhdHNbMV0gJiYgX21pbklWRm9yU3RhdHNbMl0gPD0gX21heElWRm9yU3RhdHNbMl0gJiYgX21pbklWRm9yU3RhdHNbM10gPD0gX21heElWRm9yU3RhdHNbM10gJiYgX21pbklWRm9yU3RhdHNbNF0gPD0gX21heElWRm9yU3RhdHNbNF0pOwoKICAgIEhlcm9DbGFzcyBtZW1vcnkgX2hlcm9UeXBlID0gSGVyb0NsYXNzKHsKICAgICAgY2xhc3NOYW1lOiBfY2xhc3NOYW1lLAogICAgICBjbGFzc1Jhbms6IF9jbGFzc1JhbmssCiAgICAgIGNsYXNzUmFjZTogX2NsYXNzUmFjZSwKICAgICAgY2xhc3NBZ2U6IF9jbGFzc0FnZSwKICAgICAgY2xhc3NUeXBlOiBfY2xhc3NUeXBlLAogICAgICBtYXhMZXZlbDogX21heExldmVsLAogICAgICBhdXJhOiBfYXVyYSwKICAgICAgYmFzZVN0YXRzOiBfYmFzZVN0YXRzLAogICAgICBtaW5JVkZvclN0YXRzOiBfbWluSVZGb3JTdGF0cywKICAgICAgbWF4SVZGb3JTdGF0czogX21heElWRm9yU3RhdHMsCiAgICAgIGN1cnJlbnROdW1iZXJPZkluc3RhbmNlZEhlcm9lczogMAogICAgfSk7CgogICAgLy8gU2F2ZSB0aGUgaGVybyBjbGFzcy4KICAgIGhlcm9DbGFzc2VzW251bWJlck9mSGVyb0NsYXNzZXNdID0gX2hlcm9UeXBlOwoKICAgIC8vIEZpcmUgZXZlbnQuCiAgICBEZWZpbmVUeXBlKG1zZy5zZW5kZXIsIG51bWJlck9mSGVyb0NsYXNzZXMsIF9oZXJvVHlwZS5jbGFzc05hbWUpOwoKICAgIC8vIEluY3JlbWVudCBudW1iZXIgb2YgaGVybyBjbGFzc2VzLgogICAgbnVtYmVyT2ZIZXJvQ2xhc3NlcyArKzsKCiAgfQoKICAvLyBAZGV2IE1pbnQgYSBuZXcgaGVybywgd2l0aCBfaGVyb0NsYXNzSWQuCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF9vd25lciwgdWludDMyIF9oZXJvQ2xhc3NJZCkKICAgIG9ubHlBY2Nlc3NNaW50CiAgICBwdWJsaWMKICAgIHJldHVybnMgKHVpbnQyNTYpCiAgewogICAgcmVxdWlyZShfb3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9oZXJvQ2xhc3NJZCA8IG51bWJlck9mSGVyb0NsYXNzZXMpOwoKICAgIC8vIFRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgaGVybydzIGNsYXNzLgogICAgdmFyIF9oZXJvQ2xhc3NJbmZvID0gaGVyb0NsYXNzZXNbX2hlcm9DbGFzc0lkXTsKCiAgICAvLyBNaW50IEVSQzcyMSB0b2tlbi4KICAgIF9taW50KF9vd25lciwgbnVtYmVyT2ZUb2tlbklkcyk7CgogICAgLy8gQnVpbGQgcmFuZG9tIElWcyBmb3IgdGhpcyBoZXJvIGluc3RhbmNlLgogICAgdWludDMyWzVdIG1lbW9yeSBfaXZGb3JTdGF0czsKICAgIHVpbnQzMls1XSBtZW1vcnkgX2luaXRpYWxTdGF0czsKICAgIGZvciAodWludDggaSA9IDA7IGkgPCA1OyBpKyspIHsKICAgICAgX2l2Rm9yU3RhdHNbaV0gPSAocmFuZG9tKF9oZXJvQ2xhc3NJbmZvLm1heElWRm9yU3RhdHNbaV0gKyAxLCBfaGVyb0NsYXNzSW5mby5taW5JVkZvclN0YXRzW2ldKSk7CiAgICAgIF9pbml0aWFsU3RhdHNbaV0gPSBfaGVyb0NsYXNzSW5mby5iYXNlU3RhdHNbaV0gKyBfaXZGb3JTdGF0c1tpXTsKICAgIH0KCiAgICAvLyBUZW1wb3JhcnkgaGVybyBpbnN0YW5jZS4KICAgIEhlcm9JbnN0YW5jZSBtZW1vcnkgX2hlcm9JbnN0YW5jZSA9IEhlcm9JbnN0YW5jZSh7CiAgICAgIGhlcm9DbGFzc0lkOiBfaGVyb0NsYXNzSWQsCiAgICAgIGhlcm9OYW1lOiAiIiwKICAgICAgY3VycmVudExldmVsOiAxLAogICAgICBjdXJyZW50RXhwOiAwLAogICAgICBsYXN0TG9jYXRpb25JZDogMCwKICAgICAgYXZhaWxhYmxlQXQ6IG5vdywKICAgICAgY3VycmVudFN0YXRzOiBfaW5pdGlhbFN0YXRzLAogICAgICBpdkZvclN0YXRzOiBfaXZGb3JTdGF0cwogICAgfSk7CgogICAgLy8gU2F2ZSB0aGUgaGVybyBpbnN0YW5jZS4KICAgIHRva2VuSWRUb0hlcm9JbnN0YW5jZVtudW1iZXJPZlRva2VuSWRzXSA9IF9oZXJvSW5zdGFuY2U7CgogICAgLy8gSW5jcmVtZW50IG51bWJlciBvZiB0b2tlbiBpZHMuCiAgICAvLyBUaGlzIHdpbGwgb25seSBpbmNyZW1lbnQgd2hlbiBuZXcgdG9rZW4gaXMgbWludGVkLCBhbmQgd2lsbCBuZXZlciBiZSBkZWNlbWVudGVkIHdoZW4gdGhlIHRva2VuIGlzIGJ1cm5lZC4KICAgIG51bWJlck9mVG9rZW5JZHMgKys7CgogICAgIC8vIEluY3JlbWVudCBpbnN0YW5jZWQgbnVtYmVyIG9mIGhlcm9lcy4KICAgIF9oZXJvQ2xhc3NJbmZvLmN1cnJlbnROdW1iZXJPZkluc3RhbmNlZEhlcm9lcyArKzsKCiAgICByZXR1cm4gbnVtYmVyT2ZUb2tlbklkcyAtIDE7CiAgfQoKICAvLyBAZGV2IFNldCB3aGVyZSB0aGUgaGVyb2VzIGFyZSBkZXBsb3llZCwgYW5kIHdoZW4gdGhleSB3aWxsIHJldHVybi4KICAvLyAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgYnkgRHVuZ2VvbiwgQXJlbmEsIEd1aWxkIGNvbnRyYWN0cy4KICBmdW5jdGlvbiBkZXBsb3kodWludDI1NiBfdG9rZW5JZCwgdWludDMyIF9sb2NhdGlvbklkLCB1aW50MjU2IF9kdXJhdGlvbikKICAgIG9ubHlBY2Nlc3NEZXBsb3kKICAgIHB1YmxpYwogICAgcmV0dXJucyAoYm9vbCkKICB7CiAgICAvLyBUaGUgaGVybyBzaG91bGQgYmUgcG9zc2Vzc2VkIGJ5IGFueWJvZHkuCiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpICE9IGFkZHJlc3MoMCkpOwoKICAgIHZhciBfaGVyb0luc3RhbmNlID0gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXTsKCiAgICAvLyBUaGUgY2hhcmFjdGVyIHNob3VsZCBiZSBhdmFpYWJsZS4gCiAgICByZXF1aXJlKF9oZXJvSW5zdGFuY2UuYXZhaWxhYmxlQXQgPD0gbm93KTsKCiAgICBfaGVyb0luc3RhbmNlLmxhc3RMb2NhdGlvbklkID0gX2xvY2F0aW9uSWQ7CiAgICBfaGVyb0luc3RhbmNlLmF2YWlsYWJsZUF0ID0gbm93ICsgX2R1cmF0aW9uOwoKICAgIC8vIEFzIHRoZSBoZXJvIGhhcyBiZWVuIGRlcGxveWVkIHRvIGFub3RoZXIgcGxhY2UsIGZpcmUgZXZlbnQuCiAgICBEZXBsb3kobXNnLnNlbmRlciwgX3Rva2VuSWQsIF9sb2NhdGlvbklkLCBfZHVyYXRpb24pOwogIH0KCiAgLy8gQGRldiBBZGQgZXhwLgogIC8vICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBieSBEdW5nZW9uLCBBcmVuYSwgR3VpbGQgY29udHJhY3RzLgogIGZ1bmN0aW9uIGFkZEV4cCh1aW50MjU2IF90b2tlbklkLCB1aW50MzIgX2V4cCkKICAgIG9ubHlBY2Nlc3NEZXBsb3kKICAgIHB1YmxpYwogICAgcmV0dXJucyAoYm9vbCkKICB7CiAgICAvLyBUaGUgaGVybyBzaG91bGQgYmUgcG9zc2Vzc2VkIGJ5IGFueWJvZHkuCiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpICE9IGFkZHJlc3MoMCkpOwoKICAgIHZhciBfaGVyb0luc3RhbmNlID0gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXTsKCiAgICB2YXIgX25ld0V4cCA9IF9oZXJvSW5zdGFuY2UuY3VycmVudEV4cCArIF9leHA7CgogICAgLy8gU2FuaXR5IGNoZWNrIHRvIGVuc3VyZSB3ZSBkb24ndCBvdmVyZmxvdy4KICAgIHJlcXVpcmUoX25ld0V4cCA9PSB1aW50MjU2KHVpbnQxMjgoX25ld0V4cCkpKTsKCiAgICBfaGVyb0luc3RhbmNlLmN1cnJlbnRFeHAgKz0gX25ld0V4cDsKCiAgfQoKICAvLyBAZGV2IEFkZCBkZXBvc2l0LgogIC8vICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBieSBEdW5nZW9uLCBBcmVuYSwgR3VpbGQgY29udHJhY3RzLgogIGZ1bmN0aW9uIGFkZERlcG9zaXQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkKICAgIG9ubHlBY2Nlc3NEZXBvc2l0CiAgICBwdWJsaWMKICB7CiAgICAvLyBJbmNyZW1lbnQgZGVwb3NpdC4KICAgIGFkZHJlc3NUb0dvbGREZXBvc2l0W190b10gKz0gX2Ftb3VudDsKICB9CgogIC8vIEBkZXYgTGV2ZWwgdXAgdGhlIGhlcm8gd2l0aCBfdG9rZW5JZC4KICAvLyAgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoZSBoZXJvLgogIGZ1bmN0aW9uIGxldmVsVXAodWludDI1NiBfdG9rZW5JZCkKICAgIG9ubHlPd25lck9mKF90b2tlbklkKSB3aGVuTm90UGF1c2VkCiAgICBwdWJsaWMKICB7CgogICAgLy8gSGVybyBpbnN0YW5jZS4KICAgIHZhciBfaGVyb0luc3RhbmNlID0gdG9rZW5JZFRvSGVyb0luc3RhbmNlW190b2tlbklkXTsKCiAgICAvLyBUaGUgY2hhcmFjdGVyIHNob3VsZCBiZSBhdmFpYWJsZS4gKFNob3VsZCBoYXZlIGFscmVhZHkgcmV0dXJuZWQgZnJvbSB0aGUgZHVuZ2VvbnMsIGFyZW5hcywgZXRjLikKICAgIHJlcXVpcmUoX2hlcm9JbnN0YW5jZS5hdmFpbGFibGVBdCA8PSBub3cpOwoKICAgIC8vIFRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgaGVybydzIGNsYXNzLgogICAgdmFyIF9oZXJvQ2xhc3NJbmZvID0gaGVyb0NsYXNzZXNbX2hlcm9JbnN0YW5jZS5oZXJvQ2xhc3NJZF07CgogICAgLy8gSGVybyBzaG91bGRuJ3QgbGV2ZWwgdXAgZXhjZWVkIGl0cyBtYXggbGV2ZWwuCiAgICByZXF1aXJlKF9oZXJvSW5zdGFuY2UuY3VycmVudExldmVsIDwgX2hlcm9DbGFzc0luZm8ubWF4TGV2ZWwpOwoKICAgIC8vIFJlcXVpcmVkIEV4cC4KICAgIHZhciByZXF1aXJlZEV4cCA9IGdldEhlcm9SZXF1aXJlZEV4cEZvckxldmVsVXAoX3Rva2VuSWQpOwoKICAgIC8vIE5lZWQgdG8gaGF2ZSBlbm91Z2ggZXhwLgogICAgcmVxdWlyZShfaGVyb0luc3RhbmNlLmN1cnJlbnRFeHAgPj0gcmVxdWlyZWRFeHApOwoKICAgIC8vIFJlcXVpcmVkIEdvbGQuCiAgICB2YXIgcmVxdWlyZWRHb2xkID0gZ2V0SGVyb1JlcXVpcmVkR29sZEZvckxldmVsVXAoX3Rva2VuSWQpOwoKICAgIC8vIE93bmVyIG9mIHRva2VuLgogICAgdmFyIF9vd25lck9mVG9rZW4gPSBvd25lck9mKF90b2tlbklkKTsKCiAgICAvLyBOZWVkIHRvIGhhdmUgZW5vdWdoIEdvbGQgYmFsYW5jZS4KICAgIHJlcXVpcmUoYWRkcmVzc1RvR29sZERlcG9zaXRbX293bmVyT2ZUb2tlbl0gPj0gcmVxdWlyZWRHb2xkKTsKCiAgICAvLyBJbmNyZWFzZSBMZXZlbC4KICAgIF9oZXJvSW5zdGFuY2UuY3VycmVudExldmVsICs9IDE7CgogICAgLy8gSW5jcmVhc2UgU3RhdHMuCiAgICBmb3IgKHVpbnQ4IGkgPSAwOyBpIDwgNTsgaSsrKSB7CiAgICAgIF9oZXJvSW5zdGFuY2UuY3VycmVudFN0YXRzW2ldID0gX2hlcm9DbGFzc0luZm8uYmFzZVN0YXRzW2ldICsgKF9oZXJvSW5zdGFuY2UuY3VycmVudExldmVsIC0gMSkgKiBfaGVyb0luc3RhbmNlLml2Rm9yU3RhdHNbaV07CiAgICB9CiAgICAKICAgIC8vIERlZHVjdCBleHAuCiAgICBfaGVyb0luc3RhbmNlLmN1cnJlbnRFeHAgLT0gcmVxdWlyZWRFeHA7CgogICAgLy8gRGVkdWN0IGdvbGQuCiAgICBhZGRyZXNzVG9Hb2xkRGVwb3NpdFtfb3duZXJPZlRva2VuXSAtPSByZXF1aXJlZEdvbGQ7CgogICAgLy8gRmlyZSBldmVudC4KICAgIExldmVsVXAobXNnLnNlbmRlciwgX3Rva2VuSWQsIF9oZXJvSW5zdGFuY2UuY3VycmVudExldmVsKTsKICB9CgogIC8vIEBkZXYgVHJhbnNmZXIgZGVwb3NpdCAod2l0aCB0aGUgYWxsb3dhbmNlIHBhdHRlcm4uKQogIGZ1bmN0aW9uIHRyYW5zZmVyRGVwb3NpdCh1aW50MjU2IF9hbW91bnQpCiAgICB3aGVuTm90UGF1c2VkCiAgICBwdWJsaWMKICB7CiAgICByZXF1aXJlKGdvbGRDb250cmFjdC5hbGxvd2FuY2UobXNnLnNlbmRlciwgdGhpcykgPj0gX2Ftb3VudCk7CgogICAgLy8gU2VuZCBtc2cuc2VuZGVyJ3MgR29sZCB0byB0aGlzIGNvbnRyYWN0LgogICAgaWYgKGdvbGRDb250cmFjdC50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgX2Ftb3VudCkpIHsKICAgICAgIC8vIEluY3JlbWVudCBkZXBvc2l0LgogICAgICBhZGRyZXNzVG9Hb2xkRGVwb3NpdFttc2cuc2VuZGVyXSArPSBfYW1vdW50OwogICAgfQogIH0KCiAgLy8gQGRldiBXaXRoZHJhdyBkZXBvc2l0LgogIGZ1bmN0aW9uIHdpdGhkcmF3RGVwb3NpdCh1aW50MjU2IF9hbW91bnQpCiAgICBwdWJsaWMKICB7CiAgICByZXF1aXJlKGFkZHJlc3NUb0dvbGREZXBvc2l0W21zZy5zZW5kZXJdID49IF9hbW91bnQpOwoKICAgIC8vIFNlbmQgZGVwb3NpdCBvZiBHb2xkcyB0byBtc2cuc2VuZGVyLiAoUmF0aGVyIG1pbnRpbmcuLi4pCiAgICBpZiAoZ29sZENvbnRyYWN0LnRyYW5zZmVyKG1zZy5zZW5kZXIsIF9hbW91bnQpKSB7CiAgICAgIC8vIERlY3JlbWVudCBkZXBvc2l0LgogICAgICBhZGRyZXNzVG9Hb2xkRGVwb3NpdFttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgfQogIH0KCiAgLy8gQGRldiByZXR1cm4gYSBwc2V1ZG8gcmFuZG9tIG51bWJlciBiZXR3ZWVuIGxvd2VyIGFuZCB1cHBlciBib3VuZHMKICBmdW5jdGlvbiByYW5kb20odWludDMyIF91cHBlciwgdWludDMyIF9sb3dlcikKICAgIHByaXZhdGUKICAgIHJldHVybnMgKHVpbnQzMikKICB7CiAgICByZXF1aXJlKF91cHBlciA+IF9sb3dlcik7CgogICAgc2VlZCA9IHVpbnQzMihrZWNjYWsyNTYoa2VjY2FrMjU2KGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIpLCBzZWVkKSwgbm93KSk7CiAgICByZXR1cm4gc2VlZCAlIChfdXBwZXIgLSBfbG93ZXIpICsgX2xvd2VyOwogIH0KCn0='.
	

]
