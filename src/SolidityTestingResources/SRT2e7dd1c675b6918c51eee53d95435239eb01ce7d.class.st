Class {
	#name : #SRT2e7dd1c675b6918c51eee53d95435239eb01ce7d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2e7dd1c675b6918c51eee53d95435239eb01ce7d >> base64 [
	^ ''.
	

]
