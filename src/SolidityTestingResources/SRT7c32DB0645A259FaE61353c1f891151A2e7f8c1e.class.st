Class {
	#name : #SRT7c32DB0645A259FaE61353c1f891151A2e7f8c1e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c32DB0645A259FaE61353c1f891151A2e7f8c1e >> base64 [
	^ ''.
	

]
