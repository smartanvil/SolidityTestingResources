Class {
	#name : #SRTccf09a5a9449b8d39e27f7fcffbb1a30ec29c8db,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTccf09a5a9449b8d39e27f7fcffbb1a30ec29c8db >> base64 [
	^ ''.
	

]
