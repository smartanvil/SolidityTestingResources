Class {
	#name : #SRT729d19f657bd0614b4985cf1d82531c67569197b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT729d19f657bd0614b4985cf1d82531c67569197b >> base64 [
	^ ''.
	

]
