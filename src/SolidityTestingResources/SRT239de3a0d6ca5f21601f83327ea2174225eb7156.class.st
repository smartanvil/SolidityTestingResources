Class {
	#name : #SRT239de3a0d6ca5f21601f83327ea2174225eb7156,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT239de3a0d6ca5f21601f83327ea2174225eb7156 >> base64 [
	^ 'LyoKCiAgQ29weXJpZ2h0IDIwMTcgTG9vcHJpbmcgUHJvamVjdCBMdGQgKExvb3ByaW5nIEZvdW5kYXRpb24pLgoKICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CgogIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoKICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgoqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4xMTsKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovKioKICogQHRpdGxlIE1hdGgKICogQGRldiBBc3NvcnRlZCBtYXRoIG9wZXJhdGlvbnMKICovCgpsaWJyYXJ5IE1hdGggewogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQp9CgovLyBBYnN0cmFjdCBjb250cmFjdCBmb3IgdGhlIGZ1bGwgRVJDIDIwIFRva2VuIHN0YW5kYXJkCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAoKY29udHJhY3QgVG9rZW4gewogICAgLyogVGhpcyBpcyBhIHNsaWdodCBjaGFuZ2UgdG8gdGhlIEVSQzIwIGJhc2Ugc3RhbmRhcmQuCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsKICAgIGlzIHJlcGxhY2VkIHdpdGg6CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgIFRoaXMgYXV0b21hdGljYWxseSBjcmVhdGVzIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgdG90YWxTdXBwbHkuCiAgICBUaGlzIGlzIG1vdmVkIHRvIHRoZSBiYXNlIGNvbnRyYWN0IHNpbmNlIHB1YmxpYyBnZXR0ZXIgZnVuY3Rpb25zIGFyZSBub3QKICAgIGN1cnJlbnRseSByZWNvZ25pc2VkIGFzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBtYXRjaGluZyBhYnN0cmFjdAogICAgZnVuY3Rpb24gYnkgdGhlIGNvbXBpbGVyLgogICAgKi8KICAgIC8vLyB0b3RhbCBhbW91bnQgb2YgdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkCiAgICAvLy8gQHJldHVybiBUaGUgYmFsYW5jZQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCgoKLy8vIEB0aXRsZSBMb25nLVRlYW0gSG9sZGluZyBJbmNlbnRpdmUgUHJvZ3JhbQovLy8gQGF1dGhvciBEYW5pZWwgV2FuZyAtIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9Ijg5ZWRlOGU3ZTBlY2U1YzllNWU2ZTZmOWZiZTBlN2VlYTdlNmZiZWUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PiwgS29uZ2xpYW5nIFpob25nIC0gPDxzcGFuIGNsYXNzPSJfX2NmX2VtYWlsX18iIGRhdGEtY2ZlbWFpbD0iZWM4NzgzODI4YjgwODU4ZDgyOGJhYzgwODM4MzljOWU4NTgyOGJjMjgzOWU4YiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4+LgovLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHBsZWFzZSB2aXNpdCBodHRwczovL2xvb3ByaW5nLm9yZy4KY29udHJhY3QgTFJDTG9uZ1Rlcm1Ib2xkaW5nQ29udHJhY3QgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICB1c2luZyBNYXRoIGZvciB1aW50OwogICAgCiAgICAvLyBEdXJpbmcgdGhlIGZpcnN0IDYwIGRheXMgb2YgZGVwbG95bWVudCwgdGhpcyBjb250cmFjdCBvcGVucyBmb3IgZGVwb3NpdCBvZiBMUkMuCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBERVBPU0lUX1BFUklPRCAgICAgICAgICAgICA9IDYwIGRheXM7IC8vID0gMiBtb250aHMKCiAgICAvLyAxOCBtb250aHMgYWZ0ZXIgZGVwb3NpdCwgdXNlciBjYW4gd2l0aGRyYXdhbCBhbGwgb3IgcGFydCBvZiBoaXMvaGVyIExSQyB3aXRoIGJvbnVzLgogICAgLy8gVGhlIGJvbnVzIGlzIHRoaXMgY29udHJhY3QncyBpbml0aWFsIExSQyBiYWxhbmNlLgogICAgdWludCBwdWJsaWMgY29uc3RhbnQgV0lUSERSQVdBTF9ERUxBWSAgICAgICAgICAgPSA1NDAgZGF5czsgLy8gPSAxIHllYXIgYW5kIDYgbW9udGhzCgogICAgLy8gU2VuZCAwLjAwMUVUSCBwZXIgMTAwMDAgTFJDIHBhcnRpYWwgd2l0aGRyYXdhbCwgb3IgMCBmb3IgYSBvbmNlLWZvci1hbGwgd2l0aGRyYXdhbC4KICAgIC8vIEFsbCBFVEggd2lsbCBiZSByZXR1cm5lZC4KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFdJVEhEUkFXQUxfU0NBTEUgICAgICAgICAgID0gMUU3OyAvLyAxRVRIIGZvciB3aXRoZHJhd2FsIG9mIDEwLDAwMCwwMDAgTFJDLgoKICAgIC8vIE93ZXIgY2FuIGRyYWluIGFsbCByZW1haW5pbmcgTFJDIGFmdGVyIDMgeWVhcnMuCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBEUkFJTl9ERUxBWSAgICAgICAgICAgICAgICA9IDEwODAgZGF5czsgLy8gPSAzIHllYXJzLgogICAgCiAgICBhZGRyZXNzIHB1YmxpYyBscmNUb2tlbkFkZHJlc3MgID0gMHgwOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXIgICAgICAgICAgICA9IDB4MDsKCiAgICB1aW50IHB1YmxpYyBscmNEZXBvc2l0ZWQgICAgICAgID0gMDsKICAgIHVpbnQgcHVibGljIGRlcG9zaXRTdGFydFRpbWUgICAgPSAwOwogICAgdWludCBwdWJsaWMgZGVwb3NpdFN0b3BUaW1lICAgICA9IDA7CgogICAgc3RydWN0IFJlY29yZCB7CiAgICAgICAgdWludCBscmNBbW91bnQ7CiAgICAgICAgdWludCB0aW1lc3RhbXA7CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBSZWNvcmQpIHJlY29yZHM7CiAgICAKICAgIC8qIAogICAgICogRVZFTlRTCiAgICAgKi8KCiAgICAvLy8gRW1pdHRlZCB3aGVuIHByb2dyYW0gc3RhcnRzLgogICAgZXZlbnQgU3RhcnRlZCh1aW50IF90aW1lKTsKCiAgICAvLy8gRW1pdHRlZCB3aGVuIGFsbCBMUkMgYXJlIGRyYWluZWQuCiAgICBldmVudCBEcmFpbmVkKHVpbnQgX2xyY0Ftb3VudCk7CgogICAgLy8vIEVtaXR0ZWQgZm9yIGVhY2ggc3VjdWVzc2Z1bCBkZXBvc2l0LgogICAgdWludCBwdWJsaWMgZGVwb3NpdElkID0gMDsKICAgIGV2ZW50IERlcG9zaXQodWludCBfZGVwb3NpdElkLCBhZGRyZXNzIGluZGV4ZWQgX2FkZHIsIHVpbnQgX2xyY0Ftb3VudCk7CgogICAgLy8vIEVtaXR0ZWQgZm9yIGVhY2ggc3VjdWVzc2Z1bCBkZXBvc2l0LgogICAgdWludCBwdWJsaWMgd2l0aGRyYXdJZCA9IDA7CiAgICBldmVudCBXaXRoZHJhd2FsKHVpbnQgX3dpdGhkcmF3SWQsIGFkZHJlc3MgaW5kZXhlZCBfYWRkciwgdWludCBfbHJjQW1vdW50KTsKCiAgICAvLy8gQGRldiBJbml0aWFsaXplIHRoZSBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfbHJjVG9rZW5BZGRyZXNzIExSQyBFUkMyMCB0b2tlbiBhZGRyZXNzCiAgICBmdW5jdGlvbiBMUkNMb25nVGVybUhvbGRpbmdDb250cmFjdChhZGRyZXNzIF9scmNUb2tlbkFkZHJlc3MsIGFkZHJlc3MgX293bmVyKSB7CiAgICAgICAgcmVxdWlyZShfbHJjVG9rZW5BZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX293bmVyICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBscmNUb2tlbkFkZHJlc3MgPSBfbHJjVG9rZW5BZGRyZXNzOwogICAgICAgIG93bmVyID0gX293bmVyOwogICAgfQoKICAgIC8qCiAgICAgKiBQVUJMSUMgRlVOQ1RJT05TCiAgICAgKi8KCiAgICAvLy8gQGRldiBzdGFydCB0aGUgcHJvZ3JhbS4KICAgIGZ1bmN0aW9uIHN0YXJ0KCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIHJlcXVpcmUoZGVwb3NpdFN0YXJ0VGltZSA9PSAwKTsKCiAgICAgICAgZGVwb3NpdFN0YXJ0VGltZSA9IG5vdzsKICAgICAgICBkZXBvc2l0U3RvcFRpbWUgID0gZGVwb3NpdFN0YXJ0VGltZSArIERFUE9TSVRfUEVSSU9EOwoKICAgICAgICBTdGFydGVkKGRlcG9zaXRTdGFydFRpbWUpOwogICAgfQoKCiAgICAvLy8gQGRldiBkcmFpbiBMUkMuCiAgICBmdW5jdGlvbiBkcmFpbigpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICByZXF1aXJlKGRlcG9zaXRTdGFydFRpbWUgPiAwICYmIG5vdyA+PSBkZXBvc2l0U3RhcnRUaW1lICsgRFJBSU5fREVMQVkpOwoKICAgICAgICB1aW50IGJhbGFuY2UgPSBscmNCYWxhbmNlKCk7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlID4gMCk7CgogICAgICAgIHJlcXVpcmUoVG9rZW4obHJjVG9rZW5BZGRyZXNzKS50cmFuc2Zlcihvd25lciwgYmFsYW5jZSkpOwoKICAgICAgICBEcmFpbmVkKGJhbGFuY2UpOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoZGVwb3NpdFN0YXJ0VGltZSA+IDApOwoKICAgICAgICBpZiAobm93ID49IGRlcG9zaXRTdGFydFRpbWUgJiYgbm93IDw9IGRlcG9zaXRTdG9wVGltZSkgewogICAgICAgICAgICBkZXBvc2l0TFJDKCk7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPiBkZXBvc2l0U3RvcFRpbWUpewogICAgICAgICAgICB3aXRoZHJhd0xSQygpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQHJldHVybiBDdXJyZW50IExSQyBiYWxhbmNlLgogICAgZnVuY3Rpb24gbHJjQmFsYW5jZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIFRva2VuKGxyY1Rva2VuQWRkcmVzcykuYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgfQoKICAgIC8vLyBAZGV2IERlcG9zaXQgTFJDLgogICAgZnVuY3Rpb24gZGVwb3NpdExSQygpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoZGVwb3NpdFN0YXJ0VGltZSA+IDApOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID09IDApOwogICAgICAgIHJlcXVpcmUobm93ID49IGRlcG9zaXRTdGFydFRpbWUgJiYgbm93IDw9IGRlcG9zaXRTdG9wVGltZSk7CiAgICAgICAgCiAgICAgICAgdmFyIGxyY1Rva2VuID0gVG9rZW4obHJjVG9rZW5BZGRyZXNzKTsKICAgICAgICB1aW50IGxyY0Ftb3VudCA9IGxyY1Rva2VuCiAgICAgICAgICAgIC5iYWxhbmNlT2YobXNnLnNlbmRlcikKICAgICAgICAgICAgLm1pbjI1NihscmNUb2tlbi5hbGxvd2FuY2UobXNnLnNlbmRlciwgYWRkcmVzcyh0aGlzKSkpOwoKICAgICAgICByZXF1aXJlKGxyY0Ftb3VudCA+IDApOwoKICAgICAgICB2YXIgcmVjb3JkID0gcmVjb3Jkc1ttc2cuc2VuZGVyXTsKICAgICAgICByZWNvcmQubHJjQW1vdW50ICs9IGxyY0Ftb3VudDsKICAgICAgICByZWNvcmQudGltZXN0YW1wID0gbm93OwogICAgICAgIHJlY29yZHNbbXNnLnNlbmRlcl0gPSByZWNvcmQ7CgogICAgICAgIGxyY0RlcG9zaXRlZCArPSBscmNBbW91bnQ7CgogICAgICAgIERlcG9zaXQoZGVwb3NpdElkKyssIG1zZy5zZW5kZXIsIGxyY0Ftb3VudCk7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShscmNUb2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgYWRkcmVzcyh0aGlzKSwgbHJjQW1vdW50KSk7CiAgICB9CgogICAgLy8vIEBkZXYgV2l0aGRyYXdhbCBMUkMuCiAgICBmdW5jdGlvbiB3aXRoZHJhd0xSQygpIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoZGVwb3NpdFN0YXJ0VGltZSA+IDApOwogICAgICAgIHJlcXVpcmUobHJjRGVwb3NpdGVkID4gMCk7CgogICAgICAgIHZhciByZWNvcmQgPSByZWNvcmRzW21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUobm93ID49IHJlY29yZC50aW1lc3RhbXAgKyBXSVRIRFJBV0FMX0RFTEFZKTsKICAgICAgICByZXF1aXJlKHJlY29yZC5scmNBbW91bnQgPiAwKTsKCiAgICAgICAgdWludCBscmNXaXRoZHJhd2FsQmFzZSA9IHJlY29yZC5scmNBbW91bnQ7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgbHJjV2l0aGRyYXdhbEJhc2UgPSBscmNXaXRoZHJhd2FsQmFzZQogICAgICAgICAgICAgICAgLm1pbjI1Nihtc2cudmFsdWUubXVsKFdJVEhEUkFXQUxfU0NBTEUpKTsKICAgICAgICB9CgogICAgICAgIHVpbnQgbHJjQm9udXMgPSBnZXRCb251cyhscmNXaXRoZHJhd2FsQmFzZSk7CiAgICAgICAgdWludCBiYWxhbmNlID0gbHJjQmFsYW5jZSgpOwogICAgICAgIHVpbnQgbHJjQW1vdW50ID0gYmFsYW5jZS5taW4yNTYobHJjV2l0aGRyYXdhbEJhc2UgKyBscmNCb251cyk7CiAgICAgICAgCiAgICAgICAgbHJjRGVwb3NpdGVkIC09IGxyY1dpdGhkcmF3YWxCYXNlOwogICAgICAgIHJlY29yZC5scmNBbW91bnQgLT0gbHJjV2l0aGRyYXdhbEJhc2U7CgogICAgICAgIGlmIChyZWNvcmQubHJjQW1vdW50ID09IDApIHsKICAgICAgICAgICAgZGVsZXRlIHJlY29yZHNbbXNnLnNlbmRlcl07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVjb3Jkc1ttc2cuc2VuZGVyXSA9IHJlY29yZDsKICAgICAgICB9CgogICAgICAgIFdpdGhkcmF3YWwod2l0aGRyYXdJZCsrLCBtc2cuc2VuZGVyLCBscmNBbW91bnQpOwoKICAgICAgICByZXF1aXJlKFRva2VuKGxyY1Rva2VuQWRkcmVzcykudHJhbnNmZXIobXNnLnNlbmRlciwgbHJjQW1vdW50KSk7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb251cyh1aW50IF9scmNXaXRoZHJhd2FsQmFzZSkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBpbnRlcm5hbENhbGN1bGF0ZUJvbnVzKGxyY0JhbGFuY2UoKSAtIGxyY0RlcG9zaXRlZCxscmNEZXBvc2l0ZWQsIF9scmNXaXRoZHJhd2FsQmFzZSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW50ZXJuYWxDYWxjdWxhdGVCb251cyh1aW50IF90b3RhbEJvbnVzUmVtYWluaW5nLCB1aW50IF9scmNEZXBvc2l0ZWQsIHVpbnQgX2xyY1dpdGhkcmF3YWxCYXNlKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmVxdWlyZShfbHJjRGVwb3NpdGVkID4gMCk7CiAgICAgICAgcmVxdWlyZShfdG90YWxCb251c1JlbWFpbmluZyA+PSAwKTsKCiAgICAgICAgLy8gVGhlIGJvbnVzIGlzIG5vbi1saW5lYXIgZnVuY3Rpb24gdG8gaW5jZW50aXZpemUgbGF0ZXIgd2l0aGRyYXdhbC4KICAgICAgICAvLyBib251cyA9IF90b3RhbEJvbnVzUmVtYWluaW5nICogcG93ZXIoX2xyY1dpdGhkcmF3YWxCYXNlL19scmNEZXBvc2l0ZWQsIDEuMDYyNSkKICAgICAgICByZXR1cm4gX3RvdGFsQm9udXNSZW1haW5pbmcKICAgICAgICAgICAgLm11bChfbHJjV2l0aGRyYXdhbEJhc2UubXVsKHNxcnQoc3FydChzcXJ0KHNxcnQoX2xyY1dpdGhkcmF3YWxCYXNlKSkpKSkpCiAgICAgICAgICAgIC5kaXYoX2xyY0RlcG9zaXRlZC5tdWwoc3FydChzcXJ0KHNxcnQoc3FydChfbHJjRGVwb3NpdGVkKSkpKSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNxcnQodWludCB4KSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCB5ID0geDsKICAgICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgICAgICB1aW50IHogPSAoeSArICh4IC8geSkpIC8gMjsKICAgICAgICAgICAgdWludCB3ID0gKHogKyAoeCAvIHopKSAvIDI7CiAgICAgICAgICAgIGlmICh3ID09IHkpIHsKICAgICAgICAgICAgICAgIGlmICh3IDwgeSkgcmV0dXJuIHc7CiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiB5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHkgPSB3OwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
