Class {
	#name : #SRTc3c94e2d9a33ab18d5578bd63dfdaa3e0ea74a49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc3c94e2d9a33ab18d5578bd63dfdaa3e0ea74a49 >> base64 [
	^ ''.
	

]
