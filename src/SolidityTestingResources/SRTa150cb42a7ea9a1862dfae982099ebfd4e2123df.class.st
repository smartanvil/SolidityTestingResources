Class {
	#name : #SRTa150cb42a7ea9a1862dfae982099ebfd4e2123df,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa150cb42a7ea9a1862dfae982099ebfd4e2123df >> base64 [
	^ ''.
	

]
