Class {
	#name : #SRT7728dfef5abd468669eb7f9b48a7f70a501ed29d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7728dfef5abd468669eb7f9b48a7f70a501ed29d >> base64 [
	^ ''.
	

]
