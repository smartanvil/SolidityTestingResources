Class {
	#name : #SRT0ef6d1808b129f77cc5fb3ef864acc06aa52fa3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ef6d1808b129f77cc5fb3ef864acc06aa52fa3d >> base64 [
	^ ''.
	

]
