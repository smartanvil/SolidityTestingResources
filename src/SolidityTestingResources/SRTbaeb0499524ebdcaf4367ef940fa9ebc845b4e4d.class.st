Class {
	#name : #SRTbaeb0499524ebdcaf4367ef940fa9ebc845b4e4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbaeb0499524ebdcaf4367ef940fa9ebc845b4e4d >> base64 [
	^ ''.
	

]
