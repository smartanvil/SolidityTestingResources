Class {
	#name : #SRTcc89405e3cfd38412093840a3ac2f851dd395dfb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc89405e3cfd38412093840a3ac2f851dd395dfb >> base64 [
	^ ''.
	

]
