Class {
	#name : #SRTd5085438af50e9d08011412351673ae00faae544,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd5085438af50e9d08011412351673ae00faae544 >> base64 [
	^ ''.
	

]
