Class {
	#name : #SRT0DE52e935f36Be729f339bA68233A25a3b47362a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0DE52e935f36Be729f339bA68233A25a3b47362a >> base64 [
	^ 'LyoKICogVGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgTXlXaXNoIFBsYXRmb3JtIChodHRwczovL215d2lzaC5pby8pCiAqIFRoZSBjb21wbGV0ZSBjb2RlIGNvdWxkIGJlIGZvdW5kIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9NeVdpc2hQbGF0Zm9ybS8KICogQ29weXJpZ2h0IChDKSAyMDE4IE15V2lzaAogKgogKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZQogKiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCiAqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgoKLyoqCiAqIEB0aXRsZSBNaW50YWJsZSB0b2tlbgogKiBAZGV2IFNpbXBsZSBFUkMyMCBUb2tlbiBleGFtcGxlLCB3aXRoIG1pbnRhYmxlIHRva2VuIGNyZWF0aW9uCiAqIEBkZXYgSXNzdWU6ICogaHR0cHM6Ly9naXRodWIuY29tL09wZW5aZXBwZWxpbi96ZXBwZWxpbi1zb2xpZGl0eS9pc3N1ZXMvMTIwCiAqIEJhc2VkIG9uIGNvZGUgYnkgVG9rZW5NYXJrZXROZXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub2tlbk1hcmtldE5ldC9pY28vYmxvYi9tYXN0ZXIvY29udHJhY3RzL01pbnRhYmxlVG9rZW4uc29sCiAqLwoKY29udHJhY3QgTWludGFibGVUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBPd25hYmxlIHsKICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiBhbW91bnQpOwogIGV2ZW50IE1pbnRGaW5pc2hlZCgpOwoKICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCgogIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICByZXF1aXJlKCFtaW50aW5nRmluaXNoZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gbWludCB0b2tlbnMKICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSBtaW50ZWQgdG9rZW5zLgogICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICogQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKiBAZGV2IENyb3dkc2FsZSBpcyBhIGJhc2UgY29udHJhY3QgZm9yIG1hbmFnaW5nIGEgdG9rZW4gY3Jvd2RzYWxlLgogKiBDcm93ZHNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KY29udHJhY3QgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBNaW50YWJsZVRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgdWludDI1NiBwdWJsaWMgZW5kVGltZTsKCiAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogIHVpbnQyNTYgcHVibGljIHJhdGU7CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCgogIGZ1bmN0aW9uIENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3JhdGUsIGFkZHJlc3MgX3dhbGxldCkgcHVibGljIHsKICAgIHJlcXVpcmUoX3N0YXJ0VGltZSA+PSBub3cpOwogICAgcmVxdWlyZShfZW5kVGltZSA+PSBfc3RhcnRUaW1lKTsKICAgIHJlcXVpcmUoX3JhdGUgPiAwKTsKICAgIHJlcXVpcmUoX3dhbGxldCAhPSBhZGRyZXNzKDApKTsKCiAgICB0b2tlbiA9IGNyZWF0ZVRva2VuQ29udHJhY3QoKTsKICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICByYXRlID0gX3JhdGU7CiAgICB3YWxsZXQgPSBfd2FsbGV0OwogIH0KCiAgLy8gY3JlYXRlcyB0aGUgdG9rZW4gdG8gYmUgc29sZC4KICAvLyBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBoYXZlIGNyb3dkc2FsZSBvZiBhIHNwZWNpZmljIG1pbnRhYmxlIHRva2VuLgogIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoKSBpbnRlcm5hbCByZXR1cm5zIChNaW50YWJsZVRva2VuKSB7CiAgICByZXR1cm4gbmV3IE1pbnRhYmxlVG9rZW4oKTsKICB9CgoKICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgIHVpbnQyNTYgdG9rZW5zID0gd2VpQW1vdW50Lm11bChyYXRlKTsKCiAgICAvLyB1cGRhdGUgc3RhdGUKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwoKICAgIGZvcndhcmRGdW5kcygpOwogIH0KCiAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogIC8vIG92ZXJyaWRlIHRvIGNyZWF0ZSBjdXN0b20gZnVuZCBmb3J3YXJkaW5nIG1lY2hhbmlzbXMKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2U7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIG5vdyA+IGVuZFRpbWU7CiAgfQoKCn0KCgovKioKICogQHRpdGxlIEZpbmFsaXphYmxlQ3Jvd2RzYWxlCiAqIEBkZXYgRXh0ZW5zaW9uIG9mIENyb3dkc2FsZSB3aGVyZSBhbiBvd25lciBjYW4gZG8gZXh0cmEgd29yawogKiBhZnRlciBmaW5pc2hpbmcuCiAqLwpjb250cmFjdCBGaW5hbGl6YWJsZUNyb3dkc2FsZSBpcyBDcm93ZHNhbGUsIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBib29sIHB1YmxpYyBpc0ZpbmFsaXplZCA9IGZhbHNlOwoKICBldmVudCBGaW5hbGl6ZWQoKTsKCiAgLyoqCiAgICogQGRldiBNdXN0IGJlIGNhbGxlZCBhZnRlciBjcm93ZHNhbGUgZW5kcywgdG8gZG8gc29tZSBleHRyYSBmaW5hbGl6YXRpb24KICAgKiB3b3JrLiBDYWxscyB0aGUgY29udHJhY3QncyBmaW5hbGl6YXRpb24gZnVuY3Rpb24uCiAgICovCiAgZnVuY3Rpb24gZmluYWxpemUoKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUoIWlzRmluYWxpemVkKTsKICAgIHJlcXVpcmUoaGFzRW5kZWQoKSk7CgogICAgZmluYWxpemF0aW9uKCk7CiAgICBGaW5hbGl6ZWQoKTsKCiAgICBpc0ZpbmFsaXplZCA9IHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IENhbiBiZSBvdmVycmlkZGVuIHRvIGFkZCBmaW5hbGl6YXRpb24gbG9naWMuIFRoZSBvdmVycmlkaW5nIGZ1bmN0aW9uCiAgICogc2hvdWxkIGNhbGwgc3VwZXIuZmluYWxpemF0aW9uKCkgdG8gZW5zdXJlIHRoZSBjaGFpbiBvZiBmaW5hbGl6YXRpb24gaXMKICAgKiBleGVjdXRlZCBlbnRpcmVseS4KICAgKi8KICBmdW5jdGlvbiBmaW5hbGl6YXRpb24oKSBpbnRlcm5hbCB7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBSZWZ1bmRWYXVsdAogKiBAZGV2IFRoaXMgY29udHJhY3QgaXMgdXNlZCBmb3Igc3RvcmluZyBmdW5kcyB3aGlsZSBhIGNyb3dkc2FsZQogKiBpcyBpbiBwcm9ncmVzcy4gU3VwcG9ydHMgcmVmdW5kaW5nIHRoZSBtb25leSBpZiBjcm93ZHNhbGUgZmFpbHMsCiAqIGFuZCBmb3J3YXJkaW5nIGl0IGlmIGNyb3dkc2FsZSBpcyBzdWNjZXNzZnVsLgogKi8KY29udHJhY3QgUmVmdW5kVmF1bHQgaXMgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIGVudW0gU3RhdGUgeyBBY3RpdmUsIFJlZnVuZGluZywgQ2xvc2VkIH0KCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgZGVwb3NpdGVkOwogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKICBTdGF0ZSBwdWJsaWMgc3RhdGU7CgogIGV2ZW50IENsb3NlZCgpOwogIGV2ZW50IFJlZnVuZHNFbmFibGVkKCk7CiAgZXZlbnQgUmVmdW5kZWQoYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHdlaUFtb3VudCk7CgogIGZ1bmN0aW9uIFJlZnVuZFZhdWx0KGFkZHJlc3MgX3dhbGxldCkgcHVibGljIHsKICAgIHJlcXVpcmUoX3dhbGxldCAhPSBhZGRyZXNzKDApKTsKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICBzdGF0ZSA9IFN0YXRlLkFjdGl2ZTsKICB9CgogIGZ1bmN0aW9uIGRlcG9zaXQoYWRkcmVzcyBpbnZlc3Rvcikgb25seU93bmVyIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQWN0aXZlKTsKICAgIGRlcG9zaXRlZFtpbnZlc3Rvcl0gPSBkZXBvc2l0ZWRbaW52ZXN0b3JdLmFkZChtc2cudmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gY2xvc2UoKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQWN0aXZlKTsKICAgIHN0YXRlID0gU3RhdGUuQ2xvc2VkOwogICAgQ2xvc2VkKCk7CiAgICB3YWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICB9CgogIGZ1bmN0aW9uIGVuYWJsZVJlZnVuZHMoKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUoc3RhdGUgPT0gU3RhdGUuQWN0aXZlKTsKICAgIHN0YXRlID0gU3RhdGUuUmVmdW5kaW5nOwogICAgUmVmdW5kc0VuYWJsZWQoKTsKICB9CgogIGZ1bmN0aW9uIHJlZnVuZChhZGRyZXNzIGludmVzdG9yKSBwdWJsaWMgewogICAgcmVxdWlyZShzdGF0ZSA9PSBTdGF0ZS5SZWZ1bmRpbmcpOwogICAgdWludDI1NiBkZXBvc2l0ZWRWYWx1ZSA9IGRlcG9zaXRlZFtpbnZlc3Rvcl07CiAgICBkZXBvc2l0ZWRbaW52ZXN0b3JdID0gMDsKICAgIGludmVzdG9yLnRyYW5zZmVyKGRlcG9zaXRlZFZhbHVlKTsKICAgIFJlZnVuZGVkKGludmVzdG9yLCBkZXBvc2l0ZWRWYWx1ZSk7CiAgfQp9CgoKCmNvbnRyYWN0IEZyZWV6YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewogICAgLy8gZnJlZXppbmcgY2hhaW5zCiAgICBtYXBwaW5nIChieXRlczMyID0+IHVpbnQ2NCkgaW50ZXJuYWwgY2hhaW5zOwogICAgLy8gZnJlZXppbmcgYW1vdW50cyBmb3IgZWFjaCBjaGFpbgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiB1aW50KSBpbnRlcm5hbCBmcmVlemluZ3M7CiAgICAvLyB0b3RhbCBmcmVlemluZyBiYWxhbmNlIHBlciBhZGRyZXNzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIGludGVybmFsIGZyZWV6aW5nQmFsYW5jZTsKCiAgICBldmVudCBGcmVlemVkKGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDY0IHJlbGVhc2UsIHVpbnQgYW1vdW50KTsKICAgIGV2ZW50IFJlbGVhc2VkKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludCBhbW91bnQpOwoKCiAgICAvKioKICAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaW5jbHVkZSBmcmVlemluZyB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIHN1cGVyLmJhbGFuY2VPZihfb3duZXIpICsgZnJlZXppbmdCYWxhbmNlW19vd25lcl07CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzIHdpdGhvdXQgZnJlZXppbmcgdG9rZW5zLgogICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgICAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBhY3R1YWxCYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBzdXBlci5iYWxhbmNlT2YoX293bmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmcmVlemluZ0JhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGZyZWV6aW5nQmFsYW5jZVtfb3duZXJdOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBnZXRzIGZyZWV6aW5nIGNvdW50CiAgICAgKiBAcGFyYW0gX2FkZHIgQWRkcmVzcyBvZiBmcmVlemUgdG9rZW5zIG93bmVyLgogICAgICovCiAgICBmdW5jdGlvbiBmcmVlemluZ0NvdW50KGFkZHJlc3MgX2FkZHIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgY291bnQpIHsKICAgICAgICB1aW50NjQgcmVsZWFzZSA9IGNoYWluc1t0b0tleShfYWRkciwgMCldOwogICAgICAgIHdoaWxlIChyZWxlYXNlICE9IDApIHsKICAgICAgICAgICAgY291bnQgKys7CiAgICAgICAgICAgIHJlbGVhc2UgPSBjaGFpbnNbdG9LZXkoX2FkZHIsIHJlbGVhc2UpXTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldHMgZnJlZXppbmcgZW5kIGRhdGUgYW5kIGZyZWV6aW5nIGJhbGFuY2UgZm9yIHRoZSBmcmVlemluZyBwb3J0aW9uIHNwZWNpZmllZCBieSBpbmRleC4KICAgICAqIEBwYXJhbSBfYWRkciBBZGRyZXNzIG9mIGZyZWV6ZSB0b2tlbnMgb3duZXIuCiAgICAgKiBAcGFyYW0gX2luZGV4IEZyZWV6aW5nIHBvcnRpb24gaW5kZXguIEl0IG9yZGVyZWQgYnkgcmVsZWFzZSBkYXRlIGRlc2NlbmRpbmcuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEZyZWV6aW5nKGFkZHJlc3MgX2FkZHIsIHVpbnQgX2luZGV4KSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50NjQgX3JlbGVhc2UsIHVpbnQgX2JhbGFuY2UpIHsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfaW5kZXggKyAxOyBpICsrKSB7CiAgICAgICAgICAgIF9yZWxlYXNlID0gY2hhaW5zW3RvS2V5KF9hZGRyLCBfcmVsZWFzZSldOwogICAgICAgICAgICBpZiAoX3JlbGVhc2UgPT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIF9iYWxhbmNlID0gZnJlZXppbmdzW3RvS2V5KF9hZGRyLCBfcmVsZWFzZSldOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBmcmVlemUgeW91ciB0b2tlbnMgdG8gdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgICogICAgICBCZSBjYXJlZnVsLCBnYXMgdXNhZ2UgaXMgbm90IGRldGVybWluaXN0aWMsCiAgICAgKiAgICAgIGFuZCBkZXBlbmRzIG9uIGhvdyBtYW55IGZyZWV6ZXMgX3RvIGFkZHJlc3MgYWxyZWFkeSBoYXMuCiAgICAgKiBAcGFyYW0gX3RvIEFkZHJlc3MgdG8gd2hpY2ggdG9rZW4gd2lsbCBiZSBmcmVlemUuCiAgICAgKiBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgdG9rZW4gdG8gZnJlZXplLgogICAgICogQHBhcmFtIF91bnRpbCBSZWxlYXNlIGRhdGUsIG11c3QgYmUgaW4gZnV0dXJlLgogICAgICovCiAgICBmdW5jdGlvbiBmcmVlemVUbyhhZGRyZXNzIF90bywgdWludCBfYW1vdW50LCB1aW50NjQgX3VudGlsKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF9hbW91bnQpOwoKICAgICAgICBieXRlczMyIGN1cnJlbnRLZXkgPSB0b0tleShfdG8sIF91bnRpbCk7CiAgICAgICAgZnJlZXppbmdzW2N1cnJlbnRLZXldID0gZnJlZXppbmdzW2N1cnJlbnRLZXldLmFkZChfYW1vdW50KTsKICAgICAgICBmcmVlemluZ0JhbGFuY2VbX3RvXSA9IGZyZWV6aW5nQmFsYW5jZVtfdG9dLmFkZChfYW1vdW50KTsKCiAgICAgICAgZnJlZXplKF90bywgX3VudGlsKTsKICAgICAgICBGcmVlemVkKF90bywgX3VudGlsLCBfYW1vdW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgcmVsZWFzZSBmaXJzdCBhdmFpbGFibGUgZnJlZXppbmcgdG9rZW5zLgogICAgICovCiAgICBmdW5jdGlvbiByZWxlYXNlT25jZSgpIHB1YmxpYyB7CiAgICAgICAgYnl0ZXMzMiBoZWFkS2V5ID0gdG9LZXkobXNnLnNlbmRlciwgMCk7CiAgICAgICAgdWludDY0IGhlYWQgPSBjaGFpbnNbaGVhZEtleV07CiAgICAgICAgcmVxdWlyZShoZWFkICE9IDApOwogICAgICAgIHJlcXVpcmUodWludDY0KGJsb2NrLnRpbWVzdGFtcCkgPiBoZWFkKTsKICAgICAgICBieXRlczMyIGN1cnJlbnRLZXkgPSB0b0tleShtc2cuc2VuZGVyLCBoZWFkKTsKCiAgICAgICAgdWludDY0IG5leHQgPSBjaGFpbnNbY3VycmVudEtleV07CgogICAgICAgIHVpbnQgYW1vdW50ID0gZnJlZXppbmdzW2N1cnJlbnRLZXldOwogICAgICAgIGRlbGV0ZSBmcmVlemluZ3NbY3VycmVudEtleV07CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKGFtb3VudCk7CiAgICAgICAgZnJlZXppbmdCYWxhbmNlW21zZy5zZW5kZXJdID0gZnJlZXppbmdCYWxhbmNlW21zZy5zZW5kZXJdLnN1YihhbW91bnQpOwoKICAgICAgICBpZiAobmV4dCA9PSAwKSB7CiAgICAgICAgICAgIGRlbGV0ZSBjaGFpbnNbaGVhZEtleV07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBjaGFpbnNbaGVhZEtleV0gPSBuZXh0OwogICAgICAgICAgICBkZWxldGUgY2hhaW5zW2N1cnJlbnRLZXldOwogICAgICAgIH0KICAgICAgICBSZWxlYXNlZChtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiByZWxlYXNlIGFsbCBhdmFpbGFibGUgZm9yIHJlbGVhc2UgZnJlZXppbmcgdG9rZW5zLiBHYXMgdXNhZ2UgaXMgbm90IGRldGVybWluaXN0aWMhCiAgICAgKiBAcmV0dXJuIGhvdyBtYW55IHRva2VucyB3YXMgcmVsZWFzZWQKICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZUFsbCgpIHB1YmxpYyByZXR1cm5zICh1aW50IHRva2VucykgewogICAgICAgIHVpbnQgcmVsZWFzZTsKICAgICAgICB1aW50IGJhbGFuY2U7CiAgICAgICAgKHJlbGVhc2UsIGJhbGFuY2UpID0gZ2V0RnJlZXppbmcobXNnLnNlbmRlciwgMCk7CiAgICAgICAgd2hpbGUgKHJlbGVhc2UgIT0gMCAmJiBibG9jay50aW1lc3RhbXAgPiByZWxlYXNlKSB7CiAgICAgICAgICAgIHJlbGVhc2VPbmNlKCk7CiAgICAgICAgICAgIHRva2VucyArPSBiYWxhbmNlOwogICAgICAgICAgICAocmVsZWFzZSwgYmFsYW5jZSkgPSBnZXRGcmVlemluZyhtc2cuc2VuZGVyLCAwKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdG9LZXkoYWRkcmVzcyBfYWRkciwgdWludCBfcmVsZWFzZSkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChieXRlczMyIHJlc3VsdCkgewogICAgICAgIC8vIFdJU0ggbWFzYyB0byBpbmNyZWFzZSBlbnRyb3B5CiAgICAgICAgcmVzdWx0ID0gMHg1NzQ5NTM0ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgcmVzdWx0IDo9IG9yKHJlc3VsdCwgbXVsKF9hZGRyLCAweDEwMDAwMDAwMDAwMDAwMDAwKSkKICAgICAgICAgICAgcmVzdWx0IDo9IG9yKHJlc3VsdCwgX3JlbGVhc2UpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGZyZWV6ZShhZGRyZXNzIF90bywgdWludDY0IF91bnRpbCkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX3VudGlsID4gYmxvY2sudGltZXN0YW1wKTsKICAgICAgICBieXRlczMyIGtleSA9IHRvS2V5KF90bywgX3VudGlsKTsKICAgICAgICBieXRlczMyIHBhcmVudEtleSA9IHRvS2V5KF90bywgdWludDY0KDApKTsKICAgICAgICB1aW50NjQgbmV4dCA9IGNoYWluc1twYXJlbnRLZXldOwoKICAgICAgICBpZiAobmV4dCA9PSAwKSB7CiAgICAgICAgICAgIGNoYWluc1twYXJlbnRLZXldID0gX3VudGlsOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBieXRlczMyIG5leHRLZXkgPSB0b0tleShfdG8sIG5leHQpOwogICAgICAgIHVpbnQgcGFyZW50OwoKICAgICAgICB3aGlsZSAobmV4dCAhPSAwICYmIF91bnRpbCA+IG5leHQpIHsKICAgICAgICAgICAgcGFyZW50ID0gbmV4dDsKICAgICAgICAgICAgcGFyZW50S2V5ID0gbmV4dEtleTsKCiAgICAgICAgICAgIG5leHQgPSBjaGFpbnNbbmV4dEtleV07CiAgICAgICAgICAgIG5leHRLZXkgPSB0b0tleShfdG8sIG5leHQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKF91bnRpbCA9PSBuZXh0KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChuZXh0ICE9IDApIHsKICAgICAgICAgICAgY2hhaW5zW2tleV0gPSBuZXh0OwogICAgICAgIH0KCiAgICAgICAgY2hhaW5zW3BhcmVudEtleV0gPSBfdW50aWw7CiAgICB9Cn0KCi8qKgoqIEB0aXRsZSBDb250cmFjdCB0aGF0IHdpbGwgd29yayB3aXRoIEVSQzIyMyB0b2tlbnMuCiovCgpjb250cmFjdCBFUkMyMjNSZWNlaXZlciB7CiAgICAvKioKICAgICAqIEBkZXYgU3RhbmRhcmQgRVJDMjIzIGZ1bmN0aW9uIHRoYXQgd2lsbCBoYW5kbGUgaW5jb21pbmcgdG9rZW4gdHJhbnNmZXJzLgogICAgICoKICAgICAqIEBwYXJhbSBfZnJvbSAgVG9rZW4gc2VuZGVyIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiB0b2tlbnMuCiAgICAgKiBAcGFyYW0gX2RhdGEgIFRyYW5zYWN0aW9uIG1ldGFkYXRhLgogICAgICovCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljOwp9Cgpjb250cmFjdCBFUkMyMjNCYXNpYyBpcyBFUkMyMEJhc2ljIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpOwp9CgoKY29udHJhY3QgU3VjY2Vzc2Z1bEVSQzIyM1JlY2VpdmVyIGlzIEVSQzIyM1JlY2VpdmVyIHsKICAgIGV2ZW50IEludm9rZWQoYWRkcmVzcyBmcm9tLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhKTsKCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljIHsKICAgICAgICBJbnZva2VkKF9mcm9tLCBfdmFsdWUsIF9kYXRhKTsKICAgIH0KfQoKY29udHJhY3QgRmFpbGluZ0VSQzIyM1JlY2VpdmVyIGlzIEVSQzIyM1JlY2VpdmVyIHsKICAgIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soYWRkcmVzcywgdWludCwgYnl0ZXMpIHB1YmxpYyB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cn0KCmNvbnRyYWN0IEVSQzIyM1JlY2VpdmVyV2l0aG91dFRva2VuRmFsbGJhY2sgewp9CgovKioKICogQHRpdGxlIEJ1cm5hYmxlIFRva2VuCiAqIEBkZXYgVG9rZW4gdGhhdCBjYW4gYmUgaXJyZXZlcnNpYmx5IGJ1cm5lZCAoZGVzdHJveWVkKS4KICovCmNvbnRyYWN0IEJ1cm5hYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgYnVybmVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICAvKioKICAgICAqIEBkZXYgQnVybnMgYSBzcGVjaWZpYyBhbW91bnQgb2YgdG9rZW5zLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIGJ1cm5lZC4KICAgICAqLwogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBubyBuZWVkIHRvIHJlcXVpcmUgdmFsdWUgPD0gdG90YWxTdXBwbHksIHNpbmNlIHRoYXQgd291bGQgaW1wbHkgdGhlCiAgICAgICAgLy8gc2VuZGVyJ3MgYmFsYW5jZSBpcyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsU3VwcGx5LCB3aGljaCAqc2hvdWxkKiBiZSBhbiBhc3NlcnRpb24gZmFpbHVyZQoKICAgICAgICBhZGRyZXNzIGJ1cm5lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmFsYW5jZXNbYnVybmVyXSA9IGJhbGFuY2VzW2J1cm5lcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5zdWIoX3ZhbHVlKTsKICAgICAgICBCdXJuKGJ1cm5lciwgX3ZhbHVlKTsKICAgIH0KfQoKCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgbm90IHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSBmYWxzZTsKICAgIFVucGF1c2UoKTsKICB9Cn0KCgoKY29udHJhY3QgRnJlZXphYmxlTWludGFibGVUb2tlbiBpcyBGcmVlemFibGVUb2tlbiwgTWludGFibGVUb2tlbiB7CiAgICAvKioKICAgICAqIEBkZXYgTWludCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbiB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgYW5kIGZyZWV6ZSBpdCB1bnRpbCB0aGUgc3BlY2lmaWVkIGRhdGUuCiAgICAgKiAgICAgIEJlIGNhcmVmdWwsIGdhcyB1c2FnZSBpcyBub3QgZGV0ZXJtaW5pc3RpYywKICAgICAqICAgICAgYW5kIGRlcGVuZHMgb24gaG93IG1hbnkgZnJlZXplcyBfdG8gYWRkcmVzcyBhbHJlYWR5IGhhcy4KICAgICAqIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGljaCB0b2tlbiB3aWxsIGJlIGZyZWV6ZS4KICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiB0b2tlbiB0byBtaW50IGFuZCBmcmVlemUuCiAgICAgKiBAcGFyYW0gX3VudGlsIFJlbGVhc2UgZGF0ZSwgbXVzdCBiZSBpbiBmdXR1cmUuCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50QW5kRnJlZXplKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQsIHVpbnQ2NCBfdW50aWwpIG9ubHlPd25lciBjYW5NaW50IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CgogICAgICAgIGJ5dGVzMzIgY3VycmVudEtleSA9IHRvS2V5KF90bywgX3VudGlsKTsKICAgICAgICBmcmVlemluZ3NbY3VycmVudEtleV0gPSBmcmVlemluZ3NbY3VycmVudEtleV0uYWRkKF9hbW91bnQpOwogICAgICAgIGZyZWV6aW5nQmFsYW5jZVtfdG9dID0gZnJlZXppbmdCYWxhbmNlW190b10uYWRkKF9hbW91bnQpOwoKICAgICAgICBmcmVlemUoX3RvLCBfdW50aWwpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBGcmVlemVkKF90bywgX3VudGlsLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgQ29uc3RzIHsKICAgIHVpbnQgY29uc3RhbnQgVE9LRU5fREVDSU1BTFMgPSAxODsKICAgIHVpbnQ4IGNvbnN0YW50IFRPS0VOX0RFQ0lNQUxTX1VJTlQ4ID0gMTg7CiAgICB1aW50IGNvbnN0YW50IFRPS0VOX0RFQ0lNQUxfTVVMVElQTElFUiA9IDEwICoqIFRPS0VOX0RFQ0lNQUxTOwoKICAgIHN0cmluZyBjb25zdGFudCBUT0tFTl9OQU1FID0gIktBU0giOwogICAgc3RyaW5nIGNvbnN0YW50IFRPS0VOX1NZTUJPTCA9ICJLQVNIIjsKICAgIGJvb2wgY29uc3RhbnQgUEFVU0VEID0gdHJ1ZTsKICAgIGFkZHJlc3MgY29uc3RhbnQgVEFSR0VUX1VTRVIgPSAweEE0NDYxNDY1NTMxYTkwZEYwNGY1Mjg3MzUwN0I3QzU5MjAxNjViNWQ7CiAgICAKICAgIHVpbnQgY29uc3RhbnQgU1RBUlRfVElNRSA9IDE1MjMxNjAwMTQ7CiAgICAKICAgIGJvb2wgY29uc3RhbnQgQ09OVElOVUVfTUlOVElORyA9IGZhbHNlOwp9CgoKCgovKioKICogQHRpdGxlIFJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgRVJDMjIzIHN0YW5kYXJkIHRva2VuLgogKi8KY29udHJhY3QgRVJDMjIzVG9rZW4gaXMgRVJDMjIzQmFzaWMsIEJhc2ljVG9rZW4sIEZhaWxpbmdFUkMyMjNSZWNlaXZlciB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIHRvIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAgICAqICAgICAgSW52b2tlcyB0aGUgYHRva2VuRmFsbGJhY2tgIGZ1bmN0aW9uIGlmIHRoZSByZWNpcGllbnQgaXMgYSBjb250cmFjdC4KICAgICAqICAgICAgVGhlIHRva2VuIHRyYW5zZmVyIGZhaWxzIGlmIHRoZSByZWNpcGllbnQgaXMgYSBjb250cmFjdAogICAgICogICAgICBidXQgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBgdG9rZW5GYWxsYmFja2AgZnVuY3Rpb24KICAgICAqICAgICAgb3IgdGhlIGZhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlY2VpdmUgZnVuZHMuCiAgICAgKgogICAgICogQHBhcmFtIF90byAgICBSZWNlaXZlciBhZGRyZXNzLgogICAgICogQHBhcmFtIF92YWx1ZSBBbW91bnQgb2YgdG9rZW5zIHRoYXQgd2lsbCBiZSB0cmFuc2ZlcnJlZC4KICAgICAqIEBwYXJhbSBfZGF0YSAgVHJhbnNhY3Rpb24gbWV0YWRhdGEuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgLy8gU3RhbmRhcmQgZnVuY3Rpb24gdHJhbnNmZXIgc2ltaWxhciB0byBFUkMyMCB0cmFuc2ZlciB3aXRoIG5vIF9kYXRhIC4KICAgICAgICAvLyBBZGRlZCBkdWUgdG8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucyAuCiAgICAgICAgdWludCBjb2RlTGVuZ3RoOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5LgogICAgICAgICAgICBjb2RlTGVuZ3RoIDo9IGV4dGNvZGVzaXplKF90bykKICAgICAgICB9CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgaWYoY29kZUxlbmd0aCA+IDApIHsKICAgICAgICAgICAgRVJDMjIzUmVjZWl2ZXIgcmVjZWl2ZXIgPSBFUkMyMjNSZWNlaXZlcihfdG8pOwogICAgICAgICAgICByZWNlaXZlci50b2tlbkZhbGxiYWNrKG1zZy5zZW5kZXIsIF92YWx1ZSwgX2RhdGEpOwogICAgICAgIH0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBUcmFuc2ZlciB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgdG8gdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICAgICogICAgICBUaGlzIGZ1bmN0aW9uIHdvcmtzIHRoZSBzYW1lIHdpdGggdGhlIHByZXZpb3VzIG9uZQogICAgICogICAgICBidXQgZG9lc24ndCBjb250YWluIGBfZGF0YWAgcGFyYW0uCiAgICAgKiAgICAgIEFkZGVkIGR1ZSB0byBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zLgogICAgICoKICAgICAqIEBwYXJhbSBfdG8gICAgUmVjZWl2ZXIgYWRkcmVzcy4KICAgICAqIEBwYXJhbSBfdmFsdWUgQW1vdW50IG9mIHRva2VucyB0aGF0IHdpbGwgYmUgdHJhbnNmZXJyZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBieXRlcyBtZW1vcnkgZW1wdHk7CiAgICAgICAgcmV0dXJuIHRyYW5zZmVyKF90bywgX3ZhbHVlLCBlbXB0eSk7CiAgICB9Cn0KCgpjb250cmFjdCBNYWluVG9rZW4gaXMgQ29uc3RzLCBGcmVlemFibGVNaW50YWJsZVRva2VuLCBCdXJuYWJsZVRva2VuLCBQYXVzYWJsZQogICAgCnsKICAgIAoKICAgIGZ1bmN0aW9uIG5hbWUoKSBwdXJlIHB1YmxpYyByZXR1cm5zIChzdHJpbmcgX25hbWUpIHsKICAgICAgICByZXR1cm4gVE9LRU5fTkFNRTsKICAgIH0KCiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdXJlIHB1YmxpYyByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCkgewogICAgICAgIHJldHVybiBUT0tFTl9TWU1CT0w7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdXJlIHB1YmxpYyByZXR1cm5zICh1aW50OCBfZGVjaW1hbHMpIHsKICAgICAgICByZXR1cm4gVE9LRU5fREVDSU1BTFNfVUlOVDg7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQp9CgoKCgovKioKICogQHRpdGxlIENhcHBlZENyb3dkc2FsZQogKiBAZGV2IEV4dGVuc2lvbiBvZiBDcm93ZHNhbGUgd2l0aCBhIG1heCBhbW91bnQgb2YgZnVuZHMgcmFpc2VkCiAqLwpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgdWludDI1NiBwdWJsaWMgY2FwOwoKICBmdW5jdGlvbiBDYXBwZWRDcm93ZHNhbGUodWludDI1NiBfY2FwKSBwdWJsaWMgewogICAgcmVxdWlyZShfY2FwID4gMCk7CiAgICBjYXAgPSBfY2FwOwogIH0KCiAgLy8gb3ZlcnJpZGluZyBDcm93ZHNhbGUjdmFsaWRQdXJjaGFzZSB0byBhZGQgZXh0cmEgY2FwIGxvZ2ljCiAgLy8gQHJldHVybiB0cnVlIGlmIGludmVzdG9ycyBjYW4gYnV5IGF0IHRoZSBtb21lbnQKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpbkNhcCA9IHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA8PSBjYXA7CiAgICByZXR1cm4gc3VwZXIudmFsaWRQdXJjaGFzZSgpICYmIHdpdGhpbkNhcDsKICB9CgogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlI2hhc0VuZGVkIHRvIGFkZCBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCBjYXBSZWFjaGVkID0gd2VpUmFpc2VkID49IGNhcDsKICAgIHJldHVybiBzdXBlci5oYXNFbmRlZCgpIHx8IGNhcFJlYWNoZWQ7CiAgfQoKfQoKCgovKioKICogQHRpdGxlIFJlZnVuZGFibGVDcm93ZHNhbGUKICogQGRldiBFeHRlbnNpb24gb2YgQ3Jvd2RzYWxlIGNvbnRyYWN0IHRoYXQgYWRkcyBhIGZ1bmRpbmcgZ29hbCwgYW5kCiAqIHRoZSBwb3NzaWJpbGl0eSBvZiB1c2VycyBnZXR0aW5nIGEgcmVmdW5kIGlmIGdvYWwgaXMgbm90IG1ldC4KICogVXNlcyBhIFJlZnVuZFZhdWx0IGFzIHRoZSBjcm93ZHNhbGUncyB2YXVsdC4KICovCmNvbnRyYWN0IFJlZnVuZGFibGVDcm93ZHNhbGUgaXMgRmluYWxpemFibGVDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBtaW5pbXVtIGFtb3VudCBvZiBmdW5kcyB0byBiZSByYWlzZWQgaW4gd2VpcwogIHVpbnQyNTYgcHVibGljIGdvYWw7CgogIC8vIHJlZnVuZCB2YXVsdCB1c2VkIHRvIGhvbGQgZnVuZHMgd2hpbGUgY3Jvd2RzYWxlIGlzIHJ1bm5pbmcKICBSZWZ1bmRWYXVsdCBwdWJsaWMgdmF1bHQ7CgogIGZ1bmN0aW9uIFJlZnVuZGFibGVDcm93ZHNhbGUodWludDI1NiBfZ29hbCkgcHVibGljIHsKICAgIHJlcXVpcmUoX2dvYWwgPiAwKTsKICAgIHZhdWx0ID0gbmV3IFJlZnVuZFZhdWx0KHdhbGxldCk7CiAgICBnb2FsID0gX2dvYWw7CiAgfQoKICAvLyBXZSdyZSBvdmVycmlkaW5nIHRoZSBmdW5kIGZvcndhcmRpbmcgZnJvbSBDcm93ZHNhbGUuCiAgLy8gSW4gYWRkaXRpb24gdG8gc2VuZGluZyB0aGUgZnVuZHMsIHdlIHdhbnQgdG8gY2FsbAogIC8vIHRoZSBSZWZ1bmRWYXVsdCBkZXBvc2l0IGZ1bmN0aW9uCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgdmF1bHQuZGVwb3NpdC52YWx1ZShtc2cudmFsdWUpKG1zZy5zZW5kZXIpOwogIH0KCiAgLy8gaWYgY3Jvd2RzYWxlIGlzIHVuc3VjY2Vzc2Z1bCwgaW52ZXN0b3JzIGNhbiBjbGFpbSByZWZ1bmRzIGhlcmUKICBmdW5jdGlvbiBjbGFpbVJlZnVuZCgpIHB1YmxpYyB7CiAgICByZXF1aXJlKGlzRmluYWxpemVkKTsKICAgIHJlcXVpcmUoIWdvYWxSZWFjaGVkKCkpOwoKICAgIHZhdWx0LnJlZnVuZChtc2cuc2VuZGVyKTsKICB9CgogIC8vIHZhdWx0IGZpbmFsaXphdGlvbiB0YXNrLCBjYWxsZWQgd2hlbiBvd25lciBjYWxscyBmaW5hbGl6ZSgpCiAgZnVuY3Rpb24gZmluYWxpemF0aW9uKCkgaW50ZXJuYWwgewogICAgaWYgKGdvYWxSZWFjaGVkKCkpIHsKICAgICAgdmF1bHQuY2xvc2UoKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhdWx0LmVuYWJsZVJlZnVuZHMoKTsKICAgIH0KCiAgICBzdXBlci5maW5hbGl6YXRpb24oKTsKICB9CgogIGZ1bmN0aW9uIGdvYWxSZWFjaGVkKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHdlaVJhaXNlZCA+PSBnb2FsOwogIH0KCn0KCgpjb250cmFjdCBNYWluQ3Jvd2RzYWxlIGlzIENvbnN0cywgRmluYWxpemFibGVDcm93ZHNhbGUgewogICAgZnVuY3Rpb24gaGFzU3RhcnRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG5vdyA+PSBzdGFydFRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemF0aW9uKCkgaW50ZXJuYWwgewogICAgICAgIHN1cGVyLmZpbmFsaXphdGlvbigpOwoKICAgICAgICBpZiAoUEFVU0VEKSB7CiAgICAgICAgICAgIE1haW5Ub2tlbih0b2tlbikudW5wYXVzZSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFDT05USU5VRV9NSU5USU5HKSB7CiAgICAgICAgICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgICAgICB9CgogICAgICAgIHRva2VuLnRyYW5zZmVyT3duZXJzaGlwKFRBUkdFVF9VU0VSKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgICAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpLmRpdigxIGV0aGVyKTsKCiAgICAgICAgLy8gdXBkYXRlIHN0YXRlCiAgICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgICAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKCiAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9Cn0KCgpjb250cmFjdCBDaGVja2FibGUgewogICAgYWRkcmVzcyBwcml2YXRlIHNlcnZpY2VBY2NvdW50OwogICAgLyoqCiAgICAgKiBGbGFnIG1lYW5zIHRoYXQgY29udHJhY3QgYWNjaWRlbnQgYWxyZWFkeSBvY2N1cnMuCiAgICAgKi8KICAgIGJvb2wgcHJpdmF0ZSB0cmlnZ2VyZWQgPSBmYWxzZTsKCiAgICAvLyBPY2N1cnMgd2hlbiBhY2NpZGVudCBoYXBwZW5lZC4KICAgIGV2ZW50IFRyaWdnZXJlZCh1aW50IGJhbGFuY2UpOwoKICAgIGZ1bmN0aW9uIENoZWNrYWJsZSgpIHB1YmxpYyB7CiAgICAgICAgc2VydmljZUFjY291bnQgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBSZXBsYWNlIHNlcnZpY2UgYWNjb3VudCB3aXRoIG5ldyBvbmUuCiAgICAgKiBAcGFyYW0gX2FjY291bnQgVmFsaWQgc2VydmljZSBhY2NvdW50IGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoYW5nZVNlcnZpY2VBY2NvdW50KGFkZHJlc3MgX2FjY291bnQpIG9ubHlTZXJ2aWNlIHB1YmxpYyB7CiAgICAgICAgYXNzZXJ0KF9hY2NvdW50ICE9IDApOwogICAgICAgIHNlcnZpY2VBY2NvdW50ID0gX2FjY291bnQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IElzIGNhbGxlciAoc2VuZGVyKSBzZXJ2aWNlIGFjY291bnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzU2VydmljZUFjY291bnQoKSB2aWV3IHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG1zZy5zZW5kZXIgPT0gc2VydmljZUFjY291bnQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBQdWJsaWMgY2hlY2sgbWV0aG9kLgogICAgICovCiAgICBmdW5jdGlvbiBjaGVjaygpIG9ubHlTZXJ2aWNlIG5vdFRyaWdnZXJlZCBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgaWYgKGludGVybmFsQ2hlY2soKSkgewogICAgICAgICAgICBUcmlnZ2VyZWQodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgdHJpZ2dlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgaW50ZXJuYWxBY3Rpb24oKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IERvIGlubmVyIGNoZWNrLgogICAgICogQHJldHVybiBib29sIHRydWUgb2YgYWNjaWRlbnQgdHJpZ2dlcmVkLCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGludGVybmFsQ2hlY2soKSBpbnRlcm5hbCByZXR1cm5zIChib29sKTsKCiAgICAvKioKICAgICAqIEBkZXYgRG8gaW5uZXIgYWN0aW9uIGlmIGNoZWNrIHdhcyBzdWNjZXNzLgogICAgICovCiAgICBmdW5jdGlvbiBpbnRlcm5hbEFjdGlvbigpIGludGVybmFsOwoKICAgIG1vZGlmaWVyIG9ubHlTZXJ2aWNlIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gc2VydmljZUFjY291bnQpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgbm90VHJpZ2dlcmVkKCkgewogICAgICAgIHJlcXVpcmUoIXRyaWdnZXJlZCk7CiAgICAgICAgXzsKICAgIH0KfQoKCmNvbnRyYWN0IEJvbnVzYWJsZUNyb3dkc2FsZSBpcyBDb25zdHMsIENyb3dkc2FsZSB7CgogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgICAgIHVpbnQyNTYgYm9udXNSYXRlID0gZ2V0Qm9udXNSYXRlKHdlaUFtb3VudCk7CiAgICAgICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKGJvbnVzUmF0ZSkuZGl2KDEgZXRoZXIpOwoKICAgICAgICAvLyB1cGRhdGUgc3RhdGUKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CgogICAgICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICAgICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwoKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb251c1JhdGUodWludDI1NiB3ZWlBbW91bnQpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYm9udXNSYXRlID0gcmF0ZTsKCiAgICAgICAgCiAgICAgICAgLy8gYXBwbHkgYm9udXMgZm9yIHRpbWUgJiB3ZWlSYWlzZWQKICAgICAgICB1aW50WzJdIG1lbW9yeSB3ZWlSYWlzZWRTdGFydHNCb3VuZGFyaWVzID0gW3VpbnQoMCksdWludCgwKV07CiAgICAgICAgdWludFsyXSBtZW1vcnkgd2VpUmFpc2VkRW5kc0JvdW5kYXJpZXMgPSBbdWludCgxNDgxNDgxNDgxNDgxNDgxNDgxNDgxNDgpLHVpbnQoMTQ4MTQ4MTQ4MTQ4MTQ4MTQ4MTQ4MTQ4KV07CiAgICAgICAgdWludDY0WzJdIG1lbW9yeSB0aW1lU3RhcnRzQm91bmRhcmllcyA9IFt1aW50NjQoMTUyMzE2MDAxNCksdWludDY0KDE1MjU3NTIwMDApXTsKICAgICAgICB1aW50NjRbMl0gbWVtb3J5IHRpbWVFbmRzQm91bmRhcmllcyA9IFt1aW50NjQoMTUyNTc1MjAwMCksdWludDY0KDE1Mjg0MzA0MDApXTsKICAgICAgICB1aW50WzJdIG1lbW9yeSB3ZWlSYWlzZWRBbmRUaW1lUmF0ZXMgPSBbdWludCgxMDAwKSx1aW50KDUwMCldOwoKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCAyOyBpKyspIHsKICAgICAgICAgICAgYm9vbCB3ZWlSYWlzZWRJbkJvdW5kID0gKHdlaVJhaXNlZFN0YXJ0c0JvdW5kYXJpZXNbaV0gPD0gd2VpUmFpc2VkKSAmJiAod2VpUmFpc2VkIDwgd2VpUmFpc2VkRW5kc0JvdW5kYXJpZXNbaV0pOwogICAgICAgICAgICBib29sIHRpbWVJbkJvdW5kID0gKHRpbWVTdGFydHNCb3VuZGFyaWVzW2ldIDw9IG5vdykgJiYgKG5vdyA8IHRpbWVFbmRzQm91bmRhcmllc1tpXSk7CiAgICAgICAgICAgIGlmICh3ZWlSYWlzZWRJbkJvdW5kICYmIHRpbWVJbkJvdW5kKSB7CiAgICAgICAgICAgICAgICBib251c1JhdGUgKz0gYm9udXNSYXRlICogd2VpUmFpc2VkQW5kVGltZVJhdGVzW2ldIC8gMTAwMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKCiAgICAgICAgCgogICAgICAgIHJldHVybiBib251c1JhdGU7CiAgICB9Cn0KCgoKY29udHJhY3QgVGVtcGxhdGVDcm93ZHNhbGUgaXMgQ29uc3RzLCBNYWluQ3Jvd2RzYWxlCiAgICAKICAgICwgQm9udXNhYmxlQ3Jvd2RzYWxlCiAgICAKICAgIAogICAgLCBDYXBwZWRDcm93ZHNhbGUKICAgIAogICAgLCBDaGVja2FibGUKICAgIAp7CiAgICBldmVudCBJbml0aWFsaXplZCgpOwogICAgYm9vbCBwdWJsaWMgaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiBUZW1wbGF0ZUNyb3dkc2FsZShNaW50YWJsZVRva2VuIF90b2tlbikgcHVibGljCiAgICAgICAgQ3Jvd2RzYWxlKFNUQVJUX1RJTUUgPiBub3cgPyBTVEFSVF9USU1FIDogbm93LCAxNTMxMDIyNDAwLCAxMzUwICogVE9LRU5fREVDSU1BTF9NVUxUSVBMSUVSLCAweEE0NDYxNDY1NTMxYTkwZEYwNGY1Mjg3MzUwN0I3QzU5MjAxNjViNWQpCiAgICAgICAgQ2FwcGVkQ3Jvd2RzYWxlKDE0ODE0ODE0ODE0ODE0ODE0ODE0ODE0OCkKICAgICAgICAKICAgIHsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgIH0KCiAgICBmdW5jdGlvbiBpbml0KCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZSghaW5pdGlhbGl6ZWQpOwogICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTsKCiAgICAgICAgaWYgKFBBVVNFRCkgewogICAgICAgICAgICBNYWluVG9rZW4odG9rZW4pLnBhdXNlKCk7CiAgICAgICAgfQoKICAgICAgICAKICAgICAgICBhZGRyZXNzWzFdIG1lbW9yeSBhZGRyZXNzZXMgPSBbYWRkcmVzcygweDdkZjVhNGI2YWZmOGI3YWY1Y2VjM2UyOWU5MzQyYzFhNDE4MWQ2MjMpXTsKICAgICAgICB1aW50WzFdIG1lbW9yeSBhbW91bnRzID0gW3VpbnQoMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApXTsKICAgICAgICB1aW50NjRbMV0gbWVtb3J5IGZyZWV6ZXMgPSBbdWludDY0KDApXTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChmcmVlemVzW2ldID09IDApIHsKICAgICAgICAgICAgICAgIE1haW5Ub2tlbih0b2tlbikubWludChhZGRyZXNzZXNbaV0sIGFtb3VudHNbaV0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgTWFpblRva2VuKHRva2VuKS5taW50QW5kRnJlZXplKGFkZHJlc3Nlc1tpXSwgYW1vdW50c1tpXSwgZnJlZXplc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCgogICAgICAgIHRyYW5zZmVyT3duZXJzaGlwKFRBUkdFVF9VU0VSKTsKCiAgICAgICAgSW5pdGlhbGl6ZWQoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgb3ZlcnJpZGUgdG9rZW4gY3JlYXRpb24gdG8gc2V0IHRva2VuIGFkZHJlc3MgaW4gY29uc3RydWN0b3IuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoKSBpbnRlcm5hbCByZXR1cm5zIChNaW50YWJsZVRva2VuKSB7CiAgICAgICAgcmV0dXJuIE1pbnRhYmxlVG9rZW4oMCk7CiAgICB9CgogICAgCiAgICAvKioKICAgICAqIEBkZXYgRG8gaW5uZXIgY2hlY2suCiAgICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBvZiBhY2NpZGVudCB0cmlnZ2VyZWQsIGZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJuYWxDaGVjaygpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gIWlzRmluYWxpemVkICYmIGhhc0VuZGVkKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IERvIGlubmVyIGFjdGlvbiBpZiBjaGVjayB3YXMgc3VjY2Vzcy4KICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJuYWxBY3Rpb24oKSBpbnRlcm5hbCB7CiAgICAgICAgZmluYWxpemF0aW9uKCk7CiAgICAgICAgRmluYWxpemVkKCk7CgogICAgICAgIGlzRmluYWxpemVkID0gdHJ1ZTsKICAgIH0KICAgIAoKICAgIAoKICAgIAoKfQ=='.
	

]
