Class {
	#name : #SRT50c798C86D714F58Ac08E5BaC49A127771E93234,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50c798C86D714F58Ac08E5BaC49A127771E93234 >> base64 [
	^ ''.
	

]
