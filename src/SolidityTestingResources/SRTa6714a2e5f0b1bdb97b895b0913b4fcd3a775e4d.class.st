Class {
	#name : #SRTa6714a2e5f0b1bdb97b895b0913b4fcd3a775e4d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6714a2e5f0b1bdb97b895b0913b4fcd3a775e4d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKCmNvbnRyYWN0IERhdGVUaW1lIHsKICAgICAgICAvKgogICAgICAgICAqICBEYXRlIGFuZCBUaW1lIHV0aWxpdGllcyBmb3IgZXRoZXJldW0gY29udHJhY3RzCiAgICAgICAgICoKICAgICAgICAgKi8KICAgICAgICBzdHJ1Y3QgX0RhdGVUaW1lIHsKICAgICAgICAgICAgICAgIHVpbnQxNiB5ZWFyOwogICAgICAgICAgICAgICAgdWludDggbW9udGg7CiAgICAgICAgICAgICAgICB1aW50OCBkYXk7CiAgICAgICAgICAgICAgICB1aW50OCBob3VyOwogICAgICAgICAgICAgICAgdWludDggbWludXRlOwogICAgICAgICAgICAgICAgdWludDggc2Vjb25kOwogICAgICAgICAgICAgICAgdWludDggd2Vla2RheTsKICAgICAgICB9CgogICAgICAgIHVpbnQgY29uc3RhbnQgREFZX0lOX1NFQ09ORFMgPSA4NjQwMDsKICAgICAgICB1aW50IGNvbnN0YW50IFlFQVJfSU5fU0VDT05EUyA9IDMxNTM2MDAwOwogICAgICAgIHVpbnQgY29uc3RhbnQgTEVBUF9ZRUFSX0lOX1NFQ09ORFMgPSAzMTYyMjQwMDsKCiAgICAgICAgdWludCBjb25zdGFudCBIT1VSX0lOX1NFQ09ORFMgPSAzNjAwOwogICAgICAgIHVpbnQgY29uc3RhbnQgTUlOVVRFX0lOX1NFQ09ORFMgPSA2MDsKCiAgICAgICAgdWludDE2IGNvbnN0YW50IE9SSUdJTl9ZRUFSID0gMTk3MDsKCiAgICAgICAgZnVuY3Rpb24gaXNMZWFwWWVhcih1aW50MTYgeWVhcikgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCkgewogICAgICAgICAgICAgICAgaWYgKHllYXIgJSA0ICE9IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHllYXIgJSAxMDAgIT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh5ZWFyICUgNDAwICE9IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsZWFwWWVhcnNCZWZvcmUodWludCB5ZWFyKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgICAgICAgICB5ZWFyIC09IDE7CiAgICAgICAgICAgICAgICByZXR1cm4geWVhciAvIDQgLSB5ZWFyIC8gMTAwICsgeWVhciAvIDQwMDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKHVpbnQ4IG1vbnRoLCB1aW50MTYgeWVhcikgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIGlmIChtb250aCA9PSAxIHx8IG1vbnRoID09IDMgfHwgbW9udGggPT0gNSB8fCBtb250aCA9PSA3IHx8IG1vbnRoID09IDggfHwgbW9udGggPT0gMTAgfHwgbW9udGggPT0gMTIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzE7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vbnRoID09IDQgfHwgbW9udGggPT0gNiB8fCBtb250aCA9PSA5IHx8IG1vbnRoID09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0xlYXBZZWFyKHllYXIpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI5OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXJzZVRpbWVzdGFtcCh1aW50IHRpbWVzdGFtcCkgaW50ZXJuYWwgcHVyZSByZXR1cm5zIChfRGF0ZVRpbWUgZHQpIHsKICAgICAgICAgICAgICAgIHVpbnQgc2Vjb25kc0FjY291bnRlZEZvciA9IDA7CiAgICAgICAgICAgICAgICB1aW50IGJ1ZjsKICAgICAgICAgICAgICAgIHVpbnQ4IGk7CgogICAgICAgICAgICAgICAgLy8gWWVhcgogICAgICAgICAgICAgICAgZHQueWVhciA9IGdldFllYXIodGltZXN0YW1wKTsKICAgICAgICAgICAgICAgIGJ1ZiA9IGxlYXBZZWFyc0JlZm9yZShkdC55ZWFyKSAtIGxlYXBZZWFyc0JlZm9yZShPUklHSU5fWUVBUik7CgogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBMRUFQX1lFQVJfSU5fU0VDT05EUyAqIGJ1ZjsKICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gWUVBUl9JTl9TRUNPTkRTICogKGR0LnllYXIgLSBPUklHSU5fWUVBUiAtIGJ1Zik7CgogICAgICAgICAgICAgICAgLy8gTW9udGgKICAgICAgICAgICAgICAgIHVpbnQgc2Vjb25kc0luTW9udGg7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IDEyOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kc0luTW9udGggPSBEQVlfSU5fU0VDT05EUyAqIGdldERheXNJbk1vbnRoKGksIGR0LnllYXIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kc0luTW9udGggKyBzZWNvbmRzQWNjb3VudGVkRm9yID4gdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHQubW9udGggPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gc2Vjb25kc0luTW9udGg7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gRGF5CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IGdldERheXNJbk1vbnRoKGR0Lm1vbnRoLCBkdC55ZWFyKTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEQVlfSU5fU0VDT05EUyArIHNlY29uZHNBY2NvdW50ZWRGb3IgPiB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdC5kYXkgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gREFZX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSG91cgogICAgICAgICAgICAgICAgZHQuaG91ciA9IGdldEhvdXIodGltZXN0YW1wKTsKCiAgICAgICAgICAgICAgICAvLyBNaW51dGUKICAgICAgICAgICAgICAgIGR0Lm1pbnV0ZSA9IGdldE1pbnV0ZSh0aW1lc3RhbXApOwoKICAgICAgICAgICAgICAgIC8vIFNlY29uZAogICAgICAgICAgICAgICAgZHQuc2Vjb25kID0gZ2V0U2Vjb25kKHRpbWVzdGFtcCk7CgogICAgICAgICAgICAgICAgLy8gRGF5IG9mIHdlZWsuCiAgICAgICAgICAgICAgICBkdC53ZWVrZGF5ID0gZ2V0V2Vla2RheSh0aW1lc3RhbXApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0WWVhcih1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDE2KSB7CiAgICAgICAgICAgICAgICB1aW50IHNlY29uZHNBY2NvdW50ZWRGb3IgPSAwOwogICAgICAgICAgICAgICAgdWludDE2IHllYXI7CiAgICAgICAgICAgICAgICB1aW50IG51bUxlYXBZZWFyczsKCiAgICAgICAgICAgICAgICAvLyBZZWFyCiAgICAgICAgICAgICAgICB5ZWFyID0gdWludDE2KE9SSUdJTl9ZRUFSICsgdGltZXN0YW1wIC8gWUVBUl9JTl9TRUNPTkRTKTsKICAgICAgICAgICAgICAgIG51bUxlYXBZZWFycyA9IGxlYXBZZWFyc0JlZm9yZSh5ZWFyKSAtIGxlYXBZZWFyc0JlZm9yZShPUklHSU5fWUVBUik7CgogICAgICAgICAgICAgICAgc2Vjb25kc0FjY291bnRlZEZvciArPSBMRUFQX1lFQVJfSU5fU0VDT05EUyAqIG51bUxlYXBZZWFyczsKICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgKz0gWUVBUl9JTl9TRUNPTkRTICogKHllYXIgLSBPUklHSU5fWUVBUiAtIG51bUxlYXBZZWFycyk7CgogICAgICAgICAgICAgICAgd2hpbGUgKHNlY29uZHNBY2NvdW50ZWRGb3IgPiB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTGVhcFllYXIodWludDE2KHllYXIgLSAxKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzQWNjb3VudGVkRm9yIC09IExFQVBfWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHNBY2NvdW50ZWRGb3IgLT0gWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgLT0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TW9udGgodWludCB0aW1lc3RhbXApIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lc3RhbXAodGltZXN0YW1wKS5tb250aDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldERheSh1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRpbWVzdGFtcCh0aW1lc3RhbXApLmRheTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldEhvdXIodWludCB0aW1lc3RhbXApIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdWludDgoKHRpbWVzdGFtcCAvIDYwIC8gNjApICUgMjQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TWludXRlKHVpbnQgdGltZXN0YW1wKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50OCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KCh0aW1lc3RhbXAgLyA2MCkgJSA2MCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRTZWNvbmQodWludCB0aW1lc3RhbXApIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQ4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdWludDgodGltZXN0YW1wICUgNjApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0V2Vla2RheSh1aW50IHRpbWVzdGFtcCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OCgodGltZXN0YW1wIC8gREFZX0lOX1NFQ09ORFMgKyA0KSAlIDcpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdG9UaW1lc3RhbXAodWludDE2IHllYXIsIHVpbnQ4IG1vbnRoLCB1aW50OCBkYXkpIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQgdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAoeWVhciwgbW9udGgsIGRheSwgMCwgMCwgMCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b1RpbWVzdGFtcCh1aW50MTYgeWVhciwgdWludDggbW9udGgsIHVpbnQ4IGRheSwgdWludDggaG91cikgcHVibGljIHB1cmUgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0b1RpbWVzdGFtcCh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCAwLCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvVGltZXN0YW1wKHVpbnQxNiB5ZWFyLCB1aW50OCBtb250aCwgdWludDggZGF5LCB1aW50OCBob3VyLCB1aW50OCBtaW51dGUpIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQgdGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXAoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRvVGltZXN0YW1wKHVpbnQxNiB5ZWFyLCB1aW50OCBtb250aCwgdWludDggZGF5LCB1aW50OCBob3VyLCB1aW50OCBtaW51dGUsIHVpbnQ4IHNlY29uZCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludCB0aW1lc3RhbXApIHsKICAgICAgICAgICAgICAgIHVpbnQxNiBpOwoKICAgICAgICAgICAgICAgIC8vIFllYXIKICAgICAgICAgICAgICAgIGZvciAoaSA9IE9SSUdJTl9ZRUFSOyBpIDwgeWVhcjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0xlYXBZZWFyKGkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gTEVBUF9ZRUFSX0lOX1NFQ09ORFM7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gWUVBUl9JTl9TRUNPTkRTOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTW9udGgKICAgICAgICAgICAgICAgIHVpbnQ4WzEyXSBtZW1vcnkgbW9udGhEYXlDb3VudHM7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1swXSA9IDMxOwogICAgICAgICAgICAgICAgaWYgKGlzTGVhcFllYXIoeWVhcikpIHsKICAgICAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1sxXSA9IDI5OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1sxXSA9IDI4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbMl0gPSAzMTsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzNdID0gMzA7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s0XSA9IDMxOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbNV0gPSAzMDsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzZdID0gMzE7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1s3XSA9IDMxOwogICAgICAgICAgICAgICAgbW9udGhEYXlDb3VudHNbOF0gPSAzMDsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzldID0gMzE7CiAgICAgICAgICAgICAgICBtb250aERheUNvdW50c1sxMF0gPSAzMDsKICAgICAgICAgICAgICAgIG1vbnRoRGF5Q291bnRzWzExXSA9IDMxOwoKICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb250aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBEQVlfSU5fU0VDT05EUyAqIG1vbnRoRGF5Q291bnRzW2kgLSAxXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBEYXkKICAgICAgICAgICAgICAgIHRpbWVzdGFtcCArPSBEQVlfSU5fU0VDT05EUyAqIChkYXkgLSAxKTsKCiAgICAgICAgICAgICAgICAvLyBIb3VyCiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gSE9VUl9JTl9TRUNPTkRTICogKGhvdXIpOwoKICAgICAgICAgICAgICAgIC8vIE1pbnV0ZQogICAgICAgICAgICAgICAgdGltZXN0YW1wICs9IE1JTlVURV9JTl9TRUNPTkRTICogKG1pbnV0ZSk7CgogICAgICAgICAgICAgICAgLy8gU2Vjb25kCiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgKz0gc2Vjb25kOwoKICAgICAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXA7CiAgICAgICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCgoKLyoqCiAqIEB0aXRsZSBBdXRob3JpemFibGUKICogQGRldiBBbGxvd3MgdG8gYXV0aG9yaXplIGFjY2VzcyB0byBjZXJ0YWluIGZ1bmN0aW9uIGNhbGxzCiAqCiAqIEFCSQogKiBbeyJjb25zdGFudCI6dHJ1ZSwiaW5wdXRzIjpbeyJuYW1lIjoiYXV0aG9yaXplckluZGV4IiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJnZXRBdXRob3JpemVyIiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJhZGRyZXNzIn1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W3sibmFtZSI6Il9hZGRyIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJhZGRBdXRob3JpemVkIiwib3V0cHV0cyI6W10sInBheWFibGUiOmZhbHNlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50Ijp0cnVlLCJpbnB1dHMiOlt7Im5hbWUiOiJfYWRkciIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiaXNBdXRob3JpemVkIiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJib29sIn1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImNvbnN0cnVjdG9yIn1dCiAqLwpjb250cmFjdCBBdXRob3JpemFibGUgewoKICAgIGFkZHJlc3NbXSBhdXRob3JpemVyczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBhdXRob3JpemVySW5kZXg7CgogICAgLyoqCiAgICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgdGF0IGlzIG5vdCBhdXRob3JpemVkLgogICAgICovCiAgICBtb2RpZmllciBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgcmVxdWlyZShpc0F1dGhvcml6ZWQobXNnLnNlbmRlcikpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IENvbnRydWN0b3IgdGhhdCBhdXRob3JpemVzIHRoZSBtc2cuc2VuZGVyLgogICAgICovCiAgICBmdW5jdGlvbiBBdXRob3JpemFibGUoKSBwdWJsaWMgewogICAgICAgIGF1dGhvcml6ZXJzLmxlbmd0aCA9IDI7CiAgICAgICAgYXV0aG9yaXplcnNbMV0gPSBtc2cuc2VuZGVyOwogICAgICAgIGF1dGhvcml6ZXJJbmRleFttc2cuc2VuZGVyXSA9IDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGdldCBhIHNwZWNpZmljIGF1dGhvcml6ZXIKICAgICAqIEBwYXJhbSBfYXV0aG9yaXplckluZGV4IGluZGV4IG9mIHRoZSBhdXRob3JpemVyIHRvIGJlIHJldHJpZXZlZC4KICAgICAqIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIGF1dGhvcml6ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEF1dGhvcml6ZXIodWludCBfYXV0aG9yaXplckluZGV4KSBleHRlcm5hbCB2aWV3IHJldHVybnMoYWRkcmVzcykgewogICAgICAgIHJldHVybiBhZGRyZXNzKGF1dGhvcml6ZXJzW19hdXRob3JpemVySW5kZXggKyAxXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGFuIGFkZHJlc3MgaXMgYXV0aG9yaXplZAogICAgICogQHBhcmFtIF9hZGRyIHRoZSBhZGRyZXNzIHRvIGNoZWNrIGlmIGl0IGlzIGF1dGhvcml6ZWQuCiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gZmxhZyBpZiBhZGRyZXNzIGlzIGF1dGhvcml6ZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChhZGRyZXNzIF9hZGRyKSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gYXV0aG9yaXplckluZGV4W19hZGRyXSA+IDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGFkZCBhIG5ldyBhdXRob3JpemVyCiAgICAgKiBAcGFyYW0gX2FkZHIgdGhlIGFkZHJlc3MgdG8gYWRkIGFzIGEgbmV3IGF1dGhvcml6ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZEF1dGhvcml6ZWQoYWRkcmVzcyBfYWRkcikgZXh0ZXJuYWwgb25seUF1dGhvcml6ZWQgewogICAgICAgIGF1dGhvcml6ZXJJbmRleFtfYWRkcl0gPSBhdXRob3JpemVycy5sZW5ndGg7CiAgICAgICAgYXV0aG9yaXplcnMubGVuZ3RoKys7CiAgICAgICAgYXV0aG9yaXplcnNbYXV0aG9yaXplcnMubGVuZ3RoIC0gMV0gPSBfYWRkcjsKICAgIH0KCn0KCgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCgoKCgoKCgoKCgoKCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgoKCgoKCi8qKgogKiBAdGl0bGUgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgQmFzaWNUb2tlbiB7CgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCgogIC8qKgogICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gdHJhbnNmZXIgdG8KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIC8qKgogICAqIGFwcHJvdmUgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFsbG93ZWRbX3NwZW5kZXJdID09IDAuIFRvIGluY3JlbWVudAogICAqIGFsbG93ZWQgdmFsdWUgaXMgYmV0dGVyIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGF2b2lkIDIgY2FsbHMgKGFuZCB3YWl0IHVudGlsCiAgICogdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGlzIG1pbmVkKQogICAqIEZyb20gTW9ub2xpdGhEQU8gVG9rZW4uc29sCiAgICovCiAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXS5hZGQoX2FkZGVkVmFsdWUpOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGVjcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbHVlKSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gb2xkVmFsdWUuc3ViKF9zdWJ0cmFjdGVkVmFsdWUpOwogICAgfQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgIHJldHVybiB0cnVlOwogIH0KCn0KCgoKCgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lciBjYW5NaW50ICByZXR1cm5zIChib29sKSB7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKGFkZHJlc3MoMCksIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gc3RvcCBtaW50aW5nIG5ldyB0b2tlbnMuCiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gZmluaXNoTWludGluZygpIHB1YmxpYyBvbmx5T3duZXIgY2FuTWludCAgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBQcm9tb3Rpb25Db2luCiAqIEBkZXYgVGhlIG1haW4gUEMgdG9rZW4gY29udHJhY3QKICovCmNvbnRyYWN0IFByb21vdGlvbkNvaW4gaXMgTWludGFibGVUb2tlbiB7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlByb21vdGlvbkNvaW4iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiUEMiOwogICAgdWludCBwdWJsaWMgZGVjaW1hbHMgPSA1OwoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgYW55b25lIHRvIHRyYW5zZmVyIAogICAgICogQHBhcmFtIF90byB0aGUgcmVjaXBpZW50IGFkZHJlc3Mgb2YgdGhlIHRva2Vucy4KICAgICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFsbG93cyBhbnlvbmUgdG8gdHJhbnNmZXIgCiAgICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAqIEBwYXJhbSBfdmFsdWUgdWludCB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgfQoKfQoKCi8qKgogKiBAdGl0bGUgUHJvbW90aW9uQ29pbkRpc3RyaWJ1dGlvbgogKiBAZGV2IFRoZSBtYWluIFBDIHRva2VuIHNhbGUgY29udHJhY3QKICoKICogQUJJCiAqLwpjb250cmFjdCBQcm9tb3Rpb25Db2luRGlzdHJpYnV0aW9uIGlzIE93bmFibGUsIEF1dGhvcml6YWJsZSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgICBldmVudCBBdXRob3JpemVkQ3JlYXRlVG9Qcml2YXRlKGFkZHJlc3MgcmVjaXBpZW50LCB1aW50IHBheV9hbW91bnQpOwogICAgZXZlbnQgTWluZWQoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgcGF5X2Ftb3VudCk7CiAgICBldmVudCBDcmVhdGVUb2tlblRvVGVhbShhZGRyZXNzIHJlY2lwaWVudCwgdWludCBwYXlfYW1vdW50KTsKICAgIGV2ZW50IENyZWF0ZVRva2VuVG9NYXJrZXQoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgcGF5X2Ftb3VudCk7CiAgICBldmVudCBDcmVhdGVUb2tlblRvT3BlcmF0aW9uKGFkZHJlc3MgcmVjaXBpZW50LCB1aW50IHBheV9hbW91bnQpOwogICAgZXZlbnQgQ3JlYXRlVG9rZW5Ub1RheChhZGRyZXNzIHJlY2lwaWVudCwgdWludCBwYXlfYW1vdW50KTsKICAgIGV2ZW50IFByb21vdGlvbkNvaW5NaW50RmluaXNoZWQoKTsKICAgIAogICAgUHJvbW90aW9uQ29pbiBwdWJsaWMgdG9rZW4gPSBuZXcgUHJvbW90aW9uQ29pbigpOwogICAgRGF0ZVRpbWUgaW50ZXJuYWwgZGF0ZVRpbWUgPSBuZXcgRGF0ZVRpbWUoKTsKICAgIAogICAgdWludCBwdWJsaWMgRElDSU1BTFMgPSA1OwoKICAgIHVpbnQgdG90YWxUb2tlbiA9IDIxMDAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy8yMTDkur8KCiAgICB1aW50IHB1YmxpYyBwcml2YXRlVG9rZW5DYXAgPSA1MDAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy/np4Hli5/lj5HooYw1MOS6vwogICAgdWludCBwdWJsaWMgbWFya2V0VG9rZW4yMDE4ID0gMC41MCAqIDE1MDAwMDAwMDAgKiAoMTAgKiogRElDSU1BTFMpOyAvL+WFqOeQg+aOqOW5vzE15Lq/77yM56ys5LiA5bm0IDUwJQogICAgdWludCBwdWJsaWMgbWFya2V0VG9rZW4yMDE5ID0gMC4yNSAqIDE1MDAwMDAwMDAgKiAoMTAgKiogRElDSU1BTFMpOyAvL+WFqOeQg+aOqOW5vzE15Lq/LCDnrKzkuozlubQgMjUlCiAgICB1aW50IHB1YmxpYyBtYXJrZXRUb2tlbjIwMjAgPSAwLjE1ICogMTUwMDAwMDAwMCAqICgxMCAqKiBESUNJTUFMUyk7IC8v5YWo55CD5o6o5bm/MTXkur8sIOesrOS4ieW5tCAxNSUKICAgIHVpbnQgcHVibGljIG1hcmtldFRva2VuMjAyMSA9IDAuMTAgKiAxNTAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy/lhajnkIPmjqjlub8xNeS6vywg56ys5Zub5bm0IDEwJQogICAgCgogICAgdWludCBwdWJsaWMgb3BlcmF0aW9uVG9rZW4gPSAyMDAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy/npL7ljLrov5DokKUyMOS6vwogICAgdWludCBwdWJsaWMgbWluZWRUb2tlbkNhcCA9IDExMDAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy/mjJbnn78xMTDkur8KICAgIHVpbnQgcHVibGljIHRlYW1Ub2tlbjIwMTggPSA1MDAwMDAwMDAgKiAoMTAgKiogRElDSU1BTFMpOyAvL+WboumYn+mihOeVmTEw5Lq/KDEwJSksMjAxOOW5tOWPkeaUvjXkur8KICAgIHVpbnQgcHVibGljIHRlYW1Ub2tlbjIwMTkgPSA1MDAwMDAwMDAgKiAoMTAgKiogRElDSU1BTFMpOyAvL+WboumYn+mihOeVmTEw5Lq/KDEwJSksMjAxOeW5tOWPkeaUvjXkur8KICAgIHVpbnQgcHVibGljIHRheFRva2VuID0gNTAwMDAwMDAwICogKDEwICoqIERJQ0lNQUxTKTsgLy/nqI7liqHlj4rms5XliqHlubTlj5HmlL415Lq/CgogICAgdWludCBwdWJsaWMgcHJpdmF0ZVRva2VuID0gMDsgLy/np4Hli5/lt7Llj5HooYzmlbDph48KCiAgICBhZGRyZXNzIHB1YmxpYyB0ZWFtQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIG9wZXJhdGlvbkFkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBtYXJrZXRBZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgdGF4QWRkcmVzczsKCiAgICBib29sIHB1YmxpYyB0ZWFtMjAxOFRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgdGVhbTIwMTlUb2tlbkNyZWF0ZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIG9wZXJhdGlvblRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgbWFya2V0MjAxOFRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgbWFya2V0MjAxOVRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgbWFya2V0MjAyMFRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgbWFya2V0MjAyMVRva2VuQ3JlYXRlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgdGF4VG9rZW5DcmVhdGVkID0gZmFsc2U7CgogICAgLy95ZWFyID0+IHRva2VuCiAgICBtYXBwaW5nKHVpbnQxNiA9PiB1aW50KSBwdWJsaWMgbWluZWRUb2tlbjsgLy/muLjmiI/mjJbnn7/lt7Llj5HooYzmlbDph48KCiAgICB1aW50IHB1YmxpYyBmaXJzdFllYXJNaW5lZFRva2VuQ2FwID0gNTUwMDAwMDAwMCAqICgxMCAqKiBESUNJTUFMUyk7IC8vMjAxOOW5tDU15Lq/KDExMOS6vyowLjUp77yM5Lul5ZCO6YCQ5bm05YeP5Y2KIAoKICAgIHVpbnQgcHVibGljIG1pbmVkVG9rZW5TdGFydFRpbWUgPSAxNTE0NzM2MDAwOyAvL25ldyBEYXRlKCJKYW4gMDEgMjAxOCAwMDowMDowMCBHTVQrOCIpLmdldFRpbWUoKSAvIDEwMDA7CgogICAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBpbnRlcm5hbCB2aWV3IHJldHVybnMoYm9vbCkgewogICAgICAgIHVpbnQgc2l6ZTsKICAgICAgICBpZiAoX2FkZHIgPT0gMCkgCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2l6ZSA+IDA7CiAgICB9CgogICAgLy8yMDE45bm0NTXkur8oMTEw5Lq/KjAuNSnvvIzku6XlkI7pgJDlubTlh4/ljYrvvIzliLAyMDI45bm05Y+R5pS+5Ymp5L2Z55qE5YWo6YOoCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50WWVhck1pbmVkVG9rZW5DYXAodWludCBfY3VycmVudFllYXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludCkgewogICAgICAgIHJlcXVpcmUoX2N1cnJlbnRZZWFyIDw9IDIwMjgpOwoKICAgICAgICBpZiAoX2N1cnJlbnRZZWFyIDwgMjAyOCkgewogICAgICAgICAgICB1aW50IGRpdlRpbWVzID0gMiAqKiAoX2N1cnJlbnRZZWFyIC0gMjAxOCk7CiAgICAgICAgICAgIHVpbnQgY3VycmVudFllYXJNaW5lZFRva2VuQ2FwID0gZmlyc3RZZWFyTWluZWRUb2tlbkNhcC5kaXYoZGl2VGltZXMpLmRpdigxMCAqKiBESUNJTUFMUykubXVsKDEwICoqIERJQ0lNQUxTKTsKICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRZZWFyTWluZWRUb2tlbkNhcDsKICAgICAgICB9IGVsc2UgaWYgKF9jdXJyZW50WWVhciA9PSAyMDI4KSB7CiAgICAgICAgICAgIHJldHVybiAxMDc0MjE4OCAqICgxMCAqKiBESUNJTUFMUyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRZZWFyUmVtYWluVG9rZW4odWludDE2IF9jdXJyZW50WWVhcikgcHVibGljIHZpZXcgcmV0dXJucyh1aW50KSB7CiAgICAgICAgdWludCBjdXJyZW50WWVhck1pbmVkVG9rZW5DYXAgPSBnZXRDdXJyZW50WWVhck1pbmVkVG9rZW5DYXAoX2N1cnJlbnRZZWFyKTsKCiAgICAgICAgIGlmIChtaW5lZFRva2VuW19jdXJyZW50WWVhcl0gPT0gMCkgewogICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRZZWFyTWluZWRUb2tlbkNhcDsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIHJldHVybiBjdXJyZW50WWVhck1pbmVkVG9rZW5DYXAuc3ViKG1pbmVkVG9rZW5bX2N1cnJlbnRZZWFyXSk7CiAgICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRUZWFtQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIHRlYW1BZGRyZXNzID0gX2FkZHJlc3M7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWFya2V0QWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIG1hcmtldEFkZHJlc3MgPSBfYWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRPcGVyYXRpb25BZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgb3BlcmF0aW9uQWRkcmVzcyA9IF9hZGRyZXNzOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRUYXhBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgdGF4QWRkcmVzcyA9IF9hZGRyZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuVG9NYXJrZXQyMDE4KCkgcHVibGljIG9ubHlBdXRob3JpemVkIHsKICAgICAgICByZXF1aXJlKG1hcmtldEFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShtYXJrZXQyMDE4VG9rZW5DcmVhdGVkID09IGZhbHNlKTsKCiAgICAgICAgbWFya2V0MjAxOFRva2VuQ3JlYXRlZCA9IHRydWU7CiAgICAgICAgdG9rZW4ubWludChtYXJrZXRBZGRyZXNzLCBtYXJrZXRUb2tlbjIwMTgpOwogICAgICAgIENyZWF0ZVRva2VuVG9NYXJrZXQobWFya2V0QWRkcmVzcywgbWFya2V0VG9rZW4yMDE4KTsKICAgIH0KCgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Ub01hcmtldDIwMTkoKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIHJlcXVpcmUobWFya2V0QWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKG1hcmtldDIwMThUb2tlbkNyZWF0ZWQgPT0gZmFsc2UpOwoKICAgICAgICBtYXJrZXQyMDE5VG9rZW5DcmVhdGVkID0gdHJ1ZTsKICAgICAgICB0b2tlbi5taW50KG1hcmtldEFkZHJlc3MsIG1hcmtldFRva2VuMjAxOSk7CiAgICAgICAgQ3JlYXRlVG9rZW5Ub01hcmtldChtYXJrZXRBZGRyZXNzLCBtYXJrZXRUb2tlbjIwMTkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuVG9NYXJrZXQyMDIwKCkgcHVibGljIG9ubHlBdXRob3JpemVkIHsKICAgICAgICByZXF1aXJlKG1hcmtldEFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShtYXJrZXQyMDIwVG9rZW5DcmVhdGVkID09IGZhbHNlKTsKCiAgICAgICAgbWFya2V0MjAyMFRva2VuQ3JlYXRlZCA9IHRydWU7CiAgICAgICAgdG9rZW4ubWludChtYXJrZXRBZGRyZXNzLCBtYXJrZXRUb2tlbjIwMjApOwogICAgICAgIENyZWF0ZVRva2VuVG9NYXJrZXQobWFya2V0QWRkcmVzcywgbWFya2V0VG9rZW4yMDIwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlblRvTWFya2V0MjAyMSgpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgcmVxdWlyZShtYXJrZXRBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUobWFya2V0MjAyMVRva2VuQ3JlYXRlZCA9PSBmYWxzZSk7CgogICAgICAgIG1hcmtldDIwMjFUb2tlbkNyZWF0ZWQgPSB0cnVlOwogICAgICAgIHRva2VuLm1pbnQobWFya2V0QWRkcmVzcywgbWFya2V0VG9rZW4yMDIxKTsKICAgICAgICBDcmVhdGVUb2tlblRvTWFya2V0KG1hcmtldEFkZHJlc3MsIG1hcmtldFRva2VuMjAyMSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuVG9PcGVyYXRpb24oKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIHJlcXVpcmUob3BlcmF0aW9uQWRkcmVzcyAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKG9wZXJhdGlvblRva2VuQ3JlYXRlZCA9PSBmYWxzZSk7CgogICAgICAgIG9wZXJhdGlvblRva2VuQ3JlYXRlZCA9IHRydWU7CiAgICAgICAgdG9rZW4ubWludChvcGVyYXRpb25BZGRyZXNzLCBvcGVyYXRpb25Ub2tlbik7CiAgICAgICAgQ3JlYXRlVG9rZW5Ub09wZXJhdGlvbihvcGVyYXRpb25BZGRyZXNzLCBvcGVyYXRpb25Ub2tlbik7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5Ub1RheCgpIHB1YmxpYyBvbmx5QXV0aG9yaXplZCB7CiAgICAgICAgcmVxdWlyZSh0YXhBZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUodGF4VG9rZW5DcmVhdGVkID09IGZhbHNlKTsKCiAgICAgICAgdGF4VG9rZW5DcmVhdGVkID0gdHJ1ZTsKICAgICAgICB0b2tlbi5taW50KHRheEFkZHJlc3MsIHRheFRva2VuKTsKICAgICAgICBDcmVhdGVUb2tlblRvT3BlcmF0aW9uKHRheEFkZHJlc3MsIHRheFRva2VuKTsKICAgIH0KCgogICAgZnVuY3Rpb24gX2NyZWF0ZVRva2VuVG9UZWFtKHVpbnQxNiBfY3VycmVudFllYXIpIGludGVybmFsIHsKICAgICAgICBpZiAoX2N1cnJlbnRZZWFyID09IDIwMTgpIHsKICAgICAgICAgICAgcmVxdWlyZSh0ZWFtMjAxOFRva2VuQ3JlYXRlZCA9PSBmYWxzZSk7CiAgICAgICAgICAgIHRlYW0yMDE4VG9rZW5DcmVhdGVkID0gdHJ1ZTsKICAgICAgICAgICAgdG9rZW4ubWludCh0ZWFtQWRkcmVzcywgdGVhbVRva2VuMjAxOCk7CiAgICAgICAgICAgIENyZWF0ZVRva2VuVG9UZWFtKHRlYW1BZGRyZXNzLCB0ZWFtVG9rZW4yMDE4KTsKICAgICAgICB9IGVsc2UgaWYgKF9jdXJyZW50WWVhciA9PSAyMDE5KSB7CiAgICAgICAgICAgIHJlcXVpcmUodGVhbTIwMTlUb2tlbkNyZWF0ZWQgPT0gZmFsc2UpOwogICAgICAgICAgICB0ZWFtMjAxOVRva2VuQ3JlYXRlZCA9IHRydWU7CiAgICAgICAgICAgIHRva2VuLm1pbnQodGVhbUFkZHJlc3MsIHRlYW1Ub2tlbjIwMTkpOwogICAgICAgICAgICBDcmVhdGVUb2tlblRvVGVhbSh0ZWFtQWRkcmVzcywgdGVhbVRva2VuMjAxOSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VuVG9UZWFtKCkgcHVibGljIG9ubHlBdXRob3JpemVkIHsKICAgICAgICByZXF1aXJlKHRlYW1BZGRyZXNzICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHVpbnQxNiBjdXJyZW50WWVhciA9IGRhdGVUaW1lLmdldFllYXIobm93KTsKICAgICAgICByZXF1aXJlKGN1cnJlbnRZZWFyID09IDIwMTggfHwgY3VycmVudFllYXIgPT0gMjAxOSk7CiAgICAgICAgX2NyZWF0ZVRva2VuVG9UZWFtKGN1cnJlbnRZZWFyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW5lZChhZGRyZXNzIHJlY2lwaWVudCwgdWludCBfdG9rZW5zKSBwdWJsaWMgb25seUF1dGhvcml6ZWQgewogICAgICAgIHJlcXVpcmUobm93ID4gbWluZWRUb2tlblN0YXJ0VGltZSk7CiAgICAgICAgdWludDE2IGN1cnJlbnRZZWFyID0gZGF0ZVRpbWUuZ2V0WWVhcihub3cpOwogICAgICAgIHVpbnQgY3VycmVudFllYXJSZW1haW5Ub2tlbnMgPSBnZXRDdXJyZW50WWVhclJlbWFpblRva2VuKGN1cnJlbnRZZWFyKTsKICAgICAgICByZXF1aXJlKF90b2tlbnMgPD0gY3VycmVudFllYXJSZW1haW5Ub2tlbnMpOwoKICAgICAgICBtaW5lZFRva2VuW2N1cnJlbnRZZWFyXSArPSBfdG9rZW5zOyAKCiAgICAgICAgdG9rZW4ubWludChyZWNpcGllbnQsIF90b2tlbnMpOwogICAgICAgIE1pbmVkKHJlY2lwaWVudCwgX3Rva2Vucyk7IAogICAgfQoKICAgIGZ1bmN0aW9uIGF1dGhvcml6ZWRDcmVhdGVUb2tlbnNUb1ByaXZhdGUoYWRkcmVzcyByZWNpcGllbnQsIHVpbnQgX3Rva2VucykgcHVibGljIG9ubHlBdXRob3JpemVkIHsKICAgICAgICByZXF1aXJlKHByaXZhdGVUb2tlbiArIF90b2tlbnMgPD0gcHJpdmF0ZVRva2VuQ2FwKTsKICAgICAgICBwcml2YXRlVG9rZW4gKz0gX3Rva2VuczsKICAgICAgICB0b2tlbi5taW50KHJlY2lwaWVudCwgX3Rva2Vucyk7CiAgICAgICAgQXV0aG9yaXplZENyZWF0ZVRvUHJpdmF0ZShyZWNpcGllbnQsIF90b2tlbnMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICB0b2tlbi5maW5pc2hNaW50aW5nKCk7CiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAob3duZXIpOwogICAgICAgIFByb21vdGlvbkNvaW5NaW50RmluaXNoZWQoKTsKICAgIH0KCiAgICAvL+S4jeWFgeiuuOebtOaOpei9rOi0puS7peWkquW4gei0reS5sAogICAgZnVuY3Rpb24gKCkgZXh0ZXJuYWwgewogICAgICAgIHJldmVydCgpOwogICAgfQp9'.
	

]
