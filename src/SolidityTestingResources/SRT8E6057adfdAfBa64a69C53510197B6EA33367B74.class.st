Class {
	#name : #SRT8E6057adfdAfBa64a69C53510197B6EA33367B74,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8E6057adfdAfBa64a69C53510197B6EA33367B74 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgoKQkVUIEJ1eWVyCj09PT09PT09PT09PT09PT09PT09PT09PQoKQnV5cyBCRVQgdG9rZW5zIGZyb20gdGhlIERBTy5DYXNpbm8gY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLgpBdXRob3I6IC91L0NpbnRpeAoKKi8KCi8vIEludGVyZmFjZSB0byBCRVQgSUNPIENvbnRyYWN0CmNvbnRyYWN0IERhb0Nhc2lub1Rva2VuIHsKICB1aW50MjU2IHB1YmxpYyBDQVA7CiAgdWludDI1NiBwdWJsaWMgdG90YWxFdGhlcnM7CiAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgcGFydGljaXBhbnQpIHBheWFibGU7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKfQoKY29udHJhY3QgQmV0QnV5ZXIgewogIC8vIFN0b3JlIHRoZSBhbW91bnQgb2YgRVRIIGRlcG9zaXRlZCBieSBlYWNoIGFjY291bnQuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgLy8gU3RvcmUgd2hldGhlciBvciBub3QgZWFjaCBhY2NvdW50IHdvdWxkIGhhdmUgbWFkZSBpdCBpbnRvIHRoZSBjcm93ZHNhbGUuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgY2hlY2tlZF9pbjsKICAvLyBCb3VudHkgZm9yIGV4ZWN1dGluZyBidXkuCiAgdWludDI1NiBwdWJsaWMgYm91bnR5OwogIC8vIFRyYWNrIHdoZXRoZXIgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2VucyB5ZXQuCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsKICAvLyBSZWNvcmQgdGhlIHRpbWUgdGhlIGNvbnRyYWN0IGJvdWdodCB0aGUgdG9rZW5zLgogIHVpbnQyNTYgcHVibGljIHRpbWVfYm91Z2h0OwogIC8vIEVtZXJnZW5jeSBraWxsIHN3aXRjaCBpbiBjYXNlIGEgY3JpdGljYWwgYnVnIGlzIGZvdW5kLgogIGJvb2wgcHVibGljIGtpbGxfc3dpdGNoOwogIAogIC8vIFJhdGlvIG9mIEJFVCB0b2tlbnMgcmVjZWl2ZWQgdG8gRVRIIGNvbnRyaWJ1dGVkCiAgdWludDI1NiBiZXRfcGVyX2V0aCA9IDIwMDA7CiAgCiAgLy8gVGhlIEJFVCBUb2tlbiBhZGRyZXNzIGFuZCBzYWxlIGFkZHJlc3MgYXJlIHRoZSBzYW1lLgogIERhb0Nhc2lub1Rva2VuIHB1YmxpYyB0b2tlbiA9IERhb0Nhc2lub1Rva2VuKDB4MkIwOWI1MmQ0MkRmQjRlMGNCQTQzRjYwN2REMjcyZWEzRkUxRkI5Rik7CiAgLy8gVGhlIGRldmVsb3BlciBhZGRyZXNzLgogIGFkZHJlc3MgZGV2ZWxvcGVyID0gMHgwMDBGYjgzNjk2NzdiMzA2NWRFNTgyMWE4NkJjOTU1MWQ1ZTVFQWI5OwogIAogIC8vIEFsbG93cyB0aGUgZGV2ZWxvcGVyIHRvIHNodXQgZG93biBldmVyeXRoaW5nIGV4Y2VwdCB3aXRoZHJhd2FscyBpbiBlbWVyZ2VuY2llcy4KICBmdW5jdGlvbiBhY3RpdmF0ZV9raWxsX3N3aXRjaCgpIHsKICAgIC8vIE9ubHkgYWxsb3cgdGhlIGRldmVsb3BlciB0byBhY3RpdmF0ZSB0aGUga2lsbCBzd2l0Y2guCiAgICBpZiAobXNnLnNlbmRlciAhPSBkZXZlbG9wZXIpIHRocm93OwogICAgLy8gSXJyZXZlcnNpYmx5IGFjdGl2YXRlIHRoZSBraWxsIHN3aXRjaC4KICAgIGtpbGxfc3dpdGNoID0gdHJ1ZTsKICB9CiAgCiAgLy8gV2l0aGRyYXdzIGFsbCBFVEggZGVwb3NpdGVkIG9yIEJFVCBwdXJjaGFzZWQgYnkgdGhlIHNlbmRlci4KICBmdW5jdGlvbiB3aXRoZHJhdygpewogICAgLy8gSWYgY2FsbGVkIGJlZm9yZSB0aGUgSUNPLCBjYW5jZWwgY2FsbGVyJ3MgcGFydGljaXBhdGlvbiBpbiB0aGUgc2FsZS4KICAgIGlmICghYm91Z2h0X3Rva2VucykgewogICAgICAvLyBTdG9yZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gd2l0aGRyYXdhbCBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZS4KICAgICAgdWludDI1NiBldGhfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAgIC8vIFVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gc2VuZGluZyBFVEggdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAvLyBSZXR1cm4gdGhlIHVzZXIncyBmdW5kcy4gIFRocm93cyBvbiBmYWlsdXJlIHRvIHByZXZlbnQgbG9zcyBvZiBmdW5kcy4KICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhfYW1vdW50KTsKICAgIH0KICAgIC8vIFdpdGhkcmF3IHRoZSBzZW5kZXIncyB0b2tlbnMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IHB1cmNoYXNlZCB0aGVtLgogICAgZWxzZSB7CiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgQkVUIGJhbGFuY2UgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUgKDEgRVRIV2VpIC0+IDIwMDAgQkVUV2VpKS4KICAgICAgdWludDI1NiBiZXRfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKiBiZXRfcGVyX2V0aDsKICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIEJFVCB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLgogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7CiAgICAgIC8vIE5vIGZlZSBmb3Igd2l0aGRyYXdpbmcgaWYgdGhlIHVzZXIgd291bGQgaGF2ZSBtYWRlIGl0IGludG8gdGhlIGNyb3dkc2FsZSBhbG9uZS4KICAgICAgdWludDI1NiBmZWUgPSAwOwogICAgICAvLyAxJSBmZWUgaWYgdGhlIHVzZXIgZGlkbid0IGNoZWNrIGluIGR1cmluZyB0aGUgY3Jvd2RzYWxlLgogICAgICBpZiAoIWNoZWNrZWRfaW5bbXNnLnNlbmRlcl0pIHsKICAgICAgICBmZWUgPSBiZXRfYW1vdW50IC8gMTAwOwogICAgICAgIC8vIFNlbmQgYW55IG5vbi16ZXJvIGZlZXMgdG8gZGV2ZWxvcGVyLgogICAgICAgIGlmKCF0b2tlbi50cmFuc2ZlcihkZXZlbG9wZXIsIGZlZSkpIHRocm93OwogICAgICB9CiAgICAgIC8vIFNlbmQgdGhlIHVzZXIgdGhlaXIgdG9rZW5zLiAgVGhyb3dzIGlmIHRoZSBjcm93ZHNhbGUgaXNuJ3Qgb3Zlci4KICAgICAgaWYoIXRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGJldF9hbW91bnQgLSBmZWUpKSB0aHJvdzsKICAgIH0KICB9CiAgCiAgLy8gQWxsb3cgZGV2ZWxvcGVyIHRvIGFkZCBFVEggdG8gdGhlIGJ1eSBleGVjdXRpb24gYm91bnR5LgogIGZ1bmN0aW9uIGFkZF90b19ib3VudHkoKSBwYXlhYmxlIHsKICAgIC8vIE9ubHkgYWxsb3cgdGhlIGRldmVsb3BlciB0byBjb250cmlidXRlIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4KICAgIGlmIChtc2cuc2VuZGVyICE9IGRldmVsb3BlcikgdGhyb3c7CiAgICAvLyBEaXNhbGxvdyBhZGRpbmcgdG8gYm91bnR5IGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4KICAgIGlmIChraWxsX3N3aXRjaCkgdGhyb3c7CiAgICAvLyBEaXNhbGxvdyBhZGRpbmcgdG8gdGhlIGJvdW50eSBpZiBjb250cmFjdCBoYXMgYWxyZWFkeSBib3VnaHQgdGhlIHRva2Vucy4KICAgIGlmIChib3VnaHRfdG9rZW5zKSB0aHJvdzsKICAgIC8vIFVwZGF0ZSBib3VudHkgdG8gaW5jbHVkZSByZWNlaXZlZCBhbW91bnQuCiAgICBib3VudHkgKz0gbXNnLnZhbHVlOwogIH0KICAKICAvLyBCdXlzIHRva2VucyBpbiB0aGUgY3Jvd2RzYWxlIGFuZCByZXdhcmRzIHRoZSBjYWxsZXIsIGNhbGxhYmxlIGJ5IGFueW9uZS4KICBmdW5jdGlvbiBjbGFpbV9ib3VudHkoKXsKICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0b2tlbnMuCiAgICBpZiAoYm91Z2h0X3Rva2VucykgcmV0dXJuOwogICAgLy8gRGlzYWxsb3cgYnV5aW5nIGludG8gdGhlIGNyb3dkc2FsZSBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93OwogICAgLy8gUmVjb3JkIHRoYXQgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2Vucy4KICAgIGJvdWdodF90b2tlbnMgPSB0cnVlOwogICAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4KICAgIHRpbWVfYm91Z2h0ID0gbm93OwogICAgLy8gVHJhbnNmZXIgYWxsIHRoZSBmdW5kcyAobGVzcyB0aGUgYm91bnR5KSB0byB0aGUgQkVUIGNyb3dkc2FsZSBjb250cmFjdAogICAgLy8gdG8gYnV5IHRva2Vucy4gIFRocm93cyBpZiB0aGUgY3Jvd2RzYWxlIGhhc24ndCBzdGFydGVkIHlldCBvciBoYXMKICAgIC8vIGFscmVhZHkgY29tcGxldGVkLCBwcmV2ZW50aW5nIGxvc3Mgb2YgZnVuZHMuCiAgICB0b2tlbi5wcm94eVBheW1lbnQudmFsdWUodGhpcy5iYWxhbmNlIC0gYm91bnR5KShhZGRyZXNzKHRoaXMpKTsKICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4KICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYm91bnR5KTsKICB9CiAgCiAgLy8gQSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRoZSBkZWZhdWx0IGZ1bmN0aW9uLCBhbGxvd2luZyBjb250cmFjdHMgdG8gaW50ZXJhY3QuCiAgZnVuY3Rpb24gZGVmYXVsdF9oZWxwZXIoKSBwYXlhYmxlIHsKICAgIC8vIFRyZWF0IG5lYXItemVybyBFVEggdHJhbnNhY3Rpb25zIGFzIGNoZWNrIGlucyBhbmQgd2l0aGRyYXdhbCByZXF1ZXN0cy4KICAgIGlmIChtc2cudmFsdWUgPD0gMSBmaW5uZXkpIHsKICAgICAgLy8gQ2hlY2sgaW4gZHVyaW5nIHRoZSBjcm93ZHNhbGUgYmVmb3JlIGl0IGhhcyByZWFjaGVkIHRoZSBjYXAuCiAgICAgIGlmIChib3VnaHRfdG9rZW5zICYmIHRva2VuLnRvdGFsRXRoZXJzKCkgPCB0b2tlbi5DQVAoKSkgewogICAgICAgIC8vIE1hcmsgdXNlciBhcyBjaGVja2VkIGluLCBtZWFuaW5nIHRoZXkgd291bGQgaGF2ZSBiZWVuIGFibGUgdG8gZW50ZXIgYWxvbmUuCiAgICAgICAgY2hlY2tlZF9pblttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgIH0KICAgICAgLy8gV2l0aGRyYXcgZnVuZHMgaWYgdGhlIGNyb3dkc2FsZSBoYXNuJ3QgYmVndW4geWV0IG9yIGlzIGFscmVhZHkgb3Zlci4KICAgICAgZWxzZSB7CiAgICAgICAgd2l0aGRyYXcoKTsKICAgICAgfQogICAgfQogICAgLy8gRGVwb3NpdCB0aGUgdXNlcidzIGZ1bmRzIGZvciB1c2UgaW4gcHVyY2hhc2luZyB0b2tlbnMuCiAgICBlbHNlIHsKICAgICAgLy8gRGlzYWxsb3cgZGVwb3NpdHMgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLgogICAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93OwogICAgICAvLyBPbmx5IGFsbG93IGRlcG9zaXRzIGlmIHRoZSBjb250cmFjdCBoYXNuJ3QgYWxyZWFkeSBwdXJjaGFzZWQgdGhlIHRva2Vucy4KICAgICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93OwogICAgICAvLyBVcGRhdGUgcmVjb3JkcyBvZiBkZXBvc2l0ZWQgRVRIIHRvIGluY2x1ZGUgdGhlIHJlY2VpdmVkIGFtb3VudC4KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gbXNnLnZhbHVlOwogICAgfQogIH0KICAKICAvLyBEZWZhdWx0IGZ1bmN0aW9uLiAgQ2FsbGVkIHdoZW4gYSB1c2VyIHNlbmRzIEVUSCB0byB0aGUgY29udHJhY3QuCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgaGVscGVyIGZ1bmN0aW9uLgogICAgZGVmYXVsdF9oZWxwZXIoKTsKICB9Cn0='.
	

]
