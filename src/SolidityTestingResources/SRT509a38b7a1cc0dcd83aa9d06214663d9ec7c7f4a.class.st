Class {
	#name : #SRT509a38b7a1cc0dcd83aa9d06214663d9ec7c7f4a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT509a38b7a1cc0dcd83aa9d06214663d9ec7c7f4a >> base64 [
	^ ''.
	

]
