Class {
	#name : #SRT5c7621f7afb14b9ab20fefede40b428d9b4429f2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5c7621f7afb14b9ab20fefede40b428d9b4429f2 >> base64 [
	^ ''.
	

]
