Class {
	#name : #SRT9b5F737C26040707921A309ae83976Ad15227FA5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9b5F737C26040707921A309ae83976Ad15227FA5 >> base64 [
	^ ''.
	

]
