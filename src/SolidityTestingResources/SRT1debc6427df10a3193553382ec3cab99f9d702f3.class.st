Class {
	#name : #SRT1debc6427df10a3193553382ec3cab99f9d702f3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1debc6427df10a3193553382ec3cab99f9d702f3 >> base64 [
	^ ''.
	

]
