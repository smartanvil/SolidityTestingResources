Class {
	#name : #SRT21e5e0a1433a7626605db64b69a47e6eb8480ffb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT21e5e0a1433a7626605db64b69a47e6eb8480ffb >> base64 [
	^ ''.
	

]
