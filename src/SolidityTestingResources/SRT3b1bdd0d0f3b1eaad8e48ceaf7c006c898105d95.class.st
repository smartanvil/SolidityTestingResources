Class {
	#name : #SRT3b1bdd0d0f3b1eaad8e48ceaf7c006c898105d95,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3b1bdd0d0f3b1eaad8e48ceaf7c006c898105d95 >> base64 [
	^ ''.
	

]
