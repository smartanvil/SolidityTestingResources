Class {
	#name : #SRTbca230c0b76993bc21b67640d420fe9d8bc931aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbca230c0b76993bc21b67640d420fe9d8bc931aa >> base64 [
	^ ''.
	

]
