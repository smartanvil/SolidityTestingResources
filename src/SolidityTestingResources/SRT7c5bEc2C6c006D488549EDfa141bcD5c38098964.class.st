Class {
	#name : #SRT7c5bEc2C6c006D488549EDfa141bcD5c38098964,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7c5bEc2C6c006D488549EDfa141bcD5c38098964 >> base64 [
	^ ''.
	

]
