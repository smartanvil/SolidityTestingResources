Class {
	#name : #SRTfb8596ed07c4e2973af7d7847aa14e1bed09c09d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfb8596ed07c4e2973af7d7847aa14e1bed09c09d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7Cgpjb250cmFjdCBNYXRocyB7CgogICAgZnVuY3Rpb24gTXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICByZXF1aXJlKGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBEaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIFN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBBZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIHJlcXVpcmUoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCn0KCmNvbnRyYWN0IE93bmVkIGlzIE1hdGhzIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsgICAgICAgIAogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJfc3RhdHVzID0gdHJ1ZTsKICAgIHVpbnQyNTYgVG90YWxTdXBwbHkgPSAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIGFkZHJlc3MgcHVibGljIEluaXRpYWxPd25lckFkZHJlc3M7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgVXNlckJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIEFsbG93YW5jZTsKICAgIHVpbnQyNTYgTG9ja0luRXhwaXJ5ID0gQWRkKGJsb2NrLnRpbWVzdGFtcCwgMjYyOTc0NCk7CiAgICBldmVudCBPd25lcnNoaXBDaGFuZ2VkKGFkZHJlc3MgaW5kZXhlZCBfaW52b2tlciwgYWRkcmVzcyBpbmRleGVkIF9uZXdPd25lcik7ICAgICAgICAKICAgIGV2ZW50IFRyYW5zZmVyU3RhdHVzQ2hhbmdlZChib29sIF9uZXdTdGF0dXMpOwogICAgCiAgICAgICAgCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CiAgICAgICAgSW5pdGlhbE93bmVyQWRkcmVzcyA9IDB4YjUxZTExY2U5Yzk0MjdlODVlZDIzZTJhN2IxMmY3MWU5YTZkMjYxYjsKICAgICAgICBvd25lciA9IDB4YjUxZTExY2U5Yzk0MjdlODVlZDIzZTJhN2IxMmY3MWU5YTZkMjYxYjsKICAgIH0KCiAgICBtb2RpZmllciBfb25seU93bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBDaGFuZ2VPd25lcihhZGRyZXNzIF9BZGRyZXNzVG9NYWtlKSBwdWJsaWMgX29ubHlPd25lciByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CgogICAgICAgIG93bmVyID0gX0FkZHJlc3NUb01ha2U7CiAgICAgICAgT3duZXJzaGlwQ2hhbmdlZChtc2cuc2VuZGVyLCBfQWRkcmVzc1RvTWFrZSk7CgogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCiAgICBmdW5jdGlvbiBDaGFuZ2VUcmFuc2ZlclN0YXR1cyhib29sIF9uZXdTdGF0dXMpIHB1YmxpYyBfb25seU93bmVyIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsKCiAgICAgICAgdHJhbnNmZXJfc3RhdHVzID0gX25ld1N0YXR1czsKICAgICAgICBUcmFuc2ZlclN0YXR1c0NoYW5nZWQoX25ld1N0YXR1cyk7CiAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIE1pbnQodWludDI1NiBfYW1vdW50KSBwdWJsaWMgX29ubHlPd25lciByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CgogICAgICAgIFRvdGFsU3VwcGx5ID0gQWRkKFRvdGFsU3VwcGx5LCBfYW1vdW50KTsKICAgICAgICBVc2VyQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBBZGQoVXNlckJhbGFuY2VzW21zZy5zZW5kZXJdLCBfYW1vdW50KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgfQoKICAgIGZ1bmN0aW9uIEJ1cm4odWludDI1NiBfYW1vdW50KSBwdWJsaWMgX29ubHlPd25lciByZXR1cm5zIChib29sIF9zdWNjZXNzKSB7CgogICAgICAgIHJlcXVpcmUoU3ViKFVzZXJCYWxhbmNlc1ttc2cuc2VuZGVyXSwgX2Ftb3VudCkgPj0gMCk7CiAgICAgICAgVG90YWxTdXBwbHkgPSBTdWIoVG90YWxTdXBwbHksIF9hbW91bnQpOwogICAgICAgIFVzZXJCYWxhbmNlc1ttc2cuc2VuZGVyXSA9IFN1YihVc2VyQmFsYW5jZXNbbXNnLnNlbmRlcl0sIF9hbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9CiAgICAgICAgCn0KCmNvbnRyYWN0IENvcmUgaXMgT3duZWQgewoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7CgogICAgc3RyaW5nIG5hbWUgPSAnR3JlZ2MxMTMxJzsKICAgIHN0cmluZyBzeW1ib2wgPSAnMTEzMSc7CiAgICB1aW50MjU2IGRlY2ltYWxzID0gMTg7CgogICAgZnVuY3Rpb24gQ29yZSgpIHB1YmxpYyB7CgogICAgICAgIFVzZXJCYWxhbmNlc1sweGI1MWUxMWNlOWM5NDI3ZTg1ZWQyM2UyYTdiMTJmNzFlOWE2ZDI2MWJdID0gVG90YWxTdXBwbHk7CgogICAgfQoKICAgIGZ1bmN0aW9uIF90cmFuc2ZlckNoZWNrKGFkZHJlc3MgX3NlbmRlciwgYWRkcmVzcyBfcmVjaXBpZW50LCB1aW50MjU2IF9hbW91bnQpIHByaXZhdGUgdmlldyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmVxdWlyZSh0cmFuc2Zlcl9zdGF0dXMgPT0gdHJ1ZSk7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgcmVxdWlyZShfcmVjaXBpZW50ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoVXNlckJhbGFuY2VzW19zZW5kZXJdID4gX2Ftb3VudCk7CiAgICAgICAgcmVxdWlyZShTdWIoVXNlckJhbGFuY2VzW19zZW5kZXJdLCBfYW1vdW50KSA+PSAwKTsKICAgICAgICByZXF1aXJlKEFkZChVc2VyQmFsYW5jZXNbX3JlY2lwaWVudF0sIF9hbW91bnQpID4gVXNlckJhbGFuY2VzW19yZWNpcGllbnRdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChfc2VuZGVyID09IEluaXRpYWxPd25lckFkZHJlc3MgJiYgYmxvY2sudGltZXN0YW1wIDwgTG9ja0luRXhwaXJ5KSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKFN1YihVc2VyQmFsYW5jZXNbX3NlbmRlcl0sIF9hbW91bnQpID49IDI1MDAwMDAwMDApOwogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIHN0YXR1cykgewoKICAgICAgICByZXF1aXJlKF90cmFuc2ZlckNoZWNrKG1zZy5zZW5kZXIsIF9yZWNlaXZlciwgX2Ftb3VudCkpOwogICAgICAgIFVzZXJCYWxhbmNlc1ttc2cuc2VuZGVyXSA9IFN1YihVc2VyQmFsYW5jZXNbbXNnLnNlbmRlcl0sIF9hbW91bnQpOwogICAgICAgIFVzZXJCYWxhbmNlc1tfcmVjZWl2ZXJdID0gQWRkKFVzZXJCYWxhbmNlc1ttc2cuc2VuZGVyXSwgX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3JlY2VpdmVyLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9yZWNlaXZlciwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdGF0dXMpIHsKCiAgICAgICAgcmVxdWlyZShfdHJhbnNmZXJDaGVjayhfb3duZXIsIF9yZWNlaXZlciwgX2Ftb3VudCkpOwogICAgICAgIHJlcXVpcmUoU3ViKEFsbG93YW5jZVtfb3duZXJdW21zZy5zZW5kZXJdLCBfYW1vdW50KSA+PSAwKTsKICAgICAgICBVc2VyQmFsYW5jZXNbX293bmVyXSA9IFN1YihVc2VyQmFsYW5jZXNbX293bmVyXSwgX2Ftb3VudCk7CiAgICAgICAgVXNlckJhbGFuY2VzW19yZWNlaXZlcl0gPSBBZGQoVXNlckJhbGFuY2VzW19yZWNlaXZlcl0sIF9hbW91bnQpOwogICAgICAgIEFsbG93YW5jZVtfb3duZXJdW21zZy5zZW5kZXJdID0gU3ViKEFsbG93YW5jZVtfb3duZXJdW21zZy5zZW5kZXJdLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcihfb3duZXIsIF9yZWNlaXZlciwgX2Ftb3VudCk7CgogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCiAgICBmdW5jdGlvbiBtdWx0aVRyYW5zZmVyKGFkZHJlc3NbXSBfZGVzdGluYXRpb25zLCB1aW50MjU2W10gX3ZhbHVlcykgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKCiAgICAgICAgdWludDI1NiBpID0gMDsKCiAgICAgICAgd2hpbGUgKGkgPCBfZGVzdGluYXRpb25zLmxlbmd0aCkgewogICAgICAgICAgICB0cmFuc2ZlcihfZGVzdGluYXRpb25zW2ldLCBfdmFsdWVzW2ldKTsKICAgICAgICAgICAgaSArPSAxOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChpKTsKCiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyByZXR1cm5zIChib29sIGFwcHJvdmVkKSB7CgogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOwogICAgICAgIHJlcXVpcmUoVXNlckJhbGFuY2VzW21zZy5zZW5kZXJdID4gMCk7CiAgICAgICAgQWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX2FkZHJlc3MpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewoKICAgICAgICByZXR1cm4gVXNlckJhbGFuY2VzW19hZGRyZXNzXTsKCiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGFsbG93ZWQpIHsKCiAgICAgICAgcmV0dXJuIEFsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKCiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHN1cHBseSkgewoKICAgICAgICByZXR1cm4gVG90YWxTdXBwbHk7CgogICAgfQoKfQ=='.
	

]
