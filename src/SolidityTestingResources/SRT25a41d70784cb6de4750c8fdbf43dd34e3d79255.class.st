Class {
	#name : #SRT25a41d70784cb6de4750c8fdbf43dd34e3d79255,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT25a41d70784cb6de4750c8fdbf43dd34e3d79255 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBFVEhMb3R0ZXJ5TWFuYWdlckludGVyZmFjZSB7CiAgICBmdW5jdGlvbiByZWdpc3RlcigpOwp9Cgpjb250cmFjdCBFVEhMb3R0ZXJ5SW50ZXJmYWNlIHsKICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGUoKTsKfQoKY29udHJhY3QgRVRITG90dGVyeSB7CiAgICBieXRlczMyIHB1YmxpYyBuYW1lID0gJ0VUSExvdHRlcnkgLSBMYXN0IDEgQnl0ZSBMb3R0ZXJ5JzsKICAgIGFkZHJlc3MgcHVibGljIG1hbmFnZXJfYWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYm9vbCBwdWJsaWMgb3BlbjsKICAgIHVpbnQyNTYgcHVibGljIGphY2twb3Q7CiAgICB1aW50MjU2IHB1YmxpYyBmZWU7CiAgICB1aW50MjU2IHB1YmxpYyBvd25lcl9mZWU7CiAgICB1aW50MjU2IHB1YmxpYyBjcmVhdGVfYmxvY2s7CiAgICB1aW50MjU2IHB1YmxpYyByZXN1bHRfYmxvY2s7CiAgICB1aW50MjU2IHB1YmxpYyB3aW5uZXJzX2NvdW50OwogICAgYnl0ZXMzMiBwdWJsaWMgcmVzdWx0X2hhc2g7CiAgICBieXRlczEgcHVibGljIHJlc3VsdDsKICAgIGFkZHJlc3MgcHVibGljIGFjY3VtdWxhdGVkX2Zyb207CiAgICBhZGRyZXNzIHB1YmxpYyBhY2N1bXVsYXRlX3RvOwoKICAgIG1hcHBpbmcgKGJ5dGVzMSA9PiBhZGRyZXNzW10pIGJldHRpbmdzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBjcmVkaXRzOwoKICAgIGV2ZW50IEJhbGFuY2UodWludDI1NiBfYmFsYW5jZSk7CiAgICBldmVudCBSZXN1bHQoYnl0ZXMxIF9yZXN1bHQpOwogICAgZXZlbnQgT3Blbihib29sIF9vcGVuKTsKICAgIGV2ZW50IFBsYXkoYWRkcmVzcyBpbmRleGVkIF9zZW5kZXIsIGJ5dGVzMSBfYnl0ZSwgdWludDI1NiBfdGltZSk7CiAgICBldmVudCBXaXRoZHJhdyhhZGRyZXNzIGluZGV4ZWQgX3NlbmRlciwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF90aW1lKTsKICAgIGV2ZW50IERlc3Ryb3koKTsKICAgIGV2ZW50IEFjY3VtdWxhdGUoYWRkcmVzcyBfYWNjdW11bGF0ZV90bywgdWludDI1NiBfYW1vdW50KTsKCiAgICBmdW5jdGlvbiBFVEhMb3R0ZXJ5KGFkZHJlc3MgX21hbmFnZXIsIHVpbnQyNTYgX2ZlZSwgdWludDI1NiBfamFja3BvdCwgdWludDI1NiBfb3duZXJfZmVlLCBhZGRyZXNzIF9hY2N1bXVsYXRlZF9mcm9tKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG9wZW4gPSB0cnVlOwogICAgICAgIGNyZWF0ZV9ibG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBtYW5hZ2VyX2FkZHJlc3MgPSBfbWFuYWdlcjsKICAgICAgICBmZWUgPSBfZmVlOwogICAgICAgIGphY2twb3QgPSBfamFja3BvdDsKICAgICAgICBvd25lcl9mZWUgPSBfb3duZXJfZmVlOwogICAgICAgIC8vIGFjY3VtdWxhdGUKICAgICAgICBpZiAoX2FjY3VtdWxhdGVkX2Zyb20gIT0gb3duZXIpIHsKICAgICAgICAgICAgYWNjdW11bGF0ZWRfZnJvbSA9IF9hY2N1bXVsYXRlZF9mcm9tOwogICAgICAgICAgICBFVEhMb3R0ZXJ5SW50ZXJmYWNlIGxvdHRlcnkgPSBFVEhMb3R0ZXJ5SW50ZXJmYWNlKGFjY3VtdWxhdGVkX2Zyb20pOwogICAgICAgICAgICBsb3R0ZXJ5LmFjY3VtdWxhdGUoKTsKICAgICAgICB9CiAgICAgICAgLy8gcmVnaXN0ZXIgd2l0aCBtYW5hZ2VyCiAgICAgICAgRVRITG90dGVyeU1hbmFnZXJJbnRlcmZhY2UgbWFuYWdlciA9IEVUSExvdHRlcnlNYW5hZ2VySW50ZXJmYWNlKG1hbmFnZXJfYWRkcmVzcyk7CiAgICAgICAgbWFuYWdlci5yZWdpc3RlcigpOwogICAgICAgIE9wZW4ob3Blbik7CiAgICB9CgogICAgbW9kaWZpZXIgaXNPd25lcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNPcmlnaW5hbE93bmVyKCkgewogICAgICAgIC8vIHVzZWQgdHgub3JpZ2luIG9uIHB1cnBvc2UgaW5zdGVhZCBvZgogICAgICAgIC8vIG1zZy5zZW5kZXIsIGFzIHdlIHdhbnQgdG8gZ2V0IHRoZSBvcmlnaW5hbAogICAgICAgIC8vIHN0YXJ0ZXIgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIGJlIG93bmVyCiAgICAgICAgcmVxdWlyZSh0eC5vcmlnaW4gPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNPcGVuKCkgewogICAgICAgIHJlcXVpcmUob3Blbik7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0Nsb3NlZCgpIHsKICAgICAgICByZXF1aXJlKCFvcGVuKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzUGFpZCgpIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBmZWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzUHJpemUoKSB7CiAgICAgICAgcmVxdWlyZShjcmVkaXRzW21zZy5zZW5kZXJdID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0FjY3VtdWxhdGVkKCkgewogICAgICAgIHJlcXVpcmUocmVzdWx0X2hhc2ggIT0gMCAmJiB3aW5uZXJzX2NvdW50ID09IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaGFzUmVzdWx0SGFzaCgpIHsKICAgICAgICByZXF1aXJlKAogICAgICAgICAgICBibG9jay5udW1iZXIgPj0gcmVzdWx0X2Jsb2NrICYmCiAgICAgICAgICAgIGJsb2NrLm51bWJlciA8PSByZXN1bHRfYmxvY2sgKyAyNTYgJiYKICAgICAgICAgICAgYmxvY2suYmxvY2toYXNoKHJlc3VsdF9ibG9jaykgIT0gcmVzdWx0X2hhc2gKICAgICAgICAgICAgKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHBsYXkoYnl0ZXMxIF9ieXRlKSBwYXlhYmxlIGlzT3BlbiBpc1BhaWQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJldHRpbmdzW19ieXRlXS5wdXNoKG1zZy5zZW5kZXIpOwogICAgICAgIGlmICh0aGlzLmJhbGFuY2UgPj0gamFja3BvdCkgewogICAgICAgICAgICB1aW50MjU2IG93bmVyX2ZlZV9hbW91bnQgPSAodGhpcy5iYWxhbmNlICogb3duZXJfZmVlKSAvIDEwMDsKICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgdHJhbnNhY3Rpb24gd2hpY2gKICAgICAgICAgICAgLy8gd2lsbCBnZW5lcmF0ZSB0aGUgYmxvY2sgdXNlZAogICAgICAgICAgICAvLyB0byBjb3VudCB1bnRpbCB0aGUgMTB0aCBpbiBvcmRlcgogICAgICAgICAgICAvLyB0byBnZXQgdGhlIGxvdHRlcnkgcmVzdWx0LgogICAgICAgICAgICBpZiAoIW93bmVyLnNlbmQob3duZXJfZmVlX2Ftb3VudCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvcGVuID0gZmFsc2U7CiAgICAgICAgICAgIC8vIGJsb2NrIG9mZnNldCBoYXJkY29kZWQgdG8gMTAKICAgICAgICAgICAgcmVzdWx0X2Jsb2NrID0gYmxvY2subnVtYmVyICsgMTA7CiAgICAgICAgICAgIE9wZW4ob3Blbik7CiAgICAgICAgfQogICAgICAgIEJhbGFuY2UodGhpcy5iYWxhbmNlKTsKICAgICAgICBQbGF5KG1zZy5zZW5kZXIsIF9ieXRlLCBub3cpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIFRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpZiB3ZSBtaXNzIHRoZSAyNTZ0aCBibG9jawogICAgLy8gY29udGFpbmluZyB0aGUgcmVzdWx0IGhhc2gsIGxvdHRlcnkoKSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkCiAgICAvLyB0aGlzIG1ldGhvZCBhcyB0aGlzIGlzIGR1cGxpY2F0ZWQgZnJvbSBsb3R0ZXJ5KCkKICAgIGZ1bmN0aW9uIG1hbnVhbF9sb3R0ZXJ5KGJ5dGVzMzIgX3Jlc3VsdF9oYXNoKSBpc0Nsb3NlZCBpc093bmVyIHsKICAgICAgICByZXN1bHRfaGFzaCA9IF9yZXN1bHRfaGFzaDsKICAgICAgICByZXN1bHQgPSByZXN1bHRfaGFzaFszMV07CiAgICAgICAgYWRkcmVzc1tdIHN0b3JhZ2Ugd2lubmVycyA9IGJldHRpbmdzW3Jlc3VsdF07CiAgICAgICAgd2lubmVyc19jb3VudCA9IHdpbm5lcnMubGVuZ3RoOwogICAgICAgIGlmICh3aW5uZXJzX2NvdW50ID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGNyZWRpdCA9IHRoaXMuYmFsYW5jZSAvIHdpbm5lcnNfY291bnQ7CiAgICAgICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHdpbm5lcnNfY291bnQ7IGkrKykgewogICAgICAgICAgICAgICAgY3JlZGl0c1t3aW5uZXJzW2ldXSA9IGNyZWRpdDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBSZXN1bHQocmVzdWx0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb3R0ZXJ5KCkgaXNDbG9zZWQgaGFzUmVzdWx0SGFzaCBpc093bmVyIHsKICAgICAgICByZXN1bHRfaGFzaCA9IGJsb2NrLmJsb2NraGFzaChyZXN1bHRfYmxvY2spOwogICAgICAgIC8vIGdldCBsYXN0IGJ5dGUgKDMxc3QpIGZyb20gYmxvY2sgaGFzaCBhcyByZXN1bHQKICAgICAgICByZXN1bHQgPSByZXN1bHRfaGFzaFszMV07CiAgICAgICAgYWRkcmVzc1tdIHN0b3JhZ2Ugd2lubmVycyA9IGJldHRpbmdzW3Jlc3VsdF07CiAgICAgICAgd2lubmVyc19jb3VudCA9IHdpbm5lcnMubGVuZ3RoOwogICAgICAgIGlmICh3aW5uZXJzX2NvdW50ID4gMCkgewogICAgICAgICAgICB1aW50MjU2IGNyZWRpdCA9IHRoaXMuYmFsYW5jZSAvIHdpbm5lcnNfY291bnQ7CiAgICAgICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHdpbm5lcnNfY291bnQ7IGkrKykgewogICAgICAgICAgICAgICAgY3JlZGl0c1t3aW5uZXJzW2ldXSA9IGNyZWRpdDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBSZXN1bHQocmVzdWx0KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIGlzQ2xvc2VkIGhhc1ByaXplIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IGNyZWRpdCA9IGNyZWRpdHNbbXNnLnNlbmRlcl07CiAgICAgICAgLy8gemVybyBjcmVkaXQgYmVmb3JlIHNlbmQgcHJldmVudGluZyByZS1lbnRyYW5jeQogICAgICAgIC8vIGFzIG1zZy5zZW5kZXIgY2FuIGJlIGEgY29udHJhY3QgYW5kIGNhbGwgdXMgYmFjawogICAgICAgIGNyZWRpdHNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGNyZWRpdCkpIHsKICAgICAgICAgICAgLy8gdHJhbnNmZXIgZmFpbGVkLCByZXR1cm4gY3JlZGl0IGZvciB3aXRoZHJhdwogICAgICAgICAgICBjcmVkaXRzW21zZy5zZW5kZXJdID0gY3JlZGl0OwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIFdpdGhkcmF3KG1zZy5zZW5kZXIsIGNyZWRpdCwgbm93KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlKCkgaXNPcmlnaW5hbE93bmVyIGlzQ2xvc2VkIGlzQWNjdW11bGF0ZWQgewogICAgICAgIGFjY3VtdWxhdGVfdG8gPSBtc2cuc2VuZGVyOwogICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQodGhpcy5iYWxhbmNlKSkgewogICAgICAgICAgICBBY2N1bXVsYXRlKG1zZy5zZW5kZXIsIHRoaXMuYmFsYW5jZSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3RydWN0KCkgaXNDbG9zZWQgaXNPd25lciB7CiAgICAgICAgRGVzdHJveSgpOwogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9Cn0='.
	

]
