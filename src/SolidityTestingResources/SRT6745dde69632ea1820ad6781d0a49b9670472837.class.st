Class {
	#name : #SRT6745dde69632ea1820ad6781d0a49b9670472837,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6745dde69632ea1820ad6781d0a49b9670472837 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7Cgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKIAogICAgLy8gR2V0IHRoZSBhY2NvdW50IGJhbGFuY2Ugb2YgYW5vdGhlciBhY2NvdW50IHdpdGggYWRkcmVzcyBfb3duZXIKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKIAogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKIAogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKIAogICAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogCiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQogCmNvbnRyYWN0IFJvc2VDb2luIGlzIEVSQzIwSW50ZXJmYWNlIHsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDU7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJSU0MiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlJvc2VDb2luIjsKCiAgICB1aW50IHB1YmxpYyBfbGV2ZWwgPSAwOwogICAgYm9vbCBwdWJsaWMgX3NlbGxpbmcgPSB0cnVlOwogICAgdWludCBwdWJsaWMgX3RvdGFsU3VwcGx5ID0gMTAgKiogMTQ7CiAgICB1aW50IHB1YmxpYyBfb3JpZ2luYWxCdXlQcmljZSA9IDEwICoqIDEwOwogICAgdWludCBwdWJsaWMgX21pbmltdW1CdXlBbW91bnQgPSAxMCAqKiAxNzsKICAgCiAgICAvLyBPd25lciBvZiB0aGlzIGNvbnRyYWN0CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKIAogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIAogICAgdWludCBwdWJsaWMgX2ljb1N1cHBseSA9IF90b3RhbFN1cHBseTsKICAgIHVpbnRbNF0gcHVibGljIHJhdGlvID0gWzEyLCAxMCwgMTAsIDEzXTsKICAgIHVpbnRbNF0gcHVibGljIHRocmVzaG9sZCA9IFs5NTAwMDAwMDAwMDAwMCwgODUwMDAwMDAwMDAwMDAsIDAsIDgwMDAwMDAwMDAwMDAwXTsKCiAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgogICAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlOb3RPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB0aHJlc2hvbGRBbGwoKSB7CiAgICAgICAgaWYgKCFfc2VsbGluZyB8fCBtc2cudmFsdWUgPCBfbWluaW11bUJ1eUFtb3VudCB8fCBfaWNvU3VwcGx5IDw9IHRocmVzaG9sZFszXSkgeyAvLwogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KIAogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIFJvc2VDb2luKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7CiAgICB9CiAKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG90YWxTdXBwbHk7CiAgICB9CiAKICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KIAogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBzZW5kZXIncyBhY2NvdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgICAgICYmIF9hbW91bnQgPiAwCiAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50OwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAKICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAvLyBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZAogICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgIC8vIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IHRoZSBjb21tYW5kIHNob3VsZCBmYWlsIHVubGVzcyB0aGUgX2Zyb20gYWNjb3VudCBoYXMKICAgIC8vIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlCiAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oCiAgICAgICAgYWRkcmVzcyBfZnJvbSwKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF9hbW91bnQKICAgICkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudAogICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgICAgICYmIF9hbW91bnQgPiAwCiAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KIAogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCgogICAgZnVuY3Rpb24gdG9nZ2xlU2FsZSgpIG9ubHlPd25lciB7CiAgICAgICAgX3NlbGxpbmcgPSAhX3NlbGxpbmc7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QnV5UHJpY2UodWludCBuZXdCdXlQcmljZSkgb25seU93bmVyIHsKICAgICAgICBfb3JpZ2luYWxCdXlQcmljZSA9IG5ld0J1eVByaWNlOwogICAgfQogICAgCiAgICAvLyBCdXkgUm9zZUNvaW4gYnkgc2VuZGluZyBFdGhlciAgICAKICAgIGZ1bmN0aW9uIGJ1eSgpIHBheWFibGUgb25seU5vdE93bmVyIHRocmVzaG9sZEFsbCByZXR1cm5zICh1aW50MjU2IGFtb3VudCkgewogICAgICAgIGFtb3VudCA9IDA7CiAgICAgICAgdWludCByZW1haW4gPSBtc2cudmFsdWUgLyBfb3JpZ2luYWxCdXlQcmljZTsKICAgICAgICAKICAgICAgICB3aGlsZSAocmVtYWluID4gMCAmJiBfbGV2ZWwgPCAzKSB7IC8vCiAgICAgICAgICAgIHJlbWFpbiA9IHJlbWFpbiAqIHJhdGlvW19sZXZlbF0gLyByYXRpb1tfbGV2ZWwrMV07CiAgICAgICAgICAgIGlmIChfaWNvU3VwcGx5IDw9IHJlbWFpbiArIHRocmVzaG9sZFtfbGV2ZWxdKSB7CiAgICAgICAgICAgICAgICByZW1haW4gPSAocmVtYWluICsgdGhyZXNob2xkW19sZXZlbF0gLSBfaWNvU3VwcGx5KSAqIHJhdGlvW19sZXZlbCsxXSAvIHJhdGlvW19sZXZlbF07CiAgICAgICAgICAgICAgICBhbW91bnQgKz0gX2ljb1N1cHBseSAtIHRocmVzaG9sZFtfbGV2ZWxdOwogICAgICAgICAgICAgICAgX2ljb1N1cHBseSA9IHRocmVzaG9sZFtfbGV2ZWxdOwogICAgICAgICAgICAgICAgX2xldmVsICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBfaWNvU3VwcGx5IC09IHJlbWFpbjsKICAgICAgICAgICAgICAgIGFtb3VudCArPSByZW1haW47CiAgICAgICAgICAgICAgICByZW1haW4gPSAwOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKGJhbGFuY2VzW293bmVyXSA8IGFtb3VudCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgCiAgICAgICAgaWYgKHJlbWFpbiA+IDApIHsKICAgICAgICAgICAgcmVtYWluICo9IF9vcmlnaW5hbEJ1eVByaWNlOwogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlbWFpbik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGJhbGFuY2VzW293bmVyXSAtPSBhbW91bnQ7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSAtIHJlbWFpbik7CiAgICAgICAgVHJhbnNmZXIob3duZXIsIG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICAgICAgcmV0dXJuIGFtb3VudDsKICAgIH0KICAgIAogICAgLy8gT3duZXIgd2l0aGRyYXdzIEV0aGVyIGluIGNvbnRyYWN0CiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG93bmVyLnNlbmQodGhpcy5iYWxhbmNlKTsKICAgIH0KfQoKLy8vIEB0aXRsZSBNdWx0aXNpZ25hdHVyZSB3YWxsZXQgLSBBbGxvd3MgbXVsdGlwbGUgcGFydGllcyB0byBhZ3JlZSBvbiB0cmFuc2FjdGlvbnMgYmVmb3JlIGV4ZWN1dGlvbi4KLy8vIEBhdXRob3IgU3RlZmFuIEdlb3JnZSAtIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImYzODA4Nzk2OTU5MjlkZGQ5NDk2OWM4MTk0OTZiMzkwOWM5ZDgwOTY5ZDgwOGE4MGRkOWQ5Njg3Ij5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4KY29udHJhY3QgTXVsdGlTaWdXYWxsZXQgewoKICAgIGV2ZW50IENvbmZpcm1hdGlvbihhZGRyZXNzIHNlbmRlciwgYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpOwogICAgZXZlbnQgUmV2b2NhdGlvbihhZGRyZXNzIHNlbmRlciwgYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpOwogICAgZXZlbnQgU3VibWlzc2lvbihieXRlczMyIHRyYW5zYWN0aW9uSGFzaCk7CiAgICBldmVudCBFeGVjdXRpb24oYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpOwogICAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIHNlbmRlciwgdWludCB2YWx1ZSk7CiAgICBldmVudCBPd25lckFkZGl0aW9uKGFkZHJlc3Mgb3duZXIpOwogICAgZXZlbnQgT3duZXJSZW1vdmFsKGFkZHJlc3Mgb3duZXIpOwogICAgZXZlbnQgUmVxdWlyZWRVcGRhdGUodWludCByZXF1aXJlZCk7CiAgICBldmVudCBDb2luQ3JlYXRpb24oYWRkcmVzcyBjb2luKTsKCiAgICBtYXBwaW5nIChieXRlczMyID0+IFRyYW5zYWN0aW9uKSBwdWJsaWMgdHJhbnNhY3Rpb25zOwogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpKSBwdWJsaWMgY29uZmlybWF0aW9uczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGlzT3duZXI7CiAgICBhZGRyZXNzW10gb3duZXJzOwogICAgYnl0ZXMzMltdIHRyYW5zYWN0aW9uTGlzdDsKICAgIHVpbnQgcHVibGljIHJlcXVpcmVkOwoKICAgIHN0cnVjdCBUcmFuc2FjdGlvbiB7CiAgICAgICAgYWRkcmVzcyBkZXN0aW5hdGlvbjsKICAgICAgICB1aW50IHZhbHVlOwogICAgICAgIGJ5dGVzIGRhdGE7CiAgICAgICAgdWludCBub25jZTsKICAgICAgICBib29sIGV4ZWN1dGVkOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlXYWxsZXQoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gYWRkcmVzcyh0aGlzKSkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBzaWduYXR1cmVzRnJvbU93bmVycyhieXRlczMyIHRyYW5zYWN0aW9uSGFzaCwgdWludDhbXSB2LCBieXRlczMyW10gcnMpIHsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPHYubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmICghaXNPd25lcltlY3JlY292ZXIodHJhbnNhY3Rpb25IYXNoLCB2W2ldLCByc1tpXSwgcnNbdi5sZW5ndGggKyBpXSldKQogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvd25lckRvZXNOb3RFeGlzdChhZGRyZXNzIG93bmVyKSB7CiAgICAgICAgaWYgKGlzT3duZXJbb3duZXJdKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG93bmVyRXhpc3RzKGFkZHJlc3Mgb3duZXIpIHsKICAgICAgICBpZiAoIWlzT3duZXJbb3duZXJdKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNvbmZpcm1lZChieXRlczMyIHRyYW5zYWN0aW9uSGFzaCwgYWRkcmVzcyBvd25lcikgewogICAgICAgIGlmICghY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbkhhc2hdW293bmVyXSkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RDb25maXJtZWQoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gsIGFkZHJlc3Mgb3duZXIpIHsKICAgICAgICBpZiAoY29uZmlybWF0aW9uc1t0cmFuc2FjdGlvbkhhc2hdW293bmVyXSkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RFeGVjdXRlZChieXRlczMyIHRyYW5zYWN0aW9uSGFzaCkgewogICAgICAgIGlmICh0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25IYXNoXS5leGVjdXRlZCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3ROdWxsKGFkZHJlc3MgZGVzdGluYXRpb24pIHsKICAgICAgICBpZiAoZGVzdGluYXRpb24gPT0gMCkKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciB2YWxpZFJlcXVpcmVkKHVpbnQgX293bmVyQ291bnQsIHVpbnQgX3JlcXVpcmVkKSB7CiAgICAgICAgaWYgKCAgIF9yZXF1aXJlZCA+IF9vd25lckNvdW50CiAgICAgICAgICAgIHx8IF9yZXF1aXJlZCA9PSAwCiAgICAgICAgICAgIHx8IF9vd25lckNvdW50ID09IDApCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gYWRkT3duZXIoYWRkcmVzcyBvd25lcikKICAgICAgICBleHRlcm5hbAogICAgICAgIG9ubHlXYWxsZXQKICAgICAgICBvd25lckRvZXNOb3RFeGlzdChvd25lcikKICAgIHsKICAgICAgICBpc093bmVyW293bmVyXSA9IHRydWU7CiAgICAgICAgb3duZXJzLnB1c2gob3duZXIpOwogICAgICAgIE93bmVyQWRkaXRpb24ob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZU93bmVyKGFkZHJlc3Mgb3duZXIpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5V2FsbGV0CiAgICAgICAgb3duZXJFeGlzdHMob3duZXIpCiAgICB7CiAgICAgICAgaXNPd25lcltvd25lcl0gPSBmYWxzZTsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPG93bmVycy5sZW5ndGggLSAxOyBpKyspCiAgICAgICAgICAgIGlmIChvd25lcnNbaV0gPT0gb3duZXIpIHsKICAgICAgICAgICAgICAgIG93bmVyc1tpXSA9IG93bmVyc1tvd25lcnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIG93bmVycy5sZW5ndGggLT0gMTsKICAgICAgICBpZiAocmVxdWlyZWQgPiBvd25lcnMubGVuZ3RoKQogICAgICAgICAgICB1cGRhdGVSZXF1aXJlZChvd25lcnMubGVuZ3RoKTsKICAgICAgICBPd25lclJlbW92YWwob3duZXIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVJlcXVpcmVkKHVpbnQgX3JlcXVpcmVkKQogICAgICAgIHB1YmxpYwogICAgICAgIG9ubHlXYWxsZXQKICAgICAgICB2YWxpZFJlcXVpcmVkKG93bmVycy5sZW5ndGgsIF9yZXF1aXJlZCkKICAgIHsKICAgICAgICByZXF1aXJlZCA9IF9yZXF1aXJlZDsKICAgICAgICBSZXF1aXJlZFVwZGF0ZShfcmVxdWlyZWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZFRyYW5zYWN0aW9uKGFkZHJlc3MgZGVzdGluYXRpb24sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEsIHVpbnQgbm9uY2UpCiAgICAgICAgcHJpdmF0ZQogICAgICAgIG5vdE51bGwoZGVzdGluYXRpb24pCiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25IYXNoID0gc2hhMyhkZXN0aW5hdGlvbiwgdmFsdWUsIGRhdGEsIG5vbmNlKTsKICAgICAgICBpZiAodHJhbnNhY3Rpb25zW3RyYW5zYWN0aW9uSGFzaF0uZGVzdGluYXRpb24gPT0gMCkgewogICAgICAgICAgICB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25IYXNoXSA9IFRyYW5zYWN0aW9uKHsKICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbiwKICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBub25jZTogbm9uY2UsCiAgICAgICAgICAgICAgICBleGVjdXRlZDogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHRyYW5zYWN0aW9uTGlzdC5wdXNoKHRyYW5zYWN0aW9uSGFzaCk7CiAgICAgICAgICAgIFN1Ym1pc3Npb24odHJhbnNhY3Rpb25IYXNoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc3VibWl0VHJhbnNhY3Rpb24oYWRkcmVzcyBkZXN0aW5hdGlvbiwgdWludCB2YWx1ZSwgYnl0ZXMgZGF0YSwgdWludCBub25jZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25IYXNoID0gYWRkVHJhbnNhY3Rpb24oZGVzdGluYXRpb24sIHZhbHVlLCBkYXRhLCBub25jZSk7CiAgICAgICAgY29uZmlybVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3VibWl0VHJhbnNhY3Rpb25XaXRoU2lnbmF0dXJlcyhhZGRyZXNzIGRlc3RpbmF0aW9uLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhLCB1aW50IG5vbmNlLCB1aW50OFtdIHYsIGJ5dGVzMzJbXSBycykKICAgICAgICBleHRlcm5hbAogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpCiAgICB7CiAgICAgICAgdHJhbnNhY3Rpb25IYXNoID0gYWRkVHJhbnNhY3Rpb24oZGVzdGluYXRpb24sIHZhbHVlLCBkYXRhLCBub25jZSk7CiAgICAgICAgY29uZmlybVRyYW5zYWN0aW9uV2l0aFNpZ25hdHVyZXModHJhbnNhY3Rpb25IYXNoLCB2LCBycyk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQ29uZmlybWF0aW9uKGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoLCBhZGRyZXNzIG93bmVyKQogICAgICAgIHByaXZhdGUKICAgICAgICBub3RDb25maXJtZWQodHJhbnNhY3Rpb25IYXNoLCBvd25lcikKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSGFzaF1bb3duZXJdID0gdHJ1ZTsKICAgICAgICBDb25maXJtYXRpb24ob3duZXIsIHRyYW5zYWN0aW9uSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gY29uZmlybVRyYW5zYWN0aW9uKGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoKQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyRXhpc3RzKG1zZy5zZW5kZXIpCiAgICB7CiAgICAgICAgYWRkQ29uZmlybWF0aW9uKHRyYW5zYWN0aW9uSGFzaCwgbXNnLnNlbmRlcik7CiAgICAgICAgZXhlY3V0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gY29uZmlybVRyYW5zYWN0aW9uV2l0aFNpZ25hdHVyZXMoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gsIHVpbnQ4W10gdiwgYnl0ZXMzMltdIHJzKQogICAgICAgIHB1YmxpYwogICAgICAgIHNpZ25hdHVyZXNGcm9tT3duZXJzKHRyYW5zYWN0aW9uSGFzaCwgdiwgcnMpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTx2Lmxlbmd0aDsgaSsrKQogICAgICAgICAgICBhZGRDb25maXJtYXRpb24odHJhbnNhY3Rpb25IYXNoLCBlY3JlY292ZXIodHJhbnNhY3Rpb25IYXNoLCB2W2ldLCByc1tpXSwgcnNbaSArIHYubGVuZ3RoXSkpOwogICAgICAgIGV4ZWN1dGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gpOwogICAgfQoKICAgIGZ1bmN0aW9uIGV4ZWN1dGVUcmFuc2FjdGlvbihieXRlczMyIHRyYW5zYWN0aW9uSGFzaCkKICAgICAgICBwdWJsaWMKICAgICAgICBub3RFeGVjdXRlZCh0cmFuc2FjdGlvbkhhc2gpCiAgICB7CiAgICAgICAgaWYgKGlzQ29uZmlybWVkKHRyYW5zYWN0aW9uSGFzaCkpIHsKICAgICAgICAgICAgVHJhbnNhY3Rpb24gc3RvcmFnZSB0eG4gPSB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25IYXNoXTsgLy8KICAgICAgICAgICAgdHhuLmV4ZWN1dGVkID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKCF0eG4uZGVzdGluYXRpb24uY2FsbC52YWx1ZSh0eG4udmFsdWUpKHR4bi5kYXRhKSkKICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICAgICBFeGVjdXRpb24odHJhbnNhY3Rpb25IYXNoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmV2b2tlQ29uZmlybWF0aW9uKGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb3duZXJFeGlzdHMobXNnLnNlbmRlcikKICAgICAgICBjb25maXJtZWQodHJhbnNhY3Rpb25IYXNoLCBtc2cuc2VuZGVyKQogICAgICAgIG5vdEV4ZWN1dGVkKHRyYW5zYWN0aW9uSGFzaCkKICAgIHsKICAgICAgICBjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSGFzaF1bbXNnLnNlbmRlcl0gPSBmYWxzZTsKICAgICAgICBSZXZvY2F0aW9uKG1zZy5zZW5kZXIsIHRyYW5zYWN0aW9uSGFzaCk7CiAgICB9CgogICAgZnVuY3Rpb24gTXVsdGlTaWdXYWxsZXQoYWRkcmVzc1tdIF9vd25lcnMsIHVpbnQgX3JlcXVpcmVkKQogICAgICAgIHZhbGlkUmVxdWlyZWQoX293bmVycy5sZW5ndGgsIF9yZXF1aXJlZCkKICAgIHsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPF9vd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlzT3duZXJbX293bmVyc1tpXV0gPSB0cnVlOwogICAgICAgIG93bmVycyA9IF9vd25lcnM7CiAgICAgICAgcmVxdWlyZWQgPSBfcmVxdWlyZWQ7CiAgICB9CgogICAgZnVuY3Rpb24oKQogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkKICAgICAgICAgICAgRGVwb3NpdChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzQ29uZmlybWVkKGJ5dGVzMzIgdHJhbnNhY3Rpb25IYXNoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICB1aW50IGNvdW50ID0gMDsKICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPG93bmVycy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnNbdHJhbnNhY3Rpb25IYXNoXVtvd25lcnNbaV1dKQogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgaWYgKGNvdW50ID09IHJlcXVpcmVkKQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY29uZmlybWF0aW9uQ291bnQoYnl0ZXMzMiB0cmFuc2FjdGlvbkhhc2gpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQgY291bnQpCiAgICB7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxvd25lcnMubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zW3RyYW5zYWN0aW9uSGFzaF1bb3duZXJzW2ldXSkKICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICB9CgogICAgZnVuY3Rpb24gZmlsdGVyVHJhbnNhY3Rpb25zKGJvb2wgaXNQZW5kaW5nKQogICAgICAgIHByaXZhdGUKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJ5dGVzMzJbXSBfdHJhbnNhY3Rpb25MaXN0KQogICAgewogICAgICAgIGJ5dGVzMzJbXSBtZW1vcnkgX3RyYW5zYWN0aW9uTGlzdFRlbXAgPSBuZXcgYnl0ZXMzMltdKHRyYW5zYWN0aW9uTGlzdC5sZW5ndGgpOwogICAgICAgIHVpbnQgY291bnQgPSAwOwogICAgICAgIGZvciAodWludCBpPTA7IGk8dHJhbnNhY3Rpb25MaXN0Lmxlbmd0aDsgaSsrKQogICAgICAgICAgICBpZiAoICAgaXNQZW5kaW5nICYmICF0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25MaXN0W2ldXS5leGVjdXRlZAogICAgICAgICAgICAgICAgfHwgIWlzUGVuZGluZyAmJiB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25MaXN0W2ldXS5leGVjdXRlZCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgX3RyYW5zYWN0aW9uTGlzdFRlbXBbY291bnRdID0gdHJhbnNhY3Rpb25MaXN0W2ldOwogICAgICAgICAgICAgICAgY291bnQgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgIF90cmFuc2FjdGlvbkxpc3QgPSBuZXcgYnl0ZXMzMltdKGNvdW50KTsKICAgICAgICBmb3IgKGk9MDsgaTxjb3VudDsgaSsrKQogICAgICAgICAgICBpZiAoX3RyYW5zYWN0aW9uTGlzdFRlbXBbaV0gPiAwKQogICAgICAgICAgICAgICAgX3RyYW5zYWN0aW9uTGlzdFtpXSA9IF90cmFuc2FjdGlvbkxpc3RUZW1wW2ldOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFBlbmRpbmdUcmFuc2FjdGlvbnMoKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChieXRlczMyW10pCiAgICB7CiAgICAgICAgcmV0dXJuIGZpbHRlclRyYW5zYWN0aW9ucyh0cnVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRFeGVjdXRlZFRyYW5zYWN0aW9ucygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJ5dGVzMzJbXSkKICAgIHsKICAgICAgICByZXR1cm4gZmlsdGVyVHJhbnNhY3Rpb25zKGZhbHNlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY3JlYXRlQ29pbigpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5V2FsbGV0CiAgICB7CiAgICAgICAgQ29pbkNyZWF0aW9uKG5ldyBSb3NlQ29pbigpKTsKICAgIH0KfQ=='.
	

]
