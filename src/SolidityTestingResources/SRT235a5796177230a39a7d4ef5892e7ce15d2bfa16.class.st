Class {
	#name : #SRT235a5796177230a39a7d4ef5892e7ce15d2bfa16,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT235a5796177230a39a7d4ef5892e7ce15d2bfa16 >> base64 [
	^ ''.
	

]
