Class {
	#name : #SRT30A0d9A67816699356f1059965e846b828aADC17,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT30A0d9A67816699356f1059965e846b828aADC17 >> base64 [
	^ ''.
	

]
