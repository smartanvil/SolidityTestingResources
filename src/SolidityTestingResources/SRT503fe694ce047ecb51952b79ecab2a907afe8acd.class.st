Class {
	#name : #SRT503fe694ce047ecb51952b79ecab2a907afe8acd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT503fe694ce047ecb51952b79ecab2a907afe8acd >> base64 [
	^ ''.
	

]
