Class {
	#name : #SRT2b0067e8a59a66a4fbf370b70d21133400b04ac2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2b0067e8a59a66a4fbf370b70d21133400b04ac2 >> base64 [
	^ 'Y29udHJhY3QgVGlja2V0cyB7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIktyYWZ0d2VyayI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJLS1QiOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMDsKCiAgICBhZGRyZXNzWzEwMDBdIHB1YmxpYyBob2xkZXJzOwogICAgbWFwcGluZyh1aW50MjU2ID0+IGJvb2wpIHB1YmxpYyB1c2VkVGlja2V0czsKICAgIG1hcHBpbmcodWludDI1NiA9PiBzdHJpbmcpIHB1YmxpYyBhZGRpdGlvbmFsSW5mbzsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50WzE2XSkgcHVibGljIHNlYXRzTGlzdDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgYWRkcmVzc1szMDAwMF0gcHVibGljIGJvb2tpbmc7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludFsxNl0pIHB1YmxpYyBib29raW5nTGlzdDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYW1vdW50T2ZCb29rZWQ7CgogICAgYWRkcmVzcyBNYW5hZ2VyOwogICAgYWRkcmVzcyBNYW5hZ2VyRm9yUmF0ZTsKICAgIGFkZHJlc3MgQ29tcGFueTsKICAgIGFkZHJlc3MgbnVsbEFkZHJlc3MgPSAweDA7CgogICAgdWludCBwdWJsaWMgbGltaXRQZXJIb2xkZXIgPSAxNjsKICAgIHVpbnQgcHVibGljIHNlYXRzQ291bnQgPSAxMDAwOwogICAgdWludCBzY2FsZU11bHRpcGxpZXIgPSAxMDAwMDAwMDAwMDAwMDAwMDAwOyAKCiAgICB1aW50IHB1YmxpYyBSYXRlX0V0aCA9IDI5ODsKICAgIHVpbnQgcHVibGljIFRpY2tldF9QcmljZSA9IDE1KnNjYWxlTXVsdGlwbGllci9SYXRlX0V0aDsKCiAgICBtb2RpZmllciBtYW5hZ2VyT25seSB7IHJlcXVpcmUobXNnLnNlbmRlciA9PSBNYW5hZ2VyKTsgXzsgfQogICAgbW9kaWZpZXIgcmF0ZU1hbmFnZXJPbmx5IHsgcmVxdWlyZShtc2cuc2VuZGVyID09IE1hbmFnZXJGb3JSYXRlKTsgXzsgfQoKICAgIGV2ZW50IExvZ0FsbG9jYXRlVGlja2V0KHVpbnQyNTYgX3NlYXRJRCwgYWRkcmVzcyBfYnV5ZXIsIHN0cmluZyBfaW5mb1N0cmluZyk7CiAgICBldmVudCBMb2dUcmFuc2ZlcihhZGRyZXNzIF9ob2xkZXIsIGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50MjU2IF9zZWF0SUQsIHN0cmluZyBfaW5mb1N0cmluZ3QpOwogICAgZXZlbnQgTG9nUmVkZWVtVGlja2V0KHVpbnQgX3NlYXRJRCwgYWRkcmVzcyBfaG9sZGVyLCBzdHJpbmcgX2luZm9TdHJpbmcpOwogICAgZXZlbnQgTG9nQm9va1RpY2tldCh1aW50IF9zZWF0SUQsIGFkZHJlc3MgX2J1eWVyLHN0cmluZyBfaW5mb1N0cmluZyk7CiAgICBldmVudCBMb2dDYW5jZWxSZXNlcnZhdGlvbihhZGRyZXNzIF9idXllciwgdWludCBfc2VhdElEKTsKCgoKICAgIGZ1bmN0aW9uIFRpY2tldHMoYWRkcmVzcyBfTWFuYWdlckZvclJhdGUsICBhZGRyZXNzIF9NYW5hZ2VyLCBhZGRyZXNzIF9Db21wYW55KSB7CiAgICAgICAgTWFuYWdlckZvclJhdGUgPSBfTWFuYWdlckZvclJhdGU7CiAgICAgICAgTWFuYWdlciA9IF9NYW5hZ2VyOwogICAgICAgIENvbXBhbnkgPSBfQ29tcGFueTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRSYXRlKHVpbnQgX1JhdGVFdGgpIGV4dGVybmFsIHJhdGVNYW5hZ2VyT25seSB7CiAgICAgICBSYXRlX0V0aCA9IF9SYXRlRXRoOwogICAgICAgVGlja2V0X1ByaWNlID0gMTUqc2NhbGVNdWx0aXBsaWVyL1JhdGVfRXRoOwogICAgfQoKCiAgICBmdW5jdGlvbiBhbGxvY2F0ZVRpY2tldCh1aW50MjU2IHNlYXRJRCwgYWRkcmVzcyBidXllciwgc3RyaW5nIGluZm9TdHJpbmcpIGV4dGVybmFsIG1hbmFnZXJPbmx5IHsKICAgICAgICByZXF1aXJlKHNlYXRJRCA+IDAgJiYgc2VhdElEIDwgc2VhdHNDb3VudCk7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW3NlYXRJRF0gPT0gbnVsbEFkZHJlc3MpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW2J1eWVyXSA8IGxpbWl0UGVySG9sZGVyKTsKICAgICAgICByZXF1aXJlKGJvb2tpbmdbc2VhdElEXSA9PSBudWxsQWRkcmVzcyk7CiAgICAgICAgY3JlYXRlVGlja2V0KHNlYXRJRCwgYnV5ZXIpOwogICAgICAgIGFkZGl0aW9uYWxJbmZvW3NlYXRJRF0gPSBpbmZvU3RyaW5nOwogICAgICAgIExvZ0FsbG9jYXRlVGlja2V0KHNlYXRJRCwgYnV5ZXIsIGluZm9TdHJpbmcpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRpY2tldCh1aW50MjU2IHNlYXRJRCwgYWRkcmVzcyBidXllcikgaW50ZXJuYWwgewogICAgICAgIHVpbnQgaSA9IDA7CiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGltaXRQZXJIb2xkZXI7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGlmKHNlYXRzTGlzdFtidXllcl1baV0gPT0gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaG9sZGVyc1tzZWF0SURdID0gYnV5ZXI7CiAgICAgICAgYmFsYW5jZU9mW2J1eWVyXSArPSAxOwogICAgICAgIHNlYXRzTGlzdFtidXllcl1baV0gPSBzZWF0SUQ7CiAgICB9CgogICAgZnVuY3Rpb24gcmVkZWVtVGlja2V0KHVpbnQgc2VhdElELCBhZGRyZXNzIGhvbGRlcikgZXh0ZXJuYWwgbWFuYWdlck9ubHl7CiAgICAgICAgcmVxdWlyZShzZWF0SUQgPiAwICYmIHNlYXRJRCA8IHNlYXRzQ291bnQpOwogICAgICAgIHJlcXVpcmUodXNlZFRpY2tldHNbc2VhdElEXSA9PSBmYWxzZSk7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW3NlYXRJRF0gPT0gaG9sZGVyKTsKICAgICAgICB1c2VkVGlja2V0c1tzZWF0SURdID0gdHJ1ZTsKICAgICAgICBzdHJpbmcgaW5mb1N0cmluZyA9IGFkZGl0aW9uYWxJbmZvW3NlYXRJRF07CiAgICAgICAgTG9nUmVkZWVtVGlja2V0KHNlYXRJRCwgaG9sZGVyLCBpbmZvU3RyaW5nKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIGhvbGRlciwgYWRkcmVzcyByZWNlaXZlciwgdWludDI1NiBzZWF0SUQpIGV4dGVybmFsIG1hbmFnZXJPbmx5ewogICAgICAgIHJlcXVpcmUoc2VhdElEID4gMCAmJiBzZWF0SUQgPCBzZWF0c0NvdW50KTsKICAgICAgICByZXF1aXJlKGhvbGRlcnNbc2VhdElEXSA9PSBob2xkZXIpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW3JlY2VpdmVyXSA8IGxpbWl0UGVySG9sZGVyKTsKICAgICAgICByZXF1aXJlKGhvbGRlciAhPSByZWNlaXZlcik7CiAgICAgICAgdWludCBpID0gMDsKICAgICAgICBob2xkZXJzW3NlYXRJRF0gPSByZWNlaXZlcjsKICAgICAgICBiYWxhbmNlT2ZbaG9sZGVyXSAtPSAxOwogICAgICAgIGlmKHJlY2VpdmVyICE9IG51bGxBZGRyZXNzKQogICAgICAgIHsKICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGltaXRQZXJIb2xkZXI7IGkrKykKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGlmKHNlYXRzTGlzdFtyZWNlaXZlcl1baV0gPT0gMCkKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGJhbGFuY2VPZltyZWNlaXZlcl0gKz0gMTsKICAgICAgICAgICAgc2VhdHNMaXN0W3JlY2VpdmVyXVtpXSA9IHNlYXRJRDsKICAgICAgICB9CiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGltaXRQZXJIb2xkZXI7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGlmKHNlYXRzTGlzdFtob2xkZXJdW2ldID09IHNlYXRJRCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc2VhdHNMaXN0W2hvbGRlcl1baV0gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHN0cmluZyBpbmZvU3RyaW5nID0gYWRkaXRpb25hbEluZm9bc2VhdElEXTsKICAgICAgICBMb2dUcmFuc2Zlcihob2xkZXIsIHJlY2VpdmVyLCBzZWF0SUQsIGluZm9TdHJpbmcpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJvb2tUaWNrZXQodWludDI1NiBzZWF0SUQsIGFkZHJlc3MgYnV5ZXIsIHN0cmluZyBpbmZvU3RyaW5nKSBleHRlcm5hbCBtYW5hZ2VyT25seXsKICAgICAgICByZXF1aXJlKHNlYXRJRCA+IDAgJiYgc2VhdElEIDwgc2VhdHNDb3VudCk7CiAgICAgICAgcmVxdWlyZShob2xkZXJzW3NlYXRJRF0gPT0gbnVsbEFkZHJlc3MpOwogICAgICAgIHJlcXVpcmUoYm9va2luZ1tzZWF0SURdID09IG51bGxBZGRyZXNzKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltidXllcl0gKyBhbW91bnRPZkJvb2tlZFtidXllcl0gPCBsaW1pdFBlckhvbGRlcik7CiAgICAgICAgdWludCBpID0gMDsKICAgICAgICBib29raW5nW3NlYXRJRF0gPSBidXllcjsKICAgICAgICBhbW91bnRPZkJvb2tlZFtidXllcl0gKz0gMTsKICAgICAgICB3aGlsZShib29raW5nTGlzdFtidXllcl1baV0gIT0gMCkgewogICAgICAgICAgICBpKys7CiAgICAgICAgfQogICAgICAgIGJvb2tpbmdMaXN0W2J1eWVyXVtpXSA9IHNlYXRJRDsKICAgICAgICBhZGRpdGlvbmFsSW5mb1tzZWF0SURdID0gaW5mb1N0cmluZzsKICAgICAgICBMb2dCb29rVGlja2V0KHNlYXRJRCwgYnV5ZXIsIGluZm9TdHJpbmcpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbmNlbFJlc2VydmF0aW9uKGFkZHJlc3MgYnV5ZXIsIHVpbnQyNTYgc2VhdElEKSBleHRlcm5hbCBtYW5hZ2VyT25seXsKICAgICAgICByZXF1aXJlKGJvb2tpbmdbc2VhdElEXSA9PSBidXllcik7CiAgICAgICAgdWludCBpID0gMDsKICAgICAgICB3aGlsZShpIDwgbGltaXRQZXJIb2xkZXIpIHsKICAgICAgICAgICAgaWYgKHNlYXRJRCA9PSBib29raW5nTGlzdFtidXllcl1baV0pewogICAgICAgICAgICAgIGJvb2tpbmdbc2VhdElEXSA9IG51bGxBZGRyZXNzOwogICAgICAgICAgICAgIGJvb2tpbmdMaXN0W2J1eWVyXVtpXSA9IDA7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSsrOwogICAgICAgIH0KICAgICAgICBhbW91bnRPZkJvb2tlZFtidXllcl0gLT0gMTsKICAgICAgICBMb2dDYW5jZWxSZXNlcnZhdGlvbihidXllciwgc2VhdElEKTsKICAgIH0KCgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGFtb3VudE9mQm9va2VkW21zZy5zZW5kZXJdICE9IDApOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdICsgYW1vdW50T2ZCb29rZWRbbXNnLnNlbmRlcl0gPD0gbGltaXRQZXJIb2xkZXIpOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IFRpY2tldF9QcmljZSAqIGFtb3VudE9mQm9va2VkW21zZy5zZW5kZXJdKTsKICAgICAgICBtYWtlUGF5bWVudChtc2cuc2VuZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlUGF5bWVudChhZGRyZXNzIGJ1eWVyKSBpbnRlcm5hbCB7CiAgICAgICAgdWludCBpID0gMDsKICAgICAgICB1aW50IHNlYXRJRDsKICAgICAgICBzdHJpbmcgaW5mb1N0cmluZzsKICAgICAgICB3aGlsZShpIDwgbGltaXRQZXJIb2xkZXIpIHsKICAgICAgICAgICAgaWYoYm9va2luZ0xpc3RbYnV5ZXJdW2ldICE9IDApIHsKICAgICAgICAgICAgICBzZWF0SUQgPSBib29raW5nTGlzdFtidXllcl1baV07CiAgICAgICAgICAgICAgYm9va2luZ0xpc3RbYnV5ZXJdW2ldID0gMDsKICAgICAgICAgICAgICBib29raW5nW3NlYXRJRF0gPSBudWxsQWRkcmVzczsKICAgICAgICAgICAgICBjcmVhdGVUaWNrZXQoc2VhdElELCBidXllcik7CiAgICAgICAgICAgICAgaW5mb1N0cmluZyA9IGFkZGl0aW9uYWxJbmZvW3NlYXRJRF07CiAgICAgICAgICAgICAgTG9nQWxsb2NhdGVUaWNrZXQoc2VhdElELCBtc2cuc2VuZGVyLCBpbmZvU3RyaW5nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpKys7CiAgICAgICAgfQogICAgICAgIGFtb3VudE9mQm9va2VkW2J1eWVyXSA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcih1aW50MjU2IF92YWx1ZSkgZXh0ZXJuYWwgbWFuYWdlck9ubHl7CiAgICAgICBDb21wYW55LnRyYW5zZmVyKF92YWx1ZSk7CiAgICB9CgoKfQ=='.
	

]
