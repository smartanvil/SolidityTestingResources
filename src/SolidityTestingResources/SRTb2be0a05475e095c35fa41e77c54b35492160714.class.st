Class {
	#name : #SRTb2be0a05475e095c35fa41e77c54b35492160714,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb2be0a05475e095c35fa41e77c54b35492160714 >> base64 [
	^ ''.
	

]
