Class {
	#name : #SRT80a7e048f37a50500351c204cb407766fa3bae7f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80a7e048f37a50500351c204cb407766fa3bae7f >> base64 [
	^ ''.
	

]
