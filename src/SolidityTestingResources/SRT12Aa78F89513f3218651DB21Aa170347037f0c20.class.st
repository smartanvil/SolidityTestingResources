Class {
	#name : #SRT12Aa78F89513f3218651DB21Aa170347037f0c20,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT12Aa78F89513f3218651DB21Aa170347037f0c20 >> base64 [
	^ ''.
	

]
