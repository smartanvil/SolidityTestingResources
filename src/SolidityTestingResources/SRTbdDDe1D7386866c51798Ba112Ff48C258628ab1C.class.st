Class {
	#name : #SRTbdDDe1D7386866c51798Ba112Ff48C258628ab1C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbdDDe1D7386866c51798Ba112Ff48C258628ab1C >> base64 [
	^ ''.
	

]
