Class {
	#name : #SRTc438b4c0dfbb1593be6dee03bbd1a84bb3aa6213,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc438b4c0dfbb1593be6dee03bbd1a84bb3aa6213 >> base64 [
	^ ''.
	

]
