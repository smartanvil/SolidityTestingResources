Class {
	#name : #SRT980f4331c1d4188d4cf876bef10fe946de70478d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT980f4331c1d4188d4cf876bef10fe946de70478d >> base64 [
	^ ''.
	

]
