Class {
	#name : #SRTF0f31A0A83FC0D83177834Bbdce23F9fB2639818,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF0f31A0A83FC0D83177834Bbdce23F9fB2639818 >> base64 [
	^ ''.
	

]
