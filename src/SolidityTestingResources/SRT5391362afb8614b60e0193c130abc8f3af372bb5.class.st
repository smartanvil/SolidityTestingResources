Class {
	#name : #SRT5391362afb8614b60e0193c130abc8f3af372bb5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5391362afb8614b60e0193c130abc8f3af372bb5 >> base64 [
	^ ''.
	

]
