Class {
	#name : #SRT9329020B260A7e09A6271e0b719A2FE4bD96fA03,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9329020B260A7e09A6271e0b719A2FE4bD96fA03 >> base64 [
	^ ''.
	

]
