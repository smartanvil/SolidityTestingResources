Class {
	#name : #SRT23b9ed246ebe37dbc3ee6b0c84743de9d7217abc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT23b9ed246ebe37dbc3ee6b0c84743de9d7217abc >> base64 [
	^ ''.
	

]
