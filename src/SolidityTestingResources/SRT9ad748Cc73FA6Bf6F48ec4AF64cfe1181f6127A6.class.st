Class {
	#name : #SRT9ad748Cc73FA6Bf6F48ec4AF64cfe1181f6127A6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9ad748Cc73FA6Bf6F48ec4AF64cfe1181f6127A6 >> base64 [
	^ ''.
	

]
