Class {
	#name : #SRT3f9b89dc8190f8fac46def0bdd5eacf826c50408,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3f9b89dc8190f8fac46def0bdd5eacf826c50408 >> base64 [
	^ ''.
	

]
