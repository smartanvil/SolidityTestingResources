Class {
	#name : #SRT904079be18b34fefea1307bc5e3c29ada6f201dc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT904079be18b34fefea1307bc5e3c29ada6f201dc >> base64 [
	^ ''.
	

]
