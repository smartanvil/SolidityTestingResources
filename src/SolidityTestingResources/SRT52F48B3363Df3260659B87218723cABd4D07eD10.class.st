Class {
	#name : #SRT52F48B3363Df3260659B87218723cABd4D07eD10,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT52F48B3363Df3260659B87218723cABd4D07eD10 >> base64 [
	^ ''.
	

]
