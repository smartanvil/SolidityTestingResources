Class {
	#name : #SRT9a9ae6884c65725c8f5378dbb6d3900bff36da53,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a9ae6884c65725c8f5378dbb6d3900bff36da53 >> base64 [
	^ ''.
	

]
