Class {
	#name : #SRT79499d0f0b3a2a29a93583936c5e46a00e836097,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT79499d0f0b3a2a29a93583936c5e46a00e836097 >> base64 [
	^ ''.
	

]
