Class {
	#name : #SRT9e1a813ee8ac44d581b241605d7d9eb99af89f09,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e1a813ee8ac44d581b241605d7d9eb99af89f09 >> base64 [
	^ ''.
	

]
