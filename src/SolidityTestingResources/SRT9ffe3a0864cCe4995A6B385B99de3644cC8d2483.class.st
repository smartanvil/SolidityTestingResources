Class {
	#name : #SRT9ffe3a0864cCe4995A6B385B99de3644cC8d2483,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9ffe3a0864cCe4995A6B385B99de3644cC8d2483 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Cgpjb250cmFjdCBFdGhyYWZmbGVfdjJiIHsKICAgIHN0cnVjdCBDb250ZXN0YW50IHsKICAgICAgICBhZGRyZXNzIGFkZHI7CiAgICAgICAgdWludCByYWZmbGVJZDsKICAgIH0KCiAgICBldmVudCBSYWZmbGVSZXN1bHQoCiAgICAgICAgdWludCBpbmRleGVkIHJhZmZsZUlkLAogICAgICAgIHVpbnQgd2lubmluZ051bWJlciwKICAgICAgICBhZGRyZXNzIHdpbm5pbmdBZGRyZXNzLAogICAgICAgIGFkZHJlc3Mgc2VlZDEsCiAgICAgICAgYWRkcmVzcyBzZWVkMiwKICAgICAgICB1aW50IHNlZWQzLAogICAgICAgIGJ5dGVzMzIgcmFuZEhhc2gKICAgICk7CgogICAgZXZlbnQgVGlja2V0UHVyY2hhc2UoCiAgICAgICAgdWludCBpbmRleGVkIHJhZmZsZUlkLAogICAgICAgIGFkZHJlc3MgY29udGVzdGFudCwKICAgICAgICB1aW50IG51bWJlcgogICAgKTsKCiAgICBldmVudCBUaWNrZXRSZWZ1bmQoCiAgICAgICAgdWludCBpbmRleGVkIHJhZmZsZUlkLAogICAgICAgIGFkZHJlc3MgY29udGVzdGFudCwKICAgICAgICB1aW50IG51bWJlcgogICAgKTsKCiAgICAvLyBDb25zdGFudHMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IHByaXplID0gMi41IGV0aGVyOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZmVlID0gMC4wMyBldGhlcjsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IHRvdGFsVGlja2V0cyA9IDUwOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgcHJpY2VQZXJUaWNrZXQgPSAocHJpemUgKyBmZWUpIC8gdG90YWxUaWNrZXRzOyAvLyBNYWtlIHN1cmUgdGhpcyBkaXZpZGVzIGV2ZW5seQogICAgYWRkcmVzcyBmZWVBZGRyZXNzOwoKICAgIC8vIE90aGVyIGludGVybmFsIHZhcmlhYmxlcwogICAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CiAgICB1aW50IHB1YmxpYyByYWZmbGVJZCA9IDE7CiAgICB1aW50IG5leHRUaWNrZXQgPSAwOwogICAgbWFwcGluZyAodWludCA9PiBDb250ZXN0YW50KSBjb250ZXN0YW50czsKICAgIHVpbnRbXSBnYXBzOwoKICAgIC8vIEluaXRpYWxpemF0aW9uCiAgICBmdW5jdGlvbiBFdGhyYWZmbGVfdjJiKCkgcHVibGljIHsKICAgICAgICBmZWVBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLyBDYWxsIGJ1eVRpY2tldHMoKSB3aGVuIHJlY2VpdmluZyBFdGhlciBvdXRzaWRlIGEgZnVuY3Rpb24KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgcHVibGljIHsKICAgICAgICBidXlUaWNrZXRzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5VGlja2V0cygpIHBheWFibGUgcHVibGljIHsKICAgICAgICBpZiAocGF1c2VkKSB7CiAgICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdWludCBtb25leVNlbnQgPSBtc2cudmFsdWU7CgogICAgICAgIHdoaWxlIChtb25leVNlbnQgPj0gcHJpY2VQZXJUaWNrZXQgJiYgbmV4dFRpY2tldCA8IHRvdGFsVGlja2V0cykgewogICAgICAgICAgICB1aW50IGN1cnJUaWNrZXQgPSAwOwogICAgICAgICAgICBpZiAoZ2Fwcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjdXJyVGlja2V0ID0gZ2Fwc1tnYXBzLmxlbmd0aC0xXTsKICAgICAgICAgICAgICAgIGdhcHMubGVuZ3RoLS07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjdXJyVGlja2V0ID0gbmV4dFRpY2tldCsrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb250ZXN0YW50c1tjdXJyVGlja2V0XSA9IENvbnRlc3RhbnQobXNnLnNlbmRlciwgcmFmZmxlSWQpOwogICAgICAgICAgICBUaWNrZXRQdXJjaGFzZShyYWZmbGVJZCwgbXNnLnNlbmRlciwgY3VyclRpY2tldCk7CiAgICAgICAgICAgIG1vbmV5U2VudCAtPSBwcmljZVBlclRpY2tldDsKICAgICAgICB9CgogICAgICAgIC8vIENob29zZSB3aW5uZXIgaWYgd2Ugc29sZCBhbGwgdGhlIHRpY2tldHMKICAgICAgICBpZiAobmV4dFRpY2tldCA9PSB0b3RhbFRpY2tldHMpIHsKICAgICAgICAgICAgY2hvb3NlV2lubmVyKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBTZW5kIGJhY2sgbGVmdG92ZXIgbW9uZXkKICAgICAgICBpZiAobW9uZXlTZW50ID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1vbmV5U2VudCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNob29zZVdpbm5lcigpIHByaXZhdGUgewogICAgICAgIGFkZHJlc3Mgc2VlZDEgPSBjb250ZXN0YW50c1t1aW50KGJsb2NrLmNvaW5iYXNlKSAlIHRvdGFsVGlja2V0c10uYWRkcjsKICAgICAgICBhZGRyZXNzIHNlZWQyID0gY29udGVzdGFudHNbdWludChtc2cuc2VuZGVyKSAlIHRvdGFsVGlja2V0c10uYWRkcjsKICAgICAgICB1aW50IHNlZWQzID0gYmxvY2suZGlmZmljdWx0eTsKICAgICAgICBieXRlczMyIHJhbmRIYXNoID0ga2VjY2FrMjU2KHNlZWQxLCBzZWVkMiwgc2VlZDMpOwoKICAgICAgICB1aW50IHdpbm5pbmdOdW1iZXIgPSB1aW50KHJhbmRIYXNoKSAlIHRvdGFsVGlja2V0czsKICAgICAgICBhZGRyZXNzIHdpbm5pbmdBZGRyZXNzID0gY29udGVzdGFudHNbd2lubmluZ051bWJlcl0uYWRkcjsKICAgICAgICBSYWZmbGVSZXN1bHQocmFmZmxlSWQsIHdpbm5pbmdOdW1iZXIsIHdpbm5pbmdBZGRyZXNzLCBzZWVkMSwgc2VlZDIsIHNlZWQzLCByYW5kSGFzaCk7CgogICAgICAgIC8vIFN0YXJ0IG5leHQgcmFmZmxlCiAgICAgICAgcmFmZmxlSWQrKzsKICAgICAgICBuZXh0VGlja2V0ID0gMDsKCiAgICAgICAgLy8gZ2Fwcy5sZW5ndGggPSAwIGlzbid0IG5lY2Vzc2FyeSBoZXJlLAogICAgICAgIC8vIGJlY2F1c2UgYnV5VGlja2V0cygpIGV2ZW50dWFsbHkgY2xlYXJzCiAgICAgICAgLy8gdGhlIGdhcHMgYXJyYXkgaW4gdGhlIGxvb3AgaXRzZWxmLgoKICAgICAgICAvLyBEaXN0cmlidXRlIHByaXplIGFuZCBmZWUKICAgICAgICB3aW5uaW5nQWRkcmVzcy50cmFuc2Zlcihwcml6ZSk7CiAgICAgICAgZmVlQWRkcmVzcy50cmFuc2ZlcihmZWUpOwogICAgfQoKICAgIC8vIEdldCB5b3VyIG1vbmV5IGJhY2sgYmVmb3JlIHRoZSByYWZmbGUgb2NjdXJzCiAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKSBwdWJsaWMgewogICAgICAgIHVpbnQgcmVmdW5kID0gMDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB0b3RhbFRpY2tldHM7IGkrKykgewogICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjb250ZXN0YW50c1tpXS5hZGRyICYmIHJhZmZsZUlkID09IGNvbnRlc3RhbnRzW2ldLnJhZmZsZUlkKSB7CiAgICAgICAgICAgICAgICByZWZ1bmQgKz0gcHJpY2VQZXJUaWNrZXQ7CiAgICAgICAgICAgICAgICBjb250ZXN0YW50c1tpXSA9IENvbnRlc3RhbnQoYWRkcmVzcygwKSwgMCk7CiAgICAgICAgICAgICAgICBnYXBzLnB1c2goaSk7CiAgICAgICAgICAgICAgICBUaWNrZXRSZWZ1bmQocmFmZmxlSWQsIG1zZy5zZW5kZXIsIGkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocmVmdW5kID4gMCkgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHJlZnVuZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIFJlZnVuZCBldmVyeW9uZSdzIG1vbmV5LCBzdGFydCBhIG5ldyByYWZmbGUsIHRoZW4gcGF1c2UgaXQKICAgIGZ1bmN0aW9uIGVuZFJhZmZsZSgpIHB1YmxpYyB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gZmVlQWRkcmVzcykgewogICAgICAgICAgICBwYXVzZWQgPSB0cnVlOwoKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgdG90YWxUaWNrZXRzOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChyYWZmbGVJZCA9PSBjb250ZXN0YW50c1tpXS5yYWZmbGVJZCkgewogICAgICAgICAgICAgICAgICAgIFRpY2tldFJlZnVuZChyYWZmbGVJZCwgY29udGVzdGFudHNbaV0uYWRkciwgaSk7CiAgICAgICAgICAgICAgICAgICAgY29udGVzdGFudHNbaV0uYWRkci50cmFuc2ZlcihwcmljZVBlclRpY2tldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFJhZmZsZVJlc3VsdChyYWZmbGVJZCwgdG90YWxUaWNrZXRzLCBhZGRyZXNzKDApLCBhZGRyZXNzKDApLCBhZGRyZXNzKDApLCAwLCAwKTsKICAgICAgICAgICAgcmFmZmxlSWQrKzsKICAgICAgICAgICAgbmV4dFRpY2tldCA9IDA7CiAgICAgICAgICAgIGdhcHMubGVuZ3RoID0gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdG9nZ2xlUGF1c2UoKSBwdWJsaWMgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGZlZUFkZHJlc3MpIHsKICAgICAgICAgICAgcGF1c2VkID0gIXBhdXNlZDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24ga2lsbCgpIHB1YmxpYyB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gZmVlQWRkcmVzcykgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3QoZmVlQWRkcmVzcyk7CiAgICAgICAgfQogICAgfQp9'.
	

]
