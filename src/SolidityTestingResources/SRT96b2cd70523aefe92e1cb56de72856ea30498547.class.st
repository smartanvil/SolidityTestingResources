Class {
	#name : #SRT96b2cd70523aefe92e1cb56de72856ea30498547,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96b2cd70523aefe92e1cb56de72856ea30498547 >> base64 [
	^ ''.
	

]
