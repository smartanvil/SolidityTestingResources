Class {
	#name : #SRT0DC568Fc30EB731B6551848382e53bDF2c47A230,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0DC568Fc30EB731B6551848382e53bDF2c47A230 >> base64 [
	^ ''.
	

]
