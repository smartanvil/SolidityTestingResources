Class {
	#name : #SRT208784ec354E65d6F51cFB72aA72B98c05a59c46,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT208784ec354E65d6F51cFB72aA72B98c05a59c46 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTQ7CgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9TdGFuZGFyZGl6ZWRfQ29udHJhY3RfQVBJcyN0cmFuc2ZlcmFibGUtZnVuZ2libGVzLXNlZS1lcmMtMjAtZm9yLXRoZS1sYXRlc3QKCgpjb250cmFjdCBFUkMyMFRva2VuIHsKICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7CgogICAgLy8gR2V0IHRoZSBhY2NvdW50IGBiYWxhbmNlYCBvZiBhbm90aGVyIGFjY291bnQgd2l0aCBhZGRyZXNzIGBfb3duZXJgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8gU2VuZCBgX3ZhbHVlYCBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgYF90b2AKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLyBTZW5kIGBfdmFsdWVgIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIGBfZnJvbWAgdG8gYWRkcmVzcyBgX3RvYAogICAgLy8gVGhlIGB0cmFuc2ZlckZyb21gIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZCB0b2tlbnMgb24geW91ciBiZWhhbGYsIAogICAgLy8gZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IAogICAgLy8gdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBgX2Zyb21gIGFjY291bnQgaGFzIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgCiAgICAvLyB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UgdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGBhcHByb3ZhbGA6CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXIKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwp9CgoKY29udHJhY3QgRGVlcENvaW5Ub2tlbiBpcyBFUkMyMFRva2VuIHsKICAgIGFkZHJlc3MgcHVibGljIGluaXRpYWxPd25lcjsKCiAgICB1aW50MjU2IHB1YmxpYyBzdXBwbHkgPSAxMDAwMDAwMDAgKiA2MCAqIDEwICoqIDE4OyAgLy8gNjAwMCwgMDAwLCAwMDAKICAgIHN0cmluZyAgcHVibGljIG5hbWUgPSAiRGVlcGZpbiBDb2luIjsKCiAgICB1aW50OCAgIHB1YmxpYyBkZWNpbWFscyA9IDE4OwoKICAgIHN0cmluZyAgcHVibGljIHN5bWJvbCA9ICdERkMnOwoKICAgIHN0cmluZyAgcHVibGljIHZlcnNpb24gPSAndjAuMSc7CgogICAgYm9vbCAgICBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZCA9IHRydWU7CgogICAgdWludCAgICBwdWJsaWMgY3JlYXRpb25CbG9jazsKCiAgICB1aW50ICAgIHB1YmxpYyBjcmVhdGlvblRpbWU7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlOwoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgbV9hbGxvd2FuY2U7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBqYWlsOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKICAgIGZ1bmN0aW9uIERlZXBDb2luVG9rZW4oKSB7CiAgICAgICAgaW5pdGlhbE93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlW21zZy5zZW5kZXJdID0gc3VwcGx5OwogICAgICAgIGNyZWF0aW9uQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICAgICAgY3JlYXRpb25UaW1lID0gYmxvY2sudGltZXN0YW1wOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9hY2NvdW50KSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VbX2FjY291bnRdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBzdXBwbHk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBgcmV2ZXJ0KClgIHwgYHRocm93YAogICAgICAgIC8vICAgICAgaHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL2RldmVsb3AvY29udHJvbC1zdHJ1Y3R1cmVzLmh0bWwjZXJyb3ItaGFuZGxpbmctYXNzZXJ0LXJlcXVpcmUtcmV2ZXJ0LWFuZC1leGNlcHRpb25zCiAgICAgICAgLy8gICAgICBodHRwczovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yMDk3OC93aHktZG8tdGhyb3ctYW5kLXJldmVydC1jcmVhdGUtZGlmZmVyZW50LWJ5dGVjb2Rlcy8yMDk4MQogICAgICAgIGlmICghdHJhbnNmZXJzRW5hYmxlZCkgcmV2ZXJ0KCk7CiAgICAgICAgaWYgKGphaWxbbXNnLnNlbmRlcl0gPj0gYmxvY2sudGltZXN0YW1wKSByZXZlcnQoKTsKCiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoIXRyYW5zZmVyc0VuYWJsZWQpIHJldmVydCgpOwogICAgICAgIGlmIChqYWlsW21zZy5zZW5kZXJdID49IGJsb2NrLnRpbWVzdGFtcCB8fCBqYWlsW190b10gPj0gYmxvY2sudGltZXN0YW1wIHx8IGphaWxbX2Zyb21dID49IGJsb2NrLnRpbWVzdGFtcCkgcmV2ZXJ0KCk7CgogICAgICAgIGlmIChhbGxvd2FuY2UoX2Zyb20sIG1zZy5zZW5kZXIpIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7CgogICAgICAgIG1fYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CgogICAgICAgIGlmICghKGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKSkpIHsKICAgICAgICAgICAgbV9hbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdICs9IF92YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZVtfZnJvbV0gPj0gX3ZhbHVlICYmIGJhbGFuY2VbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlW190b10pIHsKICAgICAgICAgICAgYmFsYW5jZVtfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlW190b10gKz0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSByZXZlcnQoKTsKICAgICAgICBpZiAoamFpbFttc2cuc2VuZGVyXSA+PSBibG9jay50aW1lc3RhbXAgfHwgamFpbFtfc3BlbmRlcl0gPj0gYmxvY2sudGltZXN0YW1wKSByZXZlcnQoKTsKCiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dhbmNlKG1zZy5zZW5kZXIsIF9zcGVuZGVyKSAhPSAwKSkgcmV2ZXJ0KCk7CgogICAgICAgIG1fYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmICghdHJhbnNmZXJzRW5hYmxlZCkgcmV2ZXJ0KCk7CgogICAgICAgIHJldHVybiBtX2FsbG93YW5jZVtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2ZlcnMoYm9vbCBfdHJhbnNmZXJzRW5hYmxlZCkgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGluaXRpYWxPd25lcikgcmV2ZXJ0KCk7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgICAgIHJldHVybiB0cmFuc2ZlcnNFbmFibGVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhdGNoWW91KGFkZHJlc3MgX3RhcmdldCwgdWludCBfdGltZXN0YW1wKSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gaW5pdGlhbE93bmVyKSByZXZlcnQoKTsKICAgICAgICBpZiAoIXRyYW5zZmVyc0VuYWJsZWQpIHJldmVydCgpOwoKICAgICAgICBqYWlsW190YXJnZXRdID0gX3RpbWVzdGFtcDsKCiAgICAgICAgcmV0dXJuIGphaWxbX3RhcmdldF07CiAgICB9Cn0='.
	

]
