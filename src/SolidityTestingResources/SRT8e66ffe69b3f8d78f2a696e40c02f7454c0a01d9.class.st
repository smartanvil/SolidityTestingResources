Class {
	#name : #SRT8e66ffe69b3f8d78f2a696e40c02f7454c0a01d9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8e66ffe69b3f8d78f2a696e40c02f7454c0a01d9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCmNvbnRyYWN0IFJFUyB7IAoKICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovCiAgICBzdHJpbmcgcHVibGljIG5hbWU7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsKICAgIAogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICAKICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwogICAgCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgCgogICAgLyogQm91Z2h0IG9yIHNvbGQgKi8KCiAgICBldmVudCBCb3VnaHQoYWRkcmVzcyBmcm9tLCB1aW50IGFtb3VudCk7CiAgICBldmVudCBTb2xkKGFkZHJlc3MgZnJvbSwgdWludCBhbW91bnQpOwogICAgZXZlbnQgQm91Z2h0VmlhSm9oYW4oYWRkcmVzcyBmcm9tLCB1aW50IGFtb3VudCk7CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBuYW1lLCBzeW1ib2wgYW5kIGRlY2ltYWxzICovCgogICAgZnVuY3Rpb24gUkVTKCkgewogICAgICAgIG5hbWUgPSAiUkVTIjsgICAgIAogICAgICAgIHN5bWJvbCA9ICJSRVMiOwogICAgICAgIGRlY2ltYWxzID0gMTg7CiAgICB9Cgp9Cgpjb250cmFjdCBTd2FybVJlZGlzdHJpYnV0aW9uIGlzIFJFUyB7CiAgICAKICAgIGFkZHJlc3MgcHVibGljIEpvaGFuTnlncmVuOwogICAgYm9vbCBwdWJsaWMgY2FtcGFpZ25PcGVuOyAgICAKCiAgICBzdHJ1Y3QgZGl2aWRlbmRQYXRod2F5IHsKICAgICAgYWRkcmVzcyBmcm9tOwogICAgICB1aW50IGFtb3VudDsKICAgICAgdWludCB0aW1lU3RhbXA7CiAgICB9CgogICAgbWFwcGluZyhhZGRyZXNzID0+IGRpdmlkZW5kUGF0aHdheVtdKSBwdWJsaWMgZGl2aWRlbmRQYXRod2F5czsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyB0b3RhbEJhc2ljSW5jb21lOwoKICAgIHVpbnQgdGF4UmF0ZTsKCiAgICBzdHJ1Y3QgTm9kZSB7CiAgICAgIGFkZHJlc3Mgbm9kZTsKICAgICAgYWRkcmVzcyBwYXJlbnQ7CiAgICAgIHVpbnQgaW5kZXg7CiAgICB9CiAgICAKICAgIC8qIEdlbmVyYXRlIGEgc3dhcm0gdHJlZSAqLwogICAgTm9kZVtdIHN3YXJtVHJlZTsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGluU3dhcm1UcmVlOwogICAgCiAgICBib29sIEpvaGFuSW5Td2FybTsKCiAgICBldmVudCBTd2FybShhZGRyZXNzIGluZGV4ZWQgbGVhZiwgYWRkcmVzcyBpbmRleGVkIG5vZGUsIHVpbnQyNTYgc2hhcmUpOwoKICAgIGZ1bmN0aW9uIFN3YXJtUmVkaXN0cmlidXRpb24oKSB7CiAgICAgIAogICAgLyogVGF4LXJhdGUgaW4gcGFydHMgcGVyIHRob3VzYW5kICovCiAgICB0YXhSYXRlID0gMjA7CiAgICBKb2hhbk55Z3JlbiA9IDB4OTQ4MTc2Q0I0MkI2NWQ4MzVFZTQzMjQ5MTRCMTA0QjY2ZkI5M0I1MjsKICAgIGNhbXBhaWduT3BlbiA9IHRydWU7CiAgICAKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb25seUpvaGFuIHsKICAgICAgaWYobXNnLnNlbmRlciAhPSBKb2hhbk55Z3JlbikgdGhyb3c7CiAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNPcGVuIHsKICAgICAgaWYoY2FtcGFpZ25PcGVuICE9IHRydWUpIHRocm93OwogICAgICBfOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VKb2hhbk55Z3JlbnNBZGRyZXNzKGFkZHJlc3MgX25ld0FkZHJlc3MpIG9ubHlKb2hhbiB7CiAgICAgIEpvaGFuTnlncmVuID0gX25ld0FkZHJlc3M7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNsb3NlQ2FtcGFpZ24oKSBvbmx5Sm9oYW4gewogICAgICAgIGNhbXBhaWduT3BlbiA9PSBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXkoKSBpc09wZW4gcHVibGljIHBheWFibGUgewogICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBtc2cudmFsdWU7CiAgICAgIHRvdGFsU3VwcGx5ICs9IG1zZy52YWx1ZTsKICAgICAgQm91Z2h0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9ICAKCiAgICBmdW5jdGlvbiBidXlWaWFKb2hhbigpIGlzT3BlbiBwdWJsaWMgcGF5YWJsZSB7CiAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IG1zZy52YWx1ZTsKICAgICAgdG90YWxTdXBwbHkgKz0gbXNnLnZhbHVlOyAgCgogICAgICAvKiBDcmVhdGUgdGhlIGRpdmlkZW5kIHBhdGh3YXkgKi8KICAgICAgZGl2aWRlbmRQYXRod2F5c1ttc2cuc2VuZGVyXS5wdXNoKGRpdmlkZW5kUGF0aHdheSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogSm9oYW5OeWdyZW4sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogIG1zZy52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lU3RhbXA6IG5vdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICBCb3VnaHRWaWFKb2hhbihtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNlbGwodWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CiAgICAgIGlmKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7CiAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAKICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoX3ZhbHVlKSkgdGhyb3c7CgogICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7CiAgICAgIFNvbGQobXNnLnNlbmRlciwgX3ZhbHVlKTsKCiAgICB9CgogICAgLyogU2VuZCBjb2lucyAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBpc09wZW4gewogICAgICAgIC8qIHJlamVjdCB0cmFuc2FjdGlvbiB0byBzZWxmIHRvIHByZXZlbnQgZGl2aWRlbmQgcGF0aHdheSBsb29wcyovCiAgICAgICAgaWYoX3RvID09IG1zZy5zZW5kZXIpIHRocm93OwogICAgICAgIAogICAgICAgIC8qIGlmIHRoZSBzZW5kZXIgZG9lbnN0IGhhdmUgZW5vdWdoIGJhbGFuY2UgdGhlbiBzdG9wICovCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7CiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OwogICAgICAgIAogICAgICAgIC8qIENhbGN1bGF0ZSB0YXggKi8KICAgICAgICB1aW50MjU2IHRheENvbGxlY3RlZCA9IF92YWx1ZSAqIHRheFJhdGUgLyAxMDAwOwogICAgICAgIHVpbnQyNTYgc2VudEFtb3VudDsKCiAgICAgICAgLyogQ3JlYXRlIHRoZSBkaXZpZGVuZCBwYXRod2F5ICovCiAgICAgICAgZGl2aWRlbmRQYXRod2F5c1tfdG9dLnB1c2goZGl2aWRlbmRQYXRod2F5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IG1zZy5zZW5kZXIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiAgX3ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wOiBub3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgCiAgICAgICAgaWYoc3dhcm1SZWRpc3RyaWJ1dGlvbihfdG8sIHRheENvbGxlY3RlZCkgPT0gdHJ1ZSkgewogICAgICAgICAgc2VudEFtb3VudCA9IF92YWx1ZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAvKiBSZXR1cm4gdGF4ICovCiAgICAgICAgICBzZW50QW1vdW50ID0gX3ZhbHVlIC0gdGF4Q29sbGVjdGVkOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAgIC8qIEFkZCBhbmQgc3VidHJhY3QgbmV3IGJhbGFuY2VzICovCgogICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IHNlbnRBbW91bnQ7CiAgICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWUgLSB0YXhDb2xsZWN0ZWQ7CiAgICAgICAgCgogICAgICAgIC8qIE5vdGlmaXkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZSAqLwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgc2VudEFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3dhcm1SZWRpc3RyaWJ1dGlvbihhZGRyZXNzIF90bywgdWludDI1NiBfdGF4Q29sbGVjdGVkKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgICAgaXRlcmF0ZVRocm91Z2hTd2FybShfdG8sIG5vdyk7CiAgICAgICAgICAgaWYoc3dhcm1UcmVlLmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICAgcmV0dXJuIGRvU3dhcm0oX3RvLCBfdGF4Q29sbGVjdGVkKTsKICAgICAgICAgICB9CiAgICAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICBmdW5jdGlvbiBpdGVyYXRlVGhyb3VnaFN3YXJtKGFkZHJlc3MgX25vZGUsIHVpbnQgX3RpbWVTdGFtcCkgaW50ZXJuYWwgewogICAgICBpZihkaXZpZGVuZFBhdGh3YXlzW19ub2RlXS5sZW5ndGggIT0gMCkgewogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgZGl2aWRlbmRQYXRod2F5c1tfbm9kZV0ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmKGluU3dhcm1UcmVlW2RpdmlkZW5kUGF0aHdheXNbX25vZGVdW2ldLmZyb21dID09IGZhbHNlKSB7IAogICAgICAgICAgICAKICAgICAgICAgICAgdWludCB0aW1lU3RhbXAgPSBkaXZpZGVuZFBhdGh3YXlzW19ub2RlXVtpXS50aW1lU3RhbXA7CiAgICAgICAgICAgIGlmKHRpbWVTdGFtcCA8PSBfdGltZVN0YW1wKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICBpZihkaXZpZGVuZFBhdGh3YXlzW19ub2RlXVtpXS5mcm9tID09IEpvaGFuTnlncmVuKSBKb2hhbkluU3dhcm0gPSB0cnVlOwogICAgCiAgICAgICAgICAgICAgICBOb2RlIG1lbW9yeSBub2RlID0gTm9kZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkaXZpZGVuZFBhdGh3YXlzW19ub2RlXVtpXS5mcm9tLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogX25vZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBzd2FybVRyZWUucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgaW5Td2FybVRyZWVbbm9kZS5ub2RlXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGl0ZXJhdGVUaHJvdWdoU3dhcm0obm9kZS5ub2RlLCB0aW1lU3RhbXApOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBkb1N3YXJtKGFkZHJlc3MgX2xlYWYsIHVpbnQyNTYgX3RheENvbGxlY3RlZCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAKICAgICAgdWludDI1NiBzaGFyZTsKICAgICAgaWYoSm9oYW5JblN3YXJtKSBzaGFyZSA9IF90YXhDb2xsZWN0ZWQ7CiAgICAgIGVsc2Ugc2hhcmUgPSAwOwogICAgCiAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgc3dhcm1UcmVlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgCiAgICAgICAgYWRkcmVzcyBub2RlID0gc3dhcm1UcmVlW2ldLm5vZGU7CiAgICAgICAgYWRkcmVzcyBwYXJlbnQgPSBzd2FybVRyZWVbaV0ucGFyZW50OwogICAgICAgIHVpbnQgaW5kZXggPSBzd2FybVRyZWVbaV0uaW5kZXg7CiAgICAgICAgCiAgICAgICAgYm9vbCBpc0pvaGFuOwogICAgICAgIGlmKG5vZGUgPT0gSm9oYW5OeWdyZW4pIGlzSm9oYW4gPSB0cnVlOwoKICAgICAgICBpZihpc0pvaGFuKSB7CiAgICAgICAgICBiYWxhbmNlT2Zbc3dhcm1UcmVlW2ldLm5vZGVdICs9IHNoYXJlOwogICAgICAgIHRvdGFsQmFzaWNJbmNvbWVbbm9kZV0gKz0gc2hhcmU7CiAgICAgICAgfQogICAgICAgICAgCiAgICAgICAgaWYoZGl2aWRlbmRQYXRod2F5c1twYXJlbnRdW2luZGV4XS5hbW91bnQgLSBfdGF4Q29sbGVjdGVkID4gMCkgewogICAgICAgICAgZGl2aWRlbmRQYXRod2F5c1twYXJlbnRdW2luZGV4XS5hbW91bnQgLT0gX3RheENvbGxlY3RlZDsgCiAgICAgICAgfQogICAgICAgIGVsc2UgcmVtb3ZlRGl2aWRlbmRQYXRod2F5KHBhcmVudCwgaW5kZXgpOwogICAgICAgIAogICAgICAgIGluU3dhcm1UcmVlW25vZGVdID0gZmFsc2U7CiAgICAgICAgCiAgICAgICAgLyogTm90aWZpeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyBzd2FybSB0b29rIHBsYWNlICovCiAgICAgICAgaWYoaXNKb2hhbikgU3dhcm0oX2xlYWYsIHN3YXJtVHJlZVtpXS5ub2RlLCBzaGFyZSk7CiAgICAgIH0KICAgICAgZGVsZXRlIHN3YXJtVHJlZTsKICAgICAgYm9vbCBKb2hhbldhc0luU3dhcm0gPSBKb2hhbkluU3dhcm07CiAgICAgIGRlbGV0ZSBKb2hhbkluU3dhcm07CgogICAgICBpZighSm9oYW5XYXNJblN3YXJtKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVEaXZpZGVuZFBhdGh3YXkoYWRkcmVzcyBub2RlLCB1aW50IGluZGV4KSBpbnRlcm5hbCB7CiAgICAgICAgICAgICAgICBkZWxldGUgZGl2aWRlbmRQYXRod2F5c1tub2RlXVtpbmRleF07CiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IGluZGV4OyBpIDwgZGl2aWRlbmRQYXRod2F5c1tub2RlXS5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGl2aWRlbmRQYXRod2F5c1tub2RlXVtpXSA9IGRpdmlkZW5kUGF0aHdheXNbbm9kZV1baSArIDFdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGl2aWRlbmRQYXRod2F5c1tub2RlXS5sZW5ndGgtLTsKICAgICAgICB9Cgp9'.
	

]
