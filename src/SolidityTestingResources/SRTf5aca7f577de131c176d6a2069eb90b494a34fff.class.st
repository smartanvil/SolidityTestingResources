Class {
	#name : #SRTf5aca7f577de131c176d6a2069eb90b494a34fff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5aca7f577de131c176d6a2069eb90b494a34fff >> base64 [
	^ ''.
	

]
