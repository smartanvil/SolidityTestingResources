Class {
	#name : #SRTa9e4E3b1DA2462752AeA980698c335E70E9AB26C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa9e4E3b1DA2462752AeA980698c335E70E9AB26C >> base64 [
	^ 'Y29udHJhY3QgRHluYW1pY1B5cmFtaWQgewoKICAgIC8vRGVjbGFyZSB2YXJpYWJsZXMgZm9yIHN0b3JhZ2UgY3JpdGljYWwgdG8gY29udHJhY3QKICAgIHVpbnQgcHJpdmF0ZSBiYWxhbmNlID0gMDsKICAgIHVpbnQgcHJpdmF0ZSBjb2xsZWN0ZWRGZWVzID0gMDsKICAgIHVpbnQgcHJpdmF0ZSBmZWVQZXJjZW50ID0gMTA7CiAgICB1aW50IHByaXZhdGUgcHlyYW1pZE11bHRpcGxpZXIgPSAzMDA7CiAgICB1aW50IHByaXZhdGUgcGF5b3V0T3JkZXIgPSAwOwoKICAgIGFkZHJlc3MgcHJpdmF0ZSBjcmVhdG9yOwogICAgCiAgICAvL1NldHMgY3JlYXRvcgogICAgZnVuY3Rpb24gRHluYW1pY1B5cmFtaWQoKSB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seW93bmVyIHsgaWYgKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgXzsgfSAgICAKICAgIHN0cnVjdCBQYXJ0aWNpcGFudCB7CiAgICAgICAgYWRkcmVzcyBldGhlckFkZHJlc3M7CiAgICAgICAgdWludCBwYXlvdXQ7CiAgICB9CgogICAgUGFydGljaXBhbnRbXSBwcml2YXRlIHBhcnRpY2lwYW50czsKCiAgICAvL0ZhbGxiYWNrIGZ1bmN0aW9uCiAgICBmdW5jdGlvbigpIHsKICAgICAgICBpbml0KCk7CiAgICB9CiAgICAKICAgIC8vaW5pdCBmdW5jdGlvbiBydW4gb24gZmFsbGJhY2sKICAgIGZ1bmN0aW9uIGluaXQoKSBwcml2YXRlewogICAgICAgIC8vRW5zdXJlcyBvbmx5IHR4IHdpdGggdmFsdWUgb2YgMSBldGhlciBvciBncmVhdGVyIGFyZSBwcm9jZXNzZWQgYW5kIGFkZGVkIHRvIHB5cmFtaWQKICAgICAgICBpZiAobXNnLnZhbHVlIDwgMSBldGhlcikgewogICAgICAgICAgICBjb2xsZWN0ZWRGZWVzICs9IG1zZy52YWx1ZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB1aW50IF9mZWUgPSBmZWVQZXJjZW50OwogICAgICAgIC8vNTAlIGZlZSByZWJhdGUgb24gYW55IGV0aGVyIHZhbHVlIG9mIDUwIG9yIGdyZWF0ZXIKICAgICAgICBpZiAobXNnLnZhbHVlID49IDUwIGV0aGVyKSBfZmVlIC89IDI7CiAgICAgICAgCiAgICAgICAgYWRkUGF5b3V0KF9mZWUpOwogICAgfQogICAgCiAgICAvL0Z1bmN0aW9uIGNhbGxlZCBmb3IgdmFsaWQgdHggdG8gdGhlIGNvbnRyYWN0IAogICAgZnVuY3Rpb24gYWRkUGF5b3V0KHVpbnQgX2ZlZSkgcHJpdmF0ZSB7CiAgICAgICAgLy9BZGRzIG5ldyBhZGRyZXNzIHRvIHBhcnRpY2lwYW50IGFycmF5CiAgICAgICAgcGFydGljaXBhbnRzLnB1c2goUGFydGljaXBhbnQobXNnLnNlbmRlciwgKG1zZy52YWx1ZSAqIHB5cmFtaWRNdWx0aXBsaWVyKSAvIDEwMCkpOwogICAgICAgIAogICAgICAgIC8vVGhlc2Ugc3RhdGVtZW50cyBlbnN1cmUgYSBxdWlja2VyIHBheW91dCBzeXN0ZW0gdG8gbGF0ZXIgcHlyYW1pZCBlbnRyYW50cywgc28gdGhlIHB5cmFtaWQgaGFzIGEgbG9uZ2VyIGxpZmVzcGFuCiAgICAgICAgaWYgKHBhcnRpY2lwYW50cy5sZW5ndGggPT0gMTApICBweXJhbWlkTXVsdGlwbGllciA9IDIwMDsKICAgICAgICBlbHNlIGlmIChwYXJ0aWNpcGFudHMubGVuZ3RoID09IDI1KSAgcHlyYW1pZE11bHRpcGxpZXIgPSAxNTA7CiAgICAgICAgCiAgICAgICAgLy8gY29sbGVjdCBmZWVzIGFuZCB1cGRhdGUgY29udHJhY3QgYmFsYW5jZQogICAgICAgIGJhbGFuY2UgKz0gKG1zZy52YWx1ZSAqICgxMDAgLSBfZmVlKSkvMTAwOwogICAgICAgIGNvbGxlY3RlZEZlZXMgKz0gKG1zZy52YWx1ZSAqIF9mZWUpLzEwMDsKICAgICAgICAKCS8vUGF5cyBlYXJsaWVyIHBhcnRpY2lwaWFudHMgaWYgYmFsYW5jZSBzdWZmaWNpZW50CiAgICAgICAgd2hpbGUgKGJhbGFuY2UgPiBwYXJ0aWNpcGFudHNbcGF5b3V0T3JkZXJdLnBheW91dCkgewogICAgICAgICAgICB1aW50IHBheW91dFRvU2VuZCA9IHBhcnRpY2lwYW50c1twYXlvdXRPcmRlcl0ucGF5b3V0OwogICAgICAgICAgICBwYXJ0aWNpcGFudHNbcGF5b3V0T3JkZXJdLmV0aGVyQWRkcmVzcy5zZW5kKHBheW91dFRvU2VuZCk7CgogICAgICAgICAgICBiYWxhbmNlIC09IHBhcnRpY2lwYW50c1twYXlvdXRPcmRlcl0ucGF5b3V0OwogICAgICAgICAgICBwYXlvdXRPcmRlciArPSAxOwogICAgICAgIH0KICAgIH0KCiAgICAvL0ZlZSBmdW5jdGlvbnMgZm9yIGNyZWF0b3IKICAgIGZ1bmN0aW9uIGNvbGxlY3RBbGxGZWVzKCkgb25seW93bmVyIHsKICAgICAgICBpZiAoY29sbGVjdGVkRmVlcyA9PSAwKSB0aHJvdzsKCiAgICAgICAgY3JlYXRvci5zZW5kKGNvbGxlY3RlZEZlZXMpOwogICAgICAgIGNvbGxlY3RlZEZlZXMgPSAwOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjb2xsZWN0RmVlc0luRXRoZXIodWludCBfYW10KSBvbmx5b3duZXIgewogICAgICAgIF9hbXQgKj0gMSBldGhlcjsKICAgICAgICBpZiAoX2FtdCA+IGNvbGxlY3RlZEZlZXMpIGNvbGxlY3RBbGxGZWVzKCk7CiAgICAgICAgCiAgICAgICAgaWYgKGNvbGxlY3RlZEZlZXMgPT0gMCkgdGhyb3c7CgogICAgICAgIGNyZWF0b3Iuc2VuZChfYW10KTsKICAgICAgICBjb2xsZWN0ZWRGZWVzIC09IF9hbXQ7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNvbGxlY3RQZXJjZW50T2ZGZWVzKHVpbnQgX3BjZW50KSBvbmx5b3duZXIgewogICAgICAgIGlmIChjb2xsZWN0ZWRGZWVzID09IDAgfHwgX3BjZW50ID4gMTAwKSB0aHJvdzsKICAgICAgICAKICAgICAgICB1aW50IGZlZXNUb0NvbGxlY3QgPSBjb2xsZWN0ZWRGZWVzIC8gMTAwICogX3BjZW50OwogICAgICAgIGNyZWF0b3Iuc2VuZChmZWVzVG9Db2xsZWN0KTsKICAgICAgICBjb2xsZWN0ZWRGZWVzIC09IGZlZXNUb0NvbGxlY3Q7CiAgICB9CgogICAgLy9GdW5jdGlvbnMgZm9yIGNoYW5naW5nIHZhcmlhYmxlcyByZWxhdGVkIHRvIHRoZSBjb250cmFjdAogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHlvd25lciB7CiAgICAgICAgY3JlYXRvciA9IF9vd25lcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlTXVsdGlwbGllcih1aW50IF9tdWx0KSBvbmx5b3duZXIgewogICAgICAgIGlmIChfbXVsdCA+IDMwMCB8fCBfbXVsdCA8IDEyMCkgdGhyb3c7CiAgICAgICAgCiAgICAgICAgcHlyYW1pZE11bHRpcGxpZXIgPSBfbXVsdDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2hhbmdlRmVlUGVyY2VudGFnZSh1aW50IF9mZWUpIG9ubHlvd25lciB7CiAgICAgICAgaWYgKF9mZWUgPiAxMCkgdGhyb3c7CiAgICAgICAgCiAgICAgICAgZmVlUGVyY2VudCA9IF9mZWU7CiAgICB9CiAgICAKICAgIC8vRnVuY3Rpb25zIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gdG8gZW5kLXVzZXIgdXNpbmcgSlNPTiBpbnRlcmZhY2Ugb3Igb3RoZXIgaW50ZXJmYWNlcwogICAgZnVuY3Rpb24gY3VycmVudE11bHRpcGxpZXIoKSBjb25zdGFudCByZXR1cm5zICh1aW50IG11bHRpcGxpZXIsIHN0cmluZyBpbmZvKSB7CiAgICAgICAgbXVsdGlwbGllciA9IHB5cmFtaWRNdWx0aXBsaWVyOwogICAgICAgIGluZm8gPSAnVGhpcyBtdWx0aXBsaWVyIGFwcGxpZXMgdG8geW91IGFzIHNvb24gYXMgdHJhbnNhY3Rpb24gaXMgcmVjZWl2ZWQsIG1heSBiZSBsb3dlcmVkIHRvIGhhc3RlbiBwYXlvdXRzIG9yIGluY3JlYXNlZCBpZiBwYXlvdXRzIGFyZSBmYXN0IGVub3VnaC4gRHVlIHRvIG5vIGZsb2F0IG9yIGRlY2ltYWxzLCBtdWx0aXBsaWVyIGlzIHgxMDAgZm9yIGEgZnJhY3Rpb25hbCBtdWx0aXBsaWVyIGUuZy4gMjUwIGlzIGFjdHVhbGx5IGEgMi41eCBtdWx0aXBsaWVyLiBDYXBwZWQgYXQgM3ggbWF4IGFuZCAxLjJ4IG1pbi4nOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjdXJyZW50RmVlUGVyY2VudGFnZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZmVlLCBzdHJpbmcgaW5mbykgewogICAgICAgIGZlZSA9IGZlZVBlcmNlbnQ7CiAgICAgICAgaW5mbyA9ICdTaG93biBpbiAlIGZvcm0uIEZlZSBpcyBoYWx2ZWQoNTAlKSBmb3IgYW1vdW50cyBlcXVhbCBvciBncmVhdGVyIHRoYW4gNTAgZXRoZXJzLiAoRmVlIG1heSBjaGFuZ2UsIGJ1dCBpcyBjYXBwZWQgdG8gYSBtYXhpbXVtIG9mIDEwJSknOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjdXJyZW50UHlyYW1pZEJhbGFuY2VBcHByb3hpbWF0ZWx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBweXJhbWlkQmFsYW5jZSwgc3RyaW5nIGluZm8pIHsKICAgICAgICBweXJhbWlkQmFsYW5jZSA9IGJhbGFuY2UgLyAxIGV0aGVyOwogICAgICAgIGluZm8gPSAnQWxsIGJhbGFuY2UgdmFsdWVzIGFyZSBtZWFzdXJlZCBpbiBFdGhlcnMsIG5vdGUgdGhhdCBkdWUgdG8gbm8gZGVjaW1hbCBwbGFjaW5nLCB0aGVzZSB2YWx1ZXMgc2hvdyB1cCBhcyBpbnRlZ2VycyBvbmx5LCB3aXRoaW4gdGhlIGNvbnRyYWN0IGl0c2VsZiB5b3Ugd2lsbCBnZXQgdGhlIGV4YWN0IGRlY2ltYWwgdmFsdWUgeW91IGFyZSBzdXBwb3NlZCB0byc7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG5leHRQYXlvdXRXaGVuUHlyYW1pZEJhbGFuY2VUb3RhbHNBcHByb3hpbWF0ZWx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlUGF5b3V0KSB7CiAgICAgICAgICAgIGJhbGFuY2VQYXlvdXQgPSBwYXJ0aWNpcGFudHNbcGF5b3V0T3JkZXJdLnBheW91dCAvIDEgZXRoZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGZlZXNTZXBlcmF0ZUZyb21CYWxhbmNlQXBwcm94aW1hdGVseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZmVlcykgewogICAgICAgIGZlZXMgPSBjb2xsZWN0ZWRGZWVzIC8gMSBldGhlcjsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdG90YWxQYXJ0aWNpcGFudHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50IGNvdW50KSB7CiAgICAgICAgY291bnQgPSBwYXJ0aWNpcGFudHMubGVuZ3RoOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBudW1iZXJPZlBhcnRpY2lwYW50c1dhaXRpbmdGb3JQYXlvdXQoKSBjb25zdGFudCByZXR1cm5zICh1aW50IGNvdW50KSB7CiAgICAgICAgY291bnQgPSBwYXJ0aWNpcGFudHMubGVuZ3RoIC0gcGF5b3V0T3JkZXI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHBhcnRpY2lwYW50RGV0YWlscyh1aW50IG9yZGVySW5QeXJhbWlkKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIEFkZHJlc3MsIHVpbnQgUGF5b3V0KQogICAgewogICAgICAgIGlmIChvcmRlckluUHlyYW1pZCA8PSBwYXJ0aWNpcGFudHMubGVuZ3RoKSB7CiAgICAgICAgICAgIEFkZHJlc3MgPSBwYXJ0aWNpcGFudHNbb3JkZXJJblB5cmFtaWRdLmV0aGVyQWRkcmVzczsKICAgICAgICAgICAgUGF5b3V0ID0gcGFydGljaXBhbnRzW29yZGVySW5QeXJhbWlkXS5wYXlvdXQgLyAxIGV0aGVyOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
