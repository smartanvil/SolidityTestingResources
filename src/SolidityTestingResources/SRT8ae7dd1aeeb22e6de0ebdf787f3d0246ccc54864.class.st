Class {
	#name : #SRT8ae7dd1aeeb22e6de0ebdf787f3d0246ccc54864,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8ae7dd1aeeb22e6de0ebdf787f3d0246ccc54864 >> base64 [
	^ ''.
	

]
