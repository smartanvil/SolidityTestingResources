Class {
	#name : #SRTd318914b05ad3c4be34e71e02d4fab8dbf66dc57,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd318914b05ad3c4be34e71e02d4fab8dbf66dc57 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBDb2xsZWN0aWJsZUV4cG9zdXJlIHsKICBmdW5jdGlvbiBnZXRDbG9zaW5nVGltZShieXRlczMyIGlkKSBjb25zdGFudCByZXR1cm5zICh1aW50NjQgdmFsdWUpOwogIGZ1bmN0aW9uIGNvbGxlY3QoYnl0ZXMzMiBpZCkgcmV0dXJucyAodWludDI1NiB2YWx1ZSk7CiAgZnVuY3Rpb24gY2xvc2UoYnl0ZXMzMiBpZCkgcGF5YWJsZTsKfQoKY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKY29udHJhY3QgVG9rZW5EZXN0cnVjdGlibGUgaXMgT3duYWJsZSB7CgogIGZ1bmN0aW9uIFRva2VuRGVzdHJ1Y3RpYmxlKCkgcGF5YWJsZSB7IH0KCiAgLyoqCiAgICogQG5vdGljZSBUZXJtaW5hdGUgY29udHJhY3QgYW5kIHJlZnVuZCB0byBvd25lcgogICAqIEBwYXJhbSB0b2tlbnMgTGlzdCBvZiBhZGRyZXNzZXMgb2YgRVJDMjAgb3IgRVJDMjBCYXNpYyB0b2tlbiBjb250cmFjdHMgdG8KICAgcmVmdW5kLgogICAqIEBub3RpY2UgVGhlIGNhbGxlZCB0b2tlbiBjb250cmFjdHMgY291bGQgdHJ5IHRvIHJlLWVudGVyIHRoaXMgY29udHJhY3QuIE9ubHkKICAgc3VwcGx5IHRva2VuIGNvbnRyYWN0cyB5b3UgdHJ1c3QuCiAgICovCiAgZnVuY3Rpb24gZGVzdHJveShhZGRyZXNzW10gdG9rZW5zKSBvbmx5T3duZXIgcHVibGljIHsKCiAgICAvLyBUcmFuc2ZlciB0b2tlbnMgdG8gb3duZXIKICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgIEVSQzIwQmFzaWMgdG9rZW4gPSBFUkMyMEJhc2ljKHRva2Vuc1tpXSk7CiAgICAgIHVpbnQyNTYgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgdG9rZW4udHJhbnNmZXIob3duZXIsIGJhbGFuY2UpOwogICAgfQoKICAgIC8vIFRyYW5zZmVyIEV0aCB0byBvd25lciBhbmQgdGVybWluYXRlIGNvbnRyYWN0CiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogIH0KfQoKY29udHJhY3QgVmVQb3J0Zm9saW8gaXMgVG9rZW5EZXN0cnVjdGlibGUgewoKICAgIC8vLS0tIERlZmluaXRpb25zCgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgc3RydWN0IEV4cG9zdXJlSW5mbyB7CiAgICAgICAgYnl0ZXMzMiBleHBvc3VyZUlkOwogICAgICAgIHVpbnQyNTYgdmFsdWU7CiAgICB9CgogICAgc3RydWN0IEJ1Y2tldCB7CiAgICAgICAgdWludDI1NiB2YWx1ZTsgLy8gRXRoZXIKICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgaG9sZGluZ3M7IC8vIFRva2VucwogICAgICAgIEV4cG9zdXJlSW5mb1tdIGV4cG9zdXJlczsKICAgICAgICBib29sIHRyYWRpbmc7CiAgICAgICAgdWludDY0IG1heENsb3NpbmdUaW1lOwogICAgfQoKICAgIC8vLS0tIFN0b3JhZ2UKCiAgICBDb2xsZWN0aWJsZUV4cG9zdXJlIGNvbGxlY3RpYmxlRXhwb3N1cmU7CiAgICBFREV4ZWN1dG9yIGV0aGVyRGVsdGFFeGVjdXRvcjsKCiAgICBhZGRyZXNzIHB1YmxpYyBidWNrZXRNYW5hZ2VyOwogICAgYWRkcmVzcyBwdWJsaWMgcG9ydGZvbGlvTWFuYWdlcjsKICAgIGFkZHJlc3MgcHVibGljIHRyYWRlcjsKCiAgICBtYXBwaW5nIChieXRlczMyID0+IEJ1Y2tldCkgcHJpdmF0ZSBidWNrZXRzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgbW9kZWw7CiAgICBhZGRyZXNzW10gcHVibGljIGFzc2V0czsKCgoKICAgIC8vLS0tIENvbnN0cnVjdG9yCgogICAgZnVuY3Rpb24gVmVQb3J0Zm9saW8oKSB7CiAgICAgICAgYnVja2V0TWFuYWdlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgcG9ydGZvbGlvTWFuYWdlciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdHJhZGVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLy0tLSBFdmVudHMKCiAgICBldmVudCBCdWNrZXRDcmVhdGVkKGJ5dGVzMzIgaWQsIHVpbnQyNTYgaW5pdGlhbFZhbHVlLCB1aW50NjQgY2xvc2luZ1RpbWUpOwogICAgZXZlbnQgQnVja2V0QnV5KGJ5dGVzMzIgaWQsIHVpbnQyNTYgZXRoZXJTcGVudCwgYWRkcmVzcyB0b2tlbiwgdWludDI1NiB0b2tlbnNCb3VnaHQpOwogICAgZXZlbnQgQnVja2V0U2VsbChieXRlczMyIGlkLCB1aW50MjU2IGV0aGVyQm91Z2h0LCBhZGRyZXNzIHRva2VuLCB1aW50MjU2IHRva2Vuc1NvbGQpOwogICAgZXZlbnQgQnVja2V0RGVzdHJveWVkKGJ5dGVzMzIgaWQsIHVpbnQyNTYgZmluYWxWYWx1ZSk7CgogICAgLy8tLS0gTW9kaWZpZXJzCgogICAgbW9kaWZpZXIgb25seUJ1Y2tldE1hbmFnZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGJ1Y2tldE1hbmFnZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVBvcnRmb2xpb01hbmFnZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHBvcnRmb2xpb01hbmFnZXIpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seVRyYWRlcigpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdHJhZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLS0tIEFjY2Vzc29ycwoKICAgIGZ1bmN0aW9uIHNldENvbGxlY3RpYmxlRXhwb3N1cmUoQ29sbGVjdGlibGVFeHBvc3VyZSBfY29sbGVjdGlibGVFeHBvc3VyZSkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9jb2xsZWN0aWJsZUV4cG9zdXJlICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBjb2xsZWN0aWJsZUV4cG9zdXJlID0gX2NvbGxlY3RpYmxlRXhwb3N1cmU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RXRoZXJEZWx0YUV4ZWN1dG9yKEVERXhlY3V0b3IgX2V0aGVyRGVsdGFFeGVjdXRvcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfZXRoZXJEZWx0YUV4ZWN1dG9yICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBldGhlckRlbHRhRXhlY3V0b3IgPSBfZXRoZXJEZWx0YUV4ZWN1dG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldEJ1Y2tldE1hbmFnZXIoYWRkcmVzcyBfYnVja2V0TWFuYWdlcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfYnVja2V0TWFuYWdlciAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgYnVja2V0TWFuYWdlciA9IF9idWNrZXRNYW5hZ2VyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFBvcnRmb2xpb01hbmFnZXIoYWRkcmVzcyBfcG9ydGZvbGlvTWFuYWdlcikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfcG9ydGZvbGlvTWFuYWdlciAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgcG9ydGZvbGlvTWFuYWdlciA9IF9wb3J0Zm9saW9NYW5hZ2VyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFRyYWRlcihhZGRyZXNzIF90cmFkZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX3RyYWRlciAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdHJhZGVyID0gX3RyYWRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBc3NldHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzc1tdKSB7CiAgICAgICAgcmV0dXJuIGFzc2V0czsKICAgIH0KCiAgICAvLy0tLSBQdWJsaWMgZnVuY3Rpb25zCgogICAgLyoqCiAgICAgKiBAZGV2IFNldHMgc3VwcG9ydGVkIGFzc2V0cwogICAgICogQHBhcmFtIF9hc3NldHMgQXJyYXkgb2YgYXNzZXQgYWRkcmVzc2VzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEFzc2V0cyhhZGRyZXNzW10gX2Fzc2V0cykgcHVibGljIG9ubHlQb3J0Zm9saW9NYW5hZ2VyIHsKICAgICAgICBjbGVhck1vZGVsKCk7CgogICAgICAgIGFzc2V0cy5sZW5ndGggPSBfYXNzZXRzLmxlbmd0aDsKICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IGFzc2V0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBhc3NldHNbaV0gPSBfYXNzZXRzW2ldOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVXBkYXRlcyB0aGUgbW9kZWwgcG9ydGZvbGlvCiAgICAgKiBAcGFyYW0gIF9hc3NldHMgICAgICAgQXJyYXkgb2YgYXNzZXQgYWRkcmVzc2VzCiAgICAgKiBAcGFyYW0gIF9hbGxvYyAgICAgICAgQXJyYXkgb2YgcGVyY2VudGFnZSB2YWx1ZXMgKHdlaSkKICAgICAqLwogICAgZnVuY3Rpb24gc2V0TW9kZWwoYWRkcmVzc1tdIF9hc3NldHMsIHVpbnQyNTZbXSBfYWxsb2MpIHB1YmxpYyBvbmx5UG9ydGZvbGlvTWFuYWdlciB7CiAgICAgICAgcmVxdWlyZShfYXNzZXRzLmxlbmd0aCA9PSBfYWxsb2MubGVuZ3RoKTsKCiAgICAgICAgdmFsaWRhdGVNb2RlbChfYXNzZXRzKTsKICAgICAgICBjbGVhck1vZGVsKCk7CgogICAgICAgIHVpbnQgdG90YWwgPSAwOwogICAgICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgX2Fzc2V0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB1aW50MjU2IGFsbG9jID0gX2FsbG9jW2ldOwogICAgICAgICAgICBhZGRyZXNzIGFzc2V0ID0gX2Fzc2V0c1tpXTsKCiAgICAgICAgICAgIHRvdGFsID0gdG90YWwuYWRkKGFsbG9jKTsKICAgICAgICAgICAgbW9kZWxbYXNzZXRdID0gYWxsb2M7CiAgICAgICAgfQoKICAgICAgICAvLyBhbGxvY2F0aW9uIHNob3VsZCBiZSBhdCBsZWFzdCA5OSUKICAgICAgICB1aW50MjU2IHdob2xlID0gMSBldGhlcjsKICAgICAgICByZXF1aXJlKHdob2xlLnN1Yih0b3RhbCkgPCAxMCBmaW5uZXkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1Y2tldChieXRlczMyW10gZXhwb3N1cmVJZHMpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seUJ1Y2tldE1hbmFnZXIKICAgICAgICByZXR1cm5zIChieXRlczMyKQogICAgewogICAgICAgIHJlcXVpcmUoY29sbGVjdGlibGVFeHBvc3VyZSAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKGV4cG9zdXJlSWRzLmxlbmd0aCA+IDApOwoKICAgICAgICBieXRlczMyIGJ1Y2tldElkID0gY2FsY3VsYXRlQnVja2V0SWQoZXhwb3N1cmVJZHMpOwogICAgICAgIEJ1Y2tldCBzdG9yYWdlIGJ1Y2tldCA9IGJ1Y2tldHNbYnVja2V0SWRdOwogICAgICAgIHJlcXVpcmUoYnVja2V0LmV4cG9zdXJlcy5sZW5ndGggPT0gMCk7IC8vIGVuc3VyZSBpdCBpcyBhIG5ldyBidWNrZXQKCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgZXhwb3N1cmVJZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYnl0ZXMzMiBleHBvc3VyZUlkID0gZXhwb3N1cmVJZHNbaV07CiAgICAgICAgICAgIHVpbnQ2NCBjbG9zdXJlVGltZSA9IGNvbGxlY3RpYmxlRXhwb3N1cmUuZ2V0Q2xvc2luZ1RpbWUoZXhwb3N1cmVJZCk7CiAgICAgICAgICAgIGlmIChidWNrZXQubWF4Q2xvc2luZ1RpbWUgPCBjbG9zdXJlVGltZSkgewogICAgICAgICAgICAgICAgYnVja2V0Lm1heENsb3NpbmdUaW1lID0gY2xvc3VyZVRpbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFBvc3NpYmxlIHJlZW50cnkgYXR0YWNrLiBDb2xsZWN0aWJsZSBpbnN0YW5jZSBtdXN0IGJlIHRydXN0ZWQuCiAgICAgICAgICAgIHVpbnQyNTYgdmFsdWUgPSBjb2xsZWN0aWJsZUV4cG9zdXJlLmNvbGxlY3QoZXhwb3N1cmVJZCk7CgogICAgICAgICAgICBidWNrZXQuZXhwb3N1cmVzLnB1c2goRXhwb3N1cmVJbmZvKHsKICAgICAgICAgICAgICAgIGV4cG9zdXJlSWQ6IGV4cG9zdXJlSWQsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgYnVja2V0LnZhbHVlICs9IHZhbHVlOwogICAgICAgIH0KCiAgICAgICAgQnVja2V0Q3JlYXRlZChidWNrZXRJZCwgYnVja2V0LnZhbHVlLCBidWNrZXQubWF4Q2xvc2luZ1RpbWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3Ryb3lCdWNrZXQoYnl0ZXMzMiBidWNrZXRJZCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5QnVja2V0TWFuYWdlcgogICAgewogICAgICAgIHJlcXVpcmUoY29sbGVjdGlibGVFeHBvc3VyZSAhPSBhZGRyZXNzKDApKTsKICAgICAgICBCdWNrZXQgc3RvcmFnZSBidWNrZXQgPSBidWNrZXRzW2J1Y2tldElkXTsKICAgICAgICByZXF1aXJlKGJ1Y2tldC5leHBvc3VyZXMubGVuZ3RoID4gMCk7IC8vIGVuc3VyZSBidWNrZXQgZXhpc3RzCiAgICAgICAgcmVxdWlyZShidWNrZXQudHJhZGluZyA9PSBmYWxzZSk7CiAgICAgICAgdWludDI1NiBmaW5hbFZhbHVlOwoKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBidWNrZXQuZXhwb3N1cmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIEV4cG9zdXJlSW5mbyBzdG9yYWdlIGV4cG9zdXJlID0gYnVja2V0LmV4cG9zdXJlc1tpXTsKICAgICAgICAgICAgZmluYWxWYWx1ZSArPSBleHBvc3VyZS52YWx1ZTsKCiAgICAgICAgICAgIC8vIFBvc3NpYmxlIHJlZW50cnkgYXR0YWNrLiBDb2xsZWN0aWJsZSBpbnN0YW5jZSBtdXN0IGJlIHRydXN0ZWQuCiAgICAgICAgICAgIGNvbGxlY3RpYmxlRXhwb3N1cmUuY2xvc2UudmFsdWUoZXhwb3N1cmUudmFsdWUpKGV4cG9zdXJlLmV4cG9zdXJlSWQpOwogICAgICAgIH0KCiAgICAgICAgQnVja2V0RGVzdHJveWVkKGJ1Y2tldElkLCBmaW5hbFZhbHVlKTsKCiAgICAgICAgZGVsZXRlIGJ1Y2tldHNbYnVja2V0SWRdOwogICAgfQoKICAgIGZ1bmN0aW9uIGV4ZWN1dGVFdGhlckRlbHRhQnV5KAogICAgICAgIHVpbnQyNTYgb3JkZXJFdGhBbW91bnQsCiAgICAgICAgYWRkcmVzcyBvcmRlclRva2VuLAogICAgICAgIHVpbnQyNTYgb3JkZXJUb2tlbkFtb3VudCwKICAgICAgICB1aW50MjU2IG9yZGVyRXhwaXJlcywKICAgICAgICB1aW50MjU2IG9yZGVyTm9uY2UsCiAgICAgICAgYWRkcmVzcyBvcmRlclVzZXIsCiAgICAgICAgdWludDggdiwKICAgICAgICBieXRlczMyIHIsCiAgICAgICAgYnl0ZXMzMiBzLAogICAgICAgIGJ5dGVzMzIgYnVja2V0SWQsCiAgICAgICAgdWludDI1NiBhbW91bnQKICAgICkgb25seVRyYWRlciB7CiAgICAgICAgLy9CdWNrZXQgc3RvcmFnZSBidWNrZXQgPSBidWNrZXRzW2J1Y2tldElkXTsKICAgICAgICByZXF1aXJlKGJ1Y2tldHNbYnVja2V0SWRdLnZhbHVlID49IGFtb3VudCk7CiAgICAgICAgcmVxdWlyZShpc0luUG9ydGZvbGlvTW9kZWwob3JkZXJUb2tlbikpOwoKICAgICAgICB1aW50MjU2IHRyYWRlZEFtb3VudDsKICAgICAgICB1aW50MjU2IGxlZnRvdmVyRXRoZXI7CgogICAgICAgIC8vIFRydXN0cyB0aGF0IGV0aGVyRGVsdGFFeGVjdXRvciB0cmFuc2ZlcnMgYWxsIGxlZnRvdmVyIGV0aGVyCiAgICAgICAgLy8gdG9rZW5zIHRvIHRoZSBzZW5kZXIKICAgICAgICAodHJhZGVkQW1vdW50LCBsZWZ0b3ZlckV0aGVyKSA9CiAgICAgICAgICAgIGV0aGVyRGVsdGFFeGVjdXRvci5idXlUb2tlbnMudmFsdWUoYW1vdW50KSgKICAgICAgICAgICAgICAgIG9yZGVyRXRoQW1vdW50LAogICAgICAgICAgICAgICAgb3JkZXJUb2tlbiwKICAgICAgICAgICAgICAgIG9yZGVyVG9rZW5BbW91bnQsCiAgICAgICAgICAgICAgICBvcmRlckV4cGlyZXMsCiAgICAgICAgICAgICAgICBvcmRlck5vbmNlLAogICAgICAgICAgICAgICAgb3JkZXJVc2VyLAogICAgICAgICAgICAgICAgdiwgciwgcwogICAgICAgICAgICApOwoKICAgICAgICBidWNrZXRzW2J1Y2tldElkXS52YWx1ZSAtPSAoYW1vdW50IC0gbGVmdG92ZXJFdGhlcik7CiAgICAgICAgYnVja2V0c1tidWNrZXRJZF0uaG9sZGluZ3Nbb3JkZXJUb2tlbl0gKz0gdHJhZGVkQW1vdW50OwoKICAgICAgICBCdWNrZXRCdXkoYnVja2V0SWQsIChhbW91bnQgLSBsZWZ0b3ZlckV0aGVyKSwgb3JkZXJUb2tlbiwgdHJhZGVkQW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiBleGVjdXRlRXRoZXJEZWx0YVNlbGwoCiAgICAgICAgdWludDI1NiBvcmRlckV0aEFtb3VudCwKICAgICAgICBhZGRyZXNzIG9yZGVyVG9rZW4sCiAgICAgICAgdWludDI1NiBvcmRlclRva2VuQW1vdW50LAogICAgICAgIHVpbnQyNTYgb3JkZXJFeHBpcmVzLAogICAgICAgIHVpbnQyNTYgb3JkZXJOb25jZSwKICAgICAgICBhZGRyZXNzIG9yZGVyVXNlciwKICAgICAgICB1aW50OCB2LAogICAgICAgIGJ5dGVzMzIgciwKICAgICAgICBieXRlczMyIHMsCiAgICAgICAgYnl0ZXMzMiBidWNrZXRJZCwKICAgICAgICB1aW50MjU2IGFtb3VudAogICAgKSBvbmx5VHJhZGVyIHsKICAgICAgICByZXF1aXJlKGJ1Y2tldHNbYnVja2V0SWRdLmhvbGRpbmdzW29yZGVyVG9rZW5dID49IGFtb3VudCk7CiAgICAgICAgdWludDI1NiB0cmFkZWRWYWx1ZTsKICAgICAgICB1aW50MjU2IGxlZnRvdmVyVG9rZW5zOwoKICAgICAgICBFUkMyMChvcmRlclRva2VuKS50cmFuc2ZlcihldGhlckRlbHRhRXhlY3V0b3IsIGFtb3VudCk7CgogICAgICAgIC8vIFRydXN0cyB0aGF0IGV0aGVyRGVsdGFFeGVjdXRvciB0cmFuc2ZlcnMgYWxsIGxlZnRvdmVyIGV0aGVyCiAgICAgICAgLy8gdG9rZW5zIHRvIHRoZSBzZW5kZXIKICAgICAgICAodHJhZGVkVmFsdWUsIGxlZnRvdmVyVG9rZW5zKSA9CiAgICAgICAgICAgIGV0aGVyRGVsdGFFeGVjdXRvci5zZWxsVG9rZW5zKAogICAgICAgICAgICAgICAgb3JkZXJFdGhBbW91bnQsCiAgICAgICAgICAgICAgICBvcmRlclRva2VuLAogICAgICAgICAgICAgICAgb3JkZXJUb2tlbkFtb3VudCwKICAgICAgICAgICAgICAgIG9yZGVyRXhwaXJlcywKICAgICAgICAgICAgICAgIG9yZGVyTm9uY2UsCiAgICAgICAgICAgICAgICBvcmRlclVzZXIsCiAgICAgICAgICAgICAgICB2LCByLCBzCiAgICAgICAgICAgICAgICApOwoKICAgICAgICBidWNrZXRzW2J1Y2tldElkXS52YWx1ZSArPSB0cmFkZWRWYWx1ZTsKICAgICAgICBidWNrZXRzW2J1Y2tldElkXS5ob2xkaW5nc1tvcmRlclRva2VuXSAtPSAoYW1vdW50IC0gbGVmdG92ZXJUb2tlbnMpOwoKICAgICAgICBCdWNrZXRTZWxsKGJ1Y2tldElkLCB0cmFkZWRWYWx1ZSwgb3JkZXJUb2tlbiwgKGFtb3VudCAtIGxlZnRvdmVyVG9rZW5zKSk7CiAgICB9CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICAvLyBBY2NlcHQgRXRoZXIgZGVwb3NpdHMKICAgIH0KCiAgICAvLy0tLSBQdWJsaWMgY29uc3RhbnQgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gYnVja2V0RXhpc3RzKGJ5dGVzMzIgYnVja2V0SWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGJ1Y2tldHNbYnVja2V0SWRdLmV4cG9zdXJlcy5sZW5ndGggPiAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUJ1Y2tldElkKGJ5dGVzMzJbXSBleHBvc3VyZXMpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zIChieXRlczMyKQogICAgewogICAgICAgIHJldHVybiBzaGEyNTYodGhpcywgZXhwb3N1cmVzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidWNrZXRIb2xkaW5nKGJ5dGVzMzIgX2J1Y2tldElkLCBhZGRyZXNzIF9hc3NldCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIEJ1Y2tldCBzdG9yYWdlIGJ1Y2tldCA9IGJ1Y2tldHNbX2J1Y2tldElkXTsKICAgICAgICByZXR1cm4gYnVja2V0LmhvbGRpbmdzW19hc3NldF07CiAgICB9CgogICAgZnVuY3Rpb24gYnVja2V0VmFsdWUoYnl0ZXMzMiBfYnVja2V0SWQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBCdWNrZXQgc3RvcmFnZSBidWNrZXQgPSBidWNrZXRzW19idWNrZXRJZF07CiAgICAgICAgcmV0dXJuIGJ1Y2tldC52YWx1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBudW1Bc3NldHMoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhc3NldHMubGVuZ3RoOwogICAgfQoKICAgIC8vLS0tIFByaXZhdGUgbXV0YWJsZSBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBjbGVhck1vZGVsKCkgcHJpdmF0ZSB7CiAgICAgICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBhc3NldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZGVsZXRlIG1vZGVsW2Fzc2V0c1tpXV07CiAgICAgICAgfQogICAgfQoKICAgIC8vLS0tIFByaXZhdGUgY29uc3RhbnQgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gdmFsaWRhdGVNb2RlbChhZGRyZXNzW10gX2Fzc2V0cykgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUoYXNzZXRzLmxlbmd0aCA9PSBfYXNzZXRzLmxlbmd0aCk7CgogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGFzc2V0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXF1aXJlKF9hc3NldHNbaV0gPT0gYXNzZXRzW2ldKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYnVja2V0Q2xvc3VyZVRpbWUoYnl0ZXMzMiBidWNrZXRJZCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgcmV0dXJuIGJ1Y2tldHNbYnVja2V0SWRdLm1heENsb3NpbmdUaW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzSW5Qb3J0Zm9saW9Nb2RlbChhZGRyZXNzIHRva2VuKSBjb25zdGFudCBwcml2YXRlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gbW9kZWxbdG9rZW5dICE9IDA7CiAgICB9Cn0KCmNvbnRyYWN0IFZlRXhwb3N1cmUgaXMgVG9rZW5EZXN0cnVjdGlibGUgewoKICAgIC8vLS0tIERlZmluaXRpb25zCgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZW51bSBTdGF0ZSB7IE5vbmUsIE9wZW4sIENvbGxlY3RlZCwgQ2xvc2luZywgQ2xvc2VkIH0KCiAgICBzdHJ1Y3QgRXhwb3N1cmUgewogICAgICAgIGFkZHJlc3MgYWNjb3VudDsKICAgICAgICB1aW50MjU2IHZlcmlBbW91bnQ7CiAgICAgICAgdWludDI1NiBpbml0aWFsVmFsdWU7CiAgICAgICAgdWludDI1NiBmaW5hbFZhbHVlOwogICAgICAgIHVpbnQ2NCBjcmVhdGlvblRpbWU7CiAgICAgICAgdWludDY0IGNsb3NpbmdUaW1lOwogICAgICAgIFN0YXRlIHN0YXRlOwogICAgfQoKICAgIC8vLS0tIFN0b3JhZ2UKCiAgICBFUkMyMCBwdWJsaWMgdmVUb2tlbjsKICAgIGFkZHJlc3MgcHVibGljIHBvcnRmb2xpbzsKCiAgICB1aW50MjU2IHB1YmxpYyByYXRpbzsKICAgIHVpbnQzMiBwdWJsaWMgbWluRHVyYXRpb247CiAgICB1aW50MzIgcHVibGljIG1heER1cmF0aW9uOwogICAgdWludDI1NiBwdWJsaWMgbWluVmVyaUFtb3VudDsKICAgIHVpbnQyNTYgcHVibGljIG1heFZlcmlBbW91bnQ7CgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBFeHBvc3VyZSkgZXhwb3N1cmVzOwogICAgLy8tLS0gQ29uc3RydWN0b3IKCiAgICBmdW5jdGlvbiBWZUV4cG9zdXJlKAogICAgICAgIEVSQzIwIF92ZVRva2VuLAogICAgICAgIHVpbnQyNTYgX3JhdGlvLAogICAgICAgIHVpbnQzMiBfbWluRHVyYXRpb24sCiAgICAgICAgdWludDMyIF9tYXhEdXJhdGlvbiwKICAgICAgICB1aW50MjU2IF9taW5WZXJpQW1vdW50LAogICAgICAgIHVpbnQyNTYgX21heFZlcmlBbW91bnQKICAgICkgewogICAgICAgIHJlcXVpcmUoX3ZlVG9rZW4gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfbWluRHVyYXRpb24gPiAwICYmIF9taW5EdXJhdGlvbiA8PSBfbWF4RHVyYXRpb24pOwogICAgICAgIHJlcXVpcmUoX21pblZlcmlBbW91bnQgPiAwICYmIF9taW5WZXJpQW1vdW50IDw9IF9tYXhWZXJpQW1vdW50KTsKCiAgICAgICAgdmVUb2tlbiA9IF92ZVRva2VuOwogICAgICAgIHJhdGlvID0gX3JhdGlvOwogICAgICAgIG1pbkR1cmF0aW9uID0gX21pbkR1cmF0aW9uOwogICAgICAgIG1heER1cmF0aW9uID0gX21heER1cmF0aW9uOwogICAgICAgIG1pblZlcmlBbW91bnQgPSBfbWluVmVyaUFtb3VudDsKICAgICAgICBtYXhWZXJpQW1vdW50ID0gX21heFZlcmlBbW91bnQ7CiAgICB9CgogICAgLy8tLS0gTW9kaWZpZXJzCiAgICBtb2RpZmllciBvbmx5UG9ydGZvbGlvIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gcG9ydGZvbGlvKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLS0tIEFjY2Vzc29ycwoKICAgIGZ1bmN0aW9uIHNldFBvcnRmb2xpbyhhZGRyZXNzIF9wb3J0Zm9saW8pIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUoX3BvcnRmb2xpbyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgcG9ydGZvbGlvID0gX3BvcnRmb2xpbzsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNaW5EdXJhdGlvbih1aW50MzIgX21pbkR1cmF0aW9uKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKF9taW5EdXJhdGlvbiA+IDAgJiYgX21pbkR1cmF0aW9uIDw9IG1heER1cmF0aW9uKTsKCiAgICAgICAgbWluRHVyYXRpb24gPSBfbWluRHVyYXRpb247CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWF4RHVyYXRpb24odWludDMyIF9tYXhEdXJhdGlvbikgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfbWF4RHVyYXRpb24gPj0gbWluRHVyYXRpb24pOwoKICAgICAgICBtYXhEdXJhdGlvbiA9IF9tYXhEdXJhdGlvbjsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNaW5WZXJpQW1vdW50KHVpbnQzMiBfbWluVmVyaUFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfbWluVmVyaUFtb3VudCA+IDAgJiYgX21pblZlcmlBbW91bnQgPD0gbWF4VmVyaUFtb3VudCk7CgogICAgICAgIG1pblZlcmlBbW91bnQgPSBfbWluVmVyaUFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNYXhWZXJpQW1vdW50KHVpbnQzMiBfbWF4VmVyaUFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfbWF4VmVyaUFtb3VudCA+PSBtaW5WZXJpQW1vdW50KTsKCiAgICAgICAgbWF4VmVyaUFtb3VudCA9IF9tYXhWZXJpQW1vdW50OwogICAgfQoKICAgIC8vLS0tIEV2ZW50cwoKICAgIGV2ZW50IEV4cG9zdXJlT3BlbmVkKAogICAgICAgIGJ5dGVzMzIgaW5kZXhlZCBpZCwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgYWNjb3VudCwKICAgICAgICB1aW50MjU2IHZlcmlBbW91bnQsCiAgICAgICAgdWludDI1NiB2YWx1ZSwKICAgICAgICB1aW50NjQgY3JlYXRpb25UaW1lLAogICAgICAgIHVpbnQ2NCBjbG9zaW5nVGltZQogICAgKTsKCiAgICBldmVudCBFeHBvc3VyZUNvbGxlY3RlZCgKICAgICAgICBieXRlczMyIGluZGV4ZWQgaWQsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGFjY291bnQsCiAgICAgICAgdWludDI1NiB2YWx1ZQogICAgKTsKCiAgICBldmVudCBFeHBvc3VyZUNsb3NlZCgKICAgICAgICBieXRlczMyIGluZGV4ZWQgaWQsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGFjY291bnQsCiAgICAgICAgdWludDI1NiBpbml0aWFsVmFsdWUsCiAgICAgICAgdWludDI1NiBmaW5hbFZhbHVlCiAgICApOwoKICAgIGV2ZW50IEV4cG9zdXJlU2V0dGxlZCgKICAgICAgICBieXRlczMyIGluZGV4ZWQgaWQsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIGFjY291bnQsCiAgICAgICAgdWludDI1NiB2YWx1ZQogICAgKTsKCiAgICAvLy0tLSBQdWJsaWMgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gb3Blbih1aW50MjU2IHZlcmlBbW91bnQsIHVpbnQzMiBkdXJhdGlvbiwgdWludDI1NiBub25jZSkgcHVibGljIHBheWFibGUgewogICAgICAgIHJlcXVpcmUodmVyaUFtb3VudCA+PSBtaW5WZXJpQW1vdW50ICYmIHZlcmlBbW91bnQgPD0gbWF4VmVyaUFtb3VudCk7CiAgICAgICAgcmVxdWlyZShkdXJhdGlvbiA+PSBtaW5EdXJhdGlvbiAmJiBkdXJhdGlvbiA8PSBtYXhEdXJhdGlvbik7CiAgICAgICAgcmVxdWlyZShjaGVja1JhdGlvKHZlcmlBbW91bnQsIG1zZy52YWx1ZSkpOwoKICAgICAgICBieXRlczMyIGlkID0gY2FsY3VsYXRlSWQoewogICAgICAgICAgICB2ZXJpQW1vdW50OiB2ZXJpQW1vdW50LAogICAgICAgICAgICB2YWx1ZTogbXNnLnZhbHVlLAogICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sCiAgICAgICAgICAgIG5vbmNlOiBub25jZQogICAgICAgIH0pOwogICAgICAgIHJlcXVpcmUoIWV4aXN0cyhpZCkpOwoKICAgICAgICBvcGVuRXhwb3N1cmUoaWQsIHZlcmlBbW91bnQsIGR1cmF0aW9uKTsKICAgICAgICBmb3J3YXJkVG9rZW5zKHZlcmlBbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENsb3NpbmdUaW1lKGJ5dGVzMzIgaWQpIHB1YmxpYyBvbmx5UG9ydGZvbGlvIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgICAgIEV4cG9zdXJlIHN0b3JhZ2UgZXhwb3N1cmUgPSBleHBvc3VyZXNbaWRdOwogICAgICAgIHJldHVybiBleHBvc3VyZS5jbG9zaW5nVGltZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb2xsZWN0KGJ5dGVzMzIgaWQpIHB1YmxpYyBvbmx5UG9ydGZvbGlvIHJldHVybnMgKHVpbnQyNTYgdmFsdWUpIHsKICAgICAgICBFeHBvc3VyZSBzdG9yYWdlIGV4cG9zdXJlID0gZXhwb3N1cmVzW2lkXTsKICAgICAgICByZXF1aXJlKGV4cG9zdXJlLnN0YXRlID09IFN0YXRlLk9wZW4pOwoKICAgICAgICB2YWx1ZSA9IGV4cG9zdXJlLmluaXRpYWxWYWx1ZTsKCiAgICAgICAgZXhwb3N1cmUuc3RhdGUgPSBTdGF0ZS5Db2xsZWN0ZWQ7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih2YWx1ZSk7CgogICAgICAgIEV4cG9zdXJlQ29sbGVjdGVkKHsKICAgICAgICAgICAgaWQ6IGlkLAogICAgICAgICAgICBhY2NvdW50OiBleHBvc3VyZS5hY2NvdW50LAogICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZShieXRlczMyIGlkKSBwdWJsaWMgcGF5YWJsZSBvbmx5UG9ydGZvbGlvIHsKICAgICAgICBFeHBvc3VyZSBzdG9yYWdlIGV4cG9zdXJlID0gZXhwb3N1cmVzW2lkXTsKICAgICAgICByZXF1aXJlKGV4cG9zdXJlLnN0YXRlID09IFN0YXRlLkNvbGxlY3RlZCk7CiAgICAgICAgcmVxdWlyZShoYXNQYXNzZWQoZXhwb3N1cmUuY2xvc2luZ1RpbWUpKTsKCiAgICAgICAgZXhwb3N1cmUuc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7CiAgICAgICAgZXhwb3N1cmUuZmluYWxWYWx1ZSA9IG1zZy52YWx1ZTsKCiAgICAgICAgRXhwb3N1cmVDbG9zZWQoewogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGFjY291bnQ6IGV4cG9zdXJlLmFjY291bnQsCiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogZXhwb3N1cmUuaW5pdGlhbFZhbHVlLAogICAgICAgICAgICBmaW5hbFZhbHVlOiBleHBvc3VyZS5maW5hbFZhbHVlCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0dGxlKGJ5dGVzMzIgaWQpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGZpbmFsVmFsdWUpIHsKICAgICAgICBFeHBvc3VyZSBzdG9yYWdlIGV4cG9zdXJlID0gZXhwb3N1cmVzW2lkXTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gZXhwb3N1cmUuYWNjb3VudCk7CiAgICAgICAgcmVxdWlyZShleHBvc3VyZS5zdGF0ZSA9PSBTdGF0ZS5DbG9zZWQpOwoKICAgICAgICBmaW5hbFZhbHVlID0gZXhwb3N1cmUuZmluYWxWYWx1ZTsKICAgICAgICBkZWxldGUgZXhwb3N1cmVzW2lkXTsKCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihmaW5hbFZhbHVlKTsKCiAgICAgICAgRXhwb3N1cmVTZXR0bGVkKHsKICAgICAgICAgICAgaWQ6IGlkLAogICAgICAgICAgICBhY2NvdW50OiBtc2cuc2VuZGVyLAogICAgICAgICAgICB2YWx1ZTogZmluYWxWYWx1ZQogICAgICAgIH0pOwogICAgfQoKICAgIC8vLS0tIFB1YmxpYyBjb25zdGFudCBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBzdGF0dXMoYnl0ZXMzMiBpZCkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQ4IHN0YXRlKQogICAgewogICAgICAgIEV4cG9zdXJlIHN0b3JhZ2UgZXhwb3N1cmUgPSBleHBvc3VyZXNbaWRdOwogICAgICAgIHN0YXRlID0gdWludDgoZXhwb3N1cmUuc3RhdGUpOwoKICAgICAgICBpZiAoZXhwb3N1cmUuc3RhdGUgPT0gU3RhdGUuQ29sbGVjdGVkICYmIGhhc1Bhc3NlZChleHBvc3VyZS5jbG9zaW5nVGltZSkpIHsKICAgICAgICAgICAgc3RhdGUgPSB1aW50OChTdGF0ZS5DbG9zaW5nKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZXhpc3RzKGJ5dGVzMzIgaWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGV4cG9zdXJlc1tpZF0uY3JlYXRpb25UaW1lID4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja1JhdGlvKHVpbnQyNTYgdmVyaUFtb3VudCwgdWludDI1NiB2YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgdWludDI1NiBleHBlY3RlZFZhbHVlID0gcmF0aW8ubXVsKHZlcmlBbW91bnQpLmRpdigxIGV0aGVyKTsKICAgICAgICByZXR1cm4gdmFsdWUgPT0gZXhwZWN0ZWRWYWx1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVJZCgKICAgICAgICB1aW50MjU2IHZlcmlBbW91bnQsCiAgICAgICAgdWludDI1NiB2YWx1ZSwKICAgICAgICB1aW50MzIgZHVyYXRpb24sCiAgICAgICAgdWludDI1NiBub25jZQogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYnl0ZXMzMikKICAgIHsKICAgICAgICByZXR1cm4gc2hhMjU2KAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgdmVyaUFtb3VudCwKICAgICAgICAgICAgZHVyYXRpb24sCiAgICAgICAgICAgIG5vbmNlCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy0tLSBGYWxsYmFjayBmdW5jdGlvbgoKICAgIGZ1bmN0aW9uKCkgcHVibGljIHBheWFibGUgewogICAgICAgIC8vIGFjY2VwdCBFdGhlciBkZXBvc2l0cwogICAgfQoKICAgIC8vLS0tIFByaXZhdGUgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gZm9yd2FyZFRva2Vucyh1aW50MjU2IHZlcmlBbW91bnQpIHByaXZhdGUgewogICAgICAgIHJlcXVpcmUodmVUb2tlbi50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgdmVyaUFtb3VudCkpOwogICAgICAgIHJlcXVpcmUodmVUb2tlbi5hcHByb3ZlKHBvcnRmb2xpbywgdmVyaUFtb3VudCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9wZW5FeHBvc3VyZShieXRlczMyIGlkLCB1aW50MjU2IHZlcmlBbW91bnQsIHVpbnQzMiBkdXJhdGlvbikgcHJpdmF0ZSBjb25zdGFudCB7CiAgICAgICAgdWludDY0IGNyZWF0aW9uVGltZSA9IHVpbnQ2NChibG9jay50aW1lc3RhbXApOwogICAgICAgIHVpbnQ2NCBjbG9zaW5nVGltZSA9IHVpbnQ2NChibG9jay50aW1lc3RhbXAuYWRkKGR1cmF0aW9uKSk7CgogICAgICAgIGV4cG9zdXJlc1tpZF0gPSBFeHBvc3VyZSh7CiAgICAgICAgICAgIGFjY291bnQ6IG1zZy5zZW5kZXIsCiAgICAgICAgICAgIHZlcmlBbW91bnQ6IHZlcmlBbW91bnQsCiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogbXNnLnZhbHVlLAogICAgICAgICAgICBmaW5hbFZhbHVlOiAwLAogICAgICAgICAgICBjcmVhdGlvblRpbWU6IGNyZWF0aW9uVGltZSwKICAgICAgICAgICAgY2xvc2luZ1RpbWU6IGNsb3NpbmdUaW1lLAogICAgICAgICAgICBzdGF0ZTogU3RhdGUuT3BlbgogICAgICAgIH0pOwoKICAgICAgICBFeHBvc3VyZU9wZW5lZCh7CiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgYWNjb3VudDogbXNnLnNlbmRlciwKICAgICAgICAgICAgY3JlYXRpb25UaW1lOiBjcmVhdGlvblRpbWUsCiAgICAgICAgICAgIGNsb3NpbmdUaW1lOiBjbG9zaW5nVGltZSwKICAgICAgICAgICAgdmVyaUFtb3VudDogdmVyaUFtb3VudCwKICAgICAgICAgICAgdmFsdWU6IG1zZy52YWx1ZQogICAgICAgIH0pOwogICAgfQoKICAgIC8vLS0tIFByaXZhdGUgY29uc3RhbnQgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gaGFzUGFzc2VkKHVpbnQ2NCB0aW1lKQogICAgICAgIHByaXZhdGUKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIGJsb2NrLnRpbWVzdGFtcCA+PSB0aW1lOwogICAgfQp9Cgpjb250cmFjdCBFREV4ZWN1dG9yIHsKICAgIGZ1bmN0aW9uIGJ1eVRva2VucygKICAgICAgICB1aW50MjU2IG9yZGVyRXRoQW1vdW50LAogICAgICAgIGFkZHJlc3Mgb3JkZXJUb2tlbiwKICAgICAgICB1aW50MjU2IG9yZGVyVG9rZW5BbW91bnQsCiAgICAgICAgdWludDI1NiBvcmRlckV4cGlyZXMsCiAgICAgICAgdWludDI1NiBvcmRlck5vbmNlLAogICAgICAgIGFkZHJlc3Mgb3JkZXJVc2VyLAogICAgICAgIHVpbnQ4IHYsCiAgICAgICAgYnl0ZXMzMiByLAogICAgICAgIGJ5dGVzMzIgcwogICAgKSBwYXlhYmxlIHJldHVybnMgKHVpbnQyNTYgdHJhZGVkQW1vdW50LCB1aW50MjU2IGxlZnRvdmVyRXRoZXIpOwoKICAgIGZ1bmN0aW9uIHNlbGxUb2tlbnMoCiAgICAgICAgLy8gRUQgT3JkZXIgaWRlbnRpZmljYXRpb24KICAgICAgICB1aW50MjU2IG9yZGVyRXRoQW1vdW50LAogICAgICAgIGFkZHJlc3Mgb3JkZXJUb2tlbiwKICAgICAgICB1aW50MjU2IG9yZGVyVG9rZW5BbW91bnQsCiAgICAgICAgdWludDI1NiBvcmRlckV4cGlyZXMsCiAgICAgICAgdWludDI1NiBvcmRlck5vbmNlLAogICAgICAgIGFkZHJlc3Mgb3JkZXJVc2VyLAogICAgICAgIHVpbnQ4IHYsCiAgICAgICAgYnl0ZXMzMiByLAogICAgICAgIGJ5dGVzMzIgcwogICAgKSByZXR1cm5zICh1aW50MjU2IHRyYWRlZFZhbHVlLCB1aW50MjU2IGxlZnRvdmVyVG9rZW5zKTsKfQ=='.
	

]
