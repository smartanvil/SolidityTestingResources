Class {
	#name : #SRT336E296A9F021E459D20D2C249990eBC4f6B4a56,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT336E296A9F021E459D20D2C249990eBC4f6B4a56 >> base64 [
	^ ''.
	

]
