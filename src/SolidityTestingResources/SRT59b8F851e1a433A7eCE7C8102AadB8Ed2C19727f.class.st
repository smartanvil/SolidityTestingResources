Class {
	#name : #SRT59b8F851e1a433A7eCE7C8102AadB8Ed2C19727f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT59b8F851e1a433A7eCE7C8102AadB8Ed2C19727f >> base64 [
	^ ''.
	

]
