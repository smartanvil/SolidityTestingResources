Class {
	#name : #SRT14c7a2ce7482c3c66897dcae3eed5d62985f5e86,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT14c7a2ce7482c3c66897dcae3eed5d62985f5e86 >> base64 [
	^ ''.
	

]
