Class {
	#name : #SRT06ddef90c123b166769c2b4dfdfdf7854a72b036,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT06ddef90c123b166769c2b4dfdfdf7854a72b036 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogIFNldCBvZiBjbGFzc2VzIE9wZW5aZXBwZWxpbgoqLwoKLyoKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCmJlbG93IGlzICdPcGVuWmVwcGVsaW4gIC0gT3duYWJsZS5zb2wnCgoqLwoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgoKCgoKLyoKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKYmVsb3cgaXMgJ09wZW5aZXBwZWxpbiAgLSBFUkMyMEJhc2ljLnNvbCcKCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgpiZWxvdyBpcyAnT3BlblplcHBlbGluICAtIEJhc2ljVG9rZW4uc29sJwoKKi8KLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNGcm96ZW5Ub2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIAogICAgLyoqCiAgICogQGRldiBtYXBwaW5nIHNlbmRlciAtPiB1bmZyb3plVGltZXN0YW1wCiAgICogd2hlbiBzZW5kZXIgaXMgdW5mcm96ZW4KICAgKi8KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgdW5mcm96ZVRpbWVzdGFtcDsKCiAgICAvLyBDdXN0b20gY29kZSAtIGNoZWNraW5nIGZvciBvbiBmcm96ZW4KICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHNlbmRpbmcgaXMgYWxsb3dlZCAobm90IGZyb3plbikKICBmdW5jdGlvbiBpc1VuZnJvemVuKGFkZHJlc3Mgc2VuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgLy8gZnJvemVuZXNzIGlzIGNoZWNrZWQgdW50aWwgIDA3LjA3LjE4IDAwOjAwOjAwICgxNTMwOTIxNjAwKSwgYWZ0ZXIgYWxsIHRva2VucyBhcmUgbWludGVkIGFzIHVuZnJvemVuCiAgICBpZihub3cgPiAxNTMwOTIxNjAwKQogICAgICByZXR1cm4gdHJ1ZTsKICAgIGVsc2UKICAgICByZXR1cm4gdW5mcm96ZVRpbWVzdGFtcFtzZW5kZXJdIDwgbm93OwogIH0KCgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGZyb3plblRpbWVPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIHVuZnJvemVUaW1lc3RhbXBbX293bmVyXTsKICB9CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgCiAgICAvLyBDdXN0b20gY29kZSAtIGNoZWNraW5nIGZvciBmcm96ZW4gc3RhdGUKICAgIHJlcXVpcmUoaXNVbmZyb3plbihtc2cuc2VuZGVyKSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKCgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCgovKgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgpiZWxvdyBpcyAnT3BlblplcHBlbGluICAtIEVSQzIwLnNvbCcKCiovCgoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgoKCi8qCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgpiZWxvdyBpcyAnT3BlblplcHBlbGluICAtIFN0YW5kYXJkVG9rZW4uc29sJwoKKi8KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljRnJvemVuVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKICAgIAogICAgLy8gQ3VzdG9tIGNvZGUgLSDQv9GA0L7QstC10YDQutCwINC90LAg0YTQsNC60YIg0YDQsNC30LzQvtGA0L7Qt9C60LgKICAgIHJlcXVpcmUoaXNVbmZyb3plbihfZnJvbSkpOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqCiAgICogQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogICAqIGFuZCB0aGUgbmV3IGFsbG93YW5jZSBieSB1bmZvcnR1bmF0ZSB0cmFuc2FjdGlvbiBvcmRlcmluZy4gT25lIHBvc3NpYmxlIHNvbHV0aW9uIHRvIG1pdGlnYXRlIHRoaXMKICAgKiByYWNlIGNvbmRpdGlvbiBpcyB0byBmaXJzdCByZWR1Y2UgdGhlIHNwZW5kZXIncyBhbGxvd2FuY2UgdG8gMCBhbmQgc2V0IHRoZSBkZXNpcmVkIHZhbHVlIGFmdGVyd2FyZHM6CiAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGF0IGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludDI1NiBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2YgdG9rZW5zIHN0aWxsIGF2YWlsYWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLyoqCiAgICogYXBwcm92ZSBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYWxsb3dlZFtfc3BlbmRlcl0gPT0gMC4gVG8gaW5jcmVtZW50CiAgICogYWxsb3dlZCB2YWx1ZSBpcyBiZXR0ZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gdG8gYXZvaWQgMiBjYWxscyAoYW5kIHdhaXQgdW50aWwKICAgKiB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaXMgbWluZWQpCiAgICogRnJvbSBNb25vbGl0aERBTyBUb2tlbi5zb2wKICAgKi8KICBmdW5jdGlvbiBpbmNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLmFkZChfYWRkZWRWYWx1ZSk7CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHVpbnQgb2xkVmFsdWUgPSBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXTsKICAgIGlmIChfc3VidHJhY3RlZFZhbHVlID4gb2xkVmFsdWUpIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgfSBlbHNlIHsKICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBvbGRWYWx1ZS5zdWIoX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOwogICAgcmV0dXJuIHRydWU7CiAgfQoKfQoKCgoKCi8qCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCmJlbG93IGlzICdPcGVuWmVwcGVsaW4gIC0gU2FmZU1hdGguc29sJwogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBRdWFzYWNvaW4gdG9rZW4KICogQmFzZWQgb24gY29kZSBieSBPcGVuWmVwcGVsaW4gTWludGFibGVUb2tlbi5zb2wKIAogICsgYWRkZWQgZnJvemluZyB3aGVuIG1pbnRpbmcKIAogKi8KCmNvbnRyYWN0IFF1YXNhY29pblRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogICAgCiAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIlF1YXNhY29pbiI7CiAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiUVVBIjsKICB1aW50IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogIAogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsKCiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfYW1vdW50KTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfYW1vdW50KTsKCiAgICB1aW50IGZyb3plblRpbWUgPSAwOyAKICAgIC8vIGZyb3plbmVzcyBpcyBjaGVja2VkIHVudGlsICAwNy4wNy4xOCAwMDowMDowMCAoMTUzMDkyMTYwMCksIGFmdGVyIGFsbCB0b2tlbnMgYXJlIG1pbnRlZCBhcyB1bmZyb3plbgogICAgaWYobm93IDwgMTUzMDkyMTYwMCkgewogICAgICAvLyDQstGL0L/Rg9GB0LogICAgICAgICAgICAgICAgICAgICAg0LTQviAxNS4wMS4xOCAwMDowMDowMCAoMTUxNTk3NDQwMCkgLSDQt9Cw0LzQvtGA0L7Qt9C60LAg0LTQviAzMC4wMy4xOCAwMDowMDowMCAoMTUyMjM2ODAwMCkKICAgICAgaWYobm93IDwgMTUxNTk3NDQwMCkKICAgICAgICBmcm96ZW5UaW1lID0gMTUyMjM2ODAwMDsKCiAgICAgIC8vINCy0YvQv9GD0YHQuiBjIDE1LjAxLjE4IDAwOjAwOjAwICDQtNC+IDE1LjAyLjE4IDAwOjAwOjAwICgxNTE4NjUyODAwKSAtINC30LDQvNC+0YDQvtC30LrQsCDQtNC+IDMwLjA1LjE4IDAwOjAwOjAwICgxNTI3NjM4NDAwKSAgICAgCiAgICAgIGVsc2UgaWYobm93IDwgMTUxODY1MjgwMCkKICAgICAgICBmcm96ZW5UaW1lID0gMTUyNzYzODQwMDsKCiAgICAgIC8vINCy0YvQv9GD0YHQuiBjIDE1LjAyLjE4IDAwOjAwOjAwICDQtNC+IDI2LjAzLjE4IDAwOjAwOjAwICgxNTIyMDIyNDAwKSAtINC30LDQvNC+0YDQvtC30LrQsCDQtNC+IDMwLjA2LjE4IDAwOjAwOjAwICgxNTMwMzE2ODAwKQogICAgICBlbHNlIGlmKG5vdyA8IDE1MjIwMjI0MDApCiAgICAgICAgZnJvemVuVGltZSA9IDE1MzAzMTY4MDA7CgogICAgICAvLyDQstGL0L/Rg9GB0LogYyAyNi4wMy4xOCAwMDowMDowMCAg0LTQviAxNS4wNC4xOCAwMDowMDowMCAoMTUyMzc1MDQwMCkgLSDQt9Cw0LzQvtGA0L7Qt9C60LAg0LTQviAwMS4wNy4xOCAwMDowMDowMCAoMTUzMDQwMzIwMCkKICAgICAgZWxzZSBpZihub3cgPCAxNTIzNzUwNDAwKQogICAgICAgIGZyb3plblRpbWUgPSAxNTMwNDAzMjAwOwoKICAgICAgLy8g0LLRi9C/0YPRgdC6IGMgMTUuMDQuMTggMDA6MDA6MDAgINC00L4gMTUuMDUuMTggMDA6MDA6MDAgKDE1MjYzNDI0MDApIC0g0LfQsNC80L7RgNC+0LfQutCwINC00L4gMDcuMDcuMTggMDA6MDA6MDAgKDE1MzA5MjE2MDApCiAgICAgIGVsc2UgaWYobm93IDwgMTUyNjM0MjQwMCkKICAgICAgICBmcm96ZW5UaW1lID0gMTUzMDkyMTYwMDsKCiAgICAgIC8vINCy0YvQv9GD0YHQuiBjIDE1LjA1LjE4IDAwOjAwOjAwICDQtNC+IDE1LjA2LjE4IDAwOjAwOjAwICgxNTI5MDIwODAwKSAtINC30LDQvNC+0YDQvtC30LrQsCDQtNC+IDMwLjA2LjE4IDAwOjAwOjAwICgxNTMwMzE2ODAwKQogICAgICBlbHNlIGlmKG5vdyA8IDE1MjkwMjA4MDApCiAgICAgICAgZnJvemVuVGltZSA9IDE1MzAzMTY4MDA7CiAgICAgIGVsc2UgCiAgICAgIC8vINCy0YvQv9GD0YHQuiDRgSAxNS4wNi4xOCAwMDowMDowMCAg0L/QvtGB0LvQtSDQtNC+IDA3LjA3LjE4IDAwOjAwOjAwICgxNTMwOTIxNjAwKSAtINC30LDQvNC+0YDQvtC30LrQsCDQtNC+IDA3LjA3LjE4IDAwOjAwOjAwICgxNTMwOTIxNjAwKQogICAgICAgIGZyb3plblRpbWUgPSAxNTMwOTIxNjAwOwogICAgICB1bmZyb3plVGltZXN0YW1wW190b10gPSBmcm96ZW5UaW1lOwogICAgfQoKICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCBfYW1vdW50KTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICAgKi8KICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgTWludEZpbmlzaGVkKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgovKioKICogQHRpdGxlIFF1YXNvY29pbkNyb3dkc2FsZQogKiBiYXNlZCB1cG9uIE9wZW5aZXBwZWxpbiBDcm93ZFNhbGUgc21hcnRjb250cmFjdAogKi8KY29udHJhY3QgUXVhc2Fjb2luVG9rZW5Dcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogIFF1YXNhY29pblRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gc3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkIChib3RoIGluY2x1c2l2ZSkKICB1aW50MjU2IHB1YmxpYyBzdGFydFByZUlDT1RpbWU7CiAgLy8g0L/QtdGA0LXRhdC+0LQg0LjQtyBwcmVJQ08g0LIgSUNPCiAgdWludDI1NiBwdWJsaWMgc3RhcnRJQ09UaW1lOwogIHVpbnQyNTYgcHVibGljIGVuZFRpbWU7CgogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8g0LrQvtC80YMg0LLQtdGA0L3Rg9GC0Ywgb3duZXJzaGlwINC/0L7RgdC70LUg0LfQsNCy0LXRgNGI0LXQvdC40Y8gSUNPCiAgYWRkcmVzcyBwdWJsaWMgdG9rZW5Pd25lcjsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlUHJlSUNPOwogIHVpbnQyNTYgcHVibGljIHJhdGVJQ087CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkUHJlSUNPOwogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZElDTzsKCiAgdWludDI1NiBwdWJsaWMgY2FwUHJlSUNPOwogIHVpbnQyNTYgcHVibGljIGNhcElDTzsKCiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGludGVybmFsIGFsbG93ZWRNaW50ZXJzOwoKICAvKioKICAgKiBldmVudCBmb3IgdG9rZW4gcHVyY2hhc2UgbG9nZ2luZwogICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICogQHBhcmFtIHZhbHVlIHdlaXMgcGFpZCBmb3IgcHVyY2hhc2UKICAgKiBAcGFyYW0gYW1vdW50IGFtb3VudCBvZiB0b2tlbnMgcHVyY2hhc2VkCiAgICovCiAgZXZlbnQgVG9rZW5QdXJjaGFzZShhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLCBhZGRyZXNzIGluZGV4ZWQgYmVuZWZpY2lhcnksIHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgYW1vdW50KTsKCiAgZnVuY3Rpb24gUXVhc2Fjb2luVG9rZW5Dcm93ZHNhbGUoKSB7CiAgICB0b2tlbiA9IFF1YXNhY29pblRva2VuKDB4NGRBZWI0YTA2RjcwZjRiMUE1QzMyOTExNTczMWZFNGI4OUMwQjIyNyk7CiAgICB0b2tlbk93bmVyID0gMHgzNzNhZTczMGQ4YzQyNTBiM2QwMjJhNjVlZjk5OGI4YjdhYjFhYTUzOwogICAgd2FsbGV0ID0gMHgzNzNhZTczMGQ4YzQyNTBiM2QwMjJhNjVlZjk5OGI4YjdhYjFhYTUzOwoKICAgIC8vIDE1LjAxLjE4IDAwOjAwOjAwICgxNTE1OTc0NDAwKSAKICAgIHN0YXJ0UHJlSUNPVGltZSA9IDE1MTU5NzQ0MDA7CiAgICAvLyAxNS4wMi4xOCAwMDowMDowMCAoMTUxODY1MjgwMCkKICAgIHN0YXJ0SUNPVGltZSA9IDE1MTg2NTI4MDA7CiAgICAvLyAyNi4wMy4xOCAwMDowMDowMCAoMTUyMjAyMjQwMCkKICAgIGVuZFRpbWUgPSAxNTIyMDIyNDAwOwogICAgCiAgICAvLyBQcmUtSUNPLCAxIEVUSCA9IDYwMDAgUVVBCiAgICByYXRlUHJlSUNPID0gNjAwMDsKCiAgICAvLyBJQ08sIDEgRVRIID0gMzAwMCBRVUEKICAgIHJhdGVJQ08gPSAzMDAwOwoKICAgIGNhcFByZUlDTyA9IDUwMDAgZXRoZXI7CiAgICBjYXBJQ08gPSA1MDAwMCBldGhlcjsKICB9CgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICB9CgogIC8vIGxvdyBsZXZlbCB0b2tlbiBwdXJjaGFzZSBmdW5jdGlvbgogIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IDB4MCk7CiAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2UoKSk7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICB1aW50MjU2IHRva2VuczsKICAgIGlmKG5vdyA8IHN0YXJ0SUNPVGltZSkgeyAgCiAgICAgIHdlaVJhaXNlZFByZUlDTyA9IHdlaVJhaXNlZFByZUlDTy5hZGQod2VpQW1vdW50KTsKICAgICAgdG9rZW5zID0gd2VpQW1vdW50ICogcmF0ZVByZUlDTzsKICAgIH0gCiAgICBlbHNlIHsKICAgICAgd2VpUmFpc2VkSUNPID0gd2VpUmFpc2VkSUNPLmFkZCh3ZWlBbW91bnQpOwogICAgICB0b2tlbnMgPSB3ZWlBbW91bnQgKiByYXRlSUNPOwogICAgfQoKICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CgogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQoKICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgIAogICAgaWYobm93ID49IHN0YXJ0UHJlSUNPVGltZSAmJiBub3cgPCBzdGFydElDT1RpbWUpIHsKICAgICAgcmV0dXJuIHdlaVJhaXNlZFByZUlDTy5hZGQobXNnLnZhbHVlKSA8PSBjYXBQcmVJQ087CiAgICB9IGVsc2UgaWYobm93ID49IHN0YXJ0SUNPVGltZSAmJiBub3cgPCBlbmRUaW1lKSB7CiAgICAgIHJldHVybiB3ZWlSYWlzZWRJQ08uYWRkKG1zZy52YWx1ZSkgPD0gY2FwSUNPOwogICAgfSBlbHNlCiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIGlmKG5vdyA8IHN0YXJ0UHJlSUNPVGltZSkKICAgICAgcmV0dXJuIGZhbHNlOwogICAgZWxzZSBpZihub3cgPj0gc3RhcnRQcmVJQ09UaW1lICYmIG5vdyA8IHN0YXJ0SUNPVGltZSkgewogICAgICByZXR1cm4gd2VpUmFpc2VkUHJlSUNPID49IGNhcFByZUlDTzsKICAgIH0gZWxzZSBpZihub3cgPj0gc3RhcnRJQ09UaW1lICYmIG5vdyA8IGVuZFRpbWUpIHsKICAgICAgcmV0dXJuIHdlaVJhaXNlZElDTyA+PSBjYXBJQ087CiAgICB9IGVsc2UKICAgICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiByZXR1cm5Ub2tlbk93bmVyc2hpcCgpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gdG9rZW5Pd25lcik7CiAgICB0b2tlbi50cmFuc2Zlck93bmVyc2hpcCh0b2tlbk93bmVyKTsKICB9CgogIGZ1bmN0aW9uIGFkZE1pbnRlcihhZGRyZXNzIGFkZHIpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB0b2tlbk93bmVyKTsKICAgIGFsbG93ZWRNaW50ZXJzW2FkZHJdID0gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gcmVtb3ZlTWludGVyKGFkZHJlc3MgYWRkcikgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHRva2VuT3duZXIpOwogICAgYWxsb3dlZE1pbnRlcnNbYWRkcl0gPSBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIG1pbnRQcm94eShhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgewogICAgcmVxdWlyZShhbGxvd2VkTWludGVyc1ttc2cuc2VuZGVyXSk7CiAgICByZXF1aXJlKG5vdyA+PSBzdGFydFByZUlDT1RpbWUgJiYgbm93IDwgZW5kVGltZSk7CiAgICAKICAgIHVpbnQyNTYgd2VpQW1vdW50OwoKICAgIGlmKG5vdyA8IHN0YXJ0SUNPVGltZSkgewogICAgICB3ZWlBbW91bnQgPSBfYW1vdW50LmRpdihyYXRlUHJlSUNPKTsKICAgICAgcmVxdWlyZSh3ZWlSYWlzZWRQcmVJQ08uYWRkKHdlaUFtb3VudCkgPD0gY2FwUHJlSUNPKTsKICAgICAgd2VpUmFpc2VkUHJlSUNPID0gd2VpUmFpc2VkUHJlSUNPLmFkZCh3ZWlBbW91bnQpOwogICAgfSAKICAgIGVsc2UgewogICAgICB3ZWlBbW91bnQgPSBfYW1vdW50LmRpdihyYXRlSUNPKTsKICAgICAgcmVxdWlyZSh3ZWlSYWlzZWRJQ08uYWRkKHdlaUFtb3VudCkgPD0gY2FwSUNPKTsKICAgICAgd2VpUmFpc2VkSUNPID0gd2VpUmFpc2VkSUNPLmFkZCh3ZWlBbW91bnQpOwogICAgfQoKICAgIHRva2VuLm1pbnQoX3RvLCBfYW1vdW50KTsKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgX3RvLCB3ZWlBbW91bnQsIF9hbW91bnQpOwogIH0KfQ=='.
	

]
