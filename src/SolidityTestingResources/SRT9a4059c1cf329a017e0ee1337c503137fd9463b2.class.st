Class {
	#name : #SRT9a4059c1cf329a017e0ee1337c503137fd9463b2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9a4059c1cf329a017e0ee1337c503137fd9463b2 >> base64 [
	^ ''.
	

]
