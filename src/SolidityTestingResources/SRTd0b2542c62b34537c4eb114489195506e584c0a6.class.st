Class {
	#name : #SRTd0b2542c62b34537c4eb114489195506e584c0a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd0b2542c62b34537c4eb114489195506e584c0a6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7Cgpjb250cmFjdCBBcmd1bWVudHNDaGVja2VyIHsKCiAgICAvLy8gQGRldiBjaGVjayB3aGljaCBwcmV2ZW50cyBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgcGF5bG9hZFNpemVJcyh1aW50IHNpemUpIHsKICAgICAgIHJlcXVpcmUobXNnLmRhdGEubGVuZ3RoID09IHNpemUgKyA0IC8qIGZ1bmN0aW9uIHNlbGVjdG9yICovKTsKICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgY2hlY2sgdGhhdCBhZGRyZXNzIGlzIHZhbGlkCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBhZGRyKSB7CiAgICAgICAgcmVxdWlyZShhZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIF87CiAgICB9Cn0KCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Cgpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9Cgpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwoKICAgIC8vIFNhZmVNYXRoLnN1YiB3aWxsIHRocm93IGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggYmFsYW5jZS4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGludGVybmFsIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbX2Zyb21dKTsKICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAgKgogICAqIEJld2FyZSB0aGF0IGNoYW5naW5nIGFuIGFsbG93YW5jZSB3aXRoIHRoaXMgbWV0aG9kIGJyaW5ncyB0aGUgcmlzayB0aGF0IHNvbWVvbmUgbWF5IHVzZSBib3RoIHRoZSBvbGQKICAgKiBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgICogcmFjZSBjb25kaXRpb24gaXMgdG8gZmlyc3QgcmVkdWNlIHRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIHRvIDAgYW5kIHNldCB0aGUgZGVzaXJlZCB2YWx1ZSBhZnRlcndhcmRzOgogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQuCiAgICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgRnVuY3Rpb24gdG8gY2hlY2sgdGhlIGFtb3VudCBvZiB0b2tlbnMgdGhhdCBhbiBvd25lciBhbGxvd2VkIHRvIGEgc3BlbmRlci4KICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogICAqLwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYWRkZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfc3VidHJhY3RlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9Cgpjb250cmFjdCBDaXJjdWxhdGluZ1Rva2VuIGlzIFN0YW5kYXJkVG9rZW4gewoKICAgIGV2ZW50IENpcmN1bGF0aW9uRW5hYmxlZCgpOwoKICAgIG1vZGlmaWVyIHJlcXVpcmVzQ2lyY3VsYXRpb24gewogICAgICAgIHJlcXVpcmUobV9pc0NpcmN1bGF0aW5nKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyBQVUJMSUMgaW50ZXJmYWNlCgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXF1aXJlc0NpcmN1bGF0aW9uIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJlcXVpcmVzQ2lyY3VsYXRpb24gcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXF1aXJlc0NpcmN1bGF0aW9uIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsKICAgIH0KCgogICAgLy8gSU5URVJOQUwgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gZW5hYmxlQ2lyY3VsYXRpb24oKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG1faXNDaXJjdWxhdGluZykKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBtX2lzQ2lyY3VsYXRpbmcgPSB0cnVlOwogICAgICAgIENpcmN1bGF0aW9uRW5hYmxlZCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvLyBGSUVMRFMKCiAgICAvLy8gQG5vdGljZSBhcmUgdGhlIGNpcmN1bGF0aW9uIHN0YXJ0ZWQ/CiAgICBib29sIHB1YmxpYyBtX2lzQ2lyY3VsYXRpbmc7Cn0KCmNvbnRyYWN0IE1pbnRhYmxlVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7CiAgZXZlbnQgTWludChhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KTsKICBldmVudCBNaW50RmluaXNoZWQoKTsKCiAgYm9vbCBwdWJsaWMgbWludGluZ0ZpbmlzaGVkID0gZmFsc2U7CgoKICBtb2RpZmllciBjYW5NaW50KCkgewogICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIG1pbnQgdG9rZW5zCiAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgKiBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBtaW50LgogICAqIEByZXR1cm4gQSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAgICovCiAgZnVuY3Rpb24gbWludChhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX2Ftb3VudCk7CiAgICBNaW50KF90bywgX2Ftb3VudCk7CiAgICBUcmFuc2ZlcihhZGRyZXNzKDApLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgY2FuTWludCBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgIE1pbnRGaW5pc2hlZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9Cgpjb250cmFjdCBUb2tlbkJhc2UgaXMgTWludGFibGVUb2tlbiwgQ2lyY3VsYXRpbmdUb2tlbiB7CgogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiBhbW91bnQpOwoKCiAgICBzdHJpbmcgbV9uYW1lOwogICAgc3RyaW5nIG1fc3ltYm9sOwogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgoKICAgIGZ1bmN0aW9uIFRva2VuQmFzZShzdHJpbmcgX25hbWUsIHN0cmluZyBfc3ltYm9sKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoYnl0ZXMoX25hbWUpLmxlbmd0aCA+IDAgJiYgYnl0ZXMoX25hbWUpLmxlbmd0aCA8PSAzMik7CiAgICAgICAgcmVxdWlyZShieXRlcyhfc3ltYm9sKS5sZW5ndGggPiAwICYmIGJ5dGVzKF9zeW1ib2wpLmxlbmd0aCA8PSAzMik7CgogICAgICAgIG1fbmFtZSA9IF9uYW1lOwogICAgICAgIG1fc3ltYm9sID0gX3N5bWJvbDsKICAgIH0KCgogICAgZnVuY3Rpb24gYnVybih1aW50MjU2IF9hbW91bnQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBhZGRyZXNzIF9mcm9tID0gbXNnLnNlbmRlcjsKICAgICAgICByZXF1aXJlKF9hbW91bnQ+MCk7CiAgICAgICAgcmVxdWlyZShfYW1vdW50PD1iYWxhbmNlc1tfZnJvbV0pOwoKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfYW1vdW50KTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgICAgIEJ1cm4oX2Zyb20sIF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBhZGRyZXNzKDApLCBfYW1vdW50KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgoKICAgIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gbV9uYW1lOwogICAgfQoKICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBtX3N5bWJvbDsKICAgIH0KCgogICAgZnVuY3Rpb24gSUNPU3VjY2VzcygpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQoZmluaXNoTWludGluZygpKTsKICAgICAgICBhc3NlcnQoZW5hYmxlQ2lyY3VsYXRpb24oKSk7CiAgICB9Cn0KCmNvbnRyYWN0IFJlZW50cmFuY3lHdWFyZCB7CgogIC8qKgogICAqIEBkZXYgV2UgdXNlIGEgc2luZ2xlIGxvY2sgZm9yIHRoZSB3aG9sZSBjb250cmFjdC4KICAgKi8KICBib29sIHByaXZhdGUgcmVudHJhbmN5X2xvY2sgPSBmYWxzZTsKCiAgLyoqCiAgICogQGRldiBQcmV2ZW50cyBhIGNvbnRyYWN0IGZyb20gY2FsbGluZyBpdHNlbGYsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkuCiAgICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICAgKiBtYXJrIGl0IGBleHRlcm5hbGAuIENhbGxpbmcgb25lIG5vblJlZW50cmFudCBmdW5jdGlvbiBmcm9tCiAgICogYW5vdGhlciBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCB5b3UgY2FuIGltcGxlbWVudCBhCiAgICogYHByaXZhdGVgIGZ1bmN0aW9uIGRvaW5nIHRoZSBhY3R1YWwgd29yaywgYW5kIGEgYGV4dGVybmFsYAogICAqIHdyYXBwZXIgbWFya2VkIGFzIGBub25SZWVudHJhbnRgLgogICAqLwogIG1vZGlmaWVyIG5vblJlZW50cmFudCgpIHsKICAgIHJlcXVpcmUoIXJlbnRyYW5jeV9sb2NrKTsKICAgIHJlbnRyYW5jeV9sb2NrID0gdHJ1ZTsKICAgIF87CiAgICByZW50cmFuY3lfbG9jayA9IGZhbHNlOwogIH0KCn0KCmNvbnRyYWN0IExpZ2h0RnVuZHNSZWdpc3RyeSBpcyBBcmd1bWVudHNDaGVja2VyLCBPd25hYmxlLCBSZWVudHJhbmN5R3VhcmQgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgZW51bSBTdGF0ZSB7CiAgICAgICAgLy8gZ2F0aGVyaW5nIGZ1bmRzCiAgICAgICAgR0FUSEVSSU5HLAogICAgICAgIC8vIHJldHVybmluZyBmdW5kcyB0byBpbnZlc3RvcnMKICAgICAgICBSRUZVTkRJTkcsCiAgICAgICAgLy8gZnVuZHMgc2VudCB0byBvd25lcnMKICAgICAgICBTVUNDRUVERUQKICAgIH0KCiAgICBldmVudCBTdGF0ZUNoYW5nZWQoU3RhdGUgX3N0YXRlKTsKICAgIGV2ZW50IEludmVzdGVkKGFkZHJlc3MgaW5kZXhlZCBpbnZlc3RvciwgdWludDI1NiBhbW91bnQpOwogICAgZXZlbnQgRXRoZXJTZW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CiAgICBldmVudCBSZWZ1bmRTZW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7CgoKICAgIG1vZGlmaWVyIHJlcXVpcmVzU3RhdGUoU3RhdGUgX3N0YXRlKSB7CiAgICAgICAgcmVxdWlyZShtX3N0YXRlID09IF9zdGF0ZSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgLy8gUFVCTElDIGludGVyZmFjZQoKICAgIGZ1bmN0aW9uIExpZ2h0RnVuZHNSZWdpc3RyeShhZGRyZXNzIG93bmVyODAsIGFkZHJlc3Mgb3duZXIyMCkKICAgICAgICBwdWJsaWMKICAgICAgICB2YWxpZEFkZHJlc3Mob3duZXI4MCkKICAgICAgICB2YWxpZEFkZHJlc3Mob3duZXIyMCkKICAgIHsKICAgICAgICBtX293bmVyODAgPSBvd25lcjgwOwogICAgICAgIG1fb3duZXIyMCA9IG93bmVyMjA7CiAgICB9CgogICAgLy8vIEBkZXYgcGVyZm9ybXMgb25seSBhbGxvd2VkIHN0YXRlIHRyYW5zaXRpb25zCiAgICBmdW5jdGlvbiBjaGFuZ2VTdGF0ZShTdGF0ZSBfbmV3U3RhdGUpCiAgICAgICAgZXh0ZXJuYWwKICAgICAgICBvbmx5T3duZXIKICAgIHsKICAgICAgICBhc3NlcnQobV9zdGF0ZSAhPSBfbmV3U3RhdGUpOwoKICAgICAgICBpZiAoU3RhdGUuR0FUSEVSSU5HID09IG1fc3RhdGUpIHsgICBhc3NlcnQoU3RhdGUuUkVGVU5ESU5HID09IF9uZXdTdGF0ZSB8fCBTdGF0ZS5TVUNDRUVERUQgPT0gX25ld1N0YXRlKTsgfQogICAgICAgIGVsc2UgYXNzZXJ0KGZhbHNlKTsKCiAgICAgICAgbV9zdGF0ZSA9IF9uZXdTdGF0ZTsKICAgICAgICBTdGF0ZUNoYW5nZWQobV9zdGF0ZSk7CgogICAgICAgIGlmIChTdGF0ZS5TVUNDRUVERUQgPT0gX25ld1N0YXRlKSB7CiAgICAgICAgICAgIHVpbnQgXzgwcGVyY2VudCA9IHRoaXMuYmFsYW5jZS5tdWwoODApLmRpdigxMDApOwogICAgICAgICAgICBtX293bmVyODAudHJhbnNmZXIoXzgwcGVyY2VudCk7CiAgICAgICAgICAgIEV0aGVyU2VudChtX293bmVyODAsIF84MHBlcmNlbnQpOwoKICAgICAgICAgICAgdWludCBfMjBwZXJjZW50ID0gdGhpcy5iYWxhbmNlOwogICAgICAgICAgICBtX293bmVyMjAudHJhbnNmZXIoXzIwcGVyY2VudCk7CiAgICAgICAgICAgIEV0aGVyU2VudChtX293bmVyMjAsIF8yMHBlcmNlbnQpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiByZWNvcmRzIGFuIGludmVzdG1lbnQKICAgIGZ1bmN0aW9uIGludmVzdGVkKGFkZHJlc3MgX2ludmVzdG9yKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgcGF5YWJsZQogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJlcXVpcmVzU3RhdGUoU3RhdGUuR0FUSEVSSU5HKQogICAgewogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIHJlcXVpcmUoMCAhPSBhbW91bnQpOwoKICAgICAgICAvLyByZWdpc3RlciBpbnZlc3RvcgogICAgICAgIGlmICgwID09IG1fd2VpQmFsYW5jZXNbX2ludmVzdG9yXSkKICAgICAgICAgICAgbV9pbnZlc3RvcnMucHVzaChfaW52ZXN0b3IpOwoKICAgICAgICAvLyByZWdpc3RlciBwYXltZW50CiAgICAgICAgdG90YWxJbnZlc3RlZCA9IHRvdGFsSW52ZXN0ZWQuYWRkKGFtb3VudCk7CiAgICAgICAgbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdID0gbV93ZWlCYWxhbmNlc1tfaW52ZXN0b3JdLmFkZChhbW91bnQpOwoKICAgICAgICBJbnZlc3RlZChfaW52ZXN0b3IsIGFtb3VudCk7CiAgICB9CgogICAgLy8vIEBub3RpY2Ugd2l0aGRyYXcgYWNjdW11bGF0ZWQgYmFsYW5jZSwgY2FsbGVkIGJ5IHBheWVlIGluIGNhc2UgY3Jvd2RzYWxlIGhhcyBmYWlsZWQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3UGF5bWVudHMoYWRkcmVzcyBwYXllZSkKICAgICAgICBleHRlcm5hbAogICAgICAgIG5vblJlZW50cmFudAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHJlcXVpcmVzU3RhdGUoU3RhdGUuUkVGVU5ESU5HKQogICAgewogICAgICAgIHVpbnQyNTYgcGF5bWVudCA9IG1fd2VpQmFsYW5jZXNbcGF5ZWVdOwoKICAgICAgICByZXF1aXJlKHBheW1lbnQgIT0gMCk7CiAgICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gcGF5bWVudCk7CgogICAgICAgIHRvdGFsSW52ZXN0ZWQgPSB0b3RhbEludmVzdGVkLnN1YihwYXltZW50KTsKICAgICAgICBtX3dlaUJhbGFuY2VzW3BheWVlXSA9IDA7CgogICAgICAgIHBheWVlLnRyYW5zZmVyKHBheW1lbnQpOwogICAgICAgIFJlZnVuZFNlbnQocGF5ZWUsIHBheW1lbnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEludmVzdG9yc0NvdW50KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7IHJldHVybiBtX2ludmVzdG9ycy5sZW5ndGg7IH0KCgogICAgLy8gRklFTERTCgogICAgLy8vIEBub3RpY2UgdG90YWwgYW1vdW50IG9mIGludmVzdG1lbnRzIGluIHdlaQogICAgdWludDI1NiBwdWJsaWMgdG90YWxJbnZlc3RlZDsKCiAgICAvLy8gQG5vdGljZSBzdGF0ZSBvZiB0aGUgcmVnaXN0cnkKICAgIFN0YXRlIHB1YmxpYyBtX3N0YXRlID0gU3RhdGUuR0FUSEVSSU5HOwoKICAgIC8vLyBAZGV2IGJhbGFuY2VzIG9mIGludmVzdG9ycyBpbiB3ZWkKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgbV93ZWlCYWxhbmNlczsKCiAgICAvLy8gQGRldiBsaXN0IG9mIHVuaXF1ZSBpbnZlc3RvcnMKICAgIGFkZHJlc3NbXSBwdWJsaWMgbV9pbnZlc3RvcnM7CgogICAgYWRkcmVzcyBwdWJsaWMgbV9vd25lcjgwOwogICAgYWRkcmVzcyBwdWJsaWMgbV9vd25lcjIwOwp9Cgpjb250cmFjdCBDcm93ZHNhbGVCYXNlIGlzIEFyZ3VtZW50c0NoZWNrZXIsIFJlZW50cmFuY3lHdWFyZCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBldmVudCBGdW5kVHJhbnNmZXIoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50LCBib29sIGlzQ29udHJpYnV0aW9uKTsKCiAgICBmdW5jdGlvbiBDcm93ZHNhbGVCYXNlKGFkZHJlc3Mgb3duZXI4MCwgYWRkcmVzcyBvd25lcjIwLCBzdHJpbmcgdG9rZW5fbmFtZSwgc3RyaW5nIHRva2VuX3N5bWJvbCkKICAgICAgICBwdWJsaWMKICAgIHsKICAgICAgICBtX2Z1bmRzID0gbmV3IExpZ2h0RnVuZHNSZWdpc3RyeShvd25lcjgwLCBvd25lcjIwKTsKICAgICAgICBtX3Rva2VuID0gbmV3IFRva2VuQmFzZSh0b2tlbl9uYW1lLCB0b2tlbl9zeW1ib2wpOwoKICAgICAgICBhc3NlcnQoISBoYXNIYXJkQ2FwKCkgfHwgZ2V0TWF4aW11bUZ1bmRzKCkgPj0gZ2V0TWluaW11bUZ1bmRzKCkpOwogICAgfQoKCiAgICAvLyBQVUJMSUMgaW50ZXJmYWNlCgogICAgLy8gZmFsbGJhY2sgZnVuY3Rpb24gYXMgYSBzaG9ydGN1dAogICAgZnVuY3Rpb24oKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICByZXF1aXJlKDAgPT0gbXNnLmRhdGEubGVuZ3RoKTsKICAgICAgICBidXkoKTsgIC8vIG9ubHkgaW50ZXJuYWwgY2FsbCBoZXJlIQogICAgfQoKICAgIC8vLyBAbm90aWNlIGNyb3dkc2FsZSBwYXJ0aWNpcGF0aW9uCiAgICBmdW5jdGlvbiBidXkoKQogICAgICAgIHB1YmxpYyAgLy8gZG9udCBtYXJrIGFzIGV4dGVybmFsIQogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBidXlJbnRlcm5hbChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQoKCiAgICAvLy8gQG5vdGljZSByZWZ1bmQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3UGF5bWVudHMoKQogICAgICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgbV9mdW5kcy53aXRoZHJhd1BheW1lbnRzKG1zZy5zZW5kZXIpOwogICAgfQoKCiAgICAvLyBJTlRFUk5BTAoKICAgIC8vLyBAZGV2IHBheW1lbnQgcHJvY2Vzc2luZwogICAgZnVuY3Rpb24gYnV5SW50ZXJuYWwoYWRkcmVzcyBpbnZlc3RvciwgdWludCBwYXltZW50KQogICAgICAgIGludGVybmFsCiAgICAgICAgbm9uUmVlbnRyYW50CiAgICB7CiAgICAgICAgcmVxdWlyZShwYXltZW50ID49IGdldE1pbkludmVzdG1lbnQoKSk7CiAgICAgICAgaWYgKGdldEN1cnJlbnRUaW1lKCkgPj0gZ2V0RW5kVGltZSgpKQogICAgICAgICAgICBmaW5pc2goKTsKCiAgICAgICAgaWYgKG1fZmluaXNoZWQpIHsKICAgICAgICAgICAgLy8gc2F2aW5nIHByb3ZpZGVkIGdhcwogICAgICAgICAgICBpbnZlc3Rvci50cmFuc2ZlcihwYXltZW50KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdWludCBzdGFydGluZ1dlaUNvbGxlY3RlZCA9IGdldFdlaUNvbGxlY3RlZCgpOwogICAgICAgIHVpbnQgc3RhcnRpbmdJbnZhcmlhbnQgPSB0aGlzLmJhbGFuY2UuYWRkKHN0YXJ0aW5nV2VpQ29sbGVjdGVkKTsKCiAgICAgICAgdWludCBjaGFuZ2U7CiAgICAgICAgaWYgKGhhc0hhcmRDYXAoKSkgewogICAgICAgICAgICAvLyByZXR1cm4gb3IgdXBkYXRlIHBheW1lbnQgaWYgbmVlZGVkCiAgICAgICAgICAgIHVpbnQgcGF5bWVudEFsbG93ZWQgPSBnZXRNYXhpbXVtRnVuZHMoKS5zdWIoZ2V0V2VpQ29sbGVjdGVkKCkpOwogICAgICAgICAgICBhc3NlcnQoMCAhPSBwYXltZW50QWxsb3dlZCk7CgogICAgICAgICAgICBpZiAocGF5bWVudEFsbG93ZWQgPCBwYXltZW50KSB7CiAgICAgICAgICAgICAgICBjaGFuZ2UgPSBwYXltZW50LnN1YihwYXltZW50QWxsb3dlZCk7CiAgICAgICAgICAgICAgICBwYXltZW50ID0gcGF5bWVudEFsbG93ZWQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGlzc3VlIHRva2VucwogICAgICAgIHJlcXVpcmUobV90b2tlbi5taW50KGludmVzdG9yLCBjYWxjdWxhdGVUb2tlbnMocGF5bWVudCkpKTsKCiAgICAgICAgLy8gcmVjb3JkIHBheW1lbnQKICAgICAgICBtX2Z1bmRzLmludmVzdGVkLnZhbHVlKHBheW1lbnQpKGludmVzdG9yKTsKCiAgICAgICAgYXNzZXJ0KCghaGFzSGFyZENhcCgpIHx8IGdldFdlaUNvbGxlY3RlZCgpIDw9IGdldE1heGltdW1GdW5kcygpKSAmJiBnZXRXZWlDb2xsZWN0ZWQoKSA+IHN0YXJ0aW5nV2VpQ29sbGVjdGVkKTsKICAgICAgICBGdW5kVHJhbnNmZXIoaW52ZXN0b3IsIHBheW1lbnQsIHRydWUpOwoKICAgICAgICBpZiAoaGFzSGFyZENhcCgpICYmIGdldFdlaUNvbGxlY3RlZCgpID09IGdldE1heGltdW1GdW5kcygpKQogICAgICAgICAgICBmaW5pc2goKTsKCiAgICAgICAgaWYgKGNoYW5nZSA+IDApCiAgICAgICAgICAgIGludmVzdG9yLnRyYW5zZmVyKGNoYW5nZSk7CgogICAgICAgIGFzc2VydChzdGFydGluZ0ludmFyaWFudCA9PSB0aGlzLmJhbGFuY2UuYWRkKGdldFdlaUNvbGxlY3RlZCgpKS5hZGQoY2hhbmdlKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluaXNoKCkgaW50ZXJuYWwgewogICAgICAgIGlmIChtX2ZpbmlzaGVkKQogICAgICAgICAgICByZXR1cm47CgogICAgICAgIGlmIChnZXRXZWlDb2xsZWN0ZWQoKSA+PSBnZXRNaW5pbXVtRnVuZHMoKSkgewogICAgICAgICAgICAvLyBTdWNjZXNzCiAgICAgICAgICAgIG1fZnVuZHMuY2hhbmdlU3RhdGUoTGlnaHRGdW5kc1JlZ2lzdHJ5LlN0YXRlLlNVQ0NFRURFRCk7CiAgICAgICAgICAgIG1fdG9rZW4uSUNPU3VjY2VzcygpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgLy8gRmFpbHVyZQogICAgICAgICAgICBtX2Z1bmRzLmNoYW5nZVN0YXRlKExpZ2h0RnVuZHNSZWdpc3RyeS5TdGF0ZS5SRUZVTkRJTkcpOwogICAgICAgIH0KCiAgICAgICAgbV9maW5pc2hlZCA9IHRydWU7CiAgICB9CgoKICAgIC8vLyBAbm90aWNlIHdoZXRoZXIgdG8gYXBwbHkgaGFyZCBjYXAgY2hlY2sgbG9naWMgdmlhIGdldE1heGltdW1GdW5kcygpIG1ldGhvZAogICAgZnVuY3Rpb24gaGFzSGFyZENhcCgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZ2V0TWF4aW11bUZ1bmRzKCkgIT0gMDsKICAgIH0KCiAgICAvLy8gQGRldiB0byBiZSBvdmVycmlkZGVuIGluIHRlc3RzCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbm93OwogICAgfQoKICAgIC8vLyBAbm90aWNlIG1heGltdW0gaW52ZXN0bWVudHMgdG8gYmUgYWNjZXB0ZWQgZHVyaW5nIHRoZSBzYWxlIChpbiB3ZWkpCiAgICBmdW5jdGlvbiBnZXRNYXhpbXVtRnVuZHMoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGV1cm9DZW50czJ3ZWkoZ2V0TWF4aW11bUZ1bmRzSW5FdXJvQ2VudHMoKSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbWluaW11bSBhbW91bnQgb2YgZnVuZGluZyB0byBjb25zaWRlciB0aGUgc2FsZSBhcyBzdWNjZXNzZnVsIChpbiB3ZWkpCiAgICBmdW5jdGlvbiBnZXRNaW5pbXVtRnVuZHMoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGV1cm9DZW50czJ3ZWkoZ2V0TWluaW11bUZ1bmRzSW5FdXJvQ2VudHMoKSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgZW5kIHRpbWUgb2YgdGhlIHNhbGUKICAgIGZ1bmN0aW9uIGdldEVuZFRpbWUoKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDE1MjEzMzEyMDA7CiAgICB9CgogICAgLy8vIEBub3RpY2UgbWluaW1hbCBhbW91bnQgb2Ygb25lIGludmVzdG1lbnQgKGluIHdlaSkKICAgIGZ1bmN0aW9uIGdldE1pbkludmVzdG1lbnQoKSBwdWJsaWMgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDEwIGZpbm5leTsKICAgIH0KCiAgICAvLy8gQGRldiBzbWFsbGVzdCBkaXZpc2libGUgdG9rZW4gdW5pdHMgKHRva2VuIHdlaSkgaW4gb25lIHRva2VuCiAgICBmdW5jdGlvbiB0b2tlbldlaUluVG9rZW4oKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHVpbnQoMTApICoqIHVpbnQobV90b2tlbi5kZWNpbWFscygpKTsKICAgIH0KCiAgICAvLy8gQGRldiBjYWxjdWxhdGVzIHRva2VuIGFtb3VudCBmb3IgZ2l2ZW4gaW52ZXN0bWVudAogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQgcGF5bWVudCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB3ZWkyZXVyb0NlbnRzKHBheW1lbnQpLm11bCh0b2tlbldlaUluVG9rZW4oKSkuZGl2KHRva2VuUHJpY2VJbkV1cm9DZW50cygpKTsKICAgIH0KCgogICAgLy8gY29udmVyc2lvbnMKCiAgICBmdW5jdGlvbiB3ZWkyZXVyb0NlbnRzKHVpbnQgd2VpXykgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB3ZWlfLm11bChldXJvQ2VudHNJbk9uZUV0aGVyKCkpLmRpdigxIGV0aGVyKTsKICAgIH0KCgogICAgZnVuY3Rpb24gZXVyb0NlbnRzMndlaSh1aW50IGV1cm9DZW50cykgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBldXJvQ2VudHMubXVsKDEgZXRoZXIpLmRpdihldXJvQ2VudHNJbk9uZUV0aGVyKCkpOwogICAgfQoKCiAgICAvLyBzdGF0CgogICAgLy8vIEBub3RpY2UgYW1vdW50IG9mIGV1cm8gY29sbGVjdGVkCiAgICBmdW5jdGlvbiBnZXRFdXJvQ29sbGVjdGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gd2VpMmV1cm9DZW50cyhnZXRXZWlDb2xsZWN0ZWQoKSkuZGl2KDEwMCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgYW1vdW50IG9mIHdlaSBjb2xsZWN0ZWQKICAgIGZ1bmN0aW9uIGdldFdlaUNvbGxlY3RlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIG1fZnVuZHMudG90YWxJbnZlc3RlZCgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGFtb3VudCBvZiB3ZWktdG9rZW5zIG1pbnRlZAogICAgZnVuY3Rpb24gZ2V0VG9rZW5NaW50ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBtX3Rva2VuLnRvdGFsU3VwcGx5KCk7CiAgICB9CgoKICAgIC8vIFNFVFRJTkdTCgogICAgLy8vIEBub3RpY2UgbWF4aW11bSBpbnZlc3RtZW50cyB0byBiZSBhY2NlcHRlZCBkdXJpbmcgdGhlIHNhbGUgKGluIGV1cm8tY2VudHMpCiAgICBmdW5jdGlvbiBnZXRNYXhpbXVtRnVuZHNJbkV1cm9DZW50cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQG5vdGljZSBtaW5pbXVtIGFtb3VudCBvZiBmdW5kaW5nIHRvIGNvbnNpZGVyIHRoZSBzYWxlIGFzIHN1Y2Nlc3NmdWwgKGluIGV1cm8tY2VudHMpCiAgICBmdW5jdGlvbiBnZXRNaW5pbXVtRnVuZHNJbkV1cm9DZW50cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICAvLy8gQG5vdGljZSBldXJvLWNlbnRzIHBlciAxIGV0aGVyCiAgICBmdW5jdGlvbiBldXJvQ2VudHNJbk9uZUV0aGVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOwoKICAgIC8vLyBAbm90aWNlIHByaWNlIG9mIG9uZSB0b2tlbiAoMWUxOCB3ZWktdG9rZW5zKSBpbiBldXJvIGNlbnRzCiAgICBmdW5jdGlvbiB0b2tlblByaWNlSW5FdXJvQ2VudHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCk7CgoKICAgIC8vIEZJRUxEUwoKICAgIC8vLyBAZGV2IGNvbnRyYWN0IHJlc3BvbnNpYmxlIGZvciBmdW5kcyBhY2NvdW50aW5nCiAgICBMaWdodEZ1bmRzUmVnaXN0cnkgcHVibGljIG1fZnVuZHM7CgogICAgLy8vIEBkZXYgY29udHJhY3QgcmVzcG9uc2libGUgZm9yIHRva2VuIGFjY291bnRpbmcKICAgIFRva2VuQmFzZSBwdWJsaWMgbV90b2tlbjsKCiAgICBib29sIG1fZmluaXNoZWQgPSBmYWxzZTsKfQoKY29udHJhY3QgRUVTVFNhbGUzIGlzIENyb3dkc2FsZUJhc2UgewoKICAgIGZ1bmN0aW9uIEVFU1RTYWxlMygpIHB1YmxpYwogICAgICAgIENyb3dkc2FsZUJhc2UoCiAgICAgICAgICAgIC8qb3duZXI4MCovIGFkZHJlc3MoMHg1NDQxMjI3YTlhYjcwMGQzMzFlYmViY2FjNDk5NGFjYTQ2ZmM2ZTFiKSwKICAgICAgICAgICAgLypvd25lcjIwKi8gYWRkcmVzcygweDExMzM2YWZkYzkzZGQ4YTU4NTllM2RmMjJiZTUzYTU0N2JjMjlhMmUpLAogICAgICAgICAgICAiRWxlY3Ryb25pYyBleGNoYW5nZSBzaWduLXRva2VuIDMiLCAiRUVTVDMiKQogICAgewogICAgfQoKCiAgICAvLy8gQG5vdGljZSBtYXhpbXVtIGludmVzdG1lbnRzIHRvIGJlIGFjY2VwdGVkIGR1cmluZyB0aGUgc2FsZSAoaW4gZXVyby1jZW50cykKICAgIGZ1bmN0aW9uIGdldE1heGltdW1GdW5kc0luRXVyb0NlbnRzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gNzkxMTAwMDAwMDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBtaW5pbXVtIGFtb3VudCBvZiBmdW5kaW5nIHRvIGNvbnNpZGVyIHRoZSBzYWxlIGFzIHN1Y2Nlc3NmdWwgKGluIGV1cm8tY2VudHMpCiAgICBmdW5jdGlvbiBnZXRNaW5pbXVtRnVuZHNJbkV1cm9DZW50cygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDc5MTEwMDAwMDA7CiAgICB9CgogICAgLy8vIEBub3RpY2UgZXVyby1jZW50cyBwZXIgMSBldGhlcgogICAgZnVuY3Rpb24gZXVyb0NlbnRzSW5PbmVFdGhlcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIDU4MDAwOwogICAgfQoKICAgIC8vLyBAbm90aWNlIHByaWNlIG9mIG9uZSB0b2tlbiAoMWUxOCB3ZWktdG9rZW5zKSBpbiBldXJvIGNlbnRzCiAgICBmdW5jdGlvbiB0b2tlblByaWNlSW5FdXJvQ2VudHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiAxMDAwOwogICAgfQp9'.
	

]
