Class {
	#name : #SRT96d0b9AA47356Dc088B50D4e4ce72af31C8ae9B5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96d0b9AA47356Dc088B50D4e4ce72af31C8ae9B5 >> base64 [
	^ ''.
	

]
