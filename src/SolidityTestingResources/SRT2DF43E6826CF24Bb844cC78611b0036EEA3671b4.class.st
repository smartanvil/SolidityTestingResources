Class {
	#name : #SRT2DF43E6826CF24Bb844cC78611b0036EEA3671b4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2DF43E6826CF24Bb844cC78611b0036EEA3671b4 >> base64 [
	^ ''.
	

]
