Class {
	#name : #SRTa4306692b00795f97010ec7237980141d08c6d56,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa4306692b00795f97010ec7237980141d08c6d56 >> base64 [
	^ ''.
	

]
