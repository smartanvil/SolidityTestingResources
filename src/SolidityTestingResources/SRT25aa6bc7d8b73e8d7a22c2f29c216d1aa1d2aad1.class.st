Class {
	#name : #SRT25aa6bc7d8b73e8d7a22c2f29c216d1aa1d2aad1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT25aa6bc7d8b73e8d7a22c2f29c216d1aa1d2aad1 >> base64 [
	^ ''.
	

]
