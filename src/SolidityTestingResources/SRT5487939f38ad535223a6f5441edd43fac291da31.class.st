Class {
	#name : #SRT5487939f38ad535223a6f5441edd43fac291da31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5487939f38ad535223a6f5441edd43fac291da31 >> base64 [
	^ ''.
	

]
