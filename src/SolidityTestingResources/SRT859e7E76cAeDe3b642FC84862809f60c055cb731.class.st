Class {
	#name : #SRT859e7E76cAeDe3b642FC84862809f60c055cb731,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT859e7E76cAeDe3b642FC84862809f60c055cb731 >> base64 [
	^ ''.
	

]
