Class {
	#name : #SRT2926ba12e333ddb29257f52dde90fce89e2e1b7d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2926ba12e333ddb29257f52dde90fce89e2e1b7d >> base64 [
	^ ''.
	

]
