Class {
	#name : #SRT25b7dbaf654718171892f39357af75e060b2db5b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT25b7dbaf654718171892f39357af75e060b2db5b >> base64 [
	^ ''.
	

]
