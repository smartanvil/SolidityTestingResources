Class {
	#name : #SRT608c460a08b10ca06b9b5fe45451cf2552fa2e4f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT608c460a08b10ca06b9b5fe45451cf2552fa2e4f >> base64 [
	^ ''.
	

]
