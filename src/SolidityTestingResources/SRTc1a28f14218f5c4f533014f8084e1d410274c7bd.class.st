Class {
	#name : #SRTc1a28f14218f5c4f533014f8084e1d410274c7bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc1a28f14218f5c4f533014f8084e1d410274c7bd >> base64 [
	^ ''.
	

]
