Class {
	#name : #SRT35a9f962096a1c5e960c8dc69872fc84893ac6f8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT35a9f962096a1c5e960c8dc69872fc84893ac6f8 >> base64 [
	^ ''.
	

]
