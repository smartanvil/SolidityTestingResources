Class {
	#name : #SRT39173925e7c7a07dc7a6afbf1dffd0179de18c27,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT39173925e7c7a07dc7a6afbf1dffd0179de18c27 >> base64 [
	^ ''.
	

]
