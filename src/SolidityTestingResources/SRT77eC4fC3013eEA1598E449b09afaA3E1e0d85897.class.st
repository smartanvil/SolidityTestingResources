Class {
	#name : #SRT77eC4fC3013eEA1598E449b09afaA3E1e0d85897,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT77eC4fC3013eEA1598E449b09afaA3E1e0d85897 >> base64 [
	^ ''.
	

]
