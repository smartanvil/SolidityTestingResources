Class {
	#name : #SRT600ad7b57f3e6aeee53acb8704a5ed50b60cacd6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT600ad7b57f3e6aeee53acb8704a5ed50b60cacd6 >> base64 [
	^ ''.
	

]
