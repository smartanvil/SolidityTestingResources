Class {
	#name : #SRT1d9ca3546b84d3103b551c7d5006e4db172e06e6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d9ca3546b84d3103b551c7d5006e4db172e06e6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBPd25lZCgpIAogICAgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgCiAgICAgICAgb25seU93bmVyIAogICAgcHVibGljIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCBSZWFsaXR5Q2hlY2tBUEkgewogICAgZnVuY3Rpb24gc2V0UXVlc3Rpb25GZWUodWludDI1NiBmZWUpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIGZpbmFsaXplQnlBcmJpdHJhdG9yKGJ5dGVzMzIgcXVlc3Rpb25faWQsIGJ5dGVzMzIgYW5zd2VyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBzdWJtaXRBbnN3ZXJCeUFyYml0cmF0b3IoYnl0ZXMzMiBxdWVzdGlvbl9pZCwgYnl0ZXMzMiBhbnN3ZXIsIGFkZHJlc3MgYW5zd2VyZXIpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIG5vdGlmeU9mQXJiaXRyYXRpb25SZXF1ZXN0KGJ5dGVzMzIgcXVlc3Rpb25faWQsIGFkZHJlc3MgcmVxdWVzdGVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBpc0ZpbmFsaXplZChieXRlczMyIHF1ZXN0aW9uX2lkKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIHB1YmxpYzsKfQoKY29udHJhY3QgQXJiaXRyYXRvciBpcyBPd25lZCB7CgogICAgbWFwcGluZyhieXRlczMyID0+IHVpbnQyNTYpIHB1YmxpYyBhcmJpdHJhdGlvbl9ib3VudGllczsKCiAgICB1aW50MjU2IGRpc3B1dGVfZmVlOwogICAgbWFwcGluZyhieXRlczMyID0+IHVpbnQyNTYpIGN1c3RvbV9kaXNwdXRlX2ZlZXM7CgogICAgZXZlbnQgTG9nUmVxdWVzdEFyYml0cmF0aW9uKAogICAgICAgIGJ5dGVzMzIgaW5kZXhlZCBxdWVzdGlvbl9pZCwKICAgICAgICB1aW50MjU2IGZlZV9wYWlkLAogICAgICAgIGFkZHJlc3MgcmVxdWVzdGVyLAogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nCiAgICApOwoKICAgIGV2ZW50IExvZ1NldFF1ZXN0aW9uRmVlKAogICAgICAgIHVpbnQyNTYgZmVlCiAgICApOwoKICAgIGV2ZW50IExvZ1NldERpc3B1dGVGZWUoCiAgICAgICAgdWludDI1NiBmZWUKICAgICk7CgogICAgZXZlbnQgTG9nU2V0Q3VzdG9tRGlzcHV0ZUZlZSgKICAgICAgICBieXRlczMyIGluZGV4ZWQgcXVlc3Rpb25faWQsCiAgICAgICAgdWludDI1NiBmZWUKICAgICk7CgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IuIFNldHMgdGhlIGRlcGxveWluZyBhZGRyZXNzIGFzIG93bmVyLgogICAgZnVuY3Rpb24gQXJiaXRyYXRvcigpIAogICAgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2V0IHRoZSBkZWZhdWx0IGZlZQogICAgLy8vIEBwYXJhbSBmZWUgVGhlIGRlZmF1bHQgZmVlIGFtb3VudAogICAgZnVuY3Rpb24gc2V0RGlzcHV0ZUZlZSh1aW50MjU2IGZlZSkgCiAgICAgICAgb25seU93bmVyIAogICAgcHVibGljIHsKICAgICAgICBkaXNwdXRlX2ZlZSA9IGZlZTsKICAgICAgICBMb2dTZXREaXNwdXRlRmVlKGZlZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2V0IGEgY3VzdG9tIGZlZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIHF1ZXN0aW9uCiAgICAvLy8gQHBhcmFtIHF1ZXN0aW9uX2lkIFRoZSBxdWVzdGlvbiBpbiBxdWVzdGlvbgogICAgLy8vIEBwYXJhbSBmZWUgVGhlIGZlZSBhbW91bnQKICAgIGZ1bmN0aW9uIHNldEN1c3RvbURpc3B1dGVGZWUoYnl0ZXMzMiBxdWVzdGlvbl9pZCwgdWludDI1NiBmZWUpIAogICAgICAgIG9ubHlPd25lciAKICAgIHB1YmxpYyB7CiAgICAgICAgY3VzdG9tX2Rpc3B1dGVfZmVlc1txdWVzdGlvbl9pZF0gPSBmZWU7CiAgICAgICAgTG9nU2V0Q3VzdG9tRGlzcHV0ZUZlZShxdWVzdGlvbl9pZCwgZmVlKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXR1cm4gdGhlIGRpc3B1dGUgZmVlIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXN0aW9uLiAwIGluZGljYXRlcyB0aGF0IHdlIHdvbid0IGFyYml0cmF0ZSBpdC4KICAgIC8vLyBAcGFyYW0gcXVlc3Rpb25faWQgVGhlIHF1ZXN0aW9uIGluIHF1ZXN0aW9uCiAgICAvLy8gQGRldiBVc2VzIGEgZ2VuZXJhbCBkZWZhdWx0LCBidXQgY2FuIGJlIG92ZXItcmlkZGVuIG9uIGEgcXVlc3Rpb24tYnktcXVlc3Rpb24gYmFzaXMuCiAgICBmdW5jdGlvbiBnZXREaXNwdXRlRmVlKGJ5dGVzMzIgcXVlc3Rpb25faWQpIAogICAgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gKGN1c3RvbV9kaXNwdXRlX2ZlZXNbcXVlc3Rpb25faWRdID4gMCkgPyBjdXN0b21fZGlzcHV0ZV9mZWVzW3F1ZXN0aW9uX2lkXSA6IGRpc3B1dGVfZmVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNldCBhIGZlZSBmb3IgYXNraW5nIGEgcXVlc3Rpb24gd2l0aCB1cyBhcyB0aGUgYXJiaXRyYXRvcgogICAgLy8vIEBwYXJhbSByZWFsaXR5Y2hlY2sgVGhlIFJlYWxpdHlDaGVjayBjb250cmFjdCBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIGZlZSBUaGUgZmVlIGFtb3VudAogICAgLy8vIEBkZXYgRGVmYXVsdCBpcyBubyBmZWUuIFVubGlrZSB0aGUgZGlzcHV0ZSBmZWUsIDAgaXMgYW4gYWNjZXB0YWJsZSBzZXR0aW5nLgogICAgLy8vIFlvdSBjb3VsZCBzZXQgYW4gaW1wb3NzaWJseSBoaWdoIGZlZSBpZiB5b3Ugd2FudCB0byBwcmV2ZW50IHVzIGJlaW5nIHVzZWQgYXMgYXJiaXRyYXRvciB1bmxlc3Mgd2Ugc3VibWl0IHRoZSBxdWVzdGlvbi4KICAgIC8vLyAoU3VibWl0dGluZyB0aGUgcXVlc3Rpb24gb3Vyc2VsdmVzIGlzIG5vdCBpbXBsZW1lbnRlZCBoZXJlLikKICAgIC8vLyBUaGlzIGZlZSBjYW4gYmUgdXNlZCBhcyBhIHJldmVudWUgc291cmNlLCBhbiBhbnRpLXNwYW0gbWVhc3VyZSwgb3IgYm90aC4KICAgIGZ1bmN0aW9uIHNldFF1ZXN0aW9uRmVlKGFkZHJlc3MgcmVhbGl0eWNoZWNrLCB1aW50MjU2IGZlZSkgCiAgICAgICAgb25seU93bmVyIAogICAgcHVibGljIHsKICAgICAgICBSZWFsaXR5Q2hlY2tBUEkocmVhbGl0eWNoZWNrKS5zZXRRdWVzdGlvbkZlZShmZWUpOwogICAgICAgIExvZ1NldFF1ZXN0aW9uRmVlKGZlZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU3VibWl0IHRoZSBhcmJpdHJhdG9yJ3MgYW5zd2VyIHRvIGEgcXVlc3Rpb24uCiAgICAvLy8gQHBhcmFtIHJlYWxpdHljaGVjayBUaGUgUmVhbGl0eUNoZWNrIGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vLyBAcGFyYW0gcXVlc3Rpb25faWQgVGhlIHF1ZXN0aW9uIGluIHF1ZXN0aW9uCiAgICAvLy8gQHBhcmFtIGFuc3dlciBUaGUgYW5zd2VyCiAgICAvLy8gQHBhcmFtIGFuc3dlcmVyIFRoZSBhbnN3ZXJlci4gSWYgYXJiaXRyYXRpb24gY2hhbmdlZCB0aGUgYW5zd2VyLCBpdCBzaG91bGQgYmUgdGhlIHBheWVyLiBJZiBub3QsIHRoZSBvbGQgYW5zd2VyZXIuCiAgICBmdW5jdGlvbiBzdWJtaXRBbnN3ZXJCeUFyYml0cmF0b3IoYWRkcmVzcyByZWFsaXR5Y2hlY2ssIGJ5dGVzMzIgcXVlc3Rpb25faWQsIGJ5dGVzMzIgYW5zd2VyLCBhZGRyZXNzIGFuc3dlcmVyKSAKICAgICAgICBvbmx5T3duZXIgCiAgICBwdWJsaWMgewogICAgICAgIGRlbGV0ZSBhcmJpdHJhdGlvbl9ib3VudGllc1txdWVzdGlvbl9pZF07CiAgICAgICAgUmVhbGl0eUNoZWNrQVBJKHJlYWxpdHljaGVjaykuc3VibWl0QW5zd2VyQnlBcmJpdHJhdG9yKHF1ZXN0aW9uX2lkLCBhbnN3ZXIsIGFuc3dlcmVyKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXF1ZXN0IGFyYml0cmF0aW9uLCBmcmVlemluZyB0aGUgcXVlc3Rpb24gdW50aWwgd2Ugc2VuZCBzdWJtaXRBbnN3ZXJCeUFyYml0cmF0b3IKICAgIC8vLyBAZGV2IFRoZSBib3VudHkgY2FuIGJlIHBhaWQgb25seSBpbiBwYXJ0LCBpbiB3aGljaCBjYXNlIHRoZSBsYXN0IHBlcnNvbiB0byBwYXkgd2lsbCBiZSBjb25zaWRlcmVkIHRoZSBwYXllcgogICAgLy8vIFdpbGwgdHJpZ2dlciBhbiBlcnJvciBpZiB0aGUgbm90aWZpY2F0aW9uIGZhaWxzLCBlZyBiZWNhdXNlIHRoZSBxdWVzdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGZpbmFsaXplZAogICAgLy8vIEBwYXJhbSByZWFsaXR5Y2hlY2sgVGhlIFJlYWxpdHlDaGVjayBjb250cmFjdCBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIHF1ZXN0aW9uX2lkIFRoZSBxdWVzdGlvbiBpbiBxdWVzdGlvbgogICAgZnVuY3Rpb24gcmVxdWVzdEFyYml0cmF0aW9uKGFkZHJlc3MgcmVhbGl0eWNoZWNrLCBieXRlczMyIHF1ZXN0aW9uX2lkKSAKICAgIGV4dGVybmFsIHBheWFibGUgcmV0dXJucyAoYm9vbCkgewoKICAgICAgICB1aW50MjU2IGFyYml0cmF0aW9uX2ZlZSA9IGdldERpc3B1dGVGZWUocXVlc3Rpb25faWQpOwogICAgICAgIHJlcXVpcmUoYXJiaXRyYXRpb25fZmVlID4gMCk7CgogICAgICAgIGFyYml0cmF0aW9uX2JvdW50aWVzW3F1ZXN0aW9uX2lkXSArPSBtc2cudmFsdWU7CiAgICAgICAgdWludDI1NiBwYWlkID0gYXJiaXRyYXRpb25fYm91bnRpZXNbcXVlc3Rpb25faWRdOwoKICAgICAgICBpZiAocGFpZCA+PSBhcmJpdHJhdGlvbl9mZWUpIHsKICAgICAgICAgICAgUmVhbGl0eUNoZWNrQVBJKHJlYWxpdHljaGVjaykubm90aWZ5T2ZBcmJpdHJhdGlvblJlcXVlc3QocXVlc3Rpb25faWQsIG1zZy5zZW5kZXIpOwogICAgICAgICAgICBMb2dSZXF1ZXN0QXJiaXRyYXRpb24ocXVlc3Rpb25faWQsIG1zZy52YWx1ZSwgbXNnLnNlbmRlciwgMCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlcXVpcmUoIVJlYWxpdHlDaGVja0FQSShyZWFsaXR5Y2hlY2spLmlzRmluYWxpemVkKHF1ZXN0aW9uX2lkKSk7CiAgICAgICAgICAgIExvZ1JlcXVlc3RBcmJpdHJhdGlvbihxdWVzdGlvbl9pZCwgbXNnLnZhbHVlLCBtc2cuc2VuZGVyLCBhcmJpdHJhdGlvbl9mZWUgLSBwYWlkKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICB9CgogICAgLy8vIEBub3RpY2UgV2l0aGRyYXcgYW55IGFjY3VtdWxhdGVkIGZlZXMgdG8gdGhlIHNwZWNpZmllZCBhZGRyZXNzCiAgICAvLy8gQHBhcmFtIGFkZHIgVGhlIGFkZHJlc3MgdG8gd2hpY2ggdGhlIGJhbGFuY2Ugc2hvdWxkIGJlIHNlbnQKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KGFkZHJlc3MgYWRkcikgCiAgICAgICAgb25seU93bmVyIAogICAgcHVibGljIHsKICAgICAgICBhZGRyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7IAogICAgfQoKICAgIGZ1bmN0aW9uKCkgCiAgICBwdWJsaWMgcGF5YWJsZSB7CiAgICB9CgogICAgLy8vIEBub3RpY2UgV2l0aGRyYXcgYW55IGFjY3VtdWxhdGVkIHF1ZXN0aW9uIGZlZXMgZnJvbSB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaW50byB0aGlzIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIHJlYWxpdHljaGVjayBUaGUgYWRkcmVzcyBvZiB0aGUgUmVhbGl0eSBDaGVjayBjb250cmFjdCBjb250YWluaW5nIHRoZSBmZWVzCiAgICAvLy8gQGRldiBGdW5kcyBjYW4gdGhlbiBiZSBsaWJlcmF0ZWQgZnJvbSB0aGlzIGNvbnRyYWN0IHdpdGggb3VyIHdpdGhkcmF3KCkgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIGNhbGxXaXRoZHJhdyhhZGRyZXNzIHJlYWxpdHljaGVjaykgCiAgICAgICAgb25seU93bmVyIAogICAgcHVibGljIHsKICAgICAgICBSZWFsaXR5Q2hlY2tBUEkocmVhbGl0eWNoZWNrKS53aXRoZHJhdygpOyAKICAgIH0KCn0='.
	

]
