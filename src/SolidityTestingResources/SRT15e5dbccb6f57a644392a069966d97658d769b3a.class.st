Class {
	#name : #SRT15e5dbccb6f57a644392a069966d97658d769b3a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT15e5dbccb6f57a644392a069966d97658d769b3a >> base64 [
	^ ''.
	

]
