Class {
	#name : #SRT06300cec31cf8edf74a17dac79cbc66355113179,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT06300cec31cf8edf74a17dac79cbc66355113179 >> base64 [
	^ ''.
	

]
