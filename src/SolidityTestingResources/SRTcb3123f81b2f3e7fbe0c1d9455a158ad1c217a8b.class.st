Class {
	#name : #SRTcb3123f81b2f3e7fbe0c1d9455a158ad1c217a8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb3123f81b2f3e7fbe0c1d9455a158ad1c217a8b >> base64 [
	^ ''.
	

]
