Class {
	#name : #SRT31fb7577a0f2fa944cd1bf5cb273cba5f2081592,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31fb7577a0f2fa944cd1bf5cb273cba5f2081592 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBSZWRFbnZlbG9wZSB7CgogICAgc3RydWN0IEVudmVsb3BlVHlwZSB7CiAgICAgICAgdWludDI1NiBtYXhOdW1iZXI7CiAgICAgICAgdWludDI1NiBmZWVSYXRlOwogICAgfQogICAgCiAgICBzdHJ1Y3QgRW52ZWxvcGUgewogICAgICAgIGFkZHJlc3MgbWFrZXI7CiAgICAgICAgYWRkcmVzcyBhcmJpdGVyOwogICAgICAgIHVpbnQyNTYgZW52ZWxvcGVUeXBlSWQ7CiAgICAgICAgdWludDI1NiBtaW5WYWx1ZTsKICAgICAgICB1aW50MjU2IHJlbWFpbmluZ1ZhbHVlOwogICAgICAgIHVpbnQyNTYgcmVtYWluaW5nTnVtYmVyOwogICAgICAgIHVpbnQyNTYgd2lsbEV4cGlyZUFmdGVyOwogICAgICAgIGJvb2wgcmFuZG9tOwogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSB0b29rczsKICAgIH0KCiAgICBzdHJ1Y3QgU2V0dGluZ3MgewogICAgICAgIGFkZHJlc3MgYXJiaXRlcjsKICAgICAgICB1aW50MjU2IG1pblZhbHVlOwogICAgfQoKICAgIGV2ZW50IE1hZGUgKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBtYWtlciwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgYXJiaXRlciwKICAgICAgICB1aW50MjU2IGluZGV4ZWQgZW52ZWxvcGVJZCwKICAgICAgICB1aW50MjU2IGVudmVsb3BlVHlwZUlkLAogICAgICAgIHVpbnQyNTYgbWluVmFsdWUsCiAgICAgICAgdWludDI1NiB0b3RhbCwKICAgICAgICB1aW50MjU2IHF1YW50aXR5LAogICAgICAgIHVpbnQyNTYgd2lsbEV4cGlyZUFmdGVyLAogICAgICAgIHVpbnQyNTYgbWluZWRBdCwKICAgICAgICB1aW50MjU2IHJhbmRvbQogICAgKTsKCiAgICBldmVudCBUb29rICgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgdGFrZXIsCiAgICAgICAgdWludDI1NiBpbmRleGVkIGVudmVsb3BlSWQsCiAgICAgICAgdWludDI1NiB2YWx1ZSwKICAgICAgICB1aW50MjU2IG1pbmVkQXQKICAgICk7CgogICAgZXZlbnQgUmVkZWVtZWQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIG1ha2VyLAogICAgICAgIHVpbnQyNTYgaW5kZXhlZCBlbnZlbG9wZUlkLAogICAgICAgIHVpbnQyNTYgdmFsdWUsCiAgICAgICAgdWludDI1NiBtaW5lZEF0CiAgICApOwoKICAgIFNldHRpbmdzIHB1YmxpYyBzZXR0aW5nczsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgdWludDI1NiBwdWJsaWMgYmFsYW5jZU9mRW52ZWxvcGVzOwogICAgCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBlbnZlbG9wZUNvdW50czsKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gRW52ZWxvcGVUeXBlKSBwdWJsaWMgZW52ZWxvcGVUeXBlczsKICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gRW52ZWxvcGUpIHB1YmxpYyBlbnZlbG9wZXM7CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG93bmVyID09IG1zZy5zZW5kZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gcmFuZG9tKCkgdmlldyBwcml2YXRlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBmYWN0b3IgPSBjZWlsKDIgXiAyNTYgLyAxMDApCiAgICAgICAgdWludDI1NiBmYWN0b3IgPSAxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5OwogICAgICAgIGJ5dGVzMzIgYmxvY2tIYXNoID0gYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpOwogICAgICAgIHJldHVybiB1aW50MjU2KHVpbnQyNTYoYmxvY2tIYXNoKSAvIGZhY3Rvcik7CiAgICB9CgogICAgZnVuY3Rpb24gUmVkRW52ZWxvcGUoKSBwdWJsaWMgewogICAgICAgIHNldHRpbmdzID0gU2V0dGluZ3MoCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIDIwMDAwMDAwMDAwMDAwMDAgLy8gbWluVmFsdWUgPSAwLjAwMiBFVEgKICAgICAgICApOwogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRTZXR0aW5ncyhhZGRyZXNzIF9hcmJpdGVyLCB1aW50MjU2IF9taW5WYWx1ZSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgc2V0dGluZ3MuYXJiaXRlciA9IF9hcmJpdGVyOwogICAgICAgIHNldHRpbmdzLm1pblZhbHVlID0gX21pblZhbHVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRPd25lcihhZGRyZXNzIF9vd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBfb3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMge30KCiAgICAvKgogICAgICogdWludDI1NiBfZW52ZWxvcGVUeXBlSWQKICAgICAqIHVpbnQyNTZbMl0gX2RhdGEKICAgICAqICBbMF0gLSBtYXhOdW1iZXIKICAgICAqICBbMV0gLSBmZWVSYXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldEVudmVsb3BlVHlwZSh1aW50MjU2IF9lbnZlbG9wZVR5cGVJZCwgdWludDI1NlsyXSBfZGF0YSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgZW52ZWxvcGVUeXBlc1tfZW52ZWxvcGVUeXBlSWRdLm1heE51bWJlciA9IF9kYXRhWzBdOwogICAgICAgIGVudmVsb3BlVHlwZXNbX2VudmVsb3BlVHlwZUlkXS5mZWVSYXRlID0gX2RhdGFbMV07CiAgICB9CgogICAgLyoKICAgICAqIHVpbnQyNTYgX2VudmVsb3BlSWQKICAgICAqIHVpbnQyNTZbM10gX2RhdGEKICAgICAqICBbMF0gLSBlbnZlbG9wZVR5cGVJZAogICAgICogIFsxXSAtIHF1YW50aXR5OwogICAgICogIFsyXSAtIHdpbGxFeHBpcmVJbjsKICAgICAqICBbM10gLSByYW5kb20KICAgICAqLwogICAgZnVuY3Rpb24gbWFrZSh1aW50MjU2IF9lbnZlbG9wZUlkLCB1aW50MjU2WzRdIF9kYXRhKSBwYXlhYmxlIGV4dGVybmFsIHsKICAgICAgICB1aW50MjU2IGNvdW50ID0gZW52ZWxvcGVDb3VudHNbbXNnLnNlbmRlcl0gKyAxOwogICAgICAgIGlmICh1aW50MjU2KGtlY2NhazI1Nihtc2cuc2VuZGVyLCBjb3VudCkpICE9IF9lbnZlbG9wZUlkKSB7IC8vIOmUmeivr+eahGVudmVsb3BlSWQKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIEVudmVsb3BlVHlwZSBtZW1vcnkgZW52ZWxvcGVUeXBlID0gZW52ZWxvcGVUeXBlc1tfZGF0YVswXV07CiAgICAgICAgaWYgKGVudmVsb3BlVHlwZS5tYXhOdW1iZXIgPCBfZGF0YVsxXSkgeyAvLyBxdWFudGl0eei/h+WkpwogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgdWludDI1NiB0b3RhbCA9ICggbXNnLnZhbHVlICogMTAwMCApIC8gKCBlbnZlbG9wZVR5cGUuZmVlUmF0ZSArIDEwMDAgKTsKICAgICAgICBpZiAodG90YWwgLyBfZGF0YVsxXSA8IHNldHRpbmdzLm1pblZhbHVlKSB7IC8vIHZhbHVl6L+H5bCPCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBFbnZlbG9wZSBtZW1vcnkgZW52ZWxvcGUgPSBFbnZlbG9wZSgKICAgICAgICAgICAgbXNnLnNlbmRlciwgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlcgogICAgICAgICAgICBzZXR0aW5ncy5hcmJpdGVyLCAgICAgICAgICAgICAgIC8vIGFyYml0ZXIKICAgICAgICAgICAgX2RhdGFbMF0sICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnZlbG9wZVR5cGVJZAogICAgICAgICAgICBzZXR0aW5ncy5taW5WYWx1ZSwgICAgICAgICAgICAgIC8vIG1pblZhbHVlCiAgICAgICAgICAgIHRvdGFsLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtYWluaW5nVmFsdWUKICAgICAgICAgICAgX2RhdGFbMV0sICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1haW5pbmdOdW1iZXIKICAgICAgICAgICAgYmxvY2sudGltZXN0YW1wICsgX2RhdGFbMl0sICAgICAvLyB3aWxsRXhwaXJlQWZ0ZXIKICAgICAgICAgICAgX2RhdGFbM10gPiAwICAgICAgICAgICAgICAgICAgICAvLyByYW5kb20KICAgICAgICApOwogICAgICAgIAogICAgICAgIGVudmVsb3Blc1tfZW52ZWxvcGVJZF0gPSBlbnZlbG9wZTsKICAgICAgICBiYWxhbmNlT2ZFbnZlbG9wZXMgKz0gdG90YWw7CiAgICAgICAgZW52ZWxvcGVDb3VudHNbbXNnLnNlbmRlcl0gPSBjb3VudDsKCiAgICAgICAgTWFkZSgKICAgICAgICAgICAgZW52ZWxvcGUubWFrZXIsCiAgICAgICAgICAgIGVudmVsb3BlLmFyYml0ZXIsCiAgICAgICAgICAgIF9lbnZlbG9wZUlkLAogICAgICAgICAgICBlbnZlbG9wZS5lbnZlbG9wZVR5cGVJZCwKICAgICAgICAgICAgZW52ZWxvcGUubWluVmFsdWUsCiAgICAgICAgICAgIGVudmVsb3BlLnJlbWFpbmluZ1ZhbHVlLAogICAgICAgICAgICBlbnZlbG9wZS5yZW1haW5pbmdOdW1iZXIsCiAgICAgICAgICAgIGVudmVsb3BlLndpbGxFeHBpcmVBZnRlciwKICAgICAgICAgICAgYmxvY2sudGltZXN0YW1wLAogICAgICAgICAgICBlbnZlbG9wZS5yYW5kb20gPyAxIDogMAogICAgICAgICk7CiAgICB9CgogICAgLyoKICAgICAqIHVpbnQyNTYgX2VudmVsb3BlSWQKICAgICAqIHVpbnQyNTZbNF0gX2RhdGEKICAgICAqICBbMF0gLSB3aWxsRXhwaXJlQWZ0ZXIKICAgICAqICBbMV0gLSB2CiAgICAgKiAgWzJdIC0gcgogICAgICogIFszXSAtIHMKICAgICAqLwogICAgZnVuY3Rpb24gdGFrZSh1aW50MjU2IF9lbnZlbG9wZUlkLCB1aW50MjU2WzRdIF9kYXRhKSBleHRlcm5hbCB7CiAgICAgICAgLy8g6aqM6K+B57qi5YyFCiAgICAgICAgRW52ZWxvcGUgc3RvcmFnZSBlbnZlbG9wZSA9IGVudmVsb3Blc1tfZW52ZWxvcGVJZF07CiAgICAgICAgaWYgKGVudmVsb3BlLndpbGxFeHBpcmVBZnRlciA8IGJsb2NrLnRpbWVzdGFtcCkgeyAvLyDnuqLljIXov4fmnJ8KICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIGlmIChlbnZlbG9wZS5yZW1haW5pbmdOdW1iZXIgPT0gMCkgeyAvLyDmiqLlrozkuoYKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIGlmIChlbnZlbG9wZS50b29rc1ttc2cuc2VuZGVyXSkgeyAvLyDmiqLov4fkuoYKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIC8vIOmqjOivgWFyYml0ZXLnmoTnrb7lkI0KICAgICAgICBpZiAoX2RhdGFbMF0gPCBibG9jay50aW1lc3RhbXApIHsgLy8g562+5ZCN6L+H5pyfCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KICAgICAgICBpZiAoZW52ZWxvcGUuYXJiaXRlciAhPSBlY3JlY292ZXIoa2VjY2FrMjU2KF9lbnZlbG9wZUlkLCBfZGF0YVswXSwgbXNnLnNlbmRlciksIHVpbnQ4KF9kYXRhWzFdKSwgYnl0ZXMzMihfZGF0YVsyXSksIGJ5dGVzMzIoX2RhdGFbM10pKSkgeyAvLyDnrb7lkI3plJnor68KICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHVpbnQyNTYgdmFsdWUgPSAwOwogICAgICAgIGlmICghZW52ZWxvcGUucmFuZG9tKSB7CiAgICAgICAgICAgIHZhbHVlID0gZW52ZWxvcGUucmVtYWluaW5nVmFsdWUgLyBlbnZlbG9wZS5yZW1haW5pbmdOdW1iZXI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGVudmVsb3BlLnJlbWFpbmluZ051bWJlciA9PSAxKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVudmVsb3BlLnJlbWFpbmluZ1ZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdWludDI1NiBtYXhWYWx1ZSA9IGVudmVsb3BlLnJlbWFpbmluZ1ZhbHVlIC0gKGVudmVsb3BlLnJlbWFpbmluZ051bWJlciAtIDEpICogZW52ZWxvcGUubWluVmFsdWU7CiAgICAgICAgICAgICAgICB1aW50MjU2IGF2Z1ZhbHVlID0gZW52ZWxvcGUucmVtYWluaW5nVmFsdWUgLyBlbnZlbG9wZS5yZW1haW5pbmdOdW1iZXIgKiAyOwogICAgICAgICAgICAgICAgdmFsdWUgPSBhdmdWYWx1ZSA8IG1heFZhbHVlID8gYXZnVmFsdWUgKiByYW5kb20oKSAvIDEwMCA6IG1heFZhbHVlICogcmFuZG9tKCkgLyAxMDA7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIDwgZW52ZWxvcGUubWluVmFsdWUgPyBlbnZlbG9wZS5taW5WYWx1ZSA6IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBlbnZlbG9wZS5yZW1haW5pbmdWYWx1ZSAtPSB2YWx1ZTsKICAgICAgICBlbnZlbG9wZS5yZW1haW5pbmdOdW1iZXIgLT0gMTsKICAgICAgICBlbnZlbG9wZS50b29rc1ttc2cuc2VuZGVyXSA9IHRydWU7CiAgICAgICAgYmFsYW5jZU9mRW52ZWxvcGVzIC09IHZhbHVlOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIodmFsdWUpOwoKICAgICAgICBUb29rKAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBfZW52ZWxvcGVJZCwKICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgIGJsb2NrLnRpbWVzdGFtcAogICAgICAgICk7CiAgICB9CgogICAgLyoKICAgICAqIHVpbnQyNTYgX2VudmVsb3BlSWQKICAgICAqLwogICAgZnVuY3Rpb24gcmVkZWVtKHVpbnQyNTYgX2VudmVsb3BlSWQpIGV4dGVybmFsIHsKICAgICAgICBFbnZlbG9wZSBzdG9yYWdlIGVudmVsb3BlID0gZW52ZWxvcGVzW19lbnZlbG9wZUlkXTsKICAgICAgICBpZiAoZW52ZWxvcGUud2lsbEV4cGlyZUFmdGVyID49IGJsb2NrLnRpbWVzdGFtcCkgeyAvLyDlsJrmnKrlpLHmlYgKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIGlmIChlbnZlbG9wZS5yZW1haW5pbmdWYWx1ZSA9PSAwKSB7IC8vIOayoemSsQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgaWYgKGVudmVsb3BlLm1ha2VyICE9IG1zZy5zZW5kZXIpIHsgLy8g5LiN5pivbWFrZXIKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICB1aW50MjU2IHZhbHVlID0gZW52ZWxvcGUucmVtYWluaW5nVmFsdWU7CiAgICAgICAgZW52ZWxvcGUucmVtYWluaW5nVmFsdWUgPSAwOwogICAgICAgIGVudmVsb3BlLnJlbWFpbmluZ051bWJlciA9IDA7CiAgICAgICAgYmFsYW5jZU9mRW52ZWxvcGVzIC09IHZhbHVlOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIodmFsdWUpOwoKICAgICAgICBSZWRlZW1lZCgKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgX2VudmVsb3BlSWQsCiAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICBibG9jay50aW1lc3RhbXAKICAgICAgICApOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFBhaWQodWludDI1NiBhbW91bnQpIG9ubHlPd25lciBleHRlcm5hbCB7CiAgICAgICAgdWludDI1NiBtYXhBbW91bnQgPSB0aGlzLmJhbGFuY2UgLSBiYWxhbmNlT2ZFbnZlbG9wZXM7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnQgPCBtYXhBbW91bnQgPyBhbW91bnQgOiBtYXhBbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNheUdvb2RCeWUoKSBvbmx5T3duZXIgZXh0ZXJuYWwgewogICAgICAgIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
