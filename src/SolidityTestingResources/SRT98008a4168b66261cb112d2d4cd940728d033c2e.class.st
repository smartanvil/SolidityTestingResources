Class {
	#name : #SRT98008a4168b66261cb112d2d4cd940728d033c2e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT98008a4168b66261cb112d2d4cd940728d033c2e >> base64 [
	^ ''.
	

]
