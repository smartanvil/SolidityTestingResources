Class {
	#name : #SRTec34d45fde0836d50ac8438f8442002b588435c0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTec34d45fde0836d50ac8438f8442002b588435c0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKY29udHJhY3QgQk1JQ09BZmZpbGlhdGVQcm9ncmFtbSB7CiAgICBtYXBwaW5nIChzdHJpbmcgPT4gYWRkcmVzcykgcGFydG5lcnNQcm9tbzsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcmVmZXJyYWxzOwoKICAgIHN0cnVjdCBpdGVtUGFydG5lcnMgewogICAgICAgIHVpbnQyNTYgYmFsYW5jZTsKICAgICAgICBzdHJpbmcgcHJvbW87CiAgICAgICAgYm9vbCBjcmVhdGU7CiAgICB9CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGl0ZW1QYXJ0bmVycykgcGFydG5lcnNJbmZvOwoKICAgIHVpbnQyNTYgcHVibGljIHJlZl9wZXJjZW50ID0gMTAwOyAvLzEgPSAwLjAxJSwgMTAwMDAgPSAxMDAlCgoKICAgIHN0cnVjdCBpdGVtSGlzdG9yeSB7CiAgICB1aW50MjU2IGRhdGV0aW1lOwogICAgYWRkcmVzcyByZWZlcnJhbDsKICAgIHVpbnQyNTYgYW1vdW50X2ludmVzdDsKICAgIH0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBpdGVtSGlzdG9yeVtdKSBoaXN0b3J5OwoKICAgIHVpbnQyNTYgcHVibGljIGFtb3VudF9yZWZlcnJhbF9pbnZlc3Q7CgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBjb250cmFjdFByZUlDTzsKICAgIGFkZHJlc3MgcHVibGljIGNvbnRyYWN0SUNPOwoKICAgIGZ1bmN0aW9uIEJNSUNPQWZmaWxpYXRlUHJvZ3JhbW0oKXsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgY29udHJhY3RQcmVJQ08gPSBhZGRyZXNzKDB4MCk7CiAgICAgICAgY29udHJhY3RJQ08gPSBhZGRyZXNzKDB4MCk7CiAgICB9CgogICAgbW9kaWZpZXIgaXNPd25lcigpCiAgICB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gc3RyX2xlbmd0aChzdHJpbmcgeCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGJ5dGVzMzIgc3RyOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICBzdHIgOj0gbWxvYWQoYWRkKHgsIDMyKSkKICAgICAgICB9CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJ5dGVzU3RyaW5nID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICB1aW50MjU2IGNoYXJDb3VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGogPSAwOyBqIDwgMzI7IGorKykgewogICAgICAgICAgICBieXRlIGNoYXIgPSBieXRlKGJ5dGVzMzIodWludChzdHIpICogMiAqKiAoOCAqIGopKSk7CiAgICAgICAgICAgIGlmIChjaGFyICE9IDApIHsKICAgICAgICAgICAgICAgIGJ5dGVzU3RyaW5nW2NoYXJDb3VudF0gPSBjaGFyOwogICAgICAgICAgICAgICAgY2hhckNvdW50Kys7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNoYXJDb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIG5ld19vd25lcikgaXNPd25lciB7CiAgICAgICAgYXNzZXJ0KG5ld19vd25lciE9YWRkcmVzcygweDApKTsKICAgICAgICBhc3NlcnQobmV3X293bmVyIT1hZGRyZXNzKHRoaXMpKTsKCiAgICAgICAgb3duZXIgPSBuZXdfb3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0UmVmZXJyYWxQZXJjZW50KHVpbnQyNTYgbmV3X3BlcmNlbnQpIGlzT3duZXIgewogICAgICAgIHJlZl9wZXJjZW50ID0gbmV3X3BlcmNlbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Q29udHJhY3RQcmVJQ08oYWRkcmVzcyBuZXdfYWRkcmVzcykgaXNPd25lciB7CiAgICAgICAgYXNzZXJ0KGNvbnRyYWN0UHJlSUNPPT1hZGRyZXNzKDB4MCkpOwogICAgICAgIGFzc2VydChuZXdfYWRkcmVzcyE9YWRkcmVzcygweDApKTsKICAgICAgICBhc3NlcnQobmV3X2FkZHJlc3MhPWFkZHJlc3ModGhpcykpOwoKICAgICAgICBjb250cmFjdFByZUlDTyA9IG5ld19hZGRyZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENvbnRyYWN0SUNPKGFkZHJlc3MgbmV3X2FkZHJlc3MpIGlzT3duZXIgewogICAgICAgIGFzc2VydChjb250cmFjdElDTz09YWRkcmVzcygweDApKTsKICAgICAgICBhc3NlcnQobmV3X2FkZHJlc3MhPWFkZHJlc3MoMHgwKSk7CiAgICAgICAgYXNzZXJ0KG5ld19hZGRyZXNzIT1hZGRyZXNzKHRoaXMpKTsKCiAgICAgICAgY29udHJhY3RJQ08gPSBuZXdfYWRkcmVzczsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQcm9tb1RvUGFydG5lcihzdHJpbmcgcHJvbW8pIHsKICAgICAgICBhc3NlcnQocGFydG5lcnNQcm9tb1twcm9tb109PWFkZHJlc3MoMHgwKSk7CgogICAgICAgIGFzc2VydChzdHJfbGVuZ3RoKHByb21vKT4wICYmIHN0cl9sZW5ndGgocHJvbW8pPD02KTsKCiAgICAgICAgcGFydG5lcnNQcm9tb1twcm9tb10gPSBtc2cuc2VuZGVyOwogICAgICAgIHBhcnRuZXJzSW5mb1ttc2cuc2VuZGVyXS5iYWxhbmNlID0gMDsKICAgICAgICBwYXJ0bmVyc0luZm9bbXNnLnNlbmRlcl0ucHJvbW8gPSBwcm9tbzsKICAgICAgICBwYXJ0bmVyc0luZm9bbXNnLnNlbmRlcl0uY3JlYXRlID0gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja1Byb21vKHN0cmluZyBwcm9tbykgY29uc3RhbnQgcmV0dXJucyhib29sKXsKICAgICAgICByZXR1cm4gcGFydG5lcnNQcm9tb1twcm9tb10hPWFkZHJlc3MoMHgwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjX3BhcnRuZXJQZXJjZW50KHVpbnQyNTYgcmVmX2Ftb3VudF9pbnZlc3QpIGNvbnN0YW50IGludGVybmFsIHJldHVybnModWludDE2IHBlcmNlbnQpewogICAgICAgIHBlcmNlbnQgPSAwOwogICAgICAgIGlmKHJlZl9hbW91bnRfaW52ZXN0ID4gMCl7CiAgICAgICAgICAgIGlmKHJlZl9hbW91bnRfaW52ZXN0IDwgMiBldGhlcil7CiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMTAwOyAvLzEgPSAwLjAxJSwgMTAwMDAgPSAxMDAlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihyZWZfYW1vdW50X2ludmVzdCA+PSAyIGV0aGVyICYmIHJlZl9hbW91bnRfaW52ZXN0IDwgMyBldGhlcil7CiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMjAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYocmVmX2Ftb3VudF9pbnZlc3QgPj0gMyBldGhlciAmJiByZWZfYW1vdW50X2ludmVzdCA8IDQgZXRoZXIpewogICAgICAgICAgICAgICAgcGVyY2VudCA9IDMwMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmKHJlZl9hbW91bnRfaW52ZXN0ID49IDQgZXRoZXIgJiYgcmVmX2Ftb3VudF9pbnZlc3QgPCA1IGV0aGVyKXsKICAgICAgICAgICAgICAgIHBlcmNlbnQgPSA0MDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihyZWZfYW1vdW50X2ludmVzdCA+PSA1IGV0aGVyKXsKICAgICAgICAgICAgICAgIHBlcmNlbnQgPSA1MDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFydG5lckluZm8oYWRkcmVzcyBwYXJ0bmVyX2FkZHJlc3MpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMoc3RyaW5nIHByb21vLCB1aW50MjU2IGJhbGFuY2UsIHVpbnQyNTZbXSBoX2RhdGV0aW1lLCB1aW50MjU2W10gaF9pbnZlc3QsIGFkZHJlc3NbXSBoX3JlZmVycmFscyl7CiAgICAgICAgaWYocGFydG5lcl9hZGRyZXNzICE9IGFkZHJlc3MoMHgwKSAmJiBwYXJ0bmVyc0luZm9bcGFydG5lcl9hZGRyZXNzXS5jcmVhdGUpewogICAgICAgICAgICBwcm9tbyA9IHBhcnRuZXJzSW5mb1twYXJ0bmVyX2FkZHJlc3NdLnByb21vOwogICAgICAgICAgICBiYWxhbmNlID0gcGFydG5lcnNJbmZvW3BhcnRuZXJfYWRkcmVzc10uYmFsYW5jZTsKCiAgICAgICAgICAgIGhfZGF0ZXRpbWUgPSBuZXcgdWludDI1NltdKGhpc3RvcnlbcGFydG5lcl9hZGRyZXNzXS5sZW5ndGgpOwogICAgICAgICAgICBoX2ludmVzdCA9IG5ldyB1aW50MjU2W10oaGlzdG9yeVtwYXJ0bmVyX2FkZHJlc3NdLmxlbmd0aCk7CiAgICAgICAgICAgIGhfcmVmZXJyYWxzID0gbmV3IGFkZHJlc3NbXShoaXN0b3J5W3BhcnRuZXJfYWRkcmVzc10ubGVuZ3RoKTsKCiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGhpc3RvcnlbcGFydG5lcl9hZGRyZXNzXS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICBoX2RhdGV0aW1lW2ldID0gaGlzdG9yeVtwYXJ0bmVyX2FkZHJlc3NdW2ldLmRhdGV0aW1lOwogICAgICAgICAgICAgICAgaF9pbnZlc3RbaV0gPSBoaXN0b3J5W3BhcnRuZXJfYWRkcmVzc11baV0uYW1vdW50X2ludmVzdDsKICAgICAgICAgICAgICAgIGhfcmVmZXJyYWxzW2ldID0gaGlzdG9yeVtwYXJ0bmVyX2FkZHJlc3NdW2ldLnJlZmVycmFsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHByb21vID0gJy0xJzsKICAgICAgICAgICAgYmFsYW5jZSA9IDA7CiAgICAgICAgICAgIGhfZGF0ZXRpbWUgPSBuZXcgdWludDI1NltdKDApOwogICAgICAgICAgICBoX2ludmVzdCA9IG5ldyB1aW50MjU2W10oMCk7CiAgICAgICAgICAgIGhfcmVmZXJyYWxzID0gbmV3IGFkZHJlc3NbXSgwKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFydG5lckluZm9fZm9yX1BhcnRuZXIoYnl0ZXMzMiBoYXNoLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgY29uc3RhbnQgcmV0dXJucyhzdHJpbmcsIHVpbnQyNTYsIHVpbnQyNTZbXSwgdWludDI1NltdLCBhZGRyZXNzW10pewogICAgICAgIGFkZHJlc3MgcGFydG5lcl9hZGRyZXNzID0gZWNyZWNvdmVyKGhhc2gsIHYsIHIsIHMpOwogICAgICAgIHJldHVybiBwYXJ0bmVySW5mbyhwYXJ0bmVyX2FkZHJlc3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIHBhcnRuZXJJbmZvX2Zvcl9Pd25lciAoYWRkcmVzcyBwYXJ0bmVyKSBpc093bmVyIGNvbnN0YW50IHJldHVybnMoc3RyaW5nLCB1aW50MjU2LCB1aW50MjU2W10sIHVpbnQyNTZbXSwgYWRkcmVzc1tdKXsKICAgICAgICByZXR1cm4gcGFydG5lckluZm8ocGFydG5lcik7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkX3JlZmVycmFsKGFkZHJlc3MgcmVmZXJyYWwsIHN0cmluZyBwcm9tbywgdWludDI1NiBhbW91bnQpIGV4dGVybmFsIHJldHVybnMoYWRkcmVzcyBwYXJ0bmVyLCB1aW50MjU2IHBfcGFydG5lciwgdWludDI1NiBwX3JlZmVycmFsKXsKICAgICAgICBwX3BhcnRuZXIgPSAwOwogICAgICAgIHBfcmVmZXJyYWwgPSAwOwogICAgICAgIHBhcnRuZXIgPSBhZGRyZXNzKDB4MCk7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gY29udHJhY3RQcmVJQ08gfHwgbXNnLnNlbmRlciA9PSBjb250cmFjdElDTyl7CiAgICAgICAgICAgIGlmKHBhcnRuZXJzUHJvbW9bcHJvbW9dICE9IGFkZHJlc3MoMHgwKSAmJiBwYXJ0bmVyc1Byb21vW3Byb21vXSAhPSByZWZlcnJhbCl7CiAgICAgICAgICAgICAgICBwYXJ0bmVyID0gcGFydG5lcnNQcm9tb1twcm9tb107CiAgICAgICAgICAgICAgICByZWZlcnJhbHNbcmVmZXJyYWxdICs9IGFtb3VudDsKICAgICAgICAgICAgICAgIGFtb3VudF9yZWZlcnJhbF9pbnZlc3QgKz0gYW1vdW50OwogICAgICAgICAgICAgICAgcGFydG5lcnNJbmZvW3BhcnRuZXJzUHJvbW9bcHJvbW9dXS5iYWxhbmNlICs9IGFtb3VudDsKICAgICAgICAgICAgICAgIGhpc3RvcnlbcGFydG5lcnNQcm9tb1twcm9tb11dLnB1c2goaXRlbUhpc3Rvcnkobm93LCByZWZlcnJhbCwgYW1vdW50KSk7CiAgICAgICAgICAgICAgICBwX3BhcnRuZXIgPSAoYW1vdW50KnVpbnQyNTYoY2FsY19wYXJ0bmVyUGVyY2VudChhbW91bnQpKSkvMTAwMDA7CiAgICAgICAgICAgICAgICBwX3JlZmVycmFsID0gKGFtb3VudCpyZWZfcGVyY2VudCkvMTAwMDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIC8qZGVsZXRlIGZ1bmN0aW9uIGJlZm9yZSByZWxlYXNlIGNvbnRyYWN0Ki8KICAgIGZ1bmN0aW9uIGtpbGwoKSBpc093bmVyIHsKICAgICAgICBzZWxmZGVzdHJ1Y3QobXNnLnNlbmRlcik7CiAgICB9Cn0='.
	

]
