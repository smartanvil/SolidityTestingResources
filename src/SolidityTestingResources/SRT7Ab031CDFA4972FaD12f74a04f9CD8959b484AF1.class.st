Class {
	#name : #SRT7Ab031CDFA4972FaD12f74a04f9CD8959b484AF1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7Ab031CDFA4972FaD12f74a04f9CD8959b484AF1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKgogKiBEZXZlbG9wZWQgYnkgQjJMYWIsIDIwMTgKICogU21hcnQgQ29udHJhY3QgZm9yIFRva2VuKyAobGFiZWxlZCB0b2tlbnMpIGFuZCBJZGVudGl0eSBNYW5hZ2VtZW50CiAqIFZlcnNpb24gMS4wCiAqLwogCmNvbnRyYWN0IElkZW50aXR5QmFzZXsKICAgIAoJLy9CYXNpYyBEYXRhIGZvciBlYWNoIFRva2VuLUhvbGRlcgogICAgc3RydWN0IERhdGF7CgkKICAgICAgICBieXRlczMyIGJpb21ldHJpY0RhdGE7CiAgICAgICAgc3RyaW5nIG5hbWU7CiAgICAgICAgc3RyaW5nIHN1cm5hbWU7CiAgICAgICAgYm9vbCBpc0VuYWJsZWQ7CgkJCiAgICB9CiAgICAKCS8vSWRlbnRpdHkgTWFwCgltYXBwaW5nKGFkZHJlc3MgPT4gRGF0YSkgaWRlbnRpdGllczsKICAgCiAgICAvKgoJICogUGFyYW1zOiBhZGRyZXNzCgkgKiBSZXR1cm46IFRydWUgKGlmIHRoZSBhZGRyZXNzIGlzIGVuYWJsZWQpIG9yIEZhbHNlIChvdGhlcndpc2UpCgkgKi8KCWZ1bmN0aW9uIGlzSWRlbnRpdHkoYWRkcmVzcyBfc2VuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zKGJvb2wpewoJCgkJcmV0dXJuIGlkZW50aXRpZXNbX3NlbmRlcl0uaXNFbmFibGVkOwoJCQoJfSAgIAogICAKCS8qCiAgICAgKiBQYXJhbXM6IGJ5dGVzMzIsIHN0cmluZywgc3RyaW5nCiAgICAgKiBSZXR1cm46IFRydWUgKGlmIHRoZSBpZGVudGl0eSBoYXMgYmVlbiBzZXQgY29ycmVjdGx5KSBvciBGYWxzZSAoaWYgdGhlIGlkZW50aXR5IGFscmVhZHkgZXhpc3RzKQogICAgICovICAgCiAgICBmdW5jdGlvbiBzZXRNeUlkZW50aXR5KGJ5dGVzMzIgX2Jpb21ldHJpY0RhdGEsIHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zdXJuYW1lKSBwdWJsaWMgcmV0dXJucyhib29sKXsKICAgIAoJCWlmKGlkZW50aXRpZXNbbXNnLnNlbmRlcl0uYmlvbWV0cmljRGF0YSA9PSAiIil7CgkJCQoJCQlEYXRhIHN0b3JhZ2UgaWRlbnRpdHkgPSBpZGVudGl0aWVzW21zZy5zZW5kZXJdOwoJCQlpZGVudGl0eS5iaW9tZXRyaWNEYXRhID0gX2Jpb21ldHJpY0RhdGE7CiAgICAgICAgICAgIGlkZW50aXR5Lm5hbWUgPSBfbmFtZTsKICAgICAgICAgICAgaWRlbnRpdHkuc3VybmFtZSA9IF9zdXJuYW1lOwogICAgICAgICAgICBpZGVudGl0eS5pc0VuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCQkJCiAgICAgICAgfWVsc2V7CgkJCgkJCXJldHVybiBmYWxzZTsKCQkJCiAgICAgICAgfSAgIAoJCQoJfQogICAKCS8qCiAgICAgKlBhcmFtczogYnl0ZXMzMgogICAgICpSZXR1cm46IFRydWUgKGlmIHRoZSBCaW9tZXRyaWMgRGF0YSBtYXRjaGVzIHdpdGggdGhlIHN0b3JlZCBvbmUpIG9yIEZhbHNlIChvdGhlcndpc2UpCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrSWRlbnRpdHkoYnl0ZXMzMiBfYmlvbWV0cmljRGF0YSkgcHVibGljIHJldHVybnMoYm9vbCl7CiAgICAgICAgCiAgICAgICAgaWYoaWRlbnRpdGllc1ttc2cuc2VuZGVyXS5iaW9tZXRyaWNEYXRhID09IF9iaW9tZXRyaWNEYXRhKXsKCQkJCgkJCWVtaXQgVW5sb2NrRXZlbnQobXNnLnNlbmRlciwgaWRlbnRpdGllc1ttc2cuc2VuZGVyXS5uYW1lLCBpZGVudGl0aWVzW21zZy5zZW5kZXJdLnN1cm5hbWUsIG5vdywgdHJ1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwoJCQkKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgCgkJCWVtaXQgVW5sb2NrRXZlbnQobXNnLnNlbmRlciwgaWRlbnRpdGllc1ttc2cuc2VuZGVyXS5uYW1lLCBpZGVudGl0aWVzW21zZy5zZW5kZXJdLnN1cm5hbWUsIG5vdywgZmFsc2UpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgkJCQogICAgICAgIH0KICAgICAgIAoJfSAgCgkKCS8vRXZlbnQgdG8gbm90aWZ5IHJlc3VsdHMgb2YgZWFjaCBpbnRlcmFjdGlvbiB3aXRoIHRoZSBjaGVja0lkZW50aXR5IGZ1bmN0aW9uCglldmVudCBVbmxvY2tFdmVudChhZGRyZXNzIHNlbmRlciwgc3RyaW5nIG5hbWUsIHN0cmluZyBzdXJuYW1lLCB1aW50MjU2IHRpbWVzdGFtcCwgYm9vbCByZXN1bHQpOyAgCgp9CgoKY29udHJhY3QgSWRlbnRpdHlFeHRlbmRlZCBpcyBJZGVudGl0eUJhc2V7ICAKICAgIAoJLy9BZGRpdGlvbmFsIERhdGEgRXh0ZW5zaW9uCglzdHJ1Y3QgRGF0YUV4dGVuZGVkewoJCiAgICAgICAgYm9vbCB1c2FQZXJtaXNzaW9uOwoJCWJvb2wgZXVQZXJtaXNzaW9uOwogICAgICAgIGJvb2wgY2hpbmFQZXJtaXNzaW9uOwoJCQogICAgfQogICAgCgkvL01hcCBvZiBFeHRlbmRlZCBEYXRhIElkZW50aXRpZXMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBEYXRhRXh0ZW5kZWQpIGlkZW50aXRpZXNFeHRlbmRlZDsgICAgCiAgIAoJLyoKCSAqUGFyYW1zOiBib29sLCBib29sLCBib29sCgkgKlJldHVybjogbnVsbAoJICpUT0RPOiBpbXBsZW1lbnQgcGVybWlzc2lvbiBwb2xpY2llcwoJICovCiAgICBmdW5jdGlvbiBzZXRJZGVudGl0eUV4dGVuZGVkKGJvb2wgX3VzYVBlcm1pc3Npb24sIGJvb2wgX2V1UGVybWlzc2lvbiwgYm9vbCBfY2hpbmFQZXJtaXNzaW9uKSBwdWJsaWMgewogICAgICAgIAogICAgICAgIERhdGFFeHRlbmRlZCBzdG9yYWdlIGRhdGFFeHRlbmRlZCA9IGlkZW50aXRpZXNFeHRlbmRlZFttc2cuc2VuZGVyXTsKICAgICAgICBkYXRhRXh0ZW5kZWQudXNhUGVybWlzc2lvbiA9IF91c2FQZXJtaXNzaW9uOwogICAgICAgIGRhdGFFeHRlbmRlZC5ldVBlcm1pc3Npb24gPSBfZXVQZXJtaXNzaW9uOwogICAgICAgIGRhdGFFeHRlbmRlZC5jaGluYVBlcm1pc3Npb24gPSBfY2hpbmFQZXJtaXNzaW9uOwoJCQogICAgfQogICAgCn0KCgpjb250cmFjdCBCMkxhYl9Ub2tlblBsdXN7CgoJLy9Ub2tlbiBEYXRhCglzdHJpbmcgY29uc3RhbnQgcHVibGljIHRva2VuTmFtZSA9ICJORlQgQjJMQUIiOwoJc3RyaW5nIGNvbnN0YW50IHB1YmxpYyB0b2tlblN5bWJvbCA9ICJCMkwiOwoJYWRkcmVzcyBwdWJsaWMgY29udHJhY3RPd25lcjsKCXVpbnQyNTYgY29uc3RhbnQgcHVibGljIHRvdGFsVG9rZW5zID0gMTAwMDAwMDsKCXVpbnQyNTYgcHVibGljIGlzc3VlZFRva2VucyA9IDA7Cgl1aW50MjU2IHB1YmxpYyBwcmljZSA9IDEwMDAwMDAwMDAgd2VpOwoJCgkvL1NtYXJ0IENvbnRyYWN0IGFkZHJlc3MgZm9yIElkZW50aXR5IE1hbmFnZW1lbnQKCWFkZHJlc3MgcHVibGljIGlkZW50aXR5RXRoQWRkcmVzczsKICAgCgkvL0JhbGFuY2VzIE1hcAoJbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsKICAgCgkvL093bmVycyBNYXAKCW1hcHBpbmcodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgdG9rZW5Pd25lcnM7CgkKCS8vQWRkaXRpb25hbCBEYXRhCglzdHJ1Y3QgVG9rZW5EYXRhewoJICAgIAoJICAgIGJ5dGVzOCBkYXRhQTsKCSAgICBieXRlczggZGF0YUI7CgkgICAgYnl0ZXM4IGRhdGFDOwoJICAgIC8vLi4uCgkgICAgCgl9CgkKCS8vRGF0YSBUb2tlbiBNYXAKCW1hcHBpbmcodWludDI1NiA9PiBUb2tlbkRhdGEpIHB1YmxpYyB0b2tlbkluZm87CgkKCS8vQ29uc3RydWN0b3I6IFNldCB0aGUgQ29udHJhY3QgT3duZXIgYW5kIElkZW50aXR5RXRoQWRkcmVzcwoJZnVuY3Rpb24gQjJMYWJfVG9rZW5QbHVzKGFkZHJlc3MgX2V0aEFkZHJlc3MpIHB1YmxpYyB7CgkKCQljb250cmFjdE93bmVyID0gbXNnLnNlbmRlcjsKCQlpZGVudGl0eUV0aEFkZHJlc3MgPSBfZXRoQWRkcmVzczsKCQkKCX0KCQoJLy9DaGVjayBpZiB0aGUgc2VuZGVyIGlzIHRoZSBjb250cmFjdCBvd25lcgogICAgbW9kaWZpZXIgaXNDb250cmFjdE93bmVyKCl7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyYWN0T3duZXIpOwogICAgICAgIF87CiAgICAgICAgCiAgICB9CiAgICAKICAgIC8qCiAgICAgKlBhcmFtczogYWRkcmVzcwoJICpSZXR1cm46IG51bGwKCSAqLwogICAgZnVuY3Rpb24gY2hhbmdlSWRlbnRpdHlFdGhBZGRyZXNzKGFkZHJlc3MgX2V0aEFkZHJlc3MpIHB1YmxpYyBpc0NvbnRyYWN0T3duZXJ7CgkKICAgICAgICBpZGVudGl0eUV0aEFkZHJlc3MgPSBfZXRoQWRkcmVzczsKCQkKICAgIH0KICAgIAogICAgLy9DaGVjayBpZiAiYWRkcmVzcyBfYSIgaXMgYW4gaWRlbnRpdHkgaW4gdGhlIElkZW50aXR5RXRoQWRkcmVzcyBDb250cmFjdAoJbW9kaWZpZXIgY2hlY2tJc0lkZW50aXR5KGFkZHJlc3MgX2EpewogICAgICAgCiAgICAgICAgSWRlbnRpdHlCYXNlIGkgPSBJZGVudGl0eUJhc2UoaWRlbnRpdHlFdGhBZGRyZXNzKTsKICAgICAgICAKCQlyZXF1aXJlKGkuaXNJZGVudGl0eShfYSkpOwoJCV87CgkJCgl9IAogICAKICAJLyoKICAgICAqUGFyYW1zOiBudWxsCiAgICAgKlJldHVybjogRXJyb3IgKGlmIHRoZSBzZW5kZXIgZG9lc24ndCBtZWV0IHRoZSByZXF1aXJlbWVudHMpIG9yIFRva2VucyAob3RoZXJ3aXNlKQogICAgICovCglmdW5jdGlvbiBidXlUb2tlbnMoKSBwYXlhYmxlIHB1YmxpYyBjaGVja0lzSWRlbnRpdHkobXNnLnNlbmRlcil7CgkKCQlyZXF1aXJlKG1zZy52YWx1ZSA+IDApOwoJCXVpbnQyNTYgbnVtYmVyVG9rZW5zID0gbXNnLnZhbHVlIC8gcHJpY2U7CgkJdWludDI1NiByZWRlbGl2ZXJ5ID0gIG1zZy52YWx1ZSAlIHByaWNlOwoJCXJlcXVpcmUobnVtYmVyVG9rZW5zICE9IDApOwoJCXJlcXVpcmUobnVtYmVyVG9rZW5zIDw9IDEwMCk7CgkJcmVxdWlyZSgoaXNzdWVkVG9rZW5zK251bWJlclRva2VucykgPD0gdG90YWxUb2tlbnMpOwoJCQoJCWZvcih1aW50MjU2IGkgPSAwOyBpIDwgbnVtYmVyVG9rZW5zOyBpKyspewoJCQoJCQlpc3N1ZWRUb2tlbnMrKzsKCQkJdG9rZW5Pd25lcnNbaXNzdWVkVG9rZW5zXSA9IG1zZy5zZW5kZXI7CgkJCWVtaXQgVHJhbnNmZXIoY29udHJhY3RPd25lciwgbXNnLnNlbmRlciwgaXNzdWVkVG9rZW5zKTsKCQkJCgkJfQoJCQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG51bWJlclRva2VuczsKCQltc2cuc2VuZGVyLnRyYW5zZmVyKHJlZGVsaXZlcnkpOwoJCQoJfSAgCiAgIAoJLyoKICAgICAqUGFyYW1zOiBhZGRyZXNzLCB1aW50MjU2W10KICAgICAqUmV0dXJuOiBFcnJvciAoaWYgdGhlIHNlbmRlciBhbmQgdGhlIHJlY2lwaWVudCBkb2Vzbid0IG1lZXQgdGhlIHJlcXVpcmVtZW50cykgb3IgVG9rZW4gVHJhbnNmZXIgKG90aGVyd2lzZSkKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlbnMoYWRkcmVzcyBfdG8sIHVpbnQyNTZbXSBfdG9rZW5JZCkgcHVibGljIGNoZWNrSXNJZGVudGl0eShtc2cuc2VuZGVyKSBjaGVja0lzSWRlbnRpdHkoX3RvKXsKCQkKCQlyZXF1aXJlKG1zZy5zZW5kZXIgIT0gX3RvKTsKCQlyZXF1aXJlKF90b2tlbklkLmxlbmd0aCAhPSAwKTsKICAgICAgICByZXF1aXJlKF90b2tlbklkLmxlbmd0aCA8PSAxMCk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgkJCiAgICAgICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBfdG9rZW5JZC5sZW5ndGg7IGkrKyl7CgkJCiAgICAgICAgICAgIHJlcXVpcmUodG9rZW5Pd25lcnNbX3Rva2VuSWRbaV1dID09IG1zZy5zZW5kZXIpOwoJCQl0b2tlbk93bmVyc1tfdG9rZW5JZFtpXV0gPSBfdG87CiAgICAgICAgICAgIGVtaXQgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZFtpXSk7CgkJCQogICAgICAgIH0KCQkKCQliYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdG9rZW5JZC5sZW5ndGg7CgkJYmFsYW5jZXNbX3RvXSArPSBfdG9rZW5JZC5sZW5ndGg7CgkJCgl9CgoJLy9FdmVudCB0byBub3RpZnkgZWFjaCBUb2tlbnMgVHJhbnNmZXIKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdG9rZW5JZCk7CgkKfQ=='.
	

]
