Class {
	#name : #SRT9EA80e204045329Ba752D03C395F82A12799f13d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9EA80e204045329Ba752D03C395F82A12799f13d >> base64 [
	^ ''.
	

]
