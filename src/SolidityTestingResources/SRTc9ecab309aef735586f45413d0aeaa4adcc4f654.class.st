Class {
	#name : #SRTc9ecab309aef735586f45413d0aeaa4adcc4f654,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9ecab309aef735586f45413d0aeaa4adcc4f654 >> base64 [
	^ ''.
	

]
