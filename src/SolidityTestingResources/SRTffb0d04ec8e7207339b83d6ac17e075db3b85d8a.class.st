Class {
	#name : #SRTffb0d04ec8e7207339b83d6ac17e075db3b85d8a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTffb0d04ec8e7207339b83d6ac17e075db3b85d8a >> base64 [
	^ 'Ly8gQXV0aG9yIDogc2hpZnQKCnByYWdtYSBzb2xpZGl0eSBeMC40LjEzOwoKLy8gRVJDMjAgSW50ZXJmYWNlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKY29udHJhY3QgRVJDMjAgewogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7Cn0KCi8qCiAgVGhpcyBjb250cmFjdCBzdG9yZXMgdHdpY2UgZXZlcnkga2V5IHZhbHVlIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gcmVkaXN0cmlidXRlIGZ1bmRzCiAgd2hlbiB0aGUgYm9udXMgdG9rZW5zIGFyZSByZWNlaXZlZCAod2hpY2ggaXMgdHlwaWNhbGx5IFggbW9udGhzIGFmdGVyIHRoZSBpbml0aWFsIGJ1eSkuCiovCgpjb250cmFjdCBTdXBlcmJDb250cmFjdCB7CgogIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgogIC8vQ29uc3RhbnRzIG9mIHRoZSBjb250cmFjdAogIHVpbnQyNTYgRkVFID0gMTAwOyAgICAvLzElIGZlZQogIHVpbnQyNTYgRkVFX0RFViA9IDEwOyAvLzEwJSBvbiB0aGUgMSUgZmVlCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgYWRkcmVzcyBjb25zdGFudCBwdWJsaWMgZGV2ZWxvcGVyID0gMHhFRTA2QmREYWZGQTU2YTMwMzcxOERFNTNBNWJjMzQ3RWZiRTRDNjhmOwoKICAvL1ZhcmlhYmxlcyBzdWJqZWN0IHRvIGNoYW5nZXMKICB1aW50MjU2IHB1YmxpYyBtYXhfYW1vdW50ID0gMCBldGhlcjsgIC8vMCBtZWFucyB0aGVyZSBpcyBubyBsaW1pdAogIHVpbnQyNTYgcHVibGljIG1pbl9hbW91bnQgPSAwIGV0aGVyOwoKICAvL1N0b3JlIHRoZSBhbW91bnQgb2YgRVRIIGRlcG9zaXRlZCBieSBlYWNoIGFjY291bnQuCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXNfYm9udXM7CiAgLy8gVHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zIHlldC4KICBib29sIHB1YmxpYyBib3VnaHRfdG9rZW5zID0gZmFsc2U7CiAgLy8gUmVjb3JkIEVUSCB2YWx1ZSBvZiB0b2tlbnMgY3VycmVudGx5IGhlbGQgYnkgY29udHJhY3QuCiAgdWludDI1NiBwdWJsaWMgY29udHJhY3RfZXRoX3ZhbHVlOwogIHVpbnQyNTYgcHVibGljIGNvbnRyYWN0X2V0aF92YWx1ZV9ib251czsKICAvL1NldCBieSB0aGUgb3duZXIgaW4gb3JkZXIgdG8gYWxsb3cgdGhlIHdpdGhkcmF3YWwgb2YgYm9udXMgdG9rZW5zLgogIGJvb2wgYm9udXNfcmVjZWl2ZWQ7CiAgLy9UaGUgYWRkcmVzcyBvZiB0aGUgY29udGFjdC4KICBhZGRyZXNzIHB1YmxpYyBzYWxlID0gMHg5OEJhNjk4RmMwNGU3OURDRTA2Njg3MzEwNjQyNDI1MmU2YWFiYzMxOwogIC8vVG9rZW4gYWRkcmVzcwogIEVSQzIwIHB1YmxpYyB0b2tlbjsKICAvL1JlY29yZHMgdGhlIGZlZXMgdGhhdCBoYXZlIHRvIGJlIHNlbnQKICB1aW50MjU2IGZlZXM7CiAgLy9TZXQgYnkgdGhlIG93bmVyIGlmIHRoZSBFVEggZ290IHJlZnVuZGVkIGJ5IHRoZSBwcm9qZWN0CiAgYm9vbCBnb3RfcmVmdW5kZWQ7CiAgCiAgZnVuY3Rpb24gU3VwZXJiQ29udHJhY3QoKSB7CiAgICAvKgogICAgQ29uc3RydWN0b3IKICAgICovCiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICAvL0Z1bmN0aW9ucyBmb3IgdGhlIG93bmVyCgogIC8vIEJ1eSB0aGUgdG9rZW5zLiBTZW5kcyBFVEggdG8gdGhlIHByZXNhbGUgd2FsbGV0IGFuZCByZWNvcmRzIHRoZSBFVEggYW1vdW50IGhlbGQgaW4gdGhlIGNvbnRyYWN0LgogIGZ1bmN0aW9uIGJ1eV90aGVfdG9rZW5zKCkgb25seU93bmVyIHsKICAgIHJlcXVpcmUoIWJvdWdodF90b2tlbnMpOwogICAgLy9Bdm9pZHMgYnVybmluZyB0aGUgZnVuZHMKICAgIHJlcXVpcmUoc2FsZSAhPSAweDApOwogICAgLy9NaW5pbXVtIGhhcyB0byBiZSByZWFjaGVkCiAgICByZXF1aXJlKHRoaXMuYmFsYW5jZSA+PSBtaW5fYW1vdW50KTsKICAgIC8vUmVjb3JkIHRoYXQgdGhlIGNvbnRyYWN0IGhhcyBib3VnaHQgdGhlIHRva2Vucy4KICAgIGJvdWdodF90b2tlbnMgPSB0cnVlOwogICAgLy9TZW5kcyBiZWZvcmUgc28gdGhlIGNvbnRyYWN0X2V0aF92YWx1ZSBjb250YWlucyB0aGUgY29ycmVjdCBiYWxhbmNlCiAgICB1aW50MjU2IGRldl9mZWUgPSBmZWVzL0ZFRV9ERVY7CiAgICBvd25lci50cmFuc2ZlcihmZWVzLWRldl9mZWUpOwogICAgZGV2ZWxvcGVyLnRyYW5zZmVyKGRldl9mZWUpOwogICAgLy9SZWNvcmQgdGhlIGFtb3VudCBvZiBFVEggc2VudCBhcyB0aGUgY29udHJhY3QncyBjdXJyZW50IHZhbHVlLgogICAgY29udHJhY3RfZXRoX3ZhbHVlID0gdGhpcy5iYWxhbmNlOwogICAgY29udHJhY3RfZXRoX3ZhbHVlX2JvbnVzID0gdGhpcy5iYWxhbmNlOwogICAgLy8gVHJhbnNmZXIgYWxsIHRoZSBmdW5kcyB0byB0aGUgY3Jvd2RzYWxlIGFkZHJlc3MuCiAgICBzYWxlLnRyYW5zZmVyKGNvbnRyYWN0X2V0aF92YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiBzZXRfdG9rZW5fYWRkcmVzcyhhZGRyZXNzIF90b2tlbikgb25seU93bmVyIHsKICAgIHJlcXVpcmUoX3Rva2VuICE9IDB4MCk7CiAgICB0b2tlbiA9IEVSQzIwKF90b2tlbik7CiAgfQoKICBmdW5jdGlvbiBzZXRfYm9udXNfcmVjZWl2ZWQoKSBvbmx5T3duZXIgewogICAgYm9udXNfcmVjZWl2ZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gc2V0X2dvdF9yZWZ1bmRlZCgpIG9ubHlPd25lciB7CiAgICAvKgogICAgSW4gY2FzZSwgZm9yIHNvbWUgcmVhc29ucywgdGhlIHByb2plY3QgcmVmdW5kcyB0aGUgbW9uZXkKICAgICovCiAgICBnb3RfcmVmdW5kZWQgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBuZXdfb3duZXIpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld19vd25lciAhPSAweDApOwogICAgb3duZXIgPSBuZXdfb3duZXI7CiAgfQoKICAvL1B1YmxpYyBmdW5jdGlvbnMKCiAgLy8gQWxsb3dzIGFueSB1c2VyIHRvIHdpdGhkcmF3IGhpcyB0b2tlbnMuCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSB7CiAgICAvLyBEaXNhbGxvdyB3aXRoZHJhdyBpZiB0b2tlbnMgaGF2ZW4ndCBiZWVuIGJvdWdodCB5ZXQuCiAgICByZXF1aXJlKGJvdWdodF90b2tlbnMpOwogICAgdWludDI1NiBjb250cmFjdF90b2tlbl9iYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgLy8gRGlzYWxsb3cgdG9rZW4gd2l0aGRyYXdhbHMgaWYgdGhlcmUgYXJlIG5vIHRva2VucyB0byB3aXRoZHJhdy4KICAgIHJlcXVpcmUoY29udHJhY3RfdG9rZW5fYmFsYW5jZSAhPSAwKTsKICAgIHVpbnQyNTYgdG9rZW5zX3RvX3dpdGhkcmF3ID0gKGJhbGFuY2VzW21zZy5zZW5kZXJdICogY29udHJhY3RfdG9rZW5fYmFsYW5jZSkgLyBjb250cmFjdF9ldGhfdmFsdWU7CiAgICAvLyBVcGRhdGUgdGhlIHZhbHVlIG9mIHRva2VucyBjdXJyZW50bHkgaGVsZCBieSB0aGUgY29udHJhY3QuCiAgICBjb250cmFjdF9ldGhfdmFsdWUgLT0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CiAgICAvLyBVcGRhdGUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHNlbmRpbmcgdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsKICAgIC8vIFNlbmQgdGhlIGZ1bmRzLiAgVGhyb3dzIG9uIGZhaWx1cmUgdG8gcHJldmVudCBsb3NzIG9mIGZ1bmRzLgogICAgcmVxdWlyZSh0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCB0b2tlbnNfdG9fd2l0aGRyYXcpKTsKICB9CgogIGZ1bmN0aW9uIHdpdGhkcmF3X2JvbnVzKCkgewogIC8qCiAgICBTcGVjaWFsIGZ1bmN0aW9uIHRvIHdpdGhkcmF3IHRoZSBib251cyB0b2tlbnMgYWZ0ZXIgdGhlIDYgbW9udGhzIGxvY2t1cC4KICAgIGJvbnVzX3JlY2VpdmVkIGhhcyB0byBiZSBzZXQgdG8gdHJ1ZS4KICAqLwogICAgcmVxdWlyZShib3VnaHRfdG9rZW5zKTsKICAgIHJlcXVpcmUoYm9udXNfcmVjZWl2ZWQpOwogICAgdWludDI1NiBjb250cmFjdF90b2tlbl9iYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgcmVxdWlyZShjb250cmFjdF90b2tlbl9iYWxhbmNlICE9IDApOwogICAgdWludDI1NiB0b2tlbnNfdG9fd2l0aGRyYXcgPSAoYmFsYW5jZXNfYm9udXNbbXNnLnNlbmRlcl0gKiBjb250cmFjdF90b2tlbl9iYWxhbmNlKSAvIGNvbnRyYWN0X2V0aF92YWx1ZV9ib251czsKICAgIGNvbnRyYWN0X2V0aF92YWx1ZV9ib251cyAtPSBiYWxhbmNlc19ib251c1ttc2cuc2VuZGVyXTsKICAgIGJhbGFuY2VzX2JvbnVzW21zZy5zZW5kZXJdID0gMDsKICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgdG9rZW5zX3RvX3dpdGhkcmF3KSk7CiAgfQogIAogIC8vIEFsbG93cyBhbnkgdXNlciB0byBnZXQgaGlzIGV0aCByZWZ1bmRlZCBiZWZvcmUgdGhlIHB1cmNoYXNlIGlzIG1hZGUuCiAgZnVuY3Rpb24gcmVmdW5kX21lKCkgewogICAgcmVxdWlyZSghYm91Z2h0X3Rva2VucyB8fCBnb3RfcmVmdW5kZWQpOwogICAgLy8gU3RvcmUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHdpdGhkcmF3YWwgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUuCiAgICB1aW50MjU2IGV0aF90b193aXRoZHJhdyA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOwogICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIEVUSCB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOwogICAgLy9VcGRhdGVzIHRoZSBiYWxhbmNlc19ib251cyB0b28KICAgIGJhbGFuY2VzX2JvbnVzW21zZy5zZW5kZXJdID0gMDsKICAgIC8vIFJldHVybiB0aGUgdXNlcidzIGZ1bmRzLiAgVGhyb3dzIG9uIGZhaWx1cmUgdG8gcHJldmVudCBsb3NzIG9mIGZ1bmRzLgogICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhfdG9fd2l0aGRyYXcpOwogIH0KCiAgLy8gRGVmYXVsdCBmdW5jdGlvbi4gIENhbGxlZCB3aGVuIGEgdXNlciBzZW5kcyBFVEggdG8gdGhlIGNvbnRyYWN0LgogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgcmVxdWlyZSghYm91Z2h0X3Rva2Vucyk7CiAgICAvL0NoZWNrIGlmIHRoZSBtYXggYW1vdW50IGhhcyBiZWVuIHJlYWNoZWQsIGlmIHRoZXJlIGlzIG9uZQogICAgcmVxdWlyZShtYXhfYW1vdW50ID09IDAgfHwgdGhpcy5iYWxhbmNlIDw9IG1heF9hbW91bnQpOwogICAgLy8xJSBmZWUgaXMgdGFrZW4gb24gdGhlIEVUSAogICAgdWludDI1NiBmZWUgPSBtc2cudmFsdWUgLyBGRUU7CiAgICBmZWVzICs9IGZlZTsKICAgIC8vVXBkYXRlcyBib3RoIG9mIHRoZSBiYWxhbmNlcwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gKG1zZy52YWx1ZS1mZWUpOwogICAgYmFsYW5jZXNfYm9udXNbbXNnLnNlbmRlcl0gKz0gKG1zZy52YWx1ZS1mZWUpOwogIH0KfQ=='.
	

]
