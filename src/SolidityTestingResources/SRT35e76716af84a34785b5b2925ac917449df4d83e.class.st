Class {
	#name : #SRT35e76716af84a34785b5b2925ac917449df4d83e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT35e76716af84a34785b5b2925ac917449df4d83e >> base64 [
	^ ''.
	

]
