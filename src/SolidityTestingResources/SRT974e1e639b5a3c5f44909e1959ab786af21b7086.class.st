Class {
	#name : #SRT974e1e639b5a3c5f44909e1959ab786af21b7086,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT974e1e639b5a3c5f44909e1959ab786af21b7086 >> base64 [
	^ ''.
	

]
