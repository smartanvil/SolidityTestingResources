Class {
	#name : #SRTcf3365ad90ca71151dbb89dabf247988f200e97d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcf3365ad90ca71151dbb89dabf247988f200e97d >> base64 [
	^ ''.
	

]
