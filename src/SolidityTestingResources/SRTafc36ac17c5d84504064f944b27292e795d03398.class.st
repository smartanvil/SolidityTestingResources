Class {
	#name : #SRTafc36ac17c5d84504064f944b27292e795d03398,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTafc36ac17c5d84504064f944b27292e795d03398 >> base64 [
	^ ''.
	

]
