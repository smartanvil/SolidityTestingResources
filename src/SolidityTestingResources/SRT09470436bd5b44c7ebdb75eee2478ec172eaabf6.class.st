Class {
	#name : #SRT09470436bd5b44c7ebdb75eee2478ec172eaabf6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT09470436bd5b44c7ebdb75eee2478ec172eaabf6 >> base64 [
	^ ''.
	

]
