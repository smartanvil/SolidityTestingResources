Class {
	#name : #SRTc9f05e276d9148c7728f63205cc0180cb21a60ff,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc9f05e276d9148c7728f63205cc0180cb21a60ff >> base64 [
	^ ''.
	

]
