Class {
	#name : #SRT8f7d3f14610bcd08f0ae48e999473206e3df0d67,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8f7d3f14610bcd08f0ae48e999473206e3df0d67 >> base64 [
	^ ''.
	

]
