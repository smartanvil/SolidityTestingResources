Class {
	#name : #SRT9f041bd63644f3727537a190c132a20966c3770c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9f041bd63644f3727537a190c132a20966c3770c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovKioKICogQWxsb3dzIG9uZSB0byBzZW5kIEVJUC0yMCB0b2tlbnMgdG8gbXVsdGlwbGUgYWRkcmVzc2VzIGNoZWFwbHkuCiAqIENvcHlyaWdodCAmIzE2OTsgMjAxNyBieSBBQkRLIENvbnN1bHRpbmcgaHR0cHM6Ly9hYmRrLmNvbnN1bHRpbmcvCiAqIEF1dGhvcjogTWlraGFpbCBWbGFkaW1pcm92IDxtaWtoYWlsLnZsYWRpbWlyb3ZbYXRdZ21haWwuY29tPgogKi8KY29udHJhY3QgQmF0Y2hUb2tlblNlbmRlciB7CiAgICAvKioKICAgICAqIElmIHlvdSBsaWtlIHRoaXMgY29udHJhY3QsIHlvdSBtYXkgc2VuZCBzb21lIGV0aGVyIHRvIHRoaXMgYWRkcmVzcyBhbmQKICAgICAqIGl0IHdpbGwgYmUgdXNlZCB0byBkZXZlbG9wIG1vcmUgdXNlZnVsIGNvbnRyYWN0cyBhdmFpbGFibGUgdG8gZXZlcnlvbmUuCiAgICAgKi8KICAgIGFkZHJlc3MgcHVibGljIGRvbmF0aW9uQWRkcmVzczsKCiAgICAvKioKICAgICAqIENyZWF0ZSBuZXcgQmF0Y2ggVG9rZW4gU2VuZGVyIHdpdGggZ2l2ZW4gZG9uYXRpb24gYWRkcmVzcy4KICAgICAqCiAgICAgKiBAcGFyYW0gX2RvbmF0aW9uQWRkcmVzcyBkb25hdGlvbiBhZGRyZXNzCiAgICAgKi8KICAgIGZ1bmN0aW9uIEJhdGNoVG9rZW5TZW5kZXIgKGFkZHJlc3MgX2RvbmF0aW9uQWRkcmVzcykgcHVibGljIHsKICAgICAgICBkb25hdGlvbkFkZHJlc3MgPSBfZG9uYXRpb25BZGRyZXNzOwogICAgfQoKICAgIC8qKgogICAgICogRW5jb2RlIHRyYW5zZmVyIGFtb3VudCBhbmQgcmVjZXBpZW50IGFkZHJlc3MgYXMgYSBzaW5nbGUgdWluMjU2IHZhbHVlLgogICAgICoKICAgICAqIEBwYXJhbSBfbG90c051bWJlciB0cmFuc2ZlciBhbW91bnQgYXMgbnVtYmVyIG9mIGxvdHMKICAgICAqIEBwYXJhbSBfdG8gdHJhbnNmZXIgcmVjaXBpZW50IGFkZHJlc3MKICAgICAqIEByZXR1cm4gZW5jb2RlZCB0cmFuc2ZlcgogICAgICovCiAgICBmdW5jdGlvbiBlbmNvZGVUcmFuc2ZlciAodWludDk2IF9sb3RzTnVtYmVyLCBhZGRyZXNzIF90bykKICAgIHB1YmxpYyBwdXJlIHJldHVybnMgKHVpbnQyNTYgX2VuY29kZWRUcmFuc2ZlcikgewogICAgICAgIHJldHVybiAoX2xvdHNOdW1iZXIgPDwgMTYwKSB8IHVpbnQxNjAgKF90byk7CiAgICB9CgogICAgLyoqCiAgICAgKiBQZXJmb3JtIG11bHRpcGxlIHRva2VuIHRyYW5zZmVycyBmcm9tIG1lc3NhZ2Ugc2VuZGVyJ3MgYWRkcmVzcy4KICAgICAqCiAgICAgKiBAcGFyYW0gX3Rva2VuIEVJUC0yMCB0b2tlbiBzbWFydCBjb250cmFjdCB0aGF0IG1hbmFnZXMgdG9rZW5zIHRvIGJlIHNlbnQKICAgICAqIEBwYXJhbSBfbG90U2l6ZSBudW1iZXIgb2YgdG9rZW5zIGluIGxvdAogICAgICogQHBhcmFtIF90cmFuc2ZlcnMgYW4gYXJyYXkgb3IgZW5jb2RlZCB0cmFuc2ZlcnMgdG8gcGVyZm9ybQogICAgICovCiAgICBmdW5jdGlvbiBiYXRjaFNlbmQgKAogICAgICAgIFRva2VuIF90b2tlbiwgdWludDE2MCBfbG90U2l6ZSwgdWludDI1NiBbXSBfdHJhbnNmZXJzKSBwdWJsaWMgewogICAgICAgIHVpbnQyNTYgY291bnQgPSBfdHJhbnNmZXJzLmxlbmd0aDsKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgICAgIHVpbnQyNTYgdHJhbnNmZXIgPSBfdHJhbnNmZXJzIFtpXTsKICAgICAgICAgICAgdWludDI1NiB2YWx1ZSA9ICh0cmFuc2ZlciA+PiAxNjApICogX2xvdFNpemU7CiAgICAgICAgICAgIGFkZHJlc3MgdG8gPSBhZGRyZXNzICgKICAgICAgICAgICAgICAgIHRyYW5zZmVyICYgMHgwMEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYpOwogICAgICAgICAgICBpZiAoIV90b2tlbi50cmFuc2ZlckZyb20gKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSkpIHJldmVydCAoKTsKICAgICAgICB9CiAgICB9Cn0KCi8qKgogKiBFSVAtMjAgc3RhbmRhcmQgdG9rZW4gaW50ZXJmYWNlLCBhcyBkZWZpbmVkCiAqIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTIwLXRva2VuLXN0YW5kYXJkLm1kIj5oZXJlPC9hPi4KICovCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qKgogICAgICogR2V0IHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gY2lyY3VsYXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGluIGNpcmN1bGF0aW9uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5ICgpCiAgICBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwoKICAgIC8qKgogICAgICogR2V0IG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGJlbG9uZ2luZyB0byBnaXZlbiBvd25lci4KICAgICAqCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gZ2V0IG51bWJlciBvZiB0b2tlbnMgY3VycmVudGx5IGJlbG9uZ2luZyB0byB0aGUKICAgICAqICAgICAgICBvd25lciBvZgogICAgICogQHJldHVybiBudW1iZXIgb2YgdG9rZW5zIGN1cnJlbnRseSBiZWxvbmdpbmcgdG8gdGhlIG93bmVyIG9mIGdpdmVuCiAgICAgKiAgICAgICAgIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikKICAgIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwoKICAgIC8qKgogICAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIG1lc3NhZ2Ugc2VuZGVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG9rZW5zIHRvIHRoZSBvd25lciBvZgogICAgICogQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyIHRvIHRoZSBvd25lciBvZiBnaXZlbiBhZGRyZXNzCiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBvdGhlcndpc2UKICAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXIgKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8qKgogICAgICogVHJhbnNmZXIgZ2l2ZW4gbnVtYmVyIG9mIHRva2VucyBmcm9tIGdpdmVuIG93bmVyIHRvIGdpdmVuIHJlY2lwaWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSB0aGUgb3duZXIgb2YKICAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbnMgdG8gdGhlIG93bmVyIG9mCiAgICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgZnJvbSBnaXZlbiBvd25lciB0byBnaXZlbgogICAgICogICAgICAgIHJlY2lwaWVudAogICAgICogQHJldHVybiB0cnVlIGlmIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHN1Y2Nlc3NmdWxseSwgZmFsc2Ugb3RoZXJ3aXNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSAoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLyoqCiAgICAgKiBBbGxvdyBnaXZlbiBzcGVuZGVyIHRvIHRyYW5zZmVyIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBtZXNzYWdlCiAgICAgKiBzZW5kZXIuCiAgICAgKgogICAgICogQHBhcmFtIF9zcGVuZGVyIGFkZHJlc3MgdG8gYWxsb3cgdGhlIG93bmVyIG9mIHRvIHRyYW5zZmVyIHRva2VucyBmcm9tCiAgICAgKiAgICAgICAgbWVzc2FnZSBzZW5kZXIKICAgICAqIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byBhbGxvdyB0byB0cmFuc2ZlcgogICAgICogQHJldHVybiB0cnVlIGlmIHRva2VuIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsbHkgYXBwcm92ZWQsIGZhbHNlIG90aGVyd2lzZQogICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlIChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkKICAgIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8qKgogICAgICogVGVsbCBob3cgbWFueSB0b2tlbnMgZ2l2ZW4gc3BlbmRlciBpcyBjdXJyZW50bHkgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tCiAgICAgKiBnaXZlbiBvd25lci4KICAgICAqCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgdG8gZ2V0IG51bWJlciBvZiB0b2tlbnMgYWxsb3dlZCB0byBiZSB0cmFuc2ZlcnJlZAogICAgICogICAgICAgIGZyb20gdGhlIG93bmVyIG9mCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyB0byBnZXQgbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKiAgICAgICAgYnkgdGhlIG93bmVyIG9mCiAgICAgKiBAcmV0dXJuIG51bWJlciBvZiB0b2tlbnMgZ2l2ZW4gc3BlbmRlciBpcyBjdXJyZW50bHkgYWxsb3dlZCB0byB0cmFuc2ZlcgogICAgICogICAgICAgICBmcm9tIGdpdmVuIG93bmVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG93YW5jZSAoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpCiAgICBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIC8qKgogICAgICogTG9nZ2VkIHdoZW4gdG9rZW5zIHdlcmUgdHJhbnNmZXJyZWQgZnJvbSBvbmUgb3duZXIgdG8gYW5vdGhlci4KICAgICAqCiAgICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBvZiB0aGUgb3duZXIsIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIGZyb20KICAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBvZiB0aGUgb3duZXIsIHRva2VucyB3ZXJlIHRyYW5zZmVycmVkIHRvCiAgICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdHJhbnNmZXJyZWQKICAgICAqLwogICAgZXZlbnQgVHJhbnNmZXIgKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIC8qKgogICAgICogTG9nZ2VkIHdoZW4gb3duZXIgYXBwcm92ZWQgaGlzIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZCBieSBzb21lIHNwZW5kZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIG93bmVyIHdobyBhcHByb3ZlZCBoaXMgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgc3BlbmRlciB3aG8gd2VyZSBhbGxvd2VkIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMgYmVsb25naW5nCiAgICAgKiAgICAgICAgdG8gdGhlIG93bmVyCiAgICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgYmVsb25naW5nIHRvIHRoZSBvd25lciwgYXBwcm92ZWQgdG8gYmUKICAgICAqICAgICAgICB0cmFuc2ZlcnJlZCBieSB0aGUgc3BlbmRlcgogICAgICovCiAgICBldmVudCBBcHByb3ZhbCAoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0='.
	

]
