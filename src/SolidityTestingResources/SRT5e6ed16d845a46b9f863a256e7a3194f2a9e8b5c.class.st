Class {
	#name : #SRT5e6ed16d845a46b9f863a256e7a3194f2a9e8b5c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5e6ed16d845a46b9f863a256e7a3194f2a9e8b5c >> base64 [
	^ ''.
	

]
