Class {
	#name : #SRT9e88770da20ebea0df87ad874c2f5cf8ab92f605,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9e88770da20ebea0df87ad874c2f5cf8ab92f605 >> base64 [
	^ ''.
	

]
