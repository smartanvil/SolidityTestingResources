Class {
	#name : #SRT9bbee408f93d3c3b1b7d73feffef250d54adf12a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9bbee408f93d3c3b1b7d73feffef250d54adf12a >> base64 [
	^ ''.
	

]
