Class {
	#name : #SRTb43b5be03416ca16f7b9749c6aba818538dcc032,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb43b5be03416ca16f7b9749c6aba818538dcc032 >> base64 [
	^ ''.
	

]
