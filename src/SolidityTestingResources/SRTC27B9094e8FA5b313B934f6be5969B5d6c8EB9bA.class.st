Class {
	#name : #SRTC27B9094e8FA5b313B934f6be5969B5d6c8EB9bA,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC27B9094e8FA5b313B934f6be5969B5d6c8EB9bA >> base64 [
	^ ''.
	

]
