Class {
	#name : #SRTeE2da7Cb6E458ef932E9A2E21fD4Bf3515A38278,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeE2da7Cb6E458ef932E9A2E21fD4Bf3515A38278 >> base64 [
	^ ''.
	

]
