Class {
	#name : #SRT1f4215fe007ee5b170391241656a28a8bd13826e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1f4215fe007ee5b170391241656a28a8bd13826e >> base64 [
	^ ''.
	

]
