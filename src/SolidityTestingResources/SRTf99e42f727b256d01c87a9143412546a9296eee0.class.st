Class {
	#name : #SRTf99e42f727b256d01c87a9143412546a9296eee0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf99e42f727b256d01c87a9143412546a9296eee0 >> base64 [
	^ ''.
	

]
