Class {
	#name : #SRTf4ea304ca547d7bfec95c999a43863768953b4b4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4ea304ca547d7bfec95c999a43863768953b4b4 >> base64 [
	^ ''.
	

]
