Class {
	#name : #SRT5fb3D432bae33FCd418edE263D98D7440E7fA3ea,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5fb3D432bae33FCd418edE263D98D7440E7fA3ea >> base64 [
	^ 'Y29udHJhY3Qgb3duZWQgewoKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKICBtb2RpZmllciBvbmx5T3duZXIgewogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgXzsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KfQoKY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQoKY29udHJhY3QgSVNuY1Rva2VuIHsKICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpOwogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSk7Cn0KCmNvbnRyYWN0IFN1bkNvbnRyYWN0SWNvIGlzIG93bmVkewoKICB1aW50MjU2IHB1YmxpYyBzdGFydEJsb2NrOwogIHVpbnQyNTYgcHVibGljIGVuZEJsb2NrOwogIHVpbnQyNTYgcHVibGljIG1pbkV0aFRvUmFpc2U7CiAgdWludDI1NiBwdWJsaWMgbWF4RXRoVG9SYWlzZTsKICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aFJhaXNlZDsKICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ0FkZHJlc3M7CgoKICBJU25jVG9rZW4gc25jVG9rZW5Db250cmFjdDsgCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwcmVzYWxlQ29udHJpYnV0b3JBbGxvd2FuY2U7CiAgdWludDI1NiBuZXh0RnJlZVBhcnRpY2lwYW50SW5kZXg7CiAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwYXJ0aWNpcGFudEluZGV4OwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcGFydGljaXBhbnRDb250cmlidXRpb247CgogIGJvb2wgaWNvSGFzU3RhcnRlZDsKICBib29sIG1pblRyZXNob2xkUmVhY2hlZDsKICBib29sIGljb0hhc1N1Y2Vzc2Z1bHlFbmRlZDsKICB1aW50MjU2IGJsb2Nrc0luV2VlazsKICAgIGJvb2wgb3duZXJIYXNDbGFpbWVkVG9rZW5zOwoKICB1aW50MjU2IGxhc3RFdGhSZXR1cm5JbmRleDsKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIGhhc0NsYWltZWRFdGhXaGVuRmFpbDsKCiAgZXZlbnQgSUNPU3RhcnRlZCh1aW50MjU2IF9ibG9ja051bWJlcik7CiAgZXZlbnQgSUNPTWluVHJlc2hvbGRSZWFjaGVkKHVpbnQyNTYgX2Jsb2NrTnVtYmVyKTsKICBldmVudCBJQ09FbmRlZFN1Y2Nlc3NmdWx5KHVpbnQyNTYgX2Jsb2NrTnVtYmVyLCB1aW50MjU2IF9hbW91bnRSYWlzZWQpOwogIGV2ZW50IElDT0ZhaWxlZCh1aW50MjU2IF9ibG9ja051bWJlciwgdWludDI1NiBfYW1tb3VudFJhaXNlZCk7CiAgZXZlbnQgRXJyb3JTZW5kaW5nRVRIKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudCk7CgogIGZ1bmN0aW9uIFN1bkNvbnRyYWN0SWNvKHVpbnQyNTYgX3N0YXJ0QmxvY2ssIGFkZHJlc3MgX211bHRpc2lnQWRkcmVzcykgewogICAgYmxvY2tzSW5XZWVrID0gNCAqIDYwICogMjQgKiA3OwogICAgc3RhcnRCbG9jayA9IF9zdGFydEJsb2NrOwogICAgZW5kQmxvY2sgPSBfc3RhcnRCbG9jayArIGJsb2Nrc0luV2VlayAqIDQ7CiAgICBtaW5FdGhUb1JhaXNlID0gNTAwMCAqIDEwKioxODsKICAgIG1heEV0aFRvUmFpc2UgPSAxMDAwMDAgKiAxMCoqMTg7CiAgICBtdWx0aXNpZ0FkZHJlc3MgPSBfbXVsdGlzaWdBZGRyZXNzOwogIH0KCiAgLy8gIAogIC8qIFVzZXIgYWNjZXNzaWJsZSBtZXRob2RzICovICAgCiAgLy8gIAoKICAvKiBVc2VycyBzZW5kIEVUSCBhbmQgZW50ZXIgdGhlIHRva2VuIHNhbGUqLyAgCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBpZiAobXNnLnZhbHVlID09IDApIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRocm93IGlmIHRoZSB2YWx1ZSBpcyAwICAKICAgIGlmIChpY29IYXNTdWNlc3NmdWx5RW5kZWQgfHwgYmxvY2subnVtYmVyID4gZW5kQmxvY2spIHRocm93OyAgICAgICAgLy8gVGhyb3cgaWYgdGhlIElDTyBoYXMgZW5kZWQgICAgIAogICAgaWYgKCFpY29IYXNTdGFydGVkKXsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIHRoZSBmaXJzdCBJQ08gdHJhbnNhY3Rpb24gICAgICAgCiAgICAgIGlmIChibG9jay5udW1iZXIgPj0gc3RhcnRCbG9jayl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBJQ08gc2hvdWxkIHN0YXJ0ICAgICAgICAKICAgICAgICBpY29IYXNTdGFydGVkID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoYXQgdGhlIElDTyBoYXMgc3RhcnRlZCAgICAgICAgIAogICAgICAgIElDT1N0YXJ0ZWQoYmxvY2subnVtYmVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBJQ09TdGFydGVkIGV2ZW50ICAgICAKICAgICAgfSBlbHNlewogICAgICAgIHRocm93OwogICAgICB9CiAgICB9ICAgICAKICAgIGlmIChwYXJ0aWNpcGFudENvbnRyaWJ1dGlvblttc2cuc2VuZGVyXSA9PSAwKXsgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGlzIGEgbmV3IHVzZXIgICAgICAgCiAgICAgIHBhcnRpY2lwYW50SW5kZXhbbmV4dEZyZWVQYXJ0aWNpcGFudEluZGV4XSA9IG1zZy5zZW5kZXI7ICAgICAgICAgLy8gQWRkIGEgbmV3IHVzZXIgdG8gdGhlIHBhcnRpY2lwYW50IGluZGV4ICAgICAgIAogICAgICBuZXh0RnJlZVBhcnRpY2lwYW50SW5kZXggKz0gMTsKICAgIH0gICAgIAogICAgaWYgKG1heEV0aFRvUmFpc2UgPiAodG90YWxFdGhSYWlzZWQgKyBtc2cudmFsdWUpKXsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIHNlbnQgdG9vIG11Y2ggRVRIICAgICAgIAogICAgICBwYXJ0aWNpcGFudENvbnRyaWJ1dGlvblttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7ICAgICAgICAgICAgICAgIC8vIEFkZCBjb250cmlidXRpb24gICAgICAKICAgICAgdG90YWxFdGhSYWlzZWQgKz0gbXNnLnZhbHVlOy8vIEFkZCB0byB0b3RhbCBldGggUmFpc2VkCiAgICAgIHNuY1Rva2VuQ29udHJhY3QubWludFRva2Vucyhtc2cuc2VuZGVyLCBnZXRTbmNUb2tlbklzc3VhbmNlKGJsb2NrLm51bWJlciwgbXNnLnZhbHVlKSk7CiAgICAgIGlmICghbWluVHJlc2hvbGRSZWFjaGVkICYmIHRvdGFsRXRoUmFpc2VkID49IG1pbkV0aFRvUmFpc2UpeyAgICAgIC8vIENoZWNrIGlmIHRoZSBtaW4gdHJlc2hvbGQgaGFzIGJlZW4gcmVhY2hlZCBvbmUgdGltZSAgICAgICAgCiAgICAgICAgSUNPTWluVHJlc2hvbGRSZWFjaGVkKGJsb2NrLm51bWJlcik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJhaXNlIElDT01pblRyZXNob2xkUmVhY2hlZCBldmVudCAgICAgICAgCiAgICAgICAgbWluVHJlc2hvbGRSZWFjaGVkID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGF0IHRoZSBtaW4gdHJlc2hvbGQgaGFzIGJlZW4gcmVhY2hlZCAgICAgICAKICAgICAgfSAgICAgCiAgICB9ZWxzZXsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHVzZXIgc2VudCB0byBtdWNoIGV0aCAgICAgICAKICAgICAgdWludCBtYXhDb250cmlidXRpb24gPSBtYXhFdGhUb1JhaXNlIC0gdG90YWxFdGhSYWlzZWQ7ICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIG1heGltdW0gY29udHJpYnV0aW9uICAgICAgIAogICAgICBwYXJ0aWNpcGFudENvbnRyaWJ1dGlvblttc2cuc2VuZGVyXSArPSBtYXhDb250cmlidXRpb247ICAgICAgICAgICAvLyBBZGQgbWF4aW11bSBjb250cmlidXRpb24gdG8gYWNjb3VudCAgICAgIAogICAgICB0b3RhbEV0aFJhaXNlZCArPSBtYXhDb250cmlidXRpb247ICAKICAgICAgc25jVG9rZW5Db250cmFjdC5taW50VG9rZW5zKG1zZy5zZW5kZXIsIGdldFNuY1Rva2VuSXNzdWFuY2UoYmxvY2subnVtYmVyLCBtYXhDb250cmlidXRpb24pKTsKICAgICAgdWludCB0b1JldHVybiA9IG1zZy52YWx1ZSAtIG1heENvbnRyaWJ1dGlvbjsgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBob3cgbXVjaCBzaG91bGQgYmUgcmV0dXJuZWQgICAgICAgCiAgICAgIGljb0hhc1N1Y2Vzc2Z1bHlFbmRlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhhdCBJQ08gaGFzIHN1Y2Nlc3NmdWxseSBlbmRlZCAgICAgICAKICAgICAgSUNPRW5kZWRTdWNjZXNzZnVseShibG9jay5udW1iZXIsIHRvdGFsRXRoUmFpc2VkKTsgICAgICAKICAgICAgaWYoIW1zZy5zZW5kZXIuc2VuZCh0b1JldHVybikpeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnVuZCB0aGUgYmFsYW5jZSB0aGF0IGlzIG92ZXIgdGhlIGNhcCAgICAgICAgIAogICAgICAgIEVycm9yU2VuZGluZ0VUSChtc2cuc2VuZGVyLCB0b1JldHVybik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFpc2UgZXZlbnQgZm9yIG1hbnVhbCByZXR1cm4gaWYgdHJhbnNhY3Rpb24gdGhyb3dzICAgICAgIAogICAgICB9ICAgICAKICAgIH0KICB9ICAgCgogIC8qIFVzZXJzIGNhbiBjbGFpbSBFVEggYnkgdGhlbXNlbHZlcyBpZiB0aGV5IHdhbnQgdG8gaW4gY2FzZSBvZiBFVEggZmFpbHVyZSovICAgCiAgZnVuY3Rpb24gY2xhaW1FdGhJZkZhaWxlZCgpeyAgICAKICAgIGlmIChibG9jay5udW1iZXIgPD0gZW5kQmxvY2sgfHwgdG90YWxFdGhSYWlzZWQgPj0gbWluRXRoVG9SYWlzZSkgdGhyb3c7IC8vIENoZWNrIGlmIElDTyBoYXMgZmFpbGVkICAgIAogICAgaWYgKHBhcnRpY2lwYW50Q29udHJpYnV0aW9uW21zZy5zZW5kZXJdID09IDApIHRocm93OyAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgcGFydGljaXBhdGVkICAgICAKICAgIGlmIChoYXNDbGFpbWVkRXRoV2hlbkZhaWxbbXNnLnNlbmRlcl0pIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgYWNjb3VudCBoYXMgYWxyZWFkeSBjbGFpbWVkIEVUSCAgICAKICAgIHVpbnQyNTYgZXRoQ29udHJpYnV0ZWQgPSBwYXJ0aWNpcGFudENvbnRyaWJ1dGlvblttc2cuc2VuZGVyXTsgICAgICAgICAgIC8vIEdldCBwYXJ0aWNpcGFudCBFVEggQ29udHJpYnV0aW9uICAgICAKICAgIGhhc0NsYWltZWRFdGhXaGVuRmFpbFttc2cuc2VuZGVyXSA9IHRydWU7ICAgICAKICAgIGlmICghbXNnLnNlbmRlci5zZW5kKGV0aENvbnRyaWJ1dGVkKSl7ICAgICAgCiAgICAgIEVycm9yU2VuZGluZ0VUSChtc2cuc2VuZGVyLCBldGhDb250cmlidXRlZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWlzZSBldmVudCBpZiBzZW5kIGZhaWxlZCwgc29sdmUgbWFudWFsbHkgICAgIAogICAgfSAgIAogIH0gICAKCiAgLy8gIAogIC8qIE9ubHkgb3duZXIgbWV0aG9kcyAqLyAgCiAgLy8gIAoKICAvKiBBZGRzIGFkZHJlc3NlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIHRha2UgcGFydCBpbiBwcmVzYWxlICovICAgCiAgZnVuY3Rpb24gYWRkUHJlc2FsZUNvbnRyaWJ1dG9ycyhhZGRyZXNzW10gX3ByZXNhbGVDb250cmlidXRvcnMpIG9ubHlPd25lciB7ICAgICAKICAgIGZvciAodWludCBjbnQgPSAwOyBjbnQgPCBfcHJlc2FsZUNvbnRyaWJ1dG9ycy5sZW5ndGg7IGNudCsrKXsgICAgICAgCiAgICAgIHByZXNhbGVDb250cmlidXRvckFsbG93YW5jZVtfcHJlc2FsZUNvbnRyaWJ1dG9yc1tjbnRdXSA9IHRydWU7ICAgIAogICAgfSAgIAogIH0gICAKCiAgLyogT3duZXIgY2FuIHJldHVybiBldGggZm9yIG11bHRpcGxlIHVzZXJzIGluIG9uZSBjYWxsKi8gIAogIGZ1bmN0aW9uIGJhdGNoUmV0dXJuRXRoSWZGYWlsZWQodWludDI1NiBfbnVtYmVyT2ZSZXR1cm5zKSBvbmx5T3duZXJ7ICAgIAogICAgaWYgKGJsb2NrLm51bWJlciA8IGVuZEJsb2NrIHx8IHRvdGFsRXRoUmFpc2VkID49IG1pbkV0aFRvUmFpc2UpIHRocm93OyAgICAvLyBDaGVjayBpZiBJQ08gZmFpbGVkICAKICAgIGFkZHJlc3MgY3VycmVudFBhcnRpY2lwYW50QWRkcmVzczsgICAgCiAgICB1aW50MjU2IGNvbnRyaWJ1dGlvbjsKICAgIGZvciAodWludCBjbnQgPSAwOyBjbnQgPCBfbnVtYmVyT2ZSZXR1cm5zOyBjbnQrKyl7ICAgICAgCiAgICAgIGN1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3MgPSBwYXJ0aWNpcGFudEluZGV4W2xhc3RFdGhSZXR1cm5JbmRleF07ICAgICAgIC8vIEdldCBuZXh0IGFjY291bnQgICAgICAgCiAgICAgIGlmIChjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzID09IDB4MCkgcmV0dXJuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHBhcnRpY2lwYW50cyB3ZXJlIHJlaW1idXJzZWQgICAgICAKICAgICAgaWYgKCFoYXNDbGFpbWVkRXRoV2hlbkZhaWxbY3VycmVudFBhcnRpY2lwYW50QWRkcmVzc10pIHsgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgbWFudWFsbHkgcmVjb3ZlcmVkIEVUSCAgICAgICAgIAogICAgICAgIGNvbnRyaWJ1dGlvbiA9IHBhcnRpY2lwYW50Q29udHJpYnV0aW9uW2N1cnJlbnRQYXJ0aWNpcGFudEFkZHJlc3NdOyAgICAvLyBHZXQgYWNjb3VudHMgY29udHJpYnV0aW9uICAgICAgICAKICAgICAgICBoYXNDbGFpbWVkRXRoV2hlbkZhaWxbbXNnLnNlbmRlcl0gPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoYXQgdXNlciBnb3QgaGlzIEVUSCBiYWNrICAgICAgICAgCiAgICAgICAgaWYgKCFjdXJyZW50UGFydGljaXBhbnRBZGRyZXNzLnNlbmQoY29udHJpYnV0aW9uKSl7ICAgICAgICAgICAgICAgICAgIC8vIFNlbmQgZnVuZCBiYWNrIHRvIGFjY291bnQgICAgICAgICAgCiAgICAgICAgICBFcnJvclNlbmRpbmdFVEgoY3VycmVudFBhcnRpY2lwYW50QWRkcmVzcywgY29udHJpYnV0aW9uKTsgICAgICAgICAgIC8vIFJhaXNlIGV2ZW50IGlmIHNlbmQgZmFpbGVkLCByZXNvbHZlIG1hbnVhbGx5ICAgICAgICAgCiAgICAgICAgfSAgICAgICAKICAgICAgfSAgICAgICAKICAgICAgbGFzdEV0aFJldHVybkluZGV4ICs9IDE7ICAgIAogICAgfSAgIAogIH0gICAKCiAgLyogT3duZXIgc2V0cyBuZXcgYWRkcmVzcyBvZiBTdW5Db250cmFjdFRva2VuICovCiAgZnVuY3Rpb24gY2hhbmdlTXVsdGlzaWdBZGRyZXNzKGFkZHJlc3MgX25ld0FkZHJlc3MpIG9ubHlPd25lciB7ICAgICAKICAgIG11bHRpc2lnQWRkcmVzcyA9IF9uZXdBZGRyZXNzOwogIH0gICAKCiAgLyogT3duZXIgY2FuIGNsYWltIHJlc2VydmVkIHRva2VucyBvbiB0aGUgZW5kIG9mIGNyb3dzYWxlICovICAKICBmdW5jdGlvbiBjbGFpbUNvcmVUZWFtc1Rva2VucyhhZGRyZXNzIF90bykgb25seU93bmVyeyAgICAgCiAgICBpZiAoIWljb0hhc1N1Y2Vzc2Z1bHlFbmRlZCkgdGhyb3c7IAogICAgaWYgKG93bmVySGFzQ2xhaW1lZFRva2VucykgdGhyb3c7CiAgICAKICAgIHNuY1Rva2VuQ29udHJhY3QubWludFRva2VucyhfdG8sIHNuY1Rva2VuQ29udHJhY3QudG90YWxTdXBwbHkoKSAqIDI1IC8gMTAwKTsKICAgIG93bmVySGFzQ2xhaW1lZFRva2VucyA9IHRydWU7CiAgfSAgIAoKICAvKiBPd25lciBjYW4gcmVtb3ZlIGFsbG93YW5jZSBvZiBkZXNpZ25hdGVkIHByZXNhbGUgY29udHJpYnV0b3IgKi8gIAogIGZ1bmN0aW9uIHJlbW92ZVByZXNhbGVDb250cmlidXRvcihhZGRyZXNzIF9wcmVzYWxlQ29udHJpYnV0b3IpIG9ubHlPd25lciB7ICAgIAogICAgcHJlc2FsZUNvbnRyaWJ1dG9yQWxsb3dhbmNlW19wcmVzYWxlQ29udHJpYnV0b3JdID0gZmFsc2U7ICAgCiAgfSAgIAoKICAvKiBTZXQgdG9rZW4gY29udHJhY3Qgd2hlcmUgbWludHMgd2lsbCBiZSBkb25lICh0b2tlbnMgd2lsbCBiZSBpc3N1ZWQpKi8gIAogIGZ1bmN0aW9uIHNldFRva2VuQ29udHJhY3QoYWRkcmVzcyBfc25jVG9rZW5Db250cmFjdEFkZHJlc3MpIG9ubHlPd25lciB7ICAgICAKICAgIHNuY1Rva2VuQ29udHJhY3QgPSBJU25jVG9rZW4oX3NuY1Rva2VuQ29udHJhY3RBZGRyZXNzKTsgICAKICB9ICAgCgogIC8qIFdpdGhkcmF3IGZ1bmRzIGZyb20gY29udHJhY3QgKi8gIAogIGZ1bmN0aW9uIHdpdGhkcmF3RXRoKCkgb25seU93bmVyeyAgICAgCiAgICBpZiAodGhpcy5iYWxhbmNlID09IDApIHRocm93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYmFsYW5jZSBvbiB0aGUgY29udHJhY3QgICAgIAogICAgaWYgKHRvdGFsRXRoUmFpc2VkIDwgbWluRXRoVG9SYWlzZSkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIG1pbkV0aFRvUmFpc2UgdHJlc2hvbGQgaXMgZXhjZWVkZWQgICAgIAogICAgICAKICAgIGlmKG11bHRpc2lnQWRkcmVzcy5zZW5kKHRoaXMuYmFsYW5jZSkpe30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW5kIHRoZSBjb250cmFjdCdzIGJhbGFuY2UgdG8gbXVsdGlzaWcgYWRkcmVzcyAgIAogIH0KICAKICBmdW5jdGlvbiBlbmRJY28oKSBvbmx5T3duZXIgewogICAgICBpZiAodG90YWxFdGhSYWlzZWQgPCBtaW5FdGhUb1JhaXNlKSB0aHJvdzsKICAgICAgaWYgKGJsb2NrLm51bWJlciA8IGVuZEJsb2NrKSB0aHJvdzsKICAKICAgIGljb0hhc1N1Y2Vzc2Z1bHlFbmRlZCA9IHRydWU7CiAgICBJQ09FbmRlZFN1Y2Nlc3NmdWx5KGJsb2NrLm51bWJlciwgdG90YWxFdGhSYWlzZWQpOwogIH0KCiAgLyogV2l0aGRyYXcgcmVtYWluaW5nIGJhbGFuY2UgdG8gbWFudWFsbHkgcmV0dXJuIHdoZXJlIGNvbnRyYWN0IHNlbmQgaGFzIGZhaWxlZCAqLyAgCiAgZnVuY3Rpb24gd2l0aGRyYXdSZW1haW5pbmdCYWxhbmNlRm9yTWFudWFsUmVjb3ZlcnkoKSBvbmx5T3duZXJ7ICAgICAKICAgIGlmICh0aGlzLmJhbGFuY2UgPT0gMCkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBiYWxhbmNlIG9uIHRoZSBjb250cmFjdCAgICAKICAgIGlmIChibG9jay5udW1iZXIgPCBlbmRCbG9jaykgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBJQ08gZmFpbGVkICAgIAogICAgaWYgKHBhcnRpY2lwYW50SW5kZXhbbGFzdEV0aFJldHVybkluZGV4XSAhPSAweDApIHRocm93OyAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGFsbCB0aGUgcGFydGljaXBhbnRzIGhhdmUgYmVlbiByZWltYnVyc2VkICAgICAKICAgIGlmIChtdWx0aXNpZ0FkZHJlc3Muc2VuZCh0aGlzLmJhbGFuY2UpKXt9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW5kIHJlbWFpbmRlciBzbyBpdCBjYW4gYmUgbWFudWFsbHkgcHJvY2Vzc2VkICAgCiAgfQoKICAvLyAgCiAgLyogR2V0dGVycyAqLyAgIAogIC8vICAKCiAgZnVuY3Rpb24gZ2V0U25jVG9rZW5BZGRyZXNzKCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzIF90b2tlbkFkZHJlc3MpeyAgICAKICAgIHJldHVybiBhZGRyZXNzKHNuY1Rva2VuQ29udHJhY3QpOyAgIAogIH0gICAKCiAgZnVuY3Rpb24gaWNvSW5Qcm9ncmVzcygpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgYW5zd2VyKXsgICAgCiAgICByZXR1cm4gaWNvSGFzU3RhcnRlZCAmJiAhaWNvSGFzU3VjZXNzZnVseUVuZGVkOyAgIAogIH0gICAKCiAgZnVuY3Rpb24gaXNBZGRyZXNzQWxsb3dlZEluUHJlc2FsZShhZGRyZXNzIF9xdWVycnlBZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sIGFuc3dlcil7ICAgIAogICAgcmV0dXJuIHByZXNhbGVDb250cmlidXRvckFsbG93YW5jZVtfcXVlcnJ5QWRkcmVzc107ICAgCiAgfSAgIAoKICBmdW5jdGlvbiBwYXJ0aWNpcGFudENvbnRyaWJ1dGlvbkluRXRoKGFkZHJlc3MgX3F1ZXJyeUFkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYW5zd2VyKXsgICAgCiAgICByZXR1cm4gcGFydGljaXBhbnRDb250cmlidXRpb25bX3F1ZXJyeUFkZHJlc3NdOyAgIAogIH0KICAKICBmdW5jdGlvbiBnZXRTbmNUb2tlbklzc3VhbmNlKHVpbnQyNTYgX2Jsb2NrTnVtYmVyLCB1aW50MjU2IF9ldGhTZW50KSBjb25zdGFudCByZXR1cm5zKHVpbnQpewogICAgICAgIGlmIChfYmxvY2tOdW1iZXIgPj0gc3RhcnRCbG9jayAmJiBfYmxvY2tOdW1iZXIgPCBibG9ja3NJbldlZWsgKyBzdGFydEJsb2NrKSB7CiAgICAgICAgICBpZiAocHJlc2FsZUNvbnRyaWJ1dG9yQWxsb3dhbmNlW21zZy5zZW5kZXJdKSByZXR1cm4gX2V0aFNlbnQgKiAxMTYwMDsKICAgICAgICAgIGVsc2UgcmV0dXJuIF9ldGhTZW50ICogMTE1MDA7CiAgICAgICAgfQogICAgICAgIGlmIChfYmxvY2tOdW1iZXIgPj0gYmxvY2tzSW5XZWVrICsgc3RhcnRCbG9jayAmJiBfYmxvY2tOdW1iZXIgPCBibG9ja3NJbldlZWsgKiAyICsgc3RhcnRCbG9jaykgcmV0dXJuIF9ldGhTZW50ICogMTEwMDA7CiAgICAgICAgaWYgKF9ibG9ja051bWJlciA+PSBibG9ja3NJbldlZWsgKiAyICsgc3RhcnRCbG9jayAmJiBfYmxvY2tOdW1iZXIgPCBibG9ja3NJbldlZWsgKiAzICsgc3RhcnRCbG9jaykgcmV0dXJuIF9ldGhTZW50ICogMTA1MDA7CiAgICAgICAgaWYgKF9ibG9ja051bWJlciA+PSBibG9ja3NJbldlZWsgKiAzICsgc3RhcnRCbG9jayAmJiBfYmxvY2tOdW1iZXIgPD0gYmxvY2tzSW5XZWVrICogNCArIHN0YXJ0QmxvY2spIHJldHVybiBfZXRoU2VudCAqIDEwMDAwOwogICAgfQoKICAvLwogIC8qIFRoaXMgcGFydCBpcyBoZXJlIG9ubHkgZm9yIHRlc3RpbmcgYW5kIHdpbGwgbm90IGJlIGluY2x1ZGVkIGludG8gZmluYWwgdmVyc2lvbiAqLwogIC8vCiAgLy9mdW5jdGlvbiBraWxsQ29udHJhY3QoKSBvbmx5T3duZXJ7CiAgLy8gIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsKICAvL30KfQ=='.
	

]
