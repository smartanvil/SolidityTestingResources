Class {
	#name : #SRT71d01db8d6a2fbea7f8d434599c237980c234e4c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT71d01db8d6a2fbea7f8d434599c237980c234e4c >> base64 [
	^ ''.
	

]
