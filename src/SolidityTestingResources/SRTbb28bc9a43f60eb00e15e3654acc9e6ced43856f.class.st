Class {
	#name : #SRTbb28bc9a43f60eb00e15e3654acc9e6ced43856f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbb28bc9a43f60eb00e15e3654acc9e6ced43856f >> base64 [
	^ ''.
	

]
