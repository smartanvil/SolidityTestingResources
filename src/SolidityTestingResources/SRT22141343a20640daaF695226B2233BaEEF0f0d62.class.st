Class {
	#name : #SRT22141343a20640daaF695226B2233BaEEF0f0d62,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT22141343a20640daaF695226B2233BaEEF0f0d62 >> base64 [
	^ ''.
	

]
