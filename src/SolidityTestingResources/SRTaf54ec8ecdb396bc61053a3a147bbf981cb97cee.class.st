Class {
	#name : #SRTaf54ec8ecdb396bc61053a3a147bbf981cb97cee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf54ec8ecdb396bc61053a3a147bbf981cb97cee >> base64 [
	^ ''.
	

]
