Class {
	#name : #SRTe5b63996c8c953dc2da22348b207dbd46ad045dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe5b63996c8c953dc2da22348b207dbd46ad045dd >> base64 [
	^ ''.
	

]
