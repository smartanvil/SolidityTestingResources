Class {
	#name : #SRT402f5f37dfa3c1f59fc48fc4372a8343e64d7766,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT402f5f37dfa3c1f59fc48fc4372a8343e64d7766 >> base64 [
	^ ''.
	

]
