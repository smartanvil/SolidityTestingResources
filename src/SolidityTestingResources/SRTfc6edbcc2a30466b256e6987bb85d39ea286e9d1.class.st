Class {
	#name : #SRTfc6edbcc2a30466b256e6987bb85d39ea286e9d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc6edbcc2a30466b256e6987bb85d39ea286e9d1 >> base64 [
	^ ''.
	

]
