Class {
	#name : #SRT41e8eedfbd7d8765d18ef82c9d21c07cb27382a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT41e8eedfbd7d8765d18ef82c9d21c07cb27382a6 >> base64 [
	^ ''.
	

]
