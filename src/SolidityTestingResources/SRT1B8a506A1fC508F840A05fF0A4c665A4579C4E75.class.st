Class {
	#name : #SRT1B8a506A1fC508F840A05fF0A4c665A4579C4E75,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1B8a506A1fC508F840A05fF0A4c665A4579C4E75 >> base64 [
	^ ''.
	

]
