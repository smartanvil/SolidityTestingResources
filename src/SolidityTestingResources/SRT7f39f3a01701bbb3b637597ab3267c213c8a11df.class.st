Class {
	#name : #SRT7f39f3a01701bbb3b637597ab3267c213c8a11df,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f39f3a01701bbb3b637597ab3267c213c8a11df >> base64 [
	^ ''.
	

]
