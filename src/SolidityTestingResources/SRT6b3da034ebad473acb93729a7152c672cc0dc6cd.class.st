Class {
	#name : #SRT6b3da034ebad473acb93729a7152c672cc0dc6cd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b3da034ebad473acb93729a7152c672cc0dc6cd >> base64 [
	^ ''.
	

]
