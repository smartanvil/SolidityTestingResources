Class {
	#name : #SRT63b992e6246d88f07fc35a056d2c365e6d441a3d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63b992e6246d88f07fc35a056d2c365e6d441a3d >> base64 [
	^ ''.
	

]
