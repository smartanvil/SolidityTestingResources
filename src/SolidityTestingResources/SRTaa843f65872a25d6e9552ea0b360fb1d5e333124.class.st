Class {
	#name : #SRTaa843f65872a25d6e9552ea0b360fb1d5e333124,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa843f65872a25d6e9552ea0b360fb1d5e333124 >> base64 [
	^ ''.
	

]
