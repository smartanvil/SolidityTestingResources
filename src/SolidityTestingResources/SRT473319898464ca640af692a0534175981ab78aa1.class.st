Class {
	#name : #SRT473319898464ca640af692a0534175981ab78aa1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT473319898464ca640af692a0534175981ab78aa1 >> base64 [
	^ ''.
	

]
