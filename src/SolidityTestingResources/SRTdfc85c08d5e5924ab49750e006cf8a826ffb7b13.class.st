Class {
	#name : #SRTdfc85c08d5e5924ab49750e006cf8a826ffb7b13,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdfc85c08d5e5924ab49750e006cf8a826ffb7b13 >> base64 [
	^ ''.
	

]
