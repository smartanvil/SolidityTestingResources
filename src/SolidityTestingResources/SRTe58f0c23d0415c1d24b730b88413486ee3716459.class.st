Class {
	#name : #SRTe58f0c23d0415c1d24b730b88413486ee3716459,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe58f0c23d0415c1d24b730b88413486ee3716459 >> base64 [
	^ ''.
	

]
