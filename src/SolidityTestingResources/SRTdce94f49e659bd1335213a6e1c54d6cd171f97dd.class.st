Class {
	#name : #SRTdce94f49e659bd1335213a6e1c54d6cd171f97dd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdce94f49e659bd1335213a6e1c54d6cd171f97dd >> base64 [
	^ ''.
	

]
