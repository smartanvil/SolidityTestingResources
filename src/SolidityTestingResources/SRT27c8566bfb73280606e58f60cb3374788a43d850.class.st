Class {
	#name : #SRT27c8566bfb73280606e58f60cb3374788a43d850,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT27c8566bfb73280606e58f60cb3374788a43d850 >> base64 [
	^ ''.
	

]
