Class {
	#name : #SRT96499b84d5f704b6e660376116e3e0fc857f3cf8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT96499b84d5f704b6e660376116e3e0fc857f3cf8 >> base64 [
	^ ''.
	

]
