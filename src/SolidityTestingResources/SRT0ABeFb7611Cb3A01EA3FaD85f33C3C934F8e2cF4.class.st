Class {
	#name : #SRT0ABeFb7611Cb3A01EA3FaD85f33C3C934F8e2cF4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ABeFb7611Cb3A01EA3FaD85f33C3C934F8e2cF4 >> base64 [
	^ ''.
	

]
