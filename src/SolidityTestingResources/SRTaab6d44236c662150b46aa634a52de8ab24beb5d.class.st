Class {
	#name : #SRTaab6d44236c662150b46aa634a52de8ab24beb5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaab6d44236c662150b46aa634a52de8ab24beb5d >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Ci8qKgoqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKKi8KY29udHJhY3QgRVJDMjAgewogICAgICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICAgICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogICAgICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwogICAgICAgIH0KCmNvbnRyYWN0IFRlc3RUb2tlbjMwMiBpcyBFUkMyMCB7CiAgICAgICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lPSIzMDJURVNUIFRPS0VOICBDT0lOIjsKICAgICAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbD0iVFRLMzAyIjsKICAgICAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscz0xODsKICAgICAgICB1aW50IHB1YmxpYyAgdG90YWxTdXBwbHk9MjUwMDAgKiAxMCAqKiB1aW50MjU2KGRlY2ltYWxzKTsKCiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93ZWRUb1NwZW5kOwogICAgIAoKICAgICAgICBmdW5jdGlvbiBUZXN0VG9rZW4zMDIoKSBwdWJsaWN7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXT10b3RhbFN1cHBseTsKICAgICAgICB9CgoKICAgICAgICAvKioKICAgICAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWRUb1NwZW5kW19vd25lcl1bX3NwZW5kZXJdOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpewogICAgICAgIGFsbG93ZWRUb1NwZW5kW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCgoKICAgICAgICAvKioKICAgICAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICAgICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKCiAgICAgICAgICAgICAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPV92YWx1ZTsKICAgICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz1fdmFsdWU7CiAgICAgICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgoKICAgICAgICAvKioKICAgICAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICAgICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSxhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICAgICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW21zZy5zZW5kZXJdKTsKICAgICAgICAgICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93ZWRUb1NwZW5kW19mcm9tXVttc2cuc2VuZGVyXSk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICAgICAgICAgIGFsbG93ZWRUb1NwZW5kW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgICAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICAgICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCgoKCgp9Cgpjb250cmFjdCBTZWxsVGVzdFRva2VuczMwMiBpcyBUZXN0VG9rZW4zMDJ7CiAgICAgICAgYWRkcmVzcyBpbnRlcm5hbCBfd2FsbGV0OwogICAgICAgIGFkZHJlc3MgaW50ZXJuYWwgX293bmVyOwogICAgICAgIGFkZHJlc3MgaW50ZXJuYWwgX2dhc25vZGU9MHg4OWRjYTg4QzlCNzRFOWY2NjI2NzE5QTJFQjU1ZTQ4MzA5NmEyOUI1OwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcHVibGljIF9wcmVzYWxlU3RhcnRUaW1lc3RhbXA7CiAgICAgICAgdWludDI1NiBwdWJsaWMgX3ByZXNhbGVFbmRUaW1lc3RhbXA7CiAgICAgICAgdWludCBfdG9rZW5QcmVzYWxlc1JhdGU9OTAwOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDFfaWNvc2FsZVN0YXJ0VGltZXN0YW1wOwogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDFfaWNvc2FsZUVuZFRpbWVzdGFtcDsKICAgICAgICB1aW50MjU2IHB1YmxpYyBfYmF0Y2gxX3JhdGU9NDUwOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDJfaWNvc2FsZVN0YXJ0VGltZXN0YW1wOwogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDJfaWNvc2FsZUVuZFRpbWVzdGFtcDsKICAgICAgICB1aW50MjU2IHB1YmxpYyBfYmF0Y2gyX3JhdGU9Mzc1OwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDNfaWNvc2FsZVN0YXJ0VGltZXN0YW1wOwogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDNfaWNvc2FsZUVuZFRpbWVzdGFtcDsKICAgICAgICB1aW50MjU2IHB1YmxpYyBfYmF0Y2gzX3JhdGU9MzAwOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDRfaWNvc2FsZVN0YXJ0VGltZXN0YW1wOwogICAgICAgIHVpbnQyNTYgcHVibGljIF9iYXRjaDRfaWNvc2FsZUVuZFRpbWVzdGFtcDsKICAgICAgICB1aW50MjU2IHB1YmxpYyBfYmF0Y2g0X3JhdGU9MjI1OwoKCiAgICAgICAgZnVuY3Rpb24gU2VsbFRlc3RUb2tlbnMzMDIoYWRkcmVzcyBfZXRoUmVjZWl2ZXIpIHB1YmxpY3sKICAgICAgICAgICAgICAgIF93YWxsZXQ9X2V0aFJlY2VpdmVyOwogICAgICAgICAgICAgICAgX293bmVyPW1zZy5zZW5kZXI7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbigpIHBheWFibGUgcHVibGljewogICAgICAgICAgICAgICAgYnV5VG9rZW5zKCk7ICAgICAgICAKICAgICAgICB9CgogICAgICAgCgogICAgICAgIGZ1bmN0aW9uIGJ1eVRva2VucygpIGludGVybmFsewogICAgICAgICAgICAgICAgaXNzdWVUb2tlbnMobXNnLnNlbmRlcixtc2cudmFsdWUpOwogICAgICAgICAgICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICAgICAgfQoKCiAgICAgICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pOwoKICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCiAgICB9CiAgICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b2tlbnMpeyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdG9rZW5zID0gX2Ftb3VudCpfdG9rZW5QcmVzYWxlc1JhdGU7CiAgICAgICAgICAgIHJldHVybiB0b2tlbnM7CiAgICB9CgoKCiAgICAgICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfdG9rZW5CdXllciwgdWludCBfdmFsdWVvZlRva2VucykgaW50ZXJuYWwgewogICAgICAgICAgICAgICAgdWludCBfYW1vdW50b2ZUb2tlbnM9Y2FsY3VsYXRlVG9rZW5zKF92YWx1ZW9mVG9rZW5zKTsKICAgICAgICAgICAgICBfdHJhbnNmZXIoX293bmVyLF90b2tlbkJ1eWVyLF9hbW91bnRvZlRva2Vucyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXlnYXNmdW5kcygpaW50ZXJuYWx7CiAgICAgICAgICAgICBfZ2Fzbm9kZS50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKWludGVybmFsIHsKICAgICAgICAgICAgICAgICByZXF1aXJlKG1zZy52YWx1ZT4wKTsKICAgICAgICAgICAgICAgIF93YWxsZXQudHJhbnNmZXIoKG1zZy52YWx1ZSAqIDk1MCkvMTAwMCk7CiAgICAgICAgICAgICAgICBwYXlnYXNmdW5kcygpOwogICAgICAgIH0KfQ=='.
	

]
