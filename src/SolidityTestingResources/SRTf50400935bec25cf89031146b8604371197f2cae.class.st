Class {
	#name : #SRTf50400935bec25cf89031146b8604371197f2cae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf50400935bec25cf89031146b8604371197f2cae >> base64 [
	^ ''.
	

]
