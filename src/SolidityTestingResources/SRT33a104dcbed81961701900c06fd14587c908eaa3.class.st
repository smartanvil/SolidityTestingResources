Class {
	#name : #SRT33a104dcbed81961701900c06fd14587c908eaa3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33a104dcbed81961701900c06fd14587c908eaa3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKY29udHJhY3QgQWNjZXNzQ29udHJvbCB7CiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yQWRkcmVzczsKICAgIHVpbnQxNiBwdWJsaWMgdG90YWxTZXJhcGhpbXMgPSAwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgc2VyYXBoaW1zOwoKICAgIGJvb2wgcHVibGljIGlzTWFpbnRlbmFuY2VNb2RlID0gdHJ1ZTsKIAogICAgbW9kaWZpZXIgb25seUNSRUFUT1IoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNyZWF0b3JBZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlTRVJBUEhJTSgpIHsKICAgICAgICByZXF1aXJlKHNlcmFwaGltc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBpc0NvbnRyYWN0QWN0aXZlIHsKICAgICAgICByZXF1aXJlKCFpc01haW50ZW5hbmNlTW9kZSk7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgLy8gQ29uc3RydWN0b3IKICAgIGZ1bmN0aW9uIEFjY2Vzc0NvbnRyb2woKSBwdWJsaWMgewogICAgICAgIGNyZWF0b3JBZGRyZXNzID0gbXNnLnNlbmRlcjsKICAgIH0KICAgIAoKICAgIGZ1bmN0aW9uIGFkZFNFUkFQSElNKGFkZHJlc3MgX25ld1NlcmFwaGltKSBvbmx5Q1JFQVRPUiBwdWJsaWMgewogICAgICAgIGlmIChzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9PSBmYWxzZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX25ld1NlcmFwaGltXSA9IHRydWU7CiAgICAgICAgICAgIHRvdGFsU2VyYXBoaW1zICs9IDE7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiByZW1vdmVTRVJBUEhJTShhZGRyZXNzIF9vbGRTZXJhcGhpbSkgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpZiAoc2VyYXBoaW1zW19vbGRTZXJhcGhpbV0gPT0gdHJ1ZSkgewogICAgICAgICAgICBzZXJhcGhpbXNbX29sZFNlcmFwaGltXSA9IGZhbHNlOwogICAgICAgICAgICB0b3RhbFNlcmFwaGltcyAtPSAxOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVNYWludGVuYW5jZU1vZGUoYm9vbCBfaXNNYWludGFpbmluZykgb25seUNSRUFUT1IgcHVibGljIHsKICAgICAgICBpc01haW50ZW5hbmNlTW9kZSA9IF9pc01haW50YWluaW5nOwogICAgfQoKICAKfSAKCgoKLyoqCiAqIEB0aXRsZSBFUkM3MjEgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9laXBzL2lzc3Vlcy83MjEKICovCmNvbnRyYWN0IEVSQzcyMSB7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF90b2tlbklkKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX2FwcHJvdmVkLCB1aW50MjU2IF90b2tlbklkKTsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IF9iYWxhbmNlKTsKICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKfQoKCmNvbnRyYWN0IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIHVpbnQgeiA9IHggKyB5OwogICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIGFzc2VydCh4ID49IHkpOwogICAgICB1aW50IHogPSB4IC0geTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZU11bHQodWludCB4LCB1aW50IHkpIHB1cmUgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7CiAgICAgIHVpbnQgeiA9IHggKiB5OwogICAgICBhc3NlcnQoKHggPT0gMCl8fCh6L3ggPT0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIodWludDE2IG1heFJhbmRvbSwgdWludDggbWluLCBhZGRyZXNzIHByaXZhdGVBZGRyZXNzKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50OCkgewogICAgICAgIHVpbnQyNTYgZ2VuTnVtID0gdWludDI1NihibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKSArIHVpbnQyNTYocHJpdmF0ZUFkZHJlc3MpOwogICAgICAgIHJldHVybiB1aW50OChnZW5OdW0gJSAobWF4UmFuZG9tIC0gbWluICsgMSkrbWluKTsKICAgIH0KfQoKCgoKY29udHJhY3QgSU1lZGFsRGF0YSBpcyBBY2Nlc3NDb250cm9sIHsKICAKICAgIG1vZGlmaWVyIG9ubHlPd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KICAgCmZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CmZ1bmN0aW9uIHNldE1heFRva2VuTnVtYmVycygpICBvbmx5Q1JFQVRPUiBleHRlcm5hbDsKZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKZnVuY3Rpb24gdG9rZW5zT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSkgOwpmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MpOwpmdW5jdGlvbiBhcHByb3ZlZEZvcih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSA7CmZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU93bmVyT2YoX3Rva2VuSWQpOwpmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgb25seU93bmVyT2YoX3Rva2VuSWQpOwpmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKZnVuY3Rpb24gX2NyZWF0ZU1lZGFsKGFkZHJlc3MgX3RvLCB1aW50OCBfc2VyaWVzSUQpIG9ubHlTRVJBUEhJTSBwdWJsaWMgOwpmdW5jdGlvbiBnZXRDdXJyZW50VG9rZW5zQnlUeXBlKHVpbnQzMiBfc2VyaWVzSUQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MzIpOwpmdW5jdGlvbiBnZXRNZWRhbFR5cGUgKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCk7CmZ1bmN0aW9uIF9idXJuKHVpbnQyNTYgX3Rva2VuSWQpIG9ubHlPd25lck9mKF90b2tlbklkKSBleHRlcm5hbDsKZnVuY3Rpb24gaXNBcHByb3ZlZEZvcihhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSA7CmZ1bmN0aW9uIGNsZWFyQXBwcm92YWxBbmRUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWw7CmZ1bmN0aW9uIGNsZWFyQXBwcm92YWwoYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGU7CmZ1bmN0aW9uIGFkZFRva2VuKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIDsKZnVuY3Rpb24gcmVtb3ZlVG9rZW4oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZTsKfQoKCi8qKgogKiBAdGl0bGUgRVJDNzIxVG9rZW4KICogR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHJlcXVpcmVkIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVSQzcyMSBzdGFuZGFyZAogKi8KY29udHJhY3QgTWVkYWxEYXRhIGlzIEVSQzcyMSwgQWNjZXNzQ29udHJvbCwgU2FmZU1hdGgsIElNZWRhbERhdGEgewogIAogIC8vIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICB1aW50MjU2IHByaXZhdGUgdG90YWxUb2tlbnM7CgogIC8vIE1hcHBpbmcgZnJvbSB0b2tlbiBJRCB0byBvd25lcgogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHRva2VuT3duZXI7CgovLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gbWVkYWwgdHlwZQogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDgpIHB1YmxpYyBtZWRhbFR5cGU7CiAgCiAgLy8gTWFwcGluZyBmcm9tIHRva2VuIElEIHRvIGFwcHJvdmVkIGFkZHJlc3MKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgdG9rZW5BcHByb3ZhbHM7CgogIC8vIE1hcHBpbmcgZnJvbSBvd25lciB0byBsaXN0IG9mIG93bmVkIHRva2VuIElEcwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NltdKSBwcml2YXRlIG93bmVkVG9rZW5zOwoKICAvLyBNYXBwaW5nIGZyb20gdG9rZW4gSUQgdG8gaW5kZXggb2YgdGhlIG93bmVyIHRva2VucyBsaXN0CiAgbWFwcGluZyh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZWRUb2tlbnNJbmRleDsKICAKICB1aW50MzJbMTJdIHB1YmxpYyBjdXJyZW50VG9rZW5OdW1iZXJzOwogIAogIHVpbnQzMlsxMl0gcHVibGljIG1heFRva2VuTnVtYmVyczsKCgoKCgogIC8qKgogICogQGRldiBHdWFyYW50ZWVzIG1zZy5zZW5kZXIgaXMgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuCiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gdmFsaWRhdGUgaXRzIG93bmVyc2hpcCBiZWxvbmdzIHRvIG1zZy5zZW5kZXIKICAqLwogIG1vZGlmaWVyIG9ubHlPd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgc3RvcmVkIGJ5IHRoZSBjb250cmFjdAogICogQHJldHVybiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VucwogICovCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gdG90YWxUb2tlbnM7CiAgfQogIAogIGZ1bmN0aW9uIHNldE1heFRva2VuTnVtYmVycygpIG9ubHlDUkVBVE9SIGV4dGVybmFsICB7CiAgICAgIG1heFRva2VuTnVtYmVyc1swXSA9IDUwMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1sxXSA9IDUwMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1syXSA9IDUwMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1szXSA9IDUwMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1s0XSA9IDUwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzVdID0gNTAwOwogICAgICBtYXhUb2tlbk51bWJlcnNbNl0gPSAyMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1s3XSA9IDIwMDsKICAgICAgbWF4VG9rZW5OdW1iZXJzWzhdID0gMjAwOwogICAgICBtYXhUb2tlbk51bWJlcnNbOV0gPSAxMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1sxMF0gPSAxMDA7CiAgICAgIG1heFRva2VuTnVtYmVyc1sxMV0gPSA1MDsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF9vd25lciBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSBiYWxhbmNlIG9mCiAgKiBAcmV0dXJuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBvd25lZFRva2Vuc1tfb3duZXJdLmxlbmd0aDsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBsaXN0IG9mIHRva2VucyBvd25lZCBieSBhIGdpdmVuIGFkZHJlc3MKICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyB0byBxdWVyeSB0aGUgdG9rZW5zIG9mCiAgKiBAcmV0dXJuIHVpbnQyNTZbXSByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2YgdG9rZW5zIG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcwogICovCiAgZnVuY3Rpb24gdG9rZW5zT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSkgewogICAgcmV0dXJuIG93bmVkVG9rZW5zW19vd25lcl07CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIHF1ZXJ5IHRoZSBvd25lciBvZgogICogQHJldHVybiBvd25lciBhZGRyZXNzIGN1cnJlbnRseSBtYXJrZWQgYXMgdGhlIG93bmVyIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICovCiAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICBhZGRyZXNzIG93bmVyID0gdG9rZW5Pd25lcltfdG9rZW5JZF07CiAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgcmV0dXJuIG93bmVyOwogIH0KCiAgLyoqCiAgICogQGRldiBHZXRzIHRoZSBhcHByb3ZlZCBhZGRyZXNzIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHJldHVybiBhZGRyZXNzIGN1cnJlbnRseSBhcHByb3ZlZCB0byB0YWtlIG93bmVyc2hpcCBvZiB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlZEZvcih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzKSB7CiAgICByZXR1cm4gdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdOwogIH0KCiAgLyoqCiAgKiBAZGV2IFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQgdG8gYW5vdGhlciBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBjbGVhckFwcHJvdmFsQW5kVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgQXBwcm92ZXMgYW5vdGhlciBhZGRyZXNzIHRvIGNsYWltIGZvciB0aGUgb3duZXJzaGlwIG9mIHRoZSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90byBhZGRyZXNzIHRvIGJlIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSBhcHByb3ZlZAogICovCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIG9ubHlPd25lck9mKF90b2tlbklkKSB7CiAgICBhZGRyZXNzIG93bmVyID0gb3duZXJPZihfdG9rZW5JZCk7CiAgICByZXF1aXJlKF90byAhPSBvd25lcik7CiAgICBpZiAoYXBwcm92ZWRGb3IoX3Rva2VuSWQpICE9IDAgfHwgX3RvICE9IDApIHsKICAgICAgdG9rZW5BcHByb3ZhbHNbX3Rva2VuSWRdID0gX3RvOwogICAgICBBcHByb3ZhbChvd25lciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CiAgfQoKICAvKioKICAqIEBkZXYgQ2xhaW1zIHRoZSBvd25lcnNoaXAgb2YgYSBnaXZlbiB0b2tlbiBJRAogICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIGJlaW5nIGNsYWltZWQgYnkgdGhlIG1zZy5zZW5kZXIKICAqLwogIGZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIHJlcXVpcmUoaXNBcHByb3ZlZEZvcihtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgY2xlYXJBcHByb3ZhbEFuZFRyYW5zZmVyKG93bmVyT2YoX3Rva2VuSWQpLCBtc2cuc2VuZGVyLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgTWludCB0b2tlbiBmdW5jdGlvbgogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgb3duIHRoZSBtaW50ZWQgdG9rZW4KICAqLwogIAogIGZ1bmN0aW9uIF9jcmVhdGVNZWRhbChhZGRyZXNzIF90bywgdWludDggX3Nlcmllc0lEKSAgb25seVNFUkFQSElNIHB1YmxpYyB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgaWYgKGN1cnJlbnRUb2tlbk51bWJlcnNbX3Nlcmllc0lEXSA8PSBtYXhUb2tlbk51bWJlcnNbX3Nlcmllc0lEXSkgewogICAgbWVkYWxUeXBlW3RvdGFsVG9rZW5zXSA9IF9zZXJpZXNJRDsKICAgIGN1cnJlbnRUb2tlbk51bWJlcnNbX3Nlcmllc0lEXT0gY3VycmVudFRva2VuTnVtYmVyc1tfc2VyaWVzSURdKzE7CiAgICBhZGRUb2tlbihfdG8sIHRvdGFsVG9rZW5zKTsKICAgIFRyYW5zZmVyKDB4MCwgX3RvLCB0b3RhbFRva2Vucyk7CiAgfQogIH0KCgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFRva2Vuc0J5VHlwZSh1aW50MzIgX3Nlcmllc0lEKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDMyKSB7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRUb2tlbk51bWJlcnNbX3Nlcmllc0lEXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNZWRhbFR5cGUgKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiBtZWRhbFR5cGVbX3Rva2VuSWRdOwogICAgfQogIC8qKgogICogQGRldiBCdXJucyBhIHNwZWNpZmljIHRva2VuCiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gYmVpbmcgYnVybmVkIGJ5IHRoZSBtc2cuc2VuZGVyCiAgKi8KICBmdW5jdGlvbiBfYnVybih1aW50MjU2IF90b2tlbklkKSBvbmx5T3duZXJPZihfdG9rZW5JZCkgZXh0ZXJuYWwgewogICAgaWYgKGFwcHJvdmVkRm9yKF90b2tlbklkKSAhPSAwKSB7CiAgICAgIGNsZWFyQXBwcm92YWwobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgfQogICAgcmVtb3ZlVG9rZW4obXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAgKiBAZGV2IFRlbGxzIHdoZXRoZXIgdGhlIG1zZy5zZW5kZXIgaXMgYXBwcm92ZWQgZm9yIHRoZSBnaXZlbiB0b2tlbiBJRCBvciBub3QKICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBwcml2YXRlIHNvIGl0IGNhbiBiZSBleHRlbmRlZCBpbiBmdXJ0aGVyIGltcGxlbWVudGF0aW9ucyBsaWtlIHRoZSBvcGVyYXRhYmxlIEVSQzcyMQogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBvZiB0aGUgb3duZXIgdG8gcXVlcnkgdGhlIGFwcHJvdmFsIG9mCiAgICogQHBhcmFtIF90b2tlbklkIHVpbnQyNTYgSUQgb2YgdGhlIHRva2VuIHRvIHF1ZXJ5IHRoZSBhcHByb3ZhbCBvZgogICAqIEByZXR1cm4gYm9vbCB3aGV0aGVyIHRoZSBtc2cuc2VuZGVyIGlzIGFwcHJvdmVkIGZvciB0aGUgZ2l2ZW4gdG9rZW4gSUQgb3Igbm90CiAgICovCiAgZnVuY3Rpb24gaXNBcHByb3ZlZEZvcihhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gYXBwcm92ZWRGb3IoX3Rva2VuSWQpID09IF9vd25lcjsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjbGVhciBjdXJyZW50IGFwcHJvdmFsIGFuZCB0cmFuc2ZlciB0aGUgb3duZXJzaGlwIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0aGUgdG9rZW4gdG8KICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICovCiAgZnVuY3Rpb24gY2xlYXJBcHByb3ZhbEFuZFRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3RvICE9IG93bmVyT2YoX3Rva2VuSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gX2Zyb20pOwoKICAgIGNsZWFyQXBwcm92YWwoX2Zyb20sIF90b2tlbklkKTsKICAgIHJlbW92ZVRva2VuKF9mcm9tLCBfdG9rZW5JZCk7CiAgICBhZGRUb2tlbihfdG8sIF90b2tlbklkKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjbGVhciBjdXJyZW50IGFwcHJvdmFsIG9mIGEgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICovCiAgZnVuY3Rpb24gY2xlYXJBcHByb3ZhbChhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKG93bmVyT2YoX3Rva2VuSWQpID09IF9vd25lcik7CiAgICB0b2tlbkFwcHJvdmFsc1tfdG9rZW5JZF0gPSAwOwogICAgQXBwcm92YWwoX293bmVyLCAwLCBfdG9rZW5JZCk7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZXJuYWwgZnVuY3Rpb24gdG8gYWRkIGEgdG9rZW4gSUQgdG8gdGhlIGxpc3Qgb2YgYSBnaXZlbiBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgcmVwcmVzZW50aW5nIHRoZSBuZXcgb3duZXIgb2YgdGhlIGdpdmVuIHRva2VuIElECiAgKiBAcGFyYW0gX3Rva2VuSWQgdWludDI1NiBJRCBvZiB0aGUgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIHRva2VucyBsaXN0IG9mIHRoZSBnaXZlbiBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiBhZGRUb2tlbihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHJpdmF0ZSB7CiAgICByZXF1aXJlKHRva2VuT3duZXJbX3Rva2VuSWRdID09IGFkZHJlc3MoMCkpOwogICAgdG9rZW5Pd25lcltfdG9rZW5JZF0gPSBfdG87CiAgICB1aW50MjU2IGxlbmd0aCA9IGJhbGFuY2VPZihfdG8pOwogICAgb3duZWRUb2tlbnNbX3RvXS5wdXNoKF90b2tlbklkKTsKICAgIG93bmVkVG9rZW5zSW5kZXhbX3Rva2VuSWRdID0gbGVuZ3RoOwogICAgdG90YWxUb2tlbnMgPSBzYWZlQWRkKHRvdGFsVG9rZW5zLCAxKTsKICB9CgogIC8qKgogICogQGRldiBJbnRlcm5hbCBmdW5jdGlvbiB0byByZW1vdmUgYSB0b2tlbiBJRCBmcm9tIHRoZSBsaXN0IG9mIGEgZ2l2ZW4gYWRkcmVzcwogICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgcmVwcmVzZW50aW5nIHRoZSBwcmV2aW91cyBvd25lciBvZiB0aGUgZ2l2ZW4gdG9rZW4gSUQKICAqIEBwYXJhbSBfdG9rZW5JZCB1aW50MjU2IElEIG9mIHRoZSB0b2tlbiB0byBiZSByZW1vdmVkIGZyb20gdGhlIHRva2VucyBsaXN0IG9mIHRoZSBnaXZlbiBhZGRyZXNzCiAgKi8KICBmdW5jdGlvbiByZW1vdmVUb2tlbihhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHsKICAgIHJlcXVpcmUob3duZXJPZihfdG9rZW5JZCkgPT0gX2Zyb20pOwoKICAgIHVpbnQyNTYgdG9rZW5JbmRleCA9IG93bmVkVG9rZW5zSW5kZXhbX3Rva2VuSWRdOwogICAgdWludDI1NiBsYXN0VG9rZW5JbmRleCA9IHNhZmVTdWJ0cmFjdChiYWxhbmNlT2YoX2Zyb20pLDEpOwogICAgdWludDI1NiBsYXN0VG9rZW4gPSBvd25lZFRva2Vuc1tfZnJvbV1bbGFzdFRva2VuSW5kZXhdOwoKICAgIHRva2VuT3duZXJbX3Rva2VuSWRdID0gMDsKICAgIG93bmVkVG9rZW5zW19mcm9tXVt0b2tlbkluZGV4XSA9IGxhc3RUb2tlbjsKICAgIG93bmVkVG9rZW5zW19mcm9tXVtsYXN0VG9rZW5JbmRleF0gPSAwOwogICAgLy8gTm90ZSB0aGF0IHRoaXMgd2lsbCBoYW5kbGUgc2luZ2xlLWVsZW1lbnQgYXJyYXlzLiBJbiB0aGF0IGNhc2UsIGJvdGggdG9rZW5JbmRleCBhbmQgbGFzdFRva2VuSW5kZXggYXJlIGdvaW5nIHRvCiAgICAvLyBiZSB6ZXJvLiBUaGVuIHdlIGNhbiBtYWtlIHN1cmUgdGhhdCB3ZSB3aWxsIHJlbW92ZSBfdG9rZW5JZCBmcm9tIHRoZSBvd25lZFRva2VucyBsaXN0IHNpbmNlIHdlIGFyZSBmaXJzdCBzd2FwcGluZwogICAgLy8gdGhlIGxhc3RUb2tlbiB0byB0aGUgZmlyc3QgcG9zaXRpb24sIGFuZCB0aGVuIGRyb3BwaW5nIHRoZSBlbGVtZW50IHBsYWNlZCBpbiB0aGUgbGFzdCBwb3NpdGlvbiBvZiB0aGUgbGlzdAoKICAgIG93bmVkVG9rZW5zW19mcm9tXS5sZW5ndGgtLTsKICAgIG93bmVkVG9rZW5zSW5kZXhbX3Rva2VuSWRdID0gMDsKICAgIG93bmVkVG9rZW5zSW5kZXhbbGFzdFRva2VuXSA9IHRva2VuSW5kZXg7CiAgICB0b3RhbFRva2VucyA9IHNhZmVTdWJ0cmFjdCh0b3RhbFRva2VucywxKTsKICB9Cn0='.
	

]
