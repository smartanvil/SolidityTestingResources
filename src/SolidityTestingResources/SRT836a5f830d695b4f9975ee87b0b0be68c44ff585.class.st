Class {
	#name : #SRT836a5f830d695b4f9975ee87b0b0be68c44ff585,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT836a5f830d695b4f9975ee87b0b0be68c44ff585 >> base64 [
	^ ''.
	

]
