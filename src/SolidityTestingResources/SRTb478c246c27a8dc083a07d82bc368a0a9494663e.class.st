Class {
	#name : #SRTb478c246c27a8dc083a07d82bc368a0a9494663e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb478c246c27a8dc083a07d82bc368a0a9494663e >> base64 [
	^ ''.
	

]
