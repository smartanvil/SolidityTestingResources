Class {
	#name : #SRT0ef3d116c56c092d37e15017accd6f8fdfdd85f4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0ef3d116c56c092d37e15017accd6f8fdfdd85f4 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgovKioKICogQHRpdGxlIG93bmVkCiAqIEBkZXYgVGhlIG93bmVkIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9CgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgdWludDI1NiAgICAgICBfc3VwcGx5OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSAgICBfYmFsYW5jZXM7CiAgICAKICAgIGV2ZW50IFRyYW5zZmVyKCBhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiBCYXNpY1Rva2VuKCkgcHVibGljIHsgICAgfQogICAgCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gX3N1cHBseTsKICAgIH0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfYmFsYW5jZXNbX293bmVyXTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICAKICAgICAgICBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPV9iYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBfYmFsYW5jZXNbX3RvXSA9X2JhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgZW1pdCBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgCn0KCmNvbnRyYWN0IERCVG9rZW4gaXMgQmFzaWNUb2tlbixvd25lZCB7CiAgICBzdHJpbmcgIGNvbnN0YW50IHB1YmxpYyBzeW1ib2wgPSAiREIiOwogICAgc3RyaW5nICBjb25zdGFudCBwdWJsaWMgbmFtZSA9ICJEaWdpdGFsIEJsb2NrIjsKICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIGRlY2ltYWxzID02OyAKICAgIHVpbnQyNTYgcHVibGljIGxvY2tlZENvdW50cyA9IDgqKDEwKio4KSooMTAqKjYpOwogICAgdWludDI1NiBwdWJsaWMgZWFjaFVubG9ja0NvdW50cyA9IDIqKDEwKio4KSooMTAqKjYpOwogICAgLy9jcm93ZFNhbGUgZW5kIHRpbWUsIE1heS8xMC8yMDE4CiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNTI1ODgxNjAwOwoKICAgIHN0cnVjdCBMb2NrU3RydWN0IHsKICAgICAgICB1aW50MjU2IHVubG9ja1RpbWU7CiAgICAgICAgYm9vbCBsb2NrZWQ7CiAgICB9CgogICAgTG9ja1N0cnVjdFtdIHB1YmxpYyB1bmxvY2tUaW1lTWFwOwoKICAgIGZ1bmN0aW9uIERCVG9rZW4oKSBwdWJsaWMgewogICAgICAgIF9zdXBwbHkgPTUwKigxMCoqOCkqKDEwKio2KTsKICAgICAgICBfYmFsYW5jZXNbMHgwMV0gPSBsb2NrZWRDb3VudHM7CiAgICAgICAgIF9iYWxhbmNlc1ttc2cuc2VuZGVyXSA9X3N1cHBseS5zdWIobG9ja2VkQ291bnRzKTsKCiAgICAgICAgLy8gTm92ZW1iZXIvMTAvMjAxOAogICAgICAgIHVubG9ja1RpbWVNYXAucHVzaChMb2NrU3RydWN0KHt1bmxvY2tUaW1lOjE1NDE3NzkyMDAsIGxvY2tlZDogdHJ1ZX0pKTsgCiAgICAgICAgLy8gTWF5LzEwLzIwMTkKICAgICAgICB1bmxvY2tUaW1lTWFwLnB1c2goTG9ja1N0cnVjdCh7dW5sb2NrVGltZToxNTU3NDE3NjAwLCBsb2NrZWQ6IHRydWV9KSk7IAogICAgICAgIC8vIE5vdmVtYmVyLzEwLzIwMTkKICAgICAgICB1bmxvY2tUaW1lTWFwLnB1c2goTG9ja1N0cnVjdCh7dW5sb2NrVGltZToxNTczMzE1MjAwLCBsb2NrZWQ6IHRydWV9KSk7IAogICAgICAgIC8vIE1heS8xMC8yMDIwCiAgICAgICAgdW5sb2NrVGltZU1hcC5wdXNoKExvY2tTdHJ1Y3Qoe3VubG9ja1RpbWU6MTU4OTA0MDAwMCwgbG9ja2VkOiB0cnVlfSkpOyAKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZSAobm93ID49IHN0YXJ0VGltZSk7CgogICAgICAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGlzdHJpYnV0ZShhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewoKICAgICAgICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiB1bmxvY2sgLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgb3duZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVubG9jayh1aW50MjU2IF9pbmRleCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfaW5kZXg+PTAgJiYgX2luZGV4PHVubG9ja1RpbWVNYXAubGVuZ3RoKTsKICAgICAgICByZXF1aXJlKG5vdyA+PSB1bmxvY2tUaW1lTWFwW19pbmRleF0udW5sb2NrVGltZSAmJiB1bmxvY2tUaW1lTWFwW19pbmRleF0ubG9ja2VkKTsKICAgICAgICByZXF1aXJlKF9iYWxhbmNlc1sweDAxXSA+PSBlYWNoVW5sb2NrQ291bnRzKTsKCiAgICAgICAgX2JhbGFuY2VzWzB4MDFdID1fYmFsYW5jZXNbMHgwMV0uc3ViKGVhY2hVbmxvY2tDb3VudHMpOwogICAgICAgIF9iYWxhbmNlc1tvd25lcl0gPV9iYWxhbmNlc1tvd25lcl0uYWRkKGVhY2hVbmxvY2tDb3VudHMpOwoKICAgICAgICBsb2NrZWRDb3VudHMgPWxvY2tlZENvdW50cy5zdWIoZWFjaFVubG9ja0NvdW50cyk7CiAgICAgICAgdW5sb2NrVGltZU1hcFtfaW5kZXhdLmxvY2tlZCA9IGZhbHNlOwoKICAgICAgICBlbWl0IFRyYW5zZmVyKDB4MDEsIG93bmVyLCBlYWNoVW5sb2NrQ291bnRzKTsKICAgIH0KfQ=='.
	

]
