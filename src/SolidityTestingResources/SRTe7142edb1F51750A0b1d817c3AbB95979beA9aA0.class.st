Class {
	#name : #SRTe7142edb1F51750A0b1d817c3AbB95979beA9aA0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe7142edb1F51750A0b1d817c3AbB95979beA9aA0 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIGlmIChwYXVzZWQpIHRocm93OwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkIHsKICAgIGlmICghcGF1c2VkKSB0aHJvdzsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IHRydWU7CiAgICBQYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcmV0dXJucyAoYm9vbCkgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcwogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKfQoKCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuCiAqLwpjb250cmFjdCBCYXNpY1Rva2VuIGlzIEVSQzIwQmFzaWMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CgogIC8qKgogICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICovCiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQyNTYgc2l6ZSkgewogICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KSB7CiAgICAgICB0aHJvdzsKICAgICB9CiAgICAgXzsKICB9CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgewogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgoKLyoqCiAqIEB0aXRsZSBIZWxwcyBjb250cmFjdHMgZ3VhcmQgYWdhaW5zIHJlbnRyYW5jeSBhdHRhY2tzLgogKiBAYXV0aG9yIFJlbWNvIEJsb2VtZW4gPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIwMjcwNjc2ZjYxNmQ0MjMwIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPs+ALmNvbT4KICogQG5vdGljZSBJZiB5b3UgbWFyayBhIGZ1bmN0aW9uIGBub25SZWVudHJhbnRgLCB5b3Ugc2hvdWxkIGFsc28KICogbWFyayBpdCBgZXh0ZXJuYWxgLgogKi8KY29udHJhY3QgUmVlbnRyYW5jeUd1YXJkIHsKCiAgLyoqCiAgICogQGRldiBXZSB1c2UgYSBzaW5nbGUgbG9jayBmb3IgdGhlIHdob2xlIGNvbnRyYWN0LgogICAqLwogIGJvb2wgcHJpdmF0ZSByZW50cmFuY3lfbG9jayA9IGZhbHNlOwoKICAvKioKICAgKiBAZGV2IFByZXZlbnRzIGEgY29udHJhY3QgZnJvbSBjYWxsaW5nIGl0c2VsZiwgZGlyZWN0bHkgb3IgaW5kaXJlY3RseS4KICAgKiBAbm90aWNlIElmIHlvdSBtYXJrIGEgZnVuY3Rpb24gYG5vblJlZW50cmFudGAsIHlvdSBzaG91bGQgYWxzbwogICAqIG1hcmsgaXQgYGV4dGVybmFsYC4gQ2FsbGluZyBvbmUgbm9uUmVlbnRyYW50IGZ1bmN0aW9uIGZyb20KICAgKiBhbm90aGVyIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIHlvdSBjYW4gaW1wbGVtZW50IGEKICAgKiBgcHJpdmF0ZWAgZnVuY3Rpb24gZG9pbmcgdGhlIGFjdHVhbCB3b3JrLCBhbmQgYSBgZXh0ZXJuYWxgCiAgICogd3JhcHBlciBtYXJrZWQgYXMgYG5vblJlZW50cmFudGAuCiAgICovCiAgbW9kaWZpZXIgbm9uUmVlbnRyYW50KCkgewogICAgaWYocmVudHJhbmN5X2xvY2sgPT0gZmFsc2UpIHsKICAgICAgcmVudHJhbmN5X2xvY2sgPSB0cnVlOwogICAgICBfOwogICAgICByZW50cmFuY3lfbG9jayA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQoKfQoKY29udHJhY3QgRXRjaFJld2FyZCBpcyBQYXVzYWJsZSwgQmFzaWNUb2tlbiwgUmVlbnRyYW5jeUd1YXJkIHsKCiAgICAvLyBhZGRyZXNzIHB1YmxpYyBvd25lcjsgICAgICAgICAgICAgICAgLy8gT3duYWJsZQogICAgLy8gYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7ICAgICAgICAgIC8vIFBhdXNhYmxlCiAgICAvLyBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7ICAgLy8gQmFzaWNUb2tlbgogICAgLy8gdWludCBwdWJsaWMgdG90YWxTdXBwbHk7ICAgICAgICAgICAgIC8vIEVSQzIwQmFzaWMKICAgIC8vIGJvb2wgcHJpdmF0ZSByZW50cmFuY3lfbG9jayA9IGZhbHNlOyAvLyBSZWVudHJhbmN5R3VhcmQKCiAgICAvLwogICAgLy8gQGRldiBjb25zdGFudHMKICAgIC8vCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgICA9ICJFdGNoIFJld2FyZCBUb2tlbiI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJFVENIUiI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAgIC8vCiAgICAvLyBAZGV2IHRoZSBtYWluIGFkZHJlc3MgdG8gYmUgZm9yd2FyZGVkIGFsbCBldGhlcgogICAgLy8KICAgIGFkZHJlc3MgcHVibGljIGNvbnN0YW50IEJFTkVGSUNJQVJZID0gMHg2NTFBMzczMWY3MTdhMTc3NzdjOUQ4ZDZmMTUyQWE5Mjg0OTc4RWEzOwoKICAgIC8vIEBkZXYgbnVtYmVyIG9mIHRva2VucyBvbmUgcmVjZWl2ZXMgZm9yIGV2ZXJ5IDEgZXRoZXIgdGhleSBzZW5kCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBQUklDRSA9IDg7CgogICAgLy8gYXZnIGJsb2NrIHRpbWUgPSAxNy4yMCBodHRwczovL2V0aGVyc2Nhbi5pbwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgQVZHX0JMT0NLU18yNEggPSA1MDIzOyAgLy8gMzYwMCAqIDI0IC8gMTcuMjAKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IEFWR19CTE9DS1NfMDJXID0gNzAzMjU7IC8vIDM2MDAgKiAyNCAqIDE0IC8gMTcuMjAKCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBNQVhfRVRIRVJfMjRIID0gNDAgZXRoZXI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBFVEhFUl9DQVAgICAgID0gMjY2MCBldGhlcjsKCiAgICB1aW50IHB1YmxpYyB0b3RhbEV0aGVyID0gMDsKICAgIHVpbnQgcHVibGljIGJsb2NrU3RhcnQgPSAwOwogICAgdWludCBwdWJsaWMgYmxvY2syNGggICA9IDA7CiAgICB1aW50IHB1YmxpYyBibG9jazAydyAgID0gMDsKCiAgICAvLyBAZGV2IGFkZHJlc3Mgb2YgdGhlIGFjdHVhbCBJQ08gY29udHJhY3QgdG8gYmUgZGVwbG95ZWQgbGF0ZXIKICAgIGFkZHJlc3MgcHVibGljIGljb0NvbnRyYWN0ID0gMHgwOwoKICAgIC8vCiAgICAvLyBAZGV2IG93bmVyIGF1dGhvcml6ZWQgYWRkcmVzc2VzIHRvIHBhcnRpY2lwYXRlIGluIHRoaXMgcHJlLWljbwogICAgLy8KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBjb250cmlidXRvcnM7CgoKICAgIC8vIEBkZXYgY29uc3RydWN0b3IgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIEV0Y2hSZXdhcmQodWludCBfYmxvY2tTdGFydCkgewogICAgICAgIGJsb2NrU3RhcnQgID0gX2Jsb2NrU3RhcnQ7CiAgICAgICAgYmxvY2syNGggPSBibG9ja1N0YXJ0ICsgQVZHX0JMT0NLU18yNEg7CiAgICAgICAgYmxvY2swMncgPSBibG9ja1N0YXJ0ICsgQVZHX0JMT0NLU18wMlc7CiAgICB9CgogICAgLy8KICAgIC8vIEBub3RpY2UgdGhlIGFiaWxpdHkgdG8gdHJhbnNmZXIgdG9rZW5zIGlzIGRpc2FibGVkCiAgICAvLwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcywgdWludCkgewogICAgICAgIHRocm93OwogICAgfQoKICAgIC8vCiAgICAvLyBAbm90aWNlIHdlIERPIGFsbG93IHNlbmRpbmcgZXRoZXIgZGlyZWN0bHkgdG8gdGhlIGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsKICAgICAgICBidXkoKTsKICAgIH0KCiAgICAvLwogICAgLy8gQGRldiBtb2RpZmllcnMKICAgIC8vCiAgICBtb2RpZmllciBvbmx5Q29udHJpYnV0b3JzKCkgewogICAgICAgIGlmKGNvbnRyaWJ1dG9yc1ttc2cuc2VuZGVyXSAhPSB0cnVlKSB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlJY29Db250cmFjdCgpIHsKICAgICAgICBpZihpY29Db250cmFjdCA9PSAweDAgfHwgbXNnLnNlbmRlciAhPSBpY29Db250cmFjdCkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLwogICAgLy8gQGRldiBjYWxsIHRoaXMgdG8gYXV0aG9yaXplIHBhcnRpY2lwYW50cyB0byB0aGlzIHByZS1pY28gc2FsZQogICAgLy8gQHBhcmFtIHRoZSBhdXRob3JpemVkIHBhcnRpY2lwYW50IGFkZHJlc3MKICAgIC8vCiAgICBmdW5jdGlvbiBhZGRDb250cmlidXRvcihhZGRyZXNzIF93aG8pIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGNvbnRyaWJ1dG9yc1tfd2hvXSA9IHRydWU7CiAgICB9CgogICAgLy8gQGRldiB1c2VmdWwgZm9yIGNvbnRyaWJ1dG9yIHRvIGNoZWNrIGJlZm9yZSBzZW5kaW5nIGV0aGVyCiAgICBmdW5jdGlvbiBpc0NvbnRyaWJ1dG9yKGFkZHJlc3MgX3dobykgcHVibGljIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBjb250cmlidXRvcnNbX3dob107CiAgICB9CgogICAgLy8KICAgIC8vIEBkZXYgdGhpcyB3aWxsIGJlIGxhdGVyIHNldCBieSB0aGUgb3duZXIgb2YgdGhpcyBjb250cmFjdAogICAgLy8KICAgIGZ1bmN0aW9uIHNldEljb0NvbnRyYWN0KGFkZHJlc3MgX2NvbnRyYWN0KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBpY29Db250cmFjdCA9IF9jb250cmFjdDsKICAgIH0KCiAgICAvLwogICAgLy8gQGRldiBmdW5jdGlvbiBjYWxsZWQgYnkgdGhlIElDTyBjb250cmFjdCB0byB0cmFuc2Zvcm0gdGhlIHRva2VucyBpbnRvIEVUQ0ggdG9rZW5zCiAgICAvLwogICAgZnVuY3Rpb24gbWlncmF0ZShhZGRyZXNzIF9jb250cmlidXRvcikgcHVibGljCiAgICBvbmx5SWNvQ29udHJhY3QKICAgIHdoZW5Ob3RQYXVzZWQgewoKICAgICAgICBpZihnZXRCbG9jaygpIDwgYmxvY2swMncpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKGJhbGFuY2VzW19jb250cmlidXRvcl0pOwogICAgICAgIGJhbGFuY2VzW19jb250cmlidXRvcl0gPSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eSgpIHBheWFibGUKICAgIG5vblJlZW50cmFudAogICAgb25seUNvbnRyaWJ1dG9ycwogICAgd2hlbk5vdFBhdXNlZCB7CgogICAgICAgIGFkZHJlc3MgX3JlY2lwaWVudCA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludCBibG9ja05vdyA9IGdldEJsb2NrKCk7CgogICAgICAgIC8vIGFyZSB3ZSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHNhbGUgcGVyaW9kPwogICAgICAgIGlmKGJsb2NrTm93IDwgYmxvY2tTdGFydCB8fCBibG9jazAydyA8PSBibG9ja05vdykgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgogICAgICAgIGlmIChibG9ja05vdyA8IGJsb2NrMjRoKSB7CgogICAgICAgICAgICAvLyBvbmx5IG9uZSB0cmFuc2FjdGlvbiBpcyBhdXRob3JpemVkCiAgICAgICAgICAgIGlmIChiYWxhbmNlc1tfcmVjaXBpZW50XSA+IDApIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBvbmx5IGFsbG93ZWQgdG8gYnV5IGEgY2VydGFpbiBhbW91bnQKICAgICAgICAgICAgaWYgKG1zZy52YWx1ZSA+IE1BWF9FVEhFUl8yNEgpIHsKICAgICAgICAgICAgICAgIHRocm93OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgZ28gb3ZlciB0aGUgZXRoZXIgY2FwCiAgICAgICAgaWYgKHRvdGFsRXRoZXIuYWRkKG1zZy52YWx1ZSkgPiBFVEhFUl9DQVApIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICB1aW50IHRva2VucyA9IG1zZy52YWx1ZS5tdWwoUFJJQ0UpOwogICAgICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKHRva2Vucyk7CgogICAgICAgIGJhbGFuY2VzW19yZWNpcGllbnRdID0gYmFsYW5jZXNbX3JlY2lwaWVudF0uYWRkKHRva2Vucyk7CiAgICAgICAgdG90YWxFdGhlci5hZGQobXNnLnZhbHVlKTsKCiAgICAgICAgaWYgKCFCRU5FRklDSUFSWS5zZW5kKG1zZy52YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJsb2NrKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYmxvY2subnVtYmVyOwogICAgfQoKfQ=='.
	

]
