Class {
	#name : #SRT177d39ac676ed1c67a2b268ad7f1e58826e5b0af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT177d39ac676ed1c67a2b268ad7f1e58826e5b0af >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCi8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIHVpbnQgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgewogICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgdGhyb3c7CiAgICB9CiAgfQp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIExpbWl0ZWRUcmFuc2ZlclRva2VuCiAqIEBkZXYgTGltaXRlZFRyYW5zZmVyVG9rZW4gZGVmaW5lcyB0aGUgZ2VuZXJpYyBpbnRlcmZhY2UgYW5kIHRoZSBpbXBsZW1lbnRhdGlvbiB0byBsaW1pdCB0b2tlbiAKICogdHJhbnNmZXJhYmlsaXR5IGZvciBkaWZmZXJlbnQgZXZlbnRzLiBJdCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGFzIGEgYmFzZSBjbGFzcyBmb3Igb3RoZXIgdG9rZW4gCiAqIGNvbnRyYWN0cy4gCiAqIExpbWl0ZWRUcmFuc2ZlclRva2VuIGhhcyBiZWVuIGRlc2lnbmVkIHRvIGFsbG93IGZvciBkaWZmZXJlbnQgbGltaXRpbmcgZmFjdG9ycywKICogdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmVjdXJzaXZlbHkgY2FsbGluZyBzdXBlci50cmFuc2ZlcmFibGVUb2tlbnMoKSB1bnRpbCB0aGUgYmFzZSBjbGFzcyBpcyAKICogaGl0LiBGb3IgZXhhbXBsZToKICogICAgIGZ1bmN0aW9uIHRyYW5zZmVyYWJsZVRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDY0IHRpbWUpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAqICAgICAgIHJldHVybiBtaW4yNTYodW5sb2NrZWRUb2tlbnMsIHN1cGVyLnRyYW5zZmVyYWJsZVRva2Vucyhob2xkZXIsIHRpbWUpKTsKICogICAgIH0KICogQSB3b3JraW5nIGV4YW1wbGUgaXMgVmVzdGVkVG9rZW4uc29sOgogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy90b2tlbi9WZXN0ZWRUb2tlbi5zb2wKICovCgpjb250cmFjdCBMaW1pdGVkVHJhbnNmZXJUb2tlbiBpcyBFUkMyMCB7CgogIC8qKgogICAqIEBkZXYgQ2hlY2tzIHdoZXRoZXIgaXQgY2FuIHRyYW5zZmVyIG9yIG90aGVyd2lzZSB0aHJvd3MuCiAgICovCiAgbW9kaWZpZXIgY2FuVHJhbnNmZXIoYWRkcmVzcyBfc2VuZGVyLCB1aW50IF92YWx1ZSkgewogICBpZiAoX3ZhbHVlID4gdHJhbnNmZXJhYmxlVG9rZW5zKF9zZW5kZXIsIHVpbnQ2NChub3cpKSkgdGhyb3c7CiAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IENoZWNrcyBtb2RpZmllciBhbmQgYWxsb3dzIHRyYW5zZmVyIGlmIHRva2VucyBhcmUgbm90IGxvY2tlZC4KICAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNpZXZlIHRoZSB0b2tlbnMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZC4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGNhblRyYW5zZmVyKG1zZy5zZW5kZXIsIF92YWx1ZSkgewogICByZXR1cm4gc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgKiBAZGV2IENoZWNrcyBtb2RpZmllciBhbmQgYWxsb3dzIHRyYW5zZmVyIGlmIHRva2VucyBhcmUgbm90IGxvY2tlZC4KICAqIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgc2VuZCB0aGUgdG9rZW5zLgogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjaWV2ZSB0aGUgdG9rZW5zLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGNhblRyYW5zZmVyKF9mcm9tLCBfdmFsdWUpIHsKICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWZhdWx0IHRyYW5zZmVyYWJsZSB0b2tlbnMgZnVuY3Rpb24gcmV0dXJucyBhbGwgdG9rZW5zIGZvciBhIGhvbGRlciAobm8gbGltaXQpLgogICAqIEBkZXYgT3ZlcndyaXRpbmcgdHJhbnNmZXJhYmxlVG9rZW5zKGFkZHJlc3MgaG9sZGVyLCB1aW50NjQgdGltZSkgaXMgdGhlIHdheSB0byBwcm92aWRlIHRoZSAKICAgKiBzcGVjaWZpYyBsb2dpYyBmb3IgbGltaXRpbmcgdG9rZW4gdHJhbnNmZXJhYmlsaXR5IGZvciBhIGhvbGRlciBvdmVyIHRpbWUuCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJhYmxlVG9rZW5zKGFkZHJlc3MgaG9sZGVyLCB1aW50NjQgdGltZSkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBiYWxhbmNlT2YoaG9sZGVyKTsKICB9Cn0KCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKICAvKioKICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkgewogICAgICAgdGhyb3c7CiAgICAgfQogICAgIF87CiAgfQoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1hbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcnQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgQmFzaWNUb2tlbiwgRVJDMjAgewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50IHRoZSBhbW91dCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHsKICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAvLyBpZiAoX3ZhbHVlID4gX2FsbG93YW5jZSkgdGhyb3c7CgogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7CiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHJvdmUgdGhlIHBhc3NlZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWFobGYgb2YgbXNnLnNlbmRlci4KICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBzcGVuZCB0aGUgZnVuZHMuCiAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgKi8KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSB7CgogICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSB0aHJvdzsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGFuIGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludCBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKfQoKCi8qKgogKiBAdGl0bGUgVmVzdGVkIHRva2VuCiAqIEBkZXYgVG9rZW5zIHRoYXQgY2FuIGJlIHZlc3RlZCBmb3IgYSBncm91cCBvZiBhZGRyZXNzZXMuCiAqLwpjb250cmFjdCBWZXN0ZWRUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBMaW1pdGVkVHJhbnNmZXJUb2tlbiB7CgogIHVpbnQyNTYgTUFYX0dSQU5UU19QRVJfQUREUkVTUyA9IDIwOwoKICBzdHJ1Y3QgVG9rZW5HcmFudCB7CiAgICBhZGRyZXNzIGdyYW50ZXI7ICAgICAvLyAyMCBieXRlcwogICAgdWludDI1NiB2YWx1ZTsgICAgICAgLy8gMzIgYnl0ZXMKICAgIHVpbnQ2NCBjbGlmZjsKICAgIHVpbnQ2NCB2ZXN0aW5nOwogICAgdWludDY0IHN0YXJ0OyAgICAgICAgLy8gMyAqIDggPSAyNCBieXRlcwogICAgYm9vbCByZXZva2FibGU7CiAgICBib29sIGJ1cm5zT25SZXZva2U7ICAvLyAyICogMSA9IDIgYml0cz8gb3IgMiBieXRlcz8KICB9IC8vIHRvdGFsIDc4IGJ5dGVzID0gMyBzc3RvcmUgcGVyIG9wZXJhdGlvbiAoMzIgcGVyIHNzdG9yZSkKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBUb2tlbkdyYW50W10pIHB1YmxpYyBncmFudHM7CgogIGV2ZW50IE5ld1Rva2VuR3JhbnQoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSwgdWludDI1NiBncmFudElkKTsKCiAgLyoqCiAgICogQGRldiBHcmFudCB0b2tlbnMgdG8gYSBzcGVjaWZpZWQgYWRkcmVzcwogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB0aGUgdG9rZW5zIHdpbGwgYmUgZ3JhbnRlZCB0by4KICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgZ3JhbnRlZC4KICAgKiBAcGFyYW0gX3N0YXJ0IHVpbnQ2NCBUaW1lIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGdyYW50LgogICAqIEBwYXJhbSBfY2xpZmYgdWludDY0IFRpbWUgb2YgdGhlIGNsaWZmIHBlcmlvZC4KICAgKiBAcGFyYW0gX3Zlc3RpbmcgdWludDY0IFRoZSB2ZXN0aW5nIHBlcmlvZC4KICAgKi8KICBmdW5jdGlvbiBncmFudFZlc3RlZFRva2VucygKICAgIGFkZHJlc3MgX3RvLAogICAgdWludDI1NiBfdmFsdWUsCiAgICB1aW50NjQgX3N0YXJ0LAogICAgdWludDY0IF9jbGlmZiwKICAgIHVpbnQ2NCBfdmVzdGluZywKICAgIGJvb2wgX3Jldm9rYWJsZSwKICAgIGJvb2wgX2J1cm5zT25SZXZva2UKICApIHB1YmxpYyB7CgogICAgLy8gQ2hlY2sgZm9yIGRhdGUgaW5jb25zaXN0ZW5jaWVzIHRoYXQgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3IKICAgIGlmIChfY2xpZmYgPCBfc3RhcnQgfHwgX3Zlc3RpbmcgPCBfY2xpZmYpIHsKICAgICAgdGhyb3c7CiAgICB9CgogICAgaWYgKHRva2VuR3JhbnRzQ291bnQoX3RvKSA+IE1BWF9HUkFOVFNfUEVSX0FERFJFU1MpIHRocm93OyAgIC8vIFRvIHByZXZlbnQgYSB1c2VyIGJlaW5nIHNwYW1tZWQgYW5kIGhhdmUgaGlzIGJhbGFuY2UgbG9ja2VkIChvdXQgb2YgZ2FzIGF0dGFjayB3aGVuIGNhbGN1bGF0aW5nIHZlc3RpbmcpLgoKICAgIHVpbnQgY291bnQgPSBncmFudHNbX3RvXS5wdXNoKAogICAgICAgICAgICAgICAgVG9rZW5HcmFudCgKICAgICAgICAgICAgICAgICAgX3Jldm9rYWJsZSA/IG1zZy5zZW5kZXIgOiAwLCAvLyBhdm9pZCBzdG9yaW5nIGFuIGV4dHJhIDIwIGJ5dGVzIHdoZW4gaXQgaXMgbm9uLXJldm9rYWJsZQogICAgICAgICAgICAgICAgICBfdmFsdWUsCiAgICAgICAgICAgICAgICAgIF9jbGlmZiwKICAgICAgICAgICAgICAgICAgX3Zlc3RpbmcsCiAgICAgICAgICAgICAgICAgIF9zdGFydCwKICAgICAgICAgICAgICAgICAgX3Jldm9rYWJsZSwKICAgICAgICAgICAgICAgICAgX2J1cm5zT25SZXZva2UKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICApOwoKICAgIHRyYW5zZmVyKF90bywgX3ZhbHVlKTsKCiAgICBOZXdUb2tlbkdyYW50KG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBjb3VudCAtIDEpOwogIH0KCiAgLyoqCiAgICogQGRldiBSZXZva2UgdGhlIGdyYW50IG9mIHRva2VucyBvZiBhIHNwZWNpZmVkIGFkZHJlc3MuCiAgICogQHBhcmFtIF9ob2xkZXIgVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBoYXZlIGl0cyB0b2tlbnMgcmV2b2tlZC4KICAgKiBAcGFyYW0gX2dyYW50SWQgVGhlIGlkIG9mIHRoZSB0b2tlbiBncmFudC4KICAgKi8KICBmdW5jdGlvbiByZXZva2VUb2tlbkdyYW50KGFkZHJlc3MgX2hvbGRlciwgdWludCBfZ3JhbnRJZCkgcHVibGljIHsKICAgIFRva2VuR3JhbnQgZ3JhbnQgPSBncmFudHNbX2hvbGRlcl1bX2dyYW50SWRdOwoKICAgIGlmICghZ3JhbnQucmV2b2thYmxlKSB7IC8vIENoZWNrIGlmIGdyYW50IHdhcyByZXZva2FibGUKICAgICAgdGhyb3c7CiAgICB9CgogICAgaWYgKGdyYW50LmdyYW50ZXIgIT0gbXNnLnNlbmRlcikgeyAvLyBPbmx5IGdyYW50ZXIgY2FuIHJldm9rZSBpdAogICAgICB0aHJvdzsKICAgIH0KCiAgICBhZGRyZXNzIHJlY2VpdmVyID0gZ3JhbnQuYnVybnNPblJldm9rZSA/IDB4ZGVhZCA6IG1zZy5zZW5kZXI7CgogICAgdWludDI1NiBub25WZXN0ZWQgPSBub25WZXN0ZWRUb2tlbnMoZ3JhbnQsIHVpbnQ2NChub3cpKTsKCiAgICAvLyByZW1vdmUgZ3JhbnQgZnJvbSBhcnJheQogICAgZGVsZXRlIGdyYW50c1tfaG9sZGVyXVtfZ3JhbnRJZF07CiAgICBncmFudHNbX2hvbGRlcl1bX2dyYW50SWRdID0gZ3JhbnRzW19ob2xkZXJdW2dyYW50c1tfaG9sZGVyXS5sZW5ndGguc3ViKDEpXTsKICAgIGdyYW50c1tfaG9sZGVyXS5sZW5ndGggLT0gMTsKCiAgICBiYWxhbmNlc1tyZWNlaXZlcl0gPSBiYWxhbmNlc1tyZWNlaXZlcl0uYWRkKG5vblZlc3RlZCk7CiAgICBiYWxhbmNlc1tfaG9sZGVyXSA9IGJhbGFuY2VzW19ob2xkZXJdLnN1Yihub25WZXN0ZWQpOwoKICAgIFRyYW5zZmVyKF9ob2xkZXIsIHJlY2VpdmVyLCBub25WZXN0ZWQpOwogIH0KCgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlIHRoZSB0b3RhbCBhbW91bnQgb2YgdHJhbnNmZXJhYmxlIHRva2VucyBvZiBhIGhvbGRlciBhdCBhIGdpdmVuIHRpbWUKICAgKiBAcGFyYW0gaG9sZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGhvbGRlcgogICAqIEBwYXJhbSB0aW1lIHVpbnQ2NCBUaGUgc3BlY2lmaWMgdGltZS4KICAgKiBAcmV0dXJuIEFuIHVpbnQgcmVwcmVzZW50aW5nIGEgaG9sZGVyJ3MgdG90YWwgYW1vdW50IG9mIHRyYW5zZmVyYWJsZSB0b2tlbnMuCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJhYmxlVG9rZW5zKGFkZHJlc3MgaG9sZGVyLCB1aW50NjQgdGltZSkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgZ3JhbnRJbmRleCA9IHRva2VuR3JhbnRzQ291bnQoaG9sZGVyKTsKCiAgICBpZiAoZ3JhbnRJbmRleCA9PSAwKSByZXR1cm4gYmFsYW5jZU9mKGhvbGRlcik7IC8vIHNob3J0Y3V0IGZvciBob2xkZXIgd2l0aG91dCBncmFudHMKCiAgICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIHRoZSBncmFudHMgdGhlIGhvbGRlciBoYXMsIGFuZCBhZGQgYWxsIG5vbi12ZXN0ZWQgdG9rZW5zCiAgICB1aW50MjU2IG5vblZlc3RlZCA9IDA7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBncmFudEluZGV4OyBpKyspIHsKICAgICAgbm9uVmVzdGVkID0gU2FmZU1hdGguYWRkKG5vblZlc3RlZCwgbm9uVmVzdGVkVG9rZW5zKGdyYW50c1tob2xkZXJdW2ldLCB0aW1lKSk7CiAgICB9CgogICAgLy8gQmFsYW5jZSAtIHRvdGFsTm9uVmVzdGVkIGlzIHRoZSBhbW91bnQgb2YgdG9rZW5zIGEgaG9sZGVyIGNhbiB0cmFuc2ZlciBhdCBhbnkgZ2l2ZW4gdGltZQogICAgdWludDI1NiB2ZXN0ZWRUcmFuc2ZlcmFibGUgPSBTYWZlTWF0aC5zdWIoYmFsYW5jZU9mKGhvbGRlciksIG5vblZlc3RlZCk7CgogICAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIG9mIGhvdyBtYW55IHZlc3RlZCBjYW4gdHJhbnNmZXIgYW5kIG90aGVyIHZhbHVlCiAgICAvLyBpbiBjYXNlIHRoZXJlIGFyZSBvdGhlciBsaW1pdGluZyB0cmFuc2ZlcmFiaWxpdHkgZmFjdG9ycyAoZGVmYXVsdCBpcyBiYWxhbmNlT2YpCiAgICByZXR1cm4gU2FmZU1hdGgubWluMjU2KHZlc3RlZFRyYW5zZmVyYWJsZSwgc3VwZXIudHJhbnNmZXJhYmxlVG9rZW5zKGhvbGRlciwgdGltZSkpOwogIH0KCiAgLyoqCiAgICogQGRldiBDaGVjayB0aGUgYW1vdW50IG9mIGdyYW50cyB0aGF0IGFuIGFkZHJlc3MgaGFzLgogICAqIEBwYXJhbSBfaG9sZGVyIFRoZSBob2xkZXIgb2YgdGhlIGdyYW50cy4KICAgKiBAcmV0dXJuIEEgdWludCByZXByZXNlbnRpbmcgdGhlIHRvdGFsIGFtb3VudCBvZiBncmFudHMuCiAgICovCiAgZnVuY3Rpb24gdG9rZW5HcmFudHNDb3VudChhZGRyZXNzIF9ob2xkZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgaW5kZXgpIHsKICAgIHJldHVybiBncmFudHNbX2hvbGRlcl0ubGVuZ3RoOwogIH0KCiAgLyoqCiAgICogQGRldiBDYWxjdWxhdGUgYW1vdW50IG9mIHZlc3RlZCB0b2tlbnMgYXQgYSBzcGVjaWZjIHRpbWUuCiAgICogQHBhcmFtIHRva2VucyB1aW50MjU2IFRoZSBhbW91bnQgb2YgdG9rZW5zIGdyYW50dGVkLgogICAqIEBwYXJhbSB0aW1lIHVpbnQ2NCBUaGUgdGltZSB0byBiZSBjaGVja2VkCiAgICogQHBhcmFtIHN0YXJ0IHVpbnQ2NCBBIHRpbWUgcmVwcmVzZW50aW5nIHRoZSBiZWdpbmluZyBvZiB0aGUgZ3JhbnQKICAgKiBAcGFyYW0gY2xpZmYgdWludDY0IFRoZSBjbGlmZiBwZXJpb2QuCiAgICogQHBhcmFtIHZlc3RpbmcgdWludDY0IFRoZSB2ZXN0aW5nIHBlcmlvZC4KICAgKiBAcmV0dXJuIEFuIHVpbnQgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb2YgdmVzdGVkIHRva2Vuc29mIGEgc3BlY2lmIGdyYW50LgogICAqICB0cmFuc2ZlcmFibGVUb2tlbnMKICAgKiAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgXy8tLS0tLS0tLSAgIHZlc3RlZFRva2VucyByZWN0CiAgICogICB8ICAgICAgICAgICAgICAgICAgICAgICBfLwogICAqICAgfCAgICAgICAgICAgICAgICAgICAgIF8vCiAgICogICB8ICAgICAgICAgICAgICAgICAgIF8vCiAgICogICB8ICAgICAgICAgICAgICAgICBfLwogICAqICAgfCAgICAgICAgICAgICAgICAvCiAgICogICB8ICAgICAgICAgICAgICAufAogICAqICAgfCAgICAgICAgICAgIC4gIHwKICAgKiAgIHwgICAgICAgICAgLiAgICB8CiAgICogICB8ICAgICAgICAuICAgICAgfAogICAqICAgfCAgICAgIC4gICAgICAgIHwKICAgKiAgIHwgICAgLiAgICAgICAgICB8CiAgICogICArPT09Kz09PT09PT09PT09Ky0tLS0tLS0tLSstLS0tLS0tLS0tPiB0aW1lCiAgICogICAgICBTdGFydCAgICAgICBDbGlmdCAgICBWZXN0aW5nCiAgICovCiAgZnVuY3Rpb24gY2FsY3VsYXRlVmVzdGVkVG9rZW5zKAogICAgdWludDI1NiB0b2tlbnMsCiAgICB1aW50MjU2IHRpbWUsCiAgICB1aW50MjU2IHN0YXJ0LAogICAgdWludDI1NiBjbGlmZiwKICAgIHVpbnQyNTYgdmVzdGluZykgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgLy8gU2hvcnRjdXRzIGZvciBiZWZvcmUgY2xpZmYgYW5kIGFmdGVyIHZlc3RpbmcgY2FzZXMuCiAgICAgIGlmICh0aW1lIDwgY2xpZmYpIHJldHVybiAwOwogICAgICBpZiAodGltZSA+PSB2ZXN0aW5nKSByZXR1cm4gdG9rZW5zOwoKICAgICAgLy8gSW50ZXJwb2xhdGUgYWxsIHZlc3RlZCB0b2tlbnMuCiAgICAgIC8vIEFzIGJlZm9yZSBjbGlmZiB0aGUgc2hvcnRjdXQgcmV0dXJucyAwLCB3ZSBjYW4gdXNlIGp1c3QgY2FsY3VsYXRlIGEgdmFsdWUKICAgICAgLy8gaW4gdGhlIHZlc3RpbmcgcmVjdCAoYXMgc2hvd24gaW4gYWJvdmUncyBmaWd1cmUpCgogICAgICAvLyB2ZXN0ZWRUb2tlbnMgPSB0b2tlbnMgKiAodGltZSAtIHN0YXJ0KSAvICh2ZXN0aW5nIC0gc3RhcnQpCiAgICAgIHVpbnQyNTYgdmVzdGVkVG9rZW5zID0gU2FmZU1hdGguZGl2KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWZlTWF0aC5tdWwoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhZmVNYXRoLnN1Yih0aW1lLCBzdGFydCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWZlTWF0aC5zdWIodmVzdGluZywgc3RhcnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CgogICAgICByZXR1cm4gdmVzdGVkVG9rZW5zOwogIH0KCiAgLyoqCiAgICogQGRldiBHZXQgYWxsIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmYyBncmFudC4KICAgKiBAcGFyYW0gX2hvbGRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIGhhdmUgaXRzIHRva2VucyByZXZva2VkLgogICAqIEBwYXJhbSBfZ3JhbnRJZCBUaGUgaWQgb2YgdGhlIHRva2VuIGdyYW50LgogICAqIEByZXR1cm4gUmV0dXJucyBhbGwgdGhlIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBhIFRva2VuR3JhbnQoYWRkcmVzcywgdmFsdWUsIHN0YXJ0LCBjbGlmZiwKICAgKiByZXZva2FiaWxpdHksIGJ1cm5zT25SZXZva2UsIGFuZCB2ZXN0aW5nKSBwbHVzIHRoZSB2ZXN0ZWQgdmFsdWUgYXQgdGhlIGN1cnJlbnQgdGltZS4KICAgKi8KICBmdW5jdGlvbiB0b2tlbkdyYW50KGFkZHJlc3MgX2hvbGRlciwgdWludCBfZ3JhbnRJZCkgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBncmFudGVyLCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IHZlc3RlZCwgdWludDY0IHN0YXJ0LCB1aW50NjQgY2xpZmYsIHVpbnQ2NCB2ZXN0aW5nLCBib29sIHJldm9rYWJsZSwgYm9vbCBidXJuc09uUmV2b2tlKSB7CiAgICBUb2tlbkdyYW50IGdyYW50ID0gZ3JhbnRzW19ob2xkZXJdW19ncmFudElkXTsKCiAgICBncmFudGVyID0gZ3JhbnQuZ3JhbnRlcjsKICAgIHZhbHVlID0gZ3JhbnQudmFsdWU7CiAgICBzdGFydCA9IGdyYW50LnN0YXJ0OwogICAgY2xpZmYgPSBncmFudC5jbGlmZjsKICAgIHZlc3RpbmcgPSBncmFudC52ZXN0aW5nOwogICAgcmV2b2thYmxlID0gZ3JhbnQucmV2b2thYmxlOwogICAgYnVybnNPblJldm9rZSA9IGdyYW50LmJ1cm5zT25SZXZva2U7CgogICAgdmVzdGVkID0gdmVzdGVkVG9rZW5zKGdyYW50LCB1aW50NjQobm93KSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEdldCB0aGUgYW1vdW50IG9mIHZlc3RlZCB0b2tlbnMgYXQgYSBzcGVjaWZpYyB0aW1lLgogICAqIEBwYXJhbSBncmFudCBUb2tlbkdyYW50IFRoZSBncmFudCB0byBiZSBjaGVja2VkLgogICAqIEBwYXJhbSB0aW1lIFRoZSB0aW1lIHRvIGJlIGNoZWNrZWQKICAgKiBAcmV0dXJuIEFuIHVpbnQgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb2YgdmVzdGVkIHRva2VucyBvZiBhIHNwZWNpZmljIGdyYW50IGF0IGEgc3BlY2lmaWMgdGltZS4KICAgKi8KICBmdW5jdGlvbiB2ZXN0ZWRUb2tlbnMoVG9rZW5HcmFudCBncmFudCwgdWludDY0IHRpbWUpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGNhbGN1bGF0ZVZlc3RlZFRva2VucygKICAgICAgZ3JhbnQudmFsdWUsCiAgICAgIHVpbnQyNTYodGltZSksCiAgICAgIHVpbnQyNTYoZ3JhbnQuc3RhcnQpLAogICAgICB1aW50MjU2KGdyYW50LmNsaWZmKSwKICAgICAgdWludDI1NihncmFudC52ZXN0aW5nKQogICAgKTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FsY3VsYXRlIHRoZSBhbW91bnQgb2Ygbm9uIHZlc3RlZCB0b2tlbnMgYXQgYSBzcGVjaWZpYyB0aW1lLgogICAqIEBwYXJhbSBncmFudCBUb2tlbkdyYW50IFRoZSBncmFudCB0byBiZSBjaGVja2VkLgogICAqIEBwYXJhbSB0aW1lIHVpbnQ2NCBUaGUgdGltZSB0byBiZSBjaGVja2VkCiAgICogQHJldHVybiBBbiB1aW50IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG9mIG5vbiB2ZXN0ZWQgdG9rZW5zIG9mIGEgc3BlY2lmYyBncmFudCBvbiB0aGUgCiAgICogcGFzc2VkIHRpbWUgZnJhbWUuCiAgICovCiAgZnVuY3Rpb24gbm9uVmVzdGVkVG9rZW5zKFRva2VuR3JhbnQgZ3JhbnQsIHVpbnQ2NCB0aW1lKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBncmFudC52YWx1ZS5zdWIodmVzdGVkVG9rZW5zKGdyYW50LCB0aW1lKSk7CiAgfQoKICAvKioKICAgKiBAZGV2IENhbGN1bGF0ZSB0aGUgZGF0ZSB3aGVuIHRoZSBob2xkZXIgY2FuIHRyYXNmZXIgYWxsIGl0cyB0b2tlbnMKICAgKiBAcGFyYW0gaG9sZGVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGhvbGRlcgogICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGRhdGUgb2YgdGhlIGxhc3QgdHJhbnNmZXJhYmxlIHRva2Vucy4KICAgKi8KICBmdW5jdGlvbiBsYXN0VG9rZW5Jc1RyYW5zZmVyYWJsZURhdGUoYWRkcmVzcyBob2xkZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50NjQgZGF0ZSkgewogICAgZGF0ZSA9IHVpbnQ2NChub3cpOwogICAgdWludDI1NiBncmFudEluZGV4ID0gZ3JhbnRzW2hvbGRlcl0ubGVuZ3RoOwogICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgZ3JhbnRJbmRleDsgaSsrKSB7CiAgICAgIGRhdGUgPSBTYWZlTWF0aC5tYXg2NChncmFudHNbaG9sZGVyXVtpXS52ZXN0aW5nLCBkYXRlKTsKICAgIH0KICB9Cn0KCmNvbnRyYWN0IENEVFRva2VuIGlzIFZlc3RlZFRva2VuIHsKCXVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKCS8vRklFTERTCgkvL0NPTlNUQU5UUwoJdWludCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsgIC8vIDE4IGRlY2ltYWwgcGxhY2VzLCB0aGUgc2FtZSBhcyBFVEguCglzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQ29pbkRhc2ggVG9rZW4iOwogIAlzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJDRFQiOwoKCS8vQVNTSUdORUQgSU4gSU5JVElBTElaQVRJT04KCWFkZHJlc3MgcHVibGljIGNyZWF0b3I7IC8vYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB3aGljaCBtYXkgbWludCBuZXcgdG9rZW5zCgoJLy9NYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIGFkZHJlc3MKCW1vZGlmaWVyIG9ubHlfb3duZXIoKSB7CgkJaWYgKG1zZy5zZW5kZXIgIT0gY3JlYXRvcikgdGhyb3c7CgkJXzsKCX0KCgoJLy8gSW5pdGlhbGl6YXRpb24gY29udHJhY3QgYXNzaWducyBhZGRyZXNzIG9mIGNyb3dkZnVuZCBjb250cmFjdCBhbmQgZW5kIHRpbWUuCglmdW5jdGlvbiBDRFRUb2tlbih1aW50IHN1cHBseSkgewoJCXRvdGFsU3VwcGx5ID0gc3VwcGx5OwoJCWNyZWF0b3IgPSBtc2cuc2VuZGVyOwoJCQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gc3VwcGx5OwoKCQlNQVhfR1JBTlRTX1BFUl9BRERSRVNTID0gMjsKCX0KCgkvLyBGYWxsYmFjayBmdW5jdGlvbiB0aHJvd3Mgd2hlbiBjYWxsZWQuCglmdW5jdGlvbigpIHsKCQl0aHJvdzsKCX0KCglmdW5jdGlvbiB2ZXN0ZWRCYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSkgewoJICAgIHJldHVybiB0cmFuc2ZlcmFibGVUb2tlbnMoX293bmVyLCB1aW50NjQobm93KSk7CiAgICB9CgogICAgICAgIC8vZmFpbHNhZmUgZHJhaW4KCWZ1bmN0aW9uIGRyYWluKCkKCQlvbmx5X293bmVyCgl7CgkJaWYgKCFjcmVhdG9yLnNlbmQodGhpcy5iYWxhbmNlKSkgdGhyb3c7Cgl9Cn0='.
	

]
