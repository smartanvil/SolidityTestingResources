Class {
	#name : #SRT6f7a4bac3315b5082f793161a22e26666d22717f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6f7a4bac3315b5082f793161a22e26666d22717f >> base64 [
	^ ''.
	

]
