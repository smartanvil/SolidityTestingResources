Class {
	#name : #SRT3ab1d534bb477f516817efaaf0b569f419b8e292,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3ab1d534bb477f516817efaaf0b569f419b8e292 >> base64 [
	^ ''.
	

]
