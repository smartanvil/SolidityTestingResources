Class {
	#name : #SRT36f3ff438cd96f095b1bcc03d1b197bd33777578,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT36f3ff438cd96f095b1bcc03d1b197bd33777578 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjBCYXNpYy5zb2wKCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvdG9rZW4vRVJDMjAuc29sCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQmFzaWMgewogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKfQoKLy8gRmlsZTogY29udHJhY3RzL0xvY2thYmxlVG9rZW4uc29sCgpjb250cmFjdCBMb2NrYWJsZVRva2VuIGlzIEVSQzIwIHsKICAgIGZ1bmN0aW9uIGFkZFRvVGltZUxvY2tlZExpc3QoYWRkcmVzcyBhZGRyKSBleHRlcm5hbCByZXR1cm5zIChib29sKTsKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL21hdGgvU2FmZU1hdGguc29sCgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLy8gRmlsZTogY29udHJhY3RzL1ByaWNpbmdTdHJhdGVneS5zb2wKCmNvbnRyYWN0IFByaWNpbmdTdHJhdGVneSB7CgogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgdWludFtdIHB1YmxpYyByYXRlczsKICAgIHVpbnRbXSBwdWJsaWMgbGltaXRzOwoKICAgIGZ1bmN0aW9uIFByaWNpbmdTdHJhdGVneSgKICAgICAgICB1aW50W10gX3JhdGVzLAogICAgICAgIHVpbnRbXSBfbGltaXRzCiAgICApIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoX3JhdGVzLmxlbmd0aCA9PSBfbGltaXRzLmxlbmd0aCk7CiAgICAgICAgcmF0ZXMgPSBfcmF0ZXM7CiAgICAgICAgbGltaXRzID0gX2xpbWl0czsKICAgIH0KCiAgICAvKiogSW50ZXJmYWNlIGRlY2xhcmF0aW9uLiAqLwogICAgZnVuY3Rpb24gaXNQcmljaW5nU3RyYXRlZ3koKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqIENhbGN1bGF0ZSB0aGUgY3VycmVudCBwcmljZSBmb3IgYnV5IGluIGFtb3VudC4gKi8KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRva2VuQW1vdW50KHVpbnQgd2VpQW1vdW50LCB1aW50IHdlaVJhaXNlZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCB0b2tlbkFtb3VudCkgewogICAgICAgIGlmICh3ZWlBbW91bnQgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIHZhciAocmF0ZSwgaW5kZXgpID0gY3VycmVudFJhdGUod2VpUmFpc2VkKTsKICAgICAgICB0b2tlbkFtb3VudCA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CgogICAgICAgIC8vIGlmIHdlIGNyb3NzZWQgc2xvdCBib3JkZXIsIHJlY2FsY3VsYXRlIHJlbWFpbmluZyB0b2tlbnMgYWNjb3JkaW5nIHRvIG5leHQgc2xvdCBwcmljZQogICAgICAgIGlmICh3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCkgPiBsaW1pdHNbaW5kZXhdKSB7CiAgICAgICAgICAgIHVpbnQgY3VycmVudFNsb3RXZWkgPSBsaW1pdHNbaW5kZXhdLnN1Yih3ZWlSYWlzZWQpOwogICAgICAgICAgICB1aW50IGN1cnJlbnRTbG90VG9rZW5zID0gY3VycmVudFNsb3RXZWkubXVsKHJhdGUpOwogICAgICAgICAgICB1aW50IHJlbWFpbmluZ1dlaSA9IHdlaUFtb3VudC5zdWIoY3VycmVudFNsb3RXZWkpOwogICAgICAgICAgICB0b2tlbkFtb3VudCA9IGN1cnJlbnRTbG90VG9rZW5zLmFkZChjYWxjdWxhdGVUb2tlbkFtb3VudChyZW1haW5pbmdXZWksIGxpbWl0c1tpbmRleF0pKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY3VycmVudFJhdGUodWludCB3ZWlSYWlzZWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgcmF0ZSwgdWludDggaW5kZXgpIHsKICAgICAgICByYXRlID0gcmF0ZXNbMF07CiAgICAgICAgaW5kZXggPSAwOwoKICAgICAgICB3aGlsZSAod2VpUmFpc2VkID49IGxpbWl0c1tpbmRleF0pIHsKICAgICAgICAgICAgcmF0ZSA9IHJhdGVzWysraW5kZXhdOwogICAgICAgIH0KICAgIH0KCn0KCi8vIEZpbGU6IHplcHBlbGluLXNvbGlkaXR5L2NvbnRyYWN0cy9vd25lcnNoaXAvT3duYWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL2xpZmVjeWNsZS9QYXVzYWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgUGF1c2FibGUKICogQGRldiBCYXNlIGNvbnRyYWN0IHdoaWNoIGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4gZW1lcmdlbmN5IHN0b3AgbWVjaGFuaXNtLgogKi8KY29udHJhY3QgUGF1c2FibGUgaXMgT3duYWJsZSB7CiAgZXZlbnQgUGF1c2UoKTsKICBldmVudCBVbnBhdXNlKCk7CgogIGJvb2wgcHVibGljIHBhdXNlZCA9IGZhbHNlOwoKCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgTW9kaWZpZXIgdG8gbWFrZSBhIGZ1bmN0aW9uIGNhbGxhYmxlIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAqLwogIG1vZGlmaWVyIHdoZW5QYXVzZWQoKSB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgcHVibGljIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogIH0KfQoKLy8gRmlsZTogemVwcGVsaW4tc29saWRpdHkvY29udHJhY3RzL293bmVyc2hpcC9Db250YWN0YWJsZS5zb2wKCi8qKgogKiBAdGl0bGUgQ29udGFjdGFibGUgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIGEgY29udGFjdGFibGUgY29udHJhY3QsIGFsbG93aW5nIHRoZSBvd25lciB0byBwcm92aWRlIGEgc3RyaW5nIHdpdGggdGhlaXIKICogY29udGFjdCBpbmZvcm1hdGlvbi4KICovCmNvbnRyYWN0IENvbnRhY3RhYmxlIGlzIE93bmFibGV7CgogICAgc3RyaW5nIHB1YmxpYyBjb250YWN0SW5mb3JtYXRpb247CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgb3duZXIgdG8gc2V0IGEgc3RyaW5nIHdpdGggdGhlaXIgY29udGFjdCBpbmZvcm1hdGlvbi4KICAgICAqIEBwYXJhbSBpbmZvIFRoZSBjb250YWN0IGluZm9ybWF0aW9uIHRvIGF0dGFjaCB0byB0aGUgY29udHJhY3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldENvbnRhY3RJbmZvcm1hdGlvbihzdHJpbmcgaW5mbykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgIGNvbnRhY3RJbmZvcm1hdGlvbiA9IGluZm87CiAgICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMvU2FsZS5zb2wKCi8qKgogKiBAdGl0bGUgU2FsZQogKiBAZGV2IFNhbGUgaXMgYSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIFNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KY29udHJhY3QgU2FsZSBpcyBQYXVzYWJsZSwgQ29udGFjdGFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgCiAgICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogICAgTG9ja2FibGVUb2tlbiBwdWJsaWMgdG9rZW47CiAgCiAgICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogICAgdWludCBwdWJsaWMgc3RhcnRUaW1lOwogICAgdWludCBwdWJsaWMgZW5kVGltZTsKICAKICAgIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwogIAogICAgLy8gdGhlIGNvbnRyYWN0LCB3aGljaCBkZXRlcm1pbmUgaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICAgIFByaWNpbmdTdHJhdGVneSBwdWJsaWMgcHJpY2luZ1N0cmF0ZWd5OwogIAogICAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICAgIHVpbnQgcHVibGljIHdlaVJhaXNlZDsKCiAgICAvLyBhbW91bnQgb2YgdG9rZW5zIHRoYXQgd2FzIHNvbGQgb24gdGhlIGNyb3dkc2FsZQogICAgdWludCBwdWJsaWMgdG9rZW5zU29sZDsKCiAgICAvLyBtYXhpbXVtIGFtb3VudCBvZiB3ZWkgaW4gdG90YWwsIHRoYXQgY2FuIGJlIGludmVzdGVkCiAgICB1aW50IHB1YmxpYyB3ZWlNYXhpbXVtR29hbDsKCiAgICAvLyBpZiB3ZWlNaW5pbXVtR29hbCB3aWxsIG5vdCBiZSByZWFjaGVkIHRpbGwgZW5kVGltZSwgaW52ZXN0b3JzIHdpbGwgYmUgYWJsZSB0byByZWZ1bmQgRVRICiAgICB1aW50IHB1YmxpYyB3ZWlNaW5pbXVtR29hbDsKCiAgICAvLyBtaW5pbWFsIGFtb3VudCBvZiBldGhlciwgdGhhdCBpbnZlc3RvciBjYW4gaW52ZXN0CiAgICB1aW50IHB1YmxpYyBtaW5BbW91bnQ7CgogICAgLy8gSG93IG1hbnkgZGlzdGluY3QgYWRkcmVzc2VzIGhhdmUgaW52ZXN0ZWQKICAgIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQ7CgogICAgLy8gaG93IG11Y2ggd2VpIHdlIGhhdmUgcmV0dXJuZWQgYmFjayB0byB0aGUgY29udHJhY3QgYWZ0ZXIgYSBmYWlsZWQgY3Jvd2RmdW5kCiAgICB1aW50IHB1YmxpYyBsb2FkZWRSZWZ1bmQ7CgogICAgLy8gaG93IG11Y2ggd2VpIHdlIGhhdmUgZ2l2ZW4gYmFjayB0byBpbnZlc3RvcnMKICAgIHVpbnQgcHVibGljIHdlaVJlZnVuZGVkOwoKICAgIC8vSG93IG11Y2ggRVRIIGVhY2ggYWRkcmVzcyBoYXMgaW52ZXN0ZWQgdG8gdGhpcyBjcm93ZHNhbGUKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGludmVzdGVkQW1vdW50T2Y7CgogICAgLy8gQWRkcmVzc2VzIHRoYXQgYXJlIGFsbG93ZWQgdG8gaW52ZXN0IGJlZm9yZSBJQ08gb2ZmaWNhbCBvcGVucwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdDsKCiAgICAvLyB3aGV0aGVyIGEgYnV5ZXIgYm91Z2h0IHRva2VucyB0aHJvdWdoIG90aGVyIGN1cnJlbmNpZXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGlzRXh0ZXJuYWxCdXllcjsKCiAgICBhZGRyZXNzIHB1YmxpYyBhZG1pbjsKCiAgICBtb2RpZmllciBvbmx5T3duZXJPckFkbWluKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBtc2cuc2VuZGVyID09IGFkbWluKTsgCiAgICAgICAgXzsKICAgIH0KICAKICAgIC8qKgogICAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgICAqIEBwYXJhbSBwdXJjaGFzZXIgd2hvIHBhaWQgZm9yIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICAgKiBAcGFyYW0gdG9rZW5BbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgICAqLwogICAgZXZlbnQgVG9rZW5QdXJjaGFzZSgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcHVyY2hhc2VyLAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwKICAgICAgICB1aW50IHZhbHVlLAogICAgICAgIHVpbnQgdG9rZW5BbW91bnQKICAgICk7CgogICAgLy8gYSByZWZ1bmQgd2FzIHByb2Nlc3NlZCBmb3IgYW4gaW52ZXN0b3IKICAgIGV2ZW50IFJlZnVuZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHdlaUFtb3VudCk7CgogICAgZnVuY3Rpb24gU2FsZSgKICAgICAgICB1aW50IF9zdGFydFRpbWUsCiAgICAgICAgdWludCBfZW5kVGltZSwKICAgICAgICBQcmljaW5nU3RyYXRlZ3kgX3ByaWNpbmdTdHJhdGVneSwKICAgICAgICBMb2NrYWJsZVRva2VuIF90b2tlbiwKICAgICAgICBhZGRyZXNzIF93YWxsZXQsCiAgICAgICAgdWludCBfd2VpTWF4aW11bUdvYWwsCiAgICAgICAgdWludCBfd2VpTWluaW11bUdvYWwsCiAgICAgICAgdWludCBfbWluQW1vdW50CiAgICApIHsKICAgICAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgICAgICByZXF1aXJlKF9lbmRUaW1lID49IF9zdGFydFRpbWUpOwogICAgICAgIHJlcXVpcmUoX3ByaWNpbmdTdHJhdGVneS5pc1ByaWNpbmdTdHJhdGVneSgpKTsKICAgICAgICByZXF1aXJlKGFkZHJlc3MoX3Rva2VuKSAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3dhbGxldCAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3dlaU1heGltdW1Hb2FsID4gMCk7CiAgICAgICAgcmVxdWlyZShfd2VpTWluaW11bUdvYWwgPiAwKTsKCiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICAgICAgcHJpY2luZ1N0cmF0ZWd5ID0gX3ByaWNpbmdTdHJhdGVneTsKICAgICAgICB0b2tlbiA9IF90b2tlbjsKICAgICAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgICAgIHdlaU1heGltdW1Hb2FsID0gX3dlaU1heGltdW1Hb2FsOwogICAgICAgIHdlaU1pbmltdW1Hb2FsID0gX3dlaU1pbmltdW1Hb2FsOwogICAgICAgIG1pbkFtb3VudCA9IF9taW5BbW91bnQ7Cn0KCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiAoKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHdoZW5Ob3RQYXVzZWQgcGF5YWJsZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgCiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSh3ZWlBbW91bnQpKTsKICAgIAogICAgICAgIHRyYW5zZmVyVG9rZW5Ub0J1eWVyKGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQpOwoKICAgICAgICB3YWxsZXQudHJhbnNmZXIod2VpQW1vdW50KTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJUb2tlblRvQnV5ZXIoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCB3ZWlBbW91bnQpIGludGVybmFsIHsKICAgICAgICBpZiAoaW52ZXN0ZWRBbW91bnRPZltiZW5lZmljaWFyeV0gPT0gMCkgewogICAgICAgICAgICAvLyBBIG5ldyBpbnZlc3RvcgogICAgICAgICAgICBpbnZlc3RvckNvdW50Kys7CiAgICAgICAgfQoKICAgICAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgICAgICB1aW50IHRva2VuQW1vdW50ID0gcHJpY2luZ1N0cmF0ZWd5LmNhbGN1bGF0ZVRva2VuQW1vdW50KHdlaUFtb3VudCwgd2VpUmFpc2VkKTsKCiAgICAgICAgaW52ZXN0ZWRBbW91bnRPZltiZW5lZmljaWFyeV0gPSBpbnZlc3RlZEFtb3VudE9mW2JlbmVmaWNpYXJ5XS5hZGQod2VpQW1vdW50KTsKICAgICAgICB3ZWlSYWlzZWQgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2VuQW1vdW50KTsKICAgIAogICAgICAgIHRva2VuLnRyYW5zZmVyRnJvbShvd25lciwgYmVuZWZpY2lhcnksIHRva2VuQW1vdW50KTsKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2VuQW1vdW50KTsKICAgIH0KCiAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogICAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSh1aW50IHdlaUFtb3VudCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCB3aXRoaW5QZXJpb2QgPSAobm93ID49IHN0YXJ0VGltZSB8fCBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W21zZy5zZW5kZXJdKSAmJiBub3cgPD0gZW5kVGltZTsKICAgICAgICBib29sIHdpdGhpbkNhcCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KSA8PSB3ZWlNYXhpbXVtR29hbDsKICAgICAgICBib29sIG1vcmVUaGVuTWluaW1hbCA9IHdlaUFtb3VudCA+PSBtaW5BbW91bnQ7CgogICAgICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgd2l0aGluQ2FwICYmIG1vcmVUaGVuTWluaW1hbDsKICAgIH0KCiAgICAvLyByZXR1cm4gdHJ1ZSBpZiBjcm93ZHNhbGUgZXZlbnQgaGFzIGVuZGVkCiAgICBmdW5jdGlvbiBoYXNFbmRlZCgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgY2FwUmVhY2hlZCA9IHdlaVJhaXNlZCA+PSB3ZWlNYXhpbXVtR29hbDsKICAgICAgICBib29sIGFmdGVyRW5kVGltZSA9IG5vdyA+IGVuZFRpbWU7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGNhcFJlYWNoZWQgfHwgYWZ0ZXJFbmRUaW1lOwogICAgfQoKICAgIC8vIGdldCB0aGUgYW1vdW50IG9mIHVuc29sZCB0b2tlbnMgYWxsb2NhdGVkIHRvIHRoaXMgY29udHJhY3Q7CiAgICBmdW5jdGlvbiBnZXRXZWlMZWZ0KCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHdlaU1heGltdW1Hb2FsIC0gd2VpUmFpc2VkOwogICAgfQoKICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBjcm93ZHNhbGUgaGFzIHJhaXNlZCBlbm91Z2ggbW9uZXkgdG8gYmUgYSBzdWNjZXNzZnVsLgogICAgZnVuY3Rpb24gaXNNaW5pbXVtR29hbFJlYWNoZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHdlaVJhaXNlZCA+PSB3ZWlNaW5pbXVtR29hbDsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBhbGxvd3MgdG8gYWRkIGFuZCBleGNsdWRlIGFkZHJlc3NlcyBmcm9tIGVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3QgZm9yIG93bmVyCiAgICAgKiBAcGFyYW0gaXNXaGl0ZWxpc3RlZCBpcyB0cnVlIGZvciBhZGRpbmcgYWRkcmVzcyBpbnRvIHdoaXRlbGlzdCwgZmFsc2UgLSB0byBleGNsdWRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVkaXRFYXJseVBhcmljaXBhbnRXaGl0ZWxpc3QoYWRkcmVzcyBhZGRyLCBib29sIGlzV2hpdGVsaXN0ZWQpIGV4dGVybmFsIG9ubHlPd25lck9yQWRtaW4gcmV0dXJucyAoYm9vbCkgewogICAgICAgIGVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbYWRkcl0gPSBpc1doaXRlbGlzdGVkOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIGFsbG93cyB0byB1cGRhdGUgdG9rZW5zIHJhdGUgZm9yIG93bmVyCiAgICBmdW5jdGlvbiBzZXRQcmljaW5nU3RyYXRlZ3koUHJpY2luZ1N0cmF0ZWd5IF9wcmljaW5nU3RyYXRlZ3kpIGV4dGVybmFsIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CiAgICAgICAgcHJpY2luZ1N0cmF0ZWd5ID0gX3ByaWNpbmdTdHJhdGVneTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQWxsb3cgbG9hZCByZWZ1bmRzIGJhY2sgb24gdGhlIGNvbnRyYWN0IGZvciB0aGUgcmVmdW5kaW5nLgogICAgKgogICAgKiBUaGUgdGVhbSBjYW4gdHJhbnNmZXIgdGhlIGZ1bmRzIGJhY2sgb24gdGhlIHNtYXJ0IGNvbnRyYWN0IGluIHRoZSBjYXNlIHRoZSBtaW5pbXVtIGdvYWwgd2FzIG5vdCByZWFjaGVkLi4KICAgICovCiAgICBmdW5jdGlvbiBsb2FkUmVmdW5kKCkgZXh0ZXJuYWwgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICByZXF1aXJlKCFpc01pbmltdW1Hb2FsUmVhY2hlZCgpKTsKICAgICAgICAKICAgICAgICBsb2FkZWRSZWZ1bmQgPSBsb2FkZWRSZWZ1bmQuYWRkKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAqIEludmVzdG9ycyBjYW4gY2xhaW0gcmVmdW5kLgogICAgKgogICAgKiBOb3RlIHRoYXQgYW55IHJlZnVuZHMgZnJvbSBwcm94eSBidXllcnMgc2hvdWxkIGJlIGhhbmRsZWQgc2VwYXJhdGVseSwKICAgICogYW5kIG5vdCB0aHJvdWdoIHRoaXMgY29udHJhY3QuCiAgICAqLwogICAgZnVuY3Rpb24gcmVmdW5kKCkgZXh0ZXJuYWwgewogICAgICAgIHVpbnQyNTYgd2VpVmFsdWUgPSBpbnZlc3RlZEFtb3VudE9mW21zZy5zZW5kZXJdOwogICAgICAgIAogICAgICAgIHJlcXVpcmUoIWlzTWluaW11bUdvYWxSZWFjaGVkKCkgJiYgbG9hZGVkUmVmdW5kID4gMCk7CiAgICAgICAgcmVxdWlyZSghaXNFeHRlcm5hbEJ1eWVyW21zZy5zZW5kZXJdKTsKICAgICAgICByZXF1aXJlKHdlaVZhbHVlID4gMCk7CiAgICAgICAgCiAgICAgICAgaW52ZXN0ZWRBbW91bnRPZlttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgd2VpUmVmdW5kZWQgPSB3ZWlSZWZ1bmRlZC5hZGQod2VpVmFsdWUpOwogICAgICAgIFJlZnVuZChtc2cuc2VuZGVyLCB3ZWlWYWx1ZSk7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih3ZWlWYWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVnaXN0ZXJQYXltZW50KGFkZHJlc3MgYmVuZWZpY2lhcnksIHVpbnQgd2VpQW1vdW50KSBleHRlcm5hbCBvbmx5T3duZXJPckFkbWluIHsKICAgICAgICByZXF1aXJlKHZhbGlkUHVyY2hhc2Uod2VpQW1vdW50KSk7CiAgICAgICAgaXNFeHRlcm5hbEJ1eWVyW2JlbmVmaWNpYXJ5XSA9IHRydWU7CiAgICAgICAgdHJhbnNmZXJUb2tlblRvQnV5ZXIoYmVuZWZpY2lhcnksIHdlaUFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QWRtaW4oYWRkcmVzcyBhZG1pbkFkZHJlc3MpIGV4dGVybmFsIG9ubHlPd25lciB7CiAgICAgICAgYWRtaW4gPSBhZG1pbkFkZHJlc3M7CiAgICB9Cn0='.
	

]
