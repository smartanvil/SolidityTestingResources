Class {
	#name : #SRT291a043f014d12dc852b02ff752e5b70132bc328,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT291a043f014d12dc852b02ff752e5b70132bc328 >> base64 [
	^ ''.
	

]
