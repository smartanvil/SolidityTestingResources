Class {
	#name : #SRTd7aa007c3e7ab454ffe3e20f0b28f926db295477,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd7aa007c3e7ab454ffe3e20f0b28f926db295477 >> base64 [
	^ ''.
	

]
