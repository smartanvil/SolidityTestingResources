Class {
	#name : #SRT5438b0938fb88a979032f45b87d2d1aeffe5cc28,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5438b0938fb88a979032f45b87d2d1aeffe5cc28 >> base64 [
	^ ''.
	

]
