Class {
	#name : #SRTC4aF56cD5254Aef959D4BcE2F75874007808b701,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC4aF56cD5254Aef959D4BcE2F75874007808b701 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCi8vaHR0cHM6Ly9naXRodWIuY29tL25leHVzZGV2L2VyYzIwL2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9lcmMyMC5zb2wKCmNvbnRyYWN0IEVSQzIwQ29uc3RhbnQgewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKCBhZGRyZXNzIHdobyApIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdmFsdWUpOwp9CmNvbnRyYWN0IEVSQzIwU3RhdGVmdWwgewogICAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOwp9CmNvbnRyYWN0IEVSQzIwRXZlbnRzIHsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwp9CmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQ29uc3RhbnQsIEVSQzIwU3RhdGVmdWwsIEVSQzIwRXZlbnRzIHt9Cgpjb250cmFjdCBvd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBvd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9Cn0KCi8vIGNvbnRyYWN0IGNhbiBzZWxsIHRva2VucyBmb3IgRVRICi8vIHByaWNlcyBhcmUgaW4gYW1vdW50IG9mIHdlaSBwZXIgYmF0Y2ggb2YgdG9rZW4gdW5pdHMKCmNvbnRyYWN0IFRva2VuVHJhZGVyIGlzIG93bmVkIHsKCiAgICBhZGRyZXNzIHB1YmxpYyBhc3NldDsgICAgICAgLy8gYWRkcmVzcyBvZiB0b2tlbgogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOyAgIC8vIGNvbnRyYWN0IHNlbGxzIGxvdHMgb2YgdG9rZW5zIGF0IHRoaXMgcHJpY2UKICAgIHVpbnQyNTYgcHVibGljIHVuaXRzOyAgICAgICAvLyBsb3Qgc2l6ZSAodG9rZW4td2VpKQoKICAgIGJvb2wgcHVibGljIHNlbGxzVG9rZW5zOyAgICAvLyBpcyBjb250cmFjdCBzZWxsaW5nCgogICAgZXZlbnQgQWN0aXZhdGVkRXZlbnQoYm9vbCBzZWxscyk7CiAgICBldmVudCBVcGRhdGVFdmVudCgpOwoKICAgIGZ1bmN0aW9uIFRva2VuVHJhZGVyICgKICAgICAgICBhZGRyZXNzIF9hc3NldCwgCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLCAKICAgICAgICB1aW50MjU2IF91bml0cywKICAgICAgICBib29sICAgIF9zZWxsc1Rva2VucwogICAgICAgICkKICAgIHsKICAgICAgICAgIGFzc2V0ICAgICAgICAgPSBfYXNzZXQ7IAogICAgICAgICAgc2VsbFByaWNlICAgID0gX3NlbGxQcmljZTsKICAgICAgICAgIHVuaXRzICAgICAgICAgPSBfdW5pdHM7IAogICAgICAgICAgc2VsbHNUb2tlbnMgICA9IF9zZWxsc1Rva2VuczsKCiAgICAgICAgICBBY3RpdmF0ZWRFdmVudChzZWxsc1Rva2Vucyk7CiAgICB9CgogICAgLy8gbW9kaWZ5IHRyYWRpbmcgYmVoYXZpb3IKICAgIGZ1bmN0aW9uIGFjdGl2YXRlICgKICAgICAgICBib29sICAgIF9zZWxsc1Rva2VucwogICAgICAgICkgb25seU93bmVyCiAgICB7CiAgICAgICAgICBzZWxsc1Rva2VucyAgID0gX3NlbGxzVG9rZW5zOwoKICAgICAgICAgIEFjdGl2YXRlZEV2ZW50KHNlbGxzVG9rZW5zKTsKICAgIH0KCiAgICAvLyBhbGxvdyBvd25lciB0byByZW1vdmUgdHJhZGUgdG9rZW4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3QXNzZXQodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQogICAgewogICAgICAgIHJldHVybiBFUkMyMChhc3NldCkudHJhbnNmZXIob3duZXIsX3ZhbHVlKTsKICAgICAgICBVcGRhdGVFdmVudCgpOwogICAgfQoKICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSBhcmJpdHJhcnkgdG9rZW5zCiAgICAvLyBpbmNsdWRlZCBqdXN0IGluIGNhc2UgY29udHJhY3QgcmVjZWl2ZXMgd3JvbmcgdG9rZW4KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW4oYWRkcmVzcyBfdG9rZW4sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykKICAgIHsKICAgICAgICByZXR1cm4gRVJDMjAoX3Rva2VuKS50cmFuc2Zlcihvd25lcixfdmFsdWUpOwogICAgICAgIFVwZGF0ZUV2ZW50KCk7CiAgICB9CgogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIEVUSAogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQogICAgewogICAgICAgIGlmKHRoaXMuYmFsYW5jZSA+PSBfdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIG93bmVyLnNlbmQoX3ZhbHVlKTsKICAgICAgICB9CiAgICAgICAgVXBkYXRlRXZlbnQoKTsKICAgIH0KCiAgICAvL3VzZXIgYnV5cyB0b2tlbiB3aXRoIEVUSAogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7CiAgICAgICAgaWYoc2VsbHNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgCiAgICAgICAgewogICAgICAgICAgICB1aW50IG9yZGVyICAgPSBtc2cudmFsdWUgLyBzZWxsUHJpY2U7IAogICAgICAgICAgICB1aW50IGNhbl9zZWxsID0gRVJDMjAoYXNzZXQpLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAvIHVuaXRzOwoKICAgICAgICAgICAgaWYob3JkZXIgPiBjYW5fc2VsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdWludDI1NiBjaGFuZ2UgPSBtc2cudmFsdWUgLSAoY2FuX3NlbGwgKiBzZWxsUHJpY2UpOwogICAgICAgICAgICAgICAgb3JkZXIgPSBjYW5fc2VsbDsKICAgICAgICAgICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQoY2hhbmdlKSkgdGhyb3c7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG9yZGVyID4gMCkgewogICAgICAgICAgICAgICAgaWYoIUVSQzIwKGFzc2V0KS50cmFuc2Zlcihtc2cuc2VuZGVyLG9yZGVyICogdW5pdHMpKSB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgICAgICBVcGRhdGVFdmVudCgpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKCFtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSkgdGhyb3c7ICAvLyByZXR1cm4gdXNlciBmdW5kcyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHNlbGxpbmcKICAgIH0KCiAgICAvLyBzZW5kaW5nIEVUSCB0byBjb250cmFjdCBzZWxscyBHTlQgdG8gdXNlcgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICAgICAgYnV5KCk7CiAgICB9Cn0KCi8vIFRoaXMgY29udHJhY3QgZGVwbG95cyBUb2tlblRyYWRlciBjb250cmFjdHMgYW5kIGxvZ3MgdGhlIGV2ZW50Ci8vIHRyYWRlIHBhaXJzIGFyZSBpZGVudGlmaWVkIHdpdGggc2hhMyhhc3NldCx1bml0cykKCmNvbnRyYWN0IFRva2VuVHJhZGVyRmFjdG9yeSB7CgogICAgZXZlbnQgVHJhZGVMaXN0aW5nKGJ5dGVzMzIgYm9va2lkLCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGFkZHIpOwogICAgZXZlbnQgTmV3Qm9vayhieXRlczMyIGJvb2tpZCwgYWRkcmVzcyBhc3NldCwgdWludDI1NiB1bml0cyk7CgogICAgbWFwcGluZyggYWRkcmVzcyA9PiBib29sICkgX3ZlcmlmeTsKICAgIG1hcHBpbmcoIGJ5dGVzMzIgPT4gYm9vbCApIHBhaXJFeGl0czsKICAgIAogICAgZnVuY3Rpb24gdmVyaWZ5KGFkZHJlc3MgdHJhZGVDb250cmFjdCkgIGNvbnN0YW50IHJldHVybnMgKAogICAgICAgIGJvb2wgdmFsaWQsCiAgICAgICAgYWRkcmVzcyBhc3NldCwgCiAgICAgICAgdWludDI1NiBzZWxsUHJpY2UsIAogICAgICAgIHVpbnQyNTYgdW5pdHMsCiAgICAgICAgYm9vbCAgICBzZWxsc1Rva2VucwogICAgICAgICkgewogICAgICAgICAgICAKICAgICAgICAgICAgdmFsaWQgPSBfdmVyaWZ5W3RyYWRlQ29udHJhY3RdOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYodmFsaWQpIHsKICAgICAgICAgICAgICAgIFRva2VuVHJhZGVyIHQgPSBUb2tlblRyYWRlcih0cmFkZUNvbnRyYWN0KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYXNzZXQgPSB0LmFzc2V0KCk7CiAgICAgICAgICAgICAgICBzZWxsUHJpY2UgPSB0LnNlbGxQcmljZSgpOwogICAgICAgICAgICAgICAgdW5pdHMgPSB0LnVuaXRzKCk7CiAgICAgICAgICAgICAgICBzZWxsc1Rva2VucyA9IHQuc2VsbHNUb2tlbnMoKTsKICAgICAgICAgICAgfQogICAgICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRyYWRlQ29udHJhY3QoICAgICAgIAogICAgICAgIGFkZHJlc3MgX2Fzc2V0LCAKICAgICAgICB1aW50MjU2IF9zZWxsUHJpY2UsIAogICAgICAgIHVpbnQyNTYgX3VuaXRzLAogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zCiAgICAgICAgKSByZXR1cm5zIChhZGRyZXNzKSAKICAgIHsKICAgICAgICBpZihfdW5pdHMgPT0gMCkgdGhyb3c7ICAgICAgICAgICAgICAvLyBjYW4ndCBzZWxsIHplcm8gdW5pdHMKCiAgICAgICAgYWRkcmVzcyB0cmFkZXIgPSBuZXcgVG9rZW5UcmFkZXIgKAogICAgICAgICAgICAgICAgICAgICBfYXNzZXQsIAogICAgICAgICAgICAgICAgICAgICBfc2VsbFByaWNlLCAKICAgICAgICAgICAgICAgICAgICAgX3VuaXRzLAogICAgICAgICAgICAgICAgICAgICBfc2VsbHNUb2tlbnMpOwoKICAgICAgICB2YXIgYm9va2lkID0gc2hhMyhfYXNzZXQsX3VuaXRzKTsKCiAgICAgICAgX3ZlcmlmeVt0cmFkZXJdID0gdHJ1ZTsgLy8gcmVjb3JkIHRoYXQgdGhpcyBmYWN0b3J5IGNyZWF0ZWQgdGhlIHRyYWRlcgoKICAgICAgICBUb2tlblRyYWRlcih0cmFkZXIpLnRyYW5zZmVyT3duZXJzaGlwKG1zZy5zZW5kZXIpOyAvLyBzZXQgdGhlIG93bmVyIHRvIHdob2V2ZXIgY2FsbGVkIHRoZSBmdW5jdGlvbgoKICAgICAgICBpZihwYWlyRXhpdHNbYm9va2lkXSA9PSBmYWxzZSkgewogICAgICAgICAgICBwYWlyRXhpdHNbYm9va2lkXSA9IHRydWU7CiAgICAgICAgICAgIE5ld0Jvb2soYm9va2lkLCBfYXNzZXQsIF91bml0cyk7CiAgICAgICAgfQoKICAgICAgICBUcmFkZUxpc3RpbmcoYm9va2lkLG1zZy5zZW5kZXIsdHJhZGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhyb3c7ICAgICAvLyBQcmV2ZW50cyBhY2NpZGVudGFsIHNlbmRpbmcgb2YgZXRoZXIgdG8gdGhlIGZhY3RvcnkKICAgIH0KfQ=='.
	

]
