Class {
	#name : #SRT8a7041e2d84ac0425aca4077ff5041bebaeb8168,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a7041e2d84ac0425aca4077ff5041bebaeb8168 >> base64 [
	^ ''.
	

]
