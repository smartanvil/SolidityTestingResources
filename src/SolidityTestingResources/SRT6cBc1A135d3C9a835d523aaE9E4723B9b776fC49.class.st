Class {
	#name : #SRT6cBc1A135d3C9a835d523aaE9E4723B9b776fC49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6cBc1A135d3C9a835d523aaE9E4723B9b776fC49 >> base64 [
	^ ''.
	

]
