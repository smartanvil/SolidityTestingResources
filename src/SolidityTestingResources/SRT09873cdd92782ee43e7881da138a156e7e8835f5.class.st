Class {
	#name : #SRT09873cdd92782ee43e7881da138a156e7e8835f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT09873cdd92782ee43e7881da138a156e7e8835f5 >> base64 [
	^ ''.
	

]
