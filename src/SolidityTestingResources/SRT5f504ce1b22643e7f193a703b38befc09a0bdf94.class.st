Class {
	#name : #SRT5f504ce1b22643e7f193a703b38befc09a0bdf94,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5f504ce1b22643e7f193a703b38befc09a0bdf94 >> base64 [
	^ ''.
	

]
