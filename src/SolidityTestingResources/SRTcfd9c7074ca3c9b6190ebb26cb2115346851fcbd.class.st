Class {
	#name : #SRTcfd9c7074ca3c9b6190ebb26cb2115346851fcbd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcfd9c7074ca3c9b6190ebb26cb2115346851fcbd >> base64 [
	^ ''.
	

]
