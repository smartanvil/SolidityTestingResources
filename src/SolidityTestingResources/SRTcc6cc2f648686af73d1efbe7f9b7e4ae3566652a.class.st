Class {
	#name : #SRTcc6cc2f648686af73d1efbe7f9b7e4ae3566652a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcc6cc2f648686af73d1efbe7f9b7e4ae3566652a >> base64 [
	^ ''.
	

]
