Class {
	#name : #SRTaf98a2bc242d93b5206b2ea7cf26e31d82c5873b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf98a2bc242d93b5206b2ea7cf26e31d82c5873b >> base64 [
	^ ''.
	

]
