Class {
	#name : #SRTaf8e12a3c9c64d845ff7c1fb7f724573c600ed8d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaf8e12a3c9c64d845ff7c1fb7f724573c600ed8d >> base64 [
	^ ''.
	

]
