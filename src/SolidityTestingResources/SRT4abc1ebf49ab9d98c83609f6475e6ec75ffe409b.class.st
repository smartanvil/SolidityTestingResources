Class {
	#name : #SRT4abc1ebf49ab9d98c83609f6475e6ec75ffe409b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4abc1ebf49ab9d98c83609f6475e6ec75ffe409b >> base64 [
	^ ''.
	

]
