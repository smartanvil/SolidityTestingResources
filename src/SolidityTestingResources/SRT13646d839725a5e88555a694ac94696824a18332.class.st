Class {
	#name : #SRT13646d839725a5e88555a694ac94696824a18332,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13646d839725a5e88555a694ac94696824a18332 >> base64 [
	^ ''.
	

]
