Class {
	#name : #SRT9dbbf858bfe0b76f21d6c780a98272f4543a3023,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9dbbf858bfe0b76f21d6c780a98272f4543a3023 >> base64 [
	^ ''.
	

]
