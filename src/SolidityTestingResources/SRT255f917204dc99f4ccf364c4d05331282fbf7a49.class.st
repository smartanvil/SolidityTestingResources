Class {
	#name : #SRT255f917204dc99f4ccf364c4d05331282fbf7a49,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT255f917204dc99f4ccf364c4d05331282fbf7a49 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKLyoqCiAqIEB0aXRsZSBFbGlwdGljIGN1cnZlIHNpZ25hdHVyZSBvcGVyYXRpb25zCiAqCiAqIEBkZXYgQmFzZWQgb24gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYXhpYy81YjMzOTEyYzZmNjFhZTZmZDk2ZDZjNGE0N2FmZGU2ZAogKi8KCmxpYnJhcnkgRUNSZWNvdmVyeSB7CgogIC8qKgogICAqIEBkZXYgUmVjb3ZlciBzaWduZXIgYWRkcmVzcyBmcm9tIGEgbWVzc2FnZSBieSB1c2luZyBoaXMgc2lnbmF0dXJlCiAgICogQHBhcmFtIGhhc2ggYnl0ZXMzMiBtZXNzYWdlLCB0aGUgaGFzaCBpcyB0aGUgc2lnbmVkIG1lc3NhZ2UuIFdoYXQgaXMgcmVjb3ZlcmVkIGlzIHRoZSBzaWduZXIgYWRkcmVzcy4KICAgKiBAcGFyYW0gc2lnIGJ5dGVzIHNpZ25hdHVyZSwgdGhlIHNpZ25hdHVyZSBpcyBnZW5lcmF0ZWQgdXNpbmcgd2ViMy5ldGguc2lnbigpCiAgICovCiAgZnVuY3Rpb24gcmVjb3ZlcihieXRlczMyIGhhc2gsIGJ5dGVzIHNpZykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgIGJ5dGVzMzIgcjsKICAgIGJ5dGVzMzIgczsKICAgIHVpbnQ4IHY7CgogICAgLy9DaGVjayB0aGUgc2lnbmF0dXJlIGxlbmd0aAogICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpIHsKICAgICAgcmV0dXJuIChhZGRyZXNzKDApKTsKICAgIH0KCiAgICAvLyBEaXZpZGUgdGhlIHNpZ25hdHVyZSBpbiByLCBzIGFuZCB2IHZhcmlhYmxlcwogICAgYXNzZW1ibHkgewogICAgICByIDo9IG1sb2FkKGFkZChzaWcsIDMyKSkKICAgICAgcyA6PSBtbG9hZChhZGQoc2lnLCA2NCkpCiAgICAgIHYgOj0gYnl0ZSgwLCBtbG9hZChhZGQoc2lnLCA5NikpKQogICAgfQoKICAgIC8vIFZlcnNpb24gb2Ygc2lnbmF0dXJlIHNob3VsZCBiZSAyNyBvciAyOCwgYnV0IDAgYW5kIDEgYXJlIGFsc28gcG9zc2libGUgdmVyc2lvbnMKICAgIGlmICh2IDwgMjcpIHsKICAgICAgdiArPSAyNzsKICAgIH0KCiAgICAvLyBJZiB0aGUgdmVyc2lvbiBpcyBjb3JyZWN0IHJldHVybiB0aGUgc2lnbmVyIGFkZHJlc3MKICAgIGlmICh2ICE9IDI3ICYmIHYgIT0gMjgpIHsKICAgICAgcmV0dXJuIChhZGRyZXNzKDApKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBlY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7CiAgICB9CiAgfQoKfQoKCi8vUGFweXJ1cyBTdGF0ZSBDaGFubmVsIExpYnJhcnkKLy9tb3ZlZCB0byBzZXBhcmF0ZSBsaWJyYXJ5IHRvIHNhdmUgZ2FzCmxpYnJhcnkgQ2hhbm5lbExpYnJhcnkgewogICAgCiAgICBzdHJ1Y3QgRGF0YSB7CiAgICAgICAgdWludCBjbG9zZV90aW1lb3V0OwogICAgICAgIHVpbnQgc2V0dGxlX3RpbWVvdXQ7CiAgICAgICAgdWludCBhdWRpdF90aW1lb3V0OwogICAgICAgIHVpbnQgb3BlbmVkOwogICAgICAgIHVpbnQgY2xvc2VfcmVxdWVzdGVkOwogICAgICAgIHVpbnQgY2xvc2VkOwogICAgICAgIHVpbnQgc2V0dGxlZDsKICAgICAgICB1aW50IGF1ZGl0ZWQ7CiAgICAgICAgQ2hhbm5lbE1hbmFnZXJDb250cmFjdCBtYW5hZ2VyOwogICAgCiAgICAgICAgYWRkcmVzcyBzZW5kZXI7CiAgICAgICAgYWRkcmVzcyByZWNlaXZlcjsKICAgICAgICBhZGRyZXNzIGNsaWVudDsKICAgICAgICB1aW50IGJhbGFuY2U7CiAgICAgICAgYWRkcmVzcyBhdWRpdG9yOwoKICAgICAgICAvL3N0YXRlIHVwZGF0ZSBmb3IgY2xvc2UKICAgICAgICB1aW50IG5vbmNlOwogICAgICAgIHVpbnQgY29tcGxldGVkX3RyYW5zZmVyczsKICAgIH0KCiAgICBzdHJ1Y3QgU3RhdGVVcGRhdGUgewogICAgICAgIHVpbnQgbm9uY2U7CiAgICAgICAgdWludCBjb21wbGV0ZWRfdHJhbnNmZXJzOwogICAgfQoKICAgIG1vZGlmaWVyIG5vdFNldHRsZWRCdXRDbG9zZWQoRGF0YSBzdG9yYWdlIHNlbGYpIHsKICAgICAgICByZXF1aXJlKHNlbGYuc2V0dGxlZCA8PSAwICYmIHNlbGYuY2xvc2VkID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBub3RBdWRpdGVkQnV0Q2xvc2VkKERhdGEgc3RvcmFnZSBzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLmF1ZGl0ZWQgPD0gMCAmJiBzZWxmLmNsb3NlZCA+IDApOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgc3RpbGxUaW1lb3V0KERhdGEgc3RvcmFnZSBzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLmNsb3NlZCArIHNlbGYuc2V0dGxlX3RpbWVvdXQgPj0gYmxvY2subnVtYmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRpbWVvdXRPdmVyKERhdGEgc3RvcmFnZSBzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLmNsb3NlZCArIHNlbGYuc2V0dGxlX3RpbWVvdXQgPD0gYmxvY2subnVtYmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNoYW5uZWxTZXR0bGVkKERhdGEgc3RvcmFnZSBzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLnNldHRsZWQgIT0gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBzZW5kZXJPbmx5KERhdGEgc3RvcmFnZSBzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLnNlbmRlciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHJlY2VpdmVyT25seShEYXRhIHN0b3JhZ2Ugc2VsZikgewogICAgICAgIHJlcXVpcmUoc2VsZi5yZWNlaXZlciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmRlciBkZXBvc2l0cyBhbW91bnQgdG8gY2hhbm5lbC4KICAgIC8vLyBtdXN0IGRlcG9zaXQgYmVmb3JlIHRoZSBjaGFubmVsIGlzIG9wZW5lZC4KICAgIC8vLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgdG8gYmUgZGVwb3NpdGVkIHRvIHRoZSBhZGRyZXNzCiAgICAvLy8gQHJldHVybiBTdWNjZXNzIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogICAgLy8vIEByZXR1cm4gVGhlIG5ldyBiYWxhbmNlIG9mIHRoZSBpbnZva2VyCiAgICBmdW5jdGlvbiBkZXBvc2l0KERhdGEgc3RvcmFnZSBzZWxmLCB1aW50MjU2IGFtb3VudCkgCiAgICBzZW5kZXJPbmx5KHNlbGYpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MsIHVpbnQyNTYgYmFsYW5jZSkKICAgIHsKICAgICAgICByZXF1aXJlKHNlbGYub3BlbmVkID4gMCk7CiAgICAgICAgcmVxdWlyZShzZWxmLmNsb3NlZCA9PSAwKTsKCiAgICAgICAgU3RhbmRhcmRUb2tlbiB0b2tlbiA9IHNlbGYubWFuYWdlci50b2tlbigpOwoKICAgICAgICByZXF1aXJlICh0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gYW1vdW50KTsKCiAgICAgICAgc3VjY2VzcyA9IHRva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOwogICAgCiAgICAgICAgaWYgKHN1Y2Nlc3MgPT0gdHJ1ZSkgewogICAgICAgICAgICBzZWxmLmJhbGFuY2UgKz0gYW1vdW50OwoKICAgICAgICAgICAgcmV0dXJuICh0cnVlLCBzZWxmLmJhbGFuY2UpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVxdWVzdF9jbG9zZSgKICAgICAgICBEYXRhIHN0b3JhZ2Ugc2VsZgogICAgKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNlbGYuc2VuZGVyIHx8IG1zZy5zZW5kZXIgPT0gc2VsZi5yZWNlaXZlcik7CiAgICAgICAgcmVxdWlyZShzZWxmLmNsb3NlX3JlcXVlc3RlZCA9PSAwKTsKICAgICAgICBzZWxmLmNsb3NlX3JlcXVlc3RlZCA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZSgKICAgICAgICBEYXRhIHN0b3JhZ2Ugc2VsZiwKICAgICAgICBhZGRyZXNzIGNoYW5uZWxfYWRkcmVzcywKICAgICAgICB1aW50IG5vbmNlLAogICAgICAgIHVpbnQgY29tcGxldGVkX3RyYW5zZmVycywKICAgICAgICBieXRlcyBzaWduYXR1cmUKICAgICkKICAgIHsKICAgICAgICBpZiAoc2VsZi5jbG9zZV90aW1lb3V0ID4gMCkgewogICAgICAgICAgICByZXF1aXJlKHNlbGYuY2xvc2VfcmVxdWVzdGVkID4gMCk7CiAgICAgICAgICAgIHJlcXVpcmUoYmxvY2subnVtYmVyIC0gc2VsZi5jbG9zZV9yZXF1ZXN0ZWQgPj0gc2VsZi5jbG9zZV90aW1lb3V0KTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShub25jZSA+IHNlbGYubm9uY2UpOwogICAgICAgIHJlcXVpcmUoY29tcGxldGVkX3RyYW5zZmVycyA+PSBzZWxmLmNvbXBsZXRlZF90cmFuc2ZlcnMpOwogICAgICAgIHJlcXVpcmUoY29tcGxldGVkX3RyYW5zZmVycyA8PSBzZWxmLmJhbGFuY2UpOwogICAgCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gc2VsZi5zZW5kZXIpIHsKICAgICAgICAgICAgLy9jaGVja2luZyBzaWduYXR1cmUKICAgICAgICAgICAgYnl0ZXMzMiBzaWduZWRfaGFzaCA9IGhhc2hTdGF0ZSgKICAgICAgICAgICAgICAgIGNoYW5uZWxfYWRkcmVzcywKICAgICAgICAgICAgICAgIG5vbmNlLAogICAgICAgICAgICAgICAgY29tcGxldGVkX3RyYW5zZmVycwogICAgICAgICAgICApOwoKICAgICAgICAgICAgYWRkcmVzcyBzaWduX2FkZHJlc3MgPSBFQ1JlY292ZXJ5LnJlY292ZXIoc2lnbmVkX2hhc2gsIHNpZ25hdHVyZSk7CiAgICAgICAgICAgIHJlcXVpcmUoc2lnbl9hZGRyZXNzID09IHNlbGYuc2VuZGVyKTsKICAgICAgICB9CgogICAgICAgIGlmIChzZWxmLmNsb3NlZCA9PSAwKSB7CiAgICAgICAgICAgIHNlbGYuY2xvc2VkID0gYmxvY2subnVtYmVyOwogICAgICAgIH0KICAgIAogICAgICAgIHNlbGYubm9uY2UgPSBub25jZTsKICAgICAgICBzZWxmLmNvbXBsZXRlZF90cmFuc2ZlcnMgPSBjb21wbGV0ZWRfdHJhbnNmZXJzOwogICAgfQoKICAgIGZ1bmN0aW9uIGhhc2hTdGF0ZSAoCiAgICAgICAgYWRkcmVzcyBjaGFubmVsX2FkZHJlc3MsCiAgICAgICAgdWludCBub25jZSwKICAgICAgICB1aW50IGNvbXBsZXRlZF90cmFuc2ZlcnMKICAgICkgcmV0dXJucyAoYnl0ZXMzMikgewogICAgICAgIHJldHVybiBzaGEzICgKICAgICAgICAgICAgY2hhbm5lbF9hZGRyZXNzLAogICAgICAgICAgICBub25jZSwKICAgICAgICAgICAgY29tcGxldGVkX3RyYW5zZmVycwogICAgICAgICk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2V0dGxlcyB0aGUgYmFsYW5jZSBiZXR3ZWVuIHRoZSB0d28gcGFydGllcwogICAgLy8vIEBkZXYgU2V0dGxlcyB0aGUgYmFsYW5jZXMgb2YgdGhlIHR3byBwYXJ0aWVzIGZvIHRoZSBjaGFubmVsCiAgICAvLy8gQHJldHVybiBUaGUgcGFydGljaXBhbnRzIHdpdGggbmV0dGVkIGJhbGFuY2VzCiAgICBmdW5jdGlvbiBzZXR0bGUoRGF0YSBzdG9yYWdlIHNlbGYpCiAgICAgICAgbm90U2V0dGxlZEJ1dENsb3NlZChzZWxmKQogICAgICAgIHRpbWVvdXRPdmVyKHNlbGYpCiAgICB7CiAgICAgICAgU3RhbmRhcmRUb2tlbiB0b2tlbiA9IHNlbGYubWFuYWdlci50b2tlbigpOwogICAgICAgIAogICAgICAgIGlmIChzZWxmLmNvbXBsZXRlZF90cmFuc2ZlcnMgPiAwKSB7CiAgICAgICAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIoc2VsZi5yZWNlaXZlciwgc2VsZi5jb21wbGV0ZWRfdHJhbnNmZXJzKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc2VsZi5jb21wbGV0ZWRfdHJhbnNmZXJzIDwgc2VsZi5iYWxhbmNlKSB7CiAgICAgICAgICAgIHJlcXVpcmUodG9rZW4udHJhbnNmZXIoc2VsZi5zZW5kZXIsIHNlbGYuYmFsYW5jZSAtIHNlbGYuY29tcGxldGVkX3RyYW5zZmVycykpOwogICAgICAgIH0KCiAgICAgICAgc2VsZi5zZXR0bGVkID0gYmxvY2subnVtYmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGF1ZGl0KERhdGEgc3RvcmFnZSBzZWxmLCBhZGRyZXNzIGF1ZGl0b3IpCiAgICAgICAgbm90QXVkaXRlZEJ1dENsb3NlZChzZWxmKSB7CiAgICAgICAgcmVxdWlyZShzZWxmLmF1ZGl0b3IgPT0gYXVkaXRvcik7CiAgICAgICAgcmVxdWlyZShibG9jay5udW1iZXIgPD0gc2VsZi5jbG9zZWQgKyBzZWxmLmF1ZGl0X3RpbWVvdXQpOwogICAgICAgIHNlbGYuYXVkaXRlZCA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZVRyYW5zZmVyKAogICAgICAgIERhdGEgc3RvcmFnZSBzZWxmLAogICAgICAgIGFkZHJlc3MgdHJhbnNmZXJfaWQsCiAgICAgICAgYWRkcmVzcyBjaGFubmVsX2FkZHJlc3MsCiAgICAgICAgdWludCBzdW0sCiAgICAgICAgYnl0ZXMgbG9ja19kYXRhLAogICAgICAgIGJ5dGVzIHNpZ25hdHVyZQogICAgKSByZXR1cm5zICh1aW50MjU2KSB7CgogICAgICAgIGJ5dGVzMzIgc2lnbmVkX2hhc2ggPSBoYXNoVHJhbnNmZXIoCiAgICAgICAgICAgIHRyYW5zZmVyX2lkLAogICAgICAgICAgICBjaGFubmVsX2FkZHJlc3MsCiAgICAgICAgICAgIGxvY2tfZGF0YSwKICAgICAgICAgICAgc3VtCiAgICAgICAgKTsKCiAgICAgICAgYWRkcmVzcyBzaWduX2FkZHJlc3MgPSBFQ1JlY292ZXJ5LnJlY292ZXIoc2lnbmVkX2hhc2gsIHNpZ25hdHVyZSk7CiAgICAgICAgcmVxdWlyZShzaWduX2FkZHJlc3MgPT0gc2VsZi5jbGllbnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhhc2hUcmFuc2ZlcigKICAgICAgICBhZGRyZXNzIHRyYW5zZmVyX2lkLAogICAgICAgIGFkZHJlc3MgY2hhbm5lbF9hZGRyZXNzLAogICAgICAgIGJ5dGVzIGxvY2tfZGF0YSwKICAgICAgICB1aW50IHN1bQogICAgKSByZXR1cm5zIChieXRlczMyKSB7CiAgICAgICAgaWYgKGxvY2tfZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHJldHVybiBzaGEzICgKICAgICAgICAgICAgICAgIHRyYW5zZmVyX2lkLAogICAgICAgICAgICAgICAgY2hhbm5lbF9hZGRyZXNzLAogICAgICAgICAgICAgICAgc3VtLAogICAgICAgICAgICAgICAgbG9ja19kYXRhCiAgICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHNoYTMgKAogICAgICAgICAgICAgICAgdHJhbnNmZXJfaWQsCiAgICAgICAgICAgICAgICBjaGFubmVsX2FkZHJlc3MsCiAgICAgICAgICAgICAgICBzdW0KICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9Cn0KCgovLy8gQHRpdGxlIEVSQzIwIGludGVyZmFjZQovLy8gQGRldiBGdWxsIEVSQzIwIGludGVyZmFjZSBkZXNjcmliZWQgYXQgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwLgpjb250cmFjdCBFUkMyMCB7CgogIC8vIEVWRU5UUwoKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCiAgLy8gUFVCTElDIEZVTkNUSU9OUwoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwoKICAvLyBGSUVMRFMKCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7Cn0KCgovLy8gQHRpdGxlIFNhZmVNYXRoCi8vLyBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvci4KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgovLy8gQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCi8vLyBAZGV2IEltcGxlbWVudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFyZCB0b2tlbi4KY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIC8vIFBVQkxJQyBGVU5DVElPTlMKCiAgLy8vIEBkZXYgVHJhbnNmZXJzIHRva2VucyB0byBhIHNwZWNpZmllZCBhZGRyZXNzLgogIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvLgogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkLgogIC8vLyBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIAogIC8vLyBAZGV2IFRyYW5zZmVycyB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLgogIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbS4KICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0by4KICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZC4KICAvLy8gQHJldHVybiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC4KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dhbmNlc1tfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBhbGxvd2FuY2VzW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93YW5jZXNbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8vIEBkZXYgQXBwcm92ZXMgdGhlIHNwZWNpZmllZCBhZGRyZXNzIHRvIHNwZW5kIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRva2VucyBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlci4KICAvLy8gQmV3YXJlIHRoYXQgY2hhbmdpbmcgYW4gYWxsb3dhbmNlIHdpdGggdGhpcyBtZXRob2QgYnJpbmdzIHRoZSByaXNrIHRoYXQgc29tZW9uZSBtYXkgdXNlIGJvdGggdGhlIG9sZAogIC8vLyBhbmQgdGhlIG5ldyBhbGxvd2FuY2UgYnkgdW5mb3J0dW5hdGUgdHJhbnNhY3Rpb24gb3JkZXJpbmcuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiB0byBtaXRpZ2F0ZSB0aGlzCiAgLy8vIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAvLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdG9rZW5zLgogIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogIC8vLyBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2FuY2VzW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLy8gQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgYmFsYW5jZSBvZi4KICAvLy8gQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CgogIC8vLyBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dhbmNlcyB0byBhIHNwZW5kZXIuCiAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0b2tlbnMuCiAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRva2Vucy4KICAvLy8gQHJldHVybiBBIHVpbnQyNTYgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpbGFibGUgZm9yIHRoZSBzcGVuZGVyLgogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhbGxvd2FuY2VzW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCiAgLy8gRklFTERTCgogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2FuY2VzOwp9CgoKY29udHJhY3QgQ2hhbm5lbEFwaSB7CiAgICBmdW5jdGlvbiBhcHBseVJ1bnRpbWVVcGRhdGUoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IGltcHJlc3Npb25zQ291bnQsIHVpbnQgZnJhdWRDb3VudCk7CgogICAgZnVuY3Rpb24gYXBwbHlBdWRpdG9yc0NoZWNrVXBkYXRlKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCBmcmF1ZENvdW50RGVsdGEpOwp9CgoKY29udHJhY3QgQ2hhbm5lbENvbnRyYWN0IHsKICAgIHVzaW5nIENoYW5uZWxMaWJyYXJ5IGZvciBDaGFubmVsTGlicmFyeS5EYXRhOwogICAgQ2hhbm5lbExpYnJhcnkuRGF0YSBkYXRhOwoKICAgIGV2ZW50IENoYW5uZWxOZXdCYWxhbmNlKGFkZHJlc3MgdG9rZW5fYWRkcmVzcywgYWRkcmVzcyBwYXJ0aWNpcGFudCwgdWludCBiYWxhbmNlLCB1aW50IGJsb2NrX251bWJlcik7CiAgICBldmVudCBDaGFubmVsQ2xvc2VSZXF1ZXN0ZWQoYWRkcmVzcyBjbG9zaW5nX2FkZHJlc3MsIHVpbnQgYmxvY2tfbnVtYmVyKTsKICAgIGV2ZW50IENoYW5uZWxDbG9zZWQoYWRkcmVzcyBjbG9zaW5nX2FkZHJlc3MsIHVpbnQgYmxvY2tfbnVtYmVyKTsKICAgIGV2ZW50IFRyYW5zZmVyVXBkYXRlZChhZGRyZXNzIG5vZGVfYWRkcmVzcywgdWludCBibG9ja19udW1iZXIpOwogICAgZXZlbnQgQ2hhbm5lbFNldHRsZWQodWludCBibG9ja19udW1iZXIpOwogICAgZXZlbnQgQ2hhbm5lbEF1ZGl0ZWQodWludCBibG9ja19udW1iZXIpOwogICAgZXZlbnQgQ2hhbm5lbFNlY3JldFJldmVhbGVkKGJ5dGVzMzIgc2VjcmV0LCBhZGRyZXNzIHJlY2VpdmVyX2FkZHJlc3MpOwoKICAgIG1vZGlmaWVyIG9ubHlNYW5hZ2VyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKGRhdGEubWFuYWdlcikpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbm5lbENvbnRyYWN0KAogICAgICAgIGFkZHJlc3MgbWFuYWdlcl9hZGRyZXNzLAogICAgICAgIGFkZHJlc3Mgc2VuZGVyLAogICAgICAgIGFkZHJlc3MgY2xpZW50LAogICAgICAgIGFkZHJlc3MgcmVjZWl2ZXIsCiAgICAgICAgdWludCBjbG9zZV90aW1lb3V0LAogICAgICAgIHVpbnQgc2V0dGxlX3RpbWVvdXQsCiAgICAgICAgdWludCBhdWRpdF90aW1lb3V0LAogICAgICAgIGFkZHJlc3MgYXVkaXRvcgogICAgKQogICAgewogICAgICAgIC8vYWxsb3cgY3JlYXRpb24gb25seSBmcm9tIG1hbmFnZXIgY29udHJhY3QKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWFuYWdlcl9hZGRyZXNzKTsKICAgICAgICByZXF1aXJlIChzZW5kZXIgIT0gcmVjZWl2ZXIpOwogICAgICAgIHJlcXVpcmUgKGNsaWVudCAhPSByZWNlaXZlcik7CiAgICAgICAgcmVxdWlyZSAoYXVkaXRfdGltZW91dCA+PSAwKTsKICAgICAgICByZXF1aXJlIChzZXR0bGVfdGltZW91dCA+IDApOwogICAgICAgIHJlcXVpcmUgKGNsb3NlX3RpbWVvdXQgPj0gMCk7CgogICAgICAgIGRhdGEuc2VuZGVyID0gc2VuZGVyOwogICAgICAgIGRhdGEuY2xpZW50ID0gY2xpZW50OwogICAgICAgIGRhdGEucmVjZWl2ZXIgPSByZWNlaXZlcjsKICAgICAgICBkYXRhLmF1ZGl0b3IgPSBhdWRpdG9yOwogICAgICAgIGRhdGEubWFuYWdlciA9IENoYW5uZWxNYW5hZ2VyQ29udHJhY3QobWFuYWdlcl9hZGRyZXNzKTsKICAgICAgICBkYXRhLmNsb3NlX3RpbWVvdXQgPSBjbG9zZV90aW1lb3V0OwogICAgICAgIGRhdGEuc2V0dGxlX3RpbWVvdXQgPSBzZXR0bGVfdGltZW91dDsKICAgICAgICBkYXRhLmF1ZGl0X3RpbWVvdXQgPSBhdWRpdF90aW1lb3V0OwogICAgICAgIGRhdGEub3BlbmVkID0gYmxvY2subnVtYmVyOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENhbGxlciBtYWtlcyBhIGRlcG9zaXQgaW50byB0aGVpciBjaGFubmVsIGJhbGFuY2UuCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IGNhbGxlciB3YW50cyB0byBkZXBvc2l0LgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBkZXBvc2l0IGlzIHN1Y2Nlc3NmdWwuCiAgICBmdW5jdGlvbiBkZXBvc2l0KHVpbnQyNTYgYW1vdW50KSByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBzdWNjZXNzOwogICAgICAgIHVpbnQyNTYgYmFsYW5jZTsKCiAgICAgICAgKHN1Y2Nlc3MsIGJhbGFuY2UpID0gZGF0YS5kZXBvc2l0KGFtb3VudCk7CgogICAgICAgIGlmIChzdWNjZXNzID09IHRydWUpIHsKICAgICAgICAgICAgQ2hhbm5lbE5ld0JhbGFuY2UoZGF0YS5tYW5hZ2VyLnRva2VuKCksIG1zZy5zZW5kZXIsIGJhbGFuY2UsIDApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7CiAgICB9CgogICAgLy8vIEBub3RpY2UgR2V0IHRoZSBhZGRyZXNzIGFuZCBiYWxhbmNlIG9mIGJvdGggcGFydG5lcnMgaW4gYSBjaGFubmVsLgogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3MgYW5kIGJhbGFuY2UgcGFpcnMuCiAgICBmdW5jdGlvbiBhZGRyZXNzQW5kQmFsYW5jZSgpCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICgKICAgICAgICBhZGRyZXNzIHNlbmRlciwKICAgICAgICBhZGRyZXNzIHJlY2VpdmVyLAogICAgICAgIHVpbnQgYmFsYW5jZSkKICAgIHsKICAgICAgICBzZW5kZXIgPSBkYXRhLnNlbmRlcjsKICAgICAgICByZWNlaXZlciA9IGRhdGEucmVjZWl2ZXI7CiAgICAgICAgYmFsYW5jZSA9IGRhdGEuYmFsYW5jZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXF1ZXN0IHRvIGNsb3NlIHRoZSBjaGFubmVsLiAKICAgIGZ1bmN0aW9uIHJlcXVlc3RfY2xvc2UgKCkgewogICAgICAgIGRhdGEucmVxdWVzdF9jbG9zZSgpOwogICAgICAgIENoYW5uZWxDbG9zZVJlcXVlc3RlZChtc2cuc2VuZGVyLCBkYXRhLmNsb3NlZCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQ2xvc2UgdGhlIGNoYW5uZWwuIAogICAgZnVuY3Rpb24gY2xvc2UgKAogICAgICAgIHVpbnQgbm9uY2UsCiAgICAgICAgdWludDI1NiBjb21wbGV0ZWRfdHJhbnNmZXJzLAogICAgICAgIGJ5dGVzIHNpZ25hdHVyZQogICAgKSB7CiAgICAgICAgZGF0YS5jbG9zZShhZGRyZXNzKHRoaXMpLCBub25jZSwgY29tcGxldGVkX3RyYW5zZmVycywgc2lnbmF0dXJlKTsKICAgICAgICBDaGFubmVsQ2xvc2VkKG1zZy5zZW5kZXIsIGRhdGEuY2xvc2VkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZXR0bGUgdGhlIHRyYW5zZmVycyBhbmQgYmFsYW5jZXMgb2YgdGhlIGNoYW5uZWwgYW5kIHBheSBvdXQgdG8KICAgIC8vLyAgICAgICAgIGVhY2ggcGFydGljaXBhbnQuIENhbiBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgY2hhbm5lbCBpcyBjbG9zZWQKICAgIC8vLyAgICAgICAgIGFuZCBvbmx5IGFmdGVyIHRoZSBudW1iZXIgb2YgYmxvY2tzIGluIHRoZSBzZXR0bGVtZW50IHRpbWVvdXQKICAgIC8vLyAgICAgICAgIGhhdmUgcGFzc2VkLgogICAgZnVuY3Rpb24gc2V0dGxlKCkgewogICAgICAgIGRhdGEuc2V0dGxlKCk7CiAgICAgICAgQ2hhbm5lbFNldHRsZWQoZGF0YS5zZXR0bGVkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZXR0bGUgdGhlIHRyYW5zZmVycyBhbmQgYmFsYW5jZXMgb2YgdGhlIGNoYW5uZWwgYW5kIHBheSBvdXQgdG8KICAgIC8vLyAgICAgICAgIGVhY2ggcGFydGljaXBhbnQuIENhbiBvbmx5IGJlIGNhbGxlZCBhZnRlciB0aGUgY2hhbm5lbCBpcyBjbG9zZWQKICAgIC8vLyAgICAgICAgIGFuZCBvbmx5IGFmdGVyIHRoZSBudW1iZXIgb2YgYmxvY2tzIGluIHRoZSBzZXR0bGVtZW50IHRpbWVvdXQKICAgIC8vLyAgICAgICAgIGhhdmUgcGFzc2VkLgogICAgZnVuY3Rpb24gYXVkaXQoYWRkcmVzcyBhdWRpdG9yKSBvbmx5TWFuYWdlciB7CiAgICAgICAgZGF0YS5hdWRpdChhdWRpdG9yKTsKICAgICAgICBDaGFubmVsQXVkaXRlZChkYXRhLmF1ZGl0ZWQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSBvbmx5TWFuYWdlciB7CiAgICAgICAgcmVxdWlyZShkYXRhLnNldHRsZWQgPiAwKTsKICAgICAgICByZXF1aXJlKGRhdGEuYXVkaXRlZCA+IDAgfHwgYmxvY2subnVtYmVyID4gZGF0YS5jbG9zZWQgKyBkYXRhLmF1ZGl0X3RpbWVvdXQpOwogICAgICAgIHNlbGZkZXN0cnVjdCgwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZW5kZXIoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGRhdGEuc2VuZGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlY2VpdmVyKCkgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBkYXRhLnJlY2VpdmVyOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsaWVudCgpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gZGF0YS5jbGllbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gYXVkaXRvcigpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gZGF0YS5hdWRpdG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsb3NlVGltZW91dCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gZGF0YS5jbG9zZV90aW1lb3V0OwogICAgfQoKICAgIGZ1bmN0aW9uIHNldHRsZVRpbWVvdXQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRhdGEuc2V0dGxlX3RpbWVvdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gYXVkaXRUaW1lb3V0KCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkYXRhLmF1ZGl0X3RpbWVvdXQ7CiAgICB9CgogICAgLy8vIEByZXR1cm4gUmV0dXJucyB0aGUgYWRkcmVzcyBvZiB0aGUgbWFuYWdlci4KICAgIGZ1bmN0aW9uIG1hbmFnZXIoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIGRhdGEubWFuYWdlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkYXRhLmJhbGFuY2U7CiAgICB9CgogICAgZnVuY3Rpb24gbm9uY2UoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRhdGEubm9uY2U7CiAgICB9CgogICAgZnVuY3Rpb24gY29tcGxldGVkVHJhbnNmZXJzKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkYXRhLmNvbXBsZXRlZF90cmFuc2ZlcnM7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyB0aGUgYmxvY2sgbnVtYmVyIGZvciB3aGVuIHRoZSBjaGFubmVsIHdhcyBvcGVuZWQuCiAgICAvLy8gQHJldHVybiBUaGUgYmxvY2sgbnVtYmVyIGZvciB3aGVuIHRoZSBjaGFubmVsIHdhcyBvcGVuZWQuCiAgICBmdW5jdGlvbiBvcGVuZWQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRhdGEub3BlbmVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsb3NlUmVxdWVzdGVkKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkYXRhLmNsb3NlX3JlcXVlc3RlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZWQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRhdGEuY2xvc2VkOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldHRsZWQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRhdGEuc2V0dGxlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBhdWRpdGVkKCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBkYXRhLmF1ZGl0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgeyByZXZlcnQoKTsgfQp9CgoKY29udHJhY3QgQ2hhbm5lbE1hbmFnZXJDb250cmFjdCB7CgogICAgZXZlbnQgQ2hhbm5lbE5ldygKICAgICAgICBhZGRyZXNzIGNoYW5uZWxfYWRkcmVzcywKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLAogICAgICAgIGFkZHJlc3MgY2xpZW50LAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCByZWNlaXZlciwKICAgICAgICB1aW50IGNsb3NlX3RpbWVvdXQsCiAgICAgICAgdWludCBzZXR0bGVfdGltZW91dCwKICAgICAgICB1aW50IGF1ZGl0X3RpbWVvdXQKICAgICk7CgogICAgZXZlbnQgQ2hhbm5lbERlbGV0ZWQoCiAgICAgICAgYWRkcmVzcyBjaGFubmVsX2FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIHNlbmRlciwKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcmVjZWl2ZXIKICAgICk7CgogICAgU3RhbmRhcmRUb2tlbiBwdWJsaWMgdG9rZW47CiAgICBDaGFubmVsQXBpIHB1YmxpYyBjaGFubmVsX2FwaTsKCiAgICBmdW5jdGlvbiBDaGFubmVsTWFuYWdlckNvbnRyYWN0KGFkZHJlc3MgdG9rZW5fYWRkcmVzcywgYWRkcmVzcyBjaGFubmVsX2FwaV9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlbl9hZGRyZXNzICE9IDApOwogICAgICAgIHJlcXVpcmUoY2hhbm5lbF9hcGlfYWRkcmVzcyAhPSAwKTsKICAgICAgICB0b2tlbiA9IFN0YW5kYXJkVG9rZW4odG9rZW5fYWRkcmVzcyk7CiAgICAgICAgY2hhbm5lbF9hcGkgPSBDaGFubmVsQXBpKGNoYW5uZWxfYXBpX2FkZHJlc3MpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENyZWF0ZSBhIG5ldyBjaGFubmVsIGZyb20gbXNnLnNlbmRlciB0byByZWNlaXZlcgogICAgLy8vIEBwYXJhbSByZWNlaXZlciBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjZWl2ZXIKICAgIC8vLyBAcGFyYW0gc2V0dGxlX3RpbWVvdXQgVGhlIHNldHRsZSB0aW1lb3V0IGluIGJsb2NrcwogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgQ2hhbm5lbENvbnRyYWN0LgogICAgZnVuY3Rpb24gbmV3Q2hhbm5lbCgKICAgICAgICBhZGRyZXNzIGNsaWVudCwgCiAgICAgICAgYWRkcmVzcyByZWNlaXZlciwgCiAgICAgICAgdWludCBjbG9zZV90aW1lb3V0LAogICAgICAgIHVpbnQgc2V0dGxlX3RpbWVvdXQsCiAgICAgICAgdWludCBhdWRpdF90aW1lb3V0LAogICAgICAgIGFkZHJlc3MgYXVkaXRvcgogICAgKQogICAgICAgIHJldHVybnMgKGFkZHJlc3MpCiAgICB7CiAgICAgICAgYWRkcmVzcyBuZXdfY2hhbm5lbF9hZGRyZXNzID0gbmV3IENoYW5uZWxDb250cmFjdCgKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgY2xpZW50LAogICAgICAgICAgICByZWNlaXZlciwKICAgICAgICAgICAgY2xvc2VfdGltZW91dCwKICAgICAgICAgICAgc2V0dGxlX3RpbWVvdXQsCiAgICAgICAgICAgIGF1ZGl0X3RpbWVvdXQsCiAgICAgICAgICAgIGF1ZGl0b3IKICAgICAgICApOwoKICAgICAgICBDaGFubmVsTmV3KAogICAgICAgICAgICBuZXdfY2hhbm5lbF9hZGRyZXNzLCAKICAgICAgICAgICAgbXNnLnNlbmRlciwgCiAgICAgICAgICAgIGNsaWVudCwgCiAgICAgICAgICAgIHJlY2VpdmVyLAogICAgICAgICAgICBjbG9zZV90aW1lb3V0LAogICAgICAgICAgICBzZXR0bGVfdGltZW91dCwKICAgICAgICAgICAgYXVkaXRfdGltZW91dAogICAgICAgICk7CgogICAgICAgIHJldHVybiBuZXdfY2hhbm5lbF9hZGRyZXNzOwogICAgfQoKICAgIGZ1bmN0aW9uIGF1ZGl0UmVwb3J0KGFkZHJlc3MgY29udHJhY3RfYWRkcmVzcywgdWludCB0b3RhbCwgdWludCBmcmF1ZCkgewogICAgICAgIENoYW5uZWxDb250cmFjdCBjaCA9IENoYW5uZWxDb250cmFjdChjb250cmFjdF9hZGRyZXNzKTsKICAgICAgICByZXF1aXJlKGNoLm1hbmFnZXIoKSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBhZGRyZXNzIGF1ZGl0b3IgPSBtc2cuc2VuZGVyOwogICAgICAgIGNoLmF1ZGl0KGF1ZGl0b3IpOwogICAgICAgIGNoYW5uZWxfYXBpLmFwcGx5UnVudGltZVVwZGF0ZShjaC5zZW5kZXIoKSwgY2gucmVjZWl2ZXIoKSwgdG90YWwsIGZyYXVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZGVzdHJveUNoYW5uZWwoYWRkcmVzcyBjaGFubmVsX2FkZHJlc3MpIHsKICAgICAgICBDaGFubmVsQ29udHJhY3QgY2ggPSBDaGFubmVsQ29udHJhY3QoY2hhbm5lbF9hZGRyZXNzKTsKICAgICAgICByZXF1aXJlKGNoLm1hbmFnZXIoKSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBDaGFubmVsRGVsZXRlZChjaGFubmVsX2FkZHJlc3MsY2guc2VuZGVyKCksY2gucmVjZWl2ZXIoKSk7CiAgICAgICAgY2guZGVzdHJveSgpOwogICAgfQp9'.
	

]
