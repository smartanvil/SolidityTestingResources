Class {
	#name : #SRT0d7a422dbda65fe5b075fe3132201f161f5fb159,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0d7a422dbda65fe5b075fe3132201f161f5fb159 >> base64 [
	^ ''.
	

]
