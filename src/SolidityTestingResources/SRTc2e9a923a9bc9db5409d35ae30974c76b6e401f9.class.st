Class {
	#name : #SRTc2e9a923a9bc9db5409d35ae30974c76b6e401f9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2e9a923a9bc9db5409d35ae30974c76b6e401f9 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKgogIGh0dHBzOi8vY3J5cHRvZ3MuaW8KICAtLUF1c3RpbiBUaG9tYXMgR3JpZmZpdGggZm9yIEVUSERlbnZlcgogICggUFMgdGhpcyBnYXMgZ3V6emxpbmcgYmVhc3QgaXMgc3RpbGwgdW5hdWRpdGVkICkKKi8KCgovL2FkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzIxCi8vIHRoYW5rcyB0byBEaWV0ZXIgU2hpcmxleSAmJiBodHRwOi8vYXhpb216ZW4uY28KCmNvbnRyYWN0IE5GVCB7CgogIGZ1bmN0aW9uIE5GVCgpIHB1YmxpYyB7IH0KCiAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgdG9rZW5JbmRleFRvT3duZXI7CiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBvd25lcnNoaXBUb2tlbkNvdW50OwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHRva2VuSW5kZXhUb0FwcHJvdmVkOwoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90byx1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB7CiAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKHRoaXMpKTsKICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgfQogIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgICBvd25lcnNoaXBUb2tlbkNvdW50W190b10rKzsKICAgICAgdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdID0gX3RvOwogICAgICBpZiAoX2Zyb20gIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgb3duZXJzaGlwVG9rZW5Db3VudFtfZnJvbV0tLTsKICAgICAgICAgIGRlbGV0ZSB0b2tlbkluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICAgIH0KICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIH0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLGFkZHJlc3MgX3RvLHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsIHsKICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICByZXF1aXJlKF9hcHByb3ZlZEZvcihtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgICByZXF1aXJlKF9vd25zKF9mcm9tLCBfdG9rZW5JZCkpOwogICAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIH0KCiAgZnVuY3Rpb24gX293bnMoYWRkcmVzcyBfY2xhaW1hbnQsIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICByZXR1cm4gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdID09IF9jbGFpbWFudDsKICB9CiAgZnVuY3Rpb24gX2FwcHJvdmVkRm9yKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgcmV0dXJuIHRva2VuSW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9PSBfY2xhaW1hbnQ7CiAgfQogIGZ1bmN0aW9uIF9hcHByb3ZlKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgX2FwcHJvdmVkKSBpbnRlcm5hbCB7CiAgICAgIHRva2VuSW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9IF9hcHByb3ZlZDsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgICBfYXBwcm92ZShfdG9rZW5JZCwgX3RvKTsKICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICAgIHJldHVybiB0cnVlOwogIH0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgY291bnQpIHsKICAgICAgcmV0dXJuIG93bmVyc2hpcFRva2VuQ291bnRbX293bmVyXTsKICB9CgogIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKSB7CiAgICAgIG93bmVyID0gdG9rZW5JbmRleFRvT3duZXJbX3Rva2VuSWRdOwogICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogIH0KCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgIHJldHVybiBfYXBwcm92ZWRGb3IoX2NsYWltYW50LF90b2tlbklkKTsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KCgpjb250cmFjdCBDcnlwdG9ncyBpcyBORlQsIE93bmFibGUgewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJDcnlwdG9ncyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJQT0dTIjsKCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHB1cnBvc2UgPSAiRVRIRGVudmVyIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgY29udGFjdCA9ICJodHRwczovL2NyeXB0b2dzLmlvIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgYXV0aG9yID0gIkF1c3RpbiBUaG9tYXMgR3JpZmZpdGgiOwoKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBGTElQUElORVNTID0gNjQ7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgRkxJUFBJTkVTU1JPVU5EQk9OVVMgPSAxNjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBUSU1FT1VUQkxPQ0tTID0gNjA7CiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgQkxPQ0tTVU5USUxDTEVBTlVQU1RBQ0s9MTsKCiAgICBzdHJpbmcgcHVibGljIGlwZnM7CiAgICBmdW5jdGlvbiBzZXRJcGZzKHN0cmluZyBfaXBmcykgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKXsKICAgICAgaXBmcz1faXBmczsKICAgICAgSVBGUyhpcGZzKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBldmVudCBJUEZTKHN0cmluZyBpcGZzKTsKCiAgICBmdW5jdGlvbiBDcnlwdG9ncygpIHB1YmxpYyB7CiAgICAgIC8vMCBpbmRleCBzaG91bGQgYmUgYSBibGFuayBpdGVtIG93bmVkIGJ5IG5vIG9uZQogICAgICBJdGVtIG1lbW9yeSBfaXRlbSA9IEl0ZW0oewogICAgICAgIGltYWdlOiAiIgogICAgICB9KTsKICAgICAgaXRlbXMucHVzaChfaXRlbSk7CiAgICB9CgogICAgYWRkcmVzcyBwdWJsaWMgc2xhbW1lclRpbWU7CiAgICBmdW5jdGlvbiBzZXRTbGFtbWVyVGltZShhZGRyZXNzIF9zbGFtbWVyVGltZSkgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sKXsKICAgICAgLy9pbiBvcmRlciB0byB0cnVzdCB0aGF0IHRoaXMgY29udHJhY3QgaXNuJ3Qgc2VuZGluZyBhIHBsYXllcnMgdG9rZW5zCiAgICAgIC8vIHRvIGEgZGlmZmVyZW50IGNvbnRyYWN0LCB0aGUgc2xhbW1lcnRpbWUgY29udHJhY3QgaXMgc2V0IG9uY2UgYW5kCiAgICAgIC8vIG9ubHkgb25jZSAtLSBhdCBkZXBsb3kKICAgICAgcmVxdWlyZShzbGFtbWVyVGltZT09YWRkcmVzcygwKSk7CiAgICAgIHNsYW1tZXJUaW1lPV9zbGFtbWVyVGltZTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgc3RydWN0IEl0ZW17CiAgICAgIGJ5dGVzMzIgaW1hZ2U7CiAgICAgIC8vcGVyaGFwcyBzb21lIGFyZSBoYXJkZXIgdG8gZmxpcCBvdmVyPwogICAgICAvL3BlcmhhcHMgc29tZSBoYXZlIG1hZ2ljYWwgbWV0YWRhdGE/CiAgICAgIC8vSSBkb24ndCBrbm93LCBpdCdzIGxhdGUgYW5kIEknbSB3ZWlyZAogICAgfQoKICAgIEl0ZW1bXSBwcml2YXRlIGl0ZW1zOwoKICAgIGZ1bmN0aW9uIG1pbnQoYnl0ZXMzMiBfaW1hZ2UsYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAodWludCl7CiAgICAgIHVpbnQyNTYgbmV3SWQgPSBfbWludChfaW1hZ2UpOwogICAgICBfdHJhbnNmZXIoMCwgX293bmVyLCBuZXdJZCk7CiAgICAgIE1pbnQoaXRlbXNbbmV3SWRdLmltYWdlLHRva2VuSW5kZXhUb093bmVyW25ld0lkXSxuZXdJZCk7CiAgICAgIHJldHVybiBuZXdJZDsKICAgIH0KICAgIGV2ZW50IE1pbnQoYnl0ZXMzMiBfaW1hZ2UsYWRkcmVzcyBfb3duZXIsdWludDI1NiBfaWQpOwoKICAgIGZ1bmN0aW9uIF9taW50KGJ5dGVzMzIgX2ltYWdlKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsKICAgICAgSXRlbSBtZW1vcnkgX2l0ZW0gPSBJdGVtKHsKICAgICAgICBpbWFnZTogX2ltYWdlCiAgICAgIH0pOwogICAgICB1aW50MjU2IG5ld0lkID0gaXRlbXMucHVzaChfaXRlbSkgLSAxOwogICAgICB0b2tlbnNPZkltYWdlW2l0ZW1zW25ld0lkXS5pbWFnZV0rKzsKICAgICAgcmV0dXJuIG5ld0lkOwogICAgfQoKICAgIFBhY2tbXSBwcml2YXRlIHBhY2tzOwogICAgc3RydWN0IFBhY2t7CiAgICAgIHVpbnQyNTZbMTBdIHRva2VuczsKICAgICAgdWludDI1NiBwcmljZTsKICAgIH0KICAgIGZ1bmN0aW9uIG1pbnRQYWNrKHVpbnQyNTYgX3ByaWNlLGJ5dGVzMzIgX2ltYWdlMSxieXRlczMyIF9pbWFnZTIsYnl0ZXMzMiBfaW1hZ2UzLGJ5dGVzMzIgX2ltYWdlNCxieXRlczMyIF9pbWFnZTUsYnl0ZXMzMiBfaW1hZ2U2LGJ5dGVzMzIgX2ltYWdlNyxieXRlczMyIF9pbWFnZTgsYnl0ZXMzMiBfaW1hZ2U5LGJ5dGVzMzIgX2ltYWdlMTApIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCl7CiAgICAgIHVpbnQyNTZbMTBdIG1lbW9yeSB0b2tlbnM7CiAgICAgIHRva2Vuc1swXSA9IF9taW50KF9pbWFnZTEpOwogICAgICB0b2tlbnNbMV0gPSBfbWludChfaW1hZ2UyKTsKICAgICAgdG9rZW5zWzJdID0gX21pbnQoX2ltYWdlMyk7CiAgICAgIHRva2Vuc1szXSA9IF9taW50KF9pbWFnZTQpOwogICAgICB0b2tlbnNbNF0gPSBfbWludChfaW1hZ2U1KTsKICAgICAgdG9rZW5zWzVdID0gX21pbnQoX2ltYWdlNik7CiAgICAgIHRva2Vuc1s2XSA9IF9taW50KF9pbWFnZTcpOwogICAgICB0b2tlbnNbN10gPSBfbWludChfaW1hZ2U4KTsKICAgICAgdG9rZW5zWzhdID0gX21pbnQoX2ltYWdlOSk7CiAgICAgIHRva2Vuc1s5XSA9IF9taW50KF9pbWFnZTEwKTsKICAgICAgUGFjayBtZW1vcnkgX3BhY2sgPSBQYWNrKHsKICAgICAgICB0b2tlbnM6IHRva2VucywKICAgICAgICBwcmljZTogX3ByaWNlCiAgICAgIH0pOwogICAgICBNaW50UGFjayhwYWNrcy5wdXNoKF9wYWNrKSAtIDEsIF9wcmljZSx0b2tlbnNbMF0sdG9rZW5zWzFdLHRva2Vuc1syXSx0b2tlbnNbM10sdG9rZW5zWzRdLHRva2Vuc1s1XSx0b2tlbnNbNl0sdG9rZW5zWzddLHRva2Vuc1s4XSx0b2tlbnNbOV0pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGV2ZW50IE1pbnRQYWNrKHVpbnQyNTYgcGFja0lkLHVpbnQyNTYgcHJpY2UsdWludDI1NiB0b2tlbjEsdWludDI1NiB0b2tlbjIsdWludDI1NiB0b2tlbjMsdWludDI1NiB0b2tlbjQsdWludDI1NiB0b2tlbjUsdWludDI1NiB0b2tlbjYsdWludDI1NiB0b2tlbjcsdWludDI1NiB0b2tlbjgsdWludDI1NiB0b2tlbjksdWludDI1NiB0b2tlbjEwKTsKCiAgICBmdW5jdGlvbiBidXlQYWNrKHVpbnQyNTYgcGFja0lkKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChib29sKSB7CiAgICAgIC8vbWFrZSBzdXJlIHBhY2sgaXMgZm9yIHNhbGUKICAgICAgcmVxdWlyZSggcGFja3NbcGFja0lkXS5wcmljZSA+IDAgKTsKICAgICAgLy9tYWtlIHN1cmUgdGhleSBzZW50IGluIGVub3VnaCB2YWx1ZQogICAgICByZXF1aXJlKCBtc2cudmFsdWUgPj0gcGFja3NbcGFja0lkXS5wcmljZSApOwogICAgICAvL3JpZ2h0IGF3YXkgc2V0IHByaWNlIHRvIDAgdG8gYXZvaWQgc29tZSBzb3J0IG9mIHJlZW50cmFuY2UKICAgICAgcGFja3NbcGFja0lkXS5wcmljZT0wOwogICAgICAvL2dpdmUgdG9rZW5zIHRvIG93bmVyCiAgICAgIGZvcih1aW50OCBpPTA7aTwxMDtpKyspewogICAgICAgIHRva2VuSW5kZXhUb093bmVyW3BhY2tzW3BhY2tJZF0udG9rZW5zW2ldXT1tc2cuc2VuZGVyOwogICAgICAgIF90cmFuc2ZlcigwLCBtc2cuc2VuZGVyLCBwYWNrc1twYWNrSWRdLnRva2Vuc1tpXSk7CiAgICAgIH0KICAgICAgLy9jbGVhciB0aGUgcHJpY2Ugc28gaXQgaXMgbm8gbG9uZ2VyIGZvciBzYWxlCiAgICAgIGRlbGV0ZSBwYWNrc1twYWNrSWRdOwogICAgICBCdXlQYWNrKG1zZy5zZW5kZXIscGFja0lkLG1zZy52YWx1ZSk7CiAgICB9CiAgICBldmVudCBCdXlQYWNrKGFkZHJlc3Mgc2VuZGVyLCB1aW50MjU2IHBhY2tJZCwgdWludDI1NiBwcmljZSk7CgogICAgLy9sZXRzIGtlZXAgYSBjb3VudCBvZiBob3cgbWFueSBvZiBhIHNwZWNpZmljIGltYWdlIGlzIGNyZWF0ZWQgdG9vCiAgICAvL3RoYXQgd2lsbCBhbGxvdyB1cyB0byBjYWxjdWxhdGUgcmFyaXR5IG9uLWNoYWluIGlmIHdlIHdhbnQKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludDI1NikgcHVibGljIHRva2Vuc09mSW1hZ2U7CgogICAgZnVuY3Rpb24gZ2V0VG9rZW4odWludDI1NiBfaWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIsYnl0ZXMzMiBpbWFnZSx1aW50MjU2IGNvcGllcykgewogICAgICBpbWFnZSA9IGl0ZW1zW19pZF0uaW1hZ2U7CiAgICAgIGNvcGllcyA9IHRva2Vuc09mSW1hZ2VbaW1hZ2VdOwogICAgICByZXR1cm4gKAogICAgICAgIHRva2VuSW5kZXhUb093bmVyW19pZF0sCiAgICAgICAgaW1hZ2UsCiAgICAgICAgY29waWVzCiAgICAgICk7CiAgICB9CgogICAgdWludDI1NiBub25jZSA9IDA7CgogICAgc3RydWN0IFN0YWNrewogICAgICAvL3RoaXMgd2lsbCBiZSBhbiBhcnJheSBvZiBpZHMgYnV0IGZvciBub3cganVzdCBkb2luZyBvbmUgZm9yIHNpbXBsaWNpdHkKICAgICAgdWludDI1Nls1XSBpZHM7CiAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgIHVpbnQzMiBibG9jazsKCiAgICB9CgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBTdGFjaykgcHVibGljIHN0YWNrczsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gYnl0ZXMzMikgcHVibGljIHN0YWNrQ291bnRlcjsKCiAgICBmdW5jdGlvbiBzdGFja093bmVyKGJ5dGVzMzIgX3N0YWNrKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyBvd25lcikgewogICAgICByZXR1cm4gc3RhY2tzW19zdGFja10ub3duZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0U3RhY2soYnl0ZXMzMiBfc3RhY2spIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIG93bmVyLHVpbnQzMiBibG9jayx1aW50MjU2IHRva2VuMSx1aW50MjU2IHRva2VuMix1aW50MjU2IHRva2VuMyx1aW50MjU2IHRva2VuNCx1aW50MjU2IHRva2VuNSkgewogICAgICByZXR1cm4gKHN0YWNrc1tfc3RhY2tdLm93bmVyLHN0YWNrc1tfc3RhY2tdLmJsb2NrLHN0YWNrc1tfc3RhY2tdLmlkc1swXSxzdGFja3NbX3N0YWNrXS5pZHNbMV0sc3RhY2tzW19zdGFja10uaWRzWzJdLHN0YWNrc1tfc3RhY2tdLmlkc1szXSxzdGFja3NbX3N0YWNrXS5pZHNbNF0pOwogICAgfQoKICAgIC8vdHggMTogb2YgYSBnYW1lLCBwbGF5ZXIgb25lIGFwcHJvdmVzIHRoZSBTbGFtbWVyVGltZSBjb250cmFjdCB0byB0YWtlIHRoZWlyIHRva2VucwogICAgLy90aGlzIHRyaWdnZXJzIGFuIGV2ZW50IHRvIGJyb2FkY2FzdCB0byBvdGhlciBwbGF5ZXJzIHRoYXQgdGhlcmUgaXMgYW4gb3BlbiBjaGFsbGVuZ2UKICAgIGZ1bmN0aW9uIHN1Ym1pdFN0YWNrKHVpbnQyNTYgX2lkLHVpbnQyNTYgX2lkMix1aW50MjU2IF9pZDMsdWludDI1NiBfaWQ0LHVpbnQyNTYgX2lkNSwgYm9vbCBfcHVibGljKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAvL21ha2Ugc3VyZSBzbGFtbWVyVGltZSB3YXMgc2V0IGF0IGRlcGxveQogICAgICByZXF1aXJlKHNsYW1tZXJUaW1lIT1hZGRyZXNzKDApKTsKICAgICAgLy90aGUgc2VuZGVyIG11c3Qgb3duIHRoZSB0b2tlbgogICAgICByZXF1aXJlKHRva2VuSW5kZXhUb093bmVyW19pZF09PW1zZy5zZW5kZXIpOwogICAgICByZXF1aXJlKHRva2VuSW5kZXhUb093bmVyW19pZDJdPT1tc2cuc2VuZGVyKTsKICAgICAgcmVxdWlyZSh0b2tlbkluZGV4VG9Pd25lcltfaWQzXT09bXNnLnNlbmRlcik7CiAgICAgIHJlcXVpcmUodG9rZW5JbmRleFRvT3duZXJbX2lkNF09PW1zZy5zZW5kZXIpOwogICAgICByZXF1aXJlKHRva2VuSW5kZXhUb093bmVyW19pZDVdPT1tc2cuc2VuZGVyKTsKICAgICAgLy90aGV5IGFwcHJvdmUgdGhlIHNsYW1tZXJ0aW1lIGNvbnRyYWN0IHRvIHRha2UgdGhlIHRva2VuIGF3YXkgZnJvbSB0aGVtCiAgICAgIHJlcXVpcmUoYXBwcm92ZShzbGFtbWVyVGltZSxfaWQpKTsKICAgICAgcmVxdWlyZShhcHByb3ZlKHNsYW1tZXJUaW1lLF9pZDIpKTsKICAgICAgcmVxdWlyZShhcHByb3ZlKHNsYW1tZXJUaW1lLF9pZDMpKTsKICAgICAgcmVxdWlyZShhcHByb3ZlKHNsYW1tZXJUaW1lLF9pZDQpKTsKICAgICAgcmVxdWlyZShhcHByb3ZlKHNsYW1tZXJUaW1lLF9pZDUpKTsKCiAgICAgIGJ5dGVzMzIgc3RhY2sgPSBrZWNjYWsyNTYobm9uY2UrKyxtc2cuc2VuZGVyKTsKICAgICAgdWludDI1Nls1XSBtZW1vcnkgaWRzID0gW19pZCxfaWQyLF9pZDMsX2lkNCxfaWQ1XTsKICAgICAgc3RhY2tzW3N0YWNrXSA9IFN0YWNrKGlkcyxtc2cuc2VuZGVyLHVpbnQzMihibG9jay5udW1iZXIpKTsKCiAgICAgIC8vdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCB0byB0aGUgZnJvbnRlbmQgdG8gZGlzcGxheSB0aGUgc3RhY2sKICAgICAgLy90aGUgZnJvbnRlbmQgd2lsbCBjaGVjayBpZiB0aGV5IHdhbnQgaXQgcHVibGljIG9yIG5vdAogICAgICBTdWJtaXRTdGFjayhtc2cuc2VuZGVyLG5vdyxzdGFjayxfaWQsX2lkMixfaWQzLF9pZDQsX2lkNSxfcHVibGljKTsKICAgIH0KICAgIGV2ZW50IFN1Ym1pdFN0YWNrKGFkZHJlc3MgaW5kZXhlZCBfc2VuZGVyLHVpbnQyNTYgaW5kZXhlZCB0aW1lc3RhbXAsYnl0ZXMzMiBpbmRleGVkIF9zdGFjayx1aW50MjU2IF90b2tlbjEsdWludDI1NiBfdG9rZW4yLHVpbnQyNTYgX3Rva2VuMyx1aW50MjU2IF90b2tlbjQsdWludDI1NiBfdG9rZW41LGJvb2wgX3B1YmxpYyk7CgogICAgLy90eCAyOiBvZiBhIGdhbWUsIHBsYXllciB0d28gYXBwcm92ZXMgdGhlIFNsYW1tZXJUaW1lIGNvbnRyYWN0IHRvIHRha2UgdGhlaXIgdG9rZW5zCiAgICAvL3RoaXMgdHJpZ2dlcnMgYW4gZXZlbnQgdG8gYnJvYWRjYXN0IHRvIHBsYXllciBvbmUgdGhhdCB0aGlzIHBsYXllciB3YW50cyB0byBydW1ibGUKICAgIGZ1bmN0aW9uIHN1Ym1pdENvdW50ZXJTdGFjayhieXRlczMyIF9zdGFjaywgdWludDI1NiBfaWQsIHVpbnQyNTYgX2lkMiwgdWludDI1NiBfaWQzLCB1aW50MjU2IF9pZDQsIHVpbnQyNTYgX2lkNSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgLy9tYWtlIHN1cmUgc2xhbW1lclRpbWUgd2FzIHNldCBhdCBkZXBsb3kKICAgICAgcmVxdWlyZShzbGFtbWVyVGltZSE9YWRkcmVzcygwKSk7CiAgICAgIC8vdGhlIHNlbmRlciBtdXN0IG93biB0aGUgdG9rZW4KICAgICAgcmVxdWlyZSh0b2tlbkluZGV4VG9Pd25lcltfaWRdPT1tc2cuc2VuZGVyKTsKICAgICAgcmVxdWlyZSh0b2tlbkluZGV4VG9Pd25lcltfaWQyXT09bXNnLnNlbmRlcik7CiAgICAgIHJlcXVpcmUodG9rZW5JbmRleFRvT3duZXJbX2lkM109PW1zZy5zZW5kZXIpOwogICAgICByZXF1aXJlKHRva2VuSW5kZXhUb093bmVyW19pZDRdPT1tc2cuc2VuZGVyKTsKICAgICAgcmVxdWlyZSh0b2tlbkluZGV4VG9Pd25lcltfaWQ1XT09bXNnLnNlbmRlcik7CiAgICAgIC8vdGhleSBhcHByb3ZlIHRoZSBzbGFtbWVydGltZSBjb250cmFjdCB0byB0YWtlIHRoZSB0b2tlbiBhd2F5IGZyb20gdGhlbQogICAgICByZXF1aXJlKGFwcHJvdmUoc2xhbW1lclRpbWUsX2lkKSk7CiAgICAgIHJlcXVpcmUoYXBwcm92ZShzbGFtbWVyVGltZSxfaWQyKSk7CiAgICAgIHJlcXVpcmUoYXBwcm92ZShzbGFtbWVyVGltZSxfaWQzKSk7CiAgICAgIHJlcXVpcmUoYXBwcm92ZShzbGFtbWVyVGltZSxfaWQ0KSk7CiAgICAgIHJlcXVpcmUoYXBwcm92ZShzbGFtbWVyVGltZSxfaWQ1KSk7CiAgICAgIC8vc3RvcCBwbGF5aW5nIHdpdGggeW91cnNlbGYKICAgICAgcmVxdWlyZShtc2cuc2VuZGVyIT1zdGFja3NbX3N0YWNrXS5vd25lcik7CgogICAgICBieXRlczMyIGNvdW50ZXJzdGFjayA9IGtlY2NhazI1Nihub25jZSsrLG1zZy5zZW5kZXIsX2lkKTsKICAgICAgdWludDI1Nls1XSBtZW1vcnkgaWRzID0gW19pZCxfaWQyLF9pZDMsX2lkNCxfaWQ1XTsKICAgICAgc3RhY2tzW2NvdW50ZXJzdGFja10gPSBTdGFjayhpZHMsbXNnLnNlbmRlcix1aW50MzIoYmxvY2subnVtYmVyKSk7CiAgICAgIHN0YWNrQ291bnRlcltjb3VudGVyc3RhY2tdID0gX3N0YWNrOwoKICAgICAgLy90aGUgZXZlbnQgaXMgdHJpZ2dlcmVkIHRvIHRoZSBmcm9udGVuZCB0byBkaXNwbGF5IHRoZSBzdGFjawogICAgICAvL3RoZSBmcm9udGVuZCB3aWxsIGNoZWNrIGlmIHRoZXkgd2FudCBpdCBwdWJsaWMgb3Igbm90CiAgICAgIENvdW50ZXJTdGFjayhtc2cuc2VuZGVyLG5vdyxfc3RhY2ssY291bnRlcnN0YWNrLF9pZCxfaWQyLF9pZDMsX2lkNCxfaWQ1KTsKICAgIH0KICAgIGV2ZW50IENvdW50ZXJTdGFjayhhZGRyZXNzIGluZGV4ZWQgX3NlbmRlcix1aW50MjU2IGluZGV4ZWQgdGltZXN0YW1wLGJ5dGVzMzIgaW5kZXhlZCBfc3RhY2ssIGJ5dGVzMzIgX2NvdW50ZXJTdGFjaywgdWludDI1NiBfdG9rZW4xLCB1aW50MjU2IF90b2tlbjIsIHVpbnQyNTYgX3Rva2VuMywgdWludDI1NiBfdG9rZW40LCB1aW50MjU2IF90b2tlbjUpOwoKICAgIC8vIGlmIHNvbWVvbmUgY3JlYXRlcyBhIHN0YWNrIHRoZXkgc2hvdWxkIGJlIGFibGUgdG8gY2xlYW4gaXQgdXAKICAgIC8vIGl0cyBub3QgcmVhbGx5IHRoYXQgYmlnIG9mIGEgZGVhbCBiZWNhdXNlIHdlIHdpbGwgaGF2ZSBhIHRpbWVvdXQKICAgIC8vIGluIHRoZSBmcm9udGVudCwgYnV0IHN0aWxsLi4uCiAgICBmdW5jdGlvbiBjYW5jZWxTdGFjayhieXRlczMyIF9zdGFjaykgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgLy9pdCBtdXN0IGJlIHlvdXIgc3RhY2sKICAgICAgcmVxdWlyZShtc2cuc2VuZGVyPT1zdGFja3NbX3N0YWNrXS5vd25lcik7CiAgICAgIC8vbWFrZSBzdXJlIHRoZXJlIGlzIG5vIG1vZGUgc2V0IHlldAogICAgICByZXF1aXJlKG1vZGVbX3N0YWNrXT09MCk7CiAgICAgIC8vbWFrZSBzdXJlIHRoZXkgYXJlbid0IHRyeWluZyB0byBjYW5jZWwgYSBjb3VudGVyc3RhY2sgdXNpbmcgdGhpcyBmdW5jdGlvbgogICAgICByZXF1aXJlKHN0YWNrQ291bnRlcltfc3RhY2tdPT0weDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKTsKCiAgICAgIGRlbGV0ZSBzdGFja3NbX3N0YWNrXTsKCiAgICAgIENhbmNlbFN0YWNrKG1zZy5zZW5kZXIsbm93LF9zdGFjayk7CiAgICB9CiAgICBldmVudCBDYW5jZWxTdGFjayhhZGRyZXNzIGluZGV4ZWQgX3NlbmRlcix1aW50MjU2IGluZGV4ZWQgdGltZXN0YW1wLGJ5dGVzMzIgaW5kZXhlZCBfc3RhY2spOwoKICAgIGZ1bmN0aW9uIGNhbmNlbENvdW50ZXJTdGFjayhieXRlczMyIF9zdGFjayxieXRlczMyIF9jb3VudGVyc3RhY2spIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgIC8vaXQgbXVzdCBiZSB5b3VyIHN0YWNrCiAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09c3RhY2tzW19jb3VudGVyc3RhY2tdLm93bmVyKTsKICAgICAgLy90aGUgY291bnRlciBtdXN0IGJlIGEgY291bnRlciBvZiBzdGFjayAxCiAgICAgIHJlcXVpcmUoc3RhY2tDb3VudGVyW19jb3VudGVyc3RhY2tdPT1fc3RhY2spOwogICAgICAvL21ha2Ugc3VyZSB0aGVyZSBpcyBubyBtb2RlIHNldCB5ZXQKICAgICAgcmVxdWlyZShtb2RlW19zdGFja109PTApOwoKICAgICAgZGVsZXRlIHN0YWNrc1tfY291bnRlcnN0YWNrXTsKICAgICAgZGVsZXRlIHN0YWNrQ291bnRlcltfY291bnRlcnN0YWNrXTsKCiAgICAgIENhbmNlbENvdW50ZXJTdGFjayhtc2cuc2VuZGVyLG5vdyxfc3RhY2ssX2NvdW50ZXJzdGFjayk7CiAgICB9CiAgICBldmVudCBDYW5jZWxDb3VudGVyU3RhY2soYWRkcmVzcyBpbmRleGVkIF9zZW5kZXIsdWludDI1NiBpbmRleGVkIHRpbWVzdGFtcCxieXRlczMyIGluZGV4ZWQgX3N0YWNrLGJ5dGVzMzIgX2NvdW50ZXJzdGFjayk7CgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBieXRlczMyKSBwdWJsaWMgY291bnRlck9mU3RhY2s7CiAgICBtYXBwaW5nIChieXRlczMyID0+IHVpbnQ4KSBwdWJsaWMgbW9kZTsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludDgpIHB1YmxpYyByb3VuZDsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludDMyKSBwdWJsaWMgbGFzdEJsb2NrOwogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiB1aW50MzIpIHB1YmxpYyBjb21taXRCbG9jazsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gYWRkcmVzcykgcHVibGljIGxhc3RBY3RvcjsKICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludDI1NlsxMF0pIHB1YmxpYyBtaXhlZFN0YWNrOwoKICAgIC8vdHggMzogb2YgYSBnYW1lLCBwbGF5ZXIgb25lIGFwcHJvdmVzIGNvdW50ZXIgc3RhY2sgYW5kIHRyYW5zZmVycyBldmVyeXRoaW5nIGluCiAgICBmdW5jdGlvbiBhY2NlcHRDb3VudGVyU3RhY2soYnl0ZXMzMiBfc3RhY2ssIGJ5dGVzMzIgX2NvdW50ZXJTdGFjaykgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgLy9zZW5kZXIgbXVzdCBiZSBvd25lciBvZiBzdGFjayAxCiAgICAgIHJlcXVpcmUobXNnLnNlbmRlcj09c3RhY2tzW19zdGFja10ub3duZXIpOwogICAgICAvL3RoZSBjb3VudGVyIG11c3QgYmUgYSBjb3VudGVyIG9mIHN0YWNrIDEKICAgICAgcmVxdWlyZShzdGFja0NvdW50ZXJbX2NvdW50ZXJTdGFja109PV9zdGFjayk7CiAgICAgIC8vbWFrZSBzdXJlIHRoZXJlIGlzIG5vIG1vZGUgc2V0IHlldAogICAgICByZXF1aXJlKG1vZGVbX3N0YWNrXT09MCk7CgogICAgICAvL2RvIHRoZSB0cmFuc2ZlcgogICAgICBTbGFtbWVyVGltZSBzbGFtbWVyVGltZUNvbnRyYWN0ID0gU2xhbW1lclRpbWUoc2xhbW1lclRpbWUpOwogICAgICByZXF1aXJlKCBzbGFtbWVyVGltZUNvbnRyYWN0LnN0YXJ0U2xhbW1lclRpbWUobXNnLnNlbmRlcixzdGFja3NbX3N0YWNrXS5pZHMsc3RhY2tzW19jb3VudGVyU3RhY2tdLm93bmVyLHN0YWNrc1tfY291bnRlclN0YWNrXS5pZHMpICk7CgogICAgICAvL3NhdmUgdGhlIGJsb2NrIGZvciBhIHRpbWVvdXQKICAgICAgbGFzdEJsb2NrW19zdGFja109dWludDMyKGJsb2NrLm51bWJlcik7CiAgICAgIGxhc3RBY3Rvcltfc3RhY2tdPXN0YWNrc1tfY291bnRlclN0YWNrXS5vd25lcjsKICAgICAgbW9kZVtfc3RhY2tdPTE7CiAgICAgIGNvdW50ZXJPZlN0YWNrW19zdGFja109X2NvdW50ZXJTdGFjazsKCiAgICAgIC8vLy8gTE9MIEAKICAgICAgbWl4ZWRTdGFja1tfc3RhY2tdWzBdID0gc3RhY2tzW19zdGFja10uaWRzWzBdOwogICAgICBtaXhlZFN0YWNrW19zdGFja11bMV0gPSBzdGFja3NbX2NvdW50ZXJTdGFja10uaWRzWzBdOwogICAgICBtaXhlZFN0YWNrW19zdGFja11bMl0gPSBzdGFja3NbX3N0YWNrXS5pZHNbMV07CiAgICAgIG1peGVkU3RhY2tbX3N0YWNrXVszXSA9IHN0YWNrc1tfY291bnRlclN0YWNrXS5pZHNbMV07CiAgICAgIG1peGVkU3RhY2tbX3N0YWNrXVs0XSA9IHN0YWNrc1tfc3RhY2tdLmlkc1syXTsKICAgICAgbWl4ZWRTdGFja1tfc3RhY2tdWzVdID0gc3RhY2tzW19jb3VudGVyU3RhY2tdLmlkc1syXTsKICAgICAgbWl4ZWRTdGFja1tfc3RhY2tdWzZdID0gc3RhY2tzW19zdGFja10uaWRzWzNdOwogICAgICBtaXhlZFN0YWNrW19zdGFja11bN10gPSBzdGFja3NbX2NvdW50ZXJTdGFja10uaWRzWzNdOwogICAgICBtaXhlZFN0YWNrW19zdGFja11bOF0gPSBzdGFja3NbX3N0YWNrXS5pZHNbNF07CiAgICAgIG1peGVkU3RhY2tbX3N0YWNrXVs5XSA9IHN0YWNrc1tfY291bnRlclN0YWNrXS5pZHNbNF07CgogICAgICAvL2xldCB0aGUgZnJvbnQgZW5kIGtub3cgdGhhdCB0aGUgdHJhbnNmZXIgaXMgZ29vZCBhbmQgd2UgYXJlIHJlYWR5IGZvciB0aGUgY29pbiBmbGlwCiAgICAgIEFjY2VwdENvdW50ZXJTdGFjayhtc2cuc2VuZGVyLF9zdGFjayxfY291bnRlclN0YWNrKTsKICAgIH0KICAgIGV2ZW50IEFjY2VwdENvdW50ZXJTdGFjayhhZGRyZXNzIGluZGV4ZWQgX3NlbmRlcixieXRlczMyIGluZGV4ZWQgX3N0YWNrLCBieXRlczMyIGluZGV4ZWQgX2NvdW50ZXJTdGFjayk7CgogICAgbWFwcGluZyAoYnl0ZXMzMiA9PiBieXRlczMyKSBwdWJsaWMgY29tbWl0OwoKICAgIGZ1bmN0aW9uIGdldE1peGVkU3RhY2soYnl0ZXMzMiBfc3RhY2spIGV4dGVybmFsIHZpZXcgcmV0dXJucyh1aW50MjU2LHVpbnQyNTYsdWludDI1Nix1aW50MjU2LHVpbnQyNTYsdWludDI1Nix1aW50MjU2LHVpbnQyNTYsdWludDI1Nix1aW50MjU2KXsKICAgICAgdWludDI1NlsxMF0gdGhpc1N0YWNrID0gbWl4ZWRTdGFja1tfc3RhY2tdOwogICAgICByZXR1cm4gKHRoaXNTdGFja1swXSx0aGlzU3RhY2tbMV0sdGhpc1N0YWNrWzJdLHRoaXNTdGFja1szXSx0aGlzU3RhY2tbNF0sdGhpc1N0YWNrWzVdLHRoaXNTdGFja1s2XSx0aGlzU3RhY2tbN10sdGhpc1N0YWNrWzhdLHRoaXNTdGFja1s5XSk7CiAgICB9CgogICAgLy90eCA0OiBwbGF5ZXIgb25lIGNvbW1pdHMgYW5kIGZsaXBzIGNvaW4gdXAKICAgIC8vYXQgdGhpcyBwb2ludCwgdGhlIHRpbWVvdXQgZ29lcyBpbnRvIGVmZmVjdCBhbmQgaWYgYW55IHRyYW5zYWN0aW9uIGluY2x1ZGluZwogICAgLy90aGUgY29pbiBmbGlwIGRvbid0IGNvbWUgYmFjayBpbiB0aW1lLCB3ZSBuZWVkIHRvIGFsbG93IHRoZSBvdGhlciBwYXJ0eQogICAgLy90byB3aXRoZHJhdyBhbGwgdG9rZW5zLi4uIHRoaXMga2VlcHMgZWl0aGVyIHBsYXllciBmcm9tIHJlZnVzaW5nIHRvCiAgICAvL3JldmVhbCB0aGVpciBjb21taXQuIChldmVyeSB0eCBmcm9tIGhlcmUgb24gb3V0IG5lZWRzIHRvIHVwZGF0ZSB0aGUgbGFzdEJsb2NrIGFuZCBsYXN0QWN0b3IpCiAgICAvL2FuZCBpbiB0aGUgd2l0aGRyYXcgZnVuY3Rpb24geW91IGNoZWNrIGN1cnJlbnRibG9jay1sYXN0QmxvY2sgPiB0aW1lb3V0ID0gcmVmdW5kIHRvIGxhc3RBY3RvcgogICAgLy9hbmQgYnkgcmVmdW5kIEkgbWVhbiBsZXQgdGhlbSB3aXRoZHJhdyBpZiB0aGV5IHdhbnQKICAgIC8vd2UgY291bGQgZXZlbiBoYXZlIGEgbGl0dGxlIHRpbWVyIG9uIHRoZSBmcm9udCBlbmQgdGhhdCB0ZWxscyB5b3UgaG93IGxvbmcgeW91ciBvcHBvbm5ldCBoYXMKICAgIC8vYmVmb3JlIHRoZXkgd2lsbCBmb3JmZXQKICAgIGZ1bmN0aW9uIHN0YXJ0Q29pbkZsaXAoYnl0ZXMzMiBfc3RhY2ssIGJ5dGVzMzIgX2NvdW50ZXJTdGFjaywgYnl0ZXMzMiBfY29tbWl0KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBvd25lciBvZiB0aGUgZmlyc3Qgc3RhY2sgKHBsYXllciBvbmUpIGRvaW5nIHRoZSBmbGlwCiAgICAgIHJlcXVpcmUoc3RhY2tzW19zdGFja10ub3duZXI9PW1zZy5zZW5kZXIpOwogICAgICAvL3RoZSBjb3VudGVyIG11c3QgYmUgYSBjb3VudGVyIG9mIHN0YWNrIDEKICAgICAgcmVxdWlyZShzdGFja0NvdW50ZXJbX2NvdW50ZXJTdGFja109PV9zdGFjayk7CiAgICAgIHJlcXVpcmUoY291bnRlck9mU3RhY2tbX3N0YWNrXT09X2NvdW50ZXJTdGFjayk7CiAgICAgIC8vbWFrZSBzdXJlIHRoYXQgd2UgYXJlIGluIG1vZGUgMQogICAgICByZXF1aXJlKG1vZGVbX3N0YWNrXT09MSk7CiAgICAgIC8vc3RvcmUgdGhlIGNvbW1pdCBmb3IgdGhlIG5leHQgdHgKICAgICAgY29tbWl0W19zdGFja109X2NvbW1pdDsKICAgICAgY29tbWl0QmxvY2tbX3N0YWNrXT11aW50MzIoYmxvY2subnVtYmVyKTsKICAgICAgLy9pbmMgdGhlIG1vZGUgdG8gMgogICAgICBtb2RlW19zdGFja109MjsKICAgICAgU3RhcnRDb2luRmxpcChfc3RhY2ssX2NvbW1pdCk7CiAgICB9CiAgICBldmVudCBTdGFydENvaW5GbGlwKGJ5dGVzMzIgc3RhY2ssIGJ5dGVzMzIgY29tbWl0KTsKCiAgICAvL3R4NTogcGxheWVyIG9uZSBlbmRzIGNvaW4gZmxpcCB3aXRoIHJldmVhbAogICAgZnVuY3Rpb24gZW5kQ29pbkZsaXAoYnl0ZXMzMiBfc3RhY2ssIGJ5dGVzMzIgX2NvdW50ZXJTdGFjaywgYnl0ZXMzMiBfcmV2ZWFsKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBvd25lciBvZiB0aGUgZmlyc3Qgc3RhY2sgKHBsYXllciBvbmUpIGRvaW5nIHRoZSBmbGlwCiAgICAgIHJlcXVpcmUoc3RhY2tzW19zdGFja10ub3duZXI9PW1zZy5zZW5kZXIpOwogICAgICAvL3RoZSBjb3VudGVyIG11c3QgYmUgYSBjb3VudGVyIG9mIHN0YWNrIDEKICAgICAgcmVxdWlyZShzdGFja0NvdW50ZXJbX2NvdW50ZXJTdGFja109PV9zdGFjayk7CiAgICAgIHJlcXVpcmUoY291bnRlck9mU3RhY2tbX3N0YWNrXT09X2NvdW50ZXJTdGFjayk7CiAgICAgIC8vbWFrZSBzdXJlIHRoYXQgd2UgYXJlIGluIG1vZGUgMgogICAgICByZXF1aXJlKG1vZGVbX3N0YWNrXT09Mik7CgogICAgICAvL21ha2Ugc3VyZSBoYXNoIG9mIHJldmVhbCA9PSBjb21taXQKICAgICAgaWYoa2VjY2FrMjU2KF9yZXZlYWwpIT1jb21taXRbX3N0YWNrXSl7CiAgICAgICAgLy9jb21taXQvcmV2ZWFsIGZhaWxlZC4uIHRoaXMgY2FuIGhhcHBlbiBpZiB0aGV5CiAgICAgICAgLy9yZWxvYWQsIHNvIGRvbid0IHB1bmlzaCwganVzdCBnbyBiYWNrIHRvIHRoZQogICAgICAgIC8vc3RhcnQgb2YgdGhlIGNvaW4gZmxpcCBzdGFnZQogICAgICAgIG1vZGVbX3N0YWNrXT0xOwogICAgICAgIENvaW5GbGlwRmFpbChfc3RhY2spOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfWVsc2V7CiAgICAgICAgLy9zdWNjZXNzZnVsIGNvaW4gZmxpcCwgcmVhZHkgdG8gZ2V0IHJhbmRvbQogICAgICAgIG1vZGVbX3N0YWNrXT0zOwogICAgICAgIHJvdW5kW19zdGFja109MTsKICAgICAgICBieXRlczMyIHBzZXVkb1JhbmRvbUhhc2ggPSBrZWNjYWsyNTYoX3JldmVhbCxibG9jay5ibG9ja2hhc2goY29tbWl0QmxvY2tbX3N0YWNrXSkpOwogICAgICAgIGlmKHVpbnQyNTYocHNldWRvUmFuZG9tSGFzaCklMj09MCl7CiAgICAgICAgICAvL3BsYXllcjEgZ29lcyBmaXJzdAogICAgICAgICAgbGFzdEJsb2NrW19zdGFja109dWludDMyKGJsb2NrLm51bWJlcik7CiAgICAgICAgICBsYXN0QWN0b3JbX3N0YWNrXT1zdGFja3NbX2NvdW50ZXJTdGFja10ub3duZXI7CiAgICAgICAgICBDb2luRmxpcFN1Y2Nlc3MoX3N0YWNrLHN0YWNrc1tfc3RhY2tdLm93bmVyLHRydWUpOwogICAgICAgIH1lbHNlewogICAgICAgICAgLy9wbGF5ZXIyIGdvZXMgZmlyc3QKICAgICAgICAgIGxhc3RCbG9ja1tfc3RhY2tdPXVpbnQzMihibG9jay5udW1iZXIpOwogICAgICAgICAgbGFzdEFjdG9yW19zdGFja109c3RhY2tzW19zdGFja10ub3duZXI7CiAgICAgICAgICBDb2luRmxpcFN1Y2Nlc3MoX3N0YWNrLHN0YWNrc1tfY291bnRlclN0YWNrXS5vd25lcixmYWxzZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgfQogICAgZXZlbnQgQ29pbkZsaXBTdWNjZXNzKGJ5dGVzMzIgaW5kZXhlZCBzdGFjayxhZGRyZXNzIHdob3NUdXJuLGJvb2wgaGVhZHMpOwogICAgZXZlbnQgQ29pbkZsaXBGYWlsKGJ5dGVzMzIgc3RhY2spOwoKCiAgICAvL3R4NiBuZXh0IHBsYXllciByYWlzZXMgc2xhbW1lcgogICAgZnVuY3Rpb24gcmFpc2VTbGFtbWVyKGJ5dGVzMzIgX3N0YWNrLCBieXRlczMyIF9jb3VudGVyU3RhY2ssIGJ5dGVzMzIgX2NvbW1pdCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgaWYobGFzdEFjdG9yW19zdGFja109PXN0YWNrc1tfc3RhY2tdLm93bmVyKXsKICAgICAgICAvL2l0IGlzIHBsYXllcjIncyB0dXJuCiAgICAgICAgcmVxdWlyZShzdGFja3NbX2NvdW50ZXJTdGFja10ub3duZXI9PW1zZy5zZW5kZXIpOwogICAgICB9ZWxzZXsKICAgICAgICAvL2l0IGlzIHBsYXllcjEncyB0dXJuCiAgICAgICAgcmVxdWlyZShzdGFja3NbX3N0YWNrXS5vd25lcj09bXNnLnNlbmRlcik7CiAgICAgIH0KICAgICAgLy90aGUgY291bnRlciBtdXN0IGJlIGEgY291bnRlciBvZiBzdGFjayAxCiAgICAgIHJlcXVpcmUoc3RhY2tDb3VudGVyW19jb3VudGVyU3RhY2tdPT1fc3RhY2spOwogICAgICByZXF1aXJlKGNvdW50ZXJPZlN0YWNrW19zdGFja109PV9jb3VudGVyU3RhY2spOwogICAgICAvL21ha2Ugc3VyZSB0aGF0IHdlIGFyZSBpbiBtb2RlIDMKICAgICAgcmVxdWlyZShtb2RlW19zdGFja109PTMpOwogICAgICAvL3N0b3JlIHRoZSBjb21taXQgZm9yIHRoZSBuZXh0IHR4CiAgICAgIGNvbW1pdFtfc3RhY2tdPV9jb21taXQ7CiAgICAgIGNvbW1pdEJsb2NrW19zdGFja109dWludDMyKGJsb2NrLm51bWJlcik7CiAgICAgIC8vaW5jIHRoZSBtb2RlIHRvIDIKICAgICAgbW9kZVtfc3RhY2tdPTQ7CiAgICAgIFJhaXNlU2xhbW1lcihfc3RhY2ssX2NvbW1pdCk7CiAgICB9CiAgICBldmVudCBSYWlzZVNsYW1tZXIoYnl0ZXMzMiBzdGFjaywgYnl0ZXMzMiBjb21taXQpOwoKCiAgICAvL3R4NyBwbGF5ZXIgdGhyb3dzIHNsYW1tZXIKICAgIGZ1bmN0aW9uIHRocm93U2xhbW1lcihieXRlczMyIF9zdGFjaywgYnl0ZXMzMiBfY291bnRlclN0YWNrLCBieXRlczMyIF9yZXZlYWwpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgIGlmKGxhc3RBY3Rvcltfc3RhY2tdPT1zdGFja3NbX3N0YWNrXS5vd25lcil7CiAgICAgICAgLy9pdCBpcyBwbGF5ZXIyJ3MgdHVybgogICAgICAgIHJlcXVpcmUoc3RhY2tzW19jb3VudGVyU3RhY2tdLm93bmVyPT1tc2cuc2VuZGVyKTsKICAgICAgfWVsc2V7CiAgICAgICAgLy9pdCBpcyBwbGF5ZXIxJ3MgdHVybgogICAgICAgIHJlcXVpcmUoc3RhY2tzW19zdGFja10ub3duZXI9PW1zZy5zZW5kZXIpOwogICAgICB9CiAgICAgIC8vdGhlIGNvdW50ZXIgbXVzdCBiZSBhIGNvdW50ZXIgb2Ygc3RhY2sgMQogICAgICByZXF1aXJlKHN0YWNrQ291bnRlcltfY291bnRlclN0YWNrXT09X3N0YWNrKTsKICAgICAgcmVxdWlyZShjb3VudGVyT2ZTdGFja1tfc3RhY2tdPT1fY291bnRlclN0YWNrKTsKICAgICAgLy9tYWtlIHN1cmUgdGhhdCB3ZSBhcmUgaW4gbW9kZSA0CiAgICAgIHJlcXVpcmUobW9kZVtfc3RhY2tdPT00KTsKCiAgICAgIHVpbnQyNTZbMTBdIG1lbW9yeSBmbGlwcGVkOwogICAgICBpZihrZWNjYWsyNTYoX3JldmVhbCkhPWNvbW1pdFtfc3RhY2tdKXsKICAgICAgICAvL2NvbW1pdC9yZXZlYWwgZmFpbGVkLi4gdGhpcyBjYW4gaGFwcGVuIGlmIHRoZXkKICAgICAgICAvL3JlbG9hZCwgc28gZG9uJ3QgcHVuaXNoLCBqdXN0IGdvIGJhY2sgdG8gdGhlCiAgICAgICAgLy9zdGFydCBvZiB0aGUgc2xhbW1lciByYWlzZQogICAgICAgIG1vZGVbX3N0YWNrXT0zOwogICAgICAgIHRocm93U2xhbW1lckV2ZW50KF9zdGFjayxtc2cuc2VuZGVyLGFkZHJlc3MoMCksZmxpcHBlZCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9ZWxzZXsKICAgICAgICAvL3N1Y2Nlc3NmdWwgc2xhbSEhISEhISEhISEhISBBdCB0aGlzIHBvaW50IEkgaGF2ZSBvZmZpY2lhbGx5IGJlZW4gYXdha2UgZm9yIDI0IGhvdXJzICEhISEhISEhISEKICAgICAgICBtb2RlW19zdGFja109MzsKCiAgICAgICAgYWRkcmVzcyBwcmV2aW91c0xhc3RBY3RvciA9IGxhc3RBY3Rvcltfc3RhY2tdOwoKICAgICAgICBieXRlczMyIHBzZXVkb1JhbmRvbUhhc2ggPSBrZWNjYWsyNTYoX3JldmVhbCxibG9jay5ibG9ja2hhc2goY29tbWl0QmxvY2tbX3N0YWNrXSkpOwogICAgICAgIC8vRGVidWcoX3JldmVhbCxibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpLHBzZXVkb1JhbmRvbUhhc2gpOwogICAgICAgIGlmKGxhc3RBY3Rvcltfc3RhY2tdPT1zdGFja3NbX3N0YWNrXS5vd25lcil7CiAgICAgICAgICAvL3BsYXllcjEgZ29lcyBuZXh0CiAgICAgICAgICBsYXN0QmxvY2tbX3N0YWNrXT11aW50MzIoYmxvY2subnVtYmVyKTsKICAgICAgICAgIGxhc3RBY3Rvcltfc3RhY2tdPXN0YWNrc1tfY291bnRlclN0YWNrXS5vd25lcjsKICAgICAgICB9ZWxzZXsKICAgICAgICAgIC8vcGxheWVyMiBnb2VzIG5leHQKICAgICAgICAgIGxhc3RCbG9ja1tfc3RhY2tdPXVpbnQzMihibG9jay5udW1iZXIpOwogICAgICAgICAgbGFzdEFjdG9yW19zdGFja109c3RhY2tzW19zdGFja10ub3duZXI7CiAgICAgICAgfQoKICAgICAgICAvL2xvb2sgdGhyb3VnaCB0aGUgc3RhY2sgb2YgcmVtYWluaW5nIHBvZ3MgYW5kIGNvbXBhcmUgdG8gYnl0ZSB0byBzZWUgaWYgbGVzcyB0aGFuIEZMSVBQSU5FU1MgYW5kIHRyYW5zZmVyIGJhY2sgdG8gY29ycmVjdCBvd25lcgogICAgICAgIC8vIG9oIG1hbiwgdGhhdCBzbWVsbHMgbGlrZSByZWVudHJhbmNlIC0tICBJIHRoaW5rIHRoZSBtb2RlIHdvdWxkIGFjdHVhbGx5IGJyZWFrIHRoYXQgcmlnaHQ/CiAgICAgICAgYm9vbCBkb25lPXRydWU7CiAgICAgICAgdWludDggcmFuZEluZGV4ID0gMDsKICAgICAgICBmb3IodWludDggaT0wO2k8MTA7aSsrKXsKICAgICAgICAgIGlmKG1peGVkU3RhY2tbX3N0YWNrXVtpXT4wKXsKICAgICAgICAgICAgLy90aGVyZSBpcyBzdGlsbCBhIHBvZyBoZXJlLCBjaGVjayBmb3IgZmxpcAogICAgICAgICAgICB1aW50OCB0aGlzRmxpcHBlciA9IHVpbnQ4KHBzZXVkb1JhbmRvbUhhc2hbcmFuZEluZGV4KytdKTsKICAgICAgICAgICAgLy9EZWJ1Z0ZsaXAocHNldWRvUmFuZG9tSGFzaCxpLHJhbmRJbmRleCx0aGlzRmxpcHBlcixGTElQUElORVNTKTsKICAgICAgICAgICAgaWYodGhpc0ZsaXBwZXI8KEZMSVBQSU5FU1Mrcm91bmRbX3N0YWNrXSpGTElQUElORVNTUk9VTkRCT05VUykpewogICAgICAgICAgICAgIC8vSVRTIEEgRkxJUCEKICAgICAgICAgICAgICAgdWludDI1NiB0ZW1wSWQgPSBtaXhlZFN0YWNrW19zdGFja11baV07CiAgICAgICAgICAgICAgIGZsaXBwZWRbaV09dGVtcElkOwogICAgICAgICAgICAgICBtaXhlZFN0YWNrW19zdGFja11baV09MDsKICAgICAgICAgICAgICAgU2xhbW1lclRpbWUgc2xhbW1lclRpbWVDb250cmFjdCA9IFNsYW1tZXJUaW1lKHNsYW1tZXJUaW1lKTsKICAgICAgICAgICAgICAgLy9yZXF1aXJlKCBzbGFtbWVyVGltZUNvbnRyYWN0LnRyYW5zZmVyQmFjayhtc2cuc2VuZGVyLHRlbXBJZCkgKTsKICAgICAgICAgICAgICAgc2xhbW1lclRpbWVDb250cmFjdC50cmFuc2ZlckJhY2sobXNnLnNlbmRlcix0ZW1wSWQpOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICBkb25lPWZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aHJvd1NsYW1tZXJFdmVudChfc3RhY2ssbXNnLnNlbmRlcixwcmV2aW91c0xhc3RBY3RvcixmbGlwcGVkKTsKCiAgICAgICAgaWYoZG9uZSl7CiAgICAgICAgICBGaW5pc2hHYW1lKF9zdGFjayk7CiAgICAgICAgICBtb2RlW19zdGFja109OTsKICAgICAgICAgIGRlbGV0ZSBtaXhlZFN0YWNrW19zdGFja107CiAgICAgICAgICBkZWxldGUgc3RhY2tzW19zdGFja107CiAgICAgICAgICBkZWxldGUgc3RhY2tDb3VudGVyW19jb3VudGVyU3RhY2tdOwogICAgICAgICAgZGVsZXRlIHN0YWNrc1tfY291bnRlclN0YWNrXTsKICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tbX3N0YWNrXTsKICAgICAgICAgIGRlbGV0ZSBsYXN0QWN0b3JbX3N0YWNrXTsKICAgICAgICAgIGRlbGV0ZSBjb3VudGVyT2ZTdGFja1tfc3RhY2tdOwogICAgICAgICAgZGVsZXRlIHJvdW5kW19zdGFja107CiAgICAgICAgICBkZWxldGUgY29tbWl0QmxvY2tbX3N0YWNrXTsKICAgICAgICAgIGRlbGV0ZSBjb21taXRbX3N0YWNrXTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgIHJvdW5kW19zdGFja10rKzsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgICBldmVudCBUaHJvd1NsYW1tZXIoYnl0ZXMzMiBpbmRleGVkIHN0YWNrLCBhZGRyZXNzIGluZGV4ZWQgd2hvRG9uZUl0LCBhZGRyZXNzIGluZGV4ZWQgb3RoZXJQbGF5ZXIsIHVpbnQyNTYgdG9rZW4xRmxpcHBlZCwgdWludDI1NiB0b2tlbjJGbGlwcGVkLCB1aW50MjU2IHRva2VuM0ZsaXBwZWQsIHVpbnQyNTYgdG9rZW40RmxpcHBlZCwgdWludDI1NiB0b2tlbjVGbGlwcGVkLCB1aW50MjU2IHRva2VuNkZsaXBwZWQsIHVpbnQyNTYgdG9rZW43RmxpcHBlZCwgdWludDI1NiB0b2tlbjhGbGlwcGVkLCB1aW50MjU2IHRva2VuOUZsaXBwZWQsIHVpbnQyNTYgdG9rZW4xMEZsaXBwZWQpOwogICAgZXZlbnQgRmluaXNoR2FtZShieXRlczMyIHN0YWNrKTsKCiAgICBmdW5jdGlvbiB0aHJvd1NsYW1tZXJFdmVudChieXRlczMyIHN0YWNrLGFkZHJlc3Mgd2hvRG9uZUl0LGFkZHJlc3Mgb3RoZXJBY2NvdW50LCB1aW50MjU2WzEwXSBmbGlwQXJyYXkpIGludGVybmFsIHsKICAgICAgVGhyb3dTbGFtbWVyKHN0YWNrLHdob0RvbmVJdCxvdGhlckFjY291bnQsZmxpcEFycmF5WzBdLGZsaXBBcnJheVsxXSxmbGlwQXJyYXlbMl0sZmxpcEFycmF5WzNdLGZsaXBBcnJheVs0XSxmbGlwQXJyYXlbNV0sZmxpcEFycmF5WzZdLGZsaXBBcnJheVs3XSxmbGlwQXJyYXlbOF0sZmxpcEFycmF5WzldKTsKICAgIH0KCgogICAgZnVuY3Rpb24gZHJhaW5TdGFjayhieXRlczMyIF9zdGFjaywgYnl0ZXMzMiBfY291bnRlclN0YWNrKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAvL3RoaXMgZnVuY3Rpb24gaXMgZm9yIHRoZSBjYXNlIG9mIGEgdGltZW91dCBpbiB0aGUgY29tbWl0IC8gcmV2ZWFsCiAgICAgIC8vIGlmIGEgcGxheWVyIHJlYWxpemVzIHRoZXkgYXJlIGdvaW5nIHRvIGxvc2UsIHRoZXkgY2FuIHJlZnVzZSB0byByZXZlYWwKICAgICAgLy8gdGhlcmVmb3JlIHdlIG11c3QgaGF2ZSBhIHRpbWVvdXQgb2YgVElNRU9VVEJMT0NLUyBhbmQgaWYgdGhhdCB0aW1lIGlzIHJlYWNoZWQKICAgICAgLy8gdGhlIG90aGVyIHBsYXllciBjYW4gZ2V0IGluIGFuZCBkcmFpbiB0aGUgcmVtYWluaW5nIHRva2VucyBmcm9tIHRoZSBnYW1lCiAgICAgIHJlcXVpcmUoIHN0YWNrc1tfc3RhY2tdLm93bmVyPT1tc2cuc2VuZGVyIHx8IHN0YWNrc1tfY291bnRlclN0YWNrXS5vd25lcj09bXNnLnNlbmRlciApOwogICAgICAvL3RoZSBjb3VudGVyIG11c3QgYmUgYSBjb3VudGVyIG9mIHN0YWNrIDEKICAgICAgcmVxdWlyZSggc3RhY2tDb3VudGVyW19jb3VudGVyU3RhY2tdPT1fc3RhY2sgKTsKICAgICAgcmVxdWlyZSggY291bnRlck9mU3RhY2tbX3N0YWNrXT09X2NvdW50ZXJTdGFjayApOwogICAgICAvL3RoZSBiYWQgZ3V5IHNob3VsZG4ndCBiZSBhYmxlIHRvIGRyYWluCiAgICAgIHJlcXVpcmUoIGxhc3RBY3Rvcltfc3RhY2tdPT1tc2cuc2VuZGVyICk7CiAgICAgIC8vbXVzdCBiZSBhZnRlciB0aW1lb3V0IHBlcmlvZAogICAgICByZXF1aXJlKCBibG9jay5udW1iZXIgLSBsYXN0QmxvY2tbX3N0YWNrXSA+PSBUSU1FT1VUQkxPQ0tTKTsKICAgICAgLy9nYW1lIG11c3Qgc3RpbGwgYmUgZ29pbmcKICAgICAgcmVxdWlyZSggbW9kZVtfc3RhY2tdPDkgKTsKCiAgICAgIGZvcih1aW50OCBpPTA7aTwxMDtpKyspewogICAgICAgIGlmKG1peGVkU3RhY2tbX3N0YWNrXVtpXT4wKXsKICAgICAgICAgIHVpbnQyNTYgdGVtcElkID0gbWl4ZWRTdGFja1tfc3RhY2tdW2ldOwogICAgICAgICAgbWl4ZWRTdGFja1tfc3RhY2tdW2ldPTA7CiAgICAgICAgICBTbGFtbWVyVGltZSBzbGFtbWVyVGltZUNvbnRyYWN0ID0gU2xhbW1lclRpbWUoc2xhbW1lclRpbWUpOwogICAgICAgICAgc2xhbW1lclRpbWVDb250cmFjdC50cmFuc2ZlckJhY2sobXNnLnNlbmRlcix0ZW1wSWQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgRmluaXNoR2FtZShfc3RhY2spOwogICAgICBtb2RlW19zdGFja109OTsKCiAgICAgIGRlbGV0ZSBtaXhlZFN0YWNrW19zdGFja107CiAgICAgIGRlbGV0ZSBzdGFja3NbX3N0YWNrXTsKICAgICAgZGVsZXRlIHN0YWNrQ291bnRlcltfY291bnRlclN0YWNrXTsKICAgICAgZGVsZXRlIHN0YWNrc1tfY291bnRlclN0YWNrXTsKICAgICAgZGVsZXRlIGxhc3RCbG9ja1tfc3RhY2tdOwogICAgICBkZWxldGUgbGFzdEFjdG9yW19zdGFja107CiAgICAgIGRlbGV0ZSBjb3VudGVyT2ZTdGFja1tfc3RhY2tdOwogICAgICBkZWxldGUgcm91bmRbX3N0YWNrXTsKICAgICAgZGVsZXRlIGNvbW1pdEJsb2NrW19zdGFja107CiAgICAgIGRlbGV0ZSBjb21taXRbX3N0YWNrXTsKCiAgICAgIERyYWluU3RhY2soX3N0YWNrLF9jb3VudGVyU3RhY2ssbXNnLnNlbmRlcik7CiAgICB9CiAgICBldmVudCBEcmFpblN0YWNrKGJ5dGVzMzIgc3RhY2ssYnl0ZXMzMiBjb3VudGVyU3RhY2ssYWRkcmVzcyBzZW5kZXIpOwoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggLSAxOwogICAgfQoKICAgIGZ1bmN0aW9uIHRva2Vuc09mT3duZXIoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyh1aW50MjU2W10pIHsKICAgICAgICB1aW50MjU2IHRva2VuQ291bnQgPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICBpZiAodG9rZW5Db3VudCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdWludDI1NltdKDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVpbnQyNTZbXSBtZW1vcnkgcmVzdWx0ID0gbmV3IHVpbnQyNTZbXSh0b2tlbkNvdW50KTsKICAgICAgICAgICAgdWludDI1NiB0b3RhbCA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgICAgIHVpbnQyNTYgcmVzdWx0SW5kZXggPSAwOwogICAgICAgICAgICB1aW50MjU2IGlkOwogICAgICAgICAgICBmb3IgKGlkID0gMTsgaWQgPD0gdG90YWw7IGlkKyspIHsKICAgICAgICAgICAgICAgIGlmICh0b2tlbkluZGV4VG9Pd25lcltpZF0gPT0gX293bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4XSA9IGlkOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdEluZGV4Kys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfYW1vdW50KSBwdWJsaWMgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgcmVxdWlyZSh0aGlzLmJhbGFuY2UgPj0gX2Ftb3VudCk7CiAgICAgIGFzc2VydChvd25lci5zZW5kKF9hbW91bnQpKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbihhZGRyZXNzIF90b2tlbix1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICBTdGFuZGFyZFRva2VuIHRva2VuID0gU3RhbmRhcmRUb2tlbihfdG9rZW4pOwogICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLF9hbW91bnQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KfQoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiB7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgeyB9Cn0KCmNvbnRyYWN0IFNsYW1tZXJUaW1lIHsKICBmdW5jdGlvbiBzdGFydFNsYW1tZXJUaW1lKGFkZHJlc3MgX3BsYXllcjEsdWludDI1Nls1XSBfaWQxLGFkZHJlc3MgX3BsYXllcjIsdWludDI1Nls1XSBfaWQyKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgeyB9CiAgZnVuY3Rpb24gdHJhbnNmZXJCYWNrKGFkZHJlc3MgX3RvV2hvbSwgdWludDI1NiBfaWQpIHB1YmxpYyByZXR1cm5zIChib29sKSB7IH0KfQ=='.
	

]
