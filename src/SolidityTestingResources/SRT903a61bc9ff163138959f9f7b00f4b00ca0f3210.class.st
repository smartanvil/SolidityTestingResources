Class {
	#name : #SRT903a61bc9ff163138959f9f7b00f4b00ca0f3210,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT903a61bc9ff163138959f9f7b00f4b00ca0f3210 >> base64 [
	^ ''.
	

]
