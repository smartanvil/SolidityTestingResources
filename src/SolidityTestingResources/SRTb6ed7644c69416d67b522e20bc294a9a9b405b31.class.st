Class {
	#name : #SRTb6ed7644c69416d67b522e20bc294a9a9b405b31,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb6ed7644c69416d67b522e20bc294a9a9b405b31 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8gJzB4Qml0Y29pbiBUb2tlbicgY29udHJhY3QKCi8vIE1pbmVhYmxlIEVSQzIwIFRva2VuIHVzaW5nIFByb29mIE9mIFdvcmsKCi8vCgovLyBTeW1ib2wgICAgICA6IDB4QlRDCgovLyBOYW1lICAgICAgICA6IDB4Qml0Y29pbiBUb2tlbgoKLy8gVG90YWwgc3VwcGx5OiAyMSwwMDAsMDAwLjAwCgovLyBEZWNpbWFscyAgICA6IDgKCi8vCgoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBTYWZlIG1hdGhzCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CgogICAgICAgIGMgPSBhICsgYjsKCiAgICAgICAgcmVxdWlyZShjID49IGEpOwoKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CgogICAgICAgIHJlcXVpcmUoYiA8PSBhKTsKCiAgICAgICAgYyA9IGEgLSBiOwoKICAgIH0KCiAgICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CgogICAgICAgIGMgPSBhICogYjsKCiAgICAgICAgcmVxdWlyZShhID09IDAgfHwgYyAvIGEgPT0gYik7CgogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50IGMpIHsKCiAgICAgICAgcmVxdWlyZShiID4gMCk7CgogICAgICAgIGMgPSBhIC8gYjsKCiAgICB9Cgp9CgoKCmxpYnJhcnkgRXh0ZW5kZWRNYXRoIHsKCgogICAgLy9yZXR1cm4gdGhlIHNtYWxsZXIgb2YgdGhlIHR3byBpbnB1dHMgKGEgb3IgYikKICAgIGZ1bmN0aW9uIGxpbWl0TGVzc1RoYW4odWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCBjKSB7CgogICAgICAgIGlmKGEgPiBiKSByZXR1cm4gYjsKCiAgICAgICAgcmV0dXJuIGE7CgogICAgfQp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBFUkMgVG9rZW4gU3RhbmRhcmQgIzIwIEludGVyZmFjZQoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtMjAtdG9rZW4tc3RhbmRhcmQubWQKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KTsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbk93bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKTsKCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyB0b2tlbk93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB0b2tlbnMpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHRva2VucykgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB0b2tlbnMpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHRva2Vucyk7CgogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIHRva2VuT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHRva2Vucyk7Cgp9CgoKCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vIENvbnRyYWN0IGZ1bmN0aW9uIHRvIHJlY2VpdmUgYXBwcm92YWwgYW5kIGV4ZWN1dGUgZnVuY3Rpb24gaW4gb25lIGNhbGwKCi8vCgovLyBCb3Jyb3dlZCBmcm9tIE1pbmlNZVRva2VuCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsKCiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBmcm9tLCB1aW50MjU2IHRva2VucywgYWRkcmVzcyB0b2tlbiwgYnl0ZXMgZGF0YSkgcHVibGljOwoKfQoKCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBPd25lZCBjb250cmFjdAoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKY29udHJhY3QgT3duZWQgewoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIGFkZHJlc3MgcHVibGljIG5ld093bmVyOwoKCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8pOwoKCiAgICBmdW5jdGlvbiBPd25lZCgpIHB1YmxpYyB7CgogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKCiAgICB9CgoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CgogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CgogICAgICAgIF87CgogICAgfQoKCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CgogICAgICAgIG5ld093bmVyID0gX25ld093bmVyOwoKICAgIH0KCiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWMgewoKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOwoKICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwoKICAgICAgICBvd25lciA9IG5ld093bmVyOwoKICAgICAgICBuZXdPd25lciA9IGFkZHJlc3MoMCk7CgogICAgfQoKfQoKCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyBFUkMyMCBUb2tlbiwgd2l0aCB0aGUgYWRkaXRpb24gb2Ygc3ltYm9sLCBuYW1lIGFuZCBkZWNpbWFscyBhbmQgYW4KCi8vIGluaXRpYWwgZml4ZWQgc3VwcGx5CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjb250cmFjdCBfMHhCaXRjb2luVG9rZW4gaXMgRVJDMjBJbnRlcmZhY2UsIE93bmVkIHsKCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgIHVzaW5nIEV4dGVuZGVkTWF0aCBmb3IgdWludDsKCgogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CgogICAgc3RyaW5nIHB1YmxpYyAgbmFtZTsKCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CgogICAgdWludCBwdWJsaWMgX3RvdGFsU3VwcGx5OwoKCgogICAgIHVpbnQgcHVibGljIGxhdGVzdERpZmZpY3VsdHlQZXJpb2RTdGFydGVkOwoKCgogICAgdWludCBwdWJsaWMgZXBvY2hDb3VudDsvL251bWJlciBvZiAnYmxvY2tzJyBtaW5lZAoKCiAgICB1aW50IHB1YmxpYyBfQkxPQ0tTX1BFUl9SRUFESlVTVE1FTlQgPSAxMDI0OwoKCiAgICAvL2EgbGl0dGxlIG51bWJlcgogICAgdWludCBwdWJsaWMgIF9NSU5JTVVNX1RBUkdFVCA9IDIqKjE2OwoKCiAgICAgIC8vYSBiaWcgbnVtYmVyIGlzIGVhc2llciA7IGp1c3QgZmluZCBhIHNvbHV0aW9uIHRoYXQgaXMgc21hbGxlcgogICAgLy91aW50IHB1YmxpYyAgX01BWElNVU1fVEFSR0VUID0gMioqMjI0OyAgYml0Y29pbiB1c2VzIDIyNAogICAgdWludCBwdWJsaWMgIF9NQVhJTVVNX1RBUkdFVCA9IDIqKjIzNDsKCgogICAgdWludCBwdWJsaWMgbWluaW5nVGFyZ2V0OwoKICAgIGJ5dGVzMzIgcHVibGljIGNoYWxsZW5nZU51bWJlcjsgICAvL2dlbmVyYXRlIGEgbmV3IG9uZSB3aGVuIGEgbmV3IHJld2FyZCBpcyBtaW50ZWQKCgoKICAgIHVpbnQgcHVibGljIHJld2FyZEVyYTsKICAgIHVpbnQgcHVibGljIG1heFN1cHBseUZvckVyYTsKCgogICAgYWRkcmVzcyBwdWJsaWMgbGFzdFJld2FyZFRvOwogICAgdWludCBwdWJsaWMgbGFzdFJld2FyZEFtb3VudDsKICAgIHVpbnQgcHVibGljIGxhc3RSZXdhcmRFdGhCbG9ja051bWJlcjsKCiAgICBib29sIGxvY2tlZCA9IGZhbHNlOwoKICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBieXRlczMyKSBzb2x1dGlvbkZvckNoYWxsZW5nZTsKCiAgICB1aW50IHB1YmxpYyB0b2tlbnNNaW50ZWQ7CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOwoKCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpKSBhbGxvd2VkOwoKCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50IHJld2FyZF9hbW91bnQsIHVpbnQgZXBvY2hDb3VudCwgYnl0ZXMzMiBuZXdDaGFsbGVuZ2VOdW1iZXIpOwoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIENvbnN0cnVjdG9yCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gXzB4Qml0Y29pblRva2VuKCkgcHVibGljIG9ubHlPd25lcnsKCgoKICAgICAgICBzeW1ib2wgPSAiMHhCVEMiOwoKICAgICAgICBuYW1lID0gIjB4Qml0Y29pbiBUb2tlbiI7CgogICAgICAgIGRlY2ltYWxzID0gODsKCiAgICAgICAgX3RvdGFsU3VwcGx5ID0gMjEwMDAwMDAgKiAxMCoqdWludChkZWNpbWFscyk7CgogICAgICAgIGlmKGxvY2tlZCkgcmV2ZXJ0KCk7CiAgICAgICAgbG9ja2VkID0gdHJ1ZTsKCiAgICAgICAgdG9rZW5zTWludGVkID0gMDsKCiAgICAgICAgcmV3YXJkRXJhID0gMDsKICAgICAgICBtYXhTdXBwbHlGb3JFcmEgPSBfdG90YWxTdXBwbHkuZGl2KDIpOwoKICAgICAgICBtaW5pbmdUYXJnZXQgPSBfTUFYSU1VTV9UQVJHRVQ7CgogICAgICAgIGxhdGVzdERpZmZpY3VsdHlQZXJpb2RTdGFydGVkID0gYmxvY2subnVtYmVyOwoKICAgICAgICBfc3RhcnROZXdNaW5pbmdFcG9jaCgpOwoKCiAgICAgICAgLy9UaGUgb3duZXIgZ2V0cyBub3RoaW5nISBZb3UgbXVzdCBtaW5lIHRoaXMgRVJDMjAgdG9rZW4KICAgICAgICAvL2JhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsKICAgICAgICAvL1RyYW5zZmVyKGFkZHJlc3MoMCksIG93bmVyLCBfdG90YWxTdXBwbHkpOwoKICAgIH0KCgoKCiAgICAgICAgZnVuY3Rpb24gbWludCh1aW50MjU2IG5vbmNlLCBieXRlczMyIGNoYWxsZW5nZV9kaWdlc3QpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCgogICAgICAgICAgICAvL3RoZSBQb1cgbXVzdCBjb250YWluIHdvcmsgdGhhdCBpbmNsdWRlcyBhIHJlY2VudCBldGhlcmV1bSBibG9jayBoYXNoIChjaGFsbGVuZ2UgbnVtYmVyKSBhbmQgdGhlIG1zZy5zZW5kZXIncyBhZGRyZXNzIHRvIHByZXZlbnQgTUlUTSBhdHRhY2tzCiAgICAgICAgICAgIGJ5dGVzMzIgZGlnZXN0ID0gIGtlY2NhazI1NihjaGFsbGVuZ2VOdW1iZXIsIG1zZy5zZW5kZXIsIG5vbmNlICk7CgogICAgICAgICAgICAvL3RoZSBjaGFsbGVuZ2UgZGlnZXN0IG11c3QgbWF0Y2ggdGhlIGV4cGVjdGVkCiAgICAgICAgICAgIGlmIChkaWdlc3QgIT0gY2hhbGxlbmdlX2RpZ2VzdCkgcmV2ZXJ0KCk7CgogICAgICAgICAgICAvL3RoZSBkaWdlc3QgbXVzdCBiZSBzbWFsbGVyIHRoYW4gdGhlIHRhcmdldAogICAgICAgICAgICBpZih1aW50MjU2KGRpZ2VzdCkgPiBtaW5pbmdUYXJnZXQpIHJldmVydCgpOwoKCiAgICAgICAgICAgIC8vb25seSBhbGxvdyBvbmUgcmV3YXJkIGZvciBlYWNoIGNoYWxsZW5nZQogICAgICAgICAgICAgYnl0ZXMzMiBzb2x1dGlvbiA9IHNvbHV0aW9uRm9yQ2hhbGxlbmdlW2NoYWxsZW5nZU51bWJlcl07CiAgICAgICAgICAgICBzb2x1dGlvbkZvckNoYWxsZW5nZVtjaGFsbGVuZ2VOdW1iZXJdID0gZGlnZXN0OwogICAgICAgICAgICAgaWYoc29sdXRpb24gIT0gMHgwKSByZXZlcnQoKTsgIC8vcHJldmVudCB0aGUgc2FtZSBhbnN3ZXIgZnJvbSBhd2FyZGluZyB0d2ljZQoKCiAgICAgICAgICAgIHVpbnQgcmV3YXJkX2Ftb3VudCA9IGdldE1pbmluZ1Jld2FyZCgpOwoKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQocmV3YXJkX2Ftb3VudCk7CgogICAgICAgICAgICB0b2tlbnNNaW50ZWQgPSB0b2tlbnNNaW50ZWQuYWRkKHJld2FyZF9hbW91bnQpOwoKCiAgICAgICAgICAgIC8vQ2Fubm90IG1pbnQgbW9yZSB0b2tlbnMgdGhhbiB0aGVyZSBhcmUKICAgICAgICAgICAgYXNzZXJ0KHRva2Vuc01pbnRlZCA8PSBtYXhTdXBwbHlGb3JFcmEpOwoKICAgICAgICAgICAgLy9zZXQgcmVhZG9ubHkgZGlhZ25vc3RpY3MgZGF0YQogICAgICAgICAgICBsYXN0UmV3YXJkVG8gPSBtc2cuc2VuZGVyOwogICAgICAgICAgICBsYXN0UmV3YXJkQW1vdW50ID0gcmV3YXJkX2Ftb3VudDsKICAgICAgICAgICAgbGFzdFJld2FyZEV0aEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyOwoKCiAgICAgICAgICAgICBfc3RhcnROZXdNaW5pbmdFcG9jaCgpOwoKICAgICAgICAgICAgICBNaW50KG1zZy5zZW5kZXIsIHJld2FyZF9hbW91bnQsIGVwb2NoQ291bnQsIGNoYWxsZW5nZU51bWJlciApOwoKICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgfQoKCiAgICAvL2EgbmV3ICdibG9jaycgdG8gYmUgbWluZWQKICAgIGZ1bmN0aW9uIF9zdGFydE5ld01pbmluZ0Vwb2NoKCkgaW50ZXJuYWwgewoKICAgICAgLy9pZiBtYXggc3VwcGx5IGZvciB0aGUgZXJhIHdpbGwgYmUgZXhjZWVkZWQgbmV4dCByZXdhcmQgcm91bmQgdGhlbiBlbnRlciB0aGUgbmV3IGVyYSBiZWZvcmUgdGhhdCBoYXBwZW5zCgogICAgICAvLzQwIGlzIHRoZSBmaW5hbCByZXdhcmQgZXJhLCBhbG1vc3QgYWxsIHRva2VucyBtaW50ZWQKICAgICAgLy9vbmNlIHRoZSBmaW5hbCBlcmEgaXMgcmVhY2hlZCwgbW9yZSB0b2tlbnMgd2lsbCBub3QgYmUgZ2l2ZW4gb3V0IGJlY2F1c2UgdGhlIGFzc2VydCBmdW5jdGlvbgogICAgICBpZiggdG9rZW5zTWludGVkLmFkZChnZXRNaW5pbmdSZXdhcmQoKSkgPiBtYXhTdXBwbHlGb3JFcmEgJiYgcmV3YXJkRXJhIDwgMzkpCiAgICAgIHsKICAgICAgICByZXdhcmRFcmEgPSByZXdhcmRFcmEgKyAxOwogICAgICB9CgogICAgICAvL3NldCB0aGUgbmV4dCBtaW50ZWQgc3VwcGx5IGF0IHdoaWNoIHRoZSBlcmEgd2lsbCBjaGFuZ2UKICAgICAgLy8gdG90YWwgc3VwcGx5IGlzIDIxMDAwMDAwMDAwMDAwMDAgIGJlY2F1c2Ugb2YgOCBkZWNpbWFsIHBsYWNlcwogICAgICBtYXhTdXBwbHlGb3JFcmEgPSBfdG90YWxTdXBwbHkgLSBfdG90YWxTdXBwbHkuZGl2KCAyKioocmV3YXJkRXJhICsgMSkpOwoKICAgICAgZXBvY2hDb3VudCA9IGVwb2NoQ291bnQuYWRkKDEpOwoKICAgICAgLy9ldmVyeSBzbyBvZnRlbiwgcmVhZGp1c3QgZGlmZmljdWx0eS4gRG9udCByZWFkanVzdCB3aGVuIGRlcGxveWluZwogICAgICBpZihlcG9jaENvdW50ICUgX0JMT0NLU19QRVJfUkVBREpVU1RNRU5UID09IDApCiAgICAgIHsKICAgICAgICBfcmVBZGp1c3REaWZmaWN1bHR5KCk7CiAgICAgIH0KCgogICAgICAvL21ha2UgdGhlIGxhdGVzdCBldGhlcmV1bSBibG9jayBoYXNoIGEgcGFydCBvZiB0aGUgbmV4dCBjaGFsbGVuZ2UgZm9yIFBvVyB0byBwcmV2ZW50IHByZS1taW5pbmcgZnV0dXJlIGJsb2NrcwogICAgICAvL2RvIHRoaXMgbGFzdCBzaW5jZSB0aGlzIGlzIGEgcHJvdGVjdGlvbiBtZWNoYW5pc20gaW4gdGhlIG1pbnQoKSBmdW5jdGlvbgogICAgICBjaGFsbGVuZ2VOdW1iZXIgPSBibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyIC0gMSk7CgoKCgoKCiAgICB9CgoKCgogICAgLy9odHRwczovL2VuLmJpdGNvaW4uaXQvd2lraS9EaWZmaWN1bHR5I1doYXRfaXNfdGhlX2Zvcm11bGFfZm9yX2RpZmZpY3VsdHkuM0YKICAgIC8vYXMgb2YgMjAxNyB0aGUgYml0Y29pbiBkaWZmaWN1bHR5IHdhcyB1cCB0byAxNyB6ZXJvZXMsIGl0IHdhcyBvbmx5IDggaW4gdGhlIGVhcmx5IGRheXMKCiAgICAvL3JlYWRqdXN0IHRoZSB0YXJnZXQgYnkgNSBwZXJjZW50CiAgICBmdW5jdGlvbiBfcmVBZGp1c3REaWZmaWN1bHR5KCkgaW50ZXJuYWwgewoKCiAgICAgICAgdWludCBldGhCbG9ja3NTaW5jZUxhc3REaWZmaWN1bHR5UGVyaW9kID0gYmxvY2subnVtYmVyIC0gbGF0ZXN0RGlmZmljdWx0eVBlcmlvZFN0YXJ0ZWQ7CiAgICAgICAgLy9hc3N1bWUgMzYwIGV0aGVyZXVtIGJsb2NrcyBwZXIgaG91cgoKICAgICAgICAvL3dlIHdhbnQgbWluZXJzIHRvIHNwZW5kIDEwIG1pbnV0ZXMgdG8gbWluZSBlYWNoICdibG9jaycsIGFib3V0IDYwIGV0aGVyZXVtIGJsb2NrcyA9IG9uZSAweGJpdGNvaW4gZXBvY2gKICAgICAgICB1aW50IGVwb2Noc01pbmVkID0gX0JMT0NLU19QRVJfUkVBREpVU1RNRU5UOyAvLzI1NgoKICAgICAgICB1aW50IHRhcmdldEV0aEJsb2Nrc1BlckRpZmZQZXJpb2QgPSBlcG9jaHNNaW5lZCAqIDYwOyAvL3Nob3VsZCBiZSA2MCB0aW1lcyBzbG93ZXIgdGhhbiBldGhlcmV1bQoKICAgICAgICAvL2lmIHRoZXJlIHdlcmUgbGVzcyBldGggYmxvY2tzIHBhc3NlZCBpbiB0aW1lIHRoYW4gZXhwZWN0ZWQKICAgICAgICBpZiggZXRoQmxvY2tzU2luY2VMYXN0RGlmZmljdWx0eVBlcmlvZCA8IHRhcmdldEV0aEJsb2Nrc1BlckRpZmZQZXJpb2QgKQogICAgICAgIHsKICAgICAgICAgIHVpbnQgZXhjZXNzX2Jsb2NrX3BjdCA9ICh0YXJnZXRFdGhCbG9ja3NQZXJEaWZmUGVyaW9kLm11bCgxMDApKS5kaXYoIGV0aEJsb2Nrc1NpbmNlTGFzdERpZmZpY3VsdHlQZXJpb2QgKTsKCiAgICAgICAgICB1aW50IGV4Y2Vzc19ibG9ja19wY3RfZXh0cmEgPSBleGNlc3NfYmxvY2tfcGN0LnN1YigxMDApLmxpbWl0TGVzc1RoYW4oMTAwMCk7CiAgICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIDUlIG1vcmUgYmxvY2tzIG1pbmVkIHRoYW4gZXhwZWN0ZWQgdGhlbiB0aGlzIGlzIDUuICBJZiB0aGVyZSB3ZXJlIDEwMCUgbW9yZSBibG9ja3MgbWluZWQgdGhhbiBleHBlY3RlZCB0aGVuIHRoaXMgaXMgMTAwLgoKICAgICAgICAgIC8vbWFrZSBpdCBoYXJkZXIKICAgICAgICAgIG1pbmluZ1RhcmdldCA9IG1pbmluZ1RhcmdldC5zdWIobWluaW5nVGFyZ2V0LmRpdigyMDAwKS5tdWwoZXhjZXNzX2Jsb2NrX3BjdF9leHRyYSkpOyAgIC8vYnkgdXAgdG8gNTAgJQogICAgICAgIH1lbHNlewogICAgICAgICAgdWludCBzaG9ydGFnZV9ibG9ja19wY3QgPSAoZXRoQmxvY2tzU2luY2VMYXN0RGlmZmljdWx0eVBlcmlvZC5tdWwoMTAwKSkuZGl2KCB0YXJnZXRFdGhCbG9ja3NQZXJEaWZmUGVyaW9kICk7CgogICAgICAgICAgdWludCBzaG9ydGFnZV9ibG9ja19wY3RfZXh0cmEgPSBzaG9ydGFnZV9ibG9ja19wY3Quc3ViKDEwMCkubGltaXRMZXNzVGhhbigxMDAwKTsgLy9hbHdheXMgYmV0d2VlbiAwIGFuZCAxMDAwCgogICAgICAgICAgLy9tYWtlIGl0IGVhc2llcgogICAgICAgICAgbWluaW5nVGFyZ2V0ID0gbWluaW5nVGFyZ2V0LmFkZChtaW5pbmdUYXJnZXQuZGl2KDIwMDApLm11bChzaG9ydGFnZV9ibG9ja19wY3RfZXh0cmEpKTsgICAvL2J5IHVwIHRvIDUwICUKICAgICAgICB9CgoKCiAgICAgICAgbGF0ZXN0RGlmZmljdWx0eVBlcmlvZFN0YXJ0ZWQgPSBibG9jay5udW1iZXI7CgogICAgICAgIGlmKG1pbmluZ1RhcmdldCA8IF9NSU5JTVVNX1RBUkdFVCkgLy92ZXJ5IGRpZmZpY3VsdAogICAgICAgIHsKICAgICAgICAgIG1pbmluZ1RhcmdldCA9IF9NSU5JTVVNX1RBUkdFVDsKICAgICAgICB9CgogICAgICAgIGlmKG1pbmluZ1RhcmdldCA+IF9NQVhJTVVNX1RBUkdFVCkgLy92ZXJ5IGVhc3kKICAgICAgICB7CiAgICAgICAgICBtaW5pbmdUYXJnZXQgPSBfTUFYSU1VTV9UQVJHRVQ7CiAgICAgICAgfQogICAgfQoKCiAgICAvL3RoaXMgaXMgYSByZWNlbnQgZXRoZXJldW0gYmxvY2sgaGFzaCwgdXNlZCB0byBwcmV2ZW50IHByZS1taW5pbmcgZnV0dXJlIGJsb2NrcwogICAgZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlTnVtYmVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4gY2hhbGxlbmdlTnVtYmVyOwogICAgfQoKICAgIC8vdGhlIG51bWJlciBvZiB6ZXJvZXMgdGhlIGRpZ2VzdCBvZiB0aGUgUG9XIHNvbHV0aW9uIHJlcXVpcmVzLiAgQXV0byBhZGp1c3RzCiAgICAgZnVuY3Rpb24gZ2V0TWluaW5nRGlmZmljdWx0eSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIF9NQVhJTVVNX1RBUkdFVC5kaXYobWluaW5nVGFyZ2V0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNaW5pbmdUYXJnZXQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgcmV0dXJuIG1pbmluZ1RhcmdldDsKICAgfQoKCgogICAgLy8yMW0gY29pbnMgdG90YWwKICAgIC8vcmV3YXJkIGJlZ2lucyBhdCA1MCBhbmQgaXMgY3V0IGluIGhhbGYgZXZlcnkgcmV3YXJkIGVyYSAoYXMgdG9rZW5zIGFyZSBtaW5lZCkKICAgIGZ1bmN0aW9uIGdldE1pbmluZ1Jld2FyZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgLy9vbmNlIHdlIGdldCBoYWxmIHdheSB0aHJ1IHRoZSBjb2lucywgb25seSBnZXQgMjUgcGVyIGJsb2NrCgogICAgICAgICAvL2V2ZXJ5IHJld2FyZCBlcmEsIHRoZSByZXdhcmQgYW1vdW50IGhhbHZlcy4KCiAgICAgICAgIHJldHVybiAoNTAgKiAxMCoqdWludChkZWNpbWFscykgKS5kaXYoIDIqKnJld2FyZEVyYSApIDsKCiAgICB9CgogICAgLy9oZWxwIGRlYnVnIG1pbmluZyBzb2Z0d2FyZQogICAgZnVuY3Rpb24gZ2V0TWludERpZ2VzdCh1aW50MjU2IG5vbmNlLCBieXRlczMyIGNoYWxsZW5nZV9kaWdlc3QsIGJ5dGVzMzIgY2hhbGxlbmdlX251bWJlcikgcHVibGljIHZpZXcgcmV0dXJucyAoYnl0ZXMzMiBkaWdlc3R0ZXN0KSB7CgogICAgICAgIGJ5dGVzMzIgZGlnZXN0ID0ga2VjY2FrMjU2KGNoYWxsZW5nZV9udW1iZXIsbXNnLnNlbmRlcixub25jZSk7CgogICAgICAgIHJldHVybiBkaWdlc3Q7CgogICAgICB9CgogICAgICAgIC8vaGVscCBkZWJ1ZyBtaW5pbmcgc29mdHdhcmUKICAgICAgZnVuY3Rpb24gY2hlY2tNaW50U29sdXRpb24odWludDI1NiBub25jZSwgYnl0ZXMzMiBjaGFsbGVuZ2VfZGlnZXN0LCBieXRlczMyIGNoYWxsZW5nZV9udW1iZXIsIHVpbnQgdGVzdFRhcmdldCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgICAgYnl0ZXMzMiBkaWdlc3QgPSBrZWNjYWsyNTYoY2hhbGxlbmdlX251bWJlcixtc2cuc2VuZGVyLG5vbmNlKTsKCiAgICAgICAgICBpZih1aW50MjU2KGRpZ2VzdCkgPiB0ZXN0VGFyZ2V0KSByZXZlcnQoKTsKCiAgICAgICAgICByZXR1cm4gKGRpZ2VzdCA9PSBjaGFsbGVuZ2VfZGlnZXN0KTsKCiAgICAgICAgfQoKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gVG90YWwgc3VwcGx5CgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewoKICAgICAgICByZXR1cm4gX3RvdGFsU3VwcGx5ICAtIGJhbGFuY2VzW2FkZHJlc3MoMCldOwoKICAgIH0KCgoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIEdldCB0aGUgdG9rZW4gYmFsYW5jZSBmb3IgYWNjb3VudCBgdG9rZW5Pd25lcmAKCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB0b2tlbk93bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CgogICAgICAgIHJldHVybiBiYWxhbmNlc1t0b2tlbk93bmVyXTsKCiAgICB9CgoKCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAvLyBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIHRva2VuIG93bmVyJ3MgYWNjb3VudCB0byBgdG9gIGFjY291bnQKCiAgICAvLyAtIE93bmVyJ3MgYWNjb3VudCBtdXN0IGhhdmUgc3VmZmljaWVudCBiYWxhbmNlIHRvIHRyYW5zZmVyCgogICAgLy8gLSAwIHZhbHVlIHRyYW5zZmVycyBhcmUgYWxsb3dlZAoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdG9rZW5zKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKHRva2Vucyk7CgogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodG9rZW5zKTsKCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdG8sIHRva2Vucyk7CgogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCgoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIFRva2VuIG93bmVyIGNhbiBhcHByb3ZlIGZvciBgc3BlbmRlcmAgdG8gdHJhbnNmZXJGcm9tKC4uLikgYHRva2Vuc2AKCiAgICAvLyBmcm9tIHRoZSB0b2tlbiBvd25lcidzIGFjY291bnQKCiAgICAvLwoKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTIwLXRva2VuLXN0YW5kYXJkLm1kCgogICAgLy8gcmVjb21tZW5kcyB0aGF0IHRoZXJlIGFyZSBubyBjaGVja3MgZm9yIHRoZSBhcHByb3ZhbCBkb3VibGUtc3BlbmQgYXR0YWNrCgogICAgLy8gYXMgdGhpcyBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gdXNlciBpbnRlcmZhY2VzCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdG9rZW5zKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bc3BlbmRlcl0gPSB0b2tlbnM7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHRva2Vucyk7CgogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCgoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIFRyYW5zZmVyIGB0b2tlbnNgIGZyb20gdGhlIGBmcm9tYCBhY2NvdW50IHRvIHRoZSBgdG9gIGFjY291bnQKCiAgICAvLwoKICAgIC8vIFRoZSBjYWxsaW5nIGFjY291bnQgbXVzdCBhbHJlYWR5IGhhdmUgc3VmZmljaWVudCB0b2tlbnMgYXBwcm92ZSguLi4pLWQKCiAgICAvLyBmb3Igc3BlbmRpbmcgZnJvbSB0aGUgYGZyb21gIGFjY291bnQgYW5kCgogICAgLy8gLSBGcm9tIGFjY291bnQgbXVzdCBoYXZlIHN1ZmZpY2llbnQgYmFsYW5jZSB0byB0cmFuc2ZlcgoKICAgIC8vIC0gU3BlbmRlciBtdXN0IGhhdmUgc3VmZmljaWVudCBhbGxvd2FuY2UgdG8gdHJhbnNmZXIKCiAgICAvLyAtIDAgdmFsdWUgdHJhbnNmZXJzIGFyZSBhbGxvd2VkCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB0b2tlbnMpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgYmFsYW5jZXNbZnJvbV0gPSBiYWxhbmNlc1tmcm9tXS5zdWIodG9rZW5zKTsKCiAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0uc3ViKHRva2Vucyk7CgogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodG9rZW5zKTsKCiAgICAgICAgVHJhbnNmZXIoZnJvbSwgdG8sIHRva2Vucyk7CgogICAgICAgIHJldHVybiB0cnVlOwoKICAgIH0KCgoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIFJldHVybnMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXBwcm92ZWQgYnkgdGhlIG93bmVyIHRoYXQgY2FuIGJlCgogICAgLy8gdHJhbnNmZXJyZWQgdG8gdGhlIHNwZW5kZXIncyBhY2NvdW50CgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgdG9rZW5Pd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsKCiAgICAgICAgcmV0dXJuIGFsbG93ZWRbdG9rZW5Pd25lcl1bc3BlbmRlcl07CgogICAgfQoKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gVG9rZW4gb3duZXIgY2FuIGFwcHJvdmUgZm9yIGBzcGVuZGVyYCB0byB0cmFuc2ZlckZyb20oLi4uKSBgdG9rZW5zYAoKICAgIC8vIGZyb20gdGhlIHRva2VuIG93bmVyJ3MgYWNjb3VudC4gVGhlIGBzcGVuZGVyYCBjb250cmFjdCBmdW5jdGlvbgoKICAgIC8vIGByZWNlaXZlQXBwcm92YWwoLi4uKWAgaXMgdGhlbiBleGVjdXRlZAoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3Mgc3BlbmRlciwgdWludCB0b2tlbnMsIGJ5dGVzIGRhdGEpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHRva2VuczsKCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgc3BlbmRlciwgdG9rZW5zKTsKCiAgICAgICAgQXBwcm92ZUFuZENhbGxGYWxsQmFjayhzcGVuZGVyKS5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgdG9rZW5zLCB0aGlzLCBkYXRhKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgfQoKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gRG9uJ3QgYWNjZXB0IEVUSAoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIHsKCiAgICAgICAgcmV2ZXJ0KCk7CgogICAgfQoKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gT3duZXIgY2FuIHRyYW5zZmVyIG91dCBhbnkgYWNjaWRlbnRhbGx5IHNlbnQgRVJDMjAgdG9rZW5zCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gdHJhbnNmZXJBbnlFUkMyMFRva2VuKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCB1aW50IHRva2VucykgcHVibGljIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAgICAgcmV0dXJuIEVSQzIwSW50ZXJmYWNlKHRva2VuQWRkcmVzcykudHJhbnNmZXIob3duZXIsIHRva2Vucyk7CgogICAgfQoKfQ=='.
	

]
