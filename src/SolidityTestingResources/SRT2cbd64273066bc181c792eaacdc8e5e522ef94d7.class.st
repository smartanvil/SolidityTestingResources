Class {
	#name : #SRT2cbd64273066bc181c792eaacdc8e5e522ef94d7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2cbd64273066bc181c792eaacdc8e5e522ef94d7 >> base64 [
	^ ''.
	

]
