Class {
	#name : #SRT3bedc232d2229168818c3242d418dc65a9588d94,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3bedc232d2229168818c3242d418dc65a9588d94 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8qKgoqIEBub3RpY2UgVE9LRU4gQ09OVFJBQ1QKKiBAZGV2IEVSQy0yMCBUb2tlbiBTdGFuZGFyZGQgQ29tcGxpYW50CiovCgovKioKICogQHRpdGxlIFNhZmVNYXRoIGJ5IE9wZW5aZXBwZWxpbgogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCn0KCi8qKgogKiBAdGl0bGUgRVJDMjBUb2tlbkludGVyZmFjZQogKiBAZGV2IFRva2VuIGNvbnRyYWN0IGludGVyZmFjZSBmb3IgZXh0ZXJuYWwgdXNlCiAqLwpjb250cmFjdCBFUkMyMFRva2VuSW50ZXJmYWNlIHsKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgfQoKCi8qKgoqIEB0aXRsZSBFUkMyMFRva2VuCiogQG5vdGljZSBUb2tlbiBkZWZpbml0aW9uIGNvbnRyYWN0CiovCmNvbnRyYWN0IEVSQzIwVG9rZW4gaXMgRVJDMjBUb2tlbkludGVyZmFjZSB7IC8vU3RhbmRhcmQgZGVmaW5pdGlvbiBvZiBhbiBFUkMyMFRva2VuCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsgLy9TYWZlTWF0aCBpcyB1c2VkIGZvciB1aW50MjU2IG9wZXJhdGlvbnMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7IC8vQSBtYXBwaW5nIG9mIGFsbCBiYWxhbmNlcyBwZXIgYWRkcmVzcwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOyAvL0EgbWFwcGluZyBvZiBhbGwgYWxsb3dhbmNlcwogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICAKICAgIC8qKgogICAgKiBAbm90aWNlIEdldCB0aGUgYmFsYW5jZSBvZiBhbiBfb3duZXIgYWRkcmVzcy4KICAgICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBiZSBxdWVyeS4KICAgICovCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbCkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIHRyYW5zZmVyIF92YWx1ZSB0b2tlbnMgdG8gYWRkcmVzcyBfdG8KICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUgaWYgZG9uZQogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOyAvL0lmIHlvdSBkb250IHdhbnQgdGhhdCBwZW9wbGUgZGVzdHJveSB0b2tlbgogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICogQG5vdGljZSBUcmFuc2ZlciBfdmFsdWUgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90byB1c2luZyBhbGxvd2FuY2UgbXNnLnNlbmRlciBhbGxvd2FuY2Ugb24gX2Zyb20KICAgICogQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHdoZXJlIHRva2VucyBjb21lcy4KICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUgaWYgZG9uZQogICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsgLy9JZiB5b3UgZG9udCB3YW50IHRoYXQgcGVvcGxlIGRlc3Ryb3kgdG9rZW4KICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIEFzc2lnbiBhbGxvd2FuY2UgX3ZhbHVlIHRvIF9zcGVuZGVyIGFkZHJlc3MgdG8gdXNlIHRoZSBtc2cuc2VuZGVyIGJhbGFuY2UKICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHRvIGJlIGFsbG93ZWQgdG8gc3BlbmQuCiAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSBhbGxvd2VkLgogICAgKiBAcmV0dXJuIHN1Y2Nlc3Mgd2l0aCBib29sZWFuIHZhbHVlIHRydWUKICAgICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgR2V0IHRoZSBhbGxvd2FuY2Ugb2YgYW4gc3BlY2lmaWVkIGFkZHJlc3MgdG8gdXNlIGFub3RoZXIgYWRkcmVzcyBiYWxhbmNlLgogICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lciBvZiB0aGUgdG9rZW5zLgogICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFsbG93ZWQgc3BlbmRlci4KICAgICogQHJldHVybiByZW1haW5pbmcgd2l0aCB0aGUgYWxsb3dhbmNlIHZhbHVlCiAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBMb2cgRXZlbnRzCiAgICAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCn0KCi8qKgoqIEB0aXRsZSBBc3NldAoqIEBub3RpY2UgVG9rZW4gY3JlYXRpb24uCiogQGRldiBFUkMyMCBUb2tlbgoqLwpjb250cmFjdCBBc3NldCBpcyBFUkMyMFRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdFeHBlcnQgVG9rZW4nOwogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdFWFAnOwogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzEnOwogICAgCiAgICAvKioKICAgICogQG5vdGljZSB0b2tlbiBjb250cnVjdG9yLgogICAgKi8KICAgIGZ1bmN0aW9uIEFzc2V0KCkgcHVibGljIHsKCiAgICAgICAgdG90YWxTdXBwbHkgPSAzOTAwMDAwMCAqICgxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7IC8vVG9rZW4gaW5pdGlhbCBzdXBwbHk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsKICAgICAgICBUcmFuc2ZlcigwLCB0aGlzLCB0b3RhbFN1cHBseSk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgdG90YWxTdXBwbHkpOyAgICAgICAKICAgIAogICAgfQogICAgCiAgICAvKioKICAgICogQG5vdGljZSB0aGlzIGNvbnRyYWN0IHdpbGwgcmV2ZXJ0IG9uIGRpcmVjdCBub24tZnVuY3Rpb24gY2FsbHMKICAgICogQGRldiBGdW5jdGlvbiB0byBoYW5kbGUgY2FsbGJhY2sgY2FsbHMKICAgICovCiAgICBmdW5jdGlvbigpIHB1YmxpYyB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cgp9'.
	

]
