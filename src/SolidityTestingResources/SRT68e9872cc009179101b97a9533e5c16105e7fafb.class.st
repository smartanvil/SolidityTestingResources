Class {
	#name : #SRT68e9872cc009179101b97a9533e5c16105e7fafb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT68e9872cc009179101b97a9533e5c16105e7fafb >> base64 [
	^ ''.
	

]
