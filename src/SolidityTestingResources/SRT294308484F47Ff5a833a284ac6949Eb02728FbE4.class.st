Class {
	#name : #SRT294308484F47Ff5a833a284ac6949Eb02728FbE4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT294308484F47Ff5a833a284ac6949Eb02728FbE4 >> base64 [
	^ ''.
	

]
