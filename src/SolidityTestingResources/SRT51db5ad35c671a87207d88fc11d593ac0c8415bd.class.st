Class {
	#name : #SRT51db5ad35c671a87207d88fc11d593ac0c8415bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT51db5ad35c671a87207d88fc11d593ac0c8415bd >> base64 [
	^ ''.
	

]
