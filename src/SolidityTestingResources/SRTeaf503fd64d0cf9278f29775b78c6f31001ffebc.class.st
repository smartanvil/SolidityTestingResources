Class {
	#name : #SRTeaf503fd64d0cf9278f29775b78c6f31001ffebc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeaf503fd64d0cf9278f29775b78c6f31001ffebc >> base64 [
	^ ''.
	

]
