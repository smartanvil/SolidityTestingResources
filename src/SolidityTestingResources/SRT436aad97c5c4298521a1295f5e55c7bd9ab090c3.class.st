Class {
	#name : #SRT436aad97c5c4298521a1295f5e55c7bd9ab090c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT436aad97c5c4298521a1295f5e55c7bd9ab090c3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCnByYWdtYSBzb2xpZGl0eSBeMC40LjE1OwoKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgpwcmFnbWEgc29saWRpdHkgXjAuNC4xNTsKCgovKioKICogQHRpdGxlIFBhdXNhYmxlCiAqIEBkZXYgQmFzZSBjb250cmFjdCB3aGljaCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IGFuIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4KICovCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgewogIGV2ZW50IFBhdXNlKCk7CiAgZXZlbnQgVW5wYXVzZSgpOwoKICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIHBhdXNlZAogICAqLwogIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICByZXF1aXJlKCFwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgbW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuUGF1c2VkKCkgewogICAgcmVxdWlyZShwYXVzZWQpOwogICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHBhdXNlKCkgb25seU93bmVyIHdoZW5Ob3RQYXVzZWQgewogICAgcGF1c2VkID0gdHJ1ZTsKICAgIFBhdXNlKCk7CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKICAgKi8KICBmdW5jdGlvbiB1bnBhdXNlKCkgb25seU93bmVyIHdoZW5QYXVzZWQgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgpwcmFnbWEgc29saWRpdHkgXjAuNC4xNTsKCgpjb250cmFjdCBGdW5kUmVxdWVzdFByaXZhdGVTZWVkIGlzIFBhdXNhYmxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKCiAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwogIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgdWludCBwdWJsaWMgcmF0ZTsKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQgcHVibGljIHdlaVJhaXNlZDsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBkZXBvc2l0czsKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOwogIGFkZHJlc3NbXSBwdWJsaWMgaW52ZXN0b3JzOwogIHVpbnQgcHVibGljIGludmVzdG9yQ291bnQ7CiAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBhbGxvd2VkOwogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludCB2YWx1ZSwgdWludCBhbW91bnQpOwoKICBmdW5jdGlvbiBGdW5kUmVxdWVzdFByaXZhdGVTZWVkKHVpbnQgX3JhdGUsIGFkZHJlc3MgX3dhbGxldCkgewogICAgcmVxdWlyZShfcmF0ZSA+IDApOwogICAgcmVxdWlyZShfd2FsbGV0ICE9IDB4MCk7CgogICAgcmF0ZSA9IF9yYXRlOwogICAgd2FsbGV0ID0gX3dhbGxldDsKICB9CiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHBheWFibGUgd2hlbk5vdFBhdXNlZCB7CiAgICByZXF1aXJlKHZhbGlkQmVuZWZpY2lhcnkoYmVuZWZpY2lhcnkpKTsKICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZVNpemUoKSk7CiAgICBib29sIGV4aXN0aW5nID0gZGVwb3NpdHNbYmVuZWZpY2lhcnldID4gMDsKICAgIHVpbnQgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgdWludCB1cGRhdGVkV2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwogICAgLy8gY2FsY3VsYXRlIHRva2VuIGFtb3VudCB0byBiZSBjcmVhdGVkCiAgICB1aW50IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZSk7CiAgICB3ZWlSYWlzZWQgPSB1cGRhdGVkV2VpUmFpc2VkOwogICAgZGVwb3NpdHNbYmVuZWZpY2lhcnldID0gZGVwb3NpdHNbYmVuZWZpY2lhcnldLmFkZChtc2cudmFsdWUpOwogICAgYmFsYW5jZXNbYmVuZWZpY2lhcnldID0gYmFsYW5jZXNbYmVuZWZpY2lhcnldLmFkZCh0b2tlbnMpOwogICAgaWYoIWV4aXN0aW5nKSB7CiAgICAgIGludmVzdG9ycy5wdXNoKGJlbmVmaWNpYXJ5KTsKICAgICAgaW52ZXN0b3JDb3VudCsrOwogICAgfQogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQogIC8vIHNlbmQgZXRoZXIgdG8gdGhlIGZ1bmQgY29sbGVjdGlvbiB3YWxsZXQKICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgZnVuY3Rpb24gZm9yd2FyZEZ1bmRzKCkgaW50ZXJuYWwgewogICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgfQogIGZ1bmN0aW9uIHZhbGlkQmVuZWZpY2lhcnkoYWRkcmVzcyBiZW5lZmljaWFyeSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICByZXR1cm4gYWxsb3dlZFtiZW5lZmljaWFyeV0gPT0gdHJ1ZTsKICB9CiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbXNnLnZhbHVlICE9IDA7CiAgfQogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYW1vdW50IGlzIGhpZ2hlciB0aGVuIDI1RVRICiAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZVNpemUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbXNnLnZhbHVlID49MjUwMDAwMDAwMDAwMDAwMDAwMDA7CiAgfQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7CiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICB9CiAgZnVuY3Rpb24gZGVwb3NpdHNPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBkZXBvc2l0KSB7CiAgICByZXR1cm4gZGVwb3NpdHNbX293bmVyXTsKICB9CiAgZnVuY3Rpb24gYWxsb3coYWRkcmVzcyBiZW5lZmljaWFyeSkgb25seU93bmVyIHsKICAgIGFsbG93ZWRbYmVuZWZpY2lhcnldID0gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdXBkYXRlUmF0ZSh1aW50IF9yYXRlKSBvbmx5T3duZXIgd2hlblBhdXNlZCB7CiAgICByYXRlID0gX3JhdGU7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVXYWxsZXQoYWRkcmVzcyBfd2FsbGV0KSBvbmx5T3duZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgfQoKICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQp9'.
	

]
