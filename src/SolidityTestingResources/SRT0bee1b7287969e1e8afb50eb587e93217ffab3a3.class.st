Class {
	#name : #SRT0bee1b7287969e1e8afb50eb587e93217ffab3a3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0bee1b7287969e1e8afb50eb587e93217ffab3a3 >> base64 [
	^ ''.
	

]
