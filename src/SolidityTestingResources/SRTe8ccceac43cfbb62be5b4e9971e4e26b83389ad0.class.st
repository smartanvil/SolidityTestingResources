Class {
	#name : #SRTe8ccceac43cfbb62be5b4e9971e4e26b83389ad0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe8ccceac43cfbb62be5b4e9971e4e26b83389ad0 >> base64 [
	^ ''.
	

]
