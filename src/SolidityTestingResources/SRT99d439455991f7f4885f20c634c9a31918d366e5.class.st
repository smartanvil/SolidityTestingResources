Class {
	#name : #SRT99d439455991f7f4885f20c634c9a31918d366e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99d439455991f7f4885f20c634c9a31918d366e5 >> base64 [
	^ ''.
	

]
