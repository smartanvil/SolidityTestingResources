Class {
	#name : #SRT8da0d80f5007ef1e431dd2127178d224e32c2ef4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8da0d80f5007ef1e431dd2127178d224e32c2ef4 >> base64 [
	^ 'LyoKCiAgQ29weXJpZ2h0IDIwMTcgWmVyb0V4IEludGwuCgogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKKi8KCnByYWdtYSBzb2xpZGl0eSBeMC40LjExOwoKY29udHJhY3QgVG9rZW4gewoKICAgIC8vLyBAcmV0dXJuIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzdXBwbHkpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7fQoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX2FkZHJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2Ygd2VpIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHt9CgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIGFsbG93ZWQgdG8gc3BlbnQKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHt9CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsKfQoKLyoKICogT3duYWJsZQogKgogKiBCYXNlIGNvbnRyYWN0IHdpdGggYW4gb3duZXIuCiAqIFByb3ZpZGVzIG9ubHlPd25lciBtb2RpZmllciwgd2hpY2ggcHJldmVudHMgZnVuY3Rpb24gZnJvbSBydW5uaW5nIGlmIGl0IGlzIGNhbGxlZCBieSBhbnlvbmUgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAqLwoKY29udHJhY3QgT3duYWJsZSB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cn0KCi8vLyBAdGl0bGUgVG9rZW5UcmFuc2ZlclByb3h5IC0gVHJhbnNmZXJzIHRva2VucyBvbiBiZWhhbGYgb2YgY29udHJhY3RzIHRoYXQgaGF2ZSBiZWVuIGFwcHJvdmVkIHZpYSBkZWNlbnRyYWxpemVkIGdvdmVybmFuY2UuCi8vLyBAYXV0aG9yIEFtaXIgQmFuZGVhbGkgLSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImJmZGVkMmQ2Y2RmZjhmYzdlZmNkZDBkNWRhZGNjYjkxZGNkMGQyIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9hPj4sIFdpbGwgV2FycmVuIC0gPDxhIGhyZWY9Ii9jZG4tY2dpL2wvZW1haWwtcHJvdGVjdGlvbiIgY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSJkMmE1YmJiZWJlOTJlMmFhODJhMGJkYjhiN2IxYTZmY2IxYmRiZiI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT4+CmNvbnRyYWN0IFRva2VuVHJhbnNmZXJQcm94eSBpcyBPd25hYmxlIHsKCiAgICAvLy8gQGRldiBPbmx5IGF1dGhvcml6ZWQgYWRkcmVzc2VzIGNhbiBpbnZva2UgZnVuY3Rpb25zIHdpdGggdGhpcyBtb2RpZmllci4KICAgIG1vZGlmaWVyIG9ubHlBdXRob3JpemVkIHsKICAgICAgICByZXF1aXJlKGF1dGhvcml6ZWRbbXNnLnNlbmRlcl0pOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdGFyZ2V0QXV0aG9yaXplZChhZGRyZXNzIHRhcmdldCkgewogICAgICAgIHJlcXVpcmUoYXV0aG9yaXplZFt0YXJnZXRdKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIHRhcmdldE5vdEF1dGhvcml6ZWQoYWRkcmVzcyB0YXJnZXQpIHsKICAgICAgICByZXF1aXJlKCFhdXRob3JpemVkW3RhcmdldF0pOwogICAgICAgIF87CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgYXV0aG9yaXplZDsKICAgIGFkZHJlc3NbXSBwdWJsaWMgYXV0aG9yaXRpZXM7CgogICAgZXZlbnQgTG9nQXV0aG9yaXplZEFkZHJlc3NBZGRlZChhZGRyZXNzIGluZGV4ZWQgdGFyZ2V0LCBhZGRyZXNzIGluZGV4ZWQgY2FsbGVyKTsKICAgIGV2ZW50IExvZ0F1dGhvcml6ZWRBZGRyZXNzUmVtb3ZlZChhZGRyZXNzIGluZGV4ZWQgdGFyZ2V0LCBhZGRyZXNzIGluZGV4ZWQgY2FsbGVyKTsKCiAgICAvKgogICAgICogUHVibGljIGZ1bmN0aW9ucwogICAgICovCgogICAgLy8vIEBkZXYgQXV0aG9yaXplcyBhbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSB0YXJnZXQgQWRkcmVzcyB0byBhdXRob3JpemUuCiAgICBmdW5jdGlvbiBhZGRBdXRob3JpemVkQWRkcmVzcyhhZGRyZXNzIHRhcmdldCkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5T3duZXIKICAgICAgICB0YXJnZXROb3RBdXRob3JpemVkKHRhcmdldCkKICAgIHsKICAgICAgICBhdXRob3JpemVkW3RhcmdldF0gPSB0cnVlOwogICAgICAgIGF1dGhvcml0aWVzLnB1c2godGFyZ2V0KTsKICAgICAgICBMb2dBdXRob3JpemVkQWRkcmVzc0FkZGVkKHRhcmdldCwgbXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBkZXYgUmVtb3ZlcyBhdXRob3JpemlvbiBvZiBhbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSB0YXJnZXQgQWRkcmVzcyB0byByZW1vdmUgYXV0aG9yaXphdGlvbiBmcm9tLgogICAgZnVuY3Rpb24gcmVtb3ZlQXV0aG9yaXplZEFkZHJlc3MoYWRkcmVzcyB0YXJnZXQpCiAgICAgICAgcHVibGljCiAgICAgICAgb25seU93bmVyCiAgICAgICAgdGFyZ2V0QXV0aG9yaXplZCh0YXJnZXQpCiAgICB7CiAgICAgICAgZGVsZXRlIGF1dGhvcml6ZWRbdGFyZ2V0XTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhdXRob3JpdGllcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoYXV0aG9yaXRpZXNbaV0gPT0gdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICBhdXRob3JpdGllc1tpXSA9IGF1dGhvcml0aWVzW2F1dGhvcml0aWVzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgYXV0aG9yaXRpZXMubGVuZ3RoIC09IDE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBMb2dBdXRob3JpemVkQWRkcmVzc1JlbW92ZWQodGFyZ2V0LCBtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBDYWxscyBpbnRvIEVSQzIwIFRva2VuIGNvbnRyYWN0LCBpbnZva2luZyB0cmFuc2ZlckZyb20uCiAgICAvLy8gQHBhcmFtIHRva2VuIEFkZHJlc3Mgb2YgdG9rZW4gdG8gdHJhbnNmZXIuCiAgICAvLy8gQHBhcmFtIGZyb20gQWRkcmVzcyB0byB0cmFuc2ZlciB0b2tlbiBmcm9tLgogICAgLy8vIEBwYXJhbSB0byBBZGRyZXNzIHRvIHRyYW5zZmVyIHRva2VuIHRvLgogICAgLy8vIEBwYXJhbSB2YWx1ZSBBbW91bnQgb2YgdG9rZW4gdG8gdHJhbnNmZXIuCiAgICAvLy8gQHJldHVybiBTdWNjZXNzIG9mIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgICAgIGFkZHJlc3MgdG9rZW4sCiAgICAgICAgYWRkcmVzcyBmcm9tLAogICAgICAgIGFkZHJlc3MgdG8sCiAgICAgICAgdWludCB2YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICBvbmx5QXV0aG9yaXplZAogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIFRva2VuKHRva2VuKS50cmFuc2ZlckZyb20oZnJvbSwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvKgogICAgICogUHVibGljIGNvbnN0YW50IGZ1bmN0aW9ucwogICAgICovCgogICAgLy8vIEBkZXYgR2V0cyBhbGwgYXV0aG9yaXplZCBhZGRyZXNzZXMuCiAgICAvLy8gQHJldHVybiBBcnJheSBvZiBhdXRob3JpemVkIGFkZHJlc3Nlcy4KICAgIGZ1bmN0aW9uIGdldEF1dGhvcml6ZWRBZGRyZXNzZXMoKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAoYWRkcmVzc1tdKQogICAgewogICAgICAgIHJldHVybiBhdXRob3JpdGllczsKICAgIH0KfQ=='.
	

]
