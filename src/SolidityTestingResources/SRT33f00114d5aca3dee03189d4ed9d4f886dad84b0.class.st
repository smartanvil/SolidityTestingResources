Class {
	#name : #SRT33f00114d5aca3dee03189d4ed9d4f886dad84b0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT33f00114d5aca3dee03189d4ed9d4f886dad84b0 >> base64 [
	^ ''.
	

]
