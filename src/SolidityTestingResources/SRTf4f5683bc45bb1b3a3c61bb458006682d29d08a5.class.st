Class {
	#name : #SRTf4f5683bc45bb1b3a3c61bb458006682d29d08a5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf4f5683bc45bb1b3a3c61bb458006682d29d08a5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKY29udHJhY3QgT3duZWQgewogICAgYWRkcmVzcyBvd25lcjsKCiAgICBtb2RpZmllciBvbmx5b3duZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsKICAgICAgICAgICAgXzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQp9CgoKY29udHJhY3QgTW9ydGFsIGlzIE93bmVkIHsKICAgIAogICAgZnVuY3Rpb24ga2lsbCgpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikKICAgICAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgIH0KfQoKCmNvbnRyYWN0IFNsb3R0aGVyZXVtIGlzIE1vcnRhbCB7CgogICAgR2FtZVtdIHB1YmxpYyBnYW1lczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnYW1lcwogICAgdWludCBwdWJsaWMgbnVtYmVyT2ZHYW1lcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZ2FtZXMKICAgIHVpbnQgcHJpdmF0ZSBtaW5CZXRBbW91bnQgPSAxOyAgICAgICAgICAgICAgICAgICAgLy8gbWluaW11bSBhbW91bnQgcGVyIGJldAogICAgdWludCBwcml2YXRlIG1heEJldEFtb3VudCA9IDUwMDAwMDAwMDAwMDAwMDAwMDA7ICAvLyBtYXhpbXVtIGFtb3VudCBwZXIgYmV0CiAgICB1aW50OCBwcml2YXRlIHBvaW50ZXIgPSAxOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJsb2NrIHBvaW50ZXIKCiAgICBzdHJ1Y3QgR2FtZSB7CiAgICAgICAgYWRkcmVzcyBwbGF5ZXI7CiAgICAgICAgdWludCBpZDsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICB1aW50OCBzdGFydDsKICAgICAgICB1aW50OCBlbmQ7CiAgICAgICAgYnl0ZXMzMiBoYXNoOwogICAgICAgIHVpbnQ4IG51bWJlcjsKICAgICAgICBib29sIHdpbjsKICAgICAgICB1aW50IHByaXplOwogICAgfQoKICAgIGV2ZW50IE1pbkJldEFtb3VudENoYW5nZWQodWludCBhbW91bnQpOwogICAgZXZlbnQgTWF4QmV0QW1vdW50Q2hhbmdlZCh1aW50IGFtb3VudCk7CgogICAgZXZlbnQgR2FtZVdpbigKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQgaW5kZXhlZCBnYW1lSWQsCiAgICAgICAgdWludDggc3RhcnQsCiAgICAgICAgdWludDggZW5kLAogICAgICAgIHVpbnQ4IG51bWJlciwKICAgICAgICB1aW50IGFtb3VudCwKICAgICAgICB1aW50IHByaXplCiAgICApOwoKICAgIGV2ZW50IEdhbWVMb29zZSgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQgaW5kZXhlZCBnYW1lSWQsCiAgICAgICAgdWludDggc3RhcnQsCiAgICAgICAgdWludDggZW5kLAogICAgICAgIHVpbnQ4IG51bWJlciwKICAgICAgICB1aW50IGFtb3VudCwKICAgICAgICB1aW50IHByaXplCiAgICApOwoKICAgIGZ1bmN0aW9uIG5vdGlmeShhZGRyZXNzIHBsYXllciwgdWludCBnYW1lSWQsIHVpbnQ4IHN0YXJ0LCB1aW50OCBlbmQsIHVpbnQ4IG51bWJlciwgdWludCBhbW91bnQsIHVpbnQgcHJpemUsIGJvb2wgd2luKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHdpbikgewogICAgICAgICAgICBHYW1lV2luKAogICAgICAgICAgICAgICAgcGxheWVyLAogICAgICAgICAgICAgICAgZ2FtZUlkLAogICAgICAgICAgICAgICAgc3RhcnQsCiAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICBudW1iZXIsCiAgICAgICAgICAgICAgICBhbW91bnQsCiAgICAgICAgICAgICAgICBwcml6ZQogICAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEdhbWVMb29zZSgKICAgICAgICAgICAgICAgIHBsYXllciwKICAgICAgICAgICAgICAgIGdhbWVJZCwKICAgICAgICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgbnVtYmVyLAogICAgICAgICAgICAgICAgYW1vdW50LAogICAgICAgICAgICAgICAgcHJpemUKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QmxvY2tIYXNoKHVpbnQgaSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMiBibG9ja0hhc2gpIHsKICAgICAgICBpZiAoaSA+IDI1NSkgewogICAgICAgICAgICBpID0gMjU1OwogICAgICAgIH0KICAgICAgICBpZiAoaSA8IDApIHsKICAgICAgICAgICAgaSA9IDE7CiAgICAgICAgfQogICAgICAgIGJsb2NrSGFzaCA9IGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXROdW1iZXIoYnl0ZXMzMiBfYSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICB1aW50OCBtaW50ID0gcG9pbnRlcjsKICAgICAgICBmb3IgKHVpbnQgaSA9IDMxOyBpID49IDE7IGktLSkgewogICAgICAgICAgICBpZiAoKHVpbnQ4KF9hW2ldKSA+PSA0OCkgJiYgKHVpbnQ4KF9hW2ldKSA8PSA1NykpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OChfYVtpXSkgLSA0ODsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbWludDsKICAgIH0KCiAgICBmdW5jdGlvbiBwbGFjZUJldCh1aW50OCBzdGFydCwgdWludDggZW5kKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IG1pbkJldEFtb3VudCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAobXNnLnZhbHVlID4gbWF4QmV0QW1vdW50KSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHVpbnQ4IGNvdW50ZXIgPSBlbmQgLSBzdGFydCArIDE7CgogICAgICAgIGlmIChjb3VudGVyID4gOSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoY291bnRlciA8IDEpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdWludCBnYW1lSWQgPSBnYW1lcy5sZW5ndGg7CiAgICAgICAgZ2FtZXMubGVuZ3RoICs9IDE7CgogICAgICAgIGdhbWVzW2dhbWVJZF0uaWQgPSBnYW1lSWQ7CiAgICAgICAgZ2FtZXNbZ2FtZUlkXS5wbGF5ZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGdhbWVzW2dhbWVJZF0uYW1vdW50ID0gbXNnLnZhbHVlOwogICAgICAgIGdhbWVzW2dhbWVJZF0uc3RhcnQgPSBzdGFydDsKICAgICAgICBnYW1lc1tnYW1lSWRdLmVuZCA9IGVuZDsKICAgICAgICBnYW1lc1tnYW1lSWRdLmhhc2ggPSBnZXRCbG9ja0hhc2gocG9pbnRlcik7CiAgICAgICAgZ2FtZXNbZ2FtZUlkXS5udW1iZXIgPSBnZXROdW1iZXIoZ2FtZXNbZ2FtZUlkXS5oYXNoKTsKICAgICAgICBwb2ludGVyID0gZ2FtZXNbZ2FtZUlkXS5udW1iZXI7CgogICAgICAgIGlmICgoZ2FtZXNbZ2FtZUlkXS5udW1iZXIgPj0gc3RhcnQpICYmIChnYW1lc1tnYW1lSWRdLm51bWJlciA8PSBlbmQpKSB7CiAgICAgICAgICAgIGdhbWVzW2dhbWVJZF0ud2luID0gdHJ1ZTsKICAgICAgICAgICAgdWludCBkZWMgPSBtc2cudmFsdWUgLyAxMDsKICAgICAgICAgICAgdWludCBwYXJ0cyA9IDEwIC0gY291bnRlcjsKICAgICAgICAgICAgZ2FtZXNbZ2FtZUlkXS5wcml6ZSA9IG1zZy52YWx1ZSArIGRlYyAqIHBhcnRzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdhbWVzW2dhbWVJZF0ucHJpemUgPSAxOwogICAgICAgIH0KCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihnYW1lc1tnYW1lSWRdLnByaXplKTsKCiAgICAgICAgbm90aWZ5KAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBnYW1lSWQsCiAgICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgICBlbmQsCiAgICAgICAgICAgIGdhbWVzW2dhbWVJZF0ubnVtYmVyLAogICAgICAgICAgICBtc2cudmFsdWUsCiAgICAgICAgICAgIGdhbWVzW2dhbWVJZF0ucHJpemUsCiAgICAgICAgICAgIGdhbWVzW2dhbWVJZF0ud2luCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWluQmV0QW1vdW50KHVpbnQgX21pbkJldEFtb3VudCkgb25seW93bmVyIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBtaW5CZXRBbW91bnQgPSBfbWluQmV0QW1vdW50OwogICAgICAgIE1pbkJldEFtb3VudENoYW5nZWQobWluQmV0QW1vdW50KTsKICAgICAgICByZXR1cm4gbWluQmV0QW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIHNldE1heEJldEFtb3VudCh1aW50IF9tYXhCZXRBbW91bnQpIG9ubHlvd25lciByZXR1cm5zICh1aW50KSB7CiAgICAgICAgbWF4QmV0QW1vdW50ID0gX21heEJldEFtb3VudDsKICAgICAgICBNYXhCZXRBbW91bnRDaGFuZ2VkKG1heEJldEFtb3VudCk7CiAgICAgICAgcmV0dXJuIG1heEJldEFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lSWRzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50W10pIHsKICAgICAgICB1aW50W10gbWVtb3J5IGlkcyA9IG5ldyB1aW50W10oZ2FtZXMubGVuZ3RoKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBnYW1lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZHNbaV0gPSBnYW1lc1tpXS5pZDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlkczsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lUGxheWVyKHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKGFkZHJlc3MpIHsKICAgICAgICByZXR1cm4gZ2FtZXNbZ2FtZUlkXS5wbGF5ZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZUFtb3VudCh1aW50IGdhbWVJZCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIGdhbWVzW2dhbWVJZF0uYW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVTdGFydCh1aW50IGdhbWVJZCkgY29uc3RhbnQgcmV0dXJucyh1aW50OCkgewogICAgICAgIHJldHVybiBnYW1lc1tnYW1lSWRdLnN0YXJ0OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVFbmQodWludCBnYW1lSWQpIGNvbnN0YW50IHJldHVybnModWludDgpIHsKICAgICAgICByZXR1cm4gZ2FtZXNbZ2FtZUlkXS5lbmQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZUhhc2godWludCBnYW1lSWQpIGNvbnN0YW50IHJldHVybnMoYnl0ZXMzMikgewogICAgICAgIHJldHVybiBnYW1lc1tnYW1lSWRdLmhhc2g7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZU51bWJlcih1aW50IGdhbWVJZCkgY29uc3RhbnQgcmV0dXJucyh1aW50OCkgewogICAgICAgIHJldHVybiBnYW1lc1tnYW1lSWRdLm51bWJlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lV2luKHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXR1cm4gZ2FtZXNbZ2FtZUlkXS53aW47CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZVByaXplKHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gZ2FtZXNbZ2FtZUlkXS5wcml6ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNaW5CZXRBbW91bnQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gbWluQmV0QW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldE1heEJldEFtb3VudCgpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBtYXhCZXRBbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICB9Cn0='.
	

]
