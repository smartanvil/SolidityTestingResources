Class {
	#name : #SRTfacc5b21597487575667dde047fc6e5d58bdae55,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfacc5b21597487575667dde047fc6e5d58bdae55 >> base64 [
	^ ''.
	

]
