Class {
	#name : #SRTefc6d9d05d41134b1f44b379e319079ef2855edb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTefc6d9d05d41134b1f44b379e319079ef2855edb >> base64 [
	^ ''.
	

]
