Class {
	#name : #SRT8815dfae43dd8f6e772cb700b4721d1deab0fac0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8815dfae43dd8f6e772cb700b4721d1deab0fac0 >> base64 [
	^ ''.
	

]
