Class {
	#name : #SRT2d1ea57f68e430da2e693db0c6a3887a705aed69,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2d1ea57f68e430da2e693db0c6a3887a705aed69 >> base64 [
	^ ''.
	

]
