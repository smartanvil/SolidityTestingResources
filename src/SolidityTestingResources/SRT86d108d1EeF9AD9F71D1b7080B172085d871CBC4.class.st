Class {
	#name : #SRT86d108d1EeF9AD9F71D1b7080B172085d871CBC4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT86d108d1EeF9AD9F71D1b7080B172085d871CBC4 >> base64 [
	^ ''.
	

]
