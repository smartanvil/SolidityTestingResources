Class {
	#name : #SRTba54a9aa2a711883aa5fc87ae9e7127ba405dac9,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTba54a9aa2a711883aa5fc87ae9e7127ba405dac9 >> base64 [
	^ ''.
	

]
