Class {
	#name : #SRT03ad838d4d962fa6b187dc10e8513e595a32f889,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT03ad838d4d962fa6b187dc10e8513e595a32f889 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBLZXRoZXJIb21lcGFnZSB7CiAgICAvLy8gQnV5IGlzIGVtaXR0ZWQgd2hlbiBhbiBhZCB1bml0IGlzIHJlc2VydmVkLgogICAgZXZlbnQgQnV5KAogICAgICAgIHVpbnQgaW5kZXhlZCBpZHgsCiAgICAgICAgYWRkcmVzcyBvd25lciwKICAgICAgICB1aW50IHgsCiAgICAgICAgdWludCB5LAogICAgICAgIHVpbnQgd2lkdGgsCiAgICAgICAgdWludCBoZWlnaHQKICAgICk7CgogICAgLy8vIFB1Ymxpc2ggaXMgZW1pdHRlZCB3aGVuZXZlciB0aGUgY29udGVudHMgb2YgYW4gYWQgaXMgY2hhbmdlZC4KICAgIGV2ZW50IFB1Ymxpc2goCiAgICAgICAgdWludCBpbmRleGVkIGlkeCwKICAgICAgICBzdHJpbmcgbGluaywKICAgICAgICBzdHJpbmcgaW1hZ2UsCiAgICAgICAgc3RyaW5nIHRpdGxlLAogICAgICAgIGJvb2wgTlNGVwogICAgKTsKCiAgICAvLy8gU2V0QWRPd25lciBpcyBlbWl0dGVkIHdoZW5ldmVyIHRoZSBvd25lcnNoaXAgb2YgYW4gYWQgaXMgdHJhbnNmZXJlZAogICAgZXZlbnQgU2V0QWRPd25lcigKICAgICAgICB1aW50IGluZGV4ZWQgaWR4LAogICAgICAgIGFkZHJlc3MgZnJvbSwKICAgICAgICBhZGRyZXNzIHRvCiAgICApOwoKICAgIC8vLyBQcmljZSBpcyAxIGtldGhlciBkaXZpZGVkIGJ5IDEsMDAwLDAwMCBwaXhlbHMKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IHdlaVBpeGVsUHJpY2UgPSAxMDAwMDAwMDAwMDAwMDAwOwoKICAgIC8vLyBFYWNoIGdyaWQgY2VsbCByZXByZXNlbnRzIDEwMCBwaXhlbHMgKDEweDEwKS4KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IHBpeGVsc1BlckNlbGwgPSAxMDA7CgogICAgYm9vbFsxMDBdWzEwMF0gcHVibGljIGdyaWQ7CgogICAgLy8vIGNvbnRyYWN0T3duZXIgY2FuIHdpdGhkcmF3IHRoZSBmdW5kcyBhbmQgb3ZlcnJpZGUgTlNGVyBzdGF0dXMgb2YgYWQgdW5pdHMuCiAgICBhZGRyZXNzIGNvbnRyYWN0T3duZXI7CgogICAgLy8vIHdpdGhkcmF3V2FsbGV0IGlzIHRoZSBmaXhlZCBkZXN0aW5hdGlvbiBvZiBmdW5kcyB0byB3aXRoZHJhdy4gSXQgaXMKICAgIC8vLyBzZXBhcmF0ZSBmcm9tIGNvbnRyYWN0T3duZXIgdG8gYWxsb3cgZm9yIGEgY29sZCBzdG9yYWdlIGRlc3RpbmF0aW9uLgogICAgYWRkcmVzcyB3aXRoZHJhd1dhbGxldDsKCiAgICBzdHJ1Y3QgQWQgewogICAgICAgIGFkZHJlc3Mgb3duZXI7CiAgICAgICAgdWludCB4OwogICAgICAgIHVpbnQgeTsKICAgICAgICB1aW50IHdpZHRoOwogICAgICAgIHVpbnQgaGVpZ2h0OwogICAgICAgIHN0cmluZyBsaW5rOwogICAgICAgIHN0cmluZyBpbWFnZTsKICAgICAgICBzdHJpbmcgdGl0bGU7CgogICAgICAgIC8vLyBOU0ZXIGlzIHdoZXRoZXIgdGhlIGFkIGlzIHN1aXRhYmxlIGZvciBwZW9wbGUgb2YgYWxsCiAgICAgICAgLy8vIGFnZXMgYW5kIHdvcmtwbGFjZXMuCiAgICAgICAgYm9vbCBOU0ZXOwogICAgICAgIC8vLyBmb3JjZU5TRlcgY2FuIGJlIHNldCBieSBvd25lci4KICAgICAgICBib29sIGZvcmNlTlNGVzsKICAgIH0KCiAgICAvLy8gYWRzIGFyZSBzdG9yZWQgaW4gYW4gYXJyYXksIHRoZSBpZCBvZiBhbiBhZCBpcyBpdHMgaW5kZXggaW4gdGhpcyBhcnJheS4KICAgIEFkW10gcHVibGljIGFkczsKCiAgICBmdW5jdGlvbiBLZXRoZXJIb21lcGFnZShhZGRyZXNzIF9jb250cmFjdE93bmVyLCBhZGRyZXNzIF93aXRoZHJhd1dhbGxldClwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX2NvbnRyYWN0T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfd2l0aGRyYXdXYWxsZXQgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNvbnRyYWN0T3duZXIgPSBfY29udHJhY3RPd25lcjsKICAgICAgICB3aXRoZHJhd1dhbGxldCA9IF93aXRoZHJhd1dhbGxldDsKICAgIH0KCiAgICAvLy8gZ2V0QWRzTGVuZ3RoIHRlbGxzIHlvdSBob3cgbWFueSBhZHMgdGhlcmUgYXJlCiAgICBmdW5jdGlvbiBnZXRBZHNMZW5ndGgoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBhZHMubGVuZ3RoOwogICAgfQogICAgLy90byBnZXQgdGhlIGNvbnRyYWN0IG93bmVyIGFkZHJlc3MKICAgIGZ1bmN0aW9uICBnZXRDb250cmFjdE93bmVyKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGFkZHJlc3MpewogICAgICAgIHJldHVybiBjb250cmFjdE93bmVyOwogICAgfQoKICAgIC8vdG8gZ2V0IHRoZSB3aXRoZHJhd2FsIGFkZHJlc3MKICAgIGZ1bmN0aW9uIGdldFdpdGhkcmF3YWxBZGRyZXNzKCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKGFkZHJlc3MpewogICAgICAgIHJldHVybiB3aXRoZHJhd1dhbGxldDsKICAgIH0KICAgIC8vLyBBZHMgbXVzdCBiZSBwdXJjaGFzZWQgaW4gMTB4MTAgcGl4ZWwgYmxvY2tzLgogICAgLy8vIEVhY2ggY29vcmRpbmF0ZSByZXByZXNlbnRzIDEwIHBpeGVscy4gVGhhdCBpcywKICAgIC8vLyAgIF94PTUsIF95PTEwLCBfd2lkdGg9MywgX2hlaWdodD0zCiAgICAvLy8gUmVwcmVzZW50cyBhIDMweDMwIHBpeGVsIGFkIGF0IGNvb3JkaW5hdGVzICg1MCwgMTAwKQogICAgZnVuY3Rpb24gYnV5KHVpbnQgX3gsIHVpbnQgX3ksIHVpbnQgX3dpZHRoLCB1aW50IF9oZWlnaHQpIHBheWFibGUgcHVibGljIHJldHVybnMgKHVpbnQgaWR4KSB7CiAgICAgICAgdWludCBjb3N0ID0gX3dpZHRoICogX2hlaWdodCAqIHBpeGVsc1BlckNlbGwgKiB3ZWlQaXhlbFByaWNlOwogICAgICAgIHJlcXVpcmUoY29zdCA+IDApOwogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IGNvc3QpOwoKICAgICAgIGlkeCA9IGFkZEFkKF94LCBfeSwgX3dpZHRoLCBfaGVpZ2h0KTsKICAgICAgICAKICAgICAgICByZXR1cm4gaWR4OwogICAgfQoKICAvLy8gQWRzIG11c3QgYmUgcHVyY2hhc2VkIGluIDEweDEwIHBpeGVsIGJsb2Nrcy4KICAgIC8vLyBFYWNoIGNvb3JkaW5hdGUgcmVwcmVzZW50cyAxMCBwaXhlbHMuIFRoYXQgaXMsCiAgICAvLy8gICBfeD01LCBfeT0xMCwgX3dpZHRoPTMsIF9oZWlnaHQ9MwogICAgLy8vIFJlcHJlc2VudHMgYSAzMHgzMCBwaXhlbCBhZCBhdCBjb29yZGluYXRlcyAoNTAsIDEwMCkKICAgIC8vIGFkZCByZXNlcnZlZCBieSBvd25lcgogICAgLy9ub3QgcGF5YWJsZQogICAgZnVuY3Rpb24gcmVzZXJ2ZUFkZCh1aW50IF94LCB1aW50IF95LCB1aW50IF93aWR0aCwgdWludCBfaGVpZ2h0KSBwdWJsaWMgcmV0dXJucyAodWludCBpZHgpIHsKICAgICAgICByZXF1aXJlKGNvbnRyYWN0T3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICAgICAgCiAgICAgICAgaWR4ID0gYWRkQWQoX3gsIF95LCBfd2lkdGgsIF9oZWlnaHQpOwogICAgICAgIAogICAgICAgIHJldHVybiBpZHg7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQWQodWludCBfeCwgdWludCBfeSwgdWludCBfd2lkdGgsIHVpbnQgX2hlaWdodClwcml2YXRlIHJldHVybnModWludCBpZHgpewogICAgICAgIC8vIExvb3Agb3ZlciByZWxldmFudCBncmlkIGVudHJpZXMKICAgICAgICBmb3IodWludCBpPTA7IGk8X3dpZHRoOyBpKyspIHsKICAgICAgICAgICAgZm9yKHVpbnQgaj0wOyBqPF9oZWlnaHQ7IGorKykgewogICAgICAgICAgICAgICAgaWYgKGdyaWRbX3graV1bX3kral0pIHsKICAgICAgICAgICAgICAgICAgICAvLyBBbHJlYWR5IHRha2VuLCB1bmRvLgogICAgICAgICAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ3JpZFtfeCtpXVtfeStqXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFdlIHJlc2VydmVkIHNwYWNlIGluIHRoZSBncmlkLCBub3cgbWFrZSBhIHBsYWNlaG9sZGVyIGVudHJ5LgogICAgICAgIEFkIG1lbW9yeSBhZCA9IEFkKG1zZy5zZW5kZXIsIF94LCBfeSwgX3dpZHRoLCBfaGVpZ2h0LCAiIiwgIiIsICIiLCBmYWxzZSwgZmFsc2UpOwogICAgICAgIGlkeCA9IGFkcy5wdXNoKGFkKSAtIDE7CiAgICAgICAgQnV5KGlkeCwgbXNnLnNlbmRlciwgX3gsIF95LCBfd2lkdGgsIF9oZWlnaHQpOwogICAgICAgIHJldHVybiBpZHg7CiAgICB9CiAgICAKICAgIC8vLyBQdWJsaXNoIGFsbG93cyBmb3Igc2V0dGluZyB0aGUgbGluaywgaW1hZ2UsIGFuZCBOU0ZXIHN0YXR1cyBmb3IgdGhlIGFkCiAgICAvLy8gdW5pdCB0aGF0IGlzIGlkZW50aWZpZWQgYnkgdGhlIGlkeCB3aGljaCB3YXMgcmV0dXJuZWQgZHVyaW5nIHRoZSBidXkgc3RlcC4KICAgIC8vLyBUaGUgbGluayBhbmQgaW1hZ2UgbXVzdCBiZSBmdWxsIHdlYjMtcmVjb2duaXplYWJsZSBVUkxzLCBzdWNoIGFzOgogICAgLy8vICAtIGJ6ejovL2E1YzEwODUxZWYwNTRjMjY4YTI0MzhmMTBhMjFmNmVmZTNkYzNkY2RjYzJlYTBlNmExYTdhMzhiZjhjOTFlMjMKICAgIC8vLyAgLSBieno6Ly9teWRvbWFpbi5ldGgvYWQucG5nCiAgICAvLy8gIC0gaHR0cHM6Ly9jZG4ubXlkb21haW4uY29tL2FkLnBuZwogICAgLy8vIEltYWdlcyBzaG91bGQgYmUgdmFsaWQgUE5HLgogICAgCiAgICBmdW5jdGlvbiBwdWJsaXNoKHVpbnQgX2lkeCwgc3RyaW5nIF9saW5rLCBzdHJpbmcgX2ltYWdlLCBzdHJpbmcgX3RpdGxlLCBib29sIF9OU0ZXKSBwdWJsaWN7CiAgICAgICAgQWQgc3RvcmFnZSBhZCA9IGFkc1tfaWR4XTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWQub3duZXIpOwogICAgICAgIGFkLmxpbmsgPSBfbGluazsKICAgICAgICBhZC5pbWFnZSA9IF9pbWFnZTsKICAgICAgICBhZC50aXRsZSA9IF90aXRsZTsKICAgICAgICBhZC5OU0ZXID0gX05TRlc7CgogICAgICAgIFB1Ymxpc2goX2lkeCwgYWQubGluaywgYWQuaW1hZ2UsIGFkLnRpdGxlLCBhZC5OU0ZXIHx8IGFkLmZvcmNlTlNGVyk7CiAgICB9CgogICAgLy8vIHNldEFkT3duZXIgY2hhbmdlcyB0aGUgb3duZXIgb2YgYW4gYWQgdW5pdAogICAgZnVuY3Rpb24gc2V0QWRPd25lcih1aW50IF9pZHgsIGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWN7CiAgICAgICAgQWQgc3RvcmFnZSBhZCA9IGFkc1tfaWR4XTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWQub3duZXIpOwogICAgICAgIGFkLm93bmVyID0gX25ld093bmVyOwoKICAgICAgICBTZXRBZE93bmVyKF9pZHgsIG1zZy5zZW5kZXIsIF9uZXdPd25lcik7CiAgICB9CgogICAgLy8vIGZvcmNlTlNGVyBhbGxvd3MgdGhlIG93bmVyIHRvIG92ZXJyaWRlIHRoZSBOU0ZXIHN0YXR1cyBmb3IgYSBzcGVjaWZpYyBhZCB1bml0LgogICAgZnVuY3Rpb24gZm9yY2VOU0ZXKHVpbnQgX2lkeCwgYm9vbCBfTlNGVykgcHVibGljewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjb250cmFjdE93bmVyKTsKICAgICAgICBBZCBzdG9yYWdlIGFkID0gYWRzW19pZHhdOwogICAgICAgIGFkLmZvcmNlTlNGVyA9IF9OU0ZXOwoKICAgICAgICBQdWJsaXNoKF9pZHgsIGFkLmxpbmssIGFkLmltYWdlLCBhZC50aXRsZSwgYWQuTlNGVyB8fCBhZC5mb3JjZU5TRlcpOwogICAgfQoKICAgIC8vLyB3aXRoZHJhdyBhbGxvd3MgdGhlIG93bmVyIHRvIHRyYW5zZmVyIG91dCB0aGUgYmFsYW5jZSBvZiB0aGUgY29udHJhY3QuCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIHB1YmxpY3sKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29udHJhY3RPd25lcik7CiAgICAgICAgd2l0aGRyYXdXYWxsZXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KfQ=='.
	

]
