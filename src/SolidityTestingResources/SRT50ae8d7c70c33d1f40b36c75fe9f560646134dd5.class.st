Class {
	#name : #SRT50ae8d7c70c33d1f40b36c75fe9f560646134dd5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT50ae8d7c70c33d1f40b36c75fe9f560646134dd5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKY29udHJhY3Qgb3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgZnVuY3Rpb24gb3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgfQp9Cgpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOyB9Cgpjb250cmFjdCBTd2FwVG9rZW4gaXMgb3duZWQgewogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KICAgIAogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdUb2tlbiAwLjEnOwoKICAgIC8vIGJ1eWVyIHRva2VucwogICAgc3RyaW5nIHB1YmxpYyBidXllclRva2VuTmFtZTsKICAgIHN0cmluZyBwdWJsaWMgYnV5ZXJTeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgYnV5ZXJEZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsQnV5ZXJTdXBwbHk7CiAgICAKICAgIC8vIGlzc3VlciB0b2tlbnMKICAgIHN0cmluZyBwdWJsaWMgaXNzdWVyVG9rZW5OYW1lOwogICAgc3RyaW5nIHB1YmxpYyBpc3N1ZXJTeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgaXNzdWVyRGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbElzc3VlclN1cHBseTsKICAgIAogICAgLy8gbW9yZSB2YXJpYWJsZXMKICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOwogICAgdWludDI1NiBwdWJsaWMgaXNzdWVQcmljZTsKICAgIGFkZHJlc3MgcHVibGljIHByb2plY3Rfd2FsbGV0OwogICAgYWRkcmVzcyBwdWJsaWMgY29sbGVjdGlvbkZ1bmRzOwogICAgdWludCBwdWJsaWMgc3RhcnRCbG9jazsKICAgIHVpbnQgcHVibGljIGVuZEJsb2NrOwogICAgCiAgICAvKiBTZXRzIHRoZSBjb25zdHJ1Y3RvciB2YXJpYWJsZXMgKi8KICAgIGZ1bmN0aW9uIFN3YXBUb2tlbigKICAgICAgICBzdHJpbmcgX2J1eWVyVG9rZW5OYW1lLAogICAgICAgIHN0cmluZyBfYnV5ZXJTeW1ib2wsCiAgICAgICAgdWludDggX2J1eWVyRGVjaW1hbHMsCiAgICAgICAgc3RyaW5nIF9pc3N1ZXJUb2tlbk5hbWUsCiAgICAgICAgc3RyaW5nIF9pc3N1ZXJTeW1ib2wsCiAgICAgICAgdWludDggX2lzc3VlckRlY2ltYWxzLAogICAgICAgIGFkZHJlc3MgX2NvbGxlY3Rpb25GdW5kcywKICAgICAgICB1aW50IF9zdGFydEJsb2NrLAogICAgICAgIHVpbnQgX2VuZEJsb2NrCiAgICAgICAgKSB7CiAgICAgICAgYnV5ZXJUb2tlbk5hbWUgPSBfYnV5ZXJUb2tlbk5hbWU7CiAgICAgICAgYnV5ZXJTeW1ib2wgPSBfYnV5ZXJTeW1ib2w7CiAgICAgICAgYnV5ZXJEZWNpbWFscyA9IF9idXllckRlY2ltYWxzOwogICAgICAgIGlzc3VlclRva2VuTmFtZSA9IF9pc3N1ZXJUb2tlbk5hbWU7CiAgICAgICAgaXNzdWVyU3ltYm9sID0gX2lzc3VlclN5bWJvbDsKICAgICAgICBpc3N1ZXJEZWNpbWFscyA9IF9pc3N1ZXJEZWNpbWFsczsKICAgICAgICBjb2xsZWN0aW9uRnVuZHMgPSBfY29sbGVjdGlvbkZ1bmRzOwogICAgICAgIHN0YXJ0QmxvY2sgPSBfc3RhcnRCbG9jazsKICAgICAgICBlbmRCbG9jayA9IF9lbmRCbG9jazsKICAgIH0KCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZkJ1eWVyOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mSXNzdWVyOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOwoKICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CgogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0IAogICAgZnVuY3Rpb24gdG9rZW4oCiAgICAgICAgdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgIHN0cmluZyB0b2tlbk5hbWUsCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgIHN0cmluZyB0b2tlblN5bWJvbAogICAgICAgICkgewogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucwogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgbmFtZSA9IHRva2VuTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KICAgICovCiAgICAKICAgIC8qIENoZWNrIGlmIGNvbnRyYWN0IGhhcyBzdGFydGVkICovCiAgICBmdW5jdGlvbiBoYXNfY29udHJhY3Rfc3RhcnRlZCgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewoJICAgIHJldHVybiBibG9jay5udW1iZXIgPj0gc3RhcnRCbG9jazsKICAgIH0KICAgIAogICAgLyogQ2hlY2sgaWYgY29udHJhY3QgaGFzIGVuZGVkICovCiAgICBmdW5jdGlvbiBoYXNfY29udHJhY3RfZW5kZWQoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYmxvY2subnVtYmVyID4gZW5kQmxvY2s7CiAgICB9CiAgICAKICAgIC8qIFNldCBhIHByb2plY3QgV2FsbGV0ICovCiAgICBmdW5jdGlvbiBkZWZpbmVQcm9qZWN0V2FsbGV0KGFkZHJlc3MgdGFyZ2V0KSBvbmx5T3duZXIgewogICAgICAgIHByb2plY3Rfd2FsbGV0ID0gdGFyZ2V0OwogICAgfQogICAgCiAgICAvKiBNaW50IGNvaW5zICovCiAgICAKICAgIC8vIGJ1eWVyIHRva2VucwogICAgZnVuY3Rpb24gbWludEJ1eWVyVG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXIgewogICAgICAgIGJhbGFuY2VPZkJ1eWVyW3RhcmdldF0gKz0gbWludGVkQW1vdW50OwogICAgICAgIHRvdGFsQnV5ZXJTdXBwbHkgKz0gbWludGVkQW1vdW50OwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwogICAgfQogICAgCiAgICAvLyBpc3N1ZXIgdG9rZW5zCiAgICBmdW5jdGlvbiBtaW50SXNzdWVyVG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXIgewogICAgICAgIGJhbGFuY2VPZklzc3Vlclt0YXJnZXRdICs9IG1pbnRlZEFtb3VudDsKICAgICAgICB0b3RhbElzc3VlclN1cHBseSArPSBtaW50ZWRBbW91bnQ7CiAgICAgICAgVHJhbnNmZXIoMCwgdGhpcywgbWludGVkQW1vdW50KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7CiAgICB9CiAgICAKICAgIC8qIERpc3Ryb3kgY29pbnMgKi8KICAgIAogICAgLy8gRGlzdHJveSBidXllciBjb2lucyBmb3Igc2FsZSBpbiBjb250cmFjdCAKICAgIGZ1bmN0aW9uIGRpc3Ryb3lCdXllclRva2VuKHVpbnQyNTYgYnVybkFtb3VudCkgb25seU93bmVyIHsKICAgICAgICBiYWxhbmNlT2ZCdXllclt0aGlzXSAtPSBidXJuQW1vdW50OwogICAgICAgIHRvdGFsQnV5ZXJTdXBwbHkgLT0gYnVybkFtb3VudDsKICAgIH0KICAgIAogICAgLy8gRGlzdHJveSBpc3N1ZXIgY29pbnMgZm9yIHNhbGUgaW4gY29udHJhY3QKICAgIGZ1bmN0aW9uIGRpc3Ryb3lJc3N1ZXJUb2tlbih1aW50MjU2IGJ1cm5BbW91bnQpIG9ubHlPd25lciB7CiAgICAgICAgYmFsYW5jZU9mSXNzdWVyW3RoaXNdIC09IGJ1cm5BbW91bnQ7CiAgICAgICAgdG90YWxJc3N1ZXJTdXBwbHkgLT0gYnVybkFtb3VudDsKICAgIH0KCiAgICAvKiBTZW5kIGNvaW5zICovCiAgICAKICAgIC8vIHNlbmQgYnV5ZXIgY29pbnMKICAgIGZ1bmN0aW9uIHRyYW5zZmVyQnV5ZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZkJ1eWVyW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIGlmIChiYWxhbmNlT2ZCdXllcltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mQnV5ZXJbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MKICAgICAgICBiYWxhbmNlT2ZCdXllclttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mQnV5ZXJbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQogICAgfQogICAgCiAgICAvLyBzZW5kIGlzc3VlciBjb2lucwogICAgZnVuY3Rpb24gdHJhbnNmZXJJc3N1ZShhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsKICAgICAgICBpZiAoYmFsYW5jZU9mSXNzdWVyW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsKICAgICAgICBpZiAoYmFsYW5jZU9mSXNzdWVyW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZJc3N1ZXJbX3RvXSkgdGhyb3c7CiAgICAgICAgYmFsYW5jZU9mSXNzdWVyW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZJc3N1ZXJbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQogICAgCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbXVuaWNhdGUgdGhlIGFwcHJvdmVkIGNvbnRyYWN0IGluIGEgc2luZ2xlIHR4ICovCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2V4dHJhRGF0YSkKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsgICAgCiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsKICAgICAgICBpZiAoYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgewogICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zIAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VPZkJ1eWVyW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBpZiAoYmFsYW5jZU9mQnV5ZXJbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZkJ1eWVyW190b10pIHRocm93OyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICBiYWxhbmNlT2ZCdXllcltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mQnV5ZXJbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgICovCiAgICAKICAgIC8qIFNldCB0b2tlbiBwcmljZSAqLwogICAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3QnV5UHJpY2UsIHVpbnQyNTYgbmV3SXNzdWVQcmljZSkgb25seU93bmVyIHsKICAgICAgICBidXlQcmljZSA9IG5ld0J1eVByaWNlOwogICAgICAgIGlzc3VlUHJpY2UgPSBuZXdJc3N1ZVByaWNlOwogICAgfQoKICAgIC8qIEJ1eSB0b2tlbnMgKi8KICAgIAogICAgLy8gYnV5IGJ1eWVyIHRva2VucwogICAgZnVuY3Rpb24gYnV5QnV5ZXJUb2tlbnMoKSBwYXlhYmxlIHsKICAgICAgICBpZighaGFzX2NvbnRyYWN0X3N0YXJ0ZWQoKSkgdGhyb3c7ICAgICAgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIHRoZSBjb250cmFjdCBoYXMgc3RhcnRlZAogICAgICAgIGlmKGhhc19jb250cmFjdF9lbmRlZCgpKSB0aHJvdzsgICAgICAgICAgICAgICAgICAgICAvLyBjaGVja3MgaWYgdGhlIGNvbnRyYWN0IGhhcyBlbmRlZCAKICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZSAvIGJ1eVByaWNlOyAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVzIHRoZSBhbW91bnQKICAgICAgICBpZiAoYmFsYW5jZU9mQnV5ZXJbdGhpc10gPCBhbW91bnQpIHRocm93OyAgICAgICAgICAgICAgIC8vIGNoZWNrcyBpZiBpdCBoYXMgZW5vdWdoIHRvIHNlbGwKICAgICAgICBiYWxhbmNlT2ZCdXllclttc2cuc2VuZGVyXSArPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UKICAgICAgICBiYWxhbmNlT2ZCdXllclt0aGlzXSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSBhbiBldmVudCByZWZsZWN0aW5nIHRoZSBjaGFuZ2UKICAgIH0KICAgIAogICAgLy8gYnV5IGlzc3VlciB0b2tlbnMKICAgIGZ1bmN0aW9uIGJ1eUlzc3VlclRva2VucygpIHBheWFibGUgewogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlIC8gaXNzdWVQcmljZTsKICAgICAgICBpZiAoYmFsYW5jZU9mSXNzdWVyW3RoaXNdIDwgYW1vdW50KSB0aHJvdzsKICAgICAgICBiYWxhbmNlT2ZJc3N1ZXJbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwogICAgICAgIGJhbGFuY2VPZklzc3Vlclt0aGlzXSAtPSBhbW91bnQ7CiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsKICAgIH0KICAgIAogICAgLyogQWZ0ZXIgY29udHJhY3QgZW5kcyBtb3ZlIGZ1bmRzICovCiAgICBmdW5jdGlvbiBtb3ZlRnVuZHMoKSBvbmx5T3duZXIgewogICAgICAgIC8vaWYgKCFoYXNfY29udHJhY3RfZW5kZWQoKSkgdGhyb3c7CiAgICAgICAgaWYgKCFwcm9qZWN0X3dhbGxldC5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93OwogICAgfQoKICAgIC8qIFRoaXMgdW5uYW1lZCBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgc29tZW9uZSB0cmllcyB0byBzZW5kIGV0aGVyIHRvIGl0ICovCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhyb3c7ICAgICAvLyBQcmV2ZW50cyBhY2NpZGVudGFsIHNlbmRpbmcgb2YgZXRoZXIKICAgIH0KfQ=='.
	

]
