Class {
	#name : #SRTca672019b062af2d3525625c23243784c5249a75,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca672019b062af2d3525625c23243784c5249a75 >> base64 [
	^ ''.
	

]
