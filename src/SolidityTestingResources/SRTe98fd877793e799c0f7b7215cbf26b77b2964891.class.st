Class {
	#name : #SRTe98fd877793e799c0f7b7215cbf26b77b2964891,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe98fd877793e799c0f7b7215cbf26b77b2964891 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNjsKCmNvbnRyYWN0IE1ldGFQb2MgewogICAgLyogVkFSSUFCTEVTICovCiAgICBhZGRyZXNzIHB1YmxpYyBfb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBfZmlsaWF0ZTsKCiAgICBzdHJ1Y3QgRXhlY3V0aW9uIHsKICAgICAgICB1aW50IGRhdGVDcmVhdGVkOwogICAgICAgIHN0cmluZyBoYXNoOwogICAgICAgIGJvb2wgdmFsaWRhdGVkOwogICAgICAgIHVpbnQgZGF0ZVZhbGlkYXRlZDsKICAgIH0KICAgIAogICAgbWFwcGluZyAoc3RyaW5nID0+IHVpbnQpIHByaXZhdGUgbWFwRXhlY3M7CiAgICBFeGVjdXRpb25bXSBwcml2YXRlIGV4ZWN1dGlvbnM7CiAgICAKICAgIC8qIFBSSVZBVEUgQ09OU1QgKi8KICAgIHVpbnQgcHJpdmF0ZSBuYl90b3RhbCA9IDA7CiAgICB1aW50IHByaXZhdGUgbmJfbm90VmFsID0gMDsKICAgIHVpbnQgcHJpdmF0ZSBuYl92YWwgPSAwOwogICAgCiAgICBzdHJpbmcgcHJpdmF0ZSBsYXN0X2V4ZWMgPSAibm9uZSI7CiAgICB1aW50IHByaXZhdGUgbGFzdF9leGVjRGF0ZUNyZWF0ZWQgPSAwOwogICAgCiAgICBzdHJpbmcgcHJpdmF0ZSBub3RWYWxfbGlzdCA9ICJub25lIjsKICAgIHVpbnQgcHJpdmF0ZSBub3RWYWxfc2luY2UgPSAwOwogICAgc3RyaW5nIHByaXZhdGUgbm90VmFsX2xhc3QgPSAibm9uZSI7CiAgICB1aW50IHByaXZhdGUgbm90VmFsX2xhc3REYXRlQ3JlYXRlZCA9IDA7CiAgICAKICAgIHN0cmluZyBwcml2YXRlIHZhbF9saXN0ID0gIm5vbmUiOwogICAgdWludCBwcml2YXRlIHZhbF9zaW5jZSA9IDA7CiAgICBzdHJpbmcgcHJpdmF0ZSB2YWxfbGFzdCA9ICJub25lIjsKICAgIHVpbnQgcHJpdmF0ZSB2YWxfbGFzdERhdGVDcmVhdGVkID0gMDsKICAgIHVpbnQgcHJpdmF0ZSB2YWxfbGFzdERhdGVWYWxpZGF0ZWQgPSAwOwogICAgCiAgICAvKiBFVkVOVFMgKi8KICAgIGV2ZW50IEV4ZWN1dGVkKHN0cmluZyBIYXNoLCB1aW50IENyZWF0ZWQpOwogICAgZXZlbnQgVmFsaWRhdGVkKHN0cmluZyBIYXNoLCB1aW50IFZhbGlkYXRlZCk7CiAgICBldmVudCBDaGVja2VkKHN0cmluZyBIYXNoLCBib29sIElzRXhpdCwgdWludCBDcmVhdGVkLCBib29sIElzVmFsaWRhdGVkLCB1aW50IFZhbGlkYXRlZCk7CiAgICBldmVudCBMaXN0ZWRfVmFsaWRhdGVkKHVpbnQgU2luY2UsIHN0cmluZyBMaXN0KTsKICAgIGV2ZW50IExpc3RlZF9Ob3RWYWxpZGF0ZWQodWludCBTaW5jZSwgc3RyaW5nIExpc3QpOwogICAgZXZlbnQgT3duZXJfQ2hhbmdlZChhZGRyZXNzIE93bmVyKTsKICAgIGV2ZW50IEZpbGlhdGVfQ2hhbmdlZChhZGRyZXNzIEZpbGlhdGUpOwogICAgCiAgICAKICAgIC8qIENPTlNUUlVDVE9SICovCiAgICBmdW5jdGlvbiBNZXRhUG9jKGFkZHJlc3MgZmlsaWF0ZSkgewogICAgICAgIF9vd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgX2ZpbGlhdGUgPSBmaWxpYXRlOwogICAgfQogICAgCiAgICAvKiBNQVBQSU5HICovCiAgICBmdW5jdGlvbiBtYXAoc3RyaW5nIGhhc2gpIGludGVybmFsIHJldHVybnModWludCkgewogICAgICAgIHVpbnQgcmV0ID0gbWFwRXhlY3NbaGFzaF07CiAgICAgICAgaWYocmV0ID49IGV4ZWN1dGlvbnMubGVuZ3RoIHx8ICFzdHJFcXVhbChleGVjdXRpb25zW3JldF0uaGFzaCwgaGFzaCkpIHRocm93OwogICAgICAgIHJldHVybiByZXQ7CiAgICB9CiAgICAKICAgIC8qIE1PRElGSUVSUyAqLwogICAgbW9kaWZpZXIgYm90aEFsbG93ZWQoKSB7CiAgICAgICAgaWYobXNnLnNlbmRlciAhPSBfb3duZXIgJiYgbXNnLnNlbmRlciAhPSBfZmlsaWF0ZSkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb3duZXJBbGxvd2VkKCkgewogICAgICAgIGlmKG1zZy5zZW5kZXIgIT0gX293bmVyKSB0aHJvdzsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBmaWxpYXRlQWxsb3dlZCgpIHsKICAgICAgICBpZihtc2cuc2VuZGVyICE9IF9maWxpYXRlKSB0aHJvdzsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBub3RZZXRFeGlzdChzdHJpbmcgaGFzaCkgewogICAgICAgIHVpbnQgbnVtID0gbWFwRXhlY3NbaGFzaF07CiAgICAgICAgaWYobnVtIDwgZXhlY3V0aW9ucy5sZW5ndGggJiYgc3RyRXF1YWwoZXhlY3V0aW9uc1tudW1dLmhhc2gsIGhhc2gpKSB0aHJvdzsKICAgICAgICBfOwogICAgfQogICAgCiAgICBtb2RpZmllciBub3RZZXRWYWxpZGF0ZWQoc3RyaW5nIGhhc2gpIHsKICAgICAgICBFeGVjdXRpb24gZSA9IGV4ZWN1dGlvbnNbbWFwKGhhc2gpXTsKICAgICAgICBpZihlLnZhbGlkYXRlZCkgdGhyb3c7CiAgICAgICAgXzsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb3JkZXJFeGlzdChzdHJpbmcgaGFzaCkgewogICAgICAgIEV4ZWN1dGlvbiBlID0gZXhlY3V0aW9uc1ttYXAoaGFzaCldOwogICAgICAgIGlmKCFzdHJFcXVhbChlLmhhc2gsIGhhc2gpKSB0aHJvdzsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKiBJTklUICovCiAgICBmdW5jdGlvbiBDaGFuZ2VPd25lcihhZGRyZXNzIG93bmVyKSBvd25lckFsbG93ZWQoKSB7CiAgICAgICAgaWYob3duZXIuYmFsYW5jZSA8PSAwKSB0aHJvdzsKICAgICAgICAKICAgICAgICBfb3duZXIgPSBvd25lcjsKICAgICAgICBPd25lcl9DaGFuZ2VkKF9vd25lcik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIENoYW5nZUZpbGlhdGUoYWRkcmVzcyBmaWxpYXRlKSBib3RoQWxsb3dlZCgpIHsKICAgICAgICBpZihmaWxpYXRlLmJhbGFuY2UgPD0gMCkgdGhyb3c7CiAgICAgICAgCiAgICAgICAgX2ZpbGlhdGUgPSBmaWxpYXRlOwogICAgICAgIEZpbGlhdGVfQ2hhbmdlZChfZmlsaWF0ZSk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGtpbGwoKSBvd25lckFsbG93ZWQoKSB7CiAgICAgICAgc3VpY2lkZShfb3duZXIpOwogICAgfQogICAgCiAgICAvKiBQVUJMSUMgRlVOQ1RJT05TICovCiAgICBmdW5jdGlvbiBBZGRFeGVjKHN0cmluZyBIYXNoKSBwdWJsaWMgb3duZXJBbGxvd2VkKCkgbm90WWV0RXhpc3QoSGFzaCkgewogICAgICAgIHVpbnQgbnVtID0gZXhlY3V0aW9ucy5sZW5ndGgrKzsKICAgICAgICBtYXBFeGVjc1tIYXNoXSA9IG51bTsKICAgICAgICBFeGVjdXRpb24gZSA9IGV4ZWN1dGlvbnNbbnVtXTsKICAgICAgICBlLmRhdGVDcmVhdGVkID0gbm93OwogICAgICAgIGUuaGFzaCA9IEhhc2g7CiAgICAgICAgZXhlY3V0aW9uc1tudW1dID0gZTsKICAgICAgICAKICAgICAgICAvKiBtJiMyMjQ7aiBwdWJsaWMgY29uc3QgKi8KICAgICAgICBuYl90b3RhbCsrOwogICAgICAgIG5iX25vdFZhbCsrOwogICAgICAgIG5vdFZhbF9sYXN0ID0gZS5oYXNoOwogICAgICAgIG5vdFZhbF9sYXN0RGF0ZUNyZWF0ZWQgPSBlLmRhdGVDcmVhdGVkOwogICAgICAgIE1hakxpc3RBbGwoKTsKICAgICAgICAKICAgICAgICBFeGVjdXRlZChlLmhhc2gsIGUuZGF0ZUNyZWF0ZWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBWYWxpZGF0ZUV4ZWMoc3RyaW5nIEhhc2gpIHB1YmxpYyBmaWxpYXRlQWxsb3dlZCgpIG5vdFlldFZhbGlkYXRlZChIYXNoKSB7CiAgICAgICAgRXhlY3V0aW9uIGUgPSBleGVjdXRpb25zW21hcChIYXNoKV07CiAgICAgICAgZS52YWxpZGF0ZWQgPSB0cnVlOwogICAgICAgIGUuZGF0ZVZhbGlkYXRlZCA9IG5vdzsKICAgICAgICBleGVjdXRpb25zW21hcChIYXNoKV0gPSBlOwogICAgICAgIAogICAgICAgIC8qIG0mIzIyNDtqIHB1YmxpYyBjb25zdCAqLwogICAgICAgIG5iX3ZhbCsrOwogICAgICAgIG5iX25vdFZhbC0tOwogICAgICAgIHZhbF9sYXN0ID0gZS5oYXNoOwogICAgICAgIHZhbF9sYXN0RGF0ZUNyZWF0ZWQgPSBlLmRhdGVDcmVhdGVkOwogICAgICAgIHZhbF9sYXN0RGF0ZVZhbGlkYXRlZCA9IGUuZGF0ZVZhbGlkYXRlZDsKICAgICAgICBNYWpMaXN0QWxsKCk7CiAgICAgICAgTWFqTGFzdE5vdFZhbCgpOwogICAgICAgIAogICAgICAgIFZhbGlkYXRlZChlLmhhc2gsIGUuZGF0ZVZhbGlkYXRlZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIENoZWNrRXhlYyhzdHJpbmcgSGFzaCkgcHVibGljIGJvdGhBbGxvd2VkKCkgewogICAgICAgIHVpbnQgcmV0ID0gbWFwRXhlY3NbSGFzaF07CiAgICAgICAgaWYocmV0ID49IGV4ZWN1dGlvbnMubGVuZ3RoIHx8ICFzdHJFcXVhbChleGVjdXRpb25zW3JldF0uaGFzaCwgSGFzaCkpIHsKICAgICAgICAgICAgQ2hlY2tlZChIYXNoLCBmYWxzZSwgMCwgZmFsc2UsIDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEV4ZWN1dGlvbiBlID0gZXhlY3V0aW9uc1tyZXRdOwogICAgICAgICAgICBDaGVja2VkKGUuaGFzaCwgdHJ1ZSwgZS5kYXRlQ3JlYXRlZCwgZS52YWxpZGF0ZWQsIGUuZGF0ZVZhbGlkYXRlZCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBMaXN0QWxsU2luY2UodWludCB0aW1lc3RhbXBGcm9tKSBwdWJsaWMgYm90aEFsbG93ZWQoKSB7CiAgICAgICAgdmFsX3NpbmNlID0gdGltZXN0YW1wRnJvbTsKICAgICAgICBub3RWYWxfc2luY2UgPSB0aW1lc3RhbXBGcm9tOwogICAgICAgIE1hakxpc3RBbGwoKTsKICAgICAgICBMaXN0ZWRfVmFsaWRhdGVkKHZhbF9zaW5jZSwgdmFsX2xpc3QpOwogICAgICAgIExpc3RlZF9Ob3RWYWxpZGF0ZWQobm90VmFsX3NpbmNlLCBub3RWYWxfbGlzdCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIExpc3ROb3RWYWxTaW5jZSh1aW50IHRpbWVzdGFtcEZyb20pIHB1YmxpYyBib3RoQWxsb3dlZCgpIHsKICAgICAgICBub3RWYWxfc2luY2UgPSB0aW1lc3RhbXBGcm9tOwogICAgICAgIE1hakxpc3ROb3RWYWwoKTsKICAgICAgICBMaXN0ZWRfTm90VmFsaWRhdGVkKG5vdFZhbF9zaW5jZSwgbm90VmFsX2xpc3QpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBMaXN0VmFsU2luY2UodWludCB0aW1lc3RhbXBGcm9tKSBwdWJsaWMgYm90aEFsbG93ZWQoKSB7CiAgICAgICAgdmFsX3NpbmNlID0gdGltZXN0YW1wRnJvbTsKICAgICAgICBNYWpMaXN0VmFsKCk7CiAgICAgICAgTGlzdGVkX1ZhbGlkYXRlZCh2YWxfc2luY2UsIHZhbF9saXN0KTsKICAgIH0KICAgIAogICAgCiAgICAvKiBDT05TVEFOVFMgKi8KICAgIGZ1bmN0aW9uIENvdW50RXhlY3MoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyh1aW50IFRvdGFsLCB1aW50IE5iVmFsaWRhdGVkLCB1aW50IE5iTm90VmFsKSB7CiAgICAgICAgcmV0dXJuIChuYl90b3RhbCwgbmJfdmFsLCBuYl9ub3RWYWwpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBMYXN0RXhlYygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHN0cmluZyBIYXNoLCB1aW50IENyZWF0ZWQpIHsKICAgICAgICByZXR1cm4gKG5vdFZhbF9sYXN0LCBub3RWYWxfbGFzdERhdGVDcmVhdGVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gTGFzdFZhbGlkYXRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHN0cmluZyBIYXNoLCB1aW50IENyZWF0ZWQsIHVpbnQgVmFsaWRhdGVkKSB7CiAgICAgICAgcmV0dXJuICh2YWxfbGFzdCwgdmFsX2xhc3REYXRlQ3JlYXRlZCwgdmFsX2xhc3REYXRlVmFsaWRhdGVkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gTGlzdE5vdFZhbGlkYXRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQgU2luY2UsIHN0cmluZyBMaXN0KSB7CiAgICAgICAgcmV0dXJuIChub3RWYWxfc2luY2UsIG5vdFZhbF9saXN0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBMaXN0VmFsaWRhdGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCBTaW5jZSwgc3RyaW5nIExpc3QpIHsKICAgICAgICByZXR1cm4gKHZhbF9zaW5jZSwgdmFsX2xpc3QpOwogICAgfQogICAgCiAgICAvKiBQUklWQVRFIEZVTkNUSU9OUyAqLwogICAgZnVuY3Rpb24gTWFqTGlzdEFsbCgpIHByaXZhdGUgewogICAgICAgIE1hakxpc3RWYWwoKTsKICAgICAgICBNYWpMaXN0Tm90VmFsKCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIE1hakxpc3RWYWwoKSBwcml2YXRlIHsKICAgICAgICB2YWxfbGlzdCA9ICJub25lIjsKICAgICAgICBmb3IodWludCBpID0gMDsgaSA8IGV4ZWN1dGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYoZXhlY3V0aW9uc1tpXS5kYXRlQ3JlYXRlZCA+PSB2YWxfc2luY2UgJiYgZXhlY3V0aW9uc1tpXS52YWxpZGF0ZWQpIHsKICAgICAgICAgICAgICAgIGlmKHN0ckVxdWFsKHZhbF9saXN0LCAibm9uZSIpKSB2YWxfbGlzdCA9IGV4ZWN1dGlvbnNbaV0uaGFzaDsKICAgICAgICAgICAgICAgIGVsc2UgdmFsX2xpc3QgPSBzdHJDb25jYXQodmFsX2xpc3QsICIgOyAiLCBleGVjdXRpb25zW2ldLmhhc2gpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBNYWpMaXN0Tm90VmFsKCkgcHJpdmF0ZSB7CiAgICAgICAgbm90VmFsX2xpc3QgPSAibm9uZSI7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBleGVjdXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmKGV4ZWN1dGlvbnNbaV0uZGF0ZUNyZWF0ZWQgPj0gbm90VmFsX3NpbmNlICYmICFleGVjdXRpb25zW2ldLnZhbGlkYXRlZCkgewogICAgICAgICAgICAgICAgaWYoc3RyRXF1YWwobm90VmFsX2xpc3QsICJub25lIikpIG5vdFZhbF9saXN0ID0gZXhlY3V0aW9uc1tpXS5oYXNoOwogICAgICAgICAgICAgICAgZWxzZSBub3RWYWxfbGlzdCA9IHN0ckNvbmNhdChub3RWYWxfbGlzdCwgIiA7ICIsIGV4ZWN1dGlvbnNbaV0uaGFzaCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIE1hakxhc3ROb3RWYWwoKSBwcml2YXRlIHsKICAgICAgICBub3RWYWxfbGFzdERhdGVDcmVhdGVkID0gMDsKICAgICAgICBub3RWYWxfbGFzdCA9ICJub25lIjsKICAgICAgICBpZihleGVjdXRpb25zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaWYoIWV4ZWN1dGlvbnNbMF0udmFsaWRhdGVkKSB7CiAgICAgICAgICAgICAgICBub3RWYWxfbGFzdCA9IGV4ZWN1dGlvbnNbMF0uaGFzaDsKICAgICAgICAgICAgICAgIG5vdFZhbF9sYXN0RGF0ZUNyZWF0ZWQgPSBleGVjdXRpb25zWzBdLmRhdGVDcmVhdGVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcih1aW50IGkgPSBleGVjdXRpb25zLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIGlmKCFleGVjdXRpb25zW2ldLnZhbGlkYXRlZCAmJiBleGVjdXRpb25zW2ldLmRhdGVDcmVhdGVkID4gbm90VmFsX2xhc3REYXRlQ3JlYXRlZCkgewogICAgICAgICAgICAgICAgICAgIG5vdFZhbF9sYXN0ID0gZXhlY3V0aW9uc1tpXS5oYXNoOwogICAgICAgICAgICAgICAgICAgIG5vdFZhbF9sYXN0RGF0ZUNyZWF0ZWQgPSBleGVjdXRpb25zW2ldLmRhdGVDcmVhdGVkOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKiBVVElMUyAqLwogICAgZnVuY3Rpb24gc3RyRXF1YWwoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMoYm9vbCkgewoJCWJ5dGVzIG1lbW9yeSBhID0gYnl0ZXMoX2EpOwoJCWJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOwoJCWlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkKCQkJcmV0dXJuIGZhbHNlOwoKCQlmb3IgKHVpbnQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArKykKCQkJaWYgKGFbaV0gIT0gYltpXSkKCQkJCXJldHVybiBmYWxzZTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCQoJZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCwgc3RyaW5nIF9lKSBpbnRlcm5hbCByZXR1cm5zKHN0cmluZykgewogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmEgPSBieXRlcyhfYSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYiA9IGJ5dGVzKF9iKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JjID0gYnl0ZXMoX2MpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmQgPSBieXRlcyhfZCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iZSA9IGJ5dGVzKF9lKTsKICAgICAgICBzdHJpbmcgbWVtb3J5IGFiY2RlID0gbmV3IHN0cmluZyhfYmEubGVuZ3RoICsgX2JiLmxlbmd0aCArIF9iYy5sZW5ndGggKyBfYmQubGVuZ3RoICsgX2JlLmxlbmd0aCk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJhYmNkZSA9IGJ5dGVzKGFiY2RlKTsKICAgICAgICB1aW50IGsgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9iYS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmFbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iYi5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmJbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iYy5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmNbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZC5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmRbaV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmVbaV07CiAgICAgICAgcmV0dXJuIHN0cmluZyhiYWJjZGUpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYywgc3RyaW5nIF9kKSBpbnRlcm5hbCByZXR1cm5zKHN0cmluZykgewogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgX2QsICIiKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MpIGludGVybmFsIHJldHVybnMoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsIF9jLCAiIiwgIiIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsICIiLCAiIiwgIiIpOwogICAgfQogICAgCn0='.
	

]
