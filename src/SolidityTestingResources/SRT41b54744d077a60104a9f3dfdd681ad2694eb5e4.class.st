Class {
	#name : #SRT41b54744d077a60104a9f3dfdd681ad2694eb5e4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT41b54744d077a60104a9f3dfdd681ad2694eb5e4 >> base64 [
	^ ''.
	

]
