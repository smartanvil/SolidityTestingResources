Class {
	#name : #SRTdbeefc28155894b887d379113c1dadb4db545a78,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdbeefc28155894b887d379113c1dadb4db545a78 >> base64 [
	^ ''.
	

]
