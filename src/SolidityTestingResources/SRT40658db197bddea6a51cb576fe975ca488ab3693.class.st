Class {
	#name : #SRT40658db197bddea6a51cb576fe975ca488ab3693,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT40658db197bddea6a51cb576fe975ca488ab3693 >> base64 [
	^ ''.
	

]
