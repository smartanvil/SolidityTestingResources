Class {
	#name : #SRT593da2b65eb62bb1e1b5f1e3bbdfb0395060e1a8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT593da2b65eb62bb1e1b5f1e3bbdfb0395060e1a8 >> base64 [
	^ ''.
	

]
