Class {
	#name : #SRTce85675ea91f8afe2a67869a8b1f9136187dc772,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTce85675ea91f8afe2a67869a8b1f9136187dc772 >> base64 [
	^ ''.
	

]
