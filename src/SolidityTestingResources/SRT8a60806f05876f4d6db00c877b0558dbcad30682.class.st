Class {
	#name : #SRT8a60806f05876f4d6db00c877b0558dbcad30682,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8a60806f05876f4d6db00c877b0558dbcad30682 >> base64 [
	^ ''.
	

]
