Class {
	#name : #SRT8cb90dba13f9aed90bf40aa27a23a256fedd876a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8cb90dba13f9aed90bf40aa27a23a256fedd876a >> base64 [
	^ ''.
	

]
