Class {
	#name : #SRT7aBbE415D8504D89B188C3c783e694690c5F5f88,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7aBbE415D8504D89B188C3c783e694690c5F5f88 >> base64 [
	^ ''.
	

]
