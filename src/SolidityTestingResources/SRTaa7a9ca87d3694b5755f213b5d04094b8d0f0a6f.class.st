Class {
	#name : #SRTaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f >> base64 [
	^ ''.
	

]
