Class {
	#name : #SRTa8bcd424a65c3667b7527724ec43ade5e71bf62b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa8bcd424a65c3667b7527724ec43ade5e71bf62b >> base64 [
	^ ''.
	

]
