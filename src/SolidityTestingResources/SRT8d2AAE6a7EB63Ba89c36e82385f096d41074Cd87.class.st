Class {
	#name : #SRT8d2AAE6a7EB63Ba89c36e82385f096d41074Cd87,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8d2AAE6a7EB63Ba89c36e82385f096d41074Cd87 >> base64 [
	^ ''.
	

]
