Class {
	#name : #SRT413e95a3d2620ee9696b2b34134bfa159fc9524c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT413e95a3d2620ee9696b2b34134bfa159fc9524c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGlmIChhID09IDApIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKCgoKCgoKCgppbnRlcmZhY2UgRVJDMjAgewogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKCgoKCgppbnRlcmZhY2UgRVJDMjIzIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYzsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGluZGV4ZWQgZGF0YSk7Cn0KCgoKCgoKCgpjb250cmFjdCBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCB7IAogICAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHB1YmxpYzsKfQoKCgoKCgoKCgoKCgoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBFUkMyMCwgRVJDMjIzIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAgICAKICAgIHN0cmluZyBpbnRlcm5hbCBfbmFtZTsKICAgIHN0cmluZyBpbnRlcm5hbCBfc3ltYm9sOwogICAgdWludDggaW50ZXJuYWwgX2RlY2ltYWxzOwogICAgdWludDI1NiBpbnRlcm5hbCBfdG90YWxTdXBwbHk7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBpbnRlcm5hbCBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgaW50ZXJuYWwgYWxsb3dlZDsKCiAgICBmdW5jdGlvbiBTdGFuZGFyZFRva2VuKHN0cmluZyBuYW1lLCBzdHJpbmcgc3ltYm9sLCB1aW50OCBkZWNpbWFscywgdWludDI1NiB0b3RhbFN1cHBseSkgcHVibGljIHsKICAgICAgICBfc3ltYm9sID0gc3ltYm9sOwogICAgICAgIF9uYW1lID0gbmFtZTsKICAgICAgICBfZGVjaW1hbHMgPSBkZWNpbWFsczsKICAgICAgICBfdG90YWxTdXBwbHkgPSB0b3RhbFN1cHBseTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OwogICAgfQoKICAgIGZ1bmN0aW9uIG5hbWUoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gX25hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc3ltYm9sKCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIF9zeW1ib2w7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjaW1hbHMoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50OCkgewogICAgICAgIHJldHVybiBfZGVjaW1hbHM7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b3RhbFN1cHBseTsKICAgIH0KCiAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1ttc2cuc2VuZGVyXSk7CiAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBTYWZlTWF0aC5zdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSk7CiAgICAgYmFsYW5jZXNbX3RvXSA9IFNhZmVNYXRoLmFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGJhbGFuY2VzW19mcm9tXSk7CiAgICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IFNhZmVNYXRoLnN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7CiAgICAgYmFsYW5jZXNbX3RvXSA9IFNhZmVNYXRoLmFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOwogICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gU2FmZU1hdGguc3ViKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQoKICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgfQoKICAgZnVuY3Rpb24gaW5jcmVhc2VBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9hZGRlZFZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gU2FmZU1hdGguYWRkKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdLCBfYWRkZWRWYWx1ZSk7CiAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQoKICBmdW5jdGlvbiBkZWNyZWFzZUFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICB1aW50IG9sZFZhbHVlID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl07CiAgICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSAwOwogICAgIH0gZWxzZSB7CiAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IFNhZmVNYXRoLnN1YihvbGRWYWx1ZSwgX3N1YnRyYWN0ZWRWYWx1ZSk7CiAgICB9CiAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdKTsKICAgICByZXR1cm4gdHJ1ZTsKICAgfQogICAKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWMgewogICAgcmVxdWlyZShfdmFsdWUgPiAwICk7CiAgICBpZihpc0NvbnRyYWN0KF90bykpIHsKICAgICAgICBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCByZWNlaXZlciA9IEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0KF90byk7CiAgICAgICAgcmVjZWl2ZXIudG9rZW5GYWxsYmFjayhtc2cuc2VuZGVyLCBfdmFsdWUsIF9kYXRhKTsKICAgIH0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBfZGF0YSk7CiAgICB9CiAgICAKICBmdW5jdGlvbiBpc0NvbnRyYWN0KGFkZHJlc3MgX2FkZHIpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBpc19jb250cmFjdCkgewogICAgICB1aW50IGxlbmd0aDsKICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAvL3JldHJpZXZlIHRoZSBzaXplIG9mIHRoZSBjb2RlIG9uIHRhcmdldCBhZGRyZXNzLCB0aGlzIG5lZWRzIGFzc2VtYmx5CiAgICAgICAgICAgIGxlbmd0aCA6PSBleHRjb2Rlc2l6ZShfYWRkcikKICAgICAgfQogICAgICByZXR1cm4gKGxlbmd0aD4wKTsKICAgIH0KCgp9'.
	

]
