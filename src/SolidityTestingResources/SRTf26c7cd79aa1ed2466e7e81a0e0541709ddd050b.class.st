Class {
	#name : #SRTf26c7cd79aa1ed2466e7e81a0e0541709ddd050b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf26c7cd79aa1ed2466e7e81a0e0541709ddd050b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIENyb3dkc2FsZQogKiBAZGV2IENyb3dkc2FsZSBpcyBhIGJhc2UgY29udHJhY3QgZm9yIG1hbmFnaW5nIGEgdG9rZW4gY3Jvd2RzYWxlLgogKiBDcm93ZHNhbGVzIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KIAogCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludDI1NiBjID0gYSAvIGI7CiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgcHJldmlvdXNPd25lciwgYWRkcmVzcyBpbmRleGVkIG5ld093bmVyKTsKCgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgcHVibGljIHsKICAgIHJlcXVpcmUobmV3T3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOwogICAgb3duZXIgPSBuZXdPd25lcjsKICB9Cgp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHRva2VuQmFsYW5jZXM7CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1ttc2cuc2VuZGVyXT49X3ZhbHVlKTsKICAgIHRva2VuQmFsYW5jZXNbbXNnLnNlbmRlcl0gPSB0b2tlbkJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgdG9rZW5CYWxhbmNlc1tfdG9dID0gdG9rZW5CYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiB0b2tlbkJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKY29udHJhY3QgQlRDMjBUb2tlbiBpcyBCYXNpY1Rva2VuLE93bmFibGUgewoKICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAgIAogICAvL1RPRE86IENoYW5nZSB0aGUgbmFtZSBhbmQgdGhlIHN5bWJvbAogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiQlRDMjAiOwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJCVEMyMCI7CiAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CgogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBJTklUSUFMX1NVUFBMWSA9IDIxMDAwMDAwOwogICBldmVudCBEZWJ1ZyhzdHJpbmcgbWVzc2FnZSwgYWRkcmVzcyBhZGRyLCB1aW50MjU2IG51bWJlcik7CiAgLyoqCiAgICogQGRldiBDb250cnVjdG9yIHRoYXQgZ2l2ZXMgbXNnLnNlbmRlciBhbGwgb2YgZXhpc3RpbmcgdG9rZW5zLgogICAqLwogICAgZnVuY3Rpb24gQlRDMjBUb2tlbihhZGRyZXNzIHdhbGxldCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG90YWxTdXBwbHkgPSBJTklUSUFMX1NVUFBMWSAqIDEwICoqIDE4OwogICAgICAgIHRva2VuQmFsYW5jZXNbd2FsbGV0XSA9IHRvdGFsU3VwcGx5OyAgIC8vU2luY2Ugd2UgZGl2aWRlZCB0aGUgdG9rZW4gaW50byAxMF4xOCBwYXJ0cwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyB3YWxsZXQsIGFkZHJlc3MgYnV5ZXIsIHVpbnQyNTYgdG9rZW5BbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICByZXF1aXJlKHRva2VuQmFsYW5jZXNbd2FsbGV0XSA+PSB0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICB0b2tlbkJhbGFuY2VzW2J1eWVyXSA9IHRva2VuQmFsYW5jZXNbYnV5ZXJdLmFkZCh0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICB0b2tlbkJhbGFuY2VzW3dhbGxldF0gPSB0b2tlbkJhbGFuY2VzW3dhbGxldF0uc3ViKHRva2VuQW1vdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQogICAgICBUcmFuc2Zlcih3YWxsZXQsIGJ1eWVyLCB0b2tlbkFtb3VudCk7IAogICAgfQogIGZ1bmN0aW9uIHNob3dNeVRva2VuQmFsYW5jZShhZGRyZXNzIGFkZHIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgdG9rZW5CYWxhbmNlKSB7CiAgICAgICAgdG9rZW5CYWxhbmNlID0gdG9rZW5CYWxhbmNlc1thZGRyXTsKICAgIH0KfQpjb250cmFjdCBCVEMyMENyb3dkc2FsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CiAKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogIEJUQzIwVG9rZW4gcHVibGljIHRva2VuOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICAvLyBhZGRyZXNzIHdoZXJlIHRva2VucyBhcmUgZGVwb3NpdGVkIGFuZCBmcm9tIHdoZXJlIHdlIHNlbmQgdG9rZW5zIHRvIGJ1eWVycwogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyByYXRlUGVyV2VpID0gNTAwMDA7CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwoKICB1aW50MjU2IFRPS0VOU19TT0xEOwogIHVpbnQyNTYgbWF4VG9rZW5zVG9TYWxlID0gMTUwMDAwMDAgKiAxMCAqKiAxODsKICB1aW50MjU2IG1pbmltdW1Db250cmlidXRpb24gPSA1ICogMTAgKiogMTY7IC8vMC4wNSBpcyB0aGUgbWluaW11bSBjb250cmlidXRpb24KCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICBmdW5jdGlvbiBCVEMyMENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIGFkZHJlc3MgX3dhbGxldCkgcHVibGljIAogIHsKICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7ICAgCiAgICBlbmRUaW1lID0gc3RhcnRUaW1lICsgMTQgZGF5czsKICAgIAogICAgcmVxdWlyZShlbmRUaW1lID49IHN0YXJ0VGltZSk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKCiAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KHdhbGxldCk7CiAgICAKICB9CiAgLy8gY3JlYXRlcyB0aGUgdG9rZW4gdG8gYmUgc29sZC4KICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KGFkZHJlc3Mgd2FsbCkgaW50ZXJuYWwgcmV0dXJucyAoQlRDMjBUb2tlbikgewogICAgcmV0dXJuIG5ldyBCVEMyMFRva2VuKHdhbGwpOwogIH0KCgogIC8vIGZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAvL2RldGVybWluZSB0aGUgcmF0ZSBvZiB0aGUgdG9rZW4gdy5yLnQuIHRpbWUgZWxhcHNlZAogIGZ1bmN0aW9uIGRldGVybWluZUJvbnVzKHVpbnQgdG9rZW5zKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgYm9udXMpIHsKICAgIHVpbnQyNTYgdGltZUVsYXBzZWQgPSBub3cgLSBzdGFydFRpbWU7CiAgICB1aW50MjU2IHRpbWVFbGFwc2VkSW5XZWVrcyA9IHRpbWVFbGFwc2VkLmRpdig3IGRheXMpOwogICAgaWYgKHRpbWVFbGFwc2VkSW5XZWVrcyA9PSAwKQogICAgewogICAgICBib251cyA9IHRva2Vucy5tdWwoNTApOyAvLzUwJSBib251cwogICAgICBib251cyA9IGJvbnVzLmRpdigxMDApOwogICAgfQogICAgZWxzZSBpZiAodGltZUVsYXBzZWRJbldlZWtzID09IDEpCiAgICB7CiAgICAgIGJvbnVzID0gdG9rZW5zLm11bCgyNSk7IC8vMjUlIGJvbnVzCiAgICAgIGJvbnVzID0gYm9udXMuZGl2KDEwMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgYm9udXMgPSAwOyAgIC8vTm8gdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkIC0gSUNPIHRpbWUgaXMgb3ZlcgogICAgfQogIH0KCiAgLy8gbG93IGxldmVsIHRva2VuIHB1cmNoYXNlIGZ1bmN0aW9uCiAgLy8gTWluaW11bSBwdXJjaGFzZSBjYW4gYmUgb2YgMSBFVEgKICAKICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgcmVxdWlyZShtc2cudmFsdWU+PSBtaW5pbXVtQ29udHJpYnV0aW9uKTsKICAgIHJlcXVpcmUoVE9LRU5TX1NPTEQ8bWF4VG9rZW5zVG9TYWxlKTsKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgIAogICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGVQZXJXZWkpOwogICAgdWludDI1NiBib251cyA9IGRldGVybWluZUJvbnVzKHRva2Vucyk7CiAgICB0b2tlbnMgPSB0b2tlbnMuYWRkKGJvbnVzKTsKICAgIHJlcXVpcmUoVE9LRU5TX1NPTEQrdG9rZW5zPD1tYXhUb2tlbnNUb1NhbGUpOwogICAgCiAgICAvLyB1cGRhdGUgc3RhdGUKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICB0b2tlbi5taW50KHdhbGxldCwgYmVuZWZpY2lhcnksIHRva2Vucyk7IAogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwogICAgVE9LRU5TX1NPTEQgPSBUT0tFTlNfU09MRC5hZGQodG9rZW5zKTsKICAgIGZvcndhcmRGdW5kcygpOwogIH0KCiAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogIC8vIG92ZXJyaWRlIHRvIGNyZWF0ZSBjdXN0b20gZnVuZCBmb3J3YXJkaW5nIG1lY2hhbmlzbXMKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CgogIC8vIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gY2FuIGJ1eSB0b2tlbnMKICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgYm9vbCB3aXRoaW5QZXJpb2QgPSBub3cgPj0gc3RhcnRUaW1lICYmIG5vdyA8PSBlbmRUaW1lOwogICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIGNyb3dkc2FsZSBldmVudCBoYXMgZW5kZWQKICBmdW5jdGlvbiBoYXNFbmRlZCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gbm93ID4gZW5kVGltZTsKICB9CiAgCiAgIAogICAgZnVuY3Rpb24gY2hhbmdlRW5kRGF0ZSh1aW50MjU2IGVuZFRpbWVVbml4VGltZXN0YW1wKSBwdWJsaWMgcmV0dXJucyhib29sKSB7CiAgICAgICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSB3YWxsZXQpOwogICAgICAgIGVuZFRpbWUgPSBlbmRUaW1lVW5peFRpbWVzdGFtcDsKICAgIH0KICAgIGZ1bmN0aW9uIGNoYW5nZVN0YXJ0RGF0ZSh1aW50MjU2IHN0YXJ0VGltZVVuaXhUaW1lc3RhbXApIHB1YmxpYyByZXR1cm5zKGJvb2wpIHsKICAgICAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IHdhbGxldCk7CiAgICAgICAgc3RhcnRUaW1lID0gc3RhcnRUaW1lVW5peFRpbWVzdGFtcDsKICAgIH0KICAgIGZ1bmN0aW9uIHNldFByaWNlUmF0ZSh1aW50MjU2IG5ld1ByaWNlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gd2FsbGV0KTsKICAgICAgICByYXRlUGVyV2VpID0gbmV3UHJpY2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGNoYW5nZU1pbmltdW1Db250cmlidXRpb24odWludDI1NiBtaW5Db250cmlidXRpb24pIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZSAobXNnLnNlbmRlciA9PSB3YWxsZXQpOwogICAgICAgIG1pbmltdW1Db250cmlidXRpb24gPSBtaW5Db250cmlidXRpb24gKiAxMCAqKiAxNTsKICAgIH0KfQ=='.
	

]
