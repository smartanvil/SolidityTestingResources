Class {
	#name : #SRT5fc516dadc9f55cf40a415bab5ae56202ed68396,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5fc516dadc9f55cf40a415bab5ae56202ed68396 >> base64 [
	^ ''.
	

]
