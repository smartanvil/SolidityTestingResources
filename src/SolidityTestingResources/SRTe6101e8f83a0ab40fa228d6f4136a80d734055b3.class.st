Class {
	#name : #SRTe6101e8f83a0ab40fa228d6f4136a80d734055b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe6101e8f83a0ab40fa228d6f4136a80d734055b3 >> base64 [
	^ ''.
	

]
