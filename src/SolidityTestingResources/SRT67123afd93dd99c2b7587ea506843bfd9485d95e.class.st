Class {
	#name : #SRT67123afd93dd99c2b7587ea506843bfd9485d95e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT67123afd93dd99c2b7587ea506843bfd9485d95e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCi8vIEB0aXRsZSBJbnRlcmZhY2UgZm9yIGNvbnRyYWN0cyBjb25mb3JtaW5nIHRvIEVSQy03MjE6IE5vbi1GdW5naWJsZSBUb2tlbnMKLy8gQGF1dGhvciBEaWV0ZXIgU2hpcmxleSA8PHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSIyNDQwNDE1MDQxNjQ0NTVjNGQ0YjQ5NWU0MTRhMGE0NzRiIj5bZW1haWwmIzE2MDtwcm90ZWN0ZWRdPC9zcGFuPj4gKGh0dHBzOi8vZ2l0aHViLmNvbS9kZXRlKQpjb250cmFjdCBFUkM3MjEgewogIAkvLyBSZXF1aXJlZCBtZXRob2RzCiAgCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogIAlmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgCWZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYWRkcmVzcyBhZGRyKTsKICAJZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogIAlmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwoJCiAgCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CiAgCWV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwp9Cgpjb250cmFjdCBFbGVtZW50cyBpcyBFUkM3MjEgewoKICAJLyoqKiBFVkVOVFMgKioqLwogIAkvLyBAZGV2IFRoZSBCaXJ0aCBldmVudCBpcyBmaXJlZCB3aGVuZXZlciBhIG5ldyBlbGVtZW50IGNvbWVzIGludG8gZXhpc3RlbmNlLgogIAlldmVudCBCaXJ0aCh1aW50MjU2IHRva2VuSWQsIHN0cmluZyBuYW1lLCBhZGRyZXNzIG93bmVyKTsKCiAgCS8vIEBkZXYgVGhlIFRva2VuU29sZCBldmVudCBpcyBmaXJlZCB3aGVuZXZlciBhIHRva2VuIGlzIHNvbGQuCiAgCWV2ZW50IFRva2VuU29sZCh1aW50MjU2IHRva2VuSWQsIHVpbnQyNTYgb2xkUHJpY2UsIHVpbnQyNTYgbmV3UHJpY2UsIGFkZHJlc3MgcHJldk93bmVyLCBhZGRyZXNzIHdpbm5lciwgc3RyaW5nIG5hbWUpOwoKICAJLy8gQGRldiBUcmFuc2ZlciBldmVudCBhcyBkZWZpbmVkIGluIGN1cnJlbnQgZHJhZnQgb2YgRVJDNzIxLiBPd25lcnNoaXAgaXMgYXNzaWduZWQsIGluY2x1ZGluZyBiaXJ0aHMuCiAgCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB0b2tlbklkKTsKCiAgCS8qKiogQ09OU1RBTlRTLCBWQVJJQUJMRVMgKioqLwoKCS8vIEBub3RpY2UgTmFtZSBhbmQgc3ltYm9sIG9mIHRoZSBub24gZnVuZ2libGUgdG9rZW4sIGFzIGRlZmluZWQgaW4gRVJDNzIxLgoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBOQU1FID0gIkNyeXB0b0VsZW1lbnRzIjsgLy8gc29saGludC1kaXNhYmxlLWxpbmUKCXN0cmluZyBwdWJsaWMgY29uc3RhbnQgU1lNQk9MID0gIkNSRUwiOyAvLyBzb2xoaW50LWRpc2FibGUtbGluZQoKICAJdWludDI1NiBwcml2YXRlIHBlcmlvZGljU3RhcnRpbmdQcmljZSA9IDUgZXRoZXI7CiAgCXVpbnQyNTYgcHJpdmF0ZSBlbGVtZW50U3RhcnRpbmdQcmljZSA9IDAuMDA1IGV0aGVyOwogIAl1aW50MjU2IHByaXZhdGUgc2NpZW50aXN0U3RhcnRpbmdQcmljZSA9IDAuMSBldGhlcjsKICAJdWludDI1NiBwcml2YXRlIHNwZWNpYWxTdGFydGluZ1ByaWNlID0gMC4wNSBldGhlcjsKCiAgCXVpbnQyNTYgcHJpdmF0ZSBmaXJzdFN0ZXBMaW1pdCA9ICAwLjA1IGV0aGVyOwogIAl1aW50MjU2IHByaXZhdGUgc2Vjb25kU3RlcExpbWl0ID0gMC43NSBldGhlcjsKICAJdWludDI1NiBwcml2YXRlIHRoaXJkU3RlcExpbWl0ID0gMyBldGhlcjsKCiAgCWJvb2wgcHJpdmF0ZSBwZXJpb2RpY1RhYmxlRXhpc3RzID0gZmFsc2U7CgogIAl1aW50MjU2IHByaXZhdGUgZWxlbWVudENUUiA9IDA7CiAgCXVpbnQyNTYgcHJpdmF0ZSBzY2llbnRpc3RDVFIgPSAwOwogIAl1aW50MjU2IHByaXZhdGUgc3BlY2lhbENUUiA9IDA7CgogIAl1aW50MjU2IHByaXZhdGUgY29uc3RhbnQgZWxlbWVudFNUQVJUID0gMTsKICAJdWludDI1NiBwcml2YXRlIGNvbnN0YW50IHNjaWVudGlzdFNUQVJUID0gMTAwMDsKICAJdWludDI1NiBwcml2YXRlIGNvbnN0YW50IHNwZWNpYWxTVEFSVCA9IDEwMDAwOwoKICAJdWludDI1NiBwcml2YXRlIGNvbnN0YW50IHNwZWNpYWxMSU1JVCA9IDUwMDA7CgogIAkvKioqIFNUT1JBR0UgKioqLwoKICAJLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBlbGVtZW50IElEcyB0byB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlbS4gQWxsIGVsZW1lbnRzIGhhdmUKICAJLy8gIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICAJbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgZWxlbWVudEluZGV4VG9Pd25lcjsKCiAgCS8vIEBkZXYgQSBtYXBwaW5nIGZyb20gb3duZXIgYWRkcmVzcyB0byBjb3VudCBvZiB0b2tlbnMgdGhhdCBhZGRyZXNzIG93bnMuCiAgCS8vICBVc2VkIGludGVybmFsbHkgaW5zaWRlIGJhbGFuY2VPZigpIHRvIHJlc29sdmUgb3duZXJzaGlwIGNvdW50LgogIAltYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgb3duZXJzaGlwVG9rZW5Db3VudDsKCiAgCS8vIEBkZXYgQSBtYXBwaW5nIGZyb20gRWxlbWVudElEcyB0byBhbiBhZGRyZXNzIHRoYXQgaGFzIGJlZW4gYXBwcm92ZWQgdG8gY2FsbAogIAkvLyAgdHJhbnNmZXJGcm9tKCkuIEVhY2ggRWxlbWVudCBjYW4gb25seSBoYXZlIG9uZSBhcHByb3ZlZCBhZGRyZXNzIGZvciB0cmFuc2ZlcgogIAkvLyAgYXQgYW55IHRpbWUuIEEgemVybyB2YWx1ZSBtZWFucyBubyBhcHByb3ZhbCBpcyBvdXRzdGFuZGluZy4KICAJbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgZWxlbWVudEluZGV4VG9BcHByb3ZlZDsKCiAgCS8vIEBkZXYgQSBtYXBwaW5nIGZyb20gRWxlbWVudElEcyB0byB0aGUgcHJpY2Ugb2YgdGhlIHRva2VuLgogIAltYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHByaXZhdGUgZWxlbWVudEluZGV4VG9QcmljZTsKCiAgCS8vIFRoZSBhZGRyZXNzZXMgb2YgdGhlIGFjY291bnRzIChvciBjb250cmFjdHMpIHRoYXQgY2FuIGV4ZWN1dGUgYWN0aW9ucyB3aXRoaW4gZWFjaCByb2xlcy4KICAJYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICAJYWRkcmVzcyBwdWJsaWMgY29vQWRkcmVzczsKCiAgCS8qKiogREFUQVRZUEVTICoqKi8KICAJc3RydWN0IEVsZW1lbnQgewogIAkJdWludDI1NiB0b2tlbklkOwogICAgCXN0cmluZyBuYW1lOwogICAgCXVpbnQyNTYgc2NpZW50aXN0SWQ7CiAgCX0KCiAgCW1hcHBpbmcodWludDI1NiA9PiBFbGVtZW50KSBlbGVtZW50czsKCiAgCXVpbnQyNTZbXSB0b2tlbnM7CgogIAkvKioqIEFDQ0VTUyBNT0RJRklFUlMgKioqLwogIAkvLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ0VPLW9ubHkgZnVuY3Rpb25hbGl0eQogIAltb2RpZmllciBvbmx5Q0VPKCkgewogICAgCXJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzKTsKICAgIAlfOwogIAl9CgogIAkvLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ09PLW9ubHkgZnVuY3Rpb25hbGl0eQogIAltb2RpZmllciBvbmx5Q09PKCkgewogIAkgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjb29BZGRyZXNzKTsKICAJICBfOwogIAl9CgogIAkvLyBBY2Nlc3MgbW9kaWZpZXIgZm9yIGNvbnRyYWN0IG93bmVyIG9ubHkgZnVuY3Rpb25hbGl0eQogIAltb2RpZmllciBvbmx5Q0xldmVsKCkgewogIAkgIAlyZXF1aXJlKAogIAkgICAgCW1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyB8fAogIAkgICAgCW1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcwogIAkgIAkpOwogIAkgIAlfOwogIAl9CgogIAkvKioqIENPTlNUUlVDVE9SICoqKi8KICAJZnVuY3Rpb24gRWxlbWVudHMoKSBwdWJsaWMgewogIAkgIAljZW9BZGRyZXNzID0gbXNnLnNlbmRlcjsKICAJICAJY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CgogIAkgIAljcmVhdGVDb250cmFjdFBlcmlvZGljVGFibGUoIlBlcmlvZGljIik7CiAgCX0KCiAgCS8qKiogUFVCTElDIEZVTkNUSU9OUyAqKiovCiAgCS8vIEBub3RpY2UgR3JhbnQgYW5vdGhlciBhZGRyZXNzIHRoZSByaWdodCB0byB0cmFuc2ZlciB0b2tlbiB2aWEgdGFrZU93bmVyc2hpcCgpIGFuZCB0cmFuc2ZlckZyb20oKS4KICAJLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byBiZSBncmFudGVkIHRyYW5zZmVyIGFwcHJvdmFsLiBQYXNzIGFkZHJlc3MoMCkgdG8KICAJLy8gIGNsZWFyIGFsbCBhcHByb3ZhbHMuCiAgCS8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAJLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIAlmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgewogIAkgIAkvLyBDYWxsZXIgbXVzdCBvd24gdG9rZW4uCiAgCSAgCXJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKCQoJICAJZWxlbWVudEluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPSBfdG87CgkKCSAgCUFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogIAl9CgogIAkvLyBGb3IgcXVlcnlpbmcgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudAogIAkvLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZvciBiYWxhbmNlIHF1ZXJ5CiAgCS8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIAlyZXR1cm4gb3duZXJzaGlwVG9rZW5Db3VudFtfb3duZXJdOwogIAl9CgogIAkvLyBAbm90aWNlIFJldHVybnMgYWxsIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGVsZW1lbnQuCiAgCS8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgdG9rZW5JZCBvZiB0aGUgZWxlbWVudCBvZiBpbnRlcmVzdC4KICAJZnVuY3Rpb24gZ2V0RWxlbWVudCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAJCXVpbnQyNTYgdG9rZW5JZCwKICAgIAlzdHJpbmcgZWxlbWVudE5hbWUsCiAgICAJdWludDI1NiBzZWxsaW5nUHJpY2UsCiAgICAJYWRkcmVzcyBvd25lciwKICAgIAl1aW50MjU2IHNjaWVudGlzdElkCiAgCSkgewogICAgCUVsZW1lbnQgc3RvcmFnZSBlbGVtZW50ID0gZWxlbWVudHNbX3Rva2VuSWRdOwogICAgCXRva2VuSWQgPSBlbGVtZW50LnRva2VuSWQ7CiAgICAJZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5hbWU7CiAgICAJc2VsbGluZ1ByaWNlID0gZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF07CiAgICAJb3duZXIgPSBlbGVtZW50SW5kZXhUb093bmVyW190b2tlbklkXTsKICAgIAlzY2llbnRpc3RJZCA9IGVsZW1lbnQuc2NpZW50aXN0SWQ7CiAgCX0KCiAgCWZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICAJcmV0dXJuIHRydWU7CiAgCX0KCiAgCS8vIEZvciBxdWVyeWluZyBvd25lciBvZiB0b2tlbgogIAkvLyBAcGFyYW0gX3Rva2VuSWQgVGhlIHRva2VuSUQgZm9yIG93bmVyIGlucXVpcnkKICAJLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIAlmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpIHsKICAgIAlvd25lciA9IGVsZW1lbnRJbmRleFRvT3duZXJbX3Rva2VuSWRdOwogICAgCXJlcXVpcmUob3duZXIgIT0gYWRkcmVzcygwKSk7CiAgCX0KCiAgCWZ1bmN0aW9uIHBheW91dChhZGRyZXNzIF90bykgcHVibGljIG9ubHlDTGV2ZWwgewogICAgCV9wYXlvdXQoX3RvKTsKICAJfQoKICAJLy8gQWxsb3dzIHNvbWVvbmUgdG8gc2VuZCBldGhlciBhbmQgb2J0YWluIHRoZSB0b2tlbgogIAlmdW5jdGlvbiBwdXJjaGFzZSh1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAJYWRkcmVzcyBvbGRPd25lciA9IGVsZW1lbnRJbmRleFRvT3duZXJbX3Rva2VuSWRdOwogICAgCWFkZHJlc3MgbmV3T3duZXIgPSBtc2cuc2VuZGVyOwoKICAgIAl1aW50MjU2IHNlbGxpbmdQcmljZSA9IGVsZW1lbnRJbmRleFRvUHJpY2VbX3Rva2VuSWRdOwogICAgCS8vIE1ha2luZyBzdXJlIHRva2VuIG93bmVyIGlzIG5vdCBzZW5kaW5nIHRvIHNlbGYKICAgIAlyZXF1aXJlKG9sZE93bmVyICE9IG5ld093bmVyKTsKICAgIAlyZXF1aXJlKHNlbGxpbmdQcmljZSA+IDApOwoKICAgIAkvLyBTYWZldHkgY2hlY2sgdG8gcHJldmVudCBhZ2FpbnN0IGFuIHVuZXhwZWN0ZWQgMHgwIGRlZmF1bHQuCiAgICAJcmVxdWlyZShfYWRkcmVzc05vdE51bGwobmV3T3duZXIpKTsKCiAgICAJLy8gTWFraW5nIHN1cmUgc2VudCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzZWxsaW5nUHJpY2UKICAgIAlyZXF1aXJlKG1zZy52YWx1ZSA+PSBzZWxsaW5nUHJpY2UpOwoKICAgIAl1aW50MjU2IG93bmVyUGF5b3V0ID0gU2FmZU1hdGgubXVsKFNhZmVNYXRoLmRpdihzZWxsaW5nUHJpY2UsIDEwMCksIDk2KTsKICAgIAl1aW50MjU2IHB1cmNoYXNlRXhjZXNzID0gU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgc2VsbGluZ1ByaWNlKTsKICAgIAl1aW50MjU2CWZlZU9uY2UgPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGguc3ViKHNlbGxpbmdQcmljZSwgb3duZXJQYXlvdXQpLCA0KTsKICAgIAl1aW50MjU2IGZlZV9mb3JfZGV2ID0gU2FmZU1hdGgubXVsKGZlZU9uY2UsIDIpOwoKICAgIAkvLyBQYXkgcHJldmlvdXMgdG9rZW5Pd25lciBpZiBvd25lciBpcyBub3QgY29udHJhY3QKICAgIAkvLyBhbmQgaWYgcHJldmlvdXMgcHJpY2UgaXMgbm90IDAKICAgIAlpZiAob2xkT3duZXIgIT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAJCS8vIG9sZCBvd25lciBnZXRzIGVudGlyZSBpbml0aWFsIHBheW1lbnQgYmFjawogICAgICAJCW9sZE93bmVyLnRyYW5zZmVyKG93bmVyUGF5b3V0KTsKICAgIAl9IGVsc2UgewogICAgICAJCWZlZV9mb3JfZGV2ID0gU2FmZU1hdGguYWRkKGZlZV9mb3JfZGV2LCBvd25lclBheW91dCk7CiAgICAJfQoKICAgIAkvLyBUYXhlcyBmb3IgUGVyaW9kaWMgVGFibGUgb3duZXIKCSAgICBpZiAoZWxlbWVudEluZGV4VG9Pd25lclswXSAhPSBhZGRyZXNzKHRoaXMpKSB7CgkgICAgCWVsZW1lbnRJbmRleFRvT3duZXJbMF0udHJhbnNmZXIoZmVlT25jZSk7CgkgICAgfSBlbHNlIHsKCSAgICAJZmVlX2Zvcl9kZXYgPSBTYWZlTWF0aC5hZGQoZmVlX2Zvcl9kZXYsIGZlZU9uY2UpOwoJICAgIH0KCgkgICAgLy8gVGF4ZXMgZm9yIFNjaWVudGlzdCBPd25lciBmb3IgZ2l2ZW4gRWxlbWVudAoJICAgIHVpbnQyNTYgc2NpZW50aXN0SWQgPSBlbGVtZW50c1tfdG9rZW5JZF0uc2NpZW50aXN0SWQ7CgoJICAgIGlmICggc2NpZW50aXN0SWQgIT0gc2NpZW50aXN0U1RBUlQgKSB7CgkgICAgCWlmIChlbGVtZW50SW5kZXhUb093bmVyW3NjaWVudGlzdElkXSAhPSBhZGRyZXNzKHRoaXMpKSB7CgkJICAgIAllbGVtZW50SW5kZXhUb093bmVyW3NjaWVudGlzdElkXS50cmFuc2ZlcihmZWVPbmNlKTsKCQkgICAgfSBlbHNlIHsKCQkgICAgCWZlZV9mb3JfZGV2ID0gU2FmZU1hdGguYWRkKGZlZV9mb3JfZGV2LCBmZWVPbmNlKTsKCQkgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgCWZlZV9mb3JfZGV2ID0gU2FmZU1hdGguYWRkKGZlZV9mb3JfZGV2LCBmZWVPbmNlKTsKCSAgICB9CgkgICAgICAgIAogICAgCWlmIChwdXJjaGFzZUV4Y2VzcyA+IDApIHsKICAgIAkJbXNnLnNlbmRlci50cmFuc2ZlcihwdXJjaGFzZUV4Y2Vzcyk7CiAgICAJfQoKICAgIAljZW9BZGRyZXNzLnRyYW5zZmVyKGZlZV9mb3JfZGV2KTsKCiAgICAJX3RyYW5zZmVyKG9sZE93bmVyLCBuZXdPd25lciwgX3Rva2VuSWQpOwoKICAgIAkvL1Rva2VuU29sZChfdG9rZW5JZCwgc2VsbGluZ1ByaWNlLCBlbGVtZW50SW5kZXhUb1ByaWNlW190b2tlbklkXSwgb2xkT3duZXIsIG5ld093bmVyLCBlbGVtZW50c1tfdG9rZW5JZF0ubmFtZSk7CiAgICAJLy8gVXBkYXRlIHByaWNlcwogICAgCWlmIChzZWxsaW5nUHJpY2UgPCBmaXJzdFN0ZXBMaW1pdCkgewogICAgICAJCS8vIGZpcnN0IHN0YWdlCiAgICAgIAkJZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgMjAwKSwgMTAwKTsKICAgIAl9IGVsc2UgaWYgKHNlbGxpbmdQcmljZSA8IHNlY29uZFN0ZXBMaW1pdCkgewogICAgICAJCS8vIHNlY29uZCBzdGFnZQogICAgICAJCWVsZW1lbnRJbmRleFRvUHJpY2VbX3Rva2VuSWRdID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIDE1MCksIDEwMCk7CiAgICAJfSBlbHNlIGlmIChzZWxsaW5nUHJpY2UgPCB0aGlyZFN0ZXBMaW1pdCkgewogICAgCSAgCS8vIHRoaXJkIHN0YWdlCiAgICAgIAkJZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKHNlbGxpbmdQcmljZSwgMTMwKSwgMTAwKTsKICAgIAl9IGVsc2UgewogICAgICAJCS8vIGZvdXJ0aCBzdGFnZQogICAgICAJCWVsZW1lbnRJbmRleFRvUHJpY2VbX3Rva2VuSWRdID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIDExNSksIDEwMCk7CiAgICAJfQogIAl9CgogIAlmdW5jdGlvbiBwcmljZU9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgcHJpY2UpIHsKCSAgICByZXR1cm4gZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF07CiAgCX0KCiAgCS8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ0VPLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDRU8uCiAgCS8vIEBwYXJhbSBfbmV3Q0VPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0VPCiAgCWZ1bmN0aW9uIHNldENFTyhhZGRyZXNzIF9uZXdDRU8pIHB1YmxpYyBvbmx5Q0VPIHsKCSAgICByZXF1aXJlKF9uZXdDRU8gIT0gYWRkcmVzcygwKSk7CgogICAgCWNlb0FkZHJlc3MgPSBfbmV3Q0VPOwogIAl9CgogIAkvLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENPTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ09PLgogIAkvLyBAcGFyYW0gX25ld0NPTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENPTwogIAlmdW5jdGlvbiBzZXRDT08oYWRkcmVzcyBfbmV3Q09PKSBwdWJsaWMgb25seUNFTyB7CiAgICAJcmVxdWlyZShfbmV3Q09PICE9IGFkZHJlc3MoMCkpOwogICAgCWNvb0FkZHJlc3MgPSBfbmV3Q09POwogIAl9CgogIAkvLyBAbm90aWNlIEFsbG93IHByZS1hcHByb3ZlZCB1c2VyIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgdG9rZW4KICAJLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgVG9rZW4gdGhhdCBjYW4gYmUgdHJhbnNmZXJyZWQgaWYgdGhpcyBjYWxsIHN1Y2NlZWRzLgogIAkvLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgCWZ1bmN0aW9uIHRha2VPd25lcnNoaXAodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIAlhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgIAlhZGRyZXNzIG9sZE93bmVyID0gZWxlbWVudEluZGV4VG9Pd25lcltfdG9rZW5JZF07CgogICAgCS8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgIAlyZXF1aXJlKF9hZGRyZXNzTm90TnVsbChuZXdPd25lcikpOwoKICAgIAkvLyBNYWtpbmcgc3VyZSB0cmFuc2ZlciBpcyBhcHByb3ZlZAogICAgCXJlcXVpcmUoX2FwcHJvdmVkKG5ld093bmVyLCBfdG9rZW5JZCkpOwoKICAgIAlfdHJhbnNmZXIob2xkT3duZXIsIG5ld093bmVyLCBfdG9rZW5JZCk7CiAgCX0KCiAgCS8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIHdob3NlIGVsZW1lbnQgdG9rZW5zIHdlIGFyZSBpbnRlcmVzdGVkIGluLgogIAkvLyBAZGV2IFRoaXMgbWV0aG9kIE1VU1QgTkVWRVIgYmUgY2FsbGVkIGJ5IHNtYXJ0IGNvbnRyYWN0IGNvZGUuIEZpcnN0LCBpdCdzIGZhaXJseQogIAkvLyAgZXhwZW5zaXZlIChpdCB3YWxrcyB0aGUgZW50aXJlIEVsZW1lbnRzIGFycmF5IGxvb2tpbmcgZm9yIGVsZW1lbnRzIGJlbG9uZ2luZyB0byBvd25lciksCiAgCS8vICBidXQgaXQgYWxzbyByZXR1cm5zIGEgZHluYW1pYyBhcnJheSwgd2hpY2ggaXMgb25seSBzdXBwb3J0ZWQgZm9yIHdlYjMgY2FsbHMsIGFuZAogIAkvLyAgbm90IGNvbnRyYWN0LXRvLWNvbnRyYWN0IGNhbGxzLgogIAlmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTZbXSBvd25lclRva2VucykgewogICAgCXVpbnQyNTYgdG9rZW5Db3VudCA9IGJhbGFuY2VPZihfb3duZXIpOwogICAgCWlmICh0b2tlbkNvdW50ID09IDApIHsKICAgICAgICAJLy8gUmV0dXJuIGFuIGVtcHR5IGFycmF5CiAgICAgIAkJcmV0dXJuIG5ldyB1aW50MjU2W10oMCk7CiAgICAJfSBlbHNlIHsKICAgICAgCQl1aW50MjU2W10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50MjU2W10odG9rZW5Db3VudCk7CiAgICAgIAkJdWludDI1NiB0b3RhbEVsZW1lbnRzID0gdG90YWxTdXBwbHkoKTsKICAgICAgCQl1aW50MjU2IHJlc3VsdEluZGV4ID0gMDsKICAgICAgCQl1aW50MjU2IGVsZW1lbnRJZDsKICAgICAgCQlmb3IgKGVsZW1lbnRJZCA9IDA7IGVsZW1lbnRJZCA8IHRvdGFsRWxlbWVudHM7IGVsZW1lbnRJZCsrKSB7CiAgICAgIAkJCXVpbnQyNTYgdG9rZW5JZCA9IHRva2Vuc1tlbGVtZW50SWRdOwoKCQkgICAgICAgIGlmIChlbGVtZW50SW5kZXhUb093bmVyW3Rva2VuSWRdID09IF9vd25lcikgewoJCSAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gdG9rZW5JZDsKCQkgICAgICAgICAgcmVzdWx0SW5kZXgrKzsKCQkgICAgICAgIH0KICAgICAgCQl9CiAgICAgIAkJcmV0dXJuIHJlc3VsdDsKICAgIAl9CiAgCX0KCiAgCS8vIEZvciBxdWVyeWluZyB0b3RhbFN1cHBseSBvZiB0b2tlbgogIAkvLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCkgewogICAgCXJldHVybiB0b2tlbnMubGVuZ3RoOwogIAl9CgogIAkvLyBPd25lciBpbml0YXRlcyB0aGUgdHJhbnNmZXIgb2YgdGhlIHRva2VuIHRvIGFub3RoZXIgYWNjb3VudAogIAkvLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgdG8uCiAgCS8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFRva2VuIHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAJLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogIAlmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQgKSBwdWJsaWMgewogICAJCXJlcXVpcmUoX293bnMobXNnLnNlbmRlciwgX3Rva2VuSWQpKTsKICAgIAlyZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKICAgIAlfdHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgCX0KCiAgCS8vIFRoaXJkLXBhcnR5IGluaXRpYXRlcyB0cmFuc2ZlciBvZiB0b2tlbiBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8KICAJLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIGZvciB0aGUgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQgZnJvbS4KICAJLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBmb3IgdGhlIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkIHRvLgogIAkvLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgCS8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljIHsKICAgIAlyZXF1aXJlKF9vd25zKF9mcm9tLCBfdG9rZW5JZCkpOwogICAgCXJlcXVpcmUoX2FwcHJvdmVkKF90bywgX3Rva2VuSWQpKTsKICAgIAlyZXF1aXJlKF9hZGRyZXNzTm90TnVsbChfdG8pKTsKICAgIAlfdHJhbnNmZXIoX2Zyb20sIF90bywgX3Rva2VuSWQpOwogIAl9CgogIAkvKioqIFBSSVZBVEUgRlVOQ1RJT05TICoqKi8KICAJLy8gU2FmZXR5IGNoZWNrIG9uIF90byBhZGRyZXNzIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogIAlmdW5jdGlvbiBfYWRkcmVzc05vdE51bGwoYWRkcmVzcyBfdG8pIHByaXZhdGUgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICAJcmV0dXJuIF90byAhPSBhZGRyZXNzKDApOwogIAl9CgogIAkvLyBGb3IgY2hlY2tpbmcgYXBwcm92YWwgb2YgdHJhbnNmZXIgZm9yIGFkZHJlc3MgX3RvCglmdW5jdGlvbiBfYXBwcm92ZWQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHByaXZhdGUgdmlldyByZXR1cm5zIChib29sKSB7CgkJcmV0dXJuIGVsZW1lbnRJbmRleFRvQXBwcm92ZWRbX3Rva2VuSWRdID09IF90bzsKCX0KCiAgCS8vIFByaXZhdGUgbWV0aG9kIGZvciBjcmVhdGluZyBFbGVtZW50CiAgCWZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50KHVpbnQyNTYgX2lkLCBzdHJpbmcgX25hbWUsIGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfc2NpZW50aXN0SWQpIHByaXZhdGUgcmV0dXJucyAoc3RyaW5nKSB7CgogICAgCXVpbnQyNTYgbmV3RWxlbWVudElkID0gX2lkOwogICAgCS8vIEl0J3MgcHJvYmFibHkgbmV2ZXIgZ29pbmcgdG8gaGFwcGVuLCA0IGJpbGxpb24gdG9rZW5zIGFyZSBBIExPVCwgYnV0CiAgICAJLy8gbGV0J3MganVzdCBiZSAxMDAlIHN1cmUgd2UgbmV2ZXIgbGV0IHRoaXMgaGFwcGVuLgogICAgCXJlcXVpcmUobmV3RWxlbWVudElkID09IHVpbnQyNTYodWludDMyKG5ld0VsZW1lbnRJZCkpKTsKCiAgICAJZWxlbWVudHNbX2lkXSA9IEVsZW1lbnQoX2lkLCBfbmFtZSwgX3NjaWVudGlzdElkKTsKCiAgICAJQmlydGgobmV3RWxlbWVudElkLCBfbmFtZSwgX293bmVyKTsKCiAgICAJZWxlbWVudEluZGV4VG9QcmljZVtuZXdFbGVtZW50SWRdID0gX3ByaWNlOwoKICAgIAkvLyBUaGlzIHdpbGwgYXNzaWduIG93bmVyc2hpcCwgYW5kIGFsc28gZW1pdCB0aGUgVHJhbnNmZXIgZXZlbnQgYXMKICAgIAkvLyBwZXIgRVJDNzIxIGRyYWZ0CiAgICAJX3RyYW5zZmVyKGFkZHJlc3MoMCksIF9vd25lciwgbmV3RWxlbWVudElkKTsKCiAgICAJdG9rZW5zLnB1c2goX2lkKTsKCiAgICAJcmV0dXJuIF9uYW1lOwogIAl9CgoKICAJLy8gQGRldiBDcmVhdGVzIFBlcmlvZGljIFRhYmxlIGFzIGZpcnN0IGVsZW1lbnQKICAJZnVuY3Rpb24gY3JlYXRlQ29udHJhY3RQZXJpb2RpY1RhYmxlKHN0cmluZyBfbmFtZSkgcHVibGljIG9ubHlDRU8gewogIAkJcmVxdWlyZShwZXJpb2RpY1RhYmxlRXhpc3RzID09IGZhbHNlKTsKCiAgCQlfY3JlYXRlRWxlbWVudCgwLCBfbmFtZSwgYWRkcmVzcyh0aGlzKSwgcGVyaW9kaWNTdGFydGluZ1ByaWNlLCBzY2llbnRpc3RTVEFSVCk7CiAgCQlwZXJpb2RpY1RhYmxlRXhpc3RzID0gdHJ1ZTsKICAJfQoKICAJLy8gQGRldiBDcmVhdGVzIGEgbmV3IEVsZW1lbnQgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgSWQKICAJZnVuY3Rpb24gY3JlYXRlQ29udHJhY3RFbGVtZW50KHN0cmluZyBfbmFtZSwgdWludDI1NiBfc2NpZW50aXN0SWQpIHB1YmxpYyBvbmx5Q0VPIHsKICAJCXJlcXVpcmUocGVyaW9kaWNUYWJsZUV4aXN0cyA9PSB0cnVlKTsKCiAgICAJdWludDI1NiBfaWQgPSBTYWZlTWF0aC5hZGQoZWxlbWVudENUUiwgZWxlbWVudFNUQVJUKTsKICAgIAl1aW50MjU2IF9zY2llbnRpc3RJZFByb2Nlc3NlZCA9IFNhZmVNYXRoLmFkZChfc2NpZW50aXN0SWQsIHNjaWVudGlzdFNUQVJUKTsKCiAgICAJX2NyZWF0ZUVsZW1lbnQoX2lkLCBfbmFtZSwgYWRkcmVzcyh0aGlzKSwgZWxlbWVudFN0YXJ0aW5nUHJpY2UsIF9zY2llbnRpc3RJZFByb2Nlc3NlZCk7CiAgICAJZWxlbWVudENUUiA9IFNhZmVNYXRoLmFkZChlbGVtZW50Q1RSLCAxKTsKICAJfQoKICAJLy8gQGRldiBDcmVhdGVzIGEgbmV3IFNjaWVudGlzdCB3aXRoIHRoZSBnaXZlbiBuYW1lIElkCiAgCWZ1bmN0aW9uIGNyZWF0ZUNvbnRyYWN0U2NpZW50aXN0KHN0cmluZyBfbmFtZSkgcHVibGljIG9ubHlDRU8gewogIAkJcmVxdWlyZShwZXJpb2RpY1RhYmxlRXhpc3RzID09IHRydWUpOwoKICAJCS8vIHRvIHN0YXJ0IGZyb20gMTAwMQogIAkJc2NpZW50aXN0Q1RSID0gU2FmZU1hdGguYWRkKHNjaWVudGlzdENUUiwgMSk7CiAgICAJdWludDI1NiBfaWQgPSBTYWZlTWF0aC5hZGQoc2NpZW50aXN0Q1RSLCBzY2llbnRpc3RTVEFSVCk7CiAgICAJCiAgICAJX2NyZWF0ZUVsZW1lbnQoX2lkLCBfbmFtZSwgYWRkcmVzcyh0aGlzKSwgc2NpZW50aXN0U3RhcnRpbmdQcmljZSwgc2NpZW50aXN0U1RBUlQpOwkKICAJfQoKICAJLy8gQGRldiBDcmVhdGVzIGEgbmV3IFNwZWNpYWwgQ2FyZCB3aXRoIHRoZSBnaXZlbiBuYW1lIElkCiAgCWZ1bmN0aW9uIGNyZWF0ZUNvbnRyYWN0U3BlY2lhbChzdHJpbmcgX25hbWUpIHB1YmxpYyBvbmx5Q0VPIHsKICAJCXJlcXVpcmUocGVyaW9kaWNUYWJsZUV4aXN0cyA9PSB0cnVlKTsKICAJCXJlcXVpcmUoc3BlY2lhbENUUiA8PSBzcGVjaWFsTElNSVQpOwoKICAJCS8vIHRvIHN0YXJ0IGZyb20gMTAwMDEKICAJCXNwZWNpYWxDVFIgPSBTYWZlTWF0aC5hZGQoc3BlY2lhbENUUiwgMSk7CiAgICAJdWludDI1NiBfaWQgPSBTYWZlTWF0aC5hZGQoc3BlY2lhbENUUiwgc3BlY2lhbFNUQVJUKTsKCiAgICAJX2NyZWF0ZUVsZW1lbnQoX2lkLCBfbmFtZSwgYWRkcmVzcyh0aGlzKSwgc3BlY2lhbFN0YXJ0aW5nUHJpY2UsIHNjaWVudGlzdFNUQVJUKTsKICAgIAkKICAJfQoKICAJLy8gQ2hlY2sgZm9yIHRva2VuIG93bmVyc2hpcAogIAlmdW5jdGlvbiBfb3ducyhhZGRyZXNzIGNsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgCXJldHVybiBjbGFpbWFudCA9PSBlbGVtZW50SW5kZXhUb093bmVyW190b2tlbklkXTsKICAJfQoKCiAgCS8vKioqKiBIRUxQRVJTIGZvciBjaGVja2luZyBlbGVtZW50cywgc2NpZW50aXN0cyBhbmQgc3BlY2lhbCBjYXJkcwogIAlmdW5jdGlvbiBjaGVja1BlcmlvZGljKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCkgewogIAkJcmV0dXJuIHBlcmlvZGljVGFibGVFeGlzdHM7CiAgCX0KCiAgCWZ1bmN0aW9uIGdldFRvdGFsRWxlbWVudHMoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgCQlyZXR1cm4gZWxlbWVudENUUjsKICAJfQoKICAJZnVuY3Rpb24gZ2V0VG90YWxTY2llbnRpc3RzKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogIAkJcmV0dXJuIHNjaWVudGlzdENUUjsKICAJfQoKICAJZnVuY3Rpb24gZ2V0VG90YWxTcGVjaWFscygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAJCXJldHVybiBzcGVjaWFsQ1RSOwogIAl9CgogIAkvLyoqKiogSEVMUEVSUyBmb3IgY2hhbmdpbmcgcHJpY2VzIGxpbWl0cyBhbmQgc3RlcHMgaWYgaXQgd291bGQgYmUgYmFkLCBjb21tdW5pdHkgd291bGQgbGlrZSBkaWZmZXJlbnQKICAJZnVuY3Rpb24gY2hhbmdlU3RhcnRpbmdQcmljZXNMaW1pdHModWludDI1NiBfZWxlbWVudFN0YXJ0UHJpY2UsIHVpbnQyNTYgX3NjaWVudGlzdFN0YXJ0UHJpY2UsIHVpbnQyNTYgX3NwZWNpYWxTdGFydFByaWNlKSBwdWJsaWMgb25seUNFTyB7CiAgCQllbGVtZW50U3RhcnRpbmdQcmljZSA9IF9lbGVtZW50U3RhcnRQcmljZTsKICAJCXNjaWVudGlzdFN0YXJ0aW5nUHJpY2UgPSBfc2NpZW50aXN0U3RhcnRQcmljZTsKICAJCXNwZWNpYWxTdGFydGluZ1ByaWNlID0gX3NwZWNpYWxTdGFydFByaWNlOwoJfQoKCWZ1bmN0aW9uIGNoYW5nZVN0ZXBQcmljZXNMaW1pdHModWludDI1NiBfZmlyc3QsIHVpbnQyNTYgX3NlY29uZCwgdWludDI1NiBfdGhpcmQpIHB1YmxpYyBvbmx5Q0VPIHsKCQlmaXJzdFN0ZXBMaW1pdCA9IF9maXJzdDsKCQlzZWNvbmRTdGVwTGltaXQgPSBfc2Vjb25kOwoJCXRoaXJkU3RlcExpbWl0ID0gX3RoaXJkOwoJfQoKCS8vIGluIGNhc2Ugb2YgZXJyb3Igd2hlbiBhc3NpZ25pbmcgc2NpZW50aXN0IHRvIGdpdmVuIGVsZW1lbnQKCWZ1bmN0aW9uIGNoYW5nZVNjaWVudGlzdEZvckVsZW1lbnQodWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBfc2NpZW50aXN0SWQpIHB1YmxpYyBvbmx5Q0VPIHsKICAgIAlFbGVtZW50IHN0b3JhZ2UgZWxlbWVudCA9IGVsZW1lbnRzW190b2tlbklkXTsKICAgIAllbGVtZW50LnNjaWVudGlzdElkID0gU2FmZU1hdGguYWRkKF9zY2llbnRpc3RJZCwgc2NpZW50aXN0U1RBUlQpOwogIAl9CgogIAlmdW5jdGlvbiBjaGFuZ2VFbGVtZW50TmFtZSh1aW50MjU2IF90b2tlbklkLCBzdHJpbmcgX25hbWUpIHB1YmxpYyBvbmx5Q0VPIHsKICAgIAlFbGVtZW50IHN0b3JhZ2UgZWxlbWVudCA9IGVsZW1lbnRzW190b2tlbklkXTsKICAgIAllbGVtZW50Lm5hbWUgPSBfbmFtZTsKICAJfQoKICAJLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCBieSB0aGUgb3duZXIgb2YgYSB0b2tlbiB0byBtb2RpZnkgdGhlIGN1cnJlbnQgcHJpY2UKCWZ1bmN0aW9uIG1vZGlmeVRva2VuUHJpY2UodWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBfbmV3UHJpY2UpIHB1YmxpYyBwYXlhYmxlIHsKCSAgICByZXF1aXJlKF9uZXdQcmljZSA+IGVsZW1lbnRTdGFydGluZ1ByaWNlKTsKCSAgICByZXF1aXJlKGVsZW1lbnRJbmRleFRvT3duZXJbX3Rva2VuSWRdID09IG1zZy5zZW5kZXIpOwoJICAgIHJlcXVpcmUoX25ld1ByaWNlIDwgZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF0pOwoKCSAgICBpZiAoIF90b2tlbklkID09IDApIHsKCSAgICAJcmVxdWlyZShfbmV3UHJpY2UgPiBwZXJpb2RpY1N0YXJ0aW5nUHJpY2UpOwoJICAgIH0gZWxzZSBpZiAoIF90b2tlbklkIDwgMTAwMCkgewoJICAgIAlyZXF1aXJlKF9uZXdQcmljZSA+IGVsZW1lbnRTdGFydGluZ1ByaWNlKTsKCSAgICB9IGVsc2UgaWYgKCBfdG9rZW5JZCA8IDEwMDAwICkgewoJICAgIAlyZXF1aXJlKF9uZXdQcmljZSA+IHNjaWVudGlzdFN0YXJ0aW5nUHJpY2UpOwoJICAgIH0gZWxzZSB7CgkgICAgCXJlcXVpcmUoX25ld1ByaWNlID4gc3BlY2lhbFN0YXJ0aW5nUHJpY2UpOwoJICAgIH0KCgkgICAgZWxlbWVudEluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBfbmV3UHJpY2U7Cgl9CgogIAkvLyBGb3IgcGF5aW5nIG91dCBiYWxhbmNlIG9uIGNvbnRyYWN0CiAgCWZ1bmN0aW9uIF9wYXlvdXQoYWRkcmVzcyBfdG8pIHByaXZhdGUgewogICAgCWlmIChfdG8gPT0gYWRkcmVzcygwKSkgewogICAgICAJCWNlb0FkZHJlc3MudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIAl9IGVsc2UgewogICAgICAJCV90by50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgCX0KICAJfQoKICAJLy8gQGRldiBBc3NpZ25zIG93bmVyc2hpcCBvZiBhIHNwZWNpZmljIEVsZW1lbnQgdG8gYW4gYWRkcmVzcy4KICAJZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwcml2YXRlIHsKICAJICAJLy8gU2luY2UgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpcyBjYXBwZWQgdG8gMl4zMiB3ZSBjYW4ndCBvdmVyZmxvdyB0aGlzCiAgCSAgCW93bmVyc2hpcFRva2VuQ291bnRbX3RvXSsrOwogIAkgIAkvL3RyYW5zZmVyIG93bmVyc2hpcAogIAkgIAllbGVtZW50SW5kZXhUb093bmVyW190b2tlbklkXSA9IF90bzsKICAJICAJLy8gV2hlbiBjcmVhdGluZyBuZXcgZWxlbWVudHMgX2Zyb20gaXMgMHgwLCBidXQgd2UgY2FuJ3QgYWNjb3VudCB0aGF0IGFkZHJlc3MuCiAgCSAgCWlmIChfZnJvbSAhPSBhZGRyZXNzKDApKSB7CiAgCSAgICAJb3duZXJzaGlwVG9rZW5Db3VudFtfZnJvbV0tLTsKICAJICAgIAkvLyBjbGVhciBhbnkgcHJldmlvdXNseSBhcHByb3ZlZCBvd25lcnNoaXAgZXhjaGFuZ2UKICAJICAgIAlkZWxldGUgZWxlbWVudEluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgCSAgCX0KICAJICAJLy8gRW1pdCB0aGUgdHJhbnNmZXIgZXZlbnQuCiAgCSAgCVRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAJfQp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgCS8qKgogIAkqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogIAkqLwoJZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKCQlpZiAoYSA9PSAwKSB7CgkJICByZXR1cm4gMDsKCQl9CgkJdWludDI1NiBjID0gYSAqIGI7CgkJYXNzZXJ0KGMgLyBhID09IGIpOwoJCXJldHVybiBjOwoJfQoKICAJLyoqCiAgCSogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAJKi8KICAJZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIAkvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIAl1aW50MjU2IGMgPSBhIC8gYjsKICAgIAkvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgCXJldHVybiBjOwogIAl9CgogIAkvKioKICAJKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAJKi8KICAJZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIAlhc3NlcnQoYiA8PSBhKTsKICAgIAlyZXR1cm4gYSAtIGI7CiAgCX0KCiAgCS8qKgogIAkqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogIAkqLwogIAlmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgCXVpbnQyNTYgYyA9IGEgKyBiOwogICAgCWFzc2VydChjID49IGEpOwogICAgCXJldHVybiBjOwogIAl9Cn0='.
	

]
