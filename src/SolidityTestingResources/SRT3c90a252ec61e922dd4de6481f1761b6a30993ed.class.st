Class {
	#name : #SRT3c90a252ec61e922dd4de6481f1761b6a30993ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c90a252ec61e922dd4de6481f1761b6a30993ed >> base64 [
	^ ''.
	

]
