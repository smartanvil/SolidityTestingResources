Class {
	#name : #SRT29aa20fB9b23421E310BDB8a7cfB81d7fbB4a1b3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT29aa20fB9b23421E310BDB8a7cfB81d7fbB4a1b3 >> base64 [
	^ ''.
	

]
