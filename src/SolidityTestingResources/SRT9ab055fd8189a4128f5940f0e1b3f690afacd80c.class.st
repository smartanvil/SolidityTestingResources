Class {
	#name : #SRT9ab055fd8189a4128f5940f0e1b3f690afacd80c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9ab055fd8189a4128f5940f0e1b3f690afacd80c >> base64 [
	^ ''.
	

]
