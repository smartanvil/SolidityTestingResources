Class {
	#name : #SRT05a0b0eadd54d13ef3fe015f2ede197a822bc8fc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT05a0b0eadd54d13ef3fe015f2ede197a822bc8fc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8pOwoKICAgIGZ1bmN0aW9uIE93bmVkKCkgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5T3duZXIgewogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KfQoKY29udHJhY3QgRVJDMjAgaXMgT3duZWQgewoKICAgIC8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgX2Zyb20KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgd2hpY2ggX3NwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgLy8gVHJpZ2dlcmVkIHdoZW4gdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZC4KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgVGhhbmtZb3VUb2tlbiBpcyBFUkMyMCB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICAvLyBUb3RhbCBhbW91bnQgb2YgdG9rZW4KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vIEJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLy9GaXggZm9yIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjawogICAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQyNTYgc2l6ZSkgewogICAgICAgIGFzc2VydChtc2cuZGF0YS5sZW5ndGggPj0gc2l6ZSArIDQpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlCiAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlIC8vdGhlIHRyYW5zZmVyIGlzIGFwcHJvdmVkCiAgICAgICAgJiYgX3ZhbHVlID4gMAogICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CgogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICAgPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CgogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyKjMyKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgX3ZhbHVlIGZyb20gb3duZXIncyBhY2NvdW50IChtc2cuc2VuZGVyKSB0byBhbm90aGVyIGFjY291bnQgKF90bykKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7CgogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCgogICAgc3RyaW5nIHB1YmxpYyB0aGFua1lvdSAgPSAiVGhhbmtZb3UhIjsKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOwogICAgdWludDI1NiBwdWJsaWMgZGVjaW1hbHMgPSAxODsKCiAgICBmdW5jdGlvbiBUaGFua1lvdVRva2VuKHVpbnQyNTYgX2luaXRpYWxTdXBwbHkpIHsKICAgICAgICBuYW1lID0gIlRoYW5rWW91ISBUb2tlbiI7CiAgICAgICAgc3ltYm9sID0gIlRZVCI7CiAgICAgICAgdG90YWxTdXBwbHkgPSBfaW5pdGlhbFN1cHBseTsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9pbml0aWFsU3VwcGx5OwogICAgfQogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAvL051bWJlciBvZiBwdXJjaGFzZXMgcGVyIGFkZHJlc3MKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBudW1QdXJjaGFzZXNQZXJBZGRyZXNzOwoKICAgIGJvb2wgcHVibGljIGNyb3dkc2FsZUNsb3NlZCA9IHRydWU7CiAgICB1aW50MjU2IGJvbnVzTXVsdGlwbGllciAgICAgICAgICAgICA9IDUwICogMTAqKmRlY2ltYWxzOwogICAgdWludDI1NiBwdWJsaWMgYm9udXNUb2tlbnNJc3N1ZWQgICAgPSAwOwogICAgdWludDI1NiBwdWJsaWMgZnJlZVRva2Vuc0F2YWlsYWJsZSAgPSAxMDAwMCAqIDEwKipkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIGZyZWVUb2tlbnNJc3N1ZWQgICAgID0gMDsKICAgIHVpbnQyNTYgZnJlZVRva2Vuc1BlckFkZHJlc3MgICAgICAgID0gMiAqIDEwKipkZWNpbWFsczsKICAgIHVpbnQyNTYgcHVibGljIGNvbnRyaWJ1dGlvbiAgICAgICAgID0gMDsKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsVG9rZW5zSXNzdWVkICAgID0gMDsKICAgIC8vIEFjY291bnRzIHRoYXQgaGF2ZSByZWNlaXZlZCB0aGUgMiBUWVQgZm9yIGZyZWUKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBhZGRyZXNzQm9udXNSZWNlaXZlZDsKCiAgICBldmVudCBCb251c1Rva2VucyhhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYm9udXNUb2tlbik7CiAgICBldmVudCBGcmVlVG9rZW5zSXNzdWVkKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBGcmVlVG9rZW5BZGRlZChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gb3BlbkNyb3dkc2FsZSgpIG9ubHlPd25lciB7CiAgICAgICAgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gc3RvcENyb3dkc2FsZSgpIG9ubHlPd25lciB7CiAgICAgICAgY3Jvd2RzYWxlQ2xvc2VkID0gdHJ1ZTsKICAgIH0KCgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBpZihtc2cudmFsdWUgPT0gMCl7CiAgICAgICAgICAgIGFzc2VydCghYWRkcmVzc0JvbnVzUmVjZWl2ZWRbbXNnLnNlbmRlcl0pOwogICAgICAgICAgICBhc3NlcnQoZnJlZVRva2Vuc0F2YWlsYWJsZSA+PSBmcmVlVG9rZW5zUGVyQWRkcmVzcyk7CiAgICAgICAgICAgIGFzc2VydChiYWxhbmNlc1tvd25lcl0gPj0gZnJlZVRva2Vuc1BlckFkZHJlc3MpOwoKICAgICAgICAgICAgYWRkcmVzc0JvbnVzUmVjZWl2ZWRbbXNnLnNlbmRlcl0gPSB0cnVlOwoKICAgICAgICAgICAgZnJlZVRva2Vuc0F2YWlsYWJsZSA9IGZyZWVUb2tlbnNBdmFpbGFibGUuc3ViKGZyZWVUb2tlbnNQZXJBZGRyZXNzKTsKICAgICAgICAgICAgZnJlZVRva2Vuc0lzc3VlZCAgICA9IGZyZWVUb2tlbnNJc3N1ZWQuYWRkKGZyZWVUb2tlbnNQZXJBZGRyZXNzKTsKCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uYWRkKGZyZWVUb2tlbnNQZXJBZGRyZXNzKTsKICAgICAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gYmFsYW5jZXNbb3duZXJdLnN1YihmcmVlVG9rZW5zUGVyQWRkcmVzcyk7CgogICAgICAgICAgICB0b3RhbFRva2Vuc0lzc3VlZCA9IHRvdGFsVG9rZW5zSXNzdWVkLmFkZChmcmVlVG9rZW5zUGVyQWRkcmVzcyk7CgogICAgICAgICAgICBGcmVlVG9rZW5zSXNzdWVkKG93bmVyLCBtc2cuc2VuZGVyLCBmcmVlVG9rZW5zUGVyQWRkcmVzcyk7CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFzc2VydCghY3Jvd2RzYWxlQ2xvc2VkKTsKCiAgICAgICAgICAgIC8vIDEgRVRIID0gMTAwMCBUaGFua1lvdSB0b2tlbnMKICAgICAgICAgICAgdWludDI1NiB0b2tlbnNTZW50ID0gKG1zZy52YWx1ZSAqIDEwMDApOwogICAgICAgICAgICBhc3NlcnQoYmFsYW5jZXNbb3duZXJdID49IHRva2Vuc1NlbnQpOwoKICAgICAgICAgICAgaWYobXNnLnZhbHVlID49IDUwIGZpbm5leSl7CiAgICAgICAgICAgICAgICBudW1QdXJjaGFzZXNQZXJBZGRyZXNzW21zZy5zZW5kZXJdID0gbnVtUHVyY2hhc2VzUGVyQWRkcmVzc1ttc2cuc2VuZGVyXS5hZGQoMSk7CgogICAgICAgICAgICAgICAgdWludDI1NiBib251c1Rva2VucyA9IG51bVB1cmNoYXNlc1BlckFkZHJlc3NbbXNnLnNlbmRlcl0ubXVsKGJvbnVzTXVsdGlwbGllcik7CiAgICAgICAgICAgICAgICB0b2tlbnNTZW50ID0gdG9rZW5zU2VudC5hZGQoYm9udXNUb2tlbnMpOwogICAgICAgICAgICAgICAgYm9udXNUb2tlbnNJc3N1ZWQgPSBib251c1Rva2Vuc0lzc3VlZC5hZGQoYm9udXNUb2tlbnMpOwoKICAgICAgICAgICAgICAgIGFzc2VydChiYWxhbmNlc1tvd25lcl0gPj0gdG9rZW5zU2VudCk7CiAgICAgICAgICAgICAgICBCb251c1Rva2Vucyhvd25lciwgbXNnLnNlbmRlciwgYm9udXNUb2tlbnMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOwogICAgICAgICAgICBjb250cmlidXRpb24gPSBjb250cmlidXRpb24uYWRkKG1zZy52YWx1ZSk7CgogICAgICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBiYWxhbmNlc1tvd25lcl0uc3ViKHRva2Vuc1NlbnQpOwogICAgICAgICAgICB0b3RhbFRva2Vuc0lzc3VlZCA9IHRvdGFsVG9rZW5zSXNzdWVkLmFkZCh0b2tlbnNTZW50KTsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5hZGQodG9rZW5zU2VudCk7CiAgICAgICAgICAgIFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIG1zZy5zZW5kZXIsIHRva2Vuc1NlbnQpOwogICAgICAgIH0KCiAgICB9Cgp9'.
	

]
