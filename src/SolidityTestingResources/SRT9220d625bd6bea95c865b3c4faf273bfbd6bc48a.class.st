Class {
	#name : #SRT9220d625bd6bea95c865b3c4faf273bfbd6bc48a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9220d625bd6bea95c865b3c4faf273bfbd6bc48a >> base64 [
	^ ''.
	

]
