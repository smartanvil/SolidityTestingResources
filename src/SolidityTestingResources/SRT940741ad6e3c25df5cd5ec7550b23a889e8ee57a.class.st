Class {
	#name : #SRT940741ad6e3c25df5cd5ec7550b23a889e8ee57a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT940741ad6e3c25df5cd5ec7550b23a889e8ee57a >> base64 [
	^ ''.
	

]
