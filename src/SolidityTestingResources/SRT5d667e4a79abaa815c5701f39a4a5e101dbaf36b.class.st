Class {
	#name : #SRT5d667e4a79abaa815c5701f39a4a5e101dbaf36b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d667e4a79abaa815c5701f39a4a5e101dbaf36b >> base64 [
	^ ''.
	

]
