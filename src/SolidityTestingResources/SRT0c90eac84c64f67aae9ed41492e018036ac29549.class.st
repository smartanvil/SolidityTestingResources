Class {
	#name : #SRT0c90eac84c64f67aae9ed41492e018036ac29549,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0c90eac84c64f67aae9ed41492e018036ac29549 >> base64 [
	^ ''.
	

]
