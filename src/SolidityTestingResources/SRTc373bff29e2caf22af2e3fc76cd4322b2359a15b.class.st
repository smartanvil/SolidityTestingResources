Class {
	#name : #SRTc373bff29e2caf22af2e3fc76cd4322b2359a15b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc373bff29e2caf22af2e3fc76cd4322b2359a15b >> base64 [
	^ ''.
	

]
