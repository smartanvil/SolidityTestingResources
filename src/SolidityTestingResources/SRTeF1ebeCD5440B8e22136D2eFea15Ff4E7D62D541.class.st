Class {
	#name : #SRTeF1ebeCD5440B8e22136D2eFea15Ff4E7D62D541,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTeF1ebeCD5440B8e22136D2eFea15Ff4E7D62D541 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgZnJvbSwgdWludDI1NiB2YWx1ZSwgYWRkcmVzcyB0b2tlbiwgYnl0ZXMgZXh0cmFEYXRhKSBwdWJsaWM7IH0KY29udHJhY3QgUkNLVF9Db2luCiAgeyAKICAgICAvKiBWYXJpYWJsZXMgICovCiAgICBzdHJpbmcgIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmFtZSAgb2YgY29udHJhY3QKICAgIHN0cmluZyAgcHVibGljIHN5bWJvbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzeW1ib2wgb2YgY29udHJhY3QKICAgIHVpbnQ4ICAgcHVibGljIGRlY2ltYWxzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBob3cgbWFueSBkZWNpbWFscyB0byBrZWVwICwgMTggaXMgYmVzdCAKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBob3cgbWFueSB0b2tlbnMgdG8gY3JlYXRlCiAgICB1aW50MjU2IHB1YmxpYyByZW1haW5pbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaG93IG1hbnkgdG9rZW5zIGhhcyBsZWZ0CiAgICB1aW50ICAgIHB1YmxpYyBldGhSYXRlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCByYXRlIG9mIGV0aGVyCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udHJhY3QgY3JlYXRvcgogICAgdWludDI1NiBwdWJsaWMgYW1vdW50Q29sbGVjdGVkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhvdyBtdWNoIGZ1bmRzIGhhcyBiZWVuIGNvbGxlY3RlZAogICAgdWludCAgICBwdWJsaWMgaWNvU3RhdHVzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbG93IC8gZGlzYWxsb3cgb25saW5lIHB1cmNoYXNlCiAgICB1aW50ICAgIHB1YmxpYyBpY29Ub2tlblByaWNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9rZW4gcHJpY2UsIHN0YXJ0IHdpdGggMTAgY2VudHMKICAgIGFkZHJlc3MgcHVibGljIGJlbkFkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5kcyB3aXRoZHJhdyBhZGRyZXNzCiAgICBhZGRyZXNzIHB1YmxpYyBia2FkZHJlc3M7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1aW50ICAgIHB1YmxpYyBhbGxvd1RyYW5zZmVyVG9rZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsb3cgLyBkaXNhbGxvdyB0b2tlbiB0cmFuc2ZlciBmb3IgbWVtYmVycwogICAgCiAgICAgLyogQXJyYXkgICovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXkgb2YgYWxsIGJhbGFuY2VzCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwogICAgCiAgICAvKiBFdmVudHMgICovCiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IFRyYW5zZmVyU2VsbChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlLCBzdHJpbmcgdHlwZXgpOyAvLyBvbmx5IGZvciBpY28gc2FsZXMKICAgIAoKICAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8KICAgIGZ1bmN0aW9uIFJDS1RfQ29pbigpIHB1YmxpYwogICAgewogICAgICB0b3RhbFN1cHBseSA9IDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBkZWNpbWFscyBhcmUgMTgsIHdlIGFkZCAxOCB6ZXJvIGFmdGVyIHRvdGFsIHN1cHBseSwgYXMgYWxsIHZhbHVlcyBhcmUgc3RvcmVkIGluIHdlaQogICAgICBvd25lciA9ICBtc2cuc2VuZGVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBvd25lciBvZiBjb250cmFjdAogICAgICBiYWxhbmNlT2Zbb3duZXJdID0gdG90YWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICAgICBuYW1lID0gIlJvY2tldCBMZW5kIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZSBmb3IgZGlzcGxheSBwdXJwb3NlcwogICAgICBzeW1ib2wgPSAiUkNLVCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgIGRlY2ltYWxzID0gMTg7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgIHJlbWFpbmluZyA9IHRvdGFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgdG9rZW5zIGFyZSBsZWZ0CiAgICAgIGV0aFJhdGUgPSAxMTAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG9rZW4gcHJpY2UKICAgICAgaWNvU3RhdHVzID0gMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGljbyBzdGF0dXMKICAgICAgaWNvVG9rZW5QcmljZSA9IDgwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZXMgYXJlIGluIGNlbnRzCiAgICAgIGJlbkFkZHJlc3MgPSAweDhiNUFCRjE2NjM4Njc4MjIyMzBiNTREYjYwZEIzOTQ0NDU5NTYwOEI7ICAgICAgICAgICAgICAgICAgLy8gZnVuZHMgd2l0aGRyYXcgYWRkcmVzcwogICAgICBia2FkZHJlc3MgID0gMHhiOGM3YzdEOEQyNjQ5RjAwNDUxQ2FmNTVlNjcwMjBkNjZCODk3YzNmOyAgICAgICAgICAgICAgICAgICAKICAgICAgYWxsb3dUcmFuc2ZlclRva2VuID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHNldCB0byBkaXNhYmxlLCBpdCB3aWxsIGJlIGVuYWJsZSBhZnRlciBJQ08gaXMgb3ZlcgogICAgfQoKICAgbW9kaWZpZXIgb25seU93bmVyKCkKICAgIHsKICAgICAgICByZXF1aXJlKChtc2cuc2VuZGVyID09IG93bmVyKSB8fCAobXNnLnNlbmRlciA9PSAgYmthZGRyZXNzKSk7CiAgICAgICAgXzsKICAgIH0KCgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlZCB3aGVuIGV0aGVyIGlzIHNlbmQgdG8gY29udHJhY3QKICAgIHsKCiAgICB9ICAgIAogICAgCiAgICBmdW5jdGlvbiBzZWxsT2ZmbGluZShhZGRyZXNzIHJlY19hZGRyZXNzLHVpbnQyNTYgdG9rZW5fYW1vdW50KSBwdWJsaWMgb25seU93bmVyIAogICAgewogICAgICAgIGlmIChyZW1haW5pbmcgPiAwKQogICAgICAgIHsKICAgICAgICAgICAgdWludCBmaW5hbFRva2VucyA9ICAodG9rZW5fYW1vdW50ICAqICgxMCAqKiAxOCkpOyAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKGZpbmFsVG9rZW5zIDwgcmVtYWluaW5nKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IHJlbWFpbmluZyAtIGZpbmFsVG9rZW5zOwogICAgICAgICAgICAgICAgICAgIF90cmFuc2Zlcihvd25lcixyZWNfYWRkcmVzcywgZmluYWxUb2tlbnMpOyAgICAKICAgICAgICAgICAgICAgICAgICBUcmFuc2ZlclNlbGwob3duZXIsIHJlY19hZGRyZXNzLCBmaW5hbFRva2VucywnT2ZmbGluZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0gICAgICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRFdGhSYXRlKCkgb25seU93bmVyIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICAodWludCkgICAgICAgICAgICAvLyBHZXQgY3VycmVudCByYXRlIG9mIGV0aGVyIAogICAgewogICAgICAgIHJldHVybiBldGhSYXRlOwogICAgfQoKICAgIAogICAgZnVuY3Rpb24gZ2V0Q29uQmFsKCkgb25seU93bmVyIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICAodWludCkgICAgICAgICAgICAvLyBHZXQgIEJhbGFuY2UgCiAgICB7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0gICAgCiAgICAKICAgIGZ1bmN0aW9uIHNldEV0aFJhdGUgKHVpbnQgbmV3RXRoUmF0ZSkgcHVibGljICBvbmx5T3duZXIgICAgICAgICAgICAgICAgICAgIC8vIFNldCBldGhlciBwcmljZQogICAgewogICAgICAgIGV0aFJhdGUgPSBuZXdFdGhSYXRlOwogICAgfSAKCgogICAgZnVuY3Rpb24gZ2V0VG9rZW5QcmljZSgpIG9ubHlPd25lciBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAgKHVpbnQpICAgICAgICAgLy8gR2V0IGN1cnJlbnQgdG9rZW4gcHJpY2UKICAgIHsKICAgICAgICByZXR1cm4gaWNvVG9rZW5QcmljZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VG9rZW5QcmljZSAodWludCBuZXdUb2tlblJhdGUpIHB1YmxpYyAgb25seU93bmVyICAgICAgICAgICAgICAgLy8gU2V0IG9uZSB0b2tlbiBwcmljZQogICAgewogICAgICAgIGljb1Rva2VuUHJpY2UgPSBuZXdUb2tlblJhdGU7CiAgICB9ICAgICAKICAgIAogICAgCiAgICBmdW5jdGlvbiBzZXRUcmFuc2ZlclN0YXR1cyAodWludCBzdGF0dXMpIHB1YmxpYyAgb25seU93bmVyICAgICAgICAgICAgICAgICAvLyBTZXQgdHJhbnNmZXIgc3RhdHVzCiAgICB7CiAgICAgICAgYWxsb3dUcmFuc2ZlclRva2VuID0gc3RhdHVzOwogICAgfSAgIAogICAgCiAgICBmdW5jdGlvbiBjaGFuZ2VJY29TdGF0dXMgKHVpbnQ4IHN0YXR4KSAgcHVibGljIG9ubHlPd25lciAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgSUNPIFN0YXR1cwogICAgewogICAgICAgIGljb1N0YXR1cyA9IHN0YXR4OwogICAgfSAKICAgIAoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgYW1vdW50V2l0aCkgcHVibGljIG9ubHlPd25lciAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGhkcmF3IHBhcnRpY2FsIGFtb3VudAogICAgICAgIHsKICAgICAgICAgICAgaWYoKG1zZy5zZW5kZXIgPT0gb3duZXIpIHx8IChtc2cuc2VuZGVyID09ICBia2FkZHJlc3MpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBiZW5BZGRyZXNzLnRyYW5zZmVyKGFtb3VudFdpdGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdfYWxsKCkgcHVibGljIG9ubHlPd25lciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0byB3aXRoZHJhdyBhbGwgYXZhaWxhYmxlIGJhbGFuY2UKICAgICAgICB7CiAgICAgICAgICAgIGlmKChtc2cuc2VuZGVyID09IG93bmVyKSB8fCAobXNnLnNlbmRlciA9PSAgYmthZGRyZXNzKSApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBhbW91bnRXaXRoID0gdGhpcy5iYWxhbmNlIC0gMTAwMDAwMDAwMDAwMDAwMDA7CiAgICAgICAgICAgICAgICBiZW5BZGRyZXNzLnRyYW5zZmVyKGFtb3VudFdpdGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgZnVuY3Rpb24gbWludFRva2VuKHVpbnQyNTYgdG9rZW5zVG9NaW50KSBwdWJsaWMgb25seU93bmVyIAogICAgICAgIHsKICAgICAgICAgICAgaWYodG9rZW5zVG9NaW50ID4gMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIHRvdGFsVG9rZW5Ub01pbnQgPSB0b2tlbnNUb01pbnQgKiAoMTAgKiogMTgpOwogICAgICAgICAgICAgICAgYmFsYW5jZU9mW293bmVyXSArPSB0b3RhbFRva2VuVG9NaW50OwogICAgICAgICAgICAgICAgdG90YWxTdXBwbHkgKz0gdG90YWxUb2tlblRvTWludDsKICAgICAgICAgICAgICAgIFRyYW5zZmVyKDAsIG93bmVyLCB0b3RhbFRva2VuVG9NaW50KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCQkKCgkgLyogQWRtaW4gVHJhc2ZlciAgKi8KCSBmdW5jdGlvbiBhZG1fdHJhc2ZlcihhZGRyZXNzIF9mcm9tLGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgIHB1YmxpYyBvbmx5T3duZXIKCQkgIHsKCQkJICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKCQkgIH0KCQkKCiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyZWV6ZSkgcHVibGljIG9ubHlPd25lciAKICAgICAgICB7CiAgICAgICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsKICAgICAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOwogICAgICAgIH0KICAgICAgICAgICAgCgogICAgZnVuY3Rpb24gZ2V0Q29sbGVjdGVkQW1vdW50KCkgb25seU93bmVyIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIAogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIGFtb3VudENvbGxlY3RlZDsKICAgICAgICB9ICAgICAgICAKCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIAogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIGJhbGFuY2VPZltfb3duZXJdOwogICAgICAgIH0KCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHByaXZhdGUgIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdHN1cHBseSkgCiAgICAgICAgewogICAgICAgICAgICB0c3VwcGx5ID0gdG90YWxTdXBwbHk7CiAgICAgICAgfSAgICAKCgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciAKICAgICAgICB7IAogICAgICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgYmFsYW5jZU9mW25ld093bmVyXSA9IHJlbWFpbmluZzsgICAgICAgICAgICAgICAKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsgCiAgICAgICAgfSAgICAgICAgCgogIC8qIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdCAqLwogIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIAogICAgICB7CiAgICAgICAgICBpZihhbGxvd1RyYW5zZmVyVG9rZW4gPT0gMSB8fCBfZnJvbSA9PSBvd25lciApCiAgICAgICAgICB7CiAgICAgICAgICAgICAgcmVxdWlyZSghZnJvemVuQWNjb3VudFtfZnJvbV0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciBmcm9tIGZyb3plbmZ1bmRzCiAgICAgICAgICAgICAgcmVxdWlyZSAoX3RvICE9IDB4MCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmFuc2ZlciB0byAweDAgYWRkcmVzcy4gVXNlIGJ1cm4oKSBpbnN0ZWFkCiAgICAgICAgICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW19mcm9tXSA+IF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoCiAgICAgICAgICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPiBiYWxhbmNlT2ZbX3RvXSk7ICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmFpc2UgZXZlbnQKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UKICAgICAgICAgIHsKICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICB9CiAgICAgIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSAgcHVibGljCiAgICAgIHsKICAgICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICAgIHsKICAgICAgICAgIHJlcXVpcmUgKF92YWx1ZSA8IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgICAgewogICAgICAgICAgYWxsb3dhbmNlW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogICAgICB7CiAgICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOwogICAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsKICAgICAgICAgICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICB9ICAgICAgICAKCiAgZnVuY3Rpb24gYnVybih1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICAgIHsKICAgICAgICAgIHJlcXVpcmUgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA+IF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5CiAgICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICAgIHsKICAgICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW19mcm9tXSA+PSBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0ZWQgYmFsYW5jZSBpcyBlbm91Z2gKICAgICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBhbGxvd2FuY2UKICAgICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSB0YXJnZXRlZCBiYWxhbmNlCiAgICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyJ3MgYWxsb3dhbmNlCiAgICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsU3VwcGx5CiAgICAgICAgICBCdXJuKF9mcm9tLCBfdmFsdWUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KfSAvLyBlbmQgb2YgY29udHJhY3Q='.
	

]
