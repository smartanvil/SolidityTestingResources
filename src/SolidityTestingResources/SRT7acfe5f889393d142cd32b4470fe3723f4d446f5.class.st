Class {
	#name : #SRT7acfe5f889393d142cd32b4470fe3723f4d446f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7acfe5f889393d142cd32b4470fe3723f4d446f5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKICAKIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIC8vIFNhbXBsZSBmaXhlZCBzdXBwbHkgdG9rZW4gY29udHJhY3QKIC8vIEVuam95LiAoYykgQm9ra3lQb29CYWggMjAxNy4gVGhlIE1JVCBMaWNlbmNlLgogLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIAogLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UKIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewogICAgIC8vIEdldCB0aGUgdG90YWwgdG9rZW4gc3VwcGx5CiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsKICAKICAgICAvLyBHZXQgdGhlIGFjY291bnQgYmFsYW5jZSBvZiBhbm90aGVyIGFjY291bnQgd2l0aCBhZGRyZXNzIF9vd25lcgogICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAKICAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgX3RvCiAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogIAogICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvCiAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAKICAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50LgogICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgIC8vIHRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIHNvbWUgREVYIGZ1bmN0aW9uYWxpdHkKICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogIAogICAgIC8vIFJldHVybnMgdGhlIGFtb3VudCB3aGljaCBfc3BlbmRlciBpcyBzdGlsbCBhbGxvd2VkIHRvIHdpdGhkcmF3IGZyb20gX293bmVyCiAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CiAgCiAgICAgLy8gVHJpZ2dlcmVkIHdoZW4gdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZC4KICAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAKICAgICAvLyBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLgogICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwogfQogIAogY29udHJhY3QgRml4ZWRTdXBwbHlUb2tlbiBpcyBFUkMyMEludGVyZmFjZSB7CiAgICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRklYRUQiOwogICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFeGFtcGxlIEZpeGVkIFN1cHBseSBUb2tlbiI7CiAgICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICAgdWludDI1NiBfdG90YWxTdXBwbHkgPSAxMDAwMDAwOwogICAgIAogICAgIC8vIE93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAKICAgICAvLyBCYWxhbmNlcyBmb3IgZWFjaCBhY2NvdW50CiAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogIAogICAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAKICAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcgogICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgIHRocm93OwogICAgICAgICB9CiAgICAgICAgIF87CiAgICAgfQogIAogICAgIC8vIENvbnN0cnVjdG9yCiAgICAgZnVuY3Rpb24gRml4ZWRTdXBwbHlUb2tlbigpIHsKICAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7CiAgICAgfQogIAogICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgewogICAgICAgICB0b3RhbFN1cHBseSA9IF90b3RhbFN1cHBseTsKICAgICB9CiAgCiAgICAgLy8gV2hhdCBpcyB0aGUgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudD8KICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgICB9CiAgCiAgICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50CiAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50IAogICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDAKICAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgewogICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQogICAgIH0KICAKICAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kCiAgICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UKICAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzCiAgICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UKICAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6CiAgICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICAgdWludDI1NiBfYW1vdW50CiAgICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50CiAgICAgICAgICAgICAmJiBfYW1vdW50ID4gMAogICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7CiAgICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsKICAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7CiAgICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICB9CiAgICAgfQogIAogICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuCiAgICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gaXQgb3ZlcndyaXRlcyB0aGUgY3VycmVudCBhbGxvd2FuY2Ugd2l0aCBfdmFsdWUuCiAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsKICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgfQogIAogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICAgfQp9'.
	

]
