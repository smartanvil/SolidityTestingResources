Class {
	#name : #SRTf46002c37af6fb078ae1833fd447698a0c9012f7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf46002c37af6fb078ae1833fd447698a0c9012f7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKgogICAgVXRpbGl0aWVzICYgQ29tbW9uIE1vZGlmaWVycwoqLwpjb250cmFjdCBVdGlscyB7CiAgICAvKioKICAgICAgICBjb25zdHJ1Y3RvcgogICAgKi8KICAgIGZ1bmN0aW9uIFV0aWxzKCkgewogICAgfQoKICAgIC8vIHZlcmlmaWVzIHRoYXQgYW4gYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICBtb2RpZmllciBncmVhdGVyVGhhblplcm8odWludDI1NiBfYW1vdW50KSB7CiAgICAgICAgcmVxdWlyZShfYW1vdW50ID4gMCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyB2YWxpZGF0ZXMgYW4gYWRkcmVzcyAtIGN1cnJlbnRseSBvbmx5IGNoZWNrcyB0aGF0IGl0IGlzbid0IG51bGwKICAgIG1vZGlmaWVyIHZhbGlkQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSB7CiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSAweDApOwogICAgICAgIF87CiAgICB9CgogICAgLy8gdmVyaWZpZXMgdGhhdCB0aGUgYWRkcmVzcyBpcyBkaWZmZXJlbnQgdGhhbiB0aGlzIGNvbnRyYWN0IGFkZHJlc3MKICAgIG1vZGlmaWVyIG5vdFRoaXMoYWRkcmVzcyBfYWRkcmVzcykgewogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLyBPdmVyZmxvdyBwcm90ZWN0ZWQgbWF0aCBmdW5jdGlvbnMKCiAgICAvKioKICAgICAgICBAZGV2IHJldHVybnMgdGhlIHN1bSBvZiBfeCBhbmQgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cwoKICAgICAgICBAcGFyYW0gX3ggICB2YWx1ZSAxCiAgICAgICAgQHBhcmFtIF95ICAgdmFsdWUgMgoKICAgICAgICBAcmV0dXJuIHN1bQogICAgKi8KICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiBfeCwgdWludDI1NiBfeSkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgeiA9IF94ICsgX3k7CiAgICAgICAgYXNzZXJ0KHogPj0gX3gpOwogICAgICAgIHJldHVybiB6OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiBfeCBtaW51cyBfeSwgYXNzZXJ0cyBpZiB0aGUgc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlIG51bWJlcgoKICAgICAgICBAcGFyYW0gX3ggICBtaW51ZW5kCiAgICAgICAgQHBhcmFtIF95ICAgc3VidHJhaGVuZAoKICAgICAgICBAcmV0dXJuIGRpZmZlcmVuY2UKICAgICovCiAgICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoX3ggPj0gX3kpOwogICAgICAgIHJldHVybiBfeCAtIF95OwogICAgfQoKICAgIC8qKgogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgcHJvZHVjdCBvZiBtdWx0aXBseWluZyBfeCBieSBfeSwgYXNzZXJ0cyBpZiB0aGUgY2FsY3VsYXRpb24gb3ZlcmZsb3dzCgogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxCiAgICAgICAgQHBhcmFtIF95ICAgZmFjdG9yIDIKCiAgICAgICAgQHJldHVybiBwcm9kdWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2FmZU11bCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB6ID0gX3ggKiBfeTsKICAgICAgICBhc3NlcnQoX3ggPT0gMCB8fCB6IC8gX3ggPT0gX3kpOwogICAgICAgIHJldHVybiB6OwogICAgfQp9CgovKgogICAgT3duZWQgY29udHJhY3QgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElPd25lZCB7CiAgICAvLyB0aGlzIGZ1bmN0aW9uIGlzbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsCiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7fQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWM7Cn0KCi8qCiAgICBQcm92aWRlcyBzdXBwb3J0IGFuZCB1dGlsaXRpZXMgZm9yIGNvbnRyYWN0IG93bmVyc2hpcAoqLwpjb250cmFjdCBPd25lZCBpcyBJT3duZWQgewogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsKCiAgICBldmVudCBPd25lclVwZGF0ZShhZGRyZXNzIF9wcmV2T3duZXIsIGFkZHJlc3MgX25ld093bmVyKTsKCiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkKICAgIG1vZGlmaWVyIG93bmVyT25seSB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXAKICAgICAgICB0aGUgbmV3IG93bmVyIHN0aWxsIG5lZWRzIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXIKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyCgogICAgICAgIEBwYXJhbSBfbmV3T3duZXIgICAgbmV3IGNvbnRyYWN0IG93bmVyCiAgICAqLwogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyBvd25lck9ubHkgewogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IG93bmVyKTsKICAgICAgICBuZXdPd25lciA9IF9uZXdPd25lcjsKICAgIH0KCiAgICAvKioKICAgICAgICBAZGV2IHVzZWQgYnkgYSBuZXcgb3duZXIgdG8gYWNjZXB0IGFuIG93bmVyc2hpcCB0cmFuc2ZlcgogICAgKi8KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsKICAgICAgICBPd25lclVwZGF0ZShvd25lciwgbmV3T3duZXIpOwogICAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICAgICAgbmV3T3duZXIgPSAweDA7CiAgICB9Cn0KCi8qCiAgICBFUkMyMCBTdGFuZGFyZCBUb2tlbiBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUVSQzIwVG9rZW4gewogICAgLy8gdGhlc2UgZnVuY3Rpb25zIGFyZW4ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbAogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHt9CiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7fQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHt9CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgeyBfb3duZXI7IH0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgX293bmVyOyBfc3BlbmRlcjsgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwp9CgovKgogICAgQmFuY29yIEZvcm11bGEgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElCYW5jb3JGb3JtdWxhIHsKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1cmNoYXNlUmV0dXJuKHVpbnQyNTYgX3N1cHBseSwgdWludDI1NiBfY29ubmVjdG9yQmFsYW5jZSwgdWludDMyIF9jb25uZWN0b3JXZWlnaHQsIHVpbnQyNTYgX2RlcG9zaXRBbW91bnQpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVNhbGVSZXR1cm4odWludDI1NiBfc3VwcGx5LCB1aW50MjU2IF9jb25uZWN0b3JCYWxhbmNlLCB1aW50MzIgX2Nvbm5lY3RvcldlaWdodCwgdWludDI1NiBfc2VsbEFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwp9CgovKgogICAgQmFuY29yIEdhcyBQcmljZSBMaW1pdCBpbnRlcmZhY2UKKi8KY29udHJhY3QgSUJhbmNvckdhc1ByaWNlTGltaXQgewogICAgZnVuY3Rpb24gZ2FzUHJpY2UoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KfQoKLyoKICAgIEJhbmNvciBRdWljayBDb252ZXJ0ZXIgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElCYW5jb3JRdWlja0NvbnZlcnRlciB7CiAgICBmdW5jdGlvbiBjb252ZXJ0KElFUkMyMFRva2VuW10gX3BhdGgsIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfbWluUmV0dXJuKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGNvbnZlcnRGb3IoSUVSQzIwVG9rZW5bXSBfcGF0aCwgdWludDI1NiBfYW1vdW50LCB1aW50MjU2IF9taW5SZXR1cm4sIGFkZHJlc3MgX2ZvcikgcHVibGljIHBheWFibGUgcmV0dXJucyAodWludDI1Nik7Cn0KCi8qCiAgICBUb2tlbiBIb2xkZXIgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElUb2tlbkhvbGRlciBpcyBJT3duZWQgewogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoSUVSQzIwVG9rZW4gX3Rva2VuLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWM7Cn0KCi8qCiAgICBXZSBjb25zaWRlciBldmVyeSBjb250cmFjdCB0byBiZSBhICd0b2tlbiBob2xkZXInIHNpbmNlIGl0J3MgY3VycmVudGx5IG5vdCBwb3NzaWJsZQogICAgZm9yIGEgY29udHJhY3QgdG8gZGVueSByZWNlaXZpbmcgdG9rZW5zLgoKICAgIFRoZSBUb2tlbkhvbGRlcidzIGNvbnRyYWN0IHNvbGUgcHVycG9zZSBpcyB0byBwcm92aWRlIGEgc2FmZXR5IG1lY2hhbmlzbSB0aGF0IGFsbG93cwogICAgdGhlIG93bmVyIHRvIHNlbmQgdG9rZW5zIHRoYXQgd2VyZSBzZW50IHRvIHRoZSBjb250cmFjdCBieSBtaXN0YWtlIGJhY2sgdG8gdGhlaXIgc2VuZGVyLgoqLwpjb250cmFjdCBUb2tlbkhvbGRlciBpcyBJVG9rZW5Ib2xkZXIsIE93bmVkLCBVdGlscyB7CiAgICAvKioKICAgICAgICBAZGV2IGNvbnN0cnVjdG9yCiAgICAqLwogICAgZnVuY3Rpb24gVG9rZW5Ib2xkZXIoKSB7CiAgICB9CgogICAgLyoqCiAgICAgICAgQGRldiB3aXRoZHJhd3MgdG9rZW5zIGhlbGQgYnkgdGhlIGNvbnRyYWN0IGFuZCBzZW5kcyB0aGVtIHRvIGFuIGFjY291bnQKICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyCgogICAgICAgIEBwYXJhbSBfdG9rZW4gICBFUkMyMCB0b2tlbiBjb250cmFjdCBhZGRyZXNzCiAgICAgICAgQHBhcmFtIF90byAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudAogICAgICAgIEBwYXJhbSBfYW1vdW50ICBhbW91bnQgdG8gd2l0aGRyYXcKICAgICovCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikKICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQogICAgICAgIG5vdFRoaXMoX3RvKQogICAgewogICAgICAgIGFzc2VydChfdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KSk7CiAgICB9Cn0KCi8qCiAgICBCYW5jb3IgQ29udmVydGVyIEV4dGVuc2lvbnMgaW50ZXJmYWNlCiovCmNvbnRyYWN0IElCYW5jb3JDb252ZXJ0ZXJFeHRlbnNpb25zIHsKICAgIGZ1bmN0aW9uIGZvcm11bGEoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoSUJhbmNvckZvcm11bGEpIHt9CiAgICBmdW5jdGlvbiBnYXNQcmljZUxpbWl0KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKElCYW5jb3JHYXNQcmljZUxpbWl0KSB7fQogICAgZnVuY3Rpb24gcXVpY2tDb252ZXJ0ZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoSUJhbmNvclF1aWNrQ29udmVydGVyKSB7fQp9CgovKioKICAgIEBkZXYgdGhlIEJhbmNvckNvbnZlcnRlckV4dGVuc2lvbnMgY29udHJhY3QgaXMgYW4gb3duZWQgY29udHJhY3QgdGhhdCBzZXJ2ZXMgYXMgYSBzaW5nbGUgcG9pbnQgb2YgYWNjZXNzCiAgICB0byB0aGUgQmFuY29yRm9ybXVsYSwgQmFuY29yR2FzUHJpY2VMaW1pdCBhbmQgQmFuY29yUXVpY2tDb252ZXJ0ZXIgY29udHJhY3RzIGZyb20gYWxsIEJhbmNvckNvbnZlcnRlciBjb250cmFjdCBpbnN0YW5jZXMuCiAgICBpdCBhbGxvd3MgdXBncmFkaW5nIHRoZXNlIGNvbnRyYWN0cyB3aXRob3V0IHRoZSBuZWVkIHRvIHVwZGF0ZSBlYWNoIGFuZCBldmVyeQogICAgQmFuY29yQ29udmVydGVyIGNvbnRyYWN0IGluc3RhbmNlIGluZGl2aWR1YWxseS4KKi8KY29udHJhY3QgQmFuY29yQ29udmVydGVyRXh0ZW5zaW9ucyBpcyBJQmFuY29yQ29udmVydGVyRXh0ZW5zaW9ucywgVG9rZW5Ib2xkZXIgewogICAgSUJhbmNvckZvcm11bGEgcHVibGljIGZvcm11bGE7ICAvLyBiYW5jb3IgY2FsY3VsYXRpb24gZm9ybXVsYSBjb250cmFjdAogICAgSUJhbmNvckdhc1ByaWNlTGltaXQgcHVibGljIGdhc1ByaWNlTGltaXQ7IC8vIGJhbmNvciB1bml2ZXJzYWwgZ2FzIHByaWNlIGxpbWl0IGNvbnRyYWN0CiAgICBJQmFuY29yUXVpY2tDb252ZXJ0ZXIgcHVibGljIHF1aWNrQ29udmVydGVyOyAvLyBiYW5jb3IgcXVpY2sgY29udmVydGVyIGNvbnRyYWN0CgogICAgLyoqCiAgICAgICAgQGRldiBjb25zdHJ1Y3RvcgoKICAgICAgICBAcGFyYW0gX2Zvcm11bGEgICAgICAgICBhZGRyZXNzIG9mIGEgYmFuY29yIGZvcm11bGEgY29udHJhY3QKICAgICAgICBAcGFyYW0gX2dhc1ByaWNlTGltaXQgICBhZGRyZXNzIG9mIGEgYmFuY29yIGdhcyBwcmljZSBsaW1pdCBjb250cmFjdAogICAgICAgIEBwYXJhbSBfcXVpY2tDb252ZXJ0ZXIgIGFkZHJlc3Mgb2YgYSBiYW5jb3IgcXVpY2sgY29udmVydGVyIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gQmFuY29yQ29udmVydGVyRXh0ZW5zaW9ucyhJQmFuY29yRm9ybXVsYSBfZm9ybXVsYSwgSUJhbmNvckdhc1ByaWNlTGltaXQgX2dhc1ByaWNlTGltaXQsIElCYW5jb3JRdWlja0NvbnZlcnRlciBfcXVpY2tDb252ZXJ0ZXIpCiAgICAgICAgdmFsaWRBZGRyZXNzKF9mb3JtdWxhKQogICAgICAgIHZhbGlkQWRkcmVzcyhfZ2FzUHJpY2VMaW1pdCkKICAgICAgICB2YWxpZEFkZHJlc3MoX3F1aWNrQ29udmVydGVyKQogICAgewogICAgICAgIGZvcm11bGEgPSBfZm9ybXVsYTsKICAgICAgICBnYXNQcmljZUxpbWl0ID0gX2dhc1ByaWNlTGltaXQ7CiAgICAgICAgcXVpY2tDb252ZXJ0ZXIgPSBfcXVpY2tDb252ZXJ0ZXI7CiAgICB9CgogICAgLyoKICAgICAgICBAZGV2IGFsbG93cyB0aGUgb3duZXIgdG8gdXBkYXRlIHRoZSBmb3JtdWxhIGNvbnRyYWN0IGFkZHJlc3MKCiAgICAgICAgQHBhcmFtIF9mb3JtdWxhICAgIGFkZHJlc3Mgb2YgYSBiYW5jb3IgZm9ybXVsYSBjb250cmFjdAogICAgKi8KICAgIGZ1bmN0aW9uIHNldEZvcm11bGEoSUJhbmNvckZvcm11bGEgX2Zvcm11bGEpCiAgICAgICAgcHVibGljCiAgICAgICAgb3duZXJPbmx5CiAgICAgICAgdmFsaWRBZGRyZXNzKF9mb3JtdWxhKQogICAgICAgIG5vdFRoaXMoX2Zvcm11bGEpCiAgICB7CiAgICAgICAgZm9ybXVsYSA9IF9mb3JtdWxhOwogICAgfQoKICAgIC8qCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIHVwZGF0ZSB0aGUgZ2FzIHByaWNlIGxpbWl0IGNvbnRyYWN0IGFkZHJlc3MKCiAgICAgICAgQHBhcmFtIF9nYXNQcmljZUxpbWl0ICAgYWRkcmVzcyBvZiBhIGJhbmNvciBnYXMgcHJpY2UgbGltaXQgY29udHJhY3QKICAgICovCiAgICBmdW5jdGlvbiBzZXRHYXNQcmljZUxpbWl0KElCYW5jb3JHYXNQcmljZUxpbWl0IF9nYXNQcmljZUxpbWl0KQogICAgICAgIHB1YmxpYwogICAgICAgIG93bmVyT25seQogICAgICAgIHZhbGlkQWRkcmVzcyhfZ2FzUHJpY2VMaW1pdCkKICAgICAgICBub3RUaGlzKF9nYXNQcmljZUxpbWl0KQogICAgewogICAgICAgIGdhc1ByaWNlTGltaXQgPSBfZ2FzUHJpY2VMaW1pdDsKICAgIH0KCiAgICAvKgogICAgICAgIEBkZXYgYWxsb3dzIHRoZSBvd25lciB0byB1cGRhdGUgdGhlIHF1aWNrIGNvbnZlcnRlciBjb250cmFjdCBhZGRyZXNzCgogICAgICAgIEBwYXJhbSBfcXVpY2tDb252ZXJ0ZXIgIGFkZHJlc3Mgb2YgYSBiYW5jb3IgcXVpY2sgY29udmVydGVyIGNvbnRyYWN0CiAgICAqLwogICAgZnVuY3Rpb24gc2V0UXVpY2tDb252ZXJ0ZXIoSUJhbmNvclF1aWNrQ29udmVydGVyIF9xdWlja0NvbnZlcnRlcikKICAgICAgICBwdWJsaWMKICAgICAgICBvd25lck9ubHkKICAgICAgICB2YWxpZEFkZHJlc3MoX3F1aWNrQ29udmVydGVyKQogICAgICAgIG5vdFRoaXMoX3F1aWNrQ29udmVydGVyKQogICAgewogICAgICAgIHF1aWNrQ29udmVydGVyID0gX3F1aWNrQ29udmVydGVyOwogICAgfQp9'.
	

]
