Class {
	#name : #SRTa2b6d9e310893c24fa61129e92070b9b40d02016,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa2b6d9e310893c24fa61129e92070b9b40d02016 >> base64 [
	^ ''.
	

]
