Class {
	#name : #SRT12FEF5e57bF45873Cd9B62E9DBd7BFb99e32D73e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT12FEF5e57bF45873Cd9B62E9DBd7BFb99e32D73e >> base64 [
	^ ''.
	

]
