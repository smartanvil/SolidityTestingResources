Class {
	#name : #SRTa13f0743951b4f6e3e3aa039f682e17279f52bc3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa13f0743951b4f6e3e3aa039f682e17279f52bc3 >> base64 [
	^ ''.
	

]
