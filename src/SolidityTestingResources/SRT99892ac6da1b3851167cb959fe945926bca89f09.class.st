Class {
	#name : #SRT99892ac6da1b3851167cb959fe945926bca89f09,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT99892ac6da1b3851167cb959fe945926bca89f09 >> base64 [
	^ ''.
	

]
