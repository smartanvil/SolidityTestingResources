Class {
	#name : #SRTFA1Bcd27Da169C69bfbeda681c2A8277b8E08171,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTFA1Bcd27Da169C69bfbeda681c2A8277b8E08171 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjsKCi8qINCg0L7QtNC40YLQtdC70YzRgdC60LjQuSDQutC+0L3RgtGA0LDQutGCICovCmNvbnRyYWN0IE93bmVkIHsKCiAgICAvKiDQkNC00YDQtdGBINCy0LvQsNC00LXQu9GM0YbQsCDQutC+0L3RgtGA0LDQutGC0LAqLwogICAgYWRkcmVzcyBvd25lcjsKCiAgICAvKiDQmtC+0L3RgdGC0YDRg9C60YLQvtGAINC60L7QvdGC0YDQsNC60YLQsCwg0LLRi9C30YvQstCw0LXRgtGB0Y8g0L/RgNC4INC/0LXRgNCy0L7QvCDQt9Cw0L/Rg9GB0LrQtSAqLwogICAgZnVuY3Rpb24gT3duZWQoKSB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIC8qINCY0LfQvNC10L3QuNGC0Ywg0LLQu9Cw0LTQtdC70YzRhtCwINC60L7QvdGC0YDQsNC60YLQsCwgbmV3T3duZXIgLSDQsNC00YDQtdGBINC90L7QstC+0LPQviDQstC70LDQtNC10LvRjNGG0LAgKi8KICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlvd25lciB7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KCiAgICAvKiDQnNC+0LTQuNGE0LjQutCw0YLQvtGAINC00LvRjyDQvtCz0YDQsNC90LjRh9C10L3QuNGPINC00L7RgdGC0YPQv9CwINC6INGE0YPQvdC60YbQuNGP0Lwg0YLQvtC70YzQutC+INC00LvRjyDQstC70LDQtNC10LvRjNGG0LAgKi8KICAgIG1vZGlmaWVyIG9ubHlvd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlcj09b3duZXIpIF87CiAgICB9CgogICAgLyog0KPQtNCw0LvQuNGC0Ywg0LrQvtC90YLRgNCw0LrRgiAqLwogICAgZnVuY3Rpb24ga2lsbCgpIG9ubHlvd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHN1aWNpZGUob3duZXIpOwogICAgfQp9CgovKiDQntGB0L3QvtCy0L3QvtC5INC60L7QvdGC0YDQsNC60YIsINC90LDRgdC70LXQtNGD0LXRgiDQutC+0L3RgtGA0LDQutGCIE93bmVkICovCmNvbnRyYWN0IERvY3VtZW50cyBpcyBPd25lZCB7CgogICAgLyog0KHRgtGA0YPQutGC0YPRgNCwINC/0YDQtdC00YHRgtCw0LLQu9GP0Y7RidCw0Y8g0LTQvtC60YPQvNC10L3RgiAqLwogICAgc3RydWN0IERvY3VtZW50IHsKICAgICAgICBzdHJpbmcgaGFzaDsKICAgICAgICBzdHJpbmcgbGluazsKICAgICAgICBzdHJpbmcgZGF0YTsKICAgICAgICBhZGRyZXNzIGNyZWF0b3I7CiAgICAgICAgdWludCBkYXRlOwogICAgICAgIHVpbnQgc2lnbnNDb3VudDsKICAgICAgICBtYXBwaW5nICh1aW50ID0+IFNpZ24pIHNpZ25zOwogICAgfQoKICAgIC8qINCh0YLRgNGD0LrRgtGD0YDQsCDQv9GA0LXQtNGB0YLQsNCy0LvRj9GO0YnQsNGPINC/0L7QtNC/0LjRgdGMICovCiAgICBzdHJ1Y3QgU2lnbiB7CiAgICAgICAgYWRkcmVzcyBtZW1iZXI7CiAgICAgICAgdWludCBkYXRlOwogICAgfQoKICAgIC8qINCc0LDQv9C/0LjQvdCzIElEINC00L7QutGD0LzQtdC90YLQsCAtPiDQtNC+0LrRg9C80LXQvdGCICovCiAgICBtYXBwaW5nICh1aW50ID0+IERvY3VtZW50KSBwdWJsaWMgZG9jdW1lbnRzSWRzOwoKICAgIC8qINCa0L7Quy3QstC+INC00L7QutGD0LzQtdC90YLQvtCyICovCiAgICB1aW50IGRvY3VtZW50c0NvdW50ID0gMDsKCiAgICAvKiDQodC+0LHRi9GC0LjQtSDQv9GA0Lgg0L/QvtC00L/QuNGB0Lgg0LTQvtC60YPQvNC10L3RgtCwINGD0YfQsNGB0YLQvdC40LrQvtC8LCDQv9Cw0YDQsNC80LXRgtGA0YsgLSDQsNC00YDQtdGBINGD0YfQsNGB0YLQvdC40LrQsCwgSUQg0LTQvtC60YPQvNC10L3RgtCwICovCiAgICBldmVudCBEb2N1bWVudFNpZ25lZCh1aW50IGlkLCBhZGRyZXNzIG1lbWJlcik7CgogICAgLyog0KHQvtCx0YvRgtC40LUg0L/RgNC4INGA0LXQs9C40YHRgtGA0LDRhtC40Lgg0LTQvtC60YPQvNC10L3RgtCwLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSBJRCDQtNC+0LrRg9C80LXQvdGC0LAgKi8KICAgIGV2ZW50IERvY3VtZW50UmVnaXN0ZXJlZCh1aW50IGlkLCBzdHJpbmcgaGFzaCk7CgogICAgIC8qINCa0L7QvdGB0YLRgNGD0LrRgtC+0YAg0LrQvtC90YLRgNCw0LrRgtCwLCDQstGL0LfRi9Cy0LDQtdGC0YHRjyDQv9GA0Lgg0L/QtdGA0LLQvtC8INC30LDQv9GD0YHQutC1ICovCiAgICBmdW5jdGlvbiBEb2N1bWVudHMoKSB7CiAgICB9CgogICAgLyog0YTRg9C90LrRhtC40Y8g0LTQvtCx0LDQstC70LXQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSDRhdGN0YgsINGB0YHRi9C70LrQsCwg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQtSDQtNCw0L3QvdGL0LUsINGB0L7Qt9C00LDRgtC10LvRjC4KICAgINCV0YHQu9C4INC90LUg0L/QtdGA0LXQtNCw0ZHRgtGB0Y8g0LDQtNGA0LXRgSDRgdC+0LfQtNCw0YLQtdC70Y8sINGC0L4g0LHRg9C00LXRgiDRg9C60LDQt9Cw0L0g0LDQtNGA0LXRgSDQvtGC0L/RgNCw0LLQuNGC0LXQu9GPLCDQsiDQutC+0L3RhtC1INCy0YvQt9C+0LLQtdGC0YHRjyDRgdC+0LHRi9GC0LjQtSBEb2N1bWVudFJlZ2lzdGVyZWQKICAgINGBINC/0LDRgNCw0LzQtdGC0YDQsNC80LggaWQgLSDQtNC+0LrRg9C80LXQvdGC0LAgKNC/0L7Qt9C40YbQuNGPINCyINC80LDRgdGB0LjQstC1IGRvY3VtZW50cykg0LggaGFzaCAtINGF0Y3RiCDRgdGD0LzQvNCwICovCiAgICBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50KHN0cmluZyBoYXNoLAogICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBsaW5rLAogICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBkYXRhKSB7CiAgICAgICAgYWRkcmVzcyBjcmVhdG9yID0gbXNnLnNlbmRlcjsKCiAgICAgICAgdWludCBpZCA9IGRvY3VtZW50c0NvdW50ICsgMTsKICAgICAgICBkb2N1bWVudHNJZHNbaWRdID0gRG9jdW1lbnQoewogICAgICAgICAgIGhhc2g6IGhhc2gsCiAgICAgICAgICAgbGluazogbGluaywKICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgIGNyZWF0b3I6IGNyZWF0b3IsCiAgICAgICAgICAgZGF0ZTogbm93LAogICAgICAgICAgIHNpZ25zQ291bnQ6IDAKICAgICAgICB9KTsKICAgICAgICBkb2N1bWVudHNDb3VudCA9IGlkOwogICAgICAgIERvY3VtZW50UmVnaXN0ZXJlZChpZCwgaGFzaCk7CiAgICB9CgogICAgLyog0YTRg9C90LrRhtC40Y8g0LTQvtCx0LDQstC70LXQvdC40Y8g0L/QvtC00L/QuNGB0Lgg0LIg0LTQvtC60YPQvNC10L3Rgiwg0L/QsNGA0LDQvNC10YLRgNGLIC0gSUQg0JTQvtC60YPQvNC10L3RgtCwLCDQsNC00YDQtdGBINC/0L7QtNC/0LjRgdGH0LjQutCwLgogICAg0JXRgdC70Lgg0L3QtSDQv9C10YDQtdC00LDRkdGC0YHRjyDQsNC00YDQtdGBINC/0L7QtNC/0LjRgdGH0LjQutCwLCDRgtC+INCx0YPQtNC10YIg0YPQutCw0LfQsNC9INCw0LTRgNC10YEg0L7RgtC/0YDQsNCy0LjRgtC10LvRjywKICAgINCyINC60L7QvdGG0LUg0LLRi9C30L7QstC10YLRgdGPINGB0L7QsdGL0YLQuNC1IERvY3VtZW50U2lnbmVkICovCiAgICBmdW5jdGlvbiBhZGRTaWduYXR1cmUodWludCBpZCkgewogICAgICAgIGFkZHJlc3MgbWVtYmVyID0gbXNnLnNlbmRlcjsKCiAgICAgICAgRG9jdW1lbnQgZCA9IGRvY3VtZW50c0lkc1tpZF07CiAgICAgICAgdWludCBjb3VudCA9IGQuc2lnbnNDb3VudDsKICAgICAgICBib29sIHNpZ25lZCA9IGZhbHNlOwogICAgICAgIGlmIChjb3VudCAhPSAwKSB7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChkLnNpZ25zW2ldLm1lbWJlciA9PSBtZW1iZXIpIHsKICAgICAgICAgICAgICAgICAgICBzaWduZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIXNpZ25lZCkgewogICAgICAgICAgICBkLnNpZ25zW2NvdW50XSA9IFNpZ24oewogICAgICAgICAgICAgICAgICAgIG1lbWJlcjogbWVtYmVyLAogICAgICAgICAgICAgICAgICAgIGRhdGU6IG5vdwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvY3VtZW50c0lkc1tpZF0uc2lnbnNDb3VudCA9IGNvdW50ICsgMTsKICAgICAgICAgICAgRG9jdW1lbnRTaWduZWQoaWQsIG1lbWJlcik7CiAgICAgICAgfQogICAgfQoKICAgIC8qINCk0YPQvdC60YbQuNGPINC/0L7Qu9GD0YfQtdC90LjRjyDQutC+0LvQuNGH0LXRgdGC0LLQsCDQtNC+0LrRg9C80LXQvdGC0L7QsiAqLwogICAgZnVuY3Rpb24gZ2V0RG9jdW1lbnRzQ291bnQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGRvY3VtZW50c0NvdW50OwogICAgfQoKICAgIC8qINCk0YPQvdC60YbQuNGPINC/0L7Qu9GD0YfQtdC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0L/QviBJRCAqLwogICAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQodWludCBpZCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIGhhc2gsCiAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGxpbmssCiAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBjcmVhdG9yLAogICAgICAgICAgICAgICAgICAgICAgIHVpbnQgZGF0ZSwKICAgICAgICAgICAgICAgICAgICAgICB1aW50IGNvdW50KSB7CiAgICAgICAgRG9jdW1lbnQgZCA9IGRvY3VtZW50c0lkc1tpZF07CiAgICAgICAgaGFzaCA9IGQuaGFzaDsKICAgICAgICBsaW5rID0gZC5saW5rOwogICAgICAgIGRhdGEgPSBkLmRhdGE7CiAgICAgICAgY3JlYXRvciA9IGQuY3JlYXRvcjsKICAgICAgICBkYXRlID0gZC5kYXRlOwogICAgfQoKICAgIC8qINCk0YPQvdC60YbQuNGPINC/0L7Qu9GD0YfQtdC90LjRjyDQutC+0LvQuNGH0LXRgdGC0LLQsCDQv9C+0LTQv9C40YHQtdC5INC/0L4gSUQg0LTQvtC60YPQvNC10L3RgtCwICovCiAgICBmdW5jdGlvbiBnZXREb2N1bWVudFNpZ25zQ291bnQodWludCBpZCkgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIERvY3VtZW50IGQgPSBkb2N1bWVudHNJZHNbaWRdOwogICAgICAgIHJldHVybiBkLnNpZ25zQ291bnQ7CiAgICB9CgogICAgLyog0KTRg9C90LrRhtC40Y8g0L/QvtC70YPRh9C10L3QuNGPINC/0L7QtNC/0LjRgdC4INC00L7QutGD0LzQtdC90YLQvtCyLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSBJRCDQtNC+0LrRg9C80LXQvdGC0LAsINC/0L7Qt9C40YbQuNGPINC/0L7QtNC/0LjRgdC4INCyINC80LDRgdGB0LjQstC1ICovCiAgICBmdW5jdGlvbiBnZXREb2N1bWVudFNpZ24odWludCBpZCwgdWludCBpbmRleCkgY29uc3RhbnQgcmV0dXJucyAoCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgbWVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGRhdGUpIHsKICAgICAgICBEb2N1bWVudCBkID0gZG9jdW1lbnRzSWRzW2lkXTsKICAgICAgICBTaWduIHMgPSBkLnNpZ25zW2luZGV4XTsKICAgICAgICBtZW1iZXIgPSBzLm1lbWJlcjsKICAgICAgICBkYXRlID0gcy5kYXRlOwoJfQp9'.
	

]
