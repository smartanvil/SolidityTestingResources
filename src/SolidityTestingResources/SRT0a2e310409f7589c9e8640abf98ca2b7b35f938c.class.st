Class {
	#name : #SRT0a2e310409f7589c9e8640abf98ca2b7b35f938c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a2e310409f7589c9e8640abf98ca2b7b35f938c >> base64 [
	^ ''.
	

]
