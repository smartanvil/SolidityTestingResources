Class {
	#name : #SRTd0792ac0de7ef31197c5f452b21a34389ecc725f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd0792ac0de7ef31197c5f452b21a34389ecc725f >> base64 [
	^ ''.
	

]
