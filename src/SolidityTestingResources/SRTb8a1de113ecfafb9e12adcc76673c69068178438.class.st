Class {
	#name : #SRTb8a1de113ecfafb9e12adcc76673c69068178438,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8a1de113ecfafb9e12adcc76673c69068178438 >> base64 [
	^ ''.
	

]
