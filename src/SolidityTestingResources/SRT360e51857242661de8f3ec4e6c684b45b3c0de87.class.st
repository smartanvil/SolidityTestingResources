Class {
	#name : #SRT360e51857242661de8f3ec4e6c684b45b3c0de87,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT360e51857242661de8f3ec4e6c684b45b3c0de87 >> base64 [
	^ ''.
	

]
