Class {
	#name : #SRT13792a2a22333f8564945b1ee1f5b46a20c23a5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT13792a2a22333f8564945b1ee1f5b46a20c23a5d >> base64 [
	^ ''.
	

]
