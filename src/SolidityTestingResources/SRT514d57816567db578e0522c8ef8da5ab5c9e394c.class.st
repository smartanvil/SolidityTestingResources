Class {
	#name : #SRT514d57816567db578e0522c8ef8da5ab5c9e394c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT514d57816567db578e0522c8ef8da5ab5c9e394c >> base64 [
	^ ''.
	

]
