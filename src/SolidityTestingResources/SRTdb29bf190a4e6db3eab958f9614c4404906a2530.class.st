Class {
	#name : #SRTdb29bf190a4e6db3eab958f9614c4404906a2530,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdb29bf190a4e6db3eab958f9614c4404906a2530 >> base64 [
	^ ''.
	

]
