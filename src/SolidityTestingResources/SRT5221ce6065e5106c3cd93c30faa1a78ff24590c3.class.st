Class {
	#name : #SRT5221ce6065e5106c3cd93c30faa1a78ff24590c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5221ce6065e5106c3cd93c30faa1a78ff24590c3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7CgovLyBFVEggaW4sIHRva2VucyBvdXQgdG8gbG90dGVyeSB3aW5uZXIuCgpjb250cmFjdCBQb1dNTG90dGVyeSB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIAogICAgLy8gQ29udHJhY3Qgc2V0dXAKICAgIGJvb2wgcHVibGljIGlzTG90dGVyeU9wZW4gPSBmYWxzZTsKICAgIGFkZHJlc3MgUE9XTV9hZGRyZXNzID0gYWRkcmVzcygweEExNDYyNDBiRjJDMDQwMDVBNzQzMDMyREMwRDI0MWVjMGJCMkJBMkIpOwogICAgUE9XTSBtYXRocyA9IFBPV00oUE9XTV9hZGRyZXNzKTsKICAgIGFkZHJlc3Mgb3duZXI7CiAgICAKICAgIC8vIERhdGFzZXRzCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyBnYW1ibGVyczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHRva2VuX2J1eWluczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGxhc3Rfcm91bmRfYm91Z2h0OwogICAgCiAgICB1aW50MjU2IHB1YmxpYyBudW1fdGlja2V0c19jdXJyZW50X3JvdW5kID0gMDsKICAgIHVpbnQyNTYgcHVibGljIGN1cnJlbnRfcm91bmQgPSAwOwogICAgdWludDI1NiBwdWJsaWMgbnVtVG9rZW5zSW5Mb3R0ZXJ5ID0gMDsKICAgIAogICAgYWRkcmVzcyBtYXN0ZXJub2RlX3JlZmVycmVyOwogICAgCiAgICAvLyBDYW4ndCBidXkgbW9yZSB0aGFuIDI1IHRva2Vucy4KICAgIHVpbnQyNTYgcHVibGljIE1BWF9UT0tFTl9CVVlJTiA9IDI1OwogICAgCiAgICBmdW5jdGlvbiBQb1dNTG90dGVyeSgpIHB1YmxpYyB7CiAgICAgICAgY3VycmVudF9yb3VuZCA9IDE7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIG1hc3Rlcm5vZGVfcmVmZXJyZXIgPSBtc2cuc2VuZGVyOwogICAgfQogICAgCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIGRvbmF0ZVRvTG90dGVyeSgpIHB1YmxpYyBwYXlhYmxlIHJldHVybnModWludDI1NikgewogICAgICAgIHVpbnQyNTYgdG9rZW5zX2JlZm9yZSA9IG1hdGhzLm15VG9rZW5zKCk7CiAgICAgICAgbWF0aHMuYnV5LnZhbHVlKG1zZy52YWx1ZSkobWFzdGVybm9kZV9yZWZlcnJlcik7CiAgICAgICAgdWludDI1NiB0b2tlbnNfYWZ0ZXIgPSBtYXRocy5teVRva2VucygpOwogICAgICAgIG51bVRva2Vuc0luTG90dGVyeSA9IG1hdGhzLm15VG9rZW5zKCk7CiAgICAgICAgcmV0dXJuIHRva2Vuc19hZnRlciAtIHRva2Vuc19iZWZvcmU7CiAgICB9CgogICAgLyoqCiAgICAgKiBCdXlzIHRpY2tldHMuIEZhaWxzIGlmID4gMjUgdGlja2V0cyBhcmUgYXR0ZW1wdGVkIHRvIGJ1eS4KICAgICAqLwogICAgZnVuY3Rpb24gYnV5VGlja2V0cygpIHB1YmxpYyBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKGlzTG90dGVyeU9wZW4gPT0gdHJ1ZSk7CiAgICAgICAgcmVxdWlyZShsYXN0X3JvdW5kX2JvdWdodFttc2cuc2VuZGVyXSAhPSBjdXJyZW50X3JvdW5kKTsKICAgICAgICAKICAgICAgICAvLyBCdXkgdGhlIHRva2Vucy4KICAgICAgICAvLyBTaG91bGQgYmUgYmV0d2VlbiAwIGFuZCAyNS4KICAgICAgICB1aW50MjU2IHRva2Vuc19iZWZvcmUgPSBtYXRocy5teVRva2VucygpOwogICAgICAgIG1hdGhzLmJ1eS52YWx1ZShtc2cudmFsdWUpKG1hc3Rlcm5vZGVfcmVmZXJyZXIpOwogICAgICAgIHVpbnQyNTYgdG9rZW5zX2FmdGVyID0gbWF0aHMubXlUb2tlbnMoKTsKICAgICAgICB1aW50MjU2IHRva2Vuc19ib3VnaHQgPSBTYWZlTWF0aC5zdWIodG9rZW5zX2FmdGVyLCB0b2tlbnNfYmVmb3JlKS5kaXYoMWUxOCk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnNfYm91Z2h0ID49IDEgJiYgdG9rZW5zX2JvdWdodCA8PSBNQVhfVE9LRU5fQlVZSU4pOwogICAgICAgIG51bVRva2Vuc0luTG90dGVyeSA9IG1hdGhzLm15VG9rZW5zKCk7CiAgICAgICAgCiAgICAgICAgLy8gU2V0IGxhc3Rfcm91bmRfYm91Z2h0ID0gY3VycmVudCByb3VuZCBhbmQgdG9rZW5fYnV5aW5zIHZhbHVlCiAgICAgICAgLy8gVXNlcyBhIGZvciBsb29wIHRvIHB1dCB1cCB0byAyNSB0aWNrZXRzIGluLgogICAgICAgIHVpbnQ4IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgdG9rZW5zX2JvdWdodCkgewogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIAogICAgICAgICAgICBnYW1ibGVyc1tudW1fdGlja2V0c19jdXJyZW50X3JvdW5kXSA9IG1zZy5zZW5kZXI7CiAgICAgICAgICAgIG51bV90aWNrZXRzX2N1cnJlbnRfcm91bmQrKzsKICAgICAgICB9CgogICAgICAgIHRva2VuX2J1eWluc1ttc2cuc2VuZGVyXSA9IHRva2Vuc19ib3VnaHQ7CiAgICAgICAgbGFzdF9yb3VuZF9ib3VnaHRbbXNnLnNlbmRlcl0gPSBjdXJyZW50X3JvdW5kOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRNYXhUb2tlbkJ1eWluKHVpbnQyNTYgdG9rZW5zKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKGlzTG90dGVyeU9wZW4gPT0gZmFsc2UpOwogICAgICAgIHJlcXVpcmUodG9rZW5zID4gMCk7CiAgICAgICAgCiAgICAgICAgTUFYX1RPS0VOX0JVWUlOID0gdG9rZW5zOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcGVuTG90dGVyeSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoaXNMb3R0ZXJ5T3BlbiA9PSBmYWxzZSk7CiAgICAgICAgY3VycmVudF9yb3VuZCsrOwogICAgICAgIGlzTG90dGVyeU9wZW4gPSB0cnVlOwogICAgICAgIG51bV90aWNrZXRzX2N1cnJlbnRfcm91bmQgPSAwOwogICAgfQogICAgCiAgICAvLyBXZSBuZWVkIHRvIGJlIHBheWFibGUgaW4gb3JkZXIgdG8gcmVjZWl2ZSBkaXZpZGVuZHMuCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7fQogICAgCiAgICBmdW5jdGlvbiBjbG9zZUxvdHRlcnlBbmRQaWNrV2lubmVyKCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShpc0xvdHRlcnlPcGVuID09IHRydWUpOwogICAgICAgIGlzTG90dGVyeU9wZW4gPSBmYWxzZTsKICAgICAgICAKICAgICAgICAvLyBQaWNrIHdpbm5lciBhcyBhIHBzZXVkby1yYW5kb20gaGFzaCBvZiB0aGUgdGltZXN0YW1wIGFtb25nIGFsbCB0aGUgY3VycmVudCB3aW5uZXJzCiAgICAgICAgLy8gWUVTIHdlIGtub3cgdGhpcyBpc24ndCAvdHJ1bHkvIHJhbmRvbSBidXQgdW5sZXNzIHRoZSBwcml6ZSBpcyB3b3J0aCBtb3JlIHRoYW4gdGhlIGJsb2NrIG1pbmluZyByZXdhcmQKICAgICAgICAvLyAgaXQgZG9lc24ndCBmdWNraW5nIG1hdHRlci4KICAgICAgICB1aW50MjU2IHdpbm5pbmdfbnVtYmVyID0gdWludDI1NihrZWNjYWsyNTYoYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpKSkgJSBudW1fdGlja2V0c19jdXJyZW50X3JvdW5kOwogICAgICAgIGFkZHJlc3Mgd2lubmVyID0gZ2FtYmxlcnNbd2lubmluZ19udW1iZXJdOwogICAgICAgIG1hc3Rlcm5vZGVfcmVmZXJyZXIgPSB3aW5uZXI7CiAgICAgICAgCiAgICAgICAgLy8gRVJDMjAgdHJhbnNmZXIgJiBjbGVhciBvdXQgb3VyIHRva2Vucy4KICAgICAgICB1aW50MjU2IGV4YWN0X3Rva2VucyA9IG1hdGhzLm15VG9rZW5zKCk7CiAgICAgICAgbWF0aHMudHJhbnNmZXIod2lubmVyLCBleGFjdF90b2tlbnMpOwogICAgICAgIG51bVRva2Vuc0luTG90dGVyeSA9IDA7CiAgICAgICAgCiAgICAgICAgLy8gdHJhbnNmZXIgYW55IGRpdnMgd2UgZ290CiAgICAgICAgd2lubmVyLnRyYW5zZmVyKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7CiAgICB9Cn0KCi8vIEZ1bmN0aW9uIHByb3RvdHlwZXMgZm9yIFBvV00KY29udHJhY3QgUE9XTSB7CiAgICBmdW5jdGlvbiBidXkoYWRkcmVzcyBfcmVmZXJyZWRCeSkgcHVibGljIHBheWFibGUgcmV0dXJucyh1aW50MjU2KSB7fQogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zUmVjZWl2ZWQodWludDI1NiBfZXRoZXJldW1Ub1NwZW5kKSBwdWJsaWMgdmlldyByZXR1cm5zKHVpbnQyNTYpIHt9CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90b0FkZHJlc3MsIHVpbnQyNTYgX2Ftb3VudE9mVG9rZW5zKSByZXR1cm5zKGJvb2wpIHt9CiAgICBmdW5jdGlvbiBteVRva2VucygpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1Nikge30KfQoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogICAgLyoqCiAgICAqIEBkZXYgTXVsdGlwbGllcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEludGVnZXIgZGl2aXNpb24gb2YgdHdvIG51bWJlcnMsIHRydW5jYXRpbmcgdGhlIHF1b3RpZW50LgogICAgKi8KICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgICAqLwogICAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICAgKi8KICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0='.
	

]
