Class {
	#name : #SRT3ccb4b3bb15d4b8911cd7f57a6479e21daf4c68c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3ccb4b3bb15d4b8911cd7f57a6479e21daf4c68c >> base64 [
	^ ''.
	

]
