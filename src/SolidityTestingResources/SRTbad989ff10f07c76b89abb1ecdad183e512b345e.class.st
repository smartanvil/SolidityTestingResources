Class {
	#name : #SRTbad989ff10f07c76b89abb1ecdad183e512b345e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbad989ff10f07c76b89abb1ecdad183e512b345e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7CiAgICAgIG93bmVyID0gbmV3T3duZXI7CiAgICB9CiAgfQoKfQoKY29udHJhY3QgQkJEVG9rZW4gewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7CgogICAgZnVuY3Rpb24gY3JlYXRpb25SYXRlT25UaW1lKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgICBmdW5jdGlvbiBjcmVhdGlvbk1pbkNhcCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJUb0V4Y2hhbmdlKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsKICAgIGZ1bmN0aW9uIGJ1eShhZGRyZXNzIF9iZW5lZmljaWFyeSkgcGF5YWJsZTsKfQoKLyoqCiAgICBFeGNoYW5nZSBmb3IgQmxvY2tDaGFpbiBCb2FyZCBPZiBEZXJpdmF0aXZlcyBUb2tlbi4KICovCmNvbnRyYWN0IEJCREV4Y2hhbmdlIGlzIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgc3RhcnRUaW1lID0gMTUwNjg0NDgwMDsgLy9TdW5kYXksIDEgT2N0b2JlciAyMDE3IDA4OjAwOjAwIEdNVAogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZW5kVGltZSA9IDE1MDk1MjMyMDA7ICAvLyBXZWRuZXNkYXksIDEgTm92ZW1iZXIgMjAxNyAwODowMDowMCBHTVQKCiAgICBCQkRUb2tlbiBwcml2YXRlIGJiZFRva2VuOwoKICAgIC8vIEV2ZW50cwogICAgZXZlbnQgTG9nU2VsbChhZGRyZXNzIGluZGV4ZWQgX3NlbGxlciwgdWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX2Ftb3VudCk7CiAgICBldmVudCBMb2dCdXkoYWRkcmVzcyBpbmRleGVkIF9wdXJjaGFzZXIsIHVpbnQyNTYgX3ZhbHVlLCB1aW50MjU2IF9hbW91bnQpOwoKICAgIC8vIENoZWNrIGlmIG1pbiBjYXAgd2FzIGFyY2hpdmVkLgogICAgbW9kaWZpZXIgb25seVdoZW5JQ09SZWFjaGVkQ3JlYXRpb25NaW5DYXAoKSB7CiAgICAgICAgcmVxdWlyZShiYmRUb2tlbi50b3RhbFN1cHBseSgpID49IGJiZFRva2VuLmNyZWF0aW9uTWluQ2FwKCkpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHt9CgogICAgZnVuY3Rpb24gRXhjaGFuZ2UoYWRkcmVzcyBiYmRUb2tlbkFkZHJlc3MpIHsKICAgICAgICBiYmRUb2tlbiA9IEJCRFRva2VuKGJiZFRva2VuQWRkcmVzcyk7CiAgICB9CgogICAgLy8gQ3VycmVudCBleGNoYW5nZSByYXRlIGZvciBCQkQKICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUmF0ZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHJldHVybiBiYmRUb2tlbi5jcmVhdGlvblJhdGVPblRpbWUoKS5tdWwoMTAwKS5kaXYoOTMpOyAvLyA5MyUgb2YgcHJpY2Ugb24gY3VycmVudCBjb250cmFjdCBzYWxlCiAgICB9CgogICAgLy8gTnVtYmVyIG9mIEJCRCB0b2tlbnMgb24gZXhjaGFuZ2UKICAgIGZ1bmN0aW9uIGV4Y2hhbmdlQkJEQmFsYW5jZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpewogICAgICAgIHJldHVybiBiYmRUb2tlbi5iYWxhbmNlT2YodGhpcyk7CiAgICB9CgogICAgLy8gTWF4IG51bWJlciBvZiBCQkQgdG9rZW5zIG9uIGV4Y2hhbmdlIHRvIHNlbGwKICAgIGZ1bmN0aW9uIG1heFNlbGwoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHZhbHVlQmJkKSB7CiAgICAgICAgdmFsdWVCYmQgPSB0aGlzLmJhbGFuY2UubXVsKGV4Y2hhbmdlUmF0ZSgpKTsKICAgIH0KCiAgICAvLyBNYXggdmFsdWUgb2Ygd2VpIGZvciBidXkgb24gZXhjaGFuZ2UKICAgIGZ1bmN0aW9uIG1heEJ1eSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdmFsdWVJbkV0aFdlaSkgewogICAgICAgIHZhbHVlSW5FdGhXZWkgPSBleGNoYW5nZUJCREJhbGFuY2UoKS5kaXYoZXhjaGFuZ2VSYXRlKCkpOwogICAgfQoKICAgIC8vIENoZWNrIGlmIHNlbGwgaXMgcG9zc2libGUKICAgIGZ1bmN0aW9uIGNoZWNrU2VsbCh1aW50MjU2IF92YWx1ZUJiZCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBpc1Bvc3NpYmxlLCB1aW50MjU2IHZhbHVlSW5FdGhXZWkpIHsKICAgICAgICB2YWx1ZUluRXRoV2VpID0gX3ZhbHVlQmJkLmRpdihleGNoYW5nZVJhdGUoKSk7CiAgICAgICAgaXNQb3NzaWJsZSA9IHRoaXMuYmFsYW5jZSA+PSB2YWx1ZUluRXRoV2VpID8gdHJ1ZSA6IGZhbHNlOwogICAgfQoKICAgIC8vIENoZWNrIGlmIGJ1eSBpcyBwb3NzaWJsZQogICAgZnVuY3Rpb24gY2hlY2tCdXkodWludDI1NiBfdmFsdWVJbkV0aFdlaSkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBpc1Bvc3NpYmxlLCB1aW50MjU2IHZhbHVlQmJkKSB7CiAgICAgICAgdmFsdWVCYmQgPSBfdmFsdWVJbkV0aFdlaS5tdWwoZXhjaGFuZ2VSYXRlKCkpOwogICAgICAgIGlzUG9zc2libGUgPSBleGNoYW5nZUJCREJhbGFuY2UoKSA+PSB2YWx1ZUJiZCA/IHRydWUgOiBmYWxzZTsKICAgIH0KCiAgICAvLyBTZWxsIEJCRAogICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IF92YWx1ZUJiZCkgb25seVdoZW5JQ09SZWFjaGVkQ3JlYXRpb25NaW5DYXAgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoX3ZhbHVlQmJkID4gMCk7CiAgICAgICAgcmVxdWlyZShub3cgPj0gc3RhcnRUaW1lKTsKICAgICAgICByZXF1aXJlKG5vdyA8PSBlbmRUaW1lKTsKICAgICAgICByZXF1aXJlKF92YWx1ZUJiZCA8PSBiYmRUb2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikpOwoKICAgICAgICB1aW50MjU2IGNoZWNrZWRFdGggPSBfdmFsdWVCYmQuZGl2KGV4Y2hhbmdlUmF0ZSgpKTsKICAgICAgICByZXF1aXJlKGNoZWNrZWRFdGggPD0gdGhpcy5iYWxhbmNlKTsKCiAgICAgICAgLy9UcmFuc2ZlciBCQkQgdG8gZXhjaGFuZ2UgYW5kIEVUSCB0byB1c2VyIAogICAgICAgIHJlcXVpcmUoYmJkVG9rZW4udHJhbnNmZXJUb0V4Y2hhbmdlKG1zZy5zZW5kZXIsIF92YWx1ZUJiZCkpOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoY2hlY2tlZEV0aCk7CgogICAgICAgIExvZ1NlbGwobXNnLnNlbmRlciwgY2hlY2tlZEV0aCwgX3ZhbHVlQmJkKTsKICAgIH0KCiAgICAvLyBCdXkgQkJECiAgICBmdW5jdGlvbiBidXkoKSBvbmx5V2hlbklDT1JlYWNoZWRDcmVhdGlvbk1pbkNhcCBwYXlhYmxlIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSAhPSAwKTsKICAgICAgICByZXF1aXJlKG5vdyA+PSBzdGFydFRpbWUpOwogICAgICAgIHJlcXVpcmUobm93IDw9IGVuZFRpbWUpOwoKICAgICAgICB1aW50MjU2IGNoZWNrZWRCQkRUb2tlbnMgPSBtc2cudmFsdWUubXVsKGV4Y2hhbmdlUmF0ZSgpKTsKICAgICAgICByZXF1aXJlKGNoZWNrZWRCQkRUb2tlbnMgPD0gZXhjaGFuZ2VCQkRCYWxhbmNlKCkpOwoKICAgICAgICAvL1RyYW5zZmVyIEJCRCB0byB1c2VyLiAKICAgICAgICByZXF1aXJlKGJiZFRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGNoZWNrZWRCQkRUb2tlbnMpKTsKCiAgICAgICAgTG9nQnV5KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgY2hlY2tlZEJCRFRva2Vucyk7CiAgICB9CgogICAgLy8gQ2xvc2UgRXhjaGFuZ2UKICAgIGZ1bmN0aW9uIGNsb3NlKCkgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG5vdyA+PSBlbmRUaW1lKTsKCiAgICAgICAgLy9UcmFuc2ZlciBCQkQgYW5kIEVUSCB0byBvd25lcgogICAgICAgIHJlcXVpcmUoYmJkVG9rZW4udHJhbnNmZXIob3duZXIsIGV4Y2hhbmdlQkJEQmFsYW5jZSgpKSk7CiAgICAgICAgb3duZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KfQ=='.
	

]
