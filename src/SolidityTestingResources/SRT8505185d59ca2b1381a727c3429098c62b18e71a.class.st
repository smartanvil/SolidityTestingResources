Class {
	#name : #SRT8505185d59ca2b1381a727c3429098c62b18e71a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8505185d59ca2b1381a727c3429098c62b18e71a >> base64 [
	^ ''.
	

]
