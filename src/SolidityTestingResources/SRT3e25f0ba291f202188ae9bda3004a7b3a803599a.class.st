Class {
	#name : #SRT3e25f0ba291f202188ae9bda3004a7b3a803599a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3e25f0ba291f202188ae9bda3004a7b3a803599a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjE7CgovKiAKICAgIENvbnRyYWN0IGZvciBEZWx0YUJhbGFuY2VzLmdpdGh1Yi5pbyBWMwogICAgQ2hlY2sgYmFsYW5jZXMgZm9yIG11bHRpcGxlIEVSQzIwIHRva2VucyBpbiAxIGJhdGNoZWQgcmVxdWVzdC4KICAgIEZvciB0aGUgcHJldmlvdXMgdmVyc2lvbnMsIHNlZSAweDMxNTA5NTRFQUUxYThhNWU1RUUxRjFCOEU4NDQ0RmUxNkVBOUY5NEMsIDB4ZjVmNTYzRDNBOTkxNTJjMThjRThiMTMzMjMyRmUzNDMxN0Y2MEZFRgogICAgCiAgICAvLyBhZGRyZXNzIDB4MCBpcyB1c2VkIHRvIGluZGljYXRlIEVUSAoqLwoKLy8gRXhjaGFuZ2UgY29udHJhY3QgSW50ZXJmYWNlIGZvciBFdGhlckRlbHRhIGFuZCBmb3Jrcwpjb250cmFjdCBFeGNoYW5nZSB7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgLyp0b2tlbiovLCBhZGRyZXNzIC8qdXNlciovKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KTsKfQoKLy8gRVJDMjAgY29udHJhY3QgaW50ZXJmYWNlCmNvbnRyYWN0IFRva2VuIHsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyAvKnRva2VuT3duZXIqLykgcHVibGljIHZpZXcgcmV0dXJucyAodWludCAvKmJhbGFuY2UqLyk7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyAvKnRvKi8sIHVpbnQgLyp0b2tlbnMqLykgcHVibGljIHJldHVybnMgKGJvb2wgLypzdWNjZXNzKi8pOwp9Cgpjb250cmFjdCBEZWx0YUJhbGFuY2VzIHsKICAgIAogIGFkZHJlc3MgcHVibGljIGFkbWluOyAKCiAgZnVuY3Rpb24gRGVsdGFCYWxhbmNlcygpIHB1YmxpYyB7CiAgICBhZG1pbiA9IG1zZy5zZW5kZXI7CiAgfQoKICAvLyBGYWxsYmFjayBmdW5jdGlvbiwgZG9uJ3QgYWNjZXB0IGFueSBFVEgKICBmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJldmVydCgpOwogIH0KCiAgLy8gTGltaXQgd2l0aGRyYXdhbHMgdG8gdGhlIGNvbnRyYWN0IGNyZWF0b3IKICBtb2RpZmllciBpc0FkbWluKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgIF87CiAgfQoKICAvLyBCYWNrdXAgd2l0aGRyYXcsIGluIGNhc2UgRVRIIGdldHMgaW4gaGVyZQogIGZ1bmN0aW9uIHdpdGhkcmF3KCkgZXh0ZXJuYWwgaXNBZG1pbiB7CiAgICBhZG1pbi50cmFuc2ZlcihhZGRyZXNzKHRoaXMpLmJhbGFuY2UpOwogIH0KCiAgLy8gQmFja3VwIHdpdGhkcmF3LCBpbiBjYXNlIEVSQzIwIHRva2VucyBnZXQgaW4gaGVyZQogIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW4oYWRkcmVzcyB0b2tlbiwgdWludCBhbW91bnQpIGV4dGVybmFsIGlzQWRtaW4gewogICAgcmVxdWlyZSh0b2tlbiAhPSBhZGRyZXNzKDB4MCkgJiYgVG9rZW4odG9rZW4pLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCkpOwogIH0KCiAgLyogR2V0IG11bHRpcGxlIHRva2VuIGJhbGFuY2VzIG9uIEV0aGVyRGVsdGEgKG9yIHNpbWlsYXIgZXhjaGFuZ2UpCiAgICBQb3NzaWJsZSBlcnJvciB0aHJvd3M6CiAgICAgICAgLSBpbnZhbGlkIGV4Y2hhbmdlIGNvbnRyYWN0IAogICAgICAgIC0gdXNpbmcgYW4gZXh0cmVtZWx5IGxhcmdlIGFycmF5IChnYXMgY29zdCB0b28gaGlnaD8pCiAgICAgICAgCiAgICBSZXR1cm5zIGFycmF5IG9mIHRva2VuIGJhbGFuY2VzIGluIHdlaSB1bml0cy4gKi8KICBmdW5jdGlvbiBkZWx0YUJhbGFuY2VzKGFkZHJlc3MgZXhjaGFuZ2UsIGFkZHJlc3MgdXNlciwgIGFkZHJlc3NbXSB0b2tlbnMpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludFtdKSB7CiAgICBFeGNoYW5nZSBleCA9IEV4Y2hhbmdlKGV4Y2hhbmdlKTsKICAgIHVpbnRbXSBtZW1vcnkgYmFsYW5jZXMgPSBuZXcgdWludFtdKHRva2Vucy5sZW5ndGgpOwogICAgCiAgICBmb3IodWludCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICBiYWxhbmNlc1tpXSA9IGV4LmJhbGFuY2VPZih0b2tlbnNbaV0sIHVzZXIpOwogICAgfSAgICAKICAgIHJldHVybiBiYWxhbmNlczsKICB9CgogIC8qIEdldCBtdWx0aXBsZSB0b2tlbiBiYWxhbmNlcyBvbiBFdGhlckRlbHRhIChvciBzaW1pbGFyIGV4Y2hhbmdlKQogICAgUG9zc2libGUgZXJyb3IgdGhyb3dzOgogICAgICAgIC0gaW52YWxpZCBleGNoYW5nZSBjb250cmFjdCAKICAgICAgICAtIHVzaW5nIGV4dHJlbWVseSBsYXJnZSBhcnJheXMgKGdhcyBjb3N0IHRvbyBoaWdoPykKICAgICAgICAKICAgIFJldHVybnMgYXJyYXkgb2YgdG9rZW4gYmFsYW5jZXMgaW4gd2VpIHVuaXRzLgogICAgQmFsYW5jZXMgaW4gdG9rZW4tZmlyc3Qgb3JkZXIgW3Rva2VuMGV4MCwgdG9rZW4wZXgxLCB0b2tlbjBleDIsIHRva2VuMWV4MCwgdG9rZW4xZXgxIC4uLl0gKi8KICBmdW5jdGlvbiBtdWx0aURlbHRhQmFsYW5jZXMoYWRkcmVzc1tdIGV4Y2hhbmdlcywgYWRkcmVzcyB1c2VyLCAgYWRkcmVzc1tdIHRva2VucykgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50W10pIHsKICAgIHVpbnRbXSBtZW1vcnkgYmFsYW5jZXMgPSBuZXcgdWludFtdKHRva2Vucy5sZW5ndGggKiBleGNoYW5nZXMubGVuZ3RoKTsKICAgIAogICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBleGNoYW5nZXMubGVuZ3RoOyBpKyspIHsKICAgICAgRXhjaGFuZ2UgZXggPSBFeGNoYW5nZShleGNoYW5nZXNbaV0pOwogICAgICAgIAogICAgICBmb3IodWludCBqID0gMDsgaiA8IHRva2Vucy5sZW5ndGg7IGorKykgewogICAgICAgIGJhbGFuY2VzWyhqICogZXhjaGFuZ2VzLmxlbmd0aCkgKyBpXSA9IGV4LmJhbGFuY2VPZih0b2tlbnNbal0sIHVzZXIpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYmFsYW5jZXM7CiAgfQoKIC8qIENoZWNrIHRoZSB0b2tlbiBiYWxhbmNlIG9mIGEgd2FsbGV0IGluIGEgdG9rZW4gY29udHJhY3QKICAgIEF2b2lkcyBwb3NzaWJsZSBlcnJvcnM6CiAgICAtIHJldHVybnMgMCBvbiBpbnZhbGlkIGV4Y2hhbmdlIGNvbnRyYWN0IAogICAgLSByZXR1cm4gMCBvbiBub24tY29udHJhY3QgYWRkcmVzcyAKICAgIAogICAgTWFpbmx5IGZvciBpbnRlcm5hbCB1c2UsIGJ1dCBwdWJsaWMgZm9yIGFueW9uZSB3aG8gdGhpbmtzIGl0IGlzIHVzZWZ1bCAgICAqLwogIGZ1bmN0aW9uIHRva2VuQmFsYW5jZShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgdG9rZW4pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgIC8vIGNoZWNrIGlmIHRva2VuIGlzIGFjdHVhbGx5IGEgY29udHJhY3QKICAgIHVpbnQyNTYgdG9rZW5Db2RlOwogICAgYXNzZW1ibHkgeyB0b2tlbkNvZGUgOj0gZXh0Y29kZXNpemUodG9rZW4pIH0gLy8gY29udHJhY3QgY29kZSBzaXplCiAgIAogICAvLyBpcyBpdCBhIGNvbnRyYWN0IGFuZCBkb2VzIGl0IGltcGxlbWVudCBiYWxhbmNlT2YgCiAgICBpZih0b2tlbkNvZGUgPiAwICYmIHRva2VuLmNhbGwoYnl0ZXM0KDB4NzBhMDgyMzEpLCB1c2VyKSkgeyAgICAvLyBieXRlczQoa2VjY2FrMjU2KCJiYWxhbmNlT2YoYWRkcmVzcykiKSkgPT0gYnl0ZXM0KDB4NzBhMDgyMzEpICAKICAgICAgcmV0dXJuIFRva2VuKHRva2VuKS5iYWxhbmNlT2YodXNlcik7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gMDsgLy8gbm90IGEgdmFsaWQgdG9rZW4sIHJldHVybiAwIGluc3RlYWQgb2YgZXJyb3IKICAgIH0KICB9CgogLyogQ2hlY2sgdGhlIHRva2VuIGJhbGFuY2VzIG9mIGEgd2FsbGV0IGZvciBtdWx0aXBsZSB0b2tlbnMKICAgIFVzZXMgdG9rZW5CYWxhbmNlKCkgdG8gYmUgYWJsZSB0byByZXR1cm4sIGV2ZW4gaWYgYSB0b2tlbiBpc24ndCB2YWxpZCAKICAgIFBvc3NpYmxlIGVycm9yIHRocm93czoKICAgICAgICAtIGV4dHJlbWVseSBsYXJnZSBhcnJheXMgKGdhcyBjb3N0IHRvbyBoaWdoKSAKICAgICAgICAKICAgIFJldHVybnMgYXJyYXkgb2YgdG9rZW4gYmFsYW5jZXMgaW4gd2VpIHVuaXRzLiAqLwogIGZ1bmN0aW9uIHdhbGxldEJhbGFuY2VzKGFkZHJlc3MgdXNlciwgIGFkZHJlc3NbXSB0b2tlbnMpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludFtdKSB7CiAgICB1aW50W10gbWVtb3J5IGJhbGFuY2VzID0gbmV3IHVpbnRbXSh0b2tlbnMubGVuZ3RoKTsKICAgIAogICAgZm9yKHVpbnQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYodG9rZW5zW2ldICE9IGFkZHJlc3MoMHgwKSkgeyAKICAgICAgICBiYWxhbmNlc1tpXSA9IHRva2VuQmFsYW5jZSh1c2VyLCB0b2tlbnNbaV0pOwogICAgICB9IGVsc2UgewogICAgICAgIGJhbGFuY2VzW2ldID0gdXNlci5iYWxhbmNlOyAvLyBFVEggYmFsYW5jZSAgICAKICAgICAgfQogICAgfSAgICAKICAgIHJldHVybiBiYWxhbmNlczsKICB9CgogLyogQ29tYmluZSB3YWxsZXRCYWxhbmNlcygpIGFuZCBkZWx0YUJhbGFuY2VzKCkgdG8gZ2V0IGJvdGggZXhjaGFuZ2UgYW5kIHdhbGxldCBiYWxhbmNlcyBmb3IgbXVsdGlwbGUgdG9rZW5zLgogICAgUG9zc2libGUgZXJyb3IgdGhyb3dzOgogICAgICAgIC0gZXh0cmVtZWx5IGxhcmdlIGFycmF5cyAoZ2FzIGNvc3QgdG9vIGhpZ2gpIAogICAgICAgIAogICAgUmV0dXJucyBhcnJheSBvZiB0b2tlbiBiYWxhbmNlcyBpbiB3ZWkgdW5pdHMsIDIqIGlucHV0IGxlbmd0aC4KICAgIGV2ZW4gaW5kZXggWzBdIGlzIGV4Y2hhbmdlIGJhbGFuY2UsIG9kZCBbMV0gaXMgd2FsbGV0IGJhbGFuY2UKICAgIFt0b2swZXgsIHRvazAsIHRvazFleCwgdG9rMSwgLi4gXSAqLwogIGZ1bmN0aW9uIGFsbEJhbGFuY2VzKGFkZHJlc3MgZXhjaGFuZ2UsIGFkZHJlc3MgdXNlciwgIGFkZHJlc3NbXSB0b2tlbnMpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludFtdKSB7CiAgICBFeGNoYW5nZSBleCA9IEV4Y2hhbmdlKGV4Y2hhbmdlKTsKICAgIHVpbnRbXSBtZW1vcnkgYmFsYW5jZXMgPSBuZXcgdWludFtdKHRva2Vucy5sZW5ndGggKiAyKTsKICAgIAogICAgZm9yKHVpbnQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgdWludCBqID0gaSAqIDI7CiAgICAgIGJhbGFuY2VzW2pdID0gZXguYmFsYW5jZU9mKHRva2Vuc1tpXSwgdXNlcik7CiAgICAgIGlmKHRva2Vuc1tpXSAhPSBhZGRyZXNzKDB4MCkpIHsKICAgICAgICBiYWxhbmNlc1tqICsgMV0gPSB0b2tlbkJhbGFuY2UodXNlciwgdG9rZW5zW2ldKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBiYWxhbmNlc1tqICsgMV0gPSB1c2VyLmJhbGFuY2U7IC8vIEVUSCBiYWxhbmNlICAgIAogICAgICB9CiAgICB9CiAgICByZXR1cm4gYmFsYW5jZXM7IAogIH0KICAKfQ=='.
	

]
