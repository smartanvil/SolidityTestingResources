Class {
	#name : #SRT97465a514b53127f6980b925587e508f07691da7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT97465a514b53127f6980b925587e508f07691da7 >> base64 [
	^ ''.
	

]
