Class {
	#name : #SRTd1195c7dae5d4402ded616b7f3d41524614ef1e3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd1195c7dae5d4402ded616b7f3d41524614ef1e3 >> base64 [
	^ ''.
	

]
