Class {
	#name : #SRTf319b117daaef65aaa86e52184dff52be3f9b47c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf319b117daaef65aaa86e52184dff52be3f9b47c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgogLyoKICogQ29udHJhY3QgdGhhdCBpcyB3b3JraW5nIHdpdGggRVJDMjIzIHRva2VucwogKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjIzCiAqLwoKLy8vIEB0aXRsZSBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCAtIFN0YW5kYXJkIGNvbnRyYWN0IGltcGxlbWVudGF0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggRVJDMjIzIHRva2Vucy4KY29udHJhY3QgRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QgewoKICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSB1c2VyIG9yIGFub3RoZXIgY29udHJhY3Qgd2FudHMgdG8gdHJhbnNmZXIgZnVuZHMuCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRyYW5zYWN0aW9uIGluaXRpYXRvciwgYW5hbG9ndWUgb2YgbXNnLnNlbmRlcgogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4KICAgIC8vLyBAcGFyYW0gX2RhdGEgRGF0YSBjb250YWluaWcgYSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kL29yIHBhcmFtZXRlcnMKICAgIGZ1bmN0aW9uIHRva2VuRmFsbGJhY2soYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSBwdWJsaWM7Cn0KCi8vLyBAdGl0bGUgQmFzZSBUb2tlbiBjb250cmFjdCAtIEZ1bmN0aW9ucyB0byBiZSBpbXBsZW1lbnRlZCBieSB0b2tlbiBjb250cmFjdHMuCmNvbnRyYWN0IFRva2VuIHsKICAgIC8qCiAgICAgKiBJbXBsZW1lbnRzIEVSQyAyMCBzdGFuZGFyZC4KICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvZjkwODY0YTNkMmIyYjQ1YzRkZWNmOTVlZmQyNmIzZjBjMjc2MDUxYS9FSVBTL2VpcC0yMC10b2tlbi1zdGFuZGFyZC5tZAogICAgICogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAgICAgKgogICAgICogIEFkZGVkIHN1cHBvcnQgZm9yIHRoZSBFUkMgMjIzICJ0b2tlbkZhbGxiYWNrIiBtZXRob2QgaW4gYSAidHJhbnNmZXIiIGZ1bmN0aW9uIHdpdGggYSBwYXlsb2FkLgogICAgICogIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMjMKICAgICAqLwoKICAgIC8qCiAgICAgKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgICAqIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgICogaXMgcmVwbGFjZWQgd2l0aDoKICAgICAqIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgICogVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgICAqIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgICogY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICAgKiBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAgKi8KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8qCiAgICAgKiBFUkMgMjAKICAgICAqLwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIC8qCiAgICAgKiBFUkMgMjIzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8qCiAgICAgKiBFdmVudHMKICAgICAqLwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiAgICAvLyBUaGVyZSBpcyBubyBFUkMyMjMgY29tcGF0aWJsZSBUcmFuc2ZlciBldmVudCwgd2l0aCBgX2RhdGFgIGluY2x1ZGVkLgp9CgoKLy8vIEB0aXRsZSBTdGFuZGFyZCB0b2tlbiBjb250cmFjdCAtIFN0YW5kYXJkIHRva2VuIGltcGxlbWVudGF0aW9uLgpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsKCiAgICAvKgogICAgICogRGF0YSBzdHJ1Y3R1cmVzCiAgICAgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLyoKICAgICAqIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBub3RpY2UgU2VuZCBgX3ZhbHVlYCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAuCiAgICAvLy8gQGRldiBUcmFuc2ZlcnMgc2VuZGVyJ3MgdG9rZW5zIHRvIGEgZ2l2ZW4gYWRkcmVzcy4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiByZWNlaXZlci4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF90byAhPSAweDApOwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIHJlcXVpcmUoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfdmFsdWVgIHRva2VucyB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYCBhbmQgdHJpZ2dlcgogICAgLy8vIHRva2VuRmFsbGJhY2sgaWYgc2VuZGVyIGlzIGEgY29udHJhY3QuCiAgICAvLy8gQGRldiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgdXNlciBvciBhbm90aGVyIGNvbnRyYWN0IHdhbnRzIHRvIHRyYW5zZmVyIGZ1bmRzLgogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiByZWNlaXZlci4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIuCiAgICAvLy8gQHBhcmFtIF9kYXRhIERhdGEgdG8gYmUgc2VudCB0byB0b2tlbkZhbGxiYWNrCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX3ZhbHVlLAogICAgICAgIGJ5dGVzIF9kYXRhKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcihfdG8sIF92YWx1ZSkpOwoKICAgICAgICB1aW50IGNvZGVMZW5ndGg7CgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgLy8gUmV0cmlldmUgdGhlIHNpemUgb2YgdGhlIGNvZGUgb24gdGFyZ2V0IGFkZHJlc3MsIHRoaXMgbmVlZHMgYXNzZW1ibHkuCiAgICAgICAgICAgIGNvZGVMZW5ndGggOj0gZXh0Y29kZXNpemUoX3RvKQogICAgICAgIH0KCiAgICAgICAgaWYgKGNvZGVMZW5ndGggPiAwKSB7CiAgICAgICAgICAgIEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0IHJlY2VpdmVyID0gRVJDMjIzUmVjZWl2aW5nQ29udHJhY3QoX3RvKTsKICAgICAgICAgICAgcmVjZWl2ZXIudG9rZW5GYWxsYmFjayhtc2cuc2VuZGVyLCBfdmFsdWUsIF9kYXRhKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVyIGBfdmFsdWVgIHRva2VucyBmcm9tIGBfZnJvbWAgdG8gYF90b2AgaWYgYG1zZy5zZW5kZXJgIGlzIGFsbG93ZWQuCiAgICAvLy8gQGRldiBBbGxvd3MgZm9yIGFuIGFwcHJvdmVkIHRoaXJkIHBhcnR5IHRvIHRyYW5zZmVyIHRva2VucyBmcm9tIG9uZQogICAgLy8vIGFkZHJlc3MgdG8gYW5vdGhlci4gUmV0dXJucyBzdWNjZXNzLgogICAgLy8vIEBwYXJhbSBfZnJvbSBBZGRyZXNzIGZyb20gd2hlcmUgdG9rZW5zIGFyZSB3aXRoZHJhd24uCiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIHRvIHdoZXJlIHRva2VucyBhcmUgc2VudC4KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXF1aXJlKF9mcm9tICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZShfdG8gIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUpOwogICAgICAgIHJlcXVpcmUoYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW190b10gKyBfdmFsdWUgPj0gYmFsYW5jZXNbX3RvXSk7CgogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwoKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBbGxvd3MgYF9zcGVuZGVyYCB0byB0cmFuc2ZlciBgX3ZhbHVlYCB0b2tlbnMgZnJvbSBgbXNnLnNlbmRlcmAgdG8gYW55IGFkZHJlc3MuCiAgICAvLy8gQGRldiBTZXRzIGFwcHJvdmVkIGFtb3VudCBvZiB0b2tlbnMgZm9yIHNwZW5kZXIuIFJldHVybnMgc3VjY2Vzcy4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgQWRkcmVzcyBvZiBhbGxvd2VkIGFjY291bnQuCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgYXBwcm92ZWQgdG9rZW5zLgogICAgLy8vIEByZXR1cm4gUmV0dXJucyBzdWNjZXNzIG9mIGZ1bmN0aW9uIGNhbGwuCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3NwZW5kZXIgIT0gMHgwKTsKCiAgICAgICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgICAgICAvLyBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgICAgIHJlcXVpcmUoX3ZhbHVlID09IDAgfHwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCk7CgogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qCiAgICAgKiBSZWFkIGZ1bmN0aW9ucwogICAgICovCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiBhbGxvd2VkIHRva2VucyB0aGF0IGEgc3BlbmRlciBjYW4gdHJhbnNmZXIgb24KICAgIC8vLyBiZWhhbGYgb2YgYSB0b2tlbiBvd25lci4KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgdG9rZW4gc3BlbmRlci4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgcmVtYWluaW5nIGFsbG93YW5jZSBmb3Igc3BlbmRlci4KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikKICAgICAgICBjb25zdGFudAogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IHRoZSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYmFsYW5jZSBvZiBvd25lci4KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KfQoKCi8vLyBAdGl0bGUgUmFpZGVuIFRva2VuCmNvbnRyYWN0IFJhaWRlblRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewoKICAgIC8qCiAgICAgKiAgVGVybWlub2xvZ3k6CiAgICAgKiAgMSB0b2tlbiB1bml0ID0gUmVpCiAgICAgKiAgMSB0b2tlbiA9IFJETiA9IFJlaSAqIG11bHRpcGxpZXIKICAgICAqICBtdWx0aXBsaWVyIHNldCBmcm9tIHRva2VuJ3MgbnVtYmVyIG9mIGRlY2ltYWxzIChpLmUuIDEwICoqIGRlY2ltYWxzKQogICAgICovCgogICAgLyoKICAgICAqICBUb2tlbiBtZXRhZGF0YQogICAgICovCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIG5hbWUgPSAiQ3plcGx1Y2ggVG9rZW4iOwogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBzeW1ib2wgPSAiQ1ROIjsKICAgIHVpbnQ4IGNvbnN0YW50IHB1YmxpYyBkZWNpbWFscyA9IDE4OwogICAgdWludCBjb25zdGFudCBtdWx0aXBsaWVyID0gMTAgKiogdWludChkZWNpbWFscyk7CgogICAgZXZlbnQgRGVwbG95ZWQodWludCBpbmRleGVkIF90b3RhbF9zdXBwbHkpOwogICAgZXZlbnQgQnVybnQoCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9yZWNlaXZlciwKICAgICAgICB1aW50IGluZGV4ZWQgX251bSwKICAgICAgICB1aW50IGluZGV4ZWQgX3RvdGFsX3N1cHBseQogICAgKTsKCiAgICAvKgogICAgICogIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwogICAgLy8vIEBkZXYgQ29udHJhY3QgY29uc3RydWN0b3IgZnVuY3Rpb24gc2V0cyBkdXRjaCBhdWN0aW9uIGNvbnRyYWN0IGFkZHJlc3MKICAgIC8vLyBhbmQgYXNzaWducyBhbGwgdG9rZW5zIHRvIGR1dGNoIGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIGF1Y3Rpb25fYWRkcmVzcyBBZGRyZXNzIG9mIGR1dGNoIGF1Y3Rpb24gY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIHdhbGxldF9hZGRyZXNzIEFkZHJlc3Mgb2Ygd2FsbGV0LgogICAgLy8vIEBwYXJhbSBpbml0aWFsX3N1cHBseSBOdW1iZXIgb2YgaW5pdGlhbGx5IHByb3ZpZGVkIHRva2VuIHVuaXRzIChSZWkpLgogICAgZnVuY3Rpb24gUmFpZGVuVG9rZW4oCiAgICAgICAgYWRkcmVzcyBhdWN0aW9uX2FkZHJlc3MsCiAgICAgICAgYWRkcmVzcyB3YWxsZXRfYWRkcmVzcywKICAgICAgICB1aW50IGluaXRpYWxfc3VwcGx5KQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIC8vIEF1Y3Rpb24gYWRkcmVzcyBzaG91bGQgbm90IGJlIG51bGwuCiAgICAgICAgcmVxdWlyZShhdWN0aW9uX2FkZHJlc3MgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKHdhbGxldF9hZGRyZXNzICE9IDB4MCk7CgogICAgICAgIC8vIEluaXRpYWwgc3VwcGx5IGlzIGluIFJlaQogICAgICAgIHJlcXVpcmUoaW5pdGlhbF9zdXBwbHkgPiBtdWx0aXBsaWVyKTsKCiAgICAgICAgLy8gVG90YWwgc3VwcGx5IG9mIFJlaSBhdCBkZXBsb3ltZW50CiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsX3N1cHBseTsKCiAgICAgICAgYmFsYW5jZXNbYXVjdGlvbl9hZGRyZXNzXSA9IGluaXRpYWxfc3VwcGx5IC8gMjsKICAgICAgICBiYWxhbmNlc1t3YWxsZXRfYWRkcmVzc10gPSBpbml0aWFsX3N1cHBseSAvIDI7CgogICAgICAgIFRyYW5zZmVyKDB4MCwgYXVjdGlvbl9hZGRyZXNzLCBiYWxhbmNlc1thdWN0aW9uX2FkZHJlc3NdKTsKICAgICAgICBUcmFuc2ZlcigweDAsIHdhbGxldF9hZGRyZXNzLCBiYWxhbmNlc1t3YWxsZXRfYWRkcmVzc10pOwoKICAgICAgICBEZXBsb3llZCh0b3RhbFN1cHBseSk7CgogICAgICAgIGFzc2VydCh0b3RhbFN1cHBseSA9PSBiYWxhbmNlc1thdWN0aW9uX2FkZHJlc3NdICsgYmFsYW5jZXNbd2FsbGV0X2FkZHJlc3NdKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBbGxvd3MgYG1zZy5zZW5kZXJgIHRvIHNpbXBseSBkZXN0cm95IGBudW1gIHRva2VuIHVuaXRzIChSZWkpLiBUaGlzIG1lYW5zIHRoZSB0b3RhbAogICAgLy8vIHRva2VuIHN1cHBseSB3aWxsIGRlY3JlYXNlLgogICAgLy8vIEBkZXYgQWxsb3dzIHRvIGRlc3Ryb3kgdG9rZW4gdW5pdHMgKFJlaSkuCiAgICAvLy8gQHBhcmFtIG51bSBOdW1iZXIgb2YgdG9rZW4gdW5pdHMgKFJlaSkgdG8gYnVybi4KICAgIGZ1bmN0aW9uIGJ1cm4odWludCBudW0pIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShudW0gPiAwKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IG51bSk7CiAgICAgICAgcmVxdWlyZSh0b3RhbFN1cHBseSA+PSBudW0pOwoKICAgICAgICB1aW50IHByZV9iYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IG51bTsKICAgICAgICB0b3RhbFN1cHBseSAtPSBudW07CiAgICAgICAgQnVybnQobXNnLnNlbmRlciwgbnVtLCB0b3RhbFN1cHBseSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMHgwLCBudW0pOwoKICAgICAgICBhc3NlcnQoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPT0gcHJlX2JhbGFuY2UgLSBudW0pOwogICAgfQoKfQoKCi8vLyBAdGl0bGUgRHV0Y2ggYXVjdGlvbiBjb250cmFjdCAtIGRpc3RyaWJ1dGlvbiBvZiBhIGZpeGVkIG51bWJlciBvZiB0b2tlbnMgdXNpbmcgYW4gYXVjdGlvbi4KLy8vIFRoZSBjb250cmFjdCBjb2RlIGlzIGluc3BpcmVkIGJ5IHRoZSBHbm9zaXMgYXVjdGlvbiBjb250cmFjdC4gTWFpbiBkaWZmZXJlbmNlIGlzIHRoYXQgdGhlCi8vLyBhdWN0aW9uIGVuZHMgaWYgYSBmaXhlZCBudW1iZXIgb2YgdG9rZW5zIHdhcyBzb2xkLgpjb250cmFjdCBEdXRjaEF1Y3Rpb24gewogICAgLyoKICAgICAqIEF1Y3Rpb24gZm9yIHRoZSBSRE4gVG9rZW4uCiAgICAgKgogICAgICogVGVybWlub2xvZ3k6CiAgICAgKiAxIHRva2VuIHVuaXQgPSBSZWkKICAgICAqIDEgdG9rZW4gPSBSRE4gPSBSZWkgKiB0b2tlbl9tdWx0aXBsaWVyCiAgICAgKiB0b2tlbl9tdWx0aXBsaWVyIHNldCBmcm9tIHRva2VuJ3MgbnVtYmVyIG9mIGRlY2ltYWxzIChpLmUuIDEwICoqIGRlY2ltYWxzKQogICAgICovCgogICAgLy8gV2FpdCA3IGRheXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYXVjdGlvbiwgYmVmb3JlIGF5b25lIGNhbiBjbGFpbSB0b2tlbnMKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIHRva2VuX2NsYWltX3dhaXRpbmdfcGVyaW9kID0gNSBtaW51dGVzOwoKICAgIC8vIEJpZCB2YWx1ZSBvdmVyIHdoaWNoIHRoZSBhZGRyZXNzIGhhcyB0byBiZSB3aGl0ZWxpc3RlZAogICAgLy8gQXQgZGVwbG95bWVudCBtb21lbnQsIGVxdWl2YWxlbnQgd2l0aCAkMTUsMDAwCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBiaWRfdGhyZXNob2xkID0gOSBldGhlcjsKCiAgICAvKgogICAgICogU3RvcmFnZQogICAgICovCgogICAgUmFpZGVuVG9rZW4gcHVibGljIHRva2VuOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXJfYWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIHdhbGxldF9hZGRyZXNzOwoKICAgIC8vIFByaWNlIGRlY2F5IGZ1bmN0aW9uIHBhcmFtZXRlcnMgdG8gYmUgY2hhbmdlZCBkZXBlbmRpbmcgb24gdGhlIGRlc2lyZWQgb3V0Y29tZQoKICAgIC8vIFN0YXJ0aW5nIHByaWNlIGluIFdFSTsgZS5nLiAyICogMTAgKiogMTgKICAgIHVpbnQgcHVibGljIHByaWNlX3N0YXJ0OwoKICAgIC8vIERpdmlzb3IgY29uc3RhbnQ7IGUuZy4gNTI0ODgwMDAwCiAgICB1aW50IHB1YmxpYyBwcmljZV9jb25zdGFudDsKCiAgICAvLyBEaXZpc29yIGV4cG9uZW50OyBlLmcuIDMKICAgIHVpbnQzMiBwdWJsaWMgcHJpY2VfZXhwb25lbnQ7CgogICAgLy8gRm9yIGNhbGN1bGF0aW5nIGVsYXBzZWQgdGltZSBmb3IgcHJpY2UKICAgIHVpbnQgcHVibGljIHN0YXJ0X3RpbWU7CiAgICB1aW50IHB1YmxpYyBlbmRfdGltZTsKICAgIHVpbnQgcHVibGljIHN0YXJ0X2Jsb2NrOwoKICAgIC8vIEtlZXAgdHJhY2sgb2YgYWxsIEVUSCByZWNlaXZlZCBpbiB0aGUgYmlkcwogICAgdWludCBwdWJsaWMgcmVjZWl2ZWRfd2VpOwoKICAgIC8vIEtlZXAgdHJhY2sgb2YgY3VtdWxhdGl2ZSBFVEggZnVuZHMgZm9yIHdoaWNoIHRoZSB0b2tlbnMgaGF2ZSBiZWVuIGNsYWltZWQKICAgIHVpbnQgcHVibGljIGZ1bmRzX2NsYWltZWQ7CgogICAgdWludCBwdWJsaWMgdG9rZW5fbXVsdGlwbGllcjsKCiAgICAvLyBUb3RhbCBudW1iZXIgb2YgUmVpIChSRE4gKiB0b2tlbl9tdWx0aXBsaWVyKSB0aGF0IHdpbGwgYmUgYXVjdGlvbmVkCiAgICB1aW50IHB1YmxpYyBudW1fdG9rZW5zX2F1Y3Rpb25lZDsKCiAgICAvLyBXZWkgcGVyIFJETiAoUmVpICogdG9rZW5fbXVsdGlwbGllcikKICAgIHVpbnQgcHVibGljIGZpbmFsX3ByaWNlOwoKICAgIC8vIEJpZGRlciBhZGRyZXNzID0+IGJpZCB2YWx1ZQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmlkczsKCiAgICAvLyBXaGl0ZWxpc3QgZm9yIGFkZHJlc3NlcyB0aGF0IHdhbnQgdG8gYmlkIG1vcmUgdGhhbiBiaWRfdGhyZXNob2xkCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyB3aGl0ZWxpc3Q7CgogICAgU3RhZ2VzIHB1YmxpYyBzdGFnZTsKCiAgICAvKgogICAgICogRW51bXMKICAgICAqLwogICAgZW51bSBTdGFnZXMgewogICAgICAgIEF1Y3Rpb25EZXBsb3llZCwKICAgICAgICBBdWN0aW9uU2V0VXAsCiAgICAgICAgQXVjdGlvblN0YXJ0ZWQsCiAgICAgICAgQXVjdGlvbkVuZGVkLAogICAgICAgIFRva2Vuc0Rpc3RyaWJ1dGVkCiAgICB9CgogICAgLyoKICAgICAqIE1vZGlmaWVycwogICAgICovCiAgICBtb2RpZmllciBhdFN0YWdlKFN0YWdlcyBfc3RhZ2UpIHsKICAgICAgICByZXF1aXJlKHN0YWdlID09IF9zdGFnZSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc093bmVyKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcl9hZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qCiAgICAgKiBFdmVudHMKICAgICAqLwoKICAgIGV2ZW50IERlcGxveWVkKAogICAgICAgIHVpbnQgaW5kZXhlZCBfcHJpY2Vfc3RhcnQsCiAgICAgICAgdWludCBpbmRleGVkIF9wcmljZV9jb25zdGFudCwKICAgICAgICB1aW50MzIgaW5kZXhlZCBfcHJpY2VfZXhwb25lbnQKICAgICk7CiAgICBldmVudCBTZXR1cCgpOwogICAgZXZlbnQgQXVjdGlvblN0YXJ0ZWQodWludCBpbmRleGVkIF9zdGFydF90aW1lLCB1aW50IGluZGV4ZWQgX2Jsb2NrX251bWJlcik7CiAgICBldmVudCBCaWRTdWJtaXNzaW9uKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfc2VuZGVyLAogICAgICAgIHVpbnQgX2Ftb3VudCwKICAgICAgICB1aW50IF9taXNzaW5nX2Z1bmRzCiAgICApOwogICAgZXZlbnQgQ2xhaW1lZFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3JlY2lwaWVudCwgdWludCBfc2VudF9hbW91bnQpOwogICAgZXZlbnQgQXVjdGlvbkVuZGVkKHVpbnQgX2ZpbmFsX3ByaWNlKTsKICAgIGV2ZW50IFRva2Vuc0Rpc3RyaWJ1dGVkKCk7CgogICAgLyoKICAgICAqIFB1YmxpYyBmdW5jdGlvbnMKICAgICAqLwoKICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHNldHMgdGhlIHN0YXJ0aW5nIHByaWNlLCBkaXZpc29yIGNvbnN0YW50IGFuZAogICAgLy8vIGRpdmlzb3IgZXhwb25lbnQgZm9yIGNhbGN1bGF0aW5nIHRoZSBEdXRjaCBBdWN0aW9uIHByaWNlLgogICAgLy8vIEBwYXJhbSBfd2FsbGV0X2FkZHJlc3MgV2FsbGV0IGFkZHJlc3MgdG8gd2hpY2ggYWxsIGNvbnRyaWJ1dGVkIEVUSCB3aWxsIGJlIGZvcndhcmRlZC4KICAgIC8vLyBAcGFyYW0gX3ByaWNlX3N0YXJ0IEhpZ2ggcHJpY2UgaW4gV0VJIGF0IHdoaWNoIHRoZSBhdWN0aW9uIHN0YXJ0cy4KICAgIC8vLyBAcGFyYW0gX3ByaWNlX2NvbnN0YW50IEF1Y3Rpb24gcHJpY2UgZGl2aXNvciBjb25zdGFudC4KICAgIC8vLyBAcGFyYW0gX3ByaWNlX2V4cG9uZW50IEF1Y3Rpb24gcHJpY2UgZGl2aXNvciBleHBvbmVudC4KICAgIGZ1bmN0aW9uIER1dGNoQXVjdGlvbigKICAgICAgICBhZGRyZXNzIF93YWxsZXRfYWRkcmVzcywKICAgICAgICB1aW50IF9wcmljZV9zdGFydCwKICAgICAgICB1aW50IF9wcmljZV9jb25zdGFudCwKICAgICAgICB1aW50MzIgX3ByaWNlX2V4cG9uZW50KQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIHJlcXVpcmUoX3dhbGxldF9hZGRyZXNzICE9IDB4MCk7CiAgICAgICAgd2FsbGV0X2FkZHJlc3MgPSBfd2FsbGV0X2FkZHJlc3M7CgogICAgICAgIG93bmVyX2FkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHN0YWdlID0gU3RhZ2VzLkF1Y3Rpb25EZXBsb3llZDsKICAgICAgICBjaGFuZ2VTZXR0aW5ncyhfcHJpY2Vfc3RhcnQsIF9wcmljZV9jb25zdGFudCwgX3ByaWNlX2V4cG9uZW50KTsKICAgICAgICBEZXBsb3llZChfcHJpY2Vfc3RhcnQsIF9wcmljZV9jb25zdGFudCwgX3ByaWNlX2V4cG9uZW50KTsKICAgIH0KCiAgICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIGNvbnRyYWN0LCB3aGljaCBjYWxscyBiaWQoKSBpZiB0aGUgYXVjdGlvbiBoYXMgc3RhcnRlZC4KICAgIGZ1bmN0aW9uICgpIHB1YmxpYyBwYXlhYmxlIGF0U3RhZ2UoU3RhZ2VzLkF1Y3Rpb25TdGFydGVkKSB7CiAgICAgICAgYmlkKCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU2V0IGBfdG9rZW5fYWRkcmVzc2AgYXMgdGhlIHRva2VuIGFkZHJlc3MgdG8gYmUgdXNlZCBpbiB0aGUgYXVjdGlvbi4KICAgIC8vLyBAZGV2IFNldHVwIGZ1bmN0aW9uIHNldHMgZXh0ZXJuYWwgY29udHJhY3RzIGFkZHJlc3Nlcy4KICAgIC8vLyBAcGFyYW0gX3Rva2VuX2FkZHJlc3MgVG9rZW4gYWRkcmVzcy4KICAgIGZ1bmN0aW9uIHNldHVwKGFkZHJlc3MgX3Rva2VuX2FkZHJlc3MpIHB1YmxpYyBpc093bmVyIGF0U3RhZ2UoU3RhZ2VzLkF1Y3Rpb25EZXBsb3llZCkgewogICAgICAgIHJlcXVpcmUoX3Rva2VuX2FkZHJlc3MgIT0gMHgwKTsKICAgICAgICB0b2tlbiA9IFJhaWRlblRva2VuKF90b2tlbl9hZGRyZXNzKTsKCiAgICAgICAgLy8gR2V0IG51bWJlciBvZiBSZWkgKFJETiAqIHRva2VuX211bHRpcGxpZXIpIHRvIGJlIGF1Y3Rpb25lZCBmcm9tIHRva2VuIGF1Y3Rpb24gYmFsYW5jZQogICAgICAgIG51bV90b2tlbnNfYXVjdGlvbmVkID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwoKICAgICAgICAvLyBTZXQgdGhlIG51bWJlciBvZiB0aGUgdG9rZW4gbXVsdGlwbGllciBmb3IgaXRzIGRlY2ltYWxzCiAgICAgICAgdG9rZW5fbXVsdGlwbGllciA9IDEwICoqIHVpbnQodG9rZW4uZGVjaW1hbHMoKSk7CgogICAgICAgIHN0YWdlID0gU3RhZ2VzLkF1Y3Rpb25TZXRVcDsKICAgICAgICBTZXR1cCgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNldCBgX3ByaWNlX3N0YXJ0YCwgYF9wcmljZV9jb25zdGFudGAgYW5kIGBfcHJpY2VfZXhwb25lbnRgIGFzCiAgICAvLy8gdGhlIG5ldyBzdGFydGluZyBwcmljZSwgcHJpY2UgZGl2aXNvciBjb25zdGFudCBhbmQgcHJpY2UgZGl2aXNvciBleHBvbmVudC4KICAgIC8vLyBAZGV2IENoYW5nZXMgYXVjdGlvbiBwcmljZSBmdW5jdGlvbiBwYXJhbWV0ZXJzIGJlZm9yZSBhdWN0aW9uIGlzIHN0YXJ0ZWQuCiAgICAvLy8gQHBhcmFtIF9wcmljZV9zdGFydCBVcGRhdGVkIHN0YXJ0IHByaWNlLgogICAgLy8vIEBwYXJhbSBfcHJpY2VfY29uc3RhbnQgVXBkYXRlZCBwcmljZSBkaXZpc29yIGNvbnN0YW50LgogICAgLy8vIEBwYXJhbSBfcHJpY2VfZXhwb25lbnQgVXBkYXRlZCBwcmljZSBkaXZpc29yIGV4cG9uZW50LgogICAgZnVuY3Rpb24gY2hhbmdlU2V0dGluZ3MoCiAgICAgICAgdWludCBfcHJpY2Vfc3RhcnQsCiAgICAgICAgdWludCBfcHJpY2VfY29uc3RhbnQsCiAgICAgICAgdWludDMyIF9wcmljZV9leHBvbmVudCkKICAgICAgICBpbnRlcm5hbAogICAgewogICAgICAgIHJlcXVpcmUoc3RhZ2UgPT0gU3RhZ2VzLkF1Y3Rpb25EZXBsb3llZCB8fCBzdGFnZSA9PSBTdGFnZXMuQXVjdGlvblNldFVwKTsKICAgICAgICByZXF1aXJlKF9wcmljZV9zdGFydCA+IDApOwogICAgICAgIHJlcXVpcmUoX3ByaWNlX2NvbnN0YW50ID4gMCk7CgogICAgICAgIHByaWNlX3N0YXJ0ID0gX3ByaWNlX3N0YXJ0OwogICAgICAgIHByaWNlX2NvbnN0YW50ID0gX3ByaWNlX2NvbnN0YW50OwogICAgICAgIHByaWNlX2V4cG9uZW50ID0gX3ByaWNlX2V4cG9uZW50OwogICAgfQoKICAgIC8vLyBAbm90aWNlIEFkZHMgYWNjb3VudCBhZGRyZXNzZXMgdG8gd2hpdGVsaXN0LgogICAgLy8vIEBkZXYgQWRkcyBhY2NvdW50IGFkZHJlc3NlcyB0byB3aGl0ZWxpc3QuCiAgICAvLy8gQHBhcmFtIF9iaWRkZXJfYWRkcmVzc2VzIEFycmF5IG9mIGFkZHJlc3Nlcy4KICAgIGZ1bmN0aW9uIGFkZFRvV2hpdGVsaXN0KGFkZHJlc3NbXSBfYmlkZGVyX2FkZHJlc3NlcykgcHVibGljIGlzT3duZXIgewogICAgICAgIGZvciAodWludDMyIGkgPSAwOyBpIDwgX2JpZGRlcl9hZGRyZXNzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgd2hpdGVsaXN0W19iaWRkZXJfYWRkcmVzc2VzW2ldXSA9IHRydWU7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAbm90aWNlIFJlbW92ZXMgYWNjb3VudCBhZGRyZXNzZXMgZnJvbSB3aGl0ZWxpc3QuCiAgICAvLy8gQGRldiBSZW1vdmVzIGFjY291bnQgYWRkcmVzc2VzIGZyb20gd2hpdGVsaXN0LgogICAgLy8vIEBwYXJhbSBfYmlkZGVyX2FkZHJlc3NlcyBBcnJheSBvZiBhZGRyZXNzZXMuCiAgICBmdW5jdGlvbiByZW1vdmVGcm9tV2hpdGVsaXN0KGFkZHJlc3NbXSBfYmlkZGVyX2FkZHJlc3NlcykgcHVibGljIGlzT3duZXIgewogICAgICAgIGZvciAodWludDMyIGkgPSAwOyBpIDwgX2JpZGRlcl9hZGRyZXNzZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgd2hpdGVsaXN0W19iaWRkZXJfYWRkcmVzc2VzW2ldXSA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQG5vdGljZSBTdGFydCB0aGUgYXVjdGlvbi4KICAgIC8vLyBAZGV2IFN0YXJ0cyBhdWN0aW9uIGFuZCBzZXRzIHN0YXJ0X3RpbWUuCiAgICBmdW5jdGlvbiBzdGFydEF1Y3Rpb24oKSBwdWJsaWMgaXNPd25lciBhdFN0YWdlKFN0YWdlcy5BdWN0aW9uU2V0VXApIHsKICAgICAgICBzdGFnZSA9IFN0YWdlcy5BdWN0aW9uU3RhcnRlZDsKICAgICAgICBzdGFydF90aW1lID0gbm93OwogICAgICAgIHN0YXJ0X2Jsb2NrID0gYmxvY2subnVtYmVyOwogICAgICAgIEF1Y3Rpb25TdGFydGVkKHN0YXJ0X3RpbWUsIHN0YXJ0X2Jsb2NrKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBGaW5hbGl6ZSB0aGUgYXVjdGlvbiAtIHNldHMgdGhlIGZpbmFsIFJETiB0b2tlbiBwcmljZSBhbmQgY2hhbmdlcyB0aGUgYXVjdGlvbgogICAgLy8vIHN0YWdlIGFmdGVyIG5vIGJpZHMgYXJlIGFsbG93ZWQgYW55bW9yZS4KICAgIC8vLyBAZGV2IEZpbmFsaXplIGF1Y3Rpb24gYW5kIHNldCB0aGUgZmluYWwgUkROIHRva2VuIHByaWNlLgogICAgZnVuY3Rpb24gZmluYWxpemVBdWN0aW9uKCkgcHVibGljIGF0U3RhZ2UoU3RhZ2VzLkF1Y3Rpb25TdGFydGVkKQogICAgewogICAgICAgIC8vIE1pc3NpbmcgZnVuZHMgc2hvdWxkIGJlIDAgYXQgdGhpcyBwb2ludAogICAgICAgIHVpbnQgbWlzc2luZ19mdW5kcyA9IG1pc3NpbmdGdW5kc1RvRW5kQXVjdGlvbigpOwogICAgICAgIHJlcXVpcmUobWlzc2luZ19mdW5kcyA9PSAwKTsKCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBmaW5hbCBwcmljZSA9IFdFSSAvIFJETiA9IFdFSSAvIChSZWkgLyB0b2tlbl9tdWx0aXBsaWVyKQogICAgICAgIC8vIFJlbWluZGVyOiBudW1fdG9rZW5zX2F1Y3Rpb25lZCBpcyB0aGUgbnVtYmVyIG9mIFJlaSAoUkROICogdG9rZW5fbXVsdGlwbGllcikgdGhhdCBhcmUgYXVjdGlvbmVkCiAgICAgICAgZmluYWxfcHJpY2UgPSB0b2tlbl9tdWx0aXBsaWVyICogcmVjZWl2ZWRfd2VpIC8gbnVtX3Rva2Vuc19hdWN0aW9uZWQ7CgogICAgICAgIGVuZF90aW1lID0gbm93OwogICAgICAgIHN0YWdlID0gU3RhZ2VzLkF1Y3Rpb25FbmRlZDsKICAgICAgICBBdWN0aW9uRW5kZWQoZmluYWxfcHJpY2UpOwoKICAgICAgICBhc3NlcnQoZmluYWxfcHJpY2UgPiAwKTsKICAgIH0KCiAgICAvLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEF1Y3Rpb24gRnVuY3Rpb25zIC0tLS0tLS0tLS0tLS0tLS0tLQoKCiAgICAvLy8gQG5vdGljZSBTZW5kIGBtc2cudmFsdWVgIFdFSSB0byB0aGUgYXVjdGlvbiBmcm9tIHRoZSBgbXNnLnNlbmRlcmAgYWNjb3VudC4KICAgIC8vLyBAZGV2IEFsbG93cyB0byBzZW5kIGEgYmlkIHRvIHRoZSBhdWN0aW9uLgogICAgZnVuY3Rpb24gYmlkKCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgYXRTdGFnZShTdGFnZXMuQXVjdGlvblN0YXJ0ZWQpCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsKICAgICAgICByZXF1aXJlKGJpZHNbbXNnLnNlbmRlcl0gKyBtc2cudmFsdWUgPD0gYmlkX3RocmVzaG9sZCB8fCB3aGl0ZWxpc3RbbXNnLnNlbmRlcl0pOwogICAgICAgIGFzc2VydChiaWRzW21zZy5zZW5kZXJdICsgbXNnLnZhbHVlID49IG1zZy52YWx1ZSk7CgogICAgICAgIC8vIE1pc3NpbmcgZnVuZHMgd2l0aG91dCB0aGUgY3VycmVudCBiaWQgdmFsdWUKICAgICAgICB1aW50IG1pc3NpbmdfZnVuZHMgPSBtaXNzaW5nRnVuZHNUb0VuZEF1Y3Rpb24oKTsKCiAgICAgICAgLy8gV2UgcmVxdWlyZSBiaWQgdmFsdWVzIHRvIGJlIGxlc3MgdGhhbiB0aGUgZnVuZHMgbWlzc2luZyB0byBlbmQgdGhlIGF1Y3Rpb24KICAgICAgICAvLyBhdCB0aGUgY3VycmVudCBwcmljZS4KICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA8PSBtaXNzaW5nX2Z1bmRzKTsKCiAgICAgICAgYmlkc1ttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7CiAgICAgICAgcmVjZWl2ZWRfd2VpICs9IG1zZy52YWx1ZTsKCiAgICAgICAgLy8gU2VuZCBiaWQgYW1vdW50IHRvIHdhbGxldAogICAgICAgIHdhbGxldF9hZGRyZXNzLnRyYW5zZmVyKG1zZy52YWx1ZSk7CgogICAgICAgIEJpZFN1Ym1pc3Npb24obXNnLnNlbmRlciwgbXNnLnZhbHVlLCBtaXNzaW5nX2Z1bmRzKTsKCiAgICAgICAgYXNzZXJ0KHJlY2VpdmVkX3dlaSA+PSBtc2cudmFsdWUpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENsYWltIGF1Y3Rpb24gdG9rZW5zIGZvciBgbXNnLnNlbmRlcmAgYWZ0ZXIgdGhlIGF1Y3Rpb24gaGFzIGVuZGVkLgogICAgLy8vIEBkZXYgQ2xhaW1zIHRva2VucyBmb3IgYG1zZy5zZW5kZXJgIGFmdGVyIGF1Y3Rpb24uIFRvIGJlIHVzZWQgaWYgdG9rZW5zIGNhbgogICAgLy8vIGJlIGNsYWltZWQgYnkgYmVuZWZpY2lhcmllcywgaW5kaXZpZHVhbGx5LgogICAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoKSBwdWJsaWMgYXRTdGFnZShTdGFnZXMuQXVjdGlvbkVuZGVkKSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHByb3h5Q2xhaW1Ub2tlbnMobXNnLnNlbmRlcik7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQ2xhaW0gYXVjdGlvbiB0b2tlbnMgZm9yIGByZWNlaXZlcl9hZGRyZXNzYCBhZnRlciB0aGUgYXVjdGlvbiBoYXMgZW5kZWQuCiAgICAvLy8gQGRldiBDbGFpbXMgdG9rZW5zIGZvciBgcmVjZWl2ZXJfYWRkcmVzc2AgYWZ0ZXIgYXVjdGlvbiBoYXMgZW5kZWQuCiAgICAvLy8gQHBhcmFtIHJlY2VpdmVyX2FkZHJlc3MgVG9rZW5zIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhpcyBhZGRyZXNzIGlmIGVsaWdpYmxlLgogICAgZnVuY3Rpb24gcHJveHlDbGFpbVRva2VucyhhZGRyZXNzIHJlY2VpdmVyX2FkZHJlc3MpCiAgICAgICAgcHVibGljCiAgICAgICAgYXRTdGFnZShTdGFnZXMuQXVjdGlvbkVuZGVkKQogICAgICAgIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgLy8gV2FpdGluZyBwZXJpb2QgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYXVjdGlvbiwgYmVmb3JlIGFueW9uZSBjYW4gY2xhaW0gdG9rZW5zCiAgICAgICAgLy8gRW5zdXJlcyBlbm91Z2ggdGltZSB0byBjaGVjayBpZiBhdWN0aW9uIHdhcyBmaW5hbGl6ZWQgY29ycmVjdGx5CiAgICAgICAgLy8gYmVmb3JlIHVzZXJzIHN0YXJ0IHRyYW5zYWN0aW5nIHRva2VucwogICAgICAgIHJlcXVpcmUobm93ID4gZW5kX3RpbWUgKyB0b2tlbl9jbGFpbV93YWl0aW5nX3BlcmlvZCk7CiAgICAgICAgcmVxdWlyZShyZWNlaXZlcl9hZGRyZXNzICE9IDB4MCk7CgogICAgICAgIGlmIChiaWRzW3JlY2VpdmVyX2FkZHJlc3NdID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gTnVtYmVyIG9mIFJlaSA9IGJpZF93ZWkgLyBSZWkgPSBiaWRfd2VpIC8gKHdlaV9wZXJfUkROICogdG9rZW5fbXVsdGlwbGllcikKICAgICAgICB1aW50IG51bSA9ICh0b2tlbl9tdWx0aXBsaWVyICogYmlkc1tyZWNlaXZlcl9hZGRyZXNzXSkgLyBmaW5hbF9wcmljZTsKCiAgICAgICAgLy8gRHVlIHRvIGZpbmFsX3ByaWNlIGZsb29yIHJvdW5kaW5nLCB0aGUgbnVtYmVyIG9mIGFzc2lnbmVkIHRva2VucyBtYXkgYmUgaGlnaGVyCiAgICAgICAgLy8gdGhhbiBleHBlY3RlZC4gVGhlcmVmb3JlLCB0aGUgbnVtYmVyIG9mIHJlbWFpbmluZyB1bmFzc2lnbmVkIGF1Y3Rpb24gdG9rZW5zCiAgICAgICAgLy8gbWF5IGJlIHNtYWxsZXIgdGhhbiB0aGUgbnVtYmVyIG9mIHRva2VucyBuZWVkZWQgZm9yIHRoZSBsYXN0IGNsYWltVG9rZW5zIGNhbGwKICAgICAgICB1aW50IGF1Y3Rpb25fdG9rZW5zX2JhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgaWYgKG51bSA+IGF1Y3Rpb25fdG9rZW5zX2JhbGFuY2UpIHsKICAgICAgICAgICAgbnVtID0gYXVjdGlvbl90b2tlbnNfYmFsYW5jZTsKICAgICAgICB9CgogICAgICAgIC8vIFVwZGF0ZSB0aGUgdG90YWwgYW1vdW50IG9mIGZ1bmRzIGZvciB3aGljaCB0b2tlbnMgaGF2ZSBiZWVuIGNsYWltZWQKICAgICAgICBmdW5kc19jbGFpbWVkICs9IGJpZHNbcmVjZWl2ZXJfYWRkcmVzc107CgogICAgICAgIC8vIFNldCByZWNlaXZlciBiaWQgdG8gMCBiZWZvcmUgYXNzaWduaW5nIHRva2VucwogICAgICAgIGJpZHNbcmVjZWl2ZXJfYWRkcmVzc10gPSAwOwoKICAgICAgICByZXF1aXJlKHRva2VuLnRyYW5zZmVyKHJlY2VpdmVyX2FkZHJlc3MsIG51bSkpOwoKICAgICAgICBDbGFpbWVkVG9rZW5zKHJlY2VpdmVyX2FkZHJlc3MsIG51bSk7CgogICAgICAgIC8vIEFmdGVyIHRoZSBsYXN0IHRva2VucyBhcmUgY2xhaW1lZCwgd2UgY2hhbmdlIHRoZSBhdWN0aW9uIHN0YWdlCiAgICAgICAgLy8gRHVlIHRvIHRoZSBhYm92ZSBsb2dpYywgcm91bmRpbmcgZXJyb3JzIHdpbGwgbm90IGJlIGFuIGlzc3VlCiAgICAgICAgaWYgKGZ1bmRzX2NsYWltZWQgPT0gcmVjZWl2ZWRfd2VpKSB7CiAgICAgICAgICAgIHN0YWdlID0gU3RhZ2VzLlRva2Vuc0Rpc3RyaWJ1dGVkOwogICAgICAgICAgICBUb2tlbnNEaXN0cmlidXRlZCgpOwogICAgICAgIH0KCiAgICAgICAgYXNzZXJ0KHRva2VuLmJhbGFuY2VPZihyZWNlaXZlcl9hZGRyZXNzKSA+PSBudW0pOwogICAgICAgIGFzc2VydChiaWRzW3JlY2VpdmVyX2FkZHJlc3NdID09IDApOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEdldCB0aGUgUkROIHByaWNlIGluIFdFSSBkdXJpbmcgdGhlIGF1Y3Rpb24sIGF0IHRoZSB0aW1lIG9mCiAgICAvLy8gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLiBSZXR1cm5zIGAwYCBpZiBhdWN0aW9uIGhhcyBlbmRlZC4KICAgIC8vLyBSZXR1cm5zIGBwcmljZV9zdGFydGAgYmVmb3JlIGF1Y3Rpb24gaGFzIHN0YXJ0ZWQuCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIHRoZSBjdXJyZW50IFJETiB0b2tlbiBwcmljZSBpbiBXRUkuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIFdFSSBwZXIgUkROICh0b2tlbl9tdWx0aXBsaWVyICogUmVpKS4KICAgIGZ1bmN0aW9uIHByaWNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoc3RhZ2UgPT0gU3RhZ2VzLkF1Y3Rpb25FbmRlZCB8fAogICAgICAgICAgICBzdGFnZSA9PSBTdGFnZXMuVG9rZW5zRGlzdHJpYnV0ZWQpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWxjVG9rZW5QcmljZSgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEdldCB0aGUgbWlzc2luZyBmdW5kcyBuZWVkZWQgdG8gZW5kIHRoZSBhdWN0aW9uLAogICAgLy8vIGNhbGN1bGF0ZWQgYXQgdGhlIGN1cnJlbnQgUkROIHByaWNlIGluIFdFSS4KICAgIC8vLyBAZGV2IFRoZSBtaXNzaW5nIGZ1bmRzIGFtb3VudCBuZWNlc3NhcnkgdG8gZW5kIHRoZSBhdWN0aW9uIGF0IHRoZSBjdXJyZW50IFJETiBwcmljZSBpbiBXRUkuCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHRoZSBtaXNzaW5nIGZ1bmRzIGFtb3VudCBpbiBXRUkuCiAgICBmdW5jdGlvbiBtaXNzaW5nRnVuZHNUb0VuZEF1Y3Rpb24oKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludCkgewoKICAgICAgICAvLyBudW1fdG9rZW5zX2F1Y3Rpb25lZCA9IHRvdGFsIG51bWJlciBvZiBSZWkgKFJETiAqIHRva2VuX211bHRpcGxpZXIpIHRoYXQgaXMgYXVjdGlvbmVkCiAgICAgICAgdWludCByZXF1aXJlZF93ZWlfYXRfcHJpY2UgPSBudW1fdG9rZW5zX2F1Y3Rpb25lZCAqIHByaWNlKCkgLyB0b2tlbl9tdWx0aXBsaWVyOwogICAgICAgIGlmIChyZXF1aXJlZF93ZWlfYXRfcHJpY2UgPD0gcmVjZWl2ZWRfd2VpKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KCiAgICAgICAgLy8gYXNzZXJ0KHJlcXVpcmVkX3dlaV9hdF9wcmljZSAtIHJlY2VpdmVkX3dlaSA+IDApOwogICAgICAgIHJldHVybiByZXF1aXJlZF93ZWlfYXRfcHJpY2UgLSByZWNlaXZlZF93ZWk7CiAgICB9CgogICAgLyoKICAgICAqICBQcml2YXRlIGZ1bmN0aW9ucwogICAgICovCgogICAgLy8vIEBkZXYgQ2FsY3VsYXRlcyB0aGUgdG9rZW4gcHJpY2UgKFdFSSAvIFJETikgYXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wCiAgICAvLy8gZHVyaW5nIHRoZSBhdWN0aW9uOyBlbGFwc2VkIHRpbWUgPSAwIGJlZm9yZSBhdWN0aW9uIHN0YXJ0cy4KICAgIC8vLyBCYXNlZCBvbiB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycywgdGhlIHByaWNlIGRvZXMgbm90IGNoYW5nZSBpbiB0aGUgZmlyc3QKICAgIC8vLyBgcHJpY2VfY29uc3RhbnReKDEvcHJpY2VfZXhwb25lbnQpYCBzZWNvbmRzIGR1ZSB0byByb3VuZGluZy4KICAgIC8vLyBSb3VuZGluZyBpbiBgZGVjYXlfcmF0ZWAgYWxzbyBwcm9kdWNlcyB2YWx1ZXMgdGhhdCBpbmNyZWFzZSBpbnN0ZWFkIG9mIGRlY3JlYXNlCiAgICAvLy8gaW4gdGhlIGJlZ2lubmluZzsgdGhlc2Ugc3Bpa2VzIGRlY3JlYXNlIG92ZXIgdGltZSBhbmQgYXJlIG5vdGljZWFibGUKICAgIC8vLyBvbmx5IGluIGZpcnN0IGhvdXJzLiBUaGlzIHNob3VsZCBiZSBjYWxjdWxhdGVkIGJlZm9yZSB1c2FnZS4KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgdGhlIHRva2VuIHByaWNlIC0gV2VpIHBlciBSRE4uCiAgICBmdW5jdGlvbiBjYWxjVG9rZW5QcmljZSgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgZWxhcHNlZDsKICAgICAgICBpZiAoc3RhZ2UgPT0gU3RhZ2VzLkF1Y3Rpb25TdGFydGVkKSB7CiAgICAgICAgICAgIGVsYXBzZWQgPSBub3cgLSBzdGFydF90aW1lOwogICAgICAgIH0KCiAgICAgICAgdWludCBkZWNheV9yYXRlID0gZWxhcHNlZCAqKiBwcmljZV9leHBvbmVudCAvIHByaWNlX2NvbnN0YW50OwogICAgICAgIHJldHVybiBwcmljZV9zdGFydCAqICgxICsgZWxhcHNlZCkgLyAoMSArIGVsYXBzZWQgKyBkZWNheV9yYXRlKTsKICAgIH0KfQ=='.
	

]
