Class {
	#name : #SRT63f134b1cb7f8f39ce3d8e508be443bd40323125,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT63f134b1cb7f8f39ce3d8e508be443bd40323125 >> base64 [
	^ ''.
	

]
