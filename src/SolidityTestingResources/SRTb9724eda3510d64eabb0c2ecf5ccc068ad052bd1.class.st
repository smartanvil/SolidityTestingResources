Class {
	#name : #SRTb9724eda3510d64eabb0c2ecf5ccc068ad052bd1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb9724eda3510d64eabb0c2ecf5ccc068ad052bd1 >> base64 [
	^ ''.
	

]
