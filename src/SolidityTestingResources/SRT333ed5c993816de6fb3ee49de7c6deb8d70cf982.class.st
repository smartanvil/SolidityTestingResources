Class {
	#name : #SRT333ed5c993816de6fb3ee49de7c6deb8d70cf982,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT333ed5c993816de6fb3ee49de7c6deb8d70cf982 >> base64 [
	^ ''.
	

]
