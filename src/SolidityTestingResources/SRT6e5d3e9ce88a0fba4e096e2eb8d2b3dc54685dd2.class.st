Class {
	#name : #SRT6e5d3e9ce88a0fba4e096e2eb8d2b3dc54685dd2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6e5d3e9ce88a0fba4e096e2eb8d2b3dc54685dd2 >> base64 [
	^ ''.
	

]
