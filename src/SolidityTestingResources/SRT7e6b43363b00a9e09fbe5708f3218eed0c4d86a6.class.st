Class {
	#name : #SRT7e6b43363b00a9e09fbe5708f3218eed0c4d86a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7e6b43363b00a9e09fbe5708f3218eed0c4d86a6 >> base64 [
	^ ''.
	

]
