Class {
	#name : #SRTd8f6ad0ff8dcf15c68daf60da9d346b46a282286,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd8f6ad0ff8dcf15c68daf60da9d346b46a282286 >> base64 [
	^ ''.
	

]
