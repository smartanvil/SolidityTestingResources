Class {
	#name : #SRTc4e11c711d126925920a0312350444a2c80c8281,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc4e11c711d126925920a0312350444a2c80c8281 >> base64 [
	^ ''.
	

]
