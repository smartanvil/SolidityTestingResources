Class {
	#name : #SRT510467f65a600926af2ed565419ad98cf1f706ed,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT510467f65a600926af2ed565419ad98cf1f706ed >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIG93bmVyOwoKICAgIG1vZGlmaWVyIG9ubHlvd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgewogICAgICAgICAgICBfOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBPd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9Cn0KCgpjb250cmFjdCBNb3J0YWwgaXMgT3duZWQgewogICAgCiAgICBmdW5jdGlvbiBraWxsKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKQogICAgICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQp9CgoKY29udHJhY3QgU2xvdHRoZXJldW0gaXMgTW9ydGFsIHsKCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IEdhbWVbXSkgcHJpdmF0ZSBnYW1lczsgICAgICAvLyBnYW1lcyBwZXIgYWRkcmVzcwoKICAgIHVpbnQgcHJpdmF0ZSBtaW5CZXRBbW91bnQgPSAxMDAwMDAwMDAwMDAwMDAwMDsgIC8vIG1pbmltdW0gYW1vdW50IHBlciBiZXQKICAgIHVpbnQgcHJpdmF0ZSBtYXhCZXRBbW91bnQgPSA1MDAwMDAwMDAwMDAwMDAwMDAwOyAgLy8gbWF4aW11bSBhbW91bnQgcGVyIGJldAogICAgdWludCBwcml2YXRlIHBvaW50ZXIgPSAxOyAgICAgICAgICAgICAgICAgICAgICAgLy8gYmxvY2sgcG9pbnRlcgogICAgdWludCBwcml2YXRlIG51bWJlck9mUGxheWVycyA9IDA7ICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHBsYXllcnMKCiAgICBzdHJ1Y3QgR2FtZSB7CiAgICAgICAgdWludCBpZDsKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICB1aW50OCBzdGFydDsKICAgICAgICB1aW50OCBlbmQ7CiAgICAgICAgYnl0ZXMzMiBoYXNoOwogICAgICAgIHVpbnQ4IG51bWJlcjsKICAgICAgICBib29sIHdpbjsKICAgICAgICB1aW50IHByaXplOwogICAgfQoKICAgIGV2ZW50IE1pbkJldEFtb3VudENoYW5nZWQodWludCBhbW91bnQpOwogICAgZXZlbnQgTWF4QmV0QW1vdW50Q2hhbmdlZCh1aW50IGFtb3VudCk7CgogICAgZXZlbnQgR2FtZVdpbigKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQgaW5kZXhlZCBnYW1lSWQsCiAgICAgICAgdWludDggc3RhcnQsCiAgICAgICAgdWludDggZW5kLAogICAgICAgIHVpbnQ4IG51bWJlciwKICAgICAgICB1aW50IGFtb3VudCwKICAgICAgICB1aW50IHByaXplCiAgICApOwoKICAgIGV2ZW50IEdhbWVMb29zZSgKICAgICAgICBhZGRyZXNzIGluZGV4ZWQgcGxheWVyLAogICAgICAgIHVpbnQgaW5kZXhlZCBnYW1lSWQsCiAgICAgICAgdWludDggc3RhcnQsCiAgICAgICAgdWludDggZW5kLAogICAgICAgIHVpbnQ4IG51bWJlciwKICAgICAgICB1aW50IGFtb3VudCwKICAgICAgICB1aW50IHByaXplCiAgICApOwoKICAgIGZ1bmN0aW9uIG5vdGlmeShhZGRyZXNzIHBsYXllciwgdWludCBnYW1lSWQsIHVpbnQ4IHN0YXJ0LCB1aW50OCBlbmQsIHVpbnQ4IG51bWJlciwgdWludCBhbW91bnQsIHVpbnQgcHJpemUsIGJvb2wgd2luKSBpbnRlcm5hbCB7CiAgICAgICAgaWYgKHdpbikgewogICAgICAgICAgICBHYW1lV2luKAogICAgICAgICAgICAgICAgcGxheWVyLAogICAgICAgICAgICAgICAgZ2FtZUlkLAogICAgICAgICAgICAgICAgc3RhcnQsCiAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICBudW1iZXIsCiAgICAgICAgICAgICAgICBhbW91bnQsCiAgICAgICAgICAgICAgICBwcml6ZQogICAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIEdhbWVMb29zZSgKICAgICAgICAgICAgICAgIHBsYXllciwKICAgICAgICAgICAgICAgIGdhbWVJZCwKICAgICAgICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgbnVtYmVyLAogICAgICAgICAgICAgICAgYW1vdW50LAogICAgICAgICAgICAgICAgcHJpemUKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QmxvY2tIYXNoKHVpbnQgaSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMiBibG9ja0hhc2gpIHsKICAgICAgICBpZiAoaSA+IDI1NSkgewogICAgICAgICAgICBpID0gMjU1OwogICAgICAgIH0KICAgICAgICBpZiAoaSA8IDApIHsKICAgICAgICAgICAgaSA9IDE7CiAgICAgICAgfQogICAgICAgIGJsb2NrSGFzaCA9IGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXIgLSBpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXROdW1iZXIoYnl0ZXMzMiBfYSkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICB1aW50OCBtaW50ID0gMDsgLy8gcG9pbnRlcj8KICAgICAgICBmb3IgKHVpbnQgaSA9IDMxOyBpID49IDE7IGktLSkgewogICAgICAgICAgICBpZiAoKHVpbnQ4KF9hW2ldKSA+PSA0OCkgJiYgKHVpbnQ4KF9hW2ldKSA8PSA1NykpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1aW50OChfYVtpXSkgLSA0ODsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbWludDsKICAgIH0KCiAgICBmdW5jdGlvbiBwbGFjZUJldCh1aW50OCBzdGFydCwgdWludDggZW5kKSBwdWJsaWMgcGF5YWJsZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IG1pbkJldEFtb3VudCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAobXNnLnZhbHVlID4gbWF4QmV0QW1vdW50KSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHVpbnQ4IGNvdW50ZXIgPSBlbmQgLSBzdGFydCArIDE7CgogICAgICAgIGlmIChjb3VudGVyID4gOSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoY291bnRlciA8IDEpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdWludCBnYW1lSWQgPSBnYW1lc1ttc2cuc2VuZGVyXS5sZW5ndGg7CiAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl0ubGVuZ3RoICs9IDE7CiAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5pZCA9IGdhbWVJZDsKICAgICAgICBnYW1lc1ttc2cuc2VuZGVyXVtnYW1lSWRdLmFtb3VudCA9IG1zZy52YWx1ZTsKICAgICAgICBnYW1lc1ttc2cuc2VuZGVyXVtnYW1lSWRdLnN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5lbmQgPSBlbmQ7CiAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5oYXNoID0gZ2V0QmxvY2tIYXNoKHBvaW50ZXIpOwogICAgICAgIGdhbWVzW21zZy5zZW5kZXJdW2dhbWVJZF0ubnVtYmVyID0gZ2V0TnVtYmVyKGdhbWVzW21zZy5zZW5kZXJdW2dhbWVJZF0uaGFzaCk7CiAgICAgICAgLy8gc2V0IHBvaW50ZXIgdG8gbnVtYmVyID8KCiAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5wcml6ZSA9IDE7CiAgICAgICAgaWYgKChnYW1lc1ttc2cuc2VuZGVyXVtnYW1lSWRdLm51bWJlciA+PSBzdGFydCkgJiYgKGdhbWVzW21zZy5zZW5kZXJdW2dhbWVJZF0ubnVtYmVyIDw9IGVuZCkpIHsKICAgICAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS53aW4gPSB0cnVlOwogICAgICAgICAgICB1aW50IGRlYyA9IG1zZy52YWx1ZSAvIDEwOwogICAgICAgICAgICB1aW50IHBhcnRzID0gMTAgLSBjb3VudGVyOwogICAgICAgICAgICBnYW1lc1ttc2cuc2VuZGVyXVtnYW1lSWRdLnByaXplID0gbXNnLnZhbHVlICsgZGVjICogcGFydHM7CiAgICAgICAgfQoKICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGdhbWVzW21zZy5zZW5kZXJdW2dhbWVJZF0ucHJpemUpOwoKICAgICAgICBub3RpZnkoCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIGdhbWVJZCwKICAgICAgICAgICAgc3RhcnQsCiAgICAgICAgICAgIGVuZCwKICAgICAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5udW1iZXIsCiAgICAgICAgICAgIG1zZy52YWx1ZSwKICAgICAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS5wcml6ZSwKICAgICAgICAgICAgZ2FtZXNbbXNnLnNlbmRlcl1bZ2FtZUlkXS53aW4KICAgICAgICApOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRNaW5CZXRBbW91bnQodWludCBfbWluQmV0QW1vdW50KSBvbmx5b3duZXIgcmV0dXJucyAodWludCkgewogICAgICAgIG1pbkJldEFtb3VudCA9IF9taW5CZXRBbW91bnQ7CiAgICAgICAgTWluQmV0QW1vdW50Q2hhbmdlZChtaW5CZXRBbW91bnQpOwogICAgICAgIHJldHVybiBtaW5CZXRBbW91bnQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TWF4QmV0QW1vdW50KHVpbnQgX21heEJldEFtb3VudCkgb25seW93bmVyIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBtYXhCZXRBbW91bnQgPSBfbWF4QmV0QW1vdW50OwogICAgICAgIE1heEJldEFtb3VudENoYW5nZWQobWF4QmV0QW1vdW50KTsKICAgICAgICByZXR1cm4gbWF4QmV0QW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVJZHMoYWRkcmVzcyBwbGF5ZXIpIGNvbnN0YW50IHJldHVybnModWludFtdIG1lbW9yeSBpZHMpIHsKICAgICAgICBpZHMgPSBuZXcgdWludFtdKGdhbWVzW3BsYXllcl0ubGVuZ3RoKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBnYW1lc1twbGF5ZXJdLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlkc1tpXSA9IGdhbWVzW3BsYXllcl1baV0uaWQ7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVBbW91bnQoYWRkcmVzcyBwbGF5ZXIsIHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gZ2FtZXNbcGxheWVyXVtnYW1lSWRdLmFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lU3RhcnQoYWRkcmVzcyBwbGF5ZXIsIHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKHVpbnQ4KSB7CiAgICAgICAgcmV0dXJuIGdhbWVzW3BsYXllcl1bZ2FtZUlkXS5zdGFydDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRHYW1lRW5kKGFkZHJlc3MgcGxheWVyLCB1aW50IGdhbWVJZCkgY29uc3RhbnQgcmV0dXJucyh1aW50OCkgewogICAgICAgIHJldHVybiBnYW1lc1twbGF5ZXJdW2dhbWVJZF0uZW5kOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVIYXNoKGFkZHJlc3MgcGxheWVyLCB1aW50IGdhbWVJZCkgY29uc3RhbnQgcmV0dXJucyhieXRlczMyKSB7CiAgICAgICAgcmV0dXJuIGdhbWVzW3BsYXllcl1bZ2FtZUlkXS5oYXNoOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVOdW1iZXIoYWRkcmVzcyBwbGF5ZXIsIHVpbnQgZ2FtZUlkKSBjb25zdGFudCByZXR1cm5zKHVpbnQ4KSB7CiAgICAgICAgcmV0dXJuIGdhbWVzW3BsYXllcl1bZ2FtZUlkXS5udW1iZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0R2FtZVdpbihhZGRyZXNzIHBsYXllciwgdWludCBnYW1lSWQpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiBnYW1lc1twbGF5ZXJdW2dhbWVJZF0ud2luOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEdhbWVQcml6ZShhZGRyZXNzIHBsYXllciwgdWludCBnYW1lSWQpIGNvbnN0YW50IHJldHVybnModWludCkgewogICAgICAgIHJldHVybiBnYW1lc1twbGF5ZXJdW2dhbWVJZF0ucHJpemU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0TWluQmV0QW1vdW50KCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7CiAgICAgICAgcmV0dXJuIG1pbkJldEFtb3VudDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRNYXhCZXRBbW91bnQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gbWF4QmV0QW1vdW50OwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgfQp9'.
	

]
