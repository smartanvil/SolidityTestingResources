Class {
	#name : #SRT085bf17D6c557254D0370514B97d16307B8f0775,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT085bf17D6c557254D0370514B97d16307B8f0775 >> base64 [
	^ ''.
	

]
