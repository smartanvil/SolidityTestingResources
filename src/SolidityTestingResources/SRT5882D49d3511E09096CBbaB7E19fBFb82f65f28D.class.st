Class {
	#name : #SRT5882D49d3511E09096CBbaB7E19fBFb82f65f28D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5882D49d3511E09096CBbaB7E19fBFb82f65f28D >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuWmVwcGVsaW4vemVwcGVsaW4tc29saWRpdHkvYmxvYi9tYXN0ZXIvY29udHJhY3RzL21hdGgvU2FmZU1hdGguc29sCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgICAvKioKICAgICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAgICogYWNjb3VudC4KICAgICAqLwogICAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgICAgICB9CiAgICB9Cgp9CgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICovCmNvbnRyYWN0IEVSQzIwIHsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuVG90YWxTdXBwbHk7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpOwoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnModWludDI1Nik7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYXZhaWxhYmxlU3VwcGx5KTsKfQoKLyoqCiAqIEB0aXRsZSBTdGFuZGFyZCBFUkMyMCB0b2tlbgogKgogKiBAZGV2IEltcGxlbWFudGF0aW9uIG9mIHRoZSBiYXNpYyBzdGFuZGFydCB0b2tlbi4KICogQGRldiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAKICogQGRldiBCYXNlZCBvbiBjb2RlIGJ5IEZpcnN0Qmxvb2Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9GaXJzdGJsb29kaW8vdG9rZW4vYmxvYi9tYXN0ZXIvc21hcnRfY29udHJhY3QvRmlyc3RCbG9vZFRva2VuLnNvbAogKi8KY29udHJhY3QgQmlvVG9rZW4gaXMgRVJDMjAsIE93bmFibGUgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CgogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkJJT05UIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkJJT05UIjsKICAgIHVpbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgYm9vbCBwdWJsaWMgdHJhZGluZ1N0YXJ0ZWQgPSBmYWxzZTsKICAgIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwogICAgYm9vbCBwdWJsaWMgc2FsZVBhdXNlZCA9IGZhbHNlOwoKICAgIHVpbnQyNTYgcHVibGljIHRva2VuVG90YWxTdXBwbHkgPSAwOwogICAgdWludDI1NiBwdWJsaWMgdHJhc2hlZFRva2VucyA9IDA7CiAgICB1aW50MjU2IHB1YmxpYyBoYXJkY2FwID0gMTQwMDAwMDAwICogKDEwICoqIGRlY2ltYWxzKTsgLy8gMTQwIG1pbGxpb24gdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyBvd25lclRva2VucyA9IDE0MDAwMDAwICogKDEwICoqIGRlY2ltYWxzKTsgLy8gMTQgbWlsbGlvbiB0b2tlbnMKCiAgICB1aW50IHB1YmxpYyBldGhUb1Rva2VuID0gMzAwOyAvLyAxIGV0aCBidXlzIDMwMCB0b2tlbnMKICAgIHVpbnQgcHVibGljIG5vQ29udHJpYnV0b3JzID0gMDsKCiAgICB1aW50IHB1YmxpYyBzdGFydCA9IDE1MDMzNDYwODA7IC8vIDA4LzIxLzIwMTcgQCAyMDowOHBtIChVVEMpCiAgICB1aW50IHB1YmxpYyBpbml0aWFsU2FsZUVuZERhdGUgPSBzdGFydCArIDkgd2Vla3M7CiAgICB1aW50IHB1YmxpYyBvd25lckdyYWNlID0gaW5pdGlhbFNhbGVFbmREYXRlICsgMTgyIGRheXM7CiAgICB1aW50IHB1YmxpYyBmaXZlWWVhckdyYWNlID0gaW5pdGlhbFNhbGVFbmREYXRlICsgNSAqIDM2NSBkYXlzOwoKICAgIGFkZHJlc3MgcHVibGljIG11bHRpc2lnVmF1bHQ7CiAgICBhZGRyZXNzIHB1YmxpYyBsb2NrZWRWYXVsdDsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyVmF1bHQ7CgogICAgYWRkcmVzcyBwdWJsaWMgYXV0aG9yaXplck9uZTsKICAgIGFkZHJlc3MgcHVibGljIGF1dGhvcml6ZXJUd287CgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBhdXRob3JpemVkV2l0aGRyYXdhbDsKCiAgICBldmVudCBNaW50KGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBNaW50RmluaXNoZWQoKTsKICAgIGV2ZW50IFRva2VuU29sZChhZGRyZXNzIHJlY2lwaWVudCwgdWludDI1NiBldGhlcl9hbW91bnQsIHVpbnQyNTYgcGF5X2Ftb3VudCwgdWludDI1NiBleGNoYW5nZXJhdGUpOwogICAgZXZlbnQgTWFpblNhbGVDbG9zZWQoKTsKCiAgICAvKioKICAgICAqIEBkZXYgRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2suCiAgICAgKi8KICAgIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICAgICBpZiAobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgICAgICBpZiAobWludGluZ0ZpbmlzaGVkKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgbW9kaWZpZXIgdGhhdCB0aHJvd3MgaWYgdHJhZGluZyBoYXMgbm90IHN0YXJ0ZWQgeWV0CiAgICAgKi8KICAgIG1vZGlmaWVyIGhhc1N0YXJ0ZWRUcmFkaW5nKCkgewogICAgICAgIHJlcXVpcmUodHJhZGluZ1N0YXJ0ZWQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IHRva2VuIGNyZWF0aW9uIG9ubHkgd2hlbiB0aGUgc2FsZSBJUyBPTgogICAgICovCiAgICBtb2RpZmllciBzYWxlSXNPbigpIHsKICAgICAgICByZXF1aXJlKG5vdyA+IHN0YXJ0ICYmIG5vdyA8IGluaXRpYWxTYWxlRW5kRGF0ZSAmJiBzYWxlUGF1c2VkID09IGZhbHNlKTsKICAgICAgICBfOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBtb2RpZmllciB0byBhbGxvdyB0b2tlbiBjcmVhdGlvbiBvbmx5IHdoZW4gdGhlIGhhcmRjYXAgaGFzIG5vdCBiZWVuIHJlYWNoZWQKICAgICAqLwogICAgbW9kaWZpZXIgaXNVbmRlckhhcmRDYXAoKSB7CiAgICAgICAgcmVxdWlyZSh0b2tlblRvdGFsU3VwcGx5IDw9IGhhcmRjYXApOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQmlvVG9rZW4oYWRkcmVzcyBfb3duZXJWYXVsdCwgYWRkcmVzcyBfYXV0aG9yaXplck9uZSwgYWRkcmVzcyBfYXV0aG9yaXplclR3bywgYWRkcmVzcyBfbG9ja2VkVmF1bHQsIGFkZHJlc3MgX211bHRpc2lnVmF1bHQpIHsKICAgICAgICBvd25lclZhdWx0ID0gX293bmVyVmF1bHQ7CiAgICAgICAgYXV0aG9yaXplck9uZSA9IF9hdXRob3JpemVyT25lOwogICAgICAgIGF1dGhvcml6ZXJUd28gPSBfYXV0aG9yaXplclR3bzsKICAgICAgICBsb2NrZWRWYXVsdCA9IF9sb2NrZWRWYXVsdDsKICAgICAgICBtdWx0aXNpZ1ZhdWx0ID0gX211bHRpc2lnVmF1bHQ7CgogICAgICAgIG1pbnQob3duZXJWYXVsdCwgb3duZXJUb2tlbnMpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjaWV2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHByaXZhdGUgY2FuTWludCByZXR1cm5zKGJvb2wpIHsKICAgICAgICB0b2tlblRvdGFsU3VwcGx5ID0gdG9rZW5Ub3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CgogICAgICAgIHJlcXVpcmUodG9rZW5Ub3RhbFN1cHBseSA8PSBoYXJkY2FwKTsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIG5vQ29udHJpYnV0b3JzID0gbm9Db250cmlidXRvcnMuYWRkKDEpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHdpbGwgcmVjaWV2ZSB0aGUgbWludGVkIHRva2Vucy4KICAgICAqIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuCiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBtYXN0ZXJNaW50KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBjYW5NaW50IG9ubHlPd25lciByZXR1cm5zKGJvb2wpIHsKICAgICAgICB0b2tlblRvdGFsU3VwcGx5ID0gdG9rZW5Ub3RhbFN1cHBseS5hZGQoX2Ftb3VudCk7CgogICAgICAgIHJlcXVpcmUodG9rZW5Ub3RhbFN1cHBseSA8PSBoYXJkY2FwKTsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICAgIG5vQ29udHJpYnV0b3JzID0gbm9Db250cmlidXRvcnMuYWRkKDEpOwogICAgICAgIE1pbnQoX3RvLCBfYW1vdW50KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBfdG8sIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBGdW5jdGlvbiB0byBzdG9wIG1pbnRpbmcgbmV3IHRva2Vucy4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgcHJpdmF0ZSBvbmx5T3duZXIgcmV0dXJucyhib29sKSB7CiAgICAgICAgbWludGluZ0ZpbmlzaGVkID0gdHJ1ZTsKICAgICAgICBNaW50RmluaXNoZWQoKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgaGFzU3RhcnRlZFRyYWRpbmcgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgdGhlIHZhdWx0IHRvIG1ha2UgdHJhbnNmZXJzCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gbG9ja2VkVmF1bHQgJiYgbm93IDwgZml2ZVllYXJHcmFjZSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIC8vIG93bmVyIG5lZWRzIHRvIHdhaXQgYXMgd2VsbAogICAgICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyVmF1bHQgJiYgbm93IDwgb3duZXJHcmFjZSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcgogICAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHVpbnQyNTYgdGhlIGFtb3V0IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIGhhc1N0YXJ0ZWRUcmFkaW5nIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGlmIChfZnJvbSA9PSBsb2NrZWRWYXVsdCAmJiBub3cgPCBmaXZlWWVhckdyYWNlKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgLy8gb3duZXIgbmVlZHMgdG8gd2FpdCBhcyB3ZWxsCiAgICAgICAgaWYgKF9mcm9tID09IG93bmVyVmF1bHQgJiYgbm93IDwgb3duZXJHcmFjZSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07CgogICAgICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsKCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlciBhY2NvcmRpbmcgdG8gb2ZmIGV4Y2hhbmdlIGFncmVlbWVudHMKICAgICAqIEBwYXJhbSBfZnJvbSBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHNlbmQgdG9rZW5zIGZyb20KICAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1hc3RlclRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgzICogMzIpIHB1YmxpYyBoYXNTdGFydGVkVHJhZGluZyBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgaWYgKF9mcm9tID09IGxvY2tlZFZhdWx0ICYmIG5vdyA8IGZpdmVZZWFyR3JhY2UpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICAvLyBvd25lciBuZWVkcyB0byB3YWl0IGFzIHdlbGwKICAgICAgICBpZiAoX2Zyb20gPT0gb3duZXJWYXVsdCAmJiBub3cgPCBvd25lckdyYWNlKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfdmFsdWUpOwogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBhdmFpbGFibGVTdXBwbHkpIHsKICAgICAgICByZXR1cm4gdG9rZW5Ub3RhbFN1cHBseTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAgICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQXBwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAgICogQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBzcGVudC4KICAgICAqLwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CgogICAgICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgCiAgICAgICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgICAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkKICAgICAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYW4gYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICAgKiBAcGFyYW0gX293bmVyIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggb3ducyB0aGUgZnVuZHMuCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgICAqLwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgb3duZXIgdG8gZW5hYmxlIHRoZSB0cmFkaW5nLiBUaGlzIGNhbiBub3QgYmUgdW5kb25lCiAgICAgKi8KICAgIGZ1bmN0aW9uIHN0YXJ0VHJhZGluZygpIG9ubHlPd25lciB7CiAgICAgICAgdHJhZGluZ1N0YXJ0ZWQgPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIG93bmVyIHRvIGVuYWJsZSB0aGUgdHJhZGluZy4gVGhpcyBjYW4gbm90IGJlIHVuZG9uZQogICAgICovCiAgICBmdW5jdGlvbiBwYXVzZVNhbGUoKSBvbmx5T3duZXIgewogICAgICAgIHNhbGVQYXVzZWQgPSB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIG93bmVyIHRvIGVuYWJsZSB0aGUgdHJhZGluZy4gVGhpcyBjYW4gbm90IGJlIHVuZG9uZQogICAgICovCiAgICBmdW5jdGlvbiByZXN1bWVTYWxlKCkgb25seU93bmVyIHsKICAgICAgICBzYWxlUGF1c2VkID0gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IEFsbG93cyB0aGUgb3duZXIgdG8gZW5hYmxlIHRoZSB0cmFkaW5nLiBUaGlzIGNhbiBub3QgYmUgdW5kb25lCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldE5vQ29udHJpYnV0b3JzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50IGNvbnRyaWJ1dG9ycykgewogICAgICAgIHJldHVybiBub0NvbnRyaWJ1dG9yczsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQWxsb3dzIHRoZSBvd25lciB0byBzZXQgdGhlIG11bHRpc2lnIHdhbGxldCBhZGRyZXNzLgogICAgICogQHBhcmFtIF9tdWx0aXNpZ1ZhdWx0IHRoZSBtdWx0aXNpZyB3YWxsZXQgYWRkcmVzcwogICAgICovCiAgICBmdW5jdGlvbiBzZXRNdWx0aXNpZ1ZhdWx0KGFkZHJlc3MgX211bHRpc2lnVmF1bHQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGlmIChfbXVsdGlzaWdWYXVsdCAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIG11bHRpc2lnVmF1bHQgPSBfbXVsdGlzaWdWYXVsdDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc2V0QXV0aG9yaXplZFdpdGhkcmF3YWxBbW91bnQodWludDI1NiBfYW1vdW50KSBwdWJsaWMgewogICAgICAgIGlmIChfYW1vdW50IDwgMCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGF1dGhvcml6ZXJPbmUgJiYgbXNnLnNlbmRlciAhPSBhdXRob3JpemVyVHdvKSB7CiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIH0KCiAgICAgICAgYXV0aG9yaXplZFdpdGhkcmF3YWxbbXNnLnNlbmRlcl0gPSBfYW1vdW50OwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgdGhlIG93bmVyIHRvIHNlbmQgdGhlIGZ1bmRzIHRvIHRoZSB2YXVsdC4KICAgICAqIEBwYXJhbSBfYW1vdW50IHRoZSBhbW91bnQgaW4gd2VpIHRvIHNlbmQKICAgICAqLwogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcmV1bSh1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobXVsdGlzaWdWYXVsdCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9hbW91bnQgPD0gdGhpcy5iYWxhbmNlKTsgLy8gd2VpCgogICAgICAgIGlmIChhdXRob3JpemVkV2l0aGRyYXdhbFthdXRob3JpemVyT25lXSAhPSBhdXRob3JpemVkV2l0aGRyYXdhbFthdXRob3JpemVyVHdvXSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIGlmIChfYW1vdW50ID4gYXV0aG9yaXplZFdpdGhkcmF3YWxbYXV0aG9yaXplck9uZV0pIHsKICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIW11bHRpc2lnVmF1bHQuc2VuZChfYW1vdW50KSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIGF1dGhvcml6ZWRXaXRoZHJhd2FsW2F1dGhvcml6ZXJPbmVdID0gYXV0aG9yaXplZFdpdGhkcmF3YWxbYXV0aG9yaXplck9uZV0uc3ViKF9hbW91bnQpOwogICAgICAgIGF1dGhvcml6ZWRXaXRoZHJhd2FsW2F1dGhvcml6ZXJUd29dID0gYXV0aG9yaXplZFdpdGhkcmF3YWxbYXV0aG9yaXplclR3b10uc3ViKF9hbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNob3dBdXRob3JpemVyT25lQW1vdW50KCkgY29uc3RhbnQgcHVibGljIHJldHVybnModWludDI1NiByZW1haW5pbmcpIHsKICAgICAgICByZXR1cm4gYXV0aG9yaXplZFdpdGhkcmF3YWxbYXV0aG9yaXplck9uZV07CiAgICB9CgogICAgZnVuY3Rpb24gc2hvd0F1dGhvcml6ZXJUd29BbW91bnQoKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyh1aW50MjU2IHJlbWFpbmluZykgewogICAgICAgIHJldHVybiBhdXRob3JpemVkV2l0aGRyYXdhbFthdXRob3JpemVyVHdvXTsKICAgIH0KCiAgICBmdW5jdGlvbiBzaG93RXRoQmFsYW5jZSgpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiByZXRyaWV2ZVRva2VucygpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIHJlcXVpcmUobG9ja2VkVmF1bHQgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHVpbnQyNTYgY2FwT3V0ID0gaGFyZGNhcC5zdWIodG9rZW5Ub3RhbFN1cHBseSk7CiAgICAgICAgdG9rZW5Ub3RhbFN1cHBseSA9IGhhcmRjYXA7CgogICAgICAgIGJhbGFuY2VzW2xvY2tlZFZhdWx0XSA9IGJhbGFuY2VzW2xvY2tlZFZhdWx0XS5hZGQoY2FwT3V0KTsKICAgICAgICBUcmFuc2Zlcih0aGlzLCBsb2NrZWRWYXVsdCwgY2FwT3V0KTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFzaFRva2VucyhhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpIG9ubHlPd25lciByZXR1cm5zKGJvb2wpIHsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF9hbW91bnQpOwogICAgICAgIHRyYXNoZWRUb2tlbnMgPSB0cmFzaGVkVG9rZW5zLmFkZChfYW1vdW50KTsKICAgICAgICB0b2tlblRvdGFsU3VwcGx5ID0gdG9rZW5Ub3RhbFN1cHBseS5zdWIoX2Ftb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gZGVjcmVhc2VTdXBwbHkodWludDI1NiB2YWx1ZSwgYWRkcmVzcyBmcm9tKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICBiYWxhbmNlc1tmcm9tXSA9IGJhbGFuY2VzW2Zyb21dLnN1Yih2YWx1ZSk7CiAgICAgIHRyYXNoZWRUb2tlbnMgPSB0cmFzaGVkVG9rZW5zLmFkZCh2YWx1ZSk7CiAgICAgIHRva2VuVG90YWxTdXBwbHkgPSB0b2tlblRvdGFsU3VwcGx5LnN1Yih2YWx1ZSk7CiAgICAgIFRyYW5zZmVyKGZyb20sIDAsIHZhbHVlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gZmluaXNoU2FsZSgpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGZpbmlzaE1pbnRpbmcoKTsKICAgICAgICByZXRyaWV2ZVRva2VucygpOwogICAgICAgIHN0YXJ0VHJhZGluZygpOwoKICAgICAgICBNYWluU2FsZUNsb3NlZCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhbGVPbigpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgewogICAgICAgIHJldHVybiAobm93ID4gc3RhcnQgJiYgbm93IDwgaW5pdGlhbFNhbGVFbmREYXRlICYmIHNhbGVQYXVzZWQgPT0gZmFsc2UpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBBbGxvd3MgYW55b25lIHRvIGNyZWF0ZSB0b2tlbnMgYnkgZGVwb3NpdGluZyBldGhlci4KICAgICAqIEBwYXJhbSByZWNpcGllbnQgdGhlIHJlY2lwaWVudCB0byByZWNlaXZlIHRva2Vucy4KICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKGFkZHJlc3MgcmVjaXBpZW50KSBwdWJsaWMgaXNVbmRlckhhcmRDYXAgc2FsZUlzT24gcGF5YWJsZSB7CiAgICAgICAgdWludCBib251cyA9IDA7CiAgICAgICAgdWludCBwZXJpb2QgPSAxIHdlZWtzOwogICAgICAgIHVpbnQyNTYgdG9rZW5zOwoKICAgICAgICBpZiAobm93IDw9IHN0YXJ0ICsgMiAqIHBlcmlvZCkgewogICAgICAgICAgICBib251cyA9IDIwOwogICAgICAgIH0gZWxzZSBpZiAobm93ID4gc3RhcnQgKyAyICogcGVyaW9kICYmIG5vdyA8PSBzdGFydCArIDMgKiBwZXJpb2QpIHsKICAgICAgICAgICAgYm9udXMgPSAxNTsKICAgICAgICB9IGVsc2UgaWYgKG5vdyA+IHN0YXJ0ICsgMyAqIHBlcmlvZCAmJiBub3cgPD0gc3RhcnQgKyA0ICogcGVyaW9kKSB7CiAgICAgICAgICAgIGJvbnVzID0gMTA7CiAgICAgICAgfSBlbHNlIGlmIChub3cgPiBzdGFydCArIDQgKiBwZXJpb2QgJiYgbm93IDw9IHN0YXJ0ICsgNSAqIHBlcmlvZCkgewogICAgICAgICAgICBib251cyA9IDU7CiAgICAgICAgfQoKICAgICAgICAvLyB0aGUgYm9udXMgaXMgaW4gcGVyY2VudGFnZXMsIHNvbGlkaXR5IGlzIGRvaW5nIHN0YW5kYXJkIGludGVnZXIgZGl2aXNpb24sIGJhc2ljYWxseSByb3VuZGluZyAnZG93bicKICAgICAgICBpZiAoYm9udXMgPiAwKSB7CiAgICAgICAgICAgIHRva2VucyA9IGV0aFRvVG9rZW4ubXVsKG1zZy52YWx1ZSkgKyBldGhUb1Rva2VuLm11bChtc2cudmFsdWUpLm11bChib251cykuZGl2KDEwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdG9rZW5zID0gZXRoVG9Ub2tlbi5tdWwobXNnLnZhbHVlKTsKICAgICAgICB9CgogICAgICAgIGlmICh0b2tlbnMgPD0gMCkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CgogICAgICAgIG1pbnQocmVjaXBpZW50LCB0b2tlbnMpOwoKICAgICAgICBUb2tlblNvbGQocmVjaXBpZW50LCBtc2cudmFsdWUsIHRva2VucywgZXRoVG9Ub2tlbik7CiAgICB9CgogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICBjcmVhdGVUb2tlbnMobXNnLnNlbmRlcik7CiAgICB9Cn0='.
	

]
