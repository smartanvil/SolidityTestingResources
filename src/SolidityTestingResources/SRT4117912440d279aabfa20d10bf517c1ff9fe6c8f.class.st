Class {
	#name : #SRT4117912440d279aabfa20d10bf517c1ff9fe6c8f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4117912440d279aabfa20d10bf517c1ff9fe6c8f >> base64 [
	^ ''.
	

]
