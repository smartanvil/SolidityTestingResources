Class {
	#name : #SRT4162178b78d6985480a308b2190ee5517460406d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4162178b78d6985480a308b2190ee5517460406d >> base64 [
	^ ''.
	

]
