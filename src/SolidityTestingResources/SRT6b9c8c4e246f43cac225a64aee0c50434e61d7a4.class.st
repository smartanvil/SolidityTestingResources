Class {
	#name : #SRT6b9c8c4e246f43cac225a64aee0c50434e61d7a4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b9c8c4e246f43cac225a64aee0c50434e61d7a4 >> base64 [
	^ ''.
	

]
