Class {
	#name : #SRT7957eeFc49Db8E7c7a11DEd53f4604aa6afc0b29,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7957eeFc49Db8E7c7a11DEd53f4604aa6afc0b29 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCmNvbnRyYWN0IEV0aHJhZmZsZSB7CiAgICAvLyBTdHJ1Y3RzCiAgICBzdHJ1Y3QgQ29udGVzdGFudCB7CiAgICAgICAgYWRkcmVzcyBhZGRyOwogICAgICAgIHVpbnQgcmFmZmxlSWQ7CiAgICB9CgogICAgLy8gRXZlbnRzCiAgICBldmVudCBSYWZmbGVSZXN1bHQoCiAgICAgICAgdWludCBpbmRleGVkIHJhZmZsZUlkLAogICAgICAgIHVpbnQgd2lubmluZ051bWJlciwKICAgICAgICBhZGRyZXNzIHdpbm5pbmdBZGRyZXNzLAogICAgICAgIHVpbnQgYmxvY2tUaW1lc3RhbXAsCiAgICAgICAgdWludCBibG9ja051bWJlciwKICAgICAgICB1aW50IGdhc0xpbWl0LAogICAgICAgIHVpbnQgZGlmZmljdWx0eSwKICAgICAgICB1aW50IGdhcywKICAgICAgICB1aW50IHZhbHVlLAogICAgICAgIGFkZHJlc3MgbXNnU2VuZGVyLAogICAgICAgIGFkZHJlc3MgYmxvY2tDb2luYmFzZSwKICAgICAgICBieXRlczMyIHNoYQogICAgKTsKCiAgICBldmVudCBUaWNrZXRQdXJjaGFzZSgKICAgICAgICB1aW50IGluZGV4ZWQgcmFmZmxlSWQsCiAgICAgICAgYWRkcmVzcyBjb250ZXN0YW50LAogICAgICAgIHVpbnQgbnVtYmVyCiAgICApOwoKICAgIGV2ZW50IFRpY2tldFJlZnVuZCgKICAgICAgICB1aW50IGluZGV4ZWQgcmFmZmxlSWQsCiAgICAgICAgYWRkcmVzcyBjb250ZXN0YW50LAogICAgICAgIHVpbnQgbnVtYmVyCiAgICApOwoKICAgIC8vIENvbnN0YW50cwogICAgYWRkcmVzcyBwdWJsaWMgY3JlYXRvckFkZHJlc3M7CiAgICBhZGRyZXNzIGNvbnN0YW50IHB1YmxpYyByYWtlQWRkcmVzcyA9IDB4MTU4ODcxMDBmM2IzY0EwYjY0NUYwMDdjNkFBMTEzNDg2NjVjNjllNTsKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIHByaXplID0gMC4xIGV0aGVyOwogICAgdWludCBjb25zdGFudCBwdWJsaWMgcmFrZSA9IDAuMDIgZXRoZXI7CiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyB0b3RhbFRpY2tldHMgPSA2OwogICAgdWludCBjb25zdGFudCBwdWJsaWMgcHJpY2VQZXJUaWNrZXQgPSAocHJpemUgKyByYWtlKSAvIHRvdGFsVGlja2V0czsKCiAgICAvLyBWYXJpYWJsZXMKICAgIHVpbnQgcHVibGljIHJhZmZsZUlkID0gMDsKICAgIHVpbnQgcHVibGljIG5leHRUaWNrZXQgPSAwOwogICAgbWFwcGluZyAodWludCA9PiBDb250ZXN0YW50KSBwdWJsaWMgY29udGVzdGFudHM7CiAgICB1aW50W10gcHVibGljIGdhcHM7CgogICAgLy8gSW5pdGlhbGl6YXRpb24KICAgIGZ1bmN0aW9uIEV0aHJhZmZsZSgpIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvckFkZHJlc3MgPSBtc2cuc2VuZGVyOwogICAgICAgIHJlc2V0UmFmZmxlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVzZXRSYWZmbGUoKSBwcml2YXRlIHsKICAgICAgICByYWZmbGVJZCsrOwogICAgICAgIG5leHRUaWNrZXQgPSAxOwogICAgfQoKICAgIC8vIENhbGwgYnV5VGlja2V0cygpIHdoZW4gcmVjZWl2aW5nIEV0aGVyIG91dHNpZGUgYSBmdW5jdGlvbgogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIGJ1eVRpY2tldHMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXlUaWNrZXRzKCkgcGF5YWJsZSBwdWJsaWMgewogICAgICAgIHVpbnQgbW9uZXlTZW50ID0gbXNnLnZhbHVlOwoKICAgICAgICB3aGlsZSAobW9uZXlTZW50ID49IHByaWNlUGVyVGlja2V0ICYmIG5leHRUaWNrZXQgPD0gdG90YWxUaWNrZXRzKSB7CiAgICAgICAgICAgIHVpbnQgY3VyclRpY2tldCA9IDA7CiAgICAgICAgICAgIGlmIChnYXBzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGN1cnJUaWNrZXQgPSBnYXBzW2dhcHMubGVuZ3RoLTFdOwogICAgICAgICAgICAgICAgZ2Fwcy5sZW5ndGgtLTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1cnJUaWNrZXQgPSBuZXh0VGlja2V0Kys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRlc3RhbnRzW2N1cnJUaWNrZXRdID0gQ29udGVzdGFudChtc2cuc2VuZGVyLCByYWZmbGVJZCk7CiAgICAgICAgICAgIFRpY2tldFB1cmNoYXNlKHJhZmZsZUlkLCBtc2cuc2VuZGVyLCBjdXJyVGlja2V0KTsKICAgICAgICAgICAgbW9uZXlTZW50IC09IHByaWNlUGVyVGlja2V0OwogICAgICAgIH0KCiAgICAgICAgLy8gQ2hvb3NlIHdpbm5lciBpZiB3ZSBzb2xkIGFsbCB0aGUgdGlja2V0cwogICAgICAgIGlmIChuZXh0VGlja2V0ID4gdG90YWxUaWNrZXRzKSB7CiAgICAgICAgICAgIGNob29zZVdpbm5lcigpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2VuZCBiYWNrIGxlZnRvdmVyIG1vbmV5CiAgICAgICAgaWYgKG1vbmV5U2VudCA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihtb25leVNlbnQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaG9vc2VXaW5uZXIoKSBwcml2YXRlIHsKICAgICAgICB1aW50IHdpbm5pbmdOdW1iZXIgPSBnZXRSYW5kb20oKTsKICAgICAgICBhZGRyZXNzIHdpbm5pbmdBZGRyZXNzID0gY29udGVzdGFudHNbd2lubmluZ051bWJlcl0uYWRkcjsKICAgICAgICBSYWZmbGVSZXN1bHQoCiAgICAgICAgICAgIHJhZmZsZUlkLCB3aW5uaW5nTnVtYmVyLCB3aW5uaW5nQWRkcmVzcywgYmxvY2sudGltZXN0YW1wLAogICAgICAgICAgICBibG9jay5udW1iZXIsIGJsb2NrLmdhc2xpbWl0LCBibG9jay5kaWZmaWN1bHR5LCBtc2cuZ2FzLAogICAgICAgICAgICBtc2cudmFsdWUsIG1zZy5zZW5kZXIsIGJsb2NrLmNvaW5iYXNlLCBnZXRTaGEoKQogICAgICAgICk7CgogICAgICAgIHJlc2V0UmFmZmxlKCk7CiAgICAgICAgd2lubmluZ0FkZHJlc3MudHJhbnNmZXIocHJpemUpOwogICAgICAgIHJha2VBZGRyZXNzLnRyYW5zZmVyKHJha2UpOwogICAgfQoKICAgIC8vIENob29zZSBhIHJhbmRvbSBpbnQgYmV0d2VlbiAxIGFuZCB0b3RhbFRpY2tldHMKICAgIGZ1bmN0aW9uIGdldFJhbmRvbSgpIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiAodWludChnZXRTaGEoKSkgJSB0b3RhbFRpY2tldHMpICsgMTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRTaGEoKSBwcml2YXRlIHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4gc2hhMygKICAgICAgICAgICAgYmxvY2sudGltZXN0YW1wICsKICAgICAgICAgICAgYmxvY2subnVtYmVyICsKICAgICAgICAgICAgYmxvY2suZ2FzbGltaXQgKwogICAgICAgICAgICBibG9jay5kaWZmaWN1bHR5ICsKICAgICAgICAgICAgbXNnLmdhcyArCiAgICAgICAgICAgIG1zZy52YWx1ZSArCiAgICAgICAgICAgIHVpbnQobXNnLnNlbmRlcikgKwogICAgICAgICAgICB1aW50KGJsb2NrLmNvaW5iYXNlKQogICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UmVmdW5kKCkgcHVibGljIHsKICAgICAgICB1aW50IHJlZnVuZHMgPSAwOwogICAgICAgIGZvciAodWludCBpID0gMTsgaSA8PSB0b3RhbFRpY2tldHM7IGkrKykgewogICAgICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjb250ZXN0YW50c1tpXS5hZGRyICYmIHJhZmZsZUlkID09IGNvbnRlc3RhbnRzW2ldLnJhZmZsZUlkKSB7CiAgICAgICAgICAgICAgICByZWZ1bmRzKys7CiAgICAgICAgICAgICAgICBjb250ZXN0YW50c1tpXSA9IENvbnRlc3RhbnQoYWRkcmVzcygwKSwgMCk7CiAgICAgICAgICAgICAgICBnYXBzLnB1c2goaSk7CiAgICAgICAgICAgICAgICBUaWNrZXRSZWZ1bmQocmFmZmxlSWQsIG1zZy5zZW5kZXIsIGkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocmVmdW5kcyA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZWZ1bmRzICogcHJpY2VQZXJUaWNrZXQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBraWxsKCkgcHVibGljIHsKICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yQWRkcmVzcykgewogICAgICAgICAgICBzZWxmZGVzdHJ1Y3QoY3JlYXRvckFkZHJlc3MpOwogICAgICAgIH0KICAgIH0KfQ=='.
	

]
