Class {
	#name : #SRT255d597951300a913d5e327c6e92ddc05923febe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT255d597951300a913d5e327c6e92ddc05923febe >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sCiAqIGZ1bmN0aW9ucywgdGhpcyBzaW1wbGlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAidXNlciBwZXJtaXNzaW9ucyIuCiAqLwpjb250cmFjdCBPd25hYmxlIHsKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCgogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKCiAgLyoqCiAgICogQGRldiBUaGUgT3duYWJsZSBjb25zdHJ1Y3RvciBzZXRzIHRoZSBvcmlnaW5hbCBgb3duZXJgIG9mIHRoZSBjb250cmFjdCB0byB0aGUgc2VuZGVyCiAgICogYWNjb3VudC4KICAgKi8KICBmdW5jdGlvbiBPd25hYmxlKCkgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHB1YmxpYyB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IE1vZGlmaWVyIHRvIG1ha2UgYSBmdW5jdGlvbiBjYWxsYWJsZSBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IGlzIG5vdCBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlbk5vdFBhdXNlZCgpIHsKICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCgpIHsKICAgIHJlcXVpcmUocGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gcGF1c2UsIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUKICAgKi8KICBmdW5jdGlvbiBwYXVzZSgpIG9ubHlPd25lciB3aGVuTm90UGF1c2VkIHB1YmxpYyB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICB9CgogIC8qKgogICAqIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byB1bnBhdXNlLCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQogICAqLwogIGZ1bmN0aW9uIHVucGF1c2UoKSBvbmx5T3duZXIgd2hlblBhdXNlZCBwdWJsaWMgewogICAgcGF1c2VkID0gZmFsc2U7CiAgICBVbnBhdXNlKCk7CiAgfQp9CgovKioKICogQHRpdGxlIEVSQzIwQmFzaWMKICogQGRldiBTaW1wbGVyIHZlcnNpb24gb2YgRVJDMjAgaW50ZXJmYWNlCiAqIEBkZXYgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNzkKICovCmNvbnRyYWN0IEVSQzIwQmFzaWMgewogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKCiAgLyoqCiAgKiBAZGV2IHRyYW5zZmVyIHRva2VuIGZvciBhIHNwZWNpZmllZCBhZGRyZXNzCiAgKiBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvLgogICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IHRvIGJlIHRyYW5zZmVycmVkLgogICovCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CgogICAgLy8gU2FmZU1hdGguc3ViIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBiYWxhbmNlLgogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAqIEBkZXYgR2V0cyB0aGUgYmFsYW5jZSBvZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgKiBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRvIHF1ZXJ5IHRoZSB0aGUgYmFsYW5jZSBvZi4KICAqIEByZXR1cm4gQW4gdWludDI1NiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICoKICogQGRldiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcmQgdG9rZW4uCiAqIEBkZXYgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqIEBkZXYgQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOiBodHRwczovL2dpdGh1Yi5jb20vRmlyc3RibG9vZGlvL3Rva2VuL2Jsb2IvbWFzdGVyL3NtYXJ0X2NvbnRyYWN0L0ZpcnN0Qmxvb2RUb2tlbi5zb2wKICovCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIEJhc2ljVG9rZW4gewoKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgoKICAvKioKICAgKiBAZGV2IFRyYW5zZmVyIHRva2VucyBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXIKICAgKiBAcGFyYW0gX2Zyb20gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byBzZW5kIHRva2VucyBmcm9tCiAgICogQHBhcmFtIF90byBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHlvdSB3YW50IHRvIHRyYW5zZmVyIHRvCiAgICogQHBhcmFtIF92YWx1ZSB1aW50MjU2IHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwoKICAgIHVpbnQyNTYgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOwoKICAgIC8vIENoZWNrIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBzdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldAogICAgLy8gcmVxdWlyZSAoX3ZhbHVlIDw9IF9hbGxvd2FuY2UpOwoKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBfYWxsb3dhbmNlLnN1YihfdmFsdWUpOwogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBBcHByb3ZlIHRoZSBwYXNzZWQgYWRkcmVzcyB0byBzcGVuZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0b2tlbnMgb24gYmVoYWxmIG9mIG1zZy5zZW5kZXIuCiAgICoKICAgKiBCZXdhcmUgdGhhdCBjaGFuZ2luZyBhbiBhbGxvd2FuY2Ugd2l0aCB0aGlzIG1ldGhvZCBicmluZ3MgdGhlIHJpc2sgdGhhdCBzb21lb25lIG1heSB1c2UgYm90aCB0aGUgb2xkCiAgICogYW5kIHRoZSBuZXcgYWxsb3dhbmNlIGJ5IHVuZm9ydHVuYXRlIHRyYW5zYWN0aW9uIG9yZGVyaW5nLiBPbmUgcG9zc2libGUgc29sdXRpb24gdG8gbWl0aWdhdGUgdGhpcwogICAqIHJhY2UgY29uZGl0aW9uIGlzIHRvIGZpcnN0IHJlZHVjZSB0aGUgc3BlbmRlcidzIGFsbG93YW5jZSB0byAwIGFuZCBzZXQgdGhlIGRlc2lyZWQgdmFsdWUgYWZ0ZXJ3YXJkczoKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZnlpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWxhYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQoKICAvKioKICAgKiBhcHByb3ZlIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbGxvd2VkW19zcGVuZGVyXSA9PSAwLiBUbyBpbmNyZW1lbnQKICAgKiBhbGxvd2VkIHZhbHVlIGlzIGJldHRlciB0byB1c2UgdGhpcyBmdW5jdGlvbiB0byBhdm9pZCAyIGNhbGxzIChhbmQgd2FpdCB1bnRpbAogICAqIHRoZSBmaXJzdCB0cmFuc2FjdGlvbiBpcyBtaW5lZCkKICAgKiBGcm9tIE1vbm9saXRoREFPIFRva2VuLnNvbAogICAqLwogIGZ1bmN0aW9uIGluY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0uYWRkKF9hZGRlZFZhbHVlKTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGRlY3JlYXNlQXBwcm92YWwgKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3N1YnRyYWN0ZWRWYWx1ZSkKICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOwogICAgaWYgKF9zdWJ0cmFjdGVkVmFsdWUgPiBvbGRWYWx1ZSkgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IDA7CiAgICB9IGVsc2UgewogICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IG9sZFZhbHVlLnN1Yihfc3VidHJhY3RlZFZhbHVlKTsKICAgIH0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cgp9CgovKioKICogQHRpdGxlIE1pbnRhYmxlIHRva2VuCiAqIEBkZXYgU2ltcGxlIEVSQzIwIFRva2VuIGV4YW1wbGUsIHdpdGggbWludGFibGUgdG9rZW4gY3JlYXRpb24KICogQGRldiBJc3N1ZTogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2lzc3Vlcy8xMjAKICogQmFzZWQgb24gY29kZSBieSBUb2tlbk1hcmtldE5ldDogaHR0cHM6Ly9naXRodWIuY29tL1Rva2VuTWFya2V0TmV0L2ljby9ibG9iL21hc3Rlci9jb250cmFjdHMvTWludGFibGVUb2tlbi5zb2wKICovCgpjb250cmFjdCBNaW50YWJsZVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgTWludEZpbmlzaGVkKCk7CgogIGJvb2wgcHVibGljIG1pbnRpbmdGaW5pc2hlZCA9IGZhbHNlOwoKCiAgbW9kaWZpZXIgY2FuTWludCgpIHsKICAgIHJlcXVpcmUoIW1pbnRpbmdGaW5pc2hlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBtaW50IHRva2VucwogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG1pbnRlZCB0b2tlbnMuCiAgICogQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gbWludC4KICAgKiBAcmV0dXJuIEEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIGNhbk1pbnQgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKF9hbW91bnQpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgTWludChfdG8sIF9hbW91bnQpOwogICAgVHJhbnNmZXIoMHgwLCBfdG8sIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIHN0b3AgbWludGluZyBuZXcgdG9rZW5zLgogICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsLgogICAqLwogIGZ1bmN0aW9uIGZpbmlzaE1pbnRpbmcoKSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIG1pbnRpbmdGaW5pc2hlZCA9IHRydWU7CiAgICBNaW50RmluaXNoZWQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKLyoqCiAqIEB0aXRsZSBMaW1pdGVkVHJhbnNmZXJUb2tlbgogKiBAZGV2IExpbWl0ZWRUcmFuc2ZlclRva2VuIGRlZmluZXMgdGhlIGdlbmVyaWMgaW50ZXJmYWNlIGFuZCB0aGUgaW1wbGVtZW50YXRpb24gdG8gbGltaXQgdG9rZW4KICogdHJhbnNmZXJhYmlsaXR5IGZvciBkaWZmZXJlbnQgZXZlbnRzLiBJdCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGFzIGEgYmFzZSBjbGFzcyBmb3Igb3RoZXIgdG9rZW4KICogY29udHJhY3RzLgogKiBMaW1pdGVkVHJhbnNmZXJUb2tlbiBoYXMgYmVlbiBkZXNpZ25lZCB0byBhbGxvdyBmb3IgZGlmZmVyZW50IGxpbWl0aW5nIGZhY3RvcnMsCiAqIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlY3Vyc2l2ZWx5IGNhbGxpbmcgc3VwZXIudHJhbnNmZXJhYmxlVG9rZW5zKCkgdW50aWwgdGhlIGJhc2UgY2xhc3MgaXMKICogaGl0LiBGb3IgZXhhbXBsZToKICogICAgIGZ1bmN0aW9uIHRyYW5zZmVyYWJsZVRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDY0IHRpbWUpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAqICAgICAgIHJldHVybiBtaW4yNTYodW5sb2NrZWRUb2tlbnMsIHN1cGVyLnRyYW5zZmVyYWJsZVRva2Vucyhob2xkZXIsIHRpbWUpKTsKICogICAgIH0KICogQSB3b3JraW5nIGV4YW1wbGUgaXMgVmVzdGVkVG9rZW4uc29sOgogKiBodHRwczovL2dpdGh1Yi5jb20vT3BlblplcHBlbGluL3plcHBlbGluLXNvbGlkaXR5L2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy90b2tlbi9WZXN0ZWRUb2tlbi5zb2wKICovCgpjb250cmFjdCBMaW1pdGVkVHJhbnNmZXJUb2tlbiBpcyBFUkMyMCB7CgogIC8qKgogICAqIEBkZXYgQ2hlY2tzIHdoZXRoZXIgaXQgY2FuIHRyYW5zZmVyIG9yIG90aGVyd2lzZSB0aHJvd3MuCiAgICovCiAgbW9kaWZpZXIgY2FuVHJhbnNmZXIoYWRkcmVzcyBfc2VuZGVyLCB1aW50MjU2IF92YWx1ZSkgewogICByZXF1aXJlKF92YWx1ZSA8PSB0cmFuc2ZlcmFibGVUb2tlbnMoX3NlbmRlciwgdWludDY0KG5vdykpKTsKICAgXzsKICB9CgogIC8qKgogICAqIEBkZXYgQ2hlY2tzIG1vZGlmaWVyIGFuZCBhbGxvd3MgdHJhbnNmZXIgaWYgdG9rZW5zIGFyZSBub3QgbG9ja2VkLgogICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIHRva2Vucy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgY2FuVHJhbnNmZXIobXNnLnNlbmRlciwgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICogQGRldiBDaGVja3MgbW9kaWZpZXIgYW5kIGFsbG93cyB0cmFuc2ZlciBpZiB0b2tlbnMgYXJlIG5vdCBsb2NrZWQuCiAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHNlbmQgdGhlIHRva2Vucy4KICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIHRva2Vucy4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBjYW5UcmFuc2ZlcihfZnJvbSwgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBEZWZhdWx0IHRyYW5zZmVyYWJsZSB0b2tlbnMgZnVuY3Rpb24gcmV0dXJucyBhbGwgdG9rZW5zIGZvciBhIGhvbGRlciAobm8gbGltaXQpLgogICAqIEBkZXYgT3ZlcndyaXRpbmcgdHJhbnNmZXJhYmxlVG9rZW5zKGFkZHJlc3MgaG9sZGVyLCB1aW50NjQgdGltZSkgaXMgdGhlIHdheSB0byBwcm92aWRlIHRoZQogICAqIHNwZWNpZmljIGxvZ2ljIGZvciBsaW1pdGluZyB0b2tlbiB0cmFuc2ZlcmFiaWxpdHkgZm9yIGEgaG9sZGVyIG92ZXIgdGltZS4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcmFibGVUb2tlbnMoYWRkcmVzcyBob2xkZXIsIHVpbnQ2NCB0aW1lKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJhbGFuY2VPZihob2xkZXIpOwogIH0KfQoKCi8qKgogKiBAdGl0bGUgQ3Jvd2RzYWxlCiAqIEBkZXYgQ3Jvd2RzYWxlIGlzIGEgYmFzZSBjb250cmFjdCBmb3IgbWFuYWdpbmcgYSB0b2tlbiBjcm93ZHNhbGUuCiAqIENyb3dkc2FsZXMgaGF2ZSBhIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcywgd2hlcmUgaW52ZXN0b3JzIGNhbiBtYWtlCiAqIHRva2VuIHB1cmNoYXNlcyBhbmQgdGhlIGNyb3dkc2FsZSB3aWxsIGFzc2lnbiB0aGVtIHRva2VucyBiYXNlZAogKiBvbiBhIHRva2VuIHBlciBFVEggcmF0ZS4gRnVuZHMgY29sbGVjdGVkIGFyZSBmb3J3YXJkZWQgdG8gYSB3YWxsZXQKICogYXMgdGhleSBhcnJpdmUuCiAqLwpjb250cmFjdCBDcm93ZHNhbGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogIE1pbnRhYmxlVG9rZW4gcHVibGljIHRva2VuOwoKICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZTsKICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAvLyBhZGRyZXNzIHdoZXJlIGZ1bmRzIGFyZSBjb2xsZWN0ZWQKICBhZGRyZXNzIHB1YmxpYyB3YWxsZXQ7CgogIC8vIGhvdyBtYW55IHRva2VuIHVuaXRzIGEgYnV5ZXIgZ2V0cyBwZXIgd2VpCiAgdWludDI1NiBwdWJsaWMgcmF0ZTsKCiAgLy8gYW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICB1aW50MjU2IHB1YmxpYyB3ZWlSYWlzZWQ7CgogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSwgdWludDI1NiBfcmF0ZSwgYWRkcmVzcyBfd2FsbGV0KSB7CiAgICByZXF1aXJlKF9zdGFydFRpbWUgPj0gbm93KTsKICAgIHJlcXVpcmUoX2VuZFRpbWUgPj0gX3N0YXJ0VGltZSk7CiAgICByZXF1aXJlKF9yYXRlID4gMCk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKCiAgICB0b2tlbiA9IGNyZWF0ZVRva2VuQ29udHJhY3QoKTsKICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7CiAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICByYXRlID0gX3JhdGU7CiAgICB3YWxsZXQgPSBfd2FsbGV0OwogIH0KCiAgLy8gY3JlYXRlcyB0aGUgdG9rZW4gdG8gYmUgc29sZC4KICAvLyBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBoYXZlIGNyb3dkc2FsZSBvZiBhIHNwZWNpZmljIG1pbnRhYmxlIHRva2VuLgogIGZ1bmN0aW9uIGNyZWF0ZVRva2VuQ29udHJhY3QoKSBpbnRlcm5hbCByZXR1cm5zIChNaW50YWJsZVRva2VuKSB7CiAgICByZXR1cm4gbmV3IE1pbnRhYmxlVG9rZW4oKTsKICB9CgoKICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgIC8vIGNhbGN1bGF0ZSB0b2tlbiBhbW91bnQgdG8gYmUgY3JlYXRlZAogICAgdWludDI1NiB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgIHRva2VuLm1pbnQoYmVuZWZpY2lhcnksIHRva2Vucyk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIGJlbmVmaWNpYXJ5LCB3ZWlBbW91bnQsIHRva2Vucyk7CgogICAgZm9yd2FyZEZ1bmRzKCk7CiAgfQoKICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIHdhbGxldC50cmFuc2Zlcihtc2cudmFsdWUpOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydFRpbWUgJiYgbm93IDw9IGVuZFRpbWU7CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2U7CiAgfQoKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBub3cgPiBlbmRUaW1lOwogIH0KCgp9CgovKioKICogQHRpdGxlIENhcHBlZENyb3dkc2FsZQogKiBAZGV2IEV4dGVuc2lvbiBvZiBDcm93ZHNhbGUgd2l0aCBhIG1heCBhbW91bnQgb2YgZnVuZHMgcmFpc2VkCiAqLwpjb250cmFjdCBDYXBwZWRDcm93ZHNhbGUgaXMgQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgdWludDI1NiBwdWJsaWMgY2FwOwoKICBmdW5jdGlvbiBDYXBwZWRDcm93ZHNhbGUodWludDI1NiBfY2FwKSB7CiAgICByZXF1aXJlKF9jYXAgPiAwKTsKICAgIGNhcCA9IF9jYXA7CiAgfQoKICAvLyBvdmVycmlkaW5nIENyb3dkc2FsZSN2YWxpZFB1cmNoYXNlIHRvIGFkZCBleHRyYSBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgaW52ZXN0b3JzIGNhbiBidXkgYXQgdGhlIG1vbWVudAogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpbkNhcCA9IHdlaVJhaXNlZC5hZGQobXNnLnZhbHVlKSA8PSBjYXA7CiAgICByZXR1cm4gc3VwZXIudmFsaWRQdXJjaGFzZSgpICYmIHdpdGhpbkNhcDsKICB9CgogIC8vIG92ZXJyaWRpbmcgQ3Jvd2RzYWxlI2hhc0VuZGVkIHRvIGFkZCBjYXAgbG9naWMKICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogIGZ1bmN0aW9uIGhhc0VuZGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIGJvb2wgY2FwUmVhY2hlZCA9IHdlaVJhaXNlZCA+PSBjYXA7CiAgICByZXR1cm4gc3VwZXIuaGFzRW5kZWQoKSB8fCBjYXBSZWFjaGVkOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgRmluYWxpemFibGVDcm93ZHNhbGUKICogQGRldiBFeHRlbnNpb24gb2YgQ3Jvd2RzYWxlIHdoZXJlIGFuIG93bmVyIGNhbiBkbyBleHRyYSB3b3JrCiAqIGFmdGVyIGZpbmlzaGluZy4KICovCmNvbnRyYWN0IEZpbmFsaXphYmxlQ3Jvd2RzYWxlIGlzIENyb3dkc2FsZSwgT3duYWJsZSB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIGJvb2wgcHVibGljIGlzRmluYWxpemVkID0gZmFsc2U7CgogIGV2ZW50IEZpbmFsaXplZCgpOwoKICAvKioKICAgKiBAZGV2IE11c3QgYmUgY2FsbGVkIGFmdGVyIGNyb3dkc2FsZSBlbmRzLCB0byBkbyBzb21lIGV4dHJhIGZpbmFsaXphdGlvbgogICAqIHdvcmsuIENhbGxzIHRoZSBjb250cmFjdCdzIGZpbmFsaXphdGlvbiBmdW5jdGlvbi4KICAgKi8KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZSghaXNGaW5hbGl6ZWQpOwogICAgcmVxdWlyZShoYXNFbmRlZCgpKTsKCiAgICBmaW5hbGl6YXRpb24oKTsKICAgIEZpbmFsaXplZCgpOwoKICAgIGlzRmluYWxpemVkID0gdHJ1ZTsKICB9CgogIC8qKgogICAqIEBkZXYgQ2FuIGJlIG92ZXJyaWRkZW4gdG8gYWRkIGZpbmFsaXphdGlvbiBsb2dpYy4gVGhlIG92ZXJyaWRpbmcgZnVuY3Rpb24KICAgKiBzaG91bGQgY2FsbCBzdXBlci5maW5hbGl6YXRpb24oKSB0byBlbnN1cmUgdGhlIGNoYWluIG9mIGZpbmFsaXphdGlvbiBpcwogICAqIGV4ZWN1dGVkIGVudGlyZWx5LgogICAqLwogIGZ1bmN0aW9uIGZpbmFsaXphdGlvbigpIGludGVybmFsIHsKICB9Cn0KCgoKY29udHJhY3QgVGllcnMgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICB1aW50MjU2IHB1YmxpYyBjcENhcCA9IDQ1MDAwIGV0aGVyOwogIHVpbnQyNTYgcHVibGljIHByZXNhbGVXZWlTb2xkID0gMTgwMDAgZXRoZXI7CgogIHVpbnQyNTZbNl0gcHVibGljIHRpZXJBbW91bnRDYXBzID0gIFsgcHJlc2FsZVdlaVNvbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHByZXNhbGVXZWlTb2xkICsgNTAwMCBldGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcHJlc2FsZVdlaVNvbGQgKyAxMDAwMCBldGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcHJlc2FsZVdlaVNvbGQgKyAxNTAwMCBldGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcHJlc2FsZVdlaVNvbGQgKyAyMTAwMCBldGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY3BDYXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogIHVpbnQyNTZbNl0gcHVibGljIHRpZXJSYXRlcyA9IFsgMjAwMCAvLyB0aWVyUmF0ZXNbMF0gc2hvdWxkIG5ldmVyIGJlIHVzZWQsIGJ1dCBpdCBpcyBhY2N1cmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgMTUwMCAvLyBUb2tlbnMgYXJlIHB1cmNoYXNlZCBhdCBhIHJhdGUgb2YgMTA1LTE1MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgMTM1MCAvLyBwZXIgZGVjaUV0aCwgZGVwZW5kaW5nIG9uIHB1cmNoYXNlIHRpZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAxMjUwIC8vIHRpZXJSYXRlc1tpXSBpcyB0aGUgcHVyY2hhc2UgcmF0ZSBvZiB0aWVyX2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIDExNTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIDEwNTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwoKICAgIGZ1bmN0aW9uIHRpZXJJbmRleEJ5V2VpQW1vdW50KHVpbnQyNTYgd2VpTGV2ZWwpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZSh3ZWlMZXZlbCA8PSBjcENhcCk7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgdGllckFtb3VudENhcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHdlaUxldmVsIDw9IHRpZXJBbW91bnRDYXBzW2ldKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgQ2FsY3VsYXRlcyBob3cgbWFueSB0b2tlbnMgYSBnaXZlbiBhbW91bnQgb2Ygd2VpIGNhbiBidXkgYXQKICAgICAqIGEgcGFydGljdWxhciBsZXZlbCBvZiB3ZWlSYWlzZWQuIFRha2VzIGludG8gYWNjb3VudCB0aWVycyBvZiBwdXJjaGFzZQogICAgICogYm9udXMKICAgICAqLwogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQyNTYgX2Ftb3VudFdlaSwgdWludDI1NiBfd2VpUmFpc2VkKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgY3VycmVudFRpZXIgPSB0aWVySW5kZXhCeVdlaUFtb3VudChfd2VpUmFpc2VkKTsKICAgICAgICB1aW50MjU2IHN0YXJ0V2VpTGV2ZWwgPSBfd2VpUmFpc2VkOwogICAgICAgIHVpbnQyNTYgZW5kV2VpTGV2ZWwgPSBfYW1vdW50V2VpLmFkZChfd2VpUmFpc2VkKTsKICAgICAgICB1aW50MjU2IHRva2VucyA9IDA7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSBjdXJyZW50VGllcjsgaSA8IHRpZXJBbW91bnRDYXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlbmRXZWlMZXZlbCA8PSB0aWVyQW1vdW50Q2Fwc1tpXSkgewogICAgICAgICAgICAgICAgdG9rZW5zID0gdG9rZW5zLmFkZCgoZW5kV2VpTGV2ZWwuc3ViKHN0YXJ0V2VpTGV2ZWwpKS5tdWwodGllclJhdGVzW2ldKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRva2VucyA9IHRva2Vucy5hZGQoKHRpZXJBbW91bnRDYXBzW2ldLnN1YihzdGFydFdlaUxldmVsKSkubXVsKHRpZXJSYXRlc1tpXSkpOwogICAgICAgICAgICAgICAgc3RhcnRXZWlMZXZlbCA9IHRpZXJBbW91bnRDYXBzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbnM7CiAgICB9Cgp9Cgpjb250cmFjdCBDUFRva2VuIGlzIE1pbnRhYmxlVG9rZW4sIExpbWl0ZWRUcmFuc2ZlclRva2VuIHsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJCTE9DS01BU09OIENSRURJVCBQUk9UT0NPTCBUT0tFTiI7CiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJCQ1BUIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgYm9vbCBwdWJsaWMgc2FsZU92ZXIgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiBDUFRva2VuKCkgewogICAgfQoKICAgIGZ1bmN0aW9uIGVuZFNhbGUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlICghc2FsZU92ZXIpOwogICAgICAgIHNhbGVPdmVyID0gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgcmV0dXJucyBhbGwgdXNlcidzIHRva2VucyBpZiB0aW1lID49IHJlbGVhc2VUaW1lCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyYWJsZVRva2VucyhhZGRyZXNzIGhvbGRlciwgdWludDY0IHRpbWUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKHNhbGVPdmVyKQogICAgICAgICAgICByZXR1cm4gYmFsYW5jZU9mKGhvbGRlcik7CiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gMDsKICAgIH0KCn0KCgoKY29udHJhY3QgRFBJY29XaGl0ZWxpc3QgewogICAgYWRkcmVzcyBwdWJsaWMgYWRtaW47CiAgICBib29sIHB1YmxpYyBpc09uOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgd2hpdGVsaXN0OwogICAgYWRkcmVzc1tdIHB1YmxpYyB1c2VyczsKCiAgICBtb2RpZmllciBzaWduVXBPcGVuKCkgewogICAgICAgIGlmICghaXNPbikgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0FkbWluKCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGFkbWluKSByZXZlcnQoKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG5ld0FkZHIoKSB7CiAgICAgICAgaWYgKHdoaXRlbGlzdFttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBEUEljb1doaXRlbGlzdCgpIHsKICAgICAgICBhZG1pbiA9IG1zZy5zZW5kZXI7CiAgICAgICAgaXNPbiA9IGZhbHNlOwogICAgfQoKICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICBzaWduVXAoKTsKICAgIH0KCiAgICAvLyBQdWJsaWMgZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gc2V0U2lnblVwT25PZmYoYm9vbCBzdGF0ZSkgcHVibGljIGlzQWRtaW4gewogICAgICAgIGlzT24gPSBzdGF0ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzaWduVXAoKSBwdWJsaWMgc2lnblVwT3BlbiBuZXdBZGRyIHsKICAgICAgICB3aGl0ZWxpc3RbbXNnLnNlbmRlcl0gPSB0cnVlOwogICAgICAgIHVzZXJzLnB1c2gobXNnLnNlbmRlcik7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0QWRtaW4oKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBhZG1pbjsKICAgIH0KCiAgICBmdW5jdGlvbiBzaWduVXBPbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGlzT247CiAgICB9CgogICAgZnVuY3Rpb24gaXNTaWduZWRVcChhZGRyZXNzIGFkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHdoaXRlbGlzdFthZGRyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRVc2VycygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzW10pIHsKICAgICAgICByZXR1cm4gdXNlcnM7CiAgICB9CgogICAgZnVuY3Rpb24gbnVtVXNlcnMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiB1c2Vycy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gdXNlckF0SW5kZXgodWludCBpZHgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICAgICAgcmV0dXJuIHVzZXJzW2lkeF07CiAgICB9Cn0KCmNvbnRyYWN0IENQQ3Jvd2RzYWxlIGlzIENhcHBlZENyb3dkc2FsZSwgRmluYWxpemFibGVDcm93ZHNhbGUsIFBhdXNhYmxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIERQSWNvV2hpdGVsaXN0IHByaXZhdGUgYXc7CiAgICBUaWVycyBwcml2YXRlIGF0OwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwcml2YXRlIGhhc1B1cmNoYXNlZDsgLy8gaGFzIHdoaXRlbGlzdCBhZGRyZXNzIHB1cmNoYXNlZCBhbHJlYWR5CiAgICB1aW50MjU2IHB1YmxpYyB3aGl0ZWxpc3RFbmRUaW1lOwogICAgdWludDI1NiBwdWJsaWMgbWF4V2hpdGVsaXN0UHVyY2hhc2VXZWk7CiAgICB1aW50MjU2IHB1YmxpYyBvcGVuV2hpdGVsaXN0RW5kVGltZTsKCiAgICBmdW5jdGlvbiBDUENyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIHVpbnQyNTYgX3doaXRlbGlzdEVuZFRpbWUsIHVpbnQyNTYgX29wZW5XaGl0ZWxpc3RFbmRUaW1lLCBhZGRyZXNzIF93YWxsZXQsIGFkZHJlc3MgX3RpZXJzQ29udHJhY3QsIGFkZHJlc3MgX3doaXRlbGlzdENvbnRyYWN0LCBhZGRyZXNzIF9haXJkcm9wV2FsbGV0LCBhZGRyZXNzIF9hZHZpc29yV2FsbGV0LCBhZGRyZXNzIF9zdGFraW5nV2FsbGV0LCBhZGRyZXNzIF9wcml2YXRlU2FsZVdhbGxldCkKICAgICAgICBDYXBwZWRDcm93ZHNhbGUoNDUwMDAgZXRoZXIpIC8vIGNyb3dkc2FsZSBjYXBwZWQgYXQgNDUwMDAgZXRoZXIKICAgICAgICBGaW5hbGl6YWJsZUNyb3dkc2FsZSgpCiAgICAgICAgQ3Jvd2RzYWxlKF9zdGFydFRpbWUsIF9lbmRUaW1lLCAxLCBfd2FsbGV0KSAgLy8gcmF0ZSA9IDEgaXMgYSBkdW1teSB2YWx1ZTsgd2UgdXNlIHRpZXJzIGluc3RlYWQKICAgIHsKICAgICAgICB0b2tlbi5taW50KF93YWxsZXQsIDIzMjI2OTM0ICogKDEwICoqIDE4KSk7CiAgICAgICAgdG9rZW4ubWludChfYWlyZHJvcFdhbGxldCwgNTgwNzkzMyAqICgxMCAqKiAxOCkpOwogICAgICAgIHRva2VuLm1pbnQoX2Fkdmlzb3JXYWxsZXQsIDU4MDc5MzMgKiAoMTAgKiogMTgpKTsKICAgICAgICB0b2tlbi5taW50KF9zdGFraW5nV2FsbGV0LCAxMTYxNTg2NyAqICgxMCAqKiAxOCkpOwogICAgICAgIHRva2VuLm1pbnQoX3ByaXZhdGVTYWxlV2FsbGV0LCAzNjAwMDAwMCAqICgxMCAqKiAxOCkpOwoKICAgICAgICBhdyA9IERQSWNvV2hpdGVsaXN0KF93aGl0ZWxpc3RDb250cmFjdCk7CiAgICAgICAgcmVxdWlyZSAoYXcubnVtVXNlcnMoKSA+IDApOwogICAgICAgIGF0ID0gVGllcnMoX3RpZXJzQ29udHJhY3QpOwogICAgICAgIHdoaXRlbGlzdEVuZFRpbWUgPSBfd2hpdGVsaXN0RW5kVGltZTsKICAgICAgICBvcGVuV2hpdGVsaXN0RW5kVGltZSA9IF9vcGVuV2hpdGVsaXN0RW5kVGltZTsKICAgICAgICB3ZWlSYWlzZWQgPSAxODAwMCBldGhlcjsgLy8gMThLIGV0aGVyIHdhcyBzb2xkIGR1cmluZyBwcmVzYWxlCiAgICAgICAgbWF4V2hpdGVsaXN0UHVyY2hhc2VXZWkgPSAoY2FwLnN1Yih3ZWlSYWlzZWQpKS5kaXYoYXcubnVtVXNlcnMoKSk7CiAgICB9CgogICAgLy8gUHVibGljIGZ1bmN0aW9ucwogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwoKICAgICAgICByZXF1aXJlKGJlbmVmaWNpYXJ5ICE9IDB4MCk7CiAgICAgICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgICAgIHJlcXVpcmUoIWlzV2hpdGVsaXN0UGVyaW9kKCkKICAgICAgICAgICAgIHx8IHdoaXRlbGlzdFZhbGlkUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCkpOwogICAgICAgIHJlcXVpcmUoIWlzT3BlbldoaXRlbGlzdFBlcmlvZCgpCiAgICAgICAgICAgICB8fCBvcGVuV2hpdGVsaXN0VmFsaWRQdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSkpOwoKICAgICAgICBoYXNQdXJjaGFzZWRbYmVuZWZpY2lhcnldID0gdHJ1ZTsKCiAgICAgICAgdWludDI1NiB0b2tlbnMgPSBhdC5jYWxjdWxhdGVUb2tlbnMod2VpQW1vdW50LCB3ZWlSYWlzZWQpOwogICAgICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKICAgICAgICB0b2tlbi5taW50KGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgICAgICBmb3J3YXJkRnVuZHMoKTsKICAgIH0KCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbnMKCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KCkgaW50ZXJuYWwgcmV0dXJucyAoTWludGFibGVUb2tlbikgewogICAgICAgIHJldHVybiBuZXcgQ1BUb2tlbigpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBPdmVycmlkZW4gdG8gYWRkIGZpbmFsaXphdGlvbiBsb2dpYy4KICAgICAqIE1pbnRzIHJlbWFpbmluZyB0b2tlbnMgdG8gZGV2IHdhbGxldAogICAgICovCiAgICBmdW5jdGlvbiBmaW5hbGl6YXRpb24oKSBpbnRlcm5hbCB7CiAgICAgICAgdWludDI1NiByZW1haW5pbmdXZWkgPSBjYXAuc3ViKHdlaVJhaXNlZCk7CiAgICAgICAgaWYgKHJlbWFpbmluZ1dlaSA+IDApIHsKICAgICAgICAgICAgdWludDI1NiByZW1haW5pbmdEZXZUb2tlbnMgPSBhdC5jYWxjdWxhdGVUb2tlbnMocmVtYWluaW5nV2VpLCB3ZWlSYWlzZWQpOwogICAgICAgICAgICB0b2tlbi5taW50KHdhbGxldCwgcmVtYWluaW5nRGV2VG9rZW5zKTsKICAgICAgICB9CiAgICAgICAgQ1BUb2tlbih0b2tlbikuZW5kU2FsZSgpOwogICAgICAgIHRva2VuLmZpbmlzaE1pbnRpbmcoKTsKICAgICAgICBzdXBlci5maW5hbGl6YXRpb24oKTsKICAgIH0KCiAgICAvLyBQcml2YXRlIGZ1bmN0aW9ucwoKICAgIC8vIGNhbid0IG92ZXJyaWRlIGB2YWxpZFB1cmNoYXNlYCBiZWNhdXNlIG5lZWQgdG8gcGFzcyBhZGRpdGlvbmFsIHZhbHVlcwogICAgZnVuY3Rpb24gd2hpdGVsaXN0VmFsaWRQdXJjaGFzZShhZGRyZXNzIGJ1eWVyLCBhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50MjU2IGFtb3VudFdlaSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBiZW5lZmljaWFyeVB1cmNoYXNlZFByZXZpb3VzbHkgPSBoYXNQdXJjaGFzZWRbYmVuZWZpY2lhcnldOwogICAgICAgIGJvb2wgYmVsb3dNYXhXaGl0ZWxpc3RQdXJjaGFzZSA9IGFtb3VudFdlaSA8PSBtYXhXaGl0ZWxpc3RQdXJjaGFzZVdlaTsKICAgICAgICByZXR1cm4gKG9wZW5XaGl0ZWxpc3RWYWxpZFB1cmNoYXNlKGJ1eWVyLCBiZW5lZmljaWFyeSkKICAgICAgICAgICAgICAgICYmICFiZW5lZmljaWFyeVB1cmNoYXNlZFByZXZpb3VzbHkKICAgICAgICAgICAgICAgICYmIGJlbG93TWF4V2hpdGVsaXN0UHVyY2hhc2UpOwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiBgbm93YCBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgd2hpdGVsaXN0IHBlcmlvZAogICAgZnVuY3Rpb24gaXNXaGl0ZWxpc3RQZXJpb2QoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKG5vdyA8PSB3aGl0ZWxpc3RFbmRUaW1lICYmIG5vdyA+PSBzdGFydFRpbWUpOwogICAgfQoKICAgIC8vIGNhbid0IG92ZXJyaWRlIGB2YWxpZFB1cmNoYXNlYCBiZWNhdXNlIG5lZWQgdG8gcGFzcyBhZGRpdGlvbmFsIHZhbHVlcwogICAgZnVuY3Rpb24gb3BlbldoaXRlbGlzdFZhbGlkUHVyY2hhc2UoYWRkcmVzcyBidXllciwgYWRkcmVzcyBiZW5lZmljaWFyeSkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICAgICAgYm9vbCBidXllcklzQmVuZWZpY2lhcnkgPSBidXllciA9PSBiZW5lZmljaWFyeTsKICAgICAgICBib29sIHNpZ25lZHVwID0gYXcuaXNTaWduZWRVcChiZW5lZmljaWFyeSk7CiAgICAgICAgcmV0dXJuIChidXllcklzQmVuZWZpY2lhcnkgJiYgc2lnbmVkdXApOwogICAgfQoKICAgIC8vIEByZXR1cm4gdHJ1ZSBpZiBgbm93YCBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgb3BlbiB3aGl0ZWxpc3QgcGVyaW9kCiAgICBmdW5jdGlvbiBpc09wZW5XaGl0ZWxpc3RQZXJpb2QoKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIGNhcHBlZFdoaXRlbGlzdE92ZXIgPSBub3cgPiB3aGl0ZWxpc3RFbmRUaW1lOwogICAgICAgIGJvb2wgb3BlbldoaXRlbGlzdFBlcmlvZCA9IG5vdyA8PSBvcGVuV2hpdGVsaXN0RW5kVGltZTsKICAgICAgICByZXR1cm4gY2FwcGVkV2hpdGVsaXN0T3ZlciAmJiBvcGVuV2hpdGVsaXN0UGVyaW9kOwogICAgfQoKfQ=='.
	

]
