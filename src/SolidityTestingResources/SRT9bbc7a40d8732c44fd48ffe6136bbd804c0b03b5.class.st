Class {
	#name : #SRT9bbc7a40d8732c44fd48ffe6136bbd804c0b03b5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9bbc7a40d8732c44fd48ffe6136bbd804c0b03b5 >> base64 [
	^ ''.
	

]
