Class {
	#name : #SRTd3231a1fc051f436131c70153a678e342bfc8088,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd3231a1fc051f436131c70153a678e342bfc8088 >> base64 [
	^ 'LyoKT2ZmaWNpYWwgU29jaWFsIEFjdGl2aXR5IFRva2VuIChTQVQpIG9mIFNwaGVyZSBTb2NpYWwKaHR0cHM6Ly9zcGhlcmUuc29jaWFsClNwaGVyZSBTb2NpYWwgTFRECiovCgpwcmFnbWEgc29saWRpdHkgXjAuNC4xOTsKCi8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgaWYgKGEgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgdWludDI1NiBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCBFUkMyMCB7CgogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKXB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgdG90YWxfU3VwcGx5KTsKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobylwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpcHVibGljIHZpZXcgcmV0dXJucyAodWludCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKXB1YmxpYyByZXR1cm5zIChib29sIG9rKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKXB1YmxpYyByZXR1cm5zIChib29sIG9rKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpcHVibGljIHJldHVybnMgKGJvb2wgb2spOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7Cgp9Cgpjb250cmFjdCBGaWF0Q29udHJhY3QKewogICAgZnVuY3Rpb24gVVNEKHVpbnQgX2lkKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKfQoKY29udHJhY3QgVGVzdEZpYXRDb250cmFjdAp7CiAgICBmdW5jdGlvbiBVU0QodWludCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICByZXR1cm4gMTIzMDUwNDE5OTAwMDA7CiAgICB9Cn0KCgpjb250cmFjdCBTb2NpYWxBY3Rpdml0eVRva2VuIGlzIEVSQzIwCnsgCiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBGaWF0Q29udHJhY3QgcHJpY2UgPSBGaWF0Q29udHJhY3QobmV3IFRlc3RGaWF0Q29udHJhY3QoKSk7IC8vRmlhdENvbnRyYWN0KDB4ODA1NWQwNTA0NjY2ZTJCNjk0MkJlQjhENjAxNGM5NjQ2NThDYTU5MSk7IC8vIE1BSU5ORVQgQUREUkVTUwoKICAgIC8vIE5hbWUgb2YgdGhlIHRva2VuCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiU29jaWFsIEFjdGl2aXR5IFRva2VuIjsKICAgIC8vIFN5bWJvbCBvZiB0b2tlbgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiU0FUIjsKICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7CiAgICB1aW50IHB1YmxpYyBfdG90YWxzdXBwbHkgPSAxMDAwMDAwMDAwICogKHVpbnQyNTYoMTApICoqIGRlY2ltYWxzKTsgLy8gMSBiaWxsaW9uIFNBVAogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBib29sIHN0b3BwZWQgPSBmYWxzZTsKICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0ZGF0ZTsKICAgIHVpbnQyNTYgaWNvX2ZpcnN0OwogICAgdWludDI1NiBpY29fc2Vjb25kOwogICAgdWludDI1NiBpY29fdGhpcmQ7CiAgICB1aW50MjU2IGljb19mb3VydGg7CiAgICBhZGRyZXNzIGNlbnRyYWxfYWNjb3VudDsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7CgogICAgCiAgICBlbnVtIFN0YWdlcyB7CiAgICAgICAgTk9UU1RBUlRFRCwKICAgICAgICBJQ08sCiAgICAgICAgUEFVU0VELAogICAgICAgIEVOREVECiAgICB9CgogICAgU3RhZ2VzIHB1YmxpYyBzdGFnZTsKICAgIAogICAgbW9kaWZpZXIgYXRTdGFnZShTdGFnZXMgX3N0YWdlKSB7CiAgICAgICAgaWYgKHN0YWdlICE9IF9zdGFnZSkKICAgICAgICAgICAgLy8gQ29udHJhY3Qgbm90IGluIGV4cGVjdGVkIHN0YXRlCiAgICAgICAgICAgIHJldmVydCgpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5Y2VudHJhbEFjY291bnQgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZW50cmFsX2FjY291bnQpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gU29jaWFsQWN0aXZpdHlUb2tlbigpIHB1YmxpYwogICAgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSAzNTAwMDAwMDAgKiAodWludDI1NigxMCkgKiogZGVjaW1hbHMpOwogICAgICAgIGJhbGFuY2VzW2FkZHJlc3ModGhpcyldID0gNjUwMDAwMDAwICogKHVpbnQyNTYoMTApICoqIGRlY2ltYWxzKTsKICAgICAgICBzdGFnZSA9IFN0YWdlcy5OT1RTVEFSVEVEOwogICAgICAgIFRyYW5zZmVyKDAsIG93bmVyLCBiYWxhbmNlc1tvd25lcl0pOwogICAgICAgIFRyYW5zZmVyKDAsIGFkZHJlc3ModGhpcyksIGJhbGFuY2VzW2FkZHJlc3ModGhpcyldKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgYXRTdGFnZShTdGFnZXMuSUNPKQogICAgewogICAgICAgIHJlcXVpcmUobXNnLnZhbHVlID49IDEgZmlubmV5KTsgLy9mb3Igcm91bmQgdXAgYW5kIHNlY3VyaXR5IG1lYXN1cmVzCiAgICAgICAgcmVxdWlyZSghc3RvcHBlZCAmJiBtc2cuc2VuZGVyICE9IG93bmVyKTsKCiAgICAgICAgdWludDI1NiBldGhDZW50ID0gcHJpY2UuVVNEKDApOyAvL29uZSBVU0QgY2VudCBpbiB3ZWkKICAgICAgICB1aW50MjU2IHRva1ByaWNlID0gZXRoQ2VudC5tdWwoMTQpOyAvLzFTYXQgPSAxNCBVU0QgY2VudAogICAgICAgIAogICAgICAgIHRva1ByaWNlID0gdG9rUHJpY2UuZGl2KDEwICoqIDgpOyAvL2xpbWl0IHRvIDEwIHBsYWNlcwogICAgICAgIHVpbnQyNTYgbm9fb2ZfdG9rZW5zID0gbXNnLnZhbHVlLmRpdih0b2tQcmljZSk7CiAgICAgICAgCiAgICAgICAgdWludDI1NiBib251c190b2tlbiA9IDA7CiAgICAgICAgCiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBib251cyBiYXNlZCBvbiB0aGUgdGltZSBhbmQgdGhlIHB1cmNoYXNlZCBhbW91bnQKICAgICAgICBpZiAobm93IDwgaWNvX2ZpcnN0KQogICAgICAgIHsKICAgICAgICAgICAgaWYgKG5vX29mX3Rva2VucyA+PSAgMjAwMCAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpICYmCiAgICAgICAgICAgICAgICBub19vZl90b2tlbnMgPD0gMTk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDUwKS5kaXYoMTAwKTsgLy8gNTAlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAobm9fb2ZfdG9rZW5zID4gICAxOTk5OSAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpICYmCiAgICAgICAgICAgICAgICAgICAgIG5vX29mX3Rva2VucyA8PSAxNDk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDU1KS5kaXYoMTAwKTsgLy8gNTUlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAobm9fb2ZfdG9rZW5zID4gMTQ5OTk5ICogKHVpbnQyNTYoMTApKipkZWNpbWFscykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJvbnVzX3Rva2VuID0gbm9fb2ZfdG9rZW5zLm11bCg2MCkuZGl2KDEwMCk7IC8vIDYwJSBib251cwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDQ1KS5kaXYoMTAwKTsgLy8gNDUlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobm93ID49IGljb19maXJzdCAmJiBub3cgPCBpY29fc2Vjb25kKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKG5vX29mX3Rva2VucyA+PSAgMjAwMCAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpICYmCiAgICAgICAgICAgICAgICBub19vZl90b2tlbnMgPD0gMTk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDQwKS5kaXYoMTAwKTsgLy8gNDAlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAobm9fb2ZfdG9rZW5zID4gICAxOTk5OSAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpICYmCiAgICAgICAgICAgICAgICAgICAgIG5vX29mX3Rva2VucyA8PSAxNDk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDQ1KS5kaXYoMTAwKTsgLy8gNDUlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAobm9fb2ZfdG9rZW5zID4gIDE0OTk5OSAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBib251c190b2tlbiA9IG5vX29mX3Rva2Vucy5tdWwoNTApLmRpdigxMDApOyAvLyA1MCUgYm9udXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJvbnVzX3Rva2VuID0gbm9fb2ZfdG9rZW5zLm11bCgzNSkuZGl2KDEwMCk7IC8vIDM1JSBib251cwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKG5vdyA+PSBpY29fc2Vjb25kICYmIG5vdyA8IGljb190aGlyZCkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChub19vZl90b2tlbnMgPj0gIDIwMDAgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSAmJgogICAgICAgICAgICAgICAgbm9fb2ZfdG9rZW5zIDw9IDE5OTk5ICogKHVpbnQyNTYoMTApKipkZWNpbWFscykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJvbnVzX3Rva2VuID0gbm9fb2ZfdG9rZW5zLm11bCgzMCkuZGl2KDEwMCk7IC8vIDMwJSBib251cwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKG5vX29mX3Rva2VucyA+ICAgMTk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSAmJgogICAgICAgICAgICAgICAgICAgICBub19vZl90b2tlbnMgPD0gMTQ5OTk5ICogKHVpbnQyNTYoMTApKipkZWNpbWFscykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJvbnVzX3Rva2VuID0gbm9fb2ZfdG9rZW5zLm11bCgzNSkuZGl2KDEwMCk7IC8vIDM1JSBib251cwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKG5vX29mX3Rva2VucyA+ICAxNDk5OTkgKiAodWludDI1NigxMCkqKmRlY2ltYWxzKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDQwKS5kaXYoMTAwKTsgLy8gNDAlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBib251c190b2tlbiA9IG5vX29mX3Rva2Vucy5tdWwoMjUpLmRpdigxMDApOyAvLyAyNSUgYm9udXMKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChub3cgPj0gaWNvX3RoaXJkICYmIG5vdyA8IGljb19mb3VydGgpCiAgICAgICAgewogICAgICAgICAgICBpZiAobm9fb2ZfdG9rZW5zID49ICAyMDAwICogKHVpbnQyNTYoMTApKipkZWNpbWFscykgJiYKICAgICAgICAgICAgICAgIG5vX29mX3Rva2VucyA8PSAxOTk5OSAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBib251c190b2tlbiA9IG5vX29mX3Rva2Vucy5tdWwoMjApLmRpdigxMDApOyAvLyAyMCUgYm9udXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChub19vZl90b2tlbnMgPiAgIDE5OTk5ICogKHVpbnQyNTYoMTApKipkZWNpbWFscykgJiYKICAgICAgICAgICAgICAgICAgICAgbm9fb2ZfdG9rZW5zIDw9IDE0OTk5OSAqICh1aW50MjU2KDEwKSoqZGVjaW1hbHMpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBib251c190b2tlbiA9IG5vX29mX3Rva2Vucy5tdWwoMjUpLmRpdigxMDApOyAvLyAyNSUgYm9udXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChub19vZl90b2tlbnMgPiAgMTQ5OTk5ICogKHVpbnQyNTYoMTApKipkZWNpbWFscykpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJvbnVzX3Rva2VuID0gbm9fb2ZfdG9rZW5zLm11bCgzMCkuZGl2KDEwMCk7IC8vIDMwJSBib251cwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYm9udXNfdG9rZW4gPSBub19vZl90b2tlbnMubXVsKDE1KS5kaXYoMTAwKTsgLy8gMTUlIGJvbnVzCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdWludDI1NiB0b3RhbF90b2tlbiA9IG5vX29mX3Rva2VucyArIGJvbnVzX3Rva2VuOwogICAgICAgIHRoaXMudHJhbnNmZXIobXNnLnNlbmRlciwgdG90YWxfdG9rZW4pOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzdGFydF9JQ08oKSBwdWJsaWMgb25seU93bmVyIGF0U3RhZ2UoU3RhZ2VzLk5PVFNUQVJURUQpIHsKCiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuSUNPOwogICAgICAgIHN0b3BwZWQgPSBmYWxzZTsKICAgICAgICBzdGFydGRhdGUgPSBub3c7CiAgICAgICAgaWNvX2ZpcnN0ID0gbm93ICsgNSBtaW51dGVzOyAvLzE0IGRheXM7CiAgICAgICAgaWNvX3NlY29uZCA9IGljb19maXJzdCArIDUgbWludXRlczsgLy8xNCBkYXlzOwogICAgICAgIGljb190aGlyZCA9IGljb19zZWNvbmQgKyA1IG1pbnV0ZXM7IC8vMTQgZGF5czsKICAgICAgICBpY29fZm91cnRoID0gaWNvX3RoaXJkICsgNSBtaW51dGVzOyAvLzE0IGRheXM7CiAgICAKICAgIH0KICAgIAogICAgLy8gY2FsbGVkIGJ5IHRoZSBvd25lciwgcGF1c2UgSUNPCiAgICBmdW5jdGlvbiBTdG9wSUNPKCkgZXh0ZXJuYWwgb25seU93bmVyIGF0U3RhZ2UoU3RhZ2VzLklDTykgewogICAgCiAgICAgICAgc3RvcHBlZCA9IHRydWU7CiAgICAgICAgc3RhZ2UgPSBTdGFnZXMuUEFVU0VEOwogICAgCiAgICB9CgogICAgLy8gY2FsbGVkIGJ5IHRoZSBvd25lciAsIHJlc3VtZXMgSUNPCiAgICBmdW5jdGlvbiByZWxlYXNlSUNPKCkgZXh0ZXJuYWwgb25seU93bmVyIGF0U3RhZ2UoU3RhZ2VzLlBBVVNFRCkgewogICAgCiAgICAgICAgc3RvcHBlZCA9IGZhbHNlOwogICAgICAgIHN0YWdlID0gU3RhZ2VzLklDTzsKICAgIAogICAgfQogICAgCiAgICBmdW5jdGlvbiBlbmRfSUNPKCkgZXh0ZXJuYWwgb25seU93bmVyIGF0U3RhZ2UoU3RhZ2VzLklDTykgewogICAgCiAgICAgICAgcmVxdWlyZShub3cgPiBpY29fZm91cnRoKTsKICAgICAgICBzdGFnZSA9IFN0YWdlcy5FTkRFRDsKICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfYW1vdW50KSBleHRlcm5hbCBvbmx5T3duZXIKICAgIHsKICAgICAgICByZXF1aXJlKF9hbW91bnQgPD0gYmFsYW5jZXNbYWRkcmVzcyh0aGlzKV0pOwogICAgICAgIAogICAgICAgIF90b3RhbHN1cHBseSA9IF90b3RhbHN1cHBseS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbYWRkcmVzcyh0aGlzKV0gPSBiYWxhbmNlc1thZGRyZXNzKHRoaXMpXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbMHgwXSA9IGJhbGFuY2VzWzB4MF0uYWRkKF9hbW91bnQpOwogICAgICAgIFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIDB4MCwgX2Ftb3VudCk7CiAgICB9CiAgICAgCiAgICBmdW5jdGlvbiBzZXRfY2VudHJhbEFjY291bnQoYWRkcmVzcyBjZW50cmFsX0FjY2NvdW50KSBleHRlcm5hbCBvbmx5T3duZXIgewogICAgCiAgICAgICAgY2VudHJhbF9hY2NvdW50ID0gY2VudHJhbF9BY2Njb3VudDsKICAgIAogICAgfQoKCgogICAgLy8gd2hhdCBpcyB0aGUgdG90YWwgc3VwcGx5IG9mIFNBVAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHRvdGFsX1N1cHBseSkgewogICAgCiAgICAgICAgdG90YWxfU3VwcGx5ID0gX3RvdGFsc3VwcGx5OwogICAgCiAgICB9CiAgICAKICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAKICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsKICAgIAogICAgfQogICAgCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlCiAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzCiAgICAvLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQogICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50IClwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAKICAgICAgICByZXF1aXJlKCBfdG8gIT0gMHgwKTsKICAgIAogICAgICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA9PSAwIHx8IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApOwogICAgICAgIHJlcXVpcmUoIF9zcGVuZGVyICE9IDB4MCk7CiAgICAKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAKICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7CiAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcilwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgCiAgICAgICAgcmVxdWlyZSggX293bmVyICE9IDB4MCAmJiBfc3BlbmRlciAhPTB4MCk7CiAgICAKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgCiAgIH0KCiAgICAvLyBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgCiAgICAgICAgcmVxdWlyZSggX3RvICE9IDB4MCk7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlcmJ5KGFkZHJlc3MgX2Zyb20sYWRkcmVzcyBfdG8sdWludDI1NiBfYW1vdW50KSBleHRlcm5hbCBvbmx5Y2VudHJhbEFjY291bnQgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsKICAgIAogICAgICAgIHJlcXVpcmUoIF90byAhPSAweDApOwogICAgICAgIAogICAgICAgIC8vIE9ubHkgYWxsb3cgdHJhbnNmZXJieSgpIHRvIHRyYW5zZmVyIGZyb20gMHgwIGFuZCB0aGUgSUNPIGFjY291bnQKICAgICAgICByZXF1aXJlKF9mcm9tID09IDB4MCB8fCBfZnJvbSA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICAKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSAoYmFsYW5jZXNbX2Zyb21dKS5zdWIoX2Ftb3VudCk7CiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IChiYWxhbmNlc1tfdG9dKS5hZGQoX2Ftb3VudCk7CiAgICAgICAgaWYgKF9mcm9tID09IDB4MCkKICAgICAgICB7CiAgICAgICAgICAgIF90b3RhbHN1cHBseSA9IF90b3RhbHN1cHBseS5hZGQoX2Ftb3VudCk7CiAgICAgICAgfQogICAgCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvL0luIGNhc2UgdGhlIG93bmVyc2hpcCBuZWVkcyB0byBiZSB0cmFuc2ZlcnJlZAogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcilwdWJsaWMgb25seU93bmVyIHsKCiAgICAgICAgYmFsYW5jZXNbbmV3T3duZXJdID0gYmFsYW5jZXNbbmV3T3duZXJdLmFkZChiYWxhbmNlc1tvd25lcl0pOwogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IDA7CiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIGRyYWluKCkgZXh0ZXJuYWwgb25seU93bmVyIHsKICAgIAogICAgICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgICAKICAgIH0KICAgIAp9'.
	

]
