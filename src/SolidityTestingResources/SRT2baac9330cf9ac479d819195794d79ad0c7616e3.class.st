Class {
	#name : #SRT2baac9330cf9ac479d819195794d79ad0c7616e3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2baac9330cf9ac479d819195794d79ad0c7616e3 >> base64 [
	^ ''.
	

]
