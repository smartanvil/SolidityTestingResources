Class {
	#name : #SRT5d66a6657bad3f4fa26f7546dd297d8393d8b7d7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5d66a6657bad3f4fa26f7546dd297d8393d8b7d7 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7CgovLyBUaGUgTk9URVMgRVJDMjAgVG9rZW4uIFRoZXJlIGlzIGEgZGVsYXkgYmVmb3JlIGFkZHJlc3NlcyB0aGF0IGFyZSBub3QgYWRkZWQgdG8gdGhlICJhY3RpdmVHcm91cCIgY2FuIHRyYW5zZmVyIHRva2Vucy4gCi8vIFRoYXQgZGVsYXkgZW5kcyB3aGVuIGFkbWluIGNhbGxzIHRoZSAiYWN0aXZhdGUoKSIiIGZ1bmN0aW9uLCBvciB3aGVuICJhY3RpdmF0ZURhdGUiIGlzIHJlYWNoZWQuCi8vIE90aGVyd2lzZSBhIGdlbmVyaWMgRVJDMjAgc3RhbmRhcmQgdG9rZW4uCgpjb250cmFjdCBTYWZlTWF0aCB7CgogICAgLyogZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7ICovCiAgICAvKiAgIGlmICghYXNzZXJ0aW9uKSB7ICovCiAgICAvKiAgICAgdGhyb3c7ICovCiAgICAvKiAgIH0gKi8KICAgIC8qIH0gICAgICAvLyBhc3NlcnQgbm8gbG9uZ2VyIG5lZWRlZCBvbmNlIHNvbGlkaXR5IGlzIG9uIDAuNC4xMCAqLwoKICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICsgeTsKICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZVN1YnRyYWN0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KHggPj0geSk7CiAgICAgIHVpbnQyNTYgeiA9IHggLSB5OwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgIHVpbnQyNTYgeiA9IHggKiB5OwogICAgICBhc3NlcnQoKHggPT0gMCl8fCh6L3ggPT0geSkpOwogICAgICByZXR1cm4gejsKICAgIH0KCn0KCi8vIFRoZSBzdGFuZGFyZCBFUkMyMCBUb2tlbiBpbnRlcmZhY2UKY29udHJhY3QgVG9rZW4gewogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLy8gTk9URVMgVG9rZW4gSW1wbGVtZW50YXRpb24gLSB0cmFuc2ZlcnMgYXJlIHByb2hpYml0ZWQgdW5sZXNzIHN3aXRjaGVkIG9uIGJ5IGFkbWluCmNvbnRyYWN0IE5vdGVzIGlzIFRva2VuIHsKCiAgICAvLy8vIENPTlNUQU5UUwoKICAgIC8vIE51bWJlciBvZiBOT1RFUwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgbkZ1bmQgPSA4MCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7CgogICAgLy8gVG9rZW4gTWV0YWRhdGEKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJOT1RFUyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJOVFMiOwogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIxLjAiOwoKICAgIC8vLy8gUFJPUEVSVElFUwoKICAgIGFkZHJlc3MgYWRtaW47CiAgICBib29sIHB1YmxpYyBhY3RpdmF0ZWQgPSBmYWxzZTsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGFjdGl2ZUdyb3VwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogICAgLy8vLyBNT0RJRklFUlMKCiAgICBtb2RpZmllciBhY3RpdmUoKQogICAgewogICAgICByZXF1aXJlKGFjdGl2YXRlZCB8fCBhY3RpdmVHcm91cFttc2cuc2VuZGVyXSk7CiAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgb25seUFkbWluKCkKICAgIHsKICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgICAgXzsKICAgIH0KCiAgICAvLy8vIENPTlNUUlVDVE9SCgogICAgZnVuY3Rpb24gTm90ZXMoYWRkcmVzcyBmdW5kKQogICAgewogICAgICBhZG1pbiA9IG1zZy5zZW5kZXI7CiAgICAgIHRvdGFsU3VwcGx5ID0gbkZ1bmQ7CiAgICAgIGJhbGFuY2VzW2Z1bmRdID0gbkZ1bmQ7ICAgIC8vIERlcG9zaXQgYWxsIHRvIGZ1bmQKICAgICAgYWN0aXZlR3JvdXBbZnVuZF0gPSB0cnVlOyAgLy8gQWxsb3cgdGhlIGZ1bmQgdG8gdHJhbnNmZXIKICAgIH0KCiAgICAvLy8vIEFETUlOIEZVTkNUSU9OUwoKICAgIGZ1bmN0aW9uIGFkZFRvQWN0aXZlR3JvdXAoYWRkcmVzcyBhKSBvbmx5QWRtaW4gewogICAgICBhY3RpdmVHcm91cFthXSA9IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWN0aXZhdGUoKSBvbmx5QWRtaW4gewogICAgICBhY3RpdmF0ZWQgPSB0cnVlOwogICAgfQoKICAgIC8vLy8gVE9LRU4gRlVOQ1RJT05TICAgIAoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgYWN0aXZlIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGFjdGl2ZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgYWN0aXZlIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9Cgp9'.
	

]
