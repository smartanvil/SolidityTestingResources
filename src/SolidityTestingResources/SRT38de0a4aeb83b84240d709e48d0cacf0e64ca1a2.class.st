Class {
	#name : #SRT38de0a4aeb83b84240d709e48d0cacf0e64ca1a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT38de0a4aeb83b84240d709e48d0cacf0e64ca1a2 >> base64 [
	^ ''.
	

]
