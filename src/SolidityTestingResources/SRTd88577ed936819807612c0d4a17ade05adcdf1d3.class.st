Class {
	#name : #SRTd88577ed936819807612c0d4a17ade05adcdf1d3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd88577ed936819807612c0d4a17ade05adcdf1d3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgoKLyoqCiAqIE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MKICovCmxpYnJhcnkgU2FmZU1hdGggewogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgdWludCBjID0gYSAvIGI7CiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsKICAgIGFzc2VydChiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogIH0KCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7CiAgICBpZiAoIWFzc2VydGlvbikgewogICAgICByZXZlcnQoKTsKICAgIH0KICB9Cn0KY29udHJhY3QgWlRSVG9rZW57CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCB2YWwpOwp9Cgpjb250cmFjdCBaVFJUb2tlblNhbGUKewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlT2Y7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBldGhCYWxhbmNlOwogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgICBhZGRyZXNzIFpUUlRva2VuQ29udHJhY3Q7CiAgICB1aW50IHB1YmxpYyBmdW5kaW5nR29hbDsKICAgIHVpbnQgcHVibGljIGZ1bmRpbmdNYXg7CiAgICB1aW50IHB1YmxpYyBhbW91bnRSYWlzZWQ7CiAgICB1aW50IHB1YmxpYyBzdGFydDsKICAgIHVpbnQgcHVibGljIGR1cmF0aW9uOwogICAgdWludCBwdWJsaWMgZGVhZGxpbmU7CiAgICB1aW50IHB1YmxpYyB1bmxvY2tUaW1lOwogICAgdWludCBwdWJsaWMgWlRSX0VUSF9pbml0aWFsX3ByaWNlOwogICAgdWludCBwdWJsaWMgWlRSX0VUSF9leHRyYV9wcmljZTsKICAgIHVpbnQgcHVibGljIHJlbWFpbmluZzsKICAgIAogICAgbW9kaWZpZXIgYWRtaW4geyBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgXzsgfQogICAgbW9kaWZpZXIgYWZ0ZXJVbmxvY2sgeyBpZihub3c+dW5sb2NrVGltZSkgXzt9CiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lIHsgaWYobm93PmRlYWRsaW5lKSBfO30KICAgIAogICAgZnVuY3Rpb24gWlRSVG9rZW5TYWxlKCkKICAgIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgWlRSVG9rZW5Db250cmFjdCA9IDB4MTA3YmM0ODY5NjZlQ2REQWRiMTM2NDYzNzY0YThFYjczMzM3YzRERjsKICAgICAgICBmdW5kaW5nR29hbCA9IDUwMDAgZXRoZXI7Ly9mdW5kcyB3aWxsIGJlIHJldHVybmVkIGlmIHRoaXMgZ29hbCBpcyBub3QgbWV0CiAgICAgICAgZnVuZGluZ01heCA9IDMwMDAwIGV0aGVyOy8vVGhlIG1heCBhbW91bnQgdGhhdCBjYW4gYmUgcmFpc2VkCiAgICAgICAgc3RhcnQgPSAxNTE3NzAyNDAxOy8vYmVnaW5uaW5nIG9mIHRoZSB0b2tlbiBzYWxlCiAgICAgICAgZHVyYXRpb24gPSAzIHdlZWtzOy8vZHVyYXRpb24gb2YgdGhlIHRva2VuIHNhbGUKICAgICAgICBkZWFkbGluZSA9IHN0YXJ0ICsgZHVyYXRpb247Ly9lbmQgb2YgdGhlIHRva2VuIHNhbGUKICAgICAgICB1bmxvY2tUaW1lID0gZGVhZGxpbmUgKyAxNiB3ZWVrczsvL3VubG9jayBmb3Igc2VsZmRlc3RydWN0CiAgICAgICAgWlRSX0VUSF9pbml0aWFsX3ByaWNlID0gNDUwMDA7Ly9pbml0aWFsIHp0ciBwcmljZQogICAgICAgIFpUUl9FVEhfZXh0cmFfcHJpY2UgPSAyMzAwMDsvL3p0ciBwcmljZSBhZnRlciBmdW5kaW5nIGdvYWwgaGFzIGJlZW4gbWV0CiAgICAgICAgcmVtYWluaW5nID0gODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOy8vY291bnRlciBmb3IgcmVtYWluaW5nIHRva2VucwogICAgfQogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSBwdWJsaWMvL29yZGVyIHByb2Nlc3NpbmcgYW5kIGNyZWRpdGluZyB0byBlc2Nyb3cKICAgIHsKICAgICAgICByZXF1aXJlKG5vdz5zdGFydCk7CiAgICAgICAgcmVxdWlyZShub3c8ZGVhZGxpbmUpOwogICAgICAgIHJlcXVpcmUoYW1vdW50UmFpc2VkICsgbXNnLnZhbHVlIDwgZnVuZGluZ01heCk7Ly9mdW5kaW5nIGhhcmQgY2FwIGhhcyBub3QgYmVlbiByZWFjaGVkCiAgICAgICAgdWludCBwdXJjaGFzZSA9IG1zZy52YWx1ZTsKICAgICAgICBldGhCYWxhbmNlW21zZy5zZW5kZXJdID0gZXRoQmFsYW5jZVttc2cuc2VuZGVyXS5hZGQocHVyY2hhc2UpOy8vdHJhY2sgdGhlIGFtb3VudCBvZiBldGggY29udHJpYnV0ZWQgZm9yIHJlZnVuZHMKICAgICAgICBpZihhbW91bnRSYWlzZWQgPCBmdW5kaW5nR29hbCkvL2Z1bmRpbmcgZ29hbCBoYXMgbm90IGJlZW4gbWV0IHlldAogICAgICAgIHsKICAgICAgICAgICAgcHVyY2hhc2UgPSBwdXJjaGFzZS5tdWwoWlRSX0VUSF9pbml0aWFsX3ByaWNlKTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkID0gYW1vdW50UmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uYWRkKHB1cmNoYXNlKTsKICAgICAgICAgICAgcmVtYWluaW5nLnN1YihwdXJjaGFzZSk7CiAgICAgICAgfQogICAgICAgIGVsc2UvL2Z1bmRpbmcgZ29hbCBoYXMgYmVlbiBtZXQsIHNlbGxpbmcgZXh0cmEgdG9rZW5zCiAgICAgICAgewogICAgICAgICAgICBwdXJjaGFzZSA9IHB1cmNoYXNlLm11bChaVFJfRVRIX2V4dHJhX3ByaWNlKTsKICAgICAgICAgICAgYW1vdW50UmFpc2VkID0gYW1vdW50UmFpc2VkLmFkZChtc2cudmFsdWUpOwogICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uYWRkKHB1cmNoYXNlKTsKICAgICAgICAgICAgcmVtYWluaW5nLnN1YihwdXJjaGFzZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jdGlvbiB3aXRoZHJhd0JlbmVmaWNpYXJ5KCkgcHVibGljIGFkbWluIGFmdGVyRGVhZGxpbmUvL3dpdGhkcmF3bCBmb3IgdGhlIFpUcnVzdCBGb3VuZGF0aW9uCiAgICB7CiAgICAgICAgWlRSVG9rZW4gdCA9IFpUUlRva2VuKFpUUlRva2VuQ29udHJhY3QpOwogICAgICAgIHQudHJhbnNmZXIobXNnLnNlbmRlciwgcmVtYWluaW5nKTsKICAgICAgICByZXF1aXJlKGFtb3VudFJhaXNlZCA+PSBmdW5kaW5nR29hbCk7Ly9hbGxvdyBhZG1pbiB3aXRoZHJhd2wgaWYgZnVuZGluZyBnb2FsIGlzIHJlYWNoZWQgYW5kIHRoZSBzYWxlIGlzIG92ZXIKICAgICAgICBvd25lci50cmFuc2ZlcihhbW91bnRSYWlzZWQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIGFmdGVyRGVhZGxpbmUvL0VUSC9aVFIgd2l0aGRyYXdsIGZvciBzYWxlIHBhcnRpY2lwYW50cwogICAgewogICAgICAgIGlmKGFtb3VudFJhaXNlZCA8IGZ1bmRpbmdHb2FsKS8vZnVuZGluZyBnb2FsIHdhcyBub3QgbWV0LCB3aXRoZHJhdyBFVEggZGVwb3NpdAogICAgICAgIHsKICAgICAgICAgICAgdWludCBldGhWYWwgPSBldGhCYWxhbmNlW21zZy5zZW5kZXJdOwogICAgICAgICAgICBldGhCYWxhbmNlW21zZy5zZW5kZXJdID0gMDsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhWYWwpOwogICAgICAgIH0KICAgICAgICBlbHNlLy9mdW5kaW5nIGdvYWwgd2FzIG1ldCwgd2l0aGRyYXcgWlRSIHRva2VucwogICAgICAgIHsKICAgICAgICAgICAgdWludCB0b2tlblZhbCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsKICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsKICAgICAgICAgICAgWlRSVG9rZW4gdCA9IFpUUlRva2VuKFpUUlRva2VuQ29udHJhY3QpOwogICAgICAgICAgICB0LnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2VuVmFsKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldERlYWRsaW5lKHVpbnQgdGkpIHB1YmxpYyBhZG1pbi8vc2V0dGVyCiAgICB7CiAgICAgICAgZGVhZGxpbmUgPSB0aTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0U3RhcnQodWludCB0aSkgcHVibGljIGFkbWluLy9zZXR0ZXIKICAgIHsKICAgICAgICBzdGFydCA9IHRpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzdWljaWRlKCkgcHVibGljIGFmdGVyVW5sb2NrIC8vY29udHJhY3QgY2FuIGJlIGRlc3Ryb3llZCA0IG1vbnRocyBhZnRlciB0aGUgc2FsZSBlbmRzIHRvIHNhdmUgc3RhdGUKICAgIHsKICAgICAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOwogICAgfQp9'.
	

]
