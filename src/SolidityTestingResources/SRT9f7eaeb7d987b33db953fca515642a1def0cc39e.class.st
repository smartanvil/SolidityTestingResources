Class {
	#name : #SRT9f7eaeb7d987b33db953fca515642a1def0cc39e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9f7eaeb7d987b33db953fca515642a1def0cc39e >> base64 [
	^ ''.
	

]
