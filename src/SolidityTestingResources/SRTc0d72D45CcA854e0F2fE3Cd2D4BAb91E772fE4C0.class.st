Class {
	#name : #SRTc0d72D45CcA854e0F2fE3Cd2D4BAb91E772fE4C0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc0d72D45CcA854e0F2fE3Cd2D4BAb91E772fE4C0 >> base64 [
	^ ''.
	

]
