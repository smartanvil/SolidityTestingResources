Class {
	#name : #SRT0cf1cbb130e48d9273e16491f77908024560e8e7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0cf1cbb130e48d9273e16491f77908024560e8e7 >> base64 [
	^ ''.
	

]
