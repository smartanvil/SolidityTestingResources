Class {
	#name : #SRTea8573b522213211641968cf370be869cc8578ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea8573b522213211641968cf370be869cc8578ca >> base64 [
	^ ''.
	

]
