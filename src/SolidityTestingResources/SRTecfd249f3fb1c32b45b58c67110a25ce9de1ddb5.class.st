Class {
	#name : #SRTecfd249f3fb1c32b45b58c67110a25ce9de1ddb5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTecfd249f3fb1c32b45b58c67110a25ce9de1ddb5 >> base64 [
	^ ''.
	

]
