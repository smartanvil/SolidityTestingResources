Class {
	#name : #SRT651347bc940355451e02174ae5f0ba2475de5638,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT651347bc940355451e02174ae5f0ba2475de5638 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKgoJUGVyIEFubnVtIGlzIGFuIEVSQzIwIHRva2VuIHdoaWNoIGNhbiBiZSBtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHR3byB3ZWVrcyBvZiBlYWNoIHllYXIgZm9yIDE5MiB5ZWFycyAKCXN0YXJ0aW5nIGluIDIwMTguIFRoZSB0b3RhbCBzdXBwbHkgd2lsbCBiZSAxNiwwMDAsMDAwLiBUaGUgbWF4aW11bSBhbW91bnQgYWxsb3dlZCB0byBiZSBtaW5lZCBzdGFydHMKCWF0IDEsMDAwLDAwMCBhbmQgaGFsdmVzIGV2ZXJ5IGZpdmUgeWVhcnMuIFRoZSByZXdhcmQgZm9yIGVhY2ggdGltZSB0aGUgbWluaW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBpcwoJLjAxIHBlcmNlbnQgb2YgdGhlIG1heGltdW0geWVhcmx5IHJld2FyZCwgbWVhbmluZyBpdCBzdGFydHMgYXQgMTAwIHRva2VucyBhbmQgdGhlIHN1cHBseSB3aWxsIHJ1biBvdXQKCWFmdGVyIHRoZSBtaW5pbmcgZnVuY3Rpb24gaXMgY2FsbGVkIDEwLDAwMCB0aW1lcyBldmVyeSB5ZWFyLiBUaGUgZmlyc3QgeWVhciBpdCB3aWxsIG9ubHkgYmUgYWJsZSB0byBiZQoJY2FsbGVkIDcsNTAwIHRpbWVzIGJlY2F1c2UgMjUwLDAwMCB0b2tlbnMgYXJlIGdyYW50ZWQgdG8gdGhlIG93bmVyIG9uIHRoZSBjcmVhdGlvbiBvZiB0aGUgY29udHJhY3QuCgoJCgoKCWFub255bW91cyBwcm9vZiBvZiBhdXRob3JzaGlwIC0gNDYxMjM3MEE0QjAwN0NFNEFFNUFFRjQ3MjY0MkYxREU1NUM2M0NFQjUzMzE5QzQ1N0VGMUVEODNGNzQ0MUVBNgoJc2lnbmF0dXJlIC0gOTkyN0E3NUVGN0M4OUQzQzAyOEM4QkE3QTFCNDhDREQ1MTVBQ0VEN0EyQkM1NjRBMDk5RDQ1MkQzQjNGRkU4OQoqLwpjb250cmFjdCBQZXJfQW5udW17CglzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJBTk5VTSI7CglzdHJpbmcgcHVibGljIG5hbWUgPSAiUGVyIEFubnVtIjsKCXVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7Cgl1aW50MjU2IF90b3RhbFN1cHBseSA9IDA7CglhZGRyZXNzIGNvbnRyYWN0X293bmVyOwoJdWludDI1NiBjdXJyZW50X3JlbWFpbmluZyA9IDA7IC8vdG8gY2hlY2sgZm9yIGxlZnQgb3ZlciB0b2tlbnMgYWZ0ZXIgbWluaW5nIHBlcmlvZAoJdWludDI1NiBfbWF4VG90YWxTdXBwbHkgPSAxNjAwMDAwMDAwMDAwMDAwOyAvL3NpeHRlZW4gbWlsbGlvbgoJdWludDI1NiBfbWluaW5nUmV3YXJkID0gMTAwMDAwMDAwMDA7IC8vLjAxIHBlcmNlbnQgb2YgbWF4TWluaW5nUmV3YXJkLCBoYWx2ZXMgd2l0aCBtaW5pbmdyZXdhcmQgCgl1aW50MjU2IF9tYXhNaW5pbmdSZXdhcmQgPSAxMDAwMDAwMDAwMDAwMDA7IC8vMSwwMDAsMDAwIEFOTlVNIC0gVG8gYmUgaGFsdmVkIGV2ZXJ5IDQgeWVhcnMKCXVpbnQyNTYgX3llYXIgPSAxNTE0NzgyODAwOyAvLyAwMS8wMS8yMDE4IDEyOjAwQU0gRVNUCgl1aW50MjU2IF95ZWFyX2NvdW50ID0gMjAxODsgLy9jb250cmFjdCBzdGFydHMgaW4gMjAxOCBmaXJzdCBsZWFwIHllYXIgaXMgMjAyMAoJdWludDI1NiBfY3VycmVudE1pbmVkID0gMDsgLy9taW5lZCBmb3IgdGhlIHllYXIKCgoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIC8vaW5pdGlhbGl6ZSBjb250cmFjdCAtIHNldCBvd25lciBhbmQgZ2l2ZSBvd25lciAyMCwwMDAgdG9rZW5zCiAgICBmdW5jdGlvbiBQZXJfQW5udW0oKXsKICAgIAlfdG90YWxTdXBwbHkgKz0gMjUwMDAwMDAwMDAwMDA7CiAgICAJX2N1cnJlbnRNaW5lZCArPSAyNTAwMDAwMDAwMDAwMDsJCiAgICAJY29udHJhY3Rfb3duZXIgPSBtc2cuc2VuZGVyOwogICAgCWJhbGFuY2VzW21zZy5zZW5kZXJdICs9IDI1MDAwMDAwMDAwMDAwOwogICAgCVRyYW5zZmVyKHRoaXMsbXNnLnNlbmRlciwyNTAwMDAwMDAwMDAwMCk7CiAgICB9CgoJZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7ICAgICAgICAKCQlyZXR1cm4gX3RvdGFsU3VwcGx5OwoJfQoKCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CgkJcmV0dXJuIGJhbGFuY2VzW19vd25lcl07Cgl9CgoKCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoJCWlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50IAoJCQkmJiBfYW1vdW50ID4gMAoJCQkmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKCQkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKCQkJYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50OwoJCQlUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgkJfQoJfQoKCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKCQlhZGRyZXNzIF9mcm9tLAoJCWFkZHJlc3MgX3RvLAoJCXVpbnQyNTYgX2Ftb3VudAoJKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCQlpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQKCQkJJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudAoJCQkmJiBfYW1vdW50ID4gMAoJCQkmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsKCQkJYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CgkJCWFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CgkJCWJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKCQkJVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZTsKCQl9Cgl9CgoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewoJCXJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwoJfQoKCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCQlhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CgkJQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwoJCXJldHVybiB0cnVlOwoJfQoJLy9pc19sZWFwX3llYXIgc2V0cyB5ZWFyIHRvIDEyQU0gb24gbmV3IHllYXJzIGRheSBvZiB0aGUgY3VycmVudCB5ZWFyIGFuZCBzZXRzIHRoZSBtaW5pbmcgcmV3YXJkcwoJZnVuY3Rpb24gaXNfbGVhcF95ZWFyKCkgcHJpdmF0ZXsKCQlpZihub3cgPj0gX3llYXIgKyAzMTU1NzYwMCl7CQoJCQlfeWVhciA9IF95ZWFyICsgMzE1NTc2MDA7CS8vY2hhbmdlcyB0byBuZXcgeWVhciwgMSBkYXkgZWFybHkgb24gbGVhcCB5ZWFyLCBpbiBzZWNvbmRzCgkJCV95ZWFyX2NvdW50ID0gX3llYXJfY291bnQgKyAxOyAvL2NoYW5nZXMgdG8gbmV3IHllYXIgaW4geWVhcnMKCQkJX2N1cnJlbnRNaW5lZCA9IDA7CS8vcmVzZXRzIGZvciBjdXJyZW50IHllYXJzIHN1cHBseQoJCQlpZigoKF95ZWFyX2NvdW50LTIwMTgpJTQgPT0gMCkgJiYgKF95ZWFyX2NvdW50ICE9IDIwMTgpKXsKCQkJCV9tYXhNaW5pbmdSZXdhcmQgPSBfbWF4TWluaW5nUmV3YXJkLzI7IC8vaGFsdmVkIGV2ZXJ5IDR0aCB5ZWFyCgkJCQlfbWluaW5nUmV3YXJkID0gX21heE1pbmluZ1Jld2FyZC8xMDAwMDsgIC8vbmV3IE1pbmluZ1Jld2FyZCBzZXQgdG8gLjAxIHBlcmNlbnQgb2YgbWF4IHJld2FyZCAKCgkJCX0KCQkJaWYoKF95ZWFyX2NvdW50JTQgPT0gMSkgJiYgKChfeWVhcl9jb3VudC0xKSUxMDAgIT0gMCkpewoJCQkJX3llYXIgPSBfeWVhciArIDg2NDAwOwkvL2FkZHMgYSBkYXkgZm9sbG93aW5nIGEgbGVhcCB5ZWFyCgkJCQkKCgkJCX0KCQkJZWxzZSBpZigoX3llYXJfY291bnQtMSklNDAwID09IDApewoJCQkJX3llYXIgPSBfeWVhciArIDg2NDAwOyAvL2xlYXAgeWVhciBkYXkgYWRkZWQgb24gbGFzdCBkYXkgb2YgbGVhcCB5ZWFyCgoJCQl9CiAKCQl9CQoKCX0KCgoJZnVuY3Rpb24gZGF0ZV9jaGVjaygpIHByaXZhdGUgcmV0dXJucyhib29sIGNoZWNrX25ld3llYXJzKXsKCgkJaXNfbGVhcF95ZWFyKCk7IC8vc2V0IHRoZSB5ZWFyIHZhcmlhYmxlcyBhbmQgcmV3YXJkcwoJCS8vY2hlY2sgaWYgZGF0ZSBpcyBuZXcgeWVhcnMgZGF5CgkgICAgaWYoKF95ZWFyIDw9IG5vdykgJiYgKG5vdyA8PSAoX3llYXIgKyAxMjA5NjAwKSkpewoJCQlyZXR1cm4gdHJ1ZTsJLy9pdCBpcyB0aGUgZmlyc3QgdHdvIHdlZWtzIG9mIHRoZSBuZXcgeWVhcgoJCX0KCQllbHNlewoJCQlyZXR1cm4gZmFsc2U7IC8vaXQgaXMgbm90IHRoZSBmaXJzdCB0d28gd2Vla3Mgb2YgdGhlIG5ldyB5ZWFyCgkJfQoJfQoJCglmdW5jdGlvbiBtaW5lKCkgcmV0dXJucyhib29sIHN1Y2Nlc3MpewoJCWlmKGRhdGVfY2hlY2soKSAhPSB0cnVlKXsKCQkJY3VycmVudF9yZW1haW5pbmcgPSBfbWF4TWluaW5nUmV3YXJkIC0gX2N1cnJlbnRNaW5lZDsgCgkJCWlmKChjdXJyZW50X3JlbWFpbmluZyA+IDApICYmIChfY3VycmVudE1pbmVkICE9IDApKXsKCQkJCV9jdXJyZW50TWluZWQgKz0gY3VycmVudF9yZW1haW5pbmc7CgkJCQliYWxhbmNlc1tjb250cmFjdF9vd25lcl0gKz0gY3VycmVudF9yZW1haW5pbmc7CgkJCQlUcmFuc2Zlcih0aGlzLCBjb250cmFjdF9vd25lciwgY3VycmVudF9yZW1haW5pbmcpOwoJCQkJY3VycmVudF9yZW1haW5pbmcgPSAwOwoJCQl9CgkJCXJldmVydCgpOwoJCX0KCQllbHNlIGlmKChfY3VycmVudE1pbmVkIDwgX21heE1pbmluZ1Jld2FyZCkgJiYgKF9tYXhNaW5pbmdSZXdhcmQgLSBfY3VycmVudE1pbmVkID49IF9taW5pbmdSZXdhcmQpKXsKCQkJaWYoKF90b3RhbFN1cHBseStfbWluaW5nUmV3YXJkKSA8PSBfbWF4VG90YWxTdXBwbHkpewoJCQkJLy9zZW5kIHJld2FyZCBpZiB0aGVyZSBhcmUgdG9rZW5zIGF2YWlsYWJsZSBhbmQgaXQgaXMgbmV3IHllYXJzIGRheQoJCQkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gX21pbmluZ1Jld2FyZDsJCgkJCQlfY3VycmVudE1pbmVkICs9IF9taW5pbmdSZXdhcmQ7CgkJCQlfdG90YWxTdXBwbHkgKz0gX21pbmluZ1Jld2FyZDsKCQkJCVRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIF9taW5pbmdSZXdhcmQpOyAKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJCgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCglmdW5jdGlvbiBNYXhUb3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnModWludDI1NikKCXsKCQlyZXR1cm4gX21heFRvdGFsU3VwcGx5OwoJfQoJCglmdW5jdGlvbiBNaW5pbmdSZXdhcmQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpCgl7CgkJcmV0dXJuIF9taW5pbmdSZXdhcmQ7Cgl9CgkKCWZ1bmN0aW9uIE1heE1pbmluZ1Jld2FyZCgpIGNvbnN0YW50IHJldHVybnModWludDI1NikKCXsKCQlyZXR1cm4gX21heE1pbmluZ1Jld2FyZDsKCX0KCWZ1bmN0aW9uIE1pbmVkVGhpc1llYXIoKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpCgl7CgkJcmV0dXJuIF9jdXJyZW50TWluZWQ7IC8vYW1vdW50IG1pbmVkIHNvIGZhciB0aGlzIHllYXIKCX0KCgoKfQ=='.
	

]
