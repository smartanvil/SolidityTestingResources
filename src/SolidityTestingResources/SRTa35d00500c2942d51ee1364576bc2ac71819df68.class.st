Class {
	#name : #SRTa35d00500c2942d51ee1364576bc2ac71819df68,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa35d00500c2942d51ee1364576bc2ac71819df68 >> base64 [
	^ ''.
	

]
