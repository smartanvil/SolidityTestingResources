Class {
	#name : #SRT62fe44f0911e87c16eb1eae49413afec058e78a2,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT62fe44f0911e87c16eb1eae49413afec058e78a2 >> base64 [
	^ ''.
	

]
