Class {
	#name : #SRT201ec0bcc05d43c44a05836c6d5ce42e93cceccc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT201ec0bcc05d43c44a05836c6d5ce42e93cceccc >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBPd25hYmxlCiAqIEBkZXYgVGhlIE93bmFibGUgY29udHJhY3QgaGFzIGFuIG93bmVyIGFkZHJlc3MsIGFuZCBwcm92aWRlcyBiYXNpYyBhdXRob3JpemF0aW9uIGNvbnRyb2wKICogZnVuY3Rpb25zLCB0aGlzIHNpbXBsaWZpZXMgdGhlIGltcGxlbWVudGF0aW9uIG9mICJ1c2VyIHBlcm1pc3Npb25zIi4KICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIHByZXZpb3VzT3duZXIsIGFkZHJlc3MgaW5kZXhlZCBuZXdPd25lcik7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCgogIC8qKgogICAqIEBkZXYgVGhyb3dzIGlmIGNhbGxlZCBieSBhbnkgYWNjb3VudCBvdGhlciB0aGFuIHRoZSBvd25lci4KICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uCiAgICovCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlKG5ld093bmVyICE9IGFkZHJlc3MoMCkpOwogICAgT3duZXJzaGlwVHJhbnNmZXJyZWQob3duZXIsIG5ld093bmVyKTsKICAgIG93bmVyID0gbmV3T3duZXI7CiAgfQoKfQoKCmludGVyZmFjZSBpQ29udHJhY3QgewogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gb3duZXIoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MpOwp9Cgpjb250cmFjdCBPd25lckNvbnRyYWN0IGlzIE93bmFibGUgewogICAgaUNvbnRyYWN0IHB1YmxpYyBvd25lZENvbnRyYWN0OwogICAgYWRkcmVzcyBvcmlnT3duZXI7CgogICAgLyoqCiAgICAgKiBAZGV2IGJpbmQgYSBjb250cmFjdCBhcyBpdHMgb3duZXIKICAgICAqCiAgICAgKiBAcGFyYW0gX2NvbnRyYWN0IHRoZSBjb250cmFjdCBhZGRyZXNzIHRoYXQgd2lsbCBiZSBiaW5kZWQgYnkgdGhpcyBPd25lciBDb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBzZXRDb250cmFjdChhZGRyZXNzIF9jb250cmFjdCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShfY29udHJhY3QgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgb3duZWRDb250cmFjdCA9IGlDb250cmFjdChfY29udHJhY3QpOwogICAgICAgIG9yaWdPd25lciA9IG93bmVkQ29udHJhY3Qub3duZXIoKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgY2hhbmdlIHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgZnJvbSB0aGlzIGNvbnRyYWN0IGFkZHJlc3MgdG8gdGhlIG9yaWdpbmFsIG9uZS4gCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcEJhY2soKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBvd25lZENvbnRyYWN0LnRyYW5zZmVyT3duZXJzaGlwKG9yaWdPd25lcik7CiAgICAgICAgb3duZWRDb250cmFjdCA9IGlDb250cmFjdChhZGRyZXNzKDApKTsKICAgICAgICBvcmlnT3duZXIgPSBhZGRyZXNzKDApOwogICAgfQp9CgppbnRlcmZhY2UgaXRva2VuIHsKICAgIC8vIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7CiAgICBmdW5jdGlvbiBmcmVlemVBY2NvdW50KGFkZHJlc3MgX3RhcmdldCwgYm9vbCBfZnJlZXplKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGV4dGVybmFsIHJldHVybnMgKGJvb2wpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICAvLyBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBleHRlcm5hbDsKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIGZyb3plbkFjY291bnQoYWRkcmVzcyBfYWNjb3VudCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChib29sKTsKfQoKY29udHJhY3QgUmVsZWFzZVRva2VuIGlzIE93bmVyQ29udHJhY3QgewogICAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogICAgLy8gcmVjb3JkIGxvY2sgdGltZSBwZXJpb2QgYW5kIHJlbGF0ZWQgdG9rZW4gYW1vdW50CiAgICBzdHJ1Y3QgVGltZVJlYyB7CiAgICAgICAgdWludDI1NiBhbW91bnQ7CiAgICAgICAgdWludDI1NiByZW1haW47CiAgICAgICAgdWludDI1NiBlbmRUaW1lOwogICAgICAgIHVpbnQyNTYgcmVsZWFzZVBlcmlvZEVuZFRpbWU7CiAgICB9CgogICAgaXRva2VuIHB1YmxpYyBvd25lZDsKCiAgICBhZGRyZXNzW10gcHVibGljIGZyb3plbkFjY291bnRzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBUaW1lUmVjW10pIGZyb3plblRpbWVzOwogICAgLy8gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSByZWxlYXNlZEFtb3VudHM7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHByZVJlbGVhc2VBbW91bnRzOwoKICAgIGV2ZW50IFJlbGVhc2VGdW5kcyhhZGRyZXNzIF90YXJnZXQsIHVpbnQyNTYgX2Ftb3VudCk7CgogICAgLyoqCiAgICAgKiBAZGV2IGJpbmQgYSBjb250cmFjdCBhcyBpdHMgb3duZXIKICAgICAqCiAgICAgKiBAcGFyYW0gX2NvbnRyYWN0IHRoZSBjb250cmFjdCBhZGRyZXNzIHRoYXQgd2lsbCBiZSBiaW5kZWQgYnkgdGhpcyBPd25lciBDb250cmFjdAogICAgICovCiAgICBmdW5jdGlvbiBzZXRDb250cmFjdChhZGRyZXNzIF9jb250cmFjdCkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgc3VwZXIuc2V0Q29udHJhY3QoX2NvbnRyYWN0KTsKICAgICAgICBvd25lZCA9IGl0b2tlbihfY29udHJhY3QpOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiByZW1vdmUgYW4gYWNjb3VudCBmcm9tIHRoZSBmcm96ZW4gYWNjb3VudHMgbGlzdAogICAgICoKICAgICAqIEBwYXJhbSBfaW5kIHRoZSBpbmRleCBvZiB0aGUgYWNjb3VudCBpbiB0aGUgbGlzdAogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmVBY2NvdW50KHVpbnQgX2luZCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX2luZCA+PSAwKTsKICAgICAgICByZXF1aXJlKF9pbmQgPCBmcm96ZW5BY2NvdW50cy5sZW5ndGgpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgaSA9IF9pbmQ7CiAgICAgICAgd2hpbGUgKGkgPCBmcm96ZW5BY2NvdW50cy5sZW5ndGguc3ViKDEpKSB7CiAgICAgICAgICAgIGZyb3plbkFjY291bnRzW2ldID0gZnJvemVuQWNjb3VudHNbaS5hZGQoMSldOwogICAgICAgICAgICBpID0gaS5hZGQoMSk7CiAgICAgICAgfQoKICAgICAgICBmcm96ZW5BY2NvdW50cy5sZW5ndGggPSBmcm96ZW5BY2NvdW50cy5sZW5ndGguc3ViKDEpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiByZW1vdmUgYSB0aW1lIHJlY29yZHMgZnJvbSB0aGUgdGltZSByZWNvcmRzIGxpc3Qgb2Ygb25lIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgYWNjb3VudCB0aGF0IGhvbGRzIGEgbGlzdCBvZiB0aW1lIHJlY29yZHMgd2hpY2ggcmVjb3JkIHRoZSBmcmVlemUgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZUxvY2tlZFRpbWUoYWRkcmVzcyBfdGFyZ2V0LCB1aW50IF9pbmQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKF9pbmQgPj0gMCk7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBUaW1lUmVjW10gc3RvcmFnZSBsb2NrZWRUaW1lcyA9IGZyb3plblRpbWVzW190YXJnZXRdOwogICAgICAgIHJlcXVpcmUoX2luZCA8IGxvY2tlZFRpbWVzLmxlbmd0aCk7CiAgICAgICAKICAgICAgICB1aW50MjU2IGkgPSBfaW5kOwogICAgICAgIHdoaWxlIChpIDwgbG9ja2VkVGltZXMubGVuZ3RoLnN1YigxKSkgewogICAgICAgICAgICBsb2NrZWRUaW1lc1tpXSA9IGxvY2tlZFRpbWVzW2kuYWRkKDEpXTsKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KCiAgICAgICAgbG9ja2VkVGltZXMubGVuZ3RoID0gbG9ja2VkVGltZXMubGVuZ3RoLnN1YigxKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgZ2V0IHRvdGFsIHJlbWFpbiBsb2NrZWQgdG9rZW5zIG9mIGFuIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX2FjY291bnQgdGhlIG93bmVyIG9mIHNvbWUgYW1vdW50IG9mIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBnZXRSZW1haW5Mb2NrZWRPZihhZGRyZXNzIF9hY2NvdW50KSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShfYWNjb3VudCAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdWludDI1NiB0b3RhbFJlbWFpbiA9IDA7CiAgICAgICAgdWludDI1NiBsZW4gPSBmcm96ZW5BY2NvdW50cy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IGxlbikgewogICAgICAgICAgICBhZGRyZXNzIGZyb3plbkFkZHIgPSBmcm96ZW5BY2NvdW50c1tpXTsKICAgICAgICAgICAgaWYgKGZyb3plbkFkZHIgPT0gX2FjY291bnQpIHsKICAgICAgICAgICAgICAgIHVpbnQyNTYgdGltZVJlY0xlbiA9IGZyb3plblRpbWVzW2Zyb3plbkFkZHJdLmxlbmd0aDsKICAgICAgICAgICAgICAgIHVpbnQyNTYgaiA9IDA7CiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IHRpbWVSZWNMZW4pIHsKICAgICAgICAgICAgICAgICAgICBUaW1lUmVjIHN0b3JhZ2UgdGltZVBhaXIgPSBmcm96ZW5UaW1lc1tmcm96ZW5BZGRyXVtqXTsKICAgICAgICAgICAgICAgICAgICB0b3RhbFJlbWFpbiA9IHRvdGFsUmVtYWluLmFkZCh0aW1lUGFpci5yZW1haW4pOwoKICAgICAgICAgICAgICAgICAgICBqID0gai5hZGQoMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGkgPSBpLmFkZCgxKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0b3RhbFJlbWFpbjsKICAgIH0KCiAgICAvKioKICAgICAqIGp1ZGdlIHdoZXRoZXIgd2UgbmVlZCB0byByZWxlYXNlIHNvbWUgb2YgdGhlIGxvY2tlZCB0b2tlbgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gbmVlZFJlbGVhc2UoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludDI1NiBsZW4gPSBmcm96ZW5BY2NvdW50cy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IGxlbikgewogICAgICAgICAgICBhZGRyZXNzIGZyb3plbkFkZHIgPSBmcm96ZW5BY2NvdW50c1tpXTsKICAgICAgICAgICAgdWludDI1NiB0aW1lUmVjTGVuID0gZnJvemVuVGltZXNbZnJvemVuQWRkcl0ubGVuZ3RoOwogICAgICAgICAgICB1aW50MjU2IGogPSAwOwogICAgICAgICAgICB3aGlsZSAoaiA8IHRpbWVSZWNMZW4pIHsKICAgICAgICAgICAgICAgIFRpbWVSZWMgc3RvcmFnZSB0aW1lUGFpciA9IGZyb3plblRpbWVzW2Zyb3plbkFkZHJdW2pdOwogICAgICAgICAgICAgICAgaWYgKG5vdyA+PSB0aW1lUGFpci5lbmRUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaiA9IGouYWRkKDEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpID0gaS5hZGQoMSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGZyZWV6ZSB0aGUgYW1vdW50IG9mIHRva2VucyBvZiBhbiBhY2NvdW50CiAgICAgKgogICAgICogQHBhcmFtIF90YXJnZXQgdGhlIG93bmVyIG9mIHNvbWUgYW1vdW50IG9mIHRva2VucwogICAgICogQHBhcmFtIF92YWx1ZSB0aGUgYW1vdW50IG9mIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBfZnJvemVuRW5kVGltZSB0aGUgZW5kIHRpbWUgb2YgdGhlIGxvY2sgcGVyaW9kLCB1bml0IGlzIHNlY29uZAogICAgICogQHBhcmFtIF9yZWxlYXNlUGVyaW9kIHRoZSBsb2NraW5nIHBlcmlvZCwgdW5pdCBpcyBzZWNvbmQKICAgICAqLwogICAgZnVuY3Rpb24gZnJlZXplKGFkZHJlc3MgX3RhcmdldCwgdWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX2Zyb3plbkVuZFRpbWUsIHVpbnQyNTYgX3JlbGVhc2VQZXJpb2QpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vcmVxdWlyZShfdG9rZW5BZGRyICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF92YWx1ZSA+IDApOwogICAgICAgIHJlcXVpcmUoX2Zyb3plbkVuZFRpbWUgPiAwICYmIF9yZWxlYXNlUGVyaW9kID49IDApOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBsZW47IGkgPSBpLmFkZCgxKSkgewogICAgICAgICAgICBpZiAoZnJvemVuQWNjb3VudHNbaV0gPT0gX3RhcmdldCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0gICAgICAgICAgICAKICAgICAgICB9CgogICAgICAgIGlmIChpID49IGxlbikgewogICAgICAgICAgICBmcm96ZW5BY2NvdW50cy5wdXNoKF90YXJnZXQpOyAvLyBhZGQgbmV3IGFjY291bnQKICAgICAgICB9IAogICAgICAgIAogICAgICAgIC8vIGVhY2ggdGltZSB0aGUgbmV3IGxvY2tlZCB0aW1lIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGJhY2tlbmQKICAgICAgICBmcm96ZW5UaW1lc1tfdGFyZ2V0XS5wdXNoKFRpbWVSZWMoX3ZhbHVlLCBfdmFsdWUsIF9mcm96ZW5FbmRUaW1lLCBfZnJvemVuRW5kVGltZS5hZGQoX3JlbGVhc2VQZXJpb2QpKSk7CiAgICAgICAgb3duZWQuZnJlZXplQWNjb3VudChfdGFyZ2V0LCB0cnVlKTsKICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgdHJhbnNmZXIgYW4gYW1vdW50IG9mIHRva2VucyB0byBhbiBhY2NvdW50LCBhbmQgdGhlbiBmcmVlemUgdGhlIHRva2VucwogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0IHRoZSBhY2NvdW50IGFkZHJlc3MgdGhhdCB3aWxsIGhvbGQgYW4gYW1vdW50IG9mIHRoZSB0b2tlbnMKICAgICAqIEBwYXJhbSBfdmFsdWUgdGhlIGFtb3VudCBvZiB0aGUgdG9rZW5zIHdoaWNoIGhhcyBiZWVuIHRyYW5zZmVycmVkCiAgICAgKiBAcGFyYW0gX2Zyb3plbkVuZFRpbWUgdGhlIGVuZCB0aW1lIG9mIHRoZSBsb2NrIHBlcmlvZCwgdW5pdCBpcyBzZWNvbmQKICAgICAqIEBwYXJhbSBfcmVsZWFzZVBlcmlvZCB0aGUgbG9ja2luZyBwZXJpb2QsIHVuaXQgaXMgc2Vjb25kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRyYW5zZmVyQW5kRnJlZXplKGFkZHJlc3MgX3RhcmdldCwgdWludDI1NiBfdmFsdWUsIHVpbnQyNTYgX2Zyb3plbkVuZFRpbWUsIHVpbnQyNTYgX3JlbGVhc2VQZXJpb2QpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vcmVxdWlyZShfdG9rZW5Pd25lciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF90YXJnZXQgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgICAgICByZXF1aXJlKF9mcm96ZW5FbmRUaW1lID4gMCAmJiBfcmVsZWFzZVBlcmlvZCA+PSAwKTsKCiAgICAgICAgLy8gY2hlY2sgZmlyc3RseSB0aGF0IHRoZSBhbGxvd2FuY2Ugb2YgdGhpcyBjb250cmFjdCBoYXMgYmVlbiBzZXQKICAgICAgICBhc3NlcnQob3duZWQuYWxsb3dhbmNlKG1zZy5zZW5kZXIsIHRoaXMpID4gMCk7CgogICAgICAgIC8vIGZyZWV6ZSB0aGUgYWNjb3VudCBhdCBmaXJzdAogICAgICAgIGlmICghZnJlZXplKF90YXJnZXQsIF92YWx1ZSwgX2Zyb3plbkVuZFRpbWUsIF9yZWxlYXNlUGVyaW9kKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKG93bmVkLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCBfdGFyZ2V0LCBfdmFsdWUpKTsKICAgIH0KCiAgICAvKioKICAgICAqIHJlbGVhc2UgdGhlIHRva2VuIHdoaWNoIGFyZSBsb2NrZWQgZm9yIG9uY2UgYW5kIHdpbGwgYmUgdG90YWwgcmVsZWFzZWQgYXQgb25jZSAKICAgICAqIGFmdGVyIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGxvY2sgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2VBbGxPbmNlTG9jaygpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vcmVxdWlyZShfdG9rZW5BZGRyICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICB1aW50MjU2IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuKSB7CiAgICAgICAgICAgIGFkZHJlc3MgdGFyZ2V0ID0gZnJvemVuQWNjb3VudHNbaV07CiAgICAgICAgICAgIGlmIChmcm96ZW5UaW1lc1t0YXJnZXRdLmxlbmd0aCA9PSAxICYmIGZyb3plblRpbWVzW3RhcmdldF1bMF0uZW5kVGltZSA9PSBmcm96ZW5UaW1lc1t0YXJnZXRdWzBdLnJlbGVhc2VQZXJpb2RFbmRUaW1lICYmIGZyb3plblRpbWVzW3RhcmdldF1bMF0uZW5kVGltZSA+IDAgJiYgbm93ID49IGZyb3plblRpbWVzW3RhcmdldF1bMF0uZW5kVGltZSkgewogICAgICAgICAgICAgICAgdWludDI1NiByZWxlYXNlZEFtb3VudCA9IGZyb3plblRpbWVzW3RhcmdldF1bMF0uYW1vdW50OwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGN1cnJlbnQgcmVsZWFzZSBwZXJpb2QgdGltZSByZWNvcmQKICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlTG9ja2VkVGltZSh0YXJnZXQsIDApKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZnJvemUgYWNjb3VudAogICAgICAgICAgICAgICAgYm9vbCByZXMgPSByZW1vdmVBY2NvdW50KGkpOwogICAgICAgICAgICAgICAgaWYgKCFyZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIG93bmVkLmZyZWV6ZUFjY291bnQodGFyZ2V0LCBmYWxzZSk7CiAgICAgICAgICAgICAgICAvL2Zyb3plblRpbWVzW2Rlc3RBZGRyXVswXS5lbmRUaW1lID0gMDsKICAgICAgICAgICAgICAgIC8vZnJvemVuVGltZXNbZGVzdEFkZHJdWzBdLmR1cmF0aW9uID0gMDsKICAgICAgICAgICAgICAgIFJlbGVhc2VGdW5kcyh0YXJnZXQsIHJlbGVhc2VkQW1vdW50KTsKICAgICAgICAgICAgICAgIGxlbiA9IGxlbi5zdWIoMSk7CiAgICAgICAgICAgICAgICAvL2Zyb3plblRpbWVzW2Rlc3RBZGRyXVswXS5hbW91bnQgPSAwOwogICAgICAgICAgICAgICAgLy9mcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0ucmVtYWluID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsgCiAgICAgICAgICAgICAgICAvLyBubyBhY2NvdW50IGhhcyBiZWVuIHJlbW92ZWQKICAgICAgICAgICAgICAgIGkgPSBpLmFkZCgxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAvL3JldHVybiAocmVsZWFzZU11bHRpQWNjb3VudHMoZnJvemVuQWNjb3VudHMpKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgcmVsZWFzZSB0aGUgbG9ja2VkIHRva2VucyBvd25lZCBieSBhbiBhY2NvdW50LCB3aGljaCBvbmx5IGhhdmUgb25seSBvbmUgbG9ja2VkIHRpbWUKICAgICAqIGFuZCBkb24ndCBoYXZlIHJlbGVhc2Ugc3RhZ2UuCiAgICAgKgogICAgICogQHBhcmFtIF90YXJnZXQgdGhlIGFjY291bnQgYWRkcmVzcyB0aGF0IGhvbGQgYW4gYW1vdW50IG9mIGxvY2tlZCB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZUFjY291bnQoYWRkcmVzcyBfdGFyZ2V0KSBvbmx5T3duZXIgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvL3JlcXVpcmUoX3Rva2VuQWRkciAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF90YXJnZXQgIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHVpbnQyNTYgbGVuID0gZnJvemVuQWNjb3VudHMubGVuZ3RoOwogICAgICAgIHVpbnQyNTYgaSA9IDA7CiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHsKICAgICAgICAgICAgYWRkcmVzcyBkZXN0QWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZGVzdEFkZHIgPT0gX3RhcmdldCkgewogICAgICAgICAgICAgICAgaWYgKGZyb3plblRpbWVzW2Rlc3RBZGRyXS5sZW5ndGggPT0gMSAmJiBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0uZW5kVGltZSA9PSBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0ucmVsZWFzZVBlcmlvZEVuZFRpbWUgJiYgZnJvemVuVGltZXNbZGVzdEFkZHJdWzBdLmVuZFRpbWUgPiAwICYmIG5vdyA+PSBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0uZW5kVGltZSkgeyAKICAgICAgICAgICAgICAgICAgICB1aW50MjU2IHJlbGVhc2VkQW1vdW50ID0gZnJvemVuVGltZXNbZGVzdEFkZHJdWzBdLmFtb3VudDsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgY3VycmVudCByZWxlYXNlIHBlcmlvZCB0aW1lIHJlY29yZAogICAgICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlTG9ja2VkVGltZShkZXN0QWRkciwgMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmcm96ZSBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgYm9vbCByZXMgPSByZW1vdmVBY2NvdW50KGkpOwogICAgICAgICAgICAgICAgICAgIGlmICghcmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIG93bmVkLmZyZWV6ZUFjY291bnQoZGVzdEFkZHIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAvLyBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0uZW5kVGltZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgLy8gZnJvemVuVGltZXNbZGVzdEFkZHJdWzBdLmR1cmF0aW9uID0gMDsKICAgICAgICAgICAgICAgICAgICBSZWxlYXNlRnVuZHMoZGVzdEFkZHIsIHJlbGVhc2VkQW1vdW50KTsKICAgICAgICAgICAgICAgICAgICAvLyBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0uYW1vdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICAvLyBmcm96ZW5UaW1lc1tkZXN0QWRkcl1bMF0ucmVtYWluID0gMDsKCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gaWYgdGhlIGFjY291bnQgYXJlIG5vdCBsb2NrZWQgZm9yIG9uY2UsIHdlIHdpbGwgZG8gbm90aGluZyBoZXJlCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGkgPSBpLmFkZCgxKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSAgICAKCiAgICAvKioKICAgICAqIEBkZXYgcmVsZWFzZSB0aGUgbG9ja2VkIHRva2VucyBvd25lZCBieSBhbiBhY2NvdW50IHdpdGggc2V2ZXJhbCBzdGFnZXMKICAgICAqIHRoaXMgbmVlZCB0aGUgY29udHJhY3QgZ2V0IGFwcHJvdmFsIGZyb20gdGhlIGFjY291bnQgYnkgY2FsbCBhcHByb3ZlKCkgaW4gdGhlIHRva2VuIGNvbnRyYWN0CiAgICAgKgogICAgICogQHBhcmFtIF90YXJnZXQgdGhlIGFjY291bnQgYWRkcmVzcyB0aGF0IGhvbGQgYW4gYW1vdW50IG9mIGxvY2tlZCB0b2tlbnMKICAgICAqIEBwYXJhbSBfZGVzdCB0aGUgc2Vjb25kYXJ5IGFkZHJlc3MgdGhhdCB3aWxsIGhvbGQgdGhlIHJlbGVhc2VkIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiByZWxlYXNlV2l0aFN0YWdlKGFkZHJlc3MgX3RhcmdldCwgYWRkcmVzcyBfZGVzdCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgLy9yZXF1aXJlKF90b2tlbmFkZHIgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX2Rlc3QgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgLy8gcmVxdWlyZShfdmFsdWUgPiAwKTsKICAgICAgICAKICAgICAgICAvLyBjaGVjayBmaXJzdGx5IHRoYXQgdGhlIGFsbG93YW5jZSBvZiB0aGlzIGNvbnRyYWN0IGZyb20gX3RhcmdldCBhY2NvdW50IGhhcyBiZWVuIHNldAogICAgICAgIGFzc2VydChvd25lZC5hbGxvd2FuY2UoX3RhcmdldCwgdGhpcykgPiAwKTsKCiAgICAgICAgdWludDI1NiBsZW4gPSBmcm96ZW5BY2NvdW50cy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IGxlbikgewogICAgICAgICAgICAvLyBmaXJzdGx5IGZpbmQgdGhlIHRhcmdldCBhZGRyZXNzCiAgICAgICAgICAgIGFkZHJlc3MgZnJvemVuQWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZnJvemVuQWRkciA9PSBfdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IHRpbWVSZWNMZW4gPSBmcm96ZW5UaW1lc1tmcm96ZW5BZGRyXS5sZW5ndGg7CgogICAgICAgICAgICAgICAgYm9vbCByZWxlYXNlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgdWludDI1NiBub3dUaW1lID0gbm93OwogICAgICAgICAgICAgICAgZm9yICh1aW50MjU2IGogPSAwOyBqIDwgdGltZVJlY0xlbjsgcmVsZWFzZWQgPSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgZXZlcnkgdGltZSByZWNvcmRzIHRvIGNhY3VsYXRlIGhvdyBtYW55IHRva2VucyBuZWVkIHRvIGJlIHJlbGVhc2VkLgogICAgICAgICAgICAgICAgICAgIFRpbWVSZWMgc3RvcmFnZSB0aW1lUGFpciA9IGZyb3plblRpbWVzW2Zyb3plbkFkZHJdW2pdOwogICAgICAgICAgICAgICAgICAgIGlmIChub3dUaW1lID4gdGltZVBhaXIuZW5kVGltZSAmJiB0aW1lUGFpci5lbmRUaW1lID4gMCAmJiB0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZSA+IHRpbWVQYWlyLmVuZFRpbWUpIHsgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBsYXN0UmVsZWFzZWQgPSB0aW1lUGFpci5hbW91bnQuc3ViKHRpbWVQYWlyLnJlbWFpbik7CiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgdmFsdWUgPSAodGltZVBhaXIuYW1vdW50ICogbm93VGltZS5zdWIodGltZVBhaXIuZW5kVGltZSkgLyB0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZS5zdWIodGltZVBhaXIuZW5kVGltZSkpLnN1YihsYXN0UmVsZWFzZWQpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiB0aW1lUGFpci5yZW1haW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGltZVBhaXIucmVtYWluOwogICAgICAgICAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGltZVBhaXIuZW5kVGltZSA9IG5vd1RpbWU7ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgdGltZVBhaXIucmVtYWluID0gdGltZVBhaXIucmVtYWluLnN1Yih2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFJlbGVhc2VGdW5kcyhmcm96ZW5BZGRyLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHByZVJlbGVhc2VBbW91bnRzW2Zyb3plbkFkZHJdID0gcHJlUmVsZWFzZUFtb3VudHNbZnJvemVuQWRkcl0uYWRkKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVQYWlyLnJlbWFpbiA8IDFlOCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1vdmVMb2NrZWRUaW1lKGZyb3plbkFkZHIsIGopKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVJlY0xlbiA9IHRpbWVSZWNMZW4uc3ViKDEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vb3duZWQuZnJlZXplQWNjb3VudChmcm96ZW5BZGRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vd1RpbWUgPj0gdGltZVBhaXIuZW5kVGltZSAmJiB0aW1lUGFpci5lbmRUaW1lID4gMCAmJiB0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZSA9PSB0aW1lUGFpci5lbmRUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG93bmVkLmZyZWV6ZUFjY291bnQoZnJvemVuQWRkciwgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lUGFpci5yZW1haW4gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBSZWxlYXNlRnVuZHMoZnJvemVuQWRkciwgdGltZVBhaXIuYW1vdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgcHJlUmVsZWFzZUFtb3VudHNbZnJvemVuQWRkcl0gPSBwcmVSZWxlYXNlQW1vdW50c1tmcm96ZW5BZGRyXS5hZGQodGltZVBhaXIuYW1vdW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1vdmVMb2NrZWRUaW1lKGZyb3plbkFkZHIsIGopKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lUmVjTGVuID0gdGltZVJlY0xlbi5zdWIoMSk7CgogICAgICAgICAgICAgICAgICAgICAgIC8vb3duZWQuZnJlZXplQWNjb3VudChmcm96ZW5BZGRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9IAoKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbGVhc2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGogPSBqLmFkZCgxKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gd2UgZ290IHNvbWUgYW1vdW50IG5lZWQgdG8gYmUgcmVsZWFzZWQKICAgICAgICAgICAgICAgIGlmIChwcmVSZWxlYXNlQW1vdW50c1tmcm96ZW5BZGRyXSA+IDApIHsKICAgICAgICAgICAgICAgICAgICBvd25lZC5mcmVlemVBY2NvdW50KGZyb3plbkFkZHIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIW93bmVkLnRyYW5zZmVyRnJvbShfdGFyZ2V0LCBfZGVzdCwgcHJlUmVsZWFzZUFtb3VudHNbZnJvemVuQWRkcl0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgcHJlLXJlbGVhc2UgYW1vdW50IHRvIDAgZm9yIG5leHQgdGltZQogICAgICAgICAgICAgICAgICAgIHByZVJlbGVhc2VBbW91bnRzW2Zyb3plbkFkZHJdID0gMDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBpZiBhbGwgdGhlIGZyb3plbiBhbW91bnRzIGhhZCBiZWVuIHJlbGVhc2VkLCB0aGVuIHVubG9jayB0aGUgYWNjb3VudCBmaW5hbGx5CiAgICAgICAgICAgICAgICBpZiAoZnJvemVuVGltZXNbZnJvemVuQWRkcl0ubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlbW92ZUFjY291bnQoaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBzdGlsbCBoYXMgc29tZSB0b2tlbnMgbmVlZCB0byBiZSByZWxlYXNlZCBpbiBmdXR1cmUKICAgICAgICAgICAgICAgICAgICBvd25lZC5mcmVlemVBY2NvdW50KGZyb3plbkFkZHIsIHRydWUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9ICAgICAgICAgIAoKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Cn0KCmNvbnRyYWN0IFJlbGVhc2VUb2tlblYyIGlzIFJlbGVhc2VUb2tlbiB7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIG9sZEJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBhZGRyZXNzKSBwdWJsaWMgcmVsZWFzZUFkZHJzOwogICAgCiAgICAKICAgIC8qKgogICAgICogQGRldiBzZXQgdGhlIG5ldyBlbmR0aW1lIG9mIHRoZSByZWxlYXNlZCB0aW1lIG9mIGFuIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKiBAcGFyYW0gX29sZEVuZFRpbWUgdGhlIG9yaWdpbmFsIGVuZHRpbWUgZm9yIHRoZSBsb2NrIHBlcmlvZAogICAgICogQHBhcmFtIF9uZXdFbmRUaW1lIHRoZSBuZXcgZW5kdGltZSBmb3IgdGhlIGxvY2sgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE5ld0VuZHRpbWUoYWRkcmVzcyBfdGFyZ2V0LCB1aW50MjU2IF9vbGRFbmRUaW1lLCB1aW50MjU2IF9uZXdFbmRUaW1lKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9vbGRFbmRUaW1lID4gMCAmJiBfbmV3RW5kVGltZSA+IDApOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICB1aW50MjU2IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuKSB7CiAgICAgICAgICAgIGFkZHJlc3MgZnJvemVuQWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZnJvemVuQWRkciA9PSBfdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IHRpbWVSZWNMZW4gPSBmcm96ZW5UaW1lc1tmcm96ZW5BZGRyXS5sZW5ndGg7CiAgICAgICAgICAgICAgICB1aW50MjU2IGogPSAwOwogICAgICAgICAgICAgICAgd2hpbGUgKGogPCB0aW1lUmVjTGVuKSB7CiAgICAgICAgICAgICAgICAgICAgVGltZVJlYyBzdG9yYWdlIHRpbWVQYWlyID0gZnJvemVuVGltZXNbZnJvemVuQWRkcl1bal07CiAgICAgICAgICAgICAgICAgICAgaWYgKF9vbGRFbmRUaW1lID09IHRpbWVQYWlyLmVuZFRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBkdXJhdGlvbiA9IHRpbWVQYWlyLnJlbGVhc2VQZXJpb2RFbmRUaW1lLnN1Yih0aW1lUGFpci5lbmRUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZVBhaXIuZW5kVGltZSA9IF9uZXdFbmRUaW1lOwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZSA9IHRpbWVQYWlyLmVuZFRpbWUuYWRkKGR1cmF0aW9uKTsgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaiA9IGouYWRkKDEpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQGRldiBzZXQgdGhlIG5ldyByZWxlYXNlZCBwZXJpb2QgbGVuZ3RoIG9mIGFuIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKiBAcGFyYW0gX29yaWdFbmRUaW1lIHRoZSBvcmlnaW5hbCBlbmR0aW1lIGZvciB0aGUgbG9jayBwZXJpb2QKICAgICAqIEBwYXJhbSBfZHVyYXRpb24gdGhlIG5ldyByZWxlYXNpbmcgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldE5ld1JlbGVhc2VQZXJpb2QoYWRkcmVzcyBfdGFyZ2V0LCB1aW50MjU2IF9vcmlnRW5kVGltZSwgdWludDI1NiBfZHVyYXRpb24pIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoX29yaWdFbmRUaW1lID4gMCAmJiBfZHVyYXRpb24gPiAwKTsKCiAgICAgICAgdWludDI1NiBsZW4gPSBmcm96ZW5BY2NvdW50cy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IGxlbikgewogICAgICAgICAgICBhZGRyZXNzIGZyb3plbkFkZHIgPSBmcm96ZW5BY2NvdW50c1tpXTsKICAgICAgICAgICAgaWYgKGZyb3plbkFkZHIgPT0gX3RhcmdldCkgewogICAgICAgICAgICAgICAgdWludDI1NiB0aW1lUmVjTGVuID0gZnJvemVuVGltZXNbZnJvemVuQWRkcl0ubGVuZ3RoOwogICAgICAgICAgICAgICAgdWludDI1NiBqID0gMDsKICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgdGltZVJlY0xlbikgewogICAgICAgICAgICAgICAgICAgIFRpbWVSZWMgc3RvcmFnZSB0aW1lUGFpciA9IGZyb3plblRpbWVzW2Zyb3plbkFkZHJdW2pdOwogICAgICAgICAgICAgICAgICAgIGlmIChfb3JpZ0VuZFRpbWUgPT0gdGltZVBhaXIuZW5kVGltZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZSA9IF9vcmlnRW5kVGltZS5hZGQoX2R1cmF0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBqID0gai5hZGQoMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpID0gaS5hZGQoMSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IHNldCB0aGUgbmV3IHJlbGVhc2VkIHBlcmlvZCBsZW5ndGggb2YgYW4gYWNjb3VudAogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0IHRoZSBvd25lciBvZiBzb21lIGFtb3VudCBvZiB0b2tlbnMKICAgICAqIEBwYXJhbSBfcmVsZWFzZVRvIHRoZSBhZGRyZXNzIHRoYXQgd2lsbCByZWNlaXZlIHRoZSByZWxlYXNlZCB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gc2V0UmVsZWFzZWRBZGRyZXNzKGFkZHJlc3MgX3RhcmdldCwgYWRkcmVzcyBfcmVsZWFzZVRvKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKF9yZWxlYXNlVG8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIHJlbGVhc2VBZGRyc1tfdGFyZ2V0XSA9IF9yZWxlYXNlVG87CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldCB0aGUgbG9ja2VkIHN0YWdlcyBvZiBhbiBhY2NvdW50CiAgICAgKgogICAgICogQHBhcmFtIF90YXJnZXQgdGhlIG93bmVyIG9mIHNvbWUgYW1vdW50IG9mIHRva2VucwogICAgICovCiAgICBmdW5jdGlvbiBnZXRMb2NrZWRTdGFnZXMoYWRkcmVzcyBfdGFyZ2V0KSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICB1aW50MjU2IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuKSB7CiAgICAgICAgICAgIGFkZHJlc3MgZnJvemVuQWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZnJvemVuQWRkciA9PSBfdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnJvemVuVGltZXNbZnJvemVuQWRkcl0ubGVuZ3RoOyAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CgogICAgICAgICAgICBpID0gaS5hZGQoMSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICAvKioKICAgICAqIEBkZXYgZ2V0IHRoZSBlbmR0aW1lIG9mIHRoZSBsb2NrZWQgc3RhZ2VzIG9mIGFuIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKiBAcGFyYW0gX251bSB0aGUgc3RhZ2UgbnVtYmVyIG9mIHRoZSByZWxlYXNpbmcgcGVyaW9kCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEVuZFRpbWVPZlN0YWdlKGFkZHJlc3MgX3RhcmdldCwgdWludCBfbnVtKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICB1aW50MjU2IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuKSB7CiAgICAgICAgICAgIGFkZHJlc3MgZnJvemVuQWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZnJvemVuQWRkciA9PSBfdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICBUaW1lUmVjIHN0b3JhZ2UgdGltZVBhaXIgPSBmcm96ZW5UaW1lc1tmcm96ZW5BZGRyXVtfbnVtXTsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gdGltZVBhaXIuZW5kVGltZTsgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldCB0aGUgcmVtYWluIHVucmxlYXNlZCB0b2tlbnMgb2YgdGhlIGxvY2tlZCBzdGFnZXMgb2YgYW4gYWNjb3VudAogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0IHRoZSBvd25lciBvZiBzb21lIGFtb3VudCBvZiB0b2tlbnMKICAgICAqIEBwYXJhbSBfbnVtIHRoZSBzdGFnZSBudW1iZXIgb2YgdGhlIHJlbGVhc2luZyBwZXJpb2QKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0UmVtYWluT2ZTdGFnZShhZGRyZXNzIF90YXJnZXQsIHVpbnQgX251bSkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgdWludDI1NiBsZW4gPSBmcm96ZW5BY2NvdW50cy5sZW5ndGg7CiAgICAgICAgdWludDI1NiBpID0gMDsKICAgICAgICB3aGlsZSAoaSA8IGxlbikgewogICAgICAgICAgICBhZGRyZXNzIGZyb3plbkFkZHIgPSBmcm96ZW5BY2NvdW50c1tpXTsKICAgICAgICAgICAgaWYgKGZyb3plbkFkZHIgPT0gX3RhcmdldCkgewogICAgICAgICAgICAgICAgVGltZVJlYyBzdG9yYWdlIHRpbWVQYWlyID0gZnJvemVuVGltZXNbZnJvemVuQWRkcl1bX251bV07ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVQYWlyLnJlbWFpbjsgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldCB0aGUgcmVtYWluIHJlbGVhc2luZyBwZXJpb2Qgb2YgYW4gYWNjb3VudAogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0IHRoZSBvd25lciBvZiBzb21lIGFtb3VudCBvZiB0b2tlbnMKICAgICAqIEBwYXJhbSBfbnVtIHRoZSBzdGFnZSBudW1iZXIgb2YgdGhlIHJlbGVhc2luZyBwZXJpb2QKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0UmVtYWluUmVsZWFzZVRpbWVPZlN0YWdlKGFkZHJlc3MgX3RhcmdldCwgdWludCBfbnVtKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB1aW50MjU2IGxlbiA9IGZyb3plbkFjY291bnRzLmxlbmd0aDsKICAgICAgICB1aW50MjU2IGkgPSAwOwogICAgICAgIHdoaWxlIChpIDwgbGVuKSB7CiAgICAgICAgICAgIGFkZHJlc3MgZnJvemVuQWRkciA9IGZyb3plbkFjY291bnRzW2ldOwogICAgICAgICAgICBpZiAoZnJvemVuQWRkciA9PSBfdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICBUaW1lUmVjIHN0b3JhZ2UgdGltZVBhaXIgPSBmcm96ZW5UaW1lc1tmcm96ZW5BZGRyXVtfbnVtXTsgIAogICAgICAgICAgICAgICAgaWYgKHRpbWVQYWlyLnJlbGVhc2VQZXJpb2RFbmRUaW1lID09IHRpbWVQYWlyLmVuZFRpbWUgfHwgbm93IDw9IHRpbWVQYWlyLmVuZFRpbWUgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aW1lUGFpci5yZWxlYXNlUGVyaW9kRW5kVGltZS5zdWIodGltZVBhaXIuZW5kVGltZSkpOwogICAgICAgICAgICAgICAgfSAgICAKCiAgICAgICAgICAgICAgICBpZiAodGltZVBhaXIucmVsZWFzZVBlcmlvZEVuZFRpbWUgPCBub3cpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gKHRpbWVQYWlyLnJlbGVhc2VQZXJpb2RFbmRUaW1lLnN1Yihub3cpKTsgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaSA9IGkuYWRkKDEpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldCB0aGUgcmVtYWluIG9yaWdpbmFsIHRva2VucyBiZWxvbmcgdG8gYW4gYWNjb3VudCBiZWZvcmUgdGhpcyB0aW1lIGxvY2tpbmcKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdhdGhlck9sZEJhbGFuY2VPZihhZGRyZXNzIF90YXJnZXQpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwogICAgICAgIHJlcXVpcmUoZnJvemVuVGltZXNbX3RhcmdldF0ubGVuZ3RoID09IDApOyAvLyBubyBmcmVlemUgYWN0aW9uIG9uIHRoaXMgYWRkcmVzcwoKICAgICAgICAvLyBzdG9yZSB0aGUgb3JpZ2luYWwgYmFsYW5jZSBpZiB0aGlzIHRoZSBuZXcgZnJlZXplCiAgICAgICAgdWludDI1NiBvcmlnQmFsYW5jZSA9IG93bmVkLmJhbGFuY2VPZihfdGFyZ2V0KTsKICAgICAgICBpZiAob3JpZ0JhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgIG9sZEJhbGFuY2VzW190YXJnZXRdID0gb3JpZ0JhbGFuY2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gb3JpZ0JhbGFuY2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZGV2IGdldCBhbGwgdGhlIHJlbWFpbiBvcmlnaW5hbCB0b2tlbnMgYmVsb25nIHRvIGEgc2VyaWFsIG9mIGFjY291bnRzIGJlZm9yZSB0aGlzIHRpbWUgbG9ja2luZwogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0cyB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdhdGhlckFsbE9sZEJhbGFuY2VPZihhZGRyZXNzW10gX3RhcmdldHMpIHB1YmxpYyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0cy5sZW5ndGggIT0gMCk7CiAgICAgICAgCiAgICAgICAgdWludDI1NiByZXMgPSAwOwogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF90YXJnZXRzLmxlbmd0aDsgaSA9IGkuYWRkKDEpKSB7CiAgICAgICAgICAgIHJlcXVpcmUoX3RhcmdldHNbaV0gIT0gYWRkcmVzcygwKSk7CiAgICAgICAgICAgIHJlcyA9IHJlcy5hZGQoZ2F0aGVyT2xkQmFsYW5jZU9mKF90YXJnZXRzW2ldKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzOwogICAgfQogICAgCiAgICAvKioKICAgICAqIEBkZXYgZnJlZXplIHRoZSBhbW91bnQgb2YgdG9rZW5zIG9mIGFuIGFjY291bnQKICAgICAqCiAgICAgKiBAcGFyYW0gX3RhcmdldCB0aGUgb3duZXIgb2Ygc29tZSBhbW91bnQgb2YgdG9rZW5zCiAgICAgKiBAcGFyYW0gX3ZhbHVlIHRoZSBhbW91bnQgb2YgdGhlIHRva2VucwogICAgICogQHBhcmFtIF9mcm96ZW5FbmRUaW1lIHRoZSBlbmQgdGltZSBvZiB0aGUgbG9jayBwZXJpb2QsIHVuaXQgaXMgc2Vjb25kCiAgICAgKiBAcGFyYW0gX3JlbGVhc2VQZXJpb2QgdGhlIGxvY2tpbmcgcGVyaW9kLCB1bml0IGlzIHNlY29uZAogICAgICovCiAgICBmdW5jdGlvbiBmcmVlemUoYWRkcmVzcyBfdGFyZ2V0LCB1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfZnJvemVuRW5kVGltZSwgdWludDI1NiBfcmVsZWFzZVBlcmlvZCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKGZyb3plblRpbWVzW190YXJnZXRdLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIGdhdGhlck9sZEJhbGFuY2VPZihfdGFyZ2V0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1cGVyLmZyZWV6ZShfdGFyZ2V0LCBfdmFsdWUsIF9mcm96ZW5FbmRUaW1lLCBfcmVsZWFzZVBlcmlvZCk7CiAgICB9ICAgIAoKICAgIC8qKgogICAgICogQGRldiByZWxlYXNlIHRoZSBsb2NrZWQgdG9rZW5zIG93bmVkIGJ5IGFuIGFjY291bnQsIHdoaWNoIGFyZSB0aGUgdG9rZW5zCiAgICAgKiB0aGF0IGJlbG9uZyB0byB0aGlzIGFjY291bnQgYmVmb3JlIGJlaW5nIGxvY2tlZC4KICAgICAqIHRoaXMgbmVlZCB0aGUgcmVsZWFzaW5nLXRvIGFkZHJlc3MgaGFzIGFscmVhZHkgYmVlbiBzZXQuCiAgICAgKgogICAgICogQHBhcmFtIF90YXJnZXQgdGhlIGFjY291bnQgYWRkcmVzcyB0aGF0IGhvbGQgYW4gYW1vdW50IG9mIGxvY2tlZCB0b2tlbnMKICAgICAqLwogICAgZnVuY3Rpb24gcmVsZWFzZU9sZEJhbGFuY2VPZihhZGRyZXNzIF90YXJnZXQpIG9ubHlPd25lciBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX3RhcmdldCAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKHJlbGVhc2VBZGRyc1tfdGFyZ2V0XSAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgLy8gY2hlY2sgZmlyc3RseSB0aGF0IHRoZSBhbGxvd2FuY2Ugb2YgdGhpcyBjb250cmFjdCBmcm9tIF90YXJnZXQgYWNjb3VudCBoYXMgYmVlbiBzZXQKICAgICAgICBhc3NlcnQob3duZWQuYWxsb3dhbmNlKF90YXJnZXQsIHRoaXMpID4gMCk7CgogICAgICAgIC8vIHdlIGdvdCBzb21lIGFtb3VudCBuZWVkIHRvIGJlIHJlbGVhc2VkCiAgICAgICAgaWYgKG9sZEJhbGFuY2VzW190YXJnZXRdID4gMCkgewogICAgICAgICAgICBib29sIGZyZWV6ZVN0YXR1cyA9IG93bmVkLmZyb3plbkFjY291bnQoX3RhcmdldCk7CiAgICAgICAgICAgIG93bmVkLmZyZWV6ZUFjY291bnQoX3RhcmdldCwgZmFsc2UpOwogICAgICAgICAgICBpZiAoIW93bmVkLnRyYW5zZmVyRnJvbShfdGFyZ2V0LCByZWxlYXNlQWRkcnNbX3RhcmdldF0sIG9sZEJhbGFuY2VzW190YXJnZXRdKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpbiB0aGlzIHNpdHVhdGlvbiwgdGhlIGFjY291bnQgc2hvdWxkIGJlIHN0aWxsIGluIG9yaWdpbmFsIGxvY2tlZCBzdGF0dXMKICAgICAgICAgICAgb3duZWQuZnJlZXplQWNjb3VudChfdGFyZ2V0LCBmcmVlemVTdGF0dXMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9ICAgIAoKICAgIC8qKgogICAgICogQGRldiByZWxlYXNlIHRoZSBsb2NrZWQgdG9rZW5zIG93bmVkIGJ5IGFuIGFjY291bnQgd2l0aCBzZXZlcmFsIHN0YWdlcwogICAgICogdGhpcyBuZWVkIHRoZSBjb250cmFjdCBnZXQgYXBwcm92YWwgZnJvbSB0aGUgYWNjb3VudCBieSBjYWxsIGFwcHJvdmUoKSBpbiB0aGUgdG9rZW4gY29udHJhY3QKICAgICAqIGFuZCBhbHNvIG5lZWQgdGhlIHJlbGVhc2luZy10byBhZGRyZXNzIGhhcyBhbHJlYWR5IGJlZW4gc2V0LgogICAgICoKICAgICAqIEBwYXJhbSBfdGFyZ2V0IHRoZSBhY2NvdW50IGFkZHJlc3MgdGhhdCBob2xkIGFuIGFtb3VudCBvZiBsb2NrZWQgdG9rZW5zCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbGVhc2VCeVN0YWdlKGFkZHJlc3MgX3RhcmdldCkgb25seU93bmVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShfdGFyZ2V0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICByZXR1cm4gcmVsZWFzZVdpdGhTdGFnZShfdGFyZ2V0LCByZWxlYXNlQWRkcnNbX3RhcmdldF0pOwogICAgfSAgCn0='.
	

]
