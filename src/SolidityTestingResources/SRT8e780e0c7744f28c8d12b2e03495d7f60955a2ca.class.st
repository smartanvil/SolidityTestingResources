Class {
	#name : #SRT8e780e0c7744f28c8d12b2e03495d7f60955a2ca,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8e780e0c7744f28c8d12b2e03495d7f60955a2ca >> base64 [
	^ ''.
	

]
