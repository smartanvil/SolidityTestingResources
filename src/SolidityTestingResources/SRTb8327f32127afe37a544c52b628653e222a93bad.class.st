Class {
	#name : #SRTb8327f32127afe37a544c52b628653e222a93bad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8327f32127afe37a544c52b628653e222a93bad >> base64 [
	^ ''.
	

]
