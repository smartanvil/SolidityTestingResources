Class {
	#name : #SRT456c4350EEFd17315713b265D8BE8b6063A5Fab8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT456c4350EEFd17315713b265D8BE8b6063A5Fab8 >> base64 [
	^ ''.
	

]
