Class {
	#name : #SRT5f3789907b35DCe5605b00C0bE0a7eCDBFa8A841,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5f3789907b35DCe5605b00C0bE0a7eCDBFa8A841 >> base64 [
	^ ''.
	

]
