Class {
	#name : #SRT8f912ef324d082d901e044bccd5660526dca8f7e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8f912ef324d082d901e044bccd5660526dca8f7e >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgdWludCBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICB1aW50IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIGV2ZW50IE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MgaW5kZXhlZCBwcmV2aW91c093bmVyLCBhZGRyZXNzIGluZGV4ZWQgbmV3T3duZXIpOwoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSBwdWJsaWMgewogICAgb3duZXIgPSBtc2cuc2VuZGVyOwogIH0KCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBBbGxvd3MgdGhlIGN1cnJlbnQgb3duZXIgdG8gdHJhbnNmZXIgY29udHJvbCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXdPd25lci4KICAgKiBAcGFyYW0gbmV3T3duZXIgVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgb3duZXJzaGlwIHRvLgogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICBvd25lciA9IG5ld093bmVyOwogIH0KCn0KLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTc5CiAqLwpjb250cmFjdCBFUkMyMEJhc2ljIHsKICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2KTsKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7Cn0KCi8qKgogKiBAdGl0bGUgQmFzaWMgdG9rZW4KICogQGRldiBCYXNpYyB2ZXJzaW9uIG9mIFN0YW5kYXJkVG9rZW4sIHdpdGggbm8gYWxsb3dhbmNlcy4KICovCmNvbnRyYWN0IEJhc2ljVG9rZW4gaXMgRVJDMjBCYXNpYyB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSB0b2tlbkJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKHRva2VuQmFsYW5jZXNbbXNnLnNlbmRlcl0+PV92YWx1ZSk7CiAgICB0b2tlbkJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG9rZW5CYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIoX3ZhbHVlKTsKICAgIHRva2VuQmFsYW5jZXNbX3RvXSA9IHRva2VuQmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgKiBAZGV2IEdldHMgdGhlIGJhbGFuY2Ugb2YgdGhlIHNwZWNpZmllZCBhZGRyZXNzLgogICogQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0byBxdWVyeSB0aGUgdGhlIGJhbGFuY2Ugb2YuCiAgKiBAcmV0dXJuIEFuIHVpbnQyNTYgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb3duZWQgYnkgdGhlIHBhc3NlZCBhZGRyZXNzLgogICovCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXR1cm4gdG9rZW5CYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KY29udHJhY3QgRVJEIGlzIEJhc2ljVG9rZW4sT3duYWJsZSB7CgogICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgCiAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFUkQiOwogICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJFUkQiOwogICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OyAgCiAgIGFkZHJlc3MgcHVibGljIGV0aFN0b3JlID0gMHhEY2JGRThkNDFENDU1OWIzRUFEMzE3OWZhN0JiM2FkNzdFYURhNTY0OwogICB1aW50MjU2IHB1YmxpYyBSRU1BSU5JTkdfU1VQUExZID0gMTAwMDAwMDAwMDAwICAqICgxMCAqKiB1aW50MjU2KGRlY2ltYWxzKSk7CiAgIGV2ZW50IERlYnVnKHN0cmluZyBtZXNzYWdlLCBhZGRyZXNzIGFkZHIsIHVpbnQyNTYgbnVtYmVyKTsKICAgZXZlbnQgTWVzc2FnZShzdHJpbmcgbWVzc2FnZSk7CiAgICBzdHJpbmcgYnV5TWVzc2FnZTsKICAKICBhZGRyZXNzIHdhbGxldDsKICAgLyoqCiAgICogQGRldiBDb250cnVjdG9yIHRoYXQgZ2l2ZXMgbXNnLnNlbmRlciBhbGwgb2YgZXhpc3RpbmcgdG9rZW5zLgogICAqLwogICAgZnVuY3Rpb24gRVJEKGFkZHJlc3MgX3dhbGxldCkgcHVibGljIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG90YWxTdXBwbHkgPSBSRU1BSU5JTkdfU1VQUExZOwogICAgICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICAgICAgdG9rZW5CYWxhbmNlc1t3YWxsZXRdID0gdG90YWxTdXBwbHk7ICAgLy9TaW5jZSB3ZSBkaXZpZGVkIHRoZSB0b2tlbiBpbnRvIDEwXjE4IHBhcnRzCiAgICB9CiAgICAKICAgICBmdW5jdGlvbiBtaW50KGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB0b2tlbkFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgIHJlcXVpcmUodG9rZW5CYWxhbmNlc1tmcm9tXSA+PSB0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbAogICAgICB0b2tlbkJhbGFuY2VzW3RvXSA9IHRva2VuQmFsYW5jZXNbdG9dLmFkZCh0b2tlbkFtb3VudCk7ICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIGJ1eWVyJ3MgYmFsYW5jZQogICAgICB0b2tlbkJhbGFuY2VzW2Zyb21dID0gdG9rZW5CYWxhbmNlc1tmcm9tXS5zdWIodG9rZW5BbW91bnQpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlCiAgICAgIFJFTUFJTklOR19TVVBQTFkgPSB0b2tlbkJhbGFuY2VzW3dhbGxldF07CiAgICAgIFRyYW5zZmVyKGZyb20sIHRvLCB0b2tlbkFtb3VudCk7IAogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRUb2tlbkJhbGFuY2UoYWRkcmVzcyB1c2VyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICBiYWxhbmNlID0gdG9rZW5CYWxhbmNlc1t1c2VyXTsgLy8gc2hvdyB0b2tlbiBiYWxhbmNlIGluIGZ1bGwgdG9rZW5zIG5vdCBwYXJ0CiAgICAgICAgcmV0dXJuIGJhbGFuY2U7CiAgICB9Cn0KY29udHJhY3QgRVJEVG9rZW5UcmFuc2FjdGlvbiB7CiAgICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKICAgIHN0cnVjdCBUcmFuc2FjdGlvbiB7CiAgICAgICAgLy91aW50IGVudGl0eUlkOwogICAgICAgIGFkZHJlc3MgZW50aXR5SWQ7CiAgICAgICAgdWludCB0cmFuc2FjdGlvbklkOwogICAgICAgIHVpbnQgdHJhbnNhY3Rpb25UeXBlOyAgICAgICAvLzAgZm9yIGRlYml0LCAxIGZvciBjcmVkaXQKICAgICAgICB1aW50IGFtb3VudDsKICAgICAgICBzdHJpbmcgdHJhbnNhY3Rpb25EYXRlOwogICAgICAgIHVpbnQyNTYgdHJhbnNhY3Rpb25UaW1lU3RhbXA7CiAgICAgICAgc3RyaW5nIGN1cnJlbmN5OwogICAgICAgIHN0cmluZyBhY2NvdW50aW5nUGVyaW9kOwogICAgfQogICAgCiAgICBzdHJ1Y3QgQWNjb3VudENoYXJ0IHsKICAgICAgICAvL3VpbnQgZW50aXR5SWQ7CiAgICAgICAgYWRkcmVzcyBlbnRpdHlJZDsKICAgICAgICB1aW50IGFjY291bnRzUGF5YWJsZTsKICAgICAgICB1aW50IGFjY291bnRzUmVjZWl2YWJsZTsKICAgICAgICB1aW50IHNhbGVzOwogICAgICAgIHVpbnQgaXNFbnRpdHlJbml0aWFsaXplZDsKICAgIH0KICAgIAogICAgYWRkcmVzc1tdIGVudGl0aWVzOwogICAgdWludFtdIGFsbFRyYW5zYWN0aW9uSWRzTGlzdDsKICAgIAogICAgdWludFtdIGFsbFRyYW5zYWN0aW9uSWRzQWdhaW5zdEFuRW50aXR5TGlzdDsKICAgIG1hcHBpbmcoYWRkcmVzcz0+dWludFtdKSAgZW50aXR5VHJhbnNhY3Rpb25zSWRzOwogICAgbWFwcGluZyhhZGRyZXNzPT5UcmFuc2FjdGlvbltdKSAgZW50aXR5VHJhbnNhY3Rpb25zOwogICAgbWFwcGluZyhhZGRyZXNzPT5BY2NvdW50Q2hhcnQpICBlbnRpdHlBY2NvdW50Q2hhcnQ7CiAgICBtYXBwaW5nKGFkZHJlc3M9PmJvb2wpIGZyZWV6ZWRUb2tlbnM7CiAgICBhZGRyZXNzIHdhbGxldDsKICAgIEVSRCBwdWJsaWMgdG9rZW47ICAgCiAgICB1aW50MjU2IHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSA9IDA7CiAgICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogICAgdWludDI1NiBwdWJsaWMgcmF0ZVBlcldlaSA9IDEwMDsKICAgIHVpbnQyNTYgcHVibGljIHBlclRyYW5zYWN0aW9uUmF0ZSA9IDEgKiAxMCAqKiAxNDsgICAvLzAuMDAwMSB0b2tlbnMKICAgIAogICAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CiAgZXZlbnQgRW1pdEFjY291bnRDaGFydERldGFpbHMgKGFkZHJlc3MgZW50aXR5SWQsIHVpbnQgYWNjb3VudHNQYXlhYmxlLHVpbnQgYWNjb3VudHNSZWNlaXZhYmxlLHVpbnQgc2FsZXMpOwogIGV2ZW50IEVtaXRUcmFuc2FjdGlvbkRldGFpbHMgKGFkZHJlc3MgZW50aXR5SWQsIHVpbnQgdHJhbnNhY3Rpb25JZCwgdWludCB0cmFuc2FjdGlvblR5cGUsdWludCBhbW91bnQsc3RyaW5nIHRyYW5zYWN0aW9uRGF0ZSxzdHJpbmcgY3VycmVuY3ksIHN0cmluZyBhY2NvdW50aW5nUGVyaW9kKTsKICBldmVudCBFbWl0VHJhbnNhY3Rpb25JZHMgKHVpbnRbXSBpZHMpOwogIGV2ZW50IEVtaXRFbnRpdHlJZHMgKGFkZHJlc3NbXSBpZHMpOwogICAgLy9PYmplY3RzIGZvciB1c2Ugd2l0aGluIHByb2dyYW0KCiAgICBUcmFuc2FjdGlvbiB0cmFuc09iajsKICAgIEFjY291bnRDaGFydCBBY2NvdW50Q2hhcnRPYmo7CiAgICAKICAgIGZ1bmN0aW9uIEVSRFRva2VuVHJhbnNhY3Rpb24oYWRkcmVzcyBfd2FsbGV0KSBwdWJsaWMgewogICAgICAgIHdhbGxldCA9IF93YWxsZXQ7CiAgICAgICAgdG9rZW4gPSBjcmVhdGVUb2tlbkNvbnRyYWN0KHdhbGxldCk7CiAgICAgICAgCiAgICAgICAgLy9hZGQgb3duZXIgZW50aXR5IAogICAgICAgICBlbnRpdGllcy5wdXNoKDApOwogICAgICAgIC8vaW5pdGlhbGl6ZSBhY2NvdW50IGNoYXJ0IAogICAgICAgIEFjY291bnRDaGFydE9iaiA9IEFjY291bnRDaGFydCh7CiAgICAgICAgICAgIGVudGl0eUlkIDogd2FsbGV0LAogICAgICAgICAgICBhY2NvdW50c1BheWFibGU6IDAsCiAgICAgICAgICAgIGFjY291bnRzUmVjZWl2YWJsZTogMCwKICAgICAgICAgICAgc2FsZXM6MCwKICAgICAgICAgICAgaXNFbnRpdHlJbml0aWFsaXplZDoxIAogICAgICAgIH0pOwogICAgICAgIGVudGl0eUFjY291bnRDaGFydFt3YWxsZXRdID0gQWNjb3VudENoYXJ0T2JqOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbkNvbnRyYWN0KGFkZHJlc3Mgd2FsbCkgaW50ZXJuYWwgcmV0dXJucyAoRVJEKSB7CiAgICByZXR1cm4gbmV3IEVSRCh3YWxsKTsKICAgfQogICAgCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOwogICAgfQogICAgCiAgICAvLyBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICAgLy8gTWluaW11bSBwdXJjaGFzZSBjYW4gYmUgb2YgMSBFVEgKICAKICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgYmVuZWZpY2lhcnkpIHB1YmxpYyBwYXlhYmxlIHsKICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkgIT0gMHgwKTsKCiAgICB1aW50MjU2IHdlaUFtb3VudCA9IG1zZy52YWx1ZTsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGdpdmVuCiAgICB1aW50MjU2IHRva2VucyA9IHdlaUFtb3VudC5tdWwocmF0ZVBlcldlaSk7CiAgIAogICAgdG9rZW4ubWludCh3YWxsZXQsIGJlbmVmaWNpYXJ5LCB0b2tlbnMpOyAKICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgIGZvcndhcmRGdW5kcygpOwogIH0KICAgLy8gc2VuZCBldGhlciB0byB0aGUgZnVuZCBjb2xsZWN0aW9uIHdhbGxldAogIC8vIG92ZXJyaWRlIHRvIGNyZWF0ZSBjdXN0b20gZnVuZCBmb3J3YXJkaW5nIG1lY2hhbmlzbXMKICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICB3YWxsZXQudHJhbnNmZXIobXNnLnZhbHVlKTsKICB9CiAgICAvL0FkZCB0cmFuc2FjdGlvbiBhZ2FpbnN0IGVudGl0eQogICAgZnVuY3Rpb24gQWRkVHJhbnNhY3Rpb25BZ2FpbnN0RXhpc3RpbmdFbnRpdHkoYWRkcmVzcyBlbnRJZCx1aW50IHRyYW5zVHlwZSx1aW50IGFtdCxzdHJpbmcgY3Vyciwgc3RyaW5nIGFjY1ByKSBwdWJsaWMgCiAgICB7CiAgICAgICAgcmVxdWlyZSAoZW50aXR5QWNjb3VudENoYXJ0W2VudElkXS5pc0VudGl0eUluaXRpYWxpemVkID09IDEpOwogICAgICAgIHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSA9IHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSArIDE7CiAgICAgICAgIHRyYW5zT2JqID0gVHJhbnNhY3Rpb24oewogICAgICAgICAgICBlbnRpdHlJZCA6IGVudElkLAogICAgICAgICAgICB0cmFuc2FjdGlvbklkIDogdHJhbnNhY3Rpb25JZFNlcXVlbmNlLAogICAgICAgICAgICB0cmFuc2FjdGlvblR5cGU6IHRyYW5zVHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbXQsCiAgICAgICAgICAgIHRyYW5zYWN0aW9uRGF0ZSA6ICJOQSIsCiAgICAgICAgICAgIHRyYW5zYWN0aW9uVGltZVN0YW1wOiBub3csCiAgICAgICAgICAgIGN1cnJlbmN5IDogY3VyciwKICAgICAgICAgICAgYWNjb3VudGluZ1BlcmlvZCA6IGFjY1ByCiAgICAgICAgICB9KTsKICAgICAgICAgIAogICAgICAgICAgZW50aXR5VHJhbnNhY3Rpb25zW2VudElkXS5wdXNoKHRyYW5zT2JqKTsKICAgICAgICAgIGFsbFRyYW5zYWN0aW9uSWRzTGlzdC5wdXNoKHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSk7CiAgICAgICAgICBlbnRpdHlUcmFuc2FjdGlvbnNJZHNbZW50SWRdLnB1c2godHJhbnNhY3Rpb25JZFNlcXVlbmNlKTsKICAgICAgICAgIE1ha2VUb2tlbkNyZWRpdEFuZERlYml0RW50cnkobXNnLnNlbmRlcik7CiAgICB9CiAgICBmdW5jdGlvbiBNYWtlVG9rZW5DcmVkaXRBbmREZWJpdEVudHJ5KGFkZHJlc3MgZW50SWQpIGludGVybmFsIHsKICAgIAogICAgICAgICAgdHJhbnNhY3Rpb25JZFNlcXVlbmNlID0gdHJhbnNhY3Rpb25JZFNlcXVlbmNlICsgMTsKICAgICAgICAgLy9kZWJpdCBlbnRyeQogICAgICAgICB0cmFuc09iaiA9IFRyYW5zYWN0aW9uKHsKICAgICAgICAgICAgZW50aXR5SWQgOiB3YWxsZXQsICAgLy9vd25lciBlbnRpdHkKICAgICAgICAgICAgdHJhbnNhY3Rpb25JZCA6IHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSwKICAgICAgICAgICAgdHJhbnNhY3Rpb25UeXBlOiAwLCAvL2RlYml0IHR5cGUKICAgICAgICAgICAgYW1vdW50OiBwZXJUcmFuc2FjdGlvblJhdGUsCiAgICAgICAgICAgIHRyYW5zYWN0aW9uRGF0ZSA6ICJOQSIsCiAgICAgICAgICAgIHRyYW5zYWN0aW9uVGltZVN0YW1wOiBub3csCiAgICAgICAgICAgIGN1cnJlbmN5IDogIkVSRCIsCiAgICAgICAgICAgIGFjY291bnRpbmdQZXJpb2QgOiAiIgogICAgICAgICAgfSk7CiAgICAgICAgICBlbnRpdHlUcmFuc2FjdGlvbnNbZW50SWRdLnB1c2godHJhbnNPYmopOwogICAgICAgICAgYWxsVHJhbnNhY3Rpb25JZHNMaXN0LnB1c2godHJhbnNhY3Rpb25JZFNlcXVlbmNlKTsKICAgICAgICAgIGVudGl0eVRyYW5zYWN0aW9uc0lkc1tlbnRJZF0ucHVzaCh0cmFuc2FjdGlvbklkU2VxdWVuY2UpOwogICAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSA9IHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSArIDE7CiAgICAgICAgIC8vY3JlZGl0IGVudHJ5CiAgICAgICAgIHRyYW5zT2JqID0gVHJhbnNhY3Rpb24oewogICAgICAgICAgICBlbnRpdHlJZCA6IGVudElkLAogICAgICAgICAgICB0cmFuc2FjdGlvbklkIDogdHJhbnNhY3Rpb25JZFNlcXVlbmNlLAogICAgICAgICAgICB0cmFuc2FjdGlvblR5cGU6IDEsICAgICAvL2NyZWRpdAogICAgICAgICAgICBhbW91bnQ6IHBlclRyYW5zYWN0aW9uUmF0ZSwKICAgICAgICAgICAgdHJhbnNhY3Rpb25EYXRlIDogIk5BIiwKICAgICAgICAgICAgdHJhbnNhY3Rpb25UaW1lU3RhbXA6IG5vdywKICAgICAgICAgICAgY3VycmVuY3kgOiAiRVJEIiwKICAgICAgICAgICAgYWNjb3VudGluZ1BlcmlvZCA6ICIiCiAgICAgICAgICB9KTsKICAgICAgICAgIAogICAgICAgICAgZW50aXR5VHJhbnNhY3Rpb25zW2VudElkXS5wdXNoKHRyYW5zT2JqKTsKICAgICAgICAgIGFsbFRyYW5zYWN0aW9uSWRzTGlzdC5wdXNoKHRyYW5zYWN0aW9uSWRTZXF1ZW5jZSk7CiAgICAgICAgICBlbnRpdHlUcmFuc2FjdGlvbnNJZHNbZW50SWRdLnB1c2godHJhbnNhY3Rpb25JZFNlcXVlbmNlKTsKICAgIH0KICAgIC8vYWRkIGFjY291dCBjaGFydCBhZ2FpbnN0IGVudGl0eQogICAgZnVuY3Rpb24gdXBkYXRlQWNjb3VudENoYXJ0QWdhaW5zdEV4aXN0aW5nRW50aXR5KGFkZHJlc3MgZW50SWQsIHVpbnQgYWNjUGF5YWJsZSwgdWludCBhY2NSZWNlaXZhYmxlLHVpbnQgc2FsZSkgcHVibGljCiAgICB7CiAgICAgICAgcmVxdWlyZSh0b2tlbi5nZXRUb2tlbkJhbGFuY2UobXNnLnNlbmRlcik+PXBlclRyYW5zYWN0aW9uUmF0ZSk7CiAgICAgICAgcmVxdWlyZShmcmVlemVkVG9rZW5zW2VudElkXSA9PSBmYWxzZSk7CiAgICAgICAgcmVxdWlyZSAoZW50aXR5QWNjb3VudENoYXJ0W2VudElkXS5pc0VudGl0eUluaXRpYWxpemVkID09IDEpOwogICAgICAgIHRva2VuLm1pbnQobXNnLnNlbmRlciwgd2FsbGV0LCBwZXJUcmFuc2FjdGlvblJhdGUpOwogICAgICAgIHJlcXVpcmUoZnJlZXplZFRva2Vuc1tlbnRJZF0gPT0gZmFsc2UpOwogICAgCiAgICAgICAKICAgICAgICBBY2NvdW50Q2hhcnRPYmogPSBBY2NvdW50Q2hhcnQoewogICAgICAgICAgICBlbnRpdHlJZCA6IGVudElkLAogICAgICAgICAgICBhY2NvdW50c1BheWFibGU6IGFjY1BheWFibGUsCiAgICAgICAgICAgIGFjY291bnRzUmVjZWl2YWJsZTogYWNjUmVjZWl2YWJsZSwKICAgICAgICAgICAgc2FsZXM6c2FsZSwKICAgICAgICAgICAgaXNFbnRpdHlJbml0aWFsaXplZDoxCiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgZW50aXR5QWNjb3VudENoYXJ0W2VudElkXSA9IEFjY291bnRDaGFydE9iajsKICAgICAgICAKICAgICAgICAgTWFrZVRva2VuQ3JlZGl0QW5kRGViaXRFbnRyeShtc2cuc2VuZGVyKTsKICAgIH0KICAgIGZ1bmN0aW9uIGFkZEVudGl0eShhZGRyZXNzIGVudElkKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKHRva2VuLmdldFRva2VuQmFsYW5jZShtc2cuc2VuZGVyKT49cGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICByZXF1aXJlKGZyZWV6ZWRUb2tlbnNbZW50SWRdID09IGZhbHNlKTsKICAgICAgICByZXF1aXJlIChlbnRpdHlBY2NvdW50Q2hhcnRbZW50SWRdLmlzRW50aXR5SW5pdGlhbGl6ZWQgPT0gMCk7CiAgICAgICAgdG9rZW4ubWludChtc2cuc2VuZGVyLCB3YWxsZXQsIHBlclRyYW5zYWN0aW9uUmF0ZSk7CiAgICAgICAKICAgICAgICBlbnRpdGllcy5wdXNoKGVudElkKTsKICAgICAgICAvL2luaXRpYWxpemUgYWNjb3VudCBjaGFydCAKICAgICAgICBBY2NvdW50Q2hhcnRPYmogPSBBY2NvdW50Q2hhcnQoewogICAgICAgICAgICBlbnRpdHlJZCA6IGVudElkLAogICAgICAgICAgICBhY2NvdW50c1BheWFibGU6IDAsCiAgICAgICAgICAgIGFjY291bnRzUmVjZWl2YWJsZTogMCwKICAgICAgICAgICAgc2FsZXM6MCwKICAgICAgICAgICAgaXNFbnRpdHlJbml0aWFsaXplZDoxIAogICAgICAgIH0pOwogICAgICAgIGVudGl0eUFjY291bnRDaGFydFtlbnRJZF0gPSBBY2NvdW50Q2hhcnRPYmo7CiAgICAgICAgTWFrZVRva2VuQ3JlZGl0QW5kRGViaXRFbnRyeShtc2cuc2VuZGVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0QWxsRW50aXR5SWRzKCkgcHVibGljIHJldHVybnMgKGFkZHJlc3NbXSBlbnRpdHlMaXN0KSAKICAgIHsKICAgICAgICByZXF1aXJlKHRva2VuLmdldFRva2VuQmFsYW5jZShtc2cuc2VuZGVyKT49cGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICB0b2tlbi5taW50KG1zZy5zZW5kZXIsIHdhbGxldCwgcGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICByZXF1aXJlKGZyZWV6ZWRUb2tlbnNbbXNnLnNlbmRlcl0gPT0gZmFsc2UpOwogICAgICAgIE1ha2VUb2tlbkNyZWRpdEFuZERlYml0RW50cnkobXNnLnNlbmRlcik7CiAgICAgICAgRW1pdEVudGl0eUlkcyhlbnRpdGllcyk7CiAgICAgICAgcmV0dXJuIGVudGl0aWVzOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRBbGxUcmFuc2FjdGlvbklkc0J5RW50aXR5SWQoYWRkcmVzcyBlbnRJZCkgcHVibGljIHJldHVybnMgKHVpbnRbXSB0cmFuc2FjdGlvbklkcykKICAgIHsKICAgICAgICByZXF1aXJlKHRva2VuLmdldFRva2VuQmFsYW5jZShtc2cuc2VuZGVyKT49cGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICByZXF1aXJlKGZyZWV6ZWRUb2tlbnNbZW50SWRdID09IGZhbHNlKTsKICAgICAgICB0b2tlbi5taW50KG1zZy5zZW5kZXIsIHdhbGxldCwgcGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICBNYWtlVG9rZW5DcmVkaXRBbmREZWJpdEVudHJ5KG1zZy5zZW5kZXIpOwogICAgICAgIEVtaXRUcmFuc2FjdGlvbklkcyhlbnRpdHlUcmFuc2FjdGlvbnNJZHNbZW50SWRdKTsKICAgICAgICByZXR1cm4gZW50aXR5VHJhbnNhY3Rpb25zSWRzW2VudElkXTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0QWxsVHJhbnNhY3Rpb25JZHMoKSBwdWJsaWMgcmV0dXJucyAodWludFtdIHRyYW5zYWN0aW9uSWRzKQogICAgewogICAgICAgIHJlcXVpcmUodG9rZW4uZ2V0VG9rZW5CYWxhbmNlKG1zZy5zZW5kZXIpPj1wZXJUcmFuc2FjdGlvblJhdGUpOwogICAgICAgIHJlcXVpcmUoZnJlZXplZFRva2Vuc1ttc2cuc2VuZGVyXSA9PSBmYWxzZSk7CiAgICAgICAgdG9rZW4ubWludChtc2cuc2VuZGVyLHdhbGxldCxwZXJUcmFuc2FjdGlvblJhdGUpOwogICAgICAgIE1ha2VUb2tlbkNyZWRpdEFuZERlYml0RW50cnkobXNnLnNlbmRlcik7CiAgICAgICAgRW1pdFRyYW5zYWN0aW9uSWRzKGFsbFRyYW5zYWN0aW9uSWRzTGlzdCk7CiAgICAgICAgcmV0dXJuIGFsbFRyYW5zYWN0aW9uSWRzTGlzdDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25CeVRyYW5zYWN0aW9uSWQodWludCB0cmFuc0lkKSBwdWJsaWMgCiAgICB7CiAgICAgICAgcmVxdWlyZSh0b2tlbi5nZXRUb2tlbkJhbGFuY2UobXNnLnNlbmRlcik+PXBlclRyYW5zYWN0aW9uUmF0ZSk7CiAgICAgICAgcmVxdWlyZShmcmVlemVkVG9rZW5zW21zZy5zZW5kZXJdID09IGZhbHNlKTsKICAgICAgICB0b2tlbi5taW50KG1zZy5zZW5kZXIsIHdhbGxldCwgcGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICBNYWtlVG9rZW5DcmVkaXRBbmREZWJpdEVudHJ5KG1zZy5zZW5kZXIpOwogICAgICAgIGZvcih1aW50IGk9MDsgaTxlbnRpdGllcy5sZW5ndGg7aSsrKQogICAgICAgIHsKICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggYWxsIHRoZSBlbml0aXRpZXMgLCBnZXRzIGVhY2ggZW50aXR5IGJ5IGVudGl0eVtpXQogICAgICAgICAgICBUcmFuc2FjdGlvbltdIHN0b3JhZ2UgdHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWQgPSBlbnRpdHlUcmFuc2FjdGlvbnNbZW50aXRpZXNbaV1dOwogICAgICAgICAgICBmb3IgKHVpbnQgaj0wO2o8dHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWQubGVuZ3RoO2orKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggYWxsIHRoZSB0cmFuc2FjdGlvbnMgbGlzdCBhZ2FpbnN0IGVhY2ggZW50aXR5CiAgICAgICAgICAgICAgICAvLyBjaGVja3MgaWYgdHJhbnNhY3Rpb24gaWQgaXMgbWF0Y2hlZCByZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBvYmplY3QKICAgICAgICAgICAgICAgIGlmKHRyYW5zYWN0aW9uc0xpc3RCeUVudGl0eUlkW2pdLnRyYW5zYWN0aW9uSWQ9PXRyYW5zSWQpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRW1pdFRyYW5zYWN0aW9uRGV0YWlscyAodHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWRbal0uZW50aXR5SWQsdHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWRbal0udHJhbnNhY3Rpb25JZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uc0xpc3RCeUVudGl0eUlkW2pdLnRyYW5zYWN0aW9uVHlwZSx0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS5hbW91bnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS50cmFuc2FjdGlvbkRhdGUsdHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWRbal0uY3VycmVuY3ksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS5hY2NvdW50aW5nUGVyaW9kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgRW1pdFRyYW5zYWN0aW9uRGV0YWlscyAoMCwwLDAsMCwiTkEiLCJOQSIsIk5BIik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQnlUcmFuc2FjdGlvbkFuZEVudGl0eUlkKGFkZHJlc3MgZW50SWQsIHVpbnQgdHJhbnNJZCkgcHVibGljIAogICAgewogICAgICAgIHJlcXVpcmUodG9rZW4uZ2V0VG9rZW5CYWxhbmNlKG1zZy5zZW5kZXIpPj1wZXJUcmFuc2FjdGlvblJhdGUpOwogICAgICAgIHJlcXVpcmUoZnJlZXplZFRva2Vuc1ttc2cuc2VuZGVyXSA9PSBmYWxzZSk7CiAgICAgICAgdG9rZW4ubWludChtc2cuc2VuZGVyLCB3YWxsZXQsIHBlclRyYW5zYWN0aW9uUmF0ZSk7CiAgICAgICAgTWFrZVRva2VuQ3JlZGl0QW5kRGViaXRFbnRyeShtc2cuc2VuZGVyKTsKICAgICAgICAvLyBnZXRzIGVhY2ggZW50aXR5IGJ5IGVudGl0eVtlbnRJZF0KICAgICAgICBUcmFuc2FjdGlvbltdIHN0b3JhZ2UgdHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWQgPSBlbnRpdHlUcmFuc2FjdGlvbnNbZW50SWRdOwogICAgICAgIGZvciAodWludCBqPTA7ajx0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZC5sZW5ndGg7aisrKQogICAgICAgIHsKICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggYWxsIHRoZSB0cmFuc2FjdGlvbnMgbGlzdCBhZ2FpbnN0IGVhY2ggZW50aXR5CiAgICAgICAgICAgIC8vIGNoZWNrcyBpZiB0cmFuc2FjdGlvbiBpZCBpcyBtYXRjaGVkIHJldHVybnMgdGhlIHRyYW5zYWN0aW9uIG9iamVjdAogICAgICAgICAgICBpZih0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS50cmFuc2FjdGlvbklkPT10cmFuc0lkKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBFbWl0VHJhbnNhY3Rpb25EZXRhaWxzICh0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS5lbnRpdHlJZCx0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS50cmFuc2FjdGlvbklkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zTGlzdEJ5RW50aXR5SWRbal0udHJhbnNhY3Rpb25UeXBlLHRyYW5zYWN0aW9uc0xpc3RCeUVudGl0eUlkW2pdLmFtb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uc0xpc3RCeUVudGl0eUlkW2pdLnRyYW5zYWN0aW9uRGF0ZSx0cmFuc2FjdGlvbnNMaXN0QnlFbnRpdHlJZFtqXS5jdXJyZW5jeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uc0xpc3RCeUVudGl0eUlkW2pdLmFjY291bnRpbmdQZXJpb2QpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEVtaXRUcmFuc2FjdGlvbkRldGFpbHMgKDAsMCwwLDAsIk5BIiwiTkEiLCJOQSIpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBnZXRBY2NvdW50Q2hhcnREZXRhaWxzQnlFbnRpdHlJZChhZGRyZXNzIGVudElkKSBwdWJsaWMKICAgIHsKICAgICAgICByZXF1aXJlKHRva2VuLmdldFRva2VuQmFsYW5jZShtc2cuc2VuZGVyKT49cGVyVHJhbnNhY3Rpb25SYXRlKTsKICAgICAgICByZXF1aXJlKGZyZWV6ZWRUb2tlbnNbbXNnLnNlbmRlcl0gPT0gZmFsc2UpOwogICAgICAgIHRva2VuLm1pbnQobXNnLnNlbmRlciwgd2FsbGV0LCBwZXJUcmFuc2FjdGlvblJhdGUpOwogICAgICAgIE1ha2VUb2tlbkNyZWRpdEFuZERlYml0RW50cnkobXNnLnNlbmRlcik7CiAgICAgICAgRW1pdEFjY291bnRDaGFydERldGFpbHMgKGVudGl0eUFjY291bnRDaGFydFtlbnRJZF0uZW50aXR5SWQsZW50aXR5QWNjb3VudENoYXJ0W2VudElkXS5hY2NvdW50c1BheWFibGUsCiAgICAgICAgICAgICAgICBlbnRpdHlBY2NvdW50Q2hhcnRbZW50SWRdLmFjY291bnRzUmVjZWl2YWJsZSxlbnRpdHlBY2NvdW50Q2hhcnRbZW50SWRdLnNhbGVzKTsKICAgIH0KICAgICBmdW5jdGlvbiBzaG93TXlUb2tlbkJhbGFuY2UoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b2tlbkJhbGFuY2UpIHsKICAgICAgICB0b2tlbkJhbGFuY2UgPSB0b2tlbi5nZXRUb2tlbkJhbGFuY2UobXNnLnNlbmRlcik7CiAgICAgICAgcmV0dXJuIHRva2VuQmFsYW5jZTsKICAgIH0KICAgIAogICAgIGZ1bmN0aW9uIGZyZWV6ZVRva2Vuc09mT25lVXNlcihhZGRyZXNzIGVudGl0eUlkKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSB3YWxsZXQpOwogICAgICAgIGZyZWV6ZWRUb2tlbnNbZW50aXR5SWRdID0gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gVW5mcmVlemVUb2tlbnNPZk9uZVVzZXIoYWRkcmVzcyBlbnRpdHlJZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gd2FsbGV0KTsKICAgICAgICBmcmVlemVkVG9rZW5zW2VudGl0eUlkXSA9IGZhbHNlOwogICAgfQp9'.
	

]
