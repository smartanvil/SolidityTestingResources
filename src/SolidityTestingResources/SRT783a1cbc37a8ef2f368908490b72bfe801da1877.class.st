Class {
	#name : #SRT783a1cbc37a8ef2f368908490b72bfe801da1877,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT783a1cbc37a8ef2f368908490b72bfe801da1877 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9CgoKY29udHJhY3QgRVJDMjAgewogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7fQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQp9CgoKY29udHJhY3QgV2hpdGVMaXN0IHsKICAgZnVuY3Rpb24gY2hlY2tNZW1iZXJMZXZlbCAoYWRkcmVzcyBhZGRyKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50KSB7fQp9CgoKY29udHJhY3QgUHJlc2FsZVBvb2wgewoKICAvLyBTYWZlTWF0aCBpcyBhIGxpYnJhcnkgdG8gZW5zdXJlIHRoYXQgbWF0aCBvcGVyYXRpb25zIGRvIG5vdCBoYXZlIG92ZXJmbG93IGVycm9ycwogIC8vIGh0dHBzOi8vemVwcGVsaW4tc29saWRpdHkucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L3NhZmVtYXRoLmh0bWwKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDsKICAKICAvLyBUaGUgY29udHJhY3QgaGFzIDMgc3RhZ2VzOgogIC8vIDEgLSBUaGUgaW5pdGlhbCBzdGF0ZS4gVGhlIG93bmVyIGlzIGFibGUgdG8gYWRkIGFkZHJlc3NlcyB0byB0aGUgd2hpdGVsaXN0LCBhbmQgYW55IHdoaXRlbGlzdGVkIGFkZHJlc3NlcyBjYW4gZGVwb3NpdCBvciB3aXRoZHJhdyBldGggdG8gdGhlIGNvbnRyYWN0LgogIC8vIDIgLSBUaGUgb3duZXIgaGFzIGNsb3NlZCB0aGUgY29udHJhY3QgZm9yIGZ1cnRoZXIgZGVwb3NpdHMuIFdoaXRlbGlzdGVkIGFkZHJlc3NlcyBjYW4gc3RpbGwgd2l0aGRyYXcgZXRoIGZyb20gdGhlIGNvbnRyYWN0LgogIC8vIDMgLSBUaGUgZXRoIGlzIHNlbnQgZnJvbSB0aGUgY29udHJhY3QgdG8gdGhlIHJlY2VpdmVyLiBVbnVzZWQgZXRoIGNhbiBiZSBjbGFpbWVkIGJ5IGNvbnRyaWJ1dG9ycyBpbW1lZGlhdGVseS4gT25jZSB0b2tlbnMgYXJlIHNlbnQgdG8gdGhlIGNvbnRyYWN0LAogIC8vICAgICB0aGUgb3duZXIgZW5hYmxlcyB3aXRoZHJhd2FscyBhbmQgY29udHJpYnV0b3JzIGNhbiB3aXRoZHJhdyB0aGVpciB0b2tlbnMuCiAgdWludDggcHVibGljIGNvbnRyYWN0U3RhZ2UgPSAxOwogIAogIC8vIFRoZXNlIHZhcmlhYmxlcyBhcmUgc2V0IGF0IHRoZSB0aW1lIG9mIGNvbnRyYWN0IGNyZWF0aW9uCiAgLy8gdGhlIGFkZHJlc3MgdGhhdCBjcmVhdGVzIHRoZSBjb250cmFjdAogIGFkZHJlc3MgcHVibGljIG93bmVyOwogIC8vIHRoZSBtaW5pbXVtIGV0aCBhbW91bnQgKGluIHdlaSkgdGhhdCBjYW4gYmUgc2VudCBieSBhIHdoaXRlbGlzdGVkIGFkZHJlc3MKICB1aW50IHB1YmxpYyBjb250cmlidXRpb25NaW47CiAgLy8gdGhlIG1heGltdW0gZXRoIGFtb3VudCAoaW4gd2VpKSB0aGF0IGNhbiBiZSBzZW50IGJ5IGEgd2hpdGVsaXN0ZWQgYWRkcmVzcwogIHVpbnRbXSBwdWJsaWMgY29udHJpYnV0aW9uQ2FwczsKICAvLyB0aGUgJSBvZiB0b2tlbnMga2VwdCBieSB0aGUgY29udHJhY3Qgb3duZXIKICB1aW50IHB1YmxpYyBmZWVQY3Q7CiAgLy8gdGhlIGFkZHJlc3MgdGhhdCB0aGUgcG9vbCB3aWxsIGJlIHBhaWQgb3V0IHRvCiAgYWRkcmVzcyBwdWJsaWMgcmVjZWl2ZXJBZGRyZXNzOwogIAogIHVpbnQgY29uc3RhbnQgcHVibGljIG1heEdhc1ByaWNlID0gNTAwMDAwMDAwMDA7CiAgV2hpdGVMaXN0IHB1YmxpYyB3aGl0ZWxpc3RDb250cmFjdDsKICAKICAvLyBUaGVzZSB2YXJpYWJsZXMgYXJlIGFsbCBpbml0aWFsbHkgc2V0IHRvIDAgYW5kIHdpbGwgYmUgc2V0IGF0IHNvbWUgcG9pbnQgZHVyaW5nIHRoZSBjb250cmFjdAogIC8vIHRoZSBhbW91bnQgb2YgZXRoIChpbiB3ZWkpIHByZXNlbnQgaW4gdGhlIGNvbnRyYWN0IHdoZW4gaXQgd2FzIHN1Ym1pdHRlZAogIHVpbnQgcHVibGljIGZpbmFsQmFsYW5jZTsKICAvLyB0aGUgJSBvZiBjb250cmlidXRlZCBldGggdG8gYmUgcmVmdW5kZWQgdG8gd2hpdGVsaXN0ZWQgYWRkcmVzc2VzIChzZXQgaW4gc3RhZ2UgMykKICB1aW50W10gcHVibGljIGV0aFJlZnVuZEFtb3VudDsKICAvLyB0aGUgZGVmYXVsdCB0b2tlbiBjb250cmFjdCB0byBiZSB1c2VkIGZvciB3aXRoZHJhd2luZyB0b2tlbnMgaW4gc3RhZ2UgMwogIGFkZHJlc3MgcHVibGljIGFjdGl2ZVRva2VuOwogIAogIC8vIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGhvbGRpbmcgdGhlIGNvbnRyaWJ1dGlvbiBhbW91bnQsIGNhcCwgZXRoIHJlZnVuZCBzdGF0dXMsIGFuZCB0b2tlbiB3aXRoZHJhd2FsIHN0YXR1cyBmb3IgZWFjaCB3aGl0ZWxpc3RlZCBhZGRyZXNzCiAgc3RydWN0IENvbnRyaWJ1dG9yIHsKICAgIGJvb2wgYXV0aG9yaXplZDsKICAgIHVpbnQgZXRoUmVmdW5kOwogICAgdWludCBiYWxhbmNlOwogICAgdWludCBjYXA7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHRva2Vuc0NsYWltZWQ7CiAgfQogIC8vIGEgbWFwcGluZyB0aGF0IGhvbGRzIHRoZSBjb250cmlidXRvciBzdHJ1Y3QgZm9yIGVhY2ggd2hpdGVsaXN0ZWQgYWRkcmVzcwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gQ29udHJpYnV0b3IpIHdoaXRlbGlzdDsKICAKICAvLyBhIGRhdGEgc3RydWN0dXJlIGZvciBob2xkaW5nIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdG9rZW4gd2l0aGRyYXdhbHMuCiAgc3RydWN0IFRva2VuQWxsb2NhdGlvbiB7CiAgICBFUkMyMCB0b2tlbjsKICAgIHVpbnRbXSBwY3Q7CiAgICB1aW50IGJhbGFuY2VSZW1haW5pbmc7CiAgfQogIC8vIGEgbWFwcGluZyB0aGF0IGhvbGRzIHRoZSB0b2tlbiBhbGxvY2F0aW9uIHN0cnVjdCBmb3IgZWFjaCB0b2tlbiBhZGRyZXNzCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBUb2tlbkFsbG9jYXRpb24pIGRpc3RyaWJ1dGlvbjsKICAKICAKICAvLyB0aGlzIG1vZGlmaWVyIGlzIHVzZWQgZm9yIGZ1bmN0aW9ucyB0aGF0IGNhbiBvbmx5IGJlIGFjY2Vzc2VkIGJ5IHRoZSBjb250cmFjdCBjcmVhdG9yCiAgbW9kaWZpZXIgb25seU93bmVyICgpIHsKICAgIHJlcXVpcmUgKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CiAgCiAgLy8gdGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIHByZXZlbnQgcmUtZW50cmFuY3kgZXhwbG9pdHMgZHVyaW5nIGNvbnRyYWN0ID4gY29udHJhY3QgaW50ZXJhY3Rpb24KICBib29sIGxvY2tlZDsKICBtb2RpZmllciBub1JlZW50cmFuY3koKSB7CiAgICByZXF1aXJlKCFsb2NrZWQpOwogICAgbG9ja2VkID0gdHJ1ZTsKICAgIF87CiAgICBsb2NrZWQgPSBmYWxzZTsKICB9CiAgCiAgZXZlbnQgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZCAoYWRkcmVzcyBjb250cmlidXRvciwgdWludCB0b3RhbEJhbGFuY2UpOwogIGV2ZW50IFRva2Vuc1dpdGhkcmF3biAoYWRkcmVzcyByZWNlaXZlciwgdWludCBhbW91bnQpOwogIGV2ZW50IEV0aFJlZnVuZGVkIChhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCk7CiAgZXZlbnQgV2l0aGRyYXdhbHNPcGVuIChhZGRyZXNzIHRva2VuQWRkcik7CiAgZXZlbnQgRVJDMjIzUmVjZWl2ZWQgKGFkZHJlc3MgdG9rZW4sIHVpbnQgdmFsdWUpOwogIGV2ZW50IEV0aFJlZnVuZFJlY2VpdmVkIChhZGRyZXNzIHNlbmRlciwgdWludCBhbW91bnQpOwogICAKICAvLyBUaGVzZSBhcmUgaW50ZXJuYWwgZnVuY3Rpb25zIHVzZWQgZm9yIGNhbGN1bGF0aW5nIGZlZXMsIGV0aCBhbmQgdG9rZW4gYWxsb2NhdGlvbnMgYXMgJQogIC8vIHJldHVybnMgYSB2YWx1ZSBhcyBhICUgYWNjdXJhdGUgdG8gMjAgZGVjaW1hbCBwb2ludHMKICBmdW5jdGlvbiBfdG9QY3QgKHVpbnQgbnVtZXJhdG9yLCB1aW50IGRlbm9taW5hdG9yICkgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gbnVtZXJhdG9yLm11bCgxMCAqKiAyMCkgLyBkZW5vbWluYXRvcjsKICB9CiAgCiAgLy8gcmV0dXJucyAlIG9mIGFueSBudW1iZXIsIHdoZXJlICUgZ2l2ZW4gd2FzIGdlbmVyYXRlZCB3aXRoIHRvUGN0CiAgZnVuY3Rpb24gX2FwcGx5UGN0ICh1aW50IG51bWVyYXRvciwgdWludCBwY3QpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIG51bWVyYXRvci5tdWwocGN0KSAvICgxMCAqKiAyMCk7CiAgfQogIAogIC8vIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGF0IHRoZSB0aW1lIG9mIGNvbnRyYWN0IGNyZWF0aW9uLAogIC8vIGl0IHNldHMgdGhlIGluaXRpYWwgdmFyaWFibGVzIGFuZCB3aGl0ZWxpc3RzIHRoZSBjb250cmFjdCBvd25lci4KICBmdW5jdGlvbiBQcmVzYWxlUG9vbChhZGRyZXNzIHJlY2VpdmVyQWRkciwgYWRkcmVzcyB3aGl0ZWxpc3RBZGRyLCB1aW50IGluZGl2aWR1YWxNaW4sIHVpbnRbXSBjYXBBbW91bnRzLCB1aW50IGZlZSkgcHVibGljIHsKICAgIHJlcXVpcmUgKHJlY2VpdmVyQWRkciAhPSAweDAwKTsKICAgIHJlcXVpcmUgKGZlZSA8IDEwMCk7CiAgICByZXF1aXJlICgxMDAwMDAwMDAwMDAwMDAwMDAgPD0gaW5kaXZpZHVhbE1pbik7CiAgICByZXF1aXJlIChjYXBBbW91bnRzLmxlbmd0aD4xICYmIGNhcEFtb3VudHMubGVuZ3RoPDI1Nik7CiAgICBmb3IgKHVpbnQ4IGk9MTsgaTxjYXBBbW91bnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHJlcXVpcmUgKGNhcEFtb3VudHNbaV0gPD0gY2FwQW1vdW50c1swXSk7CiAgICB9CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICByZWNlaXZlckFkZHJlc3MgPSByZWNlaXZlckFkZHI7CiAgICBjb250cmlidXRpb25NaW4gPSBpbmRpdmlkdWFsTWluOwogICAgY29udHJpYnV0aW9uQ2FwcyA9IGNhcEFtb3VudHM7CiAgICBmZWVQY3QgPSBfdG9QY3QoZmVlLDEwMCk7CiAgICB3aGl0ZWxpc3RDb250cmFjdCA9IFdoaXRlTGlzdCh3aGl0ZWxpc3RBZGRyKTsKICAgIHdoaXRlbGlzdFttc2cuc2VuZGVyXS5hdXRob3JpemVkID0gdHJ1ZTsKICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgZXRoIGlzIHNlbnQgaW50byB0aGUgY29udHJhY3QuCiAgLy8gVGhlIHNlbmQgd2lsbCBmYWlsIHVubGVzcyB0aGUgY29udHJhY3QgaXMgaW4gc3RhZ2Ugb25lIGFuZCB0aGUgc2VuZGVyIGhhcyBiZWVuIHdoaXRlbGlzdGVkLgogIC8vIFRoZSBhbW91bnQgc2VudCBpcyBhZGRlZCB0byB0aGUgYmFsYW5jZSBpbiB0aGUgQ29udHJpYnV0b3Igc3RydWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VuZGluZyBhZGRyZXNzLgogIGZ1bmN0aW9uICgpIHBheWFibGUgcHVibGljIHsKICAgIGlmIChjb250cmFjdFN0YWdlID09IDEpIHsKICAgICAgX2V0aERlcG9zaXQoKTsKICAgIH0gZWxzZSBpZiAoY29udHJhY3RTdGFnZSA9PSAzKSB7CiAgICAgIF9ldGhSZWZ1bmQoKTsKICAgIH0gZWxzZSByZXZlcnQoKTsKICB9CiAgCiAgZnVuY3Rpb24gX2V0aERlcG9zaXQgKCkgaW50ZXJuYWwgewogICAgYXNzZXJ0IChjb250cmFjdFN0YWdlID09IDEpOwogICAgcmVxdWlyZSAodHguZ2FzcHJpY2UgPD0gbWF4R2FzUHJpY2UpOwogICAgcmVxdWlyZSAodGhpcy5iYWxhbmNlIDw9IGNvbnRyaWJ1dGlvbkNhcHNbMF0pOwogICAgdmFyIGMgPSB3aGl0ZWxpc3RbbXNnLnNlbmRlcl07CiAgICB1aW50IG5ld0JhbGFuY2UgPSBjLmJhbGFuY2UuYWRkKG1zZy52YWx1ZSk7CiAgICByZXF1aXJlIChuZXdCYWxhbmNlID49IGNvbnRyaWJ1dGlvbk1pbik7CiAgICByZXF1aXJlIChuZXdCYWxhbmNlIDw9IF9jaGVja0NhcChtc2cuc2VuZGVyKSk7CiAgICBjLmJhbGFuY2UgPSBuZXdCYWxhbmNlOwogICAgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZChtc2cuc2VuZGVyLCBuZXdCYWxhbmNlKTsKICB9CiAgCiAgCiAgZnVuY3Rpb24gX2V0aFJlZnVuZCAoKSBpbnRlcm5hbCB7CiAgICBhc3NlcnQgKGNvbnRyYWN0U3RhZ2UgPT0gMyk7CiAgICByZXF1aXJlIChtc2cuc2VuZGVyID09IG93bmVyIHx8IG1zZy5zZW5kZXIgPT0gcmVjZWl2ZXJBZGRyZXNzKTsKICAgIHJlcXVpcmUgKG1zZy52YWx1ZSA+PSBjb250cmlidXRpb25NaW4pOwogICAgZXRoUmVmdW5kQW1vdW50LnB1c2gobXNnLnZhbHVlKTsKICAgIEV0aFJlZnVuZFJlY2VpdmVkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgfQogIAogICAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgdG8gd2l0aGRyYXcgZXRoIG9yIHRva2VucyBmcm9tIHRoZSBjb250cmFjdC4KICAvLyBJdCBjYW4gb25seSBiZSBjYWxsZWQgYnkgYWRkcmVzc2VzIHRoYXQgYXJlIHdoaXRlbGlzdGVkIGFuZCBzaG93IGEgYmFsYW5jZSBncmVhdGVyIHRoYW4gMC4KICAvLyBJZiBjYWxsZWQgZHVyaW5nIGNvbnRyYWN0IHN0YWdlcyBvbmUgb3IgdHdvLCB0aGUgZnVsbCBldGggYmFsYW5jZSBkZXBvc2l0ZWQgaW50byB0aGUgY29udHJhY3Qgd2lsbCBiZSByZXR1cm5lZCBhbmQgdGhlIGNvbnRyaWJ1dG9yJ3MgYmFsYW5jZSB3aWxsIGJlIHJlc2V0IHRvIDAuCiAgLy8gSWYgY2FsbGVkIGR1cmluZyBzdGFnZSB0aHJlZSwgdGhlIGNvbnRyaWJ1dG9yJ3MgdW51c2VkIGV0aCB3aWxsIGJlIHJldHVybmVkLCBhcyB3ZWxsIGFzIGFueSBhdmFpbGFibGUgdG9rZW5zLgogIC8vIFRoZSB0b2tlbiBhZGRyZXNzIG1heSBiZSBwcm92aWRlZCBvcHRpb25hbGx5IHRvIHdpdGhkcmF3IHRva2VucyB0aGF0IGFyZSBub3QgY3VycmVudGx5IHRoZSBkZWZhdWx0IHRva2VuIChhaXJkcm9wcykuCiAgZnVuY3Rpb24gd2l0aGRyYXcgKGFkZHJlc3MgdG9rZW5BZGRyKSBwdWJsaWMgewogICAgdmFyIGMgPSB3aGl0ZWxpc3RbbXNnLnNlbmRlcl07CiAgICByZXF1aXJlIChjLmJhbGFuY2UgPiAwKTsKICAgIGlmIChjb250cmFjdFN0YWdlIDwgMykgewogICAgICB1aW50IGFtb3VudFRvVHJhbnNmZXIgPSBjLmJhbGFuY2U7CiAgICAgIGMuYmFsYW5jZSA9IDA7CiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYW1vdW50VG9UcmFuc2Zlcik7CiAgICAgIENvbnRyaWJ1dG9yQmFsYW5jZUNoYW5nZWQobXNnLnNlbmRlciwgMCk7CiAgICB9IGVsc2UgewogICAgICBfd2l0aGRyYXcobXNnLnNlbmRlcix0b2tlbkFkZHIpOwogICAgfSAgCiAgfQogIAogIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHRoZSBjb250cmFjdCBvd25lciB0byBmb3JjZSBhIHdpdGhkcmF3YWwgdG8gYW55IGNvbnRyaWJ1dG9yLgogIC8vIEl0IGlzIHVzZWZ1bCBpZiBhIG5ldyByb3VuZCBvZiB0b2tlbnMgY2FuIGJlIGRpc3RyaWJ1dGVkIGJ1dCBzb21lIGNvbnRyaWJ1dG9ycyBoYXZlCiAgLy8gbm90IHlldCB3aXRoZHJhd24gdGhlaXIgcHJldmlvdXMgYWxsb2NhdGlvbi4KICBmdW5jdGlvbiB3aXRoZHJhd0ZvciAoYWRkcmVzcyBjb250cmlidXRvciwgYWRkcmVzcyB0b2tlbkFkZHIpIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSAoY29udHJhY3RTdGFnZSA9PSAzKTsKICAgIHJlcXVpcmUgKHdoaXRlbGlzdFtjb250cmlidXRvcl0uYmFsYW5jZSA+IDApOwogICAgX3dpdGhkcmF3KGNvbnRyaWJ1dG9yLHRva2VuQWRkcik7CiAgfQogIAogIC8vIFRoaXMgaW50ZXJuYWwgZnVuY3Rpb24gaGFuZGxlcyB3aXRoZHJhd2FscyBkdXJpbmcgc3RhZ2UgdGhyZWUuCiAgLy8gVGhlIGFzc29jaWF0ZWQgZXZlbnRzIHdpbGwgZmlyZSB0byBub3RpZnkgd2hlbiBhIHJlZnVuZCBvciB0b2tlbiBhbGxvY2F0aW9uIGlzIGNsYWltZWQuCiAgZnVuY3Rpb24gX3dpdGhkcmF3IChhZGRyZXNzIHJlY2VpdmVyLCBhZGRyZXNzIHRva2VuQWRkcikgaW50ZXJuYWwgewogICAgYXNzZXJ0IChjb250cmFjdFN0YWdlID09IDMpOwogICAgdmFyIGMgPSB3aGl0ZWxpc3RbcmVjZWl2ZXJdOwogICAgaWYgKHRva2VuQWRkciA9PSAweDAwKSB7CiAgICAgIHRva2VuQWRkciA9IGFjdGl2ZVRva2VuOwogICAgfQogICAgdmFyIGQgPSBkaXN0cmlidXRpb25bdG9rZW5BZGRyXTsKICAgIHJlcXVpcmUgKCAoZXRoUmVmdW5kQW1vdW50Lmxlbmd0aCA+IGMuZXRoUmVmdW5kKSB8fCBkLnBjdC5sZW5ndGggPiBjLnRva2Vuc0NsYWltZWRbdG9rZW5BZGRyXSApOwogICAgaWYgKGV0aFJlZnVuZEFtb3VudC5sZW5ndGggPiBjLmV0aFJlZnVuZCkgewogICAgICB1aW50IHBjdCA9IF90b1BjdChjLmJhbGFuY2UsZmluYWxCYWxhbmNlKTsKICAgICAgdWludCBldGhBbW91bnQgPSAwOwogICAgICBmb3IgKHVpbnQgaT1jLmV0aFJlZnVuZDsgaTxldGhSZWZ1bmRBbW91bnQubGVuZ3RoOyBpKyspIHsKICAgICAgICBldGhBbW91bnQgPSBldGhBbW91bnQuYWRkKF9hcHBseVBjdChldGhSZWZ1bmRBbW91bnRbaV0scGN0KSk7CiAgICAgIH0KICAgICAgYy5ldGhSZWZ1bmQgPSBldGhSZWZ1bmRBbW91bnQubGVuZ3RoOwogICAgICBpZiAoZXRoQW1vdW50ID4gMCkgewogICAgICAgIHJlY2VpdmVyLnRyYW5zZmVyKGV0aEFtb3VudCk7CiAgICAgICAgRXRoUmVmdW5kZWQocmVjZWl2ZXIsZXRoQW1vdW50KTsKICAgICAgfQogICAgfQogICAgaWYgKGQucGN0Lmxlbmd0aCA+IGMudG9rZW5zQ2xhaW1lZFt0b2tlbkFkZHJdKSB7CiAgICAgIHVpbnQgdG9rZW5BbW91bnQgPSAwOwogICAgICBmb3IgKGk9Yy50b2tlbnNDbGFpbWVkW3Rva2VuQWRkcl07IGk8ZC5wY3QubGVuZ3RoOyBpKyspIHsKICAgICAgICB0b2tlbkFtb3VudCA9IHRva2VuQW1vdW50LmFkZChfYXBwbHlQY3QoYy5iYWxhbmNlLGQucGN0W2ldKSk7CiAgICAgIH0KICAgICAgYy50b2tlbnNDbGFpbWVkW3Rva2VuQWRkcl0gPSBkLnBjdC5sZW5ndGg7CiAgICAgIGlmICh0b2tlbkFtb3VudCA+IDApIHsKICAgICAgICByZXF1aXJlKGQudG9rZW4udHJhbnNmZXIocmVjZWl2ZXIsdG9rZW5BbW91bnQpKTsKICAgICAgICBkLmJhbGFuY2VSZW1haW5pbmcgPSBkLmJhbGFuY2VSZW1haW5pbmcuc3ViKHRva2VuQW1vdW50KTsKICAgICAgICBUb2tlbnNXaXRoZHJhd24ocmVjZWl2ZXIsdG9rZW5BbW91bnQpOwogICAgICB9ICAKICAgIH0KICAgIAogIH0KICAKICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lciwgaXQgYWRkcyBhbiBhZGRyZXNzIHRvIHRoZSB3aGl0ZWxpc3QuCiAgLy8gVG8gZXhlY3V0ZSwgdGhlIGNvbnRyYWN0IG11c3QgYmUgaW4gc3RhZ2UgMSwgdGhlIGFkZHJlc3MgY2Fubm90IGFscmVhZHkgYmUgd2hpdGVsaXN0ZWQsIGFuZCB0aGUgYWRkcmVzcyBjYW5ub3QgYmUgYSBjb250cmFjdCBpdHNlbGYuCiAgLy8gQmxvY2tpbmcgY29udHJhY3RzIGZyb20gYmVpbmcgd2hpdGVsaXN0ZWQgcHJldmVudHMgYXR0YWNrcyBmcm9tIHVuZXhwZWN0ZWQgY29udHJhY3QgdG8gY29udHJhY3QgaW50ZXJhY3Rpb24gLSB2ZXJ5IGltcG9ydGFudCEKICBmdW5jdGlvbiBhdXRob3JpemUgKGFkZHJlc3MgYWRkciwgdWludCBjYXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSAoY29udHJhY3RTdGFnZSA9PSAxKTsKICAgIF9jaGVja1doaXRlbGlzdENvbnRyYWN0KGFkZHIpOwogICAgcmVxdWlyZSAoIXdoaXRlbGlzdFthZGRyXS5hdXRob3JpemVkKTsKICAgIHJlcXVpcmUgKChjYXAgPiAwICYmIGNhcCA8IGNvbnRyaWJ1dGlvbkNhcHMubGVuZ3RoKSB8fCAoY2FwID49IGNvbnRyaWJ1dGlvbk1pbiAmJiBjYXAgPD0gY29udHJpYnV0aW9uQ2Fwc1swXSkgKTsKICAgIHVpbnQgc2l6ZTsKICAgIGFzc2VtYmx5IHsgc2l6ZSA6PSBleHRjb2Rlc2l6ZShhZGRyKSB9CiAgICByZXF1aXJlIChzaXplID09IDApOwogICAgd2hpdGVsaXN0W2FkZHJdLmNhcCA9IGNhcDsKICAgIHdoaXRlbGlzdFthZGRyXS5hdXRob3JpemVkID0gdHJ1ZTsKICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJ5IHRoZSBvd25lciB0byBhdXRob3JpemUgbWFueSBhZGRyZXNzZXMgaW4gYSBzaW5nbGUgY2FsbC4KICAvLyBFYWNoIGFkZHJlc3Mgd2lsbCBiZSBnaXZlbiB0aGUgc2FtZSBjYXAsIGFuZCB0aGUgY2FwIG11c3QgYmUgb25lIG9mIHRoZSBzdGFuZGFyZCBsZXZlbHMuCiAgZnVuY3Rpb24gYXV0aG9yaXplTWFueSAoYWRkcmVzc1tdIGFkZHIsIHVpbnQgY2FwKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUgKGFkZHIubGVuZ3RoIDwgMjU1KTsKICAgIHJlcXVpcmUgKGNhcCA+IDAgJiYgY2FwIDwgY29udHJpYnV0aW9uQ2Fwcy5sZW5ndGgpOwogICAgZm9yICh1aW50OCBpPTA7IGk8YWRkci5sZW5ndGg7IGkrKykgewogICAgICBhdXRob3JpemUoYWRkcltpXSwgY2FwKTsKICAgIH0KICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHJlbW92ZSBhbiBhZGRyZXNzIGZyb20gdGhlIHdoaXRlbGlzdC4KICAvLyBJdCBtYXkgb25seSBiZSBleGVjdXRlZCBkdXJpbmcgc3RhZ2VzIDEgYW5kIDIuICBBbnkgZXRoIHNlbnQgYnkgdGhlIGFkZHJlc3MgaXMgcmVmdW5kZWQgYW5kIHRoZWlyIHBlcnNvbmFsIGNhcCBpcyBzZXQgdG8gMC4KICBmdW5jdGlvbiByZXZva2UgKGFkZHJlc3MgYWRkcikgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlIDwgMyk7CiAgICByZXF1aXJlICh3aGl0ZWxpc3RbYWRkcl0uYXV0aG9yaXplZCk7CiAgICByZXF1aXJlICh3aGl0ZWxpc3RDb250cmFjdC5jaGVja01lbWJlckxldmVsKGFkZHIpID09IDApOwogICAgd2hpdGVsaXN0W2FkZHJdLmF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIGlmICh3aGl0ZWxpc3RbYWRkcl0uYmFsYW5jZSA+IDApIHsKICAgICAgdWludCBhbW91bnRUb1RyYW5zZmVyID0gd2hpdGVsaXN0W2FkZHJdLmJhbGFuY2U7CiAgICAgIHdoaXRlbGlzdFthZGRyXS5iYWxhbmNlID0gMDsKICAgICAgYWRkci50cmFuc2ZlcihhbW91bnRUb1RyYW5zZmVyKTsKICAgICAgQ29udHJpYnV0b3JCYWxhbmNlQ2hhbmdlZChhZGRyLCAwKTsKICAgIH0KICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIG1vZGlmeSB0aGUgY29udHJpYnV0aW9uIGNhcCBvZiBhIHdoaXRlbGlzdGVkIGFkZHJlc3MuCiAgLy8gSWYgdGhlIGN1cnJlbnQgY29udHJpYnV0aW9uIGJhbGFuY2UgZXhjZWVkcyB0aGUgbmV3IGNhcCwgdGhlIGV4Y2VzcyBiYWxhbmNlIGlzIHJlZnVuZGVkLgogIGZ1bmN0aW9uIG1vZGlmeUluZGl2aWR1YWxDYXAgKGFkZHJlc3MgYWRkciwgdWludCBjYXApIHB1YmxpYyBvbmx5T3duZXIgewogICAgcmVxdWlyZSAoY29udHJhY3RTdGFnZSA8IDMpOwogICAgcmVxdWlyZSAoY2FwIDwgY29udHJpYnV0aW9uQ2Fwcy5sZW5ndGggfHwgKGNhcCA+PSBjb250cmlidXRpb25NaW4gJiYgY2FwIDw9IGNvbnRyaWJ1dGlvbkNhcHNbMF0pICk7CiAgICBfY2hlY2tXaGl0ZWxpc3RDb250cmFjdChhZGRyKTsKICAgIHZhciBjID0gd2hpdGVsaXN0W2FkZHJdOwogICAgcmVxdWlyZSAoYy5hdXRob3JpemVkKTsKICAgIHVpbnQgYW1vdW50ID0gYy5iYWxhbmNlOwogICAgYy5jYXAgPSBjYXA7CiAgICB1aW50IGNhcEFtb3VudCA9IF9jaGVja0NhcChhZGRyKTsKICAgIGlmIChhbW91bnQgPiBjYXBBbW91bnQpIHsKICAgICAgYy5iYWxhbmNlID0gY2FwQW1vdW50OwogICAgICBhZGRyLnRyYW5zZmVyKGFtb3VudC5zdWIoY2FwQW1vdW50KSk7CiAgICAgIENvbnRyaWJ1dG9yQmFsYW5jZUNoYW5nZWQoYWRkciwgY2FwQW1vdW50KTsKICAgIH0KICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIG1vZGlmeSB0aGUgY2FwIGZvciBhIGNvbnRyaWJ1dGlvbiBsZXZlbC4KICAvLyBUaGUgY2FwIGNhbiBvbmx5IGJlIGluY3JlYXNlZCwgbm90IGRlY3JlYXNlZCwgYW5kIGNhbm5vdCBleGNlZWQgdGhlIGNvbnRyYWN0IGxpbWl0LgogIGZ1bmN0aW9uIG1vZGlmeUxldmVsQ2FwICh1aW50IGxldmVsLCB1aW50IGNhcCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlIDwgMyk7CiAgICByZXF1aXJlIChsZXZlbCA+IDAgJiYgbGV2ZWwgPCBjb250cmlidXRpb25DYXBzLmxlbmd0aCk7CiAgICByZXF1aXJlIChjb250cmlidXRpb25DYXBzW2xldmVsXSA8IGNhcCAmJiBjb250cmlidXRpb25DYXBzWzBdID49IGNhcCk7CiAgICBjb250cmlidXRpb25DYXBzW2xldmVsXSA9IGNhcDsKICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGR1cmluZyBzdGFnZXMgb25lIG9yIHR3byB0byBtb2RpZnkgdGhlIG1heGltdW0gYmFsYW5jZSBvZiB0aGUgY29udHJhY3QuCiAgLy8gSXQgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lci4gVGhlIGFtb3VudCBjYW5ub3QgYmUgc2V0IHRvIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUgY29udHJhY3QuCiAgZnVuY3Rpb24gbW9kaWZ5TWF4Q29udHJhY3RCYWxhbmNlICh1aW50IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlIDwgMyk7CiAgICByZXF1aXJlIChhbW91bnQgPj0gY29udHJpYnV0aW9uTWluKTsKICAgIHJlcXVpcmUgKGFtb3VudCA+PSB0aGlzLmJhbGFuY2UpOwogICAgY29udHJpYnV0aW9uQ2Fwc1swXSA9IGFtb3VudDsKICAgIGZvciAodWludDggaT0xOyBpPGNvbnRyaWJ1dGlvbkNhcHMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKGNvbnRyaWJ1dGlvbkNhcHNbaV0+YW1vdW50KSBjb250cmlidXRpb25DYXBzW2ldPWFtb3VudDsKICAgIH0KICB9CiAgCiAgLy8gVGhpcyBpbnRlcm5hbCBmdW5jdGlvbiByZXR1cm5zIHRoZSBjYXAgYW1vdW50IG9mIGEgd2hpdGVsaXN0ZWQgYWRkcmVzcy4KICAvLyBJZiB0aGUgYWRkcmVzcyBpcyBub3Qgd2hpdGVsaXN0ZWQgaXQgd2lsbCB0aHJvdy4KICBmdW5jdGlvbiBfY2hlY2tDYXAgKGFkZHJlc3MgYWRkcikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgX2NoZWNrV2hpdGVsaXN0Q29udHJhY3QoYWRkcik7CiAgICB2YXIgYyA9IHdoaXRlbGlzdFthZGRyXTsKICAgIGlmICghYy5hdXRob3JpemVkKSByZXR1cm4gMDsKICAgIGlmIChjLmNhcDxjb250cmlidXRpb25DYXBzLmxlbmd0aCkgcmV0dXJuIGNvbnRyaWJ1dGlvbkNhcHNbYy5jYXBdOwogICAgcmV0dXJuIGMuY2FwOyAKICB9CiAgCiAgZnVuY3Rpb24gX2NoZWNrV2hpdGVsaXN0Q29udHJhY3QgKGFkZHJlc3MgYWRkcikgaW50ZXJuYWwgewogICAgdmFyIGMgPSB3aGl0ZWxpc3RbYWRkcl07CiAgICBpZiAoIWMuYXV0aG9yaXplZCkgewogICAgICB2YXIgbGV2ZWwgPSB3aGl0ZWxpc3RDb250cmFjdC5jaGVja01lbWJlckxldmVsKGFkZHIpOwogICAgICBpZiAobGV2ZWwgPT0gMCB8fCBsZXZlbCA+PSBjb250cmlidXRpb25DYXBzLmxlbmd0aCkgcmV0dXJuOwogICAgICBjLmNhcCA9IGxldmVsOwogICAgICBjLmF1dGhvcml6ZWQgPSB0cnVlOwogICAgfQogIH0KICAKICAvLyBUaGlzIGNhbGxhYmxlIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRvdGFsIHBvb2wgY2FwLCBjdXJyZW50IGJhbGFuY2UgYW5kIHJlbWFpbmluZyBiYWxhbmNlIHRvIGJlIGZpbGxlZC4KICBmdW5jdGlvbiBjaGVja1Bvb2xCYWxhbmNlICgpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQgcG9vbENhcCwgdWludCBiYWxhbmNlLCB1aW50IHJlbWFpbmluZykgewogICAgaWYgKGNvbnRyYWN0U3RhZ2UgPT0gMSkgewogICAgICByZW1haW5pbmcgPSBjb250cmlidXRpb25DYXBzWzBdLnN1Yih0aGlzLmJhbGFuY2UpOwogICAgfSBlbHNlIHsKICAgICAgcmVtYWluaW5nID0gMDsKICAgIH0KICAgIHJldHVybiAoY29udHJpYnV0aW9uQ2Fwc1swXSx0aGlzLmJhbGFuY2UscmVtYWluaW5nKTsKICB9CiAgCiAgLy8gVGhpcyBjYWxsYWJsZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBiYWxhbmNlLCBjb250cmlidXRpb24gY2FwLCBhbmQgcmVtYWluaW5nIGF2YWlsYWJsZSBiYWxhbmNlIG9mIGFueSBjb250cmlidXRvci4KICBmdW5jdGlvbiBjaGVja0NvbnRyaWJ1dG9yQmFsYW5jZSAoYWRkcmVzcyBhZGRyKSB2aWV3IHB1YmxpYyByZXR1cm5zICh1aW50IGJhbGFuY2UsIHVpbnQgY2FwLCB1aW50IHJlbWFpbmluZykgewogICAgdmFyIGMgPSB3aGl0ZWxpc3RbYWRkcl07CiAgICBpZiAoIWMuYXV0aG9yaXplZCkgewogICAgICBjYXAgPSB3aGl0ZWxpc3RDb250cmFjdC5jaGVja01lbWJlckxldmVsKGFkZHIpOwogICAgICBpZiAoY2FwID09IDApIHJldHVybiAoMCwwLDApOwogICAgfSBlbHNlIHsKICAgICAgY2FwID0gYy5jYXA7CiAgICB9CiAgICBiYWxhbmNlID0gYy5iYWxhbmNlOwogICAgaWYgKGNvbnRyYWN0U3RhZ2UgPT0gMSkgewogICAgICBpZiAoY2FwPGNvbnRyaWJ1dGlvbkNhcHMubGVuZ3RoKSB7CiAgICAgICAgY2FwID0gY29udHJpYnV0aW9uQ2Fwc1tjYXBdOwogICAgICB9CiAgICAgIHJlbWFpbmluZyA9IGNhcC5zdWIoYmFsYW5jZSk7CiAgICAgIGlmIChjb250cmlidXRpb25DYXBzWzBdLnN1Yih0aGlzLmJhbGFuY2UpIDwgcmVtYWluaW5nKSByZW1haW5pbmcgPSBjb250cmlidXRpb25DYXBzWzBdLnN1Yih0aGlzLmJhbGFuY2UpOwogICAgfSBlbHNlIHsKICAgICAgcmVtYWluaW5nID0gMDsKICAgIH0KICAgIHJldHVybiAoYmFsYW5jZSwgY2FwLCByZW1haW5pbmcpOwogIH0KICAKICAvLyBUaGlzIGNhbGxhYmxlIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRva2VuIGJhbGFuY2UgdGhhdCBhIGNvbnRyaWJ1dG9yIGNhbiBjdXJyZW50bHkgY2xhaW0uCiAgZnVuY3Rpb24gY2hlY2tBdmFpbGFibGVUb2tlbnMgKGFkZHJlc3MgYWRkciwgYWRkcmVzcyB0b2tlbkFkZHIpIHZpZXcgcHVibGljIHJldHVybnMgKHVpbnQgdG9rZW5BbW91bnQpIHsKICAgIHZhciBjID0gd2hpdGVsaXN0W2FkZHJdOwogICAgdmFyIGQgPSBkaXN0cmlidXRpb25bdG9rZW5BZGRyXTsKICAgIGZvciAodWludCBpPWMudG9rZW5zQ2xhaW1lZFt0b2tlbkFkZHJdOyBpPGQucGN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgIHRva2VuQW1vdW50ID0gdG9rZW5BbW91bnQuYWRkKF9hcHBseVBjdChjLmJhbGFuY2UsZC5wY3RbaV0pKTsKICAgIH0KICAgIHJldHVybiB0b2tlbkFtb3VudDsKICB9CiAgCiAgLy8gVGhpcyBmdW5jdGlvbiBjbG9zZXMgZnVydGhlciBjb250cmlidXRpb25zIHRvIHRoZSBjb250cmFjdCwgYWR2YW5jaW5nIGl0IHRvIHN0YWdlIHR3by4KICAvLyBJdCBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyLiAgQWZ0ZXIgdGhpcyBjYWxsIGhhcyBiZWVuIG1hZGUsIHdoaXRlbGlzdGVkIGFkZHJlc3NlcwogIC8vIGNhbiBzdGlsbCByZW1vdmUgdGhlaXIgZXRoIGZyb20gdGhlIGNvbnRyYWN0IGJ1dCBjYW5ub3QgY29udHJpYnV0ZSBhbnkgbW9yZS4KICBmdW5jdGlvbiBjbG9zZUNvbnRyaWJ1dGlvbnMgKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlID09IDEpOwogICAgY29udHJhY3RTdGFnZSA9IDI7CiAgfQogIAogIC8vIFRoaXMgZnVuY3Rpb24gcmVvcGVucyB0aGUgY29udHJhY3QgdG8gY29udHJpYnV0aW9ucyBhbmQgZnVydGhlciB3aGl0ZWxpc3RpbmcsIHJldHVybmluZyBpdCB0byBzdGFnZSBvbmUuCiAgLy8gSXQgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBkdXJpbmcgc3RhZ2UgdHdvLgogIGZ1bmN0aW9uIHJlb3BlbkNvbnRyaWJ1dGlvbnMgKCkgcHVibGljIG9ubHlPd25lciB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlID09IDIpOwogICAgY29udHJhY3RTdGFnZSA9IDE7CiAgfQogIAoKICAvLyBUaGlzIGZ1bmN0aW9uIHNlbmRzIHRoZSBwb29sZWQgZXRoIHRvIHRoZSByZWNlaXZpbmcgYWRkcmVzcywgY2FsY3VsYXRlcyB0aGUgJSBvZiB1bnVzZWQgZXRoIHRvIGJlIHJldHVybmVkLAogIC8vIGFuZCBhZHZhbmNlcyB0aGUgY29udHJhY3QgdG8gc3RhZ2UgdGhyZWUuIEl0IGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXIgZHVyaW5nIHN0YWdlIHR3by4KICAvLyBUaGUgYW1vdW50IHRvIHNlbmQgKGdpdmVuIGluIHdlaSkgbXVzdCBiZSBzcGVjaWZpZWQgZHVyaW5nIHRoZSBjYWxsLiBBcyB0aGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIG9uY2UsCiAgLy8gaXQgaXMgVkVSWSBJTVBPUlRBTlQgbm90IHRvIGdldCB0aGUgYW1vdW50IHdyb25nLgogIGZ1bmN0aW9uIHN1Ym1pdFBvb2wgKHVpbnQgYW1vdW50SW5XZWkpIHB1YmxpYyBvbmx5T3duZXIgbm9SZWVudHJhbmN5IHsKICAgIHJlcXVpcmUgKGNvbnRyYWN0U3RhZ2UgPCAzKTsKICAgIHJlcXVpcmUgKGNvbnRyaWJ1dGlvbk1pbiA8PSBhbW91bnRJbldlaSAmJiBhbW91bnRJbldlaSA8PSB0aGlzLmJhbGFuY2UpOwogICAgZmluYWxCYWxhbmNlID0gdGhpcy5iYWxhbmNlOwogICAgcmVxdWlyZSAocmVjZWl2ZXJBZGRyZXNzLmNhbGwudmFsdWUoYW1vdW50SW5XZWkpLmdhcyhtc2cuZ2FzLnN1Yig1MDAwKSkoKSk7CiAgICBldGhSZWZ1bmRBbW91bnQucHVzaCh0aGlzLmJhbGFuY2UpOwogICAgY29udHJhY3RTdGFnZSA9IDM7CiAgfQogIAogIC8vIFRoaXMgZnVuY3Rpb24gb3BlbnMgdGhlIGNvbnRyYWN0IHVwIGZvciB0b2tlbiB3aXRoZHJhd2Fscy4KICAvLyBJdCBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIGR1cmluZyBzdGFnZSAzLiAgVGhlIG93bmVyIHNwZWNpZmllcyB0aGUgYWRkcmVzcyBvZiBhbiBFUkMyMCB0b2tlbgogIC8vIGNvbnRyYWN0IHRoYXQgdGhpcyBjb250cmFjdCBoYXMgYSBiYWxhbmNlIGluLCBhbmQgb3B0aW9uYWxseSBhIGJvb2wgdG8gcHJldmVudCB0aGlzIHRva2VuIGZyb20gYmVpbmcKICAvLyB0aGUgZGVmYXVsdCB3aXRoZHJhd2FsIChpbiB0aGUgZXZlbnQgb2YgYW4gYWlyZHJvcCwgZm9yIGV4YW1wbGUpLgogIC8vIFRoZSBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgaWYgdGhlcmUgaXMgbm90IGN1cnJlbnRseSBhIHRva2VuIGRpc3RyaWJ1dGlvbiAKICBmdW5jdGlvbiBlbmFibGVUb2tlbldpdGhkcmF3YWxzIChhZGRyZXNzIHRva2VuQWRkciwgYm9vbCBub3REZWZhdWx0KSBwdWJsaWMgb25seU93bmVyIG5vUmVlbnRyYW5jeSB7CiAgICByZXF1aXJlIChjb250cmFjdFN0YWdlID09IDMpOwogICAgaWYgKG5vdERlZmF1bHQpIHsKICAgICAgcmVxdWlyZSAoYWN0aXZlVG9rZW4gIT0gMHgwMCk7CiAgICB9IGVsc2UgewogICAgICBhY3RpdmVUb2tlbiA9IHRva2VuQWRkcjsKICAgIH0KICAgIHZhciBkID0gZGlzdHJpYnV0aW9uW3Rva2VuQWRkcl07ICAgIAogICAgaWYgKGQucGN0Lmxlbmd0aD09MCkgZC50b2tlbiA9IEVSQzIwKHRva2VuQWRkcik7CiAgICB1aW50IGFtb3VudCA9IGQudG9rZW4uYmFsYW5jZU9mKHRoaXMpLnN1YihkLmJhbGFuY2VSZW1haW5pbmcpOwogICAgcmVxdWlyZSAoYW1vdW50ID4gMCk7CiAgICBpZiAoZmVlUGN0ID4gMCkgewogICAgICByZXF1aXJlIChkLnRva2VuLnRyYW5zZmVyKG93bmVyLF9hcHBseVBjdChhbW91bnQsZmVlUGN0KSkpOwogICAgfQogICAgYW1vdW50ID0gZC50b2tlbi5iYWxhbmNlT2YodGhpcykuc3ViKGQuYmFsYW5jZVJlbWFpbmluZyk7CiAgICBkLmJhbGFuY2VSZW1haW5pbmcgPSBkLnRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgIGQucGN0LnB1c2goX3RvUGN0KGFtb3VudCxmaW5hbEJhbGFuY2UpKTsKICB9CiAgCiAgLy8gVGhpcyBpcyBhIHN0YW5kYXJkIGZ1bmN0aW9uIHJlcXVpcmVkIGZvciBFUkMyMjMgY29tcGF0aWJpbGl0eS4KICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrIChhZGRyZXNzIGZyb20sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEpIHB1YmxpYyB7CiAgICBFUkMyMjNSZWNlaXZlZCAoZnJvbSwgdmFsdWUpOwogIH0KICAKfQ=='.
	

]
