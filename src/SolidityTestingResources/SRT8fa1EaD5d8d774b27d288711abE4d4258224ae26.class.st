Class {
	#name : #SRT8fa1EaD5d8d774b27d288711abE4d4258224ae26,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8fa1EaD5d8d774b27d288711abE4d4258224ae26 >> base64 [
	^ ''.
	

]
