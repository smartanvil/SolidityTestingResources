Class {
	#name : #SRT2f4f6c055a7c8ab529f5b01f6616164aaeec18ad,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2f4f6c055a7c8ab529f5b01f6616164aaeec18ad >> base64 [
	^ ''.
	

]
