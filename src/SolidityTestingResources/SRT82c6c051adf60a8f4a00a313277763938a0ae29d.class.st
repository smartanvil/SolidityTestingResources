Class {
	#name : #SRT82c6c051adf60a8f4a00a313277763938a0ae29d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT82c6c051adf60a8f4a00a313277763938a0ae29d >> base64 [
	^ ''.
	

]
