Class {
	#name : #SRTb7321c1dae3931abf91f8f5d68e3aaa42f526acb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb7321c1dae3931abf91f8f5d68e3aaa42f526acb >> base64 [
	^ ''.
	

]
