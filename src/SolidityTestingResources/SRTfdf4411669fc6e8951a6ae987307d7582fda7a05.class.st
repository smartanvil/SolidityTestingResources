Class {
	#name : #SRTfdf4411669fc6e8951a6ae987307d7582fda7a05,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfdf4411669fc6e8951a6ae987307d7582fda7a05 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgovLyBjb3B5cmlnaHQgPHNwYW4gY2xhc3M9Il9fY2ZfZW1haWxfXyIgZGF0YS1jZmVtYWlsPSI3NzE0MTgxOTAzMTYxNDAzMzczMjAzMWYxMjA1MTIxYTE4MTk1OTE0MTgxYSI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvc3Bhbj4KCmNvbnRyYWN0IFNhZmVNYXRoIHsKCiAgICAvKiBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsgKi8KICAgIC8qICAgaWYgKCFhc3NlcnRpb24pIHsgKi8KICAgIC8qICAgICB0aHJvdzsgKi8KICAgIC8qICAgfSAqLwogICAgLyogfSAgICAgIC8vIGFzc2VydCBubyBsb25nZXIgbmVlZGVkIG9uY2Ugc29saWRpdHkgaXMgb24gMC40LjEwICovCgogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCArIHk7CiAgICAgIGFzc2VydCgoeiA+PSB4KSAmJiAoeiA+PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgYXNzZXJ0KHggPj0geSk7CiAgICAgIHVpbnQyNTYgeiA9IHggLSB5OwogICAgICByZXR1cm4gejsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlTXVsdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgcHVyZSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsKICAgICAgdWludDI1NiB6ID0geCAqIHk7CiAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7CiAgICAgIHJldHVybiB6OwogICAgfQoKfQoKY29udHJhY3QgQmFzaWNBY2Nlc3NDb250cm9sIHsKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgLy8gYWRkcmVzc1tdIHB1YmxpYyBtb2RlcmF0b3JzOwogICAgdWludDE2IHB1YmxpYyB0b3RhbE1vZGVyYXRvcnMgPSAwOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgbW9kZXJhdG9yczsKICAgIGJvb2wgcHVibGljIGlzTWFpbnRhaW5pbmcgPSB0cnVlOwoKICAgIGZ1bmN0aW9uIEJhc2ljQWNjZXNzQ29udHJvbCgpIHB1YmxpYyB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlNb2RlcmF0b3JzKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lciB8fCBtb2RlcmF0b3JzW21zZy5zZW5kZXJdID09IHRydWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNBY3RpdmUgewogICAgICAgIHJlcXVpcmUoIWlzTWFpbnRhaW5pbmcpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gQ2hhbmdlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChfbmV3T3duZXIgIT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIEFkZE1vZGVyYXRvcihhZGRyZXNzIF9uZXdNb2RlcmF0b3IpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChtb2RlcmF0b3JzW19uZXdNb2RlcmF0b3JdID09IGZhbHNlKSB7CiAgICAgICAgICAgIG1vZGVyYXRvcnNbX25ld01vZGVyYXRvcl0gPSB0cnVlOwogICAgICAgICAgICB0b3RhbE1vZGVyYXRvcnMgKz0gMTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIFJlbW92ZU1vZGVyYXRvcihhZGRyZXNzIF9vbGRNb2RlcmF0b3IpIG9ubHlPd25lciBwdWJsaWMgewogICAgICAgIGlmIChtb2RlcmF0b3JzW19vbGRNb2RlcmF0b3JdID09IHRydWUpIHsKICAgICAgICAgICAgbW9kZXJhdG9yc1tfb2xkTW9kZXJhdG9yXSA9IGZhbHNlOwogICAgICAgICAgICB0b3RhbE1vZGVyYXRvcnMgLT0gMTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gVXBkYXRlTWFpbnRhaW5pbmcoYm9vbCBfaXNNYWludGFpbmluZykgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgaXNNYWludGFpbmluZyA9IF9pc01haW50YWluaW5nOwogICAgfQp9Cgpjb250cmFjdCBFdGhlcmVtb25FbnVtIHsKCiAgICBlbnVtIFJlc3VsdENvZGUgewogICAgICAgIFNVQ0NFU1MsCiAgICAgICAgRVJST1JfQ0xBU1NfTk9UX0ZPVU5ELAogICAgICAgIEVSUk9SX0xPV19CQUxBTkNFLAogICAgICAgIEVSUk9SX1NFTkRfRkFJTCwKICAgICAgICBFUlJPUl9OT1RfVFJBSU5FUiwKICAgICAgICBFUlJPUl9OT1RfRU5PVUdIX01PTkVZLAogICAgICAgIEVSUk9SX0lOVkFMSURfQU1PVU5UCiAgICB9CiAgICAKICAgIGVudW0gQXJyYXlUeXBlIHsKICAgICAgICBDTEFTU19UWVBFLAogICAgICAgIFNUQVRfU1RFUCwKICAgICAgICBTVEFUX1NUQVJULAogICAgICAgIFNUQVRfQkFTRSwKICAgICAgICBPQkpfU0tJTEwKICAgIH0KfQoKCmNvbnRyYWN0IEV0aGVyZW1vblRyYW5zZm9ybURhdGEgaXMgRXRoZXJlbW9uRW51bSwgQmFzaWNBY2Nlc3NDb250cm9sLCBTYWZlTWF0aCB7CiAgICAKICAgIHN0cnVjdCBNb25zdGVyRWdnIHsKICAgICAgICB1aW50NjQgZWdnSWQ7CiAgICAgICAgdWludDY0IG9iaklkOwogICAgICAgIHVpbnQzMiBjbGFzc0lkOwogICAgICAgIGFkZHJlc3MgdHJhaW5lcjsKICAgICAgICB1aW50IGhhdGNoVGltZTsKICAgICAgICB1aW50NjQgbmV3T2JqSWQ7CiAgICB9CiAgICAKICAgIHVpbnQ2NCBwdWJsaWMgdG90YWxFZ2cgPSAwOwogICAgbWFwcGluZyh1aW50NjQgPT4gTW9uc3RlckVnZykgcHVibGljIGVnZ3M7IC8vIGVnZ0lkCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDY0KSBwdWJsaWMgaGF0Y2hpbmdFZ2dzOwogICAgbWFwcGluZyh1aW50NjQgPT4gdWludDY0W10pIHB1YmxpYyBlZ2dMaXN0OyAvLyBvYmpJZCAtPiBbZWdnSWRdCiAgICBtYXBwaW5nKHVpbnQ2NCA9PiB1aW50NjQpIHB1YmxpYyB0cmFuc2Zvcm1lZDsgLy9vYmpJZCAtPiBuZXdPYmpJZAogICAgCiAgICAvLyBvbmx5IG1vZGVyYXRvcnMKICAgIC8qCiAgICBUTyBBVk9JRCBBTlkgQlVHUywgV0UgQUxMT1cgTU9ERVJBVE9SUyBUTyBIQVZFIFBFUk1JU1NJT04gVE8gQUxMIFRIRVNFIEZVTkNUSU9OUyBBTkQgVVBEQVRFIFRIRU0gSU4gRUFSTFkgQkVUQSBTVEFHRS4KICAgIEFGVEVSIFRIRSBTWVNURU0gSVMgU1RBQkxFLCBXRSBXSUxMIFJFTU9WRSBPV05FUiBPRiBUSElTIFNNQVJUIENPTlRSQUNUIEFORCBPTkxZIEtFRVAgT05FIE1PREVSQVRPUiBXSElDSCBJUyBFVEhFUkVNT04gQkFUVExFIENPTlRSQUNULgogICAgSEVOQ0UsIFRIRSBERUNFTlRSQUxJWkVEIEFUVFJJQlVUSU9OIElTIEdVQVJBTlRFRUQuCiAgICAqLwogICAgCiAgICBmdW5jdGlvbiBhZGRFZ2codWludDY0IF9vYmpJZCwgdWludDMyIF9jbGFzc0lkLCBhZGRyZXNzIF90cmFpbmVyLCB1aW50IF9oYXRjaFRpbWUpIG9ubHlNb2RlcmF0b3JzIGV4dGVybmFsIHJldHVybnModWludDY0KSB7CiAgICAgICAgdG90YWxFZ2cgKz0gMTsKICAgICAgICBNb25zdGVyRWdnIHN0b3JhZ2UgZWdnID0gZWdnc1t0b3RhbEVnZ107CiAgICAgICAgZWdnLm9iaklkID0gX29iaklkOwogICAgICAgIGVnZy5lZ2dJZCA9IHRvdGFsRWdnOwogICAgICAgIGVnZy5jbGFzc0lkID0gX2NsYXNzSWQ7CiAgICAgICAgZWdnLnRyYWluZXIgPSBfdHJhaW5lcjsKICAgICAgICBlZ2cuaGF0Y2hUaW1lID0gX2hhdGNoVGltZTsKICAgICAgICBlZ2cubmV3T2JqSWQgPSAwOwogICAgICAgIGhhdGNoaW5nRWdnc1tfdHJhaW5lcl0gPSB0b3RhbEVnZzsKICAgICAgICAKICAgICAgICAvLyBpbmNyZWFzZSBjb3VudAogICAgICAgIGlmIChfb2JqSWQgPiAwKSB7CiAgICAgICAgICAgIGVnZ0xpc3RbX29iaklkXS5wdXNoKHRvdGFsRWdnKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRvdGFsRWdnOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBzZXRIYXRjaGVkRWdnKHVpbnQ2NCBfZWdnSWQsIHVpbnQ2NCBfbmV3T2JqSWQpIG9ubHlNb2RlcmF0b3JzIGV4dGVybmFsIHsKICAgICAgICBNb25zdGVyRWdnIHN0b3JhZ2UgZWdnID0gZWdnc1tfZWdnSWRdOwogICAgICAgIGlmIChlZ2cuZWdnSWQgIT0gX2VnZ0lkKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBlZ2cubmV3T2JqSWQgPSBfbmV3T2JqSWQ7CiAgICAgICAgaGF0Y2hpbmdFZ2dzW2VnZy50cmFpbmVyXSA9IDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHNldEhhdGNoVGltZSh1aW50NjQgX2VnZ0lkLCB1aW50IF9oYXRjaFRpbWUpIG9ubHlNb2RlcmF0b3JzIGV4dGVybmFsIHsKICAgICAgICBNb25zdGVyRWdnIHN0b3JhZ2UgZWdnID0gZWdnc1tfZWdnSWRdOwogICAgICAgIGlmIChlZ2cuZWdnSWQgIT0gX2VnZ0lkKQogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICBlZ2cuaGF0Y2hUaW1lID0gX2hhdGNoVGltZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0VHJhbmZvcm1lZCh1aW50NjQgX29iaklkLCB1aW50NjQgX25ld09iaklkKSBvbmx5TW9kZXJhdG9ycyBleHRlcm5hbCB7CiAgICAgICAgdHJhbnNmb3JtZWRbX29iaklkXSA9IF9uZXdPYmpJZDsKICAgIH0KICAgIAogICAgCiAgICBmdW5jdGlvbiBnZXRIYXRjaGluZ0VnZ0lkKGFkZHJlc3MgX3RyYWluZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludDY0KSB7CiAgICAgICAgcmV0dXJuIGhhdGNoaW5nRWdnc1tfdHJhaW5lcl07CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldEVnZ0RhdGFCeUlkKHVpbnQ2NCBfZWdnSWQpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludDY0LCB1aW50NjQsIHVpbnQzMiwgYWRkcmVzcywgdWludCwgdWludDY0KSB7CiAgICAgICAgTW9uc3RlckVnZyBtZW1vcnkgZWdnID0gZWdnc1tfZWdnSWRdOwogICAgICAgIHJldHVybiAoZWdnLmVnZ0lkLCBlZ2cub2JqSWQsIGVnZy5jbGFzc0lkLCBlZ2cudHJhaW5lciwgZWdnLmhhdGNoVGltZSwgZWdnLm5ld09iaklkKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0SGF0Y2hpbmdFZ2dEYXRhKGFkZHJlc3MgX3RyYWluZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnModWludDY0LCB1aW50NjQsIHVpbnQzMiwgYWRkcmVzcywgdWludCwgdWludDY0KSB7CiAgICAgICAgTW9uc3RlckVnZyBtZW1vcnkgZWdnID0gZWdnc1toYXRjaGluZ0VnZ3NbX3RyYWluZXJdXTsKICAgICAgICByZXR1cm4gKGVnZy5lZ2dJZCwgZWdnLm9iaklkLCBlZ2cuY2xhc3NJZCwgZWdnLnRyYWluZXIsIGVnZy5oYXRjaFRpbWUsIGVnZy5uZXdPYmpJZCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFRyYW5mb3JtZWRJZCh1aW50NjQgX29iaklkKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQ2NCkgewogICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFtfb2JqSWRdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBjb3VudEVnZyh1aW50NjQgX29iaklkKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQpIHsKICAgICAgICByZXR1cm4gZWdnTGlzdFtfb2JqSWRdLmxlbmd0aDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2V0RWdnSWRCeU9iaklkKHVpbnQ2NCBfb2JqSWQsIHVpbnQgX2luZGV4KSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zKHVpbnQ2NCwgdWludDY0LCB1aW50MzIsIGFkZHJlc3MsIHVpbnQsIHVpbnQ2NCkgewogICAgICAgIE1vbnN0ZXJFZ2cgbWVtb3J5IGVnZyA9IGVnZ3NbZWdnTGlzdFtfb2JqSWRdW19pbmRleF1dOwogICAgICAgIHJldHVybiAoZWdnLmVnZ0lkLCBlZ2cub2JqSWQsIGVnZy5jbGFzc0lkLCBlZ2cudHJhaW5lciwgZWdnLmhhdGNoVGltZSwgZWdnLm5ld09iaklkKTsKICAgIH0KfQ=='.
	

]
