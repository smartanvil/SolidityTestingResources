Class {
	#name : #SRT163108596c98ffdc667153a88682e5720d2f516e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT163108596c98ffdc667153a88682e5720d2f516e >> base64 [
	^ 'LyoKCiAgICAgKCAgICAgICApICAgICkgICAgKQogICAgIClcICkgKCAvKCAoIC8oICggLyggICAgICggICgKICAgICgoKS8oIClcKCkpKVwoKSkpXCgpKSAgKCApXCApXAogICAgIC8oXyl8KF8pXCgoXylcKChfKVwgICkpKChffChfKQogICAgKF8pKSAgXygoXylfKChfKV8oKF8pLygoXykgIF8KICAgIHwgXyBcfCB8fCBcIFwvIC8gfHwgKF8pKXwgfHwgfAogICAgfCAgXy98IF9fIHw+ICA8fCBfXyAvIC1fKSB8fCB8CiAgICB8X3wgIHxffHxfL18vXF9cX3x8X1xfX198X3x8X3wKCiAgICBQSFhIZWxsIC0gQSBnYW1lIG9mIHRpbWluZyBhbmQgbHVjay4KICAgICAgbWFkZSBieSBUb0NzSWNLCgogICAgSW5zcGlyZWQgYnkgRXRoQW50ZSBieSBUZWNobmljYWxSaXNlCgoqLwpwcmFnbWEgc29saWRpdHkgXjAuNC4yMTsKCi8vIENvbnRyYWN0IG11c3QgaW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlIGluIG9yZGVyIHRvIHJlY2VpdmUgRVJDMjIzIHRva2Vucwpjb250cmFjdCBFUkMyMjNSZWNlaXZpbmdDb250cmFjdCB7CiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHVibGljOwp9CgovLyBXZSBvbmx5IG5lZWQgdGhlIHNpZ25hdHVyZSBvZiB0aGUgdHJhbnNmZXIgbWV0aG9kCmNvbnRyYWN0IEVSQzIyM0ludGVyZmFjZSB7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKfQoKLy8gU2FmZU1hdGggaXMgZ29vZApsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCBjID0gYSAqIGI7CiAgICAgICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludCkgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDY0KSB7CiAgICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOwogICAgfQoKICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50NjQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICAgIH0KCiAgICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOwogICAgfQp9Cgpjb250cmFjdCBQaHhIZWxsIGlzIEVSQzIyM1JlY2VpdmluZ0NvbnRyYWN0IHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50OwoKICAgIHVpbnQgcHVibGljIGJhbGFuY2U7ICAgICAgICAvLyBDdXJyZW50IGJhbGFuY2UKICAgIHVpbnQgcHVibGljIGxhc3RGdW5kOyAgICAgICAvLyBUaW1lIG9mIGxhc3QgZnVuZAogICAgYWRkcmVzcyBwdWJsaWMgbGFzdEZ1bmRlcjsgIC8vIEFkZHJlc3Mgb2YgdGhlIGxhc3QgcGVyc29uIHdobyBmdW5kZWQKICAgIGFkZHJlc3MgcGh4QWRkcmVzczsgICAgICAgICAvLyBQSFggbWFpbiBuZXQgYWRkcmVzcwoKICAgIHVpbnQgY29uc3RhbnQgcHVibGljIHN0YWtpbmdSZXF1aXJlbWVudCA9IDVlMTc7ICAgLy8gMC41IFBIWAogICAgdWludCBjb25zdGFudCBwdWJsaWMgcGVyaW9kID0gMSBob3VyczsKCiAgICAvLyBFdmVudCB0byByZWNvcmQgdGhlIGVuZCBvZiBhIGdhbWUgc28gaXQgY2FuIGJlIGFkZGVkIHRvIGEgJ2hpc3RvcnknIHBhZ2UKICAgIGV2ZW50IEdhbWVPdmVyKGFkZHJlc3MgaW5kZXhlZCB3aW5uZXIsIHVpbnQgdGltZXN0YW1wLCB1aW50IHZhbHVlKTsKCiAgICAvLyBUYWtlcyBQSFggYWRkcmVzcyBhcyBhIHBhcmFtZXRlciBzbyB5b3UgY2FuIHBvaW50IGF0IGFub3RoZXIgY29udHJhY3QgZHVyaW5nIHRlc3RpbmcKICAgIGZ1bmN0aW9uIFBoeEhlbGwoYWRkcmVzcyBfcGh4QWRkcmVzcykKICAgICAgICBwdWJsaWMgewogICAgICAgIHBoeEFkZHJlc3MgPSBfcGh4QWRkcmVzczsKICAgIH0KCiAgICAvLyBDYWxsZWQgdG8gZm9yY2UgYSBwYXlvdXQgd2l0aG91dCBoYXZpbmcgdG8gcmVzdGFrZQogICAgZnVuY3Rpb24gcGF5b3V0KCkKICAgICAgICBwdWJsaWMgewoKICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHBlbmRpbmcgd2lubmVyLCBkb24ndCBkbyBhbnl0aGluZwogICAgICAgIGlmIChsYXN0RnVuZGVyID09IDApCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgLy8gSWYgdGltZXIgaGFzbid0IGV4cGlyZSwgZG9uJ3QgZG8gYW55dGhpbmcKICAgICAgICBpZiAobm93LnN1YihsYXN0RnVuZCkgPCBwZXJpb2QpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgdWludCBhbW91bnQgPSBiYWxhbmNlOwogICAgICAgIGJhbGFuY2UgPSAwOwoKICAgICAgICAvLyBTZW5kIHRoZSB0b3RhbCBiYWxhbmNlIHRvIHRoZSBsYXN0IGZ1bmRlcgogICAgICAgIEVSQzIyM0ludGVyZmFjZSBwaHggPSBFUkMyMjNJbnRlcmZhY2UocGh4QWRkcmVzcyk7CiAgICAgICAgcGh4LnRyYW5zZmVyKGxhc3RGdW5kZXIsIGFtb3VudCk7CgogICAgICAgIC8vIEZpcmUgZXZlbnQKICAgICAgICBHYW1lT3ZlciggbGFzdEZ1bmRlciwgbm93LCBhbW91bnQgKTsKCiAgICAgICAgLy8gUmVzZXQgdGhlIHdpbm5lcgogICAgICAgIGxhc3RGdW5kZXIgPSBhZGRyZXNzKDApOwogICAgfQoKICAgIC8vIENhbGxlZCBieSB0aGUgRVJDMjIzIGNvbnRyYWN0IChQSFgpIHdoZW4gc2VuZGluZyB0b2tlbnMgdG8gdGhpcyBhZGRyZXNzCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQgX3ZhbHVlLCBieXRlcykKICAgIHB1YmxpYyB7CgogICAgICAgIC8vIE1ha2Ugc3VyZSBpdCBpcyBQSFggd2UgYXJlIHJlY2VpdmluZwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBwaHhBZGRyZXNzKTsKCiAgICAgICAgLy8gTWFrZSBzdXJlIGl0J3MgZW5vdWdoIFBIWAogICAgICAgIHJlcXVpcmUoX3ZhbHVlID49IHN0YWtpbmdSZXF1aXJlbWVudCk7CgogICAgICAgIC8vIFBheW91dCBpZiBzb21lb25lIHdvbiBhbHJlYWR5CiAgICAgICAgcGF5b3V0KCk7CgogICAgICAgIC8vIEFkZCB0byB0aGUgYmFsYW5jZSBhbmQgcmVzZXQgdGhlIHRpbWVyCiAgICAgICAgYmFsYW5jZSA9IGJhbGFuY2UuYWRkKF92YWx1ZSk7CiAgICAgICAgbGFzdEZ1bmQgPSBub3c7CiAgICAgICAgbGFzdEZ1bmRlciA9IF9mcm9tOwogICAgfQp9'.
	

]
