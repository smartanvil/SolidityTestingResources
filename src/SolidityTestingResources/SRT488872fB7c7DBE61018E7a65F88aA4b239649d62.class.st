Class {
	#name : #SRT488872fB7c7DBE61018E7a65F88aA4b239649d62,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT488872fB7c7DBE61018E7a65F88aA4b239649d62 >> base64 [
	^ ''.
	

]
