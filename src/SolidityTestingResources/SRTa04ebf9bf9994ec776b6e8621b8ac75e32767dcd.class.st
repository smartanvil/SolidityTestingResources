Class {
	#name : #SRTa04ebf9bf9994ec776b6e8621b8ac75e32767dcd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa04ebf9bf9994ec776b6e8621b8ac75e32767dcd >> base64 [
	^ ''.
	

]
