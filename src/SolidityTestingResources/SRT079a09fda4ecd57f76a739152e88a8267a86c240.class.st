Class {
	#name : #SRT079a09fda4ecd57f76a739152e88a8267a86c240,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT079a09fda4ecd57f76a739152e88a8267a86c240 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgLyoqCiAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAqLwogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAoYSA9PSAwKSB7CiAgICAgIHJldHVybiAwOwogICAgfQogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAqLwogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgLyoqCiAgKiBAZGV2IFN1YnN0cmFjdHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdyAoaS5lLiBpZiBzdWJ0cmFoZW5kIGlzIGdyZWF0ZXIgdGhhbiBtaW51ZW5kKS4KICAqLwogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIC8qKgogICogQGRldiBBZGRzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgQVZUb2tlbiB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7CgogIGV2ZW50IEJvdWdodCAodWludDI1NiBpbmRleGVkIF9pdGVtSWQsIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIHVpbnQyNTYgX3ByaWNlKTsKICBldmVudCBTb2xkICh1aW50MjU2IGluZGV4ZWQgX2l0ZW1JZCwgYWRkcmVzcyBpbmRleGVkIF9vd25lciwgdWludDI1NiBfcHJpY2UpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdG9rZW5JZCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9hcHByb3ZlZCwgdWludDI1NiBfdG9rZW5JZCk7CgogIGFkZHJlc3MgcHJpdmF0ZSBvd25lcjsKICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgYWRtaW5zOwogIElJdGVtUmVnaXN0cnkgcHJpdmF0ZSBpdGVtUmVnaXN0cnk7CiAgYm9vbCBwcml2YXRlIGVyYzcyMUVuYWJsZWQgPSBmYWxzZTsKCiAgdWludDI1NiBwcml2YXRlIGluY3JlYXNlTGltaXQxID0gMC4wMiBldGhlcjsKICB1aW50MjU2IHByaXZhdGUgaW5jcmVhc2VMaW1pdDIgPSAwLjUgZXRoZXI7CiAgdWludDI1NiBwcml2YXRlIGluY3JlYXNlTGltaXQzID0gMi4wIGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBpbmNyZWFzZUxpbWl0NCA9IDUuMCBldGhlcjsKICB1aW50MjU2IHByaXZhdGUgbWluX3ZhbHVlID0gMC4wMSBldGhlcjsKCiAgdWludDI1NltdIHByaXZhdGUgbGlzdGVkSXRlbXM7CiAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwcml2YXRlIG93bmVyT2ZJdGVtOwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBzdGFydGluZ1ByaWNlT2ZJdGVtOwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gdWludDI1NikgcHJpdmF0ZSBwcmljZU9mSXRlbTsKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHByaXZhdGUgYXBwcm92ZWRPZkl0ZW07CgogIGZ1bmN0aW9uIEFWVG9rZW4gKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIGFkbWluc1tvd25lcl0gPSB0cnVlOwogICAgaXNzdWVDYXJkKDEsIDQsIDUpOwogICAgaXNzdWVDYXJkKDUsIDIyLCAxKTsKICB9CgogIC8qIE1vZGlmaWVycyAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seUFkbWlucygpIHsKICAgIHJlcXVpcmUoYWRtaW5zW21zZy5zZW5kZXJdKTsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5RVJDNzIxKCkgewogICAgcmVxdWlyZShlcmM3MjFFbmFibGVkKTsKICAgIF87CiAgfQogIAogIC8qIE93bmVyICovCiAgZnVuY3Rpb24gc2V0T3duZXIgKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgb3duZXIgPSBfb3duZXI7CiAgfQoKICBmdW5jdGlvbiBzZXRJdGVtUmVnaXN0cnkgKGFkZHJlc3MgX2l0ZW1SZWdpc3RyeSkgb25seU93bmVyKCkgcHVibGljIHsKICAgIGl0ZW1SZWdpc3RyeSA9IElJdGVtUmVnaXN0cnkoX2l0ZW1SZWdpc3RyeSk7CiAgfQoKICBmdW5jdGlvbiBhZGRBZG1pbiAoYWRkcmVzcyBfYWRtaW4pIG9ubHlPd25lcigpIHB1YmxpYyB7CiAgICBhZG1pbnNbX2FkbWluXSA9IHRydWU7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVBZG1pbiAoYWRkcmVzcyBfYWRtaW4pIG9ubHlPd25lcigpIHB1YmxpYyB7CiAgICBkZWxldGUgYWRtaW5zW19hZG1pbl07CiAgfQoKICAvLyBVbmxvY2tzIEVSQzcyMSBiZWhhdmlvdXIsIGFsbG93aW5nIGZvciB0cmFkaW5nIG9uIHRoaXJkIHBhcnR5IHBsYXRmb3Jtcy4KICBmdW5jdGlvbiBlbmFibGVFUkM3MjEgKCkgb25seU93bmVyKCkgcHVibGljIHsKICAgIGVyYzcyMUVuYWJsZWQgPSB0cnVlOwogIH0KCiAgLyogV2l0aGRyYXcgKi8KICAvKgogICAgTk9USUNFOiBUaGVzZSBmdW5jdGlvbnMgd2l0aGRyYXcgdGhlIGRldmVsb3BlcidzIGN1dCB3aGljaCBpcyBsZWZ0CiAgICBpbiB0aGUgY29udHJhY3QgYnkgYGJ1eWAuIFVzZXIgZnVuZHMgYXJlIGltbWVkaWF0ZWx5IHNlbnQgdG8gdGhlIG9sZAogICAgb3duZXIgaW4gYGJ1eWAsIG5vIHVzZXIgZnVuZHMgYXJlIGxlZnQgaW4gdGhlIGNvbnRyYWN0LgogICovCiAgZnVuY3Rpb24gd2l0aGRyYXdBbGwgKCkgb25seU93bmVyKCkgcHVibGljIHsKICAgIG93bmVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7CiAgfQoKICBmdW5jdGlvbiB3aXRoZHJhd0Ftb3VudCAodWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgb3duZXIudHJhbnNmZXIoX2Ftb3VudCk7CiAgfQoKICAvKiBMaXN0aW5nICovCiAgZnVuY3Rpb24gcG9wdWxhdGVGcm9tSXRlbVJlZ2lzdHJ5ICh1aW50MjU2W10gX2l0ZW1JZHMpIG9ubHlPd25lcigpIHB1YmxpYyB7CiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBfaXRlbUlkcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAocHJpY2VPZkl0ZW1bX2l0ZW1JZHNbaV1dID4gMCB8fCBpdGVtUmVnaXN0cnkucHJpY2VPZihfaXRlbUlkc1tpXSkgPT0gMCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBsaXN0SXRlbUZyb21SZWdpc3RyeShfaXRlbUlkc1tpXSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBsaXN0SXRlbUZyb21SZWdpc3RyeSAodWludDI1NiBfaXRlbUlkKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgcmVxdWlyZShpdGVtUmVnaXN0cnkgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKGl0ZW1SZWdpc3RyeS5vd25lck9mKF9pdGVtSWQpICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShpdGVtUmVnaXN0cnkucHJpY2VPZihfaXRlbUlkKSA+IDApOwoKICAgIHVpbnQyNTYgcHJpY2UgPSBpdGVtUmVnaXN0cnkucHJpY2VPZihfaXRlbUlkKTsKICAgIGFkZHJlc3MgaXRlbU93bmVyID0gaXRlbVJlZ2lzdHJ5Lm93bmVyT2YoX2l0ZW1JZCk7CiAgICBsaXN0SXRlbShfaXRlbUlkLCBwcmljZSwgaXRlbU93bmVyKTsKICB9CgogIGZ1bmN0aW9uIGxpc3RNdWx0aXBsZUl0ZW1zICh1aW50MjU2W10gX2l0ZW1JZHMsIHVpbnQyNTYgX3ByaWNlLCBhZGRyZXNzIF9vd25lcikgb25seUFkbWlucygpIGV4dGVybmFsIHsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF9pdGVtSWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGxpc3RJdGVtKF9pdGVtSWRzW2ldLCBfcHJpY2UsIF9vd25lcik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBsaXN0SXRlbSAodWludDI1NiBfaXRlbUlkLCB1aW50MjU2IF9wcmljZSwgYWRkcmVzcyBfb3duZXIpIG9ubHlBZG1pbnMoKSBwdWJsaWMgewogICAgcmVxdWlyZShfcHJpY2UgPiAwKTsKICAgIHJlcXVpcmUocHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPT0gMCk7CiAgICByZXF1aXJlKG93bmVyT2ZJdGVtW19pdGVtSWRdID09IGFkZHJlc3MoMCkpOwoKICAgIG93bmVyT2ZJdGVtW19pdGVtSWRdID0gX293bmVyOwogICAgcHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPSBfcHJpY2U7CiAgICBzdGFydGluZ1ByaWNlT2ZJdGVtW19pdGVtSWRdID0gX3ByaWNlOwogICAgbGlzdGVkSXRlbXMucHVzaChfaXRlbUlkKTsKICB9CgogIC8qIEJ1eWluZyAqLwogIGZ1bmN0aW9uIGNhbGN1bGF0ZU5leHRQcmljZSAodWludDI1NiBfcHJpY2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX25leHRQcmljZSkgewogICAgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQxKSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDIwMCkuZGl2KDkyKTsKICAgIH0gZWxzZSBpZiAoX3ByaWNlIDwgaW5jcmVhc2VMaW1pdDIpIHsKICAgICAgcmV0dXJuIF9wcmljZS5tdWwoMTM1KS5kaXYoOTMpOwogICAgfSBlbHNlIGlmIChfcHJpY2UgPCBpbmNyZWFzZUxpbWl0MykgewogICAgICByZXR1cm4gX3ByaWNlLm11bCgxMjUpLmRpdig5NCk7CiAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQ0KSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDExNykuZGl2KDk0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDExNSkuZGl2KDk1KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNhbGN1bGF0ZURldkN1dCAodWludDI1NiBfcHJpY2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX2RldkN1dCkgewogICAgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQxKSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDgpLmRpdigxMDApOyAvLyA4JQogICAgfSBlbHNlIGlmIChfcHJpY2UgPCBpbmNyZWFzZUxpbWl0MikgewogICAgICByZXR1cm4gX3ByaWNlLm11bCg3KS5kaXYoMTAwKTsgLy8gNyUKICAgIH0gZWxzZSBpZiAoX3ByaWNlIDwgaW5jcmVhc2VMaW1pdDMpIHsKICAgICAgcmV0dXJuIF9wcmljZS5tdWwoNikuZGl2KDEwMCk7IC8vIDYlCiAgICB9IGVsc2UgaWYgKF9wcmljZSA8IGluY3JlYXNlTGltaXQ0KSB7CiAgICAgIHJldHVybiBfcHJpY2UubXVsKDYpLmRpdigxMDApOyAvLyA2JQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIF9wcmljZS5tdWwoNSkuZGl2KDEwMCk7IC8vIDUlCiAgICB9CiAgfQoKICAvKgogICAgIEJ1eSBhIGNvdW50cnkgZGlyZWN0bHkgZnJvbSB0aGUgY29udHJhY3QgZm9yIHRoZSBjYWxjdWxhdGVkIHByaWNlCiAgICAgd2hpY2ggZW5zdXJlcyB0aGF0IHRoZSBvd25lciBnZXRzIGEgcHJvZml0LiAgQWxsIGNvdW50cmllcyB0aGF0CiAgICAgaGF2ZSBiZWVuIGxpc3RlZCBjYW4gYmUgYm91Z2h0IGJ5IHRoaXMgbWV0aG9kLiBVc2VyIGZ1bmRzIGFyZSBzZW50CiAgICAgZGlyZWN0bHkgdG8gdGhlIHByZXZpb3VzIG93bmVyIGFuZCBhcmUgbmV2ZXIgc3RvcmVkIGluIHRoZSBjb250cmFjdC4KICAqLwogIGZ1bmN0aW9uIGJ1eSAodWludDI1NiBfaXRlbUlkKSBwYXlhYmxlIHB1YmxpYyB7CiAgICByZXF1aXJlKHByaWNlT2YoX2l0ZW1JZCkgPiAwKTsKICAgIHJlcXVpcmUob3duZXJPZihfaXRlbUlkKSAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUobXNnLnZhbHVlID49IHByaWNlT2YoX2l0ZW1JZCkpOwogICAgcmVxdWlyZShvd25lck9mKF9pdGVtSWQpICE9IG1zZy5zZW5kZXIpOwogICAgcmVxdWlyZSghaXNDb250cmFjdChtc2cuc2VuZGVyKSk7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSk7CgogICAgYWRkcmVzcyBvbGRPd25lciA9IG93bmVyT2YoX2l0ZW1JZCk7CiAgICBhZGRyZXNzIG5ld093bmVyID0gbXNnLnNlbmRlcjsKICAgIHVpbnQyNTYgcHJpY2UgPSBwcmljZU9mKF9pdGVtSWQpOwogICAgdWludDI1NiBleGNlc3MgPSBtc2cudmFsdWUuc3ViKHByaWNlKTsKCiAgICBfdHJhbnNmZXIob2xkT3duZXIsIG5ld093bmVyLCBfaXRlbUlkKTsKICAgIHByaWNlT2ZJdGVtW19pdGVtSWRdID0gbmV4dFByaWNlT2YoX2l0ZW1JZCk7CgogICAgQm91Z2h0KF9pdGVtSWQsIG5ld093bmVyLCBwcmljZSk7CiAgICBTb2xkKF9pdGVtSWQsIG9sZE93bmVyLCBwcmljZSk7CgogICAgLy8gRGV2ZXZsb3BlcidzIGN1dCB3aGljaCBpcyBsZWZ0IGluIGNvbnRyYWN0IGFuZCBhY2Nlc2VkIGJ5CiAgICAvLyBgd2l0aGRyYXdBbGxgIGFuZCBgd2l0aGRyYXdBbW91bnRUb2AgbWV0aG9kcy4KICAgIHVpbnQyNTYgZGV2Q3V0ID0gY2FsY3VsYXRlRGV2Q3V0KHByaWNlKTsKCiAgICAvLyBUcmFuc2ZlciBwYXltZW50IHRvIG9sZCBvd25lciBtaW51cyB0aGUgZGV2ZWxvcGVyJ3MgY3V0LgogICAgb2xkT3duZXIudHJhbnNmZXIocHJpY2Uuc3ViKGRldkN1dCkpOwoKICAgIGlmIChleGNlc3MgPiAwKSB7CiAgICAgIG5ld093bmVyLnRyYW5zZmVyKGV4Y2Vzcyk7CiAgICB9CiAgfQoKICAvKiBFUkM3MjEgKi8KICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBfaW1wbGVtZW50cykgewogICAgcmV0dXJuIGVyYzcyMUVuYWJsZWQ7CiAgfQoKICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nIF9uYW1lKSB7CiAgICByZXR1cm4gIkNyeXB0b0FWLmlvIjsKICB9CgogIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZyBfc3ltYm9sKSB7CiAgICByZXR1cm4gIkNBViI7CiAgfQoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3RvdGFsU3VwcGx5KSB7CiAgICByZXR1cm4gbGlzdGVkSXRlbXMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gYmFsYW5jZU9mIChhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfYmFsYW5jZSkgewogICAgdWludDI1NiBjb3VudGVyID0gMDsKCiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBsaXN0ZWRJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAob3duZXJPZihsaXN0ZWRJdGVtc1tpXSkgPT0gX293bmVyKSB7CiAgICAgICAgY291bnRlcisrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGNvdW50ZXI7CiAgfQoKICBmdW5jdGlvbiBvd25lck9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKSB7CiAgICByZXR1cm4gb3duZXJPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiB0b2tlbnNPZiAoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSBfdG9rZW5JZHMpIHsKICAgIHVpbnQyNTZbXSBtZW1vcnkgaXRlbXMgPSBuZXcgdWludDI1NltdKGJhbGFuY2VPZihfb3duZXIpKTsKCiAgICB1aW50MjU2IGl0ZW1Db3VudGVyID0gMDsKICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGxpc3RlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChvd25lck9mKGxpc3RlZEl0ZW1zW2ldKSA9PSBfb3duZXIpIHsKICAgICAgICBpdGVtc1tpdGVtQ291bnRlcl0gPSBsaXN0ZWRJdGVtc1tpXTsKICAgICAgICBpdGVtQ291bnRlciArPSAxOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGl0ZW1zOwogIH0KCiAgZnVuY3Rpb24gdG9rZW5FeGlzdHMgKHVpbnQyNTYgX2l0ZW1JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoYm9vbCBfZXhpc3RzKSB7CiAgICByZXR1cm4gcHJpY2VPZihfaXRlbUlkKSA+IDA7CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlZEZvcih1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX2FwcHJvdmVkKSB7CiAgICByZXR1cm4gYXBwcm92ZWRPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9pdGVtSWQpIG9ubHlFUkM3MjEoKSBwdWJsaWMgewogICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IF90byk7CiAgICByZXF1aXJlKHRva2VuRXhpc3RzKF9pdGVtSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfaXRlbUlkKSA9PSBtc2cuc2VuZGVyKTsKCiAgICBpZiAoX3RvID09IDApIHsKICAgICAgaWYgKGFwcHJvdmVkT2ZJdGVtW19pdGVtSWRdICE9IDApIHsKICAgICAgICBkZWxldGUgYXBwcm92ZWRPZkl0ZW1bX2l0ZW1JZF07CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgMCwgX2l0ZW1JZCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGFwcHJvdmVkT2ZJdGVtW19pdGVtSWRdID0gX3RvOwogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfdG8sIF9pdGVtSWQpOwogICAgfQogIH0KCiAgLyogVHJhbnNmZXJyaW5nIGEgY291bnRyeSB0byBhbm90aGVyIG93bmVyIHdpbGwgZW50aXRsZSB0aGUgbmV3IG93bmVyIHRoZSBwcm9maXRzIGZyb20gYGJ1eWAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfaXRlbUlkKSBvbmx5RVJDNzIxKCkgcHVibGljIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lck9mKF9pdGVtSWQpKTsKICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9pdGVtSWQpOwogIH0KCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9pdGVtSWQpIG9ubHlFUkM3MjEoKSBwdWJsaWMgewogICAgcmVxdWlyZShhcHByb3ZlZEZvcihfaXRlbUlkKSA9PSBtc2cuc2VuZGVyKTsKICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfaXRlbUlkKTsKICB9CgogIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfaXRlbUlkKSBpbnRlcm5hbCB7CiAgICByZXF1aXJlKHRva2VuRXhpc3RzKF9pdGVtSWQpKTsKICAgIHJlcXVpcmUob3duZXJPZihfaXRlbUlkKSA9PSBfZnJvbSk7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwoKICAgIG93bmVyT2ZJdGVtW19pdGVtSWRdID0gX3RvOwogICAgYXBwcm92ZWRPZkl0ZW1bX2l0ZW1JZF0gPSAwOwoKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9pdGVtSWQpOwogIH0KCiAgLyogUmVhZCAqLwogIGZ1bmN0aW9uIGlzQWRtaW4gKGFkZHJlc3MgX2FkbWluKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sIF9pc0FkbWluKSB7CiAgICByZXR1cm4gYWRtaW5zW19hZG1pbl07CiAgfQoKICBmdW5jdGlvbiBzdGFydGluZ1ByaWNlT2YgKHVpbnQyNTYgX2l0ZW1JZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBfc3RhcnRpbmdQcmljZSkgewogICAgcmV0dXJuIHN0YXJ0aW5nUHJpY2VPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBwcmljZU9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3ByaWNlKSB7CiAgICByZXR1cm4gcHJpY2VPZkl0ZW1bX2l0ZW1JZF07CiAgfQoKICBmdW5jdGlvbiBuZXh0UHJpY2VPZiAodWludDI1NiBfaXRlbUlkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IF9uZXh0UHJpY2UpIHsKICAgIHJldHVybiBjYWxjdWxhdGVOZXh0UHJpY2UocHJpY2VPZihfaXRlbUlkKSk7CiAgfQoKICBmdW5jdGlvbiBhbGxPZiAodWludDI1NiBfaXRlbUlkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9zdGFydGluZ1ByaWNlLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfbmV4dFByaWNlKSB7CiAgICByZXR1cm4gKG93bmVyT2YoX2l0ZW1JZCksIHN0YXJ0aW5nUHJpY2VPZihfaXRlbUlkKSwgcHJpY2VPZihfaXRlbUlkKSwgbmV4dFByaWNlT2YoX2l0ZW1JZCkpOwogIH0KCiAgZnVuY3Rpb24gaXRlbXNGb3JTYWxlTGltaXQgKHVpbnQyNTYgX2Zyb20sIHVpbnQyNTYgX3Rha2UpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSBfaXRlbXMpIHsKICAgIHVpbnQyNTZbXSBtZW1vcnkgaXRlbXMgPSBuZXcgdWludDI1NltdKF90YWtlKTsKCiAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBfdGFrZTsgaSsrKSB7CiAgICAgIGl0ZW1zW2ldID0gbGlzdGVkSXRlbXNbX2Zyb20gKyBpXTsKICAgIH0KCiAgICByZXR1cm4gaXRlbXM7CiAgfQoKICAvKiBVdGlsICovCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBzaXplOwogICAgYXNzZW1ibHkgeyBzaXplIDo9IGV4dGNvZGVzaXplKGFkZHIpIH0gLy8gc29saXVtLWRpc2FibGUtbGluZQogICAgcmV0dXJuIHNpemUgPiAwOwogIH0KICAKICBmdW5jdGlvbiBjaGFuZ2VQcmljZSh1aW50MjU2IF9pdGVtSWQsIHVpbnQyNTYgX3ByaWNlKSBwdWJsaWMgb25seUFkbWlucygpIHsKICAgIHJlcXVpcmUoX3ByaWNlID4gMCk7CiAgICByZXF1aXJlKGFkbWluc1tvd25lck9mSXRlbVtfaXRlbUlkXV0pOwogICAgcHJpY2VPZkl0ZW1bX2l0ZW1JZF0gPSBfcHJpY2UgKiBtaW5fdmFsdWU7CiAgfQogIAogIGZ1bmN0aW9uIGlzc3VlQ2FyZCh1aW50MjU2IGwsIHVpbnQyNTYgciwgdWludDI1NiBwcmljZSkgb25seUFkbWlucygpIHB1YmxpYyB7CiAgICBmb3IgKHVpbnQyNTYgaSA9IGw7IGkgPD0gcjsgaSsrKSB7CiAgICAgIG93bmVyT2ZJdGVtW2ldID0gbXNnLnNlbmRlcjsKICAgICAgcHJpY2VPZkl0ZW1baV0gPSBwcmljZSAqIG1pbl92YWx1ZTsKICAgICAgbGlzdGVkSXRlbXMucHVzaChpKTsKICAgIH0gICAgICAKICB9ICAKfQoKaW50ZXJmYWNlIElJdGVtUmVnaXN0cnkgewogIGZ1bmN0aW9uIGl0ZW1zRm9yU2FsZUxpbWl0ICh1aW50MjU2IF9mcm9tLCB1aW50MjU2IF90YWtlKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2W10gX2l0ZW1zKTsKICBmdW5jdGlvbiBvd25lck9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgX293bmVyKTsKICBmdW5jdGlvbiBwcmljZU9mICh1aW50MjU2IF9pdGVtSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgX3ByaWNlKTsKfQ=='.
	

]
