Class {
	#name : #SRT658d9424da329087a60868957f9b1d1edd1d6f34,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT658d9424da329087a60868957f9b1d1edd1d6f34 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTM7CgovKioKICogQHRpdGxlIEZvcm5pY29pbkNyb3dkc2FsZQogKiBUaGUgQ3Jvd2RzYWxlIGNvbnRyYWN0IGZvciB0aGUgRm9ybmljb2luIFByb2plY3QuCiAqIFJlYWQgbW9yZSBhdCBmb3JuaWNvaW4ubmV0d29yawogKiA8aW5mbyAoYXQpIGZvcm5pY29pbi5uZXR3b3JrPgogKi8KCgogLyoKICogVGhpcyBpcyB0aGUgc21hcnQgY29udHJhY3QgZm9yIHRoZSBGb3JuaWNvaW4gdG9rZW4uCiAqIE1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIG9uIG91ciB3ZWJzaXRlIGF0OiBodHRwczovL2Zvcm5pY29pbi5uZXR3b3JrCiAqIENyZWF0ZWQgYnkgdGhlIEZvcm5pY29pbiBUZWFtIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjVjMzUzMjNhMzMxYzNhMzMyZTMyMzUzZjMzMzUzMjcyMzIzOTI4MmIzMzJlMzciPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgogKi8KCi8qKgogKiBAdGl0bGUgRVJDMjBCYXNpYwogKiBAZGV2IFNpbXBsZXIgdmVyc2lvbiBvZiBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzE3OQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICogYjsKICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCgoKLyoqCiAqIEB0aXRsZSBCYXNpYyB0b2tlbgogKiBAZGV2IEJhc2ljIHZlcnNpb24gb2YgU3RhbmRhcmRUb2tlbiwgd2l0aCBubyBhbGxvd2FuY2VzLgogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAqIEBkZXYgdHJhbnNmZXIgdG9rZW4gZm9yIGEgc3BlY2lmaWVkIGFkZHJlc3MKICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8uCiAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQuCiAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKCiAgICAvLyBTYWZlTWF0aC5zdWIgd2lsbCB0aHJvdyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJhbGFuY2UuCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7CiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLgogICogQHJldHVybiBBbiB1aW50MjU2IHJlcHJlc2VudGluZyB0aGUgYW1vdW50IG93bmVkIGJ5IHRoZSBwYXNzZWQgYWRkcmVzcy4KICAqLwogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgfQoKfQoKLyoqCiAqIEB0aXRsZSBFUkMyMCBpbnRlcmZhY2UKICogQGRldiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCiAqLwpjb250cmFjdCBFUkMyMCBpcyBFUkMyMEJhc2ljIHsKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7Cn0KCgovKioKICogQHRpdGxlIFN0YW5kYXJkIEVSQzIwIHRva2VuCiAqCiAqIEBkZXYgSW1wbGVtZW50YXRpb24gb2YgdGhlIGJhc2ljIHN0YW5kYXJkIHRva2VuLgogKiBAZGV2IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAogKiBAZGV2IEJhc2VkIG9uIGNvZGUgYnkgRmlyc3RCbG9vZDogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEVSQzIwLCBCYXNpY1Rva2VuIHsKICAgIAogICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludDI1NiB0aGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgIAogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHRocm93IGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIHJlcXVpcmUgKF92YWx1ZSA8PSBfYWxsb3dhbmNlKTsKCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBiYWxhbmNlc1tfZnJvbV0uc3ViKF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgCiAgICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsKCiAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYAogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QKICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOgogICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICByZXF1aXJlKChfdmFsdWUgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvKioKICAgKiBAZGV2IEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRoYXQgYW4gb3duZXIgYWxsb3dlZCB0byBhIHNwZW5kZXIuCiAgICogQHBhcmFtIF9vd25lciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIG93bnMgdGhlIGZ1bmRzLgogICAqIEBwYXJhbSBfc3BlbmRlciBhZGRyZXNzIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgc3BlbmQgdGhlIGZ1bmRzLgogICAqIEByZXR1cm4gQSB1aW50MjU2IHNwZWNpZmluZyB0aGUgYW1vdW50IG9mIHRva2VucyBzdGlsbCBhdmFpYmxlIGZvciB0aGUgc3BlbmRlci4KICAgKi8KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9Cgp9CgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogIC8qKgogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCiAgICovCiAgbW9kaWZpZXIgb25seU93bmVyKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKfQoKCgogLyoKICogVGhpcyBpcyB0aGUgc21hcnQgY29udHJhY3QgZm9yIHRoZSBGb3JuaWNvaW4gdG9rZW4uCiAqIE1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIG9uIG91ciB3ZWJzaXRlIGF0OiBodHRwczovL2Zvcm5pY29pbi5uZXR3b3JrCiAqIENyZWF0ZWQgYnkgdGhlIEZvcm5pY29pbiBUZWFtIDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjNhNTM1NDVjNTU3YTVjNTU0ODU0NTM1OTU1NTM1NDE0NTQ1ZjRlNGQ1NTQ4NTEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PgogKi8KCmNvbnRyYWN0IEZvcm5pY29pblRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGUgewogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiRm9ybmljb2luIjsKICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJGWFgiOwogIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwoKICAvLyAxMDAgMDAwIDAwMCBGb3JuaWNvaW4gdG9rZW5zIGNyZWF0ZWQKICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBNQVhfU1VQUExZID0gMTAwMDAwMDAwICogKDEwICoqIHVpbnQyNTYoZGVjaW1hbHMpKTsKICAKICAvLyBhZG1pbiBhZGRyZXNzIGZvciB0ZWFtIGZ1bmN0aW9ucwogIGFkZHJlc3MgcHVibGljIGFkbWluOwogIHVpbnQyNTYgcHVibGljIHRlYW1Ub2tlbnMgPSAyNTAwMDAwMCAqICgxMCAqKiAxOCk7CiAgCiAgLy8gVG9wIHVwIGdhcyBiYWxhbmNlCiAgdWludDI1NiBwdWJsaWMgbWluQmFsYW5jZUZvclR4RmVlID0gNTUwMDAgKiAzICogMTAgKiogOSB3ZWk7IC8vID09IDU1MDAwIGdhcyBAIDMgZ3dlaQogIC8vIDgwMCBGWFggcGVyIEVUSCBhcyB0aGUgZ2FzIGdlbmVyYXRpb24gcHJpY2UKICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2UgPSA4MDA7IAogIAogIGV2ZW50IFJlZmlsbCh1aW50MjU2IGFtb3VudCk7CiAgCiAgbW9kaWZpZXIgb25seUFkbWluKCkgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkbWluKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiBGb3JuaWNvaW5Ub2tlbihhZGRyZXNzIF9hZG1pbikgewogICAgdG90YWxTdXBwbHkgPSB0ZWFtVG9rZW5zOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBNQVhfU1VQUExZOwogICAgYWRtaW4gPV9hZG1pbjsKICB9CiAgCiAgZnVuY3Rpb24gc2V0U2VsbFByaWNlKHVpbnQyNTYgX3ByaWNlKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgcmVxdWlyZShfcHJpY2UgPj0gMCk7CiAgICAgIC8vIEZYWCBjYW4gb25seSBiZWNvbWUgc3Ryb25nZXIKICAgICAgcmVxdWlyZShfcHJpY2UgPD0gc2VsbFByaWNlKTsKICAgICAgCiAgICAgIHNlbGxQcmljZSA9IF9wcmljZTsKICB9CiAgCiAgLy8gVXBkYXRlIHN0YXRlIG9mIGNvbnRyYWN0IHNob3dpbmcgdG9rZW5zIGJvdWdodAogIGZ1bmN0aW9uIHVwZGF0ZVRvdGFsU3VwcGx5KHVpbnQyNTYgYWRkaXRpb25zKSBvbmx5T3duZXIgewogICAgICByZXF1aXJlKHRvdGFsU3VwcGx5LmFkZChhZGRpdGlvbnMpIDw9IE1BWF9TVVBQTFkpOwogICAgICB0b3RhbFN1cHBseSArPSBhZGRpdGlvbnM7CiAgfQogIAogIGZ1bmN0aW9uIHNldE1pblR4RmVlKHVpbnQyNTYgX2JhbGFuY2UpIHB1YmxpYyBvbmx5QWRtaW4gewogICAgICByZXF1aXJlKF9iYWxhbmNlID49IDApOwogICAgICAvLyBjYW4gb25seSBhZGQgbW9yZSBldGgKICAgICAgcmVxdWlyZShfYmFsYW5jZSA+IG1pbkJhbGFuY2VGb3JUeEZlZSk7CiAgICAgIAogICAgICBtaW5CYWxhbmNlRm9yVHhGZWUgPSBfYmFsYW5jZTsKICB9CiAgCiAgZnVuY3Rpb24gcmVmaWxsVHhGZWVNaW5pbXVtKCkgcHVibGljIHBheWFibGUgb25seUFkbWluIHsKICAgICAgUmVmaWxsKG1zZy52YWx1ZSk7CiAgfQogIAogIC8vIFRyYW5zZmVycyBGWFggdG9rZW5zIHRvIGFub3RoZXIgYWRkcmVzcwogIC8vIFV0aWxpc2VzIHRyYW5zYWN0aW9uIGZlZSBvYmZ1c2NhdGlvbgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzCiAgICAgICAgcmVxdWlyZSAoX3RvICE9IDB4MCk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cyAKICAgICAgICByZXF1aXJlIChiYWxhbmNlT2YoX3RvKSArIF92YWx1ZSA+IGJhbGFuY2VPZihfdG8pKTsKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgYWNjb3VudCBoYXMgbmVjZXNzYXJ5IGZ1bmRpbmcgZm9yIGFub3RoZXIgdHgKICAgICAgICBpZihtc2cuc2VuZGVyLmJhbGFuY2UgPCBtaW5CYWxhbmNlRm9yVHhGZWUgJiYgCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSkgPj0gbWluQmFsYW5jZUZvclR4RmVlICogc2VsbFByaWNlICYmIAogICAgICAgIHRoaXMuYmFsYW5jZSA+PSBtaW5CYWxhbmNlRm9yVHhGZWUpewogICAgICAgICAgICBzZWxsRlhYKChtaW5CYWxhbmNlRm9yVHhGZWUuc3ViKG1zZy5zZW5kZXIuYmFsYW5jZSkpICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxsUHJpY2UpOwogICAgCSAgICAgICAgfQogICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcgogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7CiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQgICAgICAgICAgICAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF92YWx1ZSk7IAogICAgICAgIC8vIFNlbmQgb3V0IFRyYW5zZmVyIGV2ZW50IHRvIG5vdGlmeSBhbGwgcGFydGllcwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLyBTZWxscyB0aGUgYW1vdW50IG9mIEZYWCB0byByZWZpbGwgdGhlIHNlbmRlcnMgRVRIIGJhbGFuY2UgZm9yIGFub3RoZXIgdHJhbnNhY3Rpb24KICAgIGZ1bmN0aW9uIHNlbGxGWFgodWludCBhbW91bnQpIGludGVybmFsIHJldHVybnMgKHVpbnQgcmV2ZW51ZSl7CiAgICAgICAgLy8gY2hlY2tzIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCB0byBzZWxsCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2YobXNnLnNlbmRlcikgPj0gYW1vdW50KTsgIAogICAgICAgIC8vIGFkZHMgdGhlIGFtb3VudCB0byBvd25lcidzIGJhbGFuY2UgICAgICAgCiAgICAgICAgYmFsYW5jZXNbYWRtaW5dID0gYmFsYW5jZXNbYWRtaW5dLmFkZChhbW91bnQpOyAgICAgICAgICAKICAgICAgICAvLyBzdWJ0cmFjdHMgdGhlIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UgICAgICAgICAgICAgIAogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKGFtb3VudCk7ICAgCiAgICAgICAgLy8gRGV0ZXJtaW5lcyBhbW91bnQgb2YgZXRoZXIgdG8gc2VuZCB0byB0aGUgc2VsbGVyIAogICAgICAgIHJldmVudWUgPSBhbW91bnQgLyBzZWxsUHJpY2U7CiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihyZXZlbnVlKTsKICAgICAgICAvLyBleGVjdXRlcyBhbiBldmVudCByZWZsZWN0aW5nIG9uIHRoZSBjaGFuZ2UKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOyAKICAgICAgICAvLyBlbmRzIGZ1bmN0aW9uIGFuZCByZXR1cm5zICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmV2ZW51ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgfQp9CgoKLyoqCiAqIEB0aXRsZSBGb3JuaWNvaW5Dcm93ZHNhbGUKICogVGhlIENyb3dkc2FsZSBjb250cmFjdCBmb3IgdGhlIEZvcm5pY29pbiBQcm9qZWN0LgogKiBSZWFkIG1vcmUgYXQgZm9ybmljb2luLm5ldHdvcmsKICogPGluZm8gKGF0KSBmb3JuaWNvaW4ubmV0d29yaz4KICovCiAKY29udHJhY3QgRm9ybmljb2luQ3Jvd2RzYWxlIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgLy8gVGhlIHRva2VuIGJlaW5nIHNvbGQKICBGb3JuaWNvaW5Ub2tlbiBwdWJsaWMgdG9rZW47CgogIC8vIHN0YXJ0IGFuZCBlbmQgdGltZXN0YW1wcyB3aGVyZSBpbnZlc3RtZW50cyBhcmUgYWxsb3dlZCAoYm90aCBpbmNsdXNpdmUpCiAgdWludDI1NiBwdWJsaWMgc3RhcnRJQ09QaGFzZU9uZTsKICB1aW50MjU2IHB1YmxpYyBzdGFydElDT1BoYXNlVHdvOwogIHVpbnQyNTYgcHVibGljIHN0YXJ0SUNPUGhhc2VUaHJlZTsKICB1aW50MjU2IHB1YmxpYyBlbmRJQ087CgogIC8vIGFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogIGFkZHJlc3MgcHVibGljIHdhbGxldDsKCiAgLy8gaG93IG1hbnkgdG9rZW4gdW5pdHMgYSBidXllciBnZXRzIHBlciB3ZWkKICB1aW50MjU2IHB1YmxpYyBwaGFzZU9uZVJhdGUgPSAxMTAwOwogIHVpbnQyNTYgcHVibGljIHBoYXNlVHdvUmF0ZSA9IDEwMDA7CiAgdWludDI1NiBwdWJsaWMgcGhhc2VUaHJlZVJhdGUgPSA4NTA7CgogIC8vIGFtb3VudCBvZiByYWlzZWQgbW9uZXkgaW4gd2VpCiAgdWludDI1NiBwdWJsaWMgd2VpUmFpc2VkOwogIAogIC8vIGFkbWluIGFkZHJlc3MgdG8gaGFsdCBjb250cmFjdAogIGFkZHJlc3MgcHVibGljIGFkbWluOwogIGJvb2wgcHVibGljIGhhbHRTYWxlOwogIHVpbnQyNTYgcHVibGljIHRlYW1Ub2tlbnMgPSAyNTAwMDAwMCAqICgxMCAqKiAxOCk7CiAgYm9vbCBwdWJsaWMgcHJlc2FsZURpc3QgPSBmYWxzZTsKICAKICBtb2RpZmllciBvbmx5QWRtaW4oKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gYWRtaW4pOwogICAgXzsKICB9CgogIC8qKgogICAqIGV2ZW50IGZvciB0b2tlbiBwdXJjaGFzZSBsb2dnaW5nCiAgICogQHBhcmFtIHB1cmNoYXNlciB3aG8gcGFpZCBmb3IgdGhlIHRva2VucwogICAqIEBwYXJhbSBiZW5lZmljaWFyeSB3aG8gZ290IHRoZSB0b2tlbnMKICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIHRva2VucyBwdXJjaGFzZWQKICAgKi8KICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwogIAogIGZ1bmN0aW9uIEZvcm5pY29pbkNyb3dkc2FsZSh1aW50MjU2IF9zdGFydFRpbWUsIGFkZHJlc3MgX3dhbGxldCwgYWRkcmVzcyBfYWRtaW4pIAogICAgcHVibGljIAogICAgewogICAgcmVxdWlyZShfc3RhcnRUaW1lID49IG5vdyk7CiAgICByZXF1aXJlKF93YWxsZXQgIT0gMHgwKTsKICAgIAogICAgdG9rZW4gPSBuZXcgRm9ybmljb2luVG9rZW4oX2FkbWluKTsKICAgIHN0YXJ0SUNPUGhhc2VPbmUgPSBfc3RhcnRUaW1lOwogICAgc3RhcnRJQ09QaGFzZVR3byA9IHN0YXJ0SUNPUGhhc2VPbmUgKyAzIGRheXM7CiAgICBzdGFydElDT1BoYXNlVGhyZWUgPSBzdGFydElDT1BoYXNlVHdvICsgNCB3ZWVrczsKICAgIGVuZElDTyA9IHN0YXJ0SUNPUGhhc2VUaHJlZSArIDE1IGRheXM7CiAgICB3YWxsZXQgPSBfd2FsbGV0OwogICAgYWRtaW4gPSBfYWRtaW47CiAgfQoKICAvLyBmYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBidXkgdG9rZW5zCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7CiAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7CiAgfQoKLy8gICBsb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBiZW5lZmljaWFyeSkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgcmVxdWlyZSh2YWxpZFB1cmNoYXNlKCkpOwogICAgcmVxdWlyZSghaGFsdFNhbGUpOwoKICAgIHVpbnQyNTYgd2VpQW1vdW50ID0gbXNnLnZhbHVlOwogICAgCiAgICB1aW50MjU2IHRva2VuczsKCiAgICAvLyBjYWxjdWxhdGUgdG9rZW4gYW1vdW50IHRvIGJlIGNyZWF0ZWQKICAgIGlmIChub3cgPD0gc3RhcnRJQ09QaGFzZVR3bykgewogICAgICB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKHBoYXNlT25lUmF0ZSk7CiAgICB9IGVsc2UgaWYgKG5vdyA8IHN0YXJ0SUNPUGhhc2VUaHJlZSl7CiAgICAgIHRva2VucyA9IHdlaUFtb3VudC5tdWwocGhhc2VUd29SYXRlKTsKICAgIH0gZWxzZSB7CiAgICAgIHRva2VucyA9IHdlaUFtb3VudC5tdWwocGhhc2VUaHJlZVJhdGUpOwogICAgfQogICAgCiAgICB0b2tlbi51cGRhdGVUb3RhbFN1cHBseSh0b2tlbnMpOwoKICAgIC8vIHVwZGF0ZSBzdGF0ZQogICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLmFkZCh3ZWlBbW91bnQpOwoKICAgIHRva2VuLnRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB0b2tlbnMpOwogICAgVG9rZW5QdXJjaGFzZShtc2cuc2VuZGVyLCBiZW5lZmljaWFyeSwgd2VpQW1vdW50LCB0b2tlbnMpOwoKICAgIGlmICh0aGlzLmJhbGFuY2UgPiAxIGV0aGVyKXsKICAgICAgZm9yd2FyZEZ1bmRzKCk7CiAgICB9CiAgfQoKICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgLy8gb3ZlcnJpZGUgdG8gY3JlYXRlIGN1c3RvbSBmdW5kIGZvcndhcmRpbmcgbWVjaGFuaXNtcwogIGZ1bmN0aW9uIGZvcndhcmRGdW5kcygpIGludGVybmFsIHsKICAgIHdhbGxldC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogIH0KCiAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogIGZ1bmN0aW9uIHZhbGlkUHVyY2hhc2UoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChib29sKSB7CiAgICBib29sIHdpdGhpblBlcmlvZCA9IG5vdyA+PSBzdGFydElDT1BoYXNlT25lICYmIG5vdyA8PSBlbmRJQ087CiAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2U7CiAgfQogIAogIC8vIEByZXR1cm4gY3VycmVudFJhdGUgb2YgRlhYIHRva2VucyBwZXIgRVRICiAgZnVuY3Rpb24gY3VycmVudFJhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKG5vdyA8PSBzdGFydElDT1BoYXNlVHdvKSB7CiAgICAgIHJldHVybiBwaGFzZU9uZVJhdGU7CiAgICB9IGVsc2UgaWYgKG5vdyA8PSBzdGFydElDT1BoYXNlVGhyZWUpewogICAgICByZXR1cm4gcGhhc2VUd29SYXRlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHBoYXNlVGhyZWVSYXRlOwogICAgfQogIH0KICAKICAvLyBXaXRoZHJhdyB0ZWFtIHRva2VucyBhZnRlciAxIHllYXIKICBmdW5jdGlvbiB3aXRoZHJhd1RlYW1Ub2tlbnMoKSBwdWJsaWMgb25seUFkbWluIHJldHVybnMgKGJvb2wpIHsKICAgIHJlcXVpcmUobm93ID49IHN0YXJ0SUNPUGhhc2VPbmUgKyAxIHllYXJzKTsKCiAgICB0b2tlbi50cmFuc2Zlcih3YWxsZXQsIHRlYW1Ub2tlbnMpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIAogIGZ1bmN0aW9uIGRpc3RQcmVzYWxlKGFkZHJlc3MgX3ByZXNhbGUsIHVpbnQyNTYgX3Rva2VucykgcHVibGljIG9ubHlBZG1pbiB7CiAgICAgIHJlcXVpcmUoX3Rva2VucyA8PSAxMzAwMDAwMCoxMCoqMTgpOwogICAgICByZXF1aXJlKCFwcmVzYWxlRGlzdCk7CiAgICAgIHByZXNhbGVEaXN0ID0gdHJ1ZTsKICAgICAgCiAgICAgIHRva2VuLnRyYW5zZmVyKF9wcmVzYWxlLCBfdG9rZW5zKTsKICB9CiAgCiAgLy9zZW5kcyBhbnkgbGVmdCBvdmVyIGZ1bmRzIHRvIHRoZSB3YWxsZXQKICBmdW5jdGlvbiBmaW5hbGl6ZVNhbGUoKSBwdWJsaWMgb25seUFkbWluIHsKICAgICAgcmVxdWlyZShub3cgPiBlbmRJQ08pOwogICAgICAKICAgICAgaWYgKHRoaXMuYmFsYW5jZT4wKXsKICAgICAgICAgIHdhbGxldC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICB9CiAgICAgIGlmKHRva2VuLnRvdGFsU3VwcGx5KCkgPCB0b2tlbi5NQVhfU1VQUExZKCkpewogICAgICAgICAgdWludDI1NiBkaWZmZXJlbmNlID0gdG9rZW4uTUFYX1NVUFBMWSgpLnN1Yih0b2tlbi50b3RhbFN1cHBseSgpKTsKICAgICAgICAgIHRva2VuLnRyYW5zZmVyKHdhbGxldCwgZGlmZmVyZW5jZSk7CiAgICAgICAgICB0b2tlbi51cGRhdGVUb3RhbFN1cHBseShkaWZmZXJlbmNlKTsKICAgICAgfQogIH0KCn0='.
	

]
