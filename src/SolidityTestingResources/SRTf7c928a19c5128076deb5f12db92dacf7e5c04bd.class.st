Class {
	#name : #SRTf7c928a19c5128076deb5f12db92dacf7e5c04bd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf7c928a19c5128076deb5f12db92dacf7e5c04bd >> base64 [
	^ ''.
	

]
