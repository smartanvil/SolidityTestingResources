Class {
	#name : #SRT55648de19836338549130b1af587f16bea46f66b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT55648de19836338549130b1af587f16bea46f66b >> base64 [
	^ ''.
	

]
