Class {
	#name : #SRT911953208022030ad13074d2cb7c14fba4bee80a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT911953208022030ad13074d2cb7c14fba4bee80a >> base64 [
	^ 'Y29udHJhY3QgV2VlTWF0aCB7CgogICAgZnVuY3Rpb24gc3VidHJhY3RXZWUodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICBhc3NlcnQoeCA+PSB5KTsKICAgICAgdWludDI1NiB6ID0geCAtIHk7CiAgICAgIHJldHVybiB6OwogICAgfQoKICAgIGZ1bmN0aW9uIG11bHRXZWUodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1NikgewogICAgICB1aW50MjU2IHogPSB4ICogeTsKICAgICAgYXNzZXJ0KCh4ID09IDApfHwoei94ID09IHkpKTsKICAgICAgcmV0dXJuIHo7CiAgICB9Cgp9Cgpjb250cmFjdCBFUkMyMFRva2VuIHsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpIHt9CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkge30KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7fQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykge30KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7Cn0KCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOwogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICAgIH0KCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoJdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7Cn0KCgpjb250cmFjdCBXRUVDb2luIGlzIFN0YW5kYXJkVG9rZW4sIFdlZU1hdGggewoKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJXRUUgVG9rZW4iOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiV0VFIjsKICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7CiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAiMS4wIjsKCQogICAgYWRkcmVzcyBwdWJsaWMgV0VFRnVuZFdhbGxldDsgICAgICAKICAgIGFkZHJlc3MgcHVibGljIGFjY291bnQxQWRkcmVzczsgICAgICAKICAgIGFkZHJlc3MgcHVibGljIGFjY291bnQyQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGFjY291bnQzQWRkcmVzczsKICAgIAogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQ7CiAgICBib29sIHB1YmxpYyBpc1ByZVNhbGU7ICAgIAogICAgYm9vbCBwdWJsaWMgaXNNYWluU2FsZTsKICAgIHVpbnQgcHVibGljIHByZVNhbGVQZXJpb2Q7ICAgIAogICAgdWludDI1NiBwdWJsaWMgd2VlT25lRXRoQ2FuQnV5ID0gMDsgCQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5TYWxlQ2FwID0gIDUwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlblByZVNhbGVDYXAgPSAxNTAgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOyAKCXVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2Vuc0ZvckZpbmFsaXplID0gIDE1MCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7Cgl1aW50MjU2IHB1YmxpYyB0b3RhbEV0aEluV2VpOyAgCgkKICAgIGV2ZW50IExvZ1dFRShhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CgogICAgZnVuY3Rpb24gV0VFQ29pbigpCiAgICB7ICAgICAgICAgICAgICAgICAgICAgIAogICAgICBXRUVGdW5kV2FsbGV0ID0gIG1zZy5zZW5kZXI7CiAgICAgIGFjY291bnQxQWRkcmVzcyA9IDB4ZTk4RkY1MTJCNTg4NkVmMzQ3MzBiMEM4NDYyNGY2M2JBRDBBNTIxMjsJICAgICAgICAgICAgICAgICAgICAKICAgICAgYWNjb3VudDJBZGRyZXNzID0gMHhEYUIyMzY1NzUyQjNGZTVFNjMwZDY4RjM1NzI5M2UyNjg3MzI4OGZmOwkgICAgICAgICAgICAgICAgICAgIAogICAgICBhY2NvdW50M0FkZHJlc3MgPSAweGZGNTcwNmRjQ2JBNDdFMTJkODEwN0RjZDNDQTVFRjYyZTM1NWIzMUU7CSAgICAgICAgICAgICAgICAgICAgCiAgICAgIGlzUHJlU2FsZSA9IGZhbHNlOwogICAgICBpc01haW5TYWxlID0gZmFsc2U7CgkgIGlzRmluYWxpemVkID0gZmFsc2U7ICAgCiAgICAgIHRvdGFsU3VwcGx5ID0gKCAoMTAqKjkpICogMTAqKmRlY2ltYWxzICkgKyAoIDEwMCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHMgKTsKCSAgYmFsYW5jZXNbV0VFRnVuZFdhbGxldF0gPSB0b3RhbFN1cHBseTsgICAgICAgICAKICAgIH0KCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIAoJeyAgICAgIAogICAgICBpZiAoIChpc0ZpbmFsaXplZCkgfHwgKCFpc1ByZVNhbGUgJiYgIWlzTWFpblNhbGUpIHx8IChtc2cudmFsdWUgPT0gMCkgKSB0aHJvdzsKICAgICAgCiAgICAgIHVpbnQyNTYgdG9rZW5zID0gbXVsdFdlZShtc2cudmFsdWUsIHdlZU9uZUV0aENhbkJ1eSk7IAogICAgICB1aW50MjU2IHZlcmlmaWVkTGVmdFRva2VucyA9IHN1YnRyYWN0V2VlKGJhbGFuY2VzW1dFRUZ1bmRXYWxsZXRdLCB0b2tlbnMpOwoKCSAgaWYoIChpc01haW5TYWxlKSAmJiAodmVyaWZpZWRMZWZ0VG9rZW5zIDwgKHRvdGFsU3VwcGx5IC0gdG9rZW5TYWxlQ2FwKSkgKSB0aHJvdzsKCSAgaWYgKGJhbGFuY2VzW1dFRUZ1bmRXYWxsZXRdIDwgdG9rZW5zKSB0aHJvdzsKCSAgCiAgICAgIGlmKCAoaXNQcmVTYWxlKSAmJiAodmVyaWZpZWRMZWZ0VG9rZW5zIDwgKHRvdGFsU3VwcGx5IC0gdG9rZW5QcmVTYWxlQ2FwKSApICkKCSAgewkJCQoJCWlzTWFpblNhbGUgPSB0cnVlOwoJCXdlZU9uZUV0aENhbkJ1eSA9IDEwMDAwOyAJCgkJaXNQcmVTYWxlID0gZmFsc2U7CQkKCSAgfSAgICAgCSAgCiAgICAgCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2VuczsgIAoJICBiYWxhbmNlc1tXRUVGdW5kV2FsbGV0XSAtPSB0b2tlbnM7CiAgICAgIExvZ1dFRShtc2cuc2VuZGVyLCB0b2tlbnMpOyAgCgkgIAogICAgICBXRUVGdW5kV2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7ICAgCSAKCSAgdG90YWxFdGhJbldlaSA9IHRvdGFsRXRoSW5XZWkgKyBtc2cudmFsdWU7CSAgCiAgICB9CgogICAgZnVuY3Rpb24gZmluYWxpemUoKSBleHRlcm5hbCB7CiAgICAgIGlmKCAoaXNGaW5hbGl6ZWQpIHx8IChtc2cuc2VuZGVyICE9IFdFRUZ1bmRXYWxsZXQpICkgdGhyb3c7CiAgICAgICAgICAgICAgCiAgICAgIGJhbGFuY2VzW2FjY291bnQxQWRkcmVzc10gKz0gdG9rZW5zRm9yRmluYWxpemU7CgkgIExvZ1dFRShhY2NvdW50MUFkZHJlc3MsIHRva2Vuc0ZvckZpbmFsaXplKTsKCSAgCiAgICAgIGJhbGFuY2VzW2FjY291bnQyQWRkcmVzc10gKz0gdG9rZW5zRm9yRmluYWxpemU7CiAgICAgIExvZ1dFRShhY2NvdW50MkFkZHJlc3MsIHRva2Vuc0ZvckZpbmFsaXplKTsKICAgICAKCSAgYmFsYW5jZXNbYWNjb3VudDNBZGRyZXNzXSArPSB0b2tlbnNGb3JGaW5hbGl6ZTsKCSAgTG9nV0VFKGFjY291bnQzQWRkcmVzcywgdG9rZW5zRm9yRmluYWxpemUpOwoJICAKCSAgYmFsYW5jZXNbV0VFRnVuZFdhbGxldF0gLT0gKHRva2Vuc0ZvckZpbmFsaXplICogMyk7CgkgIAogICAgICBpc0ZpbmFsaXplZCA9IHRydWU7ICAKICAgIH0KCQogICAgZnVuY3Rpb24gc3dpdGNoU3RhZ2UoKSBleHRlcm5hbCB7CiAgICAgIGlmICggKGlzTWFpblNhbGUpIHx8IChtc2cuc2VuZGVyICE9IFdFRUZ1bmRXYWxsZXQpICkgdGhyb3c7CiAgICAgIAkgIAogICAgICBpZiAoIWlzUHJlU2FsZSl7CiAgICAgICAgaXNQcmVTYWxlID0gdHJ1ZTsKICAgICAgICB3ZWVPbmVFdGhDYW5CdXkgPSAyMDAwMDsKICAgICAgfQogICAgICBlbHNlIGlmICghaXNNYWluU2FsZSl7CiAgICAgICAgaXNNYWluU2FsZSA9IHRydWU7CgkJaXNQcmVTYWxlID0gZmFsc2U7CiAgICAgICAgd2VlT25lRXRoQ2FuQnV5ID0gMTAwMDA7ICAgICAgIAogICAgICB9CiAgICB9Cn0='.
	

]
