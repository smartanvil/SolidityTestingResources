Class {
	#name : #SRT3c563651318b6b2cf555207a1e611bb577fff446,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3c563651318b6b2cf555207a1e611bb577fff446 >> base64 [
	^ ''.
	

]
