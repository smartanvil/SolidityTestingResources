Class {
	#name : #SRT355aca372adbc5e2930d4620f2bbb425561f8598,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT355aca372adbc5e2930d4620f2bbb425561f8598 >> base64 [
	^ ''.
	

]
