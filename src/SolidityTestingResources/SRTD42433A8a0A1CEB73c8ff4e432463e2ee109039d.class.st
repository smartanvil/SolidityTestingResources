Class {
	#name : #SRTD42433A8a0A1CEB73c8ff4e432463e2ee109039d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTD42433A8a0A1CEB73c8ff4e432463e2ee109039d >> base64 [
	^ ''.
	

]
