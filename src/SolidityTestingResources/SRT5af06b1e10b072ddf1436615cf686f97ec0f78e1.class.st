Class {
	#name : #SRT5af06b1e10b072ddf1436615cf686f97ec0f78e1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5af06b1e10b072ddf1436615cf686f97ec0f78e1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7CgoKY29udHJhY3QgVW5pbG90UHJpemVDYWxjdWxhdG9yIHsKICAgIC8vQ2FsY3VsYXRpb24gY29uc3RhbnRzCiAgICB1aW50NjQgIGNvbnN0YW50IGFjY3VyYWN5ICAgICAgICAgICAgICAgICAgID0gMTAwMDAwMDAwMDAwMDAwMDAwMDsKICAgIHVpbnQ4ICBjb25zdGFudCBNQVhfWF9GT1JfWSAgICAgICAgICAgICAgICA9IDE5NTsgIC8vIDE5LjUKCiAgICB1aW50OCAgY29uc3RhbnQgbWluUHJpemVDb2VmaWNlbnQgICAgICAgICAgPSAxOwogICAgdWludDggIGNvbnN0YW50IHBlcmNlbnRPZldpbm5lcnMgICAgICAgICAgID0gNTsgICAgLy8gNSUKICAgIHVpbnQ4ICBjb25zdGFudCBwZXJjZW50T2ZGaXhlZFByaXplV2lubmVycyA9IDIwOyAgIC8vIDIwJQoKICAgIHVpbnQ4ICBjb25zdGFudCBnYW1lQ29tbWlzaW9uICAgICAgICAgICAgICA9IDA7ICAgLy8gMCUKICAgIHVpbnQ4ICBjb25zdGFudCBib251c0dhbWVDb21taXNpb24gICAgICAgICA9IDA7ICAgLy8gMCUKICAgIHVpbnQ4ICBjb25zdGFudCB0b2tlbkhvbGVyR2FtZUNvbW1pc2lvbiAgICA9IDA7ICAgIC8vIDAlCiAgICAvLyBFbmQgQ2FsY3VsYXRpb24gY29uc3RhbnRzCgogICAgZXZlbnQgRGVidWcodWludCk7CgogICAgZnVuY3Rpb24gZ2V0UHJpemVBbW91bnQodWludCB0b3RhbEFtb3VudCkKICAgICAgICBwdWJsaWMKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludCByZXN1bHQpCiAgICB7CiAgICAgICAgdWludCB0b3RhbENvbW1pc2lvbiA9IGdhbWVDb21taXNpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYm9udXNHYW1lQ29tbWlzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRva2VuSG9sZXJHYW1lQ29tbWlzaW9uOwoKICAgICAgICAvL0NhbGN1bGF0aW9uIGlzIG9kZCBvbiBwdXJwb3NlLiAgSXQgaXMgYSBzb3J0IG9mIGNlaWxpbmcgZWZmZWN0IHRvCiAgICAgICAgLy8gbWF4aW1pemUgYW1vdW50IG9mIHByaXplCiAgICAgICAgcmVzdWx0ID0gKCB0b3RhbEFtb3VudCAtICggKCB0b3RhbEFtb3VudCAqIHRvdGFsQ29tbWlzaW9uKSAvIDEwMCkgKTsKCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXROdW1XaW5uZXJzKHVpbnQgbnVtUGxheWVycykKICAgICAgICBwdWJsaWMKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludDE2IG51bVdpbm5lcnMsIHVpbnQxNiBudW1GaXhlZEFtb3VudFdpbm5lcnMpCiAgICB7CiAgICAgICAgLy8gQ2FsY3VsYXRpb24gaXMgb2RkIG9uIHB1cnBvc2UuIEl0IGlzIGEgc29ydCBvZiBjZWlsaW5nIGVmZmVjdCB0bwogICAgICAgIC8vIG1heGltaXplIG51bWJlciBvZiB3aW5uZXJzCiAgICAgICAgdWludDE2IHRvdGFOdW1sV2lubmVycyA9IHVpbnQxNiggbnVtUGxheWVycyAtICggKG51bVBsYXllcnMgKiAoIDEwMCAtIHBlcmNlbnRPZldpbm5lcnMgKSApIC8gMTAwICkgKTsKCgogICAgICAgIG51bUZpeGVkQW1vdW50V2lubmVycyA9IHVpbnQxNiggKHRvdGFOdW1sV2lubmVycyAqIHBlcmNlbnRPZkZpeGVkUHJpemVXaW5uZXJzKSAvIDEwMCApOwogICAgICAgIG51bVdpbm5lcnMgPSB1aW50MTYoIHRvdGFOdW1sV2lubmVycyAtIG51bUZpeGVkQW1vdW50V2lubmVycyApOwoKICAgICAgICByZXR1cm4gKG51bVdpbm5lcnMsIG51bUZpeGVkQW1vdW50V2lubmVycyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY2F1bHRlUHJpemVzKHVpbnQgYmV0LCB1aW50IG51bVBsYXllcnMpCiAgICAgICAgcHVibGljCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnRbNTBdIG1lbW9yeSBwcml6ZXMpCiAgICB7CiAgICAgICAgdmFyIChudW1XaW5uZXJzLCBudW1GaXhlZEFtb3VudFdpbm5lcnMpID0gZ2V0TnVtV2lubmVycyhudW1QbGF5ZXJzKTsKCiAgICAgICAgcmVxdWlyZSggdWludChudW1XaW5uZXJzICsgbnVtRml4ZWRBbW91bnRXaW5uZXJzKSA8PSBwcml6ZXMubGVuZ3RoICk7CgogICAgICAgIHVpbnRbXSBtZW1vcnkgeSA9IG5ldyB1aW50W10oKG51bVdpbm5lcnMgLSAxKSk7CiAgICAgICAgdWludCB6ID0gMDsgLy8gU3VtIG9mIGFsbCBZIHZhbHVlcwoKICAgICAgICBpZiAoIG51bVdpbm5lcnMgPT0gMSApIHsKICAgICAgICAgICAgcHJpemVzWzBdID0gZ2V0UHJpemVBbW91bnQodWludChiZXQqbnVtUGxheWVycykpOwoKICAgICAgICAgICAgcmV0dXJuIHByaXplczsKICAgICAgICB9IGVsc2UgaWYgKCBudW1XaW5uZXJzIDwgMSApIHsKICAgICAgICAgICAgcmV0dXJuIHByaXplczsKICAgICAgICB9CgogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgeVtpXSA9IGZvcm11bGEoIChjYWxjdWxhdGVTdGVwKG51bVdpbm5lcnMpICogaSkgKTsKICAgICAgICAgICAgeiArPSB5W2ldOwogICAgICAgIH0KCiAgICAgICAgYm9vbCBzdG9wID0gZmFsc2U7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7CiAgICAgICAgICAgIHVpbnRbNV0gbWVtb3J5IGNodW5rID0gZGlzdHJpYnV0ZVByaXplQ2FsY3VsYXRpb24oCiAgICAgICAgICAgICAgICBpLCB6LCB5LCBudW1QbGF5ZXJzLCBiZXQpOwoKICAgICAgICAgICAgZm9yICggdWludCBqID0gMDsgaiA8IGNodW5rLmxlbmd0aDsgaisrICkgewogICAgICAgICAgICAgICAgaWYgKCAoIChpICogY2h1bmsubGVuZ3RoKSArIGogKSA+PSAoIG51bVdpbm5lcnMgKyBudW1GaXhlZEFtb3VudFdpbm5lcnMgKSApIHsKICAgICAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwcml6ZXNbIChpICogY2h1bmsubGVuZ3RoKSArIGogXSA9IGNodW5rW2pdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIHN0b3AgKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHByaXplczsKICAgIH0KCiAgICBmdW5jdGlvbiBkaXN0cmlidXRlUHJpemVDYWxjdWxhdGlvbiAodWludCBjaHVua051bWJlciwgdWludCB6LCB1aW50W10gbWVtb3J5IHksIHVpbnQgdG90YWxOdW1QbGF5ZXJzLCB1aW50IGJldCkKICAgICAgICBwcml2YXRlCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnRbNV0gbWVtb3J5IHByaXplcykKICAgIHsKICAgICAgICB2YXIobnVtV2lubmVycywgbnVtRml4ZWRBbW91bnRXaW5uZXJzKSA9IGdldE51bVdpbm5lcnModG90YWxOdW1QbGF5ZXJzKTsKICAgICAgICB1aW50IHByaXplQW1vdW50Rm9yRGVsaWdhdGlvbiA9IGdldFByaXplQW1vdW50KCAodG90YWxOdW1QbGF5ZXJzICogYmV0KSApOwogICAgICAgIHByaXplQW1vdW50Rm9yRGVsaWdhdGlvbiAtPSB1aW50KCAoIGJldCAqIG1pblByaXplQ29lZmljZW50ICkgKiB1aW50KCBudW1XaW5uZXJzICsgbnVtRml4ZWRBbW91bnRXaW5uZXJzICkgKTsKCiAgICAgICAgdWludCBtYWluV2lubmVyQmFzZUFtb3VudCA9ICggKHByaXplQW1vdW50Rm9yRGVsaWdhdGlvbiAqIGFjY3VyYWN5KSAvICggKCAoIHogKiBhY2N1cmFjeSApIC8gKCAyICogeVswXSApICkgKyAoIDEgKiBhY2N1cmFjeSApICkgKTsKICAgICAgICB1aW50IHVuZGVsaWdhdGVkQW1vdW50ICAgID0gcHJpemVBbW91bnRGb3JEZWxpZ2F0aW9uOwoKICAgICAgICB1aW50IHN0YXJ0UG9pbnQgPSBjaHVua051bWJlciAqIHByaXplcy5sZW5ndGg7CgogICAgICAgIGZvciAoIHVpbnQgaSA9IDA7IGkgPCBwcml6ZXMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIGlmICggaSA+PSB1aW50KG51bVdpbm5lcnMgKyBudW1GaXhlZEFtb3VudFdpbm5lcnMpICkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcHJpemVzWyBpIF0gPSAoYmV0ICogbWluUHJpemVDb2VmaWNlbnQpOwogICAgICAgICAgICB1aW50IGV4dHJhUHJpemUgPSAwOwoKICAgICAgICAgICAgaWYgKCBpID09ICggbnVtV2lubmVycyAtIDEgKSApIHsKICAgICAgICAgICAgICAgIGV4dHJhUHJpemUgPSB1bmRlbGlnYXRlZEFtb3VudDsKICAgICAgICAgICAgfSBlbHNlIGlmICggaSA9PSAwICYmIGNodW5rTnVtYmVyID09IDAgKSB7CiAgICAgICAgICAgICAgICBleHRyYVByaXplID0gbWFpbldpbm5lckJhc2VBbW91bnQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoICggc3RhcnRQb2ludCArIGkgKSA8IG51bVdpbm5lcnMgKSB7CiAgICAgICAgICAgICAgICBleHRyYVByaXplID0gKCAoIHlbICggc3RhcnRQb2ludCArIGkgKSAtIDEgXSAqIChwcml6ZUFtb3VudEZvckRlbGlnYXRpb24gLSBtYWluV2lubmVyQmFzZUFtb3VudCkgKSAvIHopOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwcml6ZXNbIGkgXSArPSBleHRyYVByaXplOwogICAgICAgICAgICB1bmRlbGlnYXRlZEFtb3VudCAtPSBleHRyYVByaXplOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHByaXplczsKICAgIH0KCiAgICBmdW5jdGlvbiBmb3JtdWxhKHVpbnQgeCkKICAgICAgICBwdWJsaWMKICAgICAgICBwdXJlCiAgICAgICAgcmV0dXJucyAodWludCB5KQogICAgewogICAgICAgIHkgPSAoICgxICogYWNjdXJhY3kqKjIpIC8gKHggKyAoNSphY2N1cmFjeS8xMCkpKSAtICgoNSAqIGFjY3VyYWN5KSAvIDEwMCk7CgogICAgICAgIHJldHVybiB5OwogICAgfQoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVN0ZXAodWludCBudW1XaW5uZXJzKQogICAgICAgIHB1YmxpYwogICAgICAgIHB1cmUKICAgICAgICByZXR1cm5zKHVpbnQgc3RlcCkKICAgIHsKICAgICAgICBzdGVwID0gKCBNQVhfWF9GT1JfWSAqIGFjY3VyYWN5IC8gMTAgKSAvIG51bVdpbm5lcnM7CgogICAgICAgIHJldHVybiBzdGVwOwogICAgfQp9'.
	

]
