Class {
	#name : #SRT09133d5AcFF2353d3860F1dc455589A941cF5EBd,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT09133d5AcFF2353d3860F1dc455589A941cF5EBd >> base64 [
	^ ''.
	

]
