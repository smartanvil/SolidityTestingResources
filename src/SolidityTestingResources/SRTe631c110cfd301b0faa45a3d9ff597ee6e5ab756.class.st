Class {
	#name : #SRTe631c110cfd301b0faa45a3d9ff597ee6e5ab756,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe631c110cfd301b0faa45a3d9ff597ee6e5ab756 >> base64 [
	^ ''.
	

]
