Class {
	#name : #SRTe3eC19C6C157F9a7d706791f70eb372E2158623C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe3eC19C6C157F9a7d706791f70eb372E2158623C >> base64 [
	^ ''.
	

]
