Class {
	#name : #SRTc030895ccebe9d6a1ae4841e62cb23a2b3fab818,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc030895ccebe9d6a1ae4841e62cb23a2b3fab818 >> base64 [
	^ ''.
	

]
