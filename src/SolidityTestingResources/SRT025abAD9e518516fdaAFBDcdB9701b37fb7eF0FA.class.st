Class {
	#name : #SRT025abAD9e518516fdaAFBDcdB9701b37fb7eF0FA,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT025abAD9e518516fdaAFBDcdB9701b37fb7eF0FA >> base64 [
	^ ''.
	

]
