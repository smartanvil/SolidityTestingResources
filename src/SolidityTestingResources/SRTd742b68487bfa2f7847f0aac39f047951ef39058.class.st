Class {
	#name : #SRTd742b68487bfa2f7847f0aac39f047951ef39058,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd742b68487bfa2f7847f0aac39f047951ef39058 >> base64 [
	^ ''.
	

]
