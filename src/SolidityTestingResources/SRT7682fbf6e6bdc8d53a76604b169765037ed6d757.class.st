Class {
	#name : #SRT7682fbf6e6bdc8d53a76604b169765037ed6d757,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7682fbf6e6bdc8d53a76604b169765037ed6d757 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsKCmNvbnRyYWN0IExhc3RXaWxsQ29udHJhY3QgewogICAgc3RydWN0IFJlY2lwaWVudFBlcmNlbnQgewogICAgICAgIGFkZHJlc3MgcmVjaXBpZW50OwogICAgICAgIHVpbnQ4IHBlcmNlbnQ7CiAgICB9CgogICAgLy8gVXNlciB3aGljaCByZWNlaXZlZCBhbGwgdGhlIEVUSCBvbiBraWxsIG9yIGFjY2lkZW50LgogICAgYWRkcmVzcyBwdWJsaWMgdGFyZ2V0VXNlcjsKICAgIC8vIExhc3Qgd2lsbCBhZG1pbiBhY2NvdW50LgogICAgYWRkcmVzcyBwdWJsaWMgbGFzdFdpbGxBY2NvdW50OwogICAgLy8gSG93IG1hbnkgYW1vdW50IG9mIGNvbnRyYWN0J3MgYmFsYW5jZSB3aWxsIGJlIHBheWVkIHRvIHJlY2lwaWVudHMgd2hlbiBhY2NpZGVudCBvY2N1cnMuCiAgICBSZWNpcGllbnRQZXJjZW50W10gcHVibGljIHJlY2lwaWVudFBlcmNlbnRzOwoKICAgIC8vIC0tLS0tLS0tLS0tLSBDT05TVFJVQ1QgLS0tLS0tLS0tLS0tLQogICAgZnVuY3Rpb24gTGFzdFdpbGxDb250cmFjdChhZGRyZXNzIF90YXJnZXRVc2VyLCBhZGRyZXNzW10gX3JlY2lwaWVudHMsIHVpbnQ4W10gX3BlcmNlbnRzKSB7CiAgICAgICAgdGFyZ2V0VXNlciA9IF90YXJnZXRVc2VyOwogICAgICAgIGxhc3RXaWxsQWNjb3VudCA9IG1zZy5zZW5kZXI7CiAgICAgICAgYXNzZXJ0KF9yZWNpcGllbnRzLmxlbmd0aCA9PSBfcGVyY2VudHMubGVuZ3RoKTsKICAgICAgICB1aW50OCBzdW1tYXJ5UGVyY2VudCA9IDA7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgX3JlY2lwaWVudHMubGVuZ3RoOyBpICsrKSB7CiAgICAgICAgICAgIHJlY2lwaWVudFBlcmNlbnRzLnB1c2goUmVjaXBpZW50UGVyY2VudChfcmVjaXBpZW50c1tpXSwgX3BlcmNlbnRzW2ldKSk7CiAgICAgICAgICAgIHN1bW1hcnlQZXJjZW50ICs9IF9wZXJjZW50c1tpXTsKICAgICAgICB9CiAgICAgICAgYXNzZXJ0KHN1bW1hcnlQZXJjZW50ID09IDEwMCk7CiAgICB9CgogICAgLy8gLS0tLS0tLS0tLS0tIEVWRU5UUyAtLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBPY2N1cnMgd2hlbiBjb250cmFjdCB3YXMga2lsbGVkLgogICAgZXZlbnQgS2lsbGVkKGJvb2wgYnlVc2VyKTsKICAgIC8vIE9jY3VycyB3aGVuIGZvdW5kcyB3ZXJlIHNlbnQuCiAgICBldmVudCBGdW5kc0FkZGVkKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50IGFtb3VudCk7CiAgICAvLyBPY2N1cnMgd2hlbiBhY2NpZGVudCBoYXBwZW5lZC4KICAgIGV2ZW50IEFjY2lkZW50KHVpbnQgYmFsYW5jZSk7CiAgICAvLyBPY2N1cnMgd2hlbiBhY2NpZGVudCBsZWFkcyB0byBzZW5kaW5nIGZ1bmRzIHRvIHJlY2lwaWVudC4KICAgIGV2ZW50IEZ1bmRzU2VudChhZGRyZXNzIHJlY2lwaWVudCwgdWludCBhbW91bnQsIHVpbnQ4IHBlcmNlbnQpOwogICAgLy8gT2NjdXJzIHdoZW4gYWNjaWRlbnQgbGVhZHMgdG8gc2VuZGluZyBmdW5kcyB0byByZWNpcGllbnQuCiAgICBldmVudCBGdW5kc0NoYW5nZSh1aW50IGNoYW5nZSk7CiAgICAvLyBUbyBpbmZvcm0gTGFzdFdpbGwgc3lzdGVtIHRoYXQgY2hlY2sgd2FzIGZpbmlzaGVkLgogICAgZXZlbnQgQ2hlY2tlZChib29sIGlzQWNjaWRlbnQpOwoKICAgIC8vIC0tLS0tLS0tLS0tLSBFWFRFUk5BTCBBUEkgLS0tLS0tLS0tLQogICAgLy8gS2lsbCBjb250cmFjdCBhbmQgcmV0dXJuIGFsbCBmb3VuZHMgdG8gdGhlIHRhcmdldCB1c2VyLgogICAgZnVuY3Rpb24ga2lsbCgpIG9ubHlUYXJnZXRPckFkbWluIHB1YmxpYyB7CiAgICAgICAgS2lsbGVkKGlzVGFyZ2V0KCkpOwogICAgICAgIHNlbGZkZXN0cnVjdCh0YXJnZXRVc2VyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjaGVjaygpIG9ubHlBZG1pbiBwYXlhYmxlIHB1YmxpYyB7CiAgICAgICAgaWYgKGRvQ2hlY2soKSkgewogICAgICAgICAgICBBY2NpZGVudCh0aGlzLmJhbGFuY2UpOwogICAgICAgICAgICBhY2NpZGVudCgpOwogICAgICAgIH0KICAgIH0KICAgIC8vIGZvciBkZWJ1ZyBwdXJwb3NlcyBvbmx5IQogICAgZnVuY3Rpb24gdGVzdERpc3RyaWJ1dGUodWludCBiYWxhbmNlLCBhZGRyZXNzW10gcmVjaXBpZW50cywgdWludDhbXSBwZXJjZW50cykgewogICAgICAgIGFzc2VydChyZWNpcGllbnRzLmxlbmd0aCA9PSBwZXJjZW50cy5sZW5ndGgpOwogICAgICAgIFJlY2lwaWVudFBlcmNlbnRbXSBtZW1vcnkgcnAgPSBuZXcgUmVjaXBpZW50UGVyY2VudFtdKHJlY2lwaWVudHMubGVuZ3RoKTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCByZWNpcGllbnRzLmxlbmd0aDsgaSArKykgewogICAgICAgICAgICBycFtpXS5yZWNpcGllbnQgPSByZWNpcGllbnRzW2ldOwogICAgICAgICAgICBycFtpXS5wZXJjZW50ID0gcGVyY2VudHNbaV07CiAgICAgICAgfQogICAgICAgIHVpbnRbXSBtZW1vcnkgYW1vdW50cyA9IG5ldyB1aW50W10ocmVjaXBpZW50cy5sZW5ndGgpOwogICAgICAgIHVpbnQgY2hhbmdlID0gZGlzdHJpYnV0ZShiYWxhbmNlLCBycCwgYW1vdW50cyk7CgogICAgICAgIGZvciAodWludCBtID0gMDsgbSA8IGFtb3VudHMubGVuZ3RoOyBtICsrKSB7CiAgICAgICAgICAgIEZ1bmRzU2VudChyZWNpcGllbnRzW21dLCBhbW91bnRzW21dLCBwZXJjZW50c1ttXSk7CiAgICAgICAgfQogICAgICAgIEZ1bmRzQ2hhbmdlKGNoYW5nZSk7CiAgICB9CgogICAgLy8gLS0tLS0tLS0tLS0tIEZBTExCQUNLIC0tLS0tLS0tLS0tLS0KICAgIC8vIE11c3QgYmUgbGVzcyB0aGVuIDIzMDAgZ2FzCiAgICBmdW5jdGlvbigpIHBheWFibGUgewogICAgICAgIEZ1bmRzQWRkZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0gSU5URVJOQUwgLS0tLS0tLS0tLS0tLQogICAgLy8gSW50ZXJuYWwgY29uc3RhbnQgbWV0aG9kIGZvciBjYWxjdWxhdGluZyBwYXltZW50cy4KICAgIGZ1bmN0aW9uIGRpc3RyaWJ1dGUodWludCBiYWxhbmNlLCBSZWNpcGllbnRQZXJjZW50W10gcGVyY2VudHMsIHVpbnRbXSBhbW91bnRzKSBpbnRlcm5hbCBjb25zdGFudAogICAgcmV0dXJucyAodWludCBjaGFuZ2UpIHsKICAgICAgICBhc3NlcnQoYW1vdW50cy5sZW5ndGggPT0gcGVyY2VudHMubGVuZ3RoKTsKICAgICAgICBjaGFuZ2UgPSBiYWxhbmNlOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHBlcmNlbnRzLmxlbmd0aDsgaSArKykgewogICAgICAgICAgICB2YXIgYW1vdW50ID0gYmFsYW5jZSAqIHBlcmNlbnRzW2ldLnBlcmNlbnQgLyAxMDA7CiAgICAgICAgICAgIGFtb3VudHNbaV0gPSBhbW91bnQ7CiAgICAgICAgICAgIGNoYW5nZSAtPSBhbW91bnQ7CiAgICAgICAgfQogICAgfQoKICAgIC8vIERvIGFjY2lkZW50IGxvZ2ljIC0gdHJhbnNmZXIgZm91bmQgYW5kIGRlc3RydWN0IGNvbnRyYWN0LgogICAgZnVuY3Rpb24gYWNjaWRlbnQoKSBpbnRlcm5hbCB7CiAgICAgICAgdWludFtdIG1lbW9yeSBhbW91bnRzID0gbmV3IHVpbnRbXShyZWNpcGllbnRQZXJjZW50cy5sZW5ndGgpOwogICAgICAgIHVpbnQgY2hhbmdlID0gZGlzdHJpYnV0ZSh0aGlzLmJhbGFuY2UsIHJlY2lwaWVudFBlcmNlbnRzLCBhbW91bnRzKTsKCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgcmVjaXBpZW50UGVyY2VudHMubGVuZ3RoOyBpICsrKSB7CiAgICAgICAgICAgIHZhciBhbW91bnQgPSBhbW91bnRzW2ldOwogICAgICAgICAgICBpZiAoYW1vdW50ID09IDApIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlY2lwaWVudFBlcmNlbnRzW2ldLnJlY2lwaWVudC50cmFuc2ZlcihhbW91bnQpOwogICAgICAgICAgICBGdW5kc1NlbnQocmVjaXBpZW50UGVyY2VudHNbaV0ucmVjaXBpZW50LCBhbW91bnQsIHJlY2lwaWVudFBlcmNlbnRzW2ldLnBlcmNlbnQpOwogICAgICAgIH0KCiAgICAgICAgRnVuZHNDaGFuZ2UoY2hhbmdlKTsKICAgICAgICBzZWxmZGVzdHJ1Y3QodGFyZ2V0VXNlcik7CiAgICB9CgogICAgZnVuY3Rpb24gZG9DaGVjaygpIGludGVybmFsIHJldHVybnMgKGJvb2wpOwoKICAgIGZ1bmN0aW9uIGlzVGFyZ2V0KCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0YXJnZXRVc2VyID09IG1zZy5zZW5kZXI7CiAgICB9CgoKICAgIC8vIC0tLS0tLS0tLS0tLSBNT0RJRklFUlMgLS0tLS0tLS0tLS0KICAgIG1vZGlmaWVyIG9ubHlUYXJnZXQoKSB7CiAgICAgICAgcmVxdWlyZShpc1RhcmdldCgpKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBZG1pbigpIHsKICAgICAgICByZXF1aXJlKGxhc3RXaWxsQWNjb3VudCA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlUYXJnZXRPckFkbWluKCkgewogICAgICAgIHJlcXVpcmUodGFyZ2V0VXNlciA9PSBtc2cuc2VuZGVyIHx8IGxhc3RXaWxsQWNjb3VudCA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBfOwogICAgfQoKfQoKLy8gPE9SQUNMSVpFX0FQST4KLyoKQ29weXJpZ2h0IChjKSAyMDE1LTIwMTYgT3JhY2xpemUgU1JMCkNvcHlyaWdodCAoYykgMjAxNiBPcmFjbGl6ZSBMVEQKCgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQpvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KVEhFIFNPRlRXQVJFLgoqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsvL3BsZWFzZSBpbXBvcnQgb3JhY2xpemVBUElfcHJlMC40LnNvbCB3aGVuIHNvbGlkaXR5IDwgMC40LjAKCmNvbnRyYWN0IE9yYWNsaXplSSB7CiAgICBhZGRyZXNzIHB1YmxpYyBjYkFkZHJlc3M7CiAgICBmdW5jdGlvbiBxdWVyeSh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gcXVlcnlfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZywgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gcXVlcnkyKHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMikgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeTJfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMiwgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gcXVlcnlOKHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTikgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7CiAgICBmdW5jdGlvbiBxdWVyeU5fd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTiwgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOwogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlKSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsKICAgIGZ1bmN0aW9uIGdldFByaWNlKHN0cmluZyBfZGF0YXNvdXJjZSwgdWludCBnYXNsaW1pdCkgcmV0dXJucyAodWludCBfZHNwcmljZSk7CiAgICBmdW5jdGlvbiB1c2VDb3Vwb24oc3RyaW5nIF9jb3Vwb24pOwogICAgZnVuY3Rpb24gc2V0UHJvb2ZUeXBlKGJ5dGUgX3Byb29mVHlwZSk7CiAgICBmdW5jdGlvbiBzZXRDb25maWcoYnl0ZXMzMiBfY29uZmlnKTsKICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKTsKICAgIGZ1bmN0aW9uIHJhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCkgcmV0dXJucyhieXRlczMyKTsKfQpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgewogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcygpIHJldHVybnMgKGFkZHJlc3MgX2FkZHIpOwp9CmNvbnRyYWN0IHVzaW5nT3JhY2xpemUgewogICAgdWludCBjb25zdGFudCBkYXkgPSA2MCo2MCoyNDsKICAgIHVpbnQgY29uc3RhbnQgd2VlayA9IDYwKjYwKjI0Kjc7CiAgICB1aW50IGNvbnN0YW50IG1vbnRoID0gNjAqNjAqMjQqMzA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9OT05FID0gMHgwMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX1RMU05vdGFyeSA9IDB4MTA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9BbmRyb2lkID0gMHgyMDsKICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX0xlZGdlciA9IDB4MzA7CiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9OYXRpdmUgPSAweEYwOwogICAgYnl0ZSBjb25zdGFudCBwcm9vZlN0b3JhZ2VfSVBGUyA9IDB4MDE7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfYXV0byA9IDA7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfbWFpbm5ldCA9IDE7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfdGVzdG5ldCA9IDI7CiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfbW9yZGVuID0gMjsKICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9jb25zZW5zeXMgPSAxNjE7CgogICAgT3JhY2xpemVBZGRyUmVzb2x2ZXJJIE9BUjsKCiAgICBPcmFjbGl6ZUkgb3JhY2xpemU7CiAgICBtb2RpZmllciBvcmFjbGl6ZUFQSSB7CiAgICAgICAgaWYoKGFkZHJlc3MoT0FSKT09MCl8fChnZXRDb2RlU2l6ZShhZGRyZXNzKE9BUikpPT0wKSkgb3JhY2xpemVfc2V0TmV0d29yayhuZXR3b3JrSURfYXV0byk7CiAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7CiAgICAgICAgXzsKICAgIH0KICAgIG1vZGlmaWVyIGNvdXBvbihzdHJpbmcgY29kZSl7CiAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7CiAgICAgICAgb3JhY2xpemUudXNlQ291cG9uKGNvZGUpOwogICAgICAgIF87CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29yayh1aW50OCBuZXR3b3JrSUQpIGludGVybmFsIHJldHVybnMoYm9vbCl7CiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MWQzQjI2MzhhN2NDOWYyQ0IzRDI5OEEzREE3YTkwQjY3RTU1MDZlZCk+MCl7IC8vbWFpbm5ldAogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxZDNCMjYzOGE3Y0M5ZjJDQjNEMjk4QTNEQTdhOTBCNjdFNTUwNmVkKTsKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9tYWlubmV0Iik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhjMDNBMjYxNUQ1ZWZhZjVGNDlGNjBCN0JCNjU4M2VhZWMyMTJmZGYxKT4wKXsgLy9yb3BzdGVuIHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4YzAzQTI2MTVENWVmYWY1RjQ5RjYwQjdCQjY1ODNlYWVjMjEyZmRmMSk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfcm9wc3RlbjMiKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweEI3QTA3QmNGMkJhMmYyNzAzYjI0QzA2OTFiNTI3ODk5OUM1OUFDN2UpPjApeyAvL2tvdmFuIHRlc3RuZXQKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk7CiAgICAgICAgICAgIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKCJldGhfa292YW4iKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDE0NjUwMGNmZDM1QjIyRTRBMzkyRmUwYURjMDZEZTFhMTM2OEVkNDgpPjApeyAvL3JpbmtlYnkgdGVzdG5ldAogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KTsKICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yaW5rZWJ5Iik7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg2ZjQ4NUM4QkY2ZmM0M2VBMjEyRTkzQkJGOGNlMDQ2QzdmMWNiNDc1KT4wKXsgLy9ldGhlcmV1bS1icmlkZ2UKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NmY0ODVDOEJGNmZjNDNlQTIxMkU5M0JCRjhjZTA0NkM3ZjFjYjQ3NSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgyMGUxMkExRjg1OUIzRmVhRTVGYjJBMEEzMkMxOEY1YTY1NTU1YkJGKT4wKXsgLy9ldGhlci5jYW1wIGlkZQogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHgyMGUxMkExRjg1OUIzRmVhRTVGYjJBMEEzMkMxOEY1YTY1NTU1YkJGKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDUxZWZhRjRjOEIzQzlBZkJENWFCOUY0YmJDODI3ODRBYjZlZjhmQUEpPjApeyAvL2Jyb3dzZXItc29saWRpdHkKICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQpIHsKICAgICAgICBfX2NhbGxiYWNrKG15aWQsIHJlc3VsdCwgbmV3IGJ5dGVzKDApKTsKICAgIH0KICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0LCBieXRlcyBwcm9vZikgewogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV91c2VDb3Vwb24oc3RyaW5nIGNvZGUpIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICBvcmFjbGl6ZS51c2VDb3Vwb24oY29kZSk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfZ2V0UHJpY2Uoc3RyaW5nIGRhdGFzb3VyY2UpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKHVpbnQpewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9nZXRQcmljZShzdHJpbmcgZGF0YXNvdXJjZSwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAodWludCl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTIudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ml93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Ti52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Tl93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpewogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UKICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IHN0cmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOyAgICAgICAKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMik7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzVdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICBkeW5hcmdzWzRdID0gYXJnc1s0XTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7CiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7CiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsKICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gYmEyY2JvcihhcmdOKTsKICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsKICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOwogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOwogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07ICAgICAgIAogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgewogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsKICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsKICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsKICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsKICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsKICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsKICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNSk7CiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07CiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07CiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07CiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107CiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7CiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOwogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOwogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOwogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOwogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOwogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOwogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7CiAgICB9CgogICAgZnVuY3Rpb24gb3JhY2xpemVfY2JBZGRyZXNzKCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYWRkcmVzcyl7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmNiQWRkcmVzcygpOwogICAgfQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0UHJvb2YoYnl0ZSBwcm9vZlApIG9yYWNsaXplQVBJIGludGVybmFsIHsKICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0UHJvb2ZUeXBlKHByb29mUCk7CiAgICB9CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDdXN0b21HYXNQcmljZSh1aW50IGdhc1ByaWNlKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldEN1c3RvbUdhc1ByaWNlKGdhc1ByaWNlKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldENvbmZpZyhieXRlczMyIGNvbmZpZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgewogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRDb25maWcoY29uZmlnKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyKXsKICAgICAgICByZXR1cm4gb3JhY2xpemUucmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb2RlU2l6ZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKHVpbnQgX3NpemUpIHsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIF9zaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZUFkZHIoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKXsKICAgICAgICBieXRlcyBtZW1vcnkgdG1wID0gYnl0ZXMoX2EpOwogICAgICAgIHVpbnQxNjAgaWFkZHIgPSAwOwogICAgICAgIHVpbnQxNjAgYjE7CiAgICAgICAgdWludDE2MCBiMjsKICAgICAgICBmb3IgKHVpbnQgaT0yOyBpPDIrMioyMDsgaSs9Mil7CiAgICAgICAgICAgIGlhZGRyICo9IDI1NjsKICAgICAgICAgICAgYjEgPSB1aW50MTYwKHRtcFtpXSk7CiAgICAgICAgICAgIGIyID0gdWludDE2MCh0bXBbaSsxXSk7CiAgICAgICAgICAgIGlmICgoYjEgPj0gOTcpJiYoYjEgPD0gMTAyKSkgYjEgLT0gODc7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMSA+PSA2NSkmJihiMSA8PSA3MCkpIGIxIC09IDU1OwogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNDgpJiYoYjEgPD0gNTcpKSBiMSAtPSA0ODsKICAgICAgICAgICAgaWYgKChiMiA+PSA5NykmJihiMiA8PSAxMDIpKSBiMiAtPSA4NzsKICAgICAgICAgICAgZWxzZSBpZiAoKGIyID49IDY1KSYmKGIyIDw9IDcwKSkgYjIgLT0gNTU7CiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA0OCkmJihiMiA8PSA1NykpIGIyIC09IDQ4OwogICAgICAgICAgICBpYWRkciArPSAoYjEqMTYrYjIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYWRkcmVzcyhpYWRkcik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29tcGFyZShzdHJpbmcgX2EsIHN0cmluZyBfYikgaW50ZXJuYWwgcmV0dXJucyAoaW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGEgPSBieXRlcyhfYSk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGIgPSBieXRlcyhfYik7CiAgICAgICAgdWludCBtaW5MZW5ndGggPSBhLmxlbmd0aDsKICAgICAgICBpZiAoYi5sZW5ndGggPCBtaW5MZW5ndGgpIG1pbkxlbmd0aCA9IGIubGVuZ3RoOwogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IG1pbkxlbmd0aDsgaSArKykKICAgICAgICAgICAgaWYgKGFbaV0gPCBiW2ldKQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICBlbHNlIGlmIChhW2ldID4gYltpXSkKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgZWxzZSBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBpbmRleE9mKHN0cmluZyBfaGF5c3RhY2ssIHN0cmluZyBfbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChpbnQpIHsKICAgICAgICBieXRlcyBtZW1vcnkgaCA9IGJ5dGVzKF9oYXlzdGFjayk7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG4gPSBieXRlcyhfbmVlZGxlKTsKICAgICAgICBpZihoLmxlbmd0aCA8IDEgfHwgbi5sZW5ndGggPCAxIHx8IChuLmxlbmd0aCA+IGgubGVuZ3RoKSkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UgaWYoaC5sZW5ndGggPiAoMioqMTI4IC0xKSkKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHVpbnQgc3ViaW5kZXggPSAwOwogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBoLmxlbmd0aDsgaSArKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKGhbaV0gPT0gblswXSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCA9IDE7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3ViaW5kZXggPCBuLmxlbmd0aCAmJiAoaSArIHN1YmluZGV4KSA8IGgubGVuZ3RoICYmIGhbaSArIHN1YmluZGV4XSA9PSBuW3N1YmluZGV4XSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKHN1YmluZGV4ID09IG4ubGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50KGkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCwgc3RyaW5nIF9lKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICBieXRlcyBtZW1vcnkgX2JhID0gYnl0ZXMoX2EpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmIgPSBieXRlcyhfYik7CiAgICAgICAgYnl0ZXMgbWVtb3J5IF9iYyA9IGJ5dGVzKF9jKTsKICAgICAgICBieXRlcyBtZW1vcnkgX2JkID0gYnl0ZXMoX2QpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBfYmUgPSBieXRlcyhfZSk7CiAgICAgICAgc3RyaW5nIG1lbW9yeSBhYmNkZSA9IG5ldyBzdHJpbmcoX2JhLmxlbmd0aCArIF9iYi5sZW5ndGggKyBfYmMubGVuZ3RoICsgX2JkLmxlbmd0aCArIF9iZS5sZW5ndGgpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBiYWJjZGUgPSBieXRlcyhhYmNkZSk7CiAgICAgICAgdWludCBrID0gMDsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfYmEubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JhW2ldOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmIubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JiW2ldOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmMubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JjW2ldOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmQubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JkW2ldOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmUubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JlW2ldOwogICAgICAgIHJldHVybiBzdHJpbmcoYmFiY2RlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYywgc3RyaW5nIF9kKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsIF9kLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgIiIsICIiKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCAiIiwgIiIsICIiKTsKICAgIH0KCiAgICAvLyBwYXJzZUludAogICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHBhcnNlSW50KF9hLCAwKTsKICAgIH0KCiAgICAvLyBwYXJzZUludChwYXJzZUZsb2F0KjEwXl9iKQogICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nIF9hLCB1aW50IF9iKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGJyZXN1bHQgPSBieXRlcyhfYSk7CiAgICAgICAgdWludCBtaW50ID0gMDsKICAgICAgICBib29sIGRlY2ltYWxzID0gZmFsc2U7CiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxicmVzdWx0Lmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYgKChicmVzdWx0W2ldID49IDQ4KSYmKGJyZXN1bHRbaV0gPD0gNTcpKXsKICAgICAgICAgICAgICAgIGlmIChkZWNpbWFscyl7CiAgICAgICAgICAgICAgICAgICBpZiAoX2IgPT0gMCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBfYi0tOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbWludCAqPSAxMDsKICAgICAgICAgICAgICAgIG1pbnQgKz0gdWludChicmVzdWx0W2ldKSAtIDQ4OwogICAgICAgICAgICB9IGVsc2UgaWYgKGJyZXN1bHRbaV0gPT0gNDYpIGRlY2ltYWxzID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKF9iID4gMCkgbWludCAqPSAxMCoqX2I7CiAgICAgICAgcmV0dXJuIG1pbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gdWludDJzdHIodWludCBpKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpewogICAgICAgIGlmIChpID09IDApIHJldHVybiAiMCI7CiAgICAgICAgdWludCBqID0gaTsKICAgICAgICB1aW50IGxlbjsKICAgICAgICB3aGlsZSAoaiAhPSAwKXsKICAgICAgICAgICAgbGVuKys7CiAgICAgICAgICAgIGogLz0gMTA7CiAgICAgICAgfQogICAgICAgIGJ5dGVzIG1lbW9yeSBic3RyID0gbmV3IGJ5dGVzKGxlbik7CiAgICAgICAgdWludCBrID0gbGVuIC0gMTsKICAgICAgICB3aGlsZSAoaSAhPSAwKXsKICAgICAgICAgICAgYnN0cltrLS1dID0gYnl0ZSg0OCArIGkgJSAxMCk7CiAgICAgICAgICAgIGkgLz0gMTA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJpbmcoYnN0cik7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7CiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsKCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aAogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7CiAgICAgICAgICAgIGJ5dGVzW10gbWVtb3J5IGVsZW1BcnJheSA9IG5ldyBieXRlc1tdKGFycmxlbik7CiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7CiAgICAgICAgICAgICAgICBvdXRwdXRsZW4gKz0gZWxlbUFycmF5W2ldLmxlbmd0aCArIChlbGVtQXJyYXlbaV0ubGVuZ3RoIC0gMSkvMjMgKyAzOyAvLyszIGFjY291bnRzIGZvciBwYWlyZWQgaWRlbnRpZmllciB0eXBlcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsKICAgICAgICAgICAgdWludCBjYm9ybGVuID0gYXJybGVuICsgMHg4MDsKICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOwogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7CgogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4NUY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBidWcgd2l0aCBsYXJnZXIgc3RyaW5ncywgdGhpcyBtYXkgYmUgdGhlIGN1bHByaXQKICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWNib3JsZW4gKz0gMHg0MDsKICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGVsZW1jYm9ybGVuKVtjdHIgLSBsY3RyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOwogICAgICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOwogICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9CgogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsKICAgICAgICAgICAgdWludCBhcnJsZW4gPSBhcnIubGVuZ3RoOwoKICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoCiAgICAgICAgICAgIHVpbnQgb3V0cHV0bGVuID0gMDsKICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsKICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1BcnJheVtpXSA9IChieXRlcyhhcnJbaV0pKTsKICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdWludCBjdHIgPSAwOwogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOwogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7CiAgICAgICAgICAgIGJ5dGVzIG1lbW9yeSByZXMgPSBuZXcgYnl0ZXMob3V0cHV0bGVuKTsKCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgewogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBieXRlKGNib3JsZW4pW2N0cl07CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsKICAgICAgICAgICAgICAgIGN0cisrOwogICAgICAgICAgICAgICAgZm9yICh1aW50IHggPSAwOyB4IDwgZWxlbUFycmF5W2ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdAogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGVsZW1jYm9ybGVuID0gZWxlbUFycmF5W2ldLmxlbmd0aCAtIHggPj0gMjQgPyAyMyA6IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4OwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOwogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChieXRlKGVsZW1jYm9ybGVuKS5sZW5ndGggPiBjdHIgLSBsY3RyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07CiAgICAgICAgICAgICAgICAgICAgY3RyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7CiAgICAgICAgICAgICAgICBjdHIrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAKICAgIHN0cmluZyBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7CiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZShzdHJpbmcgX25ldHdvcmtfbmFtZSkgaW50ZXJuYWwgewogICAgICAgIG9yYWNsaXplX25ldHdvcmtfbmFtZSA9IF9uZXR3b3JrX25hbWU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgcmV0dXJuIG9yYWNsaXplX25ldHdvcmtfbmFtZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfbmV3UmFuZG9tRFNRdWVyeSh1aW50IF9kZWxheSwgdWludCBfbmJ5dGVzLCB1aW50IF9jdXN0b21HYXNMaW1pdCkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMil7CiAgICAgICAgaWYgKChfbmJ5dGVzID09IDApfHwoX25ieXRlcyA+IDMyKSkgdGhyb3c7CiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsKICAgICAgICBuYnl0ZXNbMF0gPSBieXRlKF9uYnl0ZXMpOwogICAgICAgIGJ5dGVzIG1lbW9yeSB1bm9uY2UgPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7CiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uS2V5SGFzaF9ieXRlczMyID0gb3JhY2xpemVfcmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApCiAgICAgICAgICAgIG1zdG9yZShhZGQodW5vbmNlLCAweDIwKSwgeG9yKGJsb2NraGFzaChzdWIobnVtYmVyLCAxKSksIHhvcihjb2luYmFzZSwgdGltZXN0YW1wKSkpCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpCiAgICAgICAgfQogICAgICAgIGJ5dGVzWzNdIG1lbW9yeSBhcmdzID0gW3Vub25jZSwgbmJ5dGVzLCBzZXNzaW9uS2V5SGFzaF07IAogICAgICAgIGJ5dGVzMzIgcXVlcnlJZCA9IG9yYWNsaXplX3F1ZXJ5KF9kZWxheSwgInJhbmRvbSIsIGFyZ3MsIF9jdXN0b21HYXNMaW1pdCk7CiAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChxdWVyeUlkLCBzaGEzKGJ5dGVzOChfZGVsYXkpLCBhcmdzWzFdLCBzaGEyNTYoYXJnc1swXSksIGFyZ3NbMl0pKTsKICAgICAgICByZXR1cm4gcXVlcnlJZDsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzMzIgY29tbWl0bWVudCkgaW50ZXJuYWwgewogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF0gPSBjb21taXRtZW50OwogICAgfQogICAgCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIG9yYWNsaXplX3JhbmRvbURTX2FyZ3M7CiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJvb2wpIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkOwoKICAgIGZ1bmN0aW9uIHZlcmlmeVNpZyhieXRlczMyIHRvc2lnbmgsIGJ5dGVzIGRlcnNpZywgYnl0ZXMgcHVia2V5KSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIGFkZHJlc3Mgc2lnbmVyOwogICAgICAgIAogICAgICAgIGJ5dGVzMzIgc2lncjsKICAgICAgICBieXRlczMyIHNpZ3M7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3JfID0gbmV3IGJ5dGVzKDMyKTsKICAgICAgICB1aW50IG9mZnNldCA9IDQrKHVpbnQoZGVyc2lnWzNdKSAtIDB4MjApOwogICAgICAgIHNpZ3JfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0LCAzMiwgc2lncl8sIDApOwogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdzXyA9IG5ldyBieXRlcygzMik7CiAgICAgICAgb2Zmc2V0ICs9IDMyICsgMjsKICAgICAgICBzaWdzXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCsodWludChkZXJzaWdbb2Zmc2V0LTFdKSAtIDB4MjApLCAzMiwgc2lnc18sIDApOwoKICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIHNpZ3IgOj0gbWxvYWQoYWRkKHNpZ3JfLCAzMikpCiAgICAgICAgICAgIHNpZ3MgOj0gbWxvYWQoYWRkKHNpZ3NfLCAzMikpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIAogICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyNywgc2lnciwgc2lncyk7CiAgICAgICAgaWYgKGFkZHJlc3Moc2hhMyhwdWJrZXkpKSA9PSBzaWduZXIpIHJldHVybiB0cnVlOwogICAgICAgIGVsc2UgewogICAgICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjgsIHNpZ3IsIHNpZ3MpOwogICAgICAgICAgICByZXR1cm4gKGFkZHJlc3Moc2hhMyhwdWJrZXkpKSA9PSBzaWduZXIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fc2Vzc2lvbktleVZhbGlkaXR5KGJ5dGVzIHByb29mLCB1aW50IHNpZzJvZmZzZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBib29sIHNpZ29rOwogICAgICAgIAogICAgICAgIC8vIFN0ZXAgNjogdmVyaWZ5IHRoZSBhdHRlc3RhdGlvbiBzaWduYXR1cmUsIEFQUEtFWTEgbXVzdCBzaWduIHRoZSBzZXNzaW9uS2V5IGZyb20gdGhlIGNvcnJlY3QgbGVkZ2VyIGFwcCAoQ09ERUhBU0gpCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzIgPSBuZXcgYnl0ZXModWludChwcm9vZltzaWcyb2Zmc2V0KzFdKSsyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQsIHNpZzIubGVuZ3RoLCBzaWcyLCAwKTsKICAgICAgICAKICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24yID0gbmV3IGJ5dGVzKDErNjUrMzIpOwogICAgICAgIHRvc2lnbjJbMF0gPSAxOyAvL3JvbGUKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjUsIDY1LCB0b3NpZ24yLCAxKTsKICAgICAgICBieXRlcyBtZW1vcnkgQ09ERUhBU0ggPSBoZXgiZmQ5NGZhNzFiYzBiYTEwZDM5ZDQ2NGQwZDhmNDY1ZWZlZWYwYTI3NjRlMzg4N2ZjYzlkZjQxZGVkMjBmNTA1YyI7CiAgICAgICAgY29weUJ5dGVzKENPREVIQVNILCAwLCAzMiwgdG9zaWduMiwgMSs2NSk7CiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjIpLCBzaWcyLCBhcHBrZXkxX3B1YmtleSk7CiAgICAgICAgCiAgICAgICAgaWYgKHNpZ29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgLy8gU3RlcCA3OiB2ZXJpZnkgdGhlIEFQUEtFWTEgcHJvdmVuYW5jZSAobXVzdCBiZSBzaWduZWQgYnkgTGVkZ2VyKQogICAgICAgIGJ5dGVzIG1lbW9yeSBMRURHRVJLRVkgPSBoZXgiN2ZiOTU2NDY5YzVjOWI4OTg0MGQ1NWI0MzUzN2U2NmE5OGRkNDgxMWVhMGEyNzIyNDI3MmMyZTU2MjI5MTFlODUzN2EyZjhlODZhNDZiYWVjODI4NjRlOThkZDAxZTljY2MyZjhiYzVkZmM5Y2JlNWE5MWEyOTA0OThkZDk2ZTQiOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24zID0gbmV3IGJ5dGVzKDErNjUpOwogICAgICAgIHRvc2lnbjNbMF0gPSAweEZFOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMywgNjUsIHRvc2lnbjMsIDEpOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWczID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbMys2NSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7CiAgICAgICAgCiAgICAgICAgc2lnb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjMpLCBzaWczLCBMRURHRVJLRVkpOwogICAgICAgIAogICAgICAgIHJldHVybiBzaWdvazsKICAgIH0KICAgIAogICAgbW9kaWZpZXIgb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnkoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgewogICAgICAgIC8vIFN0ZXAgMTogdGhlIHByZWZpeCBoYXMgdG8gbWF0Y2ggJ0xQXHgwMScgKExlZGdlciBQcm9vZiB2ZXJzaW9uIDEpCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSB0aHJvdzsKICAgICAgICAKICAgICAgICBib29sIHByb29mVmVyaWZpZWQgPSBvcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeV9fbWFpbihfcHJvb2YsIF9xdWVyeUlkLCBieXRlcyhfcmVzdWx0KSwgb3JhY2xpemVfZ2V0TmV0d29ya05hbWUoKSk7CiAgICAgICAgaWYgKHByb29mVmVyaWZpZWQgPT0gZmFsc2UpIHRocm93OwogICAgICAgIAogICAgICAgIF87CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG1hdGNoQnl0ZXMzMlByZWZpeChieXRlczMyIGNvbnRlbnQsIGJ5dGVzIHByZWZpeCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgYm9vbCBtYXRjaF8gPSB0cnVlOwogICAgICAgIAogICAgICAgIGZvciAodmFyIGk9MDsgaTxwcmVmaXgubGVuZ3RoOyBpKyspewogICAgICAgICAgICBpZiAoY29udGVudFtpXSAhPSBwcmVmaXhbaV0pIG1hdGNoXyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbWF0Y2hfOwogICAgfQoKICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKGJ5dGVzIHByb29mLCBieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzIHJlc3VsdCwgc3RyaW5nIGNvbnRleHRfbmFtZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7CiAgICAgICAgYm9vbCBjaGVja29rOwogICAgICAgIAogICAgICAgIAogICAgICAgIC8vIFN0ZXAgMjogdGhlIHVuaXF1ZSBrZXloYXNoIGhhcyB0byBtYXRjaCB3aXRoIHRoZSBzaGEyNTYgb2YgKGNvbnRleHQgbmFtZSArIHF1ZXJ5SWQpCiAgICAgICAgdWludCBsZWRnZXJQcm9vZkxlbmd0aCA9IDMrNjUrKHVpbnQocHJvb2ZbMys2NSsxXSkrMikrMzI7CiAgICAgICAgYnl0ZXMgbWVtb3J5IGtleWhhc2ggPSBuZXcgYnl0ZXMoMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyLCBrZXloYXNoLCAwKTsKICAgICAgICBjaGVja29rID0gKHNoYTMoa2V5aGFzaCkgPT0gc2hhMyhzaGEyNTYoY29udGV4dF9uYW1lLCBxdWVyeUlkKSkpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzEgPSBuZXcgYnl0ZXModWludChwcm9vZltsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSsxXSkrMik7CiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOwogICAgICAgIAogICAgICAgIAogICAgICAgIC8vIFN0ZXAgMzogd2UgYXNzdW1lIHNpZzEgaXMgdmFsaWQgKGl0IHdpbGwgYmUgdmVyaWZpZWQgZHVyaW5nIHN0ZXAgNSkgYW5kIHdlIHZlcmlmeSBpZiAncmVzdWx0JyBpcyB0aGUgcHJlZml4IG9mIHNoYTI1NihzaWcxKQogICAgICAgIGNoZWNrb2sgPSBtYXRjaEJ5dGVzMzJQcmVmaXgoc2hhMjU2KHNpZzEpLCByZXN1bHQpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgLy8gU3RlcCA0OiBjb21taXRtZW50IG1hdGNoIHZlcmlmaWNhdGlvbiwgc2hhMyhkZWxheSwgbmJ5dGVzLCB1bm9uY2UsIHNlc3Npb25LZXlIYXNoKSA9PSBjb21taXRtZW50IGluIHN0b3JhZ2UuCiAgICAgICAgLy8gVGhpcyBpcyB0byB2ZXJpZnkgdGhhdCB0aGUgY29tcHV0ZWQgYXJncyBtYXRjaCB3aXRoIHRoZSBvbmVzIHNwZWNpZmllZCBpbiB0aGUgcXVlcnkuCiAgICAgICAgYnl0ZXMgbWVtb3J5IGNvbW1pdG1lbnRTbGljZTEgPSBuZXcgYnl0ZXMoOCsxKzMyKTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoKzMyLCA4KzErMzIsIGNvbW1pdG1lbnRTbGljZTEsIDApOwogICAgICAgIAogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uUHVia2V5ID0gbmV3IGJ5dGVzKDY0KTsKICAgICAgICB1aW50IHNpZzJvZmZzZXQgPSBsZWRnZXJQcm9vZkxlbmd0aCszMisoOCsxKzMyKStzaWcxLmxlbmd0aCs2NTsKICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjQsIDY0LCBzZXNzaW9uUHVia2V5LCAwKTsKICAgICAgICAKICAgICAgICBieXRlczMyIHNlc3Npb25QdWJrZXlIYXNoID0gc2hhMjU2KHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID09IHNoYTMoY29tbWl0bWVudFNsaWNlMSwgc2Vzc2lvblB1YmtleUhhc2gpKXsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gKICAgICAgICAgICAgZGVsZXRlIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF07CiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsKICAgICAgICAKICAgICAgICAKICAgICAgICAvLyBTdGVwIDU6IHZhbGlkaXR5IHZlcmlmaWNhdGlvbiBmb3Igc2lnMSAoa2V5aGFzaCBhbmQgYXJncyBzaWduZWQgd2l0aCB0aGUgc2Vzc2lvbktleSkKICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMSA9IG5ldyBieXRlcygzMis4KzErMzIpOwogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyKzgrMSszMiwgdG9zaWduMSwgMCk7CiAgICAgICAgY2hlY2tvayA9IHZlcmlmeVNpZyhzaGEyNTYodG9zaWduMSksIHNpZzEsIHNlc3Npb25QdWJrZXkpOwogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgCiAgICAgICAgLy8gdmVyaWZ5IGlmIHNlc3Npb25QdWJrZXlIYXNoIHdhcyB2ZXJpZmllZCBhbHJlYWR5LCBpZiBub3QuLiBsZXQncyBkbyBpdCEKICAgICAgICBpZiAob3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID09IGZhbHNlKXsKICAgICAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShwcm9vZiwgc2lnMm9mZnNldCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHJldHVybiBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF07CiAgICB9CgogICAgCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQogICAgZnVuY3Rpb24gY29weUJ5dGVzKGJ5dGVzIGZyb20sIHVpbnQgZnJvbU9mZnNldCwgdWludCBsZW5ndGgsIGJ5dGVzIHRvLCB1aW50IHRvT2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChieXRlcykgewogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gbGVuZ3RoICsgdG9PZmZzZXQ7CgogICAgICAgIGlmICh0by5sZW5ndGggPCBtaW5MZW5ndGgpIHsKICAgICAgICAgICAgLy8gQnVmZmVyIHRvbyBzbWFsbAogICAgICAgICAgICB0aHJvdzsgLy8gU2hvdWxkIGJlIGEgYmV0dGVyIHdheT8KICAgICAgICB9CgogICAgICAgIC8vIE5PVEU6IHRoZSBvZmZzZXQgMzIgaXMgYWRkZWQgdG8gc2tpcCB0aGUgYHNpemVgIGZpZWxkIG9mIGJvdGggYnl0ZXMgdmFyaWFibGVzCiAgICAgICAgdWludCBpID0gMzIgKyBmcm9tT2Zmc2V0OwogICAgICAgIHVpbnQgaiA9IDMyICsgdG9PZmZzZXQ7CgogICAgICAgIHdoaWxlIChpIDwgKDMyICsgZnJvbU9mZnNldCArIGxlbmd0aCkpIHsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgbGV0IHRtcCA6PSBtbG9hZChhZGQoZnJvbSwgaSkpCiAgICAgICAgICAgICAgICBtc3RvcmUoYWRkKHRvLCBqKSwgdG1wKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgKz0gMzI7CiAgICAgICAgICAgIGogKz0gMzI7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdG87CiAgICB9CiAgICAKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUKICAgIGZ1bmN0aW9uIHNhZmVyX2VjcmVjb3ZlcihieXRlczMyIGhhc2gsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQKICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzCiAgICAgICAgLy8gd3JpdGVzIGFyZSBtZW1vcnkgZXh0ZW5zaW9ucyksIGJ1dCBkb24ndCB1cGRhdGUgdGhlIG9mZnNldCBzbwogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcgogICAgICAgIC8vIHRoaXMgY29udGV4dC4KCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcwogICAgICAgIGJvb2wgcmV0OwogICAgICAgIGFkZHJlc3MgYWRkcjsKCiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgc2l6ZSA6PSBtbG9hZCgweDQwKQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkKICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgNjQpLCByKQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykKCiAgICAgICAgICAgIC8vIE5PVEU6IHdlIGNhbiByZXVzZSB0aGUgcmVxdWVzdCBtZW1vcnkgYmVjYXVzZSB3ZSBkZWFsIHdpdGgKICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpCiAgICAgICAgICAgIGFkZHIgOj0gbWxvYWQoc2l6ZSkKICAgICAgICB9CiAgCiAgICAgICAgcmV0dXJuIChyZXQsIGFkZHIpOwogICAgfQoKICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlCiAgICBmdW5jdGlvbiBlY3JlY292ZXJ5KGJ5dGVzMzIgaGFzaCwgYnl0ZXMgc2lnKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7CiAgICAgICAgYnl0ZXMzMiByOwogICAgICAgIGJ5dGVzMzIgczsKICAgICAgICB1aW50OCB2OwoKICAgICAgICBpZiAoc2lnLmxlbmd0aCAhPSA2NSkKICAgICAgICAgIHJldHVybiAoZmFsc2UsIDApOwoKICAgICAgICAvLyBUaGUgc2lnbmF0dXJlIGZvcm1hdCBpcyBhIGNvbXBhY3QgZm9ybSBvZjoKICAgICAgICAvLyAgIHtieXRlczMyIHJ9e2J5dGVzMzIgc317dWludDggdn0KICAgICAgICAvLyBDb21wYWN0IG1lYW5zLCB1aW50OCBpcyBub3QgcGFkZGVkIHRvIDMyIGJ5dGVzLgogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgciA6PSBtbG9hZChhZGQoc2lnLCAzMikpCiAgICAgICAgICAgIHMgOj0gbWxvYWQoYWRkKHNpZywgNjQpKQoKICAgICAgICAgICAgLy8gSGVyZSB3ZSBhcmUgbG9hZGluZyB0aGUgbGFzdCAzMiBieXRlcy4gV2UgZXhwbG9pdCB0aGUgZmFjdCB0aGF0CiAgICAgICAgICAgIC8vICdtbG9hZCcgd2lsbCBwYWQgd2l0aCB6ZXJvZXMgaWYgd2Ugb3ZlcnJlYWQuCiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vICdtbG9hZDgnIHRvIGRvIHRoaXMsIGJ1dCB0aGF0IHdvdWxkIGJlIG5pY2VyLgogICAgICAgICAgICB2IDo9IGJ5dGUoMCwgbWxvYWQoYWRkKHNpZywgOTYpKSkKCiAgICAgICAgICAgIC8vIEFsdGVybmF0aXZlIHNvbHV0aW9uOgogICAgICAgICAgICAvLyAnYnl0ZScgaXMgbm90IHdvcmtpbmcgZHVlIHRvIHRoZSBTb2xpZGl0eSBwYXJzZXIsIHNvIGxldHMKICAgICAgICAgICAgLy8gdXNlIHRoZSBzZWNvbmQgYmVzdCBvcHRpb24sICdhbmQnCiAgICAgICAgICAgIC8vIHYgOj0gYW5kKG1sb2FkKGFkZChzaWcsIDY1KSksIDI1NSkKICAgICAgICB9CgogICAgICAgIC8vIGFsYmVpdCBub24tdHJhbnNhY3Rpb25hbCBzaWduYXR1cmVzIGFyZSBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBZUCwgb25lIHdvdWxkIGV4cGVjdCBpdAogICAgICAgIC8vIHRvIG1hdGNoIHRoZSBZUCByYW5nZSBvZiBbMjcsIDI4XQogICAgICAgIC8vCiAgICAgICAgLy8gZ2V0aCB1c2VzIFswLCAxXSBhbmQgc29tZSBjbGllbnRzIGhhdmUgZm9sbG93ZWQuIFRoaXMgbWlnaHQgY2hhbmdlLCBzZWU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1MwogICAgICAgIGlmICh2IDwgMjcpCiAgICAgICAgICB2ICs9IDI3OwoKICAgICAgICBpZiAodiAhPSAyNyAmJiB2ICE9IDI4KQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsKCiAgICAgICAgcmV0dXJuIHNhZmVyX2VjcmVjb3ZlcihoYXNoLCB2LCByLCBzKTsKICAgIH0KICAgICAgICAKfQovLyA8L09SQUNMSVpFX0FQST4KLyoKICogQHRpdGxlIFN0cmluZyAmIHNsaWNlIHV0aWxpdHkgbGlicmFyeSBmb3IgU29saWRpdHkgY29udHJhY3RzLgogKiBAYXV0aG9yIE5pY2sgSm9obnNvbiA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjJiNGE1OTRhNDg0MzQ1NDI0ZjZiNDU0NDVmNGY0NDVmMDU0NTRlNWYiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PgogKgogKiBAZGV2IEZ1bmN0aW9uYWxpdHkgaW4gdGhpcyBsaWJyYXJ5IGlzIGxhcmdlbHkgaW1wbGVtZW50ZWQgdXNpbmcgYW4KICogICAgICBhYnN0cmFjdGlvbiBjYWxsZWQgYSAnc2xpY2UnLiBBIHNsaWNlIHJlcHJlc2VudHMgYSBwYXJ0IG9mIGEgc3RyaW5nIC0KICogICAgICBhbnl0aGluZyBmcm9tIHRoZSBlbnRpcmUgc3RyaW5nIHRvIGEgc2luZ2xlIGNoYXJhY3Rlciwgb3IgZXZlbiBubwogKiAgICAgIGNoYXJhY3RlcnMgYXQgYWxsIChhIDAtbGVuZ3RoIHNsaWNlKS4gU2luY2UgYSBzbGljZSBvbmx5IGhhcyB0byBzcGVjaWZ5CiAqICAgICAgYW4gb2Zmc2V0IGFuZCBhIGxlbmd0aCwgY29weWluZyBhbmQgbWFuaXB1bGF0aW5nIHNsaWNlcyBpcyBhIGxvdCBsZXNzCiAqICAgICAgZXhwZW5zaXZlIHRoYW4gY29weWluZyBhbmQgbWFuaXB1bGF0aW5nIHRoZSBzdHJpbmdzIHRoZXkgcmVmZXJlbmNlLgogKgogKiAgICAgIFRvIGZ1cnRoZXIgcmVkdWNlIGdhcyBjb3N0cywgbW9zdCBmdW5jdGlvbnMgb24gc2xpY2UgdGhhdCBuZWVkIHRvIHJldHVybgogKiAgICAgIGEgc2xpY2UgbW9kaWZ5IHRoZSBvcmlnaW5hbCBvbmUgaW5zdGVhZCBvZiBhbGxvY2F0aW5nIGEgbmV3IG9uZTsgZm9yCiAqICAgICAgaW5zdGFuY2UsIGBzLnNwbGl0KCIuIilgIHdpbGwgcmV0dXJuIHRoZSB0ZXh0IHVwIHRvIHRoZSBmaXJzdCAnLicsCiAqICAgICAgbW9kaWZ5aW5nIHMgdG8gb25seSBjb250YWluIHRoZSByZW1haW5kZXIgb2YgdGhlIHN0cmluZyBhZnRlciB0aGUgJy4nLgogKiAgICAgIEluIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvIG5vdCB3YW50IHRvIG1vZGlmeSB0aGUgb3JpZ2luYWwgc2xpY2UsIHlvdQogKiAgICAgIGNhbiBtYWtlIGEgY29weSBmaXJzdCB3aXRoIGAuY29weSgpYCwgZm9yIGV4YW1wbGU6CiAqICAgICAgYHMuY29weSgpLnNwbGl0KCIuIilgLiBUcnkgYW5kIGF2b2lkIHVzaW5nIHRoaXMgaWRpb20gaW4gbG9vcHM7IHNpbmNlCiAqICAgICAgU29saWRpdHkgaGFzIG5vIG1lbW9yeSBtYW5hZ2VtZW50LCBpdCB3aWxsIHJlc3VsdCBpbiBhbGxvY2F0aW5nIG1hbnkKICogICAgICBzaG9ydC1saXZlZCBzbGljZXMgdGhhdCBhcmUgbGF0ZXIgZGlzY2FyZGVkLgogKgogKiAgICAgIEZ1bmN0aW9ucyB0aGF0IHJldHVybiB0d28gc2xpY2VzIGNvbWUgaW4gdHdvIHZlcnNpb25zOiBhIG5vbi1hbGxvY2F0aW5nCiAqICAgICAgdmVyc2lvbiB0aGF0IHRha2VzIHRoZSBzZWNvbmQgc2xpY2UgYXMgYW4gYXJndW1lbnQsIG1vZGlmeWluZyBpdCBpbgogKiAgICAgIHBsYWNlLCBhbmQgYW4gYWxsb2NhdGluZyB2ZXJzaW9uIHRoYXQgYWxsb2NhdGVzIGFuZCByZXR1cm5zIHRoZSBzZWNvbmQKICogICAgICBzbGljZTsgc2VlIGBuZXh0UnVuZWAgZm9yIGV4YW1wbGUuCiAqCiAqICAgICAgRnVuY3Rpb25zIHRoYXQgaGF2ZSB0byBjb3B5IHN0cmluZyBkYXRhIHdpbGwgcmV0dXJuIHN0cmluZ3MgcmF0aGVyIHRoYW4KICogICAgICBzbGljZXM7IHRoZXNlIGNhbiBiZSBjYXN0IGJhY2sgdG8gc2xpY2VzIGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcgaWYKICogICAgICByZXF1aXJlZC4KICoKICogICAgICBGb3IgY29udmVuaWVuY2UsIHNvbWUgZnVuY3Rpb25zIGFyZSBwcm92aWRlZCB3aXRoIG5vbi1tb2RpZnlpbmcKICogICAgICB2YXJpYW50cyB0aGF0IGNyZWF0ZSBhIG5ldyBzbGljZSBhbmQgcmV0dXJuIGJvdGg7IGZvciBpbnN0YW5jZSwKICogICAgICBgcy5zcGxpdE5ldygnLicpYCBsZWF2ZXMgcyB1bm1vZGlmaWVkLCBhbmQgcmV0dXJucyB0d28gdmFsdWVzCiAqICAgICAgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCBhbmQgcmlnaHQgcGFydHMgb2YgdGhlIHN0cmluZy4KICovCmxpYnJhcnkgc3RyaW5ncyB7CiAgICBzdHJ1Y3Qgc2xpY2UgewogICAgICAgIHVpbnQgX2xlbjsKICAgICAgICB1aW50IF9wdHI7CiAgICB9CgogICAgZnVuY3Rpb24gbWVtY3B5KHVpbnQgZGVzdCwgdWludCBzcmMsIHVpbnQgbGVuKSBwcml2YXRlIHsKICAgICAgICAvLyBDb3B5IHdvcmQtbGVuZ3RoIGNodW5rcyB3aGlsZSBwb3NzaWJsZQogICAgICAgIGZvcig7IGxlbiA+PSAzMjsgbGVuIC09IDMyKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIG1zdG9yZShkZXN0LCBtbG9hZChzcmMpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlc3QgKz0gMzI7CiAgICAgICAgICAgIHNyYyArPSAzMjsKICAgICAgICB9CgogICAgICAgIC8vIENvcHkgcmVtYWluaW5nIGJ5dGVzCiAgICAgICAgdWludCBtYXNrID0gMjU2ICoqICgzMiAtIGxlbikgLSAxOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IHNyY3BhcnQgOj0gYW5kKG1sb2FkKHNyYyksIG5vdChtYXNrKSkKICAgICAgICAgICAgbGV0IGRlc3RwYXJ0IDo9IGFuZChtbG9hZChkZXN0KSwgbWFzaykKICAgICAgICAgICAgbXN0b3JlKGRlc3QsIG9yKGRlc3RwYXJ0LCBzcmNwYXJ0KSkKICAgICAgICB9CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIHNsaWNlIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc3RyaW5nIHRvIG1ha2UgYSBzbGljZSBmcm9tLgogICAgICogQHJldHVybiBBIG5ld2x5IGFsbG9jYXRlZCBzbGljZSBjb250YWluaW5nIHRoZSBlbnRpcmUgc3RyaW5nLgogICAgICovCiAgICBmdW5jdGlvbiB0b1NsaWNlKHN0cmluZyBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgcHRyIDo9IGFkZChzZWxmLCAweDIwKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2xpY2UoYnl0ZXMoc2VsZikubGVuZ3RoLCBwdHIpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGxlbmd0aCBvZiBhIG51bGwtdGVybWluYXRlZCBieXRlczMyIHN0cmluZy4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSB2YWx1ZSB0byBmaW5kIHRoZSBsZW5ndGggb2YuCiAgICAgKiBAcmV0dXJuIFRoZSBsZW5ndGggb2YgdGhlIHN0cmluZywgZnJvbSAwIHRvIDMyLgogICAgICovCiAgICBmdW5jdGlvbiBsZW4oYnl0ZXMzMiBzZWxmKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdWludCByZXQ7CiAgICAgICAgaWYgKHNlbGYgPT0gMCkKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgaWYgKHNlbGYgJiAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmID09IDApIHsKICAgICAgICAgICAgcmV0ICs9IDE2OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmZmZmZmZmZmZmZmZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSA4OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmICYgMHhmZmZmZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSA0OwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMDAwMDApOwogICAgICAgIH0KICAgICAgICBpZiAoc2VsZiAmIDB4ZmZmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSAyOwogICAgICAgICAgICBzZWxmID0gYnl0ZXMzMih1aW50KHNlbGYpIC8gMHgxMDAwMCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZWxmICYgMHhmZiA9PSAwKSB7CiAgICAgICAgICAgIHJldCArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMzIgLSByZXQ7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIHNsaWNlIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBieXRlczMyLCBpbnRlcnByZXRlZCBhcyBhCiAgICAgKiAgICAgIG51bGwtdGVybWludGFlZCB1dGYtOCBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgYnl0ZXMzMiB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgc2xpY2UuCiAgICAgKiBAcmV0dXJuIEEgbmV3IHNsaWNlIGNvbnRhaW5pbmcgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBhcmd1bWVudCB1cCB0byB0aGUKICAgICAqICAgICAgICAgZmlyc3QgbnVsbC4KICAgICAqLwogICAgZnVuY3Rpb24gdG9TbGljZUIzMihieXRlczMyIHNlbGYpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHJldCkgewogICAgICAgIC8vIEFsbG9jYXRlIHNwYWNlIGZvciBgc2VsZmAgaW4gbWVtb3J5LCBjb3B5IGl0IHRoZXJlLCBhbmQgcG9pbnQgcmV0IGF0IGl0CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBsZXQgcHRyIDo9IG1sb2FkKDB4NDApCiAgICAgICAgICAgIG1zdG9yZSgweDQwLCBhZGQocHRyLCAweDIwKSkKICAgICAgICAgICAgbXN0b3JlKHB0ciwgc2VsZikKICAgICAgICAgICAgbXN0b3JlKGFkZChyZXQsIDB4MjApLCBwdHIpCiAgICAgICAgfQogICAgICAgIHJldC5fbGVuID0gbGVuKHNlbGYpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgYSBuZXcgc2xpY2UgY29udGFpbmluZyB0aGUgc2FtZSBkYXRhIGFzIHRoZSBjdXJyZW50IHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIGNvcHkuCiAgICAgKiBAcmV0dXJuIEEgbmV3IHNsaWNlIGNvbnRhaW5pbmcgdGhlIHNhbWUgZGF0YSBhcyBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvcHkoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICByZXR1cm4gc2xpY2Uoc2VsZi5fbGVuLCBzZWxmLl9wdHIpOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IENvcGllcyBhIHNsaWNlIHRvIGEgbmV3IHN0cmluZy4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBjb3B5LgogICAgICogQHJldHVybiBBIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgc2xpY2UncyB0ZXh0LgogICAgICovCiAgICBmdW5jdGlvbiB0b1N0cmluZyhzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICB2YXIgcmV0ID0gbmV3IHN0cmluZyhzZWxmLl9sZW4pOwogICAgICAgIHVpbnQgcmV0cHRyOwogICAgICAgIGFzc2VtYmx5IHsgcmV0cHRyIDo9IGFkZChyZXQsIDMyKSB9CgogICAgICAgIG1lbWNweShyZXRwdHIsIHNlbGYuX3B0ciwgc2VsZi5fbGVuKTsKICAgICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGxlbmd0aCBpbiBydW5lcyBvZiB0aGUgc2xpY2UuIE5vdGUgdGhhdCB0aGlzIG9wZXJhdGlvbgogICAgICogICAgICB0YWtlcyB0aW1lIHByb3BvcnRpb25hbCB0byB0aGUgbGVuZ3RoIG9mIHRoZSBzbGljZTsgYXZvaWQgdXNpbmcgaXQKICAgICAqICAgICAgaW4gbG9vcHMsIGFuZCBjYWxsIGBzbGljZS5lbXB0eSgpYCBpZiB5b3Ugb25seSBuZWVkIHRvIGtub3cgd2hldGhlcgogICAgICogICAgICB0aGUgc2xpY2UgaXMgZW1wdHkgb3Igbm90LgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIFRoZSBsZW5ndGggb2YgdGhlIHNsaWNlIGluIHJ1bmVzLgogICAgICovCiAgICBmdW5jdGlvbiBsZW4oc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIC8vIFN0YXJ0aW5nIGF0IHB0ci0zMSBtZWFucyB0aGUgTFNCIHdpbGwgYmUgdGhlIGJ5dGUgd2UgY2FyZSBhYm91dAogICAgICAgIHZhciBwdHIgPSBzZWxmLl9wdHIgLSAzMTsKICAgICAgICB2YXIgZW5kID0gcHRyICsgc2VsZi5fbGVuOwogICAgICAgIGZvciAodWludCBsZW4gPSAwOyBwdHIgPCBlbmQ7IGxlbisrKSB7CiAgICAgICAgICAgIHVpbnQ4IGI7CiAgICAgICAgICAgIGFzc2VtYmx5IHsgYiA6PSBhbmQobWxvYWQocHRyKSwgMHhGRikgfQogICAgICAgICAgICBpZiAoYiA8IDB4ODApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAxOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RTApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAyOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjApIHsKICAgICAgICAgICAgICAgIHB0ciArPSAzOwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjgpIHsKICAgICAgICAgICAgICAgIHB0ciArPSA0OwogICAgICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RkMpIHsKICAgICAgICAgICAgICAgIHB0ciArPSA1OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcHRyICs9IDY7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlbjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIHNsaWNlIGlzIGVtcHR5IChoYXMgYSBsZW5ndGggb2YgMCkuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgc2xpY2UgaXMgZW1wdHksIEZhbHNlIG90aGVyd2lzZS4KICAgICAqLwogICAgZnVuY3Rpb24gZW1wdHkoc2xpY2Ugc2VsZikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBzZWxmLl9sZW4gPT0gMDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIGEgcG9zaXRpdmUgbnVtYmVyIGlmIGBvdGhlcmAgY29tZXMgbGV4aWNvZ3JhcGhpY2FsbHkgYWZ0ZXIKICAgICAqICAgICAgYHNlbGZgLCBhIG5lZ2F0aXZlIG51bWJlciBpZiBpdCBjb21lcyBiZWZvcmUsIG9yIHplcm8gaWYgdGhlCiAgICAgKiAgICAgIGNvbnRlbnRzIG9mIHRoZSB0d28gc2xpY2VzIGFyZSBlcXVhbC4gQ29tcGFyaXNvbiBpcyBkb25lIHBlci1ydW5lLAogICAgICogICAgICBvbiB1bmljb2RlIGNvZGVwb2ludHMuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSBvdGhlciBUaGUgc2Vjb25kIHNsaWNlIHRvIGNvbXBhcmUuCiAgICAgKiBAcmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb24uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBhcmUoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKGludCkgewogICAgICAgIHVpbnQgc2hvcnRlc3QgPSBzZWxmLl9sZW47CiAgICAgICAgaWYgKG90aGVyLl9sZW4gPCBzZWxmLl9sZW4pCiAgICAgICAgICAgIHNob3J0ZXN0ID0gb3RoZXIuX2xlbjsKCiAgICAgICAgdmFyIHNlbGZwdHIgPSBzZWxmLl9wdHI7CiAgICAgICAgdmFyIG90aGVycHRyID0gb3RoZXIuX3B0cjsKICAgICAgICBmb3IgKHVpbnQgaWR4ID0gMDsgaWR4IDwgc2hvcnRlc3Q7IGlkeCArPSAzMikgewogICAgICAgICAgICB1aW50IGE7CiAgICAgICAgICAgIHVpbnQgYjsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgYSA6PSBtbG9hZChzZWxmcHRyKQogICAgICAgICAgICAgICAgYiA6PSBtbG9hZChvdGhlcnB0cikKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYSAhPSBiKSB7CiAgICAgICAgICAgICAgICAvLyBNYXNrIG91dCBpcnJlbGV2YW50IGJ5dGVzIGFuZCBjaGVjayBhZ2FpbgogICAgICAgICAgICAgICAgdWludCBtYXNrID0gfigyICoqICg4ICogKDMyIC0gc2hvcnRlc3QgKyBpZHgpKSAtIDEpOwogICAgICAgICAgICAgICAgdmFyIGRpZmYgPSAoYSAmIG1hc2spIC0gKGIgJiBtYXNrKTsKICAgICAgICAgICAgICAgIGlmIChkaWZmICE9IDApCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChkaWZmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZWxmcHRyICs9IDMyOwogICAgICAgICAgICBvdGhlcnB0ciArPSAzMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGludChzZWxmLl9sZW4pIC0gaW50KG90aGVyLl9sZW4pOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIHNsaWNlcyBjb250YWluIHRoZSBzYW1lIHRleHQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzZWNvbmQgc2xpY2UgdG8gY29tcGFyZS4KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgc2xpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBlcXVhbHMoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gY29tcGFyZShzZWxmLCBvdGhlcikgPT0gMDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBFeHRyYWN0cyB0aGUgZmlyc3QgcnVuZSBpbiB0aGUgc2xpY2UgaW50byBgcnVuZWAsIGFkdmFuY2luZyB0aGUKICAgICAqICAgICAgc2xpY2UgdG8gcG9pbnQgdG8gdGhlIG5leHQgcnVuZSBhbmQgcmV0dXJuaW5nIGBzZWxmYC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBvcGVyYXRlIG9uLgogICAgICogQHBhcmFtIHJ1bmUgVGhlIHNsaWNlIHRoYXQgd2lsbCBjb250YWluIHRoZSBmaXJzdCBydW5lLgogICAgICogQHJldHVybiBgcnVuZWAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5leHRSdW5lKHNsaWNlIHNlbGYsIHNsaWNlIHJ1bmUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgcnVuZS5fcHRyID0gc2VsZi5fcHRyOwoKICAgICAgICBpZiAoc2VsZi5fbGVuID09IDApIHsKICAgICAgICAgICAgcnVuZS5fbGVuID0gMDsKICAgICAgICAgICAgcmV0dXJuIHJ1bmU7CiAgICAgICAgfQoKICAgICAgICB1aW50IGxlbjsKICAgICAgICB1aW50IGI7CiAgICAgICAgLy8gTG9hZCB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgcnVuZSBpbnRvIHRoZSBMU0JzIG9mIGIKICAgICAgICBhc3NlbWJseSB7IGIgOj0gYW5kKG1sb2FkKHN1YihtbG9hZChhZGQoc2VsZiwgMzIpKSwgMzEpKSwgMHhGRikgfQogICAgICAgIGlmIChiIDwgMHg4MCkgewogICAgICAgICAgICBsZW4gPSAxOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhFMCkgewogICAgICAgICAgICBsZW4gPSAyOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhGMCkgewogICAgICAgICAgICBsZW4gPSAzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxlbiA9IDQ7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBmb3IgdHJ1bmNhdGVkIGNvZGVwb2ludHMKICAgICAgICBpZiAobGVuID4gc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIHJ1bmUuX2xlbiA9IHNlbGYuX2xlbjsKICAgICAgICAgICAgc2VsZi5fcHRyICs9IHNlbGYuX2xlbjsKICAgICAgICAgICAgc2VsZi5fbGVuID0gMDsKICAgICAgICAgICAgcmV0dXJuIHJ1bmU7CiAgICAgICAgfQoKICAgICAgICBzZWxmLl9wdHIgKz0gbGVuOwogICAgICAgIHNlbGYuX2xlbiAtPSBsZW47CiAgICAgICAgcnVuZS5fbGVuID0gbGVuOwogICAgICAgIHJldHVybiBydW5lOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdGhlIGZpcnN0IHJ1bmUgaW4gdGhlIHNsaWNlLCBhZHZhbmNpbmcgdGhlIHNsaWNlIHRvIHBvaW50CiAgICAgKiAgICAgIHRvIHRoZSBuZXh0IHJ1bmUuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEByZXR1cm4gQSBzbGljZSBjb250YWluaW5nIG9ubHkgdGhlIGZpcnN0IHJ1bmUgZnJvbSBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG5leHRSdW5lKHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHJldCkgewogICAgICAgIG5leHRSdW5lKHNlbGYsIHJldCk7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRoZSBmaXJzdCBjb2RlcG9pbnQgaW4gdGhlIHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcmV0dXJuIFRoZSBudW1iZXIgb2YgdGhlIGZpcnN0IGNvZGVwb2ludCBpbiB0aGUgc2xpY2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIG9yZChzbGljZSBzZWxmKSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHJldCkgewogICAgICAgIGlmIChzZWxmLl9sZW4gPT0gMCkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgICAgIHVpbnQgd29yZDsKICAgICAgICB1aW50IGxlbjsKICAgICAgICB1aW50IGRpdiA9IDIgKiogMjQ4OwoKICAgICAgICAvLyBMb2FkIHRoZSBydW5lIGludG8gdGhlIE1TQnMgb2YgYgogICAgICAgIGFzc2VtYmx5IHsgd29yZDo9IG1sb2FkKG1sb2FkKGFkZChzZWxmLCAzMikpKSB9CiAgICAgICAgdmFyIGIgPSB3b3JkIC8gZGl2OwogICAgICAgIGlmIChiIDwgMHg4MCkgewogICAgICAgICAgICByZXQgPSBiOwogICAgICAgICAgICBsZW4gPSAxOwogICAgICAgIH0gZWxzZSBpZihiIDwgMHhFMCkgewogICAgICAgICAgICByZXQgPSBiICYgMHgxRjsKICAgICAgICAgICAgbGVuID0gMjsKICAgICAgICB9IGVsc2UgaWYoYiA8IDB4RjApIHsKICAgICAgICAgICAgcmV0ID0gYiAmIDB4MEY7CiAgICAgICAgICAgIGxlbiA9IDM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0ID0gYiAmIDB4MDc7CiAgICAgICAgICAgIGxlbiA9IDQ7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBmb3IgdHJ1bmNhdGVkIGNvZGVwb2ludHMKICAgICAgICBpZiAobGVuID4gc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KCiAgICAgICAgZm9yICh1aW50IGkgPSAxOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgZGl2ID0gZGl2IC8gMjU2OwogICAgICAgICAgICBiID0gKHdvcmQgLyBkaXYpICYgMHhGRjsKICAgICAgICAgICAgaWYgKGIgJiAweEMwICE9IDB4ODApIHsKICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVVRGLTggc2VxdWVuY2UKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldCA9IChyZXQgKiA2NCkgfCAoYiAmIDB4M0YpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJldDsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIHRoZSBrZWNjYWstMjU2IGhhc2ggb2YgdGhlIHNsaWNlLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIGhhc2guCiAgICAgKiBAcmV0dXJuIFRoZSBoYXNoIG9mIHRoZSBzbGljZS4KICAgICAqLwogICAgZnVuY3Rpb24ga2VjY2FrKHNsaWNlIHNlbGYpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgcmV0KSB7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICByZXQgOj0gc2hhMyhtbG9hZChhZGQoc2VsZiwgMzIpKSwgbWxvYWQoc2VsZikpCiAgICAgICAgfQogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiBgc2VsZmAgc3RhcnRzIHdpdGggYG5lZWRsZWAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gb3BlcmF0ZSBvbi4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHNsaWNlIHRvIHNlYXJjaCBmb3IuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIHNsaWNlIHN0YXJ0cyB3aXRoIHRoZSBwcm92aWRlZCB0ZXh0LCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CiAgICAgICAgaWYgKHNlbGYuX2xlbiA8IG5lZWRsZS5fbGVuKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmIChzZWxmLl9wdHIgPT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgIGxldCBzZWxmcHRyIDo9IG1sb2FkKGFkZChzZWxmLCAweDIwKSkKICAgICAgICAgICAgbGV0IG5lZWRsZXB0ciA6PSBtbG9hZChhZGQobmVlZGxlLCAweDIwKSkKICAgICAgICAgICAgZXF1YWwgOj0gZXEoc2hhMyhzZWxmcHRyLCBsZW4pLCBzaGEzKG5lZWRsZXB0ciwgbGVuKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVxdWFsOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IElmIGBzZWxmYCBzdGFydHMgd2l0aCBgbmVlZGxlYCwgYG5lZWRsZWAgaXMgcmVtb3ZlZCBmcm9tIHRoZQogICAgICogICAgICBiZWdpbm5pbmcgb2YgYHNlbGZgLiBPdGhlcndpc2UsIGBzZWxmYCBpcyB1bm1vZGlmaWVkLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBgc2VsZmAKICAgICAqLwogICAgZnVuY3Rpb24gYmV5b25kKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuIDwgbmVlZGxlLl9sZW4pIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsID0gdHJ1ZTsKICAgICAgICBpZiAoc2VsZi5fcHRyICE9IG5lZWRsZS5fcHRyKSB7CiAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgIGxldCBsZW4gOj0gbWxvYWQobmVlZGxlKQogICAgICAgICAgICAgICAgbGV0IHNlbGZwdHIgOj0gbWxvYWQoYWRkKHNlbGYsIDB4MjApKQogICAgICAgICAgICAgICAgbGV0IG5lZWRsZXB0ciA6PSBtbG9hZChhZGQobmVlZGxlLCAweDIwKSkKICAgICAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChlcXVhbCkgewogICAgICAgICAgICBzZWxmLl9sZW4gLT0gbmVlZGxlLl9sZW47CiAgICAgICAgICAgIHNlbGYuX3B0ciArPSBuZWVkbGUuX2xlbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFJldHVybnMgdHJ1ZSBpZiB0aGUgc2xpY2UgZW5kcyB3aXRoIGBuZWVkbGVgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBzbGljZSBzdGFydHMgd2l0aCB0aGUgcHJvdmlkZWQgdGV4dCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAgICovCiAgICBmdW5jdGlvbiBlbmRzV2l0aChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBpZiAoc2VsZi5fbGVuIDwgbmVlZGxlLl9sZW4pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHNlbGZwdHIgPSBzZWxmLl9wdHIgKyBzZWxmLl9sZW4gLSBuZWVkbGUuX2xlbjsKCiAgICAgICAgaWYgKHNlbGZwdHIgPT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBib29sIGVxdWFsOwogICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgIGxldCBuZWVkbGVwdHIgOj0gbWxvYWQoYWRkKG5lZWRsZSwgMHgyMCkpCiAgICAgICAgICAgIGVxdWFsIDo9IGVxKHNoYTMoc2VsZnB0ciwgbGVuKSwgc2hhMyhuZWVkbGVwdHIsIGxlbikpCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZXF1YWw7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgSWYgYHNlbGZgIGVuZHMgd2l0aCBgbmVlZGxlYCwgYG5lZWRsZWAgaXMgcmVtb3ZlZCBmcm9tIHRoZQogICAgICogICAgICBlbmQgb2YgYHNlbGZgLiBPdGhlcndpc2UsIGBzZWxmYCBpcyB1bm1vZGlmaWVkLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIG9wZXJhdGUgb24uCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSBzbGljZSB0byBzZWFyY2ggZm9yLgogICAgICogQHJldHVybiBgc2VsZmAKICAgICAqLwogICAgZnVuY3Rpb24gdW50aWwoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIGlmIChzZWxmLl9sZW4gPCBuZWVkbGUuX2xlbikgewogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICB9CgogICAgICAgIHZhciBzZWxmcHRyID0gc2VsZi5fcHRyICsgc2VsZi5fbGVuIC0gbmVlZGxlLl9sZW47CiAgICAgICAgYm9vbCBlcXVhbCA9IHRydWU7CiAgICAgICAgaWYgKHNlbGZwdHIgIT0gbmVlZGxlLl9wdHIpIHsKICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgbGV0IGxlbiA6PSBtbG9hZChuZWVkbGUpCiAgICAgICAgICAgICAgICBsZXQgbmVlZGxlcHRyIDo9IG1sb2FkKGFkZChuZWVkbGUsIDB4MjApKQogICAgICAgICAgICAgICAgZXF1YWwgOj0gZXEoc2hhMyhzZWxmcHRyLCBsZW4pLCBzaGEzKG5lZWRsZXB0ciwgbGVuKSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGVxdWFsKSB7CiAgICAgICAgICAgIHNlbGYuX2xlbiAtPSBuZWVkbGUuX2xlbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWxmOwogICAgfQoKICAgIC8vIFJldHVybnMgdGhlIG1lbW9yeSBhZGRyZXNzIG9mIHRoZSBmaXJzdCBieXRlIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mCiAgICAvLyBgbmVlZGxlYCBpbiBgc2VsZmAsIG9yIHRoZSBmaXJzdCBieXRlIGFmdGVyIGBzZWxmYCBpZiBub3QgZm91bmQuCiAgICBmdW5jdGlvbiBmaW5kUHRyKHVpbnQgc2VsZmxlbiwgdWludCBzZWxmcHRyLCB1aW50IG5lZWRsZWxlbiwgdWludCBuZWVkbGVwdHIpIHByaXZhdGUgcmV0dXJucyAodWludCkgewogICAgICAgIHVpbnQgcHRyOwogICAgICAgIHVpbnQgaWR4OwoKICAgICAgICBpZiAobmVlZGxlbGVuIDw9IHNlbGZsZW4pIHsKICAgICAgICAgICAgaWYgKG5lZWRsZWxlbiA8PSAzMikgewogICAgICAgICAgICAgICAgLy8gT3B0aW1pemVkIGFzc2VtYmx5IGZvciA2OCBnYXMgcGVyIGJ5dGUgb24gc2hvcnQgc3RyaW5ncwogICAgICAgICAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICAgICAgICAgIGxldCBtYXNrIDo9IG5vdChzdWIoZXhwKDIsIG11bCg4LCBzdWIoMzIsIG5lZWRsZWxlbikpKSwgMSkpCiAgICAgICAgICAgICAgICAgICAgbGV0IG5lZWRsZWRhdGEgOj0gYW5kKG1sb2FkKG5lZWRsZXB0ciksIG1hc2spCiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZCA6PSBhZGQoc2VsZnB0ciwgc3ViKHNlbGZsZW4sIG5lZWRsZWxlbikpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IHNlbGZwdHIKICAgICAgICAgICAgICAgICAgICBsb29wOgogICAgICAgICAgICAgICAgICAgIGp1bXBpKGV4aXQsIGVxKGFuZChtbG9hZChwdHIpLCBtYXNrKSwgbmVlZGxlZGF0YSkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IGFkZChwdHIsIDEpCiAgICAgICAgICAgICAgICAgICAganVtcGkobG9vcCwgbHQoc3ViKHB0ciwgMSksIGVuZCkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IGFkZChzZWxmcHRyLCBzZWxmbGVuKQogICAgICAgICAgICAgICAgICAgIGV4aXQ6CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRm9yIGxvbmcgbmVlZGxlcywgdXNlIGhhc2hpbmcKICAgICAgICAgICAgICAgIGJ5dGVzMzIgaGFzaDsKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgaGFzaCA6PSBzaGEzKG5lZWRsZXB0ciwgbmVlZGxlbGVuKSB9CiAgICAgICAgICAgICAgICBwdHIgPSBzZWxmcHRyOwogICAgICAgICAgICAgICAgZm9yIChpZHggPSAwOyBpZHggPD0gc2VsZmxlbiAtIG5lZWRsZWxlbjsgaWR4KyspIHsKICAgICAgICAgICAgICAgICAgICBieXRlczMyIHRlc3RIYXNoOwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgdGVzdEhhc2ggOj0gc2hhMyhwdHIsIG5lZWRsZWxlbikgfQogICAgICAgICAgICAgICAgICAgIGlmIChoYXNoID09IHRlc3RIYXNoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICAgICAgICAgIHB0ciArPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmcHRyICsgc2VsZmxlbjsKICAgIH0KCiAgICAvLyBSZXR1cm5zIHRoZSBtZW1vcnkgYWRkcmVzcyBvZiB0aGUgZmlyc3QgYnl0ZSBhZnRlciB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mCiAgICAvLyBgbmVlZGxlYCBpbiBgc2VsZmAsIG9yIHRoZSBhZGRyZXNzIG9mIGBzZWxmYCBpZiBub3QgZm91bmQuCiAgICBmdW5jdGlvbiByZmluZFB0cih1aW50IHNlbGZsZW4sIHVpbnQgc2VsZnB0ciwgdWludCBuZWVkbGVsZW4sIHVpbnQgbmVlZGxlcHRyKSBwcml2YXRlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICB1aW50IHB0cjsKCiAgICAgICAgaWYgKG5lZWRsZWxlbiA8PSBzZWxmbGVuKSB7CiAgICAgICAgICAgIGlmIChuZWVkbGVsZW4gPD0gMzIpIHsKICAgICAgICAgICAgICAgIC8vIE9wdGltaXplZCBhc3NlbWJseSBmb3IgNjkgZ2FzIHBlciBieXRlIG9uIHNob3J0IHN0cmluZ3MKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsKICAgICAgICAgICAgICAgICAgICBsZXQgbWFzayA6PSBub3Qoc3ViKGV4cCgyLCBtdWwoOCwgc3ViKDMyLCBuZWVkbGVsZW4pKSksIDEpKQogICAgICAgICAgICAgICAgICAgIGxldCBuZWVkbGVkYXRhIDo9IGFuZChtbG9hZChuZWVkbGVwdHIpLCBtYXNrKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBhZGQoc2VsZnB0ciwgc3ViKHNlbGZsZW4sIG5lZWRsZWxlbikpCiAgICAgICAgICAgICAgICAgICAgbG9vcDoKICAgICAgICAgICAgICAgICAgICBqdW1waShyZXQsIGVxKGFuZChtbG9hZChwdHIpLCBtYXNrKSwgbmVlZGxlZGF0YSkpCiAgICAgICAgICAgICAgICAgICAgcHRyIDo9IHN1YihwdHIsIDEpCiAgICAgICAgICAgICAgICAgICAganVtcGkobG9vcCwgZ3QoYWRkKHB0ciwgMSksIHNlbGZwdHIpKQogICAgICAgICAgICAgICAgICAgIHB0ciA6PSBzZWxmcHRyCiAgICAgICAgICAgICAgICAgICAganVtcChleGl0KQogICAgICAgICAgICAgICAgICAgIHJldDoKICAgICAgICAgICAgICAgICAgICBwdHIgOj0gYWRkKHB0ciwgbmVlZGxlbGVuKQogICAgICAgICAgICAgICAgICAgIGV4aXQ6CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRm9yIGxvbmcgbmVlZGxlcywgdXNlIGhhc2hpbmcKICAgICAgICAgICAgICAgIGJ5dGVzMzIgaGFzaDsKICAgICAgICAgICAgICAgIGFzc2VtYmx5IHsgaGFzaCA6PSBzaGEzKG5lZWRsZXB0ciwgbmVlZGxlbGVuKSB9CiAgICAgICAgICAgICAgICBwdHIgPSBzZWxmcHRyICsgKHNlbGZsZW4gLSBuZWVkbGVsZW4pOwogICAgICAgICAgICAgICAgd2hpbGUgKHB0ciA+PSBzZWxmcHRyKSB7CiAgICAgICAgICAgICAgICAgICAgYnl0ZXMzMiB0ZXN0SGFzaDsKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSB7IHRlc3RIYXNoIDo9IHNoYTMocHRyLCBuZWVkbGVsZW4pIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGFzaCA9PSB0ZXN0SGFzaCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB0ciArIG5lZWRsZWxlbjsKICAgICAgICAgICAgICAgICAgICBwdHIgLT0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZnB0cjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBNb2RpZmllcyBgc2VsZmAgdG8gY29udGFpbiBldmVyeXRoaW5nIGZyb20gdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YKICAgICAqICAgICAgYG5lZWRsZWAgdG8gdGhlIGVuZCBvZiB0aGUgc2xpY2UuIGBzZWxmYCBpcyBzZXQgdG8gdGhlIGVtcHR5IHNsaWNlCiAgICAgKiAgICAgIGlmIGBuZWVkbGVgIGlzIG5vdCBmb3VuZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzZWFyY2ggYW5kIG1vZGlmeS4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiBmaW5kKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoc2xpY2UpIHsKICAgICAgICB1aW50IHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgc2VsZi5fbGVuIC09IHB0ciAtIHNlbGYuX3B0cjsKICAgICAgICBzZWxmLl9wdHIgPSBwdHI7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgTW9kaWZpZXMgYHNlbGZgIHRvIGNvbnRhaW4gdGhlIHBhcnQgb2YgdGhlIHN0cmluZyBmcm9tIHRoZSBzdGFydCBvZgogICAgICogICAgICBgc2VsZmAgdG8gdGhlIGVuZCBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYC4gSWYgYG5lZWRsZWAKICAgICAqICAgICAgaXMgbm90IGZvdW5kLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZS4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzZWFyY2ggYW5kIG1vZGlmeS4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvci4KICAgICAqIEByZXR1cm4gYHNlbGZgLgogICAgICovCiAgICBmdW5jdGlvbiByZmluZChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlKSB7CiAgICAgICAgdWludCBwdHIgPSByZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKTsKICAgICAgICBzZWxmLl9sZW4gPSBwdHIgLSBzZWxmLl9wdHI7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU3BsaXRzIHRoZSBzbGljZSwgc2V0dGluZyBgc2VsZmAgdG8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QKICAgICAqICAgICAgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYCwgYW5kIGB0b2tlbmAgdG8gZXZlcnl0aGluZyBiZWZvcmUgaXQuIElmCiAgICAgKiAgICAgIGBuZWVkbGVgIGRvZXMgbm90IG9jY3VyIGluIGBzZWxmYCwgYHNlbGZgIGlzIHNldCB0byB0aGUgZW1wdHkgc2xpY2UsCiAgICAgKiAgICAgIGFuZCBgdG9rZW5gIGlzIHNldCB0byB0aGUgZW50aXJldHkgb2YgYHNlbGZgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNwbGl0LgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEBwYXJhbSB0b2tlbiBBbiBvdXRwdXQgcGFyYW1ldGVyIHRvIHdoaWNoIHRoZSBmaXJzdCB0b2tlbiBpcyB3cml0dGVuLgogICAgICogQHJldHVybiBgdG9rZW5gLgogICAgICovCiAgICBmdW5jdGlvbiBzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUsIHNsaWNlIHRva2VuKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyID0gZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKTsKICAgICAgICB0b2tlbi5fcHRyID0gc2VsZi5fcHRyOwogICAgICAgIHRva2VuLl9sZW4gPSBwdHIgLSBzZWxmLl9wdHI7CiAgICAgICAgaWYgKHB0ciA9PSBzZWxmLl9wdHIgKyBzZWxmLl9sZW4pIHsKICAgICAgICAgICAgLy8gTm90IGZvdW5kCiAgICAgICAgICAgIHNlbGYuX2xlbiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5fbGVuIC09IHRva2VuLl9sZW4gKyBuZWVkbGUuX2xlbjsKICAgICAgICAgICAgc2VsZi5fcHRyID0gcHRyICsgbmVlZGxlLl9sZW47CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBTcGxpdHMgdGhlIHNsaWNlLCBzZXR0aW5nIGBzZWxmYCB0byBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdAogICAgICogICAgICBvY2N1cnJlbmNlIG9mIGBuZWVkbGVgLCBhbmQgcmV0dXJuaW5nIGV2ZXJ5dGhpbmcgYmVmb3JlIGl0LiBJZgogICAgICogICAgICBgbmVlZGxlYCBkb2VzIG5vdCBvY2N1ciBpbiBgc2VsZmAsIGBzZWxmYCBpcyBzZXQgdG8gdGhlIGVtcHR5IHNsaWNlLAogICAgICogICAgICBhbmQgdGhlIGVudGlyZXR5IG9mIGBzZWxmYCBpcyByZXR1cm5lZC4KICAgICAqIEBwYXJhbSBzZWxmIFRoZSBzbGljZSB0byBzcGxpdC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcmV0dXJuIFRoZSBwYXJ0IG9mIGBzZWxmYCB1cCB0byB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgZGVsaW1gLgogICAgICovCiAgICBmdW5jdGlvbiBzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUpIGludGVybmFsIHJldHVybnMgKHNsaWNlIHRva2VuKSB7CiAgICAgICAgc3BsaXQoc2VsZiwgbmVlZGxlLCB0b2tlbik7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgU3BsaXRzIHRoZSBzbGljZSwgc2V0dGluZyBgc2VsZmAgdG8gZXZlcnl0aGluZyBiZWZvcmUgdGhlIGxhc3QKICAgICAqICAgICAgb2NjdXJyZW5jZSBvZiBgbmVlZGxlYCwgYW5kIGB0b2tlbmAgdG8gZXZlcnl0aGluZyBhZnRlciBpdC4gSWYKICAgICAqICAgICAgYG5lZWRsZWAgZG9lcyBub3Qgb2NjdXIgaW4gYHNlbGZgLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZSwKICAgICAqICAgICAgYW5kIGB0b2tlbmAgaXMgc2V0IHRvIHRoZSBlbnRpcmV0eSBvZiBgc2VsZmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc3BsaXQuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHBhcmFtIHRva2VuIEFuIG91dHB1dCBwYXJhbWV0ZXIgdG8gd2hpY2ggdGhlIGZpcnN0IHRva2VuIGlzIHdyaXR0ZW4uCiAgICAgKiBAcmV0dXJuIGB0b2tlbmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJzcGxpdChzbGljZSBzZWxmLCBzbGljZSBuZWVkbGUsIHNsaWNlIHRva2VuKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSkgewogICAgICAgIHVpbnQgcHRyID0gcmZpbmRQdHIoc2VsZi5fbGVuLCBzZWxmLl9wdHIsIG5lZWRsZS5fbGVuLCBuZWVkbGUuX3B0cik7CiAgICAgICAgdG9rZW4uX3B0ciA9IHB0cjsKICAgICAgICB0b2tlbi5fbGVuID0gc2VsZi5fbGVuIC0gKHB0ciAtIHNlbGYuX3B0cik7CiAgICAgICAgaWYgKHB0ciA9PSBzZWxmLl9wdHIpIHsKICAgICAgICAgICAgLy8gTm90IGZvdW5kCiAgICAgICAgICAgIHNlbGYuX2xlbiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5fbGVuIC09IHRva2VuLl9sZW4gKyBuZWVkbGUuX2xlbjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRva2VuOwogICAgfQoKICAgIC8qCiAgICAgKiBAZGV2IFNwbGl0cyB0aGUgc2xpY2UsIHNldHRpbmcgYHNlbGZgIHRvIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBsYXN0CiAgICAgKiAgICAgIG9jY3VycmVuY2Ugb2YgYG5lZWRsZWAsIGFuZCByZXR1cm5pbmcgZXZlcnl0aGluZyBhZnRlciBpdC4gSWYKICAgICAqICAgICAgYG5lZWRsZWAgZG9lcyBub3Qgb2NjdXIgaW4gYHNlbGZgLCBgc2VsZmAgaXMgc2V0IHRvIHRoZSBlbXB0eSBzbGljZSwKICAgICAqICAgICAgYW5kIHRoZSBlbnRpcmV0eSBvZiBgc2VsZmAgaXMgcmV0dXJuZWQuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc3BsaXQuCiAgICAgKiBAcGFyYW0gbmVlZGxlIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IgaW4gYHNlbGZgLgogICAgICogQHJldHVybiBUaGUgcGFydCBvZiBgc2VsZmAgYWZ0ZXIgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZiBgZGVsaW1gLgogICAgICovCiAgICBmdW5jdGlvbiByc3BsaXQoc2xpY2Ugc2VsZiwgc2xpY2UgbmVlZGxlKSBpbnRlcm5hbCByZXR1cm5zIChzbGljZSB0b2tlbikgewogICAgICAgIHJzcGxpdChzZWxmLCBuZWVkbGUsIHRva2VuKTsKICAgIH0KCiAgICAvKgogICAgICogQGRldiBDb3VudHMgdGhlIG51bWJlciBvZiBub25vdmVybGFwcGluZyBvY2N1cnJlbmNlcyBvZiBgbmVlZGxlYCBpbiBgc2VsZmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgc2xpY2UgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIG5lZWRsZSBUaGUgdGV4dCB0byBzZWFyY2ggZm9yIGluIGBzZWxmYC4KICAgICAqIEByZXR1cm4gVGhlIG51bWJlciBvZiBvY2N1cnJlbmNlcyBvZiBgbmVlZGxlYCBmb3VuZCBpbiBgc2VsZmAuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvdW50KHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAodWludCBjb3VudCkgewogICAgICAgIHVpbnQgcHRyID0gZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSArIG5lZWRsZS5fbGVuOwogICAgICAgIHdoaWxlIChwdHIgPD0gc2VsZi5fcHRyICsgc2VsZi5fbGVuKSB7CiAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgIHB0ciA9IGZpbmRQdHIoc2VsZi5fbGVuIC0gKHB0ciAtIHNlbGYuX3B0ciksIHB0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSArIG5lZWRsZS5fbGVuOwogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICogQGRldiBSZXR1cm5zIFRydWUgaWYgYHNlbGZgIGNvbnRhaW5zIGBuZWVkbGVgLgogICAgICogQHBhcmFtIHNlbGYgVGhlIHNsaWNlIHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSBuZWVkbGUgVGhlIHRleHQgdG8gc2VhcmNoIGZvciBpbiBgc2VsZmAuCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgYG5lZWRsZWAgaXMgZm91bmQgaW4gYHNlbGZgLCBmYWxzZSBvdGhlcndpc2UuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRhaW5zKHNsaWNlIHNlbGYsIHNsaWNlIG5lZWRsZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiByZmluZFB0cihzZWxmLl9sZW4sIHNlbGYuX3B0ciwgbmVlZGxlLl9sZW4sIG5lZWRsZS5fcHRyKSAhPSBzZWxmLl9wdHI7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgUmV0dXJucyBhIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgY29uY2F0ZW5hdGlvbiBvZgogICAgICogICAgICBgc2VsZmAgYW5kIGBvdGhlcmAuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZmlyc3Qgc2xpY2UgdG8gY29uY2F0ZW5hdGUuCiAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIHNlY29uZCBzbGljZSB0byBjb25jYXRlbmF0ZS4KICAgICAqIEByZXR1cm4gVGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlIHR3byBzdHJpbmdzLgogICAgICovCiAgICBmdW5jdGlvbiBjb25jYXQoc2xpY2Ugc2VsZiwgc2xpY2Ugb3RoZXIpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgewogICAgICAgIHZhciByZXQgPSBuZXcgc3RyaW5nKHNlbGYuX2xlbiArIG90aGVyLl9sZW4pOwogICAgICAgIHVpbnQgcmV0cHRyOwogICAgICAgIGFzc2VtYmx5IHsgcmV0cHRyIDo9IGFkZChyZXQsIDMyKSB9CiAgICAgICAgbWVtY3B5KHJldHB0ciwgc2VsZi5fcHRyLCBzZWxmLl9sZW4pOwogICAgICAgIG1lbWNweShyZXRwdHIgKyBzZWxmLl9sZW4sIG90aGVyLl9wdHIsIG90aGVyLl9sZW4pOwogICAgICAgIHJldHVybiByZXQ7CiAgICB9CgogICAgLyoKICAgICAqIEBkZXYgSm9pbnMgYW4gYXJyYXkgb2Ygc2xpY2VzLCB1c2luZyBgc2VsZmAgYXMgYSBkZWxpbWl0ZXIsIHJldHVybmluZyBhCiAgICAgKiAgICAgIG5ld2x5IGFsbG9jYXRlZCBzdHJpbmcuCiAgICAgKiBAcGFyYW0gc2VsZiBUaGUgZGVsaW1pdGVyIHRvIHVzZS4KICAgICAqIEBwYXJhbSBwYXJ0cyBBIGxpc3Qgb2Ygc2xpY2VzIHRvIGpvaW4uCiAgICAgKiBAcmV0dXJuIEEgbmV3bHkgYWxsb2NhdGVkIHN0cmluZyBjb250YWluaW5nIGFsbCB0aGUgc2xpY2VzIGluIGBwYXJ0c2AsCiAgICAgKiAgICAgICAgIGpvaW5lZCB3aXRoIGBzZWxmYC4KICAgICAqLwogICAgZnVuY3Rpb24gam9pbihzbGljZSBzZWxmLCBzbGljZVtdIHBhcnRzKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsKICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IDApCiAgICAgICAgICAgIHJldHVybiAiIjsKCiAgICAgICAgdWludCBsZW4gPSBzZWxmLl9sZW4gKiAocGFydHMubGVuZ3RoIC0gMSk7CiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgbGVuICs9IHBhcnRzW2ldLl9sZW47CgogICAgICAgIHZhciByZXQgPSBuZXcgc3RyaW5nKGxlbik7CiAgICAgICAgdWludCByZXRwdHI7CiAgICAgICAgYXNzZW1ibHkgeyByZXRwdHIgOj0gYWRkKHJldCwgMzIpIH0KCiAgICAgICAgZm9yKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgbWVtY3B5KHJldHB0ciwgcGFydHNbaV0uX3B0ciwgcGFydHNbaV0uX2xlbik7CiAgICAgICAgICAgIHJldHB0ciArPSBwYXJ0c1tpXS5fbGVuOwogICAgICAgICAgICBpZiAoaSA8IHBhcnRzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICAgIG1lbWNweShyZXRwdHIsIHNlbGYuX3B0ciwgc2VsZi5fbGVuKTsKICAgICAgICAgICAgICAgIHJldHB0ciArPSBzZWxmLl9sZW47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiByZXQ7CiAgICB9Cn0KCmNvbnRyYWN0IExhc3RXaWxsQ29udHJhY3RPcmFjbGl6ZSBpcyBMYXN0V2lsbENvbnRyYWN0LCB1c2luZ09yYWNsaXplIHsKICAgIHVzaW5nIHN0cmluZ3MgZm9yICo7CgogICAgLy8gRGVmaW5lZCBjaGVjayBpbnRlcm5hbCBpbiBzZWNvbmRzLgogICAgdWludCBwdWJsaWMgY2hlY2tJbnRlcnZhbDsKICAgIC8vIExhc3QgYWN0aXZlIHRpbWVzdGFtcC4KICAgIHVpbnQgcHVibGljIGxhc3RBY3RpdmVUczsKICAgIC8vIExhc3QgY2hlY2sgYmxvY2sgbnVtYmVyLgogICAgdWludCBwdWJsaWMgbGFzdENoZWNrQmxvY2tObzsKCiAgICAvLyBUbyBpbmZvcm0gTGFzdFdpbGwgc3lzdGVtIHRoYXQgaXQgc2hvdWxkIHJlcGVhdCBjaGVjayBpbW1lZGlhdGVseS4KICAgIGV2ZW50IE5lZWRSZXBlYXRDaGVjayhib29sIGlzQWNjaWRlbnQpOwogICAgLy8gT2NjdXJzIHdoZW4gY2hlY2sgaXMgc3RhcnRlZCAoc2VudCB0byBvcmFjbGl6ZSkuCiAgICBldmVudCBDaGVja1N0YXJ0ZWQoYnl0ZXMzMiBxdWVyeUlkKTsKICAgIC8vIFRvIGluZm9ybSBMYXN0V2lsbCBzeXN0ZW0gYWJvdXQgb3JhY2xpemUgYmFsYW5jZSBmb3IgdGhpcyBjb250cmFjdC4KICAgIGV2ZW50IExvd1ByaWNlKHVpbnQpOwoKICAgIG1hcHBpbmcoYnl0ZXMzMiA9PiBib29sKSBpbnRlcm5hbCB2YWxpZElkczsKICAgIGJvb2wgaW50ZXJuYWwgYWNjaWRlbnRPY2N1cnMgPSBmYWxzZTsKCiAgICAvLyAtLS0tLS0tLS0tLS0gQ09OU1RSVUNUIC0tLS0tLS0tLS0tLS0KICAgIGZ1bmN0aW9uIExhc3RXaWxsQ29udHJhY3RPcmFjbGl6ZShhZGRyZXNzIF90YXJnZXRVc2VyLCBhZGRyZXNzW10gX3JlY2lwaWVudHMsIHVpbnQ4W10gX3BlcmNlbnRzLCB1aW50IF9jaGVja0ludGVydmFsKQogICAgTGFzdFdpbGxDb250cmFjdChfdGFyZ2V0VXNlciwgX3JlY2lwaWVudHMsIF9wZXJjZW50cykgewogICAgICAgIGNoZWNrSW50ZXJ2YWwgPSBfY2hlY2tJbnRlcnZhbDsKICAgICAgICBsYXN0QWN0aXZlVHMgPSBibG9jay50aW1lc3RhbXA7CiAgICAgICAgbGFzdENoZWNrQmxvY2tObyA9IGJsb2NrLm51bWJlcjsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0gSU5URVJOQUwgLS0tLS0tLS0tLS0tLS0KICAgIGZ1bmN0aW9uIGRvQ2hlY2soKSBvbmx5QWRtaW4gaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGlmIChhY2NpZGVudE9jY3VycykgewogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemVfZ2V0UHJpY2UoIlVSTCIpOwogICAgICAgIGlmIChwcmljZSA+IG1zZy52YWx1ZSkgewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9CiAgICAgICAgc3RyaW5nIG1lbW9yeSB1cmwgPSBidWlsZFVybCh0YXJnZXRVc2VyLCBsYXN0Q2hlY2tCbG9ja05vLCBibG9jay5udW1iZXIpOwogICAgICAgIGJ5dGVzMzIgcXVlcnlJZCA9IG9yYWNsaXplX3F1ZXJ5KCJVUkwiLCB1cmwpOwogICAgICAgIHZhbGlkSWRzW3F1ZXJ5SWRdID0gdHJ1ZTsKICAgICAgICBDaGVja1N0YXJ0ZWQocXVlcnlJZCk7CgogICAgICAgIHVpbnQgY2hhbmdlID0gbXNnLnZhbHVlIC0gcHJpY2U7CiAgICAgICAgaWYgKGNoYW5nZSA+IDApIHsKICAgICAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihjaGFuZ2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy8gVGhlIHJlc3VsdCBsb29rIGxpa2UgJ1siMTQ2OTYyNDg2NyIsICIxNDY5NjI0NTg0IiwuLi4nCiAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgcXVlcnlJZCwgc3RyaW5nIHJlc3VsdCkgewogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG9yYWNsaXplX2NiQWRkcmVzcygpKSByZXZlcnQoKTsKICAgICAgICBpZiAoIXZhbGlkSWRzW3F1ZXJ5SWRdKSByZXZlcnQoKTsKICAgICAgICBkZWxldGUgdmFsaWRJZHNbcXVlcnlJZF07CiAgICAgICAgaWYgKGFjY2lkZW50T2NjdXJzKSByZXR1cm47CiAgICAgICAgLy8gZW1wdHkgc3RyaW5nIG1lYW5zIG5vdCB0cmFuc2FjdGlvbiB0aW1lc3RhbXBzIChubyBvdXRwdXQgdHJhbnNhY3Rpb24pCiAgICAgICAgaWYgKGJ5dGVzKHJlc3VsdCkubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgLy8gYWNjaWRlbnQgaWYgdGhlcmUgaXMgbW9yZSB0aW1lIGZyb20gbGFzdCBhY3RpdmUgdGhlbiBjaGVjayBpbnRlcnZhbAogICAgICAgICAgICBhY2NpZGVudE9jY3VycyAgPSAoYmxvY2sudGltZXN0YW1wIC0gbGFzdEFjdGl2ZVRzID49IGNoZWNrSW50ZXJ2YWwpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgLy8gc2V0IG5vdCBhY3R1YWwgdGltZXN0YW1wLCBidXQgYm9jayB0aW1lc3RhbXAuCiAgICAgICAgICAgIC8vIEl0IG1pZ2h0IGNhdXNlIHRpbWUgZ2FwLCB3aGljaCBpbiB3b3JzdCBjYXNlIGVxdWFscyB0byBwb2xsIGludGVydmFsCiAgICAgICAgICAgIGxhc3RBY3RpdmVUcyA9IGJsb2NrLnRpbWVzdGFtcDsKICAgICAgICB9CiAgICAgICAgQ2hlY2tlZChhY2NpZGVudE9jY3Vycyk7CiAgICAgICAgaWYgKGFjY2lkZW50T2NjdXJzKSB7CiAgICAgICAgICAgIE5lZWRSZXBlYXRDaGVjayh0cnVlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4gd2UgcmVhbGx5IG5lZWQgdG8ga25vdyBsYXN0IHRyYW5zYWN0aW9uIHRzCiAgICBmdW5jdGlvbiBwYXJzZUpzb25BcnJheUFuZEdldEZpcnN0RWxlbWVudEFzTnVtYmVyKHN0cmluZyBqc29uKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgdmFyIGpzb25TbGljZSA9IGpzb24udG9TbGljZSgpOwogICAgICAgIHN0cmluZ3Muc2xpY2UgbWVtb3J5IGZpcnN0UmVzdWx0OwogICAgICAgIGpzb25TbGljZS5zcGxpdCgiLCAiLnRvU2xpY2UoKSwgZmlyc3RSZXN1bHQpOwogICAgICAgIHZhciB0cyA9IGZpcnN0UmVzdWx0LmJleW9uZCgiW1wiIi50b1NsaWNlKCkpLnRvU3RyaW5nKCk7CiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRzKTsKICAgIH0KCiAgICAvLyBqc29uKGh0dHBzOi8vYXBpLmV0aGVyc2Nhbi5pby9hcGk/bW9kdWxlPWFjY291bnQmYWN0aW9uPXR4bGlzdCZhZGRyZXNzPTB4ZGRiZDJiOTMyYzc2M2JhNWIxYjdhZTNiMzYyZWFjM2U4ZDQwMTIxYSZzdGFydGJsb2NrPTAmZW5kYmxvY2s9OTk5OTk5OTkmcGFnZT0wJm9mZnNldD0wJnNvcnQ9ZGVzYyZhcGlrZXk9RkozOVAyRElVOElYOFU5TjI3MzVTVUtRV0czSFBQR1BYOCkucmVzdWx0Wz8oQC5mcm9tPT0nPGFkZHJlc3M+JyldLnRpbWVTdGFtcAogICAgZnVuY3Rpb24gYnVpbGRVcmwoYWRkcmVzcyB0YXJnZXQsIHVpbnQgc3RhcnRCbG9jaywgdWludCBlbmRCbG9jaykgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7CiAgICAgICAgc3RyaW5ncy5zbGljZSBtZW1vcnkgc3RyQWRkcmVzcyA9IHRvSGV4KHRhcmdldCkudG9TbGljZSgpOwogICAgICAgIHVpbnQ4IGkgPSAwOyAvLyBjb3VudCBvZiB0aGUgc3RyaW5ncyBiZWxvdwogICAgICAgIHZhciBwYXJ0cyA9IG5ldyBzdHJpbmdzLnNsaWNlW10oOSk7CiAgICAgICAgcGFydHNbaSsrXSA9ICJqc29uKGh0dHBzOi8vYXBpLmV0aGVyc2Nhbi5pby9hcGk/bW9kdWxlPWFjY291bnQmYWN0aW9uPXR4bGlzdCZhZGRyZXNzPTB4Ii50b1NsaWNlKCk7CiAgICAgICAgcGFydHNbaSsrXSA9IHN0ckFkZHJlc3M7CiAgICAgICAgLy8gICAgIC8vICZwYWdlPTAmb2Zmc2V0PTAgLSBtZWFucyBub3QgcGFnaW5hdGlvbiwgYnV0IGl0IG1pZ2h0IGJlIGEgcHJvYmxlbSBpZiB0aGVyZSB3aWxsIGJlIHBhZ2UgbGltaXQKICAgICAgICBwYXJ0c1tpKytdID0gIiZzdGFydGJsb2NrPSIudG9TbGljZSgpOwogICAgICAgIHBhcnRzW2krK10gPSB1aW50MnN0cihzdGFydEJsb2NrKS50b1NsaWNlKCk7CiAgICAgICAgcGFydHNbaSsrXSA9ICImZW5kYmxvY2s9Ii50b1NsaWNlKCk7CiAgICAgICAgcGFydHNbaSsrXSA9IHVpbnQyc3RyKGVuZEJsb2NrKS50b1NsaWNlKCk7CiAgICAgICAgcGFydHNbaSsrXSA9ICImc29ydD1kZXNjJmFwaWtleT1GSjM5UDJESVU4SVg4VTlOMjczNVNVS1FXRzNIUFBHUFg4KS5yZXN1bHRbPyhALmZyb209PScweCIudG9TbGljZSgpOwogICAgICAgIHBhcnRzW2krK10gPSBzdHJBZGRyZXNzOwogICAgICAgIHBhcnRzW2krK10gPSAiJyldLnRpbWVTdGFtcCIudG9TbGljZSgpOwogICAgICAgIHJldHVybiAiIi50b1NsaWNlKCkKICAgICAgICAuam9pbihwYXJ0cyk7CiAgICB9CgogICAgZnVuY3Rpb24gdG9IZXgoYWRkcmVzcyBhZHIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgewogICAgICAgIHZhciBzcyA9IG5ldyBieXRlcyg0MCk7CiAgICAgICAgdmFyIHQgPSB1aW50KGFkcik7CiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgNDA7IGkgKyspIHsKICAgICAgICAgICAgdWludCBjOwogICAgICAgICAgICBhc3NlbWJseSB7CiAgICAgICAgICAgIGMgOj0gYW5kKHQsIDB4ZikKICAgICAgICAgICAgdCA6PSBkaXYodCwgMHhmKQogICAgICAgICAgICBjIDo9IGFkZChhZGQoYywgMHgzMCksIG11bCgweDI3LCBndChjLCA5KSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3NbaV0gPSBieXRlKGMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyaW5nKHNzKTsKICAgIH0KfQ=='.
	

]
