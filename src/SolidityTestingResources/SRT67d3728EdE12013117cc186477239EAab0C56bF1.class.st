Class {
	#name : #SRT67d3728EdE12013117cc186477239EAab0C56bF1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT67d3728EdE12013117cc186477239EAab0C56bF1 >> base64 [
	^ 'Ly8gY29tcGlsZXI6IDAuNC4yMStjb21taXQuZGZlMzE5M2MuRW1zY3JpcHRlbi5jbGFuZwpwcmFnbWEgc29saWRpdHkgXjAuNC4yMTsKCi8vIGh0dHBzOi8vd3d3LmV0aGVyZXVtLm9yZy90b2tlbgppbnRlcmZhY2UgdG9rZW5SZWNpcGllbnQgewogIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbCggYWRkcmVzcyBmcm9tLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhICkgZXh0ZXJuYWw7Cn0KCi8vIEVSQzIyMwppbnRlcmZhY2UgQ29udHJhY3RSZWNlaXZlciB7CiAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayggYWRkcmVzcyBmcm9tLCB1aW50IHZhbHVlLCBieXRlcyBkYXRhICkgZXh0ZXJuYWw7Cn0KCi8vIEVSQzIwIHRva2VuIHdpdGggYWRkZWQgRVJDMjIzIGFuZCBFdGhlcmV1bS1Ub2tlbiBzdXBwb3J0Ci8vCi8vIEJsZW5kIG9mIG11bHRpcGxlIGludGVyZmFjZXM6Ci8vIC0gaHR0cHM6Ly90aGVldGhlcmV1bS53aWtpL3cvaW5kZXgucGhwL0VSQzIwX1Rva2VuX1N0YW5kYXJkCi8vIC0gaHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL3Rva2VuICh1bmNvbnRyb2xsZWQsIG5vbi1zdGFuZGFyZCkKLy8gLSBodHRwczovL2dpdGh1Yi5jb20vRGV4YXJhbi9FUkMyMy10b2tlbnMvYmxvYi9SZWNvbW1lbmRlZC9FUkMyMjNfVG9rZW4uc29sCgovLyBOT1RFOiBCdXJuIGZ1bmN0aW9uYWxpdHkgaW50ZW50aW9uYWxseSByZW1vdmVkCgpjb250cmFjdCBFUkMyMjNUb2tlbgp7CiAgc3RyaW5nICBwdWJsaWMgbmFtZTsKICBzdHJpbmcgIHB1YmxpYyBzeW1ib2w7CiAgdWludDggICBwdWJsaWMgZGVjaW1hbHM7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CgogIG1hcHBpbmcoIGFkZHJlc3MgPT4gdWludDI1NiApIGJhbGFuY2VzXzsKICBtYXBwaW5nKCBhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSApIGFsbG93YW5jZXNfOwoKICAvLyBFUkMyMAogIGV2ZW50IEFwcHJvdmFsKCBhZGRyZXNzIGluZGV4ZWQgb3duZXIsCiAgICAgICAgICAgICAgICAgIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLAogICAgICAgICAgICAgICAgICB1aW50IHZhbHVlICk7CgogIGV2ZW50IFRyYW5zZmVyKCBhZGRyZXNzIGluZGV4ZWQgZnJvbSwKICAgICAgICAgICAgICAgICAgYWRkcmVzcyBpbmRleGVkIHRvLAogICAgICAgICAgICAgICAgICB1aW50MjU2IHZhbHVlICk7CiAgICAgICAgICAgICAgIC8vIGJ5dGVzICAgIGRhdGEgKTsgdXNlIEVSQzIwIHZlcnNpb24gaW5zdGVhZAoKICBmdW5jdGlvbiBFUkMyMjNUb2tlbiggdWludDI1NiBpbml0aWFsU3VwcGx5LAogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdG9rZW5OYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50OCBkZWNpbWFsVW5pdHMsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyB0b2tlblN5bWJvbCApIHB1YmxpYwogIHsKICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseSAqIDEwICoqIHVpbnQyNTYoZGVjaW1hbFVuaXRzKTsKICAgIGJhbGFuY2VzX1ttc2cuc2VuZGVyXSA9IHRvdGFsU3VwcGx5OwogICAgbmFtZSA9IHRva2VuTmFtZTsKICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOwogICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7CiAgICBlbWl0IFRyYW5zZmVyKCBhZGRyZXNzKDApLCBtc2cuc2VuZGVyLCB0b3RhbFN1cHBseSApOwogIH0KCiAgZnVuY3Rpb24oKSBwdWJsaWMgcGF5YWJsZSB7IHJldmVydCgpOyB9IC8vIGRvZXMgbm90IGFjY2VwdCBtb25leQoKICAvLyBFUkMyMAogIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyBvd25lciApIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gYmFsYW5jZXNfW293bmVyXTsKICB9CgogIC8vIEVSQzIwCiAgLy8KICAvLyBXQVJOSU5HISBXaGVuIGNoYW5naW5nIHRoZSBhcHByb3ZhbCBhbW91bnQsIGZpcnN0IHNldCBpdCBiYWNrIHRvIHplcm8KICAvLyBBTkQgd2FpdCB1bnRpbCB0aGUgdHJhbnNhY3Rpb24gaXMgbWluZWQuIE9ubHkgYWZ0ZXJ3YXJkcyBzZXQgdGhlIG5ldwogIC8vIGFtb3VudC4gT3RoZXJ3aXNlIHlvdSBtYXkgYmUgcHJvbmUgdG8gYSByYWNlIGNvbmRpdGlvbiBhdHRhY2suCiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQoKICBmdW5jdGlvbiBhcHByb3ZlKCBhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgYWxsb3dhbmNlc19bbXNnLnNlbmRlcl1bc3BlbmRlcl0gPSB2YWx1ZTsKICAgIGVtaXQgQXBwcm92YWwoIG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAKICAvLyByZWNvbW1lbmRlZCBmaXggZm9yIGtub3duIGF0dGFjayBvbiBhbnkgRVJDMjAKICBmdW5jdGlvbiBzYWZlQXBwcm92ZSggYWRkcmVzcyBfc3BlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfY3VycmVudFZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICB1aW50MjU2IF92YWx1ZSApIHB1YmxpYwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKCiAgICAvLyBJZiBjdXJyZW50IGFsbG93YW5jZSBmb3IgX3NwZW5kZXIgaXMgZXF1YWwgdG8gX2N1cnJlbnRWYWx1ZSwgdGhlbgogICAgLy8gb3ZlcndyaXRlIGl0IHdpdGggX3ZhbHVlIGFuZCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS4KCiAgICBpZiAoYWxsb3dhbmNlc19bbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IF9jdXJyZW50VmFsdWUpCiAgICAgIHJldHVybiBhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgIHJldHVybiBmYWxzZTsKICB9CgogIC8vIEVSQzIwCiAgZnVuY3Rpb24gYWxsb3dhbmNlKCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIgKSBwdWJsaWMgY29uc3RhbnQKICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykKICB7CiAgICByZXR1cm4gYWxsb3dhbmNlc19bb3duZXJdW3NwZW5kZXJdOwogIH0KCiAgLy8gRVJDMjAKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBwdWJsaWMKICB7CiAgICBieXRlcyBtZW1vcnkgZW1wdHk7IC8vIG51bGwKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBlbXB0eSApOwogIH0KCiAgLy8gRVJDMjAKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSApIHB1YmxpYwogIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICB7CiAgICByZXF1aXJlKCB2YWx1ZSA8PSBhbGxvd2FuY2VzX1tmcm9tXVttc2cuc2VuZGVyXSApOwoKICAgIGFsbG93YW5jZXNfW2Zyb21dW21zZy5zZW5kZXJdIC09IHZhbHVlOwogICAgYnl0ZXMgbWVtb3J5IGVtcHR5OwogICAgX3RyYW5zZmVyKCBmcm9tLCB0bywgdmFsdWUsIGVtcHR5ICk7CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICAvLyBFdGhlcmV1bSBUb2tlbgogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKCBhZGRyZXNzIHNwZW5kZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGNvbnRleHQgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgaWYgKCBhcHByb3ZlKHNwZW5kZXIsIHZhbHVlKSApCiAgICB7CiAgICAgIHRva2VuUmVjaXBpZW50IHJlY2lwID0gdG9rZW5SZWNpcGllbnQoIHNwZW5kZXIgKTsKICAgICAgcmVjaXAucmVjZWl2ZUFwcHJvdmFsKCBtc2cuc2VuZGVyLCB2YWx1ZSwgY29udGV4dCApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9ICAgICAgICAKCiAgLy8gRVJDMjIzIFRyYW5zZmVyIGFuZCBpbnZva2Ugc3BlY2lmaWVkIGNhbGxiYWNrCiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sCiAgICAgICAgICAgICAgICAgICAgIHVpbnQgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBjdXN0b21fZmFsbGJhY2sgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgaWYgKCBpc0NvbnRyYWN0KHRvKSApCiAgICB7CiAgICAgIENvbnRyYWN0UmVjZWl2ZXIgcnggPSBDb250cmFjdFJlY2VpdmVyKCB0byApOwogICAgICByZXF1aXJlKCBhZGRyZXNzKHJ4KS5jYWxsLnZhbHVlKDApKGJ5dGVzNChrZWNjYWsyNTYoY3VzdG9tX2ZhbGxiYWNrKSksCiAgICAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICAgICBkYXRhKSApOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLy8gRVJDMjIzIFRyYW5zZmVyIHRvIGEgY29udHJhY3Qgb3IgZXh0ZXJuYWxseS1vd25lZCBhY2NvdW50CiAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwdWJsaWMKICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgewogICAgaWYgKGlzQ29udHJhY3QodG8pKSB7CiAgICAgIHJldHVybiB0cmFuc2ZlclRvQ29udHJhY3QoIHRvLCB2YWx1ZSwgZGF0YSApOwogICAgfQoKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBUcmFuc2ZlciB0byBjb250cmFjdCBhbmQgaW52b2tlIHRva2VuRmFsbGJhY2soKSBtZXRob2QKICBmdW5jdGlvbiB0cmFuc2ZlclRvQ29udHJhY3QoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUsIGJ5dGVzIGRhdGEgKSBwcml2YXRlCiAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQogIHsKICAgIF90cmFuc2ZlciggbXNnLnNlbmRlciwgdG8sIHZhbHVlLCBkYXRhICk7CgogICAgQ29udHJhY3RSZWNlaXZlciByeCA9IENvbnRyYWN0UmVjZWl2ZXIodG8pOwogICAgcngudG9rZW5GYWxsYmFjayggbXNnLnNlbmRlciwgdmFsdWUsIGRhdGEgKTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIC8vIEVSQzIyMyBmZXRjaCBjb250cmFjdCBzaXplIChtdXN0IGJlIG5vbnplcm8gdG8gYmUgYSBjb250cmFjdCkKICBmdW5jdGlvbiBpc0NvbnRyYWN0KCBhZGRyZXNzIF9hZGRyICkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zIChib29sKQogIHsKICAgIHVpbnQgbGVuZ3RoOwogICAgYXNzZW1ibHkgeyBsZW5ndGggOj0gZXh0Y29kZXNpemUoX2FkZHIpIH0KICAgIHJldHVybiAobGVuZ3RoID4gMCk7CiAgfQoKICBmdW5jdGlvbiBfdHJhbnNmZXIoIGFkZHJlc3MgZnJvbSwKICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgdG8sCiAgICAgICAgICAgICAgICAgICAgICB1aW50IHZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgYnl0ZXMgZGF0YSApIGludGVybmFsCiAgewogICAgcmVxdWlyZSggdG8gIT0gMHgwICk7CiAgICByZXF1aXJlKCBiYWxhbmNlc19bZnJvbV0gPj0gdmFsdWUgKTsKICAgIHJlcXVpcmUoIGJhbGFuY2VzX1t0b10gKyB2YWx1ZSA+IGJhbGFuY2VzX1t0b10gKTsgLy8gY2F0Y2ggb3ZlcmZsb3cKCiAgICBiYWxhbmNlc19bZnJvbV0gLT0gdmFsdWU7CiAgICBiYWxhbmNlc19bdG9dICs9IHZhbHVlOwoKICAgIC8vVHJhbnNmZXIoIGZyb20sIHRvLCB2YWx1ZSwgZGF0YSApOyBFUkMyMjMtY29tcGF0IHZlcnNpb24KICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsKICAgIGVtcHR5ID0gZGF0YTsKICAgIGVtaXQgVHJhbnNmZXIoIGZyb20sIHRvLCB2YWx1ZSApOyAvLyBFUkMyMC1jb21wYXQgdmVyc2lvbgogIH0KfQ=='.
	

]
