Class {
	#name : #SRT7f2e9820c99c8abcd9d5467dd38f1a928d2a7197,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f2e9820c99c8abcd9d5467dd38f1a928d2a7197 >> base64 [
	^ ''.
	

]
