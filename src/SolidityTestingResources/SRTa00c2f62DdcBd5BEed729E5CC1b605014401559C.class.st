Class {
	#name : #SRTa00c2f62DdcBd5BEed729E5CC1b605014401559C,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa00c2f62DdcBd5BEed729E5CC1b605014401559C >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSAqIGI7CiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9Cgpjb250cmFjdCBPd25hYmxlIHsKCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7IG93bmVyID0gbXNnLnNlbmRlcjsgfQoKICBtb2RpZmllciBvbmx5T3duZXIgewogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgIF87CiAgfQoKICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBwdWJsaWMgb25seU93bmVyIHtvd25lciA9IG5ld093bmVyO30KfQoKY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wpOwoKICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCk7CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7CgogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwoKICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKCiB9Cgpjb250cmFjdCBHTVBUb2tlbiBpcyBPd25hYmxlLCBFUkMyMEludGVyZmFjZSB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJHTVAgQ29pbiI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiR01QIjsKICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGluaXRpYWxTdXBwbHkgPSAyMjAwMDAwMDAgKiAxIGV0aGVyOwogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsKICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2VkOwoKICAvKiBFdmVudHMgKi8KICBldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBidXJuZXIsIHVpbnQyNTYgdmFsdWUpOwogIGV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IGFtb3VudCk7CgogIC8qIENvbnN0dWN0b3I6IEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogIGZ1bmN0aW9uIEdNUFRva2VuKCkgcHVibGljIHsKICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBzdXBwbHkKICB9CgoKICAvKiBJbXBsZW1lbnRhdGlvbiBvZiBFUkMyMEludGVyZmFjZSAqLwoKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiB0b3RhbFN1cHBseTsgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiBiYWxhbmNlc1tfb3duZXJdOyB9CgogIC8qIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdCAqLwogIGZ1bmN0aW9uIF90cmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfYW1vdW50KSBpbnRlcm5hbCB7CiAgICAgIHJlcXVpcmUgKF90byAhPSAweDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgcmVxdWlyZSAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dLnN1YihfYW1vdW50KTsKICAgICAgYmFsYW5jZXNbX3RvXSA9IGJhbGFuY2VzW190b10uYWRkKF9hbW91bnQpOwogICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsKCiAgfQoKICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICByZXF1aXJlIChfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlCiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdLnN1YihfdmFsdWUpOwogICAgX3RyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50OwogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsKICB9CgogIGZ1bmN0aW9uIG1pbnRUb2tlbih1aW50MjU2IF9taW50ZWRBbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgYmFsYW5jZXNbT3duYWJsZS5vd25lcl0gPSBiYWxhbmNlc1tPd25hYmxlLm93bmVyXS5hZGQoX21pbnRlZEFtb3VudCk7CiAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChfbWludGVkQW1vdW50KTsKICAgIE1pbnQoT3duYWJsZS5vd25lciwgX21pbnRlZEFtb3VudCk7CiAgfQoKICAvL0ZvciByZWZ1bmQgb25seQogIGZ1bmN0aW9uIGJ1cm5Ub2tlbihhZGRyZXNzIF9idXJuZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJlcXVpcmUoX3ZhbHVlID4gMCk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfYnVybmVyXSk7CgogICAgYmFsYW5jZXNbX2J1cm5lcl0gPSBiYWxhbmNlc1tfYnVybmVyXS5zdWIoX3ZhbHVlKTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViKF92YWx1ZSk7CiAgICBCdXJuKF9idXJuZXIsIF92YWx1ZSk7CiAgfQoKCn0KCgpjb250cmFjdCBDcm93ZHNhbGUgaXMgT3duYWJsZSB7CgogIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAvLyBUaGUgdG9rZW4gYmVpbmcgc29sZAogIEdNUFRva2VuIHB1YmxpYyB0b2tlbjsKCiAgLy8gRmxhZyBzZXR0aW5nIHRoYXQgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogIGJvb2wgcHVibGljIHNhbGVJc0FjdGl2ZTsKCiAgLy8gYWRkcmVzcyB3aGVyZSBmdW5kcyBhcmUgY29sbGVjdGVkCiAgYWRkcmVzcyBwdWJsaWMgd2FsbGV0OwoKICAvLyBOdW1iZXIgb2YgdG9rZW50cyBmb3IgMSBFVEgsIGkuZS4gNjgzIHRva2VucyBmb3IgMSBFVEgKICB1aW50MjU2IHB1YmxpYyByYXRlOwoKICAvLyBhbW91bnQgb2YgcmFpc2VkIG1vbmV5IGluIHdlaQogIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZDsKCiAgLyoqCiAgICogZXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICogQHBhcmFtIGJlbmVmaWNpYXJ5IHdobyBnb3QgdGhlIHRva2VucwogICAqIEBwYXJhbSB2YWx1ZSB3ZWlzIHBhaWQgZm9yIHB1cmNoYXNlCiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAqLwogIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICAvKiAtLS0tLS0tLS0tLSAgIEEgRCBNIEkgTiAgICAgICAgRiBVIE4gQyBUIEkgTyBOIFMgICAgLS0tLS0tLS0tLS0gKi8KCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKHVpbnQyNTYgX2luaXRpYWxSYXRlLCBhZGRyZXNzIF90YXJnZXRXYWxsZXQpIHB1YmxpYyB7CgogICAgLy9DaGVja3MKICAgIHJlcXVpcmUoX2luaXRpYWxSYXRlID4gMCk7CiAgICByZXF1aXJlKF90YXJnZXRXYWxsZXQgIT0gMHgwKTsKCiAgICAvL0luaXQKICAgIHRva2VuID0gbmV3IEdNUFRva2VuKCk7CiAgICByYXRlID0gX2luaXRpYWxSYXRlOwogICAgd2FsbGV0ID0gX3RhcmdldFdhbGxldDsKICAgIHNhbGVJc0FjdGl2ZSA9IHRydWU7CgogIH0KCiAgZnVuY3Rpb24gY2xvc2UoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgfQoKICAvL1RyYW5zZmVyIHRva2VuIHRvCiAgZnVuY3Rpb24gdHJhbnNmZXJUb0FkZHJlc3MoYWRkcmVzcyBfdGFyZ2V0V2FsbGV0LCB1aW50MjU2IF90b2tlbkFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlbi50cmFuc2ZlcihfdGFyZ2V0V2FsbGV0LCBfdG9rZW5BbW91bnQgKiAxIGV0aGVyKTsKICB9CgoKICAvL1NldHRlcnMKICBmdW5jdGlvbiBlbmFibGVTYWxlKCkgcHVibGljIG9ubHlPd25lciB7CiAgICBzYWxlSXNBY3RpdmUgPSB0cnVlOwogIH0KCiAgZnVuY3Rpb24gZGlzYWJsZVNhbGUoKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHNhbGVJc0FjdGl2ZSA9IGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gc2V0UmF0ZSh1aW50MjU2IF9uZXdSYXRlKSBwdWJsaWMgb25seU93bmVyIHsKICAgIHJhdGUgPSBfbmV3UmF0ZTsKICB9CgogIC8vTWludCBuZXcgdG9rZW5zCiAgZnVuY3Rpb24gbWludFRva2VuKHVpbnQyNTYgX21pbnRlZEFtb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICB0b2tlbi5taW50VG9rZW4oX21pbnRlZEFtb3VudCk7CiAgfQoKCgogIC8qIC0tLS0tLS0tLS0tICAgUCBVIEIgTCBJIEMgICAgICBDIEEgTCBMIEIgQSBDIEsgICAgICAgRiBVIE4gQyBUIEkgTyBOICAgICAtLS0tLS0tLS0tLSAqLwoKICBmdW5jdGlvbiAoKSBwdWJsaWMgcGF5YWJsZSB7CgogICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IDB4MCk7CiAgICByZXF1aXJlKHNhbGVJc0FjdGl2ZSk7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAwLjAxICogMSBldGhlcik7CgogICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CgogICAgLy9VcGRhdGUgdG90YWwgd2VpIGNvdW50ZXIKICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5hZGQod2VpQW1vdW50KTsKCiAgICAvL0NhbGMgbnVtYmVyIG9mIHRva2VudHMKICAgIHVpbnQyNTYgdG9rZW5BbW91bnQgPSB3ZWlBbW91bnQubXVsKHJhdGUpOwoKICAgIC8vRm9yd2FyZCB3ZWkgdG8gd2FsbGV0IGFjY291bnQKICAgIHdhbGxldC50cmFuc2Zlcih3ZWlBbW91bnQpOwoKICAgIC8vVHJhbnNmZXIgdG9rZW4gdG8gc2VuZGVyCiAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCB0b2tlbkFtb3VudCk7CiAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIHdhbGxldCwgd2VpQW1vdW50LCB0b2tlbkFtb3VudCk7CgogIH0KCgoKfQ=='.
	

]
