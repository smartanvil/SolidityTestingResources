Class {
	#name : #SRT69f2a483a2ad4b910fa03a0f380d61f6dbe20017,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT69f2a483a2ad4b910fa03a0f380d61f6dbe20017 >> base64 [
	^ ''.
	

]
