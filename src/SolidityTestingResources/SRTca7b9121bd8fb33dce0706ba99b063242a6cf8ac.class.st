Class {
	#name : #SRTca7b9121bd8fb33dce0706ba99b063242a6cf8ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTca7b9121bd8fb33dce0706ba99b063242a6cf8ac >> base64 [
	^ ''.
	

]
