Class {
	#name : #SRTb6600B1D7f595310c8087a6DD3BDB3D58B347d9b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb6600B1D7f595310c8087a6DD3BDB3D58B347d9b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IDAuNC4yMTsKCi8qKgogKiBAdGl0bGUgT3duYWJsZQogKiBAZGV2IFRoZSBPd25hYmxlIGNvbnRyYWN0IGhhcyBhbiBvd25lciBhZGRyZXNzLCBhbmQgcHJvdmlkZXMgYmFzaWMgYXV0aG9yaXphdGlvbiBjb250cm9sIAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLiAKICovCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqIAogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHB1YmxpYyB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiByZXZlcnQoKXMgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLiAKICAgKi8KICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOwogICAgXzsKICB9CgoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgY3VycmVudCBvd25lciB0byB0cmFuc2ZlciBjb250cm9sIG9mIHRoZSBjb250cmFjdCB0byBhIG5ld093bmVyLgogICAqIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciBvd25lcnNoaXAgdG8uIAogICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciBwdWJsaWMgewogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICB9Cgp9CgoKCi8qKgogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICAKICAKICBmdW5jdGlvbiBtdWwyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICByZXF1aXJlKGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSByZXZlcnQoKXMgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1YjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgcmVxdWlyZShiIDw9IGEpOwogICAgcmV0dXJuIGEgLSBiOwogIH0KCiAgZnVuY3Rpb24gYWRkMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfSAgCiAgCgogIGZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7CiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQoKICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiBhID49IGIgPyBhIDogYjsKICB9CgogIGZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7CiAgfQp9CgoKLyoqCiAqIEB0aXRsZSBFUkMyMEJhc2ljCiAqIEBkZXYgU2ltcGxlciB2ZXJzaW9uIG9mIEVSQzIwIGludGVyZmFjZQogKi8KY29udHJhY3QgRVJDMjBCYXNpYyB7CiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7CiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1Nik7CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9CgoKCgovKioKICogQHRpdGxlIEVSQzIwIGludGVyZmFjZQogKiBAZGV2IEVSQzIwIGludGVyZmFjZSB3aXRoIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQyNTYpOwogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYzsKICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwp9CgoKCgovKioKICogQHRpdGxlIEJhc2ljIHRva2VuCiAqIEBkZXYgQmFzaWMgdmVyc2lvbiBvZiBTdGFuZGFyZFRva2VuLCB3aXRoIG5vIGFsbG93YW5jZXMuIAogKi8KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOwoKICAvKioKICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAqLwogIG1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsKICAgICByZXF1aXJlKG1zZy5kYXRhLmxlbmd0aCA+PSBzaXplICsgNCk7CiAgICAgXzsKICB9CgogIC8qKgogICogQGRldiB0cmFuc2ZlciB0b2tlbiBmb3IgYSBzcGVjaWZpZWQgYWRkcmVzcwogICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0byB0cmFuc2ZlciB0by4KICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCB0byBiZSB0cmFuc2ZlcnJlZC4KICAqLwogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDIgKiAzMikgcHVibGljIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViMjU2KF92YWx1ZSk7CiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQyNTYoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICB9CgogIC8qKgogICogQGRldiBHZXRzIHRoZSBiYWxhbmNlIG9mIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy4KICAqIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdG8gcXVlcnkgdGhlIHRoZSBiYWxhbmNlIG9mLiAKICAqIEByZXR1cm4gQW4gdWludCByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvd25lZCBieSB0aGUgcGFzc2VkIGFkZHJlc3MuCiAgKi8KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHB1YmxpYyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KCn0KCgoKCi8qKgogKiBAdGl0bGUgU3RhbmRhcmQgRVJDMjAgdG9rZW4KICogQGRldiBJbXBsZW1hbnRhdGlvbiBvZiB0aGUgYmFzaWMgc3RhbmRhcnQgdG9rZW4uCiAqLwpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEJhc2ljVG9rZW4sIEVSQzIwIHsKCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKCiAgLyoqCiAgICogQGRldiBUcmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyCiAgICogQHBhcmFtIF9mcm9tIGFkZHJlc3MgVGhlIGFkZHJlc3Mgd2hpY2ggeW91IHdhbnQgdG8gc2VuZCB0b2tlbnMgZnJvbQogICAqIEBwYXJhbSBfdG8gYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB5b3Ugd2FudCB0byB0cmFuc2ZlciB0bwogICAqIEBwYXJhbSBfdmFsdWUgdWludCB0aGUgYW1vdXQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVyZWQKICAgKi8KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMyAqIDMyKSBwdWJsaWMgewogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsKCiAgICAvLyBDaGVjayBpcyBub3QgbmVlZGVkIGJlY2F1c2Ugc3ViKF9hbGxvd2FuY2UsIF92YWx1ZSkgd2lsbCBhbHJlYWR5IHJldmVydCgpIGlmIHRoaXMgY29uZGl0aW9uIGlzIG5vdCBtZXQKICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSByZXZlcnQoKTsKCiAgICBiYWxhbmNlc1tfdG9dID0gYmFsYW5jZXNbX3RvXS5hZGQyNTYoX3ZhbHVlKTsKICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIyNTYoX3ZhbHVlKTsKICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID0gX2FsbG93YW5jZS5zdWIyNTYoX3ZhbHVlKTsKICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgfQoKICAvKioKICAgKiBAZGV2IEFwcm92ZSB0aGUgcGFzc2VkIGFkZHJlc3MgdG8gc3BlbmQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyLgogICAqIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHNwZW50LgogICAqLwogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyB7CgogICAgLy8gIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXMKICAgIC8vICBhbGxvd2FuY2UgdG8gemVybyBieSBjYWxsaW5nIGBhcHByb3ZlKF9zcGVuZGVyLCAwKWAgaWYgaXQgaXMgbm90CiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToKICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQogICAgaWYgKChfdmFsdWUgIT0gMCkgJiYgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApKSByZXZlcnQoKTsKCiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogIH0KCiAgLyoqCiAgICogQGRldiBGdW5jdGlvbiB0byBjaGVjayB0aGUgYW1vdW50IG9mIHRva2VucyB0aGFuIGFuIG93bmVyIGFsbG93ZWQgdG8gYSBzcGVuZGVyLgogICAqIEBwYXJhbSBfb3duZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCBvd25zIHRoZSBmdW5kcy4KICAgKiBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBUaGUgYWRkcmVzcyB3aGljaCB3aWxsIHNwZW5kIHRoZSBmdW5kcy4KICAgKiBAcmV0dXJuIEEgdWludCBzcGVjaWZpbmcgdGhlIGFtb3VudCBvZiB0b2tlbnMgc3RpbGwgYXZhaWJsZSBmb3IgdGhlIHNwZW5kZXIuCiAgICovCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCBwdWJsaWMgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOwogIH0KCgp9CgoKCi8qKgogKiBAdGl0bGUgVGV1VG9rZW4KICogQGRldiBUaGUgbWFpbiBURVUgdG9rZW4gY29udHJhY3QKICogCiAqLwogCmNvbnRyYWN0IFRldVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIE93bmFibGV7CiAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIjIwLWZvb3RFcXZVbml0IjsKICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJURVUiOwogIHVpbnQgcHVibGljIGRlY2ltYWxzID0gMTg7CgogIGV2ZW50IFRva2VuQnVybmVkKHVpbnQyNTYgdmFsdWUpOwogIAogIGZ1bmN0aW9uIFRldVRva2VuKCkgcHVibGljIHsKICAgIHRvdGFsU3VwcGx5ID0gKDEwICoqIDgpICogKDEwICoqIGRlY2ltYWxzKTsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7CiAgfQoKICAvKioKICAgKiBAZGV2IEFsbG93cyB0aGUgb3duZXIgdG8gYnVybiB0aGUgdG9rZW4KICAgKiBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gYmUgYnVybmVkLgogICAqLwogIGZ1bmN0aW9uIGJ1cm4odWludCBfdmFsdWUpIG9ubHlPd25lciBwdWJsaWMgewogICAgcmVxdWlyZShiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIyNTYoX3ZhbHVlKTsKICAgIHRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkuc3ViMjU2KF92YWx1ZSk7CiAgICBUb2tlbkJ1cm5lZChfdmFsdWUpOwogIH0KCn0KCi8qKgogKiBAdGl0bGUgdGV1SW5pdGlhbFRva2VuU2FsZSAKICogQGRldiBUaGUgVEVVIHRva2VuIElDTyBjb250cmFjdAogKiAKICovCmNvbnRyYWN0IHRldUluaXRpYWxUb2tlblNhbGUgaXMgT3duYWJsZSB7Cgl1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgICBldmVudCBMb2dDb250cmlidXRpb24oYWRkcmVzcyBpbmRleGVkIF9jb250cmlidXRvciwgdWludDI1NiBfZXRoZXJBbW91bnQsIHVpbnQyNTYgX2Jhc2ljVG9rZW5BbW91bnQsIHVpbnQyNTYgX3RpbWVCb251c1Rva2VuQW1vdW50LCB1aW50MjU2IF92b2x1bWVCb251c1Rva2VuQW1vdW50KTsKICAgIGV2ZW50IExvZ0NvbnRyaWJ1dGlvbkJpdGNvaW4oYWRkcmVzcyBpbmRleGVkIF9jb250cmlidXRvciwgdWludDI1NiBfYml0Y29pbkFtb3VudCwgdWludDI1NiBfZXRoZXJBbW91bnQsIHVpbnQyNTYgX2Jhc2ljVG9rZW5BbW91bnQsIHVpbnQyNTYgX3RpbWVCb251c1Rva2VuQW1vdW50LCB1aW50MjU2IF92b2x1bWVCb251c1Rva2VuQW1vdW50LCB1aW50IF9jb250cmlidXRpb25EYXRldGltZSk7CiAgICBldmVudCBMb2dPZmZDaGFpbkNvbnRyaWJ1dGlvbihhZGRyZXNzIGluZGV4ZWQgX2NvbnRyaWJ1dG9yLCB1aW50MjU2IF9ldGhlckFtb3VudCwgdWludDI1NiBfdG9rZW5BbW91bnQpOwogICAgZXZlbnQgTG9nUmVmZXJyYWxBd2FyZChhZGRyZXNzIGluZGV4ZWQgX3JlZmVyZWVXYWxsZXQsIGFkZHJlc3MgaW5kZXhlZCBfcmVmZXJyZXJXYWxsZXQsIHVpbnQyNTYgX3JlZmVycmFsQm9udXNBbW91bnQpOwogICAgZXZlbnQgTG9nVG9rZW5Db2xsZWN0ZWQoYWRkcmVzcyBpbmRleGVkIF9jb250cmlidXRvciwgdWludDI1NiBfY29sbGVjdGVkVG9rZW5BbW91bnQpOwogICAgZXZlbnQgTG9nQ2xpZW50SWRlbnRSZWplY3RMaXN0Q2hhbmdlKGFkZHJlc3MgaW5kZXhlZCBfY29udHJpYnV0b3IsIHVpbnQ4IF9uZXdWYWx1ZSk7CgoKICAgIFRldVRva2VuCQkJICAgICAgICAgICAgICAgIGNvbnN0YW50IHByaXZhdGUJCXRva2VuID0gVGV1VG9rZW4oMHhlRUFjM0Y4ZGExNmJiMDQ4NWE0QTExYzUxMjhiMDUxOERhQzgxNDQ4KTsgLy8gaGFyZCBjb2RlZCBkdWUgdG8gdG9rZW4gYWxyZWFkeSBkZXBsb3llZAogICAgYWRkcmVzcwkJICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnQgcHJpdmF0ZQkJZXRoZXJIb2xkZXJXYWxsZXQgPSAweDAwMjIyRWFEMkQwRjgzQTcxRjY0NWQzZDk2MzQ1OTlFQzgyMjI4MzA7IC8vIGhhcmQgY29kZWQgZHVlIHRvIGRlcGxveW1lbnQgZm9yIG9uY2Ugb25seQogICAgdWludDI1NgkJICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnQgcHJpdmF0ZSAJICAgIG1pbkNvbnRyaWJ1dGlvbiA9IDEwMCBmaW5uZXk7CiAgICB1aW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgICAgICAgICBzYWxlU3RhcnQgPSAxNTIzNDk4NDAwOwogICAgdWludCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljICAgICAgICAgc2FsZUVuZCA9IDE1MjYwOTA0MDA7CiAgICB1aW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdGFudCBwcml2YXRlICAgICAgICBldGhlclRvVG9rZW5Db252ZXJzaW9uUmF0ZSA9IDQwMDsKICAgIHVpbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0YW50IHByaXZhdGUgICAgICAgIHJlZmVycmFsQXdhcmRQZXJjZW50ID0gMjA7CiAgICB1aW50MjU2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdGFudCBwcml2YXRlICAgICAgICBtYXhDb2xsZWN0YWJsZVRva2VuID0gMjAgKiAxMCAqKiA2ICogMTAgKiogMTg7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSAgICAgICAgICAgICAgICBwcml2YXRlICAgICByZWZlcnJhbENvbnRyaWJ1dGlvbjsgIC8vIHJlY29yZCB0aGUgcmVmZXJyYWwgY29udHJpYnV0aW9uIGFtb3VudCBpbiBldGhlciBmb3IgY2xhaW1pbmcgb2YgcmVmZXJyYWwgYm9udXMKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSAgICAgbGFzdENvbnRyaWJpdGlvbkRhdGU7ICAvLyByZWNvcmQgdGhlIGxhc3QgY29udHJpYnV0aW9uIGRhdGUvdGltZSBmb3IgdmFsaWQgdGhlIHJlZmVycmFsIGJvbnVzIGNsYWltaW5nIHBlcmlvZAoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgICAgICAgICAgICAgICAgcHJpdmF0ZSAgICAgY29sbGVjdGFibGVUb2tlbjsgIC8vIHJlY29yZCB0aGUgdG9rZW4gYW1vdW50IHRvIGJlIGNvbGxlY3RlZCBvZiBlYWNoIGNvbnRyaWJ1dG9yCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQ4KSAgICAgICAgICAgICAgICAgIHByaXZhdGUgICAgIGNsaWVudElkZW50UmVqZWN0TGlzdDsgIC8vIHJlY29yZCBhIGxpc3Qgb2YgY29udHJpYnV0b3JzIHdobyBkbyBub3QgcGFzcyB0aGUgY2xpZW50IGlkZW50aWZpY2F0aW9uIHByb2Nlc3MKICAgIGJvb2wgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljICAgICAgaXNDb2xsZWN0VG9rZW5TdGFydCA9IGZhbHNlOyAgLy8gZmxhZyB0byBpbmRpY2F0ZSBpZiB0b2tlbiBjb2xsZWN0aW9uIGlzIHN0YXJ0ZWQKICAgIGJvb2wgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljICAgICAgaXNBbGxvd0NvbnRyaWJ1dGlvbiA9IHRydWU7IC8vIGZsYWcgdG8gZW5hYmxlL2Rpc2FibGUgY29udHJpYnV0aW9uLgogICAgdWludDI1NiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgICAgICB0b3RhbENvbGxlY3RhYmxlVG9rZW47ICAvLyB0aGUgdG90YWwgYW1vdW50IG9mIHRva2VuIHdpbGwgYmUgY29sbGVjZXRlZCBhZnRlciBjb25zaWRlcmluZyBhbGwgdGhlIGNvbnRyaWJ1dGlvbiBhbmQgYm9udXMKCiAgICAvLyAgKioqKiogcHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb25zICoqKioqKioqKioqKioqKgoKICAgIAoKICAgIC8qKgogICAgKiBAZGV2IGdldCB0aGUgY3VycmVudCBkYXRldGltZQogICAgKi8gICAKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnREYXRldGltZSgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgICAgIHJldHVybiBub3c7IAogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IGdldCB0aGUgY3VycmVudCBzYWxlIGRheQogICAgKi8gICAKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRTYWxlRGF5KCkgcHJpdmF0ZSBzYWxlSXNPbiByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIGdldEN1cnJlbnREYXRldGltZSgpLnN1YjI1NihzYWxlU3RhcnQpLmRpdjI1Nig4NjQwMCkuYWRkMjU2KDEpOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IHRvIGdldCB0aGUgdGltZSBib251cyBQZXJjZW50YWdlIGJhc2VkIG9uIHRoZSBuby4gb2Ygc2FsZSBkYXkocykKICAgICogQHBhcmFtIF9kYXlzIG5vIG9mIHNhbGUgZGF5IHRvIGNhbGN1bGF0ZSB0aGUgdGltZSBib251cwogICAgKi8gICAgICAKICAgIGZ1bmN0aW9uIGdldFRpbWVCb251c1BlcmNlbnQodWludCBfZGF5cykgcHJpdmF0ZSBwdXJlIHJldHVybnMgKHVpbnQpIHsKICAgICAgICBpZiAoX2RheXMgPD0gMTApCiAgICAgICAgICAgIHJldHVybiA1MDsKICAgICAgICByZXR1cm4gMDsKICAgIH0KCiAgICAvKioKICAgICogQGRldiB0byBnZXQgdGhlIHZvbHVtbmUgYm9udXMgcGVyY2VudGFnZSBiYXNlZCBvbiB0aGUgZXRoZXIgYW1vdW50IGNvbnRyaWJ1dGVkCiAgICAqIEBwYXJhbSBfZXRoZXJBbW91bnQgZXRoZXIgYW1vdW50IGNvbnRyaWJ1dGVkLgogICAgKi8gICAgICAgICAgCiAgICBmdW5jdGlvbiBnZXRWb2x1bWVCb251c1BlcmNlbnQodWludDI1NiBfZXRoZXJBbW91bnQpIHByaXZhdGUgcHVyZSByZXR1cm5zICh1aW50KSB7CgogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAxIGV0aGVyKQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICBpZiAoX2V0aGVyQW1vdW50IDwgMiBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDM1OwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAzIGV0aGVyKQogICAgICAgICAgICByZXR1cm4gNDA7CiAgICAgICAgaWYgKF9ldGhlckFtb3VudCA8IDQgZXRoZXIpCiAgICAgICAgICAgIHJldHVybiA0NTsKICAgICAgICBpZiAoX2V0aGVyQW1vdW50IDwgNSBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDUwOwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAxMCBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDU1OwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAyMCBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDYwOwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAzMCBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDY1OwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCA0MCBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDcwOwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCA1MCBldGhlcikKICAgICAgICAgICAgcmV0dXJuIDc1OwogICAgICAgIGlmIChfZXRoZXJBbW91bnQgPCAxMDAgZXRoZXIpCiAgICAgICAgICAgIHJldHVybiA4MDsKICAgICAgICBpZiAoX2V0aGVyQW1vdW50IDwgMjAwIGV0aGVyKQogICAgICAgICAgICByZXR1cm4gOTA7CiAgICAgICAgaWYgKF9ldGhlckFtb3VudCA+PSAyMDAgZXRoZXIpCiAgICAgICAgICAgIHJldHVybiAxMDA7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2IHRvIGdldCB0aGUgdGltZSBib251cyBhbW91bnQgZ2l2ZW4gdGhlIHRva2VuIGFtb3VudCB0byBiZSBjb2xsZWN0ZWQgZnJvbSBjb250cmlidXRpb24KICAgICogQHBhcmFtIF90b2tlbkFtb3VudCB0b2tlbiBhbW91bnQgdG8gYmUgY29sbGVjdGVkIGZyb20gY29udHJpYnV0aW9uCiAgICAqLyAKICAgIGZ1bmN0aW9uIGdldFRpbWVCb251c0Ftb3VudCh1aW50MjU2IF90b2tlbkFtb3VudCkgcHJpdmF0ZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b2tlbkFtb3VudC5tdWwyNTYoZ2V0VGltZUJvbnVzUGVyY2VudChnZXRDdXJyZW50U2FsZURheSgpKSkuZGl2MjU2KDEwMCk7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2IHRvIGdldCB0aGUgdm9sdW1lIGJvbnVzIGFtb3VudCBnaXZlbiB0aGUgdG9rZW4gYW1vdW50IHRvIGJlIGNvbGxlY3RlZCBmcm9tIGNvbnRyaWJ1dGlvbiBhbmQgdGhlIGV0aGVyIGFtb3VudCBjb250cmlidXRlZAogICAgKiBAcGFyYW0gX3Rva2VuQW1vdW50IHRva2VuIGFtb3VudCB0byBiZSBjb2xsZWN0ZWQgZnJvbSBjb250cmlidXRpb24KICAgICogQHBhcmFtIF9ldGhlckFtb3VudCBldGhlciBhbW91bnQgY29udHJpYnV0ZWQKICAgICovCiAgICBmdW5jdGlvbiBnZXRWb2x1bWVCb251c0Ftb3VudCh1aW50MjU2IF90b2tlbkFtb3VudCwgdWludDI1NiBfZXRoZXJBbW91bnQpIHByaXZhdGUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfdG9rZW5BbW91bnQubXVsMjU2KGdldFZvbHVtZUJvbnVzUGVyY2VudChfZXRoZXJBbW91bnQpKS5kaXYyNTYoMTAwKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAqIEBkZXYgdG8gZ2V0IHRoZSByZWZlcnJhbCBib251cyBhbW91bnQgZ2l2ZW4gdGhlIGV0aGVyIGFtb3VudCBjb250cmlidXRlZAogICAgKiBAcGFyYW0gX2V0aGVyQW1vdW50IGV0aGVyIGFtb3VudCBjb250cmlidXRlZAogICAgKi8KICAgIGZ1bmN0aW9uIGdldFJlZmVycmFsQm9udXNBbW91bnQodWludDI1NiBfZXRoZXJBbW91bnQpIHByaXZhdGUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfZXRoZXJBbW91bnQubXVsMjU2KGV0aGVyVG9Ub2tlbkNvbnZlcnNpb25SYXRlKS5tdWwyNTYocmVmZXJyYWxBd2FyZFBlcmNlbnQpLmRpdjI1NigxMDApOwogICAgfQogICAgCiAgICAvKioKICAgICogQGRldiB0byBnZXQgdGhlIGJhc2ljIGFtb3VudCBvZiB0b2tlbiB0byBiZSBjb2xsZWN0ZWQgZ2l2ZW4gdGhlIGV0aGVyIGFtb3VudCBjb250cmlidXRlZAogICAgKiBAcGFyYW0gX2V0aGVyQW1vdW50IGV0aGVyIGFtb3VudCBjb250cmlidXRlZAogICAgKi8KICAgIGZ1bmN0aW9uIGdldEJhc2ljVG9rZW5BbW91bnQodWludDI1NiBfZXRoZXJBbW91bnQpIHByaXZhdGUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBfZXRoZXJBbW91bnQubXVsMjU2KGV0aGVyVG9Ub2tlbkNvbnZlcnNpb25SYXRlKTsKICAgIH0KICAKICAKICAgIC8vICoqKioqKiBtb2RpZmllcnMgICoqKioqKioqKioqKgoKICAgIC8qKgogICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGNvbnRyaWJ1dGlvbiBvbmx5IHdoZW4gdGhlIHNhbGUgaXMgT04KICAgICovCiAgICBtb2RpZmllciBzYWxlSXNPbigpIHsKICAgICAgICByZXF1aXJlKGdldEN1cnJlbnREYXRldGltZSgpID49IHNhbGVTdGFydCAmJiBnZXRDdXJyZW50RGF0ZXRpbWUoKSA8IHNhbGVFbmQpOwogICAgICAgIF87CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgbW9kaWZpZXIgdG8gY2hlY2sgaWYgdGhlIHNhbGUgaXMgZW5kZWQKICAgICovICAgIAogICAgbW9kaWZpZXIgc2FsZUlzRW5kKCkgewogICAgICAgIHJlcXVpcmUoZ2V0Q3VycmVudERhdGV0aW1lKCkgPj0gc2FsZUVuZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBtb2RpZmllciB0byBjaGVjayBpZiB0b2tlbiBpcyBjb2xsZWN0YWJsZQogICAgKi8gICAgCiAgICBtb2RpZmllciB0b2tlbklzQ29sbGVjdGFibGUoKSB7CiAgICAgICAgcmVxdWlyZShpc0NvbGxlY3RUb2tlblN0YXJ0KTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAvKioKICAgICogQGRldiBtb2RpZmllciB0byBjaGVjayBpZiBjb250cmlidXRpb24gaXMgb3ZlciB0aGUgbWluLiBjb250cmlidXRpb24gYW1vdW50CiAgICAqLyAgICAKICAgIG1vZGlmaWVyIG92ZXJNaW5Db250cmlidXRpb24odWludDI1NiBfZXRoZXJBbW91bnQpIHsKICAgICAgICByZXF1aXJlKF9ldGhlckFtb3VudCA+PSBtaW5Db250cmlidXRpb24pOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2IG1vZGlmaWVyIHRvIGNoZWNrIGlmIG1heC4gdG9rZW4gcG9vbCBpcyBub3QgcmVhY2hlZAogICAgKi8KICAgIG1vZGlmaWVyIHVuZGVyTWF4VG9rZW5Qb29sKCkgewogICAgICAgIHJlcXVpcmUobWF4Q29sbGVjdGFibGVUb2tlbiA+IHRvdGFsQ29sbGVjdGFibGVUb2tlbik7CiAgICAgICAgXzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBtb2RpZmllciB0byBjaGVjayBpZiBjb250cmlidXRpb24gaXMgYWxsb3dlZAogICAgKi8KICAgIG1vZGlmaWVyIGNvbnRyaWJ1dGlvbkFsbG93ZWQoKSB7CiAgICAgICAgcmVxdWlyZShpc0FsbG93Q29udHJpYnV0aW9uKTsKICAgICAgICBfOwogICAgfQoKCiAgICAvLyAgKioqKiogcHVibGljIHRyYW5zYWN0aW9uYWwgZnVuY3Rpb25zICoqKioqKioqKioqKioqKgogICAgLyoqCiAgICAqIEBkZXYgY2FsbGVkIGJ5IG93bmVyIHRvIHNldCB0aGUgbmV3IHNhbGUgc3RhcnQgZGF0ZS90aW1lIAogICAgKiBAcGFyYW0gX25ld1N0YXJ0IG5ldyBzdGFydCBkYXRlL3RpbWUKICAgICovCiAgICBmdW5jdGlvbiBzZXROZXdTdGFydCh1aW50IF9uZXdTdGFydCkgcHVibGljIG9ubHlPd25lciB7CglyZXF1aXJlKHNhbGVTdGFydCA+IGdldEN1cnJlbnREYXRldGltZSgpKTsKICAgICAgICByZXF1aXJlKF9uZXdTdGFydCA+IGdldEN1cnJlbnREYXRldGltZSgpKTsKCXJlcXVpcmUoc2FsZUVuZCA+IF9uZXdTdGFydCk7CiAgICAgICAgc2FsZVN0YXJ0ID0gX25ld1N0YXJ0OwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IGNhbGxlZCBieSBvd25lciB0byBzZXQgdGhlIG5ldyBzYWxlIGVuZCBkYXRlL3RpbWUgCiAgICAqIEBwYXJhbSBfbmV3RW5kIG5ldyBlbmQgZGF0ZS90aW1lCiAgICAqLwogICAgZnVuY3Rpb24gc2V0TmV3RW5kKHVpbnQgX25ld0VuZCkgcHVibGljIG9ubHlPd25lciB7CglyZXF1aXJlKHNhbGVFbmQgPCBnZXRDdXJyZW50RGF0ZXRpbWUoKSk7CiAgICAgICAgcmVxdWlyZShfbmV3RW5kIDwgZ2V0Q3VycmVudERhdGV0aW1lKCkpOwoJcmVxdWlyZShfbmV3RW5kID4gc2FsZVN0YXJ0KTsKICAgICAgICBzYWxlRW5kID0gX25ld0VuZDsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBjYWxsZWQgYnkgb3duZXIgdG8gZW5hYmxlIC8gZGlzYWJsZSBjb250cmlidXRpb24gCiAgICAqIEBwYXJhbSBfaXNBbGxvdyB0cnVlIC0gYWxsb3cgY29udHJpYnV0aW9uOyBmYWxzZSAtIGRpc2FsbG93IGNvbnRyaWJ1dGlvbgogICAgKi8KICAgIGZ1bmN0aW9uIGVuYWJsZUNvbnRyaWJ1dGlvbihib29sIF9pc0FsbG93KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBpc0FsbG93Q29udHJpYnV0aW9uID0gX2lzQWxsb3c7CiAgICB9CgoKICAgIC8qKgogICAgKiBAZGV2IGNhbGxlZCBieSBjb250cmlidXRvcnMgdG8gcmVjb3JkIGEgY29udHJpYnV0aW9uIAogICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRyaWJ1dGUoKSBwdWJsaWMgcGF5YWJsZSBzYWxlSXNPbiBvdmVyTWluQ29udHJpYnV0aW9uKG1zZy52YWx1ZSkgdW5kZXJNYXhUb2tlblBvb2wgY29udHJpYnV0aW9uQWxsb3dlZCB7CiAgICAgICAgdWludDI1NiBfYmFzaWNUb2tlbiA9IGdldEJhc2ljVG9rZW5BbW91bnQobXNnLnZhbHVlKTsKICAgICAgICB1aW50MjU2IF90aW1lQm9udXMgPSBnZXRUaW1lQm9udXNBbW91bnQoX2Jhc2ljVG9rZW4pOwogICAgICAgIHVpbnQyNTYgX3ZvbHVtZUJvbnVzID0gZ2V0Vm9sdW1lQm9udXNBbW91bnQoX2Jhc2ljVG9rZW4sIG1zZy52YWx1ZSk7CiAgICAgICAgdWludDI1NiBfdG90YWxUb2tlbiA9IF9iYXNpY1Rva2VuLmFkZDI1NihfdGltZUJvbnVzKS5hZGQyNTYoX3ZvbHVtZUJvbnVzKTsKICAgICAgICAKICAgICAgICBsYXN0Q29udHJpYml0aW9uRGF0ZVttc2cuc2VuZGVyXSA9IGdldEN1cnJlbnREYXRldGltZSgpOwogICAgICAgIHJlZmVycmFsQ29udHJpYnV0aW9uW21zZy5zZW5kZXJdID0gcmVmZXJyYWxDb250cmlidXRpb25bbXNnLnNlbmRlcl0uYWRkMjU2KG1zZy52YWx1ZSk7CiAgICAgICAgCiAgICAgICAgY29sbGVjdGFibGVUb2tlblttc2cuc2VuZGVyXSA9IGNvbGxlY3RhYmxlVG9rZW5bbXNnLnNlbmRlcl0uYWRkMjU2KF90b3RhbFRva2VuKTsKICAgICAgICB0b3RhbENvbGxlY3RhYmxlVG9rZW4gPSB0b3RhbENvbGxlY3RhYmxlVG9rZW4uYWRkMjU2KF90b3RhbFRva2VuKTsKICAgICAgICBhc3NlcnQoZXRoZXJIb2xkZXJXYWxsZXQuc2VuZChtc2cudmFsdWUpKTsKCiAgICAgICAgTG9nQ29udHJpYnV0aW9uKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgX2Jhc2ljVG9rZW4sIF90aW1lQm9udXMsIF92b2x1bWVCb251cyk7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgY2FsbGVkIGJ5IGNvbnRyYWN0IG93bmVyIHRvIHJlY29yZCBhIG9mZiBjaGFpbiBjb250cmlidXRpb24gYnkgQml0Y29pbi4gVGhlIHRva2VuIGNvbGxlY3Rpb24gcHJvY2VzcyBpcyB0aGUgc2FtZSBhcyB0aG9zZSBldGhlciBjb250cmlidXRvcnMKICAgICogQHBhcmFtIF9iaXRjb2luQW1vdW50IGJpdGNvaW4gYW1vdW50IGNvbnRyaWJ1dGVkCiAgICAqIEBwYXJhbSBfZXRoZXJBbW91bnQgZXRoZXIgZXF1aXZhbGVudCBhbW91bnQgY29udHJpYnV0ZWQKICAgICogQHBhcmFtIF9jb250cmlidXRvcldhbGxldCB3YWxsZXQgYWRkcmVzcyBvZiBjb250cmlidXRvciB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIHRva2VuIGNvbGxlY3Rpb24KICAgICogQHBhcmFtIF9jb250cmlidXRpb25EYXRldGltZSBkYXRlL3RpbWUgb2YgY29udHJpYnV0aW9uLiBGb3IgY2FsY3VsYXRpbmcgdGltZSBib251cyBhbmQgY2xhaW1pbmcgcmVmZXJyYWwgYm9udXMuCiAgICAqLwogICAgZnVuY3Rpb24gY29udHJpYnV0ZUJ5Qml0Y29pbih1aW50MjU2IF9iaXRjb2luQW1vdW50LCB1aW50MjU2IF9ldGhlckFtb3VudCwgYWRkcmVzcyBfY29udHJpYnV0b3JXYWxsZXQsIHVpbnQgX2NvbnRyaWJ1dGlvbkRhdGV0aW1lKSBwdWJsaWMgb3Zlck1pbkNvbnRyaWJ1dGlvbihfZXRoZXJBbW91bnQpIG9ubHlPd25lciBjb250cmlidXRpb25BbGxvd2VkIHsKICAgICAgICByZXF1aXJlKF9jb250cmlidXRpb25EYXRldGltZSA8PSBnZXRDdXJyZW50RGF0ZXRpbWUoKSk7CgogICAgICAgIHVpbnQyNTYgX2Jhc2ljVG9rZW4gPSBnZXRCYXNpY1Rva2VuQW1vdW50KF9ldGhlckFtb3VudCk7CiAgICAgICAgdWludDI1NiBfdGltZUJvbnVzID0gZ2V0VGltZUJvbnVzQW1vdW50KF9iYXNpY1Rva2VuKTsKICAgICAgICB1aW50MjU2IF92b2x1bWVCb251cyA9IGdldFZvbHVtZUJvbnVzQW1vdW50KF9iYXNpY1Rva2VuLCBfZXRoZXJBbW91bnQpOwogICAgICAgIHVpbnQyNTYgX3RvdGFsVG9rZW4gPSBfYmFzaWNUb2tlbi5hZGQyNTYoX3RpbWVCb251cykuYWRkMjU2KF92b2x1bWVCb251cyk7CiAgICAgICAgCgkgICAgaWYgKF9jb250cmlidXRpb25EYXRldGltZSA+IGxhc3RDb250cmliaXRpb25EYXRlW19jb250cmlidXRvcldhbGxldF0pCiAgICAgICAgICAgIGxhc3RDb250cmliaXRpb25EYXRlW19jb250cmlidXRvcldhbGxldF0gPSBfY29udHJpYnV0aW9uRGF0ZXRpbWU7CiAgICAgICAgcmVmZXJyYWxDb250cmlidXRpb25bX2NvbnRyaWJ1dG9yV2FsbGV0XSA9IHJlZmVycmFsQ29udHJpYnV0aW9uW19jb250cmlidXRvcldhbGxldF0uYWRkMjU2KF9ldGhlckFtb3VudCk7CiAgICAKICAgICAgICBjb2xsZWN0YWJsZVRva2VuW19jb250cmlidXRvcldhbGxldF0gPSBjb2xsZWN0YWJsZVRva2VuW19jb250cmlidXRvcldhbGxldF0uYWRkMjU2KF90b3RhbFRva2VuKTsKICAgICAgICB0b3RhbENvbGxlY3RhYmxlVG9rZW4gPSB0b3RhbENvbGxlY3RhYmxlVG9rZW4uYWRkMjU2KF90b3RhbFRva2VuKTsKICAgICAgICBMb2dDb250cmlidXRpb25CaXRjb2luKF9jb250cmlidXRvcldhbGxldCwgX2JpdGNvaW5BbW91bnQsIF9ldGhlckFtb3VudCwgX2Jhc2ljVG9rZW4sIF90aW1lQm9udXMsIF92b2x1bWVCb251cywgX2NvbnRyaWJ1dGlvbkRhdGV0aW1lKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAqIEBkZXYgY2FsbGVkIGJ5IGNvbnRyYWN0IG93bmVyIHRvIHJlY29yZCBhIG9mZiBjaGFpbiBjb250cmlidXRpb24gYnkgRXRoZXIuIFRoZSB0b2tlbiBhcmUgZGlzdHJpYnV0ZWQgb2ZmIGNoYWluIGFscmVhZHkuICBUaGUgY29udHJpYnV0b3IgY2FuIG9ubHkgZW50aXRsZSByZWZlcnJhbCBib251cyB0aHJvdWdoIHRoaXMgc21hcnQgY29udHJhY3QKICAgICogQHBhcmFtIF9ldGhlckFtb3VudCBldGhlciBlcXVpdmFsZW50IGFtb3VudCBjb250cmlidXRlZAogICAgKiBAcGFyYW0gX2NvbnRyaWJ1dG9yV2FsbGV0IHdhbGxldCBhZGRyZXNzIG9mIGNvbnRyaWJ1dG9yIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgcmVmZXJyYWwgYm9udXMgY29sbGVjdGlvbgogICAgKiBAcGFyYW0gX3Rva2VuQW1vdW50IGFtdW50IG9mIHRva2VuIGRpc3RyaWJ1dGVkIHRvIHRoZSBjb250cmlidXRvci4gRm9yIHJlZmVyZW5jZSBvbmx5IGluIHRoZSBldmVudCBsb2cKICAgICovCiAgICBmdW5jdGlvbiByZWNvcmRPZmZDaGFpbkNvbnRyaWJ1dGUodWludDI1NiBfZXRoZXJBbW91bnQsIGFkZHJlc3MgX2NvbnRyaWJ1dG9yV2FsbGV0LCB1aW50MjU2IF90b2tlbkFtb3VudCkgcHVibGljIG92ZXJNaW5Db250cmlidXRpb24oX2V0aGVyQW1vdW50KSBvbmx5T3duZXIgewoKICAgICAgICBsYXN0Q29udHJpYml0aW9uRGF0ZVtfY29udHJpYnV0b3JXYWxsZXRdID0gZ2V0Q3VycmVudERhdGV0aW1lKCk7CiAgICAgICAgTG9nT2ZmQ2hhaW5Db250cmlidXRpb24oX2NvbnRyaWJ1dG9yV2FsbGV0LCBfZXRoZXJBbW91bnQsIF90b2tlbkFtb3VudCk7CiAgICB9ICAgIAoKICAgIC8qKgogICAgKiBAZGV2IGNhbGxlZCBieSBjb250cmlidXRvciB0byBjbGFpbSB0aGUgcmVmZXJyYWwgYm9udXMKICAgICogQHBhcmFtIF9yZWZlcnJlcldhbGxldCB3YWxsZXQgYWRkcmVzcyBvZiByZWZlcnJlci4gIFJlZmVycmVyIG11c3QgYWxzbyBiZSBhIGNvbnRyaWJ1dG9yCiAgICAqLwogICAgZnVuY3Rpb24gcmVmZXJyYWwoYWRkcmVzcyBfcmVmZXJyZXJXYWxsZXQpIHB1YmxpYyB7CglyZXF1aXJlIChtc2cuc2VuZGVyICE9IF9yZWZlcnJlcldhbGxldCk7CiAgICAgICAgcmVxdWlyZSAocmVmZXJyYWxDb250cmlidXRpb25bbXNnLnNlbmRlcl0gPiAwKTsKICAgICAgICByZXF1aXJlIChsYXN0Q29udHJpYml0aW9uRGF0ZVtfcmVmZXJyZXJXYWxsZXRdID4gMCk7CiAgICAgICAgcmVxdWlyZSAoZ2V0Q3VycmVudERhdGV0aW1lKCkgLSBsYXN0Q29udHJpYml0aW9uRGF0ZVttc2cuc2VuZGVyXSA8PSAoNCAqIDI0ICogNjAgKiA2MCkpOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgX3JlZmVycmFsQm9udXMgPSBnZXRSZWZlcnJhbEJvbnVzQW1vdW50KHJlZmVycmFsQ29udHJpYnV0aW9uW21zZy5zZW5kZXJdKTsKICAgICAgICByZWZlcnJhbENvbnRyaWJ1dGlvblttc2cuc2VuZGVyXSA9IDA7CiAgICAgICAgCiAgICAgICAgY29sbGVjdGFibGVUb2tlblttc2cuc2VuZGVyXSA9IGNvbGxlY3RhYmxlVG9rZW5bbXNnLnNlbmRlcl0uYWRkMjU2KF9yZWZlcnJhbEJvbnVzKTsKICAgICAgICBjb2xsZWN0YWJsZVRva2VuW19yZWZlcnJlcldhbGxldF0gPSBjb2xsZWN0YWJsZVRva2VuW19yZWZlcnJlcldhbGxldF0uYWRkMjU2KF9yZWZlcnJhbEJvbnVzKTsKICAgICAgICB0b3RhbENvbGxlY3RhYmxlVG9rZW4gPSB0b3RhbENvbGxlY3RhYmxlVG9rZW4uYWRkMjU2KF9yZWZlcnJhbEJvbnVzKS5hZGQyNTYoX3JlZmVycmFsQm9udXMpOwogICAgICAgIExvZ1JlZmVycmFsQXdhcmQobXNnLnNlbmRlciwgX3JlZmVycmVyV2FsbGV0LCBfcmVmZXJyYWxCb251cyk7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2IGNhbGxlZCBieSBjb250cmFjdCBvd2VuZXIgdG8gcmVnaXN0ZXIgYSBsaXN0IG9mIHJlamVjdGVkIGNsaWVudHMgd2hvIGNhbm5vdCBwYXNzIHRoZSBjbGllbnQgaWRlbnRpZmljYXRpb24gcHJvY2Vzcy4KICAgICogQHBhcmFtIF9jbGllbnRzIGFuIGFycmF5IG9mIHdhbGxldCBhZGRyZXNzIGNsaWVudHMgdG8gYmUgc2V0CiAgICAqIEBwYXJhbSBfdmFsdWVUb1NldCAgMSAtIGFkZCB0byByZWplY3QgbGlzdCwgMCAtIHJlbW92ZSBmcm9tIHJlamVjdCBsaXN0CiAgICAqLwogICAgZnVuY3Rpb24gc2V0Q2xpZW50SWRlbnRSZWplY3RMaXN0KGFkZHJlc3NbXSBfY2xpZW50cywgdWludDggX3ZhbHVlVG9TZXQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9jbGllbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChfY2xpZW50c1tpXSAhPSBhZGRyZXNzKDApICYmIGNsaWVudElkZW50UmVqZWN0TGlzdFtfY2xpZW50c1tpXV0gIT0gX3ZhbHVlVG9TZXQpIHsKICAgICAgICAgICAgICAgIGNsaWVudElkZW50UmVqZWN0TGlzdFtfY2xpZW50c1tpXV0gPSBfdmFsdWVUb1NldDsKICAgICAgICAgICAgICAgIExvZ0NsaWVudElkZW50UmVqZWN0TGlzdENoYW5nZShfY2xpZW50c1tpXSwgX3ZhbHVlVG9TZXQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKioKICAgICogQGRldiBjYWxsZWQgYnkgY29udHJhY3Qgb3duZXIgdG8gZW5hYmxlIC8gZGlzYWJsZSB0b2tlbiBjb2xsZWN0aW9uIHByb2Nlc3MKICAgICogQHBhcmFtIF9lbmFibGUgdHJ1ZSAtIGVuYWJsZSBjb2xsZWN0aW9uOyBmYWxzZSAtIGRpc2FibGUgY29sbGVjdGlvbgogICAgKi8KICAgIGZ1bmN0aW9uIHNldFRva2VuQ29sbGVjdGFibGUoYm9vbCBfZW5hYmxlKSBwdWJsaWMgb25seU93bmVyIHNhbGVJc0VuZCB7CiAgICAgICAgaXNDb2xsZWN0VG9rZW5TdGFydCA9IF9lbmFibGU7CiAgICB9CiAgICAKICAgIC8qKgogICAgKiBAZGV2IGNhbGxlZCBieSBjb250cmlidXRvciB0byBjb2xsZWN0IHRva2Vucy4gIElmIHRoZXkgYXJlIHJlamVjdGVkIGJ5IHRoZSBjbGllbnQgaWRlbnRpZmljYXRpb24gcHJvY2VzcywgZXJyb3Igd2lsbCBiZSB0aHJvd24KICAgICovCiAgICBmdW5jdGlvbiBjb2xsZWN0VG9rZW4oKSBwdWJsaWMgdG9rZW5Jc0NvbGxlY3RhYmxlIHsKCXVpbnQyNTYgX2NvbGxUb2tlbiA9IGNvbGxlY3RhYmxlVG9rZW5bbXNnLnNlbmRlcl07CgoJcmVxdWlyZShjbGllbnRJZGVudFJlamVjdExpc3RbbXNnLnNlbmRlcl0gPD0gMCk7CiAgICAgICAgcmVxdWlyZShfY29sbFRva2VuID4gMCk7CgogICAgICAgIGNvbGxlY3RhYmxlVG9rZW5bbXNnLnNlbmRlcl0gPSAwOwoKICAgICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBfY29sbFRva2VuKTsKICAgICAgICBMb2dUb2tlbkNvbGxlY3RlZChtc2cuc2VuZGVyLCBfY29sbFRva2VuKTsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBBbGxvdyBvd25lciB0byB0cmFuc2ZlciBvdXQgdGhlIHRva2VuIGxlZnQgaW4gdGhlIGNvbnRyYWN0CiAgICAqIEBwYXJhbSBfdG8gYWRkcmVzcyB0byB0cmFuc2ZlciB0bwogICAgKiBAcGFyYW0gX2Ftb3VudCBhbW91bnQgdG8gdHJhbnNmZXIKICAgICovICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9rZW5PdXQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KTsKICAgIH0KICAgIAogICAgLyoqCiAgICAqIEBkZXYgQWxsb3cgb3duZXIgdG8gdHJhbnNmZXIgb3V0IHRoZSBldGhlciBsZWZ0IGluIHRoZSBjb250cmFjdAogICAgKiBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gdHJhbnNmZXIgdG8KICAgICogQHBhcmFtIF9hbW91bnQgYW1vdW50IHRvIHRyYW5zZmVyCiAgICAqLyAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlckV0aGVyT3V0KGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgewogICAgICAgIGFzc2VydChfdG8uc2VuZChfYW1vdW50KSk7CiAgICB9ICAKICAgIAoKICAgIC8vICAqKioqKiBwdWJsaWMgY29uc3RhbnQgZnVuY3Rpb25zICoqKioqKioqKioqKioqKgoKICAgIC8qKgogICAgKiBAZGV2IHRvIGdldCB0aGUgYW1vdW50IG9mIHRva2VuIGNvbGxlY3RhYmxlIGJ5IGFueSBjb250cmlidXRvcgogICAgKiBAcGFyYW0gX2NvbnRyaWJ1dG9yIGNvbnRyaWJ1dG9yIHRvIGdldCBhbW9udAogICAgKi8gIAogICAgZnVuY3Rpb24gY29sbGVjdGFibGVUb2tlbk9mKGFkZHJlc3MgX2NvbnRyaWJ1dG9yKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBjb2xsZWN0YWJsZVRva2VuW19jb250cmlidXRvcl0gOwogICAgfQogICAgCiAgICAvKioKICAgICogQGRldiB0byBnZXQgdGhlIGFtb3VudCBvZiB0b2tlbiBjb2xsZWN0YWJsZSBieSBhbnkgY29udHJpYnV0b3IKICAgICogQHBhcmFtIF9jb250cmlidXRvciBjb250cmlidXRvciB0byBnZXQgYW1vbnQKICAgICovICAKICAgIGZ1bmN0aW9uIGlzQ2xpZW50SWRlbnRSZWplY3RlZE9mKGFkZHJlc3MgX2NvbnRyaWJ1dG9yKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsKICAgICAgICByZXR1cm4gY2xpZW50SWRlbnRSZWplY3RMaXN0W19jb250cmlidXRvcl07CiAgICB9ICAgIAogICAgCiAgICAvKioKICAgICogQGRldiBGYWxsYmFjayBmdW5jdGlvbiB3aGljaCByZWNlaXZlcyBldGhlciBhbmQgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSBudW1iZXIgb2YgdG9rZW5zIGZvciB0aGUgCiAgICAqIG1zZy5zZW5kZXIuCiAgICAqLwogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICBjb250cmlidXRlKCk7CiAgICB9Cgp9'.
	

]
