Class {
	#name : #SRTcb504e6590f78acd9aa1fbff6c749124facb56a6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcb504e6590f78acd9aa1fbff6c749124facb56a6 >> base64 [
	^ ''.
	

]
