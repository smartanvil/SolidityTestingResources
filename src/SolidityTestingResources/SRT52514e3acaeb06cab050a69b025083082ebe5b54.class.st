Class {
	#name : #SRT52514e3acaeb06cab050a69b025083082ebe5b54,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT52514e3acaeb06cab050a69b025083082ebe5b54 >> base64 [
	^ ''.
	

]
