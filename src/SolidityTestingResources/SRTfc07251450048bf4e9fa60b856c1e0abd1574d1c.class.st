Class {
	#name : #SRTfc07251450048bf4e9fa60b856c1e0abd1574d1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfc07251450048bf4e9fa60b856c1e0abd1574d1c >> base64 [
	^ ''.
	

]
