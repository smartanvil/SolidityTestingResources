Class {
	#name : #SRTf5dffdeaea54bb56156b47de1c7b4346c7dba69c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf5dffdeaea54bb56156b47de1c7b4346c7dba69c >> base64 [
	^ ''.
	

]
