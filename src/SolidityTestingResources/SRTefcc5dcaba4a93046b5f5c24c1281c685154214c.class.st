Class {
	#name : #SRTefcc5dcaba4a93046b5f5c24c1281c685154214c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTefcc5dcaba4a93046b5f5c24c1281c685154214c >> base64 [
	^ ''.
	

]
