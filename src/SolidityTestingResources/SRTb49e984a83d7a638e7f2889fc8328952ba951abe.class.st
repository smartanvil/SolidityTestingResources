Class {
	#name : #SRTb49e984a83d7a638e7f2889fc8328952ba951abe,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb49e984a83d7a638e7f2889fc8328952ba951abe >> base64 [
	^ ''.
	

]
