Class {
	#name : #SRT44cdebe3093919c94ddba3d77dcef8f0836a09d1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT44cdebe3093919c94ddba3d77dcef8f0836a09d1 >> base64 [
	^ ''.
	

]
