Class {
	#name : #SRT148f0e531ff26c25aa9fced6dc660eb60d74d018,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT148f0e531ff26c25aa9fced6dc660eb60d74d018 >> base64 [
	^ ''.
	

]
