Class {
	#name : #SRT95c2906debbb9203ff7007f26c2f00a936c77b5d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT95c2906debbb9203ff7007f26c2f00a936c77b5d >> base64 [
	^ ''.
	

]
