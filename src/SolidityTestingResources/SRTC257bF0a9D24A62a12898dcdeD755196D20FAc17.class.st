Class {
	#name : #SRTC257bF0a9D24A62a12898dcdeD755196D20FAc17,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTC257bF0a9D24A62a12898dcdeD755196D20FAc17 >> base64 [
	^ ''.
	

]
