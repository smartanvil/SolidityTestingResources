Class {
	#name : #SRTa1a156f6ef22f13f6fbaf8e1d11c7bf26402bd2a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa1a156f6ef22f13f6fbaf8e1d11c7bf26402bd2a >> base64 [
	^ ''.
	

]
