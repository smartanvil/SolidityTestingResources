Class {
	#name : #SRT00bbe94541b9c62aa09e59e55af5a6a22c16f2cc,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT00bbe94541b9c62aa09e59e55af5a6a22c16f2cc >> base64 [
	^ ''.
	

]
