Class {
	#name : #SRTf9ad45ab49ba5583728da619305ad126e4675416,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf9ad45ab49ba5583728da619305ad126e4675416 >> base64 [
	^ ''.
	

]
