Class {
	#name : #SRT66416D0f07b0CF1CD423b001f181E511F94689c8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT66416D0f07b0CF1CD423b001f181E511F94689c8 >> base64 [
	^ ''.
	

]
