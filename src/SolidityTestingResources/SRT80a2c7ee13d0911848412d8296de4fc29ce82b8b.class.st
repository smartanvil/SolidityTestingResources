Class {
	#name : #SRT80a2c7ee13d0911848412d8296de4fc29ce82b8b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT80a2c7ee13d0911848412d8296de4fc29ce82b8b >> base64 [
	^ ''.
	

]
