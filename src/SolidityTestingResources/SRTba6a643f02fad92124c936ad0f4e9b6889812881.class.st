Class {
	#name : #SRTba6a643f02fad92124c936ad0f4e9b6889812881,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTba6a643f02fad92124c936ad0f4e9b6889812881 >> base64 [
	^ ''.
	

]
