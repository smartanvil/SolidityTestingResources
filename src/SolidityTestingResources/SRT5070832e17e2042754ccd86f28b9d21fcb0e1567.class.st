Class {
	#name : #SRT5070832e17e2042754ccd86f28b9d21fcb0e1567,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5070832e17e2042754ccd86f28b9d21fcb0e1567 >> base64 [
	^ ''.
	

]
