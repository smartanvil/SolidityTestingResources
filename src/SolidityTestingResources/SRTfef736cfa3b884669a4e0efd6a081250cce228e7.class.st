Class {
	#name : #SRTfef736cfa3b884669a4e0efd6a081250cce228e7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTfef736cfa3b884669a4e0efd6a081250cce228e7 >> base64 [
	^ ''.
	

]
