Class {
	#name : #SRTe67907329dafd1ff826523e3f491bec8733f7376,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe67907329dafd1ff826523e3f491bec8733f7376 >> base64 [
	^ ''.
	

]
