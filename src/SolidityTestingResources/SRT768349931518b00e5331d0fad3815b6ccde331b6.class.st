Class {
	#name : #SRT768349931518b00e5331d0fad3815b6ccde331b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT768349931518b00e5331d0fad3815b6ccde331b6 >> base64 [
	^ ''.
	

]
