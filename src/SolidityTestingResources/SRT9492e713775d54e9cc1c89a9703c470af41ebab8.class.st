Class {
	#name : #SRT9492e713775d54e9cc1c89a9703c470af41ebab8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9492e713775d54e9cc1c89a9703c470af41ebab8 >> base64 [
	^ ''.
	

]
