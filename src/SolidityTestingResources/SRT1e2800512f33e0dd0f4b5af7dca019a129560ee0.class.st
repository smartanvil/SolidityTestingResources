Class {
	#name : #SRT1e2800512f33e0dd0f4b5af7dca019a129560ee0,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e2800512f33e0dd0f4b5af7dca019a129560ee0 >> base64 [
	^ ''.
	

]
