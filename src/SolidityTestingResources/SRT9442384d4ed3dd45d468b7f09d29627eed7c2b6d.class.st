Class {
	#name : #SRT9442384d4ed3dd45d468b7f09d29627eed7c2b6d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9442384d4ed3dd45d468b7f09d29627eed7c2b6d >> base64 [
	^ ''.
	

]
