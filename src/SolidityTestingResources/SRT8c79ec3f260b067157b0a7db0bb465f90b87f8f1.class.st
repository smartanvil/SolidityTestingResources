Class {
	#name : #SRT8c79ec3f260b067157b0a7db0bb465f90b87f8f1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8c79ec3f260b067157b0a7db0bb465f90b87f8f1 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7CgovKioKICogQHRpdGxlIFNhZmVNYXRoCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiA8PSBhKTsKICAgIHJldHVybiBhIC0gYjsKICB9CgogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgdWludDI1NiBjID0gYSArIGI7CiAgICBhc3NlcnQoYyA+PSBhKTsKICAgIHJldHVybiBjOwogIH0KfQoKY29udHJhY3QgQ29udHJvbGxlZCB7CiAgICAvLy8gQG5vdGljZSBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJvbGxlciBpcyB0aGUgb25seSBhZGRyZXNzIHRoYXQgY2FuIGNhbGwKICAgIC8vLyAgYSBmdW5jdGlvbiB3aXRoIHRoaXMgbW9kaWZpZXIKICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGNvbnRyb2xsZXIpOyBfOyB9CgogICAgYWRkcmVzcyBwdWJsaWMgY29udHJvbGxlcjsKCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgcHVibGljIHsgY29udHJvbGxlciA9IG1zZy5zZW5kZXI7fQoKICAgIC8vLyBAbm90aWNlIENoYW5nZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGNvbnRyYWN0CiAgICAvLy8gQHBhcmFtIF9uZXdDb250cm9sbGVyIFRoZSBuZXcgY29udHJvbGxlciBvZiB0aGUgY29udHJhY3QKICAgIGZ1bmN0aW9uIGNoYW5nZUNvbnRyb2xsZXIoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgcHVibGljIG9ubHlDb250cm9sbGVyIHsKICAgICAgICBjb250cm9sbGVyID0gX25ld0NvbnRyb2xsZXI7CiAgICB9Cn0KCi8qCiAgICBDb3B5cmlnaHQgMjAxNiwgSm9yZGkgQmF5bGluYQoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCiAqLwoKLy8vIEB0aXRsZSBNaW5pTWVUb2tlbiBDb250cmFjdAovLy8gQGF1dGhvciBKb3JkaSBCYXlsaW5hCi8vLyBAZGV2IFRoaXMgdG9rZW4gY29udHJhY3QncyBnb2FsIGlzIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIGNsb25lIHRoaXMKLy8vICB0b2tlbiB1c2luZyB0aGUgdG9rZW4gZGlzdHJpYnV0aW9uIGF0IGEgZ2l2ZW4gYmxvY2ssIHRoaXMgd2lsbCBhbGxvdyBEQU8ncwovLy8gIGFuZCBEQXBwcyB0byB1cGdyYWRlIHRoZWlyIGZlYXR1cmVzIGluIGEgZGVjZW50cmFsaXplZCBtYW5uZXIgd2l0aG91dAovLy8gIGFmZmVjdGluZyB0aGUgb3JpZ2luYWwgdG9rZW4KLy8vIEBkZXYgSXQgaXMgRVJDMjAgY29tcGxpYW50LCBidXQgc3RpbGwgbmVlZHMgdG8gdW5kZXIgZ28gZnVydGhlciB0ZXN0aW5nLgoKY29udHJhY3QgQXBwcm92ZUFuZENhbGxGYWxsQmFjayB7CiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBmcm9tLCB1aW50MjU2IF9hbW91bnQsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZGF0YSkgcHVibGljOwp9CgovLy8gQGRldiBUaGUgYWN0dWFsIHRva2VuIGNvbnRyYWN0LCB0aGUgZGVmYXVsdCBjb250cm9sbGVyIGlzIHRoZSBtc2cuc2VuZGVyCi8vLyAgdGhhdCBkZXBsb3lzIHRoZSBjb250cmFjdCwgc28gdXN1YWxseSB0aGlzIHRva2VuIHdpbGwgYmUgZGVwbG95ZWQgYnkgYQovLy8gIHRva2VuIGNvbnRyb2xsZXIgY29udHJhY3QsIHdoaWNoIEdpdmV0aCB3aWxsIGNhbGwgYSAiQ2FtcGFpZ24iCmNvbnRyYWN0IE1pbmlNZVRva2VuIGlzIENvbnRyb2xsZWQgewoKICAgIHN0cmluZyBwdWJsaWMgbmFtZTsgICAgICAgICAgICAgICAgLy9UaGUgVG9rZW4ncyBuYW1lOiBlLmcuIERpZ2l4REFPIFRva2VucwogICAgdWludDggcHVibGljIGRlY2ltYWxzOyAgICAgICAgICAgICAvL051bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7ICAgICAgICAgICAgICAvL0FuIGlkZW50aWZpZXI6IGUuZy4gUkVQCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnTU1UXzAuMic7IC8vQW4gYXJiaXRyYXJ5IHZlcnNpb25pbmcgc2NoZW1lCgoKICAgIC8vLyBAZGV2IGBDaGVja3BvaW50YCBpcyB0aGUgc3RydWN0dXJlIHRoYXQgYXR0YWNoZXMgYSBibG9jayBudW1iZXIgdG8gYQogICAgLy8vICBnaXZlbiB2YWx1ZSwgdGhlIGJsb2NrIG51bWJlciBhdHRhY2hlZCBpcyB0aGUgb25lIHRoYXQgbGFzdCBjaGFuZ2VkIHRoZQogICAgLy8vICB2YWx1ZQogICAgc3RydWN0ICBDaGVja3BvaW50IHsKCiAgICAgICAgLy8gYGZyb21CbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZSB2YWx1ZSB3YXMgZ2VuZXJhdGVkIGZyb20KICAgICAgICB1aW50MTI4IGZyb21CbG9jazsKCiAgICAgICAgLy8gYHZhbHVlYCBpcyB0aGUgYW1vdW50IG9mIHRva2VucyBhdCBhIHNwZWNpZmljIGJsb2NrIG51bWJlcgogICAgICAgIHVpbnQxMjggdmFsdWU7CiAgICB9CgogICAgLy8gYHBhcmVudFRva2VuYCBpcyB0aGUgVG9rZW4gYWRkcmVzcyB0aGF0IHdhcyBjbG9uZWQgdG8gcHJvZHVjZSB0aGlzIHRva2VuOwogICAgLy8gIGl0IHdpbGwgYmUgMHgwIGZvciBhIHRva2VuIHRoYXQgd2FzIG5vdCBjbG9uZWQKICAgIE1pbmlNZVRva2VuIHB1YmxpYyBwYXJlbnRUb2tlbjsKCiAgICAvLyBgcGFyZW50U25hcFNob3RCbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciBmcm9tIHRoZSBQYXJlbnQgVG9rZW4gdGhhdCB3YXMKICAgIC8vICB1c2VkIHRvIGRldGVybWluZSB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIENsb25lIFRva2VuCiAgICB1aW50IHB1YmxpYyBwYXJlbnRTbmFwU2hvdEJsb2NrOwoKICAgIC8vIGBjcmVhdGlvbkJsb2NrYCBpcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIENsb25lIFRva2VuIHdhcyBjcmVhdGVkCiAgICB1aW50IHB1YmxpYyBjcmVhdGlvbkJsb2NrOwoKICAgIC8vIGBiYWxhbmNlc2AgaXMgdGhlIG1hcCB0aGF0IHRyYWNrcyB0aGUgYmFsYW5jZSBvZiBlYWNoIGFkZHJlc3MsIGluIHRoaXMKICAgIC8vICBjb250cmFjdCB3aGVuIHRoZSBiYWxhbmNlIGNoYW5nZXMgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZSBjaGFuZ2UKICAgIC8vICBvY2N1cnJlZCBpcyBhbHNvIGluY2x1ZGVkIGluIHRoZSBtYXAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gQ2hlY2twb2ludFtdKSBiYWxhbmNlczsKCiAgICAvLyBgYWxsb3dlZGAgdHJhY2tzIGFueSBleHRyYSB0cmFuc2ZlciByaWdodHMgYXMgaW4gYWxsIEVSQzIwIHRva2VucwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwoKICAgIC8vIFRyYWNrcyB0aGUgaGlzdG9yeSBvZiB0aGUgYHRvdGFsU3VwcGx5YCBvZiB0aGUgdG9rZW4KICAgIENoZWNrcG9pbnRbXSB0b3RhbFN1cHBseUhpc3Rvcnk7CgogICAgLy8gRmxhZyB0aGF0IGRldGVybWluZXMgaWYgdGhlIHRva2VuIGlzIHRyYW5zZmVyYWJsZSBvciBub3QuCiAgICBib29sIHB1YmxpYyB0cmFuc2ZlcnNFbmFibGVkOwoKICAgIC8vIFRoZSBmYWN0b3J5IHVzZWQgdG8gY3JlYXRlIG5ldyBjbG9uZSB0b2tlbnMKICAgIE1pbmlNZVRva2VuRmFjdG9yeSBwdWJsaWMgdG9rZW5GYWN0b3J5OwoKLy8vLy8vLy8vLy8vLy8vLwovLyBDb25zdHJ1Y3RvcgovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgTWluaU1lVG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuRmFjdG9yeSBUaGUgYWRkcmVzcyBvZiB0aGUgTWluaU1lVG9rZW5GYWN0b3J5IGNvbnRyYWN0IHRoYXQKICAgIC8vLyAgd2lsbCBjcmVhdGUgdGhlIENsb25lIHRva2VuIGNvbnRyYWN0cywgdGhlIHRva2VuIGZhY3RvcnkgbmVlZHMgdG8gYmUKICAgIC8vLyAgZGVwbG95ZWQgZmlyc3QKICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHBhcmVudCB0b2tlbiwgc2V0IHRvIDB4MCBpZiBpdCBpcyBhCiAgICAvLy8gIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfcGFyZW50U25hcFNob3RCbG9jayBCbG9jayBvZiB0aGUgcGFyZW50IHRva2VuIHRoYXQgd2lsbAogICAgLy8vICBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBjbG9uZSB0b2tlbiwgc2V0IHRvIDAgaWYgaXQKICAgIC8vLyAgaXMgYSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuTmFtZSBOYW1lIG9mIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2RlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIElmIHRydWUsIHRva2VucyB3aWxsIGJlIGFibGUgdG8gYmUgdHJhbnNmZXJyZWQKICAgIGZ1bmN0aW9uIE1pbmlNZVRva2VuKAogICAgICAgIGFkZHJlc3MgX3Rva2VuRmFjdG9yeSwKICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwKICAgICAgICB1aW50IF9wYXJlbnRTbmFwU2hvdEJsb2NrLAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICApIHB1YmxpYyB7CiAgICAgICAgdG9rZW5GYWN0b3J5ID0gTWluaU1lVG9rZW5GYWN0b3J5KF90b2tlbkZhY3RvcnkpOwogICAgICAgIG5hbWUgPSBfdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbmFtZQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVjaW1hbHMKICAgICAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbAogICAgICAgIHBhcmVudFRva2VuID0gTWluaU1lVG9rZW4oX3BhcmVudFRva2VuKTsKICAgICAgICBwYXJlbnRTbmFwU2hvdEJsb2NrID0gX3BhcmVudFNuYXBTaG90QmxvY2s7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgICAgIGNyZWF0aW9uQmxvY2sgPSBibG9jay5udW1iZXI7CiAgICB9CgoKLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBFUkMyMCBNZXRob2RzCi8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfYW1vdW50YCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgbXNnLnNlbmRlcmAKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcnNFbmFibGVkKTsKICAgICAgICByZXR1cm4gZG9UcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFNlbmQgYF9hbW91bnRgIHRva2VucyB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdAogICAgLy8vICBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIHRva2VucyBiZWluZyB0cmFuc2ZlcnJlZAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQKICAgICkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewoKICAgICAgICAvLyBUaGUgY29udHJvbGxlciBvZiB0aGlzIGNvbnRyYWN0IGNhbiBtb3ZlIHRva2VucyBhcm91bmQgYXQgd2lsbCwKICAgICAgICAvLyAgdGhpcyBpcyBpbXBvcnRhbnQgdG8gcmVjb2duaXplISBDb25maXJtIHRoYXQgeW91IHRydXN0IHRoZQogICAgICAgIC8vICBjb250cm9sbGVyIG9mIHRoaXMgY29udHJhY3QsIHdoaWNoIGluIG1vc3Qgc2l0dWF0aW9ucyBzaG91bGQgYmUKICAgICAgICAvLyAgYW5vdGhlciBvcGVuIHNvdXJjZSBzbWFydCBjb250cmFjdCBvciAweDAKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBjb250cm9sbGVyKSB7CiAgICAgICAgICAgIHJlcXVpcmUodHJhbnNmZXJzRW5hYmxlZCk7CgogICAgICAgICAgICAvLyBUaGUgc3RhbmRhcmQgRVJDIDIwIHRyYW5zZmVyRnJvbSBmdW5jdGlvbmFsaXR5CiAgICAgICAgICAgIGlmIChhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA8IF9hbW91bnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICB9CgogICAgLy8vIEBkZXYgVGhpcyBpcyB0aGUgYWN0dWFsIHRyYW5zZmVyIGZ1bmN0aW9uIGluIHRoZSB0b2tlbiBjb250cmFjdCwgaXQgY2FuCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSB0b2tlbnMgYmVpbmcgdHJhbnNmZXJyZWQKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGRvVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudAogICAgKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsKCiAgICAgICAgICAgaWYgKF9hbW91bnQgPT0gMCkgewogICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICB9CgogICAgICAgICAgIHJlcXVpcmUocGFyZW50U25hcFNob3RCbG9jayA8IGJsb2NrLm51bWJlcik7CgogICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyB0cmFuc2ZlciB0byAweDAgb3IgdGhlIHRva2VuIGNvbnRyYWN0IGl0c2VsZgogICAgICAgICAgIHJlcXVpcmUoKF90byAhPSAwKSAmJiAoX3RvICE9IGFkZHJlc3ModGhpcykpKTsKCiAgICAgICAgICAgLy8gSWYgdGhlIGFtb3VudCBiZWluZyB0cmFuc2ZlcmVkIGlzIG1vcmUgdGhhbiB0aGUgYmFsYW5jZSBvZiB0aGUKICAgICAgICAgICAvLyAgYWNjb3VudCB0aGUgdHJhbnNmZXIgcmV0dXJucyBmYWxzZQogICAgICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mQXQoX2Zyb20sIGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgaWYgKHByZXZpb3VzQmFsYW5jZUZyb20gPCBfYW1vdW50KSB7CiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICB9CgogICAgICAgICAgIC8vIEZpcnN0IHVwZGF0ZSB0aGUgYmFsYW5jZSBhcnJheSB3aXRoIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBhZGRyZXNzCiAgICAgICAgICAgLy8gIHNlbmRpbmcgdGhlIHRva2VucwogICAgICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX2Zyb21dLCBwcmV2aW91c0JhbGFuY2VGcm9tIC0gX2Ftb3VudCk7CgogICAgICAgICAgIC8vIFRoZW4gdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MKICAgICAgICAgICAvLyAgcmVjZWl2aW5nIHRoZSB0b2tlbnMKICAgICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2ZBdChfdG8sIGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgcmVxdWlyZShwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQgPj0gcHJldmlvdXNCYWxhbmNlVG8pOyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cKICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW190b10sIHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCk7CgogICAgICAgICAgIC8vIEFuIGV2ZW50IHRvIG1ha2UgdGhlIHRyYW5zZmVyIGVhc3kgdG8gZmluZCBvbiB0aGUgYmxvY2tjaGFpbgogICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOwoKICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyB0aGF0J3MgYmFsYW5jZSBpcyBiZWluZyByZXF1ZXN0ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIG9mIGBfb3duZXJgIGF0IHRoZSBjdXJyZW50IGJsb2NrCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mQXQoX293bmVyLCBibG9jay5udW1iZXIpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfYW1vdW50YCB0b2tlbnMgb24KICAgIC8vLyAgaXRzIGJlaGFsZi4gVGhpcyBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIEVSQzIwIGFwcHJvdmUgZnVuY3Rpb24KICAgIC8vLyAgdG8gYmUgYSBsaXR0bGUgYml0IHNhZmVyCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSh0cmFuc2ZlcnNFbmFibGVkKTsKCiAgICAgICAgLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2AKICAgICAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwwKWAgaWYgaXQgaXMgbm90CiAgICAgICAgLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6CiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5CiAgICAgICAgcmVxdWlyZSgoX2Ftb3VudCA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOwoKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZnVuY3Rpb24gbWFrZXMgaXQgZWFzeSB0byByZWFkIHRoZSBgYWxsb3dlZFtdYCBtYXAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHJldHVybiBBbW91bnQgb2YgcmVtYWluaW5nIHRva2VucyBvZiBfb3duZXIgdGhhdCBfc3BlbmRlciBpcyBhbGxvd2VkCiAgICAvLy8gIHRvIHNwZW5kCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIKICAgICkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc2VuZCBgX2Ftb3VudGAgdG9rZW5zIG9uCiAgICAvLy8gIGl0cyBiZWhhbGYsIGFuZCB0aGVuIGEgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzCiAgICAvLy8gIGJlaW5nIGFwcHJvdmVkLCBgX3NwZW5kZXJgLiBUaGlzIGFsbG93cyB1c2VycyB0byB1c2UgdGhlaXIgdG9rZW5zIHRvCiAgICAvLy8gIGludGVyYWN0IHdpdGggY29udHJhY3RzIGluIG9uZSBmdW5jdGlvbiBjYWxsIGluc3RlYWQgb2YgdHdvCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIGZ1bmN0aW9uIGNhbGwgd2FzIHN1Y2Nlc3NmdWwKICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCwgYnl0ZXMgX2V4dHJhRGF0YQogICAgKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZShhcHByb3ZlKF9zcGVuZGVyLCBfYW1vdW50KSk7CgogICAgICAgIEFwcHJvdmVBbmRDYWxsRmFsbEJhY2soX3NwZW5kZXIpLnJlY2VpdmVBcHByb3ZhbCgKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgX2Ftb3VudCwKICAgICAgICAgICAgdGhpcywKICAgICAgICAgICAgX2V4dHJhRGF0YQogICAgICAgICk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgZnVuY3Rpb24gbWFrZXMgaXQgZWFzeSB0byBnZXQgdGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMKICAgIC8vLyBAcmV0dXJuIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5QXQoYmxvY2subnVtYmVyKTsKICAgIH0KCgovLy8vLy8vLy8vLy8vLy8vCi8vIFF1ZXJ5IGJhbGFuY2UgYW5kIHRvdGFsU3VwcGx5IGluIEhpc3RvcnkKLy8vLy8vLy8vLy8vLy8vLwoKICAgIC8vLyBAZGV2IFF1ZXJpZXMgdGhlIGJhbGFuY2Ugb2YgYF9vd25lcmAgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYAogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZAogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSBiYWxhbmNlIGlzIHF1ZXJpZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlIGF0IGBfYmxvY2tOdW1iZXJgCiAgICBmdW5jdGlvbiBiYWxhbmNlT2ZBdChhZGRyZXNzIF9vd25lciwgdWludCBfYmxvY2tOdW1iZXIpIHB1YmxpYyBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQpIHsKCiAgICAgICAgLy8gVGhlc2UgbmV4dCBmZXcgbGluZXMgYXJlIHVzZWQgd2hlbiB0aGUgYmFsYW5jZSBvZiB0aGUgdG9rZW4gaXMKICAgICAgICAvLyAgcmVxdWVzdGVkIGJlZm9yZSBhIGNoZWNrIHBvaW50IHdhcyBldmVyIGNyZWF0ZWQgZm9yIHRoaXMgdG9rZW4sIGl0CiAgICAgICAgLy8gIHJlcXVpcmVzIHRoYXQgdGhlIGBwYXJlbnRUb2tlbi5iYWxhbmNlT2ZBdGAgYmUgcXVlcmllZCBhdCB0aGUKICAgICAgICAvLyAgZ2VuZXNpcyBibG9jayBmb3IgdGhhdCB0b2tlbiBhcyB0aGlzIGNvbnRhaW5zIGluaXRpYWwgYmFsYW5jZSBvZgogICAgICAgIC8vICB0aGlzIHRva2VuCiAgICAgICAgaWYgKChiYWxhbmNlc1tfb3duZXJdLmxlbmd0aCA9PSAwKQogICAgICAgICAgICB8fCAoYmFsYW5jZXNbX293bmVyXVswXS5mcm9tQmxvY2sgPiBfYmxvY2tOdW1iZXIpKSB7CiAgICAgICAgICAgIGlmIChhZGRyZXNzKHBhcmVudFRva2VuKSAhPSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50VG9rZW4uYmFsYW5jZU9mQXQoX293bmVyLCBtaW4oX2Jsb2NrTnVtYmVyLCBwYXJlbnRTbmFwU2hvdEJsb2NrKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBIYXMgbm8gcGFyZW50CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBleHBlY3RlZCBiYWxhbmNlIGR1cmluZyBub3JtYWwgc2l0dWF0aW9ucwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZUF0KGJhbGFuY2VzW19vd25lcl0sIF9ibG9ja051bWJlcik7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAbm90aWNlIFRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBgX2Jsb2NrTnVtYmVyYC4KICAgIC8vLyBAcGFyYW0gX2Jsb2NrTnVtYmVyIFRoZSBibG9jayBudW1iZXIgd2hlbiB0aGUgdG90YWxTdXBwbHkgaXMgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYF9ibG9ja051bWJlcmAKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5QXQodWludCBfYmxvY2tOdW1iZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsKCiAgICAgICAgLy8gVGhlc2UgbmV4dCBmZXcgbGluZXMgYXJlIHVzZWQgd2hlbiB0aGUgdG90YWxTdXBwbHkgb2YgdGhlIHRva2VuIGlzCiAgICAgICAgLy8gIHJlcXVlc3RlZCBiZWZvcmUgYSBjaGVjayBwb2ludCB3YXMgZXZlciBjcmVhdGVkIGZvciB0aGlzIHRva2VuLCBpdAogICAgICAgIC8vICByZXF1aXJlcyB0aGF0IHRoZSBgcGFyZW50VG9rZW4udG90YWxTdXBwbHlBdGAgYmUgcXVlcmllZCBhdCB0aGUKICAgICAgICAvLyAgZ2VuZXNpcyBibG9jayBmb3IgdGhpcyB0b2tlbiBhcyB0aGF0IGNvbnRhaW5zIHRvdGFsU3VwcGx5IG9mIHRoaXMKICAgICAgICAvLyAgdG9rZW4gYXQgdGhpcyBibG9jayBudW1iZXIuCiAgICAgICAgaWYgKCh0b3RhbFN1cHBseUhpc3RvcnkubGVuZ3RoID09IDApCiAgICAgICAgICAgIHx8ICh0b3RhbFN1cHBseUhpc3RvcnlbMF0uZnJvbUJsb2NrID4gX2Jsb2NrTnVtYmVyKSkgewogICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFRva2VuLnRvdGFsU3VwcGx5QXQobWluKF9ibG9ja051bWJlciwgcGFyZW50U25hcFNob3RCbG9jaykpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgdG90YWxTdXBwbHkgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQodG90YWxTdXBwbHlIaXN0b3J5LCBfYmxvY2tOdW1iZXIpOwogICAgICAgIH0KICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gQ2xvbmUgVG9rZW4gTWV0aG9kCi8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQG5vdGljZSBDcmVhdGVzIGEgbmV3IGNsb25lIHRva2VuIHdpdGggdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIGJlaW5nCiAgICAvLy8gIHRoaXMgdG9rZW4gYXQgYF9zbmFwc2hvdEJsb2NrYAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlbk5hbWUgTmFtZSBvZiB0aGUgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2Nsb25lRGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgc21hbGxlc3QgdW5pdAogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlblN5bWJvbCBTeW1ib2wgb2YgdGhlIGNsb25lIHRva2VuCiAgICAvLy8gQHBhcmFtIF9zbmFwc2hvdEJsb2NrIEJsb2NrIHdoZW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcGFyZW50IHRva2VuIGlzCiAgICAvLy8gIGNvcGllZCB0byBzZXQgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBuZXcgY2xvbmUgdG9rZW47CiAgICAvLy8gIGlmIHRoZSBibG9jayBpcyB6ZXJvIHRoYW4gdGhlIGFjdHVhbCBibG9jaywgdGhlIGN1cnJlbnQgYmxvY2sgaXMgdXNlZAogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUKICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgTWluaU1lVG9rZW4gQ29udHJhY3QKICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwKICAgICAgICB1aW50OCBfY2xvbmVEZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuU3ltYm9sLAogICAgICAgIHVpbnQgX3NuYXBzaG90QmxvY2ssCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZAogICAgICAgICkgcHVibGljIHJldHVybnMoYWRkcmVzcykgewogICAgICAgIGlmIChfc25hcHNob3RCbG9jayA9PSAwKSBfc25hcHNob3RCbG9jayA9IGJsb2NrLm51bWJlcjsKICAgICAgICBNaW5pTWVUb2tlbiBjbG9uZVRva2VuID0gdG9rZW5GYWN0b3J5LmNyZWF0ZUNsb25lVG9rZW4oCiAgICAgICAgICAgIHRoaXMsCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLAogICAgICAgICAgICBfY2xvbmVUb2tlbk5hbWUsCiAgICAgICAgICAgIF9jbG9uZURlY2ltYWxVbml0cywKICAgICAgICAgICAgX2Nsb25lVG9rZW5TeW1ib2wsCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgICAgICk7CgogICAgICAgIGNsb25lVG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsKCiAgICAgICAgLy8gQW4gZXZlbnQgdG8gbWFrZSB0aGUgdG9rZW4gZWFzeSB0byBmaW5kIG9uIHRoZSBibG9ja2NoYWluCiAgICAgICAgTmV3Q2xvbmVUb2tlbihhZGRyZXNzKGNsb25lVG9rZW4pLCBfc25hcHNob3RCbG9jayk7CiAgICAgICAgcmV0dXJuIGFkZHJlc3MoY2xvbmVUb2tlbik7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEdlbmVyYXRlIGFuZCBkZXN0cm95IHRva2VucwovLy8vLy8vLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgR2VuZXJhdGVzIGBfYW1vdW50YCB0b2tlbnMgdGhhdCBhcmUgYXNzaWduZWQgdG8gYF9vd25lcmAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2VucwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBxdWFudGl0eSBvZiB0b2tlbnMgZ2VuZXJhdGVkCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0b2tlbnMgYXJlIGdlbmVyYXRlZCBjb3JyZWN0bHkKICAgIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQKICAgICkgcHVibGljIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50IGN1clRvdGFsU3VwcGx5ID0gdG90YWxTdXBwbHkoKTsKICAgICAgICByZXF1aXJlKGN1clRvdGFsU3VwcGx5ICsgX2Ftb3VudCA+PSBjdXJUb3RhbFN1cHBseSk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwogICAgICAgIHVpbnQgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCA+PSBwcmV2aW91c0JhbGFuY2VUbyk7IC8vIENoZWNrIGZvciBvdmVyZmxvdwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3codG90YWxTdXBwbHlIaXN0b3J5LCBjdXJUb3RhbFN1cHBseSArIF9hbW91bnQpOwogICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX293bmVyXSwgcHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50KTsKICAgICAgICBUcmFuc2ZlcigwLCBfb3duZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvLy8gQG5vdGljZSBCdXJucyBgX2Ftb3VudGAgdG9rZW5zIGZyb20gYF9vd25lcmAKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBsb3NlIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgcXVhbnRpdHkgb2YgdG9rZW5zIHRvIGJ1cm4KICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgYnVybmVkIGNvcnJlY3RseQogICAgZnVuY3Rpb24gZGVzdHJveVRva2VucyhhZGRyZXNzIF9vd25lciwgdWludCBfYW1vdW50CiAgICApIG9ubHlDb250cm9sbGVyIHB1YmxpYyByZXR1cm5zIChib29sKSB7CiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5KCk7CiAgICAgICAgcmVxdWlyZShjdXJUb3RhbFN1cHBseSA+PSBfYW1vdW50KTsKICAgICAgICB1aW50IHByZXZpb3VzQmFsYW5jZUZyb20gPSBiYWxhbmNlT2YoX293bmVyKTsKICAgICAgICByZXF1aXJlKHByZXZpb3VzQmFsYW5jZUZyb20gPj0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5IC0gX2Ftb3VudCk7CiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VGcm9tIC0gX2Ftb3VudCk7CiAgICAgICAgVHJhbnNmZXIoX293bmVyLCAwLCBfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCi8vLy8vLy8vLy8vLy8vLy8KLy8gRW5hYmxlIHRva2VucyB0cmFuc2ZlcnMKLy8vLy8vLy8vLy8vLy8vLwoKCiAgICAvLy8gQG5vdGljZSBFbmFibGVzIHRva2VuIGhvbGRlcnMgdG8gdHJhbnNmZXIgdGhlaXIgdG9rZW5zIGZyZWVseSBpZiB0cnVlCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIFRydWUgaWYgdHJhbnNmZXJzIGFyZSBhbGxvd2VkIGluIHRoZSBjbG9uZQogICAgZnVuY3Rpb24gZW5hYmxlVHJhbnNmZXJzKGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQpIHB1YmxpYyBvbmx5Q29udHJvbGxlciB7CiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOwogICAgfQoKLy8vLy8vLy8vLy8vLy8vLwovLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb25zIHRvIHF1ZXJ5IGFuZCBzZXQgYSB2YWx1ZSBpbiBhIHNuYXBzaG90IGFycmF5Ci8vLy8vLy8vLy8vLy8vLy8KCiAgICAvLy8gQGRldiBgZ2V0VmFsdWVBdGAgcmV0cmlldmVzIHRoZSBudW1iZXIgb2YgdG9rZW5zIGF0IGEgZ2l2ZW4gYmxvY2sgbnVtYmVyCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIHZhbHVlcyBiZWluZyBxdWVyaWVkCiAgICAvLy8gQHBhcmFtIF9ibG9jayBUaGUgYmxvY2sgbnVtYmVyIHRvIHJldHJpZXZlIHRoZSB2YWx1ZSBhdAogICAgLy8vIEByZXR1cm4gVGhlIG51bWJlciBvZiB0b2tlbnMgYmVpbmcgcXVlcmllZAogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdChDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfYmxvY2sKICAgICkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludCkgewogICAgICAgIGlmIChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkgcmV0dXJuIDA7CgogICAgICAgIC8vIFNob3J0Y3V0IGZvciB0aGUgYWN0dWFsIHZhbHVlCiAgICAgICAgaWYgKF9ibG9jayA+PSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV0uZnJvbUJsb2NrKQogICAgICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoLTFdLnZhbHVlOwogICAgICAgIGlmIChfYmxvY2sgPCBjaGVja3BvaW50c1swXS5mcm9tQmxvY2spIHJldHVybiAwOwoKICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIG9mIHRoZSB2YWx1ZSBpbiB0aGUgYXJyYXkKICAgICAgICB1aW50IG1pbiA9IDA7CiAgICAgICAgdWludCBtYXggPSBjaGVja3BvaW50cy5sZW5ndGgtMTsKICAgICAgICB3aGlsZSAobWF4ID4gbWluKSB7CiAgICAgICAgICAgIHVpbnQgbWlkID0gKG1heCArIG1pbiArIDEpLyAyOwogICAgICAgICAgICBpZiAoY2hlY2twb2ludHNbbWlkXS5mcm9tQmxvY2s8PV9ibG9jaykgewogICAgICAgICAgICAgICAgbWluID0gbWlkOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWF4ID0gbWlkLTE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW21pbl0udmFsdWU7CiAgICB9CgogICAgLy8vIEBkZXYgYHVwZGF0ZVZhbHVlQXROb3dgIHVzZWQgdG8gdXBkYXRlIHRoZSBgYmFsYW5jZXNgIG1hcCBhbmQgdGhlCiAgICAvLy8gIGB0b3RhbFN1cHBseUhpc3RvcnlgCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIGRhdGEgYmVpbmcgdXBkYXRlZAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIG5ldyBudW1iZXIgb2YgdG9rZW5zCiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZUF0Tm93KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF92YWx1ZQogICAgKSBpbnRlcm5hbCAgewogICAgICAgIGlmICgoY2hlY2twb2ludHMubGVuZ3RoID09IDApCiAgICAgICAgfHwgKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtMV0uZnJvbUJsb2NrIDwgYmxvY2subnVtYmVyKSkgewogICAgICAgICAgICAgICBDaGVja3BvaW50IHN0b3JhZ2UgbmV3Q2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzWyBjaGVja3BvaW50cy5sZW5ndGgrKyBdOwogICAgICAgICAgICAgICBuZXdDaGVja1BvaW50LmZyb21CbG9jayA9ICB1aW50MTI4KGJsb2NrLm51bWJlcik7CiAgICAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgQ2hlY2twb2ludCBzdG9yYWdlIG9sZENoZWNrUG9pbnQgPSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGgtMV07CiAgICAgICAgICAgICAgIG9sZENoZWNrUG9pbnQudmFsdWUgPSB1aW50MTI4KF92YWx1ZSk7CiAgICAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBhZGRyZXNzIGlzIGEgY29udHJhY3QKICAgIC8vLyBAcGFyYW0gX2FkZHIgVGhlIGFkZHJlc3MgYmVpbmcgcXVlcmllZAogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiBgX2FkZHJgIGlzIGEgY29udHJhY3QKICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7CiAgICAgICAgdWludCBzaXplOwogICAgICAgIGlmIChfYWRkciA9PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgYXNzZW1ibHkgewogICAgICAgICAgICBzaXplIDo9IGV4dGNvZGVzaXplKF9hZGRyKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2l6ZT4wOwogICAgfQoKICAgIC8vLyBAZGV2IEhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gYSBtaW4gYmV0d2VuIHRoZSB0d28gdWludHMKICAgIC8vLyBQVVJFIGZ1bmN0aW9uCiAgICBmdW5jdGlvbiBtaW4odWludCBhLCB1aW50IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBUaGUgZmFsbGJhY2sgZnVuY3Rpb246IElmIHRoZSBjb250cmFjdCdzIGNvbnRyb2xsZXIgaGFzIG5vdCBiZWVuCiAgICAvLy8gIHNldCB0byAwLCB0aGVuIHRoZSBgcHJveHlQYXltZW50YCBtZXRob2QgaXMgY2FsbGVkIHdoaWNoIHJlbGF5cyB0aGUKICAgIC8vLyAgZXRoZXIgYW5kIGNyZWF0ZXMgdG9rZW5zIGFzIGRlc2NyaWJlZCBpbiB0aGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdAogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgfQoKLy8vLy8vLy8vLwovLyBTYWZldHkgTWV0aG9kcwovLy8vLy8vLy8vCgogICAgLy8vIEBub3RpY2UgVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgYnkgdGhlIGNvbnRyb2xsZXIgdG8gZXh0cmFjdCBtaXN0YWtlbmx5CiAgICAvLy8gIHNlbnQgdG9rZW5zIHRvIHRoaXMgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF90b2tlbiBUaGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyCiAgICAvLy8gIHNldCB0byAwIGluIGNhc2UgeW91IHdhbnQgdG8gZXh0cmFjdCBldGhlci4KICAgIGZ1bmN0aW9uIGNsYWltVG9rZW5zKGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgb25seUNvbnRyb2xsZXIgewogICAgICAgIGlmIChfdG9rZW4gPT0gMHgwKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgTWluaU1lVG9rZW4gdG9rZW4gPSBNaW5pTWVUb2tlbihfdG9rZW4pOwogICAgICAgIHVpbnQgYmFsYW5jZSA9IHRva2VuLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICB0b2tlbi50cmFuc2Zlcihjb250cm9sbGVyLCBiYWxhbmNlKTsKICAgICAgICBDbGFpbWVkVG9rZW5zKF90b2tlbiwgY29udHJvbGxlciwgYmFsYW5jZSk7CiAgICB9CgovLy8vLy8vLy8vLy8vLy8vCi8vIEV2ZW50cwovLy8vLy8vLy8vLy8vLy8vCiAgICBldmVudCBDbGFpbWVkVG9rZW5zKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIGFkZHJlc3MgaW5kZXhlZCBfY29udHJvbGxlciwgdWludCBfYW1vdW50KTsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsKICAgIGV2ZW50IE5ld0Nsb25lVG9rZW4oYWRkcmVzcyBpbmRleGVkIF9jbG9uZVRva2VuLCB1aW50IF9zbmFwc2hvdEJsb2NrKTsKICAgIGV2ZW50IEFwcHJvdmFsKAogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLAogICAgICAgIHVpbnQyNTYgX2Ftb3VudAogICAgICAgICk7Cgp9CgoKLy8vLy8vLy8vLy8vLy8vLwovLyBNaW5pTWVUb2tlbkZhY3RvcnkKLy8vLy8vLy8vLy8vLy8vLwoKLy8vIEBkZXYgVGhpcyBjb250cmFjdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGNsb25lIGNvbnRyYWN0cyBmcm9tIGEgY29udHJhY3QuCi8vLyAgSW4gc29saWRpdHkgdGhpcyBpcyB0aGUgd2F5IHRvIGNyZWF0ZSBhIGNvbnRyYWN0IGZyb20gYSBjb250cmFjdCBvZiB0aGUKLy8vICBzYW1lIGNsYXNzCmNvbnRyYWN0IE1pbmlNZVRva2VuRmFjdG9yeSB7CgogICAgLy8vIEBub3RpY2UgVXBkYXRlIHRoZSBEQXBwIGJ5IGNyZWF0aW5nIGEgbmV3IHRva2VuIHdpdGggbmV3IGZ1bmN0aW9uYWxpdGllcwogICAgLy8vICB0aGUgbXNnLnNlbmRlciBiZWNvbWVzIHRoZSBjb250cm9sbGVyIG9mIHRoaXMgY2xvbmUgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGJlaW5nIGNsb25lZAogICAgLy8vIEBwYXJhbSBfc25hcHNob3RCbG9jayBCbG9jayBvZiB0aGUgcGFyZW50IHRva2VuIHRoYXQgd2lsbAogICAgLy8vICBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBjbG9uZSB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5OYW1lIE5hbWUgb2YgdGhlIG5ldyB0b2tlbgogICAgLy8vIEBwYXJhbSBfZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblN5bWJvbCBUb2tlbiBTeW1ib2wgZm9yIHRoZSBuZXcgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgSWYgdHJ1ZSwgdG9rZW5zIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyB0b2tlbiBjb250cmFjdAogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigKICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwKICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLAogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLAogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwKICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkCiAgICApIHB1YmxpYyByZXR1cm5zIChNaW5pTWVUb2tlbikgewogICAgICAgIE1pbmlNZVRva2VuIG5ld1Rva2VuID0gbmV3IE1pbmlNZVRva2VuKAogICAgICAgICAgICB0aGlzLAogICAgICAgICAgICBfcGFyZW50VG9rZW4sCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLAogICAgICAgICAgICBfdG9rZW5OYW1lLAogICAgICAgICAgICBfZGVjaW1hbFVuaXRzLAogICAgICAgICAgICBfdG9rZW5TeW1ib2wsCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkCiAgICAgICAgICAgICk7CgogICAgICAgIG5ld1Rva2VuLmNoYW5nZUNvbnRyb2xsZXIobXNnLnNlbmRlcik7CiAgICAgICAgcmV0dXJuIG5ld1Rva2VuOwogICAgfQp9Cgpjb250cmFjdCBTdGFrZVRyZWVXaXRoVG9rZW5pemF0aW9uIHsKICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsKCiAgdWludCBwdWJsaWMgdmVyc2lvbiA9IDI7CgogIHN0cnVjdCBGdW5kZXIgewogICAgYm9vbCBleGlzdHM7CiAgICB1aW50IGJhbGFuY2U7CiAgICB1aW50IHdpdGhkcmF3YWxFbnRyeTsKICAgIHVpbnQgY29udHJpYnV0aW9uOwogICAgdWludCBjb250cmlidXRpb25DbGFpbWVkOwogIH0KCiAgbWFwcGluZyhhZGRyZXNzID0+IEZ1bmRlcikgcHVibGljIGZ1bmRlcnM7CgogIGJvb2wgcHVibGljIGxpdmUgPSB0cnVlOyAvLyBGb3Igc3Vuc2V0dGluZyBjb250cmFjdAogIHVpbnQgcHVibGljIHRvdGFsQ3VycmVudEZ1bmRlcnMgPSAwOyAvLyBLZWVwcyB0cmFjayBvZiB0b3RhbCBmdW5kZXJzCiAgdWludCBwdWJsaWMgd2l0aGRyYXdhbENvdW50ZXIgPSAwOyAvLyBLZWVwcyB0cmFjayBvZiBob3cgbWFueSB3aXRoZHJhd2FscyBoYXZlIHRha2VuIHBsYWNlCiAgdWludCBwdWJsaWMgc3Vuc2V0V2l0aGRyYXdEYXRlOwogIAogIE1pbmlNZVRva2VuIHB1YmxpYyB0b2tlbkNvbnRyYWN0OwogIE1pbmlNZVRva2VuRmFjdG9yeSBwdWJsaWMgdG9rZW5GYWN0b3J5OwogIGJvb2wgcHVibGljIHRva2VuaXplZCA9IGZhbHNlOwogIGJvb2wgcHVibGljIGNhbkNsYWltVG9rZW5zID0gZmFsc2U7CgogIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OyAvLyBBZGRyZXNzIGZvciBiZW5lZmljaWFyeQogIHVpbnQgcHVibGljIHN1bnNldFdpdGhkcmF3YWxQZXJpb2Q7IC8vIEhvdyBsb25nIGl0IHRha2VzIGZvciBiZW5lZmljaWFyeSB0byBzd2lwZSBjb250cmFjdCB3aGVuIHB1dCBpbnRvIHN1bnNldCBtb2RlCiAgdWludCBwdWJsaWMgd2l0aGRyYXdhbFBlcmlvZDsgLy8gSG93IGxvbmcgdGhlIGJlbmVmaWNpYXJ5IGhhcyB0byB3YWl0IHdpdGhkcmF3CiAgdWludCBwdWJsaWMgbWluaW11bUZ1bmRpbmdBbW91bnQ7IC8vIFNldHRpbmcgdXNlZCBmb3Igc2V0dGluZyBtaW5pbXVtIGFtb3VudHMgdG8gZnVuZCBjb250cmFjdCB3aXRoCiAgdWludCBwdWJsaWMgbGFzdFdpdGhkcmF3YWw7IC8vIExhc3Qgd2l0aGRyYXdhbCB0aW1lCiAgdWludCBwdWJsaWMgbmV4dFdpdGhkcmF3YWw7IC8vIE5leHQgd2l0aGRyYXdhbCB0aW1lCgogIHVpbnQgcHVibGljIGNvbnRyYWN0U3RhcnRUaW1lOyAvLyBGb3IgYWNjb3VudGluZyBwdXJwb3NlcwoKICBldmVudCBQYXltZW50KGFkZHJlc3MgaW5kZXhlZCBmdW5kZXIsIHVpbnQgYW1vdW50KTsKICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIGZ1bmRlciwgdWludCBhbW91bnQpOwogIGV2ZW50IFdpdGhkcmF3YWwodWludCBhbW91bnQpOwogIGV2ZW50IFRva2Vuc0NsYWltZWQoYWRkcmVzcyBpbmRleGVkIGZ1bmRlciwgdWludCBhbW91bnQpOwogIGV2ZW50IFN1bnNldChib29sIGhhc1N1bnNldCk7CgogIGZ1bmN0aW9uIFN0YWtlVHJlZVdpdGhUb2tlbml6YXRpb24oCiAgICBhZGRyZXNzIGJlbmVmaWNpYXJ5QWRkcmVzcywgCiAgICB1aW50IHdpdGhkcmF3YWxQZXJpb2RJbml0LCAKICAgIHVpbnQgd2l0aGRyYXdhbFN0YXJ0LCAKICAgIHVpbnQgc3Vuc2V0V2l0aGRyYXdQZXJpb2RJbml0LAogICAgdWludCBtaW5pbXVtRnVuZGluZ0Ftb3VudEluaXQpIHsKCiAgICBiZW5lZmljaWFyeSA9IGJlbmVmaWNpYXJ5QWRkcmVzczsKICAgIHdpdGhkcmF3YWxQZXJpb2QgPSB3aXRoZHJhd2FsUGVyaW9kSW5pdDsKICAgIHN1bnNldFdpdGhkcmF3YWxQZXJpb2QgPSBzdW5zZXRXaXRoZHJhd1BlcmlvZEluaXQ7CgogICAgbGFzdFdpdGhkcmF3YWwgPSB3aXRoZHJhd2FsU3RhcnQ7IAogICAgbmV4dFdpdGhkcmF3YWwgPSBsYXN0V2l0aGRyYXdhbCArIHdpdGhkcmF3YWxQZXJpb2Q7CgogICAgbWluaW11bUZ1bmRpbmdBbW91bnQgPSBtaW5pbXVtRnVuZGluZ0Ftb3VudEluaXQ7CgogICAgY29udHJhY3RTdGFydFRpbWUgPSBub3c7CiAgfQoKICAvLyBNb2RpZmllcnMKICBtb2RpZmllciBvbmx5QnlCZW5lZmljaWFyeSgpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBiZW5lZmljaWFyeSk7CiAgICBfOwogIH0KCiAgbW9kaWZpZXIgb25seVdoZW5Ub2tlbml6ZWQoKSB7CiAgICByZXF1aXJlKGlzVG9rZW5pemVkKCkpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlCeUZ1bmRlcigpIHsKICAgIHJlcXVpcmUoaXNGdW5kZXIobXNnLnNlbmRlcikpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlBZnRlck5leHRXaXRoZHJhd2FsRGF0ZSgpIHsKICAgIHJlcXVpcmUobm93ID49IG5leHRXaXRoZHJhd2FsKTsKICAgIF87CiAgfQoKICBtb2RpZmllciBvbmx5V2hlbkxpdmUoKSB7CiAgICByZXF1aXJlKGxpdmUpOwogICAgXzsKICB9CgogIG1vZGlmaWVyIG9ubHlXaGVuU3Vuc2V0KCkgewogICAgcmVxdWlyZSghbGl2ZSk7CiAgICBfOwogIH0KCiAgLyoKICAqIEV4dGVybmFsIGFjY291bnRzIGNhbiBwYXkgZGlyZWN0bHkgdG8gY29udHJhY3QgdG8gZnVuZCBpdC4KICAqLwogIGZ1bmN0aW9uICgpIHBheWFibGUgewogICAgZnVuZCgpOwogIH0KCiAgLyoKICAqIEFkZGl0aW9uYWwgYXBpIGZvciBjb250cmFjdHMgdG8gdXNlIGFzIHdlbGwKICAqIENhbiBvbmx5IGhhcHBlbiB3aGVuIGxpdmUgYW5kIG92ZXIgYSBtaW5pbXVtIGFtb3VudCBzZXQgYnkgdGhlIGJlbmVmaWNpYXJ5CiAgKi8KCiAgZnVuY3Rpb24gZnVuZCgpIHB1YmxpYyBwYXlhYmxlIG9ubHlXaGVuTGl2ZSB7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBtaW5pbXVtRnVuZGluZ0Ftb3VudCk7CgogICAgLy8gT25seSBpbmNyZWFzZSB0b3RhbCBmdW5kZXJzIHdoZW4gd2UgaGF2ZSBhIG5ldyBmdW5kZXIKICAgIGlmKCFpc0Z1bmRlcihtc2cuc2VuZGVyKSkgewogICAgICB0b3RhbEN1cnJlbnRGdW5kZXJzID0gdG90YWxDdXJyZW50RnVuZGVycy5hZGQoMSk7IC8vIEluY3JlYXNlIHRvdGFsIGZ1bmRlciBjb3VudAoKICAgICAgZnVuZGVyc1ttc2cuc2VuZGVyXSA9IEZ1bmRlcih7CiAgICAgICAgZXhpc3RzOiB0cnVlLAogICAgICAgIGJhbGFuY2U6IG1zZy52YWx1ZSwKICAgICAgICB3aXRoZHJhd2FsRW50cnk6IHdpdGhkcmF3YWxDb3VudGVyLCAvLyBTZXQgdGhlIHdpdGhkcmF3YWwgY291bnRlci4gSWUgYXQgd2hpY2ggd2l0aGRyYXdhbCB0aGUgZnVuZGVyICJlbnRlcmVkIiB0aGUgcGF0cm9uYWdlIGNvbnRyYWN0CiAgICAgICAgY29udHJpYnV0aW9uOiAwLAogICAgICAgIGNvbnRyaWJ1dGlvbkNsYWltZWQ6IDAKICAgICAgfSk7CiAgICB9CiAgICBlbHNlIHsgCiAgICAgIGNvbnNvbGlkYXRlRnVuZGVyKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgUGF5bWVudChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogIH0KCiAgLy8gUHVyZSBmdW5jdGlvbnMKCiAgLyoKICAqIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyBob3cgbXVjaCB0aGUgYmVuZWZpY2lhcnkgY2FuIHdpdGhkcmF3LgogICogRHVlIHRvIG5vIGZsb2F0aW5nIHBvaW50cyBpbiBTb2xpZGl0eSwgd2Ugd2lsbCBsb3NlIHNvbWUgZmlkZWxpdHkKICAqIGlmIHRoZXJlJ3Mgd2VpIG9uIHRoZSBsYXN0IGRpZ2l0LiBUaGUgYmVuZWZpY2lhcnkgbG9zZXMgYSBuZWdsaWJpYmxlIGFtb3VudAogICogdG8gd2l0aGRyYXcgYnV0IHRoaXMgYmVuZWZpdHMgdGhlIGJlbmVmaWNpYXJ5IGFnYWluIG9uIGxhdGVyIHdpdGhkcmF3YWxzLgogICogV2UgbXVsdGlwbHkgYnkgMTAgKHdoaWNoIGNvcnJlc3BvbmRzIHRvIHRoZSAxMCUpIAogICogdGhlbiBkaXZpZGUgYnkgMTAwIHRvIGdldCB0aGUgYWN0dWFsIHBhcnQuCiAgKi8KICBmdW5jdGlvbiBjYWxjdWxhdGVXaXRoZHJhd2FsQW1vdW50KHVpbnQgc3RhcnRBbW91bnQpIHB1YmxpYyByZXR1cm5zICh1aW50KXsKICAgIHJldHVybiBzdGFydEFtb3VudC5tdWwoMTApLmRpdigxMDApOyAvLyAxMCUKICB9CgogIC8qCiAgKiBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIHJlZnVuZCBhbW91bnQgZm9yIHRoZSBmdW5kZXIuCiAgKiBEdWUgdG8gbm8gZmxvYXRpbmcgcG9pbnRzIGluIFNvbGlkaXR5LCB3ZSB3aWxsIGxvc2Ugc29tZSBmaWRlbGl0eS4KICAqIFRoZSBmdW5kZXIgbG9zZXMgYSBuZWdsaWJpYmxlIGFtb3VudCB0byByZWZ1bmQuIAogICogVGhlIGxlZnQgb3ZlciB3ZWkgZ2V0cyBwb29sZWQgdG8gdGhlIGZ1bmQuCiAgKi8KICBmdW5jdGlvbiBjYWxjdWxhdGVSZWZ1bmRBbW91bnQodWludCBhbW91bnQsIHVpbnQgd2l0aGRyYXdhbFRpbWVzKSBwdWJsaWMgcmV0dXJucyAodWludCkgeyAgICAKICAgIGZvcih1aW50IGk9MDsgaTx3aXRoZHJhd2FsVGltZXM7IGkrKyl7CiAgICAgIGFtb3VudCA9IGFtb3VudC5tdWwoOSkuZGl2KDEwKTsKICAgIH0KICAgIHJldHVybiBhbW91bnQ7CiAgfQoKICAvLyBHZXR0ZXIgZnVuY3Rpb25zCgogIC8qCiAgKiBUbyBjYWxjdWxhdGUgdGhlIHJlZnVuZCBhbW91bnQgd2UgbG9vayBhdCBob3cgbWFueSB0aW1lcyB0aGUgYmVuZWZpY2lhcnkKICAqIGhhcyB3aXRoZHJhd24gc2luY2UgdGhlIGZ1bmRlciBhZGRlZCB0aGVpciBmdW5kcy4gCiAgKiBXZSB1c2UgdGhhdCBkZWR1Y3QgMTAlIGZvciBlYWNoIHdpdGhkcmF3YWwuCiAgKi8KCiAgZnVuY3Rpb24gZ2V0UmVmdW5kQW1vdW50Rm9yRnVuZGVyKGFkZHJlc3MgYWRkcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIC8vIE9ubHkgY2FsY3VsYXRlIG9uLXRoZS1mbHkgaWYgZnVuZGVyIGhhcyBub3QgYmVlbiB1cGRhdGVkCiAgICBpZihzaG91bGRVcGRhdGVGdW5kZXIoYWRkcikpIHsKICAgICAgdWludCBhbW91bnQgPSBmdW5kZXJzW2FkZHJdLmJhbGFuY2U7CiAgICAgIHVpbnQgd2l0aGRyYXdhbFRpbWVzID0gZ2V0SG93TWFueVdpdGhkcmF3YWxzRm9yRnVuZGVyKGFkZHIpOwogICAgICByZXR1cm4gY2FsY3VsYXRlUmVmdW5kQW1vdW50KGFtb3VudCwgd2l0aGRyYXdhbFRpbWVzKTsKICAgIH0KICAgIGVsc2UgewogICAgICByZXR1cm4gZnVuZGVyc1thZGRyXS5iYWxhbmNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2V0RnVuZGVyQ29udHJpYnV0aW9uKGFkZHJlc3MgZnVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgLy8gT25seSBjYWxjdWxhdGUgb24tdGhlLWZseSBpZiBmdW5kZXIgaGFzIG5vdCBiZWVuIHVwZGF0ZWQKICAgIGlmKHNob3VsZFVwZGF0ZUZ1bmRlcihmdW5kZXIpKSB7CiAgICAgIHVpbnQgb2xkQmFsYW5jZSA9IGZ1bmRlcnNbZnVuZGVyXS5iYWxhbmNlOwogICAgICB1aW50IG5ld0JhbGFuY2UgPSBnZXRSZWZ1bmRBbW91bnRGb3JGdW5kZXIoZnVuZGVyKTsKICAgICAgdWludCBjb250cmlidXRpb24gPSBvbGRCYWxhbmNlLnN1YihuZXdCYWxhbmNlKTsKICAgICAgcmV0dXJuIGZ1bmRlcnNbZnVuZGVyXS5jb250cmlidXRpb24uYWRkKGNvbnRyaWJ1dGlvbik7CiAgICB9CiAgICBlbHNlIHsKICAgICAgcmV0dXJuIGZ1bmRlcnNbZnVuZGVyXS5jb250cmlidXRpb247CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRCZW5lZmljaWFyeSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzKSB7CiAgICByZXR1cm4gYmVuZWZpY2lhcnk7CiAgfQoKICBmdW5jdGlvbiBnZXRDdXJyZW50VG90YWxGdW5kZXJzKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiB0b3RhbEN1cnJlbnRGdW5kZXJzOwogIH0KCiAgZnVuY3Rpb24gZ2V0V2l0aGRyYXdhbENvdW50ZXIoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIHdpdGhkcmF3YWxDb3VudGVyOwogIH0KCiAgZnVuY3Rpb24gZ2V0V2l0aGRyYXdhbEVudHJ5Rm9yRnVuZGVyKGFkZHJlc3MgYWRkcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgIHJldHVybiBmdW5kZXJzW2FkZHJdLndpdGhkcmF3YWxFbnRyeTsKICB9CgogIGZ1bmN0aW9uIGdldENvbnRyYWN0QmFsYW5jZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsKICAgIGJhbGFuY2UgPSB0aGlzLmJhbGFuY2U7CiAgfQoKICBmdW5jdGlvbiBnZXRGdW5kZXJCYWxhbmNlKGFkZHJlc3MgZnVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGdldFJlZnVuZEFtb3VudEZvckZ1bmRlcihmdW5kZXIpOwogIH0KCiAgZnVuY3Rpb24gZ2V0RnVuZGVyQ29udHJpYnV0aW9uQ2xhaW1lZChhZGRyZXNzIGFkZHIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gZnVuZGVyc1thZGRyXS5jb250cmlidXRpb25DbGFpbWVkOwogIH0KCiAgZnVuY3Rpb24gaXNGdW5kZXIoYWRkcmVzcyBhZGRyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIGZ1bmRlcnNbYWRkcl0uZXhpc3RzOwogIH0KCiAgZnVuY3Rpb24gaXNUb2tlbml6ZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgcmV0dXJuIHRva2VuaXplZDsKICB9CgogIGZ1bmN0aW9uIHNob3VsZFVwZGF0ZUZ1bmRlcihhZGRyZXNzIGZ1bmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsKICAgIHJldHVybiBnZXRXaXRoZHJhd2FsRW50cnlGb3JGdW5kZXIoZnVuZGVyKSA8IHdpdGhkcmF3YWxDb3VudGVyOwogIH0KCiAgZnVuY3Rpb24gZ2V0SG93TWFueVdpdGhkcmF3YWxzRm9yRnVuZGVyKGFkZHJlc3MgYWRkcikgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gd2l0aGRyYXdhbENvdW50ZXIuc3ViKGdldFdpdGhkcmF3YWxFbnRyeUZvckZ1bmRlcihhZGRyKSk7CiAgfQoKICAvLyBTdGF0ZSBjaGFuZ2luZyBmdW5jdGlvbnMKICBmdW5jdGlvbiBzZXRNaW5pbXVtRnVuZGluZ0Ftb3VudCh1aW50IGFtb3VudCkgZXh0ZXJuYWwgb25seUJ5QmVuZWZpY2lhcnkgewogICAgcmVxdWlyZShhbW91bnQgPiAwKTsKICAgIG1pbmltdW1GdW5kaW5nQW1vdW50ID0gYW1vdW50OwogIH0KCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBleHRlcm5hbCBvbmx5QnlCZW5lZmljaWFyeSBvbmx5QWZ0ZXJOZXh0V2l0aGRyYXdhbERhdGUgb25seVdoZW5MaXZlICB7CiAgICAvLyBDaGVjawogICAgdWludCBhbW91bnQgPSBjYWxjdWxhdGVXaXRoZHJhd2FsQW1vdW50KHRoaXMuYmFsYW5jZSk7CgogICAgLy8gRWZmZWN0cwogICAgd2l0aGRyYXdhbENvdW50ZXIgPSB3aXRoZHJhd2FsQ291bnRlci5hZGQoMSk7CiAgICBsYXN0V2l0aGRyYXdhbCA9IG5vdzsgLy8gRm9yIHRyYWNraW5nIHB1cnBvc2VzCiAgICBuZXh0V2l0aGRyYXdhbCA9IG5leHRXaXRoZHJhd2FsICsgd2l0aGRyYXdhbFBlcmlvZDsgLy8gRml4ZWQgcGVyaW9kIGluY3JlYXNlCgogICAgLy8gSW50ZXJhY3Rpb24KICAgIGJlbmVmaWNpYXJ5LnRyYW5zZmVyKGFtb3VudCk7CgogICAgV2l0aGRyYXdhbChhbW91bnQpOwogIH0KCiAgLy8gUmVmdW5kaW5nIGJ5IGZ1bmRlcgogIC8vIE9ubHkgZnVuZGVycyBjYW4gcmVmdW5kIHRoZWlyIG93biBmdW5kaW5nCiAgLy8gQ2FuIG9ubHkgYmUgc2VudCBiYWNrIHRvIHRoZSBzYW1lIGFkZHJlc3MgaXQgd2FzIGZ1bmRlZCB3aXRoCiAgLy8gV2UgYWxzbyByZW1vdmUgdGhlIGZ1bmRlciBpZiB0aGV5IHN1Y2Nlc2Z1bGx5IGV4aXQgd2l0aCB0aGVpciBmdW5kcwogIGZ1bmN0aW9uIHJlZnVuZCgpIGV4dGVybmFsIG9ubHlCeUZ1bmRlciB7CiAgICAvLyBDaGVjawogICAgdWludCB3YWxsZXRCYWxhbmNlID0gdGhpcy5iYWxhbmNlOwogICAgdWludCBhbW91bnQgPSBnZXRSZWZ1bmRBbW91bnRGb3JGdW5kZXIobXNnLnNlbmRlcik7CiAgICByZXF1aXJlKGFtb3VudCA+IDApOwoKICAgIC8vIEVmZmVjdHMKICAgIHJlbW92ZUZ1bmRlcigpOwoKICAgIC8vIEludGVyYWN0aW9uCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudCk7CgogICAgUmVmdW5kKG1zZy5zZW5kZXIsIGFtb3VudCk7CgogICAgLy8gTWFrZSBzdXJlIHRoaXMgd29ya2VkIGFzIGludGVuZGVkCiAgICBhc3NlcnQodGhpcy5iYWxhbmNlID09IHdhbGxldEJhbGFuY2UtYW1vdW50KTsKICB9CgogIC8vIFVzZWQgd2hlbiB0aGUgZnVuZGVyIHdhbnRzIHRvIHJlbW92ZSB0aGVtc2VsdmVzIGFzIGEgZnVuZGVyCiAgLy8gd2l0aG91dCByZWZ1bmRpbmcuIFRoZWlyIGV0aCBzdGF5cyBpbiB0aGUgcG9vbAogIGZ1bmN0aW9uIHJlbW92ZUZ1bmRlcigpIHB1YmxpYyBvbmx5QnlGdW5kZXIgewogICAgZGVsZXRlIGZ1bmRlcnNbbXNnLnNlbmRlcl07CiAgICB0b3RhbEN1cnJlbnRGdW5kZXJzID0gdG90YWxDdXJyZW50RnVuZGVycy5zdWIoMSk7CiAgfQoKICAvKgogICogVGhpcyBpcyBhIGJvb2trZWVwaW5nIGZ1bmN0aW9uIHdoaWNoIHVwZGF0ZXMgdGhlIHN0YXRlIGZvciB0aGUgZnVuZGVyCiAgKiB3aGVuIHRvcCB1cCB0aGVpciBmdW5kcy4KICAqLwoKICBmdW5jdGlvbiBjb25zb2xpZGF0ZUZ1bmRlcihhZGRyZXNzIGZ1bmRlciwgdWludCBuZXdQYXltZW50KSBwcml2YXRlIHsKICAgIC8vIFVwZGF0ZSBjb250cmlidXRpb24KICAgIGZ1bmRlcnNbZnVuZGVyXS5jb250cmlidXRpb24gPSBnZXRGdW5kZXJDb250cmlidXRpb24oZnVuZGVyKTsKICAgIC8vIFVwZGF0ZSBiYWxhbmNlCiAgICBmdW5kZXJzW2Z1bmRlcl0uYmFsYW5jZSA9IGdldFJlZnVuZEFtb3VudEZvckZ1bmRlcihmdW5kZXIpLmFkZChuZXdQYXltZW50KTsKICAgIC8vIFVwZGF0ZSB3aXRoZHJhd2FsIGVudHJ5CiAgICBmdW5kZXJzW2Z1bmRlcl0ud2l0aGRyYXdhbEVudHJ5ID0gd2l0aGRyYXdhbENvdW50ZXI7CiAgfQoKICBmdW5jdGlvbiBhZGRUb2tlbml6YXRpb24oc3RyaW5nIHRva2VuTmFtZSwgc3RyaW5nIHRva2VuU3ltYm9sLCB1aW50OCB0b2tlbkRlY2ltYWxzICkgZXh0ZXJuYWwgb25seUJ5QmVuZWZpY2lhcnkgewogICAgcmVxdWlyZSghaXNUb2tlbml6ZWQoKSk7CgogICAgdG9rZW5GYWN0b3J5ID0gbmV3IE1pbmlNZVRva2VuRmFjdG9yeSgpOwogICAgdG9rZW5Db250cmFjdCA9IHRva2VuRmFjdG9yeS5jcmVhdGVDbG9uZVRva2VuKDB4MCwgMCwgdG9rZW5OYW1lLCB0b2tlbkRlY2ltYWxzLCB0b2tlblN5bWJvbCwgdHJ1ZSk7CgogICAgdG9rZW5pemVkID0gdHJ1ZTsKICAgIGNhbkNsYWltVG9rZW5zID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGNsYWltVG9rZW5zKCkgZXh0ZXJuYWwgb25seUJ5RnVuZGVyIG9ubHlXaGVuVG9rZW5pemVkIHsKICAgIHJlcXVpcmUoY2FuQ2xhaW1Ub2tlbnMpOwoKICAgIHVpbnQgY29udHJpYnV0aW9uQW1vdW50ID0gZ2V0RnVuZGVyQ29udHJpYnV0aW9uKG1zZy5zZW5kZXIpOwogICAgdWludCBjb250cmlidXRpb25DbGFpbWVkQW1vdW50ID0gZ2V0RnVuZGVyQ29udHJpYnV0aW9uQ2xhaW1lZChtc2cuc2VuZGVyKTsKCiAgICAvLyBPbmx5IGNsYWltIHRva2VucyBpZiB0aGV5IGhhdmUgc29tZSBsZWZ0IHRvIGNsYWltCiAgICB1aW50IGNsYWltQW1vdW50ID0gY29udHJpYnV0aW9uQW1vdW50LnN1Yihjb250cmlidXRpb25DbGFpbWVkQW1vdW50KTsKICAgIHJlcXVpcmUoY2xhaW1BbW91bnQgPiAwKTsKCiAgICAvLyBDbGFpbSB0b2tlbnMKICAgIGZ1bmRlcnNbbXNnLnNlbmRlcl0uY29udHJpYnV0aW9uQ2xhaW1lZCA9IGNvbnRyaWJ1dGlvbkFtb3VudDsKICAgIHRva2VuQ29udHJhY3QuZ2VuZXJhdGVUb2tlbnMobXNnLnNlbmRlciwgY2xhaW1BbW91bnQpOwoKICAgIFRva2Vuc0NsYWltZWQobXNnLnNlbmRlciwgY2xhaW1BbW91bnQpOwogIH0KCiAgLyoKICAqIFRoZSBiZW5lZmljaWFyeSBjYW4gc3RvcC9lbmFibGUgZnVuZGVycyBmcm9tIGNsYWltaW5nIG1vcmUgdG9rZW5zLgogICogVGhpcyBvcGVucyB1cCBvcHBvcnR1bml0aWVzIGZvciB0b2tlbml6aW5nIG9ubHkgaGFwcGVuaW5nIGZvciBhIHNldCBwZXJpb2RzLgogICovCiAgZnVuY3Rpb24gZW5hYmxlVG9rZW5DbGFpbWluZyhib29sIF9lbmFibGVkKSBleHRlcm5hbCBvbmx5V2hlblRva2VuaXplZCBvbmx5QnlCZW5lZmljaWFyeSB7CiAgICBjYW5DbGFpbVRva2VucyA9IF9lbmFibGVkOwogIH0KCiAgLyogLS0tIFN1bnNldHRpbmcgLS0tICovCiAgLyoKICAqIFRoZSBiZW5lZmljaWFyeSBjYW4gZGVjaWRlIHRvIHN0b3AgdXNpbmcgdGhpcyBjb250cmFjdC4KICAqIFRoZXkgdXNlIHRoaXMgc3Vuc2V0IGZ1bmN0aW9uIHRvIHB1dCBpdCBpbnRvIHN1bnNldCBtb2RlLgogICogVGhlIGJlbmVmaWNpYXJ5IGNhbiB0aGVuIHN3aXBlIHJlc3Qgb2YgdGhlIGZ1bmRzIGFmdGVyIGEgc2V0IHRpbWUKICAqIGlmIGZ1bmRlcnMgaGF2ZSBub3Qgd2l0aGRyYXduIHRoZWlyIGZ1bmRzLgogICovCgogIGZ1bmN0aW9uIHN1bnNldCgpIGV4dGVybmFsIG9ubHlCeUJlbmVmaWNpYXJ5IG9ubHlXaGVuTGl2ZSB7CiAgICBzdW5zZXRXaXRoZHJhd0RhdGUgPSBub3cuYWRkKHN1bnNldFdpdGhkcmF3YWxQZXJpb2QpOwogICAgbGl2ZSA9IGZhbHNlOwoKICAgIFN1bnNldCh0cnVlKTsKICB9CgogIGZ1bmN0aW9uIHN3aXBlKGFkZHJlc3MgcmVjaXBpZW50KSBleHRlcm5hbCBvbmx5V2hlblN1bnNldCBvbmx5QnlCZW5lZmljaWFyeSB7CiAgICByZXF1aXJlKG5vdyA+PSBzdW5zZXRXaXRoZHJhd0RhdGUpOwoKICAgIHJlY2lwaWVudC50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogIH0KCiAgLyogLS0tIFRva2VuIENvbnRyYWN0IEZvcndhcmRpbmcgQ29udHJvbGxlciBGdW5jdGlvbnMgLS0tICovCiAgLyogCiAgKiBBbGxvd3MgYmVuZWZpY2lhcnkgdG8gY2FsbCB0d28gYWRkaXRpb25hbCBmdW5jdGlvbnMgb24gdGhlIHRva2VuIGNvbnRyYWN0OgogICogY2xhaW1Ub2tlbnMKICAqIGVuYWJsZWRUcmFuc2ZlcnMKICAqIAogICovCiAgZnVuY3Rpb24gdG9rZW5Db250cmFjdENsYWltVG9rZW5zKGFkZHJlc3MgX3Rva2VuKSBvbmx5QnlCZW5lZmljaWFyeSBvbmx5V2hlblRva2VuaXplZCB7CiAgICB0b2tlbkNvbnRyYWN0LmNsYWltVG9rZW5zKF90b2tlbik7CiAgfQogIGZ1bmN0aW9uIHRva2VuQ29udHJhY3RFbmFibGVUcmFuc2ZlcnMoYm9vbCBfdHJhbnNmZXJzRW5hYmxlZCkgb25seUJ5QmVuZWZpY2lhcnkgb25seVdoZW5Ub2tlbml6ZWQgewogICAgdG9rZW5Db250cmFjdC5lbmFibGVUcmFuc2ZlcnMoX3RyYW5zZmVyc0VuYWJsZWQpOwogIH0KfQ=='.
	

]
