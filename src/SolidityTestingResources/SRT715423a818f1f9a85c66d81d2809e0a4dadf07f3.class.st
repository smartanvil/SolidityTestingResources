Class {
	#name : #SRT715423a818f1f9a85c66d81d2809e0a4dadf07f3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT715423a818f1f9a85c66d81d2809e0a4dadf07f3 >> base64 [
	^ ''.
	

]
