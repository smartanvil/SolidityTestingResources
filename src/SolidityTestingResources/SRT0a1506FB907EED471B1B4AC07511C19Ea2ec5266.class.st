Class {
	#name : #SRT0a1506FB907EED471B1B4AC07511C19Ea2ec5266,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT0a1506FB907EED471B1B4AC07511C19Ea2ec5266 >> base64 [
	^ ''.
	

]
