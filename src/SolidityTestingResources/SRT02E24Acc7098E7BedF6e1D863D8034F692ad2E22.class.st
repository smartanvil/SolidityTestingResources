Class {
	#name : #SRT02E24Acc7098E7BedF6e1D863D8034F692ad2E22,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT02E24Acc7098E7BedF6e1D863D8034F692ad2E22 >> base64 [
	^ ''.
	

]
