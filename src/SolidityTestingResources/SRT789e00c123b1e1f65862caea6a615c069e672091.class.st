Class {
	#name : #SRT789e00c123b1e1f65862caea6a615c069e672091,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT789e00c123b1e1f65862caea6a615c069e672091 >> base64 [
	^ ''.
	

]
