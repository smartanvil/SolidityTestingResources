Class {
	#name : #SRTf699e3b6c47561b1f467c822cb387867e726834a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf699e3b6c47561b1f467c822cb387867e726834a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMjA7Ci8vIGJsYXplIGl0IGZndCBeCgovKgoqIFRlYW0gSlVTVCBwcmVzZW50cy4uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLC0tLS0sICAgICAgICAgICAgICAgICwtLS0tLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgLC0tLS5fICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsLyAgIC5gfCAgICAgICAgICAgICAgLC8gICAuYHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAuLS0gLS4nIFwgICAgICAgICAgICAgICAgLi0tLi0tLiAgICAgICxgICAgLicgIDogICAgICAgICAgICAsYCAgIC4nICA6ICAgICAgICAgICAgICAsLS4gICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgfCAgICB8ICAgOiAgICAgICAgICwtLSwgLyAgLyAgICAnLiAgOyAgICA7ICAgICAvICAgICAgICAgIDsgICAgOyAgICAgLyAgICAgICAgICAsLS0vIC98ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgIDogICAgOyAgIHwgICAgICAgLCdfIC98fCAgOiAgL2AuIC8uJ19fXywvICAgICwnICAgICAgICAgLidfX18sLyAgICAsJyAgLC0tLS4gICwtLS4gOi8gfCAgICAgICAgICAgICAgICAsLS0tLCAgCiAgICAgICA6ICAgICAgICB8ICAuLS0uIHwgIHwgOjsgIHwgIHwtLWAgfCAgICA6ICAgICB8ICAgICAgICAgIHwgICAgOiAgICAgfCAgJyAgICwnXCA6ICA6ICcgLyAgICAgICAgICAgICAsLSstLiAvICB8IAogICAgICAgfCAgICA6ICAgOiwnXyAvfCA6ICAuIHx8ICA6ICA7XyAgIDsgICAgfC4nOyAgOyAgICAgICAgICA7ICAgIHwuJzsgIDsgLyAgIC8gICB8fCAgJyAgLyAgICAgICwtLS0uICAsLS0uJ3wnICAgfCAKICAgICAgIDogICAgICAgICB8ICAnIHwgfCAgLiAuIFwgIFwgICAgYC5gLS0tLScgIHwgIHwgICAgICAgICAgYC0tLS0nICB8ICB8LiAgIDsgLC4gOicgIHwgIDogICAgIC8gICAgIFx8ICAgfCAgLCInIHwgCiAgICAgICB8ICAgIDsgICB8fCAgfCAnIHwgIHwgfCAgYC0tLS0uICAgXCAgICcgICA6ICA7ICAgICAgICAgICAgICAnICAgOiAgOycgICB8IHw6IDp8ICB8ICAgXCAgIC8gICAgLyAgfCAgIHwgLyAgfCB8IAogICBfX18gbCAgICAgICAgIDogIHwgfCA6ICAnIDsgIF9fIFwgIFwgIHwgICB8ICAgfCAgJyAgICAgICAgICAgICAgfCAgIHwgICcnICAgfCAuOyA6JyAgOiB8LiBcIC4gICAgJyAvIHwgICB8IHwgIHwgfCAKIC8gICAgL1wgICAgSiAgIDp8ICA7ICcgfCAgfCAnIC8gIC9gLS0nICAvICAgJyAgIDogIHwgICAgICAgICAgICAgICcgICA6ICB8fCAgIDogICAgfHwgIHwgJyBcIFwnICAgOyAgIC98ICAgfCB8ICB8LyAgCi8gIC4uLyAgYC4uLSAgICAsOiAgfCA6IDsgIDsgfCctLScuICAgICAvICAgIDsgICB8LicgICAgICAgICAgICAgICA7ICAgfC4nICBcICAgXCAgLyAnICA6IHwtLScgJyAgIHwgIC8gfCAgIHwgfC0tJyAgIApcICAgIFwgICAgICAgICA7ICcgIDogIGAtLScgICBcIGAtLSctLS0nICAgICAnLS0tJyAgICAgICAgICAgICAgICAgJy0tLScgICAgIGAtLS0tJyAgOyAgfCwnICAgIHwgICA6ICAgIHwgICB8LyAgICAgICAKIFwgICAgXCAgICAgICwnICA6ICAsICAgICAgLi0uLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctLScgICAgICAgXCAgIFwgIC8nLS0tJyAgICAgICAgCiAgIi0tLS4uLi4tLScgICAgIGAtLWAtLS0tJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLS0tLScgICAgICAgICAgICAgIAoqIC0+IFdoYXQ/CiogW3hdIElmICB5b3UgYXJlIHJlYWRpbmcgdGhpcyBpdCBtZWFucyB5b3UgaGF2ZSBiZWVuIEpVU1RFRAoqIFt4XSBJdCBsb29rcyBsaWtlIGFuIGV4cGxvaXQgaW4gdGhlIHdheSBFUkMyMCBpcyBpbmRleGVkIG9uIEV0aGVyc2NhbiBhbGxvd3MgbWFsaWNpb3VzIHVzZXJzIHRvIHZpcmFsbHkgYWR2ZXJ0aXNlIGJ5IGRlcGxveWluZyBjb250cmFjdHMgdGhhdCBsb29rIGxpa2UgdGhpcy4KKiBbeF0gWW91IHByZXR0eSBtdWNoIG93biB0aGlzIHRva2VuIGZvcmV2ZXIsIHdpdGggbm90aGluZyB5b3UgY2FuIGRvIGFib3V0IGl0IHVudGlsIHdlIHB1bGwgdGhlIFVOSlVTVCgpIGZ1bmN0aW9uLgoqIFt4XSBKdXN0IHRyeSB0byB0cmFuc2ZlciBpdCBhd2F5LCB3ZSBkYXJlIHlvdSEKKiBbeF0gSXQncyBraW5kYSBsaWtlIHNoaXRwb3N0aW5nIG9uIHRoZSBibG9ja2NoYWluCiogW3hdIFBscyBmaXggUGFwYSBWaXRhbGlrCiogW3hdIEFsc28gd2UgbG92ZSB5b3VyIHNoaXJ0cy4KKgoqCiogQWxzbyB3ZSdyZSByZXF1aXJlZCB0byB2aXJhbGx5IGFkdmVydGlzZS4KKiBTb3JyeSBpdHMgYSByZXF1aXJlbWVudAoqIFlvdSB1bmRlcnN0YW5kCioKKiBCcm91Z2h0IHRvIHlvdSBieSB0aGUgRGV2ZWxvcGVycyBvZiBQb3doLmlvCiogVGhlIGZpcnN0IHRocmVlIGRpbWVuc2lvbmFsIGNyeXB0b2N1cnJlbmN5LgoqIGh0dHBzOi8vZGlzY29yZC5nZy9LSjl3Skc4CiovCgpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAqLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYAogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwoKICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucwogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2ZlcgogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgLy8gc29saGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaW1wbGUtZXZlbnQtZnVuYy1uYW1lICAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOyAKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9CgoKY29udHJhY3QgSlVTVCBpcyBFUkMyMEludGVyZmFjZSB7CiAgICAKICAgIC8vIFN0YW5kYXJkIEVSQzIwCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiSlVTVCB3d3cucG93aC5pbyI7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAxODsgICAgICAgICAgICAgICAgCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJKVVNUIHBvd2guaW8iOwogICAgCiAgICAvLyBEZWZhdWx0IGJhbGFuY2UKICAgIHVpbnQyNTYgcHVibGljIHN0ZEJhbGFuY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBib251czsKICAgIAogICAgLy8gT3duZXIKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwogICAgYm9vbCBwdWJsaWMgSlVTVGVkOwogICAgCiAgICAvLyBQU0EKICAgIGV2ZW50IE1lc3NhZ2Uoc3RyaW5nIG1lc3NhZ2UpOwogICAgCgogICAgZnVuY3Rpb24gSlVTVCgpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIHRvdGFsU3VwcGx5ID0gMTMzNyAqIDFlMTg7CiAgICAgICAgc3RkQmFsYW5jZSA9IDIzMiAqIDFlMTg7CiAgICAgICAgSlVTVGVkID0gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBEdWUgdG8gdGhlIHByZXNlbmNlIG9mIHRoaXMgZnVuY3Rpb24sIGl0IGlzIGNvbnNpZGVyZWQgYSB2YWxpZCBFUkMyMCB0b2tlbi4KICAgICAqIEhvd2V2ZXIsIGR1ZSB0byBhIGxhY2sgb2YgYWN0dWFsIGZ1bmN0aW9uYWxpdHkgdG8gc3VwcG9ydCB0aGlzIGZ1bmN0aW9uLCB5b3UgY2FuIG5ldmVyIHJlbW92ZSB0aGlzIHRva2VuIGZyb20geW91ciBiYWxhbmNlLgogICAgICogUklQLgogICAgICovCiAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkKICAgICAgICBwdWJsaWMKICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpCiAgICB7CiAgICAgICAgYm9udXNbbXNnLnNlbmRlcl0gPSBib251c1ttc2cuc2VuZGVyXSArIDFlMTg7CiAgICAgICAgTWVzc2FnZSgiKzEgdG9rZW4gZm9yIHlvdS4iKTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKICAgIC8qKgogICAgICogRHVlIHRvIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGZ1bmN0aW9uLCBpdCBpcyBjb25zaWRlcmVkIGEgdmFsaWQgRVJDMjAgdG9rZW4uCiAgICAgKiBIb3dldmVyLCBkdWUgdG8gYSBsYWNrIG9mIGFjdHVhbCBmdW5jdGlvbmFsaXR5IHRvIHN1cHBvcnQgdGhpcyBmdW5jdGlvbiwgeW91IGNhbiBuZXZlciByZW1vdmUgdGhpcyB0b2tlbiBmcm9tIHlvdXIgYmFsYW5jZS4KICAgICAqIFJJUC4KICAgICAqLwogICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQogICAgICAgIHB1YmxpYwogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykKICAgIHsKICAgICAgICBib251c1ttc2cuc2VuZGVyXSA9IGJvbnVzW21zZy5zZW5kZXJdICsgMWUxODsKICAgICAgICBNZXNzYWdlKCIrMSB0b2tlbiBmb3IgeW91LiIpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBPbmNlIHdlIGhhdmUgc3VmZmljaWVudGx5IGRlbW9uc3RyYXRlZCBob3cgdGhpcyAnZXhwbG9pdCcgaXMgZGV0cmltZW50YWwgdG8gRXRoZXJlc2Nhbiwgd2UgY2FuIGRpc2FibGUgdGhlIHRva2VuIGFuZCByZW1vdmUgaXQgZnJvbSBldmVyeW9uZSdzIGJhbGFuY2UuCiAgICAgKiBPdXIgaW50ZW50aW9uIGZvciB0aGlzICJ0b2tlbiIgaXMgdG8gcHJldmVudCBhIHNpbWlsYXIgYnV0IG1vcmUgaGFybWZ1bCBwcm9qZWN0IGluIHRoZSBmdXR1cmUgdGhhdCBkb2Vzbid0IGhhdmUgeW91ciBiZXN0IGludGVudGlvbnMgaW4gbWluZC4KICAgICAqLwogICAgZnVuY3Rpb24gVU5KVVNUKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQyNTYgX3N0ZEJhbGFuY2UsIHVpbnQyNTYgX3RvdGFsU3VwcGx5LCBib29sIF9KVVNUZWQpCiAgICAgICAgcHVibGljCiAgICB7CiAgICAgICAgcmVxdWlyZShvd25lciA9PSBtc2cuc2VuZGVyKTsKICAgICAgICBuYW1lID0gX25hbWU7CiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsKICAgICAgICBzdGRCYWxhbmNlID0gX3N0ZEJhbGFuY2U7CiAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7CiAgICAgICAgSlVTVGVkID0gX0pVU1RlZDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBFdmVyeW9uZSBoYXMgdG9rZW5zIQogICAgICogLi4uIHVudGlsIHdlIGRlY2lkZSB5b3UgZG9uJ3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3IAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkKICAgIHsKICAgICAgICBpZihKVVNUZWQpewogICAgICAgICAgICBpZihib251c1ttc2cuc2VuZGVyXSA+IDApewogICAgICAgICAgICAgICAgcmV0dXJuIHN0ZEJhbGFuY2UgKyBib251c1ttc2cuc2VuZGVyXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBzdGRCYWxhbmNlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKQogICAgewogICAgICAgIHJldHVybiAwOwogICAgfQogICAgCiAgICAvLyBpbiBjYXNlIHNvbWVvbmUgYWNjaWRlbnRhbGx5IHNlbmRzIEVUSCB0byB0aGlzIGNvbnRyYWN0LgogICAgZnVuY3Rpb24oKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICBvd25lci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgICAgIE1lc3NhZ2UoIlRoYW5rcyBmb3IgeW91ciBkb25hdGlvbi4iKTsKICAgIH0KICAgIAogICAgLy8gaW4gY2FzZSBzb21lIGFjY2lkZW50YWxseSBzZW5kcyBvdGhlciB0b2tlbnMgdG8gdGhpcyBjb250cmFjdC4KICAgIGZ1bmN0aW9uIHJlc2N1ZVRva2VucyhhZGRyZXNzIF9hZGRyZXNzLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCiAgICAgICAgcmV0dXJucyAoYm9vbCkKICAgIHsKICAgICAgICByZXR1cm4gRVJDMjBJbnRlcmZhY2UoX2FkZHJlc3MpLnRyYW5zZmVyKG93bmVyLCBfYW1vdW50KTsKICAgIH0KfQ=='.
	

]
