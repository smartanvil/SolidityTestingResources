Class {
	#name : #SRT62590a381465eeb2c909787fc927d150ce340d5b,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT62590a381465eeb2c909787fc927d150ce340d5b >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovLy8gQHRpdGxlIEludGVyZmFjZSBmb3IgY29udHJhY3RzIGNvbmZvcm1pbmcgdG8gRVJDLTcyMTogTm9uLUZ1bmdpYmxlIFRva2VucwovLy8gQGF1dGhvciBFdGhlcm5hdXRzCmNvbnRyYWN0IEVSQzcyMSB7CiAgICAvLyBSZXF1aXJlZCBtZXRob2RzCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpOwogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgZXh0ZXJuYWw7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIGV4dGVybmFsOwogICAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CgogICAgLy8gRXZlbnRzCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdG9rZW5JZCk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwoKICAgIC8vIE9wdGlvbmFsCiAgICAvLyBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIG5hbWUpOwogICAgLy8gZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIHN5bWJvbCk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbnNPZk93bmVyKGFkZHJlc3MgX293bmVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSB0b2tlbklkcyk7CiAgICAvLyBmdW5jdGlvbiB0b2tlbk1ldGFkYXRhKHVpbnQyNTYgX3Rva2VuSWQsIHN0cmluZyBfcHJlZmVycmVkVHJhbnNwb3J0KSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgaW5mb1VybCk7CgogICAgLy8gRVJDLTE2NSBDb21wYXRpYmlsaXR5IChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTY1KQogICAgZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IF9pbnRlcmZhY2VJRCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChib29sKTsKfQoKCgoKLy8gRXh0ZW5kIHRoaXMgbGlicmFyeSBmb3IgY2hpbGQgY29udHJhY3RzCmxpYnJhcnkgU2FmZU1hdGggewoKICAgIC8qKgogICAgKiBAZGV2IE11bHRpcGxpZXMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGlmIChhID09IDApIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChjIC8gYSA9PSBiKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICAvKioKICAgICogQGRldiBJbnRlZ2VyIGRpdmlzaW9uIG9mIHR3byBudW1iZXJzLCB0cnVuY2F0aW5nIHRoZSBxdW90aWVudC4KICAgICovCiAgICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMAogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgLyoqCiAgICAqIEBkZXYgU3Vic3RyYWN0cyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93IChpLmUuIGlmIHN1YnRyYWhlbmQgaXMgZ3JlYXRlciB0aGFuIG1pbnVlbmQpLgogICAgKi8KICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IEFkZHMgdHdvIG51bWJlcnMsIHRocm93cyBvbiBvdmVyZmxvdy4KICAgICovCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IENvbXBhcmEgdHdvIG51bWJlcnMsIGFuZCByZXR1cm4gdGhlIGJpZ2dlciBvbmUuCiAgICAqLwogICAgZnVuY3Rpb24gbWF4KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA+IGIpIHsKICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGI7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgKiBAZGV2IENvbXBhcmEgdHdvIG51bWJlcnMsIGFuZCByZXR1cm4gdGhlIGJpZ2dlciBvbmUuCiAgICAqLwogICAgZnVuY3Rpb24gbWluKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA8IGIpIHsKICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGI7CiAgICAgICAgfQogICAgfQoKCn0KCi8vLyBAdGl0bGUgQXVjdGlvbiBDb3JlCi8vLyBAZGV2IENvbnRhaW5zIG1vZGVscywgdmFyaWFibGVzLCBhbmQgaW50ZXJuYWwgbWV0aG9kcyBmb3IgdGhlIGF1Y3Rpb24uCi8vLyBAbm90aWNlIFdlIG9taXQgYSBmYWxsYmFjayBmdW5jdGlvbiB0byBwcmV2ZW50IGFjY2lkZW50YWwgc2VuZHMgdG8gdGhpcyBjb250cmFjdC4KY29udHJhY3QgQ2xvY2tBdWN0aW9uQmFzZSB7CgogICAgLy8gUmVwcmVzZW50cyBhbiBhdWN0aW9uIG9uIGFuIE5GVAogICAgc3RydWN0IEF1Y3Rpb24gewogICAgICAgIC8vIEN1cnJlbnQgb3duZXIgb2YgTkZUCiAgICAgICAgYWRkcmVzcyBzZWxsZXI7CiAgICAgICAgLy8gUHJpY2UgKGluIHdlaSkgYXQgYmVnaW5uaW5nIG9mIGF1Y3Rpb24KICAgICAgICB1aW50MTI4IHN0YXJ0aW5nUHJpY2U7CiAgICAgICAgLy8gUHJpY2UgKGluIHdlaSkgYXQgZW5kIG9mIGF1Y3Rpb24KICAgICAgICB1aW50MTI4IGVuZGluZ1ByaWNlOwogICAgICAgIC8vIER1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiBhdWN0aW9uCiAgICAgICAgdWludDY0IGR1cmF0aW9uOwogICAgICAgIC8vIFRpbWUgd2hlbiBhdWN0aW9uIHN0YXJ0ZWQKICAgICAgICAvLyBOT1RFOiAwIGlmIHRoaXMgYXVjdGlvbiBoYXMgYmVlbiBjb25jbHVkZWQKICAgICAgICB1aW50NjQgc3RhcnRlZEF0OwogICAgfQoKICAgIC8vIFJlZmVyZW5jZSB0byBjb250cmFjdCB0cmFja2luZyBORlQgb3duZXJzaGlwCiAgICBFUkM3MjEgcHVibGljIG5vbkZ1bmdpYmxlQ29udHJhY3Q7CgogICAgLy8gQ3V0IG93bmVyIHRha2VzIG9uIGVhY2ggYXVjdGlvbiwgbWVhc3VyZWQgaW4gYmFzaXMgcG9pbnRzICgxLzEwMCBvZiBhIHBlcmNlbnQpLgogICAgLy8gVmFsdWVzIDAtMTAsMDAwIG1hcCB0byAwJS0xMDAlCiAgICB1aW50MjU2IHB1YmxpYyBvd25lckN1dDsKCiAgICAvLyBNYXAgZnJvbSB0b2tlbiBJRCB0byB0aGVpciBjb3JyZXNwb25kaW5nIGF1Y3Rpb24uCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IEF1Y3Rpb24pIHRva2VuSWRUb0F1Y3Rpb247CgogICAgZXZlbnQgQXVjdGlvbkNyZWF0ZWQodWludDI1NiB0b2tlbklkLCB1aW50MjU2IHN0YXJ0aW5nUHJpY2UsIHVpbnQyNTYgZW5kaW5nUHJpY2UsIHVpbnQyNTYgZHVyYXRpb24pOwogICAgZXZlbnQgQXVjdGlvblN1Y2Nlc3NmdWwodWludDI1NiB0b2tlbklkLCB1aW50MjU2IHRvdGFsUHJpY2UsIGFkZHJlc3Mgd2lubmVyKTsKICAgIGV2ZW50IEF1Y3Rpb25DYW5jZWxsZWQodWludDI1NiB0b2tlbklkKTsKCiAgICAvLy8gQGRldiBSZXR1cm5zIHRydWUgaWYgdGhlIGNsYWltYW50IG93bnMgdGhlIHRva2VuLgogICAgLy8vIEBwYXJhbSBfY2xhaW1hbnQgLSBBZGRyZXNzIGNsYWltaW5nIHRvIG93biB0aGUgdG9rZW4uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gd2hvc2Ugb3duZXJzaGlwIHRvIHZlcmlmeS4KICAgIGZ1bmN0aW9uIF9vd25zKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gKG5vbkZ1bmdpYmxlQ29udHJhY3Qub3duZXJPZihfdG9rZW5JZCkgPT0gX2NsYWltYW50KTsKICAgIH0KCiAgICAvLy8gQGRldiBUcmFuc2ZlcnMgYW4gTkZUIG93bmVkIGJ5IHRoaXMgY29udHJhY3QgdG8gYW5vdGhlciBhZGRyZXNzLgogICAgLy8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgc3VjY2VlZHMuCiAgICAvLy8gQHBhcmFtIF9yZWNlaXZlciAtIEFkZHJlc3MgdG8gdHJhbnNmZXIgTkZUIHRvLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIHRva2VuIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gaXQgd2lsbCB0aHJvdyBpZiB0cmFuc2ZlciBmYWlscwogICAgICAgIG5vbkZ1bmdpYmxlQ29udHJhY3QudHJhbnNmZXIoX3JlY2VpdmVyLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBkZXYgQWRkcyBhbiBhdWN0aW9uIHRvIHRoZSBsaXN0IG9mIG9wZW4gYXVjdGlvbnMuIEFsc28gZmlyZXMgdGhlCiAgICAvLy8gIEF1Y3Rpb25DcmVhdGVkIGV2ZW50LgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHB1dCBvbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfYXVjdGlvbiBBdWN0aW9uIHRvIGFkZC4KICAgIGZ1bmN0aW9uIF9hZGRBdWN0aW9uKHVpbnQyNTYgX3Rva2VuSWQsIEF1Y3Rpb24gX2F1Y3Rpb24pIGludGVybmFsIHsKICAgICAgICAvLyBSZXF1aXJlIHRoYXQgYWxsIGF1Y3Rpb25zIGhhdmUgYSBkdXJhdGlvbiBvZgogICAgICAgIC8vIGF0IGxlYXN0IG9uZSBtaW51dGUuIChLZWVwcyBvdXIgbWF0aCBmcm9tIGdldHRpbmcgaGFpcnkhKQogICAgICAgIHJlcXVpcmUoX2F1Y3Rpb24uZHVyYXRpb24gPj0gMSBtaW51dGVzKTsKCiAgICAgICAgdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF0gPSBfYXVjdGlvbjsKCiAgICAgICAgQXVjdGlvbkNyZWF0ZWQoCiAgICAgICAgICAgIHVpbnQyNTYoX3Rva2VuSWQpLAogICAgICAgICAgICB1aW50MjU2KF9hdWN0aW9uLnN0YXJ0aW5nUHJpY2UpLAogICAgICAgICAgICB1aW50MjU2KF9hdWN0aW9uLmVuZGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDI1NihfYXVjdGlvbi5kdXJhdGlvbikKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IENhbmNlbHMgYW4gYXVjdGlvbiB1bmNvbmRpdGlvbmFsbHkuCiAgICBmdW5jdGlvbiBfY2FuY2VsQXVjdGlvbih1aW50MjU2IF90b2tlbklkLCBhZGRyZXNzIF9zZWxsZXIpIGludGVybmFsIHsKICAgICAgICBfcmVtb3ZlQXVjdGlvbihfdG9rZW5JZCk7CiAgICAgICAgX3RyYW5zZmVyKF9zZWxsZXIsIF90b2tlbklkKTsKICAgICAgICBBdWN0aW9uQ2FuY2VsbGVkKF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBDb21wdXRlcyB0aGUgcHJpY2UgYW5kIHRyYW5zZmVycyB3aW5uaW5ncy4KICAgIC8vLyBEb2VzIE5PVCB0cmFuc2ZlciBvd25lcnNoaXAgb2YgdG9rZW4uCiAgICBmdW5jdGlvbiBfYmlkKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQyNTYgX2JpZEFtb3VudCkKICAgIGludGVybmFsCiAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgYXVjdGlvbiBzdHJ1Y3QKICAgICAgICBBdWN0aW9uIHN0b3JhZ2UgYXVjdGlvbiA9IHRva2VuSWRUb0F1Y3Rpb25bX3Rva2VuSWRdOwoKICAgICAgICAvLyBFeHBsaWNpdGx5IGNoZWNrIHRoYXQgdGhpcyBhdWN0aW9uIGlzIGN1cnJlbnRseSBsaXZlLgogICAgICAgIC8vIChCZWNhdXNlIG9mIGhvdyBFdGhlcmV1bSBtYXBwaW5ncyB3b3JrLCB3ZSBjYW4ndCBqdXN0IGNvdW50CiAgICAgICAgLy8gb24gdGhlIGxvb2t1cCBhYm92ZSBmYWlsaW5nLiBBbiBpbnZhbGlkIF90b2tlbklkIHdpbGwganVzdAogICAgICAgIC8vIHJldHVybiBhbiBhdWN0aW9uIG9iamVjdCB0aGF0IGlzIGFsbCB6ZXJvcy4pCiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwoKICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBiaWQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBjdXJyZW50IHByaWNlCiAgICAgICAgdWludDI1NiBwcmljZSA9IF9jdXJyZW50UHJpY2UoYXVjdGlvbik7CiAgICAgICAgcmVxdWlyZShfYmlkQW1vdW50ID49IHByaWNlKTsKCiAgICAgICAgLy8gR3JhYiBhIHJlZmVyZW5jZSB0byB0aGUgc2VsbGVyIGJlZm9yZSB0aGUgYXVjdGlvbiBzdHJ1Y3QKICAgICAgICAvLyBnZXRzIGRlbGV0ZWQuCiAgICAgICAgYWRkcmVzcyBzZWxsZXIgPSBhdWN0aW9uLnNlbGxlcjsKCiAgICAgICAgLy8gVGhlIGJpZCBpcyBnb29kISBSZW1vdmUgdGhlIGF1Y3Rpb24gYmVmb3JlIHNlbmRpbmcgdGhlIGZlZXMKICAgICAgICAvLyB0byB0aGUgc2VuZGVyIHNvIHdlIGNhbid0IGhhdmUgYSByZWVudHJhbmN5IGF0dGFjay4KICAgICAgICBfcmVtb3ZlQXVjdGlvbihfdG9rZW5JZCk7CgogICAgICAgIC8vIFRyYW5zZmVyIHByb2NlZWRzIHRvIHNlbGxlciAoaWYgdGhlcmUgYXJlIGFueSEpCiAgICAgICAgaWYgKHByaWNlID4gMCkgewogICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGF1Y3Rpb25lZXIncyBjdXQuCiAgICAgICAgICAgIC8vIChOT1RFOiBfY29tcHV0ZUN1dCgpIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIGEKICAgICAgICAgICAgLy8gdmFsdWUgPD0gcHJpY2UsIHNvIHRoaXMgc3VidHJhY3Rpb24gY2FuJ3QgZ28gbmVnYXRpdmUuKQogICAgICAgICAgICB1aW50MjU2IGF1Y3Rpb25lZXJDdXQgPSBfY29tcHV0ZUN1dChwcmljZSk7CiAgICAgICAgICAgIHVpbnQyNTYgc2VsbGVyUHJvY2VlZHMgPSBwcmljZSAtIGF1Y3Rpb25lZXJDdXQ7CgogICAgICAgICAgICAvLyBOT1RFOiBEb2luZyBhIHRyYW5zZmVyKCkgaW4gdGhlIG1pZGRsZSBvZiBhIGNvbXBsZXgKICAgICAgICAgICAgLy8gbWV0aG9kIGxpa2UgdGhpcyBpcyBnZW5lcmFsbHkgZGlzY291cmFnZWQgYmVjYXVzZSBvZgogICAgICAgICAgICAvLyByZWVudHJhbmN5IGF0dGFja3MgYW5kIERvUyBhdHRhY2tzIGlmIHRoZSBzZWxsZXIgaXMKICAgICAgICAgICAgLy8gYSBjb250cmFjdCB3aXRoIGFuIGludmFsaWQgZmFsbGJhY2sgZnVuY3Rpb24uIFdlIGV4cGxpY2l0bHkKICAgICAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCByZWVudHJhbmN5IGF0dGFja3MgYnkgcmVtb3ZpbmcgdGhlIGF1Y3Rpb24KICAgICAgICAgICAgLy8gYmVmb3JlIGNhbGxpbmcgdHJhbnNmZXIoKSwgYW5kIHRoZSBvbmx5IHRoaW5nIHRoZSBzZWxsZXIKICAgICAgICAgICAgLy8gY2FuIERvUyBpcyB0aGUgc2FsZSBvZiB0aGVpciBvd24gYXNzZXQhIChBbmQgaWYgaXQncyBhbgogICAgICAgICAgICAvLyBhY2NpZGVudCwgdGhleSBjYW4gY2FsbCBjYW5jZWxBdWN0aW9uKCkuICkKICAgICAgICAgICAgc2VsbGVyLnRyYW5zZmVyKHNlbGxlclByb2NlZWRzKTsKICAgICAgICB9CgogICAgICAgIC8vIENhbGN1bGF0ZSBhbnkgZXhjZXNzIGZ1bmRzIGluY2x1ZGVkIHdpdGggdGhlIGJpZC4gSWYgdGhlIGV4Y2VzcwogICAgICAgIC8vIGlzIGFueXRoaW5nIHdvcnRoIHdvcnJ5aW5nIGFib3V0LCB0cmFuc2ZlciBpdCBiYWNrIHRvIGJpZGRlci4KICAgICAgICAvLyBOT1RFOiBXZSBjaGVja2VkIGFib3ZlIHRoYXQgdGhlIGJpZCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIG9yCiAgICAgICAgLy8gZXF1YWwgdG8gdGhlIHByaWNlIHNvIHRoaXMgY2Fubm90IHVuZGVyZmxvdy4KICAgICAgICB1aW50MjU2IGJpZEV4Y2VzcyA9IF9iaWRBbW91bnQgLSBwcmljZTsKCiAgICAgICAgLy8gUmV0dXJuIHRoZSBmdW5kcy4gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgdHJhbnNmZXIsIHRoaXMgaXMKICAgICAgICAvLyBub3Qgc3VzY2VwdGlibGUgdG8gYSByZS1lbnRyeSBhdHRhY2sgYmVjYXVzZSB0aGUgYXVjdGlvbiBpcwogICAgICAgIC8vIHJlbW92ZWQgYmVmb3JlIGFueSB0cmFuc2ZlcnMgb2NjdXIuCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihiaWRFeGNlc3MpOwoKICAgICAgICAvLyBUZWxsIHRoZSB3b3JsZCEKICAgICAgICBBdWN0aW9uU3VjY2Vzc2Z1bChfdG9rZW5JZCwgcHJpY2UsIG1zZy5zZW5kZXIpOwoKICAgICAgICByZXR1cm4gcHJpY2U7CiAgICB9CgogICAgLy8vIEBkZXYgUmVtb3ZlcyBhbiBhdWN0aW9uIGZyb20gdGhlIGxpc3Qgb2Ygb3BlbiBhdWN0aW9ucy4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiBORlQgb24gYXVjdGlvbi4KICAgIGZ1bmN0aW9uIF9yZW1vdmVBdWN0aW9uKHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHsKICAgICAgICBkZWxldGUgdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0cnVlIGlmIHRoZSBORlQgaXMgb24gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2F1Y3Rpb24gLSBBdWN0aW9uIHRvIGNoZWNrLgogICAgZnVuY3Rpb24gX2lzT25BdWN0aW9uKEF1Y3Rpb24gc3RvcmFnZSBfYXVjdGlvbikgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChfYXVjdGlvbi5zdGFydGVkQXQgPiAwKTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGN1cnJlbnQgcHJpY2Ugb2YgYW4gTkZUIG9uIGF1Y3Rpb24uIEJyb2tlbiBpbnRvIHR3bwogICAgLy8vICBmdW5jdGlvbnMgKHRoaXMgb25lLCB0aGF0IGNvbXB1dGVzIHRoZSBkdXJhdGlvbiBmcm9tIHRoZSBhdWN0aW9uCiAgICAvLy8gIHN0cnVjdHVyZSwgYW5kIHRoZSBvdGhlciB0aGF0IGRvZXMgdGhlIHByaWNlIGNvbXB1dGF0aW9uKSBzbyB3ZQogICAgLy8vICBjYW4gZWFzaWx5IHRlc3QgdGhhdCB0aGUgcHJpY2UgY29tcHV0YXRpb24gd29ya3MgY29ycmVjdGx5LgogICAgZnVuY3Rpb24gX2N1cnJlbnRQcmljZShBdWN0aW9uIHN0b3JhZ2UgX2F1Y3Rpb24pCiAgICBpbnRlcm5hbAogICAgdmlldwogICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICB1aW50MjU2IHNlY29uZHNQYXNzZWQgPSAwOwoKICAgICAgICAvLyBBIGJpdCBvZiBpbnN1cmFuY2UgYWdhaW5zdCBuZWdhdGl2ZSB2YWx1ZXMgKG9yIHdyYXBhcm91bmQpLgogICAgICAgIC8vIFByb2JhYmx5IG5vdCBuZWNlc3NhcnkgKHNpbmNlIEV0aGVyZXVtIGd1YXJuYXRlZXMgdGhhdCB0aGUKICAgICAgICAvLyBub3cgdmFyaWFibGUgZG9lc24ndCBldmVyIGdvIGJhY2t3YXJkcykuCiAgICAgICAgaWYgKG5vdyA+IF9hdWN0aW9uLnN0YXJ0ZWRBdCkgewogICAgICAgICAgICBzZWNvbmRzUGFzc2VkID0gbm93IC0gX2F1Y3Rpb24uc3RhcnRlZEF0OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9jb21wdXRlQ3VycmVudFByaWNlKAogICAgICAgICAgICBfYXVjdGlvbi5zdGFydGluZ1ByaWNlLAogICAgICAgICAgICBfYXVjdGlvbi5lbmRpbmdQcmljZSwKICAgICAgICAgICAgX2F1Y3Rpb24uZHVyYXRpb24sCiAgICAgICAgICAgIHNlY29uZHNQYXNzZWQKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IENvbXB1dGVzIHRoZSBjdXJyZW50IHByaWNlIG9mIGFuIGF1Y3Rpb24uIEZhY3RvcmVkIG91dAogICAgLy8vICBmcm9tIF9jdXJyZW50UHJpY2Ugc28gd2UgY2FuIHJ1biBleHRlbnNpdmUgdW5pdCB0ZXN0cy4KICAgIC8vLyAgV2hlbiB0ZXN0aW5nLCBtYWtlIHRoaXMgZnVuY3Rpb24gcHVibGljIGFuZCB0dXJuIG9uCiAgICAvLy8gIGBDdXJyZW50IHByaWNlIGNvbXB1dGF0aW9uYCB0ZXN0IHN1aXRlLgogICAgZnVuY3Rpb24gX2NvbXB1dGVDdXJyZW50UHJpY2UoCiAgICAgICAgdWludDI1NiBfc3RhcnRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9lbmRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9kdXJhdGlvbiwKICAgICAgICB1aW50MjU2IF9zZWNvbmRzUGFzc2VkCiAgICApCiAgICBpbnRlcm5hbAogICAgcHVyZQogICAgcmV0dXJucyAodWludDI1NikKICAgIHsKICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgU2FmZU1hdGggKG9yIHNpbWlsYXIpIGluIHRoaXMgZnVuY3Rpb24gYmVjYXVzZQogICAgICAgIC8vICBhbGwgb2Ygb3VyIHB1YmxpYyBmdW5jdGlvbnMgY2FyZWZ1bGx5IGNhcCB0aGUgbWF4aW11bSB2YWx1ZXMgZm9yCiAgICAgICAgLy8gIHRpbWUgKGF0IDY0LWJpdHMpIGFuZCBjdXJyZW5jeSAoYXQgMTI4LWJpdHMpLiBfZHVyYXRpb24gaXMKICAgICAgICAvLyAgYWxzbyBrbm93biB0byBiZSBub24temVybyAoc2VlIHRoZSByZXF1aXJlKCkgc3RhdGVtZW50IGluCiAgICAgICAgLy8gIF9hZGRBdWN0aW9uKCkpCiAgICAgICAgaWYgKF9zZWNvbmRzUGFzc2VkID49IF9kdXJhdGlvbikgewogICAgICAgICAgICAvLyBXZSd2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGR5bmFtaWMgcHJpY2luZyBwb3J0aW9uCiAgICAgICAgICAgIC8vIG9mIHRoZSBhdWN0aW9uLCBqdXN0IHJldHVybiB0aGUgZW5kIHByaWNlLgogICAgICAgICAgICByZXR1cm4gX2VuZGluZ1ByaWNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFN0YXJ0aW5nIHByaWNlIGNhbiBiZSBoaWdoZXIgdGhhbiBlbmRpbmcgcHJpY2UgKGFuZCBvZnRlbiBpcyEpLCBzbwogICAgICAgICAgICAvLyB0aGlzIGRlbHRhIGNhbiBiZSBuZWdhdGl2ZS4KICAgICAgICAgICAgaW50MjU2IHRvdGFsUHJpY2VDaGFuZ2UgPSBpbnQyNTYoX2VuZGluZ1ByaWNlKSAtIGludDI1Nihfc3RhcnRpbmdQcmljZSk7CgogICAgICAgICAgICAvLyBUaGlzIG11bHRpcGxpY2F0aW9uIGNhbid0IG92ZXJmbG93LCBfc2Vjb25kc1Bhc3NlZCB3aWxsIGVhc2lseSBmaXQgd2l0aGluCiAgICAgICAgICAgIC8vIDY0LWJpdHMsIGFuZCB0b3RhbFByaWNlQ2hhbmdlIHdpbGwgZWFzaWx5IGZpdCB3aXRoaW4gMTI4LWJpdHMsIHRoZWlyIHByb2R1Y3QKICAgICAgICAgICAgLy8gd2lsbCBhbHdheXMgZml0IHdpdGhpbiAyNTYtYml0cy4KICAgICAgICAgICAgaW50MjU2IGN1cnJlbnRQcmljZUNoYW5nZSA9IHRvdGFsUHJpY2VDaGFuZ2UgKiBpbnQyNTYoX3NlY29uZHNQYXNzZWQpIC8gaW50MjU2KF9kdXJhdGlvbik7CgogICAgICAgICAgICAvLyBjdXJyZW50UHJpY2VDaGFuZ2UgY2FuIGJlIG5lZ2F0aXZlLCBidXQgaWYgc28sIHdpbGwgaGF2ZSBhIG1hZ25pdHVkZQogICAgICAgICAgICAvLyBsZXNzIHRoYXQgX3N0YXJ0aW5nUHJpY2UuIFRodXMsIHRoaXMgcmVzdWx0IHdpbGwgYWx3YXlzIGVuZCB1cCBwb3NpdGl2ZS4KICAgICAgICAgICAgaW50MjU2IGN1cnJlbnRQcmljZSA9IGludDI1Nihfc3RhcnRpbmdQcmljZSkgKyBjdXJyZW50UHJpY2VDaGFuZ2U7CgogICAgICAgICAgICByZXR1cm4gdWludDI1NihjdXJyZW50UHJpY2UpOwogICAgICAgIH0KICAgIH0KCiAgICAvLy8gQGRldiBDb21wdXRlcyBvd25lcidzIGN1dCBvZiBhIHNhbGUuCiAgICAvLy8gQHBhcmFtIF9wcmljZSAtIFNhbGUgcHJpY2Ugb2YgTkZULgogICAgZnVuY3Rpb24gX2NvbXB1dGVDdXQodWludDI1NiBfcHJpY2UpIGludGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIC8vIE5PVEU6IFdlIGRvbid0IHVzZSBTYWZlTWF0aCAob3Igc2ltaWxhcikgaW4gdGhpcyBmdW5jdGlvbiBiZWNhdXNlCiAgICAgICAgLy8gIGFsbCBvZiBvdXIgZW50cnkgZnVuY3Rpb25zIGNhcmVmdWxseSBjYXAgdGhlIG1heGltdW0gdmFsdWVzIGZvcgogICAgICAgIC8vICBjdXJyZW5jeSAoYXQgMTI4LWJpdHMpLCBhbmQgb3duZXJDdXQgPD0gMTAwMDAgKHNlZSB0aGUgcmVxdWlyZSgpCiAgICAgICAgLy8gIHN0YXRlbWVudCBpbiB0aGUgQ2xvY2tBdWN0aW9uIGNvbnN0cnVjdG9yKS4gVGhlIHJlc3VsdCBvZiB0aGlzCiAgICAgICAgLy8gIGZ1bmN0aW9uIGlzIGFsd2F5cyBndWFyYW50ZWVkIHRvIGJlIDw9IF9wcmljZS4KICAgICAgICByZXR1cm4gU2FmZU1hdGgubXVsKF9wcmljZSwgU2FmZU1hdGguZGl2KG93bmVyQ3V0LDEwMDAwKSk7CiAgICB9Cgp9CgoKCgovLy8gQGRldiBCYXNlIGNvbnRyYWN0IGZvciBhbGwgRXRoZXJuYXV0cyBjb250cmFjdHMgaG9sZGluZyBnbG9iYWwgY29uc3RhbnRzIGFuZCBmdW5jdGlvbnMuCmNvbnRyYWN0IEV0aGVybmF1dHNCYXNlIHsKCiAgICAvKioqIENPTlNUQU5UUyBVU0VEIEFDUk9TUyBDT05UUkFDVFMgKioqLwoKICAgIC8vLyBAZGV2IFVzZWQgYnkgYWxsIGNvbnRyYWN0cyB0aGF0IGludGVyZmFjZXMgd2l0aCBFdGhlcm5hdXRzCiAgICAvLy8gICAgICBUaGUgRVJDLTE2NSBpbnRlcmZhY2Ugc2lnbmF0dXJlIGZvciBFUkMtNzIxLgogICAgLy8vICBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNjUKICAgIC8vLyAgUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzIxCiAgICBieXRlczQgY29uc3RhbnQgSW50ZXJmYWNlU2lnbmF0dXJlX0VSQzcyMSA9CiAgICBieXRlczQoa2VjY2FrMjU2KCduYW1lKCknKSkgXgogICAgYnl0ZXM0KGtlY2NhazI1Nignc3ltYm9sKCknKSkgXgogICAgYnl0ZXM0KGtlY2NhazI1NigndG90YWxTdXBwbHkoKScpKSBeCiAgICBieXRlczQoa2VjY2FrMjU2KCdiYWxhbmNlT2YoYWRkcmVzcyknKSkgXgogICAgYnl0ZXM0KGtlY2NhazI1Nignb3duZXJPZih1aW50MjU2KScpKSBeCiAgICBieXRlczQoa2VjY2FrMjU2KCdhcHByb3ZlKGFkZHJlc3MsdWludDI1NiknKSkgXgogICAgYnl0ZXM0KGtlY2NhazI1NigndHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KScpKSBeCiAgICBieXRlczQoa2VjY2FrMjU2KCd0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpJykpIF4KICAgIGJ5dGVzNChrZWNjYWsyNTYoJ3Rha2VPd25lcnNoaXAodWludDI1NiknKSkgXgogICAgYnl0ZXM0KGtlY2NhazI1NigndG9rZW5zT2ZPd25lcihhZGRyZXNzKScpKSBeCiAgICBieXRlczQoa2VjY2FrMjU2KCd0b2tlbk1ldGFkYXRhKHVpbnQyNTYsc3RyaW5nKScpKTsKCiAgICAvLy8gQGRldiBkdWUgc29saWRpdHkgbGltaXRhdGlvbiB3ZSBjYW5ub3QgcmV0dXJuIGR5bmFtaWMgYXJyYXkgZnJvbSBtZXRob2RzCiAgICAvLy8gc28gaXQgY3JlYXRlcyBpbmNvbXBhYmlsaXR5IGJldHdlZW4gZnVuY3Rpb25zIGFjcm9zcyBkaWZmZXJlbnQgY29udHJhY3RzCiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgU1RBVFNfU0laRSA9IDEwOwogICAgdWludDggcHVibGljIGNvbnN0YW50IFNISVBfU0xPVFMgPSA1OwoKICAgIC8vIFBvc3NpYmxlIHN0YXRlIG9mIGFueSBhc3NldAogICAgZW51bSBBc3NldFN0YXRlIHsgQXZhaWxhYmxlLCBVcEZvckxlYXNlLCBVc2VkIH0KCiAgICAvLyBQb3NzaWJsZSBzdGF0ZSBvZiBhbnkgYXNzZXQKICAgIC8vIE5vdFZhbGlkIGlzIHRvIGF2b2lkIDAgaW4gcGxhY2VzIHdoZXJlIGNhdGVnb3J5IG11c3QgYmUgYmlnZ2VyIHRoYW4gemVybwogICAgZW51bSBBc3NldENhdGVnb3J5IHsgTm90VmFsaWQsIFNlY3RvciwgTWFudWZhY3R1cmVyLCBTaGlwLCBPYmplY3QsIEZhY3RvcnksIENyZXdNZW1iZXIgfQoKICAgIC8vLyBAZGV2IFNlY3RvciBzdGF0cwogICAgZW51bSBTaGlwU3RhdHMge0xldmVsLCBBdHRhY2ssIERlZmVuc2UsIFNwZWVkLCBSYW5nZSwgTHVja30KICAgIC8vLyBAbm90aWNlIFBvc3NpYmxlIGF0dHJpYnV0ZXMgZm9yIGVhY2ggYXNzZXQKICAgIC8vLyAwMDAwMDAwMSAtIFNlZWRlZCAtIE9mZmVyZWQgdG8gdGhlIGVjb25vbXkgYnkgdXMsIHRoZSBkZXZlbG9wZXJzLiBQb3RlbnRpYWxseSBhdCByZWd1bGFyIGludGVydmFscy4KICAgIC8vLyAwMDAwMDAxMCAtIFByb2R1Y2libGUgLSBQcm9kdWN0IG9mIGEgZmFjdG9yeSBhbmQvb3IgZmFjdG9yeSBjb250cmFjdC4KICAgIC8vLyAwMDAwMDEwMCAtIEV4cGxvcmFibGUtIFByb2R1Y3Qgb2YgZXhwbG9yYXRpb24uCiAgICAvLy8gMDAwMDEwMDAgLSBMZWFzYWJsZSAtIENhbiBiZSByZW50ZWQgdG8gb3RoZXIgdXNlcnMgYW5kIHdpbGwgcmV0dXJuIHRvIHRoZSBvcmlnaW5hbCBvd25lciBvbmNlIHRoZSBhY3Rpb24gaXMgY29tcGxldGUuCiAgICAvLy8gMDAwMTAwMDAgLSBQZXJtYW5lbnQgLSBDYW5ub3QgYmUgcmVtb3ZlZCwgYWx3YXlzIG93bmVkIGJ5IGEgdXNlci4KICAgIC8vLyAwMDEwMDAwMCAtIENvbnN1bWFibGUgLSBEZXN0cm95ZWQgYWZ0ZXIgTiBleHBsb3JhdGlvbiBleHBlZGl0aW9ucy4KICAgIC8vLyAwMTAwMDAwMCAtIFRyYWRhYmxlIC0gQnV5YWJsZSBhbmQgc2VsbGFibGUgb24gdGhlIG1hcmtldC4KICAgIC8vLyAxMDAwMDAwMCAtIEhvdCBQb3RhdG8gLSBBdXRvbWF0aWNhbGx5IGdldHMgcHV0IHVwIGZvciBzYWxlIGFmdGVyIGFjcXVpcmluZy4KICAgIGJ5dGVzMiBwdWJsaWMgQVRUUl9TRUVERUQgICAgID0gYnl0ZXMyKDIqKjApOwogICAgYnl0ZXMyIHB1YmxpYyBBVFRSX1BST0RVQ0lCTEUgPSBieXRlczIoMioqMSk7CiAgICBieXRlczIgcHVibGljIEFUVFJfRVhQTE9SQUJMRSA9IGJ5dGVzMigyKioyKTsKICAgIGJ5dGVzMiBwdWJsaWMgQVRUUl9MRUFTQUJMRSAgID0gYnl0ZXMyKDIqKjMpOwogICAgYnl0ZXMyIHB1YmxpYyBBVFRSX1BFUk1BTkVOVCAgPSBieXRlczIoMioqNCk7CiAgICBieXRlczIgcHVibGljIEFUVFJfQ09OU1VNQUJMRSA9IGJ5dGVzMigyKio1KTsKICAgIGJ5dGVzMiBwdWJsaWMgQVRUUl9UUkFEQUJMRSAgID0gYnl0ZXMyKDIqKjYpOwogICAgYnl0ZXMyIHB1YmxpYyBBVFRSX0dPTERFTkdPT1NFID0gYnl0ZXMyKDIqKjcpOwp9CgovLy8gQG5vdGljZSBUaGlzIGNvbnRyYWN0IG1hbmFnZXMgdGhlIHZhcmlvdXMgYWRkcmVzc2VzIGFuZCBjb25zdHJhaW50cyBmb3Igb3BlcmF0aW9ucwovLyAgICAgICAgICB0aGF0IGNhbiBiZSBleGVjdXRlZCBvbmx5IGJ5IHNwZWNpZmljIHJvbGVzLiBOYW1lbHkgQ0VPIGFuZCBDVE8uIGl0IGFsc28gaW5jbHVkZXMgcGF1c2FibGUgcGF0dGVybi4KY29udHJhY3QgRXRoZXJuYXV0c0FjY2Vzc0NvbnRyb2wgaXMgRXRoZXJuYXV0c0Jhc2UgewoKICAgIC8vIFRoaXMgZmFjZXQgY29udHJvbHMgYWNjZXNzIGNvbnRyb2wgZm9yIEV0aGVybmF1dHMuCiAgICAvLyBBbGwgcm9sZXMgaGF2ZSBzYW1lIHJlc3BvbnNpYmlsaXRpZXMgYW5kIHJpZ2h0cywgYnV0IHRoZXJlIGlzIHNsaWdodCBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZW06CiAgICAvLwogICAgLy8gICAgIC0gVGhlIENFTzogVGhlIENFTyBjYW4gcmVhc3NpZ24gb3RoZXIgcm9sZXMgYW5kIG9ubHkgcm9sZSB0aGF0IGNhbiB1bnBhdXNlIHRoZSBzbWFydCBjb250cmFjdC4KICAgIC8vICAgICAgIEl0IGlzIGluaXRpYWxseSBzZXQgdG8gdGhlIGFkZHJlc3MgdGhhdCBjcmVhdGVkIHRoZSBzbWFydCBjb250cmFjdC4KICAgIC8vCiAgICAvLyAgICAgLSBUaGUgQ1RPOiBUaGUgQ1RPIGNhbiBjaGFuZ2UgY29udHJhY3QgYWRkcmVzcywgb3JhY2xlIGFkZHJlc3MgYW5kIHBsYW4gZm9yIHVwZ3JhZGVzLgogICAgLy8KICAgIC8vICAgICAtIFRoZSBDT086IFRoZSBDT08gY2FuIGNoYW5nZSBjb250cmFjdCBhZGRyZXNzIGFuZCBhZGQgY3JlYXRlIGFzc2V0cy4KICAgIC8vCiAgICAvLy8gQGRldiBFbWl0ZWQgd2hlbiBjb250cmFjdCBpcyB1cGdyYWRlZCAtIFNlZSBSRUFETUUubWQgZm9yIHVwZGdyYWRlIHBsYW4KICAgIC8vLyBAcGFyYW0gbmV3Q29udHJhY3QgYWRkcmVzcyBwb2ludGluZyB0byBuZXcgY29udHJhY3QKICAgIGV2ZW50IENvbnRyYWN0VXBncmFkZShhZGRyZXNzIG5ld0NvbnRyYWN0KTsKCiAgICAvLyBUaGUgYWRkcmVzc2VzIG9mIHRoZSBhY2NvdW50cyAob3IgY29udHJhY3RzKSB0aGF0IGNhbiBleGVjdXRlIGFjdGlvbnMgd2l0aGluIGVhY2ggcm9sZXMuCiAgICBhZGRyZXNzIHB1YmxpYyBjZW9BZGRyZXNzOwogICAgYWRkcmVzcyBwdWJsaWMgY3RvQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGNvb0FkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBvcmFjbGVBZGRyZXNzOwoKICAgIC8vIEBkZXYgS2VlcHMgdHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaXMgcGF1c2VkLiBXaGVuIHRoYXQgaXMgdHJ1ZSwgbW9zdCBhY3Rpb25zIGFyZSBibG9ja2VkCiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIENFTy1vbmx5IGZ1bmN0aW9uYWxpdHkKICAgIG1vZGlmaWVyIG9ubHlDRU8oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDVE8tb25seSBmdW5jdGlvbmFsaXR5CiAgICBtb2RpZmllciBvbmx5Q1RPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjdG9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ1RPLW9ubHkgZnVuY3Rpb25hbGl0eQogICAgbW9kaWZpZXIgb25seU9yYWNsZSgpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3JhY2xlQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5Q0xldmVsKCkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGN0b0FkZHJlc3MgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjb29BZGRyZXNzCiAgICAgICAgKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENFTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ0VPLgogICAgLy8vIEBwYXJhbSBfbmV3Q0VPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0VPCiAgICBmdW5jdGlvbiBzZXRDRU8oYWRkcmVzcyBfbmV3Q0VPKSBleHRlcm5hbCBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDRU8gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNlb0FkZHJlc3MgPSBfbmV3Q0VPOwogICAgfQoKICAgIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENUTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ1RPIG9yIENFTy4KICAgIC8vLyBAcGFyYW0gX25ld0NUTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENUTwogICAgZnVuY3Rpb24gc2V0Q1RPKGFkZHJlc3MgX25ld0NUTykgZXh0ZXJuYWwgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY2VvQWRkcmVzcyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGN0b0FkZHJlc3MKICAgICAgICApOwogICAgICAgIHJlcXVpcmUoX25ld0NUTyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgY3RvQWRkcmVzcyA9IF9uZXdDVE87CiAgICB9CgogICAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ09PLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDT08gb3IgQ0VPLgogICAgLy8vIEBwYXJhbSBfbmV3Q09PIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ09PCiAgICBmdW5jdGlvbiBzZXRDT08oYWRkcmVzcyBfbmV3Q09PKSBleHRlcm5hbCB7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjZW9BZGRyZXNzIHx8CiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcwogICAgICAgICk7CiAgICAgICAgcmVxdWlyZShfbmV3Q09PICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBjb29BZGRyZXNzID0gX25ld0NPTzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIG9yYWNsZS4KICAgIC8vLyBAcGFyYW0gX25ld09yYWNsZSBUaGUgYWRkcmVzcyBvZiBvcmFjbGUKICAgIGZ1bmN0aW9uIHNldE9yYWNsZShhZGRyZXNzIF9uZXdPcmFjbGUpIGV4dGVybmFsIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY3RvQWRkcmVzcyk7CiAgICAgICAgcmVxdWlyZShfbmV3T3JhY2xlICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBvcmFjbGVBZGRyZXNzID0gX25ld09yYWNsZTsKICAgIH0KCiAgICAvKioqIFBhdXNhYmxlIGZ1bmN0aW9uYWxpdHkgYWRhcHRlZCBmcm9tIE9wZW5aZXBwZWxpbiAqKiovCgogICAgLy8vIEBkZXYgTW9kaWZpZXIgdG8gYWxsb3cgYWN0aW9ucyBvbmx5IHdoZW4gdGhlIGNvbnRyYWN0IElTIE5PVCBwYXVzZWQKICAgIG1vZGlmaWVyIHdoZW5Ob3RQYXVzZWQoKSB7CiAgICAgICAgcmVxdWlyZSghcGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgIG1vZGlmaWVyIHdoZW5QYXVzZWQgewogICAgICAgIHJlcXVpcmUocGF1c2VkKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IENhbGxlZCBieSBhbnkgIkMtbGV2ZWwiIHJvbGUgdG8gcGF1c2UgdGhlIGNvbnRyYWN0LiBVc2VkIG9ubHkgd2hlbgogICAgLy8vICBhIGJ1ZyBvciBleHBsb2l0IGlzIGRldGVjdGVkIGFuZCB3ZSBuZWVkIHRvIGxpbWl0IGRhbWFnZS4KICAgIGZ1bmN0aW9uIHBhdXNlKCkgZXh0ZXJuYWwgb25seUNMZXZlbCB3aGVuTm90UGF1c2VkIHsKICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgfQoKICAgIC8vLyBAZGV2IFVucGF1c2VzIHRoZSBzbWFydCBjb250cmFjdC4gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBDRU8sIHNpbmNlCiAgICAvLy8gIG9uZSByZWFzb24gd2UgbWF5IHBhdXNlIHRoZSBjb250cmFjdCBpcyB3aGVuIENUTyBhY2NvdW50IGlzIGNvbXByb21pc2VkLgogICAgLy8vIEBub3RpY2UgVGhpcyBpcyBwdWJsaWMgcmF0aGVyIHRoYW4gZXh0ZXJuYWwgc28gaXQgY2FuIGJlIGNhbGxlZCBieQogICAgLy8vICBkZXJpdmVkIGNvbnRyYWN0cy4KICAgIGZ1bmN0aW9uIHVucGF1c2UoKSBwdWJsaWMgb25seUNFTyB3aGVuUGF1c2VkIHsKICAgICAgICAvLyBjYW4ndCB1bnBhdXNlIGlmIGNvbnRyYWN0IHdhcyB1cGdyYWRlZAogICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgfQoKfQoKCgoKCgoKCgovLy8gQHRpdGxlIFN0b3JhZ2UgY29udHJhY3QgZm9yIEV0aGVybmF1dHMgRGF0YS4gQ29tbW9uIHN0cnVjdHMgYW5kIGNvbnN0YW50cy4KLy8vIEBub3RpY2UgVGhpcyBpcyBvdXIgbWFpbiBkYXRhIHN0b3JhZ2UsIGNvbnN0YW50cyBhbmQgZGF0YSB0eXBlcywgcGx1cwovLyAgICAgICAgICBpbnRlcm5hbCBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIHRoZSBhc3NldHMuIEl0IGlzIGlzb2xhdGVkIGFuZCBvbmx5IGludGVyZmFjZSB3aXRoCi8vICAgICAgICAgIGEgbGlzdCBvZiBncmFudGVkIGNvbnRyYWN0cyBkZWZpbmVkIGJ5IENUTwovLy8gQGF1dGhvciBFdGhlcm5hdXRzIC0gRmVybmFuZG8gUGF1ZXIKY29udHJhY3QgRXRoZXJuYXV0c1N0b3JhZ2UgaXMgRXRoZXJuYXV0c0FjY2Vzc0NvbnRyb2wgewoKICAgIGZ1bmN0aW9uIEV0aGVybmF1dHNTdG9yYWdlKCkgcHVibGljIHsKICAgICAgICAvLyB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgaXMgdGhlIGluaXRpYWwgQ0VPCiAgICAgICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CgogICAgICAgIC8vIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCBpcyB0aGUgaW5pdGlhbCBDVE8gYXMgd2VsbAogICAgICAgIGN0b0FkZHJlc3MgPSBtc2cuc2VuZGVyOwoKICAgICAgICAvLyB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgaXMgdGhlIGluaXRpYWwgQ1RPIGFzIHdlbGwKICAgICAgICBjb29BZGRyZXNzID0gbXNnLnNlbmRlcjsKCiAgICAgICAgLy8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0IGlzIHRoZSBpbml0aWFsIE9yYWNsZSBhcyB3ZWxsCiAgICAgICAgb3JhY2xlQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgTm8gdGlwcGluZyEKICAgIC8vLyBAZGV2IFJlamVjdCBhbGwgRXRoZXIgZnJvbSBiZWluZyBzZW50IGhlcmUuIEhvcGVmdWxseSwgd2UgY2FuIHByZXZlbnQgdXNlciBhY2NpZGVudHMuCiAgICBmdW5jdGlvbigpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZGRyZXNzKHRoaXMpKTsKICAgIH0KCiAgICAvKioqIE1hcHBpbmcgZm9yIENvbnRyYWN0cyB3aXRoIGdyYW50ZWQgcGVybWlzc2lvbiAqKiovCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBjb250cmFjdHNHcmFudGVkQWNjZXNzOwoKICAgIC8vLyBAZGV2IGdyYW50IGFjY2VzcyBmb3IgYSBjb250cmFjdCB0byBpbnRlcmFjdCB3aXRoIHRoaXMgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF92MkFkZHJlc3MgVGhlIGNvbnRyYWN0IGFkZHJlc3MgdG8gZ3JhbnQgYWNjZXNzCiAgICBmdW5jdGlvbiBncmFudEFjY2VzcyhhZGRyZXNzIF92MkFkZHJlc3MpIHB1YmxpYyBvbmx5Q1RPIHsKICAgICAgICAvLyBTZWUgUkVBRE1FLm1kIGZvciB1cGRncmFkZSBwbGFuCiAgICAgICAgY29udHJhY3RzR3JhbnRlZEFjY2Vzc1tfdjJBZGRyZXNzXSA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgcmVtb3ZlIGFjY2VzcyBmcm9tIGEgY29udHJhY3QgdG8gaW50ZXJhY3Qgd2l0aCB0aGlzIGNvbnRyYWN0LgogICAgLy8vIEBwYXJhbSBfdjJBZGRyZXNzIFRoZSBjb250cmFjdCBhZGRyZXNzIHRvIGJlIHJlbW92ZWQKICAgIGZ1bmN0aW9uIHJlbW92ZUFjY2VzcyhhZGRyZXNzIF92MkFkZHJlc3MpIHB1YmxpYyBvbmx5Q1RPIHsKICAgICAgICAvLyBTZWUgUkVBRE1FLm1kIGZvciB1cGRncmFkZSBwbGFuCiAgICAgICAgZGVsZXRlIGNvbnRyYWN0c0dyYW50ZWRBY2Nlc3NbX3YyQWRkcmVzc107CiAgICB9CgogICAgLy8vIEBkZXYgT25seSBhbGxvdyBwZXJtaXR0ZWQgY29udHJhY3RzIHRvIGludGVyYWN0IHdpdGggdGhpcyBjb250cmFjdAogICAgbW9kaWZpZXIgb25seUdyYW50ZWRDb250cmFjdHMoKSB7CiAgICAgICAgcmVxdWlyZShjb250cmFjdHNHcmFudGVkQWNjZXNzW21zZy5zZW5kZXJdID09IHRydWUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgdmFsaWRBc3NldCh1aW50MjU2IF90b2tlbklkKSB7CiAgICAgICAgcmVxdWlyZShhc3NldHNbX3Rva2VuSWRdLklEID4gMCk7CiAgICAgICAgXzsKICAgIH0KICAgIC8qKiogREFUQSBUWVBFUyAqKiovCgogICAgLy8vIEBkZXYgVGhlIG1haW4gRXRoZXJuYXV0cyBhc3NldCBzdHJ1Y3QuIEV2ZXJ5IGFzc2V0IGluIEV0aGVybmF1dHMgaXMgcmVwcmVzZW50ZWQgYnkgYSBjb3B5CiAgICAvLy8gIG9mIHRoaXMgc3RydWN0dXJlLiBOb3RlIHRoYXQgdGhlIG9yZGVyIG9mIHRoZSBtZW1iZXJzIGluIHRoaXMgc3RydWN0dXJlCiAgICAvLy8gIGlzIGltcG9ydGFudCBiZWNhdXNlIG9mIHRoZSBieXRlLXBhY2tpbmcgcnVsZXMgdXNlZCBieSBFdGhlcmV1bS4KICAgIC8vLyAgUmVmOiBodHRwOi8vc29saWRpdHkucmVhZHRoZWRvY3MuaW8vZW4vZGV2ZWxvcC9taXNjZWxsYW5lb3VzLmh0bWwKICAgIHN0cnVjdCBBc3NldCB7CgogICAgICAgIC8vIEFzc2V0IElEIGlzIGEgaWRlbnRpZmllciBmb3IgbG9vayBhbmQgZmVlbCBpbiBmcm9udGVuZAogICAgICAgIHVpbnQxNiBJRDsKCiAgICAgICAgLy8gQ2F0ZWdvcnkgPSBTZWN0b3JzLCBNYW51ZmFjdHVyZXJzLCBTaGlwcywgT2JqZWN0cyAoVXBncmFkZXMvTWlzYyksIEZhY3RvcmllcyBhbmQgQ3Jld01lbWJlcnMKICAgICAgICB1aW50OCBjYXRlZ29yeTsKCiAgICAgICAgLy8gVGhlIFN0YXRlIG9mIGFuIGFzc2V0OiBBdmFpbGFibGUsIE9uIHNhbGUsIFVwIGZvciBsZWFzZSwgQ29vbGRvd24sIEV4cGxvcmluZwogICAgICAgIHVpbnQ4IHN0YXRlOwoKICAgICAgICAvLyBBdHRyaWJ1dGVzCiAgICAgICAgLy8gYnl0ZSBwb3MgLSBEZWZpbml0aW9uCiAgICAgICAgLy8gMDAwMDAwMDEgLSBTZWVkZWQgLSBPZmZlcmVkIHRvIHRoZSBlY29ub215IGJ5IHVzLCB0aGUgZGV2ZWxvcGVycy4gUG90ZW50aWFsbHkgYXQgcmVndWxhciBpbnRlcnZhbHMuCiAgICAgICAgLy8gMDAwMDAwMTAgLSBQcm9kdWNpYmxlIC0gUHJvZHVjdCBvZiBhIGZhY3RvcnkgYW5kL29yIGZhY3RvcnkgY29udHJhY3QuCiAgICAgICAgLy8gMDAwMDAxMDAgLSBFeHBsb3JhYmxlLSBQcm9kdWN0IG9mIGV4cGxvcmF0aW9uLgogICAgICAgIC8vIDAwMDAxMDAwIC0gTGVhc2FibGUgLSBDYW4gYmUgcmVudGVkIHRvIG90aGVyIHVzZXJzIGFuZCB3aWxsIHJldHVybiB0byB0aGUgb3JpZ2luYWwgb3duZXIgb25jZSB0aGUgYWN0aW9uIGlzIGNvbXBsZXRlLgogICAgICAgIC8vIDAwMDEwMDAwIC0gUGVybWFuZW50IC0gQ2Fubm90IGJlIHJlbW92ZWQsIGFsd2F5cyBvd25lZCBieSBhIHVzZXIuCiAgICAgICAgLy8gMDAxMDAwMDAgLSBDb25zdW1hYmxlIC0gRGVzdHJveWVkIGFmdGVyIE4gZXhwbG9yYXRpb24gZXhwZWRpdGlvbnMuCiAgICAgICAgLy8gMDEwMDAwMDAgLSBUcmFkYWJsZSAtIEJ1eWFibGUgYW5kIHNlbGxhYmxlIG9uIHRoZSBtYXJrZXQuCiAgICAgICAgLy8gMTAwMDAwMDAgLSBIb3QgUG90YXRvIC0gQXV0b21hdGljYWxseSBnZXRzIHB1dCB1cCBmb3Igc2FsZSBhZnRlciBhY3F1aXJpbmcuCiAgICAgICAgYnl0ZXMyIGF0dHJpYnV0ZXM7CgogICAgICAgIC8vIFRoZSB0aW1lc3RhbXAgZnJvbSB0aGUgYmxvY2sgd2hlbiB0aGlzIGFzc2V0IHdhcyBjcmVhdGVkLgogICAgICAgIHVpbnQ2NCBjcmVhdGVkQXQ7CgogICAgICAgIC8vIFRoZSBtaW5pbXVtIHRpbWVzdGFtcCBhZnRlciB3aGljaCB0aGlzIGFzc2V0IGNhbiBlbmdhZ2UgaW4gZXhwbG9yaW5nIGFjdGl2aXRpZXMgYWdhaW4uCiAgICAgICAgdWludDY0IGNvb2xkb3duRW5kQmxvY2s7CgogICAgICAgIC8vIFRoZSBBc3NldCdzIHN0YXRzIGNhbiBiZSB1cGdyYWRlZCBvciBjaGFuZ2VkIGJhc2VkIG9uIGV4cGxvcmF0aW9uIGNvbmRpdGlvbnMuCiAgICAgICAgLy8gSXQgd2lsbCBiZSBkZWZpbmVkIHBlciBjaGlsZCBjb250cmFjdCwgYnV0IGFsbCBzdGF0cyBoYXZlIGEgcmFuZ2UgZnJvbSAwIHRvIDI1NQogICAgICAgIC8vIEV4YW1wbGVzCiAgICAgICAgLy8gMCA9IFNoaXAgTGV2ZWwKICAgICAgICAvLyAxID0gU2hpcCBBdHRhY2sKICAgICAgICB1aW50OFtTVEFUU19TSVpFXSBzdGF0czsKCiAgICAgICAgLy8gU2V0IHRvIHRoZSBjb29sZG93biB0aW1lIHRoYXQgcmVwcmVzZW50cyBleHBsb3JhdGlvbiBkdXJhdGlvbiBmb3IgdGhpcyBhc3NldC4KICAgICAgICAvLyBEZWZpbmVkIGJ5IGEgc3VjY2Vzc2Z1bCBleHBsb3JhdGlvbiBhY3Rpb24sIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIGFzc2V0IGlzIGFjdGluZyBhcyBzaGlwIG9yIGEgcGFydC4KICAgICAgICB1aW50MjU2IGNvb2xkb3duOwoKICAgICAgICAvLyBhIHJlZmVyZW5jZSB0byBhIHN1cGVyIGFzc2V0IHRoYXQgbWFudWZhY3R1cmVkIHRoZSBhc3NldAogICAgICAgIHVpbnQyNTYgYnVpbHRCeTsKICAgIH0KCiAgICAvKioqIENPTlNUQU5UUyAqKiovCgogICAgLy8gQGRldiBTYW5pdHkgY2hlY2sgdGhhdCBhbGxvd3MgdXMgdG8gZW5zdXJlIHRoYXQgd2UgYXJlIHBvaW50aW5nIHRvIHRoZQogICAgLy8gIHJpZ2h0IHN0b3JhZ2UgY29udHJhY3QgaW4gb3VyIEV0aGVybmF1dHNMb2dpYyhhZGRyZXNzIF9DU3RvcmFnZUFkZHJlc3MpIGNhbGwuCiAgICBib29sIHB1YmxpYyBpc0V0aGVybmF1dHNTdG9yYWdlID0gdHJ1ZTsKCiAgICAvKioqIFNUT1JBR0UgKioqLwoKICAgIC8vLyBAZGV2IEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIEFzc2V0IHN0cnVjdCBmb3IgYWxsIGFzc2V0cyBpbiBleGlzdGVuY2UuIFRoZSBBc3NldCBVbmlxdWVJZAogICAgLy8vICBvZiBlYWNoIGFzc2V0IGlzIGFjdHVhbGx5IGFuIGluZGV4IGludG8gdGhpcyBhcnJheS4KICAgIEFzc2V0W10gcHVibGljIGFzc2V0czsKCiAgICAvLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBBc3NldCBVbmlxdWVJRHMgdG8gdGhlIHByaWNlIG9mIHRoZSB0b2tlbi4KICAgIC8vLyBzdG9yZWQgb3V0c2lkZSBBc3NldCBTdHJ1Y3QgdG8gc2F2ZSBnYXMsIGJlY2F1c2UgcHJpY2UgY2FuIGNoYW5nZSBmcmVxdWVudGx5CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIGludGVybmFsIGFzc2V0SW5kZXhUb1ByaWNlOwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIGFzc2V0IFVuaXF1ZUlEcyB0byB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlbS4gQWxsIGFzc2V0cyBoYXZlIHNvbWUgdmFsaWQgb3duZXIgYWRkcmVzcy4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgaW50ZXJuYWwgYXNzZXRJbmRleFRvT3duZXI7CgogICAgLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBvd25lciBhZGRyZXNzIHRvIGNvdW50IG9mIHRva2VucyB0aGF0IGFkZHJlc3Mgb3ducy4KICAgIC8vICBVc2VkIGludGVybmFsbHkgaW5zaWRlIGJhbGFuY2VPZigpIHRvIHJlc29sdmUgb3duZXJzaGlwIGNvdW50LgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBpbnRlcm5hbCBvd25lcnNoaXBUb2tlbkNvdW50OwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIEFzc2V0VW5pcXVlSURzIHRvIGFuIGFkZHJlc3MgdGhhdCBoYXMgYmVlbiBhcHByb3ZlZCB0byBjYWxsCiAgICAvLy8gIHRyYW5zZmVyRnJvbSgpLiBFYWNoIEFzc2V0IGNhbiBvbmx5IGhhdmUgb25lIGFwcHJvdmVkIGFkZHJlc3MgZm9yIHRyYW5zZmVyCiAgICAvLy8gIGF0IGFueSB0aW1lLiBBIHplcm8gdmFsdWUgbWVhbnMgbm8gYXBwcm92YWwgaXMgb3V0c3RhbmRpbmcuCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIGludGVybmFsIGFzc2V0SW5kZXhUb0FwcHJvdmVkOwoKCiAgICAvKioqIFNFVFRFUlMgKioqLwoKICAgIC8vLyBAZGV2IHNldCBuZXcgYXNzZXQgcHJpY2UKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgIGFzc2V0IFVuaXF1ZUlkCiAgICAvLy8gQHBhcmFtIF9wcmljZSAgICBhc3NldCBwcmljZQogICAgZnVuY3Rpb24gc2V0UHJpY2UodWludDI1NiBfdG9rZW5JZCwgdWludDI1NiBfcHJpY2UpIHB1YmxpYyBvbmx5R3JhbnRlZENvbnRyYWN0cyB7CiAgICAgICAgYXNzZXRJbmRleFRvUHJpY2VbX3Rva2VuSWRdID0gX3ByaWNlOwogICAgfQoKICAgIC8vLyBAZGV2IE1hcmsgdHJhbnNmZXIgYXMgYXBwcm92ZWQKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgIGFzc2V0IFVuaXF1ZUlkCiAgICAvLy8gQHBhcmFtIF9hcHByb3ZlZCBhZGRyZXNzIGFwcHJvdmVkCiAgICBmdW5jdGlvbiBhcHByb3ZlKHVpbnQyNTYgX3Rva2VuSWQsIGFkZHJlc3MgX2FwcHJvdmVkKSBwdWJsaWMgb25seUdyYW50ZWRDb250cmFjdHMgewogICAgICAgIGFzc2V0SW5kZXhUb0FwcHJvdmVkW190b2tlbklkXSA9IF9hcHByb3ZlZDsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIG93bmVyc2hpcCBvZiBhIHNwZWNpZmljIEFzc2V0IHRvIGFuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9mcm9tICAgIGN1cnJlbnQgb3duZXIgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfdG8gICAgICBuZXcgb3duZXIgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBhc3NldCBVbmlxdWVJZAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyBvbmx5R3JhbnRlZENvbnRyYWN0cyB7CiAgICAgICAgLy8gU2luY2UgdGhlIG51bWJlciBvZiBhc3NldHMgaXMgY2FwcGVkIHRvIDJeMzIgd2UgY2FuJ3Qgb3ZlcmZsb3cgdGhpcwogICAgICAgIG93bmVyc2hpcFRva2VuQ291bnRbX3RvXSsrOwogICAgICAgIC8vIHRyYW5zZmVyIG93bmVyc2hpcAogICAgICAgIGFzc2V0SW5kZXhUb093bmVyW190b2tlbklkXSA9IF90bzsKICAgICAgICAvLyBXaGVuIGNyZWF0aW5nIG5ldyBhc3NldHMgX2Zyb20gaXMgMHgwLCBidXQgd2UgY2FuJ3QgYWNjb3VudCB0aGF0IGFkZHJlc3MuCiAgICAgICAgaWYgKF9mcm9tICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgICAgb3duZXJzaGlwVG9rZW5Db3VudFtfZnJvbV0tLTsKICAgICAgICAgICAgLy8gY2xlYXIgYW55IHByZXZpb3VzbHkgYXBwcm92ZWQgb3duZXJzaGlwIGV4Y2hhbmdlCiAgICAgICAgICAgIGRlbGV0ZSBhc3NldEluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IEEgcHVibGljIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgYXNzZXQgYW5kIHN0b3JlcyBpdC4gVGhpcwogICAgLy8vICBtZXRob2QgZG9lcyBiYXNpYyBjaGVja2luZyBhbmQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gb3RoZXIgY29udHJhY3Qgd2hlbiB0aGUKICAgIC8vLyAgaW5wdXQgZGF0YSBpcyBrbm93biB0byBiZSB2YWxpZC4gV2lsbCBOT1QgZ2VuZXJhdGUgYW55IGV2ZW50IGl0IGlzIGRlbGVnYXRlIHRvIGJ1c2luZXNzIGxvZ2ljIGNvbnRyYWN0cy4KICAgIC8vLyBAcGFyYW0gX2NyZWF0b3JUb2tlbklEIFRoZSBhc3NldCB3aG8gaXMgZmF0aGVyIG9mIHRoaXMgYXNzZXQKICAgIC8vLyBAcGFyYW0gX293bmVyIEZpcnN0IG93bmVyIG9mIHRoaXMgYXNzZXQKICAgIC8vLyBAcGFyYW0gX3ByaWNlIGFzc2V0IHByaWNlCiAgICAvLy8gQHBhcmFtIF9JRCBhc3NldCBJRAogICAgLy8vIEBwYXJhbSBfY2F0ZWdvcnkgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgLy8vIEBwYXJhbSBfc3RhdGUgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgLy8vIEBwYXJhbSBfYXR0cmlidXRlcyBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICAvLy8gQHBhcmFtIF9zdGF0cyBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICBmdW5jdGlvbiBjcmVhdGVBc3NldCgKICAgICAgICB1aW50MjU2IF9jcmVhdG9yVG9rZW5JRCwKICAgICAgICBhZGRyZXNzIF9vd25lciwKICAgICAgICB1aW50MjU2IF9wcmljZSwKICAgICAgICB1aW50MTYgX0lELAogICAgICAgIHVpbnQ4IF9jYXRlZ29yeSwKICAgICAgICB1aW50OCBfc3RhdGUsCiAgICAgICAgdWludDggX2F0dHJpYnV0ZXMsCiAgICAgICAgdWludDhbU1RBVFNfU0laRV0gX3N0YXRzLAogICAgICAgIHVpbnQyNTYgX2Nvb2xkb3duLAogICAgICAgIHVpbnQ2NCBfY29vbGRvd25FbmRCbG9jawogICAgKQogICAgcHVibGljIG9ubHlHcmFudGVkQ29udHJhY3RzCiAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIC8vIEVuc3VyZSBvdXIgZGF0YSBzdHJ1Y3R1cmVzIGFyZSBhbHdheXMgdmFsaWQuCiAgICAgICAgcmVxdWlyZShfSUQgPiAwKTsKICAgICAgICByZXF1aXJlKF9jYXRlZ29yeSA+IDApOwogICAgICAgIHJlcXVpcmUoX2F0dHJpYnV0ZXMgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF9zdGF0cy5sZW5ndGggPiAwKTsKCiAgICAgICAgQXNzZXQgbWVtb3J5IGFzc2V0ID0gQXNzZXQoewogICAgICAgICAgICBJRDogX0lELAogICAgICAgICAgICBjYXRlZ29yeTogX2NhdGVnb3J5LAogICAgICAgICAgICBidWlsdEJ5OiBfY3JlYXRvclRva2VuSUQsCiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGJ5dGVzMihfYXR0cmlidXRlcyksCiAgICAgICAgICAgIHN0YXRzOiBfc3RhdHMsCiAgICAgICAgICAgIHN0YXRlOiBfc3RhdGUsCiAgICAgICAgICAgIGNyZWF0ZWRBdDogdWludDY0KG5vdyksCiAgICAgICAgICAgIGNvb2xkb3duRW5kQmxvY2s6IF9jb29sZG93bkVuZEJsb2NrLAogICAgICAgICAgICBjb29sZG93bjogX2Nvb2xkb3duCiAgICAgICAgICAgIH0pOwoKICAgICAgICB1aW50MjU2IG5ld0Fzc2V0VW5pcXVlSWQgPSBhc3NldHMucHVzaChhc3NldCkgLSAxOwoKICAgICAgICAvLyBDaGVjayBpdCByZWFjaGVkIDQgYmlsbGlvbiBhc3NldHMgYnV0IGxldCdzIGp1c3QgYmUgMTAwJSBzdXJlLgogICAgICAgIHJlcXVpcmUobmV3QXNzZXRVbmlxdWVJZCA9PSB1aW50MjU2KHVpbnQzMihuZXdBc3NldFVuaXF1ZUlkKSkpOwoKICAgICAgICAvLyBzdG9yZSBwcmljZQogICAgICAgIGFzc2V0SW5kZXhUb1ByaWNlW25ld0Fzc2V0VW5pcXVlSWRdID0gX3ByaWNlOwoKICAgICAgICAvLyBUaGlzIHdpbGwgYXNzaWduIG93bmVyc2hpcAogICAgICAgIHRyYW5zZmVyKGFkZHJlc3MoMCksIF9vd25lciwgbmV3QXNzZXRVbmlxdWVJZCk7CgogICAgICAgIHJldHVybiBuZXdBc3NldFVuaXF1ZUlkOwogICAgfQoKICAgIC8vLyBAZGV2IEEgcHVibGljIG1ldGhvZCB0aGF0IGVkaXQgYXNzZXQgaW4gY2FzZSBvZiBhbnkgbWlzdGFrZSBpcyBkb25lIGR1cmluZyBwcm9jZXNzIG9mIGNyZWF0aW9uIGJ5IHRoZSBkZXZlbG9wZXIuIFRoaXMKICAgIC8vLyBUaGlzIG1ldGhvZCBkb2Vzbid0IGRvIGFueSBjaGVja2luZyBhbmQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW4gdGhlCiAgICAvLy8gIGlucHV0IGRhdGEgaXMga25vd24gdG8gYmUgdmFsaWQuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSB0b2tlbiBJRAogICAgLy8vIEBwYXJhbSBfY3JlYXRvclRva2VuSUQgVGhlIGFzc2V0IHRoYXQgY3JlYXRlIHRoYXQgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3ByaWNlIGFzc2V0IHByaWNlCiAgICAvLy8gQHBhcmFtIF9JRCBhc3NldCBJRAogICAgLy8vIEBwYXJhbSBfY2F0ZWdvcnkgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgLy8vIEBwYXJhbSBfc3RhdGUgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgLy8vIEBwYXJhbSBfYXR0cmlidXRlcyBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICAvLy8gQHBhcmFtIF9zdGF0cyBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICAvLy8gQHBhcmFtIF9jb29sZG93biBhc3NldCBjb29sZG93biBpbmRleAogICAgZnVuY3Rpb24gZWRpdEFzc2V0KAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQsCiAgICAgICAgdWludDI1NiBfY3JlYXRvclRva2VuSUQsCiAgICAgICAgdWludDI1NiBfcHJpY2UsCiAgICAgICAgdWludDE2IF9JRCwKICAgICAgICB1aW50OCBfY2F0ZWdvcnksCiAgICAgICAgdWludDggX3N0YXRlLAogICAgICAgIHVpbnQ4IF9hdHRyaWJ1dGVzLAogICAgICAgIHVpbnQ4W1NUQVRTX1NJWkVdIF9zdGF0cywKICAgICAgICB1aW50MTYgX2Nvb2xkb3duCiAgICApCiAgICBleHRlcm5hbCB2YWxpZEFzc2V0KF90b2tlbklkKSBvbmx5Q0xldmVsCiAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIC8vIEVuc3VyZSBvdXIgZGF0YSBzdHJ1Y3R1cmVzIGFyZSBhbHdheXMgdmFsaWQuCiAgICAgICAgcmVxdWlyZShfSUQgPiAwKTsKICAgICAgICByZXF1aXJlKF9jYXRlZ29yeSA+IDApOwogICAgICAgIHJlcXVpcmUoX2F0dHJpYnV0ZXMgIT0gMHgwKTsKICAgICAgICByZXF1aXJlKF9zdGF0cy5sZW5ndGggPiAwKTsKCiAgICAgICAgLy8gc3RvcmUgcHJpY2UKICAgICAgICBhc3NldEluZGV4VG9QcmljZVtfdG9rZW5JZF0gPSBfcHJpY2U7CgogICAgICAgIEFzc2V0IHN0b3JhZ2UgYXNzZXQgPSBhc3NldHNbX3Rva2VuSWRdOwogICAgICAgIGFzc2V0LklEID0gX0lEOwogICAgICAgIGFzc2V0LmNhdGVnb3J5ID0gX2NhdGVnb3J5OwogICAgICAgIGFzc2V0LmJ1aWx0QnkgPSBfY3JlYXRvclRva2VuSUQ7CiAgICAgICAgYXNzZXQuYXR0cmlidXRlcyA9IGJ5dGVzMihfYXR0cmlidXRlcyk7CiAgICAgICAgYXNzZXQuc3RhdHMgPSBfc3RhdHM7CiAgICAgICAgYXNzZXQuc3RhdGUgPSBfc3RhdGU7CiAgICAgICAgYXNzZXQuY29vbGRvd24gPSBfY29vbGRvd247CiAgICB9CgogICAgLy8vIEBkZXYgVXBkYXRlIG9ubHkgc3RhdHMKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgYXNzZXQgVW5pcXVlSWQKICAgIC8vLyBAcGFyYW0gX3N0YXRzIGFzc2V0IHN0YXRlLCBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICBmdW5jdGlvbiB1cGRhdGVTdGF0cyh1aW50MjU2IF90b2tlbklkLCB1aW50OFtTVEFUU19TSVpFXSBfc3RhdHMpIHB1YmxpYyB2YWxpZEFzc2V0KF90b2tlbklkKSBvbmx5R3JhbnRlZENvbnRyYWN0cyB7CiAgICAgICAgYXNzZXRzW190b2tlbklkXS5zdGF0cyA9IF9zdGF0czsKICAgIH0KCiAgICAvLy8gQGRldiBVcGRhdGUgb25seSBhc3NldCBzdGF0ZQogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBhc3NldCBVbmlxdWVJZAogICAgLy8vIEBwYXJhbSBfc3RhdGUgYXNzZXQgc3RhdGUsIHNlZSBBc3NldCBTdHJ1Y3QgZGVzY3JpcHRpb24KICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQ4IF9zdGF0ZSkgcHVibGljIHZhbGlkQXNzZXQoX3Rva2VuSWQpIG9ubHlHcmFudGVkQ29udHJhY3RzIHsKICAgICAgICBhc3NldHNbX3Rva2VuSWRdLnN0YXRlID0gX3N0YXRlOwogICAgfQoKICAgIC8vLyBAZGV2IFVwZGF0ZSBDb29sZG93biBmb3IgYSBzaW5nbGUgYXNzZXQKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgYXNzZXQgVW5pcXVlSWQKICAgIC8vLyBAcGFyYW0gX2Nvb2xkb3duIGFzc2V0IHN0YXRlLCBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICBmdW5jdGlvbiBzZXRBc3NldENvb2xkb3duKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQyNTYgX2Nvb2xkb3duLCB1aW50NjQgX2Nvb2xkb3duRW5kQmxvY2spCiAgICBwdWJsaWMgdmFsaWRBc3NldChfdG9rZW5JZCkgb25seUdyYW50ZWRDb250cmFjdHMgewogICAgICAgIGFzc2V0c1tfdG9rZW5JZF0uY29vbGRvd24gPSBfY29vbGRvd247CiAgICAgICAgYXNzZXRzW190b2tlbklkXS5jb29sZG93bkVuZEJsb2NrID0gX2Nvb2xkb3duRW5kQmxvY2s7CiAgICB9CgogICAgLyoqKiBHRVRURVJTICoqKi8KCiAgICAvLy8gQG5vdGljZSBSZXR1cm5zIG9ubHkgc3RhdHMgZGF0YSBhYm91dCBhIHNwZWNpZmljIGFzc2V0LgogICAgLy8vIEBkZXYgaXQgaXMgbmVjZXNzYXJ5IGR1ZSBzb2xpZGl0eSBjb21waWxlciBsaW1pdGF0aW9ucwogICAgLy8vICAgICAgd2hlbiB3ZSBoYXZlIGxhcmdlIHF0eSBvZiBwYXJhbWV0ZXJzIGl0IHRocm93cyBTdGFja1Rvb0RlZXBFeGNlcHRpb24KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIFVuaXF1ZUlkIG9mIHRoZSBhc3NldCBvZiBpbnRlcmVzdC4KICAgIGZ1bmN0aW9uIGdldFN0YXRzKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQ4W1NUQVRTX1NJWkVdKSB7CiAgICAgICAgcmV0dXJuIGFzc2V0c1tfdG9rZW5JZF0uc3RhdHM7CiAgICB9CgogICAgLy8vIEBkZXYgcmV0dXJuIGN1cnJlbnQgcHJpY2Ugb2YgYW4gYXNzZXQKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgYXNzZXQgVW5pcXVlSWQKICAgIGZ1bmN0aW9uIHByaWNlT2YodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBwcmljZSkgewogICAgICAgIHJldHVybiBhc3NldEluZGV4VG9QcmljZVtfdG9rZW5JZF07CiAgICB9CgogICAgLy8vIEBub3RpY2UgQ2hlY2sgaWYgYXNzZXQgaGFzIGFsbCBhdHRyaWJ1dGVzIHBhc3NlZCBieSBwYXJhbWV0ZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIFVuaXF1ZUlkIG9mIHRoZSBhc3NldCBvZiBpbnRlcmVzdC4KICAgIC8vLyBAcGFyYW0gX2F0dHJpYnV0ZXMgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgZnVuY3Rpb24gaGFzQWxsQXR0cnModWludDI1NiBfdG9rZW5JZCwgYnl0ZXMyIF9hdHRyaWJ1dGVzKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFzc2V0c1tfdG9rZW5JZF0uYXR0cmlidXRlcyAmIF9hdHRyaWJ1dGVzID09IF9hdHRyaWJ1dGVzOwogICAgfQoKICAgIC8vLyBAbm90aWNlIENoZWNrIGlmIGFzc2V0IGhhcyBhbnkgYXR0cmlidXRlIHBhc3NlZCBieSBwYXJhbWV0ZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIFVuaXF1ZUlkIG9mIHRoZSBhc3NldCBvZiBpbnRlcmVzdC4KICAgIC8vLyBAcGFyYW0gX2F0dHJpYnV0ZXMgc2VlIEFzc2V0IFN0cnVjdCBkZXNjcmlwdGlvbgogICAgZnVuY3Rpb24gaGFzQW55QXR0cnModWludDI1NiBfdG9rZW5JZCwgYnl0ZXMyIF9hdHRyaWJ1dGVzKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGFzc2V0c1tfdG9rZW5JZF0uYXR0cmlidXRlcyAmIF9hdHRyaWJ1dGVzICE9IDB4MDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBDaGVjayBpZiBhc3NldCBpcyBpbiB0aGUgc3RhdGUgcGFzc2VkIGJ5IHBhcmFtZXRlcgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgVW5pcXVlSWQgb2YgdGhlIGFzc2V0IG9mIGludGVyZXN0LgogICAgLy8vIEBwYXJhbSBfY2F0ZWdvcnkgc2VlIEFzc2V0Q2F0ZWdvcnkgaW4gRXRoZXJuYXV0c0Jhc2UgZm9yIHBvc3NpYmxlIHN0YXRlcwogICAgZnVuY3Rpb24gaXNDYXRlZ29yeSh1aW50MjU2IF90b2tlbklkLCB1aW50OCBfY2F0ZWdvcnkpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYXNzZXRzW190b2tlbklkXS5jYXRlZ29yeSA9PSBfY2F0ZWdvcnk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQ2hlY2sgaWYgYXNzZXQgaXMgaW4gdGhlIHN0YXRlIHBhc3NlZCBieSBwYXJhbWV0ZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIFVuaXF1ZUlkIG9mIHRoZSBhc3NldCBvZiBpbnRlcmVzdC4KICAgIC8vLyBAcGFyYW0gX3N0YXRlIHNlZSBlbnVtIEFzc2V0U3RhdGUgaW4gRXRoZXJuYXV0c0Jhc2UgZm9yIHBvc3NpYmxlIHN0YXRlcwogICAgZnVuY3Rpb24gaXNTdGF0ZSh1aW50MjU2IF90b2tlbklkLCB1aW50OCBfc3RhdGUpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYXNzZXRzW190b2tlbklkXS5zdGF0ZSA9PSBfc3RhdGU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyBvd25lciBvZiBhIGdpdmVuIEFzc2V0KFRva2VuKS4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIGFzc2V0IFVuaXF1ZUlkCiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpCiAgICB7CiAgICAgICAgcmV0dXJuIGFzc2V0SW5kZXhUb093bmVyW190b2tlbklkXTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlCiAgICAvLy8gQG5vdGljZSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgQXNzZXRzIG93bmVkIGJ5IGEgc3BlY2lmaWMgYWRkcmVzcy4KICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBvd25lciBhZGRyZXNzIHRvIGNoZWNrLgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGNvdW50KSB7CiAgICAgICAgcmV0dXJuIG93bmVyc2hpcFRva2VuQ291bnRbX293bmVyXTsKICAgIH0KCiAgICAvLy8gQGRldiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGN1cnJlbnRseSBoYXMgdHJhbnNmZXJBcHByb3ZhbCBmb3IgYSBwYXJ0aWN1bGFyIEFzc2V0LgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBhc3NldCBVbmlxdWVJZAogICAgZnVuY3Rpb24gYXBwcm92ZWRGb3IodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgb25seUdyYW50ZWRDb250cmFjdHMgcmV0dXJucyAoYWRkcmVzcykgewogICAgICAgIHJldHVybiBhc3NldEluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIEFzc2V0cyBjdXJyZW50bHkgaW4gZXhpc3RlbmNlLgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBhc3NldHMubGVuZ3RoOwogICAgfQoKICAgIC8vLyBAbm90aWNlIExpc3QgYWxsIGV4aXN0aW5nIHRva2Vucy4gSXQgY2FuIGJlIGZpbHRlcmVkIGJ5IGF0dHJpYnV0ZXMgb3IgYXNzZXRzIHdpdGggb3duZXIKICAgIC8vLyBAcGFyYW0gX293bmVyIGZpbHRlciBhbGwgYXNzZXRzIGJ5IG93bmVyCiAgICBmdW5jdGlvbiBnZXRUb2tlbkxpc3QoYWRkcmVzcyBfb3duZXIsIHVpbnQ4IF93aXRoQXR0cmlidXRlcywgdWludDI1NiBzdGFydCwgdWludDI1NiBjb3VudCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zKAogICAgICAgIHVpbnQyNTZbNl1bXQogICAgKSB7CiAgICAgICAgdWludDI1NiB0b3RhbEFzc2V0cyA9IGFzc2V0cy5sZW5ndGg7CgogICAgICAgIGlmICh0b3RhbEFzc2V0cyA9PSAwKSB7CiAgICAgICAgICAgIC8vIFJldHVybiBhbiBlbXB0eSBhcnJheQogICAgICAgICAgICByZXR1cm4gbmV3IHVpbnQyNTZbNl1bXSgwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50MjU2WzZdW10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50MjU2WzZdW10odG90YWxBc3NldHMgPiBjb3VudCA/IGNvdW50IDogdG90YWxBc3NldHMpOwogICAgICAgICAgICB1aW50MjU2IHJlc3VsdEluZGV4ID0gMDsKICAgICAgICAgICAgYnl0ZXMyIGhhc0F0dHJpYnV0ZXMgID0gYnl0ZXMyKF93aXRoQXR0cmlidXRlcyk7CiAgICAgICAgICAgIEFzc2V0IG1lbW9yeSBhc3NldDsKCiAgICAgICAgICAgIGZvciAodWludDI1NiB0b2tlbklkID0gc3RhcnQ7IHRva2VuSWQgPCB0b3RhbEFzc2V0cyAmJiByZXN1bHRJbmRleCA8IGNvdW50OyB0b2tlbklkKyspIHsKICAgICAgICAgICAgICAgIGFzc2V0ID0gYXNzZXRzW3Rva2VuSWRdOwogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIChhc3NldC5zdGF0ZSAhPSB1aW50OChBc3NldFN0YXRlLlVzZWQpKSAmJgogICAgICAgICAgICAgICAgICAgIChhc3NldEluZGV4VG9Pd25lclt0b2tlbklkXSA9PSBfb3duZXIgfHwgX293bmVyID09IGFkZHJlc3MoMCkpICYmCiAgICAgICAgICAgICAgICAgICAgKGFzc2V0LmF0dHJpYnV0ZXMgJiBoYXNBdHRyaWJ1dGVzID09IGhhc0F0dHJpYnV0ZXMpCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdWzBdID0gdG9rZW5JZDsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdWzFdID0gYXNzZXQuSUQ7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4XVsyXSA9IGFzc2V0LmNhdGVnb3J5OwogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleF1bM10gPSB1aW50MjU2KGFzc2V0LmF0dHJpYnV0ZXMpOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRJbmRleF1bNF0gPSBhc3NldC5jb29sZG93bjsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdWzVdID0gYXNzZXRJbmRleFRvUHJpY2VbdG9rZW5JZF07CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICB9Cn0KCi8vLyBAdGl0bGUgVGhlIGZhY2V0IG9mIHRoZSBFdGhlcm5hdXRzIGNvbnRyYWN0IHRoYXQgbWFuYWdlcyBvd25lcnNoaXAsIEVSQy03MjEgY29tcGxpYW50LgovLy8gQG5vdGljZSBUaGlzIHByb3ZpZGVzIHRoZSBtZXRob2RzIHJlcXVpcmVkIGZvciBiYXNpYyBub24tZnVuZ2libGUgdG9rZW4KLy8gICAgICAgICAgdHJhbnNhY3Rpb25zLCBmb2xsb3dpbmcgdGhlIGRyYWZ0IEVSQy03MjEgc3BlYyAoaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzcyMSkuCi8vICAgICAgICAgIEl0IGludGVyZmFjZXMgd2l0aCBFdGhlcm5hdXRzU3RvcmFnZSBwcm92aW5kaW5nIGJhc2ljIGZ1bmN0aW9ucyBhcyBjcmVhdGUgYW5kIGxpc3QsIGFsc28gaG9sZHMKLy8gICAgICAgICAgcmVmZXJlbmNlIHRvIGxvZ2ljIGNvbnRyYWN0cyBhcyBBdWN0aW9uLCBFeHBsb3JlIGFuZCBzbyBvbgovLy8gQGF1dGhvciBFdGhlcm5hdHVzIC0gRmVybmFuZG8gUGF1ZXIKLy8vIEBkZXYgUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzIxCmNvbnRyYWN0IEV0aGVybmF1dHNPd25lcnNoaXAgaXMgRXRoZXJuYXV0c0FjY2Vzc0NvbnRyb2wsIEVSQzcyMSB7CgogICAgLy8vIEBkZXYgQ29udHJhY3QgaG9sZGluZyBvbmx5IGRhdGEuCiAgICBFdGhlcm5hdXRzU3RvcmFnZSBwdWJsaWMgZXRoZXJuYXV0c1N0b3JhZ2U7CgogICAgLyoqKiBDT05TVEFOVFMgKioqLwogICAgLy8vIEBub3RpY2UgTmFtZSBhbmQgc3ltYm9sIG9mIHRoZSBub24gZnVuZ2libGUgdG9rZW4sIGFzIGRlZmluZWQgaW4gRVJDNzIxLgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkV0aGVybmF1dHMiOwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiRVROVCI7CgogICAgLyoqKioqKioqKiBFUkMgNzIxIC0gQ09NUExJQU5DRSBDT05TVEFOVFMgQU5EIEZVTkNUSU9OUyAqKioqKioqKioqKioqKiovCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICBieXRlczQgY29uc3RhbnQgSW50ZXJmYWNlU2lnbmF0dXJlX0VSQzE2NSA9IGJ5dGVzNChrZWNjYWsyNTYoJ3N1cHBvcnRzSW50ZXJmYWNlKGJ5dGVzNCknKSk7CgogICAgLyoqKiBFVkVOVFMgKioqLwoKICAgIC8vIEV2ZW50cyBhcyBwZXIgRVJDLTcyMQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB0b2tlbnMpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgYXBwcm92ZWQsIHVpbnQyNTYgdG9rZW5zKTsKCiAgICAvLy8gQGRldiBXaGVuIGEgbmV3IGFzc2V0IGlzIGNyZWF0ZSBpdCBlbWl0cyBidWlsZCBldmVudAogICAgLy8vIEBwYXJhbSBvd25lciBUaGUgYWRkcmVzcyBvZiBhc3NldCBvd25lcgogICAgLy8vIEBwYXJhbSB0b2tlbklkIEFzc2V0IFVuaXF1ZUlECiAgICAvLy8gQHBhcmFtIGFzc2V0SWQgSUQgdGhhdCBkZWZpbmVzIGFzc2V0IGxvb2sgYW5kIGZlZWwKICAgIC8vLyBAcGFyYW0gcHJpY2UgYXNzZXQgcHJpY2UKICAgIGV2ZW50IEJ1aWxkKGFkZHJlc3Mgb3duZXIsIHVpbnQyNTYgdG9rZW5JZCwgdWludDE2IGFzc2V0SWQsIHVpbnQyNTYgcHJpY2UpOwoKICAgIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8vIEBub3RpY2UgSW50cm9zcGVjdGlvbiBpbnRlcmZhY2UgYXMgcGVyIEVSQy0xNjUgKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xNjUpLgogICAgLy8vICBSZXR1cm5zIHRydWUgZm9yIGFueSBzdGFuZGFyZGl6ZWQgaW50ZXJmYWNlcyBpbXBsZW1lbnRlZCBieSB0aGlzIGNvbnRyYWN0LiBFUkMtMTY1IGFuZCBFUkMtNzIxLgogICAgLy8vIEBwYXJhbSBfaW50ZXJmYWNlSUQgaW50ZXJmYWNlIHNpZ25hdHVyZSBJRAogICAgZnVuY3Rpb24gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0IF9pbnRlcmZhY2VJRCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zIChib29sKQogICAgewogICAgICAgIHJldHVybiAoKF9pbnRlcmZhY2VJRCA9PSBJbnRlcmZhY2VTaWduYXR1cmVfRVJDMTY1KSB8fCAoX2ludGVyZmFjZUlEID09IEludGVyZmFjZVNpZ25hdHVyZV9FUkM3MjEpKTsKICAgIH0KCiAgICAvLy8gQGRldiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIHRoZSBjdXJyZW50IG93bmVyIG9mIGEgcGFydGljdWxhciBBc3NldC4KICAgIC8vLyBAcGFyYW0gX2NsYWltYW50IHRoZSBhZGRyZXNzIHdlIGFyZSB2YWxpZGF0aW5nIGFnYWluc3QuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIGFzc2V0IFVuaXF1ZUlkLCBvbmx5IHZhbGlkIHdoZW4gPiAwCiAgICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIF9jbGFpbWFudCwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIGV0aGVybmF1dHNTdG9yYWdlLm93bmVyT2YoX3Rva2VuSWQpID09IF9jbGFpbWFudDsKICAgIH0KCiAgICAvLy8gQGRldiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGN1cnJlbnRseSBoYXMgdHJhbnNmZXJBcHByb3ZhbCBmb3IgYSBwYXJ0aWN1bGFyIEFzc2V0LgogICAgLy8vIEBwYXJhbSBfY2xhaW1hbnQgdGhlIGFkZHJlc3Mgd2UgYXJlIGNvbmZpcm1pbmcgYXNzZXQgaXMgYXBwcm92ZWQgZm9yLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBhc3NldCBVbmlxdWVJZCwgb25seSB2YWxpZCB3aGVuID4gMAogICAgZnVuY3Rpb24gX2FwcHJvdmVkRm9yKGFkZHJlc3MgX2NsYWltYW50LCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gZXRoZXJuYXV0c1N0b3JhZ2UuYXBwcm92ZWRGb3IoX3Rva2VuSWQpID09IF9jbGFpbWFudDsKICAgIH0KCiAgICAvLy8gQGRldiBNYXJrcyBhbiBhZGRyZXNzIGFzIGJlaW5nIGFwcHJvdmVkIGZvciB0cmFuc2ZlckZyb20oKSwgb3ZlcndyaXRpbmcgYW55IHByZXZpb3VzCiAgICAvLy8gIGFwcHJvdmFsLiBTZXR0aW5nIF9hcHByb3ZlZCB0byBhZGRyZXNzKDApIGNsZWFycyBhbGwgdHJhbnNmZXIgYXBwcm92YWwuCiAgICAvLy8gIE5PVEU6IF9hcHByb3ZlKCkgZG9lcyBOT1Qgc2VuZCB0aGUgQXBwcm92YWwgZXZlbnQuIFRoaXMgaXMgaW50ZW50aW9uYWwgYmVjYXVzZQogICAgLy8vICBfYXBwcm92ZSgpIGFuZCB0cmFuc2ZlckZyb20oKSBhcmUgdXNlZCB0b2dldGhlciBmb3IgcHV0dGluZyBBc3NldHMgb24gYXVjdGlvbiwgYW5kCiAgICAvLy8gIHRoZXJlIGlzIG5vIHZhbHVlIGluIHNwYW1taW5nIHRoZSBsb2cgd2l0aCBBcHByb3ZhbCBldmVudHMgaW4gdGhhdCBjYXNlLgogICAgZnVuY3Rpb24gX2FwcHJvdmUodWludDI1NiBfdG9rZW5JZCwgYWRkcmVzcyBfYXBwcm92ZWQpIGludGVybmFsIHsKICAgICAgICBldGhlcm5hdXRzU3RvcmFnZS5hcHByb3ZlKF90b2tlbklkLCBfYXBwcm92ZWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJldHVybnMgdGhlIG51bWJlciBvZiBBc3NldHMgb3duZWQgYnkgYSBzcGVjaWZpYyBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIGFkZHJlc3MgdG8gY2hlY2suCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgY291bnQpIHsKICAgICAgICByZXR1cm4gZXRoZXJuYXV0c1N0b3JhZ2UuYmFsYW5jZU9mKF9vd25lcik7CiAgICB9CgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIC8vLyBAbm90aWNlIFRyYW5zZmVycyBhIEFzc2V0IHRvIGFub3RoZXIgYWRkcmVzcy4gSWYgdHJhbnNmZXJyaW5nIHRvIGEgc21hcnQKICAgIC8vLyAgY29udHJhY3QgYmUgVkVSWSBDQVJFRlVMIHRvIGVuc3VyZSB0aGF0IGl0IGlzIGF3YXJlIG9mIEVSQy03MjEgKG9yCiAgICAvLy8gIEV0aGVybmF1dHMgc3BlY2lmaWNhbGx5KSBvciB5b3VyIEFzc2V0IG1heSBiZSBsb3N0IGZvcmV2ZXIuIFNlcmlvdXNseS4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQsIGNhbiBiZSBhIHVzZXIgb3IgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgQXNzZXQgdG8gdHJhbnNmZXIuCiAgICBmdW5jdGlvbiB0cmFuc2ZlcigKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF90b2tlbklkCiAgICApCiAgICBleHRlcm5hbAogICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICAvLyBEaXNhbGxvdyB0cmFuc2ZlcnMgdG8gdGhpcyBjb250cmFjdCB0byBwcmV2ZW50IGFjY2lkZW50YWwgbWlzdXNlLgogICAgICAgIC8vIFRoZSBjb250cmFjdCBzaG91bGQgbmV2ZXIgb3duIGFueSBhc3NldHMKICAgICAgICAvLyAoZXhjZXB0IHZlcnkgYnJpZWZseSBhZnRlciBpdCBpcyBjcmVhdGVkIGFuZCBiZWZvcmUgaXQgZ29lcyBvbiBhdWN0aW9uKS4KICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICAvLyBEaXNhbGxvdyB0cmFuc2ZlcnMgdG8gdGhlIHN0b3JhZ2UgY29udHJhY3QgdG8gcHJldmVudCBhY2NpZGVudGFsCiAgICAgICAgLy8gbWlzdXNlLiBBdWN0aW9uIG9yIFVwZ3JhZGUgY29udHJhY3RzIHNob3VsZCBvbmx5IHRha2Ugb3duZXJzaGlwIG9mIGFzc2V0cwogICAgICAgIC8vIHRocm91Z2ggdGhlIGFsbG93ICsgdHJhbnNmZXJGcm9tIGZsb3cuCiAgICAgICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcyhldGhlcm5hdXRzU3RvcmFnZSkpOwoKICAgICAgICAvLyBZb3UgY2FuIG9ubHkgc2VuZCB5b3VyIG93biBhc3NldC4KICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIC8vIFJlYXNzaWduIG93bmVyc2hpcCwgY2xlYXIgcGVuZGluZyBhcHByb3ZhbHMsIGVtaXQgVHJhbnNmZXIgZXZlbnQuCiAgICAgICAgZXRoZXJuYXV0c1N0b3JhZ2UudHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIC8vLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgYSBzcGVjaWZpYyBBc3NldCB2aWEKICAgIC8vLyAgdHJhbnNmZXJGcm9tKCkuIFRoaXMgaXMgdGhlIHByZWZlcnJlZCBmbG93IGZvciB0cmFuc2ZlcmluZyBORlRzIHRvIGNvbnRyYWN0cy4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogICAgLy8vICBjbGVhciBhbGwgYXBwcm92YWxzLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIEFzc2V0IHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAgIGZ1bmN0aW9uIGFwcHJvdmUoCiAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgdWludDI1NiBfdG9rZW5JZAogICAgKQogICAgZXh0ZXJuYWwKICAgIHdoZW5Ob3RQYXVzZWQKICAgIHsKICAgICAgICAvLyBPbmx5IGFuIG93bmVyIGNhbiBncmFudCB0cmFuc2ZlciBhcHByb3ZhbC4KICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBhcHByb3ZhbCAocmVwbGFjaW5nIGFueSBwcmV2aW91cyBhcHByb3ZhbCkuCiAgICAgICAgX2FwcHJvdmUoX3Rva2VuSWQsIF90byk7CgogICAgICAgIC8vIEVtaXQgYXBwcm92YWwgZXZlbnQuCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVyIGEgQXNzZXQgb3duZWQgYnkgYW5vdGhlciBhZGRyZXNzLCBmb3Igd2hpY2ggdGhlIGNhbGxpbmcgYWRkcmVzcwogICAgLy8vICBoYXMgcHJldmlvdXNseSBiZWVuIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwgYnkgdGhlIG93bmVyLgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlIEFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3MgdGhhdCBzaG91bGQgdGFrZSBvd25lcnNoaXAgb2YgdGhlIEFzc2V0LiBDYW4gYmUgYW55IGFkZHJlc3MsCiAgICAvLy8gIGluY2x1ZGluZyB0aGUgY2FsbGVyLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIEFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgogICAgZnVuY3Rpb24gX3RyYW5zZmVyRnJvbSgKICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQKICAgICkKICAgIGludGVybmFsCiAgICB7CiAgICAgICAgLy8gU2FmZXR5IGNoZWNrIHRvIHByZXZlbnQgYWdhaW5zdCBhbiB1bmV4cGVjdGVkIDB4MCBkZWZhdWx0LgogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3MoMCkpOwogICAgICAgIC8vIERpc2FsbG93IHRyYW5zZmVycyB0byB0aGlzIGNvbnRyYWN0IHRvIHByZXZlbnQgYWNjaWRlbnRhbCBtaXN1c2UuCiAgICAgICAgLy8gVGhlIGNvbnRyYWN0IHNob3VsZCBuZXZlciBvd24gYW55IGFzc2V0cyAoZXhjZXB0IGZvciB1c2VkIGFzc2V0cykuCiAgICAgICAgcmVxdWlyZShfb3ducyhfZnJvbSwgX3Rva2VuSWQpKTsKICAgICAgICAvLyBDaGVjayBmb3IgYXBwcm92YWwgYW5kIHZhbGlkIG93bmVyc2hpcAogICAgICAgIHJlcXVpcmUoX2FwcHJvdmVkRm9yKF90bywgX3Rva2VuSWQpKTsKCiAgICAgICAgLy8gUmVhc3NpZ24gb3duZXJzaGlwIChhbHNvIGNsZWFycyBwZW5kaW5nIGFwcHJvdmFscyBhbmQgZW1pdHMgVHJhbnNmZXIgZXZlbnQpLgogICAgICAgIGV0aGVybmF1dHNTdG9yYWdlLnRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogICAgLy8vIEBub3RpY2UgVHJhbnNmZXIgYSBBc3NldCBvd25lZCBieSBhbm90aGVyIGFkZHJlc3MsIGZvciB3aGljaCB0aGUgY2FsbGluZyBhZGRyZXNzCiAgICAvLy8gIGhhcyBwcmV2aW91c2x5IGJlZW4gZ3JhbnRlZCB0cmFuc2ZlciBhcHByb3ZhbCBieSB0aGUgb3duZXIuCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIHRoYXQgb3ducyB0aGUgQXNzZXQgdG8gYmUgdHJhbnNmZXJlZC4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRoYXQgc2hvdWxkIHRha2Ugb3duZXJzaGlwIG9mIHRoZSBBc3NldC4gQ2FuIGJlIGFueSBhZGRyZXNzLAogICAgLy8vICBpbmNsdWRpbmcgdGhlIGNhbGxlci4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBBc3NldCB0byBiZSB0cmFuc2ZlcnJlZC4KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgKICAgICAgICBhZGRyZXNzIF9mcm9tLAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQKICAgICkKICAgIGV4dGVybmFsCiAgICB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgX3RyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIC8vLyBAbm90aWNlIEFsbG93IHByZS1hcHByb3ZlZCB1c2VyIHRvIHRha2Ugb3duZXJzaGlwIG9mIGEgdG9rZW4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBUb2tlbiB0aGF0IGNhbiBiZSB0cmFuc2ZlcnJlZCBpZiB0aGlzIGNhbGwgc3VjY2VlZHMuCiAgICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB7CiAgICAgICAgYWRkcmVzcyBfZnJvbSA9IGV0aGVybmF1dHNTdG9yYWdlLm93bmVyT2YoX3Rva2VuSWQpOwoKICAgICAgICAvLyBTYWZldHkgY2hlY2sgdG8gcHJldmVudCBhZ2FpbnN0IGFuIHVuZXhwZWN0ZWQgMHgwIGRlZmF1bHQuCiAgICAgICAgcmVxdWlyZShfZnJvbSAhPSBhZGRyZXNzKDApKTsKICAgICAgICBfdHJhbnNmZXJGcm9tKF9mcm9tLCBtc2cuc2VuZGVyLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIEFzc2V0cyBjdXJyZW50bHkgaW4gZXhpc3RlbmNlLgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBldGhlcm5hdXRzU3RvcmFnZS50b3RhbFN1cHBseSgpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJldHVybnMgb3duZXIgb2YgYSBnaXZlbiBBc3NldChUb2tlbikuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRva2VuIElEIHRvIGdldCBvd25lci4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbAogICAgdmlldwogICAgcmV0dXJucyAoYWRkcmVzcyBvd25lcikKICAgIHsKICAgICAgICBvd25lciA9IGV0aGVybmF1dHNTdG9yYWdlLm93bmVyT2YoX3Rva2VuSWQpOwoKICAgICAgICByZXF1aXJlKG93bmVyICE9IGFkZHJlc3MoMCkpOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWF0ZXMgYSBuZXcgQXNzZXQgd2l0aCB0aGUgZ2l2ZW4gZmllbGRzLiBPTmx5IGF2YWlsYWJsZSBmb3IgQyBMZXZlbHMKICAgIC8vLyBAcGFyYW0gX2NyZWF0b3JUb2tlbklEIFRoZSBhc3NldCB3aG8gaXMgZmF0aGVyIG9mIHRoaXMgYXNzZXQKICAgIC8vLyBAcGFyYW0gX3ByaWNlIGFzc2V0IHByaWNlCiAgICAvLy8gQHBhcmFtIF9hc3NldElEIGFzc2V0IElECiAgICAvLy8gQHBhcmFtIF9jYXRlZ29yeSBzZWUgQXNzZXQgU3RydWN0IGRlc2NyaXB0aW9uCiAgICAvLy8gQHBhcmFtIF9hdHRyaWJ1dGVzIHNlZSBBc3NldCBTdHJ1Y3QgZGVzY3JpcHRpb24KICAgIC8vLyBAcGFyYW0gX3N0YXRzIHNlZSBBc3NldCBTdHJ1Y3QgZGVzY3JpcHRpb24KICAgIGZ1bmN0aW9uIGNyZWF0ZU5ld0Fzc2V0KAogICAgICAgIHVpbnQyNTYgX2NyZWF0b3JUb2tlbklELAogICAgICAgIHVpbnQyNTYgX3ByaWNlLAogICAgICAgIHVpbnQxNiBfYXNzZXRJRCwKICAgICAgICB1aW50OCBfY2F0ZWdvcnksCiAgICAgICAgdWludDggX2F0dHJpYnV0ZXMsCiAgICAgICAgdWludDhbU1RBVFNfU0laRV0gX3N0YXRzCiAgICApCiAgICBleHRlcm5hbCBvbmx5Q0xldmVsCiAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIC8vIG93bmVyIG11c3QgYmUgc2VuZGVyCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICB1aW50MjU2IHRva2VuSUQgPSBldGhlcm5hdXRzU3RvcmFnZS5jcmVhdGVBc3NldCgKICAgICAgICAgICAgX2NyZWF0b3JUb2tlbklELAogICAgICAgICAgICBtc2cuc2VuZGVyLAogICAgICAgICAgICBfcHJpY2UsCiAgICAgICAgICAgIF9hc3NldElELAogICAgICAgICAgICBfY2F0ZWdvcnksCiAgICAgICAgICAgIHVpbnQ4KEFzc2V0U3RhdGUuQXZhaWxhYmxlKSwKICAgICAgICAgICAgX2F0dHJpYnV0ZXMsCiAgICAgICAgICAgIF9zdGF0cywKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMAogICAgICAgICk7CgogICAgICAgIC8vIGVtaXQgdGhlIGJ1aWxkIGV2ZW50CiAgICAgICAgQnVpbGQoCiAgICAgICAgICAgIG1zZy5zZW5kZXIsCiAgICAgICAgICAgIHRva2VuSUQsCiAgICAgICAgICAgIF9hc3NldElELAogICAgICAgICAgICBfcHJpY2UKICAgICAgICApOwoKICAgICAgICByZXR1cm4gdG9rZW5JRDsKICAgIH0KCiAgICAvLy8gQG5vdGljZSB2ZXJpZnkgaWYgdG9rZW4gaXMgaW4gZXhwbG9yYXRpb24gdGltZQogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgVG9rZW4gSUQgdGhhdCBjYW4gYmUgdXBncmFkZWQKICAgIGZ1bmN0aW9uIGlzRXhwbG9yaW5nKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wpIHsKICAgICAgICB1aW50MjU2IGNvb2xkb3duOwogICAgICAgIHVpbnQ2NCBjb29sZG93bkVuZEJsb2NrOwogICAgICAgICgsLCwsLGNvb2xkb3duRW5kQmxvY2ssIGNvb2xkb3duLCkgPSBldGhlcm5hdXRzU3RvcmFnZS5hc3NldHMoX3Rva2VuSWQpOwogICAgICAgIHJldHVybiAoY29vbGRvd24gPiBub3cpIHx8IChjb29sZG93bkVuZEJsb2NrID4gdWludDY0KGJsb2NrLm51bWJlcikpOwogICAgfQp9CgoKLy8vIEB0aXRsZSBUaGUgZmFjZXQgb2YgdGhlIEV0aGVybmF1dHMgTG9naWMgY29udHJhY3QgaGFuZGxlIGFsbCBjb21tb24gY29kZSBmb3IgbG9naWMvYnVzaW5lc3MgY29udHJhY3RzCi8vLyBAYXV0aG9yIEV0aGVybmF0dXMgLSBGZXJuYW5kbyBQYXVlcgpjb250cmFjdCBFdGhlcm5hdXRzTG9naWMgaXMgRXRoZXJuYXV0c093bmVyc2hpcCB7CgogICAgLy8gU2V0IGluIGNhc2UgdGhlIGxvZ2ljIGNvbnRyYWN0IGlzIGJyb2tlbiBhbmQgYW4gdXBncmFkZSBpcyByZXF1aXJlZAogICAgYWRkcmVzcyBwdWJsaWMgbmV3Q29udHJhY3RBZGRyZXNzOwoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBFdGhlcm5hdXRzTG9naWMoKSBwdWJsaWMgewogICAgICAgIC8vIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCBpcyB0aGUgaW5pdGlhbCBDRU8sIENPTywgQ1RPCiAgICAgICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgY3RvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICAgICAgb3JhY2xlQWRkcmVzcyA9IG1zZy5zZW5kZXI7CgogICAgICAgIC8vIFN0YXJ0cyBwYXVzZWQuCiAgICAgICAgcGF1c2VkID0gdHJ1ZTsKICAgIH0KCiAgICAvLy8gQGRldiBVc2VkIHRvIG1hcmsgdGhlIHNtYXJ0IGNvbnRyYWN0IGFzIHVwZ3JhZGVkLCBpbiBjYXNlIHRoZXJlIGlzIGEgc2VyaW91cwogICAgLy8vICBicmVha2luZyBidWcuIFRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyBidXQga2VlcCB0cmFjayBvZiB0aGUgbmV3IGNvbnRyYWN0IGFuZAogICAgLy8vICBlbWl0IGEgbWVzc2FnZSBpbmRpY2F0aW5nIHRoYXQgdGhlIG5ldyBhZGRyZXNzIGlzIHNldC4gSXQncyB1cCB0byBjbGllbnRzIG9mIHRoaXMKICAgIC8vLyAgY29udHJhY3QgdG8gdXBkYXRlIHRvIHRoZSBuZXcgY29udHJhY3QgYWRkcmVzcyBpbiB0aGF0IGNhc2UuIChUaGlzIGNvbnRyYWN0IHdpbGwKICAgIC8vLyAgYmUgcGF1c2VkIGluZGVmaW5pdGVseSBpZiBzdWNoIGFuIHVwZ3JhZGUgdGFrZXMgcGxhY2UuKQogICAgLy8vIEBwYXJhbSBfdjJBZGRyZXNzIG5ldyBhZGRyZXNzCiAgICBmdW5jdGlvbiBzZXROZXdBZGRyZXNzKGFkZHJlc3MgX3YyQWRkcmVzcykgZXh0ZXJuYWwgb25seUNUTyB3aGVuUGF1c2VkIHsKICAgICAgICAvLyBTZWUgUkVBRE1FLm1kIGZvciB1cGRncmFkZSBwbGFuCiAgICAgICAgbmV3Q29udHJhY3RBZGRyZXNzID0gX3YyQWRkcmVzczsKICAgICAgICBDb250cmFjdFVwZ3JhZGUoX3YyQWRkcmVzcyk7CiAgICB9CgogICAgLy8vIEBkZXYgc2V0IGEgbmV3IHJlZmVyZW5jZSB0byB0aGUgTkZUIG93bmVyc2hpcCBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfQ1N0b3JhZ2VBZGRyZXNzIC0gYWRkcmVzcyBvZiBhIGRlcGxveWVkIGNvbnRyYWN0IGltcGxlbWVudGluZyBFdGhlcm5hdXRzU3RvcmFnZS4KICAgIGZ1bmN0aW9uIHNldEV0aGVybmF1dHNTdG9yYWdlQ29udHJhY3QoYWRkcmVzcyBfQ1N0b3JhZ2VBZGRyZXNzKSBwdWJsaWMgb25seUNMZXZlbCB3aGVuUGF1c2VkIHsKICAgICAgICBFdGhlcm5hdXRzU3RvcmFnZSBjYW5kaWRhdGVDb250cmFjdCA9IEV0aGVybmF1dHNTdG9yYWdlKF9DU3RvcmFnZUFkZHJlc3MpOwogICAgICAgIHJlcXVpcmUoY2FuZGlkYXRlQ29udHJhY3QuaXNFdGhlcm5hdXRzU3RvcmFnZSgpKTsKICAgICAgICBldGhlcm5hdXRzU3RvcmFnZSA9IGNhbmRpZGF0ZUNvbnRyYWN0OwogICAgfQoKICAgIC8vLyBAZGV2IE92ZXJyaWRlIHVucGF1c2Ugc28gaXQgcmVxdWlyZXMgYWxsIGV4dGVybmFsIGNvbnRyYWN0IGFkZHJlc3NlcwogICAgLy8vICB0byBiZSBzZXQgYmVmb3JlIGNvbnRyYWN0IGNhbiBiZSB1bnBhdXNlZC4gQWxzbywgd2UgY2FuJ3QgaGF2ZQogICAgLy8vICBuZXdDb250cmFjdEFkZHJlc3Mgc2V0IGVpdGhlciwgYmVjYXVzZSB0aGVuIHRoZSBjb250cmFjdCB3YXMgdXBncmFkZWQuCiAgICAvLy8gQG5vdGljZSBUaGlzIGlzIHB1YmxpYyByYXRoZXIgdGhhbiBleHRlcm5hbCBzbyB3ZSBjYW4gY2FsbCBzdXBlci51bnBhdXNlCiAgICAvLy8gIHdpdGhvdXQgdXNpbmcgYW4gZXhwZW5zaXZlIENBTEwuCiAgICBmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlDRU8gd2hlblBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShldGhlcm5hdXRzU3RvcmFnZSAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKG5ld0NvbnRyYWN0QWRkcmVzcyA9PSBhZGRyZXNzKDApKTsKICAgICAgICAvLyByZXF1aXJlIHRoaXMgY29udHJhY3QgdG8gaGF2ZSBhY2Nlc3MgdG8gc3RvcmFnZSBjb250cmFjdAogICAgICAgIHJlcXVpcmUoZXRoZXJuYXV0c1N0b3JhZ2UuY29udHJhY3RzR3JhbnRlZEFjY2VzcyhhZGRyZXNzKHRoaXMpKSA9PSB0cnVlKTsKCiAgICAgICAgLy8gQWN0dWFsbHkgdW5wYXVzZSB0aGUgY29udHJhY3QuCiAgICAgICAgc3VwZXIudW5wYXVzZSgpOwogICAgfQoKICAgIC8vIEBkZXYgQWxsb3dzIHRoZSBDT08gdG8gY2FwdHVyZSB0aGUgYmFsYW5jZSBhdmFpbGFibGUgdG8gdGhlIGNvbnRyYWN0LgogICAgZnVuY3Rpb24gd2l0aGRyYXdCYWxhbmNlcyhhZGRyZXNzIF90bykgcHVibGljIG9ubHlDTGV2ZWwgewogICAgICAgIF90by50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOwogICAgfQoKICAgIC8vLyByZXR1cm4gY3VycmVudCBjb250cmFjdCBiYWxhbmNlCiAgICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgcHVibGljIHZpZXcgb25seUNMZXZlbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZTsKICAgIH0KfQoKLy8vIEB0aXRsZSBDbG9jayBhdWN0aW9uIGZvciBub24tZnVuZ2libGUgdG9rZW5zLgovLy8gQG5vdGljZSBXZSBvbWl0IGEgZmFsbGJhY2sgZnVuY3Rpb24gdG8gcHJldmVudCBhY2NpZGVudGFsIHNlbmRzIHRvIHRoaXMgY29udHJhY3QuCi8vLyAgICAgICAgIFRoaXMgcHJvdmlkZXMgcHVibGljIG1ldGhvZHMgZm9yIGF1Y3Rpb25pbmcgb3IgYmlkZGluZyBvbiBhc3NldHMsIHB1cmNoYXNlIChHb2xkZW5Hb29zZSkgYW5kIFVwZ3JhZGUgc2hpcC4KLy8vCi8vLyAgICAgIC0gQXVjdGlvbnMvQmlkZGluZzogVGhpcyBwcm92aWRlcyBwdWJsaWMgbWV0aG9kcyBmb3IgYXVjdGlvbmluZyBvciBiaWRkaW5nIG9uIGFzc2V0cy4KLy8vICAgICAgICAgICAgIEF1Y3Rpb24gY3JlYXRpb24gaXMgbW9zdGx5IG1lZGlhdGVkIHRocm91Z2ggdGhpcyBmYWNldCBvZiB0aGUgbG9naWMgY29udHJhY3QuCi8vLwovLy8gICAgICAtIFB1cmNoYXNlOiBUaGlzIHByb3ZpZGVzIHB1YmxpYyBtZXRob2RzIGZvciBidXlpbmcgR29sZGVuR29vc2UgYXNzZXRzLgovLy8gQGF1dGhvciBFdGhlcm5hdHVzIC0gRmVybmFuZG8gUGF1ZXIKY29udHJhY3QgRXRoZXJuYXV0c01hcmtldCBpcyBFdGhlcm5hdXRzTG9naWMsIENsb2NrQXVjdGlvbkJhc2UgewoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yIGNyZWF0ZXMgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBvd25lcnNoaXAgY29udHJhY3QKICAgIC8vLyAgYW5kIHZlcmlmaWVzIHRoZSBvd25lciBjdXQgaXMgaW4gdGhlIHZhbGlkIHJhbmdlLgogICAgLy8vICBhbmQgRGVsZWdhdGUgY29uc3RydWN0b3IgdG8gRXRoZXJuYXV0c1VwZ3JhZGUgY29udHJhY3QuCiAgICAvLy8gQHBhcmFtIF9jdXQgLSBwZXJjZW50IGN1dCB0aGUgb3duZXIgdGFrZXMgb24gZWFjaCBhdWN0aW9uLCBtdXN0IGJlCiAgICAvLy8gIGJldHdlZW4gMC0xMCwwMDAuCiAgICBmdW5jdGlvbiBFdGhlcm5hdXRzTWFya2V0KHVpbnQyNTYgX2N1dCkgcHVibGljCiAgICBFdGhlcm5hdXRzTG9naWMoKSB7CiAgICAgICAgcmVxdWlyZShfY3V0IDw9IDEwMDAwKTsKICAgICAgICBvd25lckN1dCA9IF9jdXQ7CiAgICAgICAgbm9uRnVuZ2libGVDb250cmFjdCA9IHRoaXM7CiAgICB9CgogICAgLyoqKiBFVkVOVFMgKioqLwogICAgLy8vIEBkZXYgVGhlIFB1cmNoYXNlIGV2ZW50IGlzIGZpcmVkIHdoZW5ldmVyIGEgdG9rZW4gaXMgc29sZC4KICAgIGV2ZW50IFB1cmNoYXNlKHVpbnQyNTYgaW5kZXhlZCB0b2tlbklkLCB1aW50MjU2IG9sZFByaWNlLCB1aW50MjU2IG5ld1ByaWNlLCBhZGRyZXNzIGluZGV4ZWQgcHJldk93bmVyLCBhZGRyZXNzIGluZGV4ZWQgd2lubmVyKTsKCiAgICAvKioqIENPTlNUQU5UUyAqKiovCiAgICB1aW50OCBwcml2YXRlIHBlcmNlbnRhZ2VGZWUxU3RlcCA9IDk1OwogICAgdWludDggcHJpdmF0ZSBwZXJjZW50YWdlRmVlMlN0ZXAgPSA5NTsKICAgIHVpbnQ4IHByaXZhdGUgcGVyY2VudGFnZUZlZVN0ZXBzID0gOTg7CiAgICB1aW50OCBwcml2YXRlIHBlcmNlbnRhZ2VCYXNlID0gMTAwOwogICAgdWludDggcHJpdmF0ZSBwZXJjZW50YWdlMVN0ZXAgPSAyMDA7CiAgICB1aW50OCBwcml2YXRlIHBlcmNlbnRhZ2UyU3RlcCA9IDEyNTsKICAgIHVpbnQ4IHByaXZhdGUgcGVyY2VudGFnZVN0ZXBzID0gMTE1OwogICAgdWludDI1NiBwcml2YXRlIGZpcnN0U3RlcExpbWl0ID0gIDAuMDUgZXRoZXI7CiAgICB1aW50MjU2IHByaXZhdGUgc2Vjb25kU3RlcExpbWl0ID0gNSBldGhlcjsKCiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqIEFVQ1RJT04gQU5EIEJJRERJTkcgKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgLy8vIEBkZXYgQmlkcyBvbiBhbiBvcGVuIGF1Y3Rpb24sIGNvbXBsZXRpbmcgdGhlIGF1Y3Rpb24gYW5kIHRyYW5zZmVycmluZwogICAgLy8vICBvd25lcnNoaXAgb2YgdGhlIE5GVCBpZiBlbm91Z2ggRXRoZXIgaXMgc3VwcGxpZWQuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gdG8gYmlkIG9uLgogICAgZnVuY3Rpb24gYmlkKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbAogICAgcGF5YWJsZQogICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIF9iaWQgd2lsbCB0aHJvdyBpZiB0aGUgYmlkIG9yIGZ1bmRzIHRyYW5zZmVyIGZhaWxzCiAgICAgICAgdWludDI1NiBuZXdQcmljZSA9IF9iaWQoX3Rva2VuSWQsIG1zZy52YWx1ZSk7CiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90b2tlbklkKTsKCiAgICAgICAgLy8gb25seSBzZXQgbmV3IHByaWNlIGFmdGVyIHRyYW5zZmVyCiAgICAgICAgZXRoZXJuYXV0c1N0b3JhZ2Uuc2V0UHJpY2UoX3Rva2VuSWQsIG5ld1ByaWNlKTsKICAgIH0KCiAgICAvLy8gQGRldiBDYW5jZWxzIGFuIGF1Y3Rpb24gdGhhdCBoYXNuJ3QgYmVlbiB3b24geWV0LgogICAgLy8vICBSZXR1cm5zIHRoZSBORlQgdG8gb3JpZ2luYWwgb3duZXIuCiAgICAvLy8gQG5vdGljZSBUaGlzIGlzIGEgc3RhdGUtbW9kaWZ5aW5nIGZ1bmN0aW9uIHRoYXQgY2FuCiAgICAvLy8gIGJlIGNhbGxlZCB3aGlsZSB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIHRva2VuIG9uIGF1Y3Rpb24KICAgIGZ1bmN0aW9uIGNhbmNlbEF1Y3Rpb24odWludDI1NiBfdG9rZW5JZCkKICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgYWRkcmVzcyBzZWxsZXIgPSBhdWN0aW9uLnNlbGxlcjsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gc2VsbGVyKTsKICAgICAgICBfY2FuY2VsQXVjdGlvbihfdG9rZW5JZCwgc2VsbGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBDYW5jZWxzIGFuIGF1Y3Rpb24gd2hlbiB0aGUgY29udHJhY3QgaXMgcGF1c2VkLgogICAgLy8vICBPbmx5IHRoZSBvd25lciBtYXkgZG8gdGhpcywgYW5kIE5GVHMgYXJlIHJldHVybmVkIHRvCiAgICAvLy8gIHRoZSBzZWxsZXIuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBlbWVyZ2VuY2llcy4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0aGUgTkZUIG9uIGF1Y3Rpb24gdG8gY2FuY2VsLgogICAgZnVuY3Rpb24gY2FuY2VsQXVjdGlvbldoZW5QYXVzZWQodWludDI1NiBfdG9rZW5JZCkKICAgIHdoZW5QYXVzZWQKICAgIG9ubHlDTGV2ZWwKICAgIGV4dGVybmFsCiAgICB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgX2NhbmNlbEF1Y3Rpb24oX3Rva2VuSWQsIGF1Y3Rpb24uc2VsbGVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBSZXR1cm5zIGF1Y3Rpb24gaW5mbyBmb3IgYW4gTkZUIG9uIGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgTkZUIG9uIGF1Y3Rpb24uCiAgICBmdW5jdGlvbiBnZXRBdWN0aW9uKHVpbnQyNTYgX3Rva2VuSWQpCiAgICBleHRlcm5hbAogICAgdmlldwogICAgcmV0dXJucwogICAgKAogICAgICAgIGFkZHJlc3Mgc2VsbGVyLAogICAgICAgIHVpbnQyNTYgc3RhcnRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IGVuZGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgZHVyYXRpb24sCiAgICAgICAgdWludDI1NiBzdGFydGVkQXQKICAgICkgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIHJldHVybiAoCiAgICAgICAgYXVjdGlvbi5zZWxsZXIsCiAgICAgICAgYXVjdGlvbi5zdGFydGluZ1ByaWNlLAogICAgICAgIGF1Y3Rpb24uZW5kaW5nUHJpY2UsCiAgICAgICAgYXVjdGlvbi5kdXJhdGlvbiwKICAgICAgICBhdWN0aW9uLnN0YXJ0ZWRBdAogICAgICAgICk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0aGUgY3VycmVudCBwcmljZSBvZiBhbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIHRoZSB0b2tlbiBwcmljZSB3ZSBhcmUgY2hlY2tpbmcuCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50UHJpY2UodWludDI1NiBfdG9rZW5JZCkKICAgIGV4dGVybmFsCiAgICB2aWV3CiAgICByZXR1cm5zICh1aW50MjU2KQogICAgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIHJldHVybiBfY3VycmVudFByaWNlKGF1Y3Rpb24pOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWF0ZXMgYW5kIGJlZ2lucyBhIG5ldyBhdWN0aW9uLiBEb2VzIHNvbWUgb3duZXJzaGlwIHRyaWNrZXJ5IHRvIGNyZWF0ZSBhdWN0aW9ucyBpbiBvbmUgdHguCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gdG8gYXVjdGlvbiwgc2VuZGVyIG11c3QgYmUgb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zdGFydGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBiZWdpbm5pbmcgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2VuZGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBlbmQgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2R1cmF0aW9uIC0gTGVuZ3RoIG9mIHRpbWUgdG8gbW92ZSBiZXR3ZWVuIHN0YXJ0aW5nCiAgICAvLy8gIHByaWNlIGFuZCBlbmRpbmcgcHJpY2UgKGluIHNlY29uZHMpLgogICAgZnVuY3Rpb24gY3JlYXRlU2FsZUF1Y3Rpb24oCiAgICAgICAgdWludDI1NiBfdG9rZW5JZCwKICAgICAgICB1aW50MjU2IF9zdGFydGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2VuZGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2R1cmF0aW9uCiAgICApCiAgICBleHRlcm5hbAogICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIFNhbml0eSBjaGVjayB0aGF0IG5vIGlucHV0cyBvdmVyZmxvdyBob3cgbWFueSBiaXRzIHdlJ3ZlIGFsbG9jYXRlZAogICAgICAgIC8vIHRvIHN0b3JlIHRoZW0gaW4gdGhlIGF1Y3Rpb24gc3RydWN0LgogICAgICAgIHJlcXVpcmUoX3N0YXJ0aW5nUHJpY2UgPT0gdWludDI1Nih1aW50MTI4KF9zdGFydGluZ1ByaWNlKSkpOwogICAgICAgIHJlcXVpcmUoX2VuZGluZ1ByaWNlID09IHVpbnQyNTYodWludDEyOChfZW5kaW5nUHJpY2UpKSk7CiAgICAgICAgcmVxdWlyZShfZHVyYXRpb24gPT0gdWludDI1Nih1aW50NjQoX2R1cmF0aW9uKSkpOwoKICAgICAgICAvLyBBdWN0aW9uIGNvbnRyYWN0IGNoZWNrcyBpbnB1dCBzaXplcwogICAgICAgIC8vIElmIGFzc2V0IGlzIGFscmVhZHkgb24gYW55IGF1Y3Rpb24sIHRoaXMgd2lsbCB0aHJvdwogICAgICAgIC8vIGJlY2F1c2UgaXQgd2lsbCBiZSBvd25lZCBieSB0aGUgYXVjdGlvbiBjb250cmFjdC4KICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICAgICAgLy8gRW5zdXJlIHRoZSBhc3NldCBpcyBUcmFkZWFibGUgYW5kIG5vdCBHb2xkZW5Hb29zZSB0byBwcmV2ZW50IHRoZSBhdWN0aW9uCiAgICAgICAgLy8gY29udHJhY3QgYWNjaWRlbnRhbGx5IHJlY2VpdmluZyBvd25lcnNoaXAgb2YgdGhlIGNoaWxkLgogICAgICAgIHJlcXVpcmUoZXRoZXJuYXV0c1N0b3JhZ2UuaGFzQWxsQXR0cnMoX3Rva2VuSWQsIEFUVFJfVFJBREFCTEUpKTsKICAgICAgICByZXF1aXJlKCFldGhlcm5hdXRzU3RvcmFnZS5oYXNBbGxBdHRycyhfdG9rZW5JZCwgQVRUUl9HT0xERU5HT09TRSkpOwoKICAgICAgICAvLyBFbnN1cmUgdGhlIGFzc2V0IGlzIGluIGF2YWlsYWJsZSBzdGF0ZSwgb3RoZXJ3aXNlIGl0IGNhbm5vdCBiZSBzb2xkCiAgICAgICAgcmVxdWlyZShldGhlcm5hdXRzU3RvcmFnZS5pc1N0YXRlKF90b2tlbklkLCB1aW50OChBc3NldFN0YXRlLkF2YWlsYWJsZSkpKTsKCiAgICAgICAgLy8gYXNzZXQgb3Igb2JqZWN0IGNvdWxkIG5vdCBiZSBpbiBleHBsb3JhdGlvbgogICAgICAgIHJlcXVpcmUoIWlzRXhwbG9yaW5nKF90b2tlbklkKSk7CgogICAgICAgIGV0aGVybmF1dHNTdG9yYWdlLmFwcHJvdmUoX3Rva2VuSWQsIGFkZHJlc3ModGhpcykpOwoKICAgICAgICAvLy8gRXNjcm93cyB0aGUgTkZULCBhc3NpZ25pbmcgb3duZXJzaGlwIHRvIHRoaXMgY29udHJhY3QuCiAgICAgICAgLy8vIFRocm93cyBpZiB0aGUgZXNjcm93IGZhaWxzLgogICAgICAgIF90cmFuc2ZlckZyb20obXNnLnNlbmRlciwgdGhpcywgX3Rva2VuSWQpOwoKICAgICAgICBBdWN0aW9uIG1lbW9yeSBhdWN0aW9uID0gQXVjdGlvbigKICAgICAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICAgICAgdWludDEyOChfc3RhcnRpbmdQcmljZSksCiAgICAgICAgICAgIHVpbnQxMjgoX2VuZGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDY0KF9kdXJhdGlvbiksCiAgICAgICAgICAgIHVpbnQ2NChub3cpCiAgICAgICAgKTsKCiAgICAgICAgX2FkZEF1Y3Rpb24oX3Rva2VuSWQsIGF1Y3Rpb24pOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEFueSBDLWxldmVsIGNhbiBjaGFuZ2Ugc2FsZXMgY3V0LgogICAgZnVuY3Rpb24gc2V0T3duZXJDdXQodWludDI1NiBfb3duZXJDdXQpIHB1YmxpYyBvbmx5Q0xldmVsIHsKICAgICAgICBvd25lckN1dCA9IF9vd25lckN1dDsKICAgIH0KCgogICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKiBQVVJDSEFTRSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgogICAgLy8vIEBub3RpY2UgQWxsb3dzIHNvbWVvbmUgYnV5IG9idGFpbiBhbiBHb2xkZW5Hb29zZSBhc3NldCB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgVG9rZW4gSUQgdGhhdCBjYW4gYmUgcHVyY2hhc2VkIGlmIFRva2VuIGlzIGEgR29sZGVuR29vc2UgYXNzZXQuCiAgICBmdW5jdGlvbiBwdXJjaGFzZSh1aW50MjU2IF90b2tlbklkKSBleHRlcm5hbCBwYXlhYmxlIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIC8vIENoZWNraW5nIGlmIEFzc2V0IGlzIGEgR29sZGVuR29vc2UsIGlmIG5vdCB0aGlzIHB1cmNoYXNlIGlzIG5vdCBhbGxvd2VkCiAgICAgICAgcmVxdWlyZShldGhlcm5hdXRzU3RvcmFnZS5oYXNBbnlBdHRycyhfdG9rZW5JZCwgQVRUUl9HT0xERU5HT09TRSkpOwoKICAgICAgICAvLyBhc3NldCBjb3VsZCBub3QgYmUgaW4gZXhwbG9yYXRpb24KICAgICAgICByZXF1aXJlKCFpc0V4cGxvcmluZyhfdG9rZW5JZCkpOwoKICAgICAgICBhZGRyZXNzIG9sZE93bmVyID0gZXRoZXJuYXV0c1N0b3JhZ2Uub3duZXJPZihfdG9rZW5JZCk7CiAgICAgICAgYWRkcmVzcyBuZXdPd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdWludDI1NiBzZWxsaW5nUHJpY2UgPSBldGhlcm5hdXRzU3RvcmFnZS5wcmljZU9mKF90b2tlbklkKTsKCiAgICAgICAgLy8gTWFraW5nIHN1cmUgdG9rZW4gb3duZXIgaXMgbm90IHNlbmRpbmcgdG8gc2VsZgogICAgICAgIC8vIGl0IGd1YXJhbnRlZXMgYSBmYWlyIG1hcmtldAogICAgICAgIHJlcXVpcmUob2xkT3duZXIgIT0gbmV3T3duZXIpOwoKICAgICAgICAvLyBTYWZldHkgY2hlY2sgdG8gcHJldmVudCBhZ2FpbnN0IGFuIHVuZXhwZWN0ZWQgMHgwIGRlZmF1bHQuCiAgICAgICAgcmVxdWlyZShuZXdPd25lciAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgLy8gTWFraW5nIHN1cmUgc2VudCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzZWxsaW5nUHJpY2UKICAgICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSBzZWxsaW5nUHJpY2UpOwoKICAgICAgICB1aW50MjU2IHBheW1lbnQgPSB1aW50MjU2KFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCBwZXJjZW50YWdlRmVlMVN0ZXApLCAxMDApKTsKICAgICAgICB1aW50MjU2IHB1cmNoYXNlRXhjZXNzID0gU2FmZU1hdGguc3ViKG1zZy52YWx1ZSwgc2VsbGluZ1ByaWNlKTsKICAgICAgICB1aW50MjU2IG5ld1ByaWNlID0gc2VsbGluZ1ByaWNlOwoKICAgICAgICAvLyBVcGRhdGUgcHJpY2VzCiAgICAgICAgaWYgKHNlbGxpbmdQcmljZSA8IGZpcnN0U3RlcExpbWl0KSB7CiAgICAgICAgICAgIC8vIGZpcnN0IHN0YWdlCiAgICAgICAgICAgIG5ld1ByaWNlID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIHBlcmNlbnRhZ2UxU3RlcCksIHBlcmNlbnRhZ2VCYXNlKTsKICAgICAgICB9IGVsc2UgaWYgKHNlbGxpbmdQcmljZSA8IHNlY29uZFN0ZXBMaW1pdCkgewogICAgICAgICAgICAvLyByZWRlZmluaW5nIGZlZXMKICAgICAgICAgICAgcGF5bWVudCA9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIHBlcmNlbnRhZ2VGZWUyU3RlcCksIDEwMCkpOwoKICAgICAgICAgICAgLy8gc2Vjb25kIHN0YWdlCiAgICAgICAgICAgIG5ld1ByaWNlID0gU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIHBlcmNlbnRhZ2UyU3RlcCksIHBlcmNlbnRhZ2VCYXNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyByZWRlZmluaW5nIGZlZXMKICAgICAgICAgICAgcGF5bWVudCA9IHVpbnQyNTYoU2FmZU1hdGguZGl2KFNhZmVNYXRoLm11bChzZWxsaW5nUHJpY2UsIHBlcmNlbnRhZ2VGZWVTdGVwcyksIDEwMCkpOwoKICAgICAgICAgICAgLy8gbGFzdCBzdGFnZQogICAgICAgICAgICBuZXdQcmljZSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwoc2VsbGluZ1ByaWNlLCBwZXJjZW50YWdlU3RlcHMpLCBwZXJjZW50YWdlQmFzZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBQYXkgcHJldmlvdXMgdG9rZW5Pd25lciBpZiBvd25lciBpcyBub3QgY29udHJhY3QKICAgICAgICBpZiAob2xkT3duZXIgIT0gYWRkcmVzcyh0aGlzKSkgewogICAgICAgICAgICBvbGRPd25lci50cmFuc2ZlcihwYXltZW50KTsgLy8oMS0wLjA2KQogICAgICAgIH0KCiAgICAgICAgLy8gb25seSB0cmFuc2ZlciB0b2tlbiBhZnRlciBjb25maXJtZWQgdHJhbnNhY3Rpb24KICAgICAgICBldGhlcm5hdXRzU3RvcmFnZS50cmFuc2ZlcihvbGRPd25lciwgbmV3T3duZXIsIF90b2tlbklkKTsKCiAgICAgICAgLy8gb25seSBzZXQgbmV3IHByaWNlIGFmdGVyIGNvbmZpcm1lZCB0cmFuc2FjdGlvbgogICAgICAgIGV0aGVybmF1dHNTdG9yYWdlLnNldFByaWNlKF90b2tlbklkLCBuZXdQcmljZSk7CgogICAgICAgIFB1cmNoYXNlKF90b2tlbklkLCBzZWxsaW5nUHJpY2UsIG5ld1ByaWNlLCBvbGRPd25lciwgbmV3T3duZXIpOwoKICAgICAgICAvLyBzZW5kIGV4Y2VzcyBiYWNrIHRvIGJ1eWVyCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihwdXJjaGFzZUV4Y2Vzcyk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQW55IEMtbGV2ZWwgY2FuIGNoYW5nZSBmaXJzdCBTdGVwIExpbWl0LgogICAgZnVuY3Rpb24gc2V0U3RlcExpbWl0cygKICAgICAgICB1aW50MjU2IF9maXJzdFN0ZXBMaW1pdCwKICAgICAgICB1aW50MjU2IF9zZWNvbmRTdGVwTGltaXQKICAgICkgcHVibGljIG9ubHlDTGV2ZWwgewogICAgICAgIGZpcnN0U3RlcExpbWl0ID0gX2ZpcnN0U3RlcExpbWl0OwogICAgICAgIHNlY29uZFN0ZXBMaW1pdCA9IF9zZWNvbmRTdGVwTGltaXQ7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQW55IEMtbGV2ZWwgY2FuIGNoYW5nZSBwZXJjZW50YWdlIHZhbHVlcwogICAgZnVuY3Rpb24gc2V0UGVyY2VudGFnZXMoCiAgICAgICAgdWludDggX0ZlZTEsCiAgICAgICAgdWludDggX0ZlZTIsCiAgICAgICAgdWludDggX0ZlZXMsCiAgICAgICAgdWludDggXzFTdGVwLAogICAgICAgIHVpbnQ4IF8yU3RlcCwKICAgICAgICB1aW50OCBfU3RlcHMKICAgICkgcHVibGljIG9ubHlDTGV2ZWwgewogICAgICAgIHBlcmNlbnRhZ2VGZWUxU3RlcCA9IF9GZWUxOwogICAgICAgIHBlcmNlbnRhZ2VGZWUyU3RlcCA9IF9GZWUyOwogICAgICAgIHBlcmNlbnRhZ2VGZWVTdGVwcyA9IF9GZWVzOwogICAgICAgIHBlcmNlbnRhZ2UxU3RlcCA9IF8xU3RlcDsKICAgICAgICBwZXJjZW50YWdlMlN0ZXAgPSBfMlN0ZXA7CiAgICAgICAgcGVyY2VudGFnZVN0ZXBzID0gX1N0ZXBzOwogICAgfQoKfQ=='.
	

]
