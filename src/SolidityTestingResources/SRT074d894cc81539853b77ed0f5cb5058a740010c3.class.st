Class {
	#name : #SRT074d894cc81539853b77ed0f5cb5058a740010c3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT074d894cc81539853b77ed0f5cb5058a740010c3 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTE7CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICAgIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICAgICAgdWludDI1NiBjID0gYSAvIGI7CiAgICAgICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQKICAgICAgICByZXR1cm4gYzsKICAgIH0KCiAgICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBhc3NlcnQoYiA8PSBhKTsKICAgICAgICByZXR1cm4gYSAtIGI7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IE93bmFibGUgewogIGFkZHJlc3MgcHVibGljIG93bmVyOwoKCiAgLyoqIAogICAqIEBkZXYgVGhlIE93bmFibGUgY29uc3RydWN0b3Igc2V0cyB0aGUgb3JpZ2luYWwgYG93bmVyYCBvZiB0aGUgY29udHJhY3QgdG8gdGhlIHNlbmRlcgogICAqIGFjY291bnQuCiAgICovCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgoKICAvKioKICAgKiBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuIAogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7CiAgICAgIHRocm93OwogICAgfQogICAgXzsKIH0KIAp9CiAgCmNvbnRyYWN0IEVSQzIwIHsKCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsKCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOwoKfQoKY29udHJhY3QgQ1RDVG9rZW4gaXMgT3duYWJsZSwgRVJDMjAgewoKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIC8vIFRva2VuIHByb3BlcnRpZXMKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJDaGFpblRyYWRlIENvaW4iOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQ1RDIjsKICAgIHVpbnQyNTYgcHVibGljIGRlY2ltYWxzID0gMTg7CgogICAgdWludDI1NiBwdWJsaWMgaW5pdGlhbFByaWNlID0gMTAwMDsKICAgIHVpbnQyNTYgcHVibGljIF90b3RhbFN1cHBseSA9IDIyNTAwMDAwMGUxODsKICAgIHVpbnQyNTYgcHVibGljIF9pY29TdXBwbHkgPSAyMDAwMDAwMDBlMTg7CgogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIAogICAgCiAgICAvL0JhbGFuY2VzIGZvciB3YWl0aW5nIEtZQyBhcHByb3ZpbmcKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXNXYWl0aW5nS1lDOwoKICAgIC8vIE93bmVyIG9mIGFjY291bnQgYXBwcm92ZXMgdGhlIHRyYW5zZmVyIG9mIGFuIGFtb3VudCB0byBhbm90aGVyIGFjY291bnQKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOwogICAgCiAgICAvLyBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMgd2hlcmUgaW52ZXN0bWVudHMgYXJlIGFsbG93ZWQgKGJvdGggaW5jbHVzaXZlKQogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lID0gMTUwNzMzNDQwMDsgCiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lID0gMTUxNDc2NDc5OTsgCgogICAgLy8gT3duZXIgb2YgVG9rZW4KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIFdhbGxldCBBZGRyZXNzIG9mIFRva2VuCiAgICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZzsKCiAgICAvLyBob3cgbWFueSB0b2tlbiB1bml0cyBhIGJ1eWVyIGdldHMgcGVyIHdlaQogICAgdWludDI1NiBwdWJsaWMgUkFURTsKCiAgICB1aW50MjU2IHB1YmxpYyBtaW5Db250cmliQW1vdW50ID0gMC4wMSBldGhlcjsKICAgIHVpbnQyNTYgcHVibGljIGt5Y0xldmVsID0gMTUgZXRoZXI7CiAgICB1aW50MjU2IG1pbkNhcEJvbnVzID0gMjAwIGV0aGVyOwoKICAgIHVpbnQyNTYgcHVibGljIGhhcmRDYXAgPSAyMDAwMDAwMDBlMTg7CiAgICAKICAgIC8vbnVtYmVyIG9mIHRvdGFsIHRva2VucyBzb2xkIAogICAgdWludDI1NiBwdWJsaWMgdG90YWxOdW1iZXJUb2tlblNvbGQ9MDsKCiAgICBib29sIHB1YmxpYyBtaW50aW5nRmluaXNoZWQgPSBmYWxzZTsKCiAgICBib29sIHB1YmxpYyB0cmFkYWJsZSA9IHRydWU7CgogICAgYm9vbCBwdWJsaWMgYWN0aXZlID0gdHJ1ZTsKCiAgICBldmVudCBNaW50RmluaXNoZWQoKTsKICAgIGV2ZW50IFN0YXJ0VHJhZGFibGUoKTsKICAgIGV2ZW50IFBhdXNlVHJhZGFibGUoKTsKICAgIGV2ZW50IEhhbHRUb2tlbkFsbE9wZXJhdGlvbigpOwogICAgZXZlbnQgUmVzdW1lVG9rZW5BbGxPcGVyYXRpb24oKTsKICAgIGV2ZW50IFRva2VuUHVyY2hhc2UoYWRkcmVzcyBpbmRleGVkIHB1cmNoYXNlciwgYWRkcmVzcyBpbmRleGVkIGJlbmVmaWNpYXJ5LCB1aW50MjU2IHZhbHVlLCB1aW50MjU2IGFtb3VudCk7CgoKICAgIG1vZGlmaWVyIGNhbk1pbnQoKSB7CiAgICAgICAgcmVxdWlyZSghbWludGluZ0ZpbmlzaGVkKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGNhblRyYWRhYmxlKCkgewogICAgICAgIHJlcXVpcmUodHJhZGFibGUpOwogICAgICAgIF87CiAgICB9CgogICAgbW9kaWZpZXIgaXNBY3RpdmUoKSB7CiAgICAgICAgcmVxdWlyZShhY3RpdmUpOwogICAgICAgIF87CiAgICB9CiAgICAKICAgIG1vZGlmaWVyIHNhbGVJc09wZW4oKXsKICAgICAgICByZXF1aXJlKHN0YXJ0VGltZSA8PSBnZXROb3coKSAmJiBnZXROb3coKSA8PWVuZFRpbWUpOwogICAgICAgIF87CiAgICB9CgogICAgLy8gQ29uc3RydWN0b3IKICAgIC8vIEBub3RpY2UgQ1RDVG9rZW4gQ29udHJhY3QKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MKICAgIGZ1bmN0aW9uIENUQ1Rva2VuKGFkZHJlc3MgX211bHRpc2lnKSB7CiAgICAgICAgcmVxdWlyZShfbXVsdGlzaWcgIT0gMHgwKTsKICAgICAgICBtdWx0aXNpZyA9IF9tdWx0aXNpZzsKICAgICAgICBSQVRFID0gaW5pdGlhbFByaWNlOwoKICAgICAgICBiYWxhbmNlc1ttdWx0aXNpZ10gPSBfdG90YWxTdXBwbHk7CgogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgIH0KCiAgICAvLyBQYXlhYmxlIG1ldGhvZAogICAgLy8gQG5vdGljZSBBbnlvbmUgY2FuIGJ1eSB0aGUgdG9rZW5zIG9uIHRva2Vuc2FsZSBieSBwYXlpbmcgZXRoZXIKICAgIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIAogICAgICAgIGlmICghdmFsaWRQdXJjaGFzZSgpKXsKCQkJcmVmdW5kRnVuZHMobXNnLnNlbmRlcik7CgkJfQoJCQoJCXRva2Vuc2FsZShtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLyBAbm90aWNlIHRva2Vuc2FsZQogICAgLy8gQHBhcmFtIHJlY2lwaWVudCBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50CiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBUcmFuc2ZlcgogICAgICAgIGZ1bmN0aW9uIHRva2Vuc2FsZShhZGRyZXNzIHJlY2lwaWVudCkgY2FuTWludCBpc0FjdGl2ZSBzYWxlSXNPcGVuIHBheWFibGUgewogICAgICAgIHJlcXVpcmUocmVjaXBpZW50ICE9IDB4MCk7CgkJCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgdWludDI1NiBuYlRva2VucyA9IHdlaUFtb3VudC5tdWwoUkFURSkuZGl2KDEgZXRoZXIpOwogICAgICAgIAogICAgICAgIAogICAgICAgIHJlcXVpcmUoX2ljb1N1cHBseSA+PSBuYlRva2Vucyk7CiAgICAgICAgCiAgICAgICAgYm9vbCBwZXJjZW50YWdlQm9udXNBcHBsaWNhYmxlID0gd2VpQW1vdW50ID49IG1pbkNhcEJvbnVzOwogICAgICAgIGlmIChwZXJjZW50YWdlQm9udXNBcHBsaWNhYmxlKSB7CiAgICAgICAgICAgIG5iVG9rZW5zID0gbmJUb2tlbnMubXVsKDExKS5kaXYoMTApOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB0b3RhbE51bWJlclRva2VuU29sZD10b3RhbE51bWJlclRva2VuU29sZC5hZGQobmJUb2tlbnMpOwoKICAgICAgICBfaWNvU3VwcGx5ID0gX2ljb1N1cHBseS5zdWIobmJUb2tlbnMpOwoKICAgICAgICBUb2tlblB1cmNoYXNlKG1zZy5zZW5kZXIsIHJlY2lwaWVudCwgd2VpQW1vdW50LCBuYlRva2Vucyk7CgogICAgICAgICBpZih3ZWlBbW91bnQ8IGt5Y0xldmVsKSB7CiAgICAgICAgICAgIHVwZGF0ZUJhbGFuY2VzKHJlY2lwaWVudCwgbmJUb2tlbnMpOwogICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBiYWxhbmNlc1dhaXRpbmdLWUNbcmVjaXBpZW50XSA9IGJhbGFuY2VzV2FpdGluZ0tZQ1tyZWNpcGllbnRdLmFkZChuYlRva2Vucyk7IAogICAgICAgICB9CiAgICAgICAgIGZvcndhcmRGdW5kcygpOyAgCiAgICAgICAgCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHVwZGF0ZUJhbGFuY2VzKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQyNTYgdG9rZW5zKSBpbnRlcm5hbCB7CiAgICAgICAgYmFsYW5jZXNbbXVsdGlzaWddID0gYmFsYW5jZXNbbXVsdGlzaWddLnN1Yih0b2tlbnMpOwogICAgICAgIGJhbGFuY2VzW3JlY2VpdmVyXSA9IGJhbGFuY2VzW3JlY2VpdmVyXS5hZGQodG9rZW5zKTsKICAgIH0KICAgIAogICAgLy9yZWZ1bmQgYmFjayBpZiBub3QgS1lDIGFwcHJvdmVkCiAgICAgZnVuY3Rpb24gcmVmdW5kRnVuZHMoYWRkcmVzcyBvcmlnaW4pIGludGVybmFsIHsKICAgICAgICBvcmlnaW4udHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLyBzZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgICAvLyBvdmVycmlkZSB0byBjcmVhdGUgY3VzdG9tIGZ1bmQgZm9yd2FyZGluZyBtZWNoYW5pc21zCiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgbXVsdGlzaWcudHJhbnNmZXIobXNnLnZhbHVlKTsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGNhbiBidXkgdG9rZW5zCiAgICBmdW5jdGlvbiB2YWxpZFB1cmNoYXNlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgd2l0aGluUGVyaW9kID0gZ2V0Tm93KCkgPj0gc3RhcnRUaW1lICYmIGdldE5vdygpIDw9IGVuZFRpbWU7CiAgICAgICAgYm9vbCBub25aZXJvUHVyY2hhc2UgPSBtc2cudmFsdWUgIT0gMDsKICAgICAgICBib29sIG1pbkNvbnRyaWJ1dGlvbiA9IG1pbkNvbnRyaWJBbW91bnQgPD0gbXNnLnZhbHVlOwogICAgICAgIGJvb2wgbm90UmVhY2hlZEhhcmRDYXAgPSBoYXJkQ2FwID49IHRvdGFsTnVtYmVyVG9rZW5Tb2xkOwogICAgICAgIHJldHVybiB3aXRoaW5QZXJpb2QgJiYgbm9uWmVyb1B1cmNoYXNlICYmIG1pbkNvbnRyaWJ1dGlvbiAmJiBub3RSZWFjaGVkSGFyZENhcDsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGN1cnJlbnQgbG90IGV2ZW50IGhhcyBlbmRlZAogICAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBnZXROb3coKSA+IGVuZFRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0Tm93KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gbm93OwogICAgfQoKICAgIC8vIFNldC9jaGFuZ2UgTXVsdGktc2lnbmF0dXJlIHdhbGxldCBhZGRyZXNzCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aVNpZ25hdHVyZVdhbGxldCAoYWRkcmVzcyBfbXVsdGlzaWcpIG9ubHlPd25lciBpc0FjdGl2ZSB7CiAgICAgICAgbXVsdGlzaWcgPSBfbXVsdGlzaWc7CiAgICB9CgogICAgLy8gQ2hhbmdlIEVUSC9Ub2tlbiBleGNoYW5nZSByYXRlCiAgICBmdW5jdGlvbiBjaGFuZ2VUb2tlblJhdGUodWludCBfdG9rZW5QcmljZSkgb25seU93bmVyIGlzQWN0aXZlIHsKICAgICAgICBSQVRFID0gX3Rva2VuUHJpY2U7CiAgICB9CgogICAgLy8gQ2hhbmdlIFRva2VuIGNvbnRyYWN0IG93bmVyCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIGlzQWN0aXZlIHsKICAgICAgICBvd25lciA9IF9uZXdPd25lcjsKICAgIH0KCiAgICAvLyBTZXQgRmluaXNoIE1pbnRpbmcuCiAgICBmdW5jdGlvbiBmaW5pc2hNaW50aW5nKCkgb25seU93bmVyIGlzQWN0aXZlIHsKICAgICAgICBtaW50aW5nRmluaXNoZWQgPSB0cnVlOwogICAgICAgIE1pbnRGaW5pc2hlZCgpOwogICAgfQoKICAgIC8vIFN0YXJ0IG9yIHBhdXNlIHRyYWRhYmxlIHRvIFRyYW5zZmVyIHRva2VuCiAgICBmdW5jdGlvbiBzdGFydFRyYWRhYmxlKGJvb2wgX3RyYWRhYmxlKSBvbmx5T3duZXIgaXNBY3RpdmUgewogICAgICAgIHRyYWRhYmxlID0gX3RyYWRhYmxlOwogICAgICAgIGlmICh0cmFkYWJsZSkKICAgICAgICAgICAgU3RhcnRUcmFkYWJsZSgpOwogICAgICAgIGVsc2UKICAgICAgICAgICAgUGF1c2VUcmFkYWJsZSgpOwogICAgfQoKICAgIC8vVXBkYXRlSUNPRGF0ZVRpbWUodWludDI1NiBfc3RhcnRUaW1lLCkKICAgIGZ1bmN0aW9uIHVwZGF0ZUlDT0RhdGUodWludDI1NiBfc3RhcnRUaW1lLCB1aW50MjU2IF9lbmRUaW1lKSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIH0KICAgIAogICAgLy9DaGFuZ2Ugc3RhcnRUaW1lIHRvIHN0YXJ0IElDTyBtYW51YWxseQogICAgZnVuY3Rpb24gY2hhbmdlU3RhcnRUaW1lKHVpbnQyNTYgX3N0YXJ0VGltZSkgb25seU93bmVyIHsKICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnRUaW1lOwogICAgfQoKICAgIC8vQ2hhbmdlIGVuZFRpbWUgdG8gZW5kIElDTyBtYW51YWxseQogICAgZnVuY3Rpb24gY2hhbmdlRW5kVGltZSh1aW50MjU2IF9lbmRUaW1lKSBvbmx5T3duZXIgewogICAgICAgIGVuZFRpbWUgPSBfZW5kVGltZTsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRvdGFsIHRva2VucyBzdXBwbGllZAogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b3RhbFN1cHBseTsKICAgIH0KICAgIAogICAgLy8gQHJldHVybiB0b3RhbCB0b2tlbnMgc3VwcGxpZWQKICAgIGZ1bmN0aW9uIHRvdGFsTnVtYmVyVG9rZW5Tb2xkKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiB0b3RhbE51bWJlclRva2VuU29sZDsKICAgIH0KCgogICAgLy9DaGFuZ2UgdG90YWwgc3VwcGx5CiAgICBmdW5jdGlvbiBjaGFuZ2VUb3RhbFN1cHBseSh1aW50MjU2IHRvdGFsU3VwcGx5KSBvbmx5T3duZXIgewogICAgICAgIF90b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5OwogICAgfQoKCiAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PwogICAgLy8gQHBhcmFtIHdobyBUaGUgYWRkcmVzcyBvZiB0aGUgcGFydGljdWxhciBhY2NvdW50CiAgICAvLyBAcmV0dXJuIHRoZSBiYWxhbmFjZSB0aGUgcGFydGljdWxhciBhY2NvdW50CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNbd2hvXTsKICAgIH0KCiAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PwogICAgLy8gQHBhcmFtIHdobyBUaGUgYWRkcmVzcyBvZiB0aGUgcGFydGljdWxhciBhY2NvdW50CiAgICAvLyBAcmV0dXJuIHRoZSBiYWxhbmNlIG9mIEtZQyB3YWl0aW5nIHRvIGJlIGFwcHJvdmVkCiAgICBmdW5jdGlvbiBiYWxhbmNlT2ZLeUNUb0JlQXBwcm92ZWQoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYmFsYW5jZXNXYWl0aW5nS1lDW3dob107CiAgICB9CiAgICAKCiAgICBmdW5jdGlvbiBhcHByb3ZlQmFsYW5jZXNXYWl0aW5nS1lDKGFkZHJlc3NbXSBsaXN0QWRkcmVzc2VzKSBvbmx5T3duZXIgewogICAgICAgICBmb3IgKHVpbnQyNTYgaSA9IDA7IGkgPCBsaXN0QWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICBhZGRyZXNzIGNsaWVudCA9IGxpc3RBZGRyZXNzZXNbaV07CiAgICAgICAgICAgICBiYWxhbmNlc1ttdWx0aXNpZ10gPSBiYWxhbmNlc1ttdWx0aXNpZ10uc3ViKGJhbGFuY2VzV2FpdGluZ0tZQ1tjbGllbnRdKTsKICAgICAgICAgICAgIGJhbGFuY2VzW2NsaWVudF0gPSBiYWxhbmNlc1tjbGllbnRdLmFkZChiYWxhbmNlc1dhaXRpbmdLWUNbY2xpZW50XSk7CiAgICAgICAgICAgICB0b3RhbE51bWJlclRva2VuU29sZD10b3RhbE51bWJlclRva2VuU29sZC5hZGQoYmFsYW5jZXNXYWl0aW5nS1lDW2NsaWVudF0pOwogICAgICAgICAgICAgX2ljb1N1cHBseSA9IF9pY29TdXBwbHkuc3ViKGJhbGFuY2VzV2FpdGluZ0tZQ1tjbGllbnRdKTsKICAgICAgICAgICAgIGJhbGFuY2VzV2FpdGluZ0tZQ1tjbGllbnRdID0gMDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQm9udXNGb3JPbmVIb2xkZXIoYWRkcmVzcyBob2xkZXIsIHVpbnQyNTYgYm9udXNUb2tlbikgb25seU93bmVyewogICAgICAgICByZXF1aXJlKGhvbGRlciAhPSAweDApOyAKICAgICAgICAgYmFsYW5jZXNbbXVsdGlzaWddID0gYmFsYW5jZXNbbXVsdGlzaWddLnN1Yihib251c1Rva2VuKTsKICAgICAgICAgYmFsYW5jZXNbaG9sZGVyXSA9IGJhbGFuY2VzW2hvbGRlcl0uYWRkKGJvbnVzVG9rZW4pOwoJCSB0b3RhbE51bWJlclRva2VuU29sZD10b3RhbE51bWJlclRva2VuU29sZC5hZGQoYm9udXNUb2tlbik7CgkJIF9pY29TdXBwbHkgPSBfaWNvU3VwcGx5LnN1Yihib251c1Rva2VuKTsKICAgIH0KCiAgICAKICAgIGZ1bmN0aW9uIGFkZEJvbnVzRm9yTXVsdGlwbGVIb2xkZXJzKGFkZHJlc3NbXSBsaXN0QWRkcmVzc2VzLCB1aW50MjU2W10gYm9udXMpIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShsaXN0QWRkcmVzc2VzLmxlbmd0aCA9PSBib251cy5sZW5ndGgpOyAKICAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbGlzdEFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcmVxdWlyZShsaXN0QWRkcmVzc2VzW2ldICE9IDB4MCk7IAogICAgICAgICAgICAgICAgYmFsYW5jZXNbbGlzdEFkZHJlc3Nlc1tpXV0gPSBiYWxhbmNlc1tsaXN0QWRkcmVzc2VzW2ldXS5hZGQoYm9udXNbaV0pOwogICAgICAgICAgICAgICAgYmFsYW5jZXNbbXVsdGlzaWddID0gYmFsYW5jZXNbbXVsdGlzaWddLnN1Yihib251c1tpXSk7CgkJCQl0b3RhbE51bWJlclRva2VuU29sZD10b3RhbE51bWJlclRva2VuU29sZC5hZGQoYm9udXNbaV0pOwoJCQkJX2ljb1N1cHBseSA9IF9pY29TdXBwbHkuc3ViKGJvbnVzW2ldKTsKICAgICAgICAgfQogICAgfQogICAgCiAgIAogICAgCiAgICBmdW5jdGlvbiBtb2RpZnlDdXJyZW50SGFyZENhcCh1aW50MjU2IF9oYXJkQ2FwKSBvbmx5T3duZXIgaXNBY3RpdmUgewogICAgICAgIGhhcmRDYXAgPSBfaGFyZENhcDsKICAgIH0KCiAgICAvLyBAbm90aWNlIHNlbmQgYHZhbHVlYCB0b2tlbiB0byBgdG9gIGZyb20gYG1zZy5zZW5kZXJgCiAgICAvLyBAcGFyYW0gdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8gQHBhcmFtIHZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vIEByZXR1cm4gdGhlIHRyYW5zYWN0aW9uIGFkZHJlc3MgYW5kIHNlbmQgdGhlIGV2ZW50IGFzIFRyYW5zZmVyCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSBjYW5UcmFkYWJsZSBpc0FjdGl2ZSB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSk7CiAgICB9CgogICAgLy8gQG5vdGljZSBzZW5kIGB2YWx1ZWAgdG9rZW4gdG8gYHRvYCBmcm9tIGBmcm9tYAogICAgLy8gQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgogICAgLy8gQHBhcmFtIHRvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vIEBwYXJhbSB2YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkCiAgICAvLyBAcmV0dXJuIHRoZSB0cmFuc2FjdGlvbiBhZGRyZXNzIGFuZCBzZW5kIHRoZSBldmVudCBhcyBUcmFuc2ZlcgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgY2FuVHJhZGFibGUgaXNBY3RpdmUgewogICAgICAgIHJlcXVpcmUgKAogICAgICAgICAgICBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdID49IHZhbHVlICYmIGJhbGFuY2VzW2Zyb21dID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYmFsYW5jZXNbZnJvbV0gPSBiYWxhbmNlc1tmcm9tXS5zdWIodmFsdWUpOwogICAgICAgIGJhbGFuY2VzW3RvXSA9IGJhbGFuY2VzW3RvXS5hZGQodmFsdWUpOwogICAgICAgIGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW2Zyb21dW21zZy5zZW5kZXJdLnN1Yih2YWx1ZSk7CiAgICAgICAgVHJhbnNmZXIoZnJvbSwgdG8sIHZhbHVlKTsKICAgIH0KCiAgICAvLyBBbGxvdyBzcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIHZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggdmFsdWUuCiAgICAvLyBAcGFyYW0gc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyCiAgICAvLyBAcGFyYW0gdmFsdWUgVGhlIGFtb3VudCB0byBiZSBhcHByb3ZlZAogICAgLy8gQHJldHVybiB0aGUgdHJhbnNhY3Rpb24gYWRkcmVzcyBhbmQgc2VuZCB0aGUgZXZlbnQgYXMgQXBwcm92YWwKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSBpc0FjdGl2ZSB7CiAgICAgICAgcmVxdWlyZSAoCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID49IHZhbHVlICYmIHZhbHVlID4gMAogICAgICAgICk7CiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIHNwZW5kZXIsIHZhbHVlKTsKICAgIH0KCiAgICAvLyBDaGVjayB0aGUgYWxsb3dlZCB2YWx1ZSBmb3IgdGhlIHNwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgLy8gQHBhcmFtIG93bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBvd25lcgogICAgLy8gQHBhcmFtIHNwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIHNwZW5kZXIKICAgIC8vIEByZXR1cm4gdGhlIGFtb3VudCB3aGljaCBzcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBvd25lcgogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW3NwZW5kZXJdOwogICAgfQoKICAgIC8vIEdldCBjdXJyZW50IHByaWNlIG9mIGEgVG9rZW4KICAgIC8vIEByZXR1cm4gdGhlIHByaWNlIG9yIHRva2VuIHZhbHVlIGZvciBhIGV0aGVyCiAgICBmdW5jdGlvbiBnZXRSYXRlKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZXN1bHQpIHsKICAgICAgcmV0dXJuIFJBVEU7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdldFRva2VuRGV0YWlsKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZywgc3RyaW5nLCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIChuYW1lLCBzeW1ib2wsIHN0YXJ0VGltZSwgZW5kVGltZSwgX3RvdGFsU3VwcGx5LCBfaWNvU3VwcGx5LCB0b3RhbE51bWJlclRva2VuU29sZCk7CiAgICB9Cn0='.
	

]
