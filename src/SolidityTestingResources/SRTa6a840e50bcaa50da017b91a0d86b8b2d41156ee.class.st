Class {
	#name : #SRTa6a840e50bcaa50da017b91a0d86b8b2d41156ee,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa6a840e50bcaa50da017b91a0d86b8b2d41156ee >> base64 [
	^ ''.
	

]
