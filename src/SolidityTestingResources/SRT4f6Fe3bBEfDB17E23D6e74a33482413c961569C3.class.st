Class {
	#name : #SRT4f6Fe3bBEfDB17E23D6e74a33482413c961569C3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4f6Fe3bBEfDB17E23D6e74a33482413c961569C3 >> base64 [
	^ ''.
	

]
