Class {
	#name : #SRTaad9c02e937cfc36af78754ce5ca8fa4809f2232,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTaad9c02e937cfc36af78754ce5ca8fa4809f2232 >> base64 [
	^ ''.
	

]
