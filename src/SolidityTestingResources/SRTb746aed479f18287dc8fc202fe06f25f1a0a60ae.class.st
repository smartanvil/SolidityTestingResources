Class {
	#name : #SRTb746aed479f18287dc8fc202fe06f25f1a0a60ae,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb746aed479f18287dc8fc202fe06f25f1a0a60ae >> base64 [
	^ ''.
	

]
