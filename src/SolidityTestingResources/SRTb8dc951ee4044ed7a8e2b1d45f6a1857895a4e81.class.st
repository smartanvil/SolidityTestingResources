Class {
	#name : #SRTb8dc951ee4044ed7a8e2b1d45f6a1857895a4e81,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8dc951ee4044ed7a8e2b1d45f6a1857895a4e81 >> base64 [
	^ 'LyoqCiAqICBDcm93ZHNhbGUgZm9yIEZhc3QgSW52ZXN0IFRva2Vucy4KICogIFJhaXNlZCBFdGhlciB3aWxsIGJlIHN0b3JlZCBzYWZlbHkgYXQgdGhlIHdhbGxldC4KICoKICogIEJhc2VkIG9uIE9wZW5aZXBwZWxpbiBmcmFtZXdvcmsuCiAqICBodHRwczovL29wZW56ZXBwZWxpbi5vcmcKICoKICogIEF1dGhvcjogUGF1bGl1cyBUdW1vc2EKICoqLwoKcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovKioKICogU2FmZSBNYXRoIGxpYnJhcnkgZnJvbSBPcGVuWmVwcGVsaW4gZnJhbWV3b3JrCiAqIGh0dHBzOi8vb3BlbnplcHBlbGluLm9yZwogKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmxpYnJhcnkgU2FmZU1hdGggewogICAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICBpZiAoYSA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYyAvIGEgPT0gYik7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDAKICAgICAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgICAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZAogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiBjID0gYSArIGI7CiAgICAgICAgYXNzZXJ0KGMgPj0gYSk7CiAgICAgICAgcmV0dXJuIGM7CiAgICB9Cn0KCmNvbnRyYWN0IHRva2VuIHsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sKTsKfQoKLyoqCiAqIEB0aXRsZSBGYXN0SW52ZXN0VG9rZW5Dcm93ZHNhbGUKICoKICogQ3Jvd2RzYWxlIGhhdmUgYSBzdGFydCBhbmQgZW5kIHRpbWVzdGFtcHMsIHdoZXJlIGludmVzdG9ycyBjYW4gbWFrZQogKiB0b2tlbiBwdXJjaGFzZXMgYW5kIHRoZSBjcm93ZHNhbGUgd2lsbCBhc3NpZ24gdGhlbSB0b2tlbnMgYmFzZWQKICogb24gYSB0b2tlbiBwZXIgRVRIIHJhdGUuIEZ1bmRzIGNvbGxlY3RlZCBhcmUgZm9yd2FyZGVkIHRvIGEgd2FsbGV0CiAqIGFzIHRoZXkgYXJyaXZlLgogKi8KY29udHJhY3QgRmFzdEludmVzdFRva2VuQ3Jvd2RzYWxlIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIFRoZSB0b2tlbiBiZWluZyBzb2xkCiAgICB0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7CgogICAgLy8gVG9rZW5zIHdpbGwgYmUgdHJhbnNmZXJlZCBmcm9tIHRoaXMgYWRkcmVzcwogICAgYWRkcmVzcyBpbnRlcm5hbCB0b2tlbk93bmVyOwoKICAgIC8vIEFkZHJlc3Mgd2hlcmUgZnVuZHMgYXJlIGNvbGxlY3RlZAogICAgYWRkcmVzcyBpbnRlcm5hbCB3YWxsZXQ7CgogICAgLy8gU3RhcnQgYW5kIGVuZCB0aW1lc3RhbXBzIHdoZXJlIGludmVzdG1lbnRzIGFyZSBhbGxvd2VkCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAgIC8vIEFtb3VudCBvZiB0b2tlbnMgc29sZAogICAgdWludDI1NiBwdWJsaWMgdG9rZW5zU29sZCA9IDA7CgogICAgLy8gQW1vdW50IG9mIHJhaXNlZCBtb25leSBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHdlaVJhaXNlZCA9IDA7CgogICAgLy8gRnVuZGluZyBnb2FsIGFuZCBzb2Z0IGNhcAogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgU09GVF9DQVAgICAgICAgID0gMzg4NTAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBGVU5ESU5HX0dPQUwgICAgPSAzODg1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7CgogICAgLy8gVG9rZW5zIHBlciBFVEggcmF0ZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgc29mdCBjYXAgaXMgcmVhY2hlZAogICAgdWludDI1NiBjb25zdGFudCBwdWJsaWMgUkFURSA9IDEwMDA7CiAgICB1aW50MjU2IGNvbnN0YW50IHB1YmxpYyBSQVRFX1NPRlQgPSAxMjAwOwoKICAgIC8vIFRoZSBiYWxhbmNlcyBpbiBFVEggb2YgYWxsIGludmVzdG9ycwogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOwoKICAgIC8qKgogICAgICogRXZlbnQgZm9yIHRva2VuIHB1cmNoYXNlIGxvZ2dpbmcKICAgICAqCiAgICAgKiBAcGFyYW0gcHVyY2hhc2VyIHdobyBwYWlkIGZvciB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gYmVuZWZpY2lhcnkgd2hvIGdvdCB0aGUgdG9rZW5zCiAgICAgKiBAcGFyYW0gdmFsdWUgd2VpcyBwYWlkIGZvciBwdXJjaGFzZQogICAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgb2YgdG9rZW5zIHB1cmNoYXNlZAogICAgICovCiAgICBldmVudCBUb2tlblB1cmNoYXNlKGFkZHJlc3MgaW5kZXhlZCBwdXJjaGFzZXIsIGFkZHJlc3MgaW5kZXhlZCBiZW5lZmljaWFyeSwgdWludDI1NiB2YWx1ZSwgdWludDI1NiBhbW91bnQpOwoKICAgIC8qKgogICAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAgICovCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsKICAgICAgICBfOwogICAgfQoKICAgIGZ1bmN0aW9uIEZhc3RJbnZlc3RUb2tlbkNyb3dkc2FsZShhZGRyZXNzIF90b2tlbkFkZHJlc3MsIGFkZHJlc3MgX3dhbGxldCwgdWludDI1NiBfc3RhcnQsIHVpbnQyNTYgX2VuZCkgcHVibGljIHsKICAgICAgICByZXF1aXJlKF90b2tlbkFkZHJlc3MgIT0gYWRkcmVzcygwKSk7CiAgICAgICAgcmVxdWlyZShfd2FsbGV0ICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgdG9rZW5Pd25lciA9IG1zZy5zZW5kZXI7CiAgICAgICAgd2FsbGV0ID0gX3dhbGxldDsKCiAgICAgICAgdG9rZW5SZXdhcmQgPSB0b2tlbihfdG9rZW5BZGRyZXNzKTsKCiAgICAgICAgcmVxdWlyZShfc3RhcnQgPCBfZW5kKTsKICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnQ7CiAgICAgICAgZW5kVGltZSA9IF9lbmQ7CgogICAgfQoKICAgIC8vIEZhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1eSB0b2tlbnMKICAgIGZ1bmN0aW9uICgpIGV4dGVybmFsIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KCiAgICAvLyBMb3cgbGV2ZWwgdG9rZW4gcHVyY2hhc2UgZnVuY3Rpb24KICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5KSBwdWJsaWMgcGF5YWJsZSB7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeSAhPSAweDApOwogICAgICAgIHJlcXVpcmUodmFsaWRQdXJjaGFzZSgpKTsKCiAgICAgICAgdWludDI1NiB3ZWlBbW91bnQgPSBtc2cudmFsdWU7CiAgICAgICAgdWludDI1NiB0b2tlbnMgPSAwOwoKICAgICAgICAvLyBDYWxjdWxhdGUgdG9rZW4gYW1vdW50CiAgICAgICAgaWYgKHRva2Vuc1NvbGQgPCBTT0ZUX0NBUCkgewogICAgICAgICAgICB0b2tlbnMgPSB3ZWlBbW91bnQubXVsKFJBVEVfU09GVCk7CgogICAgICAgICAgICBpZiAodG9rZW5zU29sZC5hZGQodG9rZW5zKSA+IFNPRlRfQ0FQKSB7CiAgICAgICAgICAgICAgICB1aW50MjU2IHNvZnRUb2tlbnMgPSBTT0ZUX0NBUC5zdWIodG9rZW5zU29sZCk7CiAgICAgICAgICAgICAgICB1aW50MjU2IGFtb3VudExlZnQgPSB3ZWlBbW91bnQuc3ViKHNvZnRUb2tlbnMuZGl2KFJBVEVfU09GVCkpOwoKICAgICAgICAgICAgICAgIHRva2VucyA9IHNvZnRUb2tlbnMuYWRkKGFtb3VudExlZnQubXVsKFJBVEUpKTsKICAgICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgIHsKICAgICAgICAgICAgdG9rZW5zID0gd2VpQW1vdW50Lm11bChSQVRFKTsKICAgICAgICB9CgogICAgICAgIHJlcXVpcmUodG9rZW5zID4gMCk7CiAgICAgICAgcmVxdWlyZSh0b2tlbnNTb2xkLmFkZCh0b2tlbnMpIDw9IEZVTkRJTkdfR09BTCk7CgogICAgICAgIGZvcndhcmRGdW5kcygpOwogICAgICAgIGFzc2VydCh0b2tlblJld2FyZC50cmFuc2ZlckZyb20odG9rZW5Pd25lciwgYmVuZWZpY2lhcnksIHRva2VucykpOwoKICAgICAgICBiYWxhbmNlT2ZbYmVuZWZpY2lhcnldID0gYmFsYW5jZU9mW2JlbmVmaWNpYXJ5XS5hZGQod2VpQW1vdW50KTsKCiAgICAgICAgLy8gVXBkYXRlIHRvdGFscwogICAgICAgIHdlaVJhaXNlZCAgPSB3ZWlSYWlzZWQuYWRkKHdlaUFtb3VudCk7CiAgICAgICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQuYWRkKHRva2Vucyk7CgogICAgICAgIFRva2VuUHVyY2hhc2UobXNnLnNlbmRlciwgYmVuZWZpY2lhcnksIHdlaUFtb3VudCwgdG9rZW5zKTsKICAgIH0KCiAgICAvLyBTZW5kIGV0aGVyIHRvIHRoZSBmdW5kIGNvbGxlY3Rpb24gd2FsbGV0CiAgICBmdW5jdGlvbiBmb3J3YXJkRnVuZHMoKSBpbnRlcm5hbCB7CiAgICAgICAgd2FsbGV0LnRyYW5zZmVyKG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8gQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBjYW4gYnV5IHRva2VucwogICAgZnVuY3Rpb24gdmFsaWRQdXJjaGFzZSgpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIGJvb2wgd2l0aGluUGVyaW9kID0gbm93ID49IHN0YXJ0VGltZSAmJiBub3cgPD0gZW5kVGltZTsKICAgICAgICBib29sIG5vblplcm9QdXJjaGFzZSA9IG1zZy52YWx1ZSAhPSAwOwogICAgICAgIGJvb2wgaGFzVG9rZW5zID0gdG9rZW5zU29sZCA8IEZVTkRJTkdfR09BTDsKCiAgICAgICAgcmV0dXJuIHdpdGhpblBlcmlvZCAmJiBub25aZXJvUHVyY2hhc2UgJiYgaGFzVG9rZW5zOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldFN0YXJ0KHVpbnQyNTYgX3N0YXJ0KSBwdWJsaWMgb25seU93bmVyIHsKICAgICAgICBzdGFydFRpbWUgPSBfc3RhcnQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0RW5kKHVpbnQyNTYgX2VuZCkgcHVibGljIG9ubHlPd25lciB7CiAgICAgICAgcmVxdWlyZShzdGFydFRpbWUgPCBfZW5kKTsKICAgICAgICBlbmRUaW1lID0gX2VuZDsKICAgIH0KCiAgICAvLyBAcmV0dXJuIHRydWUgaWYgY3Jvd2RzYWxlIGV2ZW50IGhhcyBlbmRlZAogICAgZnVuY3Rpb24gaGFzRW5kZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIG5vdyA+IGVuZFRpbWU7CiAgICB9Cgp9'.
	

]
