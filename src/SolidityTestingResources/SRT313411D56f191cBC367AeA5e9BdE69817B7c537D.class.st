Class {
	#name : #SRT313411D56f191cBC367AeA5e9BdE69817B7c537D,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT313411D56f191cBC367AeA5e9BdE69817B7c537D >> base64 [
	^ ''.
	

]
