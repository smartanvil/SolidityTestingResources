Class {
	#name : #SRTd77fc35cc9007557dcd18bfe26fe66f1ea3a0e7f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd77fc35cc9007557dcd18bfe26fe66f1ea3a0e7f >> base64 [
	^ ''.
	

]
