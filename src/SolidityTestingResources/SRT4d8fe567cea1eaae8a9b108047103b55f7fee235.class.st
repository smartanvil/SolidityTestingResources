Class {
	#name : #SRT4d8fe567cea1eaae8a9b108047103b55f7fee235,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4d8fe567cea1eaae8a9b108047103b55f7fee235 >> base64 [
	^ ''.
	

]
