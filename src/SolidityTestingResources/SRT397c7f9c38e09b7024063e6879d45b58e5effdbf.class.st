Class {
	#name : #SRT397c7f9c38e09b7024063e6879d45b58e5effdbf,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT397c7f9c38e09b7024063e6879d45b58e5effdbf >> base64 [
	^ ''.
	

]
