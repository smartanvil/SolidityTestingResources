Class {
	#name : #SRTd1282864e14c77e186eb45d4286e90eeb8a830b5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd1282864e14c77e186eb45d4286e90eeb8a830b5 >> base64 [
	^ ''.
	

]
