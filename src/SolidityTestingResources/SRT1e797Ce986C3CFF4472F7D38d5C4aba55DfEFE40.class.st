Class {
	#name : #SRT1e797Ce986C3CFF4472F7D38d5C4aba55DfEFE40,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e797Ce986C3CFF4472F7D38d5C4aba55DfEFE40 >> base64 [
	^ ''.
	

]
