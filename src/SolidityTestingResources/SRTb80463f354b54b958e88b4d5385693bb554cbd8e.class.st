Class {
	#name : #SRTb80463f354b54b958e88b4d5385693bb554cbd8e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb80463f354b54b958e88b4d5385693bb554cbd8e >> base64 [
	^ ''.
	

]
