Class {
	#name : #SRTdd668617758fd3966825f0b58d5381c24794f9e5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdd668617758fd3966825f0b58d5381c24794f9e5 >> base64 [
	^ ''.
	

]
