Class {
	#name : #SRTba5787e07a0636a756f4b4d517b595dba24239ef,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTba5787e07a0636a756f4b4d517b595dba24239ef >> base64 [
	^ ''.
	

]
