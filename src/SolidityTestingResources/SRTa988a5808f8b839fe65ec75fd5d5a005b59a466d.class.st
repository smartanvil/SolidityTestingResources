Class {
	#name : #SRTa988a5808f8b839fe65ec75fd5d5a005b59a466d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa988a5808f8b839fe65ec75fd5d5a005b59a466d >> base64 [
	^ ''.
	

]
