Class {
	#name : #SRT42ebb2fd690bbfd4a8d818830b7e884b9b62f249,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT42ebb2fd690bbfd4a8d818830b7e884b9b62f249 >> base64 [
	^ ''.
	

]
