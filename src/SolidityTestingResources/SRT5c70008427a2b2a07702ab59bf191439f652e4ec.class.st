Class {
	#name : #SRT5c70008427a2b2a07702ab59bf191439f652e4ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5c70008427a2b2a07702ab59bf191439f652e4ec >> base64 [
	^ ''.
	

]
