Class {
	#name : #SRTa0388ffb2a3c198dee723135e0caa423840b375a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa0388ffb2a3c198dee723135e0caa423840b375a >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCi8vIEFic3RyYWN0IGNvbnRyYWN0IGZvciB0aGUgZnVsbCBFUkMgMjAgVG9rZW4gc3RhbmRhcmQKLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwCgpjb250cmFjdCBUb2tlbiB7CiAgICAvKiBUaGlzIGlzIGEgc2xpZ2h0IGNoYW5nZSB0byB0aGUgRVJDMjAgYmFzZSBzdGFuZGFyZC4KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOwogICAgaXMgcmVwbGFjZWQgd2l0aDoKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwogICAgVGhpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBnZXR0ZXIgZnVuY3Rpb24gZm9yIHRoZSB0b3RhbFN1cHBseS4KICAgIFRoaXMgaXMgbW92ZWQgdG8gdGhlIGJhc2UgY29udHJhY3Qgc2luY2UgcHVibGljIGdldHRlciBmdW5jdGlvbnMgYXJlIG5vdAogICAgY3VycmVudGx5IHJlY29nbmlzZWQgYXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIG1hdGNoaW5nIGFic3RyYWN0CiAgICBmdW5jdGlvbiBieSB0aGUgY29tcGlsZXIuCiAgICAqLwogICAgLy8vIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5OwoKICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIGZyb20gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSByZXRyaWV2ZWQKICAgIC8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYAogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudAogICAgLy8vIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZAogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIG9mIHRoZSBzZW5kZXIKICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHdlaSB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXIKICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdAogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvd25pbmcgdG9rZW5zCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2VucwogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudAogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKLy9GaWxlOiAvVXNlcnMvamJheWxpbmEvZ2l0L01WUC9TdGFuZGFyZFRva2VuLnNvbApwcmFnbWEgc29saWRpdHkgXjAuNC40OwovKgpZb3Ugc2hvdWxkIGluaGVyaXQgZnJvbSBTdGFuZGFyZFRva2VuIG9yLCBmb3IgYSB0b2tlbiBsaWtlIHlvdSB3b3VsZCB3YW50IHRvCmRlcGxveSBpbiBzb21ldGhpbmcgbGlrZSBNaXN0LCBzZWUgSHVtYW5TdGFuZGFyZFRva2VuLnNvbC4KKFRoaXMgaW1wbGVtZW50cyBPTkxZIHRoZSBzdGFuZGFyZCBmdW5jdGlvbnMgYW5kIE5PVEhJTkcgZWxzZS4KSWYgeW91IGRlcGxveSB0aGlzLCB5b3Ugd29uJ3QgaGF2ZSBhbnl0aGluZyB1c2VmdWwuKQoKSW1wbGVtZW50cyBFUkMgMjAgVG9rZW4gc3RhbmRhcmQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMAouKi8KCgoKY29udHJhY3QgU3RhbmRhcmRUb2tlbiBpcyBUb2tlbiB7CgogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL0RlZmF1bHQgYXNzdW1lcyB0b3RhbFN1cHBseSBjYW4ndCBiZSBvdmVyIG1heCAoMl4yNTYgLSAxKS4KICAgICAgICAvL0lmIHlvdXIgdG9rZW4gbGVhdmVzIG91dCB0b3RhbFN1cHBseSBhbmQgY2FuIGlzc3VlIG1vcmUgdG9rZW5zIGFzIHRpbWUKICAgICAgICAvL2dvZXMgb24sIHlvdSBuZWVkIHRvIGNoZWNrIGlmIGl0IGRvZXNuJ3Qgd3JhcC4KICAgICAgICAvL1JlcGxhY2UgdGhlIGlmIHdpdGggdGhpcyBvbmUgaW5zdGVhZC4KICAgICAgICAvL2lmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICAvL3NhbWUgYXMgYWJvdmUuIFJlcGxhY2UgdGhpcyBsaW5lIHdpdGggdGhlIGZvbGxvd2luZyBpZiB5b3Ugd2FudCB0byBwcm90ZWN0IGFnYWluc3Qgd3JhcHBpbmcgdWludHMuCiAgICAgICAgLy9pZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgewogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgIH0KCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsKICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsKfQoKLy9GaWxlOiAvVXNlcnMvamJheWxpbmEvZ2l0L01WUC9IdW1hblN0YW5kYXJkVG9rZW4uc29sCnByYWdtYSBzb2xpZGl0eSBeMC40LjQ7CgovKgpUaGlzIFRva2VuIENvbnRyYWN0IGltcGxlbWVudHMgdGhlIHN0YW5kYXJkIHRva2VuIGZ1bmN0aW9uYWxpdHkKKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCkgYXMgd2VsbCBhcyB0aGUgZm9sbG93aW5nIE9QVElPTkFMCmV4dHJhcyBpbnRlbmRlZCBmb3IgdXNlIGJ5IGh1bWFucy4KCkluIG90aGVyIHdvcmRzLiBUaGlzIGlzIGludGVuZGVkIGZvciBkZXBsb3ltZW50IGluIHNvbWV0aGluZyBsaWtlIGEgVG9rZW4KRmFjdG9yeSBvciBNaXN0IHdhbGxldCwgYW5kIHRoZW4gdXNlZCBieSBodW1hbnMuCkltYWdpbmUgY29pbnMsIGN1cnJlbmNpZXMsIHNoYXJlcywgdm90aW5nIHdlaWdodCwgZXRjLgpNYWNoaW5lLWJhc2VkLCByYXBpZCBjcmVhdGlvbiBvZiBtYW55IHRva2VucyB3b3VsZCBub3QgbmVjZXNzYXJpbHkgbmVlZCB0aGVzZQpleHRyYSBmZWF0dXJlcyBvciB3aWxsIGJlIG1pbnRlZCBpbiBvdGhlciBtYW5uZXJzLgoKMSkgSW5pdGlhbCBGaW5pdGUgU3VwcGx5ICh1cG9uIGNyZWF0aW9uIG9uZSBzcGVjaWZpZXMgaG93IG11Y2ggaXMgbWludGVkKS4KMikgSW4gdGhlIGFic2VuY2Ugb2YgYSB0b2tlbiByZWdpc3RyeTogT3B0aW9uYWwgRGVjaW1hbCwgU3ltYm9sICYgTmFtZS4KMykgT3B0aW9uYWwgYXBwcm92ZUFuZENhbGwoKSBmdW5jdGlvbmFsaXR5IHRvIG5vdGlmeSBhIGNvbnRyYWN0IGlmIGFuIGFwcHJvdmFsKCkKaGFzIG9jY3VycmVkLgoKKi8KCgoKY29udHJhY3QgSHVtYW5TdGFuZGFyZFRva2VuIGlzIFN0YW5kYXJkVG9rZW4gewoKICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAvL2lmIGV0aGVyIGlzIHNlbnQgdG8gdGhpcyBhZGRyZXNzLCBzZW5kIGl0IGJhY2suCiAgICAgICAgdGhyb3c7CiAgICB9CgogICAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8KCiAgICAvKgogICAgTk9URToKICAgIFRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFyZSBPUFRJT05BTCB2YW5pdGllcy4gT25lIGRvZXMgbm90IGhhdmUgdG8gaW5jbHVkZQogICAgdGhlbS4KICAgIFRoZXkgYWxsb3cgb25lIHRvIGN1c3RvbWlzZSB0aGUgdG9rZW4gY29udHJhY3QgJiBpbiBubyB3YXkgaW5mbHVlbmNlcyB0aGUKICAgIGNvcmUgZnVuY3Rpb25hbGl0eS4KICAgIFNvbWUgd2FsbGV0cy9pbnRlcmZhY2VzIG1pZ2h0IG5vdCBldmVuIGJvdGhlciB0byBsb29rIGF0IHRoaXMgaW5mb3JtYXRpb24uCiAgICAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOyAgICAgICAgICAgICAgICAgICAvL2ZhbmN5IG5hbWU6IGVnIFNpbW9uIEJ1Y2tzCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgICAgIC8vSG93IG1hbnkgZGVjaW1hbHMgdG8gc2hvdy4KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOyAgICAgICAgICAgICAgICAgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlgKICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICdIMC4xJzsgICAgICAgLy9BbiBhcmJpdHJhcnkgdmVyc2lvbmluZyBzY2hlbWUuCgogICAgZnVuY3Rpb24gSHVtYW5TdGFuZGFyZFRva2VuKAogICAgICAgIHVpbnQyNTYgX2luaXRpYWxBbW91bnQsCiAgICAgICAgc3RyaW5nIF90b2tlbk5hbWUsCiAgICAgICAgdWludDggX2RlY2ltYWxVbml0cywKICAgICAgICBzdHJpbmcgX3Rva2VuU3ltYm9sCiAgICAgICAgKSB7CiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbEFtb3VudDsgLy8gR2l2ZSB0aGUgY3JlYXRvciBhbGwgaW5pdGlhbCB0b2tlbnMKICAgICAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsQW1vdW50OyAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgc3ltYm9sID0gX3Rva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgIH0KLyoKICAgIC8gKiBBcHByb3ZlcyBhbmQgdGhlbiBjYWxscyB0aGUgcmVjZWl2aW5nIGNvbnRyYWN0ICogLwogICAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOwoKICAgICAgICAvL2NhbGwgdGhlIHJlY2VpdmVBcHByb3ZhbCBmdW5jdGlvbiBvbiB0aGUgY29udHJhY3QgeW91IHdhbnQgdG8gYmUKICAgICAgICAvL25vdGlmaWVkLiBUaGlzIGNyYWZ0cyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIG1hbnVhbGx5IHNvIG9uZSBkb2Vzbid0CiAgICAgICAgLy9oYXZlIHRvIGluY2x1ZGUgYSBjb250cmFjdCBpbiBoZXJlIGp1c3QgZm9yIHRoaXMuCiAgICAgICAgLy9yZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuQ29udHJhY3QsIGJ5dGVzIF9leHRyYURhdGEpCiAgICAgICAgLy9pdCBpcyBhc3N1bWVkIHRoYXQgd2hlbiBkb2VzIHRoaXMgdGhhdCB0aGUgY2FsbCAqc2hvdWxkKiBzdWNjZWVkLAogICAgICAgIC8vb3RoZXJ3aXNlIG9uZSB3b3VsZCB1c2UgdmFuaWxsYSBhcHByb3ZlIGluc3RlYWQuCiAgICAgICAgaWYoIV9zcGVuZGVyLmNhbGwoCiAgICAgICAgYnl0ZXM0KGJ5dGVzMzIoc2hhMygicmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MsdWludDI1NixhZGRyZXNzLGJ5dGVzKSIpKSksCiAgICAgICAgbXNnLnNlbmRlciwKICAgICAgICBfdmFsdWUsCiAgICAgICAgdGhpcywKICAgICAgICBfZXh0cmFEYXRhKSkgeyB0aHJvdzsgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoqLwp9CgovL0ZpbGU6IC9Vc2Vycy9qYmF5bGluYS9naXQvTVZQL0NhbXBhaWduVG9rZW4uc29sCnByYWdtYSBzb2xpZGl0eSBeMC40LjQ7CgoKCi8vLyBAdGl0bGUgQ2FtcGFpZ25Ub2tlbiBDb250cmFjdAovLy8gQGF1dGhvciBKb3JkaSBCYXlsaW5hCi8vLyBAZGV2IFRoaXMgdG9rZW4gY29udHJhY3QgaXMgYSBjbG9uZSBvZiBDb25zZW5TeXMncyBIdW1hblN0YW5kYXJkVG9rZW4gd2l0aAovLy8gdGhlIGFwcHJvdmVBbmRDYWxsIGZ1bmN0aW9uIG9taXR0ZWQ7IGl0IGlzIEVSQyAyMCBjb21wbGlhbnQuCgpjb250cmFjdCBDYW1wYWlnblRva2VuIGlzIEh1bWFuU3RhbmRhcmRUb2tlbiB7CgovLy8gQGRldiBUaGUgdG9rZW5Db250cm9sbGVyIGlzIHRoZSBhZGRyZXNzIHRoYXQgZGVwbG95ZWQgdGhlIENhbXBhaWduVG9rZW4sIGZvciB0aGlzCi8vLyB0b2tlbiBpdCB3aWxsIGJlIGl0IHdpbGwgYmUgdGhlIENhbXBhaWduIENvbnRyYWN0CgogICAgYWRkcmVzcyBwdWJsaWMgdG9rZW5Db250cm9sbGVyOwoKLy8vIEBkZXYgVGhlIG9ubHlDb250cm9sbGVyIG1vZGlmaWVyIG9ubHkgYWxsb3dzIHRoZSB0b2tlbkNvbnRyb2xsZXIgdG8gY2FsbCB0aGUgZnVuY3Rpb24KCiAgICBtb2RpZmllciBvbmx5Q29udHJvbGxlciB7IGlmIChtc2cuc2VuZGVyICE9IHRva2VuQ29udHJvbGxlcikgdGhyb3c7IF87IH0KCi8vLyBAbm90aWNlIGBDYW1wYWlnblRva2VuKClgIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGRlcGxveXMgYSBuZXcKLy8vIEh1bWFuU3RhbmRhcmRUb2tlbiB3aXRoIHRoZSBwYXJhbWV0ZXJzIG9mIDAgaW5pdGlhbCB0b2tlbnMsIHRoZSBuYW1lCi8vLyAiQ2hhcml0eURBTyBUb2tlbiIgdGhlIGRlY2ltYWwgcGxhY2Ugb2YgdGhlIHNtYWxsZXN0IHVuaXQgYmVpbmcgMTgsIGFuZCB0aGUKLy8vIGNhbGwgc2lnbiBiZWluZyAiR0lWRSIuIEl0IHdpbGwgc2V0IHRoZSB0b2tlbkNvbnRyb2xsZXIgdG8gYmUgdGhlIGNvbnRyYWN0IHRoYXQKLy8vIGNhbGxzIHRoZSBmdW5jdGlvbi4KCiAgICBmdW5jdGlvbiBDYW1wYWlnblRva2VuKCkgSHVtYW5TdGFuZGFyZFRva2VuKDAsIkNoYXJpdHlEQU8gVG9rZW4iLDE4LCJHSVZFIikgewogICAgICAgIHRva2VuQ29udHJvbGxlciA9IG1zZy5zZW5kZXI7CiAgICB9CgovLy8gQG5vdGljZSBgY3JlYXRlVG9rZW5zKClgIHdpbGwgY3JlYXRlIHRva2VucyBpZiB0aGUgY2FtcGFpZ24gaGFzIG5vdCBiZWVuCi8vLyBzZWFsZWQuCi8vLyBAZGV2IGBjcmVhdGVUb2tlbnMoKWAgaXMgY2FsbGVkIGJ5IHRoZSBjYW1wYWlnbiBjb250cmFjdCB3aGVuCi8vLyBzb21lb25lIHNlbmRzIGV0aGVyIHRvIHRoYXQgY29udHJhY3Qgb3IgY2FsbHMgYGRvUGF5bWVudCgpYAovLy8gQHBhcmFtIGJlbmVmaWNpYXJ5IFRoZSBhZGRyZXNzIHJlY2VpdmluZyB0aGUgdG9rZW5zCi8vLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRoZSBhZGRyZXNzIGlzIHJlY2VpdmluZwovLy8gQHJldHVybiBUcnVlIGlmIHRva2VucyBhcmUgY3JlYXRlZAoKICAgIGZ1bmN0aW9uIGNyZWF0ZVRva2VucyhhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IGFtb3VudAogICAgKSBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoc2VhbGVkKCkpIHRocm93OwogICAgICAgIGJhbGFuY2VzW2JlbmVmaWNpYXJ5XSArPSBhbW91bnQ7ICAvLyBDcmVhdGUgdG9rZW5zIGZvciB0aGUgYmVuZWZpY2lhcnkKICAgICAgICB0b3RhbFN1cHBseSArPSBhbW91bnQ7ICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQogICAgICAgIFRyYW5zZmVyKDAsIGJlbmVmaWNpYXJ5LCBhbW91bnQpOyAvLyBDcmVhdGUgYW4gRXZlbnQgZm9yIHRoZSBjcmVhdGlvbgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKLy8vIEBub3RpY2UgYHNlYWwoKWAgZW5kcyB0aGUgQ2FtcGFpZ24gYnkgbWFraW5nIGl0IGltcG9zc2libGUgdG8gY3JlYXRlIG1vcmUKLy8vIHRva2Vucy4KLy8vIEBkZXYgYHNlYWwoKWAgY2hhbmdlcyB0aGUgdG9rZW5Db250cm9sbGVyIHRvIDAgYW5kIHRoZXJlZm9yZSBjYW4gb25seSBiZSBjYWxsZWQgYnkKLy8vIHRoZSB0b2tlbkNyZWF0b3IgY29udHJhY3Qgb25jZQovLy8gQHJldHVybiBUcnVlIGlmIHRoZSBDYW1wYWlnbiBpcyBzZWFsZWQKCiAgICBmdW5jdGlvbiBzZWFsKCkgb25seUNvbnRyb2xsZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAgewogICAgICAgIHRva2VuQ29udHJvbGxlciA9IDA7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgovLy8gQG5vdGljZSBgc2VhbGVkKClgIGNoZWNrcyB0byBzZWUgaWYgdGhlIHRoZSBDYW1wYWlnbiBoYXMgYmVlbiBzZWFsZWQKLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgQ2FtcGFpZ24gaGFzIGJlZW4gc2VhbGVkIGFuZCBjYW4ndCByZWNlaXZlIGZ1bmRzCgogICAgZnVuY3Rpb24gc2VhbGVkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiB0b2tlbkNvbnRyb2xsZXIgPT0gMDsKICAgIH0KfQoKLy9GaWxlOiAvVXNlcnMvamJheWxpbmEvZ2l0L01WUC9DYW1wYWlnbi5zb2wKcHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCgoKLy8vIEB0aXRsZSBDYW1wYWlnblRva2VuIENvbnRyYWN0Ci8vLyBAYXV0aG9yIEpvcmRpIEJheWxpbmEKLy8vIEBkZXYgVGhpcyBpcyBkZXNpZ25lZCB0byBjb250cm9sIHRoZSBDaGFpcnR5VG9rZW4gY29udHJhY3QuCgpjb250cmFjdCBDYW1wYWlnbiB7CgogICAgdWludCBwdWJsaWMgc3RhcnRGdW5kaW5nVGltZTsgICAgICAgLy8gSW4gVU5JWCBUaW1lIEZvcm1hdAogICAgdWludCBwdWJsaWMgZW5kRnVuZGluZ1RpbWU7ICAgICAgICAgLy8gSW4gVU5JWCBUaW1lIEZvcm1hdAogICAgdWludCBwdWJsaWMgbWF4aW11bUZ1bmRpbmc7ICAgICAgICAgLy8gSW4gd2VpCiAgICB1aW50IHB1YmxpYyB0b3RhbENvbGxlY3RlZDsgICAgICAgICAvLyBJbiB3ZWkKICAgIENhbXBhaWduVG9rZW4gcHVibGljIHRva2VuQ29udHJhY3Q7ICAvLyBUaGUgbmV3IHRva2VuIGZvciB0aGlzIENhbXBhaWduCiAgICBhZGRyZXNzIHB1YmxpYyB2YXVsdENvbnRyYWN0OyAgICAgICAvLyBUaGUgYWRkcmVzcyB0byBob2xkIHRoZSBmdW5kcyBkb25hdGVkCgovLy8gQG5vdGljZSAnQ2FtcGFpZ24oKScgaW5pdGlhdGVzIHRoZSBDYW1wYWlnbiBieSBzZXR0aW5nIGl0cyBmdW5kaW5nCi8vLyBwYXJhbWV0ZXJzIGFuZCBjcmVhdGluZyB0aGUgZGVwbG95aW5nIHRoZSB0b2tlbiBjb250cmFjdAovLy8gQGRldiBUaGVyZSBhcmUgc2V2ZXJhbCBjaGVja3MgdG8gbWFrZSBzdXJlIHRoZSBwYXJhbWV0ZXJzIGFyZSBhY2NlcHRhYmxlCi8vLyBAcGFyYW0gX3N0YXJ0RnVuZGluZ1RpbWUgVGhlIFVOSVggdGltZSB0aGF0IHRoZSBDYW1wYWlnbiB3aWxsIGJlIGFibGUgdG8KLy8vIHN0YXJ0IHJlY2VpdmluZyBmdW5kcwovLy8gQHBhcmFtIF9lbmRGdW5kaW5nVGltZSBUaGUgVU5JWCB0aW1lIHRoYXQgdGhlIENhbXBhaWduIHdpbGwgc3RvcCBiZWluZyBhYmxlCi8vLyB0byByZWNlaXZlIGZ1bmRzCi8vLyBAcGFyYW0gX21heGltdW1GdW5kaW5nIEluIHdlaSwgdGhlIE1heGltdW0gYW1vdW50IHRoYXQgdGhlIENhbXBhaWduIGNhbgovLy8gcmVjZWl2ZSAoY3VycmVudGx5IHRoZSBtYXggaXMgc2V0IGF0IDEwLDAwMCBFVEggZm9yIHRoZSBiZXRhKQovLy8gQHBhcmFtIF92YXVsdENvbnRyYWN0IFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBzdG9yZSB0aGUgZG9uYXRlZCBmdW5kcwoKICAgIGZ1bmN0aW9uIENhbXBhaWduKAogICAgICAgIHVpbnQgX3N0YXJ0RnVuZGluZ1RpbWUsCiAgICAgICAgdWludCBfZW5kRnVuZGluZ1RpbWUsCiAgICAgICAgdWludCBfbWF4aW11bUZ1bmRpbmcsCiAgICAgICAgYWRkcmVzcyBfdmF1bHRDb250cmFjdAogICAgKSB7CiAgICAgICAgaWYgKChfZW5kRnVuZGluZ1RpbWUgPCBub3cpIHx8ICAgICAgICAgICAgICAgIC8vIENhbm5vdCBzdGFydCBpbiB0aGUgcGFzdAogICAgICAgICAgICAoX2VuZEZ1bmRpbmdUaW1lIDw9IF9zdGFydEZ1bmRpbmdUaW1lKSB8fAogICAgICAgICAgICAoX21heGltdW1GdW5kaW5nID4gMTAwMDAgZXRoZXIpIHx8ICAgICAgICAvLyBUaGUgQmV0YSBpcyBsaW1pdGVkCiAgICAgICAgICAgIChfdmF1bHRDb250cmFjdCA9PSAwKSkgICAgICAgICAgICAgICAgICAgIC8vIFRvIHByZXZlbnQgYnVybmluZyBFVEgKICAgICAgICAgICAgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICAgICAgfQogICAgICAgIHN0YXJ0RnVuZGluZ1RpbWUgPSBfc3RhcnRGdW5kaW5nVGltZTsKICAgICAgICBlbmRGdW5kaW5nVGltZSA9IF9lbmRGdW5kaW5nVGltZTsKICAgICAgICBtYXhpbXVtRnVuZGluZyA9IF9tYXhpbXVtRnVuZGluZzsKICAgICAgICB0b2tlbkNvbnRyYWN0ID0gbmV3IENhbXBhaWduVG9rZW4gKCk7IC8vIERlcGxveXMgdGhlIFRva2VuIENvbnRyYWN0CiAgICAgICAgdmF1bHRDb250cmFjdCA9IF92YXVsdENvbnRyYWN0OwogICAgfQoKLy8vIEBkZXYgVGhlIGZhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGV0aGVyIGlzIHNlbnQgdG8gdGhlIGNvbnRyYWN0LCBpdAovLy8gc2ltcGx5IGNhbGxzIGBkb1BheW1lbnQoKWAgd2l0aCB0aGUgYWRkcmVzcyB0aGF0IHNlbnQgdGhlIGV0aGVyIGFzIHRoZQovLy8gYF9vd25lcmAuIFBheWFibGUgaXMgYSByZXF1aXJlZCBzb2xpZGl0eSBtb2RpZmllciBmb3IgZnVuY3Rpb25zIHRvIHJlY2VpdmUKLy8vIGV0aGVyLCB3aXRob3V0IHRoaXMgbW9kaWZpZXIgdGhleSB3aWxsIHRocm93CgogICAgZnVuY3Rpb24gKCkgIHBheWFibGUgewogICAgICAgIGRvUGF5bWVudChtc2cuc2VuZGVyKTsKICAgIH0KCi8vLyBAbm90aWNlIGBwcm94eVBheW1lbnQoKWAgYWxsb3dzIHRoZSBjYWxsZXIgdG8gc2VuZCBldGhlciB0byB0aGUgQ2FtcGFpZ24gYW5kCi8vLyBoYXZlIHRoZSBDYW1wYWlnblRva2VucyBjcmVhdGVkIGluIGFuIGFkZHJlc3Mgb2YgdGhlaXIgY2hvb3NpbmcKLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGhvbGQgdGhlIG5ld2x5IGNyZWF0ZWQgQ2FtcGFpZ25Ub2tlbnMKCiAgICBmdW5jdGlvbiBwcm94eVBheW1lbnQoYWRkcmVzcyBfb3duZXIpIHBheWFibGUgewogICAgICAgIGRvUGF5bWVudChfb3duZXIpOwogICAgfQoKLy8vIEBkZXYgYGRvUGF5bWVudCgpYCBpcyBhbiBpbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHNlbmRzIHRoZSBldGhlciB0aGF0IHRoaXMKLy8vIGNvbnRyYWN0IHJlY2VpdmVzIHRvIHRoZSBgdmF1bHRDb250cmFjdGAgYW5kIGNyZWF0ZXMgY2FtcGFpZ25Ub2tlbnMgaW4gdGhlCi8vLyBhZGRyZXNzIG9mIHRoZSBgX293bmVyYCBhc3N1bWluZyB0aGUgQ2FtcGFpZ24gaXMgc3RpbGwgYWNjZXB0aW5nIGZ1bmRzCi8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBob2xkIHRoZSBuZXdseSBjcmVhdGVkIENhbXBhaWduVG9rZW5zCgogICAgZnVuY3Rpb24gZG9QYXltZW50KGFkZHJlc3MgX293bmVyKSBpbnRlcm5hbCB7CgovLyBGaXJzdCB3ZSBjaGVjayB0aGF0IHRoZSBDYW1wYWlnbiBpcyBhbGxvd2VkIHRvIHJlY2VpdmUgdGhpcyBkb25hdGlvbgogICAgICAgIGlmICgobm93PHN0YXJ0RnVuZGluZ1RpbWUpIHx8CiAgICAgICAgICAgIChub3c+ZW5kRnVuZGluZ1RpbWUpIHx8CiAgICAgICAgICAgICh0b2tlbkNvbnRyYWN0LnRva2VuQ29udHJvbGxlcigpID09IDApIHx8ICAgICAgICAgICAvLyBFeHRyYSBjaGVjawogICAgICAgICAgICAobXNnLnZhbHVlID09IDApIHx8CiAgICAgICAgICAgICh0b3RhbENvbGxlY3RlZCArIG1zZy52YWx1ZSA+IG1heGltdW1GdW5kaW5nKSkKICAgICAgICB7CiAgICAgICAgICAgIHRocm93OwogICAgICAgIH0KCi8vVHJhY2sgaG93IG11Y2ggdGhlIENhbXBhaWduIGhhcyBjb2xsZWN0ZWQKICAgICAgICB0b3RhbENvbGxlY3RlZCArPSBtc2cudmFsdWU7CgovL1NlbmQgdGhlIGV0aGVyIHRvIHRoZSB2YXVsdENvbnRyYWN0CiAgICAgICAgaWYgKCF2YXVsdENvbnRyYWN0LnNlbmQobXNnLnZhbHVlKSkgewogICAgICAgICAgICB0aHJvdzsKICAgICAgICB9CgovLyBDcmVhdGVzIGFuIGVxdWFsIGFtb3VudCBvZiBDYW1wYWlnblRva2VucyBhcyBldGhlciBzZW50LiBUaGUgbmV3IENhbXBhaWduVG9rZW5zCi8vIGFyZSBjcmVhdGVkIGluIHRoZSBgX293bmVyYCBhZGRyZXNzCiAgICAgICAgaWYgKCF0b2tlbkNvbnRyYWN0LmNyZWF0ZVRva2Vucyhfb3duZXIsIG1zZy52YWx1ZSkpIHsKICAgICAgICAgICAgdGhyb3c7CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICB9CgovLy8gQG5vdGljZSBgc2VhbCgpYCBlbmRzIHRoZSBDYW1wYWlnbiBieSBjYWxsaW5nIGBzZWFsKClgIGluIHRoZSBDYW1wYWlnblRva2VuCi8vLyBjb250cmFjdAovLy8gQGRldiBgc2VhbCgpYCBjYW4gb25seSBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgZnVuZGluZyBwZXJpb2QuCgogICAgZnVuY3Rpb24gc2VhbCgpIHsKICAgICAgICBpZiAobm93IDwgZW5kRnVuZGluZ1RpbWUpIHRocm93OwogICAgICAgIHRva2VuQ29udHJhY3Quc2VhbCgpOwogICAgfQoKfQ=='.
	

]
