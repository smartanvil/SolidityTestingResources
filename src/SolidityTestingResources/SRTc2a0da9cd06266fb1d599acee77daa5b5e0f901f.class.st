Class {
	#name : #SRTc2a0da9cd06266fb1d599acee77daa5b5e0f901f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc2a0da9cd06266fb1d599acee77daa5b5e0f901f >> base64 [
	^ ''.
	

]
