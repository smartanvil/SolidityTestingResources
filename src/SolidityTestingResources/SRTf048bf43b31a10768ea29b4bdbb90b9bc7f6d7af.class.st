Class {
	#name : #SRTf048bf43b31a10768ea29b4bdbb90b9bc7f6d7af,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTf048bf43b31a10768ea29b4bdbb90b9bc7f6d7af >> base64 [
	^ ''.
	

]
