Class {
	#name : #SRT3150954eae1a8a5e5ee1f1b8e8444fe16ea9f94c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3150954eae1a8a5e5ee1f1b8e8444fe16ea9f94c >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTk7CgovKiAKCUNvbnRyYWN0IGZvciBEZWx0YUJhbGFuY2VzLmdpdGh1Yi5pbyAKCUNoZWNrIGJhbGFuY2VzIGZvciBtdWx0aXBsZSBFUkMyMCB0b2tlbnMgaW4gMSBiYXRjaGVkIHJlcXVlc3QuCiovCgovLyBleGNoYW5nZSBjb250cmFjdCBJbnRlcmZhY2UgZm9yIEV0aGVyRGVsdGEgYW5kIGZvcmtzCmNvbnRyYWN0IEV4Y2hhbmdlIHsKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyAvKnRva2VuKi8sIGFkZHJlc3MgLyp1c2VyKi8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpOwp9CgovLyBFUkMyMCBjb250cmFjdCBpbnRlcmZhY2UKY29udHJhY3QgVG9rZW4gewogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgLyp0b2tlbk93bmVyKi8pIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQgLypiYWxhbmNlKi8pOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyAvKnRvKi8sIHVpbnQgLyp0b2tlbnMqLykgcHVibGljIHJldHVybnMgKGJvb2wgLypzdWNjZXNzKi8pOwp9Cgpjb250cmFjdCBEZWx0YUJhbGFuY2VzIHsKCQoJYWRkcmVzcyBwdWJsaWMgYWRtaW47IAoKCWZ1bmN0aW9uIERlbHRhQmFsYW5jZXMoKSBwdWJsaWMgewogICAgICAgIGFkbWluID0gMHhmNkU5MTREMDdkMTI2MzY3NTk4NjhhNjFFNTI5NzNkMTdFRDcxMTFCOyAvLyBpbiBjYXNlIG9mIGRlcGxveSB1c2luZyBNRVcgd2l0aCBubyBhcmd1bWVudHMKCX0KCgkvL2RlZmF1bHQgZnVuY3Rpb24sIGRvbid0IGFjY2VwdCBhbnkgRVRICglmdW5jdGlvbigpIHB1YmxpYyBwYXlhYmxlIHsKCQlyZXZlcnQoKTsKCX0KCQoJLy9saW1pdCBhZGRyZXNzIHRvIHRoZSBjcmVhdGluZyBhZGRyZXNzCiAgICBtb2RpZmllciBpc0FkbWluKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZG1pbik7CgkgICAgIF87CiAgICB9CiAgICAKCS8vIHNlbGZkZXN0cnVjdCBmb3IgY2xlYW51cAoJZnVuY3Rpb24gZGVzdHJ1Y3QoKSBwdWJsaWMgaXNBZG1pbiB7CgkJc2VsZmRlc3RydWN0KGFkbWluKTsKCX0KCgkvLyBiYWNrdXAgd2l0aGRyYXcsIGlmIHNvbWVob3cgRVRIIGdldHMgaW4gaGVyZQoJZnVuY3Rpb24gd2l0aGRyYXcoKSBwdWJsaWMgaXNBZG1pbiB7CiAgICAJYWRtaW4udHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKCX0KCgkvLyBiYWNrdXAgd2l0aGRyYXcsIGlmIHNvbWVob3cgRVJDMjAgdG9rZW5zIGdldCBpbiBoZXJlCglmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKGFkZHJlc3MgdG9rZW4sIHVpbnQgYW1vdW50KSBwdWJsaWMgaXNBZG1pbiB7CiAgICAJcmVxdWlyZSh0b2tlbiAhPSBhZGRyZXNzKDB4MCkpOyAvL3VzZSB3aXRoZHJhdyBmb3IgRVRICiAgICAJcmVxdWlyZShUb2tlbih0b2tlbikudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50KSk7Cgl9CiAgCgkvKiBHZXQgbXVsdGlwbGUgdG9rZW4gYmFsYW5jZXMgb24gRXRoZXJEZWx0YSAob3Igc2ltaWxhciBleGNoYW5nZSkKCSAgIFBvc3NpYmxlIGVycm9yIHRocm93czoKCSAgICAgICAtIGludmFsaWQgZXhjaGFuZ2UgY29udHJhY3QgCgkgICAgICAgLSB1c2luZyBhbiBleHRyZW1lbHkgbGFyZ2UgYXJyYXkgKGdhcyBjb3N0IHRvbyBoaWdoPykKCSAgICAgICAKCSAgIFJldHVybnMgYXJyYXkgb2YgdG9rZW4gYmFsYW5jZXMgaW4gd2VpIHVuaXRzLiAqLwoJZnVuY3Rpb24gZGVsdGFCYWxhbmNlcyhhZGRyZXNzIGV4Y2hhbmdlLCBhZGRyZXNzIHVzZXIsICBhZGRyZXNzW10gdG9rZW5zKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50W10pIHsKCQlFeGNoYW5nZSBleCA9IEV4Y2hhbmdlKGV4Y2hhbmdlKTsKCSAgICB1aW50W10gbWVtb3J5IGJhbGFuY2VzID0gbmV3IHVpbnRbXSh0b2tlbnMubGVuZ3RoKTsKCSAgICAKCQlmb3IodWludCBpID0gMDsgaTwgdG9rZW5zLmxlbmd0aDsgaSsrKXsKCQkJYmFsYW5jZXNbaV0gPSBleC5iYWxhbmNlT2YodG9rZW5zW2ldLCB1c2VyKTsKCQl9CQoJCXJldHVybiBiYWxhbmNlczsKCX0KCQoJLyogR2V0IG11bHRpcGxlIHRva2VuIGJhbGFuY2VzIG9uIEV0aGVyRGVsdGEgKG9yIHNpbWlsYXIgZXhjaGFuZ2UpCgkgICBQb3NzaWJsZSBlcnJvciB0aHJvd3M6CgkgICAgICAgLSBpbnZhbGlkIGV4Y2hhbmdlIGNvbnRyYWN0IAoJICAgICAgIC0gdXNpbmcgZXh0cmVtZWx5IGxhcmdlIGFycmF5cyAoZ2FzIGNvc3QgdG9vIGhpZ2g/KQoJICAgICAgIAoJICAgUmV0dXJucyBhcnJheSBvZiB0b2tlbiBiYWxhbmNlcyBpbiB3ZWkgdW5pdHMuCgkgICBCYWxhbmNlcyBpbiB0b2tlbi1maXJzdCBvcmRlciBbdG9rZW4wZXgwLCB0b2tlbjBleDEsIHRva2VuMGV4MiwgdG9rZW4xZXgwLCB0b2tlbjFleDEgLi4uXSAqLwoJZnVuY3Rpb24gbXVsdGlEZWx0YUJhbGFuY2VzKGFkZHJlc3NbXSBleGNoYW5nZXMsIGFkZHJlc3MgdXNlciwgIGFkZHJlc3NbXSB0b2tlbnMpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnRbXSkgewoJICAgIHVpbnRbXSBtZW1vcnkgYmFsYW5jZXMgPSBuZXcgdWludFtdKHRva2Vucy5sZW5ndGggKiBleGNoYW5nZXMubGVuZ3RoKTsKCSAgICAKCSAgICBmb3IodWludCBpID0gMDsgaSA8IGV4Y2hhbmdlcy5sZW5ndGg7IGkrKyl7CgkJCUV4Y2hhbmdlIGV4ID0gRXhjaGFuZ2UoZXhjaGFuZ2VzW2ldKTsKCQkJCiAgICAJCWZvcih1aW50IGogPSAwOyBqPCB0b2tlbnMubGVuZ3RoOyBqKyspewogICAgCQkgICAgCiAgICAJCQliYWxhbmNlc1soaiAqIGV4Y2hhbmdlcy5sZW5ndGgpICsgaV0gPSBleC5iYWxhbmNlT2YodG9rZW5zW2pdLCB1c2VyKTsKICAgIAkJfQoJICAgIH0KCQlyZXR1cm4gYmFsYW5jZXM7Cgl9CiAgCiAgLyogQ2hlY2sgdGhlIHRva2VuIGJhbGFuY2Ugb2YgYSB3YWxsZXQgaW4gYSB0b2tlbiBjb250cmFjdAogICAgIEF2b2lkcyBwb3NzaWJsZSBlcnJvcnM6CiAgICAgICAgLSByZXR1cm5zIDAgb24gaW52YWxpZCBleGNoYW5nZSBjb250cmFjdCAKICAgICAgICAtIHJldHVybiAwIG9uIG5vbi1jb250cmFjdCBhZGRyZXNzIAogICAgICAgCiAgICAgTWFpbmx5IGZvciBpbnRlcm5hbCB1c2UsIGJ1dCBwdWJsaWMgZm9yIGFueW9uZSB3aG8gdGhpbmtzIGl0IGlzIHVzZWZ1bCAgICAqLwogICBmdW5jdGlvbiB0b2tlbkJhbGFuY2UoYWRkcmVzcyB1c2VyLCBhZGRyZXNzIHRva2VuKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICAgICAvLyAgY2hlY2sgaWYgdG9rZW4gaXMgYWN0dWFsbHkgYSBjb250cmFjdAogICAgICAgIHVpbnQyNTYgdG9rZW5Db2RlOwogICAgICAgIGFzc2VtYmx5IHsgdG9rZW5Db2RlIDo9IGV4dGNvZGVzaXplKHRva2VuKSB9IC8vIGNvbnRyYWN0IGNvZGUgc2l6ZQogICAgICAgIGlmKHRva2VuQ29kZSA+IDApCiAgICAgICAgewogICAgICAgICAgICBUb2tlbiB0b2sgPSBUb2tlbih0b2tlbik7CiAgICAgICAgICAgIC8vICBjaGVjayBpZiBiYWxhbmNlT2Ygc3VjY2VlZHMKICAgICAgICAgICAgaWYodG9rLmNhbGwoYnl0ZXM0KGtlY2NhazI1NigiYmFsYW5jZU9mKGFkZHJlc3MpIikpLCB1c2VyKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRvay5iYWxhbmNlT2YodXNlcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBub3QgYSB2YWxpZCBiYWxhbmNlT2YsIHJldHVybiAwIGluc3RlYWQgb2YgZXJyb3IKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAwOyAvLyBub3QgYSBjb250cmFjdCwgcmV0dXJuIDAgaW5zdGVhZCBvZiBlcnJvcgogICAgICAgIH0KICAgfQogIAogICAgLyogQ2hlY2sgdGhlIHRva2VuIGJhbGFuY2VzIG9mIGEgd2FsbGV0IGZvciBtdWx0aXBsZSB0b2tlbnMKICAgICAgIFVzZXMgdG9rZW5CYWxhbmNlKCkgdG8gYmUgYWJsZSB0byByZXR1cm4sIGV2ZW4gaWYgYSB0b2tlbiBpc24ndCB2YWxpZCAKCSAgIFBvc3NpYmxlIGVycm9yIHRocm93czoKCSAgICAgICAtIGV4dHJlbWVseSBsYXJnZSBhcnJheXMgKGdhcyBjb3N0IHRvbyBoaWdoKSAKCSAgICAgICAKCSAgIFJldHVybnMgYXJyYXkgb2YgdG9rZW4gYmFsYW5jZXMgaW4gd2VpIHVuaXRzLiAqLwoJZnVuY3Rpb24gd2FsbGV0QmFsYW5jZXMoYWRkcmVzcyB1c2VyLCAgYWRkcmVzc1tdIHRva2VucykgcHVibGljIHZpZXcgcmV0dXJucyAodWludFtdKSB7CgkgICAgcmVxdWlyZSh0b2tlbnMubGVuZ3RoID4gMCk7CgkJdWludFtdIG1lbW9yeSBiYWxhbmNlcyA9IG5ldyB1aW50W10odG9rZW5zLmxlbmd0aCk7CgkJCgkJZm9yKHVpbnQgaSA9IDA7IGk8IHRva2Vucy5sZW5ndGg7IGkrKyl7CgkJCWlmKCB0b2tlbnNbaV0gIT0gYWRkcmVzcygweDApICkgeyAvLyBFVEggYWRkcmVzcyBpbiBFdGhlcmRlbHRhIGNvbmZpZwoJCQkgICAgYmFsYW5jZXNbaV0gPSB0b2tlbkJhbGFuY2UodXNlciwgdG9rZW5zW2ldKTsKCQkJfQoJCQllbHNlIHsKCQkJICAgYmFsYW5jZXNbaV0gPSB1c2VyLmJhbGFuY2U7IC8vIGV0aCBiYWxhbmNlCQoJCQl9CgkJfQkKCQlyZXR1cm4gYmFsYW5jZXM7Cgl9CgkKCSAvKiBDb21iaW5lIHdhbGxldEJhbGFuY2VzKCkgYW5kIGRlbHRhQmFsYW5jZXMoKSB0byBnZXQgYm90aCBleGNoYW5nZSBhbmQgd2FsbGV0IGJhbGFuY2VzIGZvciBtdWx0aXBsZSB0b2tlbnMuCgkgICBQb3NzaWJsZSBlcnJvciB0aHJvd3M6CgkgICAgICAgLSBleHRyZW1lbHkgbGFyZ2UgYXJyYXlzIChnYXMgY29zdCB0b28gaGlnaCkgCgkgICAgICAgCgkgICBSZXR1cm5zIGFycmF5IG9mIHRva2VuIGJhbGFuY2VzIGluIHdlaSB1bml0cywgMiogaW5wdXQgbGVuZ3RoLgoJICAgZXZlbiBpbmRleCBbMF0gaXMgZXhjaGFuZ2UgYmFsYW5jZSwgb2RkIFsxXSBpcyB3YWxsZXQgYmFsYW5jZQoJICAgW3RvazBleCwgdG9rMCwgdG9rMWV4LCB0b2sxLCAuLiBdICovCglmdW5jdGlvbiBhbGxCYWxhbmNlcyhhZGRyZXNzIGV4Y2hhbmdlLCBhZGRyZXNzIHVzZXIsICBhZGRyZXNzW10gdG9rZW5zKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50W10pIHsKCQlFeGNoYW5nZSBleCA9IEV4Y2hhbmdlKGV4Y2hhbmdlKTsKCQl1aW50W10gbWVtb3J5IGJhbGFuY2VzID0gbmV3IHVpbnRbXSh0b2tlbnMubGVuZ3RoICogMik7CgkJCgkJZm9yKHVpbnQgaSA9IDA7IGk8IHRva2Vucy5sZW5ndGg7IGkrKyl7CgkJICAgIHVpbnQgaiA9IGkgKiAyOwoJCQliYWxhbmNlc1tqXSA9IGV4LmJhbGFuY2VPZih0b2tlbnNbaV0sIHVzZXIpOwoJCQlpZiggdG9rZW5zW2ldICE9IGFkZHJlc3MoMHgwKSApIHsgLy8gRVRIIGFkZHJlc3MgaW4gRXRoZXJkZWx0YSBjb25maWcKCQkJICAgIGJhbGFuY2VzW2ogKyAxXSA9IHRva2VuQmFsYW5jZSh1c2VyLCB0b2tlbnNbaV0pOwoJCQl9IGVsc2UgewoJCQkgICBiYWxhbmNlc1tqICsgMV0gPSB1c2VyLmJhbGFuY2U7IC8vIGV0aCBiYWxhbmNlCQoJCQl9CgkJfQoJCXJldHVybiBiYWxhbmNlczsgCgl9Cn0='.
	

]
