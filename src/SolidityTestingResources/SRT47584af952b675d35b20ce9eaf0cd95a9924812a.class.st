Class {
	#name : #SRT47584af952b675d35b20ce9eaf0cd95a9924812a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT47584af952b675d35b20ce9eaf0cd95a9924812a >> base64 [
	^ ''.
	

]
