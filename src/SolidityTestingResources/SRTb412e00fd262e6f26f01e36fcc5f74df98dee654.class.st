Class {
	#name : #SRTb412e00fd262e6f26f01e36fcc5f74df98dee654,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb412e00fd262e6f26f01e36fcc5f74df98dee654 >> base64 [
	^ ''.
	

]
