Class {
	#name : #SRT1098aa6de456713e11f8a3abff02a21830350c24,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1098aa6de456713e11f8a3abff02a21830350c24 >> base64 [
	^ ''.
	

]
