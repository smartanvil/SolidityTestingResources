Class {
	#name : #SRTcd619ad647357868dd5987b0ce4886bf61cfac32,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcd619ad647357868dd5987b0ce4886bf61cfac32 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuNDsKCi8vIEVSQzIwIHRva2VuIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBvbmx5IHBhcnRpYWxseQovLyAobm8gU2FmZU1hdGggaXMgdXNlZCBiZWNhdXNlIGNvbnRyYWN0IGNvZGUgaXMgdmVyeSBzaW1wbGUpCi8vIAovLyBTb21lIGZ1bmN0aW9ucyBsZWZ0IHVuZGVmaW5lZDoKLy8gIC0gdHJhbnNmZXIsIHRyYW5zZmVyRnJvbSwKLy8gIC0gYXBwcm92ZSwgYWxsb3dhbmNlLgpjb250cmFjdCBQcmVzYWxlVG9rZW4KewovLy8gRmllbGRzOgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlNxdWFyRXggUHJpdmF0ZSBSb3VuZCBTUUVYIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlNRRVgiOwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsKICAgIHVpbnQgcHVibGljIGNvbnN0YW50IFBSSUNFID0gMTcwMDsgIC8vIHBlciAxIEV0aGVyCgogICAgLy8gIHByaWNlCiAgICAvLyBDYXAgaXMgMjUwMCBFVEgKICAgIC8vIDEgRVRIID0gMTcwMCBQcml2YXRlIFJvdW5kIFNRRVggdG9rZW5zCiAgICAvLyAKICAgIC8vIEVUSCBwcmljZSB+MjAwJCBmb3IgMzAuMDcuMjAxNwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9LRU5fU1VQUExZX0xJTUlUID0gUFJJQ0UgKiAyNTAwICogKDEgZXRoZXIgLyAxIHdlaSk7CgogICAgZW51bSBTdGF0ZXsKICAgICAgIEluaXQsCiAgICAgICBSdW5uaW5nLAogICAgICAgUGF1c2VkLAogICAgICAgTWlncmF0aW5nLAogICAgICAgTWlncmF0ZWQKICAgIH0KCiAgICBTdGF0ZSBwdWJsaWMgY3VycmVudFN0YXRlID0gU3RhdGUuUnVubmluZzsKICAgIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsgLy8gYW1vdW50IG9mIHRva2VucyBhbHJlYWR5IHNvbGQKCiAgICAvLyBHYXRoZXJlZCBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIG9ubHkgdG8gZXNjcm93J3MgYWRkcmVzcy4KICAgIGFkZHJlc3MgcHVibGljIGVzY3JvdyA9IDA7CgogICAgLy8gVG9rZW4gbWFuYWdlciBoYXMgZXhjbHVzaXZlIHByaXZlbGVnZXMgdG8gY2FsbCBhZG1pbmlzdHJhdGl2ZQogICAgLy8gZnVuY3Rpb25zIG9uIHRoaXMgY29udHJhY3QuCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk1hbmFnZXIgPSAwOwoKICAgIC8vIENyb3dkc2FsZSBtYW5hZ2VyIGhhcyBleGNsdXNpdmUgcHJpdmVsZWdlcyB0byBidXJuIHByZXNhbGUgdG9rZW5zLgogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlTWFuYWdlciA9IDA7CgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2U7CgovLy8gTW9kaWZpZXJzOgogICAgbW9kaWZpZXIgb25seVRva2VuTWFuYWdlcigpICAgICB7IGlmKG1zZy5zZW5kZXIgIT0gdG9rZW5NYW5hZ2VyKSB0aHJvdzsgXzsgfQogICAgbW9kaWZpZXIgb25seUNyb3dkc2FsZU1hbmFnZXIoKSB7IGlmKG1zZy5zZW5kZXIgIT0gY3Jvd2RzYWxlTWFuYWdlcikgdGhyb3c7IF87IH0KICAgIG1vZGlmaWVyIG9ubHlJblN0YXRlKFN0YXRlIHN0YXRlKXsgaWYoc3RhdGUgIT0gY3VycmVudFN0YXRlKSB0aHJvdzsgXzsgfQoKLy8vIEV2ZW50czoKICAgIGV2ZW50IExvZ0J1eShhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgTG9nQnVybihhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgdmFsdWUpOwogICAgZXZlbnQgTG9nU3RhdGVTd2l0Y2goU3RhdGUgbmV3U3RhdGUpOwoKLy8vIEZ1bmN0aW9uczoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yCiAgICAvLy8gQHBhcmFtIF90b2tlbk1hbmFnZXIgVG9rZW4gbWFuYWdlciBhZGRyZXNzLgogICAgZnVuY3Rpb24gUHJlc2FsZVRva2VuKGFkZHJlc3MgX3Rva2VuTWFuYWdlciwgYWRkcmVzcyBfZXNjcm93KSAKICAgIHsKICAgICAgICBpZihfdG9rZW5NYW5hZ2VyPT0wKSB0aHJvdzsKICAgICAgICBpZihfZXNjcm93PT0wKSB0aHJvdzsKCiAgICAgICAgdG9rZW5NYW5hZ2VyID0gX3Rva2VuTWFuYWdlcjsKICAgICAgICBlc2Nyb3cgPSBfZXNjcm93OwogICAgfQoKICAgIGZ1bmN0aW9uIGJ1eVRva2VucyhhZGRyZXNzIF9idXllcikgcHVibGljIHBheWFibGUgb25seUluU3RhdGUoU3RhdGUuUnVubmluZykKICAgIHsKICAgICAgICBpZihtc2cudmFsdWUgPT0gMCkgdGhyb3c7CiAgICAgICAgdWludCBuZXdUb2tlbnMgPSBtc2cudmFsdWUgKiBQUklDRTsKCiAgICAgICAgaWYgKHRvdGFsU3VwcGx5ICsgbmV3VG9rZW5zID4gVE9LRU5fU1VQUExZX0xJTUlUKSB0aHJvdzsKCiAgICAgICAgYmFsYW5jZVtfYnV5ZXJdICs9IG5ld1Rva2VuczsKICAgICAgICB0b3RhbFN1cHBseSArPSBuZXdUb2tlbnM7CgogICAgICAgIExvZ0J1eShfYnV5ZXIsIG5ld1Rva2Vucyk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLgogICAgZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF9vd25lcikgcHVibGljIG9ubHlDcm93ZHNhbGVNYW5hZ2VyIG9ubHlJblN0YXRlKFN0YXRlLk1pZ3JhdGluZykKICAgIHsKICAgICAgICB1aW50IHRva2VucyA9IGJhbGFuY2VbX293bmVyXTsKICAgICAgICBpZih0b2tlbnMgPT0gMCkgdGhyb3c7CgogICAgICAgIGJhbGFuY2VbX293bmVyXSA9IDA7CiAgICAgICAgdG90YWxTdXBwbHkgLT0gdG9rZW5zOwoKICAgICAgICBMb2dCdXJuKF9vd25lciwgdG9rZW5zKTsKCiAgICAgICAgLy8gQXV0b21hdGljYWxseSBzd2l0Y2ggcGhhc2Ugd2hlbiBtaWdyYXRpb24gaXMgZG9uZS4KICAgICAgICBpZih0b3RhbFN1cHBseSA9PSAwKSAKICAgICAgICB7CiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IFN0YXRlLk1pZ3JhdGVkOwogICAgICAgICAgICBMb2dTdGF0ZVN3aXRjaChTdGF0ZS5NaWdyYXRlZCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIHRva2VucyBvd25lZCBieSBnaXZlbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgCiAgICB7CiAgICAgICAgcmV0dXJuIGJhbGFuY2VbX293bmVyXTsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRQcmVzYWxlU3RhdGUoU3RhdGUgX25leHRTdGF0ZSkgcHVibGljIG9ubHlUb2tlbk1hbmFnZXIKICAgIHsKICAgICAgICAvLyBJbml0IC0+IFJ1bm5pbmcKICAgICAgICAvLyBSdW5uaW5nIC0+IFBhdXNlZAogICAgICAgIC8vIFJ1bm5pbmcgLT4gTWlncmF0aW5nCiAgICAgICAgLy8gUGF1c2VkIC0+IFJ1bm5pbmcKICAgICAgICAvLyBQYXVzZWQgLT4gTWlncmF0aW5nCiAgICAgICAgLy8gTWlncmF0aW5nIC0+IE1pZ3JhdGVkCiAgICAgICAgYm9vbCBjYW5Td2l0Y2hTdGF0ZQogICAgICAgICAgICAgPSAgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5Jbml0ICYmIF9uZXh0U3RhdGUgPT0gU3RhdGUuUnVubmluZykKICAgICAgICAgICAgIHx8IChjdXJyZW50U3RhdGUgPT0gU3RhdGUuUnVubmluZyAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlBhdXNlZCkKICAgICAgICAgICAgIC8vIHN3aXRjaCB0byBtaWdyYXRpb24gcGhhc2Ugb25seSBpZiBjcm93ZHNhbGUgbWFuYWdlciBpcyBzZXQKICAgICAgICAgICAgIHx8ICgoY3VycmVudFN0YXRlID09IFN0YXRlLlJ1bm5pbmcgfHwgY3VycmVudFN0YXRlID09IFN0YXRlLlBhdXNlZCkKICAgICAgICAgICAgICAgICAmJiBfbmV4dFN0YXRlID09IFN0YXRlLk1pZ3JhdGluZwogICAgICAgICAgICAgICAgICYmIGNyb3dkc2FsZU1hbmFnZXIgIT0gMHgwKQogICAgICAgICAgICAgfHwgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5QYXVzZWQgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5SdW5uaW5nKQogICAgICAgICAgICAgLy8gc3dpdGNoIHRvIG1pZ3JhdGVkIG9ubHkgaWYgZXZlcnl0aW5nIGlzIG1pZ3JhdGVkCiAgICAgICAgICAgICB8fCAoY3VycmVudFN0YXRlID09IFN0YXRlLk1pZ3JhdGluZyAmJiBfbmV4dFN0YXRlID09IFN0YXRlLk1pZ3JhdGVkCiAgICAgICAgICAgICAgICAgJiYgdG90YWxTdXBwbHkgPT0gMCk7CgogICAgICAgIGlmKCFjYW5Td2l0Y2hTdGF0ZSkgdGhyb3c7CgogICAgICAgIGN1cnJlbnRTdGF0ZSA9IF9uZXh0U3RhdGU7CiAgICAgICAgTG9nU3RhdGVTd2l0Y2goX25leHRTdGF0ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcigpIHB1YmxpYyBvbmx5VG9rZW5NYW5hZ2VyCiAgICB7CiAgICAgICAgaWYodGhpcy5iYWxhbmNlID4gMCkgCiAgICAgICAgewogICAgICAgICAgICBpZighZXNjcm93LnNlbmQodGhpcy5iYWxhbmNlKSkgdGhyb3c7CiAgICAgICAgfQogICAgfQoKLy8vIFNldHRlcnMvZ2V0dGVycwogICAgZnVuY3Rpb24gc2V0VG9rZW5NYW5hZ2VyKGFkZHJlc3MgX21ncikgcHVibGljIG9ubHlUb2tlbk1hbmFnZXIKICAgIHsKICAgICAgICB0b2tlbk1hbmFnZXIgPSBfbWdyOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENyb3dkc2FsZU1hbmFnZXIoYWRkcmVzcyBfbWdyKSBwdWJsaWMgb25seVRva2VuTWFuYWdlcgogICAgewogICAgICAgIC8vIFlvdSBjYW4ndCBjaGFuZ2UgY3Jvd2RzYWxlIGNvbnRyYWN0IHdoZW4gbWlncmF0aW9uIGlzIGluIHByb2dyZXNzLgogICAgICAgIGlmKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcpIHRocm93OwoKICAgICAgICBjcm93ZHNhbGVNYW5hZ2VyID0gX21ncjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb2tlbk1hbmFnZXIoKWNvbnN0YW50IHJldHVybnMoYWRkcmVzcykKICAgIHsKICAgICAgICByZXR1cm4gdG9rZW5NYW5hZ2VyOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENyb3dkc2FsZU1hbmFnZXIoKWNvbnN0YW50IHJldHVybnMoYWRkcmVzcykKICAgIHsKICAgICAgICByZXR1cm4gY3Jvd2RzYWxlTWFuYWdlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50U3RhdGUoKWNvbnN0YW50IHJldHVybnMoU3RhdGUpCiAgICB7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRQcmljZSgpY29uc3RhbnQgcmV0dXJucyh1aW50KQogICAgewogICAgICAgIHJldHVybiBQUklDRTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRUb3RhbFN1cHBseSgpY29uc3RhbnQgcmV0dXJucyh1aW50KQogICAgewogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsKICAgIH0KCgogICAgLy8gRGVmYXVsdCBmYWxsYmFjayBmdW5jdGlvbgogICAgZnVuY3Rpb24oKSBwYXlhYmxlIAogICAgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyKTsKICAgIH0KfQ=='.
	

]
