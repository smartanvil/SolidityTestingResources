Class {
	#name : #SRT1b3bde49d13aec2d3629be78c341f61fd21a7cc4,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1b3bde49d13aec2d3629be78c341f61fd21a7cc4 >> base64 [
	^ ''.
	

]
