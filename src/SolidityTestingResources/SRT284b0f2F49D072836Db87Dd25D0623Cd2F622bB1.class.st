Class {
	#name : #SRT284b0f2F49D072836Db87Dd25D0623Cd2F622bB1,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT284b0f2F49D072836Db87Dd25D0623Cd2F622bB1 >> base64 [
	^ ''.
	

]
