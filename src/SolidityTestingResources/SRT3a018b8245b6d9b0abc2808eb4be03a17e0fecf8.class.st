Class {
	#name : #SRT3a018b8245b6d9b0abc2808eb4be03a17e0fecf8,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT3a018b8245b6d9b0abc2808eb4be03a17e0fecf8 >> base64 [
	^ ''.
	

]
