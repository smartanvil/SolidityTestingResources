Class {
	#name : #SRT1e2e0b9703d1e6bd3dbbbccf39a8e081969c0448,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1e2e0b9703d1e6bd3dbbbccf39a8e081969c0448 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEFjdXRlIEFuZ2xlIENvaW4gYnkgVFRDMyBMaW1pdGVkLgovLyBBbiBFUkMyMCBzdGFuZGFyZAovLwovLyBhdXRob3I6IFRUQzMgVGVhbQoKY29udHJhY3QgRVJDMjBJbnRlcmZhY2UgewogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfdG90YWxTdXBwbHkpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7CiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsKfQoKY29udHJhY3QgVFRDMyBpcyBFUkMyMEludGVyZmFjZSB7CiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDU7CgogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVFRDMyI7CiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiVFRDMyI7CgogICAgdWludDI1NiBwdWJsaWMgX3RvdGFsU3VwcGx5ID0gMTAgKiogMTQ7IC8vIHRvdGFsIHN1cHBseSBpcyAxMF4xNCB1bml0LCBlcXVpdmFsZW50IHRvIDEwXjkgVFRDMwoKICAgIC8vIE93bmVyIG9mIHRoaXMgY29udHJhY3QKICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwoKICAgIC8vIEJhbGFuY2VzIFRUQzMgZm9yIGVhY2ggYWNjb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgYmFsYW5jZXM7CgogICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudAogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHByaXZhdGUgYWxsb3dlZDsKCiAgICAvLyBMaXN0IG9mIGFwcHJvdmVkIGludmVzdG9ycwogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgYXBwcm92ZWRJbnZlc3Rvckxpc3Q7CgogICAgLy8gZGVwb3NpdAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHByaXZhdGUgZGVwb3NpdDsKCgogICAgLy8gdG90YWxUb2tlblNvbGQKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsVG9rZW5Tb2xkID0gMDsKCgogICAgLyoqCiAgICAgKiBAZGV2IEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrLgogICAgICovCiAgICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7CiAgICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KSB7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICAgIH0KICAgICAgXzsKICAgIH0KCgoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yCiAgICBmdW5jdGlvbiBUVEMzKCkKICAgICAgICBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7CiAgICB9CgogICAgLy8vIEBkZXYgR2V0cyB0b3RhbFN1cHBseQogICAgLy8vIEByZXR1cm4gVG90YWwgc3VwcGx5CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpCiAgICAgICAgcHVibGljCiAgICAgICAgY29uc3RhbnQKICAgICAgICByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIF90b3RhbFN1cHBseTsKICAgIH0KCgoKCgogICAgLy8vIEBkZXYgR2V0cyBhY2NvdW50J3MgYmFsYW5jZQogICAgLy8vIEBwYXJhbSBfYWRkciBBZGRyZXNzIG9mIHRoZSBhY2NvdW50CiAgICAvLy8gQHJldHVybiBBY2NvdW50IGJhbGFuY2UKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9hZGRyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfYWRkcl07CiAgICB9CgogICAgLy8vIEBkZXYgY2hlY2sgYWRkcmVzcyBpcyBhcHByb3ZlZCBpbnZlc3RvcgogICAgLy8vIEBwYXJhbSBfYWRkciBhZGRyZXNzCiAgICBmdW5jdGlvbiBpc0FwcHJvdmVkSW52ZXN0b3IoYWRkcmVzcyBfYWRkcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXR1cm4gYXBwcm92ZWRJbnZlc3Rvckxpc3RbX2FkZHJdOwogICAgfQoKICAgIC8vLyBAZGV2IGdldCBFVEggZGVwb3NpdAogICAgLy8vIEBwYXJhbSBfYWRkciBhZGRyZXNzIGdldCBkZXBvc2l0CiAgICAvLy8gQHJldHVybiBhbW91bnQgZGVwb3NpdCBvZiBhbiBidXllcgogICAgZnVuY3Rpb24gZ2V0RGVwb3NpdChhZGRyZXNzIF9hZGRyKQogICAgICAgIHB1YmxpYwogICAgICAgIGNvbnN0YW50CiAgICAgICAgcmV0dXJucyh1aW50MjU2KXsKICAgICAgICByZXR1cm4gZGVwb3NpdFtfYWRkcl07Cn0KCgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRoZSBiYWxhbmNlIGZyb20gbXNnLnNlbmRlciB0byBhbiBhY2NvdW50CiAgICAvLy8gQHBhcmFtIF90byBSZWNpcGllbnQgYWRkcmVzcwogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRyYW5zZmVyZWQgYW1vdW50IGluIHVuaXQKICAgIC8vLyBAcmV0dXJuIFRyYW5zZmVyIHN0YXR1cwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkKICAgICAgICBwdWJsaWMKCiAgICAgICAgcmV0dXJucyAoYm9vbCkgewogICAgICAgIC8vIGlmIHNlbmRlcidzIGJhbGFuY2UgaGFzIGVub3VnaCB1bml0IGFuZCBhbW91bnQgPj0gMCwKICAgICAgICAvLyAgICAgIGFuZCB0aGUgc3VtIGlzIG5vdCBvdmVyZmxvdywKICAgICAgICAvLyB0aGVuIGRvIHRyYW5zZmVyCiAgICAgICAgaWYgKCAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCkgJiYKICAgICAgICAgICAgIChfYW1vdW50ID49IDApICYmCiAgICAgICAgICAgICAoYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSApIHsKCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bwogICAgLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQKICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlCiAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzCiAgICAvLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQogICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgdWludDI1NiBfYW1vdW50CiAgICApCiAgICBwdWJsaWMKCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQgJiYgX2Ftb3VudCA+IDApIHsKICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7CiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsKICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpCiAgICAgICAgcHVibGljCgogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgICAgIHJlcXVpcmUoKF9hbW91bnQgPT0gMCkgfHwgKGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApKTsKICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7CiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIGdldCBhbGxvd2FuY2UKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikKICAgICAgICBwdWJsaWMKICAgICAgICBjb25zdGFudAogICAgICAgIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGV7CiAgICAgICAgcmV2ZXJ0KCk7CiAgICB9Cgp9'.
	

]
