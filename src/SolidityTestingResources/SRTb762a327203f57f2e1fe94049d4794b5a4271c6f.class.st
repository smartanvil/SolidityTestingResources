Class {
	#name : #SRTb762a327203f57f2e1fe94049d4794b5a4271c6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb762a327203f57f2e1fe94049d4794b5a4271c6f >> base64 [
	^ ''.
	

]
