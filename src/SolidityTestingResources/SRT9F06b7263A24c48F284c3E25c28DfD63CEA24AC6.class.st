Class {
	#name : #SRT9F06b7263A24c48F284c3E25c28DfD63CEA24AC6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT9F06b7263A24c48F284c3E25c28DfD63CEA24AC6 >> base64 [
	^ ''.
	

]
