Class {
	#name : #SRT683e3dfb9354f1a2e491ad23c57304b647f8d693,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT683e3dfb9354f1a2e491ad23c57304b647f8d693 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTU7Cgpjb250cmFjdCBhZG1pbmVkIHsKICAgIGFkZHJlc3MgcHVibGljIGFkbWluOwoJCiAgICBmdW5jdGlvbiBhZG1pbmVkKCl7CiAgICAgICAgYWRtaW4gPSBtc2cuc2VuZGVyOwogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlBZG1pbigpewogICAgICAgIC8vIGlmKG1zZy5zZW5kZXIgIT0gYWRtaW4pIHRocm93OwogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBhZG1pbik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlckFkbWluc2hpcChhZGRyZXNzIG5ld0FkbWluKSBvbmx5QWRtaW4gewogICAgICAgIGFkbWluID0gbmV3QWRtaW47CiAgICB9Cgp9Cgpjb250cmFjdCBCaXRzYWxlRVJDMjAgewoKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsKICAgIC8vIGJhbGFuY2VPZlthZGRyZXNzXSA9IDU7CiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gIkJpdHNhbGVFUkMyMCB2MS4wIjsKICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJCaXRzYWxlRVJDMjAiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQlNMIjsKICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDg7IAogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAxMjAwMDAwMDAwIDsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwoKICAgIGZ1bmN0aW9uIEJpdHNhbGVFUkMyMCgpewogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDEyMDAwMDAwMDA7CiAgICAKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpewogICAgICAgIC8vIGlmKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7CiAgICAgICAgLy8gaWYoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlKTsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VPZltfdG9dKTsKICAgICAgICAvL2lmKGFkbWluKQoKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsKICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgLy8gaWYoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgdGhyb3c7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7CiAgICAgICAgLy8gaWYoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy8gaWYoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgdGhyb3c7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPCBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9Cn0KCmNvbnRyYWN0IEJpdHNhbGUgaXMgYWRtaW5lZCwgQml0c2FsZUVSQzIwewoKICAgIHVpbnQyNTYgbWluaW11bUJhbGFuY2VGb3JBY2NvdW50cyA9IDUgZmlubmV5OwogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOwogICAgdWludDI1NiBwdWJsaWMgYnV5UHJpY2U7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBmcm96ZW5BY2NvdW50OwoKICAgIGV2ZW50IEZyb3plbkZ1bmQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsKCiAgICBmdW5jdGlvbiBCaXRzYWxlKCkgQml0c2FsZUVSQzIwICgpewogICAgICAgIGFkbWluID0gbXNnLnNlbmRlcjsKICAgICAgICBiYWxhbmNlT2ZbYWRtaW5dID0gMTIwMDAwMDAwMDsKICAgICAgICB0b3RhbFN1cHBseSA9IDEyMDAwMDAwMDA7ICAgIAogICAgfQoKICAgIGZ1bmN0aW9uIG1pbnRUb2tlbihhZGRyZXNzIHRhcmdldCwgdWludDI1NiBtaW50ZWRBbW91bnQpIG9ubHlBZG1pbnsKICAgICAgICBiYWxhbmNlT2ZbdGFyZ2V0XSArPSBtaW50ZWRBbW91bnQ7CiAgICAgICAgdG90YWxTdXBwbHkgKz0gbWludGVkQW1vdW50OwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBvbmx5QWRtaW57CiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOwogICAgICAgIEZyb3plbkZ1bmQodGFyZ2V0LCBmcmVlemUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSl7CiAgICAgICAgaWYobXNnLnNlbmRlci5iYWxhbmNlIDwgbWluaW11bUJhbGFuY2VGb3JBY2NvdW50cykKICAgICAgICBzZWxsKChtaW5pbXVtQmFsYW5jZUZvckFjY291bnRzIC0gbXNnLnNlbmRlci5iYWxhbmNlKS9zZWxsUHJpY2UpOwoKICAgICAgICAvLyBpZihmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSB0aHJvdzsKICAgICAgICByZXF1aXJlKCFmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKTsKICAgICAgICAvLyBpZihiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHRocm93OwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IF92YWx1ZSk7CiAgICAgICAgLy8gaWYoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7CiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7CiAgICAgICAgLy9pZihhZG1pbikKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7CiAgICAgICAgLy8gaWYoZnJvemVuQWNjb3VudFtfZnJvbV0pIHRocm93OwogICAgICAgIHJlcXVpcmUoIWZyb3plbkFjY291bnRbX2Zyb21dKTsKICAgICAgICAvLyBpZihiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfZnJvbV0gPj0gX3ZhbHVlKTsKICAgICAgICAvLyBpZihiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VPZltfdG9dKTsKICAgICAgICAvLyBpZihfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKTsKICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9CgogICAgZnVuY3Rpb24gc2V0UHJpY2VzKHVpbnQyNTYgbmV3U2VsbFByaWNlLCB1aW50MjU2IG5ld0J1eVByaWNlKSBvbmx5QWRtaW57CiAgICAgICAgc2VsbFByaWNlID0gbmV3U2VsbFByaWNlOwogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7CiAgICB9CgogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7CiAgICAgICAgdWludDI1NiBhbW91bnQgPSAobXNnLnZhbHVlLygxIGV0aGVyKSkgLyBidXlQcmljZTsKICAgICAgICAvLyBpZihiYWxhbmNlT2ZbdGhpc10gPCBhbW91bnQpIHRocm93OwogICAgICAgIHJlcXVpcmUoYmFsYW5jZU9mW3RoaXNdID49IGFtb3VudCk7CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbdGhpc10gLT0gYW1vdW50OwogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IGFtb3VudCl7CiAgICAgICAgLy8gaWYoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgYW1vdW50KSB0aHJvdzsKICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA+PSBhbW91bnQpOwogICAgICAgIGJhbGFuY2VPZlt0aGlzXSArPWFtb3VudDsKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OwogICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQoYW1vdW50ICogc2VsbFByaWNlICogMSBldGhlcikpewogICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0aGlzLCBhbW91bnQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnaXZlQmxvY2tyZXdhcmQoKXsKICAgICAgICBiYWxhbmNlT2ZbYmxvY2suY29pbmJhc2VdICs9IDE7CiAgICB9CgogICAgYnl0ZXMzMiBwdWJsaWMgY3VycmVudENoYWxsZW5nZTsKICAgIHVpbnQgcHVibGljIHRpbWVPZkxhc3RQcm9vZjsKICAgIHVpbnQgcHVibGljIGRpZmZpY3VsdHkgPSAxMCoqMzI7CgogICAgZnVuY3Rpb24gcHJvb2ZPZldvcmsodWludCBub25jZSl7CiAgICAgICAgYnl0ZXM4IG4gPSBieXRlczgoc2hhMyhub25jZSwgY3VycmVudENoYWxsZW5nZSkpOwoKICAgICAgICAvLyBpZihuIDwgYnl0ZXM4KGRpZmZpY3VsdHkpKSB0aHJvdzsKICAgICAgICByZXF1aXJlKG4gPj0gYnl0ZXM4KGRpZmZpY3VsdHkpKTsKICAgICAgICB1aW50IHRpbWVTaW5jZUxhc3RCbG9jayA9IChub3cgLSB0aW1lT2ZMYXN0UHJvb2YpOwogICAgICAgIC8vIGlmKHRpbWVTaW5jZUxhc3RCbG9jayA8IDUgc2Vjb25kcykgdGhyb3c7CiAgICAgICAgcmVxdWlyZSh0aW1lU2luY2VMYXN0QmxvY2sgPj0gNSBzZWNvbmRzKTsKCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IHRpbWVTaW5jZUxhc3RCbG9jayAvIDYwIHNlY29uZHM7CiAgICAgICAgZGlmZmljdWx0eSA9IGRpZmZpY3VsdHkgKiAxMCBtaW51dGVzIC8gdGltZU9mTGFzdFByb29mICsgMTsKICAgICAgICB0aW1lT2ZMYXN0UHJvb2YgPSBub3c7CiAgICAgICAgY3VycmVudENoYWxsZW5nZSA9IHNoYTMobm9uY2UsIGN1cnJlbnRDaGFsbGVuZ2UsIGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXItMSkpOwogICAgIH0KCgp9'.
	

]
