Class {
	#name : #SRT2efaf60bbd75b9430a8446bd58d12fbc3f5dbb71,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT2efaf60bbd75b9430a8446bd58d12fbc3f5dbb71 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLy9FdGhlck1pbmVyYWxzCgovLy8gQHRpdGxlIEludGVyZmFjZSBmb3IgY29udHJhY3RzIGNvbmZvcm1pbmcgdG8gRVJDLTcyMTogTm9uLUZ1bmdpYmxlIFRva2VucwovLy8gQGF1dGhvciBEaWV0ZXIgU2hpcmxleSA8PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImJlZGFkYmNhZGJmZWRmYzZkN2QxZDNjNGRiZDA5MGRkZDEiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L2E+PiAoaHR0cHM6Ly9naXRodWIuY29tL2RldGUpCmNvbnRyYWN0IEVSQzcyMSB7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiBvd25lck9mKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYyB2aWV3IHJldHVybnMgKGFkZHJlc3MgYWRkcik7CiAgICBmdW5jdGlvbiB0YWtlT3duZXJzaGlwKHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBwdWJsaWM7CgogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB0b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IHRva2VuSWQpOwp9Cgpjb250cmFjdCBFdGhlck1pbmVyYWxzIGlzIEVSQzcyMSB7CgogIC8qKiogRVZFTlRTICoqKi8KICBldmVudCBCaXJ0aCh1aW50MjU2IHRva2VuSWQsIGJ5dGVzMzIgbmFtZSwgYWRkcmVzcyBvd25lcik7CiAgZXZlbnQgVG9rZW5Tb2xkKHVpbnQyNTYgdG9rZW5JZCwgdWludDI1NiBvbGRQcmljZSwgdWludDI1NiBuZXdQcmljZSwgYWRkcmVzcyBwcmV2T3duZXIsIGFkZHJlc3Mgd2lubmVyLCBieXRlczMyIG5hbWUpOwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB0b2tlbklkKTsKCiAgLyoqKiBTVFJVQ1RTICoqKi8KICBzdHJ1Y3QgTWluZXJhbCB7CiAgICBieXRlczMyIG5hbWU7CiAgICBhZGRyZXNzIG93bmVyOwogICAgdWludDI1NiBwcmljZTsKICAgIHVpbnQyNTYgbGFzdF9wcmljZTsKICAgIGFkZHJlc3MgYXBwcm92ZV90cmFuc2Zlcl90bzsKICB9CgogIC8qKiogQ09OU1RBTlRTICoqKi8KICBzdHJpbmcgcHVibGljIGNvbnN0YW50IE5BTUUgPSAiRXRoZXJNaW5lcmFscyI7CiAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBTWU1CT0wgPSAiTUlORVJBTCI7CiAgCiAgdWludDI1NiBwcml2YXRlIHN0YXJ0aW5nUHJpY2UgPSAwLjAxIGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBmaXJzdFN0ZXBMaW1pdCA9ICAwLjE1IGV0aGVyOwogIHVpbnQyNTYgcHJpdmF0ZSBzZWNvbmRTdGVwTGltaXQgPSAwLjU2NDk1NyBldGhlcjsKICAKICBib29sIHB1YmxpYyBnYW1lT3BlbiA9IGZhbHNlOwoKICAvKioqIFNUT1JBR0UgKioqLwogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBvd25lckNvdW50OwogIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIGxhc3RCdXllcjsKCiAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICBtYXBwaW5nICh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyBleHRyYTsKICAKICB1aW50MjU2IG1pbmVyYWxfY291bnQ7CiAKICBtYXBwaW5nICh1aW50MjU2ID0+IE1pbmVyYWwpIHByaXZhdGUgbWluZXJhbHM7CgogIC8qKiogQUNDRVNTIE1PRElGSUVSUyAqKiovCiAgbW9kaWZpZXIgb25seUNFTygpIHsgcmVxdWlyZShtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MpOyBfOyB9CgogIC8qKiogQUNDRVNTIE1PRElGSUVTICoqKi8KICBmdW5jdGlvbiBzZXRDRU8oYWRkcmVzcyBfbmV3Q0VPKSBwdWJsaWMgb25seUNFTyB7CiAgICByZXF1aXJlKF9uZXdDRU8gIT0gYWRkcmVzcygwKSk7CiAgICBjZW9BZGRyZXNzID0gX25ld0NFTzsKICB9CgogIGZ1bmN0aW9uIHNldExhc3QodWludDI1NiBfaWQsIGFkZHJlc3MgX25ld0V4dHJhKSBwdWJsaWMgb25seUNFTyB7CiAgICByZXF1aXJlKF9uZXdFeHRyYSAhPSBhZGRyZXNzKDApKTsKICAgIGxhc3RCdXllcltfaWRdID0gX25ld0V4dHJhOwogIH0KCiAgLyoqKiBERUZBVUxUIE1FVEhPRFMgKioqLwogIGZ1bmN0aW9uIHN5bWJvbCgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gU1lNQk9MOyB9CiAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gTkFNRTsgfQogIGZ1bmN0aW9uIGltcGxlbWVudHNFUkM3MjEoKSBwdWJsaWMgcHVyZSByZXR1cm5zIChib29sKSB7IHJldHVybiB0cnVlOyB9CgogIC8qKiogQ09OU1RSVUNUT1IgKioqLwogIGZ1bmN0aW9uIEV0aGVyTWluZXJhbHMoKSBwdWJsaWMgewogICAgY2VvQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICBsYXN0QnV5ZXJbMV0gPSBtc2cuc2VuZGVyOwogICAgbGFzdEJ1eWVyWzJdID0gbXNnLnNlbmRlcjsKICAgIGxhc3RCdXllclszXSA9IG1zZy5zZW5kZXI7CiAgICBsYXN0QnV5ZXJbNF0gPSBtc2cuc2VuZGVyOwogICAgbGFzdEJ1eWVyWzVdID0gbXNnLnNlbmRlcjsKICAgIGxhc3RCdXllcls2XSA9IG1zZy5zZW5kZXI7CiAgICBsYXN0QnV5ZXJbN10gPSBtc2cuc2VuZGVyOwogICAgbGFzdEJ1eWVyWzhdID0gbXNnLnNlbmRlcjsKICAgIGxhc3RCdXllcls5XSA9IG1zZy5zZW5kZXI7CiAgfQoKICAvKioqIElOVEVSRkFDRSBNRVRIT0RTICoqKi8KCiAgZnVuY3Rpb24gY3JlYXRlTWluZXJhbChieXRlczMyIF9uYW1lLCB1aW50MjU2IF9wcmljZSkgcHVibGljIG9ubHlDRU8gewogICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IGFkZHJlc3MoMCkpOwogICAgX2NyZWF0ZV9taW5lcmFsKF9uYW1lLCBhZGRyZXNzKHRoaXMpLCBfcHJpY2UsIDApOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlUHJvbW9NaW5lcmFsKGJ5dGVzMzIgX25hbWUsIGFkZHJlc3MgX293bmVyLCB1aW50MjU2IF9wcmljZSwgdWludDI1NiBfbGFzdF9wcmljZSkgcHVibGljIG9ubHlDRU8gewogICAgcmVxdWlyZShtc2cuc2VuZGVyICE9IGFkZHJlc3MoMCkpOwogICAgcmVxdWlyZShfb3duZXIgIT0gYWRkcmVzcygwKSk7CiAgICBfY3JlYXRlX21pbmVyYWwoX25hbWUsIF9vd25lciwgX3ByaWNlLCBfbGFzdF9wcmljZSk7CiAgfQoKICBmdW5jdGlvbiBvcGVuR2FtZSgpIHB1YmxpYyBvbmx5Q0VPIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsKICAgIGdhbWVPcGVuID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiB0b3RhbCkgewogICAgcmV0dXJuIG1pbmVyYWxfY291bnQ7CiAgfQoKICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgewogICAgcmV0dXJuIG93bmVyQ291bnRbX293bmVyXTsKICB9CiAgZnVuY3Rpb24gcHJpY2VPZih1aW50MjU2IF9taW5lcmFsX2lkKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHByaWNlKSB7CiAgICByZXR1cm4gbWluZXJhbHNbX21pbmVyYWxfaWRdLnByaWNlOwogIH0KCiAgZnVuY3Rpb24gZ2V0TWluZXJhbCh1aW50MjU2IF9taW5lcmFsX2lkKSBwdWJsaWMgdmlldyByZXR1cm5zICgKICAgIHVpbnQyNTYgaWQsCiAgICBieXRlczMyIG1pbmVyYWxfbmFtZSwKICAgIGFkZHJlc3Mgb3duZXIsCiAgICB1aW50MjU2IHByaWNlLAogICAgdWludDI1NiBsYXN0X3ByaWNlCiAgKSB7CiAgICBpZCA9IF9taW5lcmFsX2lkOwogICAgbWluZXJhbF9uYW1lID0gbWluZXJhbHNbX21pbmVyYWxfaWRdLm5hbWU7CiAgICBvd25lciA9IG1pbmVyYWxzW19taW5lcmFsX2lkXS5vd25lcjsKICAgIHByaWNlID0gbWluZXJhbHNbX21pbmVyYWxfaWRdLnByaWNlOwogICAgbGFzdF9wcmljZSA9IG1pbmVyYWxzW19taW5lcmFsX2lkXS5sYXN0X3ByaWNlOwogIH0KICAKICBmdW5jdGlvbiBnZXRNaW5lcmFscygpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTZbXSwgYnl0ZXMzMltdLCBhZGRyZXNzW10sIHVpbnQyNTZbXSkgewogICAgdWludDI1NltdIG1lbW9yeSBpZHMgPSBuZXcgdWludDI1NltdKG1pbmVyYWxfY291bnQpOwogICAgYnl0ZXMzMltdIG1lbW9yeSBuYW1lcyA9IG5ldyBieXRlczMyW10obWluZXJhbF9jb3VudCk7CiAgICBhZGRyZXNzW10gbWVtb3J5IG93bmVycyA9IG5ldyBhZGRyZXNzW10obWluZXJhbF9jb3VudCk7CiAgICB1aW50MjU2W10gbWVtb3J5IHByaWNlcyA9IG5ldyB1aW50MjU2W10obWluZXJhbF9jb3VudCk7CiAgICBmb3IodWludDI1NiBfaWQgPSAwOyBfaWQgPCBtaW5lcmFsX2NvdW50OyBfaWQrKyl7CiAgICAgIGlkc1tfaWRdID0gX2lkOwogICAgICBuYW1lc1tfaWRdID0gbWluZXJhbHNbX2lkXS5uYW1lOwogICAgICBvd25lcnNbX2lkXSA9IG1pbmVyYWxzW19pZF0ub3duZXI7CiAgICAgIHByaWNlc1tfaWRdID0gbWluZXJhbHNbX2lkXS5wcmljZTsKICAgIH0KICAgIHJldHVybiAoaWRzLCBuYW1lcywgb3duZXJzLCBwcmljZXMpOwogIH0KICAKICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgcHVibGljIG9ubHlDRU8gdmlldyByZXR1cm5zKHVpbnQpewogICAgICByZXR1cm4gYWRkcmVzcyh0aGlzKS5iYWxhbmNlOwogIH0KICAKCiAgCiAgZnVuY3Rpb24gcHVyY2hhc2UodWludDI1NiBfbWluZXJhbF9pZCkgcHVibGljIHBheWFibGUgewogICAgcmVxdWlyZShnYW1lT3BlbiA9PSB0cnVlKTsKICAgIE1pbmVyYWwgc3RvcmFnZSBtaW5lcmFsID0gbWluZXJhbHNbX21pbmVyYWxfaWRdOwoKICAgIHJlcXVpcmUobWluZXJhbC5vd25lciAhPSBtc2cuc2VuZGVyKTsKICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsgIAogICAgcmVxdWlyZShtc2cudmFsdWUgPj0gbWluZXJhbC5wcmljZSk7CgogICAgdWludDI1NiBleGNlc3MgPSBTYWZlTWF0aC5zdWIobXNnLnZhbHVlLCBtaW5lcmFsLnByaWNlKTsKICAgIHVpbnQyNTYgcmV3YXJkID0gdWludDI1NihTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKG1pbmVyYWwucHJpY2UsIDkwKSwgMTAwKSk7CiAgCgogICAgaWYobWluZXJhbC5vd25lciAhPSBhZGRyZXNzKHRoaXMpKXsKICAgICAgbWluZXJhbC5vd25lci50cmFuc2ZlcihyZXdhcmQpOwogICAgfQogICAgCiAgICAKICAgIG1pbmVyYWwubGFzdF9wcmljZSA9IG1pbmVyYWwucHJpY2U7CiAgICBhZGRyZXNzIF9vbGRfb3duZXIgPSBtaW5lcmFsLm93bmVyOwogICAgCiAgICBpZiAobWluZXJhbC5wcmljZSA8IGZpcnN0U3RlcExpbWl0KSB7CiAgICAgIC8vIGZpcnN0IHN0YWdlCiAgICAgIG1pbmVyYWwucHJpY2UgPSBTYWZlTWF0aC5kaXYoU2FmZU1hdGgubXVsKG1pbmVyYWwucHJpY2UsIDIwMCksIDkwKTsKICAgIH0gZWxzZSBpZiAobWluZXJhbC5wcmljZSA8IHNlY29uZFN0ZXBMaW1pdCkgewogICAgICAvLyBzZWNvbmQgc3RhZ2UKICAgICAgbWluZXJhbC5wcmljZSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwobWluZXJhbC5wcmljZSwgMTE4KSwgOTApOwogICAgfSBlbHNlIHsKICAgICAgLy8gdGhpcmQgc3RhZ2UKICAgICAgbWluZXJhbC5wcmljZSA9IFNhZmVNYXRoLmRpdihTYWZlTWF0aC5tdWwobWluZXJhbC5wcmljZSwgMTEzKSwgOTApOwogICAgfQogICAgbWluZXJhbC5vd25lciA9IG1zZy5zZW5kZXI7CgogICAgZW1pdCBUcmFuc2Zlcihfb2xkX293bmVyLCBtaW5lcmFsLm93bmVyLCBfbWluZXJhbF9pZCk7CiAgICBlbWl0IFRva2VuU29sZChfbWluZXJhbF9pZCwgbWluZXJhbC5sYXN0X3ByaWNlLCBtaW5lcmFsLnByaWNlLCBfb2xkX293bmVyLCBtaW5lcmFsLm93bmVyLCBtaW5lcmFsLm5hbWUpOwoKICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXhjZXNzKTsKICB9CgogIGZ1bmN0aW9uIHBheW91dCgpIHB1YmxpYyBvbmx5Q0VPIHsKICAgIGNlb0FkZHJlc3MudHJhbnNmZXIoYWRkcmVzcyh0aGlzKS5iYWxhbmNlKTsKICB9CgogIGZ1bmN0aW9uIHRva2Vuc09mT3duZXIoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnModWludDI1NltdIG93bmVyVG9rZW5zKSB7CiAgICB1aW50MjU2IHRva2VuQ291bnQgPSBiYWxhbmNlT2YoX293bmVyKTsKICAgIGlmICh0b2tlbkNvdW50ID09IDApIHsKICAgICAgcmV0dXJuIG5ldyB1aW50MjU2W10oMCk7CiAgICB9IGVsc2UgewogICAgICB1aW50MjU2W10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50MjU2W10odG9rZW5Db3VudCk7CiAgICAgIHVpbnQyNTYgcmVzdWx0SW5kZXggPSAwOwogICAgICBmb3IgKHVpbnQyNTYgbWluZXJhbElkID0gMDsgbWluZXJhbElkIDw9IHRvdGFsU3VwcGx5KCk7IG1pbmVyYWxJZCsrKSB7CiAgICAgICAgaWYgKG1pbmVyYWxzW21pbmVyYWxJZF0ub3duZXIgPT0gX293bmVyKSB7CiAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gbWluZXJhbElkOwogICAgICAgICAgcmVzdWx0SW5kZXgrKzsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9CgogIC8qKiogRVJDLTcyMSBjb21wbGlhbmNlLiAqKiovCgogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX21pbmVyYWxfaWQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWluZXJhbHNbX21pbmVyYWxfaWRdLm93bmVyKTsKICAgIG1pbmVyYWxzW19taW5lcmFsX2lkXS5hcHByb3ZlX3RyYW5zZmVyX3RvID0gX3RvOwogICAgZW1pdCBBcHByb3ZhbChtc2cuc2VuZGVyLCBfdG8sIF9taW5lcmFsX2lkKTsKICB9CiAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF9taW5lcmFsX2lkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKXsKICAgIG93bmVyID0gbWluZXJhbHNbX21pbmVyYWxfaWRdLm93bmVyOwogICAgcmVxdWlyZShvd25lciAhPSBhZGRyZXNzKDApKTsKICB9CiAgZnVuY3Rpb24gdGFrZU93bmVyc2hpcCh1aW50MjU2IF9taW5lcmFsX2lkKSBwdWJsaWMgewogICAgYWRkcmVzcyBvbGRPd25lciA9IG1pbmVyYWxzW19taW5lcmFsX2lkXS5vd25lcjsKICAgIHJlcXVpcmUobXNnLnNlbmRlciAhPSBhZGRyZXNzKDApKTsKICAgIHJlcXVpcmUobWluZXJhbHNbX21pbmVyYWxfaWRdLmFwcHJvdmVfdHJhbnNmZXJfdG8gPT0gbXNnLnNlbmRlcik7CiAgICBfdHJhbnNmZXIob2xkT3duZXIsIG1zZy5zZW5kZXIsIF9taW5lcmFsX2lkKTsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX21pbmVyYWxfaWQpIHB1YmxpYyB7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgIT0gYWRkcmVzcygwKSk7CiAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbWluZXJhbHNbX21pbmVyYWxfaWRdLm93bmVyKTsKICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9taW5lcmFsX2lkKTsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9taW5lcmFsX2lkKSBwdWJsaWMgewogICAgcmVxdWlyZShfZnJvbSA9PSBtaW5lcmFsc1tfbWluZXJhbF9pZF0ub3duZXIpOwogICAgcmVxdWlyZShtaW5lcmFsc1tfbWluZXJhbF9pZF0uYXBwcm92ZV90cmFuc2Zlcl90byA9PSBfdG8pOwogICAgcmVxdWlyZShfdG8gIT0gYWRkcmVzcygwKSk7CiAgICBfdHJhbnNmZXIoX2Zyb20sIF90bywgX21pbmVyYWxfaWQpOwogIH0KIAogIGZ1bmN0aW9uIGNyZWF0ZUFsbFRva2VucygpIHB1YmxpYyBvbmx5Q0VPewogICAgY3JlYXRlTWluZXJhbCgiRW1lcmFsZCIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIk9wYWwiLCAxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBjcmVhdGVNaW5lcmFsKCJEaWFtb25kIiwgMTAwMDAwMDAwMDAwMDAwMDApOwogICAgY3JlYXRlTWluZXJhbCgiQmlzbXV0aCIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIkFtZXRoeXN0IiwgMTAwMDAwMDAwMDAwMDAwMDApOwogICAgY3JlYXRlTWluZXJhbCgiR29sZCIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIkZsdW9yaXRlIiwgMTAwMDAwMDAwMDAwMDAwMDApOwogICAgY3JlYXRlTWluZXJhbCgiUnVieSIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIlNhcHBoaXJlIiwgMTAwMDAwMDAwMDAwMDAwMDApOwogICAgY3JlYXRlTWluZXJhbCgiUGFzY29pdGUiLCAxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBjcmVhdGVNaW5lcmFsKCJLYXJwYXRpdGUiLCAxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBjcmVhdGVNaW5lcmFsKCJVdmFyb3ZpdGUiLCAxMDAwMDAwMDAwMDAwMDAwMCk7CiAgICBjcmVhdGVNaW5lcmFsKCJLcnlwdG9uaXRlIiwgMTAwMDAwMDAwMDAwMDAwMDApOwogICAgY3JlYXRlTWluZXJhbCgiR29vZCBvbCcgUm9jayIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIk1hbGFjaGl0ZSIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIlNpbHZlciIsIDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIGNyZWF0ZU1pbmVyYWwoIkJ1cm1lc2UgVG91cm1hbGluZSIgLDEwMDAwMDAwMDAwMDAwMDAwKTsKICAgIH0KCiAgLyoqKiBQUklWQVRFIE1FVEhPRFMgKioqLwoKICBmdW5jdGlvbiBfY3JlYXRlX21pbmVyYWwoYnl0ZXMzMiBfbmFtZSwgYWRkcmVzcyBfb3duZXIsIHVpbnQyNTYgX3ByaWNlLCB1aW50MjU2IF9sYXN0X3ByaWNlKSBwcml2YXRlIHsKICAgIC8vIFBhcmFtczogbmFtZSwgb3duZXIsIHByaWNlLCBpc19mb3Jfc2FsZSwgaXNfcHVibGljLCBzaGFyZV9wcmljZSwgaW5jcmVhc2UsIGZlZSwgc2hhcmVfY291bnQsCiAgICBtaW5lcmFsc1ttaW5lcmFsX2NvdW50XSA9IE1pbmVyYWwoewogICAgICBuYW1lOiBfbmFtZSwKICAgICAgb3duZXI6IF9vd25lciwKICAgICAgcHJpY2U6IF9wcmljZSwKICAgICAgbGFzdF9wcmljZTogX2xhc3RfcHJpY2UsCiAgICAgIGFwcHJvdmVfdHJhbnNmZXJfdG86IGFkZHJlc3MoMCkKICAgIH0pOwogICAgCgogICAgCiAgICAKICAgIGVtaXQgQmlydGgobWluZXJhbF9jb3VudCwgX25hbWUsIF9vd25lcik7CiAgICBlbWl0IFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIF9vd25lciwgbWluZXJhbF9jb3VudCk7CiAgICBtaW5lcmFsX2NvdW50Kys7CiAgfQoKICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX21pbmVyYWxfaWQpIHByaXZhdGUgewogICAgbWluZXJhbHNbX21pbmVyYWxfaWRdLm93bmVyID0gX3RvOwogICAgbWluZXJhbHNbX21pbmVyYWxfaWRdLmFwcHJvdmVfdHJhbnNmZXJfdG8gPSBhZGRyZXNzKDApOwogICAgb3duZXJDb3VudFtfZnJvbV0gLT0gMTsKICAgIG93bmVyQ291bnRbX3RvXSArPSAxOwogICAgZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfbWluZXJhbF9pZCk7CiAgfQp9CgpsaWJyYXJ5IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIHJldHVybiBjOwogIH0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcHVyZSByZXR1cm5zICh1aW50MjU2KSB7CiAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgIGFzc2VydChjID49IGEpOwogICAgcmV0dXJuIGM7CiAgfQp9'.
	

]
