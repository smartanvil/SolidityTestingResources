Class {
	#name : #SRT31d4c5be1082a88f2abafea549b6c189c2cf057f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT31d4c5be1082a88f2abafea549b6c189c2cf057f >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgovLyBGaWxlOiBjb250cmFjdHMtb3JpZ2luL0FldGhlckFjY2Vzc0NvbnRyb2wuc29sCgovLy8gQHRpdGxlIEEgZmFjZXQgb2YgQWV0aGVyQ29yZSB0aGF0IG1hbmFnZXMgc3BlY2lhbCBhY2Nlc3MgcHJpdmlsZWdlcy4KLy8vIEBkZXYgU2VlIHRoZSBBZXRoZXJDb3JlIGNvbnRyYWN0IGRvY3VtZW50YXRpb24gdG8gdW5kZXJzdGFuZCBob3cgdGhlIHZhcmlvdXMgY29udHJhY3QgZmFjZXRzIGFyZSBhcnJhbmdlZC4KY29udHJhY3QgQWV0aGVyQWNjZXNzQ29udHJvbCB7CiAgICAvLyBUaGlzIGZhY2V0IGNvbnRyb2xzIGFjY2VzcyBjb250cm9sIGZvciBMYXB1dGEuIFRoZXJlIGFyZSBmb3VyIHJvbGVzIG1hbmFnZWQgaGVyZToKICAgIC8vCiAgICAvLyAgICAgLSBUaGUgQ0VPOiBUaGUgQ0VPIGNhbiByZWFzc2lnbiBvdGhlciByb2xlcyBhbmQgY2hhbmdlIHRoZSBhZGRyZXNzZXMgb2Ygb3VyIGRlcGVuZGVudCBzbWFydAogICAgLy8gICAgICAgICBjb250cmFjdHMuIEl0IGlzIGFsc28gdGhlIG9ubHkgcm9sZSB0aGF0IGNhbiB1bnBhdXNlIHRoZSBzbWFydCBjb250cmFjdC4gSXQgaXMgaW5pdGlhbGx5CiAgICAvLyAgICAgICAgIHNldCB0byB0aGUgYWRkcmVzcyB0aGF0IGNyZWF0ZWQgdGhlIHNtYXJ0IGNvbnRyYWN0IGluIHRoZSBBZXRoZXJDb3JlIGNvbnN0cnVjdG9yLgogICAgLy8KICAgIC8vICAgICAtIFRoZSBDRk86IFRoZSBDRk8gY2FuIHdpdGhkcmF3IGZ1bmRzIGZyb20gQWV0aGVyQ29yZSBhbmQgaXRzIGF1Y3Rpb24gY29udHJhY3RzLgogICAgLy8KICAgIC8vICAgICAtIFRoZSBDT086IFRoZSBDT08gY2FuIHJlbGVhc2UgcHJvcGVydGllcyB0byBhdWN0aW9uLgogICAgLy8KICAgIC8vIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IHRoZXNlIHJvbGVzIGFyZSBkaXN0aW5jdCB3aXRob3V0IG92ZXJsYXAgaW4gdGhlaXIgYWNjZXNzIGFiaWxpdGllcywgdGhlCiAgICAvLyBhYmlsaXRpZXMgbGlzdGVkIGZvciBlYWNoIHJvbGUgYWJvdmUgYXJlIGV4aGF1c3RpdmUuIEluIHBhcnRpY3VsYXIsIHdoaWxlIHRoZSBDRU8gY2FuIGFzc2lnbiBhbnkKICAgIC8vIGFkZHJlc3MgdG8gYW55IHJvbGUsIHRoZSBDRU8gYWRkcmVzcyBpdHNlbGYgZG9lc24ndCBoYXZlIHRoZSBhYmlsaXR5IHRvIGFjdCBpbiB0aG9zZSByb2xlcy4gVGhpcwogICAgLy8gcmVzdHJpY3Rpb24gaXMgaW50ZW50aW9uYWwgc28gdGhhdCB3ZSBhcmVuJ3QgdGVtcHRlZCB0byB1c2UgdGhlIENFTyBhZGRyZXNzIGZyZXF1ZW50bHkgb3V0IG9mCiAgICAvLyBjb252ZW5pZW5jZS4gVGhlIGxlc3Mgd2UgdXNlIGFuIGFkZHJlc3MsIHRoZSBsZXNzIGxpa2VseSBpdCBpcyB0aGF0IHdlIHNvbWVob3cgY29tcHJvbWlzZSB0aGUKICAgIC8vIGFjY291bnQuCgogICAgLy8vIEBkZXYgRW1pdGVkIHdoZW4gY29udHJhY3QgaXMgdXBncmFkZWQgLSBTZWUgUkVBRE1FLm1kIGZvciB1cGRncmFkZSBwbGFuCiAgICBldmVudCBDb250cmFjdFVwZ3JhZGUoYWRkcmVzcyBuZXdDb250cmFjdCk7CgogICAgLy8gVGhlIGFkZHJlc3NlcyBvZiB0aGUgYWNjb3VudHMgKG9yIGNvbnRyYWN0cykgdGhhdCBjYW4gZXhlY3V0ZSBhY3Rpb25zIHdpdGhpbiBlYWNoIHJvbGVzLgogICAgYWRkcmVzcyBwdWJsaWMgY2VvQWRkcmVzczsKICAgIGFkZHJlc3MgcHVibGljIGNmb0FkZHJlc3M7CiAgICBhZGRyZXNzIHB1YmxpYyBjb29BZGRyZXNzOwoKICAgIC8vIEBkZXYgS2VlcHMgdHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaXMgcGF1c2VkLiBXaGVuIHRoYXQgaXMgdHJ1ZSwgbW9zdCBhY3Rpb25zIGFyZSBibG9ja2VkCiAgICBib29sIHB1YmxpYyBwYXVzZWQgPSBmYWxzZTsKCiAgICAvLy8gQGRldiBBY2Nlc3MgbW9kaWZpZXIgZm9yIENFTy1vbmx5IGZ1bmN0aW9uYWxpdHkKICAgIG1vZGlmaWVyIG9ubHlDRU8oKSB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgQWNjZXNzIG1vZGlmaWVyIGZvciBDRk8tb25seSBmdW5jdGlvbmFsaXR5CiAgICBtb2RpZmllciBvbmx5Q0ZPKCkgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBjZm9BZGRyZXNzKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEFjY2VzcyBtb2RpZmllciBmb3IgQ09PLW9ubHkgZnVuY3Rpb25hbGl0eQogICAgbW9kaWZpZXIgb25seUNPTygpIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcyk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBvbmx5Q0xldmVsKCkgewogICAgICAgIHJlcXVpcmUoCiAgICAgICAgICAgIG1zZy5zZW5kZXIgPT0gY29vQWRkcmVzcyB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGNlb0FkZHJlc3MgfHwKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBjZm9BZGRyZXNzCiAgICAgICAgKTsKICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAZGV2IEFzc2lnbnMgYSBuZXcgYWRkcmVzcyB0byBhY3QgYXMgdGhlIENFTy4gT25seSBhdmFpbGFibGUgdG8gdGhlIGN1cnJlbnQgQ0VPLgogICAgLy8vIEBwYXJhbSBfbmV3Q0VPIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgQ0VPCiAgICBmdW5jdGlvbiBzZXRDRU8oYWRkcmVzcyBfbmV3Q0VPKSBwdWJsaWMgb25seUNFTyB7CiAgICAgICAgcmVxdWlyZShfbmV3Q0VPICE9IGFkZHJlc3MoMCkpOwoKICAgICAgICBjZW9BZGRyZXNzID0gX25ld0NFTzsKICAgIH0KCiAgICAvLy8gQGRldiBBc3NpZ25zIGEgbmV3IGFkZHJlc3MgdG8gYWN0IGFzIHRoZSBDRk8uIE9ubHkgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IENFTy4KICAgIC8vLyBAcGFyYW0gX25ld0NGTyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IENGTwogICAgZnVuY3Rpb24gc2V0Q0ZPKGFkZHJlc3MgX25ld0NGTykgcHVibGljIG9ubHlDRU8gewogICAgICAgIHJlcXVpcmUoX25ld0NGTyAhPSBhZGRyZXNzKDApKTsKCiAgICAgICAgY2ZvQWRkcmVzcyA9IF9uZXdDRk87CiAgICB9CgogICAgLy8vIEBkZXYgQXNzaWducyBhIG5ldyBhZGRyZXNzIHRvIGFjdCBhcyB0aGUgQ09PLiBPbmx5IGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCBDRU8uCiAgICAvLy8gQHBhcmFtIF9uZXdDT08gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBDT08KICAgIGZ1bmN0aW9uIHNldENPTyhhZGRyZXNzIF9uZXdDT08pIHB1YmxpYyBvbmx5Q0VPIHsKICAgICAgICByZXF1aXJlKF9uZXdDT08gIT0gYWRkcmVzcygwKSk7CgogICAgICAgIGNvb0FkZHJlc3MgPSBfbmV3Q09POwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhkcmF3QmFsYW5jZSgpIGV4dGVybmFsIG9ubHlDRk8gewogICAgICAgIGNmb0FkZHJlc3MudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCgogICAgLyoqKiBQYXVzYWJsZSBmdW5jdGlvbmFsaXR5IGFkYXB0ZWQgZnJvbSBPcGVuWmVwcGVsaW4gKioqLwoKICAgIC8vLyBAZGV2IE1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgICAgIHJlcXVpcmUoIXBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBNb2RpZmllciB0byBhbGxvdyBhY3Rpb25zIG9ubHkgd2hlbiB0aGUgY29udHJhY3QgSVMgcGF1c2VkCiAgICBtb2RpZmllciB3aGVuUGF1c2VkIHsKICAgICAgICByZXF1aXJlKHBhdXNlZCk7CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQGRldiBDYWxsZWQgYnkgYW55ICJDLWxldmVsIiByb2xlIHRvIHBhdXNlIHRoZSBjb250cmFjdC4gVXNlZCBvbmx5IHdoZW4KICAgIC8vLyAgYSBidWcgb3IgZXhwbG9pdCBpcyBkZXRlY3RlZCBhbmQgd2UgbmVlZCB0byBsaW1pdCBkYW1hZ2UuCiAgICBmdW5jdGlvbiBwYXVzZSgpIHB1YmxpYyBvbmx5Q0xldmVsIHdoZW5Ob3RQYXVzZWQgewogICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICB9CgogICAgLy8vIEBkZXYgVW5wYXVzZXMgdGhlIHNtYXJ0IGNvbnRyYWN0LiBDYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIENFTywgc2luY2UKICAgIC8vLyAgb25lIHJlYXNvbiB3ZSBtYXkgcGF1c2UgdGhlIGNvbnRyYWN0IGlzIHdoZW4gQ0ZPIG9yIENPTyBhY2NvdW50cyBhcmUKICAgIC8vLyAgY29tcHJvbWlzZWQuCiAgICBmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlDRU8gd2hlblBhdXNlZCB7CiAgICAgICAgLy8gY2FuJ3QgdW5wYXVzZSBpZiBjb250cmFjdCB3YXMgdXBncmFkZWQKICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzLW9yaWdpbi9BZXRoZXJCYXNlLnNvbAoKLy8vIEB0aXRsZSBCYXNlIGNvbnRyYWN0IGZvciBBZXRoZXIuIEhvbGRzIGFsbCBjb21tb24gc3RydWN0cywgZXZlbnRzIGFuZCBiYXNlIHZhcmlhYmxlcy4KLy8vIEBhdXRob3IgUHJvamVjdCBBZXRoZXIgKGh0dHBzOi8vd3d3LmFldGhlci5jaXR5KQovLy8gQGRldiBTZWUgdGhlIFByb3BlcnR5Q29yZSBjb250cmFjdCBkb2N1bWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IHRoZSB2YXJpb3VzIGNvbnRyYWN0IGZhY2V0cyBhcmUgYXJyYW5nZWQuCmNvbnRyYWN0IEFldGhlckJhc2UgaXMgQWV0aGVyQWNjZXNzQ29udHJvbCB7CiAgICAvKioqIEVWRU5UUyAqKiovCgogICAgLy8vIEBkZXYgVGhlIENvbnN0cnVjdCBldmVudCBpcyBmaXJlZCB3aGVuZXZlciBhIHByb3BlcnR5IHVwZGF0ZXMuCiAgICBldmVudCBDb25zdHJ1Y3QgKAogICAgICBhZGRyZXNzIGluZGV4ZWQgb3duZXIsCiAgICAgIHVpbnQyNTYgcHJvcGVydHlJZCwKICAgICAgUHJvcGVydHlDbGFzcyBjbGFzcywKICAgICAgdWludDggeCwKICAgICAgdWludDggeSwKICAgICAgdWludDggeiwKICAgICAgdWludDggZHgsCiAgICAgIHVpbnQ4IGR6LAogICAgICBzdHJpbmcgZGF0YQogICAgKTsKCiAgICAvLy8gQGRldiBUcmFuc2ZlciBldmVudCBhcyBkZWZpbmVkIGluIGN1cnJlbnQgZHJhZnQgb2YgRVJDNzIxLiBFbWl0dGVkIGV2ZXJ5CiAgICAvLy8gIHRpbWUgYSBwcm9wZXJ0eSBvd25lcnNoaXAgaXMgYXNzaWduZWQuCiAgICBldmVudCBUcmFuc2ZlcigKICAgICAgYWRkcmVzcyBpbmRleGVkIGZyb20sCiAgICAgIGFkZHJlc3MgaW5kZXhlZCB0bywKICAgICAgdWludDI1NiBpbmRleGVkIHRva2VuSWQKICAgICk7CgogICAgLyoqKiBEQVRBICoqKi8KCiAgICBlbnVtIFByb3BlcnR5Q2xhc3MgeyBESVNUUklDVCwgQlVJTERJTkcsIFVOSVQgfQoKICAgIC8vLyBAZGV2IFRoZSBtYWluIFByb3BlcnR5IHN0cnVjdC4gRXZlcnkgcHJvcGVydHkgaW4gQWV0aGVyIGlzIHJlcHJlc2VudGVkCiAgICAvLy8gIGJ5IGEgdmFyaWFudCBvZiB0aGlzIHN0cnVjdHVyZS4KICAgIHN0cnVjdCBQcm9wZXJ0eSB7CiAgICAgICAgdWludDMyIHBhcmVudDsKICAgICAgICBQcm9wZXJ0eUNsYXNzIGNsYXNzOwogICAgICAgIHVpbnQ4IHg7CiAgICAgICAgdWludDggeTsKICAgICAgICB1aW50OCB6OwogICAgICAgIHVpbnQ4IGR4OwogICAgICAgIHVpbnQ4IGR6OwogICAgfQoKICAgIC8qKiogU1RPUkFHRSAqKiovCgogICAgLy8vIEBkZXYgRW5zdXJlcyB0aGF0IHByb3BlcnR5IG9jY3VwaWVzIHVuaXF1ZSBwYXJ0IG9mIHRoZSB1bml2ZXJzZS4KICAgIGJvb2xbMTAwXVsxMDBdWzEwMF0gcHVibGljIHdvcmxkOwoKICAgIC8vLyBAZGV2IEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIFByb3BlcnR5IHN0cnVjdCBmb3IgYWxsIHByb3BlcnRpZXMgaW4gZXhpc3RlbmNlLiBUaGUgSUQKICAgIC8vLyAgb2YgZWFjaCBwcm9wZXJ0eSBpcyBhY3R1YWxseSBhbiBpbmRleCBpbnRvIHRoaXMgYXJyYXkuCiAgICBQcm9wZXJ0eVtdIHByb3BlcnRpZXM7CgogICAgLy8vIEBkZXYgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZGlzdHJpY3QgYWRkcmVzc2VzIGluIGV4aXN0ZW5jZS4KICAgIHVpbnQyNTZbXSBkaXN0cmljdHM7CgogICAgLy8vIEBkZXYgQSBtZWFzdXJlIG9mIHdvcmxkIHByb2dyZXNzaW9uLgogICAgdWludDI1NiBwdWJsaWMgcHJvZ3Jlc3M7CgogICAgLy8vIEBkZXYgVGhlIGZlZSBhc3NvY2lhdGVkIHdpdGggY29uc3RydWN0aW5nIGEgdW5pdCBwcm9wZXJ0eS4KICAgIHVpbnQyNTYgcHVibGljIHVuaXRDcmVhdGlvbkZlZSA9IDAuMDUgZXRoZXI7CgogICAgLy8vIEBkZXYgS2VlcHMgdHJhY2sgd2hldGhlciB1cGRhdGluZyBkYXRhIGlzIHBhdXNlZC4KICAgIGJvb2wgcHVibGljIHVwZGF0ZUVuYWJsZWQgPSB0cnVlOwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIHByb3BlcnR5IElEcyB0byB0aGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlbS4gQWxsIHByb3BlcnRpZXMgaGF2ZQogICAgLy8vICBzb21lIHZhbGlkIG93bmVyIGFkZHJlc3MsIGV2ZW4gZ2VuMCBwcm9wZXJ0aWVzIGFyZSBjcmVhdGVkIHdpdGggYSBub24temVybyBvd25lci4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gYWRkcmVzcykgcHVibGljIHByb3BlcnR5SW5kZXhUb093bmVyOwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIHByb3BlcnR5IElEcyB0byB0aGUgZGF0YSB0aGF0IGlzIHN0b3JlZCBvbiB0aGVtLgogICAgbWFwcGluZyAodWludDI1NiA9PiBzdHJpbmcpIHB1YmxpYyBwcm9wZXJ0eUluZGV4VG9EYXRhOwoKICAgIC8vLyBAZGV2IEEgbWFwcGluZyBmcm9tIG93bmVyIGFkZHJlc3MgdG8gY291bnQgb2YgdG9rZW5zIHRoYXQgYWRkcmVzcyBvd25zLgogICAgLy8vICBVc2VkIGludGVybmFsbHkgaW5zaWRlIGJhbGFuY2VPZigpIHRvIHJlc29sdmUgb3duZXJzaGlwIGNvdW50LgogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBvd25lcnNoaXBUb2tlbkNvdW50OwoKICAgIC8vLyBAZGV2IE1hcHBpbmdzIGJldHdlZW4gcHJvcGVydHkgbm9kZXMuCiAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHB1YmxpYyBkaXN0cmljdFRvQnVpbGRpbmdzQ291bnQ7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTZbXSkgcHVibGljIGRpc3RyaWN0VG9CdWlsZGluZ3M7CiAgICBtYXBwaW5nICh1aW50MjU2ID0+IHVpbnQyNTYpIHB1YmxpYyBidWlsZGluZ1RvVW5pdENvdW50OwogICAgbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2W10pIHB1YmxpYyBidWlsZGluZ1RvVW5pdHM7CgogICAgLy8vIEBkZXYgQSBtYXBwaW5nIGZyb20gYnVpbGRpbmcgcHJvcGVydHlJZCB0byB1bml0IGNvbnN0cnVjdGlvbiBwcml2YWN5LgogICAgbWFwcGluZyAodWludDI1NiA9PiBib29sKSBwdWJsaWMgYnVpbGRpbmdJc1B1YmxpYzsKCiAgICAvLy8gQGRldiBBIG1hcHBpbmcgZnJvbSBQcm9wZXJ0eUlEcyB0byBhbiBhZGRyZXNzIHRoYXQgaGFzIGJlZW4gYXBwcm92ZWQgdG8gY2FsbAogICAgLy8vICB0cmFuc2ZlckZyb20oKS4gRWFjaCBQcm9wZXJ0eSBjYW4gb25seSBoYXZlIG9uZSBhcHByb3ZlZCBhZGRyZXNzIGZvciB0cmFuc2ZlcgogICAgLy8vICBhdCBhbnkgdGltZS4gQSB6ZXJvIHZhbHVlIG1lYW5zIG5vIGFwcHJvdmFsIGlzIG91dHN0YW5kaW5nLgogICAgbWFwcGluZyAodWludDI1NiA9PiBhZGRyZXNzKSBwdWJsaWMgcHJvcGVydHlJbmRleFRvQXBwcm92ZWQ7CgogICAgLy8vIEBkZXYgQXNzaWducyBvd25lcnNoaXAgb2YgYSBzcGVjaWZpYyBQcm9wZXJ0eSB0byBhbiBhZGRyZXNzLgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgIC8vIHNpbmNlIHRoZSBudW1iZXIgb2YgcHJvcGVydGllcyBpcyBjYXBwZWQgdG8gMl4zMgogICAgICAvLyB0aGVyZSBpcyBubyB3YXkgdG8gb3ZlcmZsb3cgdGhpcwogICAgICBvd25lcnNoaXBUb2tlbkNvdW50W190b10rKzsKICAgICAgLy8gdHJhbnNmZXIgb3duZXJzaGlwCiAgICAgIHByb3BlcnR5SW5kZXhUb093bmVyW190b2tlbklkXSA9IF90bzsKICAgICAgLy8gV2hlbiBjcmVhdGluZyBuZXcgcHJvcGVydGllcyBfZnJvbSBpcyAweDAsIGJ1dCB3ZSBjYW4ndCBhY2NvdW50IHRoYXQgYWRkcmVzcy4KICAgICAgaWYgKF9mcm9tICE9IGFkZHJlc3MoMCkpIHsKICAgICAgICAgIG93bmVyc2hpcFRva2VuQ291bnRbX2Zyb21dLS07CiAgICAgICAgICAvLyBjbGVhciBhbnkgcHJldmlvdXNseSBhcHByb3ZlZCBvd25lcnNoaXAgZXhjaGFuZ2UKICAgICAgICAgIGRlbGV0ZSBwcm9wZXJ0eUluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF07CiAgICAgIH0KICAgICAgLy8gRW1pdCB0aGUgdHJhbnNmZXIgZXZlbnQuCiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF90b2tlbklkKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfY3JlYXRlVW5pdCgKICAgICAgdWludDI1NiBfcGFyZW50LAogICAgICB1aW50MjU2IF94LAogICAgICB1aW50MjU2IF95LAogICAgICB1aW50MjU2IF96LAogICAgICBhZGRyZXNzIF9vd25lcgogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcmV0dXJucyAodWludCkKICAgIHsKICAgICAgcmVxdWlyZShfeCA9PSB1aW50MjU2KHVpbnQ4KF94KSkpOwogICAgICByZXF1aXJlKF95ID09IHVpbnQyNTYodWludDgoX3kpKSk7CiAgICAgIHJlcXVpcmUoX3ogPT0gdWludDI1Nih1aW50OChfeikpKTsKICAgICAgcmVxdWlyZSghd29ybGRbX3hdW195XVtfel0pOwogICAgICB3b3JsZFtfeF1bX3ldW196XSA9IHRydWU7CiAgICAgIHJldHVybiBfY3JlYXRlUHJvcGVydHkoCiAgICAgICAgX3BhcmVudCwKICAgICAgICBQcm9wZXJ0eUNsYXNzLlVOSVQsCiAgICAgICAgX3gsCiAgICAgICAgX3ksCiAgICAgICAgX3osCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIF9vd25lcgogICAgICApOwogICAgfQoKICAgIGZ1bmN0aW9uIF9jcmVhdGVCdWlsZGluZygKICAgICAgdWludDI1NiBfcGFyZW50LAogICAgICB1aW50MjU2IF94LAogICAgICB1aW50MjU2IF95LAogICAgICB1aW50MjU2IF96LAogICAgICB1aW50MjU2IF9keCwKICAgICAgdWludDI1NiBfZHosCiAgICAgIGFkZHJlc3MgX293bmVyLAogICAgICBib29sIF9wdWJsaWMKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgIHJlcXVpcmUoX3ggPT0gdWludDI1Nih1aW50OChfeCkpKTsKICAgICAgcmVxdWlyZShfeSA9PSB1aW50MjU2KHVpbnQ4KF95KSkpOwogICAgICByZXF1aXJlKF96ID09IHVpbnQyNTYodWludDgoX3opKSk7CiAgICAgIHJlcXVpcmUoX2R4ID09IHVpbnQyNTYodWludDgoX2R4KSkpOwogICAgICByZXF1aXJlKF9keiA9PSB1aW50MjU2KHVpbnQ4KF9keikpKTsKCiAgICAgIC8vIExvb3Bpbmcgb3ZlciB3b3JsZCBzcGFjZS4KICAgICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCBfZHg7IGkrKykgewogICAgICAgICAgZm9yKHVpbnQyNTYgaiA9IDA7IGogPF9kejsgaisrKSB7CiAgICAgICAgICAgICAgaWYgKHdvcmxkW194ICsgaV1bMF1bX3ogKyBqXSkgewogICAgICAgICAgICAgICAgICByZXZlcnQoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgd29ybGRbX3ggKyBpXVswXVtfeiArIGpdID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgfQoKICAgICAgdWludCBwcm9wZXJ0eUlkID0gX2NyZWF0ZVByb3BlcnR5KAogICAgICAgIF9wYXJlbnQsCiAgICAgICAgUHJvcGVydHlDbGFzcy5CVUlMRElORywKICAgICAgICBfeCwKICAgICAgICBfeSwKICAgICAgICBfeiwKICAgICAgICBfZHgsCiAgICAgICAgX2R6LAogICAgICAgIF9vd25lcgogICAgICApOwoKICAgICAgZGlzdHJpY3RUb0J1aWxkaW5nc0NvdW50W19wYXJlbnRdKys7CiAgICAgIGRpc3RyaWN0VG9CdWlsZGluZ3NbX3BhcmVudF0ucHVzaChwcm9wZXJ0eUlkKTsKICAgICAgYnVpbGRpbmdJc1B1YmxpY1twcm9wZXJ0eUlkXSA9IF9wdWJsaWM7CiAgICAgIHJldHVybiBwcm9wZXJ0eUlkOwogICAgfQoKICAgIGZ1bmN0aW9uIF9jcmVhdGVEaXN0cmljdCgKICAgICAgdWludDI1NiBfeCwKICAgICAgdWludDI1NiBfeiwKICAgICAgdWludDI1NiBfZHgsCiAgICAgIHVpbnQyNTYgX2R6CiAgICApCiAgICAgICAgaW50ZXJuYWwKICAgICAgICByZXR1cm5zICh1aW50KQogICAgewogICAgICByZXF1aXJlKF94ID09IHVpbnQyNTYodWludDgoX3gpKSk7CiAgICAgIHJlcXVpcmUoX3ogPT0gdWludDI1Nih1aW50OChfeikpKTsKICAgICAgcmVxdWlyZShfZHggPT0gdWludDI1Nih1aW50OChfZHgpKSk7CiAgICAgIHJlcXVpcmUoX2R6ID09IHVpbnQyNTYodWludDgoX2R6KSkpOwoKICAgICAgdWludCBwcm9wZXJ0eUlkID0gX2NyZWF0ZVByb3BlcnR5KAogICAgICAgIGRpc3RyaWN0cy5sZW5ndGgsCiAgICAgICAgUHJvcGVydHlDbGFzcy5ESVNUUklDVCwKICAgICAgICBfeCwKICAgICAgICAwLAogICAgICAgIF96LAogICAgICAgIF9keCwKICAgICAgICBfZHosCiAgICAgICAgY29vQWRkcmVzcwogICAgICApOwoKICAgICAgZGlzdHJpY3RzLnB1c2gocHJvcGVydHlJZCk7CiAgICAgIHJldHVybiBwcm9wZXJ0eUlkOwoKICAgIH0KCgogICAgLy8vIEBkZXYgQW4gaW50ZXJuYWwgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBwcm9wZXJ0eSBhbmQgc3RvcmVzIGl0LiBUaGlzCiAgICAvLy8gIG1ldGhvZCBkb2Vzbid0IGRvIGFueSBjaGVja2luZyBhbmQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW4gdGhlCiAgICAvLy8gIGlucHV0IGRhdGEgaXMga25vd24gdG8gYmUgdmFsaWQuIFdpbGwgZ2VuZXJhdGUgYm90aCBhIENvbnN0cnVjdCBldmVudAogICAgLy8vICBhbmQgYSBUcmFuc2ZlciBldmVudC4KICAgIGZ1bmN0aW9uIF9jcmVhdGVQcm9wZXJ0eSgKICAgICAgICB1aW50MjU2IF9wYXJlbnQsCiAgICAgICAgUHJvcGVydHlDbGFzcyBfY2xhc3MsCiAgICAgICAgdWludDI1NiBfeCwKICAgICAgICB1aW50MjU2IF95LAogICAgICAgIHVpbnQyNTYgX3osCiAgICAgICAgdWludDI1NiBfZHgsCiAgICAgICAgdWludDI1NiBfZHosCiAgICAgICAgYWRkcmVzcyBfb3duZXIKICAgICkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQpCiAgICB7CiAgICAgICAgcmVxdWlyZShfeCA9PSB1aW50MjU2KHVpbnQ4KF94KSkpOwogICAgICAgIHJlcXVpcmUoX3kgPT0gdWludDI1Nih1aW50OChfeSkpKTsKICAgICAgICByZXF1aXJlKF96ID09IHVpbnQyNTYodWludDgoX3opKSk7CiAgICAgICAgcmVxdWlyZShfZHggPT0gdWludDI1Nih1aW50OChfZHgpKSk7CiAgICAgICAgcmVxdWlyZShfZHogPT0gdWludDI1Nih1aW50OChfZHopKSk7CiAgICAgICAgcmVxdWlyZShfcGFyZW50ID09IHVpbnQyNTYodWludDMyKF9wYXJlbnQpKSk7CiAgICAgICAgcmVxdWlyZSh1aW50MjU2KF9jbGFzcykgPD0gMyk7CgogICAgICAgIFByb3BlcnR5IG1lbW9yeSBfcHJvcGVydHkgPSBQcm9wZXJ0eSh7CiAgICAgICAgICAgIHBhcmVudDogdWludDMyKF9wYXJlbnQpLAogICAgICAgICAgICBjbGFzczogX2NsYXNzLAogICAgICAgICAgICB4OiB1aW50OChfeCksCiAgICAgICAgICAgIHk6IHVpbnQ4KF95KSwKICAgICAgICAgICAgejogdWludDgoX3opLAogICAgICAgICAgICBkeDogdWludDgoX2R4KSwKICAgICAgICAgICAgZHo6IHVpbnQ4KF9keikKICAgICAgICB9KTsKICAgICAgICB1aW50MjU2IF90b2tlbklkID0gcHJvcGVydGllcy5wdXNoKF9wcm9wZXJ0eSkgLSAxOwoKICAgICAgICAvLyBJdCdzIG5ldmVyIGdvaW5nIHRvIGhhcHBlbiwgNCBiaWxsaW9uIHByb3BlcnRpZXMgaXMgQSBMT1QsIGJ1dAogICAgICAgIC8vIGxldCdzIGp1c3QgYmUgMTAwJSBzdXJlIHdlIG5ldmVyIGxldCB0aGlzIGhhcHBlbi4KICAgICAgICByZXF1aXJlKF90b2tlbklkIDw9IDQyOTQ5NjcyOTUpOwoKICAgICAgICBDb25zdHJ1Y3QoCiAgICAgICAgICAgIF9vd25lciwKICAgICAgICAgICAgX3Rva2VuSWQsCiAgICAgICAgICAgIF9wcm9wZXJ0eS5jbGFzcywKICAgICAgICAgICAgX3Byb3BlcnR5LngsCiAgICAgICAgICAgIF9wcm9wZXJ0eS55LAogICAgICAgICAgICBfcHJvcGVydHkueiwKICAgICAgICAgICAgX3Byb3BlcnR5LmR4LAogICAgICAgICAgICBfcHJvcGVydHkuZHosCiAgICAgICAgICAgICIiCiAgICAgICAgKTsKCiAgICAgICAgLy8gVGhpcyB3aWxsIGFzc2lnbiBvd25lcnNoaXAsIGFuZCBhbHNvIGVtaXQgdGhlIFRyYW5zZmVyIGV2ZW50IGFzCiAgICAgICAgLy8gcGVyIEVSQzcyMSBkcmFmdAogICAgICAgIF90cmFuc2ZlcigwLCBfb3duZXIsIF90b2tlbklkKTsKCiAgICAgICAgcmV0dXJuIF90b2tlbklkOwogICAgfQoKICAgIC8vLyBAZGV2IENvbXB1dGluZyBoZWlnaHQgb2YgYSBidWlsZGluZyB3aXRoIHJlc3BlY3QgdG8gY2l0eSBwcm9ncmVzc2lvbi4KICAgIGZ1bmN0aW9uIF9jb21wdXRlSGVpZ2h0KAogICAgICB1aW50MjU2IF94LAogICAgICB1aW50MjU2IF96LAogICAgICB1aW50MjU2IF9oZWlnaHQKICAgICkgaW50ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgdWludDI1NiB4ID0gX3ggPCA1MCA/IDUwIC0gX3ggOiBfeCAtIDUwOwogICAgICAgIHVpbnQyNTYgeiA9IF96IDwgNTAgPyA1MCAtIF96IDogX3ogLSA1MDsKICAgICAgICB1aW50MjU2IGRpc3RhbmNlID0geCA+IHogPyB4IDogejsKICAgICAgICBpZiAoZGlzdGFuY2UgPiBwcm9ncmVzcykgewogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIHVpbnQyNTYgc2NhbGUgPSAxMDAgLSAoZGlzdGFuY2UgKiAxMDApIC8gcHJvZ3Jlc3MgOwogICAgICAgIHVpbnQyNTYgaGVpZ2h0ID0gMiAqIHByb2dyZXNzICogX2hlaWdodCAqIHNjYWxlIC8gMTAwMDA7CiAgICAgICAgcmV0dXJuIGhlaWdodCA+IDAgPyBoZWlnaHQgOiAxOwogICAgfQoKICAgIC8vLyBAZGV2IENvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIHNlZSBpZiB0aGlzIGJ1aWxkaW5nIGhhcyByb29tIGZvciBhIHVuaXQuCiAgICBmdW5jdGlvbiBjYW5DcmVhdGVVbml0KHVpbnQyNTYgX2J1aWxkaW5nSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMoYm9vbCkKICAgIHsKICAgICAgUHJvcGVydHkgc3RvcmFnZSBfcHJvcGVydHkgPSBwcm9wZXJ0aWVzW19idWlsZGluZ0lkXTsKICAgICAgaWYgKF9wcm9wZXJ0eS5jbGFzcyA9PSBQcm9wZXJ0eUNsYXNzLkJVSUxESU5HICYmCiAgICAgICAgICAgIChidWlsZGluZ0lzUHVibGljW19idWlsZGluZ0lkXSB8fAogICAgICAgICAgICAgIHByb3BlcnR5SW5kZXhUb093bmVyW19idWlsZGluZ0lkXSA9PSBtc2cuc2VuZGVyKQogICAgICApIHsKICAgICAgICB1aW50MjU2IHRvdGFsVm9sdW1lID0gX3Byb3BlcnR5LmR4ICogX3Byb3BlcnR5LmR6ICoKICAgICAgICAgIChfY29tcHV0ZUhlaWdodChfcHJvcGVydHkueCwgX3Byb3BlcnR5LnosIF9wcm9wZXJ0eS55KSAtIDEpOwogICAgICAgIHVpbnQyNTYgdG90YWxVbml0cyA9IGJ1aWxkaW5nVG9Vbml0Q291bnRbX2J1aWxkaW5nSWRdOwogICAgICAgIHJldHVybiB0b3RhbFVuaXRzIDwgdG90YWxWb2x1bWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vLyBAZGV2IFRoaXMgaW50ZXJuYWwgZnVuY3Rpb24gc2tpcHMgYWxsIHZhbGlkYXRpb24gY2hlY2tzLiBFbnN1cmUgdGhhdAogICAgLy8gICBjYW5DcmVhdGVVbml0KCkgaXMgcmVxdWlyZWQgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QuCiAgICBmdW5jdGlvbiBfY3JlYXRlVW5pdEhlbHBlcih1aW50MjU2IF9idWlsZGluZ0lkLCBhZGRyZXNzIF9vd25lcikKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnModWludDI1NikKICAgIHsKICAgICAgICAvLyBHcmFiIGEgcmVmZXJlbmNlIHRvIHRoZSBwcm9wZXJ0eSBpbiBzdG9yYWdlLgogICAgICAgIFByb3BlcnR5IHN0b3JhZ2UgX3Byb3BlcnR5ID0gcHJvcGVydGllc1tfYnVpbGRpbmdJZF07CiAgICAgICAgdWludDI1NiB0b3RhbEFyZWEgPSBfcHJvcGVydHkuZHggKiBfcHJvcGVydHkuZHo7CiAgICAgICAgdWludDI1NiBpbmRleCA9IGJ1aWxkaW5nVG9Vbml0Q291bnRbX2J1aWxkaW5nSWRdOwoKICAgICAgICAvLyBDYWxjdWxhdGUgbmV4dCBsb2NhdGlvbi4KICAgICAgICB1aW50MjU2IHkgPSBpbmRleCAvIHRvdGFsQXJlYSArIDE7CiAgICAgICAgdWludDI1NiBpbnRlcm1lZGlhdGUgPSBpbmRleCAlIHRvdGFsQXJlYTsKICAgICAgICB1aW50MjU2IHogPSBpbnRlcm1lZGlhdGUgLyBfcHJvcGVydHkuZHg7CiAgICAgICAgdWludDI1NiB4ID0gaW50ZXJtZWRpYXRlICUgX3Byb3BlcnR5LmR4OwoKICAgICAgICB1aW50MjU2IHVuaXRJZCA9IF9jcmVhdGVVbml0KAogICAgICAgICAgX2J1aWxkaW5nSWQsCiAgICAgICAgICB4ICsgX3Byb3BlcnR5LngsCiAgICAgICAgICB5LAogICAgICAgICAgeiArIF9wcm9wZXJ0eS56LAogICAgICAgICAgX293bmVyCiAgICAgICAgKTsKCiAgICAgICAgYnVpbGRpbmdUb1VuaXRDb3VudFtfYnVpbGRpbmdJZF0rKzsKICAgICAgICBidWlsZGluZ1RvVW5pdHNbX2J1aWxkaW5nSWRdLnB1c2godW5pdElkKTsKCiAgICAgICAgLy8gUmV0dXJuIHRoZSBuZXcgdW5pdCdzIElELgogICAgICAgIHJldHVybiB1bml0SWQ7CiAgICB9CgogICAgLy8vIEBkZXYgVXBkYXRlIGFsbG93cyBmb3Igc2V0dGluZyBhIGJ1aWxkaW5nIHByaXZhY3kuCiAgICBmdW5jdGlvbiB1cGRhdGVCdWlsZGluZ1ByaXZhY3kodWludCBfdG9rZW5JZCwgYm9vbCBfcHVibGljKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUocHJvcGVydHlJbmRleFRvT3duZXJbX3Rva2VuSWRdID09IG1zZy5zZW5kZXIpOwogICAgICAgIGJ1aWxkaW5nSXNQdWJsaWNbX3Rva2VuSWRdID0gX3B1YmxpYzsKICAgIH0KCiAgICAvLy8gQGRldiBVcGRhdGUgYWxsb3dzIGZvciBzZXR0aW5nIHRoZSBkYXRhIGFzc29jaWF0ZWQgdG8gYSBwcm9wZXJ0eS4KICAgIGZ1bmN0aW9uIHVwZGF0ZVByb3BlcnR5RGF0YSh1aW50IF90b2tlbklkLCBzdHJpbmcgX2RhdGEpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZSh1cGRhdGVFbmFibGVkKTsKICAgICAgICBhZGRyZXNzIF9vd25lciA9IHByb3BlcnR5SW5kZXhUb093bmVyW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gX293bmVyKTsKICAgICAgICBwcm9wZXJ0eUluZGV4VG9EYXRhW190b2tlbklkXSA9IF9kYXRhOwogICAgICAgIFByb3BlcnR5IG1lbW9yeSBfcHJvcGVydHkgPSBwcm9wZXJ0aWVzW190b2tlbklkXTsKICAgICAgICBDb25zdHJ1Y3QoCiAgICAgICAgICAgIF9vd25lciwKICAgICAgICAgICAgX3Rva2VuSWQsCiAgICAgICAgICAgIF9wcm9wZXJ0eS5jbGFzcywKICAgICAgICAgICAgX3Byb3BlcnR5LngsCiAgICAgICAgICAgIF9wcm9wZXJ0eS55LAogICAgICAgICAgICBfcHJvcGVydHkueiwKICAgICAgICAgICAgX3Byb3BlcnR5LmR4LAogICAgICAgICAgICBfcHJvcGVydHkuZHosCiAgICAgICAgICAgIF9kYXRhCiAgICAgICAgKTsKICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzLW9yaWdpbi9FUkM3MjFEcmFmdC5zb2wKCi8vLyBAdGl0bGUgSW50ZXJmYWNlIGZvciBjb250cmFjdHMgY29uZm9ybWluZyB0byBFUkMtNzIxOiBOb24tRnVuZ2libGUgVG9rZW5zCi8vLyBAYXV0aG9yIERpZXRlciBTaGlybGV5IDw8c3BhbiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9ImMxYTVhNGI1YTQ4MWEwYjlhOGFlYWNiYmE0YWZlZmEyYWUiPltlbWFpbCYjMTYwO3Byb3RlY3RlZF08L3NwYW4+PiAoaHR0cHM6Ly9naXRodWIuY29tL2RldGUpCmNvbnRyYWN0IEVSQzcyMSB7CiAgICBmdW5jdGlvbiBpbXBsZW1lbnRzRVJDNzIxKCkgcHVibGljIHB1cmUgcmV0dXJucyAoYm9vbCk7CiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgdG90YWwpOwogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOwogICAgZnVuY3Rpb24gb3duZXJPZih1aW50MjU2IF90b2tlbklkKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIG93bmVyKTsKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdG9rZW5JZCkgcHVibGljOwogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3Rva2VuSWQpIHB1YmxpYzsKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgaW5kZXhlZCB0b2tlbklkKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIGFwcHJvdmVkLCB1aW50MjU2IGluZGV4ZWQgdG9rZW5JZCk7CgogICAgLy8gT3B0aW9uYWwKICAgIC8vIGZ1bmN0aW9uIG5hbWUoKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgbmFtZSk7CiAgICAvLyBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgdmlldyByZXR1cm5zIChzdHJpbmcgc3ltYm9sKTsKICAgIC8vIGZ1bmN0aW9uIHRva2Vuc09mT3duZXIoYWRkcmVzcyBfb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NltdIHRva2VuSWRzKTsKICAgIC8vIGZ1bmN0aW9uIHRva2VuTWV0YWRhdGEodWludDI1NiBfdG9rZW5JZCkgcHVibGljIHZpZXcgcmV0dXJucyAoc3RyaW5nIGluZm9VcmwpOwp9CgovLyBGaWxlOiBjb250cmFjdHMtb3JpZ2luL0FldGhlck93bmVyc2hpcC5zb2wKCi8vLyBAdGl0bGUgVGhlIGZhY2V0IG9mIHRoZSBBZXRoZXIgY29yZSBjb250cmFjdCB0aGF0IG1hbmFnZXMgb3duZXJzaGlwLCBFUkMtNzIxIChkcmFmdCkgY29tcGxpYW50LgovLy8gQGRldiBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy83MjEKLy8vICBTZWUgdGhlIFByb3BlcnR5Q29yZSBjb250cmFjdCBkb2N1bWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IHRoZSB2YXJpb3VzIGNvbnRyYWN0IGZhY2V0cyBhcmUgYXJyYW5nZWQuCmNvbnRyYWN0IEFldGhlck93bmVyc2hpcCBpcyBBZXRoZXJCYXNlLCBFUkM3MjEgewoKICAgIC8vLyBAbm90aWNlIE5hbWUgYW5kIHN5bWJvbCBvZiB0aGUgbm9uIGZ1bmdpYmxlIHRva2VuLCBhcyBkZWZpbmVkIGluIEVSQzcyMS4KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICJBZXRoZXIiOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiQUVUSCI7CgogICAgZnVuY3Rpb24gaW1wbGVtZW50c0VSQzcyMSgpIHB1YmxpYyBwdXJlIHJldHVybnMgKGJvb2wpCiAgICB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgLy8gSW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbnM6IFRoZXNlIGZ1bmN0aW9ucyBhbGwgYXNzdW1lIHRoYXQgdGhlaXIgaW5wdXQgYXJndW1lbnRzCiAgICAvLyBhcmUgdmFsaWQuIFdlIGxlYXZlIGl0IHRvIHB1YmxpYyBtZXRob2RzIHRvIHNhbml0aXplIHRoZWlyIGlucHV0cyBhbmQgZm9sbG93CiAgICAvLyB0aGUgcmVxdWlyZWQgbG9naWMuCgogICAgLy8vIEBkZXYgQ2hlY2tzIGlmIGEgZ2l2ZW4gYWRkcmVzcyBpcyB0aGUgY3VycmVudCBvd25lciBvZiBhIHBhcnRpY3VsYXIgUHJvcGVydHkuCiAgICAvLy8gQHBhcmFtIF9jbGFpbWFudCB0aGUgYWRkcmVzcyB3ZSBhcmUgdmFsaWRhdGluZyBhZ2FpbnN0LgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBwcm9wZXJ0eSBpZCwgb25seSB2YWxpZCB3aGVuID4gMAogICAgZnVuY3Rpb24gX293bnMoYWRkcmVzcyBfY2xhaW1hbnQsIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBwcm9wZXJ0eUluZGV4VG9Pd25lcltfdG9rZW5JZF0gPT0gX2NsYWltYW50OwogICAgfQoKICAgIC8vLyBAZGV2IENoZWNrcyBpZiBhIGdpdmVuIGFkZHJlc3MgY3VycmVudGx5IGhhcyB0cmFuc2ZlckFwcHJvdmFsIGZvciBhIHBhcnRpY3VsYXIgUHJvcGVydHkuCiAgICAvLy8gQHBhcmFtIF9jbGFpbWFudCB0aGUgYWRkcmVzcyB3ZSBhcmUgY29uZmlybWluZyBwcm9wZXJ0eSBpcyBhcHByb3ZlZCBmb3IuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIHByb3BlcnR5IGlkLCBvbmx5IHZhbGlkIHdoZW4gPiAwCiAgICBmdW5jdGlvbiBfYXBwcm92ZWRGb3IoYWRkcmVzcyBfY2xhaW1hbnQsIHVpbnQyNTYgX3Rva2VuSWQpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBwcm9wZXJ0eUluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPT0gX2NsYWltYW50OwogICAgfQoKICAgIC8vLyBAZGV2IE1hcmtzIGFuIGFkZHJlc3MgYXMgYmVpbmcgYXBwcm92ZWQgZm9yIHRyYW5zZmVyRnJvbSgpLCBvdmVyd3JpdGluZyBhbnkgcHJldmlvdXMKICAgIC8vLyAgYXBwcm92YWwuIFNldHRpbmcgX2FwcHJvdmVkIHRvIGFkZHJlc3MoMCkgY2xlYXJzIGFsbCB0cmFuc2ZlciBhcHByb3ZhbC4KICAgIC8vLyAgTk9URTogX2FwcHJvdmUoKSBkb2VzIE5PVCBzZW5kIHRoZSBBcHByb3ZhbCBldmVudC4gVGhpcyBpcyBpbnRlbnRpb25hbCBiZWNhdXNlCiAgICAvLy8gIF9hcHByb3ZlKCkgYW5kIHRyYW5zZmVyRnJvbSgpIGFyZSB1c2VkIHRvZ2V0aGVyIGZvciBwdXR0aW5nIFByb3BlcnRpZXMgb24gYXVjdGlvbiwgYW5kCiAgICAvLy8gIHRoZXJlIGlzIG5vIHZhbHVlIGluIHNwYW1taW5nIHRoZSBsb2cgd2l0aCBBcHByb3ZhbCBldmVudHMgaW4gdGhhdCBjYXNlLgogICAgZnVuY3Rpb24gX2FwcHJvdmUodWludDI1NiBfdG9rZW5JZCwgYWRkcmVzcyBfYXBwcm92ZWQpIGludGVybmFsIHsKICAgICAgICBwcm9wZXJ0eUluZGV4VG9BcHByb3ZlZFtfdG9rZW5JZF0gPSBfYXBwcm92ZWQ7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIGEgcHJvcGVydHkgb3duZWQgYnkgdGhpcyBjb250cmFjdCB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3MuCiAgICAvLy8gIFVzZWQgdG8gcmVzY3VlIGxvc3QgcHJvcGVydGllcy4gKFRoZXJlIGlzIG5vICJwcm9wZXIiIGZsb3cgd2hlcmUgdGhpcyBjb250cmFjdAogICAgLy8vICBzaG91bGQgYmUgdGhlIG93bmVyIG9mIGFueSBQcm9wZXJ0eS4gVGhpcyBmdW5jdGlvbiBleGlzdHMgZm9yIHVzIHRvIHJlYXNzaWduCiAgICAvLy8gIHRoZSBvd25lcnNoaXAgb2YgUHJvcGVydGllcyB0aGF0IHVzZXJzIG1heSBoYXZlIGFjY2lkZW50YWxseSBzZW50IHRvIG91ciBhZGRyZXNzLikKICAgIC8vLyBAcGFyYW0gX3Byb3BlcnR5SWQgLSBJRCBvZiBwcm9wZXJ0eQogICAgLy8vIEBwYXJhbSBfcmVjaXBpZW50IC0gQWRkcmVzcyB0byBzZW5kIHRoZSBwcm9wZXJ0eSB0bwogICAgZnVuY3Rpb24gcmVzY3VlTG9zdFByb3BlcnR5KHVpbnQyNTYgX3Byb3BlcnR5SWQsIGFkZHJlc3MgX3JlY2lwaWVudCkgcHVibGljIG9ubHlDT08gd2hlbk5vdFBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShfb3ducyh0aGlzLCBfcHJvcGVydHlJZCkpOwogICAgICAgIF90cmFuc2Zlcih0aGlzLCBfcmVjaXBpZW50LCBfcHJvcGVydHlJZCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyB0aGUgbnVtYmVyIG9mIFByb3BlcnRpZXMgb3duZWQgYnkgYSBzcGVjaWZpYyBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIGFkZHJlc3MgdG8gY2hlY2suCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYgY291bnQpIHsKICAgICAgICByZXR1cm4gb3duZXJzaGlwVG9rZW5Db3VudFtfb3duZXJdOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVycyBhIFByb3BlcnR5IHRvIGFub3RoZXIgYWRkcmVzcy4gSWYgdHJhbnNmZXJyaW5nIHRvIGEgc21hcnQKICAgIC8vLyAgY29udHJhY3QgYmUgVkVSWSBDQVJFRlVMIHRvIGVuc3VyZSB0aGF0IGl0IGlzIGF3YXJlIG9mIEVSQy03MjEgKG9yCiAgICAvLy8gIExhcHV0YSBzcGVjaWZpY2FsbHkpIG9yIHlvdXIgUHJvcGVydHkgbWF5IGJlIGxvc3QgZm9yZXZlci4gU2VyaW91c2x5LgogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudCwgY2FuIGJlIGEgdXNlciBvciBjb250cmFjdC4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIElEIG9mIHRoZSBQcm9wZXJ0eSB0byB0cmFuc2Zlci4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiB0cmFuc2ZlcigKICAgICAgICBhZGRyZXNzIF90bywKICAgICAgICB1aW50MjU2IF90b2tlbklkCiAgICApCiAgICAgICAgcHVibGljCiAgICAgICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIFNhZmV0eSBjaGVjayB0byBwcmV2ZW50IGFnYWluc3QgYW4gdW5leHBlY3RlZCAweDAgZGVmYXVsdC4KICAgICAgICByZXF1aXJlKF90byAhPSBhZGRyZXNzKDApKTsKICAgICAgICAvLyBZb3UgY2FuIG9ubHkgc2VuZCB5b3VyIG93biBwcm9wZXJ0eS4KICAgICAgICByZXF1aXJlKF9vd25zKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CgogICAgICAgIC8vIFJlYXNzaWduIG93bmVyc2hpcCwgY2xlYXIgcGVuZGluZyBhcHByb3ZhbHMsIGVtaXQgVHJhbnNmZXIgZXZlbnQuCiAgICAgICAgX3RyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEdyYW50IGFub3RoZXIgYWRkcmVzcyB0aGUgcmlnaHQgdG8gdHJhbnNmZXIgYSBzcGVjaWZpYyBQcm9wZXJ0eSB2aWEKICAgIC8vLyAgdHJhbnNmZXJGcm9tKCkuIFRoaXMgaXMgdGhlIHByZWZlcnJlZCBmbG93IGZvciB0cmFuc2ZlcmluZyBORlRzIHRvIGNvbnRyYWN0cy4KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIHRvIGJlIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwuIFBhc3MgYWRkcmVzcygwKSB0bwogICAgLy8vICBjbGVhciBhbGwgYXBwcm92YWxzLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIFByb3BlcnR5IHRoYXQgY2FuIGJlIHRyYW5zZmVycmVkIGlmIHRoaXMgY2FsbCBzdWNjZWVkcy4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiBhcHByb3ZlKAogICAgICAgIGFkZHJlc3MgX3RvLAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgLy8gT25seSBhbiBvd25lciBjYW4gZ3JhbnQgdHJhbnNmZXIgYXBwcm92YWwuCiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwoKICAgICAgICAvLyBSZWdpc3RlciB0aGUgYXBwcm92YWwgKHJlcGxhY2luZyBhbnkgcHJldmlvdXMgYXBwcm92YWwpLgogICAgICAgIF9hcHByb3ZlKF90b2tlbklkLCBfdG8pOwoKICAgICAgICAvLyBFbWl0IGFwcHJvdmFsIGV2ZW50LgogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF90bywgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFRyYW5zZmVyIGEgUHJvcGVydHkgb3duZWQgYnkgYW5vdGhlciBhZGRyZXNzLCBmb3Igd2hpY2ggdGhlIGNhbGxpbmcgYWRkcmVzcwogICAgLy8vICBoYXMgcHJldmlvdXNseSBiZWVuIGdyYW50ZWQgdHJhbnNmZXIgYXBwcm92YWwgYnkgdGhlIG93bmVyLgogICAgLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyB0aGF0IG93bnMgdGhlIFByb3BlcnR5IHRvIGJlIHRyYW5zZmVyZWQuCiAgICAvLy8gQHBhcmFtIF90byBUaGUgYWRkcmVzcyB0aGF0IHNob3VsZCB0YWtlIG93bmVyc2hpcCBvZiB0aGUgUHJvcGVydHkuIENhbiBiZSBhbnkgYWRkcmVzcywKICAgIC8vLyAgaW5jbHVkaW5nIHRoZSBjYWxsZXIuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIFRoZSBJRCBvZiB0aGUgUHJvcGVydHkgdG8gYmUgdHJhbnNmZXJyZWQuCiAgICAvLy8gQGRldiBSZXF1aXJlZCBmb3IgRVJDLTcyMSBjb21wbGlhbmNlLgogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKAogICAgICAgIGFkZHJlc3MgX2Zyb20sCiAgICAgICAgYWRkcmVzcyBfdG8sCiAgICAgICAgdWludDI1NiBfdG9rZW5JZAogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHdoZW5Ob3RQYXVzZWQKICAgIHsKICAgICAgICAvLyBDaGVjayBmb3IgYXBwcm92YWwgYW5kIHZhbGlkIG93bmVyc2hpcAogICAgICAgIHJlcXVpcmUoX2FwcHJvdmVkRm9yKG1zZy5zZW5kZXIsIF90b2tlbklkKSk7CiAgICAgICAgcmVxdWlyZShfb3ducyhfZnJvbSwgX3Rva2VuSWQpKTsKCiAgICAgICAgLy8gUmVhc3NpZ24gb3duZXJzaGlwIChhbHNvIGNsZWFycyBwZW5kaW5nIGFwcHJvdmFscyBhbmQgZW1pdHMgVHJhbnNmZXIgZXZlbnQpLgogICAgICAgIF90cmFuc2ZlcihfZnJvbSwgX3RvLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIFByb3BlcnRpZXMgY3VycmVudGx5IGluIGV4aXN0ZW5jZS4KICAgIC8vLyBAZGV2IFJlcXVpcmVkIGZvciBFUkMtNzIxIGNvbXBsaWFuY2UuCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQpIHsKICAgICAgICByZXR1cm4gcHJvcGVydGllcy5sZW5ndGg7CiAgICB9CgogICAgZnVuY3Rpb24gdG90YWxEaXN0cmljdFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnModWludCBjb3VudCkgewogICAgICAgIHJldHVybiBkaXN0cmljdHMubGVuZ3RoOwogICAgfQoKICAgIC8vLyBAbm90aWNlIFJldHVybnMgdGhlIGFkZHJlc3MgY3VycmVudGx5IGFzc2lnbmVkIG93bmVyc2hpcCBvZiBhIGdpdmVuIFByb3BlcnR5LgogICAgLy8vIEBkZXYgUmVxdWlyZWQgZm9yIEVSQy03MjEgY29tcGxpYW5jZS4KICAgIGZ1bmN0aW9uIG93bmVyT2YodWludDI1NiBfdG9rZW5JZCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoYWRkcmVzcyBvd25lcikKICAgIHsKICAgICAgICBvd25lciA9IHByb3BlcnR5SW5kZXhUb093bmVyW190b2tlbklkXTsKCiAgICAgICAgcmVxdWlyZShvd25lciAhPSBhZGRyZXNzKDApKTsKICAgIH0KCgogICAgLy8vIEBub3RpY2UgUmV0dXJucyBhIGxpc3Qgb2YgYWxsIFByb3BlcnR5IElEcyBhc3NpZ25lZCB0byBhbiBhZGRyZXNzLgogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIG93bmVyIHdob3NlIFByb3BlcnRpZXMgd2UgYXJlIGludGVyZXN0ZWQgaW4uCiAgICAvLy8gQGRldiBUaGlzIG1ldGhvZCBNVVNUIE5FVkVSIGJlIGNhbGxlZCBieSBzbWFydCBjb250cmFjdCBjb2RlLiBGaXJzdCwgaXQncyBmYWlybHkKICAgIC8vLyAgZXhwZW5zaXZlIChpdCB3YWxrcyB0aGUgZW50aXJlIEtpdHR5IGFycmF5IGxvb2tpbmcgZm9yIGNhdHMgYmVsb25naW5nIHRvIG93bmVyKSwKICAgIC8vLyAgYnV0IGl0IGFsc28gcmV0dXJucyBhIGR5bmFtaWMgYXJyYXksIHdoaWNoIGlzIG9ubHkgc3VwcG9ydGVkIGZvciB3ZWIzIGNhbGxzLCBhbmQKICAgIC8vLyAgbm90IGNvbnRyYWN0LXRvLWNvbnRyYWN0IGNhbGxzLgogICAgZnVuY3Rpb24gdG9rZW5zT2ZPd25lcihhZGRyZXNzIF9vd25lcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zKHVpbnQyNTZbXSBvd25lclRva2VucykgewogICAgICAgIHVpbnQyNTYgdG9rZW5Db3VudCA9IGJhbGFuY2VPZihfb3duZXIpOwoKICAgICAgICBpZiAodG9rZW5Db3VudCA9PSAwKSB7CiAgICAgICAgICAgIC8vIFJldHVybiBhbiBlbXB0eSBhcnJheQogICAgICAgICAgICByZXR1cm4gbmV3IHVpbnQyNTZbXSgwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1aW50MjU2W10gbWVtb3J5IHJlc3VsdCA9IG5ldyB1aW50MjU2W10odG9rZW5Db3VudCk7CiAgICAgICAgICAgIHVpbnQyNTYgdG90YWxQcm9wZXJ0aWVzID0gdG90YWxTdXBwbHkoKTsKICAgICAgICAgICAgdWludDI1NiByZXN1bHRJbmRleCA9IDA7CgogICAgICAgICAgICAvLyBXZSBjb3VudCBvbiB0aGUgZmFjdCB0aGF0IGFsbCBwcm9wZXJ0aWVzIGhhdmUgSURzIHN0YXJ0aW5nIGF0IDEgYW5kIGluY3JlYXNpbmcKICAgICAgICAgICAgLy8gc2VxdWVudGlhbGx5IHVwIHRvIHRoZSB0b3RhbFByb3BlcnRpZXMgY291bnQuCiAgICAgICAgICAgIHVpbnQyNTYgdG9rZW5JZDsKCiAgICAgICAgICAgIGZvciAodG9rZW5JZCA9IDE7IHRva2VuSWQgPD0gdG90YWxQcm9wZXJ0aWVzOyB0b2tlbklkKyspIHsKICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eUluZGV4VG9Pd25lclt0b2tlbklkXSA9PSBfb3duZXIpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXhdID0gdG9rZW5JZDsKICAgICAgICAgICAgICAgICAgICByZXN1bHRJbmRleCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzLW9yaWdpbi9BdWN0aW9uL0Nsb2NrQXVjdGlvbkJhc2Uuc29sCgovLy8gQHRpdGxlIEF1Y3Rpb24gQ29yZQovLy8gQGRldiBDb250YWlucyBtb2RlbHMsIHZhcmlhYmxlcywgYW5kIGludGVybmFsIG1ldGhvZHMgZm9yIHRoZSBhdWN0aW9uLgpjb250cmFjdCBDbG9ja0F1Y3Rpb25CYXNlIHsKCiAgICAvLyBSZXByZXNlbnRzIGFuIGF1Y3Rpb24gb24gYW4gTkZUCiAgICBzdHJ1Y3QgQXVjdGlvbiB7CiAgICAgICAgLy8gQ3VycmVudCBvd25lciBvZiBORlQKICAgICAgICBhZGRyZXNzIHNlbGxlcjsKICAgICAgICAvLyBQcmljZSAoaW4gd2VpKSBhdCBiZWdpbm5pbmcgb2YgYXVjdGlvbgogICAgICAgIHVpbnQxMjggc3RhcnRpbmdQcmljZTsKICAgICAgICAvLyBQcmljZSAoaW4gd2VpKSBhdCBlbmQgb2YgYXVjdGlvbgogICAgICAgIHVpbnQxMjggZW5kaW5nUHJpY2U7CiAgICAgICAgLy8gRHVyYXRpb24gKGluIHNlY29uZHMpIG9mIGF1Y3Rpb24KICAgICAgICB1aW50NjQgZHVyYXRpb247CiAgICAgICAgLy8gVGltZSB3aGVuIGF1Y3Rpb24gc3RhcnRlZAogICAgICAgIC8vIE5PVEU6IDAgaWYgdGhpcyBhdWN0aW9uIGhhcyBiZWVuIGNvbmNsdWRlZAogICAgICAgIHVpbnQ2NCBzdGFydGVkQXQ7CiAgICB9CgogICAgLy8gUmVmZXJlbmNlIHRvIGNvbnRyYWN0IHRyYWNraW5nIE5GVCBvd25lcnNoaXAKICAgIEVSQzcyMSBwdWJsaWMgbm9uRnVuZ2libGVDb250cmFjdDsKCiAgICAvLyBDdXQgb3duZXIgdGFrZXMgb24gZWFjaCBhdWN0aW9uLCBtZWFzdXJlZCBpbiBiYXNpcyBwb2ludHMgKDEvMTAwIG9mIGEgcGVyY2VudCkuCiAgICAvLyBWYWx1ZXMgMC0xMCwwMDAgbWFwIHRvIDAlLTEwMCUKICAgIHVpbnQyNTYgcHVibGljIG93bmVyQ3V0OwoKICAgIC8vIE1hcCBmcm9tIHRva2VuIElEIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgYXVjdGlvbi4KICAgIG1hcHBpbmcgKHVpbnQyNTYgPT4gQXVjdGlvbikgdG9rZW5JZFRvQXVjdGlvbjsKCiAgICBldmVudCBBdWN0aW9uQ3JlYXRlZCh1aW50MjU2IHRva2VuSWQsIHVpbnQyNTYgc3RhcnRpbmdQcmljZSwgdWludDI1NiBlbmRpbmdQcmljZSwgdWludDI1NiBkdXJhdGlvbik7CiAgICBldmVudCBBdWN0aW9uU3VjY2Vzc2Z1bCh1aW50MjU2IHRva2VuSWQsIHVpbnQyNTYgdG90YWxQcmljZSwgYWRkcmVzcyB3aW5uZXIpOwogICAgZXZlbnQgQXVjdGlvbkNhbmNlbGxlZCh1aW50MjU2IHRva2VuSWQpOwoKICAgIC8vLyBAZGV2IERPTidUIGdpdmUgbWUgeW91ciBtb25leS4KICAgIGZ1bmN0aW9uKCkgZXh0ZXJuYWwge30KCiAgICAvLyBNb2RpZmllcnMgdG8gY2hlY2sgdGhhdCBpbnB1dHMgY2FuIGJlIHNhZmVseSBzdG9yZWQgd2l0aCBhIGNlcnRhaW4KICAgIC8vIG51bWJlciBvZiBiaXRzLiBXZSB1c2UgY29uc3RhbnRzIGFuZCBtdWx0aXBsZSBtb2RpZmllcnMgdG8gc2F2ZSBnYXMuCiAgICBtb2RpZmllciBjYW5CZVN0b3JlZFdpdGg2NEJpdHModWludDI1NiBfdmFsdWUpIHsKICAgICAgICByZXF1aXJlKF92YWx1ZSA8PSAxODQ0Njc0NDA3MzcwOTU1MTYxNSk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBjYW5CZVN0b3JlZFdpdGgxMjhCaXRzKHVpbnQyNTYgX3ZhbHVlKSB7CiAgICAgICAgcmVxdWlyZShfdmFsdWUgPCAzNDAyODIzNjY5MjA5Mzg0NjM0NjMzNzQ2MDc0MzE3NjgyMTE0NTUpOwogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyB0cnVlIGlmIHRoZSBjbGFpbWFudCBvd25zIHRoZSB0b2tlbi4KICAgIC8vLyBAcGFyYW0gX2NsYWltYW50IC0gQWRkcmVzcyBjbGFpbWluZyB0byBvd24gdGhlIHRva2VuLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIHRva2VuIHdob3NlIG93bmVyc2hpcCB0byB2ZXJpZnkuCiAgICBmdW5jdGlvbiBfb3ducyhhZGRyZXNzIF9jbGFpbWFudCwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgdmlldyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmV0dXJuIChub25GdW5naWJsZUNvbnRyYWN0Lm93bmVyT2YoX3Rva2VuSWQpID09IF9jbGFpbWFudCk7CiAgICB9CgogICAgLy8vIEBkZXYgRXNjcm93cyB0aGUgTkZULCBhc3NpZ25pbmcgb3duZXJzaGlwIHRvIHRoaXMgY29udHJhY3QuCiAgICAvLy8gVGhyb3dzIGlmIHRoZSBlc2Nyb3cgZmFpbHMuCiAgICAvLy8gQHBhcmFtIF9vd25lciAtIEN1cnJlbnQgb3duZXIgYWRkcmVzcyBvZiB0b2tlbiB0byBlc2Nyb3cuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gd2hvc2UgYXBwcm92YWwgdG8gdmVyaWZ5LgogICAgZnVuY3Rpb24gX2VzY3JvdyhhZGRyZXNzIF9vd25lciwgdWludDI1NiBfdG9rZW5JZCkgaW50ZXJuYWwgewogICAgICAgIC8vIGl0IHdpbGwgdGhyb3cgaWYgdHJhbnNmZXIgZmFpbHMKICAgICAgICBub25GdW5naWJsZUNvbnRyYWN0LnRyYW5zZmVyRnJvbShfb3duZXIsIHRoaXMsIF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBUcmFuc2ZlcnMgYW4gTkZUIG93bmVkIGJ5IHRoaXMgY29udHJhY3QgdG8gYW5vdGhlciBhZGRyZXNzLgogICAgLy8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgc3VjY2VlZHMuCiAgICAvLy8gQHBhcmFtIF9yZWNlaXZlciAtIEFkZHJlc3MgdG8gdHJhbnNmZXIgTkZUIHRvLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIHRva2VuIHRvIHRyYW5zZmVyLgogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX3JlY2VpdmVyLCB1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgICAgLy8gaXQgd2lsbCB0aHJvdyBpZiB0cmFuc2ZlciBmYWlscwogICAgICAgIG5vbkZ1bmdpYmxlQ29udHJhY3QudHJhbnNmZXIoX3JlY2VpdmVyLCBfdG9rZW5JZCk7CiAgICB9CgogICAgLy8vIEBkZXYgQWRkcyBhbiBhdWN0aW9uIHRvIHRoZSBsaXN0IG9mIG9wZW4gYXVjdGlvbnMuIEFsc28gZmlyZXMgdGhlCiAgICAvLy8gIEF1Y3Rpb25DcmVhdGVkIGV2ZW50LgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCBUaGUgSUQgb2YgdGhlIHRva2VuIHRvIGJlIHB1dCBvbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfYXVjdGlvbiBBdWN0aW9uIHRvIGFkZC4KICAgIGZ1bmN0aW9uIF9hZGRBdWN0aW9uKHVpbnQyNTYgX3Rva2VuSWQsIEF1Y3Rpb24gX2F1Y3Rpb24pIGludGVybmFsIHsKICAgICAgICAvLyBSZXF1aXJlIHRoYXQgYWxsIGF1Y3Rpb25zIGhhdmUgYSBkdXJhdGlvbiBvZgogICAgICAgIC8vIGF0IGxlYXN0IG9uZSBtaW51dGUuIChLZWVwcyBvdXIgbWF0aCBmcm9tIGdldHRpbmcgaGFpcnkhKQogICAgICAgIHJlcXVpcmUoX2F1Y3Rpb24uZHVyYXRpb24gPj0gMSBtaW51dGVzKTsKCiAgICAgICAgdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF0gPSBfYXVjdGlvbjsKCiAgICAgICAgQXVjdGlvbkNyZWF0ZWQoCiAgICAgICAgICAgIHVpbnQyNTYoX3Rva2VuSWQpLAogICAgICAgICAgICB1aW50MjU2KF9hdWN0aW9uLnN0YXJ0aW5nUHJpY2UpLAogICAgICAgICAgICB1aW50MjU2KF9hdWN0aW9uLmVuZGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDI1NihfYXVjdGlvbi5kdXJhdGlvbikKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IENhbmNlbHMgYW4gYXVjdGlvbiB1bmNvbmRpdGlvbmFsbHkuCiAgICBmdW5jdGlvbiBfY2FuY2VsQXVjdGlvbih1aW50MjU2IF90b2tlbklkLCBhZGRyZXNzIF9zZWxsZXIpIGludGVybmFsIHsKICAgICAgICBfcmVtb3ZlQXVjdGlvbihfdG9rZW5JZCk7CiAgICAgICAgX3RyYW5zZmVyKF9zZWxsZXIsIF90b2tlbklkKTsKICAgICAgICBBdWN0aW9uQ2FuY2VsbGVkKF90b2tlbklkKTsKICAgIH0KCiAgICAvLy8gQGRldiBDb21wdXRlcyB0aGUgcHJpY2UgYW5kIHRyYW5zZmVycyB3aW5uaW5ncy4KICAgIC8vLyBEb2VzIE5PVCB0cmFuc2ZlciBvd25lcnNoaXAgb2YgdG9rZW4uCiAgICBmdW5jdGlvbiBfYmlkKHVpbnQyNTYgX3Rva2VuSWQsIHVpbnQyNTYgX2JpZEFtb3VudCkKICAgICAgICBpbnRlcm5hbAogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBhdWN0aW9uIHN0cnVjdAogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CgogICAgICAgIC8vIEV4cGxpY2l0bHkgY2hlY2sgdGhhdCB0aGlzIGF1Y3Rpb24gaXMgY3VycmVudGx5IGxpdmUuCiAgICAgICAgLy8gKEJlY2F1c2Ugb2YgaG93IEV0aGVyZXVtIG1hcHBpbmdzIHdvcmssIHdlIGNhbid0IGp1c3QgY291bnQKICAgICAgICAvLyBvbiB0aGUgbG9va3VwIGFib3ZlIGZhaWxpbmcuIEFuIGludmFsaWQgX3Rva2VuSWQgd2lsbCBqdXN0CiAgICAgICAgLy8gcmV0dXJuIGFuIGF1Y3Rpb24gb2JqZWN0IHRoYXQgaXMgYWxsIHplcm9zLikKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CgogICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGluY29taW5nIGJpZCBpcyBoaWdoZXIgdGhhbiB0aGUgY3VycmVudAogICAgICAgIC8vIHByaWNlCiAgICAgICAgdWludDI1NiBwcmljZSA9IF9jdXJyZW50UHJpY2UoYXVjdGlvbik7CiAgICAgICAgcmVxdWlyZShfYmlkQW1vdW50ID49IHByaWNlKTsKCiAgICAgICAgLy8gR3JhYiBhIHJlZmVyZW5jZSB0byB0aGUgc2VsbGVyIGJlZm9yZSB0aGUgYXVjdGlvbiBzdHJ1Y3QKICAgICAgICAvLyBnZXRzIGRlbGV0ZWQuCiAgICAgICAgYWRkcmVzcyBzZWxsZXIgPSBhdWN0aW9uLnNlbGxlcjsKCiAgICAgICAgLy8gVGhlIGJpZCBpcyBnb29kISBSZW1vdmUgdGhlIGF1Y3Rpb24gYmVmb3JlIHNlbmRpbmcgdGhlIGZlZXMKICAgICAgICAvLyB0byB0aGUgc2VuZGVyIHNvIHdlIGNhbid0IGhhdmUgYSByZWVudHJhbmN5IGF0dGFjay4KICAgICAgICBfcmVtb3ZlQXVjdGlvbihfdG9rZW5JZCk7CgogICAgICAgIC8vIFRyYW5zZmVyIHByb2NlZWRzIHRvIHNlbGxlciAoaWYgdGhlcmUgYXJlIGFueSEpCiAgICAgICAgaWYgKHByaWNlID4gMCkgewogICAgICAgICAgICAvLyAgQ2FsY3VsYXRlIHRoZSBhdWN0aW9uZWVyJ3MgY3V0LgogICAgICAgICAgICAvLyAoTk9URTogX2NvbXB1dGVDdXQoKSBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBhCiAgICAgICAgICAgIC8vICB2YWx1ZSA8PSBwcmljZSwgc28gdGhpcyBzdWJ0cmFjdGlvbiBjYW4ndCBnbyBuZWdhdGl2ZS4pCiAgICAgICAgICAgIHVpbnQyNTYgYXVjdGlvbmVlckN1dCA9IF9jb21wdXRlQ3V0KHByaWNlKTsKICAgICAgICAgICAgdWludDI1NiBzZWxsZXJQcm9jZWVkcyA9IHByaWNlIC0gYXVjdGlvbmVlckN1dDsKCiAgICAgICAgICAgIC8vIE5PVEU6IERvaW5nIGEgdHJhbnNmZXIoKSBpbiB0aGUgbWlkZGxlIG9mIGEgY29tcGxleAogICAgICAgICAgICAvLyBtZXRob2QgbGlrZSB0aGlzIGlzIGdlbmVyYWxseSBkaXNjb3VyYWdlZCBiZWNhdXNlIG9mCiAgICAgICAgICAgIC8vIHJlZW50cmFuY3kgYXR0YWNrcyBhbmQgRG9TIGF0dGFja3MgaWYgdGhlIHNlbGxlciBpcwogICAgICAgICAgICAvLyBhIGNvbnRyYWN0IHdpdGggYW4gaW52YWxpZCBmYWxsYmFjayBmdW5jdGlvbi4gV2UgZXhwbGljaXRseQogICAgICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IHJlZW50cmFuY3kgYXR0YWNrcyBieSByZW1vdmluZyB0aGUgYXVjdGlvbgogICAgICAgICAgICAvLyBiZWZvcmUgY2FsbGluZyB0cmFuc2ZlcigpLCBhbmQgdGhlIG9ubHkgdGhpbmcgdGhlIHNlbGxlcgogICAgICAgICAgICAvLyBjYW4gRG9TIGlzIHRoZSBzYWxlIG9mIHRoZWlyIG93biBhc3NldCEgKEFuZCBpZiBpdCdzIGFuCiAgICAgICAgICAgIC8vIGFjY2lkZW50LCB0aGV5IGNhbiBjYWxsIGNhbmNlbEF1Y3Rpb24oKS4gKQogICAgICAgICAgICBzZWxsZXIudHJhbnNmZXIoc2VsbGVyUHJvY2VlZHMpOwogICAgICAgIH0KCiAgICAgICAgLy8gVGVsbCB0aGUgd29ybGQhCiAgICAgICAgQXVjdGlvblN1Y2Nlc3NmdWwoX3Rva2VuSWQsIHByaWNlLCBtc2cuc2VuZGVyKTsKCiAgICAgICAgcmV0dXJuIHByaWNlOwogICAgfQoKICAgIC8vLyBAZGV2IFJlbW92ZXMgYW4gYXVjdGlvbiBmcm9tIHRoZSBsaXN0IG9mIG9wZW4gYXVjdGlvbnMuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgTkZUIG9uIGF1Y3Rpb24uCiAgICBmdW5jdGlvbiBfcmVtb3ZlQXVjdGlvbih1aW50MjU2IF90b2tlbklkKSBpbnRlcm5hbCB7CiAgICAgICAgZGVsZXRlIHRva2VuSWRUb0F1Y3Rpb25bX3Rva2VuSWRdOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdHJ1ZSBpZiB0aGUgTkZUIGlzIG9uIGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF9hdWN0aW9uIC0gQXVjdGlvbiB0byBjaGVjay4KICAgIGZ1bmN0aW9uIF9pc09uQXVjdGlvbihBdWN0aW9uIHN0b3JhZ2UgX2F1Y3Rpb24pIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiAoX2F1Y3Rpb24uc3RhcnRlZEF0ID4gMCk7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBjdXJyZW50IHByaWNlIG9mIGFuIE5GVCBvbiBhdWN0aW9uLiBCcm9rZW4gaW50byB0d28KICAgIC8vLyAgZnVuY3Rpb25zICh0aGlzIG9uZSwgdGhhdCBjb21wdXRlcyB0aGUgZHVyYXRpb24gZnJvbSB0aGUgYXVjdGlvbgogICAgLy8vICBzdHJ1Y3R1cmUsIGFuZCB0aGUgb3RoZXIgdGhhdCBkb2VzIHRoZSBwcmljZSBjb21wdXRhdGlvbikgc28gd2UKICAgIC8vLyAgY2FuIGVhc2lseSB0ZXN0IHRoYXQgdGhlIHByaWNlIGNvbXB1dGF0aW9uIHdvcmtzIGNvcnJlY3RseS4KICAgIGZ1bmN0aW9uIF9jdXJyZW50UHJpY2UoQXVjdGlvbiBzdG9yYWdlIF9hdWN0aW9uKQogICAgICAgIGludGVybmFsCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgdWludDI1NiBzZWNvbmRzUGFzc2VkID0gMDsKCiAgICAgICAgLy8gQSBiaXQgb2YgaW5zdXJhbmNlIGFnYWluc3QgbmVnYXRpdmUgdmFsdWVzIChvciB3cmFwYXJvdW5kKS4KICAgICAgICAvLyBQcm9iYWJseSBub3QgbmVjZXNzYXJ5IChzaW5jZSBFdGhlcmV1bSBndWFybmF0ZWVzIHRoYXQgdGhlCiAgICAgICAgLy8gbm93IHZhcmlhYmxlIGRvZXNuJ3QgZXZlciBnbyBiYWNrd2FyZHMpLgogICAgICAgIGlmIChub3cgPiBfYXVjdGlvbi5zdGFydGVkQXQpIHsKICAgICAgICAgICAgc2Vjb25kc1Bhc3NlZCA9IG5vdyAtIF9hdWN0aW9uLnN0YXJ0ZWRBdDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBfY29tcHV0ZUN1cnJlbnRQcmljZSgKICAgICAgICAgICAgX2F1Y3Rpb24uc3RhcnRpbmdQcmljZSwKICAgICAgICAgICAgX2F1Y3Rpb24uZW5kaW5nUHJpY2UsCiAgICAgICAgICAgIF9hdWN0aW9uLmR1cmF0aW9uLAogICAgICAgICAgICBzZWNvbmRzUGFzc2VkCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gQGRldiBDb21wdXRlcyB0aGUgY3VycmVudCBwcmljZSBvZiBhbiBhdWN0aW9uLiBGYWN0b3JlZCBvdXQKICAgIC8vLyAgZnJvbSBfY3VycmVudFByaWNlIHNvIHdlIGNhbiBydW4gZXh0ZW5zaXZlIHVuaXQgdGVzdHMuCiAgICAvLy8gIFdoZW4gdGVzdGluZywgbWFrZSB0aGlzIGZ1bmN0aW9uIHB1YmxpYyBhbmQgdHVybiBvbgogICAgLy8vICBgQ3VycmVudCBwcmljZSBjb21wdXRhdGlvbmAgdGVzdCBzdWl0ZS4KICAgIGZ1bmN0aW9uIF9jb21wdXRlQ3VycmVudFByaWNlKAogICAgICAgIHVpbnQyNTYgX3N0YXJ0aW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZW5kaW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZHVyYXRpb24sCiAgICAgICAgdWludDI1NiBfc2Vjb25kc1Bhc3NlZAogICAgKQogICAgICAgIGludGVybmFsCiAgICAgICAgcHVyZQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgLy8gTk9URTogV2UgZG9uJ3QgdXNlIFNhZmVNYXRoIChvciBzaW1pbGFyKSBpbiB0aGlzIGZ1bmN0aW9uIGJlY2F1c2UKICAgICAgICAvLyAgYWxsIG9mIG91ciBwdWJsaWMgZnVuY3Rpb25zIGNhcmVmdWxseSBjYXAgdGhlIG1heGltdW0gdmFsdWVzIGZvcgogICAgICAgIC8vICB0aW1lIChhdCA2NC1iaXRzKSBhbmQgY3VycmVuY3kgKGF0IDEyOC1iaXRzKS4gX2R1cmF0aW9uIGlzCiAgICAgICAgLy8gIGFsc28ga25vd24gdG8gYmUgbm9uLXplcm8gKHNlZSB0aGUgcmVxdWlyZSgpIHN0YXRlbWVudCBpbgogICAgICAgIC8vICBfYWRkQXVjdGlvbigpKQogICAgICAgIGlmIChfc2Vjb25kc1Bhc3NlZCA+PSBfZHVyYXRpb24pIHsKICAgICAgICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBkeW5hbWljIHByaWNpbmcgcG9ydGlvbgogICAgICAgICAgICAvLyBvZiB0aGUgYXVjdGlvbiwganVzdCByZXR1cm4gdGhlIGVuZCBwcmljZS4KICAgICAgICAgICAgcmV0dXJuIF9lbmRpbmdQcmljZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBTdGFydGluZyBwcmljZSBjYW4gYmUgaGlnaGVyIHRoYW4gZW5kaW5nIHByaWNlIChhbmQgb2Z0ZW4gaXMhKSwgc28KICAgICAgICAgICAgLy8gdGhpcyBkZWx0YSBjYW4gYmUgbmVnYXRpdmUuCiAgICAgICAgICAgIGludDI1NiB0b3RhbFByaWNlQ2hhbmdlID0gaW50MjU2KF9lbmRpbmdQcmljZSkgLSBpbnQyNTYoX3N0YXJ0aW5nUHJpY2UpOwoKICAgICAgICAgICAgLy8gVGhpcyBtdWx0aXBsaWNhdGlvbiBjYW4ndCBvdmVyZmxvdywgX3NlY29uZHNQYXNzZWQgd2lsbCBlYXNpbHkgZml0IHdpdGhpbgogICAgICAgICAgICAvLyA2NC1iaXRzLCBhbmQgdG90YWxQcmljZUNoYW5nZSB3aWxsIGVhc2lseSBmaXQgd2l0aGluIDEyOC1iaXRzLCB0aGVpciBwcm9kdWN0CiAgICAgICAgICAgIC8vIHdpbGwgYWx3YXlzIGZpdCB3aXRoaW4gMjU2LWJpdHMuCiAgICAgICAgICAgIGludDI1NiBjdXJyZW50UHJpY2VDaGFuZ2UgPSB0b3RhbFByaWNlQ2hhbmdlICogaW50MjU2KF9zZWNvbmRzUGFzc2VkKSAvIGludDI1NihfZHVyYXRpb24pOwoKICAgICAgICAgICAgLy8gY3VycmVudFByaWNlQ2hhbmdlIGNhbiBiZSBuZWdhdGl2ZSwgYnV0IGlmIHNvLCB3aWxsIGhhdmUgYSBtYWduaXR1ZGUKICAgICAgICAgICAgLy8gbGVzcyB0aGF0IF9zdGFydGluZ1ByaWNlLiBUaHVzLCB0aGlzIHJlc3VsdCB3aWxsIGFsd2F5cyBlbmQgdXAgcG9zaXRpdmUuCiAgICAgICAgICAgIGludDI1NiBjdXJyZW50UHJpY2UgPSBpbnQyNTYoX3N0YXJ0aW5nUHJpY2UpICsgY3VycmVudFByaWNlQ2hhbmdlOwoKICAgICAgICAgICAgcmV0dXJuIHVpbnQyNTYoY3VycmVudFByaWNlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vIEBkZXYgQ29tcHV0ZXMgb3duZXIncyBjdXQgb2YgYSBzYWxlLgogICAgLy8vIEBwYXJhbSBfcHJpY2UgLSBTYWxlIHByaWNlIG9mIE5GVC4KICAgIGZ1bmN0aW9uIF9jb21wdXRlQ3V0KHVpbnQyNTYgX3ByaWNlKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgU2FmZU1hdGggKG9yIHNpbWlsYXIpIGluIHRoaXMgZnVuY3Rpb24gYmVjYXVzZQogICAgICAgIC8vICBhbGwgb2Ygb3VyIGVudHJ5IGZ1bmN0aW9ucyBjYXJlZnVsbHkgY2FwIHRoZSBtYXhpbXVtIHZhbHVlcyBmb3IKICAgICAgICAvLyAgY3VycmVuY3kgKGF0IDEyOC1iaXRzKSwgYW5kIG93bmVyQ3V0IDw9IDEwMDAwIChzZWUgdGhlIHJlcXVpcmUoKQogICAgICAgIC8vICBzdGF0ZW1lbnQgaW4gdGhlIENsb2NrQXVjdGlvbiBjb25zdHJ1Y3RvcikuIFRoZSByZXN1bHQgb2YgdGhpcwogICAgICAgIC8vICBmdW5jdGlvbiBpcyBhbHdheXMgZ3VhcmFudGVlZCB0byBiZSA8PSBfcHJpY2UuCiAgICAgICAgcmV0dXJuIF9wcmljZSAqIG93bmVyQ3V0IC8gMTAwMDA7CiAgICB9Cgp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvb3duZXJzaGlwL093bmFibGUuc29sCgovKioKICogQHRpdGxlIE93bmFibGUKICogQGRldiBUaGUgT3duYWJsZSBjb250cmFjdCBoYXMgYW4gb3duZXIgYWRkcmVzcywgYW5kIHByb3ZpZGVzIGJhc2ljIGF1dGhvcml6YXRpb24gY29udHJvbAogKiBmdW5jdGlvbnMsIHRoaXMgc2ltcGxpZmllcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgInVzZXIgcGVybWlzc2lvbnMiLgogKi8KY29udHJhY3QgT3duYWJsZSB7CiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgoKICAvKioKICAgKiBAZGV2IFRoZSBPd25hYmxlIGNvbnN0cnVjdG9yIHNldHMgdGhlIG9yaWdpbmFsIGBvd25lcmAgb2YgdGhlIGNvbnRyYWN0IHRvIHRoZSBzZW5kZXIKICAgKiBhY2NvdW50LgogICAqLwogIGZ1bmN0aW9uIE93bmFibGUoKSB7CiAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgfQoKCiAgLyoqCiAgICogQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIG93bmVyLgogICAqLwogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7CiAgICBfOwogIH0KCgogIC8qKgogICAqIEBkZXYgQWxsb3dzIHRoZSBjdXJyZW50IG93bmVyIHRvIHRyYW5zZmVyIGNvbnRyb2wgb2YgdGhlIGNvbnRyYWN0IHRvIGEgbmV3T3duZXIuCiAgICogQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIG93bmVyc2hpcCB0by4KICAgKi8KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgewogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsKICAgICAgb3duZXIgPSBuZXdPd25lcjsKICAgIH0KICB9Cgp9CgovLyBGaWxlOiB6ZXBwZWxpbi1zb2xpZGl0eS9jb250cmFjdHMvbGlmZWN5Y2xlL1BhdXNhYmxlLnNvbAoKLyoqCiAqIEB0aXRsZSBQYXVzYWJsZQogKiBAZGV2IEJhc2UgY29udHJhY3Qgd2hpY2ggYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBtZWNoYW5pc20uCiAqLwpjb250cmFjdCBQYXVzYWJsZSBpcyBPd25hYmxlIHsKICBldmVudCBQYXVzZSgpOwogIGV2ZW50IFVucGF1c2UoKTsKCiAgYm9vbCBwdWJsaWMgcGF1c2VkID0gZmFsc2U7CgoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBwYXVzZWQKICAgKi8KICBtb2RpZmllciB3aGVuTm90UGF1c2VkKCkgewogICAgcmVxdWlyZSghcGF1c2VkKTsKICAgIF87CiAgfQoKICAvKioKICAgKiBAZGV2IG1vZGlmaWVyIHRvIGFsbG93IGFjdGlvbnMgb25seSB3aGVuIHRoZSBjb250cmFjdCBJUyBOT1QgcGF1c2VkCiAgICovCiAgbW9kaWZpZXIgd2hlblBhdXNlZCB7CiAgICByZXF1aXJlKHBhdXNlZCk7CiAgICBfOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHBhdXNlLCB0cmlnZ2VycyBzdG9wcGVkIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gcGF1c2UoKSBvbmx5T3duZXIgd2hlbk5vdFBhdXNlZCByZXR1cm5zIChib29sKSB7CiAgICBwYXVzZWQgPSB0cnVlOwogICAgUGF1c2UoKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoqCiAgICogQGRldiBjYWxsZWQgYnkgdGhlIG93bmVyIHRvIHVucGF1c2UsIHJldHVybnMgdG8gbm9ybWFsIHN0YXRlCiAgICovCiAgZnVuY3Rpb24gdW5wYXVzZSgpIG9ubHlPd25lciB3aGVuUGF1c2VkIHJldHVybnMgKGJvb2wpIHsKICAgIHBhdXNlZCA9IGZhbHNlOwogICAgVW5wYXVzZSgpOwogICAgcmV0dXJuIHRydWU7CiAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMtb3JpZ2luL0F1Y3Rpb24vQ2xvY2tBdWN0aW9uLnNvbAoKLy8vIEB0aXRsZSBDbG9jayBhdWN0aW9uIGZvciBub24tZnVuZ2libGUgdG9rZW5zLgpjb250cmFjdCBDbG9ja0F1Y3Rpb24gaXMgUGF1c2FibGUsIENsb2NrQXVjdGlvbkJhc2UgewoKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yIGNyZWF0ZXMgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBvd25lcnNoaXAgY29udHJhY3QKICAgIC8vLyAgYW5kIHZlcmlmaWVzIHRoZSBvd25lciBjdXQgaXMgaW4gdGhlIHZhbGlkIHJhbmdlLgogICAgLy8vIEBwYXJhbSBfbmZ0QWRkcmVzcyAtIGFkZHJlc3Mgb2YgYSBkZXBsb3llZCBjb250cmFjdCBpbXBsZW1lbnRpbmcKICAgIC8vLyAgdGhlIE5vbmZ1bmdpYmxlIEludGVyZmFjZS4KICAgIC8vLyBAcGFyYW0gX2N1dCAtIHBlcmNlbnQgY3V0IHRoZSBvd25lciB0YWtlcyBvbiBlYWNoIGF1Y3Rpb24sIG11c3QgYmUKICAgIC8vLyAgYmV0d2VlbiAwLTEwLDAwMC4KICAgIGZ1bmN0aW9uIENsb2NrQXVjdGlvbihhZGRyZXNzIF9uZnRBZGRyZXNzLCB1aW50MjU2IF9jdXQpIHB1YmxpYyB7CiAgICAgICAgcmVxdWlyZShfY3V0IDw9IDEwMDAwKTsKICAgICAgICBvd25lckN1dCA9IF9jdXQ7CiAgICAgICAgCiAgICAgICAgRVJDNzIxIGNhbmRpZGF0ZUNvbnRyYWN0ID0gRVJDNzIxKF9uZnRBZGRyZXNzKTsKICAgICAgICByZXF1aXJlKGNhbmRpZGF0ZUNvbnRyYWN0LmltcGxlbWVudHNFUkM3MjEoKSk7CiAgICAgICAgbm9uRnVuZ2libGVDb250cmFjdCA9IGNhbmRpZGF0ZUNvbnRyYWN0OwogICAgfQoKICAgIC8vLyBAZGV2IFJlbW92ZSBhbGwgRXRoZXIgZnJvbSB0aGUgY29udHJhY3QsIHdoaWNoIGlzIHRoZSBvd25lcidzIGN1dHMKICAgIC8vLyAgYXMgd2VsbCBhcyBhbnkgRXRoZXIgc2VudCBkaXJlY3RseSB0byB0aGUgY29udHJhY3QgYWRkcmVzcy4KICAgIC8vLyAgQWx3YXlzIHRyYW5zZmVycyB0byB0aGUgTkZUIGNvbnRyYWN0LCBidXQgY2FuIGJlIGNhbGxlZCBlaXRoZXIgYnkKICAgIC8vLyAgdGhlIG93bmVyIG9yIHRoZSBORlQgY29udHJhY3QuCiAgICBmdW5jdGlvbiB3aXRoZHJhd0JhbGFuY2UoKSBleHRlcm5hbCB7CiAgICAgICAgYWRkcmVzcyBuZnRBZGRyZXNzID0gYWRkcmVzcyhub25GdW5naWJsZUNvbnRyYWN0KTsKCiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgbXNnLnNlbmRlciA9PSBvd25lciB8fAogICAgICAgICAgICBtc2cuc2VuZGVyID09IG5mdEFkZHJlc3MKICAgICAgICApOwogICAgICAgIG5mdEFkZHJlc3MudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGVzIGFuZCBiZWdpbnMgYSBuZXcgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0b2tlbiB0byBhdWN0aW9uLCBzZW5kZXIgbXVzdCBiZSBvd25lci4KICAgIC8vLyBAcGFyYW0gX3N0YXJ0aW5nUHJpY2UgLSBQcmljZSBvZiBpdGVtIChpbiB3ZWkpIGF0IGJlZ2lubmluZyBvZiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfZW5kaW5nUHJpY2UgLSBQcmljZSBvZiBpdGVtIChpbiB3ZWkpIGF0IGVuZCBvZiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfZHVyYXRpb24gLSBMZW5ndGggb2YgdGltZSB0byBtb3ZlIGJldHdlZW4gc3RhcnRpbmcKICAgIC8vLyAgcHJpY2UgYW5kIGVuZGluZyBwcmljZSAoaW4gc2Vjb25kcykuCiAgICAvLy8gQHBhcmFtIF9zZWxsZXIgLSBTZWxsZXIsIGlmIG5vdCB0aGUgbWVzc2FnZSBzZW5kZXIKICAgIGZ1bmN0aW9uIGNyZWF0ZUF1Y3Rpb24oCiAgICAgICAgdWludDI1NiBfdG9rZW5JZCwKICAgICAgICB1aW50MjU2IF9zdGFydGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2VuZGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgX2R1cmF0aW9uLAogICAgICAgIGFkZHJlc3MgX3NlbGxlcgogICAgKQogICAgICAgIHB1YmxpYwogICAgICAgIHdoZW5Ob3RQYXVzZWQKICAgICAgICBjYW5CZVN0b3JlZFdpdGgxMjhCaXRzKF9zdGFydGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDEyOEJpdHMoX2VuZGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDY0Qml0cyhfZHVyYXRpb24pCiAgICB7CiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfdG9rZW5JZCkpOwogICAgICAgIF9lc2Nyb3cobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgICAgIEF1Y3Rpb24gbWVtb3J5IGF1Y3Rpb24gPSBBdWN0aW9uKAogICAgICAgICAgICBfc2VsbGVyLAogICAgICAgICAgICB1aW50MTI4KF9zdGFydGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDEyOChfZW5kaW5nUHJpY2UpLAogICAgICAgICAgICB1aW50NjQoX2R1cmF0aW9uKSwKICAgICAgICAgICAgdWludDY0KG5vdykKICAgICAgICApOwogICAgICAgIF9hZGRBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uKTsKICAgIH0KCiAgICAvLy8gQGRldiBCaWRzIG9uIGFuIG9wZW4gYXVjdGlvbiwgY29tcGxldGluZyB0aGUgYXVjdGlvbiBhbmQgdHJhbnNmZXJyaW5nCiAgICAvLy8gIG93bmVyc2hpcCBvZiB0aGUgTkZUIGlmIGVub3VnaCBFdGhlciBpcyBzdXBwbGllZC4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0b2tlbiB0byBiaWQgb24uCiAgICBmdW5jdGlvbiBiaWQodWludDI1NiBfdG9rZW5JZCkKICAgICAgICBwdWJsaWMKICAgICAgICBwYXlhYmxlCiAgICAgICAgd2hlbk5vdFBhdXNlZAogICAgewogICAgICAgIC8vIF9iaWQgd2lsbCB0aHJvdyBpZiB0aGUgYmlkIG9yIGZ1bmRzIHRyYW5zZmVyIGZhaWxzCiAgICAgICAgX2JpZChfdG9rZW5JZCwgbXNnLnZhbHVlKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3Rva2VuSWQpOwogICAgfQoKICAgIC8vLyBAZGV2IENhbmNlbHMgYW4gYXVjdGlvbiB0aGF0IGhhc24ndCBiZWVuIHdvbiB5ZXQuCiAgICAvLy8gIFJldHVybnMgdGhlIE5GVCB0byBvcmlnaW5hbCBvd25lci4KICAgIC8vLyBAbm90aWNlIFRoaXMgaXMgYSBzdGF0ZS1tb2RpZnlpbmcgZnVuY3Rpb24gdGhhdCBjYW4KICAgIC8vLyAgYmUgY2FsbGVkIHdoaWxlIHRoZSBjb250cmFjdCBpcyBwYXVzZWQuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gb24gYXVjdGlvbgogICAgZnVuY3Rpb24gY2FuY2VsQXVjdGlvbih1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIGFkZHJlc3Mgc2VsbGVyID0gYXVjdGlvbi5zZWxsZXI7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHNlbGxlcik7CiAgICAgICAgX2NhbmNlbEF1Y3Rpb24oX3Rva2VuSWQsIHNlbGxlcik7CiAgICB9CgogICAgLy8vIEBkZXYgQ2FuY2VscyBhbiBhdWN0aW9uIHdoZW4gdGhlIGNvbnRyYWN0IGlzIHBhdXNlZC4KICAgIC8vLyAgT25seSB0aGUgb3duZXIgbWF5IGRvIHRoaXMsIGFuZCBORlRzIGFyZSByZXR1cm5lZCB0bwogICAgLy8vICB0aGUgc2VsbGVyLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gZW1lcmdlbmNpZXMuCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdGhlIE5GVCBvbiBhdWN0aW9uIHRvIGNhbmNlbC4KICAgIGZ1bmN0aW9uIGNhbmNlbEF1Y3Rpb25XaGVuUGF1c2VkKHVpbnQyNTYgX3Rva2VuSWQpCiAgICAgICAgd2hlblBhdXNlZAogICAgICAgIG9ubHlPd25lcgogICAgICAgIHB1YmxpYwogICAgewogICAgICAgIEF1Y3Rpb24gc3RvcmFnZSBhdWN0aW9uID0gdG9rZW5JZFRvQXVjdGlvbltfdG9rZW5JZF07CiAgICAgICAgcmVxdWlyZShfaXNPbkF1Y3Rpb24oYXVjdGlvbikpOwogICAgICAgIF9jYW5jZWxBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uLnNlbGxlcik7CiAgICB9CgogICAgLy8vIEBkZXYgUmV0dXJucyBhdWN0aW9uIGluZm8gZm9yIGFuIE5GVCBvbiBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfdG9rZW5JZCAtIElEIG9mIE5GVCBvbiBhdWN0aW9uLgogICAgZnVuY3Rpb24gZ2V0QXVjdGlvbih1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIHZpZXcKICAgICAgICByZXR1cm5zCiAgICAoCiAgICAgICAgYWRkcmVzcyBzZWxsZXIsCiAgICAgICAgdWludDI1NiBzdGFydGluZ1ByaWNlLAogICAgICAgIHVpbnQyNTYgZW5kaW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBkdXJhdGlvbiwKICAgICAgICB1aW50MjU2IHN0YXJ0ZWRBdAogICAgKSB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgYXVjdGlvbi5zZWxsZXIsCiAgICAgICAgICAgIGF1Y3Rpb24uc3RhcnRpbmdQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5lbmRpbmdQcmljZSwKICAgICAgICAgICAgYXVjdGlvbi5kdXJhdGlvbiwKICAgICAgICAgICAgYXVjdGlvbi5zdGFydGVkQXQKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IFJldHVybnMgdGhlIGN1cnJlbnQgcHJpY2Ugb2YgYW4gYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgLSBJRCBvZiB0aGUgdG9rZW4gcHJpY2Ugd2UgYXJlIGNoZWNraW5nLgogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFByaWNlKHVpbnQyNTYgX3Rva2VuSWQpCiAgICAgICAgcHVibGljCiAgICAgICAgdmlldwogICAgICAgIHJldHVybnMgKHVpbnQyNTYpCiAgICB7CiAgICAgICAgQXVjdGlvbiBzdG9yYWdlIGF1Y3Rpb24gPSB0b2tlbklkVG9BdWN0aW9uW190b2tlbklkXTsKICAgICAgICByZXF1aXJlKF9pc09uQXVjdGlvbihhdWN0aW9uKSk7CiAgICAgICAgcmV0dXJuIF9jdXJyZW50UHJpY2UoYXVjdGlvbik7CiAgICB9Cgp9CgovLyBGaWxlOiBjb250cmFjdHMtb3JpZ2luL0F1Y3Rpb24vQWV0aGVyQ2xvY2tBdWN0aW9uLnNvbAoKLy8vIEB0aXRsZSBDbG9jayBhdWN0aW9uIG1vZGlmaWVkIGZvciBzYWxlIG9mIHByb3BlcnR5CmNvbnRyYWN0IEFldGhlckNsb2NrQXVjdGlvbiBpcyBDbG9ja0F1Y3Rpb24gewoKICAgIC8vIEBkZXYgU2FuaXR5IGNoZWNrIHRoYXQgYWxsb3dzIHVzIHRvIGVuc3VyZSB0aGF0IHdlIGFyZSBwb2ludGluZyB0byB0aGUKICAgIC8vICByaWdodCBhdWN0aW9uIGluIG91ciBzZXRTYWxlQXVjdGlvbkFkZHJlc3MoKSBjYWxsLgogICAgYm9vbCBwdWJsaWMgaXNBZXRoZXJDbG9ja0F1Y3Rpb24gPSB0cnVlOwoKICAgIC8vIFRyYWNrcyBsYXN0IDUgc2FsZSBwcmljZSBvZiBnZW4wIHByb3BlcnR5IHNhbGVzCiAgICB1aW50MjU2IHB1YmxpYyBzYWxlQ291bnQ7CiAgICB1aW50MjU2WzVdIHB1YmxpYyBsYXN0U2FsZVByaWNlczsKCiAgICAvLyBEZWxlZ2F0ZSBjb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gQWV0aGVyQ2xvY2tBdWN0aW9uKGFkZHJlc3MgX25mdEFkZHIsIHVpbnQyNTYgX2N1dCkgcHVibGljCiAgICAgIENsb2NrQXVjdGlvbihfbmZ0QWRkciwgX2N1dCkge30KCgogICAgLy8vIEBkZXYgQ3JlYXRlcyBhbmQgYmVnaW5zIGEgbmV3IGF1Y3Rpb24uCiAgICAvLy8gQHBhcmFtIF90b2tlbklkIC0gSUQgb2YgdG9rZW4gdG8gYXVjdGlvbiwgc2VuZGVyIG11c3QgYmUgb3duZXIuCiAgICAvLy8gQHBhcmFtIF9zdGFydGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBiZWdpbm5pbmcgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2VuZGluZ1ByaWNlIC0gUHJpY2Ugb2YgaXRlbSAoaW4gd2VpKSBhdCBlbmQgb2YgYXVjdGlvbi4KICAgIC8vLyBAcGFyYW0gX2R1cmF0aW9uIC0gTGVuZ3RoIG9mIGF1Y3Rpb24gKGluIHNlY29uZHMpLgogICAgLy8vIEBwYXJhbSBfc2VsbGVyIC0gU2VsbGVyLCBpZiBub3QgdGhlIG1lc3NhZ2Ugc2VuZGVyCiAgICBmdW5jdGlvbiBjcmVhdGVBdWN0aW9uKAogICAgICAgIHVpbnQyNTYgX3Rva2VuSWQsCiAgICAgICAgdWludDI1NiBfc3RhcnRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9lbmRpbmdQcmljZSwKICAgICAgICB1aW50MjU2IF9kdXJhdGlvbiwKICAgICAgICBhZGRyZXNzIF9zZWxsZXIKICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICBjYW5CZVN0b3JlZFdpdGgxMjhCaXRzKF9zdGFydGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDEyOEJpdHMoX2VuZGluZ1ByaWNlKQogICAgICAgIGNhbkJlU3RvcmVkV2l0aDY0Qml0cyhfZHVyYXRpb24pCiAgICB7CiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IGFkZHJlc3Mobm9uRnVuZ2libGVDb250cmFjdCkpOwogICAgICAgIF9lc2Nyb3coX3NlbGxlciwgX3Rva2VuSWQpOwogICAgICAgIEF1Y3Rpb24gbWVtb3J5IGF1Y3Rpb24gPSBBdWN0aW9uKAogICAgICAgICAgICBfc2VsbGVyLAogICAgICAgICAgICB1aW50MTI4KF9zdGFydGluZ1ByaWNlKSwKICAgICAgICAgICAgdWludDEyOChfZW5kaW5nUHJpY2UpLAogICAgICAgICAgICB1aW50NjQoX2R1cmF0aW9uKSwKICAgICAgICAgICAgdWludDY0KG5vdykKICAgICAgICApOwogICAgICAgIF9hZGRBdWN0aW9uKF90b2tlbklkLCBhdWN0aW9uKTsKICAgIH0KCiAgICAvLy8gQGRldiBVcGRhdGVzIGxhc3RTYWxlUHJpY2UgaWYgc2VsbGVyIGlzIHRoZSBuZnQgY29udHJhY3QKICAgIC8vLyBPdGhlcndpc2UsIHdvcmtzIHRoZSBzYW1lIGFzIGRlZmF1bHQgYmlkIG1ldGhvZC4KICAgIGZ1bmN0aW9uIGJpZCh1aW50MjU2IF90b2tlbklkKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgIHsKICAgICAgICAvLyBfYmlkIHZlcmlmaWVzIHRva2VuIElEIHNpemUKICAgICAgICBhZGRyZXNzIHNlbGxlciA9IHRva2VuSWRUb0F1Y3Rpb25bX3Rva2VuSWRdLnNlbGxlcjsKICAgICAgICB1aW50MjU2IHByaWNlID0gX2JpZChfdG9rZW5JZCwgbXNnLnZhbHVlKTsKICAgICAgICBfdHJhbnNmZXIobXNnLnNlbmRlciwgX3Rva2VuSWQpOwoKICAgICAgICAvLyBJZiBub3QgYSBnZW4wIGF1Y3Rpb24sIGV4aXQKICAgICAgICBpZiAoc2VsbGVyID09IGFkZHJlc3Mobm9uRnVuZ2libGVDb250cmFjdCkpIHsKICAgICAgICAgICAgLy8gVHJhY2sgZ2VuMCBzYWxlIHByaWNlcwogICAgICAgICAgICBsYXN0U2FsZVByaWNlc1tzYWxlQ291bnQgJSA1XSA9IHByaWNlOwogICAgICAgICAgICBzYWxlQ291bnQrKzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYXZlcmFnZVNhbGVQcmljZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IHN1bSA9IDA7CiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgNTsgaSsrKSB7CiAgICAgICAgICAgIHN1bSArPSBsYXN0U2FsZVByaWNlc1tpXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1bSAvIDU7CiAgICB9Cn0KCi8vIEZpbGU6IGNvbnRyYWN0cy1vcmlnaW4vQWV0aGVyQXVjdGlvbi5zb2wKCi8vLyBAdGl0bGUgSGFuZGxlcyBjcmVhdGluZyBhdWN0aW9ucyBmb3Igc2FsZSBhbmQgc2lyaW5nIG9mIHByb3BlcnRpZXMuCi8vLyAgVGhpcyB3cmFwcGVyIG9mIFJldmVyc2VBdWN0aW9uIGV4aXN0cyBvbmx5IHNvIHRoYXQgdXNlcnMgY2FuIGNyZWF0ZQovLy8gIGF1Y3Rpb25zIHdpdGggb25seSBvbmUgdHJhbnNhY3Rpb24uCmNvbnRyYWN0IEFldGhlckF1Y3Rpb24gaXMgQWV0aGVyT3duZXJzaGlwewoKICAgIC8vLyBAZGV2IFRoZSBhZGRyZXNzIG9mIHRoZSBDbG9ja0F1Y3Rpb24gY29udHJhY3QgdGhhdCBoYW5kbGVzIHNhbGVzIG9mIEFldGhlci4gVGhpcwogICAgLy8vICBzYW1lIGNvbnRyYWN0IGhhbmRsZXMgYm90aCBwZWVyLXRvLXBlZXIgc2FsZXMgYXMgd2VsbCBhcyB0aGUgZ2VuMCBzYWxlcyB3aGljaCBhcmUKICAgIC8vLyAgaW5pdGlhdGVkIGV2ZXJ5IDE1IG1pbnV0ZXMuCiAgICBBZXRoZXJDbG9ja0F1Y3Rpb24gcHVibGljIHNhbGVBdWN0aW9uOwoKICAgIC8vLyBAZGV2IFNldHMgdGhlIHJlZmVyZW5jZSB0byB0aGUgc2FsZSBhdWN0aW9uLgogICAgLy8vIEBwYXJhbSBfYWRkcmVzcyAtIEFkZHJlc3Mgb2Ygc2FsZSBjb250cmFjdC4KICAgIGZ1bmN0aW9uIHNldFNhbGVBdWN0aW9uQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzKSBwdWJsaWMgb25seUNFTyB7CiAgICAgICAgQWV0aGVyQ2xvY2tBdWN0aW9uIGNhbmRpZGF0ZUNvbnRyYWN0ID0gQWV0aGVyQ2xvY2tBdWN0aW9uKF9hZGRyZXNzKTsKCiAgICAgICAgLy8gTk9URTogdmVyaWZ5IHRoYXQgYSBjb250cmFjdCBpcyB3aGF0IHdlIGV4cGVjdAogICAgICAgIHJlcXVpcmUoY2FuZGlkYXRlQ29udHJhY3QuaXNBZXRoZXJDbG9ja0F1Y3Rpb24oKSk7CgogICAgICAgIC8vIFNldCB0aGUgbmV3IGNvbnRyYWN0IGFkZHJlc3MKICAgICAgICBzYWxlQXVjdGlvbiA9IGNhbmRpZGF0ZUNvbnRyYWN0OwogICAgfQoKICAgIC8vLyBAZGV2IFB1dCBhIHByb3BlcnR5IHVwIGZvciBhdWN0aW9uLgogICAgLy8vICBEb2VzIHNvbWUgb3duZXJzaGlwIHRyaWNrZXJ5IHRvIGNyZWF0ZSBhdWN0aW9ucyBpbiBvbmUgdHguCiAgICBmdW5jdGlvbiBjcmVhdGVTYWxlQXVjdGlvbigKICAgICAgICB1aW50MjU2IF9wcm9wZXJ0eUlkLAogICAgICAgIHVpbnQyNTYgX3N0YXJ0aW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZW5kaW5nUHJpY2UsCiAgICAgICAgdWludDI1NiBfZHVyYXRpb24KICAgICkKICAgICAgICBwdWJsaWMKICAgICAgICB3aGVuTm90UGF1c2VkCiAgICB7CiAgICAgICAgLy8gQXVjdGlvbiBjb250cmFjdCBjaGVja3MgaW5wdXQgc2l6ZXMKICAgICAgICAvLyBJZiBwcm9wZXJ0eSBpcyBhbHJlYWR5IG9uIGFueSBhdWN0aW9uLCB0aGlzIHdpbGwgdGhyb3cKICAgICAgICAvLyBiZWNhdXNlIGl0IHdpbGwgYmUgb3duZWQgYnkgdGhlIGF1Y3Rpb24gY29udHJhY3QuCiAgICAgICAgcmVxdWlyZShfb3ducyhtc2cuc2VuZGVyLCBfcHJvcGVydHlJZCkpOwogICAgICAgIF9hcHByb3ZlKF9wcm9wZXJ0eUlkLCBzYWxlQXVjdGlvbik7CiAgICAgICAgLy8gU2FsZSBhdWN0aW9uIHRocm93cyBpZiBpbnB1dHMgYXJlIGludmFsaWQgYW5kIGNsZWFycwogICAgICAgIC8vIHRyYW5zZmVyIGFuZCBzaXJlIGFwcHJvdmFsIGFmdGVyIGVzY3Jvd2luZyB0aGUgcHJvcGVydHkuCiAgICAgICAgc2FsZUF1Y3Rpb24uY3JlYXRlQXVjdGlvbigKICAgICAgICAgICAgX3Byb3BlcnR5SWQsCiAgICAgICAgICAgIF9zdGFydGluZ1ByaWNlLAogICAgICAgICAgICBfZW5kaW5nUHJpY2UsCiAgICAgICAgICAgIF9kdXJhdGlvbiwKICAgICAgICAgICAgbXNnLnNlbmRlcgogICAgICAgICk7CiAgICB9CgogICAgLy8vIEBkZXYgVHJhbnNmZXJzIHRoZSBiYWxhbmNlIG9mIHRoZSBzYWxlIGF1Y3Rpb24gY29udHJhY3QKICAgIC8vLyB0byB0aGUgQWV0aGVyQ29yZSBjb250cmFjdC4gV2UgdXNlIHR3by1zdGVwIHdpdGhkcmF3YWwgdG8KICAgIC8vLyBwcmV2ZW50IHR3byB0cmFuc2ZlciBjYWxscyBpbiB0aGUgYXVjdGlvbiBiaWQgZnVuY3Rpb24uCiAgICBmdW5jdGlvbiB3aXRoZHJhd0F1Y3Rpb25CYWxhbmNlcygpIGV4dGVybmFsIG9ubHlDT08gewogICAgICAgIHNhbGVBdWN0aW9uLndpdGhkcmF3QmFsYW5jZSgpOwogICAgfQp9CgovLyBGaWxlOiBjb250cmFjdHMtb3JpZ2luL0FldGhlckNvbnN0cnVjdC5zb2wKCi8vIEF1Y3Rpb24gd3JhcHBlciBmdW5jdGlvbnMKCgovLy8gQHRpdGxlIGFsbCBmdW5jdGlvbnMgcmVsYXRlZCB0byBjcmVhdGluZyBwcm9wZXJ0eQpjb250cmFjdCBBZXRoZXJDb25zdHJ1Y3QgaXMgQWV0aGVyQXVjdGlvbiB7CgogICAgdWludDI1NiBwdWJsaWMgZGlzdHJpY3RMaW1pdCA9IDE2OwogICAgdWludDI1NiBwdWJsaWMgc3RhcnRpbmdQcmljZSA9IDEgZXRoZXI7CiAgICB1aW50MjU2IHB1YmxpYyBhdWN0aW9uRHVyYXRpb24gPSAxIGRheXM7CgogICAgLy8vIEBkZXYgVW5pdHMgY2FuIGJlIGNvbnRydWN0ZWQgd2l0aGluIHB1YmxpYyBhbmQgb3duZWQgYnVpbGRpbmdzLgogICAgZnVuY3Rpb24gY3JlYXRlVW5pdCh1aW50MjU2IF9idWlsZGluZ0lkKQogICAgICAgIHB1YmxpYwogICAgICAgIHBheWFibGUKICAgICAgICByZXR1cm5zKHVpbnQyNTYpCiAgICB7CiAgICAgICAgcmVxdWlyZShjYW5DcmVhdGVVbml0KF9idWlsZGluZ0lkKSk7CiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gdW5pdENyZWF0aW9uRmVlKTsKICAgICAgICBpZiAobXNnLnZhbHVlID4gdW5pdENyZWF0aW9uRmVlKQogICAgICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKG1zZy52YWx1ZSAtIHVuaXRDcmVhdGlvbkZlZSk7CiAgICAgICAgdWludDI1NiBwcm9wZXJ0eUlkID0gX2NyZWF0ZVVuaXRIZWxwZXIoX2J1aWxkaW5nSWQsIG1zZy5zZW5kZXIpOwogICAgICAgIHJldHVybiBwcm9wZXJ0eUlkOwogICAgfQoKICAgIC8vLyBAZGV2IENyZWF0aW9uIG9mIHVuaXQgcHJvcGVydGllcy4gT25seSBjYWxsYWJsZSBieSBDT08KICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXRPbW5pKAogICAgICB1aW50MzIgX2J1aWxkaW5nSWQsCiAgICAgIGFkZHJlc3MgX293bmVyCiAgICApCiAgICAgIHB1YmxpYwogICAgICBvbmx5Q09PCiAgICB7CiAgICAgICAgaWYgKF9vd25lciA9PSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgICBfb3duZXIgPSBjb29BZGRyZXNzOwogICAgICAgIH0KICAgICAgICByZXF1aXJlKGNhbkNyZWF0ZVVuaXQoX2J1aWxkaW5nSWQpKTsKICAgICAgICBfY3JlYXRlVW5pdEhlbHBlcihfYnVpbGRpbmdJZCwgX293bmVyKTsKICAgIH0KCiAgICAvLy8gQGRldiBDcmVhdGlvbiBvZiBidWlsZGluZyBwcm9wZXJ0aWVzLiBPbmx5IGNhbGxhYmxlIGJ5IENPTwogICAgZnVuY3Rpb24gY3JlYXRlQnVpbGRpbmdPbW5pKAogICAgICB1aW50MzIgX2Rpc3RyaWN0SWQsCiAgICAgIHVpbnQ4IF94LAogICAgICB1aW50OCBfeSwKICAgICAgdWludDggX3osCiAgICAgIHVpbnQ4IF9keCwKICAgICAgdWludDggX2R6LAogICAgICBhZGRyZXNzIF9vd25lciwKICAgICAgYm9vbCBfb3BlbgogICAgKQogICAgICBwdWJsaWMKICAgICAgb25seUNPTwogICAgewogICAgICAgIGlmIChfb3duZXIgPT0gYWRkcmVzcygwKSkgewogICAgICAgICAgICAgX293bmVyID0gY29vQWRkcmVzczsKICAgICAgICB9CiAgICAgICAgX2NyZWF0ZUJ1aWxkaW5nKF9kaXN0cmljdElkLCBfeCwgX3ksIF96LCBfZHgsIF9keiwgX293bmVyLCBfb3Blbik7CiAgICB9CgogICAgLy8vIEBkZXYgQ3JlYXRpb24gb2YgZGlzdHJpY3QgcHJvcGVydGllcywgdXAgdG8gYSBsaW1pdC4gT25seSBjYWxsYWJsZSBieSBDT08KICAgIGZ1bmN0aW9uIGNyZWF0ZURpc3RyaWN0T21uaSgKICAgICAgdWludDggX3gsCiAgICAgIHVpbnQ4IF96LAogICAgICB1aW50OCBfZHgsCiAgICAgIHVpbnQ4IF9kegogICAgKQogICAgICBwdWJsaWMKICAgICAgb25seUNPTwogICAgewogICAgICByZXF1aXJlKGRpc3RyaWN0cy5sZW5ndGggPCBkaXN0cmljdExpbWl0KTsKICAgICAgX2NyZWF0ZURpc3RyaWN0KF94LCBfeiwgX2R4LCBfZHopOwogICAgfQoKCiAgICAvLy8gQGRldiBDcmVhdGVzIGEgbmV3IHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGRldGFpbHMgYW5kCiAgICAvLy8gIGNyZWF0ZXMgYW4gYXVjdGlvbiBmb3IgaXQuIE9ubHkgY2FsbGFibGUgYnkgQ09PLgogICAgZnVuY3Rpb24gY3JlYXRlQnVpbGRpbmdBdWN0aW9uKAogICAgICB1aW50MzIgX2Rpc3RyaWN0SWQsCiAgICAgIHVpbnQ4IF94LAogICAgICB1aW50OCBfeSwKICAgICAgdWludDggX3osCiAgICAgIHVpbnQ4IF9keCwKICAgICAgdWludDggX2R6LAogICAgICBib29sIF9vcGVuCiAgICApIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgICB1aW50MjU2IHByb3BlcnR5SWQgPSBfY3JlYXRlQnVpbGRpbmcoX2Rpc3RyaWN0SWQsIF94LCBfeSwgX3osIF9keCwgX2R6LCBhZGRyZXNzKHRoaXMpLCBfb3Blbik7CiAgICAgICAgX2FwcHJvdmUocHJvcGVydHlJZCwgc2FsZUF1Y3Rpb24pOwoKICAgICAgICBzYWxlQXVjdGlvbi5jcmVhdGVBdWN0aW9uKAogICAgICAgICAgICBwcm9wZXJ0eUlkLAogICAgICAgICAgICBfY29tcHV0ZU5leHRQcmljZSgpLAogICAgICAgICAgICAwLAogICAgICAgICAgICBhdWN0aW9uRHVyYXRpb24sCiAgICAgICAgICAgIGFkZHJlc3ModGhpcykKICAgICAgICApOwogICAgfQoKICAgIC8vLyBAZGV2IFVwZGF0ZXMgdGhlIG1pbmltdW0gcGF5bWVudCByZXF1aXJlZCBmb3IgY2FsbGluZyBjcmVhdGVVbml0KCkuIENhbiBvbmx5CiAgICAvLy8gIGJlIGNhbGxlZCBieSB0aGUgQ09PIGFkZHJlc3MuCiAgICBmdW5jdGlvbiBzZXRVbml0Q3JlYXRpb25GZWUodWludDI1NiBfdmFsdWUpIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgICB1bml0Q3JlYXRpb25GZWUgPSBfdmFsdWU7CiAgICB9CgogICAgLy8vIEBkZXYgVXBkYXRlIHdvcmxkIHByb2dyZXNzaW9uIGZhY3RvciBhbGxvd2luZyBmb3IgYnVpbGRpbmdzIHRvIGdyb3cgdGFsbGVyCiAgICAvLyAgIGFzIHRoZSBjaXR5IGV4cGFuZHMuIE9ubHkgY2FsbGFibGUgYnkgQ09PLgogICAgZnVuY3Rpb24gc2V0UHJvZ3Jlc3ModWludDI1NiBfcHJvZ3Jlc3MpIHB1YmxpYyBvbmx5Q09PIHsKICAgICAgICByZXF1aXJlKF9wcm9ncmVzcyA8PSAxMDApOwogICAgICAgIHJlcXVpcmUoX3Byb2dyZXNzID4gcHJvZ3Jlc3MpOwogICAgICAgIHByb2dyZXNzID0gX3Byb2dyZXNzOwogICAgfQoKICAgIC8vLyBAZGV2IFNldCBwcm9wZXJ0eSBkYXRhIHVwZGF0ZXMgZmxhZy4gT25seSBjYWxsYWJsZSBieSBDT08uCiAgICBmdW5jdGlvbiBzZXRVcGRhdGVTdGF0ZShib29sIF91cGRhdGVFbmFibGVkKSBwdWJsaWMgb25seUNPTyB7CiAgICAgICAgdXBkYXRlRW5hYmxlZCA9IF91cGRhdGVFbmFibGVkOwogICAgfQoKICAgIC8vLyBAZGV2IENvbXB1dGVzIHRoZSBuZXh0IGF1Y3Rpb24gc3RhcnRpbmcgcHJpY2UsIGdpdmVuIHRoZSBhdmVyYWdlIG9mIHRoZSBwYXN0CiAgICAvLy8gIDUgcHJpY2VzICsgNTAlLgogICAgZnVuY3Rpb24gX2NvbXB1dGVOZXh0UHJpY2UoKSBpbnRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGF2ZVByaWNlID0gc2FsZUF1Y3Rpb24uYXZlcmFnZVNhbGVQcmljZSgpOwoKICAgICAgICAvLyBzYW5pdHkgY2hlY2sgdG8gZW5zdXJlIHdlIGRvbid0IG92ZXJmbG93IGFyaXRobWV0aWMgKHRoaXMgYmlnIG51bWJlciBpcyAyXjEyOC0xKS4KICAgICAgICByZXF1aXJlKGF2ZVByaWNlIDwgMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1KTsKCiAgICAgICAgdWludDI1NiBuZXh0UHJpY2UgPSBhdmVQcmljZSArIChhdmVQcmljZSAvIDIpOwoKICAgICAgICAvLyBXZSBuZXZlciBhdWN0aW9uIGZvciBsZXNzIHRoYW4gc3RhcnRpbmcgcHJpY2UKICAgICAgICBpZiAobmV4dFByaWNlIDwgc3RhcnRpbmdQcmljZSkgewogICAgICAgICAgICBuZXh0UHJpY2UgPSBzdGFydGluZ1ByaWNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5leHRQcmljZTsKICAgIH0KfQoKLy8gRmlsZTogY29udHJhY3RzLW9yaWdpbi9BZXRoZXJDb3JlLnNvbAoKLy8vIEB0aXRsZSBBZXRoZXI6IEEgY2l0eSBvbiB0aGUgRXRoZXJldW0gYmxvY2tjaGFpbi4KLy8vIEBhdXRob3IgQXhpb20gWmVuIChodHRwczovL3d3dy5heGlvbXplbi5jbykKY29udHJhY3QgQWV0aGVyQ29yZSBpcyBBZXRoZXJDb25zdHJ1Y3QgewoKICAgIC8vIFRoaXMgaXMgdGhlIG1haW4gQWV0aGVyIGNvbnRyYWN0LiBJbiBvcmRlciB0byBrZWVwIG91ciBjb2RlIHNlcGVyYXRlZCBpbnRvIGxvZ2ljYWwgc2VjdGlvbnMsCiAgICAvLyB3ZSd2ZSBicm9rZW4gaXQgdXAgaW4gdHdvIHdheXMuICBUaGUgYXVjdGlvbnMgYXJlIHNlcGVyYXRlIHNpbmNlIHRoZWlyIGxvZ2ljIGlzIHNvbWV3aGF0IGNvbXBsZXgKICAgIC8vIGFuZCB0aGVyZSdzIGFsd2F5cyBhIHJpc2sgb2Ygc3VidGxlIGJ1Z3MuIEJ5IGtlZXBpbmcgdGhlbSBpbiB0aGVpciBvd24gY29udHJhY3RzLCB3ZSBjYW4gdXBncmFkZQogICAgLy8gdGhlbSB3aXRob3V0IGRpc3J1cHRpbmcgdGhlIG1haW4gY29udHJhY3QgdGhhdCB0cmFja3MgcHJvcGVydHkgb3duZXJzaGlwLgogICAgLy8KICAgIC8vIFNlY29uZGx5LCB3ZSBicmVhayB0aGUgY29yZSBjb250cmFjdCBpbnRvIG11bHRpcGxlIGZpbGVzIHVzaW5nIGluaGVyaXRlbmNlLCBvbmUgZm9yIGVhY2ggbWFqb3IKICAgIC8vIGZhY2V0IG9mIGZ1bmN0aW9uYWxpdHkgb2YgQWV0aGVyLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHJlbGF0ZWQgY29kZSBidW5kbGVkIHRvZ2V0aGVyIHdoaWxlIHN0aWxsCiAgICAvLyBhdm9pZGluZyBhIHNpbmdsZSBnaWFudCBmaWxlIHdpdGggZXZlcnl0aGluZyBpbiBpdC4gVGhlIGJyZWFrZG93biBpcyBhcyBmb2xsb3dzOgogICAgLy8KICAgIC8vICAgICAgLSBBZXRoZXJCYXNlOiBUaGlzIGlzIHdoZXJlIHdlIGRlZmluZSB0aGUgbW9zdCBmdW5kYW1lbnRhbCBjb2RlIHNoYXJlZCB0aHJvdWdob3V0IHRoZSBjb3JlCiAgICAvLyAgICAgICAgICAgICBmdW5jdGlvbmFsaXR5LiBUaGlzIGluY2x1ZGVzIG91ciBtYWluIGRhdGEgc3RvcmFnZSwgY29uc3RhbnRzIGFuZCBkYXRhIHR5cGVzLCBwbHVzCiAgICAvLyAgICAgICAgICAgICBpbnRlcm5hbCBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIHRoZXNlIGl0ZW1zLgogICAgLy8KICAgIC8vICAgICAgLSBBZXRoZXJBY2Nlc3NDb250cm9sOiBUaGlzIGNvbnRyYWN0IG1hbmFnZXMgdGhlIHZhcmlvdXMgYWRkcmVzc2VzIGFuZCBjb25zdHJhaW50cyBmb3Igb3BlcmF0aW9ucwogICAgLy8gICAgICAgICAgICAgdGhhdCBjYW4gYmUgZXhlY3V0ZWQgb25seSBieSBzcGVjaWZpYyByb2xlcy4gTmFtZWx5IENFTywgQ0ZPIGFuZCBDT08uCiAgICAvLwogICAgLy8gICAgICAtIEFldGhlck93bmVyc2hpcDogVGhpcyBwcm92aWRlcyB0aGUgbWV0aG9kcyByZXF1aXJlZCBmb3IgYmFzaWMgbm9uLWZ1bmdpYmxlIHRva2VuCiAgICAvLyAgICAgICAgICAgICB0cmFuc2FjdGlvbnMsIGZvbGxvd2luZyB0aGUgZHJhZnQgRVJDLTcyMSBzcGVjIChodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzIxKS4KICAgIC8vCiAgICAvLyAgICAgIC0gQWV0aGVyQXVjdGlvbjogSGVyZSB3ZSBoYXZlIHRoZSBwdWJsaWMgbWV0aG9kcyBmb3IgYXVjdGlvbmluZyBvciBiaWRkaW5nIG9uIHByb3BlcnR5LgogICAgLy8gICAgICAgICAgICAgVGhlIGFjdHVhbCBhdWN0aW9uIGZ1bmN0aW9uYWxpdHkgaXMgaGFuZGxlZCBpbiB0d28gc2libGluZyBjb250cmFjdHMgd2hpbGUgYXVjdGlvbgogICAgLy8gICAgICAgICAgICAgY3JlYXRpb24gYW5kIGJpZGRpbmcgaXMgbW9zdGx5IG1lZGlhdGVkIHRocm91Z2ggdGhpcyBmYWNldCBvZiB0aGUgY29yZSBjb250cmFjdC4KICAgIC8vCiAgICAvLyAgICAgIC0gQWV0aGVyQ29uc3RydWN0OiBUaGlzIGZpbmFsIGZhY2V0IGNvbnRhaW5zIHRoZSBmdW5jdGlvbmFsaXR5IHdlIHVzZSBmb3IgY3JlYXRpbmcgbmV3IGdlbjAgY2F0cy4KCiAgICAvLyAgICAgICAgICAgICB0aGUgY29tbXVuaXR5IGlzIG5ldykuCgogICAgLy8gU2V0IGluIGNhc2UgdGhlIGNvcmUgY29udHJhY3QgaXMgYnJva2VuIGFuZCBhbiB1cGdyYWRlIGlzIHJlcXVpcmVkCiAgICBhZGRyZXNzIHB1YmxpYyBuZXdDb250cmFjdEFkZHJlc3M7CgogICAgLy8vIEBub3RpY2UgQ3JlYXRlcyB0aGUgbWFpbiBBZXRoZXIgc21hcnQgY29udHJhY3QgaW5zdGFuY2UuCiAgICBmdW5jdGlvbiBBZXRoZXJDb3JlKCkgcHVibGljIHsKICAgICAgICAvLyBTdGFydHMgcGF1c2VkLgogICAgICAgIHBhdXNlZCA9IHRydWU7CgogICAgICAgIC8vIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCBpcyB0aGUgaW5pdGlhbCBDRU8KICAgICAgICBjZW9BZGRyZXNzID0gbXNnLnNlbmRlcjsKCiAgICAgICAgLy8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0IGlzIGFsc28gdGhlIGluaXRpYWwgQ09PCiAgICAgICAgY29vQWRkcmVzcyA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBkZXYgVXNlZCB0byBtYXJrIHRoZSBzbWFydCBjb250cmFjdCBhcyB1cGdyYWRlZCwgaW4gY2FzZSB0aGVyZSBpcyBhIHNlcmlvdXMKICAgIC8vLyAgYnJlYWtpbmcgYnVnLiBUaGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcgYnV0IGtlZXAgdHJhY2sgb2YgdGhlIG5ldyBjb250cmFjdCBhbmQKICAgIC8vLyAgZW1pdCBhIG1lc3NhZ2UgaW5kaWNhdGluZyB0aGF0IHRoZSBuZXcgYWRkcmVzcyBpcyBzZXQuIEl0J3MgdXAgdG8gY2xpZW50cyBvZiB0aGlzCiAgICAvLy8gIGNvbnRyYWN0IHRvIHVwZGF0ZSB0byB0aGUgbmV3IGNvbnRyYWN0IGFkZHJlc3MgaW4gdGhhdCBjYXNlLiAoVGhpcyBjb250cmFjdCB3aWxsCiAgICAvLy8gIGJlIHBhdXNlZCBpbmRlZmluaXRlbHkgaWYgc3VjaCBhbiB1cGdyYWRlIHRha2VzIHBsYWNlLikKICAgIC8vLyBAcGFyYW0gX3YyQWRkcmVzcyBuZXcgYWRkcmVzcwogICAgZnVuY3Rpb24gc2V0TmV3QWRkcmVzcyhhZGRyZXNzIF92MkFkZHJlc3MpIHB1YmxpYyBvbmx5Q0VPIHdoZW5QYXVzZWQgewogICAgICAgIC8vIFNlZSBSRUFETUUubWQgZm9yIHVwZGdyYWRlIHBsYW4KICAgICAgICBuZXdDb250cmFjdEFkZHJlc3MgPSBfdjJBZGRyZXNzOwogICAgICAgIENvbnRyYWN0VXBncmFkZShfdjJBZGRyZXNzKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBObyB0aXBwaW5nIQogICAgLy8vIEBkZXYgUmVqZWN0IGFsbCBFdGhlciBmcm9tIGJlaW5nIHNlbnQgaGVyZSwgdW5sZXNzIGl0J3MgZnJvbSBvbmUgb2YgdGhlCiAgICAvLy8gIHR3byBhdWN0aW9uIGNvbnRyYWN0cy4gKEhvcGVmdWxseSwgd2UgY2FuIHByZXZlbnQgdXNlciBhY2NpZGVudHMuKQogICAgZnVuY3Rpb24oKSBleHRlcm5hbCBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKAogICAgICAgICAgICBtc2cuc2VuZGVyID09IGFkZHJlc3Moc2FsZUF1Y3Rpb24pCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBSZXR1cm5zIGFsbCB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBwcm9wZXJ0eS4KICAgIC8vLyBAcGFyYW0gX2lkIFRoZSBJRCBvZiB0aGUgcHJvcGVydHkgb2YgaW50ZXJlc3QuCiAgICBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh1aW50MjU2IF9pZCkKICAgICAgICBwdWJsaWMKICAgICAgICB2aWV3CiAgICAgICAgcmV0dXJucyAoCiAgICAgICAgdWludDMyIHBhcmVudCwKICAgICAgICB1aW50OCBjbGFzcywKICAgICAgICB1aW50OCB4LAogICAgICAgIHVpbnQ4IHksCiAgICAgICAgdWludDggeiwKICAgICAgICB1aW50OCBkeCwKICAgICAgICB1aW50OCBkeiwKICAgICAgICB1aW50OCBoZWlnaHQKICAgICkgewogICAgICAgIFByb3BlcnR5IHN0b3JhZ2UgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW19pZF07CiAgICAgICAgcGFyZW50ID0gdWludDMyKHByb3BlcnR5LnBhcmVudCk7CiAgICAgICAgY2xhc3MgPSB1aW50OChwcm9wZXJ0eS5jbGFzcyk7CgogICAgICAgIGhlaWdodCA9IHVpbnQ4KHByb3BlcnR5LnkpOwogICAgICAgIGlmIChwcm9wZXJ0eS5jbGFzcyA9PSBQcm9wZXJ0eUNsYXNzLkJVSUxESU5HKSB7CiAgICAgICAgICB5ID0gdWludDgoX2NvbXB1dGVIZWlnaHQocHJvcGVydHkueCwgcHJvcGVydHkueiwgcHJvcGVydHkueSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB5ID0gdWludDgocHJvcGVydHkueSk7CiAgICAgICAgfQoKICAgICAgICB4ID0gdWludDgocHJvcGVydHkueCk7CiAgICAgICAgeiA9IHVpbnQ4KHByb3BlcnR5LnopOwogICAgICAgIGR4ID0gdWludDgocHJvcGVydHkuZHgpOwogICAgICAgIGR6ID0gdWludDgocHJvcGVydHkuZHopOwogICAgfQoKICAgIC8vLyBAZGV2IE92ZXJyaWRlIHVucGF1c2Ugc28gaXQgcmVxdWlyZXMgYWxsIGV4dGVybmFsIGNvbnRyYWN0IGFkZHJlc3NlcwogICAgLy8vICB0byBiZSBzZXQgYmVmb3JlIGNvbnRyYWN0IGNhbiBiZSB1bnBhdXNlZC4gQWxzbywgd2UgY2FuJ3QgaGF2ZQogICAgLy8vICBuZXdDb250cmFjdEFkZHJlc3Mgc2V0IGVpdGhlciwgYmVjYXVzZSB0aGVuIHRoZSBjb250cmFjdCB3YXMgdXBncmFkZWQuCiAgICBmdW5jdGlvbiB1bnBhdXNlKCkgcHVibGljIG9ubHlDRU8gd2hlblBhdXNlZCB7CiAgICAgICAgcmVxdWlyZShzYWxlQXVjdGlvbiAhPSBhZGRyZXNzKDApKTsKICAgICAgICByZXF1aXJlKG5ld0NvbnRyYWN0QWRkcmVzcyA9PSBhZGRyZXNzKDApKTsKICAgICAgICAvLyBBY3R1YWxseSB1bnBhdXNlIHRoZSBjb250cmFjdC4KICAgICAgICBzdXBlci51bnBhdXNlKCk7CiAgICB9Cn0='.
	

]
