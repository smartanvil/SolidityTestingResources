Class {
	#name : #SRT76bc9e61a1904b82cbf70d1fd9c0f8a120483bbb,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT76bc9e61a1904b82cbf70d1fd9c0f8a120483bbb >> base64 [
	^ ''.
	

]
