Class {
	#name : #SRT14582A41e55827E8D408022E54E2a1251a14c56A,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT14582A41e55827E8D408022E54E2a1251a14c56A >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7CgoKLyoqCiAqIEB0aXRsZSBTYWZlTWF0aAogKiBAZGV2IE1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MgdGhhdCB0aHJvdyBvbiBlcnJvcgogKi8KbGlicmFyeSBTYWZlTWF0aCB7CgogIC8qKgogICogQGRldiBNdWx0aXBsaWVzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cuCiAgKi8KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgaWYgKGEgPT0gMCkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGMgLyBhID09IGIpOwogICAgcmV0dXJuIGM7CiAgfQoKICAvKioKICAqIEBkZXYgSW50ZWdlciBkaXZpc2lvbiBvZiB0d28gbnVtYmVycywgdHJ1bmNhdGluZyB0aGUgcXVvdGllbnQuCiAgKi8KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIC8qKgogICogQGRldiBTdWJzdHJhY3RzIHR3byBudW1iZXJzLCB0aHJvd3Mgb24gb3ZlcmZsb3cgKGkuZS4gaWYgc3VidHJhaGVuZCBpcyBncmVhdGVyIHRoYW4gbWludWVuZCkuCiAgKi8KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICAvKioKICAqIEBkZXYgQWRkcyB0d28gbnVtYmVycywgdGhyb3dzIG9uIG92ZXJmbG93LgogICovCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBwdXJlIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9Cn0KCmNvbnRyYWN0IEtpbmdPZlRoZUV0aGlsbCB7CiAgdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQyNTY7ICAKICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICBhZGRyZXNzIHB1YmxpYyBraW5nOwogIHN0cmluZyBwdWJsaWMga2luZ3NNZXNzYWdlOwogIHVpbnQyNTYgcHVibGljIGJpZEV4cGlyZUJsb2NrTGVuZ3RoID0gMTI7CiAgdWludDI1NiBwdWJsaWMgbmV4dEJpZEV4cGlyZUJsb2NrTGVuZ3RoOwogIHVpbnQyNTYgcHVibGljIGRldkZlZVBlcmNlbnQgPSAxOwogIHVpbnQyNTYgcHVibGljIHJvbGxvdmVyUGVyY2VudCA9IDU7CiAgdWludDI1NiBwdWJsaWMgbGFzdEJpZEFtb3VudDsKICB1aW50MjU2IHB1YmxpYyBsYXN0QmlkQmxvY2s7CiAgdWludDI1NiBwdWJsaWMgY3VycmVudFJvdW5kTnVtYmVyOwogIHVpbnQyNTYgcHVibGljIGN1cnJlbnRCaWROdW1iZXI7CiAgdWludDI1NiBwdWJsaWMgbWF4TWVzc2FnZUNoYXJzID0gMTQwOwogIG1hcHBpbmcodWludDI1NiA9PiBhZGRyZXNzKSByb3VuZFRvS2luZzsKICBtYXBwaW5nKHVpbnQyNTYgPT4gdWludDI1Nikgcm91bmRUb1dpbm5pbmdzOwogIG1hcHBpbmcodWludDI1NiA9PiB1aW50MjU2KSByb3VuZFRvRmluYWxCaWQ7CiAgbWFwcGluZyh1aW50MjU2ID0+IHN0cmluZykgcm91bmRUb0ZpbmFsTWVzc2FnZTsKCiAgZXZlbnQgTmV3S2luZygKICAgIHVpbnQyNTYgaW5kZXhlZCByb3VuZE51bWJlciwKICAgIGFkZHJlc3Mga2luZ0FkZHJlc3MsCiAgICBzdHJpbmcga2luZ01lc3NhZ2UsCiAgICB1aW50MjU2IGJpZEFtb3VudCwKICAgIHVpbnQyNTYgaW5kZXhlZCBiaWROdW1iZXIsCiAgICB1aW50MjU2IGluZGV4ZWQgYmlkQmxvY2tOdW1iZXIKICApOwoKICBmdW5jdGlvbiBLaW5nT2ZUaGVFdGhpbGwgKCkgcHVibGljIHsKICAgIG93bmVyID0gbXNnLnNlbmRlcjsKICB9CgogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsKICAgIHJlcXVpcmUob3duZXIgPT0gbXNnLnNlbmRlcik7CiAgICBfOwogIH0KICAKICBmdW5jdGlvbiBzZXREZXZGZWUgKHVpbnQyNTYgX24pIG9ubHlPd25lcigpIHB1YmxpYyB7CgkgIHJlcXVpcmUoX24gPj0gMCAmJiBfbiA8PSAxMCk7CiAgICBkZXZGZWVQZXJjZW50ID0gX247CiAgfQoKICBmdW5jdGlvbiBzZXRSb2xsb3ZlciAodWludDI1NiBfbikgb25seU93bmVyKCkgcHVibGljIHsKCSAgcmVxdWlyZShfbiA+PSAxICYmIF9uIDw9IDMwKTsKICAgIHJvbGxvdmVyUGVyY2VudCA9IF9uOwogIH0KCiAgZnVuY3Rpb24gc2V0TmV4dEJpZEV4cGlyZUJsb2NrTGVuZ3RoICh1aW50MjU2IF9uKSBvbmx5T3duZXIoKSBwdWJsaWMgewoJICByZXF1aXJlKF9uID49IDEwICYmIF9uIDw9IDEwMDAwKTsKICAgIG5leHRCaWRFeHBpcmVCbG9ja0xlbmd0aCA9IF9uOwogIH0KCiAgZnVuY3Rpb24gc2V0T3duZXIgKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIoKSBwdWJsaWMgewogICAgb3duZXIgPSBfb3duZXI7CiAgfQoKICBmdW5jdGlvbiBiaWQgKHVpbnQyNTYgX3JvdW5kTnVtYmVyLCBzdHJpbmcgX21lc3NhZ2UpIHBheWFibGUgcHVibGljIHsKICAgIHJlcXVpcmUoIWlzQ29udHJhY3QobXNnLnNlbmRlcikpOwogICAgcmVxdWlyZShieXRlcyhfbWVzc2FnZSkubGVuZ3RoIDw9IG1heE1lc3NhZ2VDaGFycyk7CiAgICByZXF1aXJlKG1zZy52YWx1ZSA+IDApOwogICAgCiAgICBpZiAoX3JvdW5kTnVtYmVyID09IGN1cnJlbnRSb3VuZE51bWJlciAmJiAhcm91bmRFeHBpcmVkKCkpIHsKICAgICAgLy8gYmlkIGluIGFjdGl2ZSByb3VuZAogICAgICByZXF1aXJlKG1zZy52YWx1ZSA+IGxhc3RCaWRBbW91bnQpOwogICAgfWVsc2UgaWYgKF9yb3VuZE51bWJlciA9PSAoY3VycmVudFJvdW5kTnVtYmVyKzEpICYmIHJvdW5kRXhwaXJlZCgpKSB7CiAgICAgIC8vIGZpcnN0IGJpZCBvZiBuZXcgcm91bmQsIHByb2Nlc3Mgb2xkIHJvdW5kCiAgICAgIHZhciBsYXN0Um91bmRQb3RCYWxhbmNlID0gdGhpcy5iYWxhbmNlLnN1Yihtc2cudmFsdWUpOwogICAgICB1aW50MjU2IGRldkZlZSA9IGxhc3RSb3VuZFBvdEJhbGFuY2UubXVsKGRldkZlZVBlcmNlbnQpLmRpdigxMDApOwogICAgICBvd25lci50cmFuc2ZlcihkZXZGZWUpOwogICAgICB1aW50MjU2IHdpbm5pbmdzID0gbGFzdFJvdW5kUG90QmFsYW5jZS5zdWIoZGV2RmVlKS5tdWwoMTAwIC0gcm9sbG92ZXJQZXJjZW50KS5kaXYoMTAwKTsKICAgICAga2luZy50cmFuc2Zlcih3aW5uaW5ncyk7CgogICAgICAvLyBzYXZlIHByZXZpb3VzIHJvdW5kIGRhdGEKICAgICAgcm91bmRUb0tpbmdbY3VycmVudFJvdW5kTnVtYmVyXSA9IGtpbmc7CiAgICAgIHJvdW5kVG9XaW5uaW5nc1tjdXJyZW50Um91bmROdW1iZXJdID0gd2lubmluZ3M7CiAgICAgIHJvdW5kVG9GaW5hbEJpZFtjdXJyZW50Um91bmROdW1iZXJdID0gbGFzdEJpZEFtb3VudDsKICAgICAgcm91bmRUb0ZpbmFsTWVzc2FnZVtjdXJyZW50Um91bmROdW1iZXJdID0ga2luZ3NNZXNzYWdlOwoKICAgICAgY3VycmVudEJpZE51bWJlciA9IDA7CiAgICAgIGN1cnJlbnRSb3VuZE51bWJlcisrOwoKICAgICAgaWYgKG5leHRCaWRFeHBpcmVCbG9ja0xlbmd0aCAhPSAwKSB7CiAgICAgICAgYmlkRXhwaXJlQmxvY2tMZW5ndGggPSBuZXh0QmlkRXhwaXJlQmxvY2tMZW5ndGg7CiAgICAgICAgbmV4dEJpZEV4cGlyZUJsb2NrTGVuZ3RoID0gMDsKICAgICAgfQogICAgfWVsc2UgewogICAgICByZXF1aXJlKGZhbHNlKTsKICAgIH0KCiAgICAvLyBuZXcga2luZwogICAga2luZyA9IG1zZy5zZW5kZXI7CiAgICBraW5nc01lc3NhZ2UgPSBfbWVzc2FnZTsKICAgIGxhc3RCaWRBbW91bnQgPSBtc2cudmFsdWU7CiAgICBsYXN0QmlkQmxvY2sgPSBibG9jay5udW1iZXI7CgogICAgTmV3S2luZyhjdXJyZW50Um91bmROdW1iZXIsIGtpbmcsIGtpbmdzTWVzc2FnZSwgbGFzdEJpZEFtb3VudCwgY3VycmVudEJpZE51bWJlciwgbGFzdEJpZEJsb2NrKTsKCiAgICBjdXJyZW50QmlkTnVtYmVyKys7CiAgfQoKICBmdW5jdGlvbiByb3VuZEV4cGlyZWQoKSBwdWJsaWMgdmlldyByZXR1cm5zIChib29sKSB7CiAgICByZXR1cm4gYmxvY2tzU2luY2VMYXN0QmlkKCkgPj0gYmlkRXhwaXJlQmxvY2tMZW5ndGg7CiAgfQoKICBmdW5jdGlvbiBibG9ja3NSZW1haW5pbmcoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICBpZiAocm91bmRFeHBpcmVkKCkpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9ZWxzZSB7CiAgICAgIHJldHVybiBiaWRFeHBpcmVCbG9ja0xlbmd0aCAtIGJsb2Nrc1NpbmNlTGFzdEJpZCgpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gYmxvY2tzU2luY2VMYXN0QmlkKCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NikgewogICAgcmV0dXJuIGJsb2NrLm51bWJlciAtIGxhc3RCaWRCbG9jazsKICB9CgogIGZ1bmN0aW9uIGVzdGltYXRlTmV4dFBvdFNlZWRBbW91bnQoKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgIHJldHVybiB0aGlzLmJhbGFuY2UubXVsKDEwMCAtIGRldkZlZVBlcmNlbnQpLmRpdigxMDApLm11bChyb2xsb3ZlclBlcmNlbnQpLmRpdigxMDApOwogIH0KCiAgZnVuY3Rpb24gZ2V0Um91bmRTdGF0ZSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKGJvb2wgX2N1cnJlbnRSb3VuZEV4cGlyZWQsIHVpbnQyNTYgX25leHRSb3VuZFBvdFNlZWRBbW91bnRFc3RpbWF0ZSwgdWludDI1NiBfcm91bmROdW1iZXIsIHVpbnQyNTYgX2JpZE51bWJlciwgYWRkcmVzcyBfa2luZywgc3RyaW5nIF9raW5nc01lc3NhZ2UsIHVpbnQyNTYgX2xhc3RCaWRBbW91bnQsIHVpbnQyNTYgX2Jsb2Nrc1JlbWFpbmluZywgdWludDI1NiBfcG90QW1vdW50LCB1aW50MjU2IF9ibG9ja051bWJlciwgdWludDI1NiBfYmlkRXhwaXJlQmxvY2tMZW5ndGgpIHsKICAgIF9jdXJyZW50Um91bmRFeHBpcmVkID0gcm91bmRFeHBpcmVkKCk7CiAgICBfbmV4dFJvdW5kUG90U2VlZEFtb3VudEVzdGltYXRlID0gZXN0aW1hdGVOZXh0UG90U2VlZEFtb3VudCgpOwogICAgX3JvdW5kTnVtYmVyID0gY3VycmVudFJvdW5kTnVtYmVyOwogICAgX2JpZE51bWJlciA9IGN1cnJlbnRCaWROdW1iZXI7CiAgICBfa2luZyA9IGtpbmc7CiAgICBfa2luZ3NNZXNzYWdlID0ga2luZ3NNZXNzYWdlOwogICAgX2xhc3RCaWRBbW91bnQgPSBsYXN0QmlkQW1vdW50OwogICAgX2Jsb2Nrc1JlbWFpbmluZyA9IGJsb2Nrc1JlbWFpbmluZygpOwogICAgX3BvdEFtb3VudCA9IHRoaXMuYmFsYW5jZTsKICAgIF9ibG9ja051bWJlciA9IGJsb2NrLm51bWJlcjsKICAgIF9iaWRFeHBpcmVCbG9ja0xlbmd0aCA9IGJpZEV4cGlyZUJsb2NrTGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gZ2V0UGFzdFJvdW5kKHVpbnQyNTYgX3JvdW5kTnVtKSBwdWJsaWMgdmlldyByZXR1cm5zIChhZGRyZXNzIF9raW5nQWRkcmVzcywgdWludDI1NiBfZmluYWxCaWQsIHVpbnQyNTYgX2tpbmdXaW5uaW5ncywgc3RyaW5nIF9maW5hbE1lc3NhZ2UpIHsKICAgIF9raW5nQWRkcmVzcyA9IHJvdW5kVG9LaW5nW19yb3VuZE51bV07IAogICAgX2tpbmdXaW5uaW5ncyA9IHJvdW5kVG9XaW5uaW5nc1tfcm91bmROdW1dOwogICAgX2ZpbmFsQmlkID0gcm91bmRUb0ZpbmFsQmlkW19yb3VuZE51bV07CiAgICBfZmluYWxNZXNzYWdlID0gcm91bmRUb0ZpbmFsTWVzc2FnZVtfcm91bmROdW1dOwogIH0KCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIGFkZHIpIGludGVybmFsIHZpZXcgcmV0dXJucyAoYm9vbCkgewogICAgdWludCBzaXplOwogICAgYXNzZW1ibHkgeyBzaXplIDo9IGV4dGNvZGVzaXplKGFkZHIpIH0KICAgIHJldHVybiBzaXplID4gMDsKICB9Cn0='.
	

]
