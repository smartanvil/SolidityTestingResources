Class {
	#name : #SRT8d46facfb889740a345755e624942257dc87b5ac,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT8d46facfb889740a345755e624942257dc87b5ac >> base64 [
	^ ''.
	

]
