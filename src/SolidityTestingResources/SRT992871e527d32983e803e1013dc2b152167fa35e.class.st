Class {
	#name : #SRT992871e527d32983e803e1013dc2b152167fa35e,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT992871e527d32983e803e1013dc2b152167fa35e >> base64 [
	^ ''.
	

]
