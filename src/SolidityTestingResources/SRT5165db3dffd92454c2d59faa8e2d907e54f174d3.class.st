Class {
	#name : #SRT5165db3dffd92454c2d59faa8e2d907e54f174d3,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT5165db3dffd92454c2d59faa8e2d907e54f174d3 >> base64 [
	^ ''.
	

]
