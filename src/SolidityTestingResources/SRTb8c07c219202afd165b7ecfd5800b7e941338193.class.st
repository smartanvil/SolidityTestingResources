Class {
	#name : #SRTb8c07c219202afd165b7ecfd5800b7e941338193,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb8c07c219202afd165b7ecfd5800b7e941338193 >> base64 [
	^ 'Ly9Db3B5cmlnaHQgR2xvYmFsIEludmVzdCBQbGFjZSBMdGQuCnByYWdtYSBzb2xpZGl0eSBeMC40LjEzOwoKbGlicmFyeSBTYWZlTWF0aCB7CiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgLyBiOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIGFzc2VydChiIDw9IGEpOwogICAgICAgIHJldHVybiBhIC0gYjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICsgYjsKICAgICAgICBhc3NlcnQoYyA+PSBhKTsKICAgICAgICByZXR1cm4gYzsKICAgIH0KfQoKCmludGVyZmFjZSBHbG9iYWxUb2tlbiB7CiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsKICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwp9Cgpjb250cmFjdCBPd25lZCB7CiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKICAgIAogICAgZXZlbnQgT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvKTsKCiAgICBmdW5jdGlvbiBPd25lZCgpIHsKICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgbW9kaWZpZXIgb25seU93bmVyIHsKICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpIDsKICAgICAgICBfOwogICAgfQoJCgltb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBudW13b3JkcykgewogICAgICAgIGFzc2VydChtc2cuZGF0YS5sZW5ndGggPT0gbnVtd29yZHMgKiAzMiArIDQpOwoJCV87Cgl9CgogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsKICAgICAgICBvd25lciA9IG5ld093bmVyOwogICAgICAgIE93bmVyc2hpcFRyYW5zZmVycmVkKG93bmVyLCBuZXdPd25lcik7CiAgICB9CiAgCiAgZnVuY3Rpb24gY29udHJhY3RWZXJzaW9uKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgLyogIGNvbnRyYWN0VmVyc2lvbiBpZGVudGlmaWVzIGFzIDEwMFlZWVlNTURESEhNTSAqLwogICAgICAgIHJldHVybiAxMDAyMDE3MTIwMTAwMDA7CiAgICB9Cn0KCi8vIEdsb2JhbFRva2VuIEludGVyZmFjZQpjb250cmFjdCBHbG9iYWxDcnlwdG9GdW5kIGlzIE93bmVkLCBHbG9iYWxUb2tlbiB7CiAgICAKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLwogICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7CiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7CiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKCQoJYWRkcmVzcyBwdWJsaWMgbWludGVyOwogICAgCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsKICAgIAoJbW9kaWZpZXIgb25seU1pbnRlciB7CgkJcmVxdWlyZShtc2cuc2VuZGVyID09IG1pbnRlcik7CgkJXzsKCX0KCQoJZnVuY3Rpb24gc2V0TWludGVyKGFkZHJlc3MgX2FkZHJlc3NNaW50ZXIpIG9ubHlPd25lciB7CgkJbWludGVyID0gX2FkZHJlc3NNaW50ZXI7Cgl9CiAgICAKICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gR2xvYmFsQ3J5cHRvRnVuZCgpIHsKCQluYW1lID0gIkdsb2JhbENyeXB0b0Z1bmQiOyAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBzeW1ib2wgPSAiR0NGIjsgICAgICAgICAgICAgICAgCQkJCQkJCQkJCQkJLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMKICAgICAgICBkZWNpbWFscyA9IDE4OyAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCQkJCQkJLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzCiAgICAgICAgdG90YWxTdXBwbHkgPSAwOyAgICAgICAgICAgICAgICAJCQkJCQkJCQkvLyBVcGRhdGUgdG90YWwgc3VwcGx5CiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7ICAgICAgIAkJCQkJCQkJCS8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zCiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKXsKICAgICAgICByZXR1cm4gYmFsYW5jZU9mW19vd25lcl07CiAgICB9CiAgICAKICAgIC8qIEludGVybmFsIHRyYW5zZmVyLCBvbmx5IGNhbiBiZSBjYWxsZWQgYnkgdGhpcyBjb250cmFjdCAqLwogICAgZnVuY3Rpb24gX3RyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgaW50ZXJuYWwgewogICAgICAgIHJlcXVpcmUgKF90byAhPSAweDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQkJCQkvLyBQcmV2ZW50IHRyYW5zZmVyIHRvIDB4MCBhZGRyZXNzLiBVc2UgYnVybigpIGluc3RlYWQKICAgICAgICByZXF1aXJlIChiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgIAkJCQkJCS8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaAogICAgICAgIHJlcXVpcmUgKGJhbGFuY2VPZltfdG9dLmFkZChfdmFsdWUpID49IGJhbGFuY2VPZltfdG9dKTsgCQkJCQkJLy8gQ2hlY2sgZm9yIG92ZXJmbG93cwogICAgICAgIHJlcXVpcmUoX3RvICE9IGFkZHJlc3ModGhpcykpOwogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gPSBiYWxhbmNlT2ZbX2Zyb21dLnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAJLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBiYWxhbmNlT2ZbX3RvXS5hZGQoX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAJCS8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50CiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMikgcmV0dXJucyAoYm9vbCkgewogICAgICAgIF90cmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAKCWV2ZW50IE1pbnQoYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOwogICAgZnVuY3Rpb24gbWludFRva2VuKGFkZHJlc3MgdGFyZ2V0LCB1aW50MjU2IG1pbnRlZEFtb3VudCkgb25seU1pbnRlciB7CiAgICAgICAgYmFsYW5jZU9mW3RhcmdldF0gPSBiYWxhbmNlT2ZbdGFyZ2V0XS5hZGQobWludGVkQW1vdW50KTsKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LmFkZChtaW50ZWRBbW91bnQpOwogICAgICAgIFRyYW5zZmVyKDAsIHRoaXMsIG1pbnRlZEFtb3VudCk7CiAgICAgICAgVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOwogICAgICAgIE1pbnQodGFyZ2V0LCBtaW50ZWRBbW91bnQpOwogICAgfQogICAgCglldmVudCBCdXJuKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCB1aW50MjU2IHZhbHVlKTsKICAgIGZ1bmN0aW9uIGJ1cm4odWludDI1NiBfdmFsdWUpIG9ubHlNaW50ZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7CiAgICAgICAgcmVxdWlyZSAoYmFsYW5jZU9mW21zZy5zZW5kZXJdID49IF92YWx1ZSk7ICAgICAgICAgICAgCQkJCQkvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gKICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7ICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXIKICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1YihfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCS8vIFVwZGF0ZXMgdG90YWxTdXBwbHkKICAgICAgICBCdXJuKG1zZy5zZW5kZXIsIF92YWx1ZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9ICAKCQoJZnVuY3Rpb24ga2lsbCgpIG9ubHlPd25lciB7CiAgICAgICAgc2VsZmRlc3RydWN0KG93bmVyKTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29udHJhY3RWZXJzaW9uKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgLyogIGNvbnRyYWN0VmVyc2lvbiBpZGVudGlmaWVzIGFzIDIwMFlZWVlNTURESEhNTSAqLwogICAgICAgIHJldHVybiAyMDAyMDE3MTIwMTAwMDA7CiAgICB9Cn0KCmNvbnRyYWN0IEV4Y2hhbmdlTWFuYWdlciBpcyBPd25lZCB7CgkKCXVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoJIAogICAgR2xvYmFsQ3J5cHRvRnVuZCBwdWJsaWMgZ2NmOwogICAgQWN0dWFsSW5mb1tdIHB1YmxpYyBwZXJpb2RzOwoJYWRkcmVzc1tdIHB1YmxpYyBhY2NvdW50czsKICAgIAogICAgc3RydWN0IEFjdHVhbEluZm8gewogICAgICAgIHVpbnQyNTYgZXRoQXRUaGVQZXJpb2Q7CiAgICAgICAgdWludDI1NiB0b2tlbnNBdFRoZVBlcmlvZDsKICAgICAgICAKICAgICAgICB1aW50MjU2IHByaWNlOwogICAgICAgIAogICAgICAgIHVpbnQyNTYgZXRoRm9yUmVlZGVyZW07CiAgICB9CiAgICAKICAgIHVpbnQyNTYgZXRoVGF4OwogICAgdWludDI1NiB0b2tlblRheDsKCXVpbnQyNTYgcHVibGljIGN1cnJlbnRQZXJpb2RQcmljZTsKCXVpbnQyNTYgcHVibGljIG1hcmtldENhcDsKCQogICAgbW9kaWZpZXIgb25seVJlZyB7CiAgICAgICAgcmVxdWlyZShpc1JlZ1ttc2cuc2VuZGVyXSk7CiAgICAgICAgXzsKICAgIH0KICAKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSkgcHVibGljIGJ1eVRva2VuczsKICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAodWludDI1NiA9PiB1aW50MjU2KSkgcHVibGljIHNlbGxUb2tlbnM7CgltYXBwaW5nIChhZGRyZXNzID0+IGFkZHJlc3MpIHB1YmxpYyBteVVzZXJXYWxsZXQ7CiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBpc1JlZzsKCQoKICAgIGZ1bmN0aW9uIEV4Y2hhbmdlTWFuYWdlcigpIHsKICAgICAgICBnY2YgPSBHbG9iYWxDcnlwdG9GdW5kKDB4MjZGNDUzNzlkM2Y1ODFlMDk3MTlmMWRDNzljMTg0MzAyNTcyQUYwMCk7CiAgICAgICAgcmVxdWlyZShnY2YuY29udHJhY3RWZXJzaW9uKCkgPT0gMjAwMjAxNzEyMDEwMDAwKTsKCQkKCQl1aW50MjU2IG5ld1BlcmlvZCA9IHBlcmlvZHMubGVuZ3RoKys7CgkJQWN0dWFsSW5mbyBzdG9yYWdlIGluZm8gPSBwZXJpb2RzW25ld1BlcmlvZF07CgkJaW5mby5ldGhBdFRoZVBlcmlvZCA9IDA7CgkJaW5mby50b2tlbnNBdFRoZVBlcmlvZCA9IDA7CgkJaW5mby5wcmljZSA9IDEwMDAwMDAwMDAwMDAwMDAwOwoJCWluZm8uZXRoRm9yUmVlZGVyZW0gPSAwOwogICAgfQoJCglldmVudCBUYXhUaWxsTm93KHVpbnQyNTYgX2V0aFR4LCB1aW50MjU2IF90b2tlblR4KTsKCWZ1bmN0aW9uIHRheFRpbGxOb3coKSBvbmx5T3duZXIgcmV0dXJucyAodWludDI1NiBfZXRoVGF4LCB1aW50MjU2IF90b2tlblRheCkgewoJCVRheFRpbGxOb3coZXRoVGF4LCB0b2tlblRheCk7CgkJcmV0dXJuIChldGhUYXgsIHRva2VuVGF4KTsKCX0KCQoJZXZlbnQgUmVnaXN0ZXJFdmVudChhZGRyZXNzIGluZGV4ZWQgX3BlcnNvbiwgYWRkcmVzcyBpbmRleGVkIF91c2VyV2FsbGV0KTsKICAgIGZ1bmN0aW9uIFJlZ2lzdGVyKCkgcmV0dXJucyAoYWRkcmVzcyBfdXNlcldhbGxldCkgewogICAgICAgIF91c2VyV2FsbGV0ID0gYWRkcmVzcyhuZXcgVXNlcldhbGxldCh0aGlzLCBnY2YpKTsKICAgICAgICBhY2NvdW50cy5wdXNoKF91c2VyV2FsbGV0KTsKICAgICAgICBVc2VyV2FsbGV0KF91c2VyV2FsbGV0KS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsKICAgICAgIAogICAgICAgIGlzUmVnW191c2VyV2FsbGV0XSA9IHRydWU7CiAgICAgICAgbXlVc2VyV2FsbGV0W21zZy5zZW5kZXJdID0gX3VzZXJXYWxsZXQ7CiAgICAgICAgCgkJUmVnaXN0ZXJFdmVudChtc2cuc2VuZGVyLCBfdXNlcldhbGxldCk7CiAgICAgICAgcmV0dXJuIF91c2VyV2FsbGV0OwogICAgfQoJCiAgICBmdW5jdGlvbiBnZXRBY3R1YWxQZXJpb2QoKSByZXR1cm5zICh1aW50MjU2KSB7CiAgICAgICAgcmV0dXJuIHBlcmlvZHMubGVuZ3RoOwogICAgfQoJCglldmVudCBDbG9zZVBlcmlvZEV2ZW50KHVpbnQyNTYgcGVyaW9kLCB1aW50MjU2IHByaWNlLCB1aW50MjU2IF9tYXJrZXRDYXAsIHVpbnQyNTYgX2V0aEZvclJlZWRlcmVtKTsKICAgIGZ1bmN0aW9uIGNsb3NlUGVyaW9kKHVpbnQyNTYgX3ByaWNlLCB1aW50MjU2IF9tYXJrZXRDYXAsIHVpbnQyNTYgX2V0aEZvclJlZWRlcmVtKSBvbmx5T3duZXIgewoJCXVpbnQyNTYgcGVyaW9kID0gZ2V0QWN0dWFsUGVyaW9kKCk7CgkJQWN0dWFsSW5mbyBzdG9yYWdlIGluZm8gPSBwZXJpb2RzW3BlcmlvZC5zdWIoMSldOwoJCXVpbnQyNTYgdG9rZW5zQXRUaGlzUGVyaW9kID0gaW5mby50b2tlbnNBdFRoZVBlcmlvZDsKICAgICAgICAvL3NldCBQcmljZXMgYXQgdGhpcyBwZXJpb2QKICAgICAgICBpbmZvLnByaWNlID0gX3ByaWNlOwoJCS8vY2FsY3VsYXRlIGhvdyBtdWNoIGV0aCBtdXN0IGhhdmUgYXQgdGhlIGNvbnRyYWN0IGZvciByZWVkZXJlbQoJCWlmKF9ldGhGb3JSZWVkZXJlbSAhPSAwKSB7CgkJCWluZm8uZXRoRm9yUmVlZGVyZW0gPSBfZXRoRm9yUmVlZGVyZW07CgkJfSBlbHNlIHsKCQkJaW5mby5ldGhGb3JSZWVkZXJlbSA9ICgoaW5mby50b2tlbnNBdFRoZVBlcmlvZCkubXVsKF9wcmljZSkpLmRpdigxIGV0aGVyKTsKCQl9CgkJY3VycmVudFBlcmlvZFByaWNlID0gX3ByaWNlOwoJCQoJCW1hcmtldENhcCA9IF9tYXJrZXRDYXA7CgkJCgkJQ2xvc2VQZXJpb2RFdmVudChwZXJpb2QsIGluZm8ucHJpY2UsIG1hcmtldENhcCwgaW5mby5ldGhGb3JSZWVkZXJlbSk7CgkJCgkJZW5kKCk7CiAgICB9CgoJZnVuY3Rpb24gZW5kKCkgaW50ZXJuYWwgewoJCXVpbnQyNTYgcGVyaW9kID0gcGVyaW9kcy5sZW5ndGggKys7CgkJQWN0dWFsSW5mbyBzdG9yYWdlIGluZm8gPSBwZXJpb2RzW3BlcmlvZF07CgkJaW5mby5ldGhBdFRoZVBlcmlvZCA9IDA7CgkJaW5mby50b2tlbnNBdFRoZVBlcmlvZCA9IDA7CgkJaW5mby5wcmljZSA9IDA7CgkJaW5mby4gZXRoRm9yUmVlZGVyZW0gPSAwOwoJfQoJCiAgICBmdW5jdGlvbiBnZXRQcmljZXMoKSBwdWJsaWMgcmV0dXJucyAodWludDI1NiBfUHJpY2UpIHsKICAgICAgICByZXR1cm4gY3VycmVudFBlcmlvZFByaWNlOwogICAgfQoJCglldmVudCBEZXBvc2l0RXZlbnQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IF9hbW91bnQpOwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBEZXBvc2l0RXZlbnQobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsKICAgIH0KCglldmVudCBCdXlFdmVudChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgcGVyaW9kLCB1aW50MjU2IF9hbW91bnRFdGhlcnMsIHVpbnQyNTYgX2V0aEF0VGhlUGVyaW9kKTsKICAgIGZ1bmN0aW9uIGJ1eSh1aW50MjU2IF9hbW91bnQpIG9ubHlSZWcgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDAuMDEgZXRoZXIpOwoJCQogICAgICAgIHVpbnQyNTYgdGhpc1BlcmlvZCA9IGdldEFjdHVhbFBlcmlvZCgpOwogICAgICAgIHRoaXNQZXJpb2QgPSB0aGlzUGVyaW9kLnN1YigxKTsKCQkKCQl1aW50MjU2IHRheCA9IGNhbGN1bGF0ZVRheChfYW1vdW50KTsKCQlldGhUYXggPSBldGhUYXguYWRkKHRheCk7CgkJdWludDI1NiBfZXRoVmFsdWUgPSBfYW1vdW50LnN1Yih0YXgpOwoJCQogICAgICAgIGJ1eVRva2Vuc1ttc2cuc2VuZGVyXVt0aGlzUGVyaW9kXSA9IGJ1eVRva2Vuc1ttc2cuc2VuZGVyXVt0aGlzUGVyaW9kXS5hZGQoX2V0aFZhbHVlKTsKCQkKCQlBY3R1YWxJbmZvIHN0b3JhZ2UgaW5mbyA9IHBlcmlvZHNbdGhpc1BlcmlvZF07CgkJaW5mby5ldGhBdFRoZVBlcmlvZCA9IGluZm8uZXRoQXRUaGVQZXJpb2QuYWRkKF9ldGhWYWx1ZSk7CgkJCgkJQnV5RXZlbnQobXNnLnNlbmRlciwgdGhpc1BlcmlvZCwgX2Ftb3VudCwgaW5mby5ldGhBdFRoZVBlcmlvZCk7CgkJCgkJcmV0dXJuIHRydWU7CiAgICB9CgkKCWV2ZW50IFJlZWRlcmVtRXZlbnQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IHBlcmlvZCwgdWludDI1NiBfYW1vdW50VG9rZW5zLCB1aW50MjU2IF90b2tlbnNBdFRoZVBlcmlvZCk7CiAgICBmdW5jdGlvbiBSZWVkZXJlbSh1aW50MjU2IF9hbW91bnQpIG9ubHlSZWcgcmV0dXJucyAoYm9vbCkgewoJCXJlcXVpcmUoX2Ftb3VudCA+IDApOwoJCQogICAgICAgIHVpbnQyNTYgdGhpc1BlcmlvZCA9IGdldEFjdHVhbFBlcmlvZCgpOwoJCXRoaXNQZXJpb2QgPSB0aGlzUGVyaW9kLnN1YigxKTsKCQkKCQl1aW50MjU2IHRheCA9IGNhbGN1bGF0ZVRheChfYW1vdW50KTsKCQl0b2tlblRheCA9IHRva2VuVGF4LmFkZCh0YXgpOwoJCXVpbnQyNTYgX3Rva2Vuc1ZhbHVlID0gX2Ftb3VudC5zdWIodGF4KTsKCQkKICAgICAgICBzZWxsVG9rZW5zW21zZy5zZW5kZXJdW3RoaXNQZXJpb2RdID0gc2VsbFRva2Vuc1ttc2cuc2VuZGVyXVt0aGlzUGVyaW9kXS5hZGQoX3Rva2Vuc1ZhbHVlKTsKCQkKCQlBY3R1YWxJbmZvIHN0b3JhZ2UgaW5mbyA9IHBlcmlvZHNbdGhpc1BlcmlvZF07CiAgICAgICAgaW5mby50b2tlbnNBdFRoZVBlcmlvZCA9IGluZm8udG9rZW5zQXRUaGVQZXJpb2QuYWRkKF90b2tlbnNWYWx1ZSk7CgkJCiAgICAgICAgUmVlZGVyZW1FdmVudChtc2cuc2VuZGVyLCB0aGlzUGVyaW9kLCBfYW1vdW50LCBpbmZvLnRva2Vuc0F0VGhlUGVyaW9kKTsKCQkKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCQoJZXZlbnQgVGF4KHVpbnQyNTYgX3RheFBheW1lbnQpOwoJZnVuY3Rpb24gY2FsY3VsYXRlVGF4KHVpbnQyNTYgX2Ftb3VudCkgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiBfdGF4KSB7CgkJX3RheCA9IChfYW1vdW50Lm11bCg1KSkuZGl2KDEwMCk7CgkJVGF4KF90YXgpOwoJCXJldHVybiBfdGF4OwoJfQoJCglldmVudCBDbGFpbVRva2Vuc0V2ZW50KGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgdWludDI1NiBwZXJpb2QsIHVpbnQyNTYgX3Rva2Vuc1ZhbHVlLCB1aW50MjU2IF90b2tlbnNQcmljZSwgdWludDI1NiBfZXRoZXJzQW1vdW50KTsKICAgIGZ1bmN0aW9uIGNsYWltVG9rZW5zKHVpbnQyNTYgX3BlcmlvZCkgb25seVJlZyByZXR1cm5zIChib29sKSB7CiAgICAgICAgcmVxdWlyZShwZXJpb2RzLmxlbmd0aCA+IF9wZXJpb2QpOwoJCQogICAgICAgIHVpbnQyNTYgX2V0aFZhbHVlID0gYnV5VG9rZW5zW21zZy5zZW5kZXJdW19wZXJpb2RdOwoJCQoJCUFjdHVhbEluZm8gc3RvcmFnZSBpbmZvID0gcGVyaW9kc1tfcGVyaW9kXTsKICAgICAgICB1aW50MjU2IHRva2VuUHJpY2UgPSBpbmZvLnByaWNlOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gKF9ldGhWYWx1ZS5tdWwoMSBldGhlcikpLmRpdih0b2tlblByaWNlKTsKICAgICAgICBnY2YubWludFRva2VuKHRoaXMsIGFtb3VudCk7CgkJCgkJYnV5VG9rZW5zW21zZy5zZW5kZXJdW19wZXJpb2RdID0gMDsKCQkJCQogICAgICAgIENsYWltVG9rZW5zRXZlbnQobXNnLnNlbmRlciwgX3BlcmlvZCwgX2V0aFZhbHVlLCB0b2tlblByaWNlLCBhbW91bnQpOwoJCQoJCXJldHVybiBHbG9iYWxUb2tlbihnY2YpLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCk7CiAgICB9CgkKCWV2ZW50IENsYWltRXRoZXJzRXZlbnQoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCB1aW50MjU2IHBlcmlvZCwgdWludDI1NiBfZXRoVmFsdWUsIHVpbnQyNTYgX3Rva2Vuc1ByaWNlLCB1aW50MjU2IF90b2tlbnNBbW91bnQpOwogICAgZnVuY3Rpb24gY2xhaW1FdGhlcnModWludDI1NiBfcGVyaW9kKSBvbmx5UmVnIHJldHVybnMgKGJvb2wpIHsKICAgICAgICByZXF1aXJlKHBlcmlvZHMubGVuZ3RoID4gX3BlcmlvZCk7CgkJCiAgICAgICAgdWludDI1NiBfdG9rZW5zVmFsdWUgPSBzZWxsVG9rZW5zW21zZy5zZW5kZXJdW19wZXJpb2RdOwoJCQoJCUFjdHVhbEluZm8gc3RvcmFnZSBpbmZvID0gcGVyaW9kc1tfcGVyaW9kXTsKICAgICAgICB1aW50MjU2IHRva2VuUHJpY2UgPSBpbmZvLnByaWNlOwogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gKF90b2tlbnNWYWx1ZS5tdWwodG9rZW5QcmljZSkpLmRpdigxIGV0aGVyKTsKICAgICAgICBnY2YuYnVybihfdG9rZW5zVmFsdWUpOwogICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYW1vdW50KTsKCQkJCQogICAgICAgIHNlbGxUb2tlbnNbbXNnLnNlbmRlcl1bX3BlcmlvZF0gPSAwOwoJCQoJCUNsYWltRXRoZXJzRXZlbnQobXNnLnNlbmRlciwgX3BlcmlvZCwgX3Rva2Vuc1ZhbHVlLCB0b2tlblByaWNlLCBhbW91bnQpOwogICAgICAgIAogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoJCglldmVudCBjbGFpbVRheGV4ICh1aW50MjU2IF9ldGgsIHVpbnQyNTYgX3Rva2Vucyk7CiAgICBmdW5jdGlvbiBjbGFpbVRheCgpIG9ubHlPd25lciB7CgkJaWYoZXRoVGF4ICE9IDApIHsKCQkJdHJhbnNmZXJFdGhlcihvd25lciwgZXRoVGF4KTsKCQkJY2xhaW1UYXhleChldGhUYXgsIDApOwoJCQlldGhUYXggPSAwOwoJCX0KCQkKCQlpZih0b2tlblRheCAhPSAwKSB7CgkJCXRyYW5zZmVyVG9rZW5zKG93bmVyLCB0b2tlblRheCk7CgkJCWNsYWltVGF4ZXgoMCwgdG9rZW5UYXgpOwoJCQl0b2tlblRheCA9IDA7CgkJfQogICAgfQoJCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VucyhhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCkgewogICAgICAgIHJldHVybiBHbG9iYWxUb2tlbihnY2YpLnRyYW5zZmVyKF90bywgX2Ftb3VudCk7CiAgICB9CgkKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRXRoZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKCQlyZXF1aXJlKF9hbW91bnQgPD0gKHRoaXMuYmFsYW5jZSkuc3ViKGV0aFRheCkpOwogICAgICAgIF90by50cmFuc2ZlcihfYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY29udHJhY3RWZXJzaW9uKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgLyogIGNvbnRyYWN0VmVyc2lvbiBpZGVudGlmaWVzIGFzIDMwMFlZWVlNTURESEhNTSAqLwogICAgICAgIHJldHVybiAzMDAyMDE3MTIwMTAwMDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIG51bUFjY291bnRzKCkgcmV0dXJucyAodWludDI1NiBfbnVtQWNjb3VudHMpIHsKICAgICAgICByZXR1cm4gYWNjb3VudHMubGVuZ3RoOwogICAgfQoJCiAgICBmdW5jdGlvbiBraWxsKCkgb25seU93bmVyIHsKICAgICAgICB1aW50MjU2IGFtb3VudCA9IEdsb2JhbFRva2VuKGdjZikuYmFsYW5jZU9mKHRoaXMpOwogICAgICAgIHRyYW5zZmVyVG9rZW5zKG93bmVyLCBhbW91bnQpOwogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9Cn0KCmxpYnJhcnkgQ29udmVydFN0cmluZ1RvVWludCB7CgkKCWZ1bmN0aW9uIHN0cmluZ1RvVWludChzdHJpbmcgX2Ftb3VudCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCByZXN1bHQpIHsKICAgICAgICBieXRlcyBtZW1vcnkgYiA9IGJ5dGVzKF9hbW91bnQpOwogICAgICAgIHVpbnQgaTsKICAgICAgICB1aW50IGNvdW50ZXJCZWZvcmVEb3Q7CiAgICAgICAgdWludCBjb3VudGVyQWZ0ZXJEb3Q7CiAgICAgICAgcmVzdWx0ID0gMDsKICAgICAgICB1aW50IHRvdE51bSA9IGIubGVuZ3RoOwogICAgICAgIHRvdE51bS0tOwogICAgICAgIGJvb2wgaGFzRG90ID0gZmFsc2U7CiAgICAgICAgCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdWludCBjID0gdWludChiW2ldKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChjID49IDQ4ICYmIGMgPD0gNTcpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDEwICsgKGMgLSA0OCk7CiAgICAgICAgICAgICAgICBjb3VudGVyQmVmb3JlRG90ICsrOwogICAgICAgICAgICAgICAgdG90TnVtLS07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCgkJCWlmKGMgPT0gNDYpewoJCQkgICAgaGFzRG90ID0gdHJ1ZTsKCQkJCWJyZWFrOwoJCQl9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKGhhc0RvdCkgewogICAgICAgICAgICBmb3IgKHVpbnQgaiA9IGNvdW50ZXJCZWZvcmVEb3QgKyAxOyBqIDwgMTg7IGorKykgewogICAgICAgICAgICAgICAgdWludCBtID0gdWludChiW2pdKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKG0gPj0gNDggJiYgbSA8PSA1NykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDEwICsgKG0gLSA0OCk7CiAgICAgICAgICAgICAgICAgICAgY291bnRlckFmdGVyRG90ICsrOwogICAgICAgICAgICAgICAgICAgIHRvdE51bS0tOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZih0b3ROdW0gPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgIGlmKGNvdW50ZXJBZnRlckRvdCA8IDE4KXsKICAgICAgICAgICAgIHVpbnQgYWRkTnVtID0gMTggLSBjb3VudGVyQWZ0ZXJEb3Q7CiAgICAgICAgICAgICB1aW50IG11bHR1cGx5ID0gMTAgKiogYWRkTnVtOwogICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHJlc3VsdCAqIG11bHR1cGx5OwogICAgICAgICB9CiAgICAgICAgIAogICAgICAgICByZXR1cm4gcmVzdWx0OwoJfQp9Cgpjb250cmFjdCBVc2VyV2FsbGV0IGlzIE93bmVkIHsKCXVzaW5nIENvbnZlcnRTdHJpbmdUb1VpbnQgZm9yIHN0cmluZzsKCXVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwoJCiAgICBFeGNoYW5nZU1hbmFnZXIgZnVuZDsKICAgIEdsb2JhbENyeXB0b0Z1bmQgcHVibGljIGdjZjsKICAgIAogICAgdWludDI1NltdIHB1YmxpYyBpbnZlc3RlZFBlcmlvZHM7CiAgICB1aW50MjU2W10gcHVibGljIHJlZWRlcmVtUGVyaW9kczsKICAgIAoJbWFwcGluZyAodWludDI1NiA9PiBib29sKSBpc0ludmVzdGVkOwoJbWFwcGluZyAodWludDI1NiA9PiBib29sKSBpc1JlZWRlcmVtOwoJCiAgICBmdW5jdGlvbiBVc2VyV2FsbGV0KGFkZHJlc3MgX2Z1bmQsIGFkZHJlc3MgX3Rva2VuKSB7CiAgICAgICAgZnVuZCA9IEV4Y2hhbmdlTWFuYWdlcihfZnVuZCk7CgkJcmVxdWlyZShmdW5kLmNvbnRyYWN0VmVyc2lvbigpID09IDMwMDIwMTcxMjAxMDAwMCk7CgkJCiAgICAgICAgZ2NmID0gR2xvYmFsQ3J5cHRvRnVuZChfdG9rZW4pOwogICAgICAgIHJlcXVpcmUoZ2NmLmNvbnRyYWN0VmVyc2lvbigpID09IDIwMDIwMTcxMjAxMDAwMCk7CiAgICB9CgkKICAgIGZ1bmN0aW9uIGdldFByaWNlcygpIG9ubHlPd25lciByZXR1cm5zICh1aW50MjU2IF9QcmljZSkgewoJCXJldHVybiBmdW5kLmdldFByaWNlcygpOwoJfQoJCglmdW5jdGlvbiBnZXRBY3R1YWxQZXJpb2QoKSBvbmx5T3duZXIgcmV0dXJucyAodWludDI1NikgewoJCXVpbnQyNTYgcGVyaW9kID0gZnVuZC5nZXRBY3R1YWxQZXJpb2QoKTsKCQlyZXR1cm4gcGVyaW9kLnN1YigxKTsKCX0KCQoJZXZlbnQgVG9rZW5zU29sZCh1aW50MjU2IHJlY2l2ZWRFdGhlcnMpOwogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsKICAgICAgICBpZihtc2cuc2VuZGVyID09IGFkZHJlc3MoZnVuZCkpIHsKICAgICAgICAgICAgVG9rZW5zU29sZChtc2cudmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlcG9zaXQobXNnLnZhbHVlKTsKICAgICAgICB9CiAgICB9CgkKICAgIGZ1bmN0aW9uIGRlcG9zaXQodWludDI1NiBfV2VpQW1vdW50KSBwYXlhYmxlIHJldHVybnMgKGJvb2wpIHsKICAgICAgICBmdW5kLnRyYW5zZmVyKF9XZWlBbW91bnQpOwogICAgICAgIGZ1bmQuYnV5KF9XZWlBbW91bnQpOwoJCXVpbnQyNTYgcGVyaW9kID0gZnVuZC5nZXRBY3R1YWxQZXJpb2QoKTsKCQlib29sIF9pc0ludmVzdGVkID0gaXNJbnZlc3QocGVyaW9kKTsKCQlpZighX2lzSW52ZXN0ZWQpIHsKCQkJaW52ZXN0ZWRQZXJpb2RzLnB1c2gocGVyaW9kLnN1YigxKSk7CgkJCWlzSW52ZXN0ZWRbcGVyaW9kXSA9IHRydWU7CgkJfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBSZWVkZXJlbShzdHJpbmcgX2Ftb3VudCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKCQl1aW50MjU2IGFtb3VudCA9IF9hbW91bnQuc3RyaW5nVG9VaW50KCk7CiAgICAgICAgZ2NmLnRyYW5zZmVyKGZ1bmQsIGFtb3VudCk7CiAgICAgICAgdWludDI1NiBwZXJpb2QgPSBmdW5kLmdldEFjdHVhbFBlcmlvZCgpOwoJCWJvb2wgX2lzUmVlZGVyZW1lZCA9IGlzUmVlZGVyZW1lZChwZXJpb2QpOwoJCWlmKCFfaXNSZWVkZXJlbWVkKSB7CgkJCXJlZWRlcmVtUGVyaW9kcy5wdXNoKHBlcmlvZC5zdWIoMSkpOwoJCQlpc1JlZWRlcmVtW3BlcmlvZF0gPSB0cnVlOwoJCX0KICAgICAgICByZXR1cm4gZnVuZC5SZWVkZXJlbShhbW91bnQpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VucygpIG9ubHlPd25lciByZXR1cm5zIChib29sKSB7CgkJdWludDI1NiBhbW91bnQgPSBHbG9iYWxUb2tlbihnY2YpLmJhbGFuY2VPZih0aGlzKTsKICAgICAgICByZXR1cm4gR2xvYmFsVG9rZW4oZ2NmKS50cmFuc2Zlcihvd25lciwgYW1vdW50KTsKICAgIH0KICAgIAogICAgZXZlbnQgdXNlcldhbGxldFRyYW5zZmVyRXRoZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF9ldGhlcnNWYWx1ZSk7CiAgICBmdW5jdGlvbiB0cmFuc2ZlckV0aGVyKCkgb25seU93bmVyIHJldHVybnMgKGJvb2wpIHsKCQl1aW50MjU2IGFtb3VudCA9IHRoaXMuYmFsYW5jZTsKICAgICAgICBvd25lci50cmFuc2ZlcihhbW91bnQpOwogICAgICAgIHVzZXJXYWxsZXRUcmFuc2ZlckV0aGVyKHRoaXMsb3duZXIsYW1vdW50KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gY2xhaW1Ub2tlbnMoKSBvbmx5T3duZXIgewogICAgICAgIHVpbnQyNTYgcGVyaW9kOwogICAgICAgIGZvcih1aW50MjU2IGkgPSAwOyBpIDwgaW52ZXN0ZWRQZXJpb2RzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHBlcmlvZCA9IGludmVzdGVkUGVyaW9kc1tpXTsKICAgICAgICAgICAgZnVuZC5jbGFpbVRva2VucyhwZXJpb2QpOwogICAgICAgIH0KICAgICAgICBpbnZlc3RlZFBlcmlvZHMubGVuZ3RoID0gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFpbUV0aGVycygpIG9ubHlPd25lciB7CiAgICAgICAgdWludDI1NiBwZXJpb2Q7CiAgICAgICAgZm9yKHVpbnQyNTYgaSA9IDA7IGkgPCByZWVkZXJlbVBlcmlvZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcGVyaW9kID0gcmVlZGVyZW1QZXJpb2RzW2ldOwogICAgICAgICAgICBmdW5kLmNsYWltRXRoZXJzKHBlcmlvZCk7CiAgICAgICAgfQogICAgICAgIHJlZWRlcmVtUGVyaW9kcy5sZW5ndGggPSAwOwogICAgfQogIAogICAgZnVuY3Rpb24gY29udHJhY3RWZXJzaW9uKCkgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7CiAgICAgICAgLyogIGNvbnRyYWN0VmVyc2lvbiBpZGVudGlmaWVzIGFzIDQwMFlZWVlNTURESEhNTSAqLwogICAgICAgIHJldHVybiA0MDAyMDE3MTIwMTAwMDA7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGtpbGwoKSBvbmx5T3duZXIgewoJCXRyYW5zZmVyVG9rZW5zKCk7CgkJdHJhbnNmZXJFdGhlcigpOwogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7CiAgICB9CgkKCWZ1bmN0aW9uIGlzSW52ZXN0KHVpbnQyNTYgX3BlcikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgewoJCXJldHVybiBpc0ludmVzdGVkW19wZXJdOwoJfQoJCglmdW5jdGlvbiBpc1JlZWRlcmVtZWQodWludDI1NiBfcGVyKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7CgkJcmV0dXJuIGlzUmVlZGVyZW1bX3Blcl07Cgl9Cn0='.
	

]
