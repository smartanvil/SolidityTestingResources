Class {
	#name : #SRT6b649662da40f10361f008b481143029296a69d6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT6b649662da40f10361f008b481143029296a69d6 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTc7CgovLwovLyBTd2FybSBWb3RpbmcgTVZQCi8vIFNpbmdsZSB1c2UgY29udHJhY3QgdG8gbWFuYWdlIGxpcXVpZGl0eSB2b3RlIHNob3J0bHkgYWZ0ZXIgU3dhcm0gVFMKLy8gQXV0aG9yOiBNYXggS2F5ZQovLwovLwovLyBBcmNoaXRlY3R1cmU6Ci8vICogQmFsbG90IGF1dGhvcml0eSBkZWNsYXJlcyBwdWJsaWMga2V5IHdpdGggd2hpY2ggdG8gZW5jcnlwdCBiYWxsb3RzCi8vICogVXNlcnMgc3VibWl0IGVuY3J5cHRlZCBiYWxsb3RzIGFzIGJsb2JzCi8vICogVGhlc2UgYmFsbG90cyBhcmUgdHJhY2tlZCBieSB0aGUgRVRIIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcgovLyAqIEZvbGxvd2luZyB0aGUgY29uY2x1c2lvbiBvZiB0aGUgYmFsbG90LCB0aGUgc2VjcmV0IGtleSBpcyBwcm92aWRlZAovLyAgIGJ5IHRoZSBiYWxsb3QgYXV0aG9yaXR5LCBhbmQgYWxsIHVzZXJzIG1heSB0cmFuc3BhcmVudGx5IGFuZAovLyAgIGluZGVwZW5kZW50bHkgdmFsaWRhdGUgdGhlIHJlc3VsdHMKLy8KLy8gTm90ZXM6Ci8vICogU2luY2UgYmFsbG90cyBhcmUgZW5jcnlwdGVkIHRoZSBvbmx5IHZhbGlkYXRpb24gd2UgY2FuIGRvIGlzIGxlbmd0aAovLwoKCmNvbnRyYWN0IFN3YXJtVm90aW5nTVZQIHsKICAgIC8vLy8gKiogU3RvcmFnZSBWYXJpYWJsZXMKCiAgICAvLyBTdGQgb3duZXIgcGF0dGVybgogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7CgogICAgLy8gdGVzdCBtb2RlIC0gb3BlcmF0aW9ucyBsaWtlIGNoYW5naW5nIHN0YXJ0L2VuZCB0aW1lcwogICAgYm9vbCBwdWJsaWMgdGVzdE1vZGUgPSBmYWxzZTsKCiAgICAvLyBNYXBzIHRvIHN0b3JlIGJhbGxvdHMsIGFsb25nIHdpdGggY29ycmVzcG9uZGluZyBsb2cgb2Ygdm90ZXJzLgogICAgLy8gU2hvdWxkIG9ubHkgYmUgbW9kaWZpZWQgdGhyb3VnaCBgYWRkQmFsbG90QW5kVm90ZXJgIGludGVybmFsIGZ1bmN0aW9uCiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gYnl0ZXMzMikgcHVibGljIGVuY3J5cHRlZEJhbGxvdHM7CiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gYnl0ZXMzMikgcHVibGljIGFzc29jaWF0ZWRQdWJrZXlzOwogICAgbWFwcGluZyh1aW50MjU2ID0+IGFkZHJlc3MpIHB1YmxpYyBhc3NvY2lhdGVkQWRkcmVzc2VzOwogICAgdWludDI1NiBwdWJsaWMgblZvdGVzQ2FzdCA9IDA7CgogICAgLy8gVXNlIGEgbWFwIGZvciB2b3RlcnMgdG8gbG9vayB1cCB0aGVpciBiYWxsb3QKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgdm90ZXJUb0JhbGxvdElEOwoKICAgIC8vIFB1YmxpYyBrZXkgd2l0aCB3aGljaCB0byBlbmNyeXB0IGJhbGxvdHMgLSBjdXJ2ZTI1NTE5CiAgICBieXRlczMyIHB1YmxpYyBiYWxsb3RFbmNyeXB0aW9uUHVia2V5OwoKICAgIC8vIFByaXZhdGUga2V5IHRvIGJlIHNldCBhZnRlciBiYWxsb3QgY29uY2x1c2lvbiAtIGN1cnZlMjU1MTkKICAgIGJ5dGVzMzIgcHVibGljIGJhbGxvdEVuY3J5cHRpb25TZWNrZXk7CiAgICBib29sIHNlY2tleVJldmVhbGVkID0gZmFsc2U7CiAgICBib29sIGFsbG93U2Vja2V5QmVmb3JlRW5kVGltZSA9IGZhbHNlOwoKICAgIC8vIFRpbWVzdGFtcHMgZm9yIHN0YXJ0IGFuZCBlbmQgb2YgYmFsbG90IChVVEMpCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWU7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lOwoKICAgIC8vIEJhbm5lZCBhZGRyZXNzZXMgLSBuZWNlc3NhcnkgdG8gYmFuIFN3YXJtIEZ1bmQgZnJvbSB2b3RpbmcgaW4gdGhlaXIgb3duIGJhbGxvdAogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBiYW5uZWRBZGRyZXNzZXM7CiAgICBhZGRyZXNzIHB1YmxpYyBzd2FybUZ1bmRBZGRyZXNzID0gMHg4QmY3YjJENTM2RDI4NkI5YzVBZDlkOTlGNjA4ZTlFMjE0REU2M2YwOwoKICAgIGJ5dGVzMzJbNV0gcHVibGljIG9wdGlvbkhhc2hlczsKCiAgICAvLy8vICoqIEV2ZW50cwogICAgZXZlbnQgQ3JlYXRlZEJhbGxvdChhZGRyZXNzIGNyZWF0b3IsIHVpbnQyNTYgc3RhcnQsIHVpbnQyNTYgZW5kLCBieXRlczMyIGVuY1B1YmtleSwgc3RyaW5nIG8xLCBzdHJpbmcgbzIsIHN0cmluZyBvMywgc3RyaW5nIG80LCBzdHJpbmcgbzUpOwogICAgZXZlbnQgU3VjY2Vzc2Z1bFZvdGUoYWRkcmVzcyB2b3RlciwgYnl0ZXMzMiBiYWxsb3QsIGJ5dGVzMzIgcHVia2V5KTsKICAgIGV2ZW50IFNlY2tleVJldmVhbGVkKGJ5dGVzMzIgc2VjcmV0S2V5KTsKICAgIGV2ZW50IEFsbG93RWFybHlTZWNrZXkoYm9vbCBhbGxvd0Vhcmx5U2Vja2V5KTsKICAgIGV2ZW50IFRlc3RpbmdFbmFibGVkKCk7CiAgICBldmVudCBFcnJvcihzdHJpbmcgZXJyb3IpOwoKCiAgICAvLy8vICoqIE1vZGlmaWVycwoKICAgIG1vZGlmaWVyIG5vdEJhbm5lZCB7CiAgICAgICAgaWYgKCFiYW5uZWRBZGRyZXNzZXNbbXNnLnNlbmRlcl0pIHsgIC8vIGVuc3VyZSBiYW5uZWQgYWRkcmVzc2VzIGNhbm5vdCB2b3RlCiAgICAgICAgICAgIF87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgRXJyb3IoIkJhbm5lZCBhZGRyZXNzIik7CiAgICAgICAgfQogICAgfQoKICAgIG1vZGlmaWVyIG9ubHlPd25lciB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsgIC8vIGZhaWwgaWYgbXNnLnNlbmRlciBpcyBub3QgdGhlIG93bmVyCiAgICAgICAgICAgIF87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgRXJyb3IoIk5vdCBvd25lciIpOwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBiYWxsb3RPcGVuIHsKICAgICAgICBpZiAoYmxvY2sudGltZXN0YW1wID49IHN0YXJ0VGltZSAmJiBibG9jay50aW1lc3RhbXAgPCBlbmRUaW1lKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgRXJyb3IoIkJhbGxvdCBub3Qgb3BlbiIpOwogICAgICAgIH0KICAgIH0KCiAgICBtb2RpZmllciBvbmx5VGVzdGluZyB7CiAgICAgICAgaWYgKHRlc3RNb2RlKSB7CiAgICAgICAgICAgIF87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgRXJyb3IoIlRlc3RpbmcgZGlzYWJsZWQiKTsKICAgICAgICB9CiAgICB9CgogICAgLy8vLyAqKiBGdW5jdGlvbnMKCiAgICAvLyBDb25zdHJ1Y3RvciBmdW5jdGlvbiAtIGluaXQgY29yZSBwYXJhbXMgb24gZGVwbG95CiAgICBmdW5jdGlvbiBTd2FybVZvdGluZ01WUCh1aW50MjU2IF9zdGFydFRpbWUsIHVpbnQyNTYgX2VuZFRpbWUsIGJ5dGVzMzIgX2VuY1BLLCBib29sIGVuYWJsZVRlc3RpbmcsIGJvb2wgX2FsbG93U2Vja2V5QmVmb3JlRW5kVGltZSwgc3RyaW5nIG9wdDEsIHN0cmluZyBvcHQyLCBzdHJpbmcgb3B0Mywgc3RyaW5nIG9wdDQsIHN0cmluZyBvcHQ1KSBwdWJsaWMgewogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsKCiAgICAgICAgc3RhcnRUaW1lID0gX3N0YXJ0VGltZTsKICAgICAgICBlbmRUaW1lID0gX2VuZFRpbWU7CiAgICAgICAgYmFsbG90RW5jcnlwdGlvblB1YmtleSA9IF9lbmNQSzsKCiAgICAgICAgYmFubmVkQWRkcmVzc2VzW3N3YXJtRnVuZEFkZHJlc3NdID0gdHJ1ZTsKCiAgICAgICAgb3B0aW9uSGFzaGVzID0gW2tlY2NhazI1NihvcHQxKSwga2VjY2FrMjU2KG9wdDIpLCBrZWNjYWsyNTYob3B0MyksIGtlY2NhazI1NihvcHQ0KSwga2VjY2FrMjU2KG9wdDUpXTsKCiAgICAgICAgYWxsb3dTZWNrZXlCZWZvcmVFbmRUaW1lID0gX2FsbG93U2Vja2V5QmVmb3JlRW5kVGltZTsKICAgICAgICBBbGxvd0Vhcmx5U2Vja2V5KF9hbGxvd1NlY2tleUJlZm9yZUVuZFRpbWUpOwoKICAgICAgICBpZiAoZW5hYmxlVGVzdGluZykgewogICAgICAgICAgICB0ZXN0TW9kZSA9IHRydWU7CiAgICAgICAgICAgIFRlc3RpbmdFbmFibGVkKCk7CiAgICAgICAgfQoKICAgICAgICBDcmVhdGVkQmFsbG90KG1zZy5zZW5kZXIsIF9zdGFydFRpbWUsIF9lbmRUaW1lLCBfZW5jUEssIG9wdDEsIG9wdDIsIG9wdDMsIG9wdDQsIG9wdDUpOwogICAgfQoKICAgIC8vIEJhbGxvdCBzdWJtaXNzaW9uCiAgICBmdW5jdGlvbiBzdWJtaXRCYWxsb3QoYnl0ZXMzMiBlbmNyeXB0ZWRCYWxsb3QsIGJ5dGVzMzIgc2VuZGVyUHVia2V5KSBub3RCYW5uZWQgYmFsbG90T3BlbiBwdWJsaWMgewogICAgICAgIGFkZEJhbGxvdEFuZFZvdGVyKGVuY3J5cHRlZEJhbGxvdCwgc2VuZGVyUHVia2V5KTsKICAgIH0KCiAgICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBlbnN1cmUgYXRvbWljaXR5IG9mIHZvdGVyIGxvZwogICAgZnVuY3Rpb24gYWRkQmFsbG90QW5kVm90ZXIoYnl0ZXMzMiBlbmNyeXB0ZWRCYWxsb3QsIGJ5dGVzMzIgc2VuZGVyUHVia2V5KSBpbnRlcm5hbCB7CiAgICAgICAgdWludDI1NiBiYWxsb3ROdW1iZXIgPSBuVm90ZXNDYXN0OwogICAgICAgIGVuY3J5cHRlZEJhbGxvdHNbYmFsbG90TnVtYmVyXSA9IGVuY3J5cHRlZEJhbGxvdDsKICAgICAgICBhc3NvY2lhdGVkUHVia2V5c1tiYWxsb3ROdW1iZXJdID0gc2VuZGVyUHVia2V5OwogICAgICAgIGFzc29jaWF0ZWRBZGRyZXNzZXNbYmFsbG90TnVtYmVyXSA9IG1zZy5zZW5kZXI7CiAgICAgICAgdm90ZXJUb0JhbGxvdElEW21zZy5zZW5kZXJdID0gYmFsbG90TnVtYmVyOwogICAgICAgIG5Wb3Rlc0Nhc3QgKz0gMTsKICAgICAgICBTdWNjZXNzZnVsVm90ZShtc2cuc2VuZGVyLCBlbmNyeXB0ZWRCYWxsb3QsIHNlbmRlclB1YmtleSk7CiAgICB9CgogICAgLy8gQWxsb3cgdGhlIG93bmVyIHRvIHJldmVhbCB0aGUgc2VjcmV0IGtleSBhZnRlciBiYWxsb3QgY29uY2x1c2lvbgogICAgZnVuY3Rpb24gcmV2ZWFsU2Vja2V5KGJ5dGVzMzIgX3NlY0tleSkgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgaWYgKGFsbG93U2Vja2V5QmVmb3JlRW5kVGltZSA9PSBmYWxzZSkgewogICAgICAgICAgICByZXF1aXJlKGJsb2NrLnRpbWVzdGFtcCA+IGVuZFRpbWUpOwogICAgICAgIH0KCiAgICAgICAgYmFsbG90RW5jcnlwdGlvblNlY2tleSA9IF9zZWNLZXk7CiAgICAgICAgc2Vja2V5UmV2ZWFsZWQgPSB0cnVlOyAgLy8gdGhpcyBmbGFnIGFsbG93cyB0aGUgY29udHJhY3QgdG8gYmUgbG9ja2VkCiAgICAgICAgU2Vja2V5UmV2ZWFsZWQoX3NlY0tleSk7CiAgICB9CgogICAgLy8gSGVscGVycwogICAgZnVuY3Rpb24gZ2V0RW5jUHVia2V5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsKICAgICAgICByZXR1cm4gYmFsbG90RW5jcnlwdGlvblB1YmtleTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRFbmNTZWNrZXkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMikgewogICAgICAgIHJldHVybiBiYWxsb3RFbmNyeXB0aW9uU2Vja2V5OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJhbGxvdE9wdGlvbnMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYnl0ZXMzMls1XSkgewogICAgICAgIHJldHVybiBvcHRpb25IYXNoZXM7CiAgICB9CgogICAgLy8gYmFsbG90IHBhcmFtcyAtIGFsbG93cyB0aGUgZnJvbnRlbmQgdG8gZG8gc29tZSBjaGVja2luZwogICAgZnVuY3Rpb24gZ2V0QmFsbG90T3B0TnVtYmVyKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHJldHVybiA1OwogICAgfQoKICAgIC8vIFRlc3QgZnVuY3Rpb25zCiAgICBmdW5jdGlvbiBzZXRFbmRUaW1lKHVpbnQyNTYgbmV3RW5kVGltZSkgb25seVRlc3Rpbmcgb25seU93bmVyIHB1YmxpYyB7CiAgICAgICAgZW5kVGltZSA9IG5ld0VuZFRpbWU7CiAgICB9CgogICAgZnVuY3Rpb24gYmFuQWRkcmVzcyhhZGRyZXNzIF9hZGRyKSBvbmx5VGVzdGluZyBvbmx5T3duZXIgcHVibGljIHsKICAgICAgICBiYW5uZWRBZGRyZXNzZXNbX2FkZHJdID0gdHJ1ZTsKICAgIH0KfQ=='.
	

]
