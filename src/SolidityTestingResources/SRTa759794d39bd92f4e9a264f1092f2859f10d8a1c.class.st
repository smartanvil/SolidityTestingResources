Class {
	#name : #SRTa759794d39bd92f4e9a264f1092f2859f10d8a1c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTa759794d39bd92f4e9a264f1092f2859f10d8a1c >> base64 [
	^ ''.
	

]
