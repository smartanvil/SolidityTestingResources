Class {
	#name : #SRT4e817bb432a4ee6c21e8f9be7a8ca3369ed982c5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT4e817bb432a4ee6c21e8f9be7a8ca3369ed982c5 >> base64 [
	^ ''.
	

]
