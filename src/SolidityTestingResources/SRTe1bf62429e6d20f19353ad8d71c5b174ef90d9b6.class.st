Class {
	#name : #SRTe1bf62429e6d20f19353ad8d71c5b174ef90d9b6,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTe1bf62429e6d20f19353ad8d71c5b174ef90d9b6 >> base64 [
	^ ''.
	

]
