Class {
	#name : #SRTbbca42657b1aecf77afde117ef095dc7c9d37c3a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTbbca42657b1aecf77afde117ef095dc7c9d37c3a >> base64 [
	^ ''.
	

]
