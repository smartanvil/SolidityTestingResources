Class {
	#name : #SRT419cad2516763f39d21fe85d3e99ca32649d3ead,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT419cad2516763f39d21fe85d3e99ca32649d3ead >> base64 [
	^ ''.
	

]
