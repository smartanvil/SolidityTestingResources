Class {
	#name : #SRTdae46fadfd30e7b6de74937626adf09d947ecc62,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTdae46fadfd30e7b6de74937626adf09d947ecc62 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7Cgpjb250cmFjdCBBYnN0cmFjdFRva2VuIHsKICAgIC8vIFRoaXMgaXMgbm90IGFuIGFic3RyYWN0IGZ1bmN0aW9uLCBiZWNhdXNlIHNvbGMgd29uJ3QgcmVjb2duaXplIGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGZvciBwdWJsaWMgdmFyaWFibGVzIGFzIGZ1bmN0aW9ucwogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikge30KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOwogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiB2YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOwoKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7CiAgICBldmVudCBJc3N1YW5jZShhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwp9Ci8qKgogKiBAdGl0bGUgU2FmZU1hdGgKICogQGRldiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzIHRoYXQgdGhyb3cgb24gZXJyb3IKICovCmNvbnRyYWN0IFNhZmVNYXRoIHsKICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKiBiOwogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsKICAgIHJldHVybiBjOwogIH0KCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7CiAgICBhc3NlcnQoYiAhPSAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwCiAgICB1aW50MjU2IGMgPSBhIC8gYjsKICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkCiAgICByZXR1cm4gYzsKICB9CgogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NikgewogICAgYXNzZXJ0KGIgPD0gYSk7CiAgICByZXR1cm4gYSAtIGI7CiAgfQoKICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgYXNzZXJ0KGMgPj0gYSk7CiAgICByZXR1cm4gYzsKICB9CiAgCiAgZnVuY3Rpb24gbXVsQnlGcmFjdGlvbih1aW50MjU2IG51bWJlciwgdWludDI1NiBudW1lcmF0b3IsIHVpbnQyNTYgZGVub21pbmF0b3IpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgcmV0dXJuIGRpdihtdWwobnVtYmVyLCBudW1lcmF0b3IpLCBkZW5vbWluYXRvcik7CiAgfQp9Cgpjb250cmFjdCBQcmVJY28gaXMgU2FmZU1hdGggewogICAgLyoKICAgICAqIFByZUljbyBtZXRhIGRhdGEKICAgICAqLwogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlJlbWVjaGFpbiBQcmVzYWxlIFRva2VuIjsKICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlJNQyI7CiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4OwogICAgCiAgICAvLyBhZGRyZXNzZXMgb2YgbWFuYWdlcnMKICAgIGFkZHJlc3MgcHVibGljIG1hbmFnZXI7CiAgICBhZGRyZXNzIHB1YmxpYyByZXNlcnZlTWFuYWdlcjsKICAgIC8vIGFkZHJlc3NlcyBvZiBlc2Nyb3dzCiAgICBhZGRyZXNzIHB1YmxpYyBlc2Nyb3c7CiAgICBhZGRyZXNzIHB1YmxpYyByZXNlcnZlRXNjcm93OwogICAgCiAgICAvLyBCQVNFID0gMTBeMTgKICAgIHVpbnQgY29uc3RhbnQgQkFTRSA9IDEwMDAwMDAwMDAwMDAwMDAwMDA7CiAgICAKICAgIC8vIGFtb3VudCBvZiBzdXBwbGllZCB0b2tlbnMKICAgIHVpbnQgcHVibGljIHRva2Vuc1N1cHBsaWVkID0gMDsKICAgIC8vIGFtb3VudCBvZiBzdXBwbGllZCBib3VudHkgcmV3YXJkCiAgICB1aW50IHB1YmxpYyBib3VudHlTdXBwbGllZCA9IDA7CiAgICAvLyBTb2Z0IGNhcGFjaXR5ID0gMTY2IDY2NiBSTUMgPSA1MDAgRVRICiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBTT0ZUX0NBUEFDSVRZID0gMTY2NjY2ICogQkFTRTsKICAgIC8vIEhhcmQgY2FwYWNpdHkgPSA2MDAgMDAwIFJNQyA9IDE4NzUgRVRICiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTlNfU1VQUExZID0gNjAwMDAwICogQkFTRTsKICAgIC8vIEFtb3VudCBvZiBib3VudHkgcmV3YXJkCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBCT1VOVFlfU1VQUExZID0gMzUwMDAwICogQkFTRTsKICAgIC8vIFRvdGFsIHN1cHBseQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgdG90YWxTdXBwbHkgPSBUT0tFTlNfU1VQUExZICsgQk9VTlRZX1NVUFBMWTsKICAgIAogICAgLy8gMSBSTUMgPSAwLjAwMyBFVEggZm9yIGZpcnN0IDIwMCAwMDAgUk1DCiAgICAvLyAxIFJNQyA9IDAuMDAzMTI1IEVUSCBmb3Igc2Vjb25kIDIwMCAwMDAgUk1DCiAgICAvLyAxIFJNQyA9IDAuMDAzMjUgRVRIIGZvciB0aGlyZCAyMDAgMDAwIFJNQwogICAgdWludCBwdWJsaWMgY29uc3RhbnQgVE9LRU5fUFJJQ0UgPSAzMDAwMDAwMDAwMDAwMDAwOwogICAgdWludCB0b2tlbkFtb3VudDEgPSAyMDAwMDAgKiBCQVNFOwogICAgdWludCB0b2tlbkFtb3VudDIgPSAyMDAwMDAgKiBCQVNFOwogICAgdWludCB0b2tlbkFtb3VudDMgPSAyMDAwMDAgKiBCQVNFOwogICAgdWludCB0b2tlblByaWNlTXVsdGlwbHkxID0gMTsKICAgIHVpbnQgdG9rZW5QcmljZURpdmlkZTEgPSAxOwogICAgdWludCB0b2tlblByaWNlTXVsdGlwbHkyID0gMTA0MTY2NzsKICAgIHVpbnQgdG9rZW5QcmljZURpdmlkZTIgPSAxMDAwMDAwOwogICAgdWludCB0b2tlblByaWNlTXVsdGlwbHkzID0gMTA4MzMzMzsKICAgIHVpbnQgdG9rZW5QcmljZURpdmlkZTMgPSAxMDAwMDAwOwogICAgCiAgICB1aW50W10gcHVibGljIHRva2VuUHJpY2VNdWx0aXBsaWVzOwogICAgdWludFtdIHB1YmxpYyB0b2tlblByaWNlRGl2aWRlczsKICAgIHVpbnRbXSBwdWJsaWMgdG9rZW5BbW91bnRzOwogICAgCiAgICAvLyBFVEggYmFsYW5jZXMgb2YgYWNjb3VudHMKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgZXRoQmFsYW5jZXM7CiAgICB1aW50W10gcHVibGljIHByaWNlczsKICAgIHVpbnRbXSBwdWJsaWMgYW1vdW50czsKICAgIAogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHByaXZhdGUgYmFsYW5jZXM7CiAgICAKICAgIC8vIDIwMTguMDEuMTEgMTc6MDAgTVNLCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBkZWZhdWx0RGVhZGxpbmUgPSAxNTE1Njc5MjAwOwogICAgdWludCBwdWJsaWMgZGVhZGxpbmUgPSBkZWZhdWx0RGVhZGxpbmU7CiAgICAKICAgIC8vIElzIElDTyBmcm96ZW4KICAgIGJvb2wgcHVibGljIGlzSWNvU3RvcHBlZCA9IGZhbHNlOwogICAgCiAgICAvLyBBZGRyZXNzZXMgb2YgYWxsb3dlZCB0b2tlbnMgZm9yIGJ1eWluZyAKICAgIGFkZHJlc3NbXSBwdWJsaWMgYWxsb3dlZFRva2VuczsKICAgIC8vIEFtb3VudCBvZiB0b2tlbgogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyB0b2tlbkFtb3VudDsKICAgIC8vIFByaWNlIG9mIGN1cnJlbnQgdG9rZW4gYW1vdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIHRva2VuUHJpY2U7CiAgICAKICAgIC8vIEZ1bGwgdXNlcnMgbGlzdAogICAgYWRkcmVzc1tdIHB1YmxpYyB1c2Vyc0xpc3Q7CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgaXNVc2VySW5MaXN0OwogICAgLy8gTnVtYmVyIG9mIHVzZXJzIHRoYXQgaGF2ZSByZXR1cm5lZCB0aGVpciBtb25leQogICAgdWludCBudW1iZXJPZlVzZXJzUmV0dXJuZWQgPSAwOwogICAgCiAgICAvLyB1c2VyID0+IHRva2VuW10KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBhZGRyZXNzW10pIHB1YmxpYyB1c2VyVG9rZW5zOwogICAgLy8gIHVzZXIgPT4gdG9rZW4gPT4gYW1vdW50CiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpKSBwdWJsaWMgdXNlclRva2Vuc1ZhbHVlczsKICAgIAogICAgLyoKICAgICAqIEV2ZW50cwogICAgICovCiAgICAKICAgIGV2ZW50IEJ1eVRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3VzZXIsIHVpbnQgX2V0aFZhbHVlLCB1aW50IF9ib3VnaHRUb2tlbnMpOwogICAgZXZlbnQgQnV5VG9rZW5zV2l0aFRva2VucyhhZGRyZXNzIGluZGV4ZWQgX3VzZXIsIGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIHVpbnQgX3Rva2VuVmFsdWUsIHVpbnQgX2JvdWdodFRva2Vucyk7CiAgICBldmVudCBHaXZlUmV3YXJkKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsKICAgIAogICAgZXZlbnQgSWNvU3RvcHBlZE1hbnVhbGx5KCk7CiAgICBldmVudCBJY29SdW5uZWRNYW51YWxseSgpOwogICAgCiAgICBldmVudCBXaXRoZHJhd0V0aGVyKGFkZHJlc3MgaW5kZXhlZCBfZXNjcm93LCB1aW50IF9ldGhWYWx1ZSk7CiAgICBldmVudCBXaXRoZHJhd1Rva2VuKGFkZHJlc3MgaW5kZXhlZCBfZXNjcm93LCBhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBSZXR1cm5FdGhlcnNGb3IoYWRkcmVzcyBpbmRleGVkIF91c2VyLCB1aW50IF92YWx1ZSk7CiAgICBldmVudCBSZXR1cm5Ub2tlbnNGb3IoYWRkcmVzcyBpbmRleGVkIF91c2VyLCBhZGRyZXNzIGluZGV4ZWQgX3Rva2VuLCB1aW50IF92YWx1ZSk7CiAgICAKICAgIGV2ZW50IEFkZFRva2VuKGFkZHJlc3MgaW5kZXhlZCBfdG9rZW4sIHVpbnQgX2Ftb3VudCwgdWludCBfcHJpY2UpOwogICAgZXZlbnQgUmVtb3ZlVG9rZW4oYWRkcmVzcyBpbmRleGVkIF90b2tlbik7CiAgICAKICAgIGV2ZW50IE1vdmVUb2tlbnMoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7CiAgICAKICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOwogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7CiAgICAKICAgIC8qCiAgICAgKiBNb2RpZmllcnMKICAgICAqLwogICAgCiAgICBtb2RpZmllciBvbmx5TWFuYWdlciB7CiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gbWFuYWdlciB8fCBtc2cuc2VuZGVyID09IHJlc2VydmVNYW5hZ2VyKTsKICAgICAgICBfOwogICAgfQogICAgbW9kaWZpZXIgb25seU1hbmFnZXJPckNvbnRyYWN0IHsKICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBtYW5hZ2VyIHx8IG1zZy5zZW5kZXIgPT0gcmVzZXJ2ZU1hbmFnZXIgfHwgbXNnLnNlbmRlciA9PSBhZGRyZXNzKHRoaXMpKTsKICAgICAgICBfOwogICAgfQogICAgbW9kaWZpZXIgSWNvSXNBY3RpdmUgewogICAgICAgIGFzc2VydChpc0ljb0FjdGl2ZSgpKTsKICAgICAgICBfOwogICAgfQogICAgCiAgICAKICAgIC8vLyBAZGV2IENvbnN0cnVjdG9yIG9mIFByZUljby4KICAgIC8vLyBAcGFyYW0gX21hbmFnZXIgQWRkcmVzcyBvZiBtYW5hZ2VyCiAgICAvLy8gQHBhcmFtIF9yZXNlcnZlTWFuYWdlciBBZGRyZXNzIG9mIHJlc2VydmUgbWFuYWdlcgogICAgLy8vIEBwYXJhbSBfZXNjcm93IEFkZHJlc3Mgb2YgZXNjcm93CiAgICAvLy8gQHBhcmFtIF9yZXNlcnZlRXNjcm93IEFkZHJlc3Mgb2YgcmVzZXJ2ZSBlc2Nyb3cKICAgIC8vLyBAcGFyYW0gX2RlYWRsaW5lIElDTyBkZWFkbGluZSB0aW1lc3RhbXAuIElmIGlzIDAsIHNldHMgMTUxNTY3OTIwMAogICAgZnVuY3Rpb24gUHJlSWNvKGFkZHJlc3MgX21hbmFnZXIsIGFkZHJlc3MgX3Jlc2VydmVNYW5hZ2VyLCBhZGRyZXNzIF9lc2Nyb3csIGFkZHJlc3MgX3Jlc2VydmVFc2Nyb3csIHVpbnQgX2RlYWRsaW5lKSBwdWJsaWMgewogICAgICAgIGFzc2VydChfbWFuYWdlciAhPSAweDApOwogICAgICAgIGFzc2VydChfcmVzZXJ2ZU1hbmFnZXIgIT0gMHgwKTsKICAgICAgICBhc3NlcnQoX2VzY3JvdyAhPSAweDApOwogICAgICAgIGFzc2VydChfcmVzZXJ2ZUVzY3JvdyAhPSAweDApOwogICAgICAgIAogICAgICAgIG1hbmFnZXIgPSBfbWFuYWdlcjsKICAgICAgICByZXNlcnZlTWFuYWdlciA9IF9yZXNlcnZlTWFuYWdlcjsKICAgICAgICBlc2Nyb3cgPSBfZXNjcm93OwogICAgICAgIHJlc2VydmVFc2Nyb3cgPSBfcmVzZXJ2ZUVzY3JvdzsKICAgICAgICAKICAgICAgICBpZiAoX2RlYWRsaW5lICE9IDApIHsKICAgICAgICAgICAgZGVhZGxpbmUgPSBfZGVhZGxpbmU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRva2VuUHJpY2VNdWx0aXBsaWVzLnB1c2godG9rZW5QcmljZU11bHRpcGx5MSk7CiAgICAgICAgdG9rZW5QcmljZU11bHRpcGxpZXMucHVzaCh0b2tlblByaWNlTXVsdGlwbHkyKTsKICAgICAgICB0b2tlblByaWNlTXVsdGlwbGllcy5wdXNoKHRva2VuUHJpY2VNdWx0aXBseTMpOwogICAgICAgIHRva2VuUHJpY2VEaXZpZGVzLnB1c2godG9rZW5QcmljZURpdmlkZTEpOwogICAgICAgIHRva2VuUHJpY2VEaXZpZGVzLnB1c2godG9rZW5QcmljZURpdmlkZTIpOwogICAgICAgIHRva2VuUHJpY2VEaXZpZGVzLnB1c2godG9rZW5QcmljZURpdmlkZTMpOwogICAgICAgIHRva2VuQW1vdW50cy5wdXNoKHRva2VuQW1vdW50MSk7CiAgICAgICAgdG9rZW5BbW91bnRzLnB1c2godG9rZW5BbW91bnQyKTsKICAgICAgICB0b2tlbkFtb3VudHMucHVzaCh0b2tlbkFtb3VudDMpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBSZXR1cm5zIHRva2VuIGJhbGFuY2Ugb2YgdXNlci4gMSB0b2tlbiA9IDEvMTBeMTggUk1DCiAgICAvLy8gQHBhcmFtIF91c2VyIEFkZHJlc3Mgb2YgdXNlcgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX3VzZXIpIHB1YmxpYyByZXR1cm5zKHVpbnQgYmFsYW5jZSkgewogICAgICAgIHJldHVybiBiYWxhbmNlc1tfdXNlcl07CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFJldHVybnMsIGlzIElDTyBlbmFibGVkCiAgICBmdW5jdGlvbiBpc0ljb0FjdGl2ZSgpIHB1YmxpYyByZXR1cm5zKGJvb2wgaXNBY3RpdmUpIHsKICAgICAgICByZXR1cm4gIWlzSWNvU3RvcHBlZCAmJiBub3cgPCBkZWFkbGluZTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgUmV0dXJucywgaXMgU29mdENhcCByZWFjaGVkCiAgICBmdW5jdGlvbiBpc0ljb1N1Y2Nlc3NmdWwoKSBwdWJsaWMgcmV0dXJucyhib29sIGlzU3VjY2Vzc2Z1bCkgewogICAgICAgIHJldHVybiB0b2tlbnNTdXBwbGllZCA+PSBTT0ZUX0NBUEFDSVRZOwogICAgfQogICAgCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIG51bWJlciBvZiB0b2tlbnMgUk1DIGZvciBidXlpbmcgd2l0aCBjdXN0b20gcHJpY2Ugb2YgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2Ftb3VudE9mVG9rZW4gQW1vdW50IG9mIFJNQyB0b2tlbgogICAgLy8vIEBwYXJhbSBfcHJpY2VBbW91bnRPZlRva2VuIFByaWNlIG9mIGFtb3VudCBvZiBSTUMKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiBjdXN0b20gdG9rZW4KICAgIGZ1bmN0aW9uIGdldFRva2Vuc0Ftb3VudCh1aW50IF9hbW91bnRPZlRva2VuLCB1aW50IF9wcmljZUFtb3VudE9mVG9rZW4sICB1aW50IF92YWx1ZSkgcHJpdmF0ZSByZXR1cm5zKHVpbnQgdG9rZW5zVG9CdXkpIHsKICAgICAgICB1aW50IGN1cnJlbnRTdGVwOwogICAgICAgIHVpbnQgdG9rZW5zUmVtb3ZlZCA9IHRva2Vuc1N1cHBsaWVkOwogICAgICAgIGZvciAoY3VycmVudFN0ZXAgPSAwOyBjdXJyZW50U3RlcCA8IHRva2VuQW1vdW50cy5sZW5ndGg7IGN1cnJlbnRTdGVwKyspIHsKICAgICAgICAgICAgaWYgKHRva2Vuc1JlbW92ZWQgPj0gdG9rZW5BbW91bnRzW2N1cnJlbnRTdGVwXSkgewogICAgICAgICAgICAgICAgdG9rZW5zUmVtb3ZlZCAtPSB0b2tlbkFtb3VudHNbY3VycmVudFN0ZXBdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgYXNzZXJ0KGN1cnJlbnRTdGVwIDwgdG9rZW5BbW91bnRzLmxlbmd0aCk7CiAgICAgICAgCiAgICAgICAgdWludCByZXN1bHQgPSAwOwogICAgICAgIAogICAgICAgIGZvciAoOyBjdXJyZW50U3RlcCA8PSB0b2tlbkFtb3VudHMubGVuZ3RoOyBjdXJyZW50U3RlcCsrKSB7CiAgICAgICAgICAgIGFzc2VydChjdXJyZW50U3RlcCA8IHRva2VuQW1vdW50cy5sZW5ndGgpOwogICAgICAgICAgICAKICAgICAgICAgICAgdWludCB0b2tlbk9uU3RlcExlZnQgPSB0b2tlbkFtb3VudHNbY3VycmVudFN0ZXBdIC0gdG9rZW5zUmVtb3ZlZDsKICAgICAgICAgICAgdG9rZW5zUmVtb3ZlZCA9IDA7CiAgICAgICAgICAgIHVpbnQgaG93TWFueVRva2Vuc0NhbkJ1eSA9IF92YWx1ZSAKICAgICAgICAgICAgICAgICAgICAqIF9hbW91bnRPZlRva2VuIC8gX3ByaWNlQW1vdW50T2ZUb2tlbiAKICAgICAgICAgICAgICAgICAgICAqIHRva2VuUHJpY2VEaXZpZGVzW2N1cnJlbnRTdGVwXSAvIHRva2VuUHJpY2VNdWx0aXBsaWVzW2N1cnJlbnRTdGVwXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChob3dNYW55VG9rZW5zQ2FuQnV5ID4gdG9rZW5PblN0ZXBMZWZ0KSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBhZGQocmVzdWx0LCB0b2tlbk9uU3RlcExlZnQpOwogICAgICAgICAgICAgICAgdWludCBzcGVudCA9IHRva2VuT25TdGVwTGVmdCAKICAgICAgICAgICAgICAgICAgICAqIF9wcmljZUFtb3VudE9mVG9rZW4gLyBfYW1vdW50T2ZUb2tlbiAKICAgICAgICAgICAgICAgICAgICAqIHRva2VuUHJpY2VNdWx0aXBsaWVzW2N1cnJlbnRTdGVwXSAvIHRva2VuUHJpY2VEaXZpZGVzW2N1cnJlbnRTdGVwXTsKICAgICAgICAgICAgICAgIGlmIChfdmFsdWUgPD0gc3BlbnQpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF92YWx1ZSAtPSBzcGVudDsKICAgICAgICAgICAgICAgIHRva2Vuc1JlbW92ZWQgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gYWRkKHJlc3VsdCwgaG93TWFueVRva2Vuc0NhbkJ1eSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgCiAgICAvLy8gQGRldiBDYWxjdWxhdGVzIG51bWJlciBvZiB0b2tlbnMgUk1DIGZvciBidXlpbmcgd2l0aCBFVEgKICAgIC8vLyBAcGFyYW0gX3ZhbHVlIEFtb3VudCBvZiBFVEggdG9rZW4KICAgIGZ1bmN0aW9uIGdldFRva2Vuc0Ftb3VudFdpdGhFdGgodWludCBfdmFsdWUpIHByaXZhdGUgcmV0dXJucyh1aW50IHRva2Vuc1RvQnV5KSB7CiAgICAgICAgcmV0dXJuIGdldFRva2Vuc0Ftb3VudChCQVNFLCBUT0tFTl9QUklDRSwgX3ZhbHVlKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgQ2FsY3VsYXRlcyBudW1iZXIgb2YgdG9rZW5zIFJNQyBmb3IgYnV5aW5nIHdpdGggRVJDLTIwIHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgLy8vIEBwYXJhbSBfdG9rZW5WYWx1ZSBBbW91bnQgb2YgRVRIIHRva2VuCiAgICBmdW5jdGlvbiBnZXRUb2tlbnNBbW91bnRCeVRva2VucyhhZGRyZXNzIF90b2tlbiwgdWludCBfdG9rZW5WYWx1ZSkgcHJpdmF0ZSByZXR1cm5zKHVpbnQgdG9rZW5zVG9CdXkpIHsKICAgICAgICBhc3NlcnQodG9rZW5QcmljZVtfdG9rZW5dID4gMCk7CiAgICAgICAgcmV0dXJuIGdldFRva2Vuc0Ftb3VudCh0b2tlblByaWNlW190b2tlbl0sIHRva2VuQW1vdW50W190b2tlbl0sIF90b2tlblZhbHVlKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgU29sZHMgdG9rZW5zIGZvciB1c2VyIGJ5IEVUSAogICAgLy8vIEBwYXJhbSBfdXNlciBBZGRyZXNzIG9mIHVzZXIgd2hpY2ggYnV5cyB0b2tlbgogICAgLy8vIEBwYXJhbSBfdmFsdWUgQW1vdW50IG9mIEVUSC4gMSBfdmFsdWUgPSAxLzEwXjE4IEVUSAogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgX3VzZXIsIHVpbnQgX3ZhbHVlKSBwcml2YXRlIEljb0lzQWN0aXZlIHsKICAgICAgICB1aW50IGJvdWdodFRva2VucyA9IGdldFRva2Vuc0Ftb3VudFdpdGhFdGgoX3ZhbHVlKTsKICAgICAgICBidXJuVG9rZW5zKGJvdWdodFRva2Vucyk7CiAgICAgICAgCiAgICAgICAgYmFsYW5jZXNbX3VzZXJdID0gYWRkKGJhbGFuY2VzW191c2VyXSwgYm91Z2h0VG9rZW5zKTsKICAgICAgICBhZGRVc2VyVG9MaXN0KF91c2VyKTsKICAgICAgICBCdXlUb2tlbnMoX3VzZXIsIF92YWx1ZSwgYm91Z2h0VG9rZW5zKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgTWFrZXMgRVJDLTIwIHRva2VuIHNlbGxhYmxlCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgLy8vIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiBjdXJyZW50IHRva2VuCiAgICAvLy8gQHBhcmFtIF9wcmljZSBQcmljZSBvZiBfYW1vdW50IG9mIHRva2VuCiAgICBmdW5jdGlvbiBhZGRUb2tlbihhZGRyZXNzIF90b2tlbiwgdWludCBfYW1vdW50LCB1aW50IF9wcmljZSkgb25seU1hbmFnZXIgcHVibGljIHsKICAgICAgICBhc3NlcnQoX3Rva2VuICE9IDB4MCk7CiAgICAgICAgYXNzZXJ0KF9hbW91bnQgPiAwKTsKICAgICAgICBhc3NlcnQoX3ByaWNlID4gMCk7CiAgICAgICAgCiAgICAgICAgYm9vbCBpc05ld1Rva2VuID0gdHJ1ZTsKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBhbGxvd2VkVG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChhbGxvd2VkVG9rZW5zW2ldID09IF90b2tlbikgewogICAgICAgICAgICAgICAgaXNOZXdUb2tlbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGlzTmV3VG9rZW4pIHsKICAgICAgICAgICAgYWxsb3dlZFRva2Vucy5wdXNoKF90b2tlbik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRva2VuUHJpY2VbX3Rva2VuXSA9IF9wcmljZTsKICAgICAgICB0b2tlbkFtb3VudFtfdG9rZW5dID0gX2Ftb3VudDsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgTWFrZXMgRVJDLTIwIHRva2VuIG5vdCBzZWxsYWJsZQogICAgLy8vIEBwYXJhbSBfdG9rZW4gQWRkcmVzcyBvZiBFUkMtMjAgdG9rZW4KICAgIGZ1bmN0aW9uIHJlbW92ZVRva2VuKGFkZHJlc3MgX3Rva2VuKSBvbmx5TWFuYWdlciBwdWJsaWMgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFsbG93ZWRUb2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKF90b2tlbiA9PSBhbGxvd2VkVG9rZW5zW2ldKSB7CiAgICAgICAgICAgICAgICBpZiAoaSA8IGFsbG93ZWRUb2tlbnMubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRUb2tlbnNbaV0gPSBhbGxvd2VkVG9rZW5zW2FsbG93ZWRUb2tlbnMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbGxvd2VkVG9rZW5zW2FsbG93ZWRUb2tlbnMubGVuZ3RoIC0gMV0gPSAweDA7CiAgICAgICAgICAgICAgICBhbGxvd2VkVG9rZW5zLmxlbmd0aC0tOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAKICAgICAgICB0b2tlblByaWNlW190b2tlbl0gPSAwOwogICAgICAgIHRva2VuQW1vdW50W190b2tlbl0gPSAwOwogICAgfQogICAgCiAgICAvLy8gQGRldiBhZGQgdXNlciB0byB1c2Vyc0xpc3QKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICBmdW5jdGlvbiBhZGRVc2VyVG9MaXN0KGFkZHJlc3MgX3VzZXIpIHByaXZhdGUgewogICAgICAgIGlmICghaXNVc2VySW5MaXN0W191c2VyXSkgewogICAgICAgICAgICBpc1VzZXJJbkxpc3RbX3VzZXJdID0gdHJ1ZTsKICAgICAgICAgICAgdXNlcnNMaXN0LnB1c2goX3VzZXIpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8vIEBkZXYgTWFrZXMgYW1vdW50IG9mIHRva2VucyBub3QgcHVyY2hhc2FibGUKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgUk1DIHRva2VucwogICAgZnVuY3Rpb24gYnVyblRva2Vucyh1aW50IF9hbW91bnQpIHByaXZhdGUgewogICAgICAgIGFzc2VydChhZGQodG9rZW5zU3VwcGxpZWQsIF9hbW91bnQpIDw9IFRPS0VOU19TVVBQTFkpOwogICAgICAgIHRva2Vuc1N1cHBsaWVkID0gYWRkKHRva2Vuc1N1cHBsaWVkLCBfYW1vdW50KTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgVGFrZXMgRVJDLTIwIHRva2VucyBhcHByb3ZlZCBieSB1c2VyIGZvciB1c2luZyBhbmQgZ2l2ZXMgaGltIFJNQyB0b2tlbnMKICAgIC8vLyBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgRVJDLTIwIHRva2VuCiAgICBmdW5jdGlvbiBidXlXaXRoVG9rZW5zKGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgewogICAgICAgIGJ1eVdpdGhUb2tlbnNCeShtc2cuc2VuZGVyLCBfdG9rZW4pOwogICAgfQogICAgCiAgICAvLy8gQGRldiBUYWtlcyBFUkMtMjAgdG9rZW5zIGFwcHJvdmVkIGJ5IHVzZXIgZm9yIHVzaW5nIGFuZCBnaXZlcyBoaW0gUk1DIHRva2Vucy4gQ2FuIGJlIGNhbGxlZCBieSBhbnlvbmUKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gYnV5V2l0aFRva2Vuc0J5KGFkZHJlc3MgX3VzZXIsIGFkZHJlc3MgX3Rva2VuKSBwdWJsaWMgSWNvSXNBY3RpdmUgewogICAgICAgIC8vIENoZWNrcyB3aGV0aGVyIHRoZSB0b2tlbiBpcyBhbGxvd2VkCiAgICAgICAgYXNzZXJ0KHRva2VuUHJpY2VbX3Rva2VuXSA+IDApOwogICAgICAgIAogICAgICAgIEFic3RyYWN0VG9rZW4gdG9rZW4gPSBBYnN0cmFjdFRva2VuKF90b2tlbik7CiAgICAgICAgdWludCB0b2tlbnNUb1NlbmQgPSB0b2tlbi5hbGxvd2FuY2UoX3VzZXIsIGFkZHJlc3ModGhpcykpOwogICAgICAgIGFzc2VydCh0b2tlbnNUb1NlbmQgPiAwKTsKICAgICAgICAKICAgICAgICB1aW50IGJvdWdodFRva2VucyA9IGdldFRva2Vuc0Ftb3VudEJ5VG9rZW5zKF90b2tlbiwgdG9rZW5zVG9TZW5kKTsKICAgICAgICBidXJuVG9rZW5zKGJvdWdodFRva2Vucyk7CiAgICAgICAgYmFsYW5jZXNbX3VzZXJdID0gYWRkKGJhbGFuY2VzW191c2VyXSwgYm91Z2h0VG9rZW5zKTsKICAgICAgICAKICAgICAgICB1aW50IHByZXZCYWxhbmNlID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOwogICAgICAgIGFzc2VydCh0b2tlbi50cmFuc2ZlckZyb20oX3VzZXIsIGFkZHJlc3ModGhpcyksIHRva2Vuc1RvU2VuZCkpOwogICAgICAgIGFzc2VydCh0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkgLSBwcmV2QmFsYW5jZSA9PSB0b2tlbnNUb1NlbmQpOwogICAgICAgIAogICAgICAgIHVzZXJUb2tlbnNWYWx1ZXNbX3VzZXJdW190b2tlbl0gPSBhZGQodXNlclRva2Vuc1ZhbHVlc1tfdXNlcl1bX3Rva2VuXSwgdG9rZW5zVG9TZW5kKTsKICAgICAgICAKICAgICAgICBhZGRUb2tlblRvVXNlcihfdXNlciwgX3Rva2VuKTsKICAgICAgICBhZGRVc2VyVG9MaXN0KF91c2VyKTsKICAgICAgICBCdXlUb2tlbnNXaXRoVG9rZW5zKF91c2VyLCBfdG9rZW4sIHRva2Vuc1RvU2VuZCwgYm91Z2h0VG9rZW5zKTsKICAgIH0KICAgIAogICAgLy8vIEBkZXYgTWFrZXMgYW1vdW50IG9mIHRva2VucyByZXR1cm5hYmxlIGZvciB1c2VyLiBJZiBfYnV5VG9rZW5zIGVxdWFscyB0cnVlLCBidXkgdG9rZW5zIAogICAgLy8vIEBwYXJhbSBfdXNlciBBZGRyZXNzIG9mIHVzZXIKICAgIC8vLyBAcGFyYW0gX3Rva2VuIEFkZHJlc3Mgb2YgRVJDLTIwIHRva2VuCiAgICAvLy8gQHBhcmFtIF90b2tlblZhbHVlIEFtb3VudCBvZiBFUkMtMjAgdG9rZW4KICAgIC8vLyBAcGFyYW0gX2J1eVRva2VucyBJZiB0cnVlLCBidXlzIHRva2VucyBmb3IgdGhpcyBzdW0KICAgIGZ1bmN0aW9uIGFkZFRva2Vuc1RvUmV0dXJuKGFkZHJlc3MgX3VzZXIsIGFkZHJlc3MgX3Rva2VuLCB1aW50IF90b2tlblZhbHVlLCBib29sIF9idXlUb2tlbnMpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgLy8gQ2hlY2tzIHdoZXRoZXIgdGhlIHRva2VuIGlzIGFsbG93ZWQKICAgICAgICBhc3NlcnQodG9rZW5QcmljZVtfdG9rZW5dID4gMCk7CiAgICAgICAgCiAgICAgICAgaWYgKF9idXlUb2tlbnMpIHsKICAgICAgICAgICAgdWludCBib3VnaHRUb2tlbnMgPSBnZXRUb2tlbnNBbW91bnRCeVRva2VucyhfdG9rZW4sIF90b2tlblZhbHVlKTsKICAgICAgICAgICAgYnVyblRva2Vucyhib3VnaHRUb2tlbnMpOwogICAgICAgICAgICBiYWxhbmNlc1tfdXNlcl0gPSBhZGQoYmFsYW5jZXNbX3VzZXJdLCBib3VnaHRUb2tlbnMpOwogICAgICAgICAgICBCdXlUb2tlbnNXaXRoVG9rZW5zKF91c2VyLCBfdG9rZW4sIF90b2tlblZhbHVlLCBib3VnaHRUb2tlbnMpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB1c2VyVG9rZW5zVmFsdWVzW191c2VyXVtfdG9rZW5dID0gYWRkKHVzZXJUb2tlbnNWYWx1ZXNbX3VzZXJdW190b2tlbl0sIF90b2tlblZhbHVlKTsKICAgICAgICBhZGRUb2tlblRvVXNlcihfdXNlciwgX3Rva2VuKTsKICAgICAgICBhZGRVc2VyVG9MaXN0KF91c2VyKTsKICAgIH0KICAgIAogICAgCiAgICAvLy8gQGRldiBBZGRzIEVSQy0yMCB0b2tlbnMgdG8gdXNlcidzIHRva2VuIGxpc3QKICAgIC8vLyBAcGFyYW0gX3VzZXIgQWRkcmVzcyBvZiB1c2VyCiAgICAvLy8gQHBhcmFtIF90b2tlbiBBZGRyZXNzIG9mIEVSQy0yMCB0b2tlbgogICAgZnVuY3Rpb24gYWRkVG9rZW5Ub1VzZXIoYWRkcmVzcyBfdXNlciwgYWRkcmVzcyBfdG9rZW4pIHByaXZhdGUgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IHVzZXJUb2tlbnNbX3VzZXJdLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICh1c2VyVG9rZW5zW191c2VyXVtpXSA9PSBfdG9rZW4pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB1c2VyVG9rZW5zW191c2VyXS5wdXNoKF90b2tlbik7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFJldHVybnMgZXRoZXIgYW5kIHRva2VucyB0byB1c2VyLiBDYW4gYmUgY2FsbGVkIG9ubHkgaWYgSUNPIGlzIGVuZGVkIGFuZCBTb2Z0Q2FwIGlzIG5vdCByZWFjaGVkCiAgICBmdW5jdGlvbiByZXR1cm5GdW5kcygpIHB1YmxpYyB7CiAgICAgICAgYXNzZXJ0KCFpc0ljb1N1Y2Nlc3NmdWwoKSAmJiAhaXNJY29BY3RpdmUoKSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuRnVuZHNGb3IobXNnLnNlbmRlcik7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IE1vdmVzIHRva2VucyBmcm9tIG9uZSB1c2VyIHRvIGFub3RoZXIuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyLiBUaGlzIGZ1bmN0aW9uIGFkZGVkIGZvciB1c2VycyB0aGF0IHNlbmQgZXRoZXIgYnkgc3RvY2sgZXhjaGFuZ2VzCiAgICBmdW5jdGlvbiBtb3ZlSWNvVG9rZW5zKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICBiYWxhbmNlc1tfZnJvbV0gPSBzdWIoYmFsYW5jZXNbX2Zyb21dLCBfdmFsdWUpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBhZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsKICAgICAgICAKICAgICAgICBNb3ZlVG9rZW5zKF9mcm9tLCBfdG8sIF92YWx1ZSk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFJldHVybnMgZXRoZXIgYW5kIHRva2VucyB0byB1c2VyLiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlciBvciBjb250cmFjdAogICAgLy8vIEBwYXJhbSBfdXNlciBBZGRyZXNzIG9mIHVzZXIKICAgIGZ1bmN0aW9uIHJldHVybkZ1bmRzRm9yKGFkZHJlc3MgX3VzZXIpIHB1YmxpYyBvbmx5TWFuYWdlck9yQ29udHJhY3QgcmV0dXJucyhib29sKSB7CiAgICAgICAgaWYgKGV0aEJhbGFuY2VzW191c2VyXSA+IDApIHsKICAgICAgICAgICAgaWYgKF91c2VyLnNlbmQoZXRoQmFsYW5jZXNbX3VzZXJdKSkgewogICAgICAgICAgICAgICAgUmV0dXJuRXRoZXJzRm9yKF91c2VyLCBldGhCYWxhbmNlc1tfdXNlcl0pOwogICAgICAgICAgICAgICAgZXRoQmFsYW5jZXNbX3VzZXJdID0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCB1c2VyVG9rZW5zW191c2VyXS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBhZGRyZXNzIHRva2VuQWRkcmVzcyA9IHVzZXJUb2tlbnNbX3VzZXJdW2ldOwogICAgICAgICAgICB1aW50IHVzZXJUb2tlblZhbHVlID0gdXNlclRva2Vuc1ZhbHVlc1tfdXNlcl1bdG9rZW5BZGRyZXNzXTsKICAgICAgICAgICAgaWYgKHVzZXJUb2tlblZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgQWJzdHJhY3RUb2tlbiB0b2tlbiA9IEFic3RyYWN0VG9rZW4odG9rZW5BZGRyZXNzKTsKICAgICAgICAgICAgICAgIGlmICh0b2tlbi50cmFuc2ZlcihfdXNlciwgdXNlclRva2VuVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgUmV0dXJuVG9rZW5zRm9yKF91c2VyLCB0b2tlbkFkZHJlc3MsIHVzZXJUb2tlblZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB1c2VyVG9rZW5zVmFsdWVzW191c2VyXVt0b2tlbkFkZHJlc3NdID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICBiYWxhbmNlc1tfdXNlcl0gPSAwOwogICAgfQogICAgCiAgICAvLy8gQGRldiBSZXR1cm5zIGV0aGVyIGFuZCB0b2tlbnMgdG8gbGlzdCBvZiB1c2Vycy4gQ2FuIGJlIGNhbGxlZCBvbmx5IGJ5IG1hbmFnZXIKICAgIC8vLyBAcGFyYW0gX3VzZXJzIEFycmF5IG9mIGFkZHJlc3NlcyBvZiB1c2VycwogICAgZnVuY3Rpb24gcmV0dXJuRnVuZHNGb3JNdWx0aXBsZShhZGRyZXNzW10gX3VzZXJzKSBwdWJsaWMgb25seU1hbmFnZXIgewogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF91c2Vycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICByZXR1cm5GdW5kc0ZvcihfdXNlcnNbaV0pOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLy8vIEBkZXYgUmV0dXJucyBldGhlciBhbmQgdG9rZW5zIHRvIDUwIHVzZXJzLiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlcgogICAgZnVuY3Rpb24gcmV0dXJuRnVuZHNGb3JBbGwoKSBwdWJsaWMgb25seU1hbmFnZXIgewogICAgICAgIGFzc2VydCghaXNJY29BY3RpdmUoKSAmJiAhaXNJY29TdWNjZXNzZnVsKCkpOwogICAgICAgIAogICAgICAgIHVpbnQgZmlyc3QgPSBudW1iZXJPZlVzZXJzUmV0dXJuZWQ7CiAgICAgICAgdWludCBsYXN0ICA9IChmaXJzdCArIDUwIDwgdXNlcnNMaXN0Lmxlbmd0aCkgPyBmaXJzdCArIDUwIDogdXNlcnNMaXN0Lmxlbmd0aDsKICAgICAgICAKICAgICAgICBmb3IgKHVpbnQgaSA9IGZpcnN0OyBpIDwgbGFzdDsgaSsrKSB7CiAgICAgICAgICAgIHJldHVybkZ1bmRzRm9yKHVzZXJzTGlzdFtpXSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIG51bWJlck9mVXNlcnNSZXR1cm5lZCA9IGxhc3Q7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFdpdGhkcmF3cyBldGhlciBhbmQgdG9rZW5zIHRvIF9lc2Nyb3cgaWYgU29mdENhcCBpcyByZWFjaGVkCiAgICAvLy8gQHBhcmFtIF9lc2Nyb3cgQWRkcmVzcyBvZiBlc2Nyb3cKICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXJUbyhhZGRyZXNzIF9lc2Nyb3cpIHByaXZhdGUgewogICAgICAgIGFzc2VydChpc0ljb1N1Y2Nlc3NmdWwoKSk7CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsKICAgICAgICAgICAgaWYgKF9lc2Nyb3cuc2VuZCh0aGlzLmJhbGFuY2UpKSB7CiAgICAgICAgICAgICAgICBXaXRoZHJhd0V0aGVyKF9lc2Nyb3csIHRoaXMuYmFsYW5jZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYWxsb3dlZFRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBBYnN0cmFjdFRva2VuIHRva2VuID0gQWJzdHJhY3RUb2tlbihhbGxvd2VkVG9rZW5zW2ldKTsKICAgICAgICAgICAgdWludCB0b2tlbkJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7CiAgICAgICAgICAgIGlmICh0b2tlbkJhbGFuY2UgPiAwKSB7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4udHJhbnNmZXIoX2VzY3JvdywgdG9rZW5CYWxhbmNlKSkgewogICAgICAgICAgICAgICAgICAgIFdpdGhkcmF3VG9rZW4oX2VzY3JvdywgYWRkcmVzcyh0b2tlbiksIHRva2VuQmFsYW5jZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFdpdGhkcmF3IGV0aGVyIGFuZCB0b2tlbnMgdG8gZXNjcm93LiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlcgogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGhlcigpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgd2l0aGRyYXdFdGhlclRvKGVzY3Jvdyk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IFdpdGhkcmF3IGV0aGVyIGFuZCB0b2tlbnMgdG8gcmVzZXJ2ZSBlc2Nyb3cuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICBmdW5jdGlvbiB3aXRoZHJhd0V0aGVyVG9SZXNlcnZlRXNjcm93KCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICB3aXRoZHJhd0V0aGVyVG8ocmVzZXJ2ZUVzY3Jvdyk7CiAgICB9CiAgICAKICAgIC8vLyBAZGV2IEVuYWJsZXMgZGlzYWJsZWQgSUNPLiBDYW4gYmUgY2FsbGVkIG9ubHkgYnkgbWFuYWdlcgogICAgZnVuY3Rpb24gcnVuSWNvKCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICBhc3NlcnQoaXNJY29TdG9wcGVkKTsKICAgICAgICBpc0ljb1N0b3BwZWQgPSBmYWxzZTsKICAgICAgICBJY29SdW5uZWRNYW51YWxseSgpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBEaXNhYmxlcyBJQ08uIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICBmdW5jdGlvbiBzdG9wSWNvKCkgcHVibGljIG9ubHlNYW5hZ2VyIHsKICAgICAgICBpc0ljb1N0b3BwZWQgPSB0cnVlOwogICAgICAgIEljb1N0b3BwZWRNYW51YWxseSgpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBGYWxsYmFjayBmdW5jdGlvbi4gQnV5IFJNQyB0b2tlbnMgb24gc2VuZGluZyBldGhlcgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGJ1eVRva2Vucyhtc2cuc2VuZGVyLCBtc2cudmFsdWUpOwogICAgfQogICAgCiAgICAvLy8gQGRldiBHaXZlcyBib3VudHkgcmV3YXJkIHRvIHVzZXIuIENhbiBiZSBjYWxsZWQgb25seSBieSBtYW5hZ2VyCiAgICAvLy8gQHBhcmFtIF90byBBZGRyZXNzIG9mIHVzZXIKICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBBbW91bnQgb2YgYm91bnR5CiAgICBmdW5jdGlvbiBnaXZlUmV3YXJkKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHB1YmxpYyBvbmx5TWFuYWdlciB7CiAgICAgICAgYXNzZXJ0KF90byAhPSAweDApOwogICAgICAgIGFzc2VydChfYW1vdW50ID4gMCk7CiAgICAgICAgYXNzZXJ0KGFkZChib3VudHlTdXBwbGllZCwgX2Ftb3VudCkgPD0gQk9VTlRZX1NVUFBMWSk7CiAgICAgICAgCiAgICAgICAgYm91bnR5U3VwcGxpZWQgPSBhZGQoYm91bnR5U3VwcGxpZWQsIF9hbW91bnQpOwogICAgICAgIGJhbGFuY2VzW190b10gPSBhZGQoYmFsYW5jZXNbX3RvXSwgX2Ftb3VudCk7CiAgICAgICAgCiAgICAgICAgR2l2ZVJld2FyZChfdG8sIF9hbW91bnQpOwogICAgfQogICAgCiAgICAvLy8gQWRkcyBvdGhlciBFUkMtMjAgZnVuY3Rpb25zCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9Cn0='.
	

]
