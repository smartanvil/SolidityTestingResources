Class {
	#name : #SRTcdE056e20843346590dB4dC536535F4192e9b531,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTcdE056e20843346590dB4dC536535F4192e9b531 >> base64 [
	^ ''.
	

]
