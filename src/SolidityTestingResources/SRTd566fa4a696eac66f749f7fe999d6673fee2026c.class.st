Class {
	#name : #SRTd566fa4a696eac66f749f7fe999d6673fee2026c,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd566fa4a696eac66f749f7fe999d6673fee2026c >> base64 [
	^ ''.
	

]
