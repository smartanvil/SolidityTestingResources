Class {
	#name : #SRTd68cb2a1f51171c295cac3a7d27c15068922de8a,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTd68cb2a1f51171c295cac3a7d27c15068922de8a >> base64 [
	^ ''.
	

]
