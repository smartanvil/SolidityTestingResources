Class {
	#name : #SRTc8d40dd5f0967d7de1e65f358c5c7f546b1c09ec,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTc8d40dd5f0967d7de1e65f358c5c7f546b1c09ec >> base64 [
	^ ''.
	

]
