Class {
	#name : #SRT92610183c05372672bc86c3d9a7c94e2a6d00453,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT92610183c05372672bc86c3d9a7c94e2a6d00453 >> base64 [
	^ ''.
	

]
