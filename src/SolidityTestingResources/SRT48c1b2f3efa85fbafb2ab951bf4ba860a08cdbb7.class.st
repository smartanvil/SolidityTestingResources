Class {
	#name : #SRT48c1b2f3efa85fbafb2ab951bf4ba860a08cdbb7,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT48c1b2f3efa85fbafb2ab951bf4ba860a08cdbb7 >> base64 [
	^ ''.
	

]
