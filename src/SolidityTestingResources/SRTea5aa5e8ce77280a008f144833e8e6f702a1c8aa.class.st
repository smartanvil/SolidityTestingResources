Class {
	#name : #SRTea5aa5e8ce77280a008f144833e8e6f702a1c8aa,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTea5aa5e8ce77280a008f144833e8e6f702a1c8aa >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuMTY7Ci8qKgogKiBAdGl0bGUgU2FmZU1hdGggYnkgT3BlblplcHBlbGluCiAqIEBkZXYgTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcyB0aGF0IHRocm93IG9uIGVycm9yCiAqLwpsaWJyYXJ5IFNhZmVNYXRoIHsKCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICB1aW50MjU2IGMgPSBhICogYjsKICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOwogICAgICAgIHJldHVybiBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgewogICAgICAgIHVpbnQyNTYgYyA9IGEgKyBiOwogICAgICAgIGFzc2VydChjID49IGEpOwogICAgICAgIHJldHVybiBjOwogICAgfQp9Cgpjb250cmFjdCB0b2tlbiB7CgogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsKICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7CgogICAgfQoKY29udHJhY3QgSUNPIHsKICAgIHVzaW5nIFNhZmVNYXRoIGZvciB1aW50MjU2OwogICAgLy9UaGlzIGljbyBoYXZlIDMgc3RhZ2VzCiAgICBlbnVtIFN0YXRlIHsKICAgICAgICBPbmdvaW4sCiAgICAgICAgU29mdENhcCwKICAgICAgICBTdWNjZXNzZnVsCiAgICB9CiAgICAvL3B1YmxpYyB2YXJpYWJsZXMKICAgIFN0YXRlIHB1YmxpYyBzdGF0ZSA9IFN0YXRlLk9uZ29pbjsgLy9TZXQgaW5pdGlhbCBzdGFnZQogICAgdWludDI1NiBwdWJsaWMgc3RhcnRUaW1lID0gbm93OyAvL2Jsb2NrLXRpbWUgd2hlbiBpdCB3YXMgZGVwbG95ZWQKICAgIHVpbnQyNTYgcHVibGljIGRlbGF5OwogICAgLy9MaXN0IG9mIHByaWNlcywgYXMgYm90aCwgZXRoIGFuZCB0b2tlbiBoYXZlIDE4IGRlY2ltYWwsIGl0cyBhIGRpcmVjdCBmYWN0b3IKICAgIHVpbnRbMl0gcHVibGljIHRhYmxlUHJpY2VzID0gWwogICAgMjUwMCwgLy9mb3IgZmlyc3QgMTBtaWxsaW9uIHRva2VucwogICAgMjAwMAogICAgXTsKICAgIHVpbnQyNTYgcHVibGljIFNvZnRDYXAgPSA0MDAwMDAwMCAqICgxMCAqKiAxOCk7IC8vNDAgbWlsbGlvbiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIEhhcmRDYXAgPSA4MDAwMDAwMCAqICgxMCAqKiAxOCk7IC8vODAgbWlsbGlvbiB0b2tlbnMKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsUmFpc2VkOyAvL2V0aCBpbiB3ZWkKICAgIHVpbnQyNTYgcHVibGljIHRvdGFsRGlzdHJpYnV0ZWQ7IC8vdG9rZW5zCiAgICB1aW50MjU2IHB1YmxpYyBJQ09kZWFkbGluZSA9IHN0YXJ0VGltZS5hZGQoMjEgZGF5cyk7Ly8yMSBkYXlzIGRlYWRsaW5lCiAgICB1aW50MjU2IHB1YmxpYyBjb21wbGV0ZWRBdDsKICAgIHVpbnQyNTYgcHVibGljIGNsb3NlZEF0OwogICAgdG9rZW4gcHVibGljIHRva2VuUmV3YXJkOwogICAgYWRkcmVzcyBwdWJsaWMgY3JlYXRvcjsKICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5OwogICAgc3RyaW5nIHB1YmxpYyBjYW1wYWlnblVybDsKICAgIHVpbnQ4IGNvbnN0YW50IHZlcnNpb24gPSAxOwoKICAgIC8vZXZlbnRzIGZvciBsb2cKICAgIGV2ZW50IExvZ0Z1bmRpbmdSZWNlaXZlZChhZGRyZXNzIF9hZGRyLCB1aW50IF9hbW91bnQsIHVpbnQgX2N1cnJlbnRUb3RhbCk7CiAgICBldmVudCBMb2dCZW5lZmljaWFyeVBhaWQoYWRkcmVzcyBfYmVuZWZpY2lhcnlBZGRyZXNzKTsKICAgIGV2ZW50IExvZ0Z1bmRpbmdTdWNjZXNzZnVsKHVpbnQgX3RvdGFsUmFpc2VkKTsKICAgIGV2ZW50IExvZ0Z1bmRlckluaXRpYWxpemVkKAogICAgICAgIGFkZHJlc3MgX2NyZWF0b3IsCiAgICAgICAgYWRkcmVzcyBfYmVuZWZpY2lhcnksCiAgICAgICAgc3RyaW5nIF91cmwsCiAgICAgICAgdWludDI1NiBfSUNPZGVhZGxpbmUpOwogICAgZXZlbnQgTG9nQ29udHJpYnV0b3JzUGF5b3V0KGFkZHJlc3MgX2FkZHIsIHVpbnQgX2Ftb3VudCk7CgogICAgbW9kaWZpZXIgbm90RmluaXNoZWQoKSB7CiAgICAgICAgcmVxdWlyZShzdGF0ZSAhPSBTdGF0ZS5TdWNjZXNzZnVsKTsKICAgICAgICBfOwogICAgfQogICAgLyoqCiAgICAqIEBub3RpY2UgSUNPIGNvbnN0cnVjdG9yCiAgICAqIEBwYXJhbSBfY2FtcGFpZ25VcmwgaXMgdGhlIElDTyBfdXJsCiAgICAqIEBwYXJhbSBfYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQgaXMgdGhlIHRva2VuIHRvdGFsRGlzdHJpYnV0ZWQKICAgICovCiAgICBmdW5jdGlvbiBJQ08gKHN0cmluZyBfY2FtcGFpZ25VcmwsIHRva2VuIF9hZGRyZXNzT2ZUb2tlblVzZWRBc1Jld2FyZCwgdWludDI1NiBfZGVsYXkpIHB1YmxpYyB7CiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7CiAgICAgICAgYmVuZWZpY2lhcnkgPSBtc2cuc2VuZGVyOwogICAgICAgIGNhbXBhaWduVXJsID0gX2NhbXBhaWduVXJsOwogICAgICAgIHRva2VuUmV3YXJkID0gdG9rZW4oX2FkZHJlc3NPZlRva2VuVXNlZEFzUmV3YXJkKTsKICAgICAgICBkZWxheSA9IHN0YXJ0VGltZS5hZGQoX2RlbGF5ICogMSBob3Vycyk7CiAgICAgICAgTG9nRnVuZGVySW5pdGlhbGl6ZWQoCiAgICAgICAgICAgIGNyZWF0b3IsCiAgICAgICAgICAgIGJlbmVmaWNpYXJ5LAogICAgICAgICAgICBjYW1wYWlnblVybCwKICAgICAgICAgICAgSUNPZGVhZGxpbmUpOwogICAgfQoKICAgIC8qKgogICAgKiBAbm90aWNlIGNvbnRyaWJ1dGlvbiBoYW5kbGVyCiAgICAqLwogICAgZnVuY3Rpb24gY29udHJpYnV0ZSgpIHB1YmxpYyBub3RGaW5pc2hlZCBwYXlhYmxlIHsKICAgICAgICByZXF1aXJlKG5vdyA+IGRlbGF5KTsKICAgICAgICB1aW50IHRva2VuQm91Z2h0OwogICAgICAgIHRvdGFsUmFpc2VkID0gdG90YWxSYWlzZWQuYWRkKG1zZy52YWx1ZSk7CgogICAgICAgIGlmKHRvdGFsRGlzdHJpYnV0ZWQgPCAxMDAwMDAwMCAqICgxMCAqKiAxOCkpeyAvL2lmIG9uIHRoZSBmaXJzdCAxME0KICAgICAgICAgICAgdG9rZW5Cb3VnaHQgPSBtc2cudmFsdWUubXVsKHRhYmxlUHJpY2VzWzBdKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRva2VuQm91Z2h0ID0gbXNnLnZhbHVlLm11bCh0YWJsZVByaWNlc1sxXSk7CiAgICAgICAgfQoKICAgICAgICB0b3RhbERpc3RyaWJ1dGVkID0gdG90YWxEaXN0cmlidXRlZC5hZGQodG9rZW5Cb3VnaHQpOwogICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKG1zZy5zZW5kZXIsIHRva2VuQm91Z2h0KTsKICAgICAgICAKICAgICAgICBMb2dGdW5kaW5nUmVjZWl2ZWQobXNnLnNlbmRlciwgbXNnLnZhbHVlLCB0b3RhbFJhaXNlZCk7CiAgICAgICAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KG1zZy5zZW5kZXIsIHRva2VuQm91Z2h0KTsKICAgICAgICAKICAgICAgICBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCk7CiAgICB9CgogICAgLyoqCiAgICAqIEBub3RpY2UgY2hlY2sgc3RhdHVzCiAgICAqLwogICAgZnVuY3Rpb24gY2hlY2tJZkZ1bmRpbmdDb21wbGV0ZU9yRXhwaXJlZCgpIHB1YmxpYyB7CiAgICAgICAgCiAgICAgICAgaWYobm93IDwgSUNPZGVhZGxpbmUgJiYgc3RhdGUhPVN0YXRlLlN1Y2Nlc3NmdWwpeyAvL2lmIHdlIGFyZSBvbiBJQ08gcGVyaW9kIGFuZCBpdHMgbm90IFN1Y2Nlc3NmdWwKICAgICAgICAgICAgaWYoc3RhdGUgPT0gU3RhdGUuT25nb2luICYmIHRvdGFsUmFpc2VkID49IFNvZnRDYXApeyAvL2lmIHdlIGFyZSBPbmdvaW4gYW5kIHdlIHBhc3MgdGhlIFNvZnRDYXAKICAgICAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuU29mdENhcDsgLy9XZSBhcmUgb24gU29mdENhcCBzdGF0ZQogICAgICAgICAgICAgICAgY29tcGxldGVkQXQgPSBub3c7IC8vSUNPIGlzIGNvbXBsZXRlIGFuZCB3aWxsIGZpbmlzaCBpbiAyNGgKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PSBTdGF0ZS5Tb2Z0Q2FwICYmIG5vdyA+IGNvbXBsZXRlZEF0LmFkZCgyNCBob3VycykpeyAvL2lmIHdlIGFyZSBvbiBTb2Z0Q2FwIHN0YXRlIGFuZCAyNGhycyBoYXZlIHBhc3NlZAogICAgICAgICAgICAgICAgc3RhdGUgPT0gU3RhdGUuU3VjY2Vzc2Z1bDsgLy90aGUgaWNvIGJlY29tZXMgU3VjY2Vzc2Z1bAogICAgICAgICAgICAgICAgY2xvc2VkQXQgPSBub3c7IC8vd2UgZmluaXNoIG5vdwogICAgICAgICAgICAgICAgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodG90YWxSYWlzZWQpOyAvL3dlIGxvZyB0aGUgZmluaXNoCiAgICAgICAgICAgICAgICBmaW5pc2hlZCgpOyAvL2FuZCBleGVjdXRlIGNsb3N1cmUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIGlmKG5vdyA+IElDT2RlYWRsaW5lICYmIHN0YXRlIT1TdGF0ZS5TdWNjZXNzZnVsICkgeyAvL2lmIHdlIHJlYWNoIGljbyBkZWFkbGluZSBhbmQgaXRzIG5vdCBTdWNjZXNzZnVsIHlldAogICAgICAgICAgICBzdGF0ZSA9IFN0YXRlLlN1Y2Nlc3NmdWw7IC8vaWNvIGJlY29tZXMgU3VjY2Vzc2Z1bAoKICAgICAgICAgICAgaWYoY29tcGxldGVkQXQgPT0gMCl7ICAvL2lmIG5vdCBjb21wbGV0ZWQgcHJldmlvdXNseQogICAgICAgICAgICAgICAgY29tcGxldGVkQXQgPSBub3c7IC8vd2UgY29tcGxldGUgbm93CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNsb3NlZEF0ID0gbm93OyAvL3dlIGZpbmlzaCBub3cKICAgICAgICAgICAgTG9nRnVuZGluZ1N1Y2Nlc3NmdWwodG90YWxSYWlzZWQpOyAvL3dlIGxvZyB0aGUgZmluaXNoCiAgICAgICAgICAgIGZpbmlzaGVkKCk7IC8vYW5kIGV4ZWN1dGUgY2xvc3VyZQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwYXlPdXQoKSBwdWJsaWMgewogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBiZW5lZmljaWFyeSk7CiAgICAgICAgcmVxdWlyZShiZW5lZmljaWFyeS5zZW5kKHRoaXMuYmFsYW5jZSkpOwogICAgICAgIExvZ0JlbmVmaWNpYXJ5UGFpZChiZW5lZmljaWFyeSk7CiAgICB9CgogICAvKioKICAgICogQG5vdGljZSBjbG9zdXJlIGhhbmRsZXIKICAgICovCiAgICBmdW5jdGlvbiBmaW5pc2hlZCgpIHB1YmxpYyB7IC8vV2hlbiBmaW5pc2hlZCBldGggYXJlIHRyYW5zZmVyZWQgdG8gYmVuZWZpY2lhcnkKICAgICAgICByZXF1aXJlKHN0YXRlID09IFN0YXRlLlN1Y2Nlc3NmdWwpOwogICAgICAgIHVpbnQyNTYgcmVtYW5lbnQgPSB0b2tlblJld2FyZC5iYWxhbmNlT2YodGhpcyk7CgogICAgICAgIHJlcXVpcmUoYmVuZWZpY2lhcnkuc2VuZCh0aGlzLmJhbGFuY2UpKTsKICAgICAgICB0b2tlblJld2FyZC50cmFuc2ZlcihiZW5lZmljaWFyeSxyZW1hbmVudCk7CgogICAgICAgIExvZ0JlbmVmaWNpYXJ5UGFpZChiZW5lZmljaWFyeSk7CiAgICAgICAgTG9nQ29udHJpYnV0b3JzUGF5b3V0KGJlbmVmaWNpYXJ5LCByZW1hbmVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gKCkgcHVibGljIHBheWFibGUgewogICAgICAgIGNvbnRyaWJ1dGUoKTsKICAgIH0KfQ=='.
	

]
