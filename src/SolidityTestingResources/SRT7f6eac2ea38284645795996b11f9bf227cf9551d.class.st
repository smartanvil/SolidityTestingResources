Class {
	#name : #SRT7f6eac2ea38284645795996b11f9bf227cf9551d,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT7f6eac2ea38284645795996b11f9bf227cf9551d >> base64 [
	^ ''.
	

]
