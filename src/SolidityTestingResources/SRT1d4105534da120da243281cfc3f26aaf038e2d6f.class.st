Class {
	#name : #SRT1d4105534da120da243281cfc3f26aaf038e2d6f,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRT1d4105534da120da243281cfc3f26aaf038e2d6f >> base64 [
	^ ''.
	

]
