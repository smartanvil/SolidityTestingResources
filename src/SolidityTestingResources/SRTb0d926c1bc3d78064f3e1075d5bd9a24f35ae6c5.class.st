Class {
	#name : #SRTb0d926c1bc3d78064f3e1075d5bd9a24f35ae6c5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTb0d926c1bc3d78064f3e1075d5bd9a24f35ae6c5 >> base64 [
	^ ''.
	

]
