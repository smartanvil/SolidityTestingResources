Class {
	#name : #SRTF0f8B0B8DBB1124261FC8d778E2287e3Fd2Cf4f5,
	#superclass : #SRTContracts,
	#category : #SolidityTestingResources
}

{ #category : #base64 }
SRTF0f8B0B8DBB1124261FC8d778E2287e3Fd2Cf4f5 >> base64 [
	^ 'cHJhZ21hIHNvbGlkaXR5IF4wLjQuODsKCgpjb250cmFjdCBvd25lZCAKICAgewogICBhZGRyZXNzIHB1YmxpYyBvd25lcjsKCiAgIGZ1bmN0aW9uIG93bmVkKCkgCiAgICAgIHsKICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOwogICAgICB9CgogICBtb2RpZmllciBvbmx5T3duZXIgCiAgICAgIHsKICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93OwogICAgICBfOwogICAgICB9CiAgIH0KCgpjb250cmFjdCBiaXRxeVJlY2lwaWVudCAKICAgeyAKICAgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IAogICB9CgoKY29udHJhY3QgYml0cXkgaXMgb3duZWQgewogICAvKiAgIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIGNvaW4gICAqLwogICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsKICAgc3RyaW5nIHB1YmxpYyBuYW1lOwogICBzdHJpbmcgcHVibGljIHN5bWJvbDsKICAgdWludDggcHVibGljIGRlY2ltYWxzOwoKCiAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsgICAvLyAgIEFycmF5IG9mIGJhbGFuY2VzCiAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7ICAgLy8gICBBcnJheSBvZiBmcm96ZW4gYWNjb3VudHMKICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOyAgIC8vICAgQXJyYXkgb2YgYWxsb3dhbmNlcwoKCiAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOwogICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOwoKCiAgIC8qICAgSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCB0aGUgaW5pdGlhbCBzdXBwbHkgb2YgY29pbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICAgKi8KICAgZnVuY3Rpb24gYml0cXkoCiAgICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwKICAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwKICAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLAogICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wKICAgICAgICAgKSAKICAgICAgewogICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBpbml0aWFsU3VwcGx5OwogICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7CiAgICAgIG5hbWUgPSB0b2tlbk5hbWU7CiAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOwogICAgICBkZWNpbWFscyA9IGRlY2ltYWxVbml0czsKICAgICAgfQoKCiAgIC8qICAgU2VuZCBjb2lucyAgICovCiAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSAKICAgICAgewogICAgICAvKiAgIENoZWNrcyBpZiBzZW5kZXIgaGFzIGVub3VnaCBiYWxhbmNlLCBjaGVja3MgZm9yIG92ZXJmbG93cyBhbmQgY2hlY2tzIGlmIHRoZSBhY2NvdW50IGlzIGZyb3plbiAgICovCiAgICAgIGlmICgoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB8fCAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgfHwgKGZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pIHx8IChmcm96ZW5BY2NvdW50W190b10pKQogICAgICAgICB7CiAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQoKICAgICAgZWxzZQogICAgICAgICB7CiAgICAgICAgIC8qICAgQWRkIGFuZCBzdWJ0cmFjdCBuZXcgYmFsYW5jZXMgICAqLwogICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOwogICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7CgogICAgICAgICAvKiAgIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlICAgKi8KICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOwogICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgfQogICAgICB9CgoKICAgIC8qICAgQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIGNvaW5zIG9uIHlvdXIgYmVoYWxmICAgKi8KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgCiAgICAgIHsKICAgICAgaWYgKChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSB8fCAoZnJvemVuQWNjb3VudFtfc3BlbmRlcl0pKQogICAgICAgICB7CiAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgfQoKICAgICAgZWxzZQogICAgICAgICB7CiAgICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7CiAgICAgICAgIGJpdHF5UmVjaXBpZW50IHNwZW5kZXIgPSBiaXRxeVJlY2lwaWVudChfc3BlbmRlcik7CiAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICB9CiAgICAgIH0KCgoKICAgLyogICBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgICAqLwogICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIAogICAgICB7CiAgICAgIGlmICgoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgfHwgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHx8IChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB8fCAoZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgfHwgKGZyb3plbkFjY291bnRbX2Zyb21dKSB8fCAoZnJvemVuQWNjb3VudFtfdG9dKSkKICAgICAgICAgewogICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgIH0KCiAgICAgIGVsc2UKICAgICAgICAgewogICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsKICAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7CiAgICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsKICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsKICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgIH0KICAgICAgfQoKCiAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBvbmx5T3duZXIgCiAgICAgIHsKICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOwogICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7CiAgICAgIH0KCgogICBmdW5jdGlvbiBsZWdhbCgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBjb250ZW50KSAKICAgICAgewogICAgICBjb250ZW50ID0gImJpdHF5LCB0aGUgaW4tYXBwIHRva2VuIGZvciBiaXRxeWNrXG5cbmJpdHF5IGlzIGEgY3J5cHRvY3VycmVuY3kgdG9rZW4gZm9yIHRoZSBtYXJrZXRwbGFjZSBwbGF0Zm9ybSBiaXRxeWNrIGFuZCB0aGUgZ2VuZXJhbCBtYXJrZXQgYXMgaXQgaXMgYWNjZXB0ZWQgYnkgYnVzaW5lc3NlcyBhbmQgY29uc3VtZXJzIGdsb2JhbGx5LiBiaXRxeSB3aWxsIGJlIGFsbG9jYXRlZCBieSB0aGUgZGlyZWN0b3JzIG9mIGJpdHF5Y2ssIEluYy4gT25jZSBhbGxvY2F0ZWQsIGJpdHF5Y2sgcmVsaW5xdWlzaGVzIGNvbnRyb2wgb2YgdGhlIGFsbG9jYXRlZCBiaXRxeVxuXG5UaGUgbGF0ZXN0IGFuZCBtb3N0IHVwIHRvIGRhdGUgbGVnYWwgZGlzY2xvc3VyZXMgY2FuIGFsd2F5cyBiZSBmb3VuZCBvbiYjMTYwO2JpdHF5Lm9yZy5cblxuQWRkaXRpb25hbGx5LCBiaXRxeWNrLCBJbmMuLCBhIFRleGFzIGNvcnBvcmF0aW9uLCBjZXJ0aWZpZXM6XG4gICAqIHRoYXQgaXQgaGFzIGF1dGhvcml6ZWQgdGhlIG1pbnRpbmcgb2YgdGVuIGJpbGxpb24gZGlnaXRhbCB0b2tlbnMga25vd24gYXMgXCJiaXRxeSB0b2tlbnNcIiBvciBcImJpdHF5IGNvaW5zLFwiIGNyZWF0ZWQgb24gdGhlIEV0aGVyZXVtIEJsb2NrY2hhaW4gQXBwIFBsYXRmb3JtIGFuZCwgZnVydGhlciBjZXJ0aWZpZXMsXG4gICAqIHRoYXQgdGhyb3VnaCBpdHMgZGlyZWN0b3JzIGFuZCBmb3VuZGVycywgaGFzIGR1bHkgYXV0aG9yaXplZCBvbmUgYmlsbGlvbiBzaGFyZXMgb2YgY29tbW9uIHN0b2NrIGFzIHRoZSBvbmx5IGNsYXNzIG9mIG93bmVyc2hpcCBzaGFyZXMgaW4gdGhlIENvcnBvcmF0aW9uLCBhbmQgZnVydGhlciBjZXJ0aWZpZXMsXG4gICAqIHRoYXQgdGhlIGJpdHF5IHRva2VucyBhcmUgb25seSBjcmVhdGVkIGJ5IHRoZSBzbWFydCBjb250cmFjdCB0aGF0IHRoZXNlIGNlcnRpZmljYXRpb25zIGFyZSBlbnVtZXJhdGVkIHdpdGhpbiBhbmQsIGZ1cnRoZXIgY2VydGlmaWVzLFxuICAgKiB0aGF0IHRoZSBob2xkZXIgb2YgYSBiaXRxeSB0b2tlbiwgaXMgYWxzbyB0aGUgaG9sZGVyIG9mIG9uZS10ZW50aCBvZiBhIHNoYXJlIG9mIGJpdHF5Y2ssIEluYy4gY29tbW9uIHN0b2NrLCBhbmQgZnVydGhlciBjZXJ0aWZpZXMsXG4gICAqIHRoYXQgdGhlIGhvbGRlciBvZiB0aGlzIGNvaW4gc2hhbGwgZW5qb3kgdGhlIHJpZ2h0cyBhbmQgYmVuZWZpdHMgYXMgYSBzaGFyZWhvbGRlciBvZiBiaXRxeWNrLCBJbmMuIHB1cnN1YW50IHRvIHRoZSBzaGFyZWhvbGRlciBydWxlcyBhcyBkZXRlcm1pbmVkIGZyb20gdGltZSB0byB0aW1lIGJ5IHRoZSBkaXJlY3RvcnMgb3IgbWFqb3JpdHkgc2hhcmVob2xkZXJzIG9mIGJpdHF5Y2ssIEluYy4gYW5kIE9OTFkgSUYgdGhlIGJpdHF5IGhvbGRlciBoYXMgaGlzL2hlciBiaXRxeSB0b2tlbnMgaW4gdGhlIG9mZmljaWFsIGJpdHF5IHdhbGxldCBvcGVyYXRlZCBhbmQgbWFpbnRhaW5lZCBieSBiaXRxeWNrLCBJbmMuLCBhbmQgZnVydGhlciBjZXJ0aWZpZXMsXG4gICAqIHB1cnN1YW50IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyB0aGF0IHRoZSBkaXJlY3RvcnMgYW5kIGZvdW5kZXJzIGF0dGFjaCB0byB0aGUgYml0cXkgdG9rZW4sIGFuZCBmdXJ0aGVyIGNlcnRpZmllc1xuICAgKiB0aGF0IHRoaXMgYml0cXkgdG9rZW4gaXMgZnJlZWx5IHRyYW5zZmVyYWJsZSBieSB0aGUgaG9sZGVyIGhlcmVvZiBpbiBhbnkgbWFubmVyLCB3aGljaCBzYWlkIGhvbGRlciBkZWVtcyBhcHByb3ByaWF0ZSBhbmQgcmVhc29uYWJsZS5cblRoZSBob2xkZXIgb2YgdGhpcyBiaXRxeSB0b2tlbiBjZXJ0aWZpZXMgdGhhdCBoZSBvciBzaGUgaGFzIG93bmVyc2hpcCBhbmQgcG9zc2Vzc2lvbiBwdXJzdWFudCB0byBhIGxlZ2FsIHRyYW5zYWN0aW9uIG9yIHRyYW5zZmVyIGZyb20gdGhlIHByaW9yIGhvbGRlci5cblxuIjsKICAgICAgcmV0dXJuIGNvbnRlbnQ7CiAgICAgIH0KCgoKICAgLyogICBJZiBubyBvdGhlciBmdW5jdGlvbnMgYXJlIG1hdGNoZWQgICAqLwogICBmdW5jdGlvbiAoKSAKICAgICAgewogICAgICB0aHJvdzsgICAvLyAgIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlciBhbmQgb3RoZXIgcG90ZW50aWFsIHByb2JsZW1zCiAgICAgIH0KCgogICB9'.
	

]
